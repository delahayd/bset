(set-logic AUFBVDTLIRA)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
(declare-sort uni 0)

(declare-sort ty 0)

(declare-fun sort (ty uni) Bool)

(declare-fun witness (ty) uni)

;; witness_sort
  (assert (forall ((a2 ty)) (sort a2 (witness a2))))

(declare-fun int () ty)

(declare-fun real () ty)

(declare-sort set 1)

(declare-fun set1 (ty) ty)

(declare-sort c 0)

(declare-fun c1 () ty)

(declare-sort b 0)

(declare-fun b1 () ty)

(declare-sort a 0)

(declare-fun a1 () ty)

(declare-sort tuple21 2)

(declare-fun tuple2 (ty ty) ty)

(declare-fun mem (ty uni uni) Bool)

(declare-fun mem1 (a (set a)) Bool)

(declare-fun mem2 (b (set b)) Bool)

(declare-fun mem3 ((tuple21 a b) (set (tuple21 a b))) Bool)

(declare-fun mem4 ((set (tuple21 a b)) (set (set (tuple21 a b)))) Bool)

(declare-fun mem7 (c (set c)) Bool)

(declare-fun mem27 ((tuple21 c a) (set (tuple21 c a))) Bool)

(declare-fun mem28 ((tuple21 c b) (set (tuple21 c b))) Bool)

(declare-fun infix_eqeq (ty uni uni) Bool)

(declare-fun infix_eqeq1 ((set a) (set a)) Bool)

(declare-fun infix_eqeq3 ((set b) (set b)) Bool)

(declare-fun infix_eqeq4 ((set (tuple21 a b)) (set (tuple21 a b))) Bool)

(declare-fun infix_eqeq5 ((set (set (tuple21 a b))) (set (set (tuple21 a
  b)))) Bool)

(declare-fun infix_eqeq7 ((set c) (set c)) Bool)

(declare-fun infix_eqeq11 ((set (tuple21 c a)) (set (tuple21 c a))) Bool)

(declare-fun infix_eqeq12 ((set (tuple21 c b)) (set (tuple21 c b))) Bool)

;; infix ==_def
  (assert
  (forall ((s (set (tuple21 c b))) (t (set (tuple21 c b))))
  (= (infix_eqeq12 s t)
  (forall ((x (tuple21 c b))) (= (mem28 x s) (mem28 x t))))))

;; infix ==_def
  (assert
  (forall ((s (set (tuple21 c a))) (t (set (tuple21 c a))))
  (= (infix_eqeq11 s t)
  (forall ((x (tuple21 c a))) (= (mem27 x s) (mem27 x t))))))

;; infix ==_def
  (assert
  (forall ((s (set c)) (t (set c)))
  (= (infix_eqeq7 s t) (forall ((x c)) (= (mem7 x s) (mem7 x t))))))

;; infix ==_def
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set (set (tuple21 a b)))))
  (= (infix_eqeq5 s t)
  (forall ((x (set (tuple21 a b)))) (= (mem4 x s) (mem4 x t))))))

;; infix ==_def
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (tuple21 a b))))
  (= (infix_eqeq4 s t)
  (forall ((x (tuple21 a b))) (= (mem3 x s) (mem3 x t))))))

;; infix ==_def
  (assert
  (forall ((s (set b)) (t (set b)))
  (= (infix_eqeq3 s t) (forall ((x b)) (= (mem2 x s) (mem2 x t))))))

;; infix ==_def
  (assert
  (forall ((s (set a)) (t (set a)))
  (= (infix_eqeq1 s t) (forall ((x a)) (= (mem1 x s) (mem1 x t))))))

;; infix ==_def
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t uni))
  (and
  (=> (infix_eqeq a2 s t) (forall ((x uni)) (= (mem a2 x s) (mem a2 x t))))
  (=> (forall ((x uni)) (=> (sort a2 x) (= (mem a2 x s) (mem a2 x t))))
  (infix_eqeq a2 s t))))))

(declare-fun power (ty uni) uni)

;; power_sort
  (assert
  (forall ((a2 ty)) (forall ((x uni)) (sort (set1 (set1 a2)) (power a2 x)))))

(declare-fun non_empty_power (ty uni) uni)

;; non_empty_power_sort
  (assert
  (forall ((a2 ty))
  (forall ((x uni)) (sort (set1 (set1 a2)) (non_empty_power a2 x)))))

(declare-fun subset1 (ty uni uni) Bool)

(declare-fun subset2 ((set a) (set a)) Bool)

(declare-fun subset5 ((set b) (set b)) Bool)

(declare-fun subset6 ((set (tuple21 a b)) (set (tuple21 a b))) Bool)

(declare-fun subset7 ((set (set (tuple21 a b))) (set (set (tuple21 a
  b)))) Bool)

(declare-fun subset9 ((set c) (set c)) Bool)

(declare-fun subset23 ((set (tuple21 c a)) (set (tuple21 c a))) Bool)

(declare-fun subset24 ((set (tuple21 c b)) (set (tuple21 c b))) Bool)

(declare-fun t2tb222 ((set (tuple21 c b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 c b)))) (sort (set1 (tuple2 c1 b1)) (t2tb222 x))))

(declare-fun tb2t222 (uni) (set (tuple21 c b)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 c b))))
  (! (= (tb2t222 (t2tb222 i)) i) :pattern ((t2tb222 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 c1 b1)) j) (= (t2tb222 (tb2t222 j)) j)) :pattern (
  (t2tb222 (tb2t222 j))) )))

(declare-fun t2tb308 ((set (set (tuple21 c b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 c b))))) (sort (set1 (set1 (tuple2 c1 b1)))
  (t2tb308 x))))

(declare-fun tb2t308 (uni) (set (set (tuple21 c b))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 c b)))))
  (! (= (tb2t308 (t2tb308 i)) i) :pattern ((t2tb308 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 c1 b1))) j) (= (t2tb308 (tb2t308 j)) j)) :pattern (
  (t2tb308 (tb2t308 j))) )))

;; subset_def
  (assert
  (forall ((s (set (tuple21 c b))) (t (set (tuple21 c b))))
  (= (subset24 s t) (mem (set1 (tuple2 c1 b1)) (t2tb222 s)
  (power (tuple2 c1 b1) (t2tb222 t))))))

(declare-fun t2tb309 ((set (set (tuple21 c a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 c a))))) (sort (set1 (set1 (tuple2 c1 a1)))
  (t2tb309 x))))

(declare-fun tb2t309 (uni) (set (set (tuple21 c a))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 c a)))))
  (! (= (tb2t309 (t2tb309 i)) i) :pattern ((t2tb309 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 c1 a1))) j) (= (t2tb309 (tb2t309 j)) j)) :pattern (
  (t2tb309 (tb2t309 j))) )))

(declare-fun t2tb224 ((set (tuple21 c a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 c a)))) (sort (set1 (tuple2 c1 a1)) (t2tb224 x))))

(declare-fun tb2t224 (uni) (set (tuple21 c a)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 c a))))
  (! (= (tb2t224 (t2tb224 i)) i) :pattern ((t2tb224 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 c1 a1)) j) (= (t2tb224 (tb2t224 j)) j)) :pattern (
  (t2tb224 (tb2t224 j))) )))

;; subset_def
  (assert
  (forall ((s (set (tuple21 c a))) (t (set (tuple21 c a))))
  (= (subset23 s t) (mem (set1 (tuple2 c1 a1)) (t2tb224 s)
  (power (tuple2 c1 a1) (t2tb224 t))))))

(declare-fun t2tb132 ((set c)) uni)

;; t2tb_sort
  (assert (forall ((x (set c))) (sort (set1 c1) (t2tb132 x))))

(declare-fun tb2t132 (uni) (set c))

;; BridgeL
  (assert
  (forall ((i (set c)))
  (! (= (tb2t132 (t2tb132 i)) i) :pattern ((t2tb132 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 c1) j) (= (t2tb132 (tb2t132 j)) j)) :pattern ((t2tb132
                                                                   (tb2t132
                                                                   j))) )))

(declare-fun t2tb264 ((set (set c))) uni)

;; t2tb_sort
  (assert (forall ((x (set (set c)))) (sort (set1 (set1 c1)) (t2tb264 x))))

(declare-fun tb2t264 (uni) (set (set c)))

;; BridgeL
  (assert
  (forall ((i (set (set c))))
  (! (= (tb2t264 (t2tb264 i)) i) :pattern ((t2tb264 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 c1)) j) (= (t2tb264 (tb2t264 j)) j)) :pattern (
  (t2tb264 (tb2t264 j))) )))

;; subset_def
  (assert
  (forall ((s (set c)) (t (set c)))
  (= (subset9 s t) (mem (set1 c1) (t2tb132 s) (power c1 (t2tb132 t))))))

(declare-fun t2tb43 ((set (set (set (tuple21 a b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (set (tuple21 a b)))))) (sort
  (set1 (set1 (set1 (tuple2 a1 b1)))) (t2tb43 x))))

(declare-fun tb2t43 (uni) (set (set (set (tuple21 a b)))))

;; BridgeL
  (assert
  (forall ((i (set (set (set (tuple21 a b))))))
  (! (= (tb2t43 (t2tb43 i)) i) :pattern ((t2tb43 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (set1 (tuple2 a1 b1)))) j)
     (= (t2tb43 (tb2t43 j)) j)) :pattern ((t2tb43 (tb2t43 j))) )))

(declare-fun t2tb10 ((set (set (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 a b))))) (sort (set1 (set1 (tuple2 a1 b1)))
  (t2tb10 x))))

(declare-fun tb2t10 (uni) (set (set (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 a b)))))
  (! (= (tb2t10 (t2tb10 i)) i) :pattern ((t2tb10 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 a1 b1))) j) (= (t2tb10 (tb2t10 j)) j)) :pattern (
  (t2tb10 (tb2t10 j))) )))

;; subset_def
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set (set (tuple21 a b)))))
  (= (subset7 s t) (mem (set1 (set1 (tuple2 a1 b1))) (t2tb10 s)
  (power (set1 (tuple2 a1 b1)) (t2tb10 t))))))

(declare-fun t2tb11 ((set (tuple21 a b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a b)))) (sort (set1 (tuple2 a1 b1)) (t2tb11 x))))

(declare-fun tb2t11 (uni) (set (tuple21 a b)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a b))))
  (! (= (tb2t11 (t2tb11 i)) i) :pattern ((t2tb11 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 b1)) j) (= (t2tb11 (tb2t11 j)) j)) :pattern (
  (t2tb11 (tb2t11 j))) )))

;; subset_def
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (tuple21 a b))))
  (= (subset6 s t) (mem4 s (tb2t10 (power (tuple2 a1 b1) (t2tb11 t)))))))

(declare-fun t2tb12 ((set b)) uni)

;; t2tb_sort
  (assert (forall ((x (set b))) (sort (set1 b1) (t2tb12 x))))

(declare-fun tb2t12 (uni) (set b))

;; BridgeL
  (assert
  (forall ((i (set b))) (! (= (tb2t12 (t2tb12 i)) i) :pattern ((t2tb12 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 b1) j) (= (t2tb12 (tb2t12 j)) j)) :pattern ((t2tb12
                                                                 (tb2t12 j))) )))

(declare-fun t2tb44 ((set (set b))) uni)

;; t2tb_sort
  (assert (forall ((x (set (set b)))) (sort (set1 (set1 b1)) (t2tb44 x))))

(declare-fun tb2t44 (uni) (set (set b)))

;; BridgeL
  (assert
  (forall ((i (set (set b))))
  (! (= (tb2t44 (t2tb44 i)) i) :pattern ((t2tb44 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 b1)) j) (= (t2tb44 (tb2t44 j)) j)) :pattern (
  (t2tb44 (tb2t44 j))) )))

;; subset_def
  (assert
  (forall ((s (set b)) (t (set b)))
  (= (subset5 s t) (mem (set1 b1) (t2tb12 s) (power b1 (t2tb12 t))))))

(declare-fun t2tb ((set (set a))) uni)

;; t2tb_sort
  (assert (forall ((x (set (set a)))) (sort (set1 (set1 a1)) (t2tb x))))

(declare-fun tb2t (uni) (set (set a)))

;; BridgeL
  (assert
  (forall ((i (set (set a)))) (! (= (tb2t (t2tb i)) i) :pattern ((t2tb i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 a1)) j) (= (t2tb (tb2t j)) j)) :pattern ((t2tb
                                                                    (tb2t j))) )))

(declare-fun t2tb1 ((set a)) uni)

;; t2tb_sort
  (assert (forall ((x (set a))) (sort (set1 a1) (t2tb1 x))))

(declare-fun tb2t1 (uni) (set a))

;; BridgeL
  (assert
  (forall ((i (set a))) (! (= (tb2t1 (t2tb1 i)) i) :pattern ((t2tb1 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 a1) j) (= (t2tb1 (tb2t1 j)) j)) :pattern ((t2tb1
                                                               (tb2t1 j))) )))

;; subset_def
  (assert
  (forall ((s (set a)) (t (set a)))
  (= (subset2 s t) (mem (set1 a1) (t2tb1 s) (power a1 (t2tb1 t))))))

;; subset_def
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t uni))
  (= (subset1 a2 s t) (mem (set1 a2) s (power a2 t))))))

(declare-fun subsetnoteq (ty uni uni) Bool)

;; subsetnoteq_def
  (assert
  (forall ((s (set (tuple21 c b))) (t (set (tuple21 c b))))
  (= (subsetnoteq (tuple2 c1 b1) (t2tb222 s) (t2tb222 t))
  (and (subset24 s t) (not (infix_eqeq12 s t))))))

;; subsetnoteq_def
  (assert
  (forall ((s (set (tuple21 c a))) (t (set (tuple21 c a))))
  (= (subsetnoteq (tuple2 c1 a1) (t2tb224 s) (t2tb224 t))
  (and (subset23 s t) (not (infix_eqeq11 s t))))))

;; subsetnoteq_def
  (assert
  (forall ((s (set c)) (t (set c)))
  (= (subsetnoteq c1 (t2tb132 s) (t2tb132 t))
  (and (subset9 s t) (not (infix_eqeq7 s t))))))

;; subsetnoteq_def
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set (set (tuple21 a b)))))
  (= (subsetnoteq (set1 (tuple2 a1 b1)) (t2tb10 s) (t2tb10 t))
  (and (subset7 s t) (not (infix_eqeq5 s t))))))

;; subsetnoteq_def
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (tuple21 a b))))
  (= (subsetnoteq (tuple2 a1 b1) (t2tb11 s) (t2tb11 t))
  (and (subset6 s t) (not (infix_eqeq4 s t))))))

;; subsetnoteq_def
  (assert
  (forall ((s (set b)) (t (set b)))
  (= (subsetnoteq b1 (t2tb12 s) (t2tb12 t))
  (and (subset5 s t) (not (infix_eqeq3 s t))))))

;; subsetnoteq_def
  (assert
  (forall ((s (set a)) (t (set a)))
  (= (subsetnoteq a1 (t2tb1 s) (t2tb1 t))
  (and (subset2 s t) (not (infix_eqeq1 s t))))))

;; subsetnoteq_def
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t uni))
  (= (subsetnoteq a2 s t) (and (subset1 a2 s t) (not (infix_eqeq a2 s t)))))))

(declare-fun empty (ty) uni)

;; empty_sort
  (assert (forall ((a2 ty)) (sort (set1 a2) (empty a2))))

(declare-fun is_empty (ty uni) Bool)

;; is_empty_def
  (assert
  (forall ((s (set (tuple21 c b))))
  (= (is_empty (tuple2 c1 b1) (t2tb222 s))
  (forall ((x (tuple21 c b))) (not (mem28 x s))))))

;; is_empty_def
  (assert
  (forall ((s (set (tuple21 c a))))
  (= (is_empty (tuple2 c1 a1) (t2tb224 s))
  (forall ((x (tuple21 c a))) (not (mem27 x s))))))

;; is_empty_def
  (assert
  (forall ((s (set c)))
  (= (is_empty c1 (t2tb132 s)) (forall ((x c)) (not (mem7 x s))))))

;; is_empty_def
  (assert
  (forall ((s (set (set (tuple21 a b)))))
  (= (is_empty (set1 (tuple2 a1 b1)) (t2tb10 s))
  (forall ((x (set (tuple21 a b)))) (not (mem4 x s))))))

;; is_empty_def
  (assert
  (forall ((s (set (tuple21 a b))))
  (= (is_empty (tuple2 a1 b1) (t2tb11 s))
  (forall ((x (tuple21 a b))) (not (mem3 x s))))))

;; is_empty_def
  (assert
  (forall ((s (set b)))
  (= (is_empty b1 (t2tb12 s)) (forall ((x b)) (not (mem2 x s))))))

;; is_empty_def
  (assert
  (forall ((s (set a)))
  (= (is_empty a1 (t2tb1 s)) (forall ((x a)) (not (mem1 x s))))))

;; is_empty_def
  (assert
  (forall ((a2 ty))
  (forall ((s uni))
  (and (=> (is_empty a2 s) (forall ((x uni)) (not (mem a2 x s))))
  (=> (forall ((x uni)) (=> (sort a2 x) (not (mem a2 x s)))) (is_empty a2 s))))))

;; empty_def1
  (assert (forall ((a2 ty)) (is_empty a2 (empty a2))))

;; empty
  (assert
  (forall ((x (tuple21 c b)))
  (not (mem28 x (tb2t222 (empty (tuple2 c1 b1)))))))

;; empty
  (assert
  (forall ((x (tuple21 c a)))
  (not (mem27 x (tb2t224 (empty (tuple2 c1 a1)))))))

;; empty
  (assert (forall ((x c)) (not (mem7 x (tb2t132 (empty c1))))))

;; empty
  (assert
  (forall ((x (set (tuple21 a b))))
  (not (mem4 x (tb2t10 (empty (set1 (tuple2 a1 b1))))))))

;; empty
  (assert
  (forall ((x (tuple21 a b))) (not (mem3 x (tb2t11 (empty (tuple2 a1 b1)))))))

;; empty
  (assert (forall ((x b)) (not (mem2 x (tb2t12 (empty b1))))))

;; empty
  (assert (forall ((x a)) (not (mem1 x (tb2t1 (empty a1))))))

;; empty
  (assert (forall ((a2 ty)) (forall ((x uni)) (not (mem a2 x (empty a2))))))

(declare-fun add (ty uni uni) uni)

;; add_sort
  (assert
  (forall ((a2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 a2) (add a2 x x1)))))

(declare-fun t2tb223 ((tuple21 c b)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 c b))) (sort (tuple2 c1 b1) (t2tb223 x))))

(declare-fun tb2t223 (uni) (tuple21 c b))

;; BridgeL
  (assert
  (forall ((i (tuple21 c b)))
  (! (= (tb2t223 (t2tb223 i)) i) :pattern ((t2tb223 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 c1 b1) j) (= (t2tb223 (tb2t223 j)) j)) :pattern (
  (t2tb223 (tb2t223 j))) )))

;; add_def1
  (assert
  (forall ((x (tuple21 c b)) (y (tuple21 c b)))
  (forall ((s (set (tuple21 c b))))
  (= (mem28 x (tb2t222 (add (tuple2 c1 b1) (t2tb223 y) (t2tb222 s))))
  (or (= x y) (mem28 x s))))))

(declare-fun t2tb225 ((tuple21 c a)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 c a))) (sort (tuple2 c1 a1) (t2tb225 x))))

(declare-fun tb2t225 (uni) (tuple21 c a))

;; BridgeL
  (assert
  (forall ((i (tuple21 c a)))
  (! (= (tb2t225 (t2tb225 i)) i) :pattern ((t2tb225 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 c1 a1) j) (= (t2tb225 (tb2t225 j)) j)) :pattern (
  (t2tb225 (tb2t225 j))) )))

;; add_def1
  (assert
  (forall ((x (tuple21 c a)) (y (tuple21 c a)))
  (forall ((s (set (tuple21 c a))))
  (= (mem27 x (tb2t224 (add (tuple2 c1 a1) (t2tb225 y) (t2tb224 s))))
  (or (= x y) (mem27 x s))))))

(declare-fun t2tb135 (c) uni)

;; t2tb_sort
  (assert (forall ((x c)) (sort c1 (t2tb135 x))))

(declare-fun tb2t135 (uni) c)

;; BridgeL
  (assert
  (forall ((i c)) (! (= (tb2t135 (t2tb135 i)) i) :pattern ((t2tb135 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort c1 j) (= (t2tb135 (tb2t135 j)) j)) :pattern ((t2tb135
                                                            (tb2t135 j))) )))

;; add_def1
  (assert
  (forall ((x c) (y c))
  (forall ((s (set c)))
  (= (mem7 x (tb2t132 (add c1 (t2tb135 y) (t2tb132 s))))
  (or (= x y) (mem7 x s))))))

;; add_def1
  (assert
  (forall ((x (set (tuple21 a b))) (y (set (tuple21 a b))))
  (forall ((s (set (set (tuple21 a b)))))
  (= (mem4 x (tb2t10 (add (set1 (tuple2 a1 b1)) (t2tb11 y) (t2tb10 s))))
  (or (= x y) (mem4 x s))))))

(declare-fun t2tb13 ((tuple21 a b)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 a b))) (sort (tuple2 a1 b1) (t2tb13 x))))

(declare-fun tb2t13 (uni) (tuple21 a b))

;; BridgeL
  (assert
  (forall ((i (tuple21 a b)))
  (! (= (tb2t13 (t2tb13 i)) i) :pattern ((t2tb13 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 b1) j) (= (t2tb13 (tb2t13 j)) j)) :pattern (
  (t2tb13 (tb2t13 j))) )))

;; add_def1
  (assert
  (forall ((x (tuple21 a b)) (y (tuple21 a b)))
  (forall ((s (set (tuple21 a b))))
  (= (mem3 x (tb2t11 (add (tuple2 a1 b1) (t2tb13 y) (t2tb11 s))))
  (or (= x y) (mem3 x s))))))

(declare-fun t2tb14 (b) uni)

;; t2tb_sort
  (assert (forall ((x b)) (sort b1 (t2tb14 x))))

(declare-fun tb2t14 (uni) b)

;; BridgeL
  (assert
  (forall ((i b)) (! (= (tb2t14 (t2tb14 i)) i) :pattern ((t2tb14 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort b1 j) (= (t2tb14 (tb2t14 j)) j)) :pattern ((t2tb14 (tb2t14 j))) )))

;; add_def1
  (assert
  (forall ((x b) (y b))
  (forall ((s (set b)))
  (= (mem2 x (tb2t12 (add b1 (t2tb14 y) (t2tb12 s))))
  (or (= x y) (mem2 x s))))))

(declare-fun t2tb2 (a) uni)

;; t2tb_sort
  (assert (forall ((x a)) (sort a1 (t2tb2 x))))

(declare-fun tb2t2 (uni) a)

;; BridgeL
  (assert (forall ((i a)) (! (= (tb2t2 (t2tb2 i)) i) :pattern ((t2tb2 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort a1 j) (= (t2tb2 (tb2t2 j)) j)) :pattern ((t2tb2 (tb2t2 j))) )))

;; add_def1
  (assert
  (forall ((x a) (y a))
  (forall ((s (set a)))
  (= (mem1 x (tb2t1 (add a1 (t2tb2 y) (t2tb1 s)))) (or (= x y) (mem1 x s))))))

;; add_def1
  (assert
  (forall ((a2 ty))
  (forall ((x uni) (y uni))
  (=> (sort a2 x)
  (=> (sort a2 y)
  (forall ((s uni)) (= (mem a2 x (add a2 y s)) (or (= x y) (mem a2 x s)))))))))

(declare-fun singleton (ty uni) uni)

;; singleton_sort
  (assert
  (forall ((a2 ty)) (forall ((x uni)) (sort (set1 a2) (singleton a2 x)))))

;; mem_singleton
  (assert
  (forall ((x (tuple21 c b)) (y (tuple21 c b)))
  (= (mem28 x (tb2t222 (singleton (tuple2 c1 b1) (t2tb223 y)))) (= x y))))

;; mem_singleton
  (assert
  (forall ((x (tuple21 c a)) (y (tuple21 c a)))
  (= (mem27 x (tb2t224 (singleton (tuple2 c1 a1) (t2tb225 y)))) (= x y))))

;; mem_singleton
  (assert
  (forall ((x c) (y c))
  (= (mem7 x (tb2t132 (singleton c1 (t2tb135 y)))) (= x y))))

;; mem_singleton
  (assert
  (forall ((x (set (tuple21 a b))) (y (set (tuple21 a b))))
  (= (mem4 x (tb2t10 (singleton (set1 (tuple2 a1 b1)) (t2tb11 y)))) (= x y))))

;; mem_singleton
  (assert
  (forall ((x (tuple21 a b)) (y (tuple21 a b)))
  (= (mem3 x (tb2t11 (singleton (tuple2 a1 b1) (t2tb13 y)))) (= x y))))

;; mem_singleton
  (assert
  (forall ((x b) (y b))
  (= (mem2 x (tb2t12 (singleton b1 (t2tb14 y)))) (= x y))))

;; mem_singleton
  (assert
  (forall ((x a) (y a))
  (= (mem1 x (tb2t1 (singleton a1 (t2tb2 y)))) (= x y))))

;; mem_singleton
  (assert
  (forall ((a2 ty))
  (forall ((x uni) (y uni))
  (=> (sort a2 x) (=> (sort a2 y) (= (mem a2 x (singleton a2 y)) (= x y)))))))

(declare-fun remove (ty uni uni) uni)

;; remove_sort
  (assert
  (forall ((a2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 a2) (remove a2 x x1)))))

;; remove_def1
  (assert
  (forall ((x (tuple21 c b)) (y (tuple21 c b)) (s (set (tuple21 c b))))
  (= (mem28 x (tb2t222 (remove (tuple2 c1 b1) (t2tb223 y) (t2tb222 s))))
  (and (not (= x y)) (mem28 x s)))))

;; remove_def1
  (assert
  (forall ((x (tuple21 c a)) (y (tuple21 c a)) (s (set (tuple21 c a))))
  (= (mem27 x (tb2t224 (remove (tuple2 c1 a1) (t2tb225 y) (t2tb224 s))))
  (and (not (= x y)) (mem27 x s)))))

;; remove_def1
  (assert
  (forall ((x c) (y c) (s (set c)))
  (= (mem7 x (tb2t132 (remove c1 (t2tb135 y) (t2tb132 s))))
  (and (not (= x y)) (mem7 x s)))))

;; remove_def1
  (assert
  (forall ((x (set (tuple21 a b))) (y (set (tuple21 a b)))
  (s (set (set (tuple21 a b)))))
  (= (mem4 x (tb2t10 (remove (set1 (tuple2 a1 b1)) (t2tb11 y) (t2tb10 s))))
  (and (not (= x y)) (mem4 x s)))))

;; remove_def1
  (assert
  (forall ((x (tuple21 a b)) (y (tuple21 a b)) (s (set (tuple21 a b))))
  (= (mem3 x (tb2t11 (remove (tuple2 a1 b1) (t2tb13 y) (t2tb11 s))))
  (and (not (= x y)) (mem3 x s)))))

;; remove_def1
  (assert
  (forall ((x b) (y b) (s (set b)))
  (= (mem2 x (tb2t12 (remove b1 (t2tb14 y) (t2tb12 s))))
  (and (not (= x y)) (mem2 x s)))))

;; remove_def1
  (assert
  (forall ((x a) (y a) (s (set a)))
  (= (mem1 x (tb2t1 (remove a1 (t2tb2 y) (t2tb1 s))))
  (and (not (= x y)) (mem1 x s)))))

;; remove_def1
  (assert
  (forall ((a2 ty))
  (forall ((x uni) (y uni) (s uni))
  (=> (sort a2 x)
  (=> (sort a2 y)
  (= (mem a2 x (remove a2 y s)) (and (not (= x y)) (mem a2 x s))))))))

(declare-fun all (ty) uni)

;; all_sort
  (assert (forall ((a2 ty)) (sort (set1 a2) (all a2))))

;; all_def
  (assert
  (forall ((x (tuple21 c b))) (mem28 x (tb2t222 (all (tuple2 c1 b1))))))

;; all_def
  (assert
  (forall ((x (tuple21 c a))) (mem27 x (tb2t224 (all (tuple2 c1 a1))))))

;; all_def
  (assert (forall ((x c)) (mem7 x (tb2t132 (all c1)))))

;; all_def
  (assert
  (forall ((x (set (tuple21 a b)))) (mem4 x
  (tb2t10 (all (set1 (tuple2 a1 b1)))))))

;; all_def
  (assert
  (forall ((x (tuple21 a b))) (mem3 x (tb2t11 (all (tuple2 a1 b1))))))

;; all_def
  (assert (forall ((x b)) (mem2 x (tb2t12 (all b1)))))

;; all_def
  (assert (forall ((x a)) (mem1 x (tb2t1 (all a1)))))

;; all_def
  (assert (forall ((a2 ty)) (forall ((x uni)) (mem a2 x (all a2)))))

(declare-fun union1 (ty uni uni) uni)

;; union_sort
  (assert
  (forall ((a2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 a2) (union1 a2 x x1)))))

;; mem_union
  (assert
  (forall ((s (set (tuple21 c b))) (t (set (tuple21 c b))) (x (tuple21 c b)))
  (= (mem28 x (tb2t222 (union1 (tuple2 c1 b1) (t2tb222 s) (t2tb222 t))))
  (or (mem28 x s) (mem28 x t)))))

;; mem_union
  (assert
  (forall ((s (set (tuple21 c a))) (t (set (tuple21 c a))) (x (tuple21 c a)))
  (= (mem27 x (tb2t224 (union1 (tuple2 c1 a1) (t2tb224 s) (t2tb224 t))))
  (or (mem27 x s) (mem27 x t)))))

;; mem_union
  (assert
  (forall ((s (set c)) (t (set c)) (x c))
  (= (mem7 x (tb2t132 (union1 c1 (t2tb132 s) (t2tb132 t))))
  (or (mem7 x s) (mem7 x t)))))

;; mem_union
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set (set (tuple21 a b))))
  (x (set (tuple21 a b))))
  (= (mem4 x (tb2t10 (union1 (set1 (tuple2 a1 b1)) (t2tb10 s) (t2tb10 t))))
  (or (mem4 x s) (mem4 x t)))))

;; mem_union
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (tuple21 a b))) (x (tuple21 a b)))
  (= (mem3 x (tb2t11 (union1 (tuple2 a1 b1) (t2tb11 s) (t2tb11 t))))
  (or (mem3 x s) (mem3 x t)))))

;; mem_union
  (assert
  (forall ((s (set b)) (t (set b)) (x b))
  (= (mem2 x (tb2t12 (union1 b1 (t2tb12 s) (t2tb12 t))))
  (or (mem2 x s) (mem2 x t)))))

;; mem_union
  (assert
  (forall ((s (set a)) (t (set a)) (x a))
  (= (mem1 x (tb2t1 (union1 a1 (t2tb1 s) (t2tb1 t))))
  (or (mem1 x s) (mem1 x t)))))

;; mem_union
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t uni) (x uni))
  (= (mem a2 x (union1 a2 s t)) (or (mem a2 x s) (mem a2 x t))))))

(declare-fun inter (ty uni uni) uni)

;; inter_sort
  (assert
  (forall ((a2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 a2) (inter a2 x x1)))))

;; mem_inter
  (assert
  (forall ((s (set (tuple21 c b))) (t (set (tuple21 c b))) (x (tuple21 c b)))
  (= (mem28 x (tb2t222 (inter (tuple2 c1 b1) (t2tb222 s) (t2tb222 t))))
  (and (mem28 x s) (mem28 x t)))))

;; mem_inter
  (assert
  (forall ((s (set (tuple21 c a))) (t (set (tuple21 c a))) (x (tuple21 c a)))
  (= (mem27 x (tb2t224 (inter (tuple2 c1 a1) (t2tb224 s) (t2tb224 t))))
  (and (mem27 x s) (mem27 x t)))))

;; mem_inter
  (assert
  (forall ((s (set c)) (t (set c)) (x c))
  (= (mem7 x (tb2t132 (inter c1 (t2tb132 s) (t2tb132 t))))
  (and (mem7 x s) (mem7 x t)))))

;; mem_inter
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set (set (tuple21 a b))))
  (x (set (tuple21 a b))))
  (= (mem4 x (tb2t10 (inter (set1 (tuple2 a1 b1)) (t2tb10 s) (t2tb10 t))))
  (and (mem4 x s) (mem4 x t)))))

;; mem_inter
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (tuple21 a b))) (x (tuple21 a b)))
  (= (mem3 x (tb2t11 (inter (tuple2 a1 b1) (t2tb11 s) (t2tb11 t))))
  (and (mem3 x s) (mem3 x t)))))

;; mem_inter
  (assert
  (forall ((s (set b)) (t (set b)) (x b))
  (= (mem2 x (tb2t12 (inter b1 (t2tb12 s) (t2tb12 t))))
  (and (mem2 x s) (mem2 x t)))))

;; mem_inter
  (assert
  (forall ((s (set a)) (t (set a)) (x a))
  (= (mem1 x (tb2t1 (inter a1 (t2tb1 s) (t2tb1 t))))
  (and (mem1 x s) (mem1 x t)))))

;; mem_inter
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t uni) (x uni))
  (= (mem a2 x (inter a2 s t)) (and (mem a2 x s) (mem a2 x t))))))

(declare-fun diff (ty uni uni) uni)

;; diff_sort
  (assert
  (forall ((a2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 a2) (diff a2 x x1)))))

;; mem_diff
  (assert
  (forall ((s (set (tuple21 c b))) (t (set (tuple21 c b))) (x (tuple21 c b)))
  (= (mem28 x (tb2t222 (diff (tuple2 c1 b1) (t2tb222 s) (t2tb222 t))))
  (and (mem28 x s) (not (mem28 x t))))))

;; mem_diff
  (assert
  (forall ((s (set (tuple21 c a))) (t (set (tuple21 c a))) (x (tuple21 c a)))
  (= (mem27 x (tb2t224 (diff (tuple2 c1 a1) (t2tb224 s) (t2tb224 t))))
  (and (mem27 x s) (not (mem27 x t))))))

;; mem_diff
  (assert
  (forall ((s (set c)) (t (set c)) (x c))
  (= (mem7 x (tb2t132 (diff c1 (t2tb132 s) (t2tb132 t))))
  (and (mem7 x s) (not (mem7 x t))))))

;; mem_diff
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set (set (tuple21 a b))))
  (x (set (tuple21 a b))))
  (= (mem4 x (tb2t10 (diff (set1 (tuple2 a1 b1)) (t2tb10 s) (t2tb10 t))))
  (and (mem4 x s) (not (mem4 x t))))))

;; mem_diff
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (tuple21 a b))) (x (tuple21 a b)))
  (= (mem3 x (tb2t11 (diff (tuple2 a1 b1) (t2tb11 s) (t2tb11 t))))
  (and (mem3 x s) (not (mem3 x t))))))

;; mem_diff
  (assert
  (forall ((s (set b)) (t (set b)) (x b))
  (= (mem2 x (tb2t12 (diff b1 (t2tb12 s) (t2tb12 t))))
  (and (mem2 x s) (not (mem2 x t))))))

;; mem_diff
  (assert
  (forall ((s (set a)) (t (set a)) (x a))
  (= (mem1 x (tb2t1 (diff a1 (t2tb1 s) (t2tb1 t))))
  (and (mem1 x s) (not (mem1 x t))))))

;; mem_diff
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t uni) (x uni))
  (= (mem a2 x (diff a2 s t)) (and (mem a2 x s) (not (mem a2 x t)))))))

(declare-fun Tuple2 (ty ty uni uni) uni)

;; Tuple2_sort
  (assert
  (forall ((a2 ty) (a3 ty))
  (forall ((x uni) (x1 uni)) (sort (tuple2 a3 a2) (Tuple2 a3 a2 x x1)))))

(declare-fun Tuple2_proj_1 (ty ty uni) uni)

;; Tuple2_proj_1_sort
  (assert
  (forall ((a2 ty) (a3 ty))
  (forall ((x uni)) (sort a3 (Tuple2_proj_1 a3 a2 x)))))

;; Tuple2_proj_1_def
  (assert
  (forall ((a2 ty) (a3 ty))
  (forall ((u uni) (u1 uni))
  (=> (sort a3 u) (= (Tuple2_proj_1 a3 a2 (Tuple2 a3 a2 u u1)) u)))))

(declare-fun Tuple2_proj_2 (ty ty uni) uni)

;; Tuple2_proj_2_sort
  (assert
  (forall ((a2 ty) (a3 ty))
  (forall ((x uni)) (sort a2 (Tuple2_proj_2 a3 a2 x)))))

;; Tuple2_proj_2_def
  (assert
  (forall ((a2 ty) (a3 ty))
  (forall ((u uni) (u1 uni))
  (=> (sort a2 u1) (= (Tuple2_proj_2 a3 a2 (Tuple2 a3 a2 u u1)) u1)))))

;; tuple2_inversion
  (assert
  (forall ((a2 ty) (a3 ty))
  (forall ((u uni))
  (=> (sort (tuple2 a3 a2) u)
  (= u (Tuple2 a3 a2 (Tuple2_proj_1 a3 a2 u) (Tuple2_proj_2 a3 a2 u)))))))

(declare-fun times (ty ty uni uni) uni)

;; times_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (tuple2 a2 b2)) (times b2 a2 x x1)))))

(declare-fun times2 ((set a) (set b)) (set (tuple21 a b)))

(declare-fun times12 ((set c) (set a)) (set (tuple21 c a)))

(declare-fun times13 ((set c) (set b)) (set (tuple21 c b)))

;; mem_times
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set (tuple21 c b))) (x uni) (y (tuple21 c b)))
  (= (mem (tuple2 a2 (tuple2 c1 b1)) (Tuple2 a2 (tuple2 c1 b1) x (t2tb223 y))
  (times (tuple2 c1 b1) a2 s (t2tb222 t))) (and (mem a2 x s) (mem28 y t))))))

;; mem_times
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set (tuple21 c a))) (x uni) (y (tuple21 c a)))
  (= (mem (tuple2 a2 (tuple2 c1 a1)) (Tuple2 a2 (tuple2 c1 a1) x (t2tb225 y))
  (times (tuple2 c1 a1) a2 s (t2tb224 t))) (and (mem a2 x s) (mem27 y t))))))

;; mem_times
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set c)) (x uni) (y c))
  (= (mem (tuple2 a2 c1) (Tuple2 a2 c1 x (t2tb135 y))
  (times c1 a2 s (t2tb132 t))) (and (mem a2 x s) (mem7 y t))))))

;; mem_times
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set (set (tuple21 a b)))) (x uni) (y (set (tuple21 a
  b))))
  (= (mem (tuple2 a2 (set1 (tuple2 a1 b1)))
  (Tuple2 a2 (set1 (tuple2 a1 b1)) x (t2tb11 y))
  (times (set1 (tuple2 a1 b1)) a2 s (t2tb10 t)))
  (and (mem a2 x s) (mem4 y t))))))

;; mem_times
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set (tuple21 a b))) (x uni) (y (tuple21 a b)))
  (= (mem (tuple2 a2 (tuple2 a1 b1)) (Tuple2 a2 (tuple2 a1 b1) x (t2tb13 y))
  (times (tuple2 a1 b1) a2 s (t2tb11 t))) (and (mem a2 x s) (mem3 y t))))))

;; mem_times
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set b)) (x uni) (y b))
  (= (mem (tuple2 a2 b1) (Tuple2 a2 b1 x (t2tb14 y))
  (times b1 a2 s (t2tb12 t))) (and (mem a2 x s) (mem2 y t))))))

;; mem_times
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set a)) (x uni) (y a))
  (= (mem (tuple2 a2 a1) (Tuple2 a2 a1 x (t2tb2 y))
  (times a1 a2 s (t2tb1 t))) (and (mem a2 x s) (mem1 y t))))))

(declare-fun t2tb2777 ((set (tuple21 (tuple21 c b) (tuple21 c b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 c b) (tuple21 c b))))) (sort
  (set1 (tuple2 (tuple2 c1 b1) (tuple2 c1 b1))) (t2tb2777 x))))

(declare-fun tb2t2777 (uni) (set (tuple21 (tuple21 c b) (tuple21 c b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 c b) (tuple21 c b)))))
  (! (= (tb2t2777 (t2tb2777 i)) i) :pattern ((t2tb2777 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 c1 b1) (tuple2 c1 b1))) j)
     (= (t2tb2777 (tb2t2777 j)) j)) :pattern ((t2tb2777 (tb2t2777 j))) )))

(declare-fun t2tb2778 ((tuple21 (tuple21 c b) (tuple21 c b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 c b) (tuple21 c b)))) (sort
  (tuple2 (tuple2 c1 b1) (tuple2 c1 b1)) (t2tb2778 x))))

(declare-fun tb2t2778 (uni) (tuple21 (tuple21 c b) (tuple21 c b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 c b) (tuple21 c b))))
  (! (= (tb2t2778 (t2tb2778 i)) i) :pattern ((t2tb2778 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 c1 b1) (tuple2 c1 b1)) j)
     (= (t2tb2778 (tb2t2778 j)) j)) :pattern ((t2tb2778 (tb2t2778 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 c b))) (t (set (tuple21 c b))) (x (tuple21 c b))
  (y (tuple21 c b)))
  (= (mem (tuple2 (tuple2 c1 b1) (tuple2 c1 b1))
  (Tuple2 (tuple2 c1 b1) (tuple2 c1 b1) (t2tb223 x) (t2tb223 y))
  (times (tuple2 c1 b1) (tuple2 c1 b1) (t2tb222 s) (t2tb222 t)))
  (and (mem28 x s) (mem28 y t)))))

(declare-fun t2tb2862 ((set (tuple21 (tuple21 c b) (tuple21 c a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 c b) (tuple21 c a))))) (sort
  (set1 (tuple2 (tuple2 c1 b1) (tuple2 c1 a1))) (t2tb2862 x))))

(declare-fun tb2t2862 (uni) (set (tuple21 (tuple21 c b) (tuple21 c a))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 c b) (tuple21 c a)))))
  (! (= (tb2t2862 (t2tb2862 i)) i) :pattern ((t2tb2862 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 c1 b1) (tuple2 c1 a1))) j)
     (= (t2tb2862 (tb2t2862 j)) j)) :pattern ((t2tb2862 (tb2t2862 j))) )))

(declare-fun t2tb2863 ((tuple21 (tuple21 c b) (tuple21 c a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 c b) (tuple21 c a)))) (sort
  (tuple2 (tuple2 c1 b1) (tuple2 c1 a1)) (t2tb2863 x))))

(declare-fun tb2t2863 (uni) (tuple21 (tuple21 c b) (tuple21 c a)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 c b) (tuple21 c a))))
  (! (= (tb2t2863 (t2tb2863 i)) i) :pattern ((t2tb2863 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 c1 b1) (tuple2 c1 a1)) j)
     (= (t2tb2863 (tb2t2863 j)) j)) :pattern ((t2tb2863 (tb2t2863 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 c b))) (t (set (tuple21 c a))) (x (tuple21 c b))
  (y (tuple21 c a)))
  (= (mem (tuple2 (tuple2 c1 b1) (tuple2 c1 a1))
  (Tuple2 (tuple2 c1 b1) (tuple2 c1 a1) (t2tb223 x) (t2tb225 y))
  (times (tuple2 c1 a1) (tuple2 c1 b1) (t2tb222 s) (t2tb224 t)))
  (and (mem28 x s) (mem27 y t)))))

(declare-fun t2tb2783 ((tuple21 (tuple21 c b) c)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 c b) c))) (sort (tuple2 (tuple2 c1 b1) c1)
  (t2tb2783 x))))

(declare-fun tb2t2783 (uni) (tuple21 (tuple21 c b) c))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 c b) c)))
  (! (= (tb2t2783 (t2tb2783 i)) i) :pattern ((t2tb2783 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 c1 b1) c1) j) (= (t2tb2783 (tb2t2783 j)) j)) :pattern (
  (t2tb2783 (tb2t2783 j))) )))

(declare-fun t2tb2784 ((set (tuple21 (tuple21 c b) c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 c b) c)))) (sort
  (set1 (tuple2 (tuple2 c1 b1) c1)) (t2tb2784 x))))

(declare-fun tb2t2784 (uni) (set (tuple21 (tuple21 c b) c)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 c b) c))))
  (! (= (tb2t2784 (t2tb2784 i)) i) :pattern ((t2tb2784 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 c1 b1) c1)) j)
     (= (t2tb2784 (tb2t2784 j)) j)) :pattern ((t2tb2784 (tb2t2784 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 c b))) (t (set c)) (x (tuple21 c b)) (y c))
  (= (mem (tuple2 (tuple2 c1 b1) c1)
  (Tuple2 (tuple2 c1 b1) c1 (t2tb223 x) (t2tb135 y))
  (times c1 (tuple2 c1 b1) (t2tb222 s) (t2tb132 t)))
  (and (mem28 x s) (mem7 y t)))))

(declare-fun t2tb2785 ((set (tuple21 (tuple21 c b) (set (tuple21 a
  b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 c b) (set (tuple21 a b)))))) (sort
  (set1 (tuple2 (tuple2 c1 b1) (set1 (tuple2 a1 b1)))) (t2tb2785 x))))

(declare-fun tb2t2785 (uni) (set (tuple21 (tuple21 c b) (set (tuple21 a
  b)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 c b) (set (tuple21 a b))))))
  (! (= (tb2t2785 (t2tb2785 i)) i) :pattern ((t2tb2785 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 c1 b1) (set1 (tuple2 a1 b1)))) j)
     (= (t2tb2785 (tb2t2785 j)) j)) :pattern ((t2tb2785 (tb2t2785 j))) )))

(declare-fun t2tb2786 ((tuple21 (tuple21 c b) (set (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 c b) (set (tuple21 a b))))) (sort
  (tuple2 (tuple2 c1 b1) (set1 (tuple2 a1 b1))) (t2tb2786 x))))

(declare-fun tb2t2786 (uni) (tuple21 (tuple21 c b) (set (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 c b) (set (tuple21 a b)))))
  (! (= (tb2t2786 (t2tb2786 i)) i) :pattern ((t2tb2786 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 c1 b1) (set1 (tuple2 a1 b1))) j)
     (= (t2tb2786 (tb2t2786 j)) j)) :pattern ((t2tb2786 (tb2t2786 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 c b))) (t (set (set (tuple21 a b))))
  (x (tuple21 c b)) (y (set (tuple21 a b))))
  (= (mem (tuple2 (tuple2 c1 b1) (set1 (tuple2 a1 b1)))
  (Tuple2 (tuple2 c1 b1) (set1 (tuple2 a1 b1)) (t2tb223 x) (t2tb11 y))
  (times (set1 (tuple2 a1 b1)) (tuple2 c1 b1) (t2tb222 s) (t2tb10 t)))
  (and (mem28 x s) (mem4 y t)))))

(declare-fun t2tb2787 ((set (tuple21 (tuple21 c b) (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 c b) (tuple21 a b))))) (sort
  (set1 (tuple2 (tuple2 c1 b1) (tuple2 a1 b1))) (t2tb2787 x))))

(declare-fun tb2t2787 (uni) (set (tuple21 (tuple21 c b) (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 c b) (tuple21 a b)))))
  (! (= (tb2t2787 (t2tb2787 i)) i) :pattern ((t2tb2787 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 c1 b1) (tuple2 a1 b1))) j)
     (= (t2tb2787 (tb2t2787 j)) j)) :pattern ((t2tb2787 (tb2t2787 j))) )))

(declare-fun t2tb2788 ((tuple21 (tuple21 c b) (tuple21 a b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 c b) (tuple21 a b)))) (sort
  (tuple2 (tuple2 c1 b1) (tuple2 a1 b1)) (t2tb2788 x))))

(declare-fun tb2t2788 (uni) (tuple21 (tuple21 c b) (tuple21 a b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 c b) (tuple21 a b))))
  (! (= (tb2t2788 (t2tb2788 i)) i) :pattern ((t2tb2788 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 c1 b1) (tuple2 a1 b1)) j)
     (= (t2tb2788 (tb2t2788 j)) j)) :pattern ((t2tb2788 (tb2t2788 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 c b))) (t (set (tuple21 a b))) (x (tuple21 c b))
  (y (tuple21 a b)))
  (= (mem (tuple2 (tuple2 c1 b1) (tuple2 a1 b1))
  (Tuple2 (tuple2 c1 b1) (tuple2 a1 b1) (t2tb223 x) (t2tb13 y))
  (times (tuple2 a1 b1) (tuple2 c1 b1) (t2tb222 s) (t2tb11 t)))
  (and (mem28 x s) (mem3 y t)))))

(declare-fun t2tb2789 ((set (tuple21 (tuple21 c b) b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 c b) b)))) (sort
  (set1 (tuple2 (tuple2 c1 b1) b1)) (t2tb2789 x))))

(declare-fun tb2t2789 (uni) (set (tuple21 (tuple21 c b) b)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 c b) b))))
  (! (= (tb2t2789 (t2tb2789 i)) i) :pattern ((t2tb2789 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 c1 b1) b1)) j)
     (= (t2tb2789 (tb2t2789 j)) j)) :pattern ((t2tb2789 (tb2t2789 j))) )))

(declare-fun t2tb2790 ((tuple21 (tuple21 c b) b)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 c b) b))) (sort (tuple2 (tuple2 c1 b1) b1)
  (t2tb2790 x))))

(declare-fun tb2t2790 (uni) (tuple21 (tuple21 c b) b))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 c b) b)))
  (! (= (tb2t2790 (t2tb2790 i)) i) :pattern ((t2tb2790 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 c1 b1) b1) j) (= (t2tb2790 (tb2t2790 j)) j)) :pattern (
  (t2tb2790 (tb2t2790 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 c b))) (t (set b)) (x (tuple21 c b)) (y b))
  (= (mem (tuple2 (tuple2 c1 b1) b1)
  (Tuple2 (tuple2 c1 b1) b1 (t2tb223 x) (t2tb14 y))
  (times b1 (tuple2 c1 b1) (t2tb222 s) (t2tb12 t)))
  (and (mem28 x s) (mem2 y t)))))

(declare-fun t2tb2791 ((set (tuple21 (tuple21 c b) a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 c b) a)))) (sort
  (set1 (tuple2 (tuple2 c1 b1) a1)) (t2tb2791 x))))

(declare-fun tb2t2791 (uni) (set (tuple21 (tuple21 c b) a)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 c b) a))))
  (! (= (tb2t2791 (t2tb2791 i)) i) :pattern ((t2tb2791 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 c1 b1) a1)) j)
     (= (t2tb2791 (tb2t2791 j)) j)) :pattern ((t2tb2791 (tb2t2791 j))) )))

(declare-fun t2tb2792 ((tuple21 (tuple21 c b) a)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 c b) a))) (sort (tuple2 (tuple2 c1 b1) a1)
  (t2tb2792 x))))

(declare-fun tb2t2792 (uni) (tuple21 (tuple21 c b) a))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 c b) a)))
  (! (= (tb2t2792 (t2tb2792 i)) i) :pattern ((t2tb2792 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 c1 b1) a1) j) (= (t2tb2792 (tb2t2792 j)) j)) :pattern (
  (t2tb2792 (tb2t2792 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 c b))) (t (set a)) (x (tuple21 c b)) (y a))
  (= (mem (tuple2 (tuple2 c1 b1) a1)
  (Tuple2 (tuple2 c1 b1) a1 (t2tb223 x) (t2tb2 y))
  (times a1 (tuple2 c1 b1) (t2tb222 s) (t2tb1 t)))
  (and (mem28 x s) (mem1 y t)))))

;; mem_times
  (assert
  (forall ((b2 ty))
  (forall ((s (set (tuple21 c b))) (t uni) (x (tuple21 c b)) (y uni))
  (= (mem (tuple2 (tuple2 c1 b1) b2) (Tuple2 (tuple2 c1 b1) b2 (t2tb223 x) y)
  (times b2 (tuple2 c1 b1) (t2tb222 s) t)) (and (mem28 x s) (mem b2 y t))))))

(declare-fun t2tb2864 ((set (tuple21 (tuple21 c a) (tuple21 c b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 c a) (tuple21 c b))))) (sort
  (set1 (tuple2 (tuple2 c1 a1) (tuple2 c1 b1))) (t2tb2864 x))))

(declare-fun tb2t2864 (uni) (set (tuple21 (tuple21 c a) (tuple21 c b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 c a) (tuple21 c b)))))
  (! (= (tb2t2864 (t2tb2864 i)) i) :pattern ((t2tb2864 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 c1 a1) (tuple2 c1 b1))) j)
     (= (t2tb2864 (tb2t2864 j)) j)) :pattern ((t2tb2864 (tb2t2864 j))) )))

(declare-fun t2tb2865 ((tuple21 (tuple21 c a) (tuple21 c b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 c a) (tuple21 c b)))) (sort
  (tuple2 (tuple2 c1 a1) (tuple2 c1 b1)) (t2tb2865 x))))

(declare-fun tb2t2865 (uni) (tuple21 (tuple21 c a) (tuple21 c b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 c a) (tuple21 c b))))
  (! (= (tb2t2865 (t2tb2865 i)) i) :pattern ((t2tb2865 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 c1 a1) (tuple2 c1 b1)) j)
     (= (t2tb2865 (tb2t2865 j)) j)) :pattern ((t2tb2865 (tb2t2865 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 c a))) (t (set (tuple21 c b))) (x (tuple21 c a))
  (y (tuple21 c b)))
  (= (mem (tuple2 (tuple2 c1 a1) (tuple2 c1 b1))
  (Tuple2 (tuple2 c1 a1) (tuple2 c1 b1) (t2tb225 x) (t2tb223 y))
  (times (tuple2 c1 b1) (tuple2 c1 a1) (t2tb224 s) (t2tb222 t)))
  (and (mem27 x s) (mem28 y t)))))

(declare-fun t2tb2866 ((set (tuple21 (tuple21 c a) (tuple21 c a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 c a) (tuple21 c a))))) (sort
  (set1 (tuple2 (tuple2 c1 a1) (tuple2 c1 a1))) (t2tb2866 x))))

(declare-fun tb2t2866 (uni) (set (tuple21 (tuple21 c a) (tuple21 c a))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 c a) (tuple21 c a)))))
  (! (= (tb2t2866 (t2tb2866 i)) i) :pattern ((t2tb2866 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 c1 a1) (tuple2 c1 a1))) j)
     (= (t2tb2866 (tb2t2866 j)) j)) :pattern ((t2tb2866 (tb2t2866 j))) )))

(declare-fun t2tb2867 ((tuple21 (tuple21 c a) (tuple21 c a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 c a) (tuple21 c a)))) (sort
  (tuple2 (tuple2 c1 a1) (tuple2 c1 a1)) (t2tb2867 x))))

(declare-fun tb2t2867 (uni) (tuple21 (tuple21 c a) (tuple21 c a)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 c a) (tuple21 c a))))
  (! (= (tb2t2867 (t2tb2867 i)) i) :pattern ((t2tb2867 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 c1 a1) (tuple2 c1 a1)) j)
     (= (t2tb2867 (tb2t2867 j)) j)) :pattern ((t2tb2867 (tb2t2867 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 c a))) (t (set (tuple21 c a))) (x (tuple21 c a))
  (y (tuple21 c a)))
  (= (mem (tuple2 (tuple2 c1 a1) (tuple2 c1 a1))
  (Tuple2 (tuple2 c1 a1) (tuple2 c1 a1) (t2tb225 x) (t2tb225 y))
  (times (tuple2 c1 a1) (tuple2 c1 a1) (t2tb224 s) (t2tb224 t)))
  (and (mem27 x s) (mem27 y t)))))

(declare-fun t2tb2868 ((set (tuple21 (tuple21 c a) c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 c a) c)))) (sort
  (set1 (tuple2 (tuple2 c1 a1) c1)) (t2tb2868 x))))

(declare-fun tb2t2868 (uni) (set (tuple21 (tuple21 c a) c)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 c a) c))))
  (! (= (tb2t2868 (t2tb2868 i)) i) :pattern ((t2tb2868 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 c1 a1) c1)) j)
     (= (t2tb2868 (tb2t2868 j)) j)) :pattern ((t2tb2868 (tb2t2868 j))) )))

(declare-fun t2tb2869 ((tuple21 (tuple21 c a) c)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 c a) c))) (sort (tuple2 (tuple2 c1 a1) c1)
  (t2tb2869 x))))

(declare-fun tb2t2869 (uni) (tuple21 (tuple21 c a) c))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 c a) c)))
  (! (= (tb2t2869 (t2tb2869 i)) i) :pattern ((t2tb2869 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 c1 a1) c1) j) (= (t2tb2869 (tb2t2869 j)) j)) :pattern (
  (t2tb2869 (tb2t2869 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 c a))) (t (set c)) (x (tuple21 c a)) (y c))
  (= (mem (tuple2 (tuple2 c1 a1) c1)
  (Tuple2 (tuple2 c1 a1) c1 (t2tb225 x) (t2tb135 y))
  (times c1 (tuple2 c1 a1) (t2tb224 s) (t2tb132 t)))
  (and (mem27 x s) (mem7 y t)))))

(declare-fun t2tb2870 ((set (tuple21 (tuple21 c a) (set (tuple21 a
  b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 c a) (set (tuple21 a b)))))) (sort
  (set1 (tuple2 (tuple2 c1 a1) (set1 (tuple2 a1 b1)))) (t2tb2870 x))))

(declare-fun tb2t2870 (uni) (set (tuple21 (tuple21 c a) (set (tuple21 a
  b)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 c a) (set (tuple21 a b))))))
  (! (= (tb2t2870 (t2tb2870 i)) i) :pattern ((t2tb2870 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 c1 a1) (set1 (tuple2 a1 b1)))) j)
     (= (t2tb2870 (tb2t2870 j)) j)) :pattern ((t2tb2870 (tb2t2870 j))) )))

(declare-fun t2tb2871 ((tuple21 (tuple21 c a) (set (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 c a) (set (tuple21 a b))))) (sort
  (tuple2 (tuple2 c1 a1) (set1 (tuple2 a1 b1))) (t2tb2871 x))))

(declare-fun tb2t2871 (uni) (tuple21 (tuple21 c a) (set (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 c a) (set (tuple21 a b)))))
  (! (= (tb2t2871 (t2tb2871 i)) i) :pattern ((t2tb2871 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 c1 a1) (set1 (tuple2 a1 b1))) j)
     (= (t2tb2871 (tb2t2871 j)) j)) :pattern ((t2tb2871 (tb2t2871 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 c a))) (t (set (set (tuple21 a b))))
  (x (tuple21 c a)) (y (set (tuple21 a b))))
  (= (mem (tuple2 (tuple2 c1 a1) (set1 (tuple2 a1 b1)))
  (Tuple2 (tuple2 c1 a1) (set1 (tuple2 a1 b1)) (t2tb225 x) (t2tb11 y))
  (times (set1 (tuple2 a1 b1)) (tuple2 c1 a1) (t2tb224 s) (t2tb10 t)))
  (and (mem27 x s) (mem4 y t)))))

(declare-fun t2tb2872 ((set (tuple21 (tuple21 c a) (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 c a) (tuple21 a b))))) (sort
  (set1 (tuple2 (tuple2 c1 a1) (tuple2 a1 b1))) (t2tb2872 x))))

(declare-fun tb2t2872 (uni) (set (tuple21 (tuple21 c a) (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 c a) (tuple21 a b)))))
  (! (= (tb2t2872 (t2tb2872 i)) i) :pattern ((t2tb2872 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 c1 a1) (tuple2 a1 b1))) j)
     (= (t2tb2872 (tb2t2872 j)) j)) :pattern ((t2tb2872 (tb2t2872 j))) )))

(declare-fun t2tb2873 ((tuple21 (tuple21 c a) (tuple21 a b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 c a) (tuple21 a b)))) (sort
  (tuple2 (tuple2 c1 a1) (tuple2 a1 b1)) (t2tb2873 x))))

(declare-fun tb2t2873 (uni) (tuple21 (tuple21 c a) (tuple21 a b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 c a) (tuple21 a b))))
  (! (= (tb2t2873 (t2tb2873 i)) i) :pattern ((t2tb2873 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 c1 a1) (tuple2 a1 b1)) j)
     (= (t2tb2873 (tb2t2873 j)) j)) :pattern ((t2tb2873 (tb2t2873 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 c a))) (t (set (tuple21 a b))) (x (tuple21 c a))
  (y (tuple21 a b)))
  (= (mem (tuple2 (tuple2 c1 a1) (tuple2 a1 b1))
  (Tuple2 (tuple2 c1 a1) (tuple2 a1 b1) (t2tb225 x) (t2tb13 y))
  (times (tuple2 a1 b1) (tuple2 c1 a1) (t2tb224 s) (t2tb11 t)))
  (and (mem27 x s) (mem3 y t)))))

(declare-fun t2tb2874 ((set (tuple21 (tuple21 c a) b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 c a) b)))) (sort
  (set1 (tuple2 (tuple2 c1 a1) b1)) (t2tb2874 x))))

(declare-fun tb2t2874 (uni) (set (tuple21 (tuple21 c a) b)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 c a) b))))
  (! (= (tb2t2874 (t2tb2874 i)) i) :pattern ((t2tb2874 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 c1 a1) b1)) j)
     (= (t2tb2874 (tb2t2874 j)) j)) :pattern ((t2tb2874 (tb2t2874 j))) )))

(declare-fun t2tb2875 ((tuple21 (tuple21 c a) b)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 c a) b))) (sort (tuple2 (tuple2 c1 a1) b1)
  (t2tb2875 x))))

(declare-fun tb2t2875 (uni) (tuple21 (tuple21 c a) b))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 c a) b)))
  (! (= (tb2t2875 (t2tb2875 i)) i) :pattern ((t2tb2875 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 c1 a1) b1) j) (= (t2tb2875 (tb2t2875 j)) j)) :pattern (
  (t2tb2875 (tb2t2875 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 c a))) (t (set b)) (x (tuple21 c a)) (y b))
  (= (mem (tuple2 (tuple2 c1 a1) b1)
  (Tuple2 (tuple2 c1 a1) b1 (t2tb225 x) (t2tb14 y))
  (times b1 (tuple2 c1 a1) (t2tb224 s) (t2tb12 t)))
  (and (mem27 x s) (mem2 y t)))))

(declare-fun t2tb2876 ((set (tuple21 (tuple21 c a) a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 c a) a)))) (sort
  (set1 (tuple2 (tuple2 c1 a1) a1)) (t2tb2876 x))))

(declare-fun tb2t2876 (uni) (set (tuple21 (tuple21 c a) a)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 c a) a))))
  (! (= (tb2t2876 (t2tb2876 i)) i) :pattern ((t2tb2876 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 c1 a1) a1)) j)
     (= (t2tb2876 (tb2t2876 j)) j)) :pattern ((t2tb2876 (tb2t2876 j))) )))

(declare-fun t2tb2877 ((tuple21 (tuple21 c a) a)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 c a) a))) (sort (tuple2 (tuple2 c1 a1) a1)
  (t2tb2877 x))))

(declare-fun tb2t2877 (uni) (tuple21 (tuple21 c a) a))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 c a) a)))
  (! (= (tb2t2877 (t2tb2877 i)) i) :pattern ((t2tb2877 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 c1 a1) a1) j) (= (t2tb2877 (tb2t2877 j)) j)) :pattern (
  (t2tb2877 (tb2t2877 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 c a))) (t (set a)) (x (tuple21 c a)) (y a))
  (= (mem (tuple2 (tuple2 c1 a1) a1)
  (Tuple2 (tuple2 c1 a1) a1 (t2tb225 x) (t2tb2 y))
  (times a1 (tuple2 c1 a1) (t2tb224 s) (t2tb1 t)))
  (and (mem27 x s) (mem1 y t)))))

;; mem_times
  (assert
  (forall ((b2 ty))
  (forall ((s (set (tuple21 c a))) (t uni) (x (tuple21 c a)) (y uni))
  (= (mem (tuple2 (tuple2 c1 a1) b2) (Tuple2 (tuple2 c1 a1) b2 (t2tb225 x) y)
  (times b2 (tuple2 c1 a1) (t2tb224 s) t)) (and (mem27 x s) (mem b2 y t))))))

(declare-fun t2tb2803 ((set (tuple21 c (tuple21 c b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 c (tuple21 c b))))) (sort
  (set1 (tuple2 c1 (tuple2 c1 b1))) (t2tb2803 x))))

(declare-fun tb2t2803 (uni) (set (tuple21 c (tuple21 c b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 c (tuple21 c b)))))
  (! (= (tb2t2803 (t2tb2803 i)) i) :pattern ((t2tb2803 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 c1 (tuple2 c1 b1))) j)
     (= (t2tb2803 (tb2t2803 j)) j)) :pattern ((t2tb2803 (tb2t2803 j))) )))

(declare-fun t2tb2804 ((tuple21 c (tuple21 c b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 c (tuple21 c b)))) (sort (tuple2 c1 (tuple2 c1 b1))
  (t2tb2804 x))))

(declare-fun tb2t2804 (uni) (tuple21 c (tuple21 c b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 c (tuple21 c b))))
  (! (= (tb2t2804 (t2tb2804 i)) i) :pattern ((t2tb2804 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 c1 (tuple2 c1 b1)) j) (= (t2tb2804 (tb2t2804 j)) j)) :pattern (
  (t2tb2804 (tb2t2804 j))) )))

;; mem_times
  (assert
  (forall ((s (set c)) (t (set (tuple21 c b))) (x c) (y (tuple21 c b)))
  (= (mem (tuple2 c1 (tuple2 c1 b1))
  (Tuple2 c1 (tuple2 c1 b1) (t2tb135 x) (t2tb223 y))
  (times (tuple2 c1 b1) c1 (t2tb132 s) (t2tb222 t)))
  (and (mem7 x s) (mem28 y t)))))

(declare-fun t2tb2878 ((set (tuple21 c (tuple21 c a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 c (tuple21 c a))))) (sort
  (set1 (tuple2 c1 (tuple2 c1 a1))) (t2tb2878 x))))

(declare-fun tb2t2878 (uni) (set (tuple21 c (tuple21 c a))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 c (tuple21 c a)))))
  (! (= (tb2t2878 (t2tb2878 i)) i) :pattern ((t2tb2878 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 c1 (tuple2 c1 a1))) j)
     (= (t2tb2878 (tb2t2878 j)) j)) :pattern ((t2tb2878 (tb2t2878 j))) )))

(declare-fun t2tb2879 ((tuple21 c (tuple21 c a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 c (tuple21 c a)))) (sort (tuple2 c1 (tuple2 c1 a1))
  (t2tb2879 x))))

(declare-fun tb2t2879 (uni) (tuple21 c (tuple21 c a)))

;; BridgeL
  (assert
  (forall ((i (tuple21 c (tuple21 c a))))
  (! (= (tb2t2879 (t2tb2879 i)) i) :pattern ((t2tb2879 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 c1 (tuple2 c1 a1)) j) (= (t2tb2879 (tb2t2879 j)) j)) :pattern (
  (t2tb2879 (tb2t2879 j))) )))

;; mem_times
  (assert
  (forall ((s (set c)) (t (set (tuple21 c a))) (x c) (y (tuple21 c a)))
  (= (mem (tuple2 c1 (tuple2 c1 a1))
  (Tuple2 c1 (tuple2 c1 a1) (t2tb135 x) (t2tb225 y))
  (times (tuple2 c1 a1) c1 (t2tb132 s) (t2tb224 t)))
  (and (mem7 x s) (mem27 y t)))))

(declare-fun t2tb216 ((set (tuple21 c c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 c c)))) (sort (set1 (tuple2 c1 c1)) (t2tb216 x))))

(declare-fun tb2t216 (uni) (set (tuple21 c c)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 c c))))
  (! (= (tb2t216 (t2tb216 i)) i) :pattern ((t2tb216 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 c1 c1)) j) (= (t2tb216 (tb2t216 j)) j)) :pattern (
  (t2tb216 (tb2t216 j))) )))

(declare-fun t2tb217 ((tuple21 c c)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 c c))) (sort (tuple2 c1 c1) (t2tb217 x))))

(declare-fun tb2t217 (uni) (tuple21 c c))

;; BridgeL
  (assert
  (forall ((i (tuple21 c c)))
  (! (= (tb2t217 (t2tb217 i)) i) :pattern ((t2tb217 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 c1 c1) j) (= (t2tb217 (tb2t217 j)) j)) :pattern (
  (t2tb217 (tb2t217 j))) )))

;; mem_times
  (assert
  (forall ((s (set c)) (t (set c)) (x c) (y c))
  (= (mem (tuple2 c1 c1) (Tuple2 c1 c1 (t2tb135 x) (t2tb135 y))
  (times c1 c1 (t2tb132 s) (t2tb132 t))) (and (mem7 x s) (mem7 y t)))))

(declare-fun t2tb218 ((set (tuple21 c (set (tuple21 a b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 c (set (tuple21 a b)))))) (sort
  (set1 (tuple2 c1 (set1 (tuple2 a1 b1)))) (t2tb218 x))))

(declare-fun tb2t218 (uni) (set (tuple21 c (set (tuple21 a b)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 c (set (tuple21 a b))))))
  (! (= (tb2t218 (t2tb218 i)) i) :pattern ((t2tb218 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 c1 (set1 (tuple2 a1 b1)))) j)
     (= (t2tb218 (tb2t218 j)) j)) :pattern ((t2tb218 (tb2t218 j))) )))

(declare-fun t2tb219 ((tuple21 c (set (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 c (set (tuple21 a b))))) (sort
  (tuple2 c1 (set1 (tuple2 a1 b1))) (t2tb219 x))))

(declare-fun tb2t219 (uni) (tuple21 c (set (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (tuple21 c (set (tuple21 a b)))))
  (! (= (tb2t219 (t2tb219 i)) i) :pattern ((t2tb219 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 c1 (set1 (tuple2 a1 b1))) j)
     (= (t2tb219 (tb2t219 j)) j)) :pattern ((t2tb219 (tb2t219 j))) )))

;; mem_times
  (assert
  (forall ((s (set c)) (t (set (set (tuple21 a b)))) (x c) (y (set (tuple21 a
  b))))
  (= (mem (tuple2 c1 (set1 (tuple2 a1 b1)))
  (Tuple2 c1 (set1 (tuple2 a1 b1)) (t2tb135 x) (t2tb11 y))
  (times (set1 (tuple2 a1 b1)) c1 (t2tb132 s) (t2tb10 t)))
  (and (mem7 x s) (mem4 y t)))))

(declare-fun t2tb220 ((set (tuple21 c (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 c (tuple21 a b))))) (sort
  (set1 (tuple2 c1 (tuple2 a1 b1))) (t2tb220 x))))

(declare-fun tb2t220 (uni) (set (tuple21 c (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 c (tuple21 a b)))))
  (! (= (tb2t220 (t2tb220 i)) i) :pattern ((t2tb220 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 c1 (tuple2 a1 b1))) j)
     (= (t2tb220 (tb2t220 j)) j)) :pattern ((t2tb220 (tb2t220 j))) )))

(declare-fun t2tb221 ((tuple21 c (tuple21 a b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 c (tuple21 a b)))) (sort (tuple2 c1 (tuple2 a1 b1))
  (t2tb221 x))))

(declare-fun tb2t221 (uni) (tuple21 c (tuple21 a b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 c (tuple21 a b))))
  (! (= (tb2t221 (t2tb221 i)) i) :pattern ((t2tb221 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 c1 (tuple2 a1 b1)) j) (= (t2tb221 (tb2t221 j)) j)) :pattern (
  (t2tb221 (tb2t221 j))) )))

;; mem_times
  (assert
  (forall ((s (set c)) (t (set (tuple21 a b))) (x c) (y (tuple21 a b)))
  (= (mem (tuple2 c1 (tuple2 a1 b1))
  (Tuple2 c1 (tuple2 a1 b1) (t2tb135 x) (t2tb13 y))
  (times (tuple2 a1 b1) c1 (t2tb132 s) (t2tb11 t)))
  (and (mem7 x s) (mem3 y t)))))

;; mem_times
  (assert
  (forall ((s (set c)) (t (set b)) (x c) (y b))
  (= (mem28 (tb2t223 (Tuple2 c1 b1 (t2tb135 x) (t2tb14 y))) (times13 s t))
  (and (mem7 x s) (mem2 y t)))))

;; mem_times
  (assert
  (forall ((s (set c)) (t (set a)) (x c) (y a))
  (= (mem27 (tb2t225 (Tuple2 c1 a1 (t2tb135 x) (t2tb2 y))) (times12 s t))
  (and (mem7 x s) (mem1 y t)))))

;; mem_times
  (assert
  (forall ((b2 ty))
  (forall ((s (set c)) (t uni) (x c) (y uni))
  (= (mem (tuple2 c1 b2) (Tuple2 c1 b2 (t2tb135 x) y)
  (times b2 c1 (t2tb132 s) t)) (and (mem7 x s) (mem b2 y t))))))

(declare-fun t2tb2807 ((set (tuple21 (set (tuple21 a b)) (tuple21 c
  b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a b)) (tuple21 c b))))) (sort
  (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 c1 b1))) (t2tb2807 x))))

(declare-fun tb2t2807 (uni) (set (tuple21 (set (tuple21 a b)) (tuple21 c
  b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a b)) (tuple21 c b)))))
  (! (= (tb2t2807 (t2tb2807 i)) i) :pattern ((t2tb2807 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 c1 b1))) j)
     (= (t2tb2807 (tb2t2807 j)) j)) :pattern ((t2tb2807 (tb2t2807 j))) )))

(declare-fun t2tb2808 ((tuple21 (set (tuple21 a b)) (tuple21 c b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a b)) (tuple21 c b)))) (sort
  (tuple2 (set1 (tuple2 a1 b1)) (tuple2 c1 b1)) (t2tb2808 x))))

(declare-fun tb2t2808 (uni) (tuple21 (set (tuple21 a b)) (tuple21 c b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a b)) (tuple21 c b))))
  (! (= (tb2t2808 (t2tb2808 i)) i) :pattern ((t2tb2808 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 a1 b1)) (tuple2 c1 b1)) j)
     (= (t2tb2808 (tb2t2808 j)) j)) :pattern ((t2tb2808 (tb2t2808 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set (tuple21 c b)))
  (x (set (tuple21 a b))) (y (tuple21 c b)))
  (= (mem (tuple2 (set1 (tuple2 a1 b1)) (tuple2 c1 b1))
  (Tuple2 (set1 (tuple2 a1 b1)) (tuple2 c1 b1) (t2tb11 x) (t2tb223 y))
  (times (tuple2 c1 b1) (set1 (tuple2 a1 b1)) (t2tb10 s) (t2tb222 t)))
  (and (mem4 x s) (mem28 y t)))))

(declare-fun t2tb2880 ((set (tuple21 (set (tuple21 a b)) (tuple21 c
  a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a b)) (tuple21 c a))))) (sort
  (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 c1 a1))) (t2tb2880 x))))

(declare-fun tb2t2880 (uni) (set (tuple21 (set (tuple21 a b)) (tuple21 c
  a))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a b)) (tuple21 c a)))))
  (! (= (tb2t2880 (t2tb2880 i)) i) :pattern ((t2tb2880 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 c1 a1))) j)
     (= (t2tb2880 (tb2t2880 j)) j)) :pattern ((t2tb2880 (tb2t2880 j))) )))

(declare-fun t2tb2881 ((tuple21 (set (tuple21 a b)) (tuple21 c a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a b)) (tuple21 c a)))) (sort
  (tuple2 (set1 (tuple2 a1 b1)) (tuple2 c1 a1)) (t2tb2881 x))))

(declare-fun tb2t2881 (uni) (tuple21 (set (tuple21 a b)) (tuple21 c a)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a b)) (tuple21 c a))))
  (! (= (tb2t2881 (t2tb2881 i)) i) :pattern ((t2tb2881 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 a1 b1)) (tuple2 c1 a1)) j)
     (= (t2tb2881 (tb2t2881 j)) j)) :pattern ((t2tb2881 (tb2t2881 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set (tuple21 c a)))
  (x (set (tuple21 a b))) (y (tuple21 c a)))
  (= (mem (tuple2 (set1 (tuple2 a1 b1)) (tuple2 c1 a1))
  (Tuple2 (set1 (tuple2 a1 b1)) (tuple2 c1 a1) (t2tb11 x) (t2tb225 y))
  (times (tuple2 c1 a1) (set1 (tuple2 a1 b1)) (t2tb10 s) (t2tb224 t)))
  (and (mem4 x s) (mem27 y t)))))

(declare-fun t2tb234 ((set (tuple21 (set (tuple21 a b)) c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a b)) c)))) (sort
  (set1 (tuple2 (set1 (tuple2 a1 b1)) c1)) (t2tb234 x))))

(declare-fun tb2t234 (uni) (set (tuple21 (set (tuple21 a b)) c)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a b)) c))))
  (! (= (tb2t234 (t2tb234 i)) i) :pattern ((t2tb234 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 a1 b1)) c1)) j)
     (= (t2tb234 (tb2t234 j)) j)) :pattern ((t2tb234 (tb2t234 j))) )))

(declare-fun t2tb235 ((tuple21 (set (tuple21 a b)) c)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a b)) c))) (sort
  (tuple2 (set1 (tuple2 a1 b1)) c1) (t2tb235 x))))

(declare-fun tb2t235 (uni) (tuple21 (set (tuple21 a b)) c))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a b)) c)))
  (! (= (tb2t235 (t2tb235 i)) i) :pattern ((t2tb235 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 a1 b1)) c1) j)
     (= (t2tb235 (tb2t235 j)) j)) :pattern ((t2tb235 (tb2t235 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set c)) (x (set (tuple21 a b)))
  (y c))
  (= (mem (tuple2 (set1 (tuple2 a1 b1)) c1)
  (Tuple2 (set1 (tuple2 a1 b1)) c1 (t2tb11 x) (t2tb135 y))
  (times c1 (set1 (tuple2 a1 b1)) (t2tb10 s) (t2tb132 t)))
  (and (mem4 x s) (mem7 y t)))))

(declare-fun t2tb15 ((set (tuple21 (set (tuple21 a b)) (set (tuple21 a
  b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a b)) (set (tuple21 a b)))))) (sort
  (set1 (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1)))) (t2tb15 x))))

(declare-fun tb2t15 (uni) (set (tuple21 (set (tuple21 a b)) (set (tuple21 a
  b)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a b)) (set (tuple21 a b))))))
  (! (= (tb2t15 (t2tb15 i)) i) :pattern ((t2tb15 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1)))) j)
     (= (t2tb15 (tb2t15 j)) j)) :pattern ((t2tb15 (tb2t15 j))) )))

(declare-fun t2tb16 ((tuple21 (set (tuple21 a b)) (set (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a b)) (set (tuple21 a b))))) (sort
  (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1))) (t2tb16 x))))

(declare-fun tb2t16 (uni) (tuple21 (set (tuple21 a b)) (set (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a b)) (set (tuple21 a b)))))
  (! (= (tb2t16 (t2tb16 i)) i) :pattern ((t2tb16 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1))) j)
     (= (t2tb16 (tb2t16 j)) j)) :pattern ((t2tb16 (tb2t16 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set (set (tuple21 a b))))
  (x (set (tuple21 a b))) (y (set (tuple21 a b))))
  (= (mem (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1)))
  (Tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1)) (t2tb11 x) (t2tb11 y))
  (times (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1)) (t2tb10 s) (t2tb10 t)))
  (and (mem4 x s) (mem4 y t)))))

(declare-fun t2tb17 ((set (tuple21 (set (tuple21 a b)) (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a b)) (tuple21 a b))))) (sort
  (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 b1))) (t2tb17 x))))

(declare-fun tb2t17 (uni) (set (tuple21 (set (tuple21 a b)) (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a b)) (tuple21 a b)))))
  (! (= (tb2t17 (t2tb17 i)) i) :pattern ((t2tb17 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 b1))) j)
     (= (t2tb17 (tb2t17 j)) j)) :pattern ((t2tb17 (tb2t17 j))) )))

(declare-fun t2tb18 ((tuple21 (set (tuple21 a b)) (tuple21 a b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a b)) (tuple21 a b)))) (sort
  (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 b1)) (t2tb18 x))))

(declare-fun tb2t18 (uni) (tuple21 (set (tuple21 a b)) (tuple21 a b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a b)) (tuple21 a b))))
  (! (= (tb2t18 (t2tb18 i)) i) :pattern ((t2tb18 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 b1)) j)
     (= (t2tb18 (tb2t18 j)) j)) :pattern ((t2tb18 (tb2t18 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set (tuple21 a b)))
  (x (set (tuple21 a b))) (y (tuple21 a b)))
  (= (mem (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 b1))
  (Tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 b1) (t2tb11 x) (t2tb13 y))
  (times (tuple2 a1 b1) (set1 (tuple2 a1 b1)) (t2tb10 s) (t2tb11 t)))
  (and (mem4 x s) (mem3 y t)))))

(declare-fun t2tb19 ((set (tuple21 (set (tuple21 a b)) b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a b)) b)))) (sort
  (set1 (tuple2 (set1 (tuple2 a1 b1)) b1)) (t2tb19 x))))

(declare-fun tb2t19 (uni) (set (tuple21 (set (tuple21 a b)) b)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a b)) b))))
  (! (= (tb2t19 (t2tb19 i)) i) :pattern ((t2tb19 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 a1 b1)) b1)) j)
     (= (t2tb19 (tb2t19 j)) j)) :pattern ((t2tb19 (tb2t19 j))) )))

(declare-fun t2tb20 ((tuple21 (set (tuple21 a b)) b)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a b)) b))) (sort
  (tuple2 (set1 (tuple2 a1 b1)) b1) (t2tb20 x))))

(declare-fun tb2t20 (uni) (tuple21 (set (tuple21 a b)) b))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a b)) b)))
  (! (= (tb2t20 (t2tb20 i)) i) :pattern ((t2tb20 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 a1 b1)) b1) j)
     (= (t2tb20 (tb2t20 j)) j)) :pattern ((t2tb20 (tb2t20 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set b)) (x (set (tuple21 a b)))
  (y b))
  (= (mem (tuple2 (set1 (tuple2 a1 b1)) b1)
  (Tuple2 (set1 (tuple2 a1 b1)) b1 (t2tb11 x) (t2tb14 y))
  (times b1 (set1 (tuple2 a1 b1)) (t2tb10 s) (t2tb12 t)))
  (and (mem4 x s) (mem2 y t)))))

(declare-fun t2tb21 ((tuple21 (set (tuple21 a b)) a)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a b)) a))) (sort
  (tuple2 (set1 (tuple2 a1 b1)) a1) (t2tb21 x))))

(declare-fun tb2t21 (uni) (tuple21 (set (tuple21 a b)) a))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a b)) a)))
  (! (= (tb2t21 (t2tb21 i)) i) :pattern ((t2tb21 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 a1 b1)) a1) j)
     (= (t2tb21 (tb2t21 j)) j)) :pattern ((t2tb21 (tb2t21 j))) )))

(declare-fun t2tb22 ((set (tuple21 (set (tuple21 a b)) a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a b)) a)))) (sort
  (set1 (tuple2 (set1 (tuple2 a1 b1)) a1)) (t2tb22 x))))

(declare-fun tb2t22 (uni) (set (tuple21 (set (tuple21 a b)) a)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a b)) a))))
  (! (= (tb2t22 (t2tb22 i)) i) :pattern ((t2tb22 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 a1 b1)) a1)) j)
     (= (t2tb22 (tb2t22 j)) j)) :pattern ((t2tb22 (tb2t22 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set a)) (x (set (tuple21 a b)))
  (y a))
  (= (mem (tuple2 (set1 (tuple2 a1 b1)) a1)
  (Tuple2 (set1 (tuple2 a1 b1)) a1 (t2tb11 x) (t2tb2 y))
  (times a1 (set1 (tuple2 a1 b1)) (t2tb10 s) (t2tb1 t)))
  (and (mem4 x s) (mem1 y t)))))

;; mem_times
  (assert
  (forall ((b2 ty))
  (forall ((s (set (set (tuple21 a b)))) (t uni) (x (set (tuple21 a b)))
  (y uni))
  (= (mem (tuple2 (set1 (tuple2 a1 b1)) b2)
  (Tuple2 (set1 (tuple2 a1 b1)) b2 (t2tb11 x) y)
  (times b2 (set1 (tuple2 a1 b1)) (t2tb10 s) t))
  (and (mem4 x s) (mem b2 y t))))))

(declare-fun t2tb2811 ((set (tuple21 (tuple21 a b) (tuple21 c b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) (tuple21 c b))))) (sort
  (set1 (tuple2 (tuple2 a1 b1) (tuple2 c1 b1))) (t2tb2811 x))))

(declare-fun tb2t2811 (uni) (set (tuple21 (tuple21 a b) (tuple21 c b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a b) (tuple21 c b)))))
  (! (= (tb2t2811 (t2tb2811 i)) i) :pattern ((t2tb2811 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 b1) (tuple2 c1 b1))) j)
     (= (t2tb2811 (tb2t2811 j)) j)) :pattern ((t2tb2811 (tb2t2811 j))) )))

(declare-fun t2tb2812 ((tuple21 (tuple21 a b) (tuple21 c b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a b) (tuple21 c b)))) (sort
  (tuple2 (tuple2 a1 b1) (tuple2 c1 b1)) (t2tb2812 x))))

(declare-fun tb2t2812 (uni) (tuple21 (tuple21 a b) (tuple21 c b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a b) (tuple21 c b))))
  (! (= (tb2t2812 (t2tb2812 i)) i) :pattern ((t2tb2812 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 b1) (tuple2 c1 b1)) j)
     (= (t2tb2812 (tb2t2812 j)) j)) :pattern ((t2tb2812 (tb2t2812 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (tuple21 c b))) (x (tuple21 a b))
  (y (tuple21 c b)))
  (= (mem (tuple2 (tuple2 a1 b1) (tuple2 c1 b1))
  (Tuple2 (tuple2 a1 b1) (tuple2 c1 b1) (t2tb13 x) (t2tb223 y))
  (times (tuple2 c1 b1) (tuple2 a1 b1) (t2tb11 s) (t2tb222 t)))
  (and (mem3 x s) (mem28 y t)))))

(declare-fun t2tb2418 ((set (tuple21 (tuple21 a b) (tuple21 c a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) (tuple21 c a))))) (sort
  (set1 (tuple2 (tuple2 a1 b1) (tuple2 c1 a1))) (t2tb2418 x))))

(declare-fun tb2t2418 (uni) (set (tuple21 (tuple21 a b) (tuple21 c a))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a b) (tuple21 c a)))))
  (! (= (tb2t2418 (t2tb2418 i)) i) :pattern ((t2tb2418 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 b1) (tuple2 c1 a1))) j)
     (= (t2tb2418 (tb2t2418 j)) j)) :pattern ((t2tb2418 (tb2t2418 j))) )))

(declare-fun t2tb2419 ((tuple21 (tuple21 a b) (tuple21 c a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a b) (tuple21 c a)))) (sort
  (tuple2 (tuple2 a1 b1) (tuple2 c1 a1)) (t2tb2419 x))))

(declare-fun tb2t2419 (uni) (tuple21 (tuple21 a b) (tuple21 c a)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a b) (tuple21 c a))))
  (! (= (tb2t2419 (t2tb2419 i)) i) :pattern ((t2tb2419 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 b1) (tuple2 c1 a1)) j)
     (= (t2tb2419 (tb2t2419 j)) j)) :pattern ((t2tb2419 (tb2t2419 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (tuple21 c a))) (x (tuple21 a b))
  (y (tuple21 c a)))
  (= (mem (tuple2 (tuple2 a1 b1) (tuple2 c1 a1))
  (Tuple2 (tuple2 a1 b1) (tuple2 c1 a1) (t2tb13 x) (t2tb225 y))
  (times (tuple2 c1 a1) (tuple2 a1 b1) (t2tb11 s) (t2tb224 t)))
  (and (mem3 x s) (mem27 y t)))))

(declare-fun t2tb244 ((tuple21 (tuple21 a b) c)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a b) c))) (sort (tuple2 (tuple2 a1 b1) c1)
  (t2tb244 x))))

(declare-fun tb2t244 (uni) (tuple21 (tuple21 a b) c))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a b) c)))
  (! (= (tb2t244 (t2tb244 i)) i) :pattern ((t2tb244 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 b1) c1) j) (= (t2tb244 (tb2t244 j)) j)) :pattern (
  (t2tb244 (tb2t244 j))) )))

(declare-fun t2tb245 ((set (tuple21 (tuple21 a b) c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) c)))) (sort
  (set1 (tuple2 (tuple2 a1 b1) c1)) (t2tb245 x))))

(declare-fun tb2t245 (uni) (set (tuple21 (tuple21 a b) c)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a b) c))))
  (! (= (tb2t245 (t2tb245 i)) i) :pattern ((t2tb245 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 b1) c1)) j)
     (= (t2tb245 (tb2t245 j)) j)) :pattern ((t2tb245 (tb2t245 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a b))) (t (set c)) (x (tuple21 a b)) (y c))
  (= (mem (tuple2 (tuple2 a1 b1) c1)
  (Tuple2 (tuple2 a1 b1) c1 (t2tb13 x) (t2tb135 y))
  (times c1 (tuple2 a1 b1) (t2tb11 s) (t2tb132 t)))
  (and (mem3 x s) (mem7 y t)))))

(declare-fun t2tb23 ((set (tuple21 (tuple21 a b) (set (tuple21 a b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) (set (tuple21 a b)))))) (sort
  (set1 (tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 b1)))) (t2tb23 x))))

(declare-fun tb2t23 (uni) (set (tuple21 (tuple21 a b) (set (tuple21 a b)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a b) (set (tuple21 a b))))))
  (! (= (tb2t23 (t2tb23 i)) i) :pattern ((t2tb23 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 b1)))) j)
     (= (t2tb23 (tb2t23 j)) j)) :pattern ((t2tb23 (tb2t23 j))) )))

(declare-fun t2tb24 ((tuple21 (tuple21 a b) (set (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a b) (set (tuple21 a b))))) (sort
  (tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 b1))) (t2tb24 x))))

(declare-fun tb2t24 (uni) (tuple21 (tuple21 a b) (set (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a b) (set (tuple21 a b)))))
  (! (= (tb2t24 (t2tb24 i)) i) :pattern ((t2tb24 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 b1))) j)
     (= (t2tb24 (tb2t24 j)) j)) :pattern ((t2tb24 (tb2t24 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (set (tuple21 a b))))
  (x (tuple21 a b)) (y (set (tuple21 a b))))
  (= (mem (tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 b1)))
  (Tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 b1)) (t2tb13 x) (t2tb11 y))
  (times (set1 (tuple2 a1 b1)) (tuple2 a1 b1) (t2tb11 s) (t2tb10 t)))
  (and (mem3 x s) (mem4 y t)))))

(declare-fun t2tb25 ((set (tuple21 (tuple21 a b) (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) (tuple21 a b))))) (sort
  (set1 (tuple2 (tuple2 a1 b1) (tuple2 a1 b1))) (t2tb25 x))))

(declare-fun tb2t25 (uni) (set (tuple21 (tuple21 a b) (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a b) (tuple21 a b)))))
  (! (= (tb2t25 (t2tb25 i)) i) :pattern ((t2tb25 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 b1) (tuple2 a1 b1))) j)
     (= (t2tb25 (tb2t25 j)) j)) :pattern ((t2tb25 (tb2t25 j))) )))

(declare-fun t2tb26 ((tuple21 (tuple21 a b) (tuple21 a b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a b) (tuple21 a b)))) (sort
  (tuple2 (tuple2 a1 b1) (tuple2 a1 b1)) (t2tb26 x))))

(declare-fun tb2t26 (uni) (tuple21 (tuple21 a b) (tuple21 a b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a b) (tuple21 a b))))
  (! (= (tb2t26 (t2tb26 i)) i) :pattern ((t2tb26 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 b1) (tuple2 a1 b1)) j)
     (= (t2tb26 (tb2t26 j)) j)) :pattern ((t2tb26 (tb2t26 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (tuple21 a b))) (x (tuple21 a b))
  (y (tuple21 a b)))
  (= (mem (tuple2 (tuple2 a1 b1) (tuple2 a1 b1))
  (Tuple2 (tuple2 a1 b1) (tuple2 a1 b1) (t2tb13 x) (t2tb13 y))
  (times (tuple2 a1 b1) (tuple2 a1 b1) (t2tb11 s) (t2tb11 t)))
  (and (mem3 x s) (mem3 y t)))))

(declare-fun t2tb27 ((set (tuple21 (tuple21 a b) b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) b)))) (sort
  (set1 (tuple2 (tuple2 a1 b1) b1)) (t2tb27 x))))

(declare-fun tb2t27 (uni) (set (tuple21 (tuple21 a b) b)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a b) b))))
  (! (= (tb2t27 (t2tb27 i)) i) :pattern ((t2tb27 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 b1) b1)) j)
     (= (t2tb27 (tb2t27 j)) j)) :pattern ((t2tb27 (tb2t27 j))) )))

(declare-fun t2tb28 ((tuple21 (tuple21 a b) b)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a b) b))) (sort (tuple2 (tuple2 a1 b1) b1)
  (t2tb28 x))))

(declare-fun tb2t28 (uni) (tuple21 (tuple21 a b) b))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a b) b)))
  (! (= (tb2t28 (t2tb28 i)) i) :pattern ((t2tb28 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 b1) b1) j) (= (t2tb28 (tb2t28 j)) j)) :pattern (
  (t2tb28 (tb2t28 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a b))) (t (set b)) (x (tuple21 a b)) (y b))
  (= (mem (tuple2 (tuple2 a1 b1) b1)
  (Tuple2 (tuple2 a1 b1) b1 (t2tb13 x) (t2tb14 y))
  (times b1 (tuple2 a1 b1) (t2tb11 s) (t2tb12 t)))
  (and (mem3 x s) (mem2 y t)))))

(declare-fun t2tb29 ((set (tuple21 (tuple21 a b) a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) a)))) (sort
  (set1 (tuple2 (tuple2 a1 b1) a1)) (t2tb29 x))))

(declare-fun tb2t29 (uni) (set (tuple21 (tuple21 a b) a)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a b) a))))
  (! (= (tb2t29 (t2tb29 i)) i) :pattern ((t2tb29 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 b1) a1)) j)
     (= (t2tb29 (tb2t29 j)) j)) :pattern ((t2tb29 (tb2t29 j))) )))

(declare-fun t2tb30 ((tuple21 (tuple21 a b) a)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a b) a))) (sort (tuple2 (tuple2 a1 b1) a1)
  (t2tb30 x))))

(declare-fun tb2t30 (uni) (tuple21 (tuple21 a b) a))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a b) a)))
  (! (= (tb2t30 (t2tb30 i)) i) :pattern ((t2tb30 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 b1) a1) j) (= (t2tb30 (tb2t30 j)) j)) :pattern (
  (t2tb30 (tb2t30 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a b))) (t (set a)) (x (tuple21 a b)) (y a))
  (= (mem (tuple2 (tuple2 a1 b1) a1)
  (Tuple2 (tuple2 a1 b1) a1 (t2tb13 x) (t2tb2 y))
  (times a1 (tuple2 a1 b1) (t2tb11 s) (t2tb1 t)))
  (and (mem3 x s) (mem1 y t)))))

;; mem_times
  (assert
  (forall ((b2 ty))
  (forall ((s (set (tuple21 a b))) (t uni) (x (tuple21 a b)) (y uni))
  (= (mem (tuple2 (tuple2 a1 b1) b2) (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) y)
  (times b2 (tuple2 a1 b1) (t2tb11 s) t)) (and (mem3 x s) (mem b2 y t))))))

(declare-fun t2tb2815 ((set (tuple21 b (tuple21 c b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 b (tuple21 c b))))) (sort
  (set1 (tuple2 b1 (tuple2 c1 b1))) (t2tb2815 x))))

(declare-fun tb2t2815 (uni) (set (tuple21 b (tuple21 c b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 b (tuple21 c b)))))
  (! (= (tb2t2815 (t2tb2815 i)) i) :pattern ((t2tb2815 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 b1 (tuple2 c1 b1))) j)
     (= (t2tb2815 (tb2t2815 j)) j)) :pattern ((t2tb2815 (tb2t2815 j))) )))

(declare-fun t2tb2816 ((tuple21 b (tuple21 c b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 b (tuple21 c b)))) (sort (tuple2 b1 (tuple2 c1 b1))
  (t2tb2816 x))))

(declare-fun tb2t2816 (uni) (tuple21 b (tuple21 c b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 b (tuple21 c b))))
  (! (= (tb2t2816 (t2tb2816 i)) i) :pattern ((t2tb2816 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 b1 (tuple2 c1 b1)) j) (= (t2tb2816 (tb2t2816 j)) j)) :pattern (
  (t2tb2816 (tb2t2816 j))) )))

;; mem_times
  (assert
  (forall ((s (set b)) (t (set (tuple21 c b))) (x b) (y (tuple21 c b)))
  (= (mem (tuple2 b1 (tuple2 c1 b1))
  (Tuple2 b1 (tuple2 c1 b1) (t2tb14 x) (t2tb223 y))
  (times (tuple2 c1 b1) b1 (t2tb12 s) (t2tb222 t)))
  (and (mem2 x s) (mem28 y t)))))

(declare-fun t2tb2409 ((set (tuple21 b (tuple21 c a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 b (tuple21 c a))))) (sort
  (set1 (tuple2 b1 (tuple2 c1 a1))) (t2tb2409 x))))

(declare-fun tb2t2409 (uni) (set (tuple21 b (tuple21 c a))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 b (tuple21 c a)))))
  (! (= (tb2t2409 (t2tb2409 i)) i) :pattern ((t2tb2409 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 b1 (tuple2 c1 a1))) j)
     (= (t2tb2409 (tb2t2409 j)) j)) :pattern ((t2tb2409 (tb2t2409 j))) )))

(declare-fun t2tb2410 ((tuple21 b (tuple21 c a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 b (tuple21 c a)))) (sort (tuple2 b1 (tuple2 c1 a1))
  (t2tb2410 x))))

(declare-fun tb2t2410 (uni) (tuple21 b (tuple21 c a)))

;; BridgeL
  (assert
  (forall ((i (tuple21 b (tuple21 c a))))
  (! (= (tb2t2410 (t2tb2410 i)) i) :pattern ((t2tb2410 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 b1 (tuple2 c1 a1)) j) (= (t2tb2410 (tb2t2410 j)) j)) :pattern (
  (t2tb2410 (tb2t2410 j))) )))

;; mem_times
  (assert
  (forall ((s (set b)) (t (set (tuple21 c a))) (x b) (y (tuple21 c a)))
  (= (mem (tuple2 b1 (tuple2 c1 a1))
  (Tuple2 b1 (tuple2 c1 a1) (t2tb14 x) (t2tb225 y))
  (times (tuple2 c1 a1) b1 (t2tb12 s) (t2tb224 t)))
  (and (mem2 x s) (mem27 y t)))))

(declare-fun t2tb131 ((set (tuple21 b c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 b c)))) (sort (set1 (tuple2 b1 c1)) (t2tb131 x))))

(declare-fun tb2t131 (uni) (set (tuple21 b c)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 b c))))
  (! (= (tb2t131 (t2tb131 i)) i) :pattern ((t2tb131 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 b1 c1)) j) (= (t2tb131 (tb2t131 j)) j)) :pattern (
  (t2tb131 (tb2t131 j))) )))

(declare-fun t2tb134 ((tuple21 b c)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 b c))) (sort (tuple2 b1 c1) (t2tb134 x))))

(declare-fun tb2t134 (uni) (tuple21 b c))

;; BridgeL
  (assert
  (forall ((i (tuple21 b c)))
  (! (= (tb2t134 (t2tb134 i)) i) :pattern ((t2tb134 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 b1 c1) j) (= (t2tb134 (tb2t134 j)) j)) :pattern (
  (t2tb134 (tb2t134 j))) )))

;; mem_times
  (assert
  (forall ((s (set b)) (t (set c)) (x b) (y c))
  (= (mem (tuple2 b1 c1) (Tuple2 b1 c1 (t2tb14 x) (t2tb135 y))
  (times c1 b1 (t2tb12 s) (t2tb132 t))) (and (mem2 x s) (mem7 y t)))))

(declare-fun t2tb31 ((set (tuple21 b (set (tuple21 a b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 b (set (tuple21 a b)))))) (sort
  (set1 (tuple2 b1 (set1 (tuple2 a1 b1)))) (t2tb31 x))))

(declare-fun tb2t31 (uni) (set (tuple21 b (set (tuple21 a b)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 b (set (tuple21 a b))))))
  (! (= (tb2t31 (t2tb31 i)) i) :pattern ((t2tb31 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 b1 (set1 (tuple2 a1 b1)))) j)
     (= (t2tb31 (tb2t31 j)) j)) :pattern ((t2tb31 (tb2t31 j))) )))

(declare-fun t2tb32 ((tuple21 b (set (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 b (set (tuple21 a b))))) (sort
  (tuple2 b1 (set1 (tuple2 a1 b1))) (t2tb32 x))))

(declare-fun tb2t32 (uni) (tuple21 b (set (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (tuple21 b (set (tuple21 a b)))))
  (! (= (tb2t32 (t2tb32 i)) i) :pattern ((t2tb32 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 b1 (set1 (tuple2 a1 b1))) j)
     (= (t2tb32 (tb2t32 j)) j)) :pattern ((t2tb32 (tb2t32 j))) )))

;; mem_times
  (assert
  (forall ((s (set b)) (t (set (set (tuple21 a b)))) (x b) (y (set (tuple21 a
  b))))
  (= (mem (tuple2 b1 (set1 (tuple2 a1 b1)))
  (Tuple2 b1 (set1 (tuple2 a1 b1)) (t2tb14 x) (t2tb11 y))
  (times (set1 (tuple2 a1 b1)) b1 (t2tb12 s) (t2tb10 t)))
  (and (mem2 x s) (mem4 y t)))))

(declare-fun t2tb33 ((tuple21 b (tuple21 a b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 b (tuple21 a b)))) (sort (tuple2 b1 (tuple2 a1 b1))
  (t2tb33 x))))

(declare-fun tb2t33 (uni) (tuple21 b (tuple21 a b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 b (tuple21 a b))))
  (! (= (tb2t33 (t2tb33 i)) i) :pattern ((t2tb33 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 b1 (tuple2 a1 b1)) j) (= (t2tb33 (tb2t33 j)) j)) :pattern (
  (t2tb33 (tb2t33 j))) )))

(declare-fun t2tb34 ((set (tuple21 b (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 b (tuple21 a b))))) (sort
  (set1 (tuple2 b1 (tuple2 a1 b1))) (t2tb34 x))))

(declare-fun tb2t34 (uni) (set (tuple21 b (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 b (tuple21 a b)))))
  (! (= (tb2t34 (t2tb34 i)) i) :pattern ((t2tb34 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 b1 (tuple2 a1 b1))) j)
     (= (t2tb34 (tb2t34 j)) j)) :pattern ((t2tb34 (tb2t34 j))) )))

;; mem_times
  (assert
  (forall ((s (set b)) (t (set (tuple21 a b))) (x b) (y (tuple21 a b)))
  (= (mem (tuple2 b1 (tuple2 a1 b1))
  (Tuple2 b1 (tuple2 a1 b1) (t2tb14 x) (t2tb13 y))
  (times (tuple2 a1 b1) b1 (t2tb12 s) (t2tb11 t)))
  (and (mem2 x s) (mem3 y t)))))

(declare-fun t2tb35 ((set (tuple21 b b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 b b)))) (sort (set1 (tuple2 b1 b1)) (t2tb35 x))))

(declare-fun tb2t35 (uni) (set (tuple21 b b)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 b b))))
  (! (= (tb2t35 (t2tb35 i)) i) :pattern ((t2tb35 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 b1 b1)) j) (= (t2tb35 (tb2t35 j)) j)) :pattern (
  (t2tb35 (tb2t35 j))) )))

(declare-fun t2tb36 ((tuple21 b b)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 b b))) (sort (tuple2 b1 b1) (t2tb36 x))))

(declare-fun tb2t36 (uni) (tuple21 b b))

;; BridgeL
  (assert
  (forall ((i (tuple21 b b)))
  (! (= (tb2t36 (t2tb36 i)) i) :pattern ((t2tb36 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 b1 b1) j) (= (t2tb36 (tb2t36 j)) j)) :pattern (
  (t2tb36 (tb2t36 j))) )))

;; mem_times
  (assert
  (forall ((s (set b)) (t (set b)) (x b) (y b))
  (= (mem (tuple2 b1 b1) (Tuple2 b1 b1 (t2tb14 x) (t2tb14 y))
  (times b1 b1 (t2tb12 s) (t2tb12 t))) (and (mem2 x s) (mem2 y t)))))

(declare-fun t2tb37 ((set (tuple21 b a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 b a)))) (sort (set1 (tuple2 b1 a1)) (t2tb37 x))))

(declare-fun tb2t37 (uni) (set (tuple21 b a)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 b a))))
  (! (= (tb2t37 (t2tb37 i)) i) :pattern ((t2tb37 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 b1 a1)) j) (= (t2tb37 (tb2t37 j)) j)) :pattern (
  (t2tb37 (tb2t37 j))) )))

(declare-fun t2tb38 ((tuple21 b a)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 b a))) (sort (tuple2 b1 a1) (t2tb38 x))))

(declare-fun tb2t38 (uni) (tuple21 b a))

;; BridgeL
  (assert
  (forall ((i (tuple21 b a)))
  (! (= (tb2t38 (t2tb38 i)) i) :pattern ((t2tb38 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 b1 a1) j) (= (t2tb38 (tb2t38 j)) j)) :pattern (
  (t2tb38 (tb2t38 j))) )))

;; mem_times
  (assert
  (forall ((s (set b)) (t (set a)) (x b) (y a))
  (= (mem (tuple2 b1 a1) (Tuple2 b1 a1 (t2tb14 x) (t2tb2 y))
  (times a1 b1 (t2tb12 s) (t2tb1 t))) (and (mem2 x s) (mem1 y t)))))

;; mem_times
  (assert
  (forall ((b2 ty))
  (forall ((s (set b)) (t uni) (x b) (y uni))
  (= (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) y)
  (times b2 b1 (t2tb12 s) t)) (and (mem2 x s) (mem b2 y t))))))

(declare-fun t2tb332 ((set (tuple21 a (tuple21 c b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (tuple21 c b))))) (sort
  (set1 (tuple2 a1 (tuple2 c1 b1))) (t2tb332 x))))

(declare-fun tb2t332 (uni) (set (tuple21 a (tuple21 c b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (tuple21 c b)))))
  (! (= (tb2t332 (t2tb332 i)) i) :pattern ((t2tb332 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (tuple2 c1 b1))) j)
     (= (t2tb332 (tb2t332 j)) j)) :pattern ((t2tb332 (tb2t332 j))) )))

(declare-fun t2tb333 ((tuple21 a (tuple21 c b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (tuple21 c b)))) (sort (tuple2 a1 (tuple2 c1 b1))
  (t2tb333 x))))

(declare-fun tb2t333 (uni) (tuple21 a (tuple21 c b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (tuple21 c b))))
  (! (= (tb2t333 (t2tb333 i)) i) :pattern ((t2tb333 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (tuple2 c1 b1)) j) (= (t2tb333 (tb2t333 j)) j)) :pattern (
  (t2tb333 (tb2t333 j))) )))

;; mem_times
  (assert
  (forall ((s (set a)) (t (set (tuple21 c b))) (x a) (y (tuple21 c b)))
  (= (mem (tuple2 a1 (tuple2 c1 b1))
  (Tuple2 a1 (tuple2 c1 b1) (t2tb2 x) (t2tb223 y))
  (times (tuple2 c1 b1) a1 (t2tb1 s) (t2tb222 t)))
  (and (mem1 x s) (mem28 y t)))))

(declare-fun t2tb2882 ((set (tuple21 a (tuple21 c a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (tuple21 c a))))) (sort
  (set1 (tuple2 a1 (tuple2 c1 a1))) (t2tb2882 x))))

(declare-fun tb2t2882 (uni) (set (tuple21 a (tuple21 c a))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (tuple21 c a)))))
  (! (= (tb2t2882 (t2tb2882 i)) i) :pattern ((t2tb2882 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (tuple2 c1 a1))) j)
     (= (t2tb2882 (tb2t2882 j)) j)) :pattern ((t2tb2882 (tb2t2882 j))) )))

(declare-fun t2tb2883 ((tuple21 a (tuple21 c a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (tuple21 c a)))) (sort (tuple2 a1 (tuple2 c1 a1))
  (t2tb2883 x))))

(declare-fun tb2t2883 (uni) (tuple21 a (tuple21 c a)))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (tuple21 c a))))
  (! (= (tb2t2883 (t2tb2883 i)) i) :pattern ((t2tb2883 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (tuple2 c1 a1)) j) (= (t2tb2883 (tb2t2883 j)) j)) :pattern (
  (t2tb2883 (tb2t2883 j))) )))

;; mem_times
  (assert
  (forall ((s (set a)) (t (set (tuple21 c a))) (x a) (y (tuple21 c a)))
  (= (mem (tuple2 a1 (tuple2 c1 a1))
  (Tuple2 a1 (tuple2 c1 a1) (t2tb2 x) (t2tb225 y))
  (times (tuple2 c1 a1) a1 (t2tb1 s) (t2tb224 t)))
  (and (mem1 x s) (mem27 y t)))))

(declare-fun t2tb129 ((set (tuple21 a c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a c)))) (sort (set1 (tuple2 a1 c1)) (t2tb129 x))))

(declare-fun tb2t129 (uni) (set (tuple21 a c)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a c))))
  (! (= (tb2t129 (t2tb129 i)) i) :pattern ((t2tb129 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 c1)) j) (= (t2tb129 (tb2t129 j)) j)) :pattern (
  (t2tb129 (tb2t129 j))) )))

(declare-fun t2tb133 ((tuple21 a c)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 a c))) (sort (tuple2 a1 c1) (t2tb133 x))))

(declare-fun tb2t133 (uni) (tuple21 a c))

;; BridgeL
  (assert
  (forall ((i (tuple21 a c)))
  (! (= (tb2t133 (t2tb133 i)) i) :pattern ((t2tb133 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 c1) j) (= (t2tb133 (tb2t133 j)) j)) :pattern (
  (t2tb133 (tb2t133 j))) )))

;; mem_times
  (assert
  (forall ((s (set a)) (t (set c)) (x a) (y c))
  (= (mem (tuple2 a1 c1) (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y))
  (times c1 a1 (t2tb1 s) (t2tb132 t))) (and (mem1 x s) (mem7 y t)))))

(declare-fun t2tb39 ((set (tuple21 a (set (tuple21 a b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (set (tuple21 a b)))))) (sort
  (set1 (tuple2 a1 (set1 (tuple2 a1 b1)))) (t2tb39 x))))

(declare-fun tb2t39 (uni) (set (tuple21 a (set (tuple21 a b)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (set (tuple21 a b))))))
  (! (= (tb2t39 (t2tb39 i)) i) :pattern ((t2tb39 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (set1 (tuple2 a1 b1)))) j)
     (= (t2tb39 (tb2t39 j)) j)) :pattern ((t2tb39 (tb2t39 j))) )))

(declare-fun t2tb40 ((tuple21 a (set (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (set (tuple21 a b))))) (sort
  (tuple2 a1 (set1 (tuple2 a1 b1))) (t2tb40 x))))

(declare-fun tb2t40 (uni) (tuple21 a (set (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (set (tuple21 a b)))))
  (! (= (tb2t40 (t2tb40 i)) i) :pattern ((t2tb40 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (set1 (tuple2 a1 b1))) j)
     (= (t2tb40 (tb2t40 j)) j)) :pattern ((t2tb40 (tb2t40 j))) )))

;; mem_times
  (assert
  (forall ((s (set a)) (t (set (set (tuple21 a b)))) (x a) (y (set (tuple21 a
  b))))
  (= (mem (tuple2 a1 (set1 (tuple2 a1 b1)))
  (Tuple2 a1 (set1 (tuple2 a1 b1)) (t2tb2 x) (t2tb11 y))
  (times (set1 (tuple2 a1 b1)) a1 (t2tb1 s) (t2tb10 t)))
  (and (mem1 x s) (mem4 y t)))))

(declare-fun t2tb41 ((set (tuple21 a (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (tuple21 a b))))) (sort
  (set1 (tuple2 a1 (tuple2 a1 b1))) (t2tb41 x))))

(declare-fun tb2t41 (uni) (set (tuple21 a (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (tuple21 a b)))))
  (! (= (tb2t41 (t2tb41 i)) i) :pattern ((t2tb41 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (tuple2 a1 b1))) j)
     (= (t2tb41 (tb2t41 j)) j)) :pattern ((t2tb41 (tb2t41 j))) )))

(declare-fun t2tb42 ((tuple21 a (tuple21 a b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (tuple21 a b)))) (sort (tuple2 a1 (tuple2 a1 b1))
  (t2tb42 x))))

(declare-fun tb2t42 (uni) (tuple21 a (tuple21 a b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (tuple21 a b))))
  (! (= (tb2t42 (t2tb42 i)) i) :pattern ((t2tb42 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (tuple2 a1 b1)) j) (= (t2tb42 (tb2t42 j)) j)) :pattern (
  (t2tb42 (tb2t42 j))) )))

;; mem_times
  (assert
  (forall ((s (set a)) (t (set (tuple21 a b))) (x a) (y (tuple21 a b)))
  (= (mem (tuple2 a1 (tuple2 a1 b1))
  (Tuple2 a1 (tuple2 a1 b1) (t2tb2 x) (t2tb13 y))
  (times (tuple2 a1 b1) a1 (t2tb1 s) (t2tb11 t)))
  (and (mem1 x s) (mem3 y t)))))

;; mem_times
  (assert
  (forall ((s (set a)) (t (set b)) (x a) (y b))
  (= (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y))) (times2 s t))
  (and (mem1 x s) (mem2 y t)))))

(declare-fun t2tb4 ((set (tuple21 a a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a a)))) (sort (set1 (tuple2 a1 a1)) (t2tb4 x))))

(declare-fun tb2t4 (uni) (set (tuple21 a a)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a a))))
  (! (= (tb2t4 (t2tb4 i)) i) :pattern ((t2tb4 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 a1)) j) (= (t2tb4 (tb2t4 j)) j)) :pattern (
  (t2tb4 (tb2t4 j))) )))

(declare-fun t2tb5 ((tuple21 a a)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 a a))) (sort (tuple2 a1 a1) (t2tb5 x))))

(declare-fun tb2t5 (uni) (tuple21 a a))

;; BridgeL
  (assert
  (forall ((i (tuple21 a a)))
  (! (= (tb2t5 (t2tb5 i)) i) :pattern ((t2tb5 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 a1) j) (= (t2tb5 (tb2t5 j)) j)) :pattern ((t2tb5
                                                                    (tb2t5 j))) )))

;; mem_times
  (assert
  (forall ((s (set a)) (t (set a)) (x a) (y a))
  (= (mem (tuple2 a1 a1) (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y))
  (times a1 a1 (t2tb1 s) (t2tb1 t))) (and (mem1 x s) (mem1 y t)))))

;; mem_times
  (assert
  (forall ((b2 ty))
  (forall ((s (set a)) (t uni) (x a) (y uni))
  (= (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) y)
  (times b2 a1 (t2tb1 s) t)) (and (mem1 x s) (mem b2 y t))))))

;; mem_times
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (x uni) (y uni))
  (= (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) (times b2 a2 s t))
  (and (mem a2 x s) (mem b2 y t))))))

;; mem_power
  (assert
  (forall ((s (set (tuple21 c b))) (t (set (tuple21 c b))))
  (= (mem (set1 (tuple2 c1 b1)) (t2tb222 s)
  (power (tuple2 c1 b1) (t2tb222 t)))
  (forall ((x (tuple21 c b))) (=> (mem28 x s) (mem28 x t))))))

;; mem_power
  (assert
  (forall ((s (set (tuple21 c a))) (t (set (tuple21 c a))))
  (= (mem (set1 (tuple2 c1 a1)) (t2tb224 s)
  (power (tuple2 c1 a1) (t2tb224 t)))
  (forall ((x (tuple21 c a))) (=> (mem27 x s) (mem27 x t))))))

;; mem_power
  (assert
  (forall ((s (set c)) (t (set c)))
  (= (mem (set1 c1) (t2tb132 s) (power c1 (t2tb132 t)))
  (forall ((x c)) (=> (mem7 x s) (mem7 x t))))))

;; mem_power
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set (set (tuple21 a b)))))
  (= (mem (set1 (set1 (tuple2 a1 b1))) (t2tb10 s)
  (power (set1 (tuple2 a1 b1)) (t2tb10 t)))
  (forall ((x (set (tuple21 a b)))) (=> (mem4 x s) (mem4 x t))))))

;; mem_power
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (tuple21 a b))))
  (= (mem4 s (tb2t10 (power (tuple2 a1 b1) (t2tb11 t))))
  (forall ((x (tuple21 a b))) (=> (mem3 x s) (mem3 x t))))))

;; mem_power
  (assert
  (forall ((s (set b)) (t (set b)))
  (= (mem (set1 b1) (t2tb12 s) (power b1 (t2tb12 t)))
  (forall ((x b)) (=> (mem2 x s) (mem2 x t))))))

;; mem_power
  (assert
  (forall ((s (set a)) (t (set a)))
  (= (mem (set1 a1) (t2tb1 s) (power a1 (t2tb1 t)))
  (forall ((x a)) (=> (mem1 x s) (mem1 x t))))))

;; mem_power
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t uni))
  (and
  (=> (mem (set1 a2) s (power a2 t))
  (forall ((x uni)) (=> (mem a2 x s) (mem a2 x t))))
  (=> (forall ((x uni)) (=> (sort a2 x) (=> (mem a2 x s) (mem a2 x t)))) (mem
  (set1 a2) s (power a2 t)))))))

;; mem_non_empty_power
  (assert
  (forall ((s (set (tuple21 c b))) (t (set (tuple21 c b))))
  (= (mem (set1 (tuple2 c1 b1)) (t2tb222 s)
  (non_empty_power (tuple2 c1 b1) (t2tb222 t)))
  (and (forall ((x (tuple21 c b))) (=> (mem28 x s) (mem28 x t)))
  (not (infix_eqeq12 s (tb2t222 (empty (tuple2 c1 b1)))))))))

;; mem_non_empty_power
  (assert
  (forall ((s (set (tuple21 c a))) (t (set (tuple21 c a))))
  (= (mem (set1 (tuple2 c1 a1)) (t2tb224 s)
  (non_empty_power (tuple2 c1 a1) (t2tb224 t)))
  (and (forall ((x (tuple21 c a))) (=> (mem27 x s) (mem27 x t)))
  (not (infix_eqeq11 s (tb2t224 (empty (tuple2 c1 a1)))))))))

;; mem_non_empty_power
  (assert
  (forall ((s (set c)) (t (set c)))
  (= (mem (set1 c1) (t2tb132 s) (non_empty_power c1 (t2tb132 t)))
  (and (forall ((x c)) (=> (mem7 x s) (mem7 x t)))
  (not (infix_eqeq7 s (tb2t132 (empty c1))))))))

;; mem_non_empty_power
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set (set (tuple21 a b)))))
  (= (mem (set1 (set1 (tuple2 a1 b1))) (t2tb10 s)
  (non_empty_power (set1 (tuple2 a1 b1)) (t2tb10 t)))
  (and (forall ((x (set (tuple21 a b)))) (=> (mem4 x s) (mem4 x t)))
  (not (infix_eqeq5 s (tb2t10 (empty (set1 (tuple2 a1 b1))))))))))

;; mem_non_empty_power
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (tuple21 a b))))
  (= (mem4 s (tb2t10 (non_empty_power (tuple2 a1 b1) (t2tb11 t))))
  (and (forall ((x (tuple21 a b))) (=> (mem3 x s) (mem3 x t)))
  (not (infix_eqeq4 s (tb2t11 (empty (tuple2 a1 b1)))))))))

;; mem_non_empty_power
  (assert
  (forall ((s (set b)) (t (set b)))
  (= (mem (set1 b1) (t2tb12 s) (non_empty_power b1 (t2tb12 t)))
  (and (forall ((x b)) (=> (mem2 x s) (mem2 x t)))
  (not (infix_eqeq3 s (tb2t12 (empty b1))))))))

;; mem_non_empty_power
  (assert
  (forall ((s (set a)) (t (set a)))
  (= (mem (set1 a1) (t2tb1 s) (non_empty_power a1 (t2tb1 t)))
  (and (forall ((x a)) (=> (mem1 x s) (mem1 x t)))
  (not (infix_eqeq1 s (tb2t1 (empty a1))))))))

;; mem_non_empty_power
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t uni))
  (and
  (=> (mem (set1 a2) s (non_empty_power a2 t))
  (and (forall ((x uni)) (=> (mem a2 x s) (mem a2 x t)))
  (not (infix_eqeq a2 s (empty a2)))))
  (=>
  (and (forall ((x uni)) (=> (sort a2 x) (=> (mem a2 x s) (mem a2 x t))))
  (not (infix_eqeq a2 s (empty a2)))) (mem (set1 a2) s
  (non_empty_power a2 t)))))))

(declare-fun choose (ty uni) uni)

;; choose_sort
  (assert (forall ((a2 ty)) (forall ((x uni)) (sort a2 (choose a2 x)))))

(declare-fun relation (ty ty uni uni) uni)

;; relation_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (set1 (tuple2 a2 b2)))
  (relation b2 a2 x x1)))))

(declare-fun relation1 ((set a) (set b)) (set (set (tuple21 a b))))

;; mem_relation
  (assert
  (forall ((a2 ty))
  (forall ((u uni) (v (set (tuple21 c b))) (r uni))
  (and
  (=> (mem (set1 (tuple2 a2 (tuple2 c1 b1))) r
  (relation (tuple2 c1 b1) a2 u (t2tb222 v)))
  (forall ((x uni) (y (tuple21 c b)))
  (=> (mem (tuple2 a2 (tuple2 c1 b1))
  (Tuple2 a2 (tuple2 c1 b1) x (t2tb223 y)) r) (and (mem a2 x u) (mem28 y v)))))
  (=>
  (forall ((x uni) (y (tuple21 c b)))
  (=> (sort a2 x)
  (=> (mem (tuple2 a2 (tuple2 c1 b1))
  (Tuple2 a2 (tuple2 c1 b1) x (t2tb223 y)) r) (and (mem a2 x u) (mem28 y v)))))
  (mem (set1 (tuple2 a2 (tuple2 c1 b1))) r
  (relation (tuple2 c1 b1) a2 u (t2tb222 v))))))))

;; mem_relation
  (assert
  (forall ((a2 ty))
  (forall ((u uni) (v (set (tuple21 c a))) (r uni))
  (and
  (=> (mem (set1 (tuple2 a2 (tuple2 c1 a1))) r
  (relation (tuple2 c1 a1) a2 u (t2tb224 v)))
  (forall ((x uni) (y (tuple21 c a)))
  (=> (mem (tuple2 a2 (tuple2 c1 a1))
  (Tuple2 a2 (tuple2 c1 a1) x (t2tb225 y)) r) (and (mem a2 x u) (mem27 y v)))))
  (=>
  (forall ((x uni) (y (tuple21 c a)))
  (=> (sort a2 x)
  (=> (mem (tuple2 a2 (tuple2 c1 a1))
  (Tuple2 a2 (tuple2 c1 a1) x (t2tb225 y)) r) (and (mem a2 x u) (mem27 y v)))))
  (mem (set1 (tuple2 a2 (tuple2 c1 a1))) r
  (relation (tuple2 c1 a1) a2 u (t2tb224 v))))))))

;; mem_relation
  (assert
  (forall ((a2 ty))
  (forall ((u uni) (v (set c)) (r uni))
  (and
  (=> (mem (set1 (tuple2 a2 c1)) r (relation c1 a2 u (t2tb132 v)))
  (forall ((x uni) (y c))
  (=> (mem (tuple2 a2 c1) (Tuple2 a2 c1 x (t2tb135 y)) r)
  (and (mem a2 x u) (mem7 y v)))))
  (=>
  (forall ((x uni) (y c))
  (=> (sort a2 x)
  (=> (mem (tuple2 a2 c1) (Tuple2 a2 c1 x (t2tb135 y)) r)
  (and (mem a2 x u) (mem7 y v))))) (mem (set1 (tuple2 a2 c1)) r
  (relation c1 a2 u (t2tb132 v))))))))

;; mem_relation
  (assert
  (forall ((a2 ty))
  (forall ((u uni) (v (set (set (tuple21 a b)))) (r uni))
  (and
  (=> (mem (set1 (tuple2 a2 (set1 (tuple2 a1 b1)))) r
  (relation (set1 (tuple2 a1 b1)) a2 u (t2tb10 v)))
  (forall ((x uni) (y (set (tuple21 a b))))
  (=> (mem (tuple2 a2 (set1 (tuple2 a1 b1)))
  (Tuple2 a2 (set1 (tuple2 a1 b1)) x (t2tb11 y)) r)
  (and (mem a2 x u) (mem4 y v)))))
  (=>
  (forall ((x uni) (y (set (tuple21 a b))))
  (=> (sort a2 x)
  (=> (mem (tuple2 a2 (set1 (tuple2 a1 b1)))
  (Tuple2 a2 (set1 (tuple2 a1 b1)) x (t2tb11 y)) r)
  (and (mem a2 x u) (mem4 y v))))) (mem
  (set1 (tuple2 a2 (set1 (tuple2 a1 b1)))) r
  (relation (set1 (tuple2 a1 b1)) a2 u (t2tb10 v))))))))

;; mem_relation
  (assert
  (forall ((a2 ty))
  (forall ((u uni) (v (set (tuple21 a b))) (r uni))
  (and
  (=> (mem (set1 (tuple2 a2 (tuple2 a1 b1))) r
  (relation (tuple2 a1 b1) a2 u (t2tb11 v)))
  (forall ((x uni) (y (tuple21 a b)))
  (=> (mem (tuple2 a2 (tuple2 a1 b1)) (Tuple2 a2 (tuple2 a1 b1) x (t2tb13 y))
  r) (and (mem a2 x u) (mem3 y v)))))
  (=>
  (forall ((x uni) (y (tuple21 a b)))
  (=> (sort a2 x)
  (=> (mem (tuple2 a2 (tuple2 a1 b1)) (Tuple2 a2 (tuple2 a1 b1) x (t2tb13 y))
  r) (and (mem a2 x u) (mem3 y v))))) (mem (set1 (tuple2 a2 (tuple2 a1 b1)))
  r (relation (tuple2 a1 b1) a2 u (t2tb11 v))))))))

;; mem_relation
  (assert
  (forall ((a2 ty))
  (forall ((u uni) (v (set b)) (r uni))
  (and
  (=> (mem (set1 (tuple2 a2 b1)) r (relation b1 a2 u (t2tb12 v)))
  (forall ((x uni) (y b))
  (=> (mem (tuple2 a2 b1) (Tuple2 a2 b1 x (t2tb14 y)) r)
  (and (mem a2 x u) (mem2 y v)))))
  (=>
  (forall ((x uni) (y b))
  (=> (sort a2 x)
  (=> (mem (tuple2 a2 b1) (Tuple2 a2 b1 x (t2tb14 y)) r)
  (and (mem a2 x u) (mem2 y v))))) (mem (set1 (tuple2 a2 b1)) r
  (relation b1 a2 u (t2tb12 v))))))))

;; mem_relation
  (assert
  (forall ((a2 ty))
  (forall ((u uni) (v (set a)) (r uni))
  (and
  (=> (mem (set1 (tuple2 a2 a1)) r (relation a1 a2 u (t2tb1 v)))
  (forall ((x uni) (y a))
  (=> (mem (tuple2 a2 a1) (Tuple2 a2 a1 x (t2tb2 y)) r)
  (and (mem a2 x u) (mem1 y v)))))
  (=>
  (forall ((x uni) (y a))
  (=> (sort a2 x)
  (=> (mem (tuple2 a2 a1) (Tuple2 a2 a1 x (t2tb2 y)) r)
  (and (mem a2 x u) (mem1 y v))))) (mem (set1 (tuple2 a2 a1)) r
  (relation a1 a2 u (t2tb1 v))))))))

(declare-fun t2tb2830 ((set (set (tuple21 (tuple21 c b) (tuple21 c
  b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 c b) (tuple21 c b)))))) (sort
  (set1 (set1 (tuple2 (tuple2 c1 b1) (tuple2 c1 b1)))) (t2tb2830 x))))

(declare-fun tb2t2830 (uni) (set (set (tuple21 (tuple21 c b) (tuple21 c
  b)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 c b) (tuple21 c b))))))
  (! (= (tb2t2830 (t2tb2830 i)) i) :pattern ((t2tb2830 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 c1 b1) (tuple2 c1 b1)))) j)
     (= (t2tb2830 (tb2t2830 j)) j)) :pattern ((t2tb2830 (tb2t2830 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 c b))) (v (set (tuple21 c b)))
  (r (set (tuple21 (tuple21 c b) (tuple21 c b)))))
  (= (mem (set1 (tuple2 (tuple2 c1 b1) (tuple2 c1 b1))) (t2tb2777 r)
  (relation (tuple2 c1 b1) (tuple2 c1 b1) (t2tb222 u) (t2tb222 v)))
  (forall ((x (tuple21 c b)) (y (tuple21 c b)))
  (=> (mem (tuple2 (tuple2 c1 b1) (tuple2 c1 b1))
  (Tuple2 (tuple2 c1 b1) (tuple2 c1 b1) (t2tb223 x) (t2tb223 y))
  (t2tb2777 r)) (and (mem28 x u) (mem28 y v)))))))

(declare-fun t2tb2884 ((set (set (tuple21 (tuple21 c b) (tuple21 c
  a))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 c b) (tuple21 c a)))))) (sort
  (set1 (set1 (tuple2 (tuple2 c1 b1) (tuple2 c1 a1)))) (t2tb2884 x))))

(declare-fun tb2t2884 (uni) (set (set (tuple21 (tuple21 c b) (tuple21 c
  a)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 c b) (tuple21 c a))))))
  (! (= (tb2t2884 (t2tb2884 i)) i) :pattern ((t2tb2884 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 c1 b1) (tuple2 c1 a1)))) j)
     (= (t2tb2884 (tb2t2884 j)) j)) :pattern ((t2tb2884 (tb2t2884 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 c b))) (v (set (tuple21 c a)))
  (r (set (tuple21 (tuple21 c b) (tuple21 c a)))))
  (= (mem (set1 (tuple2 (tuple2 c1 b1) (tuple2 c1 a1))) (t2tb2862 r)
  (relation (tuple2 c1 a1) (tuple2 c1 b1) (t2tb222 u) (t2tb224 v)))
  (forall ((x (tuple21 c b)) (y (tuple21 c a)))
  (=> (mem (tuple2 (tuple2 c1 b1) (tuple2 c1 a1))
  (Tuple2 (tuple2 c1 b1) (tuple2 c1 a1) (t2tb223 x) (t2tb225 y))
  (t2tb2862 r)) (and (mem28 x u) (mem27 y v)))))))

(declare-fun t2tb2833 ((set (set (tuple21 (tuple21 c b) c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 c b) c))))) (sort
  (set1 (set1 (tuple2 (tuple2 c1 b1) c1))) (t2tb2833 x))))

(declare-fun tb2t2833 (uni) (set (set (tuple21 (tuple21 c b) c))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 c b) c)))))
  (! (= (tb2t2833 (t2tb2833 i)) i) :pattern ((t2tb2833 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 c1 b1) c1))) j)
     (= (t2tb2833 (tb2t2833 j)) j)) :pattern ((t2tb2833 (tb2t2833 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 c b))) (v (set c)) (r (set (tuple21 (tuple21 c b)
  c))))
  (= (mem (set1 (tuple2 (tuple2 c1 b1) c1)) (t2tb2784 r)
  (relation c1 (tuple2 c1 b1) (t2tb222 u) (t2tb132 v)))
  (forall ((x (tuple21 c b)) (y c))
  (=> (mem (tuple2 (tuple2 c1 b1) c1)
  (Tuple2 (tuple2 c1 b1) c1 (t2tb223 x) (t2tb135 y)) (t2tb2784 r))
  (and (mem28 x u) (mem7 y v)))))))

(declare-fun t2tb2834 ((set (set (tuple21 (tuple21 c b) (set (tuple21 a
  b)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 c b) (set (tuple21 a b))))))) (sort
  (set1 (set1 (tuple2 (tuple2 c1 b1) (set1 (tuple2 a1 b1))))) (t2tb2834 x))))

(declare-fun tb2t2834 (uni) (set (set (tuple21 (tuple21 c b) (set (tuple21 a
  b))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 c b) (set (tuple21 a b)))))))
  (! (= (tb2t2834 (t2tb2834 i)) i) :pattern ((t2tb2834 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 c1 b1) (set1 (tuple2 a1 b1))))) j)
     (= (t2tb2834 (tb2t2834 j)) j)) :pattern ((t2tb2834 (tb2t2834 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 c b))) (v (set (set (tuple21 a b))))
  (r (set (tuple21 (tuple21 c b) (set (tuple21 a b))))))
  (= (mem (set1 (tuple2 (tuple2 c1 b1) (set1 (tuple2 a1 b1)))) (t2tb2785 r)
  (relation (set1 (tuple2 a1 b1)) (tuple2 c1 b1) (t2tb222 u) (t2tb10 v)))
  (forall ((x (tuple21 c b)) (y (set (tuple21 a b))))
  (=> (mem (tuple2 (tuple2 c1 b1) (set1 (tuple2 a1 b1)))
  (Tuple2 (tuple2 c1 b1) (set1 (tuple2 a1 b1)) (t2tb223 x) (t2tb11 y))
  (t2tb2785 r)) (and (mem28 x u) (mem4 y v)))))))

(declare-fun t2tb2835 ((set (set (tuple21 (tuple21 c b) (tuple21 a
  b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 c b) (tuple21 a b)))))) (sort
  (set1 (set1 (tuple2 (tuple2 c1 b1) (tuple2 a1 b1)))) (t2tb2835 x))))

(declare-fun tb2t2835 (uni) (set (set (tuple21 (tuple21 c b) (tuple21 a
  b)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 c b) (tuple21 a b))))))
  (! (= (tb2t2835 (t2tb2835 i)) i) :pattern ((t2tb2835 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 c1 b1) (tuple2 a1 b1)))) j)
     (= (t2tb2835 (tb2t2835 j)) j)) :pattern ((t2tb2835 (tb2t2835 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 c b))) (v (set (tuple21 a b)))
  (r (set (tuple21 (tuple21 c b) (tuple21 a b)))))
  (= (mem (set1 (tuple2 (tuple2 c1 b1) (tuple2 a1 b1))) (t2tb2787 r)
  (relation (tuple2 a1 b1) (tuple2 c1 b1) (t2tb222 u) (t2tb11 v)))
  (forall ((x (tuple21 c b)) (y (tuple21 a b)))
  (=> (mem (tuple2 (tuple2 c1 b1) (tuple2 a1 b1))
  (Tuple2 (tuple2 c1 b1) (tuple2 a1 b1) (t2tb223 x) (t2tb13 y)) (t2tb2787 r))
  (and (mem28 x u) (mem3 y v)))))))

(declare-fun t2tb2836 ((set (set (tuple21 (tuple21 c b) b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 c b) b))))) (sort
  (set1 (set1 (tuple2 (tuple2 c1 b1) b1))) (t2tb2836 x))))

(declare-fun tb2t2836 (uni) (set (set (tuple21 (tuple21 c b) b))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 c b) b)))))
  (! (= (tb2t2836 (t2tb2836 i)) i) :pattern ((t2tb2836 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 c1 b1) b1))) j)
     (= (t2tb2836 (tb2t2836 j)) j)) :pattern ((t2tb2836 (tb2t2836 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 c b))) (v (set b)) (r (set (tuple21 (tuple21 c b)
  b))))
  (= (mem (set1 (tuple2 (tuple2 c1 b1) b1)) (t2tb2789 r)
  (relation b1 (tuple2 c1 b1) (t2tb222 u) (t2tb12 v)))
  (forall ((x (tuple21 c b)) (y b))
  (=> (mem (tuple2 (tuple2 c1 b1) b1)
  (Tuple2 (tuple2 c1 b1) b1 (t2tb223 x) (t2tb14 y)) (t2tb2789 r))
  (and (mem28 x u) (mem2 y v)))))))

(declare-fun t2tb2837 ((set (set (tuple21 (tuple21 c b) a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 c b) a))))) (sort
  (set1 (set1 (tuple2 (tuple2 c1 b1) a1))) (t2tb2837 x))))

(declare-fun tb2t2837 (uni) (set (set (tuple21 (tuple21 c b) a))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 c b) a)))))
  (! (= (tb2t2837 (t2tb2837 i)) i) :pattern ((t2tb2837 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 c1 b1) a1))) j)
     (= (t2tb2837 (tb2t2837 j)) j)) :pattern ((t2tb2837 (tb2t2837 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 c b))) (v (set a)) (r (set (tuple21 (tuple21 c b)
  a))))
  (= (mem (set1 (tuple2 (tuple2 c1 b1) a1)) (t2tb2791 r)
  (relation a1 (tuple2 c1 b1) (t2tb222 u) (t2tb1 v)))
  (forall ((x (tuple21 c b)) (y a))
  (=> (mem (tuple2 (tuple2 c1 b1) a1)
  (Tuple2 (tuple2 c1 b1) a1 (t2tb223 x) (t2tb2 y)) (t2tb2791 r))
  (and (mem28 x u) (mem1 y v)))))))

;; mem_relation
  (assert
  (forall ((b2 ty))
  (forall ((u (set (tuple21 c b))) (v uni) (r uni))
  (and
  (=> (mem (set1 (tuple2 (tuple2 c1 b1) b2)) r
  (relation b2 (tuple2 c1 b1) (t2tb222 u) v))
  (forall ((x (tuple21 c b)) (y uni))
  (=> (mem (tuple2 (tuple2 c1 b1) b2)
  (Tuple2 (tuple2 c1 b1) b2 (t2tb223 x) y) r) (and (mem28 x u) (mem b2 y v)))))
  (=>
  (forall ((x (tuple21 c b)) (y uni))
  (=> (sort b2 y)
  (=> (mem (tuple2 (tuple2 c1 b1) b2)
  (Tuple2 (tuple2 c1 b1) b2 (t2tb223 x) y) r) (and (mem28 x u) (mem b2 y v)))))
  (mem (set1 (tuple2 (tuple2 c1 b1) b2)) r
  (relation b2 (tuple2 c1 b1) (t2tb222 u) v)))))))

(declare-fun t2tb2885 ((set (set (tuple21 (tuple21 c a) (tuple21 c
  b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 c a) (tuple21 c b)))))) (sort
  (set1 (set1 (tuple2 (tuple2 c1 a1) (tuple2 c1 b1)))) (t2tb2885 x))))

(declare-fun tb2t2885 (uni) (set (set (tuple21 (tuple21 c a) (tuple21 c
  b)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 c a) (tuple21 c b))))))
  (! (= (tb2t2885 (t2tb2885 i)) i) :pattern ((t2tb2885 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 c1 a1) (tuple2 c1 b1)))) j)
     (= (t2tb2885 (tb2t2885 j)) j)) :pattern ((t2tb2885 (tb2t2885 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 c a))) (v (set (tuple21 c b)))
  (r (set (tuple21 (tuple21 c a) (tuple21 c b)))))
  (= (mem (set1 (tuple2 (tuple2 c1 a1) (tuple2 c1 b1))) (t2tb2864 r)
  (relation (tuple2 c1 b1) (tuple2 c1 a1) (t2tb224 u) (t2tb222 v)))
  (forall ((x (tuple21 c a)) (y (tuple21 c b)))
  (=> (mem (tuple2 (tuple2 c1 a1) (tuple2 c1 b1))
  (Tuple2 (tuple2 c1 a1) (tuple2 c1 b1) (t2tb225 x) (t2tb223 y))
  (t2tb2864 r)) (and (mem27 x u) (mem28 y v)))))))

(declare-fun t2tb2886 ((set (set (tuple21 (tuple21 c a) (tuple21 c
  a))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 c a) (tuple21 c a)))))) (sort
  (set1 (set1 (tuple2 (tuple2 c1 a1) (tuple2 c1 a1)))) (t2tb2886 x))))

(declare-fun tb2t2886 (uni) (set (set (tuple21 (tuple21 c a) (tuple21 c
  a)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 c a) (tuple21 c a))))))
  (! (= (tb2t2886 (t2tb2886 i)) i) :pattern ((t2tb2886 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 c1 a1) (tuple2 c1 a1)))) j)
     (= (t2tb2886 (tb2t2886 j)) j)) :pattern ((t2tb2886 (tb2t2886 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 c a))) (v (set (tuple21 c a)))
  (r (set (tuple21 (tuple21 c a) (tuple21 c a)))))
  (= (mem (set1 (tuple2 (tuple2 c1 a1) (tuple2 c1 a1))) (t2tb2866 r)
  (relation (tuple2 c1 a1) (tuple2 c1 a1) (t2tb224 u) (t2tb224 v)))
  (forall ((x (tuple21 c a)) (y (tuple21 c a)))
  (=> (mem (tuple2 (tuple2 c1 a1) (tuple2 c1 a1))
  (Tuple2 (tuple2 c1 a1) (tuple2 c1 a1) (t2tb225 x) (t2tb225 y))
  (t2tb2866 r)) (and (mem27 x u) (mem27 y v)))))))

(declare-fun t2tb2887 ((set (set (tuple21 (tuple21 c a) c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 c a) c))))) (sort
  (set1 (set1 (tuple2 (tuple2 c1 a1) c1))) (t2tb2887 x))))

(declare-fun tb2t2887 (uni) (set (set (tuple21 (tuple21 c a) c))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 c a) c)))))
  (! (= (tb2t2887 (t2tb2887 i)) i) :pattern ((t2tb2887 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 c1 a1) c1))) j)
     (= (t2tb2887 (tb2t2887 j)) j)) :pattern ((t2tb2887 (tb2t2887 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 c a))) (v (set c)) (r (set (tuple21 (tuple21 c a)
  c))))
  (= (mem (set1 (tuple2 (tuple2 c1 a1) c1)) (t2tb2868 r)
  (relation c1 (tuple2 c1 a1) (t2tb224 u) (t2tb132 v)))
  (forall ((x (tuple21 c a)) (y c))
  (=> (mem (tuple2 (tuple2 c1 a1) c1)
  (Tuple2 (tuple2 c1 a1) c1 (t2tb225 x) (t2tb135 y)) (t2tb2868 r))
  (and (mem27 x u) (mem7 y v)))))))

(declare-fun t2tb2888 ((set (set (tuple21 (tuple21 c a) (set (tuple21 a
  b)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 c a) (set (tuple21 a b))))))) (sort
  (set1 (set1 (tuple2 (tuple2 c1 a1) (set1 (tuple2 a1 b1))))) (t2tb2888 x))))

(declare-fun tb2t2888 (uni) (set (set (tuple21 (tuple21 c a) (set (tuple21 a
  b))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 c a) (set (tuple21 a b)))))))
  (! (= (tb2t2888 (t2tb2888 i)) i) :pattern ((t2tb2888 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 c1 a1) (set1 (tuple2 a1 b1))))) j)
     (= (t2tb2888 (tb2t2888 j)) j)) :pattern ((t2tb2888 (tb2t2888 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 c a))) (v (set (set (tuple21 a b))))
  (r (set (tuple21 (tuple21 c a) (set (tuple21 a b))))))
  (= (mem (set1 (tuple2 (tuple2 c1 a1) (set1 (tuple2 a1 b1)))) (t2tb2870 r)
  (relation (set1 (tuple2 a1 b1)) (tuple2 c1 a1) (t2tb224 u) (t2tb10 v)))
  (forall ((x (tuple21 c a)) (y (set (tuple21 a b))))
  (=> (mem (tuple2 (tuple2 c1 a1) (set1 (tuple2 a1 b1)))
  (Tuple2 (tuple2 c1 a1) (set1 (tuple2 a1 b1)) (t2tb225 x) (t2tb11 y))
  (t2tb2870 r)) (and (mem27 x u) (mem4 y v)))))))

(declare-fun t2tb2889 ((set (set (tuple21 (tuple21 c a) (tuple21 a
  b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 c a) (tuple21 a b)))))) (sort
  (set1 (set1 (tuple2 (tuple2 c1 a1) (tuple2 a1 b1)))) (t2tb2889 x))))

(declare-fun tb2t2889 (uni) (set (set (tuple21 (tuple21 c a) (tuple21 a
  b)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 c a) (tuple21 a b))))))
  (! (= (tb2t2889 (t2tb2889 i)) i) :pattern ((t2tb2889 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 c1 a1) (tuple2 a1 b1)))) j)
     (= (t2tb2889 (tb2t2889 j)) j)) :pattern ((t2tb2889 (tb2t2889 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 c a))) (v (set (tuple21 a b)))
  (r (set (tuple21 (tuple21 c a) (tuple21 a b)))))
  (= (mem (set1 (tuple2 (tuple2 c1 a1) (tuple2 a1 b1))) (t2tb2872 r)
  (relation (tuple2 a1 b1) (tuple2 c1 a1) (t2tb224 u) (t2tb11 v)))
  (forall ((x (tuple21 c a)) (y (tuple21 a b)))
  (=> (mem (tuple2 (tuple2 c1 a1) (tuple2 a1 b1))
  (Tuple2 (tuple2 c1 a1) (tuple2 a1 b1) (t2tb225 x) (t2tb13 y)) (t2tb2872 r))
  (and (mem27 x u) (mem3 y v)))))))

(declare-fun t2tb2890 ((set (set (tuple21 (tuple21 c a) b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 c a) b))))) (sort
  (set1 (set1 (tuple2 (tuple2 c1 a1) b1))) (t2tb2890 x))))

(declare-fun tb2t2890 (uni) (set (set (tuple21 (tuple21 c a) b))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 c a) b)))))
  (! (= (tb2t2890 (t2tb2890 i)) i) :pattern ((t2tb2890 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 c1 a1) b1))) j)
     (= (t2tb2890 (tb2t2890 j)) j)) :pattern ((t2tb2890 (tb2t2890 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 c a))) (v (set b)) (r (set (tuple21 (tuple21 c a)
  b))))
  (= (mem (set1 (tuple2 (tuple2 c1 a1) b1)) (t2tb2874 r)
  (relation b1 (tuple2 c1 a1) (t2tb224 u) (t2tb12 v)))
  (forall ((x (tuple21 c a)) (y b))
  (=> (mem (tuple2 (tuple2 c1 a1) b1)
  (Tuple2 (tuple2 c1 a1) b1 (t2tb225 x) (t2tb14 y)) (t2tb2874 r))
  (and (mem27 x u) (mem2 y v)))))))

(declare-fun t2tb2891 ((set (set (tuple21 (tuple21 c a) a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 c a) a))))) (sort
  (set1 (set1 (tuple2 (tuple2 c1 a1) a1))) (t2tb2891 x))))

(declare-fun tb2t2891 (uni) (set (set (tuple21 (tuple21 c a) a))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 c a) a)))))
  (! (= (tb2t2891 (t2tb2891 i)) i) :pattern ((t2tb2891 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 c1 a1) a1))) j)
     (= (t2tb2891 (tb2t2891 j)) j)) :pattern ((t2tb2891 (tb2t2891 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 c a))) (v (set a)) (r (set (tuple21 (tuple21 c a)
  a))))
  (= (mem (set1 (tuple2 (tuple2 c1 a1) a1)) (t2tb2876 r)
  (relation a1 (tuple2 c1 a1) (t2tb224 u) (t2tb1 v)))
  (forall ((x (tuple21 c a)) (y a))
  (=> (mem (tuple2 (tuple2 c1 a1) a1)
  (Tuple2 (tuple2 c1 a1) a1 (t2tb225 x) (t2tb2 y)) (t2tb2876 r))
  (and (mem27 x u) (mem1 y v)))))))

;; mem_relation
  (assert
  (forall ((b2 ty))
  (forall ((u (set (tuple21 c a))) (v uni) (r uni))
  (and
  (=> (mem (set1 (tuple2 (tuple2 c1 a1) b2)) r
  (relation b2 (tuple2 c1 a1) (t2tb224 u) v))
  (forall ((x (tuple21 c a)) (y uni))
  (=> (mem (tuple2 (tuple2 c1 a1) b2)
  (Tuple2 (tuple2 c1 a1) b2 (t2tb225 x) y) r) (and (mem27 x u) (mem b2 y v)))))
  (=>
  (forall ((x (tuple21 c a)) (y uni))
  (=> (sort b2 y)
  (=> (mem (tuple2 (tuple2 c1 a1) b2)
  (Tuple2 (tuple2 c1 a1) b2 (t2tb225 x) y) r) (and (mem27 x u) (mem b2 y v)))))
  (mem (set1 (tuple2 (tuple2 c1 a1) b2)) r
  (relation b2 (tuple2 c1 a1) (t2tb224 u) v)))))))

(declare-fun t2tb2843 ((set (set (tuple21 c (tuple21 c b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 c (tuple21 c b)))))) (sort
  (set1 (set1 (tuple2 c1 (tuple2 c1 b1)))) (t2tb2843 x))))

(declare-fun tb2t2843 (uni) (set (set (tuple21 c (tuple21 c b)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 c (tuple21 c b))))))
  (! (= (tb2t2843 (t2tb2843 i)) i) :pattern ((t2tb2843 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 c1 (tuple2 c1 b1)))) j)
     (= (t2tb2843 (tb2t2843 j)) j)) :pattern ((t2tb2843 (tb2t2843 j))) )))

;; mem_relation
  (assert
  (forall ((u (set c)) (v (set (tuple21 c b))) (r (set (tuple21 c (tuple21 c
  b)))))
  (= (mem (set1 (tuple2 c1 (tuple2 c1 b1))) (t2tb2803 r)
  (relation (tuple2 c1 b1) c1 (t2tb132 u) (t2tb222 v)))
  (forall ((x c) (y (tuple21 c b)))
  (=> (mem (tuple2 c1 (tuple2 c1 b1))
  (Tuple2 c1 (tuple2 c1 b1) (t2tb135 x) (t2tb223 y)) (t2tb2803 r))
  (and (mem7 x u) (mem28 y v)))))))

(declare-fun t2tb2892 ((set (set (tuple21 c (tuple21 c a))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 c (tuple21 c a)))))) (sort
  (set1 (set1 (tuple2 c1 (tuple2 c1 a1)))) (t2tb2892 x))))

(declare-fun tb2t2892 (uni) (set (set (tuple21 c (tuple21 c a)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 c (tuple21 c a))))))
  (! (= (tb2t2892 (t2tb2892 i)) i) :pattern ((t2tb2892 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 c1 (tuple2 c1 a1)))) j)
     (= (t2tb2892 (tb2t2892 j)) j)) :pattern ((t2tb2892 (tb2t2892 j))) )))

;; mem_relation
  (assert
  (forall ((u (set c)) (v (set (tuple21 c a))) (r (set (tuple21 c (tuple21 c
  a)))))
  (= (mem (set1 (tuple2 c1 (tuple2 c1 a1))) (t2tb2878 r)
  (relation (tuple2 c1 a1) c1 (t2tb132 u) (t2tb224 v)))
  (forall ((x c) (y (tuple21 c a)))
  (=> (mem (tuple2 c1 (tuple2 c1 a1))
  (Tuple2 c1 (tuple2 c1 a1) (t2tb135 x) (t2tb225 y)) (t2tb2878 r))
  (and (mem7 x u) (mem27 y v)))))))

(declare-fun t2tb305 ((set (set (tuple21 c c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 c c))))) (sort (set1 (set1 (tuple2 c1 c1)))
  (t2tb305 x))))

(declare-fun tb2t305 (uni) (set (set (tuple21 c c))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 c c)))))
  (! (= (tb2t305 (t2tb305 i)) i) :pattern ((t2tb305 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 c1 c1))) j) (= (t2tb305 (tb2t305 j)) j)) :pattern (
  (t2tb305 (tb2t305 j))) )))

;; mem_relation
  (assert
  (forall ((u (set c)) (v (set c)) (r (set (tuple21 c c))))
  (= (mem (set1 (tuple2 c1 c1)) (t2tb216 r)
  (relation c1 c1 (t2tb132 u) (t2tb132 v)))
  (forall ((x c) (y c))
  (=> (mem (tuple2 c1 c1) (Tuple2 c1 c1 (t2tb135 x) (t2tb135 y)) (t2tb216 r))
  (and (mem7 x u) (mem7 y v)))))))

(declare-fun t2tb306 ((set (set (tuple21 c (set (tuple21 a b)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 c (set (tuple21 a b))))))) (sort
  (set1 (set1 (tuple2 c1 (set1 (tuple2 a1 b1))))) (t2tb306 x))))

(declare-fun tb2t306 (uni) (set (set (tuple21 c (set (tuple21 a b))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 c (set (tuple21 a b)))))))
  (! (= (tb2t306 (t2tb306 i)) i) :pattern ((t2tb306 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 c1 (set1 (tuple2 a1 b1))))) j)
     (= (t2tb306 (tb2t306 j)) j)) :pattern ((t2tb306 (tb2t306 j))) )))

;; mem_relation
  (assert
  (forall ((u (set c)) (v (set (set (tuple21 a b)))) (r (set (tuple21 c
  (set (tuple21 a b))))))
  (= (mem (set1 (tuple2 c1 (set1 (tuple2 a1 b1)))) (t2tb218 r)
  (relation (set1 (tuple2 a1 b1)) c1 (t2tb132 u) (t2tb10 v)))
  (forall ((x c) (y (set (tuple21 a b))))
  (=> (mem (tuple2 c1 (set1 (tuple2 a1 b1)))
  (Tuple2 c1 (set1 (tuple2 a1 b1)) (t2tb135 x) (t2tb11 y)) (t2tb218 r))
  (and (mem7 x u) (mem4 y v)))))))

(declare-fun t2tb307 ((set (set (tuple21 c (tuple21 a b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 c (tuple21 a b)))))) (sort
  (set1 (set1 (tuple2 c1 (tuple2 a1 b1)))) (t2tb307 x))))

(declare-fun tb2t307 (uni) (set (set (tuple21 c (tuple21 a b)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 c (tuple21 a b))))))
  (! (= (tb2t307 (t2tb307 i)) i) :pattern ((t2tb307 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 c1 (tuple2 a1 b1)))) j)
     (= (t2tb307 (tb2t307 j)) j)) :pattern ((t2tb307 (tb2t307 j))) )))

;; mem_relation
  (assert
  (forall ((u (set c)) (v (set (tuple21 a b))) (r (set (tuple21 c (tuple21 a
  b)))))
  (= (mem (set1 (tuple2 c1 (tuple2 a1 b1))) (t2tb220 r)
  (relation (tuple2 a1 b1) c1 (t2tb132 u) (t2tb11 v)))
  (forall ((x c) (y (tuple21 a b)))
  (=> (mem (tuple2 c1 (tuple2 a1 b1))
  (Tuple2 c1 (tuple2 a1 b1) (t2tb135 x) (t2tb13 y)) (t2tb220 r))
  (and (mem7 x u) (mem3 y v)))))))

;; mem_relation
  (assert
  (forall ((u (set c)) (v (set b)) (r (set (tuple21 c b))))
  (= (mem (set1 (tuple2 c1 b1)) (t2tb222 r)
  (relation b1 c1 (t2tb132 u) (t2tb12 v)))
  (forall ((x c) (y b))
  (=> (mem28 (tb2t223 (Tuple2 c1 b1 (t2tb135 x) (t2tb14 y))) r)
  (and (mem7 x u) (mem2 y v)))))))

;; mem_relation
  (assert
  (forall ((u (set c)) (v (set a)) (r (set (tuple21 c a))))
  (= (mem (set1 (tuple2 c1 a1)) (t2tb224 r)
  (relation a1 c1 (t2tb132 u) (t2tb1 v)))
  (forall ((x c) (y a))
  (=> (mem27 (tb2t225 (Tuple2 c1 a1 (t2tb135 x) (t2tb2 y))) r)
  (and (mem7 x u) (mem1 y v)))))))

;; mem_relation
  (assert
  (forall ((b2 ty))
  (forall ((u (set c)) (v uni) (r uni))
  (and
  (=> (mem (set1 (tuple2 c1 b2)) r (relation b2 c1 (t2tb132 u) v))
  (forall ((x c) (y uni))
  (=> (mem (tuple2 c1 b2) (Tuple2 c1 b2 (t2tb135 x) y) r)
  (and (mem7 x u) (mem b2 y v)))))
  (=>
  (forall ((x c) (y uni))
  (=> (sort b2 y)
  (=> (mem (tuple2 c1 b2) (Tuple2 c1 b2 (t2tb135 x) y) r)
  (and (mem7 x u) (mem b2 y v))))) (mem (set1 (tuple2 c1 b2)) r
  (relation b2 c1 (t2tb132 u) v)))))))

(declare-fun t2tb2845 ((set (set (tuple21 (set (tuple21 a b)) (tuple21 c
  b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a b)) (tuple21 c b)))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 c1 b1)))) (t2tb2845 x))))

(declare-fun tb2t2845 (uni) (set (set (tuple21 (set (tuple21 a b)) (tuple21 c
  b)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a b)) (tuple21 c b))))))
  (! (= (tb2t2845 (t2tb2845 i)) i) :pattern ((t2tb2845 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 c1 b1)))) j)
     (= (t2tb2845 (tb2t2845 j)) j)) :pattern ((t2tb2845 (tb2t2845 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a b)))) (v (set (tuple21 c b)))
  (r (set (tuple21 (set (tuple21 a b)) (tuple21 c b)))))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 c1 b1))) (t2tb2807 r)
  (relation (tuple2 c1 b1) (set1 (tuple2 a1 b1)) (t2tb10 u) (t2tb222 v)))
  (forall ((x (set (tuple21 a b))) (y (tuple21 c b)))
  (=> (mem (tuple2 (set1 (tuple2 a1 b1)) (tuple2 c1 b1))
  (Tuple2 (set1 (tuple2 a1 b1)) (tuple2 c1 b1) (t2tb11 x) (t2tb223 y))
  (t2tb2807 r)) (and (mem4 x u) (mem28 y v)))))))

(declare-fun t2tb2893 ((set (set (tuple21 (set (tuple21 a b)) (tuple21 c
  a))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a b)) (tuple21 c a)))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 c1 a1)))) (t2tb2893 x))))

(declare-fun tb2t2893 (uni) (set (set (tuple21 (set (tuple21 a b)) (tuple21 c
  a)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a b)) (tuple21 c a))))))
  (! (= (tb2t2893 (t2tb2893 i)) i) :pattern ((t2tb2893 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 c1 a1)))) j)
     (= (t2tb2893 (tb2t2893 j)) j)) :pattern ((t2tb2893 (tb2t2893 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a b)))) (v (set (tuple21 c a)))
  (r (set (tuple21 (set (tuple21 a b)) (tuple21 c a)))))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 c1 a1))) (t2tb2880 r)
  (relation (tuple2 c1 a1) (set1 (tuple2 a1 b1)) (t2tb10 u) (t2tb224 v)))
  (forall ((x (set (tuple21 a b))) (y (tuple21 c a)))
  (=> (mem (tuple2 (set1 (tuple2 a1 b1)) (tuple2 c1 a1))
  (Tuple2 (set1 (tuple2 a1 b1)) (tuple2 c1 a1) (t2tb11 x) (t2tb225 y))
  (t2tb2880 r)) (and (mem4 x u) (mem27 y v)))))))

(declare-fun t2tb314 ((set (set (tuple21 (set (tuple21 a b)) c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a b)) c))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) c1))) (t2tb314 x))))

(declare-fun tb2t314 (uni) (set (set (tuple21 (set (tuple21 a b)) c))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a b)) c)))))
  (! (= (tb2t314 (t2tb314 i)) i) :pattern ((t2tb314 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) c1))) j)
     (= (t2tb314 (tb2t314 j)) j)) :pattern ((t2tb314 (tb2t314 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a b)))) (v (set c))
  (r (set (tuple21 (set (tuple21 a b)) c))))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 b1)) c1)) (t2tb234 r)
  (relation c1 (set1 (tuple2 a1 b1)) (t2tb10 u) (t2tb132 v)))
  (forall ((x (set (tuple21 a b))) (y c))
  (=> (mem (tuple2 (set1 (tuple2 a1 b1)) c1)
  (Tuple2 (set1 (tuple2 a1 b1)) c1 (t2tb11 x) (t2tb135 y)) (t2tb234 r))
  (and (mem4 x u) (mem7 y v)))))))

(declare-fun t2tb45 ((set (set (tuple21 (set (tuple21 a b)) (set (tuple21 a
  b)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a b)) (set (tuple21 a b)))))))
  (sort (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1)))))
  (t2tb45 x))))

(declare-fun tb2t45 (uni) (set (set (tuple21 (set (tuple21 a b))
  (set (tuple21 a b))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a b)) (set (tuple21 a b)))))))
  (! (= (tb2t45 (t2tb45 i)) i) :pattern ((t2tb45 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1))))) j)
     (= (t2tb45 (tb2t45 j)) j)) :pattern ((t2tb45 (tb2t45 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a b)))) (v (set (set (tuple21 a b))))
  (r (set (tuple21 (set (tuple21 a b)) (set (tuple21 a b))))))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1))))
  (t2tb15 r)
  (relation (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1)) (t2tb10 u)
  (t2tb10 v)))
  (forall ((x (set (tuple21 a b))) (y (set (tuple21 a b))))
  (=> (mem (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1)))
  (Tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1)) (t2tb11 x) (t2tb11 y))
  (t2tb15 r)) (and (mem4 x u) (mem4 y v)))))))

(declare-fun t2tb46 ((set (set (tuple21 (set (tuple21 a b)) (tuple21 a
  b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a b)) (tuple21 a b)))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 b1)))) (t2tb46 x))))

(declare-fun tb2t46 (uni) (set (set (tuple21 (set (tuple21 a b)) (tuple21 a
  b)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a b)) (tuple21 a b))))))
  (! (= (tb2t46 (t2tb46 i)) i) :pattern ((t2tb46 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 b1)))) j)
     (= (t2tb46 (tb2t46 j)) j)) :pattern ((t2tb46 (tb2t46 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a b)))) (v (set (tuple21 a b)))
  (r (set (tuple21 (set (tuple21 a b)) (tuple21 a b)))))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 b1))) (t2tb17 r)
  (relation (tuple2 a1 b1) (set1 (tuple2 a1 b1)) (t2tb10 u) (t2tb11 v)))
  (forall ((x (set (tuple21 a b))) (y (tuple21 a b)))
  (=> (mem (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 b1))
  (Tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 b1) (t2tb11 x) (t2tb13 y))
  (t2tb17 r)) (and (mem4 x u) (mem3 y v)))))))

(declare-fun t2tb47 ((set (set (tuple21 (set (tuple21 a b)) b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a b)) b))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) b1))) (t2tb47 x))))

(declare-fun tb2t47 (uni) (set (set (tuple21 (set (tuple21 a b)) b))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a b)) b)))))
  (! (= (tb2t47 (t2tb47 i)) i) :pattern ((t2tb47 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) b1))) j)
     (= (t2tb47 (tb2t47 j)) j)) :pattern ((t2tb47 (tb2t47 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a b)))) (v (set b))
  (r (set (tuple21 (set (tuple21 a b)) b))))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 b1)) b1)) (t2tb19 r)
  (relation b1 (set1 (tuple2 a1 b1)) (t2tb10 u) (t2tb12 v)))
  (forall ((x (set (tuple21 a b))) (y b))
  (=> (mem (tuple2 (set1 (tuple2 a1 b1)) b1)
  (Tuple2 (set1 (tuple2 a1 b1)) b1 (t2tb11 x) (t2tb14 y)) (t2tb19 r))
  (and (mem4 x u) (mem2 y v)))))))

(declare-fun t2tb48 ((set (set (tuple21 (set (tuple21 a b)) a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a b)) a))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) a1))) (t2tb48 x))))

(declare-fun tb2t48 (uni) (set (set (tuple21 (set (tuple21 a b)) a))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a b)) a)))))
  (! (= (tb2t48 (t2tb48 i)) i) :pattern ((t2tb48 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) a1))) j)
     (= (t2tb48 (tb2t48 j)) j)) :pattern ((t2tb48 (tb2t48 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a b)))) (v (set a))
  (r (set (tuple21 (set (tuple21 a b)) a))))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 b1)) a1)) (t2tb22 r)
  (relation a1 (set1 (tuple2 a1 b1)) (t2tb10 u) (t2tb1 v)))
  (forall ((x (set (tuple21 a b))) (y a))
  (=> (mem (tuple2 (set1 (tuple2 a1 b1)) a1)
  (Tuple2 (set1 (tuple2 a1 b1)) a1 (t2tb11 x) (t2tb2 y)) (t2tb22 r))
  (and (mem4 x u) (mem1 y v)))))))

;; mem_relation
  (assert
  (forall ((b2 ty))
  (forall ((u (set (set (tuple21 a b)))) (v uni) (r uni))
  (and
  (=> (mem (set1 (tuple2 (set1 (tuple2 a1 b1)) b2)) r
  (relation b2 (set1 (tuple2 a1 b1)) (t2tb10 u) v))
  (forall ((x (set (tuple21 a b))) (y uni))
  (=> (mem (tuple2 (set1 (tuple2 a1 b1)) b2)
  (Tuple2 (set1 (tuple2 a1 b1)) b2 (t2tb11 x) y) r)
  (and (mem4 x u) (mem b2 y v)))))
  (=>
  (forall ((x (set (tuple21 a b))) (y uni))
  (=> (sort b2 y)
  (=> (mem (tuple2 (set1 (tuple2 a1 b1)) b2)
  (Tuple2 (set1 (tuple2 a1 b1)) b2 (t2tb11 x) y) r)
  (and (mem4 x u) (mem b2 y v))))) (mem
  (set1 (tuple2 (set1 (tuple2 a1 b1)) b2)) r
  (relation b2 (set1 (tuple2 a1 b1)) (t2tb10 u) v)))))))

(declare-fun t2tb2847 ((set (set (tuple21 (tuple21 a b) (tuple21 c
  b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a b) (tuple21 c b)))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 b1) (tuple2 c1 b1)))) (t2tb2847 x))))

(declare-fun tb2t2847 (uni) (set (set (tuple21 (tuple21 a b) (tuple21 c
  b)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a b) (tuple21 c b))))))
  (! (= (tb2t2847 (t2tb2847 i)) i) :pattern ((t2tb2847 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 b1) (tuple2 c1 b1)))) j)
     (= (t2tb2847 (tb2t2847 j)) j)) :pattern ((t2tb2847 (tb2t2847 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a b))) (v (set (tuple21 c b)))
  (r (set (tuple21 (tuple21 a b) (tuple21 c b)))))
  (= (mem (set1 (tuple2 (tuple2 a1 b1) (tuple2 c1 b1))) (t2tb2811 r)
  (relation (tuple2 c1 b1) (tuple2 a1 b1) (t2tb11 u) (t2tb222 v)))
  (forall ((x (tuple21 a b)) (y (tuple21 c b)))
  (=> (mem (tuple2 (tuple2 a1 b1) (tuple2 c1 b1))
  (Tuple2 (tuple2 a1 b1) (tuple2 c1 b1) (t2tb13 x) (t2tb223 y)) (t2tb2811 r))
  (and (mem3 x u) (mem28 y v)))))))

(declare-fun t2tb2894 ((set (set (tuple21 (tuple21 a b) (tuple21 c
  a))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a b) (tuple21 c a)))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 b1) (tuple2 c1 a1)))) (t2tb2894 x))))

(declare-fun tb2t2894 (uni) (set (set (tuple21 (tuple21 a b) (tuple21 c
  a)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a b) (tuple21 c a))))))
  (! (= (tb2t2894 (t2tb2894 i)) i) :pattern ((t2tb2894 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 b1) (tuple2 c1 a1)))) j)
     (= (t2tb2894 (tb2t2894 j)) j)) :pattern ((t2tb2894 (tb2t2894 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a b))) (v (set (tuple21 c a)))
  (r (set (tuple21 (tuple21 a b) (tuple21 c a)))))
  (= (mem (set1 (tuple2 (tuple2 a1 b1) (tuple2 c1 a1))) (t2tb2418 r)
  (relation (tuple2 c1 a1) (tuple2 a1 b1) (t2tb11 u) (t2tb224 v)))
  (forall ((x (tuple21 a b)) (y (tuple21 c a)))
  (=> (mem (tuple2 (tuple2 a1 b1) (tuple2 c1 a1))
  (Tuple2 (tuple2 a1 b1) (tuple2 c1 a1) (t2tb13 x) (t2tb225 y)) (t2tb2418 r))
  (and (mem3 x u) (mem27 y v)))))))

(declare-fun t2tb319 ((set (set (tuple21 (tuple21 a b) c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a b) c))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 b1) c1))) (t2tb319 x))))

(declare-fun tb2t319 (uni) (set (set (tuple21 (tuple21 a b) c))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a b) c)))))
  (! (= (tb2t319 (t2tb319 i)) i) :pattern ((t2tb319 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 b1) c1))) j)
     (= (t2tb319 (tb2t319 j)) j)) :pattern ((t2tb319 (tb2t319 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a b))) (v (set c)) (r (set (tuple21 (tuple21 a b)
  c))))
  (= (mem (set1 (tuple2 (tuple2 a1 b1) c1)) (t2tb245 r)
  (relation c1 (tuple2 a1 b1) (t2tb11 u) (t2tb132 v)))
  (forall ((x (tuple21 a b)) (y c))
  (=> (mem (tuple2 (tuple2 a1 b1) c1)
  (Tuple2 (tuple2 a1 b1) c1 (t2tb13 x) (t2tb135 y)) (t2tb245 r))
  (and (mem3 x u) (mem7 y v)))))))

(declare-fun t2tb49 ((set (set (tuple21 (tuple21 a b) (set (tuple21 a
  b)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a b) (set (tuple21 a b))))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 b1))))) (t2tb49 x))))

(declare-fun tb2t49 (uni) (set (set (tuple21 (tuple21 a b) (set (tuple21 a
  b))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a b) (set (tuple21 a b)))))))
  (! (= (tb2t49 (t2tb49 i)) i) :pattern ((t2tb49 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 b1))))) j)
     (= (t2tb49 (tb2t49 j)) j)) :pattern ((t2tb49 (tb2t49 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a b))) (v (set (set (tuple21 a b))))
  (r (set (tuple21 (tuple21 a b) (set (tuple21 a b))))))
  (= (mem (set1 (tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 b1)))) (t2tb23 r)
  (relation (set1 (tuple2 a1 b1)) (tuple2 a1 b1) (t2tb11 u) (t2tb10 v)))
  (forall ((x (tuple21 a b)) (y (set (tuple21 a b))))
  (=> (mem (tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 b1)))
  (Tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 b1)) (t2tb13 x) (t2tb11 y))
  (t2tb23 r)) (and (mem3 x u) (mem4 y v)))))))

(declare-fun t2tb50 ((set (set (tuple21 (tuple21 a b) (tuple21 a b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a b) (tuple21 a b)))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 b1) (tuple2 a1 b1)))) (t2tb50 x))))

(declare-fun tb2t50 (uni) (set (set (tuple21 (tuple21 a b) (tuple21 a b)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a b) (tuple21 a b))))))
  (! (= (tb2t50 (t2tb50 i)) i) :pattern ((t2tb50 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 b1) (tuple2 a1 b1)))) j)
     (= (t2tb50 (tb2t50 j)) j)) :pattern ((t2tb50 (tb2t50 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a b))) (v (set (tuple21 a b)))
  (r (set (tuple21 (tuple21 a b) (tuple21 a b)))))
  (= (mem (set1 (tuple2 (tuple2 a1 b1) (tuple2 a1 b1))) (t2tb25 r)
  (relation (tuple2 a1 b1) (tuple2 a1 b1) (t2tb11 u) (t2tb11 v)))
  (forall ((x (tuple21 a b)) (y (tuple21 a b)))
  (=> (mem (tuple2 (tuple2 a1 b1) (tuple2 a1 b1))
  (Tuple2 (tuple2 a1 b1) (tuple2 a1 b1) (t2tb13 x) (t2tb13 y)) (t2tb25 r))
  (and (mem3 x u) (mem3 y v)))))))

(declare-fun t2tb51 ((set (set (tuple21 (tuple21 a b) b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a b) b))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 b1) b1))) (t2tb51 x))))

(declare-fun tb2t51 (uni) (set (set (tuple21 (tuple21 a b) b))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a b) b)))))
  (! (= (tb2t51 (t2tb51 i)) i) :pattern ((t2tb51 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 b1) b1))) j)
     (= (t2tb51 (tb2t51 j)) j)) :pattern ((t2tb51 (tb2t51 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a b))) (v (set b)) (r (set (tuple21 (tuple21 a b)
  b))))
  (= (mem (set1 (tuple2 (tuple2 a1 b1) b1)) (t2tb27 r)
  (relation b1 (tuple2 a1 b1) (t2tb11 u) (t2tb12 v)))
  (forall ((x (tuple21 a b)) (y b))
  (=> (mem (tuple2 (tuple2 a1 b1) b1)
  (Tuple2 (tuple2 a1 b1) b1 (t2tb13 x) (t2tb14 y)) (t2tb27 r))
  (and (mem3 x u) (mem2 y v)))))))

(declare-fun t2tb52 ((set (set (tuple21 (tuple21 a b) a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a b) a))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 b1) a1))) (t2tb52 x))))

(declare-fun tb2t52 (uni) (set (set (tuple21 (tuple21 a b) a))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a b) a)))))
  (! (= (tb2t52 (t2tb52 i)) i) :pattern ((t2tb52 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 b1) a1))) j)
     (= (t2tb52 (tb2t52 j)) j)) :pattern ((t2tb52 (tb2t52 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a b))) (v (set a)) (r (set (tuple21 (tuple21 a b)
  a))))
  (= (mem (set1 (tuple2 (tuple2 a1 b1) a1)) (t2tb29 r)
  (relation a1 (tuple2 a1 b1) (t2tb11 u) (t2tb1 v)))
  (forall ((x (tuple21 a b)) (y a))
  (=> (mem (tuple2 (tuple2 a1 b1) a1)
  (Tuple2 (tuple2 a1 b1) a1 (t2tb13 x) (t2tb2 y)) (t2tb29 r))
  (and (mem3 x u) (mem1 y v)))))))

;; mem_relation
  (assert
  (forall ((b2 ty))
  (forall ((u (set (tuple21 a b))) (v uni) (r uni))
  (and
  (=> (mem (set1 (tuple2 (tuple2 a1 b1) b2)) r
  (relation b2 (tuple2 a1 b1) (t2tb11 u) v))
  (forall ((x (tuple21 a b)) (y uni))
  (=> (mem (tuple2 (tuple2 a1 b1) b2) (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) y)
  r) (and (mem3 x u) (mem b2 y v)))))
  (=>
  (forall ((x (tuple21 a b)) (y uni))
  (=> (sort b2 y)
  (=> (mem (tuple2 (tuple2 a1 b1) b2) (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) y)
  r) (and (mem3 x u) (mem b2 y v))))) (mem (set1 (tuple2 (tuple2 a1 b1) b2))
  r (relation b2 (tuple2 a1 b1) (t2tb11 u) v)))))))

(declare-fun t2tb2849 ((set (set (tuple21 b (tuple21 c b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 b (tuple21 c b)))))) (sort
  (set1 (set1 (tuple2 b1 (tuple2 c1 b1)))) (t2tb2849 x))))

(declare-fun tb2t2849 (uni) (set (set (tuple21 b (tuple21 c b)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 b (tuple21 c b))))))
  (! (= (tb2t2849 (t2tb2849 i)) i) :pattern ((t2tb2849 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 b1 (tuple2 c1 b1)))) j)
     (= (t2tb2849 (tb2t2849 j)) j)) :pattern ((t2tb2849 (tb2t2849 j))) )))

;; mem_relation
  (assert
  (forall ((u (set b)) (v (set (tuple21 c b))) (r (set (tuple21 b (tuple21 c
  b)))))
  (= (mem (set1 (tuple2 b1 (tuple2 c1 b1))) (t2tb2815 r)
  (relation (tuple2 c1 b1) b1 (t2tb12 u) (t2tb222 v)))
  (forall ((x b) (y (tuple21 c b)))
  (=> (mem (tuple2 b1 (tuple2 c1 b1))
  (Tuple2 b1 (tuple2 c1 b1) (t2tb14 x) (t2tb223 y)) (t2tb2815 r))
  (and (mem2 x u) (mem28 y v)))))))

(declare-fun t2tb2895 ((set (set (tuple21 b (tuple21 c a))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 b (tuple21 c a)))))) (sort
  (set1 (set1 (tuple2 b1 (tuple2 c1 a1)))) (t2tb2895 x))))

(declare-fun tb2t2895 (uni) (set (set (tuple21 b (tuple21 c a)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 b (tuple21 c a))))))
  (! (= (tb2t2895 (t2tb2895 i)) i) :pattern ((t2tb2895 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 b1 (tuple2 c1 a1)))) j)
     (= (t2tb2895 (tb2t2895 j)) j)) :pattern ((t2tb2895 (tb2t2895 j))) )))

;; mem_relation
  (assert
  (forall ((u (set b)) (v (set (tuple21 c a))) (r (set (tuple21 b (tuple21 c
  a)))))
  (= (mem (set1 (tuple2 b1 (tuple2 c1 a1))) (t2tb2409 r)
  (relation (tuple2 c1 a1) b1 (t2tb12 u) (t2tb224 v)))
  (forall ((x b) (y (tuple21 c a)))
  (=> (mem (tuple2 b1 (tuple2 c1 a1))
  (Tuple2 b1 (tuple2 c1 a1) (t2tb14 x) (t2tb225 y)) (t2tb2409 r))
  (and (mem2 x u) (mem27 y v)))))))

(declare-fun t2tb130 ((set (set (tuple21 b c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 b c))))) (sort (set1 (set1 (tuple2 b1 c1)))
  (t2tb130 x))))

(declare-fun tb2t130 (uni) (set (set (tuple21 b c))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 b c)))))
  (! (= (tb2t130 (t2tb130 i)) i) :pattern ((t2tb130 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 b1 c1))) j) (= (t2tb130 (tb2t130 j)) j)) :pattern (
  (t2tb130 (tb2t130 j))) )))

;; mem_relation
  (assert
  (forall ((u (set b)) (v (set c)) (r (set (tuple21 b c))))
  (= (mem (set1 (tuple2 b1 c1)) (t2tb131 r)
  (relation c1 b1 (t2tb12 u) (t2tb132 v)))
  (forall ((x b) (y c))
  (=> (mem (tuple2 b1 c1) (Tuple2 b1 c1 (t2tb14 x) (t2tb135 y)) (t2tb131 r))
  (and (mem2 x u) (mem7 y v)))))))

(declare-fun t2tb53 ((set (set (tuple21 b (set (tuple21 a b)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 b (set (tuple21 a b))))))) (sort
  (set1 (set1 (tuple2 b1 (set1 (tuple2 a1 b1))))) (t2tb53 x))))

(declare-fun tb2t53 (uni) (set (set (tuple21 b (set (tuple21 a b))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 b (set (tuple21 a b)))))))
  (! (= (tb2t53 (t2tb53 i)) i) :pattern ((t2tb53 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 b1 (set1 (tuple2 a1 b1))))) j)
     (= (t2tb53 (tb2t53 j)) j)) :pattern ((t2tb53 (tb2t53 j))) )))

;; mem_relation
  (assert
  (forall ((u (set b)) (v (set (set (tuple21 a b)))) (r (set (tuple21 b
  (set (tuple21 a b))))))
  (= (mem (set1 (tuple2 b1 (set1 (tuple2 a1 b1)))) (t2tb31 r)
  (relation (set1 (tuple2 a1 b1)) b1 (t2tb12 u) (t2tb10 v)))
  (forall ((x b) (y (set (tuple21 a b))))
  (=> (mem (tuple2 b1 (set1 (tuple2 a1 b1)))
  (Tuple2 b1 (set1 (tuple2 a1 b1)) (t2tb14 x) (t2tb11 y)) (t2tb31 r))
  (and (mem2 x u) (mem4 y v)))))))

(declare-fun t2tb54 ((set (set (tuple21 b (tuple21 a b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 b (tuple21 a b)))))) (sort
  (set1 (set1 (tuple2 b1 (tuple2 a1 b1)))) (t2tb54 x))))

(declare-fun tb2t54 (uni) (set (set (tuple21 b (tuple21 a b)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 b (tuple21 a b))))))
  (! (= (tb2t54 (t2tb54 i)) i) :pattern ((t2tb54 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 b1 (tuple2 a1 b1)))) j)
     (= (t2tb54 (tb2t54 j)) j)) :pattern ((t2tb54 (tb2t54 j))) )))

;; mem_relation
  (assert
  (forall ((u (set b)) (v (set (tuple21 a b))) (r (set (tuple21 b (tuple21 a
  b)))))
  (= (mem (set1 (tuple2 b1 (tuple2 a1 b1))) (t2tb34 r)
  (relation (tuple2 a1 b1) b1 (t2tb12 u) (t2tb11 v)))
  (forall ((x b) (y (tuple21 a b)))
  (=> (mem (tuple2 b1 (tuple2 a1 b1))
  (Tuple2 b1 (tuple2 a1 b1) (t2tb14 x) (t2tb13 y)) (t2tb34 r))
  (and (mem2 x u) (mem3 y v)))))))

(declare-fun t2tb55 ((set (set (tuple21 b b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 b b))))) (sort (set1 (set1 (tuple2 b1 b1)))
  (t2tb55 x))))

(declare-fun tb2t55 (uni) (set (set (tuple21 b b))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 b b)))))
  (! (= (tb2t55 (t2tb55 i)) i) :pattern ((t2tb55 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 b1 b1))) j) (= (t2tb55 (tb2t55 j)) j)) :pattern (
  (t2tb55 (tb2t55 j))) )))

;; mem_relation
  (assert
  (forall ((u (set b)) (v (set b)) (r (set (tuple21 b b))))
  (= (mem (set1 (tuple2 b1 b1)) (t2tb35 r)
  (relation b1 b1 (t2tb12 u) (t2tb12 v)))
  (forall ((x b) (y b))
  (=> (mem (tuple2 b1 b1) (Tuple2 b1 b1 (t2tb14 x) (t2tb14 y)) (t2tb35 r))
  (and (mem2 x u) (mem2 y v)))))))

(declare-fun t2tb56 ((set (set (tuple21 b a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 b a))))) (sort (set1 (set1 (tuple2 b1 a1)))
  (t2tb56 x))))

(declare-fun tb2t56 (uni) (set (set (tuple21 b a))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 b a)))))
  (! (= (tb2t56 (t2tb56 i)) i) :pattern ((t2tb56 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 b1 a1))) j) (= (t2tb56 (tb2t56 j)) j)) :pattern (
  (t2tb56 (tb2t56 j))) )))

;; mem_relation
  (assert
  (forall ((u (set b)) (v (set a)) (r (set (tuple21 b a))))
  (= (mem (set1 (tuple2 b1 a1)) (t2tb37 r)
  (relation a1 b1 (t2tb12 u) (t2tb1 v)))
  (forall ((x b) (y a))
  (=> (mem (tuple2 b1 a1) (Tuple2 b1 a1 (t2tb14 x) (t2tb2 y)) (t2tb37 r))
  (and (mem2 x u) (mem1 y v)))))))

;; mem_relation
  (assert
  (forall ((b2 ty))
  (forall ((u (set b)) (v uni) (r uni))
  (and
  (=> (mem (set1 (tuple2 b1 b2)) r (relation b2 b1 (t2tb12 u) v))
  (forall ((x b) (y uni))
  (=> (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) y) r)
  (and (mem2 x u) (mem b2 y v)))))
  (=>
  (forall ((x b) (y uni))
  (=> (sort b2 y)
  (=> (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) y) r)
  (and (mem2 x u) (mem b2 y v))))) (mem (set1 (tuple2 b1 b2)) r
  (relation b2 b1 (t2tb12 u) v)))))))

(declare-fun t2tb2851 ((set (set (tuple21 a (tuple21 c b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 a (tuple21 c b)))))) (sort
  (set1 (set1 (tuple2 a1 (tuple2 c1 b1)))) (t2tb2851 x))))

(declare-fun tb2t2851 (uni) (set (set (tuple21 a (tuple21 c b)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 a (tuple21 c b))))))
  (! (= (tb2t2851 (t2tb2851 i)) i) :pattern ((t2tb2851 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 a1 (tuple2 c1 b1)))) j)
     (= (t2tb2851 (tb2t2851 j)) j)) :pattern ((t2tb2851 (tb2t2851 j))) )))

;; mem_relation
  (assert
  (forall ((u (set a)) (v (set (tuple21 c b))) (r (set (tuple21 a (tuple21 c
  b)))))
  (= (mem (set1 (tuple2 a1 (tuple2 c1 b1))) (t2tb332 r)
  (relation (tuple2 c1 b1) a1 (t2tb1 u) (t2tb222 v)))
  (forall ((x a) (y (tuple21 c b)))
  (=> (mem (tuple2 a1 (tuple2 c1 b1))
  (Tuple2 a1 (tuple2 c1 b1) (t2tb2 x) (t2tb223 y)) (t2tb332 r))
  (and (mem1 x u) (mem28 y v)))))))

(declare-fun t2tb2896 ((set (set (tuple21 a (tuple21 c a))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 a (tuple21 c a)))))) (sort
  (set1 (set1 (tuple2 a1 (tuple2 c1 a1)))) (t2tb2896 x))))

(declare-fun tb2t2896 (uni) (set (set (tuple21 a (tuple21 c a)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 a (tuple21 c a))))))
  (! (= (tb2t2896 (t2tb2896 i)) i) :pattern ((t2tb2896 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 a1 (tuple2 c1 a1)))) j)
     (= (t2tb2896 (tb2t2896 j)) j)) :pattern ((t2tb2896 (tb2t2896 j))) )))

;; mem_relation
  (assert
  (forall ((u (set a)) (v (set (tuple21 c a))) (r (set (tuple21 a (tuple21 c
  a)))))
  (= (mem (set1 (tuple2 a1 (tuple2 c1 a1))) (t2tb2882 r)
  (relation (tuple2 c1 a1) a1 (t2tb1 u) (t2tb224 v)))
  (forall ((x a) (y (tuple21 c a)))
  (=> (mem (tuple2 a1 (tuple2 c1 a1))
  (Tuple2 a1 (tuple2 c1 a1) (t2tb2 x) (t2tb225 y)) (t2tb2882 r))
  (and (mem1 x u) (mem27 y v)))))))

(declare-fun t2tb128 ((set (set (tuple21 a c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 a c))))) (sort (set1 (set1 (tuple2 a1 c1)))
  (t2tb128 x))))

(declare-fun tb2t128 (uni) (set (set (tuple21 a c))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 a c)))))
  (! (= (tb2t128 (t2tb128 i)) i) :pattern ((t2tb128 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 a1 c1))) j) (= (t2tb128 (tb2t128 j)) j)) :pattern (
  (t2tb128 (tb2t128 j))) )))

;; mem_relation
  (assert
  (forall ((u (set a)) (v (set c)) (r (set (tuple21 a c))))
  (= (mem (set1 (tuple2 a1 c1)) (t2tb129 r)
  (relation c1 a1 (t2tb1 u) (t2tb132 v)))
  (forall ((x a) (y c))
  (=> (mem (tuple2 a1 c1) (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y)) (t2tb129 r))
  (and (mem1 x u) (mem7 y v)))))))

(declare-fun t2tb57 ((set (set (tuple21 a (set (tuple21 a b)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 a (set (tuple21 a b))))))) (sort
  (set1 (set1 (tuple2 a1 (set1 (tuple2 a1 b1))))) (t2tb57 x))))

(declare-fun tb2t57 (uni) (set (set (tuple21 a (set (tuple21 a b))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 a (set (tuple21 a b)))))))
  (! (= (tb2t57 (t2tb57 i)) i) :pattern ((t2tb57 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 a1 (set1 (tuple2 a1 b1))))) j)
     (= (t2tb57 (tb2t57 j)) j)) :pattern ((t2tb57 (tb2t57 j))) )))

;; mem_relation
  (assert
  (forall ((u (set a)) (v (set (set (tuple21 a b)))) (r (set (tuple21 a
  (set (tuple21 a b))))))
  (= (mem (set1 (tuple2 a1 (set1 (tuple2 a1 b1)))) (t2tb39 r)
  (relation (set1 (tuple2 a1 b1)) a1 (t2tb1 u) (t2tb10 v)))
  (forall ((x a) (y (set (tuple21 a b))))
  (=> (mem (tuple2 a1 (set1 (tuple2 a1 b1)))
  (Tuple2 a1 (set1 (tuple2 a1 b1)) (t2tb2 x) (t2tb11 y)) (t2tb39 r))
  (and (mem1 x u) (mem4 y v)))))))

(declare-fun t2tb58 ((set (set (tuple21 a (tuple21 a b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 a (tuple21 a b)))))) (sort
  (set1 (set1 (tuple2 a1 (tuple2 a1 b1)))) (t2tb58 x))))

(declare-fun tb2t58 (uni) (set (set (tuple21 a (tuple21 a b)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 a (tuple21 a b))))))
  (! (= (tb2t58 (t2tb58 i)) i) :pattern ((t2tb58 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 a1 (tuple2 a1 b1)))) j)
     (= (t2tb58 (tb2t58 j)) j)) :pattern ((t2tb58 (tb2t58 j))) )))

;; mem_relation
  (assert
  (forall ((u (set a)) (v (set (tuple21 a b))) (r (set (tuple21 a (tuple21 a
  b)))))
  (= (mem (set1 (tuple2 a1 (tuple2 a1 b1))) (t2tb41 r)
  (relation (tuple2 a1 b1) a1 (t2tb1 u) (t2tb11 v)))
  (forall ((x a) (y (tuple21 a b)))
  (=> (mem (tuple2 a1 (tuple2 a1 b1))
  (Tuple2 a1 (tuple2 a1 b1) (t2tb2 x) (t2tb13 y)) (t2tb41 r))
  (and (mem1 x u) (mem3 y v)))))))

;; mem_relation
  (assert
  (forall ((u (set a)) (v (set b)) (r (set (tuple21 a b))))
  (= (mem4 r (relation1 u v))
  (forall ((x a) (y b))
  (=> (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y))) r)
  (and (mem1 x u) (mem2 y v)))))))

(declare-fun t2tb3 ((set (set (tuple21 a a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 a a))))) (sort (set1 (set1 (tuple2 a1 a1)))
  (t2tb3 x))))

(declare-fun tb2t3 (uni) (set (set (tuple21 a a))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 a a)))))
  (! (= (tb2t3 (t2tb3 i)) i) :pattern ((t2tb3 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 a1 a1))) j) (= (t2tb3 (tb2t3 j)) j)) :pattern (
  (t2tb3 (tb2t3 j))) )))

;; mem_relation
  (assert
  (forall ((u (set a)) (v (set a)) (r (set (tuple21 a a))))
  (= (mem (set1 (tuple2 a1 a1)) (t2tb4 r)
  (relation a1 a1 (t2tb1 u) (t2tb1 v)))
  (forall ((x a) (y a))
  (=> (mem (tuple2 a1 a1) (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y)) (t2tb4 r))
  (and (mem1 x u) (mem1 y v)))))))

;; mem_relation
  (assert
  (forall ((b2 ty))
  (forall ((u (set a)) (v uni) (r uni))
  (and
  (=> (mem (set1 (tuple2 a1 b2)) r (relation b2 a1 (t2tb1 u) v))
  (forall ((x a) (y uni))
  (=> (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) y) r)
  (and (mem1 x u) (mem b2 y v)))))
  (=>
  (forall ((x a) (y uni))
  (=> (sort b2 y)
  (=> (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) y) r)
  (and (mem1 x u) (mem b2 y v))))) (mem (set1 (tuple2 a1 b2)) r
  (relation b2 a1 (t2tb1 u) v)))))))

;; mem_relation
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((u uni) (v uni) (r uni))
  (and
  (=> (mem (set1 (tuple2 a2 b2)) r (relation b2 a2 u v))
  (forall ((x uni) (y uni))
  (=> (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) r)
  (and (mem a2 x u) (mem b2 y v)))))
  (=>
  (forall ((x uni) (y uni))
  (=> (sort a2 x)
  (=> (sort b2 y)
  (=> (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) r)
  (and (mem a2 x u) (mem b2 y v)))))) (mem (set1 (tuple2 a2 b2)) r
  (relation b2 a2 u v)))))))

(declare-fun inverse (ty ty uni) uni)

;; inverse_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni)) (sort (set1 (tuple2 b2 a2)) (inverse b2 a2 x)))))

;; mem_inverse
  (assert
  (forall ((p (set (tuple21 c b))) (x b) (y c))
  (= (mem (tuple2 b1 c1) (Tuple2 b1 c1 (t2tb14 x) (t2tb135 y))
  (inverse b1 c1 (t2tb222 p))) (mem28
  (tb2t223 (Tuple2 c1 b1 (t2tb135 y) (t2tb14 x))) p))))

;; mem_inverse
  (assert
  (forall ((p (set (tuple21 c a))) (x a) (y c))
  (= (mem (tuple2 a1 c1) (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y))
  (inverse a1 c1 (t2tb224 p))) (mem27
  (tb2t225 (Tuple2 c1 a1 (t2tb135 y) (t2tb2 x))) p))))

;; mem_inverse
  (assert
  (forall ((p (set (tuple21 b c))) (x c) (y b))
  (= (mem28 (tb2t223 (Tuple2 c1 b1 (t2tb135 x) (t2tb14 y)))
  (tb2t222 (inverse c1 b1 (t2tb131 p)))) (mem (tuple2 b1 c1)
  (Tuple2 b1 c1 (t2tb14 y) (t2tb135 x)) (t2tb131 p)))))

;; mem_inverse
  (assert
  (forall ((p (set (tuple21 b a))) (x a) (y b))
  (= (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y)))
  (tb2t11 (inverse a1 b1 (t2tb37 p)))) (mem (tuple2 b1 a1)
  (Tuple2 b1 a1 (t2tb14 y) (t2tb2 x)) (t2tb37 p)))))

;; mem_inverse
  (assert
  (forall ((p (set (tuple21 a c))) (x c) (y a))
  (= (mem27 (tb2t225 (Tuple2 c1 a1 (t2tb135 x) (t2tb2 y)))
  (tb2t224 (inverse c1 a1 (t2tb129 p)))) (mem (tuple2 a1 c1)
  (Tuple2 a1 c1 (t2tb2 y) (t2tb135 x)) (t2tb129 p)))))

;; mem_inverse
  (assert
  (forall ((p (set (tuple21 a b))) (x b) (y a))
  (= (mem (tuple2 b1 a1) (Tuple2 b1 a1 (t2tb14 x) (t2tb2 y))
  (inverse b1 a1 (t2tb11 p))) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 y) (t2tb14 x))) p))))

;; mem_inverse
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((p uni) (x uni) (y uni))
  (= (mem (tuple2 b2 a2) (Tuple2 b2 a2 x y) (inverse b2 a2 p)) (mem
  (tuple2 a2 b2) (Tuple2 a2 b2 y x) p)))))

(declare-fun dom (ty ty uni) uni)

;; dom_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni)) (sort (set1 a2) (dom b2 a2 x)))))

;; mem_dom
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (x (tuple21 c b)))
  (and
  (=> (mem28 x (tb2t222 (dom b2 (tuple2 c1 b1) p)))
  (exists ((b3 uni))
  (and (sort b2 b3) (mem (tuple2 (tuple2 c1 b1) b2)
  (Tuple2 (tuple2 c1 b1) b2 (t2tb223 x) b3) p))))
  (=>
  (exists ((b3 uni)) (mem (tuple2 (tuple2 c1 b1) b2)
  (Tuple2 (tuple2 c1 b1) b2 (t2tb223 x) b3) p)) (mem28 x
  (tb2t222 (dom b2 (tuple2 c1 b1) p))))))))

;; mem_dom
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (x (tuple21 c a)))
  (and
  (=> (mem27 x (tb2t224 (dom b2 (tuple2 c1 a1) p)))
  (exists ((b3 uni))
  (and (sort b2 b3) (mem (tuple2 (tuple2 c1 a1) b2)
  (Tuple2 (tuple2 c1 a1) b2 (t2tb225 x) b3) p))))
  (=>
  (exists ((b3 uni)) (mem (tuple2 (tuple2 c1 a1) b2)
  (Tuple2 (tuple2 c1 a1) b2 (t2tb225 x) b3) p)) (mem27 x
  (tb2t224 (dom b2 (tuple2 c1 a1) p))))))))

;; mem_dom
  (assert
  (forall ((p (set (tuple21 c b))) (x c))
  (= (mem7 x (tb2t132 (dom b1 c1 (t2tb222 p))))
  (exists ((b2 b)) (mem28 (tb2t223 (Tuple2 c1 b1 (t2tb135 x) (t2tb14 b2)))
  p)))))

;; mem_dom
  (assert
  (forall ((p (set (tuple21 c a))) (x c))
  (= (mem7 x (tb2t132 (dom a1 c1 (t2tb224 p))))
  (exists ((b2 a)) (mem27 (tb2t225 (Tuple2 c1 a1 (t2tb135 x) (t2tb2 b2))) p)))))

;; mem_dom
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (x c))
  (and
  (=> (mem7 x (tb2t132 (dom b2 c1 p)))
  (exists ((b3 uni))
  (and (sort b2 b3) (mem (tuple2 c1 b2) (Tuple2 c1 b2 (t2tb135 x) b3) p))))
  (=>
  (exists ((b3 uni)) (mem (tuple2 c1 b2) (Tuple2 c1 b2 (t2tb135 x) b3) p))
  (mem7 x (tb2t132 (dom b2 c1 p))))))))

;; mem_dom
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (x (set (tuple21 a b))))
  (and
  (=> (mem4 x (tb2t10 (dom b2 (set1 (tuple2 a1 b1)) p)))
  (exists ((b3 uni))
  (and (sort b2 b3) (mem (tuple2 (set1 (tuple2 a1 b1)) b2)
  (Tuple2 (set1 (tuple2 a1 b1)) b2 (t2tb11 x) b3) p))))
  (=>
  (exists ((b3 uni)) (mem (tuple2 (set1 (tuple2 a1 b1)) b2)
  (Tuple2 (set1 (tuple2 a1 b1)) b2 (t2tb11 x) b3) p)) (mem4 x
  (tb2t10 (dom b2 (set1 (tuple2 a1 b1)) p))))))))

;; mem_dom
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (x (tuple21 a b)))
  (and
  (=> (mem3 x (tb2t11 (dom b2 (tuple2 a1 b1) p)))
  (exists ((b3 uni))
  (and (sort b2 b3) (mem (tuple2 (tuple2 a1 b1) b2)
  (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) b3) p))))
  (=>
  (exists ((b3 uni)) (mem (tuple2 (tuple2 a1 b1) b2)
  (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) b3) p)) (mem3 x
  (tb2t11 (dom b2 (tuple2 a1 b1) p))))))))

;; mem_dom
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (x b))
  (and
  (=> (mem2 x (tb2t12 (dom b2 b1 p)))
  (exists ((b3 uni))
  (and (sort b2 b3) (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) b3) p))))
  (=> (exists ((b3 uni)) (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) b3) p))
  (mem2 x (tb2t12 (dom b2 b1 p))))))))

;; mem_dom
  (assert
  (forall ((p (set (tuple21 a b))) (x a))
  (= (mem1 x (tb2t1 (dom b1 a1 (t2tb11 p))))
  (exists ((b2 b)) (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 b2))) p)))))

;; mem_dom
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (x a))
  (and
  (=> (mem1 x (tb2t1 (dom b2 a1 p)))
  (exists ((b3 uni))
  (and (sort b2 b3) (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) b3) p))))
  (=> (exists ((b3 uni)) (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) b3) p))
  (mem1 x (tb2t1 (dom b2 a1 p))))))))

;; mem_dom
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((p uni) (x uni))
  (and
  (=> (mem a2 x (dom b2 a2 p))
  (exists ((b3 uni))
  (and (sort b2 b3) (mem (tuple2 a2 b2) (Tuple2 a2 b2 x b3) p))))
  (=> (exists ((b3 uni)) (mem (tuple2 a2 b2) (Tuple2 a2 b2 x b3) p)) (mem a2
  x (dom b2 a2 p)))))))

(declare-fun ran (ty ty uni) uni)

;; ran_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni)) (sort (set1 b2) (ran b2 a2 x)))))

;; mem_ran
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (x (tuple21 c b)))
  (and
  (=> (mem28 x (tb2t222 (ran (tuple2 c1 b1) a2 p)))
  (exists ((a3 uni))
  (and (sort a2 a3) (mem (tuple2 a2 (tuple2 c1 b1))
  (Tuple2 a2 (tuple2 c1 b1) a3 (t2tb223 x)) p))))
  (=>
  (exists ((a3 uni)) (mem (tuple2 a2 (tuple2 c1 b1))
  (Tuple2 a2 (tuple2 c1 b1) a3 (t2tb223 x)) p)) (mem28 x
  (tb2t222 (ran (tuple2 c1 b1) a2 p))))))))

;; mem_ran
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (x (tuple21 c a)))
  (and
  (=> (mem27 x (tb2t224 (ran (tuple2 c1 a1) a2 p)))
  (exists ((a3 uni))
  (and (sort a2 a3) (mem (tuple2 a2 (tuple2 c1 a1))
  (Tuple2 a2 (tuple2 c1 a1) a3 (t2tb225 x)) p))))
  (=>
  (exists ((a3 uni)) (mem (tuple2 a2 (tuple2 c1 a1))
  (Tuple2 a2 (tuple2 c1 a1) a3 (t2tb225 x)) p)) (mem27 x
  (tb2t224 (ran (tuple2 c1 a1) a2 p))))))))

;; mem_ran
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (x c))
  (and
  (=> (mem7 x (tb2t132 (ran c1 a2 p)))
  (exists ((a3 uni))
  (and (sort a2 a3) (mem (tuple2 a2 c1) (Tuple2 a2 c1 a3 (t2tb135 x)) p))))
  (=>
  (exists ((a3 uni)) (mem (tuple2 a2 c1) (Tuple2 a2 c1 a3 (t2tb135 x)) p))
  (mem7 x (tb2t132 (ran c1 a2 p))))))))

;; mem_ran
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (x (set (tuple21 a b))))
  (and
  (=> (mem4 x (tb2t10 (ran (set1 (tuple2 a1 b1)) a2 p)))
  (exists ((a3 uni))
  (and (sort a2 a3) (mem (tuple2 a2 (set1 (tuple2 a1 b1)))
  (Tuple2 a2 (set1 (tuple2 a1 b1)) a3 (t2tb11 x)) p))))
  (=>
  (exists ((a3 uni)) (mem (tuple2 a2 (set1 (tuple2 a1 b1)))
  (Tuple2 a2 (set1 (tuple2 a1 b1)) a3 (t2tb11 x)) p)) (mem4 x
  (tb2t10 (ran (set1 (tuple2 a1 b1)) a2 p))))))))

;; mem_ran
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (x (tuple21 a b)))
  (and
  (=> (mem3 x (tb2t11 (ran (tuple2 a1 b1) a2 p)))
  (exists ((a3 uni))
  (and (sort a2 a3) (mem (tuple2 a2 (tuple2 a1 b1))
  (Tuple2 a2 (tuple2 a1 b1) a3 (t2tb13 x)) p))))
  (=>
  (exists ((a3 uni)) (mem (tuple2 a2 (tuple2 a1 b1))
  (Tuple2 a2 (tuple2 a1 b1) a3 (t2tb13 x)) p)) (mem3 x
  (tb2t11 (ran (tuple2 a1 b1) a2 p))))))))

;; mem_ran
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (x b))
  (and
  (=> (mem2 x (tb2t12 (ran b1 a2 p)))
  (exists ((a3 uni))
  (and (sort a2 a3) (mem (tuple2 a2 b1) (Tuple2 a2 b1 a3 (t2tb14 x)) p))))
  (=> (exists ((a3 uni)) (mem (tuple2 a2 b1) (Tuple2 a2 b1 a3 (t2tb14 x)) p))
  (mem2 x (tb2t12 (ran b1 a2 p))))))))

;; mem_ran
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (x a))
  (and
  (=> (mem1 x (tb2t1 (ran a1 a2 p)))
  (exists ((a3 uni))
  (and (sort a2 a3) (mem (tuple2 a2 a1) (Tuple2 a2 a1 a3 (t2tb2 x)) p))))
  (=> (exists ((a3 uni)) (mem (tuple2 a2 a1) (Tuple2 a2 a1 a3 (t2tb2 x)) p))
  (mem1 x (tb2t1 (ran a1 a2 p))))))))

;; mem_ran
  (assert
  (forall ((p (set (tuple21 c b))) (x b))
  (= (mem2 x (tb2t12 (ran b1 c1 (t2tb222 p))))
  (exists ((a2 c)) (mem28 (tb2t223 (Tuple2 c1 b1 (t2tb135 a2) (t2tb14 x)))
  p)))))

;; mem_ran
  (assert
  (forall ((p (set (tuple21 c a))) (x a))
  (= (mem1 x (tb2t1 (ran a1 c1 (t2tb224 p))))
  (exists ((a2 c)) (mem27 (tb2t225 (Tuple2 c1 a1 (t2tb135 a2) (t2tb2 x))) p)))))

;; mem_ran
  (assert
  (forall ((p (set (tuple21 a b))) (x b))
  (= (mem2 x (tb2t12 (ran b1 a1 (t2tb11 p))))
  (exists ((a2 a)) (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 a2) (t2tb14 x))) p)))))

;; mem_ran
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((p uni) (x uni))
  (and
  (=> (mem b2 x (ran b2 a2 p))
  (exists ((a3 uni))
  (and (sort a2 a3) (mem (tuple2 a2 b2) (Tuple2 a2 b2 a3 x) p))))
  (=> (exists ((a3 uni)) (mem (tuple2 a2 b2) (Tuple2 a2 b2 a3 x) p)) (mem b2
  x (ran b2 a2 p)))))))

(declare-fun semicolon (ty ty ty uni uni) uni)

;; semicolon_sort
  (assert
  (forall ((a2 ty) (b2 ty) (c2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (tuple2 a2 c2))
  (semicolon c2 b2 a2 x x1)))))

(declare-fun semicolon14 ((set (tuple21 c a)) (set (tuple21 a
  b))) (set (tuple21 c b)))

;; mem_semicolon
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (q (set (tuple21 c b))) (x uni) (y b))
  (= (mem (tuple2 a2 b1) (Tuple2 a2 b1 x (t2tb14 y))
  (semicolon b1 c1 a2 p (t2tb222 q)))
  (exists ((b2 c))
  (and (mem (tuple2 a2 c1) (Tuple2 a2 c1 x (t2tb135 b2)) p) (mem28
  (tb2t223 (Tuple2 c1 b1 (t2tb135 b2) (t2tb14 y))) q)))))))

;; mem_semicolon
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (q (set (tuple21 c a))) (x uni) (y a))
  (= (mem (tuple2 a2 a1) (Tuple2 a2 a1 x (t2tb2 y))
  (semicolon a1 c1 a2 p (t2tb224 q)))
  (exists ((b2 c))
  (and (mem (tuple2 a2 c1) (Tuple2 a2 c1 x (t2tb135 b2)) p) (mem27
  (tb2t225 (Tuple2 c1 a1 (t2tb135 b2) (t2tb2 y))) q)))))))

;; mem_semicolon
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (q (set (tuple21 a b))) (x uni) (y b))
  (= (mem (tuple2 a2 b1) (Tuple2 a2 b1 x (t2tb14 y))
  (semicolon b1 a1 a2 p (t2tb11 q)))
  (exists ((b2 a))
  (and (mem (tuple2 a2 a1) (Tuple2 a2 a1 x (t2tb2 b2)) p) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 b2) (t2tb14 y))) q)))))))

;; mem_semicolon
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (q uni) (x c) (y b))
  (and
  (=> (mem28 (tb2t223 (Tuple2 c1 b1 (t2tb135 x) (t2tb14 y)))
  (tb2t222 (semicolon b1 b2 c1 p q)))
  (exists ((b3 uni))
  (and (sort b2 b3)
  (and (mem (tuple2 c1 b2) (Tuple2 c1 b2 (t2tb135 x) b3) p) (mem
  (tuple2 b2 b1) (Tuple2 b2 b1 b3 (t2tb14 y)) q)))))
  (=>
  (exists ((b3 uni))
  (and (mem (tuple2 c1 b2) (Tuple2 c1 b2 (t2tb135 x) b3) p) (mem
  (tuple2 b2 b1) (Tuple2 b2 b1 b3 (t2tb14 y)) q))) (mem28
  (tb2t223 (Tuple2 c1 b1 (t2tb135 x) (t2tb14 y)))
  (tb2t222 (semicolon b1 b2 c1 p q))))))))

;; mem_semicolon
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (q uni) (x c) (y a))
  (and
  (=> (mem27 (tb2t225 (Tuple2 c1 a1 (t2tb135 x) (t2tb2 y)))
  (tb2t224 (semicolon a1 b2 c1 p q)))
  (exists ((b3 uni))
  (and (sort b2 b3)
  (and (mem (tuple2 c1 b2) (Tuple2 c1 b2 (t2tb135 x) b3) p) (mem
  (tuple2 b2 a1) (Tuple2 b2 a1 b3 (t2tb2 y)) q)))))
  (=>
  (exists ((b3 uni))
  (and (mem (tuple2 c1 b2) (Tuple2 c1 b2 (t2tb135 x) b3) p) (mem
  (tuple2 b2 a1) (Tuple2 b2 a1 b3 (t2tb2 y)) q))) (mem27
  (tb2t225 (Tuple2 c1 a1 (t2tb135 x) (t2tb2 y)))
  (tb2t224 (semicolon a1 b2 c1 p q))))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 c c))) (q (set (tuple21 c b))) (x c) (y b))
  (= (mem28 (tb2t223 (Tuple2 c1 b1 (t2tb135 x) (t2tb14 y)))
  (tb2t222 (semicolon b1 c1 c1 (t2tb216 p) (t2tb222 q))))
  (exists ((b2 c))
  (and (mem (tuple2 c1 c1) (Tuple2 c1 c1 (t2tb135 x) (t2tb135 b2))
  (t2tb216 p)) (mem28 (tb2t223 (Tuple2 c1 b1 (t2tb135 b2) (t2tb14 y))) q))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 c c))) (q (set (tuple21 c a))) (x c) (y a))
  (= (mem27 (tb2t225 (Tuple2 c1 a1 (t2tb135 x) (t2tb2 y)))
  (tb2t224 (semicolon a1 c1 c1 (t2tb216 p) (t2tb224 q))))
  (exists ((b2 c))
  (and (mem (tuple2 c1 c1) (Tuple2 c1 c1 (t2tb135 x) (t2tb135 b2))
  (t2tb216 p)) (mem27 (tb2t225 (Tuple2 c1 a1 (t2tb135 b2) (t2tb2 y))) q))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 c b))) (q (set (tuple21 b b))) (x c) (y b))
  (= (mem28 (tb2t223 (Tuple2 c1 b1 (t2tb135 x) (t2tb14 y)))
  (tb2t222 (semicolon b1 b1 c1 (t2tb222 p) (t2tb35 q))))
  (exists ((b2 b))
  (and (mem28 (tb2t223 (Tuple2 c1 b1 (t2tb135 x) (t2tb14 b2))) p) (mem
  (tuple2 b1 b1) (Tuple2 b1 b1 (t2tb14 b2) (t2tb14 y)) (t2tb35 q)))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 c b))) (q (set (tuple21 b a))) (x c) (y a))
  (= (mem27 (tb2t225 (Tuple2 c1 a1 (t2tb135 x) (t2tb2 y)))
  (tb2t224 (semicolon a1 b1 c1 (t2tb222 p) (t2tb37 q))))
  (exists ((b2 b))
  (and (mem28 (tb2t223 (Tuple2 c1 b1 (t2tb135 x) (t2tb14 b2))) p) (mem
  (tuple2 b1 a1) (Tuple2 b1 a1 (t2tb14 b2) (t2tb2 y)) (t2tb37 q)))))))

;; mem_semicolon
  (assert
  (forall ((c2 ty))
  (forall ((p (set (tuple21 c b))) (q uni) (x c) (y uni))
  (= (mem (tuple2 c1 c2) (Tuple2 c1 c2 (t2tb135 x) y)
  (semicolon c2 b1 c1 (t2tb222 p) q))
  (exists ((b2 b))
  (and (mem28 (tb2t223 (Tuple2 c1 b1 (t2tb135 x) (t2tb14 b2))) p) (mem
  (tuple2 b1 c2) (Tuple2 b1 c2 (t2tb14 b2) y) q)))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 c a))) (q (set (tuple21 a b))) (x c) (y b))
  (= (mem28 (tb2t223 (Tuple2 c1 b1 (t2tb135 x) (t2tb14 y)))
  (semicolon14 p q))
  (exists ((b2 a))
  (and (mem27 (tb2t225 (Tuple2 c1 a1 (t2tb135 x) (t2tb2 b2))) p) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 b2) (t2tb14 y))) q))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 c a))) (q (set (tuple21 a a))) (x c) (y a))
  (= (mem27 (tb2t225 (Tuple2 c1 a1 (t2tb135 x) (t2tb2 y)))
  (tb2t224 (semicolon a1 a1 c1 (t2tb224 p) (t2tb4 q))))
  (exists ((b2 a))
  (and (mem27 (tb2t225 (Tuple2 c1 a1 (t2tb135 x) (t2tb2 b2))) p) (mem
  (tuple2 a1 a1) (Tuple2 a1 a1 (t2tb2 b2) (t2tb2 y)) (t2tb4 q)))))))

;; mem_semicolon
  (assert
  (forall ((c2 ty))
  (forall ((p (set (tuple21 c a))) (q uni) (x c) (y uni))
  (= (mem (tuple2 c1 c2) (Tuple2 c1 c2 (t2tb135 x) y)
  (semicolon c2 a1 c1 (t2tb224 p) q))
  (exists ((b2 a))
  (and (mem27 (tb2t225 (Tuple2 c1 a1 (t2tb135 x) (t2tb2 b2))) p) (mem
  (tuple2 a1 c2) (Tuple2 a1 c2 (t2tb2 b2) y) q)))))))

;; mem_semicolon
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (q uni) (x a) (y b))
  (and
  (=> (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y)))
  (tb2t11 (semicolon b1 b2 a1 p q)))
  (exists ((b3 uni))
  (and (sort b2 b3)
  (and (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) b3) p) (mem (tuple2 b2 b1)
  (Tuple2 b2 b1 b3 (t2tb14 y)) q)))))
  (=>
  (exists ((b3 uni))
  (and (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) b3) p) (mem (tuple2 b2 b1)
  (Tuple2 b2 b1 b3 (t2tb14 y)) q))) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y)))
  (tb2t11 (semicolon b1 b2 a1 p q))))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 a c))) (q (set (tuple21 c b))) (x a) (y b))
  (= (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y)))
  (tb2t11 (semicolon b1 c1 a1 (t2tb129 p) (t2tb222 q))))
  (exists ((b2 c))
  (and (mem (tuple2 a1 c1) (Tuple2 a1 c1 (t2tb2 x) (t2tb135 b2)) (t2tb129 p))
  (mem28 (tb2t223 (Tuple2 c1 b1 (t2tb135 b2) (t2tb14 y))) q))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 a b))) (q (set (tuple21 b b))) (x a) (y b))
  (= (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y)))
  (tb2t11 (semicolon b1 b1 a1 (t2tb11 p) (t2tb35 q))))
  (exists ((b2 b))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 b2))) p) (mem
  (tuple2 b1 b1) (Tuple2 b1 b1 (t2tb14 b2) (t2tb14 y)) (t2tb35 q)))))))

;; mem_semicolon
  (assert
  (forall ((c2 ty))
  (forall ((p (set (tuple21 a b))) (q uni) (x a) (y uni))
  (= (mem (tuple2 a1 c2) (Tuple2 a1 c2 (t2tb2 x) y)
  (semicolon c2 b1 a1 (t2tb11 p) q))
  (exists ((b2 b))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 b2))) p) (mem
  (tuple2 b1 c2) (Tuple2 b1 c2 (t2tb14 b2) y) q)))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 a a))) (q (set (tuple21 a b))) (x a) (y b))
  (= (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y)))
  (tb2t11 (semicolon b1 a1 a1 (t2tb4 p) (t2tb11 q))))
  (exists ((b2 a))
  (and (mem (tuple2 a1 a1) (Tuple2 a1 a1 (t2tb2 x) (t2tb2 b2)) (t2tb4 p))
  (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 b2) (t2tb14 y))) q))))))

;; mem_semicolon
  (assert
  (forall ((a2 ty) (b2 ty) (c2 ty))
  (forall ((p uni) (q uni) (x uni) (y uni))
  (and
  (=> (mem (tuple2 a2 c2) (Tuple2 a2 c2 x y) (semicolon c2 b2 a2 p q))
  (exists ((b3 uni))
  (and (sort b2 b3)
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x b3) p) (mem (tuple2 b2 c2)
  (Tuple2 b2 c2 b3 y) q)))))
  (=>
  (exists ((b3 uni))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x b3) p) (mem (tuple2 b2 c2)
  (Tuple2 b2 c2 b3 y) q))) (mem (tuple2 a2 c2) (Tuple2 a2 c2 x y)
  (semicolon c2 b2 a2 p q)))))))

(declare-fun semicolon_back (ty ty ty uni uni) uni)

;; semicolon_back_sort
  (assert
  (forall ((a2 ty) (b2 ty) (c2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (tuple2 a2 c2))
  (semicolon_back c2 b2 a2 x x1)))))

;; semicolon_back
  (assert
  (forall ((p (set (tuple21 c a))) (q (set (tuple21 a b))))
  (= (tb2t222 (semicolon_back b1 a1 c1 (t2tb11 q) (t2tb224 p))) (semicolon14
                                                                p q))))

;; semicolon_back
  (assert
  (forall ((a2 ty) (b2 ty) (c2 ty))
  (forall ((p uni) (q uni))
  (= (semicolon_back c2 b2 a2 q p) (semicolon c2 b2 a2 p q)))))

(declare-fun id (ty uni) uni)

;; id_sort
  (assert
  (forall ((a2 ty))
  (forall ((x uni)) (sort (set1 (tuple2 a2 a2)) (id a2 x)))))

;; mem_id
  (assert
  (forall ((u (set (tuple21 c b))) (x (tuple21 c b)) (y (tuple21 c b)))
  (= (mem (tuple2 (tuple2 c1 b1) (tuple2 c1 b1))
  (Tuple2 (tuple2 c1 b1) (tuple2 c1 b1) (t2tb223 x) (t2tb223 y))
  (id (tuple2 c1 b1) (t2tb222 u))) (and (mem28 x u) (= x y)))))

;; mem_id
  (assert
  (forall ((u (set (tuple21 c a))) (x (tuple21 c a)) (y (tuple21 c a)))
  (= (mem (tuple2 (tuple2 c1 a1) (tuple2 c1 a1))
  (Tuple2 (tuple2 c1 a1) (tuple2 c1 a1) (t2tb225 x) (t2tb225 y))
  (id (tuple2 c1 a1) (t2tb224 u))) (and (mem27 x u) (= x y)))))

;; mem_id
  (assert
  (forall ((u (set c)) (x c) (y c))
  (= (mem (tuple2 c1 c1) (Tuple2 c1 c1 (t2tb135 x) (t2tb135 y))
  (id c1 (t2tb132 u))) (and (mem7 x u) (= x y)))))

;; mem_id
  (assert
  (forall ((u (set (set (tuple21 a b)))) (x (set (tuple21 a b)))
  (y (set (tuple21 a b))))
  (= (mem (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1)))
  (Tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1)) (t2tb11 x) (t2tb11 y))
  (id (set1 (tuple2 a1 b1)) (t2tb10 u))) (and (mem4 x u) (= x y)))))

;; mem_id
  (assert
  (forall ((u (set (tuple21 a b))) (x (tuple21 a b)) (y (tuple21 a b)))
  (= (mem (tuple2 (tuple2 a1 b1) (tuple2 a1 b1))
  (Tuple2 (tuple2 a1 b1) (tuple2 a1 b1) (t2tb13 x) (t2tb13 y))
  (id (tuple2 a1 b1) (t2tb11 u))) (and (mem3 x u) (= x y)))))

;; mem_id
  (assert
  (forall ((u (set b)) (x b) (y b))
  (= (mem (tuple2 b1 b1) (Tuple2 b1 b1 (t2tb14 x) (t2tb14 y))
  (id b1 (t2tb12 u))) (and (mem2 x u) (= x y)))))

;; mem_id
  (assert
  (forall ((u (set a)) (x a) (y a))
  (= (mem (tuple2 a1 a1) (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y))
  (id a1 (t2tb1 u))) (and (mem1 x u) (= x y)))))

;; mem_id
  (assert
  (forall ((a2 ty))
  (forall ((u uni) (x uni) (y uni))
  (=> (sort a2 x)
  (=> (sort a2 y)
  (= (mem (tuple2 a2 a2) (Tuple2 a2 a2 x y) (id a2 u))
  (and (mem a2 x u) (= x y))))))))

(declare-fun domain_restriction (ty ty uni uni) uni)

;; domain_restriction_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (tuple2 a2 b2))
  (domain_restriction b2 a2 x x1)))))

;; mem_domain_restriction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (tuple21 c b))) (x (tuple21 c b)) (y uni))
  (= (mem (tuple2 (tuple2 c1 b1) b2) (Tuple2 (tuple2 c1 b1) b2 (t2tb223 x) y)
  (domain_restriction b2 (tuple2 c1 b1) (t2tb222 s) p))
  (and (mem (tuple2 (tuple2 c1 b1) b2)
  (Tuple2 (tuple2 c1 b1) b2 (t2tb223 x) y) p) (mem28 x s))))))

;; mem_domain_restriction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (tuple21 c a))) (x (tuple21 c a)) (y uni))
  (= (mem (tuple2 (tuple2 c1 a1) b2) (Tuple2 (tuple2 c1 a1) b2 (t2tb225 x) y)
  (domain_restriction b2 (tuple2 c1 a1) (t2tb224 s) p))
  (and (mem (tuple2 (tuple2 c1 a1) b2)
  (Tuple2 (tuple2 c1 a1) b2 (t2tb225 x) y) p) (mem27 x s))))))

;; mem_domain_restriction
  (assert
  (forall ((p (set (tuple21 c b))) (s (set c)) (x c) (y b))
  (= (mem28 (tb2t223 (Tuple2 c1 b1 (t2tb135 x) (t2tb14 y)))
  (tb2t222 (domain_restriction b1 c1 (t2tb132 s) (t2tb222 p))))
  (and (mem28 (tb2t223 (Tuple2 c1 b1 (t2tb135 x) (t2tb14 y))) p) (mem7 x s)))))

;; mem_domain_restriction
  (assert
  (forall ((p (set (tuple21 c a))) (s (set c)) (x c) (y a))
  (= (mem27 (tb2t225 (Tuple2 c1 a1 (t2tb135 x) (t2tb2 y)))
  (tb2t224 (domain_restriction a1 c1 (t2tb132 s) (t2tb224 p))))
  (and (mem27 (tb2t225 (Tuple2 c1 a1 (t2tb135 x) (t2tb2 y))) p) (mem7 x s)))))

;; mem_domain_restriction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set c)) (x c) (y uni))
  (= (mem (tuple2 c1 b2) (Tuple2 c1 b2 (t2tb135 x) y)
  (domain_restriction b2 c1 (t2tb132 s) p))
  (and (mem (tuple2 c1 b2) (Tuple2 c1 b2 (t2tb135 x) y) p) (mem7 x s))))))

;; mem_domain_restriction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (set (tuple21 a b)))) (x (set (tuple21 a b)))
  (y uni))
  (= (mem (tuple2 (set1 (tuple2 a1 b1)) b2)
  (Tuple2 (set1 (tuple2 a1 b1)) b2 (t2tb11 x) y)
  (domain_restriction b2 (set1 (tuple2 a1 b1)) (t2tb10 s) p))
  (and (mem (tuple2 (set1 (tuple2 a1 b1)) b2)
  (Tuple2 (set1 (tuple2 a1 b1)) b2 (t2tb11 x) y) p) (mem4 x s))))))

;; mem_domain_restriction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (tuple21 a b))) (x (tuple21 a b)) (y uni))
  (= (mem (tuple2 (tuple2 a1 b1) b2) (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) y)
  (domain_restriction b2 (tuple2 a1 b1) (t2tb11 s) p))
  (and (mem (tuple2 (tuple2 a1 b1) b2)
  (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) y) p) (mem3 x s))))))

;; mem_domain_restriction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set b)) (x b) (y uni))
  (= (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) y)
  (domain_restriction b2 b1 (t2tb12 s) p))
  (and (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) y) p) (mem2 x s))))))

;; mem_domain_restriction
  (assert
  (forall ((p (set (tuple21 a b))) (s (set a)) (x a) (y b))
  (= (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y)))
  (tb2t11 (domain_restriction b1 a1 (t2tb1 s) (t2tb11 p))))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y))) p) (mem1 x s)))))

;; mem_domain_restriction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set a)) (x a) (y uni))
  (= (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) y)
  (domain_restriction b2 a1 (t2tb1 s) p))
  (and (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) y) p) (mem1 x s))))))

;; mem_domain_restriction
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((p uni) (s uni) (x uni) (y uni))
  (= (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) (domain_restriction b2 a2 s p))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) p) (mem a2 x s))))))

(declare-fun range_restriction (ty ty uni uni) uni)

;; range_restriction_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (tuple2 a2 b2))
  (range_restriction b2 a2 x x1)))))

;; mem_range_restriction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (tuple21 c b))) (x uni) (y (tuple21 c b)))
  (= (mem (tuple2 a2 (tuple2 c1 b1)) (Tuple2 a2 (tuple2 c1 b1) x (t2tb223 y))
  (range_restriction (tuple2 c1 b1) a2 p (t2tb222 t)))
  (and (mem (tuple2 a2 (tuple2 c1 b1))
  (Tuple2 a2 (tuple2 c1 b1) x (t2tb223 y)) p) (mem28 y t))))))

;; mem_range_restriction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (tuple21 c a))) (x uni) (y (tuple21 c a)))
  (= (mem (tuple2 a2 (tuple2 c1 a1)) (Tuple2 a2 (tuple2 c1 a1) x (t2tb225 y))
  (range_restriction (tuple2 c1 a1) a2 p (t2tb224 t)))
  (and (mem (tuple2 a2 (tuple2 c1 a1))
  (Tuple2 a2 (tuple2 c1 a1) x (t2tb225 y)) p) (mem27 y t))))))

;; mem_range_restriction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set c)) (x uni) (y c))
  (= (mem (tuple2 a2 c1) (Tuple2 a2 c1 x (t2tb135 y))
  (range_restriction c1 a2 p (t2tb132 t)))
  (and (mem (tuple2 a2 c1) (Tuple2 a2 c1 x (t2tb135 y)) p) (mem7 y t))))))

;; mem_range_restriction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (set (tuple21 a b)))) (x uni) (y (set (tuple21 a
  b))))
  (= (mem (tuple2 a2 (set1 (tuple2 a1 b1)))
  (Tuple2 a2 (set1 (tuple2 a1 b1)) x (t2tb11 y))
  (range_restriction (set1 (tuple2 a1 b1)) a2 p (t2tb10 t)))
  (and (mem (tuple2 a2 (set1 (tuple2 a1 b1)))
  (Tuple2 a2 (set1 (tuple2 a1 b1)) x (t2tb11 y)) p) (mem4 y t))))))

;; mem_range_restriction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (tuple21 a b))) (x uni) (y (tuple21 a b)))
  (= (mem (tuple2 a2 (tuple2 a1 b1)) (Tuple2 a2 (tuple2 a1 b1) x (t2tb13 y))
  (range_restriction (tuple2 a1 b1) a2 p (t2tb11 t)))
  (and (mem (tuple2 a2 (tuple2 a1 b1))
  (Tuple2 a2 (tuple2 a1 b1) x (t2tb13 y)) p) (mem3 y t))))))

;; mem_range_restriction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set b)) (x uni) (y b))
  (= (mem (tuple2 a2 b1) (Tuple2 a2 b1 x (t2tb14 y))
  (range_restriction b1 a2 p (t2tb12 t)))
  (and (mem (tuple2 a2 b1) (Tuple2 a2 b1 x (t2tb14 y)) p) (mem2 y t))))))

;; mem_range_restriction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set a)) (x uni) (y a))
  (= (mem (tuple2 a2 a1) (Tuple2 a2 a1 x (t2tb2 y))
  (range_restriction a1 a2 p (t2tb1 t)))
  (and (mem (tuple2 a2 a1) (Tuple2 a2 a1 x (t2tb2 y)) p) (mem1 y t))))))

;; mem_range_restriction
  (assert
  (forall ((p (set (tuple21 c b))) (t (set b)) (x c) (y b))
  (= (mem28 (tb2t223 (Tuple2 c1 b1 (t2tb135 x) (t2tb14 y)))
  (tb2t222 (range_restriction b1 c1 (t2tb222 p) (t2tb12 t))))
  (and (mem28 (tb2t223 (Tuple2 c1 b1 (t2tb135 x) (t2tb14 y))) p) (mem2 y t)))))

;; mem_range_restriction
  (assert
  (forall ((p (set (tuple21 c a))) (t (set a)) (x c) (y a))
  (= (mem27 (tb2t225 (Tuple2 c1 a1 (t2tb135 x) (t2tb2 y)))
  (tb2t224 (range_restriction a1 c1 (t2tb224 p) (t2tb1 t))))
  (and (mem27 (tb2t225 (Tuple2 c1 a1 (t2tb135 x) (t2tb2 y))) p) (mem1 y t)))))

;; mem_range_restriction
  (assert
  (forall ((p (set (tuple21 a b))) (t (set b)) (x a) (y b))
  (= (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y)))
  (tb2t11 (range_restriction b1 a1 (t2tb11 p) (t2tb12 t))))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y))) p) (mem2 y t)))))

;; mem_range_restriction
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((p uni) (t uni) (x uni) (y uni))
  (= (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) (range_restriction b2 a2 p t))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) p) (mem b2 y t))))))

(declare-fun domain_substraction (ty ty uni uni) uni)

;; domain_substraction_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (tuple2 a2 b2))
  (domain_substraction b2 a2 x x1)))))

;; mem_domain_substraction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (tuple21 c b))) (x (tuple21 c b)) (y uni))
  (= (mem (tuple2 (tuple2 c1 b1) b2) (Tuple2 (tuple2 c1 b1) b2 (t2tb223 x) y)
  (domain_substraction b2 (tuple2 c1 b1) (t2tb222 s) p))
  (and (mem (tuple2 (tuple2 c1 b1) b2)
  (Tuple2 (tuple2 c1 b1) b2 (t2tb223 x) y) p) (not (mem28 x s)))))))

;; mem_domain_substraction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (tuple21 c a))) (x (tuple21 c a)) (y uni))
  (= (mem (tuple2 (tuple2 c1 a1) b2) (Tuple2 (tuple2 c1 a1) b2 (t2tb225 x) y)
  (domain_substraction b2 (tuple2 c1 a1) (t2tb224 s) p))
  (and (mem (tuple2 (tuple2 c1 a1) b2)
  (Tuple2 (tuple2 c1 a1) b2 (t2tb225 x) y) p) (not (mem27 x s)))))))

;; mem_domain_substraction
  (assert
  (forall ((p (set (tuple21 c b))) (s (set c)) (x c) (y b))
  (= (mem28 (tb2t223 (Tuple2 c1 b1 (t2tb135 x) (t2tb14 y)))
  (tb2t222 (domain_substraction b1 c1 (t2tb132 s) (t2tb222 p))))
  (and (mem28 (tb2t223 (Tuple2 c1 b1 (t2tb135 x) (t2tb14 y))) p)
  (not (mem7 x s))))))

;; mem_domain_substraction
  (assert
  (forall ((p (set (tuple21 c a))) (s (set c)) (x c) (y a))
  (= (mem27 (tb2t225 (Tuple2 c1 a1 (t2tb135 x) (t2tb2 y)))
  (tb2t224 (domain_substraction a1 c1 (t2tb132 s) (t2tb224 p))))
  (and (mem27 (tb2t225 (Tuple2 c1 a1 (t2tb135 x) (t2tb2 y))) p)
  (not (mem7 x s))))))

;; mem_domain_substraction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set c)) (x c) (y uni))
  (= (mem (tuple2 c1 b2) (Tuple2 c1 b2 (t2tb135 x) y)
  (domain_substraction b2 c1 (t2tb132 s) p))
  (and (mem (tuple2 c1 b2) (Tuple2 c1 b2 (t2tb135 x) y) p) (not (mem7 x s)))))))

;; mem_domain_substraction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (set (tuple21 a b)))) (x (set (tuple21 a b)))
  (y uni))
  (= (mem (tuple2 (set1 (tuple2 a1 b1)) b2)
  (Tuple2 (set1 (tuple2 a1 b1)) b2 (t2tb11 x) y)
  (domain_substraction b2 (set1 (tuple2 a1 b1)) (t2tb10 s) p))
  (and (mem (tuple2 (set1 (tuple2 a1 b1)) b2)
  (Tuple2 (set1 (tuple2 a1 b1)) b2 (t2tb11 x) y) p) (not (mem4 x s)))))))

;; mem_domain_substraction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (tuple21 a b))) (x (tuple21 a b)) (y uni))
  (= (mem (tuple2 (tuple2 a1 b1) b2) (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) y)
  (domain_substraction b2 (tuple2 a1 b1) (t2tb11 s) p))
  (and (mem (tuple2 (tuple2 a1 b1) b2)
  (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) y) p) (not (mem3 x s)))))))

;; mem_domain_substraction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set b)) (x b) (y uni))
  (= (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) y)
  (domain_substraction b2 b1 (t2tb12 s) p))
  (and (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) y) p) (not (mem2 x s)))))))

;; mem_domain_substraction
  (assert
  (forall ((p (set (tuple21 a b))) (s (set a)) (x a) (y b))
  (= (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y)))
  (tb2t11 (domain_substraction b1 a1 (t2tb1 s) (t2tb11 p))))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y))) p)
  (not (mem1 x s))))))

;; mem_domain_substraction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set a)) (x a) (y uni))
  (= (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) y)
  (domain_substraction b2 a1 (t2tb1 s) p))
  (and (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) y) p) (not (mem1 x s)))))))

;; mem_domain_substraction
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((p uni) (s uni) (x uni) (y uni))
  (= (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) (domain_substraction b2 a2 s p))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) p) (not (mem a2 x s)))))))

(declare-fun range_substraction (ty ty uni uni) uni)

;; range_substraction_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (tuple2 a2 b2))
  (range_substraction b2 a2 x x1)))))

;; mem_range_substraction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (tuple21 c b))) (x uni) (y (tuple21 c b)))
  (= (mem (tuple2 a2 (tuple2 c1 b1)) (Tuple2 a2 (tuple2 c1 b1) x (t2tb223 y))
  (range_substraction (tuple2 c1 b1) a2 p (t2tb222 t)))
  (and (mem (tuple2 a2 (tuple2 c1 b1))
  (Tuple2 a2 (tuple2 c1 b1) x (t2tb223 y)) p) (not (mem28 y t)))))))

;; mem_range_substraction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (tuple21 c a))) (x uni) (y (tuple21 c a)))
  (= (mem (tuple2 a2 (tuple2 c1 a1)) (Tuple2 a2 (tuple2 c1 a1) x (t2tb225 y))
  (range_substraction (tuple2 c1 a1) a2 p (t2tb224 t)))
  (and (mem (tuple2 a2 (tuple2 c1 a1))
  (Tuple2 a2 (tuple2 c1 a1) x (t2tb225 y)) p) (not (mem27 y t)))))))

;; mem_range_substraction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set c)) (x uni) (y c))
  (= (mem (tuple2 a2 c1) (Tuple2 a2 c1 x (t2tb135 y))
  (range_substraction c1 a2 p (t2tb132 t)))
  (and (mem (tuple2 a2 c1) (Tuple2 a2 c1 x (t2tb135 y)) p) (not (mem7 y t)))))))

;; mem_range_substraction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (set (tuple21 a b)))) (x uni) (y (set (tuple21 a
  b))))
  (= (mem (tuple2 a2 (set1 (tuple2 a1 b1)))
  (Tuple2 a2 (set1 (tuple2 a1 b1)) x (t2tb11 y))
  (range_substraction (set1 (tuple2 a1 b1)) a2 p (t2tb10 t)))
  (and (mem (tuple2 a2 (set1 (tuple2 a1 b1)))
  (Tuple2 a2 (set1 (tuple2 a1 b1)) x (t2tb11 y)) p) (not (mem4 y t)))))))

;; mem_range_substraction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (tuple21 a b))) (x uni) (y (tuple21 a b)))
  (= (mem (tuple2 a2 (tuple2 a1 b1)) (Tuple2 a2 (tuple2 a1 b1) x (t2tb13 y))
  (range_substraction (tuple2 a1 b1) a2 p (t2tb11 t)))
  (and (mem (tuple2 a2 (tuple2 a1 b1))
  (Tuple2 a2 (tuple2 a1 b1) x (t2tb13 y)) p) (not (mem3 y t)))))))

;; mem_range_substraction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set b)) (x uni) (y b))
  (= (mem (tuple2 a2 b1) (Tuple2 a2 b1 x (t2tb14 y))
  (range_substraction b1 a2 p (t2tb12 t)))
  (and (mem (tuple2 a2 b1) (Tuple2 a2 b1 x (t2tb14 y)) p) (not (mem2 y t)))))))

;; mem_range_substraction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set a)) (x uni) (y a))
  (= (mem (tuple2 a2 a1) (Tuple2 a2 a1 x (t2tb2 y))
  (range_substraction a1 a2 p (t2tb1 t)))
  (and (mem (tuple2 a2 a1) (Tuple2 a2 a1 x (t2tb2 y)) p) (not (mem1 y t)))))))

;; mem_range_substraction
  (assert
  (forall ((p (set (tuple21 c b))) (t (set b)) (x c) (y b))
  (= (mem28 (tb2t223 (Tuple2 c1 b1 (t2tb135 x) (t2tb14 y)))
  (tb2t222 (range_substraction b1 c1 (t2tb222 p) (t2tb12 t))))
  (and (mem28 (tb2t223 (Tuple2 c1 b1 (t2tb135 x) (t2tb14 y))) p)
  (not (mem2 y t))))))

;; mem_range_substraction
  (assert
  (forall ((p (set (tuple21 c a))) (t (set a)) (x c) (y a))
  (= (mem27 (tb2t225 (Tuple2 c1 a1 (t2tb135 x) (t2tb2 y)))
  (tb2t224 (range_substraction a1 c1 (t2tb224 p) (t2tb1 t))))
  (and (mem27 (tb2t225 (Tuple2 c1 a1 (t2tb135 x) (t2tb2 y))) p)
  (not (mem1 y t))))))

;; mem_range_substraction
  (assert
  (forall ((p (set (tuple21 a b))) (t (set b)) (x a) (y b))
  (= (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y)))
  (tb2t11 (range_substraction b1 a1 (t2tb11 p) (t2tb12 t))))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y))) p)
  (not (mem2 y t))))))

;; mem_range_substraction
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((p uni) (t uni) (x uni) (y uni))
  (= (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) (range_substraction b2 a2 p t))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) p) (not (mem b2 y t)))))))

(declare-fun image (ty ty uni uni) uni)

;; image_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 b2) (image b2 a2 x x1)))))

(declare-fun image5 ((set (tuple21 c a)) (set c)) (set a))

(declare-fun image1 ((set (tuple21 a b)) (set a)) (set b))

(declare-fun image6 ((set (tuple21 c b)) (set c)) (set b))

;; mem_image
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (w uni) (x (tuple21 c b)))
  (and
  (=> (mem28 x (tb2t222 (image (tuple2 c1 b1) a2 p w)))
  (exists ((a3 uni))
  (and (sort a2 a3)
  (and (mem a2 a3 w) (mem (tuple2 a2 (tuple2 c1 b1))
  (Tuple2 a2 (tuple2 c1 b1) a3 (t2tb223 x)) p)))))
  (=>
  (exists ((a3 uni))
  (and (mem a2 a3 w) (mem (tuple2 a2 (tuple2 c1 b1))
  (Tuple2 a2 (tuple2 c1 b1) a3 (t2tb223 x)) p))) (mem28 x
  (tb2t222 (image (tuple2 c1 b1) a2 p w))))))))

;; mem_image
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (w uni) (x (tuple21 c a)))
  (and
  (=> (mem27 x (tb2t224 (image (tuple2 c1 a1) a2 p w)))
  (exists ((a3 uni))
  (and (sort a2 a3)
  (and (mem a2 a3 w) (mem (tuple2 a2 (tuple2 c1 a1))
  (Tuple2 a2 (tuple2 c1 a1) a3 (t2tb225 x)) p)))))
  (=>
  (exists ((a3 uni))
  (and (mem a2 a3 w) (mem (tuple2 a2 (tuple2 c1 a1))
  (Tuple2 a2 (tuple2 c1 a1) a3 (t2tb225 x)) p))) (mem27 x
  (tb2t224 (image (tuple2 c1 a1) a2 p w))))))))

;; mem_image
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (w uni) (x c))
  (and
  (=> (mem7 x (tb2t132 (image c1 a2 p w)))
  (exists ((a3 uni))
  (and (sort a2 a3)
  (and (mem a2 a3 w) (mem (tuple2 a2 c1) (Tuple2 a2 c1 a3 (t2tb135 x)) p)))))
  (=>
  (exists ((a3 uni))
  (and (mem a2 a3 w) (mem (tuple2 a2 c1) (Tuple2 a2 c1 a3 (t2tb135 x)) p)))
  (mem7 x (tb2t132 (image c1 a2 p w))))))))

;; mem_image
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (w uni) (x (set (tuple21 a b))))
  (and
  (=> (mem4 x (tb2t10 (image (set1 (tuple2 a1 b1)) a2 p w)))
  (exists ((a3 uni))
  (and (sort a2 a3)
  (and (mem a2 a3 w) (mem (tuple2 a2 (set1 (tuple2 a1 b1)))
  (Tuple2 a2 (set1 (tuple2 a1 b1)) a3 (t2tb11 x)) p)))))
  (=>
  (exists ((a3 uni))
  (and (mem a2 a3 w) (mem (tuple2 a2 (set1 (tuple2 a1 b1)))
  (Tuple2 a2 (set1 (tuple2 a1 b1)) a3 (t2tb11 x)) p))) (mem4 x
  (tb2t10 (image (set1 (tuple2 a1 b1)) a2 p w))))))))

;; mem_image
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (w uni) (x (tuple21 a b)))
  (and
  (=> (mem3 x (tb2t11 (image (tuple2 a1 b1) a2 p w)))
  (exists ((a3 uni))
  (and (sort a2 a3)
  (and (mem a2 a3 w) (mem (tuple2 a2 (tuple2 a1 b1))
  (Tuple2 a2 (tuple2 a1 b1) a3 (t2tb13 x)) p)))))
  (=>
  (exists ((a3 uni))
  (and (mem a2 a3 w) (mem (tuple2 a2 (tuple2 a1 b1))
  (Tuple2 a2 (tuple2 a1 b1) a3 (t2tb13 x)) p))) (mem3 x
  (tb2t11 (image (tuple2 a1 b1) a2 p w))))))))

;; mem_image
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (w uni) (x b))
  (and
  (=> (mem2 x (tb2t12 (image b1 a2 p w)))
  (exists ((a3 uni))
  (and (sort a2 a3)
  (and (mem a2 a3 w) (mem (tuple2 a2 b1) (Tuple2 a2 b1 a3 (t2tb14 x)) p)))))
  (=>
  (exists ((a3 uni))
  (and (mem a2 a3 w) (mem (tuple2 a2 b1) (Tuple2 a2 b1 a3 (t2tb14 x)) p)))
  (mem2 x (tb2t12 (image b1 a2 p w))))))))

;; mem_image
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (w uni) (x a))
  (and
  (=> (mem1 x (tb2t1 (image a1 a2 p w)))
  (exists ((a3 uni))
  (and (sort a2 a3)
  (and (mem a2 a3 w) (mem (tuple2 a2 a1) (Tuple2 a2 a1 a3 (t2tb2 x)) p)))))
  (=>
  (exists ((a3 uni))
  (and (mem a2 a3 w) (mem (tuple2 a2 a1) (Tuple2 a2 a1 a3 (t2tb2 x)) p)))
  (mem1 x (tb2t1 (image a1 a2 p w))))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 c b) (tuple21 c b)))) (w (set (tuple21 c
  b))) (x (tuple21 c b)))
  (= (mem28 x
  (tb2t222 (image (tuple2 c1 b1) (tuple2 c1 b1) (t2tb2777 p) (t2tb222 w))))
  (exists ((a2 (tuple21 c b)))
  (and (mem28 a2 w) (mem (tuple2 (tuple2 c1 b1) (tuple2 c1 b1))
  (Tuple2 (tuple2 c1 b1) (tuple2 c1 b1) (t2tb223 a2) (t2tb223 x))
  (t2tb2777 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 c b) (tuple21 c a)))) (w (set (tuple21 c
  b))) (x (tuple21 c a)))
  (= (mem27 x
  (tb2t224 (image (tuple2 c1 a1) (tuple2 c1 b1) (t2tb2862 p) (t2tb222 w))))
  (exists ((a2 (tuple21 c b)))
  (and (mem28 a2 w) (mem (tuple2 (tuple2 c1 b1) (tuple2 c1 a1))
  (Tuple2 (tuple2 c1 b1) (tuple2 c1 a1) (t2tb223 a2) (t2tb225 x))
  (t2tb2862 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 c b) c))) (w (set (tuple21 c b))) (x c))
  (= (mem7 x (tb2t132 (image c1 (tuple2 c1 b1) (t2tb2784 p) (t2tb222 w))))
  (exists ((a2 (tuple21 c b)))
  (and (mem28 a2 w) (mem (tuple2 (tuple2 c1 b1) c1)
  (Tuple2 (tuple2 c1 b1) c1 (t2tb223 a2) (t2tb135 x)) (t2tb2784 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 c b) (set (tuple21 a b)))))
  (w (set (tuple21 c b))) (x (set (tuple21 a b))))
  (= (mem4 x
  (tb2t10
  (image (set1 (tuple2 a1 b1)) (tuple2 c1 b1) (t2tb2785 p) (t2tb222 w))))
  (exists ((a2 (tuple21 c b)))
  (and (mem28 a2 w) (mem (tuple2 (tuple2 c1 b1) (set1 (tuple2 a1 b1)))
  (Tuple2 (tuple2 c1 b1) (set1 (tuple2 a1 b1)) (t2tb223 a2) (t2tb11 x))
  (t2tb2785 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 c b) (tuple21 a b)))) (w (set (tuple21 c
  b))) (x (tuple21 a b)))
  (= (mem3 x
  (tb2t11 (image (tuple2 a1 b1) (tuple2 c1 b1) (t2tb2787 p) (t2tb222 w))))
  (exists ((a2 (tuple21 c b)))
  (and (mem28 a2 w) (mem (tuple2 (tuple2 c1 b1) (tuple2 a1 b1))
  (Tuple2 (tuple2 c1 b1) (tuple2 a1 b1) (t2tb223 a2) (t2tb13 x))
  (t2tb2787 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 c b) b))) (w (set (tuple21 c b))) (x b))
  (= (mem2 x (tb2t12 (image b1 (tuple2 c1 b1) (t2tb2789 p) (t2tb222 w))))
  (exists ((a2 (tuple21 c b)))
  (and (mem28 a2 w) (mem (tuple2 (tuple2 c1 b1) b1)
  (Tuple2 (tuple2 c1 b1) b1 (t2tb223 a2) (t2tb14 x)) (t2tb2789 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 c b) a))) (w (set (tuple21 c b))) (x a))
  (= (mem1 x (tb2t1 (image a1 (tuple2 c1 b1) (t2tb2791 p) (t2tb222 w))))
  (exists ((a2 (tuple21 c b)))
  (and (mem28 a2 w) (mem (tuple2 (tuple2 c1 b1) a1)
  (Tuple2 (tuple2 c1 b1) a1 (t2tb223 a2) (t2tb2 x)) (t2tb2791 p)))))))

;; mem_image
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (w (set (tuple21 c b))) (x uni))
  (= (mem b2 x (image b2 (tuple2 c1 b1) p (t2tb222 w)))
  (exists ((a2 (tuple21 c b)))
  (and (mem28 a2 w) (mem (tuple2 (tuple2 c1 b1) b2)
  (Tuple2 (tuple2 c1 b1) b2 (t2tb223 a2) x) p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 c a) (tuple21 c b)))) (w (set (tuple21 c
  a))) (x (tuple21 c b)))
  (= (mem28 x
  (tb2t222 (image (tuple2 c1 b1) (tuple2 c1 a1) (t2tb2864 p) (t2tb224 w))))
  (exists ((a2 (tuple21 c a)))
  (and (mem27 a2 w) (mem (tuple2 (tuple2 c1 a1) (tuple2 c1 b1))
  (Tuple2 (tuple2 c1 a1) (tuple2 c1 b1) (t2tb225 a2) (t2tb223 x))
  (t2tb2864 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 c a) (tuple21 c a)))) (w (set (tuple21 c
  a))) (x (tuple21 c a)))
  (= (mem27 x
  (tb2t224 (image (tuple2 c1 a1) (tuple2 c1 a1) (t2tb2866 p) (t2tb224 w))))
  (exists ((a2 (tuple21 c a)))
  (and (mem27 a2 w) (mem (tuple2 (tuple2 c1 a1) (tuple2 c1 a1))
  (Tuple2 (tuple2 c1 a1) (tuple2 c1 a1) (t2tb225 a2) (t2tb225 x))
  (t2tb2866 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 c a) c))) (w (set (tuple21 c a))) (x c))
  (= (mem7 x (tb2t132 (image c1 (tuple2 c1 a1) (t2tb2868 p) (t2tb224 w))))
  (exists ((a2 (tuple21 c a)))
  (and (mem27 a2 w) (mem (tuple2 (tuple2 c1 a1) c1)
  (Tuple2 (tuple2 c1 a1) c1 (t2tb225 a2) (t2tb135 x)) (t2tb2868 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 c a) (set (tuple21 a b)))))
  (w (set (tuple21 c a))) (x (set (tuple21 a b))))
  (= (mem4 x
  (tb2t10
  (image (set1 (tuple2 a1 b1)) (tuple2 c1 a1) (t2tb2870 p) (t2tb224 w))))
  (exists ((a2 (tuple21 c a)))
  (and (mem27 a2 w) (mem (tuple2 (tuple2 c1 a1) (set1 (tuple2 a1 b1)))
  (Tuple2 (tuple2 c1 a1) (set1 (tuple2 a1 b1)) (t2tb225 a2) (t2tb11 x))
  (t2tb2870 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 c a) (tuple21 a b)))) (w (set (tuple21 c
  a))) (x (tuple21 a b)))
  (= (mem3 x
  (tb2t11 (image (tuple2 a1 b1) (tuple2 c1 a1) (t2tb2872 p) (t2tb224 w))))
  (exists ((a2 (tuple21 c a)))
  (and (mem27 a2 w) (mem (tuple2 (tuple2 c1 a1) (tuple2 a1 b1))
  (Tuple2 (tuple2 c1 a1) (tuple2 a1 b1) (t2tb225 a2) (t2tb13 x))
  (t2tb2872 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 c a) b))) (w (set (tuple21 c a))) (x b))
  (= (mem2 x (tb2t12 (image b1 (tuple2 c1 a1) (t2tb2874 p) (t2tb224 w))))
  (exists ((a2 (tuple21 c a)))
  (and (mem27 a2 w) (mem (tuple2 (tuple2 c1 a1) b1)
  (Tuple2 (tuple2 c1 a1) b1 (t2tb225 a2) (t2tb14 x)) (t2tb2874 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 c a) a))) (w (set (tuple21 c a))) (x a))
  (= (mem1 x (tb2t1 (image a1 (tuple2 c1 a1) (t2tb2876 p) (t2tb224 w))))
  (exists ((a2 (tuple21 c a)))
  (and (mem27 a2 w) (mem (tuple2 (tuple2 c1 a1) a1)
  (Tuple2 (tuple2 c1 a1) a1 (t2tb225 a2) (t2tb2 x)) (t2tb2876 p)))))))

;; mem_image
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (w (set (tuple21 c a))) (x uni))
  (= (mem b2 x (image b2 (tuple2 c1 a1) p (t2tb224 w)))
  (exists ((a2 (tuple21 c a)))
  (and (mem27 a2 w) (mem (tuple2 (tuple2 c1 a1) b2)
  (Tuple2 (tuple2 c1 a1) b2 (t2tb225 a2) x) p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 c (tuple21 c b)))) (w (set c)) (x (tuple21 c b)))
  (= (mem28 x (tb2t222 (image (tuple2 c1 b1) c1 (t2tb2803 p) (t2tb132 w))))
  (exists ((a2 c))
  (and (mem7 a2 w) (mem (tuple2 c1 (tuple2 c1 b1))
  (Tuple2 c1 (tuple2 c1 b1) (t2tb135 a2) (t2tb223 x)) (t2tb2803 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 c (tuple21 c a)))) (w (set c)) (x (tuple21 c a)))
  (= (mem27 x (tb2t224 (image (tuple2 c1 a1) c1 (t2tb2878 p) (t2tb132 w))))
  (exists ((a2 c))
  (and (mem7 a2 w) (mem (tuple2 c1 (tuple2 c1 a1))
  (Tuple2 c1 (tuple2 c1 a1) (t2tb135 a2) (t2tb225 x)) (t2tb2878 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 c c))) (w (set c)) (x c))
  (= (mem7 x (tb2t132 (image c1 c1 (t2tb216 p) (t2tb132 w))))
  (exists ((a2 c))
  (and (mem7 a2 w) (mem (tuple2 c1 c1)
  (Tuple2 c1 c1 (t2tb135 a2) (t2tb135 x)) (t2tb216 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 c (set (tuple21 a b))))) (w (set c))
  (x (set (tuple21 a b))))
  (= (mem4 x
  (tb2t10 (image (set1 (tuple2 a1 b1)) c1 (t2tb218 p) (t2tb132 w))))
  (exists ((a2 c))
  (and (mem7 a2 w) (mem (tuple2 c1 (set1 (tuple2 a1 b1)))
  (Tuple2 c1 (set1 (tuple2 a1 b1)) (t2tb135 a2) (t2tb11 x)) (t2tb218 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 c (tuple21 a b)))) (w (set c)) (x (tuple21 a b)))
  (= (mem3 x (tb2t11 (image (tuple2 a1 b1) c1 (t2tb220 p) (t2tb132 w))))
  (exists ((a2 c))
  (and (mem7 a2 w) (mem (tuple2 c1 (tuple2 a1 b1))
  (Tuple2 c1 (tuple2 a1 b1) (t2tb135 a2) (t2tb13 x)) (t2tb220 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 c b))) (w (set c)) (x b))
  (= (mem2 x (image6 p w))
  (exists ((a2 c))
  (and (mem7 a2 w) (mem28 (tb2t223 (Tuple2 c1 b1 (t2tb135 a2) (t2tb14 x)))
  p))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 c a))) (w (set c)) (x a))
  (= (mem1 x (image5 p w))
  (exists ((a2 c))
  (and (mem7 a2 w) (mem27 (tb2t225 (Tuple2 c1 a1 (t2tb135 a2) (t2tb2 x))) p))))))

;; mem_image
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (w (set c)) (x uni))
  (= (mem b2 x (image b2 c1 p (t2tb132 w)))
  (exists ((a2 c))
  (and (mem7 a2 w) (mem (tuple2 c1 b2) (Tuple2 c1 b2 (t2tb135 a2) x) p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a b)) (tuple21 c b))))
  (w (set (set (tuple21 a b)))) (x (tuple21 c b)))
  (= (mem28 x
  (tb2t222
  (image (tuple2 c1 b1) (set1 (tuple2 a1 b1)) (t2tb2807 p) (t2tb10 w))))
  (exists ((a2 (set (tuple21 a b))))
  (and (mem4 a2 w) (mem (tuple2 (set1 (tuple2 a1 b1)) (tuple2 c1 b1))
  (Tuple2 (set1 (tuple2 a1 b1)) (tuple2 c1 b1) (t2tb11 a2) (t2tb223 x))
  (t2tb2807 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a b)) (tuple21 c a))))
  (w (set (set (tuple21 a b)))) (x (tuple21 c a)))
  (= (mem27 x
  (tb2t224
  (image (tuple2 c1 a1) (set1 (tuple2 a1 b1)) (t2tb2880 p) (t2tb10 w))))
  (exists ((a2 (set (tuple21 a b))))
  (and (mem4 a2 w) (mem (tuple2 (set1 (tuple2 a1 b1)) (tuple2 c1 a1))
  (Tuple2 (set1 (tuple2 a1 b1)) (tuple2 c1 a1) (t2tb11 a2) (t2tb225 x))
  (t2tb2880 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a b)) c))) (w (set (set (tuple21 a
  b)))) (x c))
  (= (mem7 x
  (tb2t132 (image c1 (set1 (tuple2 a1 b1)) (t2tb234 p) (t2tb10 w))))
  (exists ((a2 (set (tuple21 a b))))
  (and (mem4 a2 w) (mem (tuple2 (set1 (tuple2 a1 b1)) c1)
  (Tuple2 (set1 (tuple2 a1 b1)) c1 (t2tb11 a2) (t2tb135 x)) (t2tb234 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a b)) (set (tuple21 a b)))))
  (w (set (set (tuple21 a b)))) (x (set (tuple21 a b))))
  (= (mem4 x
  (tb2t10
  (image (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1)) (t2tb15 p) (t2tb10 w))))
  (exists ((a2 (set (tuple21 a b))))
  (and (mem4 a2 w) (mem (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1)))
  (Tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1)) (t2tb11 a2) (t2tb11 x))
  (t2tb15 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a b)) (tuple21 a b))))
  (w (set (set (tuple21 a b)))) (x (tuple21 a b)))
  (= (mem3 x
  (tb2t11 (image (tuple2 a1 b1) (set1 (tuple2 a1 b1)) (t2tb17 p) (t2tb10 w))))
  (exists ((a2 (set (tuple21 a b))))
  (and (mem4 a2 w) (mem (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 b1))
  (Tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 b1) (t2tb11 a2) (t2tb13 x))
  (t2tb17 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a b)) b))) (w (set (set (tuple21 a
  b)))) (x b))
  (= (mem2 x (tb2t12 (image b1 (set1 (tuple2 a1 b1)) (t2tb19 p) (t2tb10 w))))
  (exists ((a2 (set (tuple21 a b))))
  (and (mem4 a2 w) (mem (tuple2 (set1 (tuple2 a1 b1)) b1)
  (Tuple2 (set1 (tuple2 a1 b1)) b1 (t2tb11 a2) (t2tb14 x)) (t2tb19 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a b)) a))) (w (set (set (tuple21 a
  b)))) (x a))
  (= (mem1 x (tb2t1 (image a1 (set1 (tuple2 a1 b1)) (t2tb22 p) (t2tb10 w))))
  (exists ((a2 (set (tuple21 a b))))
  (and (mem4 a2 w) (mem (tuple2 (set1 (tuple2 a1 b1)) a1)
  (Tuple2 (set1 (tuple2 a1 b1)) a1 (t2tb11 a2) (t2tb2 x)) (t2tb22 p)))))))

;; mem_image
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (w (set (set (tuple21 a b)))) (x uni))
  (= (mem b2 x (image b2 (set1 (tuple2 a1 b1)) p (t2tb10 w)))
  (exists ((a2 (set (tuple21 a b))))
  (and (mem4 a2 w) (mem (tuple2 (set1 (tuple2 a1 b1)) b2)
  (Tuple2 (set1 (tuple2 a1 b1)) b2 (t2tb11 a2) x) p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) (tuple21 c b)))) (w (set (tuple21 a
  b))) (x (tuple21 c b)))
  (= (mem28 x
  (tb2t222 (image (tuple2 c1 b1) (tuple2 a1 b1) (t2tb2811 p) (t2tb11 w))))
  (exists ((a2 (tuple21 a b)))
  (and (mem3 a2 w) (mem (tuple2 (tuple2 a1 b1) (tuple2 c1 b1))
  (Tuple2 (tuple2 a1 b1) (tuple2 c1 b1) (t2tb13 a2) (t2tb223 x))
  (t2tb2811 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) (tuple21 c a)))) (w (set (tuple21 a
  b))) (x (tuple21 c a)))
  (= (mem27 x
  (tb2t224 (image (tuple2 c1 a1) (tuple2 a1 b1) (t2tb2418 p) (t2tb11 w))))
  (exists ((a2 (tuple21 a b)))
  (and (mem3 a2 w) (mem (tuple2 (tuple2 a1 b1) (tuple2 c1 a1))
  (Tuple2 (tuple2 a1 b1) (tuple2 c1 a1) (t2tb13 a2) (t2tb225 x))
  (t2tb2418 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) c))) (w (set (tuple21 a b))) (x c))
  (= (mem7 x (tb2t132 (image c1 (tuple2 a1 b1) (t2tb245 p) (t2tb11 w))))
  (exists ((a2 (tuple21 a b)))
  (and (mem3 a2 w) (mem (tuple2 (tuple2 a1 b1) c1)
  (Tuple2 (tuple2 a1 b1) c1 (t2tb13 a2) (t2tb135 x)) (t2tb245 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) (set (tuple21 a b)))))
  (w (set (tuple21 a b))) (x (set (tuple21 a b))))
  (= (mem4 x
  (tb2t10 (image (set1 (tuple2 a1 b1)) (tuple2 a1 b1) (t2tb23 p) (t2tb11 w))))
  (exists ((a2 (tuple21 a b)))
  (and (mem3 a2 w) (mem (tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 b1)))
  (Tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 b1)) (t2tb13 a2) (t2tb11 x))
  (t2tb23 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) (tuple21 a b)))) (w (set (tuple21 a
  b))) (x (tuple21 a b)))
  (= (mem3 x
  (tb2t11 (image (tuple2 a1 b1) (tuple2 a1 b1) (t2tb25 p) (t2tb11 w))))
  (exists ((a2 (tuple21 a b)))
  (and (mem3 a2 w) (mem (tuple2 (tuple2 a1 b1) (tuple2 a1 b1))
  (Tuple2 (tuple2 a1 b1) (tuple2 a1 b1) (t2tb13 a2) (t2tb13 x)) (t2tb25 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) b))) (w (set (tuple21 a b))) (x b))
  (= (mem2 x (tb2t12 (image b1 (tuple2 a1 b1) (t2tb27 p) (t2tb11 w))))
  (exists ((a2 (tuple21 a b)))
  (and (mem3 a2 w) (mem (tuple2 (tuple2 a1 b1) b1)
  (Tuple2 (tuple2 a1 b1) b1 (t2tb13 a2) (t2tb14 x)) (t2tb27 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) a))) (w (set (tuple21 a b))) (x a))
  (= (mem1 x (tb2t1 (image a1 (tuple2 a1 b1) (t2tb29 p) (t2tb11 w))))
  (exists ((a2 (tuple21 a b)))
  (and (mem3 a2 w) (mem (tuple2 (tuple2 a1 b1) a1)
  (Tuple2 (tuple2 a1 b1) a1 (t2tb13 a2) (t2tb2 x)) (t2tb29 p)))))))

;; mem_image
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (w (set (tuple21 a b))) (x uni))
  (= (mem b2 x (image b2 (tuple2 a1 b1) p (t2tb11 w)))
  (exists ((a2 (tuple21 a b)))
  (and (mem3 a2 w) (mem (tuple2 (tuple2 a1 b1) b2)
  (Tuple2 (tuple2 a1 b1) b2 (t2tb13 a2) x) p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 b (tuple21 c b)))) (w (set b)) (x (tuple21 c b)))
  (= (mem28 x (tb2t222 (image (tuple2 c1 b1) b1 (t2tb2815 p) (t2tb12 w))))
  (exists ((a2 b))
  (and (mem2 a2 w) (mem (tuple2 b1 (tuple2 c1 b1))
  (Tuple2 b1 (tuple2 c1 b1) (t2tb14 a2) (t2tb223 x)) (t2tb2815 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 b (tuple21 c a)))) (w (set b)) (x (tuple21 c a)))
  (= (mem27 x (tb2t224 (image (tuple2 c1 a1) b1 (t2tb2409 p) (t2tb12 w))))
  (exists ((a2 b))
  (and (mem2 a2 w) (mem (tuple2 b1 (tuple2 c1 a1))
  (Tuple2 b1 (tuple2 c1 a1) (t2tb14 a2) (t2tb225 x)) (t2tb2409 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 b c))) (w (set b)) (x c))
  (= (mem7 x (tb2t132 (image c1 b1 (t2tb131 p) (t2tb12 w))))
  (exists ((a2 b))
  (and (mem2 a2 w) (mem (tuple2 b1 c1) (Tuple2 b1 c1 (t2tb14 a2) (t2tb135 x))
  (t2tb131 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 b (set (tuple21 a b))))) (w (set b))
  (x (set (tuple21 a b))))
  (= (mem4 x (tb2t10 (image (set1 (tuple2 a1 b1)) b1 (t2tb31 p) (t2tb12 w))))
  (exists ((a2 b))
  (and (mem2 a2 w) (mem (tuple2 b1 (set1 (tuple2 a1 b1)))
  (Tuple2 b1 (set1 (tuple2 a1 b1)) (t2tb14 a2) (t2tb11 x)) (t2tb31 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 b (tuple21 a b)))) (w (set b)) (x (tuple21 a b)))
  (= (mem3 x (tb2t11 (image (tuple2 a1 b1) b1 (t2tb34 p) (t2tb12 w))))
  (exists ((a2 b))
  (and (mem2 a2 w) (mem (tuple2 b1 (tuple2 a1 b1))
  (Tuple2 b1 (tuple2 a1 b1) (t2tb14 a2) (t2tb13 x)) (t2tb34 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 b b))) (w (set b)) (x b))
  (= (mem2 x (tb2t12 (image b1 b1 (t2tb35 p) (t2tb12 w))))
  (exists ((a2 b))
  (and (mem2 a2 w) (mem (tuple2 b1 b1) (Tuple2 b1 b1 (t2tb14 a2) (t2tb14 x))
  (t2tb35 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 b a))) (w (set b)) (x a))
  (= (mem1 x (tb2t1 (image a1 b1 (t2tb37 p) (t2tb12 w))))
  (exists ((a2 b))
  (and (mem2 a2 w) (mem (tuple2 b1 a1) (Tuple2 b1 a1 (t2tb14 a2) (t2tb2 x))
  (t2tb37 p)))))))

;; mem_image
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (w (set b)) (x uni))
  (= (mem b2 x (image b2 b1 p (t2tb12 w)))
  (exists ((a2 b))
  (and (mem2 a2 w) (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 a2) x) p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 a (tuple21 c b)))) (w (set a)) (x (tuple21 c b)))
  (= (mem28 x (tb2t222 (image (tuple2 c1 b1) a1 (t2tb332 p) (t2tb1 w))))
  (exists ((a2 a))
  (and (mem1 a2 w) (mem (tuple2 a1 (tuple2 c1 b1))
  (Tuple2 a1 (tuple2 c1 b1) (t2tb2 a2) (t2tb223 x)) (t2tb332 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 a (tuple21 c a)))) (w (set a)) (x (tuple21 c a)))
  (= (mem27 x (tb2t224 (image (tuple2 c1 a1) a1 (t2tb2882 p) (t2tb1 w))))
  (exists ((a2 a))
  (and (mem1 a2 w) (mem (tuple2 a1 (tuple2 c1 a1))
  (Tuple2 a1 (tuple2 c1 a1) (t2tb2 a2) (t2tb225 x)) (t2tb2882 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 a c))) (w (set a)) (x c))
  (= (mem7 x (tb2t132 (image c1 a1 (t2tb129 p) (t2tb1 w))))
  (exists ((a2 a))
  (and (mem1 a2 w) (mem (tuple2 a1 c1) (Tuple2 a1 c1 (t2tb2 a2) (t2tb135 x))
  (t2tb129 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 a (set (tuple21 a b))))) (w (set a))
  (x (set (tuple21 a b))))
  (= (mem4 x (tb2t10 (image (set1 (tuple2 a1 b1)) a1 (t2tb39 p) (t2tb1 w))))
  (exists ((a2 a))
  (and (mem1 a2 w) (mem (tuple2 a1 (set1 (tuple2 a1 b1)))
  (Tuple2 a1 (set1 (tuple2 a1 b1)) (t2tb2 a2) (t2tb11 x)) (t2tb39 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 a (tuple21 a b)))) (w (set a)) (x (tuple21 a b)))
  (= (mem3 x (tb2t11 (image (tuple2 a1 b1) a1 (t2tb41 p) (t2tb1 w))))
  (exists ((a2 a))
  (and (mem1 a2 w) (mem (tuple2 a1 (tuple2 a1 b1))
  (Tuple2 a1 (tuple2 a1 b1) (t2tb2 a2) (t2tb13 x)) (t2tb41 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 a b))) (w (set a)) (x b))
  (= (mem2 x (image1 p w))
  (exists ((a2 a))
  (and (mem1 a2 w) (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 a2) (t2tb14 x))) p))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 a a))) (w (set a)) (x a))
  (= (mem1 x (tb2t1 (image a1 a1 (t2tb4 p) (t2tb1 w))))
  (exists ((a2 a))
  (and (mem1 a2 w) (mem (tuple2 a1 a1) (Tuple2 a1 a1 (t2tb2 a2) (t2tb2 x))
  (t2tb4 p)))))))

;; mem_image
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (w (set a)) (x uni))
  (= (mem b2 x (image b2 a1 p (t2tb1 w)))
  (exists ((a2 a))
  (and (mem1 a2 w) (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 a2) x) p)))))))

;; mem_image
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((p uni) (w uni) (x uni))
  (and
  (=> (mem b2 x (image b2 a2 p w))
  (exists ((a3 uni))
  (and (sort a2 a3)
  (and (mem a2 a3 w) (mem (tuple2 a2 b2) (Tuple2 a2 b2 a3 x) p)))))
  (=>
  (exists ((a3 uni))
  (and (mem a2 a3 w) (mem (tuple2 a2 b2) (Tuple2 a2 b2 a3 x) p))) (mem b2 x
  (image b2 a2 p w)))))))

(declare-fun infix_lspl (ty ty uni uni) uni)

;; infix <+_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (tuple2 a2 b2))
  (infix_lspl b2 a2 x x1)))))

;; mem_overriding
  (assert
  (forall ((b2 ty))
  (forall ((q uni) (p uni) (x (tuple21 c b)) (y uni))
  (= (mem (tuple2 (tuple2 c1 b1) b2) (Tuple2 (tuple2 c1 b1) b2 (t2tb223 x) y)
  (infix_lspl b2 (tuple2 c1 b1) q p))
  (or
  (and (mem (tuple2 (tuple2 c1 b1) b2)
  (Tuple2 (tuple2 c1 b1) b2 (t2tb223 x) y) q)
  (not (mem28 x (tb2t222 (dom b2 (tuple2 c1 b1) p))))) (mem
  (tuple2 (tuple2 c1 b1) b2) (Tuple2 (tuple2 c1 b1) b2 (t2tb223 x) y) p))))))

;; mem_overriding
  (assert
  (forall ((b2 ty))
  (forall ((q uni) (p uni) (x (tuple21 c a)) (y uni))
  (= (mem (tuple2 (tuple2 c1 a1) b2) (Tuple2 (tuple2 c1 a1) b2 (t2tb225 x) y)
  (infix_lspl b2 (tuple2 c1 a1) q p))
  (or
  (and (mem (tuple2 (tuple2 c1 a1) b2)
  (Tuple2 (tuple2 c1 a1) b2 (t2tb225 x) y) q)
  (not (mem27 x (tb2t224 (dom b2 (tuple2 c1 a1) p))))) (mem
  (tuple2 (tuple2 c1 a1) b2) (Tuple2 (tuple2 c1 a1) b2 (t2tb225 x) y) p))))))

;; mem_overriding
  (assert
  (forall ((q (set (tuple21 c b))) (p (set (tuple21 c b))) (x c) (y b))
  (= (mem28 (tb2t223 (Tuple2 c1 b1 (t2tb135 x) (t2tb14 y)))
  (tb2t222 (infix_lspl b1 c1 (t2tb222 q) (t2tb222 p))))
  (or
  (and (mem28 (tb2t223 (Tuple2 c1 b1 (t2tb135 x) (t2tb14 y))) q)
  (not (mem7 x (tb2t132 (dom b1 c1 (t2tb222 p)))))) (mem28
  (tb2t223 (Tuple2 c1 b1 (t2tb135 x) (t2tb14 y))) p)))))

;; mem_overriding
  (assert
  (forall ((q (set (tuple21 c a))) (p (set (tuple21 c a))) (x c) (y a))
  (= (mem27 (tb2t225 (Tuple2 c1 a1 (t2tb135 x) (t2tb2 y)))
  (tb2t224 (infix_lspl a1 c1 (t2tb224 q) (t2tb224 p))))
  (or
  (and (mem27 (tb2t225 (Tuple2 c1 a1 (t2tb135 x) (t2tb2 y))) q)
  (not (mem7 x (tb2t132 (dom a1 c1 (t2tb224 p)))))) (mem27
  (tb2t225 (Tuple2 c1 a1 (t2tb135 x) (t2tb2 y))) p)))))

;; mem_overriding
  (assert
  (forall ((b2 ty))
  (forall ((q uni) (p uni) (x c) (y uni))
  (= (mem (tuple2 c1 b2) (Tuple2 c1 b2 (t2tb135 x) y) (infix_lspl b2 c1 q p))
  (or
  (and (mem (tuple2 c1 b2) (Tuple2 c1 b2 (t2tb135 x) y) q)
  (not (mem7 x (tb2t132 (dom b2 c1 p))))) (mem (tuple2 c1 b2)
  (Tuple2 c1 b2 (t2tb135 x) y) p))))))

;; mem_overriding
  (assert
  (forall ((b2 ty))
  (forall ((q uni) (p uni) (x (set (tuple21 a b))) (y uni))
  (= (mem (tuple2 (set1 (tuple2 a1 b1)) b2)
  (Tuple2 (set1 (tuple2 a1 b1)) b2 (t2tb11 x) y)
  (infix_lspl b2 (set1 (tuple2 a1 b1)) q p))
  (or
  (and (mem (tuple2 (set1 (tuple2 a1 b1)) b2)
  (Tuple2 (set1 (tuple2 a1 b1)) b2 (t2tb11 x) y) q)
  (not (mem4 x (tb2t10 (dom b2 (set1 (tuple2 a1 b1)) p))))) (mem
  (tuple2 (set1 (tuple2 a1 b1)) b2)
  (Tuple2 (set1 (tuple2 a1 b1)) b2 (t2tb11 x) y) p))))))

;; mem_overriding
  (assert
  (forall ((b2 ty))
  (forall ((q uni) (p uni) (x (tuple21 a b)) (y uni))
  (= (mem (tuple2 (tuple2 a1 b1) b2) (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) y)
  (infix_lspl b2 (tuple2 a1 b1) q p))
  (or
  (and (mem (tuple2 (tuple2 a1 b1) b2)
  (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) y) q)
  (not (mem3 x (tb2t11 (dom b2 (tuple2 a1 b1) p))))) (mem
  (tuple2 (tuple2 a1 b1) b2) (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) y) p))))))

;; mem_overriding
  (assert
  (forall ((b2 ty))
  (forall ((q uni) (p uni) (x b) (y uni))
  (= (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) y) (infix_lspl b2 b1 q p))
  (or
  (and (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) y) q)
  (not (mem2 x (tb2t12 (dom b2 b1 p))))) (mem (tuple2 b1 b2)
  (Tuple2 b1 b2 (t2tb14 x) y) p))))))

;; mem_overriding
  (assert
  (forall ((q (set (tuple21 a b))) (p (set (tuple21 a b))) (x a) (y b))
  (= (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y)))
  (tb2t11 (infix_lspl b1 a1 (t2tb11 q) (t2tb11 p))))
  (or
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y))) q)
  (not (mem1 x (tb2t1 (dom b1 a1 (t2tb11 p)))))) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y))) p)))))

;; mem_overriding
  (assert
  (forall ((b2 ty))
  (forall ((q uni) (p uni) (x a) (y uni))
  (= (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) y) (infix_lspl b2 a1 q p))
  (or
  (and (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) y) q)
  (not (mem1 x (tb2t1 (dom b2 a1 p))))) (mem (tuple2 a1 b2)
  (Tuple2 a1 b2 (t2tb2 x) y) p))))))

;; mem_overriding
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((q uni) (p uni) (x uni) (y uni))
  (= (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) (infix_lspl b2 a2 q p))
  (or
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) q)
  (not (mem a2 x (dom b2 a2 p)))) (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) p))))))

(declare-fun direct_product (ty ty ty uni uni) uni)

;; direct_product_sort
  (assert
  (forall ((a2 ty) (b2 ty) (c2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (tuple2 a2 (tuple2 b2 c2)))
  (direct_product c2 b2 a2 x x1)))))

;; mem_direct_product
  (assert
  (forall ((b2 ty))
  (forall ((f uni) (g (set (tuple21 c b))) (x c) (y uni) (z b))
  (= (mem (tuple2 c1 (tuple2 b2 b1))
  (Tuple2 c1 (tuple2 b2 b1) (t2tb135 x) (Tuple2 b2 b1 y (t2tb14 z)))
  (direct_product b1 b2 c1 f (t2tb222 g)))
  (and (mem (tuple2 c1 b2) (Tuple2 c1 b2 (t2tb135 x) y) f) (mem28
  (tb2t223 (Tuple2 c1 b1 (t2tb135 x) (t2tb14 z))) g))))))

;; mem_direct_product
  (assert
  (forall ((b2 ty))
  (forall ((f uni) (g (set (tuple21 c a))) (x c) (y uni) (z a))
  (= (mem (tuple2 c1 (tuple2 b2 a1))
  (Tuple2 c1 (tuple2 b2 a1) (t2tb135 x) (Tuple2 b2 a1 y (t2tb2 z)))
  (direct_product a1 b2 c1 f (t2tb224 g)))
  (and (mem (tuple2 c1 b2) (Tuple2 c1 b2 (t2tb135 x) y) f) (mem27
  (tb2t225 (Tuple2 c1 a1 (t2tb135 x) (t2tb2 z))) g))))))

(declare-fun t2tb2852 ((set (tuple21 c (tuple21 b b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 c (tuple21 b b))))) (sort
  (set1 (tuple2 c1 (tuple2 b1 b1))) (t2tb2852 x))))

(declare-fun tb2t2852 (uni) (set (tuple21 c (tuple21 b b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 c (tuple21 b b)))))
  (! (= (tb2t2852 (t2tb2852 i)) i) :pattern ((t2tb2852 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 c1 (tuple2 b1 b1))) j)
     (= (t2tb2852 (tb2t2852 j)) j)) :pattern ((t2tb2852 (tb2t2852 j))) )))

(declare-fun t2tb2853 ((tuple21 c (tuple21 b b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 c (tuple21 b b)))) (sort (tuple2 c1 (tuple2 b1 b1))
  (t2tb2853 x))))

(declare-fun tb2t2853 (uni) (tuple21 c (tuple21 b b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 c (tuple21 b b))))
  (! (= (tb2t2853 (t2tb2853 i)) i) :pattern ((t2tb2853 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 c1 (tuple2 b1 b1)) j) (= (t2tb2853 (tb2t2853 j)) j)) :pattern (
  (t2tb2853 (tb2t2853 j))) )))

;; mem_direct_product
  (assert
  (forall ((f (set (tuple21 c b))) (g (set (tuple21 c b))) (x c) (y b) (z b))
  (= (mem (tuple2 c1 (tuple2 b1 b1))
  (Tuple2 c1 (tuple2 b1 b1) (t2tb135 x) (Tuple2 b1 b1 (t2tb14 y) (t2tb14 z)))
  (direct_product b1 b1 c1 (t2tb222 f) (t2tb222 g)))
  (and (mem28 (tb2t223 (Tuple2 c1 b1 (t2tb135 x) (t2tb14 y))) f) (mem28
  (tb2t223 (Tuple2 c1 b1 (t2tb135 x) (t2tb14 z))) g)))))

(declare-fun t2tb2389 ((set (tuple21 c (tuple21 b a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 c (tuple21 b a))))) (sort
  (set1 (tuple2 c1 (tuple2 b1 a1))) (t2tb2389 x))))

(declare-fun tb2t2389 (uni) (set (tuple21 c (tuple21 b a))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 c (tuple21 b a)))))
  (! (= (tb2t2389 (t2tb2389 i)) i) :pattern ((t2tb2389 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 c1 (tuple2 b1 a1))) j)
     (= (t2tb2389 (tb2t2389 j)) j)) :pattern ((t2tb2389 (tb2t2389 j))) )))

(declare-fun t2tb2390 ((tuple21 c (tuple21 b a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 c (tuple21 b a)))) (sort (tuple2 c1 (tuple2 b1 a1))
  (t2tb2390 x))))

(declare-fun tb2t2390 (uni) (tuple21 c (tuple21 b a)))

;; BridgeL
  (assert
  (forall ((i (tuple21 c (tuple21 b a))))
  (! (= (tb2t2390 (t2tb2390 i)) i) :pattern ((t2tb2390 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 c1 (tuple2 b1 a1)) j) (= (t2tb2390 (tb2t2390 j)) j)) :pattern (
  (t2tb2390 (tb2t2390 j))) )))

;; mem_direct_product
  (assert
  (forall ((f (set (tuple21 c b))) (g (set (tuple21 c a))) (x c) (y b) (z a))
  (= (mem (tuple2 c1 (tuple2 b1 a1))
  (Tuple2 c1 (tuple2 b1 a1) (t2tb135 x) (Tuple2 b1 a1 (t2tb14 y) (t2tb2 z)))
  (direct_product a1 b1 c1 (t2tb222 f) (t2tb224 g)))
  (and (mem28 (tb2t223 (Tuple2 c1 b1 (t2tb135 x) (t2tb14 y))) f) (mem27
  (tb2t225 (Tuple2 c1 a1 (t2tb135 x) (t2tb2 z))) g)))))

;; mem_direct_product
  (assert
  (forall ((c2 ty))
  (forall ((f (set (tuple21 c b))) (g uni) (x c) (y b) (z uni))
  (= (mem (tuple2 c1 (tuple2 b1 c2))
  (Tuple2 c1 (tuple2 b1 c2) (t2tb135 x) (Tuple2 b1 c2 (t2tb14 y) z))
  (direct_product c2 b1 c1 (t2tb222 f) g))
  (and (mem28 (tb2t223 (Tuple2 c1 b1 (t2tb135 x) (t2tb14 y))) f) (mem
  (tuple2 c1 c2) (Tuple2 c1 c2 (t2tb135 x) z) g))))))

;; mem_direct_product
  (assert
  (forall ((f (set (tuple21 c a))) (g (set (tuple21 c b))) (x c) (y a) (z b))
  (= (mem (tuple2 c1 (tuple2 a1 b1))
  (Tuple2 c1 (tuple2 a1 b1) (t2tb135 x) (Tuple2 a1 b1 (t2tb2 y) (t2tb14 z)))
  (direct_product b1 a1 c1 (t2tb224 f) (t2tb222 g)))
  (and (mem27 (tb2t225 (Tuple2 c1 a1 (t2tb135 x) (t2tb2 y))) f) (mem28
  (tb2t223 (Tuple2 c1 b1 (t2tb135 x) (t2tb14 z))) g)))))

(declare-fun t2tb2897 ((set (tuple21 c (tuple21 a a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 c (tuple21 a a))))) (sort
  (set1 (tuple2 c1 (tuple2 a1 a1))) (t2tb2897 x))))

(declare-fun tb2t2897 (uni) (set (tuple21 c (tuple21 a a))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 c (tuple21 a a)))))
  (! (= (tb2t2897 (t2tb2897 i)) i) :pattern ((t2tb2897 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 c1 (tuple2 a1 a1))) j)
     (= (t2tb2897 (tb2t2897 j)) j)) :pattern ((t2tb2897 (tb2t2897 j))) )))

(declare-fun t2tb2898 ((tuple21 c (tuple21 a a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 c (tuple21 a a)))) (sort (tuple2 c1 (tuple2 a1 a1))
  (t2tb2898 x))))

(declare-fun tb2t2898 (uni) (tuple21 c (tuple21 a a)))

;; BridgeL
  (assert
  (forall ((i (tuple21 c (tuple21 a a))))
  (! (= (tb2t2898 (t2tb2898 i)) i) :pattern ((t2tb2898 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 c1 (tuple2 a1 a1)) j) (= (t2tb2898 (tb2t2898 j)) j)) :pattern (
  (t2tb2898 (tb2t2898 j))) )))

;; mem_direct_product
  (assert
  (forall ((f (set (tuple21 c a))) (g (set (tuple21 c a))) (x c) (y a) (z a))
  (= (mem (tuple2 c1 (tuple2 a1 a1))
  (Tuple2 c1 (tuple2 a1 a1) (t2tb135 x) (Tuple2 a1 a1 (t2tb2 y) (t2tb2 z)))
  (direct_product a1 a1 c1 (t2tb224 f) (t2tb224 g)))
  (and (mem27 (tb2t225 (Tuple2 c1 a1 (t2tb135 x) (t2tb2 y))) f) (mem27
  (tb2t225 (Tuple2 c1 a1 (t2tb135 x) (t2tb2 z))) g)))))

;; mem_direct_product
  (assert
  (forall ((c2 ty))
  (forall ((f (set (tuple21 c a))) (g uni) (x c) (y a) (z uni))
  (= (mem (tuple2 c1 (tuple2 a1 c2))
  (Tuple2 c1 (tuple2 a1 c2) (t2tb135 x) (Tuple2 a1 c2 (t2tb2 y) z))
  (direct_product c2 a1 c1 (t2tb224 f) g))
  (and (mem27 (tb2t225 (Tuple2 c1 a1 (t2tb135 x) (t2tb2 y))) f) (mem
  (tuple2 c1 c2) (Tuple2 c1 c2 (t2tb135 x) z) g))))))

;; mem_direct_product
  (assert
  (forall ((b2 ty))
  (forall ((f uni) (g (set (tuple21 a b))) (x a) (y uni) (z b))
  (= (mem (tuple2 a1 (tuple2 b2 b1))
  (Tuple2 a1 (tuple2 b2 b1) (t2tb2 x) (Tuple2 b2 b1 y (t2tb14 z)))
  (direct_product b1 b2 a1 f (t2tb11 g)))
  (and (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) y) f) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 z))) g))))))

(declare-fun t2tb59 ((set (tuple21 a (tuple21 b b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (tuple21 b b))))) (sort
  (set1 (tuple2 a1 (tuple2 b1 b1))) (t2tb59 x))))

(declare-fun tb2t59 (uni) (set (tuple21 a (tuple21 b b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (tuple21 b b)))))
  (! (= (tb2t59 (t2tb59 i)) i) :pattern ((t2tb59 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (tuple2 b1 b1))) j)
     (= (t2tb59 (tb2t59 j)) j)) :pattern ((t2tb59 (tb2t59 j))) )))

(declare-fun t2tb60 ((tuple21 a (tuple21 b b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (tuple21 b b)))) (sort (tuple2 a1 (tuple2 b1 b1))
  (t2tb60 x))))

(declare-fun tb2t60 (uni) (tuple21 a (tuple21 b b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (tuple21 b b))))
  (! (= (tb2t60 (t2tb60 i)) i) :pattern ((t2tb60 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (tuple2 b1 b1)) j) (= (t2tb60 (tb2t60 j)) j)) :pattern (
  (t2tb60 (tb2t60 j))) )))

;; mem_direct_product
  (assert
  (forall ((f (set (tuple21 a b))) (g (set (tuple21 a b))) (x a) (y b) (z b))
  (= (mem (tuple2 a1 (tuple2 b1 b1))
  (Tuple2 a1 (tuple2 b1 b1) (t2tb2 x) (Tuple2 b1 b1 (t2tb14 y) (t2tb14 z)))
  (direct_product b1 b1 a1 (t2tb11 f) (t2tb11 g)))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y))) f) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 z))) g)))))

;; mem_direct_product
  (assert
  (forall ((c2 ty))
  (forall ((f (set (tuple21 a b))) (g uni) (x a) (y b) (z uni))
  (= (mem (tuple2 a1 (tuple2 b1 c2))
  (Tuple2 a1 (tuple2 b1 c2) (t2tb2 x) (Tuple2 b1 c2 (t2tb14 y) z))
  (direct_product c2 b1 a1 (t2tb11 f) g))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y))) f) (mem
  (tuple2 a1 c2) (Tuple2 a1 c2 (t2tb2 x) z) g))))))

;; mem_direct_product
  (assert
  (forall ((a2 ty) (b2 ty) (c2 ty))
  (forall ((f uni) (g uni) (x uni) (y uni) (z uni))
  (= (mem (tuple2 a2 (tuple2 b2 c2))
  (Tuple2 a2 (tuple2 b2 c2) x (Tuple2 b2 c2 y z))
  (direct_product c2 b2 a2 f g))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) f) (mem (tuple2 a2 c2)
  (Tuple2 a2 c2 x z) g))))))

(declare-fun prj1 (ty ty uni) uni)

;; prj1_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni)) (sort (set1 (tuple2 (tuple2 a2 b2) a2)) (prj1 b2 a2 x)))))

(declare-fun t2tb2899 ((tuple21 (set c) (set b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set c) (set b)))) (sort (tuple2 (set1 c1) (set1 b1))
  (t2tb2899 x))))

(declare-fun tb2t2899 (uni) (tuple21 (set c) (set b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set c) (set b))))
  (! (= (tb2t2899 (t2tb2899 i)) i) :pattern ((t2tb2899 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 c1) (set1 b1)) j) (= (t2tb2899 (tb2t2899 j)) j)) :pattern (
  (t2tb2899 (tb2t2899 j))) )))

;; mem_proj_op_1
  (assert
  (forall ((s (set c)) (t (set b)) (x c) (y b) (z c))
  (= (mem (tuple2 (tuple2 c1 b1) c1)
  (Tuple2 (tuple2 c1 b1) c1 (Tuple2 c1 b1 (t2tb135 x) (t2tb14 y))
  (t2tb135 z))
  (prj1 b1 c1 (Tuple2 (set1 c1) (set1 b1) (t2tb132 s) (t2tb12 t))))
  (and (mem (tuple2 (tuple2 c1 b1) c1)
  (Tuple2 (tuple2 c1 b1) c1 (Tuple2 c1 b1 (t2tb135 x) (t2tb14 y))
  (t2tb135 z)) (times c1 (tuple2 c1 b1) (t2tb222 (times13 s t)) (t2tb132 s)))
  (= z x)))))

(declare-fun t2tb2900 ((tuple21 (set c) (set a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set c) (set a)))) (sort (tuple2 (set1 c1) (set1 a1))
  (t2tb2900 x))))

(declare-fun tb2t2900 (uni) (tuple21 (set c) (set a)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set c) (set a))))
  (! (= (tb2t2900 (t2tb2900 i)) i) :pattern ((t2tb2900 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 c1) (set1 a1)) j) (= (t2tb2900 (tb2t2900 j)) j)) :pattern (
  (t2tb2900 (tb2t2900 j))) )))

;; mem_proj_op_1
  (assert
  (forall ((s (set c)) (t (set a)) (x c) (y a) (z c))
  (= (mem (tuple2 (tuple2 c1 a1) c1)
  (Tuple2 (tuple2 c1 a1) c1 (Tuple2 c1 a1 (t2tb135 x) (t2tb2 y)) (t2tb135 z))
  (prj1 a1 c1 (Tuple2 (set1 c1) (set1 a1) (t2tb132 s) (t2tb1 t))))
  (and (mem (tuple2 (tuple2 c1 a1) c1)
  (Tuple2 (tuple2 c1 a1) c1 (Tuple2 c1 a1 (t2tb135 x) (t2tb2 y)) (t2tb135 z))
  (times c1 (tuple2 c1 a1) (t2tb224 (times12 s t)) (t2tb132 s))) (= z x)))))

(declare-fun t2tb495 ((tuple21 (set a) (set b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set a) (set b)))) (sort (tuple2 (set1 a1) (set1 b1))
  (t2tb495 x))))

(declare-fun tb2t495 (uni) (tuple21 (set a) (set b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set a) (set b))))
  (! (= (tb2t495 (t2tb495 i)) i) :pattern ((t2tb495 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 a1) (set1 b1)) j) (= (t2tb495 (tb2t495 j)) j)) :pattern (
  (t2tb495 (tb2t495 j))) )))

;; mem_proj_op_1
  (assert
  (forall ((s (set a)) (t (set b)) (x a) (y b) (z a))
  (= (mem (tuple2 (tuple2 a1 b1) a1)
  (Tuple2 (tuple2 a1 b1) a1 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y)) (t2tb2 z))
  (prj1 b1 a1 (Tuple2 (set1 a1) (set1 b1) (t2tb1 s) (t2tb12 t))))
  (and (mem (tuple2 (tuple2 a1 b1) a1)
  (Tuple2 (tuple2 a1 b1) a1 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y)) (t2tb2 z))
  (times a1 (tuple2 a1 b1) (t2tb11 (times2 s t)) (t2tb1 s))) (= z x)))))

;; mem_proj_op_1
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (x uni) (y uni) (z uni))
  (=> (sort a2 x)
  (=> (sort a2 z)
  (= (mem (tuple2 (tuple2 a2 b2) a2)
  (Tuple2 (tuple2 a2 b2) a2 (Tuple2 a2 b2 x y) z)
  (prj1 b2 a2 (Tuple2 (set1 a2) (set1 b2) s t)))
  (and (mem (tuple2 (tuple2 a2 b2) a2)
  (Tuple2 (tuple2 a2 b2) a2 (Tuple2 a2 b2 x y) z)
  (times a2 (tuple2 a2 b2) (times b2 a2 s t) s)) (= z x))))))))

(declare-fun prj2 (ty ty uni) uni)

;; prj2_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni)) (sort (set1 (tuple2 (tuple2 a2 b2) b2)) (prj2 b2 a2 x)))))

;; mem_proj_op_2
  (assert
  (forall ((s (set c)) (t (set b)) (x c) (y b) (z b))
  (= (mem (tuple2 (tuple2 c1 b1) b1)
  (Tuple2 (tuple2 c1 b1) b1 (Tuple2 c1 b1 (t2tb135 x) (t2tb14 y)) (t2tb14 z))
  (prj2 b1 c1 (Tuple2 (set1 c1) (set1 b1) (t2tb132 s) (t2tb12 t))))
  (and (mem (tuple2 (tuple2 c1 b1) b1)
  (Tuple2 (tuple2 c1 b1) b1 (Tuple2 c1 b1 (t2tb135 x) (t2tb14 y)) (t2tb14 z))
  (times b1 (tuple2 c1 b1) (t2tb222 (times13 s t)) (t2tb12 t))) (= z y)))))

;; mem_proj_op_2
  (assert
  (forall ((s (set c)) (t (set a)) (x c) (y a) (z a))
  (= (mem (tuple2 (tuple2 c1 a1) a1)
  (Tuple2 (tuple2 c1 a1) a1 (Tuple2 c1 a1 (t2tb135 x) (t2tb2 y)) (t2tb2 z))
  (prj2 a1 c1 (Tuple2 (set1 c1) (set1 a1) (t2tb132 s) (t2tb1 t))))
  (and (mem (tuple2 (tuple2 c1 a1) a1)
  (Tuple2 (tuple2 c1 a1) a1 (Tuple2 c1 a1 (t2tb135 x) (t2tb2 y)) (t2tb2 z))
  (times a1 (tuple2 c1 a1) (t2tb224 (times12 s t)) (t2tb1 t))) (= z y)))))

;; mem_proj_op_2
  (assert
  (forall ((s (set a)) (t (set b)) (x a) (y b) (z b))
  (= (mem (tuple2 (tuple2 a1 b1) b1)
  (Tuple2 (tuple2 a1 b1) b1 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y)) (t2tb14 z))
  (prj2 b1 a1 (Tuple2 (set1 a1) (set1 b1) (t2tb1 s) (t2tb12 t))))
  (and (mem (tuple2 (tuple2 a1 b1) b1)
  (Tuple2 (tuple2 a1 b1) b1 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y)) (t2tb14 z))
  (times b1 (tuple2 a1 b1) (t2tb11 (times2 s t)) (t2tb12 t))) (= z y)))))

;; mem_proj_op_2
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (x uni) (y uni) (z uni))
  (=> (sort b2 y)
  (=> (sort b2 z)
  (= (mem (tuple2 (tuple2 a2 b2) b2)
  (Tuple2 (tuple2 a2 b2) b2 (Tuple2 a2 b2 x y) z)
  (prj2 b2 a2 (Tuple2 (set1 a2) (set1 b2) s t)))
  (and (mem (tuple2 (tuple2 a2 b2) b2)
  (Tuple2 (tuple2 a2 b2) b2 (Tuple2 a2 b2 x y) z)
  (times b2 (tuple2 a2 b2) (times b2 a2 s t) t)) (= z y))))))))

(declare-fun parallel_product (ty ty ty ty uni uni) uni)

;; parallel_product_sort
  (assert
  (forall ((a2 ty) (b2 ty) (c2 ty) (d2 ty))
  (forall ((x uni) (x1 uni)) (sort
  (set1 (tuple2 (tuple2 a2 c2) (tuple2 b2 d2)))
  (parallel_product d2 c2 b2 a2 x x1)))))

;; mem_parallel_product
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((h uni) (k (set (tuple21 c b))) (x uni) (y c) (z uni) (w b))
  (= (mem (tuple2 (tuple2 a2 c1) (tuple2 b2 b1))
  (Tuple2 (tuple2 a2 c1) (tuple2 b2 b1) (Tuple2 a2 c1 x (t2tb135 y))
  (Tuple2 b2 b1 z (t2tb14 w))) (parallel_product b1 c1 b2 a2 h (t2tb222 k)))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x z) h) (mem28
  (tb2t223 (Tuple2 c1 b1 (t2tb135 y) (t2tb14 w))) k))))))

;; mem_parallel_product
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((h uni) (k (set (tuple21 c a))) (x uni) (y c) (z uni) (w a))
  (= (mem (tuple2 (tuple2 a2 c1) (tuple2 b2 a1))
  (Tuple2 (tuple2 a2 c1) (tuple2 b2 a1) (Tuple2 a2 c1 x (t2tb135 y))
  (Tuple2 b2 a1 z (t2tb2 w))) (parallel_product a1 c1 b2 a2 h (t2tb224 k)))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x z) h) (mem27
  (tb2t225 (Tuple2 c1 a1 (t2tb135 y) (t2tb2 w))) k))))))

;; mem_parallel_product
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((h uni) (k (set (tuple21 a b))) (x uni) (y a) (z uni) (w b))
  (= (mem (tuple2 (tuple2 a2 a1) (tuple2 b2 b1))
  (Tuple2 (tuple2 a2 a1) (tuple2 b2 b1) (Tuple2 a2 a1 x (t2tb2 y))
  (Tuple2 b2 b1 z (t2tb14 w))) (parallel_product b1 a1 b2 a2 h (t2tb11 k)))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x z) h) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 y) (t2tb14 w))) k))))))

(declare-fun t2tb2854 ((set (tuple21 (tuple21 c c) (tuple21 b b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 c c) (tuple21 b b))))) (sort
  (set1 (tuple2 (tuple2 c1 c1) (tuple2 b1 b1))) (t2tb2854 x))))

(declare-fun tb2t2854 (uni) (set (tuple21 (tuple21 c c) (tuple21 b b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 c c) (tuple21 b b)))))
  (! (= (tb2t2854 (t2tb2854 i)) i) :pattern ((t2tb2854 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 c1 c1) (tuple2 b1 b1))) j)
     (= (t2tb2854 (tb2t2854 j)) j)) :pattern ((t2tb2854 (tb2t2854 j))) )))

(declare-fun t2tb2855 ((tuple21 (tuple21 c c) (tuple21 b b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 c c) (tuple21 b b)))) (sort
  (tuple2 (tuple2 c1 c1) (tuple2 b1 b1)) (t2tb2855 x))))

(declare-fun tb2t2855 (uni) (tuple21 (tuple21 c c) (tuple21 b b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 c c) (tuple21 b b))))
  (! (= (tb2t2855 (t2tb2855 i)) i) :pattern ((t2tb2855 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 c1 c1) (tuple2 b1 b1)) j)
     (= (t2tb2855 (tb2t2855 j)) j)) :pattern ((t2tb2855 (tb2t2855 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 c b))) (k (set (tuple21 c b))) (x c) (y c) (z b)
  (w b))
  (= (mem (tuple2 (tuple2 c1 c1) (tuple2 b1 b1))
  (Tuple2 (tuple2 c1 c1) (tuple2 b1 b1)
  (Tuple2 c1 c1 (t2tb135 x) (t2tb135 y))
  (Tuple2 b1 b1 (t2tb14 z) (t2tb14 w)))
  (parallel_product b1 c1 b1 c1 (t2tb222 h) (t2tb222 k)))
  (and (mem28 (tb2t223 (Tuple2 c1 b1 (t2tb135 x) (t2tb14 z))) h) (mem28
  (tb2t223 (Tuple2 c1 b1 (t2tb135 y) (t2tb14 w))) k)))))

(declare-fun t2tb2901 ((set (tuple21 (tuple21 c c) (tuple21 b a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 c c) (tuple21 b a))))) (sort
  (set1 (tuple2 (tuple2 c1 c1) (tuple2 b1 a1))) (t2tb2901 x))))

(declare-fun tb2t2901 (uni) (set (tuple21 (tuple21 c c) (tuple21 b a))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 c c) (tuple21 b a)))))
  (! (= (tb2t2901 (t2tb2901 i)) i) :pattern ((t2tb2901 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 c1 c1) (tuple2 b1 a1))) j)
     (= (t2tb2901 (tb2t2901 j)) j)) :pattern ((t2tb2901 (tb2t2901 j))) )))

(declare-fun t2tb2902 ((tuple21 (tuple21 c c) (tuple21 b a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 c c) (tuple21 b a)))) (sort
  (tuple2 (tuple2 c1 c1) (tuple2 b1 a1)) (t2tb2902 x))))

(declare-fun tb2t2902 (uni) (tuple21 (tuple21 c c) (tuple21 b a)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 c c) (tuple21 b a))))
  (! (= (tb2t2902 (t2tb2902 i)) i) :pattern ((t2tb2902 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 c1 c1) (tuple2 b1 a1)) j)
     (= (t2tb2902 (tb2t2902 j)) j)) :pattern ((t2tb2902 (tb2t2902 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 c b))) (k (set (tuple21 c a))) (x c) (y c) (z b)
  (w a))
  (= (mem (tuple2 (tuple2 c1 c1) (tuple2 b1 a1))
  (Tuple2 (tuple2 c1 c1) (tuple2 b1 a1)
  (Tuple2 c1 c1 (t2tb135 x) (t2tb135 y)) (Tuple2 b1 a1 (t2tb14 z) (t2tb2 w)))
  (parallel_product a1 c1 b1 c1 (t2tb222 h) (t2tb224 k)))
  (and (mem28 (tb2t223 (Tuple2 c1 b1 (t2tb135 x) (t2tb14 z))) h) (mem27
  (tb2t225 (Tuple2 c1 a1 (t2tb135 y) (t2tb2 w))) k)))))

(declare-fun t2tb2858 ((set (tuple21 (tuple21 c a) (tuple21 b b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 c a) (tuple21 b b))))) (sort
  (set1 (tuple2 (tuple2 c1 a1) (tuple2 b1 b1))) (t2tb2858 x))))

(declare-fun tb2t2858 (uni) (set (tuple21 (tuple21 c a) (tuple21 b b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 c a) (tuple21 b b)))))
  (! (= (tb2t2858 (t2tb2858 i)) i) :pattern ((t2tb2858 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 c1 a1) (tuple2 b1 b1))) j)
     (= (t2tb2858 (tb2t2858 j)) j)) :pattern ((t2tb2858 (tb2t2858 j))) )))

(declare-fun t2tb2859 ((tuple21 (tuple21 c a) (tuple21 b b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 c a) (tuple21 b b)))) (sort
  (tuple2 (tuple2 c1 a1) (tuple2 b1 b1)) (t2tb2859 x))))

(declare-fun tb2t2859 (uni) (tuple21 (tuple21 c a) (tuple21 b b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 c a) (tuple21 b b))))
  (! (= (tb2t2859 (t2tb2859 i)) i) :pattern ((t2tb2859 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 c1 a1) (tuple2 b1 b1)) j)
     (= (t2tb2859 (tb2t2859 j)) j)) :pattern ((t2tb2859 (tb2t2859 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 c b))) (k (set (tuple21 a b))) (x c) (y a) (z b)
  (w b))
  (= (mem (tuple2 (tuple2 c1 a1) (tuple2 b1 b1))
  (Tuple2 (tuple2 c1 a1) (tuple2 b1 b1) (Tuple2 c1 a1 (t2tb135 x) (t2tb2 y))
  (Tuple2 b1 b1 (t2tb14 z) (t2tb14 w)))
  (parallel_product b1 a1 b1 c1 (t2tb222 h) (t2tb11 k)))
  (and (mem28 (tb2t223 (Tuple2 c1 b1 (t2tb135 x) (t2tb14 z))) h) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 y) (t2tb14 w))) k)))))

;; mem_parallel_product
  (assert
  (forall ((c2 ty) (d2 ty))
  (forall ((h (set (tuple21 c b))) (k uni) (x c) (y uni) (z b) (w uni))
  (= (mem (tuple2 (tuple2 c1 c2) (tuple2 b1 d2))
  (Tuple2 (tuple2 c1 c2) (tuple2 b1 d2) (Tuple2 c1 c2 (t2tb135 x) y)
  (Tuple2 b1 d2 (t2tb14 z) w)) (parallel_product d2 c2 b1 c1 (t2tb222 h) k))
  (and (mem28 (tb2t223 (Tuple2 c1 b1 (t2tb135 x) (t2tb14 z))) h) (mem
  (tuple2 c2 d2) (Tuple2 c2 d2 y w) k))))))

(declare-fun t2tb2903 ((set (tuple21 (tuple21 c c) (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 c c) (tuple21 a b))))) (sort
  (set1 (tuple2 (tuple2 c1 c1) (tuple2 a1 b1))) (t2tb2903 x))))

(declare-fun tb2t2903 (uni) (set (tuple21 (tuple21 c c) (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 c c) (tuple21 a b)))))
  (! (= (tb2t2903 (t2tb2903 i)) i) :pattern ((t2tb2903 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 c1 c1) (tuple2 a1 b1))) j)
     (= (t2tb2903 (tb2t2903 j)) j)) :pattern ((t2tb2903 (tb2t2903 j))) )))

(declare-fun t2tb2904 ((tuple21 (tuple21 c c) (tuple21 a b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 c c) (tuple21 a b)))) (sort
  (tuple2 (tuple2 c1 c1) (tuple2 a1 b1)) (t2tb2904 x))))

(declare-fun tb2t2904 (uni) (tuple21 (tuple21 c c) (tuple21 a b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 c c) (tuple21 a b))))
  (! (= (tb2t2904 (t2tb2904 i)) i) :pattern ((t2tb2904 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 c1 c1) (tuple2 a1 b1)) j)
     (= (t2tb2904 (tb2t2904 j)) j)) :pattern ((t2tb2904 (tb2t2904 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 c a))) (k (set (tuple21 c b))) (x c) (y c) (z a)
  (w b))
  (= (mem (tuple2 (tuple2 c1 c1) (tuple2 a1 b1))
  (Tuple2 (tuple2 c1 c1) (tuple2 a1 b1)
  (Tuple2 c1 c1 (t2tb135 x) (t2tb135 y)) (Tuple2 a1 b1 (t2tb2 z) (t2tb14 w)))
  (parallel_product b1 c1 a1 c1 (t2tb224 h) (t2tb222 k)))
  (and (mem27 (tb2t225 (Tuple2 c1 a1 (t2tb135 x) (t2tb2 z))) h) (mem28
  (tb2t223 (Tuple2 c1 b1 (t2tb135 y) (t2tb14 w))) k)))))

(declare-fun t2tb2905 ((set (tuple21 (tuple21 c c) (tuple21 a a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 c c) (tuple21 a a))))) (sort
  (set1 (tuple2 (tuple2 c1 c1) (tuple2 a1 a1))) (t2tb2905 x))))

(declare-fun tb2t2905 (uni) (set (tuple21 (tuple21 c c) (tuple21 a a))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 c c) (tuple21 a a)))))
  (! (= (tb2t2905 (t2tb2905 i)) i) :pattern ((t2tb2905 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 c1 c1) (tuple2 a1 a1))) j)
     (= (t2tb2905 (tb2t2905 j)) j)) :pattern ((t2tb2905 (tb2t2905 j))) )))

(declare-fun t2tb2906 ((tuple21 (tuple21 c c) (tuple21 a a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 c c) (tuple21 a a)))) (sort
  (tuple2 (tuple2 c1 c1) (tuple2 a1 a1)) (t2tb2906 x))))

(declare-fun tb2t2906 (uni) (tuple21 (tuple21 c c) (tuple21 a a)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 c c) (tuple21 a a))))
  (! (= (tb2t2906 (t2tb2906 i)) i) :pattern ((t2tb2906 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 c1 c1) (tuple2 a1 a1)) j)
     (= (t2tb2906 (tb2t2906 j)) j)) :pattern ((t2tb2906 (tb2t2906 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 c a))) (k (set (tuple21 c a))) (x c) (y c) (z a)
  (w a))
  (= (mem (tuple2 (tuple2 c1 c1) (tuple2 a1 a1))
  (Tuple2 (tuple2 c1 c1) (tuple2 a1 a1)
  (Tuple2 c1 c1 (t2tb135 x) (t2tb135 y)) (Tuple2 a1 a1 (t2tb2 z) (t2tb2 w)))
  (parallel_product a1 c1 a1 c1 (t2tb224 h) (t2tb224 k)))
  (and (mem27 (tb2t225 (Tuple2 c1 a1 (t2tb135 x) (t2tb2 z))) h) (mem27
  (tb2t225 (Tuple2 c1 a1 (t2tb135 y) (t2tb2 w))) k)))))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 c a))) (k (set (tuple21 a b))) (x c) (y a) (z a)
  (w b))
  (= (mem (tuple2 (tuple2 c1 a1) (tuple2 a1 b1))
  (Tuple2 (tuple2 c1 a1) (tuple2 a1 b1) (Tuple2 c1 a1 (t2tb135 x) (t2tb2 y))
  (Tuple2 a1 b1 (t2tb2 z) (t2tb14 w)))
  (parallel_product b1 a1 a1 c1 (t2tb224 h) (t2tb11 k)))
  (and (mem27 (tb2t225 (Tuple2 c1 a1 (t2tb135 x) (t2tb2 z))) h) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 y) (t2tb14 w))) k)))))

;; mem_parallel_product
  (assert
  (forall ((c2 ty) (d2 ty))
  (forall ((h (set (tuple21 c a))) (k uni) (x c) (y uni) (z a) (w uni))
  (= (mem (tuple2 (tuple2 c1 c2) (tuple2 a1 d2))
  (Tuple2 (tuple2 c1 c2) (tuple2 a1 d2) (Tuple2 c1 c2 (t2tb135 x) y)
  (Tuple2 a1 d2 (t2tb2 z) w)) (parallel_product d2 c2 a1 c1 (t2tb224 h) k))
  (and (mem27 (tb2t225 (Tuple2 c1 a1 (t2tb135 x) (t2tb2 z))) h) (mem
  (tuple2 c2 d2) (Tuple2 c2 d2 y w) k))))))

(declare-fun t2tb2860 ((set (tuple21 (tuple21 a c) (tuple21 b b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a c) (tuple21 b b))))) (sort
  (set1 (tuple2 (tuple2 a1 c1) (tuple2 b1 b1))) (t2tb2860 x))))

(declare-fun tb2t2860 (uni) (set (tuple21 (tuple21 a c) (tuple21 b b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a c) (tuple21 b b)))))
  (! (= (tb2t2860 (t2tb2860 i)) i) :pattern ((t2tb2860 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 c1) (tuple2 b1 b1))) j)
     (= (t2tb2860 (tb2t2860 j)) j)) :pattern ((t2tb2860 (tb2t2860 j))) )))

(declare-fun t2tb2861 ((tuple21 (tuple21 a c) (tuple21 b b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a c) (tuple21 b b)))) (sort
  (tuple2 (tuple2 a1 c1) (tuple2 b1 b1)) (t2tb2861 x))))

(declare-fun tb2t2861 (uni) (tuple21 (tuple21 a c) (tuple21 b b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a c) (tuple21 b b))))
  (! (= (tb2t2861 (t2tb2861 i)) i) :pattern ((t2tb2861 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 c1) (tuple2 b1 b1)) j)
     (= (t2tb2861 (tb2t2861 j)) j)) :pattern ((t2tb2861 (tb2t2861 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a b))) (k (set (tuple21 c b))) (x a) (y c) (z b)
  (w b))
  (= (mem (tuple2 (tuple2 a1 c1) (tuple2 b1 b1))
  (Tuple2 (tuple2 a1 c1) (tuple2 b1 b1) (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y))
  (Tuple2 b1 b1 (t2tb14 z) (t2tb14 w)))
  (parallel_product b1 c1 b1 a1 (t2tb11 h) (t2tb222 k)))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 z))) h) (mem28
  (tb2t223 (Tuple2 c1 b1 (t2tb135 y) (t2tb14 w))) k)))))

(declare-fun t2tb2385 ((set (tuple21 (tuple21 a c) (tuple21 b a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a c) (tuple21 b a))))) (sort
  (set1 (tuple2 (tuple2 a1 c1) (tuple2 b1 a1))) (t2tb2385 x))))

(declare-fun tb2t2385 (uni) (set (tuple21 (tuple21 a c) (tuple21 b a))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a c) (tuple21 b a)))))
  (! (= (tb2t2385 (t2tb2385 i)) i) :pattern ((t2tb2385 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 c1) (tuple2 b1 a1))) j)
     (= (t2tb2385 (tb2t2385 j)) j)) :pattern ((t2tb2385 (tb2t2385 j))) )))

(declare-fun t2tb2386 ((tuple21 (tuple21 a c) (tuple21 b a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a c) (tuple21 b a)))) (sort
  (tuple2 (tuple2 a1 c1) (tuple2 b1 a1)) (t2tb2386 x))))

(declare-fun tb2t2386 (uni) (tuple21 (tuple21 a c) (tuple21 b a)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a c) (tuple21 b a))))
  (! (= (tb2t2386 (t2tb2386 i)) i) :pattern ((t2tb2386 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 c1) (tuple2 b1 a1)) j)
     (= (t2tb2386 (tb2t2386 j)) j)) :pattern ((t2tb2386 (tb2t2386 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a b))) (k (set (tuple21 c a))) (x a) (y c) (z b)
  (w a))
  (= (mem (tuple2 (tuple2 a1 c1) (tuple2 b1 a1))
  (Tuple2 (tuple2 a1 c1) (tuple2 b1 a1) (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y))
  (Tuple2 b1 a1 (t2tb14 z) (t2tb2 w)))
  (parallel_product a1 c1 b1 a1 (t2tb11 h) (t2tb224 k)))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 z))) h) (mem27
  (tb2t225 (Tuple2 c1 a1 (t2tb135 y) (t2tb2 w))) k)))))

(declare-fun t2tb61 ((set (tuple21 (tuple21 a a) (tuple21 b b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a a) (tuple21 b b))))) (sort
  (set1 (tuple2 (tuple2 a1 a1) (tuple2 b1 b1))) (t2tb61 x))))

(declare-fun tb2t61 (uni) (set (tuple21 (tuple21 a a) (tuple21 b b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a a) (tuple21 b b)))))
  (! (= (tb2t61 (t2tb61 i)) i) :pattern ((t2tb61 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 a1) (tuple2 b1 b1))) j)
     (= (t2tb61 (tb2t61 j)) j)) :pattern ((t2tb61 (tb2t61 j))) )))

(declare-fun t2tb62 ((tuple21 (tuple21 a a) (tuple21 b b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a a) (tuple21 b b)))) (sort
  (tuple2 (tuple2 a1 a1) (tuple2 b1 b1)) (t2tb62 x))))

(declare-fun tb2t62 (uni) (tuple21 (tuple21 a a) (tuple21 b b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a a) (tuple21 b b))))
  (! (= (tb2t62 (t2tb62 i)) i) :pattern ((t2tb62 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 a1) (tuple2 b1 b1)) j)
     (= (t2tb62 (tb2t62 j)) j)) :pattern ((t2tb62 (tb2t62 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a b))) (k (set (tuple21 a b))) (x a) (y a) (z b)
  (w b))
  (= (mem (tuple2 (tuple2 a1 a1) (tuple2 b1 b1))
  (Tuple2 (tuple2 a1 a1) (tuple2 b1 b1) (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y))
  (Tuple2 b1 b1 (t2tb14 z) (t2tb14 w)))
  (parallel_product b1 a1 b1 a1 (t2tb11 h) (t2tb11 k)))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 z))) h) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 y) (t2tb14 w))) k)))))

;; mem_parallel_product
  (assert
  (forall ((c2 ty) (d2 ty))
  (forall ((h (set (tuple21 a b))) (k uni) (x a) (y uni) (z b) (w uni))
  (= (mem (tuple2 (tuple2 a1 c2) (tuple2 b1 d2))
  (Tuple2 (tuple2 a1 c2) (tuple2 b1 d2) (Tuple2 a1 c2 (t2tb2 x) y)
  (Tuple2 b1 d2 (t2tb14 z) w)) (parallel_product d2 c2 b1 a1 (t2tb11 h) k))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 z))) h) (mem
  (tuple2 c2 d2) (Tuple2 c2 d2 y w) k))))))

;; mem_parallel_product
  (assert
  (forall ((a2 ty) (b2 ty) (c2 ty) (d2 ty))
  (forall ((h uni) (k uni) (x uni) (y uni) (z uni) (w uni))
  (= (mem (tuple2 (tuple2 a2 c2) (tuple2 b2 d2))
  (Tuple2 (tuple2 a2 c2) (tuple2 b2 d2) (Tuple2 a2 c2 x y)
  (Tuple2 b2 d2 z w)) (parallel_product d2 c2 b2 a2 h k))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x z) h) (mem (tuple2 c2 d2)
  (Tuple2 c2 d2 y w) k))))))

(declare-fun infix_plmngt (ty ty uni uni) uni)

;; infix +->_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (set1 (tuple2 a2 b2)))
  (infix_plmngt b2 a2 x x1)))))

;; mem_partial_function_set
  (assert
  (forall ((s (set c)) (t (set b)) (f (set (tuple21 c b))))
  (= (mem (set1 (tuple2 c1 b1)) (t2tb222 f)
  (infix_plmngt b1 c1 (t2tb132 s) (t2tb12 t)))
  (and (mem (set1 (tuple2 c1 b1)) (t2tb222 f)
  (relation b1 c1 (t2tb132 s) (t2tb12 t)))
  (forall ((x c) (y1 b) (y2 b))
  (=>
  (and (mem28 (tb2t223 (Tuple2 c1 b1 (t2tb135 x) (t2tb14 y1))) f) (mem28
  (tb2t223 (Tuple2 c1 b1 (t2tb135 x) (t2tb14 y2))) f)) (= y1 y2)))))))

;; mem_partial_function_set
  (assert
  (forall ((s (set c)) (t (set a)) (f (set (tuple21 c a))))
  (= (mem (set1 (tuple2 c1 a1)) (t2tb224 f)
  (infix_plmngt a1 c1 (t2tb132 s) (t2tb1 t)))
  (and (mem (set1 (tuple2 c1 a1)) (t2tb224 f)
  (relation a1 c1 (t2tb132 s) (t2tb1 t)))
  (forall ((x c) (y1 a) (y2 a))
  (=>
  (and (mem27 (tb2t225 (Tuple2 c1 a1 (t2tb135 x) (t2tb2 y1))) f) (mem27
  (tb2t225 (Tuple2 c1 a1 (t2tb135 x) (t2tb2 y2))) f)) (= y1 y2)))))))

;; mem_partial_function_set
  (assert
  (forall ((s (set a)) (t (set b)) (f (set (tuple21 a b))))
  (= (mem4 f (tb2t10 (infix_plmngt b1 a1 (t2tb1 s) (t2tb12 t))))
  (and (mem4 f (relation1 s t))
  (forall ((x a) (y1 b) (y2 b))
  (=>
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y1))) f) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y2))) f)) (= y1 y2)))))))

;; mem_partial_function_set
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (f uni))
  (and
  (=> (mem (set1 (tuple2 a2 b2)) f (infix_plmngt b2 a2 s t))
  (and (mem (set1 (tuple2 a2 b2)) f (relation b2 a2 s t))
  (forall ((x uni) (y1 uni) (y2 uni))
  (=> (sort b2 y1)
  (=> (sort b2 y2)
  (=>
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y1) f) (mem (tuple2 a2 b2)
  (Tuple2 a2 b2 x y2) f)) (= y1 y2)))))))
  (=>
  (and (mem (set1 (tuple2 a2 b2)) f (relation b2 a2 s t))
  (forall ((x uni) (y1 uni) (y2 uni))
  (=> (sort a2 x)
  (=> (sort b2 y1)
  (=> (sort b2 y2)
  (=>
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y1) f) (mem (tuple2 a2 b2)
  (Tuple2 a2 b2 x y2) f)) (= y1 y2))))))) (mem (set1 (tuple2 a2 b2)) f
  (infix_plmngt b2 a2 s t)))))))

(declare-fun infix_mnmngt (ty ty uni uni) uni)

;; infix -->_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (set1 (tuple2 a2 b2)))
  (infix_mnmngt b2 a2 x x1)))))

;; mem_total_function_set
  (assert
  (forall ((b2 ty))
  (forall ((s (set (tuple21 c b))) (t uni) (x uni))
  (= (mem (set1 (tuple2 (tuple2 c1 b1) b2)) x
  (infix_mnmngt b2 (tuple2 c1 b1) (t2tb222 s) t))
  (and (mem (set1 (tuple2 (tuple2 c1 b1) b2)) x
  (infix_plmngt b2 (tuple2 c1 b1) (t2tb222 s) t)) (infix_eqeq12
  (tb2t222 (dom b2 (tuple2 c1 b1) x)) s))))))

;; mem_total_function_set
  (assert
  (forall ((b2 ty))
  (forall ((s (set (tuple21 c a))) (t uni) (x uni))
  (= (mem (set1 (tuple2 (tuple2 c1 a1) b2)) x
  (infix_mnmngt b2 (tuple2 c1 a1) (t2tb224 s) t))
  (and (mem (set1 (tuple2 (tuple2 c1 a1) b2)) x
  (infix_plmngt b2 (tuple2 c1 a1) (t2tb224 s) t)) (infix_eqeq11
  (tb2t224 (dom b2 (tuple2 c1 a1) x)) s))))))

;; mem_total_function_set
  (assert
  (forall ((b2 ty))
  (forall ((s (set c)) (t uni) (x uni))
  (= (mem (set1 (tuple2 c1 b2)) x (infix_mnmngt b2 c1 (t2tb132 s) t))
  (and (mem (set1 (tuple2 c1 b2)) x (infix_plmngt b2 c1 (t2tb132 s) t))
  (infix_eqeq7 (tb2t132 (dom b2 c1 x)) s))))))

;; mem_total_function_set
  (assert
  (forall ((b2 ty))
  (forall ((s (set (set (tuple21 a b)))) (t uni) (x uni))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 b1)) b2)) x
  (infix_mnmngt b2 (set1 (tuple2 a1 b1)) (t2tb10 s) t))
  (and (mem (set1 (tuple2 (set1 (tuple2 a1 b1)) b2)) x
  (infix_plmngt b2 (set1 (tuple2 a1 b1)) (t2tb10 s) t)) (infix_eqeq5
  (tb2t10 (dom b2 (set1 (tuple2 a1 b1)) x)) s))))))

;; mem_total_function_set
  (assert
  (forall ((b2 ty))
  (forall ((s (set (tuple21 a b))) (t uni) (x uni))
  (= (mem (set1 (tuple2 (tuple2 a1 b1) b2)) x
  (infix_mnmngt b2 (tuple2 a1 b1) (t2tb11 s) t))
  (and (mem (set1 (tuple2 (tuple2 a1 b1) b2)) x
  (infix_plmngt b2 (tuple2 a1 b1) (t2tb11 s) t)) (infix_eqeq4
  (tb2t11 (dom b2 (tuple2 a1 b1) x)) s))))))

;; mem_total_function_set
  (assert
  (forall ((b2 ty))
  (forall ((s (set b)) (t uni) (x uni))
  (= (mem (set1 (tuple2 b1 b2)) x (infix_mnmngt b2 b1 (t2tb12 s) t))
  (and (mem (set1 (tuple2 b1 b2)) x (infix_plmngt b2 b1 (t2tb12 s) t))
  (infix_eqeq3 (tb2t12 (dom b2 b1 x)) s))))))

;; mem_total_function_set
  (assert
  (forall ((s (set a)) (t (set b)) (x (set (tuple21 a b))))
  (= (mem4 x (tb2t10 (infix_mnmngt b1 a1 (t2tb1 s) (t2tb12 t))))
  (and (mem4 x (tb2t10 (infix_plmngt b1 a1 (t2tb1 s) (t2tb12 t))))
  (infix_eqeq1 (tb2t1 (dom b1 a1 (t2tb11 x))) s)))))

;; mem_total_function_set
  (assert
  (forall ((b2 ty))
  (forall ((s (set a)) (t uni) (x uni))
  (= (mem (set1 (tuple2 a1 b2)) x (infix_mnmngt b2 a1 (t2tb1 s) t))
  (and (mem (set1 (tuple2 a1 b2)) x (infix_plmngt b2 a1 (t2tb1 s) t))
  (infix_eqeq1 (tb2t1 (dom b2 a1 x)) s))))))

;; mem_total_function_set
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (x uni))
  (= (mem (set1 (tuple2 a2 b2)) x (infix_mnmngt b2 a2 s t))
  (and (mem (set1 (tuple2 a2 b2)) x (infix_plmngt b2 a2 s t)) (infix_eqeq a2
  (dom b2 a2 x) s))))))

(declare-fun infix_gtplgt (ty ty uni uni) uni)

;; infix >+>_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (set1 (tuple2 a2 b2)))
  (infix_gtplgt b2 a2 x x1)))))

;; mem_partial_injection_set
  (assert
  (forall ((s (set b)) (t (set a)) (x (set (tuple21 b a))))
  (= (mem (set1 (tuple2 b1 a1)) (t2tb37 x)
  (infix_gtplgt a1 b1 (t2tb12 s) (t2tb1 t)))
  (and (mem (set1 (tuple2 b1 a1)) (t2tb37 x)
  (infix_plmngt a1 b1 (t2tb12 s) (t2tb1 t))) (mem4
  (tb2t11 (inverse a1 b1 (t2tb37 x)))
  (tb2t10 (infix_plmngt b1 a1 (t2tb1 t) (t2tb12 s))))))))

;; mem_partial_injection_set
  (assert
  (forall ((s (set a)) (t (set b)) (x (set (tuple21 a b))))
  (= (mem4 x (tb2t10 (infix_gtplgt b1 a1 (t2tb1 s) (t2tb12 t))))
  (and (mem4 x (tb2t10 (infix_plmngt b1 a1 (t2tb1 s) (t2tb12 t)))) (mem
  (set1 (tuple2 b1 a1)) (inverse b1 a1 (t2tb11 x))
  (infix_plmngt a1 b1 (t2tb12 t) (t2tb1 s)))))))

;; mem_partial_injection_set
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (x uni))
  (= (mem (set1 (tuple2 a2 b2)) x (infix_gtplgt b2 a2 s t))
  (and (mem (set1 (tuple2 a2 b2)) x (infix_plmngt b2 a2 s t)) (mem
  (set1 (tuple2 b2 a2)) (inverse b2 a2 x) (infix_plmngt a2 b2 t s)))))))

(declare-fun infix_gtmngt (ty ty uni uni) uni)

;; infix >->_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (set1 (tuple2 a2 b2)))
  (infix_gtmngt b2 a2 x x1)))))

;; mem_total_injection_set
  (assert
  (forall ((s (set a)) (t (set b)) (x (set (tuple21 a b))))
  (= (mem4 x (tb2t10 (infix_gtmngt b1 a1 (t2tb1 s) (t2tb12 t))))
  (and (mem4 x (tb2t10 (infix_gtplgt b1 a1 (t2tb1 s) (t2tb12 t)))) (mem4 x
  (tb2t10 (infix_mnmngt b1 a1 (t2tb1 s) (t2tb12 t))))))))

;; mem_total_injection_set
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (x uni))
  (= (mem (set1 (tuple2 a2 b2)) x (infix_gtmngt b2 a2 s t))
  (and (mem (set1 (tuple2 a2 b2)) x (infix_gtplgt b2 a2 s t)) (mem
  (set1 (tuple2 a2 b2)) x (infix_mnmngt b2 a2 s t)))))))

(declare-fun infix_plmngtgt (ty ty uni uni) uni)

;; infix +->>_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (set1 (tuple2 a2 b2)))
  (infix_plmngtgt b2 a2 x x1)))))

;; mem_partial_surjection_set
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set (tuple21 c b))) (x uni))
  (= (mem (set1 (tuple2 a2 (tuple2 c1 b1))) x
  (infix_plmngtgt (tuple2 c1 b1) a2 s (t2tb222 t)))
  (and (mem (set1 (tuple2 a2 (tuple2 c1 b1))) x
  (infix_plmngt (tuple2 c1 b1) a2 s (t2tb222 t))) (infix_eqeq12
  (tb2t222 (ran (tuple2 c1 b1) a2 x)) t))))))

;; mem_partial_surjection_set
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set (tuple21 c a))) (x uni))
  (= (mem (set1 (tuple2 a2 (tuple2 c1 a1))) x
  (infix_plmngtgt (tuple2 c1 a1) a2 s (t2tb224 t)))
  (and (mem (set1 (tuple2 a2 (tuple2 c1 a1))) x
  (infix_plmngt (tuple2 c1 a1) a2 s (t2tb224 t))) (infix_eqeq11
  (tb2t224 (ran (tuple2 c1 a1) a2 x)) t))))))

;; mem_partial_surjection_set
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set c)) (x uni))
  (= (mem (set1 (tuple2 a2 c1)) x (infix_plmngtgt c1 a2 s (t2tb132 t)))
  (and (mem (set1 (tuple2 a2 c1)) x (infix_plmngt c1 a2 s (t2tb132 t)))
  (infix_eqeq7 (tb2t132 (ran c1 a2 x)) t))))))

;; mem_partial_surjection_set
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set (set (tuple21 a b)))) (x uni))
  (= (mem (set1 (tuple2 a2 (set1 (tuple2 a1 b1)))) x
  (infix_plmngtgt (set1 (tuple2 a1 b1)) a2 s (t2tb10 t)))
  (and (mem (set1 (tuple2 a2 (set1 (tuple2 a1 b1)))) x
  (infix_plmngt (set1 (tuple2 a1 b1)) a2 s (t2tb10 t))) (infix_eqeq5
  (tb2t10 (ran (set1 (tuple2 a1 b1)) a2 x)) t))))))

;; mem_partial_surjection_set
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set (tuple21 a b))) (x uni))
  (= (mem (set1 (tuple2 a2 (tuple2 a1 b1))) x
  (infix_plmngtgt (tuple2 a1 b1) a2 s (t2tb11 t)))
  (and (mem (set1 (tuple2 a2 (tuple2 a1 b1))) x
  (infix_plmngt (tuple2 a1 b1) a2 s (t2tb11 t))) (infix_eqeq4
  (tb2t11 (ran (tuple2 a1 b1) a2 x)) t))))))

;; mem_partial_surjection_set
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set b)) (x uni))
  (= (mem (set1 (tuple2 a2 b1)) x (infix_plmngtgt b1 a2 s (t2tb12 t)))
  (and (mem (set1 (tuple2 a2 b1)) x (infix_plmngt b1 a2 s (t2tb12 t)))
  (infix_eqeq3 (tb2t12 (ran b1 a2 x)) t))))))

;; mem_partial_surjection_set
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set a)) (x uni))
  (= (mem (set1 (tuple2 a2 a1)) x (infix_plmngtgt a1 a2 s (t2tb1 t)))
  (and (mem (set1 (tuple2 a2 a1)) x (infix_plmngt a1 a2 s (t2tb1 t)))
  (infix_eqeq1 (tb2t1 (ran a1 a2 x)) t))))))

;; mem_partial_surjection_set
  (assert
  (forall ((s (set a)) (t (set b)) (x (set (tuple21 a b))))
  (= (mem4 x (tb2t10 (infix_plmngtgt b1 a1 (t2tb1 s) (t2tb12 t))))
  (and (mem4 x (tb2t10 (infix_plmngt b1 a1 (t2tb1 s) (t2tb12 t))))
  (infix_eqeq3 (tb2t12 (ran b1 a1 (t2tb11 x))) t)))))

;; mem_partial_surjection_set
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (x uni))
  (= (mem (set1 (tuple2 a2 b2)) x (infix_plmngtgt b2 a2 s t))
  (and (mem (set1 (tuple2 a2 b2)) x (infix_plmngt b2 a2 s t)) (infix_eqeq b2
  (ran b2 a2 x) t))))))

(declare-fun infix_mnmngtgt (ty ty uni uni) uni)

;; infix -->>_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (set1 (tuple2 a2 b2)))
  (infix_mnmngtgt b2 a2 x x1)))))

;; mem_total_surjection_set
  (assert
  (forall ((s (set a)) (t (set b)) (x (set (tuple21 a b))))
  (= (mem4 x (tb2t10 (infix_mnmngtgt b1 a1 (t2tb1 s) (t2tb12 t))))
  (and (mem4 x (tb2t10 (infix_plmngtgt b1 a1 (t2tb1 s) (t2tb12 t)))) (mem4 x
  (tb2t10 (infix_mnmngt b1 a1 (t2tb1 s) (t2tb12 t))))))))

;; mem_total_surjection_set
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (x uni))
  (= (mem (set1 (tuple2 a2 b2)) x (infix_mnmngtgt b2 a2 s t))
  (and (mem (set1 (tuple2 a2 b2)) x (infix_plmngtgt b2 a2 s t)) (mem
  (set1 (tuple2 a2 b2)) x (infix_mnmngt b2 a2 s t)))))))

(declare-fun infix_gtplgtgt (ty ty uni uni) uni)

;; infix >+>>_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (set1 (tuple2 a2 b2)))
  (infix_gtplgtgt b2 a2 x x1)))))

;; mem_partial_bijection_set
  (assert
  (forall ((s (set a)) (t (set b)) (x (set (tuple21 a b))))
  (= (mem4 x (tb2t10 (infix_gtplgtgt b1 a1 (t2tb1 s) (t2tb12 t))))
  (and (mem4 x (tb2t10 (infix_gtplgt b1 a1 (t2tb1 s) (t2tb12 t)))) (mem4 x
  (tb2t10 (infix_plmngtgt b1 a1 (t2tb1 s) (t2tb12 t))))))))

;; mem_partial_bijection_set
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (x uni))
  (= (mem (set1 (tuple2 a2 b2)) x (infix_gtplgtgt b2 a2 s t))
  (and (mem (set1 (tuple2 a2 b2)) x (infix_gtplgt b2 a2 s t)) (mem
  (set1 (tuple2 a2 b2)) x (infix_plmngtgt b2 a2 s t)))))))

(declare-fun infix_gtmngtgt (ty ty uni uni) uni)

;; infix >->>_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (set1 (tuple2 a2 b2)))
  (infix_gtmngtgt b2 a2 x x1)))))

;; mem_total_bijection_set
  (assert
  (forall ((s (set a)) (t (set b)) (x (set (tuple21 a b))))
  (= (mem4 x (tb2t10 (infix_gtmngtgt b1 a1 (t2tb1 s) (t2tb12 t))))
  (and (mem4 x (tb2t10 (infix_gtmngt b1 a1 (t2tb1 s) (t2tb12 t)))) (mem4 x
  (tb2t10 (infix_mnmngtgt b1 a1 (t2tb1 s) (t2tb12 t))))))))

;; mem_total_bijection_set
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (x uni))
  (= (mem (set1 (tuple2 a2 b2)) x (infix_gtmngtgt b2 a2 s t))
  (and (mem (set1 (tuple2 a2 b2)) x (infix_gtmngt b2 a2 s t)) (mem
  (set1 (tuple2 a2 b2)) x (infix_mnmngtgt b2 a2 s t)))))))

(declare-fun apply (ty ty uni uni) uni)

;; apply_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort b2 (apply b2 a2 x x1)))))

;; apply_def0
  (assert
  (forall ((b2 ty))
  (forall ((f uni) (s (set (tuple21 c b))) (t uni) (a2 (tuple21 c b)))
  (=>
  (and (mem (set1 (tuple2 (tuple2 c1 b1) b2)) f
  (infix_plmngt b2 (tuple2 c1 b1) (t2tb222 s) t)) (mem28 a2
  (tb2t222 (dom b2 (tuple2 c1 b1) f)))) (mem (tuple2 (tuple2 c1 b1) b2)
  (Tuple2 (tuple2 c1 b1) b2 (t2tb223 a2)
  (apply b2 (tuple2 c1 b1) f (t2tb223 a2))) f)))))

;; apply_def0
  (assert
  (forall ((b2 ty))
  (forall ((f uni) (s (set (tuple21 c a))) (t uni) (a2 (tuple21 c a)))
  (=>
  (and (mem (set1 (tuple2 (tuple2 c1 a1) b2)) f
  (infix_plmngt b2 (tuple2 c1 a1) (t2tb224 s) t)) (mem27 a2
  (tb2t224 (dom b2 (tuple2 c1 a1) f)))) (mem (tuple2 (tuple2 c1 a1) b2)
  (Tuple2 (tuple2 c1 a1) b2 (t2tb225 a2)
  (apply b2 (tuple2 c1 a1) f (t2tb225 a2))) f)))))

;; apply_def0
  (assert
  (forall ((f (set (tuple21 c b))) (s (set c)) (t (set b)) (a2 c))
  (=>
  (and (mem (set1 (tuple2 c1 b1)) (t2tb222 f)
  (infix_plmngt b1 c1 (t2tb132 s) (t2tb12 t))) (mem7 a2
  (tb2t132 (dom b1 c1 (t2tb222 f))))) (mem28
  (tb2t223
  (Tuple2 c1 b1 (t2tb135 a2) (apply b1 c1 (t2tb222 f) (t2tb135 a2)))) f))))

;; apply_def0
  (assert
  (forall ((f (set (tuple21 c a))) (s (set c)) (t (set a)) (a2 c))
  (=>
  (and (mem (set1 (tuple2 c1 a1)) (t2tb224 f)
  (infix_plmngt a1 c1 (t2tb132 s) (t2tb1 t))) (mem7 a2
  (tb2t132 (dom a1 c1 (t2tb224 f))))) (mem27
  (tb2t225
  (Tuple2 c1 a1 (t2tb135 a2) (apply a1 c1 (t2tb224 f) (t2tb135 a2)))) f))))

;; apply_def0
  (assert
  (forall ((b2 ty))
  (forall ((f uni) (s (set c)) (t uni) (a2 c))
  (=>
  (and (mem (set1 (tuple2 c1 b2)) f (infix_plmngt b2 c1 (t2tb132 s) t)) (mem7
  a2 (tb2t132 (dom b2 c1 f)))) (mem (tuple2 c1 b2)
  (Tuple2 c1 b2 (t2tb135 a2) (apply b2 c1 f (t2tb135 a2))) f)))))

;; apply_def0
  (assert
  (forall ((b2 ty))
  (forall ((f uni) (s (set (set (tuple21 a b)))) (t uni) (a2 (set (tuple21 a
  b))))
  (=>
  (and (mem (set1 (tuple2 (set1 (tuple2 a1 b1)) b2)) f
  (infix_plmngt b2 (set1 (tuple2 a1 b1)) (t2tb10 s) t)) (mem4 a2
  (tb2t10 (dom b2 (set1 (tuple2 a1 b1)) f)))) (mem
  (tuple2 (set1 (tuple2 a1 b1)) b2)
  (Tuple2 (set1 (tuple2 a1 b1)) b2 (t2tb11 a2)
  (apply b2 (set1 (tuple2 a1 b1)) f (t2tb11 a2))) f)))))

;; apply_def0
  (assert
  (forall ((b2 ty))
  (forall ((f uni) (s (set (tuple21 a b))) (t uni) (a2 (tuple21 a b)))
  (=>
  (and (mem (set1 (tuple2 (tuple2 a1 b1) b2)) f
  (infix_plmngt b2 (tuple2 a1 b1) (t2tb11 s) t)) (mem3 a2
  (tb2t11 (dom b2 (tuple2 a1 b1) f)))) (mem (tuple2 (tuple2 a1 b1) b2)
  (Tuple2 (tuple2 a1 b1) b2 (t2tb13 a2)
  (apply b2 (tuple2 a1 b1) f (t2tb13 a2))) f)))))

;; apply_def0
  (assert
  (forall ((b2 ty))
  (forall ((f uni) (s (set b)) (t uni) (a2 b))
  (=>
  (and (mem (set1 (tuple2 b1 b2)) f (infix_plmngt b2 b1 (t2tb12 s) t)) (mem2
  a2 (tb2t12 (dom b2 b1 f)))) (mem (tuple2 b1 b2)
  (Tuple2 b1 b2 (t2tb14 a2) (apply b2 b1 f (t2tb14 a2))) f)))))

;; apply_def0
  (assert
  (forall ((f (set (tuple21 a b))) (s (set a)) (t (set b)) (a2 a))
  (=>
  (and (mem4 f (tb2t10 (infix_plmngt b1 a1 (t2tb1 s) (t2tb12 t)))) (mem1 a2
  (tb2t1 (dom b1 a1 (t2tb11 f))))) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 a2) (apply b1 a1 (t2tb11 f) (t2tb2 a2)))) f))))

;; apply_def0
  (assert
  (forall ((b2 ty))
  (forall ((f uni) (s (set a)) (t uni) (a2 a))
  (=>
  (and (mem (set1 (tuple2 a1 b2)) f (infix_plmngt b2 a1 (t2tb1 s) t)) (mem1
  a2 (tb2t1 (dom b2 a1 f)))) (mem (tuple2 a1 b2)
  (Tuple2 a1 b2 (t2tb2 a2) (apply b2 a1 f (t2tb2 a2))) f)))))

;; apply_def0
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((f uni) (s uni) (t uni) (a3 uni))
  (=>
  (and (mem (set1 (tuple2 a2 b2)) f (infix_plmngt b2 a2 s t)) (mem a2 a3
  (dom b2 a2 f))) (mem (tuple2 a2 b2) (Tuple2 a2 b2 a3 (apply b2 a2 f a3))
  f)))))

(assert
;; equal_semicolon_30
 ;; File "lemmes_bbook.why", line 1767, characters 7-25
  (not
  (forall ((s (set a)) (v (set a)) (t (set b)) (u (set c)) (r (set (tuple21 a
  b))))
  (=> (and (subset2 v s) (mem4 r (relation1 s t))) (infix_eqeq12
  (semicolon14 (times12 u v) r) (times13 u (image1 r v)))))))
(check-sat)
