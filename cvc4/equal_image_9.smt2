(set-logic AUFBVDTLIRA)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
(declare-sort uni 0)

(declare-sort ty 0)

(declare-fun sort (ty uni) Bool)

(declare-fun witness (ty) uni)

;; witness_sort
  (assert (forall ((a2 ty)) (sort a2 (witness a2))))

(declare-fun int () ty)

(declare-fun real () ty)

(declare-sort set 1)

(declare-fun set1 (ty) ty)

(declare-sort c 0)

(declare-fun c1 () ty)

(declare-sort b 0)

(declare-fun b1 () ty)

(declare-sort a 0)

(declare-fun a1 () ty)

(declare-sort tuple21 2)

(declare-fun tuple2 (ty ty) ty)

(declare-fun mem (ty uni uni) Bool)

(declare-fun mem1 (a (set a)) Bool)

(declare-fun mem2 (b (set b)) Bool)

(declare-fun mem3 ((tuple21 a b) (set (tuple21 a b))) Bool)

(declare-fun mem4 ((set (tuple21 a b)) (set (set (tuple21 a b)))) Bool)

(declare-fun mem5 ((tuple21 b a) (set (tuple21 b a))) Bool)

(declare-fun mem7 (c (set c)) Bool)

(declare-fun mem8 ((tuple21 b c) (set (tuple21 b c))) Bool)

(declare-fun mem10 ((tuple21 a c) (set (tuple21 a c))) Bool)

(declare-fun mem11 ((set (tuple21 a c)) (set (set (tuple21 a c)))) Bool)

(declare-fun mem14 ((tuple21 a (tuple21 b c)) (set (tuple21 a (tuple21 b
  c)))) Bool)

(declare-fun infix_eqeq (ty uni uni) Bool)

(declare-fun infix_eqeq1 ((set a) (set a)) Bool)

(declare-fun infix_eqeq3 ((set b) (set b)) Bool)

(declare-fun infix_eqeq4 ((set (tuple21 a b)) (set (tuple21 a b))) Bool)

(declare-fun infix_eqeq5 ((set (set (tuple21 a b))) (set (set (tuple21 a
  b)))) Bool)

(declare-fun infix_eqeq6 ((set (tuple21 b a)) (set (tuple21 b a))) Bool)

(declare-fun infix_eqeq7 ((set c) (set c)) Bool)

(declare-fun infix_eqeq8 ((set (tuple21 b c)) (set (tuple21 b c))) Bool)

(declare-fun infix_eqeq9 ((set (tuple21 a c)) (set (tuple21 a c))) Bool)

(declare-fun infix_eqeq19 ((set (set (tuple21 a c))) (set (set (tuple21 a
  c)))) Bool)

(declare-fun infix_eqeq20 ((set (tuple21 a (tuple21 b c))) (set (tuple21 a
  (tuple21 b c)))) Bool)

;; infix ==_def
  (assert
  (forall ((s (set (tuple21 a (tuple21 b c)))) (t (set (tuple21 a (tuple21 b
  c)))))
  (= (infix_eqeq20 s t)
  (forall ((x (tuple21 a (tuple21 b c)))) (= (mem14 x s) (mem14 x t))))))

;; infix ==_def
  (assert
  (forall ((s (set (set (tuple21 a c)))) (t (set (set (tuple21 a c)))))
  (= (infix_eqeq19 s t)
  (forall ((x (set (tuple21 a c)))) (= (mem11 x s) (mem11 x t))))))

;; infix ==_def
  (assert
  (forall ((s (set (tuple21 a c))) (t (set (tuple21 a c))))
  (= (infix_eqeq9 s t)
  (forall ((x (tuple21 a c))) (= (mem10 x s) (mem10 x t))))))

;; infix ==_def
  (assert
  (forall ((s (set (tuple21 b c))) (t (set (tuple21 b c))))
  (= (infix_eqeq8 s t)
  (forall ((x (tuple21 b c))) (= (mem8 x s) (mem8 x t))))))

;; infix ==_def
  (assert
  (forall ((s (set c)) (t (set c)))
  (= (infix_eqeq7 s t) (forall ((x c)) (= (mem7 x s) (mem7 x t))))))

;; infix ==_def
  (assert
  (forall ((s (set (tuple21 b a))) (t (set (tuple21 b a))))
  (= (infix_eqeq6 s t)
  (forall ((x (tuple21 b a))) (= (mem5 x s) (mem5 x t))))))

;; infix ==_def
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set (set (tuple21 a b)))))
  (= (infix_eqeq5 s t)
  (forall ((x (set (tuple21 a b)))) (= (mem4 x s) (mem4 x t))))))

;; infix ==_def
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (tuple21 a b))))
  (= (infix_eqeq4 s t)
  (forall ((x (tuple21 a b))) (= (mem3 x s) (mem3 x t))))))

;; infix ==_def
  (assert
  (forall ((s (set b)) (t (set b)))
  (= (infix_eqeq3 s t) (forall ((x b)) (= (mem2 x s) (mem2 x t))))))

;; infix ==_def
  (assert
  (forall ((s (set a)) (t (set a)))
  (= (infix_eqeq1 s t) (forall ((x a)) (= (mem1 x s) (mem1 x t))))))

;; infix ==_def
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t uni))
  (and
  (=> (infix_eqeq a2 s t) (forall ((x uni)) (= (mem a2 x s) (mem a2 x t))))
  (=> (forall ((x uni)) (=> (sort a2 x) (= (mem a2 x s) (mem a2 x t))))
  (infix_eqeq a2 s t))))))

(declare-fun power (ty uni) uni)

;; power_sort
  (assert
  (forall ((a2 ty)) (forall ((x uni)) (sort (set1 (set1 a2)) (power a2 x)))))

(declare-fun non_empty_power (ty uni) uni)

;; non_empty_power_sort
  (assert
  (forall ((a2 ty))
  (forall ((x uni)) (sort (set1 (set1 a2)) (non_empty_power a2 x)))))

(declare-fun subset1 (ty uni uni) Bool)

(declare-fun subset2 ((set a) (set a)) Bool)

(declare-fun subset5 ((set b) (set b)) Bool)

(declare-fun subset6 ((set (tuple21 a b)) (set (tuple21 a b))) Bool)

(declare-fun subset7 ((set (set (tuple21 a b))) (set (set (tuple21 a
  b)))) Bool)

(declare-fun subset8 ((set (tuple21 b a)) (set (tuple21 b a))) Bool)

(declare-fun subset9 ((set c) (set c)) Bool)

(declare-fun subset10 ((set (tuple21 b c)) (set (tuple21 b c))) Bool)

(declare-fun subset11 ((set (tuple21 a c)) (set (tuple21 a c))) Bool)

(declare-fun subset13 ((set (set (tuple21 a c))) (set (set (tuple21 a
  c)))) Bool)

(declare-fun subset14 ((set (tuple21 a (tuple21 b c))) (set (tuple21 a
  (tuple21 b c)))) Bool)

(declare-fun t2tb327 ((set (set (tuple21 a (tuple21 b c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 a (tuple21 b c)))))) (sort
  (set1 (set1 (tuple2 a1 (tuple2 b1 c1)))) (t2tb327 x))))

(declare-fun tb2t327 (uni) (set (set (tuple21 a (tuple21 b c)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 a (tuple21 b c))))))
  (! (= (tb2t327 (t2tb327 i)) i) :pattern ((t2tb327 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 a1 (tuple2 b1 c1)))) j)
     (= (t2tb327 (tb2t327 j)) j)) :pattern ((t2tb327 (tb2t327 j))) )))

(declare-fun t2tb261 ((set (tuple21 a (tuple21 b c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (tuple21 b c))))) (sort
  (set1 (tuple2 a1 (tuple2 b1 c1))) (t2tb261 x))))

(declare-fun tb2t261 (uni) (set (tuple21 a (tuple21 b c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (tuple21 b c)))))
  (! (= (tb2t261 (t2tb261 i)) i) :pattern ((t2tb261 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (tuple2 b1 c1))) j)
     (= (t2tb261 (tb2t261 j)) j)) :pattern ((t2tb261 (tb2t261 j))) )))

;; subset_def
  (assert
  (forall ((s (set (tuple21 a (tuple21 b c)))) (t (set (tuple21 a (tuple21 b
  c)))))
  (= (subset14 s t) (mem (set1 (tuple2 a1 (tuple2 b1 c1))) (t2tb261 s)
  (power (tuple2 a1 (tuple2 b1 c1)) (t2tb261 t))))))

(declare-fun t2tb4586 ((set (set (set (tuple21 a c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (set (tuple21 a c)))))) (sort
  (set1 (set1 (set1 (tuple2 a1 c1)))) (t2tb4586 x))))

(declare-fun tb2t4586 (uni) (set (set (set (tuple21 a c)))))

;; BridgeL
  (assert
  (forall ((i (set (set (set (tuple21 a c))))))
  (! (= (tb2t4586 (t2tb4586 i)) i) :pattern ((t2tb4586 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (set1 (tuple2 a1 c1)))) j)
     (= (t2tb4586 (tb2t4586 j)) j)) :pattern ((t2tb4586 (tb2t4586 j))) )))

(declare-fun t2tb128 ((set (set (tuple21 a c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 a c))))) (sort (set1 (set1 (tuple2 a1 c1)))
  (t2tb128 x))))

(declare-fun tb2t128 (uni) (set (set (tuple21 a c))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 a c)))))
  (! (= (tb2t128 (t2tb128 i)) i) :pattern ((t2tb128 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 a1 c1))) j) (= (t2tb128 (tb2t128 j)) j)) :pattern (
  (t2tb128 (tb2t128 j))) )))

;; subset_def
  (assert
  (forall ((s (set (set (tuple21 a c)))) (t (set (set (tuple21 a c)))))
  (= (subset13 s t) (mem (set1 (set1 (tuple2 a1 c1))) (t2tb128 s)
  (power (set1 (tuple2 a1 c1)) (t2tb128 t))))))

(declare-fun t2tb129 ((set (tuple21 a c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a c)))) (sort (set1 (tuple2 a1 c1)) (t2tb129 x))))

(declare-fun tb2t129 (uni) (set (tuple21 a c)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a c))))
  (! (= (tb2t129 (t2tb129 i)) i) :pattern ((t2tb129 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 c1)) j) (= (t2tb129 (tb2t129 j)) j)) :pattern (
  (t2tb129 (tb2t129 j))) )))

;; subset_def
  (assert
  (forall ((s (set (tuple21 a c))) (t (set (tuple21 a c))))
  (= (subset11 s t) (mem11 s (tb2t128 (power (tuple2 a1 c1) (t2tb129 t)))))))

(declare-fun t2tb130 ((set (set (tuple21 b c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 b c))))) (sort (set1 (set1 (tuple2 b1 c1)))
  (t2tb130 x))))

(declare-fun tb2t130 (uni) (set (set (tuple21 b c))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 b c)))))
  (! (= (tb2t130 (t2tb130 i)) i) :pattern ((t2tb130 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 b1 c1))) j) (= (t2tb130 (tb2t130 j)) j)) :pattern (
  (t2tb130 (tb2t130 j))) )))

(declare-fun t2tb131 ((set (tuple21 b c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 b c)))) (sort (set1 (tuple2 b1 c1)) (t2tb131 x))))

(declare-fun tb2t131 (uni) (set (tuple21 b c)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 b c))))
  (! (= (tb2t131 (t2tb131 i)) i) :pattern ((t2tb131 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 b1 c1)) j) (= (t2tb131 (tb2t131 j)) j)) :pattern (
  (t2tb131 (tb2t131 j))) )))

;; subset_def
  (assert
  (forall ((s (set (tuple21 b c))) (t (set (tuple21 b c))))
  (= (subset10 s t) (mem (set1 (tuple2 b1 c1)) (t2tb131 s)
  (power (tuple2 b1 c1) (t2tb131 t))))))

(declare-fun t2tb132 ((set c)) uni)

;; t2tb_sort
  (assert (forall ((x (set c))) (sort (set1 c1) (t2tb132 x))))

(declare-fun tb2t132 (uni) (set c))

;; BridgeL
  (assert
  (forall ((i (set c)))
  (! (= (tb2t132 (t2tb132 i)) i) :pattern ((t2tb132 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 c1) j) (= (t2tb132 (tb2t132 j)) j)) :pattern ((t2tb132
                                                                   (tb2t132
                                                                   j))) )))

(declare-fun t2tb264 ((set (set c))) uni)

;; t2tb_sort
  (assert (forall ((x (set (set c)))) (sort (set1 (set1 c1)) (t2tb264 x))))

(declare-fun tb2t264 (uni) (set (set c)))

;; BridgeL
  (assert
  (forall ((i (set (set c))))
  (! (= (tb2t264 (t2tb264 i)) i) :pattern ((t2tb264 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 c1)) j) (= (t2tb264 (tb2t264 j)) j)) :pattern (
  (t2tb264 (tb2t264 j))) )))

;; subset_def
  (assert
  (forall ((s (set c)) (t (set c)))
  (= (subset9 s t) (mem (set1 c1) (t2tb132 s) (power c1 (t2tb132 t))))))

(declare-fun t2tb37 ((set (tuple21 b a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 b a)))) (sort (set1 (tuple2 b1 a1)) (t2tb37 x))))

(declare-fun tb2t37 (uni) (set (tuple21 b a)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 b a))))
  (! (= (tb2t37 (t2tb37 i)) i) :pattern ((t2tb37 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 b1 a1)) j) (= (t2tb37 (tb2t37 j)) j)) :pattern (
  (t2tb37 (tb2t37 j))) )))

(declare-fun t2tb56 ((set (set (tuple21 b a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 b a))))) (sort (set1 (set1 (tuple2 b1 a1)))
  (t2tb56 x))))

(declare-fun tb2t56 (uni) (set (set (tuple21 b a))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 b a)))))
  (! (= (tb2t56 (t2tb56 i)) i) :pattern ((t2tb56 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 b1 a1))) j) (= (t2tb56 (tb2t56 j)) j)) :pattern (
  (t2tb56 (tb2t56 j))) )))

;; subset_def
  (assert
  (forall ((s (set (tuple21 b a))) (t (set (tuple21 b a))))
  (= (subset8 s t) (mem (set1 (tuple2 b1 a1)) (t2tb37 s)
  (power (tuple2 b1 a1) (t2tb37 t))))))

(declare-fun t2tb43 ((set (set (set (tuple21 a b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (set (tuple21 a b)))))) (sort
  (set1 (set1 (set1 (tuple2 a1 b1)))) (t2tb43 x))))

(declare-fun tb2t43 (uni) (set (set (set (tuple21 a b)))))

;; BridgeL
  (assert
  (forall ((i (set (set (set (tuple21 a b))))))
  (! (= (tb2t43 (t2tb43 i)) i) :pattern ((t2tb43 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (set1 (tuple2 a1 b1)))) j)
     (= (t2tb43 (tb2t43 j)) j)) :pattern ((t2tb43 (tb2t43 j))) )))

(declare-fun t2tb10 ((set (set (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 a b))))) (sort (set1 (set1 (tuple2 a1 b1)))
  (t2tb10 x))))

(declare-fun tb2t10 (uni) (set (set (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 a b)))))
  (! (= (tb2t10 (t2tb10 i)) i) :pattern ((t2tb10 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 a1 b1))) j) (= (t2tb10 (tb2t10 j)) j)) :pattern (
  (t2tb10 (tb2t10 j))) )))

;; subset_def
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set (set (tuple21 a b)))))
  (= (subset7 s t) (mem (set1 (set1 (tuple2 a1 b1))) (t2tb10 s)
  (power (set1 (tuple2 a1 b1)) (t2tb10 t))))))

(declare-fun t2tb11 ((set (tuple21 a b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a b)))) (sort (set1 (tuple2 a1 b1)) (t2tb11 x))))

(declare-fun tb2t11 (uni) (set (tuple21 a b)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a b))))
  (! (= (tb2t11 (t2tb11 i)) i) :pattern ((t2tb11 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 b1)) j) (= (t2tb11 (tb2t11 j)) j)) :pattern (
  (t2tb11 (tb2t11 j))) )))

;; subset_def
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (tuple21 a b))))
  (= (subset6 s t) (mem4 s (tb2t10 (power (tuple2 a1 b1) (t2tb11 t)))))))

(declare-fun t2tb12 ((set b)) uni)

;; t2tb_sort
  (assert (forall ((x (set b))) (sort (set1 b1) (t2tb12 x))))

(declare-fun tb2t12 (uni) (set b))

;; BridgeL
  (assert
  (forall ((i (set b))) (! (= (tb2t12 (t2tb12 i)) i) :pattern ((t2tb12 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 b1) j) (= (t2tb12 (tb2t12 j)) j)) :pattern ((t2tb12
                                                                 (tb2t12 j))) )))

(declare-fun t2tb44 ((set (set b))) uni)

;; t2tb_sort
  (assert (forall ((x (set (set b)))) (sort (set1 (set1 b1)) (t2tb44 x))))

(declare-fun tb2t44 (uni) (set (set b)))

;; BridgeL
  (assert
  (forall ((i (set (set b))))
  (! (= (tb2t44 (t2tb44 i)) i) :pattern ((t2tb44 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 b1)) j) (= (t2tb44 (tb2t44 j)) j)) :pattern (
  (t2tb44 (tb2t44 j))) )))

;; subset_def
  (assert
  (forall ((s (set b)) (t (set b)))
  (= (subset5 s t) (mem (set1 b1) (t2tb12 s) (power b1 (t2tb12 t))))))

(declare-fun t2tb ((set (set a))) uni)

;; t2tb_sort
  (assert (forall ((x (set (set a)))) (sort (set1 (set1 a1)) (t2tb x))))

(declare-fun tb2t (uni) (set (set a)))

;; BridgeL
  (assert
  (forall ((i (set (set a)))) (! (= (tb2t (t2tb i)) i) :pattern ((t2tb i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 a1)) j) (= (t2tb (tb2t j)) j)) :pattern ((t2tb
                                                                    (tb2t j))) )))

(declare-fun t2tb1 ((set a)) uni)

;; t2tb_sort
  (assert (forall ((x (set a))) (sort (set1 a1) (t2tb1 x))))

(declare-fun tb2t1 (uni) (set a))

;; BridgeL
  (assert
  (forall ((i (set a))) (! (= (tb2t1 (t2tb1 i)) i) :pattern ((t2tb1 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 a1) j) (= (t2tb1 (tb2t1 j)) j)) :pattern ((t2tb1
                                                               (tb2t1 j))) )))

;; subset_def
  (assert
  (forall ((s (set a)) (t (set a)))
  (= (subset2 s t) (mem (set1 a1) (t2tb1 s) (power a1 (t2tb1 t))))))

;; subset_def
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t uni))
  (= (subset1 a2 s t) (mem (set1 a2) s (power a2 t))))))

(declare-fun subsetnoteq (ty uni uni) Bool)

;; subsetnoteq_def
  (assert
  (forall ((s (set (tuple21 a (tuple21 b c)))) (t (set (tuple21 a (tuple21 b
  c)))))
  (= (subsetnoteq (tuple2 a1 (tuple2 b1 c1)) (t2tb261 s) (t2tb261 t))
  (and (subset14 s t) (not (infix_eqeq20 s t))))))

;; subsetnoteq_def
  (assert
  (forall ((s (set (set (tuple21 a c)))) (t (set (set (tuple21 a c)))))
  (= (subsetnoteq (set1 (tuple2 a1 c1)) (t2tb128 s) (t2tb128 t))
  (and (subset13 s t) (not (infix_eqeq19 s t))))))

;; subsetnoteq_def
  (assert
  (forall ((s (set (tuple21 a c))) (t (set (tuple21 a c))))
  (= (subsetnoteq (tuple2 a1 c1) (t2tb129 s) (t2tb129 t))
  (and (subset11 s t) (not (infix_eqeq9 s t))))))

;; subsetnoteq_def
  (assert
  (forall ((s (set (tuple21 b c))) (t (set (tuple21 b c))))
  (= (subsetnoteq (tuple2 b1 c1) (t2tb131 s) (t2tb131 t))
  (and (subset10 s t) (not (infix_eqeq8 s t))))))

;; subsetnoteq_def
  (assert
  (forall ((s (set c)) (t (set c)))
  (= (subsetnoteq c1 (t2tb132 s) (t2tb132 t))
  (and (subset9 s t) (not (infix_eqeq7 s t))))))

;; subsetnoteq_def
  (assert
  (forall ((s (set (tuple21 b a))) (t (set (tuple21 b a))))
  (= (subsetnoteq (tuple2 b1 a1) (t2tb37 s) (t2tb37 t))
  (and (subset8 s t) (not (infix_eqeq6 s t))))))

;; subsetnoteq_def
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set (set (tuple21 a b)))))
  (= (subsetnoteq (set1 (tuple2 a1 b1)) (t2tb10 s) (t2tb10 t))
  (and (subset7 s t) (not (infix_eqeq5 s t))))))

;; subsetnoteq_def
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (tuple21 a b))))
  (= (subsetnoteq (tuple2 a1 b1) (t2tb11 s) (t2tb11 t))
  (and (subset6 s t) (not (infix_eqeq4 s t))))))

;; subsetnoteq_def
  (assert
  (forall ((s (set b)) (t (set b)))
  (= (subsetnoteq b1 (t2tb12 s) (t2tb12 t))
  (and (subset5 s t) (not (infix_eqeq3 s t))))))

;; subsetnoteq_def
  (assert
  (forall ((s (set a)) (t (set a)))
  (= (subsetnoteq a1 (t2tb1 s) (t2tb1 t))
  (and (subset2 s t) (not (infix_eqeq1 s t))))))

;; subsetnoteq_def
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t uni))
  (= (subsetnoteq a2 s t) (and (subset1 a2 s t) (not (infix_eqeq a2 s t)))))))

(declare-fun empty (ty) uni)

;; empty_sort
  (assert (forall ((a2 ty)) (sort (set1 a2) (empty a2))))

(declare-fun is_empty (ty uni) Bool)

;; is_empty_def
  (assert
  (forall ((s (set (tuple21 a (tuple21 b c)))))
  (= (is_empty (tuple2 a1 (tuple2 b1 c1)) (t2tb261 s))
  (forall ((x (tuple21 a (tuple21 b c)))) (not (mem14 x s))))))

;; is_empty_def
  (assert
  (forall ((s (set (set (tuple21 a c)))))
  (= (is_empty (set1 (tuple2 a1 c1)) (t2tb128 s))
  (forall ((x (set (tuple21 a c)))) (not (mem11 x s))))))

;; is_empty_def
  (assert
  (forall ((s (set (tuple21 a c))))
  (= (is_empty (tuple2 a1 c1) (t2tb129 s))
  (forall ((x (tuple21 a c))) (not (mem10 x s))))))

;; is_empty_def
  (assert
  (forall ((s (set (tuple21 b c))))
  (= (is_empty (tuple2 b1 c1) (t2tb131 s))
  (forall ((x (tuple21 b c))) (not (mem8 x s))))))

;; is_empty_def
  (assert
  (forall ((s (set c)))
  (= (is_empty c1 (t2tb132 s)) (forall ((x c)) (not (mem7 x s))))))

;; is_empty_def
  (assert
  (forall ((s (set (tuple21 b a))))
  (= (is_empty (tuple2 b1 a1) (t2tb37 s))
  (forall ((x (tuple21 b a))) (not (mem5 x s))))))

;; is_empty_def
  (assert
  (forall ((s (set (set (tuple21 a b)))))
  (= (is_empty (set1 (tuple2 a1 b1)) (t2tb10 s))
  (forall ((x (set (tuple21 a b)))) (not (mem4 x s))))))

;; is_empty_def
  (assert
  (forall ((s (set (tuple21 a b))))
  (= (is_empty (tuple2 a1 b1) (t2tb11 s))
  (forall ((x (tuple21 a b))) (not (mem3 x s))))))

;; is_empty_def
  (assert
  (forall ((s (set b)))
  (= (is_empty b1 (t2tb12 s)) (forall ((x b)) (not (mem2 x s))))))

;; is_empty_def
  (assert
  (forall ((s (set a)))
  (= (is_empty a1 (t2tb1 s)) (forall ((x a)) (not (mem1 x s))))))

;; is_empty_def
  (assert
  (forall ((a2 ty))
  (forall ((s uni))
  (and (=> (is_empty a2 s) (forall ((x uni)) (not (mem a2 x s))))
  (=> (forall ((x uni)) (=> (sort a2 x) (not (mem a2 x s)))) (is_empty a2 s))))))

;; empty_def1
  (assert (forall ((a2 ty)) (is_empty a2 (empty a2))))

;; empty
  (assert
  (forall ((x (tuple21 a (tuple21 b c))))
  (not (mem14 x (tb2t261 (empty (tuple2 a1 (tuple2 b1 c1))))))))

;; empty
  (assert
  (forall ((x (set (tuple21 a c))))
  (not (mem11 x (tb2t128 (empty (set1 (tuple2 a1 c1))))))))

;; empty
  (assert
  (forall ((x (tuple21 a c)))
  (not (mem10 x (tb2t129 (empty (tuple2 a1 c1)))))))

;; empty
  (assert
  (forall ((x (tuple21 b c)))
  (not (mem8 x (tb2t131 (empty (tuple2 b1 c1)))))))

;; empty
  (assert (forall ((x c)) (not (mem7 x (tb2t132 (empty c1))))))

;; empty
  (assert
  (forall ((x (tuple21 b a))) (not (mem5 x (tb2t37 (empty (tuple2 b1 a1)))))))

;; empty
  (assert
  (forall ((x (set (tuple21 a b))))
  (not (mem4 x (tb2t10 (empty (set1 (tuple2 a1 b1))))))))

;; empty
  (assert
  (forall ((x (tuple21 a b))) (not (mem3 x (tb2t11 (empty (tuple2 a1 b1)))))))

;; empty
  (assert (forall ((x b)) (not (mem2 x (tb2t12 (empty b1))))))

;; empty
  (assert (forall ((x a)) (not (mem1 x (tb2t1 (empty a1))))))

;; empty
  (assert (forall ((a2 ty)) (forall ((x uni)) (not (mem a2 x (empty a2))))))

(declare-fun add (ty uni uni) uni)

;; add_sort
  (assert
  (forall ((a2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 a2) (add a2 x x1)))))

(declare-fun t2tb260 ((tuple21 a (tuple21 b c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (tuple21 b c)))) (sort (tuple2 a1 (tuple2 b1 c1))
  (t2tb260 x))))

(declare-fun tb2t260 (uni) (tuple21 a (tuple21 b c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (tuple21 b c))))
  (! (= (tb2t260 (t2tb260 i)) i) :pattern ((t2tb260 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (tuple2 b1 c1)) j) (= (t2tb260 (tb2t260 j)) j)) :pattern (
  (t2tb260 (tb2t260 j))) )))

;; add_def1
  (assert
  (forall ((x (tuple21 a (tuple21 b c))) (y (tuple21 a (tuple21 b c))))
  (forall ((s (set (tuple21 a (tuple21 b c)))))
  (= (mem14 x
  (tb2t261 (add (tuple2 a1 (tuple2 b1 c1)) (t2tb260 y) (t2tb261 s))))
  (or (= x y) (mem14 x s))))))

;; add_def1
  (assert
  (forall ((x (set (tuple21 a c))) (y (set (tuple21 a c))))
  (forall ((s (set (set (tuple21 a c)))))
  (= (mem11 x (tb2t128 (add (set1 (tuple2 a1 c1)) (t2tb129 y) (t2tb128 s))))
  (or (= x y) (mem11 x s))))))

(declare-fun t2tb133 ((tuple21 a c)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 a c))) (sort (tuple2 a1 c1) (t2tb133 x))))

(declare-fun tb2t133 (uni) (tuple21 a c))

;; BridgeL
  (assert
  (forall ((i (tuple21 a c)))
  (! (= (tb2t133 (t2tb133 i)) i) :pattern ((t2tb133 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 c1) j) (= (t2tb133 (tb2t133 j)) j)) :pattern (
  (t2tb133 (tb2t133 j))) )))

;; add_def1
  (assert
  (forall ((x (tuple21 a c)) (y (tuple21 a c)))
  (forall ((s (set (tuple21 a c))))
  (= (mem10 x (tb2t129 (add (tuple2 a1 c1) (t2tb133 y) (t2tb129 s))))
  (or (= x y) (mem10 x s))))))

(declare-fun t2tb134 ((tuple21 b c)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 b c))) (sort (tuple2 b1 c1) (t2tb134 x))))

(declare-fun tb2t134 (uni) (tuple21 b c))

;; BridgeL
  (assert
  (forall ((i (tuple21 b c)))
  (! (= (tb2t134 (t2tb134 i)) i) :pattern ((t2tb134 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 b1 c1) j) (= (t2tb134 (tb2t134 j)) j)) :pattern (
  (t2tb134 (tb2t134 j))) )))

;; add_def1
  (assert
  (forall ((x (tuple21 b c)) (y (tuple21 b c)))
  (forall ((s (set (tuple21 b c))))
  (= (mem8 x (tb2t131 (add (tuple2 b1 c1) (t2tb134 y) (t2tb131 s))))
  (or (= x y) (mem8 x s))))))

(declare-fun t2tb135 (c) uni)

;; t2tb_sort
  (assert (forall ((x c)) (sort c1 (t2tb135 x))))

(declare-fun tb2t135 (uni) c)

;; BridgeL
  (assert
  (forall ((i c)) (! (= (tb2t135 (t2tb135 i)) i) :pattern ((t2tb135 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort c1 j) (= (t2tb135 (tb2t135 j)) j)) :pattern ((t2tb135
                                                            (tb2t135 j))) )))

;; add_def1
  (assert
  (forall ((x c) (y c))
  (forall ((s (set c)))
  (= (mem7 x (tb2t132 (add c1 (t2tb135 y) (t2tb132 s))))
  (or (= x y) (mem7 x s))))))

(declare-fun t2tb38 ((tuple21 b a)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 b a))) (sort (tuple2 b1 a1) (t2tb38 x))))

(declare-fun tb2t38 (uni) (tuple21 b a))

;; BridgeL
  (assert
  (forall ((i (tuple21 b a)))
  (! (= (tb2t38 (t2tb38 i)) i) :pattern ((t2tb38 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 b1 a1) j) (= (t2tb38 (tb2t38 j)) j)) :pattern (
  (t2tb38 (tb2t38 j))) )))

;; add_def1
  (assert
  (forall ((x (tuple21 b a)) (y (tuple21 b a)))
  (forall ((s (set (tuple21 b a))))
  (= (mem5 x (tb2t37 (add (tuple2 b1 a1) (t2tb38 y) (t2tb37 s))))
  (or (= x y) (mem5 x s))))))

;; add_def1
  (assert
  (forall ((x (set (tuple21 a b))) (y (set (tuple21 a b))))
  (forall ((s (set (set (tuple21 a b)))))
  (= (mem4 x (tb2t10 (add (set1 (tuple2 a1 b1)) (t2tb11 y) (t2tb10 s))))
  (or (= x y) (mem4 x s))))))

(declare-fun t2tb13 ((tuple21 a b)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 a b))) (sort (tuple2 a1 b1) (t2tb13 x))))

(declare-fun tb2t13 (uni) (tuple21 a b))

;; BridgeL
  (assert
  (forall ((i (tuple21 a b)))
  (! (= (tb2t13 (t2tb13 i)) i) :pattern ((t2tb13 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 b1) j) (= (t2tb13 (tb2t13 j)) j)) :pattern (
  (t2tb13 (tb2t13 j))) )))

;; add_def1
  (assert
  (forall ((x (tuple21 a b)) (y (tuple21 a b)))
  (forall ((s (set (tuple21 a b))))
  (= (mem3 x (tb2t11 (add (tuple2 a1 b1) (t2tb13 y) (t2tb11 s))))
  (or (= x y) (mem3 x s))))))

(declare-fun t2tb14 (b) uni)

;; t2tb_sort
  (assert (forall ((x b)) (sort b1 (t2tb14 x))))

(declare-fun tb2t14 (uni) b)

;; BridgeL
  (assert
  (forall ((i b)) (! (= (tb2t14 (t2tb14 i)) i) :pattern ((t2tb14 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort b1 j) (= (t2tb14 (tb2t14 j)) j)) :pattern ((t2tb14 (tb2t14 j))) )))

;; add_def1
  (assert
  (forall ((x b) (y b))
  (forall ((s (set b)))
  (= (mem2 x (tb2t12 (add b1 (t2tb14 y) (t2tb12 s))))
  (or (= x y) (mem2 x s))))))

(declare-fun t2tb2 (a) uni)

;; t2tb_sort
  (assert (forall ((x a)) (sort a1 (t2tb2 x))))

(declare-fun tb2t2 (uni) a)

;; BridgeL
  (assert (forall ((i a)) (! (= (tb2t2 (t2tb2 i)) i) :pattern ((t2tb2 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort a1 j) (= (t2tb2 (tb2t2 j)) j)) :pattern ((t2tb2 (tb2t2 j))) )))

;; add_def1
  (assert
  (forall ((x a) (y a))
  (forall ((s (set a)))
  (= (mem1 x (tb2t1 (add a1 (t2tb2 y) (t2tb1 s)))) (or (= x y) (mem1 x s))))))

;; add_def1
  (assert
  (forall ((a2 ty))
  (forall ((x uni) (y uni))
  (=> (sort a2 x)
  (=> (sort a2 y)
  (forall ((s uni)) (= (mem a2 x (add a2 y s)) (or (= x y) (mem a2 x s)))))))))

(declare-fun singleton (ty uni) uni)

;; singleton_sort
  (assert
  (forall ((a2 ty)) (forall ((x uni)) (sort (set1 a2) (singleton a2 x)))))

;; mem_singleton
  (assert
  (forall ((x (tuple21 a (tuple21 b c))) (y (tuple21 a (tuple21 b c))))
  (= (mem14 x (tb2t261 (singleton (tuple2 a1 (tuple2 b1 c1)) (t2tb260 y))))
  (= x y))))

;; mem_singleton
  (assert
  (forall ((x (set (tuple21 a c))) (y (set (tuple21 a c))))
  (= (mem11 x (tb2t128 (singleton (set1 (tuple2 a1 c1)) (t2tb129 y))))
  (= x y))))

;; mem_singleton
  (assert
  (forall ((x (tuple21 a c)) (y (tuple21 a c)))
  (= (mem10 x (tb2t129 (singleton (tuple2 a1 c1) (t2tb133 y)))) (= x y))))

;; mem_singleton
  (assert
  (forall ((x (tuple21 b c)) (y (tuple21 b c)))
  (= (mem8 x (tb2t131 (singleton (tuple2 b1 c1) (t2tb134 y)))) (= x y))))

;; mem_singleton
  (assert
  (forall ((x c) (y c))
  (= (mem7 x (tb2t132 (singleton c1 (t2tb135 y)))) (= x y))))

;; mem_singleton
  (assert
  (forall ((x (tuple21 b a)) (y (tuple21 b a)))
  (= (mem5 x (tb2t37 (singleton (tuple2 b1 a1) (t2tb38 y)))) (= x y))))

;; mem_singleton
  (assert
  (forall ((x (set (tuple21 a b))) (y (set (tuple21 a b))))
  (= (mem4 x (tb2t10 (singleton (set1 (tuple2 a1 b1)) (t2tb11 y)))) (= x y))))

;; mem_singleton
  (assert
  (forall ((x (tuple21 a b)) (y (tuple21 a b)))
  (= (mem3 x (tb2t11 (singleton (tuple2 a1 b1) (t2tb13 y)))) (= x y))))

;; mem_singleton
  (assert
  (forall ((x b) (y b))
  (= (mem2 x (tb2t12 (singleton b1 (t2tb14 y)))) (= x y))))

;; mem_singleton
  (assert
  (forall ((x a) (y a))
  (= (mem1 x (tb2t1 (singleton a1 (t2tb2 y)))) (= x y))))

;; mem_singleton
  (assert
  (forall ((a2 ty))
  (forall ((x uni) (y uni))
  (=> (sort a2 x) (=> (sort a2 y) (= (mem a2 x (singleton a2 y)) (= x y)))))))

(declare-fun remove (ty uni uni) uni)

;; remove_sort
  (assert
  (forall ((a2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 a2) (remove a2 x x1)))))

;; remove_def1
  (assert
  (forall ((x (tuple21 a (tuple21 b c))) (y (tuple21 a (tuple21 b c)))
  (s (set (tuple21 a (tuple21 b c)))))
  (= (mem14 x
  (tb2t261 (remove (tuple2 a1 (tuple2 b1 c1)) (t2tb260 y) (t2tb261 s))))
  (and (not (= x y)) (mem14 x s)))))

;; remove_def1
  (assert
  (forall ((x (set (tuple21 a c))) (y (set (tuple21 a c)))
  (s (set (set (tuple21 a c)))))
  (= (mem11 x
  (tb2t128 (remove (set1 (tuple2 a1 c1)) (t2tb129 y) (t2tb128 s))))
  (and (not (= x y)) (mem11 x s)))))

;; remove_def1
  (assert
  (forall ((x (tuple21 a c)) (y (tuple21 a c)) (s (set (tuple21 a c))))
  (= (mem10 x (tb2t129 (remove (tuple2 a1 c1) (t2tb133 y) (t2tb129 s))))
  (and (not (= x y)) (mem10 x s)))))

;; remove_def1
  (assert
  (forall ((x (tuple21 b c)) (y (tuple21 b c)) (s (set (tuple21 b c))))
  (= (mem8 x (tb2t131 (remove (tuple2 b1 c1) (t2tb134 y) (t2tb131 s))))
  (and (not (= x y)) (mem8 x s)))))

;; remove_def1
  (assert
  (forall ((x c) (y c) (s (set c)))
  (= (mem7 x (tb2t132 (remove c1 (t2tb135 y) (t2tb132 s))))
  (and (not (= x y)) (mem7 x s)))))

;; remove_def1
  (assert
  (forall ((x (tuple21 b a)) (y (tuple21 b a)) (s (set (tuple21 b a))))
  (= (mem5 x (tb2t37 (remove (tuple2 b1 a1) (t2tb38 y) (t2tb37 s))))
  (and (not (= x y)) (mem5 x s)))))

;; remove_def1
  (assert
  (forall ((x (set (tuple21 a b))) (y (set (tuple21 a b)))
  (s (set (set (tuple21 a b)))))
  (= (mem4 x (tb2t10 (remove (set1 (tuple2 a1 b1)) (t2tb11 y) (t2tb10 s))))
  (and (not (= x y)) (mem4 x s)))))

;; remove_def1
  (assert
  (forall ((x (tuple21 a b)) (y (tuple21 a b)) (s (set (tuple21 a b))))
  (= (mem3 x (tb2t11 (remove (tuple2 a1 b1) (t2tb13 y) (t2tb11 s))))
  (and (not (= x y)) (mem3 x s)))))

;; remove_def1
  (assert
  (forall ((x b) (y b) (s (set b)))
  (= (mem2 x (tb2t12 (remove b1 (t2tb14 y) (t2tb12 s))))
  (and (not (= x y)) (mem2 x s)))))

;; remove_def1
  (assert
  (forall ((x a) (y a) (s (set a)))
  (= (mem1 x (tb2t1 (remove a1 (t2tb2 y) (t2tb1 s))))
  (and (not (= x y)) (mem1 x s)))))

;; remove_def1
  (assert
  (forall ((a2 ty))
  (forall ((x uni) (y uni) (s uni))
  (=> (sort a2 x)
  (=> (sort a2 y)
  (= (mem a2 x (remove a2 y s)) (and (not (= x y)) (mem a2 x s))))))))

(declare-fun all (ty) uni)

;; all_sort
  (assert (forall ((a2 ty)) (sort (set1 a2) (all a2))))

;; all_def
  (assert
  (forall ((x (tuple21 a (tuple21 b c)))) (mem14 x
  (tb2t261 (all (tuple2 a1 (tuple2 b1 c1)))))))

;; all_def
  (assert
  (forall ((x (set (tuple21 a c)))) (mem11 x
  (tb2t128 (all (set1 (tuple2 a1 c1)))))))

;; all_def
  (assert
  (forall ((x (tuple21 a c))) (mem10 x (tb2t129 (all (tuple2 a1 c1))))))

;; all_def
  (assert
  (forall ((x (tuple21 b c))) (mem8 x (tb2t131 (all (tuple2 b1 c1))))))

;; all_def
  (assert (forall ((x c)) (mem7 x (tb2t132 (all c1)))))

;; all_def
  (assert
  (forall ((x (tuple21 b a))) (mem5 x (tb2t37 (all (tuple2 b1 a1))))))

;; all_def
  (assert
  (forall ((x (set (tuple21 a b)))) (mem4 x
  (tb2t10 (all (set1 (tuple2 a1 b1)))))))

;; all_def
  (assert
  (forall ((x (tuple21 a b))) (mem3 x (tb2t11 (all (tuple2 a1 b1))))))

;; all_def
  (assert (forall ((x b)) (mem2 x (tb2t12 (all b1)))))

;; all_def
  (assert (forall ((x a)) (mem1 x (tb2t1 (all a1)))))

;; all_def
  (assert (forall ((a2 ty)) (forall ((x uni)) (mem a2 x (all a2)))))

(declare-fun union1 (ty uni uni) uni)

;; union_sort
  (assert
  (forall ((a2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 a2) (union1 a2 x x1)))))

;; mem_union
  (assert
  (forall ((s (set (tuple21 a (tuple21 b c)))) (t (set (tuple21 a (tuple21 b
  c)))) (x (tuple21 a (tuple21 b c))))
  (= (mem14 x
  (tb2t261 (union1 (tuple2 a1 (tuple2 b1 c1)) (t2tb261 s) (t2tb261 t))))
  (or (mem14 x s) (mem14 x t)))))

;; mem_union
  (assert
  (forall ((s (set (set (tuple21 a c)))) (t (set (set (tuple21 a c))))
  (x (set (tuple21 a c))))
  (= (mem11 x
  (tb2t128 (union1 (set1 (tuple2 a1 c1)) (t2tb128 s) (t2tb128 t))))
  (or (mem11 x s) (mem11 x t)))))

;; mem_union
  (assert
  (forall ((s (set (tuple21 a c))) (t (set (tuple21 a c))) (x (tuple21 a c)))
  (= (mem10 x (tb2t129 (union1 (tuple2 a1 c1) (t2tb129 s) (t2tb129 t))))
  (or (mem10 x s) (mem10 x t)))))

;; mem_union
  (assert
  (forall ((s (set (tuple21 b c))) (t (set (tuple21 b c))) (x (tuple21 b c)))
  (= (mem8 x (tb2t131 (union1 (tuple2 b1 c1) (t2tb131 s) (t2tb131 t))))
  (or (mem8 x s) (mem8 x t)))))

;; mem_union
  (assert
  (forall ((s (set c)) (t (set c)) (x c))
  (= (mem7 x (tb2t132 (union1 c1 (t2tb132 s) (t2tb132 t))))
  (or (mem7 x s) (mem7 x t)))))

;; mem_union
  (assert
  (forall ((s (set (tuple21 b a))) (t (set (tuple21 b a))) (x (tuple21 b a)))
  (= (mem5 x (tb2t37 (union1 (tuple2 b1 a1) (t2tb37 s) (t2tb37 t))))
  (or (mem5 x s) (mem5 x t)))))

;; mem_union
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set (set (tuple21 a b))))
  (x (set (tuple21 a b))))
  (= (mem4 x (tb2t10 (union1 (set1 (tuple2 a1 b1)) (t2tb10 s) (t2tb10 t))))
  (or (mem4 x s) (mem4 x t)))))

;; mem_union
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (tuple21 a b))) (x (tuple21 a b)))
  (= (mem3 x (tb2t11 (union1 (tuple2 a1 b1) (t2tb11 s) (t2tb11 t))))
  (or (mem3 x s) (mem3 x t)))))

;; mem_union
  (assert
  (forall ((s (set b)) (t (set b)) (x b))
  (= (mem2 x (tb2t12 (union1 b1 (t2tb12 s) (t2tb12 t))))
  (or (mem2 x s) (mem2 x t)))))

;; mem_union
  (assert
  (forall ((s (set a)) (t (set a)) (x a))
  (= (mem1 x (tb2t1 (union1 a1 (t2tb1 s) (t2tb1 t))))
  (or (mem1 x s) (mem1 x t)))))

;; mem_union
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t uni) (x uni))
  (= (mem a2 x (union1 a2 s t)) (or (mem a2 x s) (mem a2 x t))))))

(declare-fun inter (ty uni uni) uni)

;; inter_sort
  (assert
  (forall ((a2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 a2) (inter a2 x x1)))))

;; mem_inter
  (assert
  (forall ((s (set (tuple21 a (tuple21 b c)))) (t (set (tuple21 a (tuple21 b
  c)))) (x (tuple21 a (tuple21 b c))))
  (= (mem14 x
  (tb2t261 (inter (tuple2 a1 (tuple2 b1 c1)) (t2tb261 s) (t2tb261 t))))
  (and (mem14 x s) (mem14 x t)))))

;; mem_inter
  (assert
  (forall ((s (set (set (tuple21 a c)))) (t (set (set (tuple21 a c))))
  (x (set (tuple21 a c))))
  (= (mem11 x
  (tb2t128 (inter (set1 (tuple2 a1 c1)) (t2tb128 s) (t2tb128 t))))
  (and (mem11 x s) (mem11 x t)))))

;; mem_inter
  (assert
  (forall ((s (set (tuple21 a c))) (t (set (tuple21 a c))) (x (tuple21 a c)))
  (= (mem10 x (tb2t129 (inter (tuple2 a1 c1) (t2tb129 s) (t2tb129 t))))
  (and (mem10 x s) (mem10 x t)))))

;; mem_inter
  (assert
  (forall ((s (set (tuple21 b c))) (t (set (tuple21 b c))) (x (tuple21 b c)))
  (= (mem8 x (tb2t131 (inter (tuple2 b1 c1) (t2tb131 s) (t2tb131 t))))
  (and (mem8 x s) (mem8 x t)))))

;; mem_inter
  (assert
  (forall ((s (set c)) (t (set c)) (x c))
  (= (mem7 x (tb2t132 (inter c1 (t2tb132 s) (t2tb132 t))))
  (and (mem7 x s) (mem7 x t)))))

;; mem_inter
  (assert
  (forall ((s (set (tuple21 b a))) (t (set (tuple21 b a))) (x (tuple21 b a)))
  (= (mem5 x (tb2t37 (inter (tuple2 b1 a1) (t2tb37 s) (t2tb37 t))))
  (and (mem5 x s) (mem5 x t)))))

;; mem_inter
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set (set (tuple21 a b))))
  (x (set (tuple21 a b))))
  (= (mem4 x (tb2t10 (inter (set1 (tuple2 a1 b1)) (t2tb10 s) (t2tb10 t))))
  (and (mem4 x s) (mem4 x t)))))

;; mem_inter
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (tuple21 a b))) (x (tuple21 a b)))
  (= (mem3 x (tb2t11 (inter (tuple2 a1 b1) (t2tb11 s) (t2tb11 t))))
  (and (mem3 x s) (mem3 x t)))))

;; mem_inter
  (assert
  (forall ((s (set b)) (t (set b)) (x b))
  (= (mem2 x (tb2t12 (inter b1 (t2tb12 s) (t2tb12 t))))
  (and (mem2 x s) (mem2 x t)))))

;; mem_inter
  (assert
  (forall ((s (set a)) (t (set a)) (x a))
  (= (mem1 x (tb2t1 (inter a1 (t2tb1 s) (t2tb1 t))))
  (and (mem1 x s) (mem1 x t)))))

;; mem_inter
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t uni) (x uni))
  (= (mem a2 x (inter a2 s t)) (and (mem a2 x s) (mem a2 x t))))))

(declare-fun diff (ty uni uni) uni)

;; diff_sort
  (assert
  (forall ((a2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 a2) (diff a2 x x1)))))

;; mem_diff
  (assert
  (forall ((s (set (tuple21 a (tuple21 b c)))) (t (set (tuple21 a (tuple21 b
  c)))) (x (tuple21 a (tuple21 b c))))
  (= (mem14 x
  (tb2t261 (diff (tuple2 a1 (tuple2 b1 c1)) (t2tb261 s) (t2tb261 t))))
  (and (mem14 x s) (not (mem14 x t))))))

;; mem_diff
  (assert
  (forall ((s (set (set (tuple21 a c)))) (t (set (set (tuple21 a c))))
  (x (set (tuple21 a c))))
  (= (mem11 x (tb2t128 (diff (set1 (tuple2 a1 c1)) (t2tb128 s) (t2tb128 t))))
  (and (mem11 x s) (not (mem11 x t))))))

;; mem_diff
  (assert
  (forall ((s (set (tuple21 a c))) (t (set (tuple21 a c))) (x (tuple21 a c)))
  (= (mem10 x (tb2t129 (diff (tuple2 a1 c1) (t2tb129 s) (t2tb129 t))))
  (and (mem10 x s) (not (mem10 x t))))))

;; mem_diff
  (assert
  (forall ((s (set (tuple21 b c))) (t (set (tuple21 b c))) (x (tuple21 b c)))
  (= (mem8 x (tb2t131 (diff (tuple2 b1 c1) (t2tb131 s) (t2tb131 t))))
  (and (mem8 x s) (not (mem8 x t))))))

;; mem_diff
  (assert
  (forall ((s (set c)) (t (set c)) (x c))
  (= (mem7 x (tb2t132 (diff c1 (t2tb132 s) (t2tb132 t))))
  (and (mem7 x s) (not (mem7 x t))))))

;; mem_diff
  (assert
  (forall ((s (set (tuple21 b a))) (t (set (tuple21 b a))) (x (tuple21 b a)))
  (= (mem5 x (tb2t37 (diff (tuple2 b1 a1) (t2tb37 s) (t2tb37 t))))
  (and (mem5 x s) (not (mem5 x t))))))

;; mem_diff
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set (set (tuple21 a b))))
  (x (set (tuple21 a b))))
  (= (mem4 x (tb2t10 (diff (set1 (tuple2 a1 b1)) (t2tb10 s) (t2tb10 t))))
  (and (mem4 x s) (not (mem4 x t))))))

;; mem_diff
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (tuple21 a b))) (x (tuple21 a b)))
  (= (mem3 x (tb2t11 (diff (tuple2 a1 b1) (t2tb11 s) (t2tb11 t))))
  (and (mem3 x s) (not (mem3 x t))))))

;; mem_diff
  (assert
  (forall ((s (set b)) (t (set b)) (x b))
  (= (mem2 x (tb2t12 (diff b1 (t2tb12 s) (t2tb12 t))))
  (and (mem2 x s) (not (mem2 x t))))))

;; mem_diff
  (assert
  (forall ((s (set a)) (t (set a)) (x a))
  (= (mem1 x (tb2t1 (diff a1 (t2tb1 s) (t2tb1 t))))
  (and (mem1 x s) (not (mem1 x t))))))

;; mem_diff
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t uni) (x uni))
  (= (mem a2 x (diff a2 s t)) (and (mem a2 x s) (not (mem a2 x t)))))))

(declare-fun Tuple2 (ty ty uni uni) uni)

;; Tuple2_sort
  (assert
  (forall ((a2 ty) (a3 ty))
  (forall ((x uni) (x1 uni)) (sort (tuple2 a3 a2) (Tuple2 a3 a2 x x1)))))

(declare-fun Tuple2_proj_1 (ty ty uni) uni)

;; Tuple2_proj_1_sort
  (assert
  (forall ((a2 ty) (a3 ty))
  (forall ((x uni)) (sort a3 (Tuple2_proj_1 a3 a2 x)))))

;; Tuple2_proj_1_def
  (assert
  (forall ((a2 ty) (a3 ty))
  (forall ((u uni) (u1 uni))
  (=> (sort a3 u) (= (Tuple2_proj_1 a3 a2 (Tuple2 a3 a2 u u1)) u)))))

(declare-fun Tuple2_proj_2 (ty ty uni) uni)

;; Tuple2_proj_2_sort
  (assert
  (forall ((a2 ty) (a3 ty))
  (forall ((x uni)) (sort a2 (Tuple2_proj_2 a3 a2 x)))))

;; Tuple2_proj_2_def
  (assert
  (forall ((a2 ty) (a3 ty))
  (forall ((u uni) (u1 uni))
  (=> (sort a2 u1) (= (Tuple2_proj_2 a3 a2 (Tuple2 a3 a2 u u1)) u1)))))

;; tuple2_inversion
  (assert
  (forall ((a2 ty) (a3 ty))
  (forall ((u uni))
  (=> (sort (tuple2 a3 a2) u)
  (= u (Tuple2 a3 a2 (Tuple2_proj_1 a3 a2 u) (Tuple2_proj_2 a3 a2 u)))))))

(declare-fun times (ty ty uni uni) uni)

;; times_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (tuple2 a2 b2)) (times b2 a2 x x1)))))

;; mem_times
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set (tuple21 a (tuple21 b c)))) (x uni) (y (tuple21 a
  (tuple21 b c))))
  (= (mem (tuple2 a2 (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 a2 (tuple2 a1 (tuple2 b1 c1)) x (t2tb260 y))
  (times (tuple2 a1 (tuple2 b1 c1)) a2 s (t2tb261 t)))
  (and (mem a2 x s) (mem14 y t))))))

;; mem_times
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set (set (tuple21 a c)))) (x uni) (y (set (tuple21 a
  c))))
  (= (mem (tuple2 a2 (set1 (tuple2 a1 c1)))
  (Tuple2 a2 (set1 (tuple2 a1 c1)) x (t2tb129 y))
  (times (set1 (tuple2 a1 c1)) a2 s (t2tb128 t)))
  (and (mem a2 x s) (mem11 y t))))))

;; mem_times
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set (tuple21 a c))) (x uni) (y (tuple21 a c)))
  (= (mem (tuple2 a2 (tuple2 a1 c1)) (Tuple2 a2 (tuple2 a1 c1) x (t2tb133 y))
  (times (tuple2 a1 c1) a2 s (t2tb129 t))) (and (mem a2 x s) (mem10 y t))))))

;; mem_times
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set (tuple21 b c))) (x uni) (y (tuple21 b c)))
  (= (mem (tuple2 a2 (tuple2 b1 c1)) (Tuple2 a2 (tuple2 b1 c1) x (t2tb134 y))
  (times (tuple2 b1 c1) a2 s (t2tb131 t))) (and (mem a2 x s) (mem8 y t))))))

;; mem_times
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set c)) (x uni) (y c))
  (= (mem (tuple2 a2 c1) (Tuple2 a2 c1 x (t2tb135 y))
  (times c1 a2 s (t2tb132 t))) (and (mem a2 x s) (mem7 y t))))))

;; mem_times
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set (tuple21 b a))) (x uni) (y (tuple21 b a)))
  (= (mem (tuple2 a2 (tuple2 b1 a1)) (Tuple2 a2 (tuple2 b1 a1) x (t2tb38 y))
  (times (tuple2 b1 a1) a2 s (t2tb37 t))) (and (mem a2 x s) (mem5 y t))))))

;; mem_times
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set (set (tuple21 a b)))) (x uni) (y (set (tuple21 a
  b))))
  (= (mem (tuple2 a2 (set1 (tuple2 a1 b1)))
  (Tuple2 a2 (set1 (tuple2 a1 b1)) x (t2tb11 y))
  (times (set1 (tuple2 a1 b1)) a2 s (t2tb10 t)))
  (and (mem a2 x s) (mem4 y t))))))

;; mem_times
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set (tuple21 a b))) (x uni) (y (tuple21 a b)))
  (= (mem (tuple2 a2 (tuple2 a1 b1)) (Tuple2 a2 (tuple2 a1 b1) x (t2tb13 y))
  (times (tuple2 a1 b1) a2 s (t2tb11 t))) (and (mem a2 x s) (mem3 y t))))))

;; mem_times
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set b)) (x uni) (y b))
  (= (mem (tuple2 a2 b1) (Tuple2 a2 b1 x (t2tb14 y))
  (times b1 a2 s (t2tb12 t))) (and (mem a2 x s) (mem2 y t))))))

;; mem_times
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set a)) (x uni) (y a))
  (= (mem (tuple2 a2 a1) (Tuple2 a2 a1 x (t2tb2 y))
  (times a1 a2 s (t2tb1 t))) (and (mem a2 x s) (mem1 y t))))))

(declare-fun t2tb4425 ((set (tuple21 (tuple21 a (tuple21 b c)) (tuple21 a
  (tuple21 b c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a (tuple21 b c)) (tuple21 a (tuple21 b
  c)))))) (sort
  (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 (tuple2 b1 c1))))
  (t2tb4425 x))))

(declare-fun tb2t4425 (uni) (set (tuple21 (tuple21 a (tuple21 b c))
  (tuple21 a (tuple21 b c)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a (tuple21 b c)) (tuple21 a (tuple21 b
  c)))))) (! (= (tb2t4425 (t2tb4425 i)) i) :pattern ((t2tb4425 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 (tuple2 b1 c1)))) j)
     (= (t2tb4425 (tb2t4425 j)) j)) :pattern ((t2tb4425 (tb2t4425 j))) )))

(declare-fun t2tb4426 ((tuple21 (tuple21 a (tuple21 b c)) (tuple21 a
  (tuple21 b c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a (tuple21 b c)) (tuple21 a (tuple21 b c)))))
  (sort (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 (tuple2 b1 c1)))
  (t2tb4426 x))))

(declare-fun tb2t4426 (uni) (tuple21 (tuple21 a (tuple21 b c)) (tuple21 a
  (tuple21 b c))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a (tuple21 b c)) (tuple21 a (tuple21 b c)))))
  (! (= (tb2t4426 (t2tb4426 i)) i) :pattern ((t2tb4426 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 (tuple2 b1 c1)))
     j) (= (t2tb4426 (tb2t4426 j)) j)) :pattern ((t2tb4426 (tb2t4426 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a (tuple21 b c)))) (t (set (tuple21 a (tuple21 b
  c)))) (x (tuple21 a (tuple21 b c))) (y (tuple21 a (tuple21 b c))))
  (= (mem (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 (tuple2 b1 c1)) (t2tb260 x)
  (t2tb260 y))
  (times (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 (tuple2 b1 c1)) (t2tb261 s)
  (t2tb261 t))) (and (mem14 x s) (mem14 y t)))))

(declare-fun t2tb4427 ((set (tuple21 (tuple21 a (tuple21 b c))
  (set (tuple21 a c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a (tuple21 b c)) (set (tuple21 a c))))))
  (sort (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) (set1 (tuple2 a1 c1))))
  (t2tb4427 x))))

(declare-fun tb2t4427 (uni) (set (tuple21 (tuple21 a (tuple21 b c))
  (set (tuple21 a c)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a (tuple21 b c)) (set (tuple21 a c))))))
  (! (= (tb2t4427 (t2tb4427 i)) i) :pattern ((t2tb4427 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) (set1 (tuple2 a1 c1)))) j)
     (= (t2tb4427 (tb2t4427 j)) j)) :pattern ((t2tb4427 (tb2t4427 j))) )))

(declare-fun t2tb4428 ((tuple21 (tuple21 a (tuple21 b c)) (set (tuple21 a
  c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a (tuple21 b c)) (set (tuple21 a c))))) (sort
  (tuple2 (tuple2 a1 (tuple2 b1 c1)) (set1 (tuple2 a1 c1))) (t2tb4428 x))))

(declare-fun tb2t4428 (uni) (tuple21 (tuple21 a (tuple21 b c))
  (set (tuple21 a c))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a (tuple21 b c)) (set (tuple21 a c)))))
  (! (= (tb2t4428 (t2tb4428 i)) i) :pattern ((t2tb4428 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 (tuple2 b1 c1)) (set1 (tuple2 a1 c1))) j)
     (= (t2tb4428 (tb2t4428 j)) j)) :pattern ((t2tb4428 (tb2t4428 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a (tuple21 b c)))) (t (set (set (tuple21 a c))))
  (x (tuple21 a (tuple21 b c))) (y (set (tuple21 a c))))
  (= (mem (tuple2 (tuple2 a1 (tuple2 b1 c1)) (set1 (tuple2 a1 c1)))
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) (set1 (tuple2 a1 c1)) (t2tb260 x)
  (t2tb129 y))
  (times (set1 (tuple2 a1 c1)) (tuple2 a1 (tuple2 b1 c1)) (t2tb261 s)
  (t2tb128 t))) (and (mem14 x s) (mem11 y t)))))

(declare-fun t2tb4429 ((set (tuple21 (tuple21 a (tuple21 b c)) (tuple21 a
  c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a (tuple21 b c)) (tuple21 a c))))) (sort
  (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 c1))) (t2tb4429 x))))

(declare-fun tb2t4429 (uni) (set (tuple21 (tuple21 a (tuple21 b c))
  (tuple21 a c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a (tuple21 b c)) (tuple21 a c)))))
  (! (= (tb2t4429 (t2tb4429 i)) i) :pattern ((t2tb4429 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 c1))) j)
     (= (t2tb4429 (tb2t4429 j)) j)) :pattern ((t2tb4429 (tb2t4429 j))) )))

(declare-fun t2tb4430 ((tuple21 (tuple21 a (tuple21 b c)) (tuple21 a
  c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a (tuple21 b c)) (tuple21 a c)))) (sort
  (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 c1)) (t2tb4430 x))))

(declare-fun tb2t4430 (uni) (tuple21 (tuple21 a (tuple21 b c)) (tuple21 a
  c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a (tuple21 b c)) (tuple21 a c))))
  (! (= (tb2t4430 (t2tb4430 i)) i) :pattern ((t2tb4430 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 c1)) j)
     (= (t2tb4430 (tb2t4430 j)) j)) :pattern ((t2tb4430 (tb2t4430 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a (tuple21 b c)))) (t (set (tuple21 a c)))
  (x (tuple21 a (tuple21 b c))) (y (tuple21 a c)))
  (= (mem (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 c1))
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 c1) (t2tb260 x) (t2tb133 y))
  (times (tuple2 a1 c1) (tuple2 a1 (tuple2 b1 c1)) (t2tb261 s) (t2tb129 t)))
  (and (mem14 x s) (mem10 y t)))))

(declare-fun t2tb5145 ((set (tuple21 (tuple21 a (tuple21 b c)) (tuple21 b
  c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a (tuple21 b c)) (tuple21 b c))))) (sort
  (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 b1 c1))) (t2tb5145 x))))

(declare-fun tb2t5145 (uni) (set (tuple21 (tuple21 a (tuple21 b c))
  (tuple21 b c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a (tuple21 b c)) (tuple21 b c)))))
  (! (= (tb2t5145 (t2tb5145 i)) i) :pattern ((t2tb5145 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 b1 c1))) j)
     (= (t2tb5145 (tb2t5145 j)) j)) :pattern ((t2tb5145 (tb2t5145 j))) )))

(declare-fun t2tb5146 ((tuple21 (tuple21 a (tuple21 b c)) (tuple21 b
  c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a (tuple21 b c)) (tuple21 b c)))) (sort
  (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 b1 c1)) (t2tb5146 x))))

(declare-fun tb2t5146 (uni) (tuple21 (tuple21 a (tuple21 b c)) (tuple21 b
  c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a (tuple21 b c)) (tuple21 b c))))
  (! (= (tb2t5146 (t2tb5146 i)) i) :pattern ((t2tb5146 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 b1 c1)) j)
     (= (t2tb5146 (tb2t5146 j)) j)) :pattern ((t2tb5146 (tb2t5146 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a (tuple21 b c)))) (t (set (tuple21 b c)))
  (x (tuple21 a (tuple21 b c))) (y (tuple21 b c)))
  (= (mem (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 b1 c1))
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 b1 c1) (t2tb260 x) (t2tb134 y))
  (times (tuple2 b1 c1) (tuple2 a1 (tuple2 b1 c1)) (t2tb261 s) (t2tb131 t)))
  (and (mem14 x s) (mem8 y t)))))

(declare-fun t2tb4431 ((set (tuple21 (tuple21 a (tuple21 b c)) c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a (tuple21 b c)) c)))) (sort
  (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) c1)) (t2tb4431 x))))

(declare-fun tb2t4431 (uni) (set (tuple21 (tuple21 a (tuple21 b c)) c)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a (tuple21 b c)) c))))
  (! (= (tb2t4431 (t2tb4431 i)) i) :pattern ((t2tb4431 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) c1)) j)
     (= (t2tb4431 (tb2t4431 j)) j)) :pattern ((t2tb4431 (tb2t4431 j))) )))

(declare-fun t2tb4432 ((tuple21 (tuple21 a (tuple21 b c)) c)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a (tuple21 b c)) c))) (sort
  (tuple2 (tuple2 a1 (tuple2 b1 c1)) c1) (t2tb4432 x))))

(declare-fun tb2t4432 (uni) (tuple21 (tuple21 a (tuple21 b c)) c))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a (tuple21 b c)) c)))
  (! (= (tb2t4432 (t2tb4432 i)) i) :pattern ((t2tb4432 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 (tuple2 b1 c1)) c1) j)
     (= (t2tb4432 (tb2t4432 j)) j)) :pattern ((t2tb4432 (tb2t4432 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a (tuple21 b c)))) (t (set c)) (x (tuple21 a
  (tuple21 b c))) (y c))
  (= (mem (tuple2 (tuple2 a1 (tuple2 b1 c1)) c1)
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) c1 (t2tb260 x) (t2tb135 y))
  (times c1 (tuple2 a1 (tuple2 b1 c1)) (t2tb261 s) (t2tb132 t)))
  (and (mem14 x s) (mem7 y t)))))

(declare-fun t2tb5147 ((set (tuple21 (tuple21 a (tuple21 b c)) (tuple21 b
  a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a (tuple21 b c)) (tuple21 b a))))) (sort
  (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 b1 a1))) (t2tb5147 x))))

(declare-fun tb2t5147 (uni) (set (tuple21 (tuple21 a (tuple21 b c))
  (tuple21 b a))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a (tuple21 b c)) (tuple21 b a)))))
  (! (= (tb2t5147 (t2tb5147 i)) i) :pattern ((t2tb5147 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 b1 a1))) j)
     (= (t2tb5147 (tb2t5147 j)) j)) :pattern ((t2tb5147 (tb2t5147 j))) )))

(declare-fun t2tb5148 ((tuple21 (tuple21 a (tuple21 b c)) (tuple21 b
  a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a (tuple21 b c)) (tuple21 b a)))) (sort
  (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 b1 a1)) (t2tb5148 x))))

(declare-fun tb2t5148 (uni) (tuple21 (tuple21 a (tuple21 b c)) (tuple21 b
  a)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a (tuple21 b c)) (tuple21 b a))))
  (! (= (tb2t5148 (t2tb5148 i)) i) :pattern ((t2tb5148 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 b1 a1)) j)
     (= (t2tb5148 (tb2t5148 j)) j)) :pattern ((t2tb5148 (tb2t5148 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a (tuple21 b c)))) (t (set (tuple21 b a)))
  (x (tuple21 a (tuple21 b c))) (y (tuple21 b a)))
  (= (mem (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 b1 a1))
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 b1 a1) (t2tb260 x) (t2tb38 y))
  (times (tuple2 b1 a1) (tuple2 a1 (tuple2 b1 c1)) (t2tb261 s) (t2tb37 t)))
  (and (mem14 x s) (mem5 y t)))))

(declare-fun t2tb4433 ((set (tuple21 (tuple21 a (tuple21 b c))
  (set (tuple21 a b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a (tuple21 b c)) (set (tuple21 a b))))))
  (sort (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) (set1 (tuple2 a1 b1))))
  (t2tb4433 x))))

(declare-fun tb2t4433 (uni) (set (tuple21 (tuple21 a (tuple21 b c))
  (set (tuple21 a b)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a (tuple21 b c)) (set (tuple21 a b))))))
  (! (= (tb2t4433 (t2tb4433 i)) i) :pattern ((t2tb4433 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) (set1 (tuple2 a1 b1)))) j)
     (= (t2tb4433 (tb2t4433 j)) j)) :pattern ((t2tb4433 (tb2t4433 j))) )))

(declare-fun t2tb4434 ((tuple21 (tuple21 a (tuple21 b c)) (set (tuple21 a
  b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a (tuple21 b c)) (set (tuple21 a b))))) (sort
  (tuple2 (tuple2 a1 (tuple2 b1 c1)) (set1 (tuple2 a1 b1))) (t2tb4434 x))))

(declare-fun tb2t4434 (uni) (tuple21 (tuple21 a (tuple21 b c))
  (set (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a (tuple21 b c)) (set (tuple21 a b)))))
  (! (= (tb2t4434 (t2tb4434 i)) i) :pattern ((t2tb4434 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 (tuple2 b1 c1)) (set1 (tuple2 a1 b1))) j)
     (= (t2tb4434 (tb2t4434 j)) j)) :pattern ((t2tb4434 (tb2t4434 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a (tuple21 b c)))) (t (set (set (tuple21 a b))))
  (x (tuple21 a (tuple21 b c))) (y (set (tuple21 a b))))
  (= (mem (tuple2 (tuple2 a1 (tuple2 b1 c1)) (set1 (tuple2 a1 b1)))
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) (set1 (tuple2 a1 b1)) (t2tb260 x)
  (t2tb11 y))
  (times (set1 (tuple2 a1 b1)) (tuple2 a1 (tuple2 b1 c1)) (t2tb261 s)
  (t2tb10 t))) (and (mem14 x s) (mem4 y t)))))

(declare-fun t2tb4435 ((set (tuple21 (tuple21 a (tuple21 b c)) (tuple21 a
  b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a (tuple21 b c)) (tuple21 a b))))) (sort
  (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 b1))) (t2tb4435 x))))

(declare-fun tb2t4435 (uni) (set (tuple21 (tuple21 a (tuple21 b c))
  (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a (tuple21 b c)) (tuple21 a b)))))
  (! (= (tb2t4435 (t2tb4435 i)) i) :pattern ((t2tb4435 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 b1))) j)
     (= (t2tb4435 (tb2t4435 j)) j)) :pattern ((t2tb4435 (tb2t4435 j))) )))

(declare-fun t2tb4436 ((tuple21 (tuple21 a (tuple21 b c)) (tuple21 a
  b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a (tuple21 b c)) (tuple21 a b)))) (sort
  (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 b1)) (t2tb4436 x))))

(declare-fun tb2t4436 (uni) (tuple21 (tuple21 a (tuple21 b c)) (tuple21 a
  b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a (tuple21 b c)) (tuple21 a b))))
  (! (= (tb2t4436 (t2tb4436 i)) i) :pattern ((t2tb4436 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 b1)) j)
     (= (t2tb4436 (tb2t4436 j)) j)) :pattern ((t2tb4436 (tb2t4436 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a (tuple21 b c)))) (t (set (tuple21 a b)))
  (x (tuple21 a (tuple21 b c))) (y (tuple21 a b)))
  (= (mem (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 b1))
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 b1) (t2tb260 x) (t2tb13 y))
  (times (tuple2 a1 b1) (tuple2 a1 (tuple2 b1 c1)) (t2tb261 s) (t2tb11 t)))
  (and (mem14 x s) (mem3 y t)))))

(declare-fun t2tb4437 ((set (tuple21 (tuple21 a (tuple21 b c)) b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a (tuple21 b c)) b)))) (sort
  (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) b1)) (t2tb4437 x))))

(declare-fun tb2t4437 (uni) (set (tuple21 (tuple21 a (tuple21 b c)) b)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a (tuple21 b c)) b))))
  (! (= (tb2t4437 (t2tb4437 i)) i) :pattern ((t2tb4437 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) b1)) j)
     (= (t2tb4437 (tb2t4437 j)) j)) :pattern ((t2tb4437 (tb2t4437 j))) )))

(declare-fun t2tb4438 ((tuple21 (tuple21 a (tuple21 b c)) b)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a (tuple21 b c)) b))) (sort
  (tuple2 (tuple2 a1 (tuple2 b1 c1)) b1) (t2tb4438 x))))

(declare-fun tb2t4438 (uni) (tuple21 (tuple21 a (tuple21 b c)) b))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a (tuple21 b c)) b)))
  (! (= (tb2t4438 (t2tb4438 i)) i) :pattern ((t2tb4438 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 (tuple2 b1 c1)) b1) j)
     (= (t2tb4438 (tb2t4438 j)) j)) :pattern ((t2tb4438 (tb2t4438 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a (tuple21 b c)))) (t (set b)) (x (tuple21 a
  (tuple21 b c))) (y b))
  (= (mem (tuple2 (tuple2 a1 (tuple2 b1 c1)) b1)
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) b1 (t2tb260 x) (t2tb14 y))
  (times b1 (tuple2 a1 (tuple2 b1 c1)) (t2tb261 s) (t2tb12 t)))
  (and (mem14 x s) (mem2 y t)))))

(declare-fun t2tb4439 ((tuple21 (tuple21 a (tuple21 b c)) a)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a (tuple21 b c)) a))) (sort
  (tuple2 (tuple2 a1 (tuple2 b1 c1)) a1) (t2tb4439 x))))

(declare-fun tb2t4439 (uni) (tuple21 (tuple21 a (tuple21 b c)) a))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a (tuple21 b c)) a)))
  (! (= (tb2t4439 (t2tb4439 i)) i) :pattern ((t2tb4439 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 (tuple2 b1 c1)) a1) j)
     (= (t2tb4439 (tb2t4439 j)) j)) :pattern ((t2tb4439 (tb2t4439 j))) )))

(declare-fun t2tb4440 ((set (tuple21 (tuple21 a (tuple21 b c)) a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a (tuple21 b c)) a)))) (sort
  (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) a1)) (t2tb4440 x))))

(declare-fun tb2t4440 (uni) (set (tuple21 (tuple21 a (tuple21 b c)) a)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a (tuple21 b c)) a))))
  (! (= (tb2t4440 (t2tb4440 i)) i) :pattern ((t2tb4440 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) a1)) j)
     (= (t2tb4440 (tb2t4440 j)) j)) :pattern ((t2tb4440 (tb2t4440 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a (tuple21 b c)))) (t (set a)) (x (tuple21 a
  (tuple21 b c))) (y a))
  (= (mem (tuple2 (tuple2 a1 (tuple2 b1 c1)) a1)
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) a1 (t2tb260 x) (t2tb2 y))
  (times a1 (tuple2 a1 (tuple2 b1 c1)) (t2tb261 s) (t2tb1 t)))
  (and (mem14 x s) (mem1 y t)))))

;; mem_times
  (assert
  (forall ((b2 ty))
  (forall ((s (set (tuple21 a (tuple21 b c)))) (t uni) (x (tuple21 a
  (tuple21 b c))) (y uni))
  (= (mem (tuple2 (tuple2 a1 (tuple2 b1 c1)) b2)
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) b2 (t2tb260 x) y)
  (times b2 (tuple2 a1 (tuple2 b1 c1)) (t2tb261 s) t))
  (and (mem14 x s) (mem b2 y t))))))

(declare-fun t2tb4461 ((set (tuple21 (set (tuple21 a c)) (tuple21 a
  (tuple21 b c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a c)) (tuple21 a (tuple21 b c))))))
  (sort (set1 (tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 (tuple2 b1 c1))))
  (t2tb4461 x))))

(declare-fun tb2t4461 (uni) (set (tuple21 (set (tuple21 a c)) (tuple21 a
  (tuple21 b c)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a c)) (tuple21 a (tuple21 b c))))))
  (! (= (tb2t4461 (t2tb4461 i)) i) :pattern ((t2tb4461 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 (tuple2 b1 c1)))) j)
     (= (t2tb4461 (tb2t4461 j)) j)) :pattern ((t2tb4461 (tb2t4461 j))) )))

(declare-fun t2tb4462 ((tuple21 (set (tuple21 a c)) (tuple21 a (tuple21 b
  c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a c)) (tuple21 a (tuple21 b c))))) (sort
  (tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 (tuple2 b1 c1))) (t2tb4462 x))))

(declare-fun tb2t4462 (uni) (tuple21 (set (tuple21 a c)) (tuple21 a
  (tuple21 b c))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a c)) (tuple21 a (tuple21 b c)))))
  (! (= (tb2t4462 (t2tb4462 i)) i) :pattern ((t2tb4462 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 (tuple2 b1 c1))) j)
     (= (t2tb4462 (tb2t4462 j)) j)) :pattern ((t2tb4462 (tb2t4462 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a c)))) (t (set (tuple21 a (tuple21 b c))))
  (x (set (tuple21 a c))) (y (tuple21 a (tuple21 b c))))
  (= (mem (tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 (tuple2 b1 c1)) (t2tb129 x)
  (t2tb260 y))
  (times (tuple2 a1 (tuple2 b1 c1)) (set1 (tuple2 a1 c1)) (t2tb128 s)
  (t2tb261 t))) (and (mem11 x s) (mem14 y t)))))

(declare-fun t2tb4463 ((set (tuple21 (set (tuple21 a c)) (set (tuple21 a
  c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a c)) (set (tuple21 a c)))))) (sort
  (set1 (tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 a1 c1)))) (t2tb4463 x))))

(declare-fun tb2t4463 (uni) (set (tuple21 (set (tuple21 a c)) (set (tuple21 a
  c)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a c)) (set (tuple21 a c))))))
  (! (= (tb2t4463 (t2tb4463 i)) i) :pattern ((t2tb4463 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 a1 c1)))) j)
     (= (t2tb4463 (tb2t4463 j)) j)) :pattern ((t2tb4463 (tb2t4463 j))) )))

(declare-fun t2tb4464 ((tuple21 (set (tuple21 a c)) (set (tuple21 a
  c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a c)) (set (tuple21 a c))))) (sort
  (tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 a1 c1))) (t2tb4464 x))))

(declare-fun tb2t4464 (uni) (tuple21 (set (tuple21 a c)) (set (tuple21 a
  c))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a c)) (set (tuple21 a c)))))
  (! (= (tb2t4464 (t2tb4464 i)) i) :pattern ((t2tb4464 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 a1 c1))) j)
     (= (t2tb4464 (tb2t4464 j)) j)) :pattern ((t2tb4464 (tb2t4464 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a c)))) (t (set (set (tuple21 a c))))
  (x (set (tuple21 a c))) (y (set (tuple21 a c))))
  (= (mem (tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 a1 c1)))
  (Tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 a1 c1)) (t2tb129 x)
  (t2tb129 y))
  (times (set1 (tuple2 a1 c1)) (set1 (tuple2 a1 c1)) (t2tb128 s) (t2tb128 t)))
  (and (mem11 x s) (mem11 y t)))))

(declare-fun t2tb4465 ((set (tuple21 (set (tuple21 a c)) (tuple21 a
  c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a c)) (tuple21 a c))))) (sort
  (set1 (tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 c1))) (t2tb4465 x))))

(declare-fun tb2t4465 (uni) (set (tuple21 (set (tuple21 a c)) (tuple21 a
  c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a c)) (tuple21 a c)))))
  (! (= (tb2t4465 (t2tb4465 i)) i) :pattern ((t2tb4465 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 c1))) j)
     (= (t2tb4465 (tb2t4465 j)) j)) :pattern ((t2tb4465 (tb2t4465 j))) )))

(declare-fun t2tb4466 ((tuple21 (set (tuple21 a c)) (tuple21 a c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a c)) (tuple21 a c)))) (sort
  (tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 c1)) (t2tb4466 x))))

(declare-fun tb2t4466 (uni) (tuple21 (set (tuple21 a c)) (tuple21 a c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a c)) (tuple21 a c))))
  (! (= (tb2t4466 (t2tb4466 i)) i) :pattern ((t2tb4466 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 c1)) j)
     (= (t2tb4466 (tb2t4466 j)) j)) :pattern ((t2tb4466 (tb2t4466 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a c)))) (t (set (tuple21 a c)))
  (x (set (tuple21 a c))) (y (tuple21 a c)))
  (= (mem (tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 c1))
  (Tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 c1) (t2tb129 x) (t2tb133 y))
  (times (tuple2 a1 c1) (set1 (tuple2 a1 c1)) (t2tb128 s) (t2tb129 t)))
  (and (mem11 x s) (mem10 y t)))))

(declare-fun t2tb5149 ((tuple21 (set (tuple21 a c)) (tuple21 b c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a c)) (tuple21 b c)))) (sort
  (tuple2 (set1 (tuple2 a1 c1)) (tuple2 b1 c1)) (t2tb5149 x))))

(declare-fun tb2t5149 (uni) (tuple21 (set (tuple21 a c)) (tuple21 b c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a c)) (tuple21 b c))))
  (! (= (tb2t5149 (t2tb5149 i)) i) :pattern ((t2tb5149 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 a1 c1)) (tuple2 b1 c1)) j)
     (= (t2tb5149 (tb2t5149 j)) j)) :pattern ((t2tb5149 (tb2t5149 j))) )))

(declare-fun t2tb5150 ((set (tuple21 (set (tuple21 a c)) (tuple21 b
  c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a c)) (tuple21 b c))))) (sort
  (set1 (tuple2 (set1 (tuple2 a1 c1)) (tuple2 b1 c1))) (t2tb5150 x))))

(declare-fun tb2t5150 (uni) (set (tuple21 (set (tuple21 a c)) (tuple21 b
  c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a c)) (tuple21 b c)))))
  (! (= (tb2t5150 (t2tb5150 i)) i) :pattern ((t2tb5150 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 a1 c1)) (tuple2 b1 c1))) j)
     (= (t2tb5150 (tb2t5150 j)) j)) :pattern ((t2tb5150 (tb2t5150 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a c)))) (t (set (tuple21 b c)))
  (x (set (tuple21 a c))) (y (tuple21 b c)))
  (= (mem (tuple2 (set1 (tuple2 a1 c1)) (tuple2 b1 c1))
  (Tuple2 (set1 (tuple2 a1 c1)) (tuple2 b1 c1) (t2tb129 x) (t2tb134 y))
  (times (tuple2 b1 c1) (set1 (tuple2 a1 c1)) (t2tb128 s) (t2tb131 t)))
  (and (mem11 x s) (mem8 y t)))))

(declare-fun t2tb4467 ((set (tuple21 (set (tuple21 a c)) c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a c)) c)))) (sort
  (set1 (tuple2 (set1 (tuple2 a1 c1)) c1)) (t2tb4467 x))))

(declare-fun tb2t4467 (uni) (set (tuple21 (set (tuple21 a c)) c)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a c)) c))))
  (! (= (tb2t4467 (t2tb4467 i)) i) :pattern ((t2tb4467 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 a1 c1)) c1)) j)
     (= (t2tb4467 (tb2t4467 j)) j)) :pattern ((t2tb4467 (tb2t4467 j))) )))

(declare-fun t2tb4468 ((tuple21 (set (tuple21 a c)) c)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a c)) c))) (sort
  (tuple2 (set1 (tuple2 a1 c1)) c1) (t2tb4468 x))))

(declare-fun tb2t4468 (uni) (tuple21 (set (tuple21 a c)) c))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a c)) c)))
  (! (= (tb2t4468 (t2tb4468 i)) i) :pattern ((t2tb4468 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 a1 c1)) c1) j)
     (= (t2tb4468 (tb2t4468 j)) j)) :pattern ((t2tb4468 (tb2t4468 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a c)))) (t (set c)) (x (set (tuple21 a c)))
  (y c))
  (= (mem (tuple2 (set1 (tuple2 a1 c1)) c1)
  (Tuple2 (set1 (tuple2 a1 c1)) c1 (t2tb129 x) (t2tb135 y))
  (times c1 (set1 (tuple2 a1 c1)) (t2tb128 s) (t2tb132 t)))
  (and (mem11 x s) (mem7 y t)))))

(declare-fun t2tb5151 ((set (tuple21 (set (tuple21 a c)) (tuple21 b
  a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a c)) (tuple21 b a))))) (sort
  (set1 (tuple2 (set1 (tuple2 a1 c1)) (tuple2 b1 a1))) (t2tb5151 x))))

(declare-fun tb2t5151 (uni) (set (tuple21 (set (tuple21 a c)) (tuple21 b
  a))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a c)) (tuple21 b a)))))
  (! (= (tb2t5151 (t2tb5151 i)) i) :pattern ((t2tb5151 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 a1 c1)) (tuple2 b1 a1))) j)
     (= (t2tb5151 (tb2t5151 j)) j)) :pattern ((t2tb5151 (tb2t5151 j))) )))

(declare-fun t2tb5152 ((tuple21 (set (tuple21 a c)) (tuple21 b a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a c)) (tuple21 b a)))) (sort
  (tuple2 (set1 (tuple2 a1 c1)) (tuple2 b1 a1)) (t2tb5152 x))))

(declare-fun tb2t5152 (uni) (tuple21 (set (tuple21 a c)) (tuple21 b a)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a c)) (tuple21 b a))))
  (! (= (tb2t5152 (t2tb5152 i)) i) :pattern ((t2tb5152 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 a1 c1)) (tuple2 b1 a1)) j)
     (= (t2tb5152 (tb2t5152 j)) j)) :pattern ((t2tb5152 (tb2t5152 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a c)))) (t (set (tuple21 b a)))
  (x (set (tuple21 a c))) (y (tuple21 b a)))
  (= (mem (tuple2 (set1 (tuple2 a1 c1)) (tuple2 b1 a1))
  (Tuple2 (set1 (tuple2 a1 c1)) (tuple2 b1 a1) (t2tb129 x) (t2tb38 y))
  (times (tuple2 b1 a1) (set1 (tuple2 a1 c1)) (t2tb128 s) (t2tb37 t)))
  (and (mem11 x s) (mem5 y t)))))

(declare-fun t2tb4469 ((tuple21 (set (tuple21 a c)) (set (tuple21 a
  b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a c)) (set (tuple21 a b))))) (sort
  (tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 a1 b1))) (t2tb4469 x))))

(declare-fun tb2t4469 (uni) (tuple21 (set (tuple21 a c)) (set (tuple21 a
  b))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a c)) (set (tuple21 a b)))))
  (! (= (tb2t4469 (t2tb4469 i)) i) :pattern ((t2tb4469 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 a1 b1))) j)
     (= (t2tb4469 (tb2t4469 j)) j)) :pattern ((t2tb4469 (tb2t4469 j))) )))

(declare-fun t2tb4470 ((set (tuple21 (set (tuple21 a c)) (set (tuple21 a
  b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a c)) (set (tuple21 a b)))))) (sort
  (set1 (tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 a1 b1)))) (t2tb4470 x))))

(declare-fun tb2t4470 (uni) (set (tuple21 (set (tuple21 a c)) (set (tuple21 a
  b)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a c)) (set (tuple21 a b))))))
  (! (= (tb2t4470 (t2tb4470 i)) i) :pattern ((t2tb4470 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 a1 b1)))) j)
     (= (t2tb4470 (tb2t4470 j)) j)) :pattern ((t2tb4470 (tb2t4470 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a c)))) (t (set (set (tuple21 a b))))
  (x (set (tuple21 a c))) (y (set (tuple21 a b))))
  (= (mem (tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 a1 b1)))
  (Tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 a1 b1)) (t2tb129 x) (t2tb11 y))
  (times (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 c1)) (t2tb128 s) (t2tb10 t)))
  (and (mem11 x s) (mem4 y t)))))

(declare-fun t2tb4471 ((set (tuple21 (set (tuple21 a c)) (tuple21 a
  b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a c)) (tuple21 a b))))) (sort
  (set1 (tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 b1))) (t2tb4471 x))))

(declare-fun tb2t4471 (uni) (set (tuple21 (set (tuple21 a c)) (tuple21 a
  b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a c)) (tuple21 a b)))))
  (! (= (tb2t4471 (t2tb4471 i)) i) :pattern ((t2tb4471 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 b1))) j)
     (= (t2tb4471 (tb2t4471 j)) j)) :pattern ((t2tb4471 (tb2t4471 j))) )))

(declare-fun t2tb4472 ((tuple21 (set (tuple21 a c)) (tuple21 a b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a c)) (tuple21 a b)))) (sort
  (tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 b1)) (t2tb4472 x))))

(declare-fun tb2t4472 (uni) (tuple21 (set (tuple21 a c)) (tuple21 a b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a c)) (tuple21 a b))))
  (! (= (tb2t4472 (t2tb4472 i)) i) :pattern ((t2tb4472 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 b1)) j)
     (= (t2tb4472 (tb2t4472 j)) j)) :pattern ((t2tb4472 (tb2t4472 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a c)))) (t (set (tuple21 a b)))
  (x (set (tuple21 a c))) (y (tuple21 a b)))
  (= (mem (tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 b1))
  (Tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 b1) (t2tb129 x) (t2tb13 y))
  (times (tuple2 a1 b1) (set1 (tuple2 a1 c1)) (t2tb128 s) (t2tb11 t)))
  (and (mem11 x s) (mem3 y t)))))

(declare-fun t2tb4473 ((set (tuple21 (set (tuple21 a c)) b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a c)) b)))) (sort
  (set1 (tuple2 (set1 (tuple2 a1 c1)) b1)) (t2tb4473 x))))

(declare-fun tb2t4473 (uni) (set (tuple21 (set (tuple21 a c)) b)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a c)) b))))
  (! (= (tb2t4473 (t2tb4473 i)) i) :pattern ((t2tb4473 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 a1 c1)) b1)) j)
     (= (t2tb4473 (tb2t4473 j)) j)) :pattern ((t2tb4473 (tb2t4473 j))) )))

(declare-fun t2tb4474 ((tuple21 (set (tuple21 a c)) b)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a c)) b))) (sort
  (tuple2 (set1 (tuple2 a1 c1)) b1) (t2tb4474 x))))

(declare-fun tb2t4474 (uni) (tuple21 (set (tuple21 a c)) b))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a c)) b)))
  (! (= (tb2t4474 (t2tb4474 i)) i) :pattern ((t2tb4474 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 a1 c1)) b1) j)
     (= (t2tb4474 (tb2t4474 j)) j)) :pattern ((t2tb4474 (tb2t4474 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a c)))) (t (set b)) (x (set (tuple21 a c)))
  (y b))
  (= (mem (tuple2 (set1 (tuple2 a1 c1)) b1)
  (Tuple2 (set1 (tuple2 a1 c1)) b1 (t2tb129 x) (t2tb14 y))
  (times b1 (set1 (tuple2 a1 c1)) (t2tb128 s) (t2tb12 t)))
  (and (mem11 x s) (mem2 y t)))))

(declare-fun t2tb4475 ((set (tuple21 (set (tuple21 a c)) a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a c)) a)))) (sort
  (set1 (tuple2 (set1 (tuple2 a1 c1)) a1)) (t2tb4475 x))))

(declare-fun tb2t4475 (uni) (set (tuple21 (set (tuple21 a c)) a)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a c)) a))))
  (! (= (tb2t4475 (t2tb4475 i)) i) :pattern ((t2tb4475 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 a1 c1)) a1)) j)
     (= (t2tb4475 (tb2t4475 j)) j)) :pattern ((t2tb4475 (tb2t4475 j))) )))

(declare-fun t2tb4476 ((tuple21 (set (tuple21 a c)) a)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a c)) a))) (sort
  (tuple2 (set1 (tuple2 a1 c1)) a1) (t2tb4476 x))))

(declare-fun tb2t4476 (uni) (tuple21 (set (tuple21 a c)) a))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a c)) a)))
  (! (= (tb2t4476 (t2tb4476 i)) i) :pattern ((t2tb4476 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 a1 c1)) a1) j)
     (= (t2tb4476 (tb2t4476 j)) j)) :pattern ((t2tb4476 (tb2t4476 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a c)))) (t (set a)) (x (set (tuple21 a c)))
  (y a))
  (= (mem (tuple2 (set1 (tuple2 a1 c1)) a1)
  (Tuple2 (set1 (tuple2 a1 c1)) a1 (t2tb129 x) (t2tb2 y))
  (times a1 (set1 (tuple2 a1 c1)) (t2tb128 s) (t2tb1 t)))
  (and (mem11 x s) (mem1 y t)))))

;; mem_times
  (assert
  (forall ((b2 ty))
  (forall ((s (set (set (tuple21 a c)))) (t uni) (x (set (tuple21 a c)))
  (y uni))
  (= (mem (tuple2 (set1 (tuple2 a1 c1)) b2)
  (Tuple2 (set1 (tuple2 a1 c1)) b2 (t2tb129 x) y)
  (times b2 (set1 (tuple2 a1 c1)) (t2tb128 s) t))
  (and (mem11 x s) (mem b2 y t))))))

(declare-fun t2tb4491 ((set (tuple21 (tuple21 a c) (tuple21 a (tuple21 b
  c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a c) (tuple21 a (tuple21 b c)))))) (sort
  (set1 (tuple2 (tuple2 a1 c1) (tuple2 a1 (tuple2 b1 c1)))) (t2tb4491 x))))

(declare-fun tb2t4491 (uni) (set (tuple21 (tuple21 a c) (tuple21 a (tuple21 b
  c)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a c) (tuple21 a (tuple21 b c))))))
  (! (= (tb2t4491 (t2tb4491 i)) i) :pattern ((t2tb4491 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 c1) (tuple2 a1 (tuple2 b1 c1)))) j)
     (= (t2tb4491 (tb2t4491 j)) j)) :pattern ((t2tb4491 (tb2t4491 j))) )))

(declare-fun t2tb4492 ((tuple21 (tuple21 a c) (tuple21 a (tuple21 b
  c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a c) (tuple21 a (tuple21 b c))))) (sort
  (tuple2 (tuple2 a1 c1) (tuple2 a1 (tuple2 b1 c1))) (t2tb4492 x))))

(declare-fun tb2t4492 (uni) (tuple21 (tuple21 a c) (tuple21 a (tuple21 b
  c))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a c) (tuple21 a (tuple21 b c)))))
  (! (= (tb2t4492 (t2tb4492 i)) i) :pattern ((t2tb4492 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 c1) (tuple2 a1 (tuple2 b1 c1))) j)
     (= (t2tb4492 (tb2t4492 j)) j)) :pattern ((t2tb4492 (tb2t4492 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a c))) (t (set (tuple21 a (tuple21 b c))))
  (x (tuple21 a c)) (y (tuple21 a (tuple21 b c))))
  (= (mem (tuple2 (tuple2 a1 c1) (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 (tuple2 a1 c1) (tuple2 a1 (tuple2 b1 c1)) (t2tb133 x) (t2tb260 y))
  (times (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 c1) (t2tb129 s) (t2tb261 t)))
  (and (mem10 x s) (mem14 y t)))))

(declare-fun t2tb4493 ((set (tuple21 (tuple21 a c) (set (tuple21 a
  c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a c) (set (tuple21 a c)))))) (sort
  (set1 (tuple2 (tuple2 a1 c1) (set1 (tuple2 a1 c1)))) (t2tb4493 x))))

(declare-fun tb2t4493 (uni) (set (tuple21 (tuple21 a c) (set (tuple21 a
  c)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a c) (set (tuple21 a c))))))
  (! (= (tb2t4493 (t2tb4493 i)) i) :pattern ((t2tb4493 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 c1) (set1 (tuple2 a1 c1)))) j)
     (= (t2tb4493 (tb2t4493 j)) j)) :pattern ((t2tb4493 (tb2t4493 j))) )))

(declare-fun t2tb4494 ((tuple21 (tuple21 a c) (set (tuple21 a c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a c) (set (tuple21 a c))))) (sort
  (tuple2 (tuple2 a1 c1) (set1 (tuple2 a1 c1))) (t2tb4494 x))))

(declare-fun tb2t4494 (uni) (tuple21 (tuple21 a c) (set (tuple21 a c))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a c) (set (tuple21 a c)))))
  (! (= (tb2t4494 (t2tb4494 i)) i) :pattern ((t2tb4494 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 c1) (set1 (tuple2 a1 c1))) j)
     (= (t2tb4494 (tb2t4494 j)) j)) :pattern ((t2tb4494 (tb2t4494 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a c))) (t (set (set (tuple21 a c))))
  (x (tuple21 a c)) (y (set (tuple21 a c))))
  (= (mem (tuple2 (tuple2 a1 c1) (set1 (tuple2 a1 c1)))
  (Tuple2 (tuple2 a1 c1) (set1 (tuple2 a1 c1)) (t2tb133 x) (t2tb129 y))
  (times (set1 (tuple2 a1 c1)) (tuple2 a1 c1) (t2tb129 s) (t2tb128 t)))
  (and (mem10 x s) (mem11 y t)))))

(declare-fun t2tb156 ((tuple21 (tuple21 a c) (tuple21 a c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a c) (tuple21 a c)))) (sort
  (tuple2 (tuple2 a1 c1) (tuple2 a1 c1)) (t2tb156 x))))

(declare-fun tb2t156 (uni) (tuple21 (tuple21 a c) (tuple21 a c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a c) (tuple21 a c))))
  (! (= (tb2t156 (t2tb156 i)) i) :pattern ((t2tb156 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 c1) (tuple2 a1 c1)) j)
     (= (t2tb156 (tb2t156 j)) j)) :pattern ((t2tb156 (tb2t156 j))) )))

(declare-fun t2tb157 ((set (tuple21 (tuple21 a c) (tuple21 a c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a c) (tuple21 a c))))) (sort
  (set1 (tuple2 (tuple2 a1 c1) (tuple2 a1 c1))) (t2tb157 x))))

(declare-fun tb2t157 (uni) (set (tuple21 (tuple21 a c) (tuple21 a c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a c) (tuple21 a c)))))
  (! (= (tb2t157 (t2tb157 i)) i) :pattern ((t2tb157 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 c1) (tuple2 a1 c1))) j)
     (= (t2tb157 (tb2t157 j)) j)) :pattern ((t2tb157 (tb2t157 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a c))) (t (set (tuple21 a c))) (x (tuple21 a c))
  (y (tuple21 a c)))
  (= (mem (tuple2 (tuple2 a1 c1) (tuple2 a1 c1))
  (Tuple2 (tuple2 a1 c1) (tuple2 a1 c1) (t2tb133 x) (t2tb133 y))
  (times (tuple2 a1 c1) (tuple2 a1 c1) (t2tb129 s) (t2tb129 t)))
  (and (mem10 x s) (mem10 y t)))))

(declare-fun t2tb1091 ((set (tuple21 (tuple21 a c) (tuple21 b c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a c) (tuple21 b c))))) (sort
  (set1 (tuple2 (tuple2 a1 c1) (tuple2 b1 c1))) (t2tb1091 x))))

(declare-fun tb2t1091 (uni) (set (tuple21 (tuple21 a c) (tuple21 b c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a c) (tuple21 b c)))))
  (! (= (tb2t1091 (t2tb1091 i)) i) :pattern ((t2tb1091 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 c1) (tuple2 b1 c1))) j)
     (= (t2tb1091 (tb2t1091 j)) j)) :pattern ((t2tb1091 (tb2t1091 j))) )))

(declare-fun t2tb1092 ((tuple21 (tuple21 a c) (tuple21 b c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a c) (tuple21 b c)))) (sort
  (tuple2 (tuple2 a1 c1) (tuple2 b1 c1)) (t2tb1092 x))))

(declare-fun tb2t1092 (uni) (tuple21 (tuple21 a c) (tuple21 b c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a c) (tuple21 b c))))
  (! (= (tb2t1092 (t2tb1092 i)) i) :pattern ((t2tb1092 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 c1) (tuple2 b1 c1)) j)
     (= (t2tb1092 (tb2t1092 j)) j)) :pattern ((t2tb1092 (tb2t1092 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a c))) (t (set (tuple21 b c))) (x (tuple21 a c))
  (y (tuple21 b c)))
  (= (mem (tuple2 (tuple2 a1 c1) (tuple2 b1 c1))
  (Tuple2 (tuple2 a1 c1) (tuple2 b1 c1) (t2tb133 x) (t2tb134 y))
  (times (tuple2 b1 c1) (tuple2 a1 c1) (t2tb129 s) (t2tb131 t)))
  (and (mem10 x s) (mem8 y t)))))

(declare-fun t2tb162 ((set (tuple21 (tuple21 a c) c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a c) c)))) (sort
  (set1 (tuple2 (tuple2 a1 c1) c1)) (t2tb162 x))))

(declare-fun tb2t162 (uni) (set (tuple21 (tuple21 a c) c)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a c) c))))
  (! (= (tb2t162 (t2tb162 i)) i) :pattern ((t2tb162 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 c1) c1)) j)
     (= (t2tb162 (tb2t162 j)) j)) :pattern ((t2tb162 (tb2t162 j))) )))

(declare-fun t2tb163 ((tuple21 (tuple21 a c) c)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a c) c))) (sort (tuple2 (tuple2 a1 c1) c1)
  (t2tb163 x))))

(declare-fun tb2t163 (uni) (tuple21 (tuple21 a c) c))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a c) c)))
  (! (= (tb2t163 (t2tb163 i)) i) :pattern ((t2tb163 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 c1) c1) j) (= (t2tb163 (tb2t163 j)) j)) :pattern (
  (t2tb163 (tb2t163 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a c))) (t (set c)) (x (tuple21 a c)) (y c))
  (= (mem (tuple2 (tuple2 a1 c1) c1)
  (Tuple2 (tuple2 a1 c1) c1 (t2tb133 x) (t2tb135 y))
  (times c1 (tuple2 a1 c1) (t2tb129 s) (t2tb132 t)))
  (and (mem10 x s) (mem7 y t)))))

(declare-fun t2tb5153 ((set (tuple21 (tuple21 a c) (tuple21 b a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a c) (tuple21 b a))))) (sort
  (set1 (tuple2 (tuple2 a1 c1) (tuple2 b1 a1))) (t2tb5153 x))))

(declare-fun tb2t5153 (uni) (set (tuple21 (tuple21 a c) (tuple21 b a))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a c) (tuple21 b a)))))
  (! (= (tb2t5153 (t2tb5153 i)) i) :pattern ((t2tb5153 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 c1) (tuple2 b1 a1))) j)
     (= (t2tb5153 (tb2t5153 j)) j)) :pattern ((t2tb5153 (tb2t5153 j))) )))

(declare-fun t2tb5154 ((tuple21 (tuple21 a c) (tuple21 b a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a c) (tuple21 b a)))) (sort
  (tuple2 (tuple2 a1 c1) (tuple2 b1 a1)) (t2tb5154 x))))

(declare-fun tb2t5154 (uni) (tuple21 (tuple21 a c) (tuple21 b a)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a c) (tuple21 b a))))
  (! (= (tb2t5154 (t2tb5154 i)) i) :pattern ((t2tb5154 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 c1) (tuple2 b1 a1)) j)
     (= (t2tb5154 (tb2t5154 j)) j)) :pattern ((t2tb5154 (tb2t5154 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a c))) (t (set (tuple21 b a))) (x (tuple21 a c))
  (y (tuple21 b a)))
  (= (mem (tuple2 (tuple2 a1 c1) (tuple2 b1 a1))
  (Tuple2 (tuple2 a1 c1) (tuple2 b1 a1) (t2tb133 x) (t2tb38 y))
  (times (tuple2 b1 a1) (tuple2 a1 c1) (t2tb129 s) (t2tb37 t)))
  (and (mem10 x s) (mem5 y t)))))

(declare-fun t2tb164 ((set (tuple21 (tuple21 a c) (set (tuple21 a b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a c) (set (tuple21 a b)))))) (sort
  (set1 (tuple2 (tuple2 a1 c1) (set1 (tuple2 a1 b1)))) (t2tb164 x))))

(declare-fun tb2t164 (uni) (set (tuple21 (tuple21 a c) (set (tuple21 a b)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a c) (set (tuple21 a b))))))
  (! (= (tb2t164 (t2tb164 i)) i) :pattern ((t2tb164 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 c1) (set1 (tuple2 a1 b1)))) j)
     (= (t2tb164 (tb2t164 j)) j)) :pattern ((t2tb164 (tb2t164 j))) )))

(declare-fun t2tb165 ((tuple21 (tuple21 a c) (set (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a c) (set (tuple21 a b))))) (sort
  (tuple2 (tuple2 a1 c1) (set1 (tuple2 a1 b1))) (t2tb165 x))))

(declare-fun tb2t165 (uni) (tuple21 (tuple21 a c) (set (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a c) (set (tuple21 a b)))))
  (! (= (tb2t165 (t2tb165 i)) i) :pattern ((t2tb165 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 c1) (set1 (tuple2 a1 b1))) j)
     (= (t2tb165 (tb2t165 j)) j)) :pattern ((t2tb165 (tb2t165 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a c))) (t (set (set (tuple21 a b))))
  (x (tuple21 a c)) (y (set (tuple21 a b))))
  (= (mem (tuple2 (tuple2 a1 c1) (set1 (tuple2 a1 b1)))
  (Tuple2 (tuple2 a1 c1) (set1 (tuple2 a1 b1)) (t2tb133 x) (t2tb11 y))
  (times (set1 (tuple2 a1 b1)) (tuple2 a1 c1) (t2tb129 s) (t2tb10 t)))
  (and (mem10 x s) (mem4 y t)))))

(declare-fun t2tb166 ((set (tuple21 (tuple21 a c) (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a c) (tuple21 a b))))) (sort
  (set1 (tuple2 (tuple2 a1 c1) (tuple2 a1 b1))) (t2tb166 x))))

(declare-fun tb2t166 (uni) (set (tuple21 (tuple21 a c) (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a c) (tuple21 a b)))))
  (! (= (tb2t166 (t2tb166 i)) i) :pattern ((t2tb166 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 c1) (tuple2 a1 b1))) j)
     (= (t2tb166 (tb2t166 j)) j)) :pattern ((t2tb166 (tb2t166 j))) )))

(declare-fun t2tb167 ((tuple21 (tuple21 a c) (tuple21 a b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a c) (tuple21 a b)))) (sort
  (tuple2 (tuple2 a1 c1) (tuple2 a1 b1)) (t2tb167 x))))

(declare-fun tb2t167 (uni) (tuple21 (tuple21 a c) (tuple21 a b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a c) (tuple21 a b))))
  (! (= (tb2t167 (t2tb167 i)) i) :pattern ((t2tb167 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 c1) (tuple2 a1 b1)) j)
     (= (t2tb167 (tb2t167 j)) j)) :pattern ((t2tb167 (tb2t167 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a c))) (t (set (tuple21 a b))) (x (tuple21 a c))
  (y (tuple21 a b)))
  (= (mem (tuple2 (tuple2 a1 c1) (tuple2 a1 b1))
  (Tuple2 (tuple2 a1 c1) (tuple2 a1 b1) (t2tb133 x) (t2tb13 y))
  (times (tuple2 a1 b1) (tuple2 a1 c1) (t2tb129 s) (t2tb11 t)))
  (and (mem10 x s) (mem3 y t)))))

(declare-fun t2tb168 ((set (tuple21 (tuple21 a c) b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a c) b)))) (sort
  (set1 (tuple2 (tuple2 a1 c1) b1)) (t2tb168 x))))

(declare-fun tb2t168 (uni) (set (tuple21 (tuple21 a c) b)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a c) b))))
  (! (= (tb2t168 (t2tb168 i)) i) :pattern ((t2tb168 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 c1) b1)) j)
     (= (t2tb168 (tb2t168 j)) j)) :pattern ((t2tb168 (tb2t168 j))) )))

(declare-fun t2tb169 ((tuple21 (tuple21 a c) b)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a c) b))) (sort (tuple2 (tuple2 a1 c1) b1)
  (t2tb169 x))))

(declare-fun tb2t169 (uni) (tuple21 (tuple21 a c) b))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a c) b)))
  (! (= (tb2t169 (t2tb169 i)) i) :pattern ((t2tb169 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 c1) b1) j) (= (t2tb169 (tb2t169 j)) j)) :pattern (
  (t2tb169 (tb2t169 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a c))) (t (set b)) (x (tuple21 a c)) (y b))
  (= (mem (tuple2 (tuple2 a1 c1) b1)
  (Tuple2 (tuple2 a1 c1) b1 (t2tb133 x) (t2tb14 y))
  (times b1 (tuple2 a1 c1) (t2tb129 s) (t2tb12 t)))
  (and (mem10 x s) (mem2 y t)))))

(declare-fun t2tb170 ((set (tuple21 (tuple21 a c) a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a c) a)))) (sort
  (set1 (tuple2 (tuple2 a1 c1) a1)) (t2tb170 x))))

(declare-fun tb2t170 (uni) (set (tuple21 (tuple21 a c) a)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a c) a))))
  (! (= (tb2t170 (t2tb170 i)) i) :pattern ((t2tb170 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 c1) a1)) j)
     (= (t2tb170 (tb2t170 j)) j)) :pattern ((t2tb170 (tb2t170 j))) )))

(declare-fun t2tb171 ((tuple21 (tuple21 a c) a)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a c) a))) (sort (tuple2 (tuple2 a1 c1) a1)
  (t2tb171 x))))

(declare-fun tb2t171 (uni) (tuple21 (tuple21 a c) a))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a c) a)))
  (! (= (tb2t171 (t2tb171 i)) i) :pattern ((t2tb171 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 c1) a1) j) (= (t2tb171 (tb2t171 j)) j)) :pattern (
  (t2tb171 (tb2t171 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a c))) (t (set a)) (x (tuple21 a c)) (y a))
  (= (mem (tuple2 (tuple2 a1 c1) a1)
  (Tuple2 (tuple2 a1 c1) a1 (t2tb133 x) (t2tb2 y))
  (times a1 (tuple2 a1 c1) (t2tb129 s) (t2tb1 t)))
  (and (mem10 x s) (mem1 y t)))))

;; mem_times
  (assert
  (forall ((b2 ty))
  (forall ((s (set (tuple21 a c))) (t uni) (x (tuple21 a c)) (y uni))
  (= (mem (tuple2 (tuple2 a1 c1) b2) (Tuple2 (tuple2 a1 c1) b2 (t2tb133 x) y)
  (times b2 (tuple2 a1 c1) (t2tb129 s) t)) (and (mem10 x s) (mem b2 y t))))))

(declare-fun t2tb5155 ((set (tuple21 (tuple21 b c) (tuple21 a (tuple21 b
  c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b c) (tuple21 a (tuple21 b c)))))) (sort
  (set1 (tuple2 (tuple2 b1 c1) (tuple2 a1 (tuple2 b1 c1)))) (t2tb5155 x))))

(declare-fun tb2t5155 (uni) (set (tuple21 (tuple21 b c) (tuple21 a (tuple21 b
  c)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b c) (tuple21 a (tuple21 b c))))))
  (! (= (tb2t5155 (t2tb5155 i)) i) :pattern ((t2tb5155 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 c1) (tuple2 a1 (tuple2 b1 c1)))) j)
     (= (t2tb5155 (tb2t5155 j)) j)) :pattern ((t2tb5155 (tb2t5155 j))) )))

(declare-fun t2tb5156 ((tuple21 (tuple21 b c) (tuple21 a (tuple21 b
  c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b c) (tuple21 a (tuple21 b c))))) (sort
  (tuple2 (tuple2 b1 c1) (tuple2 a1 (tuple2 b1 c1))) (t2tb5156 x))))

(declare-fun tb2t5156 (uni) (tuple21 (tuple21 b c) (tuple21 a (tuple21 b
  c))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b c) (tuple21 a (tuple21 b c)))))
  (! (= (tb2t5156 (t2tb5156 i)) i) :pattern ((t2tb5156 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 c1) (tuple2 a1 (tuple2 b1 c1))) j)
     (= (t2tb5156 (tb2t5156 j)) j)) :pattern ((t2tb5156 (tb2t5156 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 b c))) (t (set (tuple21 a (tuple21 b c))))
  (x (tuple21 b c)) (y (tuple21 a (tuple21 b c))))
  (= (mem (tuple2 (tuple2 b1 c1) (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 (tuple2 b1 c1) (tuple2 a1 (tuple2 b1 c1)) (t2tb134 x) (t2tb260 y))
  (times (tuple2 a1 (tuple2 b1 c1)) (tuple2 b1 c1) (t2tb131 s) (t2tb261 t)))
  (and (mem8 x s) (mem14 y t)))))

(declare-fun t2tb5157 ((set (tuple21 (tuple21 b c) (set (tuple21 a
  c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b c) (set (tuple21 a c)))))) (sort
  (set1 (tuple2 (tuple2 b1 c1) (set1 (tuple2 a1 c1)))) (t2tb5157 x))))

(declare-fun tb2t5157 (uni) (set (tuple21 (tuple21 b c) (set (tuple21 a
  c)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b c) (set (tuple21 a c))))))
  (! (= (tb2t5157 (t2tb5157 i)) i) :pattern ((t2tb5157 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 c1) (set1 (tuple2 a1 c1)))) j)
     (= (t2tb5157 (tb2t5157 j)) j)) :pattern ((t2tb5157 (tb2t5157 j))) )))

(declare-fun t2tb5158 ((tuple21 (tuple21 b c) (set (tuple21 a c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b c) (set (tuple21 a c))))) (sort
  (tuple2 (tuple2 b1 c1) (set1 (tuple2 a1 c1))) (t2tb5158 x))))

(declare-fun tb2t5158 (uni) (tuple21 (tuple21 b c) (set (tuple21 a c))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b c) (set (tuple21 a c)))))
  (! (= (tb2t5158 (t2tb5158 i)) i) :pattern ((t2tb5158 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 c1) (set1 (tuple2 a1 c1))) j)
     (= (t2tb5158 (tb2t5158 j)) j)) :pattern ((t2tb5158 (tb2t5158 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 b c))) (t (set (set (tuple21 a c))))
  (x (tuple21 b c)) (y (set (tuple21 a c))))
  (= (mem (tuple2 (tuple2 b1 c1) (set1 (tuple2 a1 c1)))
  (Tuple2 (tuple2 b1 c1) (set1 (tuple2 a1 c1)) (t2tb134 x) (t2tb129 y))
  (times (set1 (tuple2 a1 c1)) (tuple2 b1 c1) (t2tb131 s) (t2tb128 t)))
  (and (mem8 x s) (mem11 y t)))))

(declare-fun t2tb1109 ((set (tuple21 (tuple21 b c) (tuple21 a c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b c) (tuple21 a c))))) (sort
  (set1 (tuple2 (tuple2 b1 c1) (tuple2 a1 c1))) (t2tb1109 x))))

(declare-fun tb2t1109 (uni) (set (tuple21 (tuple21 b c) (tuple21 a c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b c) (tuple21 a c)))))
  (! (= (tb2t1109 (t2tb1109 i)) i) :pattern ((t2tb1109 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 c1) (tuple2 a1 c1))) j)
     (= (t2tb1109 (tb2t1109 j)) j)) :pattern ((t2tb1109 (tb2t1109 j))) )))

(declare-fun t2tb1110 ((tuple21 (tuple21 b c) (tuple21 a c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b c) (tuple21 a c)))) (sort
  (tuple2 (tuple2 b1 c1) (tuple2 a1 c1)) (t2tb1110 x))))

(declare-fun tb2t1110 (uni) (tuple21 (tuple21 b c) (tuple21 a c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b c) (tuple21 a c))))
  (! (= (tb2t1110 (t2tb1110 i)) i) :pattern ((t2tb1110 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 c1) (tuple2 a1 c1)) j)
     (= (t2tb1110 (tb2t1110 j)) j)) :pattern ((t2tb1110 (tb2t1110 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 b c))) (t (set (tuple21 a c))) (x (tuple21 b c))
  (y (tuple21 a c)))
  (= (mem (tuple2 (tuple2 b1 c1) (tuple2 a1 c1))
  (Tuple2 (tuple2 b1 c1) (tuple2 a1 c1) (t2tb134 x) (t2tb133 y))
  (times (tuple2 a1 c1) (tuple2 b1 c1) (t2tb131 s) (t2tb129 t)))
  (and (mem8 x s) (mem10 y t)))))

(declare-fun t2tb1113 ((set (tuple21 (tuple21 b c) (tuple21 b c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b c) (tuple21 b c))))) (sort
  (set1 (tuple2 (tuple2 b1 c1) (tuple2 b1 c1))) (t2tb1113 x))))

(declare-fun tb2t1113 (uni) (set (tuple21 (tuple21 b c) (tuple21 b c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b c) (tuple21 b c)))))
  (! (= (tb2t1113 (t2tb1113 i)) i) :pattern ((t2tb1113 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 c1) (tuple2 b1 c1))) j)
     (= (t2tb1113 (tb2t1113 j)) j)) :pattern ((t2tb1113 (tb2t1113 j))) )))

(declare-fun t2tb1114 ((tuple21 (tuple21 b c) (tuple21 b c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b c) (tuple21 b c)))) (sort
  (tuple2 (tuple2 b1 c1) (tuple2 b1 c1)) (t2tb1114 x))))

(declare-fun tb2t1114 (uni) (tuple21 (tuple21 b c) (tuple21 b c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b c) (tuple21 b c))))
  (! (= (tb2t1114 (t2tb1114 i)) i) :pattern ((t2tb1114 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 c1) (tuple2 b1 c1)) j)
     (= (t2tb1114 (tb2t1114 j)) j)) :pattern ((t2tb1114 (tb2t1114 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 b c))) (t (set (tuple21 b c))) (x (tuple21 b c))
  (y (tuple21 b c)))
  (= (mem (tuple2 (tuple2 b1 c1) (tuple2 b1 c1))
  (Tuple2 (tuple2 b1 c1) (tuple2 b1 c1) (t2tb134 x) (t2tb134 y))
  (times (tuple2 b1 c1) (tuple2 b1 c1) (t2tb131 s) (t2tb131 t)))
  (and (mem8 x s) (mem8 y t)))))

(declare-fun t2tb1115 ((set (tuple21 (tuple21 b c) c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b c) c)))) (sort
  (set1 (tuple2 (tuple2 b1 c1) c1)) (t2tb1115 x))))

(declare-fun tb2t1115 (uni) (set (tuple21 (tuple21 b c) c)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b c) c))))
  (! (= (tb2t1115 (t2tb1115 i)) i) :pattern ((t2tb1115 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 c1) c1)) j)
     (= (t2tb1115 (tb2t1115 j)) j)) :pattern ((t2tb1115 (tb2t1115 j))) )))

(declare-fun t2tb1116 ((tuple21 (tuple21 b c) c)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b c) c))) (sort (tuple2 (tuple2 b1 c1) c1)
  (t2tb1116 x))))

(declare-fun tb2t1116 (uni) (tuple21 (tuple21 b c) c))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b c) c)))
  (! (= (tb2t1116 (t2tb1116 i)) i) :pattern ((t2tb1116 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 c1) c1) j) (= (t2tb1116 (tb2t1116 j)) j)) :pattern (
  (t2tb1116 (tb2t1116 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 b c))) (t (set c)) (x (tuple21 b c)) (y c))
  (= (mem (tuple2 (tuple2 b1 c1) c1)
  (Tuple2 (tuple2 b1 c1) c1 (t2tb134 x) (t2tb135 y))
  (times c1 (tuple2 b1 c1) (t2tb131 s) (t2tb132 t)))
  (and (mem8 x s) (mem7 y t)))))

(declare-fun t2tb5159 ((set (tuple21 (tuple21 b c) (tuple21 b a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b c) (tuple21 b a))))) (sort
  (set1 (tuple2 (tuple2 b1 c1) (tuple2 b1 a1))) (t2tb5159 x))))

(declare-fun tb2t5159 (uni) (set (tuple21 (tuple21 b c) (tuple21 b a))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b c) (tuple21 b a)))))
  (! (= (tb2t5159 (t2tb5159 i)) i) :pattern ((t2tb5159 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 c1) (tuple2 b1 a1))) j)
     (= (t2tb5159 (tb2t5159 j)) j)) :pattern ((t2tb5159 (tb2t5159 j))) )))

(declare-fun t2tb5160 ((tuple21 (tuple21 b c) (tuple21 b a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b c) (tuple21 b a)))) (sort
  (tuple2 (tuple2 b1 c1) (tuple2 b1 a1)) (t2tb5160 x))))

(declare-fun tb2t5160 (uni) (tuple21 (tuple21 b c) (tuple21 b a)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b c) (tuple21 b a))))
  (! (= (tb2t5160 (t2tb5160 i)) i) :pattern ((t2tb5160 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 c1) (tuple2 b1 a1)) j)
     (= (t2tb5160 (tb2t5160 j)) j)) :pattern ((t2tb5160 (tb2t5160 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 b c))) (t (set (tuple21 b a))) (x (tuple21 b c))
  (y (tuple21 b a)))
  (= (mem (tuple2 (tuple2 b1 c1) (tuple2 b1 a1))
  (Tuple2 (tuple2 b1 c1) (tuple2 b1 a1) (t2tb134 x) (t2tb38 y))
  (times (tuple2 b1 a1) (tuple2 b1 c1) (t2tb131 s) (t2tb37 t)))
  (and (mem8 x s) (mem5 y t)))))

(declare-fun t2tb1117 ((set (tuple21 (tuple21 b c) (set (tuple21 a
  b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b c) (set (tuple21 a b)))))) (sort
  (set1 (tuple2 (tuple2 b1 c1) (set1 (tuple2 a1 b1)))) (t2tb1117 x))))

(declare-fun tb2t1117 (uni) (set (tuple21 (tuple21 b c) (set (tuple21 a
  b)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b c) (set (tuple21 a b))))))
  (! (= (tb2t1117 (t2tb1117 i)) i) :pattern ((t2tb1117 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 c1) (set1 (tuple2 a1 b1)))) j)
     (= (t2tb1117 (tb2t1117 j)) j)) :pattern ((t2tb1117 (tb2t1117 j))) )))

(declare-fun t2tb1118 ((tuple21 (tuple21 b c) (set (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b c) (set (tuple21 a b))))) (sort
  (tuple2 (tuple2 b1 c1) (set1 (tuple2 a1 b1))) (t2tb1118 x))))

(declare-fun tb2t1118 (uni) (tuple21 (tuple21 b c) (set (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b c) (set (tuple21 a b)))))
  (! (= (tb2t1118 (t2tb1118 i)) i) :pattern ((t2tb1118 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 c1) (set1 (tuple2 a1 b1))) j)
     (= (t2tb1118 (tb2t1118 j)) j)) :pattern ((t2tb1118 (tb2t1118 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 b c))) (t (set (set (tuple21 a b))))
  (x (tuple21 b c)) (y (set (tuple21 a b))))
  (= (mem (tuple2 (tuple2 b1 c1) (set1 (tuple2 a1 b1)))
  (Tuple2 (tuple2 b1 c1) (set1 (tuple2 a1 b1)) (t2tb134 x) (t2tb11 y))
  (times (set1 (tuple2 a1 b1)) (tuple2 b1 c1) (t2tb131 s) (t2tb10 t)))
  (and (mem8 x s) (mem4 y t)))))

(declare-fun t2tb1119 ((set (tuple21 (tuple21 b c) (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b c) (tuple21 a b))))) (sort
  (set1 (tuple2 (tuple2 b1 c1) (tuple2 a1 b1))) (t2tb1119 x))))

(declare-fun tb2t1119 (uni) (set (tuple21 (tuple21 b c) (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b c) (tuple21 a b)))))
  (! (= (tb2t1119 (t2tb1119 i)) i) :pattern ((t2tb1119 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 c1) (tuple2 a1 b1))) j)
     (= (t2tb1119 (tb2t1119 j)) j)) :pattern ((t2tb1119 (tb2t1119 j))) )))

(declare-fun t2tb1120 ((tuple21 (tuple21 b c) (tuple21 a b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b c) (tuple21 a b)))) (sort
  (tuple2 (tuple2 b1 c1) (tuple2 a1 b1)) (t2tb1120 x))))

(declare-fun tb2t1120 (uni) (tuple21 (tuple21 b c) (tuple21 a b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b c) (tuple21 a b))))
  (! (= (tb2t1120 (t2tb1120 i)) i) :pattern ((t2tb1120 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 c1) (tuple2 a1 b1)) j)
     (= (t2tb1120 (tb2t1120 j)) j)) :pattern ((t2tb1120 (tb2t1120 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 b c))) (t (set (tuple21 a b))) (x (tuple21 b c))
  (y (tuple21 a b)))
  (= (mem (tuple2 (tuple2 b1 c1) (tuple2 a1 b1))
  (Tuple2 (tuple2 b1 c1) (tuple2 a1 b1) (t2tb134 x) (t2tb13 y))
  (times (tuple2 a1 b1) (tuple2 b1 c1) (t2tb131 s) (t2tb11 t)))
  (and (mem8 x s) (mem3 y t)))))

(declare-fun t2tb1121 ((set (tuple21 (tuple21 b c) b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b c) b)))) (sort
  (set1 (tuple2 (tuple2 b1 c1) b1)) (t2tb1121 x))))

(declare-fun tb2t1121 (uni) (set (tuple21 (tuple21 b c) b)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b c) b))))
  (! (= (tb2t1121 (t2tb1121 i)) i) :pattern ((t2tb1121 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 c1) b1)) j)
     (= (t2tb1121 (tb2t1121 j)) j)) :pattern ((t2tb1121 (tb2t1121 j))) )))

(declare-fun t2tb1122 ((tuple21 (tuple21 b c) b)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b c) b))) (sort (tuple2 (tuple2 b1 c1) b1)
  (t2tb1122 x))))

(declare-fun tb2t1122 (uni) (tuple21 (tuple21 b c) b))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b c) b)))
  (! (= (tb2t1122 (t2tb1122 i)) i) :pattern ((t2tb1122 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 c1) b1) j) (= (t2tb1122 (tb2t1122 j)) j)) :pattern (
  (t2tb1122 (tb2t1122 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 b c))) (t (set b)) (x (tuple21 b c)) (y b))
  (= (mem (tuple2 (tuple2 b1 c1) b1)
  (Tuple2 (tuple2 b1 c1) b1 (t2tb134 x) (t2tb14 y))
  (times b1 (tuple2 b1 c1) (t2tb131 s) (t2tb12 t)))
  (and (mem8 x s) (mem2 y t)))))

(declare-fun t2tb1123 ((tuple21 (tuple21 b c) a)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b c) a))) (sort (tuple2 (tuple2 b1 c1) a1)
  (t2tb1123 x))))

(declare-fun tb2t1123 (uni) (tuple21 (tuple21 b c) a))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b c) a)))
  (! (= (tb2t1123 (t2tb1123 i)) i) :pattern ((t2tb1123 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 c1) a1) j) (= (t2tb1123 (tb2t1123 j)) j)) :pattern (
  (t2tb1123 (tb2t1123 j))) )))

(declare-fun t2tb1124 ((set (tuple21 (tuple21 b c) a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b c) a)))) (sort
  (set1 (tuple2 (tuple2 b1 c1) a1)) (t2tb1124 x))))

(declare-fun tb2t1124 (uni) (set (tuple21 (tuple21 b c) a)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b c) a))))
  (! (= (tb2t1124 (t2tb1124 i)) i) :pattern ((t2tb1124 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 c1) a1)) j)
     (= (t2tb1124 (tb2t1124 j)) j)) :pattern ((t2tb1124 (tb2t1124 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 b c))) (t (set a)) (x (tuple21 b c)) (y a))
  (= (mem (tuple2 (tuple2 b1 c1) a1)
  (Tuple2 (tuple2 b1 c1) a1 (t2tb134 x) (t2tb2 y))
  (times a1 (tuple2 b1 c1) (t2tb131 s) (t2tb1 t)))
  (and (mem8 x s) (mem1 y t)))))

;; mem_times
  (assert
  (forall ((b2 ty))
  (forall ((s (set (tuple21 b c))) (t uni) (x (tuple21 b c)) (y uni))
  (= (mem (tuple2 (tuple2 b1 c1) b2) (Tuple2 (tuple2 b1 c1) b2 (t2tb134 x) y)
  (times b2 (tuple2 b1 c1) (t2tb131 s) t)) (and (mem8 x s) (mem b2 y t))))))

(declare-fun t2tb4508 ((set (tuple21 c (tuple21 a (tuple21 b c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 c (tuple21 a (tuple21 b c)))))) (sort
  (set1 (tuple2 c1 (tuple2 a1 (tuple2 b1 c1)))) (t2tb4508 x))))

(declare-fun tb2t4508 (uni) (set (tuple21 c (tuple21 a (tuple21 b c)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 c (tuple21 a (tuple21 b c))))))
  (! (= (tb2t4508 (t2tb4508 i)) i) :pattern ((t2tb4508 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 c1 (tuple2 a1 (tuple2 b1 c1)))) j)
     (= (t2tb4508 (tb2t4508 j)) j)) :pattern ((t2tb4508 (tb2t4508 j))) )))

(declare-fun t2tb4509 ((tuple21 c (tuple21 a (tuple21 b c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 c (tuple21 a (tuple21 b c))))) (sort
  (tuple2 c1 (tuple2 a1 (tuple2 b1 c1))) (t2tb4509 x))))

(declare-fun tb2t4509 (uni) (tuple21 c (tuple21 a (tuple21 b c))))

;; BridgeL
  (assert
  (forall ((i (tuple21 c (tuple21 a (tuple21 b c)))))
  (! (= (tb2t4509 (t2tb4509 i)) i) :pattern ((t2tb4509 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 c1 (tuple2 a1 (tuple2 b1 c1))) j)
     (= (t2tb4509 (tb2t4509 j)) j)) :pattern ((t2tb4509 (tb2t4509 j))) )))

;; mem_times
  (assert
  (forall ((s (set c)) (t (set (tuple21 a (tuple21 b c)))) (x c)
  (y (tuple21 a (tuple21 b c))))
  (= (mem (tuple2 c1 (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 c1 (tuple2 a1 (tuple2 b1 c1)) (t2tb135 x) (t2tb260 y))
  (times (tuple2 a1 (tuple2 b1 c1)) c1 (t2tb132 s) (t2tb261 t)))
  (and (mem7 x s) (mem14 y t)))))

(declare-fun t2tb4510 ((set (tuple21 c (set (tuple21 a c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 c (set (tuple21 a c)))))) (sort
  (set1 (tuple2 c1 (set1 (tuple2 a1 c1)))) (t2tb4510 x))))

(declare-fun tb2t4510 (uni) (set (tuple21 c (set (tuple21 a c)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 c (set (tuple21 a c))))))
  (! (= (tb2t4510 (t2tb4510 i)) i) :pattern ((t2tb4510 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 c1 (set1 (tuple2 a1 c1)))) j)
     (= (t2tb4510 (tb2t4510 j)) j)) :pattern ((t2tb4510 (tb2t4510 j))) )))

(declare-fun t2tb4511 ((tuple21 c (set (tuple21 a c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 c (set (tuple21 a c))))) (sort
  (tuple2 c1 (set1 (tuple2 a1 c1))) (t2tb4511 x))))

(declare-fun tb2t4511 (uni) (tuple21 c (set (tuple21 a c))))

;; BridgeL
  (assert
  (forall ((i (tuple21 c (set (tuple21 a c)))))
  (! (= (tb2t4511 (t2tb4511 i)) i) :pattern ((t2tb4511 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 c1 (set1 (tuple2 a1 c1))) j)
     (= (t2tb4511 (tb2t4511 j)) j)) :pattern ((t2tb4511 (tb2t4511 j))) )))

;; mem_times
  (assert
  (forall ((s (set c)) (t (set (set (tuple21 a c)))) (x c) (y (set (tuple21 a
  c))))
  (= (mem (tuple2 c1 (set1 (tuple2 a1 c1)))
  (Tuple2 c1 (set1 (tuple2 a1 c1)) (t2tb135 x) (t2tb129 y))
  (times (set1 (tuple2 a1 c1)) c1 (t2tb132 s) (t2tb128 t)))
  (and (mem7 x s) (mem11 y t)))))

(declare-fun t2tb210 ((set (tuple21 c (tuple21 a c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 c (tuple21 a c))))) (sort
  (set1 (tuple2 c1 (tuple2 a1 c1))) (t2tb210 x))))

(declare-fun tb2t210 (uni) (set (tuple21 c (tuple21 a c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 c (tuple21 a c)))))
  (! (= (tb2t210 (t2tb210 i)) i) :pattern ((t2tb210 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 c1 (tuple2 a1 c1))) j)
     (= (t2tb210 (tb2t210 j)) j)) :pattern ((t2tb210 (tb2t210 j))) )))

(declare-fun t2tb211 ((tuple21 c (tuple21 a c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 c (tuple21 a c)))) (sort (tuple2 c1 (tuple2 a1 c1))
  (t2tb211 x))))

(declare-fun tb2t211 (uni) (tuple21 c (tuple21 a c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 c (tuple21 a c))))
  (! (= (tb2t211 (t2tb211 i)) i) :pattern ((t2tb211 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 c1 (tuple2 a1 c1)) j) (= (t2tb211 (tb2t211 j)) j)) :pattern (
  (t2tb211 (tb2t211 j))) )))

;; mem_times
  (assert
  (forall ((s (set c)) (t (set (tuple21 a c))) (x c) (y (tuple21 a c)))
  (= (mem (tuple2 c1 (tuple2 a1 c1))
  (Tuple2 c1 (tuple2 a1 c1) (t2tb135 x) (t2tb133 y))
  (times (tuple2 a1 c1) c1 (t2tb132 s) (t2tb129 t)))
  (and (mem7 x s) (mem10 y t)))))

(declare-fun t2tb1127 ((set (tuple21 c (tuple21 b c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 c (tuple21 b c))))) (sort
  (set1 (tuple2 c1 (tuple2 b1 c1))) (t2tb1127 x))))

(declare-fun tb2t1127 (uni) (set (tuple21 c (tuple21 b c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 c (tuple21 b c)))))
  (! (= (tb2t1127 (t2tb1127 i)) i) :pattern ((t2tb1127 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 c1 (tuple2 b1 c1))) j)
     (= (t2tb1127 (tb2t1127 j)) j)) :pattern ((t2tb1127 (tb2t1127 j))) )))

(declare-fun t2tb1128 ((tuple21 c (tuple21 b c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 c (tuple21 b c)))) (sort (tuple2 c1 (tuple2 b1 c1))
  (t2tb1128 x))))

(declare-fun tb2t1128 (uni) (tuple21 c (tuple21 b c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 c (tuple21 b c))))
  (! (= (tb2t1128 (t2tb1128 i)) i) :pattern ((t2tb1128 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 c1 (tuple2 b1 c1)) j) (= (t2tb1128 (tb2t1128 j)) j)) :pattern (
  (t2tb1128 (tb2t1128 j))) )))

;; mem_times
  (assert
  (forall ((s (set c)) (t (set (tuple21 b c))) (x c) (y (tuple21 b c)))
  (= (mem (tuple2 c1 (tuple2 b1 c1))
  (Tuple2 c1 (tuple2 b1 c1) (t2tb135 x) (t2tb134 y))
  (times (tuple2 b1 c1) c1 (t2tb132 s) (t2tb131 t)))
  (and (mem7 x s) (mem8 y t)))))

(declare-fun t2tb216 ((set (tuple21 c c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 c c)))) (sort (set1 (tuple2 c1 c1)) (t2tb216 x))))

(declare-fun tb2t216 (uni) (set (tuple21 c c)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 c c))))
  (! (= (tb2t216 (t2tb216 i)) i) :pattern ((t2tb216 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 c1 c1)) j) (= (t2tb216 (tb2t216 j)) j)) :pattern (
  (t2tb216 (tb2t216 j))) )))

(declare-fun t2tb217 ((tuple21 c c)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 c c))) (sort (tuple2 c1 c1) (t2tb217 x))))

(declare-fun tb2t217 (uni) (tuple21 c c))

;; BridgeL
  (assert
  (forall ((i (tuple21 c c)))
  (! (= (tb2t217 (t2tb217 i)) i) :pattern ((t2tb217 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 c1 c1) j) (= (t2tb217 (tb2t217 j)) j)) :pattern (
  (t2tb217 (tb2t217 j))) )))

;; mem_times
  (assert
  (forall ((s (set c)) (t (set c)) (x c) (y c))
  (= (mem (tuple2 c1 c1) (Tuple2 c1 c1 (t2tb135 x) (t2tb135 y))
  (times c1 c1 (t2tb132 s) (t2tb132 t))) (and (mem7 x s) (mem7 y t)))))

(declare-fun t2tb5161 ((set (tuple21 c (tuple21 b a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 c (tuple21 b a))))) (sort
  (set1 (tuple2 c1 (tuple2 b1 a1))) (t2tb5161 x))))

(declare-fun tb2t5161 (uni) (set (tuple21 c (tuple21 b a))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 c (tuple21 b a)))))
  (! (= (tb2t5161 (t2tb5161 i)) i) :pattern ((t2tb5161 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 c1 (tuple2 b1 a1))) j)
     (= (t2tb5161 (tb2t5161 j)) j)) :pattern ((t2tb5161 (tb2t5161 j))) )))

(declare-fun t2tb5162 ((tuple21 c (tuple21 b a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 c (tuple21 b a)))) (sort (tuple2 c1 (tuple2 b1 a1))
  (t2tb5162 x))))

(declare-fun tb2t5162 (uni) (tuple21 c (tuple21 b a)))

;; BridgeL
  (assert
  (forall ((i (tuple21 c (tuple21 b a))))
  (! (= (tb2t5162 (t2tb5162 i)) i) :pattern ((t2tb5162 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 c1 (tuple2 b1 a1)) j) (= (t2tb5162 (tb2t5162 j)) j)) :pattern (
  (t2tb5162 (tb2t5162 j))) )))

;; mem_times
  (assert
  (forall ((s (set c)) (t (set (tuple21 b a))) (x c) (y (tuple21 b a)))
  (= (mem (tuple2 c1 (tuple2 b1 a1))
  (Tuple2 c1 (tuple2 b1 a1) (t2tb135 x) (t2tb38 y))
  (times (tuple2 b1 a1) c1 (t2tb132 s) (t2tb37 t)))
  (and (mem7 x s) (mem5 y t)))))

(declare-fun t2tb218 ((set (tuple21 c (set (tuple21 a b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 c (set (tuple21 a b)))))) (sort
  (set1 (tuple2 c1 (set1 (tuple2 a1 b1)))) (t2tb218 x))))

(declare-fun tb2t218 (uni) (set (tuple21 c (set (tuple21 a b)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 c (set (tuple21 a b))))))
  (! (= (tb2t218 (t2tb218 i)) i) :pattern ((t2tb218 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 c1 (set1 (tuple2 a1 b1)))) j)
     (= (t2tb218 (tb2t218 j)) j)) :pattern ((t2tb218 (tb2t218 j))) )))

(declare-fun t2tb219 ((tuple21 c (set (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 c (set (tuple21 a b))))) (sort
  (tuple2 c1 (set1 (tuple2 a1 b1))) (t2tb219 x))))

(declare-fun tb2t219 (uni) (tuple21 c (set (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (tuple21 c (set (tuple21 a b)))))
  (! (= (tb2t219 (t2tb219 i)) i) :pattern ((t2tb219 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 c1 (set1 (tuple2 a1 b1))) j)
     (= (t2tb219 (tb2t219 j)) j)) :pattern ((t2tb219 (tb2t219 j))) )))

;; mem_times
  (assert
  (forall ((s (set c)) (t (set (set (tuple21 a b)))) (x c) (y (set (tuple21 a
  b))))
  (= (mem (tuple2 c1 (set1 (tuple2 a1 b1)))
  (Tuple2 c1 (set1 (tuple2 a1 b1)) (t2tb135 x) (t2tb11 y))
  (times (set1 (tuple2 a1 b1)) c1 (t2tb132 s) (t2tb10 t)))
  (and (mem7 x s) (mem4 y t)))))

(declare-fun t2tb220 ((set (tuple21 c (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 c (tuple21 a b))))) (sort
  (set1 (tuple2 c1 (tuple2 a1 b1))) (t2tb220 x))))

(declare-fun tb2t220 (uni) (set (tuple21 c (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 c (tuple21 a b)))))
  (! (= (tb2t220 (t2tb220 i)) i) :pattern ((t2tb220 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 c1 (tuple2 a1 b1))) j)
     (= (t2tb220 (tb2t220 j)) j)) :pattern ((t2tb220 (tb2t220 j))) )))

(declare-fun t2tb221 ((tuple21 c (tuple21 a b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 c (tuple21 a b)))) (sort (tuple2 c1 (tuple2 a1 b1))
  (t2tb221 x))))

(declare-fun tb2t221 (uni) (tuple21 c (tuple21 a b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 c (tuple21 a b))))
  (! (= (tb2t221 (t2tb221 i)) i) :pattern ((t2tb221 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 c1 (tuple2 a1 b1)) j) (= (t2tb221 (tb2t221 j)) j)) :pattern (
  (t2tb221 (tb2t221 j))) )))

;; mem_times
  (assert
  (forall ((s (set c)) (t (set (tuple21 a b))) (x c) (y (tuple21 a b)))
  (= (mem (tuple2 c1 (tuple2 a1 b1))
  (Tuple2 c1 (tuple2 a1 b1) (t2tb135 x) (t2tb13 y))
  (times (tuple2 a1 b1) c1 (t2tb132 s) (t2tb11 t)))
  (and (mem7 x s) (mem3 y t)))))

(declare-fun t2tb222 ((set (tuple21 c b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 c b)))) (sort (set1 (tuple2 c1 b1)) (t2tb222 x))))

(declare-fun tb2t222 (uni) (set (tuple21 c b)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 c b))))
  (! (= (tb2t222 (t2tb222 i)) i) :pattern ((t2tb222 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 c1 b1)) j) (= (t2tb222 (tb2t222 j)) j)) :pattern (
  (t2tb222 (tb2t222 j))) )))

(declare-fun t2tb223 ((tuple21 c b)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 c b))) (sort (tuple2 c1 b1) (t2tb223 x))))

(declare-fun tb2t223 (uni) (tuple21 c b))

;; BridgeL
  (assert
  (forall ((i (tuple21 c b)))
  (! (= (tb2t223 (t2tb223 i)) i) :pattern ((t2tb223 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 c1 b1) j) (= (t2tb223 (tb2t223 j)) j)) :pattern (
  (t2tb223 (tb2t223 j))) )))

;; mem_times
  (assert
  (forall ((s (set c)) (t (set b)) (x c) (y b))
  (= (mem (tuple2 c1 b1) (Tuple2 c1 b1 (t2tb135 x) (t2tb14 y))
  (times b1 c1 (t2tb132 s) (t2tb12 t))) (and (mem7 x s) (mem2 y t)))))

(declare-fun t2tb224 ((set (tuple21 c a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 c a)))) (sort (set1 (tuple2 c1 a1)) (t2tb224 x))))

(declare-fun tb2t224 (uni) (set (tuple21 c a)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 c a))))
  (! (= (tb2t224 (t2tb224 i)) i) :pattern ((t2tb224 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 c1 a1)) j) (= (t2tb224 (tb2t224 j)) j)) :pattern (
  (t2tb224 (tb2t224 j))) )))

(declare-fun t2tb225 ((tuple21 c a)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 c a))) (sort (tuple2 c1 a1) (t2tb225 x))))

(declare-fun tb2t225 (uni) (tuple21 c a))

;; BridgeL
  (assert
  (forall ((i (tuple21 c a)))
  (! (= (tb2t225 (t2tb225 i)) i) :pattern ((t2tb225 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 c1 a1) j) (= (t2tb225 (tb2t225 j)) j)) :pattern (
  (t2tb225 (tb2t225 j))) )))

;; mem_times
  (assert
  (forall ((s (set c)) (t (set a)) (x c) (y a))
  (= (mem (tuple2 c1 a1) (Tuple2 c1 a1 (t2tb135 x) (t2tb2 y))
  (times a1 c1 (t2tb132 s) (t2tb1 t))) (and (mem7 x s) (mem1 y t)))))

;; mem_times
  (assert
  (forall ((b2 ty))
  (forall ((s (set c)) (t uni) (x c) (y uni))
  (= (mem (tuple2 c1 b2) (Tuple2 c1 b2 (t2tb135 x) y)
  (times b2 c1 (t2tb132 s) t)) (and (mem7 x s) (mem b2 y t))))))

(declare-fun t2tb5163 ((set (tuple21 (tuple21 b a) (tuple21 a (tuple21 b
  c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b a) (tuple21 a (tuple21 b c)))))) (sort
  (set1 (tuple2 (tuple2 b1 a1) (tuple2 a1 (tuple2 b1 c1)))) (t2tb5163 x))))

(declare-fun tb2t5163 (uni) (set (tuple21 (tuple21 b a) (tuple21 a (tuple21 b
  c)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b a) (tuple21 a (tuple21 b c))))))
  (! (= (tb2t5163 (t2tb5163 i)) i) :pattern ((t2tb5163 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 a1) (tuple2 a1 (tuple2 b1 c1)))) j)
     (= (t2tb5163 (tb2t5163 j)) j)) :pattern ((t2tb5163 (tb2t5163 j))) )))

(declare-fun t2tb5164 ((tuple21 (tuple21 b a) (tuple21 a (tuple21 b
  c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b a) (tuple21 a (tuple21 b c))))) (sort
  (tuple2 (tuple2 b1 a1) (tuple2 a1 (tuple2 b1 c1))) (t2tb5164 x))))

(declare-fun tb2t5164 (uni) (tuple21 (tuple21 b a) (tuple21 a (tuple21 b
  c))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b a) (tuple21 a (tuple21 b c)))))
  (! (= (tb2t5164 (t2tb5164 i)) i) :pattern ((t2tb5164 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 a1) (tuple2 a1 (tuple2 b1 c1))) j)
     (= (t2tb5164 (tb2t5164 j)) j)) :pattern ((t2tb5164 (tb2t5164 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 b a))) (t (set (tuple21 a (tuple21 b c))))
  (x (tuple21 b a)) (y (tuple21 a (tuple21 b c))))
  (= (mem (tuple2 (tuple2 b1 a1) (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 (tuple2 b1 a1) (tuple2 a1 (tuple2 b1 c1)) (t2tb38 x) (t2tb260 y))
  (times (tuple2 a1 (tuple2 b1 c1)) (tuple2 b1 a1) (t2tb37 s) (t2tb261 t)))
  (and (mem5 x s) (mem14 y t)))))

(declare-fun t2tb5165 ((tuple21 (tuple21 b a) (set (tuple21 a c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b a) (set (tuple21 a c))))) (sort
  (tuple2 (tuple2 b1 a1) (set1 (tuple2 a1 c1))) (t2tb5165 x))))

(declare-fun tb2t5165 (uni) (tuple21 (tuple21 b a) (set (tuple21 a c))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b a) (set (tuple21 a c)))))
  (! (= (tb2t5165 (t2tb5165 i)) i) :pattern ((t2tb5165 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 a1) (set1 (tuple2 a1 c1))) j)
     (= (t2tb5165 (tb2t5165 j)) j)) :pattern ((t2tb5165 (tb2t5165 j))) )))

(declare-fun t2tb5166 ((set (tuple21 (tuple21 b a) (set (tuple21 a
  c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b a) (set (tuple21 a c)))))) (sort
  (set1 (tuple2 (tuple2 b1 a1) (set1 (tuple2 a1 c1)))) (t2tb5166 x))))

(declare-fun tb2t5166 (uni) (set (tuple21 (tuple21 b a) (set (tuple21 a
  c)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b a) (set (tuple21 a c))))))
  (! (= (tb2t5166 (t2tb5166 i)) i) :pattern ((t2tb5166 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 a1) (set1 (tuple2 a1 c1)))) j)
     (= (t2tb5166 (tb2t5166 j)) j)) :pattern ((t2tb5166 (tb2t5166 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 b a))) (t (set (set (tuple21 a c))))
  (x (tuple21 b a)) (y (set (tuple21 a c))))
  (= (mem (tuple2 (tuple2 b1 a1) (set1 (tuple2 a1 c1)))
  (Tuple2 (tuple2 b1 a1) (set1 (tuple2 a1 c1)) (t2tb38 x) (t2tb129 y))
  (times (set1 (tuple2 a1 c1)) (tuple2 b1 a1) (t2tb37 s) (t2tb128 t)))
  (and (mem5 x s) (mem11 y t)))))

(declare-fun t2tb5167 ((set (tuple21 (tuple21 b a) (tuple21 a c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b a) (tuple21 a c))))) (sort
  (set1 (tuple2 (tuple2 b1 a1) (tuple2 a1 c1))) (t2tb5167 x))))

(declare-fun tb2t5167 (uni) (set (tuple21 (tuple21 b a) (tuple21 a c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b a) (tuple21 a c)))))
  (! (= (tb2t5167 (t2tb5167 i)) i) :pattern ((t2tb5167 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 a1) (tuple2 a1 c1))) j)
     (= (t2tb5167 (tb2t5167 j)) j)) :pattern ((t2tb5167 (tb2t5167 j))) )))

(declare-fun t2tb5168 ((tuple21 (tuple21 b a) (tuple21 a c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b a) (tuple21 a c)))) (sort
  (tuple2 (tuple2 b1 a1) (tuple2 a1 c1)) (t2tb5168 x))))

(declare-fun tb2t5168 (uni) (tuple21 (tuple21 b a) (tuple21 a c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b a) (tuple21 a c))))
  (! (= (tb2t5168 (t2tb5168 i)) i) :pattern ((t2tb5168 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 a1) (tuple2 a1 c1)) j)
     (= (t2tb5168 (tb2t5168 j)) j)) :pattern ((t2tb5168 (tb2t5168 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 b a))) (t (set (tuple21 a c))) (x (tuple21 b a))
  (y (tuple21 a c)))
  (= (mem (tuple2 (tuple2 b1 a1) (tuple2 a1 c1))
  (Tuple2 (tuple2 b1 a1) (tuple2 a1 c1) (t2tb38 x) (t2tb133 y))
  (times (tuple2 a1 c1) (tuple2 b1 a1) (t2tb37 s) (t2tb129 t)))
  (and (mem5 x s) (mem10 y t)))))

(declare-fun t2tb5169 ((set (tuple21 (tuple21 b a) (tuple21 b c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b a) (tuple21 b c))))) (sort
  (set1 (tuple2 (tuple2 b1 a1) (tuple2 b1 c1))) (t2tb5169 x))))

(declare-fun tb2t5169 (uni) (set (tuple21 (tuple21 b a) (tuple21 b c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b a) (tuple21 b c)))))
  (! (= (tb2t5169 (t2tb5169 i)) i) :pattern ((t2tb5169 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 a1) (tuple2 b1 c1))) j)
     (= (t2tb5169 (tb2t5169 j)) j)) :pattern ((t2tb5169 (tb2t5169 j))) )))

(declare-fun t2tb5170 ((tuple21 (tuple21 b a) (tuple21 b c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b a) (tuple21 b c)))) (sort
  (tuple2 (tuple2 b1 a1) (tuple2 b1 c1)) (t2tb5170 x))))

(declare-fun tb2t5170 (uni) (tuple21 (tuple21 b a) (tuple21 b c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b a) (tuple21 b c))))
  (! (= (tb2t5170 (t2tb5170 i)) i) :pattern ((t2tb5170 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 a1) (tuple2 b1 c1)) j)
     (= (t2tb5170 (tb2t5170 j)) j)) :pattern ((t2tb5170 (tb2t5170 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 b a))) (t (set (tuple21 b c))) (x (tuple21 b a))
  (y (tuple21 b c)))
  (= (mem (tuple2 (tuple2 b1 a1) (tuple2 b1 c1))
  (Tuple2 (tuple2 b1 a1) (tuple2 b1 c1) (t2tb38 x) (t2tb134 y))
  (times (tuple2 b1 c1) (tuple2 b1 a1) (t2tb37 s) (t2tb131 t)))
  (and (mem5 x s) (mem8 y t)))))

(declare-fun t2tb5171 ((set (tuple21 (tuple21 b a) c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b a) c)))) (sort
  (set1 (tuple2 (tuple2 b1 a1) c1)) (t2tb5171 x))))

(declare-fun tb2t5171 (uni) (set (tuple21 (tuple21 b a) c)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b a) c))))
  (! (= (tb2t5171 (t2tb5171 i)) i) :pattern ((t2tb5171 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 a1) c1)) j)
     (= (t2tb5171 (tb2t5171 j)) j)) :pattern ((t2tb5171 (tb2t5171 j))) )))

(declare-fun t2tb5172 ((tuple21 (tuple21 b a) c)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b a) c))) (sort (tuple2 (tuple2 b1 a1) c1)
  (t2tb5172 x))))

(declare-fun tb2t5172 (uni) (tuple21 (tuple21 b a) c))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b a) c)))
  (! (= (tb2t5172 (t2tb5172 i)) i) :pattern ((t2tb5172 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 a1) c1) j) (= (t2tb5172 (tb2t5172 j)) j)) :pattern (
  (t2tb5172 (tb2t5172 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 b a))) (t (set c)) (x (tuple21 b a)) (y c))
  (= (mem (tuple2 (tuple2 b1 a1) c1)
  (Tuple2 (tuple2 b1 a1) c1 (t2tb38 x) (t2tb135 y))
  (times c1 (tuple2 b1 a1) (t2tb37 s) (t2tb132 t)))
  (and (mem5 x s) (mem7 y t)))))

(declare-fun t2tb1057 ((set (tuple21 (tuple21 b a) (tuple21 b a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b a) (tuple21 b a))))) (sort
  (set1 (tuple2 (tuple2 b1 a1) (tuple2 b1 a1))) (t2tb1057 x))))

(declare-fun tb2t1057 (uni) (set (tuple21 (tuple21 b a) (tuple21 b a))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b a) (tuple21 b a)))))
  (! (= (tb2t1057 (t2tb1057 i)) i) :pattern ((t2tb1057 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 a1) (tuple2 b1 a1))) j)
     (= (t2tb1057 (tb2t1057 j)) j)) :pattern ((t2tb1057 (tb2t1057 j))) )))

(declare-fun t2tb1058 ((tuple21 (tuple21 b a) (tuple21 b a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b a) (tuple21 b a)))) (sort
  (tuple2 (tuple2 b1 a1) (tuple2 b1 a1)) (t2tb1058 x))))

(declare-fun tb2t1058 (uni) (tuple21 (tuple21 b a) (tuple21 b a)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b a) (tuple21 b a))))
  (! (= (tb2t1058 (t2tb1058 i)) i) :pattern ((t2tb1058 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 a1) (tuple2 b1 a1)) j)
     (= (t2tb1058 (tb2t1058 j)) j)) :pattern ((t2tb1058 (tb2t1058 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 b a))) (t (set (tuple21 b a))) (x (tuple21 b a))
  (y (tuple21 b a)))
  (= (mem (tuple2 (tuple2 b1 a1) (tuple2 b1 a1))
  (Tuple2 (tuple2 b1 a1) (tuple2 b1 a1) (t2tb38 x) (t2tb38 y))
  (times (tuple2 b1 a1) (tuple2 b1 a1) (t2tb37 s) (t2tb37 t)))
  (and (mem5 x s) (mem5 y t)))))

(declare-fun t2tb2397 ((set (tuple21 (tuple21 b a) (set (tuple21 a
  b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b a) (set (tuple21 a b)))))) (sort
  (set1 (tuple2 (tuple2 b1 a1) (set1 (tuple2 a1 b1)))) (t2tb2397 x))))

(declare-fun tb2t2397 (uni) (set (tuple21 (tuple21 b a) (set (tuple21 a
  b)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b a) (set (tuple21 a b))))))
  (! (= (tb2t2397 (t2tb2397 i)) i) :pattern ((t2tb2397 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 a1) (set1 (tuple2 a1 b1)))) j)
     (= (t2tb2397 (tb2t2397 j)) j)) :pattern ((t2tb2397 (tb2t2397 j))) )))

(declare-fun t2tb2398 ((tuple21 (tuple21 b a) (set (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b a) (set (tuple21 a b))))) (sort
  (tuple2 (tuple2 b1 a1) (set1 (tuple2 a1 b1))) (t2tb2398 x))))

(declare-fun tb2t2398 (uni) (tuple21 (tuple21 b a) (set (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b a) (set (tuple21 a b)))))
  (! (= (tb2t2398 (t2tb2398 i)) i) :pattern ((t2tb2398 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 a1) (set1 (tuple2 a1 b1))) j)
     (= (t2tb2398 (tb2t2398 j)) j)) :pattern ((t2tb2398 (tb2t2398 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 b a))) (t (set (set (tuple21 a b))))
  (x (tuple21 b a)) (y (set (tuple21 a b))))
  (= (mem (tuple2 (tuple2 b1 a1) (set1 (tuple2 a1 b1)))
  (Tuple2 (tuple2 b1 a1) (set1 (tuple2 a1 b1)) (t2tb38 x) (t2tb11 y))
  (times (set1 (tuple2 a1 b1)) (tuple2 b1 a1) (t2tb37 s) (t2tb10 t)))
  (and (mem5 x s) (mem4 y t)))))

(declare-fun t2tb1061 ((set (tuple21 (tuple21 b a) (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b a) (tuple21 a b))))) (sort
  (set1 (tuple2 (tuple2 b1 a1) (tuple2 a1 b1))) (t2tb1061 x))))

(declare-fun tb2t1061 (uni) (set (tuple21 (tuple21 b a) (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b a) (tuple21 a b)))))
  (! (= (tb2t1061 (t2tb1061 i)) i) :pattern ((t2tb1061 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 a1) (tuple2 a1 b1))) j)
     (= (t2tb1061 (tb2t1061 j)) j)) :pattern ((t2tb1061 (tb2t1061 j))) )))

(declare-fun t2tb1062 ((tuple21 (tuple21 b a) (tuple21 a b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b a) (tuple21 a b)))) (sort
  (tuple2 (tuple2 b1 a1) (tuple2 a1 b1)) (t2tb1062 x))))

(declare-fun tb2t1062 (uni) (tuple21 (tuple21 b a) (tuple21 a b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b a) (tuple21 a b))))
  (! (= (tb2t1062 (t2tb1062 i)) i) :pattern ((t2tb1062 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 a1) (tuple2 a1 b1)) j)
     (= (t2tb1062 (tb2t1062 j)) j)) :pattern ((t2tb1062 (tb2t1062 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 b a))) (t (set (tuple21 a b))) (x (tuple21 b a))
  (y (tuple21 a b)))
  (= (mem (tuple2 (tuple2 b1 a1) (tuple2 a1 b1))
  (Tuple2 (tuple2 b1 a1) (tuple2 a1 b1) (t2tb38 x) (t2tb13 y))
  (times (tuple2 a1 b1) (tuple2 b1 a1) (t2tb37 s) (t2tb11 t)))
  (and (mem5 x s) (mem3 y t)))))

(declare-fun t2tb1063 ((set (tuple21 (tuple21 b a) b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b a) b)))) (sort
  (set1 (tuple2 (tuple2 b1 a1) b1)) (t2tb1063 x))))

(declare-fun tb2t1063 (uni) (set (tuple21 (tuple21 b a) b)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b a) b))))
  (! (= (tb2t1063 (t2tb1063 i)) i) :pattern ((t2tb1063 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 a1) b1)) j)
     (= (t2tb1063 (tb2t1063 j)) j)) :pattern ((t2tb1063 (tb2t1063 j))) )))

(declare-fun t2tb1064 ((tuple21 (tuple21 b a) b)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b a) b))) (sort (tuple2 (tuple2 b1 a1) b1)
  (t2tb1064 x))))

(declare-fun tb2t1064 (uni) (tuple21 (tuple21 b a) b))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b a) b)))
  (! (= (tb2t1064 (t2tb1064 i)) i) :pattern ((t2tb1064 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 a1) b1) j) (= (t2tb1064 (tb2t1064 j)) j)) :pattern (
  (t2tb1064 (tb2t1064 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 b a))) (t (set b)) (x (tuple21 b a)) (y b))
  (= (mem (tuple2 (tuple2 b1 a1) b1)
  (Tuple2 (tuple2 b1 a1) b1 (t2tb38 x) (t2tb14 y))
  (times b1 (tuple2 b1 a1) (t2tb37 s) (t2tb12 t)))
  (and (mem5 x s) (mem2 y t)))))

(declare-fun t2tb1065 ((set (tuple21 (tuple21 b a) a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b a) a)))) (sort
  (set1 (tuple2 (tuple2 b1 a1) a1)) (t2tb1065 x))))

(declare-fun tb2t1065 (uni) (set (tuple21 (tuple21 b a) a)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b a) a))))
  (! (= (tb2t1065 (t2tb1065 i)) i) :pattern ((t2tb1065 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 a1) a1)) j)
     (= (t2tb1065 (tb2t1065 j)) j)) :pattern ((t2tb1065 (tb2t1065 j))) )))

(declare-fun t2tb1066 ((tuple21 (tuple21 b a) a)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b a) a))) (sort (tuple2 (tuple2 b1 a1) a1)
  (t2tb1066 x))))

(declare-fun tb2t1066 (uni) (tuple21 (tuple21 b a) a))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b a) a)))
  (! (= (tb2t1066 (t2tb1066 i)) i) :pattern ((t2tb1066 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 a1) a1) j) (= (t2tb1066 (tb2t1066 j)) j)) :pattern (
  (t2tb1066 (tb2t1066 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 b a))) (t (set a)) (x (tuple21 b a)) (y a))
  (= (mem (tuple2 (tuple2 b1 a1) a1)
  (Tuple2 (tuple2 b1 a1) a1 (t2tb38 x) (t2tb2 y))
  (times a1 (tuple2 b1 a1) (t2tb37 s) (t2tb1 t)))
  (and (mem5 x s) (mem1 y t)))))

;; mem_times
  (assert
  (forall ((b2 ty))
  (forall ((s (set (tuple21 b a))) (t uni) (x (tuple21 b a)) (y uni))
  (= (mem (tuple2 (tuple2 b1 a1) b2) (Tuple2 (tuple2 b1 a1) b2 (t2tb38 x) y)
  (times b2 (tuple2 b1 a1) (t2tb37 s) t)) (and (mem5 x s) (mem b2 y t))))))

(declare-fun t2tb4526 ((set (tuple21 (set (tuple21 a b)) (tuple21 a
  (tuple21 b c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a b)) (tuple21 a (tuple21 b c))))))
  (sort (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 (tuple2 b1 c1))))
  (t2tb4526 x))))

(declare-fun tb2t4526 (uni) (set (tuple21 (set (tuple21 a b)) (tuple21 a
  (tuple21 b c)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a b)) (tuple21 a (tuple21 b c))))))
  (! (= (tb2t4526 (t2tb4526 i)) i) :pattern ((t2tb4526 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 (tuple2 b1 c1)))) j)
     (= (t2tb4526 (tb2t4526 j)) j)) :pattern ((t2tb4526 (tb2t4526 j))) )))

(declare-fun t2tb4527 ((tuple21 (set (tuple21 a b)) (tuple21 a (tuple21 b
  c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a b)) (tuple21 a (tuple21 b c))))) (sort
  (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 (tuple2 b1 c1))) (t2tb4527 x))))

(declare-fun tb2t4527 (uni) (tuple21 (set (tuple21 a b)) (tuple21 a
  (tuple21 b c))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a b)) (tuple21 a (tuple21 b c)))))
  (! (= (tb2t4527 (t2tb4527 i)) i) :pattern ((t2tb4527 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 (tuple2 b1 c1))) j)
     (= (t2tb4527 (tb2t4527 j)) j)) :pattern ((t2tb4527 (tb2t4527 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set (tuple21 a (tuple21 b c))))
  (x (set (tuple21 a b))) (y (tuple21 a (tuple21 b c))))
  (= (mem (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 (tuple2 b1 c1)) (t2tb11 x)
  (t2tb260 y))
  (times (tuple2 a1 (tuple2 b1 c1)) (set1 (tuple2 a1 b1)) (t2tb10 s)
  (t2tb261 t))) (and (mem4 x s) (mem14 y t)))))

(declare-fun t2tb4528 ((set (tuple21 (set (tuple21 a b)) (set (tuple21 a
  c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a b)) (set (tuple21 a c)))))) (sort
  (set1 (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 c1)))) (t2tb4528 x))))

(declare-fun tb2t4528 (uni) (set (tuple21 (set (tuple21 a b)) (set (tuple21 a
  c)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a b)) (set (tuple21 a c))))))
  (! (= (tb2t4528 (t2tb4528 i)) i) :pattern ((t2tb4528 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 c1)))) j)
     (= (t2tb4528 (tb2t4528 j)) j)) :pattern ((t2tb4528 (tb2t4528 j))) )))

(declare-fun t2tb4529 ((tuple21 (set (tuple21 a b)) (set (tuple21 a
  c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a b)) (set (tuple21 a c))))) (sort
  (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 c1))) (t2tb4529 x))))

(declare-fun tb2t4529 (uni) (tuple21 (set (tuple21 a b)) (set (tuple21 a
  c))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a b)) (set (tuple21 a c)))))
  (! (= (tb2t4529 (t2tb4529 i)) i) :pattern ((t2tb4529 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 c1))) j)
     (= (t2tb4529 (tb2t4529 j)) j)) :pattern ((t2tb4529 (tb2t4529 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set (set (tuple21 a c))))
  (x (set (tuple21 a b))) (y (set (tuple21 a c))))
  (= (mem (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 c1)))
  (Tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 c1)) (t2tb11 x) (t2tb129 y))
  (times (set1 (tuple2 a1 c1)) (set1 (tuple2 a1 b1)) (t2tb10 s) (t2tb128 t)))
  (and (mem4 x s) (mem11 y t)))))

(declare-fun t2tb228 ((tuple21 (set (tuple21 a b)) (tuple21 a c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a b)) (tuple21 a c)))) (sort
  (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 c1)) (t2tb228 x))))

(declare-fun tb2t228 (uni) (tuple21 (set (tuple21 a b)) (tuple21 a c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a b)) (tuple21 a c))))
  (! (= (tb2t228 (t2tb228 i)) i) :pattern ((t2tb228 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 c1)) j)
     (= (t2tb228 (tb2t228 j)) j)) :pattern ((t2tb228 (tb2t228 j))) )))

(declare-fun t2tb229 ((set (tuple21 (set (tuple21 a b)) (tuple21 a c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a b)) (tuple21 a c))))) (sort
  (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 c1))) (t2tb229 x))))

(declare-fun tb2t229 (uni) (set (tuple21 (set (tuple21 a b)) (tuple21 a c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a b)) (tuple21 a c)))))
  (! (= (tb2t229 (t2tb229 i)) i) :pattern ((t2tb229 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 c1))) j)
     (= (t2tb229 (tb2t229 j)) j)) :pattern ((t2tb229 (tb2t229 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set (tuple21 a c)))
  (x (set (tuple21 a b))) (y (tuple21 a c)))
  (= (mem (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 c1))
  (Tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 c1) (t2tb11 x) (t2tb133 y))
  (times (tuple2 a1 c1) (set1 (tuple2 a1 b1)) (t2tb10 s) (t2tb129 t)))
  (and (mem4 x s) (mem10 y t)))))

(declare-fun t2tb1131 ((set (tuple21 (set (tuple21 a b)) (tuple21 b
  c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a b)) (tuple21 b c))))) (sort
  (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 b1 c1))) (t2tb1131 x))))

(declare-fun tb2t1131 (uni) (set (tuple21 (set (tuple21 a b)) (tuple21 b
  c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a b)) (tuple21 b c)))))
  (! (= (tb2t1131 (t2tb1131 i)) i) :pattern ((t2tb1131 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 b1 c1))) j)
     (= (t2tb1131 (tb2t1131 j)) j)) :pattern ((t2tb1131 (tb2t1131 j))) )))

(declare-fun t2tb1132 ((tuple21 (set (tuple21 a b)) (tuple21 b c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a b)) (tuple21 b c)))) (sort
  (tuple2 (set1 (tuple2 a1 b1)) (tuple2 b1 c1)) (t2tb1132 x))))

(declare-fun tb2t1132 (uni) (tuple21 (set (tuple21 a b)) (tuple21 b c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a b)) (tuple21 b c))))
  (! (= (tb2t1132 (t2tb1132 i)) i) :pattern ((t2tb1132 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 a1 b1)) (tuple2 b1 c1)) j)
     (= (t2tb1132 (tb2t1132 j)) j)) :pattern ((t2tb1132 (tb2t1132 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set (tuple21 b c)))
  (x (set (tuple21 a b))) (y (tuple21 b c)))
  (= (mem (tuple2 (set1 (tuple2 a1 b1)) (tuple2 b1 c1))
  (Tuple2 (set1 (tuple2 a1 b1)) (tuple2 b1 c1) (t2tb11 x) (t2tb134 y))
  (times (tuple2 b1 c1) (set1 (tuple2 a1 b1)) (t2tb10 s) (t2tb131 t)))
  (and (mem4 x s) (mem8 y t)))))

(declare-fun t2tb234 ((set (tuple21 (set (tuple21 a b)) c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a b)) c)))) (sort
  (set1 (tuple2 (set1 (tuple2 a1 b1)) c1)) (t2tb234 x))))

(declare-fun tb2t234 (uni) (set (tuple21 (set (tuple21 a b)) c)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a b)) c))))
  (! (= (tb2t234 (t2tb234 i)) i) :pattern ((t2tb234 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 a1 b1)) c1)) j)
     (= (t2tb234 (tb2t234 j)) j)) :pattern ((t2tb234 (tb2t234 j))) )))

(declare-fun t2tb235 ((tuple21 (set (tuple21 a b)) c)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a b)) c))) (sort
  (tuple2 (set1 (tuple2 a1 b1)) c1) (t2tb235 x))))

(declare-fun tb2t235 (uni) (tuple21 (set (tuple21 a b)) c))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a b)) c)))
  (! (= (tb2t235 (t2tb235 i)) i) :pattern ((t2tb235 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 a1 b1)) c1) j)
     (= (t2tb235 (tb2t235 j)) j)) :pattern ((t2tb235 (tb2t235 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set c)) (x (set (tuple21 a b)))
  (y c))
  (= (mem (tuple2 (set1 (tuple2 a1 b1)) c1)
  (Tuple2 (set1 (tuple2 a1 b1)) c1 (t2tb11 x) (t2tb135 y))
  (times c1 (set1 (tuple2 a1 b1)) (t2tb10 s) (t2tb132 t)))
  (and (mem4 x s) (mem7 y t)))))

(declare-fun t2tb2399 ((set (tuple21 (set (tuple21 a b)) (tuple21 b
  a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a b)) (tuple21 b a))))) (sort
  (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 b1 a1))) (t2tb2399 x))))

(declare-fun tb2t2399 (uni) (set (tuple21 (set (tuple21 a b)) (tuple21 b
  a))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a b)) (tuple21 b a)))))
  (! (= (tb2t2399 (t2tb2399 i)) i) :pattern ((t2tb2399 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 b1 a1))) j)
     (= (t2tb2399 (tb2t2399 j)) j)) :pattern ((t2tb2399 (tb2t2399 j))) )))

(declare-fun t2tb2400 ((tuple21 (set (tuple21 a b)) (tuple21 b a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a b)) (tuple21 b a)))) (sort
  (tuple2 (set1 (tuple2 a1 b1)) (tuple2 b1 a1)) (t2tb2400 x))))

(declare-fun tb2t2400 (uni) (tuple21 (set (tuple21 a b)) (tuple21 b a)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a b)) (tuple21 b a))))
  (! (= (tb2t2400 (t2tb2400 i)) i) :pattern ((t2tb2400 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 a1 b1)) (tuple2 b1 a1)) j)
     (= (t2tb2400 (tb2t2400 j)) j)) :pattern ((t2tb2400 (tb2t2400 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set (tuple21 b a)))
  (x (set (tuple21 a b))) (y (tuple21 b a)))
  (= (mem (tuple2 (set1 (tuple2 a1 b1)) (tuple2 b1 a1))
  (Tuple2 (set1 (tuple2 a1 b1)) (tuple2 b1 a1) (t2tb11 x) (t2tb38 y))
  (times (tuple2 b1 a1) (set1 (tuple2 a1 b1)) (t2tb10 s) (t2tb37 t)))
  (and (mem4 x s) (mem5 y t)))))

(declare-fun t2tb15 ((set (tuple21 (set (tuple21 a b)) (set (tuple21 a
  b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a b)) (set (tuple21 a b)))))) (sort
  (set1 (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1)))) (t2tb15 x))))

(declare-fun tb2t15 (uni) (set (tuple21 (set (tuple21 a b)) (set (tuple21 a
  b)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a b)) (set (tuple21 a b))))))
  (! (= (tb2t15 (t2tb15 i)) i) :pattern ((t2tb15 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1)))) j)
     (= (t2tb15 (tb2t15 j)) j)) :pattern ((t2tb15 (tb2t15 j))) )))

(declare-fun t2tb16 ((tuple21 (set (tuple21 a b)) (set (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a b)) (set (tuple21 a b))))) (sort
  (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1))) (t2tb16 x))))

(declare-fun tb2t16 (uni) (tuple21 (set (tuple21 a b)) (set (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a b)) (set (tuple21 a b)))))
  (! (= (tb2t16 (t2tb16 i)) i) :pattern ((t2tb16 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1))) j)
     (= (t2tb16 (tb2t16 j)) j)) :pattern ((t2tb16 (tb2t16 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set (set (tuple21 a b))))
  (x (set (tuple21 a b))) (y (set (tuple21 a b))))
  (= (mem (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1)))
  (Tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1)) (t2tb11 x) (t2tb11 y))
  (times (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1)) (t2tb10 s) (t2tb10 t)))
  (and (mem4 x s) (mem4 y t)))))

(declare-fun t2tb17 ((set (tuple21 (set (tuple21 a b)) (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a b)) (tuple21 a b))))) (sort
  (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 b1))) (t2tb17 x))))

(declare-fun tb2t17 (uni) (set (tuple21 (set (tuple21 a b)) (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a b)) (tuple21 a b)))))
  (! (= (tb2t17 (t2tb17 i)) i) :pattern ((t2tb17 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 b1))) j)
     (= (t2tb17 (tb2t17 j)) j)) :pattern ((t2tb17 (tb2t17 j))) )))

(declare-fun t2tb18 ((tuple21 (set (tuple21 a b)) (tuple21 a b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a b)) (tuple21 a b)))) (sort
  (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 b1)) (t2tb18 x))))

(declare-fun tb2t18 (uni) (tuple21 (set (tuple21 a b)) (tuple21 a b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a b)) (tuple21 a b))))
  (! (= (tb2t18 (t2tb18 i)) i) :pattern ((t2tb18 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 b1)) j)
     (= (t2tb18 (tb2t18 j)) j)) :pattern ((t2tb18 (tb2t18 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set (tuple21 a b)))
  (x (set (tuple21 a b))) (y (tuple21 a b)))
  (= (mem (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 b1))
  (Tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 b1) (t2tb11 x) (t2tb13 y))
  (times (tuple2 a1 b1) (set1 (tuple2 a1 b1)) (t2tb10 s) (t2tb11 t)))
  (and (mem4 x s) (mem3 y t)))))

(declare-fun t2tb19 ((set (tuple21 (set (tuple21 a b)) b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a b)) b)))) (sort
  (set1 (tuple2 (set1 (tuple2 a1 b1)) b1)) (t2tb19 x))))

(declare-fun tb2t19 (uni) (set (tuple21 (set (tuple21 a b)) b)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a b)) b))))
  (! (= (tb2t19 (t2tb19 i)) i) :pattern ((t2tb19 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 a1 b1)) b1)) j)
     (= (t2tb19 (tb2t19 j)) j)) :pattern ((t2tb19 (tb2t19 j))) )))

(declare-fun t2tb20 ((tuple21 (set (tuple21 a b)) b)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a b)) b))) (sort
  (tuple2 (set1 (tuple2 a1 b1)) b1) (t2tb20 x))))

(declare-fun tb2t20 (uni) (tuple21 (set (tuple21 a b)) b))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a b)) b)))
  (! (= (tb2t20 (t2tb20 i)) i) :pattern ((t2tb20 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 a1 b1)) b1) j)
     (= (t2tb20 (tb2t20 j)) j)) :pattern ((t2tb20 (tb2t20 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set b)) (x (set (tuple21 a b)))
  (y b))
  (= (mem (tuple2 (set1 (tuple2 a1 b1)) b1)
  (Tuple2 (set1 (tuple2 a1 b1)) b1 (t2tb11 x) (t2tb14 y))
  (times b1 (set1 (tuple2 a1 b1)) (t2tb10 s) (t2tb12 t)))
  (and (mem4 x s) (mem2 y t)))))

(declare-fun t2tb21 ((tuple21 (set (tuple21 a b)) a)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a b)) a))) (sort
  (tuple2 (set1 (tuple2 a1 b1)) a1) (t2tb21 x))))

(declare-fun tb2t21 (uni) (tuple21 (set (tuple21 a b)) a))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a b)) a)))
  (! (= (tb2t21 (t2tb21 i)) i) :pattern ((t2tb21 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 a1 b1)) a1) j)
     (= (t2tb21 (tb2t21 j)) j)) :pattern ((t2tb21 (tb2t21 j))) )))

(declare-fun t2tb22 ((set (tuple21 (set (tuple21 a b)) a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a b)) a)))) (sort
  (set1 (tuple2 (set1 (tuple2 a1 b1)) a1)) (t2tb22 x))))

(declare-fun tb2t22 (uni) (set (tuple21 (set (tuple21 a b)) a)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a b)) a))))
  (! (= (tb2t22 (t2tb22 i)) i) :pattern ((t2tb22 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 a1 b1)) a1)) j)
     (= (t2tb22 (tb2t22 j)) j)) :pattern ((t2tb22 (tb2t22 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set a)) (x (set (tuple21 a b)))
  (y a))
  (= (mem (tuple2 (set1 (tuple2 a1 b1)) a1)
  (Tuple2 (set1 (tuple2 a1 b1)) a1 (t2tb11 x) (t2tb2 y))
  (times a1 (set1 (tuple2 a1 b1)) (t2tb10 s) (t2tb1 t)))
  (and (mem4 x s) (mem1 y t)))))

;; mem_times
  (assert
  (forall ((b2 ty))
  (forall ((s (set (set (tuple21 a b)))) (t uni) (x (set (tuple21 a b)))
  (y uni))
  (= (mem (tuple2 (set1 (tuple2 a1 b1)) b2)
  (Tuple2 (set1 (tuple2 a1 b1)) b2 (t2tb11 x) y)
  (times b2 (set1 (tuple2 a1 b1)) (t2tb10 s) t))
  (and (mem4 x s) (mem b2 y t))))))

(declare-fun t2tb4544 ((set (tuple21 (tuple21 a b) (tuple21 a (tuple21 b
  c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) (tuple21 a (tuple21 b c)))))) (sort
  (set1 (tuple2 (tuple2 a1 b1) (tuple2 a1 (tuple2 b1 c1)))) (t2tb4544 x))))

(declare-fun tb2t4544 (uni) (set (tuple21 (tuple21 a b) (tuple21 a (tuple21 b
  c)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a b) (tuple21 a (tuple21 b c))))))
  (! (= (tb2t4544 (t2tb4544 i)) i) :pattern ((t2tb4544 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 b1) (tuple2 a1 (tuple2 b1 c1)))) j)
     (= (t2tb4544 (tb2t4544 j)) j)) :pattern ((t2tb4544 (tb2t4544 j))) )))

(declare-fun t2tb4545 ((tuple21 (tuple21 a b) (tuple21 a (tuple21 b
  c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a b) (tuple21 a (tuple21 b c))))) (sort
  (tuple2 (tuple2 a1 b1) (tuple2 a1 (tuple2 b1 c1))) (t2tb4545 x))))

(declare-fun tb2t4545 (uni) (tuple21 (tuple21 a b) (tuple21 a (tuple21 b
  c))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a b) (tuple21 a (tuple21 b c)))))
  (! (= (tb2t4545 (t2tb4545 i)) i) :pattern ((t2tb4545 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 b1) (tuple2 a1 (tuple2 b1 c1))) j)
     (= (t2tb4545 (tb2t4545 j)) j)) :pattern ((t2tb4545 (tb2t4545 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (tuple21 a (tuple21 b c))))
  (x (tuple21 a b)) (y (tuple21 a (tuple21 b c))))
  (= (mem (tuple2 (tuple2 a1 b1) (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 (tuple2 a1 b1) (tuple2 a1 (tuple2 b1 c1)) (t2tb13 x) (t2tb260 y))
  (times (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 b1) (t2tb11 s) (t2tb261 t)))
  (and (mem3 x s) (mem14 y t)))))

(declare-fun t2tb4546 ((set (tuple21 (tuple21 a b) (set (tuple21 a
  c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) (set (tuple21 a c)))))) (sort
  (set1 (tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 c1)))) (t2tb4546 x))))

(declare-fun tb2t4546 (uni) (set (tuple21 (tuple21 a b) (set (tuple21 a
  c)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a b) (set (tuple21 a c))))))
  (! (= (tb2t4546 (t2tb4546 i)) i) :pattern ((t2tb4546 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 c1)))) j)
     (= (t2tb4546 (tb2t4546 j)) j)) :pattern ((t2tb4546 (tb2t4546 j))) )))

(declare-fun t2tb4547 ((tuple21 (tuple21 a b) (set (tuple21 a c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a b) (set (tuple21 a c))))) (sort
  (tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 c1))) (t2tb4547 x))))

(declare-fun tb2t4547 (uni) (tuple21 (tuple21 a b) (set (tuple21 a c))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a b) (set (tuple21 a c)))))
  (! (= (tb2t4547 (t2tb4547 i)) i) :pattern ((t2tb4547 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 c1))) j)
     (= (t2tb4547 (tb2t4547 j)) j)) :pattern ((t2tb4547 (tb2t4547 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (set (tuple21 a c))))
  (x (tuple21 a b)) (y (set (tuple21 a c))))
  (= (mem (tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 c1)))
  (Tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 c1)) (t2tb13 x) (t2tb129 y))
  (times (set1 (tuple2 a1 c1)) (tuple2 a1 b1) (t2tb11 s) (t2tb128 t)))
  (and (mem3 x s) (mem11 y t)))))

(declare-fun t2tb238 ((set (tuple21 (tuple21 a b) (tuple21 a c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) (tuple21 a c))))) (sort
  (set1 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1))) (t2tb238 x))))

(declare-fun tb2t238 (uni) (set (tuple21 (tuple21 a b) (tuple21 a c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a b) (tuple21 a c)))))
  (! (= (tb2t238 (t2tb238 i)) i) :pattern ((t2tb238 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1))) j)
     (= (t2tb238 (tb2t238 j)) j)) :pattern ((t2tb238 (tb2t238 j))) )))

(declare-fun t2tb239 ((tuple21 (tuple21 a b) (tuple21 a c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a b) (tuple21 a c)))) (sort
  (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) (t2tb239 x))))

(declare-fun tb2t239 (uni) (tuple21 (tuple21 a b) (tuple21 a c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a b) (tuple21 a c))))
  (! (= (tb2t239 (t2tb239 i)) i) :pattern ((t2tb239 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) j)
     (= (t2tb239 (tb2t239 j)) j)) :pattern ((t2tb239 (tb2t239 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (tuple21 a c))) (x (tuple21 a b))
  (y (tuple21 a c)))
  (= (mem (tuple2 (tuple2 a1 b1) (tuple2 a1 c1))
  (Tuple2 (tuple2 a1 b1) (tuple2 a1 c1) (t2tb13 x) (t2tb133 y))
  (times (tuple2 a1 c1) (tuple2 a1 b1) (t2tb11 s) (t2tb129 t)))
  (and (mem3 x s) (mem10 y t)))))

(declare-fun t2tb1135 ((set (tuple21 (tuple21 a b) (tuple21 b c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) (tuple21 b c))))) (sort
  (set1 (tuple2 (tuple2 a1 b1) (tuple2 b1 c1))) (t2tb1135 x))))

(declare-fun tb2t1135 (uni) (set (tuple21 (tuple21 a b) (tuple21 b c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a b) (tuple21 b c)))))
  (! (= (tb2t1135 (t2tb1135 i)) i) :pattern ((t2tb1135 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 b1) (tuple2 b1 c1))) j)
     (= (t2tb1135 (tb2t1135 j)) j)) :pattern ((t2tb1135 (tb2t1135 j))) )))

(declare-fun t2tb1136 ((tuple21 (tuple21 a b) (tuple21 b c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a b) (tuple21 b c)))) (sort
  (tuple2 (tuple2 a1 b1) (tuple2 b1 c1)) (t2tb1136 x))))

(declare-fun tb2t1136 (uni) (tuple21 (tuple21 a b) (tuple21 b c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a b) (tuple21 b c))))
  (! (= (tb2t1136 (t2tb1136 i)) i) :pattern ((t2tb1136 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 b1) (tuple2 b1 c1)) j)
     (= (t2tb1136 (tb2t1136 j)) j)) :pattern ((t2tb1136 (tb2t1136 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (tuple21 b c))) (x (tuple21 a b))
  (y (tuple21 b c)))
  (= (mem (tuple2 (tuple2 a1 b1) (tuple2 b1 c1))
  (Tuple2 (tuple2 a1 b1) (tuple2 b1 c1) (t2tb13 x) (t2tb134 y))
  (times (tuple2 b1 c1) (tuple2 a1 b1) (t2tb11 s) (t2tb131 t)))
  (and (mem3 x s) (mem8 y t)))))

(declare-fun t2tb244 ((tuple21 (tuple21 a b) c)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a b) c))) (sort (tuple2 (tuple2 a1 b1) c1)
  (t2tb244 x))))

(declare-fun tb2t244 (uni) (tuple21 (tuple21 a b) c))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a b) c)))
  (! (= (tb2t244 (t2tb244 i)) i) :pattern ((t2tb244 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 b1) c1) j) (= (t2tb244 (tb2t244 j)) j)) :pattern (
  (t2tb244 (tb2t244 j))) )))

(declare-fun t2tb245 ((set (tuple21 (tuple21 a b) c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) c)))) (sort
  (set1 (tuple2 (tuple2 a1 b1) c1)) (t2tb245 x))))

(declare-fun tb2t245 (uni) (set (tuple21 (tuple21 a b) c)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a b) c))))
  (! (= (tb2t245 (t2tb245 i)) i) :pattern ((t2tb245 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 b1) c1)) j)
     (= (t2tb245 (tb2t245 j)) j)) :pattern ((t2tb245 (tb2t245 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a b))) (t (set c)) (x (tuple21 a b)) (y c))
  (= (mem (tuple2 (tuple2 a1 b1) c1)
  (Tuple2 (tuple2 a1 b1) c1 (t2tb13 x) (t2tb135 y))
  (times c1 (tuple2 a1 b1) (t2tb11 s) (t2tb132 t)))
  (and (mem3 x s) (mem7 y t)))))

(declare-fun t2tb1069 ((set (tuple21 (tuple21 a b) (tuple21 b a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) (tuple21 b a))))) (sort
  (set1 (tuple2 (tuple2 a1 b1) (tuple2 b1 a1))) (t2tb1069 x))))

(declare-fun tb2t1069 (uni) (set (tuple21 (tuple21 a b) (tuple21 b a))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a b) (tuple21 b a)))))
  (! (= (tb2t1069 (t2tb1069 i)) i) :pattern ((t2tb1069 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 b1) (tuple2 b1 a1))) j)
     (= (t2tb1069 (tb2t1069 j)) j)) :pattern ((t2tb1069 (tb2t1069 j))) )))

(declare-fun t2tb1070 ((tuple21 (tuple21 a b) (tuple21 b a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a b) (tuple21 b a)))) (sort
  (tuple2 (tuple2 a1 b1) (tuple2 b1 a1)) (t2tb1070 x))))

(declare-fun tb2t1070 (uni) (tuple21 (tuple21 a b) (tuple21 b a)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a b) (tuple21 b a))))
  (! (= (tb2t1070 (t2tb1070 i)) i) :pattern ((t2tb1070 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 b1) (tuple2 b1 a1)) j)
     (= (t2tb1070 (tb2t1070 j)) j)) :pattern ((t2tb1070 (tb2t1070 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (tuple21 b a))) (x (tuple21 a b))
  (y (tuple21 b a)))
  (= (mem (tuple2 (tuple2 a1 b1) (tuple2 b1 a1))
  (Tuple2 (tuple2 a1 b1) (tuple2 b1 a1) (t2tb13 x) (t2tb38 y))
  (times (tuple2 b1 a1) (tuple2 a1 b1) (t2tb11 s) (t2tb37 t)))
  (and (mem3 x s) (mem5 y t)))))

(declare-fun t2tb23 ((set (tuple21 (tuple21 a b) (set (tuple21 a b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) (set (tuple21 a b)))))) (sort
  (set1 (tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 b1)))) (t2tb23 x))))

(declare-fun tb2t23 (uni) (set (tuple21 (tuple21 a b) (set (tuple21 a b)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a b) (set (tuple21 a b))))))
  (! (= (tb2t23 (t2tb23 i)) i) :pattern ((t2tb23 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 b1)))) j)
     (= (t2tb23 (tb2t23 j)) j)) :pattern ((t2tb23 (tb2t23 j))) )))

(declare-fun t2tb24 ((tuple21 (tuple21 a b) (set (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a b) (set (tuple21 a b))))) (sort
  (tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 b1))) (t2tb24 x))))

(declare-fun tb2t24 (uni) (tuple21 (tuple21 a b) (set (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a b) (set (tuple21 a b)))))
  (! (= (tb2t24 (t2tb24 i)) i) :pattern ((t2tb24 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 b1))) j)
     (= (t2tb24 (tb2t24 j)) j)) :pattern ((t2tb24 (tb2t24 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (set (tuple21 a b))))
  (x (tuple21 a b)) (y (set (tuple21 a b))))
  (= (mem (tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 b1)))
  (Tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 b1)) (t2tb13 x) (t2tb11 y))
  (times (set1 (tuple2 a1 b1)) (tuple2 a1 b1) (t2tb11 s) (t2tb10 t)))
  (and (mem3 x s) (mem4 y t)))))

(declare-fun t2tb25 ((set (tuple21 (tuple21 a b) (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) (tuple21 a b))))) (sort
  (set1 (tuple2 (tuple2 a1 b1) (tuple2 a1 b1))) (t2tb25 x))))

(declare-fun tb2t25 (uni) (set (tuple21 (tuple21 a b) (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a b) (tuple21 a b)))))
  (! (= (tb2t25 (t2tb25 i)) i) :pattern ((t2tb25 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 b1) (tuple2 a1 b1))) j)
     (= (t2tb25 (tb2t25 j)) j)) :pattern ((t2tb25 (tb2t25 j))) )))

(declare-fun t2tb26 ((tuple21 (tuple21 a b) (tuple21 a b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a b) (tuple21 a b)))) (sort
  (tuple2 (tuple2 a1 b1) (tuple2 a1 b1)) (t2tb26 x))))

(declare-fun tb2t26 (uni) (tuple21 (tuple21 a b) (tuple21 a b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a b) (tuple21 a b))))
  (! (= (tb2t26 (t2tb26 i)) i) :pattern ((t2tb26 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 b1) (tuple2 a1 b1)) j)
     (= (t2tb26 (tb2t26 j)) j)) :pattern ((t2tb26 (tb2t26 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (tuple21 a b))) (x (tuple21 a b))
  (y (tuple21 a b)))
  (= (mem (tuple2 (tuple2 a1 b1) (tuple2 a1 b1))
  (Tuple2 (tuple2 a1 b1) (tuple2 a1 b1) (t2tb13 x) (t2tb13 y))
  (times (tuple2 a1 b1) (tuple2 a1 b1) (t2tb11 s) (t2tb11 t)))
  (and (mem3 x s) (mem3 y t)))))

(declare-fun t2tb27 ((set (tuple21 (tuple21 a b) b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) b)))) (sort
  (set1 (tuple2 (tuple2 a1 b1) b1)) (t2tb27 x))))

(declare-fun tb2t27 (uni) (set (tuple21 (tuple21 a b) b)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a b) b))))
  (! (= (tb2t27 (t2tb27 i)) i) :pattern ((t2tb27 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 b1) b1)) j)
     (= (t2tb27 (tb2t27 j)) j)) :pattern ((t2tb27 (tb2t27 j))) )))

(declare-fun t2tb28 ((tuple21 (tuple21 a b) b)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a b) b))) (sort (tuple2 (tuple2 a1 b1) b1)
  (t2tb28 x))))

(declare-fun tb2t28 (uni) (tuple21 (tuple21 a b) b))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a b) b)))
  (! (= (tb2t28 (t2tb28 i)) i) :pattern ((t2tb28 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 b1) b1) j) (= (t2tb28 (tb2t28 j)) j)) :pattern (
  (t2tb28 (tb2t28 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a b))) (t (set b)) (x (tuple21 a b)) (y b))
  (= (mem (tuple2 (tuple2 a1 b1) b1)
  (Tuple2 (tuple2 a1 b1) b1 (t2tb13 x) (t2tb14 y))
  (times b1 (tuple2 a1 b1) (t2tb11 s) (t2tb12 t)))
  (and (mem3 x s) (mem2 y t)))))

(declare-fun t2tb29 ((set (tuple21 (tuple21 a b) a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) a)))) (sort
  (set1 (tuple2 (tuple2 a1 b1) a1)) (t2tb29 x))))

(declare-fun tb2t29 (uni) (set (tuple21 (tuple21 a b) a)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a b) a))))
  (! (= (tb2t29 (t2tb29 i)) i) :pattern ((t2tb29 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 b1) a1)) j)
     (= (t2tb29 (tb2t29 j)) j)) :pattern ((t2tb29 (tb2t29 j))) )))

(declare-fun t2tb30 ((tuple21 (tuple21 a b) a)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a b) a))) (sort (tuple2 (tuple2 a1 b1) a1)
  (t2tb30 x))))

(declare-fun tb2t30 (uni) (tuple21 (tuple21 a b) a))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a b) a)))
  (! (= (tb2t30 (t2tb30 i)) i) :pattern ((t2tb30 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 b1) a1) j) (= (t2tb30 (tb2t30 j)) j)) :pattern (
  (t2tb30 (tb2t30 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a b))) (t (set a)) (x (tuple21 a b)) (y a))
  (= (mem (tuple2 (tuple2 a1 b1) a1)
  (Tuple2 (tuple2 a1 b1) a1 (t2tb13 x) (t2tb2 y))
  (times a1 (tuple2 a1 b1) (t2tb11 s) (t2tb1 t)))
  (and (mem3 x s) (mem1 y t)))))

;; mem_times
  (assert
  (forall ((b2 ty))
  (forall ((s (set (tuple21 a b))) (t uni) (x (tuple21 a b)) (y uni))
  (= (mem (tuple2 (tuple2 a1 b1) b2) (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) y)
  (times b2 (tuple2 a1 b1) (t2tb11 s) t)) (and (mem3 x s) (mem b2 y t))))))

(declare-fun t2tb4561 ((set (tuple21 b (tuple21 a (tuple21 b c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 b (tuple21 a (tuple21 b c)))))) (sort
  (set1 (tuple2 b1 (tuple2 a1 (tuple2 b1 c1)))) (t2tb4561 x))))

(declare-fun tb2t4561 (uni) (set (tuple21 b (tuple21 a (tuple21 b c)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 b (tuple21 a (tuple21 b c))))))
  (! (= (tb2t4561 (t2tb4561 i)) i) :pattern ((t2tb4561 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 b1 (tuple2 a1 (tuple2 b1 c1)))) j)
     (= (t2tb4561 (tb2t4561 j)) j)) :pattern ((t2tb4561 (tb2t4561 j))) )))

(declare-fun t2tb4562 ((tuple21 b (tuple21 a (tuple21 b c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 b (tuple21 a (tuple21 b c))))) (sort
  (tuple2 b1 (tuple2 a1 (tuple2 b1 c1))) (t2tb4562 x))))

(declare-fun tb2t4562 (uni) (tuple21 b (tuple21 a (tuple21 b c))))

;; BridgeL
  (assert
  (forall ((i (tuple21 b (tuple21 a (tuple21 b c)))))
  (! (= (tb2t4562 (t2tb4562 i)) i) :pattern ((t2tb4562 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 b1 (tuple2 a1 (tuple2 b1 c1))) j)
     (= (t2tb4562 (tb2t4562 j)) j)) :pattern ((t2tb4562 (tb2t4562 j))) )))

;; mem_times
  (assert
  (forall ((s (set b)) (t (set (tuple21 a (tuple21 b c)))) (x b)
  (y (tuple21 a (tuple21 b c))))
  (= (mem (tuple2 b1 (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 b1 (tuple2 a1 (tuple2 b1 c1)) (t2tb14 x) (t2tb260 y))
  (times (tuple2 a1 (tuple2 b1 c1)) b1 (t2tb12 s) (t2tb261 t)))
  (and (mem2 x s) (mem14 y t)))))

(declare-fun t2tb4563 ((tuple21 b (set (tuple21 a c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 b (set (tuple21 a c))))) (sort
  (tuple2 b1 (set1 (tuple2 a1 c1))) (t2tb4563 x))))

(declare-fun tb2t4563 (uni) (tuple21 b (set (tuple21 a c))))

;; BridgeL
  (assert
  (forall ((i (tuple21 b (set (tuple21 a c)))))
  (! (= (tb2t4563 (t2tb4563 i)) i) :pattern ((t2tb4563 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 b1 (set1 (tuple2 a1 c1))) j)
     (= (t2tb4563 (tb2t4563 j)) j)) :pattern ((t2tb4563 (tb2t4563 j))) )))

(declare-fun t2tb4564 ((set (tuple21 b (set (tuple21 a c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 b (set (tuple21 a c)))))) (sort
  (set1 (tuple2 b1 (set1 (tuple2 a1 c1)))) (t2tb4564 x))))

(declare-fun tb2t4564 (uni) (set (tuple21 b (set (tuple21 a c)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 b (set (tuple21 a c))))))
  (! (= (tb2t4564 (t2tb4564 i)) i) :pattern ((t2tb4564 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 b1 (set1 (tuple2 a1 c1)))) j)
     (= (t2tb4564 (tb2t4564 j)) j)) :pattern ((t2tb4564 (tb2t4564 j))) )))

;; mem_times
  (assert
  (forall ((s (set b)) (t (set (set (tuple21 a c)))) (x b) (y (set (tuple21 a
  c))))
  (= (mem (tuple2 b1 (set1 (tuple2 a1 c1)))
  (Tuple2 b1 (set1 (tuple2 a1 c1)) (t2tb14 x) (t2tb129 y))
  (times (set1 (tuple2 a1 c1)) b1 (t2tb12 s) (t2tb128 t)))
  (and (mem2 x s) (mem11 y t)))))

(declare-fun t2tb248 ((set (tuple21 b (tuple21 a c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 b (tuple21 a c))))) (sort
  (set1 (tuple2 b1 (tuple2 a1 c1))) (t2tb248 x))))

(declare-fun tb2t248 (uni) (set (tuple21 b (tuple21 a c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 b (tuple21 a c)))))
  (! (= (tb2t248 (t2tb248 i)) i) :pattern ((t2tb248 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 b1 (tuple2 a1 c1))) j)
     (= (t2tb248 (tb2t248 j)) j)) :pattern ((t2tb248 (tb2t248 j))) )))

(declare-fun t2tb249 ((tuple21 b (tuple21 a c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 b (tuple21 a c)))) (sort (tuple2 b1 (tuple2 a1 c1))
  (t2tb249 x))))

(declare-fun tb2t249 (uni) (tuple21 b (tuple21 a c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 b (tuple21 a c))))
  (! (= (tb2t249 (t2tb249 i)) i) :pattern ((t2tb249 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 b1 (tuple2 a1 c1)) j) (= (t2tb249 (tb2t249 j)) j)) :pattern (
  (t2tb249 (tb2t249 j))) )))

;; mem_times
  (assert
  (forall ((s (set b)) (t (set (tuple21 a c))) (x b) (y (tuple21 a c)))
  (= (mem (tuple2 b1 (tuple2 a1 c1))
  (Tuple2 b1 (tuple2 a1 c1) (t2tb14 x) (t2tb133 y))
  (times (tuple2 a1 c1) b1 (t2tb12 s) (t2tb129 t)))
  (and (mem2 x s) (mem10 y t)))))

(declare-fun t2tb1139 ((set (tuple21 b (tuple21 b c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 b (tuple21 b c))))) (sort
  (set1 (tuple2 b1 (tuple2 b1 c1))) (t2tb1139 x))))

(declare-fun tb2t1139 (uni) (set (tuple21 b (tuple21 b c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 b (tuple21 b c)))))
  (! (= (tb2t1139 (t2tb1139 i)) i) :pattern ((t2tb1139 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 b1 (tuple2 b1 c1))) j)
     (= (t2tb1139 (tb2t1139 j)) j)) :pattern ((t2tb1139 (tb2t1139 j))) )))

(declare-fun t2tb1140 ((tuple21 b (tuple21 b c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 b (tuple21 b c)))) (sort (tuple2 b1 (tuple2 b1 c1))
  (t2tb1140 x))))

(declare-fun tb2t1140 (uni) (tuple21 b (tuple21 b c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 b (tuple21 b c))))
  (! (= (tb2t1140 (t2tb1140 i)) i) :pattern ((t2tb1140 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 b1 (tuple2 b1 c1)) j) (= (t2tb1140 (tb2t1140 j)) j)) :pattern (
  (t2tb1140 (tb2t1140 j))) )))

;; mem_times
  (assert
  (forall ((s (set b)) (t (set (tuple21 b c))) (x b) (y (tuple21 b c)))
  (= (mem (tuple2 b1 (tuple2 b1 c1))
  (Tuple2 b1 (tuple2 b1 c1) (t2tb14 x) (t2tb134 y))
  (times (tuple2 b1 c1) b1 (t2tb12 s) (t2tb131 t)))
  (and (mem2 x s) (mem8 y t)))))

;; mem_times
  (assert
  (forall ((s (set b)) (t (set c)) (x b) (y c))
  (= (mem8 (tb2t134 (Tuple2 b1 c1 (t2tb14 x) (t2tb135 y)))
  (tb2t131 (times c1 b1 (t2tb12 s) (t2tb132 t))))
  (and (mem2 x s) (mem7 y t)))))

(declare-fun t2tb1071 ((set (tuple21 b (tuple21 b a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 b (tuple21 b a))))) (sort
  (set1 (tuple2 b1 (tuple2 b1 a1))) (t2tb1071 x))))

(declare-fun tb2t1071 (uni) (set (tuple21 b (tuple21 b a))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 b (tuple21 b a)))))
  (! (= (tb2t1071 (t2tb1071 i)) i) :pattern ((t2tb1071 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 b1 (tuple2 b1 a1))) j)
     (= (t2tb1071 (tb2t1071 j)) j)) :pattern ((t2tb1071 (tb2t1071 j))) )))

(declare-fun t2tb1072 ((tuple21 b (tuple21 b a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 b (tuple21 b a)))) (sort (tuple2 b1 (tuple2 b1 a1))
  (t2tb1072 x))))

(declare-fun tb2t1072 (uni) (tuple21 b (tuple21 b a)))

;; BridgeL
  (assert
  (forall ((i (tuple21 b (tuple21 b a))))
  (! (= (tb2t1072 (t2tb1072 i)) i) :pattern ((t2tb1072 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 b1 (tuple2 b1 a1)) j) (= (t2tb1072 (tb2t1072 j)) j)) :pattern (
  (t2tb1072 (tb2t1072 j))) )))

;; mem_times
  (assert
  (forall ((s (set b)) (t (set (tuple21 b a))) (x b) (y (tuple21 b a)))
  (= (mem (tuple2 b1 (tuple2 b1 a1))
  (Tuple2 b1 (tuple2 b1 a1) (t2tb14 x) (t2tb38 y))
  (times (tuple2 b1 a1) b1 (t2tb12 s) (t2tb37 t)))
  (and (mem2 x s) (mem5 y t)))))

(declare-fun t2tb31 ((set (tuple21 b (set (tuple21 a b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 b (set (tuple21 a b)))))) (sort
  (set1 (tuple2 b1 (set1 (tuple2 a1 b1)))) (t2tb31 x))))

(declare-fun tb2t31 (uni) (set (tuple21 b (set (tuple21 a b)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 b (set (tuple21 a b))))))
  (! (= (tb2t31 (t2tb31 i)) i) :pattern ((t2tb31 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 b1 (set1 (tuple2 a1 b1)))) j)
     (= (t2tb31 (tb2t31 j)) j)) :pattern ((t2tb31 (tb2t31 j))) )))

(declare-fun t2tb32 ((tuple21 b (set (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 b (set (tuple21 a b))))) (sort
  (tuple2 b1 (set1 (tuple2 a1 b1))) (t2tb32 x))))

(declare-fun tb2t32 (uni) (tuple21 b (set (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (tuple21 b (set (tuple21 a b)))))
  (! (= (tb2t32 (t2tb32 i)) i) :pattern ((t2tb32 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 b1 (set1 (tuple2 a1 b1))) j)
     (= (t2tb32 (tb2t32 j)) j)) :pattern ((t2tb32 (tb2t32 j))) )))

;; mem_times
  (assert
  (forall ((s (set b)) (t (set (set (tuple21 a b)))) (x b) (y (set (tuple21 a
  b))))
  (= (mem (tuple2 b1 (set1 (tuple2 a1 b1)))
  (Tuple2 b1 (set1 (tuple2 a1 b1)) (t2tb14 x) (t2tb11 y))
  (times (set1 (tuple2 a1 b1)) b1 (t2tb12 s) (t2tb10 t)))
  (and (mem2 x s) (mem4 y t)))))

(declare-fun t2tb33 ((tuple21 b (tuple21 a b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 b (tuple21 a b)))) (sort (tuple2 b1 (tuple2 a1 b1))
  (t2tb33 x))))

(declare-fun tb2t33 (uni) (tuple21 b (tuple21 a b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 b (tuple21 a b))))
  (! (= (tb2t33 (t2tb33 i)) i) :pattern ((t2tb33 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 b1 (tuple2 a1 b1)) j) (= (t2tb33 (tb2t33 j)) j)) :pattern (
  (t2tb33 (tb2t33 j))) )))

(declare-fun t2tb34 ((set (tuple21 b (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 b (tuple21 a b))))) (sort
  (set1 (tuple2 b1 (tuple2 a1 b1))) (t2tb34 x))))

(declare-fun tb2t34 (uni) (set (tuple21 b (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 b (tuple21 a b)))))
  (! (= (tb2t34 (t2tb34 i)) i) :pattern ((t2tb34 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 b1 (tuple2 a1 b1))) j)
     (= (t2tb34 (tb2t34 j)) j)) :pattern ((t2tb34 (tb2t34 j))) )))

;; mem_times
  (assert
  (forall ((s (set b)) (t (set (tuple21 a b))) (x b) (y (tuple21 a b)))
  (= (mem (tuple2 b1 (tuple2 a1 b1))
  (Tuple2 b1 (tuple2 a1 b1) (t2tb14 x) (t2tb13 y))
  (times (tuple2 a1 b1) b1 (t2tb12 s) (t2tb11 t)))
  (and (mem2 x s) (mem3 y t)))))

(declare-fun t2tb35 ((set (tuple21 b b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 b b)))) (sort (set1 (tuple2 b1 b1)) (t2tb35 x))))

(declare-fun tb2t35 (uni) (set (tuple21 b b)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 b b))))
  (! (= (tb2t35 (t2tb35 i)) i) :pattern ((t2tb35 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 b1 b1)) j) (= (t2tb35 (tb2t35 j)) j)) :pattern (
  (t2tb35 (tb2t35 j))) )))

(declare-fun t2tb36 ((tuple21 b b)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 b b))) (sort (tuple2 b1 b1) (t2tb36 x))))

(declare-fun tb2t36 (uni) (tuple21 b b))

;; BridgeL
  (assert
  (forall ((i (tuple21 b b)))
  (! (= (tb2t36 (t2tb36 i)) i) :pattern ((t2tb36 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 b1 b1) j) (= (t2tb36 (tb2t36 j)) j)) :pattern (
  (t2tb36 (tb2t36 j))) )))

;; mem_times
  (assert
  (forall ((s (set b)) (t (set b)) (x b) (y b))
  (= (mem (tuple2 b1 b1) (Tuple2 b1 b1 (t2tb14 x) (t2tb14 y))
  (times b1 b1 (t2tb12 s) (t2tb12 t))) (and (mem2 x s) (mem2 y t)))))

;; mem_times
  (assert
  (forall ((s (set b)) (t (set a)) (x b) (y a))
  (= (mem5 (tb2t38 (Tuple2 b1 a1 (t2tb14 x) (t2tb2 y)))
  (tb2t37 (times a1 b1 (t2tb12 s) (t2tb1 t)))) (and (mem2 x s) (mem1 y t)))))

;; mem_times
  (assert
  (forall ((b2 ty))
  (forall ((s (set b)) (t uni) (x b) (y uni))
  (= (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) y)
  (times b2 b1 (t2tb12 s) t)) (and (mem2 x s) (mem b2 y t))))))

(declare-fun t2tb4578 ((set (tuple21 a (tuple21 a (tuple21 b c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (tuple21 a (tuple21 b c)))))) (sort
  (set1 (tuple2 a1 (tuple2 a1 (tuple2 b1 c1)))) (t2tb4578 x))))

(declare-fun tb2t4578 (uni) (set (tuple21 a (tuple21 a (tuple21 b c)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (tuple21 a (tuple21 b c))))))
  (! (= (tb2t4578 (t2tb4578 i)) i) :pattern ((t2tb4578 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (tuple2 a1 (tuple2 b1 c1)))) j)
     (= (t2tb4578 (tb2t4578 j)) j)) :pattern ((t2tb4578 (tb2t4578 j))) )))

(declare-fun t2tb4579 ((tuple21 a (tuple21 a (tuple21 b c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (tuple21 a (tuple21 b c))))) (sort
  (tuple2 a1 (tuple2 a1 (tuple2 b1 c1))) (t2tb4579 x))))

(declare-fun tb2t4579 (uni) (tuple21 a (tuple21 a (tuple21 b c))))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (tuple21 a (tuple21 b c)))))
  (! (= (tb2t4579 (t2tb4579 i)) i) :pattern ((t2tb4579 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (tuple2 a1 (tuple2 b1 c1))) j)
     (= (t2tb4579 (tb2t4579 j)) j)) :pattern ((t2tb4579 (tb2t4579 j))) )))

;; mem_times
  (assert
  (forall ((s (set a)) (t (set (tuple21 a (tuple21 b c)))) (x a)
  (y (tuple21 a (tuple21 b c))))
  (= (mem (tuple2 a1 (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 a1 (tuple2 a1 (tuple2 b1 c1)) (t2tb2 x) (t2tb260 y))
  (times (tuple2 a1 (tuple2 b1 c1)) a1 (t2tb1 s) (t2tb261 t)))
  (and (mem1 x s) (mem14 y t)))))

(declare-fun t2tb4580 ((set (tuple21 a (set (tuple21 a c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (set (tuple21 a c)))))) (sort
  (set1 (tuple2 a1 (set1 (tuple2 a1 c1)))) (t2tb4580 x))))

(declare-fun tb2t4580 (uni) (set (tuple21 a (set (tuple21 a c)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (set (tuple21 a c))))))
  (! (= (tb2t4580 (t2tb4580 i)) i) :pattern ((t2tb4580 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (set1 (tuple2 a1 c1)))) j)
     (= (t2tb4580 (tb2t4580 j)) j)) :pattern ((t2tb4580 (tb2t4580 j))) )))

(declare-fun t2tb4581 ((tuple21 a (set (tuple21 a c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (set (tuple21 a c))))) (sort
  (tuple2 a1 (set1 (tuple2 a1 c1))) (t2tb4581 x))))

(declare-fun tb2t4581 (uni) (tuple21 a (set (tuple21 a c))))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (set (tuple21 a c)))))
  (! (= (tb2t4581 (t2tb4581 i)) i) :pattern ((t2tb4581 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (set1 (tuple2 a1 c1))) j)
     (= (t2tb4581 (tb2t4581 j)) j)) :pattern ((t2tb4581 (tb2t4581 j))) )))

;; mem_times
  (assert
  (forall ((s (set a)) (t (set (set (tuple21 a c)))) (x a) (y (set (tuple21 a
  c))))
  (= (mem (tuple2 a1 (set1 (tuple2 a1 c1)))
  (Tuple2 a1 (set1 (tuple2 a1 c1)) (t2tb2 x) (t2tb129 y))
  (times (set1 (tuple2 a1 c1)) a1 (t2tb1 s) (t2tb128 t)))
  (and (mem1 x s) (mem11 y t)))))

(declare-fun t2tb256 ((set (tuple21 a (tuple21 a c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (tuple21 a c))))) (sort
  (set1 (tuple2 a1 (tuple2 a1 c1))) (t2tb256 x))))

(declare-fun tb2t256 (uni) (set (tuple21 a (tuple21 a c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (tuple21 a c)))))
  (! (= (tb2t256 (t2tb256 i)) i) :pattern ((t2tb256 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (tuple2 a1 c1))) j)
     (= (t2tb256 (tb2t256 j)) j)) :pattern ((t2tb256 (tb2t256 j))) )))

(declare-fun t2tb257 ((tuple21 a (tuple21 a c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (tuple21 a c)))) (sort (tuple2 a1 (tuple2 a1 c1))
  (t2tb257 x))))

(declare-fun tb2t257 (uni) (tuple21 a (tuple21 a c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (tuple21 a c))))
  (! (= (tb2t257 (t2tb257 i)) i) :pattern ((t2tb257 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (tuple2 a1 c1)) j) (= (t2tb257 (tb2t257 j)) j)) :pattern (
  (t2tb257 (tb2t257 j))) )))

;; mem_times
  (assert
  (forall ((s (set a)) (t (set (tuple21 a c))) (x a) (y (tuple21 a c)))
  (= (mem (tuple2 a1 (tuple2 a1 c1))
  (Tuple2 a1 (tuple2 a1 c1) (t2tb2 x) (t2tb133 y))
  (times (tuple2 a1 c1) a1 (t2tb1 s) (t2tb129 t)))
  (and (mem1 x s) (mem10 y t)))))

;; mem_times
  (assert
  (forall ((s (set a)) (t (set (tuple21 b c))) (x a) (y (tuple21 b c)))
  (= (mem14 (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 y)))
  (tb2t261 (times (tuple2 b1 c1) a1 (t2tb1 s) (t2tb131 t))))
  (and (mem1 x s) (mem8 y t)))))

;; mem_times
  (assert
  (forall ((s (set a)) (t (set c)) (x a) (y c))
  (= (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y)))
  (tb2t129 (times c1 a1 (t2tb1 s) (t2tb132 t)))) (and (mem1 x s) (mem7 y t)))))

(declare-fun t2tb1073 ((set (tuple21 a (tuple21 b a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (tuple21 b a))))) (sort
  (set1 (tuple2 a1 (tuple2 b1 a1))) (t2tb1073 x))))

(declare-fun tb2t1073 (uni) (set (tuple21 a (tuple21 b a))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (tuple21 b a)))))
  (! (= (tb2t1073 (t2tb1073 i)) i) :pattern ((t2tb1073 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (tuple2 b1 a1))) j)
     (= (t2tb1073 (tb2t1073 j)) j)) :pattern ((t2tb1073 (tb2t1073 j))) )))

(declare-fun t2tb1074 ((tuple21 a (tuple21 b a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (tuple21 b a)))) (sort (tuple2 a1 (tuple2 b1 a1))
  (t2tb1074 x))))

(declare-fun tb2t1074 (uni) (tuple21 a (tuple21 b a)))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (tuple21 b a))))
  (! (= (tb2t1074 (t2tb1074 i)) i) :pattern ((t2tb1074 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (tuple2 b1 a1)) j) (= (t2tb1074 (tb2t1074 j)) j)) :pattern (
  (t2tb1074 (tb2t1074 j))) )))

;; mem_times
  (assert
  (forall ((s (set a)) (t (set (tuple21 b a))) (x a) (y (tuple21 b a)))
  (= (mem (tuple2 a1 (tuple2 b1 a1))
  (Tuple2 a1 (tuple2 b1 a1) (t2tb2 x) (t2tb38 y))
  (times (tuple2 b1 a1) a1 (t2tb1 s) (t2tb37 t)))
  (and (mem1 x s) (mem5 y t)))))

(declare-fun t2tb39 ((set (tuple21 a (set (tuple21 a b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (set (tuple21 a b)))))) (sort
  (set1 (tuple2 a1 (set1 (tuple2 a1 b1)))) (t2tb39 x))))

(declare-fun tb2t39 (uni) (set (tuple21 a (set (tuple21 a b)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (set (tuple21 a b))))))
  (! (= (tb2t39 (t2tb39 i)) i) :pattern ((t2tb39 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (set1 (tuple2 a1 b1)))) j)
     (= (t2tb39 (tb2t39 j)) j)) :pattern ((t2tb39 (tb2t39 j))) )))

(declare-fun t2tb40 ((tuple21 a (set (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (set (tuple21 a b))))) (sort
  (tuple2 a1 (set1 (tuple2 a1 b1))) (t2tb40 x))))

(declare-fun tb2t40 (uni) (tuple21 a (set (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (set (tuple21 a b)))))
  (! (= (tb2t40 (t2tb40 i)) i) :pattern ((t2tb40 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (set1 (tuple2 a1 b1))) j)
     (= (t2tb40 (tb2t40 j)) j)) :pattern ((t2tb40 (tb2t40 j))) )))

;; mem_times
  (assert
  (forall ((s (set a)) (t (set (set (tuple21 a b)))) (x a) (y (set (tuple21 a
  b))))
  (= (mem (tuple2 a1 (set1 (tuple2 a1 b1)))
  (Tuple2 a1 (set1 (tuple2 a1 b1)) (t2tb2 x) (t2tb11 y))
  (times (set1 (tuple2 a1 b1)) a1 (t2tb1 s) (t2tb10 t)))
  (and (mem1 x s) (mem4 y t)))))

(declare-fun t2tb41 ((set (tuple21 a (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (tuple21 a b))))) (sort
  (set1 (tuple2 a1 (tuple2 a1 b1))) (t2tb41 x))))

(declare-fun tb2t41 (uni) (set (tuple21 a (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (tuple21 a b)))))
  (! (= (tb2t41 (t2tb41 i)) i) :pattern ((t2tb41 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (tuple2 a1 b1))) j)
     (= (t2tb41 (tb2t41 j)) j)) :pattern ((t2tb41 (tb2t41 j))) )))

(declare-fun t2tb42 ((tuple21 a (tuple21 a b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (tuple21 a b)))) (sort (tuple2 a1 (tuple2 a1 b1))
  (t2tb42 x))))

(declare-fun tb2t42 (uni) (tuple21 a (tuple21 a b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (tuple21 a b))))
  (! (= (tb2t42 (t2tb42 i)) i) :pattern ((t2tb42 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (tuple2 a1 b1)) j) (= (t2tb42 (tb2t42 j)) j)) :pattern (
  (t2tb42 (tb2t42 j))) )))

;; mem_times
  (assert
  (forall ((s (set a)) (t (set (tuple21 a b))) (x a) (y (tuple21 a b)))
  (= (mem (tuple2 a1 (tuple2 a1 b1))
  (Tuple2 a1 (tuple2 a1 b1) (t2tb2 x) (t2tb13 y))
  (times (tuple2 a1 b1) a1 (t2tb1 s) (t2tb11 t)))
  (and (mem1 x s) (mem3 y t)))))

;; mem_times
  (assert
  (forall ((s (set a)) (t (set b)) (x a) (y b))
  (= (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y)))
  (tb2t11 (times b1 a1 (t2tb1 s) (t2tb12 t)))) (and (mem1 x s) (mem2 y t)))))

(declare-fun t2tb4 ((set (tuple21 a a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a a)))) (sort (set1 (tuple2 a1 a1)) (t2tb4 x))))

(declare-fun tb2t4 (uni) (set (tuple21 a a)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a a))))
  (! (= (tb2t4 (t2tb4 i)) i) :pattern ((t2tb4 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 a1)) j) (= (t2tb4 (tb2t4 j)) j)) :pattern (
  (t2tb4 (tb2t4 j))) )))

(declare-fun t2tb5 ((tuple21 a a)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 a a))) (sort (tuple2 a1 a1) (t2tb5 x))))

(declare-fun tb2t5 (uni) (tuple21 a a))

;; BridgeL
  (assert
  (forall ((i (tuple21 a a)))
  (! (= (tb2t5 (t2tb5 i)) i) :pattern ((t2tb5 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 a1) j) (= (t2tb5 (tb2t5 j)) j)) :pattern ((t2tb5
                                                                    (tb2t5 j))) )))

;; mem_times
  (assert
  (forall ((s (set a)) (t (set a)) (x a) (y a))
  (= (mem (tuple2 a1 a1) (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y))
  (times a1 a1 (t2tb1 s) (t2tb1 t))) (and (mem1 x s) (mem1 y t)))))

;; mem_times
  (assert
  (forall ((b2 ty))
  (forall ((s (set a)) (t uni) (x a) (y uni))
  (= (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) y)
  (times b2 a1 (t2tb1 s) t)) (and (mem1 x s) (mem b2 y t))))))

;; mem_times
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (x uni) (y uni))
  (= (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) (times b2 a2 s t))
  (and (mem a2 x s) (mem b2 y t))))))

;; mem_power
  (assert
  (forall ((s (set (tuple21 a (tuple21 b c)))) (t (set (tuple21 a (tuple21 b
  c)))))
  (= (mem (set1 (tuple2 a1 (tuple2 b1 c1))) (t2tb261 s)
  (power (tuple2 a1 (tuple2 b1 c1)) (t2tb261 t)))
  (forall ((x (tuple21 a (tuple21 b c)))) (=> (mem14 x s) (mem14 x t))))))

;; mem_power
  (assert
  (forall ((s (set (set (tuple21 a c)))) (t (set (set (tuple21 a c)))))
  (= (mem (set1 (set1 (tuple2 a1 c1))) (t2tb128 s)
  (power (set1 (tuple2 a1 c1)) (t2tb128 t)))
  (forall ((x (set (tuple21 a c)))) (=> (mem11 x s) (mem11 x t))))))

;; mem_power
  (assert
  (forall ((s (set (tuple21 a c))) (t (set (tuple21 a c))))
  (= (mem11 s (tb2t128 (power (tuple2 a1 c1) (t2tb129 t))))
  (forall ((x (tuple21 a c))) (=> (mem10 x s) (mem10 x t))))))

;; mem_power
  (assert
  (forall ((s (set (tuple21 b c))) (t (set (tuple21 b c))))
  (= (mem (set1 (tuple2 b1 c1)) (t2tb131 s)
  (power (tuple2 b1 c1) (t2tb131 t)))
  (forall ((x (tuple21 b c))) (=> (mem8 x s) (mem8 x t))))))

;; mem_power
  (assert
  (forall ((s (set c)) (t (set c)))
  (= (mem (set1 c1) (t2tb132 s) (power c1 (t2tb132 t)))
  (forall ((x c)) (=> (mem7 x s) (mem7 x t))))))

;; mem_power
  (assert
  (forall ((s (set (tuple21 b a))) (t (set (tuple21 b a))))
  (= (mem (set1 (tuple2 b1 a1)) (t2tb37 s) (power (tuple2 b1 a1) (t2tb37 t)))
  (forall ((x (tuple21 b a))) (=> (mem5 x s) (mem5 x t))))))

;; mem_power
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set (set (tuple21 a b)))))
  (= (mem (set1 (set1 (tuple2 a1 b1))) (t2tb10 s)
  (power (set1 (tuple2 a1 b1)) (t2tb10 t)))
  (forall ((x (set (tuple21 a b)))) (=> (mem4 x s) (mem4 x t))))))

;; mem_power
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (tuple21 a b))))
  (= (mem4 s (tb2t10 (power (tuple2 a1 b1) (t2tb11 t))))
  (forall ((x (tuple21 a b))) (=> (mem3 x s) (mem3 x t))))))

;; mem_power
  (assert
  (forall ((s (set b)) (t (set b)))
  (= (mem (set1 b1) (t2tb12 s) (power b1 (t2tb12 t)))
  (forall ((x b)) (=> (mem2 x s) (mem2 x t))))))

;; mem_power
  (assert
  (forall ((s (set a)) (t (set a)))
  (= (mem (set1 a1) (t2tb1 s) (power a1 (t2tb1 t)))
  (forall ((x a)) (=> (mem1 x s) (mem1 x t))))))

;; mem_power
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t uni))
  (and
  (=> (mem (set1 a2) s (power a2 t))
  (forall ((x uni)) (=> (mem a2 x s) (mem a2 x t))))
  (=> (forall ((x uni)) (=> (sort a2 x) (=> (mem a2 x s) (mem a2 x t)))) (mem
  (set1 a2) s (power a2 t)))))))

;; mem_non_empty_power
  (assert
  (forall ((s (set (tuple21 a (tuple21 b c)))) (t (set (tuple21 a (tuple21 b
  c)))))
  (= (mem (set1 (tuple2 a1 (tuple2 b1 c1))) (t2tb261 s)
  (non_empty_power (tuple2 a1 (tuple2 b1 c1)) (t2tb261 t)))
  (and (forall ((x (tuple21 a (tuple21 b c)))) (=> (mem14 x s) (mem14 x t)))
  (not (infix_eqeq20 s (tb2t261 (empty (tuple2 a1 (tuple2 b1 c1))))))))))

;; mem_non_empty_power
  (assert
  (forall ((s (set (set (tuple21 a c)))) (t (set (set (tuple21 a c)))))
  (= (mem (set1 (set1 (tuple2 a1 c1))) (t2tb128 s)
  (non_empty_power (set1 (tuple2 a1 c1)) (t2tb128 t)))
  (and (forall ((x (set (tuple21 a c)))) (=> (mem11 x s) (mem11 x t)))
  (not (infix_eqeq19 s (tb2t128 (empty (set1 (tuple2 a1 c1))))))))))

;; mem_non_empty_power
  (assert
  (forall ((s (set (tuple21 a c))) (t (set (tuple21 a c))))
  (= (mem11 s (tb2t128 (non_empty_power (tuple2 a1 c1) (t2tb129 t))))
  (and (forall ((x (tuple21 a c))) (=> (mem10 x s) (mem10 x t)))
  (not (infix_eqeq9 s (tb2t129 (empty (tuple2 a1 c1)))))))))

;; mem_non_empty_power
  (assert
  (forall ((s (set (tuple21 b c))) (t (set (tuple21 b c))))
  (= (mem (set1 (tuple2 b1 c1)) (t2tb131 s)
  (non_empty_power (tuple2 b1 c1) (t2tb131 t)))
  (and (forall ((x (tuple21 b c))) (=> (mem8 x s) (mem8 x t)))
  (not (infix_eqeq8 s (tb2t131 (empty (tuple2 b1 c1)))))))))

;; mem_non_empty_power
  (assert
  (forall ((s (set c)) (t (set c)))
  (= (mem (set1 c1) (t2tb132 s) (non_empty_power c1 (t2tb132 t)))
  (and (forall ((x c)) (=> (mem7 x s) (mem7 x t)))
  (not (infix_eqeq7 s (tb2t132 (empty c1))))))))

;; mem_non_empty_power
  (assert
  (forall ((s (set (tuple21 b a))) (t (set (tuple21 b a))))
  (= (mem (set1 (tuple2 b1 a1)) (t2tb37 s)
  (non_empty_power (tuple2 b1 a1) (t2tb37 t)))
  (and (forall ((x (tuple21 b a))) (=> (mem5 x s) (mem5 x t)))
  (not (infix_eqeq6 s (tb2t37 (empty (tuple2 b1 a1)))))))))

;; mem_non_empty_power
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set (set (tuple21 a b)))))
  (= (mem (set1 (set1 (tuple2 a1 b1))) (t2tb10 s)
  (non_empty_power (set1 (tuple2 a1 b1)) (t2tb10 t)))
  (and (forall ((x (set (tuple21 a b)))) (=> (mem4 x s) (mem4 x t)))
  (not (infix_eqeq5 s (tb2t10 (empty (set1 (tuple2 a1 b1))))))))))

;; mem_non_empty_power
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (tuple21 a b))))
  (= (mem4 s (tb2t10 (non_empty_power (tuple2 a1 b1) (t2tb11 t))))
  (and (forall ((x (tuple21 a b))) (=> (mem3 x s) (mem3 x t)))
  (not (infix_eqeq4 s (tb2t11 (empty (tuple2 a1 b1)))))))))

;; mem_non_empty_power
  (assert
  (forall ((s (set b)) (t (set b)))
  (= (mem (set1 b1) (t2tb12 s) (non_empty_power b1 (t2tb12 t)))
  (and (forall ((x b)) (=> (mem2 x s) (mem2 x t)))
  (not (infix_eqeq3 s (tb2t12 (empty b1))))))))

;; mem_non_empty_power
  (assert
  (forall ((s (set a)) (t (set a)))
  (= (mem (set1 a1) (t2tb1 s) (non_empty_power a1 (t2tb1 t)))
  (and (forall ((x a)) (=> (mem1 x s) (mem1 x t)))
  (not (infix_eqeq1 s (tb2t1 (empty a1))))))))

;; mem_non_empty_power
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t uni))
  (and
  (=> (mem (set1 a2) s (non_empty_power a2 t))
  (and (forall ((x uni)) (=> (mem a2 x s) (mem a2 x t)))
  (not (infix_eqeq a2 s (empty a2)))))
  (=>
  (and (forall ((x uni)) (=> (sort a2 x) (=> (mem a2 x s) (mem a2 x t))))
  (not (infix_eqeq a2 s (empty a2)))) (mem (set1 a2) s
  (non_empty_power a2 t)))))))

(declare-fun choose (ty uni) uni)

;; choose_sort
  (assert (forall ((a2 ty)) (forall ((x uni)) (sort a2 (choose a2 x)))))

(declare-fun relation (ty ty uni uni) uni)

;; relation_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (set1 (tuple2 a2 b2)))
  (relation b2 a2 x x1)))))

(declare-fun relation1 ((set a) (set b)) (set (set (tuple21 a b))))

(declare-fun relation3 ((set a) (set c)) (set (set (tuple21 a c))))

;; mem_relation
  (assert
  (forall ((a2 ty))
  (forall ((u uni) (v (set (tuple21 a (tuple21 b c)))) (r uni))
  (and
  (=> (mem (set1 (tuple2 a2 (tuple2 a1 (tuple2 b1 c1)))) r
  (relation (tuple2 a1 (tuple2 b1 c1)) a2 u (t2tb261 v)))
  (forall ((x uni) (y (tuple21 a (tuple21 b c))))
  (=> (mem (tuple2 a2 (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 a2 (tuple2 a1 (tuple2 b1 c1)) x (t2tb260 y)) r)
  (and (mem a2 x u) (mem14 y v)))))
  (=>
  (forall ((x uni) (y (tuple21 a (tuple21 b c))))
  (=> (sort a2 x)
  (=> (mem (tuple2 a2 (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 a2 (tuple2 a1 (tuple2 b1 c1)) x (t2tb260 y)) r)
  (and (mem a2 x u) (mem14 y v))))) (mem
  (set1 (tuple2 a2 (tuple2 a1 (tuple2 b1 c1)))) r
  (relation (tuple2 a1 (tuple2 b1 c1)) a2 u (t2tb261 v))))))))

;; mem_relation
  (assert
  (forall ((a2 ty))
  (forall ((u uni) (v (set (set (tuple21 a c)))) (r uni))
  (and
  (=> (mem (set1 (tuple2 a2 (set1 (tuple2 a1 c1)))) r
  (relation (set1 (tuple2 a1 c1)) a2 u (t2tb128 v)))
  (forall ((x uni) (y (set (tuple21 a c))))
  (=> (mem (tuple2 a2 (set1 (tuple2 a1 c1)))
  (Tuple2 a2 (set1 (tuple2 a1 c1)) x (t2tb129 y)) r)
  (and (mem a2 x u) (mem11 y v)))))
  (=>
  (forall ((x uni) (y (set (tuple21 a c))))
  (=> (sort a2 x)
  (=> (mem (tuple2 a2 (set1 (tuple2 a1 c1)))
  (Tuple2 a2 (set1 (tuple2 a1 c1)) x (t2tb129 y)) r)
  (and (mem a2 x u) (mem11 y v))))) (mem
  (set1 (tuple2 a2 (set1 (tuple2 a1 c1)))) r
  (relation (set1 (tuple2 a1 c1)) a2 u (t2tb128 v))))))))

;; mem_relation
  (assert
  (forall ((a2 ty))
  (forall ((u uni) (v (set (tuple21 a c))) (r uni))
  (and
  (=> (mem (set1 (tuple2 a2 (tuple2 a1 c1))) r
  (relation (tuple2 a1 c1) a2 u (t2tb129 v)))
  (forall ((x uni) (y (tuple21 a c)))
  (=> (mem (tuple2 a2 (tuple2 a1 c1))
  (Tuple2 a2 (tuple2 a1 c1) x (t2tb133 y)) r) (and (mem a2 x u) (mem10 y v)))))
  (=>
  (forall ((x uni) (y (tuple21 a c)))
  (=> (sort a2 x)
  (=> (mem (tuple2 a2 (tuple2 a1 c1))
  (Tuple2 a2 (tuple2 a1 c1) x (t2tb133 y)) r) (and (mem a2 x u) (mem10 y v)))))
  (mem (set1 (tuple2 a2 (tuple2 a1 c1))) r
  (relation (tuple2 a1 c1) a2 u (t2tb129 v))))))))

;; mem_relation
  (assert
  (forall ((a2 ty))
  (forall ((u uni) (v (set (tuple21 b c))) (r uni))
  (and
  (=> (mem (set1 (tuple2 a2 (tuple2 b1 c1))) r
  (relation (tuple2 b1 c1) a2 u (t2tb131 v)))
  (forall ((x uni) (y (tuple21 b c)))
  (=> (mem (tuple2 a2 (tuple2 b1 c1))
  (Tuple2 a2 (tuple2 b1 c1) x (t2tb134 y)) r) (and (mem a2 x u) (mem8 y v)))))
  (=>
  (forall ((x uni) (y (tuple21 b c)))
  (=> (sort a2 x)
  (=> (mem (tuple2 a2 (tuple2 b1 c1))
  (Tuple2 a2 (tuple2 b1 c1) x (t2tb134 y)) r) (and (mem a2 x u) (mem8 y v)))))
  (mem (set1 (tuple2 a2 (tuple2 b1 c1))) r
  (relation (tuple2 b1 c1) a2 u (t2tb131 v))))))))

;; mem_relation
  (assert
  (forall ((a2 ty))
  (forall ((u uni) (v (set c)) (r uni))
  (and
  (=> (mem (set1 (tuple2 a2 c1)) r (relation c1 a2 u (t2tb132 v)))
  (forall ((x uni) (y c))
  (=> (mem (tuple2 a2 c1) (Tuple2 a2 c1 x (t2tb135 y)) r)
  (and (mem a2 x u) (mem7 y v)))))
  (=>
  (forall ((x uni) (y c))
  (=> (sort a2 x)
  (=> (mem (tuple2 a2 c1) (Tuple2 a2 c1 x (t2tb135 y)) r)
  (and (mem a2 x u) (mem7 y v))))) (mem (set1 (tuple2 a2 c1)) r
  (relation c1 a2 u (t2tb132 v))))))))

;; mem_relation
  (assert
  (forall ((a2 ty))
  (forall ((u uni) (v (set (tuple21 b a))) (r uni))
  (and
  (=> (mem (set1 (tuple2 a2 (tuple2 b1 a1))) r
  (relation (tuple2 b1 a1) a2 u (t2tb37 v)))
  (forall ((x uni) (y (tuple21 b a)))
  (=> (mem (tuple2 a2 (tuple2 b1 a1)) (Tuple2 a2 (tuple2 b1 a1) x (t2tb38 y))
  r) (and (mem a2 x u) (mem5 y v)))))
  (=>
  (forall ((x uni) (y (tuple21 b a)))
  (=> (sort a2 x)
  (=> (mem (tuple2 a2 (tuple2 b1 a1)) (Tuple2 a2 (tuple2 b1 a1) x (t2tb38 y))
  r) (and (mem a2 x u) (mem5 y v))))) (mem (set1 (tuple2 a2 (tuple2 b1 a1)))
  r (relation (tuple2 b1 a1) a2 u (t2tb37 v))))))))

;; mem_relation
  (assert
  (forall ((a2 ty))
  (forall ((u uni) (v (set (set (tuple21 a b)))) (r uni))
  (and
  (=> (mem (set1 (tuple2 a2 (set1 (tuple2 a1 b1)))) r
  (relation (set1 (tuple2 a1 b1)) a2 u (t2tb10 v)))
  (forall ((x uni) (y (set (tuple21 a b))))
  (=> (mem (tuple2 a2 (set1 (tuple2 a1 b1)))
  (Tuple2 a2 (set1 (tuple2 a1 b1)) x (t2tb11 y)) r)
  (and (mem a2 x u) (mem4 y v)))))
  (=>
  (forall ((x uni) (y (set (tuple21 a b))))
  (=> (sort a2 x)
  (=> (mem (tuple2 a2 (set1 (tuple2 a1 b1)))
  (Tuple2 a2 (set1 (tuple2 a1 b1)) x (t2tb11 y)) r)
  (and (mem a2 x u) (mem4 y v))))) (mem
  (set1 (tuple2 a2 (set1 (tuple2 a1 b1)))) r
  (relation (set1 (tuple2 a1 b1)) a2 u (t2tb10 v))))))))

;; mem_relation
  (assert
  (forall ((a2 ty))
  (forall ((u uni) (v (set (tuple21 a b))) (r uni))
  (and
  (=> (mem (set1 (tuple2 a2 (tuple2 a1 b1))) r
  (relation (tuple2 a1 b1) a2 u (t2tb11 v)))
  (forall ((x uni) (y (tuple21 a b)))
  (=> (mem (tuple2 a2 (tuple2 a1 b1)) (Tuple2 a2 (tuple2 a1 b1) x (t2tb13 y))
  r) (and (mem a2 x u) (mem3 y v)))))
  (=>
  (forall ((x uni) (y (tuple21 a b)))
  (=> (sort a2 x)
  (=> (mem (tuple2 a2 (tuple2 a1 b1)) (Tuple2 a2 (tuple2 a1 b1) x (t2tb13 y))
  r) (and (mem a2 x u) (mem3 y v))))) (mem (set1 (tuple2 a2 (tuple2 a1 b1)))
  r (relation (tuple2 a1 b1) a2 u (t2tb11 v))))))))

;; mem_relation
  (assert
  (forall ((a2 ty))
  (forall ((u uni) (v (set b)) (r uni))
  (and
  (=> (mem (set1 (tuple2 a2 b1)) r (relation b1 a2 u (t2tb12 v)))
  (forall ((x uni) (y b))
  (=> (mem (tuple2 a2 b1) (Tuple2 a2 b1 x (t2tb14 y)) r)
  (and (mem a2 x u) (mem2 y v)))))
  (=>
  (forall ((x uni) (y b))
  (=> (sort a2 x)
  (=> (mem (tuple2 a2 b1) (Tuple2 a2 b1 x (t2tb14 y)) r)
  (and (mem a2 x u) (mem2 y v))))) (mem (set1 (tuple2 a2 b1)) r
  (relation b1 a2 u (t2tb12 v))))))))

;; mem_relation
  (assert
  (forall ((a2 ty))
  (forall ((u uni) (v (set a)) (r uni))
  (and
  (=> (mem (set1 (tuple2 a2 a1)) r (relation a1 a2 u (t2tb1 v)))
  (forall ((x uni) (y a))
  (=> (mem (tuple2 a2 a1) (Tuple2 a2 a1 x (t2tb2 y)) r)
  (and (mem a2 x u) (mem1 y v)))))
  (=>
  (forall ((x uni) (y a))
  (=> (sort a2 x)
  (=> (mem (tuple2 a2 a1) (Tuple2 a2 a1 x (t2tb2 y)) r)
  (and (mem a2 x u) (mem1 y v))))) (mem (set1 (tuple2 a2 a1)) r
  (relation a1 a2 u (t2tb1 v))))))))

(declare-fun t2tb4753 ((set (set (tuple21 (tuple21 a (tuple21 b c))
  (tuple21 a (tuple21 b c)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a (tuple21 b c)) (tuple21 a
  (tuple21 b c))))))) (sort
  (set1
  (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 (tuple2 b1 c1)))))
  (t2tb4753 x))))

(declare-fun tb2t4753 (uni) (set (set (tuple21 (tuple21 a (tuple21 b c))
  (tuple21 a (tuple21 b c))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a (tuple21 b c)) (tuple21 a
  (tuple21 b c)))))))
  (! (= (tb2t4753 (t2tb4753 i)) i) :pattern ((t2tb4753 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 (tuple2 b1 c1)))))
     j) (= (t2tb4753 (tb2t4753 j)) j)) :pattern ((t2tb4753 (tb2t4753 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a (tuple21 b c)))) (v (set (tuple21 a (tuple21 b
  c)))) (r (set (tuple21 (tuple21 a (tuple21 b c)) (tuple21 a (tuple21 b
  c))))))
  (= (mem
  (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 (tuple2 b1 c1))))
  (t2tb4425 r)
  (relation (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 (tuple2 b1 c1)) (t2tb261 u)
  (t2tb261 v)))
  (forall ((x (tuple21 a (tuple21 b c))) (y (tuple21 a (tuple21 b c))))
  (=> (mem (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 (tuple2 b1 c1)) (t2tb260 x)
  (t2tb260 y)) (t2tb4425 r)) (and (mem14 x u) (mem14 y v)))))))

(declare-fun t2tb4754 ((set (set (tuple21 (tuple21 a (tuple21 b c))
  (set (tuple21 a c)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a (tuple21 b c)) (set (tuple21 a
  c))))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) (set1 (tuple2 a1 c1)))))
  (t2tb4754 x))))

(declare-fun tb2t4754 (uni) (set (set (tuple21 (tuple21 a (tuple21 b c))
  (set (tuple21 a c))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a (tuple21 b c)) (set (tuple21 a
  c))))))) (! (= (tb2t4754 (t2tb4754 i)) i) :pattern ((t2tb4754 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) (set1 (tuple2 a1 c1)))))
     j) (= (t2tb4754 (tb2t4754 j)) j)) :pattern ((t2tb4754 (tb2t4754 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a (tuple21 b c)))) (v (set (set (tuple21 a c))))
  (r (set (tuple21 (tuple21 a (tuple21 b c)) (set (tuple21 a c))))))
  (= (mem (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) (set1 (tuple2 a1 c1))))
  (t2tb4427 r)
  (relation (set1 (tuple2 a1 c1)) (tuple2 a1 (tuple2 b1 c1)) (t2tb261 u)
  (t2tb128 v)))
  (forall ((x (tuple21 a (tuple21 b c))) (y (set (tuple21 a c))))
  (=> (mem (tuple2 (tuple2 a1 (tuple2 b1 c1)) (set1 (tuple2 a1 c1)))
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) (set1 (tuple2 a1 c1)) (t2tb260 x)
  (t2tb129 y)) (t2tb4427 r)) (and (mem14 x u) (mem11 y v)))))))

(declare-fun t2tb4755 ((set (set (tuple21 (tuple21 a (tuple21 b c))
  (tuple21 a c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a (tuple21 b c)) (tuple21 a c))))))
  (sort (set1 (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 c1))))
  (t2tb4755 x))))

(declare-fun tb2t4755 (uni) (set (set (tuple21 (tuple21 a (tuple21 b c))
  (tuple21 a c)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a (tuple21 b c)) (tuple21 a c))))))
  (! (= (tb2t4755 (t2tb4755 i)) i) :pattern ((t2tb4755 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 c1)))) j)
     (= (t2tb4755 (tb2t4755 j)) j)) :pattern ((t2tb4755 (tb2t4755 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a (tuple21 b c)))) (v (set (tuple21 a c)))
  (r (set (tuple21 (tuple21 a (tuple21 b c)) (tuple21 a c)))))
  (= (mem (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 c1)))
  (t2tb4429 r)
  (relation (tuple2 a1 c1) (tuple2 a1 (tuple2 b1 c1)) (t2tb261 u)
  (t2tb129 v)))
  (forall ((x (tuple21 a (tuple21 b c))) (y (tuple21 a c)))
  (=> (mem (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 c1))
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 c1) (t2tb260 x) (t2tb133 y))
  (t2tb4429 r)) (and (mem14 x u) (mem10 y v)))))))

(declare-fun t2tb5173 ((set (set (tuple21 (tuple21 a (tuple21 b c))
  (tuple21 b c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a (tuple21 b c)) (tuple21 b c))))))
  (sort (set1 (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 b1 c1))))
  (t2tb5173 x))))

(declare-fun tb2t5173 (uni) (set (set (tuple21 (tuple21 a (tuple21 b c))
  (tuple21 b c)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a (tuple21 b c)) (tuple21 b c))))))
  (! (= (tb2t5173 (t2tb5173 i)) i) :pattern ((t2tb5173 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 b1 c1)))) j)
     (= (t2tb5173 (tb2t5173 j)) j)) :pattern ((t2tb5173 (tb2t5173 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a (tuple21 b c)))) (v (set (tuple21 b c)))
  (r (set (tuple21 (tuple21 a (tuple21 b c)) (tuple21 b c)))))
  (= (mem (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 b1 c1)))
  (t2tb5145 r)
  (relation (tuple2 b1 c1) (tuple2 a1 (tuple2 b1 c1)) (t2tb261 u)
  (t2tb131 v)))
  (forall ((x (tuple21 a (tuple21 b c))) (y (tuple21 b c)))
  (=> (mem (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 b1 c1))
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 b1 c1) (t2tb260 x) (t2tb134 y))
  (t2tb5145 r)) (and (mem14 x u) (mem8 y v)))))))

(declare-fun t2tb4756 ((set (set (tuple21 (tuple21 a (tuple21 b c))
  c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a (tuple21 b c)) c))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) c1))) (t2tb4756 x))))

(declare-fun tb2t4756 (uni) (set (set (tuple21 (tuple21 a (tuple21 b c))
  c))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a (tuple21 b c)) c)))))
  (! (= (tb2t4756 (t2tb4756 i)) i) :pattern ((t2tb4756 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) c1))) j)
     (= (t2tb4756 (tb2t4756 j)) j)) :pattern ((t2tb4756 (tb2t4756 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a (tuple21 b c)))) (v (set c))
  (r (set (tuple21 (tuple21 a (tuple21 b c)) c))))
  (= (mem (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) c1)) (t2tb4431 r)
  (relation c1 (tuple2 a1 (tuple2 b1 c1)) (t2tb261 u) (t2tb132 v)))
  (forall ((x (tuple21 a (tuple21 b c))) (y c))
  (=> (mem (tuple2 (tuple2 a1 (tuple2 b1 c1)) c1)
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) c1 (t2tb260 x) (t2tb135 y))
  (t2tb4431 r)) (and (mem14 x u) (mem7 y v)))))))

(declare-fun t2tb5174 ((set (set (tuple21 (tuple21 a (tuple21 b c))
  (tuple21 b a))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a (tuple21 b c)) (tuple21 b a))))))
  (sort (set1 (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 b1 a1))))
  (t2tb5174 x))))

(declare-fun tb2t5174 (uni) (set (set (tuple21 (tuple21 a (tuple21 b c))
  (tuple21 b a)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a (tuple21 b c)) (tuple21 b a))))))
  (! (= (tb2t5174 (t2tb5174 i)) i) :pattern ((t2tb5174 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 b1 a1)))) j)
     (= (t2tb5174 (tb2t5174 j)) j)) :pattern ((t2tb5174 (tb2t5174 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a (tuple21 b c)))) (v (set (tuple21 b a)))
  (r (set (tuple21 (tuple21 a (tuple21 b c)) (tuple21 b a)))))
  (= (mem (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 b1 a1)))
  (t2tb5147 r)
  (relation (tuple2 b1 a1) (tuple2 a1 (tuple2 b1 c1)) (t2tb261 u) (t2tb37 v)))
  (forall ((x (tuple21 a (tuple21 b c))) (y (tuple21 b a)))
  (=> (mem (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 b1 a1))
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 b1 a1) (t2tb260 x) (t2tb38 y))
  (t2tb5147 r)) (and (mem14 x u) (mem5 y v)))))))

(declare-fun t2tb4757 ((set (set (tuple21 (tuple21 a (tuple21 b c))
  (set (tuple21 a b)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a (tuple21 b c)) (set (tuple21 a
  b))))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) (set1 (tuple2 a1 b1)))))
  (t2tb4757 x))))

(declare-fun tb2t4757 (uni) (set (set (tuple21 (tuple21 a (tuple21 b c))
  (set (tuple21 a b))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a (tuple21 b c)) (set (tuple21 a
  b))))))) (! (= (tb2t4757 (t2tb4757 i)) i) :pattern ((t2tb4757 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) (set1 (tuple2 a1 b1)))))
     j) (= (t2tb4757 (tb2t4757 j)) j)) :pattern ((t2tb4757 (tb2t4757 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a (tuple21 b c)))) (v (set (set (tuple21 a b))))
  (r (set (tuple21 (tuple21 a (tuple21 b c)) (set (tuple21 a b))))))
  (= (mem (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) (set1 (tuple2 a1 b1))))
  (t2tb4433 r)
  (relation (set1 (tuple2 a1 b1)) (tuple2 a1 (tuple2 b1 c1)) (t2tb261 u)
  (t2tb10 v)))
  (forall ((x (tuple21 a (tuple21 b c))) (y (set (tuple21 a b))))
  (=> (mem (tuple2 (tuple2 a1 (tuple2 b1 c1)) (set1 (tuple2 a1 b1)))
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) (set1 (tuple2 a1 b1)) (t2tb260 x)
  (t2tb11 y)) (t2tb4433 r)) (and (mem14 x u) (mem4 y v)))))))

(declare-fun t2tb4758 ((set (set (tuple21 (tuple21 a (tuple21 b c))
  (tuple21 a b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a (tuple21 b c)) (tuple21 a b))))))
  (sort (set1 (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 b1))))
  (t2tb4758 x))))

(declare-fun tb2t4758 (uni) (set (set (tuple21 (tuple21 a (tuple21 b c))
  (tuple21 a b)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a (tuple21 b c)) (tuple21 a b))))))
  (! (= (tb2t4758 (t2tb4758 i)) i) :pattern ((t2tb4758 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 b1)))) j)
     (= (t2tb4758 (tb2t4758 j)) j)) :pattern ((t2tb4758 (tb2t4758 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a (tuple21 b c)))) (v (set (tuple21 a b)))
  (r (set (tuple21 (tuple21 a (tuple21 b c)) (tuple21 a b)))))
  (= (mem (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 b1)))
  (t2tb4435 r)
  (relation (tuple2 a1 b1) (tuple2 a1 (tuple2 b1 c1)) (t2tb261 u) (t2tb11 v)))
  (forall ((x (tuple21 a (tuple21 b c))) (y (tuple21 a b)))
  (=> (mem (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 b1))
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 b1) (t2tb260 x) (t2tb13 y))
  (t2tb4435 r)) (and (mem14 x u) (mem3 y v)))))))

(declare-fun t2tb4759 ((set (set (tuple21 (tuple21 a (tuple21 b c))
  b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a (tuple21 b c)) b))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) b1))) (t2tb4759 x))))

(declare-fun tb2t4759 (uni) (set (set (tuple21 (tuple21 a (tuple21 b c))
  b))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a (tuple21 b c)) b)))))
  (! (= (tb2t4759 (t2tb4759 i)) i) :pattern ((t2tb4759 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) b1))) j)
     (= (t2tb4759 (tb2t4759 j)) j)) :pattern ((t2tb4759 (tb2t4759 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a (tuple21 b c)))) (v (set b))
  (r (set (tuple21 (tuple21 a (tuple21 b c)) b))))
  (= (mem (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) b1)) (t2tb4437 r)
  (relation b1 (tuple2 a1 (tuple2 b1 c1)) (t2tb261 u) (t2tb12 v)))
  (forall ((x (tuple21 a (tuple21 b c))) (y b))
  (=> (mem (tuple2 (tuple2 a1 (tuple2 b1 c1)) b1)
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) b1 (t2tb260 x) (t2tb14 y)) (t2tb4437 r))
  (and (mem14 x u) (mem2 y v)))))))

(declare-fun t2tb4760 ((set (set (tuple21 (tuple21 a (tuple21 b c))
  a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a (tuple21 b c)) a))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) a1))) (t2tb4760 x))))

(declare-fun tb2t4760 (uni) (set (set (tuple21 (tuple21 a (tuple21 b c))
  a))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a (tuple21 b c)) a)))))
  (! (= (tb2t4760 (t2tb4760 i)) i) :pattern ((t2tb4760 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) a1))) j)
     (= (t2tb4760 (tb2t4760 j)) j)) :pattern ((t2tb4760 (tb2t4760 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a (tuple21 b c)))) (v (set a))
  (r (set (tuple21 (tuple21 a (tuple21 b c)) a))))
  (= (mem (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) a1)) (t2tb4440 r)
  (relation a1 (tuple2 a1 (tuple2 b1 c1)) (t2tb261 u) (t2tb1 v)))
  (forall ((x (tuple21 a (tuple21 b c))) (y a))
  (=> (mem (tuple2 (tuple2 a1 (tuple2 b1 c1)) a1)
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) a1 (t2tb260 x) (t2tb2 y)) (t2tb4440 r))
  (and (mem14 x u) (mem1 y v)))))))

;; mem_relation
  (assert
  (forall ((b2 ty))
  (forall ((u (set (tuple21 a (tuple21 b c)))) (v uni) (r uni))
  (and
  (=> (mem (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) b2)) r
  (relation b2 (tuple2 a1 (tuple2 b1 c1)) (t2tb261 u) v))
  (forall ((x (tuple21 a (tuple21 b c))) (y uni))
  (=> (mem (tuple2 (tuple2 a1 (tuple2 b1 c1)) b2)
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) b2 (t2tb260 x) y) r)
  (and (mem14 x u) (mem b2 y v)))))
  (=>
  (forall ((x (tuple21 a (tuple21 b c))) (y uni))
  (=> (sort b2 y)
  (=> (mem (tuple2 (tuple2 a1 (tuple2 b1 c1)) b2)
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) b2 (t2tb260 x) y) r)
  (and (mem14 x u) (mem b2 y v))))) (mem
  (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) b2)) r
  (relation b2 (tuple2 a1 (tuple2 b1 c1)) (t2tb261 u) v)))))))

(declare-fun t2tb4771 ((set (set (tuple21 (set (tuple21 a c)) (tuple21 a
  (tuple21 b c)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a c)) (tuple21 a (tuple21 b
  c))))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 (tuple2 b1 c1)))))
  (t2tb4771 x))))

(declare-fun tb2t4771 (uni) (set (set (tuple21 (set (tuple21 a c)) (tuple21 a
  (tuple21 b c))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a c)) (tuple21 a (tuple21 b
  c))))))) (! (= (tb2t4771 (t2tb4771 i)) i) :pattern ((t2tb4771 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 (tuple2 b1 c1)))))
     j) (= (t2tb4771 (tb2t4771 j)) j)) :pattern ((t2tb4771 (tb2t4771 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a c)))) (v (set (tuple21 a (tuple21 b c))))
  (r (set (tuple21 (set (tuple21 a c)) (tuple21 a (tuple21 b c))))))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 (tuple2 b1 c1))))
  (t2tb4461 r)
  (relation (tuple2 a1 (tuple2 b1 c1)) (set1 (tuple2 a1 c1)) (t2tb128 u)
  (t2tb261 v)))
  (forall ((x (set (tuple21 a c))) (y (tuple21 a (tuple21 b c))))
  (=> (mem (tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 (tuple2 b1 c1)) (t2tb129 x)
  (t2tb260 y)) (t2tb4461 r)) (and (mem11 x u) (mem14 y v)))))))

(declare-fun t2tb4772 ((set (set (tuple21 (set (tuple21 a c)) (set (tuple21 a
  c)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a c)) (set (tuple21 a c)))))))
  (sort (set1 (set1 (tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 a1 c1)))))
  (t2tb4772 x))))

(declare-fun tb2t4772 (uni) (set (set (tuple21 (set (tuple21 a c))
  (set (tuple21 a c))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a c)) (set (tuple21 a c)))))))
  (! (= (tb2t4772 (t2tb4772 i)) i) :pattern ((t2tb4772 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 a1 c1))))) j)
     (= (t2tb4772 (tb2t4772 j)) j)) :pattern ((t2tb4772 (tb2t4772 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a c)))) (v (set (set (tuple21 a c))))
  (r (set (tuple21 (set (tuple21 a c)) (set (tuple21 a c))))))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 a1 c1))))
  (t2tb4463 r)
  (relation (set1 (tuple2 a1 c1)) (set1 (tuple2 a1 c1)) (t2tb128 u)
  (t2tb128 v)))
  (forall ((x (set (tuple21 a c))) (y (set (tuple21 a c))))
  (=> (mem (tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 a1 c1)))
  (Tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 a1 c1)) (t2tb129 x)
  (t2tb129 y)) (t2tb4463 r)) (and (mem11 x u) (mem11 y v)))))))

(declare-fun t2tb4773 ((set (set (tuple21 (set (tuple21 a c)) (tuple21 a
  c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a c)) (tuple21 a c)))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 c1)))) (t2tb4773 x))))

(declare-fun tb2t4773 (uni) (set (set (tuple21 (set (tuple21 a c)) (tuple21 a
  c)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a c)) (tuple21 a c))))))
  (! (= (tb2t4773 (t2tb4773 i)) i) :pattern ((t2tb4773 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 c1)))) j)
     (= (t2tb4773 (tb2t4773 j)) j)) :pattern ((t2tb4773 (tb2t4773 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a c)))) (v (set (tuple21 a c)))
  (r (set (tuple21 (set (tuple21 a c)) (tuple21 a c)))))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 c1))) (t2tb4465 r)
  (relation (tuple2 a1 c1) (set1 (tuple2 a1 c1)) (t2tb128 u) (t2tb129 v)))
  (forall ((x (set (tuple21 a c))) (y (tuple21 a c)))
  (=> (mem (tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 c1))
  (Tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 c1) (t2tb129 x) (t2tb133 y))
  (t2tb4465 r)) (and (mem11 x u) (mem10 y v)))))))

(declare-fun t2tb5175 ((set (set (tuple21 (set (tuple21 a c)) (tuple21 b
  c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a c)) (tuple21 b c)))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 a1 c1)) (tuple2 b1 c1)))) (t2tb5175 x))))

(declare-fun tb2t5175 (uni) (set (set (tuple21 (set (tuple21 a c)) (tuple21 b
  c)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a c)) (tuple21 b c))))))
  (! (= (tb2t5175 (t2tb5175 i)) i) :pattern ((t2tb5175 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 a1 c1)) (tuple2 b1 c1)))) j)
     (= (t2tb5175 (tb2t5175 j)) j)) :pattern ((t2tb5175 (tb2t5175 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a c)))) (v (set (tuple21 b c)))
  (r (set (tuple21 (set (tuple21 a c)) (tuple21 b c)))))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 c1)) (tuple2 b1 c1))) (t2tb5150 r)
  (relation (tuple2 b1 c1) (set1 (tuple2 a1 c1)) (t2tb128 u) (t2tb131 v)))
  (forall ((x (set (tuple21 a c))) (y (tuple21 b c)))
  (=> (mem (tuple2 (set1 (tuple2 a1 c1)) (tuple2 b1 c1))
  (Tuple2 (set1 (tuple2 a1 c1)) (tuple2 b1 c1) (t2tb129 x) (t2tb134 y))
  (t2tb5150 r)) (and (mem11 x u) (mem8 y v)))))))

(declare-fun t2tb4774 ((set (set (tuple21 (set (tuple21 a c)) c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a c)) c))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 a1 c1)) c1))) (t2tb4774 x))))

(declare-fun tb2t4774 (uni) (set (set (tuple21 (set (tuple21 a c)) c))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a c)) c)))))
  (! (= (tb2t4774 (t2tb4774 i)) i) :pattern ((t2tb4774 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 a1 c1)) c1))) j)
     (= (t2tb4774 (tb2t4774 j)) j)) :pattern ((t2tb4774 (tb2t4774 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a c)))) (v (set c))
  (r (set (tuple21 (set (tuple21 a c)) c))))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 c1)) c1)) (t2tb4467 r)
  (relation c1 (set1 (tuple2 a1 c1)) (t2tb128 u) (t2tb132 v)))
  (forall ((x (set (tuple21 a c))) (y c))
  (=> (mem (tuple2 (set1 (tuple2 a1 c1)) c1)
  (Tuple2 (set1 (tuple2 a1 c1)) c1 (t2tb129 x) (t2tb135 y)) (t2tb4467 r))
  (and (mem11 x u) (mem7 y v)))))))

(declare-fun t2tb5176 ((set (set (tuple21 (set (tuple21 a c)) (tuple21 b
  a))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a c)) (tuple21 b a)))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 a1 c1)) (tuple2 b1 a1)))) (t2tb5176 x))))

(declare-fun tb2t5176 (uni) (set (set (tuple21 (set (tuple21 a c)) (tuple21 b
  a)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a c)) (tuple21 b a))))))
  (! (= (tb2t5176 (t2tb5176 i)) i) :pattern ((t2tb5176 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 a1 c1)) (tuple2 b1 a1)))) j)
     (= (t2tb5176 (tb2t5176 j)) j)) :pattern ((t2tb5176 (tb2t5176 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a c)))) (v (set (tuple21 b a)))
  (r (set (tuple21 (set (tuple21 a c)) (tuple21 b a)))))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 c1)) (tuple2 b1 a1))) (t2tb5151 r)
  (relation (tuple2 b1 a1) (set1 (tuple2 a1 c1)) (t2tb128 u) (t2tb37 v)))
  (forall ((x (set (tuple21 a c))) (y (tuple21 b a)))
  (=> (mem (tuple2 (set1 (tuple2 a1 c1)) (tuple2 b1 a1))
  (Tuple2 (set1 (tuple2 a1 c1)) (tuple2 b1 a1) (t2tb129 x) (t2tb38 y))
  (t2tb5151 r)) (and (mem11 x u) (mem5 y v)))))))

(declare-fun t2tb4775 ((set (set (tuple21 (set (tuple21 a c)) (set (tuple21 a
  b)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a c)) (set (tuple21 a b)))))))
  (sort (set1 (set1 (tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 a1 b1)))))
  (t2tb4775 x))))

(declare-fun tb2t4775 (uni) (set (set (tuple21 (set (tuple21 a c))
  (set (tuple21 a b))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a c)) (set (tuple21 a b)))))))
  (! (= (tb2t4775 (t2tb4775 i)) i) :pattern ((t2tb4775 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 a1 b1))))) j)
     (= (t2tb4775 (tb2t4775 j)) j)) :pattern ((t2tb4775 (tb2t4775 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a c)))) (v (set (set (tuple21 a b))))
  (r (set (tuple21 (set (tuple21 a c)) (set (tuple21 a b))))))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 a1 b1))))
  (t2tb4470 r)
  (relation (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 c1)) (t2tb128 u)
  (t2tb10 v)))
  (forall ((x (set (tuple21 a c))) (y (set (tuple21 a b))))
  (=> (mem (tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 a1 b1)))
  (Tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 a1 b1)) (t2tb129 x) (t2tb11 y))
  (t2tb4470 r)) (and (mem11 x u) (mem4 y v)))))))

(declare-fun t2tb4776 ((set (set (tuple21 (set (tuple21 a c)) (tuple21 a
  b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a c)) (tuple21 a b)))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 b1)))) (t2tb4776 x))))

(declare-fun tb2t4776 (uni) (set (set (tuple21 (set (tuple21 a c)) (tuple21 a
  b)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a c)) (tuple21 a b))))))
  (! (= (tb2t4776 (t2tb4776 i)) i) :pattern ((t2tb4776 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 b1)))) j)
     (= (t2tb4776 (tb2t4776 j)) j)) :pattern ((t2tb4776 (tb2t4776 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a c)))) (v (set (tuple21 a b)))
  (r (set (tuple21 (set (tuple21 a c)) (tuple21 a b)))))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 b1))) (t2tb4471 r)
  (relation (tuple2 a1 b1) (set1 (tuple2 a1 c1)) (t2tb128 u) (t2tb11 v)))
  (forall ((x (set (tuple21 a c))) (y (tuple21 a b)))
  (=> (mem (tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 b1))
  (Tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 b1) (t2tb129 x) (t2tb13 y))
  (t2tb4471 r)) (and (mem11 x u) (mem3 y v)))))))

(declare-fun t2tb4777 ((set (set (tuple21 (set (tuple21 a c)) b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a c)) b))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 a1 c1)) b1))) (t2tb4777 x))))

(declare-fun tb2t4777 (uni) (set (set (tuple21 (set (tuple21 a c)) b))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a c)) b)))))
  (! (= (tb2t4777 (t2tb4777 i)) i) :pattern ((t2tb4777 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 a1 c1)) b1))) j)
     (= (t2tb4777 (tb2t4777 j)) j)) :pattern ((t2tb4777 (tb2t4777 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a c)))) (v (set b))
  (r (set (tuple21 (set (tuple21 a c)) b))))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 c1)) b1)) (t2tb4473 r)
  (relation b1 (set1 (tuple2 a1 c1)) (t2tb128 u) (t2tb12 v)))
  (forall ((x (set (tuple21 a c))) (y b))
  (=> (mem (tuple2 (set1 (tuple2 a1 c1)) b1)
  (Tuple2 (set1 (tuple2 a1 c1)) b1 (t2tb129 x) (t2tb14 y)) (t2tb4473 r))
  (and (mem11 x u) (mem2 y v)))))))

(declare-fun t2tb4778 ((set (set (tuple21 (set (tuple21 a c)) a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a c)) a))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 a1 c1)) a1))) (t2tb4778 x))))

(declare-fun tb2t4778 (uni) (set (set (tuple21 (set (tuple21 a c)) a))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a c)) a)))))
  (! (= (tb2t4778 (t2tb4778 i)) i) :pattern ((t2tb4778 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 a1 c1)) a1))) j)
     (= (t2tb4778 (tb2t4778 j)) j)) :pattern ((t2tb4778 (tb2t4778 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a c)))) (v (set a))
  (r (set (tuple21 (set (tuple21 a c)) a))))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 c1)) a1)) (t2tb4475 r)
  (relation a1 (set1 (tuple2 a1 c1)) (t2tb128 u) (t2tb1 v)))
  (forall ((x (set (tuple21 a c))) (y a))
  (=> (mem (tuple2 (set1 (tuple2 a1 c1)) a1)
  (Tuple2 (set1 (tuple2 a1 c1)) a1 (t2tb129 x) (t2tb2 y)) (t2tb4475 r))
  (and (mem11 x u) (mem1 y v)))))))

;; mem_relation
  (assert
  (forall ((b2 ty))
  (forall ((u (set (set (tuple21 a c)))) (v uni) (r uni))
  (and
  (=> (mem (set1 (tuple2 (set1 (tuple2 a1 c1)) b2)) r
  (relation b2 (set1 (tuple2 a1 c1)) (t2tb128 u) v))
  (forall ((x (set (tuple21 a c))) (y uni))
  (=> (mem (tuple2 (set1 (tuple2 a1 c1)) b2)
  (Tuple2 (set1 (tuple2 a1 c1)) b2 (t2tb129 x) y) r)
  (and (mem11 x u) (mem b2 y v)))))
  (=>
  (forall ((x (set (tuple21 a c))) (y uni))
  (=> (sort b2 y)
  (=> (mem (tuple2 (set1 (tuple2 a1 c1)) b2)
  (Tuple2 (set1 (tuple2 a1 c1)) b2 (t2tb129 x) y) r)
  (and (mem11 x u) (mem b2 y v))))) (mem
  (set1 (tuple2 (set1 (tuple2 a1 c1)) b2)) r
  (relation b2 (set1 (tuple2 a1 c1)) (t2tb128 u) v)))))))

(declare-fun t2tb4788 ((set (set (tuple21 (tuple21 a c) (tuple21 a (tuple21 b
  c)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a c) (tuple21 a (tuple21 b c)))))))
  (sort (set1 (set1 (tuple2 (tuple2 a1 c1) (tuple2 a1 (tuple2 b1 c1)))))
  (t2tb4788 x))))

(declare-fun tb2t4788 (uni) (set (set (tuple21 (tuple21 a c) (tuple21 a
  (tuple21 b c))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a c) (tuple21 a (tuple21 b c)))))))
  (! (= (tb2t4788 (t2tb4788 i)) i) :pattern ((t2tb4788 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (tuple2 a1 c1) (tuple2 a1 (tuple2 b1 c1))))) j)
     (= (t2tb4788 (tb2t4788 j)) j)) :pattern ((t2tb4788 (tb2t4788 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a c))) (v (set (tuple21 a (tuple21 b c))))
  (r (set (tuple21 (tuple21 a c) (tuple21 a (tuple21 b c))))))
  (= (mem (set1 (tuple2 (tuple2 a1 c1) (tuple2 a1 (tuple2 b1 c1))))
  (t2tb4491 r)
  (relation (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 c1) (t2tb129 u)
  (t2tb261 v)))
  (forall ((x (tuple21 a c)) (y (tuple21 a (tuple21 b c))))
  (=> (mem (tuple2 (tuple2 a1 c1) (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 (tuple2 a1 c1) (tuple2 a1 (tuple2 b1 c1)) (t2tb133 x) (t2tb260 y))
  (t2tb4491 r)) (and (mem10 x u) (mem14 y v)))))))

(declare-fun t2tb4789 ((set (set (tuple21 (tuple21 a c) (set (tuple21 a
  c)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a c) (set (tuple21 a c))))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 c1) (set1 (tuple2 a1 c1))))) (t2tb4789 x))))

(declare-fun tb2t4789 (uni) (set (set (tuple21 (tuple21 a c) (set (tuple21 a
  c))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a c) (set (tuple21 a c)))))))
  (! (= (tb2t4789 (t2tb4789 i)) i) :pattern ((t2tb4789 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 c1) (set1 (tuple2 a1 c1))))) j)
     (= (t2tb4789 (tb2t4789 j)) j)) :pattern ((t2tb4789 (tb2t4789 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a c))) (v (set (set (tuple21 a c))))
  (r (set (tuple21 (tuple21 a c) (set (tuple21 a c))))))
  (= (mem (set1 (tuple2 (tuple2 a1 c1) (set1 (tuple2 a1 c1)))) (t2tb4493 r)
  (relation (set1 (tuple2 a1 c1)) (tuple2 a1 c1) (t2tb129 u) (t2tb128 v)))
  (forall ((x (tuple21 a c)) (y (set (tuple21 a c))))
  (=> (mem (tuple2 (tuple2 a1 c1) (set1 (tuple2 a1 c1)))
  (Tuple2 (tuple2 a1 c1) (set1 (tuple2 a1 c1)) (t2tb133 x) (t2tb129 y))
  (t2tb4493 r)) (and (mem10 x u) (mem11 y v)))))))

(declare-fun t2tb275 ((set (set (tuple21 (tuple21 a c) (tuple21 a c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a c) (tuple21 a c)))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 c1) (tuple2 a1 c1)))) (t2tb275 x))))

(declare-fun tb2t275 (uni) (set (set (tuple21 (tuple21 a c) (tuple21 a c)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a c) (tuple21 a c))))))
  (! (= (tb2t275 (t2tb275 i)) i) :pattern ((t2tb275 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 c1) (tuple2 a1 c1)))) j)
     (= (t2tb275 (tb2t275 j)) j)) :pattern ((t2tb275 (tb2t275 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a c))) (v (set (tuple21 a c)))
  (r (set (tuple21 (tuple21 a c) (tuple21 a c)))))
  (= (mem (set1 (tuple2 (tuple2 a1 c1) (tuple2 a1 c1))) (t2tb157 r)
  (relation (tuple2 a1 c1) (tuple2 a1 c1) (t2tb129 u) (t2tb129 v)))
  (forall ((x (tuple21 a c)) (y (tuple21 a c)))
  (=> (mem (tuple2 (tuple2 a1 c1) (tuple2 a1 c1))
  (Tuple2 (tuple2 a1 c1) (tuple2 a1 c1) (t2tb133 x) (t2tb133 y)) (t2tb157 r))
  (and (mem10 x u) (mem10 y v)))))))

(declare-fun t2tb1144 ((set (set (tuple21 (tuple21 a c) (tuple21 b
  c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a c) (tuple21 b c)))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 c1) (tuple2 b1 c1)))) (t2tb1144 x))))

(declare-fun tb2t1144 (uni) (set (set (tuple21 (tuple21 a c) (tuple21 b
  c)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a c) (tuple21 b c))))))
  (! (= (tb2t1144 (t2tb1144 i)) i) :pattern ((t2tb1144 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 c1) (tuple2 b1 c1)))) j)
     (= (t2tb1144 (tb2t1144 j)) j)) :pattern ((t2tb1144 (tb2t1144 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a c))) (v (set (tuple21 b c)))
  (r (set (tuple21 (tuple21 a c) (tuple21 b c)))))
  (= (mem (set1 (tuple2 (tuple2 a1 c1) (tuple2 b1 c1))) (t2tb1091 r)
  (relation (tuple2 b1 c1) (tuple2 a1 c1) (t2tb129 u) (t2tb131 v)))
  (forall ((x (tuple21 a c)) (y (tuple21 b c)))
  (=> (mem (tuple2 (tuple2 a1 c1) (tuple2 b1 c1))
  (Tuple2 (tuple2 a1 c1) (tuple2 b1 c1) (t2tb133 x) (t2tb134 y))
  (t2tb1091 r)) (and (mem10 x u) (mem8 y v)))))))

(declare-fun t2tb278 ((set (set (tuple21 (tuple21 a c) c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a c) c))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 c1) c1))) (t2tb278 x))))

(declare-fun tb2t278 (uni) (set (set (tuple21 (tuple21 a c) c))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a c) c)))))
  (! (= (tb2t278 (t2tb278 i)) i) :pattern ((t2tb278 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 c1) c1))) j)
     (= (t2tb278 (tb2t278 j)) j)) :pattern ((t2tb278 (tb2t278 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a c))) (v (set c)) (r (set (tuple21 (tuple21 a c)
  c))))
  (= (mem (set1 (tuple2 (tuple2 a1 c1) c1)) (t2tb162 r)
  (relation c1 (tuple2 a1 c1) (t2tb129 u) (t2tb132 v)))
  (forall ((x (tuple21 a c)) (y c))
  (=> (mem (tuple2 (tuple2 a1 c1) c1)
  (Tuple2 (tuple2 a1 c1) c1 (t2tb133 x) (t2tb135 y)) (t2tb162 r))
  (and (mem10 x u) (mem7 y v)))))))

(declare-fun t2tb5177 ((set (set (tuple21 (tuple21 a c) (tuple21 b
  a))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a c) (tuple21 b a)))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 c1) (tuple2 b1 a1)))) (t2tb5177 x))))

(declare-fun tb2t5177 (uni) (set (set (tuple21 (tuple21 a c) (tuple21 b
  a)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a c) (tuple21 b a))))))
  (! (= (tb2t5177 (t2tb5177 i)) i) :pattern ((t2tb5177 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 c1) (tuple2 b1 a1)))) j)
     (= (t2tb5177 (tb2t5177 j)) j)) :pattern ((t2tb5177 (tb2t5177 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a c))) (v (set (tuple21 b a)))
  (r (set (tuple21 (tuple21 a c) (tuple21 b a)))))
  (= (mem (set1 (tuple2 (tuple2 a1 c1) (tuple2 b1 a1))) (t2tb5153 r)
  (relation (tuple2 b1 a1) (tuple2 a1 c1) (t2tb129 u) (t2tb37 v)))
  (forall ((x (tuple21 a c)) (y (tuple21 b a)))
  (=> (mem (tuple2 (tuple2 a1 c1) (tuple2 b1 a1))
  (Tuple2 (tuple2 a1 c1) (tuple2 b1 a1) (t2tb133 x) (t2tb38 y)) (t2tb5153 r))
  (and (mem10 x u) (mem5 y v)))))))

(declare-fun t2tb279 ((set (set (tuple21 (tuple21 a c) (set (tuple21 a
  b)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a c) (set (tuple21 a b))))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 c1) (set1 (tuple2 a1 b1))))) (t2tb279 x))))

(declare-fun tb2t279 (uni) (set (set (tuple21 (tuple21 a c) (set (tuple21 a
  b))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a c) (set (tuple21 a b)))))))
  (! (= (tb2t279 (t2tb279 i)) i) :pattern ((t2tb279 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 c1) (set1 (tuple2 a1 b1))))) j)
     (= (t2tb279 (tb2t279 j)) j)) :pattern ((t2tb279 (tb2t279 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a c))) (v (set (set (tuple21 a b))))
  (r (set (tuple21 (tuple21 a c) (set (tuple21 a b))))))
  (= (mem (set1 (tuple2 (tuple2 a1 c1) (set1 (tuple2 a1 b1)))) (t2tb164 r)
  (relation (set1 (tuple2 a1 b1)) (tuple2 a1 c1) (t2tb129 u) (t2tb10 v)))
  (forall ((x (tuple21 a c)) (y (set (tuple21 a b))))
  (=> (mem (tuple2 (tuple2 a1 c1) (set1 (tuple2 a1 b1)))
  (Tuple2 (tuple2 a1 c1) (set1 (tuple2 a1 b1)) (t2tb133 x) (t2tb11 y))
  (t2tb164 r)) (and (mem10 x u) (mem4 y v)))))))

(declare-fun t2tb280 ((set (set (tuple21 (tuple21 a c) (tuple21 a b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a c) (tuple21 a b)))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 c1) (tuple2 a1 b1)))) (t2tb280 x))))

(declare-fun tb2t280 (uni) (set (set (tuple21 (tuple21 a c) (tuple21 a b)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a c) (tuple21 a b))))))
  (! (= (tb2t280 (t2tb280 i)) i) :pattern ((t2tb280 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 c1) (tuple2 a1 b1)))) j)
     (= (t2tb280 (tb2t280 j)) j)) :pattern ((t2tb280 (tb2t280 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a c))) (v (set (tuple21 a b)))
  (r (set (tuple21 (tuple21 a c) (tuple21 a b)))))
  (= (mem (set1 (tuple2 (tuple2 a1 c1) (tuple2 a1 b1))) (t2tb166 r)
  (relation (tuple2 a1 b1) (tuple2 a1 c1) (t2tb129 u) (t2tb11 v)))
  (forall ((x (tuple21 a c)) (y (tuple21 a b)))
  (=> (mem (tuple2 (tuple2 a1 c1) (tuple2 a1 b1))
  (Tuple2 (tuple2 a1 c1) (tuple2 a1 b1) (t2tb133 x) (t2tb13 y)) (t2tb166 r))
  (and (mem10 x u) (mem3 y v)))))))

(declare-fun t2tb281 ((set (set (tuple21 (tuple21 a c) b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a c) b))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 c1) b1))) (t2tb281 x))))

(declare-fun tb2t281 (uni) (set (set (tuple21 (tuple21 a c) b))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a c) b)))))
  (! (= (tb2t281 (t2tb281 i)) i) :pattern ((t2tb281 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 c1) b1))) j)
     (= (t2tb281 (tb2t281 j)) j)) :pattern ((t2tb281 (tb2t281 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a c))) (v (set b)) (r (set (tuple21 (tuple21 a c)
  b))))
  (= (mem (set1 (tuple2 (tuple2 a1 c1) b1)) (t2tb168 r)
  (relation b1 (tuple2 a1 c1) (t2tb129 u) (t2tb12 v)))
  (forall ((x (tuple21 a c)) (y b))
  (=> (mem (tuple2 (tuple2 a1 c1) b1)
  (Tuple2 (tuple2 a1 c1) b1 (t2tb133 x) (t2tb14 y)) (t2tb168 r))
  (and (mem10 x u) (mem2 y v)))))))

(declare-fun t2tb282 ((set (set (tuple21 (tuple21 a c) a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a c) a))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 c1) a1))) (t2tb282 x))))

(declare-fun tb2t282 (uni) (set (set (tuple21 (tuple21 a c) a))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a c) a)))))
  (! (= (tb2t282 (t2tb282 i)) i) :pattern ((t2tb282 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 c1) a1))) j)
     (= (t2tb282 (tb2t282 j)) j)) :pattern ((t2tb282 (tb2t282 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a c))) (v (set a)) (r (set (tuple21 (tuple21 a c)
  a))))
  (= (mem (set1 (tuple2 (tuple2 a1 c1) a1)) (t2tb170 r)
  (relation a1 (tuple2 a1 c1) (t2tb129 u) (t2tb1 v)))
  (forall ((x (tuple21 a c)) (y a))
  (=> (mem (tuple2 (tuple2 a1 c1) a1)
  (Tuple2 (tuple2 a1 c1) a1 (t2tb133 x) (t2tb2 y)) (t2tb170 r))
  (and (mem10 x u) (mem1 y v)))))))

;; mem_relation
  (assert
  (forall ((b2 ty))
  (forall ((u (set (tuple21 a c))) (v uni) (r uni))
  (and
  (=> (mem (set1 (tuple2 (tuple2 a1 c1) b2)) r
  (relation b2 (tuple2 a1 c1) (t2tb129 u) v))
  (forall ((x (tuple21 a c)) (y uni))
  (=> (mem (tuple2 (tuple2 a1 c1) b2)
  (Tuple2 (tuple2 a1 c1) b2 (t2tb133 x) y) r) (and (mem10 x u) (mem b2 y v)))))
  (=>
  (forall ((x (tuple21 a c)) (y uni))
  (=> (sort b2 y)
  (=> (mem (tuple2 (tuple2 a1 c1) b2)
  (Tuple2 (tuple2 a1 c1) b2 (t2tb133 x) y) r) (and (mem10 x u) (mem b2 y v)))))
  (mem (set1 (tuple2 (tuple2 a1 c1) b2)) r
  (relation b2 (tuple2 a1 c1) (t2tb129 u) v)))))))

(declare-fun t2tb5178 ((set (set (tuple21 (tuple21 b c) (tuple21 a (tuple21 b
  c)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 b c) (tuple21 a (tuple21 b c)))))))
  (sort (set1 (set1 (tuple2 (tuple2 b1 c1) (tuple2 a1 (tuple2 b1 c1)))))
  (t2tb5178 x))))

(declare-fun tb2t5178 (uni) (set (set (tuple21 (tuple21 b c) (tuple21 a
  (tuple21 b c))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 b c) (tuple21 a (tuple21 b c)))))))
  (! (= (tb2t5178 (t2tb5178 i)) i) :pattern ((t2tb5178 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (tuple2 b1 c1) (tuple2 a1 (tuple2 b1 c1))))) j)
     (= (t2tb5178 (tb2t5178 j)) j)) :pattern ((t2tb5178 (tb2t5178 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 b c))) (v (set (tuple21 a (tuple21 b c))))
  (r (set (tuple21 (tuple21 b c) (tuple21 a (tuple21 b c))))))
  (= (mem (set1 (tuple2 (tuple2 b1 c1) (tuple2 a1 (tuple2 b1 c1))))
  (t2tb5155 r)
  (relation (tuple2 a1 (tuple2 b1 c1)) (tuple2 b1 c1) (t2tb131 u)
  (t2tb261 v)))
  (forall ((x (tuple21 b c)) (y (tuple21 a (tuple21 b c))))
  (=> (mem (tuple2 (tuple2 b1 c1) (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 (tuple2 b1 c1) (tuple2 a1 (tuple2 b1 c1)) (t2tb134 x) (t2tb260 y))
  (t2tb5155 r)) (and (mem8 x u) (mem14 y v)))))))

(declare-fun t2tb5179 ((set (set (tuple21 (tuple21 b c) (set (tuple21 a
  c)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 b c) (set (tuple21 a c))))))) (sort
  (set1 (set1 (tuple2 (tuple2 b1 c1) (set1 (tuple2 a1 c1))))) (t2tb5179 x))))

(declare-fun tb2t5179 (uni) (set (set (tuple21 (tuple21 b c) (set (tuple21 a
  c))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 b c) (set (tuple21 a c)))))))
  (! (= (tb2t5179 (t2tb5179 i)) i) :pattern ((t2tb5179 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 b1 c1) (set1 (tuple2 a1 c1))))) j)
     (= (t2tb5179 (tb2t5179 j)) j)) :pattern ((t2tb5179 (tb2t5179 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 b c))) (v (set (set (tuple21 a c))))
  (r (set (tuple21 (tuple21 b c) (set (tuple21 a c))))))
  (= (mem (set1 (tuple2 (tuple2 b1 c1) (set1 (tuple2 a1 c1)))) (t2tb5157 r)
  (relation (set1 (tuple2 a1 c1)) (tuple2 b1 c1) (t2tb131 u) (t2tb128 v)))
  (forall ((x (tuple21 b c)) (y (set (tuple21 a c))))
  (=> (mem (tuple2 (tuple2 b1 c1) (set1 (tuple2 a1 c1)))
  (Tuple2 (tuple2 b1 c1) (set1 (tuple2 a1 c1)) (t2tb134 x) (t2tb129 y))
  (t2tb5157 r)) (and (mem8 x u) (mem11 y v)))))))

(declare-fun t2tb1153 ((set (set (tuple21 (tuple21 b c) (tuple21 a
  c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 b c) (tuple21 a c)))))) (sort
  (set1 (set1 (tuple2 (tuple2 b1 c1) (tuple2 a1 c1)))) (t2tb1153 x))))

(declare-fun tb2t1153 (uni) (set (set (tuple21 (tuple21 b c) (tuple21 a
  c)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 b c) (tuple21 a c))))))
  (! (= (tb2t1153 (t2tb1153 i)) i) :pattern ((t2tb1153 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 b1 c1) (tuple2 a1 c1)))) j)
     (= (t2tb1153 (tb2t1153 j)) j)) :pattern ((t2tb1153 (tb2t1153 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 b c))) (v (set (tuple21 a c)))
  (r (set (tuple21 (tuple21 b c) (tuple21 a c)))))
  (= (mem (set1 (tuple2 (tuple2 b1 c1) (tuple2 a1 c1))) (t2tb1109 r)
  (relation (tuple2 a1 c1) (tuple2 b1 c1) (t2tb131 u) (t2tb129 v)))
  (forall ((x (tuple21 b c)) (y (tuple21 a c)))
  (=> (mem (tuple2 (tuple2 b1 c1) (tuple2 a1 c1))
  (Tuple2 (tuple2 b1 c1) (tuple2 a1 c1) (t2tb134 x) (t2tb133 y))
  (t2tb1109 r)) (and (mem8 x u) (mem10 y v)))))))

(declare-fun t2tb1155 ((set (set (tuple21 (tuple21 b c) (tuple21 b
  c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 b c) (tuple21 b c)))))) (sort
  (set1 (set1 (tuple2 (tuple2 b1 c1) (tuple2 b1 c1)))) (t2tb1155 x))))

(declare-fun tb2t1155 (uni) (set (set (tuple21 (tuple21 b c) (tuple21 b
  c)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 b c) (tuple21 b c))))))
  (! (= (tb2t1155 (t2tb1155 i)) i) :pattern ((t2tb1155 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 b1 c1) (tuple2 b1 c1)))) j)
     (= (t2tb1155 (tb2t1155 j)) j)) :pattern ((t2tb1155 (tb2t1155 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 b c))) (v (set (tuple21 b c)))
  (r (set (tuple21 (tuple21 b c) (tuple21 b c)))))
  (= (mem (set1 (tuple2 (tuple2 b1 c1) (tuple2 b1 c1))) (t2tb1113 r)
  (relation (tuple2 b1 c1) (tuple2 b1 c1) (t2tb131 u) (t2tb131 v)))
  (forall ((x (tuple21 b c)) (y (tuple21 b c)))
  (=> (mem (tuple2 (tuple2 b1 c1) (tuple2 b1 c1))
  (Tuple2 (tuple2 b1 c1) (tuple2 b1 c1) (t2tb134 x) (t2tb134 y))
  (t2tb1113 r)) (and (mem8 x u) (mem8 y v)))))))

(declare-fun t2tb1156 ((set (set (tuple21 (tuple21 b c) c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 b c) c))))) (sort
  (set1 (set1 (tuple2 (tuple2 b1 c1) c1))) (t2tb1156 x))))

(declare-fun tb2t1156 (uni) (set (set (tuple21 (tuple21 b c) c))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 b c) c)))))
  (! (= (tb2t1156 (t2tb1156 i)) i) :pattern ((t2tb1156 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 b1 c1) c1))) j)
     (= (t2tb1156 (tb2t1156 j)) j)) :pattern ((t2tb1156 (tb2t1156 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 b c))) (v (set c)) (r (set (tuple21 (tuple21 b c)
  c))))
  (= (mem (set1 (tuple2 (tuple2 b1 c1) c1)) (t2tb1115 r)
  (relation c1 (tuple2 b1 c1) (t2tb131 u) (t2tb132 v)))
  (forall ((x (tuple21 b c)) (y c))
  (=> (mem (tuple2 (tuple2 b1 c1) c1)
  (Tuple2 (tuple2 b1 c1) c1 (t2tb134 x) (t2tb135 y)) (t2tb1115 r))
  (and (mem8 x u) (mem7 y v)))))))

(declare-fun t2tb5180 ((set (set (tuple21 (tuple21 b c) (tuple21 b
  a))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 b c) (tuple21 b a)))))) (sort
  (set1 (set1 (tuple2 (tuple2 b1 c1) (tuple2 b1 a1)))) (t2tb5180 x))))

(declare-fun tb2t5180 (uni) (set (set (tuple21 (tuple21 b c) (tuple21 b
  a)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 b c) (tuple21 b a))))))
  (! (= (tb2t5180 (t2tb5180 i)) i) :pattern ((t2tb5180 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 b1 c1) (tuple2 b1 a1)))) j)
     (= (t2tb5180 (tb2t5180 j)) j)) :pattern ((t2tb5180 (tb2t5180 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 b c))) (v (set (tuple21 b a)))
  (r (set (tuple21 (tuple21 b c) (tuple21 b a)))))
  (= (mem (set1 (tuple2 (tuple2 b1 c1) (tuple2 b1 a1))) (t2tb5159 r)
  (relation (tuple2 b1 a1) (tuple2 b1 c1) (t2tb131 u) (t2tb37 v)))
  (forall ((x (tuple21 b c)) (y (tuple21 b a)))
  (=> (mem (tuple2 (tuple2 b1 c1) (tuple2 b1 a1))
  (Tuple2 (tuple2 b1 c1) (tuple2 b1 a1) (t2tb134 x) (t2tb38 y)) (t2tb5159 r))
  (and (mem8 x u) (mem5 y v)))))))

(declare-fun t2tb1157 ((set (set (tuple21 (tuple21 b c) (set (tuple21 a
  b)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 b c) (set (tuple21 a b))))))) (sort
  (set1 (set1 (tuple2 (tuple2 b1 c1) (set1 (tuple2 a1 b1))))) (t2tb1157 x))))

(declare-fun tb2t1157 (uni) (set (set (tuple21 (tuple21 b c) (set (tuple21 a
  b))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 b c) (set (tuple21 a b)))))))
  (! (= (tb2t1157 (t2tb1157 i)) i) :pattern ((t2tb1157 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 b1 c1) (set1 (tuple2 a1 b1))))) j)
     (= (t2tb1157 (tb2t1157 j)) j)) :pattern ((t2tb1157 (tb2t1157 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 b c))) (v (set (set (tuple21 a b))))
  (r (set (tuple21 (tuple21 b c) (set (tuple21 a b))))))
  (= (mem (set1 (tuple2 (tuple2 b1 c1) (set1 (tuple2 a1 b1)))) (t2tb1117 r)
  (relation (set1 (tuple2 a1 b1)) (tuple2 b1 c1) (t2tb131 u) (t2tb10 v)))
  (forall ((x (tuple21 b c)) (y (set (tuple21 a b))))
  (=> (mem (tuple2 (tuple2 b1 c1) (set1 (tuple2 a1 b1)))
  (Tuple2 (tuple2 b1 c1) (set1 (tuple2 a1 b1)) (t2tb134 x) (t2tb11 y))
  (t2tb1117 r)) (and (mem8 x u) (mem4 y v)))))))

(declare-fun t2tb1158 ((set (set (tuple21 (tuple21 b c) (tuple21 a
  b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 b c) (tuple21 a b)))))) (sort
  (set1 (set1 (tuple2 (tuple2 b1 c1) (tuple2 a1 b1)))) (t2tb1158 x))))

(declare-fun tb2t1158 (uni) (set (set (tuple21 (tuple21 b c) (tuple21 a
  b)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 b c) (tuple21 a b))))))
  (! (= (tb2t1158 (t2tb1158 i)) i) :pattern ((t2tb1158 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 b1 c1) (tuple2 a1 b1)))) j)
     (= (t2tb1158 (tb2t1158 j)) j)) :pattern ((t2tb1158 (tb2t1158 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 b c))) (v (set (tuple21 a b)))
  (r (set (tuple21 (tuple21 b c) (tuple21 a b)))))
  (= (mem (set1 (tuple2 (tuple2 b1 c1) (tuple2 a1 b1))) (t2tb1119 r)
  (relation (tuple2 a1 b1) (tuple2 b1 c1) (t2tb131 u) (t2tb11 v)))
  (forall ((x (tuple21 b c)) (y (tuple21 a b)))
  (=> (mem (tuple2 (tuple2 b1 c1) (tuple2 a1 b1))
  (Tuple2 (tuple2 b1 c1) (tuple2 a1 b1) (t2tb134 x) (t2tb13 y)) (t2tb1119 r))
  (and (mem8 x u) (mem3 y v)))))))

(declare-fun t2tb1159 ((set (set (tuple21 (tuple21 b c) b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 b c) b))))) (sort
  (set1 (set1 (tuple2 (tuple2 b1 c1) b1))) (t2tb1159 x))))

(declare-fun tb2t1159 (uni) (set (set (tuple21 (tuple21 b c) b))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 b c) b)))))
  (! (= (tb2t1159 (t2tb1159 i)) i) :pattern ((t2tb1159 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 b1 c1) b1))) j)
     (= (t2tb1159 (tb2t1159 j)) j)) :pattern ((t2tb1159 (tb2t1159 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 b c))) (v (set b)) (r (set (tuple21 (tuple21 b c)
  b))))
  (= (mem (set1 (tuple2 (tuple2 b1 c1) b1)) (t2tb1121 r)
  (relation b1 (tuple2 b1 c1) (t2tb131 u) (t2tb12 v)))
  (forall ((x (tuple21 b c)) (y b))
  (=> (mem (tuple2 (tuple2 b1 c1) b1)
  (Tuple2 (tuple2 b1 c1) b1 (t2tb134 x) (t2tb14 y)) (t2tb1121 r))
  (and (mem8 x u) (mem2 y v)))))))

(declare-fun t2tb1160 ((set (set (tuple21 (tuple21 b c) a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 b c) a))))) (sort
  (set1 (set1 (tuple2 (tuple2 b1 c1) a1))) (t2tb1160 x))))

(declare-fun tb2t1160 (uni) (set (set (tuple21 (tuple21 b c) a))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 b c) a)))))
  (! (= (tb2t1160 (t2tb1160 i)) i) :pattern ((t2tb1160 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 b1 c1) a1))) j)
     (= (t2tb1160 (tb2t1160 j)) j)) :pattern ((t2tb1160 (tb2t1160 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 b c))) (v (set a)) (r (set (tuple21 (tuple21 b c)
  a))))
  (= (mem (set1 (tuple2 (tuple2 b1 c1) a1)) (t2tb1124 r)
  (relation a1 (tuple2 b1 c1) (t2tb131 u) (t2tb1 v)))
  (forall ((x (tuple21 b c)) (y a))
  (=> (mem (tuple2 (tuple2 b1 c1) a1)
  (Tuple2 (tuple2 b1 c1) a1 (t2tb134 x) (t2tb2 y)) (t2tb1124 r))
  (and (mem8 x u) (mem1 y v)))))))

;; mem_relation
  (assert
  (forall ((b2 ty))
  (forall ((u (set (tuple21 b c))) (v uni) (r uni))
  (and
  (=> (mem (set1 (tuple2 (tuple2 b1 c1) b2)) r
  (relation b2 (tuple2 b1 c1) (t2tb131 u) v))
  (forall ((x (tuple21 b c)) (y uni))
  (=> (mem (tuple2 (tuple2 b1 c1) b2)
  (Tuple2 (tuple2 b1 c1) b2 (t2tb134 x) y) r) (and (mem8 x u) (mem b2 y v)))))
  (=>
  (forall ((x (tuple21 b c)) (y uni))
  (=> (sort b2 y)
  (=> (mem (tuple2 (tuple2 b1 c1) b2)
  (Tuple2 (tuple2 b1 c1) b2 (t2tb134 x) y) r) (and (mem8 x u) (mem b2 y v)))))
  (mem (set1 (tuple2 (tuple2 b1 c1) b2)) r
  (relation b2 (tuple2 b1 c1) (t2tb131 u) v)))))))

(declare-fun t2tb4797 ((set (set (tuple21 c (tuple21 a (tuple21 b
  c)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 c (tuple21 a (tuple21 b c))))))) (sort
  (set1 (set1 (tuple2 c1 (tuple2 a1 (tuple2 b1 c1))))) (t2tb4797 x))))

(declare-fun tb2t4797 (uni) (set (set (tuple21 c (tuple21 a (tuple21 b
  c))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 c (tuple21 a (tuple21 b c)))))))
  (! (= (tb2t4797 (t2tb4797 i)) i) :pattern ((t2tb4797 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 c1 (tuple2 a1 (tuple2 b1 c1))))) j)
     (= (t2tb4797 (tb2t4797 j)) j)) :pattern ((t2tb4797 (tb2t4797 j))) )))

;; mem_relation
  (assert
  (forall ((u (set c)) (v (set (tuple21 a (tuple21 b c)))) (r (set (tuple21 c
  (tuple21 a (tuple21 b c))))))
  (= (mem (set1 (tuple2 c1 (tuple2 a1 (tuple2 b1 c1)))) (t2tb4508 r)
  (relation (tuple2 a1 (tuple2 b1 c1)) c1 (t2tb132 u) (t2tb261 v)))
  (forall ((x c) (y (tuple21 a (tuple21 b c))))
  (=> (mem (tuple2 c1 (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 c1 (tuple2 a1 (tuple2 b1 c1)) (t2tb135 x) (t2tb260 y))
  (t2tb4508 r)) (and (mem7 x u) (mem14 y v)))))))

(declare-fun t2tb4798 ((set (set (tuple21 c (set (tuple21 a c)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 c (set (tuple21 a c))))))) (sort
  (set1 (set1 (tuple2 c1 (set1 (tuple2 a1 c1))))) (t2tb4798 x))))

(declare-fun tb2t4798 (uni) (set (set (tuple21 c (set (tuple21 a c))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 c (set (tuple21 a c)))))))
  (! (= (tb2t4798 (t2tb4798 i)) i) :pattern ((t2tb4798 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 c1 (set1 (tuple2 a1 c1))))) j)
     (= (t2tb4798 (tb2t4798 j)) j)) :pattern ((t2tb4798 (tb2t4798 j))) )))

;; mem_relation
  (assert
  (forall ((u (set c)) (v (set (set (tuple21 a c)))) (r (set (tuple21 c
  (set (tuple21 a c))))))
  (= (mem (set1 (tuple2 c1 (set1 (tuple2 a1 c1)))) (t2tb4510 r)
  (relation (set1 (tuple2 a1 c1)) c1 (t2tb132 u) (t2tb128 v)))
  (forall ((x c) (y (set (tuple21 a c))))
  (=> (mem (tuple2 c1 (set1 (tuple2 a1 c1)))
  (Tuple2 c1 (set1 (tuple2 a1 c1)) (t2tb135 x) (t2tb129 y)) (t2tb4510 r))
  (and (mem7 x u) (mem11 y v)))))))

(declare-fun t2tb302 ((set (set (tuple21 c (tuple21 a c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 c (tuple21 a c)))))) (sort
  (set1 (set1 (tuple2 c1 (tuple2 a1 c1)))) (t2tb302 x))))

(declare-fun tb2t302 (uni) (set (set (tuple21 c (tuple21 a c)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 c (tuple21 a c))))))
  (! (= (tb2t302 (t2tb302 i)) i) :pattern ((t2tb302 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 c1 (tuple2 a1 c1)))) j)
     (= (t2tb302 (tb2t302 j)) j)) :pattern ((t2tb302 (tb2t302 j))) )))

;; mem_relation
  (assert
  (forall ((u (set c)) (v (set (tuple21 a c))) (r (set (tuple21 c (tuple21 a
  c)))))
  (= (mem (set1 (tuple2 c1 (tuple2 a1 c1))) (t2tb210 r)
  (relation (tuple2 a1 c1) c1 (t2tb132 u) (t2tb129 v)))
  (forall ((x c) (y (tuple21 a c)))
  (=> (mem (tuple2 c1 (tuple2 a1 c1))
  (Tuple2 c1 (tuple2 a1 c1) (t2tb135 x) (t2tb133 y)) (t2tb210 r))
  (and (mem7 x u) (mem10 y v)))))))

(declare-fun t2tb1162 ((set (set (tuple21 c (tuple21 b c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 c (tuple21 b c)))))) (sort
  (set1 (set1 (tuple2 c1 (tuple2 b1 c1)))) (t2tb1162 x))))

(declare-fun tb2t1162 (uni) (set (set (tuple21 c (tuple21 b c)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 c (tuple21 b c))))))
  (! (= (tb2t1162 (t2tb1162 i)) i) :pattern ((t2tb1162 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 c1 (tuple2 b1 c1)))) j)
     (= (t2tb1162 (tb2t1162 j)) j)) :pattern ((t2tb1162 (tb2t1162 j))) )))

;; mem_relation
  (assert
  (forall ((u (set c)) (v (set (tuple21 b c))) (r (set (tuple21 c (tuple21 b
  c)))))
  (= (mem (set1 (tuple2 c1 (tuple2 b1 c1))) (t2tb1127 r)
  (relation (tuple2 b1 c1) c1 (t2tb132 u) (t2tb131 v)))
  (forall ((x c) (y (tuple21 b c)))
  (=> (mem (tuple2 c1 (tuple2 b1 c1))
  (Tuple2 c1 (tuple2 b1 c1) (t2tb135 x) (t2tb134 y)) (t2tb1127 r))
  (and (mem7 x u) (mem8 y v)))))))

(declare-fun t2tb305 ((set (set (tuple21 c c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 c c))))) (sort (set1 (set1 (tuple2 c1 c1)))
  (t2tb305 x))))

(declare-fun tb2t305 (uni) (set (set (tuple21 c c))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 c c)))))
  (! (= (tb2t305 (t2tb305 i)) i) :pattern ((t2tb305 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 c1 c1))) j) (= (t2tb305 (tb2t305 j)) j)) :pattern (
  (t2tb305 (tb2t305 j))) )))

;; mem_relation
  (assert
  (forall ((u (set c)) (v (set c)) (r (set (tuple21 c c))))
  (= (mem (set1 (tuple2 c1 c1)) (t2tb216 r)
  (relation c1 c1 (t2tb132 u) (t2tb132 v)))
  (forall ((x c) (y c))
  (=> (mem (tuple2 c1 c1) (Tuple2 c1 c1 (t2tb135 x) (t2tb135 y)) (t2tb216 r))
  (and (mem7 x u) (mem7 y v)))))))

(declare-fun t2tb5181 ((set (set (tuple21 c (tuple21 b a))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 c (tuple21 b a)))))) (sort
  (set1 (set1 (tuple2 c1 (tuple2 b1 a1)))) (t2tb5181 x))))

(declare-fun tb2t5181 (uni) (set (set (tuple21 c (tuple21 b a)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 c (tuple21 b a))))))
  (! (= (tb2t5181 (t2tb5181 i)) i) :pattern ((t2tb5181 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 c1 (tuple2 b1 a1)))) j)
     (= (t2tb5181 (tb2t5181 j)) j)) :pattern ((t2tb5181 (tb2t5181 j))) )))

;; mem_relation
  (assert
  (forall ((u (set c)) (v (set (tuple21 b a))) (r (set (tuple21 c (tuple21 b
  a)))))
  (= (mem (set1 (tuple2 c1 (tuple2 b1 a1))) (t2tb5161 r)
  (relation (tuple2 b1 a1) c1 (t2tb132 u) (t2tb37 v)))
  (forall ((x c) (y (tuple21 b a)))
  (=> (mem (tuple2 c1 (tuple2 b1 a1))
  (Tuple2 c1 (tuple2 b1 a1) (t2tb135 x) (t2tb38 y)) (t2tb5161 r))
  (and (mem7 x u) (mem5 y v)))))))

(declare-fun t2tb306 ((set (set (tuple21 c (set (tuple21 a b)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 c (set (tuple21 a b))))))) (sort
  (set1 (set1 (tuple2 c1 (set1 (tuple2 a1 b1))))) (t2tb306 x))))

(declare-fun tb2t306 (uni) (set (set (tuple21 c (set (tuple21 a b))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 c (set (tuple21 a b)))))))
  (! (= (tb2t306 (t2tb306 i)) i) :pattern ((t2tb306 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 c1 (set1 (tuple2 a1 b1))))) j)
     (= (t2tb306 (tb2t306 j)) j)) :pattern ((t2tb306 (tb2t306 j))) )))

;; mem_relation
  (assert
  (forall ((u (set c)) (v (set (set (tuple21 a b)))) (r (set (tuple21 c
  (set (tuple21 a b))))))
  (= (mem (set1 (tuple2 c1 (set1 (tuple2 a1 b1)))) (t2tb218 r)
  (relation (set1 (tuple2 a1 b1)) c1 (t2tb132 u) (t2tb10 v)))
  (forall ((x c) (y (set (tuple21 a b))))
  (=> (mem (tuple2 c1 (set1 (tuple2 a1 b1)))
  (Tuple2 c1 (set1 (tuple2 a1 b1)) (t2tb135 x) (t2tb11 y)) (t2tb218 r))
  (and (mem7 x u) (mem4 y v)))))))

(declare-fun t2tb307 ((set (set (tuple21 c (tuple21 a b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 c (tuple21 a b)))))) (sort
  (set1 (set1 (tuple2 c1 (tuple2 a1 b1)))) (t2tb307 x))))

(declare-fun tb2t307 (uni) (set (set (tuple21 c (tuple21 a b)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 c (tuple21 a b))))))
  (! (= (tb2t307 (t2tb307 i)) i) :pattern ((t2tb307 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 c1 (tuple2 a1 b1)))) j)
     (= (t2tb307 (tb2t307 j)) j)) :pattern ((t2tb307 (tb2t307 j))) )))

;; mem_relation
  (assert
  (forall ((u (set c)) (v (set (tuple21 a b))) (r (set (tuple21 c (tuple21 a
  b)))))
  (= (mem (set1 (tuple2 c1 (tuple2 a1 b1))) (t2tb220 r)
  (relation (tuple2 a1 b1) c1 (t2tb132 u) (t2tb11 v)))
  (forall ((x c) (y (tuple21 a b)))
  (=> (mem (tuple2 c1 (tuple2 a1 b1))
  (Tuple2 c1 (tuple2 a1 b1) (t2tb135 x) (t2tb13 y)) (t2tb220 r))
  (and (mem7 x u) (mem3 y v)))))))

(declare-fun t2tb308 ((set (set (tuple21 c b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 c b))))) (sort (set1 (set1 (tuple2 c1 b1)))
  (t2tb308 x))))

(declare-fun tb2t308 (uni) (set (set (tuple21 c b))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 c b)))))
  (! (= (tb2t308 (t2tb308 i)) i) :pattern ((t2tb308 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 c1 b1))) j) (= (t2tb308 (tb2t308 j)) j)) :pattern (
  (t2tb308 (tb2t308 j))) )))

;; mem_relation
  (assert
  (forall ((u (set c)) (v (set b)) (r (set (tuple21 c b))))
  (= (mem (set1 (tuple2 c1 b1)) (t2tb222 r)
  (relation b1 c1 (t2tb132 u) (t2tb12 v)))
  (forall ((x c) (y b))
  (=> (mem (tuple2 c1 b1) (Tuple2 c1 b1 (t2tb135 x) (t2tb14 y)) (t2tb222 r))
  (and (mem7 x u) (mem2 y v)))))))

(declare-fun t2tb309 ((set (set (tuple21 c a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 c a))))) (sort (set1 (set1 (tuple2 c1 a1)))
  (t2tb309 x))))

(declare-fun tb2t309 (uni) (set (set (tuple21 c a))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 c a)))))
  (! (= (tb2t309 (t2tb309 i)) i) :pattern ((t2tb309 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 c1 a1))) j) (= (t2tb309 (tb2t309 j)) j)) :pattern (
  (t2tb309 (tb2t309 j))) )))

;; mem_relation
  (assert
  (forall ((u (set c)) (v (set a)) (r (set (tuple21 c a))))
  (= (mem (set1 (tuple2 c1 a1)) (t2tb224 r)
  (relation a1 c1 (t2tb132 u) (t2tb1 v)))
  (forall ((x c) (y a))
  (=> (mem (tuple2 c1 a1) (Tuple2 c1 a1 (t2tb135 x) (t2tb2 y)) (t2tb224 r))
  (and (mem7 x u) (mem1 y v)))))))

;; mem_relation
  (assert
  (forall ((b2 ty))
  (forall ((u (set c)) (v uni) (r uni))
  (and
  (=> (mem (set1 (tuple2 c1 b2)) r (relation b2 c1 (t2tb132 u) v))
  (forall ((x c) (y uni))
  (=> (mem (tuple2 c1 b2) (Tuple2 c1 b2 (t2tb135 x) y) r)
  (and (mem7 x u) (mem b2 y v)))))
  (=>
  (forall ((x c) (y uni))
  (=> (sort b2 y)
  (=> (mem (tuple2 c1 b2) (Tuple2 c1 b2 (t2tb135 x) y) r)
  (and (mem7 x u) (mem b2 y v))))) (mem (set1 (tuple2 c1 b2)) r
  (relation b2 c1 (t2tb132 u) v)))))))

(declare-fun t2tb5182 ((set (set (tuple21 (tuple21 b a) (tuple21 a (tuple21 b
  c)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 b a) (tuple21 a (tuple21 b c)))))))
  (sort (set1 (set1 (tuple2 (tuple2 b1 a1) (tuple2 a1 (tuple2 b1 c1)))))
  (t2tb5182 x))))

(declare-fun tb2t5182 (uni) (set (set (tuple21 (tuple21 b a) (tuple21 a
  (tuple21 b c))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 b a) (tuple21 a (tuple21 b c)))))))
  (! (= (tb2t5182 (t2tb5182 i)) i) :pattern ((t2tb5182 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (tuple2 b1 a1) (tuple2 a1 (tuple2 b1 c1))))) j)
     (= (t2tb5182 (tb2t5182 j)) j)) :pattern ((t2tb5182 (tb2t5182 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 b a))) (v (set (tuple21 a (tuple21 b c))))
  (r (set (tuple21 (tuple21 b a) (tuple21 a (tuple21 b c))))))
  (= (mem (set1 (tuple2 (tuple2 b1 a1) (tuple2 a1 (tuple2 b1 c1))))
  (t2tb5163 r)
  (relation (tuple2 a1 (tuple2 b1 c1)) (tuple2 b1 a1) (t2tb37 u) (t2tb261 v)))
  (forall ((x (tuple21 b a)) (y (tuple21 a (tuple21 b c))))
  (=> (mem (tuple2 (tuple2 b1 a1) (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 (tuple2 b1 a1) (tuple2 a1 (tuple2 b1 c1)) (t2tb38 x) (t2tb260 y))
  (t2tb5163 r)) (and (mem5 x u) (mem14 y v)))))))

(declare-fun t2tb5183 ((set (set (tuple21 (tuple21 b a) (set (tuple21 a
  c)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 b a) (set (tuple21 a c))))))) (sort
  (set1 (set1 (tuple2 (tuple2 b1 a1) (set1 (tuple2 a1 c1))))) (t2tb5183 x))))

(declare-fun tb2t5183 (uni) (set (set (tuple21 (tuple21 b a) (set (tuple21 a
  c))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 b a) (set (tuple21 a c)))))))
  (! (= (tb2t5183 (t2tb5183 i)) i) :pattern ((t2tb5183 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 b1 a1) (set1 (tuple2 a1 c1))))) j)
     (= (t2tb5183 (tb2t5183 j)) j)) :pattern ((t2tb5183 (tb2t5183 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 b a))) (v (set (set (tuple21 a c))))
  (r (set (tuple21 (tuple21 b a) (set (tuple21 a c))))))
  (= (mem (set1 (tuple2 (tuple2 b1 a1) (set1 (tuple2 a1 c1)))) (t2tb5166 r)
  (relation (set1 (tuple2 a1 c1)) (tuple2 b1 a1) (t2tb37 u) (t2tb128 v)))
  (forall ((x (tuple21 b a)) (y (set (tuple21 a c))))
  (=> (mem (tuple2 (tuple2 b1 a1) (set1 (tuple2 a1 c1)))
  (Tuple2 (tuple2 b1 a1) (set1 (tuple2 a1 c1)) (t2tb38 x) (t2tb129 y))
  (t2tb5166 r)) (and (mem5 x u) (mem11 y v)))))))

(declare-fun t2tb5184 ((set (set (tuple21 (tuple21 b a) (tuple21 a
  c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 b a) (tuple21 a c)))))) (sort
  (set1 (set1 (tuple2 (tuple2 b1 a1) (tuple2 a1 c1)))) (t2tb5184 x))))

(declare-fun tb2t5184 (uni) (set (set (tuple21 (tuple21 b a) (tuple21 a
  c)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 b a) (tuple21 a c))))))
  (! (= (tb2t5184 (t2tb5184 i)) i) :pattern ((t2tb5184 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 b1 a1) (tuple2 a1 c1)))) j)
     (= (t2tb5184 (tb2t5184 j)) j)) :pattern ((t2tb5184 (tb2t5184 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 b a))) (v (set (tuple21 a c)))
  (r (set (tuple21 (tuple21 b a) (tuple21 a c)))))
  (= (mem (set1 (tuple2 (tuple2 b1 a1) (tuple2 a1 c1))) (t2tb5167 r)
  (relation (tuple2 a1 c1) (tuple2 b1 a1) (t2tb37 u) (t2tb129 v)))
  (forall ((x (tuple21 b a)) (y (tuple21 a c)))
  (=> (mem (tuple2 (tuple2 b1 a1) (tuple2 a1 c1))
  (Tuple2 (tuple2 b1 a1) (tuple2 a1 c1) (t2tb38 x) (t2tb133 y)) (t2tb5167 r))
  (and (mem5 x u) (mem10 y v)))))))

(declare-fun t2tb5185 ((set (set (tuple21 (tuple21 b a) (tuple21 b
  c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 b a) (tuple21 b c)))))) (sort
  (set1 (set1 (tuple2 (tuple2 b1 a1) (tuple2 b1 c1)))) (t2tb5185 x))))

(declare-fun tb2t5185 (uni) (set (set (tuple21 (tuple21 b a) (tuple21 b
  c)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 b a) (tuple21 b c))))))
  (! (= (tb2t5185 (t2tb5185 i)) i) :pattern ((t2tb5185 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 b1 a1) (tuple2 b1 c1)))) j)
     (= (t2tb5185 (tb2t5185 j)) j)) :pattern ((t2tb5185 (tb2t5185 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 b a))) (v (set (tuple21 b c)))
  (r (set (tuple21 (tuple21 b a) (tuple21 b c)))))
  (= (mem (set1 (tuple2 (tuple2 b1 a1) (tuple2 b1 c1))) (t2tb5169 r)
  (relation (tuple2 b1 c1) (tuple2 b1 a1) (t2tb37 u) (t2tb131 v)))
  (forall ((x (tuple21 b a)) (y (tuple21 b c)))
  (=> (mem (tuple2 (tuple2 b1 a1) (tuple2 b1 c1))
  (Tuple2 (tuple2 b1 a1) (tuple2 b1 c1) (t2tb38 x) (t2tb134 y)) (t2tb5169 r))
  (and (mem5 x u) (mem8 y v)))))))

(declare-fun t2tb5186 ((set (set (tuple21 (tuple21 b a) c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 b a) c))))) (sort
  (set1 (set1 (tuple2 (tuple2 b1 a1) c1))) (t2tb5186 x))))

(declare-fun tb2t5186 (uni) (set (set (tuple21 (tuple21 b a) c))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 b a) c)))))
  (! (= (tb2t5186 (t2tb5186 i)) i) :pattern ((t2tb5186 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 b1 a1) c1))) j)
     (= (t2tb5186 (tb2t5186 j)) j)) :pattern ((t2tb5186 (tb2t5186 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 b a))) (v (set c)) (r (set (tuple21 (tuple21 b a)
  c))))
  (= (mem (set1 (tuple2 (tuple2 b1 a1) c1)) (t2tb5171 r)
  (relation c1 (tuple2 b1 a1) (t2tb37 u) (t2tb132 v)))
  (forall ((x (tuple21 b a)) (y c))
  (=> (mem (tuple2 (tuple2 b1 a1) c1)
  (Tuple2 (tuple2 b1 a1) c1 (t2tb38 x) (t2tb135 y)) (t2tb5171 r))
  (and (mem5 x u) (mem7 y v)))))))

(declare-fun t2tb1075 ((set (set (tuple21 (tuple21 b a) (tuple21 b
  a))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 b a) (tuple21 b a)))))) (sort
  (set1 (set1 (tuple2 (tuple2 b1 a1) (tuple2 b1 a1)))) (t2tb1075 x))))

(declare-fun tb2t1075 (uni) (set (set (tuple21 (tuple21 b a) (tuple21 b
  a)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 b a) (tuple21 b a))))))
  (! (= (tb2t1075 (t2tb1075 i)) i) :pattern ((t2tb1075 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 b1 a1) (tuple2 b1 a1)))) j)
     (= (t2tb1075 (tb2t1075 j)) j)) :pattern ((t2tb1075 (tb2t1075 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 b a))) (v (set (tuple21 b a)))
  (r (set (tuple21 (tuple21 b a) (tuple21 b a)))))
  (= (mem (set1 (tuple2 (tuple2 b1 a1) (tuple2 b1 a1))) (t2tb1057 r)
  (relation (tuple2 b1 a1) (tuple2 b1 a1) (t2tb37 u) (t2tb37 v)))
  (forall ((x (tuple21 b a)) (y (tuple21 b a)))
  (=> (mem (tuple2 (tuple2 b1 a1) (tuple2 b1 a1))
  (Tuple2 (tuple2 b1 a1) (tuple2 b1 a1) (t2tb38 x) (t2tb38 y)) (t2tb1057 r))
  (and (mem5 x u) (mem5 y v)))))))

(declare-fun t2tb2407 ((set (set (tuple21 (tuple21 b a) (set (tuple21 a
  b)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 b a) (set (tuple21 a b))))))) (sort
  (set1 (set1 (tuple2 (tuple2 b1 a1) (set1 (tuple2 a1 b1))))) (t2tb2407 x))))

(declare-fun tb2t2407 (uni) (set (set (tuple21 (tuple21 b a) (set (tuple21 a
  b))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 b a) (set (tuple21 a b)))))))
  (! (= (tb2t2407 (t2tb2407 i)) i) :pattern ((t2tb2407 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 b1 a1) (set1 (tuple2 a1 b1))))) j)
     (= (t2tb2407 (tb2t2407 j)) j)) :pattern ((t2tb2407 (tb2t2407 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 b a))) (v (set (set (tuple21 a b))))
  (r (set (tuple21 (tuple21 b a) (set (tuple21 a b))))))
  (= (mem (set1 (tuple2 (tuple2 b1 a1) (set1 (tuple2 a1 b1)))) (t2tb2397 r)
  (relation (set1 (tuple2 a1 b1)) (tuple2 b1 a1) (t2tb37 u) (t2tb10 v)))
  (forall ((x (tuple21 b a)) (y (set (tuple21 a b))))
  (=> (mem (tuple2 (tuple2 b1 a1) (set1 (tuple2 a1 b1)))
  (Tuple2 (tuple2 b1 a1) (set1 (tuple2 a1 b1)) (t2tb38 x) (t2tb11 y))
  (t2tb2397 r)) (and (mem5 x u) (mem4 y v)))))))

(declare-fun t2tb1077 ((set (set (tuple21 (tuple21 b a) (tuple21 a
  b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 b a) (tuple21 a b)))))) (sort
  (set1 (set1 (tuple2 (tuple2 b1 a1) (tuple2 a1 b1)))) (t2tb1077 x))))

(declare-fun tb2t1077 (uni) (set (set (tuple21 (tuple21 b a) (tuple21 a
  b)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 b a) (tuple21 a b))))))
  (! (= (tb2t1077 (t2tb1077 i)) i) :pattern ((t2tb1077 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 b1 a1) (tuple2 a1 b1)))) j)
     (= (t2tb1077 (tb2t1077 j)) j)) :pattern ((t2tb1077 (tb2t1077 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 b a))) (v (set (tuple21 a b)))
  (r (set (tuple21 (tuple21 b a) (tuple21 a b)))))
  (= (mem (set1 (tuple2 (tuple2 b1 a1) (tuple2 a1 b1))) (t2tb1061 r)
  (relation (tuple2 a1 b1) (tuple2 b1 a1) (t2tb37 u) (t2tb11 v)))
  (forall ((x (tuple21 b a)) (y (tuple21 a b)))
  (=> (mem (tuple2 (tuple2 b1 a1) (tuple2 a1 b1))
  (Tuple2 (tuple2 b1 a1) (tuple2 a1 b1) (t2tb38 x) (t2tb13 y)) (t2tb1061 r))
  (and (mem5 x u) (mem3 y v)))))))

(declare-fun t2tb1078 ((set (set (tuple21 (tuple21 b a) b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 b a) b))))) (sort
  (set1 (set1 (tuple2 (tuple2 b1 a1) b1))) (t2tb1078 x))))

(declare-fun tb2t1078 (uni) (set (set (tuple21 (tuple21 b a) b))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 b a) b)))))
  (! (= (tb2t1078 (t2tb1078 i)) i) :pattern ((t2tb1078 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 b1 a1) b1))) j)
     (= (t2tb1078 (tb2t1078 j)) j)) :pattern ((t2tb1078 (tb2t1078 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 b a))) (v (set b)) (r (set (tuple21 (tuple21 b a)
  b))))
  (= (mem (set1 (tuple2 (tuple2 b1 a1) b1)) (t2tb1063 r)
  (relation b1 (tuple2 b1 a1) (t2tb37 u) (t2tb12 v)))
  (forall ((x (tuple21 b a)) (y b))
  (=> (mem (tuple2 (tuple2 b1 a1) b1)
  (Tuple2 (tuple2 b1 a1) b1 (t2tb38 x) (t2tb14 y)) (t2tb1063 r))
  (and (mem5 x u) (mem2 y v)))))))

(declare-fun t2tb1079 ((set (set (tuple21 (tuple21 b a) a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 b a) a))))) (sort
  (set1 (set1 (tuple2 (tuple2 b1 a1) a1))) (t2tb1079 x))))

(declare-fun tb2t1079 (uni) (set (set (tuple21 (tuple21 b a) a))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 b a) a)))))
  (! (= (tb2t1079 (t2tb1079 i)) i) :pattern ((t2tb1079 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 b1 a1) a1))) j)
     (= (t2tb1079 (tb2t1079 j)) j)) :pattern ((t2tb1079 (tb2t1079 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 b a))) (v (set a)) (r (set (tuple21 (tuple21 b a)
  a))))
  (= (mem (set1 (tuple2 (tuple2 b1 a1) a1)) (t2tb1065 r)
  (relation a1 (tuple2 b1 a1) (t2tb37 u) (t2tb1 v)))
  (forall ((x (tuple21 b a)) (y a))
  (=> (mem (tuple2 (tuple2 b1 a1) a1)
  (Tuple2 (tuple2 b1 a1) a1 (t2tb38 x) (t2tb2 y)) (t2tb1065 r))
  (and (mem5 x u) (mem1 y v)))))))

;; mem_relation
  (assert
  (forall ((b2 ty))
  (forall ((u (set (tuple21 b a))) (v uni) (r uni))
  (and
  (=> (mem (set1 (tuple2 (tuple2 b1 a1) b2)) r
  (relation b2 (tuple2 b1 a1) (t2tb37 u) v))
  (forall ((x (tuple21 b a)) (y uni))
  (=> (mem (tuple2 (tuple2 b1 a1) b2) (Tuple2 (tuple2 b1 a1) b2 (t2tb38 x) y)
  r) (and (mem5 x u) (mem b2 y v)))))
  (=>
  (forall ((x (tuple21 b a)) (y uni))
  (=> (sort b2 y)
  (=> (mem (tuple2 (tuple2 b1 a1) b2) (Tuple2 (tuple2 b1 a1) b2 (t2tb38 x) y)
  r) (and (mem5 x u) (mem b2 y v))))) (mem (set1 (tuple2 (tuple2 b1 a1) b2))
  r (relation b2 (tuple2 b1 a1) (t2tb37 u) v)))))))

(declare-fun t2tb4806 ((set (set (tuple21 (set (tuple21 a b)) (tuple21 a
  (tuple21 b c)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a b)) (tuple21 a (tuple21 b
  c))))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 (tuple2 b1 c1)))))
  (t2tb4806 x))))

(declare-fun tb2t4806 (uni) (set (set (tuple21 (set (tuple21 a b)) (tuple21 a
  (tuple21 b c))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a b)) (tuple21 a (tuple21 b
  c))))))) (! (= (tb2t4806 (t2tb4806 i)) i) :pattern ((t2tb4806 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 (tuple2 b1 c1)))))
     j) (= (t2tb4806 (tb2t4806 j)) j)) :pattern ((t2tb4806 (tb2t4806 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a b)))) (v (set (tuple21 a (tuple21 b c))))
  (r (set (tuple21 (set (tuple21 a b)) (tuple21 a (tuple21 b c))))))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 (tuple2 b1 c1))))
  (t2tb4526 r)
  (relation (tuple2 a1 (tuple2 b1 c1)) (set1 (tuple2 a1 b1)) (t2tb10 u)
  (t2tb261 v)))
  (forall ((x (set (tuple21 a b))) (y (tuple21 a (tuple21 b c))))
  (=> (mem (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 (tuple2 b1 c1)) (t2tb11 x)
  (t2tb260 y)) (t2tb4526 r)) (and (mem4 x u) (mem14 y v)))))))

(declare-fun t2tb4807 ((set (set (tuple21 (set (tuple21 a b)) (set (tuple21 a
  c)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a b)) (set (tuple21 a c)))))))
  (sort (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 c1)))))
  (t2tb4807 x))))

(declare-fun tb2t4807 (uni) (set (set (tuple21 (set (tuple21 a b))
  (set (tuple21 a c))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a b)) (set (tuple21 a c)))))))
  (! (= (tb2t4807 (t2tb4807 i)) i) :pattern ((t2tb4807 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 c1))))) j)
     (= (t2tb4807 (tb2t4807 j)) j)) :pattern ((t2tb4807 (tb2t4807 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a b)))) (v (set (set (tuple21 a c))))
  (r (set (tuple21 (set (tuple21 a b)) (set (tuple21 a c))))))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 c1))))
  (t2tb4528 r)
  (relation (set1 (tuple2 a1 c1)) (set1 (tuple2 a1 b1)) (t2tb10 u)
  (t2tb128 v)))
  (forall ((x (set (tuple21 a b))) (y (set (tuple21 a c))))
  (=> (mem (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 c1)))
  (Tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 c1)) (t2tb11 x) (t2tb129 y))
  (t2tb4528 r)) (and (mem4 x u) (mem11 y v)))))))

(declare-fun t2tb311 ((set (set (tuple21 (set (tuple21 a b)) (tuple21 a
  c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a b)) (tuple21 a c)))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 c1)))) (t2tb311 x))))

(declare-fun tb2t311 (uni) (set (set (tuple21 (set (tuple21 a b)) (tuple21 a
  c)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a b)) (tuple21 a c))))))
  (! (= (tb2t311 (t2tb311 i)) i) :pattern ((t2tb311 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 c1)))) j)
     (= (t2tb311 (tb2t311 j)) j)) :pattern ((t2tb311 (tb2t311 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a b)))) (v (set (tuple21 a c)))
  (r (set (tuple21 (set (tuple21 a b)) (tuple21 a c)))))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 c1))) (t2tb229 r)
  (relation (tuple2 a1 c1) (set1 (tuple2 a1 b1)) (t2tb10 u) (t2tb129 v)))
  (forall ((x (set (tuple21 a b))) (y (tuple21 a c)))
  (=> (mem (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 c1))
  (Tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 c1) (t2tb11 x) (t2tb133 y))
  (t2tb229 r)) (and (mem4 x u) (mem10 y v)))))))

(declare-fun t2tb1164 ((set (set (tuple21 (set (tuple21 a b)) (tuple21 b
  c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a b)) (tuple21 b c)))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 b1 c1)))) (t2tb1164 x))))

(declare-fun tb2t1164 (uni) (set (set (tuple21 (set (tuple21 a b)) (tuple21 b
  c)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a b)) (tuple21 b c))))))
  (! (= (tb2t1164 (t2tb1164 i)) i) :pattern ((t2tb1164 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 b1 c1)))) j)
     (= (t2tb1164 (tb2t1164 j)) j)) :pattern ((t2tb1164 (tb2t1164 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a b)))) (v (set (tuple21 b c)))
  (r (set (tuple21 (set (tuple21 a b)) (tuple21 b c)))))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 b1 c1))) (t2tb1131 r)
  (relation (tuple2 b1 c1) (set1 (tuple2 a1 b1)) (t2tb10 u) (t2tb131 v)))
  (forall ((x (set (tuple21 a b))) (y (tuple21 b c)))
  (=> (mem (tuple2 (set1 (tuple2 a1 b1)) (tuple2 b1 c1))
  (Tuple2 (set1 (tuple2 a1 b1)) (tuple2 b1 c1) (t2tb11 x) (t2tb134 y))
  (t2tb1131 r)) (and (mem4 x u) (mem8 y v)))))))

(declare-fun t2tb314 ((set (set (tuple21 (set (tuple21 a b)) c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a b)) c))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) c1))) (t2tb314 x))))

(declare-fun tb2t314 (uni) (set (set (tuple21 (set (tuple21 a b)) c))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a b)) c)))))
  (! (= (tb2t314 (t2tb314 i)) i) :pattern ((t2tb314 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) c1))) j)
     (= (t2tb314 (tb2t314 j)) j)) :pattern ((t2tb314 (tb2t314 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a b)))) (v (set c))
  (r (set (tuple21 (set (tuple21 a b)) c))))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 b1)) c1)) (t2tb234 r)
  (relation c1 (set1 (tuple2 a1 b1)) (t2tb10 u) (t2tb132 v)))
  (forall ((x (set (tuple21 a b))) (y c))
  (=> (mem (tuple2 (set1 (tuple2 a1 b1)) c1)
  (Tuple2 (set1 (tuple2 a1 b1)) c1 (t2tb11 x) (t2tb135 y)) (t2tb234 r))
  (and (mem4 x u) (mem7 y v)))))))

(declare-fun t2tb2408 ((set (set (tuple21 (set (tuple21 a b)) (tuple21 b
  a))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a b)) (tuple21 b a)))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 b1 a1)))) (t2tb2408 x))))

(declare-fun tb2t2408 (uni) (set (set (tuple21 (set (tuple21 a b)) (tuple21 b
  a)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a b)) (tuple21 b a))))))
  (! (= (tb2t2408 (t2tb2408 i)) i) :pattern ((t2tb2408 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 b1 a1)))) j)
     (= (t2tb2408 (tb2t2408 j)) j)) :pattern ((t2tb2408 (tb2t2408 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a b)))) (v (set (tuple21 b a)))
  (r (set (tuple21 (set (tuple21 a b)) (tuple21 b a)))))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 b1 a1))) (t2tb2399 r)
  (relation (tuple2 b1 a1) (set1 (tuple2 a1 b1)) (t2tb10 u) (t2tb37 v)))
  (forall ((x (set (tuple21 a b))) (y (tuple21 b a)))
  (=> (mem (tuple2 (set1 (tuple2 a1 b1)) (tuple2 b1 a1))
  (Tuple2 (set1 (tuple2 a1 b1)) (tuple2 b1 a1) (t2tb11 x) (t2tb38 y))
  (t2tb2399 r)) (and (mem4 x u) (mem5 y v)))))))

(declare-fun t2tb45 ((set (set (tuple21 (set (tuple21 a b)) (set (tuple21 a
  b)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a b)) (set (tuple21 a b)))))))
  (sort (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1)))))
  (t2tb45 x))))

(declare-fun tb2t45 (uni) (set (set (tuple21 (set (tuple21 a b))
  (set (tuple21 a b))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a b)) (set (tuple21 a b)))))))
  (! (= (tb2t45 (t2tb45 i)) i) :pattern ((t2tb45 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1))))) j)
     (= (t2tb45 (tb2t45 j)) j)) :pattern ((t2tb45 (tb2t45 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a b)))) (v (set (set (tuple21 a b))))
  (r (set (tuple21 (set (tuple21 a b)) (set (tuple21 a b))))))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1))))
  (t2tb15 r)
  (relation (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1)) (t2tb10 u)
  (t2tb10 v)))
  (forall ((x (set (tuple21 a b))) (y (set (tuple21 a b))))
  (=> (mem (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1)))
  (Tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1)) (t2tb11 x) (t2tb11 y))
  (t2tb15 r)) (and (mem4 x u) (mem4 y v)))))))

(declare-fun t2tb46 ((set (set (tuple21 (set (tuple21 a b)) (tuple21 a
  b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a b)) (tuple21 a b)))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 b1)))) (t2tb46 x))))

(declare-fun tb2t46 (uni) (set (set (tuple21 (set (tuple21 a b)) (tuple21 a
  b)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a b)) (tuple21 a b))))))
  (! (= (tb2t46 (t2tb46 i)) i) :pattern ((t2tb46 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 b1)))) j)
     (= (t2tb46 (tb2t46 j)) j)) :pattern ((t2tb46 (tb2t46 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a b)))) (v (set (tuple21 a b)))
  (r (set (tuple21 (set (tuple21 a b)) (tuple21 a b)))))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 b1))) (t2tb17 r)
  (relation (tuple2 a1 b1) (set1 (tuple2 a1 b1)) (t2tb10 u) (t2tb11 v)))
  (forall ((x (set (tuple21 a b))) (y (tuple21 a b)))
  (=> (mem (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 b1))
  (Tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 b1) (t2tb11 x) (t2tb13 y))
  (t2tb17 r)) (and (mem4 x u) (mem3 y v)))))))

(declare-fun t2tb47 ((set (set (tuple21 (set (tuple21 a b)) b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a b)) b))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) b1))) (t2tb47 x))))

(declare-fun tb2t47 (uni) (set (set (tuple21 (set (tuple21 a b)) b))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a b)) b)))))
  (! (= (tb2t47 (t2tb47 i)) i) :pattern ((t2tb47 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) b1))) j)
     (= (t2tb47 (tb2t47 j)) j)) :pattern ((t2tb47 (tb2t47 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a b)))) (v (set b))
  (r (set (tuple21 (set (tuple21 a b)) b))))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 b1)) b1)) (t2tb19 r)
  (relation b1 (set1 (tuple2 a1 b1)) (t2tb10 u) (t2tb12 v)))
  (forall ((x (set (tuple21 a b))) (y b))
  (=> (mem (tuple2 (set1 (tuple2 a1 b1)) b1)
  (Tuple2 (set1 (tuple2 a1 b1)) b1 (t2tb11 x) (t2tb14 y)) (t2tb19 r))
  (and (mem4 x u) (mem2 y v)))))))

(declare-fun t2tb48 ((set (set (tuple21 (set (tuple21 a b)) a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a b)) a))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) a1))) (t2tb48 x))))

(declare-fun tb2t48 (uni) (set (set (tuple21 (set (tuple21 a b)) a))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a b)) a)))))
  (! (= (tb2t48 (t2tb48 i)) i) :pattern ((t2tb48 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) a1))) j)
     (= (t2tb48 (tb2t48 j)) j)) :pattern ((t2tb48 (tb2t48 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a b)))) (v (set a))
  (r (set (tuple21 (set (tuple21 a b)) a))))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 b1)) a1)) (t2tb22 r)
  (relation a1 (set1 (tuple2 a1 b1)) (t2tb10 u) (t2tb1 v)))
  (forall ((x (set (tuple21 a b))) (y a))
  (=> (mem (tuple2 (set1 (tuple2 a1 b1)) a1)
  (Tuple2 (set1 (tuple2 a1 b1)) a1 (t2tb11 x) (t2tb2 y)) (t2tb22 r))
  (and (mem4 x u) (mem1 y v)))))))

;; mem_relation
  (assert
  (forall ((b2 ty))
  (forall ((u (set (set (tuple21 a b)))) (v uni) (r uni))
  (and
  (=> (mem (set1 (tuple2 (set1 (tuple2 a1 b1)) b2)) r
  (relation b2 (set1 (tuple2 a1 b1)) (t2tb10 u) v))
  (forall ((x (set (tuple21 a b))) (y uni))
  (=> (mem (tuple2 (set1 (tuple2 a1 b1)) b2)
  (Tuple2 (set1 (tuple2 a1 b1)) b2 (t2tb11 x) y) r)
  (and (mem4 x u) (mem b2 y v)))))
  (=>
  (forall ((x (set (tuple21 a b))) (y uni))
  (=> (sort b2 y)
  (=> (mem (tuple2 (set1 (tuple2 a1 b1)) b2)
  (Tuple2 (set1 (tuple2 a1 b1)) b2 (t2tb11 x) y) r)
  (and (mem4 x u) (mem b2 y v))))) (mem
  (set1 (tuple2 (set1 (tuple2 a1 b1)) b2)) r
  (relation b2 (set1 (tuple2 a1 b1)) (t2tb10 u) v)))))))

(declare-fun t2tb4815 ((set (set (tuple21 (tuple21 a b) (tuple21 a (tuple21 b
  c)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a b) (tuple21 a (tuple21 b c)))))))
  (sort (set1 (set1 (tuple2 (tuple2 a1 b1) (tuple2 a1 (tuple2 b1 c1)))))
  (t2tb4815 x))))

(declare-fun tb2t4815 (uni) (set (set (tuple21 (tuple21 a b) (tuple21 a
  (tuple21 b c))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a b) (tuple21 a (tuple21 b c)))))))
  (! (= (tb2t4815 (t2tb4815 i)) i) :pattern ((t2tb4815 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (tuple2 a1 b1) (tuple2 a1 (tuple2 b1 c1))))) j)
     (= (t2tb4815 (tb2t4815 j)) j)) :pattern ((t2tb4815 (tb2t4815 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a b))) (v (set (tuple21 a (tuple21 b c))))
  (r (set (tuple21 (tuple21 a b) (tuple21 a (tuple21 b c))))))
  (= (mem (set1 (tuple2 (tuple2 a1 b1) (tuple2 a1 (tuple2 b1 c1))))
  (t2tb4544 r)
  (relation (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 b1) (t2tb11 u) (t2tb261 v)))
  (forall ((x (tuple21 a b)) (y (tuple21 a (tuple21 b c))))
  (=> (mem (tuple2 (tuple2 a1 b1) (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 (tuple2 a1 b1) (tuple2 a1 (tuple2 b1 c1)) (t2tb13 x) (t2tb260 y))
  (t2tb4544 r)) (and (mem3 x u) (mem14 y v)))))))

(declare-fun t2tb4816 ((set (set (tuple21 (tuple21 a b) (set (tuple21 a
  c)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a b) (set (tuple21 a c))))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 c1))))) (t2tb4816 x))))

(declare-fun tb2t4816 (uni) (set (set (tuple21 (tuple21 a b) (set (tuple21 a
  c))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a b) (set (tuple21 a c)))))))
  (! (= (tb2t4816 (t2tb4816 i)) i) :pattern ((t2tb4816 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 c1))))) j)
     (= (t2tb4816 (tb2t4816 j)) j)) :pattern ((t2tb4816 (tb2t4816 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a b))) (v (set (set (tuple21 a c))))
  (r (set (tuple21 (tuple21 a b) (set (tuple21 a c))))))
  (= (mem (set1 (tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 c1)))) (t2tb4546 r)
  (relation (set1 (tuple2 a1 c1)) (tuple2 a1 b1) (t2tb11 u) (t2tb128 v)))
  (forall ((x (tuple21 a b)) (y (set (tuple21 a c))))
  (=> (mem (tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 c1)))
  (Tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 c1)) (t2tb13 x) (t2tb129 y))
  (t2tb4546 r)) (and (mem3 x u) (mem11 y v)))))))

(declare-fun t2tb316 ((set (set (tuple21 (tuple21 a b) (tuple21 a c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a b) (tuple21 a c)))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)))) (t2tb316 x))))

(declare-fun tb2t316 (uni) (set (set (tuple21 (tuple21 a b) (tuple21 a c)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a b) (tuple21 a c))))))
  (! (= (tb2t316 (t2tb316 i)) i) :pattern ((t2tb316 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)))) j)
     (= (t2tb316 (tb2t316 j)) j)) :pattern ((t2tb316 (tb2t316 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a b))) (v (set (tuple21 a c)))
  (r (set (tuple21 (tuple21 a b) (tuple21 a c)))))
  (= (mem (set1 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1))) (t2tb238 r)
  (relation (tuple2 a1 c1) (tuple2 a1 b1) (t2tb11 u) (t2tb129 v)))
  (forall ((x (tuple21 a b)) (y (tuple21 a c)))
  (=> (mem (tuple2 (tuple2 a1 b1) (tuple2 a1 c1))
  (Tuple2 (tuple2 a1 b1) (tuple2 a1 c1) (t2tb13 x) (t2tb133 y)) (t2tb238 r))
  (and (mem3 x u) (mem10 y v)))))))

(declare-fun t2tb1166 ((set (set (tuple21 (tuple21 a b) (tuple21 b
  c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a b) (tuple21 b c)))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 b1) (tuple2 b1 c1)))) (t2tb1166 x))))

(declare-fun tb2t1166 (uni) (set (set (tuple21 (tuple21 a b) (tuple21 b
  c)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a b) (tuple21 b c))))))
  (! (= (tb2t1166 (t2tb1166 i)) i) :pattern ((t2tb1166 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 b1) (tuple2 b1 c1)))) j)
     (= (t2tb1166 (tb2t1166 j)) j)) :pattern ((t2tb1166 (tb2t1166 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a b))) (v (set (tuple21 b c)))
  (r (set (tuple21 (tuple21 a b) (tuple21 b c)))))
  (= (mem (set1 (tuple2 (tuple2 a1 b1) (tuple2 b1 c1))) (t2tb1135 r)
  (relation (tuple2 b1 c1) (tuple2 a1 b1) (t2tb11 u) (t2tb131 v)))
  (forall ((x (tuple21 a b)) (y (tuple21 b c)))
  (=> (mem (tuple2 (tuple2 a1 b1) (tuple2 b1 c1))
  (Tuple2 (tuple2 a1 b1) (tuple2 b1 c1) (t2tb13 x) (t2tb134 y)) (t2tb1135 r))
  (and (mem3 x u) (mem8 y v)))))))

(declare-fun t2tb319 ((set (set (tuple21 (tuple21 a b) c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a b) c))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 b1) c1))) (t2tb319 x))))

(declare-fun tb2t319 (uni) (set (set (tuple21 (tuple21 a b) c))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a b) c)))))
  (! (= (tb2t319 (t2tb319 i)) i) :pattern ((t2tb319 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 b1) c1))) j)
     (= (t2tb319 (tb2t319 j)) j)) :pattern ((t2tb319 (tb2t319 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a b))) (v (set c)) (r (set (tuple21 (tuple21 a b)
  c))))
  (= (mem (set1 (tuple2 (tuple2 a1 b1) c1)) (t2tb245 r)
  (relation c1 (tuple2 a1 b1) (t2tb11 u) (t2tb132 v)))
  (forall ((x (tuple21 a b)) (y c))
  (=> (mem (tuple2 (tuple2 a1 b1) c1)
  (Tuple2 (tuple2 a1 b1) c1 (t2tb13 x) (t2tb135 y)) (t2tb245 r))
  (and (mem3 x u) (mem7 y v)))))))

(declare-fun t2tb1081 ((set (set (tuple21 (tuple21 a b) (tuple21 b
  a))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a b) (tuple21 b a)))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 b1) (tuple2 b1 a1)))) (t2tb1081 x))))

(declare-fun tb2t1081 (uni) (set (set (tuple21 (tuple21 a b) (tuple21 b
  a)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a b) (tuple21 b a))))))
  (! (= (tb2t1081 (t2tb1081 i)) i) :pattern ((t2tb1081 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 b1) (tuple2 b1 a1)))) j)
     (= (t2tb1081 (tb2t1081 j)) j)) :pattern ((t2tb1081 (tb2t1081 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a b))) (v (set (tuple21 b a)))
  (r (set (tuple21 (tuple21 a b) (tuple21 b a)))))
  (= (mem (set1 (tuple2 (tuple2 a1 b1) (tuple2 b1 a1))) (t2tb1069 r)
  (relation (tuple2 b1 a1) (tuple2 a1 b1) (t2tb11 u) (t2tb37 v)))
  (forall ((x (tuple21 a b)) (y (tuple21 b a)))
  (=> (mem (tuple2 (tuple2 a1 b1) (tuple2 b1 a1))
  (Tuple2 (tuple2 a1 b1) (tuple2 b1 a1) (t2tb13 x) (t2tb38 y)) (t2tb1069 r))
  (and (mem3 x u) (mem5 y v)))))))

(declare-fun t2tb49 ((set (set (tuple21 (tuple21 a b) (set (tuple21 a
  b)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a b) (set (tuple21 a b))))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 b1))))) (t2tb49 x))))

(declare-fun tb2t49 (uni) (set (set (tuple21 (tuple21 a b) (set (tuple21 a
  b))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a b) (set (tuple21 a b)))))))
  (! (= (tb2t49 (t2tb49 i)) i) :pattern ((t2tb49 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 b1))))) j)
     (= (t2tb49 (tb2t49 j)) j)) :pattern ((t2tb49 (tb2t49 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a b))) (v (set (set (tuple21 a b))))
  (r (set (tuple21 (tuple21 a b) (set (tuple21 a b))))))
  (= (mem (set1 (tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 b1)))) (t2tb23 r)
  (relation (set1 (tuple2 a1 b1)) (tuple2 a1 b1) (t2tb11 u) (t2tb10 v)))
  (forall ((x (tuple21 a b)) (y (set (tuple21 a b))))
  (=> (mem (tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 b1)))
  (Tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 b1)) (t2tb13 x) (t2tb11 y))
  (t2tb23 r)) (and (mem3 x u) (mem4 y v)))))))

(declare-fun t2tb50 ((set (set (tuple21 (tuple21 a b) (tuple21 a b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a b) (tuple21 a b)))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 b1) (tuple2 a1 b1)))) (t2tb50 x))))

(declare-fun tb2t50 (uni) (set (set (tuple21 (tuple21 a b) (tuple21 a b)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a b) (tuple21 a b))))))
  (! (= (tb2t50 (t2tb50 i)) i) :pattern ((t2tb50 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 b1) (tuple2 a1 b1)))) j)
     (= (t2tb50 (tb2t50 j)) j)) :pattern ((t2tb50 (tb2t50 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a b))) (v (set (tuple21 a b)))
  (r (set (tuple21 (tuple21 a b) (tuple21 a b)))))
  (= (mem (set1 (tuple2 (tuple2 a1 b1) (tuple2 a1 b1))) (t2tb25 r)
  (relation (tuple2 a1 b1) (tuple2 a1 b1) (t2tb11 u) (t2tb11 v)))
  (forall ((x (tuple21 a b)) (y (tuple21 a b)))
  (=> (mem (tuple2 (tuple2 a1 b1) (tuple2 a1 b1))
  (Tuple2 (tuple2 a1 b1) (tuple2 a1 b1) (t2tb13 x) (t2tb13 y)) (t2tb25 r))
  (and (mem3 x u) (mem3 y v)))))))

(declare-fun t2tb51 ((set (set (tuple21 (tuple21 a b) b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a b) b))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 b1) b1))) (t2tb51 x))))

(declare-fun tb2t51 (uni) (set (set (tuple21 (tuple21 a b) b))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a b) b)))))
  (! (= (tb2t51 (t2tb51 i)) i) :pattern ((t2tb51 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 b1) b1))) j)
     (= (t2tb51 (tb2t51 j)) j)) :pattern ((t2tb51 (tb2t51 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a b))) (v (set b)) (r (set (tuple21 (tuple21 a b)
  b))))
  (= (mem (set1 (tuple2 (tuple2 a1 b1) b1)) (t2tb27 r)
  (relation b1 (tuple2 a1 b1) (t2tb11 u) (t2tb12 v)))
  (forall ((x (tuple21 a b)) (y b))
  (=> (mem (tuple2 (tuple2 a1 b1) b1)
  (Tuple2 (tuple2 a1 b1) b1 (t2tb13 x) (t2tb14 y)) (t2tb27 r))
  (and (mem3 x u) (mem2 y v)))))))

(declare-fun t2tb52 ((set (set (tuple21 (tuple21 a b) a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a b) a))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 b1) a1))) (t2tb52 x))))

(declare-fun tb2t52 (uni) (set (set (tuple21 (tuple21 a b) a))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a b) a)))))
  (! (= (tb2t52 (t2tb52 i)) i) :pattern ((t2tb52 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 b1) a1))) j)
     (= (t2tb52 (tb2t52 j)) j)) :pattern ((t2tb52 (tb2t52 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a b))) (v (set a)) (r (set (tuple21 (tuple21 a b)
  a))))
  (= (mem (set1 (tuple2 (tuple2 a1 b1) a1)) (t2tb29 r)
  (relation a1 (tuple2 a1 b1) (t2tb11 u) (t2tb1 v)))
  (forall ((x (tuple21 a b)) (y a))
  (=> (mem (tuple2 (tuple2 a1 b1) a1)
  (Tuple2 (tuple2 a1 b1) a1 (t2tb13 x) (t2tb2 y)) (t2tb29 r))
  (and (mem3 x u) (mem1 y v)))))))

;; mem_relation
  (assert
  (forall ((b2 ty))
  (forall ((u (set (tuple21 a b))) (v uni) (r uni))
  (and
  (=> (mem (set1 (tuple2 (tuple2 a1 b1) b2)) r
  (relation b2 (tuple2 a1 b1) (t2tb11 u) v))
  (forall ((x (tuple21 a b)) (y uni))
  (=> (mem (tuple2 (tuple2 a1 b1) b2) (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) y)
  r) (and (mem3 x u) (mem b2 y v)))))
  (=>
  (forall ((x (tuple21 a b)) (y uni))
  (=> (sort b2 y)
  (=> (mem (tuple2 (tuple2 a1 b1) b2) (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) y)
  r) (and (mem3 x u) (mem b2 y v))))) (mem (set1 (tuple2 (tuple2 a1 b1) b2))
  r (relation b2 (tuple2 a1 b1) (t2tb11 u) v)))))))

(declare-fun t2tb4824 ((set (set (tuple21 b (tuple21 a (tuple21 b
  c)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 b (tuple21 a (tuple21 b c))))))) (sort
  (set1 (set1 (tuple2 b1 (tuple2 a1 (tuple2 b1 c1))))) (t2tb4824 x))))

(declare-fun tb2t4824 (uni) (set (set (tuple21 b (tuple21 a (tuple21 b
  c))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 b (tuple21 a (tuple21 b c)))))))
  (! (= (tb2t4824 (t2tb4824 i)) i) :pattern ((t2tb4824 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 b1 (tuple2 a1 (tuple2 b1 c1))))) j)
     (= (t2tb4824 (tb2t4824 j)) j)) :pattern ((t2tb4824 (tb2t4824 j))) )))

;; mem_relation
  (assert
  (forall ((u (set b)) (v (set (tuple21 a (tuple21 b c)))) (r (set (tuple21 b
  (tuple21 a (tuple21 b c))))))
  (= (mem (set1 (tuple2 b1 (tuple2 a1 (tuple2 b1 c1)))) (t2tb4561 r)
  (relation (tuple2 a1 (tuple2 b1 c1)) b1 (t2tb12 u) (t2tb261 v)))
  (forall ((x b) (y (tuple21 a (tuple21 b c))))
  (=> (mem (tuple2 b1 (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 b1 (tuple2 a1 (tuple2 b1 c1)) (t2tb14 x) (t2tb260 y)) (t2tb4561 r))
  (and (mem2 x u) (mem14 y v)))))))

(declare-fun t2tb4825 ((set (set (tuple21 b (set (tuple21 a c)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 b (set (tuple21 a c))))))) (sort
  (set1 (set1 (tuple2 b1 (set1 (tuple2 a1 c1))))) (t2tb4825 x))))

(declare-fun tb2t4825 (uni) (set (set (tuple21 b (set (tuple21 a c))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 b (set (tuple21 a c)))))))
  (! (= (tb2t4825 (t2tb4825 i)) i) :pattern ((t2tb4825 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 b1 (set1 (tuple2 a1 c1))))) j)
     (= (t2tb4825 (tb2t4825 j)) j)) :pattern ((t2tb4825 (tb2t4825 j))) )))

;; mem_relation
  (assert
  (forall ((u (set b)) (v (set (set (tuple21 a c)))) (r (set (tuple21 b
  (set (tuple21 a c))))))
  (= (mem (set1 (tuple2 b1 (set1 (tuple2 a1 c1)))) (t2tb4564 r)
  (relation (set1 (tuple2 a1 c1)) b1 (t2tb12 u) (t2tb128 v)))
  (forall ((x b) (y (set (tuple21 a c))))
  (=> (mem (tuple2 b1 (set1 (tuple2 a1 c1)))
  (Tuple2 b1 (set1 (tuple2 a1 c1)) (t2tb14 x) (t2tb129 y)) (t2tb4564 r))
  (and (mem2 x u) (mem11 y v)))))))

(declare-fun t2tb321 ((set (set (tuple21 b (tuple21 a c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 b (tuple21 a c)))))) (sort
  (set1 (set1 (tuple2 b1 (tuple2 a1 c1)))) (t2tb321 x))))

(declare-fun tb2t321 (uni) (set (set (tuple21 b (tuple21 a c)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 b (tuple21 a c))))))
  (! (= (tb2t321 (t2tb321 i)) i) :pattern ((t2tb321 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 b1 (tuple2 a1 c1)))) j)
     (= (t2tb321 (tb2t321 j)) j)) :pattern ((t2tb321 (tb2t321 j))) )))

;; mem_relation
  (assert
  (forall ((u (set b)) (v (set (tuple21 a c))) (r (set (tuple21 b (tuple21 a
  c)))))
  (= (mem (set1 (tuple2 b1 (tuple2 a1 c1))) (t2tb248 r)
  (relation (tuple2 a1 c1) b1 (t2tb12 u) (t2tb129 v)))
  (forall ((x b) (y (tuple21 a c)))
  (=> (mem (tuple2 b1 (tuple2 a1 c1))
  (Tuple2 b1 (tuple2 a1 c1) (t2tb14 x) (t2tb133 y)) (t2tb248 r))
  (and (mem2 x u) (mem10 y v)))))))

(declare-fun t2tb1168 ((set (set (tuple21 b (tuple21 b c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 b (tuple21 b c)))))) (sort
  (set1 (set1 (tuple2 b1 (tuple2 b1 c1)))) (t2tb1168 x))))

(declare-fun tb2t1168 (uni) (set (set (tuple21 b (tuple21 b c)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 b (tuple21 b c))))))
  (! (= (tb2t1168 (t2tb1168 i)) i) :pattern ((t2tb1168 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 b1 (tuple2 b1 c1)))) j)
     (= (t2tb1168 (tb2t1168 j)) j)) :pattern ((t2tb1168 (tb2t1168 j))) )))

;; mem_relation
  (assert
  (forall ((u (set b)) (v (set (tuple21 b c))) (r (set (tuple21 b (tuple21 b
  c)))))
  (= (mem (set1 (tuple2 b1 (tuple2 b1 c1))) (t2tb1139 r)
  (relation (tuple2 b1 c1) b1 (t2tb12 u) (t2tb131 v)))
  (forall ((x b) (y (tuple21 b c)))
  (=> (mem (tuple2 b1 (tuple2 b1 c1))
  (Tuple2 b1 (tuple2 b1 c1) (t2tb14 x) (t2tb134 y)) (t2tb1139 r))
  (and (mem2 x u) (mem8 y v)))))))

;; mem_relation
  (assert
  (forall ((u (set b)) (v (set c)) (r (set (tuple21 b c))))
  (= (mem (set1 (tuple2 b1 c1)) (t2tb131 r)
  (relation c1 b1 (t2tb12 u) (t2tb132 v)))
  (forall ((x b) (y c))
  (=> (mem8 (tb2t134 (Tuple2 b1 c1 (t2tb14 x) (t2tb135 y))) r)
  (and (mem2 x u) (mem7 y v)))))))

(declare-fun t2tb1082 ((set (set (tuple21 b (tuple21 b a))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 b (tuple21 b a)))))) (sort
  (set1 (set1 (tuple2 b1 (tuple2 b1 a1)))) (t2tb1082 x))))

(declare-fun tb2t1082 (uni) (set (set (tuple21 b (tuple21 b a)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 b (tuple21 b a))))))
  (! (= (tb2t1082 (t2tb1082 i)) i) :pattern ((t2tb1082 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 b1 (tuple2 b1 a1)))) j)
     (= (t2tb1082 (tb2t1082 j)) j)) :pattern ((t2tb1082 (tb2t1082 j))) )))

;; mem_relation
  (assert
  (forall ((u (set b)) (v (set (tuple21 b a))) (r (set (tuple21 b (tuple21 b
  a)))))
  (= (mem (set1 (tuple2 b1 (tuple2 b1 a1))) (t2tb1071 r)
  (relation (tuple2 b1 a1) b1 (t2tb12 u) (t2tb37 v)))
  (forall ((x b) (y (tuple21 b a)))
  (=> (mem (tuple2 b1 (tuple2 b1 a1))
  (Tuple2 b1 (tuple2 b1 a1) (t2tb14 x) (t2tb38 y)) (t2tb1071 r))
  (and (mem2 x u) (mem5 y v)))))))

(declare-fun t2tb53 ((set (set (tuple21 b (set (tuple21 a b)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 b (set (tuple21 a b))))))) (sort
  (set1 (set1 (tuple2 b1 (set1 (tuple2 a1 b1))))) (t2tb53 x))))

(declare-fun tb2t53 (uni) (set (set (tuple21 b (set (tuple21 a b))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 b (set (tuple21 a b)))))))
  (! (= (tb2t53 (t2tb53 i)) i) :pattern ((t2tb53 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 b1 (set1 (tuple2 a1 b1))))) j)
     (= (t2tb53 (tb2t53 j)) j)) :pattern ((t2tb53 (tb2t53 j))) )))

;; mem_relation
  (assert
  (forall ((u (set b)) (v (set (set (tuple21 a b)))) (r (set (tuple21 b
  (set (tuple21 a b))))))
  (= (mem (set1 (tuple2 b1 (set1 (tuple2 a1 b1)))) (t2tb31 r)
  (relation (set1 (tuple2 a1 b1)) b1 (t2tb12 u) (t2tb10 v)))
  (forall ((x b) (y (set (tuple21 a b))))
  (=> (mem (tuple2 b1 (set1 (tuple2 a1 b1)))
  (Tuple2 b1 (set1 (tuple2 a1 b1)) (t2tb14 x) (t2tb11 y)) (t2tb31 r))
  (and (mem2 x u) (mem4 y v)))))))

(declare-fun t2tb54 ((set (set (tuple21 b (tuple21 a b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 b (tuple21 a b)))))) (sort
  (set1 (set1 (tuple2 b1 (tuple2 a1 b1)))) (t2tb54 x))))

(declare-fun tb2t54 (uni) (set (set (tuple21 b (tuple21 a b)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 b (tuple21 a b))))))
  (! (= (tb2t54 (t2tb54 i)) i) :pattern ((t2tb54 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 b1 (tuple2 a1 b1)))) j)
     (= (t2tb54 (tb2t54 j)) j)) :pattern ((t2tb54 (tb2t54 j))) )))

;; mem_relation
  (assert
  (forall ((u (set b)) (v (set (tuple21 a b))) (r (set (tuple21 b (tuple21 a
  b)))))
  (= (mem (set1 (tuple2 b1 (tuple2 a1 b1))) (t2tb34 r)
  (relation (tuple2 a1 b1) b1 (t2tb12 u) (t2tb11 v)))
  (forall ((x b) (y (tuple21 a b)))
  (=> (mem (tuple2 b1 (tuple2 a1 b1))
  (Tuple2 b1 (tuple2 a1 b1) (t2tb14 x) (t2tb13 y)) (t2tb34 r))
  (and (mem2 x u) (mem3 y v)))))))

(declare-fun t2tb55 ((set (set (tuple21 b b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 b b))))) (sort (set1 (set1 (tuple2 b1 b1)))
  (t2tb55 x))))

(declare-fun tb2t55 (uni) (set (set (tuple21 b b))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 b b)))))
  (! (= (tb2t55 (t2tb55 i)) i) :pattern ((t2tb55 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 b1 b1))) j) (= (t2tb55 (tb2t55 j)) j)) :pattern (
  (t2tb55 (tb2t55 j))) )))

;; mem_relation
  (assert
  (forall ((u (set b)) (v (set b)) (r (set (tuple21 b b))))
  (= (mem (set1 (tuple2 b1 b1)) (t2tb35 r)
  (relation b1 b1 (t2tb12 u) (t2tb12 v)))
  (forall ((x b) (y b))
  (=> (mem (tuple2 b1 b1) (Tuple2 b1 b1 (t2tb14 x) (t2tb14 y)) (t2tb35 r))
  (and (mem2 x u) (mem2 y v)))))))

;; mem_relation
  (assert
  (forall ((u (set b)) (v (set a)) (r (set (tuple21 b a))))
  (= (mem (set1 (tuple2 b1 a1)) (t2tb37 r)
  (relation a1 b1 (t2tb12 u) (t2tb1 v)))
  (forall ((x b) (y a))
  (=> (mem5 (tb2t38 (Tuple2 b1 a1 (t2tb14 x) (t2tb2 y))) r)
  (and (mem2 x u) (mem1 y v)))))))

;; mem_relation
  (assert
  (forall ((b2 ty))
  (forall ((u (set b)) (v uni) (r uni))
  (and
  (=> (mem (set1 (tuple2 b1 b2)) r (relation b2 b1 (t2tb12 u) v))
  (forall ((x b) (y uni))
  (=> (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) y) r)
  (and (mem2 x u) (mem b2 y v)))))
  (=>
  (forall ((x b) (y uni))
  (=> (sort b2 y)
  (=> (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) y) r)
  (and (mem2 x u) (mem b2 y v))))) (mem (set1 (tuple2 b1 b2)) r
  (relation b2 b1 (t2tb12 u) v)))))))

(declare-fun t2tb4833 ((set (set (tuple21 a (tuple21 a (tuple21 b
  c)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 a (tuple21 a (tuple21 b c))))))) (sort
  (set1 (set1 (tuple2 a1 (tuple2 a1 (tuple2 b1 c1))))) (t2tb4833 x))))

(declare-fun tb2t4833 (uni) (set (set (tuple21 a (tuple21 a (tuple21 b
  c))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 a (tuple21 a (tuple21 b c)))))))
  (! (= (tb2t4833 (t2tb4833 i)) i) :pattern ((t2tb4833 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 a1 (tuple2 a1 (tuple2 b1 c1))))) j)
     (= (t2tb4833 (tb2t4833 j)) j)) :pattern ((t2tb4833 (tb2t4833 j))) )))

;; mem_relation
  (assert
  (forall ((u (set a)) (v (set (tuple21 a (tuple21 b c)))) (r (set (tuple21 a
  (tuple21 a (tuple21 b c))))))
  (= (mem (set1 (tuple2 a1 (tuple2 a1 (tuple2 b1 c1)))) (t2tb4578 r)
  (relation (tuple2 a1 (tuple2 b1 c1)) a1 (t2tb1 u) (t2tb261 v)))
  (forall ((x a) (y (tuple21 a (tuple21 b c))))
  (=> (mem (tuple2 a1 (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 a1 (tuple2 a1 (tuple2 b1 c1)) (t2tb2 x) (t2tb260 y)) (t2tb4578 r))
  (and (mem1 x u) (mem14 y v)))))))

(declare-fun t2tb4834 ((set (set (tuple21 a (set (tuple21 a c)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 a (set (tuple21 a c))))))) (sort
  (set1 (set1 (tuple2 a1 (set1 (tuple2 a1 c1))))) (t2tb4834 x))))

(declare-fun tb2t4834 (uni) (set (set (tuple21 a (set (tuple21 a c))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 a (set (tuple21 a c)))))))
  (! (= (tb2t4834 (t2tb4834 i)) i) :pattern ((t2tb4834 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 a1 (set1 (tuple2 a1 c1))))) j)
     (= (t2tb4834 (tb2t4834 j)) j)) :pattern ((t2tb4834 (tb2t4834 j))) )))

;; mem_relation
  (assert
  (forall ((u (set a)) (v (set (set (tuple21 a c)))) (r (set (tuple21 a
  (set (tuple21 a c))))))
  (= (mem (set1 (tuple2 a1 (set1 (tuple2 a1 c1)))) (t2tb4580 r)
  (relation (set1 (tuple2 a1 c1)) a1 (t2tb1 u) (t2tb128 v)))
  (forall ((x a) (y (set (tuple21 a c))))
  (=> (mem (tuple2 a1 (set1 (tuple2 a1 c1)))
  (Tuple2 a1 (set1 (tuple2 a1 c1)) (t2tb2 x) (t2tb129 y)) (t2tb4580 r))
  (and (mem1 x u) (mem11 y v)))))))

(declare-fun t2tb325 ((set (set (tuple21 a (tuple21 a c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 a (tuple21 a c)))))) (sort
  (set1 (set1 (tuple2 a1 (tuple2 a1 c1)))) (t2tb325 x))))

(declare-fun tb2t325 (uni) (set (set (tuple21 a (tuple21 a c)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 a (tuple21 a c))))))
  (! (= (tb2t325 (t2tb325 i)) i) :pattern ((t2tb325 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 a1 (tuple2 a1 c1)))) j)
     (= (t2tb325 (tb2t325 j)) j)) :pattern ((t2tb325 (tb2t325 j))) )))

;; mem_relation
  (assert
  (forall ((u (set a)) (v (set (tuple21 a c))) (r (set (tuple21 a (tuple21 a
  c)))))
  (= (mem (set1 (tuple2 a1 (tuple2 a1 c1))) (t2tb256 r)
  (relation (tuple2 a1 c1) a1 (t2tb1 u) (t2tb129 v)))
  (forall ((x a) (y (tuple21 a c)))
  (=> (mem (tuple2 a1 (tuple2 a1 c1))
  (Tuple2 a1 (tuple2 a1 c1) (t2tb2 x) (t2tb133 y)) (t2tb256 r))
  (and (mem1 x u) (mem10 y v)))))))

;; mem_relation
  (assert
  (forall ((u (set a)) (v (set (tuple21 b c))) (r (set (tuple21 a (tuple21 b
  c)))))
  (= (mem (set1 (tuple2 a1 (tuple2 b1 c1))) (t2tb261 r)
  (relation (tuple2 b1 c1) a1 (t2tb1 u) (t2tb131 v)))
  (forall ((x a) (y (tuple21 b c)))
  (=> (mem14 (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 y))) r)
  (and (mem1 x u) (mem8 y v)))))))

;; mem_relation
  (assert
  (forall ((u (set a)) (v (set c)) (r (set (tuple21 a c))))
  (= (mem11 r (relation3 u v))
  (forall ((x a) (y c))
  (=> (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y))) r)
  (and (mem1 x u) (mem7 y v)))))))

(declare-fun t2tb1083 ((set (set (tuple21 a (tuple21 b a))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 a (tuple21 b a)))))) (sort
  (set1 (set1 (tuple2 a1 (tuple2 b1 a1)))) (t2tb1083 x))))

(declare-fun tb2t1083 (uni) (set (set (tuple21 a (tuple21 b a)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 a (tuple21 b a))))))
  (! (= (tb2t1083 (t2tb1083 i)) i) :pattern ((t2tb1083 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 a1 (tuple2 b1 a1)))) j)
     (= (t2tb1083 (tb2t1083 j)) j)) :pattern ((t2tb1083 (tb2t1083 j))) )))

;; mem_relation
  (assert
  (forall ((u (set a)) (v (set (tuple21 b a))) (r (set (tuple21 a (tuple21 b
  a)))))
  (= (mem (set1 (tuple2 a1 (tuple2 b1 a1))) (t2tb1073 r)
  (relation (tuple2 b1 a1) a1 (t2tb1 u) (t2tb37 v)))
  (forall ((x a) (y (tuple21 b a)))
  (=> (mem (tuple2 a1 (tuple2 b1 a1))
  (Tuple2 a1 (tuple2 b1 a1) (t2tb2 x) (t2tb38 y)) (t2tb1073 r))
  (and (mem1 x u) (mem5 y v)))))))

(declare-fun t2tb57 ((set (set (tuple21 a (set (tuple21 a b)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 a (set (tuple21 a b))))))) (sort
  (set1 (set1 (tuple2 a1 (set1 (tuple2 a1 b1))))) (t2tb57 x))))

(declare-fun tb2t57 (uni) (set (set (tuple21 a (set (tuple21 a b))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 a (set (tuple21 a b)))))))
  (! (= (tb2t57 (t2tb57 i)) i) :pattern ((t2tb57 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 a1 (set1 (tuple2 a1 b1))))) j)
     (= (t2tb57 (tb2t57 j)) j)) :pattern ((t2tb57 (tb2t57 j))) )))

;; mem_relation
  (assert
  (forall ((u (set a)) (v (set (set (tuple21 a b)))) (r (set (tuple21 a
  (set (tuple21 a b))))))
  (= (mem (set1 (tuple2 a1 (set1 (tuple2 a1 b1)))) (t2tb39 r)
  (relation (set1 (tuple2 a1 b1)) a1 (t2tb1 u) (t2tb10 v)))
  (forall ((x a) (y (set (tuple21 a b))))
  (=> (mem (tuple2 a1 (set1 (tuple2 a1 b1)))
  (Tuple2 a1 (set1 (tuple2 a1 b1)) (t2tb2 x) (t2tb11 y)) (t2tb39 r))
  (and (mem1 x u) (mem4 y v)))))))

(declare-fun t2tb58 ((set (set (tuple21 a (tuple21 a b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 a (tuple21 a b)))))) (sort
  (set1 (set1 (tuple2 a1 (tuple2 a1 b1)))) (t2tb58 x))))

(declare-fun tb2t58 (uni) (set (set (tuple21 a (tuple21 a b)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 a (tuple21 a b))))))
  (! (= (tb2t58 (t2tb58 i)) i) :pattern ((t2tb58 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 a1 (tuple2 a1 b1)))) j)
     (= (t2tb58 (tb2t58 j)) j)) :pattern ((t2tb58 (tb2t58 j))) )))

;; mem_relation
  (assert
  (forall ((u (set a)) (v (set (tuple21 a b))) (r (set (tuple21 a (tuple21 a
  b)))))
  (= (mem (set1 (tuple2 a1 (tuple2 a1 b1))) (t2tb41 r)
  (relation (tuple2 a1 b1) a1 (t2tb1 u) (t2tb11 v)))
  (forall ((x a) (y (tuple21 a b)))
  (=> (mem (tuple2 a1 (tuple2 a1 b1))
  (Tuple2 a1 (tuple2 a1 b1) (t2tb2 x) (t2tb13 y)) (t2tb41 r))
  (and (mem1 x u) (mem3 y v)))))))

;; mem_relation
  (assert
  (forall ((u (set a)) (v (set b)) (r (set (tuple21 a b))))
  (= (mem4 r (relation1 u v))
  (forall ((x a) (y b))
  (=> (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y))) r)
  (and (mem1 x u) (mem2 y v)))))))

(declare-fun t2tb3 ((set (set (tuple21 a a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 a a))))) (sort (set1 (set1 (tuple2 a1 a1)))
  (t2tb3 x))))

(declare-fun tb2t3 (uni) (set (set (tuple21 a a))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 a a)))))
  (! (= (tb2t3 (t2tb3 i)) i) :pattern ((t2tb3 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 a1 a1))) j) (= (t2tb3 (tb2t3 j)) j)) :pattern (
  (t2tb3 (tb2t3 j))) )))

;; mem_relation
  (assert
  (forall ((u (set a)) (v (set a)) (r (set (tuple21 a a))))
  (= (mem (set1 (tuple2 a1 a1)) (t2tb4 r)
  (relation a1 a1 (t2tb1 u) (t2tb1 v)))
  (forall ((x a) (y a))
  (=> (mem (tuple2 a1 a1) (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y)) (t2tb4 r))
  (and (mem1 x u) (mem1 y v)))))))

;; mem_relation
  (assert
  (forall ((b2 ty))
  (forall ((u (set a)) (v uni) (r uni))
  (and
  (=> (mem (set1 (tuple2 a1 b2)) r (relation b2 a1 (t2tb1 u) v))
  (forall ((x a) (y uni))
  (=> (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) y) r)
  (and (mem1 x u) (mem b2 y v)))))
  (=>
  (forall ((x a) (y uni))
  (=> (sort b2 y)
  (=> (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) y) r)
  (and (mem1 x u) (mem b2 y v))))) (mem (set1 (tuple2 a1 b2)) r
  (relation b2 a1 (t2tb1 u) v)))))))

;; mem_relation
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((u uni) (v uni) (r uni))
  (and
  (=> (mem (set1 (tuple2 a2 b2)) r (relation b2 a2 u v))
  (forall ((x uni) (y uni))
  (=> (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) r)
  (and (mem a2 x u) (mem b2 y v)))))
  (=>
  (forall ((x uni) (y uni))
  (=> (sort a2 x)
  (=> (sort b2 y)
  (=> (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) r)
  (and (mem a2 x u) (mem b2 y v)))))) (mem (set1 (tuple2 a2 b2)) r
  (relation b2 a2 u v)))))))

(declare-fun inverse (ty ty uni) uni)

;; inverse_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni)) (sort (set1 (tuple2 b2 a2)) (inverse b2 a2 x)))))

(declare-fun inverse1 ((set (tuple21 b a))) (set (tuple21 a b)))

(declare-fun inverse2 ((set (tuple21 a b))) (set (tuple21 b a)))

;; mem_inverse
  (assert
  (forall ((p (set (tuple21 (tuple21 b c) a))) (x a) (y (tuple21 b c)))
  (= (mem14 (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 y)))
  (tb2t261 (inverse a1 (tuple2 b1 c1) (t2tb1124 p)))) (mem
  (tuple2 (tuple2 b1 c1) a1) (Tuple2 (tuple2 b1 c1) a1 (t2tb134 y) (t2tb2 x))
  (t2tb1124 p)))))

;; mem_inverse
  (assert
  (forall ((p (set (tuple21 c b))) (x b) (y c))
  (= (mem8 (tb2t134 (Tuple2 b1 c1 (t2tb14 x) (t2tb135 y)))
  (tb2t131 (inverse b1 c1 (t2tb222 p)))) (mem (tuple2 c1 b1)
  (Tuple2 c1 b1 (t2tb135 y) (t2tb14 x)) (t2tb222 p)))))

;; mem_inverse
  (assert
  (forall ((p (set (tuple21 c a))) (x a) (y c))
  (= (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y)))
  (tb2t129 (inverse a1 c1 (t2tb224 p)))) (mem (tuple2 c1 a1)
  (Tuple2 c1 a1 (t2tb135 y) (t2tb2 x)) (t2tb224 p)))))

;; mem_inverse
  (assert
  (forall ((p (set (tuple21 b c))) (x c) (y b))
  (= (mem (tuple2 c1 b1) (Tuple2 c1 b1 (t2tb135 x) (t2tb14 y))
  (inverse c1 b1 (t2tb131 p))) (mem8
  (tb2t134 (Tuple2 b1 c1 (t2tb14 y) (t2tb135 x))) p))))

;; mem_inverse
  (assert
  (forall ((p (set (tuple21 b a))) (x a) (y b))
  (= (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y))) (inverse1 p)) (mem5
  (tb2t38 (Tuple2 b1 a1 (t2tb14 y) (t2tb2 x))) p))))

;; mem_inverse
  (assert
  (forall ((p (set (tuple21 a (tuple21 b c)))) (x (tuple21 b c)) (y a))
  (= (mem (tuple2 (tuple2 b1 c1) a1)
  (Tuple2 (tuple2 b1 c1) a1 (t2tb134 x) (t2tb2 y))
  (inverse (tuple2 b1 c1) a1 (t2tb261 p))) (mem14
  (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 y) (t2tb134 x))) p))))

;; mem_inverse
  (assert
  (forall ((p (set (tuple21 a c))) (x c) (y a))
  (= (mem (tuple2 c1 a1) (Tuple2 c1 a1 (t2tb135 x) (t2tb2 y))
  (inverse c1 a1 (t2tb129 p))) (mem10
  (tb2t133 (Tuple2 a1 c1 (t2tb2 y) (t2tb135 x))) p))))

;; mem_inverse
  (assert
  (forall ((p (set (tuple21 a b))) (x b) (y a))
  (= (mem5 (tb2t38 (Tuple2 b1 a1 (t2tb14 x) (t2tb2 y))) (inverse2 p)) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 y) (t2tb14 x))) p))))

;; mem_inverse
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((p uni) (x uni) (y uni))
  (= (mem (tuple2 b2 a2) (Tuple2 b2 a2 x y) (inverse b2 a2 p)) (mem
  (tuple2 a2 b2) (Tuple2 a2 b2 y x) p)))))

(declare-fun dom (ty ty uni) uni)

;; dom_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni)) (sort (set1 a2) (dom b2 a2 x)))))

;; mem_dom
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (x (tuple21 a (tuple21 b c))))
  (and
  (=> (mem14 x (tb2t261 (dom b2 (tuple2 a1 (tuple2 b1 c1)) p)))
  (exists ((b3 uni))
  (and (sort b2 b3) (mem (tuple2 (tuple2 a1 (tuple2 b1 c1)) b2)
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) b2 (t2tb260 x) b3) p))))
  (=>
  (exists ((b3 uni)) (mem (tuple2 (tuple2 a1 (tuple2 b1 c1)) b2)
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) b2 (t2tb260 x) b3) p)) (mem14 x
  (tb2t261 (dom b2 (tuple2 a1 (tuple2 b1 c1)) p))))))))

;; mem_dom
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (x (set (tuple21 a c))))
  (and
  (=> (mem11 x (tb2t128 (dom b2 (set1 (tuple2 a1 c1)) p)))
  (exists ((b3 uni))
  (and (sort b2 b3) (mem (tuple2 (set1 (tuple2 a1 c1)) b2)
  (Tuple2 (set1 (tuple2 a1 c1)) b2 (t2tb129 x) b3) p))))
  (=>
  (exists ((b3 uni)) (mem (tuple2 (set1 (tuple2 a1 c1)) b2)
  (Tuple2 (set1 (tuple2 a1 c1)) b2 (t2tb129 x) b3) p)) (mem11 x
  (tb2t128 (dom b2 (set1 (tuple2 a1 c1)) p))))))))

;; mem_dom
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (x (tuple21 a c)))
  (and
  (=> (mem10 x (tb2t129 (dom b2 (tuple2 a1 c1) p)))
  (exists ((b3 uni))
  (and (sort b2 b3) (mem (tuple2 (tuple2 a1 c1) b2)
  (Tuple2 (tuple2 a1 c1) b2 (t2tb133 x) b3) p))))
  (=>
  (exists ((b3 uni)) (mem (tuple2 (tuple2 a1 c1) b2)
  (Tuple2 (tuple2 a1 c1) b2 (t2tb133 x) b3) p)) (mem10 x
  (tb2t129 (dom b2 (tuple2 a1 c1) p))))))))

;; mem_dom
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (x (tuple21 b c)))
  (and
  (=> (mem8 x (tb2t131 (dom b2 (tuple2 b1 c1) p)))
  (exists ((b3 uni))
  (and (sort b2 b3) (mem (tuple2 (tuple2 b1 c1) b2)
  (Tuple2 (tuple2 b1 c1) b2 (t2tb134 x) b3) p))))
  (=>
  (exists ((b3 uni)) (mem (tuple2 (tuple2 b1 c1) b2)
  (Tuple2 (tuple2 b1 c1) b2 (t2tb134 x) b3) p)) (mem8 x
  (tb2t131 (dom b2 (tuple2 b1 c1) p))))))))

;; mem_dom
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (x c))
  (and
  (=> (mem7 x (tb2t132 (dom b2 c1 p)))
  (exists ((b3 uni))
  (and (sort b2 b3) (mem (tuple2 c1 b2) (Tuple2 c1 b2 (t2tb135 x) b3) p))))
  (=>
  (exists ((b3 uni)) (mem (tuple2 c1 b2) (Tuple2 c1 b2 (t2tb135 x) b3) p))
  (mem7 x (tb2t132 (dom b2 c1 p))))))))

;; mem_dom
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (x (tuple21 b a)))
  (and
  (=> (mem5 x (tb2t37 (dom b2 (tuple2 b1 a1) p)))
  (exists ((b3 uni))
  (and (sort b2 b3) (mem (tuple2 (tuple2 b1 a1) b2)
  (Tuple2 (tuple2 b1 a1) b2 (t2tb38 x) b3) p))))
  (=>
  (exists ((b3 uni)) (mem (tuple2 (tuple2 b1 a1) b2)
  (Tuple2 (tuple2 b1 a1) b2 (t2tb38 x) b3) p)) (mem5 x
  (tb2t37 (dom b2 (tuple2 b1 a1) p))))))))

;; mem_dom
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (x (set (tuple21 a b))))
  (and
  (=> (mem4 x (tb2t10 (dom b2 (set1 (tuple2 a1 b1)) p)))
  (exists ((b3 uni))
  (and (sort b2 b3) (mem (tuple2 (set1 (tuple2 a1 b1)) b2)
  (Tuple2 (set1 (tuple2 a1 b1)) b2 (t2tb11 x) b3) p))))
  (=>
  (exists ((b3 uni)) (mem (tuple2 (set1 (tuple2 a1 b1)) b2)
  (Tuple2 (set1 (tuple2 a1 b1)) b2 (t2tb11 x) b3) p)) (mem4 x
  (tb2t10 (dom b2 (set1 (tuple2 a1 b1)) p))))))))

;; mem_dom
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (x (tuple21 a b)))
  (and
  (=> (mem3 x (tb2t11 (dom b2 (tuple2 a1 b1) p)))
  (exists ((b3 uni))
  (and (sort b2 b3) (mem (tuple2 (tuple2 a1 b1) b2)
  (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) b3) p))))
  (=>
  (exists ((b3 uni)) (mem (tuple2 (tuple2 a1 b1) b2)
  (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) b3) p)) (mem3 x
  (tb2t11 (dom b2 (tuple2 a1 b1) p))))))))

;; mem_dom
  (assert
  (forall ((p (set (tuple21 b c))) (x b))
  (= (mem2 x (tb2t12 (dom c1 b1 (t2tb131 p))))
  (exists ((b2 c)) (mem8 (tb2t134 (Tuple2 b1 c1 (t2tb14 x) (t2tb135 b2))) p)))))

;; mem_dom
  (assert
  (forall ((p (set (tuple21 b a))) (x b))
  (= (mem2 x (tb2t12 (dom a1 b1 (t2tb37 p))))
  (exists ((b2 a)) (mem5 (tb2t38 (Tuple2 b1 a1 (t2tb14 x) (t2tb2 b2))) p)))))

;; mem_dom
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (x b))
  (and
  (=> (mem2 x (tb2t12 (dom b2 b1 p)))
  (exists ((b3 uni))
  (and (sort b2 b3) (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) b3) p))))
  (=> (exists ((b3 uni)) (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) b3) p))
  (mem2 x (tb2t12 (dom b2 b1 p))))))))

;; mem_dom
  (assert
  (forall ((p (set (tuple21 a (tuple21 b c)))) (x a))
  (= (mem1 x (tb2t1 (dom (tuple2 b1 c1) a1 (t2tb261 p))))
  (exists ((b2 (tuple21 b c))) (mem14
  (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 b2))) p)))))

;; mem_dom
  (assert
  (forall ((p (set (tuple21 a c))) (x a))
  (= (mem1 x (tb2t1 (dom c1 a1 (t2tb129 p))))
  (exists ((b2 c)) (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 b2))) p)))))

;; mem_dom
  (assert
  (forall ((p (set (tuple21 a b))) (x a))
  (= (mem1 x (tb2t1 (dom b1 a1 (t2tb11 p))))
  (exists ((b2 b)) (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 b2))) p)))))

;; mem_dom
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (x a))
  (and
  (=> (mem1 x (tb2t1 (dom b2 a1 p)))
  (exists ((b3 uni))
  (and (sort b2 b3) (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) b3) p))))
  (=> (exists ((b3 uni)) (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) b3) p))
  (mem1 x (tb2t1 (dom b2 a1 p))))))))

;; mem_dom
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((p uni) (x uni))
  (and
  (=> (mem a2 x (dom b2 a2 p))
  (exists ((b3 uni))
  (and (sort b2 b3) (mem (tuple2 a2 b2) (Tuple2 a2 b2 x b3) p))))
  (=> (exists ((b3 uni)) (mem (tuple2 a2 b2) (Tuple2 a2 b2 x b3) p)) (mem a2
  x (dom b2 a2 p)))))))

(declare-fun ran (ty ty uni) uni)

;; ran_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni)) (sort (set1 b2) (ran b2 a2 x)))))

;; mem_ran
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (x (tuple21 a (tuple21 b c))))
  (and
  (=> (mem14 x (tb2t261 (ran (tuple2 a1 (tuple2 b1 c1)) a2 p)))
  (exists ((a3 uni))
  (and (sort a2 a3) (mem (tuple2 a2 (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 a2 (tuple2 a1 (tuple2 b1 c1)) a3 (t2tb260 x)) p))))
  (=>
  (exists ((a3 uni)) (mem (tuple2 a2 (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 a2 (tuple2 a1 (tuple2 b1 c1)) a3 (t2tb260 x)) p)) (mem14 x
  (tb2t261 (ran (tuple2 a1 (tuple2 b1 c1)) a2 p))))))))

;; mem_ran
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (x (set (tuple21 a c))))
  (and
  (=> (mem11 x (tb2t128 (ran (set1 (tuple2 a1 c1)) a2 p)))
  (exists ((a3 uni))
  (and (sort a2 a3) (mem (tuple2 a2 (set1 (tuple2 a1 c1)))
  (Tuple2 a2 (set1 (tuple2 a1 c1)) a3 (t2tb129 x)) p))))
  (=>
  (exists ((a3 uni)) (mem (tuple2 a2 (set1 (tuple2 a1 c1)))
  (Tuple2 a2 (set1 (tuple2 a1 c1)) a3 (t2tb129 x)) p)) (mem11 x
  (tb2t128 (ran (set1 (tuple2 a1 c1)) a2 p))))))))

;; mem_ran
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (x (tuple21 a c)))
  (and
  (=> (mem10 x (tb2t129 (ran (tuple2 a1 c1) a2 p)))
  (exists ((a3 uni))
  (and (sort a2 a3) (mem (tuple2 a2 (tuple2 a1 c1))
  (Tuple2 a2 (tuple2 a1 c1) a3 (t2tb133 x)) p))))
  (=>
  (exists ((a3 uni)) (mem (tuple2 a2 (tuple2 a1 c1))
  (Tuple2 a2 (tuple2 a1 c1) a3 (t2tb133 x)) p)) (mem10 x
  (tb2t129 (ran (tuple2 a1 c1) a2 p))))))))

;; mem_ran
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (x (tuple21 b c)))
  (and
  (=> (mem8 x (tb2t131 (ran (tuple2 b1 c1) a2 p)))
  (exists ((a3 uni))
  (and (sort a2 a3) (mem (tuple2 a2 (tuple2 b1 c1))
  (Tuple2 a2 (tuple2 b1 c1) a3 (t2tb134 x)) p))))
  (=>
  (exists ((a3 uni)) (mem (tuple2 a2 (tuple2 b1 c1))
  (Tuple2 a2 (tuple2 b1 c1) a3 (t2tb134 x)) p)) (mem8 x
  (tb2t131 (ran (tuple2 b1 c1) a2 p))))))))

;; mem_ran
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (x c))
  (and
  (=> (mem7 x (tb2t132 (ran c1 a2 p)))
  (exists ((a3 uni))
  (and (sort a2 a3) (mem (tuple2 a2 c1) (Tuple2 a2 c1 a3 (t2tb135 x)) p))))
  (=>
  (exists ((a3 uni)) (mem (tuple2 a2 c1) (Tuple2 a2 c1 a3 (t2tb135 x)) p))
  (mem7 x (tb2t132 (ran c1 a2 p))))))))

;; mem_ran
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (x (tuple21 b a)))
  (and
  (=> (mem5 x (tb2t37 (ran (tuple2 b1 a1) a2 p)))
  (exists ((a3 uni))
  (and (sort a2 a3) (mem (tuple2 a2 (tuple2 b1 a1))
  (Tuple2 a2 (tuple2 b1 a1) a3 (t2tb38 x)) p))))
  (=>
  (exists ((a3 uni)) (mem (tuple2 a2 (tuple2 b1 a1))
  (Tuple2 a2 (tuple2 b1 a1) a3 (t2tb38 x)) p)) (mem5 x
  (tb2t37 (ran (tuple2 b1 a1) a2 p))))))))

;; mem_ran
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (x (set (tuple21 a b))))
  (and
  (=> (mem4 x (tb2t10 (ran (set1 (tuple2 a1 b1)) a2 p)))
  (exists ((a3 uni))
  (and (sort a2 a3) (mem (tuple2 a2 (set1 (tuple2 a1 b1)))
  (Tuple2 a2 (set1 (tuple2 a1 b1)) a3 (t2tb11 x)) p))))
  (=>
  (exists ((a3 uni)) (mem (tuple2 a2 (set1 (tuple2 a1 b1)))
  (Tuple2 a2 (set1 (tuple2 a1 b1)) a3 (t2tb11 x)) p)) (mem4 x
  (tb2t10 (ran (set1 (tuple2 a1 b1)) a2 p))))))))

;; mem_ran
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (x (tuple21 a b)))
  (and
  (=> (mem3 x (tb2t11 (ran (tuple2 a1 b1) a2 p)))
  (exists ((a3 uni))
  (and (sort a2 a3) (mem (tuple2 a2 (tuple2 a1 b1))
  (Tuple2 a2 (tuple2 a1 b1) a3 (t2tb13 x)) p))))
  (=>
  (exists ((a3 uni)) (mem (tuple2 a2 (tuple2 a1 b1))
  (Tuple2 a2 (tuple2 a1 b1) a3 (t2tb13 x)) p)) (mem3 x
  (tb2t11 (ran (tuple2 a1 b1) a2 p))))))))

;; mem_ran
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (x b))
  (and
  (=> (mem2 x (tb2t12 (ran b1 a2 p)))
  (exists ((a3 uni))
  (and (sort a2 a3) (mem (tuple2 a2 b1) (Tuple2 a2 b1 a3 (t2tb14 x)) p))))
  (=> (exists ((a3 uni)) (mem (tuple2 a2 b1) (Tuple2 a2 b1 a3 (t2tb14 x)) p))
  (mem2 x (tb2t12 (ran b1 a2 p))))))))

;; mem_ran
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (x a))
  (and
  (=> (mem1 x (tb2t1 (ran a1 a2 p)))
  (exists ((a3 uni))
  (and (sort a2 a3) (mem (tuple2 a2 a1) (Tuple2 a2 a1 a3 (t2tb2 x)) p))))
  (=> (exists ((a3 uni)) (mem (tuple2 a2 a1) (Tuple2 a2 a1 a3 (t2tb2 x)) p))
  (mem1 x (tb2t1 (ran a1 a2 p))))))))

;; mem_ran
  (assert
  (forall ((p (set (tuple21 b c))) (x c))
  (= (mem7 x (tb2t132 (ran c1 b1 (t2tb131 p))))
  (exists ((a2 b)) (mem8 (tb2t134 (Tuple2 b1 c1 (t2tb14 a2) (t2tb135 x))) p)))))

;; mem_ran
  (assert
  (forall ((p (set (tuple21 b a))) (x a))
  (= (mem1 x (tb2t1 (ran a1 b1 (t2tb37 p))))
  (exists ((a2 b)) (mem5 (tb2t38 (Tuple2 b1 a1 (t2tb14 a2) (t2tb2 x))) p)))))

;; mem_ran
  (assert
  (forall ((p (set (tuple21 a (tuple21 b c)))) (x (tuple21 b c)))
  (= (mem8 x (tb2t131 (ran (tuple2 b1 c1) a1 (t2tb261 p))))
  (exists ((a2 a)) (mem14
  (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 a2) (t2tb134 x))) p)))))

;; mem_ran
  (assert
  (forall ((p (set (tuple21 a c))) (x c))
  (= (mem7 x (tb2t132 (ran c1 a1 (t2tb129 p))))
  (exists ((a2 a)) (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 a2) (t2tb135 x))) p)))))

;; mem_ran
  (assert
  (forall ((p (set (tuple21 a b))) (x b))
  (= (mem2 x (tb2t12 (ran b1 a1 (t2tb11 p))))
  (exists ((a2 a)) (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 a2) (t2tb14 x))) p)))))

;; mem_ran
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((p uni) (x uni))
  (and
  (=> (mem b2 x (ran b2 a2 p))
  (exists ((a3 uni))
  (and (sort a2 a3) (mem (tuple2 a2 b2) (Tuple2 a2 b2 a3 x) p))))
  (=> (exists ((a3 uni)) (mem (tuple2 a2 b2) (Tuple2 a2 b2 a3 x) p)) (mem b2
  x (ran b2 a2 p)))))))

(declare-fun semicolon (ty ty ty uni uni) uni)

;; semicolon_sort
  (assert
  (forall ((a2 ty) (b2 ty) (c2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (tuple2 a2 c2))
  (semicolon c2 b2 a2 x x1)))))

(declare-fun semicolon12 ((set (tuple21 b a)) (set (tuple21 a
  c))) (set (tuple21 b c)))

(declare-fun semicolon1 ((set (tuple21 a b)) (set (tuple21 b
  c))) (set (tuple21 a c)))

;; mem_semicolon
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (q (set (tuple21 b c))) (x uni) (y c))
  (= (mem (tuple2 a2 c1) (Tuple2 a2 c1 x (t2tb135 y))
  (semicolon c1 b1 a2 p (t2tb131 q)))
  (exists ((b2 b))
  (and (mem (tuple2 a2 b1) (Tuple2 a2 b1 x (t2tb14 b2)) p) (mem8
  (tb2t134 (Tuple2 b1 c1 (t2tb14 b2) (t2tb135 y))) q)))))))

;; mem_semicolon
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (q (set (tuple21 b a))) (x uni) (y a))
  (= (mem (tuple2 a2 a1) (Tuple2 a2 a1 x (t2tb2 y))
  (semicolon a1 b1 a2 p (t2tb37 q)))
  (exists ((b2 b))
  (and (mem (tuple2 a2 b1) (Tuple2 a2 b1 x (t2tb14 b2)) p) (mem5
  (tb2t38 (Tuple2 b1 a1 (t2tb14 b2) (t2tb2 y))) q)))))))

;; mem_semicolon
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (q (set (tuple21 a (tuple21 b c)))) (x uni) (y (tuple21 b
  c)))
  (= (mem (tuple2 a2 (tuple2 b1 c1)) (Tuple2 a2 (tuple2 b1 c1) x (t2tb134 y))
  (semicolon (tuple2 b1 c1) a1 a2 p (t2tb261 q)))
  (exists ((b2 a))
  (and (mem (tuple2 a2 a1) (Tuple2 a2 a1 x (t2tb2 b2)) p) (mem14
  (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 b2) (t2tb134 y))) q)))))))

;; mem_semicolon
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (q (set (tuple21 a c))) (x uni) (y c))
  (= (mem (tuple2 a2 c1) (Tuple2 a2 c1 x (t2tb135 y))
  (semicolon c1 a1 a2 p (t2tb129 q)))
  (exists ((b2 a))
  (and (mem (tuple2 a2 a1) (Tuple2 a2 a1 x (t2tb2 b2)) p) (mem10
  (tb2t133 (Tuple2 a1 c1 (t2tb2 b2) (t2tb135 y))) q)))))))

;; mem_semicolon
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (q (set (tuple21 a b))) (x uni) (y b))
  (= (mem (tuple2 a2 b1) (Tuple2 a2 b1 x (t2tb14 y))
  (semicolon b1 a1 a2 p (t2tb11 q)))
  (exists ((b2 a))
  (and (mem (tuple2 a2 a1) (Tuple2 a2 a1 x (t2tb2 b2)) p) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 b2) (t2tb14 y))) q)))))))

;; mem_semicolon
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (q uni) (x b) (y c))
  (and
  (=> (mem8 (tb2t134 (Tuple2 b1 c1 (t2tb14 x) (t2tb135 y)))
  (tb2t131 (semicolon c1 b2 b1 p q)))
  (exists ((b3 uni))
  (and (sort b2 b3)
  (and (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) b3) p) (mem
  (tuple2 b2 c1) (Tuple2 b2 c1 b3 (t2tb135 y)) q)))))
  (=>
  (exists ((b3 uni))
  (and (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) b3) p) (mem
  (tuple2 b2 c1) (Tuple2 b2 c1 b3 (t2tb135 y)) q))) (mem8
  (tb2t134 (Tuple2 b1 c1 (t2tb14 x) (t2tb135 y)))
  (tb2t131 (semicolon c1 b2 b1 p q))))))))

;; mem_semicolon
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (q uni) (x b) (y a))
  (and
  (=> (mem5 (tb2t38 (Tuple2 b1 a1 (t2tb14 x) (t2tb2 y)))
  (tb2t37 (semicolon a1 b2 b1 p q)))
  (exists ((b3 uni))
  (and (sort b2 b3)
  (and (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) b3) p) (mem
  (tuple2 b2 a1) (Tuple2 b2 a1 b3 (t2tb2 y)) q)))))
  (=>
  (exists ((b3 uni))
  (and (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) b3) p) (mem
  (tuple2 b2 a1) (Tuple2 b2 a1 b3 (t2tb2 y)) q))) (mem5
  (tb2t38 (Tuple2 b1 a1 (t2tb14 x) (t2tb2 y)))
  (tb2t37 (semicolon a1 b2 b1 p q))))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 b c))) (q (set (tuple21 c c))) (x b) (y c))
  (= (mem8 (tb2t134 (Tuple2 b1 c1 (t2tb14 x) (t2tb135 y)))
  (tb2t131 (semicolon c1 c1 b1 (t2tb131 p) (t2tb216 q))))
  (exists ((b2 c))
  (and (mem8 (tb2t134 (Tuple2 b1 c1 (t2tb14 x) (t2tb135 b2))) p) (mem
  (tuple2 c1 c1) (Tuple2 c1 c1 (t2tb135 b2) (t2tb135 y)) (t2tb216 q)))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 b c))) (q (set (tuple21 c a))) (x b) (y a))
  (= (mem5 (tb2t38 (Tuple2 b1 a1 (t2tb14 x) (t2tb2 y)))
  (tb2t37 (semicolon a1 c1 b1 (t2tb131 p) (t2tb224 q))))
  (exists ((b2 c))
  (and (mem8 (tb2t134 (Tuple2 b1 c1 (t2tb14 x) (t2tb135 b2))) p) (mem
  (tuple2 c1 a1) (Tuple2 c1 a1 (t2tb135 b2) (t2tb2 y)) (t2tb224 q)))))))

;; mem_semicolon
  (assert
  (forall ((c2 ty))
  (forall ((p (set (tuple21 b c))) (q uni) (x b) (y uni))
  (= (mem (tuple2 b1 c2) (Tuple2 b1 c2 (t2tb14 x) y)
  (semicolon c2 c1 b1 (t2tb131 p) q))
  (exists ((b2 c))
  (and (mem8 (tb2t134 (Tuple2 b1 c1 (t2tb14 x) (t2tb135 b2))) p) (mem
  (tuple2 c1 c2) (Tuple2 c1 c2 (t2tb135 b2) y) q)))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 b b))) (q (set (tuple21 b c))) (x b) (y c))
  (= (mem8 (tb2t134 (Tuple2 b1 c1 (t2tb14 x) (t2tb135 y)))
  (tb2t131 (semicolon c1 b1 b1 (t2tb35 p) (t2tb131 q))))
  (exists ((b2 b))
  (and (mem (tuple2 b1 b1) (Tuple2 b1 b1 (t2tb14 x) (t2tb14 b2)) (t2tb35 p))
  (mem8 (tb2t134 (Tuple2 b1 c1 (t2tb14 b2) (t2tb135 y))) q))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 b b))) (q (set (tuple21 b a))) (x b) (y a))
  (= (mem5 (tb2t38 (Tuple2 b1 a1 (t2tb14 x) (t2tb2 y)))
  (tb2t37 (semicolon a1 b1 b1 (t2tb35 p) (t2tb37 q))))
  (exists ((b2 b))
  (and (mem (tuple2 b1 b1) (Tuple2 b1 b1 (t2tb14 x) (t2tb14 b2)) (t2tb35 p))
  (mem5 (tb2t38 (Tuple2 b1 a1 (t2tb14 b2) (t2tb2 y))) q))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 b a))) (q (set (tuple21 a (tuple21 b c)))) (x b)
  (y (tuple21 b c)))
  (= (mem (tuple2 b1 (tuple2 b1 c1))
  (Tuple2 b1 (tuple2 b1 c1) (t2tb14 x) (t2tb134 y))
  (semicolon (tuple2 b1 c1) a1 b1 (t2tb37 p) (t2tb261 q)))
  (exists ((b2 a))
  (and (mem5 (tb2t38 (Tuple2 b1 a1 (t2tb14 x) (t2tb2 b2))) p) (mem14
  (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 b2) (t2tb134 y))) q))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 b a))) (q (set (tuple21 a c))) (x b) (y c))
  (= (mem8 (tb2t134 (Tuple2 b1 c1 (t2tb14 x) (t2tb135 y))) (semicolon12 p q))
  (exists ((b2 a))
  (and (mem5 (tb2t38 (Tuple2 b1 a1 (t2tb14 x) (t2tb2 b2))) p) (mem10
  (tb2t133 (Tuple2 a1 c1 (t2tb2 b2) (t2tb135 y))) q))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 b a))) (q (set (tuple21 a b))) (x b) (y b))
  (= (mem (tuple2 b1 b1) (Tuple2 b1 b1 (t2tb14 x) (t2tb14 y))
  (semicolon b1 a1 b1 (t2tb37 p) (t2tb11 q)))
  (exists ((b2 a))
  (and (mem5 (tb2t38 (Tuple2 b1 a1 (t2tb14 x) (t2tb2 b2))) p) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 b2) (t2tb14 y))) q))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 b a))) (q (set (tuple21 a a))) (x b) (y a))
  (= (mem5 (tb2t38 (Tuple2 b1 a1 (t2tb14 x) (t2tb2 y)))
  (tb2t37 (semicolon a1 a1 b1 (t2tb37 p) (t2tb4 q))))
  (exists ((b2 a))
  (and (mem5 (tb2t38 (Tuple2 b1 a1 (t2tb14 x) (t2tb2 b2))) p) (mem
  (tuple2 a1 a1) (Tuple2 a1 a1 (t2tb2 b2) (t2tb2 y)) (t2tb4 q)))))))

;; mem_semicolon
  (assert
  (forall ((c2 ty))
  (forall ((p (set (tuple21 b a))) (q uni) (x b) (y uni))
  (= (mem (tuple2 b1 c2) (Tuple2 b1 c2 (t2tb14 x) y)
  (semicolon c2 a1 b1 (t2tb37 p) q))
  (exists ((b2 a))
  (and (mem5 (tb2t38 (Tuple2 b1 a1 (t2tb14 x) (t2tb2 b2))) p) (mem
  (tuple2 a1 c2) (Tuple2 a1 c2 (t2tb2 b2) y) q)))))))

;; mem_semicolon
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (q uni) (x a) (y (tuple21 b c)))
  (and
  (=> (mem14 (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 y)))
  (tb2t261 (semicolon (tuple2 b1 c1) b2 a1 p q)))
  (exists ((b3 uni))
  (and (sort b2 b3)
  (and (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) b3) p) (mem
  (tuple2 b2 (tuple2 b1 c1)) (Tuple2 b2 (tuple2 b1 c1) b3 (t2tb134 y)) q)))))
  (=>
  (exists ((b3 uni))
  (and (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) b3) p) (mem
  (tuple2 b2 (tuple2 b1 c1)) (Tuple2 b2 (tuple2 b1 c1) b3 (t2tb134 y)) q)))
  (mem14 (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 y)))
  (tb2t261 (semicolon (tuple2 b1 c1) b2 a1 p q))))))))

;; mem_semicolon
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (q uni) (x a) (y c))
  (and
  (=> (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y)))
  (tb2t129 (semicolon c1 b2 a1 p q)))
  (exists ((b3 uni))
  (and (sort b2 b3)
  (and (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) b3) p) (mem (tuple2 b2 c1)
  (Tuple2 b2 c1 b3 (t2tb135 y)) q)))))
  (=>
  (exists ((b3 uni))
  (and (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) b3) p) (mem (tuple2 b2 c1)
  (Tuple2 b2 c1 b3 (t2tb135 y)) q))) (mem10
  (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y)))
  (tb2t129 (semicolon c1 b2 a1 p q))))))))

;; mem_semicolon
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (q uni) (x a) (y b))
  (and
  (=> (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y)))
  (tb2t11 (semicolon b1 b2 a1 p q)))
  (exists ((b3 uni))
  (and (sort b2 b3)
  (and (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) b3) p) (mem (tuple2 b2 b1)
  (Tuple2 b2 b1 b3 (t2tb14 y)) q)))))
  (=>
  (exists ((b3 uni))
  (and (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) b3) p) (mem (tuple2 b2 b1)
  (Tuple2 b2 b1 b3 (t2tb14 y)) q))) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y)))
  (tb2t11 (semicolon b1 b2 a1 p q))))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 a (tuple21 b c)))) (q (set (tuple21 (tuple21 b c)
  (tuple21 b c)))) (x a) (y (tuple21 b c)))
  (= (mem14 (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 y)))
  (tb2t261
  (semicolon (tuple2 b1 c1) (tuple2 b1 c1) a1 (t2tb261 p) (t2tb1113 q))))
  (exists ((b2 (tuple21 b c)))
  (and (mem14 (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 b2))) p)
  (mem (tuple2 (tuple2 b1 c1) (tuple2 b1 c1))
  (Tuple2 (tuple2 b1 c1) (tuple2 b1 c1) (t2tb134 b2) (t2tb134 y))
  (t2tb1113 q)))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 a (tuple21 b c)))) (q (set (tuple21 (tuple21 b c)
  c))) (x a) (y c))
  (= (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y)))
  (tb2t129 (semicolon c1 (tuple2 b1 c1) a1 (t2tb261 p) (t2tb1115 q))))
  (exists ((b2 (tuple21 b c)))
  (and (mem14 (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 b2))) p)
  (mem (tuple2 (tuple2 b1 c1) c1)
  (Tuple2 (tuple2 b1 c1) c1 (t2tb134 b2) (t2tb135 y)) (t2tb1115 q)))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 a (tuple21 b c)))) (q (set (tuple21 (tuple21 b c)
  b))) (x a) (y b))
  (= (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y)))
  (tb2t11 (semicolon b1 (tuple2 b1 c1) a1 (t2tb261 p) (t2tb1121 q))))
  (exists ((b2 (tuple21 b c)))
  (and (mem14 (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 b2))) p)
  (mem (tuple2 (tuple2 b1 c1) b1)
  (Tuple2 (tuple2 b1 c1) b1 (t2tb134 b2) (t2tb14 y)) (t2tb1121 q)))))))

;; mem_semicolon
  (assert
  (forall ((c2 ty))
  (forall ((p (set (tuple21 a (tuple21 b c)))) (q uni) (x a) (y uni))
  (= (mem (tuple2 a1 c2) (Tuple2 a1 c2 (t2tb2 x) y)
  (semicolon c2 (tuple2 b1 c1) a1 (t2tb261 p) q))
  (exists ((b2 (tuple21 b c)))
  (and (mem14 (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 b2))) p)
  (mem (tuple2 (tuple2 b1 c1) c2) (Tuple2 (tuple2 b1 c1) c2 (t2tb134 b2) y)
  q)))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 a c))) (q (set (tuple21 c (tuple21 b c)))) (x a)
  (y (tuple21 b c)))
  (= (mem14 (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 y)))
  (tb2t261 (semicolon (tuple2 b1 c1) c1 a1 (t2tb129 p) (t2tb1127 q))))
  (exists ((b2 c))
  (and (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 b2))) p) (mem
  (tuple2 c1 (tuple2 b1 c1))
  (Tuple2 c1 (tuple2 b1 c1) (t2tb135 b2) (t2tb134 y)) (t2tb1127 q)))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 a c))) (q (set (tuple21 c c))) (x a) (y c))
  (= (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y)))
  (tb2t129 (semicolon c1 c1 a1 (t2tb129 p) (t2tb216 q))))
  (exists ((b2 c))
  (and (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 b2))) p) (mem
  (tuple2 c1 c1) (Tuple2 c1 c1 (t2tb135 b2) (t2tb135 y)) (t2tb216 q)))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 a c))) (q (set (tuple21 c b))) (x a) (y b))
  (= (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y)))
  (tb2t11 (semicolon b1 c1 a1 (t2tb129 p) (t2tb222 q))))
  (exists ((b2 c))
  (and (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 b2))) p) (mem
  (tuple2 c1 b1) (Tuple2 c1 b1 (t2tb135 b2) (t2tb14 y)) (t2tb222 q)))))))

;; mem_semicolon
  (assert
  (forall ((c2 ty))
  (forall ((p (set (tuple21 a c))) (q uni) (x a) (y uni))
  (= (mem (tuple2 a1 c2) (Tuple2 a1 c2 (t2tb2 x) y)
  (semicolon c2 c1 a1 (t2tb129 p) q))
  (exists ((b2 c))
  (and (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 b2))) p) (mem
  (tuple2 c1 c2) (Tuple2 c1 c2 (t2tb135 b2) y) q)))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 a b))) (q (set (tuple21 b (tuple21 b c)))) (x a)
  (y (tuple21 b c)))
  (= (mem14 (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 y)))
  (tb2t261 (semicolon (tuple2 b1 c1) b1 a1 (t2tb11 p) (t2tb1139 q))))
  (exists ((b2 b))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 b2))) p) (mem
  (tuple2 b1 (tuple2 b1 c1))
  (Tuple2 b1 (tuple2 b1 c1) (t2tb14 b2) (t2tb134 y)) (t2tb1139 q)))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 a b))) (q (set (tuple21 b c))) (x a) (y c))
  (= (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y))) (semicolon1 p q))
  (exists ((b2 b))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 b2))) p) (mem8
  (tb2t134 (Tuple2 b1 c1 (t2tb14 b2) (t2tb135 y))) q))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 a b))) (q (set (tuple21 b b))) (x a) (y b))
  (= (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y)))
  (tb2t11 (semicolon b1 b1 a1 (t2tb11 p) (t2tb35 q))))
  (exists ((b2 b))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 b2))) p) (mem
  (tuple2 b1 b1) (Tuple2 b1 b1 (t2tb14 b2) (t2tb14 y)) (t2tb35 q)))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 a b))) (q (set (tuple21 b a))) (x a) (y a))
  (= (mem (tuple2 a1 a1) (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y))
  (semicolon a1 b1 a1 (t2tb11 p) (t2tb37 q)))
  (exists ((b2 b))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 b2))) p) (mem5
  (tb2t38 (Tuple2 b1 a1 (t2tb14 b2) (t2tb2 y))) q))))))

;; mem_semicolon
  (assert
  (forall ((c2 ty))
  (forall ((p (set (tuple21 a b))) (q uni) (x a) (y uni))
  (= (mem (tuple2 a1 c2) (Tuple2 a1 c2 (t2tb2 x) y)
  (semicolon c2 b1 a1 (t2tb11 p) q))
  (exists ((b2 b))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 b2))) p) (mem
  (tuple2 b1 c2) (Tuple2 b1 c2 (t2tb14 b2) y) q)))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 a a))) (q (set (tuple21 a (tuple21 b c)))) (x a)
  (y (tuple21 b c)))
  (= (mem14 (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 y)))
  (tb2t261 (semicolon (tuple2 b1 c1) a1 a1 (t2tb4 p) (t2tb261 q))))
  (exists ((b2 a))
  (and (mem (tuple2 a1 a1) (Tuple2 a1 a1 (t2tb2 x) (t2tb2 b2)) (t2tb4 p))
  (mem14 (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 b2) (t2tb134 y))) q))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 a a))) (q (set (tuple21 a c))) (x a) (y c))
  (= (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y)))
  (tb2t129 (semicolon c1 a1 a1 (t2tb4 p) (t2tb129 q))))
  (exists ((b2 a))
  (and (mem (tuple2 a1 a1) (Tuple2 a1 a1 (t2tb2 x) (t2tb2 b2)) (t2tb4 p))
  (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 b2) (t2tb135 y))) q))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 a a))) (q (set (tuple21 a b))) (x a) (y b))
  (= (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y)))
  (tb2t11 (semicolon b1 a1 a1 (t2tb4 p) (t2tb11 q))))
  (exists ((b2 a))
  (and (mem (tuple2 a1 a1) (Tuple2 a1 a1 (t2tb2 x) (t2tb2 b2)) (t2tb4 p))
  (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 b2) (t2tb14 y))) q))))))

;; mem_semicolon
  (assert
  (forall ((a2 ty) (b2 ty) (c2 ty))
  (forall ((p uni) (q uni) (x uni) (y uni))
  (and
  (=> (mem (tuple2 a2 c2) (Tuple2 a2 c2 x y) (semicolon c2 b2 a2 p q))
  (exists ((b3 uni))
  (and (sort b2 b3)
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x b3) p) (mem (tuple2 b2 c2)
  (Tuple2 b2 c2 b3 y) q)))))
  (=>
  (exists ((b3 uni))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x b3) p) (mem (tuple2 b2 c2)
  (Tuple2 b2 c2 b3 y) q))) (mem (tuple2 a2 c2) (Tuple2 a2 c2 x y)
  (semicolon c2 b2 a2 p q)))))))

(declare-fun semicolon_back (ty ty ty uni uni) uni)

;; semicolon_back_sort
  (assert
  (forall ((a2 ty) (b2 ty) (c2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (tuple2 a2 c2))
  (semicolon_back c2 b2 a2 x x1)))))

;; semicolon_back
  (assert
  (forall ((p (set (tuple21 b a))) (q (set (tuple21 a c))))
  (= (tb2t131 (semicolon_back c1 a1 b1 (t2tb129 q) (t2tb37 p))) (semicolon12
                                                                p q))))

;; semicolon_back
  (assert
  (forall ((p (set (tuple21 a b))) (q (set (tuple21 b c))))
  (= (tb2t129 (semicolon_back c1 b1 a1 (t2tb131 q) (t2tb11 p))) (semicolon1 p
                                                                q))))

;; semicolon_back
  (assert
  (forall ((a2 ty) (b2 ty) (c2 ty))
  (forall ((p uni) (q uni))
  (= (semicolon_back c2 b2 a2 q p) (semicolon c2 b2 a2 p q)))))

(declare-fun id (ty uni) uni)

;; id_sort
  (assert
  (forall ((a2 ty))
  (forall ((x uni)) (sort (set1 (tuple2 a2 a2)) (id a2 x)))))

;; mem_id
  (assert
  (forall ((u (set (tuple21 a (tuple21 b c)))) (x (tuple21 a (tuple21 b c)))
  (y (tuple21 a (tuple21 b c))))
  (= (mem (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 (tuple2 b1 c1)) (t2tb260 x)
  (t2tb260 y)) (id (tuple2 a1 (tuple2 b1 c1)) (t2tb261 u)))
  (and (mem14 x u) (= x y)))))

;; mem_id
  (assert
  (forall ((u (set (set (tuple21 a c)))) (x (set (tuple21 a c)))
  (y (set (tuple21 a c))))
  (= (mem (tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 a1 c1)))
  (Tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 a1 c1)) (t2tb129 x)
  (t2tb129 y)) (id (set1 (tuple2 a1 c1)) (t2tb128 u)))
  (and (mem11 x u) (= x y)))))

;; mem_id
  (assert
  (forall ((u (set (tuple21 a c))) (x (tuple21 a c)) (y (tuple21 a c)))
  (= (mem (tuple2 (tuple2 a1 c1) (tuple2 a1 c1))
  (Tuple2 (tuple2 a1 c1) (tuple2 a1 c1) (t2tb133 x) (t2tb133 y))
  (id (tuple2 a1 c1) (t2tb129 u))) (and (mem10 x u) (= x y)))))

;; mem_id
  (assert
  (forall ((u (set (tuple21 b c))) (x (tuple21 b c)) (y (tuple21 b c)))
  (= (mem (tuple2 (tuple2 b1 c1) (tuple2 b1 c1))
  (Tuple2 (tuple2 b1 c1) (tuple2 b1 c1) (t2tb134 x) (t2tb134 y))
  (id (tuple2 b1 c1) (t2tb131 u))) (and (mem8 x u) (= x y)))))

;; mem_id
  (assert
  (forall ((u (set c)) (x c) (y c))
  (= (mem (tuple2 c1 c1) (Tuple2 c1 c1 (t2tb135 x) (t2tb135 y))
  (id c1 (t2tb132 u))) (and (mem7 x u) (= x y)))))

;; mem_id
  (assert
  (forall ((u (set (tuple21 b a))) (x (tuple21 b a)) (y (tuple21 b a)))
  (= (mem (tuple2 (tuple2 b1 a1) (tuple2 b1 a1))
  (Tuple2 (tuple2 b1 a1) (tuple2 b1 a1) (t2tb38 x) (t2tb38 y))
  (id (tuple2 b1 a1) (t2tb37 u))) (and (mem5 x u) (= x y)))))

;; mem_id
  (assert
  (forall ((u (set (set (tuple21 a b)))) (x (set (tuple21 a b)))
  (y (set (tuple21 a b))))
  (= (mem (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1)))
  (Tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1)) (t2tb11 x) (t2tb11 y))
  (id (set1 (tuple2 a1 b1)) (t2tb10 u))) (and (mem4 x u) (= x y)))))

;; mem_id
  (assert
  (forall ((u (set (tuple21 a b))) (x (tuple21 a b)) (y (tuple21 a b)))
  (= (mem (tuple2 (tuple2 a1 b1) (tuple2 a1 b1))
  (Tuple2 (tuple2 a1 b1) (tuple2 a1 b1) (t2tb13 x) (t2tb13 y))
  (id (tuple2 a1 b1) (t2tb11 u))) (and (mem3 x u) (= x y)))))

;; mem_id
  (assert
  (forall ((u (set b)) (x b) (y b))
  (= (mem (tuple2 b1 b1) (Tuple2 b1 b1 (t2tb14 x) (t2tb14 y))
  (id b1 (t2tb12 u))) (and (mem2 x u) (= x y)))))

;; mem_id
  (assert
  (forall ((u (set a)) (x a) (y a))
  (= (mem (tuple2 a1 a1) (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y))
  (id a1 (t2tb1 u))) (and (mem1 x u) (= x y)))))

;; mem_id
  (assert
  (forall ((a2 ty))
  (forall ((u uni) (x uni) (y uni))
  (=> (sort a2 x)
  (=> (sort a2 y)
  (= (mem (tuple2 a2 a2) (Tuple2 a2 a2 x y) (id a2 u))
  (and (mem a2 x u) (= x y))))))))

(declare-fun domain_restriction (ty ty uni uni) uni)

;; domain_restriction_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (tuple2 a2 b2))
  (domain_restriction b2 a2 x x1)))))

(declare-fun domain_restriction1 ((set a) (set (tuple21 a
  b))) (set (tuple21 a b)))

(declare-fun domain_restriction2 ((set b) (set (tuple21 b
  a))) (set (tuple21 b a)))

(declare-fun domain_restriction3 ((set b) (set (tuple21 b
  c))) (set (tuple21 b c)))

(declare-fun domain_restriction4 ((set a) (set (tuple21 a
  c))) (set (tuple21 a c)))

(declare-fun domain_restriction6 ((set a) (set (tuple21 a (tuple21 b
  c)))) (set (tuple21 a (tuple21 b c))))

;; mem_domain_restriction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (tuple21 a (tuple21 b c)))) (x (tuple21 a
  (tuple21 b c))) (y uni))
  (= (mem (tuple2 (tuple2 a1 (tuple2 b1 c1)) b2)
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) b2 (t2tb260 x) y)
  (domain_restriction b2 (tuple2 a1 (tuple2 b1 c1)) (t2tb261 s) p))
  (and (mem (tuple2 (tuple2 a1 (tuple2 b1 c1)) b2)
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) b2 (t2tb260 x) y) p) (mem14 x s))))))

;; mem_domain_restriction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (set (tuple21 a c)))) (x (set (tuple21 a c)))
  (y uni))
  (= (mem (tuple2 (set1 (tuple2 a1 c1)) b2)
  (Tuple2 (set1 (tuple2 a1 c1)) b2 (t2tb129 x) y)
  (domain_restriction b2 (set1 (tuple2 a1 c1)) (t2tb128 s) p))
  (and (mem (tuple2 (set1 (tuple2 a1 c1)) b2)
  (Tuple2 (set1 (tuple2 a1 c1)) b2 (t2tb129 x) y) p) (mem11 x s))))))

;; mem_domain_restriction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (tuple21 a c))) (x (tuple21 a c)) (y uni))
  (= (mem (tuple2 (tuple2 a1 c1) b2) (Tuple2 (tuple2 a1 c1) b2 (t2tb133 x) y)
  (domain_restriction b2 (tuple2 a1 c1) (t2tb129 s) p))
  (and (mem (tuple2 (tuple2 a1 c1) b2)
  (Tuple2 (tuple2 a1 c1) b2 (t2tb133 x) y) p) (mem10 x s))))))

;; mem_domain_restriction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (tuple21 b c))) (x (tuple21 b c)) (y uni))
  (= (mem (tuple2 (tuple2 b1 c1) b2) (Tuple2 (tuple2 b1 c1) b2 (t2tb134 x) y)
  (domain_restriction b2 (tuple2 b1 c1) (t2tb131 s) p))
  (and (mem (tuple2 (tuple2 b1 c1) b2)
  (Tuple2 (tuple2 b1 c1) b2 (t2tb134 x) y) p) (mem8 x s))))))

;; mem_domain_restriction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set c)) (x c) (y uni))
  (= (mem (tuple2 c1 b2) (Tuple2 c1 b2 (t2tb135 x) y)
  (domain_restriction b2 c1 (t2tb132 s) p))
  (and (mem (tuple2 c1 b2) (Tuple2 c1 b2 (t2tb135 x) y) p) (mem7 x s))))))

;; mem_domain_restriction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (tuple21 b a))) (x (tuple21 b a)) (y uni))
  (= (mem (tuple2 (tuple2 b1 a1) b2) (Tuple2 (tuple2 b1 a1) b2 (t2tb38 x) y)
  (domain_restriction b2 (tuple2 b1 a1) (t2tb37 s) p))
  (and (mem (tuple2 (tuple2 b1 a1) b2)
  (Tuple2 (tuple2 b1 a1) b2 (t2tb38 x) y) p) (mem5 x s))))))

;; mem_domain_restriction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (set (tuple21 a b)))) (x (set (tuple21 a b)))
  (y uni))
  (= (mem (tuple2 (set1 (tuple2 a1 b1)) b2)
  (Tuple2 (set1 (tuple2 a1 b1)) b2 (t2tb11 x) y)
  (domain_restriction b2 (set1 (tuple2 a1 b1)) (t2tb10 s) p))
  (and (mem (tuple2 (set1 (tuple2 a1 b1)) b2)
  (Tuple2 (set1 (tuple2 a1 b1)) b2 (t2tb11 x) y) p) (mem4 x s))))))

;; mem_domain_restriction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (tuple21 a b))) (x (tuple21 a b)) (y uni))
  (= (mem (tuple2 (tuple2 a1 b1) b2) (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) y)
  (domain_restriction b2 (tuple2 a1 b1) (t2tb11 s) p))
  (and (mem (tuple2 (tuple2 a1 b1) b2)
  (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) y) p) (mem3 x s))))))

;; mem_domain_restriction
  (assert
  (forall ((p (set (tuple21 b c))) (s (set b)) (x b) (y c))
  (= (mem8 (tb2t134 (Tuple2 b1 c1 (t2tb14 x) (t2tb135 y)))
  (domain_restriction3 s p))
  (and (mem8 (tb2t134 (Tuple2 b1 c1 (t2tb14 x) (t2tb135 y))) p) (mem2 x s)))))

;; mem_domain_restriction
  (assert
  (forall ((p (set (tuple21 b a))) (s (set b)) (x b) (y a))
  (= (mem5 (tb2t38 (Tuple2 b1 a1 (t2tb14 x) (t2tb2 y)))
  (domain_restriction2 s p))
  (and (mem5 (tb2t38 (Tuple2 b1 a1 (t2tb14 x) (t2tb2 y))) p) (mem2 x s)))))

;; mem_domain_restriction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set b)) (x b) (y uni))
  (= (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) y)
  (domain_restriction b2 b1 (t2tb12 s) p))
  (and (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) y) p) (mem2 x s))))))

;; mem_domain_restriction
  (assert
  (forall ((p (set (tuple21 a (tuple21 b c)))) (s (set a)) (x a)
  (y (tuple21 b c)))
  (= (mem14 (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 y)))
  (domain_restriction6 s p))
  (and (mem14 (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 y))) p)
  (mem1 x s)))))

;; mem_domain_restriction
  (assert
  (forall ((p (set (tuple21 a c))) (s (set a)) (x a) (y c))
  (= (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y)))
  (domain_restriction4 s p))
  (and (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y))) p) (mem1 x s)))))

;; mem_domain_restriction
  (assert
  (forall ((p (set (tuple21 a b))) (s (set a)) (x a) (y b))
  (= (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y)))
  (domain_restriction1 s p))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y))) p) (mem1 x s)))))

;; mem_domain_restriction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set a)) (x a) (y uni))
  (= (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) y)
  (domain_restriction b2 a1 (t2tb1 s) p))
  (and (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) y) p) (mem1 x s))))))

;; mem_domain_restriction
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((p uni) (s uni) (x uni) (y uni))
  (= (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) (domain_restriction b2 a2 s p))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) p) (mem a2 x s))))))

(declare-fun range_restriction (ty ty uni uni) uni)

;; range_restriction_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (tuple2 a2 b2))
  (range_restriction b2 a2 x x1)))))

;; mem_range_restriction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (tuple21 a (tuple21 b c)))) (x uni) (y (tuple21 a
  (tuple21 b c))))
  (= (mem (tuple2 a2 (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 a2 (tuple2 a1 (tuple2 b1 c1)) x (t2tb260 y))
  (range_restriction (tuple2 a1 (tuple2 b1 c1)) a2 p (t2tb261 t)))
  (and (mem (tuple2 a2 (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 a2 (tuple2 a1 (tuple2 b1 c1)) x (t2tb260 y)) p) (mem14 y t))))))

;; mem_range_restriction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (set (tuple21 a c)))) (x uni) (y (set (tuple21 a
  c))))
  (= (mem (tuple2 a2 (set1 (tuple2 a1 c1)))
  (Tuple2 a2 (set1 (tuple2 a1 c1)) x (t2tb129 y))
  (range_restriction (set1 (tuple2 a1 c1)) a2 p (t2tb128 t)))
  (and (mem (tuple2 a2 (set1 (tuple2 a1 c1)))
  (Tuple2 a2 (set1 (tuple2 a1 c1)) x (t2tb129 y)) p) (mem11 y t))))))

;; mem_range_restriction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (tuple21 a c))) (x uni) (y (tuple21 a c)))
  (= (mem (tuple2 a2 (tuple2 a1 c1)) (Tuple2 a2 (tuple2 a1 c1) x (t2tb133 y))
  (range_restriction (tuple2 a1 c1) a2 p (t2tb129 t)))
  (and (mem (tuple2 a2 (tuple2 a1 c1))
  (Tuple2 a2 (tuple2 a1 c1) x (t2tb133 y)) p) (mem10 y t))))))

;; mem_range_restriction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (tuple21 b c))) (x uni) (y (tuple21 b c)))
  (= (mem (tuple2 a2 (tuple2 b1 c1)) (Tuple2 a2 (tuple2 b1 c1) x (t2tb134 y))
  (range_restriction (tuple2 b1 c1) a2 p (t2tb131 t)))
  (and (mem (tuple2 a2 (tuple2 b1 c1))
  (Tuple2 a2 (tuple2 b1 c1) x (t2tb134 y)) p) (mem8 y t))))))

;; mem_range_restriction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set c)) (x uni) (y c))
  (= (mem (tuple2 a2 c1) (Tuple2 a2 c1 x (t2tb135 y))
  (range_restriction c1 a2 p (t2tb132 t)))
  (and (mem (tuple2 a2 c1) (Tuple2 a2 c1 x (t2tb135 y)) p) (mem7 y t))))))

;; mem_range_restriction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (tuple21 b a))) (x uni) (y (tuple21 b a)))
  (= (mem (tuple2 a2 (tuple2 b1 a1)) (Tuple2 a2 (tuple2 b1 a1) x (t2tb38 y))
  (range_restriction (tuple2 b1 a1) a2 p (t2tb37 t)))
  (and (mem (tuple2 a2 (tuple2 b1 a1))
  (Tuple2 a2 (tuple2 b1 a1) x (t2tb38 y)) p) (mem5 y t))))))

;; mem_range_restriction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (set (tuple21 a b)))) (x uni) (y (set (tuple21 a
  b))))
  (= (mem (tuple2 a2 (set1 (tuple2 a1 b1)))
  (Tuple2 a2 (set1 (tuple2 a1 b1)) x (t2tb11 y))
  (range_restriction (set1 (tuple2 a1 b1)) a2 p (t2tb10 t)))
  (and (mem (tuple2 a2 (set1 (tuple2 a1 b1)))
  (Tuple2 a2 (set1 (tuple2 a1 b1)) x (t2tb11 y)) p) (mem4 y t))))))

;; mem_range_restriction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (tuple21 a b))) (x uni) (y (tuple21 a b)))
  (= (mem (tuple2 a2 (tuple2 a1 b1)) (Tuple2 a2 (tuple2 a1 b1) x (t2tb13 y))
  (range_restriction (tuple2 a1 b1) a2 p (t2tb11 t)))
  (and (mem (tuple2 a2 (tuple2 a1 b1))
  (Tuple2 a2 (tuple2 a1 b1) x (t2tb13 y)) p) (mem3 y t))))))

;; mem_range_restriction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set b)) (x uni) (y b))
  (= (mem (tuple2 a2 b1) (Tuple2 a2 b1 x (t2tb14 y))
  (range_restriction b1 a2 p (t2tb12 t)))
  (and (mem (tuple2 a2 b1) (Tuple2 a2 b1 x (t2tb14 y)) p) (mem2 y t))))))

;; mem_range_restriction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set a)) (x uni) (y a))
  (= (mem (tuple2 a2 a1) (Tuple2 a2 a1 x (t2tb2 y))
  (range_restriction a1 a2 p (t2tb1 t)))
  (and (mem (tuple2 a2 a1) (Tuple2 a2 a1 x (t2tb2 y)) p) (mem1 y t))))))

;; mem_range_restriction
  (assert
  (forall ((p (set (tuple21 b c))) (t (set c)) (x b) (y c))
  (= (mem8 (tb2t134 (Tuple2 b1 c1 (t2tb14 x) (t2tb135 y)))
  (tb2t131 (range_restriction c1 b1 (t2tb131 p) (t2tb132 t))))
  (and (mem8 (tb2t134 (Tuple2 b1 c1 (t2tb14 x) (t2tb135 y))) p) (mem7 y t)))))

;; mem_range_restriction
  (assert
  (forall ((p (set (tuple21 b a))) (t (set a)) (x b) (y a))
  (= (mem5 (tb2t38 (Tuple2 b1 a1 (t2tb14 x) (t2tb2 y)))
  (tb2t37 (range_restriction a1 b1 (t2tb37 p) (t2tb1 t))))
  (and (mem5 (tb2t38 (Tuple2 b1 a1 (t2tb14 x) (t2tb2 y))) p) (mem1 y t)))))

;; mem_range_restriction
  (assert
  (forall ((p (set (tuple21 a (tuple21 b c)))) (t (set (tuple21 b c))) (x a)
  (y (tuple21 b c)))
  (= (mem14 (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 y)))
  (tb2t261 (range_restriction (tuple2 b1 c1) a1 (t2tb261 p) (t2tb131 t))))
  (and (mem14 (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 y))) p)
  (mem8 y t)))))

;; mem_range_restriction
  (assert
  (forall ((p (set (tuple21 a c))) (t (set c)) (x a) (y c))
  (= (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y)))
  (tb2t129 (range_restriction c1 a1 (t2tb129 p) (t2tb132 t))))
  (and (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y))) p) (mem7 y t)))))

;; mem_range_restriction
  (assert
  (forall ((p (set (tuple21 a b))) (t (set b)) (x a) (y b))
  (= (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y)))
  (tb2t11 (range_restriction b1 a1 (t2tb11 p) (t2tb12 t))))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y))) p) (mem2 y t)))))

;; mem_range_restriction
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((p uni) (t uni) (x uni) (y uni))
  (= (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) (range_restriction b2 a2 p t))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) p) (mem b2 y t))))))

(declare-fun domain_substraction (ty ty uni uni) uni)

;; domain_substraction_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (tuple2 a2 b2))
  (domain_substraction b2 a2 x x1)))))

;; mem_domain_substraction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (tuple21 a (tuple21 b c)))) (x (tuple21 a
  (tuple21 b c))) (y uni))
  (= (mem (tuple2 (tuple2 a1 (tuple2 b1 c1)) b2)
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) b2 (t2tb260 x) y)
  (domain_substraction b2 (tuple2 a1 (tuple2 b1 c1)) (t2tb261 s) p))
  (and (mem (tuple2 (tuple2 a1 (tuple2 b1 c1)) b2)
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) b2 (t2tb260 x) y) p) (not (mem14 x s)))))))

;; mem_domain_substraction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (set (tuple21 a c)))) (x (set (tuple21 a c)))
  (y uni))
  (= (mem (tuple2 (set1 (tuple2 a1 c1)) b2)
  (Tuple2 (set1 (tuple2 a1 c1)) b2 (t2tb129 x) y)
  (domain_substraction b2 (set1 (tuple2 a1 c1)) (t2tb128 s) p))
  (and (mem (tuple2 (set1 (tuple2 a1 c1)) b2)
  (Tuple2 (set1 (tuple2 a1 c1)) b2 (t2tb129 x) y) p) (not (mem11 x s)))))))

;; mem_domain_substraction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (tuple21 a c))) (x (tuple21 a c)) (y uni))
  (= (mem (tuple2 (tuple2 a1 c1) b2) (Tuple2 (tuple2 a1 c1) b2 (t2tb133 x) y)
  (domain_substraction b2 (tuple2 a1 c1) (t2tb129 s) p))
  (and (mem (tuple2 (tuple2 a1 c1) b2)
  (Tuple2 (tuple2 a1 c1) b2 (t2tb133 x) y) p) (not (mem10 x s)))))))

;; mem_domain_substraction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (tuple21 b c))) (x (tuple21 b c)) (y uni))
  (= (mem (tuple2 (tuple2 b1 c1) b2) (Tuple2 (tuple2 b1 c1) b2 (t2tb134 x) y)
  (domain_substraction b2 (tuple2 b1 c1) (t2tb131 s) p))
  (and (mem (tuple2 (tuple2 b1 c1) b2)
  (Tuple2 (tuple2 b1 c1) b2 (t2tb134 x) y) p) (not (mem8 x s)))))))

;; mem_domain_substraction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set c)) (x c) (y uni))
  (= (mem (tuple2 c1 b2) (Tuple2 c1 b2 (t2tb135 x) y)
  (domain_substraction b2 c1 (t2tb132 s) p))
  (and (mem (tuple2 c1 b2) (Tuple2 c1 b2 (t2tb135 x) y) p) (not (mem7 x s)))))))

;; mem_domain_substraction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (tuple21 b a))) (x (tuple21 b a)) (y uni))
  (= (mem (tuple2 (tuple2 b1 a1) b2) (Tuple2 (tuple2 b1 a1) b2 (t2tb38 x) y)
  (domain_substraction b2 (tuple2 b1 a1) (t2tb37 s) p))
  (and (mem (tuple2 (tuple2 b1 a1) b2)
  (Tuple2 (tuple2 b1 a1) b2 (t2tb38 x) y) p) (not (mem5 x s)))))))

;; mem_domain_substraction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (set (tuple21 a b)))) (x (set (tuple21 a b)))
  (y uni))
  (= (mem (tuple2 (set1 (tuple2 a1 b1)) b2)
  (Tuple2 (set1 (tuple2 a1 b1)) b2 (t2tb11 x) y)
  (domain_substraction b2 (set1 (tuple2 a1 b1)) (t2tb10 s) p))
  (and (mem (tuple2 (set1 (tuple2 a1 b1)) b2)
  (Tuple2 (set1 (tuple2 a1 b1)) b2 (t2tb11 x) y) p) (not (mem4 x s)))))))

;; mem_domain_substraction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (tuple21 a b))) (x (tuple21 a b)) (y uni))
  (= (mem (tuple2 (tuple2 a1 b1) b2) (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) y)
  (domain_substraction b2 (tuple2 a1 b1) (t2tb11 s) p))
  (and (mem (tuple2 (tuple2 a1 b1) b2)
  (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) y) p) (not (mem3 x s)))))))

;; mem_domain_substraction
  (assert
  (forall ((p (set (tuple21 b c))) (s (set b)) (x b) (y c))
  (= (mem8 (tb2t134 (Tuple2 b1 c1 (t2tb14 x) (t2tb135 y)))
  (tb2t131 (domain_substraction c1 b1 (t2tb12 s) (t2tb131 p))))
  (and (mem8 (tb2t134 (Tuple2 b1 c1 (t2tb14 x) (t2tb135 y))) p)
  (not (mem2 x s))))))

;; mem_domain_substraction
  (assert
  (forall ((p (set (tuple21 b a))) (s (set b)) (x b) (y a))
  (= (mem5 (tb2t38 (Tuple2 b1 a1 (t2tb14 x) (t2tb2 y)))
  (tb2t37 (domain_substraction a1 b1 (t2tb12 s) (t2tb37 p))))
  (and (mem5 (tb2t38 (Tuple2 b1 a1 (t2tb14 x) (t2tb2 y))) p)
  (not (mem2 x s))))))

;; mem_domain_substraction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set b)) (x b) (y uni))
  (= (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) y)
  (domain_substraction b2 b1 (t2tb12 s) p))
  (and (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) y) p) (not (mem2 x s)))))))

;; mem_domain_substraction
  (assert
  (forall ((p (set (tuple21 a (tuple21 b c)))) (s (set a)) (x a)
  (y (tuple21 b c)))
  (= (mem14 (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 y)))
  (tb2t261 (domain_substraction (tuple2 b1 c1) a1 (t2tb1 s) (t2tb261 p))))
  (and (mem14 (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 y))) p)
  (not (mem1 x s))))))

;; mem_domain_substraction
  (assert
  (forall ((p (set (tuple21 a c))) (s (set a)) (x a) (y c))
  (= (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y)))
  (tb2t129 (domain_substraction c1 a1 (t2tb1 s) (t2tb129 p))))
  (and (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y))) p)
  (not (mem1 x s))))))

;; mem_domain_substraction
  (assert
  (forall ((p (set (tuple21 a b))) (s (set a)) (x a) (y b))
  (= (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y)))
  (tb2t11 (domain_substraction b1 a1 (t2tb1 s) (t2tb11 p))))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y))) p)
  (not (mem1 x s))))))

;; mem_domain_substraction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set a)) (x a) (y uni))
  (= (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) y)
  (domain_substraction b2 a1 (t2tb1 s) p))
  (and (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) y) p) (not (mem1 x s)))))))

;; mem_domain_substraction
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((p uni) (s uni) (x uni) (y uni))
  (= (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) (domain_substraction b2 a2 s p))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) p) (not (mem a2 x s)))))))

(declare-fun range_substraction (ty ty uni uni) uni)

;; range_substraction_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (tuple2 a2 b2))
  (range_substraction b2 a2 x x1)))))

;; mem_range_substraction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (tuple21 a (tuple21 b c)))) (x uni) (y (tuple21 a
  (tuple21 b c))))
  (= (mem (tuple2 a2 (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 a2 (tuple2 a1 (tuple2 b1 c1)) x (t2tb260 y))
  (range_substraction (tuple2 a1 (tuple2 b1 c1)) a2 p (t2tb261 t)))
  (and (mem (tuple2 a2 (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 a2 (tuple2 a1 (tuple2 b1 c1)) x (t2tb260 y)) p) (not (mem14 y t)))))))

;; mem_range_substraction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (set (tuple21 a c)))) (x uni) (y (set (tuple21 a
  c))))
  (= (mem (tuple2 a2 (set1 (tuple2 a1 c1)))
  (Tuple2 a2 (set1 (tuple2 a1 c1)) x (t2tb129 y))
  (range_substraction (set1 (tuple2 a1 c1)) a2 p (t2tb128 t)))
  (and (mem (tuple2 a2 (set1 (tuple2 a1 c1)))
  (Tuple2 a2 (set1 (tuple2 a1 c1)) x (t2tb129 y)) p) (not (mem11 y t)))))))

;; mem_range_substraction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (tuple21 a c))) (x uni) (y (tuple21 a c)))
  (= (mem (tuple2 a2 (tuple2 a1 c1)) (Tuple2 a2 (tuple2 a1 c1) x (t2tb133 y))
  (range_substraction (tuple2 a1 c1) a2 p (t2tb129 t)))
  (and (mem (tuple2 a2 (tuple2 a1 c1))
  (Tuple2 a2 (tuple2 a1 c1) x (t2tb133 y)) p) (not (mem10 y t)))))))

;; mem_range_substraction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (tuple21 b c))) (x uni) (y (tuple21 b c)))
  (= (mem (tuple2 a2 (tuple2 b1 c1)) (Tuple2 a2 (tuple2 b1 c1) x (t2tb134 y))
  (range_substraction (tuple2 b1 c1) a2 p (t2tb131 t)))
  (and (mem (tuple2 a2 (tuple2 b1 c1))
  (Tuple2 a2 (tuple2 b1 c1) x (t2tb134 y)) p) (not (mem8 y t)))))))

;; mem_range_substraction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set c)) (x uni) (y c))
  (= (mem (tuple2 a2 c1) (Tuple2 a2 c1 x (t2tb135 y))
  (range_substraction c1 a2 p (t2tb132 t)))
  (and (mem (tuple2 a2 c1) (Tuple2 a2 c1 x (t2tb135 y)) p) (not (mem7 y t)))))))

;; mem_range_substraction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (tuple21 b a))) (x uni) (y (tuple21 b a)))
  (= (mem (tuple2 a2 (tuple2 b1 a1)) (Tuple2 a2 (tuple2 b1 a1) x (t2tb38 y))
  (range_substraction (tuple2 b1 a1) a2 p (t2tb37 t)))
  (and (mem (tuple2 a2 (tuple2 b1 a1))
  (Tuple2 a2 (tuple2 b1 a1) x (t2tb38 y)) p) (not (mem5 y t)))))))

;; mem_range_substraction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (set (tuple21 a b)))) (x uni) (y (set (tuple21 a
  b))))
  (= (mem (tuple2 a2 (set1 (tuple2 a1 b1)))
  (Tuple2 a2 (set1 (tuple2 a1 b1)) x (t2tb11 y))
  (range_substraction (set1 (tuple2 a1 b1)) a2 p (t2tb10 t)))
  (and (mem (tuple2 a2 (set1 (tuple2 a1 b1)))
  (Tuple2 a2 (set1 (tuple2 a1 b1)) x (t2tb11 y)) p) (not (mem4 y t)))))))

;; mem_range_substraction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (tuple21 a b))) (x uni) (y (tuple21 a b)))
  (= (mem (tuple2 a2 (tuple2 a1 b1)) (Tuple2 a2 (tuple2 a1 b1) x (t2tb13 y))
  (range_substraction (tuple2 a1 b1) a2 p (t2tb11 t)))
  (and (mem (tuple2 a2 (tuple2 a1 b1))
  (Tuple2 a2 (tuple2 a1 b1) x (t2tb13 y)) p) (not (mem3 y t)))))))

;; mem_range_substraction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set b)) (x uni) (y b))
  (= (mem (tuple2 a2 b1) (Tuple2 a2 b1 x (t2tb14 y))
  (range_substraction b1 a2 p (t2tb12 t)))
  (and (mem (tuple2 a2 b1) (Tuple2 a2 b1 x (t2tb14 y)) p) (not (mem2 y t)))))))

;; mem_range_substraction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set a)) (x uni) (y a))
  (= (mem (tuple2 a2 a1) (Tuple2 a2 a1 x (t2tb2 y))
  (range_substraction a1 a2 p (t2tb1 t)))
  (and (mem (tuple2 a2 a1) (Tuple2 a2 a1 x (t2tb2 y)) p) (not (mem1 y t)))))))

;; mem_range_substraction
  (assert
  (forall ((p (set (tuple21 b c))) (t (set c)) (x b) (y c))
  (= (mem8 (tb2t134 (Tuple2 b1 c1 (t2tb14 x) (t2tb135 y)))
  (tb2t131 (range_substraction c1 b1 (t2tb131 p) (t2tb132 t))))
  (and (mem8 (tb2t134 (Tuple2 b1 c1 (t2tb14 x) (t2tb135 y))) p)
  (not (mem7 y t))))))

;; mem_range_substraction
  (assert
  (forall ((p (set (tuple21 b a))) (t (set a)) (x b) (y a))
  (= (mem5 (tb2t38 (Tuple2 b1 a1 (t2tb14 x) (t2tb2 y)))
  (tb2t37 (range_substraction a1 b1 (t2tb37 p) (t2tb1 t))))
  (and (mem5 (tb2t38 (Tuple2 b1 a1 (t2tb14 x) (t2tb2 y))) p)
  (not (mem1 y t))))))

;; mem_range_substraction
  (assert
  (forall ((p (set (tuple21 a (tuple21 b c)))) (t (set (tuple21 b c))) (x a)
  (y (tuple21 b c)))
  (= (mem14 (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 y)))
  (tb2t261 (range_substraction (tuple2 b1 c1) a1 (t2tb261 p) (t2tb131 t))))
  (and (mem14 (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 y))) p)
  (not (mem8 y t))))))

;; mem_range_substraction
  (assert
  (forall ((p (set (tuple21 a c))) (t (set c)) (x a) (y c))
  (= (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y)))
  (tb2t129 (range_substraction c1 a1 (t2tb129 p) (t2tb132 t))))
  (and (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y))) p)
  (not (mem7 y t))))))

;; mem_range_substraction
  (assert
  (forall ((p (set (tuple21 a b))) (t (set b)) (x a) (y b))
  (= (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y)))
  (tb2t11 (range_substraction b1 a1 (t2tb11 p) (t2tb12 t))))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y))) p)
  (not (mem2 y t))))))

;; mem_range_substraction
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((p uni) (t uni) (x uni) (y uni))
  (= (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) (range_substraction b2 a2 p t))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) p) (not (mem b2 y t)))))))

(declare-fun image (ty ty uni uni) uni)

;; image_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 b2) (image b2 a2 x x1)))))

(declare-fun image2 ((set (tuple21 b a)) (set b)) (set a))

(declare-fun image1 ((set (tuple21 a b)) (set a)) (set b))

(declare-fun image3 ((set (tuple21 b c)) (set b)) (set c))

(declare-fun image4 ((set (tuple21 a c)) (set a)) (set c))

(declare-fun image8 ((set (tuple21 a (tuple21 b c))) (set a)) (set (tuple21 b
  c)))

;; mem_image
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (w uni) (x (tuple21 a (tuple21 b c))))
  (and
  (=> (mem14 x (tb2t261 (image (tuple2 a1 (tuple2 b1 c1)) a2 p w)))
  (exists ((a3 uni))
  (and (sort a2 a3)
  (and (mem a2 a3 w) (mem (tuple2 a2 (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 a2 (tuple2 a1 (tuple2 b1 c1)) a3 (t2tb260 x)) p)))))
  (=>
  (exists ((a3 uni))
  (and (mem a2 a3 w) (mem (tuple2 a2 (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 a2 (tuple2 a1 (tuple2 b1 c1)) a3 (t2tb260 x)) p))) (mem14 x
  (tb2t261 (image (tuple2 a1 (tuple2 b1 c1)) a2 p w))))))))

;; mem_image
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (w uni) (x (set (tuple21 a c))))
  (and
  (=> (mem11 x (tb2t128 (image (set1 (tuple2 a1 c1)) a2 p w)))
  (exists ((a3 uni))
  (and (sort a2 a3)
  (and (mem a2 a3 w) (mem (tuple2 a2 (set1 (tuple2 a1 c1)))
  (Tuple2 a2 (set1 (tuple2 a1 c1)) a3 (t2tb129 x)) p)))))
  (=>
  (exists ((a3 uni))
  (and (mem a2 a3 w) (mem (tuple2 a2 (set1 (tuple2 a1 c1)))
  (Tuple2 a2 (set1 (tuple2 a1 c1)) a3 (t2tb129 x)) p))) (mem11 x
  (tb2t128 (image (set1 (tuple2 a1 c1)) a2 p w))))))))

;; mem_image
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (w uni) (x (tuple21 a c)))
  (and
  (=> (mem10 x (tb2t129 (image (tuple2 a1 c1) a2 p w)))
  (exists ((a3 uni))
  (and (sort a2 a3)
  (and (mem a2 a3 w) (mem (tuple2 a2 (tuple2 a1 c1))
  (Tuple2 a2 (tuple2 a1 c1) a3 (t2tb133 x)) p)))))
  (=>
  (exists ((a3 uni))
  (and (mem a2 a3 w) (mem (tuple2 a2 (tuple2 a1 c1))
  (Tuple2 a2 (tuple2 a1 c1) a3 (t2tb133 x)) p))) (mem10 x
  (tb2t129 (image (tuple2 a1 c1) a2 p w))))))))

;; mem_image
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (w uni) (x (tuple21 b c)))
  (and
  (=> (mem8 x (tb2t131 (image (tuple2 b1 c1) a2 p w)))
  (exists ((a3 uni))
  (and (sort a2 a3)
  (and (mem a2 a3 w) (mem (tuple2 a2 (tuple2 b1 c1))
  (Tuple2 a2 (tuple2 b1 c1) a3 (t2tb134 x)) p)))))
  (=>
  (exists ((a3 uni))
  (and (mem a2 a3 w) (mem (tuple2 a2 (tuple2 b1 c1))
  (Tuple2 a2 (tuple2 b1 c1) a3 (t2tb134 x)) p))) (mem8 x
  (tb2t131 (image (tuple2 b1 c1) a2 p w))))))))

;; mem_image
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (w uni) (x c))
  (and
  (=> (mem7 x (tb2t132 (image c1 a2 p w)))
  (exists ((a3 uni))
  (and (sort a2 a3)
  (and (mem a2 a3 w) (mem (tuple2 a2 c1) (Tuple2 a2 c1 a3 (t2tb135 x)) p)))))
  (=>
  (exists ((a3 uni))
  (and (mem a2 a3 w) (mem (tuple2 a2 c1) (Tuple2 a2 c1 a3 (t2tb135 x)) p)))
  (mem7 x (tb2t132 (image c1 a2 p w))))))))

;; mem_image
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (w uni) (x (tuple21 b a)))
  (and
  (=> (mem5 x (tb2t37 (image (tuple2 b1 a1) a2 p w)))
  (exists ((a3 uni))
  (and (sort a2 a3)
  (and (mem a2 a3 w) (mem (tuple2 a2 (tuple2 b1 a1))
  (Tuple2 a2 (tuple2 b1 a1) a3 (t2tb38 x)) p)))))
  (=>
  (exists ((a3 uni))
  (and (mem a2 a3 w) (mem (tuple2 a2 (tuple2 b1 a1))
  (Tuple2 a2 (tuple2 b1 a1) a3 (t2tb38 x)) p))) (mem5 x
  (tb2t37 (image (tuple2 b1 a1) a2 p w))))))))

;; mem_image
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (w uni) (x (set (tuple21 a b))))
  (and
  (=> (mem4 x (tb2t10 (image (set1 (tuple2 a1 b1)) a2 p w)))
  (exists ((a3 uni))
  (and (sort a2 a3)
  (and (mem a2 a3 w) (mem (tuple2 a2 (set1 (tuple2 a1 b1)))
  (Tuple2 a2 (set1 (tuple2 a1 b1)) a3 (t2tb11 x)) p)))))
  (=>
  (exists ((a3 uni))
  (and (mem a2 a3 w) (mem (tuple2 a2 (set1 (tuple2 a1 b1)))
  (Tuple2 a2 (set1 (tuple2 a1 b1)) a3 (t2tb11 x)) p))) (mem4 x
  (tb2t10 (image (set1 (tuple2 a1 b1)) a2 p w))))))))

;; mem_image
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (w uni) (x (tuple21 a b)))
  (and
  (=> (mem3 x (tb2t11 (image (tuple2 a1 b1) a2 p w)))
  (exists ((a3 uni))
  (and (sort a2 a3)
  (and (mem a2 a3 w) (mem (tuple2 a2 (tuple2 a1 b1))
  (Tuple2 a2 (tuple2 a1 b1) a3 (t2tb13 x)) p)))))
  (=>
  (exists ((a3 uni))
  (and (mem a2 a3 w) (mem (tuple2 a2 (tuple2 a1 b1))
  (Tuple2 a2 (tuple2 a1 b1) a3 (t2tb13 x)) p))) (mem3 x
  (tb2t11 (image (tuple2 a1 b1) a2 p w))))))))

;; mem_image
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (w uni) (x b))
  (and
  (=> (mem2 x (tb2t12 (image b1 a2 p w)))
  (exists ((a3 uni))
  (and (sort a2 a3)
  (and (mem a2 a3 w) (mem (tuple2 a2 b1) (Tuple2 a2 b1 a3 (t2tb14 x)) p)))))
  (=>
  (exists ((a3 uni))
  (and (mem a2 a3 w) (mem (tuple2 a2 b1) (Tuple2 a2 b1 a3 (t2tb14 x)) p)))
  (mem2 x (tb2t12 (image b1 a2 p w))))))))

;; mem_image
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (w uni) (x a))
  (and
  (=> (mem1 x (tb2t1 (image a1 a2 p w)))
  (exists ((a3 uni))
  (and (sort a2 a3)
  (and (mem a2 a3 w) (mem (tuple2 a2 a1) (Tuple2 a2 a1 a3 (t2tb2 x)) p)))))
  (=>
  (exists ((a3 uni))
  (and (mem a2 a3 w) (mem (tuple2 a2 a1) (Tuple2 a2 a1 a3 (t2tb2 x)) p)))
  (mem1 x (tb2t1 (image a1 a2 p w))))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a (tuple21 b c)) (tuple21 a (tuple21 b
  c))))) (w (set (tuple21 a (tuple21 b c)))) (x (tuple21 a (tuple21 b c))))
  (= (mem14 x
  (tb2t261
  (image (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 (tuple2 b1 c1)) (t2tb4425 p)
  (t2tb261 w))))
  (exists ((a2 (tuple21 a (tuple21 b c))))
  (and (mem14 a2 w) (mem
  (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 (tuple2 b1 c1)) (t2tb260 a2)
  (t2tb260 x)) (t2tb4425 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a (tuple21 b c)) (set (tuple21 a c)))))
  (w (set (tuple21 a (tuple21 b c)))) (x (set (tuple21 a c))))
  (= (mem11 x
  (tb2t128
  (image (set1 (tuple2 a1 c1)) (tuple2 a1 (tuple2 b1 c1)) (t2tb4427 p)
  (t2tb261 w))))
  (exists ((a2 (tuple21 a (tuple21 b c))))
  (and (mem14 a2 w) (mem
  (tuple2 (tuple2 a1 (tuple2 b1 c1)) (set1 (tuple2 a1 c1)))
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) (set1 (tuple2 a1 c1)) (t2tb260 a2)
  (t2tb129 x)) (t2tb4427 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a (tuple21 b c)) (tuple21 a c))))
  (w (set (tuple21 a (tuple21 b c)))) (x (tuple21 a c)))
  (= (mem10 x
  (tb2t129
  (image (tuple2 a1 c1) (tuple2 a1 (tuple2 b1 c1)) (t2tb4429 p) (t2tb261 w))))
  (exists ((a2 (tuple21 a (tuple21 b c))))
  (and (mem14 a2 w) (mem (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 c1))
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 c1) (t2tb260 a2) (t2tb133 x))
  (t2tb4429 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a (tuple21 b c)) (tuple21 b c))))
  (w (set (tuple21 a (tuple21 b c)))) (x (tuple21 b c)))
  (= (mem8 x
  (tb2t131
  (image (tuple2 b1 c1) (tuple2 a1 (tuple2 b1 c1)) (t2tb5145 p) (t2tb261 w))))
  (exists ((a2 (tuple21 a (tuple21 b c))))
  (and (mem14 a2 w) (mem (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 b1 c1))
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 b1 c1) (t2tb260 a2) (t2tb134 x))
  (t2tb5145 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a (tuple21 b c)) c))) (w (set (tuple21 a
  (tuple21 b c)))) (x c))
  (= (mem7 x
  (tb2t132 (image c1 (tuple2 a1 (tuple2 b1 c1)) (t2tb4431 p) (t2tb261 w))))
  (exists ((a2 (tuple21 a (tuple21 b c))))
  (and (mem14 a2 w) (mem (tuple2 (tuple2 a1 (tuple2 b1 c1)) c1)
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) c1 (t2tb260 a2) (t2tb135 x))
  (t2tb4431 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a (tuple21 b c)) (tuple21 b a))))
  (w (set (tuple21 a (tuple21 b c)))) (x (tuple21 b a)))
  (= (mem5 x
  (tb2t37
  (image (tuple2 b1 a1) (tuple2 a1 (tuple2 b1 c1)) (t2tb5147 p) (t2tb261 w))))
  (exists ((a2 (tuple21 a (tuple21 b c))))
  (and (mem14 a2 w) (mem (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 b1 a1))
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 b1 a1) (t2tb260 a2) (t2tb38 x))
  (t2tb5147 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a (tuple21 b c)) (set (tuple21 a b)))))
  (w (set (tuple21 a (tuple21 b c)))) (x (set (tuple21 a b))))
  (= (mem4 x
  (tb2t10
  (image (set1 (tuple2 a1 b1)) (tuple2 a1 (tuple2 b1 c1)) (t2tb4433 p)
  (t2tb261 w))))
  (exists ((a2 (tuple21 a (tuple21 b c))))
  (and (mem14 a2 w) (mem
  (tuple2 (tuple2 a1 (tuple2 b1 c1)) (set1 (tuple2 a1 b1)))
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) (set1 (tuple2 a1 b1)) (t2tb260 a2)
  (t2tb11 x)) (t2tb4433 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a (tuple21 b c)) (tuple21 a b))))
  (w (set (tuple21 a (tuple21 b c)))) (x (tuple21 a b)))
  (= (mem3 x
  (tb2t11
  (image (tuple2 a1 b1) (tuple2 a1 (tuple2 b1 c1)) (t2tb4435 p) (t2tb261 w))))
  (exists ((a2 (tuple21 a (tuple21 b c))))
  (and (mem14 a2 w) (mem (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 b1))
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 b1) (t2tb260 a2) (t2tb13 x))
  (t2tb4435 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a (tuple21 b c)) b))) (w (set (tuple21 a
  (tuple21 b c)))) (x b))
  (= (mem2 x
  (tb2t12 (image b1 (tuple2 a1 (tuple2 b1 c1)) (t2tb4437 p) (t2tb261 w))))
  (exists ((a2 (tuple21 a (tuple21 b c))))
  (and (mem14 a2 w) (mem (tuple2 (tuple2 a1 (tuple2 b1 c1)) b1)
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) b1 (t2tb260 a2) (t2tb14 x))
  (t2tb4437 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a (tuple21 b c)) a))) (w (set (tuple21 a
  (tuple21 b c)))) (x a))
  (= (mem1 x
  (tb2t1 (image a1 (tuple2 a1 (tuple2 b1 c1)) (t2tb4440 p) (t2tb261 w))))
  (exists ((a2 (tuple21 a (tuple21 b c))))
  (and (mem14 a2 w) (mem (tuple2 (tuple2 a1 (tuple2 b1 c1)) a1)
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) a1 (t2tb260 a2) (t2tb2 x))
  (t2tb4440 p)))))))

;; mem_image
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (w (set (tuple21 a (tuple21 b c)))) (x uni))
  (= (mem b2 x (image b2 (tuple2 a1 (tuple2 b1 c1)) p (t2tb261 w)))
  (exists ((a2 (tuple21 a (tuple21 b c))))
  (and (mem14 a2 w) (mem (tuple2 (tuple2 a1 (tuple2 b1 c1)) b2)
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) b2 (t2tb260 a2) x) p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a c)) (tuple21 a (tuple21 b c)))))
  (w (set (set (tuple21 a c)))) (x (tuple21 a (tuple21 b c))))
  (= (mem14 x
  (tb2t261
  (image (tuple2 a1 (tuple2 b1 c1)) (set1 (tuple2 a1 c1)) (t2tb4461 p)
  (t2tb128 w))))
  (exists ((a2 (set (tuple21 a c))))
  (and (mem11 a2 w) (mem
  (tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 (tuple2 b1 c1)) (t2tb129 a2)
  (t2tb260 x)) (t2tb4461 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a c)) (set (tuple21 a c)))))
  (w (set (set (tuple21 a c)))) (x (set (tuple21 a c))))
  (= (mem11 x
  (tb2t128
  (image (set1 (tuple2 a1 c1)) (set1 (tuple2 a1 c1)) (t2tb4463 p)
  (t2tb128 w))))
  (exists ((a2 (set (tuple21 a c))))
  (and (mem11 a2 w) (mem (tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 a1 c1)))
  (Tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 a1 c1)) (t2tb129 a2)
  (t2tb129 x)) (t2tb4463 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a c)) (tuple21 a c))))
  (w (set (set (tuple21 a c)))) (x (tuple21 a c)))
  (= (mem10 x
  (tb2t129
  (image (tuple2 a1 c1) (set1 (tuple2 a1 c1)) (t2tb4465 p) (t2tb128 w))))
  (exists ((a2 (set (tuple21 a c))))
  (and (mem11 a2 w) (mem (tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 c1))
  (Tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 c1) (t2tb129 a2) (t2tb133 x))
  (t2tb4465 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a c)) (tuple21 b c))))
  (w (set (set (tuple21 a c)))) (x (tuple21 b c)))
  (= (mem8 x
  (tb2t131
  (image (tuple2 b1 c1) (set1 (tuple2 a1 c1)) (t2tb5150 p) (t2tb128 w))))
  (exists ((a2 (set (tuple21 a c))))
  (and (mem11 a2 w) (mem (tuple2 (set1 (tuple2 a1 c1)) (tuple2 b1 c1))
  (Tuple2 (set1 (tuple2 a1 c1)) (tuple2 b1 c1) (t2tb129 a2) (t2tb134 x))
  (t2tb5150 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a c)) c))) (w (set (set (tuple21 a
  c)))) (x c))
  (= (mem7 x
  (tb2t132 (image c1 (set1 (tuple2 a1 c1)) (t2tb4467 p) (t2tb128 w))))
  (exists ((a2 (set (tuple21 a c))))
  (and (mem11 a2 w) (mem (tuple2 (set1 (tuple2 a1 c1)) c1)
  (Tuple2 (set1 (tuple2 a1 c1)) c1 (t2tb129 a2) (t2tb135 x)) (t2tb4467 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a c)) (tuple21 b a))))
  (w (set (set (tuple21 a c)))) (x (tuple21 b a)))
  (= (mem5 x
  (tb2t37
  (image (tuple2 b1 a1) (set1 (tuple2 a1 c1)) (t2tb5151 p) (t2tb128 w))))
  (exists ((a2 (set (tuple21 a c))))
  (and (mem11 a2 w) (mem (tuple2 (set1 (tuple2 a1 c1)) (tuple2 b1 a1))
  (Tuple2 (set1 (tuple2 a1 c1)) (tuple2 b1 a1) (t2tb129 a2) (t2tb38 x))
  (t2tb5151 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a c)) (set (tuple21 a b)))))
  (w (set (set (tuple21 a c)))) (x (set (tuple21 a b))))
  (= (mem4 x
  (tb2t10
  (image (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 c1)) (t2tb4470 p)
  (t2tb128 w))))
  (exists ((a2 (set (tuple21 a c))))
  (and (mem11 a2 w) (mem (tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 a1 b1)))
  (Tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 a1 b1)) (t2tb129 a2)
  (t2tb11 x)) (t2tb4470 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a c)) (tuple21 a b))))
  (w (set (set (tuple21 a c)))) (x (tuple21 a b)))
  (= (mem3 x
  (tb2t11
  (image (tuple2 a1 b1) (set1 (tuple2 a1 c1)) (t2tb4471 p) (t2tb128 w))))
  (exists ((a2 (set (tuple21 a c))))
  (and (mem11 a2 w) (mem (tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 b1))
  (Tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 b1) (t2tb129 a2) (t2tb13 x))
  (t2tb4471 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a c)) b))) (w (set (set (tuple21 a
  c)))) (x b))
  (= (mem2 x
  (tb2t12 (image b1 (set1 (tuple2 a1 c1)) (t2tb4473 p) (t2tb128 w))))
  (exists ((a2 (set (tuple21 a c))))
  (and (mem11 a2 w) (mem (tuple2 (set1 (tuple2 a1 c1)) b1)
  (Tuple2 (set1 (tuple2 a1 c1)) b1 (t2tb129 a2) (t2tb14 x)) (t2tb4473 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a c)) a))) (w (set (set (tuple21 a
  c)))) (x a))
  (= (mem1 x
  (tb2t1 (image a1 (set1 (tuple2 a1 c1)) (t2tb4475 p) (t2tb128 w))))
  (exists ((a2 (set (tuple21 a c))))
  (and (mem11 a2 w) (mem (tuple2 (set1 (tuple2 a1 c1)) a1)
  (Tuple2 (set1 (tuple2 a1 c1)) a1 (t2tb129 a2) (t2tb2 x)) (t2tb4475 p)))))))

;; mem_image
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (w (set (set (tuple21 a c)))) (x uni))
  (= (mem b2 x (image b2 (set1 (tuple2 a1 c1)) p (t2tb128 w)))
  (exists ((a2 (set (tuple21 a c))))
  (and (mem11 a2 w) (mem (tuple2 (set1 (tuple2 a1 c1)) b2)
  (Tuple2 (set1 (tuple2 a1 c1)) b2 (t2tb129 a2) x) p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a c) (tuple21 a (tuple21 b c)))))
  (w (set (tuple21 a c))) (x (tuple21 a (tuple21 b c))))
  (= (mem14 x
  (tb2t261
  (image (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 c1) (t2tb4491 p) (t2tb129 w))))
  (exists ((a2 (tuple21 a c)))
  (and (mem10 a2 w) (mem (tuple2 (tuple2 a1 c1) (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 (tuple2 a1 c1) (tuple2 a1 (tuple2 b1 c1)) (t2tb133 a2) (t2tb260 x))
  (t2tb4491 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a c) (set (tuple21 a c)))))
  (w (set (tuple21 a c))) (x (set (tuple21 a c))))
  (= (mem11 x
  (tb2t128
  (image (set1 (tuple2 a1 c1)) (tuple2 a1 c1) (t2tb4493 p) (t2tb129 w))))
  (exists ((a2 (tuple21 a c)))
  (and (mem10 a2 w) (mem (tuple2 (tuple2 a1 c1) (set1 (tuple2 a1 c1)))
  (Tuple2 (tuple2 a1 c1) (set1 (tuple2 a1 c1)) (t2tb133 a2) (t2tb129 x))
  (t2tb4493 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a c) (tuple21 a c)))) (w (set (tuple21 a
  c))) (x (tuple21 a c)))
  (= (mem10 x
  (tb2t129 (image (tuple2 a1 c1) (tuple2 a1 c1) (t2tb157 p) (t2tb129 w))))
  (exists ((a2 (tuple21 a c)))
  (and (mem10 a2 w) (mem (tuple2 (tuple2 a1 c1) (tuple2 a1 c1))
  (Tuple2 (tuple2 a1 c1) (tuple2 a1 c1) (t2tb133 a2) (t2tb133 x))
  (t2tb157 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a c) (tuple21 b c)))) (w (set (tuple21 a
  c))) (x (tuple21 b c)))
  (= (mem8 x
  (tb2t131 (image (tuple2 b1 c1) (tuple2 a1 c1) (t2tb1091 p) (t2tb129 w))))
  (exists ((a2 (tuple21 a c)))
  (and (mem10 a2 w) (mem (tuple2 (tuple2 a1 c1) (tuple2 b1 c1))
  (Tuple2 (tuple2 a1 c1) (tuple2 b1 c1) (t2tb133 a2) (t2tb134 x))
  (t2tb1091 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a c) c))) (w (set (tuple21 a c))) (x c))
  (= (mem7 x (tb2t132 (image c1 (tuple2 a1 c1) (t2tb162 p) (t2tb129 w))))
  (exists ((a2 (tuple21 a c)))
  (and (mem10 a2 w) (mem (tuple2 (tuple2 a1 c1) c1)
  (Tuple2 (tuple2 a1 c1) c1 (t2tb133 a2) (t2tb135 x)) (t2tb162 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a c) (tuple21 b a)))) (w (set (tuple21 a
  c))) (x (tuple21 b a)))
  (= (mem5 x
  (tb2t37 (image (tuple2 b1 a1) (tuple2 a1 c1) (t2tb5153 p) (t2tb129 w))))
  (exists ((a2 (tuple21 a c)))
  (and (mem10 a2 w) (mem (tuple2 (tuple2 a1 c1) (tuple2 b1 a1))
  (Tuple2 (tuple2 a1 c1) (tuple2 b1 a1) (t2tb133 a2) (t2tb38 x))
  (t2tb5153 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a c) (set (tuple21 a b)))))
  (w (set (tuple21 a c))) (x (set (tuple21 a b))))
  (= (mem4 x
  (tb2t10
  (image (set1 (tuple2 a1 b1)) (tuple2 a1 c1) (t2tb164 p) (t2tb129 w))))
  (exists ((a2 (tuple21 a c)))
  (and (mem10 a2 w) (mem (tuple2 (tuple2 a1 c1) (set1 (tuple2 a1 b1)))
  (Tuple2 (tuple2 a1 c1) (set1 (tuple2 a1 b1)) (t2tb133 a2) (t2tb11 x))
  (t2tb164 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a c) (tuple21 a b)))) (w (set (tuple21 a
  c))) (x (tuple21 a b)))
  (= (mem3 x
  (tb2t11 (image (tuple2 a1 b1) (tuple2 a1 c1) (t2tb166 p) (t2tb129 w))))
  (exists ((a2 (tuple21 a c)))
  (and (mem10 a2 w) (mem (tuple2 (tuple2 a1 c1) (tuple2 a1 b1))
  (Tuple2 (tuple2 a1 c1) (tuple2 a1 b1) (t2tb133 a2) (t2tb13 x))
  (t2tb166 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a c) b))) (w (set (tuple21 a c))) (x b))
  (= (mem2 x (tb2t12 (image b1 (tuple2 a1 c1) (t2tb168 p) (t2tb129 w))))
  (exists ((a2 (tuple21 a c)))
  (and (mem10 a2 w) (mem (tuple2 (tuple2 a1 c1) b1)
  (Tuple2 (tuple2 a1 c1) b1 (t2tb133 a2) (t2tb14 x)) (t2tb168 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a c) a))) (w (set (tuple21 a c))) (x a))
  (= (mem1 x (tb2t1 (image a1 (tuple2 a1 c1) (t2tb170 p) (t2tb129 w))))
  (exists ((a2 (tuple21 a c)))
  (and (mem10 a2 w) (mem (tuple2 (tuple2 a1 c1) a1)
  (Tuple2 (tuple2 a1 c1) a1 (t2tb133 a2) (t2tb2 x)) (t2tb170 p)))))))

;; mem_image
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (w (set (tuple21 a c))) (x uni))
  (= (mem b2 x (image b2 (tuple2 a1 c1) p (t2tb129 w)))
  (exists ((a2 (tuple21 a c)))
  (and (mem10 a2 w) (mem (tuple2 (tuple2 a1 c1) b2)
  (Tuple2 (tuple2 a1 c1) b2 (t2tb133 a2) x) p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 b c) (tuple21 a (tuple21 b c)))))
  (w (set (tuple21 b c))) (x (tuple21 a (tuple21 b c))))
  (= (mem14 x
  (tb2t261
  (image (tuple2 a1 (tuple2 b1 c1)) (tuple2 b1 c1) (t2tb5155 p) (t2tb131 w))))
  (exists ((a2 (tuple21 b c)))
  (and (mem8 a2 w) (mem (tuple2 (tuple2 b1 c1) (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 (tuple2 b1 c1) (tuple2 a1 (tuple2 b1 c1)) (t2tb134 a2) (t2tb260 x))
  (t2tb5155 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 b c) (set (tuple21 a c)))))
  (w (set (tuple21 b c))) (x (set (tuple21 a c))))
  (= (mem11 x
  (tb2t128
  (image (set1 (tuple2 a1 c1)) (tuple2 b1 c1) (t2tb5157 p) (t2tb131 w))))
  (exists ((a2 (tuple21 b c)))
  (and (mem8 a2 w) (mem (tuple2 (tuple2 b1 c1) (set1 (tuple2 a1 c1)))
  (Tuple2 (tuple2 b1 c1) (set1 (tuple2 a1 c1)) (t2tb134 a2) (t2tb129 x))
  (t2tb5157 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 b c) (tuple21 a c)))) (w (set (tuple21 b
  c))) (x (tuple21 a c)))
  (= (mem10 x
  (tb2t129 (image (tuple2 a1 c1) (tuple2 b1 c1) (t2tb1109 p) (t2tb131 w))))
  (exists ((a2 (tuple21 b c)))
  (and (mem8 a2 w) (mem (tuple2 (tuple2 b1 c1) (tuple2 a1 c1))
  (Tuple2 (tuple2 b1 c1) (tuple2 a1 c1) (t2tb134 a2) (t2tb133 x))
  (t2tb1109 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 b c) (tuple21 b c)))) (w (set (tuple21 b
  c))) (x (tuple21 b c)))
  (= (mem8 x
  (tb2t131 (image (tuple2 b1 c1) (tuple2 b1 c1) (t2tb1113 p) (t2tb131 w))))
  (exists ((a2 (tuple21 b c)))
  (and (mem8 a2 w) (mem (tuple2 (tuple2 b1 c1) (tuple2 b1 c1))
  (Tuple2 (tuple2 b1 c1) (tuple2 b1 c1) (t2tb134 a2) (t2tb134 x))
  (t2tb1113 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 b c) c))) (w (set (tuple21 b c))) (x c))
  (= (mem7 x (tb2t132 (image c1 (tuple2 b1 c1) (t2tb1115 p) (t2tb131 w))))
  (exists ((a2 (tuple21 b c)))
  (and (mem8 a2 w) (mem (tuple2 (tuple2 b1 c1) c1)
  (Tuple2 (tuple2 b1 c1) c1 (t2tb134 a2) (t2tb135 x)) (t2tb1115 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 b c) (tuple21 b a)))) (w (set (tuple21 b
  c))) (x (tuple21 b a)))
  (= (mem5 x
  (tb2t37 (image (tuple2 b1 a1) (tuple2 b1 c1) (t2tb5159 p) (t2tb131 w))))
  (exists ((a2 (tuple21 b c)))
  (and (mem8 a2 w) (mem (tuple2 (tuple2 b1 c1) (tuple2 b1 a1))
  (Tuple2 (tuple2 b1 c1) (tuple2 b1 a1) (t2tb134 a2) (t2tb38 x))
  (t2tb5159 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 b c) (set (tuple21 a b)))))
  (w (set (tuple21 b c))) (x (set (tuple21 a b))))
  (= (mem4 x
  (tb2t10
  (image (set1 (tuple2 a1 b1)) (tuple2 b1 c1) (t2tb1117 p) (t2tb131 w))))
  (exists ((a2 (tuple21 b c)))
  (and (mem8 a2 w) (mem (tuple2 (tuple2 b1 c1) (set1 (tuple2 a1 b1)))
  (Tuple2 (tuple2 b1 c1) (set1 (tuple2 a1 b1)) (t2tb134 a2) (t2tb11 x))
  (t2tb1117 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 b c) (tuple21 a b)))) (w (set (tuple21 b
  c))) (x (tuple21 a b)))
  (= (mem3 x
  (tb2t11 (image (tuple2 a1 b1) (tuple2 b1 c1) (t2tb1119 p) (t2tb131 w))))
  (exists ((a2 (tuple21 b c)))
  (and (mem8 a2 w) (mem (tuple2 (tuple2 b1 c1) (tuple2 a1 b1))
  (Tuple2 (tuple2 b1 c1) (tuple2 a1 b1) (t2tb134 a2) (t2tb13 x))
  (t2tb1119 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 b c) b))) (w (set (tuple21 b c))) (x b))
  (= (mem2 x (tb2t12 (image b1 (tuple2 b1 c1) (t2tb1121 p) (t2tb131 w))))
  (exists ((a2 (tuple21 b c)))
  (and (mem8 a2 w) (mem (tuple2 (tuple2 b1 c1) b1)
  (Tuple2 (tuple2 b1 c1) b1 (t2tb134 a2) (t2tb14 x)) (t2tb1121 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 b c) a))) (w (set (tuple21 b c))) (x a))
  (= (mem1 x (tb2t1 (image a1 (tuple2 b1 c1) (t2tb1124 p) (t2tb131 w))))
  (exists ((a2 (tuple21 b c)))
  (and (mem8 a2 w) (mem (tuple2 (tuple2 b1 c1) a1)
  (Tuple2 (tuple2 b1 c1) a1 (t2tb134 a2) (t2tb2 x)) (t2tb1124 p)))))))

;; mem_image
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (w (set (tuple21 b c))) (x uni))
  (= (mem b2 x (image b2 (tuple2 b1 c1) p (t2tb131 w)))
  (exists ((a2 (tuple21 b c)))
  (and (mem8 a2 w) (mem (tuple2 (tuple2 b1 c1) b2)
  (Tuple2 (tuple2 b1 c1) b2 (t2tb134 a2) x) p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 c (tuple21 a (tuple21 b c))))) (w (set c))
  (x (tuple21 a (tuple21 b c))))
  (= (mem14 x
  (tb2t261 (image (tuple2 a1 (tuple2 b1 c1)) c1 (t2tb4508 p) (t2tb132 w))))
  (exists ((a2 c))
  (and (mem7 a2 w) (mem (tuple2 c1 (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 c1 (tuple2 a1 (tuple2 b1 c1)) (t2tb135 a2) (t2tb260 x))
  (t2tb4508 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 c (set (tuple21 a c))))) (w (set c))
  (x (set (tuple21 a c))))
  (= (mem11 x
  (tb2t128 (image (set1 (tuple2 a1 c1)) c1 (t2tb4510 p) (t2tb132 w))))
  (exists ((a2 c))
  (and (mem7 a2 w) (mem (tuple2 c1 (set1 (tuple2 a1 c1)))
  (Tuple2 c1 (set1 (tuple2 a1 c1)) (t2tb135 a2) (t2tb129 x)) (t2tb4510 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 c (tuple21 a c)))) (w (set c)) (x (tuple21 a c)))
  (= (mem10 x (tb2t129 (image (tuple2 a1 c1) c1 (t2tb210 p) (t2tb132 w))))
  (exists ((a2 c))
  (and (mem7 a2 w) (mem (tuple2 c1 (tuple2 a1 c1))
  (Tuple2 c1 (tuple2 a1 c1) (t2tb135 a2) (t2tb133 x)) (t2tb210 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 c (tuple21 b c)))) (w (set c)) (x (tuple21 b c)))
  (= (mem8 x (tb2t131 (image (tuple2 b1 c1) c1 (t2tb1127 p) (t2tb132 w))))
  (exists ((a2 c))
  (and (mem7 a2 w) (mem (tuple2 c1 (tuple2 b1 c1))
  (Tuple2 c1 (tuple2 b1 c1) (t2tb135 a2) (t2tb134 x)) (t2tb1127 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 c c))) (w (set c)) (x c))
  (= (mem7 x (tb2t132 (image c1 c1 (t2tb216 p) (t2tb132 w))))
  (exists ((a2 c))
  (and (mem7 a2 w) (mem (tuple2 c1 c1)
  (Tuple2 c1 c1 (t2tb135 a2) (t2tb135 x)) (t2tb216 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 c (tuple21 b a)))) (w (set c)) (x (tuple21 b a)))
  (= (mem5 x (tb2t37 (image (tuple2 b1 a1) c1 (t2tb5161 p) (t2tb132 w))))
  (exists ((a2 c))
  (and (mem7 a2 w) (mem (tuple2 c1 (tuple2 b1 a1))
  (Tuple2 c1 (tuple2 b1 a1) (t2tb135 a2) (t2tb38 x)) (t2tb5161 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 c (set (tuple21 a b))))) (w (set c))
  (x (set (tuple21 a b))))
  (= (mem4 x
  (tb2t10 (image (set1 (tuple2 a1 b1)) c1 (t2tb218 p) (t2tb132 w))))
  (exists ((a2 c))
  (and (mem7 a2 w) (mem (tuple2 c1 (set1 (tuple2 a1 b1)))
  (Tuple2 c1 (set1 (tuple2 a1 b1)) (t2tb135 a2) (t2tb11 x)) (t2tb218 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 c (tuple21 a b)))) (w (set c)) (x (tuple21 a b)))
  (= (mem3 x (tb2t11 (image (tuple2 a1 b1) c1 (t2tb220 p) (t2tb132 w))))
  (exists ((a2 c))
  (and (mem7 a2 w) (mem (tuple2 c1 (tuple2 a1 b1))
  (Tuple2 c1 (tuple2 a1 b1) (t2tb135 a2) (t2tb13 x)) (t2tb220 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 c b))) (w (set c)) (x b))
  (= (mem2 x (tb2t12 (image b1 c1 (t2tb222 p) (t2tb132 w))))
  (exists ((a2 c))
  (and (mem7 a2 w) (mem (tuple2 c1 b1) (Tuple2 c1 b1 (t2tb135 a2) (t2tb14 x))
  (t2tb222 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 c a))) (w (set c)) (x a))
  (= (mem1 x (tb2t1 (image a1 c1 (t2tb224 p) (t2tb132 w))))
  (exists ((a2 c))
  (and (mem7 a2 w) (mem (tuple2 c1 a1) (Tuple2 c1 a1 (t2tb135 a2) (t2tb2 x))
  (t2tb224 p)))))))

;; mem_image
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (w (set c)) (x uni))
  (= (mem b2 x (image b2 c1 p (t2tb132 w)))
  (exists ((a2 c))
  (and (mem7 a2 w) (mem (tuple2 c1 b2) (Tuple2 c1 b2 (t2tb135 a2) x) p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 b a) (tuple21 a (tuple21 b c)))))
  (w (set (tuple21 b a))) (x (tuple21 a (tuple21 b c))))
  (= (mem14 x
  (tb2t261
  (image (tuple2 a1 (tuple2 b1 c1)) (tuple2 b1 a1) (t2tb5163 p) (t2tb37 w))))
  (exists ((a2 (tuple21 b a)))
  (and (mem5 a2 w) (mem (tuple2 (tuple2 b1 a1) (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 (tuple2 b1 a1) (tuple2 a1 (tuple2 b1 c1)) (t2tb38 a2) (t2tb260 x))
  (t2tb5163 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 b a) (set (tuple21 a c)))))
  (w (set (tuple21 b a))) (x (set (tuple21 a c))))
  (= (mem11 x
  (tb2t128
  (image (set1 (tuple2 a1 c1)) (tuple2 b1 a1) (t2tb5166 p) (t2tb37 w))))
  (exists ((a2 (tuple21 b a)))
  (and (mem5 a2 w) (mem (tuple2 (tuple2 b1 a1) (set1 (tuple2 a1 c1)))
  (Tuple2 (tuple2 b1 a1) (set1 (tuple2 a1 c1)) (t2tb38 a2) (t2tb129 x))
  (t2tb5166 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 b a) (tuple21 a c)))) (w (set (tuple21 b
  a))) (x (tuple21 a c)))
  (= (mem10 x
  (tb2t129 (image (tuple2 a1 c1) (tuple2 b1 a1) (t2tb5167 p) (t2tb37 w))))
  (exists ((a2 (tuple21 b a)))
  (and (mem5 a2 w) (mem (tuple2 (tuple2 b1 a1) (tuple2 a1 c1))
  (Tuple2 (tuple2 b1 a1) (tuple2 a1 c1) (t2tb38 a2) (t2tb133 x))
  (t2tb5167 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 b a) (tuple21 b c)))) (w (set (tuple21 b
  a))) (x (tuple21 b c)))
  (= (mem8 x
  (tb2t131 (image (tuple2 b1 c1) (tuple2 b1 a1) (t2tb5169 p) (t2tb37 w))))
  (exists ((a2 (tuple21 b a)))
  (and (mem5 a2 w) (mem (tuple2 (tuple2 b1 a1) (tuple2 b1 c1))
  (Tuple2 (tuple2 b1 a1) (tuple2 b1 c1) (t2tb38 a2) (t2tb134 x))
  (t2tb5169 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 b a) c))) (w (set (tuple21 b a))) (x c))
  (= (mem7 x (tb2t132 (image c1 (tuple2 b1 a1) (t2tb5171 p) (t2tb37 w))))
  (exists ((a2 (tuple21 b a)))
  (and (mem5 a2 w) (mem (tuple2 (tuple2 b1 a1) c1)
  (Tuple2 (tuple2 b1 a1) c1 (t2tb38 a2) (t2tb135 x)) (t2tb5171 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 b a) (tuple21 b a)))) (w (set (tuple21 b
  a))) (x (tuple21 b a)))
  (= (mem5 x
  (tb2t37 (image (tuple2 b1 a1) (tuple2 b1 a1) (t2tb1057 p) (t2tb37 w))))
  (exists ((a2 (tuple21 b a)))
  (and (mem5 a2 w) (mem (tuple2 (tuple2 b1 a1) (tuple2 b1 a1))
  (Tuple2 (tuple2 b1 a1) (tuple2 b1 a1) (t2tb38 a2) (t2tb38 x))
  (t2tb1057 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 b a) (set (tuple21 a b)))))
  (w (set (tuple21 b a))) (x (set (tuple21 a b))))
  (= (mem4 x
  (tb2t10
  (image (set1 (tuple2 a1 b1)) (tuple2 b1 a1) (t2tb2397 p) (t2tb37 w))))
  (exists ((a2 (tuple21 b a)))
  (and (mem5 a2 w) (mem (tuple2 (tuple2 b1 a1) (set1 (tuple2 a1 b1)))
  (Tuple2 (tuple2 b1 a1) (set1 (tuple2 a1 b1)) (t2tb38 a2) (t2tb11 x))
  (t2tb2397 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 b a) (tuple21 a b)))) (w (set (tuple21 b
  a))) (x (tuple21 a b)))
  (= (mem3 x
  (tb2t11 (image (tuple2 a1 b1) (tuple2 b1 a1) (t2tb1061 p) (t2tb37 w))))
  (exists ((a2 (tuple21 b a)))
  (and (mem5 a2 w) (mem (tuple2 (tuple2 b1 a1) (tuple2 a1 b1))
  (Tuple2 (tuple2 b1 a1) (tuple2 a1 b1) (t2tb38 a2) (t2tb13 x))
  (t2tb1061 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 b a) b))) (w (set (tuple21 b a))) (x b))
  (= (mem2 x (tb2t12 (image b1 (tuple2 b1 a1) (t2tb1063 p) (t2tb37 w))))
  (exists ((a2 (tuple21 b a)))
  (and (mem5 a2 w) (mem (tuple2 (tuple2 b1 a1) b1)
  (Tuple2 (tuple2 b1 a1) b1 (t2tb38 a2) (t2tb14 x)) (t2tb1063 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 b a) a))) (w (set (tuple21 b a))) (x a))
  (= (mem1 x (tb2t1 (image a1 (tuple2 b1 a1) (t2tb1065 p) (t2tb37 w))))
  (exists ((a2 (tuple21 b a)))
  (and (mem5 a2 w) (mem (tuple2 (tuple2 b1 a1) a1)
  (Tuple2 (tuple2 b1 a1) a1 (t2tb38 a2) (t2tb2 x)) (t2tb1065 p)))))))

;; mem_image
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (w (set (tuple21 b a))) (x uni))
  (= (mem b2 x (image b2 (tuple2 b1 a1) p (t2tb37 w)))
  (exists ((a2 (tuple21 b a)))
  (and (mem5 a2 w) (mem (tuple2 (tuple2 b1 a1) b2)
  (Tuple2 (tuple2 b1 a1) b2 (t2tb38 a2) x) p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a b)) (tuple21 a (tuple21 b c)))))
  (w (set (set (tuple21 a b)))) (x (tuple21 a (tuple21 b c))))
  (= (mem14 x
  (tb2t261
  (image (tuple2 a1 (tuple2 b1 c1)) (set1 (tuple2 a1 b1)) (t2tb4526 p)
  (t2tb10 w))))
  (exists ((a2 (set (tuple21 a b))))
  (and (mem4 a2 w) (mem
  (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 (tuple2 b1 c1)) (t2tb11 a2)
  (t2tb260 x)) (t2tb4526 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a b)) (set (tuple21 a c)))))
  (w (set (set (tuple21 a b)))) (x (set (tuple21 a c))))
  (= (mem11 x
  (tb2t128
  (image (set1 (tuple2 a1 c1)) (set1 (tuple2 a1 b1)) (t2tb4528 p) (t2tb10 w))))
  (exists ((a2 (set (tuple21 a b))))
  (and (mem4 a2 w) (mem (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 c1)))
  (Tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 c1)) (t2tb11 a2)
  (t2tb129 x)) (t2tb4528 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a b)) (tuple21 a c))))
  (w (set (set (tuple21 a b)))) (x (tuple21 a c)))
  (= (mem10 x
  (tb2t129
  (image (tuple2 a1 c1) (set1 (tuple2 a1 b1)) (t2tb229 p) (t2tb10 w))))
  (exists ((a2 (set (tuple21 a b))))
  (and (mem4 a2 w) (mem (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 c1))
  (Tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 c1) (t2tb11 a2) (t2tb133 x))
  (t2tb229 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a b)) (tuple21 b c))))
  (w (set (set (tuple21 a b)))) (x (tuple21 b c)))
  (= (mem8 x
  (tb2t131
  (image (tuple2 b1 c1) (set1 (tuple2 a1 b1)) (t2tb1131 p) (t2tb10 w))))
  (exists ((a2 (set (tuple21 a b))))
  (and (mem4 a2 w) (mem (tuple2 (set1 (tuple2 a1 b1)) (tuple2 b1 c1))
  (Tuple2 (set1 (tuple2 a1 b1)) (tuple2 b1 c1) (t2tb11 a2) (t2tb134 x))
  (t2tb1131 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a b)) c))) (w (set (set (tuple21 a
  b)))) (x c))
  (= (mem7 x
  (tb2t132 (image c1 (set1 (tuple2 a1 b1)) (t2tb234 p) (t2tb10 w))))
  (exists ((a2 (set (tuple21 a b))))
  (and (mem4 a2 w) (mem (tuple2 (set1 (tuple2 a1 b1)) c1)
  (Tuple2 (set1 (tuple2 a1 b1)) c1 (t2tb11 a2) (t2tb135 x)) (t2tb234 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a b)) (tuple21 b a))))
  (w (set (set (tuple21 a b)))) (x (tuple21 b a)))
  (= (mem5 x
  (tb2t37
  (image (tuple2 b1 a1) (set1 (tuple2 a1 b1)) (t2tb2399 p) (t2tb10 w))))
  (exists ((a2 (set (tuple21 a b))))
  (and (mem4 a2 w) (mem (tuple2 (set1 (tuple2 a1 b1)) (tuple2 b1 a1))
  (Tuple2 (set1 (tuple2 a1 b1)) (tuple2 b1 a1) (t2tb11 a2) (t2tb38 x))
  (t2tb2399 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a b)) (set (tuple21 a b)))))
  (w (set (set (tuple21 a b)))) (x (set (tuple21 a b))))
  (= (mem4 x
  (tb2t10
  (image (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1)) (t2tb15 p) (t2tb10 w))))
  (exists ((a2 (set (tuple21 a b))))
  (and (mem4 a2 w) (mem (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1)))
  (Tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1)) (t2tb11 a2) (t2tb11 x))
  (t2tb15 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a b)) (tuple21 a b))))
  (w (set (set (tuple21 a b)))) (x (tuple21 a b)))
  (= (mem3 x
  (tb2t11 (image (tuple2 a1 b1) (set1 (tuple2 a1 b1)) (t2tb17 p) (t2tb10 w))))
  (exists ((a2 (set (tuple21 a b))))
  (and (mem4 a2 w) (mem (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 b1))
  (Tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 b1) (t2tb11 a2) (t2tb13 x))
  (t2tb17 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a b)) b))) (w (set (set (tuple21 a
  b)))) (x b))
  (= (mem2 x (tb2t12 (image b1 (set1 (tuple2 a1 b1)) (t2tb19 p) (t2tb10 w))))
  (exists ((a2 (set (tuple21 a b))))
  (and (mem4 a2 w) (mem (tuple2 (set1 (tuple2 a1 b1)) b1)
  (Tuple2 (set1 (tuple2 a1 b1)) b1 (t2tb11 a2) (t2tb14 x)) (t2tb19 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a b)) a))) (w (set (set (tuple21 a
  b)))) (x a))
  (= (mem1 x (tb2t1 (image a1 (set1 (tuple2 a1 b1)) (t2tb22 p) (t2tb10 w))))
  (exists ((a2 (set (tuple21 a b))))
  (and (mem4 a2 w) (mem (tuple2 (set1 (tuple2 a1 b1)) a1)
  (Tuple2 (set1 (tuple2 a1 b1)) a1 (t2tb11 a2) (t2tb2 x)) (t2tb22 p)))))))

;; mem_image
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (w (set (set (tuple21 a b)))) (x uni))
  (= (mem b2 x (image b2 (set1 (tuple2 a1 b1)) p (t2tb10 w)))
  (exists ((a2 (set (tuple21 a b))))
  (and (mem4 a2 w) (mem (tuple2 (set1 (tuple2 a1 b1)) b2)
  (Tuple2 (set1 (tuple2 a1 b1)) b2 (t2tb11 a2) x) p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) (tuple21 a (tuple21 b c)))))
  (w (set (tuple21 a b))) (x (tuple21 a (tuple21 b c))))
  (= (mem14 x
  (tb2t261
  (image (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 b1) (t2tb4544 p) (t2tb11 w))))
  (exists ((a2 (tuple21 a b)))
  (and (mem3 a2 w) (mem (tuple2 (tuple2 a1 b1) (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 (tuple2 a1 b1) (tuple2 a1 (tuple2 b1 c1)) (t2tb13 a2) (t2tb260 x))
  (t2tb4544 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) (set (tuple21 a c)))))
  (w (set (tuple21 a b))) (x (set (tuple21 a c))))
  (= (mem11 x
  (tb2t128
  (image (set1 (tuple2 a1 c1)) (tuple2 a1 b1) (t2tb4546 p) (t2tb11 w))))
  (exists ((a2 (tuple21 a b)))
  (and (mem3 a2 w) (mem (tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 c1)))
  (Tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 c1)) (t2tb13 a2) (t2tb129 x))
  (t2tb4546 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) (tuple21 a c)))) (w (set (tuple21 a
  b))) (x (tuple21 a c)))
  (= (mem10 x
  (tb2t129 (image (tuple2 a1 c1) (tuple2 a1 b1) (t2tb238 p) (t2tb11 w))))
  (exists ((a2 (tuple21 a b)))
  (and (mem3 a2 w) (mem (tuple2 (tuple2 a1 b1) (tuple2 a1 c1))
  (Tuple2 (tuple2 a1 b1) (tuple2 a1 c1) (t2tb13 a2) (t2tb133 x))
  (t2tb238 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) (tuple21 b c)))) (w (set (tuple21 a
  b))) (x (tuple21 b c)))
  (= (mem8 x
  (tb2t131 (image (tuple2 b1 c1) (tuple2 a1 b1) (t2tb1135 p) (t2tb11 w))))
  (exists ((a2 (tuple21 a b)))
  (and (mem3 a2 w) (mem (tuple2 (tuple2 a1 b1) (tuple2 b1 c1))
  (Tuple2 (tuple2 a1 b1) (tuple2 b1 c1) (t2tb13 a2) (t2tb134 x))
  (t2tb1135 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) c))) (w (set (tuple21 a b))) (x c))
  (= (mem7 x (tb2t132 (image c1 (tuple2 a1 b1) (t2tb245 p) (t2tb11 w))))
  (exists ((a2 (tuple21 a b)))
  (and (mem3 a2 w) (mem (tuple2 (tuple2 a1 b1) c1)
  (Tuple2 (tuple2 a1 b1) c1 (t2tb13 a2) (t2tb135 x)) (t2tb245 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) (tuple21 b a)))) (w (set (tuple21 a
  b))) (x (tuple21 b a)))
  (= (mem5 x
  (tb2t37 (image (tuple2 b1 a1) (tuple2 a1 b1) (t2tb1069 p) (t2tb11 w))))
  (exists ((a2 (tuple21 a b)))
  (and (mem3 a2 w) (mem (tuple2 (tuple2 a1 b1) (tuple2 b1 a1))
  (Tuple2 (tuple2 a1 b1) (tuple2 b1 a1) (t2tb13 a2) (t2tb38 x))
  (t2tb1069 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) (set (tuple21 a b)))))
  (w (set (tuple21 a b))) (x (set (tuple21 a b))))
  (= (mem4 x
  (tb2t10 (image (set1 (tuple2 a1 b1)) (tuple2 a1 b1) (t2tb23 p) (t2tb11 w))))
  (exists ((a2 (tuple21 a b)))
  (and (mem3 a2 w) (mem (tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 b1)))
  (Tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 b1)) (t2tb13 a2) (t2tb11 x))
  (t2tb23 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) (tuple21 a b)))) (w (set (tuple21 a
  b))) (x (tuple21 a b)))
  (= (mem3 x
  (tb2t11 (image (tuple2 a1 b1) (tuple2 a1 b1) (t2tb25 p) (t2tb11 w))))
  (exists ((a2 (tuple21 a b)))
  (and (mem3 a2 w) (mem (tuple2 (tuple2 a1 b1) (tuple2 a1 b1))
  (Tuple2 (tuple2 a1 b1) (tuple2 a1 b1) (t2tb13 a2) (t2tb13 x)) (t2tb25 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) b))) (w (set (tuple21 a b))) (x b))
  (= (mem2 x (tb2t12 (image b1 (tuple2 a1 b1) (t2tb27 p) (t2tb11 w))))
  (exists ((a2 (tuple21 a b)))
  (and (mem3 a2 w) (mem (tuple2 (tuple2 a1 b1) b1)
  (Tuple2 (tuple2 a1 b1) b1 (t2tb13 a2) (t2tb14 x)) (t2tb27 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) a))) (w (set (tuple21 a b))) (x a))
  (= (mem1 x (tb2t1 (image a1 (tuple2 a1 b1) (t2tb29 p) (t2tb11 w))))
  (exists ((a2 (tuple21 a b)))
  (and (mem3 a2 w) (mem (tuple2 (tuple2 a1 b1) a1)
  (Tuple2 (tuple2 a1 b1) a1 (t2tb13 a2) (t2tb2 x)) (t2tb29 p)))))))

;; mem_image
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (w (set (tuple21 a b))) (x uni))
  (= (mem b2 x (image b2 (tuple2 a1 b1) p (t2tb11 w)))
  (exists ((a2 (tuple21 a b)))
  (and (mem3 a2 w) (mem (tuple2 (tuple2 a1 b1) b2)
  (Tuple2 (tuple2 a1 b1) b2 (t2tb13 a2) x) p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 b (tuple21 a (tuple21 b c))))) (w (set b))
  (x (tuple21 a (tuple21 b c))))
  (= (mem14 x
  (tb2t261 (image (tuple2 a1 (tuple2 b1 c1)) b1 (t2tb4561 p) (t2tb12 w))))
  (exists ((a2 b))
  (and (mem2 a2 w) (mem (tuple2 b1 (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 b1 (tuple2 a1 (tuple2 b1 c1)) (t2tb14 a2) (t2tb260 x))
  (t2tb4561 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 b (set (tuple21 a c))))) (w (set b))
  (x (set (tuple21 a c))))
  (= (mem11 x
  (tb2t128 (image (set1 (tuple2 a1 c1)) b1 (t2tb4564 p) (t2tb12 w))))
  (exists ((a2 b))
  (and (mem2 a2 w) (mem (tuple2 b1 (set1 (tuple2 a1 c1)))
  (Tuple2 b1 (set1 (tuple2 a1 c1)) (t2tb14 a2) (t2tb129 x)) (t2tb4564 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 b (tuple21 a c)))) (w (set b)) (x (tuple21 a c)))
  (= (mem10 x (tb2t129 (image (tuple2 a1 c1) b1 (t2tb248 p) (t2tb12 w))))
  (exists ((a2 b))
  (and (mem2 a2 w) (mem (tuple2 b1 (tuple2 a1 c1))
  (Tuple2 b1 (tuple2 a1 c1) (t2tb14 a2) (t2tb133 x)) (t2tb248 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 b (tuple21 b c)))) (w (set b)) (x (tuple21 b c)))
  (= (mem8 x (tb2t131 (image (tuple2 b1 c1) b1 (t2tb1139 p) (t2tb12 w))))
  (exists ((a2 b))
  (and (mem2 a2 w) (mem (tuple2 b1 (tuple2 b1 c1))
  (Tuple2 b1 (tuple2 b1 c1) (t2tb14 a2) (t2tb134 x)) (t2tb1139 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 b c))) (w (set b)) (x c))
  (= (mem7 x (image3 p w))
  (exists ((a2 b))
  (and (mem2 a2 w) (mem8 (tb2t134 (Tuple2 b1 c1 (t2tb14 a2) (t2tb135 x))) p))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 b (tuple21 b a)))) (w (set b)) (x (tuple21 b a)))
  (= (mem5 x (tb2t37 (image (tuple2 b1 a1) b1 (t2tb1071 p) (t2tb12 w))))
  (exists ((a2 b))
  (and (mem2 a2 w) (mem (tuple2 b1 (tuple2 b1 a1))
  (Tuple2 b1 (tuple2 b1 a1) (t2tb14 a2) (t2tb38 x)) (t2tb1071 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 b (set (tuple21 a b))))) (w (set b))
  (x (set (tuple21 a b))))
  (= (mem4 x (tb2t10 (image (set1 (tuple2 a1 b1)) b1 (t2tb31 p) (t2tb12 w))))
  (exists ((a2 b))
  (and (mem2 a2 w) (mem (tuple2 b1 (set1 (tuple2 a1 b1)))
  (Tuple2 b1 (set1 (tuple2 a1 b1)) (t2tb14 a2) (t2tb11 x)) (t2tb31 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 b (tuple21 a b)))) (w (set b)) (x (tuple21 a b)))
  (= (mem3 x (tb2t11 (image (tuple2 a1 b1) b1 (t2tb34 p) (t2tb12 w))))
  (exists ((a2 b))
  (and (mem2 a2 w) (mem (tuple2 b1 (tuple2 a1 b1))
  (Tuple2 b1 (tuple2 a1 b1) (t2tb14 a2) (t2tb13 x)) (t2tb34 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 b b))) (w (set b)) (x b))
  (= (mem2 x (tb2t12 (image b1 b1 (t2tb35 p) (t2tb12 w))))
  (exists ((a2 b))
  (and (mem2 a2 w) (mem (tuple2 b1 b1) (Tuple2 b1 b1 (t2tb14 a2) (t2tb14 x))
  (t2tb35 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 b a))) (w (set b)) (x a))
  (= (mem1 x (image2 p w))
  (exists ((a2 b))
  (and (mem2 a2 w) (mem5 (tb2t38 (Tuple2 b1 a1 (t2tb14 a2) (t2tb2 x))) p))))))

;; mem_image
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (w (set b)) (x uni))
  (= (mem b2 x (image b2 b1 p (t2tb12 w)))
  (exists ((a2 b))
  (and (mem2 a2 w) (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 a2) x) p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 a (tuple21 a (tuple21 b c))))) (w (set a))
  (x (tuple21 a (tuple21 b c))))
  (= (mem14 x
  (tb2t261 (image (tuple2 a1 (tuple2 b1 c1)) a1 (t2tb4578 p) (t2tb1 w))))
  (exists ((a2 a))
  (and (mem1 a2 w) (mem (tuple2 a1 (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 a1 (tuple2 a1 (tuple2 b1 c1)) (t2tb2 a2) (t2tb260 x))
  (t2tb4578 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 a (set (tuple21 a c))))) (w (set a))
  (x (set (tuple21 a c))))
  (= (mem11 x
  (tb2t128 (image (set1 (tuple2 a1 c1)) a1 (t2tb4580 p) (t2tb1 w))))
  (exists ((a2 a))
  (and (mem1 a2 w) (mem (tuple2 a1 (set1 (tuple2 a1 c1)))
  (Tuple2 a1 (set1 (tuple2 a1 c1)) (t2tb2 a2) (t2tb129 x)) (t2tb4580 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 a (tuple21 a c)))) (w (set a)) (x (tuple21 a c)))
  (= (mem10 x (tb2t129 (image (tuple2 a1 c1) a1 (t2tb256 p) (t2tb1 w))))
  (exists ((a2 a))
  (and (mem1 a2 w) (mem (tuple2 a1 (tuple2 a1 c1))
  (Tuple2 a1 (tuple2 a1 c1) (t2tb2 a2) (t2tb133 x)) (t2tb256 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 a (tuple21 b c)))) (w (set a)) (x (tuple21 b c)))
  (= (mem8 x (image8 p w))
  (exists ((a2 a))
  (and (mem1 a2 w) (mem14
  (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 a2) (t2tb134 x))) p))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 a c))) (w (set a)) (x c))
  (= (mem7 x (image4 p w))
  (exists ((a2 a))
  (and (mem1 a2 w) (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 a2) (t2tb135 x))) p))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 a (tuple21 b a)))) (w (set a)) (x (tuple21 b a)))
  (= (mem5 x (tb2t37 (image (tuple2 b1 a1) a1 (t2tb1073 p) (t2tb1 w))))
  (exists ((a2 a))
  (and (mem1 a2 w) (mem (tuple2 a1 (tuple2 b1 a1))
  (Tuple2 a1 (tuple2 b1 a1) (t2tb2 a2) (t2tb38 x)) (t2tb1073 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 a (set (tuple21 a b))))) (w (set a))
  (x (set (tuple21 a b))))
  (= (mem4 x (tb2t10 (image (set1 (tuple2 a1 b1)) a1 (t2tb39 p) (t2tb1 w))))
  (exists ((a2 a))
  (and (mem1 a2 w) (mem (tuple2 a1 (set1 (tuple2 a1 b1)))
  (Tuple2 a1 (set1 (tuple2 a1 b1)) (t2tb2 a2) (t2tb11 x)) (t2tb39 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 a (tuple21 a b)))) (w (set a)) (x (tuple21 a b)))
  (= (mem3 x (tb2t11 (image (tuple2 a1 b1) a1 (t2tb41 p) (t2tb1 w))))
  (exists ((a2 a))
  (and (mem1 a2 w) (mem (tuple2 a1 (tuple2 a1 b1))
  (Tuple2 a1 (tuple2 a1 b1) (t2tb2 a2) (t2tb13 x)) (t2tb41 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 a b))) (w (set a)) (x b))
  (= (mem2 x (image1 p w))
  (exists ((a2 a))
  (and (mem1 a2 w) (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 a2) (t2tb14 x))) p))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 a a))) (w (set a)) (x a))
  (= (mem1 x (tb2t1 (image a1 a1 (t2tb4 p) (t2tb1 w))))
  (exists ((a2 a))
  (and (mem1 a2 w) (mem (tuple2 a1 a1) (Tuple2 a1 a1 (t2tb2 a2) (t2tb2 x))
  (t2tb4 p)))))))

;; mem_image
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (w (set a)) (x uni))
  (= (mem b2 x (image b2 a1 p (t2tb1 w)))
  (exists ((a2 a))
  (and (mem1 a2 w) (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 a2) x) p)))))))

;; mem_image
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((p uni) (w uni) (x uni))
  (and
  (=> (mem b2 x (image b2 a2 p w))
  (exists ((a3 uni))
  (and (sort a2 a3)
  (and (mem a2 a3 w) (mem (tuple2 a2 b2) (Tuple2 a2 b2 a3 x) p)))))
  (=>
  (exists ((a3 uni))
  (and (mem a2 a3 w) (mem (tuple2 a2 b2) (Tuple2 a2 b2 a3 x) p))) (mem b2 x
  (image b2 a2 p w)))))))

(declare-fun infix_lspl (ty ty uni uni) uni)

;; infix <+_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (tuple2 a2 b2))
  (infix_lspl b2 a2 x x1)))))

;; mem_overriding
  (assert
  (forall ((b2 ty))
  (forall ((q uni) (p uni) (x (tuple21 a (tuple21 b c))) (y uni))
  (= (mem (tuple2 (tuple2 a1 (tuple2 b1 c1)) b2)
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) b2 (t2tb260 x) y)
  (infix_lspl b2 (tuple2 a1 (tuple2 b1 c1)) q p))
  (or
  (and (mem (tuple2 (tuple2 a1 (tuple2 b1 c1)) b2)
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) b2 (t2tb260 x) y) q)
  (not (mem14 x (tb2t261 (dom b2 (tuple2 a1 (tuple2 b1 c1)) p))))) (mem
  (tuple2 (tuple2 a1 (tuple2 b1 c1)) b2)
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) b2 (t2tb260 x) y) p))))))

;; mem_overriding
  (assert
  (forall ((b2 ty))
  (forall ((q uni) (p uni) (x (set (tuple21 a c))) (y uni))
  (= (mem (tuple2 (set1 (tuple2 a1 c1)) b2)
  (Tuple2 (set1 (tuple2 a1 c1)) b2 (t2tb129 x) y)
  (infix_lspl b2 (set1 (tuple2 a1 c1)) q p))
  (or
  (and (mem (tuple2 (set1 (tuple2 a1 c1)) b2)
  (Tuple2 (set1 (tuple2 a1 c1)) b2 (t2tb129 x) y) q)
  (not (mem11 x (tb2t128 (dom b2 (set1 (tuple2 a1 c1)) p))))) (mem
  (tuple2 (set1 (tuple2 a1 c1)) b2)
  (Tuple2 (set1 (tuple2 a1 c1)) b2 (t2tb129 x) y) p))))))

;; mem_overriding
  (assert
  (forall ((b2 ty))
  (forall ((q uni) (p uni) (x (tuple21 a c)) (y uni))
  (= (mem (tuple2 (tuple2 a1 c1) b2) (Tuple2 (tuple2 a1 c1) b2 (t2tb133 x) y)
  (infix_lspl b2 (tuple2 a1 c1) q p))
  (or
  (and (mem (tuple2 (tuple2 a1 c1) b2)
  (Tuple2 (tuple2 a1 c1) b2 (t2tb133 x) y) q)
  (not (mem10 x (tb2t129 (dom b2 (tuple2 a1 c1) p))))) (mem
  (tuple2 (tuple2 a1 c1) b2) (Tuple2 (tuple2 a1 c1) b2 (t2tb133 x) y) p))))))

;; mem_overriding
  (assert
  (forall ((b2 ty))
  (forall ((q uni) (p uni) (x (tuple21 b c)) (y uni))
  (= (mem (tuple2 (tuple2 b1 c1) b2) (Tuple2 (tuple2 b1 c1) b2 (t2tb134 x) y)
  (infix_lspl b2 (tuple2 b1 c1) q p))
  (or
  (and (mem (tuple2 (tuple2 b1 c1) b2)
  (Tuple2 (tuple2 b1 c1) b2 (t2tb134 x) y) q)
  (not (mem8 x (tb2t131 (dom b2 (tuple2 b1 c1) p))))) (mem
  (tuple2 (tuple2 b1 c1) b2) (Tuple2 (tuple2 b1 c1) b2 (t2tb134 x) y) p))))))

;; mem_overriding
  (assert
  (forall ((b2 ty))
  (forall ((q uni) (p uni) (x c) (y uni))
  (= (mem (tuple2 c1 b2) (Tuple2 c1 b2 (t2tb135 x) y) (infix_lspl b2 c1 q p))
  (or
  (and (mem (tuple2 c1 b2) (Tuple2 c1 b2 (t2tb135 x) y) q)
  (not (mem7 x (tb2t132 (dom b2 c1 p))))) (mem (tuple2 c1 b2)
  (Tuple2 c1 b2 (t2tb135 x) y) p))))))

;; mem_overriding
  (assert
  (forall ((b2 ty))
  (forall ((q uni) (p uni) (x (tuple21 b a)) (y uni))
  (= (mem (tuple2 (tuple2 b1 a1) b2) (Tuple2 (tuple2 b1 a1) b2 (t2tb38 x) y)
  (infix_lspl b2 (tuple2 b1 a1) q p))
  (or
  (and (mem (tuple2 (tuple2 b1 a1) b2)
  (Tuple2 (tuple2 b1 a1) b2 (t2tb38 x) y) q)
  (not (mem5 x (tb2t37 (dom b2 (tuple2 b1 a1) p))))) (mem
  (tuple2 (tuple2 b1 a1) b2) (Tuple2 (tuple2 b1 a1) b2 (t2tb38 x) y) p))))))

;; mem_overriding
  (assert
  (forall ((b2 ty))
  (forall ((q uni) (p uni) (x (set (tuple21 a b))) (y uni))
  (= (mem (tuple2 (set1 (tuple2 a1 b1)) b2)
  (Tuple2 (set1 (tuple2 a1 b1)) b2 (t2tb11 x) y)
  (infix_lspl b2 (set1 (tuple2 a1 b1)) q p))
  (or
  (and (mem (tuple2 (set1 (tuple2 a1 b1)) b2)
  (Tuple2 (set1 (tuple2 a1 b1)) b2 (t2tb11 x) y) q)
  (not (mem4 x (tb2t10 (dom b2 (set1 (tuple2 a1 b1)) p))))) (mem
  (tuple2 (set1 (tuple2 a1 b1)) b2)
  (Tuple2 (set1 (tuple2 a1 b1)) b2 (t2tb11 x) y) p))))))

;; mem_overriding
  (assert
  (forall ((b2 ty))
  (forall ((q uni) (p uni) (x (tuple21 a b)) (y uni))
  (= (mem (tuple2 (tuple2 a1 b1) b2) (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) y)
  (infix_lspl b2 (tuple2 a1 b1) q p))
  (or
  (and (mem (tuple2 (tuple2 a1 b1) b2)
  (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) y) q)
  (not (mem3 x (tb2t11 (dom b2 (tuple2 a1 b1) p))))) (mem
  (tuple2 (tuple2 a1 b1) b2) (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) y) p))))))

;; mem_overriding
  (assert
  (forall ((q (set (tuple21 b c))) (p (set (tuple21 b c))) (x b) (y c))
  (= (mem8 (tb2t134 (Tuple2 b1 c1 (t2tb14 x) (t2tb135 y)))
  (tb2t131 (infix_lspl c1 b1 (t2tb131 q) (t2tb131 p))))
  (or
  (and (mem8 (tb2t134 (Tuple2 b1 c1 (t2tb14 x) (t2tb135 y))) q)
  (not (mem2 x (tb2t12 (dom c1 b1 (t2tb131 p)))))) (mem8
  (tb2t134 (Tuple2 b1 c1 (t2tb14 x) (t2tb135 y))) p)))))

;; mem_overriding
  (assert
  (forall ((q (set (tuple21 b a))) (p (set (tuple21 b a))) (x b) (y a))
  (= (mem5 (tb2t38 (Tuple2 b1 a1 (t2tb14 x) (t2tb2 y)))
  (tb2t37 (infix_lspl a1 b1 (t2tb37 q) (t2tb37 p))))
  (or
  (and (mem5 (tb2t38 (Tuple2 b1 a1 (t2tb14 x) (t2tb2 y))) q)
  (not (mem2 x (tb2t12 (dom a1 b1 (t2tb37 p)))))) (mem5
  (tb2t38 (Tuple2 b1 a1 (t2tb14 x) (t2tb2 y))) p)))))

;; mem_overriding
  (assert
  (forall ((b2 ty))
  (forall ((q uni) (p uni) (x b) (y uni))
  (= (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) y) (infix_lspl b2 b1 q p))
  (or
  (and (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) y) q)
  (not (mem2 x (tb2t12 (dom b2 b1 p))))) (mem (tuple2 b1 b2)
  (Tuple2 b1 b2 (t2tb14 x) y) p))))))

;; mem_overriding
  (assert
  (forall ((q (set (tuple21 a (tuple21 b c)))) (p (set (tuple21 a (tuple21 b
  c)))) (x a) (y (tuple21 b c)))
  (= (mem14 (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 y)))
  (tb2t261 (infix_lspl (tuple2 b1 c1) a1 (t2tb261 q) (t2tb261 p))))
  (or
  (and (mem14 (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 y))) q)
  (not (mem1 x (tb2t1 (dom (tuple2 b1 c1) a1 (t2tb261 p)))))) (mem14
  (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 y))) p)))))

;; mem_overriding
  (assert
  (forall ((q (set (tuple21 a c))) (p (set (tuple21 a c))) (x a) (y c))
  (= (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y)))
  (tb2t129 (infix_lspl c1 a1 (t2tb129 q) (t2tb129 p))))
  (or
  (and (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y))) q)
  (not (mem1 x (tb2t1 (dom c1 a1 (t2tb129 p)))))) (mem10
  (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y))) p)))))

;; mem_overriding
  (assert
  (forall ((q (set (tuple21 a b))) (p (set (tuple21 a b))) (x a) (y b))
  (= (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y)))
  (tb2t11 (infix_lspl b1 a1 (t2tb11 q) (t2tb11 p))))
  (or
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y))) q)
  (not (mem1 x (tb2t1 (dom b1 a1 (t2tb11 p)))))) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y))) p)))))

;; mem_overriding
  (assert
  (forall ((b2 ty))
  (forall ((q uni) (p uni) (x a) (y uni))
  (= (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) y) (infix_lspl b2 a1 q p))
  (or
  (and (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) y) q)
  (not (mem1 x (tb2t1 (dom b2 a1 p))))) (mem (tuple2 a1 b2)
  (Tuple2 a1 b2 (t2tb2 x) y) p))))))

;; mem_overriding
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((q uni) (p uni) (x uni) (y uni))
  (= (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) (infix_lspl b2 a2 q p))
  (or
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) q)
  (not (mem a2 x (dom b2 a2 p)))) (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) p))))))

(declare-fun direct_product (ty ty ty uni uni) uni)

;; direct_product_sort
  (assert
  (forall ((a2 ty) (b2 ty) (c2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (tuple2 a2 (tuple2 b2 c2)))
  (direct_product c2 b2 a2 x x1)))))

(declare-fun direct_product1 ((set (tuple21 a b)) (set (tuple21 a
  c))) (set (tuple21 a (tuple21 b c))))

;; mem_direct_product
  (assert
  (forall ((b2 ty))
  (forall ((f2 uni) (g (set (tuple21 b c))) (x b) (y uni) (z c))
  (= (mem (tuple2 b1 (tuple2 b2 c1))
  (Tuple2 b1 (tuple2 b2 c1) (t2tb14 x) (Tuple2 b2 c1 y (t2tb135 z)))
  (direct_product c1 b2 b1 f2 (t2tb131 g)))
  (and (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) y) f2) (mem8
  (tb2t134 (Tuple2 b1 c1 (t2tb14 x) (t2tb135 z))) g))))))

;; mem_direct_product
  (assert
  (forall ((b2 ty))
  (forall ((f2 uni) (g (set (tuple21 b a))) (x b) (y uni) (z a))
  (= (mem (tuple2 b1 (tuple2 b2 a1))
  (Tuple2 b1 (tuple2 b2 a1) (t2tb14 x) (Tuple2 b2 a1 y (t2tb2 z)))
  (direct_product a1 b2 b1 f2 (t2tb37 g)))
  (and (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) y) f2) (mem5
  (tb2t38 (Tuple2 b1 a1 (t2tb14 x) (t2tb2 z))) g))))))

(declare-fun t2tb1170 ((set (tuple21 b (tuple21 c c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 b (tuple21 c c))))) (sort
  (set1 (tuple2 b1 (tuple2 c1 c1))) (t2tb1170 x))))

(declare-fun tb2t1170 (uni) (set (tuple21 b (tuple21 c c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 b (tuple21 c c)))))
  (! (= (tb2t1170 (t2tb1170 i)) i) :pattern ((t2tb1170 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 b1 (tuple2 c1 c1))) j)
     (= (t2tb1170 (tb2t1170 j)) j)) :pattern ((t2tb1170 (tb2t1170 j))) )))

(declare-fun t2tb1171 ((tuple21 b (tuple21 c c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 b (tuple21 c c)))) (sort (tuple2 b1 (tuple2 c1 c1))
  (t2tb1171 x))))

(declare-fun tb2t1171 (uni) (tuple21 b (tuple21 c c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 b (tuple21 c c))))
  (! (= (tb2t1171 (t2tb1171 i)) i) :pattern ((t2tb1171 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 b1 (tuple2 c1 c1)) j) (= (t2tb1171 (tb2t1171 j)) j)) :pattern (
  (t2tb1171 (tb2t1171 j))) )))

;; mem_direct_product
  (assert
  (forall ((f2 (set (tuple21 b c))) (g (set (tuple21 b c))) (x b) (y c)
  (z c))
  (= (mem (tuple2 b1 (tuple2 c1 c1))
  (Tuple2 b1 (tuple2 c1 c1) (t2tb14 x)
  (Tuple2 c1 c1 (t2tb135 y) (t2tb135 z)))
  (direct_product c1 c1 b1 (t2tb131 f2) (t2tb131 g)))
  (and (mem8 (tb2t134 (Tuple2 b1 c1 (t2tb14 x) (t2tb135 y))) f2) (mem8
  (tb2t134 (Tuple2 b1 c1 (t2tb14 x) (t2tb135 z))) g)))))

(declare-fun t2tb5187 ((set (tuple21 b (tuple21 c a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 b (tuple21 c a))))) (sort
  (set1 (tuple2 b1 (tuple2 c1 a1))) (t2tb5187 x))))

(declare-fun tb2t5187 (uni) (set (tuple21 b (tuple21 c a))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 b (tuple21 c a)))))
  (! (= (tb2t5187 (t2tb5187 i)) i) :pattern ((t2tb5187 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 b1 (tuple2 c1 a1))) j)
     (= (t2tb5187 (tb2t5187 j)) j)) :pattern ((t2tb5187 (tb2t5187 j))) )))

(declare-fun t2tb5188 ((tuple21 b (tuple21 c a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 b (tuple21 c a)))) (sort (tuple2 b1 (tuple2 c1 a1))
  (t2tb5188 x))))

(declare-fun tb2t5188 (uni) (tuple21 b (tuple21 c a)))

;; BridgeL
  (assert
  (forall ((i (tuple21 b (tuple21 c a))))
  (! (= (tb2t5188 (t2tb5188 i)) i) :pattern ((t2tb5188 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 b1 (tuple2 c1 a1)) j) (= (t2tb5188 (tb2t5188 j)) j)) :pattern (
  (t2tb5188 (tb2t5188 j))) )))

;; mem_direct_product
  (assert
  (forall ((f2 (set (tuple21 b c))) (g (set (tuple21 b a))) (x b) (y c)
  (z a))
  (= (mem (tuple2 b1 (tuple2 c1 a1))
  (Tuple2 b1 (tuple2 c1 a1) (t2tb14 x) (Tuple2 c1 a1 (t2tb135 y) (t2tb2 z)))
  (direct_product a1 c1 b1 (t2tb131 f2) (t2tb37 g)))
  (and (mem8 (tb2t134 (Tuple2 b1 c1 (t2tb14 x) (t2tb135 y))) f2) (mem5
  (tb2t38 (Tuple2 b1 a1 (t2tb14 x) (t2tb2 z))) g)))))

;; mem_direct_product
  (assert
  (forall ((c2 ty))
  (forall ((f2 (set (tuple21 b c))) (g uni) (x b) (y c) (z uni))
  (= (mem (tuple2 b1 (tuple2 c1 c2))
  (Tuple2 b1 (tuple2 c1 c2) (t2tb14 x) (Tuple2 c1 c2 (t2tb135 y) z))
  (direct_product c2 c1 b1 (t2tb131 f2) g))
  (and (mem8 (tb2t134 (Tuple2 b1 c1 (t2tb14 x) (t2tb135 y))) f2) (mem
  (tuple2 b1 c2) (Tuple2 b1 c2 (t2tb14 x) z) g))))))

;; mem_direct_product
  (assert
  (forall ((f2 (set (tuple21 b a))) (g (set (tuple21 b c))) (x b) (y a)
  (z c))
  (= (mem (tuple2 b1 (tuple2 a1 c1))
  (Tuple2 b1 (tuple2 a1 c1) (t2tb14 x) (Tuple2 a1 c1 (t2tb2 y) (t2tb135 z)))
  (direct_product c1 a1 b1 (t2tb37 f2) (t2tb131 g)))
  (and (mem5 (tb2t38 (Tuple2 b1 a1 (t2tb14 x) (t2tb2 y))) f2) (mem8
  (tb2t134 (Tuple2 b1 c1 (t2tb14 x) (t2tb135 z))) g)))))

(declare-fun t2tb1084 ((set (tuple21 b (tuple21 a a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 b (tuple21 a a))))) (sort
  (set1 (tuple2 b1 (tuple2 a1 a1))) (t2tb1084 x))))

(declare-fun tb2t1084 (uni) (set (tuple21 b (tuple21 a a))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 b (tuple21 a a)))))
  (! (= (tb2t1084 (t2tb1084 i)) i) :pattern ((t2tb1084 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 b1 (tuple2 a1 a1))) j)
     (= (t2tb1084 (tb2t1084 j)) j)) :pattern ((t2tb1084 (tb2t1084 j))) )))

(declare-fun t2tb1085 ((tuple21 b (tuple21 a a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 b (tuple21 a a)))) (sort (tuple2 b1 (tuple2 a1 a1))
  (t2tb1085 x))))

(declare-fun tb2t1085 (uni) (tuple21 b (tuple21 a a)))

;; BridgeL
  (assert
  (forall ((i (tuple21 b (tuple21 a a))))
  (! (= (tb2t1085 (t2tb1085 i)) i) :pattern ((t2tb1085 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 b1 (tuple2 a1 a1)) j) (= (t2tb1085 (tb2t1085 j)) j)) :pattern (
  (t2tb1085 (tb2t1085 j))) )))

;; mem_direct_product
  (assert
  (forall ((f2 (set (tuple21 b a))) (g (set (tuple21 b a))) (x b) (y a)
  (z a))
  (= (mem (tuple2 b1 (tuple2 a1 a1))
  (Tuple2 b1 (tuple2 a1 a1) (t2tb14 x) (Tuple2 a1 a1 (t2tb2 y) (t2tb2 z)))
  (direct_product a1 a1 b1 (t2tb37 f2) (t2tb37 g)))
  (and (mem5 (tb2t38 (Tuple2 b1 a1 (t2tb14 x) (t2tb2 y))) f2) (mem5
  (tb2t38 (Tuple2 b1 a1 (t2tb14 x) (t2tb2 z))) g)))))

;; mem_direct_product
  (assert
  (forall ((c2 ty))
  (forall ((f2 (set (tuple21 b a))) (g uni) (x b) (y a) (z uni))
  (= (mem (tuple2 b1 (tuple2 a1 c2))
  (Tuple2 b1 (tuple2 a1 c2) (t2tb14 x) (Tuple2 a1 c2 (t2tb2 y) z))
  (direct_product c2 a1 b1 (t2tb37 f2) g))
  (and (mem5 (tb2t38 (Tuple2 b1 a1 (t2tb14 x) (t2tb2 y))) f2) (mem
  (tuple2 b1 c2) (Tuple2 b1 c2 (t2tb14 x) z) g))))))

;; mem_direct_product
  (assert
  (forall ((b2 ty))
  (forall ((f2 uni) (g (set (tuple21 a (tuple21 b c)))) (x a) (y uni)
  (z (tuple21 b c)))
  (= (mem (tuple2 a1 (tuple2 b2 (tuple2 b1 c1)))
  (Tuple2 a1 (tuple2 b2 (tuple2 b1 c1)) (t2tb2 x)
  (Tuple2 b2 (tuple2 b1 c1) y (t2tb134 z)))
  (direct_product (tuple2 b1 c1) b2 a1 f2 (t2tb261 g)))
  (and (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) y) f2) (mem14
  (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 z))) g))))))

;; mem_direct_product
  (assert
  (forall ((b2 ty))
  (forall ((f2 uni) (g (set (tuple21 a c))) (x a) (y uni) (z c))
  (= (mem (tuple2 a1 (tuple2 b2 c1))
  (Tuple2 a1 (tuple2 b2 c1) (t2tb2 x) (Tuple2 b2 c1 y (t2tb135 z)))
  (direct_product c1 b2 a1 f2 (t2tb129 g)))
  (and (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) y) f2) (mem10
  (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 z))) g))))))

;; mem_direct_product
  (assert
  (forall ((b2 ty))
  (forall ((f2 uni) (g (set (tuple21 a b))) (x a) (y uni) (z b))
  (= (mem (tuple2 a1 (tuple2 b2 b1))
  (Tuple2 a1 (tuple2 b2 b1) (t2tb2 x) (Tuple2 b2 b1 y (t2tb14 z)))
  (direct_product b1 b2 a1 f2 (t2tb11 g)))
  (and (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) y) f2) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 z))) g))))))

(declare-fun t2tb4905 ((set (tuple21 a (tuple21 (tuple21 b c) (tuple21 b
  c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (tuple21 (tuple21 b c) (tuple21 b c)))))) (sort
  (set1 (tuple2 a1 (tuple2 (tuple2 b1 c1) (tuple2 b1 c1)))) (t2tb4905 x))))

(declare-fun tb2t4905 (uni) (set (tuple21 a (tuple21 (tuple21 b c) (tuple21 b
  c)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (tuple21 (tuple21 b c) (tuple21 b c))))))
  (! (= (tb2t4905 (t2tb4905 i)) i) :pattern ((t2tb4905 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (tuple2 (tuple2 b1 c1) (tuple2 b1 c1)))) j)
     (= (t2tb4905 (tb2t4905 j)) j)) :pattern ((t2tb4905 (tb2t4905 j))) )))

(declare-fun t2tb4906 ((tuple21 a (tuple21 (tuple21 b c) (tuple21 b
  c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (tuple21 (tuple21 b c) (tuple21 b c))))) (sort
  (tuple2 a1 (tuple2 (tuple2 b1 c1) (tuple2 b1 c1))) (t2tb4906 x))))

(declare-fun tb2t4906 (uni) (tuple21 a (tuple21 (tuple21 b c) (tuple21 b
  c))))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (tuple21 (tuple21 b c) (tuple21 b c)))))
  (! (= (tb2t4906 (t2tb4906 i)) i) :pattern ((t2tb4906 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (tuple2 (tuple2 b1 c1) (tuple2 b1 c1))) j)
     (= (t2tb4906 (tb2t4906 j)) j)) :pattern ((t2tb4906 (tb2t4906 j))) )))

;; mem_direct_product
  (assert
  (forall ((f2 (set (tuple21 a (tuple21 b c)))) (g (set (tuple21 a (tuple21 b
  c)))) (x a) (y (tuple21 b c)) (z (tuple21 b c)))
  (= (mem (tuple2 a1 (tuple2 (tuple2 b1 c1) (tuple2 b1 c1)))
  (Tuple2 a1 (tuple2 (tuple2 b1 c1) (tuple2 b1 c1)) (t2tb2 x)
  (Tuple2 (tuple2 b1 c1) (tuple2 b1 c1) (t2tb134 y) (t2tb134 z)))
  (direct_product (tuple2 b1 c1) (tuple2 b1 c1) a1 (t2tb261 f2) (t2tb261 g)))
  (and (mem14 (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 y))) f2)
  (mem14 (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 z))) g)))))

(declare-fun t2tb4907 ((set (tuple21 a (tuple21 (tuple21 b c) c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (tuple21 (tuple21 b c) c))))) (sort
  (set1 (tuple2 a1 (tuple2 (tuple2 b1 c1) c1))) (t2tb4907 x))))

(declare-fun tb2t4907 (uni) (set (tuple21 a (tuple21 (tuple21 b c) c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (tuple21 (tuple21 b c) c)))))
  (! (= (tb2t4907 (t2tb4907 i)) i) :pattern ((t2tb4907 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (tuple2 (tuple2 b1 c1) c1))) j)
     (= (t2tb4907 (tb2t4907 j)) j)) :pattern ((t2tb4907 (tb2t4907 j))) )))

(declare-fun t2tb4908 ((tuple21 a (tuple21 (tuple21 b c) c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (tuple21 (tuple21 b c) c)))) (sort
  (tuple2 a1 (tuple2 (tuple2 b1 c1) c1)) (t2tb4908 x))))

(declare-fun tb2t4908 (uni) (tuple21 a (tuple21 (tuple21 b c) c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (tuple21 (tuple21 b c) c))))
  (! (= (tb2t4908 (t2tb4908 i)) i) :pattern ((t2tb4908 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (tuple2 (tuple2 b1 c1) c1)) j)
     (= (t2tb4908 (tb2t4908 j)) j)) :pattern ((t2tb4908 (tb2t4908 j))) )))

;; mem_direct_product
  (assert
  (forall ((f2 (set (tuple21 a (tuple21 b c)))) (g (set (tuple21 a c))) (x a)
  (y (tuple21 b c)) (z c))
  (= (mem (tuple2 a1 (tuple2 (tuple2 b1 c1) c1))
  (Tuple2 a1 (tuple2 (tuple2 b1 c1) c1) (t2tb2 x)
  (Tuple2 (tuple2 b1 c1) c1 (t2tb134 y) (t2tb135 z)))
  (direct_product c1 (tuple2 b1 c1) a1 (t2tb261 f2) (t2tb129 g)))
  (and (mem14 (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 y))) f2)
  (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 z))) g)))))

(declare-fun t2tb4909 ((set (tuple21 a (tuple21 (tuple21 b c) b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (tuple21 (tuple21 b c) b))))) (sort
  (set1 (tuple2 a1 (tuple2 (tuple2 b1 c1) b1))) (t2tb4909 x))))

(declare-fun tb2t4909 (uni) (set (tuple21 a (tuple21 (tuple21 b c) b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (tuple21 (tuple21 b c) b)))))
  (! (= (tb2t4909 (t2tb4909 i)) i) :pattern ((t2tb4909 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (tuple2 (tuple2 b1 c1) b1))) j)
     (= (t2tb4909 (tb2t4909 j)) j)) :pattern ((t2tb4909 (tb2t4909 j))) )))

(declare-fun t2tb4910 ((tuple21 a (tuple21 (tuple21 b c) b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (tuple21 (tuple21 b c) b)))) (sort
  (tuple2 a1 (tuple2 (tuple2 b1 c1) b1)) (t2tb4910 x))))

(declare-fun tb2t4910 (uni) (tuple21 a (tuple21 (tuple21 b c) b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (tuple21 (tuple21 b c) b))))
  (! (= (tb2t4910 (t2tb4910 i)) i) :pattern ((t2tb4910 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (tuple2 (tuple2 b1 c1) b1)) j)
     (= (t2tb4910 (tb2t4910 j)) j)) :pattern ((t2tb4910 (tb2t4910 j))) )))

;; mem_direct_product
  (assert
  (forall ((f2 (set (tuple21 a (tuple21 b c)))) (g (set (tuple21 a b))) (x a)
  (y (tuple21 b c)) (z b))
  (= (mem (tuple2 a1 (tuple2 (tuple2 b1 c1) b1))
  (Tuple2 a1 (tuple2 (tuple2 b1 c1) b1) (t2tb2 x)
  (Tuple2 (tuple2 b1 c1) b1 (t2tb134 y) (t2tb14 z)))
  (direct_product b1 (tuple2 b1 c1) a1 (t2tb261 f2) (t2tb11 g)))
  (and (mem14 (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 y))) f2)
  (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 z))) g)))))

;; mem_direct_product
  (assert
  (forall ((c2 ty))
  (forall ((f2 (set (tuple21 a (tuple21 b c)))) (g uni) (x a) (y (tuple21 b
  c)) (z uni))
  (= (mem (tuple2 a1 (tuple2 (tuple2 b1 c1) c2))
  (Tuple2 a1 (tuple2 (tuple2 b1 c1) c2) (t2tb2 x)
  (Tuple2 (tuple2 b1 c1) c2 (t2tb134 y) z))
  (direct_product c2 (tuple2 b1 c1) a1 (t2tb261 f2) g))
  (and (mem14 (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 y))) f2)
  (mem (tuple2 a1 c2) (Tuple2 a1 c2 (t2tb2 x) z) g))))))

(declare-fun t2tb4913 ((set (tuple21 a (tuple21 c (tuple21 b c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (tuple21 c (tuple21 b c)))))) (sort
  (set1 (tuple2 a1 (tuple2 c1 (tuple2 b1 c1)))) (t2tb4913 x))))

(declare-fun tb2t4913 (uni) (set (tuple21 a (tuple21 c (tuple21 b c)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (tuple21 c (tuple21 b c))))))
  (! (= (tb2t4913 (t2tb4913 i)) i) :pattern ((t2tb4913 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (tuple2 c1 (tuple2 b1 c1)))) j)
     (= (t2tb4913 (tb2t4913 j)) j)) :pattern ((t2tb4913 (tb2t4913 j))) )))

(declare-fun t2tb4914 ((tuple21 a (tuple21 c (tuple21 b c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (tuple21 c (tuple21 b c))))) (sort
  (tuple2 a1 (tuple2 c1 (tuple2 b1 c1))) (t2tb4914 x))))

(declare-fun tb2t4914 (uni) (tuple21 a (tuple21 c (tuple21 b c))))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (tuple21 c (tuple21 b c)))))
  (! (= (tb2t4914 (t2tb4914 i)) i) :pattern ((t2tb4914 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (tuple2 c1 (tuple2 b1 c1))) j)
     (= (t2tb4914 (tb2t4914 j)) j)) :pattern ((t2tb4914 (tb2t4914 j))) )))

;; mem_direct_product
  (assert
  (forall ((f2 (set (tuple21 a c))) (g (set (tuple21 a (tuple21 b c)))) (x a)
  (y c) (z (tuple21 b c)))
  (= (mem (tuple2 a1 (tuple2 c1 (tuple2 b1 c1)))
  (Tuple2 a1 (tuple2 c1 (tuple2 b1 c1)) (t2tb2 x)
  (Tuple2 c1 (tuple2 b1 c1) (t2tb135 y) (t2tb134 z)))
  (direct_product (tuple2 b1 c1) c1 a1 (t2tb129 f2) (t2tb261 g)))
  (and (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y))) f2) (mem14
  (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 z))) g)))))

(declare-fun t2tb330 ((set (tuple21 a (tuple21 c c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (tuple21 c c))))) (sort
  (set1 (tuple2 a1 (tuple2 c1 c1))) (t2tb330 x))))

(declare-fun tb2t330 (uni) (set (tuple21 a (tuple21 c c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (tuple21 c c)))))
  (! (= (tb2t330 (t2tb330 i)) i) :pattern ((t2tb330 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (tuple2 c1 c1))) j)
     (= (t2tb330 (tb2t330 j)) j)) :pattern ((t2tb330 (tb2t330 j))) )))

(declare-fun t2tb331 ((tuple21 a (tuple21 c c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (tuple21 c c)))) (sort (tuple2 a1 (tuple2 c1 c1))
  (t2tb331 x))))

(declare-fun tb2t331 (uni) (tuple21 a (tuple21 c c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (tuple21 c c))))
  (! (= (tb2t331 (t2tb331 i)) i) :pattern ((t2tb331 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (tuple2 c1 c1)) j) (= (t2tb331 (tb2t331 j)) j)) :pattern (
  (t2tb331 (tb2t331 j))) )))

;; mem_direct_product
  (assert
  (forall ((f2 (set (tuple21 a c))) (g (set (tuple21 a c))) (x a) (y c)
  (z c))
  (= (mem (tuple2 a1 (tuple2 c1 c1))
  (Tuple2 a1 (tuple2 c1 c1) (t2tb2 x) (Tuple2 c1 c1 (t2tb135 y) (t2tb135 z)))
  (direct_product c1 c1 a1 (t2tb129 f2) (t2tb129 g)))
  (and (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y))) f2) (mem10
  (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 z))) g)))))

(declare-fun t2tb332 ((set (tuple21 a (tuple21 c b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (tuple21 c b))))) (sort
  (set1 (tuple2 a1 (tuple2 c1 b1))) (t2tb332 x))))

(declare-fun tb2t332 (uni) (set (tuple21 a (tuple21 c b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (tuple21 c b)))))
  (! (= (tb2t332 (t2tb332 i)) i) :pattern ((t2tb332 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (tuple2 c1 b1))) j)
     (= (t2tb332 (tb2t332 j)) j)) :pattern ((t2tb332 (tb2t332 j))) )))

(declare-fun t2tb333 ((tuple21 a (tuple21 c b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (tuple21 c b)))) (sort (tuple2 a1 (tuple2 c1 b1))
  (t2tb333 x))))

(declare-fun tb2t333 (uni) (tuple21 a (tuple21 c b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (tuple21 c b))))
  (! (= (tb2t333 (t2tb333 i)) i) :pattern ((t2tb333 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (tuple2 c1 b1)) j) (= (t2tb333 (tb2t333 j)) j)) :pattern (
  (t2tb333 (tb2t333 j))) )))

;; mem_direct_product
  (assert
  (forall ((f2 (set (tuple21 a c))) (g (set (tuple21 a b))) (x a) (y c)
  (z b))
  (= (mem (tuple2 a1 (tuple2 c1 b1))
  (Tuple2 a1 (tuple2 c1 b1) (t2tb2 x) (Tuple2 c1 b1 (t2tb135 y) (t2tb14 z)))
  (direct_product b1 c1 a1 (t2tb129 f2) (t2tb11 g)))
  (and (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y))) f2) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 z))) g)))))

;; mem_direct_product
  (assert
  (forall ((c2 ty))
  (forall ((f2 (set (tuple21 a c))) (g uni) (x a) (y c) (z uni))
  (= (mem (tuple2 a1 (tuple2 c1 c2))
  (Tuple2 a1 (tuple2 c1 c2) (t2tb2 x) (Tuple2 c1 c2 (t2tb135 y) z))
  (direct_product c2 c1 a1 (t2tb129 f2) g))
  (and (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y))) f2) (mem
  (tuple2 a1 c2) (Tuple2 a1 c2 (t2tb2 x) z) g))))))

(declare-fun t2tb4917 ((set (tuple21 a (tuple21 b (tuple21 b c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (tuple21 b (tuple21 b c)))))) (sort
  (set1 (tuple2 a1 (tuple2 b1 (tuple2 b1 c1)))) (t2tb4917 x))))

(declare-fun tb2t4917 (uni) (set (tuple21 a (tuple21 b (tuple21 b c)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (tuple21 b (tuple21 b c))))))
  (! (= (tb2t4917 (t2tb4917 i)) i) :pattern ((t2tb4917 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (tuple2 b1 (tuple2 b1 c1)))) j)
     (= (t2tb4917 (tb2t4917 j)) j)) :pattern ((t2tb4917 (tb2t4917 j))) )))

(declare-fun t2tb4918 ((tuple21 a (tuple21 b (tuple21 b c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (tuple21 b (tuple21 b c))))) (sort
  (tuple2 a1 (tuple2 b1 (tuple2 b1 c1))) (t2tb4918 x))))

(declare-fun tb2t4918 (uni) (tuple21 a (tuple21 b (tuple21 b c))))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (tuple21 b (tuple21 b c)))))
  (! (= (tb2t4918 (t2tb4918 i)) i) :pattern ((t2tb4918 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (tuple2 b1 (tuple2 b1 c1))) j)
     (= (t2tb4918 (tb2t4918 j)) j)) :pattern ((t2tb4918 (tb2t4918 j))) )))

;; mem_direct_product
  (assert
  (forall ((f2 (set (tuple21 a b))) (g (set (tuple21 a (tuple21 b c)))) (x a)
  (y b) (z (tuple21 b c)))
  (= (mem (tuple2 a1 (tuple2 b1 (tuple2 b1 c1)))
  (Tuple2 a1 (tuple2 b1 (tuple2 b1 c1)) (t2tb2 x)
  (Tuple2 b1 (tuple2 b1 c1) (t2tb14 y) (t2tb134 z)))
  (direct_product (tuple2 b1 c1) b1 a1 (t2tb11 f2) (t2tb261 g)))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y))) f2) (mem14
  (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 z))) g)))))

;; mem_direct_product
  (assert
  (forall ((f2 (set (tuple21 a b))) (g (set (tuple21 a c))) (x a) (y b)
  (z c))
  (= (mem14
  (tb2t260
  (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (Tuple2 b1 c1 (t2tb14 y) (t2tb135 z))))
  (direct_product1 f2 g))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y))) f2) (mem10
  (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 z))) g)))))

(declare-fun t2tb59 ((set (tuple21 a (tuple21 b b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (tuple21 b b))))) (sort
  (set1 (tuple2 a1 (tuple2 b1 b1))) (t2tb59 x))))

(declare-fun tb2t59 (uni) (set (tuple21 a (tuple21 b b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (tuple21 b b)))))
  (! (= (tb2t59 (t2tb59 i)) i) :pattern ((t2tb59 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (tuple2 b1 b1))) j)
     (= (t2tb59 (tb2t59 j)) j)) :pattern ((t2tb59 (tb2t59 j))) )))

(declare-fun t2tb60 ((tuple21 a (tuple21 b b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (tuple21 b b)))) (sort (tuple2 a1 (tuple2 b1 b1))
  (t2tb60 x))))

(declare-fun tb2t60 (uni) (tuple21 a (tuple21 b b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (tuple21 b b))))
  (! (= (tb2t60 (t2tb60 i)) i) :pattern ((t2tb60 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (tuple2 b1 b1)) j) (= (t2tb60 (tb2t60 j)) j)) :pattern (
  (t2tb60 (tb2t60 j))) )))

;; mem_direct_product
  (assert
  (forall ((f2 (set (tuple21 a b))) (g (set (tuple21 a b))) (x a) (y b)
  (z b))
  (= (mem (tuple2 a1 (tuple2 b1 b1))
  (Tuple2 a1 (tuple2 b1 b1) (t2tb2 x) (Tuple2 b1 b1 (t2tb14 y) (t2tb14 z)))
  (direct_product b1 b1 a1 (t2tb11 f2) (t2tb11 g)))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y))) f2) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 z))) g)))))

;; mem_direct_product
  (assert
  (forall ((c2 ty))
  (forall ((f2 (set (tuple21 a b))) (g uni) (x a) (y b) (z uni))
  (= (mem (tuple2 a1 (tuple2 b1 c2))
  (Tuple2 a1 (tuple2 b1 c2) (t2tb2 x) (Tuple2 b1 c2 (t2tb14 y) z))
  (direct_product c2 b1 a1 (t2tb11 f2) g))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y))) f2) (mem
  (tuple2 a1 c2) (Tuple2 a1 c2 (t2tb2 x) z) g))))))

;; mem_direct_product
  (assert
  (forall ((a2 ty) (b2 ty) (c2 ty))
  (forall ((f2 uni) (g uni) (x uni) (y uni) (z uni))
  (= (mem (tuple2 a2 (tuple2 b2 c2))
  (Tuple2 a2 (tuple2 b2 c2) x (Tuple2 b2 c2 y z))
  (direct_product c2 b2 a2 f2 g))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) f2) (mem (tuple2 a2 c2)
  (Tuple2 a2 c2 x z) g))))))

(declare-fun prj1 (ty ty uni) uni)

;; prj1_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni)) (sort (set1 (tuple2 (tuple2 a2 b2) a2)) (prj1 b2 a2 x)))))

;; mem_proj_op_1
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (x uni) (y uni) (z uni))
  (=> (sort a2 x)
  (=> (sort a2 z)
  (= (mem (tuple2 (tuple2 a2 b2) a2)
  (Tuple2 (tuple2 a2 b2) a2 (Tuple2 a2 b2 x y) z)
  (prj1 b2 a2 (Tuple2 (set1 a2) (set1 b2) s t)))
  (and (mem (tuple2 (tuple2 a2 b2) a2)
  (Tuple2 (tuple2 a2 b2) a2 (Tuple2 a2 b2 x y) z)
  (times a2 (tuple2 a2 b2) (times b2 a2 s t) s)) (= z x))))))))

(declare-fun prj2 (ty ty uni) uni)

;; prj2_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni)) (sort (set1 (tuple2 (tuple2 a2 b2) b2)) (prj2 b2 a2 x)))))

;; mem_proj_op_2
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (x uni) (y uni) (z uni))
  (=> (sort b2 y)
  (=> (sort b2 z)
  (= (mem (tuple2 (tuple2 a2 b2) b2)
  (Tuple2 (tuple2 a2 b2) b2 (Tuple2 a2 b2 x y) z)
  (prj2 b2 a2 (Tuple2 (set1 a2) (set1 b2) s t)))
  (and (mem (tuple2 (tuple2 a2 b2) b2)
  (Tuple2 (tuple2 a2 b2) b2 (Tuple2 a2 b2 x y) z)
  (times b2 (tuple2 a2 b2) (times b2 a2 s t) t)) (= z y))))))))

(declare-fun parallel_product (ty ty ty ty uni uni) uni)

;; parallel_product_sort
  (assert
  (forall ((a2 ty) (b2 ty) (c2 ty) (d2 ty))
  (forall ((x uni) (x1 uni)) (sort
  (set1 (tuple2 (tuple2 a2 c2) (tuple2 b2 d2)))
  (parallel_product d2 c2 b2 a2 x x1)))))

;; mem_parallel_product
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((h uni) (k (set (tuple21 b c))) (x uni) (y b) (z uni) (w c))
  (= (mem (tuple2 (tuple2 a2 b1) (tuple2 b2 c1))
  (Tuple2 (tuple2 a2 b1) (tuple2 b2 c1) (Tuple2 a2 b1 x (t2tb14 y))
  (Tuple2 b2 c1 z (t2tb135 w))) (parallel_product c1 b1 b2 a2 h (t2tb131 k)))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x z) h) (mem8
  (tb2t134 (Tuple2 b1 c1 (t2tb14 y) (t2tb135 w))) k))))))

;; mem_parallel_product
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((h uni) (k (set (tuple21 b a))) (x uni) (y b) (z uni) (w a))
  (= (mem (tuple2 (tuple2 a2 b1) (tuple2 b2 a1))
  (Tuple2 (tuple2 a2 b1) (tuple2 b2 a1) (Tuple2 a2 b1 x (t2tb14 y))
  (Tuple2 b2 a1 z (t2tb2 w))) (parallel_product a1 b1 b2 a2 h (t2tb37 k)))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x z) h) (mem5
  (tb2t38 (Tuple2 b1 a1 (t2tb14 y) (t2tb2 w))) k))))))

;; mem_parallel_product
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((h uni) (k (set (tuple21 a (tuple21 b c)))) (x uni) (y a) (z uni)
  (w (tuple21 b c)))
  (= (mem (tuple2 (tuple2 a2 a1) (tuple2 b2 (tuple2 b1 c1)))
  (Tuple2 (tuple2 a2 a1) (tuple2 b2 (tuple2 b1 c1))
  (Tuple2 a2 a1 x (t2tb2 y)) (Tuple2 b2 (tuple2 b1 c1) z (t2tb134 w)))
  (parallel_product (tuple2 b1 c1) a1 b2 a2 h (t2tb261 k)))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x z) h) (mem14
  (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 y) (t2tb134 w))) k))))))

;; mem_parallel_product
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((h uni) (k (set (tuple21 a c))) (x uni) (y a) (z uni) (w c))
  (= (mem (tuple2 (tuple2 a2 a1) (tuple2 b2 c1))
  (Tuple2 (tuple2 a2 a1) (tuple2 b2 c1) (Tuple2 a2 a1 x (t2tb2 y))
  (Tuple2 b2 c1 z (t2tb135 w))) (parallel_product c1 a1 b2 a2 h (t2tb129 k)))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x z) h) (mem10
  (tb2t133 (Tuple2 a1 c1 (t2tb2 y) (t2tb135 w))) k))))))

;; mem_parallel_product
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((h uni) (k (set (tuple21 a b))) (x uni) (y a) (z uni) (w b))
  (= (mem (tuple2 (tuple2 a2 a1) (tuple2 b2 b1))
  (Tuple2 (tuple2 a2 a1) (tuple2 b2 b1) (Tuple2 a2 a1 x (t2tb2 y))
  (Tuple2 b2 b1 z (t2tb14 w))) (parallel_product b1 a1 b2 a2 h (t2tb11 k)))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x z) h) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 y) (t2tb14 w))) k))))))

(declare-fun t2tb1172 ((set (tuple21 (tuple21 b b) (tuple21 c c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b b) (tuple21 c c))))) (sort
  (set1 (tuple2 (tuple2 b1 b1) (tuple2 c1 c1))) (t2tb1172 x))))

(declare-fun tb2t1172 (uni) (set (tuple21 (tuple21 b b) (tuple21 c c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b b) (tuple21 c c)))))
  (! (= (tb2t1172 (t2tb1172 i)) i) :pattern ((t2tb1172 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 b1) (tuple2 c1 c1))) j)
     (= (t2tb1172 (tb2t1172 j)) j)) :pattern ((t2tb1172 (tb2t1172 j))) )))

(declare-fun t2tb1173 ((tuple21 (tuple21 b b) (tuple21 c c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b b) (tuple21 c c)))) (sort
  (tuple2 (tuple2 b1 b1) (tuple2 c1 c1)) (t2tb1173 x))))

(declare-fun tb2t1173 (uni) (tuple21 (tuple21 b b) (tuple21 c c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b b) (tuple21 c c))))
  (! (= (tb2t1173 (t2tb1173 i)) i) :pattern ((t2tb1173 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 b1) (tuple2 c1 c1)) j)
     (= (t2tb1173 (tb2t1173 j)) j)) :pattern ((t2tb1173 (tb2t1173 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 b c))) (k (set (tuple21 b c))) (x b) (y b) (z c)
  (w c))
  (= (mem (tuple2 (tuple2 b1 b1) (tuple2 c1 c1))
  (Tuple2 (tuple2 b1 b1) (tuple2 c1 c1) (Tuple2 b1 b1 (t2tb14 x) (t2tb14 y))
  (Tuple2 c1 c1 (t2tb135 z) (t2tb135 w)))
  (parallel_product c1 b1 c1 b1 (t2tb131 h) (t2tb131 k)))
  (and (mem8 (tb2t134 (Tuple2 b1 c1 (t2tb14 x) (t2tb135 z))) h) (mem8
  (tb2t134 (Tuple2 b1 c1 (t2tb14 y) (t2tb135 w))) k)))))

(declare-fun t2tb5189 ((tuple21 (tuple21 b b) (tuple21 c a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b b) (tuple21 c a)))) (sort
  (tuple2 (tuple2 b1 b1) (tuple2 c1 a1)) (t2tb5189 x))))

(declare-fun tb2t5189 (uni) (tuple21 (tuple21 b b) (tuple21 c a)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b b) (tuple21 c a))))
  (! (= (tb2t5189 (t2tb5189 i)) i) :pattern ((t2tb5189 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 b1) (tuple2 c1 a1)) j)
     (= (t2tb5189 (tb2t5189 j)) j)) :pattern ((t2tb5189 (tb2t5189 j))) )))

(declare-fun t2tb5190 ((set (tuple21 (tuple21 b b) (tuple21 c a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b b) (tuple21 c a))))) (sort
  (set1 (tuple2 (tuple2 b1 b1) (tuple2 c1 a1))) (t2tb5190 x))))

(declare-fun tb2t5190 (uni) (set (tuple21 (tuple21 b b) (tuple21 c a))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b b) (tuple21 c a)))))
  (! (= (tb2t5190 (t2tb5190 i)) i) :pattern ((t2tb5190 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 b1) (tuple2 c1 a1))) j)
     (= (t2tb5190 (tb2t5190 j)) j)) :pattern ((t2tb5190 (tb2t5190 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 b c))) (k (set (tuple21 b a))) (x b) (y b) (z c)
  (w a))
  (= (mem (tuple2 (tuple2 b1 b1) (tuple2 c1 a1))
  (Tuple2 (tuple2 b1 b1) (tuple2 c1 a1) (Tuple2 b1 b1 (t2tb14 x) (t2tb14 y))
  (Tuple2 c1 a1 (t2tb135 z) (t2tb2 w)))
  (parallel_product a1 b1 c1 b1 (t2tb131 h) (t2tb37 k)))
  (and (mem8 (tb2t134 (Tuple2 b1 c1 (t2tb14 x) (t2tb135 z))) h) (mem5
  (tb2t38 (Tuple2 b1 a1 (t2tb14 y) (t2tb2 w))) k)))))

(declare-fun t2tb5191 ((set (tuple21 (tuple21 b a) (tuple21 c (tuple21 b
  c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b a) (tuple21 c (tuple21 b c)))))) (sort
  (set1 (tuple2 (tuple2 b1 a1) (tuple2 c1 (tuple2 b1 c1)))) (t2tb5191 x))))

(declare-fun tb2t5191 (uni) (set (tuple21 (tuple21 b a) (tuple21 c (tuple21 b
  c)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b a) (tuple21 c (tuple21 b c))))))
  (! (= (tb2t5191 (t2tb5191 i)) i) :pattern ((t2tb5191 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 a1) (tuple2 c1 (tuple2 b1 c1)))) j)
     (= (t2tb5191 (tb2t5191 j)) j)) :pattern ((t2tb5191 (tb2t5191 j))) )))

(declare-fun t2tb5192 ((tuple21 (tuple21 b a) (tuple21 c (tuple21 b
  c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b a) (tuple21 c (tuple21 b c))))) (sort
  (tuple2 (tuple2 b1 a1) (tuple2 c1 (tuple2 b1 c1))) (t2tb5192 x))))

(declare-fun tb2t5192 (uni) (tuple21 (tuple21 b a) (tuple21 c (tuple21 b
  c))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b a) (tuple21 c (tuple21 b c)))))
  (! (= (tb2t5192 (t2tb5192 i)) i) :pattern ((t2tb5192 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 a1) (tuple2 c1 (tuple2 b1 c1))) j)
     (= (t2tb5192 (tb2t5192 j)) j)) :pattern ((t2tb5192 (tb2t5192 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 b c))) (k (set (tuple21 a (tuple21 b c)))) (x b)
  (y a) (z c) (w (tuple21 b c)))
  (= (mem (tuple2 (tuple2 b1 a1) (tuple2 c1 (tuple2 b1 c1)))
  (Tuple2 (tuple2 b1 a1) (tuple2 c1 (tuple2 b1 c1))
  (Tuple2 b1 a1 (t2tb14 x) (t2tb2 y))
  (Tuple2 c1 (tuple2 b1 c1) (t2tb135 z) (t2tb134 w)))
  (parallel_product (tuple2 b1 c1) a1 c1 b1 (t2tb131 h) (t2tb261 k)))
  (and (mem8 (tb2t134 (Tuple2 b1 c1 (t2tb14 x) (t2tb135 z))) h) (mem14
  (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 y) (t2tb134 w))) k)))))

(declare-fun t2tb1174 ((set (tuple21 (tuple21 b a) (tuple21 c c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b a) (tuple21 c c))))) (sort
  (set1 (tuple2 (tuple2 b1 a1) (tuple2 c1 c1))) (t2tb1174 x))))

(declare-fun tb2t1174 (uni) (set (tuple21 (tuple21 b a) (tuple21 c c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b a) (tuple21 c c)))))
  (! (= (tb2t1174 (t2tb1174 i)) i) :pattern ((t2tb1174 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 a1) (tuple2 c1 c1))) j)
     (= (t2tb1174 (tb2t1174 j)) j)) :pattern ((t2tb1174 (tb2t1174 j))) )))

(declare-fun t2tb1175 ((tuple21 (tuple21 b a) (tuple21 c c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b a) (tuple21 c c)))) (sort
  (tuple2 (tuple2 b1 a1) (tuple2 c1 c1)) (t2tb1175 x))))

(declare-fun tb2t1175 (uni) (tuple21 (tuple21 b a) (tuple21 c c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b a) (tuple21 c c))))
  (! (= (tb2t1175 (t2tb1175 i)) i) :pattern ((t2tb1175 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 a1) (tuple2 c1 c1)) j)
     (= (t2tb1175 (tb2t1175 j)) j)) :pattern ((t2tb1175 (tb2t1175 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 b c))) (k (set (tuple21 a c))) (x b) (y a) (z c)
  (w c))
  (= (mem (tuple2 (tuple2 b1 a1) (tuple2 c1 c1))
  (Tuple2 (tuple2 b1 a1) (tuple2 c1 c1) (Tuple2 b1 a1 (t2tb14 x) (t2tb2 y))
  (Tuple2 c1 c1 (t2tb135 z) (t2tb135 w)))
  (parallel_product c1 a1 c1 b1 (t2tb131 h) (t2tb129 k)))
  (and (mem8 (tb2t134 (Tuple2 b1 c1 (t2tb14 x) (t2tb135 z))) h) (mem10
  (tb2t133 (Tuple2 a1 c1 (t2tb2 y) (t2tb135 w))) k)))))

(declare-fun t2tb1176 ((set (tuple21 (tuple21 b a) (tuple21 c b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b a) (tuple21 c b))))) (sort
  (set1 (tuple2 (tuple2 b1 a1) (tuple2 c1 b1))) (t2tb1176 x))))

(declare-fun tb2t1176 (uni) (set (tuple21 (tuple21 b a) (tuple21 c b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b a) (tuple21 c b)))))
  (! (= (tb2t1176 (t2tb1176 i)) i) :pattern ((t2tb1176 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 a1) (tuple2 c1 b1))) j)
     (= (t2tb1176 (tb2t1176 j)) j)) :pattern ((t2tb1176 (tb2t1176 j))) )))

(declare-fun t2tb1177 ((tuple21 (tuple21 b a) (tuple21 c b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b a) (tuple21 c b)))) (sort
  (tuple2 (tuple2 b1 a1) (tuple2 c1 b1)) (t2tb1177 x))))

(declare-fun tb2t1177 (uni) (tuple21 (tuple21 b a) (tuple21 c b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b a) (tuple21 c b))))
  (! (= (tb2t1177 (t2tb1177 i)) i) :pattern ((t2tb1177 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 a1) (tuple2 c1 b1)) j)
     (= (t2tb1177 (tb2t1177 j)) j)) :pattern ((t2tb1177 (tb2t1177 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 b c))) (k (set (tuple21 a b))) (x b) (y a) (z c)
  (w b))
  (= (mem (tuple2 (tuple2 b1 a1) (tuple2 c1 b1))
  (Tuple2 (tuple2 b1 a1) (tuple2 c1 b1) (Tuple2 b1 a1 (t2tb14 x) (t2tb2 y))
  (Tuple2 c1 b1 (t2tb135 z) (t2tb14 w)))
  (parallel_product b1 a1 c1 b1 (t2tb131 h) (t2tb11 k)))
  (and (mem8 (tb2t134 (Tuple2 b1 c1 (t2tb14 x) (t2tb135 z))) h) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 y) (t2tb14 w))) k)))))

;; mem_parallel_product
  (assert
  (forall ((c2 ty) (d2 ty))
  (forall ((h (set (tuple21 b c))) (k uni) (x b) (y uni) (z c) (w uni))
  (= (mem (tuple2 (tuple2 b1 c2) (tuple2 c1 d2))
  (Tuple2 (tuple2 b1 c2) (tuple2 c1 d2) (Tuple2 b1 c2 (t2tb14 x) y)
  (Tuple2 c1 d2 (t2tb135 z) w)) (parallel_product d2 c2 c1 b1 (t2tb131 h) k))
  (and (mem8 (tb2t134 (Tuple2 b1 c1 (t2tb14 x) (t2tb135 z))) h) (mem
  (tuple2 c2 d2) (Tuple2 c2 d2 y w) k))))))

(declare-fun t2tb5193 ((set (tuple21 (tuple21 b b) (tuple21 a c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b b) (tuple21 a c))))) (sort
  (set1 (tuple2 (tuple2 b1 b1) (tuple2 a1 c1))) (t2tb5193 x))))

(declare-fun tb2t5193 (uni) (set (tuple21 (tuple21 b b) (tuple21 a c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b b) (tuple21 a c)))))
  (! (= (tb2t5193 (t2tb5193 i)) i) :pattern ((t2tb5193 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 b1) (tuple2 a1 c1))) j)
     (= (t2tb5193 (tb2t5193 j)) j)) :pattern ((t2tb5193 (tb2t5193 j))) )))

(declare-fun t2tb5194 ((tuple21 (tuple21 b b) (tuple21 a c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b b) (tuple21 a c)))) (sort
  (tuple2 (tuple2 b1 b1) (tuple2 a1 c1)) (t2tb5194 x))))

(declare-fun tb2t5194 (uni) (tuple21 (tuple21 b b) (tuple21 a c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b b) (tuple21 a c))))
  (! (= (tb2t5194 (t2tb5194 i)) i) :pattern ((t2tb5194 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 b1) (tuple2 a1 c1)) j)
     (= (t2tb5194 (tb2t5194 j)) j)) :pattern ((t2tb5194 (tb2t5194 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 b a))) (k (set (tuple21 b c))) (x b) (y b) (z a)
  (w c))
  (= (mem (tuple2 (tuple2 b1 b1) (tuple2 a1 c1))
  (Tuple2 (tuple2 b1 b1) (tuple2 a1 c1) (Tuple2 b1 b1 (t2tb14 x) (t2tb14 y))
  (Tuple2 a1 c1 (t2tb2 z) (t2tb135 w)))
  (parallel_product c1 b1 a1 b1 (t2tb37 h) (t2tb131 k)))
  (and (mem5 (tb2t38 (Tuple2 b1 a1 (t2tb14 x) (t2tb2 z))) h) (mem8
  (tb2t134 (Tuple2 b1 c1 (t2tb14 y) (t2tb135 w))) k)))))

(declare-fun t2tb1086 ((set (tuple21 (tuple21 b b) (tuple21 a a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b b) (tuple21 a a))))) (sort
  (set1 (tuple2 (tuple2 b1 b1) (tuple2 a1 a1))) (t2tb1086 x))))

(declare-fun tb2t1086 (uni) (set (tuple21 (tuple21 b b) (tuple21 a a))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b b) (tuple21 a a)))))
  (! (= (tb2t1086 (t2tb1086 i)) i) :pattern ((t2tb1086 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 b1) (tuple2 a1 a1))) j)
     (= (t2tb1086 (tb2t1086 j)) j)) :pattern ((t2tb1086 (tb2t1086 j))) )))

(declare-fun t2tb1087 ((tuple21 (tuple21 b b) (tuple21 a a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b b) (tuple21 a a)))) (sort
  (tuple2 (tuple2 b1 b1) (tuple2 a1 a1)) (t2tb1087 x))))

(declare-fun tb2t1087 (uni) (tuple21 (tuple21 b b) (tuple21 a a)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b b) (tuple21 a a))))
  (! (= (tb2t1087 (t2tb1087 i)) i) :pattern ((t2tb1087 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 b1) (tuple2 a1 a1)) j)
     (= (t2tb1087 (tb2t1087 j)) j)) :pattern ((t2tb1087 (tb2t1087 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 b a))) (k (set (tuple21 b a))) (x b) (y b) (z a)
  (w a))
  (= (mem (tuple2 (tuple2 b1 b1) (tuple2 a1 a1))
  (Tuple2 (tuple2 b1 b1) (tuple2 a1 a1) (Tuple2 b1 b1 (t2tb14 x) (t2tb14 y))
  (Tuple2 a1 a1 (t2tb2 z) (t2tb2 w)))
  (parallel_product a1 b1 a1 b1 (t2tb37 h) (t2tb37 k)))
  (and (mem5 (tb2t38 (Tuple2 b1 a1 (t2tb14 x) (t2tb2 z))) h) (mem5
  (tb2t38 (Tuple2 b1 a1 (t2tb14 y) (t2tb2 w))) k)))))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 b a))) (k (set (tuple21 a (tuple21 b c)))) (x b)
  (y a) (z a) (w (tuple21 b c)))
  (= (mem (tuple2 (tuple2 b1 a1) (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 (tuple2 b1 a1) (tuple2 a1 (tuple2 b1 c1))
  (Tuple2 b1 a1 (t2tb14 x) (t2tb2 y))
  (Tuple2 a1 (tuple2 b1 c1) (t2tb2 z) (t2tb134 w)))
  (parallel_product (tuple2 b1 c1) a1 a1 b1 (t2tb37 h) (t2tb261 k)))
  (and (mem5 (tb2t38 (Tuple2 b1 a1 (t2tb14 x) (t2tb2 z))) h) (mem14
  (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 y) (t2tb134 w))) k)))))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 b a))) (k (set (tuple21 a c))) (x b) (y a) (z a)
  (w c))
  (= (mem (tuple2 (tuple2 b1 a1) (tuple2 a1 c1))
  (Tuple2 (tuple2 b1 a1) (tuple2 a1 c1) (Tuple2 b1 a1 (t2tb14 x) (t2tb2 y))
  (Tuple2 a1 c1 (t2tb2 z) (t2tb135 w)))
  (parallel_product c1 a1 a1 b1 (t2tb37 h) (t2tb129 k)))
  (and (mem5 (tb2t38 (Tuple2 b1 a1 (t2tb14 x) (t2tb2 z))) h) (mem10
  (tb2t133 (Tuple2 a1 c1 (t2tb2 y) (t2tb135 w))) k)))))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 b a))) (k (set (tuple21 a b))) (x b) (y a) (z a)
  (w b))
  (= (mem (tuple2 (tuple2 b1 a1) (tuple2 a1 b1))
  (Tuple2 (tuple2 b1 a1) (tuple2 a1 b1) (Tuple2 b1 a1 (t2tb14 x) (t2tb2 y))
  (Tuple2 a1 b1 (t2tb2 z) (t2tb14 w)))
  (parallel_product b1 a1 a1 b1 (t2tb37 h) (t2tb11 k)))
  (and (mem5 (tb2t38 (Tuple2 b1 a1 (t2tb14 x) (t2tb2 z))) h) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 y) (t2tb14 w))) k)))))

;; mem_parallel_product
  (assert
  (forall ((c2 ty) (d2 ty))
  (forall ((h (set (tuple21 b a))) (k uni) (x b) (y uni) (z a) (w uni))
  (= (mem (tuple2 (tuple2 b1 c2) (tuple2 a1 d2))
  (Tuple2 (tuple2 b1 c2) (tuple2 a1 d2) (Tuple2 b1 c2 (t2tb14 x) y)
  (Tuple2 a1 d2 (t2tb2 z) w)) (parallel_product d2 c2 a1 b1 (t2tb37 h) k))
  (and (mem5 (tb2t38 (Tuple2 b1 a1 (t2tb14 x) (t2tb2 z))) h) (mem
  (tuple2 c2 d2) (Tuple2 c2 d2 y w) k))))))

(declare-fun t2tb5195 ((set (tuple21 (tuple21 a b) (tuple21 (tuple21 b c)
  c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) (tuple21 (tuple21 b c) c))))) (sort
  (set1 (tuple2 (tuple2 a1 b1) (tuple2 (tuple2 b1 c1) c1))) (t2tb5195 x))))

(declare-fun tb2t5195 (uni) (set (tuple21 (tuple21 a b) (tuple21 (tuple21 b
  c) c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a b) (tuple21 (tuple21 b c) c)))))
  (! (= (tb2t5195 (t2tb5195 i)) i) :pattern ((t2tb5195 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 b1) (tuple2 (tuple2 b1 c1) c1))) j)
     (= (t2tb5195 (tb2t5195 j)) j)) :pattern ((t2tb5195 (tb2t5195 j))) )))

(declare-fun t2tb5196 ((tuple21 (tuple21 a b) (tuple21 (tuple21 b c)
  c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a b) (tuple21 (tuple21 b c) c)))) (sort
  (tuple2 (tuple2 a1 b1) (tuple2 (tuple2 b1 c1) c1)) (t2tb5196 x))))

(declare-fun tb2t5196 (uni) (tuple21 (tuple21 a b) (tuple21 (tuple21 b c)
  c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a b) (tuple21 (tuple21 b c) c))))
  (! (= (tb2t5196 (t2tb5196 i)) i) :pattern ((t2tb5196 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 b1) (tuple2 (tuple2 b1 c1) c1)) j)
     (= (t2tb5196 (tb2t5196 j)) j)) :pattern ((t2tb5196 (tb2t5196 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a (tuple21 b c)))) (k (set (tuple21 b c))) (x a)
  (y b) (z (tuple21 b c)) (w c))
  (= (mem (tuple2 (tuple2 a1 b1) (tuple2 (tuple2 b1 c1) c1))
  (Tuple2 (tuple2 a1 b1) (tuple2 (tuple2 b1 c1) c1)
  (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y))
  (Tuple2 (tuple2 b1 c1) c1 (t2tb134 z) (t2tb135 w)))
  (parallel_product c1 b1 (tuple2 b1 c1) a1 (t2tb261 h) (t2tb131 k)))
  (and (mem14 (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 z))) h)
  (mem8 (tb2t134 (Tuple2 b1 c1 (t2tb14 y) (t2tb135 w))) k)))))

(declare-fun t2tb5197 ((set (tuple21 (tuple21 a b) (tuple21 (tuple21 b c)
  a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) (tuple21 (tuple21 b c) a))))) (sort
  (set1 (tuple2 (tuple2 a1 b1) (tuple2 (tuple2 b1 c1) a1))) (t2tb5197 x))))

(declare-fun tb2t5197 (uni) (set (tuple21 (tuple21 a b) (tuple21 (tuple21 b
  c) a))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a b) (tuple21 (tuple21 b c) a)))))
  (! (= (tb2t5197 (t2tb5197 i)) i) :pattern ((t2tb5197 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 b1) (tuple2 (tuple2 b1 c1) a1))) j)
     (= (t2tb5197 (tb2t5197 j)) j)) :pattern ((t2tb5197 (tb2t5197 j))) )))

(declare-fun t2tb5198 ((tuple21 (tuple21 a b) (tuple21 (tuple21 b c)
  a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a b) (tuple21 (tuple21 b c) a)))) (sort
  (tuple2 (tuple2 a1 b1) (tuple2 (tuple2 b1 c1) a1)) (t2tb5198 x))))

(declare-fun tb2t5198 (uni) (tuple21 (tuple21 a b) (tuple21 (tuple21 b c)
  a)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a b) (tuple21 (tuple21 b c) a))))
  (! (= (tb2t5198 (t2tb5198 i)) i) :pattern ((t2tb5198 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 b1) (tuple2 (tuple2 b1 c1) a1)) j)
     (= (t2tb5198 (tb2t5198 j)) j)) :pattern ((t2tb5198 (tb2t5198 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a (tuple21 b c)))) (k (set (tuple21 b a))) (x a)
  (y b) (z (tuple21 b c)) (w a))
  (= (mem (tuple2 (tuple2 a1 b1) (tuple2 (tuple2 b1 c1) a1))
  (Tuple2 (tuple2 a1 b1) (tuple2 (tuple2 b1 c1) a1)
  (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y))
  (Tuple2 (tuple2 b1 c1) a1 (t2tb134 z) (t2tb2 w)))
  (parallel_product a1 b1 (tuple2 b1 c1) a1 (t2tb261 h) (t2tb37 k)))
  (and (mem14 (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 z))) h)
  (mem5 (tb2t38 (Tuple2 b1 a1 (t2tb14 y) (t2tb2 w))) k)))))

(declare-fun t2tb5031 ((set (tuple21 (tuple21 a a) (tuple21 (tuple21 b c)
  (tuple21 b c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a a) (tuple21 (tuple21 b c) (tuple21 b
  c)))))) (sort
  (set1 (tuple2 (tuple2 a1 a1) (tuple2 (tuple2 b1 c1) (tuple2 b1 c1))))
  (t2tb5031 x))))

(declare-fun tb2t5031 (uni) (set (tuple21 (tuple21 a a) (tuple21 (tuple21 b
  c) (tuple21 b c)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a a) (tuple21 (tuple21 b c) (tuple21 b
  c)))))) (! (= (tb2t5031 (t2tb5031 i)) i) :pattern ((t2tb5031 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 a1 a1) (tuple2 (tuple2 b1 c1) (tuple2 b1 c1)))) j)
     (= (t2tb5031 (tb2t5031 j)) j)) :pattern ((t2tb5031 (tb2t5031 j))) )))

(declare-fun t2tb5032 ((tuple21 (tuple21 a a) (tuple21 (tuple21 b c)
  (tuple21 b c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a a) (tuple21 (tuple21 b c) (tuple21 b c)))))
  (sort (tuple2 (tuple2 a1 a1) (tuple2 (tuple2 b1 c1) (tuple2 b1 c1)))
  (t2tb5032 x))))

(declare-fun tb2t5032 (uni) (tuple21 (tuple21 a a) (tuple21 (tuple21 b c)
  (tuple21 b c))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a a) (tuple21 (tuple21 b c) (tuple21 b c)))))
  (! (= (tb2t5032 (t2tb5032 i)) i) :pattern ((t2tb5032 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 a1) (tuple2 (tuple2 b1 c1) (tuple2 b1 c1)))
     j) (= (t2tb5032 (tb2t5032 j)) j)) :pattern ((t2tb5032 (tb2t5032 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a (tuple21 b c)))) (k (set (tuple21 a (tuple21 b
  c)))) (x a) (y a) (z (tuple21 b c)) (w (tuple21 b c)))
  (= (mem (tuple2 (tuple2 a1 a1) (tuple2 (tuple2 b1 c1) (tuple2 b1 c1)))
  (Tuple2 (tuple2 a1 a1) (tuple2 (tuple2 b1 c1) (tuple2 b1 c1))
  (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y))
  (Tuple2 (tuple2 b1 c1) (tuple2 b1 c1) (t2tb134 z) (t2tb134 w)))
  (parallel_product (tuple2 b1 c1) a1 (tuple2 b1 c1) a1 (t2tb261 h)
  (t2tb261 k)))
  (and (mem14 (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 z))) h)
  (mem14 (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 y) (t2tb134 w))) k)))))

(declare-fun t2tb5033 ((set (tuple21 (tuple21 a a) (tuple21 (tuple21 b c)
  c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a a) (tuple21 (tuple21 b c) c))))) (sort
  (set1 (tuple2 (tuple2 a1 a1) (tuple2 (tuple2 b1 c1) c1))) (t2tb5033 x))))

(declare-fun tb2t5033 (uni) (set (tuple21 (tuple21 a a) (tuple21 (tuple21 b
  c) c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a a) (tuple21 (tuple21 b c) c)))))
  (! (= (tb2t5033 (t2tb5033 i)) i) :pattern ((t2tb5033 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 a1) (tuple2 (tuple2 b1 c1) c1))) j)
     (= (t2tb5033 (tb2t5033 j)) j)) :pattern ((t2tb5033 (tb2t5033 j))) )))

(declare-fun t2tb5034 ((tuple21 (tuple21 a a) (tuple21 (tuple21 b c)
  c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a a) (tuple21 (tuple21 b c) c)))) (sort
  (tuple2 (tuple2 a1 a1) (tuple2 (tuple2 b1 c1) c1)) (t2tb5034 x))))

(declare-fun tb2t5034 (uni) (tuple21 (tuple21 a a) (tuple21 (tuple21 b c)
  c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a a) (tuple21 (tuple21 b c) c))))
  (! (= (tb2t5034 (t2tb5034 i)) i) :pattern ((t2tb5034 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 a1) (tuple2 (tuple2 b1 c1) c1)) j)
     (= (t2tb5034 (tb2t5034 j)) j)) :pattern ((t2tb5034 (tb2t5034 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a (tuple21 b c)))) (k (set (tuple21 a c))) (x a)
  (y a) (z (tuple21 b c)) (w c))
  (= (mem (tuple2 (tuple2 a1 a1) (tuple2 (tuple2 b1 c1) c1))
  (Tuple2 (tuple2 a1 a1) (tuple2 (tuple2 b1 c1) c1)
  (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y))
  (Tuple2 (tuple2 b1 c1) c1 (t2tb134 z) (t2tb135 w)))
  (parallel_product c1 a1 (tuple2 b1 c1) a1 (t2tb261 h) (t2tb129 k)))
  (and (mem14 (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 z))) h)
  (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 y) (t2tb135 w))) k)))))

(declare-fun t2tb5035 ((set (tuple21 (tuple21 a a) (tuple21 (tuple21 b c)
  b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a a) (tuple21 (tuple21 b c) b))))) (sort
  (set1 (tuple2 (tuple2 a1 a1) (tuple2 (tuple2 b1 c1) b1))) (t2tb5035 x))))

(declare-fun tb2t5035 (uni) (set (tuple21 (tuple21 a a) (tuple21 (tuple21 b
  c) b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a a) (tuple21 (tuple21 b c) b)))))
  (! (= (tb2t5035 (t2tb5035 i)) i) :pattern ((t2tb5035 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 a1) (tuple2 (tuple2 b1 c1) b1))) j)
     (= (t2tb5035 (tb2t5035 j)) j)) :pattern ((t2tb5035 (tb2t5035 j))) )))

(declare-fun t2tb5036 ((tuple21 (tuple21 a a) (tuple21 (tuple21 b c)
  b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a a) (tuple21 (tuple21 b c) b)))) (sort
  (tuple2 (tuple2 a1 a1) (tuple2 (tuple2 b1 c1) b1)) (t2tb5036 x))))

(declare-fun tb2t5036 (uni) (tuple21 (tuple21 a a) (tuple21 (tuple21 b c)
  b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a a) (tuple21 (tuple21 b c) b))))
  (! (= (tb2t5036 (t2tb5036 i)) i) :pattern ((t2tb5036 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 a1) (tuple2 (tuple2 b1 c1) b1)) j)
     (= (t2tb5036 (tb2t5036 j)) j)) :pattern ((t2tb5036 (tb2t5036 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a (tuple21 b c)))) (k (set (tuple21 a b))) (x a)
  (y a) (z (tuple21 b c)) (w b))
  (= (mem (tuple2 (tuple2 a1 a1) (tuple2 (tuple2 b1 c1) b1))
  (Tuple2 (tuple2 a1 a1) (tuple2 (tuple2 b1 c1) b1)
  (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y))
  (Tuple2 (tuple2 b1 c1) b1 (t2tb134 z) (t2tb14 w)))
  (parallel_product b1 a1 (tuple2 b1 c1) a1 (t2tb261 h) (t2tb11 k)))
  (and (mem14 (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 z))) h)
  (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 y) (t2tb14 w))) k)))))

;; mem_parallel_product
  (assert
  (forall ((c2 ty) (d2 ty))
  (forall ((h (set (tuple21 a (tuple21 b c)))) (k uni) (x a) (y uni)
  (z (tuple21 b c)) (w uni))
  (= (mem (tuple2 (tuple2 a1 c2) (tuple2 (tuple2 b1 c1) d2))
  (Tuple2 (tuple2 a1 c2) (tuple2 (tuple2 b1 c1) d2)
  (Tuple2 a1 c2 (t2tb2 x) y) (Tuple2 (tuple2 b1 c1) d2 (t2tb134 z) w))
  (parallel_product d2 c2 (tuple2 b1 c1) a1 (t2tb261 h) k))
  (and (mem14 (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 z))) h)
  (mem (tuple2 c2 d2) (Tuple2 c2 d2 y w) k))))))

(declare-fun t2tb1178 ((set (tuple21 (tuple21 a b) (tuple21 c c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) (tuple21 c c))))) (sort
  (set1 (tuple2 (tuple2 a1 b1) (tuple2 c1 c1))) (t2tb1178 x))))

(declare-fun tb2t1178 (uni) (set (tuple21 (tuple21 a b) (tuple21 c c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a b) (tuple21 c c)))))
  (! (= (tb2t1178 (t2tb1178 i)) i) :pattern ((t2tb1178 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 b1) (tuple2 c1 c1))) j)
     (= (t2tb1178 (tb2t1178 j)) j)) :pattern ((t2tb1178 (tb2t1178 j))) )))

(declare-fun t2tb1179 ((tuple21 (tuple21 a b) (tuple21 c c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a b) (tuple21 c c)))) (sort
  (tuple2 (tuple2 a1 b1) (tuple2 c1 c1)) (t2tb1179 x))))

(declare-fun tb2t1179 (uni) (tuple21 (tuple21 a b) (tuple21 c c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a b) (tuple21 c c))))
  (! (= (tb2t1179 (t2tb1179 i)) i) :pattern ((t2tb1179 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 b1) (tuple2 c1 c1)) j)
     (= (t2tb1179 (tb2t1179 j)) j)) :pattern ((t2tb1179 (tb2t1179 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a c))) (k (set (tuple21 b c))) (x a) (y b) (z c)
  (w c))
  (= (mem (tuple2 (tuple2 a1 b1) (tuple2 c1 c1))
  (Tuple2 (tuple2 a1 b1) (tuple2 c1 c1) (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y))
  (Tuple2 c1 c1 (t2tb135 z) (t2tb135 w)))
  (parallel_product c1 b1 c1 a1 (t2tb129 h) (t2tb131 k)))
  (and (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 z))) h) (mem8
  (tb2t134 (Tuple2 b1 c1 (t2tb14 y) (t2tb135 w))) k)))))

(declare-fun t2tb5199 ((set (tuple21 (tuple21 a b) (tuple21 c a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) (tuple21 c a))))) (sort
  (set1 (tuple2 (tuple2 a1 b1) (tuple2 c1 a1))) (t2tb5199 x))))

(declare-fun tb2t5199 (uni) (set (tuple21 (tuple21 a b) (tuple21 c a))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a b) (tuple21 c a)))))
  (! (= (tb2t5199 (t2tb5199 i)) i) :pattern ((t2tb5199 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 b1) (tuple2 c1 a1))) j)
     (= (t2tb5199 (tb2t5199 j)) j)) :pattern ((t2tb5199 (tb2t5199 j))) )))

(declare-fun t2tb5200 ((tuple21 (tuple21 a b) (tuple21 c a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a b) (tuple21 c a)))) (sort
  (tuple2 (tuple2 a1 b1) (tuple2 c1 a1)) (t2tb5200 x))))

(declare-fun tb2t5200 (uni) (tuple21 (tuple21 a b) (tuple21 c a)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a b) (tuple21 c a))))
  (! (= (tb2t5200 (t2tb5200 i)) i) :pattern ((t2tb5200 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 b1) (tuple2 c1 a1)) j)
     (= (t2tb5200 (tb2t5200 j)) j)) :pattern ((t2tb5200 (tb2t5200 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a c))) (k (set (tuple21 b a))) (x a) (y b) (z c)
  (w a))
  (= (mem (tuple2 (tuple2 a1 b1) (tuple2 c1 a1))
  (Tuple2 (tuple2 a1 b1) (tuple2 c1 a1) (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y))
  (Tuple2 c1 a1 (t2tb135 z) (t2tb2 w)))
  (parallel_product a1 b1 c1 a1 (t2tb129 h) (t2tb37 k)))
  (and (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 z))) h) (mem5
  (tb2t38 (Tuple2 b1 a1 (t2tb14 y) (t2tb2 w))) k)))))

(declare-fun t2tb5045 ((set (tuple21 (tuple21 a a) (tuple21 c (tuple21 b
  c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a a) (tuple21 c (tuple21 b c)))))) (sort
  (set1 (tuple2 (tuple2 a1 a1) (tuple2 c1 (tuple2 b1 c1)))) (t2tb5045 x))))

(declare-fun tb2t5045 (uni) (set (tuple21 (tuple21 a a) (tuple21 c (tuple21 b
  c)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a a) (tuple21 c (tuple21 b c))))))
  (! (= (tb2t5045 (t2tb5045 i)) i) :pattern ((t2tb5045 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 a1) (tuple2 c1 (tuple2 b1 c1)))) j)
     (= (t2tb5045 (tb2t5045 j)) j)) :pattern ((t2tb5045 (tb2t5045 j))) )))

(declare-fun t2tb5046 ((tuple21 (tuple21 a a) (tuple21 c (tuple21 b
  c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a a) (tuple21 c (tuple21 b c))))) (sort
  (tuple2 (tuple2 a1 a1) (tuple2 c1 (tuple2 b1 c1))) (t2tb5046 x))))

(declare-fun tb2t5046 (uni) (tuple21 (tuple21 a a) (tuple21 c (tuple21 b
  c))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a a) (tuple21 c (tuple21 b c)))))
  (! (= (tb2t5046 (t2tb5046 i)) i) :pattern ((t2tb5046 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 a1) (tuple2 c1 (tuple2 b1 c1))) j)
     (= (t2tb5046 (tb2t5046 j)) j)) :pattern ((t2tb5046 (tb2t5046 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a c))) (k (set (tuple21 a (tuple21 b c)))) (x a)
  (y a) (z c) (w (tuple21 b c)))
  (= (mem (tuple2 (tuple2 a1 a1) (tuple2 c1 (tuple2 b1 c1)))
  (Tuple2 (tuple2 a1 a1) (tuple2 c1 (tuple2 b1 c1))
  (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y))
  (Tuple2 c1 (tuple2 b1 c1) (t2tb135 z) (t2tb134 w)))
  (parallel_product (tuple2 b1 c1) a1 c1 a1 (t2tb129 h) (t2tb261 k)))
  (and (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 z))) h) (mem14
  (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 y) (t2tb134 w))) k)))))

(declare-fun t2tb342 ((set (tuple21 (tuple21 a a) (tuple21 c c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a a) (tuple21 c c))))) (sort
  (set1 (tuple2 (tuple2 a1 a1) (tuple2 c1 c1))) (t2tb342 x))))

(declare-fun tb2t342 (uni) (set (tuple21 (tuple21 a a) (tuple21 c c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a a) (tuple21 c c)))))
  (! (= (tb2t342 (t2tb342 i)) i) :pattern ((t2tb342 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 a1) (tuple2 c1 c1))) j)
     (= (t2tb342 (tb2t342 j)) j)) :pattern ((t2tb342 (tb2t342 j))) )))

(declare-fun t2tb343 ((tuple21 (tuple21 a a) (tuple21 c c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a a) (tuple21 c c)))) (sort
  (tuple2 (tuple2 a1 a1) (tuple2 c1 c1)) (t2tb343 x))))

(declare-fun tb2t343 (uni) (tuple21 (tuple21 a a) (tuple21 c c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a a) (tuple21 c c))))
  (! (= (tb2t343 (t2tb343 i)) i) :pattern ((t2tb343 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 a1) (tuple2 c1 c1)) j)
     (= (t2tb343 (tb2t343 j)) j)) :pattern ((t2tb343 (tb2t343 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a c))) (k (set (tuple21 a c))) (x a) (y a) (z c)
  (w c))
  (= (mem (tuple2 (tuple2 a1 a1) (tuple2 c1 c1))
  (Tuple2 (tuple2 a1 a1) (tuple2 c1 c1) (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y))
  (Tuple2 c1 c1 (t2tb135 z) (t2tb135 w)))
  (parallel_product c1 a1 c1 a1 (t2tb129 h) (t2tb129 k)))
  (and (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 z))) h) (mem10
  (tb2t133 (Tuple2 a1 c1 (t2tb2 y) (t2tb135 w))) k)))))

(declare-fun t2tb344 ((set (tuple21 (tuple21 a a) (tuple21 c b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a a) (tuple21 c b))))) (sort
  (set1 (tuple2 (tuple2 a1 a1) (tuple2 c1 b1))) (t2tb344 x))))

(declare-fun tb2t344 (uni) (set (tuple21 (tuple21 a a) (tuple21 c b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a a) (tuple21 c b)))))
  (! (= (tb2t344 (t2tb344 i)) i) :pattern ((t2tb344 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 a1) (tuple2 c1 b1))) j)
     (= (t2tb344 (tb2t344 j)) j)) :pattern ((t2tb344 (tb2t344 j))) )))

(declare-fun t2tb345 ((tuple21 (tuple21 a a) (tuple21 c b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a a) (tuple21 c b)))) (sort
  (tuple2 (tuple2 a1 a1) (tuple2 c1 b1)) (t2tb345 x))))

(declare-fun tb2t345 (uni) (tuple21 (tuple21 a a) (tuple21 c b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a a) (tuple21 c b))))
  (! (= (tb2t345 (t2tb345 i)) i) :pattern ((t2tb345 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 a1) (tuple2 c1 b1)) j)
     (= (t2tb345 (tb2t345 j)) j)) :pattern ((t2tb345 (tb2t345 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a c))) (k (set (tuple21 a b))) (x a) (y a) (z c)
  (w b))
  (= (mem (tuple2 (tuple2 a1 a1) (tuple2 c1 b1))
  (Tuple2 (tuple2 a1 a1) (tuple2 c1 b1) (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y))
  (Tuple2 c1 b1 (t2tb135 z) (t2tb14 w)))
  (parallel_product b1 a1 c1 a1 (t2tb129 h) (t2tb11 k)))
  (and (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 z))) h) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 y) (t2tb14 w))) k)))))

;; mem_parallel_product
  (assert
  (forall ((c2 ty) (d2 ty))
  (forall ((h (set (tuple21 a c))) (k uni) (x a) (y uni) (z c) (w uni))
  (= (mem (tuple2 (tuple2 a1 c2) (tuple2 c1 d2))
  (Tuple2 (tuple2 a1 c2) (tuple2 c1 d2) (Tuple2 a1 c2 (t2tb2 x) y)
  (Tuple2 c1 d2 (t2tb135 z) w)) (parallel_product d2 c2 c1 a1 (t2tb129 h) k))
  (and (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 z))) h) (mem
  (tuple2 c2 d2) (Tuple2 c2 d2 y w) k))))))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a b))) (k (set (tuple21 b c))) (x a) (y b) (z b)
  (w c))
  (= (mem (tuple2 (tuple2 a1 b1) (tuple2 b1 c1))
  (Tuple2 (tuple2 a1 b1) (tuple2 b1 c1) (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y))
  (Tuple2 b1 c1 (t2tb14 z) (t2tb135 w)))
  (parallel_product c1 b1 b1 a1 (t2tb11 h) (t2tb131 k)))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 z))) h) (mem8
  (tb2t134 (Tuple2 b1 c1 (t2tb14 y) (t2tb135 w))) k)))))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a b))) (k (set (tuple21 b a))) (x a) (y b) (z b)
  (w a))
  (= (mem (tuple2 (tuple2 a1 b1) (tuple2 b1 a1))
  (Tuple2 (tuple2 a1 b1) (tuple2 b1 a1) (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y))
  (Tuple2 b1 a1 (t2tb14 z) (t2tb2 w)))
  (parallel_product a1 b1 b1 a1 (t2tb11 h) (t2tb37 k)))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 z))) h) (mem5
  (tb2t38 (Tuple2 b1 a1 (t2tb14 y) (t2tb2 w))) k)))))

(declare-fun t2tb5055 ((set (tuple21 (tuple21 a a) (tuple21 b (tuple21 b
  c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a a) (tuple21 b (tuple21 b c)))))) (sort
  (set1 (tuple2 (tuple2 a1 a1) (tuple2 b1 (tuple2 b1 c1)))) (t2tb5055 x))))

(declare-fun tb2t5055 (uni) (set (tuple21 (tuple21 a a) (tuple21 b (tuple21 b
  c)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a a) (tuple21 b (tuple21 b c))))))
  (! (= (tb2t5055 (t2tb5055 i)) i) :pattern ((t2tb5055 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 a1) (tuple2 b1 (tuple2 b1 c1)))) j)
     (= (t2tb5055 (tb2t5055 j)) j)) :pattern ((t2tb5055 (tb2t5055 j))) )))

(declare-fun t2tb5056 ((tuple21 (tuple21 a a) (tuple21 b (tuple21 b
  c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a a) (tuple21 b (tuple21 b c))))) (sort
  (tuple2 (tuple2 a1 a1) (tuple2 b1 (tuple2 b1 c1))) (t2tb5056 x))))

(declare-fun tb2t5056 (uni) (tuple21 (tuple21 a a) (tuple21 b (tuple21 b
  c))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a a) (tuple21 b (tuple21 b c)))))
  (! (= (tb2t5056 (t2tb5056 i)) i) :pattern ((t2tb5056 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 a1) (tuple2 b1 (tuple2 b1 c1))) j)
     (= (t2tb5056 (tb2t5056 j)) j)) :pattern ((t2tb5056 (tb2t5056 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a b))) (k (set (tuple21 a (tuple21 b c)))) (x a)
  (y a) (z b) (w (tuple21 b c)))
  (= (mem (tuple2 (tuple2 a1 a1) (tuple2 b1 (tuple2 b1 c1)))
  (Tuple2 (tuple2 a1 a1) (tuple2 b1 (tuple2 b1 c1))
  (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y))
  (Tuple2 b1 (tuple2 b1 c1) (t2tb14 z) (t2tb134 w)))
  (parallel_product (tuple2 b1 c1) a1 b1 a1 (t2tb11 h) (t2tb261 k)))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 z))) h) (mem14
  (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 y) (t2tb134 w))) k)))))

(declare-fun t2tb346 ((tuple21 (tuple21 a a) (tuple21 b c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a a) (tuple21 b c)))) (sort
  (tuple2 (tuple2 a1 a1) (tuple2 b1 c1)) (t2tb346 x))))

(declare-fun tb2t346 (uni) (tuple21 (tuple21 a a) (tuple21 b c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a a) (tuple21 b c))))
  (! (= (tb2t346 (t2tb346 i)) i) :pattern ((t2tb346 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 a1) (tuple2 b1 c1)) j)
     (= (t2tb346 (tb2t346 j)) j)) :pattern ((t2tb346 (tb2t346 j))) )))

(declare-fun t2tb347 ((set (tuple21 (tuple21 a a) (tuple21 b c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a a) (tuple21 b c))))) (sort
  (set1 (tuple2 (tuple2 a1 a1) (tuple2 b1 c1))) (t2tb347 x))))

(declare-fun tb2t347 (uni) (set (tuple21 (tuple21 a a) (tuple21 b c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a a) (tuple21 b c)))))
  (! (= (tb2t347 (t2tb347 i)) i) :pattern ((t2tb347 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 a1) (tuple2 b1 c1))) j)
     (= (t2tb347 (tb2t347 j)) j)) :pattern ((t2tb347 (tb2t347 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a b))) (k (set (tuple21 a c))) (x a) (y a) (z b)
  (w c))
  (= (mem (tuple2 (tuple2 a1 a1) (tuple2 b1 c1))
  (Tuple2 (tuple2 a1 a1) (tuple2 b1 c1) (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y))
  (Tuple2 b1 c1 (t2tb14 z) (t2tb135 w)))
  (parallel_product c1 a1 b1 a1 (t2tb11 h) (t2tb129 k)))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 z))) h) (mem10
  (tb2t133 (Tuple2 a1 c1 (t2tb2 y) (t2tb135 w))) k)))))

(declare-fun t2tb61 ((set (tuple21 (tuple21 a a) (tuple21 b b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a a) (tuple21 b b))))) (sort
  (set1 (tuple2 (tuple2 a1 a1) (tuple2 b1 b1))) (t2tb61 x))))

(declare-fun tb2t61 (uni) (set (tuple21 (tuple21 a a) (tuple21 b b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a a) (tuple21 b b)))))
  (! (= (tb2t61 (t2tb61 i)) i) :pattern ((t2tb61 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 a1) (tuple2 b1 b1))) j)
     (= (t2tb61 (tb2t61 j)) j)) :pattern ((t2tb61 (tb2t61 j))) )))

(declare-fun t2tb62 ((tuple21 (tuple21 a a) (tuple21 b b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a a) (tuple21 b b)))) (sort
  (tuple2 (tuple2 a1 a1) (tuple2 b1 b1)) (t2tb62 x))))

(declare-fun tb2t62 (uni) (tuple21 (tuple21 a a) (tuple21 b b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a a) (tuple21 b b))))
  (! (= (tb2t62 (t2tb62 i)) i) :pattern ((t2tb62 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 a1) (tuple2 b1 b1)) j)
     (= (t2tb62 (tb2t62 j)) j)) :pattern ((t2tb62 (tb2t62 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a b))) (k (set (tuple21 a b))) (x a) (y a) (z b)
  (w b))
  (= (mem (tuple2 (tuple2 a1 a1) (tuple2 b1 b1))
  (Tuple2 (tuple2 a1 a1) (tuple2 b1 b1) (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y))
  (Tuple2 b1 b1 (t2tb14 z) (t2tb14 w)))
  (parallel_product b1 a1 b1 a1 (t2tb11 h) (t2tb11 k)))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 z))) h) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 y) (t2tb14 w))) k)))))

;; mem_parallel_product
  (assert
  (forall ((c2 ty) (d2 ty))
  (forall ((h (set (tuple21 a b))) (k uni) (x a) (y uni) (z b) (w uni))
  (= (mem (tuple2 (tuple2 a1 c2) (tuple2 b1 d2))
  (Tuple2 (tuple2 a1 c2) (tuple2 b1 d2) (Tuple2 a1 c2 (t2tb2 x) y)
  (Tuple2 b1 d2 (t2tb14 z) w)) (parallel_product d2 c2 b1 a1 (t2tb11 h) k))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 z))) h) (mem
  (tuple2 c2 d2) (Tuple2 c2 d2 y w) k))))))

;; mem_parallel_product
  (assert
  (forall ((a2 ty) (b2 ty) (c2 ty) (d2 ty))
  (forall ((h uni) (k uni) (x uni) (y uni) (z uni) (w uni))
  (= (mem (tuple2 (tuple2 a2 c2) (tuple2 b2 d2))
  (Tuple2 (tuple2 a2 c2) (tuple2 b2 d2) (Tuple2 a2 c2 x y)
  (Tuple2 b2 d2 z w)) (parallel_product d2 c2 b2 a2 h k))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x z) h) (mem (tuple2 c2 d2)
  (Tuple2 c2 d2 y w) k))))))

(declare-fun infix_plmngt (ty ty uni uni) uni)

;; infix +->_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (set1 (tuple2 a2 b2)))
  (infix_plmngt b2 a2 x x1)))))

;; mem_partial_function_set
  (assert
  (forall ((s (set b)) (t (set c)) (f2 (set (tuple21 b c))))
  (= (mem (set1 (tuple2 b1 c1)) (t2tb131 f2)
  (infix_plmngt c1 b1 (t2tb12 s) (t2tb132 t)))
  (and (mem (set1 (tuple2 b1 c1)) (t2tb131 f2)
  (relation c1 b1 (t2tb12 s) (t2tb132 t)))
  (forall ((x b) (y1 c) (y2 c))
  (=>
  (and (mem8 (tb2t134 (Tuple2 b1 c1 (t2tb14 x) (t2tb135 y1))) f2) (mem8
  (tb2t134 (Tuple2 b1 c1 (t2tb14 x) (t2tb135 y2))) f2)) (= y1 y2)))))))

;; mem_partial_function_set
  (assert
  (forall ((s (set b)) (t (set a)) (f2 (set (tuple21 b a))))
  (= (mem (set1 (tuple2 b1 a1)) (t2tb37 f2)
  (infix_plmngt a1 b1 (t2tb12 s) (t2tb1 t)))
  (and (mem (set1 (tuple2 b1 a1)) (t2tb37 f2)
  (relation a1 b1 (t2tb12 s) (t2tb1 t)))
  (forall ((x b) (y1 a) (y2 a))
  (=>
  (and (mem5 (tb2t38 (Tuple2 b1 a1 (t2tb14 x) (t2tb2 y1))) f2) (mem5
  (tb2t38 (Tuple2 b1 a1 (t2tb14 x) (t2tb2 y2))) f2)) (= y1 y2)))))))

;; mem_partial_function_set
  (assert
  (forall ((s (set a)) (t (set (tuple21 b c))) (f2 (set (tuple21 a (tuple21 b
  c)))))
  (= (mem (set1 (tuple2 a1 (tuple2 b1 c1))) (t2tb261 f2)
  (infix_plmngt (tuple2 b1 c1) a1 (t2tb1 s) (t2tb131 t)))
  (and (mem (set1 (tuple2 a1 (tuple2 b1 c1))) (t2tb261 f2)
  (relation (tuple2 b1 c1) a1 (t2tb1 s) (t2tb131 t)))
  (forall ((x a) (y1 (tuple21 b c)) (y2 (tuple21 b c)))
  (=>
  (and (mem14 (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 y1))) f2)
  (mem14 (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 y2))) f2))
  (= y1 y2)))))))

;; mem_partial_function_set
  (assert
  (forall ((s (set a)) (t (set c)) (f2 (set (tuple21 a c))))
  (= (mem11 f2 (tb2t128 (infix_plmngt c1 a1 (t2tb1 s) (t2tb132 t))))
  (and (mem11 f2 (relation3 s t))
  (forall ((x a) (y1 c) (y2 c))
  (=>
  (and (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y1))) f2) (mem10
  (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y2))) f2)) (= y1 y2)))))))

;; mem_partial_function_set
  (assert
  (forall ((s (set a)) (t (set b)) (f2 (set (tuple21 a b))))
  (= (mem4 f2 (tb2t10 (infix_plmngt b1 a1 (t2tb1 s) (t2tb12 t))))
  (and (mem4 f2 (relation1 s t))
  (forall ((x a) (y1 b) (y2 b))
  (=>
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y1))) f2) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y2))) f2)) (= y1 y2)))))))

;; mem_partial_function_set
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (f2 uni))
  (and
  (=> (mem (set1 (tuple2 a2 b2)) f2 (infix_plmngt b2 a2 s t))
  (and (mem (set1 (tuple2 a2 b2)) f2 (relation b2 a2 s t))
  (forall ((x uni) (y1 uni) (y2 uni))
  (=> (sort b2 y1)
  (=> (sort b2 y2)
  (=>
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y1) f2) (mem (tuple2 a2 b2)
  (Tuple2 a2 b2 x y2) f2)) (= y1 y2)))))))
  (=>
  (and (mem (set1 (tuple2 a2 b2)) f2 (relation b2 a2 s t))
  (forall ((x uni) (y1 uni) (y2 uni))
  (=> (sort a2 x)
  (=> (sort b2 y1)
  (=> (sort b2 y2)
  (=>
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y1) f2) (mem (tuple2 a2 b2)
  (Tuple2 a2 b2 x y2) f2)) (= y1 y2))))))) (mem (set1 (tuple2 a2 b2)) f2
  (infix_plmngt b2 a2 s t)))))))

(declare-fun infix_mnmngt (ty ty uni uni) uni)

;; infix -->_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (set1 (tuple2 a2 b2)))
  (infix_mnmngt b2 a2 x x1)))))

;; mem_total_function_set
  (assert
  (forall ((b2 ty))
  (forall ((s (set (tuple21 a (tuple21 b c)))) (t uni) (x uni))
  (= (mem (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) b2)) x
  (infix_mnmngt b2 (tuple2 a1 (tuple2 b1 c1)) (t2tb261 s) t))
  (and (mem (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) b2)) x
  (infix_plmngt b2 (tuple2 a1 (tuple2 b1 c1)) (t2tb261 s) t)) (infix_eqeq20
  (tb2t261 (dom b2 (tuple2 a1 (tuple2 b1 c1)) x)) s))))))

;; mem_total_function_set
  (assert
  (forall ((b2 ty))
  (forall ((s (set (set (tuple21 a c)))) (t uni) (x uni))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 c1)) b2)) x
  (infix_mnmngt b2 (set1 (tuple2 a1 c1)) (t2tb128 s) t))
  (and (mem (set1 (tuple2 (set1 (tuple2 a1 c1)) b2)) x
  (infix_plmngt b2 (set1 (tuple2 a1 c1)) (t2tb128 s) t)) (infix_eqeq19
  (tb2t128 (dom b2 (set1 (tuple2 a1 c1)) x)) s))))))

;; mem_total_function_set
  (assert
  (forall ((b2 ty))
  (forall ((s (set (tuple21 a c))) (t uni) (x uni))
  (= (mem (set1 (tuple2 (tuple2 a1 c1) b2)) x
  (infix_mnmngt b2 (tuple2 a1 c1) (t2tb129 s) t))
  (and (mem (set1 (tuple2 (tuple2 a1 c1) b2)) x
  (infix_plmngt b2 (tuple2 a1 c1) (t2tb129 s) t)) (infix_eqeq9
  (tb2t129 (dom b2 (tuple2 a1 c1) x)) s))))))

;; mem_total_function_set
  (assert
  (forall ((b2 ty))
  (forall ((s (set (tuple21 b c))) (t uni) (x uni))
  (= (mem (set1 (tuple2 (tuple2 b1 c1) b2)) x
  (infix_mnmngt b2 (tuple2 b1 c1) (t2tb131 s) t))
  (and (mem (set1 (tuple2 (tuple2 b1 c1) b2)) x
  (infix_plmngt b2 (tuple2 b1 c1) (t2tb131 s) t)) (infix_eqeq8
  (tb2t131 (dom b2 (tuple2 b1 c1) x)) s))))))

;; mem_total_function_set
  (assert
  (forall ((b2 ty))
  (forall ((s (set c)) (t uni) (x uni))
  (= (mem (set1 (tuple2 c1 b2)) x (infix_mnmngt b2 c1 (t2tb132 s) t))
  (and (mem (set1 (tuple2 c1 b2)) x (infix_plmngt b2 c1 (t2tb132 s) t))
  (infix_eqeq7 (tb2t132 (dom b2 c1 x)) s))))))

;; mem_total_function_set
  (assert
  (forall ((b2 ty))
  (forall ((s (set (tuple21 b a))) (t uni) (x uni))
  (= (mem (set1 (tuple2 (tuple2 b1 a1) b2)) x
  (infix_mnmngt b2 (tuple2 b1 a1) (t2tb37 s) t))
  (and (mem (set1 (tuple2 (tuple2 b1 a1) b2)) x
  (infix_plmngt b2 (tuple2 b1 a1) (t2tb37 s) t)) (infix_eqeq6
  (tb2t37 (dom b2 (tuple2 b1 a1) x)) s))))))

;; mem_total_function_set
  (assert
  (forall ((b2 ty))
  (forall ((s (set (set (tuple21 a b)))) (t uni) (x uni))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 b1)) b2)) x
  (infix_mnmngt b2 (set1 (tuple2 a1 b1)) (t2tb10 s) t))
  (and (mem (set1 (tuple2 (set1 (tuple2 a1 b1)) b2)) x
  (infix_plmngt b2 (set1 (tuple2 a1 b1)) (t2tb10 s) t)) (infix_eqeq5
  (tb2t10 (dom b2 (set1 (tuple2 a1 b1)) x)) s))))))

;; mem_total_function_set
  (assert
  (forall ((b2 ty))
  (forall ((s (set (tuple21 a b))) (t uni) (x uni))
  (= (mem (set1 (tuple2 (tuple2 a1 b1) b2)) x
  (infix_mnmngt b2 (tuple2 a1 b1) (t2tb11 s) t))
  (and (mem (set1 (tuple2 (tuple2 a1 b1) b2)) x
  (infix_plmngt b2 (tuple2 a1 b1) (t2tb11 s) t)) (infix_eqeq4
  (tb2t11 (dom b2 (tuple2 a1 b1) x)) s))))))

;; mem_total_function_set
  (assert
  (forall ((b2 ty))
  (forall ((s (set b)) (t uni) (x uni))
  (= (mem (set1 (tuple2 b1 b2)) x (infix_mnmngt b2 b1 (t2tb12 s) t))
  (and (mem (set1 (tuple2 b1 b2)) x (infix_plmngt b2 b1 (t2tb12 s) t))
  (infix_eqeq3 (tb2t12 (dom b2 b1 x)) s))))))

;; mem_total_function_set
  (assert
  (forall ((s (set a)) (t (set c)) (x (set (tuple21 a c))))
  (= (mem11 x (tb2t128 (infix_mnmngt c1 a1 (t2tb1 s) (t2tb132 t))))
  (and (mem11 x (tb2t128 (infix_plmngt c1 a1 (t2tb1 s) (t2tb132 t))))
  (infix_eqeq1 (tb2t1 (dom c1 a1 (t2tb129 x))) s)))))

;; mem_total_function_set
  (assert
  (forall ((s (set a)) (t (set b)) (x (set (tuple21 a b))))
  (= (mem4 x (tb2t10 (infix_mnmngt b1 a1 (t2tb1 s) (t2tb12 t))))
  (and (mem4 x (tb2t10 (infix_plmngt b1 a1 (t2tb1 s) (t2tb12 t))))
  (infix_eqeq1 (tb2t1 (dom b1 a1 (t2tb11 x))) s)))))

;; mem_total_function_set
  (assert
  (forall ((b2 ty))
  (forall ((s (set a)) (t uni) (x uni))
  (= (mem (set1 (tuple2 a1 b2)) x (infix_mnmngt b2 a1 (t2tb1 s) t))
  (and (mem (set1 (tuple2 a1 b2)) x (infix_plmngt b2 a1 (t2tb1 s) t))
  (infix_eqeq1 (tb2t1 (dom b2 a1 x)) s))))))

;; mem_total_function_set
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (x uni))
  (= (mem (set1 (tuple2 a2 b2)) x (infix_mnmngt b2 a2 s t))
  (and (mem (set1 (tuple2 a2 b2)) x (infix_plmngt b2 a2 s t)) (infix_eqeq a2
  (dom b2 a2 x) s))))))

(declare-fun infix_gtplgt (ty ty uni uni) uni)

;; infix >+>_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (set1 (tuple2 a2 b2)))
  (infix_gtplgt b2 a2 x x1)))))

;; mem_partial_injection_set
  (assert
  (forall ((s (set c)) (t (set a)) (x (set (tuple21 c a))))
  (= (mem (set1 (tuple2 c1 a1)) (t2tb224 x)
  (infix_gtplgt a1 c1 (t2tb132 s) (t2tb1 t)))
  (and (mem (set1 (tuple2 c1 a1)) (t2tb224 x)
  (infix_plmngt a1 c1 (t2tb132 s) (t2tb1 t))) (mem11
  (tb2t129 (inverse a1 c1 (t2tb224 x)))
  (tb2t128 (infix_plmngt c1 a1 (t2tb1 t) (t2tb132 s))))))))

;; mem_partial_injection_set
  (assert
  (forall ((s (set b)) (t (set a)) (x (set (tuple21 b a))))
  (= (mem (set1 (tuple2 b1 a1)) (t2tb37 x)
  (infix_gtplgt a1 b1 (t2tb12 s) (t2tb1 t)))
  (and (mem (set1 (tuple2 b1 a1)) (t2tb37 x)
  (infix_plmngt a1 b1 (t2tb12 s) (t2tb1 t))) (mem4 (inverse1 x)
  (tb2t10 (infix_plmngt b1 a1 (t2tb1 t) (t2tb12 s))))))))

;; mem_partial_injection_set
  (assert
  (forall ((s (set a)) (t (set c)) (x (set (tuple21 a c))))
  (= (mem11 x (tb2t128 (infix_gtplgt c1 a1 (t2tb1 s) (t2tb132 t))))
  (and (mem11 x (tb2t128 (infix_plmngt c1 a1 (t2tb1 s) (t2tb132 t)))) (mem
  (set1 (tuple2 c1 a1)) (inverse c1 a1 (t2tb129 x))
  (infix_plmngt a1 c1 (t2tb132 t) (t2tb1 s)))))))

;; mem_partial_injection_set
  (assert
  (forall ((s (set a)) (t (set b)) (x (set (tuple21 a b))))
  (= (mem4 x (tb2t10 (infix_gtplgt b1 a1 (t2tb1 s) (t2tb12 t))))
  (and (mem4 x (tb2t10 (infix_plmngt b1 a1 (t2tb1 s) (t2tb12 t)))) (mem
  (set1 (tuple2 b1 a1)) (t2tb37 (inverse2 x))
  (infix_plmngt a1 b1 (t2tb12 t) (t2tb1 s)))))))

;; mem_partial_injection_set
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (x uni))
  (= (mem (set1 (tuple2 a2 b2)) x (infix_gtplgt b2 a2 s t))
  (and (mem (set1 (tuple2 a2 b2)) x (infix_plmngt b2 a2 s t)) (mem
  (set1 (tuple2 b2 a2)) (inverse b2 a2 x) (infix_plmngt a2 b2 t s)))))))

(declare-fun infix_gtmngt (ty ty uni uni) uni)

;; infix >->_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (set1 (tuple2 a2 b2)))
  (infix_gtmngt b2 a2 x x1)))))

;; mem_total_injection_set
  (assert
  (forall ((s (set a)) (t (set c)) (x (set (tuple21 a c))))
  (= (mem11 x (tb2t128 (infix_gtmngt c1 a1 (t2tb1 s) (t2tb132 t))))
  (and (mem11 x (tb2t128 (infix_gtplgt c1 a1 (t2tb1 s) (t2tb132 t)))) (mem11
  x (tb2t128 (infix_mnmngt c1 a1 (t2tb1 s) (t2tb132 t))))))))

;; mem_total_injection_set
  (assert
  (forall ((s (set a)) (t (set b)) (x (set (tuple21 a b))))
  (= (mem4 x (tb2t10 (infix_gtmngt b1 a1 (t2tb1 s) (t2tb12 t))))
  (and (mem4 x (tb2t10 (infix_gtplgt b1 a1 (t2tb1 s) (t2tb12 t)))) (mem4 x
  (tb2t10 (infix_mnmngt b1 a1 (t2tb1 s) (t2tb12 t))))))))

;; mem_total_injection_set
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (x uni))
  (= (mem (set1 (tuple2 a2 b2)) x (infix_gtmngt b2 a2 s t))
  (and (mem (set1 (tuple2 a2 b2)) x (infix_gtplgt b2 a2 s t)) (mem
  (set1 (tuple2 a2 b2)) x (infix_mnmngt b2 a2 s t)))))))

(declare-fun infix_plmngtgt (ty ty uni uni) uni)

;; infix +->>_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (set1 (tuple2 a2 b2)))
  (infix_plmngtgt b2 a2 x x1)))))

;; mem_partial_surjection_set
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set (tuple21 a (tuple21 b c)))) (x uni))
  (= (mem (set1 (tuple2 a2 (tuple2 a1 (tuple2 b1 c1)))) x
  (infix_plmngtgt (tuple2 a1 (tuple2 b1 c1)) a2 s (t2tb261 t)))
  (and (mem (set1 (tuple2 a2 (tuple2 a1 (tuple2 b1 c1)))) x
  (infix_plmngt (tuple2 a1 (tuple2 b1 c1)) a2 s (t2tb261 t))) (infix_eqeq20
  (tb2t261 (ran (tuple2 a1 (tuple2 b1 c1)) a2 x)) t))))))

;; mem_partial_surjection_set
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set (set (tuple21 a c)))) (x uni))
  (= (mem (set1 (tuple2 a2 (set1 (tuple2 a1 c1)))) x
  (infix_plmngtgt (set1 (tuple2 a1 c1)) a2 s (t2tb128 t)))
  (and (mem (set1 (tuple2 a2 (set1 (tuple2 a1 c1)))) x
  (infix_plmngt (set1 (tuple2 a1 c1)) a2 s (t2tb128 t))) (infix_eqeq19
  (tb2t128 (ran (set1 (tuple2 a1 c1)) a2 x)) t))))))

;; mem_partial_surjection_set
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set (tuple21 a c))) (x uni))
  (= (mem (set1 (tuple2 a2 (tuple2 a1 c1))) x
  (infix_plmngtgt (tuple2 a1 c1) a2 s (t2tb129 t)))
  (and (mem (set1 (tuple2 a2 (tuple2 a1 c1))) x
  (infix_plmngt (tuple2 a1 c1) a2 s (t2tb129 t))) (infix_eqeq9
  (tb2t129 (ran (tuple2 a1 c1) a2 x)) t))))))

;; mem_partial_surjection_set
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set (tuple21 b c))) (x uni))
  (= (mem (set1 (tuple2 a2 (tuple2 b1 c1))) x
  (infix_plmngtgt (tuple2 b1 c1) a2 s (t2tb131 t)))
  (and (mem (set1 (tuple2 a2 (tuple2 b1 c1))) x
  (infix_plmngt (tuple2 b1 c1) a2 s (t2tb131 t))) (infix_eqeq8
  (tb2t131 (ran (tuple2 b1 c1) a2 x)) t))))))

;; mem_partial_surjection_set
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set c)) (x uni))
  (= (mem (set1 (tuple2 a2 c1)) x (infix_plmngtgt c1 a2 s (t2tb132 t)))
  (and (mem (set1 (tuple2 a2 c1)) x (infix_plmngt c1 a2 s (t2tb132 t)))
  (infix_eqeq7 (tb2t132 (ran c1 a2 x)) t))))))

;; mem_partial_surjection_set
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set (tuple21 b a))) (x uni))
  (= (mem (set1 (tuple2 a2 (tuple2 b1 a1))) x
  (infix_plmngtgt (tuple2 b1 a1) a2 s (t2tb37 t)))
  (and (mem (set1 (tuple2 a2 (tuple2 b1 a1))) x
  (infix_plmngt (tuple2 b1 a1) a2 s (t2tb37 t))) (infix_eqeq6
  (tb2t37 (ran (tuple2 b1 a1) a2 x)) t))))))

;; mem_partial_surjection_set
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set (set (tuple21 a b)))) (x uni))
  (= (mem (set1 (tuple2 a2 (set1 (tuple2 a1 b1)))) x
  (infix_plmngtgt (set1 (tuple2 a1 b1)) a2 s (t2tb10 t)))
  (and (mem (set1 (tuple2 a2 (set1 (tuple2 a1 b1)))) x
  (infix_plmngt (set1 (tuple2 a1 b1)) a2 s (t2tb10 t))) (infix_eqeq5
  (tb2t10 (ran (set1 (tuple2 a1 b1)) a2 x)) t))))))

;; mem_partial_surjection_set
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set (tuple21 a b))) (x uni))
  (= (mem (set1 (tuple2 a2 (tuple2 a1 b1))) x
  (infix_plmngtgt (tuple2 a1 b1) a2 s (t2tb11 t)))
  (and (mem (set1 (tuple2 a2 (tuple2 a1 b1))) x
  (infix_plmngt (tuple2 a1 b1) a2 s (t2tb11 t))) (infix_eqeq4
  (tb2t11 (ran (tuple2 a1 b1) a2 x)) t))))))

;; mem_partial_surjection_set
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set b)) (x uni))
  (= (mem (set1 (tuple2 a2 b1)) x (infix_plmngtgt b1 a2 s (t2tb12 t)))
  (and (mem (set1 (tuple2 a2 b1)) x (infix_plmngt b1 a2 s (t2tb12 t)))
  (infix_eqeq3 (tb2t12 (ran b1 a2 x)) t))))))

;; mem_partial_surjection_set
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set a)) (x uni))
  (= (mem (set1 (tuple2 a2 a1)) x (infix_plmngtgt a1 a2 s (t2tb1 t)))
  (and (mem (set1 (tuple2 a2 a1)) x (infix_plmngt a1 a2 s (t2tb1 t)))
  (infix_eqeq1 (tb2t1 (ran a1 a2 x)) t))))))

;; mem_partial_surjection_set
  (assert
  (forall ((s (set a)) (t (set c)) (x (set (tuple21 a c))))
  (= (mem11 x (tb2t128 (infix_plmngtgt c1 a1 (t2tb1 s) (t2tb132 t))))
  (and (mem11 x (tb2t128 (infix_plmngt c1 a1 (t2tb1 s) (t2tb132 t))))
  (infix_eqeq7 (tb2t132 (ran c1 a1 (t2tb129 x))) t)))))

;; mem_partial_surjection_set
  (assert
  (forall ((s (set a)) (t (set b)) (x (set (tuple21 a b))))
  (= (mem4 x (tb2t10 (infix_plmngtgt b1 a1 (t2tb1 s) (t2tb12 t))))
  (and (mem4 x (tb2t10 (infix_plmngt b1 a1 (t2tb1 s) (t2tb12 t))))
  (infix_eqeq3 (tb2t12 (ran b1 a1 (t2tb11 x))) t)))))

;; mem_partial_surjection_set
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (x uni))
  (= (mem (set1 (tuple2 a2 b2)) x (infix_plmngtgt b2 a2 s t))
  (and (mem (set1 (tuple2 a2 b2)) x (infix_plmngt b2 a2 s t)) (infix_eqeq b2
  (ran b2 a2 x) t))))))

(declare-fun infix_mnmngtgt (ty ty uni uni) uni)

;; infix -->>_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (set1 (tuple2 a2 b2)))
  (infix_mnmngtgt b2 a2 x x1)))))

;; mem_total_surjection_set
  (assert
  (forall ((s (set a)) (t (set c)) (x (set (tuple21 a c))))
  (= (mem11 x (tb2t128 (infix_mnmngtgt c1 a1 (t2tb1 s) (t2tb132 t))))
  (and (mem11 x (tb2t128 (infix_plmngtgt c1 a1 (t2tb1 s) (t2tb132 t))))
  (mem11 x (tb2t128 (infix_mnmngt c1 a1 (t2tb1 s) (t2tb132 t))))))))

;; mem_total_surjection_set
  (assert
  (forall ((s (set a)) (t (set b)) (x (set (tuple21 a b))))
  (= (mem4 x (tb2t10 (infix_mnmngtgt b1 a1 (t2tb1 s) (t2tb12 t))))
  (and (mem4 x (tb2t10 (infix_plmngtgt b1 a1 (t2tb1 s) (t2tb12 t)))) (mem4 x
  (tb2t10 (infix_mnmngt b1 a1 (t2tb1 s) (t2tb12 t))))))))

;; mem_total_surjection_set
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (x uni))
  (= (mem (set1 (tuple2 a2 b2)) x (infix_mnmngtgt b2 a2 s t))
  (and (mem (set1 (tuple2 a2 b2)) x (infix_plmngtgt b2 a2 s t)) (mem
  (set1 (tuple2 a2 b2)) x (infix_mnmngt b2 a2 s t)))))))

(declare-fun infix_gtplgtgt (ty ty uni uni) uni)

;; infix >+>>_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (set1 (tuple2 a2 b2)))
  (infix_gtplgtgt b2 a2 x x1)))))

;; mem_partial_bijection_set
  (assert
  (forall ((s (set a)) (t (set c)) (x (set (tuple21 a c))))
  (= (mem11 x (tb2t128 (infix_gtplgtgt c1 a1 (t2tb1 s) (t2tb132 t))))
  (and (mem11 x (tb2t128 (infix_gtplgt c1 a1 (t2tb1 s) (t2tb132 t)))) (mem11
  x (tb2t128 (infix_plmngtgt c1 a1 (t2tb1 s) (t2tb132 t))))))))

;; mem_partial_bijection_set
  (assert
  (forall ((s (set a)) (t (set b)) (x (set (tuple21 a b))))
  (= (mem4 x (tb2t10 (infix_gtplgtgt b1 a1 (t2tb1 s) (t2tb12 t))))
  (and (mem4 x (tb2t10 (infix_gtplgt b1 a1 (t2tb1 s) (t2tb12 t)))) (mem4 x
  (tb2t10 (infix_plmngtgt b1 a1 (t2tb1 s) (t2tb12 t))))))))

;; mem_partial_bijection_set
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (x uni))
  (= (mem (set1 (tuple2 a2 b2)) x (infix_gtplgtgt b2 a2 s t))
  (and (mem (set1 (tuple2 a2 b2)) x (infix_gtplgt b2 a2 s t)) (mem
  (set1 (tuple2 a2 b2)) x (infix_plmngtgt b2 a2 s t)))))))

(declare-fun infix_gtmngtgt (ty ty uni uni) uni)

;; infix >->>_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (set1 (tuple2 a2 b2)))
  (infix_gtmngtgt b2 a2 x x1)))))

;; mem_total_bijection_set
  (assert
  (forall ((s (set a)) (t (set c)) (x (set (tuple21 a c))))
  (= (mem11 x (tb2t128 (infix_gtmngtgt c1 a1 (t2tb1 s) (t2tb132 t))))
  (and (mem11 x (tb2t128 (infix_gtmngt c1 a1 (t2tb1 s) (t2tb132 t)))) (mem11
  x (tb2t128 (infix_mnmngtgt c1 a1 (t2tb1 s) (t2tb132 t))))))))

;; mem_total_bijection_set
  (assert
  (forall ((s (set a)) (t (set b)) (x (set (tuple21 a b))))
  (= (mem4 x (tb2t10 (infix_gtmngtgt b1 a1 (t2tb1 s) (t2tb12 t))))
  (and (mem4 x (tb2t10 (infix_gtmngt b1 a1 (t2tb1 s) (t2tb12 t)))) (mem4 x
  (tb2t10 (infix_mnmngtgt b1 a1 (t2tb1 s) (t2tb12 t))))))))

;; mem_total_bijection_set
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (x uni))
  (= (mem (set1 (tuple2 a2 b2)) x (infix_gtmngtgt b2 a2 s t))
  (and (mem (set1 (tuple2 a2 b2)) x (infix_gtmngt b2 a2 s t)) (mem
  (set1 (tuple2 a2 b2)) x (infix_mnmngtgt b2 a2 s t)))))))

(declare-fun apply (ty ty uni uni) uni)

;; apply_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort b2 (apply b2 a2 x x1)))))

;; apply_def0
  (assert
  (forall ((b2 ty))
  (forall ((f2 uni) (s (set (tuple21 a (tuple21 b c)))) (t uni)
  (a2 (tuple21 a (tuple21 b c))))
  (=>
  (and (mem (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) b2)) f2
  (infix_plmngt b2 (tuple2 a1 (tuple2 b1 c1)) (t2tb261 s) t)) (mem14 a2
  (tb2t261 (dom b2 (tuple2 a1 (tuple2 b1 c1)) f2)))) (mem
  (tuple2 (tuple2 a1 (tuple2 b1 c1)) b2)
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) b2 (t2tb260 a2)
  (apply b2 (tuple2 a1 (tuple2 b1 c1)) f2 (t2tb260 a2))) f2)))))

;; apply_def0
  (assert
  (forall ((b2 ty))
  (forall ((f2 uni) (s (set (set (tuple21 a c)))) (t uni) (a2 (set (tuple21 a
  c))))
  (=>
  (and (mem (set1 (tuple2 (set1 (tuple2 a1 c1)) b2)) f2
  (infix_plmngt b2 (set1 (tuple2 a1 c1)) (t2tb128 s) t)) (mem11 a2
  (tb2t128 (dom b2 (set1 (tuple2 a1 c1)) f2)))) (mem
  (tuple2 (set1 (tuple2 a1 c1)) b2)
  (Tuple2 (set1 (tuple2 a1 c1)) b2 (t2tb129 a2)
  (apply b2 (set1 (tuple2 a1 c1)) f2 (t2tb129 a2))) f2)))))

;; apply_def0
  (assert
  (forall ((b2 ty))
  (forall ((f2 uni) (s (set (tuple21 a c))) (t uni) (a2 (tuple21 a c)))
  (=>
  (and (mem (set1 (tuple2 (tuple2 a1 c1) b2)) f2
  (infix_plmngt b2 (tuple2 a1 c1) (t2tb129 s) t)) (mem10 a2
  (tb2t129 (dom b2 (tuple2 a1 c1) f2)))) (mem (tuple2 (tuple2 a1 c1) b2)
  (Tuple2 (tuple2 a1 c1) b2 (t2tb133 a2)
  (apply b2 (tuple2 a1 c1) f2 (t2tb133 a2))) f2)))))

;; apply_def0
  (assert
  (forall ((b2 ty))
  (forall ((f2 uni) (s (set (tuple21 b c))) (t uni) (a2 (tuple21 b c)))
  (=>
  (and (mem (set1 (tuple2 (tuple2 b1 c1) b2)) f2
  (infix_plmngt b2 (tuple2 b1 c1) (t2tb131 s) t)) (mem8 a2
  (tb2t131 (dom b2 (tuple2 b1 c1) f2)))) (mem (tuple2 (tuple2 b1 c1) b2)
  (Tuple2 (tuple2 b1 c1) b2 (t2tb134 a2)
  (apply b2 (tuple2 b1 c1) f2 (t2tb134 a2))) f2)))))

;; apply_def0
  (assert
  (forall ((b2 ty))
  (forall ((f2 uni) (s (set c)) (t uni) (a2 c))
  (=>
  (and (mem (set1 (tuple2 c1 b2)) f2 (infix_plmngt b2 c1 (t2tb132 s) t))
  (mem7 a2 (tb2t132 (dom b2 c1 f2)))) (mem (tuple2 c1 b2)
  (Tuple2 c1 b2 (t2tb135 a2) (apply b2 c1 f2 (t2tb135 a2))) f2)))))

;; apply_def0
  (assert
  (forall ((b2 ty))
  (forall ((f2 uni) (s (set (tuple21 b a))) (t uni) (a2 (tuple21 b a)))
  (=>
  (and (mem (set1 (tuple2 (tuple2 b1 a1) b2)) f2
  (infix_plmngt b2 (tuple2 b1 a1) (t2tb37 s) t)) (mem5 a2
  (tb2t37 (dom b2 (tuple2 b1 a1) f2)))) (mem (tuple2 (tuple2 b1 a1) b2)
  (Tuple2 (tuple2 b1 a1) b2 (t2tb38 a2)
  (apply b2 (tuple2 b1 a1) f2 (t2tb38 a2))) f2)))))

;; apply_def0
  (assert
  (forall ((b2 ty))
  (forall ((f2 uni) (s (set (set (tuple21 a b)))) (t uni) (a2 (set (tuple21 a
  b))))
  (=>
  (and (mem (set1 (tuple2 (set1 (tuple2 a1 b1)) b2)) f2
  (infix_plmngt b2 (set1 (tuple2 a1 b1)) (t2tb10 s) t)) (mem4 a2
  (tb2t10 (dom b2 (set1 (tuple2 a1 b1)) f2)))) (mem
  (tuple2 (set1 (tuple2 a1 b1)) b2)
  (Tuple2 (set1 (tuple2 a1 b1)) b2 (t2tb11 a2)
  (apply b2 (set1 (tuple2 a1 b1)) f2 (t2tb11 a2))) f2)))))

;; apply_def0
  (assert
  (forall ((b2 ty))
  (forall ((f2 uni) (s (set (tuple21 a b))) (t uni) (a2 (tuple21 a b)))
  (=>
  (and (mem (set1 (tuple2 (tuple2 a1 b1) b2)) f2
  (infix_plmngt b2 (tuple2 a1 b1) (t2tb11 s) t)) (mem3 a2
  (tb2t11 (dom b2 (tuple2 a1 b1) f2)))) (mem (tuple2 (tuple2 a1 b1) b2)
  (Tuple2 (tuple2 a1 b1) b2 (t2tb13 a2)
  (apply b2 (tuple2 a1 b1) f2 (t2tb13 a2))) f2)))))

;; apply_def0
  (assert
  (forall ((f2 (set (tuple21 b c))) (s (set b)) (t (set c)) (a2 b))
  (=>
  (and (mem (set1 (tuple2 b1 c1)) (t2tb131 f2)
  (infix_plmngt c1 b1 (t2tb12 s) (t2tb132 t))) (mem2 a2
  (tb2t12 (dom c1 b1 (t2tb131 f2))))) (mem8
  (tb2t134 (Tuple2 b1 c1 (t2tb14 a2) (apply c1 b1 (t2tb131 f2) (t2tb14 a2))))
  f2))))

;; apply_def0
  (assert
  (forall ((f2 (set (tuple21 b a))) (s (set b)) (t (set a)) (a2 b))
  (=>
  (and (mem (set1 (tuple2 b1 a1)) (t2tb37 f2)
  (infix_plmngt a1 b1 (t2tb12 s) (t2tb1 t))) (mem2 a2
  (tb2t12 (dom a1 b1 (t2tb37 f2))))) (mem5
  (tb2t38 (Tuple2 b1 a1 (t2tb14 a2) (apply a1 b1 (t2tb37 f2) (t2tb14 a2))))
  f2))))

;; apply_def0
  (assert
  (forall ((b2 ty))
  (forall ((f2 uni) (s (set b)) (t uni) (a2 b))
  (=>
  (and (mem (set1 (tuple2 b1 b2)) f2 (infix_plmngt b2 b1 (t2tb12 s) t)) (mem2
  a2 (tb2t12 (dom b2 b1 f2)))) (mem (tuple2 b1 b2)
  (Tuple2 b1 b2 (t2tb14 a2) (apply b2 b1 f2 (t2tb14 a2))) f2)))))

;; apply_def0
  (assert
  (forall ((f2 (set (tuple21 a (tuple21 b c)))) (s (set a))
  (t (set (tuple21 b c))) (a2 a))
  (=>
  (and (mem (set1 (tuple2 a1 (tuple2 b1 c1))) (t2tb261 f2)
  (infix_plmngt (tuple2 b1 c1) a1 (t2tb1 s) (t2tb131 t))) (mem1 a2
  (tb2t1 (dom (tuple2 b1 c1) a1 (t2tb261 f2))))) (mem14
  (tb2t260
  (Tuple2 a1 (tuple2 b1 c1) (t2tb2 a2)
  (apply (tuple2 b1 c1) a1 (t2tb261 f2) (t2tb2 a2)))) f2))))

;; apply_def0
  (assert
  (forall ((f2 (set (tuple21 a c))) (s (set a)) (t (set c)) (a2 a))
  (=>
  (and (mem11 f2 (tb2t128 (infix_plmngt c1 a1 (t2tb1 s) (t2tb132 t)))) (mem1
  a2 (tb2t1 (dom c1 a1 (t2tb129 f2))))) (mem10
  (tb2t133 (Tuple2 a1 c1 (t2tb2 a2) (apply c1 a1 (t2tb129 f2) (t2tb2 a2))))
  f2))))

;; apply_def0
  (assert
  (forall ((f2 (set (tuple21 a b))) (s (set a)) (t (set b)) (a2 a))
  (=>
  (and (mem4 f2 (tb2t10 (infix_plmngt b1 a1 (t2tb1 s) (t2tb12 t)))) (mem1 a2
  (tb2t1 (dom b1 a1 (t2tb11 f2))))) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 a2) (apply b1 a1 (t2tb11 f2) (t2tb2 a2))))
  f2))))

;; apply_def0
  (assert
  (forall ((b2 ty))
  (forall ((f2 uni) (s (set a)) (t uni) (a2 a))
  (=>
  (and (mem (set1 (tuple2 a1 b2)) f2 (infix_plmngt b2 a1 (t2tb1 s) t)) (mem1
  a2 (tb2t1 (dom b2 a1 f2)))) (mem (tuple2 a1 b2)
  (Tuple2 a1 b2 (t2tb2 a2) (apply b2 a1 f2 (t2tb2 a2))) f2)))))

;; apply_def0
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((f2 uni) (s uni) (t uni) (a3 uni))
  (=>
  (and (mem (set1 (tuple2 a2 b2)) f2 (infix_plmngt b2 a2 s t)) (mem a2 a3
  (dom b2 a2 f2))) (mem (tuple2 a2 b2) (Tuple2 a2 b2 a3 (apply b2 a2 f2 a3))
  f2)))))

(assert
;; equal_image_9
 ;; File "lemmes_bbook.why", line 2350, characters 7-20
  (not
  (forall ((s (set a)) (u (set a)) (t (set b)) (v (set c)) (p (set (tuple21 a
  b))) (q (set (tuple21 a c))))
  (=>
  (and (mem4 p (relation1 s t))
  (and (mem11 q (relation3 s v)) (subset2 u s))) (infix_eqeq8
  (image8 (direct_product1 p q) u)
  (semicolon12 (inverse2 p) (domain_restriction4 u q)))))))
(check-sat)
