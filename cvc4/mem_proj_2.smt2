(set-logic AUFBVDTLIRA)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
(declare-sort uni 0)

(declare-sort ty 0)

(declare-fun sort (ty uni) Bool)

(declare-fun witness (ty) uni)

;; witness_sort
  (assert (forall ((a2 ty)) (sort a2 (witness a2))))

(declare-fun int () ty)

(declare-fun real () ty)

(declare-sort set 1)

(declare-fun set1 (ty) ty)

(declare-sort b 0)

(declare-fun b1 () ty)

(declare-sort a 0)

(declare-fun a1 () ty)

(declare-sort tuple21 2)

(declare-fun tuple2 (ty ty) ty)

(declare-fun mem (ty uni uni) Bool)

(declare-fun mem1 (a (set a)) Bool)

(declare-fun mem2 (b (set b)) Bool)

(declare-fun mem3 ((tuple21 a b) (set (tuple21 a b))) Bool)

(declare-fun mem18 ((tuple21 (tuple21 a b) b) (set (tuple21 (tuple21 a b)
  b))) Bool)

(declare-fun mem19 ((set (tuple21 (tuple21 a b) b))
  (set (set (tuple21 (tuple21 a b) b)))) Bool)

(declare-fun infix_eqeq (ty uni uni) Bool)

(declare-fun t2tb51 ((set (set (tuple21 (tuple21 a b) b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a b) b))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 b1) b1))) (t2tb51 x))))

(declare-fun tb2t51 (uni) (set (set (tuple21 (tuple21 a b) b))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a b) b)))))
  (! (= (tb2t51 (t2tb51 i)) i) :pattern ((t2tb51 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 b1) b1))) j)
     (= (t2tb51 (tb2t51 j)) j)) :pattern ((t2tb51 (tb2t51 j))) )))

;; infix ==_def
  (assert
  (forall ((s (set (set (tuple21 (tuple21 a b) b))))
  (t (set (set (tuple21 (tuple21 a b) b)))))
  (= (infix_eqeq (set1 (tuple2 (tuple2 a1 b1) b1)) (t2tb51 s) (t2tb51 t))
  (forall ((x (set (tuple21 (tuple21 a b) b)))) (= (mem19 x s) (mem19 x t))))))

(declare-fun t2tb27 ((set (tuple21 (tuple21 a b) b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) b)))) (sort
  (set1 (tuple2 (tuple2 a1 b1) b1)) (t2tb27 x))))

(declare-fun tb2t27 (uni) (set (tuple21 (tuple21 a b) b)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a b) b))))
  (! (= (tb2t27 (t2tb27 i)) i) :pattern ((t2tb27 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 b1) b1)) j)
     (= (t2tb27 (tb2t27 j)) j)) :pattern ((t2tb27 (tb2t27 j))) )))

;; infix ==_def
  (assert
  (forall ((s (set (tuple21 (tuple21 a b) b))) (t (set (tuple21 (tuple21 a b)
  b))))
  (= (infix_eqeq (tuple2 (tuple2 a1 b1) b1) (t2tb27 s) (t2tb27 t))
  (forall ((x (tuple21 (tuple21 a b) b))) (= (mem18 x s) (mem18 x t))))))

(declare-fun t2tb11 ((set (tuple21 a b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a b)))) (sort (set1 (tuple2 a1 b1)) (t2tb11 x))))

(declare-fun tb2t11 (uni) (set (tuple21 a b)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a b))))
  (! (= (tb2t11 (t2tb11 i)) i) :pattern ((t2tb11 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 b1)) j) (= (t2tb11 (tb2t11 j)) j)) :pattern (
  (t2tb11 (tb2t11 j))) )))

;; infix ==_def
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (tuple21 a b))))
  (= (infix_eqeq (tuple2 a1 b1) (t2tb11 s) (t2tb11 t))
  (forall ((x (tuple21 a b))) (= (mem3 x s) (mem3 x t))))))

(declare-fun t2tb12 ((set b)) uni)

;; t2tb_sort
  (assert (forall ((x (set b))) (sort (set1 b1) (t2tb12 x))))

(declare-fun tb2t12 (uni) (set b))

;; BridgeL
  (assert
  (forall ((i (set b))) (! (= (tb2t12 (t2tb12 i)) i) :pattern ((t2tb12 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 b1) j) (= (t2tb12 (tb2t12 j)) j)) :pattern ((t2tb12
                                                                 (tb2t12 j))) )))

;; infix ==_def
  (assert
  (forall ((s (set b)) (t (set b)))
  (= (infix_eqeq b1 (t2tb12 s) (t2tb12 t))
  (forall ((x b)) (= (mem2 x s) (mem2 x t))))))

(declare-fun t2tb1 ((set a)) uni)

;; t2tb_sort
  (assert (forall ((x (set a))) (sort (set1 a1) (t2tb1 x))))

(declare-fun tb2t1 (uni) (set a))

;; BridgeL
  (assert
  (forall ((i (set a))) (! (= (tb2t1 (t2tb1 i)) i) :pattern ((t2tb1 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 a1) j) (= (t2tb1 (tb2t1 j)) j)) :pattern ((t2tb1
                                                               (tb2t1 j))) )))

;; infix ==_def
  (assert
  (forall ((s (set a)) (t (set a)))
  (= (infix_eqeq a1 (t2tb1 s) (t2tb1 t))
  (forall ((x a)) (= (mem1 x s) (mem1 x t))))))

;; infix ==_def
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t uni))
  (and
  (=> (infix_eqeq a2 s t) (forall ((x uni)) (= (mem a2 x s) (mem a2 x t))))
  (=> (forall ((x uni)) (=> (sort a2 x) (= (mem a2 x s) (mem a2 x t))))
  (infix_eqeq a2 s t))))))

(declare-fun power (ty uni) uni)

;; power_sort
  (assert
  (forall ((a2 ty)) (forall ((x uni)) (sort (set1 (set1 a2)) (power a2 x)))))

(declare-fun non_empty_power (ty uni) uni)

;; non_empty_power_sort
  (assert
  (forall ((a2 ty))
  (forall ((x uni)) (sort (set1 (set1 a2)) (non_empty_power a2 x)))))

(declare-fun subset1 (ty uni uni) Bool)

;; subset_def
  (assert
  (forall ((s (set (tuple21 (tuple21 a b) b))) (t (set (tuple21 (tuple21 a b)
  b))))
  (= (subset1 (tuple2 (tuple2 a1 b1) b1) (t2tb27 s) (t2tb27 t)) (mem19 s
  (tb2t51 (power (tuple2 (tuple2 a1 b1) b1) (t2tb27 t)))))))

;; subset_def
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t uni))
  (= (subset1 a2 s t) (mem (set1 a2) s (power a2 t))))))

(declare-fun subsetnoteq (ty uni uni) Bool)

;; subsetnoteq_def
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t uni))
  (= (subsetnoteq a2 s t) (and (subset1 a2 s t) (not (infix_eqeq a2 s t)))))))

(declare-fun empty (ty) uni)

;; empty_sort
  (assert (forall ((a2 ty)) (sort (set1 a2) (empty a2))))

(declare-fun is_empty (ty uni) Bool)

;; is_empty_def
  (assert
  (forall ((s (set (set (tuple21 (tuple21 a b) b)))))
  (= (is_empty (set1 (tuple2 (tuple2 a1 b1) b1)) (t2tb51 s))
  (forall ((x (set (tuple21 (tuple21 a b) b)))) (not (mem19 x s))))))

;; is_empty_def
  (assert
  (forall ((s (set (tuple21 (tuple21 a b) b))))
  (= (is_empty (tuple2 (tuple2 a1 b1) b1) (t2tb27 s))
  (forall ((x (tuple21 (tuple21 a b) b))) (not (mem18 x s))))))

;; is_empty_def
  (assert
  (forall ((s (set (tuple21 a b))))
  (= (is_empty (tuple2 a1 b1) (t2tb11 s))
  (forall ((x (tuple21 a b))) (not (mem3 x s))))))

;; is_empty_def
  (assert
  (forall ((s (set b)))
  (= (is_empty b1 (t2tb12 s)) (forall ((x b)) (not (mem2 x s))))))

;; is_empty_def
  (assert
  (forall ((s (set a)))
  (= (is_empty a1 (t2tb1 s)) (forall ((x a)) (not (mem1 x s))))))

;; is_empty_def
  (assert
  (forall ((a2 ty))
  (forall ((s uni))
  (and (=> (is_empty a2 s) (forall ((x uni)) (not (mem a2 x s))))
  (=> (forall ((x uni)) (=> (sort a2 x) (not (mem a2 x s)))) (is_empty a2 s))))))

;; empty_def1
  (assert (forall ((a2 ty)) (is_empty a2 (empty a2))))

;; empty
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) b))))
  (not (mem19 x (tb2t51 (empty (set1 (tuple2 (tuple2 a1 b1) b1))))))))

;; empty
  (assert
  (forall ((x (tuple21 (tuple21 a b) b)))
  (not (mem18 x (tb2t27 (empty (tuple2 (tuple2 a1 b1) b1)))))))

;; empty
  (assert
  (forall ((x (tuple21 a b))) (not (mem3 x (tb2t11 (empty (tuple2 a1 b1)))))))

;; empty
  (assert (forall ((x b)) (not (mem2 x (tb2t12 (empty b1))))))

;; empty
  (assert (forall ((x a)) (not (mem1 x (tb2t1 (empty a1))))))

;; empty
  (assert (forall ((a2 ty)) (forall ((x uni)) (not (mem a2 x (empty a2))))))

(declare-fun add (ty uni uni) uni)

;; add_sort
  (assert
  (forall ((a2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 a2) (add a2 x x1)))))

;; add_def1
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) b))) (y (set (tuple21 (tuple21 a b)
  b))))
  (forall ((s (set (set (tuple21 (tuple21 a b) b)))))
  (= (mem19 x
  (tb2t51 (add (set1 (tuple2 (tuple2 a1 b1) b1)) (t2tb27 y) (t2tb51 s))))
  (or (= x y) (mem19 x s))))))

(declare-fun t2tb28 ((tuple21 (tuple21 a b) b)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a b) b))) (sort (tuple2 (tuple2 a1 b1) b1)
  (t2tb28 x))))

(declare-fun tb2t28 (uni) (tuple21 (tuple21 a b) b))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a b) b)))
  (! (= (tb2t28 (t2tb28 i)) i) :pattern ((t2tb28 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 b1) b1) j) (= (t2tb28 (tb2t28 j)) j)) :pattern (
  (t2tb28 (tb2t28 j))) )))

;; add_def1
  (assert
  (forall ((x (tuple21 (tuple21 a b) b)) (y (tuple21 (tuple21 a b) b)))
  (forall ((s (set (tuple21 (tuple21 a b) b))))
  (= (mem18 x
  (tb2t27 (add (tuple2 (tuple2 a1 b1) b1) (t2tb28 y) (t2tb27 s))))
  (or (= x y) (mem18 x s))))))

(declare-fun t2tb13 ((tuple21 a b)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 a b))) (sort (tuple2 a1 b1) (t2tb13 x))))

(declare-fun tb2t13 (uni) (tuple21 a b))

;; BridgeL
  (assert
  (forall ((i (tuple21 a b)))
  (! (= (tb2t13 (t2tb13 i)) i) :pattern ((t2tb13 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 b1) j) (= (t2tb13 (tb2t13 j)) j)) :pattern (
  (t2tb13 (tb2t13 j))) )))

;; add_def1
  (assert
  (forall ((x (tuple21 a b)) (y (tuple21 a b)))
  (forall ((s (set (tuple21 a b))))
  (= (mem3 x (tb2t11 (add (tuple2 a1 b1) (t2tb13 y) (t2tb11 s))))
  (or (= x y) (mem3 x s))))))

(declare-fun t2tb14 (b) uni)

;; t2tb_sort
  (assert (forall ((x b)) (sort b1 (t2tb14 x))))

(declare-fun tb2t14 (uni) b)

;; BridgeL
  (assert
  (forall ((i b)) (! (= (tb2t14 (t2tb14 i)) i) :pattern ((t2tb14 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort b1 j) (= (t2tb14 (tb2t14 j)) j)) :pattern ((t2tb14 (tb2t14 j))) )))

;; add_def1
  (assert
  (forall ((x b) (y b))
  (forall ((s (set b)))
  (= (mem2 x (tb2t12 (add b1 (t2tb14 y) (t2tb12 s))))
  (or (= x y) (mem2 x s))))))

(declare-fun t2tb2 (a) uni)

;; t2tb_sort
  (assert (forall ((x a)) (sort a1 (t2tb2 x))))

(declare-fun tb2t2 (uni) a)

;; BridgeL
  (assert (forall ((i a)) (! (= (tb2t2 (t2tb2 i)) i) :pattern ((t2tb2 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort a1 j) (= (t2tb2 (tb2t2 j)) j)) :pattern ((t2tb2 (tb2t2 j))) )))

;; add_def1
  (assert
  (forall ((x a) (y a))
  (forall ((s (set a)))
  (= (mem1 x (tb2t1 (add a1 (t2tb2 y) (t2tb1 s)))) (or (= x y) (mem1 x s))))))

;; add_def1
  (assert
  (forall ((a2 ty))
  (forall ((x uni) (y uni))
  (=> (sort a2 x)
  (=> (sort a2 y)
  (forall ((s uni)) (= (mem a2 x (add a2 y s)) (or (= x y) (mem a2 x s)))))))))

(declare-fun singleton (ty uni) uni)

;; singleton_sort
  (assert
  (forall ((a2 ty)) (forall ((x uni)) (sort (set1 a2) (singleton a2 x)))))

;; mem_singleton
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) b))) (y (set (tuple21 (tuple21 a b)
  b))))
  (= (mem19 x
  (tb2t51 (singleton (set1 (tuple2 (tuple2 a1 b1) b1)) (t2tb27 y)))) (= x y))))

;; mem_singleton
  (assert
  (forall ((x (tuple21 (tuple21 a b) b)) (y (tuple21 (tuple21 a b) b)))
  (= (mem18 x (tb2t27 (singleton (tuple2 (tuple2 a1 b1) b1) (t2tb28 y))))
  (= x y))))

;; mem_singleton
  (assert
  (forall ((x (tuple21 a b)) (y (tuple21 a b)))
  (= (mem3 x (tb2t11 (singleton (tuple2 a1 b1) (t2tb13 y)))) (= x y))))

;; mem_singleton
  (assert
  (forall ((x b) (y b))
  (= (mem2 x (tb2t12 (singleton b1 (t2tb14 y)))) (= x y))))

;; mem_singleton
  (assert
  (forall ((x a) (y a))
  (= (mem1 x (tb2t1 (singleton a1 (t2tb2 y)))) (= x y))))

;; mem_singleton
  (assert
  (forall ((a2 ty))
  (forall ((x uni) (y uni))
  (=> (sort a2 x) (=> (sort a2 y) (= (mem a2 x (singleton a2 y)) (= x y)))))))

(declare-fun remove (ty uni uni) uni)

;; remove_sort
  (assert
  (forall ((a2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 a2) (remove a2 x x1)))))

;; remove_def1
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) b))) (y (set (tuple21 (tuple21 a b)
  b))) (s (set (set (tuple21 (tuple21 a b) b)))))
  (= (mem19 x
  (tb2t51 (remove (set1 (tuple2 (tuple2 a1 b1) b1)) (t2tb27 y) (t2tb51 s))))
  (and (not (= x y)) (mem19 x s)))))

;; remove_def1
  (assert
  (forall ((x (tuple21 (tuple21 a b) b)) (y (tuple21 (tuple21 a b) b))
  (s (set (tuple21 (tuple21 a b) b))))
  (= (mem18 x
  (tb2t27 (remove (tuple2 (tuple2 a1 b1) b1) (t2tb28 y) (t2tb27 s))))
  (and (not (= x y)) (mem18 x s)))))

;; remove_def1
  (assert
  (forall ((x (tuple21 a b)) (y (tuple21 a b)) (s (set (tuple21 a b))))
  (= (mem3 x (tb2t11 (remove (tuple2 a1 b1) (t2tb13 y) (t2tb11 s))))
  (and (not (= x y)) (mem3 x s)))))

;; remove_def1
  (assert
  (forall ((x b) (y b) (s (set b)))
  (= (mem2 x (tb2t12 (remove b1 (t2tb14 y) (t2tb12 s))))
  (and (not (= x y)) (mem2 x s)))))

;; remove_def1
  (assert
  (forall ((x a) (y a) (s (set a)))
  (= (mem1 x (tb2t1 (remove a1 (t2tb2 y) (t2tb1 s))))
  (and (not (= x y)) (mem1 x s)))))

;; remove_def1
  (assert
  (forall ((a2 ty))
  (forall ((x uni) (y uni) (s uni))
  (=> (sort a2 x)
  (=> (sort a2 y)
  (= (mem a2 x (remove a2 y s)) (and (not (= x y)) (mem a2 x s))))))))

(declare-fun all (ty) uni)

;; all_sort
  (assert (forall ((a2 ty)) (sort (set1 a2) (all a2))))

;; all_def
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) b)))) (mem19 x
  (tb2t51 (all (set1 (tuple2 (tuple2 a1 b1) b1)))))))

;; all_def
  (assert
  (forall ((x (tuple21 (tuple21 a b) b))) (mem18 x
  (tb2t27 (all (tuple2 (tuple2 a1 b1) b1))))))

;; all_def
  (assert
  (forall ((x (tuple21 a b))) (mem3 x (tb2t11 (all (tuple2 a1 b1))))))

;; all_def
  (assert (forall ((x b)) (mem2 x (tb2t12 (all b1)))))

;; all_def
  (assert (forall ((x a)) (mem1 x (tb2t1 (all a1)))))

;; all_def
  (assert (forall ((a2 ty)) (forall ((x uni)) (mem a2 x (all a2)))))

(declare-fun union1 (ty uni uni) uni)

;; union_sort
  (assert
  (forall ((a2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 a2) (union1 a2 x x1)))))

;; mem_union
  (assert
  (forall ((s (set (set (tuple21 (tuple21 a b) b))))
  (t (set (set (tuple21 (tuple21 a b) b)))) (x (set (tuple21 (tuple21 a b)
  b))))
  (= (mem19 x
  (tb2t51 (union1 (set1 (tuple2 (tuple2 a1 b1) b1)) (t2tb51 s) (t2tb51 t))))
  (or (mem19 x s) (mem19 x t)))))

;; mem_union
  (assert
  (forall ((s (set (tuple21 (tuple21 a b) b))) (t (set (tuple21 (tuple21 a b)
  b))) (x (tuple21 (tuple21 a b) b)))
  (= (mem18 x
  (tb2t27 (union1 (tuple2 (tuple2 a1 b1) b1) (t2tb27 s) (t2tb27 t))))
  (or (mem18 x s) (mem18 x t)))))

;; mem_union
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (tuple21 a b))) (x (tuple21 a b)))
  (= (mem3 x (tb2t11 (union1 (tuple2 a1 b1) (t2tb11 s) (t2tb11 t))))
  (or (mem3 x s) (mem3 x t)))))

;; mem_union
  (assert
  (forall ((s (set b)) (t (set b)) (x b))
  (= (mem2 x (tb2t12 (union1 b1 (t2tb12 s) (t2tb12 t))))
  (or (mem2 x s) (mem2 x t)))))

;; mem_union
  (assert
  (forall ((s (set a)) (t (set a)) (x a))
  (= (mem1 x (tb2t1 (union1 a1 (t2tb1 s) (t2tb1 t))))
  (or (mem1 x s) (mem1 x t)))))

;; mem_union
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t uni) (x uni))
  (= (mem a2 x (union1 a2 s t)) (or (mem a2 x s) (mem a2 x t))))))

(declare-fun inter (ty uni uni) uni)

;; inter_sort
  (assert
  (forall ((a2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 a2) (inter a2 x x1)))))

;; mem_inter
  (assert
  (forall ((s (set (set (tuple21 (tuple21 a b) b))))
  (t (set (set (tuple21 (tuple21 a b) b)))) (x (set (tuple21 (tuple21 a b)
  b))))
  (= (mem19 x
  (tb2t51 (inter (set1 (tuple2 (tuple2 a1 b1) b1)) (t2tb51 s) (t2tb51 t))))
  (and (mem19 x s) (mem19 x t)))))

;; mem_inter
  (assert
  (forall ((s (set (tuple21 (tuple21 a b) b))) (t (set (tuple21 (tuple21 a b)
  b))) (x (tuple21 (tuple21 a b) b)))
  (= (mem18 x
  (tb2t27 (inter (tuple2 (tuple2 a1 b1) b1) (t2tb27 s) (t2tb27 t))))
  (and (mem18 x s) (mem18 x t)))))

;; mem_inter
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (tuple21 a b))) (x (tuple21 a b)))
  (= (mem3 x (tb2t11 (inter (tuple2 a1 b1) (t2tb11 s) (t2tb11 t))))
  (and (mem3 x s) (mem3 x t)))))

;; mem_inter
  (assert
  (forall ((s (set b)) (t (set b)) (x b))
  (= (mem2 x (tb2t12 (inter b1 (t2tb12 s) (t2tb12 t))))
  (and (mem2 x s) (mem2 x t)))))

;; mem_inter
  (assert
  (forall ((s (set a)) (t (set a)) (x a))
  (= (mem1 x (tb2t1 (inter a1 (t2tb1 s) (t2tb1 t))))
  (and (mem1 x s) (mem1 x t)))))

;; mem_inter
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t uni) (x uni))
  (= (mem a2 x (inter a2 s t)) (and (mem a2 x s) (mem a2 x t))))))

(declare-fun diff (ty uni uni) uni)

;; diff_sort
  (assert
  (forall ((a2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 a2) (diff a2 x x1)))))

;; mem_diff
  (assert
  (forall ((s (set (set (tuple21 (tuple21 a b) b))))
  (t (set (set (tuple21 (tuple21 a b) b)))) (x (set (tuple21 (tuple21 a b)
  b))))
  (= (mem19 x
  (tb2t51 (diff (set1 (tuple2 (tuple2 a1 b1) b1)) (t2tb51 s) (t2tb51 t))))
  (and (mem19 x s) (not (mem19 x t))))))

;; mem_diff
  (assert
  (forall ((s (set (tuple21 (tuple21 a b) b))) (t (set (tuple21 (tuple21 a b)
  b))) (x (tuple21 (tuple21 a b) b)))
  (= (mem18 x
  (tb2t27 (diff (tuple2 (tuple2 a1 b1) b1) (t2tb27 s) (t2tb27 t))))
  (and (mem18 x s) (not (mem18 x t))))))

;; mem_diff
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (tuple21 a b))) (x (tuple21 a b)))
  (= (mem3 x (tb2t11 (diff (tuple2 a1 b1) (t2tb11 s) (t2tb11 t))))
  (and (mem3 x s) (not (mem3 x t))))))

;; mem_diff
  (assert
  (forall ((s (set b)) (t (set b)) (x b))
  (= (mem2 x (tb2t12 (diff b1 (t2tb12 s) (t2tb12 t))))
  (and (mem2 x s) (not (mem2 x t))))))

;; mem_diff
  (assert
  (forall ((s (set a)) (t (set a)) (x a))
  (= (mem1 x (tb2t1 (diff a1 (t2tb1 s) (t2tb1 t))))
  (and (mem1 x s) (not (mem1 x t))))))

;; mem_diff
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t uni) (x uni))
  (= (mem a2 x (diff a2 s t)) (and (mem a2 x s) (not (mem a2 x t)))))))

(declare-fun Tuple2 (ty ty uni uni) uni)

;; Tuple2_sort
  (assert
  (forall ((a2 ty) (a3 ty))
  (forall ((x uni) (x1 uni)) (sort (tuple2 a3 a2) (Tuple2 a3 a2 x x1)))))

(declare-fun Tuple21 (a b) (tuple21 a b))

(declare-fun Tuple24 ((tuple21 a b) b) (tuple21 (tuple21 a b) b))

(declare-fun Tuple23 ((set a) (set b)) (tuple21 (set a) (set b)))

(declare-fun Tuple2_proj_1 (ty ty uni) uni)

;; Tuple2_proj_1_sort
  (assert
  (forall ((a2 ty) (a3 ty))
  (forall ((x uni)) (sort a3 (Tuple2_proj_1 a3 a2 x)))))

(declare-fun t2tb495 ((tuple21 (set a) (set b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set a) (set b)))) (sort (tuple2 (set1 a1) (set1 b1))
  (t2tb495 x))))

(declare-fun tb2t495 (uni) (tuple21 (set a) (set b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set a) (set b))))
  (! (= (tb2t495 (t2tb495 i)) i) :pattern ((t2tb495 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 a1) (set1 b1)) j) (= (t2tb495 (tb2t495 j)) j)) :pattern (
  (t2tb495 (tb2t495 j))) )))

;; Tuple2_proj_1_def
  (assert
  (forall ((u (set a)) (u1 (set b)))
  (= (tb2t1 (Tuple2_proj_1 (set1 a1) (set1 b1) (t2tb495 (Tuple23 u u1)))) u)))

;; Tuple2_proj_1_def
  (assert
  (forall ((u (tuple21 a b)) (u1 b))
  (= (tb2t13 (Tuple2_proj_1 (tuple2 a1 b1) b1 (t2tb28 (Tuple24 u u1)))) u)))

;; Tuple2_proj_1_def
  (assert
  (forall ((u a) (u1 b))
  (= (tb2t2 (Tuple2_proj_1 a1 b1 (t2tb13 (Tuple21 u u1)))) u)))

;; Tuple2_proj_1_def
  (assert
  (forall ((a2 ty) (a3 ty))
  (forall ((u uni) (u1 uni))
  (=> (sort a3 u) (= (Tuple2_proj_1 a3 a2 (Tuple2 a3 a2 u u1)) u)))))

(declare-fun Tuple2_proj_2 (ty ty uni) uni)

;; Tuple2_proj_2_sort
  (assert
  (forall ((a2 ty) (a3 ty))
  (forall ((x uni)) (sort a2 (Tuple2_proj_2 a3 a2 x)))))

;; Tuple2_proj_2_def
  (assert
  (forall ((u (set a)) (u1 (set b)))
  (= (tb2t12 (Tuple2_proj_2 (set1 a1) (set1 b1) (t2tb495 (Tuple23 u u1)))) u1)))

;; Tuple2_proj_2_def
  (assert
  (forall ((u (tuple21 a b)) (u1 b))
  (= (tb2t14 (Tuple2_proj_2 (tuple2 a1 b1) b1 (t2tb28 (Tuple24 u u1)))) u1)))

;; Tuple2_proj_2_def
  (assert
  (forall ((u a) (u1 b))
  (= (tb2t14 (Tuple2_proj_2 a1 b1 (t2tb13 (Tuple21 u u1)))) u1)))

;; Tuple2_proj_2_def
  (assert
  (forall ((a2 ty) (a3 ty))
  (forall ((u uni) (u1 uni))
  (=> (sort a2 u1) (= (Tuple2_proj_2 a3 a2 (Tuple2 a3 a2 u u1)) u1)))))

;; tuple2_inversion
  (assert
  (forall ((u (tuple21 (set a) (set b))))
  (= u (Tuple23 (tb2t1 (Tuple2_proj_1 (set1 a1) (set1 b1) (t2tb495 u)))
       (tb2t12 (Tuple2_proj_2 (set1 a1) (set1 b1) (t2tb495 u)))))))

;; tuple2_inversion
  (assert
  (forall ((u (tuple21 (tuple21 a b) b)))
  (= u (Tuple24 (tb2t13 (Tuple2_proj_1 (tuple2 a1 b1) b1 (t2tb28 u)))
       (tb2t14 (Tuple2_proj_2 (tuple2 a1 b1) b1 (t2tb28 u)))))))

;; tuple2_inversion
  (assert
  (forall ((u (tuple21 a b)))
  (= u (Tuple21 (tb2t2 (Tuple2_proj_1 a1 b1 (t2tb13 u)))
       (tb2t14 (Tuple2_proj_2 a1 b1 (t2tb13 u)))))))

;; tuple2_inversion
  (assert
  (forall ((a2 ty) (a3 ty))
  (forall ((u uni))
  (=> (sort (tuple2 a3 a2) u)
  (= u (Tuple2 a3 a2 (Tuple2_proj_1 a3 a2 u) (Tuple2_proj_2 a3 a2 u)))))))

(declare-fun times (ty ty uni uni) uni)

;; times_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (tuple2 a2 b2)) (times b2 a2 x x1)))))

(declare-fun times2 ((set a) (set b)) (set (tuple21 a b)))

(declare-fun times7 ((set (tuple21 a b)) (set b)) (set (tuple21 (tuple21 a b)
  b)))

;; mem_times
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set (set (tuple21 (tuple21 a b) b)))) (x uni)
  (y (set (tuple21 (tuple21 a b) b))))
  (= (mem (tuple2 a2 (set1 (tuple2 (tuple2 a1 b1) b1)))
  (Tuple2 a2 (set1 (tuple2 (tuple2 a1 b1) b1)) x (t2tb27 y))
  (times (set1 (tuple2 (tuple2 a1 b1) b1)) a2 s (t2tb51 t)))
  (and (mem a2 x s) (mem19 y t))))))

;; mem_times
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set (tuple21 (tuple21 a b) b))) (x uni)
  (y (tuple21 (tuple21 a b) b)))
  (= (mem (tuple2 a2 (tuple2 (tuple2 a1 b1) b1))
  (Tuple2 a2 (tuple2 (tuple2 a1 b1) b1) x (t2tb28 y))
  (times (tuple2 (tuple2 a1 b1) b1) a2 s (t2tb27 t)))
  (and (mem a2 x s) (mem18 y t))))))

;; mem_times
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set (tuple21 a b))) (x uni) (y (tuple21 a b)))
  (= (mem (tuple2 a2 (tuple2 a1 b1)) (Tuple2 a2 (tuple2 a1 b1) x (t2tb13 y))
  (times (tuple2 a1 b1) a2 s (t2tb11 t))) (and (mem a2 x s) (mem3 y t))))))

;; mem_times
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set b)) (x uni) (y b))
  (= (mem (tuple2 a2 b1) (Tuple2 a2 b1 x (t2tb14 y))
  (times b1 a2 s (t2tb12 t))) (and (mem a2 x s) (mem2 y t))))))

;; mem_times
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set a)) (x uni) (y a))
  (= (mem (tuple2 a2 a1) (Tuple2 a2 a1 x (t2tb2 y))
  (times a1 a2 s (t2tb1 t))) (and (mem a2 x s) (mem1 y t))))))

(declare-fun t2tb619 ((set (tuple21 (set (tuple21 (tuple21 a b) b))
  (set (tuple21 (tuple21 a b) b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 (tuple21 a b) b))
  (set (tuple21 (tuple21 a b) b)))))) (sort
  (set1
  (tuple2 (set1 (tuple2 (tuple2 a1 b1) b1))
  (set1 (tuple2 (tuple2 a1 b1) b1)))) (t2tb619 x))))

(declare-fun tb2t619 (uni) (set (tuple21 (set (tuple21 (tuple21 a b) b))
  (set (tuple21 (tuple21 a b) b)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 (tuple21 a b) b))
  (set (tuple21 (tuple21 a b) b))))))
  (! (= (tb2t619 (t2tb619 i)) i) :pattern ((t2tb619 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (tuple2 (set1 (tuple2 (tuple2 a1 b1) b1))
     (set1 (tuple2 (tuple2 a1 b1) b1)))) j) (= (t2tb619 (tb2t619 j)) j)) :pattern (
  (t2tb619 (tb2t619 j))) )))

(declare-fun t2tb620 ((tuple21 (set (tuple21 (tuple21 a b) b))
  (set (tuple21 (tuple21 a b) b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 (tuple21 a b) b))
  (set (tuple21 (tuple21 a b) b))))) (sort
  (tuple2 (set1 (tuple2 (tuple2 a1 b1) b1))
  (set1 (tuple2 (tuple2 a1 b1) b1))) (t2tb620 x))))

(declare-fun tb2t620 (uni) (tuple21 (set (tuple21 (tuple21 a b) b))
  (set (tuple21 (tuple21 a b) b))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 (tuple21 a b) b))
  (set (tuple21 (tuple21 a b) b)))))
  (! (= (tb2t620 (t2tb620 i)) i) :pattern ((t2tb620 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (tuple2 (set1 (tuple2 (tuple2 a1 b1) b1))
     (set1 (tuple2 (tuple2 a1 b1) b1))) j) (= (t2tb620 (tb2t620 j)) j)) :pattern (
  (t2tb620 (tb2t620 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 (tuple21 a b) b))))
  (t (set (set (tuple21 (tuple21 a b) b)))) (x (set (tuple21 (tuple21 a b)
  b))) (y (set (tuple21 (tuple21 a b) b))))
  (= (mem
  (tuple2 (set1 (tuple2 (tuple2 a1 b1) b1))
  (set1 (tuple2 (tuple2 a1 b1) b1)))
  (Tuple2 (set1 (tuple2 (tuple2 a1 b1) b1)) (set1 (tuple2 (tuple2 a1 b1) b1))
  (t2tb27 x) (t2tb27 y))
  (times (set1 (tuple2 (tuple2 a1 b1) b1)) (set1 (tuple2 (tuple2 a1 b1) b1))
  (t2tb51 s) (t2tb51 t))) (and (mem19 x s) (mem19 y t)))))

(declare-fun t2tb621 ((set (tuple21 (set (tuple21 (tuple21 a b) b))
  (tuple21 (tuple21 a b) b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 (tuple21 a b) b))
  (tuple21 (tuple21 a b) b))))) (sort
  (set1
  (tuple2 (set1 (tuple2 (tuple2 a1 b1) b1)) (tuple2 (tuple2 a1 b1) b1)))
  (t2tb621 x))))

(declare-fun tb2t621 (uni) (set (tuple21 (set (tuple21 (tuple21 a b) b))
  (tuple21 (tuple21 a b) b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 (tuple21 a b) b))
  (tuple21 (tuple21 a b) b)))))
  (! (= (tb2t621 (t2tb621 i)) i) :pattern ((t2tb621 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (tuple2 (set1 (tuple2 (tuple2 a1 b1) b1)) (tuple2 (tuple2 a1 b1) b1)))
     j) (= (t2tb621 (tb2t621 j)) j)) :pattern ((t2tb621 (tb2t621 j))) )))

(declare-fun t2tb622 ((tuple21 (set (tuple21 (tuple21 a b) b))
  (tuple21 (tuple21 a b) b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 (tuple21 a b) b)) (tuple21 (tuple21 a b)
  b)))) (sort
  (tuple2 (set1 (tuple2 (tuple2 a1 b1) b1)) (tuple2 (tuple2 a1 b1) b1))
  (t2tb622 x))))

(declare-fun tb2t622 (uni) (tuple21 (set (tuple21 (tuple21 a b) b))
  (tuple21 (tuple21 a b) b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 (tuple21 a b) b)) (tuple21 (tuple21 a b)
  b)))) (! (= (tb2t622 (t2tb622 i)) i) :pattern ((t2tb622 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (tuple2 (set1 (tuple2 (tuple2 a1 b1) b1)) (tuple2 (tuple2 a1 b1) b1)) j)
     (= (t2tb622 (tb2t622 j)) j)) :pattern ((t2tb622 (tb2t622 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 (tuple21 a b) b))))
  (t (set (tuple21 (tuple21 a b) b))) (x (set (tuple21 (tuple21 a b) b)))
  (y (tuple21 (tuple21 a b) b)))
  (= (mem
  (tuple2 (set1 (tuple2 (tuple2 a1 b1) b1)) (tuple2 (tuple2 a1 b1) b1))
  (Tuple2 (set1 (tuple2 (tuple2 a1 b1) b1)) (tuple2 (tuple2 a1 b1) b1)
  (t2tb27 x) (t2tb28 y))
  (times (tuple2 (tuple2 a1 b1) b1) (set1 (tuple2 (tuple2 a1 b1) b1))
  (t2tb51 s) (t2tb27 t))) (and (mem19 x s) (mem18 y t)))))

(declare-fun t2tb623 ((set (tuple21 (set (tuple21 (tuple21 a b) b))
  (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 (tuple21 a b) b)) (tuple21 a b)))))
  (sort (set1 (tuple2 (set1 (tuple2 (tuple2 a1 b1) b1)) (tuple2 a1 b1)))
  (t2tb623 x))))

(declare-fun tb2t623 (uni) (set (tuple21 (set (tuple21 (tuple21 a b) b))
  (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 (tuple21 a b) b)) (tuple21 a b)))))
  (! (= (tb2t623 (t2tb623 i)) i) :pattern ((t2tb623 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (set1 (tuple2 (tuple2 a1 b1) b1)) (tuple2 a1 b1))) j)
     (= (t2tb623 (tb2t623 j)) j)) :pattern ((t2tb623 (tb2t623 j))) )))

(declare-fun t2tb624 ((tuple21 (set (tuple21 (tuple21 a b) b)) (tuple21 a
  b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 (tuple21 a b) b)) (tuple21 a b)))) (sort
  (tuple2 (set1 (tuple2 (tuple2 a1 b1) b1)) (tuple2 a1 b1)) (t2tb624 x))))

(declare-fun tb2t624 (uni) (tuple21 (set (tuple21 (tuple21 a b) b))
  (tuple21 a b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 (tuple21 a b) b)) (tuple21 a b))))
  (! (= (tb2t624 (t2tb624 i)) i) :pattern ((t2tb624 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 (tuple2 a1 b1) b1)) (tuple2 a1 b1)) j)
     (= (t2tb624 (tb2t624 j)) j)) :pattern ((t2tb624 (tb2t624 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 (tuple21 a b) b)))) (t (set (tuple21 a b)))
  (x (set (tuple21 (tuple21 a b) b))) (y (tuple21 a b)))
  (= (mem (tuple2 (set1 (tuple2 (tuple2 a1 b1) b1)) (tuple2 a1 b1))
  (Tuple2 (set1 (tuple2 (tuple2 a1 b1) b1)) (tuple2 a1 b1) (t2tb27 x)
  (t2tb13 y))
  (times (tuple2 a1 b1) (set1 (tuple2 (tuple2 a1 b1) b1)) (t2tb51 s)
  (t2tb11 t))) (and (mem19 x s) (mem3 y t)))))

(declare-fun t2tb625 ((set (tuple21 (set (tuple21 (tuple21 a b) b)) b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 (tuple21 a b) b)) b)))) (sort
  (set1 (tuple2 (set1 (tuple2 (tuple2 a1 b1) b1)) b1)) (t2tb625 x))))

(declare-fun tb2t625 (uni) (set (tuple21 (set (tuple21 (tuple21 a b) b)) b)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 (tuple21 a b) b)) b))))
  (! (= (tb2t625 (t2tb625 i)) i) :pattern ((t2tb625 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 (tuple2 a1 b1) b1)) b1)) j)
     (= (t2tb625 (tb2t625 j)) j)) :pattern ((t2tb625 (tb2t625 j))) )))

(declare-fun t2tb626 ((tuple21 (set (tuple21 (tuple21 a b) b)) b)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 (tuple21 a b) b)) b))) (sort
  (tuple2 (set1 (tuple2 (tuple2 a1 b1) b1)) b1) (t2tb626 x))))

(declare-fun tb2t626 (uni) (tuple21 (set (tuple21 (tuple21 a b) b)) b))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 (tuple21 a b) b)) b)))
  (! (= (tb2t626 (t2tb626 i)) i) :pattern ((t2tb626 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 (tuple2 a1 b1) b1)) b1) j)
     (= (t2tb626 (tb2t626 j)) j)) :pattern ((t2tb626 (tb2t626 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 (tuple21 a b) b)))) (t (set b))
  (x (set (tuple21 (tuple21 a b) b))) (y b))
  (= (mem (tuple2 (set1 (tuple2 (tuple2 a1 b1) b1)) b1)
  (Tuple2 (set1 (tuple2 (tuple2 a1 b1) b1)) b1 (t2tb27 x) (t2tb14 y))
  (times b1 (set1 (tuple2 (tuple2 a1 b1) b1)) (t2tb51 s) (t2tb12 t)))
  (and (mem19 x s) (mem2 y t)))))

(declare-fun t2tb627 ((set (tuple21 (set (tuple21 (tuple21 a b) b)) a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 (tuple21 a b) b)) a)))) (sort
  (set1 (tuple2 (set1 (tuple2 (tuple2 a1 b1) b1)) a1)) (t2tb627 x))))

(declare-fun tb2t627 (uni) (set (tuple21 (set (tuple21 (tuple21 a b) b)) a)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 (tuple21 a b) b)) a))))
  (! (= (tb2t627 (t2tb627 i)) i) :pattern ((t2tb627 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 (tuple2 a1 b1) b1)) a1)) j)
     (= (t2tb627 (tb2t627 j)) j)) :pattern ((t2tb627 (tb2t627 j))) )))

(declare-fun t2tb628 ((tuple21 (set (tuple21 (tuple21 a b) b)) a)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 (tuple21 a b) b)) a))) (sort
  (tuple2 (set1 (tuple2 (tuple2 a1 b1) b1)) a1) (t2tb628 x))))

(declare-fun tb2t628 (uni) (tuple21 (set (tuple21 (tuple21 a b) b)) a))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 (tuple21 a b) b)) a)))
  (! (= (tb2t628 (t2tb628 i)) i) :pattern ((t2tb628 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 (tuple2 a1 b1) b1)) a1) j)
     (= (t2tb628 (tb2t628 j)) j)) :pattern ((t2tb628 (tb2t628 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 (tuple21 a b) b)))) (t (set a))
  (x (set (tuple21 (tuple21 a b) b))) (y a))
  (= (mem (tuple2 (set1 (tuple2 (tuple2 a1 b1) b1)) a1)
  (Tuple2 (set1 (tuple2 (tuple2 a1 b1) b1)) a1 (t2tb27 x) (t2tb2 y))
  (times a1 (set1 (tuple2 (tuple2 a1 b1) b1)) (t2tb51 s) (t2tb1 t)))
  (and (mem19 x s) (mem1 y t)))))

;; mem_times
  (assert
  (forall ((b2 ty))
  (forall ((s (set (set (tuple21 (tuple21 a b) b)))) (t uni)
  (x (set (tuple21 (tuple21 a b) b))) (y uni))
  (= (mem (tuple2 (set1 (tuple2 (tuple2 a1 b1) b1)) b2)
  (Tuple2 (set1 (tuple2 (tuple2 a1 b1) b1)) b2 (t2tb27 x) y)
  (times b2 (set1 (tuple2 (tuple2 a1 b1) b1)) (t2tb51 s) t))
  (and (mem19 x s) (mem b2 y t))))))

(declare-fun t2tb629 ((set (tuple21 (tuple21 (tuple21 a b) b)
  (set (tuple21 (tuple21 a b) b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 a b) b)
  (set (tuple21 (tuple21 a b) b)))))) (sort
  (set1
  (tuple2 (tuple2 (tuple2 a1 b1) b1) (set1 (tuple2 (tuple2 a1 b1) b1))))
  (t2tb629 x))))

(declare-fun tb2t629 (uni) (set (tuple21 (tuple21 (tuple21 a b) b)
  (set (tuple21 (tuple21 a b) b)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 a b) b)
  (set (tuple21 (tuple21 a b) b))))))
  (! (= (tb2t629 (t2tb629 i)) i) :pattern ((t2tb629 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (tuple2 (tuple2 (tuple2 a1 b1) b1) (set1 (tuple2 (tuple2 a1 b1) b1))))
     j) (= (t2tb629 (tb2t629 j)) j)) :pattern ((t2tb629 (tb2t629 j))) )))

(declare-fun t2tb630 ((tuple21 (tuple21 (tuple21 a b) b)
  (set (tuple21 (tuple21 a b) b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 a b) b) (set (tuple21 (tuple21 a b)
  b))))) (sort
  (tuple2 (tuple2 (tuple2 a1 b1) b1) (set1 (tuple2 (tuple2 a1 b1) b1)))
  (t2tb630 x))))

(declare-fun tb2t630 (uni) (tuple21 (tuple21 (tuple21 a b) b)
  (set (tuple21 (tuple21 a b) b))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 a b) b) (set (tuple21 (tuple21 a b)
  b))))) (! (= (tb2t630 (t2tb630 i)) i) :pattern ((t2tb630 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (tuple2 (tuple2 (tuple2 a1 b1) b1) (set1 (tuple2 (tuple2 a1 b1) b1))) j)
     (= (t2tb630 (tb2t630 j)) j)) :pattern ((t2tb630 (tb2t630 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 (tuple21 a b) b)))
  (t (set (set (tuple21 (tuple21 a b) b)))) (x (tuple21 (tuple21 a b) b))
  (y (set (tuple21 (tuple21 a b) b))))
  (= (mem
  (tuple2 (tuple2 (tuple2 a1 b1) b1) (set1 (tuple2 (tuple2 a1 b1) b1)))
  (Tuple2 (tuple2 (tuple2 a1 b1) b1) (set1 (tuple2 (tuple2 a1 b1) b1))
  (t2tb28 x) (t2tb27 y))
  (times (set1 (tuple2 (tuple2 a1 b1) b1)) (tuple2 (tuple2 a1 b1) b1)
  (t2tb27 s) (t2tb51 t))) (and (mem18 x s) (mem19 y t)))))

(declare-fun t2tb631 ((set (tuple21 (tuple21 (tuple21 a b) b)
  (tuple21 (tuple21 a b) b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 a b) b) (tuple21 (tuple21 a b)
  b))))) (sort
  (set1 (tuple2 (tuple2 (tuple2 a1 b1) b1) (tuple2 (tuple2 a1 b1) b1)))
  (t2tb631 x))))

(declare-fun tb2t631 (uni) (set (tuple21 (tuple21 (tuple21 a b) b)
  (tuple21 (tuple21 a b) b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 a b) b) (tuple21 (tuple21 a b)
  b))))) (! (= (tb2t631 (t2tb631 i)) i) :pattern ((t2tb631 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 (tuple2 a1 b1) b1) (tuple2 (tuple2 a1 b1) b1))) j)
     (= (t2tb631 (tb2t631 j)) j)) :pattern ((t2tb631 (tb2t631 j))) )))

(declare-fun t2tb632 ((tuple21 (tuple21 (tuple21 a b) b) (tuple21 (tuple21 a
  b) b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 a b) b) (tuple21 (tuple21 a b) b))))
  (sort (tuple2 (tuple2 (tuple2 a1 b1) b1) (tuple2 (tuple2 a1 b1) b1))
  (t2tb632 x))))

(declare-fun tb2t632 (uni) (tuple21 (tuple21 (tuple21 a b) b)
  (tuple21 (tuple21 a b) b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 a b) b) (tuple21 (tuple21 a b) b))))
  (! (= (tb2t632 (t2tb632 i)) i) :pattern ((t2tb632 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 (tuple2 a1 b1) b1) (tuple2 (tuple2 a1 b1) b1))
     j) (= (t2tb632 (tb2t632 j)) j)) :pattern ((t2tb632 (tb2t632 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 (tuple21 a b) b))) (t (set (tuple21 (tuple21 a b)
  b))) (x (tuple21 (tuple21 a b) b)) (y (tuple21 (tuple21 a b) b)))
  (= (mem (tuple2 (tuple2 (tuple2 a1 b1) b1) (tuple2 (tuple2 a1 b1) b1))
  (Tuple2 (tuple2 (tuple2 a1 b1) b1) (tuple2 (tuple2 a1 b1) b1) (t2tb28 x)
  (t2tb28 y))
  (times (tuple2 (tuple2 a1 b1) b1) (tuple2 (tuple2 a1 b1) b1) (t2tb27 s)
  (t2tb27 t))) (and (mem18 x s) (mem18 y t)))))

(declare-fun t2tb633 ((set (tuple21 (tuple21 (tuple21 a b) b) (tuple21 a
  b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 a b) b) (tuple21 a b))))) (sort
  (set1 (tuple2 (tuple2 (tuple2 a1 b1) b1) (tuple2 a1 b1))) (t2tb633 x))))

(declare-fun tb2t633 (uni) (set (tuple21 (tuple21 (tuple21 a b) b) (tuple21 a
  b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 a b) b) (tuple21 a b)))))
  (! (= (tb2t633 (t2tb633 i)) i) :pattern ((t2tb633 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 (tuple2 a1 b1) b1) (tuple2 a1 b1))) j)
     (= (t2tb633 (tb2t633 j)) j)) :pattern ((t2tb633 (tb2t633 j))) )))

(declare-fun t2tb634 ((tuple21 (tuple21 (tuple21 a b) b) (tuple21 a b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 a b) b) (tuple21 a b)))) (sort
  (tuple2 (tuple2 (tuple2 a1 b1) b1) (tuple2 a1 b1)) (t2tb634 x))))

(declare-fun tb2t634 (uni) (tuple21 (tuple21 (tuple21 a b) b) (tuple21 a b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 a b) b) (tuple21 a b))))
  (! (= (tb2t634 (t2tb634 i)) i) :pattern ((t2tb634 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 (tuple2 a1 b1) b1) (tuple2 a1 b1)) j)
     (= (t2tb634 (tb2t634 j)) j)) :pattern ((t2tb634 (tb2t634 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 (tuple21 a b) b))) (t (set (tuple21 a b)))
  (x (tuple21 (tuple21 a b) b)) (y (tuple21 a b)))
  (= (mem (tuple2 (tuple2 (tuple2 a1 b1) b1) (tuple2 a1 b1))
  (Tuple2 (tuple2 (tuple2 a1 b1) b1) (tuple2 a1 b1) (t2tb28 x) (t2tb13 y))
  (times (tuple2 a1 b1) (tuple2 (tuple2 a1 b1) b1) (t2tb27 s) (t2tb11 t)))
  (and (mem18 x s) (mem3 y t)))))

(declare-fun t2tb635 ((set (tuple21 (tuple21 (tuple21 a b) b) b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 a b) b) b)))) (sort
  (set1 (tuple2 (tuple2 (tuple2 a1 b1) b1) b1)) (t2tb635 x))))

(declare-fun tb2t635 (uni) (set (tuple21 (tuple21 (tuple21 a b) b) b)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 a b) b) b))))
  (! (= (tb2t635 (t2tb635 i)) i) :pattern ((t2tb635 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 (tuple2 a1 b1) b1) b1)) j)
     (= (t2tb635 (tb2t635 j)) j)) :pattern ((t2tb635 (tb2t635 j))) )))

(declare-fun t2tb636 ((tuple21 (tuple21 (tuple21 a b) b) b)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 a b) b) b))) (sort
  (tuple2 (tuple2 (tuple2 a1 b1) b1) b1) (t2tb636 x))))

(declare-fun tb2t636 (uni) (tuple21 (tuple21 (tuple21 a b) b) b))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 a b) b) b)))
  (! (= (tb2t636 (t2tb636 i)) i) :pattern ((t2tb636 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 (tuple2 a1 b1) b1) b1) j)
     (= (t2tb636 (tb2t636 j)) j)) :pattern ((t2tb636 (tb2t636 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 (tuple21 a b) b))) (t (set b))
  (x (tuple21 (tuple21 a b) b)) (y b))
  (= (mem (tuple2 (tuple2 (tuple2 a1 b1) b1) b1)
  (Tuple2 (tuple2 (tuple2 a1 b1) b1) b1 (t2tb28 x) (t2tb14 y))
  (times b1 (tuple2 (tuple2 a1 b1) b1) (t2tb27 s) (t2tb12 t)))
  (and (mem18 x s) (mem2 y t)))))

(declare-fun t2tb637 ((set (tuple21 (tuple21 (tuple21 a b) b) a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 a b) b) a)))) (sort
  (set1 (tuple2 (tuple2 (tuple2 a1 b1) b1) a1)) (t2tb637 x))))

(declare-fun tb2t637 (uni) (set (tuple21 (tuple21 (tuple21 a b) b) a)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 a b) b) a))))
  (! (= (tb2t637 (t2tb637 i)) i) :pattern ((t2tb637 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 (tuple2 a1 b1) b1) a1)) j)
     (= (t2tb637 (tb2t637 j)) j)) :pattern ((t2tb637 (tb2t637 j))) )))

(declare-fun t2tb638 ((tuple21 (tuple21 (tuple21 a b) b) a)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 a b) b) a))) (sort
  (tuple2 (tuple2 (tuple2 a1 b1) b1) a1) (t2tb638 x))))

(declare-fun tb2t638 (uni) (tuple21 (tuple21 (tuple21 a b) b) a))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 a b) b) a)))
  (! (= (tb2t638 (t2tb638 i)) i) :pattern ((t2tb638 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 (tuple2 a1 b1) b1) a1) j)
     (= (t2tb638 (tb2t638 j)) j)) :pattern ((t2tb638 (tb2t638 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 (tuple21 a b) b))) (t (set a))
  (x (tuple21 (tuple21 a b) b)) (y a))
  (= (mem (tuple2 (tuple2 (tuple2 a1 b1) b1) a1)
  (Tuple2 (tuple2 (tuple2 a1 b1) b1) a1 (t2tb28 x) (t2tb2 y))
  (times a1 (tuple2 (tuple2 a1 b1) b1) (t2tb27 s) (t2tb1 t)))
  (and (mem18 x s) (mem1 y t)))))

;; mem_times
  (assert
  (forall ((b2 ty))
  (forall ((s (set (tuple21 (tuple21 a b) b))) (t uni) (x (tuple21 (tuple21 a
  b) b)) (y uni))
  (= (mem (tuple2 (tuple2 (tuple2 a1 b1) b1) b2)
  (Tuple2 (tuple2 (tuple2 a1 b1) b1) b2 (t2tb28 x) y)
  (times b2 (tuple2 (tuple2 a1 b1) b1) (t2tb27 s) t))
  (and (mem18 x s) (mem b2 y t))))))

(declare-fun t2tb639 ((set (tuple21 (tuple21 a b) (set (tuple21 (tuple21 a b)
  b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) (set (tuple21 (tuple21 a b) b))))))
  (sort (set1 (tuple2 (tuple2 a1 b1) (set1 (tuple2 (tuple2 a1 b1) b1))))
  (t2tb639 x))))

(declare-fun tb2t639 (uni) (set (tuple21 (tuple21 a b)
  (set (tuple21 (tuple21 a b) b)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a b) (set (tuple21 (tuple21 a b) b))))))
  (! (= (tb2t639 (t2tb639 i)) i) :pattern ((t2tb639 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 a1 b1) (set1 (tuple2 (tuple2 a1 b1) b1)))) j)
     (= (t2tb639 (tb2t639 j)) j)) :pattern ((t2tb639 (tb2t639 j))) )))

(declare-fun t2tb640 ((tuple21 (tuple21 a b) (set (tuple21 (tuple21 a b)
  b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a b) (set (tuple21 (tuple21 a b) b))))) (sort
  (tuple2 (tuple2 a1 b1) (set1 (tuple2 (tuple2 a1 b1) b1))) (t2tb640 x))))

(declare-fun tb2t640 (uni) (tuple21 (tuple21 a b) (set (tuple21 (tuple21 a b)
  b))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a b) (set (tuple21 (tuple21 a b) b)))))
  (! (= (tb2t640 (t2tb640 i)) i) :pattern ((t2tb640 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 b1) (set1 (tuple2 (tuple2 a1 b1) b1))) j)
     (= (t2tb640 (tb2t640 j)) j)) :pattern ((t2tb640 (tb2t640 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (set (tuple21 (tuple21 a b) b))))
  (x (tuple21 a b)) (y (set (tuple21 (tuple21 a b) b))))
  (= (mem (tuple2 (tuple2 a1 b1) (set1 (tuple2 (tuple2 a1 b1) b1)))
  (Tuple2 (tuple2 a1 b1) (set1 (tuple2 (tuple2 a1 b1) b1)) (t2tb13 x)
  (t2tb27 y))
  (times (set1 (tuple2 (tuple2 a1 b1) b1)) (tuple2 a1 b1) (t2tb11 s)
  (t2tb51 t))) (and (mem3 x s) (mem19 y t)))))

(declare-fun t2tb641 ((set (tuple21 (tuple21 a b) (tuple21 (tuple21 a b)
  b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) (tuple21 (tuple21 a b) b))))) (sort
  (set1 (tuple2 (tuple2 a1 b1) (tuple2 (tuple2 a1 b1) b1))) (t2tb641 x))))

(declare-fun tb2t641 (uni) (set (tuple21 (tuple21 a b) (tuple21 (tuple21 a b)
  b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a b) (tuple21 (tuple21 a b) b)))))
  (! (= (tb2t641 (t2tb641 i)) i) :pattern ((t2tb641 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 b1) (tuple2 (tuple2 a1 b1) b1))) j)
     (= (t2tb641 (tb2t641 j)) j)) :pattern ((t2tb641 (tb2t641 j))) )))

(declare-fun t2tb642 ((tuple21 (tuple21 a b) (tuple21 (tuple21 a b) b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a b) (tuple21 (tuple21 a b) b)))) (sort
  (tuple2 (tuple2 a1 b1) (tuple2 (tuple2 a1 b1) b1)) (t2tb642 x))))

(declare-fun tb2t642 (uni) (tuple21 (tuple21 a b) (tuple21 (tuple21 a b) b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a b) (tuple21 (tuple21 a b) b))))
  (! (= (tb2t642 (t2tb642 i)) i) :pattern ((t2tb642 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 b1) (tuple2 (tuple2 a1 b1) b1)) j)
     (= (t2tb642 (tb2t642 j)) j)) :pattern ((t2tb642 (tb2t642 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (tuple21 (tuple21 a b) b)))
  (x (tuple21 a b)) (y (tuple21 (tuple21 a b) b)))
  (= (mem (tuple2 (tuple2 a1 b1) (tuple2 (tuple2 a1 b1) b1))
  (Tuple2 (tuple2 a1 b1) (tuple2 (tuple2 a1 b1) b1) (t2tb13 x) (t2tb28 y))
  (times (tuple2 (tuple2 a1 b1) b1) (tuple2 a1 b1) (t2tb11 s) (t2tb27 t)))
  (and (mem3 x s) (mem18 y t)))))

(declare-fun t2tb25 ((set (tuple21 (tuple21 a b) (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) (tuple21 a b))))) (sort
  (set1 (tuple2 (tuple2 a1 b1) (tuple2 a1 b1))) (t2tb25 x))))

(declare-fun tb2t25 (uni) (set (tuple21 (tuple21 a b) (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a b) (tuple21 a b)))))
  (! (= (tb2t25 (t2tb25 i)) i) :pattern ((t2tb25 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 b1) (tuple2 a1 b1))) j)
     (= (t2tb25 (tb2t25 j)) j)) :pattern ((t2tb25 (tb2t25 j))) )))

(declare-fun t2tb26 ((tuple21 (tuple21 a b) (tuple21 a b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a b) (tuple21 a b)))) (sort
  (tuple2 (tuple2 a1 b1) (tuple2 a1 b1)) (t2tb26 x))))

(declare-fun tb2t26 (uni) (tuple21 (tuple21 a b) (tuple21 a b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a b) (tuple21 a b))))
  (! (= (tb2t26 (t2tb26 i)) i) :pattern ((t2tb26 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 b1) (tuple2 a1 b1)) j)
     (= (t2tb26 (tb2t26 j)) j)) :pattern ((t2tb26 (tb2t26 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (tuple21 a b))) (x (tuple21 a b))
  (y (tuple21 a b)))
  (= (mem (tuple2 (tuple2 a1 b1) (tuple2 a1 b1))
  (Tuple2 (tuple2 a1 b1) (tuple2 a1 b1) (t2tb13 x) (t2tb13 y))
  (times (tuple2 a1 b1) (tuple2 a1 b1) (t2tb11 s) (t2tb11 t)))
  (and (mem3 x s) (mem3 y t)))))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a b))) (t (set b)) (x (tuple21 a b)) (y b))
  (= (mem18 (Tuple24 x y) (times7 s t)) (and (mem3 x s) (mem2 y t)))))

(declare-fun t2tb29 ((set (tuple21 (tuple21 a b) a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) a)))) (sort
  (set1 (tuple2 (tuple2 a1 b1) a1)) (t2tb29 x))))

(declare-fun tb2t29 (uni) (set (tuple21 (tuple21 a b) a)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a b) a))))
  (! (= (tb2t29 (t2tb29 i)) i) :pattern ((t2tb29 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 b1) a1)) j)
     (= (t2tb29 (tb2t29 j)) j)) :pattern ((t2tb29 (tb2t29 j))) )))

(declare-fun t2tb30 ((tuple21 (tuple21 a b) a)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a b) a))) (sort (tuple2 (tuple2 a1 b1) a1)
  (t2tb30 x))))

(declare-fun tb2t30 (uni) (tuple21 (tuple21 a b) a))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a b) a)))
  (! (= (tb2t30 (t2tb30 i)) i) :pattern ((t2tb30 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 b1) a1) j) (= (t2tb30 (tb2t30 j)) j)) :pattern (
  (t2tb30 (tb2t30 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a b))) (t (set a)) (x (tuple21 a b)) (y a))
  (= (mem (tuple2 (tuple2 a1 b1) a1)
  (Tuple2 (tuple2 a1 b1) a1 (t2tb13 x) (t2tb2 y))
  (times a1 (tuple2 a1 b1) (t2tb11 s) (t2tb1 t)))
  (and (mem3 x s) (mem1 y t)))))

;; mem_times
  (assert
  (forall ((b2 ty))
  (forall ((s (set (tuple21 a b))) (t uni) (x (tuple21 a b)) (y uni))
  (= (mem (tuple2 (tuple2 a1 b1) b2) (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) y)
  (times b2 (tuple2 a1 b1) (t2tb11 s) t)) (and (mem3 x s) (mem b2 y t))))))

(declare-fun t2tb643 ((set (tuple21 b (set (tuple21 (tuple21 a b) b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 b (set (tuple21 (tuple21 a b) b)))))) (sort
  (set1 (tuple2 b1 (set1 (tuple2 (tuple2 a1 b1) b1)))) (t2tb643 x))))

(declare-fun tb2t643 (uni) (set (tuple21 b (set (tuple21 (tuple21 a b) b)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 b (set (tuple21 (tuple21 a b) b))))))
  (! (= (tb2t643 (t2tb643 i)) i) :pattern ((t2tb643 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 b1 (set1 (tuple2 (tuple2 a1 b1) b1)))) j)
     (= (t2tb643 (tb2t643 j)) j)) :pattern ((t2tb643 (tb2t643 j))) )))

(declare-fun t2tb644 ((tuple21 b (set (tuple21 (tuple21 a b) b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 b (set (tuple21 (tuple21 a b) b))))) (sort
  (tuple2 b1 (set1 (tuple2 (tuple2 a1 b1) b1))) (t2tb644 x))))

(declare-fun tb2t644 (uni) (tuple21 b (set (tuple21 (tuple21 a b) b))))

;; BridgeL
  (assert
  (forall ((i (tuple21 b (set (tuple21 (tuple21 a b) b)))))
  (! (= (tb2t644 (t2tb644 i)) i) :pattern ((t2tb644 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 b1 (set1 (tuple2 (tuple2 a1 b1) b1))) j)
     (= (t2tb644 (tb2t644 j)) j)) :pattern ((t2tb644 (tb2t644 j))) )))

;; mem_times
  (assert
  (forall ((s (set b)) (t (set (set (tuple21 (tuple21 a b) b)))) (x b)
  (y (set (tuple21 (tuple21 a b) b))))
  (= (mem (tuple2 b1 (set1 (tuple2 (tuple2 a1 b1) b1)))
  (Tuple2 b1 (set1 (tuple2 (tuple2 a1 b1) b1)) (t2tb14 x) (t2tb27 y))
  (times (set1 (tuple2 (tuple2 a1 b1) b1)) b1 (t2tb12 s) (t2tb51 t)))
  (and (mem2 x s) (mem19 y t)))))

(declare-fun t2tb645 ((set (tuple21 b (tuple21 (tuple21 a b) b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 b (tuple21 (tuple21 a b) b))))) (sort
  (set1 (tuple2 b1 (tuple2 (tuple2 a1 b1) b1))) (t2tb645 x))))

(declare-fun tb2t645 (uni) (set (tuple21 b (tuple21 (tuple21 a b) b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 b (tuple21 (tuple21 a b) b)))))
  (! (= (tb2t645 (t2tb645 i)) i) :pattern ((t2tb645 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 b1 (tuple2 (tuple2 a1 b1) b1))) j)
     (= (t2tb645 (tb2t645 j)) j)) :pattern ((t2tb645 (tb2t645 j))) )))

(declare-fun t2tb646 ((tuple21 b (tuple21 (tuple21 a b) b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 b (tuple21 (tuple21 a b) b)))) (sort
  (tuple2 b1 (tuple2 (tuple2 a1 b1) b1)) (t2tb646 x))))

(declare-fun tb2t646 (uni) (tuple21 b (tuple21 (tuple21 a b) b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 b (tuple21 (tuple21 a b) b))))
  (! (= (tb2t646 (t2tb646 i)) i) :pattern ((t2tb646 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 b1 (tuple2 (tuple2 a1 b1) b1)) j)
     (= (t2tb646 (tb2t646 j)) j)) :pattern ((t2tb646 (tb2t646 j))) )))

;; mem_times
  (assert
  (forall ((s (set b)) (t (set (tuple21 (tuple21 a b) b))) (x b)
  (y (tuple21 (tuple21 a b) b)))
  (= (mem (tuple2 b1 (tuple2 (tuple2 a1 b1) b1))
  (Tuple2 b1 (tuple2 (tuple2 a1 b1) b1) (t2tb14 x) (t2tb28 y))
  (times (tuple2 (tuple2 a1 b1) b1) b1 (t2tb12 s) (t2tb27 t)))
  (and (mem2 x s) (mem18 y t)))))

(declare-fun t2tb33 ((tuple21 b (tuple21 a b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 b (tuple21 a b)))) (sort (tuple2 b1 (tuple2 a1 b1))
  (t2tb33 x))))

(declare-fun tb2t33 (uni) (tuple21 b (tuple21 a b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 b (tuple21 a b))))
  (! (= (tb2t33 (t2tb33 i)) i) :pattern ((t2tb33 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 b1 (tuple2 a1 b1)) j) (= (t2tb33 (tb2t33 j)) j)) :pattern (
  (t2tb33 (tb2t33 j))) )))

(declare-fun t2tb34 ((set (tuple21 b (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 b (tuple21 a b))))) (sort
  (set1 (tuple2 b1 (tuple2 a1 b1))) (t2tb34 x))))

(declare-fun tb2t34 (uni) (set (tuple21 b (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 b (tuple21 a b)))))
  (! (= (tb2t34 (t2tb34 i)) i) :pattern ((t2tb34 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 b1 (tuple2 a1 b1))) j)
     (= (t2tb34 (tb2t34 j)) j)) :pattern ((t2tb34 (tb2t34 j))) )))

;; mem_times
  (assert
  (forall ((s (set b)) (t (set (tuple21 a b))) (x b) (y (tuple21 a b)))
  (= (mem (tuple2 b1 (tuple2 a1 b1))
  (Tuple2 b1 (tuple2 a1 b1) (t2tb14 x) (t2tb13 y))
  (times (tuple2 a1 b1) b1 (t2tb12 s) (t2tb11 t)))
  (and (mem2 x s) (mem3 y t)))))

(declare-fun t2tb35 ((set (tuple21 b b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 b b)))) (sort (set1 (tuple2 b1 b1)) (t2tb35 x))))

(declare-fun tb2t35 (uni) (set (tuple21 b b)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 b b))))
  (! (= (tb2t35 (t2tb35 i)) i) :pattern ((t2tb35 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 b1 b1)) j) (= (t2tb35 (tb2t35 j)) j)) :pattern (
  (t2tb35 (tb2t35 j))) )))

(declare-fun t2tb36 ((tuple21 b b)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 b b))) (sort (tuple2 b1 b1) (t2tb36 x))))

(declare-fun tb2t36 (uni) (tuple21 b b))

;; BridgeL
  (assert
  (forall ((i (tuple21 b b)))
  (! (= (tb2t36 (t2tb36 i)) i) :pattern ((t2tb36 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 b1 b1) j) (= (t2tb36 (tb2t36 j)) j)) :pattern (
  (t2tb36 (tb2t36 j))) )))

;; mem_times
  (assert
  (forall ((s (set b)) (t (set b)) (x b) (y b))
  (= (mem (tuple2 b1 b1) (Tuple2 b1 b1 (t2tb14 x) (t2tb14 y))
  (times b1 b1 (t2tb12 s) (t2tb12 t))) (and (mem2 x s) (mem2 y t)))))

(declare-fun t2tb37 ((set (tuple21 b a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 b a)))) (sort (set1 (tuple2 b1 a1)) (t2tb37 x))))

(declare-fun tb2t37 (uni) (set (tuple21 b a)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 b a))))
  (! (= (tb2t37 (t2tb37 i)) i) :pattern ((t2tb37 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 b1 a1)) j) (= (t2tb37 (tb2t37 j)) j)) :pattern (
  (t2tb37 (tb2t37 j))) )))

(declare-fun t2tb38 ((tuple21 b a)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 b a))) (sort (tuple2 b1 a1) (t2tb38 x))))

(declare-fun tb2t38 (uni) (tuple21 b a))

;; BridgeL
  (assert
  (forall ((i (tuple21 b a)))
  (! (= (tb2t38 (t2tb38 i)) i) :pattern ((t2tb38 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 b1 a1) j) (= (t2tb38 (tb2t38 j)) j)) :pattern (
  (t2tb38 (tb2t38 j))) )))

;; mem_times
  (assert
  (forall ((s (set b)) (t (set a)) (x b) (y a))
  (= (mem (tuple2 b1 a1) (Tuple2 b1 a1 (t2tb14 x) (t2tb2 y))
  (times a1 b1 (t2tb12 s) (t2tb1 t))) (and (mem2 x s) (mem1 y t)))))

;; mem_times
  (assert
  (forall ((b2 ty))
  (forall ((s (set b)) (t uni) (x b) (y uni))
  (= (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) y)
  (times b2 b1 (t2tb12 s) t)) (and (mem2 x s) (mem b2 y t))))))

(declare-fun t2tb44 ((set (set b))) uni)

;; t2tb_sort
  (assert (forall ((x (set (set b)))) (sort (set1 (set1 b1)) (t2tb44 x))))

(declare-fun tb2t44 (uni) (set (set b)))

;; BridgeL
  (assert
  (forall ((i (set (set b))))
  (! (= (tb2t44 (t2tb44 i)) i) :pattern ((t2tb44 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 b1)) j) (= (t2tb44 (tb2t44 j)) j)) :pattern (
  (t2tb44 (tb2t44 j))) )))

(declare-fun t2tb ((set (set a))) uni)

;; t2tb_sort
  (assert (forall ((x (set (set a)))) (sort (set1 (set1 a1)) (t2tb x))))

(declare-fun tb2t (uni) (set (set a)))

;; BridgeL
  (assert
  (forall ((i (set (set a)))) (! (= (tb2t (t2tb i)) i) :pattern ((t2tb i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 a1)) j) (= (t2tb (tb2t j)) j)) :pattern ((t2tb
                                                                    (tb2t j))) )))

(declare-fun t2tb538 ((set (tuple21 (set a) (set b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set a) (set b))))) (sort
  (set1 (tuple2 (set1 a1) (set1 b1))) (t2tb538 x))))

(declare-fun tb2t538 (uni) (set (tuple21 (set a) (set b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set a) (set b)))))
  (! (= (tb2t538 (t2tb538 i)) i) :pattern ((t2tb538 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 a1) (set1 b1))) j)
     (= (t2tb538 (tb2t538 j)) j)) :pattern ((t2tb538 (tb2t538 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set a))) (t (set (set b))) (x (set a)) (y (set b)))
  (= (mem (tuple2 (set1 a1) (set1 b1)) (t2tb495 (Tuple23 x y))
  (times (set1 b1) (set1 a1) (t2tb s) (t2tb44 t)))
  (and (mem (set1 a1) (t2tb1 x) (t2tb s)) (mem (set1 b1) (t2tb12 y)
  (t2tb44 t))))))

(declare-fun t2tb647 ((set (tuple21 a (set (tuple21 (tuple21 a b) b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (set (tuple21 (tuple21 a b) b)))))) (sort
  (set1 (tuple2 a1 (set1 (tuple2 (tuple2 a1 b1) b1)))) (t2tb647 x))))

(declare-fun tb2t647 (uni) (set (tuple21 a (set (tuple21 (tuple21 a b) b)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (set (tuple21 (tuple21 a b) b))))))
  (! (= (tb2t647 (t2tb647 i)) i) :pattern ((t2tb647 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (set1 (tuple2 (tuple2 a1 b1) b1)))) j)
     (= (t2tb647 (tb2t647 j)) j)) :pattern ((t2tb647 (tb2t647 j))) )))

(declare-fun t2tb648 ((tuple21 a (set (tuple21 (tuple21 a b) b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (set (tuple21 (tuple21 a b) b))))) (sort
  (tuple2 a1 (set1 (tuple2 (tuple2 a1 b1) b1))) (t2tb648 x))))

(declare-fun tb2t648 (uni) (tuple21 a (set (tuple21 (tuple21 a b) b))))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (set (tuple21 (tuple21 a b) b)))))
  (! (= (tb2t648 (t2tb648 i)) i) :pattern ((t2tb648 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (set1 (tuple2 (tuple2 a1 b1) b1))) j)
     (= (t2tb648 (tb2t648 j)) j)) :pattern ((t2tb648 (tb2t648 j))) )))

;; mem_times
  (assert
  (forall ((s (set a)) (t (set (set (tuple21 (tuple21 a b) b)))) (x a)
  (y (set (tuple21 (tuple21 a b) b))))
  (= (mem (tuple2 a1 (set1 (tuple2 (tuple2 a1 b1) b1)))
  (Tuple2 a1 (set1 (tuple2 (tuple2 a1 b1) b1)) (t2tb2 x) (t2tb27 y))
  (times (set1 (tuple2 (tuple2 a1 b1) b1)) a1 (t2tb1 s) (t2tb51 t)))
  (and (mem1 x s) (mem19 y t)))))

(declare-fun t2tb649 ((set (tuple21 a (tuple21 (tuple21 a b) b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (tuple21 (tuple21 a b) b))))) (sort
  (set1 (tuple2 a1 (tuple2 (tuple2 a1 b1) b1))) (t2tb649 x))))

(declare-fun tb2t649 (uni) (set (tuple21 a (tuple21 (tuple21 a b) b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (tuple21 (tuple21 a b) b)))))
  (! (= (tb2t649 (t2tb649 i)) i) :pattern ((t2tb649 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (tuple2 (tuple2 a1 b1) b1))) j)
     (= (t2tb649 (tb2t649 j)) j)) :pattern ((t2tb649 (tb2t649 j))) )))

(declare-fun t2tb650 ((tuple21 a (tuple21 (tuple21 a b) b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (tuple21 (tuple21 a b) b)))) (sort
  (tuple2 a1 (tuple2 (tuple2 a1 b1) b1)) (t2tb650 x))))

(declare-fun tb2t650 (uni) (tuple21 a (tuple21 (tuple21 a b) b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (tuple21 (tuple21 a b) b))))
  (! (= (tb2t650 (t2tb650 i)) i) :pattern ((t2tb650 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (tuple2 (tuple2 a1 b1) b1)) j)
     (= (t2tb650 (tb2t650 j)) j)) :pattern ((t2tb650 (tb2t650 j))) )))

;; mem_times
  (assert
  (forall ((s (set a)) (t (set (tuple21 (tuple21 a b) b))) (x a)
  (y (tuple21 (tuple21 a b) b)))
  (= (mem (tuple2 a1 (tuple2 (tuple2 a1 b1) b1))
  (Tuple2 a1 (tuple2 (tuple2 a1 b1) b1) (t2tb2 x) (t2tb28 y))
  (times (tuple2 (tuple2 a1 b1) b1) a1 (t2tb1 s) (t2tb27 t)))
  (and (mem1 x s) (mem18 y t)))))

(declare-fun t2tb41 ((set (tuple21 a (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (tuple21 a b))))) (sort
  (set1 (tuple2 a1 (tuple2 a1 b1))) (t2tb41 x))))

(declare-fun tb2t41 (uni) (set (tuple21 a (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (tuple21 a b)))))
  (! (= (tb2t41 (t2tb41 i)) i) :pattern ((t2tb41 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (tuple2 a1 b1))) j)
     (= (t2tb41 (tb2t41 j)) j)) :pattern ((t2tb41 (tb2t41 j))) )))

(declare-fun t2tb42 ((tuple21 a (tuple21 a b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (tuple21 a b)))) (sort (tuple2 a1 (tuple2 a1 b1))
  (t2tb42 x))))

(declare-fun tb2t42 (uni) (tuple21 a (tuple21 a b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (tuple21 a b))))
  (! (= (tb2t42 (t2tb42 i)) i) :pattern ((t2tb42 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (tuple2 a1 b1)) j) (= (t2tb42 (tb2t42 j)) j)) :pattern (
  (t2tb42 (tb2t42 j))) )))

;; mem_times
  (assert
  (forall ((s (set a)) (t (set (tuple21 a b))) (x a) (y (tuple21 a b)))
  (= (mem (tuple2 a1 (tuple2 a1 b1))
  (Tuple2 a1 (tuple2 a1 b1) (t2tb2 x) (t2tb13 y))
  (times (tuple2 a1 b1) a1 (t2tb1 s) (t2tb11 t)))
  (and (mem1 x s) (mem3 y t)))))

;; mem_times
  (assert
  (forall ((s (set a)) (t (set b)) (x a) (y b))
  (= (mem3 (Tuple21 x y) (times2 s t)) (and (mem1 x s) (mem2 y t)))))

(declare-fun t2tb4 ((set (tuple21 a a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a a)))) (sort (set1 (tuple2 a1 a1)) (t2tb4 x))))

(declare-fun tb2t4 (uni) (set (tuple21 a a)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a a))))
  (! (= (tb2t4 (t2tb4 i)) i) :pattern ((t2tb4 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 a1)) j) (= (t2tb4 (tb2t4 j)) j)) :pattern (
  (t2tb4 (tb2t4 j))) )))

(declare-fun t2tb5 ((tuple21 a a)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 a a))) (sort (tuple2 a1 a1) (t2tb5 x))))

(declare-fun tb2t5 (uni) (tuple21 a a))

;; BridgeL
  (assert
  (forall ((i (tuple21 a a)))
  (! (= (tb2t5 (t2tb5 i)) i) :pattern ((t2tb5 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 a1) j) (= (t2tb5 (tb2t5 j)) j)) :pattern ((t2tb5
                                                                    (tb2t5 j))) )))

;; mem_times
  (assert
  (forall ((s (set a)) (t (set a)) (x a) (y a))
  (= (mem (tuple2 a1 a1) (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y))
  (times a1 a1 (t2tb1 s) (t2tb1 t))) (and (mem1 x s) (mem1 y t)))))

;; mem_times
  (assert
  (forall ((b2 ty))
  (forall ((s (set a)) (t uni) (x a) (y uni))
  (= (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) y)
  (times b2 a1 (t2tb1 s) t)) (and (mem1 x s) (mem b2 y t))))))

;; mem_times
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (x uni) (y uni))
  (= (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) (times b2 a2 s t))
  (and (mem a2 x s) (mem b2 y t))))))

(declare-fun t2tb651 ((set (set (set (tuple21 (tuple21 a b) b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (set (tuple21 (tuple21 a b) b)))))) (sort
  (set1 (set1 (set1 (tuple2 (tuple2 a1 b1) b1)))) (t2tb651 x))))

(declare-fun tb2t651 (uni) (set (set (set (tuple21 (tuple21 a b) b)))))

;; BridgeL
  (assert
  (forall ((i (set (set (set (tuple21 (tuple21 a b) b))))))
  (! (= (tb2t651 (t2tb651 i)) i) :pattern ((t2tb651 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (set1 (tuple2 (tuple2 a1 b1) b1)))) j)
     (= (t2tb651 (tb2t651 j)) j)) :pattern ((t2tb651 (tb2t651 j))) )))

;; mem_power
  (assert
  (forall ((s (set (set (tuple21 (tuple21 a b) b))))
  (t (set (set (tuple21 (tuple21 a b) b)))))
  (= (mem (set1 (set1 (tuple2 (tuple2 a1 b1) b1))) (t2tb51 s)
  (power (set1 (tuple2 (tuple2 a1 b1) b1)) (t2tb51 t)))
  (forall ((x (set (tuple21 (tuple21 a b) b)))) (=> (mem19 x s) (mem19 x t))))))

;; mem_power
  (assert
  (forall ((s (set (tuple21 (tuple21 a b) b))) (t (set (tuple21 (tuple21 a b)
  b))))
  (= (mem19 s (tb2t51 (power (tuple2 (tuple2 a1 b1) b1) (t2tb27 t))))
  (forall ((x (tuple21 (tuple21 a b) b))) (=> (mem18 x s) (mem18 x t))))))

(declare-fun t2tb10 ((set (set (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 a b))))) (sort (set1 (set1 (tuple2 a1 b1)))
  (t2tb10 x))))

(declare-fun tb2t10 (uni) (set (set (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 a b)))))
  (! (= (tb2t10 (t2tb10 i)) i) :pattern ((t2tb10 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 a1 b1))) j) (= (t2tb10 (tb2t10 j)) j)) :pattern (
  (t2tb10 (tb2t10 j))) )))

;; mem_power
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (tuple21 a b))))
  (= (mem (set1 (tuple2 a1 b1)) (t2tb11 s) (power (tuple2 a1 b1) (t2tb11 t)))
  (forall ((x (tuple21 a b))) (=> (mem3 x s) (mem3 x t))))))

;; mem_power
  (assert
  (forall ((s (set b)) (t (set b)))
  (= (mem (set1 b1) (t2tb12 s) (power b1 (t2tb12 t)))
  (forall ((x b)) (=> (mem2 x s) (mem2 x t))))))

;; mem_power
  (assert
  (forall ((s (set a)) (t (set a)))
  (= (mem (set1 a1) (t2tb1 s) (power a1 (t2tb1 t)))
  (forall ((x a)) (=> (mem1 x s) (mem1 x t))))))

;; mem_power
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t uni))
  (and
  (=> (mem (set1 a2) s (power a2 t))
  (forall ((x uni)) (=> (mem a2 x s) (mem a2 x t))))
  (=> (forall ((x uni)) (=> (sort a2 x) (=> (mem a2 x s) (mem a2 x t)))) (mem
  (set1 a2) s (power a2 t)))))))

;; mem_non_empty_power
  (assert
  (forall ((s (set (set (tuple21 (tuple21 a b) b))))
  (t (set (set (tuple21 (tuple21 a b) b)))))
  (= (mem (set1 (set1 (tuple2 (tuple2 a1 b1) b1))) (t2tb51 s)
  (non_empty_power (set1 (tuple2 (tuple2 a1 b1) b1)) (t2tb51 t)))
  (and
  (forall ((x (set (tuple21 (tuple21 a b) b)))) (=> (mem19 x s) (mem19 x t)))
  (not (infix_eqeq (set1 (tuple2 (tuple2 a1 b1) b1)) (t2tb51 s)
  (empty (set1 (tuple2 (tuple2 a1 b1) b1)))))))))

;; mem_non_empty_power
  (assert
  (forall ((s (set (tuple21 (tuple21 a b) b))) (t (set (tuple21 (tuple21 a b)
  b))))
  (= (mem19 s
  (tb2t51 (non_empty_power (tuple2 (tuple2 a1 b1) b1) (t2tb27 t))))
  (and (forall ((x (tuple21 (tuple21 a b) b))) (=> (mem18 x s) (mem18 x t)))
  (not (infix_eqeq (tuple2 (tuple2 a1 b1) b1) (t2tb27 s)
  (empty (tuple2 (tuple2 a1 b1) b1))))))))

;; mem_non_empty_power
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (tuple21 a b))))
  (= (mem (set1 (tuple2 a1 b1)) (t2tb11 s)
  (non_empty_power (tuple2 a1 b1) (t2tb11 t)))
  (and (forall ((x (tuple21 a b))) (=> (mem3 x s) (mem3 x t)))
  (not (infix_eqeq (tuple2 a1 b1) (t2tb11 s) (empty (tuple2 a1 b1))))))))

;; mem_non_empty_power
  (assert
  (forall ((s (set b)) (t (set b)))
  (= (mem (set1 b1) (t2tb12 s) (non_empty_power b1 (t2tb12 t)))
  (and (forall ((x b)) (=> (mem2 x s) (mem2 x t)))
  (not (infix_eqeq b1 (t2tb12 s) (empty b1)))))))

;; mem_non_empty_power
  (assert
  (forall ((s (set a)) (t (set a)))
  (= (mem (set1 a1) (t2tb1 s) (non_empty_power a1 (t2tb1 t)))
  (and (forall ((x a)) (=> (mem1 x s) (mem1 x t)))
  (not (infix_eqeq a1 (t2tb1 s) (empty a1)))))))

;; mem_non_empty_power
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t uni))
  (and
  (=> (mem (set1 a2) s (non_empty_power a2 t))
  (and (forall ((x uni)) (=> (mem a2 x s) (mem a2 x t)))
  (not (infix_eqeq a2 s (empty a2)))))
  (=>
  (and (forall ((x uni)) (=> (sort a2 x) (=> (mem a2 x s) (mem a2 x t))))
  (not (infix_eqeq a2 s (empty a2)))) (mem (set1 a2) s
  (non_empty_power a2 t)))))))

(declare-fun choose (ty uni) uni)

;; choose_sort
  (assert (forall ((a2 ty)) (forall ((x uni)) (sort a2 (choose a2 x)))))

(declare-fun relation (ty ty uni uni) uni)

;; relation_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (set1 (tuple2 a2 b2)))
  (relation b2 a2 x x1)))))

;; mem_relation
  (assert
  (forall ((a2 ty))
  (forall ((u uni) (v (set (set (tuple21 (tuple21 a b) b)))) (r uni))
  (and
  (=> (mem (set1 (tuple2 a2 (set1 (tuple2 (tuple2 a1 b1) b1)))) r
  (relation (set1 (tuple2 (tuple2 a1 b1) b1)) a2 u (t2tb51 v)))
  (forall ((x uni) (y (set (tuple21 (tuple21 a b) b))))
  (=> (mem (tuple2 a2 (set1 (tuple2 (tuple2 a1 b1) b1)))
  (Tuple2 a2 (set1 (tuple2 (tuple2 a1 b1) b1)) x (t2tb27 y)) r)
  (and (mem a2 x u) (mem19 y v)))))
  (=>
  (forall ((x uni) (y (set (tuple21 (tuple21 a b) b))))
  (=> (sort a2 x)
  (=> (mem (tuple2 a2 (set1 (tuple2 (tuple2 a1 b1) b1)))
  (Tuple2 a2 (set1 (tuple2 (tuple2 a1 b1) b1)) x (t2tb27 y)) r)
  (and (mem a2 x u) (mem19 y v))))) (mem
  (set1 (tuple2 a2 (set1 (tuple2 (tuple2 a1 b1) b1)))) r
  (relation (set1 (tuple2 (tuple2 a1 b1) b1)) a2 u (t2tb51 v))))))))

;; mem_relation
  (assert
  (forall ((a2 ty))
  (forall ((u uni) (v (set (tuple21 (tuple21 a b) b))) (r uni))
  (and
  (=> (mem (set1 (tuple2 a2 (tuple2 (tuple2 a1 b1) b1))) r
  (relation (tuple2 (tuple2 a1 b1) b1) a2 u (t2tb27 v)))
  (forall ((x uni) (y (tuple21 (tuple21 a b) b)))
  (=> (mem (tuple2 a2 (tuple2 (tuple2 a1 b1) b1))
  (Tuple2 a2 (tuple2 (tuple2 a1 b1) b1) x (t2tb28 y)) r)
  (and (mem a2 x u) (mem18 y v)))))
  (=>
  (forall ((x uni) (y (tuple21 (tuple21 a b) b)))
  (=> (sort a2 x)
  (=> (mem (tuple2 a2 (tuple2 (tuple2 a1 b1) b1))
  (Tuple2 a2 (tuple2 (tuple2 a1 b1) b1) x (t2tb28 y)) r)
  (and (mem a2 x u) (mem18 y v))))) (mem
  (set1 (tuple2 a2 (tuple2 (tuple2 a1 b1) b1))) r
  (relation (tuple2 (tuple2 a1 b1) b1) a2 u (t2tb27 v))))))))

;; mem_relation
  (assert
  (forall ((a2 ty))
  (forall ((u uni) (v (set (tuple21 a b))) (r uni))
  (and
  (=> (mem (set1 (tuple2 a2 (tuple2 a1 b1))) r
  (relation (tuple2 a1 b1) a2 u (t2tb11 v)))
  (forall ((x uni) (y (tuple21 a b)))
  (=> (mem (tuple2 a2 (tuple2 a1 b1)) (Tuple2 a2 (tuple2 a1 b1) x (t2tb13 y))
  r) (and (mem a2 x u) (mem3 y v)))))
  (=>
  (forall ((x uni) (y (tuple21 a b)))
  (=> (sort a2 x)
  (=> (mem (tuple2 a2 (tuple2 a1 b1)) (Tuple2 a2 (tuple2 a1 b1) x (t2tb13 y))
  r) (and (mem a2 x u) (mem3 y v))))) (mem (set1 (tuple2 a2 (tuple2 a1 b1)))
  r (relation (tuple2 a1 b1) a2 u (t2tb11 v))))))))

;; mem_relation
  (assert
  (forall ((a2 ty))
  (forall ((u uni) (v (set b)) (r uni))
  (and
  (=> (mem (set1 (tuple2 a2 b1)) r (relation b1 a2 u (t2tb12 v)))
  (forall ((x uni) (y b))
  (=> (mem (tuple2 a2 b1) (Tuple2 a2 b1 x (t2tb14 y)) r)
  (and (mem a2 x u) (mem2 y v)))))
  (=>
  (forall ((x uni) (y b))
  (=> (sort a2 x)
  (=> (mem (tuple2 a2 b1) (Tuple2 a2 b1 x (t2tb14 y)) r)
  (and (mem a2 x u) (mem2 y v))))) (mem (set1 (tuple2 a2 b1)) r
  (relation b1 a2 u (t2tb12 v))))))))

;; mem_relation
  (assert
  (forall ((a2 ty))
  (forall ((u uni) (v (set a)) (r uni))
  (and
  (=> (mem (set1 (tuple2 a2 a1)) r (relation a1 a2 u (t2tb1 v)))
  (forall ((x uni) (y a))
  (=> (mem (tuple2 a2 a1) (Tuple2 a2 a1 x (t2tb2 y)) r)
  (and (mem a2 x u) (mem1 y v)))))
  (=>
  (forall ((x uni) (y a))
  (=> (sort a2 x)
  (=> (mem (tuple2 a2 a1) (Tuple2 a2 a1 x (t2tb2 y)) r)
  (and (mem a2 x u) (mem1 y v))))) (mem (set1 (tuple2 a2 a1)) r
  (relation a1 a2 u (t2tb1 v))))))))

(declare-fun t2tb652 ((set (set (tuple21 (set (tuple21 (tuple21 a b) b))
  (set (tuple21 (tuple21 a b) b)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 (tuple21 a b) b))
  (set (tuple21 (tuple21 a b) b))))))) (sort
  (set1
  (set1
  (tuple2 (set1 (tuple2 (tuple2 a1 b1) b1))
  (set1 (tuple2 (tuple2 a1 b1) b1))))) (t2tb652 x))))

(declare-fun tb2t652 (uni) (set (set (tuple21 (set (tuple21 (tuple21 a b) b))
  (set (tuple21 (tuple21 a b) b))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 (tuple21 a b) b))
  (set (tuple21 (tuple21 a b) b)))))))
  (! (= (tb2t652 (t2tb652 i)) i) :pattern ((t2tb652 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (set1
     (tuple2 (set1 (tuple2 (tuple2 a1 b1) b1))
     (set1 (tuple2 (tuple2 a1 b1) b1))))) j) (= (t2tb652 (tb2t652 j)) j)) :pattern (
  (t2tb652 (tb2t652 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 (tuple21 a b) b))))
  (v (set (set (tuple21 (tuple21 a b) b))))
  (r (set (tuple21 (set (tuple21 (tuple21 a b) b)) (set (tuple21 (tuple21 a
  b) b))))))
  (= (mem
  (set1
  (tuple2 (set1 (tuple2 (tuple2 a1 b1) b1))
  (set1 (tuple2 (tuple2 a1 b1) b1)))) (t2tb619 r)
  (relation (set1 (tuple2 (tuple2 a1 b1) b1))
  (set1 (tuple2 (tuple2 a1 b1) b1)) (t2tb51 u) (t2tb51 v)))
  (forall ((x (set (tuple21 (tuple21 a b) b))) (y (set (tuple21 (tuple21 a b)
  b))))
  (=> (mem
  (tuple2 (set1 (tuple2 (tuple2 a1 b1) b1))
  (set1 (tuple2 (tuple2 a1 b1) b1)))
  (Tuple2 (set1 (tuple2 (tuple2 a1 b1) b1)) (set1 (tuple2 (tuple2 a1 b1) b1))
  (t2tb27 x) (t2tb27 y)) (t2tb619 r)) (and (mem19 x u) (mem19 y v)))))))

(declare-fun t2tb653 ((set (set (tuple21 (set (tuple21 (tuple21 a b) b))
  (tuple21 (tuple21 a b) b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 (tuple21 a b) b))
  (tuple21 (tuple21 a b) b)))))) (sort
  (set1
  (set1
  (tuple2 (set1 (tuple2 (tuple2 a1 b1) b1)) (tuple2 (tuple2 a1 b1) b1))))
  (t2tb653 x))))

(declare-fun tb2t653 (uni) (set (set (tuple21 (set (tuple21 (tuple21 a b) b))
  (tuple21 (tuple21 a b) b)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 (tuple21 a b) b))
  (tuple21 (tuple21 a b) b))))))
  (! (= (tb2t653 (t2tb653 i)) i) :pattern ((t2tb653 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (set1
     (tuple2 (set1 (tuple2 (tuple2 a1 b1) b1)) (tuple2 (tuple2 a1 b1) b1))))
     j) (= (t2tb653 (tb2t653 j)) j)) :pattern ((t2tb653 (tb2t653 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 (tuple21 a b) b))))
  (v (set (tuple21 (tuple21 a b) b)))
  (r (set (tuple21 (set (tuple21 (tuple21 a b) b)) (tuple21 (tuple21 a b)
  b)))))
  (= (mem
  (set1
  (tuple2 (set1 (tuple2 (tuple2 a1 b1) b1)) (tuple2 (tuple2 a1 b1) b1)))
  (t2tb621 r)
  (relation (tuple2 (tuple2 a1 b1) b1) (set1 (tuple2 (tuple2 a1 b1) b1))
  (t2tb51 u) (t2tb27 v)))
  (forall ((x (set (tuple21 (tuple21 a b) b))) (y (tuple21 (tuple21 a b) b)))
  (=> (mem
  (tuple2 (set1 (tuple2 (tuple2 a1 b1) b1)) (tuple2 (tuple2 a1 b1) b1))
  (Tuple2 (set1 (tuple2 (tuple2 a1 b1) b1)) (tuple2 (tuple2 a1 b1) b1)
  (t2tb27 x) (t2tb28 y)) (t2tb621 r)) (and (mem19 x u) (mem18 y v)))))))

(declare-fun t2tb654 ((set (set (tuple21 (set (tuple21 (tuple21 a b) b))
  (tuple21 a b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 (tuple21 a b) b)) (tuple21 a
  b)))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 (tuple2 a1 b1) b1)) (tuple2 a1 b1))))
  (t2tb654 x))))

(declare-fun tb2t654 (uni) (set (set (tuple21 (set (tuple21 (tuple21 a b) b))
  (tuple21 a b)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 (tuple21 a b) b)) (tuple21 a
  b)))))) (! (= (tb2t654 (t2tb654 i)) i) :pattern ((t2tb654 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (set1 (tuple2 (tuple2 a1 b1) b1)) (tuple2 a1 b1))))
     j) (= (t2tb654 (tb2t654 j)) j)) :pattern ((t2tb654 (tb2t654 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 (tuple21 a b) b)))) (v (set (tuple21 a b)))
  (r (set (tuple21 (set (tuple21 (tuple21 a b) b)) (tuple21 a b)))))
  (= (mem (set1 (tuple2 (set1 (tuple2 (tuple2 a1 b1) b1)) (tuple2 a1 b1)))
  (t2tb623 r)
  (relation (tuple2 a1 b1) (set1 (tuple2 (tuple2 a1 b1) b1)) (t2tb51 u)
  (t2tb11 v)))
  (forall ((x (set (tuple21 (tuple21 a b) b))) (y (tuple21 a b)))
  (=> (mem (tuple2 (set1 (tuple2 (tuple2 a1 b1) b1)) (tuple2 a1 b1))
  (Tuple2 (set1 (tuple2 (tuple2 a1 b1) b1)) (tuple2 a1 b1) (t2tb27 x)
  (t2tb13 y)) (t2tb623 r)) (and (mem19 x u) (mem3 y v)))))))

(declare-fun t2tb655 ((set (set (tuple21 (set (tuple21 (tuple21 a b) b))
  b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 (tuple21 a b) b)) b))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 (tuple2 a1 b1) b1)) b1))) (t2tb655 x))))

(declare-fun tb2t655 (uni) (set (set (tuple21 (set (tuple21 (tuple21 a b) b))
  b))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 (tuple21 a b) b)) b)))))
  (! (= (tb2t655 (t2tb655 i)) i) :pattern ((t2tb655 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 (tuple2 a1 b1) b1)) b1))) j)
     (= (t2tb655 (tb2t655 j)) j)) :pattern ((t2tb655 (tb2t655 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 (tuple21 a b) b)))) (v (set b))
  (r (set (tuple21 (set (tuple21 (tuple21 a b) b)) b))))
  (= (mem (set1 (tuple2 (set1 (tuple2 (tuple2 a1 b1) b1)) b1)) (t2tb625 r)
  (relation b1 (set1 (tuple2 (tuple2 a1 b1) b1)) (t2tb51 u) (t2tb12 v)))
  (forall ((x (set (tuple21 (tuple21 a b) b))) (y b))
  (=> (mem (tuple2 (set1 (tuple2 (tuple2 a1 b1) b1)) b1)
  (Tuple2 (set1 (tuple2 (tuple2 a1 b1) b1)) b1 (t2tb27 x) (t2tb14 y))
  (t2tb625 r)) (and (mem19 x u) (mem2 y v)))))))

(declare-fun t2tb656 ((set (set (tuple21 (set (tuple21 (tuple21 a b) b))
  a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 (tuple21 a b) b)) a))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 (tuple2 a1 b1) b1)) a1))) (t2tb656 x))))

(declare-fun tb2t656 (uni) (set (set (tuple21 (set (tuple21 (tuple21 a b) b))
  a))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 (tuple21 a b) b)) a)))))
  (! (= (tb2t656 (t2tb656 i)) i) :pattern ((t2tb656 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 (tuple2 a1 b1) b1)) a1))) j)
     (= (t2tb656 (tb2t656 j)) j)) :pattern ((t2tb656 (tb2t656 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 (tuple21 a b) b)))) (v (set a))
  (r (set (tuple21 (set (tuple21 (tuple21 a b) b)) a))))
  (= (mem (set1 (tuple2 (set1 (tuple2 (tuple2 a1 b1) b1)) a1)) (t2tb627 r)
  (relation a1 (set1 (tuple2 (tuple2 a1 b1) b1)) (t2tb51 u) (t2tb1 v)))
  (forall ((x (set (tuple21 (tuple21 a b) b))) (y a))
  (=> (mem (tuple2 (set1 (tuple2 (tuple2 a1 b1) b1)) a1)
  (Tuple2 (set1 (tuple2 (tuple2 a1 b1) b1)) a1 (t2tb27 x) (t2tb2 y))
  (t2tb627 r)) (and (mem19 x u) (mem1 y v)))))))

;; mem_relation
  (assert
  (forall ((b2 ty))
  (forall ((u (set (set (tuple21 (tuple21 a b) b)))) (v uni) (r uni))
  (and
  (=> (mem (set1 (tuple2 (set1 (tuple2 (tuple2 a1 b1) b1)) b2)) r
  (relation b2 (set1 (tuple2 (tuple2 a1 b1) b1)) (t2tb51 u) v))
  (forall ((x (set (tuple21 (tuple21 a b) b))) (y uni))
  (=> (mem (tuple2 (set1 (tuple2 (tuple2 a1 b1) b1)) b2)
  (Tuple2 (set1 (tuple2 (tuple2 a1 b1) b1)) b2 (t2tb27 x) y) r)
  (and (mem19 x u) (mem b2 y v)))))
  (=>
  (forall ((x (set (tuple21 (tuple21 a b) b))) (y uni))
  (=> (sort b2 y)
  (=> (mem (tuple2 (set1 (tuple2 (tuple2 a1 b1) b1)) b2)
  (Tuple2 (set1 (tuple2 (tuple2 a1 b1) b1)) b2 (t2tb27 x) y) r)
  (and (mem19 x u) (mem b2 y v))))) (mem
  (set1 (tuple2 (set1 (tuple2 (tuple2 a1 b1) b1)) b2)) r
  (relation b2 (set1 (tuple2 (tuple2 a1 b1) b1)) (t2tb51 u) v)))))))

(declare-fun t2tb657 ((set (set (tuple21 (tuple21 (tuple21 a b) b)
  (set (tuple21 (tuple21 a b) b)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 (tuple21 a b) b)
  (set (tuple21 (tuple21 a b) b))))))) (sort
  (set1
  (set1
  (tuple2 (tuple2 (tuple2 a1 b1) b1) (set1 (tuple2 (tuple2 a1 b1) b1)))))
  (t2tb657 x))))

(declare-fun tb2t657 (uni) (set (set (tuple21 (tuple21 (tuple21 a b) b)
  (set (tuple21 (tuple21 a b) b))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 (tuple21 a b) b)
  (set (tuple21 (tuple21 a b) b)))))))
  (! (= (tb2t657 (t2tb657 i)) i) :pattern ((t2tb657 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (set1
     (tuple2 (tuple2 (tuple2 a1 b1) b1) (set1 (tuple2 (tuple2 a1 b1) b1)))))
     j) (= (t2tb657 (tb2t657 j)) j)) :pattern ((t2tb657 (tb2t657 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 (tuple21 a b) b)))
  (v (set (set (tuple21 (tuple21 a b) b))))
  (r (set (tuple21 (tuple21 (tuple21 a b) b) (set (tuple21 (tuple21 a b)
  b))))))
  (= (mem
  (set1
  (tuple2 (tuple2 (tuple2 a1 b1) b1) (set1 (tuple2 (tuple2 a1 b1) b1))))
  (t2tb629 r)
  (relation (set1 (tuple2 (tuple2 a1 b1) b1)) (tuple2 (tuple2 a1 b1) b1)
  (t2tb27 u) (t2tb51 v)))
  (forall ((x (tuple21 (tuple21 a b) b)) (y (set (tuple21 (tuple21 a b) b))))
  (=> (mem
  (tuple2 (tuple2 (tuple2 a1 b1) b1) (set1 (tuple2 (tuple2 a1 b1) b1)))
  (Tuple2 (tuple2 (tuple2 a1 b1) b1) (set1 (tuple2 (tuple2 a1 b1) b1))
  (t2tb28 x) (t2tb27 y)) (t2tb629 r)) (and (mem18 x u) (mem19 y v)))))))

(declare-fun t2tb658 ((set (set (tuple21 (tuple21 (tuple21 a b) b)
  (tuple21 (tuple21 a b) b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 (tuple21 a b) b)
  (tuple21 (tuple21 a b) b)))))) (sort
  (set1
  (set1 (tuple2 (tuple2 (tuple2 a1 b1) b1) (tuple2 (tuple2 a1 b1) b1))))
  (t2tb658 x))))

(declare-fun tb2t658 (uni) (set (set (tuple21 (tuple21 (tuple21 a b) b)
  (tuple21 (tuple21 a b) b)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 (tuple21 a b) b)
  (tuple21 (tuple21 a b) b))))))
  (! (= (tb2t658 (t2tb658 i)) i) :pattern ((t2tb658 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (set1 (tuple2 (tuple2 (tuple2 a1 b1) b1) (tuple2 (tuple2 a1 b1) b1))))
     j) (= (t2tb658 (tb2t658 j)) j)) :pattern ((t2tb658 (tb2t658 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 (tuple21 a b) b))) (v (set (tuple21 (tuple21 a b)
  b))) (r (set (tuple21 (tuple21 (tuple21 a b) b) (tuple21 (tuple21 a b)
  b)))))
  (= (mem
  (set1 (tuple2 (tuple2 (tuple2 a1 b1) b1) (tuple2 (tuple2 a1 b1) b1)))
  (t2tb631 r)
  (relation (tuple2 (tuple2 a1 b1) b1) (tuple2 (tuple2 a1 b1) b1) (t2tb27 u)
  (t2tb27 v)))
  (forall ((x (tuple21 (tuple21 a b) b)) (y (tuple21 (tuple21 a b) b)))
  (=> (mem (tuple2 (tuple2 (tuple2 a1 b1) b1) (tuple2 (tuple2 a1 b1) b1))
  (Tuple2 (tuple2 (tuple2 a1 b1) b1) (tuple2 (tuple2 a1 b1) b1) (t2tb28 x)
  (t2tb28 y)) (t2tb631 r)) (and (mem18 x u) (mem18 y v)))))))

(declare-fun t2tb659 ((set (set (tuple21 (tuple21 (tuple21 a b) b) (tuple21 a
  b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 (tuple21 a b) b) (tuple21 a b))))))
  (sort (set1 (set1 (tuple2 (tuple2 (tuple2 a1 b1) b1) (tuple2 a1 b1))))
  (t2tb659 x))))

(declare-fun tb2t659 (uni) (set (set (tuple21 (tuple21 (tuple21 a b) b)
  (tuple21 a b)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 (tuple21 a b) b) (tuple21 a b))))))
  (! (= (tb2t659 (t2tb659 i)) i) :pattern ((t2tb659 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (tuple2 (tuple2 a1 b1) b1) (tuple2 a1 b1)))) j)
     (= (t2tb659 (tb2t659 j)) j)) :pattern ((t2tb659 (tb2t659 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 (tuple21 a b) b))) (v (set (tuple21 a b)))
  (r (set (tuple21 (tuple21 (tuple21 a b) b) (tuple21 a b)))))
  (= (mem (set1 (tuple2 (tuple2 (tuple2 a1 b1) b1) (tuple2 a1 b1)))
  (t2tb633 r)
  (relation (tuple2 a1 b1) (tuple2 (tuple2 a1 b1) b1) (t2tb27 u) (t2tb11 v)))
  (forall ((x (tuple21 (tuple21 a b) b)) (y (tuple21 a b)))
  (=> (mem (tuple2 (tuple2 (tuple2 a1 b1) b1) (tuple2 a1 b1))
  (Tuple2 (tuple2 (tuple2 a1 b1) b1) (tuple2 a1 b1) (t2tb28 x) (t2tb13 y))
  (t2tb633 r)) (and (mem18 x u) (mem3 y v)))))))

(declare-fun t2tb660 ((set (set (tuple21 (tuple21 (tuple21 a b) b) b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 (tuple21 a b) b) b))))) (sort
  (set1 (set1 (tuple2 (tuple2 (tuple2 a1 b1) b1) b1))) (t2tb660 x))))

(declare-fun tb2t660 (uni) (set (set (tuple21 (tuple21 (tuple21 a b) b) b))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 (tuple21 a b) b) b)))))
  (! (= (tb2t660 (t2tb660 i)) i) :pattern ((t2tb660 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 (tuple2 a1 b1) b1) b1))) j)
     (= (t2tb660 (tb2t660 j)) j)) :pattern ((t2tb660 (tb2t660 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 (tuple21 a b) b))) (v (set b))
  (r (set (tuple21 (tuple21 (tuple21 a b) b) b))))
  (= (mem (set1 (tuple2 (tuple2 (tuple2 a1 b1) b1) b1)) (t2tb635 r)
  (relation b1 (tuple2 (tuple2 a1 b1) b1) (t2tb27 u) (t2tb12 v)))
  (forall ((x (tuple21 (tuple21 a b) b)) (y b))
  (=> (mem (tuple2 (tuple2 (tuple2 a1 b1) b1) b1)
  (Tuple2 (tuple2 (tuple2 a1 b1) b1) b1 (t2tb28 x) (t2tb14 y)) (t2tb635 r))
  (and (mem18 x u) (mem2 y v)))))))

(declare-fun t2tb661 ((set (set (tuple21 (tuple21 (tuple21 a b) b) a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 (tuple21 a b) b) a))))) (sort
  (set1 (set1 (tuple2 (tuple2 (tuple2 a1 b1) b1) a1))) (t2tb661 x))))

(declare-fun tb2t661 (uni) (set (set (tuple21 (tuple21 (tuple21 a b) b) a))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 (tuple21 a b) b) a)))))
  (! (= (tb2t661 (t2tb661 i)) i) :pattern ((t2tb661 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 (tuple2 a1 b1) b1) a1))) j)
     (= (t2tb661 (tb2t661 j)) j)) :pattern ((t2tb661 (tb2t661 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 (tuple21 a b) b))) (v (set a))
  (r (set (tuple21 (tuple21 (tuple21 a b) b) a))))
  (= (mem (set1 (tuple2 (tuple2 (tuple2 a1 b1) b1) a1)) (t2tb637 r)
  (relation a1 (tuple2 (tuple2 a1 b1) b1) (t2tb27 u) (t2tb1 v)))
  (forall ((x (tuple21 (tuple21 a b) b)) (y a))
  (=> (mem (tuple2 (tuple2 (tuple2 a1 b1) b1) a1)
  (Tuple2 (tuple2 (tuple2 a1 b1) b1) a1 (t2tb28 x) (t2tb2 y)) (t2tb637 r))
  (and (mem18 x u) (mem1 y v)))))))

;; mem_relation
  (assert
  (forall ((b2 ty))
  (forall ((u (set (tuple21 (tuple21 a b) b))) (v uni) (r uni))
  (and
  (=> (mem (set1 (tuple2 (tuple2 (tuple2 a1 b1) b1) b2)) r
  (relation b2 (tuple2 (tuple2 a1 b1) b1) (t2tb27 u) v))
  (forall ((x (tuple21 (tuple21 a b) b)) (y uni))
  (=> (mem (tuple2 (tuple2 (tuple2 a1 b1) b1) b2)
  (Tuple2 (tuple2 (tuple2 a1 b1) b1) b2 (t2tb28 x) y) r)
  (and (mem18 x u) (mem b2 y v)))))
  (=>
  (forall ((x (tuple21 (tuple21 a b) b)) (y uni))
  (=> (sort b2 y)
  (=> (mem (tuple2 (tuple2 (tuple2 a1 b1) b1) b2)
  (Tuple2 (tuple2 (tuple2 a1 b1) b1) b2 (t2tb28 x) y) r)
  (and (mem18 x u) (mem b2 y v))))) (mem
  (set1 (tuple2 (tuple2 (tuple2 a1 b1) b1) b2)) r
  (relation b2 (tuple2 (tuple2 a1 b1) b1) (t2tb27 u) v)))))))

(declare-fun t2tb662 ((set (set (tuple21 (tuple21 a b)
  (set (tuple21 (tuple21 a b) b)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a b) (set (tuple21 (tuple21 a b)
  b))))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 b1) (set1 (tuple2 (tuple2 a1 b1) b1)))))
  (t2tb662 x))))

(declare-fun tb2t662 (uni) (set (set (tuple21 (tuple21 a b)
  (set (tuple21 (tuple21 a b) b))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a b) (set (tuple21 (tuple21 a b)
  b))))))) (! (= (tb2t662 (t2tb662 i)) i) :pattern ((t2tb662 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (tuple2 a1 b1) (set1 (tuple2 (tuple2 a1 b1) b1)))))
     j) (= (t2tb662 (tb2t662 j)) j)) :pattern ((t2tb662 (tb2t662 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a b))) (v (set (set (tuple21 (tuple21 a b) b))))
  (r (set (tuple21 (tuple21 a b) (set (tuple21 (tuple21 a b) b))))))
  (= (mem (set1 (tuple2 (tuple2 a1 b1) (set1 (tuple2 (tuple2 a1 b1) b1))))
  (t2tb639 r)
  (relation (set1 (tuple2 (tuple2 a1 b1) b1)) (tuple2 a1 b1) (t2tb11 u)
  (t2tb51 v)))
  (forall ((x (tuple21 a b)) (y (set (tuple21 (tuple21 a b) b))))
  (=> (mem (tuple2 (tuple2 a1 b1) (set1 (tuple2 (tuple2 a1 b1) b1)))
  (Tuple2 (tuple2 a1 b1) (set1 (tuple2 (tuple2 a1 b1) b1)) (t2tb13 x)
  (t2tb27 y)) (t2tb639 r)) (and (mem3 x u) (mem19 y v)))))))

(declare-fun t2tb663 ((set (set (tuple21 (tuple21 a b) (tuple21 (tuple21 a b)
  b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a b) (tuple21 (tuple21 a b) b))))))
  (sort (set1 (set1 (tuple2 (tuple2 a1 b1) (tuple2 (tuple2 a1 b1) b1))))
  (t2tb663 x))))

(declare-fun tb2t663 (uni) (set (set (tuple21 (tuple21 a b)
  (tuple21 (tuple21 a b) b)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a b) (tuple21 (tuple21 a b) b))))))
  (! (= (tb2t663 (t2tb663 i)) i) :pattern ((t2tb663 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (tuple2 a1 b1) (tuple2 (tuple2 a1 b1) b1)))) j)
     (= (t2tb663 (tb2t663 j)) j)) :pattern ((t2tb663 (tb2t663 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a b))) (v (set (tuple21 (tuple21 a b) b)))
  (r (set (tuple21 (tuple21 a b) (tuple21 (tuple21 a b) b)))))
  (= (mem (set1 (tuple2 (tuple2 a1 b1) (tuple2 (tuple2 a1 b1) b1)))
  (t2tb641 r)
  (relation (tuple2 (tuple2 a1 b1) b1) (tuple2 a1 b1) (t2tb11 u) (t2tb27 v)))
  (forall ((x (tuple21 a b)) (y (tuple21 (tuple21 a b) b)))
  (=> (mem (tuple2 (tuple2 a1 b1) (tuple2 (tuple2 a1 b1) b1))
  (Tuple2 (tuple2 a1 b1) (tuple2 (tuple2 a1 b1) b1) (t2tb13 x) (t2tb28 y))
  (t2tb641 r)) (and (mem3 x u) (mem18 y v)))))))

(declare-fun t2tb50 ((set (set (tuple21 (tuple21 a b) (tuple21 a b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a b) (tuple21 a b)))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 b1) (tuple2 a1 b1)))) (t2tb50 x))))

(declare-fun tb2t50 (uni) (set (set (tuple21 (tuple21 a b) (tuple21 a b)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a b) (tuple21 a b))))))
  (! (= (tb2t50 (t2tb50 i)) i) :pattern ((t2tb50 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 b1) (tuple2 a1 b1)))) j)
     (= (t2tb50 (tb2t50 j)) j)) :pattern ((t2tb50 (tb2t50 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a b))) (v (set (tuple21 a b)))
  (r (set (tuple21 (tuple21 a b) (tuple21 a b)))))
  (= (mem (set1 (tuple2 (tuple2 a1 b1) (tuple2 a1 b1))) (t2tb25 r)
  (relation (tuple2 a1 b1) (tuple2 a1 b1) (t2tb11 u) (t2tb11 v)))
  (forall ((x (tuple21 a b)) (y (tuple21 a b)))
  (=> (mem (tuple2 (tuple2 a1 b1) (tuple2 a1 b1))
  (Tuple2 (tuple2 a1 b1) (tuple2 a1 b1) (t2tb13 x) (t2tb13 y)) (t2tb25 r))
  (and (mem3 x u) (mem3 y v)))))))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a b))) (v (set b)) (r (set (tuple21 (tuple21 a b)
  b))))
  (= (mem19 r (tb2t51 (relation b1 (tuple2 a1 b1) (t2tb11 u) (t2tb12 v))))
  (forall ((x (tuple21 a b)) (y b))
  (=> (mem18 (Tuple24 x y) r) (and (mem3 x u) (mem2 y v)))))))

(declare-fun t2tb52 ((set (set (tuple21 (tuple21 a b) a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a b) a))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 b1) a1))) (t2tb52 x))))

(declare-fun tb2t52 (uni) (set (set (tuple21 (tuple21 a b) a))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a b) a)))))
  (! (= (tb2t52 (t2tb52 i)) i) :pattern ((t2tb52 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 b1) a1))) j)
     (= (t2tb52 (tb2t52 j)) j)) :pattern ((t2tb52 (tb2t52 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a b))) (v (set a)) (r (set (tuple21 (tuple21 a b)
  a))))
  (= (mem (set1 (tuple2 (tuple2 a1 b1) a1)) (t2tb29 r)
  (relation a1 (tuple2 a1 b1) (t2tb11 u) (t2tb1 v)))
  (forall ((x (tuple21 a b)) (y a))
  (=> (mem (tuple2 (tuple2 a1 b1) a1)
  (Tuple2 (tuple2 a1 b1) a1 (t2tb13 x) (t2tb2 y)) (t2tb29 r))
  (and (mem3 x u) (mem1 y v)))))))

;; mem_relation
  (assert
  (forall ((b2 ty))
  (forall ((u (set (tuple21 a b))) (v uni) (r uni))
  (and
  (=> (mem (set1 (tuple2 (tuple2 a1 b1) b2)) r
  (relation b2 (tuple2 a1 b1) (t2tb11 u) v))
  (forall ((x (tuple21 a b)) (y uni))
  (=> (mem (tuple2 (tuple2 a1 b1) b2) (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) y)
  r) (and (mem3 x u) (mem b2 y v)))))
  (=>
  (forall ((x (tuple21 a b)) (y uni))
  (=> (sort b2 y)
  (=> (mem (tuple2 (tuple2 a1 b1) b2) (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) y)
  r) (and (mem3 x u) (mem b2 y v))))) (mem (set1 (tuple2 (tuple2 a1 b1) b2))
  r (relation b2 (tuple2 a1 b1) (t2tb11 u) v)))))))

(declare-fun t2tb664 ((set (set (tuple21 b (set (tuple21 (tuple21 a b)
  b)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 b (set (tuple21 (tuple21 a b) b))))))) (sort
  (set1 (set1 (tuple2 b1 (set1 (tuple2 (tuple2 a1 b1) b1))))) (t2tb664 x))))

(declare-fun tb2t664 (uni) (set (set (tuple21 b (set (tuple21 (tuple21 a b)
  b))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 b (set (tuple21 (tuple21 a b) b)))))))
  (! (= (tb2t664 (t2tb664 i)) i) :pattern ((t2tb664 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 b1 (set1 (tuple2 (tuple2 a1 b1) b1))))) j)
     (= (t2tb664 (tb2t664 j)) j)) :pattern ((t2tb664 (tb2t664 j))) )))

;; mem_relation
  (assert
  (forall ((u (set b)) (v (set (set (tuple21 (tuple21 a b) b))))
  (r (set (tuple21 b (set (tuple21 (tuple21 a b) b))))))
  (= (mem (set1 (tuple2 b1 (set1 (tuple2 (tuple2 a1 b1) b1)))) (t2tb643 r)
  (relation (set1 (tuple2 (tuple2 a1 b1) b1)) b1 (t2tb12 u) (t2tb51 v)))
  (forall ((x b) (y (set (tuple21 (tuple21 a b) b))))
  (=> (mem (tuple2 b1 (set1 (tuple2 (tuple2 a1 b1) b1)))
  (Tuple2 b1 (set1 (tuple2 (tuple2 a1 b1) b1)) (t2tb14 x) (t2tb27 y))
  (t2tb643 r)) (and (mem2 x u) (mem19 y v)))))))

(declare-fun t2tb665 ((set (set (tuple21 b (tuple21 (tuple21 a b) b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 b (tuple21 (tuple21 a b) b)))))) (sort
  (set1 (set1 (tuple2 b1 (tuple2 (tuple2 a1 b1) b1)))) (t2tb665 x))))

(declare-fun tb2t665 (uni) (set (set (tuple21 b (tuple21 (tuple21 a b) b)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 b (tuple21 (tuple21 a b) b))))))
  (! (= (tb2t665 (t2tb665 i)) i) :pattern ((t2tb665 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 b1 (tuple2 (tuple2 a1 b1) b1)))) j)
     (= (t2tb665 (tb2t665 j)) j)) :pattern ((t2tb665 (tb2t665 j))) )))

;; mem_relation
  (assert
  (forall ((u (set b)) (v (set (tuple21 (tuple21 a b) b))) (r (set (tuple21 b
  (tuple21 (tuple21 a b) b)))))
  (= (mem (set1 (tuple2 b1 (tuple2 (tuple2 a1 b1) b1))) (t2tb645 r)
  (relation (tuple2 (tuple2 a1 b1) b1) b1 (t2tb12 u) (t2tb27 v)))
  (forall ((x b) (y (tuple21 (tuple21 a b) b)))
  (=> (mem (tuple2 b1 (tuple2 (tuple2 a1 b1) b1))
  (Tuple2 b1 (tuple2 (tuple2 a1 b1) b1) (t2tb14 x) (t2tb28 y)) (t2tb645 r))
  (and (mem2 x u) (mem18 y v)))))))

(declare-fun t2tb54 ((set (set (tuple21 b (tuple21 a b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 b (tuple21 a b)))))) (sort
  (set1 (set1 (tuple2 b1 (tuple2 a1 b1)))) (t2tb54 x))))

(declare-fun tb2t54 (uni) (set (set (tuple21 b (tuple21 a b)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 b (tuple21 a b))))))
  (! (= (tb2t54 (t2tb54 i)) i) :pattern ((t2tb54 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 b1 (tuple2 a1 b1)))) j)
     (= (t2tb54 (tb2t54 j)) j)) :pattern ((t2tb54 (tb2t54 j))) )))

;; mem_relation
  (assert
  (forall ((u (set b)) (v (set (tuple21 a b))) (r (set (tuple21 b (tuple21 a
  b)))))
  (= (mem (set1 (tuple2 b1 (tuple2 a1 b1))) (t2tb34 r)
  (relation (tuple2 a1 b1) b1 (t2tb12 u) (t2tb11 v)))
  (forall ((x b) (y (tuple21 a b)))
  (=> (mem (tuple2 b1 (tuple2 a1 b1))
  (Tuple2 b1 (tuple2 a1 b1) (t2tb14 x) (t2tb13 y)) (t2tb34 r))
  (and (mem2 x u) (mem3 y v)))))))

(declare-fun t2tb55 ((set (set (tuple21 b b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 b b))))) (sort (set1 (set1 (tuple2 b1 b1)))
  (t2tb55 x))))

(declare-fun tb2t55 (uni) (set (set (tuple21 b b))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 b b)))))
  (! (= (tb2t55 (t2tb55 i)) i) :pattern ((t2tb55 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 b1 b1))) j) (= (t2tb55 (tb2t55 j)) j)) :pattern (
  (t2tb55 (tb2t55 j))) )))

;; mem_relation
  (assert
  (forall ((u (set b)) (v (set b)) (r (set (tuple21 b b))))
  (= (mem (set1 (tuple2 b1 b1)) (t2tb35 r)
  (relation b1 b1 (t2tb12 u) (t2tb12 v)))
  (forall ((x b) (y b))
  (=> (mem (tuple2 b1 b1) (Tuple2 b1 b1 (t2tb14 x) (t2tb14 y)) (t2tb35 r))
  (and (mem2 x u) (mem2 y v)))))))

(declare-fun t2tb56 ((set (set (tuple21 b a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 b a))))) (sort (set1 (set1 (tuple2 b1 a1)))
  (t2tb56 x))))

(declare-fun tb2t56 (uni) (set (set (tuple21 b a))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 b a)))))
  (! (= (tb2t56 (t2tb56 i)) i) :pattern ((t2tb56 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 b1 a1))) j) (= (t2tb56 (tb2t56 j)) j)) :pattern (
  (t2tb56 (tb2t56 j))) )))

;; mem_relation
  (assert
  (forall ((u (set b)) (v (set a)) (r (set (tuple21 b a))))
  (= (mem (set1 (tuple2 b1 a1)) (t2tb37 r)
  (relation a1 b1 (t2tb12 u) (t2tb1 v)))
  (forall ((x b) (y a))
  (=> (mem (tuple2 b1 a1) (Tuple2 b1 a1 (t2tb14 x) (t2tb2 y)) (t2tb37 r))
  (and (mem2 x u) (mem1 y v)))))))

;; mem_relation
  (assert
  (forall ((b2 ty))
  (forall ((u (set b)) (v uni) (r uni))
  (and
  (=> (mem (set1 (tuple2 b1 b2)) r (relation b2 b1 (t2tb12 u) v))
  (forall ((x b) (y uni))
  (=> (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) y) r)
  (and (mem2 x u) (mem b2 y v)))))
  (=>
  (forall ((x b) (y uni))
  (=> (sort b2 y)
  (=> (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) y) r)
  (and (mem2 x u) (mem b2 y v))))) (mem (set1 (tuple2 b1 b2)) r
  (relation b2 b1 (t2tb12 u) v)))))))

(declare-fun t2tb558 ((set (set (tuple21 (set a) (set b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set a) (set b)))))) (sort
  (set1 (set1 (tuple2 (set1 a1) (set1 b1)))) (t2tb558 x))))

(declare-fun tb2t558 (uni) (set (set (tuple21 (set a) (set b)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set a) (set b))))))
  (! (= (tb2t558 (t2tb558 i)) i) :pattern ((t2tb558 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 a1) (set1 b1)))) j)
     (= (t2tb558 (tb2t558 j)) j)) :pattern ((t2tb558 (tb2t558 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set a))) (v (set (set b))) (r (set (tuple21 (set a)
  (set b)))))
  (= (mem (set1 (tuple2 (set1 a1) (set1 b1))) (t2tb538 r)
  (relation (set1 b1) (set1 a1) (t2tb u) (t2tb44 v)))
  (forall ((x (set a)) (y (set b)))
  (=> (mem (tuple2 (set1 a1) (set1 b1)) (t2tb495 (Tuple23 x y)) (t2tb538 r))
  (and (mem (set1 a1) (t2tb1 x) (t2tb u)) (mem (set1 b1) (t2tb12 y)
  (t2tb44 v))))))))

(declare-fun t2tb666 ((set (set (tuple21 a (set (tuple21 (tuple21 a b)
  b)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 a (set (tuple21 (tuple21 a b) b))))))) (sort
  (set1 (set1 (tuple2 a1 (set1 (tuple2 (tuple2 a1 b1) b1))))) (t2tb666 x))))

(declare-fun tb2t666 (uni) (set (set (tuple21 a (set (tuple21 (tuple21 a b)
  b))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 a (set (tuple21 (tuple21 a b) b)))))))
  (! (= (tb2t666 (t2tb666 i)) i) :pattern ((t2tb666 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 a1 (set1 (tuple2 (tuple2 a1 b1) b1))))) j)
     (= (t2tb666 (tb2t666 j)) j)) :pattern ((t2tb666 (tb2t666 j))) )))

;; mem_relation
  (assert
  (forall ((u (set a)) (v (set (set (tuple21 (tuple21 a b) b))))
  (r (set (tuple21 a (set (tuple21 (tuple21 a b) b))))))
  (= (mem (set1 (tuple2 a1 (set1 (tuple2 (tuple2 a1 b1) b1)))) (t2tb647 r)
  (relation (set1 (tuple2 (tuple2 a1 b1) b1)) a1 (t2tb1 u) (t2tb51 v)))
  (forall ((x a) (y (set (tuple21 (tuple21 a b) b))))
  (=> (mem (tuple2 a1 (set1 (tuple2 (tuple2 a1 b1) b1)))
  (Tuple2 a1 (set1 (tuple2 (tuple2 a1 b1) b1)) (t2tb2 x) (t2tb27 y))
  (t2tb647 r)) (and (mem1 x u) (mem19 y v)))))))

(declare-fun t2tb667 ((set (set (tuple21 a (tuple21 (tuple21 a b) b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 a (tuple21 (tuple21 a b) b)))))) (sort
  (set1 (set1 (tuple2 a1 (tuple2 (tuple2 a1 b1) b1)))) (t2tb667 x))))

(declare-fun tb2t667 (uni) (set (set (tuple21 a (tuple21 (tuple21 a b) b)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 a (tuple21 (tuple21 a b) b))))))
  (! (= (tb2t667 (t2tb667 i)) i) :pattern ((t2tb667 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 a1 (tuple2 (tuple2 a1 b1) b1)))) j)
     (= (t2tb667 (tb2t667 j)) j)) :pattern ((t2tb667 (tb2t667 j))) )))

;; mem_relation
  (assert
  (forall ((u (set a)) (v (set (tuple21 (tuple21 a b) b))) (r (set (tuple21 a
  (tuple21 (tuple21 a b) b)))))
  (= (mem (set1 (tuple2 a1 (tuple2 (tuple2 a1 b1) b1))) (t2tb649 r)
  (relation (tuple2 (tuple2 a1 b1) b1) a1 (t2tb1 u) (t2tb27 v)))
  (forall ((x a) (y (tuple21 (tuple21 a b) b)))
  (=> (mem (tuple2 a1 (tuple2 (tuple2 a1 b1) b1))
  (Tuple2 a1 (tuple2 (tuple2 a1 b1) b1) (t2tb2 x) (t2tb28 y)) (t2tb649 r))
  (and (mem1 x u) (mem18 y v)))))))

(declare-fun t2tb58 ((set (set (tuple21 a (tuple21 a b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 a (tuple21 a b)))))) (sort
  (set1 (set1 (tuple2 a1 (tuple2 a1 b1)))) (t2tb58 x))))

(declare-fun tb2t58 (uni) (set (set (tuple21 a (tuple21 a b)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 a (tuple21 a b))))))
  (! (= (tb2t58 (t2tb58 i)) i) :pattern ((t2tb58 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 a1 (tuple2 a1 b1)))) j)
     (= (t2tb58 (tb2t58 j)) j)) :pattern ((t2tb58 (tb2t58 j))) )))

;; mem_relation
  (assert
  (forall ((u (set a)) (v (set (tuple21 a b))) (r (set (tuple21 a (tuple21 a
  b)))))
  (= (mem (set1 (tuple2 a1 (tuple2 a1 b1))) (t2tb41 r)
  (relation (tuple2 a1 b1) a1 (t2tb1 u) (t2tb11 v)))
  (forall ((x a) (y (tuple21 a b)))
  (=> (mem (tuple2 a1 (tuple2 a1 b1))
  (Tuple2 a1 (tuple2 a1 b1) (t2tb2 x) (t2tb13 y)) (t2tb41 r))
  (and (mem1 x u) (mem3 y v)))))))

;; mem_relation
  (assert
  (forall ((u (set a)) (v (set b)) (r (set (tuple21 a b))))
  (= (mem (set1 (tuple2 a1 b1)) (t2tb11 r)
  (relation b1 a1 (t2tb1 u) (t2tb12 v)))
  (forall ((x a) (y b))
  (=> (mem3 (Tuple21 x y) r) (and (mem1 x u) (mem2 y v)))))))

(declare-fun t2tb3 ((set (set (tuple21 a a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 a a))))) (sort (set1 (set1 (tuple2 a1 a1)))
  (t2tb3 x))))

(declare-fun tb2t3 (uni) (set (set (tuple21 a a))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 a a)))))
  (! (= (tb2t3 (t2tb3 i)) i) :pattern ((t2tb3 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 a1 a1))) j) (= (t2tb3 (tb2t3 j)) j)) :pattern (
  (t2tb3 (tb2t3 j))) )))

;; mem_relation
  (assert
  (forall ((u (set a)) (v (set a)) (r (set (tuple21 a a))))
  (= (mem (set1 (tuple2 a1 a1)) (t2tb4 r)
  (relation a1 a1 (t2tb1 u) (t2tb1 v)))
  (forall ((x a) (y a))
  (=> (mem (tuple2 a1 a1) (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y)) (t2tb4 r))
  (and (mem1 x u) (mem1 y v)))))))

;; mem_relation
  (assert
  (forall ((b2 ty))
  (forall ((u (set a)) (v uni) (r uni))
  (and
  (=> (mem (set1 (tuple2 a1 b2)) r (relation b2 a1 (t2tb1 u) v))
  (forall ((x a) (y uni))
  (=> (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) y) r)
  (and (mem1 x u) (mem b2 y v)))))
  (=>
  (forall ((x a) (y uni))
  (=> (sort b2 y)
  (=> (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) y) r)
  (and (mem1 x u) (mem b2 y v))))) (mem (set1 (tuple2 a1 b2)) r
  (relation b2 a1 (t2tb1 u) v)))))))

;; mem_relation
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((u uni) (v uni) (r uni))
  (and
  (=> (mem (set1 (tuple2 a2 b2)) r (relation b2 a2 u v))
  (forall ((x uni) (y uni))
  (=> (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) r)
  (and (mem a2 x u) (mem b2 y v)))))
  (=>
  (forall ((x uni) (y uni))
  (=> (sort a2 x)
  (=> (sort b2 y)
  (=> (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) r)
  (and (mem a2 x u) (mem b2 y v)))))) (mem (set1 (tuple2 a2 b2)) r
  (relation b2 a2 u v)))))))

(declare-fun inverse (ty ty uni) uni)

;; inverse_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni)) (sort (set1 (tuple2 b2 a2)) (inverse b2 a2 x)))))

;; mem_inverse
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) b))) (x b) (y (tuple21 a b)))
  (= (mem (tuple2 b1 (tuple2 a1 b1))
  (Tuple2 b1 (tuple2 a1 b1) (t2tb14 x) (t2tb13 y))
  (inverse b1 (tuple2 a1 b1) (t2tb27 p))) (mem18 (Tuple24 y x) p))))

(declare-fun t2tb561 ((set (tuple21 (set b) (set a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set b) (set a))))) (sort
  (set1 (tuple2 (set1 b1) (set1 a1))) (t2tb561 x))))

(declare-fun tb2t561 (uni) (set (tuple21 (set b) (set a))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set b) (set a)))))
  (! (= (tb2t561 (t2tb561 i)) i) :pattern ((t2tb561 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 b1) (set1 a1))) j)
     (= (t2tb561 (tb2t561 j)) j)) :pattern ((t2tb561 (tb2t561 j))) )))

(declare-fun t2tb562 ((tuple21 (set b) (set a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set b) (set a)))) (sort (tuple2 (set1 b1) (set1 a1))
  (t2tb562 x))))

(declare-fun tb2t562 (uni) (tuple21 (set b) (set a)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set b) (set a))))
  (! (= (tb2t562 (t2tb562 i)) i) :pattern ((t2tb562 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 b1) (set1 a1)) j) (= (t2tb562 (tb2t562 j)) j)) :pattern (
  (t2tb562 (tb2t562 j))) )))

;; mem_inverse
  (assert
  (forall ((p (set (tuple21 (set b) (set a)))) (x (set a)) (y (set b)))
  (= (mem (tuple2 (set1 a1) (set1 b1)) (t2tb495 (Tuple23 x y))
  (inverse (set1 a1) (set1 b1) (t2tb561 p))) (mem
  (tuple2 (set1 b1) (set1 a1))
  (Tuple2 (set1 b1) (set1 a1) (t2tb12 y) (t2tb1 x)) (t2tb561 p)))))

;; mem_inverse
  (assert
  (forall ((p (set (tuple21 b (tuple21 a b)))) (x (tuple21 a b)) (y b))
  (= (mem18 (Tuple24 x y) (tb2t27 (inverse (tuple2 a1 b1) b1 (t2tb34 p))))
  (mem (tuple2 b1 (tuple2 a1 b1))
  (Tuple2 b1 (tuple2 a1 b1) (t2tb14 y) (t2tb13 x)) (t2tb34 p)))))

;; mem_inverse
  (assert
  (forall ((p (set (tuple21 b a))) (x a) (y b))
  (= (mem3 (Tuple21 x y) (tb2t11 (inverse a1 b1 (t2tb37 p)))) (mem
  (tuple2 b1 a1) (Tuple2 b1 a1 (t2tb14 y) (t2tb2 x)) (t2tb37 p)))))

;; mem_inverse
  (assert
  (forall ((p (set (tuple21 (set a) (set b)))) (x (set b)) (y (set a)))
  (= (mem (tuple2 (set1 b1) (set1 a1))
  (Tuple2 (set1 b1) (set1 a1) (t2tb12 x) (t2tb1 y))
  (inverse (set1 b1) (set1 a1) (t2tb538 p))) (mem
  (tuple2 (set1 a1) (set1 b1)) (t2tb495 (Tuple23 y x)) (t2tb538 p)))))

;; mem_inverse
  (assert
  (forall ((p (set (tuple21 a b))) (x b) (y a))
  (= (mem (tuple2 b1 a1) (Tuple2 b1 a1 (t2tb14 x) (t2tb2 y))
  (inverse b1 a1 (t2tb11 p))) (mem3 (Tuple21 y x) p))))

;; mem_inverse
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((p uni) (x uni) (y uni))
  (= (mem (tuple2 b2 a2) (Tuple2 b2 a2 x y) (inverse b2 a2 p)) (mem
  (tuple2 a2 b2) (Tuple2 a2 b2 y x) p)))))

(declare-fun dom (ty ty uni) uni)

;; dom_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni)) (sort (set1 a2) (dom b2 a2 x)))))

;; mem_dom
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (x (set (tuple21 (tuple21 a b) b))))
  (and
  (=> (mem19 x (tb2t51 (dom b2 (set1 (tuple2 (tuple2 a1 b1) b1)) p)))
  (exists ((b3 uni))
  (and (sort b2 b3) (mem (tuple2 (set1 (tuple2 (tuple2 a1 b1) b1)) b2)
  (Tuple2 (set1 (tuple2 (tuple2 a1 b1) b1)) b2 (t2tb27 x) b3) p))))
  (=>
  (exists ((b3 uni)) (mem (tuple2 (set1 (tuple2 (tuple2 a1 b1) b1)) b2)
  (Tuple2 (set1 (tuple2 (tuple2 a1 b1) b1)) b2 (t2tb27 x) b3) p)) (mem19 x
  (tb2t51 (dom b2 (set1 (tuple2 (tuple2 a1 b1) b1)) p))))))))

;; mem_dom
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (x (tuple21 (tuple21 a b) b)))
  (and
  (=> (mem18 x (tb2t27 (dom b2 (tuple2 (tuple2 a1 b1) b1) p)))
  (exists ((b3 uni))
  (and (sort b2 b3) (mem (tuple2 (tuple2 (tuple2 a1 b1) b1) b2)
  (Tuple2 (tuple2 (tuple2 a1 b1) b1) b2 (t2tb28 x) b3) p))))
  (=>
  (exists ((b3 uni)) (mem (tuple2 (tuple2 (tuple2 a1 b1) b1) b2)
  (Tuple2 (tuple2 (tuple2 a1 b1) b1) b2 (t2tb28 x) b3) p)) (mem18 x
  (tb2t27 (dom b2 (tuple2 (tuple2 a1 b1) b1) p))))))))

;; mem_dom
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) b))) (x (tuple21 a b)))
  (= (mem3 x (tb2t11 (dom b1 (tuple2 a1 b1) (t2tb27 p))))
  (exists ((b2 b)) (mem18 (Tuple24 x b2) p)))))

;; mem_dom
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (x (tuple21 a b)))
  (and
  (=> (mem3 x (tb2t11 (dom b2 (tuple2 a1 b1) p)))
  (exists ((b3 uni))
  (and (sort b2 b3) (mem (tuple2 (tuple2 a1 b1) b2)
  (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) b3) p))))
  (=>
  (exists ((b3 uni)) (mem (tuple2 (tuple2 a1 b1) b2)
  (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) b3) p)) (mem3 x
  (tb2t11 (dom b2 (tuple2 a1 b1) p))))))))

;; mem_dom
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (x b))
  (and
  (=> (mem2 x (tb2t12 (dom b2 b1 p)))
  (exists ((b3 uni))
  (and (sort b2 b3) (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) b3) p))))
  (=> (exists ((b3 uni)) (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) b3) p))
  (mem2 x (tb2t12 (dom b2 b1 p))))))))

;; mem_dom
  (assert
  (forall ((p (set (tuple21 (set a) (set b)))) (x (set a)))
  (= (mem (set1 a1) (t2tb1 x) (dom (set1 b1) (set1 a1) (t2tb538 p)))
  (exists ((b2 (set b))) (mem (tuple2 (set1 a1) (set1 b1))
  (t2tb495 (Tuple23 x b2)) (t2tb538 p))))))

;; mem_dom
  (assert
  (forall ((p (set (tuple21 a b))) (x a))
  (= (mem1 x (tb2t1 (dom b1 a1 (t2tb11 p))))
  (exists ((b2 b)) (mem3 (Tuple21 x b2) p)))))

;; mem_dom
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (x a))
  (and
  (=> (mem1 x (tb2t1 (dom b2 a1 p)))
  (exists ((b3 uni))
  (and (sort b2 b3) (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) b3) p))))
  (=> (exists ((b3 uni)) (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) b3) p))
  (mem1 x (tb2t1 (dom b2 a1 p))))))))

;; mem_dom
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((p uni) (x uni))
  (and
  (=> (mem a2 x (dom b2 a2 p))
  (exists ((b3 uni))
  (and (sort b2 b3) (mem (tuple2 a2 b2) (Tuple2 a2 b2 x b3) p))))
  (=> (exists ((b3 uni)) (mem (tuple2 a2 b2) (Tuple2 a2 b2 x b3) p)) (mem a2
  x (dom b2 a2 p)))))))

(declare-fun ran (ty ty uni) uni)

;; ran_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni)) (sort (set1 b2) (ran b2 a2 x)))))

;; mem_ran
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (x (set (tuple21 (tuple21 a b) b))))
  (and
  (=> (mem19 x (tb2t51 (ran (set1 (tuple2 (tuple2 a1 b1) b1)) a2 p)))
  (exists ((a3 uni))
  (and (sort a2 a3) (mem (tuple2 a2 (set1 (tuple2 (tuple2 a1 b1) b1)))
  (Tuple2 a2 (set1 (tuple2 (tuple2 a1 b1) b1)) a3 (t2tb27 x)) p))))
  (=>
  (exists ((a3 uni)) (mem (tuple2 a2 (set1 (tuple2 (tuple2 a1 b1) b1)))
  (Tuple2 a2 (set1 (tuple2 (tuple2 a1 b1) b1)) a3 (t2tb27 x)) p)) (mem19 x
  (tb2t51 (ran (set1 (tuple2 (tuple2 a1 b1) b1)) a2 p))))))))

;; mem_ran
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (x (tuple21 (tuple21 a b) b)))
  (and
  (=> (mem18 x (tb2t27 (ran (tuple2 (tuple2 a1 b1) b1) a2 p)))
  (exists ((a3 uni))
  (and (sort a2 a3) (mem (tuple2 a2 (tuple2 (tuple2 a1 b1) b1))
  (Tuple2 a2 (tuple2 (tuple2 a1 b1) b1) a3 (t2tb28 x)) p))))
  (=>
  (exists ((a3 uni)) (mem (tuple2 a2 (tuple2 (tuple2 a1 b1) b1))
  (Tuple2 a2 (tuple2 (tuple2 a1 b1) b1) a3 (t2tb28 x)) p)) (mem18 x
  (tb2t27 (ran (tuple2 (tuple2 a1 b1) b1) a2 p))))))))

;; mem_ran
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (x (tuple21 a b)))
  (and
  (=> (mem3 x (tb2t11 (ran (tuple2 a1 b1) a2 p)))
  (exists ((a3 uni))
  (and (sort a2 a3) (mem (tuple2 a2 (tuple2 a1 b1))
  (Tuple2 a2 (tuple2 a1 b1) a3 (t2tb13 x)) p))))
  (=>
  (exists ((a3 uni)) (mem (tuple2 a2 (tuple2 a1 b1))
  (Tuple2 a2 (tuple2 a1 b1) a3 (t2tb13 x)) p)) (mem3 x
  (tb2t11 (ran (tuple2 a1 b1) a2 p))))))))

;; mem_ran
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (x b))
  (and
  (=> (mem2 x (tb2t12 (ran b1 a2 p)))
  (exists ((a3 uni))
  (and (sort a2 a3) (mem (tuple2 a2 b1) (Tuple2 a2 b1 a3 (t2tb14 x)) p))))
  (=> (exists ((a3 uni)) (mem (tuple2 a2 b1) (Tuple2 a2 b1 a3 (t2tb14 x)) p))
  (mem2 x (tb2t12 (ran b1 a2 p))))))))

;; mem_ran
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (x a))
  (and
  (=> (mem1 x (tb2t1 (ran a1 a2 p)))
  (exists ((a3 uni))
  (and (sort a2 a3) (mem (tuple2 a2 a1) (Tuple2 a2 a1 a3 (t2tb2 x)) p))))
  (=> (exists ((a3 uni)) (mem (tuple2 a2 a1) (Tuple2 a2 a1 a3 (t2tb2 x)) p))
  (mem1 x (tb2t1 (ran a1 a2 p))))))))

;; mem_ran
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) b))) (x b))
  (= (mem2 x (tb2t12 (ran b1 (tuple2 a1 b1) (t2tb27 p))))
  (exists ((a2 (tuple21 a b))) (mem18 (Tuple24 a2 x) p)))))

;; mem_ran
  (assert
  (forall ((p (set (tuple21 (set a) (set b)))) (x (set b)))
  (= (mem (set1 b1) (t2tb12 x) (ran (set1 b1) (set1 a1) (t2tb538 p)))
  (exists ((a2 (set a))) (mem (tuple2 (set1 a1) (set1 b1))
  (t2tb495 (Tuple23 a2 x)) (t2tb538 p))))))

;; mem_ran
  (assert
  (forall ((p (set (tuple21 a b))) (x b))
  (= (mem2 x (tb2t12 (ran b1 a1 (t2tb11 p))))
  (exists ((a2 a)) (mem3 (Tuple21 a2 x) p)))))

;; mem_ran
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((p uni) (x uni))
  (and
  (=> (mem b2 x (ran b2 a2 p))
  (exists ((a3 uni))
  (and (sort a2 a3) (mem (tuple2 a2 b2) (Tuple2 a2 b2 a3 x) p))))
  (=> (exists ((a3 uni)) (mem (tuple2 a2 b2) (Tuple2 a2 b2 a3 x) p)) (mem b2
  x (ran b2 a2 p)))))))

(declare-fun semicolon (ty ty ty uni uni) uni)

;; semicolon_sort
  (assert
  (forall ((a2 ty) (b2 ty) (c2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (tuple2 a2 c2))
  (semicolon c2 b2 a2 x x1)))))

;; mem_semicolon
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (q (set (tuple21 (tuple21 a b) b))) (x uni) (y b))
  (= (mem (tuple2 a2 b1) (Tuple2 a2 b1 x (t2tb14 y))
  (semicolon b1 (tuple2 a1 b1) a2 p (t2tb27 q)))
  (exists ((b2 (tuple21 a b)))
  (and (mem (tuple2 a2 (tuple2 a1 b1))
  (Tuple2 a2 (tuple2 a1 b1) x (t2tb13 b2)) p) (mem18 (Tuple24 b2 y) q)))))))

;; mem_semicolon
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (q (set (tuple21 (set a) (set b)))) (x uni) (y (set b)))
  (= (mem (tuple2 a2 (set1 b1)) (Tuple2 a2 (set1 b1) x (t2tb12 y))
  (semicolon (set1 b1) (set1 a1) a2 p (t2tb538 q)))
  (exists ((b2 (set a)))
  (and (mem (tuple2 a2 (set1 a1)) (Tuple2 a2 (set1 a1) x (t2tb1 b2)) p) (mem
  (tuple2 (set1 a1) (set1 b1)) (t2tb495 (Tuple23 b2 y)) (t2tb538 q))))))))

;; mem_semicolon
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (q (set (tuple21 a b))) (x uni) (y b))
  (= (mem (tuple2 a2 b1) (Tuple2 a2 b1 x (t2tb14 y))
  (semicolon b1 a1 a2 p (t2tb11 q)))
  (exists ((b2 a))
  (and (mem (tuple2 a2 a1) (Tuple2 a2 a1 x (t2tb2 b2)) p) (mem3
  (Tuple21 b2 y) q)))))))

;; mem_semicolon
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (q uni) (x (tuple21 a b)) (y b))
  (and
  (=> (mem18 (Tuple24 x y) (tb2t27 (semicolon b1 b2 (tuple2 a1 b1) p q)))
  (exists ((b3 uni))
  (and (sort b2 b3)
  (and (mem (tuple2 (tuple2 a1 b1) b2)
  (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) b3) p) (mem (tuple2 b2 b1)
  (Tuple2 b2 b1 b3 (t2tb14 y)) q)))))
  (=>
  (exists ((b3 uni))
  (and (mem (tuple2 (tuple2 a1 b1) b2)
  (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) b3) p) (mem (tuple2 b2 b1)
  (Tuple2 b2 b1 b3 (t2tb14 y)) q))) (mem18 (Tuple24 x y)
  (tb2t27 (semicolon b1 b2 (tuple2 a1 b1) p q))))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) (tuple21 a b))))
  (q (set (tuple21 (tuple21 a b) b))) (x (tuple21 a b)) (y b))
  (= (mem18 (Tuple24 x y)
  (tb2t27 (semicolon b1 (tuple2 a1 b1) (tuple2 a1 b1) (t2tb25 p) (t2tb27 q))))
  (exists ((b2 (tuple21 a b)))
  (and (mem (tuple2 (tuple2 a1 b1) (tuple2 a1 b1))
  (Tuple2 (tuple2 a1 b1) (tuple2 a1 b1) (t2tb13 x) (t2tb13 b2)) (t2tb25 p))
  (mem18 (Tuple24 b2 y) q))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) b))) (q (set (tuple21 b b)))
  (x (tuple21 a b)) (y b))
  (= (mem18 (Tuple24 x y)
  (tb2t27 (semicolon b1 b1 (tuple2 a1 b1) (t2tb27 p) (t2tb35 q))))
  (exists ((b2 b))
  (and (mem18 (Tuple24 x b2) p) (mem (tuple2 b1 b1)
  (Tuple2 b1 b1 (t2tb14 b2) (t2tb14 y)) (t2tb35 q)))))))

;; mem_semicolon
  (assert
  (forall ((c2 ty))
  (forall ((p (set (tuple21 (tuple21 a b) b))) (q uni) (x (tuple21 a b))
  (y uni))
  (= (mem (tuple2 (tuple2 a1 b1) c2) (Tuple2 (tuple2 a1 b1) c2 (t2tb13 x) y)
  (semicolon c2 b1 (tuple2 a1 b1) (t2tb27 p) q))
  (exists ((b2 b))
  (and (mem18 (Tuple24 x b2) p) (mem (tuple2 b1 c2)
  (Tuple2 b1 c2 (t2tb14 b2) y) q)))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) a))) (q (set (tuple21 a b)))
  (x (tuple21 a b)) (y b))
  (= (mem18 (Tuple24 x y)
  (tb2t27 (semicolon b1 a1 (tuple2 a1 b1) (t2tb29 p) (t2tb11 q))))
  (exists ((b2 a))
  (and (mem (tuple2 (tuple2 a1 b1) a1)
  (Tuple2 (tuple2 a1 b1) a1 (t2tb13 x) (t2tb2 b2)) (t2tb29 p)) (mem3
  (Tuple21 b2 y) q))))))

;; mem_semicolon
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (q uni) (x (set a)) (y (set b)))
  (and
  (=> (mem (tuple2 (set1 a1) (set1 b1)) (t2tb495 (Tuple23 x y))
  (semicolon (set1 b1) b2 (set1 a1) p q))
  (exists ((b3 uni))
  (and (sort b2 b3)
  (and (mem (tuple2 (set1 a1) b2) (Tuple2 (set1 a1) b2 (t2tb1 x) b3) p) (mem
  (tuple2 b2 (set1 b1)) (Tuple2 b2 (set1 b1) b3 (t2tb12 y)) q)))))
  (=>
  (exists ((b3 uni))
  (and (mem (tuple2 (set1 a1) b2) (Tuple2 (set1 a1) b2 (t2tb1 x) b3) p) (mem
  (tuple2 b2 (set1 b1)) (Tuple2 b2 (set1 b1) b3 (t2tb12 y)) q))) (mem
  (tuple2 (set1 a1) (set1 b1)) (t2tb495 (Tuple23 x y))
  (semicolon (set1 b1) b2 (set1 a1) p q)))))))

(declare-fun t2tb563 ((set (tuple21 (set b) (set b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set b) (set b))))) (sort
  (set1 (tuple2 (set1 b1) (set1 b1))) (t2tb563 x))))

(declare-fun tb2t563 (uni) (set (tuple21 (set b) (set b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set b) (set b)))))
  (! (= (tb2t563 (t2tb563 i)) i) :pattern ((t2tb563 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 b1) (set1 b1))) j)
     (= (t2tb563 (tb2t563 j)) j)) :pattern ((t2tb563 (tb2t563 j))) )))

(declare-fun t2tb564 ((tuple21 (set b) (set b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set b) (set b)))) (sort (tuple2 (set1 b1) (set1 b1))
  (t2tb564 x))))

(declare-fun tb2t564 (uni) (tuple21 (set b) (set b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set b) (set b))))
  (! (= (tb2t564 (t2tb564 i)) i) :pattern ((t2tb564 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 b1) (set1 b1)) j) (= (t2tb564 (tb2t564 j)) j)) :pattern (
  (t2tb564 (tb2t564 j))) )))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 (set a) (set b)))) (q (set (tuple21 (set b)
  (set b)))) (x (set a)) (y (set b)))
  (= (mem (tuple2 (set1 a1) (set1 b1)) (t2tb495 (Tuple23 x y))
  (semicolon (set1 b1) (set1 b1) (set1 a1) (t2tb538 p) (t2tb563 q)))
  (exists ((b2 (set b)))
  (and (mem (tuple2 (set1 a1) (set1 b1)) (t2tb495 (Tuple23 x b2))
  (t2tb538 p)) (mem (tuple2 (set1 b1) (set1 b1))
  (Tuple2 (set1 b1) (set1 b1) (t2tb12 b2) (t2tb12 y)) (t2tb563 q)))))))

;; mem_semicolon
  (assert
  (forall ((c2 ty))
  (forall ((p (set (tuple21 (set a) (set b)))) (q uni) (x (set a)) (y uni))
  (= (mem (tuple2 (set1 a1) c2) (Tuple2 (set1 a1) c2 (t2tb1 x) y)
  (semicolon c2 (set1 b1) (set1 a1) (t2tb538 p) q))
  (exists ((b2 (set b)))
  (and (mem (tuple2 (set1 a1) (set1 b1)) (t2tb495 (Tuple23 x b2))
  (t2tb538 p)) (mem (tuple2 (set1 b1) c2) (Tuple2 (set1 b1) c2 (t2tb12 b2) y)
  q)))))))

(declare-fun t2tb565 ((set (tuple21 (set a) (set a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set a) (set a))))) (sort
  (set1 (tuple2 (set1 a1) (set1 a1))) (t2tb565 x))))

(declare-fun tb2t565 (uni) (set (tuple21 (set a) (set a))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set a) (set a)))))
  (! (= (tb2t565 (t2tb565 i)) i) :pattern ((t2tb565 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 a1) (set1 a1))) j)
     (= (t2tb565 (tb2t565 j)) j)) :pattern ((t2tb565 (tb2t565 j))) )))

(declare-fun t2tb566 ((tuple21 (set a) (set a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set a) (set a)))) (sort (tuple2 (set1 a1) (set1 a1))
  (t2tb566 x))))

(declare-fun tb2t566 (uni) (tuple21 (set a) (set a)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set a) (set a))))
  (! (= (tb2t566 (t2tb566 i)) i) :pattern ((t2tb566 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 a1) (set1 a1)) j) (= (t2tb566 (tb2t566 j)) j)) :pattern (
  (t2tb566 (tb2t566 j))) )))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 (set a) (set a)))) (q (set (tuple21 (set a)
  (set b)))) (x (set a)) (y (set b)))
  (= (mem (tuple2 (set1 a1) (set1 b1)) (t2tb495 (Tuple23 x y))
  (semicolon (set1 b1) (set1 a1) (set1 a1) (t2tb565 p) (t2tb538 q)))
  (exists ((b2 (set a)))
  (and (mem (tuple2 (set1 a1) (set1 a1))
  (Tuple2 (set1 a1) (set1 a1) (t2tb1 x) (t2tb1 b2)) (t2tb565 p)) (mem
  (tuple2 (set1 a1) (set1 b1)) (t2tb495 (Tuple23 b2 y)) (t2tb538 q)))))))

;; mem_semicolon
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (q uni) (x a) (y b))
  (and
  (=> (mem3 (Tuple21 x y) (tb2t11 (semicolon b1 b2 a1 p q)))
  (exists ((b3 uni))
  (and (sort b2 b3)
  (and (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) b3) p) (mem (tuple2 b2 b1)
  (Tuple2 b2 b1 b3 (t2tb14 y)) q)))))
  (=>
  (exists ((b3 uni))
  (and (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) b3) p) (mem (tuple2 b2 b1)
  (Tuple2 b2 b1 b3 (t2tb14 y)) q))) (mem3 (Tuple21 x y)
  (tb2t11 (semicolon b1 b2 a1 p q))))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 a (tuple21 a b)))) (q (set (tuple21 (tuple21 a b)
  b))) (x a) (y b))
  (= (mem3 (Tuple21 x y)
  (tb2t11 (semicolon b1 (tuple2 a1 b1) a1 (t2tb41 p) (t2tb27 q))))
  (exists ((b2 (tuple21 a b)))
  (and (mem (tuple2 a1 (tuple2 a1 b1))
  (Tuple2 a1 (tuple2 a1 b1) (t2tb2 x) (t2tb13 b2)) (t2tb41 p)) (mem18
  (Tuple24 b2 y) q))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 a b))) (q (set (tuple21 b b))) (x a) (y b))
  (= (mem3 (Tuple21 x y) (tb2t11 (semicolon b1 b1 a1 (t2tb11 p) (t2tb35 q))))
  (exists ((b2 b))
  (and (mem3 (Tuple21 x b2) p) (mem (tuple2 b1 b1)
  (Tuple2 b1 b1 (t2tb14 b2) (t2tb14 y)) (t2tb35 q)))))))

;; mem_semicolon
  (assert
  (forall ((c2 ty))
  (forall ((p (set (tuple21 a b))) (q uni) (x a) (y uni))
  (= (mem (tuple2 a1 c2) (Tuple2 a1 c2 (t2tb2 x) y)
  (semicolon c2 b1 a1 (t2tb11 p) q))
  (exists ((b2 b))
  (and (mem3 (Tuple21 x b2) p) (mem (tuple2 b1 c2)
  (Tuple2 b1 c2 (t2tb14 b2) y) q)))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 a a))) (q (set (tuple21 a b))) (x a) (y b))
  (= (mem3 (Tuple21 x y) (tb2t11 (semicolon b1 a1 a1 (t2tb4 p) (t2tb11 q))))
  (exists ((b2 a))
  (and (mem (tuple2 a1 a1) (Tuple2 a1 a1 (t2tb2 x) (t2tb2 b2)) (t2tb4 p))
  (mem3 (Tuple21 b2 y) q))))))

;; mem_semicolon
  (assert
  (forall ((a2 ty) (b2 ty) (c2 ty))
  (forall ((p uni) (q uni) (x uni) (y uni))
  (and
  (=> (mem (tuple2 a2 c2) (Tuple2 a2 c2 x y) (semicolon c2 b2 a2 p q))
  (exists ((b3 uni))
  (and (sort b2 b3)
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x b3) p) (mem (tuple2 b2 c2)
  (Tuple2 b2 c2 b3 y) q)))))
  (=>
  (exists ((b3 uni))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x b3) p) (mem (tuple2 b2 c2)
  (Tuple2 b2 c2 b3 y) q))) (mem (tuple2 a2 c2) (Tuple2 a2 c2 x y)
  (semicolon c2 b2 a2 p q)))))))

(declare-fun semicolon_back (ty ty ty uni uni) uni)

;; semicolon_back_sort
  (assert
  (forall ((a2 ty) (b2 ty) (c2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (tuple2 a2 c2))
  (semicolon_back c2 b2 a2 x x1)))))

;; semicolon_back
  (assert
  (forall ((a2 ty) (b2 ty) (c2 ty))
  (forall ((p uni) (q uni))
  (= (semicolon_back c2 b2 a2 q p) (semicolon c2 b2 a2 p q)))))

(declare-fun id (ty uni) uni)

;; id_sort
  (assert
  (forall ((a2 ty))
  (forall ((x uni)) (sort (set1 (tuple2 a2 a2)) (id a2 x)))))

;; mem_id
  (assert
  (forall ((u (set (set (tuple21 (tuple21 a b) b))))
  (x (set (tuple21 (tuple21 a b) b))) (y (set (tuple21 (tuple21 a b) b))))
  (= (mem
  (tuple2 (set1 (tuple2 (tuple2 a1 b1) b1))
  (set1 (tuple2 (tuple2 a1 b1) b1)))
  (Tuple2 (set1 (tuple2 (tuple2 a1 b1) b1)) (set1 (tuple2 (tuple2 a1 b1) b1))
  (t2tb27 x) (t2tb27 y)) (id (set1 (tuple2 (tuple2 a1 b1) b1)) (t2tb51 u)))
  (and (mem19 x u) (= x y)))))

;; mem_id
  (assert
  (forall ((u (set (tuple21 (tuple21 a b) b))) (x (tuple21 (tuple21 a b) b))
  (y (tuple21 (tuple21 a b) b)))
  (= (mem (tuple2 (tuple2 (tuple2 a1 b1) b1) (tuple2 (tuple2 a1 b1) b1))
  (Tuple2 (tuple2 (tuple2 a1 b1) b1) (tuple2 (tuple2 a1 b1) b1) (t2tb28 x)
  (t2tb28 y)) (id (tuple2 (tuple2 a1 b1) b1) (t2tb27 u)))
  (and (mem18 x u) (= x y)))))

;; mem_id
  (assert
  (forall ((u (set (tuple21 a b))) (x (tuple21 a b)) (y (tuple21 a b)))
  (= (mem (tuple2 (tuple2 a1 b1) (tuple2 a1 b1))
  (Tuple2 (tuple2 a1 b1) (tuple2 a1 b1) (t2tb13 x) (t2tb13 y))
  (id (tuple2 a1 b1) (t2tb11 u))) (and (mem3 x u) (= x y)))))

;; mem_id
  (assert
  (forall ((u (set b)) (x b) (y b))
  (= (mem (tuple2 b1 b1) (Tuple2 b1 b1 (t2tb14 x) (t2tb14 y))
  (id b1 (t2tb12 u))) (and (mem2 x u) (= x y)))))

;; mem_id
  (assert
  (forall ((u (set a)) (x a) (y a))
  (= (mem (tuple2 a1 a1) (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y))
  (id a1 (t2tb1 u))) (and (mem1 x u) (= x y)))))

;; mem_id
  (assert
  (forall ((a2 ty))
  (forall ((u uni) (x uni) (y uni))
  (=> (sort a2 x)
  (=> (sort a2 y)
  (= (mem (tuple2 a2 a2) (Tuple2 a2 a2 x y) (id a2 u))
  (and (mem a2 x u) (= x y))))))))

(declare-fun domain_restriction (ty ty uni uni) uni)

;; domain_restriction_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (tuple2 a2 b2))
  (domain_restriction b2 a2 x x1)))))

;; mem_domain_restriction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (set (tuple21 (tuple21 a b) b))))
  (x (set (tuple21 (tuple21 a b) b))) (y uni))
  (= (mem (tuple2 (set1 (tuple2 (tuple2 a1 b1) b1)) b2)
  (Tuple2 (set1 (tuple2 (tuple2 a1 b1) b1)) b2 (t2tb27 x) y)
  (domain_restriction b2 (set1 (tuple2 (tuple2 a1 b1) b1)) (t2tb51 s) p))
  (and (mem (tuple2 (set1 (tuple2 (tuple2 a1 b1) b1)) b2)
  (Tuple2 (set1 (tuple2 (tuple2 a1 b1) b1)) b2 (t2tb27 x) y) p) (mem19 x s))))))

;; mem_domain_restriction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (tuple21 (tuple21 a b) b))) (x (tuple21 (tuple21 a
  b) b)) (y uni))
  (= (mem (tuple2 (tuple2 (tuple2 a1 b1) b1) b2)
  (Tuple2 (tuple2 (tuple2 a1 b1) b1) b2 (t2tb28 x) y)
  (domain_restriction b2 (tuple2 (tuple2 a1 b1) b1) (t2tb27 s) p))
  (and (mem (tuple2 (tuple2 (tuple2 a1 b1) b1) b2)
  (Tuple2 (tuple2 (tuple2 a1 b1) b1) b2 (t2tb28 x) y) p) (mem18 x s))))))

;; mem_domain_restriction
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) b))) (s (set (tuple21 a b)))
  (x (tuple21 a b)) (y b))
  (= (mem18 (Tuple24 x y)
  (tb2t27 (domain_restriction b1 (tuple2 a1 b1) (t2tb11 s) (t2tb27 p))))
  (and (mem18 (Tuple24 x y) p) (mem3 x s)))))

;; mem_domain_restriction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (tuple21 a b))) (x (tuple21 a b)) (y uni))
  (= (mem (tuple2 (tuple2 a1 b1) b2) (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) y)
  (domain_restriction b2 (tuple2 a1 b1) (t2tb11 s) p))
  (and (mem (tuple2 (tuple2 a1 b1) b2)
  (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) y) p) (mem3 x s))))))

;; mem_domain_restriction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set b)) (x b) (y uni))
  (= (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) y)
  (domain_restriction b2 b1 (t2tb12 s) p))
  (and (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) y) p) (mem2 x s))))))

;; mem_domain_restriction
  (assert
  (forall ((p (set (tuple21 (set a) (set b)))) (s (set (set a))) (x (set a))
  (y (set b)))
  (= (mem (tuple2 (set1 a1) (set1 b1)) (t2tb495 (Tuple23 x y))
  (domain_restriction (set1 b1) (set1 a1) (t2tb s) (t2tb538 p)))
  (and (mem (tuple2 (set1 a1) (set1 b1)) (t2tb495 (Tuple23 x y)) (t2tb538 p))
  (mem (set1 a1) (t2tb1 x) (t2tb s))))))

;; mem_domain_restriction
  (assert
  (forall ((p (set (tuple21 a b))) (s (set a)) (x a) (y b))
  (= (mem3 (Tuple21 x y)
  (tb2t11 (domain_restriction b1 a1 (t2tb1 s) (t2tb11 p))))
  (and (mem3 (Tuple21 x y) p) (mem1 x s)))))

;; mem_domain_restriction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set a)) (x a) (y uni))
  (= (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) y)
  (domain_restriction b2 a1 (t2tb1 s) p))
  (and (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) y) p) (mem1 x s))))))

;; mem_domain_restriction
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((p uni) (s uni) (x uni) (y uni))
  (= (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) (domain_restriction b2 a2 s p))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) p) (mem a2 x s))))))

(declare-fun range_restriction (ty ty uni uni) uni)

;; range_restriction_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (tuple2 a2 b2))
  (range_restriction b2 a2 x x1)))))

;; mem_range_restriction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (set (tuple21 (tuple21 a b) b)))) (x uni)
  (y (set (tuple21 (tuple21 a b) b))))
  (= (mem (tuple2 a2 (set1 (tuple2 (tuple2 a1 b1) b1)))
  (Tuple2 a2 (set1 (tuple2 (tuple2 a1 b1) b1)) x (t2tb27 y))
  (range_restriction (set1 (tuple2 (tuple2 a1 b1) b1)) a2 p (t2tb51 t)))
  (and (mem (tuple2 a2 (set1 (tuple2 (tuple2 a1 b1) b1)))
  (Tuple2 a2 (set1 (tuple2 (tuple2 a1 b1) b1)) x (t2tb27 y)) p) (mem19 y t))))))

;; mem_range_restriction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (tuple21 (tuple21 a b) b))) (x uni)
  (y (tuple21 (tuple21 a b) b)))
  (= (mem (tuple2 a2 (tuple2 (tuple2 a1 b1) b1))
  (Tuple2 a2 (tuple2 (tuple2 a1 b1) b1) x (t2tb28 y))
  (range_restriction (tuple2 (tuple2 a1 b1) b1) a2 p (t2tb27 t)))
  (and (mem (tuple2 a2 (tuple2 (tuple2 a1 b1) b1))
  (Tuple2 a2 (tuple2 (tuple2 a1 b1) b1) x (t2tb28 y)) p) (mem18 y t))))))

;; mem_range_restriction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (tuple21 a b))) (x uni) (y (tuple21 a b)))
  (= (mem (tuple2 a2 (tuple2 a1 b1)) (Tuple2 a2 (tuple2 a1 b1) x (t2tb13 y))
  (range_restriction (tuple2 a1 b1) a2 p (t2tb11 t)))
  (and (mem (tuple2 a2 (tuple2 a1 b1))
  (Tuple2 a2 (tuple2 a1 b1) x (t2tb13 y)) p) (mem3 y t))))))

;; mem_range_restriction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set b)) (x uni) (y b))
  (= (mem (tuple2 a2 b1) (Tuple2 a2 b1 x (t2tb14 y))
  (range_restriction b1 a2 p (t2tb12 t)))
  (and (mem (tuple2 a2 b1) (Tuple2 a2 b1 x (t2tb14 y)) p) (mem2 y t))))))

;; mem_range_restriction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set a)) (x uni) (y a))
  (= (mem (tuple2 a2 a1) (Tuple2 a2 a1 x (t2tb2 y))
  (range_restriction a1 a2 p (t2tb1 t)))
  (and (mem (tuple2 a2 a1) (Tuple2 a2 a1 x (t2tb2 y)) p) (mem1 y t))))))

;; mem_range_restriction
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) b))) (t (set b)) (x (tuple21 a b))
  (y b))
  (= (mem18 (Tuple24 x y)
  (tb2t27 (range_restriction b1 (tuple2 a1 b1) (t2tb27 p) (t2tb12 t))))
  (and (mem18 (Tuple24 x y) p) (mem2 y t)))))

;; mem_range_restriction
  (assert
  (forall ((p (set (tuple21 (set a) (set b)))) (t (set (set b))) (x (set a))
  (y (set b)))
  (= (mem (tuple2 (set1 a1) (set1 b1)) (t2tb495 (Tuple23 x y))
  (range_restriction (set1 b1) (set1 a1) (t2tb538 p) (t2tb44 t)))
  (and (mem (tuple2 (set1 a1) (set1 b1)) (t2tb495 (Tuple23 x y)) (t2tb538 p))
  (mem (set1 b1) (t2tb12 y) (t2tb44 t))))))

;; mem_range_restriction
  (assert
  (forall ((p (set (tuple21 a b))) (t (set b)) (x a) (y b))
  (= (mem3 (Tuple21 x y)
  (tb2t11 (range_restriction b1 a1 (t2tb11 p) (t2tb12 t))))
  (and (mem3 (Tuple21 x y) p) (mem2 y t)))))

;; mem_range_restriction
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((p uni) (t uni) (x uni) (y uni))
  (= (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) (range_restriction b2 a2 p t))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) p) (mem b2 y t))))))

(declare-fun domain_substraction (ty ty uni uni) uni)

;; domain_substraction_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (tuple2 a2 b2))
  (domain_substraction b2 a2 x x1)))))

;; mem_domain_substraction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (set (tuple21 (tuple21 a b) b))))
  (x (set (tuple21 (tuple21 a b) b))) (y uni))
  (= (mem (tuple2 (set1 (tuple2 (tuple2 a1 b1) b1)) b2)
  (Tuple2 (set1 (tuple2 (tuple2 a1 b1) b1)) b2 (t2tb27 x) y)
  (domain_substraction b2 (set1 (tuple2 (tuple2 a1 b1) b1)) (t2tb51 s) p))
  (and (mem (tuple2 (set1 (tuple2 (tuple2 a1 b1) b1)) b2)
  (Tuple2 (set1 (tuple2 (tuple2 a1 b1) b1)) b2 (t2tb27 x) y) p)
  (not (mem19 x s)))))))

;; mem_domain_substraction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (tuple21 (tuple21 a b) b))) (x (tuple21 (tuple21 a
  b) b)) (y uni))
  (= (mem (tuple2 (tuple2 (tuple2 a1 b1) b1) b2)
  (Tuple2 (tuple2 (tuple2 a1 b1) b1) b2 (t2tb28 x) y)
  (domain_substraction b2 (tuple2 (tuple2 a1 b1) b1) (t2tb27 s) p))
  (and (mem (tuple2 (tuple2 (tuple2 a1 b1) b1) b2)
  (Tuple2 (tuple2 (tuple2 a1 b1) b1) b2 (t2tb28 x) y) p) (not (mem18 x s)))))))

;; mem_domain_substraction
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) b))) (s (set (tuple21 a b)))
  (x (tuple21 a b)) (y b))
  (= (mem18 (Tuple24 x y)
  (tb2t27 (domain_substraction b1 (tuple2 a1 b1) (t2tb11 s) (t2tb27 p))))
  (and (mem18 (Tuple24 x y) p) (not (mem3 x s))))))

;; mem_domain_substraction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (tuple21 a b))) (x (tuple21 a b)) (y uni))
  (= (mem (tuple2 (tuple2 a1 b1) b2) (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) y)
  (domain_substraction b2 (tuple2 a1 b1) (t2tb11 s) p))
  (and (mem (tuple2 (tuple2 a1 b1) b2)
  (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) y) p) (not (mem3 x s)))))))

;; mem_domain_substraction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set b)) (x b) (y uni))
  (= (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) y)
  (domain_substraction b2 b1 (t2tb12 s) p))
  (and (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) y) p) (not (mem2 x s)))))))

;; mem_domain_substraction
  (assert
  (forall ((p (set (tuple21 (set a) (set b)))) (s (set (set a))) (x (set a))
  (y (set b)))
  (= (mem (tuple2 (set1 a1) (set1 b1)) (t2tb495 (Tuple23 x y))
  (domain_substraction (set1 b1) (set1 a1) (t2tb s) (t2tb538 p)))
  (and (mem (tuple2 (set1 a1) (set1 b1)) (t2tb495 (Tuple23 x y)) (t2tb538 p))
  (not (mem (set1 a1) (t2tb1 x) (t2tb s)))))))

;; mem_domain_substraction
  (assert
  (forall ((p (set (tuple21 a b))) (s (set a)) (x a) (y b))
  (= (mem3 (Tuple21 x y)
  (tb2t11 (domain_substraction b1 a1 (t2tb1 s) (t2tb11 p))))
  (and (mem3 (Tuple21 x y) p) (not (mem1 x s))))))

;; mem_domain_substraction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set a)) (x a) (y uni))
  (= (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) y)
  (domain_substraction b2 a1 (t2tb1 s) p))
  (and (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) y) p) (not (mem1 x s)))))))

;; mem_domain_substraction
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((p uni) (s uni) (x uni) (y uni))
  (= (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) (domain_substraction b2 a2 s p))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) p) (not (mem a2 x s)))))))

(declare-fun range_substraction (ty ty uni uni) uni)

;; range_substraction_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (tuple2 a2 b2))
  (range_substraction b2 a2 x x1)))))

;; mem_range_substraction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (set (tuple21 (tuple21 a b) b)))) (x uni)
  (y (set (tuple21 (tuple21 a b) b))))
  (= (mem (tuple2 a2 (set1 (tuple2 (tuple2 a1 b1) b1)))
  (Tuple2 a2 (set1 (tuple2 (tuple2 a1 b1) b1)) x (t2tb27 y))
  (range_substraction (set1 (tuple2 (tuple2 a1 b1) b1)) a2 p (t2tb51 t)))
  (and (mem (tuple2 a2 (set1 (tuple2 (tuple2 a1 b1) b1)))
  (Tuple2 a2 (set1 (tuple2 (tuple2 a1 b1) b1)) x (t2tb27 y)) p)
  (not (mem19 y t)))))))

;; mem_range_substraction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (tuple21 (tuple21 a b) b))) (x uni)
  (y (tuple21 (tuple21 a b) b)))
  (= (mem (tuple2 a2 (tuple2 (tuple2 a1 b1) b1))
  (Tuple2 a2 (tuple2 (tuple2 a1 b1) b1) x (t2tb28 y))
  (range_substraction (tuple2 (tuple2 a1 b1) b1) a2 p (t2tb27 t)))
  (and (mem (tuple2 a2 (tuple2 (tuple2 a1 b1) b1))
  (Tuple2 a2 (tuple2 (tuple2 a1 b1) b1) x (t2tb28 y)) p) (not (mem18 y t)))))))

;; mem_range_substraction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (tuple21 a b))) (x uni) (y (tuple21 a b)))
  (= (mem (tuple2 a2 (tuple2 a1 b1)) (Tuple2 a2 (tuple2 a1 b1) x (t2tb13 y))
  (range_substraction (tuple2 a1 b1) a2 p (t2tb11 t)))
  (and (mem (tuple2 a2 (tuple2 a1 b1))
  (Tuple2 a2 (tuple2 a1 b1) x (t2tb13 y)) p) (not (mem3 y t)))))))

;; mem_range_substraction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set b)) (x uni) (y b))
  (= (mem (tuple2 a2 b1) (Tuple2 a2 b1 x (t2tb14 y))
  (range_substraction b1 a2 p (t2tb12 t)))
  (and (mem (tuple2 a2 b1) (Tuple2 a2 b1 x (t2tb14 y)) p) (not (mem2 y t)))))))

;; mem_range_substraction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set a)) (x uni) (y a))
  (= (mem (tuple2 a2 a1) (Tuple2 a2 a1 x (t2tb2 y))
  (range_substraction a1 a2 p (t2tb1 t)))
  (and (mem (tuple2 a2 a1) (Tuple2 a2 a1 x (t2tb2 y)) p) (not (mem1 y t)))))))

;; mem_range_substraction
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) b))) (t (set b)) (x (tuple21 a b))
  (y b))
  (= (mem18 (Tuple24 x y)
  (tb2t27 (range_substraction b1 (tuple2 a1 b1) (t2tb27 p) (t2tb12 t))))
  (and (mem18 (Tuple24 x y) p) (not (mem2 y t))))))

;; mem_range_substraction
  (assert
  (forall ((p (set (tuple21 (set a) (set b)))) (t (set (set b))) (x (set a))
  (y (set b)))
  (= (mem (tuple2 (set1 a1) (set1 b1)) (t2tb495 (Tuple23 x y))
  (range_substraction (set1 b1) (set1 a1) (t2tb538 p) (t2tb44 t)))
  (and (mem (tuple2 (set1 a1) (set1 b1)) (t2tb495 (Tuple23 x y)) (t2tb538 p))
  (not (mem (set1 b1) (t2tb12 y) (t2tb44 t)))))))

;; mem_range_substraction
  (assert
  (forall ((p (set (tuple21 a b))) (t (set b)) (x a) (y b))
  (= (mem3 (Tuple21 x y)
  (tb2t11 (range_substraction b1 a1 (t2tb11 p) (t2tb12 t))))
  (and (mem3 (Tuple21 x y) p) (not (mem2 y t))))))

;; mem_range_substraction
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((p uni) (t uni) (x uni) (y uni))
  (= (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) (range_substraction b2 a2 p t))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) p) (not (mem b2 y t)))))))

(declare-fun image (ty ty uni uni) uni)

;; image_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 b2) (image b2 a2 x x1)))))

;; mem_image
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (w uni) (x (set (tuple21 (tuple21 a b) b))))
  (and
  (=> (mem19 x (tb2t51 (image (set1 (tuple2 (tuple2 a1 b1) b1)) a2 p w)))
  (exists ((a3 uni))
  (and (sort a2 a3)
  (and (mem a2 a3 w) (mem (tuple2 a2 (set1 (tuple2 (tuple2 a1 b1) b1)))
  (Tuple2 a2 (set1 (tuple2 (tuple2 a1 b1) b1)) a3 (t2tb27 x)) p)))))
  (=>
  (exists ((a3 uni))
  (and (mem a2 a3 w) (mem (tuple2 a2 (set1 (tuple2 (tuple2 a1 b1) b1)))
  (Tuple2 a2 (set1 (tuple2 (tuple2 a1 b1) b1)) a3 (t2tb27 x)) p))) (mem19 x
  (tb2t51 (image (set1 (tuple2 (tuple2 a1 b1) b1)) a2 p w))))))))

;; mem_image
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (w uni) (x (tuple21 (tuple21 a b) b)))
  (and
  (=> (mem18 x (tb2t27 (image (tuple2 (tuple2 a1 b1) b1) a2 p w)))
  (exists ((a3 uni))
  (and (sort a2 a3)
  (and (mem a2 a3 w) (mem (tuple2 a2 (tuple2 (tuple2 a1 b1) b1))
  (Tuple2 a2 (tuple2 (tuple2 a1 b1) b1) a3 (t2tb28 x)) p)))))
  (=>
  (exists ((a3 uni))
  (and (mem a2 a3 w) (mem (tuple2 a2 (tuple2 (tuple2 a1 b1) b1))
  (Tuple2 a2 (tuple2 (tuple2 a1 b1) b1) a3 (t2tb28 x)) p))) (mem18 x
  (tb2t27 (image (tuple2 (tuple2 a1 b1) b1) a2 p w))))))))

;; mem_image
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (w uni) (x (tuple21 a b)))
  (and
  (=> (mem3 x (tb2t11 (image (tuple2 a1 b1) a2 p w)))
  (exists ((a3 uni))
  (and (sort a2 a3)
  (and (mem a2 a3 w) (mem (tuple2 a2 (tuple2 a1 b1))
  (Tuple2 a2 (tuple2 a1 b1) a3 (t2tb13 x)) p)))))
  (=>
  (exists ((a3 uni))
  (and (mem a2 a3 w) (mem (tuple2 a2 (tuple2 a1 b1))
  (Tuple2 a2 (tuple2 a1 b1) a3 (t2tb13 x)) p))) (mem3 x
  (tb2t11 (image (tuple2 a1 b1) a2 p w))))))))

;; mem_image
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (w uni) (x b))
  (and
  (=> (mem2 x (tb2t12 (image b1 a2 p w)))
  (exists ((a3 uni))
  (and (sort a2 a3)
  (and (mem a2 a3 w) (mem (tuple2 a2 b1) (Tuple2 a2 b1 a3 (t2tb14 x)) p)))))
  (=>
  (exists ((a3 uni))
  (and (mem a2 a3 w) (mem (tuple2 a2 b1) (Tuple2 a2 b1 a3 (t2tb14 x)) p)))
  (mem2 x (tb2t12 (image b1 a2 p w))))))))

;; mem_image
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (w uni) (x a))
  (and
  (=> (mem1 x (tb2t1 (image a1 a2 p w)))
  (exists ((a3 uni))
  (and (sort a2 a3)
  (and (mem a2 a3 w) (mem (tuple2 a2 a1) (Tuple2 a2 a1 a3 (t2tb2 x)) p)))))
  (=>
  (exists ((a3 uni))
  (and (mem a2 a3 w) (mem (tuple2 a2 a1) (Tuple2 a2 a1 a3 (t2tb2 x)) p)))
  (mem1 x (tb2t1 (image a1 a2 p w))))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 (tuple21 a b) b))
  (set (tuple21 (tuple21 a b) b))))) (w (set (set (tuple21 (tuple21 a b)
  b)))) (x (set (tuple21 (tuple21 a b) b))))
  (= (mem19 x
  (tb2t51
  (image (set1 (tuple2 (tuple2 a1 b1) b1)) (set1 (tuple2 (tuple2 a1 b1) b1))
  (t2tb619 p) (t2tb51 w))))
  (exists ((a2 (set (tuple21 (tuple21 a b) b))))
  (and (mem19 a2 w) (mem
  (tuple2 (set1 (tuple2 (tuple2 a1 b1) b1))
  (set1 (tuple2 (tuple2 a1 b1) b1)))
  (Tuple2 (set1 (tuple2 (tuple2 a1 b1) b1)) (set1 (tuple2 (tuple2 a1 b1) b1))
  (t2tb27 a2) (t2tb27 x)) (t2tb619 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 (tuple21 a b) b))
  (tuple21 (tuple21 a b) b)))) (w (set (set (tuple21 (tuple21 a b) b))))
  (x (tuple21 (tuple21 a b) b)))
  (= (mem18 x
  (tb2t27
  (image (tuple2 (tuple2 a1 b1) b1) (set1 (tuple2 (tuple2 a1 b1) b1))
  (t2tb621 p) (t2tb51 w))))
  (exists ((a2 (set (tuple21 (tuple21 a b) b))))
  (and (mem19 a2 w) (mem
  (tuple2 (set1 (tuple2 (tuple2 a1 b1) b1)) (tuple2 (tuple2 a1 b1) b1))
  (Tuple2 (set1 (tuple2 (tuple2 a1 b1) b1)) (tuple2 (tuple2 a1 b1) b1)
  (t2tb27 a2) (t2tb28 x)) (t2tb621 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 (tuple21 a b) b)) (tuple21 a b))))
  (w (set (set (tuple21 (tuple21 a b) b)))) (x (tuple21 a b)))
  (= (mem3 x
  (tb2t11
  (image (tuple2 a1 b1) (set1 (tuple2 (tuple2 a1 b1) b1)) (t2tb623 p)
  (t2tb51 w))))
  (exists ((a2 (set (tuple21 (tuple21 a b) b))))
  (and (mem19 a2 w) (mem
  (tuple2 (set1 (tuple2 (tuple2 a1 b1) b1)) (tuple2 a1 b1))
  (Tuple2 (set1 (tuple2 (tuple2 a1 b1) b1)) (tuple2 a1 b1) (t2tb27 a2)
  (t2tb13 x)) (t2tb623 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 (tuple21 a b) b)) b)))
  (w (set (set (tuple21 (tuple21 a b) b)))) (x b))
  (= (mem2 x
  (tb2t12
  (image b1 (set1 (tuple2 (tuple2 a1 b1) b1)) (t2tb625 p) (t2tb51 w))))
  (exists ((a2 (set (tuple21 (tuple21 a b) b))))
  (and (mem19 a2 w) (mem (tuple2 (set1 (tuple2 (tuple2 a1 b1) b1)) b1)
  (Tuple2 (set1 (tuple2 (tuple2 a1 b1) b1)) b1 (t2tb27 a2) (t2tb14 x))
  (t2tb625 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 (tuple21 a b) b)) a)))
  (w (set (set (tuple21 (tuple21 a b) b)))) (x a))
  (= (mem1 x
  (tb2t1 (image a1 (set1 (tuple2 (tuple2 a1 b1) b1)) (t2tb627 p) (t2tb51 w))))
  (exists ((a2 (set (tuple21 (tuple21 a b) b))))
  (and (mem19 a2 w) (mem (tuple2 (set1 (tuple2 (tuple2 a1 b1) b1)) a1)
  (Tuple2 (set1 (tuple2 (tuple2 a1 b1) b1)) a1 (t2tb27 a2) (t2tb2 x))
  (t2tb627 p)))))))

;; mem_image
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (w (set (set (tuple21 (tuple21 a b) b)))) (x uni))
  (= (mem b2 x (image b2 (set1 (tuple2 (tuple2 a1 b1) b1)) p (t2tb51 w)))
  (exists ((a2 (set (tuple21 (tuple21 a b) b))))
  (and (mem19 a2 w) (mem (tuple2 (set1 (tuple2 (tuple2 a1 b1) b1)) b2)
  (Tuple2 (set1 (tuple2 (tuple2 a1 b1) b1)) b2 (t2tb27 a2) x) p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 (tuple21 a b) b)
  (set (tuple21 (tuple21 a b) b))))) (w (set (tuple21 (tuple21 a b) b)))
  (x (set (tuple21 (tuple21 a b) b))))
  (= (mem19 x
  (tb2t51
  (image (set1 (tuple2 (tuple2 a1 b1) b1)) (tuple2 (tuple2 a1 b1) b1)
  (t2tb629 p) (t2tb27 w))))
  (exists ((a2 (tuple21 (tuple21 a b) b)))
  (and (mem18 a2 w) (mem
  (tuple2 (tuple2 (tuple2 a1 b1) b1) (set1 (tuple2 (tuple2 a1 b1) b1)))
  (Tuple2 (tuple2 (tuple2 a1 b1) b1) (set1 (tuple2 (tuple2 a1 b1) b1))
  (t2tb28 a2) (t2tb27 x)) (t2tb629 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 (tuple21 a b) b) (tuple21 (tuple21 a b)
  b)))) (w (set (tuple21 (tuple21 a b) b))) (x (tuple21 (tuple21 a b) b)))
  (= (mem18 x
  (tb2t27
  (image (tuple2 (tuple2 a1 b1) b1) (tuple2 (tuple2 a1 b1) b1) (t2tb631 p)
  (t2tb27 w))))
  (exists ((a2 (tuple21 (tuple21 a b) b)))
  (and (mem18 a2 w) (mem
  (tuple2 (tuple2 (tuple2 a1 b1) b1) (tuple2 (tuple2 a1 b1) b1))
  (Tuple2 (tuple2 (tuple2 a1 b1) b1) (tuple2 (tuple2 a1 b1) b1) (t2tb28 a2)
  (t2tb28 x)) (t2tb631 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 (tuple21 a b) b) (tuple21 a b))))
  (w (set (tuple21 (tuple21 a b) b))) (x (tuple21 a b)))
  (= (mem3 x
  (tb2t11
  (image (tuple2 a1 b1) (tuple2 (tuple2 a1 b1) b1) (t2tb633 p) (t2tb27 w))))
  (exists ((a2 (tuple21 (tuple21 a b) b)))
  (and (mem18 a2 w) (mem (tuple2 (tuple2 (tuple2 a1 b1) b1) (tuple2 a1 b1))
  (Tuple2 (tuple2 (tuple2 a1 b1) b1) (tuple2 a1 b1) (t2tb28 a2) (t2tb13 x))
  (t2tb633 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 (tuple21 a b) b) b)))
  (w (set (tuple21 (tuple21 a b) b))) (x b))
  (= (mem2 x
  (tb2t12 (image b1 (tuple2 (tuple2 a1 b1) b1) (t2tb635 p) (t2tb27 w))))
  (exists ((a2 (tuple21 (tuple21 a b) b)))
  (and (mem18 a2 w) (mem (tuple2 (tuple2 (tuple2 a1 b1) b1) b1)
  (Tuple2 (tuple2 (tuple2 a1 b1) b1) b1 (t2tb28 a2) (t2tb14 x)) (t2tb635 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 (tuple21 a b) b) a)))
  (w (set (tuple21 (tuple21 a b) b))) (x a))
  (= (mem1 x
  (tb2t1 (image a1 (tuple2 (tuple2 a1 b1) b1) (t2tb637 p) (t2tb27 w))))
  (exists ((a2 (tuple21 (tuple21 a b) b)))
  (and (mem18 a2 w) (mem (tuple2 (tuple2 (tuple2 a1 b1) b1) a1)
  (Tuple2 (tuple2 (tuple2 a1 b1) b1) a1 (t2tb28 a2) (t2tb2 x)) (t2tb637 p)))))))

;; mem_image
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (w (set (tuple21 (tuple21 a b) b))) (x uni))
  (= (mem b2 x (image b2 (tuple2 (tuple2 a1 b1) b1) p (t2tb27 w)))
  (exists ((a2 (tuple21 (tuple21 a b) b)))
  (and (mem18 a2 w) (mem (tuple2 (tuple2 (tuple2 a1 b1) b1) b2)
  (Tuple2 (tuple2 (tuple2 a1 b1) b1) b2 (t2tb28 a2) x) p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) (set (tuple21 (tuple21 a b) b)))))
  (w (set (tuple21 a b))) (x (set (tuple21 (tuple21 a b) b))))
  (= (mem19 x
  (tb2t51
  (image (set1 (tuple2 (tuple2 a1 b1) b1)) (tuple2 a1 b1) (t2tb639 p)
  (t2tb11 w))))
  (exists ((a2 (tuple21 a b)))
  (and (mem3 a2 w) (mem
  (tuple2 (tuple2 a1 b1) (set1 (tuple2 (tuple2 a1 b1) b1)))
  (Tuple2 (tuple2 a1 b1) (set1 (tuple2 (tuple2 a1 b1) b1)) (t2tb13 a2)
  (t2tb27 x)) (t2tb639 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) (tuple21 (tuple21 a b) b))))
  (w (set (tuple21 a b))) (x (tuple21 (tuple21 a b) b)))
  (= (mem18 x
  (tb2t27
  (image (tuple2 (tuple2 a1 b1) b1) (tuple2 a1 b1) (t2tb641 p) (t2tb11 w))))
  (exists ((a2 (tuple21 a b)))
  (and (mem3 a2 w) (mem (tuple2 (tuple2 a1 b1) (tuple2 (tuple2 a1 b1) b1))
  (Tuple2 (tuple2 a1 b1) (tuple2 (tuple2 a1 b1) b1) (t2tb13 a2) (t2tb28 x))
  (t2tb641 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) (tuple21 a b)))) (w (set (tuple21 a
  b))) (x (tuple21 a b)))
  (= (mem3 x
  (tb2t11 (image (tuple2 a1 b1) (tuple2 a1 b1) (t2tb25 p) (t2tb11 w))))
  (exists ((a2 (tuple21 a b)))
  (and (mem3 a2 w) (mem (tuple2 (tuple2 a1 b1) (tuple2 a1 b1))
  (Tuple2 (tuple2 a1 b1) (tuple2 a1 b1) (t2tb13 a2) (t2tb13 x)) (t2tb25 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) b))) (w (set (tuple21 a b))) (x b))
  (= (mem2 x (tb2t12 (image b1 (tuple2 a1 b1) (t2tb27 p) (t2tb11 w))))
  (exists ((a2 (tuple21 a b))) (and (mem3 a2 w) (mem18 (Tuple24 a2 x) p))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) a))) (w (set (tuple21 a b))) (x a))
  (= (mem1 x (tb2t1 (image a1 (tuple2 a1 b1) (t2tb29 p) (t2tb11 w))))
  (exists ((a2 (tuple21 a b)))
  (and (mem3 a2 w) (mem (tuple2 (tuple2 a1 b1) a1)
  (Tuple2 (tuple2 a1 b1) a1 (t2tb13 a2) (t2tb2 x)) (t2tb29 p)))))))

;; mem_image
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (w (set (tuple21 a b))) (x uni))
  (= (mem b2 x (image b2 (tuple2 a1 b1) p (t2tb11 w)))
  (exists ((a2 (tuple21 a b)))
  (and (mem3 a2 w) (mem (tuple2 (tuple2 a1 b1) b2)
  (Tuple2 (tuple2 a1 b1) b2 (t2tb13 a2) x) p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 b (set (tuple21 (tuple21 a b) b))))) (w (set b))
  (x (set (tuple21 (tuple21 a b) b))))
  (= (mem19 x
  (tb2t51
  (image (set1 (tuple2 (tuple2 a1 b1) b1)) b1 (t2tb643 p) (t2tb12 w))))
  (exists ((a2 b))
  (and (mem2 a2 w) (mem (tuple2 b1 (set1 (tuple2 (tuple2 a1 b1) b1)))
  (Tuple2 b1 (set1 (tuple2 (tuple2 a1 b1) b1)) (t2tb14 a2) (t2tb27 x))
  (t2tb643 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 b (tuple21 (tuple21 a b) b)))) (w (set b))
  (x (tuple21 (tuple21 a b) b)))
  (= (mem18 x
  (tb2t27 (image (tuple2 (tuple2 a1 b1) b1) b1 (t2tb645 p) (t2tb12 w))))
  (exists ((a2 b))
  (and (mem2 a2 w) (mem (tuple2 b1 (tuple2 (tuple2 a1 b1) b1))
  (Tuple2 b1 (tuple2 (tuple2 a1 b1) b1) (t2tb14 a2) (t2tb28 x)) (t2tb645 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 b (tuple21 a b)))) (w (set b)) (x (tuple21 a b)))
  (= (mem3 x (tb2t11 (image (tuple2 a1 b1) b1 (t2tb34 p) (t2tb12 w))))
  (exists ((a2 b))
  (and (mem2 a2 w) (mem (tuple2 b1 (tuple2 a1 b1))
  (Tuple2 b1 (tuple2 a1 b1) (t2tb14 a2) (t2tb13 x)) (t2tb34 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 b b))) (w (set b)) (x b))
  (= (mem2 x (tb2t12 (image b1 b1 (t2tb35 p) (t2tb12 w))))
  (exists ((a2 b))
  (and (mem2 a2 w) (mem (tuple2 b1 b1) (Tuple2 b1 b1 (t2tb14 a2) (t2tb14 x))
  (t2tb35 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 b a))) (w (set b)) (x a))
  (= (mem1 x (tb2t1 (image a1 b1 (t2tb37 p) (t2tb12 w))))
  (exists ((a2 b))
  (and (mem2 a2 w) (mem (tuple2 b1 a1) (Tuple2 b1 a1 (t2tb14 a2) (t2tb2 x))
  (t2tb37 p)))))))

;; mem_image
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (w (set b)) (x uni))
  (= (mem b2 x (image b2 b1 p (t2tb12 w)))
  (exists ((a2 b))
  (and (mem2 a2 w) (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 a2) x) p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set a) (set b)))) (w (set (set a))) (x (set b)))
  (= (mem (set1 b1) (t2tb12 x)
  (image (set1 b1) (set1 a1) (t2tb538 p) (t2tb w)))
  (exists ((a2 (set a)))
  (and (mem (set1 a1) (t2tb1 a2) (t2tb w)) (mem (tuple2 (set1 a1) (set1 b1))
  (t2tb495 (Tuple23 a2 x)) (t2tb538 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 a (set (tuple21 (tuple21 a b) b))))) (w (set a))
  (x (set (tuple21 (tuple21 a b) b))))
  (= (mem19 x
  (tb2t51 (image (set1 (tuple2 (tuple2 a1 b1) b1)) a1 (t2tb647 p) (t2tb1 w))))
  (exists ((a2 a))
  (and (mem1 a2 w) (mem (tuple2 a1 (set1 (tuple2 (tuple2 a1 b1) b1)))
  (Tuple2 a1 (set1 (tuple2 (tuple2 a1 b1) b1)) (t2tb2 a2) (t2tb27 x))
  (t2tb647 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 a (tuple21 (tuple21 a b) b)))) (w (set a))
  (x (tuple21 (tuple21 a b) b)))
  (= (mem18 x
  (tb2t27 (image (tuple2 (tuple2 a1 b1) b1) a1 (t2tb649 p) (t2tb1 w))))
  (exists ((a2 a))
  (and (mem1 a2 w) (mem (tuple2 a1 (tuple2 (tuple2 a1 b1) b1))
  (Tuple2 a1 (tuple2 (tuple2 a1 b1) b1) (t2tb2 a2) (t2tb28 x)) (t2tb649 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 a (tuple21 a b)))) (w (set a)) (x (tuple21 a b)))
  (= (mem3 x (tb2t11 (image (tuple2 a1 b1) a1 (t2tb41 p) (t2tb1 w))))
  (exists ((a2 a))
  (and (mem1 a2 w) (mem (tuple2 a1 (tuple2 a1 b1))
  (Tuple2 a1 (tuple2 a1 b1) (t2tb2 a2) (t2tb13 x)) (t2tb41 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 a b))) (w (set a)) (x b))
  (= (mem2 x (tb2t12 (image b1 a1 (t2tb11 p) (t2tb1 w))))
  (exists ((a2 a)) (and (mem1 a2 w) (mem3 (Tuple21 a2 x) p))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 a a))) (w (set a)) (x a))
  (= (mem1 x (tb2t1 (image a1 a1 (t2tb4 p) (t2tb1 w))))
  (exists ((a2 a))
  (and (mem1 a2 w) (mem (tuple2 a1 a1) (Tuple2 a1 a1 (t2tb2 a2) (t2tb2 x))
  (t2tb4 p)))))))

;; mem_image
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (w (set a)) (x uni))
  (= (mem b2 x (image b2 a1 p (t2tb1 w)))
  (exists ((a2 a))
  (and (mem1 a2 w) (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 a2) x) p)))))))

;; mem_image
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((p uni) (w uni) (x uni))
  (and
  (=> (mem b2 x (image b2 a2 p w))
  (exists ((a3 uni))
  (and (sort a2 a3)
  (and (mem a2 a3 w) (mem (tuple2 a2 b2) (Tuple2 a2 b2 a3 x) p)))))
  (=>
  (exists ((a3 uni))
  (and (mem a2 a3 w) (mem (tuple2 a2 b2) (Tuple2 a2 b2 a3 x) p))) (mem b2 x
  (image b2 a2 p w)))))))

(declare-fun infix_lspl (ty ty uni uni) uni)

;; infix <+_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (tuple2 a2 b2))
  (infix_lspl b2 a2 x x1)))))

;; mem_overriding
  (assert
  (forall ((b2 ty))
  (forall ((q uni) (p uni) (x (set (tuple21 (tuple21 a b) b))) (y uni))
  (= (mem (tuple2 (set1 (tuple2 (tuple2 a1 b1) b1)) b2)
  (Tuple2 (set1 (tuple2 (tuple2 a1 b1) b1)) b2 (t2tb27 x) y)
  (infix_lspl b2 (set1 (tuple2 (tuple2 a1 b1) b1)) q p))
  (or
  (and (mem (tuple2 (set1 (tuple2 (tuple2 a1 b1) b1)) b2)
  (Tuple2 (set1 (tuple2 (tuple2 a1 b1) b1)) b2 (t2tb27 x) y) q)
  (not (mem19 x (tb2t51 (dom b2 (set1 (tuple2 (tuple2 a1 b1) b1)) p))))) (mem
  (tuple2 (set1 (tuple2 (tuple2 a1 b1) b1)) b2)
  (Tuple2 (set1 (tuple2 (tuple2 a1 b1) b1)) b2 (t2tb27 x) y) p))))))

;; mem_overriding
  (assert
  (forall ((b2 ty))
  (forall ((q uni) (p uni) (x (tuple21 (tuple21 a b) b)) (y uni))
  (= (mem (tuple2 (tuple2 (tuple2 a1 b1) b1) b2)
  (Tuple2 (tuple2 (tuple2 a1 b1) b1) b2 (t2tb28 x) y)
  (infix_lspl b2 (tuple2 (tuple2 a1 b1) b1) q p))
  (or
  (and (mem (tuple2 (tuple2 (tuple2 a1 b1) b1) b2)
  (Tuple2 (tuple2 (tuple2 a1 b1) b1) b2 (t2tb28 x) y) q)
  (not (mem18 x (tb2t27 (dom b2 (tuple2 (tuple2 a1 b1) b1) p))))) (mem
  (tuple2 (tuple2 (tuple2 a1 b1) b1) b2)
  (Tuple2 (tuple2 (tuple2 a1 b1) b1) b2 (t2tb28 x) y) p))))))

;; mem_overriding
  (assert
  (forall ((q (set (tuple21 (tuple21 a b) b))) (p (set (tuple21 (tuple21 a b)
  b))) (x (tuple21 a b)) (y b))
  (= (mem18 (Tuple24 x y)
  (tb2t27 (infix_lspl b1 (tuple2 a1 b1) (t2tb27 q) (t2tb27 p))))
  (or
  (and (mem18 (Tuple24 x y) q)
  (not (mem3 x (tb2t11 (dom b1 (tuple2 a1 b1) (t2tb27 p)))))) (mem18
  (Tuple24 x y) p)))))

;; mem_overriding
  (assert
  (forall ((b2 ty))
  (forall ((q uni) (p uni) (x (tuple21 a b)) (y uni))
  (= (mem (tuple2 (tuple2 a1 b1) b2) (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) y)
  (infix_lspl b2 (tuple2 a1 b1) q p))
  (or
  (and (mem (tuple2 (tuple2 a1 b1) b2)
  (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) y) q)
  (not (mem3 x (tb2t11 (dom b2 (tuple2 a1 b1) p))))) (mem
  (tuple2 (tuple2 a1 b1) b2) (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) y) p))))))

;; mem_overriding
  (assert
  (forall ((b2 ty))
  (forall ((q uni) (p uni) (x b) (y uni))
  (= (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) y) (infix_lspl b2 b1 q p))
  (or
  (and (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) y) q)
  (not (mem2 x (tb2t12 (dom b2 b1 p))))) (mem (tuple2 b1 b2)
  (Tuple2 b1 b2 (t2tb14 x) y) p))))))

;; mem_overriding
  (assert
  (forall ((q (set (tuple21 (set a) (set b)))) (p (set (tuple21 (set a)
  (set b)))) (x (set a)) (y (set b)))
  (= (mem (tuple2 (set1 a1) (set1 b1)) (t2tb495 (Tuple23 x y))
  (infix_lspl (set1 b1) (set1 a1) (t2tb538 q) (t2tb538 p)))
  (or
  (and (mem (tuple2 (set1 a1) (set1 b1)) (t2tb495 (Tuple23 x y)) (t2tb538 q))
  (not (mem (set1 a1) (t2tb1 x) (dom (set1 b1) (set1 a1) (t2tb538 p))))) (mem
  (tuple2 (set1 a1) (set1 b1)) (t2tb495 (Tuple23 x y)) (t2tb538 p))))))

;; mem_overriding
  (assert
  (forall ((q (set (tuple21 a b))) (p (set (tuple21 a b))) (x a) (y b))
  (= (mem3 (Tuple21 x y) (tb2t11 (infix_lspl b1 a1 (t2tb11 q) (t2tb11 p))))
  (or
  (and (mem3 (Tuple21 x y) q) (not (mem1 x (tb2t1 (dom b1 a1 (t2tb11 p))))))
  (mem3 (Tuple21 x y) p)))))

;; mem_overriding
  (assert
  (forall ((b2 ty))
  (forall ((q uni) (p uni) (x a) (y uni))
  (= (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) y) (infix_lspl b2 a1 q p))
  (or
  (and (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) y) q)
  (not (mem1 x (tb2t1 (dom b2 a1 p))))) (mem (tuple2 a1 b2)
  (Tuple2 a1 b2 (t2tb2 x) y) p))))))

;; mem_overriding
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((q uni) (p uni) (x uni) (y uni))
  (= (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) (infix_lspl b2 a2 q p))
  (or
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) q)
  (not (mem a2 x (dom b2 a2 p)))) (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) p))))))

(declare-fun direct_product (ty ty ty uni uni) uni)

;; direct_product_sort
  (assert
  (forall ((a2 ty) (b2 ty) (c2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (tuple2 a2 (tuple2 b2 c2)))
  (direct_product c2 b2 a2 x x1)))))

;; mem_direct_product
  (assert
  (forall ((a2 ty))
  (forall ((f uni) (g uni) (x uni) (y (tuple21 a b)) (z b))
  (= (mem (tuple2 a2 (tuple2 (tuple2 a1 b1) b1))
  (Tuple2 a2 (tuple2 (tuple2 a1 b1) b1) x (t2tb28 (Tuple24 y z)))
  (direct_product b1 (tuple2 a1 b1) a2 f g))
  (and (mem (tuple2 a2 (tuple2 a1 b1))
  (Tuple2 a2 (tuple2 a1 b1) x (t2tb13 y)) f) (mem (tuple2 a2 b1)
  (Tuple2 a2 b1 x (t2tb14 z)) g))))))

;; mem_direct_product
  (assert
  (forall ((a2 ty))
  (forall ((f uni) (g uni) (x uni) (y (set a)) (z (set b)))
  (= (mem (tuple2 a2 (tuple2 (set1 a1) (set1 b1)))
  (Tuple2 a2 (tuple2 (set1 a1) (set1 b1)) x (t2tb495 (Tuple23 y z)))
  (direct_product (set1 b1) (set1 a1) a2 f g))
  (and (mem (tuple2 a2 (set1 a1)) (Tuple2 a2 (set1 a1) x (t2tb1 y)) f) (mem
  (tuple2 a2 (set1 b1)) (Tuple2 a2 (set1 b1) x (t2tb12 z)) g))))))

;; mem_direct_product
  (assert
  (forall ((a2 ty))
  (forall ((f uni) (g uni) (x uni) (y a) (z b))
  (= (mem (tuple2 a2 (tuple2 a1 b1))
  (Tuple2 a2 (tuple2 a1 b1) x (t2tb13 (Tuple21 y z)))
  (direct_product b1 a1 a2 f g))
  (and (mem (tuple2 a2 a1) (Tuple2 a2 a1 x (t2tb2 y)) f) (mem (tuple2 a2 b1)
  (Tuple2 a2 b1 x (t2tb14 z)) g))))))

;; mem_direct_product
  (assert
  (forall ((b2 ty))
  (forall ((f uni) (g (set (tuple21 (tuple21 a b) b))) (x (tuple21 a b))
  (y uni) (z b))
  (= (mem (tuple2 (tuple2 a1 b1) (tuple2 b2 b1))
  (Tuple2 (tuple2 a1 b1) (tuple2 b2 b1) (t2tb13 x)
  (Tuple2 b2 b1 y (t2tb14 z)))
  (direct_product b1 b2 (tuple2 a1 b1) f (t2tb27 g)))
  (and (mem (tuple2 (tuple2 a1 b1) b2)
  (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) y) f) (mem18 (Tuple24 x z) g))))))

;; mem_direct_product
  (assert
  (forall ((f (set (tuple21 (tuple21 a b) (tuple21 a b))))
  (g (set (tuple21 (tuple21 a b) b))) (x (tuple21 a b)) (y (tuple21 a b))
  (z b))
  (= (mem (tuple2 (tuple2 a1 b1) (tuple2 (tuple2 a1 b1) b1))
  (Tuple2 (tuple2 a1 b1) (tuple2 (tuple2 a1 b1) b1) (t2tb13 x)
  (t2tb28 (Tuple24 y z)))
  (direct_product b1 (tuple2 a1 b1) (tuple2 a1 b1) (t2tb25 f) (t2tb27 g)))
  (and (mem (tuple2 (tuple2 a1 b1) (tuple2 a1 b1))
  (Tuple2 (tuple2 a1 b1) (tuple2 a1 b1) (t2tb13 x) (t2tb13 y)) (t2tb25 f))
  (mem18 (Tuple24 x z) g)))))

(declare-fun t2tb668 ((set (tuple21 (tuple21 a b) (tuple21 b b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) (tuple21 b b))))) (sort
  (set1 (tuple2 (tuple2 a1 b1) (tuple2 b1 b1))) (t2tb668 x))))

(declare-fun tb2t668 (uni) (set (tuple21 (tuple21 a b) (tuple21 b b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a b) (tuple21 b b)))))
  (! (= (tb2t668 (t2tb668 i)) i) :pattern ((t2tb668 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 b1) (tuple2 b1 b1))) j)
     (= (t2tb668 (tb2t668 j)) j)) :pattern ((t2tb668 (tb2t668 j))) )))

(declare-fun t2tb669 ((tuple21 (tuple21 a b) (tuple21 b b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a b) (tuple21 b b)))) (sort
  (tuple2 (tuple2 a1 b1) (tuple2 b1 b1)) (t2tb669 x))))

(declare-fun tb2t669 (uni) (tuple21 (tuple21 a b) (tuple21 b b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a b) (tuple21 b b))))
  (! (= (tb2t669 (t2tb669 i)) i) :pattern ((t2tb669 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 b1) (tuple2 b1 b1)) j)
     (= (t2tb669 (tb2t669 j)) j)) :pattern ((t2tb669 (tb2t669 j))) )))

;; mem_direct_product
  (assert
  (forall ((f (set (tuple21 (tuple21 a b) b))) (g (set (tuple21 (tuple21 a b)
  b))) (x (tuple21 a b)) (y b) (z b))
  (= (mem (tuple2 (tuple2 a1 b1) (tuple2 b1 b1))
  (Tuple2 (tuple2 a1 b1) (tuple2 b1 b1) (t2tb13 x)
  (Tuple2 b1 b1 (t2tb14 y) (t2tb14 z)))
  (direct_product b1 b1 (tuple2 a1 b1) (t2tb27 f) (t2tb27 g)))
  (and (mem18 (Tuple24 x y) f) (mem18 (Tuple24 x z) g)))))

;; mem_direct_product
  (assert
  (forall ((c2 ty))
  (forall ((f (set (tuple21 (tuple21 a b) b))) (g uni) (x (tuple21 a b))
  (y b) (z uni))
  (= (mem (tuple2 (tuple2 a1 b1) (tuple2 b1 c2))
  (Tuple2 (tuple2 a1 b1) (tuple2 b1 c2) (t2tb13 x)
  (Tuple2 b1 c2 (t2tb14 y) z))
  (direct_product c2 b1 (tuple2 a1 b1) (t2tb27 f) g))
  (and (mem18 (Tuple24 x y) f) (mem (tuple2 (tuple2 a1 b1) c2)
  (Tuple2 (tuple2 a1 b1) c2 (t2tb13 x) z) g))))))

;; mem_direct_product
  (assert
  (forall ((f (set (tuple21 (tuple21 a b) a))) (g (set (tuple21 (tuple21 a b)
  b))) (x (tuple21 a b)) (y a) (z b))
  (= (mem (tuple2 (tuple2 a1 b1) (tuple2 a1 b1))
  (Tuple2 (tuple2 a1 b1) (tuple2 a1 b1) (t2tb13 x) (t2tb13 (Tuple21 y z)))
  (direct_product b1 a1 (tuple2 a1 b1) (t2tb29 f) (t2tb27 g)))
  (and (mem (tuple2 (tuple2 a1 b1) a1)
  (Tuple2 (tuple2 a1 b1) a1 (t2tb13 x) (t2tb2 y)) (t2tb29 f)) (mem18
  (Tuple24 x z) g)))))

;; mem_direct_product
  (assert
  (forall ((b2 ty))
  (forall ((f uni) (g (set (tuple21 (set a) (set b)))) (x (set a)) (y uni)
  (z (set b)))
  (= (mem (tuple2 (set1 a1) (tuple2 b2 (set1 b1)))
  (Tuple2 (set1 a1) (tuple2 b2 (set1 b1)) (t2tb1 x)
  (Tuple2 b2 (set1 b1) y (t2tb12 z)))
  (direct_product (set1 b1) b2 (set1 a1) f (t2tb538 g)))
  (and (mem (tuple2 (set1 a1) b2) (Tuple2 (set1 a1) b2 (t2tb1 x) y) f) (mem
  (tuple2 (set1 a1) (set1 b1)) (t2tb495 (Tuple23 x z)) (t2tb538 g)))))))

(declare-fun t2tb569 ((set (tuple21 (set a) (tuple21 (set b) (set b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set a) (tuple21 (set b) (set b)))))) (sort
  (set1 (tuple2 (set1 a1) (tuple2 (set1 b1) (set1 b1)))) (t2tb569 x))))

(declare-fun tb2t569 (uni) (set (tuple21 (set a) (tuple21 (set b) (set b)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set a) (tuple21 (set b) (set b))))))
  (! (= (tb2t569 (t2tb569 i)) i) :pattern ((t2tb569 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 a1) (tuple2 (set1 b1) (set1 b1)))) j)
     (= (t2tb569 (tb2t569 j)) j)) :pattern ((t2tb569 (tb2t569 j))) )))

(declare-fun t2tb570 ((tuple21 (set a) (tuple21 (set b) (set b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set a) (tuple21 (set b) (set b))))) (sort
  (tuple2 (set1 a1) (tuple2 (set1 b1) (set1 b1))) (t2tb570 x))))

(declare-fun tb2t570 (uni) (tuple21 (set a) (tuple21 (set b) (set b))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set a) (tuple21 (set b) (set b)))))
  (! (= (tb2t570 (t2tb570 i)) i) :pattern ((t2tb570 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 a1) (tuple2 (set1 b1) (set1 b1))) j)
     (= (t2tb570 (tb2t570 j)) j)) :pattern ((t2tb570 (tb2t570 j))) )))

;; mem_direct_product
  (assert
  (forall ((f (set (tuple21 (set a) (set b)))) (g (set (tuple21 (set a)
  (set b)))) (x (set a)) (y (set b)) (z (set b)))
  (= (mem (tuple2 (set1 a1) (tuple2 (set1 b1) (set1 b1)))
  (Tuple2 (set1 a1) (tuple2 (set1 b1) (set1 b1)) (t2tb1 x)
  (Tuple2 (set1 b1) (set1 b1) (t2tb12 y) (t2tb12 z)))
  (direct_product (set1 b1) (set1 b1) (set1 a1) (t2tb538 f) (t2tb538 g)))
  (and (mem (tuple2 (set1 a1) (set1 b1)) (t2tb495 (Tuple23 x y)) (t2tb538 f))
  (mem (tuple2 (set1 a1) (set1 b1)) (t2tb495 (Tuple23 x z)) (t2tb538 g))))))

;; mem_direct_product
  (assert
  (forall ((c2 ty))
  (forall ((f (set (tuple21 (set a) (set b)))) (g uni) (x (set a))
  (y (set b)) (z uni))
  (= (mem (tuple2 (set1 a1) (tuple2 (set1 b1) c2))
  (Tuple2 (set1 a1) (tuple2 (set1 b1) c2) (t2tb1 x)
  (Tuple2 (set1 b1) c2 (t2tb12 y) z))
  (direct_product c2 (set1 b1) (set1 a1) (t2tb538 f) g))
  (and (mem (tuple2 (set1 a1) (set1 b1)) (t2tb495 (Tuple23 x y)) (t2tb538 f))
  (mem (tuple2 (set1 a1) c2) (Tuple2 (set1 a1) c2 (t2tb1 x) z) g))))))

(declare-fun t2tb571 ((set (tuple21 (set a) (tuple21 (set a) (set b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set a) (tuple21 (set a) (set b)))))) (sort
  (set1 (tuple2 (set1 a1) (tuple2 (set1 a1) (set1 b1)))) (t2tb571 x))))

(declare-fun tb2t571 (uni) (set (tuple21 (set a) (tuple21 (set a) (set b)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set a) (tuple21 (set a) (set b))))))
  (! (= (tb2t571 (t2tb571 i)) i) :pattern ((t2tb571 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 a1) (tuple2 (set1 a1) (set1 b1)))) j)
     (= (t2tb571 (tb2t571 j)) j)) :pattern ((t2tb571 (tb2t571 j))) )))

(declare-fun t2tb572 ((tuple21 (set a) (tuple21 (set a) (set b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set a) (tuple21 (set a) (set b))))) (sort
  (tuple2 (set1 a1) (tuple2 (set1 a1) (set1 b1))) (t2tb572 x))))

(declare-fun tb2t572 (uni) (tuple21 (set a) (tuple21 (set a) (set b))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set a) (tuple21 (set a) (set b)))))
  (! (= (tb2t572 (t2tb572 i)) i) :pattern ((t2tb572 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 a1) (tuple2 (set1 a1) (set1 b1))) j)
     (= (t2tb572 (tb2t572 j)) j)) :pattern ((t2tb572 (tb2t572 j))) )))

;; mem_direct_product
  (assert
  (forall ((f (set (tuple21 (set a) (set a)))) (g (set (tuple21 (set a)
  (set b)))) (x (set a)) (y (set a)) (z (set b)))
  (= (mem (tuple2 (set1 a1) (tuple2 (set1 a1) (set1 b1)))
  (Tuple2 (set1 a1) (tuple2 (set1 a1) (set1 b1)) (t2tb1 x)
  (t2tb495 (Tuple23 y z)))
  (direct_product (set1 b1) (set1 a1) (set1 a1) (t2tb565 f) (t2tb538 g)))
  (and (mem (tuple2 (set1 a1) (set1 a1))
  (Tuple2 (set1 a1) (set1 a1) (t2tb1 x) (t2tb1 y)) (t2tb565 f)) (mem
  (tuple2 (set1 a1) (set1 b1)) (t2tb495 (Tuple23 x z)) (t2tb538 g))))))

;; mem_direct_product
  (assert
  (forall ((b2 ty))
  (forall ((f uni) (g (set (tuple21 a b))) (x a) (y uni) (z b))
  (= (mem (tuple2 a1 (tuple2 b2 b1))
  (Tuple2 a1 (tuple2 b2 b1) (t2tb2 x) (Tuple2 b2 b1 y (t2tb14 z)))
  (direct_product b1 b2 a1 f (t2tb11 g)))
  (and (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) y) f) (mem3 (Tuple21 x z)
  g))))))

;; mem_direct_product
  (assert
  (forall ((f (set (tuple21 a (tuple21 a b)))) (g (set (tuple21 a b))) (x a)
  (y (tuple21 a b)) (z b))
  (= (mem (tuple2 a1 (tuple2 (tuple2 a1 b1) b1))
  (Tuple2 a1 (tuple2 (tuple2 a1 b1) b1) (t2tb2 x) (t2tb28 (Tuple24 y z)))
  (direct_product b1 (tuple2 a1 b1) a1 (t2tb41 f) (t2tb11 g)))
  (and (mem (tuple2 a1 (tuple2 a1 b1))
  (Tuple2 a1 (tuple2 a1 b1) (t2tb2 x) (t2tb13 y)) (t2tb41 f)) (mem3
  (Tuple21 x z) g)))))

(declare-fun t2tb59 ((set (tuple21 a (tuple21 b b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (tuple21 b b))))) (sort
  (set1 (tuple2 a1 (tuple2 b1 b1))) (t2tb59 x))))

(declare-fun tb2t59 (uni) (set (tuple21 a (tuple21 b b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (tuple21 b b)))))
  (! (= (tb2t59 (t2tb59 i)) i) :pattern ((t2tb59 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (tuple2 b1 b1))) j)
     (= (t2tb59 (tb2t59 j)) j)) :pattern ((t2tb59 (tb2t59 j))) )))

(declare-fun t2tb60 ((tuple21 a (tuple21 b b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (tuple21 b b)))) (sort (tuple2 a1 (tuple2 b1 b1))
  (t2tb60 x))))

(declare-fun tb2t60 (uni) (tuple21 a (tuple21 b b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (tuple21 b b))))
  (! (= (tb2t60 (t2tb60 i)) i) :pattern ((t2tb60 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (tuple2 b1 b1)) j) (= (t2tb60 (tb2t60 j)) j)) :pattern (
  (t2tb60 (tb2t60 j))) )))

;; mem_direct_product
  (assert
  (forall ((f (set (tuple21 a b))) (g (set (tuple21 a b))) (x a) (y b) (z b))
  (= (mem (tuple2 a1 (tuple2 b1 b1))
  (Tuple2 a1 (tuple2 b1 b1) (t2tb2 x) (Tuple2 b1 b1 (t2tb14 y) (t2tb14 z)))
  (direct_product b1 b1 a1 (t2tb11 f) (t2tb11 g)))
  (and (mem3 (Tuple21 x y) f) (mem3 (Tuple21 x z) g)))))

;; mem_direct_product
  (assert
  (forall ((c2 ty))
  (forall ((f (set (tuple21 a b))) (g uni) (x a) (y b) (z uni))
  (= (mem (tuple2 a1 (tuple2 b1 c2))
  (Tuple2 a1 (tuple2 b1 c2) (t2tb2 x) (Tuple2 b1 c2 (t2tb14 y) z))
  (direct_product c2 b1 a1 (t2tb11 f) g))
  (and (mem3 (Tuple21 x y) f) (mem (tuple2 a1 c2) (Tuple2 a1 c2 (t2tb2 x) z)
  g))))))

;; mem_direct_product
  (assert
  (forall ((f (set (tuple21 a a))) (g (set (tuple21 a b))) (x a) (y a) (z b))
  (= (mem (tuple2 a1 (tuple2 a1 b1))
  (Tuple2 a1 (tuple2 a1 b1) (t2tb2 x) (t2tb13 (Tuple21 y z)))
  (direct_product b1 a1 a1 (t2tb4 f) (t2tb11 g)))
  (and (mem (tuple2 a1 a1) (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y)) (t2tb4 f))
  (mem3 (Tuple21 x z) g)))))

;; mem_direct_product
  (assert
  (forall ((a2 ty) (b2 ty) (c2 ty))
  (forall ((f uni) (g uni) (x uni) (y uni) (z uni))
  (= (mem (tuple2 a2 (tuple2 b2 c2))
  (Tuple2 a2 (tuple2 b2 c2) x (Tuple2 b2 c2 y z))
  (direct_product c2 b2 a2 f g))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) f) (mem (tuple2 a2 c2)
  (Tuple2 a2 c2 x z) g))))))

(declare-fun prj1 (ty ty uni) uni)

;; prj1_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni)) (sort (set1 (tuple2 (tuple2 a2 b2) a2)) (prj1 b2 a2 x)))))

(declare-fun t2tb670 ((tuple21 (set (tuple21 a b)) (set b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a b)) (set b)))) (sort
  (tuple2 (set1 (tuple2 a1 b1)) (set1 b1)) (t2tb670 x))))

(declare-fun tb2t670 (uni) (tuple21 (set (tuple21 a b)) (set b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a b)) (set b))))
  (! (= (tb2t670 (t2tb670 i)) i) :pattern ((t2tb670 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 a1 b1)) (set1 b1)) j)
     (= (t2tb670 (tb2t670 j)) j)) :pattern ((t2tb670 (tb2t670 j))) )))

;; mem_proj_op_1
  (assert
  (forall ((s (set (tuple21 a b))) (t (set b)) (x (tuple21 a b)) (y b)
  (z (tuple21 a b)))
  (= (mem (tuple2 (tuple2 (tuple2 a1 b1) b1) (tuple2 a1 b1))
  (Tuple2 (tuple2 (tuple2 a1 b1) b1) (tuple2 a1 b1) (t2tb28 (Tuple24 x y))
  (t2tb13 z))
  (prj1 b1 (tuple2 a1 b1)
  (Tuple2 (set1 (tuple2 a1 b1)) (set1 b1) (t2tb11 s) (t2tb12 t))))
  (and (mem (tuple2 (tuple2 (tuple2 a1 b1) b1) (tuple2 a1 b1))
  (Tuple2 (tuple2 (tuple2 a1 b1) b1) (tuple2 a1 b1) (t2tb28 (Tuple24 x y))
  (t2tb13 z))
  (times (tuple2 a1 b1) (tuple2 (tuple2 a1 b1) b1) (t2tb27 (times7 s t))
  (t2tb11 s))) (= z x)))))

(declare-fun t2tb574 ((set (tuple21 (tuple21 (set a) (set b)) (set a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (set a) (set b)) (set a))))) (sort
  (set1 (tuple2 (tuple2 (set1 a1) (set1 b1)) (set1 a1))) (t2tb574 x))))

(declare-fun tb2t574 (uni) (set (tuple21 (tuple21 (set a) (set b)) (set a))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (set a) (set b)) (set a)))))
  (! (= (tb2t574 (t2tb574 i)) i) :pattern ((t2tb574 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 (set1 a1) (set1 b1)) (set1 a1))) j)
     (= (t2tb574 (tb2t574 j)) j)) :pattern ((t2tb574 (tb2t574 j))) )))

(declare-fun t2tb575 ((tuple21 (set (set a)) (set (set b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (set a)) (set (set b))))) (sort
  (tuple2 (set1 (set1 a1)) (set1 (set1 b1))) (t2tb575 x))))

(declare-fun tb2t575 (uni) (tuple21 (set (set a)) (set (set b))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (set a)) (set (set b)))))
  (! (= (tb2t575 (t2tb575 i)) i) :pattern ((t2tb575 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (set1 a1)) (set1 (set1 b1))) j)
     (= (t2tb575 (tb2t575 j)) j)) :pattern ((t2tb575 (tb2t575 j))) )))

(declare-fun t2tb576 ((tuple21 (tuple21 (set a) (set b)) (set a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (set a) (set b)) (set a)))) (sort
  (tuple2 (tuple2 (set1 a1) (set1 b1)) (set1 a1)) (t2tb576 x))))

(declare-fun tb2t576 (uni) (tuple21 (tuple21 (set a) (set b)) (set a)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (set a) (set b)) (set a))))
  (! (= (tb2t576 (t2tb576 i)) i) :pattern ((t2tb576 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 (set1 a1) (set1 b1)) (set1 a1)) j)
     (= (t2tb576 (tb2t576 j)) j)) :pattern ((t2tb576 (tb2t576 j))) )))

;; mem_proj_op_1
  (assert
  (forall ((s (set (set a))) (t (set (set b))) (x (set a)) (y (set b))
  (z (set a)))
  (= (mem (tuple2 (tuple2 (set1 a1) (set1 b1)) (set1 a1))
  (Tuple2 (tuple2 (set1 a1) (set1 b1)) (set1 a1) (t2tb495 (Tuple23 x y))
  (t2tb1 z))
  (prj1 (set1 b1) (set1 a1)
  (Tuple2 (set1 (set1 a1)) (set1 (set1 b1)) (t2tb s) (t2tb44 t))))
  (and (mem (tuple2 (tuple2 (set1 a1) (set1 b1)) (set1 a1))
  (Tuple2 (tuple2 (set1 a1) (set1 b1)) (set1 a1) (t2tb495 (Tuple23 x y))
  (t2tb1 z))
  (times (set1 a1) (tuple2 (set1 a1) (set1 b1))
  (times (set1 b1) (set1 a1) (t2tb s) (t2tb44 t)) (t2tb s))) (= z x)))))

;; mem_proj_op_1
  (assert
  (forall ((s (set a)) (t (set b)) (x a) (y b) (z a))
  (= (mem (tuple2 (tuple2 a1 b1) a1)
  (Tuple2 (tuple2 a1 b1) a1 (t2tb13 (Tuple21 x y)) (t2tb2 z))
  (prj1 b1 a1 (t2tb495 (Tuple23 s t))))
  (and (mem (tuple2 (tuple2 a1 b1) a1)
  (Tuple2 (tuple2 a1 b1) a1 (t2tb13 (Tuple21 x y)) (t2tb2 z))
  (times a1 (tuple2 a1 b1) (t2tb11 (times2 s t)) (t2tb1 s))) (= z x)))))

;; mem_proj_op_1
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (x uni) (y uni) (z uni))
  (=> (sort a2 x)
  (=> (sort a2 z)
  (= (mem (tuple2 (tuple2 a2 b2) a2)
  (Tuple2 (tuple2 a2 b2) a2 (Tuple2 a2 b2 x y) z)
  (prj1 b2 a2 (Tuple2 (set1 a2) (set1 b2) s t)))
  (and (mem (tuple2 (tuple2 a2 b2) a2)
  (Tuple2 (tuple2 a2 b2) a2 (Tuple2 a2 b2 x y) z)
  (times a2 (tuple2 a2 b2) (times b2 a2 s t) s)) (= z x))))))))

(declare-fun prj2 (ty ty uni) uni)

;; prj2_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni)) (sort (set1 (tuple2 (tuple2 a2 b2) b2)) (prj2 b2 a2 x)))))

(declare-fun prj21 ((tuple21 (set a) (set b))) (set (tuple21 (tuple21 a b)
  b)))

;; mem_proj_op_2
  (assert
  (forall ((s (set (tuple21 a b))) (t (set b)) (x (tuple21 a b)) (y b) (z b))
  (= (mem (tuple2 (tuple2 (tuple2 a1 b1) b1) b1)
  (Tuple2 (tuple2 (tuple2 a1 b1) b1) b1 (t2tb28 (Tuple24 x y)) (t2tb14 z))
  (prj2 b1 (tuple2 a1 b1)
  (Tuple2 (set1 (tuple2 a1 b1)) (set1 b1) (t2tb11 s) (t2tb12 t))))
  (and (mem (tuple2 (tuple2 (tuple2 a1 b1) b1) b1)
  (Tuple2 (tuple2 (tuple2 a1 b1) b1) b1 (t2tb28 (Tuple24 x y)) (t2tb14 z))
  (times b1 (tuple2 (tuple2 a1 b1) b1) (t2tb27 (times7 s t)) (t2tb12 t)))
  (= z y)))))

(declare-fun t2tb577 ((set (tuple21 (tuple21 (set a) (set b)) (set b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (set a) (set b)) (set b))))) (sort
  (set1 (tuple2 (tuple2 (set1 a1) (set1 b1)) (set1 b1))) (t2tb577 x))))

(declare-fun tb2t577 (uni) (set (tuple21 (tuple21 (set a) (set b)) (set b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (set a) (set b)) (set b)))))
  (! (= (tb2t577 (t2tb577 i)) i) :pattern ((t2tb577 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 (set1 a1) (set1 b1)) (set1 b1))) j)
     (= (t2tb577 (tb2t577 j)) j)) :pattern ((t2tb577 (tb2t577 j))) )))

(declare-fun t2tb578 ((tuple21 (tuple21 (set a) (set b)) (set b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (set a) (set b)) (set b)))) (sort
  (tuple2 (tuple2 (set1 a1) (set1 b1)) (set1 b1)) (t2tb578 x))))

(declare-fun tb2t578 (uni) (tuple21 (tuple21 (set a) (set b)) (set b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (set a) (set b)) (set b))))
  (! (= (tb2t578 (t2tb578 i)) i) :pattern ((t2tb578 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 (set1 a1) (set1 b1)) (set1 b1)) j)
     (= (t2tb578 (tb2t578 j)) j)) :pattern ((t2tb578 (tb2t578 j))) )))

;; mem_proj_op_2
  (assert
  (forall ((s (set (set a))) (t (set (set b))) (x (set a)) (y (set b))
  (z (set b)))
  (= (mem (tuple2 (tuple2 (set1 a1) (set1 b1)) (set1 b1))
  (Tuple2 (tuple2 (set1 a1) (set1 b1)) (set1 b1) (t2tb495 (Tuple23 x y))
  (t2tb12 z))
  (prj2 (set1 b1) (set1 a1)
  (Tuple2 (set1 (set1 a1)) (set1 (set1 b1)) (t2tb s) (t2tb44 t))))
  (and (mem (tuple2 (tuple2 (set1 a1) (set1 b1)) (set1 b1))
  (Tuple2 (tuple2 (set1 a1) (set1 b1)) (set1 b1) (t2tb495 (Tuple23 x y))
  (t2tb12 z))
  (times (set1 b1) (tuple2 (set1 a1) (set1 b1))
  (times (set1 b1) (set1 a1) (t2tb s) (t2tb44 t)) (t2tb44 t))) (= z y)))))

;; mem_proj_op_2
  (assert
  (forall ((s (set a)) (t (set b)) (x a) (y b) (z b))
  (= (mem18 (Tuple24 (Tuple21 x y) z) (prj21 (Tuple23 s t)))
  (and (mem18 (Tuple24 (Tuple21 x y) z) (times7 (times2 s t) t)) (= z y)))))

;; mem_proj_op_2
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (x uni) (y uni) (z uni))
  (=> (sort b2 y)
  (=> (sort b2 z)
  (= (mem (tuple2 (tuple2 a2 b2) b2)
  (Tuple2 (tuple2 a2 b2) b2 (Tuple2 a2 b2 x y) z)
  (prj2 b2 a2 (Tuple2 (set1 a2) (set1 b2) s t)))
  (and (mem (tuple2 (tuple2 a2 b2) b2)
  (Tuple2 (tuple2 a2 b2) b2 (Tuple2 a2 b2 x y) z)
  (times b2 (tuple2 a2 b2) (times b2 a2 s t) t)) (= z y))))))))

(declare-fun parallel_product (ty ty ty ty uni uni) uni)

;; parallel_product_sort
  (assert
  (forall ((a2 ty) (b2 ty) (c2 ty) (d ty))
  (forall ((x uni) (x1 uni)) (sort
  (set1 (tuple2 (tuple2 a2 c2) (tuple2 b2 d)))
  (parallel_product d c2 b2 a2 x x1)))))

;; mem_parallel_product
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((h uni) (k (set (tuple21 (tuple21 a b) b))) (x uni) (y (tuple21 a
  b)) (z uni) (w b))
  (= (mem (tuple2 (tuple2 a2 (tuple2 a1 b1)) (tuple2 b2 b1))
  (Tuple2 (tuple2 a2 (tuple2 a1 b1)) (tuple2 b2 b1)
  (Tuple2 a2 (tuple2 a1 b1) x (t2tb13 y)) (Tuple2 b2 b1 z (t2tb14 w)))
  (parallel_product b1 (tuple2 a1 b1) b2 a2 h (t2tb27 k)))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x z) h) (mem18 (Tuple24 y w) k))))))

;; mem_parallel_product
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((h uni) (k (set (tuple21 (set a) (set b)))) (x uni) (y (set a))
  (z uni) (w (set b)))
  (= (mem (tuple2 (tuple2 a2 (set1 a1)) (tuple2 b2 (set1 b1)))
  (Tuple2 (tuple2 a2 (set1 a1)) (tuple2 b2 (set1 b1))
  (Tuple2 a2 (set1 a1) x (t2tb1 y)) (Tuple2 b2 (set1 b1) z (t2tb12 w)))
  (parallel_product (set1 b1) (set1 a1) b2 a2 h (t2tb538 k)))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x z) h) (mem
  (tuple2 (set1 a1) (set1 b1)) (t2tb495 (Tuple23 y w)) (t2tb538 k)))))))

;; mem_parallel_product
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((h uni) (k (set (tuple21 a b))) (x uni) (y a) (z uni) (w b))
  (= (mem (tuple2 (tuple2 a2 a1) (tuple2 b2 b1))
  (Tuple2 (tuple2 a2 a1) (tuple2 b2 b1) (Tuple2 a2 a1 x (t2tb2 y))
  (Tuple2 b2 b1 z (t2tb14 w))) (parallel_product b1 a1 b2 a2 h (t2tb11 k)))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x z) h) (mem3 (Tuple21 y w) k))))))

;; mem_parallel_product
  (assert
  (forall ((a2 ty) (c2 ty))
  (forall ((h uni) (k uni) (x uni) (y uni) (z (tuple21 a b)) (w b))
  (= (mem (tuple2 (tuple2 a2 c2) (tuple2 (tuple2 a1 b1) b1))
  (Tuple2 (tuple2 a2 c2) (tuple2 (tuple2 a1 b1) b1) (Tuple2 a2 c2 x y)
  (t2tb28 (Tuple24 z w))) (parallel_product b1 c2 (tuple2 a1 b1) a2 h k))
  (and (mem (tuple2 a2 (tuple2 a1 b1))
  (Tuple2 a2 (tuple2 a1 b1) x (t2tb13 z)) h) (mem (tuple2 c2 b1)
  (Tuple2 c2 b1 y (t2tb14 w)) k))))))

;; mem_parallel_product
  (assert
  (forall ((a2 ty))
  (forall ((h uni) (k (set (tuple21 (tuple21 a b) b))) (x uni) (y (tuple21 a
  b)) (z (tuple21 a b)) (w b))
  (= (mem (tuple2 (tuple2 a2 (tuple2 a1 b1)) (tuple2 (tuple2 a1 b1) b1))
  (Tuple2 (tuple2 a2 (tuple2 a1 b1)) (tuple2 (tuple2 a1 b1) b1)
  (Tuple2 a2 (tuple2 a1 b1) x (t2tb13 y)) (t2tb28 (Tuple24 z w)))
  (parallel_product b1 (tuple2 a1 b1) (tuple2 a1 b1) a2 h (t2tb27 k)))
  (and (mem (tuple2 a2 (tuple2 a1 b1))
  (Tuple2 a2 (tuple2 a1 b1) x (t2tb13 z)) h) (mem18 (Tuple24 y w) k))))))

;; mem_parallel_product
  (assert
  (forall ((a2 ty))
  (forall ((h uni) (k (set (tuple21 a b))) (x uni) (y a) (z (tuple21 a b))
  (w b))
  (= (mem (tuple2 (tuple2 a2 a1) (tuple2 (tuple2 a1 b1) b1))
  (Tuple2 (tuple2 a2 a1) (tuple2 (tuple2 a1 b1) b1)
  (Tuple2 a2 a1 x (t2tb2 y)) (t2tb28 (Tuple24 z w)))
  (parallel_product b1 a1 (tuple2 a1 b1) a2 h (t2tb11 k)))
  (and (mem (tuple2 a2 (tuple2 a1 b1))
  (Tuple2 a2 (tuple2 a1 b1) x (t2tb13 z)) h) (mem3 (Tuple21 y w) k))))))

;; mem_parallel_product
  (assert
  (forall ((a2 ty) (c2 ty))
  (forall ((h uni) (k uni) (x uni) (y uni) (z (set a)) (w (set b)))
  (= (mem (tuple2 (tuple2 a2 c2) (tuple2 (set1 a1) (set1 b1)))
  (Tuple2 (tuple2 a2 c2) (tuple2 (set1 a1) (set1 b1)) (Tuple2 a2 c2 x y)
  (t2tb495 (Tuple23 z w))) (parallel_product (set1 b1) c2 (set1 a1) a2 h k))
  (and (mem (tuple2 a2 (set1 a1)) (Tuple2 a2 (set1 a1) x (t2tb1 z)) h) (mem
  (tuple2 c2 (set1 b1)) (Tuple2 c2 (set1 b1) y (t2tb12 w)) k))))))

;; mem_parallel_product
  (assert
  (forall ((a2 ty))
  (forall ((h uni) (k (set (tuple21 (set a) (set b)))) (x uni) (y (set a))
  (z (set a)) (w (set b)))
  (= (mem (tuple2 (tuple2 a2 (set1 a1)) (tuple2 (set1 a1) (set1 b1)))
  (Tuple2 (tuple2 a2 (set1 a1)) (tuple2 (set1 a1) (set1 b1))
  (Tuple2 a2 (set1 a1) x (t2tb1 y)) (t2tb495 (Tuple23 z w)))
  (parallel_product (set1 b1) (set1 a1) (set1 a1) a2 h (t2tb538 k)))
  (and (mem (tuple2 a2 (set1 a1)) (Tuple2 a2 (set1 a1) x (t2tb1 z)) h) (mem
  (tuple2 (set1 a1) (set1 b1)) (t2tb495 (Tuple23 y w)) (t2tb538 k)))))))

;; mem_parallel_product
  (assert
  (forall ((a2 ty) (c2 ty))
  (forall ((h uni) (k uni) (x uni) (y uni) (z a) (w b))
  (= (mem (tuple2 (tuple2 a2 c2) (tuple2 a1 b1))
  (Tuple2 (tuple2 a2 c2) (tuple2 a1 b1) (Tuple2 a2 c2 x y)
  (t2tb13 (Tuple21 z w))) (parallel_product b1 c2 a1 a2 h k))
  (and (mem (tuple2 a2 a1) (Tuple2 a2 a1 x (t2tb2 z)) h) (mem (tuple2 c2 b1)
  (Tuple2 c2 b1 y (t2tb14 w)) k))))))

;; mem_parallel_product
  (assert
  (forall ((a2 ty))
  (forall ((h uni) (k (set (tuple21 (tuple21 a b) b))) (x uni) (y (tuple21 a
  b)) (z a) (w b))
  (= (mem (tuple2 (tuple2 a2 (tuple2 a1 b1)) (tuple2 a1 b1))
  (Tuple2 (tuple2 a2 (tuple2 a1 b1)) (tuple2 a1 b1)
  (Tuple2 a2 (tuple2 a1 b1) x (t2tb13 y)) (t2tb13 (Tuple21 z w)))
  (parallel_product b1 (tuple2 a1 b1) a1 a2 h (t2tb27 k)))
  (and (mem (tuple2 a2 a1) (Tuple2 a2 a1 x (t2tb2 z)) h) (mem18 (Tuple24 y w)
  k))))))

;; mem_parallel_product
  (assert
  (forall ((a2 ty))
  (forall ((h uni) (k (set (tuple21 a b))) (x uni) (y a) (z a) (w b))
  (= (mem (tuple2 (tuple2 a2 a1) (tuple2 a1 b1))
  (Tuple2 (tuple2 a2 a1) (tuple2 a1 b1) (Tuple2 a2 a1 x (t2tb2 y))
  (t2tb13 (Tuple21 z w))) (parallel_product b1 a1 a1 a2 h (t2tb11 k)))
  (and (mem (tuple2 a2 a1) (Tuple2 a2 a1 x (t2tb2 z)) h) (mem3 (Tuple21 y w)
  k))))))

;; mem_parallel_product
  (assert
  (forall ((b2 ty) (d ty))
  (forall ((h uni) (k uni) (x (tuple21 a b)) (y b) (z uni) (w uni))
  (= (mem (tuple2 (tuple2 (tuple2 a1 b1) b1) (tuple2 b2 d))
  (Tuple2 (tuple2 (tuple2 a1 b1) b1) (tuple2 b2 d) (t2tb28 (Tuple24 x y))
  (Tuple2 b2 d z w)) (parallel_product d b1 b2 (tuple2 a1 b1) h k))
  (and (mem (tuple2 (tuple2 a1 b1) b2)
  (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) z) h) (mem (tuple2 b1 d)
  (Tuple2 b1 d (t2tb14 y) w) k))))))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 (tuple21 a b) (tuple21 a b)))) (k (set (tuple21 b
  b))) (x (tuple21 a b)) (y b) (z (tuple21 a b)) (w b))
  (= (mem (tuple2 (tuple2 (tuple2 a1 b1) b1) (tuple2 (tuple2 a1 b1) b1))
  (Tuple2 (tuple2 (tuple2 a1 b1) b1) (tuple2 (tuple2 a1 b1) b1)
  (t2tb28 (Tuple24 x y)) (t2tb28 (Tuple24 z w)))
  (parallel_product b1 b1 (tuple2 a1 b1) (tuple2 a1 b1) (t2tb25 h)
  (t2tb35 k)))
  (and (mem (tuple2 (tuple2 a1 b1) (tuple2 a1 b1))
  (Tuple2 (tuple2 a1 b1) (tuple2 a1 b1) (t2tb13 x) (t2tb13 z)) (t2tb25 h))
  (mem (tuple2 b1 b1) (Tuple2 b1 b1 (t2tb14 y) (t2tb14 w)) (t2tb35 k))))))

(declare-fun t2tb671 ((set (tuple21 (tuple21 (tuple21 a b) (tuple21 a b))
  (tuple21 b b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 a b) (tuple21 a b)) (tuple21 b
  b))))) (sort
  (set1 (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 b1)) (tuple2 b1 b1)))
  (t2tb671 x))))

(declare-fun tb2t671 (uni) (set (tuple21 (tuple21 (tuple21 a b) (tuple21 a
  b)) (tuple21 b b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 a b) (tuple21 a b)) (tuple21 b
  b))))) (! (= (tb2t671 (t2tb671 i)) i) :pattern ((t2tb671 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 b1)) (tuple2 b1 b1))) j)
     (= (t2tb671 (tb2t671 j)) j)) :pattern ((t2tb671 (tb2t671 j))) )))

(declare-fun t2tb672 ((tuple21 (tuple21 (tuple21 a b) (tuple21 a b))
  (tuple21 b b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 a b) (tuple21 a b)) (tuple21 b b))))
  (sort (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 b1)) (tuple2 b1 b1))
  (t2tb672 x))))

(declare-fun tb2t672 (uni) (tuple21 (tuple21 (tuple21 a b) (tuple21 a b))
  (tuple21 b b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 a b) (tuple21 a b)) (tuple21 b b))))
  (! (= (tb2t672 (t2tb672 i)) i) :pattern ((t2tb672 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 b1)) (tuple2 b1 b1))
     j) (= (t2tb672 (tb2t672 j)) j)) :pattern ((t2tb672 (tb2t672 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 (tuple21 a b) b))) (k (set (tuple21 (tuple21 a b)
  b))) (x (tuple21 a b)) (y (tuple21 a b)) (z b) (w b))
  (= (mem (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 b1)) (tuple2 b1 b1))
  (Tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 b1)) (tuple2 b1 b1)
  (Tuple2 (tuple2 a1 b1) (tuple2 a1 b1) (t2tb13 x) (t2tb13 y))
  (Tuple2 b1 b1 (t2tb14 z) (t2tb14 w)))
  (parallel_product b1 (tuple2 a1 b1) b1 (tuple2 a1 b1) (t2tb27 h)
  (t2tb27 k))) (and (mem18 (Tuple24 x z) h) (mem18 (Tuple24 y w) k)))))

;; mem_parallel_product
  (assert
  (forall ((d ty))
  (forall ((h (set (tuple21 (tuple21 a b) b))) (k uni) (x (tuple21 a b))
  (y b) (z b) (w uni))
  (= (mem (tuple2 (tuple2 (tuple2 a1 b1) b1) (tuple2 b1 d))
  (Tuple2 (tuple2 (tuple2 a1 b1) b1) (tuple2 b1 d) (t2tb28 (Tuple24 x y))
  (Tuple2 b1 d (t2tb14 z) w))
  (parallel_product d b1 b1 (tuple2 a1 b1) (t2tb27 h) k))
  (and (mem18 (Tuple24 x z) h) (mem (tuple2 b1 d) (Tuple2 b1 d (t2tb14 y) w)
  k))))))

(declare-fun t2tb579 ((tuple21 (tuple21 a b) (set a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a b) (set a)))) (sort
  (tuple2 (tuple2 a1 b1) (set1 a1)) (t2tb579 x))))

(declare-fun tb2t579 (uni) (tuple21 (tuple21 a b) (set a)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a b) (set a))))
  (! (= (tb2t579 (t2tb579 i)) i) :pattern ((t2tb579 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 b1) (set1 a1)) j)
     (= (t2tb579 (tb2t579 j)) j)) :pattern ((t2tb579 (tb2t579 j))) )))

(declare-fun t2tb673 ((set (tuple21 (tuple21 (tuple21 a b) (set a))
  (tuple21 b (set b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 a b) (set a)) (tuple21 b
  (set b)))))) (sort
  (set1 (tuple2 (tuple2 (tuple2 a1 b1) (set1 a1)) (tuple2 b1 (set1 b1))))
  (t2tb673 x))))

(declare-fun tb2t673 (uni) (set (tuple21 (tuple21 (tuple21 a b) (set a))
  (tuple21 b (set b)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 a b) (set a)) (tuple21 b
  (set b)))))) (! (= (tb2t673 (t2tb673 i)) i) :pattern ((t2tb673 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 (tuple2 a1 b1) (set1 a1)) (tuple2 b1 (set1 b1))))
     j) (= (t2tb673 (tb2t673 j)) j)) :pattern ((t2tb673 (tb2t673 j))) )))

(declare-fun t2tb674 ((tuple21 (tuple21 (tuple21 a b) (set a)) (tuple21 b
  (set b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 a b) (set a)) (tuple21 b (set b)))))
  (sort (tuple2 (tuple2 (tuple2 a1 b1) (set1 a1)) (tuple2 b1 (set1 b1)))
  (t2tb674 x))))

(declare-fun tb2t674 (uni) (tuple21 (tuple21 (tuple21 a b) (set a))
  (tuple21 b (set b))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 a b) (set a)) (tuple21 b (set b)))))
  (! (= (tb2t674 (t2tb674 i)) i) :pattern ((t2tb674 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (tuple2 (tuple2 (tuple2 a1 b1) (set1 a1)) (tuple2 b1 (set1 b1))) j)
     (= (t2tb674 (tb2t674 j)) j)) :pattern ((t2tb674 (tb2t674 j))) )))

(declare-fun t2tb611 ((tuple21 b (set b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 b (set b)))) (sort (tuple2 b1 (set1 b1)) (t2tb611 x))))

(declare-fun tb2t611 (uni) (tuple21 b (set b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 b (set b))))
  (! (= (tb2t611 (t2tb611 i)) i) :pattern ((t2tb611 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 b1 (set1 b1)) j) (= (t2tb611 (tb2t611 j)) j)) :pattern (
  (t2tb611 (tb2t611 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 (tuple21 a b) b))) (k (set (tuple21 (set a)
  (set b)))) (x (tuple21 a b)) (y (set a)) (z b) (w (set b)))
  (= (mem (tuple2 (tuple2 (tuple2 a1 b1) (set1 a1)) (tuple2 b1 (set1 b1)))
  (Tuple2 (tuple2 (tuple2 a1 b1) (set1 a1)) (tuple2 b1 (set1 b1))
  (Tuple2 (tuple2 a1 b1) (set1 a1) (t2tb13 x) (t2tb1 y))
  (Tuple2 b1 (set1 b1) (t2tb14 z) (t2tb12 w)))
  (parallel_product (set1 b1) (set1 a1) b1 (tuple2 a1 b1) (t2tb27 h)
  (t2tb538 k)))
  (and (mem18 (Tuple24 x z) h) (mem (tuple2 (set1 a1) (set1 b1))
  (t2tb495 (Tuple23 y w)) (t2tb538 k))))))

(declare-fun t2tb675 ((set (tuple21 (tuple21 (tuple21 a b) a) (tuple21 b
  b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 a b) a) (tuple21 b b))))) (sort
  (set1 (tuple2 (tuple2 (tuple2 a1 b1) a1) (tuple2 b1 b1))) (t2tb675 x))))

(declare-fun tb2t675 (uni) (set (tuple21 (tuple21 (tuple21 a b) a) (tuple21 b
  b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 a b) a) (tuple21 b b)))))
  (! (= (tb2t675 (t2tb675 i)) i) :pattern ((t2tb675 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 (tuple2 a1 b1) a1) (tuple2 b1 b1))) j)
     (= (t2tb675 (tb2t675 j)) j)) :pattern ((t2tb675 (tb2t675 j))) )))

(declare-fun t2tb676 ((tuple21 (tuple21 (tuple21 a b) a) (tuple21 b b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 a b) a) (tuple21 b b)))) (sort
  (tuple2 (tuple2 (tuple2 a1 b1) a1) (tuple2 b1 b1)) (t2tb676 x))))

(declare-fun tb2t676 (uni) (tuple21 (tuple21 (tuple21 a b) a) (tuple21 b b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 a b) a) (tuple21 b b))))
  (! (= (tb2t676 (t2tb676 i)) i) :pattern ((t2tb676 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 (tuple2 a1 b1) a1) (tuple2 b1 b1)) j)
     (= (t2tb676 (tb2t676 j)) j)) :pattern ((t2tb676 (tb2t676 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 (tuple21 a b) b))) (k (set (tuple21 a b)))
  (x (tuple21 a b)) (y a) (z b) (w b))
  (= (mem (tuple2 (tuple2 (tuple2 a1 b1) a1) (tuple2 b1 b1))
  (Tuple2 (tuple2 (tuple2 a1 b1) a1) (tuple2 b1 b1)
  (Tuple2 (tuple2 a1 b1) a1 (t2tb13 x) (t2tb2 y))
  (Tuple2 b1 b1 (t2tb14 z) (t2tb14 w)))
  (parallel_product b1 a1 b1 (tuple2 a1 b1) (t2tb27 h) (t2tb11 k)))
  (and (mem18 (Tuple24 x z) h) (mem3 (Tuple21 y w) k)))))

;; mem_parallel_product
  (assert
  (forall ((c2 ty) (d ty))
  (forall ((h (set (tuple21 (tuple21 a b) b))) (k uni) (x (tuple21 a b))
  (y uni) (z b) (w uni))
  (= (mem (tuple2 (tuple2 (tuple2 a1 b1) c2) (tuple2 b1 d))
  (Tuple2 (tuple2 (tuple2 a1 b1) c2) (tuple2 b1 d)
  (Tuple2 (tuple2 a1 b1) c2 (t2tb13 x) y) (Tuple2 b1 d (t2tb14 z) w))
  (parallel_product d c2 b1 (tuple2 a1 b1) (t2tb27 h) k))
  (and (mem18 (Tuple24 x z) h) (mem (tuple2 c2 d) (Tuple2 c2 d y w) k))))))

(declare-fun t2tb583 ((set (tuple21 (tuple21 a b) (set a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) (set a))))) (sort
  (set1 (tuple2 (tuple2 a1 b1) (set1 a1))) (t2tb583 x))))

(declare-fun tb2t583 (uni) (set (tuple21 (tuple21 a b) (set a))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a b) (set a)))))
  (! (= (tb2t583 (t2tb583 i)) i) :pattern ((t2tb583 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 b1) (set1 a1))) j)
     (= (t2tb583 (tb2t583 j)) j)) :pattern ((t2tb583 (tb2t583 j))) )))

(declare-fun t2tb677 ((set (tuple21 (tuple21 (tuple21 a b) b)
  (tuple21 (set a) (set b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 a b) b) (tuple21 (set a)
  (set b)))))) (sort
  (set1 (tuple2 (tuple2 (tuple2 a1 b1) b1) (tuple2 (set1 a1) (set1 b1))))
  (t2tb677 x))))

(declare-fun tb2t677 (uni) (set (tuple21 (tuple21 (tuple21 a b) b)
  (tuple21 (set a) (set b)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 a b) b) (tuple21 (set a)
  (set b)))))) (! (= (tb2t677 (t2tb677 i)) i) :pattern ((t2tb677 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 (tuple2 a1 b1) b1) (tuple2 (set1 a1) (set1 b1))))
     j) (= (t2tb677 (tb2t677 j)) j)) :pattern ((t2tb677 (tb2t677 j))) )))

(declare-fun t2tb678 ((tuple21 (tuple21 (tuple21 a b) b) (tuple21 (set a)
  (set b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 a b) b) (tuple21 (set a) (set b)))))
  (sort (tuple2 (tuple2 (tuple2 a1 b1) b1) (tuple2 (set1 a1) (set1 b1)))
  (t2tb678 x))))

(declare-fun tb2t678 (uni) (tuple21 (tuple21 (tuple21 a b) b)
  (tuple21 (set a) (set b))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 a b) b) (tuple21 (set a) (set b)))))
  (! (= (tb2t678 (t2tb678 i)) i) :pattern ((t2tb678 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (tuple2 (tuple2 (tuple2 a1 b1) b1) (tuple2 (set1 a1) (set1 b1))) j)
     (= (t2tb678 (tb2t678 j)) j)) :pattern ((t2tb678 (tb2t678 j))) )))

(declare-fun t2tb617 ((set (tuple21 b (set b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 b (set b))))) (sort (set1 (tuple2 b1 (set1 b1)))
  (t2tb617 x))))

(declare-fun tb2t617 (uni) (set (tuple21 b (set b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 b (set b)))))
  (! (= (tb2t617 (t2tb617 i)) i) :pattern ((t2tb617 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 b1 (set1 b1))) j) (= (t2tb617 (tb2t617 j)) j)) :pattern (
  (t2tb617 (tb2t617 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 (tuple21 a b) (set a)))) (k (set (tuple21 b
  (set b)))) (x (tuple21 a b)) (y b) (z (set a)) (w (set b)))
  (= (mem (tuple2 (tuple2 (tuple2 a1 b1) b1) (tuple2 (set1 a1) (set1 b1)))
  (Tuple2 (tuple2 (tuple2 a1 b1) b1) (tuple2 (set1 a1) (set1 b1))
  (t2tb28 (Tuple24 x y)) (t2tb495 (Tuple23 z w)))
  (parallel_product (set1 b1) b1 (set1 a1) (tuple2 a1 b1) (t2tb583 h)
  (t2tb617 k)))
  (and (mem (tuple2 (tuple2 a1 b1) (set1 a1))
  (Tuple2 (tuple2 a1 b1) (set1 a1) (t2tb13 x) (t2tb1 z)) (t2tb583 h)) (mem
  (tuple2 b1 (set1 b1)) (Tuple2 b1 (set1 b1) (t2tb14 y) (t2tb12 w))
  (t2tb617 k))))))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 (tuple21 a b) a))) (k (set (tuple21 b b)))
  (x (tuple21 a b)) (y b) (z a) (w b))
  (= (mem (tuple2 (tuple2 (tuple2 a1 b1) b1) (tuple2 a1 b1))
  (Tuple2 (tuple2 (tuple2 a1 b1) b1) (tuple2 a1 b1) (t2tb28 (Tuple24 x y))
  (t2tb13 (Tuple21 z w)))
  (parallel_product b1 b1 a1 (tuple2 a1 b1) (t2tb29 h) (t2tb35 k)))
  (and (mem (tuple2 (tuple2 a1 b1) a1)
  (Tuple2 (tuple2 a1 b1) a1 (t2tb13 x) (t2tb2 z)) (t2tb29 h)) (mem
  (tuple2 b1 b1) (Tuple2 b1 b1 (t2tb14 y) (t2tb14 w)) (t2tb35 k))))))

;; mem_parallel_product
  (assert
  (forall ((b2 ty) (d ty))
  (forall ((h uni) (k uni) (x (set a)) (y (set b)) (z uni) (w uni))
  (= (mem (tuple2 (tuple2 (set1 a1) (set1 b1)) (tuple2 b2 d))
  (Tuple2 (tuple2 (set1 a1) (set1 b1)) (tuple2 b2 d) (t2tb495 (Tuple23 x y))
  (Tuple2 b2 d z w)) (parallel_product d (set1 b1) b2 (set1 a1) h k))
  (and (mem (tuple2 (set1 a1) b2) (Tuple2 (set1 a1) b2 (t2tb1 x) z) h) (mem
  (tuple2 (set1 b1) d) (Tuple2 (set1 b1) d (t2tb12 y) w) k))))))

(declare-fun t2tb599 ((tuple21 (set b) b)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set b) b))) (sort (tuple2 (set1 b1) b1) (t2tb599 x))))

(declare-fun tb2t599 (uni) (tuple21 (set b) b))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set b) b)))
  (! (= (tb2t599 (t2tb599 i)) i) :pattern ((t2tb599 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 b1) b1) j) (= (t2tb599 (tb2t599 j)) j)) :pattern (
  (t2tb599 (tb2t599 j))) )))

(declare-fun t2tb589 ((tuple21 (set a) (tuple21 a b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set a) (tuple21 a b)))) (sort
  (tuple2 (set1 a1) (tuple2 a1 b1)) (t2tb589 x))))

(declare-fun tb2t589 (uni) (tuple21 (set a) (tuple21 a b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set a) (tuple21 a b))))
  (! (= (tb2t589 (t2tb589 i)) i) :pattern ((t2tb589 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 a1) (tuple2 a1 b1)) j)
     (= (t2tb589 (tb2t589 j)) j)) :pattern ((t2tb589 (tb2t589 j))) )))

(declare-fun t2tb593 ((set (tuple21 (set a) (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set a) (tuple21 a b))))) (sort
  (set1 (tuple2 (set1 a1) (tuple2 a1 b1))) (t2tb593 x))))

(declare-fun tb2t593 (uni) (set (tuple21 (set a) (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set a) (tuple21 a b)))))
  (! (= (tb2t593 (t2tb593 i)) i) :pattern ((t2tb593 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 a1) (tuple2 a1 b1))) j)
     (= (t2tb593 (tb2t593 j)) j)) :pattern ((t2tb593 (tb2t593 j))) )))

(declare-fun t2tb679 ((set (tuple21 (tuple21 (set a) (set b))
  (tuple21 (tuple21 a b) b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (set a) (set b)) (tuple21 (tuple21 a b)
  b))))) (sort
  (set1 (tuple2 (tuple2 (set1 a1) (set1 b1)) (tuple2 (tuple2 a1 b1) b1)))
  (t2tb679 x))))

(declare-fun tb2t679 (uni) (set (tuple21 (tuple21 (set a) (set b))
  (tuple21 (tuple21 a b) b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (set a) (set b)) (tuple21 (tuple21 a b)
  b))))) (! (= (tb2t679 (t2tb679 i)) i) :pattern ((t2tb679 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 (set1 a1) (set1 b1)) (tuple2 (tuple2 a1 b1) b1)))
     j) (= (t2tb679 (tb2t679 j)) j)) :pattern ((t2tb679 (tb2t679 j))) )))

(declare-fun t2tb680 ((tuple21 (tuple21 (set a) (set b)) (tuple21 (tuple21 a
  b) b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (set a) (set b)) (tuple21 (tuple21 a b) b))))
  (sort (tuple2 (tuple2 (set1 a1) (set1 b1)) (tuple2 (tuple2 a1 b1) b1))
  (t2tb680 x))))

(declare-fun tb2t680 (uni) (tuple21 (tuple21 (set a) (set b))
  (tuple21 (tuple21 a b) b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (set a) (set b)) (tuple21 (tuple21 a b) b))))
  (! (= (tb2t680 (t2tb680 i)) i) :pattern ((t2tb680 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (tuple2 (tuple2 (set1 a1) (set1 b1)) (tuple2 (tuple2 a1 b1) b1)) j)
     (= (t2tb680 (tb2t680 j)) j)) :pattern ((t2tb680 (tb2t680 j))) )))

(declare-fun t2tb608 ((set (tuple21 (set b) b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set b) b)))) (sort (set1 (tuple2 (set1 b1) b1))
  (t2tb608 x))))

(declare-fun tb2t608 (uni) (set (tuple21 (set b) b)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set b) b))))
  (! (= (tb2t608 (t2tb608 i)) i) :pattern ((t2tb608 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 b1) b1)) j) (= (t2tb608 (tb2t608 j)) j)) :pattern (
  (t2tb608 (tb2t608 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 (set a) (tuple21 a b)))) (k (set (tuple21 (set b)
  b))) (x (set a)) (y (set b)) (z (tuple21 a b)) (w b))
  (= (mem (tuple2 (tuple2 (set1 a1) (set1 b1)) (tuple2 (tuple2 a1 b1) b1))
  (Tuple2 (tuple2 (set1 a1) (set1 b1)) (tuple2 (tuple2 a1 b1) b1)
  (t2tb495 (Tuple23 x y)) (t2tb28 (Tuple24 z w)))
  (parallel_product b1 (set1 b1) (tuple2 a1 b1) (set1 a1) (t2tb593 h)
  (t2tb608 k)))
  (and (mem (tuple2 (set1 a1) (tuple2 a1 b1))
  (Tuple2 (set1 a1) (tuple2 a1 b1) (t2tb1 x) (t2tb13 z)) (t2tb593 h)) (mem
  (tuple2 (set1 b1) b1) (Tuple2 (set1 b1) b1 (t2tb12 y) (t2tb14 w))
  (t2tb608 k))))))

(declare-fun t2tb681 ((set (tuple21 (tuple21 (set a) (tuple21 a b))
  (tuple21 (set b) b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (set a) (tuple21 a b)) (tuple21 (set b)
  b))))) (sort
  (set1 (tuple2 (tuple2 (set1 a1) (tuple2 a1 b1)) (tuple2 (set1 b1) b1)))
  (t2tb681 x))))

(declare-fun tb2t681 (uni) (set (tuple21 (tuple21 (set a) (tuple21 a b))
  (tuple21 (set b) b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (set a) (tuple21 a b)) (tuple21 (set b)
  b))))) (! (= (tb2t681 (t2tb681 i)) i) :pattern ((t2tb681 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 (set1 a1) (tuple2 a1 b1)) (tuple2 (set1 b1) b1)))
     j) (= (t2tb681 (tb2t681 j)) j)) :pattern ((t2tb681 (tb2t681 j))) )))

(declare-fun t2tb682 ((tuple21 (tuple21 (set a) (tuple21 a b))
  (tuple21 (set b) b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (set a) (tuple21 a b)) (tuple21 (set b) b))))
  (sort (tuple2 (tuple2 (set1 a1) (tuple2 a1 b1)) (tuple2 (set1 b1) b1))
  (t2tb682 x))))

(declare-fun tb2t682 (uni) (tuple21 (tuple21 (set a) (tuple21 a b))
  (tuple21 (set b) b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (set a) (tuple21 a b)) (tuple21 (set b) b))))
  (! (= (tb2t682 (t2tb682 i)) i) :pattern ((t2tb682 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (tuple2 (tuple2 (set1 a1) (tuple2 a1 b1)) (tuple2 (set1 b1) b1)) j)
     (= (t2tb682 (tb2t682 j)) j)) :pattern ((t2tb682 (tb2t682 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 (set a) (set b)))) (k (set (tuple21 (tuple21 a b)
  b))) (x (set a)) (y (tuple21 a b)) (z (set b)) (w b))
  (= (mem (tuple2 (tuple2 (set1 a1) (tuple2 a1 b1)) (tuple2 (set1 b1) b1))
  (Tuple2 (tuple2 (set1 a1) (tuple2 a1 b1)) (tuple2 (set1 b1) b1)
  (Tuple2 (set1 a1) (tuple2 a1 b1) (t2tb1 x) (t2tb13 y))
  (Tuple2 (set1 b1) b1 (t2tb12 z) (t2tb14 w)))
  (parallel_product b1 (tuple2 a1 b1) (set1 b1) (set1 a1) (t2tb538 h)
  (t2tb27 k)))
  (and (mem (tuple2 (set1 a1) (set1 b1)) (t2tb495 (Tuple23 x z)) (t2tb538 h))
  (mem18 (Tuple24 y w) k)))))

;; mem_parallel_product
  (assert
  (forall ((d ty))
  (forall ((h (set (tuple21 (set a) (set b)))) (k uni) (x (set a))
  (y (set b)) (z (set b)) (w uni))
  (= (mem (tuple2 (tuple2 (set1 a1) (set1 b1)) (tuple2 (set1 b1) d))
  (Tuple2 (tuple2 (set1 a1) (set1 b1)) (tuple2 (set1 b1) d)
  (t2tb495 (Tuple23 x y)) (Tuple2 (set1 b1) d (t2tb12 z) w))
  (parallel_product d (set1 b1) (set1 b1) (set1 a1) (t2tb538 h) k))
  (and (mem (tuple2 (set1 a1) (set1 b1)) (t2tb495 (Tuple23 x z)) (t2tb538 h))
  (mem (tuple2 (set1 b1) d) (Tuple2 (set1 b1) d (t2tb12 y) w) k))))))

(declare-fun t2tb597 ((set (tuple21 (tuple21 (set a) (set a))
  (tuple21 (set b) (set b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (set a) (set a)) (tuple21 (set b)
  (set b)))))) (sort
  (set1 (tuple2 (tuple2 (set1 a1) (set1 a1)) (tuple2 (set1 b1) (set1 b1))))
  (t2tb597 x))))

(declare-fun tb2t597 (uni) (set (tuple21 (tuple21 (set a) (set a))
  (tuple21 (set b) (set b)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (set a) (set a)) (tuple21 (set b)
  (set b)))))) (! (= (tb2t597 (t2tb597 i)) i) :pattern ((t2tb597 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (tuple2 (tuple2 (set1 a1) (set1 a1)) (tuple2 (set1 b1) (set1 b1)))) j)
     (= (t2tb597 (tb2t597 j)) j)) :pattern ((t2tb597 (tb2t597 j))) )))

(declare-fun t2tb598 ((tuple21 (tuple21 (set a) (set a)) (tuple21 (set b)
  (set b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (set a) (set a)) (tuple21 (set b) (set b)))))
  (sort (tuple2 (tuple2 (set1 a1) (set1 a1)) (tuple2 (set1 b1) (set1 b1)))
  (t2tb598 x))))

(declare-fun tb2t598 (uni) (tuple21 (tuple21 (set a) (set a))
  (tuple21 (set b) (set b))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (set a) (set a)) (tuple21 (set b) (set b)))))
  (! (= (tb2t598 (t2tb598 i)) i) :pattern ((t2tb598 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (tuple2 (tuple2 (set1 a1) (set1 a1)) (tuple2 (set1 b1) (set1 b1))) j)
     (= (t2tb598 (tb2t598 j)) j)) :pattern ((t2tb598 (tb2t598 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 (set a) (set b)))) (k (set (tuple21 (set a)
  (set b)))) (x (set a)) (y (set a)) (z (set b)) (w (set b)))
  (= (mem (tuple2 (tuple2 (set1 a1) (set1 a1)) (tuple2 (set1 b1) (set1 b1)))
  (Tuple2 (tuple2 (set1 a1) (set1 a1)) (tuple2 (set1 b1) (set1 b1))
  (Tuple2 (set1 a1) (set1 a1) (t2tb1 x) (t2tb1 y))
  (Tuple2 (set1 b1) (set1 b1) (t2tb12 z) (t2tb12 w)))
  (parallel_product (set1 b1) (set1 a1) (set1 b1) (set1 a1) (t2tb538 h)
  (t2tb538 k)))
  (and (mem (tuple2 (set1 a1) (set1 b1)) (t2tb495 (Tuple23 x z)) (t2tb538 h))
  (mem (tuple2 (set1 a1) (set1 b1)) (t2tb495 (Tuple23 y w)) (t2tb538 k))))))

(declare-fun t2tb600 ((tuple21 (set a) a)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set a) a))) (sort (tuple2 (set1 a1) a1) (t2tb600 x))))

(declare-fun tb2t600 (uni) (tuple21 (set a) a))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set a) a)))
  (! (= (tb2t600 (t2tb600 i)) i) :pattern ((t2tb600 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 a1) a1) j) (= (t2tb600 (tb2t600 j)) j)) :pattern (
  (t2tb600 (tb2t600 j))) )))

(declare-fun t2tb601 ((set (tuple21 (tuple21 (set a) a) (tuple21 (set b)
  b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (set a) a) (tuple21 (set b) b))))) (sort
  (set1 (tuple2 (tuple2 (set1 a1) a1) (tuple2 (set1 b1) b1))) (t2tb601 x))))

(declare-fun tb2t601 (uni) (set (tuple21 (tuple21 (set a) a) (tuple21 (set b)
  b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (set a) a) (tuple21 (set b) b)))))
  (! (= (tb2t601 (t2tb601 i)) i) :pattern ((t2tb601 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 (set1 a1) a1) (tuple2 (set1 b1) b1))) j)
     (= (t2tb601 (tb2t601 j)) j)) :pattern ((t2tb601 (tb2t601 j))) )))

(declare-fun t2tb602 ((tuple21 (tuple21 (set a) a) (tuple21 (set b) b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (set a) a) (tuple21 (set b) b)))) (sort
  (tuple2 (tuple2 (set1 a1) a1) (tuple2 (set1 b1) b1)) (t2tb602 x))))

(declare-fun tb2t602 (uni) (tuple21 (tuple21 (set a) a) (tuple21 (set b) b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (set a) a) (tuple21 (set b) b))))
  (! (= (tb2t602 (t2tb602 i)) i) :pattern ((t2tb602 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 (set1 a1) a1) (tuple2 (set1 b1) b1)) j)
     (= (t2tb602 (tb2t602 j)) j)) :pattern ((t2tb602 (tb2t602 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 (set a) (set b)))) (k (set (tuple21 a b)))
  (x (set a)) (y a) (z (set b)) (w b))
  (= (mem (tuple2 (tuple2 (set1 a1) a1) (tuple2 (set1 b1) b1))
  (Tuple2 (tuple2 (set1 a1) a1) (tuple2 (set1 b1) b1)
  (Tuple2 (set1 a1) a1 (t2tb1 x) (t2tb2 y))
  (Tuple2 (set1 b1) b1 (t2tb12 z) (t2tb14 w)))
  (parallel_product b1 a1 (set1 b1) (set1 a1) (t2tb538 h) (t2tb11 k)))
  (and (mem (tuple2 (set1 a1) (set1 b1)) (t2tb495 (Tuple23 x z)) (t2tb538 h))
  (mem3 (Tuple21 y w) k)))))

;; mem_parallel_product
  (assert
  (forall ((c2 ty) (d ty))
  (forall ((h (set (tuple21 (set a) (set b)))) (k uni) (x (set a)) (y uni)
  (z (set b)) (w uni))
  (= (mem (tuple2 (tuple2 (set1 a1) c2) (tuple2 (set1 b1) d))
  (Tuple2 (tuple2 (set1 a1) c2) (tuple2 (set1 b1) d)
  (Tuple2 (set1 a1) c2 (t2tb1 x) y) (Tuple2 (set1 b1) d (t2tb12 z) w))
  (parallel_product d c2 (set1 b1) (set1 a1) (t2tb538 h) k))
  (and (mem (tuple2 (set1 a1) (set1 b1)) (t2tb495 (Tuple23 x z)) (t2tb538 h))
  (mem (tuple2 c2 d) (Tuple2 c2 d y w) k))))))

(declare-fun t2tb603 ((set (tuple21 (tuple21 (set a) (set b))
  (tuple21 (set a) (set b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (set a) (set b)) (tuple21 (set a)
  (set b)))))) (sort
  (set1 (tuple2 (tuple2 (set1 a1) (set1 b1)) (tuple2 (set1 a1) (set1 b1))))
  (t2tb603 x))))

(declare-fun tb2t603 (uni) (set (tuple21 (tuple21 (set a) (set b))
  (tuple21 (set a) (set b)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (set a) (set b)) (tuple21 (set a)
  (set b)))))) (! (= (tb2t603 (t2tb603 i)) i) :pattern ((t2tb603 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (tuple2 (tuple2 (set1 a1) (set1 b1)) (tuple2 (set1 a1) (set1 b1)))) j)
     (= (t2tb603 (tb2t603 j)) j)) :pattern ((t2tb603 (tb2t603 j))) )))

(declare-fun t2tb604 ((tuple21 (tuple21 (set a) (set b)) (tuple21 (set a)
  (set b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (set a) (set b)) (tuple21 (set a) (set b)))))
  (sort (tuple2 (tuple2 (set1 a1) (set1 b1)) (tuple2 (set1 a1) (set1 b1)))
  (t2tb604 x))))

(declare-fun tb2t604 (uni) (tuple21 (tuple21 (set a) (set b))
  (tuple21 (set a) (set b))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (set a) (set b)) (tuple21 (set a) (set b)))))
  (! (= (tb2t604 (t2tb604 i)) i) :pattern ((t2tb604 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (tuple2 (tuple2 (set1 a1) (set1 b1)) (tuple2 (set1 a1) (set1 b1))) j)
     (= (t2tb604 (tb2t604 j)) j)) :pattern ((t2tb604 (tb2t604 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 (set a) (set a)))) (k (set (tuple21 (set b)
  (set b)))) (x (set a)) (y (set b)) (z (set a)) (w (set b)))
  (= (mem (tuple2 (tuple2 (set1 a1) (set1 b1)) (tuple2 (set1 a1) (set1 b1)))
  (Tuple2 (tuple2 (set1 a1) (set1 b1)) (tuple2 (set1 a1) (set1 b1))
  (t2tb495 (Tuple23 x y)) (t2tb495 (Tuple23 z w)))
  (parallel_product (set1 b1) (set1 b1) (set1 a1) (set1 a1) (t2tb565 h)
  (t2tb563 k)))
  (and (mem (tuple2 (set1 a1) (set1 a1))
  (Tuple2 (set1 a1) (set1 a1) (t2tb1 x) (t2tb1 z)) (t2tb565 h)) (mem
  (tuple2 (set1 b1) (set1 b1))
  (Tuple2 (set1 b1) (set1 b1) (t2tb12 y) (t2tb12 w)) (t2tb563 k))))))

(declare-fun t2tb605 ((set (tuple21 (set a) a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set a) a)))) (sort (set1 (tuple2 (set1 a1) a1))
  (t2tb605 x))))

(declare-fun tb2t605 (uni) (set (tuple21 (set a) a)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set a) a))))
  (! (= (tb2t605 (t2tb605 i)) i) :pattern ((t2tb605 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 a1) a1)) j) (= (t2tb605 (tb2t605 j)) j)) :pattern (
  (t2tb605 (tb2t605 j))) )))

(declare-fun t2tb606 ((set (tuple21 (tuple21 (set a) (set b)) (tuple21 a
  b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (set a) (set b)) (tuple21 a b))))) (sort
  (set1 (tuple2 (tuple2 (set1 a1) (set1 b1)) (tuple2 a1 b1))) (t2tb606 x))))

(declare-fun tb2t606 (uni) (set (tuple21 (tuple21 (set a) (set b)) (tuple21 a
  b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (set a) (set b)) (tuple21 a b)))))
  (! (= (tb2t606 (t2tb606 i)) i) :pattern ((t2tb606 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 (set1 a1) (set1 b1)) (tuple2 a1 b1))) j)
     (= (t2tb606 (tb2t606 j)) j)) :pattern ((t2tb606 (tb2t606 j))) )))

(declare-fun t2tb607 ((tuple21 (tuple21 (set a) (set b)) (tuple21 a b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (set a) (set b)) (tuple21 a b)))) (sort
  (tuple2 (tuple2 (set1 a1) (set1 b1)) (tuple2 a1 b1)) (t2tb607 x))))

(declare-fun tb2t607 (uni) (tuple21 (tuple21 (set a) (set b)) (tuple21 a b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (set a) (set b)) (tuple21 a b))))
  (! (= (tb2t607 (t2tb607 i)) i) :pattern ((t2tb607 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 (set1 a1) (set1 b1)) (tuple2 a1 b1)) j)
     (= (t2tb607 (tb2t607 j)) j)) :pattern ((t2tb607 (tb2t607 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 (set a) a))) (k (set (tuple21 (set b) b)))
  (x (set a)) (y (set b)) (z a) (w b))
  (= (mem (tuple2 (tuple2 (set1 a1) (set1 b1)) (tuple2 a1 b1))
  (Tuple2 (tuple2 (set1 a1) (set1 b1)) (tuple2 a1 b1) (t2tb495 (Tuple23 x y))
  (t2tb13 (Tuple21 z w)))
  (parallel_product b1 (set1 b1) a1 (set1 a1) (t2tb605 h) (t2tb608 k)))
  (and (mem (tuple2 (set1 a1) a1) (Tuple2 (set1 a1) a1 (t2tb1 x) (t2tb2 z))
  (t2tb605 h)) (mem (tuple2 (set1 b1) b1)
  (Tuple2 (set1 b1) b1 (t2tb12 y) (t2tb14 w)) (t2tb608 k))))))

;; mem_parallel_product
  (assert
  (forall ((b2 ty) (d ty))
  (forall ((h uni) (k uni) (x a) (y b) (z uni) (w uni))
  (= (mem (tuple2 (tuple2 a1 b1) (tuple2 b2 d))
  (Tuple2 (tuple2 a1 b1) (tuple2 b2 d) (t2tb13 (Tuple21 x y))
  (Tuple2 b2 d z w)) (parallel_product d b1 b2 a1 h k))
  (and (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) z) h) (mem (tuple2 b1 d)
  (Tuple2 b1 d (t2tb14 y) w) k))))))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a (tuple21 a b)))) (k (set (tuple21 b b))) (x a)
  (y b) (z (tuple21 a b)) (w b))
  (= (mem (tuple2 (tuple2 a1 b1) (tuple2 (tuple2 a1 b1) b1))
  (Tuple2 (tuple2 a1 b1) (tuple2 (tuple2 a1 b1) b1) (t2tb13 (Tuple21 x y))
  (t2tb28 (Tuple24 z w)))
  (parallel_product b1 b1 (tuple2 a1 b1) a1 (t2tb41 h) (t2tb35 k)))
  (and (mem (tuple2 a1 (tuple2 a1 b1))
  (Tuple2 a1 (tuple2 a1 b1) (t2tb2 x) (t2tb13 z)) (t2tb41 h)) (mem
  (tuple2 b1 b1) (Tuple2 b1 b1 (t2tb14 y) (t2tb14 w)) (t2tb35 k))))))

(declare-fun t2tb683 ((set (tuple21 (tuple21 a (tuple21 a b)) (tuple21 b
  b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a (tuple21 a b)) (tuple21 b b))))) (sort
  (set1 (tuple2 (tuple2 a1 (tuple2 a1 b1)) (tuple2 b1 b1))) (t2tb683 x))))

(declare-fun tb2t683 (uni) (set (tuple21 (tuple21 a (tuple21 a b)) (tuple21 b
  b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a (tuple21 a b)) (tuple21 b b)))))
  (! (= (tb2t683 (t2tb683 i)) i) :pattern ((t2tb683 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 (tuple2 a1 b1)) (tuple2 b1 b1))) j)
     (= (t2tb683 (tb2t683 j)) j)) :pattern ((t2tb683 (tb2t683 j))) )))

(declare-fun t2tb684 ((tuple21 (tuple21 a (tuple21 a b)) (tuple21 b b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a (tuple21 a b)) (tuple21 b b)))) (sort
  (tuple2 (tuple2 a1 (tuple2 a1 b1)) (tuple2 b1 b1)) (t2tb684 x))))

(declare-fun tb2t684 (uni) (tuple21 (tuple21 a (tuple21 a b)) (tuple21 b b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a (tuple21 a b)) (tuple21 b b))))
  (! (= (tb2t684 (t2tb684 i)) i) :pattern ((t2tb684 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 (tuple2 a1 b1)) (tuple2 b1 b1)) j)
     (= (t2tb684 (tb2t684 j)) j)) :pattern ((t2tb684 (tb2t684 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a b))) (k (set (tuple21 (tuple21 a b) b))) (x a)
  (y (tuple21 a b)) (z b) (w b))
  (= (mem (tuple2 (tuple2 a1 (tuple2 a1 b1)) (tuple2 b1 b1))
  (Tuple2 (tuple2 a1 (tuple2 a1 b1)) (tuple2 b1 b1)
  (Tuple2 a1 (tuple2 a1 b1) (t2tb2 x) (t2tb13 y))
  (Tuple2 b1 b1 (t2tb14 z) (t2tb14 w)))
  (parallel_product b1 (tuple2 a1 b1) b1 a1 (t2tb11 h) (t2tb27 k)))
  (and (mem3 (Tuple21 x z) h) (mem18 (Tuple24 y w) k)))))

;; mem_parallel_product
  (assert
  (forall ((d ty))
  (forall ((h (set (tuple21 a b))) (k uni) (x a) (y b) (z b) (w uni))
  (= (mem (tuple2 (tuple2 a1 b1) (tuple2 b1 d))
  (Tuple2 (tuple2 a1 b1) (tuple2 b1 d) (t2tb13 (Tuple21 x y))
  (Tuple2 b1 d (t2tb14 z) w)) (parallel_product d b1 b1 a1 (t2tb11 h) k))
  (and (mem3 (Tuple21 x z) h) (mem (tuple2 b1 d) (Tuple2 b1 d (t2tb14 y) w)
  k))))))

(declare-fun t2tb612 ((set (tuple21 (tuple21 a (set a)) (tuple21 b
  (set b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a (set a)) (tuple21 b (set b)))))) (sort
  (set1 (tuple2 (tuple2 a1 (set1 a1)) (tuple2 b1 (set1 b1)))) (t2tb612 x))))

(declare-fun tb2t612 (uni) (set (tuple21 (tuple21 a (set a)) (tuple21 b
  (set b)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a (set a)) (tuple21 b (set b))))))
  (! (= (tb2t612 (t2tb612 i)) i) :pattern ((t2tb612 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 (set1 a1)) (tuple2 b1 (set1 b1)))) j)
     (= (t2tb612 (tb2t612 j)) j)) :pattern ((t2tb612 (tb2t612 j))) )))

(declare-fun t2tb613 ((tuple21 a (set a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (set a)))) (sort (tuple2 a1 (set1 a1)) (t2tb613 x))))

(declare-fun tb2t613 (uni) (tuple21 a (set a)))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (set a))))
  (! (= (tb2t613 (t2tb613 i)) i) :pattern ((t2tb613 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (set1 a1)) j) (= (t2tb613 (tb2t613 j)) j)) :pattern (
  (t2tb613 (tb2t613 j))) )))

(declare-fun t2tb614 ((tuple21 (tuple21 a (set a)) (tuple21 b (set b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a (set a)) (tuple21 b (set b))))) (sort
  (tuple2 (tuple2 a1 (set1 a1)) (tuple2 b1 (set1 b1))) (t2tb614 x))))

(declare-fun tb2t614 (uni) (tuple21 (tuple21 a (set a)) (tuple21 b (set b))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a (set a)) (tuple21 b (set b)))))
  (! (= (tb2t614 (t2tb614 i)) i) :pattern ((t2tb614 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 (set1 a1)) (tuple2 b1 (set1 b1))) j)
     (= (t2tb614 (tb2t614 j)) j)) :pattern ((t2tb614 (tb2t614 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a b))) (k (set (tuple21 (set a) (set b)))) (x a)
  (y (set a)) (z b) (w (set b)))
  (= (mem (tuple2 (tuple2 a1 (set1 a1)) (tuple2 b1 (set1 b1)))
  (Tuple2 (tuple2 a1 (set1 a1)) (tuple2 b1 (set1 b1))
  (Tuple2 a1 (set1 a1) (t2tb2 x) (t2tb1 y))
  (Tuple2 b1 (set1 b1) (t2tb14 z) (t2tb12 w)))
  (parallel_product (set1 b1) (set1 a1) b1 a1 (t2tb11 h) (t2tb538 k)))
  (and (mem3 (Tuple21 x z) h) (mem (tuple2 (set1 a1) (set1 b1))
  (t2tb495 (Tuple23 y w)) (t2tb538 k))))))

(declare-fun t2tb61 ((set (tuple21 (tuple21 a a) (tuple21 b b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a a) (tuple21 b b))))) (sort
  (set1 (tuple2 (tuple2 a1 a1) (tuple2 b1 b1))) (t2tb61 x))))

(declare-fun tb2t61 (uni) (set (tuple21 (tuple21 a a) (tuple21 b b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a a) (tuple21 b b)))))
  (! (= (tb2t61 (t2tb61 i)) i) :pattern ((t2tb61 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 a1) (tuple2 b1 b1))) j)
     (= (t2tb61 (tb2t61 j)) j)) :pattern ((t2tb61 (tb2t61 j))) )))

(declare-fun t2tb62 ((tuple21 (tuple21 a a) (tuple21 b b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a a) (tuple21 b b)))) (sort
  (tuple2 (tuple2 a1 a1) (tuple2 b1 b1)) (t2tb62 x))))

(declare-fun tb2t62 (uni) (tuple21 (tuple21 a a) (tuple21 b b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a a) (tuple21 b b))))
  (! (= (tb2t62 (t2tb62 i)) i) :pattern ((t2tb62 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 a1) (tuple2 b1 b1)) j)
     (= (t2tb62 (tb2t62 j)) j)) :pattern ((t2tb62 (tb2t62 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a b))) (k (set (tuple21 a b))) (x a) (y a) (z b)
  (w b))
  (= (mem (tuple2 (tuple2 a1 a1) (tuple2 b1 b1))
  (Tuple2 (tuple2 a1 a1) (tuple2 b1 b1) (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y))
  (Tuple2 b1 b1 (t2tb14 z) (t2tb14 w)))
  (parallel_product b1 a1 b1 a1 (t2tb11 h) (t2tb11 k)))
  (and (mem3 (Tuple21 x z) h) (mem3 (Tuple21 y w) k)))))

;; mem_parallel_product
  (assert
  (forall ((c2 ty) (d ty))
  (forall ((h (set (tuple21 a b))) (k uni) (x a) (y uni) (z b) (w uni))
  (= (mem (tuple2 (tuple2 a1 c2) (tuple2 b1 d))
  (Tuple2 (tuple2 a1 c2) (tuple2 b1 d) (Tuple2 a1 c2 (t2tb2 x) y)
  (Tuple2 b1 d (t2tb14 z) w)) (parallel_product d c2 b1 a1 (t2tb11 h) k))
  (and (mem3 (Tuple21 x z) h) (mem (tuple2 c2 d) (Tuple2 c2 d y w) k))))))

(declare-fun t2tb615 ((tuple21 (tuple21 a b) (tuple21 (set a) (set b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a b) (tuple21 (set a) (set b))))) (sort
  (tuple2 (tuple2 a1 b1) (tuple2 (set1 a1) (set1 b1))) (t2tb615 x))))

(declare-fun tb2t615 (uni) (tuple21 (tuple21 a b) (tuple21 (set a) (set b))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a b) (tuple21 (set a) (set b)))))
  (! (= (tb2t615 (t2tb615 i)) i) :pattern ((t2tb615 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 b1) (tuple2 (set1 a1) (set1 b1))) j)
     (= (t2tb615 (tb2t615 j)) j)) :pattern ((t2tb615 (tb2t615 j))) )))

(declare-fun t2tb616 ((set (tuple21 (tuple21 a b) (tuple21 (set a)
  (set b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) (tuple21 (set a) (set b)))))) (sort
  (set1 (tuple2 (tuple2 a1 b1) (tuple2 (set1 a1) (set1 b1)))) (t2tb616 x))))

(declare-fun tb2t616 (uni) (set (tuple21 (tuple21 a b) (tuple21 (set a)
  (set b)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a b) (tuple21 (set a) (set b))))))
  (! (= (tb2t616 (t2tb616 i)) i) :pattern ((t2tb616 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 b1) (tuple2 (set1 a1) (set1 b1)))) j)
     (= (t2tb616 (tb2t616 j)) j)) :pattern ((t2tb616 (tb2t616 j))) )))

(declare-fun t2tb618 ((set (tuple21 a (set a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (set a))))) (sort (set1 (tuple2 a1 (set1 a1)))
  (t2tb618 x))))

(declare-fun tb2t618 (uni) (set (tuple21 a (set a))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (set a)))))
  (! (= (tb2t618 (t2tb618 i)) i) :pattern ((t2tb618 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (set1 a1))) j) (= (t2tb618 (tb2t618 j)) j)) :pattern (
  (t2tb618 (tb2t618 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a (set a)))) (k (set (tuple21 b (set b)))) (x a)
  (y b) (z (set a)) (w (set b)))
  (= (mem (tuple2 (tuple2 a1 b1) (tuple2 (set1 a1) (set1 b1)))
  (Tuple2 (tuple2 a1 b1) (tuple2 (set1 a1) (set1 b1)) (t2tb13 (Tuple21 x y))
  (t2tb495 (Tuple23 z w)))
  (parallel_product (set1 b1) b1 (set1 a1) a1 (t2tb618 h) (t2tb617 k)))
  (and (mem (tuple2 a1 (set1 a1)) (Tuple2 a1 (set1 a1) (t2tb2 x) (t2tb1 z))
  (t2tb618 h)) (mem (tuple2 b1 (set1 b1))
  (Tuple2 b1 (set1 b1) (t2tb14 y) (t2tb12 w)) (t2tb617 k))))))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a a))) (k (set (tuple21 b b))) (x a) (y b) (z a)
  (w b))
  (= (mem (tuple2 (tuple2 a1 b1) (tuple2 a1 b1))
  (Tuple2 (tuple2 a1 b1) (tuple2 a1 b1) (t2tb13 (Tuple21 x y))
  (t2tb13 (Tuple21 z w)))
  (parallel_product b1 b1 a1 a1 (t2tb4 h) (t2tb35 k)))
  (and (mem (tuple2 a1 a1) (Tuple2 a1 a1 (t2tb2 x) (t2tb2 z)) (t2tb4 h)) (mem
  (tuple2 b1 b1) (Tuple2 b1 b1 (t2tb14 y) (t2tb14 w)) (t2tb35 k))))))

;; mem_parallel_product
  (assert
  (forall ((a2 ty) (b2 ty) (c2 ty) (d ty))
  (forall ((h uni) (k uni) (x uni) (y uni) (z uni) (w uni))
  (= (mem (tuple2 (tuple2 a2 c2) (tuple2 b2 d))
  (Tuple2 (tuple2 a2 c2) (tuple2 b2 d) (Tuple2 a2 c2 x y) (Tuple2 b2 d z w))
  (parallel_product d c2 b2 a2 h k))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x z) h) (mem (tuple2 c2 d)
  (Tuple2 c2 d y w) k))))))

(declare-fun infix_plmngt (ty ty uni uni) uni)

;; infix +->_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (set1 (tuple2 a2 b2)))
  (infix_plmngt b2 a2 x x1)))))

;; mem_partial_function_set
  (assert
  (forall ((s (set (tuple21 a b))) (t (set b)) (f (set (tuple21 (tuple21 a b)
  b))))
  (= (mem19 f
  (tb2t51 (infix_plmngt b1 (tuple2 a1 b1) (t2tb11 s) (t2tb12 t))))
  (and (mem19 f (tb2t51 (relation b1 (tuple2 a1 b1) (t2tb11 s) (t2tb12 t))))
  (forall ((x (tuple21 a b)) (y1 b) (y2 b))
  (=> (and (mem18 (Tuple24 x y1) f) (mem18 (Tuple24 x y2) f)) (= y1 y2)))))))

;; mem_partial_function_set
  (assert
  (forall ((s (set (set a))) (t (set (set b))) (f (set (tuple21 (set a)
  (set b)))))
  (= (mem (set1 (tuple2 (set1 a1) (set1 b1))) (t2tb538 f)
  (infix_plmngt (set1 b1) (set1 a1) (t2tb s) (t2tb44 t)))
  (and (mem (set1 (tuple2 (set1 a1) (set1 b1))) (t2tb538 f)
  (relation (set1 b1) (set1 a1) (t2tb s) (t2tb44 t)))
  (forall ((x (set a)) (y1 (set b)) (y2 (set b)))
  (=>
  (and (mem (tuple2 (set1 a1) (set1 b1)) (t2tb495 (Tuple23 x y1))
  (t2tb538 f)) (mem (tuple2 (set1 a1) (set1 b1)) (t2tb495 (Tuple23 x y2))
  (t2tb538 f))) (= y1 y2)))))))

;; mem_partial_function_set
  (assert
  (forall ((s (set a)) (t (set b)) (f (set (tuple21 a b))))
  (= (mem (set1 (tuple2 a1 b1)) (t2tb11 f)
  (infix_plmngt b1 a1 (t2tb1 s) (t2tb12 t)))
  (and (mem (set1 (tuple2 a1 b1)) (t2tb11 f)
  (relation b1 a1 (t2tb1 s) (t2tb12 t)))
  (forall ((x a) (y1 b) (y2 b))
  (=> (and (mem3 (Tuple21 x y1) f) (mem3 (Tuple21 x y2) f)) (= y1 y2)))))))

;; mem_partial_function_set
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (f uni))
  (and
  (=> (mem (set1 (tuple2 a2 b2)) f (infix_plmngt b2 a2 s t))
  (and (mem (set1 (tuple2 a2 b2)) f (relation b2 a2 s t))
  (forall ((x uni) (y1 uni) (y2 uni))
  (=> (sort b2 y1)
  (=> (sort b2 y2)
  (=>
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y1) f) (mem (tuple2 a2 b2)
  (Tuple2 a2 b2 x y2) f)) (= y1 y2)))))))
  (=>
  (and (mem (set1 (tuple2 a2 b2)) f (relation b2 a2 s t))
  (forall ((x uni) (y1 uni) (y2 uni))
  (=> (sort a2 x)
  (=> (sort b2 y1)
  (=> (sort b2 y2)
  (=>
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y1) f) (mem (tuple2 a2 b2)
  (Tuple2 a2 b2 x y2) f)) (= y1 y2))))))) (mem (set1 (tuple2 a2 b2)) f
  (infix_plmngt b2 a2 s t)))))))

(declare-fun infix_mnmngt (ty ty uni uni) uni)

;; infix -->_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (set1 (tuple2 a2 b2)))
  (infix_mnmngt b2 a2 x x1)))))

(declare-fun infix_mnmngt6 ((set (tuple21 a b))
  (set b)) (set (set (tuple21 (tuple21 a b) b))))

;; mem_total_function_set
  (assert
  (forall ((s (set (tuple21 a b))) (t (set b)) (x (set (tuple21 (tuple21 a b)
  b))))
  (= (mem19 x (infix_mnmngt6 s t))
  (and (mem19 x
  (tb2t51 (infix_plmngt b1 (tuple2 a1 b1) (t2tb11 s) (t2tb12 t))))
  (infix_eqeq (tuple2 a1 b1) (dom b1 (tuple2 a1 b1) (t2tb27 x)) (t2tb11 s))))))

;; mem_total_function_set
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (x uni))
  (= (mem (set1 (tuple2 a2 b2)) x (infix_mnmngt b2 a2 s t))
  (and (mem (set1 (tuple2 a2 b2)) x (infix_plmngt b2 a2 s t)) (infix_eqeq a2
  (dom b2 a2 x) s))))))

(declare-fun infix_gtplgt (ty ty uni uni) uni)

;; infix >+>_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (set1 (tuple2 a2 b2)))
  (infix_gtplgt b2 a2 x x1)))))

;; mem_partial_injection_set
  (assert
  (forall ((s (set (tuple21 a b))) (t (set b)) (x (set (tuple21 (tuple21 a b)
  b))))
  (= (mem19 x
  (tb2t51 (infix_gtplgt b1 (tuple2 a1 b1) (t2tb11 s) (t2tb12 t))))
  (and (mem19 x
  (tb2t51 (infix_plmngt b1 (tuple2 a1 b1) (t2tb11 s) (t2tb12 t)))) (mem
  (set1 (tuple2 b1 (tuple2 a1 b1))) (inverse b1 (tuple2 a1 b1) (t2tb27 x))
  (infix_plmngt (tuple2 a1 b1) b1 (t2tb12 t) (t2tb11 s)))))))

;; mem_partial_injection_set
  (assert
  (forall ((s (set b)) (t (set (tuple21 a b))) (x (set (tuple21 b (tuple21 a
  b)))))
  (= (mem (set1 (tuple2 b1 (tuple2 a1 b1))) (t2tb34 x)
  (infix_gtplgt (tuple2 a1 b1) b1 (t2tb12 s) (t2tb11 t)))
  (and (mem (set1 (tuple2 b1 (tuple2 a1 b1))) (t2tb34 x)
  (infix_plmngt (tuple2 a1 b1) b1 (t2tb12 s) (t2tb11 t))) (mem19
  (tb2t27 (inverse (tuple2 a1 b1) b1 (t2tb34 x)))
  (tb2t51 (infix_plmngt b1 (tuple2 a1 b1) (t2tb11 t) (t2tb12 s))))))))

;; mem_partial_injection_set
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (x uni))
  (= (mem (set1 (tuple2 a2 b2)) x (infix_gtplgt b2 a2 s t))
  (and (mem (set1 (tuple2 a2 b2)) x (infix_plmngt b2 a2 s t)) (mem
  (set1 (tuple2 b2 a2)) (inverse b2 a2 x) (infix_plmngt a2 b2 t s)))))))

(declare-fun infix_gtmngt (ty ty uni uni) uni)

;; infix >->_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (set1 (tuple2 a2 b2)))
  (infix_gtmngt b2 a2 x x1)))))

;; mem_total_injection_set
  (assert
  (forall ((s (set (tuple21 a b))) (t (set b)) (x (set (tuple21 (tuple21 a b)
  b))))
  (= (mem19 x
  (tb2t51 (infix_gtmngt b1 (tuple2 a1 b1) (t2tb11 s) (t2tb12 t))))
  (and (mem19 x
  (tb2t51 (infix_gtplgt b1 (tuple2 a1 b1) (t2tb11 s) (t2tb12 t)))) (mem19 x
  (infix_mnmngt6 s t))))))

;; mem_total_injection_set
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (x uni))
  (= (mem (set1 (tuple2 a2 b2)) x (infix_gtmngt b2 a2 s t))
  (and (mem (set1 (tuple2 a2 b2)) x (infix_gtplgt b2 a2 s t)) (mem
  (set1 (tuple2 a2 b2)) x (infix_mnmngt b2 a2 s t)))))))

(declare-fun infix_plmngtgt (ty ty uni uni) uni)

;; infix +->>_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (set1 (tuple2 a2 b2)))
  (infix_plmngtgt b2 a2 x x1)))))

;; mem_partial_surjection_set
  (assert
  (forall ((s (set (tuple21 a b))) (t (set b)) (x (set (tuple21 (tuple21 a b)
  b))))
  (= (mem19 x
  (tb2t51 (infix_plmngtgt b1 (tuple2 a1 b1) (t2tb11 s) (t2tb12 t))))
  (and (mem19 x
  (tb2t51 (infix_plmngt b1 (tuple2 a1 b1) (t2tb11 s) (t2tb12 t))))
  (infix_eqeq b1 (ran b1 (tuple2 a1 b1) (t2tb27 x)) (t2tb12 t))))))

;; mem_partial_surjection_set
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (x uni))
  (= (mem (set1 (tuple2 a2 b2)) x (infix_plmngtgt b2 a2 s t))
  (and (mem (set1 (tuple2 a2 b2)) x (infix_plmngt b2 a2 s t)) (infix_eqeq b2
  (ran b2 a2 x) t))))))

(declare-fun infix_mnmngtgt (ty ty uni uni) uni)

;; infix -->>_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (set1 (tuple2 a2 b2)))
  (infix_mnmngtgt b2 a2 x x1)))))

;; mem_total_surjection_set
  (assert
  (forall ((s (set (tuple21 a b))) (t (set b)) (x (set (tuple21 (tuple21 a b)
  b))))
  (= (mem19 x
  (tb2t51 (infix_mnmngtgt b1 (tuple2 a1 b1) (t2tb11 s) (t2tb12 t))))
  (and (mem19 x
  (tb2t51 (infix_plmngtgt b1 (tuple2 a1 b1) (t2tb11 s) (t2tb12 t)))) (mem19 x
  (infix_mnmngt6 s t))))))

;; mem_total_surjection_set
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (x uni))
  (= (mem (set1 (tuple2 a2 b2)) x (infix_mnmngtgt b2 a2 s t))
  (and (mem (set1 (tuple2 a2 b2)) x (infix_plmngtgt b2 a2 s t)) (mem
  (set1 (tuple2 a2 b2)) x (infix_mnmngt b2 a2 s t)))))))

(declare-fun infix_gtplgtgt (ty ty uni uni) uni)

;; infix >+>>_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (set1 (tuple2 a2 b2)))
  (infix_gtplgtgt b2 a2 x x1)))))

;; mem_partial_bijection_set
  (assert
  (forall ((s (set (tuple21 a b))) (t (set b)) (x (set (tuple21 (tuple21 a b)
  b))))
  (= (mem19 x
  (tb2t51 (infix_gtplgtgt b1 (tuple2 a1 b1) (t2tb11 s) (t2tb12 t))))
  (and (mem19 x
  (tb2t51 (infix_gtplgt b1 (tuple2 a1 b1) (t2tb11 s) (t2tb12 t)))) (mem19 x
  (tb2t51 (infix_plmngtgt b1 (tuple2 a1 b1) (t2tb11 s) (t2tb12 t))))))))

;; mem_partial_bijection_set
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (x uni))
  (= (mem (set1 (tuple2 a2 b2)) x (infix_gtplgtgt b2 a2 s t))
  (and (mem (set1 (tuple2 a2 b2)) x (infix_gtplgt b2 a2 s t)) (mem
  (set1 (tuple2 a2 b2)) x (infix_plmngtgt b2 a2 s t)))))))

(declare-fun infix_gtmngtgt (ty ty uni uni) uni)

;; infix >->>_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (set1 (tuple2 a2 b2)))
  (infix_gtmngtgt b2 a2 x x1)))))

;; mem_total_bijection_set
  (assert
  (forall ((s (set (tuple21 a b))) (t (set b)) (x (set (tuple21 (tuple21 a b)
  b))))
  (= (mem19 x
  (tb2t51 (infix_gtmngtgt b1 (tuple2 a1 b1) (t2tb11 s) (t2tb12 t))))
  (and (mem19 x
  (tb2t51 (infix_gtmngt b1 (tuple2 a1 b1) (t2tb11 s) (t2tb12 t)))) (mem19 x
  (tb2t51 (infix_mnmngtgt b1 (tuple2 a1 b1) (t2tb11 s) (t2tb12 t))))))))

;; mem_total_bijection_set
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (x uni))
  (= (mem (set1 (tuple2 a2 b2)) x (infix_gtmngtgt b2 a2 s t))
  (and (mem (set1 (tuple2 a2 b2)) x (infix_gtmngt b2 a2 s t)) (mem
  (set1 (tuple2 a2 b2)) x (infix_mnmngtgt b2 a2 s t)))))))

(declare-fun apply (ty ty uni uni) uni)

;; apply_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort b2 (apply b2 a2 x x1)))))

;; apply_def0
  (assert
  (forall ((b2 ty))
  (forall ((f uni) (s (set (set (tuple21 (tuple21 a b) b)))) (t uni)
  (a2 (set (tuple21 (tuple21 a b) b))))
  (=>
  (and (mem (set1 (tuple2 (set1 (tuple2 (tuple2 a1 b1) b1)) b2)) f
  (infix_plmngt b2 (set1 (tuple2 (tuple2 a1 b1) b1)) (t2tb51 s) t)) (mem19 a2
  (tb2t51 (dom b2 (set1 (tuple2 (tuple2 a1 b1) b1)) f)))) (mem
  (tuple2 (set1 (tuple2 (tuple2 a1 b1) b1)) b2)
  (Tuple2 (set1 (tuple2 (tuple2 a1 b1) b1)) b2 (t2tb27 a2)
  (apply b2 (set1 (tuple2 (tuple2 a1 b1) b1)) f (t2tb27 a2))) f)))))

;; apply_def0
  (assert
  (forall ((b2 ty))
  (forall ((f uni) (s (set (tuple21 (tuple21 a b) b))) (t uni)
  (a2 (tuple21 (tuple21 a b) b)))
  (=>
  (and (mem (set1 (tuple2 (tuple2 (tuple2 a1 b1) b1) b2)) f
  (infix_plmngt b2 (tuple2 (tuple2 a1 b1) b1) (t2tb27 s) t)) (mem18 a2
  (tb2t27 (dom b2 (tuple2 (tuple2 a1 b1) b1) f)))) (mem
  (tuple2 (tuple2 (tuple2 a1 b1) b1) b2)
  (Tuple2 (tuple2 (tuple2 a1 b1) b1) b2 (t2tb28 a2)
  (apply b2 (tuple2 (tuple2 a1 b1) b1) f (t2tb28 a2))) f)))))

;; apply_def0
  (assert
  (forall ((f (set (tuple21 (tuple21 a b) b))) (s (set (tuple21 a b)))
  (t (set b)) (a2 (tuple21 a b)))
  (=>
  (and (mem19 f
  (tb2t51 (infix_plmngt b1 (tuple2 a1 b1) (t2tb11 s) (t2tb12 t)))) (mem3 a2
  (tb2t11 (dom b1 (tuple2 a1 b1) (t2tb27 f))))) (mem18
  (Tuple24 a2 (tb2t14 (apply b1 (tuple2 a1 b1) (t2tb27 f) (t2tb13 a2)))) f))))

;; apply_def0
  (assert
  (forall ((b2 ty))
  (forall ((f uni) (s (set (tuple21 a b))) (t uni) (a2 (tuple21 a b)))
  (=>
  (and (mem (set1 (tuple2 (tuple2 a1 b1) b2)) f
  (infix_plmngt b2 (tuple2 a1 b1) (t2tb11 s) t)) (mem3 a2
  (tb2t11 (dom b2 (tuple2 a1 b1) f)))) (mem (tuple2 (tuple2 a1 b1) b2)
  (Tuple2 (tuple2 a1 b1) b2 (t2tb13 a2)
  (apply b2 (tuple2 a1 b1) f (t2tb13 a2))) f)))))

;; apply_def0
  (assert
  (forall ((b2 ty))
  (forall ((f uni) (s (set b)) (t uni) (a2 b))
  (=>
  (and (mem (set1 (tuple2 b1 b2)) f (infix_plmngt b2 b1 (t2tb12 s) t)) (mem2
  a2 (tb2t12 (dom b2 b1 f)))) (mem (tuple2 b1 b2)
  (Tuple2 b1 b2 (t2tb14 a2) (apply b2 b1 f (t2tb14 a2))) f)))))

;; apply_def0
  (assert
  (forall ((f (set (tuple21 (set a) (set b)))) (s (set (set a)))
  (t (set (set b))) (a2 (set a)))
  (=>
  (and (mem (set1 (tuple2 (set1 a1) (set1 b1))) (t2tb538 f)
  (infix_plmngt (set1 b1) (set1 a1) (t2tb s) (t2tb44 t))) (mem (set1 a1)
  (t2tb1 a2) (dom (set1 b1) (set1 a1) (t2tb538 f)))) (mem
  (tuple2 (set1 a1) (set1 b1))
  (t2tb495
  (Tuple23 a2 (tb2t12 (apply (set1 b1) (set1 a1) (t2tb538 f) (t2tb1 a2)))))
  (t2tb538 f)))))

;; apply_def0
  (assert
  (forall ((f (set (tuple21 a b))) (s (set a)) (t (set b)) (a2 a))
  (=>
  (and (mem (set1 (tuple2 a1 b1)) (t2tb11 f)
  (infix_plmngt b1 a1 (t2tb1 s) (t2tb12 t))) (mem1 a2
  (tb2t1 (dom b1 a1 (t2tb11 f))))) (mem3
  (Tuple21 a2 (tb2t14 (apply b1 a1 (t2tb11 f) (t2tb2 a2)))) f))))

;; apply_def0
  (assert
  (forall ((b2 ty))
  (forall ((f uni) (s (set a)) (t uni) (a2 a))
  (=>
  (and (mem (set1 (tuple2 a1 b2)) f (infix_plmngt b2 a1 (t2tb1 s) t)) (mem1
  a2 (tb2t1 (dom b2 a1 f)))) (mem (tuple2 a1 b2)
  (Tuple2 a1 b2 (t2tb2 a2) (apply b2 a1 f (t2tb2 a2))) f)))))

;; apply_def0
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((f uni) (s uni) (t uni) (a3 uni))
  (=>
  (and (mem (set1 (tuple2 a2 b2)) f (infix_plmngt b2 a2 s t)) (mem a2 a3
  (dom b2 a2 f))) (mem (tuple2 a2 b2) (Tuple2 a2 b2 a3 (apply b2 a2 f a3))
  f)))))

(assert
;; mem_proj_2
 ;; File "lemmes_bbook.why", line 574, characters 7-17
  (not
  (forall ((s (set a)) (t (set b))) (mem19 (prj21 (Tuple23 s t))
  (infix_mnmngt6 (times2 s t) t)))))
(check-sat)
