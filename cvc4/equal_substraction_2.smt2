(set-logic AUFBVDTLIRA)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
(declare-sort uni 0)

(declare-sort ty 0)

(declare-fun sort (ty uni) Bool)

(declare-fun witness (ty) uni)

;; witness_sort
  (assert (forall ((a2 ty)) (sort a2 (witness a2))))

(declare-fun int () ty)

(declare-fun real () ty)

(declare-sort set 1)

(declare-fun set1 (ty) ty)

(declare-sort b 0)

(declare-fun b1 () ty)

(declare-sort a 0)

(declare-fun a1 () ty)

(declare-sort tuple21 2)

(declare-fun tuple2 (ty ty) ty)

(declare-fun mem (ty uni uni) Bool)

(declare-fun mem1 (a (set a)) Bool)

(declare-fun mem2 (b (set b)) Bool)

(declare-fun mem3 ((tuple21 a b) (set (tuple21 a b))) Bool)

(declare-fun mem5 ((tuple21 b a) (set (tuple21 b a))) Bool)

(declare-fun mem6 ((set (tuple21 b a)) (set (set (tuple21 b a)))) Bool)

(declare-fun infix_eqeq (ty uni uni) Bool)

(declare-fun infix_eqeq1 ((set a) (set a)) Bool)

(declare-fun infix_eqeq3 ((set b) (set b)) Bool)

(declare-fun infix_eqeq4 ((set (tuple21 a b)) (set (tuple21 a b))) Bool)

(declare-fun infix_eqeq6 ((set (tuple21 b a)) (set (tuple21 b a))) Bool)

(declare-fun infix_eqeq21 ((set (set (tuple21 b a))) (set (set (tuple21 b
  a)))) Bool)

;; infix ==_def
  (assert
  (forall ((s (set (set (tuple21 b a)))) (t (set (set (tuple21 b a)))))
  (= (infix_eqeq21 s t)
  (forall ((x (set (tuple21 b a)))) (= (mem6 x s) (mem6 x t))))))

;; infix ==_def
  (assert
  (forall ((s (set (tuple21 b a))) (t (set (tuple21 b a))))
  (= (infix_eqeq6 s t)
  (forall ((x (tuple21 b a))) (= (mem5 x s) (mem5 x t))))))

;; infix ==_def
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (tuple21 a b))))
  (= (infix_eqeq4 s t)
  (forall ((x (tuple21 a b))) (= (mem3 x s) (mem3 x t))))))

;; infix ==_def
  (assert
  (forall ((s (set b)) (t (set b)))
  (= (infix_eqeq3 s t) (forall ((x b)) (= (mem2 x s) (mem2 x t))))))

;; infix ==_def
  (assert
  (forall ((s (set a)) (t (set a)))
  (= (infix_eqeq1 s t) (forall ((x a)) (= (mem1 x s) (mem1 x t))))))

;; infix ==_def
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t uni))
  (and
  (=> (infix_eqeq a2 s t) (forall ((x uni)) (= (mem a2 x s) (mem a2 x t))))
  (=> (forall ((x uni)) (=> (sort a2 x) (= (mem a2 x s) (mem a2 x t))))
  (infix_eqeq a2 s t))))))

(declare-fun power (ty uni) uni)

;; power_sort
  (assert
  (forall ((a2 ty)) (forall ((x uni)) (sort (set1 (set1 a2)) (power a2 x)))))

(declare-fun non_empty_power (ty uni) uni)

;; non_empty_power_sort
  (assert
  (forall ((a2 ty))
  (forall ((x uni)) (sort (set1 (set1 a2)) (non_empty_power a2 x)))))

(declare-fun subset1 (ty uni uni) Bool)

(declare-fun subset2 ((set a) (set a)) Bool)

(declare-fun subset5 ((set b) (set b)) Bool)

(declare-fun subset6 ((set (tuple21 a b)) (set (tuple21 a b))) Bool)

(declare-fun subset8 ((set (tuple21 b a)) (set (tuple21 b a))) Bool)

(declare-fun subset22 ((set (set (tuple21 b a))) (set (set (tuple21 b
  a)))) Bool)

(declare-fun t2tb1943 ((set (set (set (tuple21 b a))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (set (tuple21 b a)))))) (sort
  (set1 (set1 (set1 (tuple2 b1 a1)))) (t2tb1943 x))))

(declare-fun tb2t1943 (uni) (set (set (set (tuple21 b a)))))

;; BridgeL
  (assert
  (forall ((i (set (set (set (tuple21 b a))))))
  (! (= (tb2t1943 (t2tb1943 i)) i) :pattern ((t2tb1943 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (set1 (tuple2 b1 a1)))) j)
     (= (t2tb1943 (tb2t1943 j)) j)) :pattern ((t2tb1943 (tb2t1943 j))) )))

(declare-fun t2tb56 ((set (set (tuple21 b a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 b a))))) (sort (set1 (set1 (tuple2 b1 a1)))
  (t2tb56 x))))

(declare-fun tb2t56 (uni) (set (set (tuple21 b a))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 b a)))))
  (! (= (tb2t56 (t2tb56 i)) i) :pattern ((t2tb56 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 b1 a1))) j) (= (t2tb56 (tb2t56 j)) j)) :pattern (
  (t2tb56 (tb2t56 j))) )))

;; subset_def
  (assert
  (forall ((s (set (set (tuple21 b a)))) (t (set (set (tuple21 b a)))))
  (= (subset22 s t) (mem (set1 (set1 (tuple2 b1 a1))) (t2tb56 s)
  (power (set1 (tuple2 b1 a1)) (t2tb56 t))))))

(declare-fun t2tb37 ((set (tuple21 b a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 b a)))) (sort (set1 (tuple2 b1 a1)) (t2tb37 x))))

(declare-fun tb2t37 (uni) (set (tuple21 b a)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 b a))))
  (! (= (tb2t37 (t2tb37 i)) i) :pattern ((t2tb37 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 b1 a1)) j) (= (t2tb37 (tb2t37 j)) j)) :pattern (
  (t2tb37 (tb2t37 j))) )))

;; subset_def
  (assert
  (forall ((s (set (tuple21 b a))) (t (set (tuple21 b a))))
  (= (subset8 s t) (mem6 s (tb2t56 (power (tuple2 b1 a1) (t2tb37 t)))))))

(declare-fun t2tb10 ((set (set (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 a b))))) (sort (set1 (set1 (tuple2 a1 b1)))
  (t2tb10 x))))

(declare-fun tb2t10 (uni) (set (set (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 a b)))))
  (! (= (tb2t10 (t2tb10 i)) i) :pattern ((t2tb10 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 a1 b1))) j) (= (t2tb10 (tb2t10 j)) j)) :pattern (
  (t2tb10 (tb2t10 j))) )))

(declare-fun t2tb11 ((set (tuple21 a b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a b)))) (sort (set1 (tuple2 a1 b1)) (t2tb11 x))))

(declare-fun tb2t11 (uni) (set (tuple21 a b)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a b))))
  (! (= (tb2t11 (t2tb11 i)) i) :pattern ((t2tb11 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 b1)) j) (= (t2tb11 (tb2t11 j)) j)) :pattern (
  (t2tb11 (tb2t11 j))) )))

;; subset_def
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (tuple21 a b))))
  (= (subset6 s t) (mem (set1 (tuple2 a1 b1)) (t2tb11 s)
  (power (tuple2 a1 b1) (t2tb11 t))))))

(declare-fun t2tb12 ((set b)) uni)

;; t2tb_sort
  (assert (forall ((x (set b))) (sort (set1 b1) (t2tb12 x))))

(declare-fun tb2t12 (uni) (set b))

;; BridgeL
  (assert
  (forall ((i (set b))) (! (= (tb2t12 (t2tb12 i)) i) :pattern ((t2tb12 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 b1) j) (= (t2tb12 (tb2t12 j)) j)) :pattern ((t2tb12
                                                                 (tb2t12 j))) )))

(declare-fun t2tb44 ((set (set b))) uni)

;; t2tb_sort
  (assert (forall ((x (set (set b)))) (sort (set1 (set1 b1)) (t2tb44 x))))

(declare-fun tb2t44 (uni) (set (set b)))

;; BridgeL
  (assert
  (forall ((i (set (set b))))
  (! (= (tb2t44 (t2tb44 i)) i) :pattern ((t2tb44 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 b1)) j) (= (t2tb44 (tb2t44 j)) j)) :pattern (
  (t2tb44 (tb2t44 j))) )))

;; subset_def
  (assert
  (forall ((s (set b)) (t (set b)))
  (= (subset5 s t) (mem (set1 b1) (t2tb12 s) (power b1 (t2tb12 t))))))

(declare-fun t2tb ((set (set a))) uni)

;; t2tb_sort
  (assert (forall ((x (set (set a)))) (sort (set1 (set1 a1)) (t2tb x))))

(declare-fun tb2t (uni) (set (set a)))

;; BridgeL
  (assert
  (forall ((i (set (set a)))) (! (= (tb2t (t2tb i)) i) :pattern ((t2tb i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 a1)) j) (= (t2tb (tb2t j)) j)) :pattern ((t2tb
                                                                    (tb2t j))) )))

(declare-fun t2tb1 ((set a)) uni)

;; t2tb_sort
  (assert (forall ((x (set a))) (sort (set1 a1) (t2tb1 x))))

(declare-fun tb2t1 (uni) (set a))

;; BridgeL
  (assert
  (forall ((i (set a))) (! (= (tb2t1 (t2tb1 i)) i) :pattern ((t2tb1 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 a1) j) (= (t2tb1 (tb2t1 j)) j)) :pattern ((t2tb1
                                                               (tb2t1 j))) )))

;; subset_def
  (assert
  (forall ((s (set a)) (t (set a)))
  (= (subset2 s t) (mem (set1 a1) (t2tb1 s) (power a1 (t2tb1 t))))))

;; subset_def
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t uni))
  (= (subset1 a2 s t) (mem (set1 a2) s (power a2 t))))))

(declare-fun subsetnoteq (ty uni uni) Bool)

;; subsetnoteq_def
  (assert
  (forall ((s (set (set (tuple21 b a)))) (t (set (set (tuple21 b a)))))
  (= (subsetnoteq (set1 (tuple2 b1 a1)) (t2tb56 s) (t2tb56 t))
  (and (subset22 s t) (not (infix_eqeq21 s t))))))

;; subsetnoteq_def
  (assert
  (forall ((s (set (tuple21 b a))) (t (set (tuple21 b a))))
  (= (subsetnoteq (tuple2 b1 a1) (t2tb37 s) (t2tb37 t))
  (and (subset8 s t) (not (infix_eqeq6 s t))))))

;; subsetnoteq_def
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (tuple21 a b))))
  (= (subsetnoteq (tuple2 a1 b1) (t2tb11 s) (t2tb11 t))
  (and (subset6 s t) (not (infix_eqeq4 s t))))))

;; subsetnoteq_def
  (assert
  (forall ((s (set b)) (t (set b)))
  (= (subsetnoteq b1 (t2tb12 s) (t2tb12 t))
  (and (subset5 s t) (not (infix_eqeq3 s t))))))

;; subsetnoteq_def
  (assert
  (forall ((s (set a)) (t (set a)))
  (= (subsetnoteq a1 (t2tb1 s) (t2tb1 t))
  (and (subset2 s t) (not (infix_eqeq1 s t))))))

;; subsetnoteq_def
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t uni))
  (= (subsetnoteq a2 s t) (and (subset1 a2 s t) (not (infix_eqeq a2 s t)))))))

(declare-fun empty (ty) uni)

;; empty_sort
  (assert (forall ((a2 ty)) (sort (set1 a2) (empty a2))))

(declare-fun is_empty (ty uni) Bool)

;; is_empty_def
  (assert
  (forall ((s (set (set (tuple21 b a)))))
  (= (is_empty (set1 (tuple2 b1 a1)) (t2tb56 s))
  (forall ((x (set (tuple21 b a)))) (not (mem6 x s))))))

;; is_empty_def
  (assert
  (forall ((s (set (tuple21 b a))))
  (= (is_empty (tuple2 b1 a1) (t2tb37 s))
  (forall ((x (tuple21 b a))) (not (mem5 x s))))))

;; is_empty_def
  (assert
  (forall ((s (set (tuple21 a b))))
  (= (is_empty (tuple2 a1 b1) (t2tb11 s))
  (forall ((x (tuple21 a b))) (not (mem3 x s))))))

;; is_empty_def
  (assert
  (forall ((s (set b)))
  (= (is_empty b1 (t2tb12 s)) (forall ((x b)) (not (mem2 x s))))))

;; is_empty_def
  (assert
  (forall ((s (set a)))
  (= (is_empty a1 (t2tb1 s)) (forall ((x a)) (not (mem1 x s))))))

;; is_empty_def
  (assert
  (forall ((a2 ty))
  (forall ((s uni))
  (and (=> (is_empty a2 s) (forall ((x uni)) (not (mem a2 x s))))
  (=> (forall ((x uni)) (=> (sort a2 x) (not (mem a2 x s)))) (is_empty a2 s))))))

;; empty_def1
  (assert (forall ((a2 ty)) (is_empty a2 (empty a2))))

;; empty
  (assert
  (forall ((x (set (tuple21 b a))))
  (not (mem6 x (tb2t56 (empty (set1 (tuple2 b1 a1))))))))

;; empty
  (assert
  (forall ((x (tuple21 b a))) (not (mem5 x (tb2t37 (empty (tuple2 b1 a1)))))))

;; empty
  (assert
  (forall ((x (tuple21 a b))) (not (mem3 x (tb2t11 (empty (tuple2 a1 b1)))))))

;; empty
  (assert (forall ((x b)) (not (mem2 x (tb2t12 (empty b1))))))

;; empty
  (assert (forall ((x a)) (not (mem1 x (tb2t1 (empty a1))))))

;; empty
  (assert (forall ((a2 ty)) (forall ((x uni)) (not (mem a2 x (empty a2))))))

(declare-fun add (ty uni uni) uni)

;; add_sort
  (assert
  (forall ((a2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 a2) (add a2 x x1)))))

;; add_def1
  (assert
  (forall ((x (set (tuple21 b a))) (y (set (tuple21 b a))))
  (forall ((s (set (set (tuple21 b a)))))
  (= (mem6 x (tb2t56 (add (set1 (tuple2 b1 a1)) (t2tb37 y) (t2tb56 s))))
  (or (= x y) (mem6 x s))))))

(declare-fun t2tb38 ((tuple21 b a)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 b a))) (sort (tuple2 b1 a1) (t2tb38 x))))

(declare-fun tb2t38 (uni) (tuple21 b a))

;; BridgeL
  (assert
  (forall ((i (tuple21 b a)))
  (! (= (tb2t38 (t2tb38 i)) i) :pattern ((t2tb38 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 b1 a1) j) (= (t2tb38 (tb2t38 j)) j)) :pattern (
  (t2tb38 (tb2t38 j))) )))

;; add_def1
  (assert
  (forall ((x (tuple21 b a)) (y (tuple21 b a)))
  (forall ((s (set (tuple21 b a))))
  (= (mem5 x (tb2t37 (add (tuple2 b1 a1) (t2tb38 y) (t2tb37 s))))
  (or (= x y) (mem5 x s))))))

(declare-fun t2tb13 ((tuple21 a b)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 a b))) (sort (tuple2 a1 b1) (t2tb13 x))))

(declare-fun tb2t13 (uni) (tuple21 a b))

;; BridgeL
  (assert
  (forall ((i (tuple21 a b)))
  (! (= (tb2t13 (t2tb13 i)) i) :pattern ((t2tb13 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 b1) j) (= (t2tb13 (tb2t13 j)) j)) :pattern (
  (t2tb13 (tb2t13 j))) )))

;; add_def1
  (assert
  (forall ((x (tuple21 a b)) (y (tuple21 a b)))
  (forall ((s (set (tuple21 a b))))
  (= (mem3 x (tb2t11 (add (tuple2 a1 b1) (t2tb13 y) (t2tb11 s))))
  (or (= x y) (mem3 x s))))))

(declare-fun t2tb14 (b) uni)

;; t2tb_sort
  (assert (forall ((x b)) (sort b1 (t2tb14 x))))

(declare-fun tb2t14 (uni) b)

;; BridgeL
  (assert
  (forall ((i b)) (! (= (tb2t14 (t2tb14 i)) i) :pattern ((t2tb14 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort b1 j) (= (t2tb14 (tb2t14 j)) j)) :pattern ((t2tb14 (tb2t14 j))) )))

;; add_def1
  (assert
  (forall ((x b) (y b))
  (forall ((s (set b)))
  (= (mem2 x (tb2t12 (add b1 (t2tb14 y) (t2tb12 s))))
  (or (= x y) (mem2 x s))))))

(declare-fun t2tb2 (a) uni)

;; t2tb_sort
  (assert (forall ((x a)) (sort a1 (t2tb2 x))))

(declare-fun tb2t2 (uni) a)

;; BridgeL
  (assert (forall ((i a)) (! (= (tb2t2 (t2tb2 i)) i) :pattern ((t2tb2 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort a1 j) (= (t2tb2 (tb2t2 j)) j)) :pattern ((t2tb2 (tb2t2 j))) )))

;; add_def1
  (assert
  (forall ((x a) (y a))
  (forall ((s (set a)))
  (= (mem1 x (tb2t1 (add a1 (t2tb2 y) (t2tb1 s)))) (or (= x y) (mem1 x s))))))

;; add_def1
  (assert
  (forall ((a2 ty))
  (forall ((x uni) (y uni))
  (=> (sort a2 x)
  (=> (sort a2 y)
  (forall ((s uni)) (= (mem a2 x (add a2 y s)) (or (= x y) (mem a2 x s)))))))))

(declare-fun singleton (ty uni) uni)

;; singleton_sort
  (assert
  (forall ((a2 ty)) (forall ((x uni)) (sort (set1 a2) (singleton a2 x)))))

;; mem_singleton
  (assert
  (forall ((x (set (tuple21 b a))) (y (set (tuple21 b a))))
  (= (mem6 x (tb2t56 (singleton (set1 (tuple2 b1 a1)) (t2tb37 y)))) (= x y))))

;; mem_singleton
  (assert
  (forall ((x (tuple21 b a)) (y (tuple21 b a)))
  (= (mem5 x (tb2t37 (singleton (tuple2 b1 a1) (t2tb38 y)))) (= x y))))

;; mem_singleton
  (assert
  (forall ((x (tuple21 a b)) (y (tuple21 a b)))
  (= (mem3 x (tb2t11 (singleton (tuple2 a1 b1) (t2tb13 y)))) (= x y))))

;; mem_singleton
  (assert
  (forall ((x b) (y b))
  (= (mem2 x (tb2t12 (singleton b1 (t2tb14 y)))) (= x y))))

;; mem_singleton
  (assert
  (forall ((x a) (y a))
  (= (mem1 x (tb2t1 (singleton a1 (t2tb2 y)))) (= x y))))

;; mem_singleton
  (assert
  (forall ((a2 ty))
  (forall ((x uni) (y uni))
  (=> (sort a2 x) (=> (sort a2 y) (= (mem a2 x (singleton a2 y)) (= x y)))))))

(declare-fun remove (ty uni uni) uni)

;; remove_sort
  (assert
  (forall ((a2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 a2) (remove a2 x x1)))))

;; remove_def1
  (assert
  (forall ((x (set (tuple21 b a))) (y (set (tuple21 b a)))
  (s (set (set (tuple21 b a)))))
  (= (mem6 x (tb2t56 (remove (set1 (tuple2 b1 a1)) (t2tb37 y) (t2tb56 s))))
  (and (not (= x y)) (mem6 x s)))))

;; remove_def1
  (assert
  (forall ((x (tuple21 b a)) (y (tuple21 b a)) (s (set (tuple21 b a))))
  (= (mem5 x (tb2t37 (remove (tuple2 b1 a1) (t2tb38 y) (t2tb37 s))))
  (and (not (= x y)) (mem5 x s)))))

;; remove_def1
  (assert
  (forall ((x (tuple21 a b)) (y (tuple21 a b)) (s (set (tuple21 a b))))
  (= (mem3 x (tb2t11 (remove (tuple2 a1 b1) (t2tb13 y) (t2tb11 s))))
  (and (not (= x y)) (mem3 x s)))))

;; remove_def1
  (assert
  (forall ((x b) (y b) (s (set b)))
  (= (mem2 x (tb2t12 (remove b1 (t2tb14 y) (t2tb12 s))))
  (and (not (= x y)) (mem2 x s)))))

;; remove_def1
  (assert
  (forall ((x a) (y a) (s (set a)))
  (= (mem1 x (tb2t1 (remove a1 (t2tb2 y) (t2tb1 s))))
  (and (not (= x y)) (mem1 x s)))))

;; remove_def1
  (assert
  (forall ((a2 ty))
  (forall ((x uni) (y uni) (s uni))
  (=> (sort a2 x)
  (=> (sort a2 y)
  (= (mem a2 x (remove a2 y s)) (and (not (= x y)) (mem a2 x s))))))))

(declare-fun all (ty) uni)

;; all_sort
  (assert (forall ((a2 ty)) (sort (set1 a2) (all a2))))

;; all_def
  (assert
  (forall ((x (set (tuple21 b a)))) (mem6 x
  (tb2t56 (all (set1 (tuple2 b1 a1)))))))

;; all_def
  (assert
  (forall ((x (tuple21 b a))) (mem5 x (tb2t37 (all (tuple2 b1 a1))))))

;; all_def
  (assert
  (forall ((x (tuple21 a b))) (mem3 x (tb2t11 (all (tuple2 a1 b1))))))

;; all_def
  (assert (forall ((x b)) (mem2 x (tb2t12 (all b1)))))

;; all_def
  (assert (forall ((x a)) (mem1 x (tb2t1 (all a1)))))

;; all_def
  (assert (forall ((a2 ty)) (forall ((x uni)) (mem a2 x (all a2)))))

(declare-fun union1 (ty uni uni) uni)

;; union_sort
  (assert
  (forall ((a2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 a2) (union1 a2 x x1)))))

;; mem_union
  (assert
  (forall ((s (set (set (tuple21 b a)))) (t (set (set (tuple21 b a))))
  (x (set (tuple21 b a))))
  (= (mem6 x (tb2t56 (union1 (set1 (tuple2 b1 a1)) (t2tb56 s) (t2tb56 t))))
  (or (mem6 x s) (mem6 x t)))))

;; mem_union
  (assert
  (forall ((s (set (tuple21 b a))) (t (set (tuple21 b a))) (x (tuple21 b a)))
  (= (mem5 x (tb2t37 (union1 (tuple2 b1 a1) (t2tb37 s) (t2tb37 t))))
  (or (mem5 x s) (mem5 x t)))))

;; mem_union
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (tuple21 a b))) (x (tuple21 a b)))
  (= (mem3 x (tb2t11 (union1 (tuple2 a1 b1) (t2tb11 s) (t2tb11 t))))
  (or (mem3 x s) (mem3 x t)))))

;; mem_union
  (assert
  (forall ((s (set b)) (t (set b)) (x b))
  (= (mem2 x (tb2t12 (union1 b1 (t2tb12 s) (t2tb12 t))))
  (or (mem2 x s) (mem2 x t)))))

;; mem_union
  (assert
  (forall ((s (set a)) (t (set a)) (x a))
  (= (mem1 x (tb2t1 (union1 a1 (t2tb1 s) (t2tb1 t))))
  (or (mem1 x s) (mem1 x t)))))

;; mem_union
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t uni) (x uni))
  (= (mem a2 x (union1 a2 s t)) (or (mem a2 x s) (mem a2 x t))))))

(declare-fun inter (ty uni uni) uni)

;; inter_sort
  (assert
  (forall ((a2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 a2) (inter a2 x x1)))))

;; mem_inter
  (assert
  (forall ((s (set (set (tuple21 b a)))) (t (set (set (tuple21 b a))))
  (x (set (tuple21 b a))))
  (= (mem6 x (tb2t56 (inter (set1 (tuple2 b1 a1)) (t2tb56 s) (t2tb56 t))))
  (and (mem6 x s) (mem6 x t)))))

;; mem_inter
  (assert
  (forall ((s (set (tuple21 b a))) (t (set (tuple21 b a))) (x (tuple21 b a)))
  (= (mem5 x (tb2t37 (inter (tuple2 b1 a1) (t2tb37 s) (t2tb37 t))))
  (and (mem5 x s) (mem5 x t)))))

;; mem_inter
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (tuple21 a b))) (x (tuple21 a b)))
  (= (mem3 x (tb2t11 (inter (tuple2 a1 b1) (t2tb11 s) (t2tb11 t))))
  (and (mem3 x s) (mem3 x t)))))

;; mem_inter
  (assert
  (forall ((s (set b)) (t (set b)) (x b))
  (= (mem2 x (tb2t12 (inter b1 (t2tb12 s) (t2tb12 t))))
  (and (mem2 x s) (mem2 x t)))))

;; mem_inter
  (assert
  (forall ((s (set a)) (t (set a)) (x a))
  (= (mem1 x (tb2t1 (inter a1 (t2tb1 s) (t2tb1 t))))
  (and (mem1 x s) (mem1 x t)))))

;; mem_inter
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t uni) (x uni))
  (= (mem a2 x (inter a2 s t)) (and (mem a2 x s) (mem a2 x t))))))

(declare-fun diff (ty uni uni) uni)

;; diff_sort
  (assert
  (forall ((a2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 a2) (diff a2 x x1)))))

;; mem_diff
  (assert
  (forall ((s (set (set (tuple21 b a)))) (t (set (set (tuple21 b a))))
  (x (set (tuple21 b a))))
  (= (mem6 x (tb2t56 (diff (set1 (tuple2 b1 a1)) (t2tb56 s) (t2tb56 t))))
  (and (mem6 x s) (not (mem6 x t))))))

;; mem_diff
  (assert
  (forall ((s (set (tuple21 b a))) (t (set (tuple21 b a))) (x (tuple21 b a)))
  (= (mem5 x (tb2t37 (diff (tuple2 b1 a1) (t2tb37 s) (t2tb37 t))))
  (and (mem5 x s) (not (mem5 x t))))))

;; mem_diff
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (tuple21 a b))) (x (tuple21 a b)))
  (= (mem3 x (tb2t11 (diff (tuple2 a1 b1) (t2tb11 s) (t2tb11 t))))
  (and (mem3 x s) (not (mem3 x t))))))

;; mem_diff
  (assert
  (forall ((s (set b)) (t (set b)) (x b))
  (= (mem2 x (tb2t12 (diff b1 (t2tb12 s) (t2tb12 t))))
  (and (mem2 x s) (not (mem2 x t))))))

;; mem_diff
  (assert
  (forall ((s (set a)) (t (set a)) (x a))
  (= (mem1 x (tb2t1 (diff a1 (t2tb1 s) (t2tb1 t))))
  (and (mem1 x s) (not (mem1 x t))))))

;; mem_diff
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t uni) (x uni))
  (= (mem a2 x (diff a2 s t)) (and (mem a2 x s) (not (mem a2 x t)))))))

(declare-fun Tuple2 (ty ty uni uni) uni)

;; Tuple2_sort
  (assert
  (forall ((a2 ty) (a3 ty))
  (forall ((x uni) (x1 uni)) (sort (tuple2 a3 a2) (Tuple2 a3 a2 x x1)))))

(declare-fun Tuple2_proj_1 (ty ty uni) uni)

;; Tuple2_proj_1_sort
  (assert
  (forall ((a2 ty) (a3 ty))
  (forall ((x uni)) (sort a3 (Tuple2_proj_1 a3 a2 x)))))

;; Tuple2_proj_1_def
  (assert
  (forall ((a2 ty) (a3 ty))
  (forall ((u uni) (u1 uni))
  (=> (sort a3 u) (= (Tuple2_proj_1 a3 a2 (Tuple2 a3 a2 u u1)) u)))))

(declare-fun Tuple2_proj_2 (ty ty uni) uni)

;; Tuple2_proj_2_sort
  (assert
  (forall ((a2 ty) (a3 ty))
  (forall ((x uni)) (sort a2 (Tuple2_proj_2 a3 a2 x)))))

;; Tuple2_proj_2_def
  (assert
  (forall ((a2 ty) (a3 ty))
  (forall ((u uni) (u1 uni))
  (=> (sort a2 u1) (= (Tuple2_proj_2 a3 a2 (Tuple2 a3 a2 u u1)) u1)))))

;; tuple2_inversion
  (assert
  (forall ((a2 ty) (a3 ty))
  (forall ((u uni))
  (=> (sort (tuple2 a3 a2) u)
  (= u (Tuple2 a3 a2 (Tuple2_proj_1 a3 a2 u) (Tuple2_proj_2 a3 a2 u)))))))

(declare-fun times (ty ty uni uni) uni)

;; times_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (tuple2 a2 b2)) (times b2 a2 x x1)))))

;; mem_times
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set (set (tuple21 b a)))) (x uni) (y (set (tuple21 b
  a))))
  (= (mem (tuple2 a2 (set1 (tuple2 b1 a1)))
  (Tuple2 a2 (set1 (tuple2 b1 a1)) x (t2tb37 y))
  (times (set1 (tuple2 b1 a1)) a2 s (t2tb56 t)))
  (and (mem a2 x s) (mem6 y t))))))

;; mem_times
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set (tuple21 b a))) (x uni) (y (tuple21 b a)))
  (= (mem (tuple2 a2 (tuple2 b1 a1)) (Tuple2 a2 (tuple2 b1 a1) x (t2tb38 y))
  (times (tuple2 b1 a1) a2 s (t2tb37 t))) (and (mem a2 x s) (mem5 y t))))))

;; mem_times
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set (tuple21 a b))) (x uni) (y (tuple21 a b)))
  (= (mem (tuple2 a2 (tuple2 a1 b1)) (Tuple2 a2 (tuple2 a1 b1) x (t2tb13 y))
  (times (tuple2 a1 b1) a2 s (t2tb11 t))) (and (mem a2 x s) (mem3 y t))))))

;; mem_times
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set b)) (x uni) (y b))
  (= (mem (tuple2 a2 b1) (Tuple2 a2 b1 x (t2tb14 y))
  (times b1 a2 s (t2tb12 t))) (and (mem a2 x s) (mem2 y t))))))

;; mem_times
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set a)) (x uni) (y a))
  (= (mem (tuple2 a2 a1) (Tuple2 a2 a1 x (t2tb2 y))
  (times a1 a2 s (t2tb1 t))) (and (mem a2 x s) (mem1 y t))))))

(declare-fun t2tb1944 ((set (tuple21 (set (tuple21 b a)) (set (tuple21 b
  a))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 b a)) (set (tuple21 b a)))))) (sort
  (set1 (tuple2 (set1 (tuple2 b1 a1)) (set1 (tuple2 b1 a1)))) (t2tb1944 x))))

(declare-fun tb2t1944 (uni) (set (tuple21 (set (tuple21 b a)) (set (tuple21 b
  a)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 b a)) (set (tuple21 b a))))))
  (! (= (tb2t1944 (t2tb1944 i)) i) :pattern ((t2tb1944 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 b1 a1)) (set1 (tuple2 b1 a1)))) j)
     (= (t2tb1944 (tb2t1944 j)) j)) :pattern ((t2tb1944 (tb2t1944 j))) )))

(declare-fun t2tb1945 ((tuple21 (set (tuple21 b a)) (set (tuple21 b
  a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 b a)) (set (tuple21 b a))))) (sort
  (tuple2 (set1 (tuple2 b1 a1)) (set1 (tuple2 b1 a1))) (t2tb1945 x))))

(declare-fun tb2t1945 (uni) (tuple21 (set (tuple21 b a)) (set (tuple21 b
  a))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 b a)) (set (tuple21 b a)))))
  (! (= (tb2t1945 (t2tb1945 i)) i) :pattern ((t2tb1945 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 b1 a1)) (set1 (tuple2 b1 a1))) j)
     (= (t2tb1945 (tb2t1945 j)) j)) :pattern ((t2tb1945 (tb2t1945 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 b a)))) (t (set (set (tuple21 b a))))
  (x (set (tuple21 b a))) (y (set (tuple21 b a))))
  (= (mem (tuple2 (set1 (tuple2 b1 a1)) (set1 (tuple2 b1 a1)))
  (Tuple2 (set1 (tuple2 b1 a1)) (set1 (tuple2 b1 a1)) (t2tb37 x) (t2tb37 y))
  (times (set1 (tuple2 b1 a1)) (set1 (tuple2 b1 a1)) (t2tb56 s) (t2tb56 t)))
  (and (mem6 x s) (mem6 y t)))))

(declare-fun t2tb1946 ((set (tuple21 (set (tuple21 b a)) (tuple21 b
  a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 b a)) (tuple21 b a))))) (sort
  (set1 (tuple2 (set1 (tuple2 b1 a1)) (tuple2 b1 a1))) (t2tb1946 x))))

(declare-fun tb2t1946 (uni) (set (tuple21 (set (tuple21 b a)) (tuple21 b
  a))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 b a)) (tuple21 b a)))))
  (! (= (tb2t1946 (t2tb1946 i)) i) :pattern ((t2tb1946 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 b1 a1)) (tuple2 b1 a1))) j)
     (= (t2tb1946 (tb2t1946 j)) j)) :pattern ((t2tb1946 (tb2t1946 j))) )))

(declare-fun t2tb1947 ((tuple21 (set (tuple21 b a)) (tuple21 b a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 b a)) (tuple21 b a)))) (sort
  (tuple2 (set1 (tuple2 b1 a1)) (tuple2 b1 a1)) (t2tb1947 x))))

(declare-fun tb2t1947 (uni) (tuple21 (set (tuple21 b a)) (tuple21 b a)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 b a)) (tuple21 b a))))
  (! (= (tb2t1947 (t2tb1947 i)) i) :pattern ((t2tb1947 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 b1 a1)) (tuple2 b1 a1)) j)
     (= (t2tb1947 (tb2t1947 j)) j)) :pattern ((t2tb1947 (tb2t1947 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 b a)))) (t (set (tuple21 b a)))
  (x (set (tuple21 b a))) (y (tuple21 b a)))
  (= (mem (tuple2 (set1 (tuple2 b1 a1)) (tuple2 b1 a1))
  (Tuple2 (set1 (tuple2 b1 a1)) (tuple2 b1 a1) (t2tb37 x) (t2tb38 y))
  (times (tuple2 b1 a1) (set1 (tuple2 b1 a1)) (t2tb56 s) (t2tb37 t)))
  (and (mem6 x s) (mem5 y t)))))

(declare-fun t2tb1948 ((set (tuple21 (set (tuple21 b a)) (tuple21 a
  b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 b a)) (tuple21 a b))))) (sort
  (set1 (tuple2 (set1 (tuple2 b1 a1)) (tuple2 a1 b1))) (t2tb1948 x))))

(declare-fun tb2t1948 (uni) (set (tuple21 (set (tuple21 b a)) (tuple21 a
  b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 b a)) (tuple21 a b)))))
  (! (= (tb2t1948 (t2tb1948 i)) i) :pattern ((t2tb1948 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 b1 a1)) (tuple2 a1 b1))) j)
     (= (t2tb1948 (tb2t1948 j)) j)) :pattern ((t2tb1948 (tb2t1948 j))) )))

(declare-fun t2tb1949 ((tuple21 (set (tuple21 b a)) (tuple21 a b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 b a)) (tuple21 a b)))) (sort
  (tuple2 (set1 (tuple2 b1 a1)) (tuple2 a1 b1)) (t2tb1949 x))))

(declare-fun tb2t1949 (uni) (tuple21 (set (tuple21 b a)) (tuple21 a b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 b a)) (tuple21 a b))))
  (! (= (tb2t1949 (t2tb1949 i)) i) :pattern ((t2tb1949 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 b1 a1)) (tuple2 a1 b1)) j)
     (= (t2tb1949 (tb2t1949 j)) j)) :pattern ((t2tb1949 (tb2t1949 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 b a)))) (t (set (tuple21 a b)))
  (x (set (tuple21 b a))) (y (tuple21 a b)))
  (= (mem (tuple2 (set1 (tuple2 b1 a1)) (tuple2 a1 b1))
  (Tuple2 (set1 (tuple2 b1 a1)) (tuple2 a1 b1) (t2tb37 x) (t2tb13 y))
  (times (tuple2 a1 b1) (set1 (tuple2 b1 a1)) (t2tb56 s) (t2tb11 t)))
  (and (mem6 x s) (mem3 y t)))))

(declare-fun t2tb1950 ((set (tuple21 (set (tuple21 b a)) b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 b a)) b)))) (sort
  (set1 (tuple2 (set1 (tuple2 b1 a1)) b1)) (t2tb1950 x))))

(declare-fun tb2t1950 (uni) (set (tuple21 (set (tuple21 b a)) b)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 b a)) b))))
  (! (= (tb2t1950 (t2tb1950 i)) i) :pattern ((t2tb1950 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 b1 a1)) b1)) j)
     (= (t2tb1950 (tb2t1950 j)) j)) :pattern ((t2tb1950 (tb2t1950 j))) )))

(declare-fun t2tb1951 ((tuple21 (set (tuple21 b a)) b)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 b a)) b))) (sort
  (tuple2 (set1 (tuple2 b1 a1)) b1) (t2tb1951 x))))

(declare-fun tb2t1951 (uni) (tuple21 (set (tuple21 b a)) b))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 b a)) b)))
  (! (= (tb2t1951 (t2tb1951 i)) i) :pattern ((t2tb1951 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 b1 a1)) b1) j)
     (= (t2tb1951 (tb2t1951 j)) j)) :pattern ((t2tb1951 (tb2t1951 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 b a)))) (t (set b)) (x (set (tuple21 b a)))
  (y b))
  (= (mem (tuple2 (set1 (tuple2 b1 a1)) b1)
  (Tuple2 (set1 (tuple2 b1 a1)) b1 (t2tb37 x) (t2tb14 y))
  (times b1 (set1 (tuple2 b1 a1)) (t2tb56 s) (t2tb12 t)))
  (and (mem6 x s) (mem2 y t)))))

(declare-fun t2tb1952 ((set (tuple21 (set (tuple21 b a)) a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 b a)) a)))) (sort
  (set1 (tuple2 (set1 (tuple2 b1 a1)) a1)) (t2tb1952 x))))

(declare-fun tb2t1952 (uni) (set (tuple21 (set (tuple21 b a)) a)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 b a)) a))))
  (! (= (tb2t1952 (t2tb1952 i)) i) :pattern ((t2tb1952 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 b1 a1)) a1)) j)
     (= (t2tb1952 (tb2t1952 j)) j)) :pattern ((t2tb1952 (tb2t1952 j))) )))

(declare-fun t2tb1953 ((tuple21 (set (tuple21 b a)) a)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 b a)) a))) (sort
  (tuple2 (set1 (tuple2 b1 a1)) a1) (t2tb1953 x))))

(declare-fun tb2t1953 (uni) (tuple21 (set (tuple21 b a)) a))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 b a)) a)))
  (! (= (tb2t1953 (t2tb1953 i)) i) :pattern ((t2tb1953 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 b1 a1)) a1) j)
     (= (t2tb1953 (tb2t1953 j)) j)) :pattern ((t2tb1953 (tb2t1953 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 b a)))) (t (set a)) (x (set (tuple21 b a)))
  (y a))
  (= (mem (tuple2 (set1 (tuple2 b1 a1)) a1)
  (Tuple2 (set1 (tuple2 b1 a1)) a1 (t2tb37 x) (t2tb2 y))
  (times a1 (set1 (tuple2 b1 a1)) (t2tb56 s) (t2tb1 t)))
  (and (mem6 x s) (mem1 y t)))))

;; mem_times
  (assert
  (forall ((b2 ty))
  (forall ((s (set (set (tuple21 b a)))) (t uni) (x (set (tuple21 b a)))
  (y uni))
  (= (mem (tuple2 (set1 (tuple2 b1 a1)) b2)
  (Tuple2 (set1 (tuple2 b1 a1)) b2 (t2tb37 x) y)
  (times b2 (set1 (tuple2 b1 a1)) (t2tb56 s) t))
  (and (mem6 x s) (mem b2 y t))))))

(declare-fun t2tb1954 ((set (tuple21 (tuple21 b a) (set (tuple21 b
  a))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b a) (set (tuple21 b a)))))) (sort
  (set1 (tuple2 (tuple2 b1 a1) (set1 (tuple2 b1 a1)))) (t2tb1954 x))))

(declare-fun tb2t1954 (uni) (set (tuple21 (tuple21 b a) (set (tuple21 b
  a)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b a) (set (tuple21 b a))))))
  (! (= (tb2t1954 (t2tb1954 i)) i) :pattern ((t2tb1954 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 a1) (set1 (tuple2 b1 a1)))) j)
     (= (t2tb1954 (tb2t1954 j)) j)) :pattern ((t2tb1954 (tb2t1954 j))) )))

(declare-fun t2tb1955 ((tuple21 (tuple21 b a) (set (tuple21 b a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b a) (set (tuple21 b a))))) (sort
  (tuple2 (tuple2 b1 a1) (set1 (tuple2 b1 a1))) (t2tb1955 x))))

(declare-fun tb2t1955 (uni) (tuple21 (tuple21 b a) (set (tuple21 b a))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b a) (set (tuple21 b a)))))
  (! (= (tb2t1955 (t2tb1955 i)) i) :pattern ((t2tb1955 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 a1) (set1 (tuple2 b1 a1))) j)
     (= (t2tb1955 (tb2t1955 j)) j)) :pattern ((t2tb1955 (tb2t1955 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 b a))) (t (set (set (tuple21 b a))))
  (x (tuple21 b a)) (y (set (tuple21 b a))))
  (= (mem (tuple2 (tuple2 b1 a1) (set1 (tuple2 b1 a1)))
  (Tuple2 (tuple2 b1 a1) (set1 (tuple2 b1 a1)) (t2tb38 x) (t2tb37 y))
  (times (set1 (tuple2 b1 a1)) (tuple2 b1 a1) (t2tb37 s) (t2tb56 t)))
  (and (mem5 x s) (mem6 y t)))))

(declare-fun t2tb1057 ((set (tuple21 (tuple21 b a) (tuple21 b a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b a) (tuple21 b a))))) (sort
  (set1 (tuple2 (tuple2 b1 a1) (tuple2 b1 a1))) (t2tb1057 x))))

(declare-fun tb2t1057 (uni) (set (tuple21 (tuple21 b a) (tuple21 b a))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b a) (tuple21 b a)))))
  (! (= (tb2t1057 (t2tb1057 i)) i) :pattern ((t2tb1057 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 a1) (tuple2 b1 a1))) j)
     (= (t2tb1057 (tb2t1057 j)) j)) :pattern ((t2tb1057 (tb2t1057 j))) )))

(declare-fun t2tb1058 ((tuple21 (tuple21 b a) (tuple21 b a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b a) (tuple21 b a)))) (sort
  (tuple2 (tuple2 b1 a1) (tuple2 b1 a1)) (t2tb1058 x))))

(declare-fun tb2t1058 (uni) (tuple21 (tuple21 b a) (tuple21 b a)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b a) (tuple21 b a))))
  (! (= (tb2t1058 (t2tb1058 i)) i) :pattern ((t2tb1058 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 a1) (tuple2 b1 a1)) j)
     (= (t2tb1058 (tb2t1058 j)) j)) :pattern ((t2tb1058 (tb2t1058 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 b a))) (t (set (tuple21 b a))) (x (tuple21 b a))
  (y (tuple21 b a)))
  (= (mem (tuple2 (tuple2 b1 a1) (tuple2 b1 a1))
  (Tuple2 (tuple2 b1 a1) (tuple2 b1 a1) (t2tb38 x) (t2tb38 y))
  (times (tuple2 b1 a1) (tuple2 b1 a1) (t2tb37 s) (t2tb37 t)))
  (and (mem5 x s) (mem5 y t)))))

(declare-fun t2tb1061 ((set (tuple21 (tuple21 b a) (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b a) (tuple21 a b))))) (sort
  (set1 (tuple2 (tuple2 b1 a1) (tuple2 a1 b1))) (t2tb1061 x))))

(declare-fun tb2t1061 (uni) (set (tuple21 (tuple21 b a) (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b a) (tuple21 a b)))))
  (! (= (tb2t1061 (t2tb1061 i)) i) :pattern ((t2tb1061 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 a1) (tuple2 a1 b1))) j)
     (= (t2tb1061 (tb2t1061 j)) j)) :pattern ((t2tb1061 (tb2t1061 j))) )))

(declare-fun t2tb1062 ((tuple21 (tuple21 b a) (tuple21 a b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b a) (tuple21 a b)))) (sort
  (tuple2 (tuple2 b1 a1) (tuple2 a1 b1)) (t2tb1062 x))))

(declare-fun tb2t1062 (uni) (tuple21 (tuple21 b a) (tuple21 a b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b a) (tuple21 a b))))
  (! (= (tb2t1062 (t2tb1062 i)) i) :pattern ((t2tb1062 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 a1) (tuple2 a1 b1)) j)
     (= (t2tb1062 (tb2t1062 j)) j)) :pattern ((t2tb1062 (tb2t1062 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 b a))) (t (set (tuple21 a b))) (x (tuple21 b a))
  (y (tuple21 a b)))
  (= (mem (tuple2 (tuple2 b1 a1) (tuple2 a1 b1))
  (Tuple2 (tuple2 b1 a1) (tuple2 a1 b1) (t2tb38 x) (t2tb13 y))
  (times (tuple2 a1 b1) (tuple2 b1 a1) (t2tb37 s) (t2tb11 t)))
  (and (mem5 x s) (mem3 y t)))))

(declare-fun t2tb1063 ((set (tuple21 (tuple21 b a) b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b a) b)))) (sort
  (set1 (tuple2 (tuple2 b1 a1) b1)) (t2tb1063 x))))

(declare-fun tb2t1063 (uni) (set (tuple21 (tuple21 b a) b)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b a) b))))
  (! (= (tb2t1063 (t2tb1063 i)) i) :pattern ((t2tb1063 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 a1) b1)) j)
     (= (t2tb1063 (tb2t1063 j)) j)) :pattern ((t2tb1063 (tb2t1063 j))) )))

(declare-fun t2tb1064 ((tuple21 (tuple21 b a) b)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b a) b))) (sort (tuple2 (tuple2 b1 a1) b1)
  (t2tb1064 x))))

(declare-fun tb2t1064 (uni) (tuple21 (tuple21 b a) b))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b a) b)))
  (! (= (tb2t1064 (t2tb1064 i)) i) :pattern ((t2tb1064 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 a1) b1) j) (= (t2tb1064 (tb2t1064 j)) j)) :pattern (
  (t2tb1064 (tb2t1064 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 b a))) (t (set b)) (x (tuple21 b a)) (y b))
  (= (mem (tuple2 (tuple2 b1 a1) b1)
  (Tuple2 (tuple2 b1 a1) b1 (t2tb38 x) (t2tb14 y))
  (times b1 (tuple2 b1 a1) (t2tb37 s) (t2tb12 t)))
  (and (mem5 x s) (mem2 y t)))))

(declare-fun t2tb1065 ((set (tuple21 (tuple21 b a) a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b a) a)))) (sort
  (set1 (tuple2 (tuple2 b1 a1) a1)) (t2tb1065 x))))

(declare-fun tb2t1065 (uni) (set (tuple21 (tuple21 b a) a)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b a) a))))
  (! (= (tb2t1065 (t2tb1065 i)) i) :pattern ((t2tb1065 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 a1) a1)) j)
     (= (t2tb1065 (tb2t1065 j)) j)) :pattern ((t2tb1065 (tb2t1065 j))) )))

(declare-fun t2tb1066 ((tuple21 (tuple21 b a) a)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b a) a))) (sort (tuple2 (tuple2 b1 a1) a1)
  (t2tb1066 x))))

(declare-fun tb2t1066 (uni) (tuple21 (tuple21 b a) a))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b a) a)))
  (! (= (tb2t1066 (t2tb1066 i)) i) :pattern ((t2tb1066 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 a1) a1) j) (= (t2tb1066 (tb2t1066 j)) j)) :pattern (
  (t2tb1066 (tb2t1066 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 b a))) (t (set a)) (x (tuple21 b a)) (y a))
  (= (mem (tuple2 (tuple2 b1 a1) a1)
  (Tuple2 (tuple2 b1 a1) a1 (t2tb38 x) (t2tb2 y))
  (times a1 (tuple2 b1 a1) (t2tb37 s) (t2tb1 t)))
  (and (mem5 x s) (mem1 y t)))))

;; mem_times
  (assert
  (forall ((b2 ty))
  (forall ((s (set (tuple21 b a))) (t uni) (x (tuple21 b a)) (y uni))
  (= (mem (tuple2 (tuple2 b1 a1) b2) (Tuple2 (tuple2 b1 a1) b2 (t2tb38 x) y)
  (times b2 (tuple2 b1 a1) (t2tb37 s) t)) (and (mem5 x s) (mem b2 y t))))))

(declare-fun t2tb1956 ((set (tuple21 (tuple21 a b) (set (tuple21 b
  a))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) (set (tuple21 b a)))))) (sort
  (set1 (tuple2 (tuple2 a1 b1) (set1 (tuple2 b1 a1)))) (t2tb1956 x))))

(declare-fun tb2t1956 (uni) (set (tuple21 (tuple21 a b) (set (tuple21 b
  a)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a b) (set (tuple21 b a))))))
  (! (= (tb2t1956 (t2tb1956 i)) i) :pattern ((t2tb1956 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 b1) (set1 (tuple2 b1 a1)))) j)
     (= (t2tb1956 (tb2t1956 j)) j)) :pattern ((t2tb1956 (tb2t1956 j))) )))

(declare-fun t2tb1957 ((tuple21 (tuple21 a b) (set (tuple21 b a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a b) (set (tuple21 b a))))) (sort
  (tuple2 (tuple2 a1 b1) (set1 (tuple2 b1 a1))) (t2tb1957 x))))

(declare-fun tb2t1957 (uni) (tuple21 (tuple21 a b) (set (tuple21 b a))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a b) (set (tuple21 b a)))))
  (! (= (tb2t1957 (t2tb1957 i)) i) :pattern ((t2tb1957 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 b1) (set1 (tuple2 b1 a1))) j)
     (= (t2tb1957 (tb2t1957 j)) j)) :pattern ((t2tb1957 (tb2t1957 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (set (tuple21 b a))))
  (x (tuple21 a b)) (y (set (tuple21 b a))))
  (= (mem (tuple2 (tuple2 a1 b1) (set1 (tuple2 b1 a1)))
  (Tuple2 (tuple2 a1 b1) (set1 (tuple2 b1 a1)) (t2tb13 x) (t2tb37 y))
  (times (set1 (tuple2 b1 a1)) (tuple2 a1 b1) (t2tb11 s) (t2tb56 t)))
  (and (mem3 x s) (mem6 y t)))))

(declare-fun t2tb1069 ((set (tuple21 (tuple21 a b) (tuple21 b a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) (tuple21 b a))))) (sort
  (set1 (tuple2 (tuple2 a1 b1) (tuple2 b1 a1))) (t2tb1069 x))))

(declare-fun tb2t1069 (uni) (set (tuple21 (tuple21 a b) (tuple21 b a))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a b) (tuple21 b a)))))
  (! (= (tb2t1069 (t2tb1069 i)) i) :pattern ((t2tb1069 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 b1) (tuple2 b1 a1))) j)
     (= (t2tb1069 (tb2t1069 j)) j)) :pattern ((t2tb1069 (tb2t1069 j))) )))

(declare-fun t2tb1070 ((tuple21 (tuple21 a b) (tuple21 b a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a b) (tuple21 b a)))) (sort
  (tuple2 (tuple2 a1 b1) (tuple2 b1 a1)) (t2tb1070 x))))

(declare-fun tb2t1070 (uni) (tuple21 (tuple21 a b) (tuple21 b a)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a b) (tuple21 b a))))
  (! (= (tb2t1070 (t2tb1070 i)) i) :pattern ((t2tb1070 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 b1) (tuple2 b1 a1)) j)
     (= (t2tb1070 (tb2t1070 j)) j)) :pattern ((t2tb1070 (tb2t1070 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (tuple21 b a))) (x (tuple21 a b))
  (y (tuple21 b a)))
  (= (mem (tuple2 (tuple2 a1 b1) (tuple2 b1 a1))
  (Tuple2 (tuple2 a1 b1) (tuple2 b1 a1) (t2tb13 x) (t2tb38 y))
  (times (tuple2 b1 a1) (tuple2 a1 b1) (t2tb11 s) (t2tb37 t)))
  (and (mem3 x s) (mem5 y t)))))

(declare-fun t2tb25 ((set (tuple21 (tuple21 a b) (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) (tuple21 a b))))) (sort
  (set1 (tuple2 (tuple2 a1 b1) (tuple2 a1 b1))) (t2tb25 x))))

(declare-fun tb2t25 (uni) (set (tuple21 (tuple21 a b) (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a b) (tuple21 a b)))))
  (! (= (tb2t25 (t2tb25 i)) i) :pattern ((t2tb25 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 b1) (tuple2 a1 b1))) j)
     (= (t2tb25 (tb2t25 j)) j)) :pattern ((t2tb25 (tb2t25 j))) )))

(declare-fun t2tb26 ((tuple21 (tuple21 a b) (tuple21 a b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a b) (tuple21 a b)))) (sort
  (tuple2 (tuple2 a1 b1) (tuple2 a1 b1)) (t2tb26 x))))

(declare-fun tb2t26 (uni) (tuple21 (tuple21 a b) (tuple21 a b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a b) (tuple21 a b))))
  (! (= (tb2t26 (t2tb26 i)) i) :pattern ((t2tb26 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 b1) (tuple2 a1 b1)) j)
     (= (t2tb26 (tb2t26 j)) j)) :pattern ((t2tb26 (tb2t26 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (tuple21 a b))) (x (tuple21 a b))
  (y (tuple21 a b)))
  (= (mem (tuple2 (tuple2 a1 b1) (tuple2 a1 b1))
  (Tuple2 (tuple2 a1 b1) (tuple2 a1 b1) (t2tb13 x) (t2tb13 y))
  (times (tuple2 a1 b1) (tuple2 a1 b1) (t2tb11 s) (t2tb11 t)))
  (and (mem3 x s) (mem3 y t)))))

(declare-fun t2tb27 ((set (tuple21 (tuple21 a b) b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) b)))) (sort
  (set1 (tuple2 (tuple2 a1 b1) b1)) (t2tb27 x))))

(declare-fun tb2t27 (uni) (set (tuple21 (tuple21 a b) b)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a b) b))))
  (! (= (tb2t27 (t2tb27 i)) i) :pattern ((t2tb27 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 b1) b1)) j)
     (= (t2tb27 (tb2t27 j)) j)) :pattern ((t2tb27 (tb2t27 j))) )))

(declare-fun t2tb28 ((tuple21 (tuple21 a b) b)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a b) b))) (sort (tuple2 (tuple2 a1 b1) b1)
  (t2tb28 x))))

(declare-fun tb2t28 (uni) (tuple21 (tuple21 a b) b))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a b) b)))
  (! (= (tb2t28 (t2tb28 i)) i) :pattern ((t2tb28 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 b1) b1) j) (= (t2tb28 (tb2t28 j)) j)) :pattern (
  (t2tb28 (tb2t28 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a b))) (t (set b)) (x (tuple21 a b)) (y b))
  (= (mem (tuple2 (tuple2 a1 b1) b1)
  (Tuple2 (tuple2 a1 b1) b1 (t2tb13 x) (t2tb14 y))
  (times b1 (tuple2 a1 b1) (t2tb11 s) (t2tb12 t)))
  (and (mem3 x s) (mem2 y t)))))

(declare-fun t2tb29 ((set (tuple21 (tuple21 a b) a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) a)))) (sort
  (set1 (tuple2 (tuple2 a1 b1) a1)) (t2tb29 x))))

(declare-fun tb2t29 (uni) (set (tuple21 (tuple21 a b) a)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a b) a))))
  (! (= (tb2t29 (t2tb29 i)) i) :pattern ((t2tb29 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 b1) a1)) j)
     (= (t2tb29 (tb2t29 j)) j)) :pattern ((t2tb29 (tb2t29 j))) )))

(declare-fun t2tb30 ((tuple21 (tuple21 a b) a)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a b) a))) (sort (tuple2 (tuple2 a1 b1) a1)
  (t2tb30 x))))

(declare-fun tb2t30 (uni) (tuple21 (tuple21 a b) a))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a b) a)))
  (! (= (tb2t30 (t2tb30 i)) i) :pattern ((t2tb30 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 b1) a1) j) (= (t2tb30 (tb2t30 j)) j)) :pattern (
  (t2tb30 (tb2t30 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a b))) (t (set a)) (x (tuple21 a b)) (y a))
  (= (mem (tuple2 (tuple2 a1 b1) a1)
  (Tuple2 (tuple2 a1 b1) a1 (t2tb13 x) (t2tb2 y))
  (times a1 (tuple2 a1 b1) (t2tb11 s) (t2tb1 t)))
  (and (mem3 x s) (mem1 y t)))))

;; mem_times
  (assert
  (forall ((b2 ty))
  (forall ((s (set (tuple21 a b))) (t uni) (x (tuple21 a b)) (y uni))
  (= (mem (tuple2 (tuple2 a1 b1) b2) (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) y)
  (times b2 (tuple2 a1 b1) (t2tb11 s) t)) (and (mem3 x s) (mem b2 y t))))))

(declare-fun t2tb1958 ((set (tuple21 b (set (tuple21 b a))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 b (set (tuple21 b a)))))) (sort
  (set1 (tuple2 b1 (set1 (tuple2 b1 a1)))) (t2tb1958 x))))

(declare-fun tb2t1958 (uni) (set (tuple21 b (set (tuple21 b a)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 b (set (tuple21 b a))))))
  (! (= (tb2t1958 (t2tb1958 i)) i) :pattern ((t2tb1958 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 b1 (set1 (tuple2 b1 a1)))) j)
     (= (t2tb1958 (tb2t1958 j)) j)) :pattern ((t2tb1958 (tb2t1958 j))) )))

(declare-fun t2tb1959 ((tuple21 b (set (tuple21 b a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 b (set (tuple21 b a))))) (sort
  (tuple2 b1 (set1 (tuple2 b1 a1))) (t2tb1959 x))))

(declare-fun tb2t1959 (uni) (tuple21 b (set (tuple21 b a))))

;; BridgeL
  (assert
  (forall ((i (tuple21 b (set (tuple21 b a)))))
  (! (= (tb2t1959 (t2tb1959 i)) i) :pattern ((t2tb1959 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 b1 (set1 (tuple2 b1 a1))) j)
     (= (t2tb1959 (tb2t1959 j)) j)) :pattern ((t2tb1959 (tb2t1959 j))) )))

;; mem_times
  (assert
  (forall ((s (set b)) (t (set (set (tuple21 b a)))) (x b) (y (set (tuple21 b
  a))))
  (= (mem (tuple2 b1 (set1 (tuple2 b1 a1)))
  (Tuple2 b1 (set1 (tuple2 b1 a1)) (t2tb14 x) (t2tb37 y))
  (times (set1 (tuple2 b1 a1)) b1 (t2tb12 s) (t2tb56 t)))
  (and (mem2 x s) (mem6 y t)))))

(declare-fun t2tb1071 ((set (tuple21 b (tuple21 b a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 b (tuple21 b a))))) (sort
  (set1 (tuple2 b1 (tuple2 b1 a1))) (t2tb1071 x))))

(declare-fun tb2t1071 (uni) (set (tuple21 b (tuple21 b a))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 b (tuple21 b a)))))
  (! (= (tb2t1071 (t2tb1071 i)) i) :pattern ((t2tb1071 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 b1 (tuple2 b1 a1))) j)
     (= (t2tb1071 (tb2t1071 j)) j)) :pattern ((t2tb1071 (tb2t1071 j))) )))

(declare-fun t2tb1072 ((tuple21 b (tuple21 b a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 b (tuple21 b a)))) (sort (tuple2 b1 (tuple2 b1 a1))
  (t2tb1072 x))))

(declare-fun tb2t1072 (uni) (tuple21 b (tuple21 b a)))

;; BridgeL
  (assert
  (forall ((i (tuple21 b (tuple21 b a))))
  (! (= (tb2t1072 (t2tb1072 i)) i) :pattern ((t2tb1072 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 b1 (tuple2 b1 a1)) j) (= (t2tb1072 (tb2t1072 j)) j)) :pattern (
  (t2tb1072 (tb2t1072 j))) )))

;; mem_times
  (assert
  (forall ((s (set b)) (t (set (tuple21 b a))) (x b) (y (tuple21 b a)))
  (= (mem (tuple2 b1 (tuple2 b1 a1))
  (Tuple2 b1 (tuple2 b1 a1) (t2tb14 x) (t2tb38 y))
  (times (tuple2 b1 a1) b1 (t2tb12 s) (t2tb37 t)))
  (and (mem2 x s) (mem5 y t)))))

(declare-fun t2tb33 ((tuple21 b (tuple21 a b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 b (tuple21 a b)))) (sort (tuple2 b1 (tuple2 a1 b1))
  (t2tb33 x))))

(declare-fun tb2t33 (uni) (tuple21 b (tuple21 a b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 b (tuple21 a b))))
  (! (= (tb2t33 (t2tb33 i)) i) :pattern ((t2tb33 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 b1 (tuple2 a1 b1)) j) (= (t2tb33 (tb2t33 j)) j)) :pattern (
  (t2tb33 (tb2t33 j))) )))

(declare-fun t2tb34 ((set (tuple21 b (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 b (tuple21 a b))))) (sort
  (set1 (tuple2 b1 (tuple2 a1 b1))) (t2tb34 x))))

(declare-fun tb2t34 (uni) (set (tuple21 b (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 b (tuple21 a b)))))
  (! (= (tb2t34 (t2tb34 i)) i) :pattern ((t2tb34 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 b1 (tuple2 a1 b1))) j)
     (= (t2tb34 (tb2t34 j)) j)) :pattern ((t2tb34 (tb2t34 j))) )))

;; mem_times
  (assert
  (forall ((s (set b)) (t (set (tuple21 a b))) (x b) (y (tuple21 a b)))
  (= (mem (tuple2 b1 (tuple2 a1 b1))
  (Tuple2 b1 (tuple2 a1 b1) (t2tb14 x) (t2tb13 y))
  (times (tuple2 a1 b1) b1 (t2tb12 s) (t2tb11 t)))
  (and (mem2 x s) (mem3 y t)))))

(declare-fun t2tb35 ((set (tuple21 b b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 b b)))) (sort (set1 (tuple2 b1 b1)) (t2tb35 x))))

(declare-fun tb2t35 (uni) (set (tuple21 b b)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 b b))))
  (! (= (tb2t35 (t2tb35 i)) i) :pattern ((t2tb35 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 b1 b1)) j) (= (t2tb35 (tb2t35 j)) j)) :pattern (
  (t2tb35 (tb2t35 j))) )))

(declare-fun t2tb36 ((tuple21 b b)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 b b))) (sort (tuple2 b1 b1) (t2tb36 x))))

(declare-fun tb2t36 (uni) (tuple21 b b))

;; BridgeL
  (assert
  (forall ((i (tuple21 b b)))
  (! (= (tb2t36 (t2tb36 i)) i) :pattern ((t2tb36 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 b1 b1) j) (= (t2tb36 (tb2t36 j)) j)) :pattern (
  (t2tb36 (tb2t36 j))) )))

;; mem_times
  (assert
  (forall ((s (set b)) (t (set b)) (x b) (y b))
  (= (mem (tuple2 b1 b1) (Tuple2 b1 b1 (t2tb14 x) (t2tb14 y))
  (times b1 b1 (t2tb12 s) (t2tb12 t))) (and (mem2 x s) (mem2 y t)))))

;; mem_times
  (assert
  (forall ((s (set b)) (t (set a)) (x b) (y a))
  (= (mem5 (tb2t38 (Tuple2 b1 a1 (t2tb14 x) (t2tb2 y)))
  (tb2t37 (times a1 b1 (t2tb12 s) (t2tb1 t)))) (and (mem2 x s) (mem1 y t)))))

;; mem_times
  (assert
  (forall ((b2 ty))
  (forall ((s (set b)) (t uni) (x b) (y uni))
  (= (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) y)
  (times b2 b1 (t2tb12 s) t)) (and (mem2 x s) (mem b2 y t))))))

(declare-fun t2tb1960 ((set (tuple21 a (set (tuple21 b a))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (set (tuple21 b a)))))) (sort
  (set1 (tuple2 a1 (set1 (tuple2 b1 a1)))) (t2tb1960 x))))

(declare-fun tb2t1960 (uni) (set (tuple21 a (set (tuple21 b a)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (set (tuple21 b a))))))
  (! (= (tb2t1960 (t2tb1960 i)) i) :pattern ((t2tb1960 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (set1 (tuple2 b1 a1)))) j)
     (= (t2tb1960 (tb2t1960 j)) j)) :pattern ((t2tb1960 (tb2t1960 j))) )))

(declare-fun t2tb1961 ((tuple21 a (set (tuple21 b a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (set (tuple21 b a))))) (sort
  (tuple2 a1 (set1 (tuple2 b1 a1))) (t2tb1961 x))))

(declare-fun tb2t1961 (uni) (tuple21 a (set (tuple21 b a))))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (set (tuple21 b a)))))
  (! (= (tb2t1961 (t2tb1961 i)) i) :pattern ((t2tb1961 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (set1 (tuple2 b1 a1))) j)
     (= (t2tb1961 (tb2t1961 j)) j)) :pattern ((t2tb1961 (tb2t1961 j))) )))

;; mem_times
  (assert
  (forall ((s (set a)) (t (set (set (tuple21 b a)))) (x a) (y (set (tuple21 b
  a))))
  (= (mem (tuple2 a1 (set1 (tuple2 b1 a1)))
  (Tuple2 a1 (set1 (tuple2 b1 a1)) (t2tb2 x) (t2tb37 y))
  (times (set1 (tuple2 b1 a1)) a1 (t2tb1 s) (t2tb56 t)))
  (and (mem1 x s) (mem6 y t)))))

(declare-fun t2tb1073 ((set (tuple21 a (tuple21 b a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (tuple21 b a))))) (sort
  (set1 (tuple2 a1 (tuple2 b1 a1))) (t2tb1073 x))))

(declare-fun tb2t1073 (uni) (set (tuple21 a (tuple21 b a))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (tuple21 b a)))))
  (! (= (tb2t1073 (t2tb1073 i)) i) :pattern ((t2tb1073 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (tuple2 b1 a1))) j)
     (= (t2tb1073 (tb2t1073 j)) j)) :pattern ((t2tb1073 (tb2t1073 j))) )))

(declare-fun t2tb1074 ((tuple21 a (tuple21 b a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (tuple21 b a)))) (sort (tuple2 a1 (tuple2 b1 a1))
  (t2tb1074 x))))

(declare-fun tb2t1074 (uni) (tuple21 a (tuple21 b a)))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (tuple21 b a))))
  (! (= (tb2t1074 (t2tb1074 i)) i) :pattern ((t2tb1074 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (tuple2 b1 a1)) j) (= (t2tb1074 (tb2t1074 j)) j)) :pattern (
  (t2tb1074 (tb2t1074 j))) )))

;; mem_times
  (assert
  (forall ((s (set a)) (t (set (tuple21 b a))) (x a) (y (tuple21 b a)))
  (= (mem (tuple2 a1 (tuple2 b1 a1))
  (Tuple2 a1 (tuple2 b1 a1) (t2tb2 x) (t2tb38 y))
  (times (tuple2 b1 a1) a1 (t2tb1 s) (t2tb37 t)))
  (and (mem1 x s) (mem5 y t)))))

(declare-fun t2tb41 ((set (tuple21 a (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (tuple21 a b))))) (sort
  (set1 (tuple2 a1 (tuple2 a1 b1))) (t2tb41 x))))

(declare-fun tb2t41 (uni) (set (tuple21 a (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (tuple21 a b)))))
  (! (= (tb2t41 (t2tb41 i)) i) :pattern ((t2tb41 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (tuple2 a1 b1))) j)
     (= (t2tb41 (tb2t41 j)) j)) :pattern ((t2tb41 (tb2t41 j))) )))

(declare-fun t2tb42 ((tuple21 a (tuple21 a b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (tuple21 a b)))) (sort (tuple2 a1 (tuple2 a1 b1))
  (t2tb42 x))))

(declare-fun tb2t42 (uni) (tuple21 a (tuple21 a b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (tuple21 a b))))
  (! (= (tb2t42 (t2tb42 i)) i) :pattern ((t2tb42 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (tuple2 a1 b1)) j) (= (t2tb42 (tb2t42 j)) j)) :pattern (
  (t2tb42 (tb2t42 j))) )))

;; mem_times
  (assert
  (forall ((s (set a)) (t (set (tuple21 a b))) (x a) (y (tuple21 a b)))
  (= (mem (tuple2 a1 (tuple2 a1 b1))
  (Tuple2 a1 (tuple2 a1 b1) (t2tb2 x) (t2tb13 y))
  (times (tuple2 a1 b1) a1 (t2tb1 s) (t2tb11 t)))
  (and (mem1 x s) (mem3 y t)))))

;; mem_times
  (assert
  (forall ((s (set a)) (t (set b)) (x a) (y b))
  (= (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y)))
  (tb2t11 (times b1 a1 (t2tb1 s) (t2tb12 t)))) (and (mem1 x s) (mem2 y t)))))

(declare-fun t2tb4 ((set (tuple21 a a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a a)))) (sort (set1 (tuple2 a1 a1)) (t2tb4 x))))

(declare-fun tb2t4 (uni) (set (tuple21 a a)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a a))))
  (! (= (tb2t4 (t2tb4 i)) i) :pattern ((t2tb4 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 a1)) j) (= (t2tb4 (tb2t4 j)) j)) :pattern (
  (t2tb4 (tb2t4 j))) )))

(declare-fun t2tb5 ((tuple21 a a)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 a a))) (sort (tuple2 a1 a1) (t2tb5 x))))

(declare-fun tb2t5 (uni) (tuple21 a a))

;; BridgeL
  (assert
  (forall ((i (tuple21 a a)))
  (! (= (tb2t5 (t2tb5 i)) i) :pattern ((t2tb5 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 a1) j) (= (t2tb5 (tb2t5 j)) j)) :pattern ((t2tb5
                                                                    (tb2t5 j))) )))

;; mem_times
  (assert
  (forall ((s (set a)) (t (set a)) (x a) (y a))
  (= (mem (tuple2 a1 a1) (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y))
  (times a1 a1 (t2tb1 s) (t2tb1 t))) (and (mem1 x s) (mem1 y t)))))

;; mem_times
  (assert
  (forall ((b2 ty))
  (forall ((s (set a)) (t uni) (x a) (y uni))
  (= (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) y)
  (times b2 a1 (t2tb1 s) t)) (and (mem1 x s) (mem b2 y t))))))

;; mem_times
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (x uni) (y uni))
  (= (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) (times b2 a2 s t))
  (and (mem a2 x s) (mem b2 y t))))))

;; mem_power
  (assert
  (forall ((s (set (set (tuple21 b a)))) (t (set (set (tuple21 b a)))))
  (= (mem (set1 (set1 (tuple2 b1 a1))) (t2tb56 s)
  (power (set1 (tuple2 b1 a1)) (t2tb56 t)))
  (forall ((x (set (tuple21 b a)))) (=> (mem6 x s) (mem6 x t))))))

;; mem_power
  (assert
  (forall ((s (set (tuple21 b a))) (t (set (tuple21 b a))))
  (= (mem6 s (tb2t56 (power (tuple2 b1 a1) (t2tb37 t))))
  (forall ((x (tuple21 b a))) (=> (mem5 x s) (mem5 x t))))))

;; mem_power
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (tuple21 a b))))
  (= (mem (set1 (tuple2 a1 b1)) (t2tb11 s) (power (tuple2 a1 b1) (t2tb11 t)))
  (forall ((x (tuple21 a b))) (=> (mem3 x s) (mem3 x t))))))

;; mem_power
  (assert
  (forall ((s (set b)) (t (set b)))
  (= (mem (set1 b1) (t2tb12 s) (power b1 (t2tb12 t)))
  (forall ((x b)) (=> (mem2 x s) (mem2 x t))))))

;; mem_power
  (assert
  (forall ((s (set a)) (t (set a)))
  (= (mem (set1 a1) (t2tb1 s) (power a1 (t2tb1 t)))
  (forall ((x a)) (=> (mem1 x s) (mem1 x t))))))

;; mem_power
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t uni))
  (and
  (=> (mem (set1 a2) s (power a2 t))
  (forall ((x uni)) (=> (mem a2 x s) (mem a2 x t))))
  (=> (forall ((x uni)) (=> (sort a2 x) (=> (mem a2 x s) (mem a2 x t)))) (mem
  (set1 a2) s (power a2 t)))))))

;; mem_non_empty_power
  (assert
  (forall ((s (set (set (tuple21 b a)))) (t (set (set (tuple21 b a)))))
  (= (mem (set1 (set1 (tuple2 b1 a1))) (t2tb56 s)
  (non_empty_power (set1 (tuple2 b1 a1)) (t2tb56 t)))
  (and (forall ((x (set (tuple21 b a)))) (=> (mem6 x s) (mem6 x t)))
  (not (infix_eqeq21 s (tb2t56 (empty (set1 (tuple2 b1 a1))))))))))

;; mem_non_empty_power
  (assert
  (forall ((s (set (tuple21 b a))) (t (set (tuple21 b a))))
  (= (mem6 s (tb2t56 (non_empty_power (tuple2 b1 a1) (t2tb37 t))))
  (and (forall ((x (tuple21 b a))) (=> (mem5 x s) (mem5 x t)))
  (not (infix_eqeq6 s (tb2t37 (empty (tuple2 b1 a1)))))))))

;; mem_non_empty_power
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (tuple21 a b))))
  (= (mem (set1 (tuple2 a1 b1)) (t2tb11 s)
  (non_empty_power (tuple2 a1 b1) (t2tb11 t)))
  (and (forall ((x (tuple21 a b))) (=> (mem3 x s) (mem3 x t)))
  (not (infix_eqeq4 s (tb2t11 (empty (tuple2 a1 b1)))))))))

;; mem_non_empty_power
  (assert
  (forall ((s (set b)) (t (set b)))
  (= (mem (set1 b1) (t2tb12 s) (non_empty_power b1 (t2tb12 t)))
  (and (forall ((x b)) (=> (mem2 x s) (mem2 x t)))
  (not (infix_eqeq3 s (tb2t12 (empty b1))))))))

;; mem_non_empty_power
  (assert
  (forall ((s (set a)) (t (set a)))
  (= (mem (set1 a1) (t2tb1 s) (non_empty_power a1 (t2tb1 t)))
  (and (forall ((x a)) (=> (mem1 x s) (mem1 x t)))
  (not (infix_eqeq1 s (tb2t1 (empty a1))))))))

;; mem_non_empty_power
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t uni))
  (and
  (=> (mem (set1 a2) s (non_empty_power a2 t))
  (and (forall ((x uni)) (=> (mem a2 x s) (mem a2 x t)))
  (not (infix_eqeq a2 s (empty a2)))))
  (=>
  (and (forall ((x uni)) (=> (sort a2 x) (=> (mem a2 x s) (mem a2 x t))))
  (not (infix_eqeq a2 s (empty a2)))) (mem (set1 a2) s
  (non_empty_power a2 t)))))))

(declare-fun choose (ty uni) uni)

;; choose_sort
  (assert (forall ((a2 ty)) (forall ((x uni)) (sort a2 (choose a2 x)))))

(declare-fun relation (ty ty uni uni) uni)

;; relation_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (set1 (tuple2 a2 b2)))
  (relation b2 a2 x x1)))))

;; mem_relation
  (assert
  (forall ((a2 ty))
  (forall ((u uni) (v (set (set (tuple21 b a)))) (r uni))
  (and
  (=> (mem (set1 (tuple2 a2 (set1 (tuple2 b1 a1)))) r
  (relation (set1 (tuple2 b1 a1)) a2 u (t2tb56 v)))
  (forall ((x uni) (y (set (tuple21 b a))))
  (=> (mem (tuple2 a2 (set1 (tuple2 b1 a1)))
  (Tuple2 a2 (set1 (tuple2 b1 a1)) x (t2tb37 y)) r)
  (and (mem a2 x u) (mem6 y v)))))
  (=>
  (forall ((x uni) (y (set (tuple21 b a))))
  (=> (sort a2 x)
  (=> (mem (tuple2 a2 (set1 (tuple2 b1 a1)))
  (Tuple2 a2 (set1 (tuple2 b1 a1)) x (t2tb37 y)) r)
  (and (mem a2 x u) (mem6 y v))))) (mem
  (set1 (tuple2 a2 (set1 (tuple2 b1 a1)))) r
  (relation (set1 (tuple2 b1 a1)) a2 u (t2tb56 v))))))))

;; mem_relation
  (assert
  (forall ((a2 ty))
  (forall ((u uni) (v (set (tuple21 b a))) (r uni))
  (and
  (=> (mem (set1 (tuple2 a2 (tuple2 b1 a1))) r
  (relation (tuple2 b1 a1) a2 u (t2tb37 v)))
  (forall ((x uni) (y (tuple21 b a)))
  (=> (mem (tuple2 a2 (tuple2 b1 a1)) (Tuple2 a2 (tuple2 b1 a1) x (t2tb38 y))
  r) (and (mem a2 x u) (mem5 y v)))))
  (=>
  (forall ((x uni) (y (tuple21 b a)))
  (=> (sort a2 x)
  (=> (mem (tuple2 a2 (tuple2 b1 a1)) (Tuple2 a2 (tuple2 b1 a1) x (t2tb38 y))
  r) (and (mem a2 x u) (mem5 y v))))) (mem (set1 (tuple2 a2 (tuple2 b1 a1)))
  r (relation (tuple2 b1 a1) a2 u (t2tb37 v))))))))

;; mem_relation
  (assert
  (forall ((a2 ty))
  (forall ((u uni) (v (set (tuple21 a b))) (r uni))
  (and
  (=> (mem (set1 (tuple2 a2 (tuple2 a1 b1))) r
  (relation (tuple2 a1 b1) a2 u (t2tb11 v)))
  (forall ((x uni) (y (tuple21 a b)))
  (=> (mem (tuple2 a2 (tuple2 a1 b1)) (Tuple2 a2 (tuple2 a1 b1) x (t2tb13 y))
  r) (and (mem a2 x u) (mem3 y v)))))
  (=>
  (forall ((x uni) (y (tuple21 a b)))
  (=> (sort a2 x)
  (=> (mem (tuple2 a2 (tuple2 a1 b1)) (Tuple2 a2 (tuple2 a1 b1) x (t2tb13 y))
  r) (and (mem a2 x u) (mem3 y v))))) (mem (set1 (tuple2 a2 (tuple2 a1 b1)))
  r (relation (tuple2 a1 b1) a2 u (t2tb11 v))))))))

;; mem_relation
  (assert
  (forall ((a2 ty))
  (forall ((u uni) (v (set b)) (r uni))
  (and
  (=> (mem (set1 (tuple2 a2 b1)) r (relation b1 a2 u (t2tb12 v)))
  (forall ((x uni) (y b))
  (=> (mem (tuple2 a2 b1) (Tuple2 a2 b1 x (t2tb14 y)) r)
  (and (mem a2 x u) (mem2 y v)))))
  (=>
  (forall ((x uni) (y b))
  (=> (sort a2 x)
  (=> (mem (tuple2 a2 b1) (Tuple2 a2 b1 x (t2tb14 y)) r)
  (and (mem a2 x u) (mem2 y v))))) (mem (set1 (tuple2 a2 b1)) r
  (relation b1 a2 u (t2tb12 v))))))))

;; mem_relation
  (assert
  (forall ((a2 ty))
  (forall ((u uni) (v (set a)) (r uni))
  (and
  (=> (mem (set1 (tuple2 a2 a1)) r (relation a1 a2 u (t2tb1 v)))
  (forall ((x uni) (y a))
  (=> (mem (tuple2 a2 a1) (Tuple2 a2 a1 x (t2tb2 y)) r)
  (and (mem a2 x u) (mem1 y v)))))
  (=>
  (forall ((x uni) (y a))
  (=> (sort a2 x)
  (=> (mem (tuple2 a2 a1) (Tuple2 a2 a1 x (t2tb2 y)) r)
  (and (mem a2 x u) (mem1 y v))))) (mem (set1 (tuple2 a2 a1)) r
  (relation a1 a2 u (t2tb1 v))))))))

(declare-fun t2tb1962 ((set (set (tuple21 (set (tuple21 b a)) (set (tuple21 b
  a)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 b a)) (set (tuple21 b a)))))))
  (sort (set1 (set1 (tuple2 (set1 (tuple2 b1 a1)) (set1 (tuple2 b1 a1)))))
  (t2tb1962 x))))

(declare-fun tb2t1962 (uni) (set (set (tuple21 (set (tuple21 b a))
  (set (tuple21 b a))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 b a)) (set (tuple21 b a)))))))
  (! (= (tb2t1962 (t2tb1962 i)) i) :pattern ((t2tb1962 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (set1 (tuple2 b1 a1)) (set1 (tuple2 b1 a1))))) j)
     (= (t2tb1962 (tb2t1962 j)) j)) :pattern ((t2tb1962 (tb2t1962 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 b a)))) (v (set (set (tuple21 b a))))
  (r (set (tuple21 (set (tuple21 b a)) (set (tuple21 b a))))))
  (= (mem (set1 (tuple2 (set1 (tuple2 b1 a1)) (set1 (tuple2 b1 a1))))
  (t2tb1944 r)
  (relation (set1 (tuple2 b1 a1)) (set1 (tuple2 b1 a1)) (t2tb56 u)
  (t2tb56 v)))
  (forall ((x (set (tuple21 b a))) (y (set (tuple21 b a))))
  (=> (mem (tuple2 (set1 (tuple2 b1 a1)) (set1 (tuple2 b1 a1)))
  (Tuple2 (set1 (tuple2 b1 a1)) (set1 (tuple2 b1 a1)) (t2tb37 x) (t2tb37 y))
  (t2tb1944 r)) (and (mem6 x u) (mem6 y v)))))))

(declare-fun t2tb1963 ((set (set (tuple21 (set (tuple21 b a)) (tuple21 b
  a))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 b a)) (tuple21 b a)))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 b1 a1)) (tuple2 b1 a1)))) (t2tb1963 x))))

(declare-fun tb2t1963 (uni) (set (set (tuple21 (set (tuple21 b a)) (tuple21 b
  a)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 b a)) (tuple21 b a))))))
  (! (= (tb2t1963 (t2tb1963 i)) i) :pattern ((t2tb1963 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 b1 a1)) (tuple2 b1 a1)))) j)
     (= (t2tb1963 (tb2t1963 j)) j)) :pattern ((t2tb1963 (tb2t1963 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 b a)))) (v (set (tuple21 b a)))
  (r (set (tuple21 (set (tuple21 b a)) (tuple21 b a)))))
  (= (mem (set1 (tuple2 (set1 (tuple2 b1 a1)) (tuple2 b1 a1))) (t2tb1946 r)
  (relation (tuple2 b1 a1) (set1 (tuple2 b1 a1)) (t2tb56 u) (t2tb37 v)))
  (forall ((x (set (tuple21 b a))) (y (tuple21 b a)))
  (=> (mem (tuple2 (set1 (tuple2 b1 a1)) (tuple2 b1 a1))
  (Tuple2 (set1 (tuple2 b1 a1)) (tuple2 b1 a1) (t2tb37 x) (t2tb38 y))
  (t2tb1946 r)) (and (mem6 x u) (mem5 y v)))))))

(declare-fun t2tb1964 ((set (set (tuple21 (set (tuple21 b a)) (tuple21 a
  b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 b a)) (tuple21 a b)))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 b1 a1)) (tuple2 a1 b1)))) (t2tb1964 x))))

(declare-fun tb2t1964 (uni) (set (set (tuple21 (set (tuple21 b a)) (tuple21 a
  b)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 b a)) (tuple21 a b))))))
  (! (= (tb2t1964 (t2tb1964 i)) i) :pattern ((t2tb1964 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 b1 a1)) (tuple2 a1 b1)))) j)
     (= (t2tb1964 (tb2t1964 j)) j)) :pattern ((t2tb1964 (tb2t1964 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 b a)))) (v (set (tuple21 a b)))
  (r (set (tuple21 (set (tuple21 b a)) (tuple21 a b)))))
  (= (mem (set1 (tuple2 (set1 (tuple2 b1 a1)) (tuple2 a1 b1))) (t2tb1948 r)
  (relation (tuple2 a1 b1) (set1 (tuple2 b1 a1)) (t2tb56 u) (t2tb11 v)))
  (forall ((x (set (tuple21 b a))) (y (tuple21 a b)))
  (=> (mem (tuple2 (set1 (tuple2 b1 a1)) (tuple2 a1 b1))
  (Tuple2 (set1 (tuple2 b1 a1)) (tuple2 a1 b1) (t2tb37 x) (t2tb13 y))
  (t2tb1948 r)) (and (mem6 x u) (mem3 y v)))))))

(declare-fun t2tb1965 ((set (set (tuple21 (set (tuple21 b a)) b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 b a)) b))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 b1 a1)) b1))) (t2tb1965 x))))

(declare-fun tb2t1965 (uni) (set (set (tuple21 (set (tuple21 b a)) b))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 b a)) b)))))
  (! (= (tb2t1965 (t2tb1965 i)) i) :pattern ((t2tb1965 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 b1 a1)) b1))) j)
     (= (t2tb1965 (tb2t1965 j)) j)) :pattern ((t2tb1965 (tb2t1965 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 b a)))) (v (set b))
  (r (set (tuple21 (set (tuple21 b a)) b))))
  (= (mem (set1 (tuple2 (set1 (tuple2 b1 a1)) b1)) (t2tb1950 r)
  (relation b1 (set1 (tuple2 b1 a1)) (t2tb56 u) (t2tb12 v)))
  (forall ((x (set (tuple21 b a))) (y b))
  (=> (mem (tuple2 (set1 (tuple2 b1 a1)) b1)
  (Tuple2 (set1 (tuple2 b1 a1)) b1 (t2tb37 x) (t2tb14 y)) (t2tb1950 r))
  (and (mem6 x u) (mem2 y v)))))))

(declare-fun t2tb1966 ((set (set (tuple21 (set (tuple21 b a)) a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 b a)) a))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 b1 a1)) a1))) (t2tb1966 x))))

(declare-fun tb2t1966 (uni) (set (set (tuple21 (set (tuple21 b a)) a))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 b a)) a)))))
  (! (= (tb2t1966 (t2tb1966 i)) i) :pattern ((t2tb1966 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 b1 a1)) a1))) j)
     (= (t2tb1966 (tb2t1966 j)) j)) :pattern ((t2tb1966 (tb2t1966 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 b a)))) (v (set a))
  (r (set (tuple21 (set (tuple21 b a)) a))))
  (= (mem (set1 (tuple2 (set1 (tuple2 b1 a1)) a1)) (t2tb1952 r)
  (relation a1 (set1 (tuple2 b1 a1)) (t2tb56 u) (t2tb1 v)))
  (forall ((x (set (tuple21 b a))) (y a))
  (=> (mem (tuple2 (set1 (tuple2 b1 a1)) a1)
  (Tuple2 (set1 (tuple2 b1 a1)) a1 (t2tb37 x) (t2tb2 y)) (t2tb1952 r))
  (and (mem6 x u) (mem1 y v)))))))

;; mem_relation
  (assert
  (forall ((b2 ty))
  (forall ((u (set (set (tuple21 b a)))) (v uni) (r uni))
  (and
  (=> (mem (set1 (tuple2 (set1 (tuple2 b1 a1)) b2)) r
  (relation b2 (set1 (tuple2 b1 a1)) (t2tb56 u) v))
  (forall ((x (set (tuple21 b a))) (y uni))
  (=> (mem (tuple2 (set1 (tuple2 b1 a1)) b2)
  (Tuple2 (set1 (tuple2 b1 a1)) b2 (t2tb37 x) y) r)
  (and (mem6 x u) (mem b2 y v)))))
  (=>
  (forall ((x (set (tuple21 b a))) (y uni))
  (=> (sort b2 y)
  (=> (mem (tuple2 (set1 (tuple2 b1 a1)) b2)
  (Tuple2 (set1 (tuple2 b1 a1)) b2 (t2tb37 x) y) r)
  (and (mem6 x u) (mem b2 y v))))) (mem
  (set1 (tuple2 (set1 (tuple2 b1 a1)) b2)) r
  (relation b2 (set1 (tuple2 b1 a1)) (t2tb56 u) v)))))))

(declare-fun t2tb1967 ((set (set (tuple21 (tuple21 b a) (set (tuple21 b
  a)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 b a) (set (tuple21 b a))))))) (sort
  (set1 (set1 (tuple2 (tuple2 b1 a1) (set1 (tuple2 b1 a1))))) (t2tb1967 x))))

(declare-fun tb2t1967 (uni) (set (set (tuple21 (tuple21 b a) (set (tuple21 b
  a))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 b a) (set (tuple21 b a)))))))
  (! (= (tb2t1967 (t2tb1967 i)) i) :pattern ((t2tb1967 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 b1 a1) (set1 (tuple2 b1 a1))))) j)
     (= (t2tb1967 (tb2t1967 j)) j)) :pattern ((t2tb1967 (tb2t1967 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 b a))) (v (set (set (tuple21 b a))))
  (r (set (tuple21 (tuple21 b a) (set (tuple21 b a))))))
  (= (mem (set1 (tuple2 (tuple2 b1 a1) (set1 (tuple2 b1 a1)))) (t2tb1954 r)
  (relation (set1 (tuple2 b1 a1)) (tuple2 b1 a1) (t2tb37 u) (t2tb56 v)))
  (forall ((x (tuple21 b a)) (y (set (tuple21 b a))))
  (=> (mem (tuple2 (tuple2 b1 a1) (set1 (tuple2 b1 a1)))
  (Tuple2 (tuple2 b1 a1) (set1 (tuple2 b1 a1)) (t2tb38 x) (t2tb37 y))
  (t2tb1954 r)) (and (mem5 x u) (mem6 y v)))))))

(declare-fun t2tb1075 ((set (set (tuple21 (tuple21 b a) (tuple21 b
  a))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 b a) (tuple21 b a)))))) (sort
  (set1 (set1 (tuple2 (tuple2 b1 a1) (tuple2 b1 a1)))) (t2tb1075 x))))

(declare-fun tb2t1075 (uni) (set (set (tuple21 (tuple21 b a) (tuple21 b
  a)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 b a) (tuple21 b a))))))
  (! (= (tb2t1075 (t2tb1075 i)) i) :pattern ((t2tb1075 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 b1 a1) (tuple2 b1 a1)))) j)
     (= (t2tb1075 (tb2t1075 j)) j)) :pattern ((t2tb1075 (tb2t1075 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 b a))) (v (set (tuple21 b a)))
  (r (set (tuple21 (tuple21 b a) (tuple21 b a)))))
  (= (mem (set1 (tuple2 (tuple2 b1 a1) (tuple2 b1 a1))) (t2tb1057 r)
  (relation (tuple2 b1 a1) (tuple2 b1 a1) (t2tb37 u) (t2tb37 v)))
  (forall ((x (tuple21 b a)) (y (tuple21 b a)))
  (=> (mem (tuple2 (tuple2 b1 a1) (tuple2 b1 a1))
  (Tuple2 (tuple2 b1 a1) (tuple2 b1 a1) (t2tb38 x) (t2tb38 y)) (t2tb1057 r))
  (and (mem5 x u) (mem5 y v)))))))

(declare-fun t2tb1077 ((set (set (tuple21 (tuple21 b a) (tuple21 a
  b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 b a) (tuple21 a b)))))) (sort
  (set1 (set1 (tuple2 (tuple2 b1 a1) (tuple2 a1 b1)))) (t2tb1077 x))))

(declare-fun tb2t1077 (uni) (set (set (tuple21 (tuple21 b a) (tuple21 a
  b)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 b a) (tuple21 a b))))))
  (! (= (tb2t1077 (t2tb1077 i)) i) :pattern ((t2tb1077 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 b1 a1) (tuple2 a1 b1)))) j)
     (= (t2tb1077 (tb2t1077 j)) j)) :pattern ((t2tb1077 (tb2t1077 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 b a))) (v (set (tuple21 a b)))
  (r (set (tuple21 (tuple21 b a) (tuple21 a b)))))
  (= (mem (set1 (tuple2 (tuple2 b1 a1) (tuple2 a1 b1))) (t2tb1061 r)
  (relation (tuple2 a1 b1) (tuple2 b1 a1) (t2tb37 u) (t2tb11 v)))
  (forall ((x (tuple21 b a)) (y (tuple21 a b)))
  (=> (mem (tuple2 (tuple2 b1 a1) (tuple2 a1 b1))
  (Tuple2 (tuple2 b1 a1) (tuple2 a1 b1) (t2tb38 x) (t2tb13 y)) (t2tb1061 r))
  (and (mem5 x u) (mem3 y v)))))))

(declare-fun t2tb1078 ((set (set (tuple21 (tuple21 b a) b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 b a) b))))) (sort
  (set1 (set1 (tuple2 (tuple2 b1 a1) b1))) (t2tb1078 x))))

(declare-fun tb2t1078 (uni) (set (set (tuple21 (tuple21 b a) b))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 b a) b)))))
  (! (= (tb2t1078 (t2tb1078 i)) i) :pattern ((t2tb1078 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 b1 a1) b1))) j)
     (= (t2tb1078 (tb2t1078 j)) j)) :pattern ((t2tb1078 (tb2t1078 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 b a))) (v (set b)) (r (set (tuple21 (tuple21 b a)
  b))))
  (= (mem (set1 (tuple2 (tuple2 b1 a1) b1)) (t2tb1063 r)
  (relation b1 (tuple2 b1 a1) (t2tb37 u) (t2tb12 v)))
  (forall ((x (tuple21 b a)) (y b))
  (=> (mem (tuple2 (tuple2 b1 a1) b1)
  (Tuple2 (tuple2 b1 a1) b1 (t2tb38 x) (t2tb14 y)) (t2tb1063 r))
  (and (mem5 x u) (mem2 y v)))))))

(declare-fun t2tb1079 ((set (set (tuple21 (tuple21 b a) a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 b a) a))))) (sort
  (set1 (set1 (tuple2 (tuple2 b1 a1) a1))) (t2tb1079 x))))

(declare-fun tb2t1079 (uni) (set (set (tuple21 (tuple21 b a) a))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 b a) a)))))
  (! (= (tb2t1079 (t2tb1079 i)) i) :pattern ((t2tb1079 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 b1 a1) a1))) j)
     (= (t2tb1079 (tb2t1079 j)) j)) :pattern ((t2tb1079 (tb2t1079 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 b a))) (v (set a)) (r (set (tuple21 (tuple21 b a)
  a))))
  (= (mem (set1 (tuple2 (tuple2 b1 a1) a1)) (t2tb1065 r)
  (relation a1 (tuple2 b1 a1) (t2tb37 u) (t2tb1 v)))
  (forall ((x (tuple21 b a)) (y a))
  (=> (mem (tuple2 (tuple2 b1 a1) a1)
  (Tuple2 (tuple2 b1 a1) a1 (t2tb38 x) (t2tb2 y)) (t2tb1065 r))
  (and (mem5 x u) (mem1 y v)))))))

;; mem_relation
  (assert
  (forall ((b2 ty))
  (forall ((u (set (tuple21 b a))) (v uni) (r uni))
  (and
  (=> (mem (set1 (tuple2 (tuple2 b1 a1) b2)) r
  (relation b2 (tuple2 b1 a1) (t2tb37 u) v))
  (forall ((x (tuple21 b a)) (y uni))
  (=> (mem (tuple2 (tuple2 b1 a1) b2) (Tuple2 (tuple2 b1 a1) b2 (t2tb38 x) y)
  r) (and (mem5 x u) (mem b2 y v)))))
  (=>
  (forall ((x (tuple21 b a)) (y uni))
  (=> (sort b2 y)
  (=> (mem (tuple2 (tuple2 b1 a1) b2) (Tuple2 (tuple2 b1 a1) b2 (t2tb38 x) y)
  r) (and (mem5 x u) (mem b2 y v))))) (mem (set1 (tuple2 (tuple2 b1 a1) b2))
  r (relation b2 (tuple2 b1 a1) (t2tb37 u) v)))))))

(declare-fun t2tb1968 ((set (set (tuple21 (tuple21 a b) (set (tuple21 b
  a)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a b) (set (tuple21 b a))))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 b1) (set1 (tuple2 b1 a1))))) (t2tb1968 x))))

(declare-fun tb2t1968 (uni) (set (set (tuple21 (tuple21 a b) (set (tuple21 b
  a))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a b) (set (tuple21 b a)))))))
  (! (= (tb2t1968 (t2tb1968 i)) i) :pattern ((t2tb1968 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 b1) (set1 (tuple2 b1 a1))))) j)
     (= (t2tb1968 (tb2t1968 j)) j)) :pattern ((t2tb1968 (tb2t1968 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a b))) (v (set (set (tuple21 b a))))
  (r (set (tuple21 (tuple21 a b) (set (tuple21 b a))))))
  (= (mem (set1 (tuple2 (tuple2 a1 b1) (set1 (tuple2 b1 a1)))) (t2tb1956 r)
  (relation (set1 (tuple2 b1 a1)) (tuple2 a1 b1) (t2tb11 u) (t2tb56 v)))
  (forall ((x (tuple21 a b)) (y (set (tuple21 b a))))
  (=> (mem (tuple2 (tuple2 a1 b1) (set1 (tuple2 b1 a1)))
  (Tuple2 (tuple2 a1 b1) (set1 (tuple2 b1 a1)) (t2tb13 x) (t2tb37 y))
  (t2tb1956 r)) (and (mem3 x u) (mem6 y v)))))))

(declare-fun t2tb1081 ((set (set (tuple21 (tuple21 a b) (tuple21 b
  a))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a b) (tuple21 b a)))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 b1) (tuple2 b1 a1)))) (t2tb1081 x))))

(declare-fun tb2t1081 (uni) (set (set (tuple21 (tuple21 a b) (tuple21 b
  a)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a b) (tuple21 b a))))))
  (! (= (tb2t1081 (t2tb1081 i)) i) :pattern ((t2tb1081 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 b1) (tuple2 b1 a1)))) j)
     (= (t2tb1081 (tb2t1081 j)) j)) :pattern ((t2tb1081 (tb2t1081 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a b))) (v (set (tuple21 b a)))
  (r (set (tuple21 (tuple21 a b) (tuple21 b a)))))
  (= (mem (set1 (tuple2 (tuple2 a1 b1) (tuple2 b1 a1))) (t2tb1069 r)
  (relation (tuple2 b1 a1) (tuple2 a1 b1) (t2tb11 u) (t2tb37 v)))
  (forall ((x (tuple21 a b)) (y (tuple21 b a)))
  (=> (mem (tuple2 (tuple2 a1 b1) (tuple2 b1 a1))
  (Tuple2 (tuple2 a1 b1) (tuple2 b1 a1) (t2tb13 x) (t2tb38 y)) (t2tb1069 r))
  (and (mem3 x u) (mem5 y v)))))))

(declare-fun t2tb50 ((set (set (tuple21 (tuple21 a b) (tuple21 a b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a b) (tuple21 a b)))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 b1) (tuple2 a1 b1)))) (t2tb50 x))))

(declare-fun tb2t50 (uni) (set (set (tuple21 (tuple21 a b) (tuple21 a b)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a b) (tuple21 a b))))))
  (! (= (tb2t50 (t2tb50 i)) i) :pattern ((t2tb50 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 b1) (tuple2 a1 b1)))) j)
     (= (t2tb50 (tb2t50 j)) j)) :pattern ((t2tb50 (tb2t50 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a b))) (v (set (tuple21 a b)))
  (r (set (tuple21 (tuple21 a b) (tuple21 a b)))))
  (= (mem (set1 (tuple2 (tuple2 a1 b1) (tuple2 a1 b1))) (t2tb25 r)
  (relation (tuple2 a1 b1) (tuple2 a1 b1) (t2tb11 u) (t2tb11 v)))
  (forall ((x (tuple21 a b)) (y (tuple21 a b)))
  (=> (mem (tuple2 (tuple2 a1 b1) (tuple2 a1 b1))
  (Tuple2 (tuple2 a1 b1) (tuple2 a1 b1) (t2tb13 x) (t2tb13 y)) (t2tb25 r))
  (and (mem3 x u) (mem3 y v)))))))

(declare-fun t2tb51 ((set (set (tuple21 (tuple21 a b) b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a b) b))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 b1) b1))) (t2tb51 x))))

(declare-fun tb2t51 (uni) (set (set (tuple21 (tuple21 a b) b))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a b) b)))))
  (! (= (tb2t51 (t2tb51 i)) i) :pattern ((t2tb51 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 b1) b1))) j)
     (= (t2tb51 (tb2t51 j)) j)) :pattern ((t2tb51 (tb2t51 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a b))) (v (set b)) (r (set (tuple21 (tuple21 a b)
  b))))
  (= (mem (set1 (tuple2 (tuple2 a1 b1) b1)) (t2tb27 r)
  (relation b1 (tuple2 a1 b1) (t2tb11 u) (t2tb12 v)))
  (forall ((x (tuple21 a b)) (y b))
  (=> (mem (tuple2 (tuple2 a1 b1) b1)
  (Tuple2 (tuple2 a1 b1) b1 (t2tb13 x) (t2tb14 y)) (t2tb27 r))
  (and (mem3 x u) (mem2 y v)))))))

(declare-fun t2tb52 ((set (set (tuple21 (tuple21 a b) a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a b) a))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 b1) a1))) (t2tb52 x))))

(declare-fun tb2t52 (uni) (set (set (tuple21 (tuple21 a b) a))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a b) a)))))
  (! (= (tb2t52 (t2tb52 i)) i) :pattern ((t2tb52 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 b1) a1))) j)
     (= (t2tb52 (tb2t52 j)) j)) :pattern ((t2tb52 (tb2t52 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a b))) (v (set a)) (r (set (tuple21 (tuple21 a b)
  a))))
  (= (mem (set1 (tuple2 (tuple2 a1 b1) a1)) (t2tb29 r)
  (relation a1 (tuple2 a1 b1) (t2tb11 u) (t2tb1 v)))
  (forall ((x (tuple21 a b)) (y a))
  (=> (mem (tuple2 (tuple2 a1 b1) a1)
  (Tuple2 (tuple2 a1 b1) a1 (t2tb13 x) (t2tb2 y)) (t2tb29 r))
  (and (mem3 x u) (mem1 y v)))))))

;; mem_relation
  (assert
  (forall ((b2 ty))
  (forall ((u (set (tuple21 a b))) (v uni) (r uni))
  (and
  (=> (mem (set1 (tuple2 (tuple2 a1 b1) b2)) r
  (relation b2 (tuple2 a1 b1) (t2tb11 u) v))
  (forall ((x (tuple21 a b)) (y uni))
  (=> (mem (tuple2 (tuple2 a1 b1) b2) (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) y)
  r) (and (mem3 x u) (mem b2 y v)))))
  (=>
  (forall ((x (tuple21 a b)) (y uni))
  (=> (sort b2 y)
  (=> (mem (tuple2 (tuple2 a1 b1) b2) (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) y)
  r) (and (mem3 x u) (mem b2 y v))))) (mem (set1 (tuple2 (tuple2 a1 b1) b2))
  r (relation b2 (tuple2 a1 b1) (t2tb11 u) v)))))))

(declare-fun t2tb1969 ((set (set (tuple21 b (set (tuple21 b a)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 b (set (tuple21 b a))))))) (sort
  (set1 (set1 (tuple2 b1 (set1 (tuple2 b1 a1))))) (t2tb1969 x))))

(declare-fun tb2t1969 (uni) (set (set (tuple21 b (set (tuple21 b a))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 b (set (tuple21 b a)))))))
  (! (= (tb2t1969 (t2tb1969 i)) i) :pattern ((t2tb1969 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 b1 (set1 (tuple2 b1 a1))))) j)
     (= (t2tb1969 (tb2t1969 j)) j)) :pattern ((t2tb1969 (tb2t1969 j))) )))

;; mem_relation
  (assert
  (forall ((u (set b)) (v (set (set (tuple21 b a)))) (r (set (tuple21 b
  (set (tuple21 b a))))))
  (= (mem (set1 (tuple2 b1 (set1 (tuple2 b1 a1)))) (t2tb1958 r)
  (relation (set1 (tuple2 b1 a1)) b1 (t2tb12 u) (t2tb56 v)))
  (forall ((x b) (y (set (tuple21 b a))))
  (=> (mem (tuple2 b1 (set1 (tuple2 b1 a1)))
  (Tuple2 b1 (set1 (tuple2 b1 a1)) (t2tb14 x) (t2tb37 y)) (t2tb1958 r))
  (and (mem2 x u) (mem6 y v)))))))

(declare-fun t2tb1082 ((set (set (tuple21 b (tuple21 b a))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 b (tuple21 b a)))))) (sort
  (set1 (set1 (tuple2 b1 (tuple2 b1 a1)))) (t2tb1082 x))))

(declare-fun tb2t1082 (uni) (set (set (tuple21 b (tuple21 b a)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 b (tuple21 b a))))))
  (! (= (tb2t1082 (t2tb1082 i)) i) :pattern ((t2tb1082 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 b1 (tuple2 b1 a1)))) j)
     (= (t2tb1082 (tb2t1082 j)) j)) :pattern ((t2tb1082 (tb2t1082 j))) )))

;; mem_relation
  (assert
  (forall ((u (set b)) (v (set (tuple21 b a))) (r (set (tuple21 b (tuple21 b
  a)))))
  (= (mem (set1 (tuple2 b1 (tuple2 b1 a1))) (t2tb1071 r)
  (relation (tuple2 b1 a1) b1 (t2tb12 u) (t2tb37 v)))
  (forall ((x b) (y (tuple21 b a)))
  (=> (mem (tuple2 b1 (tuple2 b1 a1))
  (Tuple2 b1 (tuple2 b1 a1) (t2tb14 x) (t2tb38 y)) (t2tb1071 r))
  (and (mem2 x u) (mem5 y v)))))))

(declare-fun t2tb54 ((set (set (tuple21 b (tuple21 a b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 b (tuple21 a b)))))) (sort
  (set1 (set1 (tuple2 b1 (tuple2 a1 b1)))) (t2tb54 x))))

(declare-fun tb2t54 (uni) (set (set (tuple21 b (tuple21 a b)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 b (tuple21 a b))))))
  (! (= (tb2t54 (t2tb54 i)) i) :pattern ((t2tb54 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 b1 (tuple2 a1 b1)))) j)
     (= (t2tb54 (tb2t54 j)) j)) :pattern ((t2tb54 (tb2t54 j))) )))

;; mem_relation
  (assert
  (forall ((u (set b)) (v (set (tuple21 a b))) (r (set (tuple21 b (tuple21 a
  b)))))
  (= (mem (set1 (tuple2 b1 (tuple2 a1 b1))) (t2tb34 r)
  (relation (tuple2 a1 b1) b1 (t2tb12 u) (t2tb11 v)))
  (forall ((x b) (y (tuple21 a b)))
  (=> (mem (tuple2 b1 (tuple2 a1 b1))
  (Tuple2 b1 (tuple2 a1 b1) (t2tb14 x) (t2tb13 y)) (t2tb34 r))
  (and (mem2 x u) (mem3 y v)))))))

(declare-fun t2tb55 ((set (set (tuple21 b b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 b b))))) (sort (set1 (set1 (tuple2 b1 b1)))
  (t2tb55 x))))

(declare-fun tb2t55 (uni) (set (set (tuple21 b b))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 b b)))))
  (! (= (tb2t55 (t2tb55 i)) i) :pattern ((t2tb55 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 b1 b1))) j) (= (t2tb55 (tb2t55 j)) j)) :pattern (
  (t2tb55 (tb2t55 j))) )))

;; mem_relation
  (assert
  (forall ((u (set b)) (v (set b)) (r (set (tuple21 b b))))
  (= (mem (set1 (tuple2 b1 b1)) (t2tb35 r)
  (relation b1 b1 (t2tb12 u) (t2tb12 v)))
  (forall ((x b) (y b))
  (=> (mem (tuple2 b1 b1) (Tuple2 b1 b1 (t2tb14 x) (t2tb14 y)) (t2tb35 r))
  (and (mem2 x u) (mem2 y v)))))))

;; mem_relation
  (assert
  (forall ((u (set b)) (v (set a)) (r (set (tuple21 b a))))
  (= (mem6 r (tb2t56 (relation a1 b1 (t2tb12 u) (t2tb1 v))))
  (forall ((x b) (y a))
  (=> (mem5 (tb2t38 (Tuple2 b1 a1 (t2tb14 x) (t2tb2 y))) r)
  (and (mem2 x u) (mem1 y v)))))))

;; mem_relation
  (assert
  (forall ((b2 ty))
  (forall ((u (set b)) (v uni) (r uni))
  (and
  (=> (mem (set1 (tuple2 b1 b2)) r (relation b2 b1 (t2tb12 u) v))
  (forall ((x b) (y uni))
  (=> (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) y) r)
  (and (mem2 x u) (mem b2 y v)))))
  (=>
  (forall ((x b) (y uni))
  (=> (sort b2 y)
  (=> (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) y) r)
  (and (mem2 x u) (mem b2 y v))))) (mem (set1 (tuple2 b1 b2)) r
  (relation b2 b1 (t2tb12 u) v)))))))

(declare-fun t2tb1970 ((set (set (tuple21 a (set (tuple21 b a)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 a (set (tuple21 b a))))))) (sort
  (set1 (set1 (tuple2 a1 (set1 (tuple2 b1 a1))))) (t2tb1970 x))))

(declare-fun tb2t1970 (uni) (set (set (tuple21 a (set (tuple21 b a))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 a (set (tuple21 b a)))))))
  (! (= (tb2t1970 (t2tb1970 i)) i) :pattern ((t2tb1970 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 a1 (set1 (tuple2 b1 a1))))) j)
     (= (t2tb1970 (tb2t1970 j)) j)) :pattern ((t2tb1970 (tb2t1970 j))) )))

;; mem_relation
  (assert
  (forall ((u (set a)) (v (set (set (tuple21 b a)))) (r (set (tuple21 a
  (set (tuple21 b a))))))
  (= (mem (set1 (tuple2 a1 (set1 (tuple2 b1 a1)))) (t2tb1960 r)
  (relation (set1 (tuple2 b1 a1)) a1 (t2tb1 u) (t2tb56 v)))
  (forall ((x a) (y (set (tuple21 b a))))
  (=> (mem (tuple2 a1 (set1 (tuple2 b1 a1)))
  (Tuple2 a1 (set1 (tuple2 b1 a1)) (t2tb2 x) (t2tb37 y)) (t2tb1960 r))
  (and (mem1 x u) (mem6 y v)))))))

(declare-fun t2tb1083 ((set (set (tuple21 a (tuple21 b a))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 a (tuple21 b a)))))) (sort
  (set1 (set1 (tuple2 a1 (tuple2 b1 a1)))) (t2tb1083 x))))

(declare-fun tb2t1083 (uni) (set (set (tuple21 a (tuple21 b a)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 a (tuple21 b a))))))
  (! (= (tb2t1083 (t2tb1083 i)) i) :pattern ((t2tb1083 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 a1 (tuple2 b1 a1)))) j)
     (= (t2tb1083 (tb2t1083 j)) j)) :pattern ((t2tb1083 (tb2t1083 j))) )))

;; mem_relation
  (assert
  (forall ((u (set a)) (v (set (tuple21 b a))) (r (set (tuple21 a (tuple21 b
  a)))))
  (= (mem (set1 (tuple2 a1 (tuple2 b1 a1))) (t2tb1073 r)
  (relation (tuple2 b1 a1) a1 (t2tb1 u) (t2tb37 v)))
  (forall ((x a) (y (tuple21 b a)))
  (=> (mem (tuple2 a1 (tuple2 b1 a1))
  (Tuple2 a1 (tuple2 b1 a1) (t2tb2 x) (t2tb38 y)) (t2tb1073 r))
  (and (mem1 x u) (mem5 y v)))))))

(declare-fun t2tb58 ((set (set (tuple21 a (tuple21 a b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 a (tuple21 a b)))))) (sort
  (set1 (set1 (tuple2 a1 (tuple2 a1 b1)))) (t2tb58 x))))

(declare-fun tb2t58 (uni) (set (set (tuple21 a (tuple21 a b)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 a (tuple21 a b))))))
  (! (= (tb2t58 (t2tb58 i)) i) :pattern ((t2tb58 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 a1 (tuple2 a1 b1)))) j)
     (= (t2tb58 (tb2t58 j)) j)) :pattern ((t2tb58 (tb2t58 j))) )))

;; mem_relation
  (assert
  (forall ((u (set a)) (v (set (tuple21 a b))) (r (set (tuple21 a (tuple21 a
  b)))))
  (= (mem (set1 (tuple2 a1 (tuple2 a1 b1))) (t2tb41 r)
  (relation (tuple2 a1 b1) a1 (t2tb1 u) (t2tb11 v)))
  (forall ((x a) (y (tuple21 a b)))
  (=> (mem (tuple2 a1 (tuple2 a1 b1))
  (Tuple2 a1 (tuple2 a1 b1) (t2tb2 x) (t2tb13 y)) (t2tb41 r))
  (and (mem1 x u) (mem3 y v)))))))

;; mem_relation
  (assert
  (forall ((u (set a)) (v (set b)) (r (set (tuple21 a b))))
  (= (mem (set1 (tuple2 a1 b1)) (t2tb11 r)
  (relation b1 a1 (t2tb1 u) (t2tb12 v)))
  (forall ((x a) (y b))
  (=> (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y))) r)
  (and (mem1 x u) (mem2 y v)))))))

(declare-fun t2tb3 ((set (set (tuple21 a a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 a a))))) (sort (set1 (set1 (tuple2 a1 a1)))
  (t2tb3 x))))

(declare-fun tb2t3 (uni) (set (set (tuple21 a a))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 a a)))))
  (! (= (tb2t3 (t2tb3 i)) i) :pattern ((t2tb3 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 a1 a1))) j) (= (t2tb3 (tb2t3 j)) j)) :pattern (
  (t2tb3 (tb2t3 j))) )))

;; mem_relation
  (assert
  (forall ((u (set a)) (v (set a)) (r (set (tuple21 a a))))
  (= (mem (set1 (tuple2 a1 a1)) (t2tb4 r)
  (relation a1 a1 (t2tb1 u) (t2tb1 v)))
  (forall ((x a) (y a))
  (=> (mem (tuple2 a1 a1) (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y)) (t2tb4 r))
  (and (mem1 x u) (mem1 y v)))))))

;; mem_relation
  (assert
  (forall ((b2 ty))
  (forall ((u (set a)) (v uni) (r uni))
  (and
  (=> (mem (set1 (tuple2 a1 b2)) r (relation b2 a1 (t2tb1 u) v))
  (forall ((x a) (y uni))
  (=> (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) y) r)
  (and (mem1 x u) (mem b2 y v)))))
  (=>
  (forall ((x a) (y uni))
  (=> (sort b2 y)
  (=> (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) y) r)
  (and (mem1 x u) (mem b2 y v))))) (mem (set1 (tuple2 a1 b2)) r
  (relation b2 a1 (t2tb1 u) v)))))))

;; mem_relation
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((u uni) (v uni) (r uni))
  (and
  (=> (mem (set1 (tuple2 a2 b2)) r (relation b2 a2 u v))
  (forall ((x uni) (y uni))
  (=> (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) r)
  (and (mem a2 x u) (mem b2 y v)))))
  (=>
  (forall ((x uni) (y uni))
  (=> (sort a2 x)
  (=> (sort b2 y)
  (=> (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) r)
  (and (mem a2 x u) (mem b2 y v)))))) (mem (set1 (tuple2 a2 b2)) r
  (relation b2 a2 u v)))))))

(declare-fun inverse (ty ty uni) uni)

;; inverse_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni)) (sort (set1 (tuple2 b2 a2)) (inverse b2 a2 x)))))

(declare-fun inverse1 ((set (tuple21 b a))) (set (tuple21 a b)))

(declare-fun inverse2 ((set (tuple21 a b))) (set (tuple21 b a)))

;; mem_inverse
  (assert
  (forall ((p (set (tuple21 b a))) (x a) (y b))
  (= (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y))) (inverse1 p)) (mem5
  (tb2t38 (Tuple2 b1 a1 (t2tb14 y) (t2tb2 x))) p))))

;; mem_inverse
  (assert
  (forall ((p (set (tuple21 a b))) (x b) (y a))
  (= (mem5 (tb2t38 (Tuple2 b1 a1 (t2tb14 x) (t2tb2 y))) (inverse2 p)) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 y) (t2tb14 x))) p))))

;; mem_inverse
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((p uni) (x uni) (y uni))
  (= (mem (tuple2 b2 a2) (Tuple2 b2 a2 x y) (inverse b2 a2 p)) (mem
  (tuple2 a2 b2) (Tuple2 a2 b2 y x) p)))))

(declare-fun dom (ty ty uni) uni)

;; dom_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni)) (sort (set1 a2) (dom b2 a2 x)))))

;; mem_dom
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (x (set (tuple21 b a))))
  (and
  (=> (mem6 x (tb2t56 (dom b2 (set1 (tuple2 b1 a1)) p)))
  (exists ((b3 uni))
  (and (sort b2 b3) (mem (tuple2 (set1 (tuple2 b1 a1)) b2)
  (Tuple2 (set1 (tuple2 b1 a1)) b2 (t2tb37 x) b3) p))))
  (=>
  (exists ((b3 uni)) (mem (tuple2 (set1 (tuple2 b1 a1)) b2)
  (Tuple2 (set1 (tuple2 b1 a1)) b2 (t2tb37 x) b3) p)) (mem6 x
  (tb2t56 (dom b2 (set1 (tuple2 b1 a1)) p))))))))

;; mem_dom
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (x (tuple21 b a)))
  (and
  (=> (mem5 x (tb2t37 (dom b2 (tuple2 b1 a1) p)))
  (exists ((b3 uni))
  (and (sort b2 b3) (mem (tuple2 (tuple2 b1 a1) b2)
  (Tuple2 (tuple2 b1 a1) b2 (t2tb38 x) b3) p))))
  (=>
  (exists ((b3 uni)) (mem (tuple2 (tuple2 b1 a1) b2)
  (Tuple2 (tuple2 b1 a1) b2 (t2tb38 x) b3) p)) (mem5 x
  (tb2t37 (dom b2 (tuple2 b1 a1) p))))))))

;; mem_dom
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (x (tuple21 a b)))
  (and
  (=> (mem3 x (tb2t11 (dom b2 (tuple2 a1 b1) p)))
  (exists ((b3 uni))
  (and (sort b2 b3) (mem (tuple2 (tuple2 a1 b1) b2)
  (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) b3) p))))
  (=>
  (exists ((b3 uni)) (mem (tuple2 (tuple2 a1 b1) b2)
  (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) b3) p)) (mem3 x
  (tb2t11 (dom b2 (tuple2 a1 b1) p))))))))

;; mem_dom
  (assert
  (forall ((p (set (tuple21 b a))) (x b))
  (= (mem2 x (tb2t12 (dom a1 b1 (t2tb37 p))))
  (exists ((b2 a)) (mem5 (tb2t38 (Tuple2 b1 a1 (t2tb14 x) (t2tb2 b2))) p)))))

;; mem_dom
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (x b))
  (and
  (=> (mem2 x (tb2t12 (dom b2 b1 p)))
  (exists ((b3 uni))
  (and (sort b2 b3) (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) b3) p))))
  (=> (exists ((b3 uni)) (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) b3) p))
  (mem2 x (tb2t12 (dom b2 b1 p))))))))

;; mem_dom
  (assert
  (forall ((p (set (tuple21 a b))) (x a))
  (= (mem1 x (tb2t1 (dom b1 a1 (t2tb11 p))))
  (exists ((b2 b)) (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 b2))) p)))))

;; mem_dom
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (x a))
  (and
  (=> (mem1 x (tb2t1 (dom b2 a1 p)))
  (exists ((b3 uni))
  (and (sort b2 b3) (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) b3) p))))
  (=> (exists ((b3 uni)) (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) b3) p))
  (mem1 x (tb2t1 (dom b2 a1 p))))))))

;; mem_dom
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((p uni) (x uni))
  (and
  (=> (mem a2 x (dom b2 a2 p))
  (exists ((b3 uni))
  (and (sort b2 b3) (mem (tuple2 a2 b2) (Tuple2 a2 b2 x b3) p))))
  (=> (exists ((b3 uni)) (mem (tuple2 a2 b2) (Tuple2 a2 b2 x b3) p)) (mem a2
  x (dom b2 a2 p)))))))

(declare-fun ran (ty ty uni) uni)

;; ran_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni)) (sort (set1 b2) (ran b2 a2 x)))))

;; mem_ran
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (x (set (tuple21 b a))))
  (and
  (=> (mem6 x (tb2t56 (ran (set1 (tuple2 b1 a1)) a2 p)))
  (exists ((a3 uni))
  (and (sort a2 a3) (mem (tuple2 a2 (set1 (tuple2 b1 a1)))
  (Tuple2 a2 (set1 (tuple2 b1 a1)) a3 (t2tb37 x)) p))))
  (=>
  (exists ((a3 uni)) (mem (tuple2 a2 (set1 (tuple2 b1 a1)))
  (Tuple2 a2 (set1 (tuple2 b1 a1)) a3 (t2tb37 x)) p)) (mem6 x
  (tb2t56 (ran (set1 (tuple2 b1 a1)) a2 p))))))))

;; mem_ran
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (x (tuple21 b a)))
  (and
  (=> (mem5 x (tb2t37 (ran (tuple2 b1 a1) a2 p)))
  (exists ((a3 uni))
  (and (sort a2 a3) (mem (tuple2 a2 (tuple2 b1 a1))
  (Tuple2 a2 (tuple2 b1 a1) a3 (t2tb38 x)) p))))
  (=>
  (exists ((a3 uni)) (mem (tuple2 a2 (tuple2 b1 a1))
  (Tuple2 a2 (tuple2 b1 a1) a3 (t2tb38 x)) p)) (mem5 x
  (tb2t37 (ran (tuple2 b1 a1) a2 p))))))))

;; mem_ran
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (x (tuple21 a b)))
  (and
  (=> (mem3 x (tb2t11 (ran (tuple2 a1 b1) a2 p)))
  (exists ((a3 uni))
  (and (sort a2 a3) (mem (tuple2 a2 (tuple2 a1 b1))
  (Tuple2 a2 (tuple2 a1 b1) a3 (t2tb13 x)) p))))
  (=>
  (exists ((a3 uni)) (mem (tuple2 a2 (tuple2 a1 b1))
  (Tuple2 a2 (tuple2 a1 b1) a3 (t2tb13 x)) p)) (mem3 x
  (tb2t11 (ran (tuple2 a1 b1) a2 p))))))))

;; mem_ran
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (x b))
  (and
  (=> (mem2 x (tb2t12 (ran b1 a2 p)))
  (exists ((a3 uni))
  (and (sort a2 a3) (mem (tuple2 a2 b1) (Tuple2 a2 b1 a3 (t2tb14 x)) p))))
  (=> (exists ((a3 uni)) (mem (tuple2 a2 b1) (Tuple2 a2 b1 a3 (t2tb14 x)) p))
  (mem2 x (tb2t12 (ran b1 a2 p))))))))

;; mem_ran
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (x a))
  (and
  (=> (mem1 x (tb2t1 (ran a1 a2 p)))
  (exists ((a3 uni))
  (and (sort a2 a3) (mem (tuple2 a2 a1) (Tuple2 a2 a1 a3 (t2tb2 x)) p))))
  (=> (exists ((a3 uni)) (mem (tuple2 a2 a1) (Tuple2 a2 a1 a3 (t2tb2 x)) p))
  (mem1 x (tb2t1 (ran a1 a2 p))))))))

;; mem_ran
  (assert
  (forall ((p (set (tuple21 b a))) (x a))
  (= (mem1 x (tb2t1 (ran a1 b1 (t2tb37 p))))
  (exists ((a2 b)) (mem5 (tb2t38 (Tuple2 b1 a1 (t2tb14 a2) (t2tb2 x))) p)))))

;; mem_ran
  (assert
  (forall ((p (set (tuple21 a b))) (x b))
  (= (mem2 x (tb2t12 (ran b1 a1 (t2tb11 p))))
  (exists ((a2 a)) (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 a2) (t2tb14 x))) p)))))

;; mem_ran
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((p uni) (x uni))
  (and
  (=> (mem b2 x (ran b2 a2 p))
  (exists ((a3 uni))
  (and (sort a2 a3) (mem (tuple2 a2 b2) (Tuple2 a2 b2 a3 x) p))))
  (=> (exists ((a3 uni)) (mem (tuple2 a2 b2) (Tuple2 a2 b2 a3 x) p)) (mem b2
  x (ran b2 a2 p)))))))

(declare-fun semicolon (ty ty ty uni uni) uni)

;; semicolon_sort
  (assert
  (forall ((a2 ty) (b2 ty) (c2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (tuple2 a2 c2))
  (semicolon c2 b2 a2 x x1)))))

;; mem_semicolon
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (q (set (tuple21 b a))) (x uni) (y a))
  (= (mem (tuple2 a2 a1) (Tuple2 a2 a1 x (t2tb2 y))
  (semicolon a1 b1 a2 p (t2tb37 q)))
  (exists ((b2 b))
  (and (mem (tuple2 a2 b1) (Tuple2 a2 b1 x (t2tb14 b2)) p) (mem5
  (tb2t38 (Tuple2 b1 a1 (t2tb14 b2) (t2tb2 y))) q)))))))

;; mem_semicolon
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (q (set (tuple21 a b))) (x uni) (y b))
  (= (mem (tuple2 a2 b1) (Tuple2 a2 b1 x (t2tb14 y))
  (semicolon b1 a1 a2 p (t2tb11 q)))
  (exists ((b2 a))
  (and (mem (tuple2 a2 a1) (Tuple2 a2 a1 x (t2tb2 b2)) p) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 b2) (t2tb14 y))) q)))))))

;; mem_semicolon
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (q uni) (x b) (y a))
  (and
  (=> (mem5 (tb2t38 (Tuple2 b1 a1 (t2tb14 x) (t2tb2 y)))
  (tb2t37 (semicolon a1 b2 b1 p q)))
  (exists ((b3 uni))
  (and (sort b2 b3)
  (and (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) b3) p) (mem
  (tuple2 b2 a1) (Tuple2 b2 a1 b3 (t2tb2 y)) q)))))
  (=>
  (exists ((b3 uni))
  (and (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) b3) p) (mem
  (tuple2 b2 a1) (Tuple2 b2 a1 b3 (t2tb2 y)) q))) (mem5
  (tb2t38 (Tuple2 b1 a1 (t2tb14 x) (t2tb2 y)))
  (tb2t37 (semicolon a1 b2 b1 p q))))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 b b))) (q (set (tuple21 b a))) (x b) (y a))
  (= (mem5 (tb2t38 (Tuple2 b1 a1 (t2tb14 x) (t2tb2 y)))
  (tb2t37 (semicolon a1 b1 b1 (t2tb35 p) (t2tb37 q))))
  (exists ((b2 b))
  (and (mem (tuple2 b1 b1) (Tuple2 b1 b1 (t2tb14 x) (t2tb14 b2)) (t2tb35 p))
  (mem5 (tb2t38 (Tuple2 b1 a1 (t2tb14 b2) (t2tb2 y))) q))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 b a))) (q (set (tuple21 a b))) (x b) (y b))
  (= (mem (tuple2 b1 b1) (Tuple2 b1 b1 (t2tb14 x) (t2tb14 y))
  (semicolon b1 a1 b1 (t2tb37 p) (t2tb11 q)))
  (exists ((b2 a))
  (and (mem5 (tb2t38 (Tuple2 b1 a1 (t2tb14 x) (t2tb2 b2))) p) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 b2) (t2tb14 y))) q))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 b a))) (q (set (tuple21 a a))) (x b) (y a))
  (= (mem5 (tb2t38 (Tuple2 b1 a1 (t2tb14 x) (t2tb2 y)))
  (tb2t37 (semicolon a1 a1 b1 (t2tb37 p) (t2tb4 q))))
  (exists ((b2 a))
  (and (mem5 (tb2t38 (Tuple2 b1 a1 (t2tb14 x) (t2tb2 b2))) p) (mem
  (tuple2 a1 a1) (Tuple2 a1 a1 (t2tb2 b2) (t2tb2 y)) (t2tb4 q)))))))

;; mem_semicolon
  (assert
  (forall ((c2 ty))
  (forall ((p (set (tuple21 b a))) (q uni) (x b) (y uni))
  (= (mem (tuple2 b1 c2) (Tuple2 b1 c2 (t2tb14 x) y)
  (semicolon c2 a1 b1 (t2tb37 p) q))
  (exists ((b2 a))
  (and (mem5 (tb2t38 (Tuple2 b1 a1 (t2tb14 x) (t2tb2 b2))) p) (mem
  (tuple2 a1 c2) (Tuple2 a1 c2 (t2tb2 b2) y) q)))))))

;; mem_semicolon
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (q uni) (x a) (y b))
  (and
  (=> (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y)))
  (tb2t11 (semicolon b1 b2 a1 p q)))
  (exists ((b3 uni))
  (and (sort b2 b3)
  (and (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) b3) p) (mem (tuple2 b2 b1)
  (Tuple2 b2 b1 b3 (t2tb14 y)) q)))))
  (=>
  (exists ((b3 uni))
  (and (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) b3) p) (mem (tuple2 b2 b1)
  (Tuple2 b2 b1 b3 (t2tb14 y)) q))) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y)))
  (tb2t11 (semicolon b1 b2 a1 p q))))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 a b))) (q (set (tuple21 b b))) (x a) (y b))
  (= (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y)))
  (tb2t11 (semicolon b1 b1 a1 (t2tb11 p) (t2tb35 q))))
  (exists ((b2 b))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 b2))) p) (mem
  (tuple2 b1 b1) (Tuple2 b1 b1 (t2tb14 b2) (t2tb14 y)) (t2tb35 q)))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 a b))) (q (set (tuple21 b a))) (x a) (y a))
  (= (mem (tuple2 a1 a1) (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y))
  (semicolon a1 b1 a1 (t2tb11 p) (t2tb37 q)))
  (exists ((b2 b))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 b2))) p) (mem5
  (tb2t38 (Tuple2 b1 a1 (t2tb14 b2) (t2tb2 y))) q))))))

;; mem_semicolon
  (assert
  (forall ((c2 ty))
  (forall ((p (set (tuple21 a b))) (q uni) (x a) (y uni))
  (= (mem (tuple2 a1 c2) (Tuple2 a1 c2 (t2tb2 x) y)
  (semicolon c2 b1 a1 (t2tb11 p) q))
  (exists ((b2 b))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 b2))) p) (mem
  (tuple2 b1 c2) (Tuple2 b1 c2 (t2tb14 b2) y) q)))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 a a))) (q (set (tuple21 a b))) (x a) (y b))
  (= (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y)))
  (tb2t11 (semicolon b1 a1 a1 (t2tb4 p) (t2tb11 q))))
  (exists ((b2 a))
  (and (mem (tuple2 a1 a1) (Tuple2 a1 a1 (t2tb2 x) (t2tb2 b2)) (t2tb4 p))
  (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 b2) (t2tb14 y))) q))))))

;; mem_semicolon
  (assert
  (forall ((a2 ty) (b2 ty) (c2 ty))
  (forall ((p uni) (q uni) (x uni) (y uni))
  (and
  (=> (mem (tuple2 a2 c2) (Tuple2 a2 c2 x y) (semicolon c2 b2 a2 p q))
  (exists ((b3 uni))
  (and (sort b2 b3)
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x b3) p) (mem (tuple2 b2 c2)
  (Tuple2 b2 c2 b3 y) q)))))
  (=>
  (exists ((b3 uni))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x b3) p) (mem (tuple2 b2 c2)
  (Tuple2 b2 c2 b3 y) q))) (mem (tuple2 a2 c2) (Tuple2 a2 c2 x y)
  (semicolon c2 b2 a2 p q)))))))

(declare-fun semicolon_back (ty ty ty uni uni) uni)

;; semicolon_back_sort
  (assert
  (forall ((a2 ty) (b2 ty) (c2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (tuple2 a2 c2))
  (semicolon_back c2 b2 a2 x x1)))))

;; semicolon_back
  (assert
  (forall ((a2 ty) (b2 ty) (c2 ty))
  (forall ((p uni) (q uni))
  (= (semicolon_back c2 b2 a2 q p) (semicolon c2 b2 a2 p q)))))

(declare-fun id (ty uni) uni)

;; id_sort
  (assert
  (forall ((a2 ty))
  (forall ((x uni)) (sort (set1 (tuple2 a2 a2)) (id a2 x)))))

;; mem_id
  (assert
  (forall ((u (set (set (tuple21 b a)))) (x (set (tuple21 b a)))
  (y (set (tuple21 b a))))
  (= (mem (tuple2 (set1 (tuple2 b1 a1)) (set1 (tuple2 b1 a1)))
  (Tuple2 (set1 (tuple2 b1 a1)) (set1 (tuple2 b1 a1)) (t2tb37 x) (t2tb37 y))
  (id (set1 (tuple2 b1 a1)) (t2tb56 u))) (and (mem6 x u) (= x y)))))

;; mem_id
  (assert
  (forall ((u (set (tuple21 b a))) (x (tuple21 b a)) (y (tuple21 b a)))
  (= (mem (tuple2 (tuple2 b1 a1) (tuple2 b1 a1))
  (Tuple2 (tuple2 b1 a1) (tuple2 b1 a1) (t2tb38 x) (t2tb38 y))
  (id (tuple2 b1 a1) (t2tb37 u))) (and (mem5 x u) (= x y)))))

;; mem_id
  (assert
  (forall ((u (set (tuple21 a b))) (x (tuple21 a b)) (y (tuple21 a b)))
  (= (mem (tuple2 (tuple2 a1 b1) (tuple2 a1 b1))
  (Tuple2 (tuple2 a1 b1) (tuple2 a1 b1) (t2tb13 x) (t2tb13 y))
  (id (tuple2 a1 b1) (t2tb11 u))) (and (mem3 x u) (= x y)))))

;; mem_id
  (assert
  (forall ((u (set b)) (x b) (y b))
  (= (mem (tuple2 b1 b1) (Tuple2 b1 b1 (t2tb14 x) (t2tb14 y))
  (id b1 (t2tb12 u))) (and (mem2 x u) (= x y)))))

;; mem_id
  (assert
  (forall ((u (set a)) (x a) (y a))
  (= (mem (tuple2 a1 a1) (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y))
  (id a1 (t2tb1 u))) (and (mem1 x u) (= x y)))))

;; mem_id
  (assert
  (forall ((a2 ty))
  (forall ((u uni) (x uni) (y uni))
  (=> (sort a2 x)
  (=> (sort a2 y)
  (= (mem (tuple2 a2 a2) (Tuple2 a2 a2 x y) (id a2 u))
  (and (mem a2 x u) (= x y))))))))

(declare-fun domain_restriction (ty ty uni uni) uni)

;; domain_restriction_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (tuple2 a2 b2))
  (domain_restriction b2 a2 x x1)))))

;; mem_domain_restriction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (set (tuple21 b a)))) (x (set (tuple21 b a)))
  (y uni))
  (= (mem (tuple2 (set1 (tuple2 b1 a1)) b2)
  (Tuple2 (set1 (tuple2 b1 a1)) b2 (t2tb37 x) y)
  (domain_restriction b2 (set1 (tuple2 b1 a1)) (t2tb56 s) p))
  (and (mem (tuple2 (set1 (tuple2 b1 a1)) b2)
  (Tuple2 (set1 (tuple2 b1 a1)) b2 (t2tb37 x) y) p) (mem6 x s))))))

;; mem_domain_restriction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (tuple21 b a))) (x (tuple21 b a)) (y uni))
  (= (mem (tuple2 (tuple2 b1 a1) b2) (Tuple2 (tuple2 b1 a1) b2 (t2tb38 x) y)
  (domain_restriction b2 (tuple2 b1 a1) (t2tb37 s) p))
  (and (mem (tuple2 (tuple2 b1 a1) b2)
  (Tuple2 (tuple2 b1 a1) b2 (t2tb38 x) y) p) (mem5 x s))))))

;; mem_domain_restriction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (tuple21 a b))) (x (tuple21 a b)) (y uni))
  (= (mem (tuple2 (tuple2 a1 b1) b2) (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) y)
  (domain_restriction b2 (tuple2 a1 b1) (t2tb11 s) p))
  (and (mem (tuple2 (tuple2 a1 b1) b2)
  (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) y) p) (mem3 x s))))))

;; mem_domain_restriction
  (assert
  (forall ((p (set (tuple21 b a))) (s (set b)) (x b) (y a))
  (= (mem5 (tb2t38 (Tuple2 b1 a1 (t2tb14 x) (t2tb2 y)))
  (tb2t37 (domain_restriction a1 b1 (t2tb12 s) (t2tb37 p))))
  (and (mem5 (tb2t38 (Tuple2 b1 a1 (t2tb14 x) (t2tb2 y))) p) (mem2 x s)))))

;; mem_domain_restriction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set b)) (x b) (y uni))
  (= (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) y)
  (domain_restriction b2 b1 (t2tb12 s) p))
  (and (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) y) p) (mem2 x s))))))

;; mem_domain_restriction
  (assert
  (forall ((p (set (tuple21 a b))) (s (set a)) (x a) (y b))
  (= (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y)))
  (tb2t11 (domain_restriction b1 a1 (t2tb1 s) (t2tb11 p))))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y))) p) (mem1 x s)))))

;; mem_domain_restriction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set a)) (x a) (y uni))
  (= (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) y)
  (domain_restriction b2 a1 (t2tb1 s) p))
  (and (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) y) p) (mem1 x s))))))

;; mem_domain_restriction
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((p uni) (s uni) (x uni) (y uni))
  (= (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) (domain_restriction b2 a2 s p))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) p) (mem a2 x s))))))

(declare-fun range_restriction (ty ty uni uni) uni)

;; range_restriction_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (tuple2 a2 b2))
  (range_restriction b2 a2 x x1)))))

;; mem_range_restriction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (set (tuple21 b a)))) (x uni) (y (set (tuple21 b
  a))))
  (= (mem (tuple2 a2 (set1 (tuple2 b1 a1)))
  (Tuple2 a2 (set1 (tuple2 b1 a1)) x (t2tb37 y))
  (range_restriction (set1 (tuple2 b1 a1)) a2 p (t2tb56 t)))
  (and (mem (tuple2 a2 (set1 (tuple2 b1 a1)))
  (Tuple2 a2 (set1 (tuple2 b1 a1)) x (t2tb37 y)) p) (mem6 y t))))))

;; mem_range_restriction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (tuple21 b a))) (x uni) (y (tuple21 b a)))
  (= (mem (tuple2 a2 (tuple2 b1 a1)) (Tuple2 a2 (tuple2 b1 a1) x (t2tb38 y))
  (range_restriction (tuple2 b1 a1) a2 p (t2tb37 t)))
  (and (mem (tuple2 a2 (tuple2 b1 a1))
  (Tuple2 a2 (tuple2 b1 a1) x (t2tb38 y)) p) (mem5 y t))))))

;; mem_range_restriction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (tuple21 a b))) (x uni) (y (tuple21 a b)))
  (= (mem (tuple2 a2 (tuple2 a1 b1)) (Tuple2 a2 (tuple2 a1 b1) x (t2tb13 y))
  (range_restriction (tuple2 a1 b1) a2 p (t2tb11 t)))
  (and (mem (tuple2 a2 (tuple2 a1 b1))
  (Tuple2 a2 (tuple2 a1 b1) x (t2tb13 y)) p) (mem3 y t))))))

;; mem_range_restriction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set b)) (x uni) (y b))
  (= (mem (tuple2 a2 b1) (Tuple2 a2 b1 x (t2tb14 y))
  (range_restriction b1 a2 p (t2tb12 t)))
  (and (mem (tuple2 a2 b1) (Tuple2 a2 b1 x (t2tb14 y)) p) (mem2 y t))))))

;; mem_range_restriction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set a)) (x uni) (y a))
  (= (mem (tuple2 a2 a1) (Tuple2 a2 a1 x (t2tb2 y))
  (range_restriction a1 a2 p (t2tb1 t)))
  (and (mem (tuple2 a2 a1) (Tuple2 a2 a1 x (t2tb2 y)) p) (mem1 y t))))))

;; mem_range_restriction
  (assert
  (forall ((p (set (tuple21 b a))) (t (set a)) (x b) (y a))
  (= (mem5 (tb2t38 (Tuple2 b1 a1 (t2tb14 x) (t2tb2 y)))
  (tb2t37 (range_restriction a1 b1 (t2tb37 p) (t2tb1 t))))
  (and (mem5 (tb2t38 (Tuple2 b1 a1 (t2tb14 x) (t2tb2 y))) p) (mem1 y t)))))

;; mem_range_restriction
  (assert
  (forall ((p (set (tuple21 a b))) (t (set b)) (x a) (y b))
  (= (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y)))
  (tb2t11 (range_restriction b1 a1 (t2tb11 p) (t2tb12 t))))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y))) p) (mem2 y t)))))

;; mem_range_restriction
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((p uni) (t uni) (x uni) (y uni))
  (= (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) (range_restriction b2 a2 p t))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) p) (mem b2 y t))))))

(declare-fun domain_substraction (ty ty uni uni) uni)

;; domain_substraction_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (tuple2 a2 b2))
  (domain_substraction b2 a2 x x1)))))

(declare-fun domain_substraction1 ((set a) (set (tuple21 a
  b))) (set (tuple21 a b)))

(declare-fun domain_substraction2 ((set b) (set (tuple21 b
  a))) (set (tuple21 b a)))

;; mem_domain_substraction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (set (tuple21 b a)))) (x (set (tuple21 b a)))
  (y uni))
  (= (mem (tuple2 (set1 (tuple2 b1 a1)) b2)
  (Tuple2 (set1 (tuple2 b1 a1)) b2 (t2tb37 x) y)
  (domain_substraction b2 (set1 (tuple2 b1 a1)) (t2tb56 s) p))
  (and (mem (tuple2 (set1 (tuple2 b1 a1)) b2)
  (Tuple2 (set1 (tuple2 b1 a1)) b2 (t2tb37 x) y) p) (not (mem6 x s)))))))

;; mem_domain_substraction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (tuple21 b a))) (x (tuple21 b a)) (y uni))
  (= (mem (tuple2 (tuple2 b1 a1) b2) (Tuple2 (tuple2 b1 a1) b2 (t2tb38 x) y)
  (domain_substraction b2 (tuple2 b1 a1) (t2tb37 s) p))
  (and (mem (tuple2 (tuple2 b1 a1) b2)
  (Tuple2 (tuple2 b1 a1) b2 (t2tb38 x) y) p) (not (mem5 x s)))))))

;; mem_domain_substraction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (tuple21 a b))) (x (tuple21 a b)) (y uni))
  (= (mem (tuple2 (tuple2 a1 b1) b2) (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) y)
  (domain_substraction b2 (tuple2 a1 b1) (t2tb11 s) p))
  (and (mem (tuple2 (tuple2 a1 b1) b2)
  (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) y) p) (not (mem3 x s)))))))

;; mem_domain_substraction
  (assert
  (forall ((p (set (tuple21 b a))) (s (set b)) (x b) (y a))
  (= (mem5 (tb2t38 (Tuple2 b1 a1 (t2tb14 x) (t2tb2 y)))
  (domain_substraction2 s p))
  (and (mem5 (tb2t38 (Tuple2 b1 a1 (t2tb14 x) (t2tb2 y))) p)
  (not (mem2 x s))))))

;; mem_domain_substraction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set b)) (x b) (y uni))
  (= (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) y)
  (domain_substraction b2 b1 (t2tb12 s) p))
  (and (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) y) p) (not (mem2 x s)))))))

;; mem_domain_substraction
  (assert
  (forall ((p (set (tuple21 a b))) (s (set a)) (x a) (y b))
  (= (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y)))
  (domain_substraction1 s p))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y))) p)
  (not (mem1 x s))))))

;; mem_domain_substraction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set a)) (x a) (y uni))
  (= (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) y)
  (domain_substraction b2 a1 (t2tb1 s) p))
  (and (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) y) p) (not (mem1 x s)))))))

;; mem_domain_substraction
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((p uni) (s uni) (x uni) (y uni))
  (= (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) (domain_substraction b2 a2 s p))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) p) (not (mem a2 x s)))))))

(declare-fun range_substraction (ty ty uni uni) uni)

;; range_substraction_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (tuple2 a2 b2))
  (range_substraction b2 a2 x x1)))))

(declare-fun range_substraction1 ((set (tuple21 a b))
  (set b)) (set (tuple21 a b)))

(declare-fun range_substraction2 ((set (tuple21 b a))
  (set a)) (set (tuple21 b a)))

;; mem_range_substraction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (set (tuple21 b a)))) (x uni) (y (set (tuple21 b
  a))))
  (= (mem (tuple2 a2 (set1 (tuple2 b1 a1)))
  (Tuple2 a2 (set1 (tuple2 b1 a1)) x (t2tb37 y))
  (range_substraction (set1 (tuple2 b1 a1)) a2 p (t2tb56 t)))
  (and (mem (tuple2 a2 (set1 (tuple2 b1 a1)))
  (Tuple2 a2 (set1 (tuple2 b1 a1)) x (t2tb37 y)) p) (not (mem6 y t)))))))

;; mem_range_substraction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (tuple21 b a))) (x uni) (y (tuple21 b a)))
  (= (mem (tuple2 a2 (tuple2 b1 a1)) (Tuple2 a2 (tuple2 b1 a1) x (t2tb38 y))
  (range_substraction (tuple2 b1 a1) a2 p (t2tb37 t)))
  (and (mem (tuple2 a2 (tuple2 b1 a1))
  (Tuple2 a2 (tuple2 b1 a1) x (t2tb38 y)) p) (not (mem5 y t)))))))

;; mem_range_substraction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (tuple21 a b))) (x uni) (y (tuple21 a b)))
  (= (mem (tuple2 a2 (tuple2 a1 b1)) (Tuple2 a2 (tuple2 a1 b1) x (t2tb13 y))
  (range_substraction (tuple2 a1 b1) a2 p (t2tb11 t)))
  (and (mem (tuple2 a2 (tuple2 a1 b1))
  (Tuple2 a2 (tuple2 a1 b1) x (t2tb13 y)) p) (not (mem3 y t)))))))

;; mem_range_substraction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set b)) (x uni) (y b))
  (= (mem (tuple2 a2 b1) (Tuple2 a2 b1 x (t2tb14 y))
  (range_substraction b1 a2 p (t2tb12 t)))
  (and (mem (tuple2 a2 b1) (Tuple2 a2 b1 x (t2tb14 y)) p) (not (mem2 y t)))))))

;; mem_range_substraction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set a)) (x uni) (y a))
  (= (mem (tuple2 a2 a1) (Tuple2 a2 a1 x (t2tb2 y))
  (range_substraction a1 a2 p (t2tb1 t)))
  (and (mem (tuple2 a2 a1) (Tuple2 a2 a1 x (t2tb2 y)) p) (not (mem1 y t)))))))

;; mem_range_substraction
  (assert
  (forall ((p (set (tuple21 b a))) (t (set a)) (x b) (y a))
  (= (mem5 (tb2t38 (Tuple2 b1 a1 (t2tb14 x) (t2tb2 y)))
  (range_substraction2 p t))
  (and (mem5 (tb2t38 (Tuple2 b1 a1 (t2tb14 x) (t2tb2 y))) p)
  (not (mem1 y t))))))

;; mem_range_substraction
  (assert
  (forall ((p (set (tuple21 a b))) (t (set b)) (x a) (y b))
  (= (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y)))
  (range_substraction1 p t))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y))) p)
  (not (mem2 y t))))))

;; mem_range_substraction
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((p uni) (t uni) (x uni) (y uni))
  (= (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) (range_substraction b2 a2 p t))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) p) (not (mem b2 y t)))))))

(declare-fun image (ty ty uni uni) uni)

;; image_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 b2) (image b2 a2 x x1)))))

(declare-fun image2 ((set (tuple21 b a)) (set b)) (set a))

(declare-fun image1 ((set (tuple21 a b)) (set a)) (set b))

;; mem_image
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (w uni) (x (set (tuple21 b a))))
  (and
  (=> (mem6 x (tb2t56 (image (set1 (tuple2 b1 a1)) a2 p w)))
  (exists ((a3 uni))
  (and (sort a2 a3)
  (and (mem a2 a3 w) (mem (tuple2 a2 (set1 (tuple2 b1 a1)))
  (Tuple2 a2 (set1 (tuple2 b1 a1)) a3 (t2tb37 x)) p)))))
  (=>
  (exists ((a3 uni))
  (and (mem a2 a3 w) (mem (tuple2 a2 (set1 (tuple2 b1 a1)))
  (Tuple2 a2 (set1 (tuple2 b1 a1)) a3 (t2tb37 x)) p))) (mem6 x
  (tb2t56 (image (set1 (tuple2 b1 a1)) a2 p w))))))))

;; mem_image
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (w uni) (x (tuple21 b a)))
  (and
  (=> (mem5 x (tb2t37 (image (tuple2 b1 a1) a2 p w)))
  (exists ((a3 uni))
  (and (sort a2 a3)
  (and (mem a2 a3 w) (mem (tuple2 a2 (tuple2 b1 a1))
  (Tuple2 a2 (tuple2 b1 a1) a3 (t2tb38 x)) p)))))
  (=>
  (exists ((a3 uni))
  (and (mem a2 a3 w) (mem (tuple2 a2 (tuple2 b1 a1))
  (Tuple2 a2 (tuple2 b1 a1) a3 (t2tb38 x)) p))) (mem5 x
  (tb2t37 (image (tuple2 b1 a1) a2 p w))))))))

;; mem_image
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (w uni) (x (tuple21 a b)))
  (and
  (=> (mem3 x (tb2t11 (image (tuple2 a1 b1) a2 p w)))
  (exists ((a3 uni))
  (and (sort a2 a3)
  (and (mem a2 a3 w) (mem (tuple2 a2 (tuple2 a1 b1))
  (Tuple2 a2 (tuple2 a1 b1) a3 (t2tb13 x)) p)))))
  (=>
  (exists ((a3 uni))
  (and (mem a2 a3 w) (mem (tuple2 a2 (tuple2 a1 b1))
  (Tuple2 a2 (tuple2 a1 b1) a3 (t2tb13 x)) p))) (mem3 x
  (tb2t11 (image (tuple2 a1 b1) a2 p w))))))))

;; mem_image
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (w uni) (x b))
  (and
  (=> (mem2 x (tb2t12 (image b1 a2 p w)))
  (exists ((a3 uni))
  (and (sort a2 a3)
  (and (mem a2 a3 w) (mem (tuple2 a2 b1) (Tuple2 a2 b1 a3 (t2tb14 x)) p)))))
  (=>
  (exists ((a3 uni))
  (and (mem a2 a3 w) (mem (tuple2 a2 b1) (Tuple2 a2 b1 a3 (t2tb14 x)) p)))
  (mem2 x (tb2t12 (image b1 a2 p w))))))))

;; mem_image
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (w uni) (x a))
  (and
  (=> (mem1 x (tb2t1 (image a1 a2 p w)))
  (exists ((a3 uni))
  (and (sort a2 a3)
  (and (mem a2 a3 w) (mem (tuple2 a2 a1) (Tuple2 a2 a1 a3 (t2tb2 x)) p)))))
  (=>
  (exists ((a3 uni))
  (and (mem a2 a3 w) (mem (tuple2 a2 a1) (Tuple2 a2 a1 a3 (t2tb2 x)) p)))
  (mem1 x (tb2t1 (image a1 a2 p w))))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 b a)) (set (tuple21 b a)))))
  (w (set (set (tuple21 b a)))) (x (set (tuple21 b a))))
  (= (mem6 x
  (tb2t56
  (image (set1 (tuple2 b1 a1)) (set1 (tuple2 b1 a1)) (t2tb1944 p) (t2tb56 w))))
  (exists ((a2 (set (tuple21 b a))))
  (and (mem6 a2 w) (mem (tuple2 (set1 (tuple2 b1 a1)) (set1 (tuple2 b1 a1)))
  (Tuple2 (set1 (tuple2 b1 a1)) (set1 (tuple2 b1 a1)) (t2tb37 a2) (t2tb37 x))
  (t2tb1944 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 b a)) (tuple21 b a))))
  (w (set (set (tuple21 b a)))) (x (tuple21 b a)))
  (= (mem5 x
  (tb2t37
  (image (tuple2 b1 a1) (set1 (tuple2 b1 a1)) (t2tb1946 p) (t2tb56 w))))
  (exists ((a2 (set (tuple21 b a))))
  (and (mem6 a2 w) (mem (tuple2 (set1 (tuple2 b1 a1)) (tuple2 b1 a1))
  (Tuple2 (set1 (tuple2 b1 a1)) (tuple2 b1 a1) (t2tb37 a2) (t2tb38 x))
  (t2tb1946 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 b a)) (tuple21 a b))))
  (w (set (set (tuple21 b a)))) (x (tuple21 a b)))
  (= (mem3 x
  (tb2t11
  (image (tuple2 a1 b1) (set1 (tuple2 b1 a1)) (t2tb1948 p) (t2tb56 w))))
  (exists ((a2 (set (tuple21 b a))))
  (and (mem6 a2 w) (mem (tuple2 (set1 (tuple2 b1 a1)) (tuple2 a1 b1))
  (Tuple2 (set1 (tuple2 b1 a1)) (tuple2 a1 b1) (t2tb37 a2) (t2tb13 x))
  (t2tb1948 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 b a)) b))) (w (set (set (tuple21 b
  a)))) (x b))
  (= (mem2 x
  (tb2t12 (image b1 (set1 (tuple2 b1 a1)) (t2tb1950 p) (t2tb56 w))))
  (exists ((a2 (set (tuple21 b a))))
  (and (mem6 a2 w) (mem (tuple2 (set1 (tuple2 b1 a1)) b1)
  (Tuple2 (set1 (tuple2 b1 a1)) b1 (t2tb37 a2) (t2tb14 x)) (t2tb1950 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 b a)) a))) (w (set (set (tuple21 b
  a)))) (x a))
  (= (mem1 x
  (tb2t1 (image a1 (set1 (tuple2 b1 a1)) (t2tb1952 p) (t2tb56 w))))
  (exists ((a2 (set (tuple21 b a))))
  (and (mem6 a2 w) (mem (tuple2 (set1 (tuple2 b1 a1)) a1)
  (Tuple2 (set1 (tuple2 b1 a1)) a1 (t2tb37 a2) (t2tb2 x)) (t2tb1952 p)))))))

;; mem_image
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (w (set (set (tuple21 b a)))) (x uni))
  (= (mem b2 x (image b2 (set1 (tuple2 b1 a1)) p (t2tb56 w)))
  (exists ((a2 (set (tuple21 b a))))
  (and (mem6 a2 w) (mem (tuple2 (set1 (tuple2 b1 a1)) b2)
  (Tuple2 (set1 (tuple2 b1 a1)) b2 (t2tb37 a2) x) p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 b a) (set (tuple21 b a)))))
  (w (set (tuple21 b a))) (x (set (tuple21 b a))))
  (= (mem6 x
  (tb2t56
  (image (set1 (tuple2 b1 a1)) (tuple2 b1 a1) (t2tb1954 p) (t2tb37 w))))
  (exists ((a2 (tuple21 b a)))
  (and (mem5 a2 w) (mem (tuple2 (tuple2 b1 a1) (set1 (tuple2 b1 a1)))
  (Tuple2 (tuple2 b1 a1) (set1 (tuple2 b1 a1)) (t2tb38 a2) (t2tb37 x))
  (t2tb1954 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 b a) (tuple21 b a)))) (w (set (tuple21 b
  a))) (x (tuple21 b a)))
  (= (mem5 x
  (tb2t37 (image (tuple2 b1 a1) (tuple2 b1 a1) (t2tb1057 p) (t2tb37 w))))
  (exists ((a2 (tuple21 b a)))
  (and (mem5 a2 w) (mem (tuple2 (tuple2 b1 a1) (tuple2 b1 a1))
  (Tuple2 (tuple2 b1 a1) (tuple2 b1 a1) (t2tb38 a2) (t2tb38 x))
  (t2tb1057 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 b a) (tuple21 a b)))) (w (set (tuple21 b
  a))) (x (tuple21 a b)))
  (= (mem3 x
  (tb2t11 (image (tuple2 a1 b1) (tuple2 b1 a1) (t2tb1061 p) (t2tb37 w))))
  (exists ((a2 (tuple21 b a)))
  (and (mem5 a2 w) (mem (tuple2 (tuple2 b1 a1) (tuple2 a1 b1))
  (Tuple2 (tuple2 b1 a1) (tuple2 a1 b1) (t2tb38 a2) (t2tb13 x))
  (t2tb1061 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 b a) b))) (w (set (tuple21 b a))) (x b))
  (= (mem2 x (tb2t12 (image b1 (tuple2 b1 a1) (t2tb1063 p) (t2tb37 w))))
  (exists ((a2 (tuple21 b a)))
  (and (mem5 a2 w) (mem (tuple2 (tuple2 b1 a1) b1)
  (Tuple2 (tuple2 b1 a1) b1 (t2tb38 a2) (t2tb14 x)) (t2tb1063 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 b a) a))) (w (set (tuple21 b a))) (x a))
  (= (mem1 x (tb2t1 (image a1 (tuple2 b1 a1) (t2tb1065 p) (t2tb37 w))))
  (exists ((a2 (tuple21 b a)))
  (and (mem5 a2 w) (mem (tuple2 (tuple2 b1 a1) a1)
  (Tuple2 (tuple2 b1 a1) a1 (t2tb38 a2) (t2tb2 x)) (t2tb1065 p)))))))

;; mem_image
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (w (set (tuple21 b a))) (x uni))
  (= (mem b2 x (image b2 (tuple2 b1 a1) p (t2tb37 w)))
  (exists ((a2 (tuple21 b a)))
  (and (mem5 a2 w) (mem (tuple2 (tuple2 b1 a1) b2)
  (Tuple2 (tuple2 b1 a1) b2 (t2tb38 a2) x) p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) (set (tuple21 b a)))))
  (w (set (tuple21 a b))) (x (set (tuple21 b a))))
  (= (mem6 x
  (tb2t56
  (image (set1 (tuple2 b1 a1)) (tuple2 a1 b1) (t2tb1956 p) (t2tb11 w))))
  (exists ((a2 (tuple21 a b)))
  (and (mem3 a2 w) (mem (tuple2 (tuple2 a1 b1) (set1 (tuple2 b1 a1)))
  (Tuple2 (tuple2 a1 b1) (set1 (tuple2 b1 a1)) (t2tb13 a2) (t2tb37 x))
  (t2tb1956 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) (tuple21 b a)))) (w (set (tuple21 a
  b))) (x (tuple21 b a)))
  (= (mem5 x
  (tb2t37 (image (tuple2 b1 a1) (tuple2 a1 b1) (t2tb1069 p) (t2tb11 w))))
  (exists ((a2 (tuple21 a b)))
  (and (mem3 a2 w) (mem (tuple2 (tuple2 a1 b1) (tuple2 b1 a1))
  (Tuple2 (tuple2 a1 b1) (tuple2 b1 a1) (t2tb13 a2) (t2tb38 x))
  (t2tb1069 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) (tuple21 a b)))) (w (set (tuple21 a
  b))) (x (tuple21 a b)))
  (= (mem3 x
  (tb2t11 (image (tuple2 a1 b1) (tuple2 a1 b1) (t2tb25 p) (t2tb11 w))))
  (exists ((a2 (tuple21 a b)))
  (and (mem3 a2 w) (mem (tuple2 (tuple2 a1 b1) (tuple2 a1 b1))
  (Tuple2 (tuple2 a1 b1) (tuple2 a1 b1) (t2tb13 a2) (t2tb13 x)) (t2tb25 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) b))) (w (set (tuple21 a b))) (x b))
  (= (mem2 x (tb2t12 (image b1 (tuple2 a1 b1) (t2tb27 p) (t2tb11 w))))
  (exists ((a2 (tuple21 a b)))
  (and (mem3 a2 w) (mem (tuple2 (tuple2 a1 b1) b1)
  (Tuple2 (tuple2 a1 b1) b1 (t2tb13 a2) (t2tb14 x)) (t2tb27 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) a))) (w (set (tuple21 a b))) (x a))
  (= (mem1 x (tb2t1 (image a1 (tuple2 a1 b1) (t2tb29 p) (t2tb11 w))))
  (exists ((a2 (tuple21 a b)))
  (and (mem3 a2 w) (mem (tuple2 (tuple2 a1 b1) a1)
  (Tuple2 (tuple2 a1 b1) a1 (t2tb13 a2) (t2tb2 x)) (t2tb29 p)))))))

;; mem_image
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (w (set (tuple21 a b))) (x uni))
  (= (mem b2 x (image b2 (tuple2 a1 b1) p (t2tb11 w)))
  (exists ((a2 (tuple21 a b)))
  (and (mem3 a2 w) (mem (tuple2 (tuple2 a1 b1) b2)
  (Tuple2 (tuple2 a1 b1) b2 (t2tb13 a2) x) p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 b (set (tuple21 b a))))) (w (set b))
  (x (set (tuple21 b a))))
  (= (mem6 x
  (tb2t56 (image (set1 (tuple2 b1 a1)) b1 (t2tb1958 p) (t2tb12 w))))
  (exists ((a2 b))
  (and (mem2 a2 w) (mem (tuple2 b1 (set1 (tuple2 b1 a1)))
  (Tuple2 b1 (set1 (tuple2 b1 a1)) (t2tb14 a2) (t2tb37 x)) (t2tb1958 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 b (tuple21 b a)))) (w (set b)) (x (tuple21 b a)))
  (= (mem5 x (tb2t37 (image (tuple2 b1 a1) b1 (t2tb1071 p) (t2tb12 w))))
  (exists ((a2 b))
  (and (mem2 a2 w) (mem (tuple2 b1 (tuple2 b1 a1))
  (Tuple2 b1 (tuple2 b1 a1) (t2tb14 a2) (t2tb38 x)) (t2tb1071 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 b (tuple21 a b)))) (w (set b)) (x (tuple21 a b)))
  (= (mem3 x (tb2t11 (image (tuple2 a1 b1) b1 (t2tb34 p) (t2tb12 w))))
  (exists ((a2 b))
  (and (mem2 a2 w) (mem (tuple2 b1 (tuple2 a1 b1))
  (Tuple2 b1 (tuple2 a1 b1) (t2tb14 a2) (t2tb13 x)) (t2tb34 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 b b))) (w (set b)) (x b))
  (= (mem2 x (tb2t12 (image b1 b1 (t2tb35 p) (t2tb12 w))))
  (exists ((a2 b))
  (and (mem2 a2 w) (mem (tuple2 b1 b1) (Tuple2 b1 b1 (t2tb14 a2) (t2tb14 x))
  (t2tb35 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 b a))) (w (set b)) (x a))
  (= (mem1 x (image2 p w))
  (exists ((a2 b))
  (and (mem2 a2 w) (mem5 (tb2t38 (Tuple2 b1 a1 (t2tb14 a2) (t2tb2 x))) p))))))

;; mem_image
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (w (set b)) (x uni))
  (= (mem b2 x (image b2 b1 p (t2tb12 w)))
  (exists ((a2 b))
  (and (mem2 a2 w) (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 a2) x) p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 a (set (tuple21 b a))))) (w (set a))
  (x (set (tuple21 b a))))
  (= (mem6 x
  (tb2t56 (image (set1 (tuple2 b1 a1)) a1 (t2tb1960 p) (t2tb1 w))))
  (exists ((a2 a))
  (and (mem1 a2 w) (mem (tuple2 a1 (set1 (tuple2 b1 a1)))
  (Tuple2 a1 (set1 (tuple2 b1 a1)) (t2tb2 a2) (t2tb37 x)) (t2tb1960 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 a (tuple21 b a)))) (w (set a)) (x (tuple21 b a)))
  (= (mem5 x (tb2t37 (image (tuple2 b1 a1) a1 (t2tb1073 p) (t2tb1 w))))
  (exists ((a2 a))
  (and (mem1 a2 w) (mem (tuple2 a1 (tuple2 b1 a1))
  (Tuple2 a1 (tuple2 b1 a1) (t2tb2 a2) (t2tb38 x)) (t2tb1073 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 a (tuple21 a b)))) (w (set a)) (x (tuple21 a b)))
  (= (mem3 x (tb2t11 (image (tuple2 a1 b1) a1 (t2tb41 p) (t2tb1 w))))
  (exists ((a2 a))
  (and (mem1 a2 w) (mem (tuple2 a1 (tuple2 a1 b1))
  (Tuple2 a1 (tuple2 a1 b1) (t2tb2 a2) (t2tb13 x)) (t2tb41 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 a b))) (w (set a)) (x b))
  (= (mem2 x (image1 p w))
  (exists ((a2 a))
  (and (mem1 a2 w) (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 a2) (t2tb14 x))) p))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 a a))) (w (set a)) (x a))
  (= (mem1 x (tb2t1 (image a1 a1 (t2tb4 p) (t2tb1 w))))
  (exists ((a2 a))
  (and (mem1 a2 w) (mem (tuple2 a1 a1) (Tuple2 a1 a1 (t2tb2 a2) (t2tb2 x))
  (t2tb4 p)))))))

;; mem_image
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (w (set a)) (x uni))
  (= (mem b2 x (image b2 a1 p (t2tb1 w)))
  (exists ((a2 a))
  (and (mem1 a2 w) (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 a2) x) p)))))))

;; mem_image
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((p uni) (w uni) (x uni))
  (and
  (=> (mem b2 x (image b2 a2 p w))
  (exists ((a3 uni))
  (and (sort a2 a3)
  (and (mem a2 a3 w) (mem (tuple2 a2 b2) (Tuple2 a2 b2 a3 x) p)))))
  (=>
  (exists ((a3 uni))
  (and (mem a2 a3 w) (mem (tuple2 a2 b2) (Tuple2 a2 b2 a3 x) p))) (mem b2 x
  (image b2 a2 p w)))))))

(declare-fun infix_lspl (ty ty uni uni) uni)

;; infix <+_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (tuple2 a2 b2))
  (infix_lspl b2 a2 x x1)))))

;; mem_overriding
  (assert
  (forall ((b2 ty))
  (forall ((q uni) (p uni) (x (set (tuple21 b a))) (y uni))
  (= (mem (tuple2 (set1 (tuple2 b1 a1)) b2)
  (Tuple2 (set1 (tuple2 b1 a1)) b2 (t2tb37 x) y)
  (infix_lspl b2 (set1 (tuple2 b1 a1)) q p))
  (or
  (and (mem (tuple2 (set1 (tuple2 b1 a1)) b2)
  (Tuple2 (set1 (tuple2 b1 a1)) b2 (t2tb37 x) y) q)
  (not (mem6 x (tb2t56 (dom b2 (set1 (tuple2 b1 a1)) p))))) (mem
  (tuple2 (set1 (tuple2 b1 a1)) b2)
  (Tuple2 (set1 (tuple2 b1 a1)) b2 (t2tb37 x) y) p))))))

;; mem_overriding
  (assert
  (forall ((b2 ty))
  (forall ((q uni) (p uni) (x (tuple21 b a)) (y uni))
  (= (mem (tuple2 (tuple2 b1 a1) b2) (Tuple2 (tuple2 b1 a1) b2 (t2tb38 x) y)
  (infix_lspl b2 (tuple2 b1 a1) q p))
  (or
  (and (mem (tuple2 (tuple2 b1 a1) b2)
  (Tuple2 (tuple2 b1 a1) b2 (t2tb38 x) y) q)
  (not (mem5 x (tb2t37 (dom b2 (tuple2 b1 a1) p))))) (mem
  (tuple2 (tuple2 b1 a1) b2) (Tuple2 (tuple2 b1 a1) b2 (t2tb38 x) y) p))))))

;; mem_overriding
  (assert
  (forall ((b2 ty))
  (forall ((q uni) (p uni) (x (tuple21 a b)) (y uni))
  (= (mem (tuple2 (tuple2 a1 b1) b2) (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) y)
  (infix_lspl b2 (tuple2 a1 b1) q p))
  (or
  (and (mem (tuple2 (tuple2 a1 b1) b2)
  (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) y) q)
  (not (mem3 x (tb2t11 (dom b2 (tuple2 a1 b1) p))))) (mem
  (tuple2 (tuple2 a1 b1) b2) (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) y) p))))))

;; mem_overriding
  (assert
  (forall ((q (set (tuple21 b a))) (p (set (tuple21 b a))) (x b) (y a))
  (= (mem5 (tb2t38 (Tuple2 b1 a1 (t2tb14 x) (t2tb2 y)))
  (tb2t37 (infix_lspl a1 b1 (t2tb37 q) (t2tb37 p))))
  (or
  (and (mem5 (tb2t38 (Tuple2 b1 a1 (t2tb14 x) (t2tb2 y))) q)
  (not (mem2 x (tb2t12 (dom a1 b1 (t2tb37 p)))))) (mem5
  (tb2t38 (Tuple2 b1 a1 (t2tb14 x) (t2tb2 y))) p)))))

;; mem_overriding
  (assert
  (forall ((b2 ty))
  (forall ((q uni) (p uni) (x b) (y uni))
  (= (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) y) (infix_lspl b2 b1 q p))
  (or
  (and (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) y) q)
  (not (mem2 x (tb2t12 (dom b2 b1 p))))) (mem (tuple2 b1 b2)
  (Tuple2 b1 b2 (t2tb14 x) y) p))))))

;; mem_overriding
  (assert
  (forall ((q (set (tuple21 a b))) (p (set (tuple21 a b))) (x a) (y b))
  (= (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y)))
  (tb2t11 (infix_lspl b1 a1 (t2tb11 q) (t2tb11 p))))
  (or
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y))) q)
  (not (mem1 x (tb2t1 (dom b1 a1 (t2tb11 p)))))) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y))) p)))))

;; mem_overriding
  (assert
  (forall ((b2 ty))
  (forall ((q uni) (p uni) (x a) (y uni))
  (= (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) y) (infix_lspl b2 a1 q p))
  (or
  (and (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) y) q)
  (not (mem1 x (tb2t1 (dom b2 a1 p))))) (mem (tuple2 a1 b2)
  (Tuple2 a1 b2 (t2tb2 x) y) p))))))

;; mem_overriding
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((q uni) (p uni) (x uni) (y uni))
  (= (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) (infix_lspl b2 a2 q p))
  (or
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) q)
  (not (mem a2 x (dom b2 a2 p)))) (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) p))))))

(declare-fun direct_product (ty ty ty uni uni) uni)

;; direct_product_sort
  (assert
  (forall ((a2 ty) (b2 ty) (c2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (tuple2 a2 (tuple2 b2 c2)))
  (direct_product c2 b2 a2 x x1)))))

;; mem_direct_product
  (assert
  (forall ((b2 ty))
  (forall ((f2 uni) (g (set (tuple21 b a))) (x b) (y uni) (z a))
  (= (mem (tuple2 b1 (tuple2 b2 a1))
  (Tuple2 b1 (tuple2 b2 a1) (t2tb14 x) (Tuple2 b2 a1 y (t2tb2 z)))
  (direct_product a1 b2 b1 f2 (t2tb37 g)))
  (and (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) y) f2) (mem5
  (tb2t38 (Tuple2 b1 a1 (t2tb14 x) (t2tb2 z))) g))))))

(declare-fun t2tb1084 ((set (tuple21 b (tuple21 a a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 b (tuple21 a a))))) (sort
  (set1 (tuple2 b1 (tuple2 a1 a1))) (t2tb1084 x))))

(declare-fun tb2t1084 (uni) (set (tuple21 b (tuple21 a a))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 b (tuple21 a a)))))
  (! (= (tb2t1084 (t2tb1084 i)) i) :pattern ((t2tb1084 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 b1 (tuple2 a1 a1))) j)
     (= (t2tb1084 (tb2t1084 j)) j)) :pattern ((t2tb1084 (tb2t1084 j))) )))

(declare-fun t2tb1085 ((tuple21 b (tuple21 a a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 b (tuple21 a a)))) (sort (tuple2 b1 (tuple2 a1 a1))
  (t2tb1085 x))))

(declare-fun tb2t1085 (uni) (tuple21 b (tuple21 a a)))

;; BridgeL
  (assert
  (forall ((i (tuple21 b (tuple21 a a))))
  (! (= (tb2t1085 (t2tb1085 i)) i) :pattern ((t2tb1085 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 b1 (tuple2 a1 a1)) j) (= (t2tb1085 (tb2t1085 j)) j)) :pattern (
  (t2tb1085 (tb2t1085 j))) )))

;; mem_direct_product
  (assert
  (forall ((f2 (set (tuple21 b a))) (g (set (tuple21 b a))) (x b) (y a)
  (z a))
  (= (mem (tuple2 b1 (tuple2 a1 a1))
  (Tuple2 b1 (tuple2 a1 a1) (t2tb14 x) (Tuple2 a1 a1 (t2tb2 y) (t2tb2 z)))
  (direct_product a1 a1 b1 (t2tb37 f2) (t2tb37 g)))
  (and (mem5 (tb2t38 (Tuple2 b1 a1 (t2tb14 x) (t2tb2 y))) f2) (mem5
  (tb2t38 (Tuple2 b1 a1 (t2tb14 x) (t2tb2 z))) g)))))

;; mem_direct_product
  (assert
  (forall ((c2 ty))
  (forall ((f2 (set (tuple21 b a))) (g uni) (x b) (y a) (z uni))
  (= (mem (tuple2 b1 (tuple2 a1 c2))
  (Tuple2 b1 (tuple2 a1 c2) (t2tb14 x) (Tuple2 a1 c2 (t2tb2 y) z))
  (direct_product c2 a1 b1 (t2tb37 f2) g))
  (and (mem5 (tb2t38 (Tuple2 b1 a1 (t2tb14 x) (t2tb2 y))) f2) (mem
  (tuple2 b1 c2) (Tuple2 b1 c2 (t2tb14 x) z) g))))))

;; mem_direct_product
  (assert
  (forall ((b2 ty))
  (forall ((f2 uni) (g (set (tuple21 a b))) (x a) (y uni) (z b))
  (= (mem (tuple2 a1 (tuple2 b2 b1))
  (Tuple2 a1 (tuple2 b2 b1) (t2tb2 x) (Tuple2 b2 b1 y (t2tb14 z)))
  (direct_product b1 b2 a1 f2 (t2tb11 g)))
  (and (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) y) f2) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 z))) g))))))

(declare-fun t2tb59 ((set (tuple21 a (tuple21 b b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (tuple21 b b))))) (sort
  (set1 (tuple2 a1 (tuple2 b1 b1))) (t2tb59 x))))

(declare-fun tb2t59 (uni) (set (tuple21 a (tuple21 b b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (tuple21 b b)))))
  (! (= (tb2t59 (t2tb59 i)) i) :pattern ((t2tb59 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (tuple2 b1 b1))) j)
     (= (t2tb59 (tb2t59 j)) j)) :pattern ((t2tb59 (tb2t59 j))) )))

(declare-fun t2tb60 ((tuple21 a (tuple21 b b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (tuple21 b b)))) (sort (tuple2 a1 (tuple2 b1 b1))
  (t2tb60 x))))

(declare-fun tb2t60 (uni) (tuple21 a (tuple21 b b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (tuple21 b b))))
  (! (= (tb2t60 (t2tb60 i)) i) :pattern ((t2tb60 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (tuple2 b1 b1)) j) (= (t2tb60 (tb2t60 j)) j)) :pattern (
  (t2tb60 (tb2t60 j))) )))

;; mem_direct_product
  (assert
  (forall ((f2 (set (tuple21 a b))) (g (set (tuple21 a b))) (x a) (y b)
  (z b))
  (= (mem (tuple2 a1 (tuple2 b1 b1))
  (Tuple2 a1 (tuple2 b1 b1) (t2tb2 x) (Tuple2 b1 b1 (t2tb14 y) (t2tb14 z)))
  (direct_product b1 b1 a1 (t2tb11 f2) (t2tb11 g)))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y))) f2) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 z))) g)))))

;; mem_direct_product
  (assert
  (forall ((c2 ty))
  (forall ((f2 (set (tuple21 a b))) (g uni) (x a) (y b) (z uni))
  (= (mem (tuple2 a1 (tuple2 b1 c2))
  (Tuple2 a1 (tuple2 b1 c2) (t2tb2 x) (Tuple2 b1 c2 (t2tb14 y) z))
  (direct_product c2 b1 a1 (t2tb11 f2) g))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y))) f2) (mem
  (tuple2 a1 c2) (Tuple2 a1 c2 (t2tb2 x) z) g))))))

;; mem_direct_product
  (assert
  (forall ((a2 ty) (b2 ty) (c2 ty))
  (forall ((f2 uni) (g uni) (x uni) (y uni) (z uni))
  (= (mem (tuple2 a2 (tuple2 b2 c2))
  (Tuple2 a2 (tuple2 b2 c2) x (Tuple2 b2 c2 y z))
  (direct_product c2 b2 a2 f2 g))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) f2) (mem (tuple2 a2 c2)
  (Tuple2 a2 c2 x z) g))))))

(declare-fun prj1 (ty ty uni) uni)

;; prj1_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni)) (sort (set1 (tuple2 (tuple2 a2 b2) a2)) (prj1 b2 a2 x)))))

;; mem_proj_op_1
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (x uni) (y uni) (z uni))
  (=> (sort a2 x)
  (=> (sort a2 z)
  (= (mem (tuple2 (tuple2 a2 b2) a2)
  (Tuple2 (tuple2 a2 b2) a2 (Tuple2 a2 b2 x y) z)
  (prj1 b2 a2 (Tuple2 (set1 a2) (set1 b2) s t)))
  (and (mem (tuple2 (tuple2 a2 b2) a2)
  (Tuple2 (tuple2 a2 b2) a2 (Tuple2 a2 b2 x y) z)
  (times a2 (tuple2 a2 b2) (times b2 a2 s t) s)) (= z x))))))))

(declare-fun prj2 (ty ty uni) uni)

;; prj2_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni)) (sort (set1 (tuple2 (tuple2 a2 b2) b2)) (prj2 b2 a2 x)))))

;; mem_proj_op_2
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (x uni) (y uni) (z uni))
  (=> (sort b2 y)
  (=> (sort b2 z)
  (= (mem (tuple2 (tuple2 a2 b2) b2)
  (Tuple2 (tuple2 a2 b2) b2 (Tuple2 a2 b2 x y) z)
  (prj2 b2 a2 (Tuple2 (set1 a2) (set1 b2) s t)))
  (and (mem (tuple2 (tuple2 a2 b2) b2)
  (Tuple2 (tuple2 a2 b2) b2 (Tuple2 a2 b2 x y) z)
  (times b2 (tuple2 a2 b2) (times b2 a2 s t) t)) (= z y))))))))

(declare-fun parallel_product (ty ty ty ty uni uni) uni)

;; parallel_product_sort
  (assert
  (forall ((a2 ty) (b2 ty) (c2 ty) (d2 ty))
  (forall ((x uni) (x1 uni)) (sort
  (set1 (tuple2 (tuple2 a2 c2) (tuple2 b2 d2)))
  (parallel_product d2 c2 b2 a2 x x1)))))

;; mem_parallel_product
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((h uni) (k (set (tuple21 b a))) (x uni) (y b) (z uni) (w a))
  (= (mem (tuple2 (tuple2 a2 b1) (tuple2 b2 a1))
  (Tuple2 (tuple2 a2 b1) (tuple2 b2 a1) (Tuple2 a2 b1 x (t2tb14 y))
  (Tuple2 b2 a1 z (t2tb2 w))) (parallel_product a1 b1 b2 a2 h (t2tb37 k)))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x z) h) (mem5
  (tb2t38 (Tuple2 b1 a1 (t2tb14 y) (t2tb2 w))) k))))))

;; mem_parallel_product
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((h uni) (k (set (tuple21 a b))) (x uni) (y a) (z uni) (w b))
  (= (mem (tuple2 (tuple2 a2 a1) (tuple2 b2 b1))
  (Tuple2 (tuple2 a2 a1) (tuple2 b2 b1) (Tuple2 a2 a1 x (t2tb2 y))
  (Tuple2 b2 b1 z (t2tb14 w))) (parallel_product b1 a1 b2 a2 h (t2tb11 k)))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x z) h) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 y) (t2tb14 w))) k))))))

(declare-fun t2tb1086 ((set (tuple21 (tuple21 b b) (tuple21 a a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b b) (tuple21 a a))))) (sort
  (set1 (tuple2 (tuple2 b1 b1) (tuple2 a1 a1))) (t2tb1086 x))))

(declare-fun tb2t1086 (uni) (set (tuple21 (tuple21 b b) (tuple21 a a))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b b) (tuple21 a a)))))
  (! (= (tb2t1086 (t2tb1086 i)) i) :pattern ((t2tb1086 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 b1) (tuple2 a1 a1))) j)
     (= (t2tb1086 (tb2t1086 j)) j)) :pattern ((t2tb1086 (tb2t1086 j))) )))

(declare-fun t2tb1087 ((tuple21 (tuple21 b b) (tuple21 a a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b b) (tuple21 a a)))) (sort
  (tuple2 (tuple2 b1 b1) (tuple2 a1 a1)) (t2tb1087 x))))

(declare-fun tb2t1087 (uni) (tuple21 (tuple21 b b) (tuple21 a a)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b b) (tuple21 a a))))
  (! (= (tb2t1087 (t2tb1087 i)) i) :pattern ((t2tb1087 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 b1) (tuple2 a1 a1)) j)
     (= (t2tb1087 (tb2t1087 j)) j)) :pattern ((t2tb1087 (tb2t1087 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 b a))) (k (set (tuple21 b a))) (x b) (y b) (z a)
  (w a))
  (= (mem (tuple2 (tuple2 b1 b1) (tuple2 a1 a1))
  (Tuple2 (tuple2 b1 b1) (tuple2 a1 a1) (Tuple2 b1 b1 (t2tb14 x) (t2tb14 y))
  (Tuple2 a1 a1 (t2tb2 z) (t2tb2 w)))
  (parallel_product a1 b1 a1 b1 (t2tb37 h) (t2tb37 k)))
  (and (mem5 (tb2t38 (Tuple2 b1 a1 (t2tb14 x) (t2tb2 z))) h) (mem5
  (tb2t38 (Tuple2 b1 a1 (t2tb14 y) (t2tb2 w))) k)))))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 b a))) (k (set (tuple21 a b))) (x b) (y a) (z a)
  (w b))
  (= (mem (tuple2 (tuple2 b1 a1) (tuple2 a1 b1))
  (Tuple2 (tuple2 b1 a1) (tuple2 a1 b1) (Tuple2 b1 a1 (t2tb14 x) (t2tb2 y))
  (Tuple2 a1 b1 (t2tb2 z) (t2tb14 w)))
  (parallel_product b1 a1 a1 b1 (t2tb37 h) (t2tb11 k)))
  (and (mem5 (tb2t38 (Tuple2 b1 a1 (t2tb14 x) (t2tb2 z))) h) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 y) (t2tb14 w))) k)))))

;; mem_parallel_product
  (assert
  (forall ((c2 ty) (d2 ty))
  (forall ((h (set (tuple21 b a))) (k uni) (x b) (y uni) (z a) (w uni))
  (= (mem (tuple2 (tuple2 b1 c2) (tuple2 a1 d2))
  (Tuple2 (tuple2 b1 c2) (tuple2 a1 d2) (Tuple2 b1 c2 (t2tb14 x) y)
  (Tuple2 a1 d2 (t2tb2 z) w)) (parallel_product d2 c2 a1 b1 (t2tb37 h) k))
  (and (mem5 (tb2t38 (Tuple2 b1 a1 (t2tb14 x) (t2tb2 z))) h) (mem
  (tuple2 c2 d2) (Tuple2 c2 d2 y w) k))))))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a b))) (k (set (tuple21 b a))) (x a) (y b) (z b)
  (w a))
  (= (mem (tuple2 (tuple2 a1 b1) (tuple2 b1 a1))
  (Tuple2 (tuple2 a1 b1) (tuple2 b1 a1) (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y))
  (Tuple2 b1 a1 (t2tb14 z) (t2tb2 w)))
  (parallel_product a1 b1 b1 a1 (t2tb11 h) (t2tb37 k)))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 z))) h) (mem5
  (tb2t38 (Tuple2 b1 a1 (t2tb14 y) (t2tb2 w))) k)))))

(declare-fun t2tb61 ((set (tuple21 (tuple21 a a) (tuple21 b b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a a) (tuple21 b b))))) (sort
  (set1 (tuple2 (tuple2 a1 a1) (tuple2 b1 b1))) (t2tb61 x))))

(declare-fun tb2t61 (uni) (set (tuple21 (tuple21 a a) (tuple21 b b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a a) (tuple21 b b)))))
  (! (= (tb2t61 (t2tb61 i)) i) :pattern ((t2tb61 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 a1) (tuple2 b1 b1))) j)
     (= (t2tb61 (tb2t61 j)) j)) :pattern ((t2tb61 (tb2t61 j))) )))

(declare-fun t2tb62 ((tuple21 (tuple21 a a) (tuple21 b b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a a) (tuple21 b b)))) (sort
  (tuple2 (tuple2 a1 a1) (tuple2 b1 b1)) (t2tb62 x))))

(declare-fun tb2t62 (uni) (tuple21 (tuple21 a a) (tuple21 b b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a a) (tuple21 b b))))
  (! (= (tb2t62 (t2tb62 i)) i) :pattern ((t2tb62 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 a1) (tuple2 b1 b1)) j)
     (= (t2tb62 (tb2t62 j)) j)) :pattern ((t2tb62 (tb2t62 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a b))) (k (set (tuple21 a b))) (x a) (y a) (z b)
  (w b))
  (= (mem (tuple2 (tuple2 a1 a1) (tuple2 b1 b1))
  (Tuple2 (tuple2 a1 a1) (tuple2 b1 b1) (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y))
  (Tuple2 b1 b1 (t2tb14 z) (t2tb14 w)))
  (parallel_product b1 a1 b1 a1 (t2tb11 h) (t2tb11 k)))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 z))) h) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 y) (t2tb14 w))) k)))))

;; mem_parallel_product
  (assert
  (forall ((c2 ty) (d2 ty))
  (forall ((h (set (tuple21 a b))) (k uni) (x a) (y uni) (z b) (w uni))
  (= (mem (tuple2 (tuple2 a1 c2) (tuple2 b1 d2))
  (Tuple2 (tuple2 a1 c2) (tuple2 b1 d2) (Tuple2 a1 c2 (t2tb2 x) y)
  (Tuple2 b1 d2 (t2tb14 z) w)) (parallel_product d2 c2 b1 a1 (t2tb11 h) k))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 z))) h) (mem
  (tuple2 c2 d2) (Tuple2 c2 d2 y w) k))))))

;; mem_parallel_product
  (assert
  (forall ((a2 ty) (b2 ty) (c2 ty) (d2 ty))
  (forall ((h uni) (k uni) (x uni) (y uni) (z uni) (w uni))
  (= (mem (tuple2 (tuple2 a2 c2) (tuple2 b2 d2))
  (Tuple2 (tuple2 a2 c2) (tuple2 b2 d2) (Tuple2 a2 c2 x y)
  (Tuple2 b2 d2 z w)) (parallel_product d2 c2 b2 a2 h k))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x z) h) (mem (tuple2 c2 d2)
  (Tuple2 c2 d2 y w) k))))))

(declare-fun infix_plmngt (ty ty uni uni) uni)

;; infix +->_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (set1 (tuple2 a2 b2)))
  (infix_plmngt b2 a2 x x1)))))

(declare-fun infix_plmngt2 ((set b) (set a)) (set (set (tuple21 b a))))

;; mem_partial_function_set
  (assert
  (forall ((s (set b)) (t (set a)) (f2 (set (tuple21 b a))))
  (= (mem6 f2 (infix_plmngt2 s t))
  (and (mem6 f2 (tb2t56 (relation a1 b1 (t2tb12 s) (t2tb1 t))))
  (forall ((x b) (y1 a) (y2 a))
  (=>
  (and (mem5 (tb2t38 (Tuple2 b1 a1 (t2tb14 x) (t2tb2 y1))) f2) (mem5
  (tb2t38 (Tuple2 b1 a1 (t2tb14 x) (t2tb2 y2))) f2)) (= y1 y2)))))))

;; mem_partial_function_set
  (assert
  (forall ((s (set a)) (t (set b)) (f2 (set (tuple21 a b))))
  (= (mem (set1 (tuple2 a1 b1)) (t2tb11 f2)
  (infix_plmngt b1 a1 (t2tb1 s) (t2tb12 t)))
  (and (mem (set1 (tuple2 a1 b1)) (t2tb11 f2)
  (relation b1 a1 (t2tb1 s) (t2tb12 t)))
  (forall ((x a) (y1 b) (y2 b))
  (=>
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y1))) f2) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y2))) f2)) (= y1 y2)))))))

;; mem_partial_function_set
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (f2 uni))
  (and
  (=> (mem (set1 (tuple2 a2 b2)) f2 (infix_plmngt b2 a2 s t))
  (and (mem (set1 (tuple2 a2 b2)) f2 (relation b2 a2 s t))
  (forall ((x uni) (y1 uni) (y2 uni))
  (=> (sort b2 y1)
  (=> (sort b2 y2)
  (=>
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y1) f2) (mem (tuple2 a2 b2)
  (Tuple2 a2 b2 x y2) f2)) (= y1 y2)))))))
  (=>
  (and (mem (set1 (tuple2 a2 b2)) f2 (relation b2 a2 s t))
  (forall ((x uni) (y1 uni) (y2 uni))
  (=> (sort a2 x)
  (=> (sort b2 y1)
  (=> (sort b2 y2)
  (=>
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y1) f2) (mem (tuple2 a2 b2)
  (Tuple2 a2 b2 x y2) f2)) (= y1 y2))))))) (mem (set1 (tuple2 a2 b2)) f2
  (infix_plmngt b2 a2 s t)))))))

(declare-fun infix_mnmngt (ty ty uni uni) uni)

;; infix -->_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (set1 (tuple2 a2 b2)))
  (infix_mnmngt b2 a2 x x1)))))

;; mem_total_function_set
  (assert
  (forall ((b2 ty))
  (forall ((s (set (set (tuple21 b a)))) (t uni) (x uni))
  (= (mem (set1 (tuple2 (set1 (tuple2 b1 a1)) b2)) x
  (infix_mnmngt b2 (set1 (tuple2 b1 a1)) (t2tb56 s) t))
  (and (mem (set1 (tuple2 (set1 (tuple2 b1 a1)) b2)) x
  (infix_plmngt b2 (set1 (tuple2 b1 a1)) (t2tb56 s) t)) (infix_eqeq21
  (tb2t56 (dom b2 (set1 (tuple2 b1 a1)) x)) s))))))

;; mem_total_function_set
  (assert
  (forall ((b2 ty))
  (forall ((s (set (tuple21 b a))) (t uni) (x uni))
  (= (mem (set1 (tuple2 (tuple2 b1 a1) b2)) x
  (infix_mnmngt b2 (tuple2 b1 a1) (t2tb37 s) t))
  (and (mem (set1 (tuple2 (tuple2 b1 a1) b2)) x
  (infix_plmngt b2 (tuple2 b1 a1) (t2tb37 s) t)) (infix_eqeq6
  (tb2t37 (dom b2 (tuple2 b1 a1) x)) s))))))

;; mem_total_function_set
  (assert
  (forall ((b2 ty))
  (forall ((s (set (tuple21 a b))) (t uni) (x uni))
  (= (mem (set1 (tuple2 (tuple2 a1 b1) b2)) x
  (infix_mnmngt b2 (tuple2 a1 b1) (t2tb11 s) t))
  (and (mem (set1 (tuple2 (tuple2 a1 b1) b2)) x
  (infix_plmngt b2 (tuple2 a1 b1) (t2tb11 s) t)) (infix_eqeq4
  (tb2t11 (dom b2 (tuple2 a1 b1) x)) s))))))

;; mem_total_function_set
  (assert
  (forall ((s (set b)) (t (set a)) (x (set (tuple21 b a))))
  (= (mem6 x (tb2t56 (infix_mnmngt a1 b1 (t2tb12 s) (t2tb1 t))))
  (and (mem6 x (infix_plmngt2 s t)) (infix_eqeq3
  (tb2t12 (dom a1 b1 (t2tb37 x))) s)))))

;; mem_total_function_set
  (assert
  (forall ((b2 ty))
  (forall ((s (set b)) (t uni) (x uni))
  (= (mem (set1 (tuple2 b1 b2)) x (infix_mnmngt b2 b1 (t2tb12 s) t))
  (and (mem (set1 (tuple2 b1 b2)) x (infix_plmngt b2 b1 (t2tb12 s) t))
  (infix_eqeq3 (tb2t12 (dom b2 b1 x)) s))))))

;; mem_total_function_set
  (assert
  (forall ((b2 ty))
  (forall ((s (set a)) (t uni) (x uni))
  (= (mem (set1 (tuple2 a1 b2)) x (infix_mnmngt b2 a1 (t2tb1 s) t))
  (and (mem (set1 (tuple2 a1 b2)) x (infix_plmngt b2 a1 (t2tb1 s) t))
  (infix_eqeq1 (tb2t1 (dom b2 a1 x)) s))))))

;; mem_total_function_set
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (x uni))
  (= (mem (set1 (tuple2 a2 b2)) x (infix_mnmngt b2 a2 s t))
  (and (mem (set1 (tuple2 a2 b2)) x (infix_plmngt b2 a2 s t)) (infix_eqeq a2
  (dom b2 a2 x) s))))))

(declare-fun infix_gtplgt (ty ty uni uni) uni)

;; infix >+>_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (set1 (tuple2 a2 b2)))
  (infix_gtplgt b2 a2 x x1)))))

;; mem_partial_injection_set
  (assert
  (forall ((s (set b)) (t (set a)) (x (set (tuple21 b a))))
  (= (mem6 x (tb2t56 (infix_gtplgt a1 b1 (t2tb12 s) (t2tb1 t))))
  (and (mem6 x (infix_plmngt2 s t)) (mem (set1 (tuple2 a1 b1))
  (t2tb11 (inverse1 x)) (infix_plmngt b1 a1 (t2tb1 t) (t2tb12 s)))))))

;; mem_partial_injection_set
  (assert
  (forall ((s (set a)) (t (set b)) (x (set (tuple21 a b))))
  (= (mem (set1 (tuple2 a1 b1)) (t2tb11 x)
  (infix_gtplgt b1 a1 (t2tb1 s) (t2tb12 t)))
  (and (mem (set1 (tuple2 a1 b1)) (t2tb11 x)
  (infix_plmngt b1 a1 (t2tb1 s) (t2tb12 t))) (mem6 (inverse2 x)
  (infix_plmngt2 t s))))))

;; mem_partial_injection_set
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (x uni))
  (= (mem (set1 (tuple2 a2 b2)) x (infix_gtplgt b2 a2 s t))
  (and (mem (set1 (tuple2 a2 b2)) x (infix_plmngt b2 a2 s t)) (mem
  (set1 (tuple2 b2 a2)) (inverse b2 a2 x) (infix_plmngt a2 b2 t s)))))))

(declare-fun infix_gtmngt (ty ty uni uni) uni)

;; infix >->_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (set1 (tuple2 a2 b2)))
  (infix_gtmngt b2 a2 x x1)))))

;; mem_total_injection_set
  (assert
  (forall ((s (set b)) (t (set a)) (x (set (tuple21 b a))))
  (= (mem6 x (tb2t56 (infix_gtmngt a1 b1 (t2tb12 s) (t2tb1 t))))
  (and (mem6 x (tb2t56 (infix_gtplgt a1 b1 (t2tb12 s) (t2tb1 t)))) (mem6 x
  (tb2t56 (infix_mnmngt a1 b1 (t2tb12 s) (t2tb1 t))))))))

;; mem_total_injection_set
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (x uni))
  (= (mem (set1 (tuple2 a2 b2)) x (infix_gtmngt b2 a2 s t))
  (and (mem (set1 (tuple2 a2 b2)) x (infix_gtplgt b2 a2 s t)) (mem
  (set1 (tuple2 a2 b2)) x (infix_mnmngt b2 a2 s t)))))))

(declare-fun infix_plmngtgt (ty ty uni uni) uni)

;; infix +->>_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (set1 (tuple2 a2 b2)))
  (infix_plmngtgt b2 a2 x x1)))))

;; mem_partial_surjection_set
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set (set (tuple21 b a)))) (x uni))
  (= (mem (set1 (tuple2 a2 (set1 (tuple2 b1 a1)))) x
  (infix_plmngtgt (set1 (tuple2 b1 a1)) a2 s (t2tb56 t)))
  (and (mem (set1 (tuple2 a2 (set1 (tuple2 b1 a1)))) x
  (infix_plmngt (set1 (tuple2 b1 a1)) a2 s (t2tb56 t))) (infix_eqeq21
  (tb2t56 (ran (set1 (tuple2 b1 a1)) a2 x)) t))))))

;; mem_partial_surjection_set
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set (tuple21 b a))) (x uni))
  (= (mem (set1 (tuple2 a2 (tuple2 b1 a1))) x
  (infix_plmngtgt (tuple2 b1 a1) a2 s (t2tb37 t)))
  (and (mem (set1 (tuple2 a2 (tuple2 b1 a1))) x
  (infix_plmngt (tuple2 b1 a1) a2 s (t2tb37 t))) (infix_eqeq6
  (tb2t37 (ran (tuple2 b1 a1) a2 x)) t))))))

;; mem_partial_surjection_set
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set (tuple21 a b))) (x uni))
  (= (mem (set1 (tuple2 a2 (tuple2 a1 b1))) x
  (infix_plmngtgt (tuple2 a1 b1) a2 s (t2tb11 t)))
  (and (mem (set1 (tuple2 a2 (tuple2 a1 b1))) x
  (infix_plmngt (tuple2 a1 b1) a2 s (t2tb11 t))) (infix_eqeq4
  (tb2t11 (ran (tuple2 a1 b1) a2 x)) t))))))

;; mem_partial_surjection_set
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set b)) (x uni))
  (= (mem (set1 (tuple2 a2 b1)) x (infix_plmngtgt b1 a2 s (t2tb12 t)))
  (and (mem (set1 (tuple2 a2 b1)) x (infix_plmngt b1 a2 s (t2tb12 t)))
  (infix_eqeq3 (tb2t12 (ran b1 a2 x)) t))))))

;; mem_partial_surjection_set
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set a)) (x uni))
  (= (mem (set1 (tuple2 a2 a1)) x (infix_plmngtgt a1 a2 s (t2tb1 t)))
  (and (mem (set1 (tuple2 a2 a1)) x (infix_plmngt a1 a2 s (t2tb1 t)))
  (infix_eqeq1 (tb2t1 (ran a1 a2 x)) t))))))

;; mem_partial_surjection_set
  (assert
  (forall ((s (set b)) (t (set a)) (x (set (tuple21 b a))))
  (= (mem6 x (tb2t56 (infix_plmngtgt a1 b1 (t2tb12 s) (t2tb1 t))))
  (and (mem6 x (infix_plmngt2 s t)) (infix_eqeq1
  (tb2t1 (ran a1 b1 (t2tb37 x))) t)))))

;; mem_partial_surjection_set
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (x uni))
  (= (mem (set1 (tuple2 a2 b2)) x (infix_plmngtgt b2 a2 s t))
  (and (mem (set1 (tuple2 a2 b2)) x (infix_plmngt b2 a2 s t)) (infix_eqeq b2
  (ran b2 a2 x) t))))))

(declare-fun infix_mnmngtgt (ty ty uni uni) uni)

;; infix -->>_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (set1 (tuple2 a2 b2)))
  (infix_mnmngtgt b2 a2 x x1)))))

;; mem_total_surjection_set
  (assert
  (forall ((s (set b)) (t (set a)) (x (set (tuple21 b a))))
  (= (mem6 x (tb2t56 (infix_mnmngtgt a1 b1 (t2tb12 s) (t2tb1 t))))
  (and (mem6 x (tb2t56 (infix_plmngtgt a1 b1 (t2tb12 s) (t2tb1 t)))) (mem6 x
  (tb2t56 (infix_mnmngt a1 b1 (t2tb12 s) (t2tb1 t))))))))

;; mem_total_surjection_set
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (x uni))
  (= (mem (set1 (tuple2 a2 b2)) x (infix_mnmngtgt b2 a2 s t))
  (and (mem (set1 (tuple2 a2 b2)) x (infix_plmngtgt b2 a2 s t)) (mem
  (set1 (tuple2 a2 b2)) x (infix_mnmngt b2 a2 s t)))))))

(declare-fun infix_gtplgtgt (ty ty uni uni) uni)

;; infix >+>>_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (set1 (tuple2 a2 b2)))
  (infix_gtplgtgt b2 a2 x x1)))))

;; mem_partial_bijection_set
  (assert
  (forall ((s (set b)) (t (set a)) (x (set (tuple21 b a))))
  (= (mem6 x (tb2t56 (infix_gtplgtgt a1 b1 (t2tb12 s) (t2tb1 t))))
  (and (mem6 x (tb2t56 (infix_gtplgt a1 b1 (t2tb12 s) (t2tb1 t)))) (mem6 x
  (tb2t56 (infix_plmngtgt a1 b1 (t2tb12 s) (t2tb1 t))))))))

;; mem_partial_bijection_set
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (x uni))
  (= (mem (set1 (tuple2 a2 b2)) x (infix_gtplgtgt b2 a2 s t))
  (and (mem (set1 (tuple2 a2 b2)) x (infix_gtplgt b2 a2 s t)) (mem
  (set1 (tuple2 a2 b2)) x (infix_plmngtgt b2 a2 s t)))))))

(declare-fun infix_gtmngtgt (ty ty uni uni) uni)

;; infix >->>_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (set1 (tuple2 a2 b2)))
  (infix_gtmngtgt b2 a2 x x1)))))

;; mem_total_bijection_set
  (assert
  (forall ((s (set b)) (t (set a)) (x (set (tuple21 b a))))
  (= (mem6 x (tb2t56 (infix_gtmngtgt a1 b1 (t2tb12 s) (t2tb1 t))))
  (and (mem6 x (tb2t56 (infix_gtmngt a1 b1 (t2tb12 s) (t2tb1 t)))) (mem6 x
  (tb2t56 (infix_mnmngtgt a1 b1 (t2tb12 s) (t2tb1 t))))))))

;; mem_total_bijection_set
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (x uni))
  (= (mem (set1 (tuple2 a2 b2)) x (infix_gtmngtgt b2 a2 s t))
  (and (mem (set1 (tuple2 a2 b2)) x (infix_gtmngt b2 a2 s t)) (mem
  (set1 (tuple2 a2 b2)) x (infix_mnmngtgt b2 a2 s t)))))))

(declare-fun apply (ty ty uni uni) uni)

;; apply_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort b2 (apply b2 a2 x x1)))))

;; apply_def0
  (assert
  (forall ((b2 ty))
  (forall ((f2 uni) (s (set (set (tuple21 b a)))) (t uni) (a2 (set (tuple21 b
  a))))
  (=>
  (and (mem (set1 (tuple2 (set1 (tuple2 b1 a1)) b2)) f2
  (infix_plmngt b2 (set1 (tuple2 b1 a1)) (t2tb56 s) t)) (mem6 a2
  (tb2t56 (dom b2 (set1 (tuple2 b1 a1)) f2)))) (mem
  (tuple2 (set1 (tuple2 b1 a1)) b2)
  (Tuple2 (set1 (tuple2 b1 a1)) b2 (t2tb37 a2)
  (apply b2 (set1 (tuple2 b1 a1)) f2 (t2tb37 a2))) f2)))))

;; apply_def0
  (assert
  (forall ((b2 ty))
  (forall ((f2 uni) (s (set (tuple21 b a))) (t uni) (a2 (tuple21 b a)))
  (=>
  (and (mem (set1 (tuple2 (tuple2 b1 a1) b2)) f2
  (infix_plmngt b2 (tuple2 b1 a1) (t2tb37 s) t)) (mem5 a2
  (tb2t37 (dom b2 (tuple2 b1 a1) f2)))) (mem (tuple2 (tuple2 b1 a1) b2)
  (Tuple2 (tuple2 b1 a1) b2 (t2tb38 a2)
  (apply b2 (tuple2 b1 a1) f2 (t2tb38 a2))) f2)))))

;; apply_def0
  (assert
  (forall ((b2 ty))
  (forall ((f2 uni) (s (set (tuple21 a b))) (t uni) (a2 (tuple21 a b)))
  (=>
  (and (mem (set1 (tuple2 (tuple2 a1 b1) b2)) f2
  (infix_plmngt b2 (tuple2 a1 b1) (t2tb11 s) t)) (mem3 a2
  (tb2t11 (dom b2 (tuple2 a1 b1) f2)))) (mem (tuple2 (tuple2 a1 b1) b2)
  (Tuple2 (tuple2 a1 b1) b2 (t2tb13 a2)
  (apply b2 (tuple2 a1 b1) f2 (t2tb13 a2))) f2)))))

;; apply_def0
  (assert
  (forall ((f2 (set (tuple21 b a))) (s (set b)) (t (set a)) (a2 b))
  (=>
  (and (mem6 f2 (infix_plmngt2 s t)) (mem2 a2
  (tb2t12 (dom a1 b1 (t2tb37 f2))))) (mem5
  (tb2t38 (Tuple2 b1 a1 (t2tb14 a2) (apply a1 b1 (t2tb37 f2) (t2tb14 a2))))
  f2))))

;; apply_def0
  (assert
  (forall ((b2 ty))
  (forall ((f2 uni) (s (set b)) (t uni) (a2 b))
  (=>
  (and (mem (set1 (tuple2 b1 b2)) f2 (infix_plmngt b2 b1 (t2tb12 s) t)) (mem2
  a2 (tb2t12 (dom b2 b1 f2)))) (mem (tuple2 b1 b2)
  (Tuple2 b1 b2 (t2tb14 a2) (apply b2 b1 f2 (t2tb14 a2))) f2)))))

;; apply_def0
  (assert
  (forall ((f2 (set (tuple21 a b))) (s (set a)) (t (set b)) (a2 a))
  (=>
  (and (mem (set1 (tuple2 a1 b1)) (t2tb11 f2)
  (infix_plmngt b1 a1 (t2tb1 s) (t2tb12 t))) (mem1 a2
  (tb2t1 (dom b1 a1 (t2tb11 f2))))) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 a2) (apply b1 a1 (t2tb11 f2) (t2tb2 a2))))
  f2))))

;; apply_def0
  (assert
  (forall ((b2 ty))
  (forall ((f2 uni) (s (set a)) (t uni) (a2 a))
  (=>
  (and (mem (set1 (tuple2 a1 b2)) f2 (infix_plmngt b2 a1 (t2tb1 s) t)) (mem1
  a2 (tb2t1 (dom b2 a1 f2)))) (mem (tuple2 a1 b2)
  (Tuple2 a1 b2 (t2tb2 a2) (apply b2 a1 f2 (t2tb2 a2))) f2)))))

;; apply_def0
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((f2 uni) (s uni) (t uni) (a3 uni))
  (=>
  (and (mem (set1 (tuple2 a2 b2)) f2 (infix_plmngt b2 a2 s t)) (mem a2 a3
  (dom b2 a2 f2))) (mem (tuple2 a2 b2) (Tuple2 a2 b2 a3 (apply b2 a2 f2 a3))
  f2)))))

(assert
;; equal_substraction_2
 ;; File "lemmes_bbook.why", line 2088, characters 7-27
  (not
  (forall ((s (set a)) (u (set a)) (t (set b)) (r (set (tuple21 a b))))
  (=> (and (subset2 u s) (mem6 (inverse2 r) (infix_plmngt2 t s)))
  (infix_eqeq4 (domain_substraction1 u r)
  (range_substraction1 r (image1 r u)))))))
(check-sat)
