(set-logic AUFBVDTLIRA)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
(declare-sort uni 0)

(declare-sort ty 0)

(declare-fun sort (ty uni) Bool)

(declare-fun witness (ty) uni)

;; witness_sort
  (assert (forall ((a2 ty)) (sort a2 (witness a2))))

(declare-fun int () ty)

(declare-fun real () ty)

(declare-sort set 1)

(declare-fun set1 (ty) ty)

(declare-sort c 0)

(declare-fun c1 () ty)

(declare-sort b 0)

(declare-fun b1 () ty)

(declare-sort a 0)

(declare-fun a1 () ty)

(declare-sort tuple21 2)

(declare-fun tuple2 (ty ty) ty)

(declare-fun mem (ty uni uni) Bool)

(declare-fun mem1 (a (set a)) Bool)

(declare-fun mem2 (b (set b)) Bool)

(declare-fun mem3 ((tuple21 a b) (set (tuple21 a b))) Bool)

(declare-fun mem4 ((set (tuple21 a b)) (set (set (tuple21 a b)))) Bool)

(declare-fun mem7 (c (set c)) Bool)

(declare-fun mem10 ((tuple21 a c) (set (tuple21 a c))) Bool)

(declare-fun mem11 ((set (tuple21 a c)) (set (set (tuple21 a c)))) Bool)

(declare-fun mem14 ((tuple21 a (tuple21 b c)) (set (tuple21 a (tuple21 b
  c)))) Bool)

(declare-fun infix_eqeq (ty uni uni) Bool)

(declare-fun t2tb261 ((set (tuple21 a (tuple21 b c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (tuple21 b c))))) (sort
  (set1 (tuple2 a1 (tuple2 b1 c1))) (t2tb261 x))))

(declare-fun tb2t261 (uni) (set (tuple21 a (tuple21 b c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (tuple21 b c)))))
  (! (= (tb2t261 (t2tb261 i)) i) :pattern ((t2tb261 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (tuple2 b1 c1))) j)
     (= (t2tb261 (tb2t261 j)) j)) :pattern ((t2tb261 (tb2t261 j))) )))

;; infix ==_def
  (assert
  (forall ((s (set (tuple21 a (tuple21 b c)))) (t (set (tuple21 a (tuple21 b
  c)))))
  (= (infix_eqeq (tuple2 a1 (tuple2 b1 c1)) (t2tb261 s) (t2tb261 t))
  (forall ((x (tuple21 a (tuple21 b c)))) (= (mem14 x s) (mem14 x t))))))

(declare-fun t2tb128 ((set (set (tuple21 a c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 a c))))) (sort (set1 (set1 (tuple2 a1 c1)))
  (t2tb128 x))))

(declare-fun tb2t128 (uni) (set (set (tuple21 a c))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 a c)))))
  (! (= (tb2t128 (t2tb128 i)) i) :pattern ((t2tb128 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 a1 c1))) j) (= (t2tb128 (tb2t128 j)) j)) :pattern (
  (t2tb128 (tb2t128 j))) )))

;; infix ==_def
  (assert
  (forall ((s (set (set (tuple21 a c)))) (t (set (set (tuple21 a c)))))
  (= (infix_eqeq (set1 (tuple2 a1 c1)) (t2tb128 s) (t2tb128 t))
  (forall ((x (set (tuple21 a c)))) (= (mem11 x s) (mem11 x t))))))

(declare-fun t2tb129 ((set (tuple21 a c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a c)))) (sort (set1 (tuple2 a1 c1)) (t2tb129 x))))

(declare-fun tb2t129 (uni) (set (tuple21 a c)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a c))))
  (! (= (tb2t129 (t2tb129 i)) i) :pattern ((t2tb129 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 c1)) j) (= (t2tb129 (tb2t129 j)) j)) :pattern (
  (t2tb129 (tb2t129 j))) )))

;; infix ==_def
  (assert
  (forall ((s (set (tuple21 a c))) (t (set (tuple21 a c))))
  (= (infix_eqeq (tuple2 a1 c1) (t2tb129 s) (t2tb129 t))
  (forall ((x (tuple21 a c))) (= (mem10 x s) (mem10 x t))))))

(declare-fun t2tb132 ((set c)) uni)

;; t2tb_sort
  (assert (forall ((x (set c))) (sort (set1 c1) (t2tb132 x))))

(declare-fun tb2t132 (uni) (set c))

;; BridgeL
  (assert
  (forall ((i (set c)))
  (! (= (tb2t132 (t2tb132 i)) i) :pattern ((t2tb132 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 c1) j) (= (t2tb132 (tb2t132 j)) j)) :pattern ((t2tb132
                                                                   (tb2t132
                                                                   j))) )))

;; infix ==_def
  (assert
  (forall ((s (set c)) (t (set c)))
  (= (infix_eqeq c1 (t2tb132 s) (t2tb132 t))
  (forall ((x c)) (= (mem7 x s) (mem7 x t))))))

(declare-fun t2tb10 ((set (set (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 a b))))) (sort (set1 (set1 (tuple2 a1 b1)))
  (t2tb10 x))))

(declare-fun tb2t10 (uni) (set (set (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 a b)))))
  (! (= (tb2t10 (t2tb10 i)) i) :pattern ((t2tb10 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 a1 b1))) j) (= (t2tb10 (tb2t10 j)) j)) :pattern (
  (t2tb10 (tb2t10 j))) )))

;; infix ==_def
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set (set (tuple21 a b)))))
  (= (infix_eqeq (set1 (tuple2 a1 b1)) (t2tb10 s) (t2tb10 t))
  (forall ((x (set (tuple21 a b)))) (= (mem4 x s) (mem4 x t))))))

(declare-fun t2tb11 ((set (tuple21 a b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a b)))) (sort (set1 (tuple2 a1 b1)) (t2tb11 x))))

(declare-fun tb2t11 (uni) (set (tuple21 a b)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a b))))
  (! (= (tb2t11 (t2tb11 i)) i) :pattern ((t2tb11 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 b1)) j) (= (t2tb11 (tb2t11 j)) j)) :pattern (
  (t2tb11 (tb2t11 j))) )))

;; infix ==_def
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (tuple21 a b))))
  (= (infix_eqeq (tuple2 a1 b1) (t2tb11 s) (t2tb11 t))
  (forall ((x (tuple21 a b))) (= (mem3 x s) (mem3 x t))))))

(declare-fun t2tb12 ((set b)) uni)

;; t2tb_sort
  (assert (forall ((x (set b))) (sort (set1 b1) (t2tb12 x))))

(declare-fun tb2t12 (uni) (set b))

;; BridgeL
  (assert
  (forall ((i (set b))) (! (= (tb2t12 (t2tb12 i)) i) :pattern ((t2tb12 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 b1) j) (= (t2tb12 (tb2t12 j)) j)) :pattern ((t2tb12
                                                                 (tb2t12 j))) )))

;; infix ==_def
  (assert
  (forall ((s (set b)) (t (set b)))
  (= (infix_eqeq b1 (t2tb12 s) (t2tb12 t))
  (forall ((x b)) (= (mem2 x s) (mem2 x t))))))

(declare-fun t2tb1 ((set a)) uni)

;; t2tb_sort
  (assert (forall ((x (set a))) (sort (set1 a1) (t2tb1 x))))

(declare-fun tb2t1 (uni) (set a))

;; BridgeL
  (assert
  (forall ((i (set a))) (! (= (tb2t1 (t2tb1 i)) i) :pattern ((t2tb1 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 a1) j) (= (t2tb1 (tb2t1 j)) j)) :pattern ((t2tb1
                                                               (tb2t1 j))) )))

;; infix ==_def
  (assert
  (forall ((s (set a)) (t (set a)))
  (= (infix_eqeq a1 (t2tb1 s) (t2tb1 t))
  (forall ((x a)) (= (mem1 x s) (mem1 x t))))))

;; infix ==_def
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t uni))
  (and
  (=> (infix_eqeq a2 s t) (forall ((x uni)) (= (mem a2 x s) (mem a2 x t))))
  (=> (forall ((x uni)) (=> (sort a2 x) (= (mem a2 x s) (mem a2 x t))))
  (infix_eqeq a2 s t))))))

(declare-fun power (ty uni) uni)

;; power_sort
  (assert
  (forall ((a2 ty)) (forall ((x uni)) (sort (set1 (set1 a2)) (power a2 x)))))

(declare-fun non_empty_power (ty uni) uni)

;; non_empty_power_sort
  (assert
  (forall ((a2 ty))
  (forall ((x uni)) (sort (set1 (set1 a2)) (non_empty_power a2 x)))))

(declare-fun subset1 (ty uni uni) Bool)

(declare-fun subset2 ((set a) (set a)) Bool)

(declare-fun subset5 ((set b) (set b)) Bool)

(declare-fun subset6 ((set (tuple21 a b)) (set (tuple21 a b))) Bool)

(declare-fun subset7 ((set (set (tuple21 a b))) (set (set (tuple21 a
  b)))) Bool)

(declare-fun subset9 ((set c) (set c)) Bool)

(declare-fun subset11 ((set (tuple21 a c)) (set (tuple21 a c))) Bool)

(declare-fun subset13 ((set (set (tuple21 a c))) (set (set (tuple21 a
  c)))) Bool)

(declare-fun subset14 ((set (tuple21 a (tuple21 b c))) (set (tuple21 a
  (tuple21 b c)))) Bool)

(declare-fun t2tb327 ((set (set (tuple21 a (tuple21 b c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 a (tuple21 b c)))))) (sort
  (set1 (set1 (tuple2 a1 (tuple2 b1 c1)))) (t2tb327 x))))

(declare-fun tb2t327 (uni) (set (set (tuple21 a (tuple21 b c)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 a (tuple21 b c))))))
  (! (= (tb2t327 (t2tb327 i)) i) :pattern ((t2tb327 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 a1 (tuple2 b1 c1)))) j)
     (= (t2tb327 (tb2t327 j)) j)) :pattern ((t2tb327 (tb2t327 j))) )))

;; subset_def
  (assert
  (forall ((s (set (tuple21 a (tuple21 b c)))) (t (set (tuple21 a (tuple21 b
  c)))))
  (= (subset14 s t) (mem (set1 (tuple2 a1 (tuple2 b1 c1))) (t2tb261 s)
  (power (tuple2 a1 (tuple2 b1 c1)) (t2tb261 t))))))

(declare-fun t2tb1180 ((set (set (set (tuple21 a c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (set (tuple21 a c)))))) (sort
  (set1 (set1 (set1 (tuple2 a1 c1)))) (t2tb1180 x))))

(declare-fun tb2t1180 (uni) (set (set (set (tuple21 a c)))))

;; BridgeL
  (assert
  (forall ((i (set (set (set (tuple21 a c))))))
  (! (= (tb2t1180 (t2tb1180 i)) i) :pattern ((t2tb1180 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (set1 (tuple2 a1 c1)))) j)
     (= (t2tb1180 (tb2t1180 j)) j)) :pattern ((t2tb1180 (tb2t1180 j))) )))

;; subset_def
  (assert
  (forall ((s (set (set (tuple21 a c)))) (t (set (set (tuple21 a c)))))
  (= (subset13 s t) (mem (set1 (set1 (tuple2 a1 c1))) (t2tb128 s)
  (power (set1 (tuple2 a1 c1)) (t2tb128 t))))))

;; subset_def
  (assert
  (forall ((s (set (tuple21 a c))) (t (set (tuple21 a c))))
  (= (subset11 s t) (mem11 s (tb2t128 (power (tuple2 a1 c1) (t2tb129 t)))))))

(declare-fun t2tb264 ((set (set c))) uni)

;; t2tb_sort
  (assert (forall ((x (set (set c)))) (sort (set1 (set1 c1)) (t2tb264 x))))

(declare-fun tb2t264 (uni) (set (set c)))

;; BridgeL
  (assert
  (forall ((i (set (set c))))
  (! (= (tb2t264 (t2tb264 i)) i) :pattern ((t2tb264 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 c1)) j) (= (t2tb264 (tb2t264 j)) j)) :pattern (
  (t2tb264 (tb2t264 j))) )))

;; subset_def
  (assert
  (forall ((s (set c)) (t (set c)))
  (= (subset9 s t) (mem (set1 c1) (t2tb132 s) (power c1 (t2tb132 t))))))

(declare-fun t2tb43 ((set (set (set (tuple21 a b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (set (tuple21 a b)))))) (sort
  (set1 (set1 (set1 (tuple2 a1 b1)))) (t2tb43 x))))

(declare-fun tb2t43 (uni) (set (set (set (tuple21 a b)))))

;; BridgeL
  (assert
  (forall ((i (set (set (set (tuple21 a b))))))
  (! (= (tb2t43 (t2tb43 i)) i) :pattern ((t2tb43 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (set1 (tuple2 a1 b1)))) j)
     (= (t2tb43 (tb2t43 j)) j)) :pattern ((t2tb43 (tb2t43 j))) )))

;; subset_def
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set (set (tuple21 a b)))))
  (= (subset7 s t) (mem (set1 (set1 (tuple2 a1 b1))) (t2tb10 s)
  (power (set1 (tuple2 a1 b1)) (t2tb10 t))))))

;; subset_def
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (tuple21 a b))))
  (= (subset6 s t) (mem4 s (tb2t10 (power (tuple2 a1 b1) (t2tb11 t)))))))

(declare-fun t2tb44 ((set (set b))) uni)

;; t2tb_sort
  (assert (forall ((x (set (set b)))) (sort (set1 (set1 b1)) (t2tb44 x))))

(declare-fun tb2t44 (uni) (set (set b)))

;; BridgeL
  (assert
  (forall ((i (set (set b))))
  (! (= (tb2t44 (t2tb44 i)) i) :pattern ((t2tb44 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 b1)) j) (= (t2tb44 (tb2t44 j)) j)) :pattern (
  (t2tb44 (tb2t44 j))) )))

;; subset_def
  (assert
  (forall ((s (set b)) (t (set b)))
  (= (subset5 s t) (mem (set1 b1) (t2tb12 s) (power b1 (t2tb12 t))))))

(declare-fun t2tb ((set (set a))) uni)

;; t2tb_sort
  (assert (forall ((x (set (set a)))) (sort (set1 (set1 a1)) (t2tb x))))

(declare-fun tb2t (uni) (set (set a)))

;; BridgeL
  (assert
  (forall ((i (set (set a)))) (! (= (tb2t (t2tb i)) i) :pattern ((t2tb i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 a1)) j) (= (t2tb (tb2t j)) j)) :pattern ((t2tb
                                                                    (tb2t j))) )))

;; subset_def
  (assert
  (forall ((s (set a)) (t (set a)))
  (= (subset2 s t) (mem (set1 a1) (t2tb1 s) (power a1 (t2tb1 t))))))

;; subset_def
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t uni))
  (= (subset1 a2 s t) (mem (set1 a2) s (power a2 t))))))

(declare-fun subsetnoteq (ty uni uni) Bool)

;; subsetnoteq_def
  (assert
  (forall ((s (set (tuple21 a (tuple21 b c)))) (t (set (tuple21 a (tuple21 b
  c)))))
  (= (subsetnoteq (tuple2 a1 (tuple2 b1 c1)) (t2tb261 s) (t2tb261 t))
  (and (subset14 s t)
  (not (infix_eqeq (tuple2 a1 (tuple2 b1 c1)) (t2tb261 s) (t2tb261 t)))))))

;; subsetnoteq_def
  (assert
  (forall ((s (set (set (tuple21 a c)))) (t (set (set (tuple21 a c)))))
  (= (subsetnoteq (set1 (tuple2 a1 c1)) (t2tb128 s) (t2tb128 t))
  (and (subset13 s t)
  (not (infix_eqeq (set1 (tuple2 a1 c1)) (t2tb128 s) (t2tb128 t)))))))

;; subsetnoteq_def
  (assert
  (forall ((s (set (tuple21 a c))) (t (set (tuple21 a c))))
  (= (subsetnoteq (tuple2 a1 c1) (t2tb129 s) (t2tb129 t))
  (and (subset11 s t)
  (not (infix_eqeq (tuple2 a1 c1) (t2tb129 s) (t2tb129 t)))))))

;; subsetnoteq_def
  (assert
  (forall ((s (set c)) (t (set c)))
  (= (subsetnoteq c1 (t2tb132 s) (t2tb132 t))
  (and (subset9 s t) (not (infix_eqeq c1 (t2tb132 s) (t2tb132 t)))))))

;; subsetnoteq_def
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set (set (tuple21 a b)))))
  (= (subsetnoteq (set1 (tuple2 a1 b1)) (t2tb10 s) (t2tb10 t))
  (and (subset7 s t)
  (not (infix_eqeq (set1 (tuple2 a1 b1)) (t2tb10 s) (t2tb10 t)))))))

;; subsetnoteq_def
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (tuple21 a b))))
  (= (subsetnoteq (tuple2 a1 b1) (t2tb11 s) (t2tb11 t))
  (and (subset6 s t) (not (infix_eqeq (tuple2 a1 b1) (t2tb11 s) (t2tb11 t)))))))

;; subsetnoteq_def
  (assert
  (forall ((s (set b)) (t (set b)))
  (= (subsetnoteq b1 (t2tb12 s) (t2tb12 t))
  (and (subset5 s t) (not (infix_eqeq b1 (t2tb12 s) (t2tb12 t)))))))

;; subsetnoteq_def
  (assert
  (forall ((s (set a)) (t (set a)))
  (= (subsetnoteq a1 (t2tb1 s) (t2tb1 t))
  (and (subset2 s t) (not (infix_eqeq a1 (t2tb1 s) (t2tb1 t)))))))

;; subsetnoteq_def
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t uni))
  (= (subsetnoteq a2 s t) (and (subset1 a2 s t) (not (infix_eqeq a2 s t)))))))

(declare-fun empty (ty) uni)

;; empty_sort
  (assert (forall ((a2 ty)) (sort (set1 a2) (empty a2))))

(declare-fun is_empty (ty uni) Bool)

;; is_empty_def
  (assert
  (forall ((s (set (tuple21 a (tuple21 b c)))))
  (= (is_empty (tuple2 a1 (tuple2 b1 c1)) (t2tb261 s))
  (forall ((x (tuple21 a (tuple21 b c)))) (not (mem14 x s))))))

;; is_empty_def
  (assert
  (forall ((s (set (set (tuple21 a c)))))
  (= (is_empty (set1 (tuple2 a1 c1)) (t2tb128 s))
  (forall ((x (set (tuple21 a c)))) (not (mem11 x s))))))

;; is_empty_def
  (assert
  (forall ((s (set (tuple21 a c))))
  (= (is_empty (tuple2 a1 c1) (t2tb129 s))
  (forall ((x (tuple21 a c))) (not (mem10 x s))))))

;; is_empty_def
  (assert
  (forall ((s (set c)))
  (= (is_empty c1 (t2tb132 s)) (forall ((x c)) (not (mem7 x s))))))

;; is_empty_def
  (assert
  (forall ((s (set (set (tuple21 a b)))))
  (= (is_empty (set1 (tuple2 a1 b1)) (t2tb10 s))
  (forall ((x (set (tuple21 a b)))) (not (mem4 x s))))))

;; is_empty_def
  (assert
  (forall ((s (set (tuple21 a b))))
  (= (is_empty (tuple2 a1 b1) (t2tb11 s))
  (forall ((x (tuple21 a b))) (not (mem3 x s))))))

;; is_empty_def
  (assert
  (forall ((s (set b)))
  (= (is_empty b1 (t2tb12 s)) (forall ((x b)) (not (mem2 x s))))))

;; is_empty_def
  (assert
  (forall ((s (set a)))
  (= (is_empty a1 (t2tb1 s)) (forall ((x a)) (not (mem1 x s))))))

;; is_empty_def
  (assert
  (forall ((a2 ty))
  (forall ((s uni))
  (and (=> (is_empty a2 s) (forall ((x uni)) (not (mem a2 x s))))
  (=> (forall ((x uni)) (=> (sort a2 x) (not (mem a2 x s)))) (is_empty a2 s))))))

;; empty_def1
  (assert (forall ((a2 ty)) (is_empty a2 (empty a2))))

;; empty
  (assert
  (forall ((x (tuple21 a (tuple21 b c))))
  (not (mem14 x (tb2t261 (empty (tuple2 a1 (tuple2 b1 c1))))))))

;; empty
  (assert
  (forall ((x (set (tuple21 a c))))
  (not (mem11 x (tb2t128 (empty (set1 (tuple2 a1 c1))))))))

;; empty
  (assert
  (forall ((x (tuple21 a c)))
  (not (mem10 x (tb2t129 (empty (tuple2 a1 c1)))))))

;; empty
  (assert (forall ((x c)) (not (mem7 x (tb2t132 (empty c1))))))

;; empty
  (assert
  (forall ((x (set (tuple21 a b))))
  (not (mem4 x (tb2t10 (empty (set1 (tuple2 a1 b1))))))))

;; empty
  (assert
  (forall ((x (tuple21 a b))) (not (mem3 x (tb2t11 (empty (tuple2 a1 b1)))))))

;; empty
  (assert (forall ((x b)) (not (mem2 x (tb2t12 (empty b1))))))

;; empty
  (assert (forall ((x a)) (not (mem1 x (tb2t1 (empty a1))))))

;; empty
  (assert (forall ((a2 ty)) (forall ((x uni)) (not (mem a2 x (empty a2))))))

(declare-fun add (ty uni uni) uni)

;; add_sort
  (assert
  (forall ((a2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 a2) (add a2 x x1)))))

(declare-fun t2tb260 ((tuple21 a (tuple21 b c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (tuple21 b c)))) (sort (tuple2 a1 (tuple2 b1 c1))
  (t2tb260 x))))

(declare-fun tb2t260 (uni) (tuple21 a (tuple21 b c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (tuple21 b c))))
  (! (= (tb2t260 (t2tb260 i)) i) :pattern ((t2tb260 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (tuple2 b1 c1)) j) (= (t2tb260 (tb2t260 j)) j)) :pattern (
  (t2tb260 (tb2t260 j))) )))

;; add_def1
  (assert
  (forall ((x (tuple21 a (tuple21 b c))) (y (tuple21 a (tuple21 b c))))
  (forall ((s (set (tuple21 a (tuple21 b c)))))
  (= (mem14 x
  (tb2t261 (add (tuple2 a1 (tuple2 b1 c1)) (t2tb260 y) (t2tb261 s))))
  (or (= x y) (mem14 x s))))))

;; add_def1
  (assert
  (forall ((x (set (tuple21 a c))) (y (set (tuple21 a c))))
  (forall ((s (set (set (tuple21 a c)))))
  (= (mem11 x (tb2t128 (add (set1 (tuple2 a1 c1)) (t2tb129 y) (t2tb128 s))))
  (or (= x y) (mem11 x s))))))

(declare-fun t2tb133 ((tuple21 a c)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 a c))) (sort (tuple2 a1 c1) (t2tb133 x))))

(declare-fun tb2t133 (uni) (tuple21 a c))

;; BridgeL
  (assert
  (forall ((i (tuple21 a c)))
  (! (= (tb2t133 (t2tb133 i)) i) :pattern ((t2tb133 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 c1) j) (= (t2tb133 (tb2t133 j)) j)) :pattern (
  (t2tb133 (tb2t133 j))) )))

;; add_def1
  (assert
  (forall ((x (tuple21 a c)) (y (tuple21 a c)))
  (forall ((s (set (tuple21 a c))))
  (= (mem10 x (tb2t129 (add (tuple2 a1 c1) (t2tb133 y) (t2tb129 s))))
  (or (= x y) (mem10 x s))))))

(declare-fun t2tb135 (c) uni)

;; t2tb_sort
  (assert (forall ((x c)) (sort c1 (t2tb135 x))))

(declare-fun tb2t135 (uni) c)

;; BridgeL
  (assert
  (forall ((i c)) (! (= (tb2t135 (t2tb135 i)) i) :pattern ((t2tb135 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort c1 j) (= (t2tb135 (tb2t135 j)) j)) :pattern ((t2tb135
                                                            (tb2t135 j))) )))

;; add_def1
  (assert
  (forall ((x c) (y c))
  (forall ((s (set c)))
  (= (mem7 x (tb2t132 (add c1 (t2tb135 y) (t2tb132 s))))
  (or (= x y) (mem7 x s))))))

;; add_def1
  (assert
  (forall ((x (set (tuple21 a b))) (y (set (tuple21 a b))))
  (forall ((s (set (set (tuple21 a b)))))
  (= (mem4 x (tb2t10 (add (set1 (tuple2 a1 b1)) (t2tb11 y) (t2tb10 s))))
  (or (= x y) (mem4 x s))))))

(declare-fun t2tb13 ((tuple21 a b)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 a b))) (sort (tuple2 a1 b1) (t2tb13 x))))

(declare-fun tb2t13 (uni) (tuple21 a b))

;; BridgeL
  (assert
  (forall ((i (tuple21 a b)))
  (! (= (tb2t13 (t2tb13 i)) i) :pattern ((t2tb13 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 b1) j) (= (t2tb13 (tb2t13 j)) j)) :pattern (
  (t2tb13 (tb2t13 j))) )))

;; add_def1
  (assert
  (forall ((x (tuple21 a b)) (y (tuple21 a b)))
  (forall ((s (set (tuple21 a b))))
  (= (mem3 x (tb2t11 (add (tuple2 a1 b1) (t2tb13 y) (t2tb11 s))))
  (or (= x y) (mem3 x s))))))

(declare-fun t2tb14 (b) uni)

;; t2tb_sort
  (assert (forall ((x b)) (sort b1 (t2tb14 x))))

(declare-fun tb2t14 (uni) b)

;; BridgeL
  (assert
  (forall ((i b)) (! (= (tb2t14 (t2tb14 i)) i) :pattern ((t2tb14 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort b1 j) (= (t2tb14 (tb2t14 j)) j)) :pattern ((t2tb14 (tb2t14 j))) )))

;; add_def1
  (assert
  (forall ((x b) (y b))
  (forall ((s (set b)))
  (= (mem2 x (tb2t12 (add b1 (t2tb14 y) (t2tb12 s))))
  (or (= x y) (mem2 x s))))))

(declare-fun t2tb2 (a) uni)

;; t2tb_sort
  (assert (forall ((x a)) (sort a1 (t2tb2 x))))

(declare-fun tb2t2 (uni) a)

;; BridgeL
  (assert (forall ((i a)) (! (= (tb2t2 (t2tb2 i)) i) :pattern ((t2tb2 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort a1 j) (= (t2tb2 (tb2t2 j)) j)) :pattern ((t2tb2 (tb2t2 j))) )))

;; add_def1
  (assert
  (forall ((x a) (y a))
  (forall ((s (set a)))
  (= (mem1 x (tb2t1 (add a1 (t2tb2 y) (t2tb1 s)))) (or (= x y) (mem1 x s))))))

;; add_def1
  (assert
  (forall ((a2 ty))
  (forall ((x uni) (y uni))
  (=> (sort a2 x)
  (=> (sort a2 y)
  (forall ((s uni)) (= (mem a2 x (add a2 y s)) (or (= x y) (mem a2 x s)))))))))

(declare-fun singleton (ty uni) uni)

;; singleton_sort
  (assert
  (forall ((a2 ty)) (forall ((x uni)) (sort (set1 a2) (singleton a2 x)))))

;; mem_singleton
  (assert
  (forall ((x (tuple21 a (tuple21 b c))) (y (tuple21 a (tuple21 b c))))
  (= (mem14 x (tb2t261 (singleton (tuple2 a1 (tuple2 b1 c1)) (t2tb260 y))))
  (= x y))))

;; mem_singleton
  (assert
  (forall ((x (set (tuple21 a c))) (y (set (tuple21 a c))))
  (= (mem11 x (tb2t128 (singleton (set1 (tuple2 a1 c1)) (t2tb129 y))))
  (= x y))))

;; mem_singleton
  (assert
  (forall ((x (tuple21 a c)) (y (tuple21 a c)))
  (= (mem10 x (tb2t129 (singleton (tuple2 a1 c1) (t2tb133 y)))) (= x y))))

;; mem_singleton
  (assert
  (forall ((x c) (y c))
  (= (mem7 x (tb2t132 (singleton c1 (t2tb135 y)))) (= x y))))

;; mem_singleton
  (assert
  (forall ((x (set (tuple21 a b))) (y (set (tuple21 a b))))
  (= (mem4 x (tb2t10 (singleton (set1 (tuple2 a1 b1)) (t2tb11 y)))) (= x y))))

;; mem_singleton
  (assert
  (forall ((x (tuple21 a b)) (y (tuple21 a b)))
  (= (mem3 x (tb2t11 (singleton (tuple2 a1 b1) (t2tb13 y)))) (= x y))))

;; mem_singleton
  (assert
  (forall ((x b) (y b))
  (= (mem2 x (tb2t12 (singleton b1 (t2tb14 y)))) (= x y))))

;; mem_singleton
  (assert
  (forall ((x a) (y a))
  (= (mem1 x (tb2t1 (singleton a1 (t2tb2 y)))) (= x y))))

;; mem_singleton
  (assert
  (forall ((a2 ty))
  (forall ((x uni) (y uni))
  (=> (sort a2 x) (=> (sort a2 y) (= (mem a2 x (singleton a2 y)) (= x y)))))))

(declare-fun remove (ty uni uni) uni)

;; remove_sort
  (assert
  (forall ((a2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 a2) (remove a2 x x1)))))

;; remove_def1
  (assert
  (forall ((x (tuple21 a (tuple21 b c))) (y (tuple21 a (tuple21 b c)))
  (s (set (tuple21 a (tuple21 b c)))))
  (= (mem14 x
  (tb2t261 (remove (tuple2 a1 (tuple2 b1 c1)) (t2tb260 y) (t2tb261 s))))
  (and (not (= x y)) (mem14 x s)))))

;; remove_def1
  (assert
  (forall ((x (set (tuple21 a c))) (y (set (tuple21 a c)))
  (s (set (set (tuple21 a c)))))
  (= (mem11 x
  (tb2t128 (remove (set1 (tuple2 a1 c1)) (t2tb129 y) (t2tb128 s))))
  (and (not (= x y)) (mem11 x s)))))

;; remove_def1
  (assert
  (forall ((x (tuple21 a c)) (y (tuple21 a c)) (s (set (tuple21 a c))))
  (= (mem10 x (tb2t129 (remove (tuple2 a1 c1) (t2tb133 y) (t2tb129 s))))
  (and (not (= x y)) (mem10 x s)))))

;; remove_def1
  (assert
  (forall ((x c) (y c) (s (set c)))
  (= (mem7 x (tb2t132 (remove c1 (t2tb135 y) (t2tb132 s))))
  (and (not (= x y)) (mem7 x s)))))

;; remove_def1
  (assert
  (forall ((x (set (tuple21 a b))) (y (set (tuple21 a b)))
  (s (set (set (tuple21 a b)))))
  (= (mem4 x (tb2t10 (remove (set1 (tuple2 a1 b1)) (t2tb11 y) (t2tb10 s))))
  (and (not (= x y)) (mem4 x s)))))

;; remove_def1
  (assert
  (forall ((x (tuple21 a b)) (y (tuple21 a b)) (s (set (tuple21 a b))))
  (= (mem3 x (tb2t11 (remove (tuple2 a1 b1) (t2tb13 y) (t2tb11 s))))
  (and (not (= x y)) (mem3 x s)))))

;; remove_def1
  (assert
  (forall ((x b) (y b) (s (set b)))
  (= (mem2 x (tb2t12 (remove b1 (t2tb14 y) (t2tb12 s))))
  (and (not (= x y)) (mem2 x s)))))

;; remove_def1
  (assert
  (forall ((x a) (y a) (s (set a)))
  (= (mem1 x (tb2t1 (remove a1 (t2tb2 y) (t2tb1 s))))
  (and (not (= x y)) (mem1 x s)))))

;; remove_def1
  (assert
  (forall ((a2 ty))
  (forall ((x uni) (y uni) (s uni))
  (=> (sort a2 x)
  (=> (sort a2 y)
  (= (mem a2 x (remove a2 y s)) (and (not (= x y)) (mem a2 x s))))))))

(declare-fun all (ty) uni)

;; all_sort
  (assert (forall ((a2 ty)) (sort (set1 a2) (all a2))))

;; all_def
  (assert
  (forall ((x (tuple21 a (tuple21 b c)))) (mem14 x
  (tb2t261 (all (tuple2 a1 (tuple2 b1 c1)))))))

;; all_def
  (assert
  (forall ((x (set (tuple21 a c)))) (mem11 x
  (tb2t128 (all (set1 (tuple2 a1 c1)))))))

;; all_def
  (assert
  (forall ((x (tuple21 a c))) (mem10 x (tb2t129 (all (tuple2 a1 c1))))))

;; all_def
  (assert (forall ((x c)) (mem7 x (tb2t132 (all c1)))))

;; all_def
  (assert
  (forall ((x (set (tuple21 a b)))) (mem4 x
  (tb2t10 (all (set1 (tuple2 a1 b1)))))))

;; all_def
  (assert
  (forall ((x (tuple21 a b))) (mem3 x (tb2t11 (all (tuple2 a1 b1))))))

;; all_def
  (assert (forall ((x b)) (mem2 x (tb2t12 (all b1)))))

;; all_def
  (assert (forall ((x a)) (mem1 x (tb2t1 (all a1)))))

;; all_def
  (assert (forall ((a2 ty)) (forall ((x uni)) (mem a2 x (all a2)))))

(declare-fun union1 (ty uni uni) uni)

;; union_sort
  (assert
  (forall ((a2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 a2) (union1 a2 x x1)))))

;; mem_union
  (assert
  (forall ((s (set (tuple21 a (tuple21 b c)))) (t (set (tuple21 a (tuple21 b
  c)))) (x (tuple21 a (tuple21 b c))))
  (= (mem14 x
  (tb2t261 (union1 (tuple2 a1 (tuple2 b1 c1)) (t2tb261 s) (t2tb261 t))))
  (or (mem14 x s) (mem14 x t)))))

;; mem_union
  (assert
  (forall ((s (set (set (tuple21 a c)))) (t (set (set (tuple21 a c))))
  (x (set (tuple21 a c))))
  (= (mem11 x
  (tb2t128 (union1 (set1 (tuple2 a1 c1)) (t2tb128 s) (t2tb128 t))))
  (or (mem11 x s) (mem11 x t)))))

;; mem_union
  (assert
  (forall ((s (set (tuple21 a c))) (t (set (tuple21 a c))) (x (tuple21 a c)))
  (= (mem10 x (tb2t129 (union1 (tuple2 a1 c1) (t2tb129 s) (t2tb129 t))))
  (or (mem10 x s) (mem10 x t)))))

;; mem_union
  (assert
  (forall ((s (set c)) (t (set c)) (x c))
  (= (mem7 x (tb2t132 (union1 c1 (t2tb132 s) (t2tb132 t))))
  (or (mem7 x s) (mem7 x t)))))

;; mem_union
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set (set (tuple21 a b))))
  (x (set (tuple21 a b))))
  (= (mem4 x (tb2t10 (union1 (set1 (tuple2 a1 b1)) (t2tb10 s) (t2tb10 t))))
  (or (mem4 x s) (mem4 x t)))))

;; mem_union
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (tuple21 a b))) (x (tuple21 a b)))
  (= (mem3 x (tb2t11 (union1 (tuple2 a1 b1) (t2tb11 s) (t2tb11 t))))
  (or (mem3 x s) (mem3 x t)))))

;; mem_union
  (assert
  (forall ((s (set b)) (t (set b)) (x b))
  (= (mem2 x (tb2t12 (union1 b1 (t2tb12 s) (t2tb12 t))))
  (or (mem2 x s) (mem2 x t)))))

;; mem_union
  (assert
  (forall ((s (set a)) (t (set a)) (x a))
  (= (mem1 x (tb2t1 (union1 a1 (t2tb1 s) (t2tb1 t))))
  (or (mem1 x s) (mem1 x t)))))

;; mem_union
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t uni) (x uni))
  (= (mem a2 x (union1 a2 s t)) (or (mem a2 x s) (mem a2 x t))))))

(declare-fun inter (ty uni uni) uni)

;; inter_sort
  (assert
  (forall ((a2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 a2) (inter a2 x x1)))))

;; mem_inter
  (assert
  (forall ((s (set (tuple21 a (tuple21 b c)))) (t (set (tuple21 a (tuple21 b
  c)))) (x (tuple21 a (tuple21 b c))))
  (= (mem14 x
  (tb2t261 (inter (tuple2 a1 (tuple2 b1 c1)) (t2tb261 s) (t2tb261 t))))
  (and (mem14 x s) (mem14 x t)))))

;; mem_inter
  (assert
  (forall ((s (set (set (tuple21 a c)))) (t (set (set (tuple21 a c))))
  (x (set (tuple21 a c))))
  (= (mem11 x
  (tb2t128 (inter (set1 (tuple2 a1 c1)) (t2tb128 s) (t2tb128 t))))
  (and (mem11 x s) (mem11 x t)))))

;; mem_inter
  (assert
  (forall ((s (set (tuple21 a c))) (t (set (tuple21 a c))) (x (tuple21 a c)))
  (= (mem10 x (tb2t129 (inter (tuple2 a1 c1) (t2tb129 s) (t2tb129 t))))
  (and (mem10 x s) (mem10 x t)))))

;; mem_inter
  (assert
  (forall ((s (set c)) (t (set c)) (x c))
  (= (mem7 x (tb2t132 (inter c1 (t2tb132 s) (t2tb132 t))))
  (and (mem7 x s) (mem7 x t)))))

;; mem_inter
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set (set (tuple21 a b))))
  (x (set (tuple21 a b))))
  (= (mem4 x (tb2t10 (inter (set1 (tuple2 a1 b1)) (t2tb10 s) (t2tb10 t))))
  (and (mem4 x s) (mem4 x t)))))

;; mem_inter
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (tuple21 a b))) (x (tuple21 a b)))
  (= (mem3 x (tb2t11 (inter (tuple2 a1 b1) (t2tb11 s) (t2tb11 t))))
  (and (mem3 x s) (mem3 x t)))))

;; mem_inter
  (assert
  (forall ((s (set b)) (t (set b)) (x b))
  (= (mem2 x (tb2t12 (inter b1 (t2tb12 s) (t2tb12 t))))
  (and (mem2 x s) (mem2 x t)))))

;; mem_inter
  (assert
  (forall ((s (set a)) (t (set a)) (x a))
  (= (mem1 x (tb2t1 (inter a1 (t2tb1 s) (t2tb1 t))))
  (and (mem1 x s) (mem1 x t)))))

;; mem_inter
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t uni) (x uni))
  (= (mem a2 x (inter a2 s t)) (and (mem a2 x s) (mem a2 x t))))))

(declare-fun diff (ty uni uni) uni)

;; diff_sort
  (assert
  (forall ((a2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 a2) (diff a2 x x1)))))

;; mem_diff
  (assert
  (forall ((s (set (tuple21 a (tuple21 b c)))) (t (set (tuple21 a (tuple21 b
  c)))) (x (tuple21 a (tuple21 b c))))
  (= (mem14 x
  (tb2t261 (diff (tuple2 a1 (tuple2 b1 c1)) (t2tb261 s) (t2tb261 t))))
  (and (mem14 x s) (not (mem14 x t))))))

;; mem_diff
  (assert
  (forall ((s (set (set (tuple21 a c)))) (t (set (set (tuple21 a c))))
  (x (set (tuple21 a c))))
  (= (mem11 x (tb2t128 (diff (set1 (tuple2 a1 c1)) (t2tb128 s) (t2tb128 t))))
  (and (mem11 x s) (not (mem11 x t))))))

;; mem_diff
  (assert
  (forall ((s (set (tuple21 a c))) (t (set (tuple21 a c))) (x (tuple21 a c)))
  (= (mem10 x (tb2t129 (diff (tuple2 a1 c1) (t2tb129 s) (t2tb129 t))))
  (and (mem10 x s) (not (mem10 x t))))))

;; mem_diff
  (assert
  (forall ((s (set c)) (t (set c)) (x c))
  (= (mem7 x (tb2t132 (diff c1 (t2tb132 s) (t2tb132 t))))
  (and (mem7 x s) (not (mem7 x t))))))

;; mem_diff
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set (set (tuple21 a b))))
  (x (set (tuple21 a b))))
  (= (mem4 x (tb2t10 (diff (set1 (tuple2 a1 b1)) (t2tb10 s) (t2tb10 t))))
  (and (mem4 x s) (not (mem4 x t))))))

;; mem_diff
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (tuple21 a b))) (x (tuple21 a b)))
  (= (mem3 x (tb2t11 (diff (tuple2 a1 b1) (t2tb11 s) (t2tb11 t))))
  (and (mem3 x s) (not (mem3 x t))))))

;; mem_diff
  (assert
  (forall ((s (set b)) (t (set b)) (x b))
  (= (mem2 x (tb2t12 (diff b1 (t2tb12 s) (t2tb12 t))))
  (and (mem2 x s) (not (mem2 x t))))))

;; mem_diff
  (assert
  (forall ((s (set a)) (t (set a)) (x a))
  (= (mem1 x (tb2t1 (diff a1 (t2tb1 s) (t2tb1 t))))
  (and (mem1 x s) (not (mem1 x t))))))

;; mem_diff
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t uni) (x uni))
  (= (mem a2 x (diff a2 s t)) (and (mem a2 x s) (not (mem a2 x t)))))))

(declare-fun Tuple2 (ty ty uni uni) uni)

;; Tuple2_sort
  (assert
  (forall ((a2 ty) (a3 ty))
  (forall ((x uni) (x1 uni)) (sort (tuple2 a3 a2) (Tuple2 a3 a2 x x1)))))

(declare-fun Tuple2_proj_1 (ty ty uni) uni)

;; Tuple2_proj_1_sort
  (assert
  (forall ((a2 ty) (a3 ty))
  (forall ((x uni)) (sort a3 (Tuple2_proj_1 a3 a2 x)))))

;; Tuple2_proj_1_def
  (assert
  (forall ((a2 ty) (a3 ty))
  (forall ((u uni) (u1 uni))
  (=> (sort a3 u) (= (Tuple2_proj_1 a3 a2 (Tuple2 a3 a2 u u1)) u)))))

(declare-fun Tuple2_proj_2 (ty ty uni) uni)

;; Tuple2_proj_2_sort
  (assert
  (forall ((a2 ty) (a3 ty))
  (forall ((x uni)) (sort a2 (Tuple2_proj_2 a3 a2 x)))))

;; Tuple2_proj_2_def
  (assert
  (forall ((a2 ty) (a3 ty))
  (forall ((u uni) (u1 uni))
  (=> (sort a2 u1) (= (Tuple2_proj_2 a3 a2 (Tuple2 a3 a2 u u1)) u1)))))

;; tuple2_inversion
  (assert
  (forall ((a2 ty) (a3 ty))
  (forall ((u uni))
  (=> (sort (tuple2 a3 a2) u)
  (= u (Tuple2 a3 a2 (Tuple2_proj_1 a3 a2 u) (Tuple2_proj_2 a3 a2 u)))))))

(declare-fun times (ty ty uni uni) uni)

;; times_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (tuple2 a2 b2)) (times b2 a2 x x1)))))

;; mem_times
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set (tuple21 a (tuple21 b c)))) (x uni) (y (tuple21 a
  (tuple21 b c))))
  (= (mem (tuple2 a2 (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 a2 (tuple2 a1 (tuple2 b1 c1)) x (t2tb260 y))
  (times (tuple2 a1 (tuple2 b1 c1)) a2 s (t2tb261 t)))
  (and (mem a2 x s) (mem14 y t))))))

;; mem_times
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set (set (tuple21 a c)))) (x uni) (y (set (tuple21 a
  c))))
  (= (mem (tuple2 a2 (set1 (tuple2 a1 c1)))
  (Tuple2 a2 (set1 (tuple2 a1 c1)) x (t2tb129 y))
  (times (set1 (tuple2 a1 c1)) a2 s (t2tb128 t)))
  (and (mem a2 x s) (mem11 y t))))))

;; mem_times
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set (tuple21 a c))) (x uni) (y (tuple21 a c)))
  (= (mem (tuple2 a2 (tuple2 a1 c1)) (Tuple2 a2 (tuple2 a1 c1) x (t2tb133 y))
  (times (tuple2 a1 c1) a2 s (t2tb129 t))) (and (mem a2 x s) (mem10 y t))))))

;; mem_times
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set c)) (x uni) (y c))
  (= (mem (tuple2 a2 c1) (Tuple2 a2 c1 x (t2tb135 y))
  (times c1 a2 s (t2tb132 t))) (and (mem a2 x s) (mem7 y t))))))

;; mem_times
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set (set (tuple21 a b)))) (x uni) (y (set (tuple21 a
  b))))
  (= (mem (tuple2 a2 (set1 (tuple2 a1 b1)))
  (Tuple2 a2 (set1 (tuple2 a1 b1)) x (t2tb11 y))
  (times (set1 (tuple2 a1 b1)) a2 s (t2tb10 t)))
  (and (mem a2 x s) (mem4 y t))))))

;; mem_times
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set (tuple21 a b))) (x uni) (y (tuple21 a b)))
  (= (mem (tuple2 a2 (tuple2 a1 b1)) (Tuple2 a2 (tuple2 a1 b1) x (t2tb13 y))
  (times (tuple2 a1 b1) a2 s (t2tb11 t))) (and (mem a2 x s) (mem3 y t))))))

;; mem_times
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set b)) (x uni) (y b))
  (= (mem (tuple2 a2 b1) (Tuple2 a2 b1 x (t2tb14 y))
  (times b1 a2 s (t2tb12 t))) (and (mem a2 x s) (mem2 y t))))))

;; mem_times
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set a)) (x uni) (y a))
  (= (mem (tuple2 a2 a1) (Tuple2 a2 a1 x (t2tb2 y))
  (times a1 a2 s (t2tb1 t))) (and (mem a2 x s) (mem1 y t))))))

(declare-fun t2tb1181 ((set (tuple21 (tuple21 a (tuple21 b c)) (tuple21 a
  (tuple21 b c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a (tuple21 b c)) (tuple21 a (tuple21 b
  c)))))) (sort
  (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 (tuple2 b1 c1))))
  (t2tb1181 x))))

(declare-fun tb2t1181 (uni) (set (tuple21 (tuple21 a (tuple21 b c))
  (tuple21 a (tuple21 b c)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a (tuple21 b c)) (tuple21 a (tuple21 b
  c)))))) (! (= (tb2t1181 (t2tb1181 i)) i) :pattern ((t2tb1181 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 (tuple2 b1 c1)))) j)
     (= (t2tb1181 (tb2t1181 j)) j)) :pattern ((t2tb1181 (tb2t1181 j))) )))

(declare-fun t2tb1182 ((tuple21 (tuple21 a (tuple21 b c)) (tuple21 a
  (tuple21 b c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a (tuple21 b c)) (tuple21 a (tuple21 b c)))))
  (sort (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 (tuple2 b1 c1)))
  (t2tb1182 x))))

(declare-fun tb2t1182 (uni) (tuple21 (tuple21 a (tuple21 b c)) (tuple21 a
  (tuple21 b c))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a (tuple21 b c)) (tuple21 a (tuple21 b c)))))
  (! (= (tb2t1182 (t2tb1182 i)) i) :pattern ((t2tb1182 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 (tuple2 b1 c1)))
     j) (= (t2tb1182 (tb2t1182 j)) j)) :pattern ((t2tb1182 (tb2t1182 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a (tuple21 b c)))) (t (set (tuple21 a (tuple21 b
  c)))) (x (tuple21 a (tuple21 b c))) (y (tuple21 a (tuple21 b c))))
  (= (mem (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 (tuple2 b1 c1)) (t2tb260 x)
  (t2tb260 y))
  (times (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 (tuple2 b1 c1)) (t2tb261 s)
  (t2tb261 t))) (and (mem14 x s) (mem14 y t)))))

(declare-fun t2tb1183 ((set (tuple21 (tuple21 a (tuple21 b c))
  (set (tuple21 a c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a (tuple21 b c)) (set (tuple21 a c))))))
  (sort (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) (set1 (tuple2 a1 c1))))
  (t2tb1183 x))))

(declare-fun tb2t1183 (uni) (set (tuple21 (tuple21 a (tuple21 b c))
  (set (tuple21 a c)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a (tuple21 b c)) (set (tuple21 a c))))))
  (! (= (tb2t1183 (t2tb1183 i)) i) :pattern ((t2tb1183 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) (set1 (tuple2 a1 c1)))) j)
     (= (t2tb1183 (tb2t1183 j)) j)) :pattern ((t2tb1183 (tb2t1183 j))) )))

(declare-fun t2tb1184 ((tuple21 (tuple21 a (tuple21 b c)) (set (tuple21 a
  c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a (tuple21 b c)) (set (tuple21 a c))))) (sort
  (tuple2 (tuple2 a1 (tuple2 b1 c1)) (set1 (tuple2 a1 c1))) (t2tb1184 x))))

(declare-fun tb2t1184 (uni) (tuple21 (tuple21 a (tuple21 b c))
  (set (tuple21 a c))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a (tuple21 b c)) (set (tuple21 a c)))))
  (! (= (tb2t1184 (t2tb1184 i)) i) :pattern ((t2tb1184 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 (tuple2 b1 c1)) (set1 (tuple2 a1 c1))) j)
     (= (t2tb1184 (tb2t1184 j)) j)) :pattern ((t2tb1184 (tb2t1184 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a (tuple21 b c)))) (t (set (set (tuple21 a c))))
  (x (tuple21 a (tuple21 b c))) (y (set (tuple21 a c))))
  (= (mem (tuple2 (tuple2 a1 (tuple2 b1 c1)) (set1 (tuple2 a1 c1)))
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) (set1 (tuple2 a1 c1)) (t2tb260 x)
  (t2tb129 y))
  (times (set1 (tuple2 a1 c1)) (tuple2 a1 (tuple2 b1 c1)) (t2tb261 s)
  (t2tb128 t))) (and (mem14 x s) (mem11 y t)))))

(declare-fun t2tb1185 ((set (tuple21 (tuple21 a (tuple21 b c)) (tuple21 a
  c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a (tuple21 b c)) (tuple21 a c))))) (sort
  (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 c1))) (t2tb1185 x))))

(declare-fun tb2t1185 (uni) (set (tuple21 (tuple21 a (tuple21 b c))
  (tuple21 a c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a (tuple21 b c)) (tuple21 a c)))))
  (! (= (tb2t1185 (t2tb1185 i)) i) :pattern ((t2tb1185 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 c1))) j)
     (= (t2tb1185 (tb2t1185 j)) j)) :pattern ((t2tb1185 (tb2t1185 j))) )))

(declare-fun t2tb1186 ((tuple21 (tuple21 a (tuple21 b c)) (tuple21 a
  c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a (tuple21 b c)) (tuple21 a c)))) (sort
  (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 c1)) (t2tb1186 x))))

(declare-fun tb2t1186 (uni) (tuple21 (tuple21 a (tuple21 b c)) (tuple21 a
  c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a (tuple21 b c)) (tuple21 a c))))
  (! (= (tb2t1186 (t2tb1186 i)) i) :pattern ((t2tb1186 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 c1)) j)
     (= (t2tb1186 (tb2t1186 j)) j)) :pattern ((t2tb1186 (tb2t1186 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a (tuple21 b c)))) (t (set (tuple21 a c)))
  (x (tuple21 a (tuple21 b c))) (y (tuple21 a c)))
  (= (mem (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 c1))
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 c1) (t2tb260 x) (t2tb133 y))
  (times (tuple2 a1 c1) (tuple2 a1 (tuple2 b1 c1)) (t2tb261 s) (t2tb129 t)))
  (and (mem14 x s) (mem10 y t)))))

(declare-fun t2tb1187 ((tuple21 (tuple21 a (tuple21 b c)) c)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a (tuple21 b c)) c))) (sort
  (tuple2 (tuple2 a1 (tuple2 b1 c1)) c1) (t2tb1187 x))))

(declare-fun tb2t1187 (uni) (tuple21 (tuple21 a (tuple21 b c)) c))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a (tuple21 b c)) c)))
  (! (= (tb2t1187 (t2tb1187 i)) i) :pattern ((t2tb1187 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 (tuple2 b1 c1)) c1) j)
     (= (t2tb1187 (tb2t1187 j)) j)) :pattern ((t2tb1187 (tb2t1187 j))) )))

(declare-fun t2tb1188 ((set (tuple21 (tuple21 a (tuple21 b c)) c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a (tuple21 b c)) c)))) (sort
  (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) c1)) (t2tb1188 x))))

(declare-fun tb2t1188 (uni) (set (tuple21 (tuple21 a (tuple21 b c)) c)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a (tuple21 b c)) c))))
  (! (= (tb2t1188 (t2tb1188 i)) i) :pattern ((t2tb1188 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) c1)) j)
     (= (t2tb1188 (tb2t1188 j)) j)) :pattern ((t2tb1188 (tb2t1188 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a (tuple21 b c)))) (t (set c)) (x (tuple21 a
  (tuple21 b c))) (y c))
  (= (mem (tuple2 (tuple2 a1 (tuple2 b1 c1)) c1)
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) c1 (t2tb260 x) (t2tb135 y))
  (times c1 (tuple2 a1 (tuple2 b1 c1)) (t2tb261 s) (t2tb132 t)))
  (and (mem14 x s) (mem7 y t)))))

(declare-fun t2tb1189 ((set (tuple21 (tuple21 a (tuple21 b c))
  (set (tuple21 a b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a (tuple21 b c)) (set (tuple21 a b))))))
  (sort (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) (set1 (tuple2 a1 b1))))
  (t2tb1189 x))))

(declare-fun tb2t1189 (uni) (set (tuple21 (tuple21 a (tuple21 b c))
  (set (tuple21 a b)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a (tuple21 b c)) (set (tuple21 a b))))))
  (! (= (tb2t1189 (t2tb1189 i)) i) :pattern ((t2tb1189 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) (set1 (tuple2 a1 b1)))) j)
     (= (t2tb1189 (tb2t1189 j)) j)) :pattern ((t2tb1189 (tb2t1189 j))) )))

(declare-fun t2tb1190 ((tuple21 (tuple21 a (tuple21 b c)) (set (tuple21 a
  b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a (tuple21 b c)) (set (tuple21 a b))))) (sort
  (tuple2 (tuple2 a1 (tuple2 b1 c1)) (set1 (tuple2 a1 b1))) (t2tb1190 x))))

(declare-fun tb2t1190 (uni) (tuple21 (tuple21 a (tuple21 b c))
  (set (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a (tuple21 b c)) (set (tuple21 a b)))))
  (! (= (tb2t1190 (t2tb1190 i)) i) :pattern ((t2tb1190 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 (tuple2 b1 c1)) (set1 (tuple2 a1 b1))) j)
     (= (t2tb1190 (tb2t1190 j)) j)) :pattern ((t2tb1190 (tb2t1190 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a (tuple21 b c)))) (t (set (set (tuple21 a b))))
  (x (tuple21 a (tuple21 b c))) (y (set (tuple21 a b))))
  (= (mem (tuple2 (tuple2 a1 (tuple2 b1 c1)) (set1 (tuple2 a1 b1)))
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) (set1 (tuple2 a1 b1)) (t2tb260 x)
  (t2tb11 y))
  (times (set1 (tuple2 a1 b1)) (tuple2 a1 (tuple2 b1 c1)) (t2tb261 s)
  (t2tb10 t))) (and (mem14 x s) (mem4 y t)))))

(declare-fun t2tb1191 ((set (tuple21 (tuple21 a (tuple21 b c)) (tuple21 a
  b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a (tuple21 b c)) (tuple21 a b))))) (sort
  (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 b1))) (t2tb1191 x))))

(declare-fun tb2t1191 (uni) (set (tuple21 (tuple21 a (tuple21 b c))
  (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a (tuple21 b c)) (tuple21 a b)))))
  (! (= (tb2t1191 (t2tb1191 i)) i) :pattern ((t2tb1191 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 b1))) j)
     (= (t2tb1191 (tb2t1191 j)) j)) :pattern ((t2tb1191 (tb2t1191 j))) )))

(declare-fun t2tb1192 ((tuple21 (tuple21 a (tuple21 b c)) (tuple21 a
  b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a (tuple21 b c)) (tuple21 a b)))) (sort
  (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 b1)) (t2tb1192 x))))

(declare-fun tb2t1192 (uni) (tuple21 (tuple21 a (tuple21 b c)) (tuple21 a
  b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a (tuple21 b c)) (tuple21 a b))))
  (! (= (tb2t1192 (t2tb1192 i)) i) :pattern ((t2tb1192 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 b1)) j)
     (= (t2tb1192 (tb2t1192 j)) j)) :pattern ((t2tb1192 (tb2t1192 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a (tuple21 b c)))) (t (set (tuple21 a b)))
  (x (tuple21 a (tuple21 b c))) (y (tuple21 a b)))
  (= (mem (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 b1))
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 b1) (t2tb260 x) (t2tb13 y))
  (times (tuple2 a1 b1) (tuple2 a1 (tuple2 b1 c1)) (t2tb261 s) (t2tb11 t)))
  (and (mem14 x s) (mem3 y t)))))

(declare-fun t2tb1193 ((set (tuple21 (tuple21 a (tuple21 b c)) b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a (tuple21 b c)) b)))) (sort
  (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) b1)) (t2tb1193 x))))

(declare-fun tb2t1193 (uni) (set (tuple21 (tuple21 a (tuple21 b c)) b)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a (tuple21 b c)) b))))
  (! (= (tb2t1193 (t2tb1193 i)) i) :pattern ((t2tb1193 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) b1)) j)
     (= (t2tb1193 (tb2t1193 j)) j)) :pattern ((t2tb1193 (tb2t1193 j))) )))

(declare-fun t2tb1194 ((tuple21 (tuple21 a (tuple21 b c)) b)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a (tuple21 b c)) b))) (sort
  (tuple2 (tuple2 a1 (tuple2 b1 c1)) b1) (t2tb1194 x))))

(declare-fun tb2t1194 (uni) (tuple21 (tuple21 a (tuple21 b c)) b))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a (tuple21 b c)) b)))
  (! (= (tb2t1194 (t2tb1194 i)) i) :pattern ((t2tb1194 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 (tuple2 b1 c1)) b1) j)
     (= (t2tb1194 (tb2t1194 j)) j)) :pattern ((t2tb1194 (tb2t1194 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a (tuple21 b c)))) (t (set b)) (x (tuple21 a
  (tuple21 b c))) (y b))
  (= (mem (tuple2 (tuple2 a1 (tuple2 b1 c1)) b1)
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) b1 (t2tb260 x) (t2tb14 y))
  (times b1 (tuple2 a1 (tuple2 b1 c1)) (t2tb261 s) (t2tb12 t)))
  (and (mem14 x s) (mem2 y t)))))

(declare-fun t2tb1195 ((set (tuple21 (tuple21 a (tuple21 b c)) a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a (tuple21 b c)) a)))) (sort
  (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) a1)) (t2tb1195 x))))

(declare-fun tb2t1195 (uni) (set (tuple21 (tuple21 a (tuple21 b c)) a)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a (tuple21 b c)) a))))
  (! (= (tb2t1195 (t2tb1195 i)) i) :pattern ((t2tb1195 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) a1)) j)
     (= (t2tb1195 (tb2t1195 j)) j)) :pattern ((t2tb1195 (tb2t1195 j))) )))

(declare-fun t2tb1196 ((tuple21 (tuple21 a (tuple21 b c)) a)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a (tuple21 b c)) a))) (sort
  (tuple2 (tuple2 a1 (tuple2 b1 c1)) a1) (t2tb1196 x))))

(declare-fun tb2t1196 (uni) (tuple21 (tuple21 a (tuple21 b c)) a))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a (tuple21 b c)) a)))
  (! (= (tb2t1196 (t2tb1196 i)) i) :pattern ((t2tb1196 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 (tuple2 b1 c1)) a1) j)
     (= (t2tb1196 (tb2t1196 j)) j)) :pattern ((t2tb1196 (tb2t1196 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a (tuple21 b c)))) (t (set a)) (x (tuple21 a
  (tuple21 b c))) (y a))
  (= (mem (tuple2 (tuple2 a1 (tuple2 b1 c1)) a1)
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) a1 (t2tb260 x) (t2tb2 y))
  (times a1 (tuple2 a1 (tuple2 b1 c1)) (t2tb261 s) (t2tb1 t)))
  (and (mem14 x s) (mem1 y t)))))

;; mem_times
  (assert
  (forall ((b2 ty))
  (forall ((s (set (tuple21 a (tuple21 b c)))) (t uni) (x (tuple21 a
  (tuple21 b c))) (y uni))
  (= (mem (tuple2 (tuple2 a1 (tuple2 b1 c1)) b2)
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) b2 (t2tb260 x) y)
  (times b2 (tuple2 a1 (tuple2 b1 c1)) (t2tb261 s) t))
  (and (mem14 x s) (mem b2 y t))))))

(declare-fun t2tb1197 ((set (tuple21 (set (tuple21 a c)) (tuple21 a
  (tuple21 b c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a c)) (tuple21 a (tuple21 b c))))))
  (sort (set1 (tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 (tuple2 b1 c1))))
  (t2tb1197 x))))

(declare-fun tb2t1197 (uni) (set (tuple21 (set (tuple21 a c)) (tuple21 a
  (tuple21 b c)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a c)) (tuple21 a (tuple21 b c))))))
  (! (= (tb2t1197 (t2tb1197 i)) i) :pattern ((t2tb1197 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 (tuple2 b1 c1)))) j)
     (= (t2tb1197 (tb2t1197 j)) j)) :pattern ((t2tb1197 (tb2t1197 j))) )))

(declare-fun t2tb1198 ((tuple21 (set (tuple21 a c)) (tuple21 a (tuple21 b
  c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a c)) (tuple21 a (tuple21 b c))))) (sort
  (tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 (tuple2 b1 c1))) (t2tb1198 x))))

(declare-fun tb2t1198 (uni) (tuple21 (set (tuple21 a c)) (tuple21 a
  (tuple21 b c))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a c)) (tuple21 a (tuple21 b c)))))
  (! (= (tb2t1198 (t2tb1198 i)) i) :pattern ((t2tb1198 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 (tuple2 b1 c1))) j)
     (= (t2tb1198 (tb2t1198 j)) j)) :pattern ((t2tb1198 (tb2t1198 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a c)))) (t (set (tuple21 a (tuple21 b c))))
  (x (set (tuple21 a c))) (y (tuple21 a (tuple21 b c))))
  (= (mem (tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 (tuple2 b1 c1)) (t2tb129 x)
  (t2tb260 y))
  (times (tuple2 a1 (tuple2 b1 c1)) (set1 (tuple2 a1 c1)) (t2tb128 s)
  (t2tb261 t))) (and (mem11 x s) (mem14 y t)))))

(declare-fun t2tb1199 ((set (tuple21 (set (tuple21 a c)) (set (tuple21 a
  c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a c)) (set (tuple21 a c)))))) (sort
  (set1 (tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 a1 c1)))) (t2tb1199 x))))

(declare-fun tb2t1199 (uni) (set (tuple21 (set (tuple21 a c)) (set (tuple21 a
  c)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a c)) (set (tuple21 a c))))))
  (! (= (tb2t1199 (t2tb1199 i)) i) :pattern ((t2tb1199 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 a1 c1)))) j)
     (= (t2tb1199 (tb2t1199 j)) j)) :pattern ((t2tb1199 (tb2t1199 j))) )))

(declare-fun t2tb1200 ((tuple21 (set (tuple21 a c)) (set (tuple21 a
  c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a c)) (set (tuple21 a c))))) (sort
  (tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 a1 c1))) (t2tb1200 x))))

(declare-fun tb2t1200 (uni) (tuple21 (set (tuple21 a c)) (set (tuple21 a
  c))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a c)) (set (tuple21 a c)))))
  (! (= (tb2t1200 (t2tb1200 i)) i) :pattern ((t2tb1200 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 a1 c1))) j)
     (= (t2tb1200 (tb2t1200 j)) j)) :pattern ((t2tb1200 (tb2t1200 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a c)))) (t (set (set (tuple21 a c))))
  (x (set (tuple21 a c))) (y (set (tuple21 a c))))
  (= (mem (tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 a1 c1)))
  (Tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 a1 c1)) (t2tb129 x)
  (t2tb129 y))
  (times (set1 (tuple2 a1 c1)) (set1 (tuple2 a1 c1)) (t2tb128 s) (t2tb128 t)))
  (and (mem11 x s) (mem11 y t)))))

(declare-fun t2tb1201 ((tuple21 (set (tuple21 a c)) (tuple21 a c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a c)) (tuple21 a c)))) (sort
  (tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 c1)) (t2tb1201 x))))

(declare-fun tb2t1201 (uni) (tuple21 (set (tuple21 a c)) (tuple21 a c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a c)) (tuple21 a c))))
  (! (= (tb2t1201 (t2tb1201 i)) i) :pattern ((t2tb1201 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 c1)) j)
     (= (t2tb1201 (tb2t1201 j)) j)) :pattern ((t2tb1201 (tb2t1201 j))) )))

(declare-fun t2tb1202 ((set (tuple21 (set (tuple21 a c)) (tuple21 a
  c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a c)) (tuple21 a c))))) (sort
  (set1 (tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 c1))) (t2tb1202 x))))

(declare-fun tb2t1202 (uni) (set (tuple21 (set (tuple21 a c)) (tuple21 a
  c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a c)) (tuple21 a c)))))
  (! (= (tb2t1202 (t2tb1202 i)) i) :pattern ((t2tb1202 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 c1))) j)
     (= (t2tb1202 (tb2t1202 j)) j)) :pattern ((t2tb1202 (tb2t1202 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a c)))) (t (set (tuple21 a c)))
  (x (set (tuple21 a c))) (y (tuple21 a c)))
  (= (mem (tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 c1))
  (Tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 c1) (t2tb129 x) (t2tb133 y))
  (times (tuple2 a1 c1) (set1 (tuple2 a1 c1)) (t2tb128 s) (t2tb129 t)))
  (and (mem11 x s) (mem10 y t)))))

(declare-fun t2tb1203 ((set (tuple21 (set (tuple21 a c)) c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a c)) c)))) (sort
  (set1 (tuple2 (set1 (tuple2 a1 c1)) c1)) (t2tb1203 x))))

(declare-fun tb2t1203 (uni) (set (tuple21 (set (tuple21 a c)) c)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a c)) c))))
  (! (= (tb2t1203 (t2tb1203 i)) i) :pattern ((t2tb1203 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 a1 c1)) c1)) j)
     (= (t2tb1203 (tb2t1203 j)) j)) :pattern ((t2tb1203 (tb2t1203 j))) )))

(declare-fun t2tb1204 ((tuple21 (set (tuple21 a c)) c)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a c)) c))) (sort
  (tuple2 (set1 (tuple2 a1 c1)) c1) (t2tb1204 x))))

(declare-fun tb2t1204 (uni) (tuple21 (set (tuple21 a c)) c))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a c)) c)))
  (! (= (tb2t1204 (t2tb1204 i)) i) :pattern ((t2tb1204 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 a1 c1)) c1) j)
     (= (t2tb1204 (tb2t1204 j)) j)) :pattern ((t2tb1204 (tb2t1204 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a c)))) (t (set c)) (x (set (tuple21 a c)))
  (y c))
  (= (mem (tuple2 (set1 (tuple2 a1 c1)) c1)
  (Tuple2 (set1 (tuple2 a1 c1)) c1 (t2tb129 x) (t2tb135 y))
  (times c1 (set1 (tuple2 a1 c1)) (t2tb128 s) (t2tb132 t)))
  (and (mem11 x s) (mem7 y t)))))

(declare-fun t2tb1205 ((set (tuple21 (set (tuple21 a c)) (set (tuple21 a
  b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a c)) (set (tuple21 a b)))))) (sort
  (set1 (tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 a1 b1)))) (t2tb1205 x))))

(declare-fun tb2t1205 (uni) (set (tuple21 (set (tuple21 a c)) (set (tuple21 a
  b)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a c)) (set (tuple21 a b))))))
  (! (= (tb2t1205 (t2tb1205 i)) i) :pattern ((t2tb1205 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 a1 b1)))) j)
     (= (t2tb1205 (tb2t1205 j)) j)) :pattern ((t2tb1205 (tb2t1205 j))) )))

(declare-fun t2tb1206 ((tuple21 (set (tuple21 a c)) (set (tuple21 a
  b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a c)) (set (tuple21 a b))))) (sort
  (tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 a1 b1))) (t2tb1206 x))))

(declare-fun tb2t1206 (uni) (tuple21 (set (tuple21 a c)) (set (tuple21 a
  b))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a c)) (set (tuple21 a b)))))
  (! (= (tb2t1206 (t2tb1206 i)) i) :pattern ((t2tb1206 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 a1 b1))) j)
     (= (t2tb1206 (tb2t1206 j)) j)) :pattern ((t2tb1206 (tb2t1206 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a c)))) (t (set (set (tuple21 a b))))
  (x (set (tuple21 a c))) (y (set (tuple21 a b))))
  (= (mem (tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 a1 b1)))
  (Tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 a1 b1)) (t2tb129 x) (t2tb11 y))
  (times (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 c1)) (t2tb128 s) (t2tb10 t)))
  (and (mem11 x s) (mem4 y t)))))

(declare-fun t2tb1207 ((set (tuple21 (set (tuple21 a c)) (tuple21 a
  b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a c)) (tuple21 a b))))) (sort
  (set1 (tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 b1))) (t2tb1207 x))))

(declare-fun tb2t1207 (uni) (set (tuple21 (set (tuple21 a c)) (tuple21 a
  b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a c)) (tuple21 a b)))))
  (! (= (tb2t1207 (t2tb1207 i)) i) :pattern ((t2tb1207 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 b1))) j)
     (= (t2tb1207 (tb2t1207 j)) j)) :pattern ((t2tb1207 (tb2t1207 j))) )))

(declare-fun t2tb1208 ((tuple21 (set (tuple21 a c)) (tuple21 a b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a c)) (tuple21 a b)))) (sort
  (tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 b1)) (t2tb1208 x))))

(declare-fun tb2t1208 (uni) (tuple21 (set (tuple21 a c)) (tuple21 a b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a c)) (tuple21 a b))))
  (! (= (tb2t1208 (t2tb1208 i)) i) :pattern ((t2tb1208 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 b1)) j)
     (= (t2tb1208 (tb2t1208 j)) j)) :pattern ((t2tb1208 (tb2t1208 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a c)))) (t (set (tuple21 a b)))
  (x (set (tuple21 a c))) (y (tuple21 a b)))
  (= (mem (tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 b1))
  (Tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 b1) (t2tb129 x) (t2tb13 y))
  (times (tuple2 a1 b1) (set1 (tuple2 a1 c1)) (t2tb128 s) (t2tb11 t)))
  (and (mem11 x s) (mem3 y t)))))

(declare-fun t2tb1209 ((set (tuple21 (set (tuple21 a c)) b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a c)) b)))) (sort
  (set1 (tuple2 (set1 (tuple2 a1 c1)) b1)) (t2tb1209 x))))

(declare-fun tb2t1209 (uni) (set (tuple21 (set (tuple21 a c)) b)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a c)) b))))
  (! (= (tb2t1209 (t2tb1209 i)) i) :pattern ((t2tb1209 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 a1 c1)) b1)) j)
     (= (t2tb1209 (tb2t1209 j)) j)) :pattern ((t2tb1209 (tb2t1209 j))) )))

(declare-fun t2tb1210 ((tuple21 (set (tuple21 a c)) b)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a c)) b))) (sort
  (tuple2 (set1 (tuple2 a1 c1)) b1) (t2tb1210 x))))

(declare-fun tb2t1210 (uni) (tuple21 (set (tuple21 a c)) b))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a c)) b)))
  (! (= (tb2t1210 (t2tb1210 i)) i) :pattern ((t2tb1210 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 a1 c1)) b1) j)
     (= (t2tb1210 (tb2t1210 j)) j)) :pattern ((t2tb1210 (tb2t1210 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a c)))) (t (set b)) (x (set (tuple21 a c)))
  (y b))
  (= (mem (tuple2 (set1 (tuple2 a1 c1)) b1)
  (Tuple2 (set1 (tuple2 a1 c1)) b1 (t2tb129 x) (t2tb14 y))
  (times b1 (set1 (tuple2 a1 c1)) (t2tb128 s) (t2tb12 t)))
  (and (mem11 x s) (mem2 y t)))))

(declare-fun t2tb1211 ((set (tuple21 (set (tuple21 a c)) a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a c)) a)))) (sort
  (set1 (tuple2 (set1 (tuple2 a1 c1)) a1)) (t2tb1211 x))))

(declare-fun tb2t1211 (uni) (set (tuple21 (set (tuple21 a c)) a)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a c)) a))))
  (! (= (tb2t1211 (t2tb1211 i)) i) :pattern ((t2tb1211 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 a1 c1)) a1)) j)
     (= (t2tb1211 (tb2t1211 j)) j)) :pattern ((t2tb1211 (tb2t1211 j))) )))

(declare-fun t2tb1212 ((tuple21 (set (tuple21 a c)) a)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a c)) a))) (sort
  (tuple2 (set1 (tuple2 a1 c1)) a1) (t2tb1212 x))))

(declare-fun tb2t1212 (uni) (tuple21 (set (tuple21 a c)) a))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a c)) a)))
  (! (= (tb2t1212 (t2tb1212 i)) i) :pattern ((t2tb1212 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 a1 c1)) a1) j)
     (= (t2tb1212 (tb2t1212 j)) j)) :pattern ((t2tb1212 (tb2t1212 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a c)))) (t (set a)) (x (set (tuple21 a c)))
  (y a))
  (= (mem (tuple2 (set1 (tuple2 a1 c1)) a1)
  (Tuple2 (set1 (tuple2 a1 c1)) a1 (t2tb129 x) (t2tb2 y))
  (times a1 (set1 (tuple2 a1 c1)) (t2tb128 s) (t2tb1 t)))
  (and (mem11 x s) (mem1 y t)))))

;; mem_times
  (assert
  (forall ((b2 ty))
  (forall ((s (set (set (tuple21 a c)))) (t uni) (x (set (tuple21 a c)))
  (y uni))
  (= (mem (tuple2 (set1 (tuple2 a1 c1)) b2)
  (Tuple2 (set1 (tuple2 a1 c1)) b2 (t2tb129 x) y)
  (times b2 (set1 (tuple2 a1 c1)) (t2tb128 s) t))
  (and (mem11 x s) (mem b2 y t))))))

(declare-fun t2tb1213 ((set (tuple21 (tuple21 a c) (tuple21 a (tuple21 b
  c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a c) (tuple21 a (tuple21 b c)))))) (sort
  (set1 (tuple2 (tuple2 a1 c1) (tuple2 a1 (tuple2 b1 c1)))) (t2tb1213 x))))

(declare-fun tb2t1213 (uni) (set (tuple21 (tuple21 a c) (tuple21 a (tuple21 b
  c)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a c) (tuple21 a (tuple21 b c))))))
  (! (= (tb2t1213 (t2tb1213 i)) i) :pattern ((t2tb1213 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 c1) (tuple2 a1 (tuple2 b1 c1)))) j)
     (= (t2tb1213 (tb2t1213 j)) j)) :pattern ((t2tb1213 (tb2t1213 j))) )))

(declare-fun t2tb1214 ((tuple21 (tuple21 a c) (tuple21 a (tuple21 b
  c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a c) (tuple21 a (tuple21 b c))))) (sort
  (tuple2 (tuple2 a1 c1) (tuple2 a1 (tuple2 b1 c1))) (t2tb1214 x))))

(declare-fun tb2t1214 (uni) (tuple21 (tuple21 a c) (tuple21 a (tuple21 b
  c))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a c) (tuple21 a (tuple21 b c)))))
  (! (= (tb2t1214 (t2tb1214 i)) i) :pattern ((t2tb1214 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 c1) (tuple2 a1 (tuple2 b1 c1))) j)
     (= (t2tb1214 (tb2t1214 j)) j)) :pattern ((t2tb1214 (tb2t1214 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a c))) (t (set (tuple21 a (tuple21 b c))))
  (x (tuple21 a c)) (y (tuple21 a (tuple21 b c))))
  (= (mem (tuple2 (tuple2 a1 c1) (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 (tuple2 a1 c1) (tuple2 a1 (tuple2 b1 c1)) (t2tb133 x) (t2tb260 y))
  (times (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 c1) (t2tb129 s) (t2tb261 t)))
  (and (mem10 x s) (mem14 y t)))))

(declare-fun t2tb1215 ((tuple21 (tuple21 a c) (set (tuple21 a c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a c) (set (tuple21 a c))))) (sort
  (tuple2 (tuple2 a1 c1) (set1 (tuple2 a1 c1))) (t2tb1215 x))))

(declare-fun tb2t1215 (uni) (tuple21 (tuple21 a c) (set (tuple21 a c))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a c) (set (tuple21 a c)))))
  (! (= (tb2t1215 (t2tb1215 i)) i) :pattern ((t2tb1215 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 c1) (set1 (tuple2 a1 c1))) j)
     (= (t2tb1215 (tb2t1215 j)) j)) :pattern ((t2tb1215 (tb2t1215 j))) )))

(declare-fun t2tb1216 ((set (tuple21 (tuple21 a c) (set (tuple21 a
  c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a c) (set (tuple21 a c)))))) (sort
  (set1 (tuple2 (tuple2 a1 c1) (set1 (tuple2 a1 c1)))) (t2tb1216 x))))

(declare-fun tb2t1216 (uni) (set (tuple21 (tuple21 a c) (set (tuple21 a
  c)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a c) (set (tuple21 a c))))))
  (! (= (tb2t1216 (t2tb1216 i)) i) :pattern ((t2tb1216 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 c1) (set1 (tuple2 a1 c1)))) j)
     (= (t2tb1216 (tb2t1216 j)) j)) :pattern ((t2tb1216 (tb2t1216 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a c))) (t (set (set (tuple21 a c))))
  (x (tuple21 a c)) (y (set (tuple21 a c))))
  (= (mem (tuple2 (tuple2 a1 c1) (set1 (tuple2 a1 c1)))
  (Tuple2 (tuple2 a1 c1) (set1 (tuple2 a1 c1)) (t2tb133 x) (t2tb129 y))
  (times (set1 (tuple2 a1 c1)) (tuple2 a1 c1) (t2tb129 s) (t2tb128 t)))
  (and (mem10 x s) (mem11 y t)))))

(declare-fun t2tb156 ((tuple21 (tuple21 a c) (tuple21 a c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a c) (tuple21 a c)))) (sort
  (tuple2 (tuple2 a1 c1) (tuple2 a1 c1)) (t2tb156 x))))

(declare-fun tb2t156 (uni) (tuple21 (tuple21 a c) (tuple21 a c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a c) (tuple21 a c))))
  (! (= (tb2t156 (t2tb156 i)) i) :pattern ((t2tb156 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 c1) (tuple2 a1 c1)) j)
     (= (t2tb156 (tb2t156 j)) j)) :pattern ((t2tb156 (tb2t156 j))) )))

(declare-fun t2tb157 ((set (tuple21 (tuple21 a c) (tuple21 a c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a c) (tuple21 a c))))) (sort
  (set1 (tuple2 (tuple2 a1 c1) (tuple2 a1 c1))) (t2tb157 x))))

(declare-fun tb2t157 (uni) (set (tuple21 (tuple21 a c) (tuple21 a c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a c) (tuple21 a c)))))
  (! (= (tb2t157 (t2tb157 i)) i) :pattern ((t2tb157 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 c1) (tuple2 a1 c1))) j)
     (= (t2tb157 (tb2t157 j)) j)) :pattern ((t2tb157 (tb2t157 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a c))) (t (set (tuple21 a c))) (x (tuple21 a c))
  (y (tuple21 a c)))
  (= (mem (tuple2 (tuple2 a1 c1) (tuple2 a1 c1))
  (Tuple2 (tuple2 a1 c1) (tuple2 a1 c1) (t2tb133 x) (t2tb133 y))
  (times (tuple2 a1 c1) (tuple2 a1 c1) (t2tb129 s) (t2tb129 t)))
  (and (mem10 x s) (mem10 y t)))))

(declare-fun t2tb162 ((set (tuple21 (tuple21 a c) c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a c) c)))) (sort
  (set1 (tuple2 (tuple2 a1 c1) c1)) (t2tb162 x))))

(declare-fun tb2t162 (uni) (set (tuple21 (tuple21 a c) c)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a c) c))))
  (! (= (tb2t162 (t2tb162 i)) i) :pattern ((t2tb162 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 c1) c1)) j)
     (= (t2tb162 (tb2t162 j)) j)) :pattern ((t2tb162 (tb2t162 j))) )))

(declare-fun t2tb163 ((tuple21 (tuple21 a c) c)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a c) c))) (sort (tuple2 (tuple2 a1 c1) c1)
  (t2tb163 x))))

(declare-fun tb2t163 (uni) (tuple21 (tuple21 a c) c))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a c) c)))
  (! (= (tb2t163 (t2tb163 i)) i) :pattern ((t2tb163 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 c1) c1) j) (= (t2tb163 (tb2t163 j)) j)) :pattern (
  (t2tb163 (tb2t163 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a c))) (t (set c)) (x (tuple21 a c)) (y c))
  (= (mem (tuple2 (tuple2 a1 c1) c1)
  (Tuple2 (tuple2 a1 c1) c1 (t2tb133 x) (t2tb135 y))
  (times c1 (tuple2 a1 c1) (t2tb129 s) (t2tb132 t)))
  (and (mem10 x s) (mem7 y t)))))

(declare-fun t2tb164 ((set (tuple21 (tuple21 a c) (set (tuple21 a b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a c) (set (tuple21 a b)))))) (sort
  (set1 (tuple2 (tuple2 a1 c1) (set1 (tuple2 a1 b1)))) (t2tb164 x))))

(declare-fun tb2t164 (uni) (set (tuple21 (tuple21 a c) (set (tuple21 a b)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a c) (set (tuple21 a b))))))
  (! (= (tb2t164 (t2tb164 i)) i) :pattern ((t2tb164 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 c1) (set1 (tuple2 a1 b1)))) j)
     (= (t2tb164 (tb2t164 j)) j)) :pattern ((t2tb164 (tb2t164 j))) )))

(declare-fun t2tb165 ((tuple21 (tuple21 a c) (set (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a c) (set (tuple21 a b))))) (sort
  (tuple2 (tuple2 a1 c1) (set1 (tuple2 a1 b1))) (t2tb165 x))))

(declare-fun tb2t165 (uni) (tuple21 (tuple21 a c) (set (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a c) (set (tuple21 a b)))))
  (! (= (tb2t165 (t2tb165 i)) i) :pattern ((t2tb165 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 c1) (set1 (tuple2 a1 b1))) j)
     (= (t2tb165 (tb2t165 j)) j)) :pattern ((t2tb165 (tb2t165 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a c))) (t (set (set (tuple21 a b))))
  (x (tuple21 a c)) (y (set (tuple21 a b))))
  (= (mem (tuple2 (tuple2 a1 c1) (set1 (tuple2 a1 b1)))
  (Tuple2 (tuple2 a1 c1) (set1 (tuple2 a1 b1)) (t2tb133 x) (t2tb11 y))
  (times (set1 (tuple2 a1 b1)) (tuple2 a1 c1) (t2tb129 s) (t2tb10 t)))
  (and (mem10 x s) (mem4 y t)))))

(declare-fun t2tb166 ((set (tuple21 (tuple21 a c) (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a c) (tuple21 a b))))) (sort
  (set1 (tuple2 (tuple2 a1 c1) (tuple2 a1 b1))) (t2tb166 x))))

(declare-fun tb2t166 (uni) (set (tuple21 (tuple21 a c) (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a c) (tuple21 a b)))))
  (! (= (tb2t166 (t2tb166 i)) i) :pattern ((t2tb166 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 c1) (tuple2 a1 b1))) j)
     (= (t2tb166 (tb2t166 j)) j)) :pattern ((t2tb166 (tb2t166 j))) )))

(declare-fun t2tb167 ((tuple21 (tuple21 a c) (tuple21 a b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a c) (tuple21 a b)))) (sort
  (tuple2 (tuple2 a1 c1) (tuple2 a1 b1)) (t2tb167 x))))

(declare-fun tb2t167 (uni) (tuple21 (tuple21 a c) (tuple21 a b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a c) (tuple21 a b))))
  (! (= (tb2t167 (t2tb167 i)) i) :pattern ((t2tb167 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 c1) (tuple2 a1 b1)) j)
     (= (t2tb167 (tb2t167 j)) j)) :pattern ((t2tb167 (tb2t167 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a c))) (t (set (tuple21 a b))) (x (tuple21 a c))
  (y (tuple21 a b)))
  (= (mem (tuple2 (tuple2 a1 c1) (tuple2 a1 b1))
  (Tuple2 (tuple2 a1 c1) (tuple2 a1 b1) (t2tb133 x) (t2tb13 y))
  (times (tuple2 a1 b1) (tuple2 a1 c1) (t2tb129 s) (t2tb11 t)))
  (and (mem10 x s) (mem3 y t)))))

(declare-fun t2tb168 ((set (tuple21 (tuple21 a c) b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a c) b)))) (sort
  (set1 (tuple2 (tuple2 a1 c1) b1)) (t2tb168 x))))

(declare-fun tb2t168 (uni) (set (tuple21 (tuple21 a c) b)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a c) b))))
  (! (= (tb2t168 (t2tb168 i)) i) :pattern ((t2tb168 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 c1) b1)) j)
     (= (t2tb168 (tb2t168 j)) j)) :pattern ((t2tb168 (tb2t168 j))) )))

(declare-fun t2tb169 ((tuple21 (tuple21 a c) b)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a c) b))) (sort (tuple2 (tuple2 a1 c1) b1)
  (t2tb169 x))))

(declare-fun tb2t169 (uni) (tuple21 (tuple21 a c) b))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a c) b)))
  (! (= (tb2t169 (t2tb169 i)) i) :pattern ((t2tb169 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 c1) b1) j) (= (t2tb169 (tb2t169 j)) j)) :pattern (
  (t2tb169 (tb2t169 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a c))) (t (set b)) (x (tuple21 a c)) (y b))
  (= (mem (tuple2 (tuple2 a1 c1) b1)
  (Tuple2 (tuple2 a1 c1) b1 (t2tb133 x) (t2tb14 y))
  (times b1 (tuple2 a1 c1) (t2tb129 s) (t2tb12 t)))
  (and (mem10 x s) (mem2 y t)))))

(declare-fun t2tb170 ((set (tuple21 (tuple21 a c) a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a c) a)))) (sort
  (set1 (tuple2 (tuple2 a1 c1) a1)) (t2tb170 x))))

(declare-fun tb2t170 (uni) (set (tuple21 (tuple21 a c) a)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a c) a))))
  (! (= (tb2t170 (t2tb170 i)) i) :pattern ((t2tb170 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 c1) a1)) j)
     (= (t2tb170 (tb2t170 j)) j)) :pattern ((t2tb170 (tb2t170 j))) )))

(declare-fun t2tb171 ((tuple21 (tuple21 a c) a)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a c) a))) (sort (tuple2 (tuple2 a1 c1) a1)
  (t2tb171 x))))

(declare-fun tb2t171 (uni) (tuple21 (tuple21 a c) a))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a c) a)))
  (! (= (tb2t171 (t2tb171 i)) i) :pattern ((t2tb171 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 c1) a1) j) (= (t2tb171 (tb2t171 j)) j)) :pattern (
  (t2tb171 (tb2t171 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a c))) (t (set a)) (x (tuple21 a c)) (y a))
  (= (mem (tuple2 (tuple2 a1 c1) a1)
  (Tuple2 (tuple2 a1 c1) a1 (t2tb133 x) (t2tb2 y))
  (times a1 (tuple2 a1 c1) (t2tb129 s) (t2tb1 t)))
  (and (mem10 x s) (mem1 y t)))))

;; mem_times
  (assert
  (forall ((b2 ty))
  (forall ((s (set (tuple21 a c))) (t uni) (x (tuple21 a c)) (y uni))
  (= (mem (tuple2 (tuple2 a1 c1) b2) (Tuple2 (tuple2 a1 c1) b2 (t2tb133 x) y)
  (times b2 (tuple2 a1 c1) (t2tb129 s) t)) (and (mem10 x s) (mem b2 y t))))))

(declare-fun t2tb1217 ((set (tuple21 c (tuple21 a (tuple21 b c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 c (tuple21 a (tuple21 b c)))))) (sort
  (set1 (tuple2 c1 (tuple2 a1 (tuple2 b1 c1)))) (t2tb1217 x))))

(declare-fun tb2t1217 (uni) (set (tuple21 c (tuple21 a (tuple21 b c)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 c (tuple21 a (tuple21 b c))))))
  (! (= (tb2t1217 (t2tb1217 i)) i) :pattern ((t2tb1217 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 c1 (tuple2 a1 (tuple2 b1 c1)))) j)
     (= (t2tb1217 (tb2t1217 j)) j)) :pattern ((t2tb1217 (tb2t1217 j))) )))

(declare-fun t2tb1218 ((tuple21 c (tuple21 a (tuple21 b c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 c (tuple21 a (tuple21 b c))))) (sort
  (tuple2 c1 (tuple2 a1 (tuple2 b1 c1))) (t2tb1218 x))))

(declare-fun tb2t1218 (uni) (tuple21 c (tuple21 a (tuple21 b c))))

;; BridgeL
  (assert
  (forall ((i (tuple21 c (tuple21 a (tuple21 b c)))))
  (! (= (tb2t1218 (t2tb1218 i)) i) :pattern ((t2tb1218 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 c1 (tuple2 a1 (tuple2 b1 c1))) j)
     (= (t2tb1218 (tb2t1218 j)) j)) :pattern ((t2tb1218 (tb2t1218 j))) )))

;; mem_times
  (assert
  (forall ((s (set c)) (t (set (tuple21 a (tuple21 b c)))) (x c)
  (y (tuple21 a (tuple21 b c))))
  (= (mem (tuple2 c1 (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 c1 (tuple2 a1 (tuple2 b1 c1)) (t2tb135 x) (t2tb260 y))
  (times (tuple2 a1 (tuple2 b1 c1)) c1 (t2tb132 s) (t2tb261 t)))
  (and (mem7 x s) (mem14 y t)))))

(declare-fun t2tb1219 ((set (tuple21 c (set (tuple21 a c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 c (set (tuple21 a c)))))) (sort
  (set1 (tuple2 c1 (set1 (tuple2 a1 c1)))) (t2tb1219 x))))

(declare-fun tb2t1219 (uni) (set (tuple21 c (set (tuple21 a c)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 c (set (tuple21 a c))))))
  (! (= (tb2t1219 (t2tb1219 i)) i) :pattern ((t2tb1219 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 c1 (set1 (tuple2 a1 c1)))) j)
     (= (t2tb1219 (tb2t1219 j)) j)) :pattern ((t2tb1219 (tb2t1219 j))) )))

(declare-fun t2tb1220 ((tuple21 c (set (tuple21 a c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 c (set (tuple21 a c))))) (sort
  (tuple2 c1 (set1 (tuple2 a1 c1))) (t2tb1220 x))))

(declare-fun tb2t1220 (uni) (tuple21 c (set (tuple21 a c))))

;; BridgeL
  (assert
  (forall ((i (tuple21 c (set (tuple21 a c)))))
  (! (= (tb2t1220 (t2tb1220 i)) i) :pattern ((t2tb1220 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 c1 (set1 (tuple2 a1 c1))) j)
     (= (t2tb1220 (tb2t1220 j)) j)) :pattern ((t2tb1220 (tb2t1220 j))) )))

;; mem_times
  (assert
  (forall ((s (set c)) (t (set (set (tuple21 a c)))) (x c) (y (set (tuple21 a
  c))))
  (= (mem (tuple2 c1 (set1 (tuple2 a1 c1)))
  (Tuple2 c1 (set1 (tuple2 a1 c1)) (t2tb135 x) (t2tb129 y))
  (times (set1 (tuple2 a1 c1)) c1 (t2tb132 s) (t2tb128 t)))
  (and (mem7 x s) (mem11 y t)))))

(declare-fun t2tb210 ((set (tuple21 c (tuple21 a c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 c (tuple21 a c))))) (sort
  (set1 (tuple2 c1 (tuple2 a1 c1))) (t2tb210 x))))

(declare-fun tb2t210 (uni) (set (tuple21 c (tuple21 a c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 c (tuple21 a c)))))
  (! (= (tb2t210 (t2tb210 i)) i) :pattern ((t2tb210 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 c1 (tuple2 a1 c1))) j)
     (= (t2tb210 (tb2t210 j)) j)) :pattern ((t2tb210 (tb2t210 j))) )))

(declare-fun t2tb211 ((tuple21 c (tuple21 a c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 c (tuple21 a c)))) (sort (tuple2 c1 (tuple2 a1 c1))
  (t2tb211 x))))

(declare-fun tb2t211 (uni) (tuple21 c (tuple21 a c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 c (tuple21 a c))))
  (! (= (tb2t211 (t2tb211 i)) i) :pattern ((t2tb211 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 c1 (tuple2 a1 c1)) j) (= (t2tb211 (tb2t211 j)) j)) :pattern (
  (t2tb211 (tb2t211 j))) )))

;; mem_times
  (assert
  (forall ((s (set c)) (t (set (tuple21 a c))) (x c) (y (tuple21 a c)))
  (= (mem (tuple2 c1 (tuple2 a1 c1))
  (Tuple2 c1 (tuple2 a1 c1) (t2tb135 x) (t2tb133 y))
  (times (tuple2 a1 c1) c1 (t2tb132 s) (t2tb129 t)))
  (and (mem7 x s) (mem10 y t)))))

(declare-fun t2tb216 ((set (tuple21 c c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 c c)))) (sort (set1 (tuple2 c1 c1)) (t2tb216 x))))

(declare-fun tb2t216 (uni) (set (tuple21 c c)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 c c))))
  (! (= (tb2t216 (t2tb216 i)) i) :pattern ((t2tb216 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 c1 c1)) j) (= (t2tb216 (tb2t216 j)) j)) :pattern (
  (t2tb216 (tb2t216 j))) )))

(declare-fun t2tb217 ((tuple21 c c)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 c c))) (sort (tuple2 c1 c1) (t2tb217 x))))

(declare-fun tb2t217 (uni) (tuple21 c c))

;; BridgeL
  (assert
  (forall ((i (tuple21 c c)))
  (! (= (tb2t217 (t2tb217 i)) i) :pattern ((t2tb217 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 c1 c1) j) (= (t2tb217 (tb2t217 j)) j)) :pattern (
  (t2tb217 (tb2t217 j))) )))

;; mem_times
  (assert
  (forall ((s (set c)) (t (set c)) (x c) (y c))
  (= (mem (tuple2 c1 c1) (Tuple2 c1 c1 (t2tb135 x) (t2tb135 y))
  (times c1 c1 (t2tb132 s) (t2tb132 t))) (and (mem7 x s) (mem7 y t)))))

(declare-fun t2tb218 ((set (tuple21 c (set (tuple21 a b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 c (set (tuple21 a b)))))) (sort
  (set1 (tuple2 c1 (set1 (tuple2 a1 b1)))) (t2tb218 x))))

(declare-fun tb2t218 (uni) (set (tuple21 c (set (tuple21 a b)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 c (set (tuple21 a b))))))
  (! (= (tb2t218 (t2tb218 i)) i) :pattern ((t2tb218 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 c1 (set1 (tuple2 a1 b1)))) j)
     (= (t2tb218 (tb2t218 j)) j)) :pattern ((t2tb218 (tb2t218 j))) )))

(declare-fun t2tb219 ((tuple21 c (set (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 c (set (tuple21 a b))))) (sort
  (tuple2 c1 (set1 (tuple2 a1 b1))) (t2tb219 x))))

(declare-fun tb2t219 (uni) (tuple21 c (set (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (tuple21 c (set (tuple21 a b)))))
  (! (= (tb2t219 (t2tb219 i)) i) :pattern ((t2tb219 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 c1 (set1 (tuple2 a1 b1))) j)
     (= (t2tb219 (tb2t219 j)) j)) :pattern ((t2tb219 (tb2t219 j))) )))

;; mem_times
  (assert
  (forall ((s (set c)) (t (set (set (tuple21 a b)))) (x c) (y (set (tuple21 a
  b))))
  (= (mem (tuple2 c1 (set1 (tuple2 a1 b1)))
  (Tuple2 c1 (set1 (tuple2 a1 b1)) (t2tb135 x) (t2tb11 y))
  (times (set1 (tuple2 a1 b1)) c1 (t2tb132 s) (t2tb10 t)))
  (and (mem7 x s) (mem4 y t)))))

(declare-fun t2tb220 ((set (tuple21 c (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 c (tuple21 a b))))) (sort
  (set1 (tuple2 c1 (tuple2 a1 b1))) (t2tb220 x))))

(declare-fun tb2t220 (uni) (set (tuple21 c (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 c (tuple21 a b)))))
  (! (= (tb2t220 (t2tb220 i)) i) :pattern ((t2tb220 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 c1 (tuple2 a1 b1))) j)
     (= (t2tb220 (tb2t220 j)) j)) :pattern ((t2tb220 (tb2t220 j))) )))

(declare-fun t2tb221 ((tuple21 c (tuple21 a b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 c (tuple21 a b)))) (sort (tuple2 c1 (tuple2 a1 b1))
  (t2tb221 x))))

(declare-fun tb2t221 (uni) (tuple21 c (tuple21 a b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 c (tuple21 a b))))
  (! (= (tb2t221 (t2tb221 i)) i) :pattern ((t2tb221 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 c1 (tuple2 a1 b1)) j) (= (t2tb221 (tb2t221 j)) j)) :pattern (
  (t2tb221 (tb2t221 j))) )))

;; mem_times
  (assert
  (forall ((s (set c)) (t (set (tuple21 a b))) (x c) (y (tuple21 a b)))
  (= (mem (tuple2 c1 (tuple2 a1 b1))
  (Tuple2 c1 (tuple2 a1 b1) (t2tb135 x) (t2tb13 y))
  (times (tuple2 a1 b1) c1 (t2tb132 s) (t2tb11 t)))
  (and (mem7 x s) (mem3 y t)))))

(declare-fun t2tb222 ((set (tuple21 c b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 c b)))) (sort (set1 (tuple2 c1 b1)) (t2tb222 x))))

(declare-fun tb2t222 (uni) (set (tuple21 c b)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 c b))))
  (! (= (tb2t222 (t2tb222 i)) i) :pattern ((t2tb222 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 c1 b1)) j) (= (t2tb222 (tb2t222 j)) j)) :pattern (
  (t2tb222 (tb2t222 j))) )))

(declare-fun t2tb223 ((tuple21 c b)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 c b))) (sort (tuple2 c1 b1) (t2tb223 x))))

(declare-fun tb2t223 (uni) (tuple21 c b))

;; BridgeL
  (assert
  (forall ((i (tuple21 c b)))
  (! (= (tb2t223 (t2tb223 i)) i) :pattern ((t2tb223 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 c1 b1) j) (= (t2tb223 (tb2t223 j)) j)) :pattern (
  (t2tb223 (tb2t223 j))) )))

;; mem_times
  (assert
  (forall ((s (set c)) (t (set b)) (x c) (y b))
  (= (mem (tuple2 c1 b1) (Tuple2 c1 b1 (t2tb135 x) (t2tb14 y))
  (times b1 c1 (t2tb132 s) (t2tb12 t))) (and (mem7 x s) (mem2 y t)))))

(declare-fun t2tb224 ((set (tuple21 c a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 c a)))) (sort (set1 (tuple2 c1 a1)) (t2tb224 x))))

(declare-fun tb2t224 (uni) (set (tuple21 c a)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 c a))))
  (! (= (tb2t224 (t2tb224 i)) i) :pattern ((t2tb224 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 c1 a1)) j) (= (t2tb224 (tb2t224 j)) j)) :pattern (
  (t2tb224 (tb2t224 j))) )))

(declare-fun t2tb225 ((tuple21 c a)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 c a))) (sort (tuple2 c1 a1) (t2tb225 x))))

(declare-fun tb2t225 (uni) (tuple21 c a))

;; BridgeL
  (assert
  (forall ((i (tuple21 c a)))
  (! (= (tb2t225 (t2tb225 i)) i) :pattern ((t2tb225 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 c1 a1) j) (= (t2tb225 (tb2t225 j)) j)) :pattern (
  (t2tb225 (tb2t225 j))) )))

;; mem_times
  (assert
  (forall ((s (set c)) (t (set a)) (x c) (y a))
  (= (mem (tuple2 c1 a1) (Tuple2 c1 a1 (t2tb135 x) (t2tb2 y))
  (times a1 c1 (t2tb132 s) (t2tb1 t))) (and (mem7 x s) (mem1 y t)))))

;; mem_times
  (assert
  (forall ((b2 ty))
  (forall ((s (set c)) (t uni) (x c) (y uni))
  (= (mem (tuple2 c1 b2) (Tuple2 c1 b2 (t2tb135 x) y)
  (times b2 c1 (t2tb132 s) t)) (and (mem7 x s) (mem b2 y t))))))

(declare-fun t2tb1221 ((set (tuple21 (set (tuple21 a b)) (tuple21 a
  (tuple21 b c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a b)) (tuple21 a (tuple21 b c))))))
  (sort (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 (tuple2 b1 c1))))
  (t2tb1221 x))))

(declare-fun tb2t1221 (uni) (set (tuple21 (set (tuple21 a b)) (tuple21 a
  (tuple21 b c)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a b)) (tuple21 a (tuple21 b c))))))
  (! (= (tb2t1221 (t2tb1221 i)) i) :pattern ((t2tb1221 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 (tuple2 b1 c1)))) j)
     (= (t2tb1221 (tb2t1221 j)) j)) :pattern ((t2tb1221 (tb2t1221 j))) )))

(declare-fun t2tb1222 ((tuple21 (set (tuple21 a b)) (tuple21 a (tuple21 b
  c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a b)) (tuple21 a (tuple21 b c))))) (sort
  (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 (tuple2 b1 c1))) (t2tb1222 x))))

(declare-fun tb2t1222 (uni) (tuple21 (set (tuple21 a b)) (tuple21 a
  (tuple21 b c))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a b)) (tuple21 a (tuple21 b c)))))
  (! (= (tb2t1222 (t2tb1222 i)) i) :pattern ((t2tb1222 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 (tuple2 b1 c1))) j)
     (= (t2tb1222 (tb2t1222 j)) j)) :pattern ((t2tb1222 (tb2t1222 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set (tuple21 a (tuple21 b c))))
  (x (set (tuple21 a b))) (y (tuple21 a (tuple21 b c))))
  (= (mem (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 (tuple2 b1 c1)) (t2tb11 x)
  (t2tb260 y))
  (times (tuple2 a1 (tuple2 b1 c1)) (set1 (tuple2 a1 b1)) (t2tb10 s)
  (t2tb261 t))) (and (mem4 x s) (mem14 y t)))))

(declare-fun t2tb1223 ((set (tuple21 (set (tuple21 a b)) (set (tuple21 a
  c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a b)) (set (tuple21 a c)))))) (sort
  (set1 (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 c1)))) (t2tb1223 x))))

(declare-fun tb2t1223 (uni) (set (tuple21 (set (tuple21 a b)) (set (tuple21 a
  c)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a b)) (set (tuple21 a c))))))
  (! (= (tb2t1223 (t2tb1223 i)) i) :pattern ((t2tb1223 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 c1)))) j)
     (= (t2tb1223 (tb2t1223 j)) j)) :pattern ((t2tb1223 (tb2t1223 j))) )))

(declare-fun t2tb1224 ((tuple21 (set (tuple21 a b)) (set (tuple21 a
  c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a b)) (set (tuple21 a c))))) (sort
  (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 c1))) (t2tb1224 x))))

(declare-fun tb2t1224 (uni) (tuple21 (set (tuple21 a b)) (set (tuple21 a
  c))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a b)) (set (tuple21 a c)))))
  (! (= (tb2t1224 (t2tb1224 i)) i) :pattern ((t2tb1224 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 c1))) j)
     (= (t2tb1224 (tb2t1224 j)) j)) :pattern ((t2tb1224 (tb2t1224 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set (set (tuple21 a c))))
  (x (set (tuple21 a b))) (y (set (tuple21 a c))))
  (= (mem (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 c1)))
  (Tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 c1)) (t2tb11 x) (t2tb129 y))
  (times (set1 (tuple2 a1 c1)) (set1 (tuple2 a1 b1)) (t2tb10 s) (t2tb128 t)))
  (and (mem4 x s) (mem11 y t)))))

(declare-fun t2tb228 ((tuple21 (set (tuple21 a b)) (tuple21 a c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a b)) (tuple21 a c)))) (sort
  (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 c1)) (t2tb228 x))))

(declare-fun tb2t228 (uni) (tuple21 (set (tuple21 a b)) (tuple21 a c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a b)) (tuple21 a c))))
  (! (= (tb2t228 (t2tb228 i)) i) :pattern ((t2tb228 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 c1)) j)
     (= (t2tb228 (tb2t228 j)) j)) :pattern ((t2tb228 (tb2t228 j))) )))

(declare-fun t2tb229 ((set (tuple21 (set (tuple21 a b)) (tuple21 a c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a b)) (tuple21 a c))))) (sort
  (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 c1))) (t2tb229 x))))

(declare-fun tb2t229 (uni) (set (tuple21 (set (tuple21 a b)) (tuple21 a c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a b)) (tuple21 a c)))))
  (! (= (tb2t229 (t2tb229 i)) i) :pattern ((t2tb229 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 c1))) j)
     (= (t2tb229 (tb2t229 j)) j)) :pattern ((t2tb229 (tb2t229 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set (tuple21 a c)))
  (x (set (tuple21 a b))) (y (tuple21 a c)))
  (= (mem (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 c1))
  (Tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 c1) (t2tb11 x) (t2tb133 y))
  (times (tuple2 a1 c1) (set1 (tuple2 a1 b1)) (t2tb10 s) (t2tb129 t)))
  (and (mem4 x s) (mem10 y t)))))

(declare-fun t2tb234 ((set (tuple21 (set (tuple21 a b)) c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a b)) c)))) (sort
  (set1 (tuple2 (set1 (tuple2 a1 b1)) c1)) (t2tb234 x))))

(declare-fun tb2t234 (uni) (set (tuple21 (set (tuple21 a b)) c)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a b)) c))))
  (! (= (tb2t234 (t2tb234 i)) i) :pattern ((t2tb234 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 a1 b1)) c1)) j)
     (= (t2tb234 (tb2t234 j)) j)) :pattern ((t2tb234 (tb2t234 j))) )))

(declare-fun t2tb235 ((tuple21 (set (tuple21 a b)) c)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a b)) c))) (sort
  (tuple2 (set1 (tuple2 a1 b1)) c1) (t2tb235 x))))

(declare-fun tb2t235 (uni) (tuple21 (set (tuple21 a b)) c))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a b)) c)))
  (! (= (tb2t235 (t2tb235 i)) i) :pattern ((t2tb235 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 a1 b1)) c1) j)
     (= (t2tb235 (tb2t235 j)) j)) :pattern ((t2tb235 (tb2t235 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set c)) (x (set (tuple21 a b)))
  (y c))
  (= (mem (tuple2 (set1 (tuple2 a1 b1)) c1)
  (Tuple2 (set1 (tuple2 a1 b1)) c1 (t2tb11 x) (t2tb135 y))
  (times c1 (set1 (tuple2 a1 b1)) (t2tb10 s) (t2tb132 t)))
  (and (mem4 x s) (mem7 y t)))))

(declare-fun t2tb15 ((set (tuple21 (set (tuple21 a b)) (set (tuple21 a
  b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a b)) (set (tuple21 a b)))))) (sort
  (set1 (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1)))) (t2tb15 x))))

(declare-fun tb2t15 (uni) (set (tuple21 (set (tuple21 a b)) (set (tuple21 a
  b)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a b)) (set (tuple21 a b))))))
  (! (= (tb2t15 (t2tb15 i)) i) :pattern ((t2tb15 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1)))) j)
     (= (t2tb15 (tb2t15 j)) j)) :pattern ((t2tb15 (tb2t15 j))) )))

(declare-fun t2tb16 ((tuple21 (set (tuple21 a b)) (set (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a b)) (set (tuple21 a b))))) (sort
  (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1))) (t2tb16 x))))

(declare-fun tb2t16 (uni) (tuple21 (set (tuple21 a b)) (set (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a b)) (set (tuple21 a b)))))
  (! (= (tb2t16 (t2tb16 i)) i) :pattern ((t2tb16 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1))) j)
     (= (t2tb16 (tb2t16 j)) j)) :pattern ((t2tb16 (tb2t16 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set (set (tuple21 a b))))
  (x (set (tuple21 a b))) (y (set (tuple21 a b))))
  (= (mem (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1)))
  (Tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1)) (t2tb11 x) (t2tb11 y))
  (times (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1)) (t2tb10 s) (t2tb10 t)))
  (and (mem4 x s) (mem4 y t)))))

(declare-fun t2tb17 ((set (tuple21 (set (tuple21 a b)) (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a b)) (tuple21 a b))))) (sort
  (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 b1))) (t2tb17 x))))

(declare-fun tb2t17 (uni) (set (tuple21 (set (tuple21 a b)) (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a b)) (tuple21 a b)))))
  (! (= (tb2t17 (t2tb17 i)) i) :pattern ((t2tb17 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 b1))) j)
     (= (t2tb17 (tb2t17 j)) j)) :pattern ((t2tb17 (tb2t17 j))) )))

(declare-fun t2tb18 ((tuple21 (set (tuple21 a b)) (tuple21 a b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a b)) (tuple21 a b)))) (sort
  (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 b1)) (t2tb18 x))))

(declare-fun tb2t18 (uni) (tuple21 (set (tuple21 a b)) (tuple21 a b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a b)) (tuple21 a b))))
  (! (= (tb2t18 (t2tb18 i)) i) :pattern ((t2tb18 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 b1)) j)
     (= (t2tb18 (tb2t18 j)) j)) :pattern ((t2tb18 (tb2t18 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set (tuple21 a b)))
  (x (set (tuple21 a b))) (y (tuple21 a b)))
  (= (mem (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 b1))
  (Tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 b1) (t2tb11 x) (t2tb13 y))
  (times (tuple2 a1 b1) (set1 (tuple2 a1 b1)) (t2tb10 s) (t2tb11 t)))
  (and (mem4 x s) (mem3 y t)))))

(declare-fun t2tb19 ((set (tuple21 (set (tuple21 a b)) b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a b)) b)))) (sort
  (set1 (tuple2 (set1 (tuple2 a1 b1)) b1)) (t2tb19 x))))

(declare-fun tb2t19 (uni) (set (tuple21 (set (tuple21 a b)) b)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a b)) b))))
  (! (= (tb2t19 (t2tb19 i)) i) :pattern ((t2tb19 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 a1 b1)) b1)) j)
     (= (t2tb19 (tb2t19 j)) j)) :pattern ((t2tb19 (tb2t19 j))) )))

(declare-fun t2tb20 ((tuple21 (set (tuple21 a b)) b)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a b)) b))) (sort
  (tuple2 (set1 (tuple2 a1 b1)) b1) (t2tb20 x))))

(declare-fun tb2t20 (uni) (tuple21 (set (tuple21 a b)) b))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a b)) b)))
  (! (= (tb2t20 (t2tb20 i)) i) :pattern ((t2tb20 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 a1 b1)) b1) j)
     (= (t2tb20 (tb2t20 j)) j)) :pattern ((t2tb20 (tb2t20 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set b)) (x (set (tuple21 a b)))
  (y b))
  (= (mem (tuple2 (set1 (tuple2 a1 b1)) b1)
  (Tuple2 (set1 (tuple2 a1 b1)) b1 (t2tb11 x) (t2tb14 y))
  (times b1 (set1 (tuple2 a1 b1)) (t2tb10 s) (t2tb12 t)))
  (and (mem4 x s) (mem2 y t)))))

(declare-fun t2tb21 ((tuple21 (set (tuple21 a b)) a)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a b)) a))) (sort
  (tuple2 (set1 (tuple2 a1 b1)) a1) (t2tb21 x))))

(declare-fun tb2t21 (uni) (tuple21 (set (tuple21 a b)) a))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a b)) a)))
  (! (= (tb2t21 (t2tb21 i)) i) :pattern ((t2tb21 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 a1 b1)) a1) j)
     (= (t2tb21 (tb2t21 j)) j)) :pattern ((t2tb21 (tb2t21 j))) )))

(declare-fun t2tb22 ((set (tuple21 (set (tuple21 a b)) a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a b)) a)))) (sort
  (set1 (tuple2 (set1 (tuple2 a1 b1)) a1)) (t2tb22 x))))

(declare-fun tb2t22 (uni) (set (tuple21 (set (tuple21 a b)) a)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a b)) a))))
  (! (= (tb2t22 (t2tb22 i)) i) :pattern ((t2tb22 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 a1 b1)) a1)) j)
     (= (t2tb22 (tb2t22 j)) j)) :pattern ((t2tb22 (tb2t22 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set a)) (x (set (tuple21 a b)))
  (y a))
  (= (mem (tuple2 (set1 (tuple2 a1 b1)) a1)
  (Tuple2 (set1 (tuple2 a1 b1)) a1 (t2tb11 x) (t2tb2 y))
  (times a1 (set1 (tuple2 a1 b1)) (t2tb10 s) (t2tb1 t)))
  (and (mem4 x s) (mem1 y t)))))

;; mem_times
  (assert
  (forall ((b2 ty))
  (forall ((s (set (set (tuple21 a b)))) (t uni) (x (set (tuple21 a b)))
  (y uni))
  (= (mem (tuple2 (set1 (tuple2 a1 b1)) b2)
  (Tuple2 (set1 (tuple2 a1 b1)) b2 (t2tb11 x) y)
  (times b2 (set1 (tuple2 a1 b1)) (t2tb10 s) t))
  (and (mem4 x s) (mem b2 y t))))))

(declare-fun t2tb1225 ((set (tuple21 (tuple21 a b) (tuple21 a (tuple21 b
  c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) (tuple21 a (tuple21 b c)))))) (sort
  (set1 (tuple2 (tuple2 a1 b1) (tuple2 a1 (tuple2 b1 c1)))) (t2tb1225 x))))

(declare-fun tb2t1225 (uni) (set (tuple21 (tuple21 a b) (tuple21 a (tuple21 b
  c)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a b) (tuple21 a (tuple21 b c))))))
  (! (= (tb2t1225 (t2tb1225 i)) i) :pattern ((t2tb1225 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 b1) (tuple2 a1 (tuple2 b1 c1)))) j)
     (= (t2tb1225 (tb2t1225 j)) j)) :pattern ((t2tb1225 (tb2t1225 j))) )))

(declare-fun t2tb1226 ((tuple21 (tuple21 a b) (tuple21 a (tuple21 b
  c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a b) (tuple21 a (tuple21 b c))))) (sort
  (tuple2 (tuple2 a1 b1) (tuple2 a1 (tuple2 b1 c1))) (t2tb1226 x))))

(declare-fun tb2t1226 (uni) (tuple21 (tuple21 a b) (tuple21 a (tuple21 b
  c))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a b) (tuple21 a (tuple21 b c)))))
  (! (= (tb2t1226 (t2tb1226 i)) i) :pattern ((t2tb1226 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 b1) (tuple2 a1 (tuple2 b1 c1))) j)
     (= (t2tb1226 (tb2t1226 j)) j)) :pattern ((t2tb1226 (tb2t1226 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (tuple21 a (tuple21 b c))))
  (x (tuple21 a b)) (y (tuple21 a (tuple21 b c))))
  (= (mem (tuple2 (tuple2 a1 b1) (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 (tuple2 a1 b1) (tuple2 a1 (tuple2 b1 c1)) (t2tb13 x) (t2tb260 y))
  (times (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 b1) (t2tb11 s) (t2tb261 t)))
  (and (mem3 x s) (mem14 y t)))))

(declare-fun t2tb1227 ((set (tuple21 (tuple21 a b) (set (tuple21 a
  c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) (set (tuple21 a c)))))) (sort
  (set1 (tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 c1)))) (t2tb1227 x))))

(declare-fun tb2t1227 (uni) (set (tuple21 (tuple21 a b) (set (tuple21 a
  c)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a b) (set (tuple21 a c))))))
  (! (= (tb2t1227 (t2tb1227 i)) i) :pattern ((t2tb1227 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 c1)))) j)
     (= (t2tb1227 (tb2t1227 j)) j)) :pattern ((t2tb1227 (tb2t1227 j))) )))

(declare-fun t2tb1228 ((tuple21 (tuple21 a b) (set (tuple21 a c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a b) (set (tuple21 a c))))) (sort
  (tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 c1))) (t2tb1228 x))))

(declare-fun tb2t1228 (uni) (tuple21 (tuple21 a b) (set (tuple21 a c))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a b) (set (tuple21 a c)))))
  (! (= (tb2t1228 (t2tb1228 i)) i) :pattern ((t2tb1228 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 c1))) j)
     (= (t2tb1228 (tb2t1228 j)) j)) :pattern ((t2tb1228 (tb2t1228 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (set (tuple21 a c))))
  (x (tuple21 a b)) (y (set (tuple21 a c))))
  (= (mem (tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 c1)))
  (Tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 c1)) (t2tb13 x) (t2tb129 y))
  (times (set1 (tuple2 a1 c1)) (tuple2 a1 b1) (t2tb11 s) (t2tb128 t)))
  (and (mem3 x s) (mem11 y t)))))

(declare-fun t2tb238 ((set (tuple21 (tuple21 a b) (tuple21 a c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) (tuple21 a c))))) (sort
  (set1 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1))) (t2tb238 x))))

(declare-fun tb2t238 (uni) (set (tuple21 (tuple21 a b) (tuple21 a c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a b) (tuple21 a c)))))
  (! (= (tb2t238 (t2tb238 i)) i) :pattern ((t2tb238 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1))) j)
     (= (t2tb238 (tb2t238 j)) j)) :pattern ((t2tb238 (tb2t238 j))) )))

(declare-fun t2tb239 ((tuple21 (tuple21 a b) (tuple21 a c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a b) (tuple21 a c)))) (sort
  (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) (t2tb239 x))))

(declare-fun tb2t239 (uni) (tuple21 (tuple21 a b) (tuple21 a c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a b) (tuple21 a c))))
  (! (= (tb2t239 (t2tb239 i)) i) :pattern ((t2tb239 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) j)
     (= (t2tb239 (tb2t239 j)) j)) :pattern ((t2tb239 (tb2t239 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (tuple21 a c))) (x (tuple21 a b))
  (y (tuple21 a c)))
  (= (mem (tuple2 (tuple2 a1 b1) (tuple2 a1 c1))
  (Tuple2 (tuple2 a1 b1) (tuple2 a1 c1) (t2tb13 x) (t2tb133 y))
  (times (tuple2 a1 c1) (tuple2 a1 b1) (t2tb11 s) (t2tb129 t)))
  (and (mem3 x s) (mem10 y t)))))

(declare-fun t2tb244 ((tuple21 (tuple21 a b) c)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a b) c))) (sort (tuple2 (tuple2 a1 b1) c1)
  (t2tb244 x))))

(declare-fun tb2t244 (uni) (tuple21 (tuple21 a b) c))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a b) c)))
  (! (= (tb2t244 (t2tb244 i)) i) :pattern ((t2tb244 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 b1) c1) j) (= (t2tb244 (tb2t244 j)) j)) :pattern (
  (t2tb244 (tb2t244 j))) )))

(declare-fun t2tb245 ((set (tuple21 (tuple21 a b) c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) c)))) (sort
  (set1 (tuple2 (tuple2 a1 b1) c1)) (t2tb245 x))))

(declare-fun tb2t245 (uni) (set (tuple21 (tuple21 a b) c)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a b) c))))
  (! (= (tb2t245 (t2tb245 i)) i) :pattern ((t2tb245 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 b1) c1)) j)
     (= (t2tb245 (tb2t245 j)) j)) :pattern ((t2tb245 (tb2t245 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a b))) (t (set c)) (x (tuple21 a b)) (y c))
  (= (mem (tuple2 (tuple2 a1 b1) c1)
  (Tuple2 (tuple2 a1 b1) c1 (t2tb13 x) (t2tb135 y))
  (times c1 (tuple2 a1 b1) (t2tb11 s) (t2tb132 t)))
  (and (mem3 x s) (mem7 y t)))))

(declare-fun t2tb23 ((set (tuple21 (tuple21 a b) (set (tuple21 a b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) (set (tuple21 a b)))))) (sort
  (set1 (tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 b1)))) (t2tb23 x))))

(declare-fun tb2t23 (uni) (set (tuple21 (tuple21 a b) (set (tuple21 a b)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a b) (set (tuple21 a b))))))
  (! (= (tb2t23 (t2tb23 i)) i) :pattern ((t2tb23 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 b1)))) j)
     (= (t2tb23 (tb2t23 j)) j)) :pattern ((t2tb23 (tb2t23 j))) )))

(declare-fun t2tb24 ((tuple21 (tuple21 a b) (set (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a b) (set (tuple21 a b))))) (sort
  (tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 b1))) (t2tb24 x))))

(declare-fun tb2t24 (uni) (tuple21 (tuple21 a b) (set (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a b) (set (tuple21 a b)))))
  (! (= (tb2t24 (t2tb24 i)) i) :pattern ((t2tb24 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 b1))) j)
     (= (t2tb24 (tb2t24 j)) j)) :pattern ((t2tb24 (tb2t24 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (set (tuple21 a b))))
  (x (tuple21 a b)) (y (set (tuple21 a b))))
  (= (mem (tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 b1)))
  (Tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 b1)) (t2tb13 x) (t2tb11 y))
  (times (set1 (tuple2 a1 b1)) (tuple2 a1 b1) (t2tb11 s) (t2tb10 t)))
  (and (mem3 x s) (mem4 y t)))))

(declare-fun t2tb25 ((set (tuple21 (tuple21 a b) (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) (tuple21 a b))))) (sort
  (set1 (tuple2 (tuple2 a1 b1) (tuple2 a1 b1))) (t2tb25 x))))

(declare-fun tb2t25 (uni) (set (tuple21 (tuple21 a b) (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a b) (tuple21 a b)))))
  (! (= (tb2t25 (t2tb25 i)) i) :pattern ((t2tb25 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 b1) (tuple2 a1 b1))) j)
     (= (t2tb25 (tb2t25 j)) j)) :pattern ((t2tb25 (tb2t25 j))) )))

(declare-fun t2tb26 ((tuple21 (tuple21 a b) (tuple21 a b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a b) (tuple21 a b)))) (sort
  (tuple2 (tuple2 a1 b1) (tuple2 a1 b1)) (t2tb26 x))))

(declare-fun tb2t26 (uni) (tuple21 (tuple21 a b) (tuple21 a b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a b) (tuple21 a b))))
  (! (= (tb2t26 (t2tb26 i)) i) :pattern ((t2tb26 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 b1) (tuple2 a1 b1)) j)
     (= (t2tb26 (tb2t26 j)) j)) :pattern ((t2tb26 (tb2t26 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (tuple21 a b))) (x (tuple21 a b))
  (y (tuple21 a b)))
  (= (mem (tuple2 (tuple2 a1 b1) (tuple2 a1 b1))
  (Tuple2 (tuple2 a1 b1) (tuple2 a1 b1) (t2tb13 x) (t2tb13 y))
  (times (tuple2 a1 b1) (tuple2 a1 b1) (t2tb11 s) (t2tb11 t)))
  (and (mem3 x s) (mem3 y t)))))

(declare-fun t2tb27 ((set (tuple21 (tuple21 a b) b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) b)))) (sort
  (set1 (tuple2 (tuple2 a1 b1) b1)) (t2tb27 x))))

(declare-fun tb2t27 (uni) (set (tuple21 (tuple21 a b) b)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a b) b))))
  (! (= (tb2t27 (t2tb27 i)) i) :pattern ((t2tb27 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 b1) b1)) j)
     (= (t2tb27 (tb2t27 j)) j)) :pattern ((t2tb27 (tb2t27 j))) )))

(declare-fun t2tb28 ((tuple21 (tuple21 a b) b)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a b) b))) (sort (tuple2 (tuple2 a1 b1) b1)
  (t2tb28 x))))

(declare-fun tb2t28 (uni) (tuple21 (tuple21 a b) b))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a b) b)))
  (! (= (tb2t28 (t2tb28 i)) i) :pattern ((t2tb28 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 b1) b1) j) (= (t2tb28 (tb2t28 j)) j)) :pattern (
  (t2tb28 (tb2t28 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a b))) (t (set b)) (x (tuple21 a b)) (y b))
  (= (mem (tuple2 (tuple2 a1 b1) b1)
  (Tuple2 (tuple2 a1 b1) b1 (t2tb13 x) (t2tb14 y))
  (times b1 (tuple2 a1 b1) (t2tb11 s) (t2tb12 t)))
  (and (mem3 x s) (mem2 y t)))))

(declare-fun t2tb29 ((set (tuple21 (tuple21 a b) a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) a)))) (sort
  (set1 (tuple2 (tuple2 a1 b1) a1)) (t2tb29 x))))

(declare-fun tb2t29 (uni) (set (tuple21 (tuple21 a b) a)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a b) a))))
  (! (= (tb2t29 (t2tb29 i)) i) :pattern ((t2tb29 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 b1) a1)) j)
     (= (t2tb29 (tb2t29 j)) j)) :pattern ((t2tb29 (tb2t29 j))) )))

(declare-fun t2tb30 ((tuple21 (tuple21 a b) a)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a b) a))) (sort (tuple2 (tuple2 a1 b1) a1)
  (t2tb30 x))))

(declare-fun tb2t30 (uni) (tuple21 (tuple21 a b) a))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a b) a)))
  (! (= (tb2t30 (t2tb30 i)) i) :pattern ((t2tb30 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 b1) a1) j) (= (t2tb30 (tb2t30 j)) j)) :pattern (
  (t2tb30 (tb2t30 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a b))) (t (set a)) (x (tuple21 a b)) (y a))
  (= (mem (tuple2 (tuple2 a1 b1) a1)
  (Tuple2 (tuple2 a1 b1) a1 (t2tb13 x) (t2tb2 y))
  (times a1 (tuple2 a1 b1) (t2tb11 s) (t2tb1 t)))
  (and (mem3 x s) (mem1 y t)))))

;; mem_times
  (assert
  (forall ((b2 ty))
  (forall ((s (set (tuple21 a b))) (t uni) (x (tuple21 a b)) (y uni))
  (= (mem (tuple2 (tuple2 a1 b1) b2) (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) y)
  (times b2 (tuple2 a1 b1) (t2tb11 s) t)) (and (mem3 x s) (mem b2 y t))))))

(declare-fun t2tb1229 ((set (tuple21 b (tuple21 a (tuple21 b c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 b (tuple21 a (tuple21 b c)))))) (sort
  (set1 (tuple2 b1 (tuple2 a1 (tuple2 b1 c1)))) (t2tb1229 x))))

(declare-fun tb2t1229 (uni) (set (tuple21 b (tuple21 a (tuple21 b c)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 b (tuple21 a (tuple21 b c))))))
  (! (= (tb2t1229 (t2tb1229 i)) i) :pattern ((t2tb1229 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 b1 (tuple2 a1 (tuple2 b1 c1)))) j)
     (= (t2tb1229 (tb2t1229 j)) j)) :pattern ((t2tb1229 (tb2t1229 j))) )))

(declare-fun t2tb1230 ((tuple21 b (tuple21 a (tuple21 b c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 b (tuple21 a (tuple21 b c))))) (sort
  (tuple2 b1 (tuple2 a1 (tuple2 b1 c1))) (t2tb1230 x))))

(declare-fun tb2t1230 (uni) (tuple21 b (tuple21 a (tuple21 b c))))

;; BridgeL
  (assert
  (forall ((i (tuple21 b (tuple21 a (tuple21 b c)))))
  (! (= (tb2t1230 (t2tb1230 i)) i) :pattern ((t2tb1230 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 b1 (tuple2 a1 (tuple2 b1 c1))) j)
     (= (t2tb1230 (tb2t1230 j)) j)) :pattern ((t2tb1230 (tb2t1230 j))) )))

;; mem_times
  (assert
  (forall ((s (set b)) (t (set (tuple21 a (tuple21 b c)))) (x b)
  (y (tuple21 a (tuple21 b c))))
  (= (mem (tuple2 b1 (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 b1 (tuple2 a1 (tuple2 b1 c1)) (t2tb14 x) (t2tb260 y))
  (times (tuple2 a1 (tuple2 b1 c1)) b1 (t2tb12 s) (t2tb261 t)))
  (and (mem2 x s) (mem14 y t)))))

(declare-fun t2tb1231 ((tuple21 b (set (tuple21 a c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 b (set (tuple21 a c))))) (sort
  (tuple2 b1 (set1 (tuple2 a1 c1))) (t2tb1231 x))))

(declare-fun tb2t1231 (uni) (tuple21 b (set (tuple21 a c))))

;; BridgeL
  (assert
  (forall ((i (tuple21 b (set (tuple21 a c)))))
  (! (= (tb2t1231 (t2tb1231 i)) i) :pattern ((t2tb1231 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 b1 (set1 (tuple2 a1 c1))) j)
     (= (t2tb1231 (tb2t1231 j)) j)) :pattern ((t2tb1231 (tb2t1231 j))) )))

(declare-fun t2tb1232 ((set (tuple21 b (set (tuple21 a c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 b (set (tuple21 a c)))))) (sort
  (set1 (tuple2 b1 (set1 (tuple2 a1 c1)))) (t2tb1232 x))))

(declare-fun tb2t1232 (uni) (set (tuple21 b (set (tuple21 a c)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 b (set (tuple21 a c))))))
  (! (= (tb2t1232 (t2tb1232 i)) i) :pattern ((t2tb1232 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 b1 (set1 (tuple2 a1 c1)))) j)
     (= (t2tb1232 (tb2t1232 j)) j)) :pattern ((t2tb1232 (tb2t1232 j))) )))

;; mem_times
  (assert
  (forall ((s (set b)) (t (set (set (tuple21 a c)))) (x b) (y (set (tuple21 a
  c))))
  (= (mem (tuple2 b1 (set1 (tuple2 a1 c1)))
  (Tuple2 b1 (set1 (tuple2 a1 c1)) (t2tb14 x) (t2tb129 y))
  (times (set1 (tuple2 a1 c1)) b1 (t2tb12 s) (t2tb128 t)))
  (and (mem2 x s) (mem11 y t)))))

(declare-fun t2tb248 ((set (tuple21 b (tuple21 a c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 b (tuple21 a c))))) (sort
  (set1 (tuple2 b1 (tuple2 a1 c1))) (t2tb248 x))))

(declare-fun tb2t248 (uni) (set (tuple21 b (tuple21 a c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 b (tuple21 a c)))))
  (! (= (tb2t248 (t2tb248 i)) i) :pattern ((t2tb248 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 b1 (tuple2 a1 c1))) j)
     (= (t2tb248 (tb2t248 j)) j)) :pattern ((t2tb248 (tb2t248 j))) )))

(declare-fun t2tb249 ((tuple21 b (tuple21 a c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 b (tuple21 a c)))) (sort (tuple2 b1 (tuple2 a1 c1))
  (t2tb249 x))))

(declare-fun tb2t249 (uni) (tuple21 b (tuple21 a c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 b (tuple21 a c))))
  (! (= (tb2t249 (t2tb249 i)) i) :pattern ((t2tb249 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 b1 (tuple2 a1 c1)) j) (= (t2tb249 (tb2t249 j)) j)) :pattern (
  (t2tb249 (tb2t249 j))) )))

;; mem_times
  (assert
  (forall ((s (set b)) (t (set (tuple21 a c))) (x b) (y (tuple21 a c)))
  (= (mem (tuple2 b1 (tuple2 a1 c1))
  (Tuple2 b1 (tuple2 a1 c1) (t2tb14 x) (t2tb133 y))
  (times (tuple2 a1 c1) b1 (t2tb12 s) (t2tb129 t)))
  (and (mem2 x s) (mem10 y t)))))

(declare-fun t2tb131 ((set (tuple21 b c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 b c)))) (sort (set1 (tuple2 b1 c1)) (t2tb131 x))))

(declare-fun tb2t131 (uni) (set (tuple21 b c)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 b c))))
  (! (= (tb2t131 (t2tb131 i)) i) :pattern ((t2tb131 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 b1 c1)) j) (= (t2tb131 (tb2t131 j)) j)) :pattern (
  (t2tb131 (tb2t131 j))) )))

(declare-fun t2tb134 ((tuple21 b c)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 b c))) (sort (tuple2 b1 c1) (t2tb134 x))))

(declare-fun tb2t134 (uni) (tuple21 b c))

;; BridgeL
  (assert
  (forall ((i (tuple21 b c)))
  (! (= (tb2t134 (t2tb134 i)) i) :pattern ((t2tb134 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 b1 c1) j) (= (t2tb134 (tb2t134 j)) j)) :pattern (
  (t2tb134 (tb2t134 j))) )))

;; mem_times
  (assert
  (forall ((s (set b)) (t (set c)) (x b) (y c))
  (= (mem (tuple2 b1 c1) (Tuple2 b1 c1 (t2tb14 x) (t2tb135 y))
  (times c1 b1 (t2tb12 s) (t2tb132 t))) (and (mem2 x s) (mem7 y t)))))

(declare-fun t2tb31 ((set (tuple21 b (set (tuple21 a b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 b (set (tuple21 a b)))))) (sort
  (set1 (tuple2 b1 (set1 (tuple2 a1 b1)))) (t2tb31 x))))

(declare-fun tb2t31 (uni) (set (tuple21 b (set (tuple21 a b)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 b (set (tuple21 a b))))))
  (! (= (tb2t31 (t2tb31 i)) i) :pattern ((t2tb31 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 b1 (set1 (tuple2 a1 b1)))) j)
     (= (t2tb31 (tb2t31 j)) j)) :pattern ((t2tb31 (tb2t31 j))) )))

(declare-fun t2tb32 ((tuple21 b (set (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 b (set (tuple21 a b))))) (sort
  (tuple2 b1 (set1 (tuple2 a1 b1))) (t2tb32 x))))

(declare-fun tb2t32 (uni) (tuple21 b (set (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (tuple21 b (set (tuple21 a b)))))
  (! (= (tb2t32 (t2tb32 i)) i) :pattern ((t2tb32 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 b1 (set1 (tuple2 a1 b1))) j)
     (= (t2tb32 (tb2t32 j)) j)) :pattern ((t2tb32 (tb2t32 j))) )))

;; mem_times
  (assert
  (forall ((s (set b)) (t (set (set (tuple21 a b)))) (x b) (y (set (tuple21 a
  b))))
  (= (mem (tuple2 b1 (set1 (tuple2 a1 b1)))
  (Tuple2 b1 (set1 (tuple2 a1 b1)) (t2tb14 x) (t2tb11 y))
  (times (set1 (tuple2 a1 b1)) b1 (t2tb12 s) (t2tb10 t)))
  (and (mem2 x s) (mem4 y t)))))

(declare-fun t2tb33 ((tuple21 b (tuple21 a b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 b (tuple21 a b)))) (sort (tuple2 b1 (tuple2 a1 b1))
  (t2tb33 x))))

(declare-fun tb2t33 (uni) (tuple21 b (tuple21 a b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 b (tuple21 a b))))
  (! (= (tb2t33 (t2tb33 i)) i) :pattern ((t2tb33 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 b1 (tuple2 a1 b1)) j) (= (t2tb33 (tb2t33 j)) j)) :pattern (
  (t2tb33 (tb2t33 j))) )))

(declare-fun t2tb34 ((set (tuple21 b (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 b (tuple21 a b))))) (sort
  (set1 (tuple2 b1 (tuple2 a1 b1))) (t2tb34 x))))

(declare-fun tb2t34 (uni) (set (tuple21 b (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 b (tuple21 a b)))))
  (! (= (tb2t34 (t2tb34 i)) i) :pattern ((t2tb34 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 b1 (tuple2 a1 b1))) j)
     (= (t2tb34 (tb2t34 j)) j)) :pattern ((t2tb34 (tb2t34 j))) )))

;; mem_times
  (assert
  (forall ((s (set b)) (t (set (tuple21 a b))) (x b) (y (tuple21 a b)))
  (= (mem (tuple2 b1 (tuple2 a1 b1))
  (Tuple2 b1 (tuple2 a1 b1) (t2tb14 x) (t2tb13 y))
  (times (tuple2 a1 b1) b1 (t2tb12 s) (t2tb11 t)))
  (and (mem2 x s) (mem3 y t)))))

(declare-fun t2tb35 ((set (tuple21 b b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 b b)))) (sort (set1 (tuple2 b1 b1)) (t2tb35 x))))

(declare-fun tb2t35 (uni) (set (tuple21 b b)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 b b))))
  (! (= (tb2t35 (t2tb35 i)) i) :pattern ((t2tb35 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 b1 b1)) j) (= (t2tb35 (tb2t35 j)) j)) :pattern (
  (t2tb35 (tb2t35 j))) )))

(declare-fun t2tb36 ((tuple21 b b)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 b b))) (sort (tuple2 b1 b1) (t2tb36 x))))

(declare-fun tb2t36 (uni) (tuple21 b b))

;; BridgeL
  (assert
  (forall ((i (tuple21 b b)))
  (! (= (tb2t36 (t2tb36 i)) i) :pattern ((t2tb36 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 b1 b1) j) (= (t2tb36 (tb2t36 j)) j)) :pattern (
  (t2tb36 (tb2t36 j))) )))

;; mem_times
  (assert
  (forall ((s (set b)) (t (set b)) (x b) (y b))
  (= (mem (tuple2 b1 b1) (Tuple2 b1 b1 (t2tb14 x) (t2tb14 y))
  (times b1 b1 (t2tb12 s) (t2tb12 t))) (and (mem2 x s) (mem2 y t)))))

(declare-fun t2tb37 ((set (tuple21 b a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 b a)))) (sort (set1 (tuple2 b1 a1)) (t2tb37 x))))

(declare-fun tb2t37 (uni) (set (tuple21 b a)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 b a))))
  (! (= (tb2t37 (t2tb37 i)) i) :pattern ((t2tb37 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 b1 a1)) j) (= (t2tb37 (tb2t37 j)) j)) :pattern (
  (t2tb37 (tb2t37 j))) )))

(declare-fun t2tb38 ((tuple21 b a)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 b a))) (sort (tuple2 b1 a1) (t2tb38 x))))

(declare-fun tb2t38 (uni) (tuple21 b a))

;; BridgeL
  (assert
  (forall ((i (tuple21 b a)))
  (! (= (tb2t38 (t2tb38 i)) i) :pattern ((t2tb38 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 b1 a1) j) (= (t2tb38 (tb2t38 j)) j)) :pattern (
  (t2tb38 (tb2t38 j))) )))

;; mem_times
  (assert
  (forall ((s (set b)) (t (set a)) (x b) (y a))
  (= (mem (tuple2 b1 a1) (Tuple2 b1 a1 (t2tb14 x) (t2tb2 y))
  (times a1 b1 (t2tb12 s) (t2tb1 t))) (and (mem2 x s) (mem1 y t)))))

;; mem_times
  (assert
  (forall ((b2 ty))
  (forall ((s (set b)) (t uni) (x b) (y uni))
  (= (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) y)
  (times b2 b1 (t2tb12 s) t)) (and (mem2 x s) (mem b2 y t))))))

(declare-fun t2tb1233 ((set (tuple21 a (tuple21 a (tuple21 b c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (tuple21 a (tuple21 b c)))))) (sort
  (set1 (tuple2 a1 (tuple2 a1 (tuple2 b1 c1)))) (t2tb1233 x))))

(declare-fun tb2t1233 (uni) (set (tuple21 a (tuple21 a (tuple21 b c)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (tuple21 a (tuple21 b c))))))
  (! (= (tb2t1233 (t2tb1233 i)) i) :pattern ((t2tb1233 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (tuple2 a1 (tuple2 b1 c1)))) j)
     (= (t2tb1233 (tb2t1233 j)) j)) :pattern ((t2tb1233 (tb2t1233 j))) )))

(declare-fun t2tb1234 ((tuple21 a (tuple21 a (tuple21 b c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (tuple21 a (tuple21 b c))))) (sort
  (tuple2 a1 (tuple2 a1 (tuple2 b1 c1))) (t2tb1234 x))))

(declare-fun tb2t1234 (uni) (tuple21 a (tuple21 a (tuple21 b c))))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (tuple21 a (tuple21 b c)))))
  (! (= (tb2t1234 (t2tb1234 i)) i) :pattern ((t2tb1234 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (tuple2 a1 (tuple2 b1 c1))) j)
     (= (t2tb1234 (tb2t1234 j)) j)) :pattern ((t2tb1234 (tb2t1234 j))) )))

;; mem_times
  (assert
  (forall ((s (set a)) (t (set (tuple21 a (tuple21 b c)))) (x a)
  (y (tuple21 a (tuple21 b c))))
  (= (mem (tuple2 a1 (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 a1 (tuple2 a1 (tuple2 b1 c1)) (t2tb2 x) (t2tb260 y))
  (times (tuple2 a1 (tuple2 b1 c1)) a1 (t2tb1 s) (t2tb261 t)))
  (and (mem1 x s) (mem14 y t)))))

(declare-fun t2tb1235 ((set (tuple21 a (set (tuple21 a c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (set (tuple21 a c)))))) (sort
  (set1 (tuple2 a1 (set1 (tuple2 a1 c1)))) (t2tb1235 x))))

(declare-fun tb2t1235 (uni) (set (tuple21 a (set (tuple21 a c)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (set (tuple21 a c))))))
  (! (= (tb2t1235 (t2tb1235 i)) i) :pattern ((t2tb1235 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (set1 (tuple2 a1 c1)))) j)
     (= (t2tb1235 (tb2t1235 j)) j)) :pattern ((t2tb1235 (tb2t1235 j))) )))

(declare-fun t2tb1236 ((tuple21 a (set (tuple21 a c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (set (tuple21 a c))))) (sort
  (tuple2 a1 (set1 (tuple2 a1 c1))) (t2tb1236 x))))

(declare-fun tb2t1236 (uni) (tuple21 a (set (tuple21 a c))))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (set (tuple21 a c)))))
  (! (= (tb2t1236 (t2tb1236 i)) i) :pattern ((t2tb1236 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (set1 (tuple2 a1 c1))) j)
     (= (t2tb1236 (tb2t1236 j)) j)) :pattern ((t2tb1236 (tb2t1236 j))) )))

;; mem_times
  (assert
  (forall ((s (set a)) (t (set (set (tuple21 a c)))) (x a) (y (set (tuple21 a
  c))))
  (= (mem (tuple2 a1 (set1 (tuple2 a1 c1)))
  (Tuple2 a1 (set1 (tuple2 a1 c1)) (t2tb2 x) (t2tb129 y))
  (times (set1 (tuple2 a1 c1)) a1 (t2tb1 s) (t2tb128 t)))
  (and (mem1 x s) (mem11 y t)))))

(declare-fun t2tb256 ((set (tuple21 a (tuple21 a c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (tuple21 a c))))) (sort
  (set1 (tuple2 a1 (tuple2 a1 c1))) (t2tb256 x))))

(declare-fun tb2t256 (uni) (set (tuple21 a (tuple21 a c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (tuple21 a c)))))
  (! (= (tb2t256 (t2tb256 i)) i) :pattern ((t2tb256 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (tuple2 a1 c1))) j)
     (= (t2tb256 (tb2t256 j)) j)) :pattern ((t2tb256 (tb2t256 j))) )))

(declare-fun t2tb257 ((tuple21 a (tuple21 a c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (tuple21 a c)))) (sort (tuple2 a1 (tuple2 a1 c1))
  (t2tb257 x))))

(declare-fun tb2t257 (uni) (tuple21 a (tuple21 a c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (tuple21 a c))))
  (! (= (tb2t257 (t2tb257 i)) i) :pattern ((t2tb257 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (tuple2 a1 c1)) j) (= (t2tb257 (tb2t257 j)) j)) :pattern (
  (t2tb257 (tb2t257 j))) )))

;; mem_times
  (assert
  (forall ((s (set a)) (t (set (tuple21 a c))) (x a) (y (tuple21 a c)))
  (= (mem (tuple2 a1 (tuple2 a1 c1))
  (Tuple2 a1 (tuple2 a1 c1) (t2tb2 x) (t2tb133 y))
  (times (tuple2 a1 c1) a1 (t2tb1 s) (t2tb129 t)))
  (and (mem1 x s) (mem10 y t)))))

;; mem_times
  (assert
  (forall ((s (set a)) (t (set (tuple21 b c))) (x a) (y (tuple21 b c)))
  (= (mem14 (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 y)))
  (tb2t261 (times (tuple2 b1 c1) a1 (t2tb1 s) (t2tb131 t))))
  (and (mem1 x s) (mem (tuple2 b1 c1) (t2tb134 y) (t2tb131 t))))))

;; mem_times
  (assert
  (forall ((s (set a)) (t (set c)) (x a) (y c))
  (= (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y)))
  (tb2t129 (times c1 a1 (t2tb1 s) (t2tb132 t)))) (and (mem1 x s) (mem7 y t)))))

(declare-fun t2tb39 ((set (tuple21 a (set (tuple21 a b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (set (tuple21 a b)))))) (sort
  (set1 (tuple2 a1 (set1 (tuple2 a1 b1)))) (t2tb39 x))))

(declare-fun tb2t39 (uni) (set (tuple21 a (set (tuple21 a b)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (set (tuple21 a b))))))
  (! (= (tb2t39 (t2tb39 i)) i) :pattern ((t2tb39 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (set1 (tuple2 a1 b1)))) j)
     (= (t2tb39 (tb2t39 j)) j)) :pattern ((t2tb39 (tb2t39 j))) )))

(declare-fun t2tb40 ((tuple21 a (set (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (set (tuple21 a b))))) (sort
  (tuple2 a1 (set1 (tuple2 a1 b1))) (t2tb40 x))))

(declare-fun tb2t40 (uni) (tuple21 a (set (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (set (tuple21 a b)))))
  (! (= (tb2t40 (t2tb40 i)) i) :pattern ((t2tb40 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (set1 (tuple2 a1 b1))) j)
     (= (t2tb40 (tb2t40 j)) j)) :pattern ((t2tb40 (tb2t40 j))) )))

;; mem_times
  (assert
  (forall ((s (set a)) (t (set (set (tuple21 a b)))) (x a) (y (set (tuple21 a
  b))))
  (= (mem (tuple2 a1 (set1 (tuple2 a1 b1)))
  (Tuple2 a1 (set1 (tuple2 a1 b1)) (t2tb2 x) (t2tb11 y))
  (times (set1 (tuple2 a1 b1)) a1 (t2tb1 s) (t2tb10 t)))
  (and (mem1 x s) (mem4 y t)))))

(declare-fun t2tb41 ((set (tuple21 a (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (tuple21 a b))))) (sort
  (set1 (tuple2 a1 (tuple2 a1 b1))) (t2tb41 x))))

(declare-fun tb2t41 (uni) (set (tuple21 a (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (tuple21 a b)))))
  (! (= (tb2t41 (t2tb41 i)) i) :pattern ((t2tb41 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (tuple2 a1 b1))) j)
     (= (t2tb41 (tb2t41 j)) j)) :pattern ((t2tb41 (tb2t41 j))) )))

(declare-fun t2tb42 ((tuple21 a (tuple21 a b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (tuple21 a b)))) (sort (tuple2 a1 (tuple2 a1 b1))
  (t2tb42 x))))

(declare-fun tb2t42 (uni) (tuple21 a (tuple21 a b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (tuple21 a b))))
  (! (= (tb2t42 (t2tb42 i)) i) :pattern ((t2tb42 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (tuple2 a1 b1)) j) (= (t2tb42 (tb2t42 j)) j)) :pattern (
  (t2tb42 (tb2t42 j))) )))

;; mem_times
  (assert
  (forall ((s (set a)) (t (set (tuple21 a b))) (x a) (y (tuple21 a b)))
  (= (mem (tuple2 a1 (tuple2 a1 b1))
  (Tuple2 a1 (tuple2 a1 b1) (t2tb2 x) (t2tb13 y))
  (times (tuple2 a1 b1) a1 (t2tb1 s) (t2tb11 t)))
  (and (mem1 x s) (mem3 y t)))))

;; mem_times
  (assert
  (forall ((s (set a)) (t (set b)) (x a) (y b))
  (= (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y)))
  (tb2t11 (times b1 a1 (t2tb1 s) (t2tb12 t)))) (and (mem1 x s) (mem2 y t)))))

(declare-fun t2tb4 ((set (tuple21 a a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a a)))) (sort (set1 (tuple2 a1 a1)) (t2tb4 x))))

(declare-fun tb2t4 (uni) (set (tuple21 a a)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a a))))
  (! (= (tb2t4 (t2tb4 i)) i) :pattern ((t2tb4 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 a1)) j) (= (t2tb4 (tb2t4 j)) j)) :pattern (
  (t2tb4 (tb2t4 j))) )))

(declare-fun t2tb5 ((tuple21 a a)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 a a))) (sort (tuple2 a1 a1) (t2tb5 x))))

(declare-fun tb2t5 (uni) (tuple21 a a))

;; BridgeL
  (assert
  (forall ((i (tuple21 a a)))
  (! (= (tb2t5 (t2tb5 i)) i) :pattern ((t2tb5 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 a1) j) (= (t2tb5 (tb2t5 j)) j)) :pattern ((t2tb5
                                                                    (tb2t5 j))) )))

;; mem_times
  (assert
  (forall ((s (set a)) (t (set a)) (x a) (y a))
  (= (mem (tuple2 a1 a1) (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y))
  (times a1 a1 (t2tb1 s) (t2tb1 t))) (and (mem1 x s) (mem1 y t)))))

;; mem_times
  (assert
  (forall ((b2 ty))
  (forall ((s (set a)) (t uni) (x a) (y uni))
  (= (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) y)
  (times b2 a1 (t2tb1 s) t)) (and (mem1 x s) (mem b2 y t))))))

;; mem_times
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (x uni) (y uni))
  (= (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) (times b2 a2 s t))
  (and (mem a2 x s) (mem b2 y t))))))

;; mem_power
  (assert
  (forall ((s (set (tuple21 a (tuple21 b c)))) (t (set (tuple21 a (tuple21 b
  c)))))
  (= (mem (set1 (tuple2 a1 (tuple2 b1 c1))) (t2tb261 s)
  (power (tuple2 a1 (tuple2 b1 c1)) (t2tb261 t)))
  (forall ((x (tuple21 a (tuple21 b c)))) (=> (mem14 x s) (mem14 x t))))))

;; mem_power
  (assert
  (forall ((s (set (set (tuple21 a c)))) (t (set (set (tuple21 a c)))))
  (= (mem (set1 (set1 (tuple2 a1 c1))) (t2tb128 s)
  (power (set1 (tuple2 a1 c1)) (t2tb128 t)))
  (forall ((x (set (tuple21 a c)))) (=> (mem11 x s) (mem11 x t))))))

;; mem_power
  (assert
  (forall ((s (set (tuple21 a c))) (t (set (tuple21 a c))))
  (= (mem11 s (tb2t128 (power (tuple2 a1 c1) (t2tb129 t))))
  (forall ((x (tuple21 a c))) (=> (mem10 x s) (mem10 x t))))))

;; mem_power
  (assert
  (forall ((s (set c)) (t (set c)))
  (= (mem (set1 c1) (t2tb132 s) (power c1 (t2tb132 t)))
  (forall ((x c)) (=> (mem7 x s) (mem7 x t))))))

;; mem_power
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set (set (tuple21 a b)))))
  (= (mem (set1 (set1 (tuple2 a1 b1))) (t2tb10 s)
  (power (set1 (tuple2 a1 b1)) (t2tb10 t)))
  (forall ((x (set (tuple21 a b)))) (=> (mem4 x s) (mem4 x t))))))

;; mem_power
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (tuple21 a b))))
  (= (mem4 s (tb2t10 (power (tuple2 a1 b1) (t2tb11 t))))
  (forall ((x (tuple21 a b))) (=> (mem3 x s) (mem3 x t))))))

;; mem_power
  (assert
  (forall ((s (set b)) (t (set b)))
  (= (mem (set1 b1) (t2tb12 s) (power b1 (t2tb12 t)))
  (forall ((x b)) (=> (mem2 x s) (mem2 x t))))))

;; mem_power
  (assert
  (forall ((s (set a)) (t (set a)))
  (= (mem (set1 a1) (t2tb1 s) (power a1 (t2tb1 t)))
  (forall ((x a)) (=> (mem1 x s) (mem1 x t))))))

;; mem_power
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t uni))
  (and
  (=> (mem (set1 a2) s (power a2 t))
  (forall ((x uni)) (=> (mem a2 x s) (mem a2 x t))))
  (=> (forall ((x uni)) (=> (sort a2 x) (=> (mem a2 x s) (mem a2 x t)))) (mem
  (set1 a2) s (power a2 t)))))))

;; mem_non_empty_power
  (assert
  (forall ((s (set (tuple21 a (tuple21 b c)))) (t (set (tuple21 a (tuple21 b
  c)))))
  (= (mem (set1 (tuple2 a1 (tuple2 b1 c1))) (t2tb261 s)
  (non_empty_power (tuple2 a1 (tuple2 b1 c1)) (t2tb261 t)))
  (and (forall ((x (tuple21 a (tuple21 b c)))) (=> (mem14 x s) (mem14 x t)))
  (not (infix_eqeq (tuple2 a1 (tuple2 b1 c1)) (t2tb261 s)
  (empty (tuple2 a1 (tuple2 b1 c1)))))))))

;; mem_non_empty_power
  (assert
  (forall ((s (set (set (tuple21 a c)))) (t (set (set (tuple21 a c)))))
  (= (mem (set1 (set1 (tuple2 a1 c1))) (t2tb128 s)
  (non_empty_power (set1 (tuple2 a1 c1)) (t2tb128 t)))
  (and (forall ((x (set (tuple21 a c)))) (=> (mem11 x s) (mem11 x t)))
  (not (infix_eqeq (set1 (tuple2 a1 c1)) (t2tb128 s)
  (empty (set1 (tuple2 a1 c1)))))))))

;; mem_non_empty_power
  (assert
  (forall ((s (set (tuple21 a c))) (t (set (tuple21 a c))))
  (= (mem11 s (tb2t128 (non_empty_power (tuple2 a1 c1) (t2tb129 t))))
  (and (forall ((x (tuple21 a c))) (=> (mem10 x s) (mem10 x t)))
  (not (infix_eqeq (tuple2 a1 c1) (t2tb129 s) (empty (tuple2 a1 c1))))))))

;; mem_non_empty_power
  (assert
  (forall ((s (set c)) (t (set c)))
  (= (mem (set1 c1) (t2tb132 s) (non_empty_power c1 (t2tb132 t)))
  (and (forall ((x c)) (=> (mem7 x s) (mem7 x t)))
  (not (infix_eqeq c1 (t2tb132 s) (empty c1)))))))

;; mem_non_empty_power
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set (set (tuple21 a b)))))
  (= (mem (set1 (set1 (tuple2 a1 b1))) (t2tb10 s)
  (non_empty_power (set1 (tuple2 a1 b1)) (t2tb10 t)))
  (and (forall ((x (set (tuple21 a b)))) (=> (mem4 x s) (mem4 x t)))
  (not (infix_eqeq (set1 (tuple2 a1 b1)) (t2tb10 s)
  (empty (set1 (tuple2 a1 b1)))))))))

;; mem_non_empty_power
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (tuple21 a b))))
  (= (mem4 s (tb2t10 (non_empty_power (tuple2 a1 b1) (t2tb11 t))))
  (and (forall ((x (tuple21 a b))) (=> (mem3 x s) (mem3 x t)))
  (not (infix_eqeq (tuple2 a1 b1) (t2tb11 s) (empty (tuple2 a1 b1))))))))

;; mem_non_empty_power
  (assert
  (forall ((s (set b)) (t (set b)))
  (= (mem (set1 b1) (t2tb12 s) (non_empty_power b1 (t2tb12 t)))
  (and (forall ((x b)) (=> (mem2 x s) (mem2 x t)))
  (not (infix_eqeq b1 (t2tb12 s) (empty b1)))))))

;; mem_non_empty_power
  (assert
  (forall ((s (set a)) (t (set a)))
  (= (mem (set1 a1) (t2tb1 s) (non_empty_power a1 (t2tb1 t)))
  (and (forall ((x a)) (=> (mem1 x s) (mem1 x t)))
  (not (infix_eqeq a1 (t2tb1 s) (empty a1)))))))

;; mem_non_empty_power
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t uni))
  (and
  (=> (mem (set1 a2) s (non_empty_power a2 t))
  (and (forall ((x uni)) (=> (mem a2 x s) (mem a2 x t)))
  (not (infix_eqeq a2 s (empty a2)))))
  (=>
  (and (forall ((x uni)) (=> (sort a2 x) (=> (mem a2 x s) (mem a2 x t))))
  (not (infix_eqeq a2 s (empty a2)))) (mem (set1 a2) s
  (non_empty_power a2 t)))))))

(declare-fun choose (ty uni) uni)

;; choose_sort
  (assert (forall ((a2 ty)) (forall ((x uni)) (sort a2 (choose a2 x)))))

(declare-fun relation (ty ty uni uni) uni)

;; relation_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (set1 (tuple2 a2 b2)))
  (relation b2 a2 x x1)))))

(declare-fun relation1 ((set a) (set b)) (set (set (tuple21 a b))))

(declare-fun relation3 ((set a) (set c)) (set (set (tuple21 a c))))

;; mem_relation
  (assert
  (forall ((a2 ty))
  (forall ((u uni) (v (set (tuple21 a (tuple21 b c)))) (r uni))
  (and
  (=> (mem (set1 (tuple2 a2 (tuple2 a1 (tuple2 b1 c1)))) r
  (relation (tuple2 a1 (tuple2 b1 c1)) a2 u (t2tb261 v)))
  (forall ((x uni) (y (tuple21 a (tuple21 b c))))
  (=> (mem (tuple2 a2 (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 a2 (tuple2 a1 (tuple2 b1 c1)) x (t2tb260 y)) r)
  (and (mem a2 x u) (mem14 y v)))))
  (=>
  (forall ((x uni) (y (tuple21 a (tuple21 b c))))
  (=> (sort a2 x)
  (=> (mem (tuple2 a2 (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 a2 (tuple2 a1 (tuple2 b1 c1)) x (t2tb260 y)) r)
  (and (mem a2 x u) (mem14 y v))))) (mem
  (set1 (tuple2 a2 (tuple2 a1 (tuple2 b1 c1)))) r
  (relation (tuple2 a1 (tuple2 b1 c1)) a2 u (t2tb261 v))))))))

;; mem_relation
  (assert
  (forall ((a2 ty))
  (forall ((u uni) (v (set (set (tuple21 a c)))) (r uni))
  (and
  (=> (mem (set1 (tuple2 a2 (set1 (tuple2 a1 c1)))) r
  (relation (set1 (tuple2 a1 c1)) a2 u (t2tb128 v)))
  (forall ((x uni) (y (set (tuple21 a c))))
  (=> (mem (tuple2 a2 (set1 (tuple2 a1 c1)))
  (Tuple2 a2 (set1 (tuple2 a1 c1)) x (t2tb129 y)) r)
  (and (mem a2 x u) (mem11 y v)))))
  (=>
  (forall ((x uni) (y (set (tuple21 a c))))
  (=> (sort a2 x)
  (=> (mem (tuple2 a2 (set1 (tuple2 a1 c1)))
  (Tuple2 a2 (set1 (tuple2 a1 c1)) x (t2tb129 y)) r)
  (and (mem a2 x u) (mem11 y v))))) (mem
  (set1 (tuple2 a2 (set1 (tuple2 a1 c1)))) r
  (relation (set1 (tuple2 a1 c1)) a2 u (t2tb128 v))))))))

;; mem_relation
  (assert
  (forall ((a2 ty))
  (forall ((u uni) (v (set (tuple21 a c))) (r uni))
  (and
  (=> (mem (set1 (tuple2 a2 (tuple2 a1 c1))) r
  (relation (tuple2 a1 c1) a2 u (t2tb129 v)))
  (forall ((x uni) (y (tuple21 a c)))
  (=> (mem (tuple2 a2 (tuple2 a1 c1))
  (Tuple2 a2 (tuple2 a1 c1) x (t2tb133 y)) r) (and (mem a2 x u) (mem10 y v)))))
  (=>
  (forall ((x uni) (y (tuple21 a c)))
  (=> (sort a2 x)
  (=> (mem (tuple2 a2 (tuple2 a1 c1))
  (Tuple2 a2 (tuple2 a1 c1) x (t2tb133 y)) r) (and (mem a2 x u) (mem10 y v)))))
  (mem (set1 (tuple2 a2 (tuple2 a1 c1))) r
  (relation (tuple2 a1 c1) a2 u (t2tb129 v))))))))

;; mem_relation
  (assert
  (forall ((a2 ty))
  (forall ((u uni) (v (set c)) (r uni))
  (and
  (=> (mem (set1 (tuple2 a2 c1)) r (relation c1 a2 u (t2tb132 v)))
  (forall ((x uni) (y c))
  (=> (mem (tuple2 a2 c1) (Tuple2 a2 c1 x (t2tb135 y)) r)
  (and (mem a2 x u) (mem7 y v)))))
  (=>
  (forall ((x uni) (y c))
  (=> (sort a2 x)
  (=> (mem (tuple2 a2 c1) (Tuple2 a2 c1 x (t2tb135 y)) r)
  (and (mem a2 x u) (mem7 y v))))) (mem (set1 (tuple2 a2 c1)) r
  (relation c1 a2 u (t2tb132 v))))))))

;; mem_relation
  (assert
  (forall ((a2 ty))
  (forall ((u uni) (v (set (set (tuple21 a b)))) (r uni))
  (and
  (=> (mem (set1 (tuple2 a2 (set1 (tuple2 a1 b1)))) r
  (relation (set1 (tuple2 a1 b1)) a2 u (t2tb10 v)))
  (forall ((x uni) (y (set (tuple21 a b))))
  (=> (mem (tuple2 a2 (set1 (tuple2 a1 b1)))
  (Tuple2 a2 (set1 (tuple2 a1 b1)) x (t2tb11 y)) r)
  (and (mem a2 x u) (mem4 y v)))))
  (=>
  (forall ((x uni) (y (set (tuple21 a b))))
  (=> (sort a2 x)
  (=> (mem (tuple2 a2 (set1 (tuple2 a1 b1)))
  (Tuple2 a2 (set1 (tuple2 a1 b1)) x (t2tb11 y)) r)
  (and (mem a2 x u) (mem4 y v))))) (mem
  (set1 (tuple2 a2 (set1 (tuple2 a1 b1)))) r
  (relation (set1 (tuple2 a1 b1)) a2 u (t2tb10 v))))))))

;; mem_relation
  (assert
  (forall ((a2 ty))
  (forall ((u uni) (v (set (tuple21 a b))) (r uni))
  (and
  (=> (mem (set1 (tuple2 a2 (tuple2 a1 b1))) r
  (relation (tuple2 a1 b1) a2 u (t2tb11 v)))
  (forall ((x uni) (y (tuple21 a b)))
  (=> (mem (tuple2 a2 (tuple2 a1 b1)) (Tuple2 a2 (tuple2 a1 b1) x (t2tb13 y))
  r) (and (mem a2 x u) (mem3 y v)))))
  (=>
  (forall ((x uni) (y (tuple21 a b)))
  (=> (sort a2 x)
  (=> (mem (tuple2 a2 (tuple2 a1 b1)) (Tuple2 a2 (tuple2 a1 b1) x (t2tb13 y))
  r) (and (mem a2 x u) (mem3 y v))))) (mem (set1 (tuple2 a2 (tuple2 a1 b1)))
  r (relation (tuple2 a1 b1) a2 u (t2tb11 v))))))))

;; mem_relation
  (assert
  (forall ((a2 ty))
  (forall ((u uni) (v (set b)) (r uni))
  (and
  (=> (mem (set1 (tuple2 a2 b1)) r (relation b1 a2 u (t2tb12 v)))
  (forall ((x uni) (y b))
  (=> (mem (tuple2 a2 b1) (Tuple2 a2 b1 x (t2tb14 y)) r)
  (and (mem a2 x u) (mem2 y v)))))
  (=>
  (forall ((x uni) (y b))
  (=> (sort a2 x)
  (=> (mem (tuple2 a2 b1) (Tuple2 a2 b1 x (t2tb14 y)) r)
  (and (mem a2 x u) (mem2 y v))))) (mem (set1 (tuple2 a2 b1)) r
  (relation b1 a2 u (t2tb12 v))))))))

;; mem_relation
  (assert
  (forall ((a2 ty))
  (forall ((u uni) (v (set a)) (r uni))
  (and
  (=> (mem (set1 (tuple2 a2 a1)) r (relation a1 a2 u (t2tb1 v)))
  (forall ((x uni) (y a))
  (=> (mem (tuple2 a2 a1) (Tuple2 a2 a1 x (t2tb2 y)) r)
  (and (mem a2 x u) (mem1 y v)))))
  (=>
  (forall ((x uni) (y a))
  (=> (sort a2 x)
  (=> (mem (tuple2 a2 a1) (Tuple2 a2 a1 x (t2tb2 y)) r)
  (and (mem a2 x u) (mem1 y v))))) (mem (set1 (tuple2 a2 a1)) r
  (relation a1 a2 u (t2tb1 v))))))))

(declare-fun t2tb1237 ((set (set (tuple21 (tuple21 a (tuple21 b c))
  (tuple21 a (tuple21 b c)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a (tuple21 b c)) (tuple21 a
  (tuple21 b c))))))) (sort
  (set1
  (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 (tuple2 b1 c1)))))
  (t2tb1237 x))))

(declare-fun tb2t1237 (uni) (set (set (tuple21 (tuple21 a (tuple21 b c))
  (tuple21 a (tuple21 b c))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a (tuple21 b c)) (tuple21 a
  (tuple21 b c)))))))
  (! (= (tb2t1237 (t2tb1237 i)) i) :pattern ((t2tb1237 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 (tuple2 b1 c1)))))
     j) (= (t2tb1237 (tb2t1237 j)) j)) :pattern ((t2tb1237 (tb2t1237 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a (tuple21 b c)))) (v (set (tuple21 a (tuple21 b
  c)))) (r (set (tuple21 (tuple21 a (tuple21 b c)) (tuple21 a (tuple21 b
  c))))))
  (= (mem
  (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 (tuple2 b1 c1))))
  (t2tb1181 r)
  (relation (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 (tuple2 b1 c1)) (t2tb261 u)
  (t2tb261 v)))
  (forall ((x (tuple21 a (tuple21 b c))) (y (tuple21 a (tuple21 b c))))
  (=> (mem (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 (tuple2 b1 c1)) (t2tb260 x)
  (t2tb260 y)) (t2tb1181 r)) (and (mem14 x u) (mem14 y v)))))))

(declare-fun t2tb1238 ((set (set (tuple21 (tuple21 a (tuple21 b c))
  (set (tuple21 a c)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a (tuple21 b c)) (set (tuple21 a
  c))))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) (set1 (tuple2 a1 c1)))))
  (t2tb1238 x))))

(declare-fun tb2t1238 (uni) (set (set (tuple21 (tuple21 a (tuple21 b c))
  (set (tuple21 a c))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a (tuple21 b c)) (set (tuple21 a
  c))))))) (! (= (tb2t1238 (t2tb1238 i)) i) :pattern ((t2tb1238 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) (set1 (tuple2 a1 c1)))))
     j) (= (t2tb1238 (tb2t1238 j)) j)) :pattern ((t2tb1238 (tb2t1238 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a (tuple21 b c)))) (v (set (set (tuple21 a c))))
  (r (set (tuple21 (tuple21 a (tuple21 b c)) (set (tuple21 a c))))))
  (= (mem (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) (set1 (tuple2 a1 c1))))
  (t2tb1183 r)
  (relation (set1 (tuple2 a1 c1)) (tuple2 a1 (tuple2 b1 c1)) (t2tb261 u)
  (t2tb128 v)))
  (forall ((x (tuple21 a (tuple21 b c))) (y (set (tuple21 a c))))
  (=> (mem (tuple2 (tuple2 a1 (tuple2 b1 c1)) (set1 (tuple2 a1 c1)))
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) (set1 (tuple2 a1 c1)) (t2tb260 x)
  (t2tb129 y)) (t2tb1183 r)) (and (mem14 x u) (mem11 y v)))))))

(declare-fun t2tb1239 ((set (set (tuple21 (tuple21 a (tuple21 b c))
  (tuple21 a c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a (tuple21 b c)) (tuple21 a c))))))
  (sort (set1 (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 c1))))
  (t2tb1239 x))))

(declare-fun tb2t1239 (uni) (set (set (tuple21 (tuple21 a (tuple21 b c))
  (tuple21 a c)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a (tuple21 b c)) (tuple21 a c))))))
  (! (= (tb2t1239 (t2tb1239 i)) i) :pattern ((t2tb1239 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 c1)))) j)
     (= (t2tb1239 (tb2t1239 j)) j)) :pattern ((t2tb1239 (tb2t1239 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a (tuple21 b c)))) (v (set (tuple21 a c)))
  (r (set (tuple21 (tuple21 a (tuple21 b c)) (tuple21 a c)))))
  (= (mem (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 c1)))
  (t2tb1185 r)
  (relation (tuple2 a1 c1) (tuple2 a1 (tuple2 b1 c1)) (t2tb261 u)
  (t2tb129 v)))
  (forall ((x (tuple21 a (tuple21 b c))) (y (tuple21 a c)))
  (=> (mem (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 c1))
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 c1) (t2tb260 x) (t2tb133 y))
  (t2tb1185 r)) (and (mem14 x u) (mem10 y v)))))))

(declare-fun t2tb1240 ((set (set (tuple21 (tuple21 a (tuple21 b c))
  c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a (tuple21 b c)) c))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) c1))) (t2tb1240 x))))

(declare-fun tb2t1240 (uni) (set (set (tuple21 (tuple21 a (tuple21 b c))
  c))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a (tuple21 b c)) c)))))
  (! (= (tb2t1240 (t2tb1240 i)) i) :pattern ((t2tb1240 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) c1))) j)
     (= (t2tb1240 (tb2t1240 j)) j)) :pattern ((t2tb1240 (tb2t1240 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a (tuple21 b c)))) (v (set c))
  (r (set (tuple21 (tuple21 a (tuple21 b c)) c))))
  (= (mem (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) c1)) (t2tb1188 r)
  (relation c1 (tuple2 a1 (tuple2 b1 c1)) (t2tb261 u) (t2tb132 v)))
  (forall ((x (tuple21 a (tuple21 b c))) (y c))
  (=> (mem (tuple2 (tuple2 a1 (tuple2 b1 c1)) c1)
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) c1 (t2tb260 x) (t2tb135 y))
  (t2tb1188 r)) (and (mem14 x u) (mem7 y v)))))))

(declare-fun t2tb1241 ((set (set (tuple21 (tuple21 a (tuple21 b c))
  (set (tuple21 a b)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a (tuple21 b c)) (set (tuple21 a
  b))))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) (set1 (tuple2 a1 b1)))))
  (t2tb1241 x))))

(declare-fun tb2t1241 (uni) (set (set (tuple21 (tuple21 a (tuple21 b c))
  (set (tuple21 a b))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a (tuple21 b c)) (set (tuple21 a
  b))))))) (! (= (tb2t1241 (t2tb1241 i)) i) :pattern ((t2tb1241 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) (set1 (tuple2 a1 b1)))))
     j) (= (t2tb1241 (tb2t1241 j)) j)) :pattern ((t2tb1241 (tb2t1241 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a (tuple21 b c)))) (v (set (set (tuple21 a b))))
  (r (set (tuple21 (tuple21 a (tuple21 b c)) (set (tuple21 a b))))))
  (= (mem (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) (set1 (tuple2 a1 b1))))
  (t2tb1189 r)
  (relation (set1 (tuple2 a1 b1)) (tuple2 a1 (tuple2 b1 c1)) (t2tb261 u)
  (t2tb10 v)))
  (forall ((x (tuple21 a (tuple21 b c))) (y (set (tuple21 a b))))
  (=> (mem (tuple2 (tuple2 a1 (tuple2 b1 c1)) (set1 (tuple2 a1 b1)))
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) (set1 (tuple2 a1 b1)) (t2tb260 x)
  (t2tb11 y)) (t2tb1189 r)) (and (mem14 x u) (mem4 y v)))))))

(declare-fun t2tb1242 ((set (set (tuple21 (tuple21 a (tuple21 b c))
  (tuple21 a b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a (tuple21 b c)) (tuple21 a b))))))
  (sort (set1 (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 b1))))
  (t2tb1242 x))))

(declare-fun tb2t1242 (uni) (set (set (tuple21 (tuple21 a (tuple21 b c))
  (tuple21 a b)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a (tuple21 b c)) (tuple21 a b))))))
  (! (= (tb2t1242 (t2tb1242 i)) i) :pattern ((t2tb1242 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 b1)))) j)
     (= (t2tb1242 (tb2t1242 j)) j)) :pattern ((t2tb1242 (tb2t1242 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a (tuple21 b c)))) (v (set (tuple21 a b)))
  (r (set (tuple21 (tuple21 a (tuple21 b c)) (tuple21 a b)))))
  (= (mem (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 b1)))
  (t2tb1191 r)
  (relation (tuple2 a1 b1) (tuple2 a1 (tuple2 b1 c1)) (t2tb261 u) (t2tb11 v)))
  (forall ((x (tuple21 a (tuple21 b c))) (y (tuple21 a b)))
  (=> (mem (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 b1))
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 b1) (t2tb260 x) (t2tb13 y))
  (t2tb1191 r)) (and (mem14 x u) (mem3 y v)))))))

(declare-fun t2tb1243 ((set (set (tuple21 (tuple21 a (tuple21 b c))
  b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a (tuple21 b c)) b))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) b1))) (t2tb1243 x))))

(declare-fun tb2t1243 (uni) (set (set (tuple21 (tuple21 a (tuple21 b c))
  b))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a (tuple21 b c)) b)))))
  (! (= (tb2t1243 (t2tb1243 i)) i) :pattern ((t2tb1243 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) b1))) j)
     (= (t2tb1243 (tb2t1243 j)) j)) :pattern ((t2tb1243 (tb2t1243 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a (tuple21 b c)))) (v (set b))
  (r (set (tuple21 (tuple21 a (tuple21 b c)) b))))
  (= (mem (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) b1)) (t2tb1193 r)
  (relation b1 (tuple2 a1 (tuple2 b1 c1)) (t2tb261 u) (t2tb12 v)))
  (forall ((x (tuple21 a (tuple21 b c))) (y b))
  (=> (mem (tuple2 (tuple2 a1 (tuple2 b1 c1)) b1)
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) b1 (t2tb260 x) (t2tb14 y)) (t2tb1193 r))
  (and (mem14 x u) (mem2 y v)))))))

(declare-fun t2tb1244 ((set (set (tuple21 (tuple21 a (tuple21 b c))
  a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a (tuple21 b c)) a))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) a1))) (t2tb1244 x))))

(declare-fun tb2t1244 (uni) (set (set (tuple21 (tuple21 a (tuple21 b c))
  a))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a (tuple21 b c)) a)))))
  (! (= (tb2t1244 (t2tb1244 i)) i) :pattern ((t2tb1244 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) a1))) j)
     (= (t2tb1244 (tb2t1244 j)) j)) :pattern ((t2tb1244 (tb2t1244 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a (tuple21 b c)))) (v (set a))
  (r (set (tuple21 (tuple21 a (tuple21 b c)) a))))
  (= (mem (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) a1)) (t2tb1195 r)
  (relation a1 (tuple2 a1 (tuple2 b1 c1)) (t2tb261 u) (t2tb1 v)))
  (forall ((x (tuple21 a (tuple21 b c))) (y a))
  (=> (mem (tuple2 (tuple2 a1 (tuple2 b1 c1)) a1)
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) a1 (t2tb260 x) (t2tb2 y)) (t2tb1195 r))
  (and (mem14 x u) (mem1 y v)))))))

;; mem_relation
  (assert
  (forall ((b2 ty))
  (forall ((u (set (tuple21 a (tuple21 b c)))) (v uni) (r uni))
  (and
  (=> (mem (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) b2)) r
  (relation b2 (tuple2 a1 (tuple2 b1 c1)) (t2tb261 u) v))
  (forall ((x (tuple21 a (tuple21 b c))) (y uni))
  (=> (mem (tuple2 (tuple2 a1 (tuple2 b1 c1)) b2)
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) b2 (t2tb260 x) y) r)
  (and (mem14 x u) (mem b2 y v)))))
  (=>
  (forall ((x (tuple21 a (tuple21 b c))) (y uni))
  (=> (sort b2 y)
  (=> (mem (tuple2 (tuple2 a1 (tuple2 b1 c1)) b2)
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) b2 (t2tb260 x) y) r)
  (and (mem14 x u) (mem b2 y v))))) (mem
  (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) b2)) r
  (relation b2 (tuple2 a1 (tuple2 b1 c1)) (t2tb261 u) v)))))))

(declare-fun t2tb1245 ((set (set (tuple21 (set (tuple21 a c)) (tuple21 a
  (tuple21 b c)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a c)) (tuple21 a (tuple21 b
  c))))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 (tuple2 b1 c1)))))
  (t2tb1245 x))))

(declare-fun tb2t1245 (uni) (set (set (tuple21 (set (tuple21 a c)) (tuple21 a
  (tuple21 b c))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a c)) (tuple21 a (tuple21 b
  c))))))) (! (= (tb2t1245 (t2tb1245 i)) i) :pattern ((t2tb1245 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 (tuple2 b1 c1)))))
     j) (= (t2tb1245 (tb2t1245 j)) j)) :pattern ((t2tb1245 (tb2t1245 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a c)))) (v (set (tuple21 a (tuple21 b c))))
  (r (set (tuple21 (set (tuple21 a c)) (tuple21 a (tuple21 b c))))))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 (tuple2 b1 c1))))
  (t2tb1197 r)
  (relation (tuple2 a1 (tuple2 b1 c1)) (set1 (tuple2 a1 c1)) (t2tb128 u)
  (t2tb261 v)))
  (forall ((x (set (tuple21 a c))) (y (tuple21 a (tuple21 b c))))
  (=> (mem (tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 (tuple2 b1 c1)) (t2tb129 x)
  (t2tb260 y)) (t2tb1197 r)) (and (mem11 x u) (mem14 y v)))))))

(declare-fun t2tb1246 ((set (set (tuple21 (set (tuple21 a c)) (set (tuple21 a
  c)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a c)) (set (tuple21 a c)))))))
  (sort (set1 (set1 (tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 a1 c1)))))
  (t2tb1246 x))))

(declare-fun tb2t1246 (uni) (set (set (tuple21 (set (tuple21 a c))
  (set (tuple21 a c))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a c)) (set (tuple21 a c)))))))
  (! (= (tb2t1246 (t2tb1246 i)) i) :pattern ((t2tb1246 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 a1 c1))))) j)
     (= (t2tb1246 (tb2t1246 j)) j)) :pattern ((t2tb1246 (tb2t1246 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a c)))) (v (set (set (tuple21 a c))))
  (r (set (tuple21 (set (tuple21 a c)) (set (tuple21 a c))))))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 a1 c1))))
  (t2tb1199 r)
  (relation (set1 (tuple2 a1 c1)) (set1 (tuple2 a1 c1)) (t2tb128 u)
  (t2tb128 v)))
  (forall ((x (set (tuple21 a c))) (y (set (tuple21 a c))))
  (=> (mem (tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 a1 c1)))
  (Tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 a1 c1)) (t2tb129 x)
  (t2tb129 y)) (t2tb1199 r)) (and (mem11 x u) (mem11 y v)))))))

(declare-fun t2tb1247 ((set (set (tuple21 (set (tuple21 a c)) (tuple21 a
  c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a c)) (tuple21 a c)))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 c1)))) (t2tb1247 x))))

(declare-fun tb2t1247 (uni) (set (set (tuple21 (set (tuple21 a c)) (tuple21 a
  c)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a c)) (tuple21 a c))))))
  (! (= (tb2t1247 (t2tb1247 i)) i) :pattern ((t2tb1247 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 c1)))) j)
     (= (t2tb1247 (tb2t1247 j)) j)) :pattern ((t2tb1247 (tb2t1247 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a c)))) (v (set (tuple21 a c)))
  (r (set (tuple21 (set (tuple21 a c)) (tuple21 a c)))))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 c1))) (t2tb1202 r)
  (relation (tuple2 a1 c1) (set1 (tuple2 a1 c1)) (t2tb128 u) (t2tb129 v)))
  (forall ((x (set (tuple21 a c))) (y (tuple21 a c)))
  (=> (mem (tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 c1))
  (Tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 c1) (t2tb129 x) (t2tb133 y))
  (t2tb1202 r)) (and (mem11 x u) (mem10 y v)))))))

(declare-fun t2tb1248 ((set (set (tuple21 (set (tuple21 a c)) c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a c)) c))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 a1 c1)) c1))) (t2tb1248 x))))

(declare-fun tb2t1248 (uni) (set (set (tuple21 (set (tuple21 a c)) c))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a c)) c)))))
  (! (= (tb2t1248 (t2tb1248 i)) i) :pattern ((t2tb1248 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 a1 c1)) c1))) j)
     (= (t2tb1248 (tb2t1248 j)) j)) :pattern ((t2tb1248 (tb2t1248 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a c)))) (v (set c))
  (r (set (tuple21 (set (tuple21 a c)) c))))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 c1)) c1)) (t2tb1203 r)
  (relation c1 (set1 (tuple2 a1 c1)) (t2tb128 u) (t2tb132 v)))
  (forall ((x (set (tuple21 a c))) (y c))
  (=> (mem (tuple2 (set1 (tuple2 a1 c1)) c1)
  (Tuple2 (set1 (tuple2 a1 c1)) c1 (t2tb129 x) (t2tb135 y)) (t2tb1203 r))
  (and (mem11 x u) (mem7 y v)))))))

(declare-fun t2tb1249 ((set (set (tuple21 (set (tuple21 a c)) (set (tuple21 a
  b)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a c)) (set (tuple21 a b)))))))
  (sort (set1 (set1 (tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 a1 b1)))))
  (t2tb1249 x))))

(declare-fun tb2t1249 (uni) (set (set (tuple21 (set (tuple21 a c))
  (set (tuple21 a b))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a c)) (set (tuple21 a b)))))))
  (! (= (tb2t1249 (t2tb1249 i)) i) :pattern ((t2tb1249 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 a1 b1))))) j)
     (= (t2tb1249 (tb2t1249 j)) j)) :pattern ((t2tb1249 (tb2t1249 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a c)))) (v (set (set (tuple21 a b))))
  (r (set (tuple21 (set (tuple21 a c)) (set (tuple21 a b))))))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 a1 b1))))
  (t2tb1205 r)
  (relation (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 c1)) (t2tb128 u)
  (t2tb10 v)))
  (forall ((x (set (tuple21 a c))) (y (set (tuple21 a b))))
  (=> (mem (tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 a1 b1)))
  (Tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 a1 b1)) (t2tb129 x) (t2tb11 y))
  (t2tb1205 r)) (and (mem11 x u) (mem4 y v)))))))

(declare-fun t2tb1250 ((set (set (tuple21 (set (tuple21 a c)) (tuple21 a
  b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a c)) (tuple21 a b)))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 b1)))) (t2tb1250 x))))

(declare-fun tb2t1250 (uni) (set (set (tuple21 (set (tuple21 a c)) (tuple21 a
  b)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a c)) (tuple21 a b))))))
  (! (= (tb2t1250 (t2tb1250 i)) i) :pattern ((t2tb1250 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 b1)))) j)
     (= (t2tb1250 (tb2t1250 j)) j)) :pattern ((t2tb1250 (tb2t1250 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a c)))) (v (set (tuple21 a b)))
  (r (set (tuple21 (set (tuple21 a c)) (tuple21 a b)))))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 b1))) (t2tb1207 r)
  (relation (tuple2 a1 b1) (set1 (tuple2 a1 c1)) (t2tb128 u) (t2tb11 v)))
  (forall ((x (set (tuple21 a c))) (y (tuple21 a b)))
  (=> (mem (tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 b1))
  (Tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 b1) (t2tb129 x) (t2tb13 y))
  (t2tb1207 r)) (and (mem11 x u) (mem3 y v)))))))

(declare-fun t2tb1251 ((set (set (tuple21 (set (tuple21 a c)) b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a c)) b))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 a1 c1)) b1))) (t2tb1251 x))))

(declare-fun tb2t1251 (uni) (set (set (tuple21 (set (tuple21 a c)) b))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a c)) b)))))
  (! (= (tb2t1251 (t2tb1251 i)) i) :pattern ((t2tb1251 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 a1 c1)) b1))) j)
     (= (t2tb1251 (tb2t1251 j)) j)) :pattern ((t2tb1251 (tb2t1251 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a c)))) (v (set b))
  (r (set (tuple21 (set (tuple21 a c)) b))))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 c1)) b1)) (t2tb1209 r)
  (relation b1 (set1 (tuple2 a1 c1)) (t2tb128 u) (t2tb12 v)))
  (forall ((x (set (tuple21 a c))) (y b))
  (=> (mem (tuple2 (set1 (tuple2 a1 c1)) b1)
  (Tuple2 (set1 (tuple2 a1 c1)) b1 (t2tb129 x) (t2tb14 y)) (t2tb1209 r))
  (and (mem11 x u) (mem2 y v)))))))

(declare-fun t2tb1252 ((set (set (tuple21 (set (tuple21 a c)) a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a c)) a))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 a1 c1)) a1))) (t2tb1252 x))))

(declare-fun tb2t1252 (uni) (set (set (tuple21 (set (tuple21 a c)) a))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a c)) a)))))
  (! (= (tb2t1252 (t2tb1252 i)) i) :pattern ((t2tb1252 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 a1 c1)) a1))) j)
     (= (t2tb1252 (tb2t1252 j)) j)) :pattern ((t2tb1252 (tb2t1252 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a c)))) (v (set a))
  (r (set (tuple21 (set (tuple21 a c)) a))))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 c1)) a1)) (t2tb1211 r)
  (relation a1 (set1 (tuple2 a1 c1)) (t2tb128 u) (t2tb1 v)))
  (forall ((x (set (tuple21 a c))) (y a))
  (=> (mem (tuple2 (set1 (tuple2 a1 c1)) a1)
  (Tuple2 (set1 (tuple2 a1 c1)) a1 (t2tb129 x) (t2tb2 y)) (t2tb1211 r))
  (and (mem11 x u) (mem1 y v)))))))

;; mem_relation
  (assert
  (forall ((b2 ty))
  (forall ((u (set (set (tuple21 a c)))) (v uni) (r uni))
  (and
  (=> (mem (set1 (tuple2 (set1 (tuple2 a1 c1)) b2)) r
  (relation b2 (set1 (tuple2 a1 c1)) (t2tb128 u) v))
  (forall ((x (set (tuple21 a c))) (y uni))
  (=> (mem (tuple2 (set1 (tuple2 a1 c1)) b2)
  (Tuple2 (set1 (tuple2 a1 c1)) b2 (t2tb129 x) y) r)
  (and (mem11 x u) (mem b2 y v)))))
  (=>
  (forall ((x (set (tuple21 a c))) (y uni))
  (=> (sort b2 y)
  (=> (mem (tuple2 (set1 (tuple2 a1 c1)) b2)
  (Tuple2 (set1 (tuple2 a1 c1)) b2 (t2tb129 x) y) r)
  (and (mem11 x u) (mem b2 y v))))) (mem
  (set1 (tuple2 (set1 (tuple2 a1 c1)) b2)) r
  (relation b2 (set1 (tuple2 a1 c1)) (t2tb128 u) v)))))))

(declare-fun t2tb1253 ((set (set (tuple21 (tuple21 a c) (tuple21 a (tuple21 b
  c)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a c) (tuple21 a (tuple21 b c)))))))
  (sort (set1 (set1 (tuple2 (tuple2 a1 c1) (tuple2 a1 (tuple2 b1 c1)))))
  (t2tb1253 x))))

(declare-fun tb2t1253 (uni) (set (set (tuple21 (tuple21 a c) (tuple21 a
  (tuple21 b c))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a c) (tuple21 a (tuple21 b c)))))))
  (! (= (tb2t1253 (t2tb1253 i)) i) :pattern ((t2tb1253 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (tuple2 a1 c1) (tuple2 a1 (tuple2 b1 c1))))) j)
     (= (t2tb1253 (tb2t1253 j)) j)) :pattern ((t2tb1253 (tb2t1253 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a c))) (v (set (tuple21 a (tuple21 b c))))
  (r (set (tuple21 (tuple21 a c) (tuple21 a (tuple21 b c))))))
  (= (mem (set1 (tuple2 (tuple2 a1 c1) (tuple2 a1 (tuple2 b1 c1))))
  (t2tb1213 r)
  (relation (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 c1) (t2tb129 u)
  (t2tb261 v)))
  (forall ((x (tuple21 a c)) (y (tuple21 a (tuple21 b c))))
  (=> (mem (tuple2 (tuple2 a1 c1) (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 (tuple2 a1 c1) (tuple2 a1 (tuple2 b1 c1)) (t2tb133 x) (t2tb260 y))
  (t2tb1213 r)) (and (mem10 x u) (mem14 y v)))))))

(declare-fun t2tb1254 ((set (set (tuple21 (tuple21 a c) (set (tuple21 a
  c)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a c) (set (tuple21 a c))))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 c1) (set1 (tuple2 a1 c1))))) (t2tb1254 x))))

(declare-fun tb2t1254 (uni) (set (set (tuple21 (tuple21 a c) (set (tuple21 a
  c))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a c) (set (tuple21 a c)))))))
  (! (= (tb2t1254 (t2tb1254 i)) i) :pattern ((t2tb1254 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 c1) (set1 (tuple2 a1 c1))))) j)
     (= (t2tb1254 (tb2t1254 j)) j)) :pattern ((t2tb1254 (tb2t1254 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a c))) (v (set (set (tuple21 a c))))
  (r (set (tuple21 (tuple21 a c) (set (tuple21 a c))))))
  (= (mem (set1 (tuple2 (tuple2 a1 c1) (set1 (tuple2 a1 c1)))) (t2tb1216 r)
  (relation (set1 (tuple2 a1 c1)) (tuple2 a1 c1) (t2tb129 u) (t2tb128 v)))
  (forall ((x (tuple21 a c)) (y (set (tuple21 a c))))
  (=> (mem (tuple2 (tuple2 a1 c1) (set1 (tuple2 a1 c1)))
  (Tuple2 (tuple2 a1 c1) (set1 (tuple2 a1 c1)) (t2tb133 x) (t2tb129 y))
  (t2tb1216 r)) (and (mem10 x u) (mem11 y v)))))))

(declare-fun t2tb275 ((set (set (tuple21 (tuple21 a c) (tuple21 a c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a c) (tuple21 a c)))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 c1) (tuple2 a1 c1)))) (t2tb275 x))))

(declare-fun tb2t275 (uni) (set (set (tuple21 (tuple21 a c) (tuple21 a c)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a c) (tuple21 a c))))))
  (! (= (tb2t275 (t2tb275 i)) i) :pattern ((t2tb275 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 c1) (tuple2 a1 c1)))) j)
     (= (t2tb275 (tb2t275 j)) j)) :pattern ((t2tb275 (tb2t275 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a c))) (v (set (tuple21 a c)))
  (r (set (tuple21 (tuple21 a c) (tuple21 a c)))))
  (= (mem (set1 (tuple2 (tuple2 a1 c1) (tuple2 a1 c1))) (t2tb157 r)
  (relation (tuple2 a1 c1) (tuple2 a1 c1) (t2tb129 u) (t2tb129 v)))
  (forall ((x (tuple21 a c)) (y (tuple21 a c)))
  (=> (mem (tuple2 (tuple2 a1 c1) (tuple2 a1 c1))
  (Tuple2 (tuple2 a1 c1) (tuple2 a1 c1) (t2tb133 x) (t2tb133 y)) (t2tb157 r))
  (and (mem10 x u) (mem10 y v)))))))

(declare-fun t2tb278 ((set (set (tuple21 (tuple21 a c) c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a c) c))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 c1) c1))) (t2tb278 x))))

(declare-fun tb2t278 (uni) (set (set (tuple21 (tuple21 a c) c))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a c) c)))))
  (! (= (tb2t278 (t2tb278 i)) i) :pattern ((t2tb278 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 c1) c1))) j)
     (= (t2tb278 (tb2t278 j)) j)) :pattern ((t2tb278 (tb2t278 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a c))) (v (set c)) (r (set (tuple21 (tuple21 a c)
  c))))
  (= (mem (set1 (tuple2 (tuple2 a1 c1) c1)) (t2tb162 r)
  (relation c1 (tuple2 a1 c1) (t2tb129 u) (t2tb132 v)))
  (forall ((x (tuple21 a c)) (y c))
  (=> (mem (tuple2 (tuple2 a1 c1) c1)
  (Tuple2 (tuple2 a1 c1) c1 (t2tb133 x) (t2tb135 y)) (t2tb162 r))
  (and (mem10 x u) (mem7 y v)))))))

(declare-fun t2tb279 ((set (set (tuple21 (tuple21 a c) (set (tuple21 a
  b)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a c) (set (tuple21 a b))))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 c1) (set1 (tuple2 a1 b1))))) (t2tb279 x))))

(declare-fun tb2t279 (uni) (set (set (tuple21 (tuple21 a c) (set (tuple21 a
  b))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a c) (set (tuple21 a b)))))))
  (! (= (tb2t279 (t2tb279 i)) i) :pattern ((t2tb279 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 c1) (set1 (tuple2 a1 b1))))) j)
     (= (t2tb279 (tb2t279 j)) j)) :pattern ((t2tb279 (tb2t279 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a c))) (v (set (set (tuple21 a b))))
  (r (set (tuple21 (tuple21 a c) (set (tuple21 a b))))))
  (= (mem (set1 (tuple2 (tuple2 a1 c1) (set1 (tuple2 a1 b1)))) (t2tb164 r)
  (relation (set1 (tuple2 a1 b1)) (tuple2 a1 c1) (t2tb129 u) (t2tb10 v)))
  (forall ((x (tuple21 a c)) (y (set (tuple21 a b))))
  (=> (mem (tuple2 (tuple2 a1 c1) (set1 (tuple2 a1 b1)))
  (Tuple2 (tuple2 a1 c1) (set1 (tuple2 a1 b1)) (t2tb133 x) (t2tb11 y))
  (t2tb164 r)) (and (mem10 x u) (mem4 y v)))))))

(declare-fun t2tb280 ((set (set (tuple21 (tuple21 a c) (tuple21 a b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a c) (tuple21 a b)))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 c1) (tuple2 a1 b1)))) (t2tb280 x))))

(declare-fun tb2t280 (uni) (set (set (tuple21 (tuple21 a c) (tuple21 a b)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a c) (tuple21 a b))))))
  (! (= (tb2t280 (t2tb280 i)) i) :pattern ((t2tb280 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 c1) (tuple2 a1 b1)))) j)
     (= (t2tb280 (tb2t280 j)) j)) :pattern ((t2tb280 (tb2t280 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a c))) (v (set (tuple21 a b)))
  (r (set (tuple21 (tuple21 a c) (tuple21 a b)))))
  (= (mem (set1 (tuple2 (tuple2 a1 c1) (tuple2 a1 b1))) (t2tb166 r)
  (relation (tuple2 a1 b1) (tuple2 a1 c1) (t2tb129 u) (t2tb11 v)))
  (forall ((x (tuple21 a c)) (y (tuple21 a b)))
  (=> (mem (tuple2 (tuple2 a1 c1) (tuple2 a1 b1))
  (Tuple2 (tuple2 a1 c1) (tuple2 a1 b1) (t2tb133 x) (t2tb13 y)) (t2tb166 r))
  (and (mem10 x u) (mem3 y v)))))))

(declare-fun t2tb281 ((set (set (tuple21 (tuple21 a c) b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a c) b))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 c1) b1))) (t2tb281 x))))

(declare-fun tb2t281 (uni) (set (set (tuple21 (tuple21 a c) b))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a c) b)))))
  (! (= (tb2t281 (t2tb281 i)) i) :pattern ((t2tb281 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 c1) b1))) j)
     (= (t2tb281 (tb2t281 j)) j)) :pattern ((t2tb281 (tb2t281 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a c))) (v (set b)) (r (set (tuple21 (tuple21 a c)
  b))))
  (= (mem (set1 (tuple2 (tuple2 a1 c1) b1)) (t2tb168 r)
  (relation b1 (tuple2 a1 c1) (t2tb129 u) (t2tb12 v)))
  (forall ((x (tuple21 a c)) (y b))
  (=> (mem (tuple2 (tuple2 a1 c1) b1)
  (Tuple2 (tuple2 a1 c1) b1 (t2tb133 x) (t2tb14 y)) (t2tb168 r))
  (and (mem10 x u) (mem2 y v)))))))

(declare-fun t2tb282 ((set (set (tuple21 (tuple21 a c) a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a c) a))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 c1) a1))) (t2tb282 x))))

(declare-fun tb2t282 (uni) (set (set (tuple21 (tuple21 a c) a))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a c) a)))))
  (! (= (tb2t282 (t2tb282 i)) i) :pattern ((t2tb282 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 c1) a1))) j)
     (= (t2tb282 (tb2t282 j)) j)) :pattern ((t2tb282 (tb2t282 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a c))) (v (set a)) (r (set (tuple21 (tuple21 a c)
  a))))
  (= (mem (set1 (tuple2 (tuple2 a1 c1) a1)) (t2tb170 r)
  (relation a1 (tuple2 a1 c1) (t2tb129 u) (t2tb1 v)))
  (forall ((x (tuple21 a c)) (y a))
  (=> (mem (tuple2 (tuple2 a1 c1) a1)
  (Tuple2 (tuple2 a1 c1) a1 (t2tb133 x) (t2tb2 y)) (t2tb170 r))
  (and (mem10 x u) (mem1 y v)))))))

;; mem_relation
  (assert
  (forall ((b2 ty))
  (forall ((u (set (tuple21 a c))) (v uni) (r uni))
  (and
  (=> (mem (set1 (tuple2 (tuple2 a1 c1) b2)) r
  (relation b2 (tuple2 a1 c1) (t2tb129 u) v))
  (forall ((x (tuple21 a c)) (y uni))
  (=> (mem (tuple2 (tuple2 a1 c1) b2)
  (Tuple2 (tuple2 a1 c1) b2 (t2tb133 x) y) r) (and (mem10 x u) (mem b2 y v)))))
  (=>
  (forall ((x (tuple21 a c)) (y uni))
  (=> (sort b2 y)
  (=> (mem (tuple2 (tuple2 a1 c1) b2)
  (Tuple2 (tuple2 a1 c1) b2 (t2tb133 x) y) r) (and (mem10 x u) (mem b2 y v)))))
  (mem (set1 (tuple2 (tuple2 a1 c1) b2)) r
  (relation b2 (tuple2 a1 c1) (t2tb129 u) v)))))))

(declare-fun t2tb1255 ((set (set (tuple21 c (tuple21 a (tuple21 b
  c)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 c (tuple21 a (tuple21 b c))))))) (sort
  (set1 (set1 (tuple2 c1 (tuple2 a1 (tuple2 b1 c1))))) (t2tb1255 x))))

(declare-fun tb2t1255 (uni) (set (set (tuple21 c (tuple21 a (tuple21 b
  c))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 c (tuple21 a (tuple21 b c)))))))
  (! (= (tb2t1255 (t2tb1255 i)) i) :pattern ((t2tb1255 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 c1 (tuple2 a1 (tuple2 b1 c1))))) j)
     (= (t2tb1255 (tb2t1255 j)) j)) :pattern ((t2tb1255 (tb2t1255 j))) )))

;; mem_relation
  (assert
  (forall ((u (set c)) (v (set (tuple21 a (tuple21 b c)))) (r (set (tuple21 c
  (tuple21 a (tuple21 b c))))))
  (= (mem (set1 (tuple2 c1 (tuple2 a1 (tuple2 b1 c1)))) (t2tb1217 r)
  (relation (tuple2 a1 (tuple2 b1 c1)) c1 (t2tb132 u) (t2tb261 v)))
  (forall ((x c) (y (tuple21 a (tuple21 b c))))
  (=> (mem (tuple2 c1 (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 c1 (tuple2 a1 (tuple2 b1 c1)) (t2tb135 x) (t2tb260 y))
  (t2tb1217 r)) (and (mem7 x u) (mem14 y v)))))))

(declare-fun t2tb1256 ((set (set (tuple21 c (set (tuple21 a c)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 c (set (tuple21 a c))))))) (sort
  (set1 (set1 (tuple2 c1 (set1 (tuple2 a1 c1))))) (t2tb1256 x))))

(declare-fun tb2t1256 (uni) (set (set (tuple21 c (set (tuple21 a c))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 c (set (tuple21 a c)))))))
  (! (= (tb2t1256 (t2tb1256 i)) i) :pattern ((t2tb1256 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 c1 (set1 (tuple2 a1 c1))))) j)
     (= (t2tb1256 (tb2t1256 j)) j)) :pattern ((t2tb1256 (tb2t1256 j))) )))

;; mem_relation
  (assert
  (forall ((u (set c)) (v (set (set (tuple21 a c)))) (r (set (tuple21 c
  (set (tuple21 a c))))))
  (= (mem (set1 (tuple2 c1 (set1 (tuple2 a1 c1)))) (t2tb1219 r)
  (relation (set1 (tuple2 a1 c1)) c1 (t2tb132 u) (t2tb128 v)))
  (forall ((x c) (y (set (tuple21 a c))))
  (=> (mem (tuple2 c1 (set1 (tuple2 a1 c1)))
  (Tuple2 c1 (set1 (tuple2 a1 c1)) (t2tb135 x) (t2tb129 y)) (t2tb1219 r))
  (and (mem7 x u) (mem11 y v)))))))

(declare-fun t2tb302 ((set (set (tuple21 c (tuple21 a c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 c (tuple21 a c)))))) (sort
  (set1 (set1 (tuple2 c1 (tuple2 a1 c1)))) (t2tb302 x))))

(declare-fun tb2t302 (uni) (set (set (tuple21 c (tuple21 a c)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 c (tuple21 a c))))))
  (! (= (tb2t302 (t2tb302 i)) i) :pattern ((t2tb302 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 c1 (tuple2 a1 c1)))) j)
     (= (t2tb302 (tb2t302 j)) j)) :pattern ((t2tb302 (tb2t302 j))) )))

;; mem_relation
  (assert
  (forall ((u (set c)) (v (set (tuple21 a c))) (r (set (tuple21 c (tuple21 a
  c)))))
  (= (mem (set1 (tuple2 c1 (tuple2 a1 c1))) (t2tb210 r)
  (relation (tuple2 a1 c1) c1 (t2tb132 u) (t2tb129 v)))
  (forall ((x c) (y (tuple21 a c)))
  (=> (mem (tuple2 c1 (tuple2 a1 c1))
  (Tuple2 c1 (tuple2 a1 c1) (t2tb135 x) (t2tb133 y)) (t2tb210 r))
  (and (mem7 x u) (mem10 y v)))))))

(declare-fun t2tb305 ((set (set (tuple21 c c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 c c))))) (sort (set1 (set1 (tuple2 c1 c1)))
  (t2tb305 x))))

(declare-fun tb2t305 (uni) (set (set (tuple21 c c))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 c c)))))
  (! (= (tb2t305 (t2tb305 i)) i) :pattern ((t2tb305 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 c1 c1))) j) (= (t2tb305 (tb2t305 j)) j)) :pattern (
  (t2tb305 (tb2t305 j))) )))

;; mem_relation
  (assert
  (forall ((u (set c)) (v (set c)) (r (set (tuple21 c c))))
  (= (mem (set1 (tuple2 c1 c1)) (t2tb216 r)
  (relation c1 c1 (t2tb132 u) (t2tb132 v)))
  (forall ((x c) (y c))
  (=> (mem (tuple2 c1 c1) (Tuple2 c1 c1 (t2tb135 x) (t2tb135 y)) (t2tb216 r))
  (and (mem7 x u) (mem7 y v)))))))

(declare-fun t2tb306 ((set (set (tuple21 c (set (tuple21 a b)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 c (set (tuple21 a b))))))) (sort
  (set1 (set1 (tuple2 c1 (set1 (tuple2 a1 b1))))) (t2tb306 x))))

(declare-fun tb2t306 (uni) (set (set (tuple21 c (set (tuple21 a b))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 c (set (tuple21 a b)))))))
  (! (= (tb2t306 (t2tb306 i)) i) :pattern ((t2tb306 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 c1 (set1 (tuple2 a1 b1))))) j)
     (= (t2tb306 (tb2t306 j)) j)) :pattern ((t2tb306 (tb2t306 j))) )))

;; mem_relation
  (assert
  (forall ((u (set c)) (v (set (set (tuple21 a b)))) (r (set (tuple21 c
  (set (tuple21 a b))))))
  (= (mem (set1 (tuple2 c1 (set1 (tuple2 a1 b1)))) (t2tb218 r)
  (relation (set1 (tuple2 a1 b1)) c1 (t2tb132 u) (t2tb10 v)))
  (forall ((x c) (y (set (tuple21 a b))))
  (=> (mem (tuple2 c1 (set1 (tuple2 a1 b1)))
  (Tuple2 c1 (set1 (tuple2 a1 b1)) (t2tb135 x) (t2tb11 y)) (t2tb218 r))
  (and (mem7 x u) (mem4 y v)))))))

(declare-fun t2tb307 ((set (set (tuple21 c (tuple21 a b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 c (tuple21 a b)))))) (sort
  (set1 (set1 (tuple2 c1 (tuple2 a1 b1)))) (t2tb307 x))))

(declare-fun tb2t307 (uni) (set (set (tuple21 c (tuple21 a b)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 c (tuple21 a b))))))
  (! (= (tb2t307 (t2tb307 i)) i) :pattern ((t2tb307 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 c1 (tuple2 a1 b1)))) j)
     (= (t2tb307 (tb2t307 j)) j)) :pattern ((t2tb307 (tb2t307 j))) )))

;; mem_relation
  (assert
  (forall ((u (set c)) (v (set (tuple21 a b))) (r (set (tuple21 c (tuple21 a
  b)))))
  (= (mem (set1 (tuple2 c1 (tuple2 a1 b1))) (t2tb220 r)
  (relation (tuple2 a1 b1) c1 (t2tb132 u) (t2tb11 v)))
  (forall ((x c) (y (tuple21 a b)))
  (=> (mem (tuple2 c1 (tuple2 a1 b1))
  (Tuple2 c1 (tuple2 a1 b1) (t2tb135 x) (t2tb13 y)) (t2tb220 r))
  (and (mem7 x u) (mem3 y v)))))))

(declare-fun t2tb308 ((set (set (tuple21 c b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 c b))))) (sort (set1 (set1 (tuple2 c1 b1)))
  (t2tb308 x))))

(declare-fun tb2t308 (uni) (set (set (tuple21 c b))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 c b)))))
  (! (= (tb2t308 (t2tb308 i)) i) :pattern ((t2tb308 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 c1 b1))) j) (= (t2tb308 (tb2t308 j)) j)) :pattern (
  (t2tb308 (tb2t308 j))) )))

;; mem_relation
  (assert
  (forall ((u (set c)) (v (set b)) (r (set (tuple21 c b))))
  (= (mem (set1 (tuple2 c1 b1)) (t2tb222 r)
  (relation b1 c1 (t2tb132 u) (t2tb12 v)))
  (forall ((x c) (y b))
  (=> (mem (tuple2 c1 b1) (Tuple2 c1 b1 (t2tb135 x) (t2tb14 y)) (t2tb222 r))
  (and (mem7 x u) (mem2 y v)))))))

(declare-fun t2tb309 ((set (set (tuple21 c a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 c a))))) (sort (set1 (set1 (tuple2 c1 a1)))
  (t2tb309 x))))

(declare-fun tb2t309 (uni) (set (set (tuple21 c a))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 c a)))))
  (! (= (tb2t309 (t2tb309 i)) i) :pattern ((t2tb309 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 c1 a1))) j) (= (t2tb309 (tb2t309 j)) j)) :pattern (
  (t2tb309 (tb2t309 j))) )))

;; mem_relation
  (assert
  (forall ((u (set c)) (v (set a)) (r (set (tuple21 c a))))
  (= (mem (set1 (tuple2 c1 a1)) (t2tb224 r)
  (relation a1 c1 (t2tb132 u) (t2tb1 v)))
  (forall ((x c) (y a))
  (=> (mem (tuple2 c1 a1) (Tuple2 c1 a1 (t2tb135 x) (t2tb2 y)) (t2tb224 r))
  (and (mem7 x u) (mem1 y v)))))))

;; mem_relation
  (assert
  (forall ((b2 ty))
  (forall ((u (set c)) (v uni) (r uni))
  (and
  (=> (mem (set1 (tuple2 c1 b2)) r (relation b2 c1 (t2tb132 u) v))
  (forall ((x c) (y uni))
  (=> (mem (tuple2 c1 b2) (Tuple2 c1 b2 (t2tb135 x) y) r)
  (and (mem7 x u) (mem b2 y v)))))
  (=>
  (forall ((x c) (y uni))
  (=> (sort b2 y)
  (=> (mem (tuple2 c1 b2) (Tuple2 c1 b2 (t2tb135 x) y) r)
  (and (mem7 x u) (mem b2 y v))))) (mem (set1 (tuple2 c1 b2)) r
  (relation b2 c1 (t2tb132 u) v)))))))

(declare-fun t2tb1257 ((set (set (tuple21 (set (tuple21 a b)) (tuple21 a
  (tuple21 b c)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a b)) (tuple21 a (tuple21 b
  c))))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 (tuple2 b1 c1)))))
  (t2tb1257 x))))

(declare-fun tb2t1257 (uni) (set (set (tuple21 (set (tuple21 a b)) (tuple21 a
  (tuple21 b c))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a b)) (tuple21 a (tuple21 b
  c))))))) (! (= (tb2t1257 (t2tb1257 i)) i) :pattern ((t2tb1257 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 (tuple2 b1 c1)))))
     j) (= (t2tb1257 (tb2t1257 j)) j)) :pattern ((t2tb1257 (tb2t1257 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a b)))) (v (set (tuple21 a (tuple21 b c))))
  (r (set (tuple21 (set (tuple21 a b)) (tuple21 a (tuple21 b c))))))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 (tuple2 b1 c1))))
  (t2tb1221 r)
  (relation (tuple2 a1 (tuple2 b1 c1)) (set1 (tuple2 a1 b1)) (t2tb10 u)
  (t2tb261 v)))
  (forall ((x (set (tuple21 a b))) (y (tuple21 a (tuple21 b c))))
  (=> (mem (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 (tuple2 b1 c1)) (t2tb11 x)
  (t2tb260 y)) (t2tb1221 r)) (and (mem4 x u) (mem14 y v)))))))

(declare-fun t2tb1258 ((set (set (tuple21 (set (tuple21 a b)) (set (tuple21 a
  c)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a b)) (set (tuple21 a c)))))))
  (sort (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 c1)))))
  (t2tb1258 x))))

(declare-fun tb2t1258 (uni) (set (set (tuple21 (set (tuple21 a b))
  (set (tuple21 a c))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a b)) (set (tuple21 a c)))))))
  (! (= (tb2t1258 (t2tb1258 i)) i) :pattern ((t2tb1258 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 c1))))) j)
     (= (t2tb1258 (tb2t1258 j)) j)) :pattern ((t2tb1258 (tb2t1258 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a b)))) (v (set (set (tuple21 a c))))
  (r (set (tuple21 (set (tuple21 a b)) (set (tuple21 a c))))))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 c1))))
  (t2tb1223 r)
  (relation (set1 (tuple2 a1 c1)) (set1 (tuple2 a1 b1)) (t2tb10 u)
  (t2tb128 v)))
  (forall ((x (set (tuple21 a b))) (y (set (tuple21 a c))))
  (=> (mem (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 c1)))
  (Tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 c1)) (t2tb11 x) (t2tb129 y))
  (t2tb1223 r)) (and (mem4 x u) (mem11 y v)))))))

(declare-fun t2tb311 ((set (set (tuple21 (set (tuple21 a b)) (tuple21 a
  c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a b)) (tuple21 a c)))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 c1)))) (t2tb311 x))))

(declare-fun tb2t311 (uni) (set (set (tuple21 (set (tuple21 a b)) (tuple21 a
  c)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a b)) (tuple21 a c))))))
  (! (= (tb2t311 (t2tb311 i)) i) :pattern ((t2tb311 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 c1)))) j)
     (= (t2tb311 (tb2t311 j)) j)) :pattern ((t2tb311 (tb2t311 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a b)))) (v (set (tuple21 a c)))
  (r (set (tuple21 (set (tuple21 a b)) (tuple21 a c)))))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 c1))) (t2tb229 r)
  (relation (tuple2 a1 c1) (set1 (tuple2 a1 b1)) (t2tb10 u) (t2tb129 v)))
  (forall ((x (set (tuple21 a b))) (y (tuple21 a c)))
  (=> (mem (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 c1))
  (Tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 c1) (t2tb11 x) (t2tb133 y))
  (t2tb229 r)) (and (mem4 x u) (mem10 y v)))))))

(declare-fun t2tb314 ((set (set (tuple21 (set (tuple21 a b)) c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a b)) c))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) c1))) (t2tb314 x))))

(declare-fun tb2t314 (uni) (set (set (tuple21 (set (tuple21 a b)) c))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a b)) c)))))
  (! (= (tb2t314 (t2tb314 i)) i) :pattern ((t2tb314 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) c1))) j)
     (= (t2tb314 (tb2t314 j)) j)) :pattern ((t2tb314 (tb2t314 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a b)))) (v (set c))
  (r (set (tuple21 (set (tuple21 a b)) c))))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 b1)) c1)) (t2tb234 r)
  (relation c1 (set1 (tuple2 a1 b1)) (t2tb10 u) (t2tb132 v)))
  (forall ((x (set (tuple21 a b))) (y c))
  (=> (mem (tuple2 (set1 (tuple2 a1 b1)) c1)
  (Tuple2 (set1 (tuple2 a1 b1)) c1 (t2tb11 x) (t2tb135 y)) (t2tb234 r))
  (and (mem4 x u) (mem7 y v)))))))

(declare-fun t2tb45 ((set (set (tuple21 (set (tuple21 a b)) (set (tuple21 a
  b)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a b)) (set (tuple21 a b)))))))
  (sort (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1)))))
  (t2tb45 x))))

(declare-fun tb2t45 (uni) (set (set (tuple21 (set (tuple21 a b))
  (set (tuple21 a b))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a b)) (set (tuple21 a b)))))))
  (! (= (tb2t45 (t2tb45 i)) i) :pattern ((t2tb45 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1))))) j)
     (= (t2tb45 (tb2t45 j)) j)) :pattern ((t2tb45 (tb2t45 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a b)))) (v (set (set (tuple21 a b))))
  (r (set (tuple21 (set (tuple21 a b)) (set (tuple21 a b))))))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1))))
  (t2tb15 r)
  (relation (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1)) (t2tb10 u)
  (t2tb10 v)))
  (forall ((x (set (tuple21 a b))) (y (set (tuple21 a b))))
  (=> (mem (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1)))
  (Tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1)) (t2tb11 x) (t2tb11 y))
  (t2tb15 r)) (and (mem4 x u) (mem4 y v)))))))

(declare-fun t2tb46 ((set (set (tuple21 (set (tuple21 a b)) (tuple21 a
  b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a b)) (tuple21 a b)))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 b1)))) (t2tb46 x))))

(declare-fun tb2t46 (uni) (set (set (tuple21 (set (tuple21 a b)) (tuple21 a
  b)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a b)) (tuple21 a b))))))
  (! (= (tb2t46 (t2tb46 i)) i) :pattern ((t2tb46 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 b1)))) j)
     (= (t2tb46 (tb2t46 j)) j)) :pattern ((t2tb46 (tb2t46 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a b)))) (v (set (tuple21 a b)))
  (r (set (tuple21 (set (tuple21 a b)) (tuple21 a b)))))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 b1))) (t2tb17 r)
  (relation (tuple2 a1 b1) (set1 (tuple2 a1 b1)) (t2tb10 u) (t2tb11 v)))
  (forall ((x (set (tuple21 a b))) (y (tuple21 a b)))
  (=> (mem (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 b1))
  (Tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 b1) (t2tb11 x) (t2tb13 y))
  (t2tb17 r)) (and (mem4 x u) (mem3 y v)))))))

(declare-fun t2tb47 ((set (set (tuple21 (set (tuple21 a b)) b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a b)) b))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) b1))) (t2tb47 x))))

(declare-fun tb2t47 (uni) (set (set (tuple21 (set (tuple21 a b)) b))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a b)) b)))))
  (! (= (tb2t47 (t2tb47 i)) i) :pattern ((t2tb47 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) b1))) j)
     (= (t2tb47 (tb2t47 j)) j)) :pattern ((t2tb47 (tb2t47 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a b)))) (v (set b))
  (r (set (tuple21 (set (tuple21 a b)) b))))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 b1)) b1)) (t2tb19 r)
  (relation b1 (set1 (tuple2 a1 b1)) (t2tb10 u) (t2tb12 v)))
  (forall ((x (set (tuple21 a b))) (y b))
  (=> (mem (tuple2 (set1 (tuple2 a1 b1)) b1)
  (Tuple2 (set1 (tuple2 a1 b1)) b1 (t2tb11 x) (t2tb14 y)) (t2tb19 r))
  (and (mem4 x u) (mem2 y v)))))))

(declare-fun t2tb48 ((set (set (tuple21 (set (tuple21 a b)) a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a b)) a))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) a1))) (t2tb48 x))))

(declare-fun tb2t48 (uni) (set (set (tuple21 (set (tuple21 a b)) a))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a b)) a)))))
  (! (= (tb2t48 (t2tb48 i)) i) :pattern ((t2tb48 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) a1))) j)
     (= (t2tb48 (tb2t48 j)) j)) :pattern ((t2tb48 (tb2t48 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a b)))) (v (set a))
  (r (set (tuple21 (set (tuple21 a b)) a))))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 b1)) a1)) (t2tb22 r)
  (relation a1 (set1 (tuple2 a1 b1)) (t2tb10 u) (t2tb1 v)))
  (forall ((x (set (tuple21 a b))) (y a))
  (=> (mem (tuple2 (set1 (tuple2 a1 b1)) a1)
  (Tuple2 (set1 (tuple2 a1 b1)) a1 (t2tb11 x) (t2tb2 y)) (t2tb22 r))
  (and (mem4 x u) (mem1 y v)))))))

;; mem_relation
  (assert
  (forall ((b2 ty))
  (forall ((u (set (set (tuple21 a b)))) (v uni) (r uni))
  (and
  (=> (mem (set1 (tuple2 (set1 (tuple2 a1 b1)) b2)) r
  (relation b2 (set1 (tuple2 a1 b1)) (t2tb10 u) v))
  (forall ((x (set (tuple21 a b))) (y uni))
  (=> (mem (tuple2 (set1 (tuple2 a1 b1)) b2)
  (Tuple2 (set1 (tuple2 a1 b1)) b2 (t2tb11 x) y) r)
  (and (mem4 x u) (mem b2 y v)))))
  (=>
  (forall ((x (set (tuple21 a b))) (y uni))
  (=> (sort b2 y)
  (=> (mem (tuple2 (set1 (tuple2 a1 b1)) b2)
  (Tuple2 (set1 (tuple2 a1 b1)) b2 (t2tb11 x) y) r)
  (and (mem4 x u) (mem b2 y v))))) (mem
  (set1 (tuple2 (set1 (tuple2 a1 b1)) b2)) r
  (relation b2 (set1 (tuple2 a1 b1)) (t2tb10 u) v)))))))

(declare-fun t2tb1259 ((set (set (tuple21 (tuple21 a b) (tuple21 a (tuple21 b
  c)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a b) (tuple21 a (tuple21 b c)))))))
  (sort (set1 (set1 (tuple2 (tuple2 a1 b1) (tuple2 a1 (tuple2 b1 c1)))))
  (t2tb1259 x))))

(declare-fun tb2t1259 (uni) (set (set (tuple21 (tuple21 a b) (tuple21 a
  (tuple21 b c))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a b) (tuple21 a (tuple21 b c)))))))
  (! (= (tb2t1259 (t2tb1259 i)) i) :pattern ((t2tb1259 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (tuple2 a1 b1) (tuple2 a1 (tuple2 b1 c1))))) j)
     (= (t2tb1259 (tb2t1259 j)) j)) :pattern ((t2tb1259 (tb2t1259 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a b))) (v (set (tuple21 a (tuple21 b c))))
  (r (set (tuple21 (tuple21 a b) (tuple21 a (tuple21 b c))))))
  (= (mem (set1 (tuple2 (tuple2 a1 b1) (tuple2 a1 (tuple2 b1 c1))))
  (t2tb1225 r)
  (relation (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 b1) (t2tb11 u) (t2tb261 v)))
  (forall ((x (tuple21 a b)) (y (tuple21 a (tuple21 b c))))
  (=> (mem (tuple2 (tuple2 a1 b1) (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 (tuple2 a1 b1) (tuple2 a1 (tuple2 b1 c1)) (t2tb13 x) (t2tb260 y))
  (t2tb1225 r)) (and (mem3 x u) (mem14 y v)))))))

(declare-fun t2tb1260 ((set (set (tuple21 (tuple21 a b) (set (tuple21 a
  c)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a b) (set (tuple21 a c))))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 c1))))) (t2tb1260 x))))

(declare-fun tb2t1260 (uni) (set (set (tuple21 (tuple21 a b) (set (tuple21 a
  c))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a b) (set (tuple21 a c)))))))
  (! (= (tb2t1260 (t2tb1260 i)) i) :pattern ((t2tb1260 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 c1))))) j)
     (= (t2tb1260 (tb2t1260 j)) j)) :pattern ((t2tb1260 (tb2t1260 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a b))) (v (set (set (tuple21 a c))))
  (r (set (tuple21 (tuple21 a b) (set (tuple21 a c))))))
  (= (mem (set1 (tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 c1)))) (t2tb1227 r)
  (relation (set1 (tuple2 a1 c1)) (tuple2 a1 b1) (t2tb11 u) (t2tb128 v)))
  (forall ((x (tuple21 a b)) (y (set (tuple21 a c))))
  (=> (mem (tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 c1)))
  (Tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 c1)) (t2tb13 x) (t2tb129 y))
  (t2tb1227 r)) (and (mem3 x u) (mem11 y v)))))))

(declare-fun t2tb316 ((set (set (tuple21 (tuple21 a b) (tuple21 a c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a b) (tuple21 a c)))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)))) (t2tb316 x))))

(declare-fun tb2t316 (uni) (set (set (tuple21 (tuple21 a b) (tuple21 a c)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a b) (tuple21 a c))))))
  (! (= (tb2t316 (t2tb316 i)) i) :pattern ((t2tb316 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)))) j)
     (= (t2tb316 (tb2t316 j)) j)) :pattern ((t2tb316 (tb2t316 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a b))) (v (set (tuple21 a c)))
  (r (set (tuple21 (tuple21 a b) (tuple21 a c)))))
  (= (mem (set1 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1))) (t2tb238 r)
  (relation (tuple2 a1 c1) (tuple2 a1 b1) (t2tb11 u) (t2tb129 v)))
  (forall ((x (tuple21 a b)) (y (tuple21 a c)))
  (=> (mem (tuple2 (tuple2 a1 b1) (tuple2 a1 c1))
  (Tuple2 (tuple2 a1 b1) (tuple2 a1 c1) (t2tb13 x) (t2tb133 y)) (t2tb238 r))
  (and (mem3 x u) (mem10 y v)))))))

(declare-fun t2tb319 ((set (set (tuple21 (tuple21 a b) c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a b) c))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 b1) c1))) (t2tb319 x))))

(declare-fun tb2t319 (uni) (set (set (tuple21 (tuple21 a b) c))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a b) c)))))
  (! (= (tb2t319 (t2tb319 i)) i) :pattern ((t2tb319 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 b1) c1))) j)
     (= (t2tb319 (tb2t319 j)) j)) :pattern ((t2tb319 (tb2t319 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a b))) (v (set c)) (r (set (tuple21 (tuple21 a b)
  c))))
  (= (mem (set1 (tuple2 (tuple2 a1 b1) c1)) (t2tb245 r)
  (relation c1 (tuple2 a1 b1) (t2tb11 u) (t2tb132 v)))
  (forall ((x (tuple21 a b)) (y c))
  (=> (mem (tuple2 (tuple2 a1 b1) c1)
  (Tuple2 (tuple2 a1 b1) c1 (t2tb13 x) (t2tb135 y)) (t2tb245 r))
  (and (mem3 x u) (mem7 y v)))))))

(declare-fun t2tb49 ((set (set (tuple21 (tuple21 a b) (set (tuple21 a
  b)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a b) (set (tuple21 a b))))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 b1))))) (t2tb49 x))))

(declare-fun tb2t49 (uni) (set (set (tuple21 (tuple21 a b) (set (tuple21 a
  b))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a b) (set (tuple21 a b)))))))
  (! (= (tb2t49 (t2tb49 i)) i) :pattern ((t2tb49 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 b1))))) j)
     (= (t2tb49 (tb2t49 j)) j)) :pattern ((t2tb49 (tb2t49 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a b))) (v (set (set (tuple21 a b))))
  (r (set (tuple21 (tuple21 a b) (set (tuple21 a b))))))
  (= (mem (set1 (tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 b1)))) (t2tb23 r)
  (relation (set1 (tuple2 a1 b1)) (tuple2 a1 b1) (t2tb11 u) (t2tb10 v)))
  (forall ((x (tuple21 a b)) (y (set (tuple21 a b))))
  (=> (mem (tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 b1)))
  (Tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 b1)) (t2tb13 x) (t2tb11 y))
  (t2tb23 r)) (and (mem3 x u) (mem4 y v)))))))

(declare-fun t2tb50 ((set (set (tuple21 (tuple21 a b) (tuple21 a b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a b) (tuple21 a b)))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 b1) (tuple2 a1 b1)))) (t2tb50 x))))

(declare-fun tb2t50 (uni) (set (set (tuple21 (tuple21 a b) (tuple21 a b)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a b) (tuple21 a b))))))
  (! (= (tb2t50 (t2tb50 i)) i) :pattern ((t2tb50 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 b1) (tuple2 a1 b1)))) j)
     (= (t2tb50 (tb2t50 j)) j)) :pattern ((t2tb50 (tb2t50 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a b))) (v (set (tuple21 a b)))
  (r (set (tuple21 (tuple21 a b) (tuple21 a b)))))
  (= (mem (set1 (tuple2 (tuple2 a1 b1) (tuple2 a1 b1))) (t2tb25 r)
  (relation (tuple2 a1 b1) (tuple2 a1 b1) (t2tb11 u) (t2tb11 v)))
  (forall ((x (tuple21 a b)) (y (tuple21 a b)))
  (=> (mem (tuple2 (tuple2 a1 b1) (tuple2 a1 b1))
  (Tuple2 (tuple2 a1 b1) (tuple2 a1 b1) (t2tb13 x) (t2tb13 y)) (t2tb25 r))
  (and (mem3 x u) (mem3 y v)))))))

(declare-fun t2tb51 ((set (set (tuple21 (tuple21 a b) b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a b) b))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 b1) b1))) (t2tb51 x))))

(declare-fun tb2t51 (uni) (set (set (tuple21 (tuple21 a b) b))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a b) b)))))
  (! (= (tb2t51 (t2tb51 i)) i) :pattern ((t2tb51 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 b1) b1))) j)
     (= (t2tb51 (tb2t51 j)) j)) :pattern ((t2tb51 (tb2t51 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a b))) (v (set b)) (r (set (tuple21 (tuple21 a b)
  b))))
  (= (mem (set1 (tuple2 (tuple2 a1 b1) b1)) (t2tb27 r)
  (relation b1 (tuple2 a1 b1) (t2tb11 u) (t2tb12 v)))
  (forall ((x (tuple21 a b)) (y b))
  (=> (mem (tuple2 (tuple2 a1 b1) b1)
  (Tuple2 (tuple2 a1 b1) b1 (t2tb13 x) (t2tb14 y)) (t2tb27 r))
  (and (mem3 x u) (mem2 y v)))))))

(declare-fun t2tb52 ((set (set (tuple21 (tuple21 a b) a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a b) a))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 b1) a1))) (t2tb52 x))))

(declare-fun tb2t52 (uni) (set (set (tuple21 (tuple21 a b) a))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a b) a)))))
  (! (= (tb2t52 (t2tb52 i)) i) :pattern ((t2tb52 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 b1) a1))) j)
     (= (t2tb52 (tb2t52 j)) j)) :pattern ((t2tb52 (tb2t52 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a b))) (v (set a)) (r (set (tuple21 (tuple21 a b)
  a))))
  (= (mem (set1 (tuple2 (tuple2 a1 b1) a1)) (t2tb29 r)
  (relation a1 (tuple2 a1 b1) (t2tb11 u) (t2tb1 v)))
  (forall ((x (tuple21 a b)) (y a))
  (=> (mem (tuple2 (tuple2 a1 b1) a1)
  (Tuple2 (tuple2 a1 b1) a1 (t2tb13 x) (t2tb2 y)) (t2tb29 r))
  (and (mem3 x u) (mem1 y v)))))))

;; mem_relation
  (assert
  (forall ((b2 ty))
  (forall ((u (set (tuple21 a b))) (v uni) (r uni))
  (and
  (=> (mem (set1 (tuple2 (tuple2 a1 b1) b2)) r
  (relation b2 (tuple2 a1 b1) (t2tb11 u) v))
  (forall ((x (tuple21 a b)) (y uni))
  (=> (mem (tuple2 (tuple2 a1 b1) b2) (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) y)
  r) (and (mem3 x u) (mem b2 y v)))))
  (=>
  (forall ((x (tuple21 a b)) (y uni))
  (=> (sort b2 y)
  (=> (mem (tuple2 (tuple2 a1 b1) b2) (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) y)
  r) (and (mem3 x u) (mem b2 y v))))) (mem (set1 (tuple2 (tuple2 a1 b1) b2))
  r (relation b2 (tuple2 a1 b1) (t2tb11 u) v)))))))

(declare-fun t2tb1261 ((set (set (tuple21 b (tuple21 a (tuple21 b
  c)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 b (tuple21 a (tuple21 b c))))))) (sort
  (set1 (set1 (tuple2 b1 (tuple2 a1 (tuple2 b1 c1))))) (t2tb1261 x))))

(declare-fun tb2t1261 (uni) (set (set (tuple21 b (tuple21 a (tuple21 b
  c))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 b (tuple21 a (tuple21 b c)))))))
  (! (= (tb2t1261 (t2tb1261 i)) i) :pattern ((t2tb1261 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 b1 (tuple2 a1 (tuple2 b1 c1))))) j)
     (= (t2tb1261 (tb2t1261 j)) j)) :pattern ((t2tb1261 (tb2t1261 j))) )))

;; mem_relation
  (assert
  (forall ((u (set b)) (v (set (tuple21 a (tuple21 b c)))) (r (set (tuple21 b
  (tuple21 a (tuple21 b c))))))
  (= (mem (set1 (tuple2 b1 (tuple2 a1 (tuple2 b1 c1)))) (t2tb1229 r)
  (relation (tuple2 a1 (tuple2 b1 c1)) b1 (t2tb12 u) (t2tb261 v)))
  (forall ((x b) (y (tuple21 a (tuple21 b c))))
  (=> (mem (tuple2 b1 (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 b1 (tuple2 a1 (tuple2 b1 c1)) (t2tb14 x) (t2tb260 y)) (t2tb1229 r))
  (and (mem2 x u) (mem14 y v)))))))

(declare-fun t2tb1262 ((set (set (tuple21 b (set (tuple21 a c)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 b (set (tuple21 a c))))))) (sort
  (set1 (set1 (tuple2 b1 (set1 (tuple2 a1 c1))))) (t2tb1262 x))))

(declare-fun tb2t1262 (uni) (set (set (tuple21 b (set (tuple21 a c))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 b (set (tuple21 a c)))))))
  (! (= (tb2t1262 (t2tb1262 i)) i) :pattern ((t2tb1262 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 b1 (set1 (tuple2 a1 c1))))) j)
     (= (t2tb1262 (tb2t1262 j)) j)) :pattern ((t2tb1262 (tb2t1262 j))) )))

;; mem_relation
  (assert
  (forall ((u (set b)) (v (set (set (tuple21 a c)))) (r (set (tuple21 b
  (set (tuple21 a c))))))
  (= (mem (set1 (tuple2 b1 (set1 (tuple2 a1 c1)))) (t2tb1232 r)
  (relation (set1 (tuple2 a1 c1)) b1 (t2tb12 u) (t2tb128 v)))
  (forall ((x b) (y (set (tuple21 a c))))
  (=> (mem (tuple2 b1 (set1 (tuple2 a1 c1)))
  (Tuple2 b1 (set1 (tuple2 a1 c1)) (t2tb14 x) (t2tb129 y)) (t2tb1232 r))
  (and (mem2 x u) (mem11 y v)))))))

(declare-fun t2tb321 ((set (set (tuple21 b (tuple21 a c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 b (tuple21 a c)))))) (sort
  (set1 (set1 (tuple2 b1 (tuple2 a1 c1)))) (t2tb321 x))))

(declare-fun tb2t321 (uni) (set (set (tuple21 b (tuple21 a c)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 b (tuple21 a c))))))
  (! (= (tb2t321 (t2tb321 i)) i) :pattern ((t2tb321 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 b1 (tuple2 a1 c1)))) j)
     (= (t2tb321 (tb2t321 j)) j)) :pattern ((t2tb321 (tb2t321 j))) )))

;; mem_relation
  (assert
  (forall ((u (set b)) (v (set (tuple21 a c))) (r (set (tuple21 b (tuple21 a
  c)))))
  (= (mem (set1 (tuple2 b1 (tuple2 a1 c1))) (t2tb248 r)
  (relation (tuple2 a1 c1) b1 (t2tb12 u) (t2tb129 v)))
  (forall ((x b) (y (tuple21 a c)))
  (=> (mem (tuple2 b1 (tuple2 a1 c1))
  (Tuple2 b1 (tuple2 a1 c1) (t2tb14 x) (t2tb133 y)) (t2tb248 r))
  (and (mem2 x u) (mem10 y v)))))))

(declare-fun t2tb130 ((set (set (tuple21 b c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 b c))))) (sort (set1 (set1 (tuple2 b1 c1)))
  (t2tb130 x))))

(declare-fun tb2t130 (uni) (set (set (tuple21 b c))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 b c)))))
  (! (= (tb2t130 (t2tb130 i)) i) :pattern ((t2tb130 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 b1 c1))) j) (= (t2tb130 (tb2t130 j)) j)) :pattern (
  (t2tb130 (tb2t130 j))) )))

;; mem_relation
  (assert
  (forall ((u (set b)) (v (set c)) (r (set (tuple21 b c))))
  (= (mem (set1 (tuple2 b1 c1)) (t2tb131 r)
  (relation c1 b1 (t2tb12 u) (t2tb132 v)))
  (forall ((x b) (y c))
  (=> (mem (tuple2 b1 c1) (Tuple2 b1 c1 (t2tb14 x) (t2tb135 y)) (t2tb131 r))
  (and (mem2 x u) (mem7 y v)))))))

(declare-fun t2tb53 ((set (set (tuple21 b (set (tuple21 a b)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 b (set (tuple21 a b))))))) (sort
  (set1 (set1 (tuple2 b1 (set1 (tuple2 a1 b1))))) (t2tb53 x))))

(declare-fun tb2t53 (uni) (set (set (tuple21 b (set (tuple21 a b))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 b (set (tuple21 a b)))))))
  (! (= (tb2t53 (t2tb53 i)) i) :pattern ((t2tb53 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 b1 (set1 (tuple2 a1 b1))))) j)
     (= (t2tb53 (tb2t53 j)) j)) :pattern ((t2tb53 (tb2t53 j))) )))

;; mem_relation
  (assert
  (forall ((u (set b)) (v (set (set (tuple21 a b)))) (r (set (tuple21 b
  (set (tuple21 a b))))))
  (= (mem (set1 (tuple2 b1 (set1 (tuple2 a1 b1)))) (t2tb31 r)
  (relation (set1 (tuple2 a1 b1)) b1 (t2tb12 u) (t2tb10 v)))
  (forall ((x b) (y (set (tuple21 a b))))
  (=> (mem (tuple2 b1 (set1 (tuple2 a1 b1)))
  (Tuple2 b1 (set1 (tuple2 a1 b1)) (t2tb14 x) (t2tb11 y)) (t2tb31 r))
  (and (mem2 x u) (mem4 y v)))))))

(declare-fun t2tb54 ((set (set (tuple21 b (tuple21 a b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 b (tuple21 a b)))))) (sort
  (set1 (set1 (tuple2 b1 (tuple2 a1 b1)))) (t2tb54 x))))

(declare-fun tb2t54 (uni) (set (set (tuple21 b (tuple21 a b)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 b (tuple21 a b))))))
  (! (= (tb2t54 (t2tb54 i)) i) :pattern ((t2tb54 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 b1 (tuple2 a1 b1)))) j)
     (= (t2tb54 (tb2t54 j)) j)) :pattern ((t2tb54 (tb2t54 j))) )))

;; mem_relation
  (assert
  (forall ((u (set b)) (v (set (tuple21 a b))) (r (set (tuple21 b (tuple21 a
  b)))))
  (= (mem (set1 (tuple2 b1 (tuple2 a1 b1))) (t2tb34 r)
  (relation (tuple2 a1 b1) b1 (t2tb12 u) (t2tb11 v)))
  (forall ((x b) (y (tuple21 a b)))
  (=> (mem (tuple2 b1 (tuple2 a1 b1))
  (Tuple2 b1 (tuple2 a1 b1) (t2tb14 x) (t2tb13 y)) (t2tb34 r))
  (and (mem2 x u) (mem3 y v)))))))

(declare-fun t2tb55 ((set (set (tuple21 b b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 b b))))) (sort (set1 (set1 (tuple2 b1 b1)))
  (t2tb55 x))))

(declare-fun tb2t55 (uni) (set (set (tuple21 b b))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 b b)))))
  (! (= (tb2t55 (t2tb55 i)) i) :pattern ((t2tb55 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 b1 b1))) j) (= (t2tb55 (tb2t55 j)) j)) :pattern (
  (t2tb55 (tb2t55 j))) )))

;; mem_relation
  (assert
  (forall ((u (set b)) (v (set b)) (r (set (tuple21 b b))))
  (= (mem (set1 (tuple2 b1 b1)) (t2tb35 r)
  (relation b1 b1 (t2tb12 u) (t2tb12 v)))
  (forall ((x b) (y b))
  (=> (mem (tuple2 b1 b1) (Tuple2 b1 b1 (t2tb14 x) (t2tb14 y)) (t2tb35 r))
  (and (mem2 x u) (mem2 y v)))))))

(declare-fun t2tb56 ((set (set (tuple21 b a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 b a))))) (sort (set1 (set1 (tuple2 b1 a1)))
  (t2tb56 x))))

(declare-fun tb2t56 (uni) (set (set (tuple21 b a))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 b a)))))
  (! (= (tb2t56 (t2tb56 i)) i) :pattern ((t2tb56 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 b1 a1))) j) (= (t2tb56 (tb2t56 j)) j)) :pattern (
  (t2tb56 (tb2t56 j))) )))

;; mem_relation
  (assert
  (forall ((u (set b)) (v (set a)) (r (set (tuple21 b a))))
  (= (mem (set1 (tuple2 b1 a1)) (t2tb37 r)
  (relation a1 b1 (t2tb12 u) (t2tb1 v)))
  (forall ((x b) (y a))
  (=> (mem (tuple2 b1 a1) (Tuple2 b1 a1 (t2tb14 x) (t2tb2 y)) (t2tb37 r))
  (and (mem2 x u) (mem1 y v)))))))

;; mem_relation
  (assert
  (forall ((b2 ty))
  (forall ((u (set b)) (v uni) (r uni))
  (and
  (=> (mem (set1 (tuple2 b1 b2)) r (relation b2 b1 (t2tb12 u) v))
  (forall ((x b) (y uni))
  (=> (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) y) r)
  (and (mem2 x u) (mem b2 y v)))))
  (=>
  (forall ((x b) (y uni))
  (=> (sort b2 y)
  (=> (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) y) r)
  (and (mem2 x u) (mem b2 y v))))) (mem (set1 (tuple2 b1 b2)) r
  (relation b2 b1 (t2tb12 u) v)))))))

(declare-fun t2tb1263 ((set (set (tuple21 a (tuple21 a (tuple21 b
  c)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 a (tuple21 a (tuple21 b c))))))) (sort
  (set1 (set1 (tuple2 a1 (tuple2 a1 (tuple2 b1 c1))))) (t2tb1263 x))))

(declare-fun tb2t1263 (uni) (set (set (tuple21 a (tuple21 a (tuple21 b
  c))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 a (tuple21 a (tuple21 b c)))))))
  (! (= (tb2t1263 (t2tb1263 i)) i) :pattern ((t2tb1263 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 a1 (tuple2 a1 (tuple2 b1 c1))))) j)
     (= (t2tb1263 (tb2t1263 j)) j)) :pattern ((t2tb1263 (tb2t1263 j))) )))

;; mem_relation
  (assert
  (forall ((u (set a)) (v (set (tuple21 a (tuple21 b c)))) (r (set (tuple21 a
  (tuple21 a (tuple21 b c))))))
  (= (mem (set1 (tuple2 a1 (tuple2 a1 (tuple2 b1 c1)))) (t2tb1233 r)
  (relation (tuple2 a1 (tuple2 b1 c1)) a1 (t2tb1 u) (t2tb261 v)))
  (forall ((x a) (y (tuple21 a (tuple21 b c))))
  (=> (mem (tuple2 a1 (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 a1 (tuple2 a1 (tuple2 b1 c1)) (t2tb2 x) (t2tb260 y)) (t2tb1233 r))
  (and (mem1 x u) (mem14 y v)))))))

(declare-fun t2tb1264 ((set (set (tuple21 a (set (tuple21 a c)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 a (set (tuple21 a c))))))) (sort
  (set1 (set1 (tuple2 a1 (set1 (tuple2 a1 c1))))) (t2tb1264 x))))

(declare-fun tb2t1264 (uni) (set (set (tuple21 a (set (tuple21 a c))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 a (set (tuple21 a c)))))))
  (! (= (tb2t1264 (t2tb1264 i)) i) :pattern ((t2tb1264 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 a1 (set1 (tuple2 a1 c1))))) j)
     (= (t2tb1264 (tb2t1264 j)) j)) :pattern ((t2tb1264 (tb2t1264 j))) )))

;; mem_relation
  (assert
  (forall ((u (set a)) (v (set (set (tuple21 a c)))) (r (set (tuple21 a
  (set (tuple21 a c))))))
  (= (mem (set1 (tuple2 a1 (set1 (tuple2 a1 c1)))) (t2tb1235 r)
  (relation (set1 (tuple2 a1 c1)) a1 (t2tb1 u) (t2tb128 v)))
  (forall ((x a) (y (set (tuple21 a c))))
  (=> (mem (tuple2 a1 (set1 (tuple2 a1 c1)))
  (Tuple2 a1 (set1 (tuple2 a1 c1)) (t2tb2 x) (t2tb129 y)) (t2tb1235 r))
  (and (mem1 x u) (mem11 y v)))))))

(declare-fun t2tb325 ((set (set (tuple21 a (tuple21 a c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 a (tuple21 a c)))))) (sort
  (set1 (set1 (tuple2 a1 (tuple2 a1 c1)))) (t2tb325 x))))

(declare-fun tb2t325 (uni) (set (set (tuple21 a (tuple21 a c)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 a (tuple21 a c))))))
  (! (= (tb2t325 (t2tb325 i)) i) :pattern ((t2tb325 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 a1 (tuple2 a1 c1)))) j)
     (= (t2tb325 (tb2t325 j)) j)) :pattern ((t2tb325 (tb2t325 j))) )))

;; mem_relation
  (assert
  (forall ((u (set a)) (v (set (tuple21 a c))) (r (set (tuple21 a (tuple21 a
  c)))))
  (= (mem (set1 (tuple2 a1 (tuple2 a1 c1))) (t2tb256 r)
  (relation (tuple2 a1 c1) a1 (t2tb1 u) (t2tb129 v)))
  (forall ((x a) (y (tuple21 a c)))
  (=> (mem (tuple2 a1 (tuple2 a1 c1))
  (Tuple2 a1 (tuple2 a1 c1) (t2tb2 x) (t2tb133 y)) (t2tb256 r))
  (and (mem1 x u) (mem10 y v)))))))

;; mem_relation
  (assert
  (forall ((u (set a)) (v (set (tuple21 b c))) (r (set (tuple21 a (tuple21 b
  c)))))
  (= (mem (set1 (tuple2 a1 (tuple2 b1 c1))) (t2tb261 r)
  (relation (tuple2 b1 c1) a1 (t2tb1 u) (t2tb131 v)))
  (forall ((x a) (y (tuple21 b c)))
  (=> (mem14 (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 y))) r)
  (and (mem1 x u) (mem (tuple2 b1 c1) (t2tb134 y) (t2tb131 v))))))))

;; mem_relation
  (assert
  (forall ((u (set a)) (v (set c)) (r (set (tuple21 a c))))
  (= (mem11 r (relation3 u v))
  (forall ((x a) (y c))
  (=> (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y))) r)
  (and (mem1 x u) (mem7 y v)))))))

(declare-fun t2tb57 ((set (set (tuple21 a (set (tuple21 a b)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 a (set (tuple21 a b))))))) (sort
  (set1 (set1 (tuple2 a1 (set1 (tuple2 a1 b1))))) (t2tb57 x))))

(declare-fun tb2t57 (uni) (set (set (tuple21 a (set (tuple21 a b))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 a (set (tuple21 a b)))))))
  (! (= (tb2t57 (t2tb57 i)) i) :pattern ((t2tb57 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 a1 (set1 (tuple2 a1 b1))))) j)
     (= (t2tb57 (tb2t57 j)) j)) :pattern ((t2tb57 (tb2t57 j))) )))

;; mem_relation
  (assert
  (forall ((u (set a)) (v (set (set (tuple21 a b)))) (r (set (tuple21 a
  (set (tuple21 a b))))))
  (= (mem (set1 (tuple2 a1 (set1 (tuple2 a1 b1)))) (t2tb39 r)
  (relation (set1 (tuple2 a1 b1)) a1 (t2tb1 u) (t2tb10 v)))
  (forall ((x a) (y (set (tuple21 a b))))
  (=> (mem (tuple2 a1 (set1 (tuple2 a1 b1)))
  (Tuple2 a1 (set1 (tuple2 a1 b1)) (t2tb2 x) (t2tb11 y)) (t2tb39 r))
  (and (mem1 x u) (mem4 y v)))))))

(declare-fun t2tb58 ((set (set (tuple21 a (tuple21 a b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 a (tuple21 a b)))))) (sort
  (set1 (set1 (tuple2 a1 (tuple2 a1 b1)))) (t2tb58 x))))

(declare-fun tb2t58 (uni) (set (set (tuple21 a (tuple21 a b)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 a (tuple21 a b))))))
  (! (= (tb2t58 (t2tb58 i)) i) :pattern ((t2tb58 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 a1 (tuple2 a1 b1)))) j)
     (= (t2tb58 (tb2t58 j)) j)) :pattern ((t2tb58 (tb2t58 j))) )))

;; mem_relation
  (assert
  (forall ((u (set a)) (v (set (tuple21 a b))) (r (set (tuple21 a (tuple21 a
  b)))))
  (= (mem (set1 (tuple2 a1 (tuple2 a1 b1))) (t2tb41 r)
  (relation (tuple2 a1 b1) a1 (t2tb1 u) (t2tb11 v)))
  (forall ((x a) (y (tuple21 a b)))
  (=> (mem (tuple2 a1 (tuple2 a1 b1))
  (Tuple2 a1 (tuple2 a1 b1) (t2tb2 x) (t2tb13 y)) (t2tb41 r))
  (and (mem1 x u) (mem3 y v)))))))

;; mem_relation
  (assert
  (forall ((u (set a)) (v (set b)) (r (set (tuple21 a b))))
  (= (mem4 r (relation1 u v))
  (forall ((x a) (y b))
  (=> (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y))) r)
  (and (mem1 x u) (mem2 y v)))))))

(declare-fun t2tb3 ((set (set (tuple21 a a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 a a))))) (sort (set1 (set1 (tuple2 a1 a1)))
  (t2tb3 x))))

(declare-fun tb2t3 (uni) (set (set (tuple21 a a))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 a a)))))
  (! (= (tb2t3 (t2tb3 i)) i) :pattern ((t2tb3 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 a1 a1))) j) (= (t2tb3 (tb2t3 j)) j)) :pattern (
  (t2tb3 (tb2t3 j))) )))

;; mem_relation
  (assert
  (forall ((u (set a)) (v (set a)) (r (set (tuple21 a a))))
  (= (mem (set1 (tuple2 a1 a1)) (t2tb4 r)
  (relation a1 a1 (t2tb1 u) (t2tb1 v)))
  (forall ((x a) (y a))
  (=> (mem (tuple2 a1 a1) (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y)) (t2tb4 r))
  (and (mem1 x u) (mem1 y v)))))))

;; mem_relation
  (assert
  (forall ((b2 ty))
  (forall ((u (set a)) (v uni) (r uni))
  (and
  (=> (mem (set1 (tuple2 a1 b2)) r (relation b2 a1 (t2tb1 u) v))
  (forall ((x a) (y uni))
  (=> (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) y) r)
  (and (mem1 x u) (mem b2 y v)))))
  (=>
  (forall ((x a) (y uni))
  (=> (sort b2 y)
  (=> (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) y) r)
  (and (mem1 x u) (mem b2 y v))))) (mem (set1 (tuple2 a1 b2)) r
  (relation b2 a1 (t2tb1 u) v)))))))

;; mem_relation
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((u uni) (v uni) (r uni))
  (and
  (=> (mem (set1 (tuple2 a2 b2)) r (relation b2 a2 u v))
  (forall ((x uni) (y uni))
  (=> (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) r)
  (and (mem a2 x u) (mem b2 y v)))))
  (=>
  (forall ((x uni) (y uni))
  (=> (sort a2 x)
  (=> (sort b2 y)
  (=> (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) r)
  (and (mem a2 x u) (mem b2 y v)))))) (mem (set1 (tuple2 a2 b2)) r
  (relation b2 a2 u v)))))))

(declare-fun inverse (ty ty uni) uni)

;; inverse_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni)) (sort (set1 (tuple2 b2 a2)) (inverse b2 a2 x)))))

(declare-fun t2tb1123 ((tuple21 (tuple21 b c) a)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b c) a))) (sort (tuple2 (tuple2 b1 c1) a1)
  (t2tb1123 x))))

(declare-fun tb2t1123 (uni) (tuple21 (tuple21 b c) a))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b c) a)))
  (! (= (tb2t1123 (t2tb1123 i)) i) :pattern ((t2tb1123 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 c1) a1) j) (= (t2tb1123 (tb2t1123 j)) j)) :pattern (
  (t2tb1123 (tb2t1123 j))) )))

(declare-fun t2tb1124 ((set (tuple21 (tuple21 b c) a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b c) a)))) (sort
  (set1 (tuple2 (tuple2 b1 c1) a1)) (t2tb1124 x))))

(declare-fun tb2t1124 (uni) (set (tuple21 (tuple21 b c) a)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b c) a))))
  (! (= (tb2t1124 (t2tb1124 i)) i) :pattern ((t2tb1124 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 c1) a1)) j)
     (= (t2tb1124 (tb2t1124 j)) j)) :pattern ((t2tb1124 (tb2t1124 j))) )))

;; mem_inverse
  (assert
  (forall ((p (set (tuple21 (tuple21 b c) a))) (x a) (y (tuple21 b c)))
  (= (mem14 (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 y)))
  (tb2t261 (inverse a1 (tuple2 b1 c1) (t2tb1124 p)))) (mem
  (tuple2 (tuple2 b1 c1) a1) (Tuple2 (tuple2 b1 c1) a1 (t2tb134 y) (t2tb2 x))
  (t2tb1124 p)))))

;; mem_inverse
  (assert
  (forall ((p (set (tuple21 c a))) (x a) (y c))
  (= (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y)))
  (tb2t129 (inverse a1 c1 (t2tb224 p)))) (mem (tuple2 c1 a1)
  (Tuple2 c1 a1 (t2tb135 y) (t2tb2 x)) (t2tb224 p)))))

;; mem_inverse
  (assert
  (forall ((p (set (tuple21 b a))) (x a) (y b))
  (= (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y)))
  (tb2t11 (inverse a1 b1 (t2tb37 p)))) (mem (tuple2 b1 a1)
  (Tuple2 b1 a1 (t2tb14 y) (t2tb2 x)) (t2tb37 p)))))

;; mem_inverse
  (assert
  (forall ((p (set (tuple21 a (tuple21 b c)))) (x (tuple21 b c)) (y a))
  (= (mem (tuple2 (tuple2 b1 c1) a1)
  (Tuple2 (tuple2 b1 c1) a1 (t2tb134 x) (t2tb2 y))
  (inverse (tuple2 b1 c1) a1 (t2tb261 p))) (mem14
  (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 y) (t2tb134 x))) p))))

;; mem_inverse
  (assert
  (forall ((p (set (tuple21 a c))) (x c) (y a))
  (= (mem (tuple2 c1 a1) (Tuple2 c1 a1 (t2tb135 x) (t2tb2 y))
  (inverse c1 a1 (t2tb129 p))) (mem10
  (tb2t133 (Tuple2 a1 c1 (t2tb2 y) (t2tb135 x))) p))))

;; mem_inverse
  (assert
  (forall ((p (set (tuple21 a b))) (x b) (y a))
  (= (mem (tuple2 b1 a1) (Tuple2 b1 a1 (t2tb14 x) (t2tb2 y))
  (inverse b1 a1 (t2tb11 p))) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 y) (t2tb14 x))) p))))

;; mem_inverse
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((p uni) (x uni) (y uni))
  (= (mem (tuple2 b2 a2) (Tuple2 b2 a2 x y) (inverse b2 a2 p)) (mem
  (tuple2 a2 b2) (Tuple2 a2 b2 y x) p)))))

(declare-fun dom (ty ty uni) uni)

;; dom_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni)) (sort (set1 a2) (dom b2 a2 x)))))

;; mem_dom
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (x (tuple21 a (tuple21 b c))))
  (and
  (=> (mem14 x (tb2t261 (dom b2 (tuple2 a1 (tuple2 b1 c1)) p)))
  (exists ((b3 uni))
  (and (sort b2 b3) (mem (tuple2 (tuple2 a1 (tuple2 b1 c1)) b2)
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) b2 (t2tb260 x) b3) p))))
  (=>
  (exists ((b3 uni)) (mem (tuple2 (tuple2 a1 (tuple2 b1 c1)) b2)
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) b2 (t2tb260 x) b3) p)) (mem14 x
  (tb2t261 (dom b2 (tuple2 a1 (tuple2 b1 c1)) p))))))))

;; mem_dom
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (x (set (tuple21 a c))))
  (and
  (=> (mem11 x (tb2t128 (dom b2 (set1 (tuple2 a1 c1)) p)))
  (exists ((b3 uni))
  (and (sort b2 b3) (mem (tuple2 (set1 (tuple2 a1 c1)) b2)
  (Tuple2 (set1 (tuple2 a1 c1)) b2 (t2tb129 x) b3) p))))
  (=>
  (exists ((b3 uni)) (mem (tuple2 (set1 (tuple2 a1 c1)) b2)
  (Tuple2 (set1 (tuple2 a1 c1)) b2 (t2tb129 x) b3) p)) (mem11 x
  (tb2t128 (dom b2 (set1 (tuple2 a1 c1)) p))))))))

;; mem_dom
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (x (tuple21 a c)))
  (and
  (=> (mem10 x (tb2t129 (dom b2 (tuple2 a1 c1) p)))
  (exists ((b3 uni))
  (and (sort b2 b3) (mem (tuple2 (tuple2 a1 c1) b2)
  (Tuple2 (tuple2 a1 c1) b2 (t2tb133 x) b3) p))))
  (=>
  (exists ((b3 uni)) (mem (tuple2 (tuple2 a1 c1) b2)
  (Tuple2 (tuple2 a1 c1) b2 (t2tb133 x) b3) p)) (mem10 x
  (tb2t129 (dom b2 (tuple2 a1 c1) p))))))))

;; mem_dom
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (x c))
  (and
  (=> (mem7 x (tb2t132 (dom b2 c1 p)))
  (exists ((b3 uni))
  (and (sort b2 b3) (mem (tuple2 c1 b2) (Tuple2 c1 b2 (t2tb135 x) b3) p))))
  (=>
  (exists ((b3 uni)) (mem (tuple2 c1 b2) (Tuple2 c1 b2 (t2tb135 x) b3) p))
  (mem7 x (tb2t132 (dom b2 c1 p))))))))

;; mem_dom
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (x (set (tuple21 a b))))
  (and
  (=> (mem4 x (tb2t10 (dom b2 (set1 (tuple2 a1 b1)) p)))
  (exists ((b3 uni))
  (and (sort b2 b3) (mem (tuple2 (set1 (tuple2 a1 b1)) b2)
  (Tuple2 (set1 (tuple2 a1 b1)) b2 (t2tb11 x) b3) p))))
  (=>
  (exists ((b3 uni)) (mem (tuple2 (set1 (tuple2 a1 b1)) b2)
  (Tuple2 (set1 (tuple2 a1 b1)) b2 (t2tb11 x) b3) p)) (mem4 x
  (tb2t10 (dom b2 (set1 (tuple2 a1 b1)) p))))))))

;; mem_dom
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (x (tuple21 a b)))
  (and
  (=> (mem3 x (tb2t11 (dom b2 (tuple2 a1 b1) p)))
  (exists ((b3 uni))
  (and (sort b2 b3) (mem (tuple2 (tuple2 a1 b1) b2)
  (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) b3) p))))
  (=>
  (exists ((b3 uni)) (mem (tuple2 (tuple2 a1 b1) b2)
  (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) b3) p)) (mem3 x
  (tb2t11 (dom b2 (tuple2 a1 b1) p))))))))

;; mem_dom
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (x b))
  (and
  (=> (mem2 x (tb2t12 (dom b2 b1 p)))
  (exists ((b3 uni))
  (and (sort b2 b3) (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) b3) p))))
  (=> (exists ((b3 uni)) (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) b3) p))
  (mem2 x (tb2t12 (dom b2 b1 p))))))))

;; mem_dom
  (assert
  (forall ((p (set (tuple21 a (tuple21 b c)))) (x a))
  (= (mem1 x (tb2t1 (dom (tuple2 b1 c1) a1 (t2tb261 p))))
  (exists ((b2 (tuple21 b c))) (mem14
  (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 b2))) p)))))

;; mem_dom
  (assert
  (forall ((p (set (tuple21 a c))) (x a))
  (= (mem1 x (tb2t1 (dom c1 a1 (t2tb129 p))))
  (exists ((b2 c)) (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 b2))) p)))))

;; mem_dom
  (assert
  (forall ((p (set (tuple21 a b))) (x a))
  (= (mem1 x (tb2t1 (dom b1 a1 (t2tb11 p))))
  (exists ((b2 b)) (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 b2))) p)))))

;; mem_dom
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (x a))
  (and
  (=> (mem1 x (tb2t1 (dom b2 a1 p)))
  (exists ((b3 uni))
  (and (sort b2 b3) (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) b3) p))))
  (=> (exists ((b3 uni)) (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) b3) p))
  (mem1 x (tb2t1 (dom b2 a1 p))))))))

;; mem_dom
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((p uni) (x uni))
  (and
  (=> (mem a2 x (dom b2 a2 p))
  (exists ((b3 uni))
  (and (sort b2 b3) (mem (tuple2 a2 b2) (Tuple2 a2 b2 x b3) p))))
  (=> (exists ((b3 uni)) (mem (tuple2 a2 b2) (Tuple2 a2 b2 x b3) p)) (mem a2
  x (dom b2 a2 p)))))))

(declare-fun ran (ty ty uni) uni)

;; ran_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni)) (sort (set1 b2) (ran b2 a2 x)))))

;; mem_ran
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (x (tuple21 a (tuple21 b c))))
  (and
  (=> (mem14 x (tb2t261 (ran (tuple2 a1 (tuple2 b1 c1)) a2 p)))
  (exists ((a3 uni))
  (and (sort a2 a3) (mem (tuple2 a2 (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 a2 (tuple2 a1 (tuple2 b1 c1)) a3 (t2tb260 x)) p))))
  (=>
  (exists ((a3 uni)) (mem (tuple2 a2 (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 a2 (tuple2 a1 (tuple2 b1 c1)) a3 (t2tb260 x)) p)) (mem14 x
  (tb2t261 (ran (tuple2 a1 (tuple2 b1 c1)) a2 p))))))))

;; mem_ran
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (x (set (tuple21 a c))))
  (and
  (=> (mem11 x (tb2t128 (ran (set1 (tuple2 a1 c1)) a2 p)))
  (exists ((a3 uni))
  (and (sort a2 a3) (mem (tuple2 a2 (set1 (tuple2 a1 c1)))
  (Tuple2 a2 (set1 (tuple2 a1 c1)) a3 (t2tb129 x)) p))))
  (=>
  (exists ((a3 uni)) (mem (tuple2 a2 (set1 (tuple2 a1 c1)))
  (Tuple2 a2 (set1 (tuple2 a1 c1)) a3 (t2tb129 x)) p)) (mem11 x
  (tb2t128 (ran (set1 (tuple2 a1 c1)) a2 p))))))))

;; mem_ran
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (x (tuple21 a c)))
  (and
  (=> (mem10 x (tb2t129 (ran (tuple2 a1 c1) a2 p)))
  (exists ((a3 uni))
  (and (sort a2 a3) (mem (tuple2 a2 (tuple2 a1 c1))
  (Tuple2 a2 (tuple2 a1 c1) a3 (t2tb133 x)) p))))
  (=>
  (exists ((a3 uni)) (mem (tuple2 a2 (tuple2 a1 c1))
  (Tuple2 a2 (tuple2 a1 c1) a3 (t2tb133 x)) p)) (mem10 x
  (tb2t129 (ran (tuple2 a1 c1) a2 p))))))))

;; mem_ran
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (x c))
  (and
  (=> (mem7 x (tb2t132 (ran c1 a2 p)))
  (exists ((a3 uni))
  (and (sort a2 a3) (mem (tuple2 a2 c1) (Tuple2 a2 c1 a3 (t2tb135 x)) p))))
  (=>
  (exists ((a3 uni)) (mem (tuple2 a2 c1) (Tuple2 a2 c1 a3 (t2tb135 x)) p))
  (mem7 x (tb2t132 (ran c1 a2 p))))))))

;; mem_ran
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (x (set (tuple21 a b))))
  (and
  (=> (mem4 x (tb2t10 (ran (set1 (tuple2 a1 b1)) a2 p)))
  (exists ((a3 uni))
  (and (sort a2 a3) (mem (tuple2 a2 (set1 (tuple2 a1 b1)))
  (Tuple2 a2 (set1 (tuple2 a1 b1)) a3 (t2tb11 x)) p))))
  (=>
  (exists ((a3 uni)) (mem (tuple2 a2 (set1 (tuple2 a1 b1)))
  (Tuple2 a2 (set1 (tuple2 a1 b1)) a3 (t2tb11 x)) p)) (mem4 x
  (tb2t10 (ran (set1 (tuple2 a1 b1)) a2 p))))))))

;; mem_ran
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (x (tuple21 a b)))
  (and
  (=> (mem3 x (tb2t11 (ran (tuple2 a1 b1) a2 p)))
  (exists ((a3 uni))
  (and (sort a2 a3) (mem (tuple2 a2 (tuple2 a1 b1))
  (Tuple2 a2 (tuple2 a1 b1) a3 (t2tb13 x)) p))))
  (=>
  (exists ((a3 uni)) (mem (tuple2 a2 (tuple2 a1 b1))
  (Tuple2 a2 (tuple2 a1 b1) a3 (t2tb13 x)) p)) (mem3 x
  (tb2t11 (ran (tuple2 a1 b1) a2 p))))))))

;; mem_ran
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (x b))
  (and
  (=> (mem2 x (tb2t12 (ran b1 a2 p)))
  (exists ((a3 uni))
  (and (sort a2 a3) (mem (tuple2 a2 b1) (Tuple2 a2 b1 a3 (t2tb14 x)) p))))
  (=> (exists ((a3 uni)) (mem (tuple2 a2 b1) (Tuple2 a2 b1 a3 (t2tb14 x)) p))
  (mem2 x (tb2t12 (ran b1 a2 p))))))))

;; mem_ran
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (x a))
  (and
  (=> (mem1 x (tb2t1 (ran a1 a2 p)))
  (exists ((a3 uni))
  (and (sort a2 a3) (mem (tuple2 a2 a1) (Tuple2 a2 a1 a3 (t2tb2 x)) p))))
  (=> (exists ((a3 uni)) (mem (tuple2 a2 a1) (Tuple2 a2 a1 a3 (t2tb2 x)) p))
  (mem1 x (tb2t1 (ran a1 a2 p))))))))

;; mem_ran
  (assert
  (forall ((p (set (tuple21 a (tuple21 b c)))) (x (tuple21 b c)))
  (= (mem (tuple2 b1 c1) (t2tb134 x) (ran (tuple2 b1 c1) a1 (t2tb261 p)))
  (exists ((a2 a)) (mem14
  (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 a2) (t2tb134 x))) p)))))

;; mem_ran
  (assert
  (forall ((p (set (tuple21 a c))) (x c))
  (= (mem7 x (tb2t132 (ran c1 a1 (t2tb129 p))))
  (exists ((a2 a)) (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 a2) (t2tb135 x))) p)))))

;; mem_ran
  (assert
  (forall ((p (set (tuple21 a b))) (x b))
  (= (mem2 x (tb2t12 (ran b1 a1 (t2tb11 p))))
  (exists ((a2 a)) (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 a2) (t2tb14 x))) p)))))

;; mem_ran
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((p uni) (x uni))
  (and
  (=> (mem b2 x (ran b2 a2 p))
  (exists ((a3 uni))
  (and (sort a2 a3) (mem (tuple2 a2 b2) (Tuple2 a2 b2 a3 x) p))))
  (=> (exists ((a3 uni)) (mem (tuple2 a2 b2) (Tuple2 a2 b2 a3 x) p)) (mem b2
  x (ran b2 a2 p)))))))

(declare-fun semicolon (ty ty ty uni uni) uni)

;; semicolon_sort
  (assert
  (forall ((a2 ty) (b2 ty) (c2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (tuple2 a2 c2))
  (semicolon c2 b2 a2 x x1)))))

;; mem_semicolon
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (q (set (tuple21 a (tuple21 b c)))) (x uni) (y (tuple21 b
  c)))
  (= (mem (tuple2 a2 (tuple2 b1 c1)) (Tuple2 a2 (tuple2 b1 c1) x (t2tb134 y))
  (semicolon (tuple2 b1 c1) a1 a2 p (t2tb261 q)))
  (exists ((b2 a))
  (and (mem (tuple2 a2 a1) (Tuple2 a2 a1 x (t2tb2 b2)) p) (mem14
  (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 b2) (t2tb134 y))) q)))))))

;; mem_semicolon
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (q (set (tuple21 a c))) (x uni) (y c))
  (= (mem (tuple2 a2 c1) (Tuple2 a2 c1 x (t2tb135 y))
  (semicolon c1 a1 a2 p (t2tb129 q)))
  (exists ((b2 a))
  (and (mem (tuple2 a2 a1) (Tuple2 a2 a1 x (t2tb2 b2)) p) (mem10
  (tb2t133 (Tuple2 a1 c1 (t2tb2 b2) (t2tb135 y))) q)))))))

;; mem_semicolon
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (q (set (tuple21 a b))) (x uni) (y b))
  (= (mem (tuple2 a2 b1) (Tuple2 a2 b1 x (t2tb14 y))
  (semicolon b1 a1 a2 p (t2tb11 q)))
  (exists ((b2 a))
  (and (mem (tuple2 a2 a1) (Tuple2 a2 a1 x (t2tb2 b2)) p) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 b2) (t2tb14 y))) q)))))))

;; mem_semicolon
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (q uni) (x a) (y (tuple21 b c)))
  (and
  (=> (mem14 (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 y)))
  (tb2t261 (semicolon (tuple2 b1 c1) b2 a1 p q)))
  (exists ((b3 uni))
  (and (sort b2 b3)
  (and (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) b3) p) (mem
  (tuple2 b2 (tuple2 b1 c1)) (Tuple2 b2 (tuple2 b1 c1) b3 (t2tb134 y)) q)))))
  (=>
  (exists ((b3 uni))
  (and (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) b3) p) (mem
  (tuple2 b2 (tuple2 b1 c1)) (Tuple2 b2 (tuple2 b1 c1) b3 (t2tb134 y)) q)))
  (mem14 (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 y)))
  (tb2t261 (semicolon (tuple2 b1 c1) b2 a1 p q))))))))

;; mem_semicolon
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (q uni) (x a) (y c))
  (and
  (=> (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y)))
  (tb2t129 (semicolon c1 b2 a1 p q)))
  (exists ((b3 uni))
  (and (sort b2 b3)
  (and (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) b3) p) (mem (tuple2 b2 c1)
  (Tuple2 b2 c1 b3 (t2tb135 y)) q)))))
  (=>
  (exists ((b3 uni))
  (and (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) b3) p) (mem (tuple2 b2 c1)
  (Tuple2 b2 c1 b3 (t2tb135 y)) q))) (mem10
  (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y)))
  (tb2t129 (semicolon c1 b2 a1 p q))))))))

;; mem_semicolon
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (q uni) (x a) (y b))
  (and
  (=> (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y)))
  (tb2t11 (semicolon b1 b2 a1 p q)))
  (exists ((b3 uni))
  (and (sort b2 b3)
  (and (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) b3) p) (mem (tuple2 b2 b1)
  (Tuple2 b2 b1 b3 (t2tb14 y)) q)))))
  (=>
  (exists ((b3 uni))
  (and (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) b3) p) (mem (tuple2 b2 b1)
  (Tuple2 b2 b1 b3 (t2tb14 y)) q))) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y)))
  (tb2t11 (semicolon b1 b2 a1 p q))))))))

(declare-fun t2tb1113 ((set (tuple21 (tuple21 b c) (tuple21 b c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b c) (tuple21 b c))))) (sort
  (set1 (tuple2 (tuple2 b1 c1) (tuple2 b1 c1))) (t2tb1113 x))))

(declare-fun tb2t1113 (uni) (set (tuple21 (tuple21 b c) (tuple21 b c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b c) (tuple21 b c)))))
  (! (= (tb2t1113 (t2tb1113 i)) i) :pattern ((t2tb1113 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 c1) (tuple2 b1 c1))) j)
     (= (t2tb1113 (tb2t1113 j)) j)) :pattern ((t2tb1113 (tb2t1113 j))) )))

(declare-fun t2tb1114 ((tuple21 (tuple21 b c) (tuple21 b c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b c) (tuple21 b c)))) (sort
  (tuple2 (tuple2 b1 c1) (tuple2 b1 c1)) (t2tb1114 x))))

(declare-fun tb2t1114 (uni) (tuple21 (tuple21 b c) (tuple21 b c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b c) (tuple21 b c))))
  (! (= (tb2t1114 (t2tb1114 i)) i) :pattern ((t2tb1114 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 c1) (tuple2 b1 c1)) j)
     (= (t2tb1114 (tb2t1114 j)) j)) :pattern ((t2tb1114 (tb2t1114 j))) )))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 a (tuple21 b c)))) (q (set (tuple21 (tuple21 b c)
  (tuple21 b c)))) (x a) (y (tuple21 b c)))
  (= (mem14 (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 y)))
  (tb2t261
  (semicolon (tuple2 b1 c1) (tuple2 b1 c1) a1 (t2tb261 p) (t2tb1113 q))))
  (exists ((b2 (tuple21 b c)))
  (and (mem14 (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 b2))) p)
  (mem (tuple2 (tuple2 b1 c1) (tuple2 b1 c1))
  (Tuple2 (tuple2 b1 c1) (tuple2 b1 c1) (t2tb134 b2) (t2tb134 y))
  (t2tb1113 q)))))))

(declare-fun t2tb1115 ((set (tuple21 (tuple21 b c) c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b c) c)))) (sort
  (set1 (tuple2 (tuple2 b1 c1) c1)) (t2tb1115 x))))

(declare-fun tb2t1115 (uni) (set (tuple21 (tuple21 b c) c)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b c) c))))
  (! (= (tb2t1115 (t2tb1115 i)) i) :pattern ((t2tb1115 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 c1) c1)) j)
     (= (t2tb1115 (tb2t1115 j)) j)) :pattern ((t2tb1115 (tb2t1115 j))) )))

(declare-fun t2tb1116 ((tuple21 (tuple21 b c) c)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b c) c))) (sort (tuple2 (tuple2 b1 c1) c1)
  (t2tb1116 x))))

(declare-fun tb2t1116 (uni) (tuple21 (tuple21 b c) c))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b c) c)))
  (! (= (tb2t1116 (t2tb1116 i)) i) :pattern ((t2tb1116 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 c1) c1) j) (= (t2tb1116 (tb2t1116 j)) j)) :pattern (
  (t2tb1116 (tb2t1116 j))) )))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 a (tuple21 b c)))) (q (set (tuple21 (tuple21 b c)
  c))) (x a) (y c))
  (= (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y)))
  (tb2t129 (semicolon c1 (tuple2 b1 c1) a1 (t2tb261 p) (t2tb1115 q))))
  (exists ((b2 (tuple21 b c)))
  (and (mem14 (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 b2))) p)
  (mem (tuple2 (tuple2 b1 c1) c1)
  (Tuple2 (tuple2 b1 c1) c1 (t2tb134 b2) (t2tb135 y)) (t2tb1115 q)))))))

(declare-fun t2tb1121 ((set (tuple21 (tuple21 b c) b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b c) b)))) (sort
  (set1 (tuple2 (tuple2 b1 c1) b1)) (t2tb1121 x))))

(declare-fun tb2t1121 (uni) (set (tuple21 (tuple21 b c) b)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b c) b))))
  (! (= (tb2t1121 (t2tb1121 i)) i) :pattern ((t2tb1121 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 c1) b1)) j)
     (= (t2tb1121 (tb2t1121 j)) j)) :pattern ((t2tb1121 (tb2t1121 j))) )))

(declare-fun t2tb1122 ((tuple21 (tuple21 b c) b)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b c) b))) (sort (tuple2 (tuple2 b1 c1) b1)
  (t2tb1122 x))))

(declare-fun tb2t1122 (uni) (tuple21 (tuple21 b c) b))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b c) b)))
  (! (= (tb2t1122 (t2tb1122 i)) i) :pattern ((t2tb1122 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 c1) b1) j) (= (t2tb1122 (tb2t1122 j)) j)) :pattern (
  (t2tb1122 (tb2t1122 j))) )))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 a (tuple21 b c)))) (q (set (tuple21 (tuple21 b c)
  b))) (x a) (y b))
  (= (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y)))
  (tb2t11 (semicolon b1 (tuple2 b1 c1) a1 (t2tb261 p) (t2tb1121 q))))
  (exists ((b2 (tuple21 b c)))
  (and (mem14 (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 b2))) p)
  (mem (tuple2 (tuple2 b1 c1) b1)
  (Tuple2 (tuple2 b1 c1) b1 (t2tb134 b2) (t2tb14 y)) (t2tb1121 q)))))))

;; mem_semicolon
  (assert
  (forall ((c2 ty))
  (forall ((p (set (tuple21 a (tuple21 b c)))) (q uni) (x a) (y uni))
  (= (mem (tuple2 a1 c2) (Tuple2 a1 c2 (t2tb2 x) y)
  (semicolon c2 (tuple2 b1 c1) a1 (t2tb261 p) q))
  (exists ((b2 (tuple21 b c)))
  (and (mem14 (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 b2))) p)
  (mem (tuple2 (tuple2 b1 c1) c2) (Tuple2 (tuple2 b1 c1) c2 (t2tb134 b2) y)
  q)))))))

(declare-fun t2tb1127 ((set (tuple21 c (tuple21 b c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 c (tuple21 b c))))) (sort
  (set1 (tuple2 c1 (tuple2 b1 c1))) (t2tb1127 x))))

(declare-fun tb2t1127 (uni) (set (tuple21 c (tuple21 b c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 c (tuple21 b c)))))
  (! (= (tb2t1127 (t2tb1127 i)) i) :pattern ((t2tb1127 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 c1 (tuple2 b1 c1))) j)
     (= (t2tb1127 (tb2t1127 j)) j)) :pattern ((t2tb1127 (tb2t1127 j))) )))

(declare-fun t2tb1128 ((tuple21 c (tuple21 b c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 c (tuple21 b c)))) (sort (tuple2 c1 (tuple2 b1 c1))
  (t2tb1128 x))))

(declare-fun tb2t1128 (uni) (tuple21 c (tuple21 b c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 c (tuple21 b c))))
  (! (= (tb2t1128 (t2tb1128 i)) i) :pattern ((t2tb1128 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 c1 (tuple2 b1 c1)) j) (= (t2tb1128 (tb2t1128 j)) j)) :pattern (
  (t2tb1128 (tb2t1128 j))) )))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 a c))) (q (set (tuple21 c (tuple21 b c)))) (x a)
  (y (tuple21 b c)))
  (= (mem14 (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 y)))
  (tb2t261 (semicolon (tuple2 b1 c1) c1 a1 (t2tb129 p) (t2tb1127 q))))
  (exists ((b2 c))
  (and (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 b2))) p) (mem
  (tuple2 c1 (tuple2 b1 c1))
  (Tuple2 c1 (tuple2 b1 c1) (t2tb135 b2) (t2tb134 y)) (t2tb1127 q)))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 a c))) (q (set (tuple21 c c))) (x a) (y c))
  (= (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y)))
  (tb2t129 (semicolon c1 c1 a1 (t2tb129 p) (t2tb216 q))))
  (exists ((b2 c))
  (and (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 b2))) p) (mem
  (tuple2 c1 c1) (Tuple2 c1 c1 (t2tb135 b2) (t2tb135 y)) (t2tb216 q)))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 a c))) (q (set (tuple21 c b))) (x a) (y b))
  (= (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y)))
  (tb2t11 (semicolon b1 c1 a1 (t2tb129 p) (t2tb222 q))))
  (exists ((b2 c))
  (and (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 b2))) p) (mem
  (tuple2 c1 b1) (Tuple2 c1 b1 (t2tb135 b2) (t2tb14 y)) (t2tb222 q)))))))

;; mem_semicolon
  (assert
  (forall ((c2 ty))
  (forall ((p (set (tuple21 a c))) (q uni) (x a) (y uni))
  (= (mem (tuple2 a1 c2) (Tuple2 a1 c2 (t2tb2 x) y)
  (semicolon c2 c1 a1 (t2tb129 p) q))
  (exists ((b2 c))
  (and (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 b2))) p) (mem
  (tuple2 c1 c2) (Tuple2 c1 c2 (t2tb135 b2) y) q)))))))

(declare-fun t2tb1139 ((set (tuple21 b (tuple21 b c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 b (tuple21 b c))))) (sort
  (set1 (tuple2 b1 (tuple2 b1 c1))) (t2tb1139 x))))

(declare-fun tb2t1139 (uni) (set (tuple21 b (tuple21 b c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 b (tuple21 b c)))))
  (! (= (tb2t1139 (t2tb1139 i)) i) :pattern ((t2tb1139 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 b1 (tuple2 b1 c1))) j)
     (= (t2tb1139 (tb2t1139 j)) j)) :pattern ((t2tb1139 (tb2t1139 j))) )))

(declare-fun t2tb1140 ((tuple21 b (tuple21 b c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 b (tuple21 b c)))) (sort (tuple2 b1 (tuple2 b1 c1))
  (t2tb1140 x))))

(declare-fun tb2t1140 (uni) (tuple21 b (tuple21 b c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 b (tuple21 b c))))
  (! (= (tb2t1140 (t2tb1140 i)) i) :pattern ((t2tb1140 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 b1 (tuple2 b1 c1)) j) (= (t2tb1140 (tb2t1140 j)) j)) :pattern (
  (t2tb1140 (tb2t1140 j))) )))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 a b))) (q (set (tuple21 b (tuple21 b c)))) (x a)
  (y (tuple21 b c)))
  (= (mem14 (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 y)))
  (tb2t261 (semicolon (tuple2 b1 c1) b1 a1 (t2tb11 p) (t2tb1139 q))))
  (exists ((b2 b))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 b2))) p) (mem
  (tuple2 b1 (tuple2 b1 c1))
  (Tuple2 b1 (tuple2 b1 c1) (t2tb14 b2) (t2tb134 y)) (t2tb1139 q)))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 a b))) (q (set (tuple21 b c))) (x a) (y c))
  (= (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y)))
  (tb2t129 (semicolon c1 b1 a1 (t2tb11 p) (t2tb131 q))))
  (exists ((b2 b))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 b2))) p) (mem
  (tuple2 b1 c1) (Tuple2 b1 c1 (t2tb14 b2) (t2tb135 y)) (t2tb131 q)))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 a b))) (q (set (tuple21 b b))) (x a) (y b))
  (= (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y)))
  (tb2t11 (semicolon b1 b1 a1 (t2tb11 p) (t2tb35 q))))
  (exists ((b2 b))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 b2))) p) (mem
  (tuple2 b1 b1) (Tuple2 b1 b1 (t2tb14 b2) (t2tb14 y)) (t2tb35 q)))))))

;; mem_semicolon
  (assert
  (forall ((c2 ty))
  (forall ((p (set (tuple21 a b))) (q uni) (x a) (y uni))
  (= (mem (tuple2 a1 c2) (Tuple2 a1 c2 (t2tb2 x) y)
  (semicolon c2 b1 a1 (t2tb11 p) q))
  (exists ((b2 b))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 b2))) p) (mem
  (tuple2 b1 c2) (Tuple2 b1 c2 (t2tb14 b2) y) q)))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 a a))) (q (set (tuple21 a (tuple21 b c)))) (x a)
  (y (tuple21 b c)))
  (= (mem14 (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 y)))
  (tb2t261 (semicolon (tuple2 b1 c1) a1 a1 (t2tb4 p) (t2tb261 q))))
  (exists ((b2 a))
  (and (mem (tuple2 a1 a1) (Tuple2 a1 a1 (t2tb2 x) (t2tb2 b2)) (t2tb4 p))
  (mem14 (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 b2) (t2tb134 y))) q))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 a a))) (q (set (tuple21 a c))) (x a) (y c))
  (= (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y)))
  (tb2t129 (semicolon c1 a1 a1 (t2tb4 p) (t2tb129 q))))
  (exists ((b2 a))
  (and (mem (tuple2 a1 a1) (Tuple2 a1 a1 (t2tb2 x) (t2tb2 b2)) (t2tb4 p))
  (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 b2) (t2tb135 y))) q))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 a a))) (q (set (tuple21 a b))) (x a) (y b))
  (= (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y)))
  (tb2t11 (semicolon b1 a1 a1 (t2tb4 p) (t2tb11 q))))
  (exists ((b2 a))
  (and (mem (tuple2 a1 a1) (Tuple2 a1 a1 (t2tb2 x) (t2tb2 b2)) (t2tb4 p))
  (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 b2) (t2tb14 y))) q))))))

;; mem_semicolon
  (assert
  (forall ((a2 ty) (b2 ty) (c2 ty))
  (forall ((p uni) (q uni) (x uni) (y uni))
  (and
  (=> (mem (tuple2 a2 c2) (Tuple2 a2 c2 x y) (semicolon c2 b2 a2 p q))
  (exists ((b3 uni))
  (and (sort b2 b3)
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x b3) p) (mem (tuple2 b2 c2)
  (Tuple2 b2 c2 b3 y) q)))))
  (=>
  (exists ((b3 uni))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x b3) p) (mem (tuple2 b2 c2)
  (Tuple2 b2 c2 b3 y) q))) (mem (tuple2 a2 c2) (Tuple2 a2 c2 x y)
  (semicolon c2 b2 a2 p q)))))))

(declare-fun semicolon_back (ty ty ty uni uni) uni)

;; semicolon_back_sort
  (assert
  (forall ((a2 ty) (b2 ty) (c2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (tuple2 a2 c2))
  (semicolon_back c2 b2 a2 x x1)))))

;; semicolon_back
  (assert
  (forall ((a2 ty) (b2 ty) (c2 ty))
  (forall ((p uni) (q uni))
  (= (semicolon_back c2 b2 a2 q p) (semicolon c2 b2 a2 p q)))))

(declare-fun id (ty uni) uni)

;; id_sort
  (assert
  (forall ((a2 ty))
  (forall ((x uni)) (sort (set1 (tuple2 a2 a2)) (id a2 x)))))

;; mem_id
  (assert
  (forall ((u (set (tuple21 a (tuple21 b c)))) (x (tuple21 a (tuple21 b c)))
  (y (tuple21 a (tuple21 b c))))
  (= (mem (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 (tuple2 b1 c1)) (t2tb260 x)
  (t2tb260 y)) (id (tuple2 a1 (tuple2 b1 c1)) (t2tb261 u)))
  (and (mem14 x u) (= x y)))))

;; mem_id
  (assert
  (forall ((u (set (set (tuple21 a c)))) (x (set (tuple21 a c)))
  (y (set (tuple21 a c))))
  (= (mem (tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 a1 c1)))
  (Tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 a1 c1)) (t2tb129 x)
  (t2tb129 y)) (id (set1 (tuple2 a1 c1)) (t2tb128 u)))
  (and (mem11 x u) (= x y)))))

;; mem_id
  (assert
  (forall ((u (set (tuple21 a c))) (x (tuple21 a c)) (y (tuple21 a c)))
  (= (mem (tuple2 (tuple2 a1 c1) (tuple2 a1 c1))
  (Tuple2 (tuple2 a1 c1) (tuple2 a1 c1) (t2tb133 x) (t2tb133 y))
  (id (tuple2 a1 c1) (t2tb129 u))) (and (mem10 x u) (= x y)))))

;; mem_id
  (assert
  (forall ((u (set c)) (x c) (y c))
  (= (mem (tuple2 c1 c1) (Tuple2 c1 c1 (t2tb135 x) (t2tb135 y))
  (id c1 (t2tb132 u))) (and (mem7 x u) (= x y)))))

;; mem_id
  (assert
  (forall ((u (set (set (tuple21 a b)))) (x (set (tuple21 a b)))
  (y (set (tuple21 a b))))
  (= (mem (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1)))
  (Tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1)) (t2tb11 x) (t2tb11 y))
  (id (set1 (tuple2 a1 b1)) (t2tb10 u))) (and (mem4 x u) (= x y)))))

;; mem_id
  (assert
  (forall ((u (set (tuple21 a b))) (x (tuple21 a b)) (y (tuple21 a b)))
  (= (mem (tuple2 (tuple2 a1 b1) (tuple2 a1 b1))
  (Tuple2 (tuple2 a1 b1) (tuple2 a1 b1) (t2tb13 x) (t2tb13 y))
  (id (tuple2 a1 b1) (t2tb11 u))) (and (mem3 x u) (= x y)))))

;; mem_id
  (assert
  (forall ((u (set b)) (x b) (y b))
  (= (mem (tuple2 b1 b1) (Tuple2 b1 b1 (t2tb14 x) (t2tb14 y))
  (id b1 (t2tb12 u))) (and (mem2 x u) (= x y)))))

;; mem_id
  (assert
  (forall ((u (set a)) (x a) (y a))
  (= (mem (tuple2 a1 a1) (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y))
  (id a1 (t2tb1 u))) (and (mem1 x u) (= x y)))))

;; mem_id
  (assert
  (forall ((a2 ty))
  (forall ((u uni) (x uni) (y uni))
  (=> (sort a2 x)
  (=> (sort a2 y)
  (= (mem (tuple2 a2 a2) (Tuple2 a2 a2 x y) (id a2 u))
  (and (mem a2 x u) (= x y))))))))

(declare-fun domain_restriction (ty ty uni uni) uni)

;; domain_restriction_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (tuple2 a2 b2))
  (domain_restriction b2 a2 x x1)))))

;; mem_domain_restriction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (tuple21 a (tuple21 b c)))) (x (tuple21 a
  (tuple21 b c))) (y uni))
  (= (mem (tuple2 (tuple2 a1 (tuple2 b1 c1)) b2)
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) b2 (t2tb260 x) y)
  (domain_restriction b2 (tuple2 a1 (tuple2 b1 c1)) (t2tb261 s) p))
  (and (mem (tuple2 (tuple2 a1 (tuple2 b1 c1)) b2)
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) b2 (t2tb260 x) y) p) (mem14 x s))))))

;; mem_domain_restriction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (set (tuple21 a c)))) (x (set (tuple21 a c)))
  (y uni))
  (= (mem (tuple2 (set1 (tuple2 a1 c1)) b2)
  (Tuple2 (set1 (tuple2 a1 c1)) b2 (t2tb129 x) y)
  (domain_restriction b2 (set1 (tuple2 a1 c1)) (t2tb128 s) p))
  (and (mem (tuple2 (set1 (tuple2 a1 c1)) b2)
  (Tuple2 (set1 (tuple2 a1 c1)) b2 (t2tb129 x) y) p) (mem11 x s))))))

;; mem_domain_restriction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (tuple21 a c))) (x (tuple21 a c)) (y uni))
  (= (mem (tuple2 (tuple2 a1 c1) b2) (Tuple2 (tuple2 a1 c1) b2 (t2tb133 x) y)
  (domain_restriction b2 (tuple2 a1 c1) (t2tb129 s) p))
  (and (mem (tuple2 (tuple2 a1 c1) b2)
  (Tuple2 (tuple2 a1 c1) b2 (t2tb133 x) y) p) (mem10 x s))))))

;; mem_domain_restriction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set c)) (x c) (y uni))
  (= (mem (tuple2 c1 b2) (Tuple2 c1 b2 (t2tb135 x) y)
  (domain_restriction b2 c1 (t2tb132 s) p))
  (and (mem (tuple2 c1 b2) (Tuple2 c1 b2 (t2tb135 x) y) p) (mem7 x s))))))

;; mem_domain_restriction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (set (tuple21 a b)))) (x (set (tuple21 a b)))
  (y uni))
  (= (mem (tuple2 (set1 (tuple2 a1 b1)) b2)
  (Tuple2 (set1 (tuple2 a1 b1)) b2 (t2tb11 x) y)
  (domain_restriction b2 (set1 (tuple2 a1 b1)) (t2tb10 s) p))
  (and (mem (tuple2 (set1 (tuple2 a1 b1)) b2)
  (Tuple2 (set1 (tuple2 a1 b1)) b2 (t2tb11 x) y) p) (mem4 x s))))))

;; mem_domain_restriction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (tuple21 a b))) (x (tuple21 a b)) (y uni))
  (= (mem (tuple2 (tuple2 a1 b1) b2) (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) y)
  (domain_restriction b2 (tuple2 a1 b1) (t2tb11 s) p))
  (and (mem (tuple2 (tuple2 a1 b1) b2)
  (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) y) p) (mem3 x s))))))

;; mem_domain_restriction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set b)) (x b) (y uni))
  (= (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) y)
  (domain_restriction b2 b1 (t2tb12 s) p))
  (and (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) y) p) (mem2 x s))))))

;; mem_domain_restriction
  (assert
  (forall ((p (set (tuple21 a (tuple21 b c)))) (s (set a)) (x a)
  (y (tuple21 b c)))
  (= (mem14 (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 y)))
  (tb2t261 (domain_restriction (tuple2 b1 c1) a1 (t2tb1 s) (t2tb261 p))))
  (and (mem14 (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 y))) p)
  (mem1 x s)))))

;; mem_domain_restriction
  (assert
  (forall ((p (set (tuple21 a c))) (s (set a)) (x a) (y c))
  (= (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y)))
  (tb2t129 (domain_restriction c1 a1 (t2tb1 s) (t2tb129 p))))
  (and (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y))) p) (mem1 x s)))))

;; mem_domain_restriction
  (assert
  (forall ((p (set (tuple21 a b))) (s (set a)) (x a) (y b))
  (= (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y)))
  (tb2t11 (domain_restriction b1 a1 (t2tb1 s) (t2tb11 p))))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y))) p) (mem1 x s)))))

;; mem_domain_restriction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set a)) (x a) (y uni))
  (= (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) y)
  (domain_restriction b2 a1 (t2tb1 s) p))
  (and (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) y) p) (mem1 x s))))))

;; mem_domain_restriction
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((p uni) (s uni) (x uni) (y uni))
  (= (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) (domain_restriction b2 a2 s p))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) p) (mem a2 x s))))))

(declare-fun range_restriction (ty ty uni uni) uni)

;; range_restriction_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (tuple2 a2 b2))
  (range_restriction b2 a2 x x1)))))

;; mem_range_restriction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (tuple21 a (tuple21 b c)))) (x uni) (y (tuple21 a
  (tuple21 b c))))
  (= (mem (tuple2 a2 (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 a2 (tuple2 a1 (tuple2 b1 c1)) x (t2tb260 y))
  (range_restriction (tuple2 a1 (tuple2 b1 c1)) a2 p (t2tb261 t)))
  (and (mem (tuple2 a2 (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 a2 (tuple2 a1 (tuple2 b1 c1)) x (t2tb260 y)) p) (mem14 y t))))))

;; mem_range_restriction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (set (tuple21 a c)))) (x uni) (y (set (tuple21 a
  c))))
  (= (mem (tuple2 a2 (set1 (tuple2 a1 c1)))
  (Tuple2 a2 (set1 (tuple2 a1 c1)) x (t2tb129 y))
  (range_restriction (set1 (tuple2 a1 c1)) a2 p (t2tb128 t)))
  (and (mem (tuple2 a2 (set1 (tuple2 a1 c1)))
  (Tuple2 a2 (set1 (tuple2 a1 c1)) x (t2tb129 y)) p) (mem11 y t))))))

;; mem_range_restriction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (tuple21 a c))) (x uni) (y (tuple21 a c)))
  (= (mem (tuple2 a2 (tuple2 a1 c1)) (Tuple2 a2 (tuple2 a1 c1) x (t2tb133 y))
  (range_restriction (tuple2 a1 c1) a2 p (t2tb129 t)))
  (and (mem (tuple2 a2 (tuple2 a1 c1))
  (Tuple2 a2 (tuple2 a1 c1) x (t2tb133 y)) p) (mem10 y t))))))

;; mem_range_restriction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set c)) (x uni) (y c))
  (= (mem (tuple2 a2 c1) (Tuple2 a2 c1 x (t2tb135 y))
  (range_restriction c1 a2 p (t2tb132 t)))
  (and (mem (tuple2 a2 c1) (Tuple2 a2 c1 x (t2tb135 y)) p) (mem7 y t))))))

;; mem_range_restriction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (set (tuple21 a b)))) (x uni) (y (set (tuple21 a
  b))))
  (= (mem (tuple2 a2 (set1 (tuple2 a1 b1)))
  (Tuple2 a2 (set1 (tuple2 a1 b1)) x (t2tb11 y))
  (range_restriction (set1 (tuple2 a1 b1)) a2 p (t2tb10 t)))
  (and (mem (tuple2 a2 (set1 (tuple2 a1 b1)))
  (Tuple2 a2 (set1 (tuple2 a1 b1)) x (t2tb11 y)) p) (mem4 y t))))))

;; mem_range_restriction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (tuple21 a b))) (x uni) (y (tuple21 a b)))
  (= (mem (tuple2 a2 (tuple2 a1 b1)) (Tuple2 a2 (tuple2 a1 b1) x (t2tb13 y))
  (range_restriction (tuple2 a1 b1) a2 p (t2tb11 t)))
  (and (mem (tuple2 a2 (tuple2 a1 b1))
  (Tuple2 a2 (tuple2 a1 b1) x (t2tb13 y)) p) (mem3 y t))))))

;; mem_range_restriction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set b)) (x uni) (y b))
  (= (mem (tuple2 a2 b1) (Tuple2 a2 b1 x (t2tb14 y))
  (range_restriction b1 a2 p (t2tb12 t)))
  (and (mem (tuple2 a2 b1) (Tuple2 a2 b1 x (t2tb14 y)) p) (mem2 y t))))))

;; mem_range_restriction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set a)) (x uni) (y a))
  (= (mem (tuple2 a2 a1) (Tuple2 a2 a1 x (t2tb2 y))
  (range_restriction a1 a2 p (t2tb1 t)))
  (and (mem (tuple2 a2 a1) (Tuple2 a2 a1 x (t2tb2 y)) p) (mem1 y t))))))

;; mem_range_restriction
  (assert
  (forall ((p (set (tuple21 a (tuple21 b c)))) (t (set (tuple21 b c))) (x a)
  (y (tuple21 b c)))
  (= (mem14 (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 y)))
  (tb2t261 (range_restriction (tuple2 b1 c1) a1 (t2tb261 p) (t2tb131 t))))
  (and (mem14 (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 y))) p)
  (mem (tuple2 b1 c1) (t2tb134 y) (t2tb131 t))))))

;; mem_range_restriction
  (assert
  (forall ((p (set (tuple21 a c))) (t (set c)) (x a) (y c))
  (= (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y)))
  (tb2t129 (range_restriction c1 a1 (t2tb129 p) (t2tb132 t))))
  (and (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y))) p) (mem7 y t)))))

;; mem_range_restriction
  (assert
  (forall ((p (set (tuple21 a b))) (t (set b)) (x a) (y b))
  (= (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y)))
  (tb2t11 (range_restriction b1 a1 (t2tb11 p) (t2tb12 t))))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y))) p) (mem2 y t)))))

;; mem_range_restriction
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((p uni) (t uni) (x uni) (y uni))
  (= (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) (range_restriction b2 a2 p t))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) p) (mem b2 y t))))))

(declare-fun domain_substraction (ty ty uni uni) uni)

;; domain_substraction_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (tuple2 a2 b2))
  (domain_substraction b2 a2 x x1)))))

;; mem_domain_substraction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (tuple21 a (tuple21 b c)))) (x (tuple21 a
  (tuple21 b c))) (y uni))
  (= (mem (tuple2 (tuple2 a1 (tuple2 b1 c1)) b2)
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) b2 (t2tb260 x) y)
  (domain_substraction b2 (tuple2 a1 (tuple2 b1 c1)) (t2tb261 s) p))
  (and (mem (tuple2 (tuple2 a1 (tuple2 b1 c1)) b2)
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) b2 (t2tb260 x) y) p) (not (mem14 x s)))))))

;; mem_domain_substraction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (set (tuple21 a c)))) (x (set (tuple21 a c)))
  (y uni))
  (= (mem (tuple2 (set1 (tuple2 a1 c1)) b2)
  (Tuple2 (set1 (tuple2 a1 c1)) b2 (t2tb129 x) y)
  (domain_substraction b2 (set1 (tuple2 a1 c1)) (t2tb128 s) p))
  (and (mem (tuple2 (set1 (tuple2 a1 c1)) b2)
  (Tuple2 (set1 (tuple2 a1 c1)) b2 (t2tb129 x) y) p) (not (mem11 x s)))))))

;; mem_domain_substraction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (tuple21 a c))) (x (tuple21 a c)) (y uni))
  (= (mem (tuple2 (tuple2 a1 c1) b2) (Tuple2 (tuple2 a1 c1) b2 (t2tb133 x) y)
  (domain_substraction b2 (tuple2 a1 c1) (t2tb129 s) p))
  (and (mem (tuple2 (tuple2 a1 c1) b2)
  (Tuple2 (tuple2 a1 c1) b2 (t2tb133 x) y) p) (not (mem10 x s)))))))

;; mem_domain_substraction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set c)) (x c) (y uni))
  (= (mem (tuple2 c1 b2) (Tuple2 c1 b2 (t2tb135 x) y)
  (domain_substraction b2 c1 (t2tb132 s) p))
  (and (mem (tuple2 c1 b2) (Tuple2 c1 b2 (t2tb135 x) y) p) (not (mem7 x s)))))))

;; mem_domain_substraction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (set (tuple21 a b)))) (x (set (tuple21 a b)))
  (y uni))
  (= (mem (tuple2 (set1 (tuple2 a1 b1)) b2)
  (Tuple2 (set1 (tuple2 a1 b1)) b2 (t2tb11 x) y)
  (domain_substraction b2 (set1 (tuple2 a1 b1)) (t2tb10 s) p))
  (and (mem (tuple2 (set1 (tuple2 a1 b1)) b2)
  (Tuple2 (set1 (tuple2 a1 b1)) b2 (t2tb11 x) y) p) (not (mem4 x s)))))))

;; mem_domain_substraction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (tuple21 a b))) (x (tuple21 a b)) (y uni))
  (= (mem (tuple2 (tuple2 a1 b1) b2) (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) y)
  (domain_substraction b2 (tuple2 a1 b1) (t2tb11 s) p))
  (and (mem (tuple2 (tuple2 a1 b1) b2)
  (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) y) p) (not (mem3 x s)))))))

;; mem_domain_substraction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set b)) (x b) (y uni))
  (= (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) y)
  (domain_substraction b2 b1 (t2tb12 s) p))
  (and (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) y) p) (not (mem2 x s)))))))

;; mem_domain_substraction
  (assert
  (forall ((p (set (tuple21 a (tuple21 b c)))) (s (set a)) (x a)
  (y (tuple21 b c)))
  (= (mem14 (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 y)))
  (tb2t261 (domain_substraction (tuple2 b1 c1) a1 (t2tb1 s) (t2tb261 p))))
  (and (mem14 (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 y))) p)
  (not (mem1 x s))))))

;; mem_domain_substraction
  (assert
  (forall ((p (set (tuple21 a c))) (s (set a)) (x a) (y c))
  (= (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y)))
  (tb2t129 (domain_substraction c1 a1 (t2tb1 s) (t2tb129 p))))
  (and (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y))) p)
  (not (mem1 x s))))))

;; mem_domain_substraction
  (assert
  (forall ((p (set (tuple21 a b))) (s (set a)) (x a) (y b))
  (= (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y)))
  (tb2t11 (domain_substraction b1 a1 (t2tb1 s) (t2tb11 p))))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y))) p)
  (not (mem1 x s))))))

;; mem_domain_substraction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set a)) (x a) (y uni))
  (= (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) y)
  (domain_substraction b2 a1 (t2tb1 s) p))
  (and (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) y) p) (not (mem1 x s)))))))

;; mem_domain_substraction
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((p uni) (s uni) (x uni) (y uni))
  (= (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) (domain_substraction b2 a2 s p))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) p) (not (mem a2 x s)))))))

(declare-fun range_substraction (ty ty uni uni) uni)

;; range_substraction_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (tuple2 a2 b2))
  (range_substraction b2 a2 x x1)))))

;; mem_range_substraction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (tuple21 a (tuple21 b c)))) (x uni) (y (tuple21 a
  (tuple21 b c))))
  (= (mem (tuple2 a2 (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 a2 (tuple2 a1 (tuple2 b1 c1)) x (t2tb260 y))
  (range_substraction (tuple2 a1 (tuple2 b1 c1)) a2 p (t2tb261 t)))
  (and (mem (tuple2 a2 (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 a2 (tuple2 a1 (tuple2 b1 c1)) x (t2tb260 y)) p) (not (mem14 y t)))))))

;; mem_range_substraction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (set (tuple21 a c)))) (x uni) (y (set (tuple21 a
  c))))
  (= (mem (tuple2 a2 (set1 (tuple2 a1 c1)))
  (Tuple2 a2 (set1 (tuple2 a1 c1)) x (t2tb129 y))
  (range_substraction (set1 (tuple2 a1 c1)) a2 p (t2tb128 t)))
  (and (mem (tuple2 a2 (set1 (tuple2 a1 c1)))
  (Tuple2 a2 (set1 (tuple2 a1 c1)) x (t2tb129 y)) p) (not (mem11 y t)))))))

;; mem_range_substraction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (tuple21 a c))) (x uni) (y (tuple21 a c)))
  (= (mem (tuple2 a2 (tuple2 a1 c1)) (Tuple2 a2 (tuple2 a1 c1) x (t2tb133 y))
  (range_substraction (tuple2 a1 c1) a2 p (t2tb129 t)))
  (and (mem (tuple2 a2 (tuple2 a1 c1))
  (Tuple2 a2 (tuple2 a1 c1) x (t2tb133 y)) p) (not (mem10 y t)))))))

;; mem_range_substraction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set c)) (x uni) (y c))
  (= (mem (tuple2 a2 c1) (Tuple2 a2 c1 x (t2tb135 y))
  (range_substraction c1 a2 p (t2tb132 t)))
  (and (mem (tuple2 a2 c1) (Tuple2 a2 c1 x (t2tb135 y)) p) (not (mem7 y t)))))))

;; mem_range_substraction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (set (tuple21 a b)))) (x uni) (y (set (tuple21 a
  b))))
  (= (mem (tuple2 a2 (set1 (tuple2 a1 b1)))
  (Tuple2 a2 (set1 (tuple2 a1 b1)) x (t2tb11 y))
  (range_substraction (set1 (tuple2 a1 b1)) a2 p (t2tb10 t)))
  (and (mem (tuple2 a2 (set1 (tuple2 a1 b1)))
  (Tuple2 a2 (set1 (tuple2 a1 b1)) x (t2tb11 y)) p) (not (mem4 y t)))))))

;; mem_range_substraction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (tuple21 a b))) (x uni) (y (tuple21 a b)))
  (= (mem (tuple2 a2 (tuple2 a1 b1)) (Tuple2 a2 (tuple2 a1 b1) x (t2tb13 y))
  (range_substraction (tuple2 a1 b1) a2 p (t2tb11 t)))
  (and (mem (tuple2 a2 (tuple2 a1 b1))
  (Tuple2 a2 (tuple2 a1 b1) x (t2tb13 y)) p) (not (mem3 y t)))))))

;; mem_range_substraction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set b)) (x uni) (y b))
  (= (mem (tuple2 a2 b1) (Tuple2 a2 b1 x (t2tb14 y))
  (range_substraction b1 a2 p (t2tb12 t)))
  (and (mem (tuple2 a2 b1) (Tuple2 a2 b1 x (t2tb14 y)) p) (not (mem2 y t)))))))

;; mem_range_substraction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set a)) (x uni) (y a))
  (= (mem (tuple2 a2 a1) (Tuple2 a2 a1 x (t2tb2 y))
  (range_substraction a1 a2 p (t2tb1 t)))
  (and (mem (tuple2 a2 a1) (Tuple2 a2 a1 x (t2tb2 y)) p) (not (mem1 y t)))))))

;; mem_range_substraction
  (assert
  (forall ((p (set (tuple21 a (tuple21 b c)))) (t (set (tuple21 b c))) (x a)
  (y (tuple21 b c)))
  (= (mem14 (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 y)))
  (tb2t261 (range_substraction (tuple2 b1 c1) a1 (t2tb261 p) (t2tb131 t))))
  (and (mem14 (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 y))) p)
  (not (mem (tuple2 b1 c1) (t2tb134 y) (t2tb131 t)))))))

;; mem_range_substraction
  (assert
  (forall ((p (set (tuple21 a c))) (t (set c)) (x a) (y c))
  (= (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y)))
  (tb2t129 (range_substraction c1 a1 (t2tb129 p) (t2tb132 t))))
  (and (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y))) p)
  (not (mem7 y t))))))

;; mem_range_substraction
  (assert
  (forall ((p (set (tuple21 a b))) (t (set b)) (x a) (y b))
  (= (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y)))
  (tb2t11 (range_substraction b1 a1 (t2tb11 p) (t2tb12 t))))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y))) p)
  (not (mem2 y t))))))

;; mem_range_substraction
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((p uni) (t uni) (x uni) (y uni))
  (= (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) (range_substraction b2 a2 p t))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) p) (not (mem b2 y t)))))))

(declare-fun image (ty ty uni uni) uni)

;; image_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 b2) (image b2 a2 x x1)))))

;; mem_image
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (w uni) (x (tuple21 a (tuple21 b c))))
  (and
  (=> (mem14 x (tb2t261 (image (tuple2 a1 (tuple2 b1 c1)) a2 p w)))
  (exists ((a3 uni))
  (and (sort a2 a3)
  (and (mem a2 a3 w) (mem (tuple2 a2 (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 a2 (tuple2 a1 (tuple2 b1 c1)) a3 (t2tb260 x)) p)))))
  (=>
  (exists ((a3 uni))
  (and (mem a2 a3 w) (mem (tuple2 a2 (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 a2 (tuple2 a1 (tuple2 b1 c1)) a3 (t2tb260 x)) p))) (mem14 x
  (tb2t261 (image (tuple2 a1 (tuple2 b1 c1)) a2 p w))))))))

;; mem_image
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (w uni) (x (set (tuple21 a c))))
  (and
  (=> (mem11 x (tb2t128 (image (set1 (tuple2 a1 c1)) a2 p w)))
  (exists ((a3 uni))
  (and (sort a2 a3)
  (and (mem a2 a3 w) (mem (tuple2 a2 (set1 (tuple2 a1 c1)))
  (Tuple2 a2 (set1 (tuple2 a1 c1)) a3 (t2tb129 x)) p)))))
  (=>
  (exists ((a3 uni))
  (and (mem a2 a3 w) (mem (tuple2 a2 (set1 (tuple2 a1 c1)))
  (Tuple2 a2 (set1 (tuple2 a1 c1)) a3 (t2tb129 x)) p))) (mem11 x
  (tb2t128 (image (set1 (tuple2 a1 c1)) a2 p w))))))))

;; mem_image
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (w uni) (x (tuple21 a c)))
  (and
  (=> (mem10 x (tb2t129 (image (tuple2 a1 c1) a2 p w)))
  (exists ((a3 uni))
  (and (sort a2 a3)
  (and (mem a2 a3 w) (mem (tuple2 a2 (tuple2 a1 c1))
  (Tuple2 a2 (tuple2 a1 c1) a3 (t2tb133 x)) p)))))
  (=>
  (exists ((a3 uni))
  (and (mem a2 a3 w) (mem (tuple2 a2 (tuple2 a1 c1))
  (Tuple2 a2 (tuple2 a1 c1) a3 (t2tb133 x)) p))) (mem10 x
  (tb2t129 (image (tuple2 a1 c1) a2 p w))))))))

;; mem_image
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (w uni) (x c))
  (and
  (=> (mem7 x (tb2t132 (image c1 a2 p w)))
  (exists ((a3 uni))
  (and (sort a2 a3)
  (and (mem a2 a3 w) (mem (tuple2 a2 c1) (Tuple2 a2 c1 a3 (t2tb135 x)) p)))))
  (=>
  (exists ((a3 uni))
  (and (mem a2 a3 w) (mem (tuple2 a2 c1) (Tuple2 a2 c1 a3 (t2tb135 x)) p)))
  (mem7 x (tb2t132 (image c1 a2 p w))))))))

;; mem_image
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (w uni) (x (set (tuple21 a b))))
  (and
  (=> (mem4 x (tb2t10 (image (set1 (tuple2 a1 b1)) a2 p w)))
  (exists ((a3 uni))
  (and (sort a2 a3)
  (and (mem a2 a3 w) (mem (tuple2 a2 (set1 (tuple2 a1 b1)))
  (Tuple2 a2 (set1 (tuple2 a1 b1)) a3 (t2tb11 x)) p)))))
  (=>
  (exists ((a3 uni))
  (and (mem a2 a3 w) (mem (tuple2 a2 (set1 (tuple2 a1 b1)))
  (Tuple2 a2 (set1 (tuple2 a1 b1)) a3 (t2tb11 x)) p))) (mem4 x
  (tb2t10 (image (set1 (tuple2 a1 b1)) a2 p w))))))))

;; mem_image
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (w uni) (x (tuple21 a b)))
  (and
  (=> (mem3 x (tb2t11 (image (tuple2 a1 b1) a2 p w)))
  (exists ((a3 uni))
  (and (sort a2 a3)
  (and (mem a2 a3 w) (mem (tuple2 a2 (tuple2 a1 b1))
  (Tuple2 a2 (tuple2 a1 b1) a3 (t2tb13 x)) p)))))
  (=>
  (exists ((a3 uni))
  (and (mem a2 a3 w) (mem (tuple2 a2 (tuple2 a1 b1))
  (Tuple2 a2 (tuple2 a1 b1) a3 (t2tb13 x)) p))) (mem3 x
  (tb2t11 (image (tuple2 a1 b1) a2 p w))))))))

;; mem_image
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (w uni) (x b))
  (and
  (=> (mem2 x (tb2t12 (image b1 a2 p w)))
  (exists ((a3 uni))
  (and (sort a2 a3)
  (and (mem a2 a3 w) (mem (tuple2 a2 b1) (Tuple2 a2 b1 a3 (t2tb14 x)) p)))))
  (=>
  (exists ((a3 uni))
  (and (mem a2 a3 w) (mem (tuple2 a2 b1) (Tuple2 a2 b1 a3 (t2tb14 x)) p)))
  (mem2 x (tb2t12 (image b1 a2 p w))))))))

;; mem_image
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (w uni) (x a))
  (and
  (=> (mem1 x (tb2t1 (image a1 a2 p w)))
  (exists ((a3 uni))
  (and (sort a2 a3)
  (and (mem a2 a3 w) (mem (tuple2 a2 a1) (Tuple2 a2 a1 a3 (t2tb2 x)) p)))))
  (=>
  (exists ((a3 uni))
  (and (mem a2 a3 w) (mem (tuple2 a2 a1) (Tuple2 a2 a1 a3 (t2tb2 x)) p)))
  (mem1 x (tb2t1 (image a1 a2 p w))))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a (tuple21 b c)) (tuple21 a (tuple21 b
  c))))) (w (set (tuple21 a (tuple21 b c)))) (x (tuple21 a (tuple21 b c))))
  (= (mem14 x
  (tb2t261
  (image (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 (tuple2 b1 c1)) (t2tb1181 p)
  (t2tb261 w))))
  (exists ((a2 (tuple21 a (tuple21 b c))))
  (and (mem14 a2 w) (mem
  (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 (tuple2 b1 c1)) (t2tb260 a2)
  (t2tb260 x)) (t2tb1181 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a (tuple21 b c)) (set (tuple21 a c)))))
  (w (set (tuple21 a (tuple21 b c)))) (x (set (tuple21 a c))))
  (= (mem11 x
  (tb2t128
  (image (set1 (tuple2 a1 c1)) (tuple2 a1 (tuple2 b1 c1)) (t2tb1183 p)
  (t2tb261 w))))
  (exists ((a2 (tuple21 a (tuple21 b c))))
  (and (mem14 a2 w) (mem
  (tuple2 (tuple2 a1 (tuple2 b1 c1)) (set1 (tuple2 a1 c1)))
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) (set1 (tuple2 a1 c1)) (t2tb260 a2)
  (t2tb129 x)) (t2tb1183 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a (tuple21 b c)) (tuple21 a c))))
  (w (set (tuple21 a (tuple21 b c)))) (x (tuple21 a c)))
  (= (mem10 x
  (tb2t129
  (image (tuple2 a1 c1) (tuple2 a1 (tuple2 b1 c1)) (t2tb1185 p) (t2tb261 w))))
  (exists ((a2 (tuple21 a (tuple21 b c))))
  (and (mem14 a2 w) (mem (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 c1))
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 c1) (t2tb260 a2) (t2tb133 x))
  (t2tb1185 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a (tuple21 b c)) c))) (w (set (tuple21 a
  (tuple21 b c)))) (x c))
  (= (mem7 x
  (tb2t132 (image c1 (tuple2 a1 (tuple2 b1 c1)) (t2tb1188 p) (t2tb261 w))))
  (exists ((a2 (tuple21 a (tuple21 b c))))
  (and (mem14 a2 w) (mem (tuple2 (tuple2 a1 (tuple2 b1 c1)) c1)
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) c1 (t2tb260 a2) (t2tb135 x))
  (t2tb1188 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a (tuple21 b c)) (set (tuple21 a b)))))
  (w (set (tuple21 a (tuple21 b c)))) (x (set (tuple21 a b))))
  (= (mem4 x
  (tb2t10
  (image (set1 (tuple2 a1 b1)) (tuple2 a1 (tuple2 b1 c1)) (t2tb1189 p)
  (t2tb261 w))))
  (exists ((a2 (tuple21 a (tuple21 b c))))
  (and (mem14 a2 w) (mem
  (tuple2 (tuple2 a1 (tuple2 b1 c1)) (set1 (tuple2 a1 b1)))
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) (set1 (tuple2 a1 b1)) (t2tb260 a2)
  (t2tb11 x)) (t2tb1189 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a (tuple21 b c)) (tuple21 a b))))
  (w (set (tuple21 a (tuple21 b c)))) (x (tuple21 a b)))
  (= (mem3 x
  (tb2t11
  (image (tuple2 a1 b1) (tuple2 a1 (tuple2 b1 c1)) (t2tb1191 p) (t2tb261 w))))
  (exists ((a2 (tuple21 a (tuple21 b c))))
  (and (mem14 a2 w) (mem (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 b1))
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 b1) (t2tb260 a2) (t2tb13 x))
  (t2tb1191 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a (tuple21 b c)) b))) (w (set (tuple21 a
  (tuple21 b c)))) (x b))
  (= (mem2 x
  (tb2t12 (image b1 (tuple2 a1 (tuple2 b1 c1)) (t2tb1193 p) (t2tb261 w))))
  (exists ((a2 (tuple21 a (tuple21 b c))))
  (and (mem14 a2 w) (mem (tuple2 (tuple2 a1 (tuple2 b1 c1)) b1)
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) b1 (t2tb260 a2) (t2tb14 x))
  (t2tb1193 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a (tuple21 b c)) a))) (w (set (tuple21 a
  (tuple21 b c)))) (x a))
  (= (mem1 x
  (tb2t1 (image a1 (tuple2 a1 (tuple2 b1 c1)) (t2tb1195 p) (t2tb261 w))))
  (exists ((a2 (tuple21 a (tuple21 b c))))
  (and (mem14 a2 w) (mem (tuple2 (tuple2 a1 (tuple2 b1 c1)) a1)
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) a1 (t2tb260 a2) (t2tb2 x))
  (t2tb1195 p)))))))

;; mem_image
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (w (set (tuple21 a (tuple21 b c)))) (x uni))
  (= (mem b2 x (image b2 (tuple2 a1 (tuple2 b1 c1)) p (t2tb261 w)))
  (exists ((a2 (tuple21 a (tuple21 b c))))
  (and (mem14 a2 w) (mem (tuple2 (tuple2 a1 (tuple2 b1 c1)) b2)
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) b2 (t2tb260 a2) x) p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a c)) (tuple21 a (tuple21 b c)))))
  (w (set (set (tuple21 a c)))) (x (tuple21 a (tuple21 b c))))
  (= (mem14 x
  (tb2t261
  (image (tuple2 a1 (tuple2 b1 c1)) (set1 (tuple2 a1 c1)) (t2tb1197 p)
  (t2tb128 w))))
  (exists ((a2 (set (tuple21 a c))))
  (and (mem11 a2 w) (mem
  (tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 (tuple2 b1 c1)) (t2tb129 a2)
  (t2tb260 x)) (t2tb1197 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a c)) (set (tuple21 a c)))))
  (w (set (set (tuple21 a c)))) (x (set (tuple21 a c))))
  (= (mem11 x
  (tb2t128
  (image (set1 (tuple2 a1 c1)) (set1 (tuple2 a1 c1)) (t2tb1199 p)
  (t2tb128 w))))
  (exists ((a2 (set (tuple21 a c))))
  (and (mem11 a2 w) (mem (tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 a1 c1)))
  (Tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 a1 c1)) (t2tb129 a2)
  (t2tb129 x)) (t2tb1199 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a c)) (tuple21 a c))))
  (w (set (set (tuple21 a c)))) (x (tuple21 a c)))
  (= (mem10 x
  (tb2t129
  (image (tuple2 a1 c1) (set1 (tuple2 a1 c1)) (t2tb1202 p) (t2tb128 w))))
  (exists ((a2 (set (tuple21 a c))))
  (and (mem11 a2 w) (mem (tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 c1))
  (Tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 c1) (t2tb129 a2) (t2tb133 x))
  (t2tb1202 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a c)) c))) (w (set (set (tuple21 a
  c)))) (x c))
  (= (mem7 x
  (tb2t132 (image c1 (set1 (tuple2 a1 c1)) (t2tb1203 p) (t2tb128 w))))
  (exists ((a2 (set (tuple21 a c))))
  (and (mem11 a2 w) (mem (tuple2 (set1 (tuple2 a1 c1)) c1)
  (Tuple2 (set1 (tuple2 a1 c1)) c1 (t2tb129 a2) (t2tb135 x)) (t2tb1203 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a c)) (set (tuple21 a b)))))
  (w (set (set (tuple21 a c)))) (x (set (tuple21 a b))))
  (= (mem4 x
  (tb2t10
  (image (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 c1)) (t2tb1205 p)
  (t2tb128 w))))
  (exists ((a2 (set (tuple21 a c))))
  (and (mem11 a2 w) (mem (tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 a1 b1)))
  (Tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 a1 b1)) (t2tb129 a2)
  (t2tb11 x)) (t2tb1205 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a c)) (tuple21 a b))))
  (w (set (set (tuple21 a c)))) (x (tuple21 a b)))
  (= (mem3 x
  (tb2t11
  (image (tuple2 a1 b1) (set1 (tuple2 a1 c1)) (t2tb1207 p) (t2tb128 w))))
  (exists ((a2 (set (tuple21 a c))))
  (and (mem11 a2 w) (mem (tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 b1))
  (Tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 b1) (t2tb129 a2) (t2tb13 x))
  (t2tb1207 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a c)) b))) (w (set (set (tuple21 a
  c)))) (x b))
  (= (mem2 x
  (tb2t12 (image b1 (set1 (tuple2 a1 c1)) (t2tb1209 p) (t2tb128 w))))
  (exists ((a2 (set (tuple21 a c))))
  (and (mem11 a2 w) (mem (tuple2 (set1 (tuple2 a1 c1)) b1)
  (Tuple2 (set1 (tuple2 a1 c1)) b1 (t2tb129 a2) (t2tb14 x)) (t2tb1209 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a c)) a))) (w (set (set (tuple21 a
  c)))) (x a))
  (= (mem1 x
  (tb2t1 (image a1 (set1 (tuple2 a1 c1)) (t2tb1211 p) (t2tb128 w))))
  (exists ((a2 (set (tuple21 a c))))
  (and (mem11 a2 w) (mem (tuple2 (set1 (tuple2 a1 c1)) a1)
  (Tuple2 (set1 (tuple2 a1 c1)) a1 (t2tb129 a2) (t2tb2 x)) (t2tb1211 p)))))))

;; mem_image
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (w (set (set (tuple21 a c)))) (x uni))
  (= (mem b2 x (image b2 (set1 (tuple2 a1 c1)) p (t2tb128 w)))
  (exists ((a2 (set (tuple21 a c))))
  (and (mem11 a2 w) (mem (tuple2 (set1 (tuple2 a1 c1)) b2)
  (Tuple2 (set1 (tuple2 a1 c1)) b2 (t2tb129 a2) x) p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a c) (tuple21 a (tuple21 b c)))))
  (w (set (tuple21 a c))) (x (tuple21 a (tuple21 b c))))
  (= (mem14 x
  (tb2t261
  (image (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 c1) (t2tb1213 p) (t2tb129 w))))
  (exists ((a2 (tuple21 a c)))
  (and (mem10 a2 w) (mem (tuple2 (tuple2 a1 c1) (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 (tuple2 a1 c1) (tuple2 a1 (tuple2 b1 c1)) (t2tb133 a2) (t2tb260 x))
  (t2tb1213 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a c) (set (tuple21 a c)))))
  (w (set (tuple21 a c))) (x (set (tuple21 a c))))
  (= (mem11 x
  (tb2t128
  (image (set1 (tuple2 a1 c1)) (tuple2 a1 c1) (t2tb1216 p) (t2tb129 w))))
  (exists ((a2 (tuple21 a c)))
  (and (mem10 a2 w) (mem (tuple2 (tuple2 a1 c1) (set1 (tuple2 a1 c1)))
  (Tuple2 (tuple2 a1 c1) (set1 (tuple2 a1 c1)) (t2tb133 a2) (t2tb129 x))
  (t2tb1216 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a c) (tuple21 a c)))) (w (set (tuple21 a
  c))) (x (tuple21 a c)))
  (= (mem10 x
  (tb2t129 (image (tuple2 a1 c1) (tuple2 a1 c1) (t2tb157 p) (t2tb129 w))))
  (exists ((a2 (tuple21 a c)))
  (and (mem10 a2 w) (mem (tuple2 (tuple2 a1 c1) (tuple2 a1 c1))
  (Tuple2 (tuple2 a1 c1) (tuple2 a1 c1) (t2tb133 a2) (t2tb133 x))
  (t2tb157 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a c) c))) (w (set (tuple21 a c))) (x c))
  (= (mem7 x (tb2t132 (image c1 (tuple2 a1 c1) (t2tb162 p) (t2tb129 w))))
  (exists ((a2 (tuple21 a c)))
  (and (mem10 a2 w) (mem (tuple2 (tuple2 a1 c1) c1)
  (Tuple2 (tuple2 a1 c1) c1 (t2tb133 a2) (t2tb135 x)) (t2tb162 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a c) (set (tuple21 a b)))))
  (w (set (tuple21 a c))) (x (set (tuple21 a b))))
  (= (mem4 x
  (tb2t10
  (image (set1 (tuple2 a1 b1)) (tuple2 a1 c1) (t2tb164 p) (t2tb129 w))))
  (exists ((a2 (tuple21 a c)))
  (and (mem10 a2 w) (mem (tuple2 (tuple2 a1 c1) (set1 (tuple2 a1 b1)))
  (Tuple2 (tuple2 a1 c1) (set1 (tuple2 a1 b1)) (t2tb133 a2) (t2tb11 x))
  (t2tb164 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a c) (tuple21 a b)))) (w (set (tuple21 a
  c))) (x (tuple21 a b)))
  (= (mem3 x
  (tb2t11 (image (tuple2 a1 b1) (tuple2 a1 c1) (t2tb166 p) (t2tb129 w))))
  (exists ((a2 (tuple21 a c)))
  (and (mem10 a2 w) (mem (tuple2 (tuple2 a1 c1) (tuple2 a1 b1))
  (Tuple2 (tuple2 a1 c1) (tuple2 a1 b1) (t2tb133 a2) (t2tb13 x))
  (t2tb166 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a c) b))) (w (set (tuple21 a c))) (x b))
  (= (mem2 x (tb2t12 (image b1 (tuple2 a1 c1) (t2tb168 p) (t2tb129 w))))
  (exists ((a2 (tuple21 a c)))
  (and (mem10 a2 w) (mem (tuple2 (tuple2 a1 c1) b1)
  (Tuple2 (tuple2 a1 c1) b1 (t2tb133 a2) (t2tb14 x)) (t2tb168 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a c) a))) (w (set (tuple21 a c))) (x a))
  (= (mem1 x (tb2t1 (image a1 (tuple2 a1 c1) (t2tb170 p) (t2tb129 w))))
  (exists ((a2 (tuple21 a c)))
  (and (mem10 a2 w) (mem (tuple2 (tuple2 a1 c1) a1)
  (Tuple2 (tuple2 a1 c1) a1 (t2tb133 a2) (t2tb2 x)) (t2tb170 p)))))))

;; mem_image
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (w (set (tuple21 a c))) (x uni))
  (= (mem b2 x (image b2 (tuple2 a1 c1) p (t2tb129 w)))
  (exists ((a2 (tuple21 a c)))
  (and (mem10 a2 w) (mem (tuple2 (tuple2 a1 c1) b2)
  (Tuple2 (tuple2 a1 c1) b2 (t2tb133 a2) x) p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 c (tuple21 a (tuple21 b c))))) (w (set c))
  (x (tuple21 a (tuple21 b c))))
  (= (mem14 x
  (tb2t261 (image (tuple2 a1 (tuple2 b1 c1)) c1 (t2tb1217 p) (t2tb132 w))))
  (exists ((a2 c))
  (and (mem7 a2 w) (mem (tuple2 c1 (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 c1 (tuple2 a1 (tuple2 b1 c1)) (t2tb135 a2) (t2tb260 x))
  (t2tb1217 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 c (set (tuple21 a c))))) (w (set c))
  (x (set (tuple21 a c))))
  (= (mem11 x
  (tb2t128 (image (set1 (tuple2 a1 c1)) c1 (t2tb1219 p) (t2tb132 w))))
  (exists ((a2 c))
  (and (mem7 a2 w) (mem (tuple2 c1 (set1 (tuple2 a1 c1)))
  (Tuple2 c1 (set1 (tuple2 a1 c1)) (t2tb135 a2) (t2tb129 x)) (t2tb1219 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 c (tuple21 a c)))) (w (set c)) (x (tuple21 a c)))
  (= (mem10 x (tb2t129 (image (tuple2 a1 c1) c1 (t2tb210 p) (t2tb132 w))))
  (exists ((a2 c))
  (and (mem7 a2 w) (mem (tuple2 c1 (tuple2 a1 c1))
  (Tuple2 c1 (tuple2 a1 c1) (t2tb135 a2) (t2tb133 x)) (t2tb210 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 c c))) (w (set c)) (x c))
  (= (mem7 x (tb2t132 (image c1 c1 (t2tb216 p) (t2tb132 w))))
  (exists ((a2 c))
  (and (mem7 a2 w) (mem (tuple2 c1 c1)
  (Tuple2 c1 c1 (t2tb135 a2) (t2tb135 x)) (t2tb216 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 c (set (tuple21 a b))))) (w (set c))
  (x (set (tuple21 a b))))
  (= (mem4 x
  (tb2t10 (image (set1 (tuple2 a1 b1)) c1 (t2tb218 p) (t2tb132 w))))
  (exists ((a2 c))
  (and (mem7 a2 w) (mem (tuple2 c1 (set1 (tuple2 a1 b1)))
  (Tuple2 c1 (set1 (tuple2 a1 b1)) (t2tb135 a2) (t2tb11 x)) (t2tb218 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 c (tuple21 a b)))) (w (set c)) (x (tuple21 a b)))
  (= (mem3 x (tb2t11 (image (tuple2 a1 b1) c1 (t2tb220 p) (t2tb132 w))))
  (exists ((a2 c))
  (and (mem7 a2 w) (mem (tuple2 c1 (tuple2 a1 b1))
  (Tuple2 c1 (tuple2 a1 b1) (t2tb135 a2) (t2tb13 x)) (t2tb220 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 c b))) (w (set c)) (x b))
  (= (mem2 x (tb2t12 (image b1 c1 (t2tb222 p) (t2tb132 w))))
  (exists ((a2 c))
  (and (mem7 a2 w) (mem (tuple2 c1 b1) (Tuple2 c1 b1 (t2tb135 a2) (t2tb14 x))
  (t2tb222 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 c a))) (w (set c)) (x a))
  (= (mem1 x (tb2t1 (image a1 c1 (t2tb224 p) (t2tb132 w))))
  (exists ((a2 c))
  (and (mem7 a2 w) (mem (tuple2 c1 a1) (Tuple2 c1 a1 (t2tb135 a2) (t2tb2 x))
  (t2tb224 p)))))))

;; mem_image
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (w (set c)) (x uni))
  (= (mem b2 x (image b2 c1 p (t2tb132 w)))
  (exists ((a2 c))
  (and (mem7 a2 w) (mem (tuple2 c1 b2) (Tuple2 c1 b2 (t2tb135 a2) x) p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a b)) (tuple21 a (tuple21 b c)))))
  (w (set (set (tuple21 a b)))) (x (tuple21 a (tuple21 b c))))
  (= (mem14 x
  (tb2t261
  (image (tuple2 a1 (tuple2 b1 c1)) (set1 (tuple2 a1 b1)) (t2tb1221 p)
  (t2tb10 w))))
  (exists ((a2 (set (tuple21 a b))))
  (and (mem4 a2 w) (mem
  (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 (tuple2 b1 c1)) (t2tb11 a2)
  (t2tb260 x)) (t2tb1221 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a b)) (set (tuple21 a c)))))
  (w (set (set (tuple21 a b)))) (x (set (tuple21 a c))))
  (= (mem11 x
  (tb2t128
  (image (set1 (tuple2 a1 c1)) (set1 (tuple2 a1 b1)) (t2tb1223 p) (t2tb10 w))))
  (exists ((a2 (set (tuple21 a b))))
  (and (mem4 a2 w) (mem (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 c1)))
  (Tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 c1)) (t2tb11 a2)
  (t2tb129 x)) (t2tb1223 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a b)) (tuple21 a c))))
  (w (set (set (tuple21 a b)))) (x (tuple21 a c)))
  (= (mem10 x
  (tb2t129
  (image (tuple2 a1 c1) (set1 (tuple2 a1 b1)) (t2tb229 p) (t2tb10 w))))
  (exists ((a2 (set (tuple21 a b))))
  (and (mem4 a2 w) (mem (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 c1))
  (Tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 c1) (t2tb11 a2) (t2tb133 x))
  (t2tb229 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a b)) c))) (w (set (set (tuple21 a
  b)))) (x c))
  (= (mem7 x
  (tb2t132 (image c1 (set1 (tuple2 a1 b1)) (t2tb234 p) (t2tb10 w))))
  (exists ((a2 (set (tuple21 a b))))
  (and (mem4 a2 w) (mem (tuple2 (set1 (tuple2 a1 b1)) c1)
  (Tuple2 (set1 (tuple2 a1 b1)) c1 (t2tb11 a2) (t2tb135 x)) (t2tb234 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a b)) (set (tuple21 a b)))))
  (w (set (set (tuple21 a b)))) (x (set (tuple21 a b))))
  (= (mem4 x
  (tb2t10
  (image (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1)) (t2tb15 p) (t2tb10 w))))
  (exists ((a2 (set (tuple21 a b))))
  (and (mem4 a2 w) (mem (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1)))
  (Tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1)) (t2tb11 a2) (t2tb11 x))
  (t2tb15 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a b)) (tuple21 a b))))
  (w (set (set (tuple21 a b)))) (x (tuple21 a b)))
  (= (mem3 x
  (tb2t11 (image (tuple2 a1 b1) (set1 (tuple2 a1 b1)) (t2tb17 p) (t2tb10 w))))
  (exists ((a2 (set (tuple21 a b))))
  (and (mem4 a2 w) (mem (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 b1))
  (Tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 b1) (t2tb11 a2) (t2tb13 x))
  (t2tb17 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a b)) b))) (w (set (set (tuple21 a
  b)))) (x b))
  (= (mem2 x (tb2t12 (image b1 (set1 (tuple2 a1 b1)) (t2tb19 p) (t2tb10 w))))
  (exists ((a2 (set (tuple21 a b))))
  (and (mem4 a2 w) (mem (tuple2 (set1 (tuple2 a1 b1)) b1)
  (Tuple2 (set1 (tuple2 a1 b1)) b1 (t2tb11 a2) (t2tb14 x)) (t2tb19 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a b)) a))) (w (set (set (tuple21 a
  b)))) (x a))
  (= (mem1 x (tb2t1 (image a1 (set1 (tuple2 a1 b1)) (t2tb22 p) (t2tb10 w))))
  (exists ((a2 (set (tuple21 a b))))
  (and (mem4 a2 w) (mem (tuple2 (set1 (tuple2 a1 b1)) a1)
  (Tuple2 (set1 (tuple2 a1 b1)) a1 (t2tb11 a2) (t2tb2 x)) (t2tb22 p)))))))

;; mem_image
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (w (set (set (tuple21 a b)))) (x uni))
  (= (mem b2 x (image b2 (set1 (tuple2 a1 b1)) p (t2tb10 w)))
  (exists ((a2 (set (tuple21 a b))))
  (and (mem4 a2 w) (mem (tuple2 (set1 (tuple2 a1 b1)) b2)
  (Tuple2 (set1 (tuple2 a1 b1)) b2 (t2tb11 a2) x) p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) (tuple21 a (tuple21 b c)))))
  (w (set (tuple21 a b))) (x (tuple21 a (tuple21 b c))))
  (= (mem14 x
  (tb2t261
  (image (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 b1) (t2tb1225 p) (t2tb11 w))))
  (exists ((a2 (tuple21 a b)))
  (and (mem3 a2 w) (mem (tuple2 (tuple2 a1 b1) (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 (tuple2 a1 b1) (tuple2 a1 (tuple2 b1 c1)) (t2tb13 a2) (t2tb260 x))
  (t2tb1225 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) (set (tuple21 a c)))))
  (w (set (tuple21 a b))) (x (set (tuple21 a c))))
  (= (mem11 x
  (tb2t128
  (image (set1 (tuple2 a1 c1)) (tuple2 a1 b1) (t2tb1227 p) (t2tb11 w))))
  (exists ((a2 (tuple21 a b)))
  (and (mem3 a2 w) (mem (tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 c1)))
  (Tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 c1)) (t2tb13 a2) (t2tb129 x))
  (t2tb1227 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) (tuple21 a c)))) (w (set (tuple21 a
  b))) (x (tuple21 a c)))
  (= (mem10 x
  (tb2t129 (image (tuple2 a1 c1) (tuple2 a1 b1) (t2tb238 p) (t2tb11 w))))
  (exists ((a2 (tuple21 a b)))
  (and (mem3 a2 w) (mem (tuple2 (tuple2 a1 b1) (tuple2 a1 c1))
  (Tuple2 (tuple2 a1 b1) (tuple2 a1 c1) (t2tb13 a2) (t2tb133 x))
  (t2tb238 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) c))) (w (set (tuple21 a b))) (x c))
  (= (mem7 x (tb2t132 (image c1 (tuple2 a1 b1) (t2tb245 p) (t2tb11 w))))
  (exists ((a2 (tuple21 a b)))
  (and (mem3 a2 w) (mem (tuple2 (tuple2 a1 b1) c1)
  (Tuple2 (tuple2 a1 b1) c1 (t2tb13 a2) (t2tb135 x)) (t2tb245 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) (set (tuple21 a b)))))
  (w (set (tuple21 a b))) (x (set (tuple21 a b))))
  (= (mem4 x
  (tb2t10 (image (set1 (tuple2 a1 b1)) (tuple2 a1 b1) (t2tb23 p) (t2tb11 w))))
  (exists ((a2 (tuple21 a b)))
  (and (mem3 a2 w) (mem (tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 b1)))
  (Tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 b1)) (t2tb13 a2) (t2tb11 x))
  (t2tb23 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) (tuple21 a b)))) (w (set (tuple21 a
  b))) (x (tuple21 a b)))
  (= (mem3 x
  (tb2t11 (image (tuple2 a1 b1) (tuple2 a1 b1) (t2tb25 p) (t2tb11 w))))
  (exists ((a2 (tuple21 a b)))
  (and (mem3 a2 w) (mem (tuple2 (tuple2 a1 b1) (tuple2 a1 b1))
  (Tuple2 (tuple2 a1 b1) (tuple2 a1 b1) (t2tb13 a2) (t2tb13 x)) (t2tb25 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) b))) (w (set (tuple21 a b))) (x b))
  (= (mem2 x (tb2t12 (image b1 (tuple2 a1 b1) (t2tb27 p) (t2tb11 w))))
  (exists ((a2 (tuple21 a b)))
  (and (mem3 a2 w) (mem (tuple2 (tuple2 a1 b1) b1)
  (Tuple2 (tuple2 a1 b1) b1 (t2tb13 a2) (t2tb14 x)) (t2tb27 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) a))) (w (set (tuple21 a b))) (x a))
  (= (mem1 x (tb2t1 (image a1 (tuple2 a1 b1) (t2tb29 p) (t2tb11 w))))
  (exists ((a2 (tuple21 a b)))
  (and (mem3 a2 w) (mem (tuple2 (tuple2 a1 b1) a1)
  (Tuple2 (tuple2 a1 b1) a1 (t2tb13 a2) (t2tb2 x)) (t2tb29 p)))))))

;; mem_image
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (w (set (tuple21 a b))) (x uni))
  (= (mem b2 x (image b2 (tuple2 a1 b1) p (t2tb11 w)))
  (exists ((a2 (tuple21 a b)))
  (and (mem3 a2 w) (mem (tuple2 (tuple2 a1 b1) b2)
  (Tuple2 (tuple2 a1 b1) b2 (t2tb13 a2) x) p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 b (tuple21 a (tuple21 b c))))) (w (set b))
  (x (tuple21 a (tuple21 b c))))
  (= (mem14 x
  (tb2t261 (image (tuple2 a1 (tuple2 b1 c1)) b1 (t2tb1229 p) (t2tb12 w))))
  (exists ((a2 b))
  (and (mem2 a2 w) (mem (tuple2 b1 (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 b1 (tuple2 a1 (tuple2 b1 c1)) (t2tb14 a2) (t2tb260 x))
  (t2tb1229 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 b (set (tuple21 a c))))) (w (set b))
  (x (set (tuple21 a c))))
  (= (mem11 x
  (tb2t128 (image (set1 (tuple2 a1 c1)) b1 (t2tb1232 p) (t2tb12 w))))
  (exists ((a2 b))
  (and (mem2 a2 w) (mem (tuple2 b1 (set1 (tuple2 a1 c1)))
  (Tuple2 b1 (set1 (tuple2 a1 c1)) (t2tb14 a2) (t2tb129 x)) (t2tb1232 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 b (tuple21 a c)))) (w (set b)) (x (tuple21 a c)))
  (= (mem10 x (tb2t129 (image (tuple2 a1 c1) b1 (t2tb248 p) (t2tb12 w))))
  (exists ((a2 b))
  (and (mem2 a2 w) (mem (tuple2 b1 (tuple2 a1 c1))
  (Tuple2 b1 (tuple2 a1 c1) (t2tb14 a2) (t2tb133 x)) (t2tb248 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 b c))) (w (set b)) (x c))
  (= (mem7 x (tb2t132 (image c1 b1 (t2tb131 p) (t2tb12 w))))
  (exists ((a2 b))
  (and (mem2 a2 w) (mem (tuple2 b1 c1) (Tuple2 b1 c1 (t2tb14 a2) (t2tb135 x))
  (t2tb131 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 b (set (tuple21 a b))))) (w (set b))
  (x (set (tuple21 a b))))
  (= (mem4 x (tb2t10 (image (set1 (tuple2 a1 b1)) b1 (t2tb31 p) (t2tb12 w))))
  (exists ((a2 b))
  (and (mem2 a2 w) (mem (tuple2 b1 (set1 (tuple2 a1 b1)))
  (Tuple2 b1 (set1 (tuple2 a1 b1)) (t2tb14 a2) (t2tb11 x)) (t2tb31 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 b (tuple21 a b)))) (w (set b)) (x (tuple21 a b)))
  (= (mem3 x (tb2t11 (image (tuple2 a1 b1) b1 (t2tb34 p) (t2tb12 w))))
  (exists ((a2 b))
  (and (mem2 a2 w) (mem (tuple2 b1 (tuple2 a1 b1))
  (Tuple2 b1 (tuple2 a1 b1) (t2tb14 a2) (t2tb13 x)) (t2tb34 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 b b))) (w (set b)) (x b))
  (= (mem2 x (tb2t12 (image b1 b1 (t2tb35 p) (t2tb12 w))))
  (exists ((a2 b))
  (and (mem2 a2 w) (mem (tuple2 b1 b1) (Tuple2 b1 b1 (t2tb14 a2) (t2tb14 x))
  (t2tb35 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 b a))) (w (set b)) (x a))
  (= (mem1 x (tb2t1 (image a1 b1 (t2tb37 p) (t2tb12 w))))
  (exists ((a2 b))
  (and (mem2 a2 w) (mem (tuple2 b1 a1) (Tuple2 b1 a1 (t2tb14 a2) (t2tb2 x))
  (t2tb37 p)))))))

;; mem_image
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (w (set b)) (x uni))
  (= (mem b2 x (image b2 b1 p (t2tb12 w)))
  (exists ((a2 b))
  (and (mem2 a2 w) (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 a2) x) p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 a (tuple21 a (tuple21 b c))))) (w (set a))
  (x (tuple21 a (tuple21 b c))))
  (= (mem14 x
  (tb2t261 (image (tuple2 a1 (tuple2 b1 c1)) a1 (t2tb1233 p) (t2tb1 w))))
  (exists ((a2 a))
  (and (mem1 a2 w) (mem (tuple2 a1 (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 a1 (tuple2 a1 (tuple2 b1 c1)) (t2tb2 a2) (t2tb260 x))
  (t2tb1233 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 a (set (tuple21 a c))))) (w (set a))
  (x (set (tuple21 a c))))
  (= (mem11 x
  (tb2t128 (image (set1 (tuple2 a1 c1)) a1 (t2tb1235 p) (t2tb1 w))))
  (exists ((a2 a))
  (and (mem1 a2 w) (mem (tuple2 a1 (set1 (tuple2 a1 c1)))
  (Tuple2 a1 (set1 (tuple2 a1 c1)) (t2tb2 a2) (t2tb129 x)) (t2tb1235 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 a (tuple21 a c)))) (w (set a)) (x (tuple21 a c)))
  (= (mem10 x (tb2t129 (image (tuple2 a1 c1) a1 (t2tb256 p) (t2tb1 w))))
  (exists ((a2 a))
  (and (mem1 a2 w) (mem (tuple2 a1 (tuple2 a1 c1))
  (Tuple2 a1 (tuple2 a1 c1) (t2tb2 a2) (t2tb133 x)) (t2tb256 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 a (tuple21 b c)))) (w (set a)) (x (tuple21 b c)))
  (= (mem (tuple2 b1 c1) (t2tb134 x)
  (image (tuple2 b1 c1) a1 (t2tb261 p) (t2tb1 w)))
  (exists ((a2 a))
  (and (mem1 a2 w) (mem14
  (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 a2) (t2tb134 x))) p))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 a c))) (w (set a)) (x c))
  (= (mem7 x (tb2t132 (image c1 a1 (t2tb129 p) (t2tb1 w))))
  (exists ((a2 a))
  (and (mem1 a2 w) (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 a2) (t2tb135 x))) p))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 a (set (tuple21 a b))))) (w (set a))
  (x (set (tuple21 a b))))
  (= (mem4 x (tb2t10 (image (set1 (tuple2 a1 b1)) a1 (t2tb39 p) (t2tb1 w))))
  (exists ((a2 a))
  (and (mem1 a2 w) (mem (tuple2 a1 (set1 (tuple2 a1 b1)))
  (Tuple2 a1 (set1 (tuple2 a1 b1)) (t2tb2 a2) (t2tb11 x)) (t2tb39 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 a (tuple21 a b)))) (w (set a)) (x (tuple21 a b)))
  (= (mem3 x (tb2t11 (image (tuple2 a1 b1) a1 (t2tb41 p) (t2tb1 w))))
  (exists ((a2 a))
  (and (mem1 a2 w) (mem (tuple2 a1 (tuple2 a1 b1))
  (Tuple2 a1 (tuple2 a1 b1) (t2tb2 a2) (t2tb13 x)) (t2tb41 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 a b))) (w (set a)) (x b))
  (= (mem2 x (tb2t12 (image b1 a1 (t2tb11 p) (t2tb1 w))))
  (exists ((a2 a))
  (and (mem1 a2 w) (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 a2) (t2tb14 x))) p))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 a a))) (w (set a)) (x a))
  (= (mem1 x (tb2t1 (image a1 a1 (t2tb4 p) (t2tb1 w))))
  (exists ((a2 a))
  (and (mem1 a2 w) (mem (tuple2 a1 a1) (Tuple2 a1 a1 (t2tb2 a2) (t2tb2 x))
  (t2tb4 p)))))))

;; mem_image
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (w (set a)) (x uni))
  (= (mem b2 x (image b2 a1 p (t2tb1 w)))
  (exists ((a2 a))
  (and (mem1 a2 w) (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 a2) x) p)))))))

;; mem_image
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((p uni) (w uni) (x uni))
  (and
  (=> (mem b2 x (image b2 a2 p w))
  (exists ((a3 uni))
  (and (sort a2 a3)
  (and (mem a2 a3 w) (mem (tuple2 a2 b2) (Tuple2 a2 b2 a3 x) p)))))
  (=>
  (exists ((a3 uni))
  (and (mem a2 a3 w) (mem (tuple2 a2 b2) (Tuple2 a2 b2 a3 x) p))) (mem b2 x
  (image b2 a2 p w)))))))

(declare-fun infix_lspl (ty ty uni uni) uni)

;; infix <+_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (tuple2 a2 b2))
  (infix_lspl b2 a2 x x1)))))

;; mem_overriding
  (assert
  (forall ((b2 ty))
  (forall ((q uni) (p uni) (x (tuple21 a (tuple21 b c))) (y uni))
  (= (mem (tuple2 (tuple2 a1 (tuple2 b1 c1)) b2)
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) b2 (t2tb260 x) y)
  (infix_lspl b2 (tuple2 a1 (tuple2 b1 c1)) q p))
  (or
  (and (mem (tuple2 (tuple2 a1 (tuple2 b1 c1)) b2)
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) b2 (t2tb260 x) y) q)
  (not (mem14 x (tb2t261 (dom b2 (tuple2 a1 (tuple2 b1 c1)) p))))) (mem
  (tuple2 (tuple2 a1 (tuple2 b1 c1)) b2)
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) b2 (t2tb260 x) y) p))))))

;; mem_overriding
  (assert
  (forall ((b2 ty))
  (forall ((q uni) (p uni) (x (set (tuple21 a c))) (y uni))
  (= (mem (tuple2 (set1 (tuple2 a1 c1)) b2)
  (Tuple2 (set1 (tuple2 a1 c1)) b2 (t2tb129 x) y)
  (infix_lspl b2 (set1 (tuple2 a1 c1)) q p))
  (or
  (and (mem (tuple2 (set1 (tuple2 a1 c1)) b2)
  (Tuple2 (set1 (tuple2 a1 c1)) b2 (t2tb129 x) y) q)
  (not (mem11 x (tb2t128 (dom b2 (set1 (tuple2 a1 c1)) p))))) (mem
  (tuple2 (set1 (tuple2 a1 c1)) b2)
  (Tuple2 (set1 (tuple2 a1 c1)) b2 (t2tb129 x) y) p))))))

;; mem_overriding
  (assert
  (forall ((b2 ty))
  (forall ((q uni) (p uni) (x (tuple21 a c)) (y uni))
  (= (mem (tuple2 (tuple2 a1 c1) b2) (Tuple2 (tuple2 a1 c1) b2 (t2tb133 x) y)
  (infix_lspl b2 (tuple2 a1 c1) q p))
  (or
  (and (mem (tuple2 (tuple2 a1 c1) b2)
  (Tuple2 (tuple2 a1 c1) b2 (t2tb133 x) y) q)
  (not (mem10 x (tb2t129 (dom b2 (tuple2 a1 c1) p))))) (mem
  (tuple2 (tuple2 a1 c1) b2) (Tuple2 (tuple2 a1 c1) b2 (t2tb133 x) y) p))))))

;; mem_overriding
  (assert
  (forall ((b2 ty))
  (forall ((q uni) (p uni) (x c) (y uni))
  (= (mem (tuple2 c1 b2) (Tuple2 c1 b2 (t2tb135 x) y) (infix_lspl b2 c1 q p))
  (or
  (and (mem (tuple2 c1 b2) (Tuple2 c1 b2 (t2tb135 x) y) q)
  (not (mem7 x (tb2t132 (dom b2 c1 p))))) (mem (tuple2 c1 b2)
  (Tuple2 c1 b2 (t2tb135 x) y) p))))))

;; mem_overriding
  (assert
  (forall ((b2 ty))
  (forall ((q uni) (p uni) (x (set (tuple21 a b))) (y uni))
  (= (mem (tuple2 (set1 (tuple2 a1 b1)) b2)
  (Tuple2 (set1 (tuple2 a1 b1)) b2 (t2tb11 x) y)
  (infix_lspl b2 (set1 (tuple2 a1 b1)) q p))
  (or
  (and (mem (tuple2 (set1 (tuple2 a1 b1)) b2)
  (Tuple2 (set1 (tuple2 a1 b1)) b2 (t2tb11 x) y) q)
  (not (mem4 x (tb2t10 (dom b2 (set1 (tuple2 a1 b1)) p))))) (mem
  (tuple2 (set1 (tuple2 a1 b1)) b2)
  (Tuple2 (set1 (tuple2 a1 b1)) b2 (t2tb11 x) y) p))))))

;; mem_overriding
  (assert
  (forall ((b2 ty))
  (forall ((q uni) (p uni) (x (tuple21 a b)) (y uni))
  (= (mem (tuple2 (tuple2 a1 b1) b2) (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) y)
  (infix_lspl b2 (tuple2 a1 b1) q p))
  (or
  (and (mem (tuple2 (tuple2 a1 b1) b2)
  (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) y) q)
  (not (mem3 x (tb2t11 (dom b2 (tuple2 a1 b1) p))))) (mem
  (tuple2 (tuple2 a1 b1) b2) (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) y) p))))))

;; mem_overriding
  (assert
  (forall ((b2 ty))
  (forall ((q uni) (p uni) (x b) (y uni))
  (= (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) y) (infix_lspl b2 b1 q p))
  (or
  (and (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) y) q)
  (not (mem2 x (tb2t12 (dom b2 b1 p))))) (mem (tuple2 b1 b2)
  (Tuple2 b1 b2 (t2tb14 x) y) p))))))

;; mem_overriding
  (assert
  (forall ((q (set (tuple21 a (tuple21 b c)))) (p (set (tuple21 a (tuple21 b
  c)))) (x a) (y (tuple21 b c)))
  (= (mem14 (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 y)))
  (tb2t261 (infix_lspl (tuple2 b1 c1) a1 (t2tb261 q) (t2tb261 p))))
  (or
  (and (mem14 (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 y))) q)
  (not (mem1 x (tb2t1 (dom (tuple2 b1 c1) a1 (t2tb261 p)))))) (mem14
  (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 y))) p)))))

;; mem_overriding
  (assert
  (forall ((q (set (tuple21 a c))) (p (set (tuple21 a c))) (x a) (y c))
  (= (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y)))
  (tb2t129 (infix_lspl c1 a1 (t2tb129 q) (t2tb129 p))))
  (or
  (and (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y))) q)
  (not (mem1 x (tb2t1 (dom c1 a1 (t2tb129 p)))))) (mem10
  (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y))) p)))))

;; mem_overriding
  (assert
  (forall ((q (set (tuple21 a b))) (p (set (tuple21 a b))) (x a) (y b))
  (= (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y)))
  (tb2t11 (infix_lspl b1 a1 (t2tb11 q) (t2tb11 p))))
  (or
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y))) q)
  (not (mem1 x (tb2t1 (dom b1 a1 (t2tb11 p)))))) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y))) p)))))

;; mem_overriding
  (assert
  (forall ((b2 ty))
  (forall ((q uni) (p uni) (x a) (y uni))
  (= (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) y) (infix_lspl b2 a1 q p))
  (or
  (and (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) y) q)
  (not (mem1 x (tb2t1 (dom b2 a1 p))))) (mem (tuple2 a1 b2)
  (Tuple2 a1 b2 (t2tb2 x) y) p))))))

;; mem_overriding
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((q uni) (p uni) (x uni) (y uni))
  (= (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) (infix_lspl b2 a2 q p))
  (or
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) q)
  (not (mem a2 x (dom b2 a2 p)))) (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) p))))))

(declare-fun direct_product (ty ty ty uni uni) uni)

;; direct_product_sort
  (assert
  (forall ((a2 ty) (b2 ty) (c2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (tuple2 a2 (tuple2 b2 c2)))
  (direct_product c2 b2 a2 x x1)))))

(declare-fun direct_product1 ((set (tuple21 a b)) (set (tuple21 a
  c))) (set (tuple21 a (tuple21 b c))))

;; mem_direct_product
  (assert
  (forall ((b2 ty))
  (forall ((f uni) (g (set (tuple21 a (tuple21 b c)))) (x a) (y uni)
  (z (tuple21 b c)))
  (= (mem (tuple2 a1 (tuple2 b2 (tuple2 b1 c1)))
  (Tuple2 a1 (tuple2 b2 (tuple2 b1 c1)) (t2tb2 x)
  (Tuple2 b2 (tuple2 b1 c1) y (t2tb134 z)))
  (direct_product (tuple2 b1 c1) b2 a1 f (t2tb261 g)))
  (and (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) y) f) (mem14
  (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 z))) g))))))

;; mem_direct_product
  (assert
  (forall ((b2 ty))
  (forall ((f uni) (g (set (tuple21 a c))) (x a) (y uni) (z c))
  (= (mem (tuple2 a1 (tuple2 b2 c1))
  (Tuple2 a1 (tuple2 b2 c1) (t2tb2 x) (Tuple2 b2 c1 y (t2tb135 z)))
  (direct_product c1 b2 a1 f (t2tb129 g)))
  (and (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) y) f) (mem10
  (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 z))) g))))))

;; mem_direct_product
  (assert
  (forall ((b2 ty))
  (forall ((f uni) (g (set (tuple21 a b))) (x a) (y uni) (z b))
  (= (mem (tuple2 a1 (tuple2 b2 b1))
  (Tuple2 a1 (tuple2 b2 b1) (t2tb2 x) (Tuple2 b2 b1 y (t2tb14 z)))
  (direct_product b1 b2 a1 f (t2tb11 g)))
  (and (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) y) f) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 z))) g))))))

(declare-fun t2tb1265 ((set (tuple21 a (tuple21 (tuple21 b c) (tuple21 b
  c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (tuple21 (tuple21 b c) (tuple21 b c)))))) (sort
  (set1 (tuple2 a1 (tuple2 (tuple2 b1 c1) (tuple2 b1 c1)))) (t2tb1265 x))))

(declare-fun tb2t1265 (uni) (set (tuple21 a (tuple21 (tuple21 b c) (tuple21 b
  c)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (tuple21 (tuple21 b c) (tuple21 b c))))))
  (! (= (tb2t1265 (t2tb1265 i)) i) :pattern ((t2tb1265 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (tuple2 (tuple2 b1 c1) (tuple2 b1 c1)))) j)
     (= (t2tb1265 (tb2t1265 j)) j)) :pattern ((t2tb1265 (tb2t1265 j))) )))

(declare-fun t2tb1266 ((tuple21 a (tuple21 (tuple21 b c) (tuple21 b
  c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (tuple21 (tuple21 b c) (tuple21 b c))))) (sort
  (tuple2 a1 (tuple2 (tuple2 b1 c1) (tuple2 b1 c1))) (t2tb1266 x))))

(declare-fun tb2t1266 (uni) (tuple21 a (tuple21 (tuple21 b c) (tuple21 b
  c))))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (tuple21 (tuple21 b c) (tuple21 b c)))))
  (! (= (tb2t1266 (t2tb1266 i)) i) :pattern ((t2tb1266 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (tuple2 (tuple2 b1 c1) (tuple2 b1 c1))) j)
     (= (t2tb1266 (tb2t1266 j)) j)) :pattern ((t2tb1266 (tb2t1266 j))) )))

;; mem_direct_product
  (assert
  (forall ((f (set (tuple21 a (tuple21 b c)))) (g (set (tuple21 a (tuple21 b
  c)))) (x a) (y (tuple21 b c)) (z (tuple21 b c)))
  (= (mem (tuple2 a1 (tuple2 (tuple2 b1 c1) (tuple2 b1 c1)))
  (Tuple2 a1 (tuple2 (tuple2 b1 c1) (tuple2 b1 c1)) (t2tb2 x)
  (Tuple2 (tuple2 b1 c1) (tuple2 b1 c1) (t2tb134 y) (t2tb134 z)))
  (direct_product (tuple2 b1 c1) (tuple2 b1 c1) a1 (t2tb261 f) (t2tb261 g)))
  (and (mem14 (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 y))) f)
  (mem14 (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 z))) g)))))

(declare-fun t2tb1267 ((set (tuple21 a (tuple21 (tuple21 b c) c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (tuple21 (tuple21 b c) c))))) (sort
  (set1 (tuple2 a1 (tuple2 (tuple2 b1 c1) c1))) (t2tb1267 x))))

(declare-fun tb2t1267 (uni) (set (tuple21 a (tuple21 (tuple21 b c) c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (tuple21 (tuple21 b c) c)))))
  (! (= (tb2t1267 (t2tb1267 i)) i) :pattern ((t2tb1267 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (tuple2 (tuple2 b1 c1) c1))) j)
     (= (t2tb1267 (tb2t1267 j)) j)) :pattern ((t2tb1267 (tb2t1267 j))) )))

(declare-fun t2tb1268 ((tuple21 a (tuple21 (tuple21 b c) c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (tuple21 (tuple21 b c) c)))) (sort
  (tuple2 a1 (tuple2 (tuple2 b1 c1) c1)) (t2tb1268 x))))

(declare-fun tb2t1268 (uni) (tuple21 a (tuple21 (tuple21 b c) c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (tuple21 (tuple21 b c) c))))
  (! (= (tb2t1268 (t2tb1268 i)) i) :pattern ((t2tb1268 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (tuple2 (tuple2 b1 c1) c1)) j)
     (= (t2tb1268 (tb2t1268 j)) j)) :pattern ((t2tb1268 (tb2t1268 j))) )))

;; mem_direct_product
  (assert
  (forall ((f (set (tuple21 a (tuple21 b c)))) (g (set (tuple21 a c))) (x a)
  (y (tuple21 b c)) (z c))
  (= (mem (tuple2 a1 (tuple2 (tuple2 b1 c1) c1))
  (Tuple2 a1 (tuple2 (tuple2 b1 c1) c1) (t2tb2 x)
  (Tuple2 (tuple2 b1 c1) c1 (t2tb134 y) (t2tb135 z)))
  (direct_product c1 (tuple2 b1 c1) a1 (t2tb261 f) (t2tb129 g)))
  (and (mem14 (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 y))) f)
  (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 z))) g)))))

(declare-fun t2tb1269 ((set (tuple21 a (tuple21 (tuple21 b c) b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (tuple21 (tuple21 b c) b))))) (sort
  (set1 (tuple2 a1 (tuple2 (tuple2 b1 c1) b1))) (t2tb1269 x))))

(declare-fun tb2t1269 (uni) (set (tuple21 a (tuple21 (tuple21 b c) b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (tuple21 (tuple21 b c) b)))))
  (! (= (tb2t1269 (t2tb1269 i)) i) :pattern ((t2tb1269 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (tuple2 (tuple2 b1 c1) b1))) j)
     (= (t2tb1269 (tb2t1269 j)) j)) :pattern ((t2tb1269 (tb2t1269 j))) )))

(declare-fun t2tb1270 ((tuple21 a (tuple21 (tuple21 b c) b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (tuple21 (tuple21 b c) b)))) (sort
  (tuple2 a1 (tuple2 (tuple2 b1 c1) b1)) (t2tb1270 x))))

(declare-fun tb2t1270 (uni) (tuple21 a (tuple21 (tuple21 b c) b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (tuple21 (tuple21 b c) b))))
  (! (= (tb2t1270 (t2tb1270 i)) i) :pattern ((t2tb1270 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (tuple2 (tuple2 b1 c1) b1)) j)
     (= (t2tb1270 (tb2t1270 j)) j)) :pattern ((t2tb1270 (tb2t1270 j))) )))

;; mem_direct_product
  (assert
  (forall ((f (set (tuple21 a (tuple21 b c)))) (g (set (tuple21 a b))) (x a)
  (y (tuple21 b c)) (z b))
  (= (mem (tuple2 a1 (tuple2 (tuple2 b1 c1) b1))
  (Tuple2 a1 (tuple2 (tuple2 b1 c1) b1) (t2tb2 x)
  (Tuple2 (tuple2 b1 c1) b1 (t2tb134 y) (t2tb14 z)))
  (direct_product b1 (tuple2 b1 c1) a1 (t2tb261 f) (t2tb11 g)))
  (and (mem14 (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 y))) f)
  (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 z))) g)))))

;; mem_direct_product
  (assert
  (forall ((c2 ty))
  (forall ((f (set (tuple21 a (tuple21 b c)))) (g uni) (x a) (y (tuple21 b
  c)) (z uni))
  (= (mem (tuple2 a1 (tuple2 (tuple2 b1 c1) c2))
  (Tuple2 a1 (tuple2 (tuple2 b1 c1) c2) (t2tb2 x)
  (Tuple2 (tuple2 b1 c1) c2 (t2tb134 y) z))
  (direct_product c2 (tuple2 b1 c1) a1 (t2tb261 f) g))
  (and (mem14 (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 y))) f)
  (mem (tuple2 a1 c2) (Tuple2 a1 c2 (t2tb2 x) z) g))))))

(declare-fun t2tb1271 ((set (tuple21 a (tuple21 c (tuple21 b c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (tuple21 c (tuple21 b c)))))) (sort
  (set1 (tuple2 a1 (tuple2 c1 (tuple2 b1 c1)))) (t2tb1271 x))))

(declare-fun tb2t1271 (uni) (set (tuple21 a (tuple21 c (tuple21 b c)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (tuple21 c (tuple21 b c))))))
  (! (= (tb2t1271 (t2tb1271 i)) i) :pattern ((t2tb1271 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (tuple2 c1 (tuple2 b1 c1)))) j)
     (= (t2tb1271 (tb2t1271 j)) j)) :pattern ((t2tb1271 (tb2t1271 j))) )))

(declare-fun t2tb1272 ((tuple21 a (tuple21 c (tuple21 b c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (tuple21 c (tuple21 b c))))) (sort
  (tuple2 a1 (tuple2 c1 (tuple2 b1 c1))) (t2tb1272 x))))

(declare-fun tb2t1272 (uni) (tuple21 a (tuple21 c (tuple21 b c))))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (tuple21 c (tuple21 b c)))))
  (! (= (tb2t1272 (t2tb1272 i)) i) :pattern ((t2tb1272 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (tuple2 c1 (tuple2 b1 c1))) j)
     (= (t2tb1272 (tb2t1272 j)) j)) :pattern ((t2tb1272 (tb2t1272 j))) )))

;; mem_direct_product
  (assert
  (forall ((f (set (tuple21 a c))) (g (set (tuple21 a (tuple21 b c)))) (x a)
  (y c) (z (tuple21 b c)))
  (= (mem (tuple2 a1 (tuple2 c1 (tuple2 b1 c1)))
  (Tuple2 a1 (tuple2 c1 (tuple2 b1 c1)) (t2tb2 x)
  (Tuple2 c1 (tuple2 b1 c1) (t2tb135 y) (t2tb134 z)))
  (direct_product (tuple2 b1 c1) c1 a1 (t2tb129 f) (t2tb261 g)))
  (and (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y))) f) (mem14
  (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 z))) g)))))

(declare-fun t2tb330 ((set (tuple21 a (tuple21 c c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (tuple21 c c))))) (sort
  (set1 (tuple2 a1 (tuple2 c1 c1))) (t2tb330 x))))

(declare-fun tb2t330 (uni) (set (tuple21 a (tuple21 c c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (tuple21 c c)))))
  (! (= (tb2t330 (t2tb330 i)) i) :pattern ((t2tb330 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (tuple2 c1 c1))) j)
     (= (t2tb330 (tb2t330 j)) j)) :pattern ((t2tb330 (tb2t330 j))) )))

(declare-fun t2tb331 ((tuple21 a (tuple21 c c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (tuple21 c c)))) (sort (tuple2 a1 (tuple2 c1 c1))
  (t2tb331 x))))

(declare-fun tb2t331 (uni) (tuple21 a (tuple21 c c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (tuple21 c c))))
  (! (= (tb2t331 (t2tb331 i)) i) :pattern ((t2tb331 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (tuple2 c1 c1)) j) (= (t2tb331 (tb2t331 j)) j)) :pattern (
  (t2tb331 (tb2t331 j))) )))

;; mem_direct_product
  (assert
  (forall ((f (set (tuple21 a c))) (g (set (tuple21 a c))) (x a) (y c) (z c))
  (= (mem (tuple2 a1 (tuple2 c1 c1))
  (Tuple2 a1 (tuple2 c1 c1) (t2tb2 x) (Tuple2 c1 c1 (t2tb135 y) (t2tb135 z)))
  (direct_product c1 c1 a1 (t2tb129 f) (t2tb129 g)))
  (and (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y))) f) (mem10
  (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 z))) g)))))

(declare-fun t2tb332 ((set (tuple21 a (tuple21 c b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (tuple21 c b))))) (sort
  (set1 (tuple2 a1 (tuple2 c1 b1))) (t2tb332 x))))

(declare-fun tb2t332 (uni) (set (tuple21 a (tuple21 c b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (tuple21 c b)))))
  (! (= (tb2t332 (t2tb332 i)) i) :pattern ((t2tb332 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (tuple2 c1 b1))) j)
     (= (t2tb332 (tb2t332 j)) j)) :pattern ((t2tb332 (tb2t332 j))) )))

(declare-fun t2tb333 ((tuple21 a (tuple21 c b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (tuple21 c b)))) (sort (tuple2 a1 (tuple2 c1 b1))
  (t2tb333 x))))

(declare-fun tb2t333 (uni) (tuple21 a (tuple21 c b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (tuple21 c b))))
  (! (= (tb2t333 (t2tb333 i)) i) :pattern ((t2tb333 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (tuple2 c1 b1)) j) (= (t2tb333 (tb2t333 j)) j)) :pattern (
  (t2tb333 (tb2t333 j))) )))

;; mem_direct_product
  (assert
  (forall ((f (set (tuple21 a c))) (g (set (tuple21 a b))) (x a) (y c) (z b))
  (= (mem (tuple2 a1 (tuple2 c1 b1))
  (Tuple2 a1 (tuple2 c1 b1) (t2tb2 x) (Tuple2 c1 b1 (t2tb135 y) (t2tb14 z)))
  (direct_product b1 c1 a1 (t2tb129 f) (t2tb11 g)))
  (and (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y))) f) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 z))) g)))))

;; mem_direct_product
  (assert
  (forall ((c2 ty))
  (forall ((f (set (tuple21 a c))) (g uni) (x a) (y c) (z uni))
  (= (mem (tuple2 a1 (tuple2 c1 c2))
  (Tuple2 a1 (tuple2 c1 c2) (t2tb2 x) (Tuple2 c1 c2 (t2tb135 y) z))
  (direct_product c2 c1 a1 (t2tb129 f) g))
  (and (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y))) f) (mem
  (tuple2 a1 c2) (Tuple2 a1 c2 (t2tb2 x) z) g))))))

(declare-fun t2tb1273 ((tuple21 a (tuple21 b (tuple21 b c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (tuple21 b (tuple21 b c))))) (sort
  (tuple2 a1 (tuple2 b1 (tuple2 b1 c1))) (t2tb1273 x))))

(declare-fun tb2t1273 (uni) (tuple21 a (tuple21 b (tuple21 b c))))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (tuple21 b (tuple21 b c)))))
  (! (= (tb2t1273 (t2tb1273 i)) i) :pattern ((t2tb1273 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (tuple2 b1 (tuple2 b1 c1))) j)
     (= (t2tb1273 (tb2t1273 j)) j)) :pattern ((t2tb1273 (tb2t1273 j))) )))

(declare-fun t2tb1274 ((set (tuple21 a (tuple21 b (tuple21 b c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (tuple21 b (tuple21 b c)))))) (sort
  (set1 (tuple2 a1 (tuple2 b1 (tuple2 b1 c1)))) (t2tb1274 x))))

(declare-fun tb2t1274 (uni) (set (tuple21 a (tuple21 b (tuple21 b c)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (tuple21 b (tuple21 b c))))))
  (! (= (tb2t1274 (t2tb1274 i)) i) :pattern ((t2tb1274 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (tuple2 b1 (tuple2 b1 c1)))) j)
     (= (t2tb1274 (tb2t1274 j)) j)) :pattern ((t2tb1274 (tb2t1274 j))) )))

;; mem_direct_product
  (assert
  (forall ((f (set (tuple21 a b))) (g (set (tuple21 a (tuple21 b c)))) (x a)
  (y b) (z (tuple21 b c)))
  (= (mem (tuple2 a1 (tuple2 b1 (tuple2 b1 c1)))
  (Tuple2 a1 (tuple2 b1 (tuple2 b1 c1)) (t2tb2 x)
  (Tuple2 b1 (tuple2 b1 c1) (t2tb14 y) (t2tb134 z)))
  (direct_product (tuple2 b1 c1) b1 a1 (t2tb11 f) (t2tb261 g)))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y))) f) (mem14
  (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 z))) g)))))

;; mem_direct_product
  (assert
  (forall ((f (set (tuple21 a b))) (g (set (tuple21 a c))) (x a) (y b) (z c))
  (= (mem14
  (tb2t260
  (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (Tuple2 b1 c1 (t2tb14 y) (t2tb135 z))))
  (direct_product1 f g))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y))) f) (mem10
  (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 z))) g)))))

(declare-fun t2tb59 ((set (tuple21 a (tuple21 b b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (tuple21 b b))))) (sort
  (set1 (tuple2 a1 (tuple2 b1 b1))) (t2tb59 x))))

(declare-fun tb2t59 (uni) (set (tuple21 a (tuple21 b b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (tuple21 b b)))))
  (! (= (tb2t59 (t2tb59 i)) i) :pattern ((t2tb59 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (tuple2 b1 b1))) j)
     (= (t2tb59 (tb2t59 j)) j)) :pattern ((t2tb59 (tb2t59 j))) )))

(declare-fun t2tb60 ((tuple21 a (tuple21 b b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (tuple21 b b)))) (sort (tuple2 a1 (tuple2 b1 b1))
  (t2tb60 x))))

(declare-fun tb2t60 (uni) (tuple21 a (tuple21 b b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (tuple21 b b))))
  (! (= (tb2t60 (t2tb60 i)) i) :pattern ((t2tb60 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (tuple2 b1 b1)) j) (= (t2tb60 (tb2t60 j)) j)) :pattern (
  (t2tb60 (tb2t60 j))) )))

;; mem_direct_product
  (assert
  (forall ((f (set (tuple21 a b))) (g (set (tuple21 a b))) (x a) (y b) (z b))
  (= (mem (tuple2 a1 (tuple2 b1 b1))
  (Tuple2 a1 (tuple2 b1 b1) (t2tb2 x) (Tuple2 b1 b1 (t2tb14 y) (t2tb14 z)))
  (direct_product b1 b1 a1 (t2tb11 f) (t2tb11 g)))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y))) f) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 z))) g)))))

;; mem_direct_product
  (assert
  (forall ((c2 ty))
  (forall ((f (set (tuple21 a b))) (g uni) (x a) (y b) (z uni))
  (= (mem (tuple2 a1 (tuple2 b1 c2))
  (Tuple2 a1 (tuple2 b1 c2) (t2tb2 x) (Tuple2 b1 c2 (t2tb14 y) z))
  (direct_product c2 b1 a1 (t2tb11 f) g))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y))) f) (mem
  (tuple2 a1 c2) (Tuple2 a1 c2 (t2tb2 x) z) g))))))

;; mem_direct_product
  (assert
  (forall ((a2 ty) (b2 ty) (c2 ty))
  (forall ((f uni) (g uni) (x uni) (y uni) (z uni))
  (= (mem (tuple2 a2 (tuple2 b2 c2))
  (Tuple2 a2 (tuple2 b2 c2) x (Tuple2 b2 c2 y z))
  (direct_product c2 b2 a2 f g))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) f) (mem (tuple2 a2 c2)
  (Tuple2 a2 c2 x z) g))))))

(declare-fun prj1 (ty ty uni) uni)

;; prj1_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni)) (sort (set1 (tuple2 (tuple2 a2 b2) a2)) (prj1 b2 a2 x)))))

;; mem_proj_op_1
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (x uni) (y uni) (z uni))
  (=> (sort a2 x)
  (=> (sort a2 z)
  (= (mem (tuple2 (tuple2 a2 b2) a2)
  (Tuple2 (tuple2 a2 b2) a2 (Tuple2 a2 b2 x y) z)
  (prj1 b2 a2 (Tuple2 (set1 a2) (set1 b2) s t)))
  (and (mem (tuple2 (tuple2 a2 b2) a2)
  (Tuple2 (tuple2 a2 b2) a2 (Tuple2 a2 b2 x y) z)
  (times a2 (tuple2 a2 b2) (times b2 a2 s t) s)) (= z x))))))))

(declare-fun prj2 (ty ty uni) uni)

;; prj2_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni)) (sort (set1 (tuple2 (tuple2 a2 b2) b2)) (prj2 b2 a2 x)))))

;; mem_proj_op_2
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (x uni) (y uni) (z uni))
  (=> (sort b2 y)
  (=> (sort b2 z)
  (= (mem (tuple2 (tuple2 a2 b2) b2)
  (Tuple2 (tuple2 a2 b2) b2 (Tuple2 a2 b2 x y) z)
  (prj2 b2 a2 (Tuple2 (set1 a2) (set1 b2) s t)))
  (and (mem (tuple2 (tuple2 a2 b2) b2)
  (Tuple2 (tuple2 a2 b2) b2 (Tuple2 a2 b2 x y) z)
  (times b2 (tuple2 a2 b2) (times b2 a2 s t) t)) (= z y))))))))

(declare-fun parallel_product (ty ty ty ty uni uni) uni)

;; parallel_product_sort
  (assert
  (forall ((a2 ty) (b2 ty) (c2 ty) (d2 ty))
  (forall ((x uni) (x1 uni)) (sort
  (set1 (tuple2 (tuple2 a2 c2) (tuple2 b2 d2)))
  (parallel_product d2 c2 b2 a2 x x1)))))

;; mem_parallel_product
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((h uni) (k (set (tuple21 a (tuple21 b c)))) (x uni) (y a) (z uni)
  (w (tuple21 b c)))
  (= (mem (tuple2 (tuple2 a2 a1) (tuple2 b2 (tuple2 b1 c1)))
  (Tuple2 (tuple2 a2 a1) (tuple2 b2 (tuple2 b1 c1))
  (Tuple2 a2 a1 x (t2tb2 y)) (Tuple2 b2 (tuple2 b1 c1) z (t2tb134 w)))
  (parallel_product (tuple2 b1 c1) a1 b2 a2 h (t2tb261 k)))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x z) h) (mem14
  (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 y) (t2tb134 w))) k))))))

;; mem_parallel_product
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((h uni) (k (set (tuple21 a c))) (x uni) (y a) (z uni) (w c))
  (= (mem (tuple2 (tuple2 a2 a1) (tuple2 b2 c1))
  (Tuple2 (tuple2 a2 a1) (tuple2 b2 c1) (Tuple2 a2 a1 x (t2tb2 y))
  (Tuple2 b2 c1 z (t2tb135 w))) (parallel_product c1 a1 b2 a2 h (t2tb129 k)))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x z) h) (mem10
  (tb2t133 (Tuple2 a1 c1 (t2tb2 y) (t2tb135 w))) k))))))

;; mem_parallel_product
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((h uni) (k (set (tuple21 a b))) (x uni) (y a) (z uni) (w b))
  (= (mem (tuple2 (tuple2 a2 a1) (tuple2 b2 b1))
  (Tuple2 (tuple2 a2 a1) (tuple2 b2 b1) (Tuple2 a2 a1 x (t2tb2 y))
  (Tuple2 b2 b1 z (t2tb14 w))) (parallel_product b1 a1 b2 a2 h (t2tb11 k)))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x z) h) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 y) (t2tb14 w))) k))))))

(declare-fun t2tb1275 ((set (tuple21 (tuple21 a a) (tuple21 (tuple21 b c)
  (tuple21 b c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a a) (tuple21 (tuple21 b c) (tuple21 b
  c)))))) (sort
  (set1 (tuple2 (tuple2 a1 a1) (tuple2 (tuple2 b1 c1) (tuple2 b1 c1))))
  (t2tb1275 x))))

(declare-fun tb2t1275 (uni) (set (tuple21 (tuple21 a a) (tuple21 (tuple21 b
  c) (tuple21 b c)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a a) (tuple21 (tuple21 b c) (tuple21 b
  c)))))) (! (= (tb2t1275 (t2tb1275 i)) i) :pattern ((t2tb1275 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 a1 a1) (tuple2 (tuple2 b1 c1) (tuple2 b1 c1)))) j)
     (= (t2tb1275 (tb2t1275 j)) j)) :pattern ((t2tb1275 (tb2t1275 j))) )))

(declare-fun t2tb1276 ((tuple21 (tuple21 a a) (tuple21 (tuple21 b c)
  (tuple21 b c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a a) (tuple21 (tuple21 b c) (tuple21 b c)))))
  (sort (tuple2 (tuple2 a1 a1) (tuple2 (tuple2 b1 c1) (tuple2 b1 c1)))
  (t2tb1276 x))))

(declare-fun tb2t1276 (uni) (tuple21 (tuple21 a a) (tuple21 (tuple21 b c)
  (tuple21 b c))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a a) (tuple21 (tuple21 b c) (tuple21 b c)))))
  (! (= (tb2t1276 (t2tb1276 i)) i) :pattern ((t2tb1276 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 a1) (tuple2 (tuple2 b1 c1) (tuple2 b1 c1)))
     j) (= (t2tb1276 (tb2t1276 j)) j)) :pattern ((t2tb1276 (tb2t1276 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a (tuple21 b c)))) (k (set (tuple21 a (tuple21 b
  c)))) (x a) (y a) (z (tuple21 b c)) (w (tuple21 b c)))
  (= (mem (tuple2 (tuple2 a1 a1) (tuple2 (tuple2 b1 c1) (tuple2 b1 c1)))
  (Tuple2 (tuple2 a1 a1) (tuple2 (tuple2 b1 c1) (tuple2 b1 c1))
  (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y))
  (Tuple2 (tuple2 b1 c1) (tuple2 b1 c1) (t2tb134 z) (t2tb134 w)))
  (parallel_product (tuple2 b1 c1) a1 (tuple2 b1 c1) a1 (t2tb261 h)
  (t2tb261 k)))
  (and (mem14 (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 z))) h)
  (mem14 (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 y) (t2tb134 w))) k)))))

(declare-fun t2tb1277 ((set (tuple21 (tuple21 a a) (tuple21 (tuple21 b c)
  c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a a) (tuple21 (tuple21 b c) c))))) (sort
  (set1 (tuple2 (tuple2 a1 a1) (tuple2 (tuple2 b1 c1) c1))) (t2tb1277 x))))

(declare-fun tb2t1277 (uni) (set (tuple21 (tuple21 a a) (tuple21 (tuple21 b
  c) c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a a) (tuple21 (tuple21 b c) c)))))
  (! (= (tb2t1277 (t2tb1277 i)) i) :pattern ((t2tb1277 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 a1) (tuple2 (tuple2 b1 c1) c1))) j)
     (= (t2tb1277 (tb2t1277 j)) j)) :pattern ((t2tb1277 (tb2t1277 j))) )))

(declare-fun t2tb1278 ((tuple21 (tuple21 a a) (tuple21 (tuple21 b c)
  c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a a) (tuple21 (tuple21 b c) c)))) (sort
  (tuple2 (tuple2 a1 a1) (tuple2 (tuple2 b1 c1) c1)) (t2tb1278 x))))

(declare-fun tb2t1278 (uni) (tuple21 (tuple21 a a) (tuple21 (tuple21 b c)
  c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a a) (tuple21 (tuple21 b c) c))))
  (! (= (tb2t1278 (t2tb1278 i)) i) :pattern ((t2tb1278 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 a1) (tuple2 (tuple2 b1 c1) c1)) j)
     (= (t2tb1278 (tb2t1278 j)) j)) :pattern ((t2tb1278 (tb2t1278 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a (tuple21 b c)))) (k (set (tuple21 a c))) (x a)
  (y a) (z (tuple21 b c)) (w c))
  (= (mem (tuple2 (tuple2 a1 a1) (tuple2 (tuple2 b1 c1) c1))
  (Tuple2 (tuple2 a1 a1) (tuple2 (tuple2 b1 c1) c1)
  (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y))
  (Tuple2 (tuple2 b1 c1) c1 (t2tb134 z) (t2tb135 w)))
  (parallel_product c1 a1 (tuple2 b1 c1) a1 (t2tb261 h) (t2tb129 k)))
  (and (mem14 (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 z))) h)
  (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 y) (t2tb135 w))) k)))))

(declare-fun t2tb1279 ((set (tuple21 (tuple21 a a) (tuple21 (tuple21 b c)
  b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a a) (tuple21 (tuple21 b c) b))))) (sort
  (set1 (tuple2 (tuple2 a1 a1) (tuple2 (tuple2 b1 c1) b1))) (t2tb1279 x))))

(declare-fun tb2t1279 (uni) (set (tuple21 (tuple21 a a) (tuple21 (tuple21 b
  c) b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a a) (tuple21 (tuple21 b c) b)))))
  (! (= (tb2t1279 (t2tb1279 i)) i) :pattern ((t2tb1279 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 a1) (tuple2 (tuple2 b1 c1) b1))) j)
     (= (t2tb1279 (tb2t1279 j)) j)) :pattern ((t2tb1279 (tb2t1279 j))) )))

(declare-fun t2tb1280 ((tuple21 (tuple21 a a) (tuple21 (tuple21 b c)
  b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a a) (tuple21 (tuple21 b c) b)))) (sort
  (tuple2 (tuple2 a1 a1) (tuple2 (tuple2 b1 c1) b1)) (t2tb1280 x))))

(declare-fun tb2t1280 (uni) (tuple21 (tuple21 a a) (tuple21 (tuple21 b c)
  b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a a) (tuple21 (tuple21 b c) b))))
  (! (= (tb2t1280 (t2tb1280 i)) i) :pattern ((t2tb1280 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 a1) (tuple2 (tuple2 b1 c1) b1)) j)
     (= (t2tb1280 (tb2t1280 j)) j)) :pattern ((t2tb1280 (tb2t1280 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a (tuple21 b c)))) (k (set (tuple21 a b))) (x a)
  (y a) (z (tuple21 b c)) (w b))
  (= (mem (tuple2 (tuple2 a1 a1) (tuple2 (tuple2 b1 c1) b1))
  (Tuple2 (tuple2 a1 a1) (tuple2 (tuple2 b1 c1) b1)
  (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y))
  (Tuple2 (tuple2 b1 c1) b1 (t2tb134 z) (t2tb14 w)))
  (parallel_product b1 a1 (tuple2 b1 c1) a1 (t2tb261 h) (t2tb11 k)))
  (and (mem14 (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 z))) h)
  (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 y) (t2tb14 w))) k)))))

;; mem_parallel_product
  (assert
  (forall ((c2 ty) (d2 ty))
  (forall ((h (set (tuple21 a (tuple21 b c)))) (k uni) (x a) (y uni)
  (z (tuple21 b c)) (w uni))
  (= (mem (tuple2 (tuple2 a1 c2) (tuple2 (tuple2 b1 c1) d2))
  (Tuple2 (tuple2 a1 c2) (tuple2 (tuple2 b1 c1) d2)
  (Tuple2 a1 c2 (t2tb2 x) y) (Tuple2 (tuple2 b1 c1) d2 (t2tb134 z) w))
  (parallel_product d2 c2 (tuple2 b1 c1) a1 (t2tb261 h) k))
  (and (mem14 (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 z))) h)
  (mem (tuple2 c2 d2) (Tuple2 c2 d2 y w) k))))))

(declare-fun t2tb1281 ((tuple21 (tuple21 a a) (tuple21 c (tuple21 b
  c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a a) (tuple21 c (tuple21 b c))))) (sort
  (tuple2 (tuple2 a1 a1) (tuple2 c1 (tuple2 b1 c1))) (t2tb1281 x))))

(declare-fun tb2t1281 (uni) (tuple21 (tuple21 a a) (tuple21 c (tuple21 b
  c))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a a) (tuple21 c (tuple21 b c)))))
  (! (= (tb2t1281 (t2tb1281 i)) i) :pattern ((t2tb1281 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 a1) (tuple2 c1 (tuple2 b1 c1))) j)
     (= (t2tb1281 (tb2t1281 j)) j)) :pattern ((t2tb1281 (tb2t1281 j))) )))

(declare-fun t2tb1282 ((set (tuple21 (tuple21 a a) (tuple21 c (tuple21 b
  c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a a) (tuple21 c (tuple21 b c)))))) (sort
  (set1 (tuple2 (tuple2 a1 a1) (tuple2 c1 (tuple2 b1 c1)))) (t2tb1282 x))))

(declare-fun tb2t1282 (uni) (set (tuple21 (tuple21 a a) (tuple21 c (tuple21 b
  c)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a a) (tuple21 c (tuple21 b c))))))
  (! (= (tb2t1282 (t2tb1282 i)) i) :pattern ((t2tb1282 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 a1) (tuple2 c1 (tuple2 b1 c1)))) j)
     (= (t2tb1282 (tb2t1282 j)) j)) :pattern ((t2tb1282 (tb2t1282 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a c))) (k (set (tuple21 a (tuple21 b c)))) (x a)
  (y a) (z c) (w (tuple21 b c)))
  (= (mem (tuple2 (tuple2 a1 a1) (tuple2 c1 (tuple2 b1 c1)))
  (Tuple2 (tuple2 a1 a1) (tuple2 c1 (tuple2 b1 c1))
  (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y))
  (Tuple2 c1 (tuple2 b1 c1) (t2tb135 z) (t2tb134 w)))
  (parallel_product (tuple2 b1 c1) a1 c1 a1 (t2tb129 h) (t2tb261 k)))
  (and (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 z))) h) (mem14
  (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 y) (t2tb134 w))) k)))))

(declare-fun t2tb342 ((set (tuple21 (tuple21 a a) (tuple21 c c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a a) (tuple21 c c))))) (sort
  (set1 (tuple2 (tuple2 a1 a1) (tuple2 c1 c1))) (t2tb342 x))))

(declare-fun tb2t342 (uni) (set (tuple21 (tuple21 a a) (tuple21 c c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a a) (tuple21 c c)))))
  (! (= (tb2t342 (t2tb342 i)) i) :pattern ((t2tb342 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 a1) (tuple2 c1 c1))) j)
     (= (t2tb342 (tb2t342 j)) j)) :pattern ((t2tb342 (tb2t342 j))) )))

(declare-fun t2tb343 ((tuple21 (tuple21 a a) (tuple21 c c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a a) (tuple21 c c)))) (sort
  (tuple2 (tuple2 a1 a1) (tuple2 c1 c1)) (t2tb343 x))))

(declare-fun tb2t343 (uni) (tuple21 (tuple21 a a) (tuple21 c c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a a) (tuple21 c c))))
  (! (= (tb2t343 (t2tb343 i)) i) :pattern ((t2tb343 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 a1) (tuple2 c1 c1)) j)
     (= (t2tb343 (tb2t343 j)) j)) :pattern ((t2tb343 (tb2t343 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a c))) (k (set (tuple21 a c))) (x a) (y a) (z c)
  (w c))
  (= (mem (tuple2 (tuple2 a1 a1) (tuple2 c1 c1))
  (Tuple2 (tuple2 a1 a1) (tuple2 c1 c1) (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y))
  (Tuple2 c1 c1 (t2tb135 z) (t2tb135 w)))
  (parallel_product c1 a1 c1 a1 (t2tb129 h) (t2tb129 k)))
  (and (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 z))) h) (mem10
  (tb2t133 (Tuple2 a1 c1 (t2tb2 y) (t2tb135 w))) k)))))

(declare-fun t2tb344 ((set (tuple21 (tuple21 a a) (tuple21 c b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a a) (tuple21 c b))))) (sort
  (set1 (tuple2 (tuple2 a1 a1) (tuple2 c1 b1))) (t2tb344 x))))

(declare-fun tb2t344 (uni) (set (tuple21 (tuple21 a a) (tuple21 c b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a a) (tuple21 c b)))))
  (! (= (tb2t344 (t2tb344 i)) i) :pattern ((t2tb344 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 a1) (tuple2 c1 b1))) j)
     (= (t2tb344 (tb2t344 j)) j)) :pattern ((t2tb344 (tb2t344 j))) )))

(declare-fun t2tb345 ((tuple21 (tuple21 a a) (tuple21 c b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a a) (tuple21 c b)))) (sort
  (tuple2 (tuple2 a1 a1) (tuple2 c1 b1)) (t2tb345 x))))

(declare-fun tb2t345 (uni) (tuple21 (tuple21 a a) (tuple21 c b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a a) (tuple21 c b))))
  (! (= (tb2t345 (t2tb345 i)) i) :pattern ((t2tb345 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 a1) (tuple2 c1 b1)) j)
     (= (t2tb345 (tb2t345 j)) j)) :pattern ((t2tb345 (tb2t345 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a c))) (k (set (tuple21 a b))) (x a) (y a) (z c)
  (w b))
  (= (mem (tuple2 (tuple2 a1 a1) (tuple2 c1 b1))
  (Tuple2 (tuple2 a1 a1) (tuple2 c1 b1) (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y))
  (Tuple2 c1 b1 (t2tb135 z) (t2tb14 w)))
  (parallel_product b1 a1 c1 a1 (t2tb129 h) (t2tb11 k)))
  (and (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 z))) h) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 y) (t2tb14 w))) k)))))

;; mem_parallel_product
  (assert
  (forall ((c2 ty) (d2 ty))
  (forall ((h (set (tuple21 a c))) (k uni) (x a) (y uni) (z c) (w uni))
  (= (mem (tuple2 (tuple2 a1 c2) (tuple2 c1 d2))
  (Tuple2 (tuple2 a1 c2) (tuple2 c1 d2) (Tuple2 a1 c2 (t2tb2 x) y)
  (Tuple2 c1 d2 (t2tb135 z) w)) (parallel_product d2 c2 c1 a1 (t2tb129 h) k))
  (and (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 z))) h) (mem
  (tuple2 c2 d2) (Tuple2 c2 d2 y w) k))))))

(declare-fun t2tb1283 ((set (tuple21 (tuple21 a a) (tuple21 b (tuple21 b
  c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a a) (tuple21 b (tuple21 b c)))))) (sort
  (set1 (tuple2 (tuple2 a1 a1) (tuple2 b1 (tuple2 b1 c1)))) (t2tb1283 x))))

(declare-fun tb2t1283 (uni) (set (tuple21 (tuple21 a a) (tuple21 b (tuple21 b
  c)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a a) (tuple21 b (tuple21 b c))))))
  (! (= (tb2t1283 (t2tb1283 i)) i) :pattern ((t2tb1283 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 a1) (tuple2 b1 (tuple2 b1 c1)))) j)
     (= (t2tb1283 (tb2t1283 j)) j)) :pattern ((t2tb1283 (tb2t1283 j))) )))

(declare-fun t2tb1284 ((tuple21 (tuple21 a a) (tuple21 b (tuple21 b
  c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a a) (tuple21 b (tuple21 b c))))) (sort
  (tuple2 (tuple2 a1 a1) (tuple2 b1 (tuple2 b1 c1))) (t2tb1284 x))))

(declare-fun tb2t1284 (uni) (tuple21 (tuple21 a a) (tuple21 b (tuple21 b
  c))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a a) (tuple21 b (tuple21 b c)))))
  (! (= (tb2t1284 (t2tb1284 i)) i) :pattern ((t2tb1284 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 a1) (tuple2 b1 (tuple2 b1 c1))) j)
     (= (t2tb1284 (tb2t1284 j)) j)) :pattern ((t2tb1284 (tb2t1284 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a b))) (k (set (tuple21 a (tuple21 b c)))) (x a)
  (y a) (z b) (w (tuple21 b c)))
  (= (mem (tuple2 (tuple2 a1 a1) (tuple2 b1 (tuple2 b1 c1)))
  (Tuple2 (tuple2 a1 a1) (tuple2 b1 (tuple2 b1 c1))
  (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y))
  (Tuple2 b1 (tuple2 b1 c1) (t2tb14 z) (t2tb134 w)))
  (parallel_product (tuple2 b1 c1) a1 b1 a1 (t2tb11 h) (t2tb261 k)))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 z))) h) (mem14
  (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 y) (t2tb134 w))) k)))))

(declare-fun t2tb346 ((tuple21 (tuple21 a a) (tuple21 b c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a a) (tuple21 b c)))) (sort
  (tuple2 (tuple2 a1 a1) (tuple2 b1 c1)) (t2tb346 x))))

(declare-fun tb2t346 (uni) (tuple21 (tuple21 a a) (tuple21 b c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a a) (tuple21 b c))))
  (! (= (tb2t346 (t2tb346 i)) i) :pattern ((t2tb346 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 a1) (tuple2 b1 c1)) j)
     (= (t2tb346 (tb2t346 j)) j)) :pattern ((t2tb346 (tb2t346 j))) )))

(declare-fun t2tb347 ((set (tuple21 (tuple21 a a) (tuple21 b c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a a) (tuple21 b c))))) (sort
  (set1 (tuple2 (tuple2 a1 a1) (tuple2 b1 c1))) (t2tb347 x))))

(declare-fun tb2t347 (uni) (set (tuple21 (tuple21 a a) (tuple21 b c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a a) (tuple21 b c)))))
  (! (= (tb2t347 (t2tb347 i)) i) :pattern ((t2tb347 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 a1) (tuple2 b1 c1))) j)
     (= (t2tb347 (tb2t347 j)) j)) :pattern ((t2tb347 (tb2t347 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a b))) (k (set (tuple21 a c))) (x a) (y a) (z b)
  (w c))
  (= (mem (tuple2 (tuple2 a1 a1) (tuple2 b1 c1))
  (Tuple2 (tuple2 a1 a1) (tuple2 b1 c1) (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y))
  (Tuple2 b1 c1 (t2tb14 z) (t2tb135 w)))
  (parallel_product c1 a1 b1 a1 (t2tb11 h) (t2tb129 k)))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 z))) h) (mem10
  (tb2t133 (Tuple2 a1 c1 (t2tb2 y) (t2tb135 w))) k)))))

(declare-fun t2tb61 ((set (tuple21 (tuple21 a a) (tuple21 b b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a a) (tuple21 b b))))) (sort
  (set1 (tuple2 (tuple2 a1 a1) (tuple2 b1 b1))) (t2tb61 x))))

(declare-fun tb2t61 (uni) (set (tuple21 (tuple21 a a) (tuple21 b b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a a) (tuple21 b b)))))
  (! (= (tb2t61 (t2tb61 i)) i) :pattern ((t2tb61 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 a1) (tuple2 b1 b1))) j)
     (= (t2tb61 (tb2t61 j)) j)) :pattern ((t2tb61 (tb2t61 j))) )))

(declare-fun t2tb62 ((tuple21 (tuple21 a a) (tuple21 b b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a a) (tuple21 b b)))) (sort
  (tuple2 (tuple2 a1 a1) (tuple2 b1 b1)) (t2tb62 x))))

(declare-fun tb2t62 (uni) (tuple21 (tuple21 a a) (tuple21 b b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a a) (tuple21 b b))))
  (! (= (tb2t62 (t2tb62 i)) i) :pattern ((t2tb62 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 a1) (tuple2 b1 b1)) j)
     (= (t2tb62 (tb2t62 j)) j)) :pattern ((t2tb62 (tb2t62 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a b))) (k (set (tuple21 a b))) (x a) (y a) (z b)
  (w b))
  (= (mem (tuple2 (tuple2 a1 a1) (tuple2 b1 b1))
  (Tuple2 (tuple2 a1 a1) (tuple2 b1 b1) (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y))
  (Tuple2 b1 b1 (t2tb14 z) (t2tb14 w)))
  (parallel_product b1 a1 b1 a1 (t2tb11 h) (t2tb11 k)))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 z))) h) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 y) (t2tb14 w))) k)))))

;; mem_parallel_product
  (assert
  (forall ((c2 ty) (d2 ty))
  (forall ((h (set (tuple21 a b))) (k uni) (x a) (y uni) (z b) (w uni))
  (= (mem (tuple2 (tuple2 a1 c2) (tuple2 b1 d2))
  (Tuple2 (tuple2 a1 c2) (tuple2 b1 d2) (Tuple2 a1 c2 (t2tb2 x) y)
  (Tuple2 b1 d2 (t2tb14 z) w)) (parallel_product d2 c2 b1 a1 (t2tb11 h) k))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 z))) h) (mem
  (tuple2 c2 d2) (Tuple2 c2 d2 y w) k))))))

;; mem_parallel_product
  (assert
  (forall ((a2 ty) (b2 ty) (c2 ty) (d2 ty))
  (forall ((h uni) (k uni) (x uni) (y uni) (z uni) (w uni))
  (= (mem (tuple2 (tuple2 a2 c2) (tuple2 b2 d2))
  (Tuple2 (tuple2 a2 c2) (tuple2 b2 d2) (Tuple2 a2 c2 x y)
  (Tuple2 b2 d2 z w)) (parallel_product d2 c2 b2 a2 h k))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x z) h) (mem (tuple2 c2 d2)
  (Tuple2 c2 d2 y w) k))))))

(declare-fun infix_plmngt (ty ty uni uni) uni)

;; infix +->_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (set1 (tuple2 a2 b2)))
  (infix_plmngt b2 a2 x x1)))))

;; mem_partial_function_set
  (assert
  (forall ((s (set a)) (t (set (tuple21 b c))) (f (set (tuple21 a (tuple21 b
  c)))))
  (= (mem (set1 (tuple2 a1 (tuple2 b1 c1))) (t2tb261 f)
  (infix_plmngt (tuple2 b1 c1) a1 (t2tb1 s) (t2tb131 t)))
  (and (mem (set1 (tuple2 a1 (tuple2 b1 c1))) (t2tb261 f)
  (relation (tuple2 b1 c1) a1 (t2tb1 s) (t2tb131 t)))
  (forall ((x a) (y1 (tuple21 b c)) (y2 (tuple21 b c)))
  (=>
  (and (mem14 (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 y1))) f)
  (mem14 (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 y2))) f))
  (= y1 y2)))))))

;; mem_partial_function_set
  (assert
  (forall ((s (set a)) (t (set c)) (f (set (tuple21 a c))))
  (= (mem11 f (tb2t128 (infix_plmngt c1 a1 (t2tb1 s) (t2tb132 t))))
  (and (mem11 f (relation3 s t))
  (forall ((x a) (y1 c) (y2 c))
  (=>
  (and (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y1))) f) (mem10
  (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y2))) f)) (= y1 y2)))))))

;; mem_partial_function_set
  (assert
  (forall ((s (set a)) (t (set b)) (f (set (tuple21 a b))))
  (= (mem4 f (tb2t10 (infix_plmngt b1 a1 (t2tb1 s) (t2tb12 t))))
  (and (mem4 f (relation1 s t))
  (forall ((x a) (y1 b) (y2 b))
  (=>
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y1))) f) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y2))) f)) (= y1 y2)))))))

;; mem_partial_function_set
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (f uni))
  (and
  (=> (mem (set1 (tuple2 a2 b2)) f (infix_plmngt b2 a2 s t))
  (and (mem (set1 (tuple2 a2 b2)) f (relation b2 a2 s t))
  (forall ((x uni) (y1 uni) (y2 uni))
  (=> (sort b2 y1)
  (=> (sort b2 y2)
  (=>
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y1) f) (mem (tuple2 a2 b2)
  (Tuple2 a2 b2 x y2) f)) (= y1 y2)))))))
  (=>
  (and (mem (set1 (tuple2 a2 b2)) f (relation b2 a2 s t))
  (forall ((x uni) (y1 uni) (y2 uni))
  (=> (sort a2 x)
  (=> (sort b2 y1)
  (=> (sort b2 y2)
  (=>
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y1) f) (mem (tuple2 a2 b2)
  (Tuple2 a2 b2 x y2) f)) (= y1 y2))))))) (mem (set1 (tuple2 a2 b2)) f
  (infix_plmngt b2 a2 s t)))))))

(declare-fun infix_mnmngt (ty ty uni uni) uni)

;; infix -->_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (set1 (tuple2 a2 b2)))
  (infix_mnmngt b2 a2 x x1)))))

;; mem_total_function_set
  (assert
  (forall ((s (set a)) (t (set c)) (x (set (tuple21 a c))))
  (= (mem11 x (tb2t128 (infix_mnmngt c1 a1 (t2tb1 s) (t2tb132 t))))
  (and (mem11 x (tb2t128 (infix_plmngt c1 a1 (t2tb1 s) (t2tb132 t))))
  (infix_eqeq a1 (dom c1 a1 (t2tb129 x)) (t2tb1 s))))))

;; mem_total_function_set
  (assert
  (forall ((s (set a)) (t (set b)) (x (set (tuple21 a b))))
  (= (mem4 x (tb2t10 (infix_mnmngt b1 a1 (t2tb1 s) (t2tb12 t))))
  (and (mem4 x (tb2t10 (infix_plmngt b1 a1 (t2tb1 s) (t2tb12 t))))
  (infix_eqeq a1 (dom b1 a1 (t2tb11 x)) (t2tb1 s))))))

;; mem_total_function_set
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (x uni))
  (= (mem (set1 (tuple2 a2 b2)) x (infix_mnmngt b2 a2 s t))
  (and (mem (set1 (tuple2 a2 b2)) x (infix_plmngt b2 a2 s t)) (infix_eqeq a2
  (dom b2 a2 x) s))))))

(declare-fun infix_gtplgt (ty ty uni uni) uni)

;; infix >+>_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (set1 (tuple2 a2 b2)))
  (infix_gtplgt b2 a2 x x1)))))

;; mem_partial_injection_set
  (assert
  (forall ((s (set c)) (t (set a)) (x (set (tuple21 c a))))
  (= (mem (set1 (tuple2 c1 a1)) (t2tb224 x)
  (infix_gtplgt a1 c1 (t2tb132 s) (t2tb1 t)))
  (and (mem (set1 (tuple2 c1 a1)) (t2tb224 x)
  (infix_plmngt a1 c1 (t2tb132 s) (t2tb1 t))) (mem11
  (tb2t129 (inverse a1 c1 (t2tb224 x)))
  (tb2t128 (infix_plmngt c1 a1 (t2tb1 t) (t2tb132 s))))))))

;; mem_partial_injection_set
  (assert
  (forall ((s (set b)) (t (set a)) (x (set (tuple21 b a))))
  (= (mem (set1 (tuple2 b1 a1)) (t2tb37 x)
  (infix_gtplgt a1 b1 (t2tb12 s) (t2tb1 t)))
  (and (mem (set1 (tuple2 b1 a1)) (t2tb37 x)
  (infix_plmngt a1 b1 (t2tb12 s) (t2tb1 t))) (mem4
  (tb2t11 (inverse a1 b1 (t2tb37 x)))
  (tb2t10 (infix_plmngt b1 a1 (t2tb1 t) (t2tb12 s))))))))

;; mem_partial_injection_set
  (assert
  (forall ((s (set a)) (t (set c)) (x (set (tuple21 a c))))
  (= (mem11 x (tb2t128 (infix_gtplgt c1 a1 (t2tb1 s) (t2tb132 t))))
  (and (mem11 x (tb2t128 (infix_plmngt c1 a1 (t2tb1 s) (t2tb132 t)))) (mem
  (set1 (tuple2 c1 a1)) (inverse c1 a1 (t2tb129 x))
  (infix_plmngt a1 c1 (t2tb132 t) (t2tb1 s)))))))

;; mem_partial_injection_set
  (assert
  (forall ((s (set a)) (t (set b)) (x (set (tuple21 a b))))
  (= (mem4 x (tb2t10 (infix_gtplgt b1 a1 (t2tb1 s) (t2tb12 t))))
  (and (mem4 x (tb2t10 (infix_plmngt b1 a1 (t2tb1 s) (t2tb12 t)))) (mem
  (set1 (tuple2 b1 a1)) (inverse b1 a1 (t2tb11 x))
  (infix_plmngt a1 b1 (t2tb12 t) (t2tb1 s)))))))

;; mem_partial_injection_set
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (x uni))
  (= (mem (set1 (tuple2 a2 b2)) x (infix_gtplgt b2 a2 s t))
  (and (mem (set1 (tuple2 a2 b2)) x (infix_plmngt b2 a2 s t)) (mem
  (set1 (tuple2 b2 a2)) (inverse b2 a2 x) (infix_plmngt a2 b2 t s)))))))

(declare-fun infix_gtmngt (ty ty uni uni) uni)

;; infix >->_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (set1 (tuple2 a2 b2)))
  (infix_gtmngt b2 a2 x x1)))))

;; mem_total_injection_set
  (assert
  (forall ((s (set a)) (t (set c)) (x (set (tuple21 a c))))
  (= (mem11 x (tb2t128 (infix_gtmngt c1 a1 (t2tb1 s) (t2tb132 t))))
  (and (mem11 x (tb2t128 (infix_gtplgt c1 a1 (t2tb1 s) (t2tb132 t)))) (mem11
  x (tb2t128 (infix_mnmngt c1 a1 (t2tb1 s) (t2tb132 t))))))))

;; mem_total_injection_set
  (assert
  (forall ((s (set a)) (t (set b)) (x (set (tuple21 a b))))
  (= (mem4 x (tb2t10 (infix_gtmngt b1 a1 (t2tb1 s) (t2tb12 t))))
  (and (mem4 x (tb2t10 (infix_gtplgt b1 a1 (t2tb1 s) (t2tb12 t)))) (mem4 x
  (tb2t10 (infix_mnmngt b1 a1 (t2tb1 s) (t2tb12 t))))))))

;; mem_total_injection_set
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (x uni))
  (= (mem (set1 (tuple2 a2 b2)) x (infix_gtmngt b2 a2 s t))
  (and (mem (set1 (tuple2 a2 b2)) x (infix_gtplgt b2 a2 s t)) (mem
  (set1 (tuple2 a2 b2)) x (infix_mnmngt b2 a2 s t)))))))

(declare-fun infix_plmngtgt (ty ty uni uni) uni)

;; infix +->>_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (set1 (tuple2 a2 b2)))
  (infix_plmngtgt b2 a2 x x1)))))

;; mem_partial_surjection_set
  (assert
  (forall ((s (set a)) (t (set c)) (x (set (tuple21 a c))))
  (= (mem11 x (tb2t128 (infix_plmngtgt c1 a1 (t2tb1 s) (t2tb132 t))))
  (and (mem11 x (tb2t128 (infix_plmngt c1 a1 (t2tb1 s) (t2tb132 t))))
  (infix_eqeq c1 (ran c1 a1 (t2tb129 x)) (t2tb132 t))))))

;; mem_partial_surjection_set
  (assert
  (forall ((s (set a)) (t (set b)) (x (set (tuple21 a b))))
  (= (mem4 x (tb2t10 (infix_plmngtgt b1 a1 (t2tb1 s) (t2tb12 t))))
  (and (mem4 x (tb2t10 (infix_plmngt b1 a1 (t2tb1 s) (t2tb12 t))))
  (infix_eqeq b1 (ran b1 a1 (t2tb11 x)) (t2tb12 t))))))

;; mem_partial_surjection_set
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (x uni))
  (= (mem (set1 (tuple2 a2 b2)) x (infix_plmngtgt b2 a2 s t))
  (and (mem (set1 (tuple2 a2 b2)) x (infix_plmngt b2 a2 s t)) (infix_eqeq b2
  (ran b2 a2 x) t))))))

(declare-fun infix_mnmngtgt (ty ty uni uni) uni)

;; infix -->>_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (set1 (tuple2 a2 b2)))
  (infix_mnmngtgt b2 a2 x x1)))))

;; mem_total_surjection_set
  (assert
  (forall ((s (set a)) (t (set c)) (x (set (tuple21 a c))))
  (= (mem11 x (tb2t128 (infix_mnmngtgt c1 a1 (t2tb1 s) (t2tb132 t))))
  (and (mem11 x (tb2t128 (infix_plmngtgt c1 a1 (t2tb1 s) (t2tb132 t))))
  (mem11 x (tb2t128 (infix_mnmngt c1 a1 (t2tb1 s) (t2tb132 t))))))))

;; mem_total_surjection_set
  (assert
  (forall ((s (set a)) (t (set b)) (x (set (tuple21 a b))))
  (= (mem4 x (tb2t10 (infix_mnmngtgt b1 a1 (t2tb1 s) (t2tb12 t))))
  (and (mem4 x (tb2t10 (infix_plmngtgt b1 a1 (t2tb1 s) (t2tb12 t)))) (mem4 x
  (tb2t10 (infix_mnmngt b1 a1 (t2tb1 s) (t2tb12 t))))))))

;; mem_total_surjection_set
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (x uni))
  (= (mem (set1 (tuple2 a2 b2)) x (infix_mnmngtgt b2 a2 s t))
  (and (mem (set1 (tuple2 a2 b2)) x (infix_plmngtgt b2 a2 s t)) (mem
  (set1 (tuple2 a2 b2)) x (infix_mnmngt b2 a2 s t)))))))

(declare-fun infix_gtplgtgt (ty ty uni uni) uni)

;; infix >+>>_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (set1 (tuple2 a2 b2)))
  (infix_gtplgtgt b2 a2 x x1)))))

;; mem_partial_bijection_set
  (assert
  (forall ((s (set a)) (t (set c)) (x (set (tuple21 a c))))
  (= (mem11 x (tb2t128 (infix_gtplgtgt c1 a1 (t2tb1 s) (t2tb132 t))))
  (and (mem11 x (tb2t128 (infix_gtplgt c1 a1 (t2tb1 s) (t2tb132 t)))) (mem11
  x (tb2t128 (infix_plmngtgt c1 a1 (t2tb1 s) (t2tb132 t))))))))

;; mem_partial_bijection_set
  (assert
  (forall ((s (set a)) (t (set b)) (x (set (tuple21 a b))))
  (= (mem4 x (tb2t10 (infix_gtplgtgt b1 a1 (t2tb1 s) (t2tb12 t))))
  (and (mem4 x (tb2t10 (infix_gtplgt b1 a1 (t2tb1 s) (t2tb12 t)))) (mem4 x
  (tb2t10 (infix_plmngtgt b1 a1 (t2tb1 s) (t2tb12 t))))))))

;; mem_partial_bijection_set
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (x uni))
  (= (mem (set1 (tuple2 a2 b2)) x (infix_gtplgtgt b2 a2 s t))
  (and (mem (set1 (tuple2 a2 b2)) x (infix_gtplgt b2 a2 s t)) (mem
  (set1 (tuple2 a2 b2)) x (infix_plmngtgt b2 a2 s t)))))))

(declare-fun infix_gtmngtgt (ty ty uni uni) uni)

;; infix >->>_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (set1 (tuple2 a2 b2)))
  (infix_gtmngtgt b2 a2 x x1)))))

;; mem_total_bijection_set
  (assert
  (forall ((s (set a)) (t (set c)) (x (set (tuple21 a c))))
  (= (mem11 x (tb2t128 (infix_gtmngtgt c1 a1 (t2tb1 s) (t2tb132 t))))
  (and (mem11 x (tb2t128 (infix_gtmngt c1 a1 (t2tb1 s) (t2tb132 t)))) (mem11
  x (tb2t128 (infix_mnmngtgt c1 a1 (t2tb1 s) (t2tb132 t))))))))

;; mem_total_bijection_set
  (assert
  (forall ((s (set a)) (t (set b)) (x (set (tuple21 a b))))
  (= (mem4 x (tb2t10 (infix_gtmngtgt b1 a1 (t2tb1 s) (t2tb12 t))))
  (and (mem4 x (tb2t10 (infix_gtmngt b1 a1 (t2tb1 s) (t2tb12 t)))) (mem4 x
  (tb2t10 (infix_mnmngtgt b1 a1 (t2tb1 s) (t2tb12 t))))))))

;; mem_total_bijection_set
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (x uni))
  (= (mem (set1 (tuple2 a2 b2)) x (infix_gtmngtgt b2 a2 s t))
  (and (mem (set1 (tuple2 a2 b2)) x (infix_gtmngt b2 a2 s t)) (mem
  (set1 (tuple2 a2 b2)) x (infix_mnmngtgt b2 a2 s t)))))))

(declare-fun apply (ty ty uni uni) uni)

;; apply_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort b2 (apply b2 a2 x x1)))))

;; apply_def0
  (assert
  (forall ((b2 ty))
  (forall ((f uni) (s (set (tuple21 a (tuple21 b c)))) (t uni) (a2 (tuple21 a
  (tuple21 b c))))
  (=>
  (and (mem (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) b2)) f
  (infix_plmngt b2 (tuple2 a1 (tuple2 b1 c1)) (t2tb261 s) t)) (mem14 a2
  (tb2t261 (dom b2 (tuple2 a1 (tuple2 b1 c1)) f)))) (mem
  (tuple2 (tuple2 a1 (tuple2 b1 c1)) b2)
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) b2 (t2tb260 a2)
  (apply b2 (tuple2 a1 (tuple2 b1 c1)) f (t2tb260 a2))) f)))))

;; apply_def0
  (assert
  (forall ((b2 ty))
  (forall ((f uni) (s (set (set (tuple21 a c)))) (t uni) (a2 (set (tuple21 a
  c))))
  (=>
  (and (mem (set1 (tuple2 (set1 (tuple2 a1 c1)) b2)) f
  (infix_plmngt b2 (set1 (tuple2 a1 c1)) (t2tb128 s) t)) (mem11 a2
  (tb2t128 (dom b2 (set1 (tuple2 a1 c1)) f)))) (mem
  (tuple2 (set1 (tuple2 a1 c1)) b2)
  (Tuple2 (set1 (tuple2 a1 c1)) b2 (t2tb129 a2)
  (apply b2 (set1 (tuple2 a1 c1)) f (t2tb129 a2))) f)))))

;; apply_def0
  (assert
  (forall ((b2 ty))
  (forall ((f uni) (s (set (tuple21 a c))) (t uni) (a2 (tuple21 a c)))
  (=>
  (and (mem (set1 (tuple2 (tuple2 a1 c1) b2)) f
  (infix_plmngt b2 (tuple2 a1 c1) (t2tb129 s) t)) (mem10 a2
  (tb2t129 (dom b2 (tuple2 a1 c1) f)))) (mem (tuple2 (tuple2 a1 c1) b2)
  (Tuple2 (tuple2 a1 c1) b2 (t2tb133 a2)
  (apply b2 (tuple2 a1 c1) f (t2tb133 a2))) f)))))

;; apply_def0
  (assert
  (forall ((b2 ty))
  (forall ((f uni) (s (set c)) (t uni) (a2 c))
  (=>
  (and (mem (set1 (tuple2 c1 b2)) f (infix_plmngt b2 c1 (t2tb132 s) t)) (mem7
  a2 (tb2t132 (dom b2 c1 f)))) (mem (tuple2 c1 b2)
  (Tuple2 c1 b2 (t2tb135 a2) (apply b2 c1 f (t2tb135 a2))) f)))))

;; apply_def0
  (assert
  (forall ((b2 ty))
  (forall ((f uni) (s (set (set (tuple21 a b)))) (t uni) (a2 (set (tuple21 a
  b))))
  (=>
  (and (mem (set1 (tuple2 (set1 (tuple2 a1 b1)) b2)) f
  (infix_plmngt b2 (set1 (tuple2 a1 b1)) (t2tb10 s) t)) (mem4 a2
  (tb2t10 (dom b2 (set1 (tuple2 a1 b1)) f)))) (mem
  (tuple2 (set1 (tuple2 a1 b1)) b2)
  (Tuple2 (set1 (tuple2 a1 b1)) b2 (t2tb11 a2)
  (apply b2 (set1 (tuple2 a1 b1)) f (t2tb11 a2))) f)))))

;; apply_def0
  (assert
  (forall ((b2 ty))
  (forall ((f uni) (s (set (tuple21 a b))) (t uni) (a2 (tuple21 a b)))
  (=>
  (and (mem (set1 (tuple2 (tuple2 a1 b1) b2)) f
  (infix_plmngt b2 (tuple2 a1 b1) (t2tb11 s) t)) (mem3 a2
  (tb2t11 (dom b2 (tuple2 a1 b1) f)))) (mem (tuple2 (tuple2 a1 b1) b2)
  (Tuple2 (tuple2 a1 b1) b2 (t2tb13 a2)
  (apply b2 (tuple2 a1 b1) f (t2tb13 a2))) f)))))

;; apply_def0
  (assert
  (forall ((b2 ty))
  (forall ((f uni) (s (set b)) (t uni) (a2 b))
  (=>
  (and (mem (set1 (tuple2 b1 b2)) f (infix_plmngt b2 b1 (t2tb12 s) t)) (mem2
  a2 (tb2t12 (dom b2 b1 f)))) (mem (tuple2 b1 b2)
  (Tuple2 b1 b2 (t2tb14 a2) (apply b2 b1 f (t2tb14 a2))) f)))))

;; apply_def0
  (assert
  (forall ((f (set (tuple21 a (tuple21 b c)))) (s (set a)) (t (set (tuple21 b
  c))) (a2 a))
  (=>
  (and (mem (set1 (tuple2 a1 (tuple2 b1 c1))) (t2tb261 f)
  (infix_plmngt (tuple2 b1 c1) a1 (t2tb1 s) (t2tb131 t))) (mem1 a2
  (tb2t1 (dom (tuple2 b1 c1) a1 (t2tb261 f))))) (mem14
  (tb2t260
  (Tuple2 a1 (tuple2 b1 c1) (t2tb2 a2)
  (apply (tuple2 b1 c1) a1 (t2tb261 f) (t2tb2 a2)))) f))))

;; apply_def0
  (assert
  (forall ((f (set (tuple21 a c))) (s (set a)) (t (set c)) (a2 a))
  (=>
  (and (mem11 f (tb2t128 (infix_plmngt c1 a1 (t2tb1 s) (t2tb132 t)))) (mem1
  a2 (tb2t1 (dom c1 a1 (t2tb129 f))))) (mem10
  (tb2t133 (Tuple2 a1 c1 (t2tb2 a2) (apply c1 a1 (t2tb129 f) (t2tb2 a2))))
  f))))

;; apply_def0
  (assert
  (forall ((f (set (tuple21 a b))) (s (set a)) (t (set b)) (a2 a))
  (=>
  (and (mem4 f (tb2t10 (infix_plmngt b1 a1 (t2tb1 s) (t2tb12 t)))) (mem1 a2
  (tb2t1 (dom b1 a1 (t2tb11 f))))) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 a2) (apply b1 a1 (t2tb11 f) (t2tb2 a2)))) f))))

;; apply_def0
  (assert
  (forall ((b2 ty))
  (forall ((f uni) (s (set a)) (t uni) (a2 a))
  (=>
  (and (mem (set1 (tuple2 a1 b2)) f (infix_plmngt b2 a1 (t2tb1 s) t)) (mem1
  a2 (tb2t1 (dom b2 a1 f)))) (mem (tuple2 a1 b2)
  (Tuple2 a1 b2 (t2tb2 a2) (apply b2 a1 f (t2tb2 a2))) f)))))

;; apply_def0
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((f uni) (s uni) (t uni) (a3 uni))
  (=>
  (and (mem (set1 (tuple2 a2 b2)) f (infix_plmngt b2 a2 s t)) (mem a2 a3
  (dom b2 a2 f))) (mem (tuple2 a2 b2) (Tuple2 a2 b2 a3 (apply b2 a2 f a3))
  f)))))

(assert
;; monot_direct_product
 ;; File "lemmes_bbook.why", line 846, characters 7-27
  (not
  (forall ((s (set a)) (t (set b)) (u (set c)) (h (set (tuple21 a b)))
  (p (set (tuple21 a b))) (k (set (tuple21 a c))) (q (set (tuple21 a c))))
  (=> (and (mem4 h (relation1 s t)) (mem11 k (relation3 s u)))
  (=> (and (subset6 p h) (subset11 q k)) (subset14 (direct_product1 p q)
  (direct_product1 h k)))))))
(check-sat)
