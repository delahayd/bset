(set-logic AUFBVDTLIRA)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
(declare-sort uni 0)

(declare-sort ty 0)

(declare-fun sort (ty uni) Bool)

(declare-fun witness (ty) uni)

;; witness_sort
  (assert (forall ((a2 ty)) (sort a2 (witness a2))))

(declare-fun int () ty)

(declare-fun real () ty)

(declare-sort set 1)

(declare-fun set1 (ty) ty)

(declare-sort d 0)

(declare-fun d1 () ty)

(declare-sort c 0)

(declare-fun c1 () ty)

(declare-sort b 0)

(declare-fun b1 () ty)

(declare-sort a 0)

(declare-fun a1 () ty)

(declare-sort tuple21 2)

(declare-fun tuple2 (ty ty) ty)

(declare-fun mem (ty uni uni) Bool)

(declare-fun mem1 (a (set a)) Bool)

(declare-fun mem2 (b (set b)) Bool)

(declare-fun mem3 ((tuple21 a b) (set (tuple21 a b))) Bool)

(declare-fun mem4 ((set (tuple21 a b)) (set (set (tuple21 a b)))) Bool)

(declare-fun mem7 (c (set c)) Bool)

(declare-fun mem10 ((tuple21 a c) (set (tuple21 a c))) Bool)

(declare-fun mem20 (d (set d)) Bool)

(declare-fun mem21 ((tuple21 c d) (set (tuple21 c d))) Bool)

(declare-fun mem22 ((set (tuple21 c d)) (set (set (tuple21 c d)))) Bool)

(declare-fun mem23 ((tuple21 b d) (set (tuple21 b d))) Bool)

(declare-fun mem24 ((tuple21 (tuple21 a c) (tuple21 b d))
  (set (tuple21 (tuple21 a c) (tuple21 b d)))) Bool)

(declare-fun infix_eqeq (ty uni uni) Bool)

(declare-fun infix_eqeq1 ((set a) (set a)) Bool)

(declare-fun infix_eqeq3 ((set b) (set b)) Bool)

(declare-fun infix_eqeq4 ((set (tuple21 a b)) (set (tuple21 a b))) Bool)

(declare-fun infix_eqeq5 ((set (set (tuple21 a b))) (set (set (tuple21 a
  b)))) Bool)

(declare-fun infix_eqeq7 ((set c) (set c)) Bool)

(declare-fun infix_eqeq9 ((set (tuple21 a c)) (set (tuple21 a c))) Bool)

(declare-fun infix_eqeq13 ((set d) (set d)) Bool)

(declare-fun infix_eqeq14 ((set (tuple21 c d)) (set (tuple21 c d))) Bool)

(declare-fun infix_eqeq15 ((set (tuple21 (tuple21 a c) (tuple21 b d)))
  (set (tuple21 (tuple21 a c) (tuple21 b d)))) Bool)

(declare-fun infix_eqeq22 ((set (tuple21 b d)) (set (tuple21 b d))) Bool)

(declare-fun infix_eqeq16 ((set (set (tuple21 c d))) (set (set (tuple21 c
  d)))) Bool)

;; infix ==_def
  (assert
  (forall ((s (set (tuple21 (tuple21 a c) (tuple21 b d))))
  (t (set (tuple21 (tuple21 a c) (tuple21 b d)))))
  (= (infix_eqeq15 s t)
  (forall ((x (tuple21 (tuple21 a c) (tuple21 b d))))
  (= (mem24 x s) (mem24 x t))))))

;; infix ==_def
  (assert
  (forall ((s (set (tuple21 b d))) (t (set (tuple21 b d))))
  (= (infix_eqeq22 s t)
  (forall ((x (tuple21 b d))) (= (mem23 x s) (mem23 x t))))))

;; infix ==_def
  (assert
  (forall ((s (set (set (tuple21 c d)))) (t (set (set (tuple21 c d)))))
  (= (infix_eqeq16 s t)
  (forall ((x (set (tuple21 c d)))) (= (mem22 x s) (mem22 x t))))))

;; infix ==_def
  (assert
  (forall ((s (set (tuple21 c d))) (t (set (tuple21 c d))))
  (= (infix_eqeq14 s t)
  (forall ((x (tuple21 c d))) (= (mem21 x s) (mem21 x t))))))

;; infix ==_def
  (assert
  (forall ((s (set d)) (t (set d)))
  (= (infix_eqeq13 s t) (forall ((x d)) (= (mem20 x s) (mem20 x t))))))

;; infix ==_def
  (assert
  (forall ((s (set (tuple21 a c))) (t (set (tuple21 a c))))
  (= (infix_eqeq9 s t)
  (forall ((x (tuple21 a c))) (= (mem10 x s) (mem10 x t))))))

;; infix ==_def
  (assert
  (forall ((s (set c)) (t (set c)))
  (= (infix_eqeq7 s t) (forall ((x c)) (= (mem7 x s) (mem7 x t))))))

;; infix ==_def
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set (set (tuple21 a b)))))
  (= (infix_eqeq5 s t)
  (forall ((x (set (tuple21 a b)))) (= (mem4 x s) (mem4 x t))))))

;; infix ==_def
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (tuple21 a b))))
  (= (infix_eqeq4 s t)
  (forall ((x (tuple21 a b))) (= (mem3 x s) (mem3 x t))))))

;; infix ==_def
  (assert
  (forall ((s (set b)) (t (set b)))
  (= (infix_eqeq3 s t) (forall ((x b)) (= (mem2 x s) (mem2 x t))))))

;; infix ==_def
  (assert
  (forall ((s (set a)) (t (set a)))
  (= (infix_eqeq1 s t) (forall ((x a)) (= (mem1 x s) (mem1 x t))))))

;; infix ==_def
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t uni))
  (and
  (=> (infix_eqeq a2 s t) (forall ((x uni)) (= (mem a2 x s) (mem a2 x t))))
  (=> (forall ((x uni)) (=> (sort a2 x) (= (mem a2 x s) (mem a2 x t))))
  (infix_eqeq a2 s t))))))

(declare-fun power (ty uni) uni)

;; power_sort
  (assert
  (forall ((a2 ty)) (forall ((x uni)) (sort (set1 (set1 a2)) (power a2 x)))))

(declare-fun non_empty_power (ty uni) uni)

;; non_empty_power_sort
  (assert
  (forall ((a2 ty))
  (forall ((x uni)) (sort (set1 (set1 a2)) (non_empty_power a2 x)))))

(declare-fun subset1 (ty uni uni) Bool)

(declare-fun subset2 ((set a) (set a)) Bool)

(declare-fun subset5 ((set b) (set b)) Bool)

(declare-fun subset6 ((set (tuple21 a b)) (set (tuple21 a b))) Bool)

(declare-fun subset7 ((set (set (tuple21 a b))) (set (set (tuple21 a
  b)))) Bool)

(declare-fun subset9 ((set c) (set c)) Bool)

(declare-fun subset11 ((set (tuple21 a c)) (set (tuple21 a c))) Bool)

(declare-fun subset17 ((set d) (set d)) Bool)

(declare-fun subset18 ((set (tuple21 c d)) (set (tuple21 c d))) Bool)

(declare-fun subset19 ((set (tuple21 (tuple21 a c) (tuple21 b d)))
  (set (tuple21 (tuple21 a c) (tuple21 b d)))) Bool)

(declare-fun subset25 ((set (tuple21 b d)) (set (tuple21 b d))) Bool)

(declare-fun subset20 ((set (set (tuple21 c d))) (set (set (tuple21 c
  d)))) Bool)

(declare-fun t2tb685 ((set (set (tuple21 (tuple21 a c) (tuple21 b d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a c) (tuple21 b d)))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))) (t2tb685 x))))

(declare-fun tb2t685 (uni) (set (set (tuple21 (tuple21 a c) (tuple21 b d)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a c) (tuple21 b d))))))
  (! (= (tb2t685 (t2tb685 i)) i) :pattern ((t2tb685 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))) j)
     (= (t2tb685 (tb2t685 j)) j)) :pattern ((t2tb685 (tb2t685 j))) )))

(declare-fun t2tb686 ((set (tuple21 (tuple21 a c) (tuple21 b d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a c) (tuple21 b d))))) (sort
  (set1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))) (t2tb686 x))))

(declare-fun tb2t686 (uni) (set (tuple21 (tuple21 a c) (tuple21 b d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a c) (tuple21 b d)))))
  (! (= (tb2t686 (t2tb686 i)) i) :pattern ((t2tb686 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))) j)
     (= (t2tb686 (tb2t686 j)) j)) :pattern ((t2tb686 (tb2t686 j))) )))

;; subset_def
  (assert
  (forall ((s (set (tuple21 (tuple21 a c) (tuple21 b d))))
  (t (set (tuple21 (tuple21 a c) (tuple21 b d)))))
  (= (subset19 s t) (mem (set1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
  (t2tb686 s) (power (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb686 t))))))

(declare-fun t2tb906 ((set (set (tuple21 b d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 b d))))) (sort (set1 (set1 (tuple2 b1 d1)))
  (t2tb906 x))))

(declare-fun tb2t906 (uni) (set (set (tuple21 b d))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 b d)))))
  (! (= (tb2t906 (t2tb906 i)) i) :pattern ((t2tb906 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 b1 d1))) j) (= (t2tb906 (tb2t906 j)) j)) :pattern (
  (t2tb906 (tb2t906 j))) )))

(declare-fun t2tb687 ((set (tuple21 b d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 b d)))) (sort (set1 (tuple2 b1 d1)) (t2tb687 x))))

(declare-fun tb2t687 (uni) (set (tuple21 b d)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 b d))))
  (! (= (tb2t687 (t2tb687 i)) i) :pattern ((t2tb687 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 b1 d1)) j) (= (t2tb687 (tb2t687 j)) j)) :pattern (
  (t2tb687 (tb2t687 j))) )))

;; subset_def
  (assert
  (forall ((s (set (tuple21 b d))) (t (set (tuple21 b d))))
  (= (subset25 s t) (mem (set1 (tuple2 b1 d1)) (t2tb687 s)
  (power (tuple2 b1 d1) (t2tb687 t))))))

(declare-fun t2tb5201 ((set (set (set (tuple21 c d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (set (tuple21 c d)))))) (sort
  (set1 (set1 (set1 (tuple2 c1 d1)))) (t2tb5201 x))))

(declare-fun tb2t5201 (uni) (set (set (set (tuple21 c d)))))

;; BridgeL
  (assert
  (forall ((i (set (set (set (tuple21 c d))))))
  (! (= (tb2t5201 (t2tb5201 i)) i) :pattern ((t2tb5201 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (set1 (tuple2 c1 d1)))) j)
     (= (t2tb5201 (tb2t5201 j)) j)) :pattern ((t2tb5201 (tb2t5201 j))) )))

(declare-fun t2tb688 ((set (set (tuple21 c d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 c d))))) (sort (set1 (set1 (tuple2 c1 d1)))
  (t2tb688 x))))

(declare-fun tb2t688 (uni) (set (set (tuple21 c d))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 c d)))))
  (! (= (tb2t688 (t2tb688 i)) i) :pattern ((t2tb688 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 c1 d1))) j) (= (t2tb688 (tb2t688 j)) j)) :pattern (
  (t2tb688 (tb2t688 j))) )))

;; subset_def
  (assert
  (forall ((s (set (set (tuple21 c d)))) (t (set (set (tuple21 c d)))))
  (= (subset20 s t) (mem (set1 (set1 (tuple2 c1 d1))) (t2tb688 s)
  (power (set1 (tuple2 c1 d1)) (t2tb688 t))))))

(declare-fun t2tb689 ((set (tuple21 c d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 c d)))) (sort (set1 (tuple2 c1 d1)) (t2tb689 x))))

(declare-fun tb2t689 (uni) (set (tuple21 c d)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 c d))))
  (! (= (tb2t689 (t2tb689 i)) i) :pattern ((t2tb689 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 c1 d1)) j) (= (t2tb689 (tb2t689 j)) j)) :pattern (
  (t2tb689 (tb2t689 j))) )))

;; subset_def
  (assert
  (forall ((s (set (tuple21 c d))) (t (set (tuple21 c d))))
  (= (subset18 s t) (mem22 s (tb2t688 (power (tuple2 c1 d1) (t2tb689 t)))))))

(declare-fun t2tb690 ((set d)) uni)

;; t2tb_sort
  (assert (forall ((x (set d))) (sort (set1 d1) (t2tb690 x))))

(declare-fun tb2t690 (uni) (set d))

;; BridgeL
  (assert
  (forall ((i (set d)))
  (! (= (tb2t690 (t2tb690 i)) i) :pattern ((t2tb690 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 d1) j) (= (t2tb690 (tb2t690 j)) j)) :pattern ((t2tb690
                                                                   (tb2t690
                                                                   j))) )))

(declare-fun t2tb5202 ((set (set d))) uni)

;; t2tb_sort
  (assert (forall ((x (set (set d)))) (sort (set1 (set1 d1)) (t2tb5202 x))))

(declare-fun tb2t5202 (uni) (set (set d)))

;; BridgeL
  (assert
  (forall ((i (set (set d))))
  (! (= (tb2t5202 (t2tb5202 i)) i) :pattern ((t2tb5202 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 d1)) j) (= (t2tb5202 (tb2t5202 j)) j)) :pattern (
  (t2tb5202 (tb2t5202 j))) )))

;; subset_def
  (assert
  (forall ((s (set d)) (t (set d)))
  (= (subset17 s t) (mem (set1 d1) (t2tb690 s) (power d1 (t2tb690 t))))))

(declare-fun t2tb128 ((set (set (tuple21 a c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 a c))))) (sort (set1 (set1 (tuple2 a1 c1)))
  (t2tb128 x))))

(declare-fun tb2t128 (uni) (set (set (tuple21 a c))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 a c)))))
  (! (= (tb2t128 (t2tb128 i)) i) :pattern ((t2tb128 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 a1 c1))) j) (= (t2tb128 (tb2t128 j)) j)) :pattern (
  (t2tb128 (tb2t128 j))) )))

(declare-fun t2tb129 ((set (tuple21 a c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a c)))) (sort (set1 (tuple2 a1 c1)) (t2tb129 x))))

(declare-fun tb2t129 (uni) (set (tuple21 a c)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a c))))
  (! (= (tb2t129 (t2tb129 i)) i) :pattern ((t2tb129 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 c1)) j) (= (t2tb129 (tb2t129 j)) j)) :pattern (
  (t2tb129 (tb2t129 j))) )))

;; subset_def
  (assert
  (forall ((s (set (tuple21 a c))) (t (set (tuple21 a c))))
  (= (subset11 s t) (mem (set1 (tuple2 a1 c1)) (t2tb129 s)
  (power (tuple2 a1 c1) (t2tb129 t))))))

(declare-fun t2tb132 ((set c)) uni)

;; t2tb_sort
  (assert (forall ((x (set c))) (sort (set1 c1) (t2tb132 x))))

(declare-fun tb2t132 (uni) (set c))

;; BridgeL
  (assert
  (forall ((i (set c)))
  (! (= (tb2t132 (t2tb132 i)) i) :pattern ((t2tb132 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 c1) j) (= (t2tb132 (tb2t132 j)) j)) :pattern ((t2tb132
                                                                   (tb2t132
                                                                   j))) )))

(declare-fun t2tb264 ((set (set c))) uni)

;; t2tb_sort
  (assert (forall ((x (set (set c)))) (sort (set1 (set1 c1)) (t2tb264 x))))

(declare-fun tb2t264 (uni) (set (set c)))

;; BridgeL
  (assert
  (forall ((i (set (set c))))
  (! (= (tb2t264 (t2tb264 i)) i) :pattern ((t2tb264 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 c1)) j) (= (t2tb264 (tb2t264 j)) j)) :pattern (
  (t2tb264 (tb2t264 j))) )))

;; subset_def
  (assert
  (forall ((s (set c)) (t (set c)))
  (= (subset9 s t) (mem (set1 c1) (t2tb132 s) (power c1 (t2tb132 t))))))

(declare-fun t2tb43 ((set (set (set (tuple21 a b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (set (tuple21 a b)))))) (sort
  (set1 (set1 (set1 (tuple2 a1 b1)))) (t2tb43 x))))

(declare-fun tb2t43 (uni) (set (set (set (tuple21 a b)))))

;; BridgeL
  (assert
  (forall ((i (set (set (set (tuple21 a b))))))
  (! (= (tb2t43 (t2tb43 i)) i) :pattern ((t2tb43 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (set1 (tuple2 a1 b1)))) j)
     (= (t2tb43 (tb2t43 j)) j)) :pattern ((t2tb43 (tb2t43 j))) )))

(declare-fun t2tb10 ((set (set (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 a b))))) (sort (set1 (set1 (tuple2 a1 b1)))
  (t2tb10 x))))

(declare-fun tb2t10 (uni) (set (set (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 a b)))))
  (! (= (tb2t10 (t2tb10 i)) i) :pattern ((t2tb10 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 a1 b1))) j) (= (t2tb10 (tb2t10 j)) j)) :pattern (
  (t2tb10 (tb2t10 j))) )))

;; subset_def
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set (set (tuple21 a b)))))
  (= (subset7 s t) (mem (set1 (set1 (tuple2 a1 b1))) (t2tb10 s)
  (power (set1 (tuple2 a1 b1)) (t2tb10 t))))))

(declare-fun t2tb11 ((set (tuple21 a b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a b)))) (sort (set1 (tuple2 a1 b1)) (t2tb11 x))))

(declare-fun tb2t11 (uni) (set (tuple21 a b)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a b))))
  (! (= (tb2t11 (t2tb11 i)) i) :pattern ((t2tb11 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 b1)) j) (= (t2tb11 (tb2t11 j)) j)) :pattern (
  (t2tb11 (tb2t11 j))) )))

;; subset_def
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (tuple21 a b))))
  (= (subset6 s t) (mem4 s (tb2t10 (power (tuple2 a1 b1) (t2tb11 t)))))))

(declare-fun t2tb12 ((set b)) uni)

;; t2tb_sort
  (assert (forall ((x (set b))) (sort (set1 b1) (t2tb12 x))))

(declare-fun tb2t12 (uni) (set b))

;; BridgeL
  (assert
  (forall ((i (set b))) (! (= (tb2t12 (t2tb12 i)) i) :pattern ((t2tb12 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 b1) j) (= (t2tb12 (tb2t12 j)) j)) :pattern ((t2tb12
                                                                 (tb2t12 j))) )))

(declare-fun t2tb44 ((set (set b))) uni)

;; t2tb_sort
  (assert (forall ((x (set (set b)))) (sort (set1 (set1 b1)) (t2tb44 x))))

(declare-fun tb2t44 (uni) (set (set b)))

;; BridgeL
  (assert
  (forall ((i (set (set b))))
  (! (= (tb2t44 (t2tb44 i)) i) :pattern ((t2tb44 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 b1)) j) (= (t2tb44 (tb2t44 j)) j)) :pattern (
  (t2tb44 (tb2t44 j))) )))

;; subset_def
  (assert
  (forall ((s (set b)) (t (set b)))
  (= (subset5 s t) (mem (set1 b1) (t2tb12 s) (power b1 (t2tb12 t))))))

(declare-fun t2tb ((set (set a))) uni)

;; t2tb_sort
  (assert (forall ((x (set (set a)))) (sort (set1 (set1 a1)) (t2tb x))))

(declare-fun tb2t (uni) (set (set a)))

;; BridgeL
  (assert
  (forall ((i (set (set a)))) (! (= (tb2t (t2tb i)) i) :pattern ((t2tb i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 a1)) j) (= (t2tb (tb2t j)) j)) :pattern ((t2tb
                                                                    (tb2t j))) )))

(declare-fun t2tb1 ((set a)) uni)

;; t2tb_sort
  (assert (forall ((x (set a))) (sort (set1 a1) (t2tb1 x))))

(declare-fun tb2t1 (uni) (set a))

;; BridgeL
  (assert
  (forall ((i (set a))) (! (= (tb2t1 (t2tb1 i)) i) :pattern ((t2tb1 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 a1) j) (= (t2tb1 (tb2t1 j)) j)) :pattern ((t2tb1
                                                               (tb2t1 j))) )))

;; subset_def
  (assert
  (forall ((s (set a)) (t (set a)))
  (= (subset2 s t) (mem (set1 a1) (t2tb1 s) (power a1 (t2tb1 t))))))

;; subset_def
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t uni))
  (= (subset1 a2 s t) (mem (set1 a2) s (power a2 t))))))

(declare-fun subsetnoteq (ty uni uni) Bool)

;; subsetnoteq_def
  (assert
  (forall ((s (set (tuple21 (tuple21 a c) (tuple21 b d))))
  (t (set (tuple21 (tuple21 a c) (tuple21 b d)))))
  (= (subsetnoteq (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb686 s)
  (t2tb686 t)) (and (subset19 s t) (not (infix_eqeq15 s t))))))

;; subsetnoteq_def
  (assert
  (forall ((s (set (tuple21 b d))) (t (set (tuple21 b d))))
  (= (subsetnoteq (tuple2 b1 d1) (t2tb687 s) (t2tb687 t))
  (and (subset25 s t) (not (infix_eqeq22 s t))))))

;; subsetnoteq_def
  (assert
  (forall ((s (set (set (tuple21 c d)))) (t (set (set (tuple21 c d)))))
  (= (subsetnoteq (set1 (tuple2 c1 d1)) (t2tb688 s) (t2tb688 t))
  (and (subset20 s t) (not (infix_eqeq16 s t))))))

;; subsetnoteq_def
  (assert
  (forall ((s (set (tuple21 c d))) (t (set (tuple21 c d))))
  (= (subsetnoteq (tuple2 c1 d1) (t2tb689 s) (t2tb689 t))
  (and (subset18 s t) (not (infix_eqeq14 s t))))))

;; subsetnoteq_def
  (assert
  (forall ((s (set d)) (t (set d)))
  (= (subsetnoteq d1 (t2tb690 s) (t2tb690 t))
  (and (subset17 s t) (not (infix_eqeq13 s t))))))

;; subsetnoteq_def
  (assert
  (forall ((s (set (tuple21 a c))) (t (set (tuple21 a c))))
  (= (subsetnoteq (tuple2 a1 c1) (t2tb129 s) (t2tb129 t))
  (and (subset11 s t) (not (infix_eqeq9 s t))))))

;; subsetnoteq_def
  (assert
  (forall ((s (set c)) (t (set c)))
  (= (subsetnoteq c1 (t2tb132 s) (t2tb132 t))
  (and (subset9 s t) (not (infix_eqeq7 s t))))))

;; subsetnoteq_def
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set (set (tuple21 a b)))))
  (= (subsetnoteq (set1 (tuple2 a1 b1)) (t2tb10 s) (t2tb10 t))
  (and (subset7 s t) (not (infix_eqeq5 s t))))))

;; subsetnoteq_def
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (tuple21 a b))))
  (= (subsetnoteq (tuple2 a1 b1) (t2tb11 s) (t2tb11 t))
  (and (subset6 s t) (not (infix_eqeq4 s t))))))

;; subsetnoteq_def
  (assert
  (forall ((s (set b)) (t (set b)))
  (= (subsetnoteq b1 (t2tb12 s) (t2tb12 t))
  (and (subset5 s t) (not (infix_eqeq3 s t))))))

;; subsetnoteq_def
  (assert
  (forall ((s (set a)) (t (set a)))
  (= (subsetnoteq a1 (t2tb1 s) (t2tb1 t))
  (and (subset2 s t) (not (infix_eqeq1 s t))))))

;; subsetnoteq_def
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t uni))
  (= (subsetnoteq a2 s t) (and (subset1 a2 s t) (not (infix_eqeq a2 s t)))))))

(declare-fun empty (ty) uni)

;; empty_sort
  (assert (forall ((a2 ty)) (sort (set1 a2) (empty a2))))

(declare-fun is_empty (ty uni) Bool)

;; is_empty_def
  (assert
  (forall ((s (set (tuple21 (tuple21 a c) (tuple21 b d)))))
  (= (is_empty (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb686 s))
  (forall ((x (tuple21 (tuple21 a c) (tuple21 b d)))) (not (mem24 x s))))))

;; is_empty_def
  (assert
  (forall ((s (set (tuple21 b d))))
  (= (is_empty (tuple2 b1 d1) (t2tb687 s))
  (forall ((x (tuple21 b d))) (not (mem23 x s))))))

;; is_empty_def
  (assert
  (forall ((s (set (set (tuple21 c d)))))
  (= (is_empty (set1 (tuple2 c1 d1)) (t2tb688 s))
  (forall ((x (set (tuple21 c d)))) (not (mem22 x s))))))

;; is_empty_def
  (assert
  (forall ((s (set (tuple21 c d))))
  (= (is_empty (tuple2 c1 d1) (t2tb689 s))
  (forall ((x (tuple21 c d))) (not (mem21 x s))))))

;; is_empty_def
  (assert
  (forall ((s (set d)))
  (= (is_empty d1 (t2tb690 s)) (forall ((x d)) (not (mem20 x s))))))

;; is_empty_def
  (assert
  (forall ((s (set (tuple21 a c))))
  (= (is_empty (tuple2 a1 c1) (t2tb129 s))
  (forall ((x (tuple21 a c))) (not (mem10 x s))))))

;; is_empty_def
  (assert
  (forall ((s (set c)))
  (= (is_empty c1 (t2tb132 s)) (forall ((x c)) (not (mem7 x s))))))

;; is_empty_def
  (assert
  (forall ((s (set (set (tuple21 a b)))))
  (= (is_empty (set1 (tuple2 a1 b1)) (t2tb10 s))
  (forall ((x (set (tuple21 a b)))) (not (mem4 x s))))))

;; is_empty_def
  (assert
  (forall ((s (set (tuple21 a b))))
  (= (is_empty (tuple2 a1 b1) (t2tb11 s))
  (forall ((x (tuple21 a b))) (not (mem3 x s))))))

;; is_empty_def
  (assert
  (forall ((s (set b)))
  (= (is_empty b1 (t2tb12 s)) (forall ((x b)) (not (mem2 x s))))))

;; is_empty_def
  (assert
  (forall ((s (set a)))
  (= (is_empty a1 (t2tb1 s)) (forall ((x a)) (not (mem1 x s))))))

;; is_empty_def
  (assert
  (forall ((a2 ty))
  (forall ((s uni))
  (and (=> (is_empty a2 s) (forall ((x uni)) (not (mem a2 x s))))
  (=> (forall ((x uni)) (=> (sort a2 x) (not (mem a2 x s)))) (is_empty a2 s))))))

;; empty_def1
  (assert (forall ((a2 ty)) (is_empty a2 (empty a2))))

;; empty
  (assert
  (forall ((x (tuple21 (tuple21 a c) (tuple21 b d))))
  (not (mem24 x (tb2t686 (empty (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))))))))

;; empty
  (assert
  (forall ((x (tuple21 b d)))
  (not (mem23 x (tb2t687 (empty (tuple2 b1 d1)))))))

;; empty
  (assert
  (forall ((x (set (tuple21 c d))))
  (not (mem22 x (tb2t688 (empty (set1 (tuple2 c1 d1))))))))

;; empty
  (assert
  (forall ((x (tuple21 c d)))
  (not (mem21 x (tb2t689 (empty (tuple2 c1 d1)))))))

;; empty
  (assert (forall ((x d)) (not (mem20 x (tb2t690 (empty d1))))))

;; empty
  (assert
  (forall ((x (tuple21 a c)))
  (not (mem10 x (tb2t129 (empty (tuple2 a1 c1)))))))

;; empty
  (assert (forall ((x c)) (not (mem7 x (tb2t132 (empty c1))))))

;; empty
  (assert
  (forall ((x (set (tuple21 a b))))
  (not (mem4 x (tb2t10 (empty (set1 (tuple2 a1 b1))))))))

;; empty
  (assert
  (forall ((x (tuple21 a b))) (not (mem3 x (tb2t11 (empty (tuple2 a1 b1)))))))

;; empty
  (assert (forall ((x b)) (not (mem2 x (tb2t12 (empty b1))))))

;; empty
  (assert (forall ((x a)) (not (mem1 x (tb2t1 (empty a1))))))

;; empty
  (assert (forall ((a2 ty)) (forall ((x uni)) (not (mem a2 x (empty a2))))))

(declare-fun add (ty uni uni) uni)

;; add_sort
  (assert
  (forall ((a2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 a2) (add a2 x x1)))))

(declare-fun t2tb691 ((tuple21 (tuple21 a c) (tuple21 b d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a c) (tuple21 b d)))) (sort
  (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb691 x))))

(declare-fun tb2t691 (uni) (tuple21 (tuple21 a c) (tuple21 b d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a c) (tuple21 b d))))
  (! (= (tb2t691 (t2tb691 i)) i) :pattern ((t2tb691 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) j)
     (= (t2tb691 (tb2t691 j)) j)) :pattern ((t2tb691 (tb2t691 j))) )))

;; add_def1
  (assert
  (forall ((x (tuple21 (tuple21 a c) (tuple21 b d))) (y (tuple21 (tuple21 a
  c) (tuple21 b d))))
  (forall ((s (set (tuple21 (tuple21 a c) (tuple21 b d)))))
  (= (mem24 x
  (tb2t686
  (add (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb691 y) (t2tb686 s))))
  (or (= x y) (mem24 x s))))))

(declare-fun t2tb692 ((tuple21 b d)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 b d))) (sort (tuple2 b1 d1) (t2tb692 x))))

(declare-fun tb2t692 (uni) (tuple21 b d))

;; BridgeL
  (assert
  (forall ((i (tuple21 b d)))
  (! (= (tb2t692 (t2tb692 i)) i) :pattern ((t2tb692 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 b1 d1) j) (= (t2tb692 (tb2t692 j)) j)) :pattern (
  (t2tb692 (tb2t692 j))) )))

;; add_def1
  (assert
  (forall ((x (tuple21 b d)) (y (tuple21 b d)))
  (forall ((s (set (tuple21 b d))))
  (= (mem23 x (tb2t687 (add (tuple2 b1 d1) (t2tb692 y) (t2tb687 s))))
  (or (= x y) (mem23 x s))))))

;; add_def1
  (assert
  (forall ((x (set (tuple21 c d))) (y (set (tuple21 c d))))
  (forall ((s (set (set (tuple21 c d)))))
  (= (mem22 x (tb2t688 (add (set1 (tuple2 c1 d1)) (t2tb689 y) (t2tb688 s))))
  (or (= x y) (mem22 x s))))))

(declare-fun t2tb693 ((tuple21 c d)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 c d))) (sort (tuple2 c1 d1) (t2tb693 x))))

(declare-fun tb2t693 (uni) (tuple21 c d))

;; BridgeL
  (assert
  (forall ((i (tuple21 c d)))
  (! (= (tb2t693 (t2tb693 i)) i) :pattern ((t2tb693 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 c1 d1) j) (= (t2tb693 (tb2t693 j)) j)) :pattern (
  (t2tb693 (tb2t693 j))) )))

;; add_def1
  (assert
  (forall ((x (tuple21 c d)) (y (tuple21 c d)))
  (forall ((s (set (tuple21 c d))))
  (= (mem21 x (tb2t689 (add (tuple2 c1 d1) (t2tb693 y) (t2tb689 s))))
  (or (= x y) (mem21 x s))))))

(declare-fun t2tb694 (d) uni)

;; t2tb_sort
  (assert (forall ((x d)) (sort d1 (t2tb694 x))))

(declare-fun tb2t694 (uni) d)

;; BridgeL
  (assert
  (forall ((i d)) (! (= (tb2t694 (t2tb694 i)) i) :pattern ((t2tb694 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort d1 j) (= (t2tb694 (tb2t694 j)) j)) :pattern ((t2tb694
                                                            (tb2t694 j))) )))

;; add_def1
  (assert
  (forall ((x d) (y d))
  (forall ((s (set d)))
  (= (mem20 x (tb2t690 (add d1 (t2tb694 y) (t2tb690 s))))
  (or (= x y) (mem20 x s))))))

(declare-fun t2tb133 ((tuple21 a c)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 a c))) (sort (tuple2 a1 c1) (t2tb133 x))))

(declare-fun tb2t133 (uni) (tuple21 a c))

;; BridgeL
  (assert
  (forall ((i (tuple21 a c)))
  (! (= (tb2t133 (t2tb133 i)) i) :pattern ((t2tb133 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 c1) j) (= (t2tb133 (tb2t133 j)) j)) :pattern (
  (t2tb133 (tb2t133 j))) )))

;; add_def1
  (assert
  (forall ((x (tuple21 a c)) (y (tuple21 a c)))
  (forall ((s (set (tuple21 a c))))
  (= (mem10 x (tb2t129 (add (tuple2 a1 c1) (t2tb133 y) (t2tb129 s))))
  (or (= x y) (mem10 x s))))))

(declare-fun t2tb135 (c) uni)

;; t2tb_sort
  (assert (forall ((x c)) (sort c1 (t2tb135 x))))

(declare-fun tb2t135 (uni) c)

;; BridgeL
  (assert
  (forall ((i c)) (! (= (tb2t135 (t2tb135 i)) i) :pattern ((t2tb135 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort c1 j) (= (t2tb135 (tb2t135 j)) j)) :pattern ((t2tb135
                                                            (tb2t135 j))) )))

;; add_def1
  (assert
  (forall ((x c) (y c))
  (forall ((s (set c)))
  (= (mem7 x (tb2t132 (add c1 (t2tb135 y) (t2tb132 s))))
  (or (= x y) (mem7 x s))))))

;; add_def1
  (assert
  (forall ((x (set (tuple21 a b))) (y (set (tuple21 a b))))
  (forall ((s (set (set (tuple21 a b)))))
  (= (mem4 x (tb2t10 (add (set1 (tuple2 a1 b1)) (t2tb11 y) (t2tb10 s))))
  (or (= x y) (mem4 x s))))))

(declare-fun t2tb13 ((tuple21 a b)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 a b))) (sort (tuple2 a1 b1) (t2tb13 x))))

(declare-fun tb2t13 (uni) (tuple21 a b))

;; BridgeL
  (assert
  (forall ((i (tuple21 a b)))
  (! (= (tb2t13 (t2tb13 i)) i) :pattern ((t2tb13 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 b1) j) (= (t2tb13 (tb2t13 j)) j)) :pattern (
  (t2tb13 (tb2t13 j))) )))

;; add_def1
  (assert
  (forall ((x (tuple21 a b)) (y (tuple21 a b)))
  (forall ((s (set (tuple21 a b))))
  (= (mem3 x (tb2t11 (add (tuple2 a1 b1) (t2tb13 y) (t2tb11 s))))
  (or (= x y) (mem3 x s))))))

(declare-fun t2tb14 (b) uni)

;; t2tb_sort
  (assert (forall ((x b)) (sort b1 (t2tb14 x))))

(declare-fun tb2t14 (uni) b)

;; BridgeL
  (assert
  (forall ((i b)) (! (= (tb2t14 (t2tb14 i)) i) :pattern ((t2tb14 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort b1 j) (= (t2tb14 (tb2t14 j)) j)) :pattern ((t2tb14 (tb2t14 j))) )))

;; add_def1
  (assert
  (forall ((x b) (y b))
  (forall ((s (set b)))
  (= (mem2 x (tb2t12 (add b1 (t2tb14 y) (t2tb12 s))))
  (or (= x y) (mem2 x s))))))

(declare-fun t2tb2 (a) uni)

;; t2tb_sort
  (assert (forall ((x a)) (sort a1 (t2tb2 x))))

(declare-fun tb2t2 (uni) a)

;; BridgeL
  (assert (forall ((i a)) (! (= (tb2t2 (t2tb2 i)) i) :pattern ((t2tb2 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort a1 j) (= (t2tb2 (tb2t2 j)) j)) :pattern ((t2tb2 (tb2t2 j))) )))

;; add_def1
  (assert
  (forall ((x a) (y a))
  (forall ((s (set a)))
  (= (mem1 x (tb2t1 (add a1 (t2tb2 y) (t2tb1 s)))) (or (= x y) (mem1 x s))))))

;; add_def1
  (assert
  (forall ((a2 ty))
  (forall ((x uni) (y uni))
  (=> (sort a2 x)
  (=> (sort a2 y)
  (forall ((s uni)) (= (mem a2 x (add a2 y s)) (or (= x y) (mem a2 x s)))))))))

(declare-fun singleton (ty uni) uni)

;; singleton_sort
  (assert
  (forall ((a2 ty)) (forall ((x uni)) (sort (set1 a2) (singleton a2 x)))))

;; mem_singleton
  (assert
  (forall ((x (tuple21 (tuple21 a c) (tuple21 b d))) (y (tuple21 (tuple21 a
  c) (tuple21 b d))))
  (= (mem24 x
  (tb2t686 (singleton (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb691 y))))
  (= x y))))

;; mem_singleton
  (assert
  (forall ((x (tuple21 b d)) (y (tuple21 b d)))
  (= (mem23 x (tb2t687 (singleton (tuple2 b1 d1) (t2tb692 y)))) (= x y))))

;; mem_singleton
  (assert
  (forall ((x (set (tuple21 c d))) (y (set (tuple21 c d))))
  (= (mem22 x (tb2t688 (singleton (set1 (tuple2 c1 d1)) (t2tb689 y))))
  (= x y))))

;; mem_singleton
  (assert
  (forall ((x (tuple21 c d)) (y (tuple21 c d)))
  (= (mem21 x (tb2t689 (singleton (tuple2 c1 d1) (t2tb693 y)))) (= x y))))

;; mem_singleton
  (assert
  (forall ((x d) (y d))
  (= (mem20 x (tb2t690 (singleton d1 (t2tb694 y)))) (= x y))))

;; mem_singleton
  (assert
  (forall ((x (tuple21 a c)) (y (tuple21 a c)))
  (= (mem10 x (tb2t129 (singleton (tuple2 a1 c1) (t2tb133 y)))) (= x y))))

;; mem_singleton
  (assert
  (forall ((x c) (y c))
  (= (mem7 x (tb2t132 (singleton c1 (t2tb135 y)))) (= x y))))

;; mem_singleton
  (assert
  (forall ((x (set (tuple21 a b))) (y (set (tuple21 a b))))
  (= (mem4 x (tb2t10 (singleton (set1 (tuple2 a1 b1)) (t2tb11 y)))) (= x y))))

;; mem_singleton
  (assert
  (forall ((x (tuple21 a b)) (y (tuple21 a b)))
  (= (mem3 x (tb2t11 (singleton (tuple2 a1 b1) (t2tb13 y)))) (= x y))))

;; mem_singleton
  (assert
  (forall ((x b) (y b))
  (= (mem2 x (tb2t12 (singleton b1 (t2tb14 y)))) (= x y))))

;; mem_singleton
  (assert
  (forall ((x a) (y a))
  (= (mem1 x (tb2t1 (singleton a1 (t2tb2 y)))) (= x y))))

;; mem_singleton
  (assert
  (forall ((a2 ty))
  (forall ((x uni) (y uni))
  (=> (sort a2 x) (=> (sort a2 y) (= (mem a2 x (singleton a2 y)) (= x y)))))))

(declare-fun remove (ty uni uni) uni)

;; remove_sort
  (assert
  (forall ((a2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 a2) (remove a2 x x1)))))

;; remove_def1
  (assert
  (forall ((x (tuple21 (tuple21 a c) (tuple21 b d))) (y (tuple21 (tuple21 a
  c) (tuple21 b d))) (s (set (tuple21 (tuple21 a c) (tuple21 b d)))))
  (= (mem24 x
  (tb2t686
  (remove (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb691 y) (t2tb686 s))))
  (and (not (= x y)) (mem24 x s)))))

;; remove_def1
  (assert
  (forall ((x (tuple21 b d)) (y (tuple21 b d)) (s (set (tuple21 b d))))
  (= (mem23 x (tb2t687 (remove (tuple2 b1 d1) (t2tb692 y) (t2tb687 s))))
  (and (not (= x y)) (mem23 x s)))))

;; remove_def1
  (assert
  (forall ((x (set (tuple21 c d))) (y (set (tuple21 c d)))
  (s (set (set (tuple21 c d)))))
  (= (mem22 x
  (tb2t688 (remove (set1 (tuple2 c1 d1)) (t2tb689 y) (t2tb688 s))))
  (and (not (= x y)) (mem22 x s)))))

;; remove_def1
  (assert
  (forall ((x (tuple21 c d)) (y (tuple21 c d)) (s (set (tuple21 c d))))
  (= (mem21 x (tb2t689 (remove (tuple2 c1 d1) (t2tb693 y) (t2tb689 s))))
  (and (not (= x y)) (mem21 x s)))))

;; remove_def1
  (assert
  (forall ((x d) (y d) (s (set d)))
  (= (mem20 x (tb2t690 (remove d1 (t2tb694 y) (t2tb690 s))))
  (and (not (= x y)) (mem20 x s)))))

;; remove_def1
  (assert
  (forall ((x (tuple21 a c)) (y (tuple21 a c)) (s (set (tuple21 a c))))
  (= (mem10 x (tb2t129 (remove (tuple2 a1 c1) (t2tb133 y) (t2tb129 s))))
  (and (not (= x y)) (mem10 x s)))))

;; remove_def1
  (assert
  (forall ((x c) (y c) (s (set c)))
  (= (mem7 x (tb2t132 (remove c1 (t2tb135 y) (t2tb132 s))))
  (and (not (= x y)) (mem7 x s)))))

;; remove_def1
  (assert
  (forall ((x (set (tuple21 a b))) (y (set (tuple21 a b)))
  (s (set (set (tuple21 a b)))))
  (= (mem4 x (tb2t10 (remove (set1 (tuple2 a1 b1)) (t2tb11 y) (t2tb10 s))))
  (and (not (= x y)) (mem4 x s)))))

;; remove_def1
  (assert
  (forall ((x (tuple21 a b)) (y (tuple21 a b)) (s (set (tuple21 a b))))
  (= (mem3 x (tb2t11 (remove (tuple2 a1 b1) (t2tb13 y) (t2tb11 s))))
  (and (not (= x y)) (mem3 x s)))))

;; remove_def1
  (assert
  (forall ((x b) (y b) (s (set b)))
  (= (mem2 x (tb2t12 (remove b1 (t2tb14 y) (t2tb12 s))))
  (and (not (= x y)) (mem2 x s)))))

;; remove_def1
  (assert
  (forall ((x a) (y a) (s (set a)))
  (= (mem1 x (tb2t1 (remove a1 (t2tb2 y) (t2tb1 s))))
  (and (not (= x y)) (mem1 x s)))))

;; remove_def1
  (assert
  (forall ((a2 ty))
  (forall ((x uni) (y uni) (s uni))
  (=> (sort a2 x)
  (=> (sort a2 y)
  (= (mem a2 x (remove a2 y s)) (and (not (= x y)) (mem a2 x s))))))))

(declare-fun all (ty) uni)

;; all_sort
  (assert (forall ((a2 ty)) (sort (set1 a2) (all a2))))

;; all_def
  (assert
  (forall ((x (tuple21 (tuple21 a c) (tuple21 b d)))) (mem24 x
  (tb2t686 (all (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))))))

;; all_def
  (assert
  (forall ((x (tuple21 b d))) (mem23 x (tb2t687 (all (tuple2 b1 d1))))))

;; all_def
  (assert
  (forall ((x (set (tuple21 c d)))) (mem22 x
  (tb2t688 (all (set1 (tuple2 c1 d1)))))))

;; all_def
  (assert
  (forall ((x (tuple21 c d))) (mem21 x (tb2t689 (all (tuple2 c1 d1))))))

;; all_def
  (assert (forall ((x d)) (mem20 x (tb2t690 (all d1)))))

;; all_def
  (assert
  (forall ((x (tuple21 a c))) (mem10 x (tb2t129 (all (tuple2 a1 c1))))))

;; all_def
  (assert (forall ((x c)) (mem7 x (tb2t132 (all c1)))))

;; all_def
  (assert
  (forall ((x (set (tuple21 a b)))) (mem4 x
  (tb2t10 (all (set1 (tuple2 a1 b1)))))))

;; all_def
  (assert
  (forall ((x (tuple21 a b))) (mem3 x (tb2t11 (all (tuple2 a1 b1))))))

;; all_def
  (assert (forall ((x b)) (mem2 x (tb2t12 (all b1)))))

;; all_def
  (assert (forall ((x a)) (mem1 x (tb2t1 (all a1)))))

;; all_def
  (assert (forall ((a2 ty)) (forall ((x uni)) (mem a2 x (all a2)))))

(declare-fun union1 (ty uni uni) uni)

;; union_sort
  (assert
  (forall ((a2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 a2) (union1 a2 x x1)))))

;; mem_union
  (assert
  (forall ((s (set (tuple21 (tuple21 a c) (tuple21 b d))))
  (t (set (tuple21 (tuple21 a c) (tuple21 b d)))) (x (tuple21 (tuple21 a c)
  (tuple21 b d))))
  (= (mem24 x
  (tb2t686
  (union1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb686 s) (t2tb686 t))))
  (or (mem24 x s) (mem24 x t)))))

;; mem_union
  (assert
  (forall ((s (set (tuple21 b d))) (t (set (tuple21 b d))) (x (tuple21 b d)))
  (= (mem23 x (tb2t687 (union1 (tuple2 b1 d1) (t2tb687 s) (t2tb687 t))))
  (or (mem23 x s) (mem23 x t)))))

;; mem_union
  (assert
  (forall ((s (set (set (tuple21 c d)))) (t (set (set (tuple21 c d))))
  (x (set (tuple21 c d))))
  (= (mem22 x
  (tb2t688 (union1 (set1 (tuple2 c1 d1)) (t2tb688 s) (t2tb688 t))))
  (or (mem22 x s) (mem22 x t)))))

;; mem_union
  (assert
  (forall ((s (set (tuple21 c d))) (t (set (tuple21 c d))) (x (tuple21 c d)))
  (= (mem21 x (tb2t689 (union1 (tuple2 c1 d1) (t2tb689 s) (t2tb689 t))))
  (or (mem21 x s) (mem21 x t)))))

;; mem_union
  (assert
  (forall ((s (set d)) (t (set d)) (x d))
  (= (mem20 x (tb2t690 (union1 d1 (t2tb690 s) (t2tb690 t))))
  (or (mem20 x s) (mem20 x t)))))

;; mem_union
  (assert
  (forall ((s (set (tuple21 a c))) (t (set (tuple21 a c))) (x (tuple21 a c)))
  (= (mem10 x (tb2t129 (union1 (tuple2 a1 c1) (t2tb129 s) (t2tb129 t))))
  (or (mem10 x s) (mem10 x t)))))

;; mem_union
  (assert
  (forall ((s (set c)) (t (set c)) (x c))
  (= (mem7 x (tb2t132 (union1 c1 (t2tb132 s) (t2tb132 t))))
  (or (mem7 x s) (mem7 x t)))))

;; mem_union
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set (set (tuple21 a b))))
  (x (set (tuple21 a b))))
  (= (mem4 x (tb2t10 (union1 (set1 (tuple2 a1 b1)) (t2tb10 s) (t2tb10 t))))
  (or (mem4 x s) (mem4 x t)))))

;; mem_union
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (tuple21 a b))) (x (tuple21 a b)))
  (= (mem3 x (tb2t11 (union1 (tuple2 a1 b1) (t2tb11 s) (t2tb11 t))))
  (or (mem3 x s) (mem3 x t)))))

;; mem_union
  (assert
  (forall ((s (set b)) (t (set b)) (x b))
  (= (mem2 x (tb2t12 (union1 b1 (t2tb12 s) (t2tb12 t))))
  (or (mem2 x s) (mem2 x t)))))

;; mem_union
  (assert
  (forall ((s (set a)) (t (set a)) (x a))
  (= (mem1 x (tb2t1 (union1 a1 (t2tb1 s) (t2tb1 t))))
  (or (mem1 x s) (mem1 x t)))))

;; mem_union
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t uni) (x uni))
  (= (mem a2 x (union1 a2 s t)) (or (mem a2 x s) (mem a2 x t))))))

(declare-fun inter (ty uni uni) uni)

;; inter_sort
  (assert
  (forall ((a2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 a2) (inter a2 x x1)))))

;; mem_inter
  (assert
  (forall ((s (set (tuple21 (tuple21 a c) (tuple21 b d))))
  (t (set (tuple21 (tuple21 a c) (tuple21 b d)))) (x (tuple21 (tuple21 a c)
  (tuple21 b d))))
  (= (mem24 x
  (tb2t686
  (inter (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb686 s) (t2tb686 t))))
  (and (mem24 x s) (mem24 x t)))))

;; mem_inter
  (assert
  (forall ((s (set (tuple21 b d))) (t (set (tuple21 b d))) (x (tuple21 b d)))
  (= (mem23 x (tb2t687 (inter (tuple2 b1 d1) (t2tb687 s) (t2tb687 t))))
  (and (mem23 x s) (mem23 x t)))))

;; mem_inter
  (assert
  (forall ((s (set (set (tuple21 c d)))) (t (set (set (tuple21 c d))))
  (x (set (tuple21 c d))))
  (= (mem22 x
  (tb2t688 (inter (set1 (tuple2 c1 d1)) (t2tb688 s) (t2tb688 t))))
  (and (mem22 x s) (mem22 x t)))))

;; mem_inter
  (assert
  (forall ((s (set (tuple21 c d))) (t (set (tuple21 c d))) (x (tuple21 c d)))
  (= (mem21 x (tb2t689 (inter (tuple2 c1 d1) (t2tb689 s) (t2tb689 t))))
  (and (mem21 x s) (mem21 x t)))))

;; mem_inter
  (assert
  (forall ((s (set d)) (t (set d)) (x d))
  (= (mem20 x (tb2t690 (inter d1 (t2tb690 s) (t2tb690 t))))
  (and (mem20 x s) (mem20 x t)))))

;; mem_inter
  (assert
  (forall ((s (set (tuple21 a c))) (t (set (tuple21 a c))) (x (tuple21 a c)))
  (= (mem10 x (tb2t129 (inter (tuple2 a1 c1) (t2tb129 s) (t2tb129 t))))
  (and (mem10 x s) (mem10 x t)))))

;; mem_inter
  (assert
  (forall ((s (set c)) (t (set c)) (x c))
  (= (mem7 x (tb2t132 (inter c1 (t2tb132 s) (t2tb132 t))))
  (and (mem7 x s) (mem7 x t)))))

;; mem_inter
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set (set (tuple21 a b))))
  (x (set (tuple21 a b))))
  (= (mem4 x (tb2t10 (inter (set1 (tuple2 a1 b1)) (t2tb10 s) (t2tb10 t))))
  (and (mem4 x s) (mem4 x t)))))

;; mem_inter
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (tuple21 a b))) (x (tuple21 a b)))
  (= (mem3 x (tb2t11 (inter (tuple2 a1 b1) (t2tb11 s) (t2tb11 t))))
  (and (mem3 x s) (mem3 x t)))))

;; mem_inter
  (assert
  (forall ((s (set b)) (t (set b)) (x b))
  (= (mem2 x (tb2t12 (inter b1 (t2tb12 s) (t2tb12 t))))
  (and (mem2 x s) (mem2 x t)))))

;; mem_inter
  (assert
  (forall ((s (set a)) (t (set a)) (x a))
  (= (mem1 x (tb2t1 (inter a1 (t2tb1 s) (t2tb1 t))))
  (and (mem1 x s) (mem1 x t)))))

;; mem_inter
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t uni) (x uni))
  (= (mem a2 x (inter a2 s t)) (and (mem a2 x s) (mem a2 x t))))))

(declare-fun diff (ty uni uni) uni)

;; diff_sort
  (assert
  (forall ((a2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 a2) (diff a2 x x1)))))

;; mem_diff
  (assert
  (forall ((s (set (tuple21 (tuple21 a c) (tuple21 b d))))
  (t (set (tuple21 (tuple21 a c) (tuple21 b d)))) (x (tuple21 (tuple21 a c)
  (tuple21 b d))))
  (= (mem24 x
  (tb2t686
  (diff (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb686 s) (t2tb686 t))))
  (and (mem24 x s) (not (mem24 x t))))))

;; mem_diff
  (assert
  (forall ((s (set (tuple21 b d))) (t (set (tuple21 b d))) (x (tuple21 b d)))
  (= (mem23 x (tb2t687 (diff (tuple2 b1 d1) (t2tb687 s) (t2tb687 t))))
  (and (mem23 x s) (not (mem23 x t))))))

;; mem_diff
  (assert
  (forall ((s (set (set (tuple21 c d)))) (t (set (set (tuple21 c d))))
  (x (set (tuple21 c d))))
  (= (mem22 x (tb2t688 (diff (set1 (tuple2 c1 d1)) (t2tb688 s) (t2tb688 t))))
  (and (mem22 x s) (not (mem22 x t))))))

;; mem_diff
  (assert
  (forall ((s (set (tuple21 c d))) (t (set (tuple21 c d))) (x (tuple21 c d)))
  (= (mem21 x (tb2t689 (diff (tuple2 c1 d1) (t2tb689 s) (t2tb689 t))))
  (and (mem21 x s) (not (mem21 x t))))))

;; mem_diff
  (assert
  (forall ((s (set d)) (t (set d)) (x d))
  (= (mem20 x (tb2t690 (diff d1 (t2tb690 s) (t2tb690 t))))
  (and (mem20 x s) (not (mem20 x t))))))

;; mem_diff
  (assert
  (forall ((s (set (tuple21 a c))) (t (set (tuple21 a c))) (x (tuple21 a c)))
  (= (mem10 x (tb2t129 (diff (tuple2 a1 c1) (t2tb129 s) (t2tb129 t))))
  (and (mem10 x s) (not (mem10 x t))))))

;; mem_diff
  (assert
  (forall ((s (set c)) (t (set c)) (x c))
  (= (mem7 x (tb2t132 (diff c1 (t2tb132 s) (t2tb132 t))))
  (and (mem7 x s) (not (mem7 x t))))))

;; mem_diff
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set (set (tuple21 a b))))
  (x (set (tuple21 a b))))
  (= (mem4 x (tb2t10 (diff (set1 (tuple2 a1 b1)) (t2tb10 s) (t2tb10 t))))
  (and (mem4 x s) (not (mem4 x t))))))

;; mem_diff
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (tuple21 a b))) (x (tuple21 a b)))
  (= (mem3 x (tb2t11 (diff (tuple2 a1 b1) (t2tb11 s) (t2tb11 t))))
  (and (mem3 x s) (not (mem3 x t))))))

;; mem_diff
  (assert
  (forall ((s (set b)) (t (set b)) (x b))
  (= (mem2 x (tb2t12 (diff b1 (t2tb12 s) (t2tb12 t))))
  (and (mem2 x s) (not (mem2 x t))))))

;; mem_diff
  (assert
  (forall ((s (set a)) (t (set a)) (x a))
  (= (mem1 x (tb2t1 (diff a1 (t2tb1 s) (t2tb1 t))))
  (and (mem1 x s) (not (mem1 x t))))))

;; mem_diff
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t uni) (x uni))
  (= (mem a2 x (diff a2 s t)) (and (mem a2 x s) (not (mem a2 x t)))))))

(declare-fun Tuple2 (ty ty uni uni) uni)

;; Tuple2_sort
  (assert
  (forall ((a2 ty) (a3 ty))
  (forall ((x uni) (x1 uni)) (sort (tuple2 a3 a2) (Tuple2 a3 a2 x x1)))))

(declare-fun Tuple2_proj_1 (ty ty uni) uni)

;; Tuple2_proj_1_sort
  (assert
  (forall ((a2 ty) (a3 ty))
  (forall ((x uni)) (sort a3 (Tuple2_proj_1 a3 a2 x)))))

;; Tuple2_proj_1_def
  (assert
  (forall ((a2 ty) (a3 ty))
  (forall ((u uni) (u1 uni))
  (=> (sort a3 u) (= (Tuple2_proj_1 a3 a2 (Tuple2 a3 a2 u u1)) u)))))

(declare-fun Tuple2_proj_2 (ty ty uni) uni)

;; Tuple2_proj_2_sort
  (assert
  (forall ((a2 ty) (a3 ty))
  (forall ((x uni)) (sort a2 (Tuple2_proj_2 a3 a2 x)))))

;; Tuple2_proj_2_def
  (assert
  (forall ((a2 ty) (a3 ty))
  (forall ((u uni) (u1 uni))
  (=> (sort a2 u1) (= (Tuple2_proj_2 a3 a2 (Tuple2 a3 a2 u u1)) u1)))))

;; tuple2_inversion
  (assert
  (forall ((a2 ty) (a3 ty))
  (forall ((u uni))
  (=> (sort (tuple2 a3 a2) u)
  (= u (Tuple2 a3 a2 (Tuple2_proj_1 a3 a2 u) (Tuple2_proj_2 a3 a2 u)))))))

(declare-fun times (ty ty uni uni) uni)

;; times_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (tuple2 a2 b2)) (times b2 a2 x x1)))))

(declare-fun times2 ((set a) (set b)) (set (tuple21 a b)))

(declare-fun times4 ((set a) (set c)) (set (tuple21 a c)))

(declare-fun times8 ((set c) (set d)) (set (tuple21 c d)))

(declare-fun times9 ((set (tuple21 a c)) (set (tuple21 b
  d))) (set (tuple21 (tuple21 a c) (tuple21 b d))))

(declare-fun times10 ((set b) (set d)) (set (tuple21 b d)))

;; mem_times
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set (tuple21 (tuple21 a c) (tuple21 b d)))) (x uni)
  (y (tuple21 (tuple21 a c) (tuple21 b d))))
  (= (mem (tuple2 a2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
  (Tuple2 a2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) x (t2tb691 y))
  (times (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) a2 s (t2tb686 t)))
  (and (mem a2 x s) (mem24 y t))))))

;; mem_times
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set (tuple21 b d))) (x uni) (y (tuple21 b d)))
  (= (mem (tuple2 a2 (tuple2 b1 d1)) (Tuple2 a2 (tuple2 b1 d1) x (t2tb692 y))
  (times (tuple2 b1 d1) a2 s (t2tb687 t))) (and (mem a2 x s) (mem23 y t))))))

;; mem_times
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set (set (tuple21 c d)))) (x uni) (y (set (tuple21 c
  d))))
  (= (mem (tuple2 a2 (set1 (tuple2 c1 d1)))
  (Tuple2 a2 (set1 (tuple2 c1 d1)) x (t2tb689 y))
  (times (set1 (tuple2 c1 d1)) a2 s (t2tb688 t)))
  (and (mem a2 x s) (mem22 y t))))))

;; mem_times
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set (tuple21 c d))) (x uni) (y (tuple21 c d)))
  (= (mem (tuple2 a2 (tuple2 c1 d1)) (Tuple2 a2 (tuple2 c1 d1) x (t2tb693 y))
  (times (tuple2 c1 d1) a2 s (t2tb689 t))) (and (mem a2 x s) (mem21 y t))))))

;; mem_times
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set d)) (x uni) (y d))
  (= (mem (tuple2 a2 d1) (Tuple2 a2 d1 x (t2tb694 y))
  (times d1 a2 s (t2tb690 t))) (and (mem a2 x s) (mem20 y t))))))

;; mem_times
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set (tuple21 a c))) (x uni) (y (tuple21 a c)))
  (= (mem (tuple2 a2 (tuple2 a1 c1)) (Tuple2 a2 (tuple2 a1 c1) x (t2tb133 y))
  (times (tuple2 a1 c1) a2 s (t2tb129 t))) (and (mem a2 x s) (mem10 y t))))))

;; mem_times
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set c)) (x uni) (y c))
  (= (mem (tuple2 a2 c1) (Tuple2 a2 c1 x (t2tb135 y))
  (times c1 a2 s (t2tb132 t))) (and (mem a2 x s) (mem7 y t))))))

;; mem_times
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set (set (tuple21 a b)))) (x uni) (y (set (tuple21 a
  b))))
  (= (mem (tuple2 a2 (set1 (tuple2 a1 b1)))
  (Tuple2 a2 (set1 (tuple2 a1 b1)) x (t2tb11 y))
  (times (set1 (tuple2 a1 b1)) a2 s (t2tb10 t)))
  (and (mem a2 x s) (mem4 y t))))))

;; mem_times
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set (tuple21 a b))) (x uni) (y (tuple21 a b)))
  (= (mem (tuple2 a2 (tuple2 a1 b1)) (Tuple2 a2 (tuple2 a1 b1) x (t2tb13 y))
  (times (tuple2 a1 b1) a2 s (t2tb11 t))) (and (mem a2 x s) (mem3 y t))))))

;; mem_times
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set b)) (x uni) (y b))
  (= (mem (tuple2 a2 b1) (Tuple2 a2 b1 x (t2tb14 y))
  (times b1 a2 s (t2tb12 t))) (and (mem a2 x s) (mem2 y t))))))

;; mem_times
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set a)) (x uni) (y a))
  (= (mem (tuple2 a2 a1) (Tuple2 a2 a1 x (t2tb2 y))
  (times a1 a2 s (t2tb1 t))) (and (mem a2 x s) (mem1 y t))))))

(declare-fun t2tb5203 ((tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  (tuple21 (tuple21 a c) (tuple21 b d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  (tuple21 (tuple21 a c) (tuple21 b d))))) (sort
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))
  (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))) (t2tb5203 x))))

(declare-fun tb2t5203 (uni) (tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  (tuple21 (tuple21 a c) (tuple21 b d))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  (tuple21 (tuple21 a c) (tuple21 b d)))))
  (! (= (tb2t5203 (t2tb5203 i)) i) :pattern ((t2tb5203 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))
     (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))) j)
     (= (t2tb5203 (tb2t5203 j)) j)) :pattern ((t2tb5203 (tb2t5203 j))) )))

(declare-fun t2tb5204 ((set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  (tuple21 (tuple21 a c) (tuple21 b d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  (tuple21 (tuple21 a c) (tuple21 b d)))))) (sort
  (set1
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))
  (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))) (t2tb5204 x))))

(declare-fun tb2t5204 (uni) (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b
  d)) (tuple21 (tuple21 a c) (tuple21 b d)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  (tuple21 (tuple21 a c) (tuple21 b d))))))
  (! (= (tb2t5204 (t2tb5204 i)) i) :pattern ((t2tb5204 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))
     (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))) j)
     (= (t2tb5204 (tb2t5204 j)) j)) :pattern ((t2tb5204 (tb2t5204 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 (tuple21 a c) (tuple21 b d))))
  (t (set (tuple21 (tuple21 a c) (tuple21 b d)))) (x (tuple21 (tuple21 a c)
  (tuple21 b d))) (y (tuple21 (tuple21 a c) (tuple21 b d))))
  (= (mem
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))
  (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))
  (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb691 x) (t2tb691 y))
  (times (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))
  (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb686 s) (t2tb686 t)))
  (and (mem24 x s) (mem24 y t)))))

(declare-fun t2tb5205 ((set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  (tuple21 b d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) (tuple21 b
  d))))) (sort
  (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 b1 d1)))
  (t2tb5205 x))))

(declare-fun tb2t5205 (uni) (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b
  d)) (tuple21 b d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) (tuple21 b
  d))))) (! (= (tb2t5205 (t2tb5205 i)) i) :pattern ((t2tb5205 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 b1 d1))) j)
     (= (t2tb5205 (tb2t5205 j)) j)) :pattern ((t2tb5205 (tb2t5205 j))) )))

(declare-fun t2tb5206 ((tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  (tuple21 b d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) (tuple21 b d))))
  (sort (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 b1 d1))
  (t2tb5206 x))))

(declare-fun tb2t5206 (uni) (tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  (tuple21 b d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) (tuple21 b d))))
  (! (= (tb2t5206 (t2tb5206 i)) i) :pattern ((t2tb5206 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 b1 d1))
     j) (= (t2tb5206 (tb2t5206 j)) j)) :pattern ((t2tb5206 (tb2t5206 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 (tuple21 a c) (tuple21 b d)))) (t (set (tuple21 b
  d))) (x (tuple21 (tuple21 a c) (tuple21 b d))) (y (tuple21 b d)))
  (= (mem (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 b1 d1))
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 b1 d1) (t2tb691 x)
  (t2tb692 y))
  (times (tuple2 b1 d1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb686 s)
  (t2tb687 t))) (and (mem24 x s) (mem23 y t)))))

(declare-fun t2tb5207 ((set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  (set (tuple21 c d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  (set (tuple21 c d)))))) (sort
  (set1
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (set1 (tuple2 c1 d1))))
  (t2tb5207 x))))

(declare-fun tb2t5207 (uni) (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b
  d)) (set (tuple21 c d)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  (set (tuple21 c d))))))
  (! (= (tb2t5207 (t2tb5207 i)) i) :pattern ((t2tb5207 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (set1 (tuple2 c1 d1))))
     j) (= (t2tb5207 (tb2t5207 j)) j)) :pattern ((t2tb5207 (tb2t5207 j))) )))

(declare-fun t2tb5208 ((tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  (set (tuple21 c d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) (set (tuple21 c
  d))))) (sort
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (set1 (tuple2 c1 d1)))
  (t2tb5208 x))))

(declare-fun tb2t5208 (uni) (tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  (set (tuple21 c d))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) (set (tuple21 c
  d))))) (! (= (tb2t5208 (t2tb5208 i)) i) :pattern ((t2tb5208 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (set1 (tuple2 c1 d1))) j)
     (= (t2tb5208 (tb2t5208 j)) j)) :pattern ((t2tb5208 (tb2t5208 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 (tuple21 a c) (tuple21 b d))))
  (t (set (set (tuple21 c d)))) (x (tuple21 (tuple21 a c) (tuple21 b d)))
  (y (set (tuple21 c d))))
  (= (mem
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (set1 (tuple2 c1 d1)))
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (set1 (tuple2 c1 d1))
  (t2tb691 x) (t2tb689 y))
  (times (set1 (tuple2 c1 d1)) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))
  (t2tb686 s) (t2tb688 t))) (and (mem24 x s) (mem22 y t)))))

(declare-fun t2tb5209 ((set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  (tuple21 c d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) (tuple21 c
  d))))) (sort
  (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 c1 d1)))
  (t2tb5209 x))))

(declare-fun tb2t5209 (uni) (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b
  d)) (tuple21 c d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) (tuple21 c
  d))))) (! (= (tb2t5209 (t2tb5209 i)) i) :pattern ((t2tb5209 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 c1 d1))) j)
     (= (t2tb5209 (tb2t5209 j)) j)) :pattern ((t2tb5209 (tb2t5209 j))) )))

(declare-fun t2tb5210 ((tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  (tuple21 c d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) (tuple21 c d))))
  (sort (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 c1 d1))
  (t2tb5210 x))))

(declare-fun tb2t5210 (uni) (tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  (tuple21 c d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) (tuple21 c d))))
  (! (= (tb2t5210 (t2tb5210 i)) i) :pattern ((t2tb5210 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 c1 d1))
     j) (= (t2tb5210 (tb2t5210 j)) j)) :pattern ((t2tb5210 (tb2t5210 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 (tuple21 a c) (tuple21 b d)))) (t (set (tuple21 c
  d))) (x (tuple21 (tuple21 a c) (tuple21 b d))) (y (tuple21 c d)))
  (= (mem (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 c1 d1))
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 c1 d1) (t2tb691 x)
  (t2tb693 y))
  (times (tuple2 c1 d1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb686 s)
  (t2tb689 t))) (and (mem24 x s) (mem21 y t)))))

(declare-fun t2tb5211 ((set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) d)))) (sort
  (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) d1)) (t2tb5211 x))))

(declare-fun tb2t5211 (uni) (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b
  d)) d)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) d))))
  (! (= (tb2t5211 (t2tb5211 i)) i) :pattern ((t2tb5211 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) d1)) j)
     (= (t2tb5211 (tb2t5211 j)) j)) :pattern ((t2tb5211 (tb2t5211 j))) )))

(declare-fun t2tb5212 ((tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  d)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) d))) (sort
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) d1) (t2tb5212 x))))

(declare-fun tb2t5212 (uni) (tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  d))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) d)))
  (! (= (tb2t5212 (t2tb5212 i)) i) :pattern ((t2tb5212 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) d1) j)
     (= (t2tb5212 (tb2t5212 j)) j)) :pattern ((t2tb5212 (tb2t5212 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 (tuple21 a c) (tuple21 b d)))) (t (set d))
  (x (tuple21 (tuple21 a c) (tuple21 b d))) (y d))
  (= (mem (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) d1)
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) d1 (t2tb691 x) (t2tb694 y))
  (times d1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb686 s) (t2tb690 t)))
  (and (mem24 x s) (mem20 y t)))))

(declare-fun t2tb5213 ((set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  (tuple21 a c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) (tuple21 a
  c))))) (sort
  (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 a1 c1)))
  (t2tb5213 x))))

(declare-fun tb2t5213 (uni) (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b
  d)) (tuple21 a c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) (tuple21 a
  c))))) (! (= (tb2t5213 (t2tb5213 i)) i) :pattern ((t2tb5213 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 a1 c1))) j)
     (= (t2tb5213 (tb2t5213 j)) j)) :pattern ((t2tb5213 (tb2t5213 j))) )))

(declare-fun t2tb5214 ((tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  (tuple21 a c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) (tuple21 a c))))
  (sort (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 a1 c1))
  (t2tb5214 x))))

(declare-fun tb2t5214 (uni) (tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  (tuple21 a c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) (tuple21 a c))))
  (! (= (tb2t5214 (t2tb5214 i)) i) :pattern ((t2tb5214 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 a1 c1))
     j) (= (t2tb5214 (tb2t5214 j)) j)) :pattern ((t2tb5214 (tb2t5214 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 (tuple21 a c) (tuple21 b d)))) (t (set (tuple21 a
  c))) (x (tuple21 (tuple21 a c) (tuple21 b d))) (y (tuple21 a c)))
  (= (mem (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 a1 c1))
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 a1 c1) (t2tb691 x)
  (t2tb133 y))
  (times (tuple2 a1 c1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb686 s)
  (t2tb129 t))) (and (mem24 x s) (mem10 y t)))))

(declare-fun t2tb5215 ((set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) c)))) (sort
  (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) c1)) (t2tb5215 x))))

(declare-fun tb2t5215 (uni) (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b
  d)) c)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) c))))
  (! (= (tb2t5215 (t2tb5215 i)) i) :pattern ((t2tb5215 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) c1)) j)
     (= (t2tb5215 (tb2t5215 j)) j)) :pattern ((t2tb5215 (tb2t5215 j))) )))

(declare-fun t2tb5216 ((tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  c)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) c))) (sort
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) c1) (t2tb5216 x))))

(declare-fun tb2t5216 (uni) (tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  c))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) c)))
  (! (= (tb2t5216 (t2tb5216 i)) i) :pattern ((t2tb5216 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) c1) j)
     (= (t2tb5216 (tb2t5216 j)) j)) :pattern ((t2tb5216 (tb2t5216 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 (tuple21 a c) (tuple21 b d)))) (t (set c))
  (x (tuple21 (tuple21 a c) (tuple21 b d))) (y c))
  (= (mem (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) c1)
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) c1 (t2tb691 x) (t2tb135 y))
  (times c1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb686 s) (t2tb132 t)))
  (and (mem24 x s) (mem7 y t)))))

(declare-fun t2tb5217 ((set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  (set (tuple21 a b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  (set (tuple21 a b)))))) (sort
  (set1
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (set1 (tuple2 a1 b1))))
  (t2tb5217 x))))

(declare-fun tb2t5217 (uni) (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b
  d)) (set (tuple21 a b)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  (set (tuple21 a b))))))
  (! (= (tb2t5217 (t2tb5217 i)) i) :pattern ((t2tb5217 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (set1 (tuple2 a1 b1))))
     j) (= (t2tb5217 (tb2t5217 j)) j)) :pattern ((t2tb5217 (tb2t5217 j))) )))

(declare-fun t2tb5218 ((tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  (set (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) (set (tuple21 a
  b))))) (sort
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (set1 (tuple2 a1 b1)))
  (t2tb5218 x))))

(declare-fun tb2t5218 (uni) (tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  (set (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) (set (tuple21 a
  b))))) (! (= (tb2t5218 (t2tb5218 i)) i) :pattern ((t2tb5218 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (set1 (tuple2 a1 b1))) j)
     (= (t2tb5218 (tb2t5218 j)) j)) :pattern ((t2tb5218 (tb2t5218 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 (tuple21 a c) (tuple21 b d))))
  (t (set (set (tuple21 a b)))) (x (tuple21 (tuple21 a c) (tuple21 b d)))
  (y (set (tuple21 a b))))
  (= (mem
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (set1 (tuple2 a1 b1)))
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (set1 (tuple2 a1 b1))
  (t2tb691 x) (t2tb11 y))
  (times (set1 (tuple2 a1 b1)) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))
  (t2tb686 s) (t2tb10 t))) (and (mem24 x s) (mem4 y t)))))

(declare-fun t2tb5219 ((tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  (tuple21 a b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) (tuple21 a b))))
  (sort (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 a1 b1))
  (t2tb5219 x))))

(declare-fun tb2t5219 (uni) (tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  (tuple21 a b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) (tuple21 a b))))
  (! (= (tb2t5219 (t2tb5219 i)) i) :pattern ((t2tb5219 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 a1 b1))
     j) (= (t2tb5219 (tb2t5219 j)) j)) :pattern ((t2tb5219 (tb2t5219 j))) )))

(declare-fun t2tb5220 ((set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) (tuple21 a
  b))))) (sort
  (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 a1 b1)))
  (t2tb5220 x))))

(declare-fun tb2t5220 (uni) (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b
  d)) (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) (tuple21 a
  b))))) (! (= (tb2t5220 (t2tb5220 i)) i) :pattern ((t2tb5220 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 a1 b1))) j)
     (= (t2tb5220 (tb2t5220 j)) j)) :pattern ((t2tb5220 (tb2t5220 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 (tuple21 a c) (tuple21 b d)))) (t (set (tuple21 a
  b))) (x (tuple21 (tuple21 a c) (tuple21 b d))) (y (tuple21 a b)))
  (= (mem (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 a1 b1))
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 a1 b1) (t2tb691 x)
  (t2tb13 y))
  (times (tuple2 a1 b1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb686 s)
  (t2tb11 t))) (and (mem24 x s) (mem3 y t)))))

(declare-fun t2tb5221 ((set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) b)))) (sort
  (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) b1)) (t2tb5221 x))))

(declare-fun tb2t5221 (uni) (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b
  d)) b)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) b))))
  (! (= (tb2t5221 (t2tb5221 i)) i) :pattern ((t2tb5221 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) b1)) j)
     (= (t2tb5221 (tb2t5221 j)) j)) :pattern ((t2tb5221 (tb2t5221 j))) )))

(declare-fun t2tb5222 ((tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  b)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) b))) (sort
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) b1) (t2tb5222 x))))

(declare-fun tb2t5222 (uni) (tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  b))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) b)))
  (! (= (tb2t5222 (t2tb5222 i)) i) :pattern ((t2tb5222 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) b1) j)
     (= (t2tb5222 (tb2t5222 j)) j)) :pattern ((t2tb5222 (tb2t5222 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 (tuple21 a c) (tuple21 b d)))) (t (set b))
  (x (tuple21 (tuple21 a c) (tuple21 b d))) (y b))
  (= (mem (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) b1)
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) b1 (t2tb691 x) (t2tb14 y))
  (times b1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb686 s) (t2tb12 t)))
  (and (mem24 x s) (mem2 y t)))))

(declare-fun t2tb5223 ((set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) a)))) (sort
  (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) a1)) (t2tb5223 x))))

(declare-fun tb2t5223 (uni) (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b
  d)) a)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) a))))
  (! (= (tb2t5223 (t2tb5223 i)) i) :pattern ((t2tb5223 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) a1)) j)
     (= (t2tb5223 (tb2t5223 j)) j)) :pattern ((t2tb5223 (tb2t5223 j))) )))

(declare-fun t2tb5224 ((tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  a)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) a))) (sort
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) a1) (t2tb5224 x))))

(declare-fun tb2t5224 (uni) (tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  a))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) a)))
  (! (= (tb2t5224 (t2tb5224 i)) i) :pattern ((t2tb5224 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) a1) j)
     (= (t2tb5224 (tb2t5224 j)) j)) :pattern ((t2tb5224 (tb2t5224 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 (tuple21 a c) (tuple21 b d)))) (t (set a))
  (x (tuple21 (tuple21 a c) (tuple21 b d))) (y a))
  (= (mem (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) a1)
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) a1 (t2tb691 x) (t2tb2 y))
  (times a1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb686 s) (t2tb1 t)))
  (and (mem24 x s) (mem1 y t)))))

;; mem_times
  (assert
  (forall ((b2 ty))
  (forall ((s (set (tuple21 (tuple21 a c) (tuple21 b d)))) (t uni)
  (x (tuple21 (tuple21 a c) (tuple21 b d))) (y uni))
  (= (mem (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) b2)
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) b2 (t2tb691 x) y)
  (times b2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb686 s) t))
  (and (mem24 x s) (mem b2 y t))))))

(declare-fun t2tb5225 ((set (tuple21 (tuple21 b d) (tuple21 (tuple21 a c)
  (tuple21 b d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b d) (tuple21 (tuple21 a c) (tuple21 b
  d)))))) (sort
  (set1 (tuple2 (tuple2 b1 d1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))))
  (t2tb5225 x))))

(declare-fun tb2t5225 (uni) (set (tuple21 (tuple21 b d) (tuple21 (tuple21 a
  c) (tuple21 b d)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b d) (tuple21 (tuple21 a c) (tuple21 b
  d)))))) (! (= (tb2t5225 (t2tb5225 i)) i) :pattern ((t2tb5225 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 b1 d1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))) j)
     (= (t2tb5225 (tb2t5225 j)) j)) :pattern ((t2tb5225 (tb2t5225 j))) )))

(declare-fun t2tb5226 ((tuple21 (tuple21 b d) (tuple21 (tuple21 a c)
  (tuple21 b d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b d) (tuple21 (tuple21 a c) (tuple21 b d)))))
  (sort (tuple2 (tuple2 b1 d1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
  (t2tb5226 x))))

(declare-fun tb2t5226 (uni) (tuple21 (tuple21 b d) (tuple21 (tuple21 a c)
  (tuple21 b d))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b d) (tuple21 (tuple21 a c) (tuple21 b d)))))
  (! (= (tb2t5226 (t2tb5226 i)) i) :pattern ((t2tb5226 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 d1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
     j) (= (t2tb5226 (tb2t5226 j)) j)) :pattern ((t2tb5226 (tb2t5226 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 b d))) (t (set (tuple21 (tuple21 a c) (tuple21 b
  d)))) (x (tuple21 b d)) (y (tuple21 (tuple21 a c) (tuple21 b d))))
  (= (mem (tuple2 (tuple2 b1 d1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
  (Tuple2 (tuple2 b1 d1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb692 x)
  (t2tb691 y))
  (times (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 b1 d1) (t2tb687 s)
  (t2tb686 t))) (and (mem23 x s) (mem24 y t)))))

(declare-fun t2tb5227 ((set (tuple21 (tuple21 b d) (tuple21 b d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b d) (tuple21 b d))))) (sort
  (set1 (tuple2 (tuple2 b1 d1) (tuple2 b1 d1))) (t2tb5227 x))))

(declare-fun tb2t5227 (uni) (set (tuple21 (tuple21 b d) (tuple21 b d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b d) (tuple21 b d)))))
  (! (= (tb2t5227 (t2tb5227 i)) i) :pattern ((t2tb5227 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 d1) (tuple2 b1 d1))) j)
     (= (t2tb5227 (tb2t5227 j)) j)) :pattern ((t2tb5227 (tb2t5227 j))) )))

(declare-fun t2tb5228 ((tuple21 (tuple21 b d) (tuple21 b d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b d) (tuple21 b d)))) (sort
  (tuple2 (tuple2 b1 d1) (tuple2 b1 d1)) (t2tb5228 x))))

(declare-fun tb2t5228 (uni) (tuple21 (tuple21 b d) (tuple21 b d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b d) (tuple21 b d))))
  (! (= (tb2t5228 (t2tb5228 i)) i) :pattern ((t2tb5228 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 d1) (tuple2 b1 d1)) j)
     (= (t2tb5228 (tb2t5228 j)) j)) :pattern ((t2tb5228 (tb2t5228 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 b d))) (t (set (tuple21 b d))) (x (tuple21 b d))
  (y (tuple21 b d)))
  (= (mem (tuple2 (tuple2 b1 d1) (tuple2 b1 d1))
  (Tuple2 (tuple2 b1 d1) (tuple2 b1 d1) (t2tb692 x) (t2tb692 y))
  (times (tuple2 b1 d1) (tuple2 b1 d1) (t2tb687 s) (t2tb687 t)))
  (and (mem23 x s) (mem23 y t)))))

(declare-fun t2tb5229 ((set (tuple21 (tuple21 b d) (set (tuple21 c
  d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b d) (set (tuple21 c d)))))) (sort
  (set1 (tuple2 (tuple2 b1 d1) (set1 (tuple2 c1 d1)))) (t2tb5229 x))))

(declare-fun tb2t5229 (uni) (set (tuple21 (tuple21 b d) (set (tuple21 c
  d)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b d) (set (tuple21 c d))))))
  (! (= (tb2t5229 (t2tb5229 i)) i) :pattern ((t2tb5229 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 d1) (set1 (tuple2 c1 d1)))) j)
     (= (t2tb5229 (tb2t5229 j)) j)) :pattern ((t2tb5229 (tb2t5229 j))) )))

(declare-fun t2tb5230 ((tuple21 (tuple21 b d) (set (tuple21 c d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b d) (set (tuple21 c d))))) (sort
  (tuple2 (tuple2 b1 d1) (set1 (tuple2 c1 d1))) (t2tb5230 x))))

(declare-fun tb2t5230 (uni) (tuple21 (tuple21 b d) (set (tuple21 c d))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b d) (set (tuple21 c d)))))
  (! (= (tb2t5230 (t2tb5230 i)) i) :pattern ((t2tb5230 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 d1) (set1 (tuple2 c1 d1))) j)
     (= (t2tb5230 (tb2t5230 j)) j)) :pattern ((t2tb5230 (tb2t5230 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 b d))) (t (set (set (tuple21 c d))))
  (x (tuple21 b d)) (y (set (tuple21 c d))))
  (= (mem (tuple2 (tuple2 b1 d1) (set1 (tuple2 c1 d1)))
  (Tuple2 (tuple2 b1 d1) (set1 (tuple2 c1 d1)) (t2tb692 x) (t2tb689 y))
  (times (set1 (tuple2 c1 d1)) (tuple2 b1 d1) (t2tb687 s) (t2tb688 t)))
  (and (mem23 x s) (mem22 y t)))))

(declare-fun t2tb5231 ((set (tuple21 (tuple21 b d) (tuple21 c d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b d) (tuple21 c d))))) (sort
  (set1 (tuple2 (tuple2 b1 d1) (tuple2 c1 d1))) (t2tb5231 x))))

(declare-fun tb2t5231 (uni) (set (tuple21 (tuple21 b d) (tuple21 c d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b d) (tuple21 c d)))))
  (! (= (tb2t5231 (t2tb5231 i)) i) :pattern ((t2tb5231 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 d1) (tuple2 c1 d1))) j)
     (= (t2tb5231 (tb2t5231 j)) j)) :pattern ((t2tb5231 (tb2t5231 j))) )))

(declare-fun t2tb5232 ((tuple21 (tuple21 b d) (tuple21 c d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b d) (tuple21 c d)))) (sort
  (tuple2 (tuple2 b1 d1) (tuple2 c1 d1)) (t2tb5232 x))))

(declare-fun tb2t5232 (uni) (tuple21 (tuple21 b d) (tuple21 c d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b d) (tuple21 c d))))
  (! (= (tb2t5232 (t2tb5232 i)) i) :pattern ((t2tb5232 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 d1) (tuple2 c1 d1)) j)
     (= (t2tb5232 (tb2t5232 j)) j)) :pattern ((t2tb5232 (tb2t5232 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 b d))) (t (set (tuple21 c d))) (x (tuple21 b d))
  (y (tuple21 c d)))
  (= (mem (tuple2 (tuple2 b1 d1) (tuple2 c1 d1))
  (Tuple2 (tuple2 b1 d1) (tuple2 c1 d1) (t2tb692 x) (t2tb693 y))
  (times (tuple2 c1 d1) (tuple2 b1 d1) (t2tb687 s) (t2tb689 t)))
  (and (mem23 x s) (mem21 y t)))))

(declare-fun t2tb5233 ((tuple21 (tuple21 b d) d)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b d) d))) (sort (tuple2 (tuple2 b1 d1) d1)
  (t2tb5233 x))))

(declare-fun tb2t5233 (uni) (tuple21 (tuple21 b d) d))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b d) d)))
  (! (= (tb2t5233 (t2tb5233 i)) i) :pattern ((t2tb5233 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 d1) d1) j) (= (t2tb5233 (tb2t5233 j)) j)) :pattern (
  (t2tb5233 (tb2t5233 j))) )))

(declare-fun t2tb5234 ((set (tuple21 (tuple21 b d) d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b d) d)))) (sort
  (set1 (tuple2 (tuple2 b1 d1) d1)) (t2tb5234 x))))

(declare-fun tb2t5234 (uni) (set (tuple21 (tuple21 b d) d)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b d) d))))
  (! (= (tb2t5234 (t2tb5234 i)) i) :pattern ((t2tb5234 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 d1) d1)) j)
     (= (t2tb5234 (tb2t5234 j)) j)) :pattern ((t2tb5234 (tb2t5234 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 b d))) (t (set d)) (x (tuple21 b d)) (y d))
  (= (mem (tuple2 (tuple2 b1 d1) d1)
  (Tuple2 (tuple2 b1 d1) d1 (t2tb692 x) (t2tb694 y))
  (times d1 (tuple2 b1 d1) (t2tb687 s) (t2tb690 t)))
  (and (mem23 x s) (mem20 y t)))))

(declare-fun t2tb755 ((set (tuple21 (tuple21 b d) (tuple21 a c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b d) (tuple21 a c))))) (sort
  (set1 (tuple2 (tuple2 b1 d1) (tuple2 a1 c1))) (t2tb755 x))))

(declare-fun tb2t755 (uni) (set (tuple21 (tuple21 b d) (tuple21 a c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b d) (tuple21 a c)))))
  (! (= (tb2t755 (t2tb755 i)) i) :pattern ((t2tb755 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 d1) (tuple2 a1 c1))) j)
     (= (t2tb755 (tb2t755 j)) j)) :pattern ((t2tb755 (tb2t755 j))) )))

(declare-fun t2tb756 ((tuple21 (tuple21 b d) (tuple21 a c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b d) (tuple21 a c)))) (sort
  (tuple2 (tuple2 b1 d1) (tuple2 a1 c1)) (t2tb756 x))))

(declare-fun tb2t756 (uni) (tuple21 (tuple21 b d) (tuple21 a c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b d) (tuple21 a c))))
  (! (= (tb2t756 (t2tb756 i)) i) :pattern ((t2tb756 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 d1) (tuple2 a1 c1)) j)
     (= (t2tb756 (tb2t756 j)) j)) :pattern ((t2tb756 (tb2t756 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 b d))) (t (set (tuple21 a c))) (x (tuple21 b d))
  (y (tuple21 a c)))
  (= (mem (tuple2 (tuple2 b1 d1) (tuple2 a1 c1))
  (Tuple2 (tuple2 b1 d1) (tuple2 a1 c1) (t2tb692 x) (t2tb133 y))
  (times (tuple2 a1 c1) (tuple2 b1 d1) (t2tb687 s) (t2tb129 t)))
  (and (mem23 x s) (mem10 y t)))))

(declare-fun t2tb5235 ((set (tuple21 (tuple21 b d) c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b d) c)))) (sort
  (set1 (tuple2 (tuple2 b1 d1) c1)) (t2tb5235 x))))

(declare-fun tb2t5235 (uni) (set (tuple21 (tuple21 b d) c)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b d) c))))
  (! (= (tb2t5235 (t2tb5235 i)) i) :pattern ((t2tb5235 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 d1) c1)) j)
     (= (t2tb5235 (tb2t5235 j)) j)) :pattern ((t2tb5235 (tb2t5235 j))) )))

(declare-fun t2tb5236 ((tuple21 (tuple21 b d) c)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b d) c))) (sort (tuple2 (tuple2 b1 d1) c1)
  (t2tb5236 x))))

(declare-fun tb2t5236 (uni) (tuple21 (tuple21 b d) c))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b d) c)))
  (! (= (tb2t5236 (t2tb5236 i)) i) :pattern ((t2tb5236 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 d1) c1) j) (= (t2tb5236 (tb2t5236 j)) j)) :pattern (
  (t2tb5236 (tb2t5236 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 b d))) (t (set c)) (x (tuple21 b d)) (y c))
  (= (mem (tuple2 (tuple2 b1 d1) c1)
  (Tuple2 (tuple2 b1 d1) c1 (t2tb692 x) (t2tb135 y))
  (times c1 (tuple2 b1 d1) (t2tb687 s) (t2tb132 t)))
  (and (mem23 x s) (mem7 y t)))))

(declare-fun t2tb5237 ((set (tuple21 (tuple21 b d) (set (tuple21 a
  b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b d) (set (tuple21 a b)))))) (sort
  (set1 (tuple2 (tuple2 b1 d1) (set1 (tuple2 a1 b1)))) (t2tb5237 x))))

(declare-fun tb2t5237 (uni) (set (tuple21 (tuple21 b d) (set (tuple21 a
  b)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b d) (set (tuple21 a b))))))
  (! (= (tb2t5237 (t2tb5237 i)) i) :pattern ((t2tb5237 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 d1) (set1 (tuple2 a1 b1)))) j)
     (= (t2tb5237 (tb2t5237 j)) j)) :pattern ((t2tb5237 (tb2t5237 j))) )))

(declare-fun t2tb5238 ((tuple21 (tuple21 b d) (set (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b d) (set (tuple21 a b))))) (sort
  (tuple2 (tuple2 b1 d1) (set1 (tuple2 a1 b1))) (t2tb5238 x))))

(declare-fun tb2t5238 (uni) (tuple21 (tuple21 b d) (set (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b d) (set (tuple21 a b)))))
  (! (= (tb2t5238 (t2tb5238 i)) i) :pattern ((t2tb5238 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 d1) (set1 (tuple2 a1 b1))) j)
     (= (t2tb5238 (tb2t5238 j)) j)) :pattern ((t2tb5238 (tb2t5238 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 b d))) (t (set (set (tuple21 a b))))
  (x (tuple21 b d)) (y (set (tuple21 a b))))
  (= (mem (tuple2 (tuple2 b1 d1) (set1 (tuple2 a1 b1)))
  (Tuple2 (tuple2 b1 d1) (set1 (tuple2 a1 b1)) (t2tb692 x) (t2tb11 y))
  (times (set1 (tuple2 a1 b1)) (tuple2 b1 d1) (t2tb687 s) (t2tb10 t)))
  (and (mem23 x s) (mem4 y t)))))

(declare-fun t2tb5239 ((set (tuple21 (tuple21 b d) (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b d) (tuple21 a b))))) (sort
  (set1 (tuple2 (tuple2 b1 d1) (tuple2 a1 b1))) (t2tb5239 x))))

(declare-fun tb2t5239 (uni) (set (tuple21 (tuple21 b d) (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b d) (tuple21 a b)))))
  (! (= (tb2t5239 (t2tb5239 i)) i) :pattern ((t2tb5239 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 d1) (tuple2 a1 b1))) j)
     (= (t2tb5239 (tb2t5239 j)) j)) :pattern ((t2tb5239 (tb2t5239 j))) )))

(declare-fun t2tb5240 ((tuple21 (tuple21 b d) (tuple21 a b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b d) (tuple21 a b)))) (sort
  (tuple2 (tuple2 b1 d1) (tuple2 a1 b1)) (t2tb5240 x))))

(declare-fun tb2t5240 (uni) (tuple21 (tuple21 b d) (tuple21 a b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b d) (tuple21 a b))))
  (! (= (tb2t5240 (t2tb5240 i)) i) :pattern ((t2tb5240 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 d1) (tuple2 a1 b1)) j)
     (= (t2tb5240 (tb2t5240 j)) j)) :pattern ((t2tb5240 (tb2t5240 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 b d))) (t (set (tuple21 a b))) (x (tuple21 b d))
  (y (tuple21 a b)))
  (= (mem (tuple2 (tuple2 b1 d1) (tuple2 a1 b1))
  (Tuple2 (tuple2 b1 d1) (tuple2 a1 b1) (t2tb692 x) (t2tb13 y))
  (times (tuple2 a1 b1) (tuple2 b1 d1) (t2tb687 s) (t2tb11 t)))
  (and (mem23 x s) (mem3 y t)))))

(declare-fun t2tb5241 ((set (tuple21 (tuple21 b d) b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b d) b)))) (sort
  (set1 (tuple2 (tuple2 b1 d1) b1)) (t2tb5241 x))))

(declare-fun tb2t5241 (uni) (set (tuple21 (tuple21 b d) b)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b d) b))))
  (! (= (tb2t5241 (t2tb5241 i)) i) :pattern ((t2tb5241 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 d1) b1)) j)
     (= (t2tb5241 (tb2t5241 j)) j)) :pattern ((t2tb5241 (tb2t5241 j))) )))

(declare-fun t2tb5242 ((tuple21 (tuple21 b d) b)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b d) b))) (sort (tuple2 (tuple2 b1 d1) b1)
  (t2tb5242 x))))

(declare-fun tb2t5242 (uni) (tuple21 (tuple21 b d) b))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b d) b)))
  (! (= (tb2t5242 (t2tb5242 i)) i) :pattern ((t2tb5242 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 d1) b1) j) (= (t2tb5242 (tb2t5242 j)) j)) :pattern (
  (t2tb5242 (tb2t5242 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 b d))) (t (set b)) (x (tuple21 b d)) (y b))
  (= (mem (tuple2 (tuple2 b1 d1) b1)
  (Tuple2 (tuple2 b1 d1) b1 (t2tb692 x) (t2tb14 y))
  (times b1 (tuple2 b1 d1) (t2tb687 s) (t2tb12 t)))
  (and (mem23 x s) (mem2 y t)))))

(declare-fun t2tb5243 ((set (tuple21 (tuple21 b d) a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b d) a)))) (sort
  (set1 (tuple2 (tuple2 b1 d1) a1)) (t2tb5243 x))))

(declare-fun tb2t5243 (uni) (set (tuple21 (tuple21 b d) a)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b d) a))))
  (! (= (tb2t5243 (t2tb5243 i)) i) :pattern ((t2tb5243 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 d1) a1)) j)
     (= (t2tb5243 (tb2t5243 j)) j)) :pattern ((t2tb5243 (tb2t5243 j))) )))

(declare-fun t2tb5244 ((tuple21 (tuple21 b d) a)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b d) a))) (sort (tuple2 (tuple2 b1 d1) a1)
  (t2tb5244 x))))

(declare-fun tb2t5244 (uni) (tuple21 (tuple21 b d) a))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b d) a)))
  (! (= (tb2t5244 (t2tb5244 i)) i) :pattern ((t2tb5244 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 d1) a1) j) (= (t2tb5244 (tb2t5244 j)) j)) :pattern (
  (t2tb5244 (tb2t5244 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 b d))) (t (set a)) (x (tuple21 b d)) (y a))
  (= (mem (tuple2 (tuple2 b1 d1) a1)
  (Tuple2 (tuple2 b1 d1) a1 (t2tb692 x) (t2tb2 y))
  (times a1 (tuple2 b1 d1) (t2tb687 s) (t2tb1 t)))
  (and (mem23 x s) (mem1 y t)))))

;; mem_times
  (assert
  (forall ((b2 ty))
  (forall ((s (set (tuple21 b d))) (t uni) (x (tuple21 b d)) (y uni))
  (= (mem (tuple2 (tuple2 b1 d1) b2) (Tuple2 (tuple2 b1 d1) b2 (t2tb692 x) y)
  (times b2 (tuple2 b1 d1) (t2tb687 s) t)) (and (mem23 x s) (mem b2 y t))))))

(declare-fun t2tb5245 ((set (tuple21 (set (tuple21 c d)) (tuple21 (tuple21 a
  c) (tuple21 b d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 c d)) (tuple21 (tuple21 a c)
  (tuple21 b d)))))) (sort
  (set1
  (tuple2 (set1 (tuple2 c1 d1)) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))))
  (t2tb5245 x))))

(declare-fun tb2t5245 (uni) (set (tuple21 (set (tuple21 c d))
  (tuple21 (tuple21 a c) (tuple21 b d)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 c d)) (tuple21 (tuple21 a c)
  (tuple21 b d))))))
  (! (= (tb2t5245 (t2tb5245 i)) i) :pattern ((t2tb5245 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (tuple2 (set1 (tuple2 c1 d1)) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))))
     j) (= (t2tb5245 (tb2t5245 j)) j)) :pattern ((t2tb5245 (tb2t5245 j))) )))

(declare-fun t2tb5246 ((tuple21 (set (tuple21 c d)) (tuple21 (tuple21 a c)
  (tuple21 b d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 c d)) (tuple21 (tuple21 a c) (tuple21 b
  d))))) (sort
  (tuple2 (set1 (tuple2 c1 d1)) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
  (t2tb5246 x))))

(declare-fun tb2t5246 (uni) (tuple21 (set (tuple21 c d)) (tuple21 (tuple21 a
  c) (tuple21 b d))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 c d)) (tuple21 (tuple21 a c) (tuple21 b
  d))))) (! (= (tb2t5246 (t2tb5246 i)) i) :pattern ((t2tb5246 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (tuple2 (set1 (tuple2 c1 d1)) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))) j)
     (= (t2tb5246 (tb2t5246 j)) j)) :pattern ((t2tb5246 (tb2t5246 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 c d)))) (t (set (tuple21 (tuple21 a c)
  (tuple21 b d)))) (x (set (tuple21 c d))) (y (tuple21 (tuple21 a c)
  (tuple21 b d))))
  (= (mem
  (tuple2 (set1 (tuple2 c1 d1)) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
  (Tuple2 (set1 (tuple2 c1 d1)) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))
  (t2tb689 x) (t2tb691 y))
  (times (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (set1 (tuple2 c1 d1))
  (t2tb688 s) (t2tb686 t))) (and (mem22 x s) (mem24 y t)))))

(declare-fun t2tb5247 ((tuple21 (set (tuple21 c d)) (tuple21 b d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 c d)) (tuple21 b d)))) (sort
  (tuple2 (set1 (tuple2 c1 d1)) (tuple2 b1 d1)) (t2tb5247 x))))

(declare-fun tb2t5247 (uni) (tuple21 (set (tuple21 c d)) (tuple21 b d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 c d)) (tuple21 b d))))
  (! (= (tb2t5247 (t2tb5247 i)) i) :pattern ((t2tb5247 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 c1 d1)) (tuple2 b1 d1)) j)
     (= (t2tb5247 (tb2t5247 j)) j)) :pattern ((t2tb5247 (tb2t5247 j))) )))

(declare-fun t2tb5248 ((set (tuple21 (set (tuple21 c d)) (tuple21 b
  d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 c d)) (tuple21 b d))))) (sort
  (set1 (tuple2 (set1 (tuple2 c1 d1)) (tuple2 b1 d1))) (t2tb5248 x))))

(declare-fun tb2t5248 (uni) (set (tuple21 (set (tuple21 c d)) (tuple21 b
  d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 c d)) (tuple21 b d)))))
  (! (= (tb2t5248 (t2tb5248 i)) i) :pattern ((t2tb5248 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 c1 d1)) (tuple2 b1 d1))) j)
     (= (t2tb5248 (tb2t5248 j)) j)) :pattern ((t2tb5248 (tb2t5248 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 c d)))) (t (set (tuple21 b d)))
  (x (set (tuple21 c d))) (y (tuple21 b d)))
  (= (mem (tuple2 (set1 (tuple2 c1 d1)) (tuple2 b1 d1))
  (Tuple2 (set1 (tuple2 c1 d1)) (tuple2 b1 d1) (t2tb689 x) (t2tb692 y))
  (times (tuple2 b1 d1) (set1 (tuple2 c1 d1)) (t2tb688 s) (t2tb687 t)))
  (and (mem22 x s) (mem23 y t)))))

(declare-fun t2tb5249 ((set (tuple21 (set (tuple21 c d)) (set (tuple21 c
  d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 c d)) (set (tuple21 c d)))))) (sort
  (set1 (tuple2 (set1 (tuple2 c1 d1)) (set1 (tuple2 c1 d1)))) (t2tb5249 x))))

(declare-fun tb2t5249 (uni) (set (tuple21 (set (tuple21 c d)) (set (tuple21 c
  d)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 c d)) (set (tuple21 c d))))))
  (! (= (tb2t5249 (t2tb5249 i)) i) :pattern ((t2tb5249 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 c1 d1)) (set1 (tuple2 c1 d1)))) j)
     (= (t2tb5249 (tb2t5249 j)) j)) :pattern ((t2tb5249 (tb2t5249 j))) )))

(declare-fun t2tb5250 ((tuple21 (set (tuple21 c d)) (set (tuple21 c
  d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 c d)) (set (tuple21 c d))))) (sort
  (tuple2 (set1 (tuple2 c1 d1)) (set1 (tuple2 c1 d1))) (t2tb5250 x))))

(declare-fun tb2t5250 (uni) (tuple21 (set (tuple21 c d)) (set (tuple21 c
  d))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 c d)) (set (tuple21 c d)))))
  (! (= (tb2t5250 (t2tb5250 i)) i) :pattern ((t2tb5250 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 c1 d1)) (set1 (tuple2 c1 d1))) j)
     (= (t2tb5250 (tb2t5250 j)) j)) :pattern ((t2tb5250 (tb2t5250 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 c d)))) (t (set (set (tuple21 c d))))
  (x (set (tuple21 c d))) (y (set (tuple21 c d))))
  (= (mem (tuple2 (set1 (tuple2 c1 d1)) (set1 (tuple2 c1 d1)))
  (Tuple2 (set1 (tuple2 c1 d1)) (set1 (tuple2 c1 d1)) (t2tb689 x)
  (t2tb689 y))
  (times (set1 (tuple2 c1 d1)) (set1 (tuple2 c1 d1)) (t2tb688 s) (t2tb688 t)))
  (and (mem22 x s) (mem22 y t)))))

(declare-fun t2tb5251 ((set (tuple21 (set (tuple21 c d)) (tuple21 c
  d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 c d)) (tuple21 c d))))) (sort
  (set1 (tuple2 (set1 (tuple2 c1 d1)) (tuple2 c1 d1))) (t2tb5251 x))))

(declare-fun tb2t5251 (uni) (set (tuple21 (set (tuple21 c d)) (tuple21 c
  d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 c d)) (tuple21 c d)))))
  (! (= (tb2t5251 (t2tb5251 i)) i) :pattern ((t2tb5251 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 c1 d1)) (tuple2 c1 d1))) j)
     (= (t2tb5251 (tb2t5251 j)) j)) :pattern ((t2tb5251 (tb2t5251 j))) )))

(declare-fun t2tb5252 ((tuple21 (set (tuple21 c d)) (tuple21 c d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 c d)) (tuple21 c d)))) (sort
  (tuple2 (set1 (tuple2 c1 d1)) (tuple2 c1 d1)) (t2tb5252 x))))

(declare-fun tb2t5252 (uni) (tuple21 (set (tuple21 c d)) (tuple21 c d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 c d)) (tuple21 c d))))
  (! (= (tb2t5252 (t2tb5252 i)) i) :pattern ((t2tb5252 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 c1 d1)) (tuple2 c1 d1)) j)
     (= (t2tb5252 (tb2t5252 j)) j)) :pattern ((t2tb5252 (tb2t5252 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 c d)))) (t (set (tuple21 c d)))
  (x (set (tuple21 c d))) (y (tuple21 c d)))
  (= (mem (tuple2 (set1 (tuple2 c1 d1)) (tuple2 c1 d1))
  (Tuple2 (set1 (tuple2 c1 d1)) (tuple2 c1 d1) (t2tb689 x) (t2tb693 y))
  (times (tuple2 c1 d1) (set1 (tuple2 c1 d1)) (t2tb688 s) (t2tb689 t)))
  (and (mem22 x s) (mem21 y t)))))

(declare-fun t2tb5253 ((set (tuple21 (set (tuple21 c d)) d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 c d)) d)))) (sort
  (set1 (tuple2 (set1 (tuple2 c1 d1)) d1)) (t2tb5253 x))))

(declare-fun tb2t5253 (uni) (set (tuple21 (set (tuple21 c d)) d)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 c d)) d))))
  (! (= (tb2t5253 (t2tb5253 i)) i) :pattern ((t2tb5253 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 c1 d1)) d1)) j)
     (= (t2tb5253 (tb2t5253 j)) j)) :pattern ((t2tb5253 (tb2t5253 j))) )))

(declare-fun t2tb5254 ((tuple21 (set (tuple21 c d)) d)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 c d)) d))) (sort
  (tuple2 (set1 (tuple2 c1 d1)) d1) (t2tb5254 x))))

(declare-fun tb2t5254 (uni) (tuple21 (set (tuple21 c d)) d))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 c d)) d)))
  (! (= (tb2t5254 (t2tb5254 i)) i) :pattern ((t2tb5254 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 c1 d1)) d1) j)
     (= (t2tb5254 (tb2t5254 j)) j)) :pattern ((t2tb5254 (tb2t5254 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 c d)))) (t (set d)) (x (set (tuple21 c d)))
  (y d))
  (= (mem (tuple2 (set1 (tuple2 c1 d1)) d1)
  (Tuple2 (set1 (tuple2 c1 d1)) d1 (t2tb689 x) (t2tb694 y))
  (times d1 (set1 (tuple2 c1 d1)) (t2tb688 s) (t2tb690 t)))
  (and (mem22 x s) (mem20 y t)))))

(declare-fun t2tb5255 ((set (tuple21 (set (tuple21 c d)) (tuple21 a
  c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 c d)) (tuple21 a c))))) (sort
  (set1 (tuple2 (set1 (tuple2 c1 d1)) (tuple2 a1 c1))) (t2tb5255 x))))

(declare-fun tb2t5255 (uni) (set (tuple21 (set (tuple21 c d)) (tuple21 a
  c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 c d)) (tuple21 a c)))))
  (! (= (tb2t5255 (t2tb5255 i)) i) :pattern ((t2tb5255 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 c1 d1)) (tuple2 a1 c1))) j)
     (= (t2tb5255 (tb2t5255 j)) j)) :pattern ((t2tb5255 (tb2t5255 j))) )))

(declare-fun t2tb5256 ((tuple21 (set (tuple21 c d)) (tuple21 a c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 c d)) (tuple21 a c)))) (sort
  (tuple2 (set1 (tuple2 c1 d1)) (tuple2 a1 c1)) (t2tb5256 x))))

(declare-fun tb2t5256 (uni) (tuple21 (set (tuple21 c d)) (tuple21 a c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 c d)) (tuple21 a c))))
  (! (= (tb2t5256 (t2tb5256 i)) i) :pattern ((t2tb5256 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 c1 d1)) (tuple2 a1 c1)) j)
     (= (t2tb5256 (tb2t5256 j)) j)) :pattern ((t2tb5256 (tb2t5256 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 c d)))) (t (set (tuple21 a c)))
  (x (set (tuple21 c d))) (y (tuple21 a c)))
  (= (mem (tuple2 (set1 (tuple2 c1 d1)) (tuple2 a1 c1))
  (Tuple2 (set1 (tuple2 c1 d1)) (tuple2 a1 c1) (t2tb689 x) (t2tb133 y))
  (times (tuple2 a1 c1) (set1 (tuple2 c1 d1)) (t2tb688 s) (t2tb129 t)))
  (and (mem22 x s) (mem10 y t)))))

(declare-fun t2tb5257 ((set (tuple21 (set (tuple21 c d)) c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 c d)) c)))) (sort
  (set1 (tuple2 (set1 (tuple2 c1 d1)) c1)) (t2tb5257 x))))

(declare-fun tb2t5257 (uni) (set (tuple21 (set (tuple21 c d)) c)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 c d)) c))))
  (! (= (tb2t5257 (t2tb5257 i)) i) :pattern ((t2tb5257 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 c1 d1)) c1)) j)
     (= (t2tb5257 (tb2t5257 j)) j)) :pattern ((t2tb5257 (tb2t5257 j))) )))

(declare-fun t2tb5258 ((tuple21 (set (tuple21 c d)) c)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 c d)) c))) (sort
  (tuple2 (set1 (tuple2 c1 d1)) c1) (t2tb5258 x))))

(declare-fun tb2t5258 (uni) (tuple21 (set (tuple21 c d)) c))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 c d)) c)))
  (! (= (tb2t5258 (t2tb5258 i)) i) :pattern ((t2tb5258 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 c1 d1)) c1) j)
     (= (t2tb5258 (tb2t5258 j)) j)) :pattern ((t2tb5258 (tb2t5258 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 c d)))) (t (set c)) (x (set (tuple21 c d)))
  (y c))
  (= (mem (tuple2 (set1 (tuple2 c1 d1)) c1)
  (Tuple2 (set1 (tuple2 c1 d1)) c1 (t2tb689 x) (t2tb135 y))
  (times c1 (set1 (tuple2 c1 d1)) (t2tb688 s) (t2tb132 t)))
  (and (mem22 x s) (mem7 y t)))))

(declare-fun t2tb5259 ((set (tuple21 (set (tuple21 c d)) (set (tuple21 a
  b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 c d)) (set (tuple21 a b)))))) (sort
  (set1 (tuple2 (set1 (tuple2 c1 d1)) (set1 (tuple2 a1 b1)))) (t2tb5259 x))))

(declare-fun tb2t5259 (uni) (set (tuple21 (set (tuple21 c d)) (set (tuple21 a
  b)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 c d)) (set (tuple21 a b))))))
  (! (= (tb2t5259 (t2tb5259 i)) i) :pattern ((t2tb5259 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 c1 d1)) (set1 (tuple2 a1 b1)))) j)
     (= (t2tb5259 (tb2t5259 j)) j)) :pattern ((t2tb5259 (tb2t5259 j))) )))

(declare-fun t2tb5260 ((tuple21 (set (tuple21 c d)) (set (tuple21 a
  b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 c d)) (set (tuple21 a b))))) (sort
  (tuple2 (set1 (tuple2 c1 d1)) (set1 (tuple2 a1 b1))) (t2tb5260 x))))

(declare-fun tb2t5260 (uni) (tuple21 (set (tuple21 c d)) (set (tuple21 a
  b))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 c d)) (set (tuple21 a b)))))
  (! (= (tb2t5260 (t2tb5260 i)) i) :pattern ((t2tb5260 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 c1 d1)) (set1 (tuple2 a1 b1))) j)
     (= (t2tb5260 (tb2t5260 j)) j)) :pattern ((t2tb5260 (tb2t5260 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 c d)))) (t (set (set (tuple21 a b))))
  (x (set (tuple21 c d))) (y (set (tuple21 a b))))
  (= (mem (tuple2 (set1 (tuple2 c1 d1)) (set1 (tuple2 a1 b1)))
  (Tuple2 (set1 (tuple2 c1 d1)) (set1 (tuple2 a1 b1)) (t2tb689 x) (t2tb11 y))
  (times (set1 (tuple2 a1 b1)) (set1 (tuple2 c1 d1)) (t2tb688 s) (t2tb10 t)))
  (and (mem22 x s) (mem4 y t)))))

(declare-fun t2tb5261 ((set (tuple21 (set (tuple21 c d)) (tuple21 a
  b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 c d)) (tuple21 a b))))) (sort
  (set1 (tuple2 (set1 (tuple2 c1 d1)) (tuple2 a1 b1))) (t2tb5261 x))))

(declare-fun tb2t5261 (uni) (set (tuple21 (set (tuple21 c d)) (tuple21 a
  b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 c d)) (tuple21 a b)))))
  (! (= (tb2t5261 (t2tb5261 i)) i) :pattern ((t2tb5261 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 c1 d1)) (tuple2 a1 b1))) j)
     (= (t2tb5261 (tb2t5261 j)) j)) :pattern ((t2tb5261 (tb2t5261 j))) )))

(declare-fun t2tb5262 ((tuple21 (set (tuple21 c d)) (tuple21 a b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 c d)) (tuple21 a b)))) (sort
  (tuple2 (set1 (tuple2 c1 d1)) (tuple2 a1 b1)) (t2tb5262 x))))

(declare-fun tb2t5262 (uni) (tuple21 (set (tuple21 c d)) (tuple21 a b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 c d)) (tuple21 a b))))
  (! (= (tb2t5262 (t2tb5262 i)) i) :pattern ((t2tb5262 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 c1 d1)) (tuple2 a1 b1)) j)
     (= (t2tb5262 (tb2t5262 j)) j)) :pattern ((t2tb5262 (tb2t5262 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 c d)))) (t (set (tuple21 a b)))
  (x (set (tuple21 c d))) (y (tuple21 a b)))
  (= (mem (tuple2 (set1 (tuple2 c1 d1)) (tuple2 a1 b1))
  (Tuple2 (set1 (tuple2 c1 d1)) (tuple2 a1 b1) (t2tb689 x) (t2tb13 y))
  (times (tuple2 a1 b1) (set1 (tuple2 c1 d1)) (t2tb688 s) (t2tb11 t)))
  (and (mem22 x s) (mem3 y t)))))

(declare-fun t2tb5263 ((tuple21 (set (tuple21 c d)) b)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 c d)) b))) (sort
  (tuple2 (set1 (tuple2 c1 d1)) b1) (t2tb5263 x))))

(declare-fun tb2t5263 (uni) (tuple21 (set (tuple21 c d)) b))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 c d)) b)))
  (! (= (tb2t5263 (t2tb5263 i)) i) :pattern ((t2tb5263 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 c1 d1)) b1) j)
     (= (t2tb5263 (tb2t5263 j)) j)) :pattern ((t2tb5263 (tb2t5263 j))) )))

(declare-fun t2tb5264 ((set (tuple21 (set (tuple21 c d)) b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 c d)) b)))) (sort
  (set1 (tuple2 (set1 (tuple2 c1 d1)) b1)) (t2tb5264 x))))

(declare-fun tb2t5264 (uni) (set (tuple21 (set (tuple21 c d)) b)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 c d)) b))))
  (! (= (tb2t5264 (t2tb5264 i)) i) :pattern ((t2tb5264 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 c1 d1)) b1)) j)
     (= (t2tb5264 (tb2t5264 j)) j)) :pattern ((t2tb5264 (tb2t5264 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 c d)))) (t (set b)) (x (set (tuple21 c d)))
  (y b))
  (= (mem (tuple2 (set1 (tuple2 c1 d1)) b1)
  (Tuple2 (set1 (tuple2 c1 d1)) b1 (t2tb689 x) (t2tb14 y))
  (times b1 (set1 (tuple2 c1 d1)) (t2tb688 s) (t2tb12 t)))
  (and (mem22 x s) (mem2 y t)))))

(declare-fun t2tb5265 ((set (tuple21 (set (tuple21 c d)) a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 c d)) a)))) (sort
  (set1 (tuple2 (set1 (tuple2 c1 d1)) a1)) (t2tb5265 x))))

(declare-fun tb2t5265 (uni) (set (tuple21 (set (tuple21 c d)) a)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 c d)) a))))
  (! (= (tb2t5265 (t2tb5265 i)) i) :pattern ((t2tb5265 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 c1 d1)) a1)) j)
     (= (t2tb5265 (tb2t5265 j)) j)) :pattern ((t2tb5265 (tb2t5265 j))) )))

(declare-fun t2tb5266 ((tuple21 (set (tuple21 c d)) a)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 c d)) a))) (sort
  (tuple2 (set1 (tuple2 c1 d1)) a1) (t2tb5266 x))))

(declare-fun tb2t5266 (uni) (tuple21 (set (tuple21 c d)) a))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 c d)) a)))
  (! (= (tb2t5266 (t2tb5266 i)) i) :pattern ((t2tb5266 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 c1 d1)) a1) j)
     (= (t2tb5266 (tb2t5266 j)) j)) :pattern ((t2tb5266 (tb2t5266 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 c d)))) (t (set a)) (x (set (tuple21 c d)))
  (y a))
  (= (mem (tuple2 (set1 (tuple2 c1 d1)) a1)
  (Tuple2 (set1 (tuple2 c1 d1)) a1 (t2tb689 x) (t2tb2 y))
  (times a1 (set1 (tuple2 c1 d1)) (t2tb688 s) (t2tb1 t)))
  (and (mem22 x s) (mem1 y t)))))

;; mem_times
  (assert
  (forall ((b2 ty))
  (forall ((s (set (set (tuple21 c d)))) (t uni) (x (set (tuple21 c d)))
  (y uni))
  (= (mem (tuple2 (set1 (tuple2 c1 d1)) b2)
  (Tuple2 (set1 (tuple2 c1 d1)) b2 (t2tb689 x) y)
  (times b2 (set1 (tuple2 c1 d1)) (t2tb688 s) t))
  (and (mem22 x s) (mem b2 y t))))))

(declare-fun t2tb5267 ((set (tuple21 (tuple21 c d) (tuple21 (tuple21 a c)
  (tuple21 b d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 c d) (tuple21 (tuple21 a c) (tuple21 b
  d)))))) (sort
  (set1 (tuple2 (tuple2 c1 d1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))))
  (t2tb5267 x))))

(declare-fun tb2t5267 (uni) (set (tuple21 (tuple21 c d) (tuple21 (tuple21 a
  c) (tuple21 b d)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 c d) (tuple21 (tuple21 a c) (tuple21 b
  d)))))) (! (= (tb2t5267 (t2tb5267 i)) i) :pattern ((t2tb5267 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 c1 d1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))) j)
     (= (t2tb5267 (tb2t5267 j)) j)) :pattern ((t2tb5267 (tb2t5267 j))) )))

(declare-fun t2tb5268 ((tuple21 (tuple21 c d) (tuple21 (tuple21 a c)
  (tuple21 b d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 c d) (tuple21 (tuple21 a c) (tuple21 b d)))))
  (sort (tuple2 (tuple2 c1 d1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
  (t2tb5268 x))))

(declare-fun tb2t5268 (uni) (tuple21 (tuple21 c d) (tuple21 (tuple21 a c)
  (tuple21 b d))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 c d) (tuple21 (tuple21 a c) (tuple21 b d)))))
  (! (= (tb2t5268 (t2tb5268 i)) i) :pattern ((t2tb5268 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 c1 d1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
     j) (= (t2tb5268 (tb2t5268 j)) j)) :pattern ((t2tb5268 (tb2t5268 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 c d))) (t (set (tuple21 (tuple21 a c) (tuple21 b
  d)))) (x (tuple21 c d)) (y (tuple21 (tuple21 a c) (tuple21 b d))))
  (= (mem (tuple2 (tuple2 c1 d1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
  (Tuple2 (tuple2 c1 d1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb693 x)
  (t2tb691 y))
  (times (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 c1 d1) (t2tb689 s)
  (t2tb686 t))) (and (mem21 x s) (mem24 y t)))))

(declare-fun t2tb5269 ((set (tuple21 (tuple21 c d) (tuple21 b d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 c d) (tuple21 b d))))) (sort
  (set1 (tuple2 (tuple2 c1 d1) (tuple2 b1 d1))) (t2tb5269 x))))

(declare-fun tb2t5269 (uni) (set (tuple21 (tuple21 c d) (tuple21 b d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 c d) (tuple21 b d)))))
  (! (= (tb2t5269 (t2tb5269 i)) i) :pattern ((t2tb5269 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 c1 d1) (tuple2 b1 d1))) j)
     (= (t2tb5269 (tb2t5269 j)) j)) :pattern ((t2tb5269 (tb2t5269 j))) )))

(declare-fun t2tb5270 ((tuple21 (tuple21 c d) (tuple21 b d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 c d) (tuple21 b d)))) (sort
  (tuple2 (tuple2 c1 d1) (tuple2 b1 d1)) (t2tb5270 x))))

(declare-fun tb2t5270 (uni) (tuple21 (tuple21 c d) (tuple21 b d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 c d) (tuple21 b d))))
  (! (= (tb2t5270 (t2tb5270 i)) i) :pattern ((t2tb5270 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 c1 d1) (tuple2 b1 d1)) j)
     (= (t2tb5270 (tb2t5270 j)) j)) :pattern ((t2tb5270 (tb2t5270 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 c d))) (t (set (tuple21 b d))) (x (tuple21 c d))
  (y (tuple21 b d)))
  (= (mem (tuple2 (tuple2 c1 d1) (tuple2 b1 d1))
  (Tuple2 (tuple2 c1 d1) (tuple2 b1 d1) (t2tb693 x) (t2tb692 y))
  (times (tuple2 b1 d1) (tuple2 c1 d1) (t2tb689 s) (t2tb687 t)))
  (and (mem21 x s) (mem23 y t)))))

(declare-fun t2tb5271 ((set (tuple21 (tuple21 c d) (set (tuple21 c
  d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 c d) (set (tuple21 c d)))))) (sort
  (set1 (tuple2 (tuple2 c1 d1) (set1 (tuple2 c1 d1)))) (t2tb5271 x))))

(declare-fun tb2t5271 (uni) (set (tuple21 (tuple21 c d) (set (tuple21 c
  d)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 c d) (set (tuple21 c d))))))
  (! (= (tb2t5271 (t2tb5271 i)) i) :pattern ((t2tb5271 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 c1 d1) (set1 (tuple2 c1 d1)))) j)
     (= (t2tb5271 (tb2t5271 j)) j)) :pattern ((t2tb5271 (tb2t5271 j))) )))

(declare-fun t2tb5272 ((tuple21 (tuple21 c d) (set (tuple21 c d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 c d) (set (tuple21 c d))))) (sort
  (tuple2 (tuple2 c1 d1) (set1 (tuple2 c1 d1))) (t2tb5272 x))))

(declare-fun tb2t5272 (uni) (tuple21 (tuple21 c d) (set (tuple21 c d))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 c d) (set (tuple21 c d)))))
  (! (= (tb2t5272 (t2tb5272 i)) i) :pattern ((t2tb5272 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 c1 d1) (set1 (tuple2 c1 d1))) j)
     (= (t2tb5272 (tb2t5272 j)) j)) :pattern ((t2tb5272 (tb2t5272 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 c d))) (t (set (set (tuple21 c d))))
  (x (tuple21 c d)) (y (set (tuple21 c d))))
  (= (mem (tuple2 (tuple2 c1 d1) (set1 (tuple2 c1 d1)))
  (Tuple2 (tuple2 c1 d1) (set1 (tuple2 c1 d1)) (t2tb693 x) (t2tb689 y))
  (times (set1 (tuple2 c1 d1)) (tuple2 c1 d1) (t2tb689 s) (t2tb688 t)))
  (and (mem21 x s) (mem22 y t)))))

(declare-fun t2tb5273 ((set (tuple21 (tuple21 c d) (tuple21 c d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 c d) (tuple21 c d))))) (sort
  (set1 (tuple2 (tuple2 c1 d1) (tuple2 c1 d1))) (t2tb5273 x))))

(declare-fun tb2t5273 (uni) (set (tuple21 (tuple21 c d) (tuple21 c d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 c d) (tuple21 c d)))))
  (! (= (tb2t5273 (t2tb5273 i)) i) :pattern ((t2tb5273 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 c1 d1) (tuple2 c1 d1))) j)
     (= (t2tb5273 (tb2t5273 j)) j)) :pattern ((t2tb5273 (tb2t5273 j))) )))

(declare-fun t2tb5274 ((tuple21 (tuple21 c d) (tuple21 c d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 c d) (tuple21 c d)))) (sort
  (tuple2 (tuple2 c1 d1) (tuple2 c1 d1)) (t2tb5274 x))))

(declare-fun tb2t5274 (uni) (tuple21 (tuple21 c d) (tuple21 c d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 c d) (tuple21 c d))))
  (! (= (tb2t5274 (t2tb5274 i)) i) :pattern ((t2tb5274 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 c1 d1) (tuple2 c1 d1)) j)
     (= (t2tb5274 (tb2t5274 j)) j)) :pattern ((t2tb5274 (tb2t5274 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 c d))) (t (set (tuple21 c d))) (x (tuple21 c d))
  (y (tuple21 c d)))
  (= (mem (tuple2 (tuple2 c1 d1) (tuple2 c1 d1))
  (Tuple2 (tuple2 c1 d1) (tuple2 c1 d1) (t2tb693 x) (t2tb693 y))
  (times (tuple2 c1 d1) (tuple2 c1 d1) (t2tb689 s) (t2tb689 t)))
  (and (mem21 x s) (mem21 y t)))))

(declare-fun t2tb5275 ((set (tuple21 (tuple21 c d) d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 c d) d)))) (sort
  (set1 (tuple2 (tuple2 c1 d1) d1)) (t2tb5275 x))))

(declare-fun tb2t5275 (uni) (set (tuple21 (tuple21 c d) d)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 c d) d))))
  (! (= (tb2t5275 (t2tb5275 i)) i) :pattern ((t2tb5275 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 c1 d1) d1)) j)
     (= (t2tb5275 (tb2t5275 j)) j)) :pattern ((t2tb5275 (tb2t5275 j))) )))

(declare-fun t2tb5276 ((tuple21 (tuple21 c d) d)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 c d) d))) (sort (tuple2 (tuple2 c1 d1) d1)
  (t2tb5276 x))))

(declare-fun tb2t5276 (uni) (tuple21 (tuple21 c d) d))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 c d) d)))
  (! (= (tb2t5276 (t2tb5276 i)) i) :pattern ((t2tb5276 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 c1 d1) d1) j) (= (t2tb5276 (tb2t5276 j)) j)) :pattern (
  (t2tb5276 (tb2t5276 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 c d))) (t (set d)) (x (tuple21 c d)) (y d))
  (= (mem (tuple2 (tuple2 c1 d1) d1)
  (Tuple2 (tuple2 c1 d1) d1 (t2tb693 x) (t2tb694 y))
  (times d1 (tuple2 c1 d1) (t2tb689 s) (t2tb690 t)))
  (and (mem21 x s) (mem20 y t)))))

(declare-fun t2tb5277 ((tuple21 (tuple21 c d) (tuple21 a c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 c d) (tuple21 a c)))) (sort
  (tuple2 (tuple2 c1 d1) (tuple2 a1 c1)) (t2tb5277 x))))

(declare-fun tb2t5277 (uni) (tuple21 (tuple21 c d) (tuple21 a c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 c d) (tuple21 a c))))
  (! (= (tb2t5277 (t2tb5277 i)) i) :pattern ((t2tb5277 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 c1 d1) (tuple2 a1 c1)) j)
     (= (t2tb5277 (tb2t5277 j)) j)) :pattern ((t2tb5277 (tb2t5277 j))) )))

(declare-fun t2tb5278 ((set (tuple21 (tuple21 c d) (tuple21 a c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 c d) (tuple21 a c))))) (sort
  (set1 (tuple2 (tuple2 c1 d1) (tuple2 a1 c1))) (t2tb5278 x))))

(declare-fun tb2t5278 (uni) (set (tuple21 (tuple21 c d) (tuple21 a c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 c d) (tuple21 a c)))))
  (! (= (tb2t5278 (t2tb5278 i)) i) :pattern ((t2tb5278 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 c1 d1) (tuple2 a1 c1))) j)
     (= (t2tb5278 (tb2t5278 j)) j)) :pattern ((t2tb5278 (tb2t5278 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 c d))) (t (set (tuple21 a c))) (x (tuple21 c d))
  (y (tuple21 a c)))
  (= (mem (tuple2 (tuple2 c1 d1) (tuple2 a1 c1))
  (Tuple2 (tuple2 c1 d1) (tuple2 a1 c1) (t2tb693 x) (t2tb133 y))
  (times (tuple2 a1 c1) (tuple2 c1 d1) (t2tb689 s) (t2tb129 t)))
  (and (mem21 x s) (mem10 y t)))))

(declare-fun t2tb5279 ((set (tuple21 (tuple21 c d) c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 c d) c)))) (sort
  (set1 (tuple2 (tuple2 c1 d1) c1)) (t2tb5279 x))))

(declare-fun tb2t5279 (uni) (set (tuple21 (tuple21 c d) c)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 c d) c))))
  (! (= (tb2t5279 (t2tb5279 i)) i) :pattern ((t2tb5279 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 c1 d1) c1)) j)
     (= (t2tb5279 (tb2t5279 j)) j)) :pattern ((t2tb5279 (tb2t5279 j))) )))

(declare-fun t2tb5280 ((tuple21 (tuple21 c d) c)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 c d) c))) (sort (tuple2 (tuple2 c1 d1) c1)
  (t2tb5280 x))))

(declare-fun tb2t5280 (uni) (tuple21 (tuple21 c d) c))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 c d) c)))
  (! (= (tb2t5280 (t2tb5280 i)) i) :pattern ((t2tb5280 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 c1 d1) c1) j) (= (t2tb5280 (tb2t5280 j)) j)) :pattern (
  (t2tb5280 (tb2t5280 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 c d))) (t (set c)) (x (tuple21 c d)) (y c))
  (= (mem (tuple2 (tuple2 c1 d1) c1)
  (Tuple2 (tuple2 c1 d1) c1 (t2tb693 x) (t2tb135 y))
  (times c1 (tuple2 c1 d1) (t2tb689 s) (t2tb132 t)))
  (and (mem21 x s) (mem7 y t)))))

(declare-fun t2tb5281 ((set (tuple21 (tuple21 c d) (set (tuple21 a
  b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 c d) (set (tuple21 a b)))))) (sort
  (set1 (tuple2 (tuple2 c1 d1) (set1 (tuple2 a1 b1)))) (t2tb5281 x))))

(declare-fun tb2t5281 (uni) (set (tuple21 (tuple21 c d) (set (tuple21 a
  b)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 c d) (set (tuple21 a b))))))
  (! (= (tb2t5281 (t2tb5281 i)) i) :pattern ((t2tb5281 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 c1 d1) (set1 (tuple2 a1 b1)))) j)
     (= (t2tb5281 (tb2t5281 j)) j)) :pattern ((t2tb5281 (tb2t5281 j))) )))

(declare-fun t2tb5282 ((tuple21 (tuple21 c d) (set (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 c d) (set (tuple21 a b))))) (sort
  (tuple2 (tuple2 c1 d1) (set1 (tuple2 a1 b1))) (t2tb5282 x))))

(declare-fun tb2t5282 (uni) (tuple21 (tuple21 c d) (set (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 c d) (set (tuple21 a b)))))
  (! (= (tb2t5282 (t2tb5282 i)) i) :pattern ((t2tb5282 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 c1 d1) (set1 (tuple2 a1 b1))) j)
     (= (t2tb5282 (tb2t5282 j)) j)) :pattern ((t2tb5282 (tb2t5282 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 c d))) (t (set (set (tuple21 a b))))
  (x (tuple21 c d)) (y (set (tuple21 a b))))
  (= (mem (tuple2 (tuple2 c1 d1) (set1 (tuple2 a1 b1)))
  (Tuple2 (tuple2 c1 d1) (set1 (tuple2 a1 b1)) (t2tb693 x) (t2tb11 y))
  (times (set1 (tuple2 a1 b1)) (tuple2 c1 d1) (t2tb689 s) (t2tb10 t)))
  (and (mem21 x s) (mem4 y t)))))

(declare-fun t2tb5283 ((set (tuple21 (tuple21 c d) (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 c d) (tuple21 a b))))) (sort
  (set1 (tuple2 (tuple2 c1 d1) (tuple2 a1 b1))) (t2tb5283 x))))

(declare-fun tb2t5283 (uni) (set (tuple21 (tuple21 c d) (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 c d) (tuple21 a b)))))
  (! (= (tb2t5283 (t2tb5283 i)) i) :pattern ((t2tb5283 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 c1 d1) (tuple2 a1 b1))) j)
     (= (t2tb5283 (tb2t5283 j)) j)) :pattern ((t2tb5283 (tb2t5283 j))) )))

(declare-fun t2tb5284 ((tuple21 (tuple21 c d) (tuple21 a b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 c d) (tuple21 a b)))) (sort
  (tuple2 (tuple2 c1 d1) (tuple2 a1 b1)) (t2tb5284 x))))

(declare-fun tb2t5284 (uni) (tuple21 (tuple21 c d) (tuple21 a b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 c d) (tuple21 a b))))
  (! (= (tb2t5284 (t2tb5284 i)) i) :pattern ((t2tb5284 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 c1 d1) (tuple2 a1 b1)) j)
     (= (t2tb5284 (tb2t5284 j)) j)) :pattern ((t2tb5284 (tb2t5284 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 c d))) (t (set (tuple21 a b))) (x (tuple21 c d))
  (y (tuple21 a b)))
  (= (mem (tuple2 (tuple2 c1 d1) (tuple2 a1 b1))
  (Tuple2 (tuple2 c1 d1) (tuple2 a1 b1) (t2tb693 x) (t2tb13 y))
  (times (tuple2 a1 b1) (tuple2 c1 d1) (t2tb689 s) (t2tb11 t)))
  (and (mem21 x s) (mem3 y t)))))

(declare-fun t2tb5285 ((set (tuple21 (tuple21 c d) b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 c d) b)))) (sort
  (set1 (tuple2 (tuple2 c1 d1) b1)) (t2tb5285 x))))

(declare-fun tb2t5285 (uni) (set (tuple21 (tuple21 c d) b)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 c d) b))))
  (! (= (tb2t5285 (t2tb5285 i)) i) :pattern ((t2tb5285 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 c1 d1) b1)) j)
     (= (t2tb5285 (tb2t5285 j)) j)) :pattern ((t2tb5285 (tb2t5285 j))) )))

(declare-fun t2tb5286 ((tuple21 (tuple21 c d) b)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 c d) b))) (sort (tuple2 (tuple2 c1 d1) b1)
  (t2tb5286 x))))

(declare-fun tb2t5286 (uni) (tuple21 (tuple21 c d) b))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 c d) b)))
  (! (= (tb2t5286 (t2tb5286 i)) i) :pattern ((t2tb5286 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 c1 d1) b1) j) (= (t2tb5286 (tb2t5286 j)) j)) :pattern (
  (t2tb5286 (tb2t5286 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 c d))) (t (set b)) (x (tuple21 c d)) (y b))
  (= (mem (tuple2 (tuple2 c1 d1) b1)
  (Tuple2 (tuple2 c1 d1) b1 (t2tb693 x) (t2tb14 y))
  (times b1 (tuple2 c1 d1) (t2tb689 s) (t2tb12 t)))
  (and (mem21 x s) (mem2 y t)))))

(declare-fun t2tb5287 ((set (tuple21 (tuple21 c d) a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 c d) a)))) (sort
  (set1 (tuple2 (tuple2 c1 d1) a1)) (t2tb5287 x))))

(declare-fun tb2t5287 (uni) (set (tuple21 (tuple21 c d) a)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 c d) a))))
  (! (= (tb2t5287 (t2tb5287 i)) i) :pattern ((t2tb5287 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 c1 d1) a1)) j)
     (= (t2tb5287 (tb2t5287 j)) j)) :pattern ((t2tb5287 (tb2t5287 j))) )))

(declare-fun t2tb5288 ((tuple21 (tuple21 c d) a)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 c d) a))) (sort (tuple2 (tuple2 c1 d1) a1)
  (t2tb5288 x))))

(declare-fun tb2t5288 (uni) (tuple21 (tuple21 c d) a))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 c d) a)))
  (! (= (tb2t5288 (t2tb5288 i)) i) :pattern ((t2tb5288 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 c1 d1) a1) j) (= (t2tb5288 (tb2t5288 j)) j)) :pattern (
  (t2tb5288 (tb2t5288 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 c d))) (t (set a)) (x (tuple21 c d)) (y a))
  (= (mem (tuple2 (tuple2 c1 d1) a1)
  (Tuple2 (tuple2 c1 d1) a1 (t2tb693 x) (t2tb2 y))
  (times a1 (tuple2 c1 d1) (t2tb689 s) (t2tb1 t)))
  (and (mem21 x s) (mem1 y t)))))

;; mem_times
  (assert
  (forall ((b2 ty))
  (forall ((s (set (tuple21 c d))) (t uni) (x (tuple21 c d)) (y uni))
  (= (mem (tuple2 (tuple2 c1 d1) b2) (Tuple2 (tuple2 c1 d1) b2 (t2tb693 x) y)
  (times b2 (tuple2 c1 d1) (t2tb689 s) t)) (and (mem21 x s) (mem b2 y t))))))

(declare-fun t2tb5289 ((set (tuple21 d (tuple21 (tuple21 a c) (tuple21 b
  d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 d (tuple21 (tuple21 a c) (tuple21 b d)))))) (sort
  (set1 (tuple2 d1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))) (t2tb5289 x))))

(declare-fun tb2t5289 (uni) (set (tuple21 d (tuple21 (tuple21 a c) (tuple21 b
  d)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 d (tuple21 (tuple21 a c) (tuple21 b d))))))
  (! (= (tb2t5289 (t2tb5289 i)) i) :pattern ((t2tb5289 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 d1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))) j)
     (= (t2tb5289 (tb2t5289 j)) j)) :pattern ((t2tb5289 (tb2t5289 j))) )))

(declare-fun t2tb5290 ((tuple21 d (tuple21 (tuple21 a c) (tuple21 b
  d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 d (tuple21 (tuple21 a c) (tuple21 b d))))) (sort
  (tuple2 d1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))) (t2tb5290 x))))

(declare-fun tb2t5290 (uni) (tuple21 d (tuple21 (tuple21 a c) (tuple21 b
  d))))

;; BridgeL
  (assert
  (forall ((i (tuple21 d (tuple21 (tuple21 a c) (tuple21 b d)))))
  (! (= (tb2t5290 (t2tb5290 i)) i) :pattern ((t2tb5290 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 d1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))) j)
     (= (t2tb5290 (tb2t5290 j)) j)) :pattern ((t2tb5290 (tb2t5290 j))) )))

;; mem_times
  (assert
  (forall ((s (set d)) (t (set (tuple21 (tuple21 a c) (tuple21 b d)))) (x d)
  (y (tuple21 (tuple21 a c) (tuple21 b d))))
  (= (mem (tuple2 d1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
  (Tuple2 d1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb694 x) (t2tb691 y))
  (times (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) d1 (t2tb690 s) (t2tb686 t)))
  (and (mem20 x s) (mem24 y t)))))

(declare-fun t2tb5291 ((tuple21 d (tuple21 b d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 d (tuple21 b d)))) (sort (tuple2 d1 (tuple2 b1 d1))
  (t2tb5291 x))))

(declare-fun tb2t5291 (uni) (tuple21 d (tuple21 b d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 d (tuple21 b d))))
  (! (= (tb2t5291 (t2tb5291 i)) i) :pattern ((t2tb5291 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 d1 (tuple2 b1 d1)) j) (= (t2tb5291 (tb2t5291 j)) j)) :pattern (
  (t2tb5291 (tb2t5291 j))) )))

(declare-fun t2tb5292 ((set (tuple21 d (tuple21 b d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 d (tuple21 b d))))) (sort
  (set1 (tuple2 d1 (tuple2 b1 d1))) (t2tb5292 x))))

(declare-fun tb2t5292 (uni) (set (tuple21 d (tuple21 b d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 d (tuple21 b d)))))
  (! (= (tb2t5292 (t2tb5292 i)) i) :pattern ((t2tb5292 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 d1 (tuple2 b1 d1))) j)
     (= (t2tb5292 (tb2t5292 j)) j)) :pattern ((t2tb5292 (tb2t5292 j))) )))

;; mem_times
  (assert
  (forall ((s (set d)) (t (set (tuple21 b d))) (x d) (y (tuple21 b d)))
  (= (mem (tuple2 d1 (tuple2 b1 d1))
  (Tuple2 d1 (tuple2 b1 d1) (t2tb694 x) (t2tb692 y))
  (times (tuple2 b1 d1) d1 (t2tb690 s) (t2tb687 t)))
  (and (mem20 x s) (mem23 y t)))))

(declare-fun t2tb5293 ((set (tuple21 d (set (tuple21 c d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 d (set (tuple21 c d)))))) (sort
  (set1 (tuple2 d1 (set1 (tuple2 c1 d1)))) (t2tb5293 x))))

(declare-fun tb2t5293 (uni) (set (tuple21 d (set (tuple21 c d)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 d (set (tuple21 c d))))))
  (! (= (tb2t5293 (t2tb5293 i)) i) :pattern ((t2tb5293 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 d1 (set1 (tuple2 c1 d1)))) j)
     (= (t2tb5293 (tb2t5293 j)) j)) :pattern ((t2tb5293 (tb2t5293 j))) )))

(declare-fun t2tb5294 ((tuple21 d (set (tuple21 c d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 d (set (tuple21 c d))))) (sort
  (tuple2 d1 (set1 (tuple2 c1 d1))) (t2tb5294 x))))

(declare-fun tb2t5294 (uni) (tuple21 d (set (tuple21 c d))))

;; BridgeL
  (assert
  (forall ((i (tuple21 d (set (tuple21 c d)))))
  (! (= (tb2t5294 (t2tb5294 i)) i) :pattern ((t2tb5294 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 d1 (set1 (tuple2 c1 d1))) j)
     (= (t2tb5294 (tb2t5294 j)) j)) :pattern ((t2tb5294 (tb2t5294 j))) )))

;; mem_times
  (assert
  (forall ((s (set d)) (t (set (set (tuple21 c d)))) (x d) (y (set (tuple21 c
  d))))
  (= (mem (tuple2 d1 (set1 (tuple2 c1 d1)))
  (Tuple2 d1 (set1 (tuple2 c1 d1)) (t2tb694 x) (t2tb689 y))
  (times (set1 (tuple2 c1 d1)) d1 (t2tb690 s) (t2tb688 t)))
  (and (mem20 x s) (mem22 y t)))))

(declare-fun t2tb5295 ((set (tuple21 d (tuple21 c d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 d (tuple21 c d))))) (sort
  (set1 (tuple2 d1 (tuple2 c1 d1))) (t2tb5295 x))))

(declare-fun tb2t5295 (uni) (set (tuple21 d (tuple21 c d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 d (tuple21 c d)))))
  (! (= (tb2t5295 (t2tb5295 i)) i) :pattern ((t2tb5295 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 d1 (tuple2 c1 d1))) j)
     (= (t2tb5295 (tb2t5295 j)) j)) :pattern ((t2tb5295 (tb2t5295 j))) )))

(declare-fun t2tb5296 ((tuple21 d (tuple21 c d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 d (tuple21 c d)))) (sort (tuple2 d1 (tuple2 c1 d1))
  (t2tb5296 x))))

(declare-fun tb2t5296 (uni) (tuple21 d (tuple21 c d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 d (tuple21 c d))))
  (! (= (tb2t5296 (t2tb5296 i)) i) :pattern ((t2tb5296 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 d1 (tuple2 c1 d1)) j) (= (t2tb5296 (tb2t5296 j)) j)) :pattern (
  (t2tb5296 (tb2t5296 j))) )))

;; mem_times
  (assert
  (forall ((s (set d)) (t (set (tuple21 c d))) (x d) (y (tuple21 c d)))
  (= (mem (tuple2 d1 (tuple2 c1 d1))
  (Tuple2 d1 (tuple2 c1 d1) (t2tb694 x) (t2tb693 y))
  (times (tuple2 c1 d1) d1 (t2tb690 s) (t2tb689 t)))
  (and (mem20 x s) (mem21 y t)))))

(declare-fun t2tb5297 ((set (tuple21 d d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 d d)))) (sort (set1 (tuple2 d1 d1))
  (t2tb5297 x))))

(declare-fun tb2t5297 (uni) (set (tuple21 d d)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 d d))))
  (! (= (tb2t5297 (t2tb5297 i)) i) :pattern ((t2tb5297 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 d1 d1)) j) (= (t2tb5297 (tb2t5297 j)) j)) :pattern (
  (t2tb5297 (tb2t5297 j))) )))

(declare-fun t2tb5298 ((tuple21 d d)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 d d))) (sort (tuple2 d1 d1) (t2tb5298 x))))

(declare-fun tb2t5298 (uni) (tuple21 d d))

;; BridgeL
  (assert
  (forall ((i (tuple21 d d)))
  (! (= (tb2t5298 (t2tb5298 i)) i) :pattern ((t2tb5298 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 d1 d1) j) (= (t2tb5298 (tb2t5298 j)) j)) :pattern (
  (t2tb5298 (tb2t5298 j))) )))

;; mem_times
  (assert
  (forall ((s (set d)) (t (set d)) (x d) (y d))
  (= (mem (tuple2 d1 d1) (Tuple2 d1 d1 (t2tb694 x) (t2tb694 y))
  (times d1 d1 (t2tb690 s) (t2tb690 t))) (and (mem20 x s) (mem20 y t)))))

(declare-fun t2tb5299 ((set (tuple21 d (tuple21 a c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 d (tuple21 a c))))) (sort
  (set1 (tuple2 d1 (tuple2 a1 c1))) (t2tb5299 x))))

(declare-fun tb2t5299 (uni) (set (tuple21 d (tuple21 a c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 d (tuple21 a c)))))
  (! (= (tb2t5299 (t2tb5299 i)) i) :pattern ((t2tb5299 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 d1 (tuple2 a1 c1))) j)
     (= (t2tb5299 (tb2t5299 j)) j)) :pattern ((t2tb5299 (tb2t5299 j))) )))

(declare-fun t2tb5300 ((tuple21 d (tuple21 a c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 d (tuple21 a c)))) (sort (tuple2 d1 (tuple2 a1 c1))
  (t2tb5300 x))))

(declare-fun tb2t5300 (uni) (tuple21 d (tuple21 a c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 d (tuple21 a c))))
  (! (= (tb2t5300 (t2tb5300 i)) i) :pattern ((t2tb5300 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 d1 (tuple2 a1 c1)) j) (= (t2tb5300 (tb2t5300 j)) j)) :pattern (
  (t2tb5300 (tb2t5300 j))) )))

;; mem_times
  (assert
  (forall ((s (set d)) (t (set (tuple21 a c))) (x d) (y (tuple21 a c)))
  (= (mem (tuple2 d1 (tuple2 a1 c1))
  (Tuple2 d1 (tuple2 a1 c1) (t2tb694 x) (t2tb133 y))
  (times (tuple2 a1 c1) d1 (t2tb690 s) (t2tb129 t)))
  (and (mem20 x s) (mem10 y t)))))

(declare-fun t2tb829 ((set (tuple21 d c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 d c)))) (sort (set1 (tuple2 d1 c1)) (t2tb829 x))))

(declare-fun tb2t829 (uni) (set (tuple21 d c)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 d c))))
  (! (= (tb2t829 (t2tb829 i)) i) :pattern ((t2tb829 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 d1 c1)) j) (= (t2tb829 (tb2t829 j)) j)) :pattern (
  (t2tb829 (tb2t829 j))) )))

(declare-fun t2tb830 ((tuple21 d c)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 d c))) (sort (tuple2 d1 c1) (t2tb830 x))))

(declare-fun tb2t830 (uni) (tuple21 d c))

;; BridgeL
  (assert
  (forall ((i (tuple21 d c)))
  (! (= (tb2t830 (t2tb830 i)) i) :pattern ((t2tb830 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 d1 c1) j) (= (t2tb830 (tb2t830 j)) j)) :pattern (
  (t2tb830 (tb2t830 j))) )))

;; mem_times
  (assert
  (forall ((s (set d)) (t (set c)) (x d) (y c))
  (= (mem (tuple2 d1 c1) (Tuple2 d1 c1 (t2tb694 x) (t2tb135 y))
  (times c1 d1 (t2tb690 s) (t2tb132 t))) (and (mem20 x s) (mem7 y t)))))

(declare-fun t2tb5301 ((set (tuple21 d (set (tuple21 a b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 d (set (tuple21 a b)))))) (sort
  (set1 (tuple2 d1 (set1 (tuple2 a1 b1)))) (t2tb5301 x))))

(declare-fun tb2t5301 (uni) (set (tuple21 d (set (tuple21 a b)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 d (set (tuple21 a b))))))
  (! (= (tb2t5301 (t2tb5301 i)) i) :pattern ((t2tb5301 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 d1 (set1 (tuple2 a1 b1)))) j)
     (= (t2tb5301 (tb2t5301 j)) j)) :pattern ((t2tb5301 (tb2t5301 j))) )))

(declare-fun t2tb5302 ((tuple21 d (set (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 d (set (tuple21 a b))))) (sort
  (tuple2 d1 (set1 (tuple2 a1 b1))) (t2tb5302 x))))

(declare-fun tb2t5302 (uni) (tuple21 d (set (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (tuple21 d (set (tuple21 a b)))))
  (! (= (tb2t5302 (t2tb5302 i)) i) :pattern ((t2tb5302 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 d1 (set1 (tuple2 a1 b1))) j)
     (= (t2tb5302 (tb2t5302 j)) j)) :pattern ((t2tb5302 (tb2t5302 j))) )))

;; mem_times
  (assert
  (forall ((s (set d)) (t (set (set (tuple21 a b)))) (x d) (y (set (tuple21 a
  b))))
  (= (mem (tuple2 d1 (set1 (tuple2 a1 b1)))
  (Tuple2 d1 (set1 (tuple2 a1 b1)) (t2tb694 x) (t2tb11 y))
  (times (set1 (tuple2 a1 b1)) d1 (t2tb690 s) (t2tb10 t)))
  (and (mem20 x s) (mem4 y t)))))

(declare-fun t2tb5303 ((set (tuple21 d (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 d (tuple21 a b))))) (sort
  (set1 (tuple2 d1 (tuple2 a1 b1))) (t2tb5303 x))))

(declare-fun tb2t5303 (uni) (set (tuple21 d (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 d (tuple21 a b)))))
  (! (= (tb2t5303 (t2tb5303 i)) i) :pattern ((t2tb5303 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 d1 (tuple2 a1 b1))) j)
     (= (t2tb5303 (tb2t5303 j)) j)) :pattern ((t2tb5303 (tb2t5303 j))) )))

(declare-fun t2tb5304 ((tuple21 d (tuple21 a b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 d (tuple21 a b)))) (sort (tuple2 d1 (tuple2 a1 b1))
  (t2tb5304 x))))

(declare-fun tb2t5304 (uni) (tuple21 d (tuple21 a b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 d (tuple21 a b))))
  (! (= (tb2t5304 (t2tb5304 i)) i) :pattern ((t2tb5304 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 d1 (tuple2 a1 b1)) j) (= (t2tb5304 (tb2t5304 j)) j)) :pattern (
  (t2tb5304 (tb2t5304 j))) )))

;; mem_times
  (assert
  (forall ((s (set d)) (t (set (tuple21 a b))) (x d) (y (tuple21 a b)))
  (= (mem (tuple2 d1 (tuple2 a1 b1))
  (Tuple2 d1 (tuple2 a1 b1) (t2tb694 x) (t2tb13 y))
  (times (tuple2 a1 b1) d1 (t2tb690 s) (t2tb11 t)))
  (and (mem20 x s) (mem3 y t)))))

(declare-fun t2tb5305 ((set (tuple21 d b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 d b)))) (sort (set1 (tuple2 d1 b1))
  (t2tb5305 x))))

(declare-fun tb2t5305 (uni) (set (tuple21 d b)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 d b))))
  (! (= (tb2t5305 (t2tb5305 i)) i) :pattern ((t2tb5305 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 d1 b1)) j) (= (t2tb5305 (tb2t5305 j)) j)) :pattern (
  (t2tb5305 (tb2t5305 j))) )))

(declare-fun t2tb5306 ((tuple21 d b)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 d b))) (sort (tuple2 d1 b1) (t2tb5306 x))))

(declare-fun tb2t5306 (uni) (tuple21 d b))

;; BridgeL
  (assert
  (forall ((i (tuple21 d b)))
  (! (= (tb2t5306 (t2tb5306 i)) i) :pattern ((t2tb5306 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 d1 b1) j) (= (t2tb5306 (tb2t5306 j)) j)) :pattern (
  (t2tb5306 (tb2t5306 j))) )))

;; mem_times
  (assert
  (forall ((s (set d)) (t (set b)) (x d) (y b))
  (= (mem (tuple2 d1 b1) (Tuple2 d1 b1 (t2tb694 x) (t2tb14 y))
  (times b1 d1 (t2tb690 s) (t2tb12 t))) (and (mem20 x s) (mem2 y t)))))

(declare-fun t2tb5307 ((tuple21 d a)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 d a))) (sort (tuple2 d1 a1) (t2tb5307 x))))

(declare-fun tb2t5307 (uni) (tuple21 d a))

;; BridgeL
  (assert
  (forall ((i (tuple21 d a)))
  (! (= (tb2t5307 (t2tb5307 i)) i) :pattern ((t2tb5307 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 d1 a1) j) (= (t2tb5307 (tb2t5307 j)) j)) :pattern (
  (t2tb5307 (tb2t5307 j))) )))

(declare-fun t2tb5308 ((set (tuple21 d a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 d a)))) (sort (set1 (tuple2 d1 a1))
  (t2tb5308 x))))

(declare-fun tb2t5308 (uni) (set (tuple21 d a)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 d a))))
  (! (= (tb2t5308 (t2tb5308 i)) i) :pattern ((t2tb5308 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 d1 a1)) j) (= (t2tb5308 (tb2t5308 j)) j)) :pattern (
  (t2tb5308 (tb2t5308 j))) )))

;; mem_times
  (assert
  (forall ((s (set d)) (t (set a)) (x d) (y a))
  (= (mem (tuple2 d1 a1) (Tuple2 d1 a1 (t2tb694 x) (t2tb2 y))
  (times a1 d1 (t2tb690 s) (t2tb1 t))) (and (mem20 x s) (mem1 y t)))))

;; mem_times
  (assert
  (forall ((b2 ty))
  (forall ((s (set d)) (t uni) (x d) (y uni))
  (= (mem (tuple2 d1 b2) (Tuple2 d1 b2 (t2tb694 x) y)
  (times b2 d1 (t2tb690 s) t)) (and (mem20 x s) (mem b2 y t))))))

(declare-fun t2tb5309 ((set (tuple21 (tuple21 a c) (tuple21 (tuple21 a c)
  (tuple21 b d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a c) (tuple21 (tuple21 a c) (tuple21 b
  d)))))) (sort
  (set1 (tuple2 (tuple2 a1 c1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))))
  (t2tb5309 x))))

(declare-fun tb2t5309 (uni) (set (tuple21 (tuple21 a c) (tuple21 (tuple21 a
  c) (tuple21 b d)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a c) (tuple21 (tuple21 a c) (tuple21 b
  d)))))) (! (= (tb2t5309 (t2tb5309 i)) i) :pattern ((t2tb5309 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 a1 c1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))) j)
     (= (t2tb5309 (tb2t5309 j)) j)) :pattern ((t2tb5309 (tb2t5309 j))) )))

(declare-fun t2tb5310 ((tuple21 (tuple21 a c) (tuple21 (tuple21 a c)
  (tuple21 b d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a c) (tuple21 (tuple21 a c) (tuple21 b d)))))
  (sort (tuple2 (tuple2 a1 c1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
  (t2tb5310 x))))

(declare-fun tb2t5310 (uni) (tuple21 (tuple21 a c) (tuple21 (tuple21 a c)
  (tuple21 b d))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a c) (tuple21 (tuple21 a c) (tuple21 b d)))))
  (! (= (tb2t5310 (t2tb5310 i)) i) :pattern ((t2tb5310 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 c1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
     j) (= (t2tb5310 (tb2t5310 j)) j)) :pattern ((t2tb5310 (tb2t5310 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a c))) (t (set (tuple21 (tuple21 a c) (tuple21 b
  d)))) (x (tuple21 a c)) (y (tuple21 (tuple21 a c) (tuple21 b d))))
  (= (mem (tuple2 (tuple2 a1 c1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
  (Tuple2 (tuple2 a1 c1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb133 x)
  (t2tb691 y))
  (times (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 a1 c1) (t2tb129 s)
  (t2tb686 t))) (and (mem10 x s) (mem24 y t)))))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a c))) (t (set (tuple21 b d))) (x (tuple21 a c))
  (y (tuple21 b d)))
  (= (mem24
  (tb2t691 (Tuple2 (tuple2 a1 c1) (tuple2 b1 d1) (t2tb133 x) (t2tb692 y)))
  (times9 s t)) (and (mem10 x s) (mem23 y t)))))

(declare-fun t2tb5311 ((set (tuple21 (tuple21 a c) (set (tuple21 c
  d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a c) (set (tuple21 c d)))))) (sort
  (set1 (tuple2 (tuple2 a1 c1) (set1 (tuple2 c1 d1)))) (t2tb5311 x))))

(declare-fun tb2t5311 (uni) (set (tuple21 (tuple21 a c) (set (tuple21 c
  d)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a c) (set (tuple21 c d))))))
  (! (= (tb2t5311 (t2tb5311 i)) i) :pattern ((t2tb5311 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 c1) (set1 (tuple2 c1 d1)))) j)
     (= (t2tb5311 (tb2t5311 j)) j)) :pattern ((t2tb5311 (tb2t5311 j))) )))

(declare-fun t2tb5312 ((tuple21 (tuple21 a c) (set (tuple21 c d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a c) (set (tuple21 c d))))) (sort
  (tuple2 (tuple2 a1 c1) (set1 (tuple2 c1 d1))) (t2tb5312 x))))

(declare-fun tb2t5312 (uni) (tuple21 (tuple21 a c) (set (tuple21 c d))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a c) (set (tuple21 c d)))))
  (! (= (tb2t5312 (t2tb5312 i)) i) :pattern ((t2tb5312 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 c1) (set1 (tuple2 c1 d1))) j)
     (= (t2tb5312 (tb2t5312 j)) j)) :pattern ((t2tb5312 (tb2t5312 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a c))) (t (set (set (tuple21 c d))))
  (x (tuple21 a c)) (y (set (tuple21 c d))))
  (= (mem (tuple2 (tuple2 a1 c1) (set1 (tuple2 c1 d1)))
  (Tuple2 (tuple2 a1 c1) (set1 (tuple2 c1 d1)) (t2tb133 x) (t2tb689 y))
  (times (set1 (tuple2 c1 d1)) (tuple2 a1 c1) (t2tb129 s) (t2tb688 t)))
  (and (mem10 x s) (mem22 y t)))))

(declare-fun t2tb5313 ((set (tuple21 (tuple21 a c) (tuple21 c d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a c) (tuple21 c d))))) (sort
  (set1 (tuple2 (tuple2 a1 c1) (tuple2 c1 d1))) (t2tb5313 x))))

(declare-fun tb2t5313 (uni) (set (tuple21 (tuple21 a c) (tuple21 c d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a c) (tuple21 c d)))))
  (! (= (tb2t5313 (t2tb5313 i)) i) :pattern ((t2tb5313 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 c1) (tuple2 c1 d1))) j)
     (= (t2tb5313 (tb2t5313 j)) j)) :pattern ((t2tb5313 (tb2t5313 j))) )))

(declare-fun t2tb5314 ((tuple21 (tuple21 a c) (tuple21 c d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a c) (tuple21 c d)))) (sort
  (tuple2 (tuple2 a1 c1) (tuple2 c1 d1)) (t2tb5314 x))))

(declare-fun tb2t5314 (uni) (tuple21 (tuple21 a c) (tuple21 c d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a c) (tuple21 c d))))
  (! (= (tb2t5314 (t2tb5314 i)) i) :pattern ((t2tb5314 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 c1) (tuple2 c1 d1)) j)
     (= (t2tb5314 (tb2t5314 j)) j)) :pattern ((t2tb5314 (tb2t5314 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a c))) (t (set (tuple21 c d))) (x (tuple21 a c))
  (y (tuple21 c d)))
  (= (mem (tuple2 (tuple2 a1 c1) (tuple2 c1 d1))
  (Tuple2 (tuple2 a1 c1) (tuple2 c1 d1) (t2tb133 x) (t2tb693 y))
  (times (tuple2 c1 d1) (tuple2 a1 c1) (t2tb129 s) (t2tb689 t)))
  (and (mem10 x s) (mem21 y t)))))

(declare-fun t2tb5315 ((set (tuple21 (tuple21 a c) d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a c) d)))) (sort
  (set1 (tuple2 (tuple2 a1 c1) d1)) (t2tb5315 x))))

(declare-fun tb2t5315 (uni) (set (tuple21 (tuple21 a c) d)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a c) d))))
  (! (= (tb2t5315 (t2tb5315 i)) i) :pattern ((t2tb5315 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 c1) d1)) j)
     (= (t2tb5315 (tb2t5315 j)) j)) :pattern ((t2tb5315 (tb2t5315 j))) )))

(declare-fun t2tb5316 ((tuple21 (tuple21 a c) d)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a c) d))) (sort (tuple2 (tuple2 a1 c1) d1)
  (t2tb5316 x))))

(declare-fun tb2t5316 (uni) (tuple21 (tuple21 a c) d))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a c) d)))
  (! (= (tb2t5316 (t2tb5316 i)) i) :pattern ((t2tb5316 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 c1) d1) j) (= (t2tb5316 (tb2t5316 j)) j)) :pattern (
  (t2tb5316 (tb2t5316 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a c))) (t (set d)) (x (tuple21 a c)) (y d))
  (= (mem (tuple2 (tuple2 a1 c1) d1)
  (Tuple2 (tuple2 a1 c1) d1 (t2tb133 x) (t2tb694 y))
  (times d1 (tuple2 a1 c1) (t2tb129 s) (t2tb690 t)))
  (and (mem10 x s) (mem20 y t)))))

(declare-fun t2tb156 ((tuple21 (tuple21 a c) (tuple21 a c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a c) (tuple21 a c)))) (sort
  (tuple2 (tuple2 a1 c1) (tuple2 a1 c1)) (t2tb156 x))))

(declare-fun tb2t156 (uni) (tuple21 (tuple21 a c) (tuple21 a c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a c) (tuple21 a c))))
  (! (= (tb2t156 (t2tb156 i)) i) :pattern ((t2tb156 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 c1) (tuple2 a1 c1)) j)
     (= (t2tb156 (tb2t156 j)) j)) :pattern ((t2tb156 (tb2t156 j))) )))

(declare-fun t2tb157 ((set (tuple21 (tuple21 a c) (tuple21 a c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a c) (tuple21 a c))))) (sort
  (set1 (tuple2 (tuple2 a1 c1) (tuple2 a1 c1))) (t2tb157 x))))

(declare-fun tb2t157 (uni) (set (tuple21 (tuple21 a c) (tuple21 a c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a c) (tuple21 a c)))))
  (! (= (tb2t157 (t2tb157 i)) i) :pattern ((t2tb157 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 c1) (tuple2 a1 c1))) j)
     (= (t2tb157 (tb2t157 j)) j)) :pattern ((t2tb157 (tb2t157 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a c))) (t (set (tuple21 a c))) (x (tuple21 a c))
  (y (tuple21 a c)))
  (= (mem (tuple2 (tuple2 a1 c1) (tuple2 a1 c1))
  (Tuple2 (tuple2 a1 c1) (tuple2 a1 c1) (t2tb133 x) (t2tb133 y))
  (times (tuple2 a1 c1) (tuple2 a1 c1) (t2tb129 s) (t2tb129 t)))
  (and (mem10 x s) (mem10 y t)))))

(declare-fun t2tb162 ((set (tuple21 (tuple21 a c) c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a c) c)))) (sort
  (set1 (tuple2 (tuple2 a1 c1) c1)) (t2tb162 x))))

(declare-fun tb2t162 (uni) (set (tuple21 (tuple21 a c) c)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a c) c))))
  (! (= (tb2t162 (t2tb162 i)) i) :pattern ((t2tb162 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 c1) c1)) j)
     (= (t2tb162 (tb2t162 j)) j)) :pattern ((t2tb162 (tb2t162 j))) )))

(declare-fun t2tb163 ((tuple21 (tuple21 a c) c)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a c) c))) (sort (tuple2 (tuple2 a1 c1) c1)
  (t2tb163 x))))

(declare-fun tb2t163 (uni) (tuple21 (tuple21 a c) c))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a c) c)))
  (! (= (tb2t163 (t2tb163 i)) i) :pattern ((t2tb163 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 c1) c1) j) (= (t2tb163 (tb2t163 j)) j)) :pattern (
  (t2tb163 (tb2t163 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a c))) (t (set c)) (x (tuple21 a c)) (y c))
  (= (mem (tuple2 (tuple2 a1 c1) c1)
  (Tuple2 (tuple2 a1 c1) c1 (t2tb133 x) (t2tb135 y))
  (times c1 (tuple2 a1 c1) (t2tb129 s) (t2tb132 t)))
  (and (mem10 x s) (mem7 y t)))))

(declare-fun t2tb164 ((set (tuple21 (tuple21 a c) (set (tuple21 a b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a c) (set (tuple21 a b)))))) (sort
  (set1 (tuple2 (tuple2 a1 c1) (set1 (tuple2 a1 b1)))) (t2tb164 x))))

(declare-fun tb2t164 (uni) (set (tuple21 (tuple21 a c) (set (tuple21 a b)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a c) (set (tuple21 a b))))))
  (! (= (tb2t164 (t2tb164 i)) i) :pattern ((t2tb164 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 c1) (set1 (tuple2 a1 b1)))) j)
     (= (t2tb164 (tb2t164 j)) j)) :pattern ((t2tb164 (tb2t164 j))) )))

(declare-fun t2tb165 ((tuple21 (tuple21 a c) (set (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a c) (set (tuple21 a b))))) (sort
  (tuple2 (tuple2 a1 c1) (set1 (tuple2 a1 b1))) (t2tb165 x))))

(declare-fun tb2t165 (uni) (tuple21 (tuple21 a c) (set (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a c) (set (tuple21 a b)))))
  (! (= (tb2t165 (t2tb165 i)) i) :pattern ((t2tb165 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 c1) (set1 (tuple2 a1 b1))) j)
     (= (t2tb165 (tb2t165 j)) j)) :pattern ((t2tb165 (tb2t165 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a c))) (t (set (set (tuple21 a b))))
  (x (tuple21 a c)) (y (set (tuple21 a b))))
  (= (mem (tuple2 (tuple2 a1 c1) (set1 (tuple2 a1 b1)))
  (Tuple2 (tuple2 a1 c1) (set1 (tuple2 a1 b1)) (t2tb133 x) (t2tb11 y))
  (times (set1 (tuple2 a1 b1)) (tuple2 a1 c1) (t2tb129 s) (t2tb10 t)))
  (and (mem10 x s) (mem4 y t)))))

(declare-fun t2tb166 ((set (tuple21 (tuple21 a c) (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a c) (tuple21 a b))))) (sort
  (set1 (tuple2 (tuple2 a1 c1) (tuple2 a1 b1))) (t2tb166 x))))

(declare-fun tb2t166 (uni) (set (tuple21 (tuple21 a c) (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a c) (tuple21 a b)))))
  (! (= (tb2t166 (t2tb166 i)) i) :pattern ((t2tb166 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 c1) (tuple2 a1 b1))) j)
     (= (t2tb166 (tb2t166 j)) j)) :pattern ((t2tb166 (tb2t166 j))) )))

(declare-fun t2tb167 ((tuple21 (tuple21 a c) (tuple21 a b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a c) (tuple21 a b)))) (sort
  (tuple2 (tuple2 a1 c1) (tuple2 a1 b1)) (t2tb167 x))))

(declare-fun tb2t167 (uni) (tuple21 (tuple21 a c) (tuple21 a b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a c) (tuple21 a b))))
  (! (= (tb2t167 (t2tb167 i)) i) :pattern ((t2tb167 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 c1) (tuple2 a1 b1)) j)
     (= (t2tb167 (tb2t167 j)) j)) :pattern ((t2tb167 (tb2t167 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a c))) (t (set (tuple21 a b))) (x (tuple21 a c))
  (y (tuple21 a b)))
  (= (mem (tuple2 (tuple2 a1 c1) (tuple2 a1 b1))
  (Tuple2 (tuple2 a1 c1) (tuple2 a1 b1) (t2tb133 x) (t2tb13 y))
  (times (tuple2 a1 b1) (tuple2 a1 c1) (t2tb129 s) (t2tb11 t)))
  (and (mem10 x s) (mem3 y t)))))

(declare-fun t2tb168 ((set (tuple21 (tuple21 a c) b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a c) b)))) (sort
  (set1 (tuple2 (tuple2 a1 c1) b1)) (t2tb168 x))))

(declare-fun tb2t168 (uni) (set (tuple21 (tuple21 a c) b)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a c) b))))
  (! (= (tb2t168 (t2tb168 i)) i) :pattern ((t2tb168 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 c1) b1)) j)
     (= (t2tb168 (tb2t168 j)) j)) :pattern ((t2tb168 (tb2t168 j))) )))

(declare-fun t2tb169 ((tuple21 (tuple21 a c) b)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a c) b))) (sort (tuple2 (tuple2 a1 c1) b1)
  (t2tb169 x))))

(declare-fun tb2t169 (uni) (tuple21 (tuple21 a c) b))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a c) b)))
  (! (= (tb2t169 (t2tb169 i)) i) :pattern ((t2tb169 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 c1) b1) j) (= (t2tb169 (tb2t169 j)) j)) :pattern (
  (t2tb169 (tb2t169 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a c))) (t (set b)) (x (tuple21 a c)) (y b))
  (= (mem (tuple2 (tuple2 a1 c1) b1)
  (Tuple2 (tuple2 a1 c1) b1 (t2tb133 x) (t2tb14 y))
  (times b1 (tuple2 a1 c1) (t2tb129 s) (t2tb12 t)))
  (and (mem10 x s) (mem2 y t)))))

(declare-fun t2tb170 ((set (tuple21 (tuple21 a c) a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a c) a)))) (sort
  (set1 (tuple2 (tuple2 a1 c1) a1)) (t2tb170 x))))

(declare-fun tb2t170 (uni) (set (tuple21 (tuple21 a c) a)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a c) a))))
  (! (= (tb2t170 (t2tb170 i)) i) :pattern ((t2tb170 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 c1) a1)) j)
     (= (t2tb170 (tb2t170 j)) j)) :pattern ((t2tb170 (tb2t170 j))) )))

(declare-fun t2tb171 ((tuple21 (tuple21 a c) a)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a c) a))) (sort (tuple2 (tuple2 a1 c1) a1)
  (t2tb171 x))))

(declare-fun tb2t171 (uni) (tuple21 (tuple21 a c) a))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a c) a)))
  (! (= (tb2t171 (t2tb171 i)) i) :pattern ((t2tb171 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 c1) a1) j) (= (t2tb171 (tb2t171 j)) j)) :pattern (
  (t2tb171 (tb2t171 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a c))) (t (set a)) (x (tuple21 a c)) (y a))
  (= (mem (tuple2 (tuple2 a1 c1) a1)
  (Tuple2 (tuple2 a1 c1) a1 (t2tb133 x) (t2tb2 y))
  (times a1 (tuple2 a1 c1) (t2tb129 s) (t2tb1 t)))
  (and (mem10 x s) (mem1 y t)))))

;; mem_times
  (assert
  (forall ((b2 ty))
  (forall ((s (set (tuple21 a c))) (t uni) (x (tuple21 a c)) (y uni))
  (= (mem (tuple2 (tuple2 a1 c1) b2) (Tuple2 (tuple2 a1 c1) b2 (t2tb133 x) y)
  (times b2 (tuple2 a1 c1) (t2tb129 s) t)) (and (mem10 x s) (mem b2 y t))))))

(declare-fun t2tb5317 ((set (tuple21 c (tuple21 (tuple21 a c) (tuple21 b
  d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 c (tuple21 (tuple21 a c) (tuple21 b d)))))) (sort
  (set1 (tuple2 c1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))) (t2tb5317 x))))

(declare-fun tb2t5317 (uni) (set (tuple21 c (tuple21 (tuple21 a c) (tuple21 b
  d)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 c (tuple21 (tuple21 a c) (tuple21 b d))))))
  (! (= (tb2t5317 (t2tb5317 i)) i) :pattern ((t2tb5317 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 c1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))) j)
     (= (t2tb5317 (tb2t5317 j)) j)) :pattern ((t2tb5317 (tb2t5317 j))) )))

(declare-fun t2tb5318 ((tuple21 c (tuple21 (tuple21 a c) (tuple21 b
  d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 c (tuple21 (tuple21 a c) (tuple21 b d))))) (sort
  (tuple2 c1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))) (t2tb5318 x))))

(declare-fun tb2t5318 (uni) (tuple21 c (tuple21 (tuple21 a c) (tuple21 b
  d))))

;; BridgeL
  (assert
  (forall ((i (tuple21 c (tuple21 (tuple21 a c) (tuple21 b d)))))
  (! (= (tb2t5318 (t2tb5318 i)) i) :pattern ((t2tb5318 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 c1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))) j)
     (= (t2tb5318 (tb2t5318 j)) j)) :pattern ((t2tb5318 (tb2t5318 j))) )))

;; mem_times
  (assert
  (forall ((s (set c)) (t (set (tuple21 (tuple21 a c) (tuple21 b d)))) (x c)
  (y (tuple21 (tuple21 a c) (tuple21 b d))))
  (= (mem (tuple2 c1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
  (Tuple2 c1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb135 x) (t2tb691 y))
  (times (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) c1 (t2tb132 s) (t2tb686 t)))
  (and (mem7 x s) (mem24 y t)))))

(declare-fun t2tb5319 ((set (tuple21 c (tuple21 b d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 c (tuple21 b d))))) (sort
  (set1 (tuple2 c1 (tuple2 b1 d1))) (t2tb5319 x))))

(declare-fun tb2t5319 (uni) (set (tuple21 c (tuple21 b d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 c (tuple21 b d)))))
  (! (= (tb2t5319 (t2tb5319 i)) i) :pattern ((t2tb5319 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 c1 (tuple2 b1 d1))) j)
     (= (t2tb5319 (tb2t5319 j)) j)) :pattern ((t2tb5319 (tb2t5319 j))) )))

(declare-fun t2tb5320 ((tuple21 c (tuple21 b d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 c (tuple21 b d)))) (sort (tuple2 c1 (tuple2 b1 d1))
  (t2tb5320 x))))

(declare-fun tb2t5320 (uni) (tuple21 c (tuple21 b d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 c (tuple21 b d))))
  (! (= (tb2t5320 (t2tb5320 i)) i) :pattern ((t2tb5320 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 c1 (tuple2 b1 d1)) j) (= (t2tb5320 (tb2t5320 j)) j)) :pattern (
  (t2tb5320 (tb2t5320 j))) )))

;; mem_times
  (assert
  (forall ((s (set c)) (t (set (tuple21 b d))) (x c) (y (tuple21 b d)))
  (= (mem (tuple2 c1 (tuple2 b1 d1))
  (Tuple2 c1 (tuple2 b1 d1) (t2tb135 x) (t2tb692 y))
  (times (tuple2 b1 d1) c1 (t2tb132 s) (t2tb687 t)))
  (and (mem7 x s) (mem23 y t)))))

(declare-fun t2tb5321 ((tuple21 c (set (tuple21 c d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 c (set (tuple21 c d))))) (sort
  (tuple2 c1 (set1 (tuple2 c1 d1))) (t2tb5321 x))))

(declare-fun tb2t5321 (uni) (tuple21 c (set (tuple21 c d))))

;; BridgeL
  (assert
  (forall ((i (tuple21 c (set (tuple21 c d)))))
  (! (= (tb2t5321 (t2tb5321 i)) i) :pattern ((t2tb5321 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 c1 (set1 (tuple2 c1 d1))) j)
     (= (t2tb5321 (tb2t5321 j)) j)) :pattern ((t2tb5321 (tb2t5321 j))) )))

(declare-fun t2tb5322 ((set (tuple21 c (set (tuple21 c d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 c (set (tuple21 c d)))))) (sort
  (set1 (tuple2 c1 (set1 (tuple2 c1 d1)))) (t2tb5322 x))))

(declare-fun tb2t5322 (uni) (set (tuple21 c (set (tuple21 c d)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 c (set (tuple21 c d))))))
  (! (= (tb2t5322 (t2tb5322 i)) i) :pattern ((t2tb5322 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 c1 (set1 (tuple2 c1 d1)))) j)
     (= (t2tb5322 (tb2t5322 j)) j)) :pattern ((t2tb5322 (tb2t5322 j))) )))

;; mem_times
  (assert
  (forall ((s (set c)) (t (set (set (tuple21 c d)))) (x c) (y (set (tuple21 c
  d))))
  (= (mem (tuple2 c1 (set1 (tuple2 c1 d1)))
  (Tuple2 c1 (set1 (tuple2 c1 d1)) (t2tb135 x) (t2tb689 y))
  (times (set1 (tuple2 c1 d1)) c1 (t2tb132 s) (t2tb688 t)))
  (and (mem7 x s) (mem22 y t)))))

(declare-fun t2tb5323 ((set (tuple21 c (tuple21 c d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 c (tuple21 c d))))) (sort
  (set1 (tuple2 c1 (tuple2 c1 d1))) (t2tb5323 x))))

(declare-fun tb2t5323 (uni) (set (tuple21 c (tuple21 c d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 c (tuple21 c d)))))
  (! (= (tb2t5323 (t2tb5323 i)) i) :pattern ((t2tb5323 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 c1 (tuple2 c1 d1))) j)
     (= (t2tb5323 (tb2t5323 j)) j)) :pattern ((t2tb5323 (tb2t5323 j))) )))

(declare-fun t2tb5324 ((tuple21 c (tuple21 c d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 c (tuple21 c d)))) (sort (tuple2 c1 (tuple2 c1 d1))
  (t2tb5324 x))))

(declare-fun tb2t5324 (uni) (tuple21 c (tuple21 c d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 c (tuple21 c d))))
  (! (= (tb2t5324 (t2tb5324 i)) i) :pattern ((t2tb5324 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 c1 (tuple2 c1 d1)) j) (= (t2tb5324 (tb2t5324 j)) j)) :pattern (
  (t2tb5324 (tb2t5324 j))) )))

;; mem_times
  (assert
  (forall ((s (set c)) (t (set (tuple21 c d))) (x c) (y (tuple21 c d)))
  (= (mem (tuple2 c1 (tuple2 c1 d1))
  (Tuple2 c1 (tuple2 c1 d1) (t2tb135 x) (t2tb693 y))
  (times (tuple2 c1 d1) c1 (t2tb132 s) (t2tb689 t)))
  (and (mem7 x s) (mem21 y t)))))

;; mem_times
  (assert
  (forall ((s (set c)) (t (set d)) (x c) (y d))
  (= (mem21 (tb2t693 (Tuple2 c1 d1 (t2tb135 x) (t2tb694 y))) (times8 s t))
  (and (mem7 x s) (mem20 y t)))))

(declare-fun t2tb210 ((set (tuple21 c (tuple21 a c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 c (tuple21 a c))))) (sort
  (set1 (tuple2 c1 (tuple2 a1 c1))) (t2tb210 x))))

(declare-fun tb2t210 (uni) (set (tuple21 c (tuple21 a c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 c (tuple21 a c)))))
  (! (= (tb2t210 (t2tb210 i)) i) :pattern ((t2tb210 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 c1 (tuple2 a1 c1))) j)
     (= (t2tb210 (tb2t210 j)) j)) :pattern ((t2tb210 (tb2t210 j))) )))

(declare-fun t2tb211 ((tuple21 c (tuple21 a c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 c (tuple21 a c)))) (sort (tuple2 c1 (tuple2 a1 c1))
  (t2tb211 x))))

(declare-fun tb2t211 (uni) (tuple21 c (tuple21 a c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 c (tuple21 a c))))
  (! (= (tb2t211 (t2tb211 i)) i) :pattern ((t2tb211 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 c1 (tuple2 a1 c1)) j) (= (t2tb211 (tb2t211 j)) j)) :pattern (
  (t2tb211 (tb2t211 j))) )))

;; mem_times
  (assert
  (forall ((s (set c)) (t (set (tuple21 a c))) (x c) (y (tuple21 a c)))
  (= (mem (tuple2 c1 (tuple2 a1 c1))
  (Tuple2 c1 (tuple2 a1 c1) (t2tb135 x) (t2tb133 y))
  (times (tuple2 a1 c1) c1 (t2tb132 s) (t2tb129 t)))
  (and (mem7 x s) (mem10 y t)))))

(declare-fun t2tb216 ((set (tuple21 c c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 c c)))) (sort (set1 (tuple2 c1 c1)) (t2tb216 x))))

(declare-fun tb2t216 (uni) (set (tuple21 c c)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 c c))))
  (! (= (tb2t216 (t2tb216 i)) i) :pattern ((t2tb216 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 c1 c1)) j) (= (t2tb216 (tb2t216 j)) j)) :pattern (
  (t2tb216 (tb2t216 j))) )))

(declare-fun t2tb217 ((tuple21 c c)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 c c))) (sort (tuple2 c1 c1) (t2tb217 x))))

(declare-fun tb2t217 (uni) (tuple21 c c))

;; BridgeL
  (assert
  (forall ((i (tuple21 c c)))
  (! (= (tb2t217 (t2tb217 i)) i) :pattern ((t2tb217 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 c1 c1) j) (= (t2tb217 (tb2t217 j)) j)) :pattern (
  (t2tb217 (tb2t217 j))) )))

;; mem_times
  (assert
  (forall ((s (set c)) (t (set c)) (x c) (y c))
  (= (mem (tuple2 c1 c1) (Tuple2 c1 c1 (t2tb135 x) (t2tb135 y))
  (times c1 c1 (t2tb132 s) (t2tb132 t))) (and (mem7 x s) (mem7 y t)))))

(declare-fun t2tb218 ((set (tuple21 c (set (tuple21 a b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 c (set (tuple21 a b)))))) (sort
  (set1 (tuple2 c1 (set1 (tuple2 a1 b1)))) (t2tb218 x))))

(declare-fun tb2t218 (uni) (set (tuple21 c (set (tuple21 a b)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 c (set (tuple21 a b))))))
  (! (= (tb2t218 (t2tb218 i)) i) :pattern ((t2tb218 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 c1 (set1 (tuple2 a1 b1)))) j)
     (= (t2tb218 (tb2t218 j)) j)) :pattern ((t2tb218 (tb2t218 j))) )))

(declare-fun t2tb219 ((tuple21 c (set (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 c (set (tuple21 a b))))) (sort
  (tuple2 c1 (set1 (tuple2 a1 b1))) (t2tb219 x))))

(declare-fun tb2t219 (uni) (tuple21 c (set (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (tuple21 c (set (tuple21 a b)))))
  (! (= (tb2t219 (t2tb219 i)) i) :pattern ((t2tb219 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 c1 (set1 (tuple2 a1 b1))) j)
     (= (t2tb219 (tb2t219 j)) j)) :pattern ((t2tb219 (tb2t219 j))) )))

;; mem_times
  (assert
  (forall ((s (set c)) (t (set (set (tuple21 a b)))) (x c) (y (set (tuple21 a
  b))))
  (= (mem (tuple2 c1 (set1 (tuple2 a1 b1)))
  (Tuple2 c1 (set1 (tuple2 a1 b1)) (t2tb135 x) (t2tb11 y))
  (times (set1 (tuple2 a1 b1)) c1 (t2tb132 s) (t2tb10 t)))
  (and (mem7 x s) (mem4 y t)))))

(declare-fun t2tb220 ((set (tuple21 c (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 c (tuple21 a b))))) (sort
  (set1 (tuple2 c1 (tuple2 a1 b1))) (t2tb220 x))))

(declare-fun tb2t220 (uni) (set (tuple21 c (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 c (tuple21 a b)))))
  (! (= (tb2t220 (t2tb220 i)) i) :pattern ((t2tb220 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 c1 (tuple2 a1 b1))) j)
     (= (t2tb220 (tb2t220 j)) j)) :pattern ((t2tb220 (tb2t220 j))) )))

(declare-fun t2tb221 ((tuple21 c (tuple21 a b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 c (tuple21 a b)))) (sort (tuple2 c1 (tuple2 a1 b1))
  (t2tb221 x))))

(declare-fun tb2t221 (uni) (tuple21 c (tuple21 a b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 c (tuple21 a b))))
  (! (= (tb2t221 (t2tb221 i)) i) :pattern ((t2tb221 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 c1 (tuple2 a1 b1)) j) (= (t2tb221 (tb2t221 j)) j)) :pattern (
  (t2tb221 (tb2t221 j))) )))

;; mem_times
  (assert
  (forall ((s (set c)) (t (set (tuple21 a b))) (x c) (y (tuple21 a b)))
  (= (mem (tuple2 c1 (tuple2 a1 b1))
  (Tuple2 c1 (tuple2 a1 b1) (t2tb135 x) (t2tb13 y))
  (times (tuple2 a1 b1) c1 (t2tb132 s) (t2tb11 t)))
  (and (mem7 x s) (mem3 y t)))))

(declare-fun t2tb222 ((set (tuple21 c b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 c b)))) (sort (set1 (tuple2 c1 b1)) (t2tb222 x))))

(declare-fun tb2t222 (uni) (set (tuple21 c b)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 c b))))
  (! (= (tb2t222 (t2tb222 i)) i) :pattern ((t2tb222 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 c1 b1)) j) (= (t2tb222 (tb2t222 j)) j)) :pattern (
  (t2tb222 (tb2t222 j))) )))

(declare-fun t2tb223 ((tuple21 c b)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 c b))) (sort (tuple2 c1 b1) (t2tb223 x))))

(declare-fun tb2t223 (uni) (tuple21 c b))

;; BridgeL
  (assert
  (forall ((i (tuple21 c b)))
  (! (= (tb2t223 (t2tb223 i)) i) :pattern ((t2tb223 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 c1 b1) j) (= (t2tb223 (tb2t223 j)) j)) :pattern (
  (t2tb223 (tb2t223 j))) )))

;; mem_times
  (assert
  (forall ((s (set c)) (t (set b)) (x c) (y b))
  (= (mem (tuple2 c1 b1) (Tuple2 c1 b1 (t2tb135 x) (t2tb14 y))
  (times b1 c1 (t2tb132 s) (t2tb12 t))) (and (mem7 x s) (mem2 y t)))))

(declare-fun t2tb224 ((set (tuple21 c a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 c a)))) (sort (set1 (tuple2 c1 a1)) (t2tb224 x))))

(declare-fun tb2t224 (uni) (set (tuple21 c a)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 c a))))
  (! (= (tb2t224 (t2tb224 i)) i) :pattern ((t2tb224 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 c1 a1)) j) (= (t2tb224 (tb2t224 j)) j)) :pattern (
  (t2tb224 (tb2t224 j))) )))

(declare-fun t2tb225 ((tuple21 c a)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 c a))) (sort (tuple2 c1 a1) (t2tb225 x))))

(declare-fun tb2t225 (uni) (tuple21 c a))

;; BridgeL
  (assert
  (forall ((i (tuple21 c a)))
  (! (= (tb2t225 (t2tb225 i)) i) :pattern ((t2tb225 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 c1 a1) j) (= (t2tb225 (tb2t225 j)) j)) :pattern (
  (t2tb225 (tb2t225 j))) )))

;; mem_times
  (assert
  (forall ((s (set c)) (t (set a)) (x c) (y a))
  (= (mem (tuple2 c1 a1) (Tuple2 c1 a1 (t2tb135 x) (t2tb2 y))
  (times a1 c1 (t2tb132 s) (t2tb1 t))) (and (mem7 x s) (mem1 y t)))))

;; mem_times
  (assert
  (forall ((b2 ty))
  (forall ((s (set c)) (t uni) (x c) (y uni))
  (= (mem (tuple2 c1 b2) (Tuple2 c1 b2 (t2tb135 x) y)
  (times b2 c1 (t2tb132 s) t)) (and (mem7 x s) (mem b2 y t))))))

(declare-fun t2tb5325 ((set (tuple21 (set (tuple21 a b)) (tuple21 (tuple21 a
  c) (tuple21 b d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a b)) (tuple21 (tuple21 a c)
  (tuple21 b d)))))) (sort
  (set1
  (tuple2 (set1 (tuple2 a1 b1)) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))))
  (t2tb5325 x))))

(declare-fun tb2t5325 (uni) (set (tuple21 (set (tuple21 a b))
  (tuple21 (tuple21 a c) (tuple21 b d)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a b)) (tuple21 (tuple21 a c)
  (tuple21 b d))))))
  (! (= (tb2t5325 (t2tb5325 i)) i) :pattern ((t2tb5325 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (tuple2 (set1 (tuple2 a1 b1)) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))))
     j) (= (t2tb5325 (tb2t5325 j)) j)) :pattern ((t2tb5325 (tb2t5325 j))) )))

(declare-fun t2tb5326 ((tuple21 (set (tuple21 a b)) (tuple21 (tuple21 a c)
  (tuple21 b d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a b)) (tuple21 (tuple21 a c) (tuple21 b
  d))))) (sort
  (tuple2 (set1 (tuple2 a1 b1)) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
  (t2tb5326 x))))

(declare-fun tb2t5326 (uni) (tuple21 (set (tuple21 a b)) (tuple21 (tuple21 a
  c) (tuple21 b d))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a b)) (tuple21 (tuple21 a c) (tuple21 b
  d))))) (! (= (tb2t5326 (t2tb5326 i)) i) :pattern ((t2tb5326 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (tuple2 (set1 (tuple2 a1 b1)) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))) j)
     (= (t2tb5326 (tb2t5326 j)) j)) :pattern ((t2tb5326 (tb2t5326 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set (tuple21 (tuple21 a c)
  (tuple21 b d)))) (x (set (tuple21 a b))) (y (tuple21 (tuple21 a c)
  (tuple21 b d))))
  (= (mem
  (tuple2 (set1 (tuple2 a1 b1)) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
  (Tuple2 (set1 (tuple2 a1 b1)) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))
  (t2tb11 x) (t2tb691 y))
  (times (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (set1 (tuple2 a1 b1))
  (t2tb10 s) (t2tb686 t))) (and (mem4 x s) (mem24 y t)))))

(declare-fun t2tb5327 ((set (tuple21 (set (tuple21 a b)) (tuple21 b
  d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a b)) (tuple21 b d))))) (sort
  (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 b1 d1))) (t2tb5327 x))))

(declare-fun tb2t5327 (uni) (set (tuple21 (set (tuple21 a b)) (tuple21 b
  d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a b)) (tuple21 b d)))))
  (! (= (tb2t5327 (t2tb5327 i)) i) :pattern ((t2tb5327 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 b1 d1))) j)
     (= (t2tb5327 (tb2t5327 j)) j)) :pattern ((t2tb5327 (tb2t5327 j))) )))

(declare-fun t2tb5328 ((tuple21 (set (tuple21 a b)) (tuple21 b d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a b)) (tuple21 b d)))) (sort
  (tuple2 (set1 (tuple2 a1 b1)) (tuple2 b1 d1)) (t2tb5328 x))))

(declare-fun tb2t5328 (uni) (tuple21 (set (tuple21 a b)) (tuple21 b d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a b)) (tuple21 b d))))
  (! (= (tb2t5328 (t2tb5328 i)) i) :pattern ((t2tb5328 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 a1 b1)) (tuple2 b1 d1)) j)
     (= (t2tb5328 (tb2t5328 j)) j)) :pattern ((t2tb5328 (tb2t5328 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set (tuple21 b d)))
  (x (set (tuple21 a b))) (y (tuple21 b d)))
  (= (mem (tuple2 (set1 (tuple2 a1 b1)) (tuple2 b1 d1))
  (Tuple2 (set1 (tuple2 a1 b1)) (tuple2 b1 d1) (t2tb11 x) (t2tb692 y))
  (times (tuple2 b1 d1) (set1 (tuple2 a1 b1)) (t2tb10 s) (t2tb687 t)))
  (and (mem4 x s) (mem23 y t)))))

(declare-fun t2tb5329 ((set (tuple21 (set (tuple21 a b)) (set (tuple21 c
  d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a b)) (set (tuple21 c d)))))) (sort
  (set1 (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 c1 d1)))) (t2tb5329 x))))

(declare-fun tb2t5329 (uni) (set (tuple21 (set (tuple21 a b)) (set (tuple21 c
  d)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a b)) (set (tuple21 c d))))))
  (! (= (tb2t5329 (t2tb5329 i)) i) :pattern ((t2tb5329 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 c1 d1)))) j)
     (= (t2tb5329 (tb2t5329 j)) j)) :pattern ((t2tb5329 (tb2t5329 j))) )))

(declare-fun t2tb5330 ((tuple21 (set (tuple21 a b)) (set (tuple21 c
  d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a b)) (set (tuple21 c d))))) (sort
  (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 c1 d1))) (t2tb5330 x))))

(declare-fun tb2t5330 (uni) (tuple21 (set (tuple21 a b)) (set (tuple21 c
  d))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a b)) (set (tuple21 c d)))))
  (! (= (tb2t5330 (t2tb5330 i)) i) :pattern ((t2tb5330 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 c1 d1))) j)
     (= (t2tb5330 (tb2t5330 j)) j)) :pattern ((t2tb5330 (tb2t5330 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set (set (tuple21 c d))))
  (x (set (tuple21 a b))) (y (set (tuple21 c d))))
  (= (mem (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 c1 d1)))
  (Tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 c1 d1)) (t2tb11 x) (t2tb689 y))
  (times (set1 (tuple2 c1 d1)) (set1 (tuple2 a1 b1)) (t2tb10 s) (t2tb688 t)))
  (and (mem4 x s) (mem22 y t)))))

(declare-fun t2tb5331 ((set (tuple21 (set (tuple21 a b)) (tuple21 c
  d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a b)) (tuple21 c d))))) (sort
  (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 c1 d1))) (t2tb5331 x))))

(declare-fun tb2t5331 (uni) (set (tuple21 (set (tuple21 a b)) (tuple21 c
  d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a b)) (tuple21 c d)))))
  (! (= (tb2t5331 (t2tb5331 i)) i) :pattern ((t2tb5331 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 c1 d1))) j)
     (= (t2tb5331 (tb2t5331 j)) j)) :pattern ((t2tb5331 (tb2t5331 j))) )))

(declare-fun t2tb5332 ((tuple21 (set (tuple21 a b)) (tuple21 c d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a b)) (tuple21 c d)))) (sort
  (tuple2 (set1 (tuple2 a1 b1)) (tuple2 c1 d1)) (t2tb5332 x))))

(declare-fun tb2t5332 (uni) (tuple21 (set (tuple21 a b)) (tuple21 c d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a b)) (tuple21 c d))))
  (! (= (tb2t5332 (t2tb5332 i)) i) :pattern ((t2tb5332 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 a1 b1)) (tuple2 c1 d1)) j)
     (= (t2tb5332 (tb2t5332 j)) j)) :pattern ((t2tb5332 (tb2t5332 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set (tuple21 c d)))
  (x (set (tuple21 a b))) (y (tuple21 c d)))
  (= (mem (tuple2 (set1 (tuple2 a1 b1)) (tuple2 c1 d1))
  (Tuple2 (set1 (tuple2 a1 b1)) (tuple2 c1 d1) (t2tb11 x) (t2tb693 y))
  (times (tuple2 c1 d1) (set1 (tuple2 a1 b1)) (t2tb10 s) (t2tb689 t)))
  (and (mem4 x s) (mem21 y t)))))

(declare-fun t2tb5333 ((set (tuple21 (set (tuple21 a b)) d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a b)) d)))) (sort
  (set1 (tuple2 (set1 (tuple2 a1 b1)) d1)) (t2tb5333 x))))

(declare-fun tb2t5333 (uni) (set (tuple21 (set (tuple21 a b)) d)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a b)) d))))
  (! (= (tb2t5333 (t2tb5333 i)) i) :pattern ((t2tb5333 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 a1 b1)) d1)) j)
     (= (t2tb5333 (tb2t5333 j)) j)) :pattern ((t2tb5333 (tb2t5333 j))) )))

(declare-fun t2tb5334 ((tuple21 (set (tuple21 a b)) d)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a b)) d))) (sort
  (tuple2 (set1 (tuple2 a1 b1)) d1) (t2tb5334 x))))

(declare-fun tb2t5334 (uni) (tuple21 (set (tuple21 a b)) d))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a b)) d)))
  (! (= (tb2t5334 (t2tb5334 i)) i) :pattern ((t2tb5334 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 a1 b1)) d1) j)
     (= (t2tb5334 (tb2t5334 j)) j)) :pattern ((t2tb5334 (tb2t5334 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set d)) (x (set (tuple21 a b)))
  (y d))
  (= (mem (tuple2 (set1 (tuple2 a1 b1)) d1)
  (Tuple2 (set1 (tuple2 a1 b1)) d1 (t2tb11 x) (t2tb694 y))
  (times d1 (set1 (tuple2 a1 b1)) (t2tb10 s) (t2tb690 t)))
  (and (mem4 x s) (mem20 y t)))))

(declare-fun t2tb228 ((tuple21 (set (tuple21 a b)) (tuple21 a c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a b)) (tuple21 a c)))) (sort
  (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 c1)) (t2tb228 x))))

(declare-fun tb2t228 (uni) (tuple21 (set (tuple21 a b)) (tuple21 a c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a b)) (tuple21 a c))))
  (! (= (tb2t228 (t2tb228 i)) i) :pattern ((t2tb228 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 c1)) j)
     (= (t2tb228 (tb2t228 j)) j)) :pattern ((t2tb228 (tb2t228 j))) )))

(declare-fun t2tb229 ((set (tuple21 (set (tuple21 a b)) (tuple21 a c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a b)) (tuple21 a c))))) (sort
  (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 c1))) (t2tb229 x))))

(declare-fun tb2t229 (uni) (set (tuple21 (set (tuple21 a b)) (tuple21 a c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a b)) (tuple21 a c)))))
  (! (= (tb2t229 (t2tb229 i)) i) :pattern ((t2tb229 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 c1))) j)
     (= (t2tb229 (tb2t229 j)) j)) :pattern ((t2tb229 (tb2t229 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set (tuple21 a c)))
  (x (set (tuple21 a b))) (y (tuple21 a c)))
  (= (mem (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 c1))
  (Tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 c1) (t2tb11 x) (t2tb133 y))
  (times (tuple2 a1 c1) (set1 (tuple2 a1 b1)) (t2tb10 s) (t2tb129 t)))
  (and (mem4 x s) (mem10 y t)))))

(declare-fun t2tb234 ((set (tuple21 (set (tuple21 a b)) c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a b)) c)))) (sort
  (set1 (tuple2 (set1 (tuple2 a1 b1)) c1)) (t2tb234 x))))

(declare-fun tb2t234 (uni) (set (tuple21 (set (tuple21 a b)) c)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a b)) c))))
  (! (= (tb2t234 (t2tb234 i)) i) :pattern ((t2tb234 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 a1 b1)) c1)) j)
     (= (t2tb234 (tb2t234 j)) j)) :pattern ((t2tb234 (tb2t234 j))) )))

(declare-fun t2tb235 ((tuple21 (set (tuple21 a b)) c)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a b)) c))) (sort
  (tuple2 (set1 (tuple2 a1 b1)) c1) (t2tb235 x))))

(declare-fun tb2t235 (uni) (tuple21 (set (tuple21 a b)) c))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a b)) c)))
  (! (= (tb2t235 (t2tb235 i)) i) :pattern ((t2tb235 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 a1 b1)) c1) j)
     (= (t2tb235 (tb2t235 j)) j)) :pattern ((t2tb235 (tb2t235 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set c)) (x (set (tuple21 a b)))
  (y c))
  (= (mem (tuple2 (set1 (tuple2 a1 b1)) c1)
  (Tuple2 (set1 (tuple2 a1 b1)) c1 (t2tb11 x) (t2tb135 y))
  (times c1 (set1 (tuple2 a1 b1)) (t2tb10 s) (t2tb132 t)))
  (and (mem4 x s) (mem7 y t)))))

(declare-fun t2tb15 ((set (tuple21 (set (tuple21 a b)) (set (tuple21 a
  b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a b)) (set (tuple21 a b)))))) (sort
  (set1 (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1)))) (t2tb15 x))))

(declare-fun tb2t15 (uni) (set (tuple21 (set (tuple21 a b)) (set (tuple21 a
  b)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a b)) (set (tuple21 a b))))))
  (! (= (tb2t15 (t2tb15 i)) i) :pattern ((t2tb15 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1)))) j)
     (= (t2tb15 (tb2t15 j)) j)) :pattern ((t2tb15 (tb2t15 j))) )))

(declare-fun t2tb16 ((tuple21 (set (tuple21 a b)) (set (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a b)) (set (tuple21 a b))))) (sort
  (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1))) (t2tb16 x))))

(declare-fun tb2t16 (uni) (tuple21 (set (tuple21 a b)) (set (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a b)) (set (tuple21 a b)))))
  (! (= (tb2t16 (t2tb16 i)) i) :pattern ((t2tb16 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1))) j)
     (= (t2tb16 (tb2t16 j)) j)) :pattern ((t2tb16 (tb2t16 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set (set (tuple21 a b))))
  (x (set (tuple21 a b))) (y (set (tuple21 a b))))
  (= (mem (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1)))
  (Tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1)) (t2tb11 x) (t2tb11 y))
  (times (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1)) (t2tb10 s) (t2tb10 t)))
  (and (mem4 x s) (mem4 y t)))))

(declare-fun t2tb17 ((set (tuple21 (set (tuple21 a b)) (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a b)) (tuple21 a b))))) (sort
  (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 b1))) (t2tb17 x))))

(declare-fun tb2t17 (uni) (set (tuple21 (set (tuple21 a b)) (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a b)) (tuple21 a b)))))
  (! (= (tb2t17 (t2tb17 i)) i) :pattern ((t2tb17 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 b1))) j)
     (= (t2tb17 (tb2t17 j)) j)) :pattern ((t2tb17 (tb2t17 j))) )))

(declare-fun t2tb18 ((tuple21 (set (tuple21 a b)) (tuple21 a b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a b)) (tuple21 a b)))) (sort
  (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 b1)) (t2tb18 x))))

(declare-fun tb2t18 (uni) (tuple21 (set (tuple21 a b)) (tuple21 a b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a b)) (tuple21 a b))))
  (! (= (tb2t18 (t2tb18 i)) i) :pattern ((t2tb18 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 b1)) j)
     (= (t2tb18 (tb2t18 j)) j)) :pattern ((t2tb18 (tb2t18 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set (tuple21 a b)))
  (x (set (tuple21 a b))) (y (tuple21 a b)))
  (= (mem (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 b1))
  (Tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 b1) (t2tb11 x) (t2tb13 y))
  (times (tuple2 a1 b1) (set1 (tuple2 a1 b1)) (t2tb10 s) (t2tb11 t)))
  (and (mem4 x s) (mem3 y t)))))

(declare-fun t2tb19 ((set (tuple21 (set (tuple21 a b)) b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a b)) b)))) (sort
  (set1 (tuple2 (set1 (tuple2 a1 b1)) b1)) (t2tb19 x))))

(declare-fun tb2t19 (uni) (set (tuple21 (set (tuple21 a b)) b)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a b)) b))))
  (! (= (tb2t19 (t2tb19 i)) i) :pattern ((t2tb19 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 a1 b1)) b1)) j)
     (= (t2tb19 (tb2t19 j)) j)) :pattern ((t2tb19 (tb2t19 j))) )))

(declare-fun t2tb20 ((tuple21 (set (tuple21 a b)) b)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a b)) b))) (sort
  (tuple2 (set1 (tuple2 a1 b1)) b1) (t2tb20 x))))

(declare-fun tb2t20 (uni) (tuple21 (set (tuple21 a b)) b))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a b)) b)))
  (! (= (tb2t20 (t2tb20 i)) i) :pattern ((t2tb20 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 a1 b1)) b1) j)
     (= (t2tb20 (tb2t20 j)) j)) :pattern ((t2tb20 (tb2t20 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set b)) (x (set (tuple21 a b)))
  (y b))
  (= (mem (tuple2 (set1 (tuple2 a1 b1)) b1)
  (Tuple2 (set1 (tuple2 a1 b1)) b1 (t2tb11 x) (t2tb14 y))
  (times b1 (set1 (tuple2 a1 b1)) (t2tb10 s) (t2tb12 t)))
  (and (mem4 x s) (mem2 y t)))))

(declare-fun t2tb21 ((tuple21 (set (tuple21 a b)) a)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a b)) a))) (sort
  (tuple2 (set1 (tuple2 a1 b1)) a1) (t2tb21 x))))

(declare-fun tb2t21 (uni) (tuple21 (set (tuple21 a b)) a))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a b)) a)))
  (! (= (tb2t21 (t2tb21 i)) i) :pattern ((t2tb21 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 a1 b1)) a1) j)
     (= (t2tb21 (tb2t21 j)) j)) :pattern ((t2tb21 (tb2t21 j))) )))

(declare-fun t2tb22 ((set (tuple21 (set (tuple21 a b)) a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a b)) a)))) (sort
  (set1 (tuple2 (set1 (tuple2 a1 b1)) a1)) (t2tb22 x))))

(declare-fun tb2t22 (uni) (set (tuple21 (set (tuple21 a b)) a)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a b)) a))))
  (! (= (tb2t22 (t2tb22 i)) i) :pattern ((t2tb22 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 a1 b1)) a1)) j)
     (= (t2tb22 (tb2t22 j)) j)) :pattern ((t2tb22 (tb2t22 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set a)) (x (set (tuple21 a b)))
  (y a))
  (= (mem (tuple2 (set1 (tuple2 a1 b1)) a1)
  (Tuple2 (set1 (tuple2 a1 b1)) a1 (t2tb11 x) (t2tb2 y))
  (times a1 (set1 (tuple2 a1 b1)) (t2tb10 s) (t2tb1 t)))
  (and (mem4 x s) (mem1 y t)))))

;; mem_times
  (assert
  (forall ((b2 ty))
  (forall ((s (set (set (tuple21 a b)))) (t uni) (x (set (tuple21 a b)))
  (y uni))
  (= (mem (tuple2 (set1 (tuple2 a1 b1)) b2)
  (Tuple2 (set1 (tuple2 a1 b1)) b2 (t2tb11 x) y)
  (times b2 (set1 (tuple2 a1 b1)) (t2tb10 s) t))
  (and (mem4 x s) (mem b2 y t))))))

(declare-fun t2tb5335 ((set (tuple21 (tuple21 a b) (tuple21 (tuple21 a c)
  (tuple21 b d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) (tuple21 (tuple21 a c) (tuple21 b
  d)))))) (sort
  (set1 (tuple2 (tuple2 a1 b1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))))
  (t2tb5335 x))))

(declare-fun tb2t5335 (uni) (set (tuple21 (tuple21 a b) (tuple21 (tuple21 a
  c) (tuple21 b d)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a b) (tuple21 (tuple21 a c) (tuple21 b
  d)))))) (! (= (tb2t5335 (t2tb5335 i)) i) :pattern ((t2tb5335 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 a1 b1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))) j)
     (= (t2tb5335 (tb2t5335 j)) j)) :pattern ((t2tb5335 (tb2t5335 j))) )))

(declare-fun t2tb5336 ((tuple21 (tuple21 a b) (tuple21 (tuple21 a c)
  (tuple21 b d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a b) (tuple21 (tuple21 a c) (tuple21 b d)))))
  (sort (tuple2 (tuple2 a1 b1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
  (t2tb5336 x))))

(declare-fun tb2t5336 (uni) (tuple21 (tuple21 a b) (tuple21 (tuple21 a c)
  (tuple21 b d))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a b) (tuple21 (tuple21 a c) (tuple21 b d)))))
  (! (= (tb2t5336 (t2tb5336 i)) i) :pattern ((t2tb5336 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 b1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
     j) (= (t2tb5336 (tb2t5336 j)) j)) :pattern ((t2tb5336 (tb2t5336 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (tuple21 (tuple21 a c) (tuple21 b
  d)))) (x (tuple21 a b)) (y (tuple21 (tuple21 a c) (tuple21 b d))))
  (= (mem (tuple2 (tuple2 a1 b1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
  (Tuple2 (tuple2 a1 b1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb13 x)
  (t2tb691 y))
  (times (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 a1 b1) (t2tb11 s)
  (t2tb686 t))) (and (mem3 x s) (mem24 y t)))))

(declare-fun t2tb5337 ((tuple21 (tuple21 a b) (tuple21 b d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a b) (tuple21 b d)))) (sort
  (tuple2 (tuple2 a1 b1) (tuple2 b1 d1)) (t2tb5337 x))))

(declare-fun tb2t5337 (uni) (tuple21 (tuple21 a b) (tuple21 b d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a b) (tuple21 b d))))
  (! (= (tb2t5337 (t2tb5337 i)) i) :pattern ((t2tb5337 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 b1) (tuple2 b1 d1)) j)
     (= (t2tb5337 (tb2t5337 j)) j)) :pattern ((t2tb5337 (tb2t5337 j))) )))

(declare-fun t2tb5338 ((set (tuple21 (tuple21 a b) (tuple21 b d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) (tuple21 b d))))) (sort
  (set1 (tuple2 (tuple2 a1 b1) (tuple2 b1 d1))) (t2tb5338 x))))

(declare-fun tb2t5338 (uni) (set (tuple21 (tuple21 a b) (tuple21 b d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a b) (tuple21 b d)))))
  (! (= (tb2t5338 (t2tb5338 i)) i) :pattern ((t2tb5338 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 b1) (tuple2 b1 d1))) j)
     (= (t2tb5338 (tb2t5338 j)) j)) :pattern ((t2tb5338 (tb2t5338 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (tuple21 b d))) (x (tuple21 a b))
  (y (tuple21 b d)))
  (= (mem (tuple2 (tuple2 a1 b1) (tuple2 b1 d1))
  (Tuple2 (tuple2 a1 b1) (tuple2 b1 d1) (t2tb13 x) (t2tb692 y))
  (times (tuple2 b1 d1) (tuple2 a1 b1) (t2tb11 s) (t2tb687 t)))
  (and (mem3 x s) (mem23 y t)))))

(declare-fun t2tb5339 ((set (tuple21 (tuple21 a b) (set (tuple21 c
  d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) (set (tuple21 c d)))))) (sort
  (set1 (tuple2 (tuple2 a1 b1) (set1 (tuple2 c1 d1)))) (t2tb5339 x))))

(declare-fun tb2t5339 (uni) (set (tuple21 (tuple21 a b) (set (tuple21 c
  d)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a b) (set (tuple21 c d))))))
  (! (= (tb2t5339 (t2tb5339 i)) i) :pattern ((t2tb5339 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 b1) (set1 (tuple2 c1 d1)))) j)
     (= (t2tb5339 (tb2t5339 j)) j)) :pattern ((t2tb5339 (tb2t5339 j))) )))

(declare-fun t2tb5340 ((tuple21 (tuple21 a b) (set (tuple21 c d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a b) (set (tuple21 c d))))) (sort
  (tuple2 (tuple2 a1 b1) (set1 (tuple2 c1 d1))) (t2tb5340 x))))

(declare-fun tb2t5340 (uni) (tuple21 (tuple21 a b) (set (tuple21 c d))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a b) (set (tuple21 c d)))))
  (! (= (tb2t5340 (t2tb5340 i)) i) :pattern ((t2tb5340 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 b1) (set1 (tuple2 c1 d1))) j)
     (= (t2tb5340 (tb2t5340 j)) j)) :pattern ((t2tb5340 (tb2t5340 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (set (tuple21 c d))))
  (x (tuple21 a b)) (y (set (tuple21 c d))))
  (= (mem (tuple2 (tuple2 a1 b1) (set1 (tuple2 c1 d1)))
  (Tuple2 (tuple2 a1 b1) (set1 (tuple2 c1 d1)) (t2tb13 x) (t2tb689 y))
  (times (set1 (tuple2 c1 d1)) (tuple2 a1 b1) (t2tb11 s) (t2tb688 t)))
  (and (mem3 x s) (mem22 y t)))))

(declare-fun t2tb879 ((set (tuple21 (tuple21 a b) (tuple21 c d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) (tuple21 c d))))) (sort
  (set1 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1))) (t2tb879 x))))

(declare-fun tb2t879 (uni) (set (tuple21 (tuple21 a b) (tuple21 c d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a b) (tuple21 c d)))))
  (! (= (tb2t879 (t2tb879 i)) i) :pattern ((t2tb879 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1))) j)
     (= (t2tb879 (tb2t879 j)) j)) :pattern ((t2tb879 (tb2t879 j))) )))

(declare-fun t2tb880 ((tuple21 (tuple21 a b) (tuple21 c d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a b) (tuple21 c d)))) (sort
  (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) (t2tb880 x))))

(declare-fun tb2t880 (uni) (tuple21 (tuple21 a b) (tuple21 c d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a b) (tuple21 c d))))
  (! (= (tb2t880 (t2tb880 i)) i) :pattern ((t2tb880 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) j)
     (= (t2tb880 (tb2t880 j)) j)) :pattern ((t2tb880 (tb2t880 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (tuple21 c d))) (x (tuple21 a b))
  (y (tuple21 c d)))
  (= (mem (tuple2 (tuple2 a1 b1) (tuple2 c1 d1))
  (Tuple2 (tuple2 a1 b1) (tuple2 c1 d1) (t2tb13 x) (t2tb693 y))
  (times (tuple2 c1 d1) (tuple2 a1 b1) (t2tb11 s) (t2tb689 t)))
  (and (mem3 x s) (mem21 y t)))))

(declare-fun t2tb5341 ((set (tuple21 (tuple21 a b) d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) d)))) (sort
  (set1 (tuple2 (tuple2 a1 b1) d1)) (t2tb5341 x))))

(declare-fun tb2t5341 (uni) (set (tuple21 (tuple21 a b) d)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a b) d))))
  (! (= (tb2t5341 (t2tb5341 i)) i) :pattern ((t2tb5341 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 b1) d1)) j)
     (= (t2tb5341 (tb2t5341 j)) j)) :pattern ((t2tb5341 (tb2t5341 j))) )))

(declare-fun t2tb5342 ((tuple21 (tuple21 a b) d)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a b) d))) (sort (tuple2 (tuple2 a1 b1) d1)
  (t2tb5342 x))))

(declare-fun tb2t5342 (uni) (tuple21 (tuple21 a b) d))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a b) d)))
  (! (= (tb2t5342 (t2tb5342 i)) i) :pattern ((t2tb5342 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 b1) d1) j) (= (t2tb5342 (tb2t5342 j)) j)) :pattern (
  (t2tb5342 (tb2t5342 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a b))) (t (set d)) (x (tuple21 a b)) (y d))
  (= (mem (tuple2 (tuple2 a1 b1) d1)
  (Tuple2 (tuple2 a1 b1) d1 (t2tb13 x) (t2tb694 y))
  (times d1 (tuple2 a1 b1) (t2tb11 s) (t2tb690 t)))
  (and (mem3 x s) (mem20 y t)))))

(declare-fun t2tb238 ((set (tuple21 (tuple21 a b) (tuple21 a c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) (tuple21 a c))))) (sort
  (set1 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1))) (t2tb238 x))))

(declare-fun tb2t238 (uni) (set (tuple21 (tuple21 a b) (tuple21 a c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a b) (tuple21 a c)))))
  (! (= (tb2t238 (t2tb238 i)) i) :pattern ((t2tb238 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1))) j)
     (= (t2tb238 (tb2t238 j)) j)) :pattern ((t2tb238 (tb2t238 j))) )))

(declare-fun t2tb239 ((tuple21 (tuple21 a b) (tuple21 a c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a b) (tuple21 a c)))) (sort
  (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) (t2tb239 x))))

(declare-fun tb2t239 (uni) (tuple21 (tuple21 a b) (tuple21 a c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a b) (tuple21 a c))))
  (! (= (tb2t239 (t2tb239 i)) i) :pattern ((t2tb239 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) j)
     (= (t2tb239 (tb2t239 j)) j)) :pattern ((t2tb239 (tb2t239 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (tuple21 a c))) (x (tuple21 a b))
  (y (tuple21 a c)))
  (= (mem (tuple2 (tuple2 a1 b1) (tuple2 a1 c1))
  (Tuple2 (tuple2 a1 b1) (tuple2 a1 c1) (t2tb13 x) (t2tb133 y))
  (times (tuple2 a1 c1) (tuple2 a1 b1) (t2tb11 s) (t2tb129 t)))
  (and (mem3 x s) (mem10 y t)))))

(declare-fun t2tb244 ((tuple21 (tuple21 a b) c)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a b) c))) (sort (tuple2 (tuple2 a1 b1) c1)
  (t2tb244 x))))

(declare-fun tb2t244 (uni) (tuple21 (tuple21 a b) c))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a b) c)))
  (! (= (tb2t244 (t2tb244 i)) i) :pattern ((t2tb244 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 b1) c1) j) (= (t2tb244 (tb2t244 j)) j)) :pattern (
  (t2tb244 (tb2t244 j))) )))

(declare-fun t2tb245 ((set (tuple21 (tuple21 a b) c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) c)))) (sort
  (set1 (tuple2 (tuple2 a1 b1) c1)) (t2tb245 x))))

(declare-fun tb2t245 (uni) (set (tuple21 (tuple21 a b) c)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a b) c))))
  (! (= (tb2t245 (t2tb245 i)) i) :pattern ((t2tb245 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 b1) c1)) j)
     (= (t2tb245 (tb2t245 j)) j)) :pattern ((t2tb245 (tb2t245 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a b))) (t (set c)) (x (tuple21 a b)) (y c))
  (= (mem (tuple2 (tuple2 a1 b1) c1)
  (Tuple2 (tuple2 a1 b1) c1 (t2tb13 x) (t2tb135 y))
  (times c1 (tuple2 a1 b1) (t2tb11 s) (t2tb132 t)))
  (and (mem3 x s) (mem7 y t)))))

(declare-fun t2tb23 ((set (tuple21 (tuple21 a b) (set (tuple21 a b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) (set (tuple21 a b)))))) (sort
  (set1 (tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 b1)))) (t2tb23 x))))

(declare-fun tb2t23 (uni) (set (tuple21 (tuple21 a b) (set (tuple21 a b)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a b) (set (tuple21 a b))))))
  (! (= (tb2t23 (t2tb23 i)) i) :pattern ((t2tb23 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 b1)))) j)
     (= (t2tb23 (tb2t23 j)) j)) :pattern ((t2tb23 (tb2t23 j))) )))

(declare-fun t2tb24 ((tuple21 (tuple21 a b) (set (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a b) (set (tuple21 a b))))) (sort
  (tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 b1))) (t2tb24 x))))

(declare-fun tb2t24 (uni) (tuple21 (tuple21 a b) (set (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a b) (set (tuple21 a b)))))
  (! (= (tb2t24 (t2tb24 i)) i) :pattern ((t2tb24 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 b1))) j)
     (= (t2tb24 (tb2t24 j)) j)) :pattern ((t2tb24 (tb2t24 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (set (tuple21 a b))))
  (x (tuple21 a b)) (y (set (tuple21 a b))))
  (= (mem (tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 b1)))
  (Tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 b1)) (t2tb13 x) (t2tb11 y))
  (times (set1 (tuple2 a1 b1)) (tuple2 a1 b1) (t2tb11 s) (t2tb10 t)))
  (and (mem3 x s) (mem4 y t)))))

(declare-fun t2tb25 ((set (tuple21 (tuple21 a b) (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) (tuple21 a b))))) (sort
  (set1 (tuple2 (tuple2 a1 b1) (tuple2 a1 b1))) (t2tb25 x))))

(declare-fun tb2t25 (uni) (set (tuple21 (tuple21 a b) (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a b) (tuple21 a b)))))
  (! (= (tb2t25 (t2tb25 i)) i) :pattern ((t2tb25 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 b1) (tuple2 a1 b1))) j)
     (= (t2tb25 (tb2t25 j)) j)) :pattern ((t2tb25 (tb2t25 j))) )))

(declare-fun t2tb26 ((tuple21 (tuple21 a b) (tuple21 a b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a b) (tuple21 a b)))) (sort
  (tuple2 (tuple2 a1 b1) (tuple2 a1 b1)) (t2tb26 x))))

(declare-fun tb2t26 (uni) (tuple21 (tuple21 a b) (tuple21 a b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a b) (tuple21 a b))))
  (! (= (tb2t26 (t2tb26 i)) i) :pattern ((t2tb26 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 b1) (tuple2 a1 b1)) j)
     (= (t2tb26 (tb2t26 j)) j)) :pattern ((t2tb26 (tb2t26 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (tuple21 a b))) (x (tuple21 a b))
  (y (tuple21 a b)))
  (= (mem (tuple2 (tuple2 a1 b1) (tuple2 a1 b1))
  (Tuple2 (tuple2 a1 b1) (tuple2 a1 b1) (t2tb13 x) (t2tb13 y))
  (times (tuple2 a1 b1) (tuple2 a1 b1) (t2tb11 s) (t2tb11 t)))
  (and (mem3 x s) (mem3 y t)))))

(declare-fun t2tb27 ((set (tuple21 (tuple21 a b) b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) b)))) (sort
  (set1 (tuple2 (tuple2 a1 b1) b1)) (t2tb27 x))))

(declare-fun tb2t27 (uni) (set (tuple21 (tuple21 a b) b)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a b) b))))
  (! (= (tb2t27 (t2tb27 i)) i) :pattern ((t2tb27 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 b1) b1)) j)
     (= (t2tb27 (tb2t27 j)) j)) :pattern ((t2tb27 (tb2t27 j))) )))

(declare-fun t2tb28 ((tuple21 (tuple21 a b) b)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a b) b))) (sort (tuple2 (tuple2 a1 b1) b1)
  (t2tb28 x))))

(declare-fun tb2t28 (uni) (tuple21 (tuple21 a b) b))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a b) b)))
  (! (= (tb2t28 (t2tb28 i)) i) :pattern ((t2tb28 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 b1) b1) j) (= (t2tb28 (tb2t28 j)) j)) :pattern (
  (t2tb28 (tb2t28 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a b))) (t (set b)) (x (tuple21 a b)) (y b))
  (= (mem (tuple2 (tuple2 a1 b1) b1)
  (Tuple2 (tuple2 a1 b1) b1 (t2tb13 x) (t2tb14 y))
  (times b1 (tuple2 a1 b1) (t2tb11 s) (t2tb12 t)))
  (and (mem3 x s) (mem2 y t)))))

(declare-fun t2tb29 ((set (tuple21 (tuple21 a b) a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) a)))) (sort
  (set1 (tuple2 (tuple2 a1 b1) a1)) (t2tb29 x))))

(declare-fun tb2t29 (uni) (set (tuple21 (tuple21 a b) a)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a b) a))))
  (! (= (tb2t29 (t2tb29 i)) i) :pattern ((t2tb29 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 b1) a1)) j)
     (= (t2tb29 (tb2t29 j)) j)) :pattern ((t2tb29 (tb2t29 j))) )))

(declare-fun t2tb30 ((tuple21 (tuple21 a b) a)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a b) a))) (sort (tuple2 (tuple2 a1 b1) a1)
  (t2tb30 x))))

(declare-fun tb2t30 (uni) (tuple21 (tuple21 a b) a))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a b) a)))
  (! (= (tb2t30 (t2tb30 i)) i) :pattern ((t2tb30 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 b1) a1) j) (= (t2tb30 (tb2t30 j)) j)) :pattern (
  (t2tb30 (tb2t30 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a b))) (t (set a)) (x (tuple21 a b)) (y a))
  (= (mem (tuple2 (tuple2 a1 b1) a1)
  (Tuple2 (tuple2 a1 b1) a1 (t2tb13 x) (t2tb2 y))
  (times a1 (tuple2 a1 b1) (t2tb11 s) (t2tb1 t)))
  (and (mem3 x s) (mem1 y t)))))

;; mem_times
  (assert
  (forall ((b2 ty))
  (forall ((s (set (tuple21 a b))) (t uni) (x (tuple21 a b)) (y uni))
  (= (mem (tuple2 (tuple2 a1 b1) b2) (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) y)
  (times b2 (tuple2 a1 b1) (t2tb11 s) t)) (and (mem3 x s) (mem b2 y t))))))

(declare-fun t2tb5343 ((set (tuple21 b (tuple21 (tuple21 a c) (tuple21 b
  d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 b (tuple21 (tuple21 a c) (tuple21 b d)))))) (sort
  (set1 (tuple2 b1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))) (t2tb5343 x))))

(declare-fun tb2t5343 (uni) (set (tuple21 b (tuple21 (tuple21 a c) (tuple21 b
  d)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 b (tuple21 (tuple21 a c) (tuple21 b d))))))
  (! (= (tb2t5343 (t2tb5343 i)) i) :pattern ((t2tb5343 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 b1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))) j)
     (= (t2tb5343 (tb2t5343 j)) j)) :pattern ((t2tb5343 (tb2t5343 j))) )))

(declare-fun t2tb5344 ((tuple21 b (tuple21 (tuple21 a c) (tuple21 b
  d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 b (tuple21 (tuple21 a c) (tuple21 b d))))) (sort
  (tuple2 b1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))) (t2tb5344 x))))

(declare-fun tb2t5344 (uni) (tuple21 b (tuple21 (tuple21 a c) (tuple21 b
  d))))

;; BridgeL
  (assert
  (forall ((i (tuple21 b (tuple21 (tuple21 a c) (tuple21 b d)))))
  (! (= (tb2t5344 (t2tb5344 i)) i) :pattern ((t2tb5344 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 b1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))) j)
     (= (t2tb5344 (tb2t5344 j)) j)) :pattern ((t2tb5344 (tb2t5344 j))) )))

;; mem_times
  (assert
  (forall ((s (set b)) (t (set (tuple21 (tuple21 a c) (tuple21 b d)))) (x b)
  (y (tuple21 (tuple21 a c) (tuple21 b d))))
  (= (mem (tuple2 b1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
  (Tuple2 b1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb14 x) (t2tb691 y))
  (times (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) b1 (t2tb12 s) (t2tb686 t)))
  (and (mem2 x s) (mem24 y t)))))

(declare-fun t2tb5345 ((set (tuple21 b (tuple21 b d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 b (tuple21 b d))))) (sort
  (set1 (tuple2 b1 (tuple2 b1 d1))) (t2tb5345 x))))

(declare-fun tb2t5345 (uni) (set (tuple21 b (tuple21 b d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 b (tuple21 b d)))))
  (! (= (tb2t5345 (t2tb5345 i)) i) :pattern ((t2tb5345 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 b1 (tuple2 b1 d1))) j)
     (= (t2tb5345 (tb2t5345 j)) j)) :pattern ((t2tb5345 (tb2t5345 j))) )))

(declare-fun t2tb5346 ((tuple21 b (tuple21 b d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 b (tuple21 b d)))) (sort (tuple2 b1 (tuple2 b1 d1))
  (t2tb5346 x))))

(declare-fun tb2t5346 (uni) (tuple21 b (tuple21 b d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 b (tuple21 b d))))
  (! (= (tb2t5346 (t2tb5346 i)) i) :pattern ((t2tb5346 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 b1 (tuple2 b1 d1)) j) (= (t2tb5346 (tb2t5346 j)) j)) :pattern (
  (t2tb5346 (tb2t5346 j))) )))

;; mem_times
  (assert
  (forall ((s (set b)) (t (set (tuple21 b d))) (x b) (y (tuple21 b d)))
  (= (mem (tuple2 b1 (tuple2 b1 d1))
  (Tuple2 b1 (tuple2 b1 d1) (t2tb14 x) (t2tb692 y))
  (times (tuple2 b1 d1) b1 (t2tb12 s) (t2tb687 t)))
  (and (mem2 x s) (mem23 y t)))))

(declare-fun t2tb5347 ((set (tuple21 b (set (tuple21 c d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 b (set (tuple21 c d)))))) (sort
  (set1 (tuple2 b1 (set1 (tuple2 c1 d1)))) (t2tb5347 x))))

(declare-fun tb2t5347 (uni) (set (tuple21 b (set (tuple21 c d)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 b (set (tuple21 c d))))))
  (! (= (tb2t5347 (t2tb5347 i)) i) :pattern ((t2tb5347 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 b1 (set1 (tuple2 c1 d1)))) j)
     (= (t2tb5347 (tb2t5347 j)) j)) :pattern ((t2tb5347 (tb2t5347 j))) )))

(declare-fun t2tb5348 ((tuple21 b (set (tuple21 c d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 b (set (tuple21 c d))))) (sort
  (tuple2 b1 (set1 (tuple2 c1 d1))) (t2tb5348 x))))

(declare-fun tb2t5348 (uni) (tuple21 b (set (tuple21 c d))))

;; BridgeL
  (assert
  (forall ((i (tuple21 b (set (tuple21 c d)))))
  (! (= (tb2t5348 (t2tb5348 i)) i) :pattern ((t2tb5348 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 b1 (set1 (tuple2 c1 d1))) j)
     (= (t2tb5348 (tb2t5348 j)) j)) :pattern ((t2tb5348 (tb2t5348 j))) )))

;; mem_times
  (assert
  (forall ((s (set b)) (t (set (set (tuple21 c d)))) (x b) (y (set (tuple21 c
  d))))
  (= (mem (tuple2 b1 (set1 (tuple2 c1 d1)))
  (Tuple2 b1 (set1 (tuple2 c1 d1)) (t2tb14 x) (t2tb689 y))
  (times (set1 (tuple2 c1 d1)) b1 (t2tb12 s) (t2tb688 t)))
  (and (mem2 x s) (mem22 y t)))))

(declare-fun t2tb891 ((set (tuple21 b (tuple21 c d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 b (tuple21 c d))))) (sort
  (set1 (tuple2 b1 (tuple2 c1 d1))) (t2tb891 x))))

(declare-fun tb2t891 (uni) (set (tuple21 b (tuple21 c d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 b (tuple21 c d)))))
  (! (= (tb2t891 (t2tb891 i)) i) :pattern ((t2tb891 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 b1 (tuple2 c1 d1))) j)
     (= (t2tb891 (tb2t891 j)) j)) :pattern ((t2tb891 (tb2t891 j))) )))

(declare-fun t2tb892 ((tuple21 b (tuple21 c d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 b (tuple21 c d)))) (sort (tuple2 b1 (tuple2 c1 d1))
  (t2tb892 x))))

(declare-fun tb2t892 (uni) (tuple21 b (tuple21 c d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 b (tuple21 c d))))
  (! (= (tb2t892 (t2tb892 i)) i) :pattern ((t2tb892 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 b1 (tuple2 c1 d1)) j) (= (t2tb892 (tb2t892 j)) j)) :pattern (
  (t2tb892 (tb2t892 j))) )))

;; mem_times
  (assert
  (forall ((s (set b)) (t (set (tuple21 c d))) (x b) (y (tuple21 c d)))
  (= (mem (tuple2 b1 (tuple2 c1 d1))
  (Tuple2 b1 (tuple2 c1 d1) (t2tb14 x) (t2tb693 y))
  (times (tuple2 c1 d1) b1 (t2tb12 s) (t2tb689 t)))
  (and (mem2 x s) (mem21 y t)))))

;; mem_times
  (assert
  (forall ((s (set b)) (t (set d)) (x b) (y d))
  (= (mem23 (tb2t692 (Tuple2 b1 d1 (t2tb14 x) (t2tb694 y))) (times10 s t))
  (and (mem2 x s) (mem20 y t)))))

(declare-fun t2tb248 ((set (tuple21 b (tuple21 a c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 b (tuple21 a c))))) (sort
  (set1 (tuple2 b1 (tuple2 a1 c1))) (t2tb248 x))))

(declare-fun tb2t248 (uni) (set (tuple21 b (tuple21 a c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 b (tuple21 a c)))))
  (! (= (tb2t248 (t2tb248 i)) i) :pattern ((t2tb248 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 b1 (tuple2 a1 c1))) j)
     (= (t2tb248 (tb2t248 j)) j)) :pattern ((t2tb248 (tb2t248 j))) )))

(declare-fun t2tb249 ((tuple21 b (tuple21 a c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 b (tuple21 a c)))) (sort (tuple2 b1 (tuple2 a1 c1))
  (t2tb249 x))))

(declare-fun tb2t249 (uni) (tuple21 b (tuple21 a c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 b (tuple21 a c))))
  (! (= (tb2t249 (t2tb249 i)) i) :pattern ((t2tb249 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 b1 (tuple2 a1 c1)) j) (= (t2tb249 (tb2t249 j)) j)) :pattern (
  (t2tb249 (tb2t249 j))) )))

;; mem_times
  (assert
  (forall ((s (set b)) (t (set (tuple21 a c))) (x b) (y (tuple21 a c)))
  (= (mem (tuple2 b1 (tuple2 a1 c1))
  (Tuple2 b1 (tuple2 a1 c1) (t2tb14 x) (t2tb133 y))
  (times (tuple2 a1 c1) b1 (t2tb12 s) (t2tb129 t)))
  (and (mem2 x s) (mem10 y t)))))

(declare-fun t2tb131 ((set (tuple21 b c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 b c)))) (sort (set1 (tuple2 b1 c1)) (t2tb131 x))))

(declare-fun tb2t131 (uni) (set (tuple21 b c)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 b c))))
  (! (= (tb2t131 (t2tb131 i)) i) :pattern ((t2tb131 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 b1 c1)) j) (= (t2tb131 (tb2t131 j)) j)) :pattern (
  (t2tb131 (tb2t131 j))) )))

(declare-fun t2tb134 ((tuple21 b c)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 b c))) (sort (tuple2 b1 c1) (t2tb134 x))))

(declare-fun tb2t134 (uni) (tuple21 b c))

;; BridgeL
  (assert
  (forall ((i (tuple21 b c)))
  (! (= (tb2t134 (t2tb134 i)) i) :pattern ((t2tb134 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 b1 c1) j) (= (t2tb134 (tb2t134 j)) j)) :pattern (
  (t2tb134 (tb2t134 j))) )))

;; mem_times
  (assert
  (forall ((s (set b)) (t (set c)) (x b) (y c))
  (= (mem (tuple2 b1 c1) (Tuple2 b1 c1 (t2tb14 x) (t2tb135 y))
  (times c1 b1 (t2tb12 s) (t2tb132 t))) (and (mem2 x s) (mem7 y t)))))

(declare-fun t2tb31 ((set (tuple21 b (set (tuple21 a b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 b (set (tuple21 a b)))))) (sort
  (set1 (tuple2 b1 (set1 (tuple2 a1 b1)))) (t2tb31 x))))

(declare-fun tb2t31 (uni) (set (tuple21 b (set (tuple21 a b)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 b (set (tuple21 a b))))))
  (! (= (tb2t31 (t2tb31 i)) i) :pattern ((t2tb31 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 b1 (set1 (tuple2 a1 b1)))) j)
     (= (t2tb31 (tb2t31 j)) j)) :pattern ((t2tb31 (tb2t31 j))) )))

(declare-fun t2tb32 ((tuple21 b (set (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 b (set (tuple21 a b))))) (sort
  (tuple2 b1 (set1 (tuple2 a1 b1))) (t2tb32 x))))

(declare-fun tb2t32 (uni) (tuple21 b (set (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (tuple21 b (set (tuple21 a b)))))
  (! (= (tb2t32 (t2tb32 i)) i) :pattern ((t2tb32 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 b1 (set1 (tuple2 a1 b1))) j)
     (= (t2tb32 (tb2t32 j)) j)) :pattern ((t2tb32 (tb2t32 j))) )))

;; mem_times
  (assert
  (forall ((s (set b)) (t (set (set (tuple21 a b)))) (x b) (y (set (tuple21 a
  b))))
  (= (mem (tuple2 b1 (set1 (tuple2 a1 b1)))
  (Tuple2 b1 (set1 (tuple2 a1 b1)) (t2tb14 x) (t2tb11 y))
  (times (set1 (tuple2 a1 b1)) b1 (t2tb12 s) (t2tb10 t)))
  (and (mem2 x s) (mem4 y t)))))

(declare-fun t2tb33 ((tuple21 b (tuple21 a b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 b (tuple21 a b)))) (sort (tuple2 b1 (tuple2 a1 b1))
  (t2tb33 x))))

(declare-fun tb2t33 (uni) (tuple21 b (tuple21 a b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 b (tuple21 a b))))
  (! (= (tb2t33 (t2tb33 i)) i) :pattern ((t2tb33 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 b1 (tuple2 a1 b1)) j) (= (t2tb33 (tb2t33 j)) j)) :pattern (
  (t2tb33 (tb2t33 j))) )))

(declare-fun t2tb34 ((set (tuple21 b (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 b (tuple21 a b))))) (sort
  (set1 (tuple2 b1 (tuple2 a1 b1))) (t2tb34 x))))

(declare-fun tb2t34 (uni) (set (tuple21 b (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 b (tuple21 a b)))))
  (! (= (tb2t34 (t2tb34 i)) i) :pattern ((t2tb34 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 b1 (tuple2 a1 b1))) j)
     (= (t2tb34 (tb2t34 j)) j)) :pattern ((t2tb34 (tb2t34 j))) )))

;; mem_times
  (assert
  (forall ((s (set b)) (t (set (tuple21 a b))) (x b) (y (tuple21 a b)))
  (= (mem (tuple2 b1 (tuple2 a1 b1))
  (Tuple2 b1 (tuple2 a1 b1) (t2tb14 x) (t2tb13 y))
  (times (tuple2 a1 b1) b1 (t2tb12 s) (t2tb11 t)))
  (and (mem2 x s) (mem3 y t)))))

(declare-fun t2tb35 ((set (tuple21 b b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 b b)))) (sort (set1 (tuple2 b1 b1)) (t2tb35 x))))

(declare-fun tb2t35 (uni) (set (tuple21 b b)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 b b))))
  (! (= (tb2t35 (t2tb35 i)) i) :pattern ((t2tb35 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 b1 b1)) j) (= (t2tb35 (tb2t35 j)) j)) :pattern (
  (t2tb35 (tb2t35 j))) )))

(declare-fun t2tb36 ((tuple21 b b)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 b b))) (sort (tuple2 b1 b1) (t2tb36 x))))

(declare-fun tb2t36 (uni) (tuple21 b b))

;; BridgeL
  (assert
  (forall ((i (tuple21 b b)))
  (! (= (tb2t36 (t2tb36 i)) i) :pattern ((t2tb36 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 b1 b1) j) (= (t2tb36 (tb2t36 j)) j)) :pattern (
  (t2tb36 (tb2t36 j))) )))

;; mem_times
  (assert
  (forall ((s (set b)) (t (set b)) (x b) (y b))
  (= (mem (tuple2 b1 b1) (Tuple2 b1 b1 (t2tb14 x) (t2tb14 y))
  (times b1 b1 (t2tb12 s) (t2tb12 t))) (and (mem2 x s) (mem2 y t)))))

(declare-fun t2tb37 ((set (tuple21 b a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 b a)))) (sort (set1 (tuple2 b1 a1)) (t2tb37 x))))

(declare-fun tb2t37 (uni) (set (tuple21 b a)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 b a))))
  (! (= (tb2t37 (t2tb37 i)) i) :pattern ((t2tb37 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 b1 a1)) j) (= (t2tb37 (tb2t37 j)) j)) :pattern (
  (t2tb37 (tb2t37 j))) )))

(declare-fun t2tb38 ((tuple21 b a)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 b a))) (sort (tuple2 b1 a1) (t2tb38 x))))

(declare-fun tb2t38 (uni) (tuple21 b a))

;; BridgeL
  (assert
  (forall ((i (tuple21 b a)))
  (! (= (tb2t38 (t2tb38 i)) i) :pattern ((t2tb38 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 b1 a1) j) (= (t2tb38 (tb2t38 j)) j)) :pattern (
  (t2tb38 (tb2t38 j))) )))

;; mem_times
  (assert
  (forall ((s (set b)) (t (set a)) (x b) (y a))
  (= (mem (tuple2 b1 a1) (Tuple2 b1 a1 (t2tb14 x) (t2tb2 y))
  (times a1 b1 (t2tb12 s) (t2tb1 t))) (and (mem2 x s) (mem1 y t)))))

;; mem_times
  (assert
  (forall ((b2 ty))
  (forall ((s (set b)) (t uni) (x b) (y uni))
  (= (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) y)
  (times b2 b1 (t2tb12 s) t)) (and (mem2 x s) (mem b2 y t))))))

(declare-fun t2tb5349 ((set (tuple21 a (tuple21 (tuple21 a c) (tuple21 b
  d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (tuple21 (tuple21 a c) (tuple21 b d)))))) (sort
  (set1 (tuple2 a1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))) (t2tb5349 x))))

(declare-fun tb2t5349 (uni) (set (tuple21 a (tuple21 (tuple21 a c) (tuple21 b
  d)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (tuple21 (tuple21 a c) (tuple21 b d))))))
  (! (= (tb2t5349 (t2tb5349 i)) i) :pattern ((t2tb5349 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))) j)
     (= (t2tb5349 (tb2t5349 j)) j)) :pattern ((t2tb5349 (tb2t5349 j))) )))

(declare-fun t2tb5350 ((tuple21 a (tuple21 (tuple21 a c) (tuple21 b
  d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (tuple21 (tuple21 a c) (tuple21 b d))))) (sort
  (tuple2 a1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))) (t2tb5350 x))))

(declare-fun tb2t5350 (uni) (tuple21 a (tuple21 (tuple21 a c) (tuple21 b
  d))))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (tuple21 (tuple21 a c) (tuple21 b d)))))
  (! (= (tb2t5350 (t2tb5350 i)) i) :pattern ((t2tb5350 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))) j)
     (= (t2tb5350 (tb2t5350 j)) j)) :pattern ((t2tb5350 (tb2t5350 j))) )))

;; mem_times
  (assert
  (forall ((s (set a)) (t (set (tuple21 (tuple21 a c) (tuple21 b d)))) (x a)
  (y (tuple21 (tuple21 a c) (tuple21 b d))))
  (= (mem (tuple2 a1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
  (Tuple2 a1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb2 x) (t2tb691 y))
  (times (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) a1 (t2tb1 s) (t2tb686 t)))
  (and (mem1 x s) (mem24 y t)))))

(declare-fun t2tb5351 ((set (tuple21 a (tuple21 b d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (tuple21 b d))))) (sort
  (set1 (tuple2 a1 (tuple2 b1 d1))) (t2tb5351 x))))

(declare-fun tb2t5351 (uni) (set (tuple21 a (tuple21 b d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (tuple21 b d)))))
  (! (= (tb2t5351 (t2tb5351 i)) i) :pattern ((t2tb5351 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (tuple2 b1 d1))) j)
     (= (t2tb5351 (tb2t5351 j)) j)) :pattern ((t2tb5351 (tb2t5351 j))) )))

(declare-fun t2tb5352 ((tuple21 a (tuple21 b d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (tuple21 b d)))) (sort (tuple2 a1 (tuple2 b1 d1))
  (t2tb5352 x))))

(declare-fun tb2t5352 (uni) (tuple21 a (tuple21 b d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (tuple21 b d))))
  (! (= (tb2t5352 (t2tb5352 i)) i) :pattern ((t2tb5352 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (tuple2 b1 d1)) j) (= (t2tb5352 (tb2t5352 j)) j)) :pattern (
  (t2tb5352 (tb2t5352 j))) )))

;; mem_times
  (assert
  (forall ((s (set a)) (t (set (tuple21 b d))) (x a) (y (tuple21 b d)))
  (= (mem (tuple2 a1 (tuple2 b1 d1))
  (Tuple2 a1 (tuple2 b1 d1) (t2tb2 x) (t2tb692 y))
  (times (tuple2 b1 d1) a1 (t2tb1 s) (t2tb687 t)))
  (and (mem1 x s) (mem23 y t)))))

(declare-fun t2tb5353 ((tuple21 a (set (tuple21 c d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (set (tuple21 c d))))) (sort
  (tuple2 a1 (set1 (tuple2 c1 d1))) (t2tb5353 x))))

(declare-fun tb2t5353 (uni) (tuple21 a (set (tuple21 c d))))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (set (tuple21 c d)))))
  (! (= (tb2t5353 (t2tb5353 i)) i) :pattern ((t2tb5353 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (set1 (tuple2 c1 d1))) j)
     (= (t2tb5353 (tb2t5353 j)) j)) :pattern ((t2tb5353 (tb2t5353 j))) )))

(declare-fun t2tb5354 ((set (tuple21 a (set (tuple21 c d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (set (tuple21 c d)))))) (sort
  (set1 (tuple2 a1 (set1 (tuple2 c1 d1)))) (t2tb5354 x))))

(declare-fun tb2t5354 (uni) (set (tuple21 a (set (tuple21 c d)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (set (tuple21 c d))))))
  (! (= (tb2t5354 (t2tb5354 i)) i) :pattern ((t2tb5354 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (set1 (tuple2 c1 d1)))) j)
     (= (t2tb5354 (tb2t5354 j)) j)) :pattern ((t2tb5354 (tb2t5354 j))) )))

;; mem_times
  (assert
  (forall ((s (set a)) (t (set (set (tuple21 c d)))) (x a) (y (set (tuple21 c
  d))))
  (= (mem (tuple2 a1 (set1 (tuple2 c1 d1)))
  (Tuple2 a1 (set1 (tuple2 c1 d1)) (t2tb2 x) (t2tb689 y))
  (times (set1 (tuple2 c1 d1)) a1 (t2tb1 s) (t2tb688 t)))
  (and (mem1 x s) (mem22 y t)))))

(declare-fun t2tb901 ((set (tuple21 a (tuple21 c d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (tuple21 c d))))) (sort
  (set1 (tuple2 a1 (tuple2 c1 d1))) (t2tb901 x))))

(declare-fun tb2t901 (uni) (set (tuple21 a (tuple21 c d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (tuple21 c d)))))
  (! (= (tb2t901 (t2tb901 i)) i) :pattern ((t2tb901 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (tuple2 c1 d1))) j)
     (= (t2tb901 (tb2t901 j)) j)) :pattern ((t2tb901 (tb2t901 j))) )))

(declare-fun t2tb902 ((tuple21 a (tuple21 c d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (tuple21 c d)))) (sort (tuple2 a1 (tuple2 c1 d1))
  (t2tb902 x))))

(declare-fun tb2t902 (uni) (tuple21 a (tuple21 c d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (tuple21 c d))))
  (! (= (tb2t902 (t2tb902 i)) i) :pattern ((t2tb902 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (tuple2 c1 d1)) j) (= (t2tb902 (tb2t902 j)) j)) :pattern (
  (t2tb902 (tb2t902 j))) )))

;; mem_times
  (assert
  (forall ((s (set a)) (t (set (tuple21 c d))) (x a) (y (tuple21 c d)))
  (= (mem (tuple2 a1 (tuple2 c1 d1))
  (Tuple2 a1 (tuple2 c1 d1) (t2tb2 x) (t2tb693 y))
  (times (tuple2 c1 d1) a1 (t2tb1 s) (t2tb689 t)))
  (and (mem1 x s) (mem21 y t)))))

(declare-fun t2tb903 ((set (tuple21 a d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a d)))) (sort (set1 (tuple2 a1 d1)) (t2tb903 x))))

(declare-fun tb2t903 (uni) (set (tuple21 a d)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a d))))
  (! (= (tb2t903 (t2tb903 i)) i) :pattern ((t2tb903 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 d1)) j) (= (t2tb903 (tb2t903 j)) j)) :pattern (
  (t2tb903 (tb2t903 j))) )))

(declare-fun t2tb904 ((tuple21 a d)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 a d))) (sort (tuple2 a1 d1) (t2tb904 x))))

(declare-fun tb2t904 (uni) (tuple21 a d))

;; BridgeL
  (assert
  (forall ((i (tuple21 a d)))
  (! (= (tb2t904 (t2tb904 i)) i) :pattern ((t2tb904 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 d1) j) (= (t2tb904 (tb2t904 j)) j)) :pattern (
  (t2tb904 (tb2t904 j))) )))

;; mem_times
  (assert
  (forall ((s (set a)) (t (set d)) (x a) (y d))
  (= (mem (tuple2 a1 d1) (Tuple2 a1 d1 (t2tb2 x) (t2tb694 y))
  (times d1 a1 (t2tb1 s) (t2tb690 t))) (and (mem1 x s) (mem20 y t)))))

(declare-fun t2tb256 ((set (tuple21 a (tuple21 a c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (tuple21 a c))))) (sort
  (set1 (tuple2 a1 (tuple2 a1 c1))) (t2tb256 x))))

(declare-fun tb2t256 (uni) (set (tuple21 a (tuple21 a c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (tuple21 a c)))))
  (! (= (tb2t256 (t2tb256 i)) i) :pattern ((t2tb256 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (tuple2 a1 c1))) j)
     (= (t2tb256 (tb2t256 j)) j)) :pattern ((t2tb256 (tb2t256 j))) )))

(declare-fun t2tb257 ((tuple21 a (tuple21 a c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (tuple21 a c)))) (sort (tuple2 a1 (tuple2 a1 c1))
  (t2tb257 x))))

(declare-fun tb2t257 (uni) (tuple21 a (tuple21 a c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (tuple21 a c))))
  (! (= (tb2t257 (t2tb257 i)) i) :pattern ((t2tb257 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (tuple2 a1 c1)) j) (= (t2tb257 (tb2t257 j)) j)) :pattern (
  (t2tb257 (tb2t257 j))) )))

;; mem_times
  (assert
  (forall ((s (set a)) (t (set (tuple21 a c))) (x a) (y (tuple21 a c)))
  (= (mem (tuple2 a1 (tuple2 a1 c1))
  (Tuple2 a1 (tuple2 a1 c1) (t2tb2 x) (t2tb133 y))
  (times (tuple2 a1 c1) a1 (t2tb1 s) (t2tb129 t)))
  (and (mem1 x s) (mem10 y t)))))

;; mem_times
  (assert
  (forall ((s (set a)) (t (set c)) (x a) (y c))
  (= (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y))) (times4 s t))
  (and (mem1 x s) (mem7 y t)))))

(declare-fun t2tb39 ((set (tuple21 a (set (tuple21 a b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (set (tuple21 a b)))))) (sort
  (set1 (tuple2 a1 (set1 (tuple2 a1 b1)))) (t2tb39 x))))

(declare-fun tb2t39 (uni) (set (tuple21 a (set (tuple21 a b)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (set (tuple21 a b))))))
  (! (= (tb2t39 (t2tb39 i)) i) :pattern ((t2tb39 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (set1 (tuple2 a1 b1)))) j)
     (= (t2tb39 (tb2t39 j)) j)) :pattern ((t2tb39 (tb2t39 j))) )))

(declare-fun t2tb40 ((tuple21 a (set (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (set (tuple21 a b))))) (sort
  (tuple2 a1 (set1 (tuple2 a1 b1))) (t2tb40 x))))

(declare-fun tb2t40 (uni) (tuple21 a (set (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (set (tuple21 a b)))))
  (! (= (tb2t40 (t2tb40 i)) i) :pattern ((t2tb40 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (set1 (tuple2 a1 b1))) j)
     (= (t2tb40 (tb2t40 j)) j)) :pattern ((t2tb40 (tb2t40 j))) )))

;; mem_times
  (assert
  (forall ((s (set a)) (t (set (set (tuple21 a b)))) (x a) (y (set (tuple21 a
  b))))
  (= (mem (tuple2 a1 (set1 (tuple2 a1 b1)))
  (Tuple2 a1 (set1 (tuple2 a1 b1)) (t2tb2 x) (t2tb11 y))
  (times (set1 (tuple2 a1 b1)) a1 (t2tb1 s) (t2tb10 t)))
  (and (mem1 x s) (mem4 y t)))))

(declare-fun t2tb41 ((set (tuple21 a (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (tuple21 a b))))) (sort
  (set1 (tuple2 a1 (tuple2 a1 b1))) (t2tb41 x))))

(declare-fun tb2t41 (uni) (set (tuple21 a (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (tuple21 a b)))))
  (! (= (tb2t41 (t2tb41 i)) i) :pattern ((t2tb41 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (tuple2 a1 b1))) j)
     (= (t2tb41 (tb2t41 j)) j)) :pattern ((t2tb41 (tb2t41 j))) )))

(declare-fun t2tb42 ((tuple21 a (tuple21 a b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (tuple21 a b)))) (sort (tuple2 a1 (tuple2 a1 b1))
  (t2tb42 x))))

(declare-fun tb2t42 (uni) (tuple21 a (tuple21 a b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (tuple21 a b))))
  (! (= (tb2t42 (t2tb42 i)) i) :pattern ((t2tb42 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (tuple2 a1 b1)) j) (= (t2tb42 (tb2t42 j)) j)) :pattern (
  (t2tb42 (tb2t42 j))) )))

;; mem_times
  (assert
  (forall ((s (set a)) (t (set (tuple21 a b))) (x a) (y (tuple21 a b)))
  (= (mem (tuple2 a1 (tuple2 a1 b1))
  (Tuple2 a1 (tuple2 a1 b1) (t2tb2 x) (t2tb13 y))
  (times (tuple2 a1 b1) a1 (t2tb1 s) (t2tb11 t)))
  (and (mem1 x s) (mem3 y t)))))

;; mem_times
  (assert
  (forall ((s (set a)) (t (set b)) (x a) (y b))
  (= (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y))) (times2 s t))
  (and (mem1 x s) (mem2 y t)))))

(declare-fun t2tb4 ((set (tuple21 a a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a a)))) (sort (set1 (tuple2 a1 a1)) (t2tb4 x))))

(declare-fun tb2t4 (uni) (set (tuple21 a a)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a a))))
  (! (= (tb2t4 (t2tb4 i)) i) :pattern ((t2tb4 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 a1)) j) (= (t2tb4 (tb2t4 j)) j)) :pattern (
  (t2tb4 (tb2t4 j))) )))

(declare-fun t2tb5 ((tuple21 a a)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 a a))) (sort (tuple2 a1 a1) (t2tb5 x))))

(declare-fun tb2t5 (uni) (tuple21 a a))

;; BridgeL
  (assert
  (forall ((i (tuple21 a a)))
  (! (= (tb2t5 (t2tb5 i)) i) :pattern ((t2tb5 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 a1) j) (= (t2tb5 (tb2t5 j)) j)) :pattern ((t2tb5
                                                                    (tb2t5 j))) )))

;; mem_times
  (assert
  (forall ((s (set a)) (t (set a)) (x a) (y a))
  (= (mem (tuple2 a1 a1) (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y))
  (times a1 a1 (t2tb1 s) (t2tb1 t))) (and (mem1 x s) (mem1 y t)))))

;; mem_times
  (assert
  (forall ((b2 ty))
  (forall ((s (set a)) (t uni) (x a) (y uni))
  (= (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) y)
  (times b2 a1 (t2tb1 s) t)) (and (mem1 x s) (mem b2 y t))))))

;; mem_times
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (x uni) (y uni))
  (= (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) (times b2 a2 s t))
  (and (mem a2 x s) (mem b2 y t))))))

;; mem_power
  (assert
  (forall ((s (set (tuple21 (tuple21 a c) (tuple21 b d))))
  (t (set (tuple21 (tuple21 a c) (tuple21 b d)))))
  (= (mem (set1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))) (t2tb686 s)
  (power (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb686 t)))
  (forall ((x (tuple21 (tuple21 a c) (tuple21 b d))))
  (=> (mem24 x s) (mem24 x t))))))

;; mem_power
  (assert
  (forall ((s (set (tuple21 b d))) (t (set (tuple21 b d))))
  (= (mem (set1 (tuple2 b1 d1)) (t2tb687 s)
  (power (tuple2 b1 d1) (t2tb687 t)))
  (forall ((x (tuple21 b d))) (=> (mem23 x s) (mem23 x t))))))

;; mem_power
  (assert
  (forall ((s (set (set (tuple21 c d)))) (t (set (set (tuple21 c d)))))
  (= (mem (set1 (set1 (tuple2 c1 d1))) (t2tb688 s)
  (power (set1 (tuple2 c1 d1)) (t2tb688 t)))
  (forall ((x (set (tuple21 c d)))) (=> (mem22 x s) (mem22 x t))))))

;; mem_power
  (assert
  (forall ((s (set (tuple21 c d))) (t (set (tuple21 c d))))
  (= (mem22 s (tb2t688 (power (tuple2 c1 d1) (t2tb689 t))))
  (forall ((x (tuple21 c d))) (=> (mem21 x s) (mem21 x t))))))

;; mem_power
  (assert
  (forall ((s (set d)) (t (set d)))
  (= (mem (set1 d1) (t2tb690 s) (power d1 (t2tb690 t)))
  (forall ((x d)) (=> (mem20 x s) (mem20 x t))))))

;; mem_power
  (assert
  (forall ((s (set (tuple21 a c))) (t (set (tuple21 a c))))
  (= (mem (set1 (tuple2 a1 c1)) (t2tb129 s)
  (power (tuple2 a1 c1) (t2tb129 t)))
  (forall ((x (tuple21 a c))) (=> (mem10 x s) (mem10 x t))))))

;; mem_power
  (assert
  (forall ((s (set c)) (t (set c)))
  (= (mem (set1 c1) (t2tb132 s) (power c1 (t2tb132 t)))
  (forall ((x c)) (=> (mem7 x s) (mem7 x t))))))

;; mem_power
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set (set (tuple21 a b)))))
  (= (mem (set1 (set1 (tuple2 a1 b1))) (t2tb10 s)
  (power (set1 (tuple2 a1 b1)) (t2tb10 t)))
  (forall ((x (set (tuple21 a b)))) (=> (mem4 x s) (mem4 x t))))))

;; mem_power
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (tuple21 a b))))
  (= (mem4 s (tb2t10 (power (tuple2 a1 b1) (t2tb11 t))))
  (forall ((x (tuple21 a b))) (=> (mem3 x s) (mem3 x t))))))

;; mem_power
  (assert
  (forall ((s (set b)) (t (set b)))
  (= (mem (set1 b1) (t2tb12 s) (power b1 (t2tb12 t)))
  (forall ((x b)) (=> (mem2 x s) (mem2 x t))))))

;; mem_power
  (assert
  (forall ((s (set a)) (t (set a)))
  (= (mem (set1 a1) (t2tb1 s) (power a1 (t2tb1 t)))
  (forall ((x a)) (=> (mem1 x s) (mem1 x t))))))

;; mem_power
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t uni))
  (and
  (=> (mem (set1 a2) s (power a2 t))
  (forall ((x uni)) (=> (mem a2 x s) (mem a2 x t))))
  (=> (forall ((x uni)) (=> (sort a2 x) (=> (mem a2 x s) (mem a2 x t)))) (mem
  (set1 a2) s (power a2 t)))))))

;; mem_non_empty_power
  (assert
  (forall ((s (set (tuple21 (tuple21 a c) (tuple21 b d))))
  (t (set (tuple21 (tuple21 a c) (tuple21 b d)))))
  (= (mem (set1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))) (t2tb686 s)
  (non_empty_power (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb686 t)))
  (and
  (forall ((x (tuple21 (tuple21 a c) (tuple21 b d))))
  (=> (mem24 x s) (mem24 x t)))
  (not (infix_eqeq15 s
  (tb2t686 (empty (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))))))))))

;; mem_non_empty_power
  (assert
  (forall ((s (set (tuple21 b d))) (t (set (tuple21 b d))))
  (= (mem (set1 (tuple2 b1 d1)) (t2tb687 s)
  (non_empty_power (tuple2 b1 d1) (t2tb687 t)))
  (and (forall ((x (tuple21 b d))) (=> (mem23 x s) (mem23 x t)))
  (not (infix_eqeq22 s (tb2t687 (empty (tuple2 b1 d1)))))))))

;; mem_non_empty_power
  (assert
  (forall ((s (set (set (tuple21 c d)))) (t (set (set (tuple21 c d)))))
  (= (mem (set1 (set1 (tuple2 c1 d1))) (t2tb688 s)
  (non_empty_power (set1 (tuple2 c1 d1)) (t2tb688 t)))
  (and (forall ((x (set (tuple21 c d)))) (=> (mem22 x s) (mem22 x t)))
  (not (infix_eqeq16 s (tb2t688 (empty (set1 (tuple2 c1 d1))))))))))

;; mem_non_empty_power
  (assert
  (forall ((s (set (tuple21 c d))) (t (set (tuple21 c d))))
  (= (mem22 s (tb2t688 (non_empty_power (tuple2 c1 d1) (t2tb689 t))))
  (and (forall ((x (tuple21 c d))) (=> (mem21 x s) (mem21 x t)))
  (not (infix_eqeq14 s (tb2t689 (empty (tuple2 c1 d1)))))))))

;; mem_non_empty_power
  (assert
  (forall ((s (set d)) (t (set d)))
  (= (mem (set1 d1) (t2tb690 s) (non_empty_power d1 (t2tb690 t)))
  (and (forall ((x d)) (=> (mem20 x s) (mem20 x t)))
  (not (infix_eqeq13 s (tb2t690 (empty d1))))))))

;; mem_non_empty_power
  (assert
  (forall ((s (set (tuple21 a c))) (t (set (tuple21 a c))))
  (= (mem (set1 (tuple2 a1 c1)) (t2tb129 s)
  (non_empty_power (tuple2 a1 c1) (t2tb129 t)))
  (and (forall ((x (tuple21 a c))) (=> (mem10 x s) (mem10 x t)))
  (not (infix_eqeq9 s (tb2t129 (empty (tuple2 a1 c1)))))))))

;; mem_non_empty_power
  (assert
  (forall ((s (set c)) (t (set c)))
  (= (mem (set1 c1) (t2tb132 s) (non_empty_power c1 (t2tb132 t)))
  (and (forall ((x c)) (=> (mem7 x s) (mem7 x t)))
  (not (infix_eqeq7 s (tb2t132 (empty c1))))))))

;; mem_non_empty_power
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set (set (tuple21 a b)))))
  (= (mem (set1 (set1 (tuple2 a1 b1))) (t2tb10 s)
  (non_empty_power (set1 (tuple2 a1 b1)) (t2tb10 t)))
  (and (forall ((x (set (tuple21 a b)))) (=> (mem4 x s) (mem4 x t)))
  (not (infix_eqeq5 s (tb2t10 (empty (set1 (tuple2 a1 b1))))))))))

;; mem_non_empty_power
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (tuple21 a b))))
  (= (mem4 s (tb2t10 (non_empty_power (tuple2 a1 b1) (t2tb11 t))))
  (and (forall ((x (tuple21 a b))) (=> (mem3 x s) (mem3 x t)))
  (not (infix_eqeq4 s (tb2t11 (empty (tuple2 a1 b1)))))))))

;; mem_non_empty_power
  (assert
  (forall ((s (set b)) (t (set b)))
  (= (mem (set1 b1) (t2tb12 s) (non_empty_power b1 (t2tb12 t)))
  (and (forall ((x b)) (=> (mem2 x s) (mem2 x t)))
  (not (infix_eqeq3 s (tb2t12 (empty b1))))))))

;; mem_non_empty_power
  (assert
  (forall ((s (set a)) (t (set a)))
  (= (mem (set1 a1) (t2tb1 s) (non_empty_power a1 (t2tb1 t)))
  (and (forall ((x a)) (=> (mem1 x s) (mem1 x t)))
  (not (infix_eqeq1 s (tb2t1 (empty a1))))))))

;; mem_non_empty_power
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t uni))
  (and
  (=> (mem (set1 a2) s (non_empty_power a2 t))
  (and (forall ((x uni)) (=> (mem a2 x s) (mem a2 x t)))
  (not (infix_eqeq a2 s (empty a2)))))
  (=>
  (and (forall ((x uni)) (=> (sort a2 x) (=> (mem a2 x s) (mem a2 x t))))
  (not (infix_eqeq a2 s (empty a2)))) (mem (set1 a2) s
  (non_empty_power a2 t)))))))

(declare-fun choose (ty uni) uni)

;; choose_sort
  (assert (forall ((a2 ty)) (forall ((x uni)) (sort a2 (choose a2 x)))))

(declare-fun relation (ty ty uni uni) uni)

;; relation_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (set1 (tuple2 a2 b2)))
  (relation b2 a2 x x1)))))

(declare-fun relation1 ((set a) (set b)) (set (set (tuple21 a b))))

(declare-fun relation7 ((set c) (set d)) (set (set (tuple21 c d))))

;; mem_relation
  (assert
  (forall ((a2 ty))
  (forall ((u uni) (v (set (tuple21 (tuple21 a c) (tuple21 b d)))) (r uni))
  (and
  (=> (mem (set1 (tuple2 a2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))) r
  (relation (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) a2 u (t2tb686 v)))
  (forall ((x uni) (y (tuple21 (tuple21 a c) (tuple21 b d))))
  (=> (mem (tuple2 a2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
  (Tuple2 a2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) x (t2tb691 y)) r)
  (and (mem a2 x u) (mem24 y v)))))
  (=>
  (forall ((x uni) (y (tuple21 (tuple21 a c) (tuple21 b d))))
  (=> (sort a2 x)
  (=> (mem (tuple2 a2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
  (Tuple2 a2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) x (t2tb691 y)) r)
  (and (mem a2 x u) (mem24 y v))))) (mem
  (set1 (tuple2 a2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))) r
  (relation (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) a2 u (t2tb686 v))))))))

;; mem_relation
  (assert
  (forall ((a2 ty))
  (forall ((u uni) (v (set (tuple21 b d))) (r uni))
  (and
  (=> (mem (set1 (tuple2 a2 (tuple2 b1 d1))) r
  (relation (tuple2 b1 d1) a2 u (t2tb687 v)))
  (forall ((x uni) (y (tuple21 b d)))
  (=> (mem (tuple2 a2 (tuple2 b1 d1))
  (Tuple2 a2 (tuple2 b1 d1) x (t2tb692 y)) r) (and (mem a2 x u) (mem23 y v)))))
  (=>
  (forall ((x uni) (y (tuple21 b d)))
  (=> (sort a2 x)
  (=> (mem (tuple2 a2 (tuple2 b1 d1))
  (Tuple2 a2 (tuple2 b1 d1) x (t2tb692 y)) r) (and (mem a2 x u) (mem23 y v)))))
  (mem (set1 (tuple2 a2 (tuple2 b1 d1))) r
  (relation (tuple2 b1 d1) a2 u (t2tb687 v))))))))

;; mem_relation
  (assert
  (forall ((a2 ty))
  (forall ((u uni) (v (set (set (tuple21 c d)))) (r uni))
  (and
  (=> (mem (set1 (tuple2 a2 (set1 (tuple2 c1 d1)))) r
  (relation (set1 (tuple2 c1 d1)) a2 u (t2tb688 v)))
  (forall ((x uni) (y (set (tuple21 c d))))
  (=> (mem (tuple2 a2 (set1 (tuple2 c1 d1)))
  (Tuple2 a2 (set1 (tuple2 c1 d1)) x (t2tb689 y)) r)
  (and (mem a2 x u) (mem22 y v)))))
  (=>
  (forall ((x uni) (y (set (tuple21 c d))))
  (=> (sort a2 x)
  (=> (mem (tuple2 a2 (set1 (tuple2 c1 d1)))
  (Tuple2 a2 (set1 (tuple2 c1 d1)) x (t2tb689 y)) r)
  (and (mem a2 x u) (mem22 y v))))) (mem
  (set1 (tuple2 a2 (set1 (tuple2 c1 d1)))) r
  (relation (set1 (tuple2 c1 d1)) a2 u (t2tb688 v))))))))

;; mem_relation
  (assert
  (forall ((a2 ty))
  (forall ((u uni) (v (set (tuple21 c d))) (r uni))
  (and
  (=> (mem (set1 (tuple2 a2 (tuple2 c1 d1))) r
  (relation (tuple2 c1 d1) a2 u (t2tb689 v)))
  (forall ((x uni) (y (tuple21 c d)))
  (=> (mem (tuple2 a2 (tuple2 c1 d1))
  (Tuple2 a2 (tuple2 c1 d1) x (t2tb693 y)) r) (and (mem a2 x u) (mem21 y v)))))
  (=>
  (forall ((x uni) (y (tuple21 c d)))
  (=> (sort a2 x)
  (=> (mem (tuple2 a2 (tuple2 c1 d1))
  (Tuple2 a2 (tuple2 c1 d1) x (t2tb693 y)) r) (and (mem a2 x u) (mem21 y v)))))
  (mem (set1 (tuple2 a2 (tuple2 c1 d1))) r
  (relation (tuple2 c1 d1) a2 u (t2tb689 v))))))))

;; mem_relation
  (assert
  (forall ((a2 ty))
  (forall ((u uni) (v (set d)) (r uni))
  (and
  (=> (mem (set1 (tuple2 a2 d1)) r (relation d1 a2 u (t2tb690 v)))
  (forall ((x uni) (y d))
  (=> (mem (tuple2 a2 d1) (Tuple2 a2 d1 x (t2tb694 y)) r)
  (and (mem a2 x u) (mem20 y v)))))
  (=>
  (forall ((x uni) (y d))
  (=> (sort a2 x)
  (=> (mem (tuple2 a2 d1) (Tuple2 a2 d1 x (t2tb694 y)) r)
  (and (mem a2 x u) (mem20 y v))))) (mem (set1 (tuple2 a2 d1)) r
  (relation d1 a2 u (t2tb690 v))))))))

;; mem_relation
  (assert
  (forall ((a2 ty))
  (forall ((u uni) (v (set (tuple21 a c))) (r uni))
  (and
  (=> (mem (set1 (tuple2 a2 (tuple2 a1 c1))) r
  (relation (tuple2 a1 c1) a2 u (t2tb129 v)))
  (forall ((x uni) (y (tuple21 a c)))
  (=> (mem (tuple2 a2 (tuple2 a1 c1))
  (Tuple2 a2 (tuple2 a1 c1) x (t2tb133 y)) r) (and (mem a2 x u) (mem10 y v)))))
  (=>
  (forall ((x uni) (y (tuple21 a c)))
  (=> (sort a2 x)
  (=> (mem (tuple2 a2 (tuple2 a1 c1))
  (Tuple2 a2 (tuple2 a1 c1) x (t2tb133 y)) r) (and (mem a2 x u) (mem10 y v)))))
  (mem (set1 (tuple2 a2 (tuple2 a1 c1))) r
  (relation (tuple2 a1 c1) a2 u (t2tb129 v))))))))

;; mem_relation
  (assert
  (forall ((a2 ty))
  (forall ((u uni) (v (set c)) (r uni))
  (and
  (=> (mem (set1 (tuple2 a2 c1)) r (relation c1 a2 u (t2tb132 v)))
  (forall ((x uni) (y c))
  (=> (mem (tuple2 a2 c1) (Tuple2 a2 c1 x (t2tb135 y)) r)
  (and (mem a2 x u) (mem7 y v)))))
  (=>
  (forall ((x uni) (y c))
  (=> (sort a2 x)
  (=> (mem (tuple2 a2 c1) (Tuple2 a2 c1 x (t2tb135 y)) r)
  (and (mem a2 x u) (mem7 y v))))) (mem (set1 (tuple2 a2 c1)) r
  (relation c1 a2 u (t2tb132 v))))))))

;; mem_relation
  (assert
  (forall ((a2 ty))
  (forall ((u uni) (v (set (set (tuple21 a b)))) (r uni))
  (and
  (=> (mem (set1 (tuple2 a2 (set1 (tuple2 a1 b1)))) r
  (relation (set1 (tuple2 a1 b1)) a2 u (t2tb10 v)))
  (forall ((x uni) (y (set (tuple21 a b))))
  (=> (mem (tuple2 a2 (set1 (tuple2 a1 b1)))
  (Tuple2 a2 (set1 (tuple2 a1 b1)) x (t2tb11 y)) r)
  (and (mem a2 x u) (mem4 y v)))))
  (=>
  (forall ((x uni) (y (set (tuple21 a b))))
  (=> (sort a2 x)
  (=> (mem (tuple2 a2 (set1 (tuple2 a1 b1)))
  (Tuple2 a2 (set1 (tuple2 a1 b1)) x (t2tb11 y)) r)
  (and (mem a2 x u) (mem4 y v))))) (mem
  (set1 (tuple2 a2 (set1 (tuple2 a1 b1)))) r
  (relation (set1 (tuple2 a1 b1)) a2 u (t2tb10 v))))))))

;; mem_relation
  (assert
  (forall ((a2 ty))
  (forall ((u uni) (v (set (tuple21 a b))) (r uni))
  (and
  (=> (mem (set1 (tuple2 a2 (tuple2 a1 b1))) r
  (relation (tuple2 a1 b1) a2 u (t2tb11 v)))
  (forall ((x uni) (y (tuple21 a b)))
  (=> (mem (tuple2 a2 (tuple2 a1 b1)) (Tuple2 a2 (tuple2 a1 b1) x (t2tb13 y))
  r) (and (mem a2 x u) (mem3 y v)))))
  (=>
  (forall ((x uni) (y (tuple21 a b)))
  (=> (sort a2 x)
  (=> (mem (tuple2 a2 (tuple2 a1 b1)) (Tuple2 a2 (tuple2 a1 b1) x (t2tb13 y))
  r) (and (mem a2 x u) (mem3 y v))))) (mem (set1 (tuple2 a2 (tuple2 a1 b1)))
  r (relation (tuple2 a1 b1) a2 u (t2tb11 v))))))))

;; mem_relation
  (assert
  (forall ((a2 ty))
  (forall ((u uni) (v (set b)) (r uni))
  (and
  (=> (mem (set1 (tuple2 a2 b1)) r (relation b1 a2 u (t2tb12 v)))
  (forall ((x uni) (y b))
  (=> (mem (tuple2 a2 b1) (Tuple2 a2 b1 x (t2tb14 y)) r)
  (and (mem a2 x u) (mem2 y v)))))
  (=>
  (forall ((x uni) (y b))
  (=> (sort a2 x)
  (=> (mem (tuple2 a2 b1) (Tuple2 a2 b1 x (t2tb14 y)) r)
  (and (mem a2 x u) (mem2 y v))))) (mem (set1 (tuple2 a2 b1)) r
  (relation b1 a2 u (t2tb12 v))))))))

;; mem_relation
  (assert
  (forall ((a2 ty))
  (forall ((u uni) (v (set a)) (r uni))
  (and
  (=> (mem (set1 (tuple2 a2 a1)) r (relation a1 a2 u (t2tb1 v)))
  (forall ((x uni) (y a))
  (=> (mem (tuple2 a2 a1) (Tuple2 a2 a1 x (t2tb2 y)) r)
  (and (mem a2 x u) (mem1 y v)))))
  (=>
  (forall ((x uni) (y a))
  (=> (sort a2 x)
  (=> (mem (tuple2 a2 a1) (Tuple2 a2 a1 x (t2tb2 y)) r)
  (and (mem a2 x u) (mem1 y v))))) (mem (set1 (tuple2 a2 a1)) r
  (relation a1 a2 u (t2tb1 v))))))))

(declare-fun t2tb5355 ((set (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b
  d)) (tuple21 (tuple21 a c) (tuple21 b d)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  (tuple21 (tuple21 a c) (tuple21 b d))))))) (sort
  (set1
  (set1
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))
  (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))))) (t2tb5355 x))))

(declare-fun tb2t5355 (uni) (set (set (tuple21 (tuple21 (tuple21 a c)
  (tuple21 b d)) (tuple21 (tuple21 a c) (tuple21 b d))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  (tuple21 (tuple21 a c) (tuple21 b d)))))))
  (! (= (tb2t5355 (t2tb5355 i)) i) :pattern ((t2tb5355 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (set1
     (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))
     (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))))) j)
     (= (t2tb5355 (tb2t5355 j)) j)) :pattern ((t2tb5355 (tb2t5355 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 (tuple21 a c) (tuple21 b d))))
  (v (set (tuple21 (tuple21 a c) (tuple21 b d))))
  (r (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) (tuple21 (tuple21 a
  c) (tuple21 b d))))))
  (= (mem
  (set1
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))
  (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))) (t2tb5204 r)
  (relation (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))
  (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb686 u) (t2tb686 v)))
  (forall ((x (tuple21 (tuple21 a c) (tuple21 b d))) (y (tuple21 (tuple21 a
  c) (tuple21 b d))))
  (=> (mem
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))
  (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))
  (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb691 x) (t2tb691 y))
  (t2tb5204 r)) (and (mem24 x u) (mem24 y v)))))))

(declare-fun t2tb5356 ((set (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b
  d)) (tuple21 b d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  (tuple21 b d)))))) (sort
  (set1
  (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 b1 d1))))
  (t2tb5356 x))))

(declare-fun tb2t5356 (uni) (set (set (tuple21 (tuple21 (tuple21 a c)
  (tuple21 b d)) (tuple21 b d)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  (tuple21 b d))))))
  (! (= (tb2t5356 (t2tb5356 i)) i) :pattern ((t2tb5356 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 b1 d1))))
     j) (= (t2tb5356 (tb2t5356 j)) j)) :pattern ((t2tb5356 (tb2t5356 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 (tuple21 a c) (tuple21 b d)))) (v (set (tuple21 b
  d))) (r (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) (tuple21 b
  d)))))
  (= (mem
  (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 b1 d1)))
  (t2tb5205 r)
  (relation (tuple2 b1 d1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb686 u)
  (t2tb687 v)))
  (forall ((x (tuple21 (tuple21 a c) (tuple21 b d))) (y (tuple21 b d)))
  (=> (mem (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 b1 d1))
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 b1 d1) (t2tb691 x)
  (t2tb692 y)) (t2tb5205 r)) (and (mem24 x u) (mem23 y v)))))))

(declare-fun t2tb5357 ((set (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b
  d)) (set (tuple21 c d)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  (set (tuple21 c d))))))) (sort
  (set1
  (set1
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (set1 (tuple2 c1 d1)))))
  (t2tb5357 x))))

(declare-fun tb2t5357 (uni) (set (set (tuple21 (tuple21 (tuple21 a c)
  (tuple21 b d)) (set (tuple21 c d))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  (set (tuple21 c d)))))))
  (! (= (tb2t5357 (t2tb5357 i)) i) :pattern ((t2tb5357 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (set1
     (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (set1 (tuple2 c1 d1)))))
     j) (= (t2tb5357 (tb2t5357 j)) j)) :pattern ((t2tb5357 (tb2t5357 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 (tuple21 a c) (tuple21 b d))))
  (v (set (set (tuple21 c d)))) (r (set (tuple21 (tuple21 (tuple21 a c)
  (tuple21 b d)) (set (tuple21 c d))))))
  (= (mem
  (set1
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (set1 (tuple2 c1 d1))))
  (t2tb5207 r)
  (relation (set1 (tuple2 c1 d1)) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))
  (t2tb686 u) (t2tb688 v)))
  (forall ((x (tuple21 (tuple21 a c) (tuple21 b d))) (y (set (tuple21 c d))))
  (=> (mem
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (set1 (tuple2 c1 d1)))
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (set1 (tuple2 c1 d1))
  (t2tb691 x) (t2tb689 y)) (t2tb5207 r)) (and (mem24 x u) (mem22 y v)))))))

(declare-fun t2tb5358 ((set (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b
  d)) (tuple21 c d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  (tuple21 c d)))))) (sort
  (set1
  (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 c1 d1))))
  (t2tb5358 x))))

(declare-fun tb2t5358 (uni) (set (set (tuple21 (tuple21 (tuple21 a c)
  (tuple21 b d)) (tuple21 c d)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  (tuple21 c d))))))
  (! (= (tb2t5358 (t2tb5358 i)) i) :pattern ((t2tb5358 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 c1 d1))))
     j) (= (t2tb5358 (tb2t5358 j)) j)) :pattern ((t2tb5358 (tb2t5358 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 (tuple21 a c) (tuple21 b d)))) (v (set (tuple21 c
  d))) (r (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) (tuple21 c
  d)))))
  (= (mem
  (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 c1 d1)))
  (t2tb5209 r)
  (relation (tuple2 c1 d1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb686 u)
  (t2tb689 v)))
  (forall ((x (tuple21 (tuple21 a c) (tuple21 b d))) (y (tuple21 c d)))
  (=> (mem (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 c1 d1))
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 c1 d1) (t2tb691 x)
  (t2tb693 y)) (t2tb5209 r)) (and (mem24 x u) (mem21 y v)))))))

(declare-fun t2tb5359 ((set (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b
  d)) d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) d)))))
  (sort (set1 (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) d1)))
  (t2tb5359 x))))

(declare-fun tb2t5359 (uni) (set (set (tuple21 (tuple21 (tuple21 a c)
  (tuple21 b d)) d))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) d)))))
  (! (= (tb2t5359 (t2tb5359 i)) i) :pattern ((t2tb5359 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) d1))) j)
     (= (t2tb5359 (tb2t5359 j)) j)) :pattern ((t2tb5359 (tb2t5359 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 (tuple21 a c) (tuple21 b d)))) (v (set d))
  (r (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) d))))
  (= (mem (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) d1))
  (t2tb5211 r)
  (relation d1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb686 u)
  (t2tb690 v)))
  (forall ((x (tuple21 (tuple21 a c) (tuple21 b d))) (y d))
  (=> (mem (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) d1)
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) d1 (t2tb691 x) (t2tb694 y))
  (t2tb5211 r)) (and (mem24 x u) (mem20 y v)))))))

(declare-fun t2tb5360 ((set (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b
  d)) (tuple21 a c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  (tuple21 a c)))))) (sort
  (set1
  (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 a1 c1))))
  (t2tb5360 x))))

(declare-fun tb2t5360 (uni) (set (set (tuple21 (tuple21 (tuple21 a c)
  (tuple21 b d)) (tuple21 a c)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  (tuple21 a c))))))
  (! (= (tb2t5360 (t2tb5360 i)) i) :pattern ((t2tb5360 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 a1 c1))))
     j) (= (t2tb5360 (tb2t5360 j)) j)) :pattern ((t2tb5360 (tb2t5360 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 (tuple21 a c) (tuple21 b d)))) (v (set (tuple21 a
  c))) (r (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) (tuple21 a
  c)))))
  (= (mem
  (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 a1 c1)))
  (t2tb5213 r)
  (relation (tuple2 a1 c1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb686 u)
  (t2tb129 v)))
  (forall ((x (tuple21 (tuple21 a c) (tuple21 b d))) (y (tuple21 a c)))
  (=> (mem (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 a1 c1))
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 a1 c1) (t2tb691 x)
  (t2tb133 y)) (t2tb5213 r)) (and (mem24 x u) (mem10 y v)))))))

(declare-fun t2tb5361 ((set (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b
  d)) c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) c)))))
  (sort (set1 (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) c1)))
  (t2tb5361 x))))

(declare-fun tb2t5361 (uni) (set (set (tuple21 (tuple21 (tuple21 a c)
  (tuple21 b d)) c))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) c)))))
  (! (= (tb2t5361 (t2tb5361 i)) i) :pattern ((t2tb5361 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) c1))) j)
     (= (t2tb5361 (tb2t5361 j)) j)) :pattern ((t2tb5361 (tb2t5361 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 (tuple21 a c) (tuple21 b d)))) (v (set c))
  (r (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) c))))
  (= (mem (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) c1))
  (t2tb5215 r)
  (relation c1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb686 u)
  (t2tb132 v)))
  (forall ((x (tuple21 (tuple21 a c) (tuple21 b d))) (y c))
  (=> (mem (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) c1)
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) c1 (t2tb691 x) (t2tb135 y))
  (t2tb5215 r)) (and (mem24 x u) (mem7 y v)))))))

(declare-fun t2tb5362 ((set (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b
  d)) (set (tuple21 a b)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  (set (tuple21 a b))))))) (sort
  (set1
  (set1
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (set1 (tuple2 a1 b1)))))
  (t2tb5362 x))))

(declare-fun tb2t5362 (uni) (set (set (tuple21 (tuple21 (tuple21 a c)
  (tuple21 b d)) (set (tuple21 a b))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  (set (tuple21 a b)))))))
  (! (= (tb2t5362 (t2tb5362 i)) i) :pattern ((t2tb5362 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (set1
     (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (set1 (tuple2 a1 b1)))))
     j) (= (t2tb5362 (tb2t5362 j)) j)) :pattern ((t2tb5362 (tb2t5362 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 (tuple21 a c) (tuple21 b d))))
  (v (set (set (tuple21 a b)))) (r (set (tuple21 (tuple21 (tuple21 a c)
  (tuple21 b d)) (set (tuple21 a b))))))
  (= (mem
  (set1
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (set1 (tuple2 a1 b1))))
  (t2tb5217 r)
  (relation (set1 (tuple2 a1 b1)) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))
  (t2tb686 u) (t2tb10 v)))
  (forall ((x (tuple21 (tuple21 a c) (tuple21 b d))) (y (set (tuple21 a b))))
  (=> (mem
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (set1 (tuple2 a1 b1)))
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (set1 (tuple2 a1 b1))
  (t2tb691 x) (t2tb11 y)) (t2tb5217 r)) (and (mem24 x u) (mem4 y v)))))))

(declare-fun t2tb5363 ((set (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b
  d)) (tuple21 a b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  (tuple21 a b)))))) (sort
  (set1
  (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 a1 b1))))
  (t2tb5363 x))))

(declare-fun tb2t5363 (uni) (set (set (tuple21 (tuple21 (tuple21 a c)
  (tuple21 b d)) (tuple21 a b)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  (tuple21 a b))))))
  (! (= (tb2t5363 (t2tb5363 i)) i) :pattern ((t2tb5363 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 a1 b1))))
     j) (= (t2tb5363 (tb2t5363 j)) j)) :pattern ((t2tb5363 (tb2t5363 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 (tuple21 a c) (tuple21 b d)))) (v (set (tuple21 a
  b))) (r (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) (tuple21 a
  b)))))
  (= (mem
  (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 a1 b1)))
  (t2tb5220 r)
  (relation (tuple2 a1 b1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb686 u)
  (t2tb11 v)))
  (forall ((x (tuple21 (tuple21 a c) (tuple21 b d))) (y (tuple21 a b)))
  (=> (mem (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 a1 b1))
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 a1 b1) (t2tb691 x)
  (t2tb13 y)) (t2tb5220 r)) (and (mem24 x u) (mem3 y v)))))))

(declare-fun t2tb5364 ((set (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b
  d)) b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) b)))))
  (sort (set1 (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) b1)))
  (t2tb5364 x))))

(declare-fun tb2t5364 (uni) (set (set (tuple21 (tuple21 (tuple21 a c)
  (tuple21 b d)) b))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) b)))))
  (! (= (tb2t5364 (t2tb5364 i)) i) :pattern ((t2tb5364 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) b1))) j)
     (= (t2tb5364 (tb2t5364 j)) j)) :pattern ((t2tb5364 (tb2t5364 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 (tuple21 a c) (tuple21 b d)))) (v (set b))
  (r (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) b))))
  (= (mem (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) b1))
  (t2tb5221 r)
  (relation b1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb686 u) (t2tb12 v)))
  (forall ((x (tuple21 (tuple21 a c) (tuple21 b d))) (y b))
  (=> (mem (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) b1)
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) b1 (t2tb691 x) (t2tb14 y))
  (t2tb5221 r)) (and (mem24 x u) (mem2 y v)))))))

(declare-fun t2tb5365 ((set (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b
  d)) a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) a)))))
  (sort (set1 (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) a1)))
  (t2tb5365 x))))

(declare-fun tb2t5365 (uni) (set (set (tuple21 (tuple21 (tuple21 a c)
  (tuple21 b d)) a))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) a)))))
  (! (= (tb2t5365 (t2tb5365 i)) i) :pattern ((t2tb5365 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) a1))) j)
     (= (t2tb5365 (tb2t5365 j)) j)) :pattern ((t2tb5365 (tb2t5365 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 (tuple21 a c) (tuple21 b d)))) (v (set a))
  (r (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) a))))
  (= (mem (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) a1))
  (t2tb5223 r)
  (relation a1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb686 u) (t2tb1 v)))
  (forall ((x (tuple21 (tuple21 a c) (tuple21 b d))) (y a))
  (=> (mem (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) a1)
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) a1 (t2tb691 x) (t2tb2 y))
  (t2tb5223 r)) (and (mem24 x u) (mem1 y v)))))))

;; mem_relation
  (assert
  (forall ((b2 ty))
  (forall ((u (set (tuple21 (tuple21 a c) (tuple21 b d)))) (v uni) (r uni))
  (and
  (=> (mem (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) b2)) r
  (relation b2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb686 u) v))
  (forall ((x (tuple21 (tuple21 a c) (tuple21 b d))) (y uni))
  (=> (mem (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) b2)
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) b2 (t2tb691 x) y) r)
  (and (mem24 x u) (mem b2 y v)))))
  (=>
  (forall ((x (tuple21 (tuple21 a c) (tuple21 b d))) (y uni))
  (=> (sort b2 y)
  (=> (mem (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) b2)
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) b2 (t2tb691 x) y) r)
  (and (mem24 x u) (mem b2 y v))))) (mem
  (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) b2)) r
  (relation b2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb686 u) v)))))))

(declare-fun t2tb5366 ((set (set (tuple21 (tuple21 b d) (tuple21 (tuple21 a
  c) (tuple21 b d)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 b d) (tuple21 (tuple21 a c)
  (tuple21 b d))))))) (sort
  (set1
  (set1 (tuple2 (tuple2 b1 d1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))))
  (t2tb5366 x))))

(declare-fun tb2t5366 (uni) (set (set (tuple21 (tuple21 b d)
  (tuple21 (tuple21 a c) (tuple21 b d))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 b d) (tuple21 (tuple21 a c)
  (tuple21 b d)))))))
  (! (= (tb2t5366 (t2tb5366 i)) i) :pattern ((t2tb5366 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (set1 (tuple2 (tuple2 b1 d1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))))
     j) (= (t2tb5366 (tb2t5366 j)) j)) :pattern ((t2tb5366 (tb2t5366 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 b d))) (v (set (tuple21 (tuple21 a c) (tuple21 b
  d)))) (r (set (tuple21 (tuple21 b d) (tuple21 (tuple21 a c) (tuple21 b
  d))))))
  (= (mem
  (set1 (tuple2 (tuple2 b1 d1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))))
  (t2tb5225 r)
  (relation (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 b1 d1) (t2tb687 u)
  (t2tb686 v)))
  (forall ((x (tuple21 b d)) (y (tuple21 (tuple21 a c) (tuple21 b d))))
  (=> (mem (tuple2 (tuple2 b1 d1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
  (Tuple2 (tuple2 b1 d1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb692 x)
  (t2tb691 y)) (t2tb5225 r)) (and (mem23 x u) (mem24 y v)))))))

(declare-fun t2tb5367 ((set (set (tuple21 (tuple21 b d) (tuple21 b
  d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 b d) (tuple21 b d)))))) (sort
  (set1 (set1 (tuple2 (tuple2 b1 d1) (tuple2 b1 d1)))) (t2tb5367 x))))

(declare-fun tb2t5367 (uni) (set (set (tuple21 (tuple21 b d) (tuple21 b
  d)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 b d) (tuple21 b d))))))
  (! (= (tb2t5367 (t2tb5367 i)) i) :pattern ((t2tb5367 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 b1 d1) (tuple2 b1 d1)))) j)
     (= (t2tb5367 (tb2t5367 j)) j)) :pattern ((t2tb5367 (tb2t5367 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 b d))) (v (set (tuple21 b d)))
  (r (set (tuple21 (tuple21 b d) (tuple21 b d)))))
  (= (mem (set1 (tuple2 (tuple2 b1 d1) (tuple2 b1 d1))) (t2tb5227 r)
  (relation (tuple2 b1 d1) (tuple2 b1 d1) (t2tb687 u) (t2tb687 v)))
  (forall ((x (tuple21 b d)) (y (tuple21 b d)))
  (=> (mem (tuple2 (tuple2 b1 d1) (tuple2 b1 d1))
  (Tuple2 (tuple2 b1 d1) (tuple2 b1 d1) (t2tb692 x) (t2tb692 y))
  (t2tb5227 r)) (and (mem23 x u) (mem23 y v)))))))

(declare-fun t2tb5368 ((set (set (tuple21 (tuple21 b d) (set (tuple21 c
  d)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 b d) (set (tuple21 c d))))))) (sort
  (set1 (set1 (tuple2 (tuple2 b1 d1) (set1 (tuple2 c1 d1))))) (t2tb5368 x))))

(declare-fun tb2t5368 (uni) (set (set (tuple21 (tuple21 b d) (set (tuple21 c
  d))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 b d) (set (tuple21 c d)))))))
  (! (= (tb2t5368 (t2tb5368 i)) i) :pattern ((t2tb5368 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 b1 d1) (set1 (tuple2 c1 d1))))) j)
     (= (t2tb5368 (tb2t5368 j)) j)) :pattern ((t2tb5368 (tb2t5368 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 b d))) (v (set (set (tuple21 c d))))
  (r (set (tuple21 (tuple21 b d) (set (tuple21 c d))))))
  (= (mem (set1 (tuple2 (tuple2 b1 d1) (set1 (tuple2 c1 d1)))) (t2tb5229 r)
  (relation (set1 (tuple2 c1 d1)) (tuple2 b1 d1) (t2tb687 u) (t2tb688 v)))
  (forall ((x (tuple21 b d)) (y (set (tuple21 c d))))
  (=> (mem (tuple2 (tuple2 b1 d1) (set1 (tuple2 c1 d1)))
  (Tuple2 (tuple2 b1 d1) (set1 (tuple2 c1 d1)) (t2tb692 x) (t2tb689 y))
  (t2tb5229 r)) (and (mem23 x u) (mem22 y v)))))))

(declare-fun t2tb5369 ((set (set (tuple21 (tuple21 b d) (tuple21 c
  d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 b d) (tuple21 c d)))))) (sort
  (set1 (set1 (tuple2 (tuple2 b1 d1) (tuple2 c1 d1)))) (t2tb5369 x))))

(declare-fun tb2t5369 (uni) (set (set (tuple21 (tuple21 b d) (tuple21 c
  d)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 b d) (tuple21 c d))))))
  (! (= (tb2t5369 (t2tb5369 i)) i) :pattern ((t2tb5369 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 b1 d1) (tuple2 c1 d1)))) j)
     (= (t2tb5369 (tb2t5369 j)) j)) :pattern ((t2tb5369 (tb2t5369 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 b d))) (v (set (tuple21 c d)))
  (r (set (tuple21 (tuple21 b d) (tuple21 c d)))))
  (= (mem (set1 (tuple2 (tuple2 b1 d1) (tuple2 c1 d1))) (t2tb5231 r)
  (relation (tuple2 c1 d1) (tuple2 b1 d1) (t2tb687 u) (t2tb689 v)))
  (forall ((x (tuple21 b d)) (y (tuple21 c d)))
  (=> (mem (tuple2 (tuple2 b1 d1) (tuple2 c1 d1))
  (Tuple2 (tuple2 b1 d1) (tuple2 c1 d1) (t2tb692 x) (t2tb693 y))
  (t2tb5231 r)) (and (mem23 x u) (mem21 y v)))))))

(declare-fun t2tb5370 ((set (set (tuple21 (tuple21 b d) d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 b d) d))))) (sort
  (set1 (set1 (tuple2 (tuple2 b1 d1) d1))) (t2tb5370 x))))

(declare-fun tb2t5370 (uni) (set (set (tuple21 (tuple21 b d) d))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 b d) d)))))
  (! (= (tb2t5370 (t2tb5370 i)) i) :pattern ((t2tb5370 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 b1 d1) d1))) j)
     (= (t2tb5370 (tb2t5370 j)) j)) :pattern ((t2tb5370 (tb2t5370 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 b d))) (v (set d)) (r (set (tuple21 (tuple21 b d)
  d))))
  (= (mem (set1 (tuple2 (tuple2 b1 d1) d1)) (t2tb5234 r)
  (relation d1 (tuple2 b1 d1) (t2tb687 u) (t2tb690 v)))
  (forall ((x (tuple21 b d)) (y d))
  (=> (mem (tuple2 (tuple2 b1 d1) d1)
  (Tuple2 (tuple2 b1 d1) d1 (t2tb692 x) (t2tb694 y)) (t2tb5234 r))
  (and (mem23 x u) (mem20 y v)))))))

(declare-fun t2tb5371 ((set (set (tuple21 (tuple21 b d) (tuple21 a
  c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 b d) (tuple21 a c)))))) (sort
  (set1 (set1 (tuple2 (tuple2 b1 d1) (tuple2 a1 c1)))) (t2tb5371 x))))

(declare-fun tb2t5371 (uni) (set (set (tuple21 (tuple21 b d) (tuple21 a
  c)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 b d) (tuple21 a c))))))
  (! (= (tb2t5371 (t2tb5371 i)) i) :pattern ((t2tb5371 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 b1 d1) (tuple2 a1 c1)))) j)
     (= (t2tb5371 (tb2t5371 j)) j)) :pattern ((t2tb5371 (tb2t5371 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 b d))) (v (set (tuple21 a c)))
  (r (set (tuple21 (tuple21 b d) (tuple21 a c)))))
  (= (mem (set1 (tuple2 (tuple2 b1 d1) (tuple2 a1 c1))) (t2tb755 r)
  (relation (tuple2 a1 c1) (tuple2 b1 d1) (t2tb687 u) (t2tb129 v)))
  (forall ((x (tuple21 b d)) (y (tuple21 a c)))
  (=> (mem (tuple2 (tuple2 b1 d1) (tuple2 a1 c1))
  (Tuple2 (tuple2 b1 d1) (tuple2 a1 c1) (t2tb692 x) (t2tb133 y)) (t2tb755 r))
  (and (mem23 x u) (mem10 y v)))))))

(declare-fun t2tb5372 ((set (set (tuple21 (tuple21 b d) c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 b d) c))))) (sort
  (set1 (set1 (tuple2 (tuple2 b1 d1) c1))) (t2tb5372 x))))

(declare-fun tb2t5372 (uni) (set (set (tuple21 (tuple21 b d) c))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 b d) c)))))
  (! (= (tb2t5372 (t2tb5372 i)) i) :pattern ((t2tb5372 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 b1 d1) c1))) j)
     (= (t2tb5372 (tb2t5372 j)) j)) :pattern ((t2tb5372 (tb2t5372 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 b d))) (v (set c)) (r (set (tuple21 (tuple21 b d)
  c))))
  (= (mem (set1 (tuple2 (tuple2 b1 d1) c1)) (t2tb5235 r)
  (relation c1 (tuple2 b1 d1) (t2tb687 u) (t2tb132 v)))
  (forall ((x (tuple21 b d)) (y c))
  (=> (mem (tuple2 (tuple2 b1 d1) c1)
  (Tuple2 (tuple2 b1 d1) c1 (t2tb692 x) (t2tb135 y)) (t2tb5235 r))
  (and (mem23 x u) (mem7 y v)))))))

(declare-fun t2tb5373 ((set (set (tuple21 (tuple21 b d) (set (tuple21 a
  b)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 b d) (set (tuple21 a b))))))) (sort
  (set1 (set1 (tuple2 (tuple2 b1 d1) (set1 (tuple2 a1 b1))))) (t2tb5373 x))))

(declare-fun tb2t5373 (uni) (set (set (tuple21 (tuple21 b d) (set (tuple21 a
  b))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 b d) (set (tuple21 a b)))))))
  (! (= (tb2t5373 (t2tb5373 i)) i) :pattern ((t2tb5373 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 b1 d1) (set1 (tuple2 a1 b1))))) j)
     (= (t2tb5373 (tb2t5373 j)) j)) :pattern ((t2tb5373 (tb2t5373 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 b d))) (v (set (set (tuple21 a b))))
  (r (set (tuple21 (tuple21 b d) (set (tuple21 a b))))))
  (= (mem (set1 (tuple2 (tuple2 b1 d1) (set1 (tuple2 a1 b1)))) (t2tb5237 r)
  (relation (set1 (tuple2 a1 b1)) (tuple2 b1 d1) (t2tb687 u) (t2tb10 v)))
  (forall ((x (tuple21 b d)) (y (set (tuple21 a b))))
  (=> (mem (tuple2 (tuple2 b1 d1) (set1 (tuple2 a1 b1)))
  (Tuple2 (tuple2 b1 d1) (set1 (tuple2 a1 b1)) (t2tb692 x) (t2tb11 y))
  (t2tb5237 r)) (and (mem23 x u) (mem4 y v)))))))

(declare-fun t2tb5374 ((set (set (tuple21 (tuple21 b d) (tuple21 a
  b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 b d) (tuple21 a b)))))) (sort
  (set1 (set1 (tuple2 (tuple2 b1 d1) (tuple2 a1 b1)))) (t2tb5374 x))))

(declare-fun tb2t5374 (uni) (set (set (tuple21 (tuple21 b d) (tuple21 a
  b)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 b d) (tuple21 a b))))))
  (! (= (tb2t5374 (t2tb5374 i)) i) :pattern ((t2tb5374 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 b1 d1) (tuple2 a1 b1)))) j)
     (= (t2tb5374 (tb2t5374 j)) j)) :pattern ((t2tb5374 (tb2t5374 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 b d))) (v (set (tuple21 a b)))
  (r (set (tuple21 (tuple21 b d) (tuple21 a b)))))
  (= (mem (set1 (tuple2 (tuple2 b1 d1) (tuple2 a1 b1))) (t2tb5239 r)
  (relation (tuple2 a1 b1) (tuple2 b1 d1) (t2tb687 u) (t2tb11 v)))
  (forall ((x (tuple21 b d)) (y (tuple21 a b)))
  (=> (mem (tuple2 (tuple2 b1 d1) (tuple2 a1 b1))
  (Tuple2 (tuple2 b1 d1) (tuple2 a1 b1) (t2tb692 x) (t2tb13 y)) (t2tb5239 r))
  (and (mem23 x u) (mem3 y v)))))))

(declare-fun t2tb5375 ((set (set (tuple21 (tuple21 b d) b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 b d) b))))) (sort
  (set1 (set1 (tuple2 (tuple2 b1 d1) b1))) (t2tb5375 x))))

(declare-fun tb2t5375 (uni) (set (set (tuple21 (tuple21 b d) b))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 b d) b)))))
  (! (= (tb2t5375 (t2tb5375 i)) i) :pattern ((t2tb5375 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 b1 d1) b1))) j)
     (= (t2tb5375 (tb2t5375 j)) j)) :pattern ((t2tb5375 (tb2t5375 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 b d))) (v (set b)) (r (set (tuple21 (tuple21 b d)
  b))))
  (= (mem (set1 (tuple2 (tuple2 b1 d1) b1)) (t2tb5241 r)
  (relation b1 (tuple2 b1 d1) (t2tb687 u) (t2tb12 v)))
  (forall ((x (tuple21 b d)) (y b))
  (=> (mem (tuple2 (tuple2 b1 d1) b1)
  (Tuple2 (tuple2 b1 d1) b1 (t2tb692 x) (t2tb14 y)) (t2tb5241 r))
  (and (mem23 x u) (mem2 y v)))))))

(declare-fun t2tb5376 ((set (set (tuple21 (tuple21 b d) a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 b d) a))))) (sort
  (set1 (set1 (tuple2 (tuple2 b1 d1) a1))) (t2tb5376 x))))

(declare-fun tb2t5376 (uni) (set (set (tuple21 (tuple21 b d) a))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 b d) a)))))
  (! (= (tb2t5376 (t2tb5376 i)) i) :pattern ((t2tb5376 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 b1 d1) a1))) j)
     (= (t2tb5376 (tb2t5376 j)) j)) :pattern ((t2tb5376 (tb2t5376 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 b d))) (v (set a)) (r (set (tuple21 (tuple21 b d)
  a))))
  (= (mem (set1 (tuple2 (tuple2 b1 d1) a1)) (t2tb5243 r)
  (relation a1 (tuple2 b1 d1) (t2tb687 u) (t2tb1 v)))
  (forall ((x (tuple21 b d)) (y a))
  (=> (mem (tuple2 (tuple2 b1 d1) a1)
  (Tuple2 (tuple2 b1 d1) a1 (t2tb692 x) (t2tb2 y)) (t2tb5243 r))
  (and (mem23 x u) (mem1 y v)))))))

;; mem_relation
  (assert
  (forall ((b2 ty))
  (forall ((u (set (tuple21 b d))) (v uni) (r uni))
  (and
  (=> (mem (set1 (tuple2 (tuple2 b1 d1) b2)) r
  (relation b2 (tuple2 b1 d1) (t2tb687 u) v))
  (forall ((x (tuple21 b d)) (y uni))
  (=> (mem (tuple2 (tuple2 b1 d1) b2)
  (Tuple2 (tuple2 b1 d1) b2 (t2tb692 x) y) r) (and (mem23 x u) (mem b2 y v)))))
  (=>
  (forall ((x (tuple21 b d)) (y uni))
  (=> (sort b2 y)
  (=> (mem (tuple2 (tuple2 b1 d1) b2)
  (Tuple2 (tuple2 b1 d1) b2 (t2tb692 x) y) r) (and (mem23 x u) (mem b2 y v)))))
  (mem (set1 (tuple2 (tuple2 b1 d1) b2)) r
  (relation b2 (tuple2 b1 d1) (t2tb687 u) v)))))))

(declare-fun t2tb5377 ((set (set (tuple21 (set (tuple21 c d))
  (tuple21 (tuple21 a c) (tuple21 b d)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 c d)) (tuple21 (tuple21 a c)
  (tuple21 b d))))))) (sort
  (set1
  (set1
  (tuple2 (set1 (tuple2 c1 d1)) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))))
  (t2tb5377 x))))

(declare-fun tb2t5377 (uni) (set (set (tuple21 (set (tuple21 c d))
  (tuple21 (tuple21 a c) (tuple21 b d))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 c d)) (tuple21 (tuple21 a c)
  (tuple21 b d)))))))
  (! (= (tb2t5377 (t2tb5377 i)) i) :pattern ((t2tb5377 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (set1
     (tuple2 (set1 (tuple2 c1 d1)) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))))
     j) (= (t2tb5377 (tb2t5377 j)) j)) :pattern ((t2tb5377 (tb2t5377 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 c d)))) (v (set (tuple21 (tuple21 a c)
  (tuple21 b d)))) (r (set (tuple21 (set (tuple21 c d)) (tuple21 (tuple21 a
  c) (tuple21 b d))))))
  (= (mem
  (set1
  (tuple2 (set1 (tuple2 c1 d1)) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))))
  (t2tb5245 r)
  (relation (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (set1 (tuple2 c1 d1))
  (t2tb688 u) (t2tb686 v)))
  (forall ((x (set (tuple21 c d))) (y (tuple21 (tuple21 a c) (tuple21 b d))))
  (=> (mem
  (tuple2 (set1 (tuple2 c1 d1)) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
  (Tuple2 (set1 (tuple2 c1 d1)) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))
  (t2tb689 x) (t2tb691 y)) (t2tb5245 r)) (and (mem22 x u) (mem24 y v)))))))

(declare-fun t2tb5378 ((set (set (tuple21 (set (tuple21 c d)) (tuple21 b
  d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 c d)) (tuple21 b d)))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 c1 d1)) (tuple2 b1 d1)))) (t2tb5378 x))))

(declare-fun tb2t5378 (uni) (set (set (tuple21 (set (tuple21 c d)) (tuple21 b
  d)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 c d)) (tuple21 b d))))))
  (! (= (tb2t5378 (t2tb5378 i)) i) :pattern ((t2tb5378 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 c1 d1)) (tuple2 b1 d1)))) j)
     (= (t2tb5378 (tb2t5378 j)) j)) :pattern ((t2tb5378 (tb2t5378 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 c d)))) (v (set (tuple21 b d)))
  (r (set (tuple21 (set (tuple21 c d)) (tuple21 b d)))))
  (= (mem (set1 (tuple2 (set1 (tuple2 c1 d1)) (tuple2 b1 d1))) (t2tb5248 r)
  (relation (tuple2 b1 d1) (set1 (tuple2 c1 d1)) (t2tb688 u) (t2tb687 v)))
  (forall ((x (set (tuple21 c d))) (y (tuple21 b d)))
  (=> (mem (tuple2 (set1 (tuple2 c1 d1)) (tuple2 b1 d1))
  (Tuple2 (set1 (tuple2 c1 d1)) (tuple2 b1 d1) (t2tb689 x) (t2tb692 y))
  (t2tb5248 r)) (and (mem22 x u) (mem23 y v)))))))

(declare-fun t2tb5379 ((set (set (tuple21 (set (tuple21 c d)) (set (tuple21 c
  d)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 c d)) (set (tuple21 c d)))))))
  (sort (set1 (set1 (tuple2 (set1 (tuple2 c1 d1)) (set1 (tuple2 c1 d1)))))
  (t2tb5379 x))))

(declare-fun tb2t5379 (uni) (set (set (tuple21 (set (tuple21 c d))
  (set (tuple21 c d))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 c d)) (set (tuple21 c d)))))))
  (! (= (tb2t5379 (t2tb5379 i)) i) :pattern ((t2tb5379 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (set1 (tuple2 c1 d1)) (set1 (tuple2 c1 d1))))) j)
     (= (t2tb5379 (tb2t5379 j)) j)) :pattern ((t2tb5379 (tb2t5379 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 c d)))) (v (set (set (tuple21 c d))))
  (r (set (tuple21 (set (tuple21 c d)) (set (tuple21 c d))))))
  (= (mem (set1 (tuple2 (set1 (tuple2 c1 d1)) (set1 (tuple2 c1 d1))))
  (t2tb5249 r)
  (relation (set1 (tuple2 c1 d1)) (set1 (tuple2 c1 d1)) (t2tb688 u)
  (t2tb688 v)))
  (forall ((x (set (tuple21 c d))) (y (set (tuple21 c d))))
  (=> (mem (tuple2 (set1 (tuple2 c1 d1)) (set1 (tuple2 c1 d1)))
  (Tuple2 (set1 (tuple2 c1 d1)) (set1 (tuple2 c1 d1)) (t2tb689 x)
  (t2tb689 y)) (t2tb5249 r)) (and (mem22 x u) (mem22 y v)))))))

(declare-fun t2tb5380 ((set (set (tuple21 (set (tuple21 c d)) (tuple21 c
  d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 c d)) (tuple21 c d)))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 c1 d1)) (tuple2 c1 d1)))) (t2tb5380 x))))

(declare-fun tb2t5380 (uni) (set (set (tuple21 (set (tuple21 c d)) (tuple21 c
  d)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 c d)) (tuple21 c d))))))
  (! (= (tb2t5380 (t2tb5380 i)) i) :pattern ((t2tb5380 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 c1 d1)) (tuple2 c1 d1)))) j)
     (= (t2tb5380 (tb2t5380 j)) j)) :pattern ((t2tb5380 (tb2t5380 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 c d)))) (v (set (tuple21 c d)))
  (r (set (tuple21 (set (tuple21 c d)) (tuple21 c d)))))
  (= (mem (set1 (tuple2 (set1 (tuple2 c1 d1)) (tuple2 c1 d1))) (t2tb5251 r)
  (relation (tuple2 c1 d1) (set1 (tuple2 c1 d1)) (t2tb688 u) (t2tb689 v)))
  (forall ((x (set (tuple21 c d))) (y (tuple21 c d)))
  (=> (mem (tuple2 (set1 (tuple2 c1 d1)) (tuple2 c1 d1))
  (Tuple2 (set1 (tuple2 c1 d1)) (tuple2 c1 d1) (t2tb689 x) (t2tb693 y))
  (t2tb5251 r)) (and (mem22 x u) (mem21 y v)))))))

(declare-fun t2tb5381 ((set (set (tuple21 (set (tuple21 c d)) d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 c d)) d))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 c1 d1)) d1))) (t2tb5381 x))))

(declare-fun tb2t5381 (uni) (set (set (tuple21 (set (tuple21 c d)) d))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 c d)) d)))))
  (! (= (tb2t5381 (t2tb5381 i)) i) :pattern ((t2tb5381 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 c1 d1)) d1))) j)
     (= (t2tb5381 (tb2t5381 j)) j)) :pattern ((t2tb5381 (tb2t5381 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 c d)))) (v (set d))
  (r (set (tuple21 (set (tuple21 c d)) d))))
  (= (mem (set1 (tuple2 (set1 (tuple2 c1 d1)) d1)) (t2tb5253 r)
  (relation d1 (set1 (tuple2 c1 d1)) (t2tb688 u) (t2tb690 v)))
  (forall ((x (set (tuple21 c d))) (y d))
  (=> (mem (tuple2 (set1 (tuple2 c1 d1)) d1)
  (Tuple2 (set1 (tuple2 c1 d1)) d1 (t2tb689 x) (t2tb694 y)) (t2tb5253 r))
  (and (mem22 x u) (mem20 y v)))))))

(declare-fun t2tb5382 ((set (set (tuple21 (set (tuple21 c d)) (tuple21 a
  c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 c d)) (tuple21 a c)))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 c1 d1)) (tuple2 a1 c1)))) (t2tb5382 x))))

(declare-fun tb2t5382 (uni) (set (set (tuple21 (set (tuple21 c d)) (tuple21 a
  c)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 c d)) (tuple21 a c))))))
  (! (= (tb2t5382 (t2tb5382 i)) i) :pattern ((t2tb5382 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 c1 d1)) (tuple2 a1 c1)))) j)
     (= (t2tb5382 (tb2t5382 j)) j)) :pattern ((t2tb5382 (tb2t5382 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 c d)))) (v (set (tuple21 a c)))
  (r (set (tuple21 (set (tuple21 c d)) (tuple21 a c)))))
  (= (mem (set1 (tuple2 (set1 (tuple2 c1 d1)) (tuple2 a1 c1))) (t2tb5255 r)
  (relation (tuple2 a1 c1) (set1 (tuple2 c1 d1)) (t2tb688 u) (t2tb129 v)))
  (forall ((x (set (tuple21 c d))) (y (tuple21 a c)))
  (=> (mem (tuple2 (set1 (tuple2 c1 d1)) (tuple2 a1 c1))
  (Tuple2 (set1 (tuple2 c1 d1)) (tuple2 a1 c1) (t2tb689 x) (t2tb133 y))
  (t2tb5255 r)) (and (mem22 x u) (mem10 y v)))))))

(declare-fun t2tb5383 ((set (set (tuple21 (set (tuple21 c d)) c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 c d)) c))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 c1 d1)) c1))) (t2tb5383 x))))

(declare-fun tb2t5383 (uni) (set (set (tuple21 (set (tuple21 c d)) c))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 c d)) c)))))
  (! (= (tb2t5383 (t2tb5383 i)) i) :pattern ((t2tb5383 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 c1 d1)) c1))) j)
     (= (t2tb5383 (tb2t5383 j)) j)) :pattern ((t2tb5383 (tb2t5383 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 c d)))) (v (set c))
  (r (set (tuple21 (set (tuple21 c d)) c))))
  (= (mem (set1 (tuple2 (set1 (tuple2 c1 d1)) c1)) (t2tb5257 r)
  (relation c1 (set1 (tuple2 c1 d1)) (t2tb688 u) (t2tb132 v)))
  (forall ((x (set (tuple21 c d))) (y c))
  (=> (mem (tuple2 (set1 (tuple2 c1 d1)) c1)
  (Tuple2 (set1 (tuple2 c1 d1)) c1 (t2tb689 x) (t2tb135 y)) (t2tb5257 r))
  (and (mem22 x u) (mem7 y v)))))))

(declare-fun t2tb5384 ((set (set (tuple21 (set (tuple21 c d)) (set (tuple21 a
  b)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 c d)) (set (tuple21 a b)))))))
  (sort (set1 (set1 (tuple2 (set1 (tuple2 c1 d1)) (set1 (tuple2 a1 b1)))))
  (t2tb5384 x))))

(declare-fun tb2t5384 (uni) (set (set (tuple21 (set (tuple21 c d))
  (set (tuple21 a b))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 c d)) (set (tuple21 a b)))))))
  (! (= (tb2t5384 (t2tb5384 i)) i) :pattern ((t2tb5384 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (set1 (tuple2 c1 d1)) (set1 (tuple2 a1 b1))))) j)
     (= (t2tb5384 (tb2t5384 j)) j)) :pattern ((t2tb5384 (tb2t5384 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 c d)))) (v (set (set (tuple21 a b))))
  (r (set (tuple21 (set (tuple21 c d)) (set (tuple21 a b))))))
  (= (mem (set1 (tuple2 (set1 (tuple2 c1 d1)) (set1 (tuple2 a1 b1))))
  (t2tb5259 r)
  (relation (set1 (tuple2 a1 b1)) (set1 (tuple2 c1 d1)) (t2tb688 u)
  (t2tb10 v)))
  (forall ((x (set (tuple21 c d))) (y (set (tuple21 a b))))
  (=> (mem (tuple2 (set1 (tuple2 c1 d1)) (set1 (tuple2 a1 b1)))
  (Tuple2 (set1 (tuple2 c1 d1)) (set1 (tuple2 a1 b1)) (t2tb689 x) (t2tb11 y))
  (t2tb5259 r)) (and (mem22 x u) (mem4 y v)))))))

(declare-fun t2tb5385 ((set (set (tuple21 (set (tuple21 c d)) (tuple21 a
  b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 c d)) (tuple21 a b)))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 c1 d1)) (tuple2 a1 b1)))) (t2tb5385 x))))

(declare-fun tb2t5385 (uni) (set (set (tuple21 (set (tuple21 c d)) (tuple21 a
  b)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 c d)) (tuple21 a b))))))
  (! (= (tb2t5385 (t2tb5385 i)) i) :pattern ((t2tb5385 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 c1 d1)) (tuple2 a1 b1)))) j)
     (= (t2tb5385 (tb2t5385 j)) j)) :pattern ((t2tb5385 (tb2t5385 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 c d)))) (v (set (tuple21 a b)))
  (r (set (tuple21 (set (tuple21 c d)) (tuple21 a b)))))
  (= (mem (set1 (tuple2 (set1 (tuple2 c1 d1)) (tuple2 a1 b1))) (t2tb5261 r)
  (relation (tuple2 a1 b1) (set1 (tuple2 c1 d1)) (t2tb688 u) (t2tb11 v)))
  (forall ((x (set (tuple21 c d))) (y (tuple21 a b)))
  (=> (mem (tuple2 (set1 (tuple2 c1 d1)) (tuple2 a1 b1))
  (Tuple2 (set1 (tuple2 c1 d1)) (tuple2 a1 b1) (t2tb689 x) (t2tb13 y))
  (t2tb5261 r)) (and (mem22 x u) (mem3 y v)))))))

(declare-fun t2tb5386 ((set (set (tuple21 (set (tuple21 c d)) b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 c d)) b))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 c1 d1)) b1))) (t2tb5386 x))))

(declare-fun tb2t5386 (uni) (set (set (tuple21 (set (tuple21 c d)) b))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 c d)) b)))))
  (! (= (tb2t5386 (t2tb5386 i)) i) :pattern ((t2tb5386 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 c1 d1)) b1))) j)
     (= (t2tb5386 (tb2t5386 j)) j)) :pattern ((t2tb5386 (tb2t5386 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 c d)))) (v (set b))
  (r (set (tuple21 (set (tuple21 c d)) b))))
  (= (mem (set1 (tuple2 (set1 (tuple2 c1 d1)) b1)) (t2tb5264 r)
  (relation b1 (set1 (tuple2 c1 d1)) (t2tb688 u) (t2tb12 v)))
  (forall ((x (set (tuple21 c d))) (y b))
  (=> (mem (tuple2 (set1 (tuple2 c1 d1)) b1)
  (Tuple2 (set1 (tuple2 c1 d1)) b1 (t2tb689 x) (t2tb14 y)) (t2tb5264 r))
  (and (mem22 x u) (mem2 y v)))))))

(declare-fun t2tb5387 ((set (set (tuple21 (set (tuple21 c d)) a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 c d)) a))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 c1 d1)) a1))) (t2tb5387 x))))

(declare-fun tb2t5387 (uni) (set (set (tuple21 (set (tuple21 c d)) a))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 c d)) a)))))
  (! (= (tb2t5387 (t2tb5387 i)) i) :pattern ((t2tb5387 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 c1 d1)) a1))) j)
     (= (t2tb5387 (tb2t5387 j)) j)) :pattern ((t2tb5387 (tb2t5387 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 c d)))) (v (set a))
  (r (set (tuple21 (set (tuple21 c d)) a))))
  (= (mem (set1 (tuple2 (set1 (tuple2 c1 d1)) a1)) (t2tb5265 r)
  (relation a1 (set1 (tuple2 c1 d1)) (t2tb688 u) (t2tb1 v)))
  (forall ((x (set (tuple21 c d))) (y a))
  (=> (mem (tuple2 (set1 (tuple2 c1 d1)) a1)
  (Tuple2 (set1 (tuple2 c1 d1)) a1 (t2tb689 x) (t2tb2 y)) (t2tb5265 r))
  (and (mem22 x u) (mem1 y v)))))))

;; mem_relation
  (assert
  (forall ((b2 ty))
  (forall ((u (set (set (tuple21 c d)))) (v uni) (r uni))
  (and
  (=> (mem (set1 (tuple2 (set1 (tuple2 c1 d1)) b2)) r
  (relation b2 (set1 (tuple2 c1 d1)) (t2tb688 u) v))
  (forall ((x (set (tuple21 c d))) (y uni))
  (=> (mem (tuple2 (set1 (tuple2 c1 d1)) b2)
  (Tuple2 (set1 (tuple2 c1 d1)) b2 (t2tb689 x) y) r)
  (and (mem22 x u) (mem b2 y v)))))
  (=>
  (forall ((x (set (tuple21 c d))) (y uni))
  (=> (sort b2 y)
  (=> (mem (tuple2 (set1 (tuple2 c1 d1)) b2)
  (Tuple2 (set1 (tuple2 c1 d1)) b2 (t2tb689 x) y) r)
  (and (mem22 x u) (mem b2 y v))))) (mem
  (set1 (tuple2 (set1 (tuple2 c1 d1)) b2)) r
  (relation b2 (set1 (tuple2 c1 d1)) (t2tb688 u) v)))))))

(declare-fun t2tb5388 ((set (set (tuple21 (tuple21 c d) (tuple21 (tuple21 a
  c) (tuple21 b d)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 c d) (tuple21 (tuple21 a c)
  (tuple21 b d))))))) (sort
  (set1
  (set1 (tuple2 (tuple2 c1 d1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))))
  (t2tb5388 x))))

(declare-fun tb2t5388 (uni) (set (set (tuple21 (tuple21 c d)
  (tuple21 (tuple21 a c) (tuple21 b d))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 c d) (tuple21 (tuple21 a c)
  (tuple21 b d)))))))
  (! (= (tb2t5388 (t2tb5388 i)) i) :pattern ((t2tb5388 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (set1 (tuple2 (tuple2 c1 d1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))))
     j) (= (t2tb5388 (tb2t5388 j)) j)) :pattern ((t2tb5388 (tb2t5388 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 c d))) (v (set (tuple21 (tuple21 a c) (tuple21 b
  d)))) (r (set (tuple21 (tuple21 c d) (tuple21 (tuple21 a c) (tuple21 b
  d))))))
  (= (mem
  (set1 (tuple2 (tuple2 c1 d1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))))
  (t2tb5267 r)
  (relation (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 c1 d1) (t2tb689 u)
  (t2tb686 v)))
  (forall ((x (tuple21 c d)) (y (tuple21 (tuple21 a c) (tuple21 b d))))
  (=> (mem (tuple2 (tuple2 c1 d1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
  (Tuple2 (tuple2 c1 d1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb693 x)
  (t2tb691 y)) (t2tb5267 r)) (and (mem21 x u) (mem24 y v)))))))

(declare-fun t2tb5389 ((set (set (tuple21 (tuple21 c d) (tuple21 b
  d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 c d) (tuple21 b d)))))) (sort
  (set1 (set1 (tuple2 (tuple2 c1 d1) (tuple2 b1 d1)))) (t2tb5389 x))))

(declare-fun tb2t5389 (uni) (set (set (tuple21 (tuple21 c d) (tuple21 b
  d)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 c d) (tuple21 b d))))))
  (! (= (tb2t5389 (t2tb5389 i)) i) :pattern ((t2tb5389 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 c1 d1) (tuple2 b1 d1)))) j)
     (= (t2tb5389 (tb2t5389 j)) j)) :pattern ((t2tb5389 (tb2t5389 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 c d))) (v (set (tuple21 b d)))
  (r (set (tuple21 (tuple21 c d) (tuple21 b d)))))
  (= (mem (set1 (tuple2 (tuple2 c1 d1) (tuple2 b1 d1))) (t2tb5269 r)
  (relation (tuple2 b1 d1) (tuple2 c1 d1) (t2tb689 u) (t2tb687 v)))
  (forall ((x (tuple21 c d)) (y (tuple21 b d)))
  (=> (mem (tuple2 (tuple2 c1 d1) (tuple2 b1 d1))
  (Tuple2 (tuple2 c1 d1) (tuple2 b1 d1) (t2tb693 x) (t2tb692 y))
  (t2tb5269 r)) (and (mem21 x u) (mem23 y v)))))))

(declare-fun t2tb5390 ((set (set (tuple21 (tuple21 c d) (set (tuple21 c
  d)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 c d) (set (tuple21 c d))))))) (sort
  (set1 (set1 (tuple2 (tuple2 c1 d1) (set1 (tuple2 c1 d1))))) (t2tb5390 x))))

(declare-fun tb2t5390 (uni) (set (set (tuple21 (tuple21 c d) (set (tuple21 c
  d))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 c d) (set (tuple21 c d)))))))
  (! (= (tb2t5390 (t2tb5390 i)) i) :pattern ((t2tb5390 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 c1 d1) (set1 (tuple2 c1 d1))))) j)
     (= (t2tb5390 (tb2t5390 j)) j)) :pattern ((t2tb5390 (tb2t5390 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 c d))) (v (set (set (tuple21 c d))))
  (r (set (tuple21 (tuple21 c d) (set (tuple21 c d))))))
  (= (mem (set1 (tuple2 (tuple2 c1 d1) (set1 (tuple2 c1 d1)))) (t2tb5271 r)
  (relation (set1 (tuple2 c1 d1)) (tuple2 c1 d1) (t2tb689 u) (t2tb688 v)))
  (forall ((x (tuple21 c d)) (y (set (tuple21 c d))))
  (=> (mem (tuple2 (tuple2 c1 d1) (set1 (tuple2 c1 d1)))
  (Tuple2 (tuple2 c1 d1) (set1 (tuple2 c1 d1)) (t2tb693 x) (t2tb689 y))
  (t2tb5271 r)) (and (mem21 x u) (mem22 y v)))))))

(declare-fun t2tb5391 ((set (set (tuple21 (tuple21 c d) (tuple21 c
  d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 c d) (tuple21 c d)))))) (sort
  (set1 (set1 (tuple2 (tuple2 c1 d1) (tuple2 c1 d1)))) (t2tb5391 x))))

(declare-fun tb2t5391 (uni) (set (set (tuple21 (tuple21 c d) (tuple21 c
  d)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 c d) (tuple21 c d))))))
  (! (= (tb2t5391 (t2tb5391 i)) i) :pattern ((t2tb5391 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 c1 d1) (tuple2 c1 d1)))) j)
     (= (t2tb5391 (tb2t5391 j)) j)) :pattern ((t2tb5391 (tb2t5391 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 c d))) (v (set (tuple21 c d)))
  (r (set (tuple21 (tuple21 c d) (tuple21 c d)))))
  (= (mem (set1 (tuple2 (tuple2 c1 d1) (tuple2 c1 d1))) (t2tb5273 r)
  (relation (tuple2 c1 d1) (tuple2 c1 d1) (t2tb689 u) (t2tb689 v)))
  (forall ((x (tuple21 c d)) (y (tuple21 c d)))
  (=> (mem (tuple2 (tuple2 c1 d1) (tuple2 c1 d1))
  (Tuple2 (tuple2 c1 d1) (tuple2 c1 d1) (t2tb693 x) (t2tb693 y))
  (t2tb5273 r)) (and (mem21 x u) (mem21 y v)))))))

(declare-fun t2tb5392 ((set (set (tuple21 (tuple21 c d) d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 c d) d))))) (sort
  (set1 (set1 (tuple2 (tuple2 c1 d1) d1))) (t2tb5392 x))))

(declare-fun tb2t5392 (uni) (set (set (tuple21 (tuple21 c d) d))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 c d) d)))))
  (! (= (tb2t5392 (t2tb5392 i)) i) :pattern ((t2tb5392 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 c1 d1) d1))) j)
     (= (t2tb5392 (tb2t5392 j)) j)) :pattern ((t2tb5392 (tb2t5392 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 c d))) (v (set d)) (r (set (tuple21 (tuple21 c d)
  d))))
  (= (mem (set1 (tuple2 (tuple2 c1 d1) d1)) (t2tb5275 r)
  (relation d1 (tuple2 c1 d1) (t2tb689 u) (t2tb690 v)))
  (forall ((x (tuple21 c d)) (y d))
  (=> (mem (tuple2 (tuple2 c1 d1) d1)
  (Tuple2 (tuple2 c1 d1) d1 (t2tb693 x) (t2tb694 y)) (t2tb5275 r))
  (and (mem21 x u) (mem20 y v)))))))

(declare-fun t2tb5393 ((set (set (tuple21 (tuple21 c d) (tuple21 a
  c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 c d) (tuple21 a c)))))) (sort
  (set1 (set1 (tuple2 (tuple2 c1 d1) (tuple2 a1 c1)))) (t2tb5393 x))))

(declare-fun tb2t5393 (uni) (set (set (tuple21 (tuple21 c d) (tuple21 a
  c)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 c d) (tuple21 a c))))))
  (! (= (tb2t5393 (t2tb5393 i)) i) :pattern ((t2tb5393 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 c1 d1) (tuple2 a1 c1)))) j)
     (= (t2tb5393 (tb2t5393 j)) j)) :pattern ((t2tb5393 (tb2t5393 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 c d))) (v (set (tuple21 a c)))
  (r (set (tuple21 (tuple21 c d) (tuple21 a c)))))
  (= (mem (set1 (tuple2 (tuple2 c1 d1) (tuple2 a1 c1))) (t2tb5278 r)
  (relation (tuple2 a1 c1) (tuple2 c1 d1) (t2tb689 u) (t2tb129 v)))
  (forall ((x (tuple21 c d)) (y (tuple21 a c)))
  (=> (mem (tuple2 (tuple2 c1 d1) (tuple2 a1 c1))
  (Tuple2 (tuple2 c1 d1) (tuple2 a1 c1) (t2tb693 x) (t2tb133 y))
  (t2tb5278 r)) (and (mem21 x u) (mem10 y v)))))))

(declare-fun t2tb5394 ((set (set (tuple21 (tuple21 c d) c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 c d) c))))) (sort
  (set1 (set1 (tuple2 (tuple2 c1 d1) c1))) (t2tb5394 x))))

(declare-fun tb2t5394 (uni) (set (set (tuple21 (tuple21 c d) c))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 c d) c)))))
  (! (= (tb2t5394 (t2tb5394 i)) i) :pattern ((t2tb5394 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 c1 d1) c1))) j)
     (= (t2tb5394 (tb2t5394 j)) j)) :pattern ((t2tb5394 (tb2t5394 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 c d))) (v (set c)) (r (set (tuple21 (tuple21 c d)
  c))))
  (= (mem (set1 (tuple2 (tuple2 c1 d1) c1)) (t2tb5279 r)
  (relation c1 (tuple2 c1 d1) (t2tb689 u) (t2tb132 v)))
  (forall ((x (tuple21 c d)) (y c))
  (=> (mem (tuple2 (tuple2 c1 d1) c1)
  (Tuple2 (tuple2 c1 d1) c1 (t2tb693 x) (t2tb135 y)) (t2tb5279 r))
  (and (mem21 x u) (mem7 y v)))))))

(declare-fun t2tb5395 ((set (set (tuple21 (tuple21 c d) (set (tuple21 a
  b)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 c d) (set (tuple21 a b))))))) (sort
  (set1 (set1 (tuple2 (tuple2 c1 d1) (set1 (tuple2 a1 b1))))) (t2tb5395 x))))

(declare-fun tb2t5395 (uni) (set (set (tuple21 (tuple21 c d) (set (tuple21 a
  b))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 c d) (set (tuple21 a b)))))))
  (! (= (tb2t5395 (t2tb5395 i)) i) :pattern ((t2tb5395 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 c1 d1) (set1 (tuple2 a1 b1))))) j)
     (= (t2tb5395 (tb2t5395 j)) j)) :pattern ((t2tb5395 (tb2t5395 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 c d))) (v (set (set (tuple21 a b))))
  (r (set (tuple21 (tuple21 c d) (set (tuple21 a b))))))
  (= (mem (set1 (tuple2 (tuple2 c1 d1) (set1 (tuple2 a1 b1)))) (t2tb5281 r)
  (relation (set1 (tuple2 a1 b1)) (tuple2 c1 d1) (t2tb689 u) (t2tb10 v)))
  (forall ((x (tuple21 c d)) (y (set (tuple21 a b))))
  (=> (mem (tuple2 (tuple2 c1 d1) (set1 (tuple2 a1 b1)))
  (Tuple2 (tuple2 c1 d1) (set1 (tuple2 a1 b1)) (t2tb693 x) (t2tb11 y))
  (t2tb5281 r)) (and (mem21 x u) (mem4 y v)))))))

(declare-fun t2tb5396 ((set (set (tuple21 (tuple21 c d) (tuple21 a
  b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 c d) (tuple21 a b)))))) (sort
  (set1 (set1 (tuple2 (tuple2 c1 d1) (tuple2 a1 b1)))) (t2tb5396 x))))

(declare-fun tb2t5396 (uni) (set (set (tuple21 (tuple21 c d) (tuple21 a
  b)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 c d) (tuple21 a b))))))
  (! (= (tb2t5396 (t2tb5396 i)) i) :pattern ((t2tb5396 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 c1 d1) (tuple2 a1 b1)))) j)
     (= (t2tb5396 (tb2t5396 j)) j)) :pattern ((t2tb5396 (tb2t5396 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 c d))) (v (set (tuple21 a b)))
  (r (set (tuple21 (tuple21 c d) (tuple21 a b)))))
  (= (mem (set1 (tuple2 (tuple2 c1 d1) (tuple2 a1 b1))) (t2tb5283 r)
  (relation (tuple2 a1 b1) (tuple2 c1 d1) (t2tb689 u) (t2tb11 v)))
  (forall ((x (tuple21 c d)) (y (tuple21 a b)))
  (=> (mem (tuple2 (tuple2 c1 d1) (tuple2 a1 b1))
  (Tuple2 (tuple2 c1 d1) (tuple2 a1 b1) (t2tb693 x) (t2tb13 y)) (t2tb5283 r))
  (and (mem21 x u) (mem3 y v)))))))

(declare-fun t2tb5397 ((set (set (tuple21 (tuple21 c d) b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 c d) b))))) (sort
  (set1 (set1 (tuple2 (tuple2 c1 d1) b1))) (t2tb5397 x))))

(declare-fun tb2t5397 (uni) (set (set (tuple21 (tuple21 c d) b))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 c d) b)))))
  (! (= (tb2t5397 (t2tb5397 i)) i) :pattern ((t2tb5397 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 c1 d1) b1))) j)
     (= (t2tb5397 (tb2t5397 j)) j)) :pattern ((t2tb5397 (tb2t5397 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 c d))) (v (set b)) (r (set (tuple21 (tuple21 c d)
  b))))
  (= (mem (set1 (tuple2 (tuple2 c1 d1) b1)) (t2tb5285 r)
  (relation b1 (tuple2 c1 d1) (t2tb689 u) (t2tb12 v)))
  (forall ((x (tuple21 c d)) (y b))
  (=> (mem (tuple2 (tuple2 c1 d1) b1)
  (Tuple2 (tuple2 c1 d1) b1 (t2tb693 x) (t2tb14 y)) (t2tb5285 r))
  (and (mem21 x u) (mem2 y v)))))))

(declare-fun t2tb5398 ((set (set (tuple21 (tuple21 c d) a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 c d) a))))) (sort
  (set1 (set1 (tuple2 (tuple2 c1 d1) a1))) (t2tb5398 x))))

(declare-fun tb2t5398 (uni) (set (set (tuple21 (tuple21 c d) a))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 c d) a)))))
  (! (= (tb2t5398 (t2tb5398 i)) i) :pattern ((t2tb5398 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 c1 d1) a1))) j)
     (= (t2tb5398 (tb2t5398 j)) j)) :pattern ((t2tb5398 (tb2t5398 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 c d))) (v (set a)) (r (set (tuple21 (tuple21 c d)
  a))))
  (= (mem (set1 (tuple2 (tuple2 c1 d1) a1)) (t2tb5287 r)
  (relation a1 (tuple2 c1 d1) (t2tb689 u) (t2tb1 v)))
  (forall ((x (tuple21 c d)) (y a))
  (=> (mem (tuple2 (tuple2 c1 d1) a1)
  (Tuple2 (tuple2 c1 d1) a1 (t2tb693 x) (t2tb2 y)) (t2tb5287 r))
  (and (mem21 x u) (mem1 y v)))))))

;; mem_relation
  (assert
  (forall ((b2 ty))
  (forall ((u (set (tuple21 c d))) (v uni) (r uni))
  (and
  (=> (mem (set1 (tuple2 (tuple2 c1 d1) b2)) r
  (relation b2 (tuple2 c1 d1) (t2tb689 u) v))
  (forall ((x (tuple21 c d)) (y uni))
  (=> (mem (tuple2 (tuple2 c1 d1) b2)
  (Tuple2 (tuple2 c1 d1) b2 (t2tb693 x) y) r) (and (mem21 x u) (mem b2 y v)))))
  (=>
  (forall ((x (tuple21 c d)) (y uni))
  (=> (sort b2 y)
  (=> (mem (tuple2 (tuple2 c1 d1) b2)
  (Tuple2 (tuple2 c1 d1) b2 (t2tb693 x) y) r) (and (mem21 x u) (mem b2 y v)))))
  (mem (set1 (tuple2 (tuple2 c1 d1) b2)) r
  (relation b2 (tuple2 c1 d1) (t2tb689 u) v)))))))

(declare-fun t2tb5399 ((set (set (tuple21 d (tuple21 (tuple21 a c) (tuple21 b
  d)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 d (tuple21 (tuple21 a c) (tuple21 b d)))))))
  (sort (set1 (set1 (tuple2 d1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))))
  (t2tb5399 x))))

(declare-fun tb2t5399 (uni) (set (set (tuple21 d (tuple21 (tuple21 a c)
  (tuple21 b d))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 d (tuple21 (tuple21 a c) (tuple21 b d)))))))
  (! (= (tb2t5399 (t2tb5399 i)) i) :pattern ((t2tb5399 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 d1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))))) j)
     (= (t2tb5399 (tb2t5399 j)) j)) :pattern ((t2tb5399 (tb2t5399 j))) )))

;; mem_relation
  (assert
  (forall ((u (set d)) (v (set (tuple21 (tuple21 a c) (tuple21 b d))))
  (r (set (tuple21 d (tuple21 (tuple21 a c) (tuple21 b d))))))
  (= (mem (set1 (tuple2 d1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))))
  (t2tb5289 r)
  (relation (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) d1 (t2tb690 u)
  (t2tb686 v)))
  (forall ((x d) (y (tuple21 (tuple21 a c) (tuple21 b d))))
  (=> (mem (tuple2 d1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
  (Tuple2 d1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb694 x) (t2tb691 y))
  (t2tb5289 r)) (and (mem20 x u) (mem24 y v)))))))

(declare-fun t2tb5400 ((set (set (tuple21 d (tuple21 b d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 d (tuple21 b d)))))) (sort
  (set1 (set1 (tuple2 d1 (tuple2 b1 d1)))) (t2tb5400 x))))

(declare-fun tb2t5400 (uni) (set (set (tuple21 d (tuple21 b d)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 d (tuple21 b d))))))
  (! (= (tb2t5400 (t2tb5400 i)) i) :pattern ((t2tb5400 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 d1 (tuple2 b1 d1)))) j)
     (= (t2tb5400 (tb2t5400 j)) j)) :pattern ((t2tb5400 (tb2t5400 j))) )))

;; mem_relation
  (assert
  (forall ((u (set d)) (v (set (tuple21 b d))) (r (set (tuple21 d (tuple21 b
  d)))))
  (= (mem (set1 (tuple2 d1 (tuple2 b1 d1))) (t2tb5292 r)
  (relation (tuple2 b1 d1) d1 (t2tb690 u) (t2tb687 v)))
  (forall ((x d) (y (tuple21 b d)))
  (=> (mem (tuple2 d1 (tuple2 b1 d1))
  (Tuple2 d1 (tuple2 b1 d1) (t2tb694 x) (t2tb692 y)) (t2tb5292 r))
  (and (mem20 x u) (mem23 y v)))))))

(declare-fun t2tb5401 ((set (set (tuple21 d (set (tuple21 c d)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 d (set (tuple21 c d))))))) (sort
  (set1 (set1 (tuple2 d1 (set1 (tuple2 c1 d1))))) (t2tb5401 x))))

(declare-fun tb2t5401 (uni) (set (set (tuple21 d (set (tuple21 c d))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 d (set (tuple21 c d)))))))
  (! (= (tb2t5401 (t2tb5401 i)) i) :pattern ((t2tb5401 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 d1 (set1 (tuple2 c1 d1))))) j)
     (= (t2tb5401 (tb2t5401 j)) j)) :pattern ((t2tb5401 (tb2t5401 j))) )))

;; mem_relation
  (assert
  (forall ((u (set d)) (v (set (set (tuple21 c d)))) (r (set (tuple21 d
  (set (tuple21 c d))))))
  (= (mem (set1 (tuple2 d1 (set1 (tuple2 c1 d1)))) (t2tb5293 r)
  (relation (set1 (tuple2 c1 d1)) d1 (t2tb690 u) (t2tb688 v)))
  (forall ((x d) (y (set (tuple21 c d))))
  (=> (mem (tuple2 d1 (set1 (tuple2 c1 d1)))
  (Tuple2 d1 (set1 (tuple2 c1 d1)) (t2tb694 x) (t2tb689 y)) (t2tb5293 r))
  (and (mem20 x u) (mem22 y v)))))))

(declare-fun t2tb5402 ((set (set (tuple21 d (tuple21 c d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 d (tuple21 c d)))))) (sort
  (set1 (set1 (tuple2 d1 (tuple2 c1 d1)))) (t2tb5402 x))))

(declare-fun tb2t5402 (uni) (set (set (tuple21 d (tuple21 c d)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 d (tuple21 c d))))))
  (! (= (tb2t5402 (t2tb5402 i)) i) :pattern ((t2tb5402 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 d1 (tuple2 c1 d1)))) j)
     (= (t2tb5402 (tb2t5402 j)) j)) :pattern ((t2tb5402 (tb2t5402 j))) )))

;; mem_relation
  (assert
  (forall ((u (set d)) (v (set (tuple21 c d))) (r (set (tuple21 d (tuple21 c
  d)))))
  (= (mem (set1 (tuple2 d1 (tuple2 c1 d1))) (t2tb5295 r)
  (relation (tuple2 c1 d1) d1 (t2tb690 u) (t2tb689 v)))
  (forall ((x d) (y (tuple21 c d)))
  (=> (mem (tuple2 d1 (tuple2 c1 d1))
  (Tuple2 d1 (tuple2 c1 d1) (t2tb694 x) (t2tb693 y)) (t2tb5295 r))
  (and (mem20 x u) (mem21 y v)))))))

(declare-fun t2tb5403 ((set (set (tuple21 d d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 d d))))) (sort (set1 (set1 (tuple2 d1 d1)))
  (t2tb5403 x))))

(declare-fun tb2t5403 (uni) (set (set (tuple21 d d))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 d d)))))
  (! (= (tb2t5403 (t2tb5403 i)) i) :pattern ((t2tb5403 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 d1 d1))) j) (= (t2tb5403 (tb2t5403 j)) j)) :pattern (
  (t2tb5403 (tb2t5403 j))) )))

;; mem_relation
  (assert
  (forall ((u (set d)) (v (set d)) (r (set (tuple21 d d))))
  (= (mem (set1 (tuple2 d1 d1)) (t2tb5297 r)
  (relation d1 d1 (t2tb690 u) (t2tb690 v)))
  (forall ((x d) (y d))
  (=> (mem (tuple2 d1 d1) (Tuple2 d1 d1 (t2tb694 x) (t2tb694 y))
  (t2tb5297 r)) (and (mem20 x u) (mem20 y v)))))))

(declare-fun t2tb5404 ((set (set (tuple21 d (tuple21 a c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 d (tuple21 a c)))))) (sort
  (set1 (set1 (tuple2 d1 (tuple2 a1 c1)))) (t2tb5404 x))))

(declare-fun tb2t5404 (uni) (set (set (tuple21 d (tuple21 a c)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 d (tuple21 a c))))))
  (! (= (tb2t5404 (t2tb5404 i)) i) :pattern ((t2tb5404 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 d1 (tuple2 a1 c1)))) j)
     (= (t2tb5404 (tb2t5404 j)) j)) :pattern ((t2tb5404 (tb2t5404 j))) )))

;; mem_relation
  (assert
  (forall ((u (set d)) (v (set (tuple21 a c))) (r (set (tuple21 d (tuple21 a
  c)))))
  (= (mem (set1 (tuple2 d1 (tuple2 a1 c1))) (t2tb5299 r)
  (relation (tuple2 a1 c1) d1 (t2tb690 u) (t2tb129 v)))
  (forall ((x d) (y (tuple21 a c)))
  (=> (mem (tuple2 d1 (tuple2 a1 c1))
  (Tuple2 d1 (tuple2 a1 c1) (t2tb694 x) (t2tb133 y)) (t2tb5299 r))
  (and (mem20 x u) (mem10 y v)))))))

(declare-fun t2tb5405 ((set (set (tuple21 d c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 d c))))) (sort (set1 (set1 (tuple2 d1 c1)))
  (t2tb5405 x))))

(declare-fun tb2t5405 (uni) (set (set (tuple21 d c))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 d c)))))
  (! (= (tb2t5405 (t2tb5405 i)) i) :pattern ((t2tb5405 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 d1 c1))) j) (= (t2tb5405 (tb2t5405 j)) j)) :pattern (
  (t2tb5405 (tb2t5405 j))) )))

;; mem_relation
  (assert
  (forall ((u (set d)) (v (set c)) (r (set (tuple21 d c))))
  (= (mem (set1 (tuple2 d1 c1)) (t2tb829 r)
  (relation c1 d1 (t2tb690 u) (t2tb132 v)))
  (forall ((x d) (y c))
  (=> (mem (tuple2 d1 c1) (Tuple2 d1 c1 (t2tb694 x) (t2tb135 y)) (t2tb829 r))
  (and (mem20 x u) (mem7 y v)))))))

(declare-fun t2tb5406 ((set (set (tuple21 d (set (tuple21 a b)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 d (set (tuple21 a b))))))) (sort
  (set1 (set1 (tuple2 d1 (set1 (tuple2 a1 b1))))) (t2tb5406 x))))

(declare-fun tb2t5406 (uni) (set (set (tuple21 d (set (tuple21 a b))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 d (set (tuple21 a b)))))))
  (! (= (tb2t5406 (t2tb5406 i)) i) :pattern ((t2tb5406 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 d1 (set1 (tuple2 a1 b1))))) j)
     (= (t2tb5406 (tb2t5406 j)) j)) :pattern ((t2tb5406 (tb2t5406 j))) )))

;; mem_relation
  (assert
  (forall ((u (set d)) (v (set (set (tuple21 a b)))) (r (set (tuple21 d
  (set (tuple21 a b))))))
  (= (mem (set1 (tuple2 d1 (set1 (tuple2 a1 b1)))) (t2tb5301 r)
  (relation (set1 (tuple2 a1 b1)) d1 (t2tb690 u) (t2tb10 v)))
  (forall ((x d) (y (set (tuple21 a b))))
  (=> (mem (tuple2 d1 (set1 (tuple2 a1 b1)))
  (Tuple2 d1 (set1 (tuple2 a1 b1)) (t2tb694 x) (t2tb11 y)) (t2tb5301 r))
  (and (mem20 x u) (mem4 y v)))))))

(declare-fun t2tb5407 ((set (set (tuple21 d (tuple21 a b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 d (tuple21 a b)))))) (sort
  (set1 (set1 (tuple2 d1 (tuple2 a1 b1)))) (t2tb5407 x))))

(declare-fun tb2t5407 (uni) (set (set (tuple21 d (tuple21 a b)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 d (tuple21 a b))))))
  (! (= (tb2t5407 (t2tb5407 i)) i) :pattern ((t2tb5407 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 d1 (tuple2 a1 b1)))) j)
     (= (t2tb5407 (tb2t5407 j)) j)) :pattern ((t2tb5407 (tb2t5407 j))) )))

;; mem_relation
  (assert
  (forall ((u (set d)) (v (set (tuple21 a b))) (r (set (tuple21 d (tuple21 a
  b)))))
  (= (mem (set1 (tuple2 d1 (tuple2 a1 b1))) (t2tb5303 r)
  (relation (tuple2 a1 b1) d1 (t2tb690 u) (t2tb11 v)))
  (forall ((x d) (y (tuple21 a b)))
  (=> (mem (tuple2 d1 (tuple2 a1 b1))
  (Tuple2 d1 (tuple2 a1 b1) (t2tb694 x) (t2tb13 y)) (t2tb5303 r))
  (and (mem20 x u) (mem3 y v)))))))

(declare-fun t2tb5408 ((set (set (tuple21 d b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 d b))))) (sort (set1 (set1 (tuple2 d1 b1)))
  (t2tb5408 x))))

(declare-fun tb2t5408 (uni) (set (set (tuple21 d b))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 d b)))))
  (! (= (tb2t5408 (t2tb5408 i)) i) :pattern ((t2tb5408 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 d1 b1))) j) (= (t2tb5408 (tb2t5408 j)) j)) :pattern (
  (t2tb5408 (tb2t5408 j))) )))

;; mem_relation
  (assert
  (forall ((u (set d)) (v (set b)) (r (set (tuple21 d b))))
  (= (mem (set1 (tuple2 d1 b1)) (t2tb5305 r)
  (relation b1 d1 (t2tb690 u) (t2tb12 v)))
  (forall ((x d) (y b))
  (=> (mem (tuple2 d1 b1) (Tuple2 d1 b1 (t2tb694 x) (t2tb14 y)) (t2tb5305 r))
  (and (mem20 x u) (mem2 y v)))))))

(declare-fun t2tb5409 ((set (set (tuple21 d a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 d a))))) (sort (set1 (set1 (tuple2 d1 a1)))
  (t2tb5409 x))))

(declare-fun tb2t5409 (uni) (set (set (tuple21 d a))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 d a)))))
  (! (= (tb2t5409 (t2tb5409 i)) i) :pattern ((t2tb5409 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 d1 a1))) j) (= (t2tb5409 (tb2t5409 j)) j)) :pattern (
  (t2tb5409 (tb2t5409 j))) )))

;; mem_relation
  (assert
  (forall ((u (set d)) (v (set a)) (r (set (tuple21 d a))))
  (= (mem (set1 (tuple2 d1 a1)) (t2tb5308 r)
  (relation a1 d1 (t2tb690 u) (t2tb1 v)))
  (forall ((x d) (y a))
  (=> (mem (tuple2 d1 a1) (Tuple2 d1 a1 (t2tb694 x) (t2tb2 y)) (t2tb5308 r))
  (and (mem20 x u) (mem1 y v)))))))

;; mem_relation
  (assert
  (forall ((b2 ty))
  (forall ((u (set d)) (v uni) (r uni))
  (and
  (=> (mem (set1 (tuple2 d1 b2)) r (relation b2 d1 (t2tb690 u) v))
  (forall ((x d) (y uni))
  (=> (mem (tuple2 d1 b2) (Tuple2 d1 b2 (t2tb694 x) y) r)
  (and (mem20 x u) (mem b2 y v)))))
  (=>
  (forall ((x d) (y uni))
  (=> (sort b2 y)
  (=> (mem (tuple2 d1 b2) (Tuple2 d1 b2 (t2tb694 x) y) r)
  (and (mem20 x u) (mem b2 y v))))) (mem (set1 (tuple2 d1 b2)) r
  (relation b2 d1 (t2tb690 u) v)))))))

(declare-fun t2tb5410 ((set (set (tuple21 (tuple21 a c) (tuple21 (tuple21 a
  c) (tuple21 b d)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a c) (tuple21 (tuple21 a c)
  (tuple21 b d))))))) (sort
  (set1
  (set1 (tuple2 (tuple2 a1 c1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))))
  (t2tb5410 x))))

(declare-fun tb2t5410 (uni) (set (set (tuple21 (tuple21 a c)
  (tuple21 (tuple21 a c) (tuple21 b d))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a c) (tuple21 (tuple21 a c)
  (tuple21 b d)))))))
  (! (= (tb2t5410 (t2tb5410 i)) i) :pattern ((t2tb5410 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (set1 (tuple2 (tuple2 a1 c1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))))
     j) (= (t2tb5410 (tb2t5410 j)) j)) :pattern ((t2tb5410 (tb2t5410 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a c))) (v (set (tuple21 (tuple21 a c) (tuple21 b
  d)))) (r (set (tuple21 (tuple21 a c) (tuple21 (tuple21 a c) (tuple21 b
  d))))))
  (= (mem
  (set1 (tuple2 (tuple2 a1 c1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))))
  (t2tb5309 r)
  (relation (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 a1 c1) (t2tb129 u)
  (t2tb686 v)))
  (forall ((x (tuple21 a c)) (y (tuple21 (tuple21 a c) (tuple21 b d))))
  (=> (mem (tuple2 (tuple2 a1 c1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
  (Tuple2 (tuple2 a1 c1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb133 x)
  (t2tb691 y)) (t2tb5309 r)) (and (mem10 x u) (mem24 y v)))))))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a c))) (v (set (tuple21 b d)))
  (r (set (tuple21 (tuple21 a c) (tuple21 b d)))))
  (= (mem (set1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))) (t2tb686 r)
  (relation (tuple2 b1 d1) (tuple2 a1 c1) (t2tb129 u) (t2tb687 v)))
  (forall ((x (tuple21 a c)) (y (tuple21 b d)))
  (=> (mem24
  (tb2t691 (Tuple2 (tuple2 a1 c1) (tuple2 b1 d1) (t2tb133 x) (t2tb692 y))) r)
  (and (mem10 x u) (mem23 y v)))))))

(declare-fun t2tb5411 ((set (set (tuple21 (tuple21 a c) (set (tuple21 c
  d)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a c) (set (tuple21 c d))))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 c1) (set1 (tuple2 c1 d1))))) (t2tb5411 x))))

(declare-fun tb2t5411 (uni) (set (set (tuple21 (tuple21 a c) (set (tuple21 c
  d))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a c) (set (tuple21 c d)))))))
  (! (= (tb2t5411 (t2tb5411 i)) i) :pattern ((t2tb5411 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 c1) (set1 (tuple2 c1 d1))))) j)
     (= (t2tb5411 (tb2t5411 j)) j)) :pattern ((t2tb5411 (tb2t5411 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a c))) (v (set (set (tuple21 c d))))
  (r (set (tuple21 (tuple21 a c) (set (tuple21 c d))))))
  (= (mem (set1 (tuple2 (tuple2 a1 c1) (set1 (tuple2 c1 d1)))) (t2tb5311 r)
  (relation (set1 (tuple2 c1 d1)) (tuple2 a1 c1) (t2tb129 u) (t2tb688 v)))
  (forall ((x (tuple21 a c)) (y (set (tuple21 c d))))
  (=> (mem (tuple2 (tuple2 a1 c1) (set1 (tuple2 c1 d1)))
  (Tuple2 (tuple2 a1 c1) (set1 (tuple2 c1 d1)) (t2tb133 x) (t2tb689 y))
  (t2tb5311 r)) (and (mem10 x u) (mem22 y v)))))))

(declare-fun t2tb5412 ((set (set (tuple21 (tuple21 a c) (tuple21 c
  d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a c) (tuple21 c d)))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 c1) (tuple2 c1 d1)))) (t2tb5412 x))))

(declare-fun tb2t5412 (uni) (set (set (tuple21 (tuple21 a c) (tuple21 c
  d)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a c) (tuple21 c d))))))
  (! (= (tb2t5412 (t2tb5412 i)) i) :pattern ((t2tb5412 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 c1) (tuple2 c1 d1)))) j)
     (= (t2tb5412 (tb2t5412 j)) j)) :pattern ((t2tb5412 (tb2t5412 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a c))) (v (set (tuple21 c d)))
  (r (set (tuple21 (tuple21 a c) (tuple21 c d)))))
  (= (mem (set1 (tuple2 (tuple2 a1 c1) (tuple2 c1 d1))) (t2tb5313 r)
  (relation (tuple2 c1 d1) (tuple2 a1 c1) (t2tb129 u) (t2tb689 v)))
  (forall ((x (tuple21 a c)) (y (tuple21 c d)))
  (=> (mem (tuple2 (tuple2 a1 c1) (tuple2 c1 d1))
  (Tuple2 (tuple2 a1 c1) (tuple2 c1 d1) (t2tb133 x) (t2tb693 y))
  (t2tb5313 r)) (and (mem10 x u) (mem21 y v)))))))

(declare-fun t2tb5413 ((set (set (tuple21 (tuple21 a c) d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a c) d))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 c1) d1))) (t2tb5413 x))))

(declare-fun tb2t5413 (uni) (set (set (tuple21 (tuple21 a c) d))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a c) d)))))
  (! (= (tb2t5413 (t2tb5413 i)) i) :pattern ((t2tb5413 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 c1) d1))) j)
     (= (t2tb5413 (tb2t5413 j)) j)) :pattern ((t2tb5413 (tb2t5413 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a c))) (v (set d)) (r (set (tuple21 (tuple21 a c)
  d))))
  (= (mem (set1 (tuple2 (tuple2 a1 c1) d1)) (t2tb5315 r)
  (relation d1 (tuple2 a1 c1) (t2tb129 u) (t2tb690 v)))
  (forall ((x (tuple21 a c)) (y d))
  (=> (mem (tuple2 (tuple2 a1 c1) d1)
  (Tuple2 (tuple2 a1 c1) d1 (t2tb133 x) (t2tb694 y)) (t2tb5315 r))
  (and (mem10 x u) (mem20 y v)))))))

(declare-fun t2tb275 ((set (set (tuple21 (tuple21 a c) (tuple21 a c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a c) (tuple21 a c)))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 c1) (tuple2 a1 c1)))) (t2tb275 x))))

(declare-fun tb2t275 (uni) (set (set (tuple21 (tuple21 a c) (tuple21 a c)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a c) (tuple21 a c))))))
  (! (= (tb2t275 (t2tb275 i)) i) :pattern ((t2tb275 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 c1) (tuple2 a1 c1)))) j)
     (= (t2tb275 (tb2t275 j)) j)) :pattern ((t2tb275 (tb2t275 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a c))) (v (set (tuple21 a c)))
  (r (set (tuple21 (tuple21 a c) (tuple21 a c)))))
  (= (mem (set1 (tuple2 (tuple2 a1 c1) (tuple2 a1 c1))) (t2tb157 r)
  (relation (tuple2 a1 c1) (tuple2 a1 c1) (t2tb129 u) (t2tb129 v)))
  (forall ((x (tuple21 a c)) (y (tuple21 a c)))
  (=> (mem (tuple2 (tuple2 a1 c1) (tuple2 a1 c1))
  (Tuple2 (tuple2 a1 c1) (tuple2 a1 c1) (t2tb133 x) (t2tb133 y)) (t2tb157 r))
  (and (mem10 x u) (mem10 y v)))))))

(declare-fun t2tb278 ((set (set (tuple21 (tuple21 a c) c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a c) c))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 c1) c1))) (t2tb278 x))))

(declare-fun tb2t278 (uni) (set (set (tuple21 (tuple21 a c) c))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a c) c)))))
  (! (= (tb2t278 (t2tb278 i)) i) :pattern ((t2tb278 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 c1) c1))) j)
     (= (t2tb278 (tb2t278 j)) j)) :pattern ((t2tb278 (tb2t278 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a c))) (v (set c)) (r (set (tuple21 (tuple21 a c)
  c))))
  (= (mem (set1 (tuple2 (tuple2 a1 c1) c1)) (t2tb162 r)
  (relation c1 (tuple2 a1 c1) (t2tb129 u) (t2tb132 v)))
  (forall ((x (tuple21 a c)) (y c))
  (=> (mem (tuple2 (tuple2 a1 c1) c1)
  (Tuple2 (tuple2 a1 c1) c1 (t2tb133 x) (t2tb135 y)) (t2tb162 r))
  (and (mem10 x u) (mem7 y v)))))))

(declare-fun t2tb279 ((set (set (tuple21 (tuple21 a c) (set (tuple21 a
  b)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a c) (set (tuple21 a b))))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 c1) (set1 (tuple2 a1 b1))))) (t2tb279 x))))

(declare-fun tb2t279 (uni) (set (set (tuple21 (tuple21 a c) (set (tuple21 a
  b))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a c) (set (tuple21 a b)))))))
  (! (= (tb2t279 (t2tb279 i)) i) :pattern ((t2tb279 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 c1) (set1 (tuple2 a1 b1))))) j)
     (= (t2tb279 (tb2t279 j)) j)) :pattern ((t2tb279 (tb2t279 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a c))) (v (set (set (tuple21 a b))))
  (r (set (tuple21 (tuple21 a c) (set (tuple21 a b))))))
  (= (mem (set1 (tuple2 (tuple2 a1 c1) (set1 (tuple2 a1 b1)))) (t2tb164 r)
  (relation (set1 (tuple2 a1 b1)) (tuple2 a1 c1) (t2tb129 u) (t2tb10 v)))
  (forall ((x (tuple21 a c)) (y (set (tuple21 a b))))
  (=> (mem (tuple2 (tuple2 a1 c1) (set1 (tuple2 a1 b1)))
  (Tuple2 (tuple2 a1 c1) (set1 (tuple2 a1 b1)) (t2tb133 x) (t2tb11 y))
  (t2tb164 r)) (and (mem10 x u) (mem4 y v)))))))

(declare-fun t2tb280 ((set (set (tuple21 (tuple21 a c) (tuple21 a b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a c) (tuple21 a b)))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 c1) (tuple2 a1 b1)))) (t2tb280 x))))

(declare-fun tb2t280 (uni) (set (set (tuple21 (tuple21 a c) (tuple21 a b)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a c) (tuple21 a b))))))
  (! (= (tb2t280 (t2tb280 i)) i) :pattern ((t2tb280 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 c1) (tuple2 a1 b1)))) j)
     (= (t2tb280 (tb2t280 j)) j)) :pattern ((t2tb280 (tb2t280 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a c))) (v (set (tuple21 a b)))
  (r (set (tuple21 (tuple21 a c) (tuple21 a b)))))
  (= (mem (set1 (tuple2 (tuple2 a1 c1) (tuple2 a1 b1))) (t2tb166 r)
  (relation (tuple2 a1 b1) (tuple2 a1 c1) (t2tb129 u) (t2tb11 v)))
  (forall ((x (tuple21 a c)) (y (tuple21 a b)))
  (=> (mem (tuple2 (tuple2 a1 c1) (tuple2 a1 b1))
  (Tuple2 (tuple2 a1 c1) (tuple2 a1 b1) (t2tb133 x) (t2tb13 y)) (t2tb166 r))
  (and (mem10 x u) (mem3 y v)))))))

(declare-fun t2tb281 ((set (set (tuple21 (tuple21 a c) b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a c) b))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 c1) b1))) (t2tb281 x))))

(declare-fun tb2t281 (uni) (set (set (tuple21 (tuple21 a c) b))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a c) b)))))
  (! (= (tb2t281 (t2tb281 i)) i) :pattern ((t2tb281 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 c1) b1))) j)
     (= (t2tb281 (tb2t281 j)) j)) :pattern ((t2tb281 (tb2t281 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a c))) (v (set b)) (r (set (tuple21 (tuple21 a c)
  b))))
  (= (mem (set1 (tuple2 (tuple2 a1 c1) b1)) (t2tb168 r)
  (relation b1 (tuple2 a1 c1) (t2tb129 u) (t2tb12 v)))
  (forall ((x (tuple21 a c)) (y b))
  (=> (mem (tuple2 (tuple2 a1 c1) b1)
  (Tuple2 (tuple2 a1 c1) b1 (t2tb133 x) (t2tb14 y)) (t2tb168 r))
  (and (mem10 x u) (mem2 y v)))))))

(declare-fun t2tb282 ((set (set (tuple21 (tuple21 a c) a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a c) a))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 c1) a1))) (t2tb282 x))))

(declare-fun tb2t282 (uni) (set (set (tuple21 (tuple21 a c) a))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a c) a)))))
  (! (= (tb2t282 (t2tb282 i)) i) :pattern ((t2tb282 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 c1) a1))) j)
     (= (t2tb282 (tb2t282 j)) j)) :pattern ((t2tb282 (tb2t282 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a c))) (v (set a)) (r (set (tuple21 (tuple21 a c)
  a))))
  (= (mem (set1 (tuple2 (tuple2 a1 c1) a1)) (t2tb170 r)
  (relation a1 (tuple2 a1 c1) (t2tb129 u) (t2tb1 v)))
  (forall ((x (tuple21 a c)) (y a))
  (=> (mem (tuple2 (tuple2 a1 c1) a1)
  (Tuple2 (tuple2 a1 c1) a1 (t2tb133 x) (t2tb2 y)) (t2tb170 r))
  (and (mem10 x u) (mem1 y v)))))))

;; mem_relation
  (assert
  (forall ((b2 ty))
  (forall ((u (set (tuple21 a c))) (v uni) (r uni))
  (and
  (=> (mem (set1 (tuple2 (tuple2 a1 c1) b2)) r
  (relation b2 (tuple2 a1 c1) (t2tb129 u) v))
  (forall ((x (tuple21 a c)) (y uni))
  (=> (mem (tuple2 (tuple2 a1 c1) b2)
  (Tuple2 (tuple2 a1 c1) b2 (t2tb133 x) y) r) (and (mem10 x u) (mem b2 y v)))))
  (=>
  (forall ((x (tuple21 a c)) (y uni))
  (=> (sort b2 y)
  (=> (mem (tuple2 (tuple2 a1 c1) b2)
  (Tuple2 (tuple2 a1 c1) b2 (t2tb133 x) y) r) (and (mem10 x u) (mem b2 y v)))))
  (mem (set1 (tuple2 (tuple2 a1 c1) b2)) r
  (relation b2 (tuple2 a1 c1) (t2tb129 u) v)))))))

(declare-fun t2tb5414 ((set (set (tuple21 c (tuple21 (tuple21 a c) (tuple21 b
  d)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 c (tuple21 (tuple21 a c) (tuple21 b d)))))))
  (sort (set1 (set1 (tuple2 c1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))))
  (t2tb5414 x))))

(declare-fun tb2t5414 (uni) (set (set (tuple21 c (tuple21 (tuple21 a c)
  (tuple21 b d))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 c (tuple21 (tuple21 a c) (tuple21 b d)))))))
  (! (= (tb2t5414 (t2tb5414 i)) i) :pattern ((t2tb5414 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 c1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))))) j)
     (= (t2tb5414 (tb2t5414 j)) j)) :pattern ((t2tb5414 (tb2t5414 j))) )))

;; mem_relation
  (assert
  (forall ((u (set c)) (v (set (tuple21 (tuple21 a c) (tuple21 b d))))
  (r (set (tuple21 c (tuple21 (tuple21 a c) (tuple21 b d))))))
  (= (mem (set1 (tuple2 c1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))))
  (t2tb5317 r)
  (relation (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) c1 (t2tb132 u)
  (t2tb686 v)))
  (forall ((x c) (y (tuple21 (tuple21 a c) (tuple21 b d))))
  (=> (mem (tuple2 c1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
  (Tuple2 c1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb135 x) (t2tb691 y))
  (t2tb5317 r)) (and (mem7 x u) (mem24 y v)))))))

(declare-fun t2tb5415 ((set (set (tuple21 c (tuple21 b d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 c (tuple21 b d)))))) (sort
  (set1 (set1 (tuple2 c1 (tuple2 b1 d1)))) (t2tb5415 x))))

(declare-fun tb2t5415 (uni) (set (set (tuple21 c (tuple21 b d)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 c (tuple21 b d))))))
  (! (= (tb2t5415 (t2tb5415 i)) i) :pattern ((t2tb5415 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 c1 (tuple2 b1 d1)))) j)
     (= (t2tb5415 (tb2t5415 j)) j)) :pattern ((t2tb5415 (tb2t5415 j))) )))

;; mem_relation
  (assert
  (forall ((u (set c)) (v (set (tuple21 b d))) (r (set (tuple21 c (tuple21 b
  d)))))
  (= (mem (set1 (tuple2 c1 (tuple2 b1 d1))) (t2tb5319 r)
  (relation (tuple2 b1 d1) c1 (t2tb132 u) (t2tb687 v)))
  (forall ((x c) (y (tuple21 b d)))
  (=> (mem (tuple2 c1 (tuple2 b1 d1))
  (Tuple2 c1 (tuple2 b1 d1) (t2tb135 x) (t2tb692 y)) (t2tb5319 r))
  (and (mem7 x u) (mem23 y v)))))))

(declare-fun t2tb5416 ((set (set (tuple21 c (set (tuple21 c d)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 c (set (tuple21 c d))))))) (sort
  (set1 (set1 (tuple2 c1 (set1 (tuple2 c1 d1))))) (t2tb5416 x))))

(declare-fun tb2t5416 (uni) (set (set (tuple21 c (set (tuple21 c d))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 c (set (tuple21 c d)))))))
  (! (= (tb2t5416 (t2tb5416 i)) i) :pattern ((t2tb5416 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 c1 (set1 (tuple2 c1 d1))))) j)
     (= (t2tb5416 (tb2t5416 j)) j)) :pattern ((t2tb5416 (tb2t5416 j))) )))

;; mem_relation
  (assert
  (forall ((u (set c)) (v (set (set (tuple21 c d)))) (r (set (tuple21 c
  (set (tuple21 c d))))))
  (= (mem (set1 (tuple2 c1 (set1 (tuple2 c1 d1)))) (t2tb5322 r)
  (relation (set1 (tuple2 c1 d1)) c1 (t2tb132 u) (t2tb688 v)))
  (forall ((x c) (y (set (tuple21 c d))))
  (=> (mem (tuple2 c1 (set1 (tuple2 c1 d1)))
  (Tuple2 c1 (set1 (tuple2 c1 d1)) (t2tb135 x) (t2tb689 y)) (t2tb5322 r))
  (and (mem7 x u) (mem22 y v)))))))

(declare-fun t2tb5417 ((set (set (tuple21 c (tuple21 c d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 c (tuple21 c d)))))) (sort
  (set1 (set1 (tuple2 c1 (tuple2 c1 d1)))) (t2tb5417 x))))

(declare-fun tb2t5417 (uni) (set (set (tuple21 c (tuple21 c d)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 c (tuple21 c d))))))
  (! (= (tb2t5417 (t2tb5417 i)) i) :pattern ((t2tb5417 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 c1 (tuple2 c1 d1)))) j)
     (= (t2tb5417 (tb2t5417 j)) j)) :pattern ((t2tb5417 (tb2t5417 j))) )))

;; mem_relation
  (assert
  (forall ((u (set c)) (v (set (tuple21 c d))) (r (set (tuple21 c (tuple21 c
  d)))))
  (= (mem (set1 (tuple2 c1 (tuple2 c1 d1))) (t2tb5323 r)
  (relation (tuple2 c1 d1) c1 (t2tb132 u) (t2tb689 v)))
  (forall ((x c) (y (tuple21 c d)))
  (=> (mem (tuple2 c1 (tuple2 c1 d1))
  (Tuple2 c1 (tuple2 c1 d1) (t2tb135 x) (t2tb693 y)) (t2tb5323 r))
  (and (mem7 x u) (mem21 y v)))))))

;; mem_relation
  (assert
  (forall ((u (set c)) (v (set d)) (r (set (tuple21 c d))))
  (= (mem22 r (relation7 u v))
  (forall ((x c) (y d))
  (=> (mem21 (tb2t693 (Tuple2 c1 d1 (t2tb135 x) (t2tb694 y))) r)
  (and (mem7 x u) (mem20 y v)))))))

(declare-fun t2tb302 ((set (set (tuple21 c (tuple21 a c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 c (tuple21 a c)))))) (sort
  (set1 (set1 (tuple2 c1 (tuple2 a1 c1)))) (t2tb302 x))))

(declare-fun tb2t302 (uni) (set (set (tuple21 c (tuple21 a c)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 c (tuple21 a c))))))
  (! (= (tb2t302 (t2tb302 i)) i) :pattern ((t2tb302 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 c1 (tuple2 a1 c1)))) j)
     (= (t2tb302 (tb2t302 j)) j)) :pattern ((t2tb302 (tb2t302 j))) )))

;; mem_relation
  (assert
  (forall ((u (set c)) (v (set (tuple21 a c))) (r (set (tuple21 c (tuple21 a
  c)))))
  (= (mem (set1 (tuple2 c1 (tuple2 a1 c1))) (t2tb210 r)
  (relation (tuple2 a1 c1) c1 (t2tb132 u) (t2tb129 v)))
  (forall ((x c) (y (tuple21 a c)))
  (=> (mem (tuple2 c1 (tuple2 a1 c1))
  (Tuple2 c1 (tuple2 a1 c1) (t2tb135 x) (t2tb133 y)) (t2tb210 r))
  (and (mem7 x u) (mem10 y v)))))))

(declare-fun t2tb305 ((set (set (tuple21 c c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 c c))))) (sort (set1 (set1 (tuple2 c1 c1)))
  (t2tb305 x))))

(declare-fun tb2t305 (uni) (set (set (tuple21 c c))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 c c)))))
  (! (= (tb2t305 (t2tb305 i)) i) :pattern ((t2tb305 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 c1 c1))) j) (= (t2tb305 (tb2t305 j)) j)) :pattern (
  (t2tb305 (tb2t305 j))) )))

;; mem_relation
  (assert
  (forall ((u (set c)) (v (set c)) (r (set (tuple21 c c))))
  (= (mem (set1 (tuple2 c1 c1)) (t2tb216 r)
  (relation c1 c1 (t2tb132 u) (t2tb132 v)))
  (forall ((x c) (y c))
  (=> (mem (tuple2 c1 c1) (Tuple2 c1 c1 (t2tb135 x) (t2tb135 y)) (t2tb216 r))
  (and (mem7 x u) (mem7 y v)))))))

(declare-fun t2tb306 ((set (set (tuple21 c (set (tuple21 a b)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 c (set (tuple21 a b))))))) (sort
  (set1 (set1 (tuple2 c1 (set1 (tuple2 a1 b1))))) (t2tb306 x))))

(declare-fun tb2t306 (uni) (set (set (tuple21 c (set (tuple21 a b))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 c (set (tuple21 a b)))))))
  (! (= (tb2t306 (t2tb306 i)) i) :pattern ((t2tb306 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 c1 (set1 (tuple2 a1 b1))))) j)
     (= (t2tb306 (tb2t306 j)) j)) :pattern ((t2tb306 (tb2t306 j))) )))

;; mem_relation
  (assert
  (forall ((u (set c)) (v (set (set (tuple21 a b)))) (r (set (tuple21 c
  (set (tuple21 a b))))))
  (= (mem (set1 (tuple2 c1 (set1 (tuple2 a1 b1)))) (t2tb218 r)
  (relation (set1 (tuple2 a1 b1)) c1 (t2tb132 u) (t2tb10 v)))
  (forall ((x c) (y (set (tuple21 a b))))
  (=> (mem (tuple2 c1 (set1 (tuple2 a1 b1)))
  (Tuple2 c1 (set1 (tuple2 a1 b1)) (t2tb135 x) (t2tb11 y)) (t2tb218 r))
  (and (mem7 x u) (mem4 y v)))))))

(declare-fun t2tb307 ((set (set (tuple21 c (tuple21 a b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 c (tuple21 a b)))))) (sort
  (set1 (set1 (tuple2 c1 (tuple2 a1 b1)))) (t2tb307 x))))

(declare-fun tb2t307 (uni) (set (set (tuple21 c (tuple21 a b)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 c (tuple21 a b))))))
  (! (= (tb2t307 (t2tb307 i)) i) :pattern ((t2tb307 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 c1 (tuple2 a1 b1)))) j)
     (= (t2tb307 (tb2t307 j)) j)) :pattern ((t2tb307 (tb2t307 j))) )))

;; mem_relation
  (assert
  (forall ((u (set c)) (v (set (tuple21 a b))) (r (set (tuple21 c (tuple21 a
  b)))))
  (= (mem (set1 (tuple2 c1 (tuple2 a1 b1))) (t2tb220 r)
  (relation (tuple2 a1 b1) c1 (t2tb132 u) (t2tb11 v)))
  (forall ((x c) (y (tuple21 a b)))
  (=> (mem (tuple2 c1 (tuple2 a1 b1))
  (Tuple2 c1 (tuple2 a1 b1) (t2tb135 x) (t2tb13 y)) (t2tb220 r))
  (and (mem7 x u) (mem3 y v)))))))

(declare-fun t2tb308 ((set (set (tuple21 c b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 c b))))) (sort (set1 (set1 (tuple2 c1 b1)))
  (t2tb308 x))))

(declare-fun tb2t308 (uni) (set (set (tuple21 c b))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 c b)))))
  (! (= (tb2t308 (t2tb308 i)) i) :pattern ((t2tb308 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 c1 b1))) j) (= (t2tb308 (tb2t308 j)) j)) :pattern (
  (t2tb308 (tb2t308 j))) )))

;; mem_relation
  (assert
  (forall ((u (set c)) (v (set b)) (r (set (tuple21 c b))))
  (= (mem (set1 (tuple2 c1 b1)) (t2tb222 r)
  (relation b1 c1 (t2tb132 u) (t2tb12 v)))
  (forall ((x c) (y b))
  (=> (mem (tuple2 c1 b1) (Tuple2 c1 b1 (t2tb135 x) (t2tb14 y)) (t2tb222 r))
  (and (mem7 x u) (mem2 y v)))))))

(declare-fun t2tb309 ((set (set (tuple21 c a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 c a))))) (sort (set1 (set1 (tuple2 c1 a1)))
  (t2tb309 x))))

(declare-fun tb2t309 (uni) (set (set (tuple21 c a))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 c a)))))
  (! (= (tb2t309 (t2tb309 i)) i) :pattern ((t2tb309 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 c1 a1))) j) (= (t2tb309 (tb2t309 j)) j)) :pattern (
  (t2tb309 (tb2t309 j))) )))

;; mem_relation
  (assert
  (forall ((u (set c)) (v (set a)) (r (set (tuple21 c a))))
  (= (mem (set1 (tuple2 c1 a1)) (t2tb224 r)
  (relation a1 c1 (t2tb132 u) (t2tb1 v)))
  (forall ((x c) (y a))
  (=> (mem (tuple2 c1 a1) (Tuple2 c1 a1 (t2tb135 x) (t2tb2 y)) (t2tb224 r))
  (and (mem7 x u) (mem1 y v)))))))

;; mem_relation
  (assert
  (forall ((b2 ty))
  (forall ((u (set c)) (v uni) (r uni))
  (and
  (=> (mem (set1 (tuple2 c1 b2)) r (relation b2 c1 (t2tb132 u) v))
  (forall ((x c) (y uni))
  (=> (mem (tuple2 c1 b2) (Tuple2 c1 b2 (t2tb135 x) y) r)
  (and (mem7 x u) (mem b2 y v)))))
  (=>
  (forall ((x c) (y uni))
  (=> (sort b2 y)
  (=> (mem (tuple2 c1 b2) (Tuple2 c1 b2 (t2tb135 x) y) r)
  (and (mem7 x u) (mem b2 y v))))) (mem (set1 (tuple2 c1 b2)) r
  (relation b2 c1 (t2tb132 u) v)))))))

(declare-fun t2tb5418 ((set (set (tuple21 (set (tuple21 a b))
  (tuple21 (tuple21 a c) (tuple21 b d)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a b)) (tuple21 (tuple21 a c)
  (tuple21 b d))))))) (sort
  (set1
  (set1
  (tuple2 (set1 (tuple2 a1 b1)) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))))
  (t2tb5418 x))))

(declare-fun tb2t5418 (uni) (set (set (tuple21 (set (tuple21 a b))
  (tuple21 (tuple21 a c) (tuple21 b d))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a b)) (tuple21 (tuple21 a c)
  (tuple21 b d)))))))
  (! (= (tb2t5418 (t2tb5418 i)) i) :pattern ((t2tb5418 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (set1
     (tuple2 (set1 (tuple2 a1 b1)) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))))
     j) (= (t2tb5418 (tb2t5418 j)) j)) :pattern ((t2tb5418 (tb2t5418 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a b)))) (v (set (tuple21 (tuple21 a c)
  (tuple21 b d)))) (r (set (tuple21 (set (tuple21 a b)) (tuple21 (tuple21 a
  c) (tuple21 b d))))))
  (= (mem
  (set1
  (tuple2 (set1 (tuple2 a1 b1)) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))))
  (t2tb5325 r)
  (relation (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (set1 (tuple2 a1 b1))
  (t2tb10 u) (t2tb686 v)))
  (forall ((x (set (tuple21 a b))) (y (tuple21 (tuple21 a c) (tuple21 b d))))
  (=> (mem
  (tuple2 (set1 (tuple2 a1 b1)) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
  (Tuple2 (set1 (tuple2 a1 b1)) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))
  (t2tb11 x) (t2tb691 y)) (t2tb5325 r)) (and (mem4 x u) (mem24 y v)))))))

(declare-fun t2tb5419 ((set (set (tuple21 (set (tuple21 a b)) (tuple21 b
  d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a b)) (tuple21 b d)))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 b1 d1)))) (t2tb5419 x))))

(declare-fun tb2t5419 (uni) (set (set (tuple21 (set (tuple21 a b)) (tuple21 b
  d)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a b)) (tuple21 b d))))))
  (! (= (tb2t5419 (t2tb5419 i)) i) :pattern ((t2tb5419 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 b1 d1)))) j)
     (= (t2tb5419 (tb2t5419 j)) j)) :pattern ((t2tb5419 (tb2t5419 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a b)))) (v (set (tuple21 b d)))
  (r (set (tuple21 (set (tuple21 a b)) (tuple21 b d)))))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 b1 d1))) (t2tb5327 r)
  (relation (tuple2 b1 d1) (set1 (tuple2 a1 b1)) (t2tb10 u) (t2tb687 v)))
  (forall ((x (set (tuple21 a b))) (y (tuple21 b d)))
  (=> (mem (tuple2 (set1 (tuple2 a1 b1)) (tuple2 b1 d1))
  (Tuple2 (set1 (tuple2 a1 b1)) (tuple2 b1 d1) (t2tb11 x) (t2tb692 y))
  (t2tb5327 r)) (and (mem4 x u) (mem23 y v)))))))

(declare-fun t2tb5420 ((set (set (tuple21 (set (tuple21 a b)) (set (tuple21 c
  d)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a b)) (set (tuple21 c d)))))))
  (sort (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 c1 d1)))))
  (t2tb5420 x))))

(declare-fun tb2t5420 (uni) (set (set (tuple21 (set (tuple21 a b))
  (set (tuple21 c d))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a b)) (set (tuple21 c d)))))))
  (! (= (tb2t5420 (t2tb5420 i)) i) :pattern ((t2tb5420 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 c1 d1))))) j)
     (= (t2tb5420 (tb2t5420 j)) j)) :pattern ((t2tb5420 (tb2t5420 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a b)))) (v (set (set (tuple21 c d))))
  (r (set (tuple21 (set (tuple21 a b)) (set (tuple21 c d))))))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 c1 d1))))
  (t2tb5329 r)
  (relation (set1 (tuple2 c1 d1)) (set1 (tuple2 a1 b1)) (t2tb10 u)
  (t2tb688 v)))
  (forall ((x (set (tuple21 a b))) (y (set (tuple21 c d))))
  (=> (mem (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 c1 d1)))
  (Tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 c1 d1)) (t2tb11 x) (t2tb689 y))
  (t2tb5329 r)) (and (mem4 x u) (mem22 y v)))))))

(declare-fun t2tb5421 ((set (set (tuple21 (set (tuple21 a b)) (tuple21 c
  d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a b)) (tuple21 c d)))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 c1 d1)))) (t2tb5421 x))))

(declare-fun tb2t5421 (uni) (set (set (tuple21 (set (tuple21 a b)) (tuple21 c
  d)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a b)) (tuple21 c d))))))
  (! (= (tb2t5421 (t2tb5421 i)) i) :pattern ((t2tb5421 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 c1 d1)))) j)
     (= (t2tb5421 (tb2t5421 j)) j)) :pattern ((t2tb5421 (tb2t5421 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a b)))) (v (set (tuple21 c d)))
  (r (set (tuple21 (set (tuple21 a b)) (tuple21 c d)))))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 c1 d1))) (t2tb5331 r)
  (relation (tuple2 c1 d1) (set1 (tuple2 a1 b1)) (t2tb10 u) (t2tb689 v)))
  (forall ((x (set (tuple21 a b))) (y (tuple21 c d)))
  (=> (mem (tuple2 (set1 (tuple2 a1 b1)) (tuple2 c1 d1))
  (Tuple2 (set1 (tuple2 a1 b1)) (tuple2 c1 d1) (t2tb11 x) (t2tb693 y))
  (t2tb5331 r)) (and (mem4 x u) (mem21 y v)))))))

(declare-fun t2tb5422 ((set (set (tuple21 (set (tuple21 a b)) d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a b)) d))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) d1))) (t2tb5422 x))))

(declare-fun tb2t5422 (uni) (set (set (tuple21 (set (tuple21 a b)) d))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a b)) d)))))
  (! (= (tb2t5422 (t2tb5422 i)) i) :pattern ((t2tb5422 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) d1))) j)
     (= (t2tb5422 (tb2t5422 j)) j)) :pattern ((t2tb5422 (tb2t5422 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a b)))) (v (set d))
  (r (set (tuple21 (set (tuple21 a b)) d))))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 b1)) d1)) (t2tb5333 r)
  (relation d1 (set1 (tuple2 a1 b1)) (t2tb10 u) (t2tb690 v)))
  (forall ((x (set (tuple21 a b))) (y d))
  (=> (mem (tuple2 (set1 (tuple2 a1 b1)) d1)
  (Tuple2 (set1 (tuple2 a1 b1)) d1 (t2tb11 x) (t2tb694 y)) (t2tb5333 r))
  (and (mem4 x u) (mem20 y v)))))))

(declare-fun t2tb311 ((set (set (tuple21 (set (tuple21 a b)) (tuple21 a
  c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a b)) (tuple21 a c)))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 c1)))) (t2tb311 x))))

(declare-fun tb2t311 (uni) (set (set (tuple21 (set (tuple21 a b)) (tuple21 a
  c)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a b)) (tuple21 a c))))))
  (! (= (tb2t311 (t2tb311 i)) i) :pattern ((t2tb311 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 c1)))) j)
     (= (t2tb311 (tb2t311 j)) j)) :pattern ((t2tb311 (tb2t311 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a b)))) (v (set (tuple21 a c)))
  (r (set (tuple21 (set (tuple21 a b)) (tuple21 a c)))))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 c1))) (t2tb229 r)
  (relation (tuple2 a1 c1) (set1 (tuple2 a1 b1)) (t2tb10 u) (t2tb129 v)))
  (forall ((x (set (tuple21 a b))) (y (tuple21 a c)))
  (=> (mem (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 c1))
  (Tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 c1) (t2tb11 x) (t2tb133 y))
  (t2tb229 r)) (and (mem4 x u) (mem10 y v)))))))

(declare-fun t2tb314 ((set (set (tuple21 (set (tuple21 a b)) c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a b)) c))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) c1))) (t2tb314 x))))

(declare-fun tb2t314 (uni) (set (set (tuple21 (set (tuple21 a b)) c))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a b)) c)))))
  (! (= (tb2t314 (t2tb314 i)) i) :pattern ((t2tb314 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) c1))) j)
     (= (t2tb314 (tb2t314 j)) j)) :pattern ((t2tb314 (tb2t314 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a b)))) (v (set c))
  (r (set (tuple21 (set (tuple21 a b)) c))))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 b1)) c1)) (t2tb234 r)
  (relation c1 (set1 (tuple2 a1 b1)) (t2tb10 u) (t2tb132 v)))
  (forall ((x (set (tuple21 a b))) (y c))
  (=> (mem (tuple2 (set1 (tuple2 a1 b1)) c1)
  (Tuple2 (set1 (tuple2 a1 b1)) c1 (t2tb11 x) (t2tb135 y)) (t2tb234 r))
  (and (mem4 x u) (mem7 y v)))))))

(declare-fun t2tb45 ((set (set (tuple21 (set (tuple21 a b)) (set (tuple21 a
  b)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a b)) (set (tuple21 a b)))))))
  (sort (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1)))))
  (t2tb45 x))))

(declare-fun tb2t45 (uni) (set (set (tuple21 (set (tuple21 a b))
  (set (tuple21 a b))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a b)) (set (tuple21 a b)))))))
  (! (= (tb2t45 (t2tb45 i)) i) :pattern ((t2tb45 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1))))) j)
     (= (t2tb45 (tb2t45 j)) j)) :pattern ((t2tb45 (tb2t45 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a b)))) (v (set (set (tuple21 a b))))
  (r (set (tuple21 (set (tuple21 a b)) (set (tuple21 a b))))))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1))))
  (t2tb15 r)
  (relation (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1)) (t2tb10 u)
  (t2tb10 v)))
  (forall ((x (set (tuple21 a b))) (y (set (tuple21 a b))))
  (=> (mem (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1)))
  (Tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1)) (t2tb11 x) (t2tb11 y))
  (t2tb15 r)) (and (mem4 x u) (mem4 y v)))))))

(declare-fun t2tb46 ((set (set (tuple21 (set (tuple21 a b)) (tuple21 a
  b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a b)) (tuple21 a b)))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 b1)))) (t2tb46 x))))

(declare-fun tb2t46 (uni) (set (set (tuple21 (set (tuple21 a b)) (tuple21 a
  b)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a b)) (tuple21 a b))))))
  (! (= (tb2t46 (t2tb46 i)) i) :pattern ((t2tb46 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 b1)))) j)
     (= (t2tb46 (tb2t46 j)) j)) :pattern ((t2tb46 (tb2t46 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a b)))) (v (set (tuple21 a b)))
  (r (set (tuple21 (set (tuple21 a b)) (tuple21 a b)))))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 b1))) (t2tb17 r)
  (relation (tuple2 a1 b1) (set1 (tuple2 a1 b1)) (t2tb10 u) (t2tb11 v)))
  (forall ((x (set (tuple21 a b))) (y (tuple21 a b)))
  (=> (mem (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 b1))
  (Tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 b1) (t2tb11 x) (t2tb13 y))
  (t2tb17 r)) (and (mem4 x u) (mem3 y v)))))))

(declare-fun t2tb47 ((set (set (tuple21 (set (tuple21 a b)) b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a b)) b))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) b1))) (t2tb47 x))))

(declare-fun tb2t47 (uni) (set (set (tuple21 (set (tuple21 a b)) b))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a b)) b)))))
  (! (= (tb2t47 (t2tb47 i)) i) :pattern ((t2tb47 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) b1))) j)
     (= (t2tb47 (tb2t47 j)) j)) :pattern ((t2tb47 (tb2t47 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a b)))) (v (set b))
  (r (set (tuple21 (set (tuple21 a b)) b))))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 b1)) b1)) (t2tb19 r)
  (relation b1 (set1 (tuple2 a1 b1)) (t2tb10 u) (t2tb12 v)))
  (forall ((x (set (tuple21 a b))) (y b))
  (=> (mem (tuple2 (set1 (tuple2 a1 b1)) b1)
  (Tuple2 (set1 (tuple2 a1 b1)) b1 (t2tb11 x) (t2tb14 y)) (t2tb19 r))
  (and (mem4 x u) (mem2 y v)))))))

(declare-fun t2tb48 ((set (set (tuple21 (set (tuple21 a b)) a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a b)) a))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) a1))) (t2tb48 x))))

(declare-fun tb2t48 (uni) (set (set (tuple21 (set (tuple21 a b)) a))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a b)) a)))))
  (! (= (tb2t48 (t2tb48 i)) i) :pattern ((t2tb48 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) a1))) j)
     (= (t2tb48 (tb2t48 j)) j)) :pattern ((t2tb48 (tb2t48 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a b)))) (v (set a))
  (r (set (tuple21 (set (tuple21 a b)) a))))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 b1)) a1)) (t2tb22 r)
  (relation a1 (set1 (tuple2 a1 b1)) (t2tb10 u) (t2tb1 v)))
  (forall ((x (set (tuple21 a b))) (y a))
  (=> (mem (tuple2 (set1 (tuple2 a1 b1)) a1)
  (Tuple2 (set1 (tuple2 a1 b1)) a1 (t2tb11 x) (t2tb2 y)) (t2tb22 r))
  (and (mem4 x u) (mem1 y v)))))))

;; mem_relation
  (assert
  (forall ((b2 ty))
  (forall ((u (set (set (tuple21 a b)))) (v uni) (r uni))
  (and
  (=> (mem (set1 (tuple2 (set1 (tuple2 a1 b1)) b2)) r
  (relation b2 (set1 (tuple2 a1 b1)) (t2tb10 u) v))
  (forall ((x (set (tuple21 a b))) (y uni))
  (=> (mem (tuple2 (set1 (tuple2 a1 b1)) b2)
  (Tuple2 (set1 (tuple2 a1 b1)) b2 (t2tb11 x) y) r)
  (and (mem4 x u) (mem b2 y v)))))
  (=>
  (forall ((x (set (tuple21 a b))) (y uni))
  (=> (sort b2 y)
  (=> (mem (tuple2 (set1 (tuple2 a1 b1)) b2)
  (Tuple2 (set1 (tuple2 a1 b1)) b2 (t2tb11 x) y) r)
  (and (mem4 x u) (mem b2 y v))))) (mem
  (set1 (tuple2 (set1 (tuple2 a1 b1)) b2)) r
  (relation b2 (set1 (tuple2 a1 b1)) (t2tb10 u) v)))))))

(declare-fun t2tb5423 ((set (set (tuple21 (tuple21 a b) (tuple21 (tuple21 a
  c) (tuple21 b d)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a b) (tuple21 (tuple21 a c)
  (tuple21 b d))))))) (sort
  (set1
  (set1 (tuple2 (tuple2 a1 b1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))))
  (t2tb5423 x))))

(declare-fun tb2t5423 (uni) (set (set (tuple21 (tuple21 a b)
  (tuple21 (tuple21 a c) (tuple21 b d))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a b) (tuple21 (tuple21 a c)
  (tuple21 b d)))))))
  (! (= (tb2t5423 (t2tb5423 i)) i) :pattern ((t2tb5423 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (set1 (tuple2 (tuple2 a1 b1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))))
     j) (= (t2tb5423 (tb2t5423 j)) j)) :pattern ((t2tb5423 (tb2t5423 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a b))) (v (set (tuple21 (tuple21 a c) (tuple21 b
  d)))) (r (set (tuple21 (tuple21 a b) (tuple21 (tuple21 a c) (tuple21 b
  d))))))
  (= (mem
  (set1 (tuple2 (tuple2 a1 b1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))))
  (t2tb5335 r)
  (relation (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 a1 b1) (t2tb11 u)
  (t2tb686 v)))
  (forall ((x (tuple21 a b)) (y (tuple21 (tuple21 a c) (tuple21 b d))))
  (=> (mem (tuple2 (tuple2 a1 b1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
  (Tuple2 (tuple2 a1 b1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb13 x)
  (t2tb691 y)) (t2tb5335 r)) (and (mem3 x u) (mem24 y v)))))))

(declare-fun t2tb5424 ((set (set (tuple21 (tuple21 a b) (tuple21 b
  d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a b) (tuple21 b d)))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 b1) (tuple2 b1 d1)))) (t2tb5424 x))))

(declare-fun tb2t5424 (uni) (set (set (tuple21 (tuple21 a b) (tuple21 b
  d)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a b) (tuple21 b d))))))
  (! (= (tb2t5424 (t2tb5424 i)) i) :pattern ((t2tb5424 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 b1) (tuple2 b1 d1)))) j)
     (= (t2tb5424 (tb2t5424 j)) j)) :pattern ((t2tb5424 (tb2t5424 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a b))) (v (set (tuple21 b d)))
  (r (set (tuple21 (tuple21 a b) (tuple21 b d)))))
  (= (mem (set1 (tuple2 (tuple2 a1 b1) (tuple2 b1 d1))) (t2tb5338 r)
  (relation (tuple2 b1 d1) (tuple2 a1 b1) (t2tb11 u) (t2tb687 v)))
  (forall ((x (tuple21 a b)) (y (tuple21 b d)))
  (=> (mem (tuple2 (tuple2 a1 b1) (tuple2 b1 d1))
  (Tuple2 (tuple2 a1 b1) (tuple2 b1 d1) (t2tb13 x) (t2tb692 y)) (t2tb5338 r))
  (and (mem3 x u) (mem23 y v)))))))

(declare-fun t2tb5425 ((set (set (tuple21 (tuple21 a b) (set (tuple21 c
  d)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a b) (set (tuple21 c d))))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 b1) (set1 (tuple2 c1 d1))))) (t2tb5425 x))))

(declare-fun tb2t5425 (uni) (set (set (tuple21 (tuple21 a b) (set (tuple21 c
  d))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a b) (set (tuple21 c d)))))))
  (! (= (tb2t5425 (t2tb5425 i)) i) :pattern ((t2tb5425 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 b1) (set1 (tuple2 c1 d1))))) j)
     (= (t2tb5425 (tb2t5425 j)) j)) :pattern ((t2tb5425 (tb2t5425 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a b))) (v (set (set (tuple21 c d))))
  (r (set (tuple21 (tuple21 a b) (set (tuple21 c d))))))
  (= (mem (set1 (tuple2 (tuple2 a1 b1) (set1 (tuple2 c1 d1)))) (t2tb5339 r)
  (relation (set1 (tuple2 c1 d1)) (tuple2 a1 b1) (t2tb11 u) (t2tb688 v)))
  (forall ((x (tuple21 a b)) (y (set (tuple21 c d))))
  (=> (mem (tuple2 (tuple2 a1 b1) (set1 (tuple2 c1 d1)))
  (Tuple2 (tuple2 a1 b1) (set1 (tuple2 c1 d1)) (t2tb13 x) (t2tb689 y))
  (t2tb5339 r)) (and (mem3 x u) (mem22 y v)))))))

(declare-fun t2tb5426 ((set (set (tuple21 (tuple21 a b) (tuple21 c
  d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a b) (tuple21 c d)))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)))) (t2tb5426 x))))

(declare-fun tb2t5426 (uni) (set (set (tuple21 (tuple21 a b) (tuple21 c
  d)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a b) (tuple21 c d))))))
  (! (= (tb2t5426 (t2tb5426 i)) i) :pattern ((t2tb5426 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)))) j)
     (= (t2tb5426 (tb2t5426 j)) j)) :pattern ((t2tb5426 (tb2t5426 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a b))) (v (set (tuple21 c d)))
  (r (set (tuple21 (tuple21 a b) (tuple21 c d)))))
  (= (mem (set1 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1))) (t2tb879 r)
  (relation (tuple2 c1 d1) (tuple2 a1 b1) (t2tb11 u) (t2tb689 v)))
  (forall ((x (tuple21 a b)) (y (tuple21 c d)))
  (=> (mem (tuple2 (tuple2 a1 b1) (tuple2 c1 d1))
  (Tuple2 (tuple2 a1 b1) (tuple2 c1 d1) (t2tb13 x) (t2tb693 y)) (t2tb879 r))
  (and (mem3 x u) (mem21 y v)))))))

(declare-fun t2tb5427 ((set (set (tuple21 (tuple21 a b) d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a b) d))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 b1) d1))) (t2tb5427 x))))

(declare-fun tb2t5427 (uni) (set (set (tuple21 (tuple21 a b) d))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a b) d)))))
  (! (= (tb2t5427 (t2tb5427 i)) i) :pattern ((t2tb5427 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 b1) d1))) j)
     (= (t2tb5427 (tb2t5427 j)) j)) :pattern ((t2tb5427 (tb2t5427 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a b))) (v (set d)) (r (set (tuple21 (tuple21 a b)
  d))))
  (= (mem (set1 (tuple2 (tuple2 a1 b1) d1)) (t2tb5341 r)
  (relation d1 (tuple2 a1 b1) (t2tb11 u) (t2tb690 v)))
  (forall ((x (tuple21 a b)) (y d))
  (=> (mem (tuple2 (tuple2 a1 b1) d1)
  (Tuple2 (tuple2 a1 b1) d1 (t2tb13 x) (t2tb694 y)) (t2tb5341 r))
  (and (mem3 x u) (mem20 y v)))))))

(declare-fun t2tb316 ((set (set (tuple21 (tuple21 a b) (tuple21 a c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a b) (tuple21 a c)))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)))) (t2tb316 x))))

(declare-fun tb2t316 (uni) (set (set (tuple21 (tuple21 a b) (tuple21 a c)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a b) (tuple21 a c))))))
  (! (= (tb2t316 (t2tb316 i)) i) :pattern ((t2tb316 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)))) j)
     (= (t2tb316 (tb2t316 j)) j)) :pattern ((t2tb316 (tb2t316 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a b))) (v (set (tuple21 a c)))
  (r (set (tuple21 (tuple21 a b) (tuple21 a c)))))
  (= (mem (set1 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1))) (t2tb238 r)
  (relation (tuple2 a1 c1) (tuple2 a1 b1) (t2tb11 u) (t2tb129 v)))
  (forall ((x (tuple21 a b)) (y (tuple21 a c)))
  (=> (mem (tuple2 (tuple2 a1 b1) (tuple2 a1 c1))
  (Tuple2 (tuple2 a1 b1) (tuple2 a1 c1) (t2tb13 x) (t2tb133 y)) (t2tb238 r))
  (and (mem3 x u) (mem10 y v)))))))

(declare-fun t2tb319 ((set (set (tuple21 (tuple21 a b) c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a b) c))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 b1) c1))) (t2tb319 x))))

(declare-fun tb2t319 (uni) (set (set (tuple21 (tuple21 a b) c))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a b) c)))))
  (! (= (tb2t319 (t2tb319 i)) i) :pattern ((t2tb319 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 b1) c1))) j)
     (= (t2tb319 (tb2t319 j)) j)) :pattern ((t2tb319 (tb2t319 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a b))) (v (set c)) (r (set (tuple21 (tuple21 a b)
  c))))
  (= (mem (set1 (tuple2 (tuple2 a1 b1) c1)) (t2tb245 r)
  (relation c1 (tuple2 a1 b1) (t2tb11 u) (t2tb132 v)))
  (forall ((x (tuple21 a b)) (y c))
  (=> (mem (tuple2 (tuple2 a1 b1) c1)
  (Tuple2 (tuple2 a1 b1) c1 (t2tb13 x) (t2tb135 y)) (t2tb245 r))
  (and (mem3 x u) (mem7 y v)))))))

(declare-fun t2tb49 ((set (set (tuple21 (tuple21 a b) (set (tuple21 a
  b)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a b) (set (tuple21 a b))))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 b1))))) (t2tb49 x))))

(declare-fun tb2t49 (uni) (set (set (tuple21 (tuple21 a b) (set (tuple21 a
  b))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a b) (set (tuple21 a b)))))))
  (! (= (tb2t49 (t2tb49 i)) i) :pattern ((t2tb49 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 b1))))) j)
     (= (t2tb49 (tb2t49 j)) j)) :pattern ((t2tb49 (tb2t49 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a b))) (v (set (set (tuple21 a b))))
  (r (set (tuple21 (tuple21 a b) (set (tuple21 a b))))))
  (= (mem (set1 (tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 b1)))) (t2tb23 r)
  (relation (set1 (tuple2 a1 b1)) (tuple2 a1 b1) (t2tb11 u) (t2tb10 v)))
  (forall ((x (tuple21 a b)) (y (set (tuple21 a b))))
  (=> (mem (tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 b1)))
  (Tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 b1)) (t2tb13 x) (t2tb11 y))
  (t2tb23 r)) (and (mem3 x u) (mem4 y v)))))))

(declare-fun t2tb50 ((set (set (tuple21 (tuple21 a b) (tuple21 a b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a b) (tuple21 a b)))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 b1) (tuple2 a1 b1)))) (t2tb50 x))))

(declare-fun tb2t50 (uni) (set (set (tuple21 (tuple21 a b) (tuple21 a b)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a b) (tuple21 a b))))))
  (! (= (tb2t50 (t2tb50 i)) i) :pattern ((t2tb50 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 b1) (tuple2 a1 b1)))) j)
     (= (t2tb50 (tb2t50 j)) j)) :pattern ((t2tb50 (tb2t50 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a b))) (v (set (tuple21 a b)))
  (r (set (tuple21 (tuple21 a b) (tuple21 a b)))))
  (= (mem (set1 (tuple2 (tuple2 a1 b1) (tuple2 a1 b1))) (t2tb25 r)
  (relation (tuple2 a1 b1) (tuple2 a1 b1) (t2tb11 u) (t2tb11 v)))
  (forall ((x (tuple21 a b)) (y (tuple21 a b)))
  (=> (mem (tuple2 (tuple2 a1 b1) (tuple2 a1 b1))
  (Tuple2 (tuple2 a1 b1) (tuple2 a1 b1) (t2tb13 x) (t2tb13 y)) (t2tb25 r))
  (and (mem3 x u) (mem3 y v)))))))

(declare-fun t2tb51 ((set (set (tuple21 (tuple21 a b) b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a b) b))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 b1) b1))) (t2tb51 x))))

(declare-fun tb2t51 (uni) (set (set (tuple21 (tuple21 a b) b))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a b) b)))))
  (! (= (tb2t51 (t2tb51 i)) i) :pattern ((t2tb51 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 b1) b1))) j)
     (= (t2tb51 (tb2t51 j)) j)) :pattern ((t2tb51 (tb2t51 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a b))) (v (set b)) (r (set (tuple21 (tuple21 a b)
  b))))
  (= (mem (set1 (tuple2 (tuple2 a1 b1) b1)) (t2tb27 r)
  (relation b1 (tuple2 a1 b1) (t2tb11 u) (t2tb12 v)))
  (forall ((x (tuple21 a b)) (y b))
  (=> (mem (tuple2 (tuple2 a1 b1) b1)
  (Tuple2 (tuple2 a1 b1) b1 (t2tb13 x) (t2tb14 y)) (t2tb27 r))
  (and (mem3 x u) (mem2 y v)))))))

(declare-fun t2tb52 ((set (set (tuple21 (tuple21 a b) a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a b) a))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 b1) a1))) (t2tb52 x))))

(declare-fun tb2t52 (uni) (set (set (tuple21 (tuple21 a b) a))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a b) a)))))
  (! (= (tb2t52 (t2tb52 i)) i) :pattern ((t2tb52 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 b1) a1))) j)
     (= (t2tb52 (tb2t52 j)) j)) :pattern ((t2tb52 (tb2t52 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a b))) (v (set a)) (r (set (tuple21 (tuple21 a b)
  a))))
  (= (mem (set1 (tuple2 (tuple2 a1 b1) a1)) (t2tb29 r)
  (relation a1 (tuple2 a1 b1) (t2tb11 u) (t2tb1 v)))
  (forall ((x (tuple21 a b)) (y a))
  (=> (mem (tuple2 (tuple2 a1 b1) a1)
  (Tuple2 (tuple2 a1 b1) a1 (t2tb13 x) (t2tb2 y)) (t2tb29 r))
  (and (mem3 x u) (mem1 y v)))))))

;; mem_relation
  (assert
  (forall ((b2 ty))
  (forall ((u (set (tuple21 a b))) (v uni) (r uni))
  (and
  (=> (mem (set1 (tuple2 (tuple2 a1 b1) b2)) r
  (relation b2 (tuple2 a1 b1) (t2tb11 u) v))
  (forall ((x (tuple21 a b)) (y uni))
  (=> (mem (tuple2 (tuple2 a1 b1) b2) (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) y)
  r) (and (mem3 x u) (mem b2 y v)))))
  (=>
  (forall ((x (tuple21 a b)) (y uni))
  (=> (sort b2 y)
  (=> (mem (tuple2 (tuple2 a1 b1) b2) (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) y)
  r) (and (mem3 x u) (mem b2 y v))))) (mem (set1 (tuple2 (tuple2 a1 b1) b2))
  r (relation b2 (tuple2 a1 b1) (t2tb11 u) v)))))))

(declare-fun t2tb5428 ((set (set (tuple21 b (tuple21 (tuple21 a c) (tuple21 b
  d)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 b (tuple21 (tuple21 a c) (tuple21 b d)))))))
  (sort (set1 (set1 (tuple2 b1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))))
  (t2tb5428 x))))

(declare-fun tb2t5428 (uni) (set (set (tuple21 b (tuple21 (tuple21 a c)
  (tuple21 b d))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 b (tuple21 (tuple21 a c) (tuple21 b d)))))))
  (! (= (tb2t5428 (t2tb5428 i)) i) :pattern ((t2tb5428 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 b1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))))) j)
     (= (t2tb5428 (tb2t5428 j)) j)) :pattern ((t2tb5428 (tb2t5428 j))) )))

;; mem_relation
  (assert
  (forall ((u (set b)) (v (set (tuple21 (tuple21 a c) (tuple21 b d))))
  (r (set (tuple21 b (tuple21 (tuple21 a c) (tuple21 b d))))))
  (= (mem (set1 (tuple2 b1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))))
  (t2tb5343 r)
  (relation (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) b1 (t2tb12 u) (t2tb686 v)))
  (forall ((x b) (y (tuple21 (tuple21 a c) (tuple21 b d))))
  (=> (mem (tuple2 b1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
  (Tuple2 b1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb14 x) (t2tb691 y))
  (t2tb5343 r)) (and (mem2 x u) (mem24 y v)))))))

(declare-fun t2tb5429 ((set (set (tuple21 b (tuple21 b d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 b (tuple21 b d)))))) (sort
  (set1 (set1 (tuple2 b1 (tuple2 b1 d1)))) (t2tb5429 x))))

(declare-fun tb2t5429 (uni) (set (set (tuple21 b (tuple21 b d)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 b (tuple21 b d))))))
  (! (= (tb2t5429 (t2tb5429 i)) i) :pattern ((t2tb5429 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 b1 (tuple2 b1 d1)))) j)
     (= (t2tb5429 (tb2t5429 j)) j)) :pattern ((t2tb5429 (tb2t5429 j))) )))

;; mem_relation
  (assert
  (forall ((u (set b)) (v (set (tuple21 b d))) (r (set (tuple21 b (tuple21 b
  d)))))
  (= (mem (set1 (tuple2 b1 (tuple2 b1 d1))) (t2tb5345 r)
  (relation (tuple2 b1 d1) b1 (t2tb12 u) (t2tb687 v)))
  (forall ((x b) (y (tuple21 b d)))
  (=> (mem (tuple2 b1 (tuple2 b1 d1))
  (Tuple2 b1 (tuple2 b1 d1) (t2tb14 x) (t2tb692 y)) (t2tb5345 r))
  (and (mem2 x u) (mem23 y v)))))))

(declare-fun t2tb5430 ((set (set (tuple21 b (set (tuple21 c d)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 b (set (tuple21 c d))))))) (sort
  (set1 (set1 (tuple2 b1 (set1 (tuple2 c1 d1))))) (t2tb5430 x))))

(declare-fun tb2t5430 (uni) (set (set (tuple21 b (set (tuple21 c d))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 b (set (tuple21 c d)))))))
  (! (= (tb2t5430 (t2tb5430 i)) i) :pattern ((t2tb5430 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 b1 (set1 (tuple2 c1 d1))))) j)
     (= (t2tb5430 (tb2t5430 j)) j)) :pattern ((t2tb5430 (tb2t5430 j))) )))

;; mem_relation
  (assert
  (forall ((u (set b)) (v (set (set (tuple21 c d)))) (r (set (tuple21 b
  (set (tuple21 c d))))))
  (= (mem (set1 (tuple2 b1 (set1 (tuple2 c1 d1)))) (t2tb5347 r)
  (relation (set1 (tuple2 c1 d1)) b1 (t2tb12 u) (t2tb688 v)))
  (forall ((x b) (y (set (tuple21 c d))))
  (=> (mem (tuple2 b1 (set1 (tuple2 c1 d1)))
  (Tuple2 b1 (set1 (tuple2 c1 d1)) (t2tb14 x) (t2tb689 y)) (t2tb5347 r))
  (and (mem2 x u) (mem22 y v)))))))

(declare-fun t2tb5431 ((set (set (tuple21 b (tuple21 c d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 b (tuple21 c d)))))) (sort
  (set1 (set1 (tuple2 b1 (tuple2 c1 d1)))) (t2tb5431 x))))

(declare-fun tb2t5431 (uni) (set (set (tuple21 b (tuple21 c d)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 b (tuple21 c d))))))
  (! (= (tb2t5431 (t2tb5431 i)) i) :pattern ((t2tb5431 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 b1 (tuple2 c1 d1)))) j)
     (= (t2tb5431 (tb2t5431 j)) j)) :pattern ((t2tb5431 (tb2t5431 j))) )))

;; mem_relation
  (assert
  (forall ((u (set b)) (v (set (tuple21 c d))) (r (set (tuple21 b (tuple21 c
  d)))))
  (= (mem (set1 (tuple2 b1 (tuple2 c1 d1))) (t2tb891 r)
  (relation (tuple2 c1 d1) b1 (t2tb12 u) (t2tb689 v)))
  (forall ((x b) (y (tuple21 c d)))
  (=> (mem (tuple2 b1 (tuple2 c1 d1))
  (Tuple2 b1 (tuple2 c1 d1) (t2tb14 x) (t2tb693 y)) (t2tb891 r))
  (and (mem2 x u) (mem21 y v)))))))

;; mem_relation
  (assert
  (forall ((u (set b)) (v (set d)) (r (set (tuple21 b d))))
  (= (mem (set1 (tuple2 b1 d1)) (t2tb687 r)
  (relation d1 b1 (t2tb12 u) (t2tb690 v)))
  (forall ((x b) (y d))
  (=> (mem23 (tb2t692 (Tuple2 b1 d1 (t2tb14 x) (t2tb694 y))) r)
  (and (mem2 x u) (mem20 y v)))))))

(declare-fun t2tb321 ((set (set (tuple21 b (tuple21 a c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 b (tuple21 a c)))))) (sort
  (set1 (set1 (tuple2 b1 (tuple2 a1 c1)))) (t2tb321 x))))

(declare-fun tb2t321 (uni) (set (set (tuple21 b (tuple21 a c)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 b (tuple21 a c))))))
  (! (= (tb2t321 (t2tb321 i)) i) :pattern ((t2tb321 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 b1 (tuple2 a1 c1)))) j)
     (= (t2tb321 (tb2t321 j)) j)) :pattern ((t2tb321 (tb2t321 j))) )))

;; mem_relation
  (assert
  (forall ((u (set b)) (v (set (tuple21 a c))) (r (set (tuple21 b (tuple21 a
  c)))))
  (= (mem (set1 (tuple2 b1 (tuple2 a1 c1))) (t2tb248 r)
  (relation (tuple2 a1 c1) b1 (t2tb12 u) (t2tb129 v)))
  (forall ((x b) (y (tuple21 a c)))
  (=> (mem (tuple2 b1 (tuple2 a1 c1))
  (Tuple2 b1 (tuple2 a1 c1) (t2tb14 x) (t2tb133 y)) (t2tb248 r))
  (and (mem2 x u) (mem10 y v)))))))

(declare-fun t2tb130 ((set (set (tuple21 b c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 b c))))) (sort (set1 (set1 (tuple2 b1 c1)))
  (t2tb130 x))))

(declare-fun tb2t130 (uni) (set (set (tuple21 b c))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 b c)))))
  (! (= (tb2t130 (t2tb130 i)) i) :pattern ((t2tb130 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 b1 c1))) j) (= (t2tb130 (tb2t130 j)) j)) :pattern (
  (t2tb130 (tb2t130 j))) )))

;; mem_relation
  (assert
  (forall ((u (set b)) (v (set c)) (r (set (tuple21 b c))))
  (= (mem (set1 (tuple2 b1 c1)) (t2tb131 r)
  (relation c1 b1 (t2tb12 u) (t2tb132 v)))
  (forall ((x b) (y c))
  (=> (mem (tuple2 b1 c1) (Tuple2 b1 c1 (t2tb14 x) (t2tb135 y)) (t2tb131 r))
  (and (mem2 x u) (mem7 y v)))))))

(declare-fun t2tb53 ((set (set (tuple21 b (set (tuple21 a b)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 b (set (tuple21 a b))))))) (sort
  (set1 (set1 (tuple2 b1 (set1 (tuple2 a1 b1))))) (t2tb53 x))))

(declare-fun tb2t53 (uni) (set (set (tuple21 b (set (tuple21 a b))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 b (set (tuple21 a b)))))))
  (! (= (tb2t53 (t2tb53 i)) i) :pattern ((t2tb53 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 b1 (set1 (tuple2 a1 b1))))) j)
     (= (t2tb53 (tb2t53 j)) j)) :pattern ((t2tb53 (tb2t53 j))) )))

;; mem_relation
  (assert
  (forall ((u (set b)) (v (set (set (tuple21 a b)))) (r (set (tuple21 b
  (set (tuple21 a b))))))
  (= (mem (set1 (tuple2 b1 (set1 (tuple2 a1 b1)))) (t2tb31 r)
  (relation (set1 (tuple2 a1 b1)) b1 (t2tb12 u) (t2tb10 v)))
  (forall ((x b) (y (set (tuple21 a b))))
  (=> (mem (tuple2 b1 (set1 (tuple2 a1 b1)))
  (Tuple2 b1 (set1 (tuple2 a1 b1)) (t2tb14 x) (t2tb11 y)) (t2tb31 r))
  (and (mem2 x u) (mem4 y v)))))))

(declare-fun t2tb54 ((set (set (tuple21 b (tuple21 a b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 b (tuple21 a b)))))) (sort
  (set1 (set1 (tuple2 b1 (tuple2 a1 b1)))) (t2tb54 x))))

(declare-fun tb2t54 (uni) (set (set (tuple21 b (tuple21 a b)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 b (tuple21 a b))))))
  (! (= (tb2t54 (t2tb54 i)) i) :pattern ((t2tb54 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 b1 (tuple2 a1 b1)))) j)
     (= (t2tb54 (tb2t54 j)) j)) :pattern ((t2tb54 (tb2t54 j))) )))

;; mem_relation
  (assert
  (forall ((u (set b)) (v (set (tuple21 a b))) (r (set (tuple21 b (tuple21 a
  b)))))
  (= (mem (set1 (tuple2 b1 (tuple2 a1 b1))) (t2tb34 r)
  (relation (tuple2 a1 b1) b1 (t2tb12 u) (t2tb11 v)))
  (forall ((x b) (y (tuple21 a b)))
  (=> (mem (tuple2 b1 (tuple2 a1 b1))
  (Tuple2 b1 (tuple2 a1 b1) (t2tb14 x) (t2tb13 y)) (t2tb34 r))
  (and (mem2 x u) (mem3 y v)))))))

(declare-fun t2tb55 ((set (set (tuple21 b b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 b b))))) (sort (set1 (set1 (tuple2 b1 b1)))
  (t2tb55 x))))

(declare-fun tb2t55 (uni) (set (set (tuple21 b b))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 b b)))))
  (! (= (tb2t55 (t2tb55 i)) i) :pattern ((t2tb55 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 b1 b1))) j) (= (t2tb55 (tb2t55 j)) j)) :pattern (
  (t2tb55 (tb2t55 j))) )))

;; mem_relation
  (assert
  (forall ((u (set b)) (v (set b)) (r (set (tuple21 b b))))
  (= (mem (set1 (tuple2 b1 b1)) (t2tb35 r)
  (relation b1 b1 (t2tb12 u) (t2tb12 v)))
  (forall ((x b) (y b))
  (=> (mem (tuple2 b1 b1) (Tuple2 b1 b1 (t2tb14 x) (t2tb14 y)) (t2tb35 r))
  (and (mem2 x u) (mem2 y v)))))))

(declare-fun t2tb56 ((set (set (tuple21 b a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 b a))))) (sort (set1 (set1 (tuple2 b1 a1)))
  (t2tb56 x))))

(declare-fun tb2t56 (uni) (set (set (tuple21 b a))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 b a)))))
  (! (= (tb2t56 (t2tb56 i)) i) :pattern ((t2tb56 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 b1 a1))) j) (= (t2tb56 (tb2t56 j)) j)) :pattern (
  (t2tb56 (tb2t56 j))) )))

;; mem_relation
  (assert
  (forall ((u (set b)) (v (set a)) (r (set (tuple21 b a))))
  (= (mem (set1 (tuple2 b1 a1)) (t2tb37 r)
  (relation a1 b1 (t2tb12 u) (t2tb1 v)))
  (forall ((x b) (y a))
  (=> (mem (tuple2 b1 a1) (Tuple2 b1 a1 (t2tb14 x) (t2tb2 y)) (t2tb37 r))
  (and (mem2 x u) (mem1 y v)))))))

;; mem_relation
  (assert
  (forall ((b2 ty))
  (forall ((u (set b)) (v uni) (r uni))
  (and
  (=> (mem (set1 (tuple2 b1 b2)) r (relation b2 b1 (t2tb12 u) v))
  (forall ((x b) (y uni))
  (=> (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) y) r)
  (and (mem2 x u) (mem b2 y v)))))
  (=>
  (forall ((x b) (y uni))
  (=> (sort b2 y)
  (=> (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) y) r)
  (and (mem2 x u) (mem b2 y v))))) (mem (set1 (tuple2 b1 b2)) r
  (relation b2 b1 (t2tb12 u) v)))))))

(declare-fun t2tb5432 ((set (set (tuple21 a (tuple21 (tuple21 a c) (tuple21 b
  d)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 a (tuple21 (tuple21 a c) (tuple21 b d)))))))
  (sort (set1 (set1 (tuple2 a1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))))
  (t2tb5432 x))))

(declare-fun tb2t5432 (uni) (set (set (tuple21 a (tuple21 (tuple21 a c)
  (tuple21 b d))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 a (tuple21 (tuple21 a c) (tuple21 b d)))))))
  (! (= (tb2t5432 (t2tb5432 i)) i) :pattern ((t2tb5432 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 a1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))))) j)
     (= (t2tb5432 (tb2t5432 j)) j)) :pattern ((t2tb5432 (tb2t5432 j))) )))

;; mem_relation
  (assert
  (forall ((u (set a)) (v (set (tuple21 (tuple21 a c) (tuple21 b d))))
  (r (set (tuple21 a (tuple21 (tuple21 a c) (tuple21 b d))))))
  (= (mem (set1 (tuple2 a1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))))
  (t2tb5349 r)
  (relation (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) a1 (t2tb1 u) (t2tb686 v)))
  (forall ((x a) (y (tuple21 (tuple21 a c) (tuple21 b d))))
  (=> (mem (tuple2 a1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
  (Tuple2 a1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb2 x) (t2tb691 y))
  (t2tb5349 r)) (and (mem1 x u) (mem24 y v)))))))

(declare-fun t2tb5433 ((set (set (tuple21 a (tuple21 b d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 a (tuple21 b d)))))) (sort
  (set1 (set1 (tuple2 a1 (tuple2 b1 d1)))) (t2tb5433 x))))

(declare-fun tb2t5433 (uni) (set (set (tuple21 a (tuple21 b d)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 a (tuple21 b d))))))
  (! (= (tb2t5433 (t2tb5433 i)) i) :pattern ((t2tb5433 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 a1 (tuple2 b1 d1)))) j)
     (= (t2tb5433 (tb2t5433 j)) j)) :pattern ((t2tb5433 (tb2t5433 j))) )))

;; mem_relation
  (assert
  (forall ((u (set a)) (v (set (tuple21 b d))) (r (set (tuple21 a (tuple21 b
  d)))))
  (= (mem (set1 (tuple2 a1 (tuple2 b1 d1))) (t2tb5351 r)
  (relation (tuple2 b1 d1) a1 (t2tb1 u) (t2tb687 v)))
  (forall ((x a) (y (tuple21 b d)))
  (=> (mem (tuple2 a1 (tuple2 b1 d1))
  (Tuple2 a1 (tuple2 b1 d1) (t2tb2 x) (t2tb692 y)) (t2tb5351 r))
  (and (mem1 x u) (mem23 y v)))))))

(declare-fun t2tb5434 ((set (set (tuple21 a (set (tuple21 c d)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 a (set (tuple21 c d))))))) (sort
  (set1 (set1 (tuple2 a1 (set1 (tuple2 c1 d1))))) (t2tb5434 x))))

(declare-fun tb2t5434 (uni) (set (set (tuple21 a (set (tuple21 c d))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 a (set (tuple21 c d)))))))
  (! (= (tb2t5434 (t2tb5434 i)) i) :pattern ((t2tb5434 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 a1 (set1 (tuple2 c1 d1))))) j)
     (= (t2tb5434 (tb2t5434 j)) j)) :pattern ((t2tb5434 (tb2t5434 j))) )))

;; mem_relation
  (assert
  (forall ((u (set a)) (v (set (set (tuple21 c d)))) (r (set (tuple21 a
  (set (tuple21 c d))))))
  (= (mem (set1 (tuple2 a1 (set1 (tuple2 c1 d1)))) (t2tb5354 r)
  (relation (set1 (tuple2 c1 d1)) a1 (t2tb1 u) (t2tb688 v)))
  (forall ((x a) (y (set (tuple21 c d))))
  (=> (mem (tuple2 a1 (set1 (tuple2 c1 d1)))
  (Tuple2 a1 (set1 (tuple2 c1 d1)) (t2tb2 x) (t2tb689 y)) (t2tb5354 r))
  (and (mem1 x u) (mem22 y v)))))))

(declare-fun t2tb5435 ((set (set (tuple21 a (tuple21 c d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 a (tuple21 c d)))))) (sort
  (set1 (set1 (tuple2 a1 (tuple2 c1 d1)))) (t2tb5435 x))))

(declare-fun tb2t5435 (uni) (set (set (tuple21 a (tuple21 c d)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 a (tuple21 c d))))))
  (! (= (tb2t5435 (t2tb5435 i)) i) :pattern ((t2tb5435 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 a1 (tuple2 c1 d1)))) j)
     (= (t2tb5435 (tb2t5435 j)) j)) :pattern ((t2tb5435 (tb2t5435 j))) )))

;; mem_relation
  (assert
  (forall ((u (set a)) (v (set (tuple21 c d))) (r (set (tuple21 a (tuple21 c
  d)))))
  (= (mem (set1 (tuple2 a1 (tuple2 c1 d1))) (t2tb901 r)
  (relation (tuple2 c1 d1) a1 (t2tb1 u) (t2tb689 v)))
  (forall ((x a) (y (tuple21 c d)))
  (=> (mem (tuple2 a1 (tuple2 c1 d1))
  (Tuple2 a1 (tuple2 c1 d1) (t2tb2 x) (t2tb693 y)) (t2tb901 r))
  (and (mem1 x u) (mem21 y v)))))))

(declare-fun t2tb5436 ((set (set (tuple21 a d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 a d))))) (sort (set1 (set1 (tuple2 a1 d1)))
  (t2tb5436 x))))

(declare-fun tb2t5436 (uni) (set (set (tuple21 a d))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 a d)))))
  (! (= (tb2t5436 (t2tb5436 i)) i) :pattern ((t2tb5436 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 a1 d1))) j) (= (t2tb5436 (tb2t5436 j)) j)) :pattern (
  (t2tb5436 (tb2t5436 j))) )))

;; mem_relation
  (assert
  (forall ((u (set a)) (v (set d)) (r (set (tuple21 a d))))
  (= (mem (set1 (tuple2 a1 d1)) (t2tb903 r)
  (relation d1 a1 (t2tb1 u) (t2tb690 v)))
  (forall ((x a) (y d))
  (=> (mem (tuple2 a1 d1) (Tuple2 a1 d1 (t2tb2 x) (t2tb694 y)) (t2tb903 r))
  (and (mem1 x u) (mem20 y v)))))))

(declare-fun t2tb325 ((set (set (tuple21 a (tuple21 a c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 a (tuple21 a c)))))) (sort
  (set1 (set1 (tuple2 a1 (tuple2 a1 c1)))) (t2tb325 x))))

(declare-fun tb2t325 (uni) (set (set (tuple21 a (tuple21 a c)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 a (tuple21 a c))))))
  (! (= (tb2t325 (t2tb325 i)) i) :pattern ((t2tb325 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 a1 (tuple2 a1 c1)))) j)
     (= (t2tb325 (tb2t325 j)) j)) :pattern ((t2tb325 (tb2t325 j))) )))

;; mem_relation
  (assert
  (forall ((u (set a)) (v (set (tuple21 a c))) (r (set (tuple21 a (tuple21 a
  c)))))
  (= (mem (set1 (tuple2 a1 (tuple2 a1 c1))) (t2tb256 r)
  (relation (tuple2 a1 c1) a1 (t2tb1 u) (t2tb129 v)))
  (forall ((x a) (y (tuple21 a c)))
  (=> (mem (tuple2 a1 (tuple2 a1 c1))
  (Tuple2 a1 (tuple2 a1 c1) (t2tb2 x) (t2tb133 y)) (t2tb256 r))
  (and (mem1 x u) (mem10 y v)))))))

;; mem_relation
  (assert
  (forall ((u (set a)) (v (set c)) (r (set (tuple21 a c))))
  (= (mem (set1 (tuple2 a1 c1)) (t2tb129 r)
  (relation c1 a1 (t2tb1 u) (t2tb132 v)))
  (forall ((x a) (y c))
  (=> (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y))) r)
  (and (mem1 x u) (mem7 y v)))))))

(declare-fun t2tb57 ((set (set (tuple21 a (set (tuple21 a b)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 a (set (tuple21 a b))))))) (sort
  (set1 (set1 (tuple2 a1 (set1 (tuple2 a1 b1))))) (t2tb57 x))))

(declare-fun tb2t57 (uni) (set (set (tuple21 a (set (tuple21 a b))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 a (set (tuple21 a b)))))))
  (! (= (tb2t57 (t2tb57 i)) i) :pattern ((t2tb57 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 a1 (set1 (tuple2 a1 b1))))) j)
     (= (t2tb57 (tb2t57 j)) j)) :pattern ((t2tb57 (tb2t57 j))) )))

;; mem_relation
  (assert
  (forall ((u (set a)) (v (set (set (tuple21 a b)))) (r (set (tuple21 a
  (set (tuple21 a b))))))
  (= (mem (set1 (tuple2 a1 (set1 (tuple2 a1 b1)))) (t2tb39 r)
  (relation (set1 (tuple2 a1 b1)) a1 (t2tb1 u) (t2tb10 v)))
  (forall ((x a) (y (set (tuple21 a b))))
  (=> (mem (tuple2 a1 (set1 (tuple2 a1 b1)))
  (Tuple2 a1 (set1 (tuple2 a1 b1)) (t2tb2 x) (t2tb11 y)) (t2tb39 r))
  (and (mem1 x u) (mem4 y v)))))))

(declare-fun t2tb58 ((set (set (tuple21 a (tuple21 a b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 a (tuple21 a b)))))) (sort
  (set1 (set1 (tuple2 a1 (tuple2 a1 b1)))) (t2tb58 x))))

(declare-fun tb2t58 (uni) (set (set (tuple21 a (tuple21 a b)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 a (tuple21 a b))))))
  (! (= (tb2t58 (t2tb58 i)) i) :pattern ((t2tb58 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 a1 (tuple2 a1 b1)))) j)
     (= (t2tb58 (tb2t58 j)) j)) :pattern ((t2tb58 (tb2t58 j))) )))

;; mem_relation
  (assert
  (forall ((u (set a)) (v (set (tuple21 a b))) (r (set (tuple21 a (tuple21 a
  b)))))
  (= (mem (set1 (tuple2 a1 (tuple2 a1 b1))) (t2tb41 r)
  (relation (tuple2 a1 b1) a1 (t2tb1 u) (t2tb11 v)))
  (forall ((x a) (y (tuple21 a b)))
  (=> (mem (tuple2 a1 (tuple2 a1 b1))
  (Tuple2 a1 (tuple2 a1 b1) (t2tb2 x) (t2tb13 y)) (t2tb41 r))
  (and (mem1 x u) (mem3 y v)))))))

;; mem_relation
  (assert
  (forall ((u (set a)) (v (set b)) (r (set (tuple21 a b))))
  (= (mem4 r (relation1 u v))
  (forall ((x a) (y b))
  (=> (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y))) r)
  (and (mem1 x u) (mem2 y v)))))))

(declare-fun t2tb3 ((set (set (tuple21 a a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 a a))))) (sort (set1 (set1 (tuple2 a1 a1)))
  (t2tb3 x))))

(declare-fun tb2t3 (uni) (set (set (tuple21 a a))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 a a)))))
  (! (= (tb2t3 (t2tb3 i)) i) :pattern ((t2tb3 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 a1 a1))) j) (= (t2tb3 (tb2t3 j)) j)) :pattern (
  (t2tb3 (tb2t3 j))) )))

;; mem_relation
  (assert
  (forall ((u (set a)) (v (set a)) (r (set (tuple21 a a))))
  (= (mem (set1 (tuple2 a1 a1)) (t2tb4 r)
  (relation a1 a1 (t2tb1 u) (t2tb1 v)))
  (forall ((x a) (y a))
  (=> (mem (tuple2 a1 a1) (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y)) (t2tb4 r))
  (and (mem1 x u) (mem1 y v)))))))

;; mem_relation
  (assert
  (forall ((b2 ty))
  (forall ((u (set a)) (v uni) (r uni))
  (and
  (=> (mem (set1 (tuple2 a1 b2)) r (relation b2 a1 (t2tb1 u) v))
  (forall ((x a) (y uni))
  (=> (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) y) r)
  (and (mem1 x u) (mem b2 y v)))))
  (=>
  (forall ((x a) (y uni))
  (=> (sort b2 y)
  (=> (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) y) r)
  (and (mem1 x u) (mem b2 y v))))) (mem (set1 (tuple2 a1 b2)) r
  (relation b2 a1 (t2tb1 u) v)))))))

;; mem_relation
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((u uni) (v uni) (r uni))
  (and
  (=> (mem (set1 (tuple2 a2 b2)) r (relation b2 a2 u v))
  (forall ((x uni) (y uni))
  (=> (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) r)
  (and (mem a2 x u) (mem b2 y v)))))
  (=>
  (forall ((x uni) (y uni))
  (=> (sort a2 x)
  (=> (sort b2 y)
  (=> (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) r)
  (and (mem a2 x u) (mem b2 y v)))))) (mem (set1 (tuple2 a2 b2)) r
  (relation b2 a2 u v)))))))

(declare-fun inverse (ty ty uni) uni)

;; inverse_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni)) (sort (set1 (tuple2 b2 a2)) (inverse b2 a2 x)))))

;; mem_inverse
  (assert
  (forall ((p (set (tuple21 (tuple21 b d) (tuple21 a c)))) (x (tuple21 a c))
  (y (tuple21 b d)))
  (= (mem24
  (tb2t691 (Tuple2 (tuple2 a1 c1) (tuple2 b1 d1) (t2tb133 x) (t2tb692 y)))
  (tb2t686 (inverse (tuple2 a1 c1) (tuple2 b1 d1) (t2tb755 p)))) (mem
  (tuple2 (tuple2 b1 d1) (tuple2 a1 c1))
  (Tuple2 (tuple2 b1 d1) (tuple2 a1 c1) (t2tb692 y) (t2tb133 x))
  (t2tb755 p)))))

;; mem_inverse
  (assert
  (forall ((p (set (tuple21 d c))) (x c) (y d))
  (= (mem21 (tb2t693 (Tuple2 c1 d1 (t2tb135 x) (t2tb694 y)))
  (tb2t689 (inverse c1 d1 (t2tb829 p)))) (mem (tuple2 d1 c1)
  (Tuple2 d1 c1 (t2tb694 y) (t2tb135 x)) (t2tb829 p)))))

;; mem_inverse
  (assert
  (forall ((p (set (tuple21 d b))) (x b) (y d))
  (= (mem23 (tb2t692 (Tuple2 b1 d1 (t2tb14 x) (t2tb694 y)))
  (tb2t687 (inverse b1 d1 (t2tb5305 p)))) (mem (tuple2 d1 b1)
  (Tuple2 d1 b1 (t2tb694 y) (t2tb14 x)) (t2tb5305 p)))))

;; mem_inverse
  (assert
  (forall ((p (set (tuple21 (tuple21 a c) (tuple21 b d)))) (x (tuple21 b d))
  (y (tuple21 a c)))
  (= (mem (tuple2 (tuple2 b1 d1) (tuple2 a1 c1))
  (Tuple2 (tuple2 b1 d1) (tuple2 a1 c1) (t2tb692 x) (t2tb133 y))
  (inverse (tuple2 b1 d1) (tuple2 a1 c1) (t2tb686 p))) (mem24
  (tb2t691 (Tuple2 (tuple2 a1 c1) (tuple2 b1 d1) (t2tb133 y) (t2tb692 x)))
  p))))

;; mem_inverse
  (assert
  (forall ((p (set (tuple21 c d))) (x d) (y c))
  (= (mem (tuple2 d1 c1) (Tuple2 d1 c1 (t2tb694 x) (t2tb135 y))
  (inverse d1 c1 (t2tb689 p))) (mem21
  (tb2t693 (Tuple2 c1 d1 (t2tb135 y) (t2tb694 x))) p))))

;; mem_inverse
  (assert
  (forall ((p (set (tuple21 c a))) (x a) (y c))
  (= (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y)))
  (tb2t129 (inverse a1 c1 (t2tb224 p)))) (mem (tuple2 c1 a1)
  (Tuple2 c1 a1 (t2tb135 y) (t2tb2 x)) (t2tb224 p)))))

;; mem_inverse
  (assert
  (forall ((p (set (tuple21 b d))) (x d) (y b))
  (= (mem (tuple2 d1 b1) (Tuple2 d1 b1 (t2tb694 x) (t2tb14 y))
  (inverse d1 b1 (t2tb687 p))) (mem23
  (tb2t692 (Tuple2 b1 d1 (t2tb14 y) (t2tb694 x))) p))))

;; mem_inverse
  (assert
  (forall ((p (set (tuple21 b a))) (x a) (y b))
  (= (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y)))
  (tb2t11 (inverse a1 b1 (t2tb37 p)))) (mem (tuple2 b1 a1)
  (Tuple2 b1 a1 (t2tb14 y) (t2tb2 x)) (t2tb37 p)))))

;; mem_inverse
  (assert
  (forall ((p (set (tuple21 a c))) (x c) (y a))
  (= (mem (tuple2 c1 a1) (Tuple2 c1 a1 (t2tb135 x) (t2tb2 y))
  (inverse c1 a1 (t2tb129 p))) (mem10
  (tb2t133 (Tuple2 a1 c1 (t2tb2 y) (t2tb135 x))) p))))

;; mem_inverse
  (assert
  (forall ((p (set (tuple21 a b))) (x b) (y a))
  (= (mem (tuple2 b1 a1) (Tuple2 b1 a1 (t2tb14 x) (t2tb2 y))
  (inverse b1 a1 (t2tb11 p))) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 y) (t2tb14 x))) p))))

;; mem_inverse
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((p uni) (x uni) (y uni))
  (= (mem (tuple2 b2 a2) (Tuple2 b2 a2 x y) (inverse b2 a2 p)) (mem
  (tuple2 a2 b2) (Tuple2 a2 b2 y x) p)))))

(declare-fun dom (ty ty uni) uni)

;; dom_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni)) (sort (set1 a2) (dom b2 a2 x)))))

;; mem_dom
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (x (tuple21 (tuple21 a c) (tuple21 b d))))
  (and
  (=> (mem24 x (tb2t686 (dom b2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) p)))
  (exists ((b3 uni))
  (and (sort b2 b3) (mem (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) b2)
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) b2 (t2tb691 x) b3) p))))
  (=>
  (exists ((b3 uni)) (mem (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) b2)
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) b2 (t2tb691 x) b3) p))
  (mem24 x (tb2t686 (dom b2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) p))))))))

;; mem_dom
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (x (tuple21 b d)))
  (and
  (=> (mem23 x (tb2t687 (dom b2 (tuple2 b1 d1) p)))
  (exists ((b3 uni))
  (and (sort b2 b3) (mem (tuple2 (tuple2 b1 d1) b2)
  (Tuple2 (tuple2 b1 d1) b2 (t2tb692 x) b3) p))))
  (=>
  (exists ((b3 uni)) (mem (tuple2 (tuple2 b1 d1) b2)
  (Tuple2 (tuple2 b1 d1) b2 (t2tb692 x) b3) p)) (mem23 x
  (tb2t687 (dom b2 (tuple2 b1 d1) p))))))))

;; mem_dom
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (x (set (tuple21 c d))))
  (and
  (=> (mem22 x (tb2t688 (dom b2 (set1 (tuple2 c1 d1)) p)))
  (exists ((b3 uni))
  (and (sort b2 b3) (mem (tuple2 (set1 (tuple2 c1 d1)) b2)
  (Tuple2 (set1 (tuple2 c1 d1)) b2 (t2tb689 x) b3) p))))
  (=>
  (exists ((b3 uni)) (mem (tuple2 (set1 (tuple2 c1 d1)) b2)
  (Tuple2 (set1 (tuple2 c1 d1)) b2 (t2tb689 x) b3) p)) (mem22 x
  (tb2t688 (dom b2 (set1 (tuple2 c1 d1)) p))))))))

;; mem_dom
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (x (tuple21 c d)))
  (and
  (=> (mem21 x (tb2t689 (dom b2 (tuple2 c1 d1) p)))
  (exists ((b3 uni))
  (and (sort b2 b3) (mem (tuple2 (tuple2 c1 d1) b2)
  (Tuple2 (tuple2 c1 d1) b2 (t2tb693 x) b3) p))))
  (=>
  (exists ((b3 uni)) (mem (tuple2 (tuple2 c1 d1) b2)
  (Tuple2 (tuple2 c1 d1) b2 (t2tb693 x) b3) p)) (mem21 x
  (tb2t689 (dom b2 (tuple2 c1 d1) p))))))))

;; mem_dom
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (x d))
  (and
  (=> (mem20 x (tb2t690 (dom b2 d1 p)))
  (exists ((b3 uni))
  (and (sort b2 b3) (mem (tuple2 d1 b2) (Tuple2 d1 b2 (t2tb694 x) b3) p))))
  (=>
  (exists ((b3 uni)) (mem (tuple2 d1 b2) (Tuple2 d1 b2 (t2tb694 x) b3) p))
  (mem20 x (tb2t690 (dom b2 d1 p))))))))

;; mem_dom
  (assert
  (forall ((p (set (tuple21 (tuple21 a c) (tuple21 b d)))) (x (tuple21 a c)))
  (= (mem10 x (tb2t129 (dom (tuple2 b1 d1) (tuple2 a1 c1) (t2tb686 p))))
  (exists ((b2 (tuple21 b d))) (mem24
  (tb2t691 (Tuple2 (tuple2 a1 c1) (tuple2 b1 d1) (t2tb133 x) (t2tb692 b2)))
  p)))))

;; mem_dom
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (x (tuple21 a c)))
  (and
  (=> (mem10 x (tb2t129 (dom b2 (tuple2 a1 c1) p)))
  (exists ((b3 uni))
  (and (sort b2 b3) (mem (tuple2 (tuple2 a1 c1) b2)
  (Tuple2 (tuple2 a1 c1) b2 (t2tb133 x) b3) p))))
  (=>
  (exists ((b3 uni)) (mem (tuple2 (tuple2 a1 c1) b2)
  (Tuple2 (tuple2 a1 c1) b2 (t2tb133 x) b3) p)) (mem10 x
  (tb2t129 (dom b2 (tuple2 a1 c1) p))))))))

;; mem_dom
  (assert
  (forall ((p (set (tuple21 c d))) (x c))
  (= (mem7 x (tb2t132 (dom d1 c1 (t2tb689 p))))
  (exists ((b2 d)) (mem21 (tb2t693 (Tuple2 c1 d1 (t2tb135 x) (t2tb694 b2)))
  p)))))

;; mem_dom
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (x c))
  (and
  (=> (mem7 x (tb2t132 (dom b2 c1 p)))
  (exists ((b3 uni))
  (and (sort b2 b3) (mem (tuple2 c1 b2) (Tuple2 c1 b2 (t2tb135 x) b3) p))))
  (=>
  (exists ((b3 uni)) (mem (tuple2 c1 b2) (Tuple2 c1 b2 (t2tb135 x) b3) p))
  (mem7 x (tb2t132 (dom b2 c1 p))))))))

;; mem_dom
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (x (set (tuple21 a b))))
  (and
  (=> (mem4 x (tb2t10 (dom b2 (set1 (tuple2 a1 b1)) p)))
  (exists ((b3 uni))
  (and (sort b2 b3) (mem (tuple2 (set1 (tuple2 a1 b1)) b2)
  (Tuple2 (set1 (tuple2 a1 b1)) b2 (t2tb11 x) b3) p))))
  (=>
  (exists ((b3 uni)) (mem (tuple2 (set1 (tuple2 a1 b1)) b2)
  (Tuple2 (set1 (tuple2 a1 b1)) b2 (t2tb11 x) b3) p)) (mem4 x
  (tb2t10 (dom b2 (set1 (tuple2 a1 b1)) p))))))))

;; mem_dom
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (x (tuple21 a b)))
  (and
  (=> (mem3 x (tb2t11 (dom b2 (tuple2 a1 b1) p)))
  (exists ((b3 uni))
  (and (sort b2 b3) (mem (tuple2 (tuple2 a1 b1) b2)
  (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) b3) p))))
  (=>
  (exists ((b3 uni)) (mem (tuple2 (tuple2 a1 b1) b2)
  (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) b3) p)) (mem3 x
  (tb2t11 (dom b2 (tuple2 a1 b1) p))))))))

;; mem_dom
  (assert
  (forall ((p (set (tuple21 b d))) (x b))
  (= (mem2 x (tb2t12 (dom d1 b1 (t2tb687 p))))
  (exists ((b2 d)) (mem23 (tb2t692 (Tuple2 b1 d1 (t2tb14 x) (t2tb694 b2)))
  p)))))

;; mem_dom
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (x b))
  (and
  (=> (mem2 x (tb2t12 (dom b2 b1 p)))
  (exists ((b3 uni))
  (and (sort b2 b3) (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) b3) p))))
  (=> (exists ((b3 uni)) (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) b3) p))
  (mem2 x (tb2t12 (dom b2 b1 p))))))))

;; mem_dom
  (assert
  (forall ((p (set (tuple21 a c))) (x a))
  (= (mem1 x (tb2t1 (dom c1 a1 (t2tb129 p))))
  (exists ((b2 c)) (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 b2))) p)))))

;; mem_dom
  (assert
  (forall ((p (set (tuple21 a b))) (x a))
  (= (mem1 x (tb2t1 (dom b1 a1 (t2tb11 p))))
  (exists ((b2 b)) (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 b2))) p)))))

;; mem_dom
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (x a))
  (and
  (=> (mem1 x (tb2t1 (dom b2 a1 p)))
  (exists ((b3 uni))
  (and (sort b2 b3) (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) b3) p))))
  (=> (exists ((b3 uni)) (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) b3) p))
  (mem1 x (tb2t1 (dom b2 a1 p))))))))

;; mem_dom
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((p uni) (x uni))
  (and
  (=> (mem a2 x (dom b2 a2 p))
  (exists ((b3 uni))
  (and (sort b2 b3) (mem (tuple2 a2 b2) (Tuple2 a2 b2 x b3) p))))
  (=> (exists ((b3 uni)) (mem (tuple2 a2 b2) (Tuple2 a2 b2 x b3) p)) (mem a2
  x (dom b2 a2 p)))))))

(declare-fun ran (ty ty uni) uni)

;; ran_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni)) (sort (set1 b2) (ran b2 a2 x)))))

;; mem_ran
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (x (tuple21 (tuple21 a c) (tuple21 b d))))
  (and
  (=> (mem24 x (tb2t686 (ran (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) a2 p)))
  (exists ((a3 uni))
  (and (sort a2 a3) (mem (tuple2 a2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
  (Tuple2 a2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) a3 (t2tb691 x)) p))))
  (=>
  (exists ((a3 uni)) (mem (tuple2 a2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
  (Tuple2 a2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) a3 (t2tb691 x)) p))
  (mem24 x (tb2t686 (ran (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) a2 p))))))))

;; mem_ran
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (x (tuple21 b d)))
  (and
  (=> (mem23 x (tb2t687 (ran (tuple2 b1 d1) a2 p)))
  (exists ((a3 uni))
  (and (sort a2 a3) (mem (tuple2 a2 (tuple2 b1 d1))
  (Tuple2 a2 (tuple2 b1 d1) a3 (t2tb692 x)) p))))
  (=>
  (exists ((a3 uni)) (mem (tuple2 a2 (tuple2 b1 d1))
  (Tuple2 a2 (tuple2 b1 d1) a3 (t2tb692 x)) p)) (mem23 x
  (tb2t687 (ran (tuple2 b1 d1) a2 p))))))))

;; mem_ran
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (x (set (tuple21 c d))))
  (and
  (=> (mem22 x (tb2t688 (ran (set1 (tuple2 c1 d1)) a2 p)))
  (exists ((a3 uni))
  (and (sort a2 a3) (mem (tuple2 a2 (set1 (tuple2 c1 d1)))
  (Tuple2 a2 (set1 (tuple2 c1 d1)) a3 (t2tb689 x)) p))))
  (=>
  (exists ((a3 uni)) (mem (tuple2 a2 (set1 (tuple2 c1 d1)))
  (Tuple2 a2 (set1 (tuple2 c1 d1)) a3 (t2tb689 x)) p)) (mem22 x
  (tb2t688 (ran (set1 (tuple2 c1 d1)) a2 p))))))))

;; mem_ran
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (x (tuple21 c d)))
  (and
  (=> (mem21 x (tb2t689 (ran (tuple2 c1 d1) a2 p)))
  (exists ((a3 uni))
  (and (sort a2 a3) (mem (tuple2 a2 (tuple2 c1 d1))
  (Tuple2 a2 (tuple2 c1 d1) a3 (t2tb693 x)) p))))
  (=>
  (exists ((a3 uni)) (mem (tuple2 a2 (tuple2 c1 d1))
  (Tuple2 a2 (tuple2 c1 d1) a3 (t2tb693 x)) p)) (mem21 x
  (tb2t689 (ran (tuple2 c1 d1) a2 p))))))))

;; mem_ran
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (x d))
  (and
  (=> (mem20 x (tb2t690 (ran d1 a2 p)))
  (exists ((a3 uni))
  (and (sort a2 a3) (mem (tuple2 a2 d1) (Tuple2 a2 d1 a3 (t2tb694 x)) p))))
  (=>
  (exists ((a3 uni)) (mem (tuple2 a2 d1) (Tuple2 a2 d1 a3 (t2tb694 x)) p))
  (mem20 x (tb2t690 (ran d1 a2 p))))))))

;; mem_ran
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (x (tuple21 a c)))
  (and
  (=> (mem10 x (tb2t129 (ran (tuple2 a1 c1) a2 p)))
  (exists ((a3 uni))
  (and (sort a2 a3) (mem (tuple2 a2 (tuple2 a1 c1))
  (Tuple2 a2 (tuple2 a1 c1) a3 (t2tb133 x)) p))))
  (=>
  (exists ((a3 uni)) (mem (tuple2 a2 (tuple2 a1 c1))
  (Tuple2 a2 (tuple2 a1 c1) a3 (t2tb133 x)) p)) (mem10 x
  (tb2t129 (ran (tuple2 a1 c1) a2 p))))))))

;; mem_ran
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (x c))
  (and
  (=> (mem7 x (tb2t132 (ran c1 a2 p)))
  (exists ((a3 uni))
  (and (sort a2 a3) (mem (tuple2 a2 c1) (Tuple2 a2 c1 a3 (t2tb135 x)) p))))
  (=>
  (exists ((a3 uni)) (mem (tuple2 a2 c1) (Tuple2 a2 c1 a3 (t2tb135 x)) p))
  (mem7 x (tb2t132 (ran c1 a2 p))))))))

;; mem_ran
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (x (set (tuple21 a b))))
  (and
  (=> (mem4 x (tb2t10 (ran (set1 (tuple2 a1 b1)) a2 p)))
  (exists ((a3 uni))
  (and (sort a2 a3) (mem (tuple2 a2 (set1 (tuple2 a1 b1)))
  (Tuple2 a2 (set1 (tuple2 a1 b1)) a3 (t2tb11 x)) p))))
  (=>
  (exists ((a3 uni)) (mem (tuple2 a2 (set1 (tuple2 a1 b1)))
  (Tuple2 a2 (set1 (tuple2 a1 b1)) a3 (t2tb11 x)) p)) (mem4 x
  (tb2t10 (ran (set1 (tuple2 a1 b1)) a2 p))))))))

;; mem_ran
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (x (tuple21 a b)))
  (and
  (=> (mem3 x (tb2t11 (ran (tuple2 a1 b1) a2 p)))
  (exists ((a3 uni))
  (and (sort a2 a3) (mem (tuple2 a2 (tuple2 a1 b1))
  (Tuple2 a2 (tuple2 a1 b1) a3 (t2tb13 x)) p))))
  (=>
  (exists ((a3 uni)) (mem (tuple2 a2 (tuple2 a1 b1))
  (Tuple2 a2 (tuple2 a1 b1) a3 (t2tb13 x)) p)) (mem3 x
  (tb2t11 (ran (tuple2 a1 b1) a2 p))))))))

;; mem_ran
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (x b))
  (and
  (=> (mem2 x (tb2t12 (ran b1 a2 p)))
  (exists ((a3 uni))
  (and (sort a2 a3) (mem (tuple2 a2 b1) (Tuple2 a2 b1 a3 (t2tb14 x)) p))))
  (=> (exists ((a3 uni)) (mem (tuple2 a2 b1) (Tuple2 a2 b1 a3 (t2tb14 x)) p))
  (mem2 x (tb2t12 (ran b1 a2 p))))))))

;; mem_ran
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (x a))
  (and
  (=> (mem1 x (tb2t1 (ran a1 a2 p)))
  (exists ((a3 uni))
  (and (sort a2 a3) (mem (tuple2 a2 a1) (Tuple2 a2 a1 a3 (t2tb2 x)) p))))
  (=> (exists ((a3 uni)) (mem (tuple2 a2 a1) (Tuple2 a2 a1 a3 (t2tb2 x)) p))
  (mem1 x (tb2t1 (ran a1 a2 p))))))))

;; mem_ran
  (assert
  (forall ((p (set (tuple21 (tuple21 a c) (tuple21 b d)))) (x (tuple21 b d)))
  (= (mem23 x (tb2t687 (ran (tuple2 b1 d1) (tuple2 a1 c1) (t2tb686 p))))
  (exists ((a2 (tuple21 a c))) (mem24
  (tb2t691 (Tuple2 (tuple2 a1 c1) (tuple2 b1 d1) (t2tb133 a2) (t2tb692 x)))
  p)))))

;; mem_ran
  (assert
  (forall ((p (set (tuple21 c d))) (x d))
  (= (mem20 x (tb2t690 (ran d1 c1 (t2tb689 p))))
  (exists ((a2 c)) (mem21 (tb2t693 (Tuple2 c1 d1 (t2tb135 a2) (t2tb694 x)))
  p)))))

;; mem_ran
  (assert
  (forall ((p (set (tuple21 b d))) (x d))
  (= (mem20 x (tb2t690 (ran d1 b1 (t2tb687 p))))
  (exists ((a2 b)) (mem23 (tb2t692 (Tuple2 b1 d1 (t2tb14 a2) (t2tb694 x)))
  p)))))

;; mem_ran
  (assert
  (forall ((p (set (tuple21 a c))) (x c))
  (= (mem7 x (tb2t132 (ran c1 a1 (t2tb129 p))))
  (exists ((a2 a)) (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 a2) (t2tb135 x))) p)))))

;; mem_ran
  (assert
  (forall ((p (set (tuple21 a b))) (x b))
  (= (mem2 x (tb2t12 (ran b1 a1 (t2tb11 p))))
  (exists ((a2 a)) (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 a2) (t2tb14 x))) p)))))

;; mem_ran
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((p uni) (x uni))
  (and
  (=> (mem b2 x (ran b2 a2 p))
  (exists ((a3 uni))
  (and (sort a2 a3) (mem (tuple2 a2 b2) (Tuple2 a2 b2 a3 x) p))))
  (=> (exists ((a3 uni)) (mem (tuple2 a2 b2) (Tuple2 a2 b2 a3 x) p)) (mem b2
  x (ran b2 a2 p)))))))

(declare-fun semicolon (ty ty ty uni uni) uni)

;; semicolon_sort
  (assert
  (forall ((a2 ty) (b2 ty) (c2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (tuple2 a2 c2))
  (semicolon c2 b2 a2 x x1)))))

;; mem_semicolon
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (q (set (tuple21 (tuple21 a c) (tuple21 b d)))) (x uni)
  (y (tuple21 b d)))
  (= (mem (tuple2 a2 (tuple2 b1 d1)) (Tuple2 a2 (tuple2 b1 d1) x (t2tb692 y))
  (semicolon (tuple2 b1 d1) (tuple2 a1 c1) a2 p (t2tb686 q)))
  (exists ((b2 (tuple21 a c)))
  (and (mem (tuple2 a2 (tuple2 a1 c1))
  (Tuple2 a2 (tuple2 a1 c1) x (t2tb133 b2)) p) (mem24
  (tb2t691 (Tuple2 (tuple2 a1 c1) (tuple2 b1 d1) (t2tb133 b2) (t2tb692 y)))
  q)))))))

;; mem_semicolon
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (q (set (tuple21 c d))) (x uni) (y d))
  (= (mem (tuple2 a2 d1) (Tuple2 a2 d1 x (t2tb694 y))
  (semicolon d1 c1 a2 p (t2tb689 q)))
  (exists ((b2 c))
  (and (mem (tuple2 a2 c1) (Tuple2 a2 c1 x (t2tb135 b2)) p) (mem21
  (tb2t693 (Tuple2 c1 d1 (t2tb135 b2) (t2tb694 y))) q)))))))

;; mem_semicolon
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (q (set (tuple21 b d))) (x uni) (y d))
  (= (mem (tuple2 a2 d1) (Tuple2 a2 d1 x (t2tb694 y))
  (semicolon d1 b1 a2 p (t2tb687 q)))
  (exists ((b2 b))
  (and (mem (tuple2 a2 b1) (Tuple2 a2 b1 x (t2tb14 b2)) p) (mem23
  (tb2t692 (Tuple2 b1 d1 (t2tb14 b2) (t2tb694 y))) q)))))))

;; mem_semicolon
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (q (set (tuple21 a c))) (x uni) (y c))
  (= (mem (tuple2 a2 c1) (Tuple2 a2 c1 x (t2tb135 y))
  (semicolon c1 a1 a2 p (t2tb129 q)))
  (exists ((b2 a))
  (and (mem (tuple2 a2 a1) (Tuple2 a2 a1 x (t2tb2 b2)) p) (mem10
  (tb2t133 (Tuple2 a1 c1 (t2tb2 b2) (t2tb135 y))) q)))))))

;; mem_semicolon
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (q (set (tuple21 a b))) (x uni) (y b))
  (= (mem (tuple2 a2 b1) (Tuple2 a2 b1 x (t2tb14 y))
  (semicolon b1 a1 a2 p (t2tb11 q)))
  (exists ((b2 a))
  (and (mem (tuple2 a2 a1) (Tuple2 a2 a1 x (t2tb2 b2)) p) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 b2) (t2tb14 y))) q)))))))

;; mem_semicolon
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (q uni) (x (tuple21 a c)) (y (tuple21 b d)))
  (and
  (=> (mem24
  (tb2t691 (Tuple2 (tuple2 a1 c1) (tuple2 b1 d1) (t2tb133 x) (t2tb692 y)))
  (tb2t686 (semicolon (tuple2 b1 d1) b2 (tuple2 a1 c1) p q)))
  (exists ((b3 uni))
  (and (sort b2 b3)
  (and (mem (tuple2 (tuple2 a1 c1) b2)
  (Tuple2 (tuple2 a1 c1) b2 (t2tb133 x) b3) p) (mem
  (tuple2 b2 (tuple2 b1 d1)) (Tuple2 b2 (tuple2 b1 d1) b3 (t2tb692 y)) q)))))
  (=>
  (exists ((b3 uni))
  (and (mem (tuple2 (tuple2 a1 c1) b2)
  (Tuple2 (tuple2 a1 c1) b2 (t2tb133 x) b3) p) (mem
  (tuple2 b2 (tuple2 b1 d1)) (Tuple2 b2 (tuple2 b1 d1) b3 (t2tb692 y)) q)))
  (mem24
  (tb2t691 (Tuple2 (tuple2 a1 c1) (tuple2 b1 d1) (t2tb133 x) (t2tb692 y)))
  (tb2t686 (semicolon (tuple2 b1 d1) b2 (tuple2 a1 c1) p q))))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 (tuple21 a c) (tuple21 b d))))
  (q (set (tuple21 (tuple21 b d) (tuple21 b d)))) (x (tuple21 a c))
  (y (tuple21 b d)))
  (= (mem24
  (tb2t691 (Tuple2 (tuple2 a1 c1) (tuple2 b1 d1) (t2tb133 x) (t2tb692 y)))
  (tb2t686
  (semicolon (tuple2 b1 d1) (tuple2 b1 d1) (tuple2 a1 c1) (t2tb686 p)
  (t2tb5227 q))))
  (exists ((b2 (tuple21 b d)))
  (and (mem24
  (tb2t691 (Tuple2 (tuple2 a1 c1) (tuple2 b1 d1) (t2tb133 x) (t2tb692 b2)))
  p) (mem (tuple2 (tuple2 b1 d1) (tuple2 b1 d1))
  (Tuple2 (tuple2 b1 d1) (tuple2 b1 d1) (t2tb692 b2) (t2tb692 y))
  (t2tb5227 q)))))))

;; mem_semicolon
  (assert
  (forall ((c2 ty))
  (forall ((p (set (tuple21 (tuple21 a c) (tuple21 b d)))) (q uni)
  (x (tuple21 a c)) (y uni))
  (= (mem (tuple2 (tuple2 a1 c1) c2) (Tuple2 (tuple2 a1 c1) c2 (t2tb133 x) y)
  (semicolon c2 (tuple2 b1 d1) (tuple2 a1 c1) (t2tb686 p) q))
  (exists ((b2 (tuple21 b d)))
  (and (mem24
  (tb2t691 (Tuple2 (tuple2 a1 c1) (tuple2 b1 d1) (t2tb133 x) (t2tb692 b2)))
  p) (mem (tuple2 (tuple2 b1 d1) c2)
  (Tuple2 (tuple2 b1 d1) c2 (t2tb692 b2) y) q)))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 (tuple21 a c) (tuple21 a c))))
  (q (set (tuple21 (tuple21 a c) (tuple21 b d)))) (x (tuple21 a c))
  (y (tuple21 b d)))
  (= (mem24
  (tb2t691 (Tuple2 (tuple2 a1 c1) (tuple2 b1 d1) (t2tb133 x) (t2tb692 y)))
  (tb2t686
  (semicolon (tuple2 b1 d1) (tuple2 a1 c1) (tuple2 a1 c1) (t2tb157 p)
  (t2tb686 q))))
  (exists ((b2 (tuple21 a c)))
  (and (mem (tuple2 (tuple2 a1 c1) (tuple2 a1 c1))
  (Tuple2 (tuple2 a1 c1) (tuple2 a1 c1) (t2tb133 x) (t2tb133 b2))
  (t2tb157 p)) (mem24
  (tb2t691 (Tuple2 (tuple2 a1 c1) (tuple2 b1 d1) (t2tb133 b2) (t2tb692 y)))
  q))))))

;; mem_semicolon
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (q uni) (x c) (y d))
  (and
  (=> (mem21 (tb2t693 (Tuple2 c1 d1 (t2tb135 x) (t2tb694 y)))
  (tb2t689 (semicolon d1 b2 c1 p q)))
  (exists ((b3 uni))
  (and (sort b2 b3)
  (and (mem (tuple2 c1 b2) (Tuple2 c1 b2 (t2tb135 x) b3) p) (mem
  (tuple2 b2 d1) (Tuple2 b2 d1 b3 (t2tb694 y)) q)))))
  (=>
  (exists ((b3 uni))
  (and (mem (tuple2 c1 b2) (Tuple2 c1 b2 (t2tb135 x) b3) p) (mem
  (tuple2 b2 d1) (Tuple2 b2 d1 b3 (t2tb694 y)) q))) (mem21
  (tb2t693 (Tuple2 c1 d1 (t2tb135 x) (t2tb694 y)))
  (tb2t689 (semicolon d1 b2 c1 p q))))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 c d))) (q (set (tuple21 d d))) (x c) (y d))
  (= (mem21 (tb2t693 (Tuple2 c1 d1 (t2tb135 x) (t2tb694 y)))
  (tb2t689 (semicolon d1 d1 c1 (t2tb689 p) (t2tb5297 q))))
  (exists ((b2 d))
  (and (mem21 (tb2t693 (Tuple2 c1 d1 (t2tb135 x) (t2tb694 b2))) p) (mem
  (tuple2 d1 d1) (Tuple2 d1 d1 (t2tb694 b2) (t2tb694 y)) (t2tb5297 q)))))))

;; mem_semicolon
  (assert
  (forall ((c2 ty))
  (forall ((p (set (tuple21 c d))) (q uni) (x c) (y uni))
  (= (mem (tuple2 c1 c2) (Tuple2 c1 c2 (t2tb135 x) y)
  (semicolon c2 d1 c1 (t2tb689 p) q))
  (exists ((b2 d))
  (and (mem21 (tb2t693 (Tuple2 c1 d1 (t2tb135 x) (t2tb694 b2))) p) (mem
  (tuple2 d1 c2) (Tuple2 d1 c2 (t2tb694 b2) y) q)))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 c c))) (q (set (tuple21 c d))) (x c) (y d))
  (= (mem21 (tb2t693 (Tuple2 c1 d1 (t2tb135 x) (t2tb694 y)))
  (tb2t689 (semicolon d1 c1 c1 (t2tb216 p) (t2tb689 q))))
  (exists ((b2 c))
  (and (mem (tuple2 c1 c1) (Tuple2 c1 c1 (t2tb135 x) (t2tb135 b2))
  (t2tb216 p)) (mem21 (tb2t693 (Tuple2 c1 d1 (t2tb135 b2) (t2tb694 y))) q))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 c b))) (q (set (tuple21 b d))) (x c) (y d))
  (= (mem21 (tb2t693 (Tuple2 c1 d1 (t2tb135 x) (t2tb694 y)))
  (tb2t689 (semicolon d1 b1 c1 (t2tb222 p) (t2tb687 q))))
  (exists ((b2 b))
  (and (mem (tuple2 c1 b1) (Tuple2 c1 b1 (t2tb135 x) (t2tb14 b2))
  (t2tb222 p)) (mem23 (tb2t692 (Tuple2 b1 d1 (t2tb14 b2) (t2tb694 y))) q))))))

;; mem_semicolon
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (q uni) (x b) (y d))
  (and
  (=> (mem23 (tb2t692 (Tuple2 b1 d1 (t2tb14 x) (t2tb694 y)))
  (tb2t687 (semicolon d1 b2 b1 p q)))
  (exists ((b3 uni))
  (and (sort b2 b3)
  (and (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) b3) p) (mem
  (tuple2 b2 d1) (Tuple2 b2 d1 b3 (t2tb694 y)) q)))))
  (=>
  (exists ((b3 uni))
  (and (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) b3) p) (mem
  (tuple2 b2 d1) (Tuple2 b2 d1 b3 (t2tb694 y)) q))) (mem23
  (tb2t692 (Tuple2 b1 d1 (t2tb14 x) (t2tb694 y)))
  (tb2t687 (semicolon d1 b2 b1 p q))))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 b d))) (q (set (tuple21 d d))) (x b) (y d))
  (= (mem23 (tb2t692 (Tuple2 b1 d1 (t2tb14 x) (t2tb694 y)))
  (tb2t687 (semicolon d1 d1 b1 (t2tb687 p) (t2tb5297 q))))
  (exists ((b2 d))
  (and (mem23 (tb2t692 (Tuple2 b1 d1 (t2tb14 x) (t2tb694 b2))) p) (mem
  (tuple2 d1 d1) (Tuple2 d1 d1 (t2tb694 b2) (t2tb694 y)) (t2tb5297 q)))))))

;; mem_semicolon
  (assert
  (forall ((c2 ty))
  (forall ((p (set (tuple21 b d))) (q uni) (x b) (y uni))
  (= (mem (tuple2 b1 c2) (Tuple2 b1 c2 (t2tb14 x) y)
  (semicolon c2 d1 b1 (t2tb687 p) q))
  (exists ((b2 d))
  (and (mem23 (tb2t692 (Tuple2 b1 d1 (t2tb14 x) (t2tb694 b2))) p) (mem
  (tuple2 d1 c2) (Tuple2 d1 c2 (t2tb694 b2) y) q)))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 b c))) (q (set (tuple21 c d))) (x b) (y d))
  (= (mem23 (tb2t692 (Tuple2 b1 d1 (t2tb14 x) (t2tb694 y)))
  (tb2t687 (semicolon d1 c1 b1 (t2tb131 p) (t2tb689 q))))
  (exists ((b2 c))
  (and (mem (tuple2 b1 c1) (Tuple2 b1 c1 (t2tb14 x) (t2tb135 b2))
  (t2tb131 p)) (mem21 (tb2t693 (Tuple2 c1 d1 (t2tb135 b2) (t2tb694 y))) q))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 b b))) (q (set (tuple21 b d))) (x b) (y d))
  (= (mem23 (tb2t692 (Tuple2 b1 d1 (t2tb14 x) (t2tb694 y)))
  (tb2t687 (semicolon d1 b1 b1 (t2tb35 p) (t2tb687 q))))
  (exists ((b2 b))
  (and (mem (tuple2 b1 b1) (Tuple2 b1 b1 (t2tb14 x) (t2tb14 b2)) (t2tb35 p))
  (mem23 (tb2t692 (Tuple2 b1 d1 (t2tb14 b2) (t2tb694 y))) q))))))

;; mem_semicolon
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (q uni) (x a) (y c))
  (and
  (=> (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y)))
  (tb2t129 (semicolon c1 b2 a1 p q)))
  (exists ((b3 uni))
  (and (sort b2 b3)
  (and (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) b3) p) (mem (tuple2 b2 c1)
  (Tuple2 b2 c1 b3 (t2tb135 y)) q)))))
  (=>
  (exists ((b3 uni))
  (and (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) b3) p) (mem (tuple2 b2 c1)
  (Tuple2 b2 c1 b3 (t2tb135 y)) q))) (mem10
  (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y)))
  (tb2t129 (semicolon c1 b2 a1 p q))))))))

;; mem_semicolon
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (q uni) (x a) (y b))
  (and
  (=> (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y)))
  (tb2t11 (semicolon b1 b2 a1 p q)))
  (exists ((b3 uni))
  (and (sort b2 b3)
  (and (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) b3) p) (mem (tuple2 b2 b1)
  (Tuple2 b2 b1 b3 (t2tb14 y)) q)))))
  (=>
  (exists ((b3 uni))
  (and (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) b3) p) (mem (tuple2 b2 b1)
  (Tuple2 b2 b1 b3 (t2tb14 y)) q))) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y)))
  (tb2t11 (semicolon b1 b2 a1 p q))))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 a c))) (q (set (tuple21 c d))) (x a) (y d))
  (= (mem (tuple2 a1 d1) (Tuple2 a1 d1 (t2tb2 x) (t2tb694 y))
  (semicolon d1 c1 a1 (t2tb129 p) (t2tb689 q)))
  (exists ((b2 c))
  (and (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 b2))) p) (mem21
  (tb2t693 (Tuple2 c1 d1 (t2tb135 b2) (t2tb694 y))) q))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 a c))) (q (set (tuple21 c c))) (x a) (y c))
  (= (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y)))
  (tb2t129 (semicolon c1 c1 a1 (t2tb129 p) (t2tb216 q))))
  (exists ((b2 c))
  (and (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 b2))) p) (mem
  (tuple2 c1 c1) (Tuple2 c1 c1 (t2tb135 b2) (t2tb135 y)) (t2tb216 q)))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 a c))) (q (set (tuple21 c b))) (x a) (y b))
  (= (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y)))
  (tb2t11 (semicolon b1 c1 a1 (t2tb129 p) (t2tb222 q))))
  (exists ((b2 c))
  (and (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 b2))) p) (mem
  (tuple2 c1 b1) (Tuple2 c1 b1 (t2tb135 b2) (t2tb14 y)) (t2tb222 q)))))))

;; mem_semicolon
  (assert
  (forall ((c2 ty))
  (forall ((p (set (tuple21 a c))) (q uni) (x a) (y uni))
  (= (mem (tuple2 a1 c2) (Tuple2 a1 c2 (t2tb2 x) y)
  (semicolon c2 c1 a1 (t2tb129 p) q))
  (exists ((b2 c))
  (and (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 b2))) p) (mem
  (tuple2 c1 c2) (Tuple2 c1 c2 (t2tb135 b2) y) q)))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 a b))) (q (set (tuple21 b d))) (x a) (y d))
  (= (mem (tuple2 a1 d1) (Tuple2 a1 d1 (t2tb2 x) (t2tb694 y))
  (semicolon d1 b1 a1 (t2tb11 p) (t2tb687 q)))
  (exists ((b2 b))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 b2))) p) (mem23
  (tb2t692 (Tuple2 b1 d1 (t2tb14 b2) (t2tb694 y))) q))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 a b))) (q (set (tuple21 b c))) (x a) (y c))
  (= (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y)))
  (tb2t129 (semicolon c1 b1 a1 (t2tb11 p) (t2tb131 q))))
  (exists ((b2 b))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 b2))) p) (mem
  (tuple2 b1 c1) (Tuple2 b1 c1 (t2tb14 b2) (t2tb135 y)) (t2tb131 q)))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 a b))) (q (set (tuple21 b b))) (x a) (y b))
  (= (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y)))
  (tb2t11 (semicolon b1 b1 a1 (t2tb11 p) (t2tb35 q))))
  (exists ((b2 b))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 b2))) p) (mem
  (tuple2 b1 b1) (Tuple2 b1 b1 (t2tb14 b2) (t2tb14 y)) (t2tb35 q)))))))

;; mem_semicolon
  (assert
  (forall ((c2 ty))
  (forall ((p (set (tuple21 a b))) (q uni) (x a) (y uni))
  (= (mem (tuple2 a1 c2) (Tuple2 a1 c2 (t2tb2 x) y)
  (semicolon c2 b1 a1 (t2tb11 p) q))
  (exists ((b2 b))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 b2))) p) (mem
  (tuple2 b1 c2) (Tuple2 b1 c2 (t2tb14 b2) y) q)))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 a a))) (q (set (tuple21 a c))) (x a) (y c))
  (= (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y)))
  (tb2t129 (semicolon c1 a1 a1 (t2tb4 p) (t2tb129 q))))
  (exists ((b2 a))
  (and (mem (tuple2 a1 a1) (Tuple2 a1 a1 (t2tb2 x) (t2tb2 b2)) (t2tb4 p))
  (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 b2) (t2tb135 y))) q))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 a a))) (q (set (tuple21 a b))) (x a) (y b))
  (= (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y)))
  (tb2t11 (semicolon b1 a1 a1 (t2tb4 p) (t2tb11 q))))
  (exists ((b2 a))
  (and (mem (tuple2 a1 a1) (Tuple2 a1 a1 (t2tb2 x) (t2tb2 b2)) (t2tb4 p))
  (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 b2) (t2tb14 y))) q))))))

;; mem_semicolon
  (assert
  (forall ((a2 ty) (b2 ty) (c2 ty))
  (forall ((p uni) (q uni) (x uni) (y uni))
  (and
  (=> (mem (tuple2 a2 c2) (Tuple2 a2 c2 x y) (semicolon c2 b2 a2 p q))
  (exists ((b3 uni))
  (and (sort b2 b3)
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x b3) p) (mem (tuple2 b2 c2)
  (Tuple2 b2 c2 b3 y) q)))))
  (=>
  (exists ((b3 uni))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x b3) p) (mem (tuple2 b2 c2)
  (Tuple2 b2 c2 b3 y) q))) (mem (tuple2 a2 c2) (Tuple2 a2 c2 x y)
  (semicolon c2 b2 a2 p q)))))))

(declare-fun semicolon_back (ty ty ty uni uni) uni)

;; semicolon_back_sort
  (assert
  (forall ((a2 ty) (b2 ty) (c2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (tuple2 a2 c2))
  (semicolon_back c2 b2 a2 x x1)))))

;; semicolon_back
  (assert
  (forall ((a2 ty) (b2 ty) (c2 ty))
  (forall ((p uni) (q uni))
  (= (semicolon_back c2 b2 a2 q p) (semicolon c2 b2 a2 p q)))))

(declare-fun id (ty uni) uni)

;; id_sort
  (assert
  (forall ((a2 ty))
  (forall ((x uni)) (sort (set1 (tuple2 a2 a2)) (id a2 x)))))

;; mem_id
  (assert
  (forall ((u (set (tuple21 (tuple21 a c) (tuple21 b d))))
  (x (tuple21 (tuple21 a c) (tuple21 b d))) (y (tuple21 (tuple21 a c)
  (tuple21 b d))))
  (= (mem
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))
  (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))
  (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb691 x) (t2tb691 y))
  (id (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb686 u)))
  (and (mem24 x u) (= x y)))))

;; mem_id
  (assert
  (forall ((u (set (tuple21 b d))) (x (tuple21 b d)) (y (tuple21 b d)))
  (= (mem (tuple2 (tuple2 b1 d1) (tuple2 b1 d1))
  (Tuple2 (tuple2 b1 d1) (tuple2 b1 d1) (t2tb692 x) (t2tb692 y))
  (id (tuple2 b1 d1) (t2tb687 u))) (and (mem23 x u) (= x y)))))

;; mem_id
  (assert
  (forall ((u (set (set (tuple21 c d)))) (x (set (tuple21 c d)))
  (y (set (tuple21 c d))))
  (= (mem (tuple2 (set1 (tuple2 c1 d1)) (set1 (tuple2 c1 d1)))
  (Tuple2 (set1 (tuple2 c1 d1)) (set1 (tuple2 c1 d1)) (t2tb689 x)
  (t2tb689 y)) (id (set1 (tuple2 c1 d1)) (t2tb688 u)))
  (and (mem22 x u) (= x y)))))

;; mem_id
  (assert
  (forall ((u (set (tuple21 c d))) (x (tuple21 c d)) (y (tuple21 c d)))
  (= (mem (tuple2 (tuple2 c1 d1) (tuple2 c1 d1))
  (Tuple2 (tuple2 c1 d1) (tuple2 c1 d1) (t2tb693 x) (t2tb693 y))
  (id (tuple2 c1 d1) (t2tb689 u))) (and (mem21 x u) (= x y)))))

;; mem_id
  (assert
  (forall ((u (set d)) (x d) (y d))
  (= (mem (tuple2 d1 d1) (Tuple2 d1 d1 (t2tb694 x) (t2tb694 y))
  (id d1 (t2tb690 u))) (and (mem20 x u) (= x y)))))

;; mem_id
  (assert
  (forall ((u (set (tuple21 a c))) (x (tuple21 a c)) (y (tuple21 a c)))
  (= (mem (tuple2 (tuple2 a1 c1) (tuple2 a1 c1))
  (Tuple2 (tuple2 a1 c1) (tuple2 a1 c1) (t2tb133 x) (t2tb133 y))
  (id (tuple2 a1 c1) (t2tb129 u))) (and (mem10 x u) (= x y)))))

;; mem_id
  (assert
  (forall ((u (set c)) (x c) (y c))
  (= (mem (tuple2 c1 c1) (Tuple2 c1 c1 (t2tb135 x) (t2tb135 y))
  (id c1 (t2tb132 u))) (and (mem7 x u) (= x y)))))

;; mem_id
  (assert
  (forall ((u (set (set (tuple21 a b)))) (x (set (tuple21 a b)))
  (y (set (tuple21 a b))))
  (= (mem (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1)))
  (Tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1)) (t2tb11 x) (t2tb11 y))
  (id (set1 (tuple2 a1 b1)) (t2tb10 u))) (and (mem4 x u) (= x y)))))

;; mem_id
  (assert
  (forall ((u (set (tuple21 a b))) (x (tuple21 a b)) (y (tuple21 a b)))
  (= (mem (tuple2 (tuple2 a1 b1) (tuple2 a1 b1))
  (Tuple2 (tuple2 a1 b1) (tuple2 a1 b1) (t2tb13 x) (t2tb13 y))
  (id (tuple2 a1 b1) (t2tb11 u))) (and (mem3 x u) (= x y)))))

;; mem_id
  (assert
  (forall ((u (set b)) (x b) (y b))
  (= (mem (tuple2 b1 b1) (Tuple2 b1 b1 (t2tb14 x) (t2tb14 y))
  (id b1 (t2tb12 u))) (and (mem2 x u) (= x y)))))

;; mem_id
  (assert
  (forall ((u (set a)) (x a) (y a))
  (= (mem (tuple2 a1 a1) (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y))
  (id a1 (t2tb1 u))) (and (mem1 x u) (= x y)))))

;; mem_id
  (assert
  (forall ((a2 ty))
  (forall ((u uni) (x uni) (y uni))
  (=> (sort a2 x)
  (=> (sort a2 y)
  (= (mem (tuple2 a2 a2) (Tuple2 a2 a2 x y) (id a2 u))
  (and (mem a2 x u) (= x y))))))))

(declare-fun domain_restriction (ty ty uni uni) uni)

;; domain_restriction_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (tuple2 a2 b2))
  (domain_restriction b2 a2 x x1)))))

;; mem_domain_restriction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (tuple21 (tuple21 a c) (tuple21 b d))))
  (x (tuple21 (tuple21 a c) (tuple21 b d))) (y uni))
  (= (mem (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) b2)
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) b2 (t2tb691 x) y)
  (domain_restriction b2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb686 s)
  p))
  (and (mem (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) b2)
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) b2 (t2tb691 x) y) p) (mem24
  x s))))))

;; mem_domain_restriction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (tuple21 b d))) (x (tuple21 b d)) (y uni))
  (= (mem (tuple2 (tuple2 b1 d1) b2) (Tuple2 (tuple2 b1 d1) b2 (t2tb692 x) y)
  (domain_restriction b2 (tuple2 b1 d1) (t2tb687 s) p))
  (and (mem (tuple2 (tuple2 b1 d1) b2)
  (Tuple2 (tuple2 b1 d1) b2 (t2tb692 x) y) p) (mem23 x s))))))

;; mem_domain_restriction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (set (tuple21 c d)))) (x (set (tuple21 c d)))
  (y uni))
  (= (mem (tuple2 (set1 (tuple2 c1 d1)) b2)
  (Tuple2 (set1 (tuple2 c1 d1)) b2 (t2tb689 x) y)
  (domain_restriction b2 (set1 (tuple2 c1 d1)) (t2tb688 s) p))
  (and (mem (tuple2 (set1 (tuple2 c1 d1)) b2)
  (Tuple2 (set1 (tuple2 c1 d1)) b2 (t2tb689 x) y) p) (mem22 x s))))))

;; mem_domain_restriction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (tuple21 c d))) (x (tuple21 c d)) (y uni))
  (= (mem (tuple2 (tuple2 c1 d1) b2) (Tuple2 (tuple2 c1 d1) b2 (t2tb693 x) y)
  (domain_restriction b2 (tuple2 c1 d1) (t2tb689 s) p))
  (and (mem (tuple2 (tuple2 c1 d1) b2)
  (Tuple2 (tuple2 c1 d1) b2 (t2tb693 x) y) p) (mem21 x s))))))

;; mem_domain_restriction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set d)) (x d) (y uni))
  (= (mem (tuple2 d1 b2) (Tuple2 d1 b2 (t2tb694 x) y)
  (domain_restriction b2 d1 (t2tb690 s) p))
  (and (mem (tuple2 d1 b2) (Tuple2 d1 b2 (t2tb694 x) y) p) (mem20 x s))))))

;; mem_domain_restriction
  (assert
  (forall ((p (set (tuple21 (tuple21 a c) (tuple21 b d)))) (s (set (tuple21 a
  c))) (x (tuple21 a c)) (y (tuple21 b d)))
  (= (mem24
  (tb2t691 (Tuple2 (tuple2 a1 c1) (tuple2 b1 d1) (t2tb133 x) (t2tb692 y)))
  (tb2t686
  (domain_restriction (tuple2 b1 d1) (tuple2 a1 c1) (t2tb129 s) (t2tb686 p))))
  (and (mem24
  (tb2t691 (Tuple2 (tuple2 a1 c1) (tuple2 b1 d1) (t2tb133 x) (t2tb692 y))) p)
  (mem10 x s)))))

;; mem_domain_restriction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (tuple21 a c))) (x (tuple21 a c)) (y uni))
  (= (mem (tuple2 (tuple2 a1 c1) b2) (Tuple2 (tuple2 a1 c1) b2 (t2tb133 x) y)
  (domain_restriction b2 (tuple2 a1 c1) (t2tb129 s) p))
  (and (mem (tuple2 (tuple2 a1 c1) b2)
  (Tuple2 (tuple2 a1 c1) b2 (t2tb133 x) y) p) (mem10 x s))))))

;; mem_domain_restriction
  (assert
  (forall ((p (set (tuple21 c d))) (s (set c)) (x c) (y d))
  (= (mem21 (tb2t693 (Tuple2 c1 d1 (t2tb135 x) (t2tb694 y)))
  (tb2t689 (domain_restriction d1 c1 (t2tb132 s) (t2tb689 p))))
  (and (mem21 (tb2t693 (Tuple2 c1 d1 (t2tb135 x) (t2tb694 y))) p) (mem7 x s)))))

;; mem_domain_restriction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set c)) (x c) (y uni))
  (= (mem (tuple2 c1 b2) (Tuple2 c1 b2 (t2tb135 x) y)
  (domain_restriction b2 c1 (t2tb132 s) p))
  (and (mem (tuple2 c1 b2) (Tuple2 c1 b2 (t2tb135 x) y) p) (mem7 x s))))))

;; mem_domain_restriction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (set (tuple21 a b)))) (x (set (tuple21 a b)))
  (y uni))
  (= (mem (tuple2 (set1 (tuple2 a1 b1)) b2)
  (Tuple2 (set1 (tuple2 a1 b1)) b2 (t2tb11 x) y)
  (domain_restriction b2 (set1 (tuple2 a1 b1)) (t2tb10 s) p))
  (and (mem (tuple2 (set1 (tuple2 a1 b1)) b2)
  (Tuple2 (set1 (tuple2 a1 b1)) b2 (t2tb11 x) y) p) (mem4 x s))))))

;; mem_domain_restriction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (tuple21 a b))) (x (tuple21 a b)) (y uni))
  (= (mem (tuple2 (tuple2 a1 b1) b2) (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) y)
  (domain_restriction b2 (tuple2 a1 b1) (t2tb11 s) p))
  (and (mem (tuple2 (tuple2 a1 b1) b2)
  (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) y) p) (mem3 x s))))))

;; mem_domain_restriction
  (assert
  (forall ((p (set (tuple21 b d))) (s (set b)) (x b) (y d))
  (= (mem23 (tb2t692 (Tuple2 b1 d1 (t2tb14 x) (t2tb694 y)))
  (tb2t687 (domain_restriction d1 b1 (t2tb12 s) (t2tb687 p))))
  (and (mem23 (tb2t692 (Tuple2 b1 d1 (t2tb14 x) (t2tb694 y))) p) (mem2 x s)))))

;; mem_domain_restriction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set b)) (x b) (y uni))
  (= (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) y)
  (domain_restriction b2 b1 (t2tb12 s) p))
  (and (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) y) p) (mem2 x s))))))

;; mem_domain_restriction
  (assert
  (forall ((p (set (tuple21 a c))) (s (set a)) (x a) (y c))
  (= (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y)))
  (tb2t129 (domain_restriction c1 a1 (t2tb1 s) (t2tb129 p))))
  (and (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y))) p) (mem1 x s)))))

;; mem_domain_restriction
  (assert
  (forall ((p (set (tuple21 a b))) (s (set a)) (x a) (y b))
  (= (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y)))
  (tb2t11 (domain_restriction b1 a1 (t2tb1 s) (t2tb11 p))))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y))) p) (mem1 x s)))))

;; mem_domain_restriction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set a)) (x a) (y uni))
  (= (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) y)
  (domain_restriction b2 a1 (t2tb1 s) p))
  (and (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) y) p) (mem1 x s))))))

;; mem_domain_restriction
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((p uni) (s uni) (x uni) (y uni))
  (= (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) (domain_restriction b2 a2 s p))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) p) (mem a2 x s))))))

(declare-fun range_restriction (ty ty uni uni) uni)

;; range_restriction_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (tuple2 a2 b2))
  (range_restriction b2 a2 x x1)))))

;; mem_range_restriction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (tuple21 (tuple21 a c) (tuple21 b d)))) (x uni)
  (y (tuple21 (tuple21 a c) (tuple21 b d))))
  (= (mem (tuple2 a2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
  (Tuple2 a2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) x (t2tb691 y))
  (range_restriction (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) a2 p (t2tb686 t)))
  (and (mem (tuple2 a2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
  (Tuple2 a2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) x (t2tb691 y)) p) (mem24
  y t))))))

;; mem_range_restriction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (tuple21 b d))) (x uni) (y (tuple21 b d)))
  (= (mem (tuple2 a2 (tuple2 b1 d1)) (Tuple2 a2 (tuple2 b1 d1) x (t2tb692 y))
  (range_restriction (tuple2 b1 d1) a2 p (t2tb687 t)))
  (and (mem (tuple2 a2 (tuple2 b1 d1))
  (Tuple2 a2 (tuple2 b1 d1) x (t2tb692 y)) p) (mem23 y t))))))

;; mem_range_restriction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (set (tuple21 c d)))) (x uni) (y (set (tuple21 c
  d))))
  (= (mem (tuple2 a2 (set1 (tuple2 c1 d1)))
  (Tuple2 a2 (set1 (tuple2 c1 d1)) x (t2tb689 y))
  (range_restriction (set1 (tuple2 c1 d1)) a2 p (t2tb688 t)))
  (and (mem (tuple2 a2 (set1 (tuple2 c1 d1)))
  (Tuple2 a2 (set1 (tuple2 c1 d1)) x (t2tb689 y)) p) (mem22 y t))))))

;; mem_range_restriction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (tuple21 c d))) (x uni) (y (tuple21 c d)))
  (= (mem (tuple2 a2 (tuple2 c1 d1)) (Tuple2 a2 (tuple2 c1 d1) x (t2tb693 y))
  (range_restriction (tuple2 c1 d1) a2 p (t2tb689 t)))
  (and (mem (tuple2 a2 (tuple2 c1 d1))
  (Tuple2 a2 (tuple2 c1 d1) x (t2tb693 y)) p) (mem21 y t))))))

;; mem_range_restriction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set d)) (x uni) (y d))
  (= (mem (tuple2 a2 d1) (Tuple2 a2 d1 x (t2tb694 y))
  (range_restriction d1 a2 p (t2tb690 t)))
  (and (mem (tuple2 a2 d1) (Tuple2 a2 d1 x (t2tb694 y)) p) (mem20 y t))))))

;; mem_range_restriction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (tuple21 a c))) (x uni) (y (tuple21 a c)))
  (= (mem (tuple2 a2 (tuple2 a1 c1)) (Tuple2 a2 (tuple2 a1 c1) x (t2tb133 y))
  (range_restriction (tuple2 a1 c1) a2 p (t2tb129 t)))
  (and (mem (tuple2 a2 (tuple2 a1 c1))
  (Tuple2 a2 (tuple2 a1 c1) x (t2tb133 y)) p) (mem10 y t))))))

;; mem_range_restriction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set c)) (x uni) (y c))
  (= (mem (tuple2 a2 c1) (Tuple2 a2 c1 x (t2tb135 y))
  (range_restriction c1 a2 p (t2tb132 t)))
  (and (mem (tuple2 a2 c1) (Tuple2 a2 c1 x (t2tb135 y)) p) (mem7 y t))))))

;; mem_range_restriction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (set (tuple21 a b)))) (x uni) (y (set (tuple21 a
  b))))
  (= (mem (tuple2 a2 (set1 (tuple2 a1 b1)))
  (Tuple2 a2 (set1 (tuple2 a1 b1)) x (t2tb11 y))
  (range_restriction (set1 (tuple2 a1 b1)) a2 p (t2tb10 t)))
  (and (mem (tuple2 a2 (set1 (tuple2 a1 b1)))
  (Tuple2 a2 (set1 (tuple2 a1 b1)) x (t2tb11 y)) p) (mem4 y t))))))

;; mem_range_restriction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (tuple21 a b))) (x uni) (y (tuple21 a b)))
  (= (mem (tuple2 a2 (tuple2 a1 b1)) (Tuple2 a2 (tuple2 a1 b1) x (t2tb13 y))
  (range_restriction (tuple2 a1 b1) a2 p (t2tb11 t)))
  (and (mem (tuple2 a2 (tuple2 a1 b1))
  (Tuple2 a2 (tuple2 a1 b1) x (t2tb13 y)) p) (mem3 y t))))))

;; mem_range_restriction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set b)) (x uni) (y b))
  (= (mem (tuple2 a2 b1) (Tuple2 a2 b1 x (t2tb14 y))
  (range_restriction b1 a2 p (t2tb12 t)))
  (and (mem (tuple2 a2 b1) (Tuple2 a2 b1 x (t2tb14 y)) p) (mem2 y t))))))

;; mem_range_restriction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set a)) (x uni) (y a))
  (= (mem (tuple2 a2 a1) (Tuple2 a2 a1 x (t2tb2 y))
  (range_restriction a1 a2 p (t2tb1 t)))
  (and (mem (tuple2 a2 a1) (Tuple2 a2 a1 x (t2tb2 y)) p) (mem1 y t))))))

;; mem_range_restriction
  (assert
  (forall ((p (set (tuple21 (tuple21 a c) (tuple21 b d)))) (t (set (tuple21 b
  d))) (x (tuple21 a c)) (y (tuple21 b d)))
  (= (mem24
  (tb2t691 (Tuple2 (tuple2 a1 c1) (tuple2 b1 d1) (t2tb133 x) (t2tb692 y)))
  (tb2t686
  (range_restriction (tuple2 b1 d1) (tuple2 a1 c1) (t2tb686 p) (t2tb687 t))))
  (and (mem24
  (tb2t691 (Tuple2 (tuple2 a1 c1) (tuple2 b1 d1) (t2tb133 x) (t2tb692 y))) p)
  (mem23 y t)))))

;; mem_range_restriction
  (assert
  (forall ((p (set (tuple21 c d))) (t (set d)) (x c) (y d))
  (= (mem21 (tb2t693 (Tuple2 c1 d1 (t2tb135 x) (t2tb694 y)))
  (tb2t689 (range_restriction d1 c1 (t2tb689 p) (t2tb690 t))))
  (and (mem21 (tb2t693 (Tuple2 c1 d1 (t2tb135 x) (t2tb694 y))) p) (mem20 y
  t)))))

;; mem_range_restriction
  (assert
  (forall ((p (set (tuple21 b d))) (t (set d)) (x b) (y d))
  (= (mem23 (tb2t692 (Tuple2 b1 d1 (t2tb14 x) (t2tb694 y)))
  (tb2t687 (range_restriction d1 b1 (t2tb687 p) (t2tb690 t))))
  (and (mem23 (tb2t692 (Tuple2 b1 d1 (t2tb14 x) (t2tb694 y))) p) (mem20 y t)))))

;; mem_range_restriction
  (assert
  (forall ((p (set (tuple21 a c))) (t (set c)) (x a) (y c))
  (= (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y)))
  (tb2t129 (range_restriction c1 a1 (t2tb129 p) (t2tb132 t))))
  (and (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y))) p) (mem7 y t)))))

;; mem_range_restriction
  (assert
  (forall ((p (set (tuple21 a b))) (t (set b)) (x a) (y b))
  (= (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y)))
  (tb2t11 (range_restriction b1 a1 (t2tb11 p) (t2tb12 t))))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y))) p) (mem2 y t)))))

;; mem_range_restriction
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((p uni) (t uni) (x uni) (y uni))
  (= (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) (range_restriction b2 a2 p t))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) p) (mem b2 y t))))))

(declare-fun domain_substraction (ty ty uni uni) uni)

;; domain_substraction_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (tuple2 a2 b2))
  (domain_substraction b2 a2 x x1)))))

;; mem_domain_substraction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (tuple21 (tuple21 a c) (tuple21 b d))))
  (x (tuple21 (tuple21 a c) (tuple21 b d))) (y uni))
  (= (mem (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) b2)
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) b2 (t2tb691 x) y)
  (domain_substraction b2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb686 s)
  p))
  (and (mem (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) b2)
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) b2 (t2tb691 x) y) p)
  (not (mem24 x s)))))))

;; mem_domain_substraction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (tuple21 b d))) (x (tuple21 b d)) (y uni))
  (= (mem (tuple2 (tuple2 b1 d1) b2) (Tuple2 (tuple2 b1 d1) b2 (t2tb692 x) y)
  (domain_substraction b2 (tuple2 b1 d1) (t2tb687 s) p))
  (and (mem (tuple2 (tuple2 b1 d1) b2)
  (Tuple2 (tuple2 b1 d1) b2 (t2tb692 x) y) p) (not (mem23 x s)))))))

;; mem_domain_substraction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (set (tuple21 c d)))) (x (set (tuple21 c d)))
  (y uni))
  (= (mem (tuple2 (set1 (tuple2 c1 d1)) b2)
  (Tuple2 (set1 (tuple2 c1 d1)) b2 (t2tb689 x) y)
  (domain_substraction b2 (set1 (tuple2 c1 d1)) (t2tb688 s) p))
  (and (mem (tuple2 (set1 (tuple2 c1 d1)) b2)
  (Tuple2 (set1 (tuple2 c1 d1)) b2 (t2tb689 x) y) p) (not (mem22 x s)))))))

;; mem_domain_substraction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (tuple21 c d))) (x (tuple21 c d)) (y uni))
  (= (mem (tuple2 (tuple2 c1 d1) b2) (Tuple2 (tuple2 c1 d1) b2 (t2tb693 x) y)
  (domain_substraction b2 (tuple2 c1 d1) (t2tb689 s) p))
  (and (mem (tuple2 (tuple2 c1 d1) b2)
  (Tuple2 (tuple2 c1 d1) b2 (t2tb693 x) y) p) (not (mem21 x s)))))))

;; mem_domain_substraction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set d)) (x d) (y uni))
  (= (mem (tuple2 d1 b2) (Tuple2 d1 b2 (t2tb694 x) y)
  (domain_substraction b2 d1 (t2tb690 s) p))
  (and (mem (tuple2 d1 b2) (Tuple2 d1 b2 (t2tb694 x) y) p) (not (mem20 x s)))))))

;; mem_domain_substraction
  (assert
  (forall ((p (set (tuple21 (tuple21 a c) (tuple21 b d)))) (s (set (tuple21 a
  c))) (x (tuple21 a c)) (y (tuple21 b d)))
  (= (mem24
  (tb2t691 (Tuple2 (tuple2 a1 c1) (tuple2 b1 d1) (t2tb133 x) (t2tb692 y)))
  (tb2t686
  (domain_substraction (tuple2 b1 d1) (tuple2 a1 c1) (t2tb129 s) (t2tb686 p))))
  (and (mem24
  (tb2t691 (Tuple2 (tuple2 a1 c1) (tuple2 b1 d1) (t2tb133 x) (t2tb692 y))) p)
  (not (mem10 x s))))))

;; mem_domain_substraction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (tuple21 a c))) (x (tuple21 a c)) (y uni))
  (= (mem (tuple2 (tuple2 a1 c1) b2) (Tuple2 (tuple2 a1 c1) b2 (t2tb133 x) y)
  (domain_substraction b2 (tuple2 a1 c1) (t2tb129 s) p))
  (and (mem (tuple2 (tuple2 a1 c1) b2)
  (Tuple2 (tuple2 a1 c1) b2 (t2tb133 x) y) p) (not (mem10 x s)))))))

;; mem_domain_substraction
  (assert
  (forall ((p (set (tuple21 c d))) (s (set c)) (x c) (y d))
  (= (mem21 (tb2t693 (Tuple2 c1 d1 (t2tb135 x) (t2tb694 y)))
  (tb2t689 (domain_substraction d1 c1 (t2tb132 s) (t2tb689 p))))
  (and (mem21 (tb2t693 (Tuple2 c1 d1 (t2tb135 x) (t2tb694 y))) p)
  (not (mem7 x s))))))

;; mem_domain_substraction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set c)) (x c) (y uni))
  (= (mem (tuple2 c1 b2) (Tuple2 c1 b2 (t2tb135 x) y)
  (domain_substraction b2 c1 (t2tb132 s) p))
  (and (mem (tuple2 c1 b2) (Tuple2 c1 b2 (t2tb135 x) y) p) (not (mem7 x s)))))))

;; mem_domain_substraction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (set (tuple21 a b)))) (x (set (tuple21 a b)))
  (y uni))
  (= (mem (tuple2 (set1 (tuple2 a1 b1)) b2)
  (Tuple2 (set1 (tuple2 a1 b1)) b2 (t2tb11 x) y)
  (domain_substraction b2 (set1 (tuple2 a1 b1)) (t2tb10 s) p))
  (and (mem (tuple2 (set1 (tuple2 a1 b1)) b2)
  (Tuple2 (set1 (tuple2 a1 b1)) b2 (t2tb11 x) y) p) (not (mem4 x s)))))))

;; mem_domain_substraction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (tuple21 a b))) (x (tuple21 a b)) (y uni))
  (= (mem (tuple2 (tuple2 a1 b1) b2) (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) y)
  (domain_substraction b2 (tuple2 a1 b1) (t2tb11 s) p))
  (and (mem (tuple2 (tuple2 a1 b1) b2)
  (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) y) p) (not (mem3 x s)))))))

;; mem_domain_substraction
  (assert
  (forall ((p (set (tuple21 b d))) (s (set b)) (x b) (y d))
  (= (mem23 (tb2t692 (Tuple2 b1 d1 (t2tb14 x) (t2tb694 y)))
  (tb2t687 (domain_substraction d1 b1 (t2tb12 s) (t2tb687 p))))
  (and (mem23 (tb2t692 (Tuple2 b1 d1 (t2tb14 x) (t2tb694 y))) p)
  (not (mem2 x s))))))

;; mem_domain_substraction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set b)) (x b) (y uni))
  (= (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) y)
  (domain_substraction b2 b1 (t2tb12 s) p))
  (and (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) y) p) (not (mem2 x s)))))))

;; mem_domain_substraction
  (assert
  (forall ((p (set (tuple21 a c))) (s (set a)) (x a) (y c))
  (= (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y)))
  (tb2t129 (domain_substraction c1 a1 (t2tb1 s) (t2tb129 p))))
  (and (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y))) p)
  (not (mem1 x s))))))

;; mem_domain_substraction
  (assert
  (forall ((p (set (tuple21 a b))) (s (set a)) (x a) (y b))
  (= (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y)))
  (tb2t11 (domain_substraction b1 a1 (t2tb1 s) (t2tb11 p))))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y))) p)
  (not (mem1 x s))))))

;; mem_domain_substraction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set a)) (x a) (y uni))
  (= (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) y)
  (domain_substraction b2 a1 (t2tb1 s) p))
  (and (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) y) p) (not (mem1 x s)))))))

;; mem_domain_substraction
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((p uni) (s uni) (x uni) (y uni))
  (= (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) (domain_substraction b2 a2 s p))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) p) (not (mem a2 x s)))))))

(declare-fun range_substraction (ty ty uni uni) uni)

;; range_substraction_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (tuple2 a2 b2))
  (range_substraction b2 a2 x x1)))))

;; mem_range_substraction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (tuple21 (tuple21 a c) (tuple21 b d)))) (x uni)
  (y (tuple21 (tuple21 a c) (tuple21 b d))))
  (= (mem (tuple2 a2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
  (Tuple2 a2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) x (t2tb691 y))
  (range_substraction (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) a2 p
  (t2tb686 t)))
  (and (mem (tuple2 a2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
  (Tuple2 a2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) x (t2tb691 y)) p)
  (not (mem24 y t)))))))

;; mem_range_substraction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (tuple21 b d))) (x uni) (y (tuple21 b d)))
  (= (mem (tuple2 a2 (tuple2 b1 d1)) (Tuple2 a2 (tuple2 b1 d1) x (t2tb692 y))
  (range_substraction (tuple2 b1 d1) a2 p (t2tb687 t)))
  (and (mem (tuple2 a2 (tuple2 b1 d1))
  (Tuple2 a2 (tuple2 b1 d1) x (t2tb692 y)) p) (not (mem23 y t)))))))

;; mem_range_substraction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (set (tuple21 c d)))) (x uni) (y (set (tuple21 c
  d))))
  (= (mem (tuple2 a2 (set1 (tuple2 c1 d1)))
  (Tuple2 a2 (set1 (tuple2 c1 d1)) x (t2tb689 y))
  (range_substraction (set1 (tuple2 c1 d1)) a2 p (t2tb688 t)))
  (and (mem (tuple2 a2 (set1 (tuple2 c1 d1)))
  (Tuple2 a2 (set1 (tuple2 c1 d1)) x (t2tb689 y)) p) (not (mem22 y t)))))))

;; mem_range_substraction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (tuple21 c d))) (x uni) (y (tuple21 c d)))
  (= (mem (tuple2 a2 (tuple2 c1 d1)) (Tuple2 a2 (tuple2 c1 d1) x (t2tb693 y))
  (range_substraction (tuple2 c1 d1) a2 p (t2tb689 t)))
  (and (mem (tuple2 a2 (tuple2 c1 d1))
  (Tuple2 a2 (tuple2 c1 d1) x (t2tb693 y)) p) (not (mem21 y t)))))))

;; mem_range_substraction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set d)) (x uni) (y d))
  (= (mem (tuple2 a2 d1) (Tuple2 a2 d1 x (t2tb694 y))
  (range_substraction d1 a2 p (t2tb690 t)))
  (and (mem (tuple2 a2 d1) (Tuple2 a2 d1 x (t2tb694 y)) p) (not (mem20 y t)))))))

;; mem_range_substraction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (tuple21 a c))) (x uni) (y (tuple21 a c)))
  (= (mem (tuple2 a2 (tuple2 a1 c1)) (Tuple2 a2 (tuple2 a1 c1) x (t2tb133 y))
  (range_substraction (tuple2 a1 c1) a2 p (t2tb129 t)))
  (and (mem (tuple2 a2 (tuple2 a1 c1))
  (Tuple2 a2 (tuple2 a1 c1) x (t2tb133 y)) p) (not (mem10 y t)))))))

;; mem_range_substraction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set c)) (x uni) (y c))
  (= (mem (tuple2 a2 c1) (Tuple2 a2 c1 x (t2tb135 y))
  (range_substraction c1 a2 p (t2tb132 t)))
  (and (mem (tuple2 a2 c1) (Tuple2 a2 c1 x (t2tb135 y)) p) (not (mem7 y t)))))))

;; mem_range_substraction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (set (tuple21 a b)))) (x uni) (y (set (tuple21 a
  b))))
  (= (mem (tuple2 a2 (set1 (tuple2 a1 b1)))
  (Tuple2 a2 (set1 (tuple2 a1 b1)) x (t2tb11 y))
  (range_substraction (set1 (tuple2 a1 b1)) a2 p (t2tb10 t)))
  (and (mem (tuple2 a2 (set1 (tuple2 a1 b1)))
  (Tuple2 a2 (set1 (tuple2 a1 b1)) x (t2tb11 y)) p) (not (mem4 y t)))))))

;; mem_range_substraction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (tuple21 a b))) (x uni) (y (tuple21 a b)))
  (= (mem (tuple2 a2 (tuple2 a1 b1)) (Tuple2 a2 (tuple2 a1 b1) x (t2tb13 y))
  (range_substraction (tuple2 a1 b1) a2 p (t2tb11 t)))
  (and (mem (tuple2 a2 (tuple2 a1 b1))
  (Tuple2 a2 (tuple2 a1 b1) x (t2tb13 y)) p) (not (mem3 y t)))))))

;; mem_range_substraction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set b)) (x uni) (y b))
  (= (mem (tuple2 a2 b1) (Tuple2 a2 b1 x (t2tb14 y))
  (range_substraction b1 a2 p (t2tb12 t)))
  (and (mem (tuple2 a2 b1) (Tuple2 a2 b1 x (t2tb14 y)) p) (not (mem2 y t)))))))

;; mem_range_substraction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set a)) (x uni) (y a))
  (= (mem (tuple2 a2 a1) (Tuple2 a2 a1 x (t2tb2 y))
  (range_substraction a1 a2 p (t2tb1 t)))
  (and (mem (tuple2 a2 a1) (Tuple2 a2 a1 x (t2tb2 y)) p) (not (mem1 y t)))))))

;; mem_range_substraction
  (assert
  (forall ((p (set (tuple21 (tuple21 a c) (tuple21 b d)))) (t (set (tuple21 b
  d))) (x (tuple21 a c)) (y (tuple21 b d)))
  (= (mem24
  (tb2t691 (Tuple2 (tuple2 a1 c1) (tuple2 b1 d1) (t2tb133 x) (t2tb692 y)))
  (tb2t686
  (range_substraction (tuple2 b1 d1) (tuple2 a1 c1) (t2tb686 p) (t2tb687 t))))
  (and (mem24
  (tb2t691 (Tuple2 (tuple2 a1 c1) (tuple2 b1 d1) (t2tb133 x) (t2tb692 y))) p)
  (not (mem23 y t))))))

;; mem_range_substraction
  (assert
  (forall ((p (set (tuple21 c d))) (t (set d)) (x c) (y d))
  (= (mem21 (tb2t693 (Tuple2 c1 d1 (t2tb135 x) (t2tb694 y)))
  (tb2t689 (range_substraction d1 c1 (t2tb689 p) (t2tb690 t))))
  (and (mem21 (tb2t693 (Tuple2 c1 d1 (t2tb135 x) (t2tb694 y))) p)
  (not (mem20 y t))))))

;; mem_range_substraction
  (assert
  (forall ((p (set (tuple21 b d))) (t (set d)) (x b) (y d))
  (= (mem23 (tb2t692 (Tuple2 b1 d1 (t2tb14 x) (t2tb694 y)))
  (tb2t687 (range_substraction d1 b1 (t2tb687 p) (t2tb690 t))))
  (and (mem23 (tb2t692 (Tuple2 b1 d1 (t2tb14 x) (t2tb694 y))) p)
  (not (mem20 y t))))))

;; mem_range_substraction
  (assert
  (forall ((p (set (tuple21 a c))) (t (set c)) (x a) (y c))
  (= (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y)))
  (tb2t129 (range_substraction c1 a1 (t2tb129 p) (t2tb132 t))))
  (and (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y))) p)
  (not (mem7 y t))))))

;; mem_range_substraction
  (assert
  (forall ((p (set (tuple21 a b))) (t (set b)) (x a) (y b))
  (= (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y)))
  (tb2t11 (range_substraction b1 a1 (t2tb11 p) (t2tb12 t))))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y))) p)
  (not (mem2 y t))))))

;; mem_range_substraction
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((p uni) (t uni) (x uni) (y uni))
  (= (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) (range_substraction b2 a2 p t))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) p) (not (mem b2 y t)))))))

(declare-fun image (ty ty uni uni) uni)

;; image_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 b2) (image b2 a2 x x1)))))

(declare-fun image1 ((set (tuple21 a b)) (set a)) (set b))

(declare-fun image4 ((set (tuple21 a c)) (set a)) (set c))

(declare-fun image9 ((set (tuple21 c d)) (set c)) (set d))

(declare-fun image10 ((set (tuple21 b d)) (set b)) (set d))

(declare-fun image11 ((set (tuple21 (tuple21 a c) (tuple21 b d)))
  (set (tuple21 a c))) (set (tuple21 b d)))

;; mem_image
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (w uni) (x (tuple21 (tuple21 a c) (tuple21 b d))))
  (and
  (=> (mem24 x
  (tb2t686 (image (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) a2 p w)))
  (exists ((a3 uni))
  (and (sort a2 a3)
  (and (mem a2 a3 w) (mem (tuple2 a2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
  (Tuple2 a2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) a3 (t2tb691 x)) p)))))
  (=>
  (exists ((a3 uni))
  (and (mem a2 a3 w) (mem (tuple2 a2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
  (Tuple2 a2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) a3 (t2tb691 x)) p)))
  (mem24 x (tb2t686 (image (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) a2 p w))))))))

;; mem_image
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (w uni) (x (tuple21 b d)))
  (and
  (=> (mem23 x (tb2t687 (image (tuple2 b1 d1) a2 p w)))
  (exists ((a3 uni))
  (and (sort a2 a3)
  (and (mem a2 a3 w) (mem (tuple2 a2 (tuple2 b1 d1))
  (Tuple2 a2 (tuple2 b1 d1) a3 (t2tb692 x)) p)))))
  (=>
  (exists ((a3 uni))
  (and (mem a2 a3 w) (mem (tuple2 a2 (tuple2 b1 d1))
  (Tuple2 a2 (tuple2 b1 d1) a3 (t2tb692 x)) p))) (mem23 x
  (tb2t687 (image (tuple2 b1 d1) a2 p w))))))))

;; mem_image
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (w uni) (x (set (tuple21 c d))))
  (and
  (=> (mem22 x (tb2t688 (image (set1 (tuple2 c1 d1)) a2 p w)))
  (exists ((a3 uni))
  (and (sort a2 a3)
  (and (mem a2 a3 w) (mem (tuple2 a2 (set1 (tuple2 c1 d1)))
  (Tuple2 a2 (set1 (tuple2 c1 d1)) a3 (t2tb689 x)) p)))))
  (=>
  (exists ((a3 uni))
  (and (mem a2 a3 w) (mem (tuple2 a2 (set1 (tuple2 c1 d1)))
  (Tuple2 a2 (set1 (tuple2 c1 d1)) a3 (t2tb689 x)) p))) (mem22 x
  (tb2t688 (image (set1 (tuple2 c1 d1)) a2 p w))))))))

;; mem_image
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (w uni) (x (tuple21 c d)))
  (and
  (=> (mem21 x (tb2t689 (image (tuple2 c1 d1) a2 p w)))
  (exists ((a3 uni))
  (and (sort a2 a3)
  (and (mem a2 a3 w) (mem (tuple2 a2 (tuple2 c1 d1))
  (Tuple2 a2 (tuple2 c1 d1) a3 (t2tb693 x)) p)))))
  (=>
  (exists ((a3 uni))
  (and (mem a2 a3 w) (mem (tuple2 a2 (tuple2 c1 d1))
  (Tuple2 a2 (tuple2 c1 d1) a3 (t2tb693 x)) p))) (mem21 x
  (tb2t689 (image (tuple2 c1 d1) a2 p w))))))))

;; mem_image
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (w uni) (x d))
  (and
  (=> (mem20 x (tb2t690 (image d1 a2 p w)))
  (exists ((a3 uni))
  (and (sort a2 a3)
  (and (mem a2 a3 w) (mem (tuple2 a2 d1) (Tuple2 a2 d1 a3 (t2tb694 x)) p)))))
  (=>
  (exists ((a3 uni))
  (and (mem a2 a3 w) (mem (tuple2 a2 d1) (Tuple2 a2 d1 a3 (t2tb694 x)) p)))
  (mem20 x (tb2t690 (image d1 a2 p w))))))))

;; mem_image
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (w uni) (x (tuple21 a c)))
  (and
  (=> (mem10 x (tb2t129 (image (tuple2 a1 c1) a2 p w)))
  (exists ((a3 uni))
  (and (sort a2 a3)
  (and (mem a2 a3 w) (mem (tuple2 a2 (tuple2 a1 c1))
  (Tuple2 a2 (tuple2 a1 c1) a3 (t2tb133 x)) p)))))
  (=>
  (exists ((a3 uni))
  (and (mem a2 a3 w) (mem (tuple2 a2 (tuple2 a1 c1))
  (Tuple2 a2 (tuple2 a1 c1) a3 (t2tb133 x)) p))) (mem10 x
  (tb2t129 (image (tuple2 a1 c1) a2 p w))))))))

;; mem_image
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (w uni) (x c))
  (and
  (=> (mem7 x (tb2t132 (image c1 a2 p w)))
  (exists ((a3 uni))
  (and (sort a2 a3)
  (and (mem a2 a3 w) (mem (tuple2 a2 c1) (Tuple2 a2 c1 a3 (t2tb135 x)) p)))))
  (=>
  (exists ((a3 uni))
  (and (mem a2 a3 w) (mem (tuple2 a2 c1) (Tuple2 a2 c1 a3 (t2tb135 x)) p)))
  (mem7 x (tb2t132 (image c1 a2 p w))))))))

;; mem_image
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (w uni) (x (set (tuple21 a b))))
  (and
  (=> (mem4 x (tb2t10 (image (set1 (tuple2 a1 b1)) a2 p w)))
  (exists ((a3 uni))
  (and (sort a2 a3)
  (and (mem a2 a3 w) (mem (tuple2 a2 (set1 (tuple2 a1 b1)))
  (Tuple2 a2 (set1 (tuple2 a1 b1)) a3 (t2tb11 x)) p)))))
  (=>
  (exists ((a3 uni))
  (and (mem a2 a3 w) (mem (tuple2 a2 (set1 (tuple2 a1 b1)))
  (Tuple2 a2 (set1 (tuple2 a1 b1)) a3 (t2tb11 x)) p))) (mem4 x
  (tb2t10 (image (set1 (tuple2 a1 b1)) a2 p w))))))))

;; mem_image
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (w uni) (x (tuple21 a b)))
  (and
  (=> (mem3 x (tb2t11 (image (tuple2 a1 b1) a2 p w)))
  (exists ((a3 uni))
  (and (sort a2 a3)
  (and (mem a2 a3 w) (mem (tuple2 a2 (tuple2 a1 b1))
  (Tuple2 a2 (tuple2 a1 b1) a3 (t2tb13 x)) p)))))
  (=>
  (exists ((a3 uni))
  (and (mem a2 a3 w) (mem (tuple2 a2 (tuple2 a1 b1))
  (Tuple2 a2 (tuple2 a1 b1) a3 (t2tb13 x)) p))) (mem3 x
  (tb2t11 (image (tuple2 a1 b1) a2 p w))))))))

;; mem_image
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (w uni) (x b))
  (and
  (=> (mem2 x (tb2t12 (image b1 a2 p w)))
  (exists ((a3 uni))
  (and (sort a2 a3)
  (and (mem a2 a3 w) (mem (tuple2 a2 b1) (Tuple2 a2 b1 a3 (t2tb14 x)) p)))))
  (=>
  (exists ((a3 uni))
  (and (mem a2 a3 w) (mem (tuple2 a2 b1) (Tuple2 a2 b1 a3 (t2tb14 x)) p)))
  (mem2 x (tb2t12 (image b1 a2 p w))))))))

;; mem_image
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (w uni) (x a))
  (and
  (=> (mem1 x (tb2t1 (image a1 a2 p w)))
  (exists ((a3 uni))
  (and (sort a2 a3)
  (and (mem a2 a3 w) (mem (tuple2 a2 a1) (Tuple2 a2 a1 a3 (t2tb2 x)) p)))))
  (=>
  (exists ((a3 uni))
  (and (mem a2 a3 w) (mem (tuple2 a2 a1) (Tuple2 a2 a1 a3 (t2tb2 x)) p)))
  (mem1 x (tb2t1 (image a1 a2 p w))))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  (tuple21 (tuple21 a c) (tuple21 b d))))) (w (set (tuple21 (tuple21 a c)
  (tuple21 b d)))) (x (tuple21 (tuple21 a c) (tuple21 b d))))
  (= (mem24 x
  (tb2t686
  (image (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))
  (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb5204 p) (t2tb686 w))))
  (exists ((a2 (tuple21 (tuple21 a c) (tuple21 b d))))
  (and (mem24 a2 w) (mem
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))
  (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))
  (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb691 a2) (t2tb691 x))
  (t2tb5204 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) (tuple21 b
  d)))) (w (set (tuple21 (tuple21 a c) (tuple21 b d)))) (x (tuple21 b d)))
  (= (mem23 x
  (tb2t687
  (image (tuple2 b1 d1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb5205 p)
  (t2tb686 w))))
  (exists ((a2 (tuple21 (tuple21 a c) (tuple21 b d))))
  (and (mem24 a2 w) (mem
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 b1 d1))
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 b1 d1) (t2tb691 a2)
  (t2tb692 x)) (t2tb5205 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  (set (tuple21 c d))))) (w (set (tuple21 (tuple21 a c) (tuple21 b d))))
  (x (set (tuple21 c d))))
  (= (mem22 x
  (tb2t688
  (image (set1 (tuple2 c1 d1)) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))
  (t2tb5207 p) (t2tb686 w))))
  (exists ((a2 (tuple21 (tuple21 a c) (tuple21 b d))))
  (and (mem24 a2 w) (mem
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (set1 (tuple2 c1 d1)))
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (set1 (tuple2 c1 d1))
  (t2tb691 a2) (t2tb689 x)) (t2tb5207 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) (tuple21 c
  d)))) (w (set (tuple21 (tuple21 a c) (tuple21 b d)))) (x (tuple21 c d)))
  (= (mem21 x
  (tb2t689
  (image (tuple2 c1 d1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb5209 p)
  (t2tb686 w))))
  (exists ((a2 (tuple21 (tuple21 a c) (tuple21 b d))))
  (and (mem24 a2 w) (mem
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 c1 d1))
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 c1 d1) (t2tb691 a2)
  (t2tb693 x)) (t2tb5209 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) d)))
  (w (set (tuple21 (tuple21 a c) (tuple21 b d)))) (x d))
  (= (mem20 x
  (tb2t690
  (image d1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb5211 p) (t2tb686 w))))
  (exists ((a2 (tuple21 (tuple21 a c) (tuple21 b d))))
  (and (mem24 a2 w) (mem (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) d1)
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) d1 (t2tb691 a2) (t2tb694 x))
  (t2tb5211 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) (tuple21 a
  c)))) (w (set (tuple21 (tuple21 a c) (tuple21 b d)))) (x (tuple21 a c)))
  (= (mem10 x
  (tb2t129
  (image (tuple2 a1 c1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb5213 p)
  (t2tb686 w))))
  (exists ((a2 (tuple21 (tuple21 a c) (tuple21 b d))))
  (and (mem24 a2 w) (mem
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 a1 c1))
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 a1 c1) (t2tb691 a2)
  (t2tb133 x)) (t2tb5213 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) c)))
  (w (set (tuple21 (tuple21 a c) (tuple21 b d)))) (x c))
  (= (mem7 x
  (tb2t132
  (image c1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb5215 p) (t2tb686 w))))
  (exists ((a2 (tuple21 (tuple21 a c) (tuple21 b d))))
  (and (mem24 a2 w) (mem (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) c1)
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) c1 (t2tb691 a2) (t2tb135 x))
  (t2tb5215 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  (set (tuple21 a b))))) (w (set (tuple21 (tuple21 a c) (tuple21 b d))))
  (x (set (tuple21 a b))))
  (= (mem4 x
  (tb2t10
  (image (set1 (tuple2 a1 b1)) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))
  (t2tb5217 p) (t2tb686 w))))
  (exists ((a2 (tuple21 (tuple21 a c) (tuple21 b d))))
  (and (mem24 a2 w) (mem
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (set1 (tuple2 a1 b1)))
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (set1 (tuple2 a1 b1))
  (t2tb691 a2) (t2tb11 x)) (t2tb5217 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) (tuple21 a
  b)))) (w (set (tuple21 (tuple21 a c) (tuple21 b d)))) (x (tuple21 a b)))
  (= (mem3 x
  (tb2t11
  (image (tuple2 a1 b1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb5220 p)
  (t2tb686 w))))
  (exists ((a2 (tuple21 (tuple21 a c) (tuple21 b d))))
  (and (mem24 a2 w) (mem
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 a1 b1))
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 a1 b1) (t2tb691 a2)
  (t2tb13 x)) (t2tb5220 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) b)))
  (w (set (tuple21 (tuple21 a c) (tuple21 b d)))) (x b))
  (= (mem2 x
  (tb2t12
  (image b1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb5221 p) (t2tb686 w))))
  (exists ((a2 (tuple21 (tuple21 a c) (tuple21 b d))))
  (and (mem24 a2 w) (mem (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) b1)
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) b1 (t2tb691 a2) (t2tb14 x))
  (t2tb5221 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) a)))
  (w (set (tuple21 (tuple21 a c) (tuple21 b d)))) (x a))
  (= (mem1 x
  (tb2t1
  (image a1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb5223 p) (t2tb686 w))))
  (exists ((a2 (tuple21 (tuple21 a c) (tuple21 b d))))
  (and (mem24 a2 w) (mem (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) a1)
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) a1 (t2tb691 a2) (t2tb2 x))
  (t2tb5223 p)))))))

;; mem_image
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (w (set (tuple21 (tuple21 a c) (tuple21 b d)))) (x uni))
  (= (mem b2 x
  (image b2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) p (t2tb686 w)))
  (exists ((a2 (tuple21 (tuple21 a c) (tuple21 b d))))
  (and (mem24 a2 w) (mem (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) b2)
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) b2 (t2tb691 a2) x) p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 b d) (tuple21 (tuple21 a c) (tuple21 b
  d))))) (w (set (tuple21 b d))) (x (tuple21 (tuple21 a c) (tuple21 b d))))
  (= (mem24 x
  (tb2t686
  (image (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 b1 d1) (t2tb5225 p)
  (t2tb687 w))))
  (exists ((a2 (tuple21 b d)))
  (and (mem23 a2 w) (mem
  (tuple2 (tuple2 b1 d1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
  (Tuple2 (tuple2 b1 d1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb692 a2)
  (t2tb691 x)) (t2tb5225 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 b d) (tuple21 b d)))) (w (set (tuple21 b
  d))) (x (tuple21 b d)))
  (= (mem23 x
  (tb2t687 (image (tuple2 b1 d1) (tuple2 b1 d1) (t2tb5227 p) (t2tb687 w))))
  (exists ((a2 (tuple21 b d)))
  (and (mem23 a2 w) (mem (tuple2 (tuple2 b1 d1) (tuple2 b1 d1))
  (Tuple2 (tuple2 b1 d1) (tuple2 b1 d1) (t2tb692 a2) (t2tb692 x))
  (t2tb5227 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 b d) (set (tuple21 c d)))))
  (w (set (tuple21 b d))) (x (set (tuple21 c d))))
  (= (mem22 x
  (tb2t688
  (image (set1 (tuple2 c1 d1)) (tuple2 b1 d1) (t2tb5229 p) (t2tb687 w))))
  (exists ((a2 (tuple21 b d)))
  (and (mem23 a2 w) (mem (tuple2 (tuple2 b1 d1) (set1 (tuple2 c1 d1)))
  (Tuple2 (tuple2 b1 d1) (set1 (tuple2 c1 d1)) (t2tb692 a2) (t2tb689 x))
  (t2tb5229 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 b d) (tuple21 c d)))) (w (set (tuple21 b
  d))) (x (tuple21 c d)))
  (= (mem21 x
  (tb2t689 (image (tuple2 c1 d1) (tuple2 b1 d1) (t2tb5231 p) (t2tb687 w))))
  (exists ((a2 (tuple21 b d)))
  (and (mem23 a2 w) (mem (tuple2 (tuple2 b1 d1) (tuple2 c1 d1))
  (Tuple2 (tuple2 b1 d1) (tuple2 c1 d1) (t2tb692 a2) (t2tb693 x))
  (t2tb5231 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 b d) d))) (w (set (tuple21 b d))) (x d))
  (= (mem20 x (tb2t690 (image d1 (tuple2 b1 d1) (t2tb5234 p) (t2tb687 w))))
  (exists ((a2 (tuple21 b d)))
  (and (mem23 a2 w) (mem (tuple2 (tuple2 b1 d1) d1)
  (Tuple2 (tuple2 b1 d1) d1 (t2tb692 a2) (t2tb694 x)) (t2tb5234 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 b d) (tuple21 a c)))) (w (set (tuple21 b
  d))) (x (tuple21 a c)))
  (= (mem10 x
  (tb2t129 (image (tuple2 a1 c1) (tuple2 b1 d1) (t2tb755 p) (t2tb687 w))))
  (exists ((a2 (tuple21 b d)))
  (and (mem23 a2 w) (mem (tuple2 (tuple2 b1 d1) (tuple2 a1 c1))
  (Tuple2 (tuple2 b1 d1) (tuple2 a1 c1) (t2tb692 a2) (t2tb133 x))
  (t2tb755 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 b d) c))) (w (set (tuple21 b d))) (x c))
  (= (mem7 x (tb2t132 (image c1 (tuple2 b1 d1) (t2tb5235 p) (t2tb687 w))))
  (exists ((a2 (tuple21 b d)))
  (and (mem23 a2 w) (mem (tuple2 (tuple2 b1 d1) c1)
  (Tuple2 (tuple2 b1 d1) c1 (t2tb692 a2) (t2tb135 x)) (t2tb5235 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 b d) (set (tuple21 a b)))))
  (w (set (tuple21 b d))) (x (set (tuple21 a b))))
  (= (mem4 x
  (tb2t10
  (image (set1 (tuple2 a1 b1)) (tuple2 b1 d1) (t2tb5237 p) (t2tb687 w))))
  (exists ((a2 (tuple21 b d)))
  (and (mem23 a2 w) (mem (tuple2 (tuple2 b1 d1) (set1 (tuple2 a1 b1)))
  (Tuple2 (tuple2 b1 d1) (set1 (tuple2 a1 b1)) (t2tb692 a2) (t2tb11 x))
  (t2tb5237 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 b d) (tuple21 a b)))) (w (set (tuple21 b
  d))) (x (tuple21 a b)))
  (= (mem3 x
  (tb2t11 (image (tuple2 a1 b1) (tuple2 b1 d1) (t2tb5239 p) (t2tb687 w))))
  (exists ((a2 (tuple21 b d)))
  (and (mem23 a2 w) (mem (tuple2 (tuple2 b1 d1) (tuple2 a1 b1))
  (Tuple2 (tuple2 b1 d1) (tuple2 a1 b1) (t2tb692 a2) (t2tb13 x))
  (t2tb5239 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 b d) b))) (w (set (tuple21 b d))) (x b))
  (= (mem2 x (tb2t12 (image b1 (tuple2 b1 d1) (t2tb5241 p) (t2tb687 w))))
  (exists ((a2 (tuple21 b d)))
  (and (mem23 a2 w) (mem (tuple2 (tuple2 b1 d1) b1)
  (Tuple2 (tuple2 b1 d1) b1 (t2tb692 a2) (t2tb14 x)) (t2tb5241 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 b d) a))) (w (set (tuple21 b d))) (x a))
  (= (mem1 x (tb2t1 (image a1 (tuple2 b1 d1) (t2tb5243 p) (t2tb687 w))))
  (exists ((a2 (tuple21 b d)))
  (and (mem23 a2 w) (mem (tuple2 (tuple2 b1 d1) a1)
  (Tuple2 (tuple2 b1 d1) a1 (t2tb692 a2) (t2tb2 x)) (t2tb5243 p)))))))

;; mem_image
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (w (set (tuple21 b d))) (x uni))
  (= (mem b2 x (image b2 (tuple2 b1 d1) p (t2tb687 w)))
  (exists ((a2 (tuple21 b d)))
  (and (mem23 a2 w) (mem (tuple2 (tuple2 b1 d1) b2)
  (Tuple2 (tuple2 b1 d1) b2 (t2tb692 a2) x) p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 c d)) (tuple21 (tuple21 a c)
  (tuple21 b d))))) (w (set (set (tuple21 c d)))) (x (tuple21 (tuple21 a c)
  (tuple21 b d))))
  (= (mem24 x
  (tb2t686
  (image (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (set1 (tuple2 c1 d1))
  (t2tb5245 p) (t2tb688 w))))
  (exists ((a2 (set (tuple21 c d))))
  (and (mem22 a2 w) (mem
  (tuple2 (set1 (tuple2 c1 d1)) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
  (Tuple2 (set1 (tuple2 c1 d1)) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))
  (t2tb689 a2) (t2tb691 x)) (t2tb5245 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 c d)) (tuple21 b d))))
  (w (set (set (tuple21 c d)))) (x (tuple21 b d)))
  (= (mem23 x
  (tb2t687
  (image (tuple2 b1 d1) (set1 (tuple2 c1 d1)) (t2tb5248 p) (t2tb688 w))))
  (exists ((a2 (set (tuple21 c d))))
  (and (mem22 a2 w) (mem (tuple2 (set1 (tuple2 c1 d1)) (tuple2 b1 d1))
  (Tuple2 (set1 (tuple2 c1 d1)) (tuple2 b1 d1) (t2tb689 a2) (t2tb692 x))
  (t2tb5248 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 c d)) (set (tuple21 c d)))))
  (w (set (set (tuple21 c d)))) (x (set (tuple21 c d))))
  (= (mem22 x
  (tb2t688
  (image (set1 (tuple2 c1 d1)) (set1 (tuple2 c1 d1)) (t2tb5249 p)
  (t2tb688 w))))
  (exists ((a2 (set (tuple21 c d))))
  (and (mem22 a2 w) (mem (tuple2 (set1 (tuple2 c1 d1)) (set1 (tuple2 c1 d1)))
  (Tuple2 (set1 (tuple2 c1 d1)) (set1 (tuple2 c1 d1)) (t2tb689 a2)
  (t2tb689 x)) (t2tb5249 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 c d)) (tuple21 c d))))
  (w (set (set (tuple21 c d)))) (x (tuple21 c d)))
  (= (mem21 x
  (tb2t689
  (image (tuple2 c1 d1) (set1 (tuple2 c1 d1)) (t2tb5251 p) (t2tb688 w))))
  (exists ((a2 (set (tuple21 c d))))
  (and (mem22 a2 w) (mem (tuple2 (set1 (tuple2 c1 d1)) (tuple2 c1 d1))
  (Tuple2 (set1 (tuple2 c1 d1)) (tuple2 c1 d1) (t2tb689 a2) (t2tb693 x))
  (t2tb5251 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 c d)) d))) (w (set (set (tuple21 c
  d)))) (x d))
  (= (mem20 x
  (tb2t690 (image d1 (set1 (tuple2 c1 d1)) (t2tb5253 p) (t2tb688 w))))
  (exists ((a2 (set (tuple21 c d))))
  (and (mem22 a2 w) (mem (tuple2 (set1 (tuple2 c1 d1)) d1)
  (Tuple2 (set1 (tuple2 c1 d1)) d1 (t2tb689 a2) (t2tb694 x)) (t2tb5253 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 c d)) (tuple21 a c))))
  (w (set (set (tuple21 c d)))) (x (tuple21 a c)))
  (= (mem10 x
  (tb2t129
  (image (tuple2 a1 c1) (set1 (tuple2 c1 d1)) (t2tb5255 p) (t2tb688 w))))
  (exists ((a2 (set (tuple21 c d))))
  (and (mem22 a2 w) (mem (tuple2 (set1 (tuple2 c1 d1)) (tuple2 a1 c1))
  (Tuple2 (set1 (tuple2 c1 d1)) (tuple2 a1 c1) (t2tb689 a2) (t2tb133 x))
  (t2tb5255 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 c d)) c))) (w (set (set (tuple21 c
  d)))) (x c))
  (= (mem7 x
  (tb2t132 (image c1 (set1 (tuple2 c1 d1)) (t2tb5257 p) (t2tb688 w))))
  (exists ((a2 (set (tuple21 c d))))
  (and (mem22 a2 w) (mem (tuple2 (set1 (tuple2 c1 d1)) c1)
  (Tuple2 (set1 (tuple2 c1 d1)) c1 (t2tb689 a2) (t2tb135 x)) (t2tb5257 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 c d)) (set (tuple21 a b)))))
  (w (set (set (tuple21 c d)))) (x (set (tuple21 a b))))
  (= (mem4 x
  (tb2t10
  (image (set1 (tuple2 a1 b1)) (set1 (tuple2 c1 d1)) (t2tb5259 p)
  (t2tb688 w))))
  (exists ((a2 (set (tuple21 c d))))
  (and (mem22 a2 w) (mem (tuple2 (set1 (tuple2 c1 d1)) (set1 (tuple2 a1 b1)))
  (Tuple2 (set1 (tuple2 c1 d1)) (set1 (tuple2 a1 b1)) (t2tb689 a2)
  (t2tb11 x)) (t2tb5259 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 c d)) (tuple21 a b))))
  (w (set (set (tuple21 c d)))) (x (tuple21 a b)))
  (= (mem3 x
  (tb2t11
  (image (tuple2 a1 b1) (set1 (tuple2 c1 d1)) (t2tb5261 p) (t2tb688 w))))
  (exists ((a2 (set (tuple21 c d))))
  (and (mem22 a2 w) (mem (tuple2 (set1 (tuple2 c1 d1)) (tuple2 a1 b1))
  (Tuple2 (set1 (tuple2 c1 d1)) (tuple2 a1 b1) (t2tb689 a2) (t2tb13 x))
  (t2tb5261 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 c d)) b))) (w (set (set (tuple21 c
  d)))) (x b))
  (= (mem2 x
  (tb2t12 (image b1 (set1 (tuple2 c1 d1)) (t2tb5264 p) (t2tb688 w))))
  (exists ((a2 (set (tuple21 c d))))
  (and (mem22 a2 w) (mem (tuple2 (set1 (tuple2 c1 d1)) b1)
  (Tuple2 (set1 (tuple2 c1 d1)) b1 (t2tb689 a2) (t2tb14 x)) (t2tb5264 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 c d)) a))) (w (set (set (tuple21 c
  d)))) (x a))
  (= (mem1 x
  (tb2t1 (image a1 (set1 (tuple2 c1 d1)) (t2tb5265 p) (t2tb688 w))))
  (exists ((a2 (set (tuple21 c d))))
  (and (mem22 a2 w) (mem (tuple2 (set1 (tuple2 c1 d1)) a1)
  (Tuple2 (set1 (tuple2 c1 d1)) a1 (t2tb689 a2) (t2tb2 x)) (t2tb5265 p)))))))

;; mem_image
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (w (set (set (tuple21 c d)))) (x uni))
  (= (mem b2 x (image b2 (set1 (tuple2 c1 d1)) p (t2tb688 w)))
  (exists ((a2 (set (tuple21 c d))))
  (and (mem22 a2 w) (mem (tuple2 (set1 (tuple2 c1 d1)) b2)
  (Tuple2 (set1 (tuple2 c1 d1)) b2 (t2tb689 a2) x) p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 c d) (tuple21 (tuple21 a c) (tuple21 b
  d))))) (w (set (tuple21 c d))) (x (tuple21 (tuple21 a c) (tuple21 b d))))
  (= (mem24 x
  (tb2t686
  (image (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 c1 d1) (t2tb5267 p)
  (t2tb689 w))))
  (exists ((a2 (tuple21 c d)))
  (and (mem21 a2 w) (mem
  (tuple2 (tuple2 c1 d1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
  (Tuple2 (tuple2 c1 d1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb693 a2)
  (t2tb691 x)) (t2tb5267 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 c d) (tuple21 b d)))) (w (set (tuple21 c
  d))) (x (tuple21 b d)))
  (= (mem23 x
  (tb2t687 (image (tuple2 b1 d1) (tuple2 c1 d1) (t2tb5269 p) (t2tb689 w))))
  (exists ((a2 (tuple21 c d)))
  (and (mem21 a2 w) (mem (tuple2 (tuple2 c1 d1) (tuple2 b1 d1))
  (Tuple2 (tuple2 c1 d1) (tuple2 b1 d1) (t2tb693 a2) (t2tb692 x))
  (t2tb5269 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 c d) (set (tuple21 c d)))))
  (w (set (tuple21 c d))) (x (set (tuple21 c d))))
  (= (mem22 x
  (tb2t688
  (image (set1 (tuple2 c1 d1)) (tuple2 c1 d1) (t2tb5271 p) (t2tb689 w))))
  (exists ((a2 (tuple21 c d)))
  (and (mem21 a2 w) (mem (tuple2 (tuple2 c1 d1) (set1 (tuple2 c1 d1)))
  (Tuple2 (tuple2 c1 d1) (set1 (tuple2 c1 d1)) (t2tb693 a2) (t2tb689 x))
  (t2tb5271 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 c d) (tuple21 c d)))) (w (set (tuple21 c
  d))) (x (tuple21 c d)))
  (= (mem21 x
  (tb2t689 (image (tuple2 c1 d1) (tuple2 c1 d1) (t2tb5273 p) (t2tb689 w))))
  (exists ((a2 (tuple21 c d)))
  (and (mem21 a2 w) (mem (tuple2 (tuple2 c1 d1) (tuple2 c1 d1))
  (Tuple2 (tuple2 c1 d1) (tuple2 c1 d1) (t2tb693 a2) (t2tb693 x))
  (t2tb5273 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 c d) d))) (w (set (tuple21 c d))) (x d))
  (= (mem20 x (tb2t690 (image d1 (tuple2 c1 d1) (t2tb5275 p) (t2tb689 w))))
  (exists ((a2 (tuple21 c d)))
  (and (mem21 a2 w) (mem (tuple2 (tuple2 c1 d1) d1)
  (Tuple2 (tuple2 c1 d1) d1 (t2tb693 a2) (t2tb694 x)) (t2tb5275 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 c d) (tuple21 a c)))) (w (set (tuple21 c
  d))) (x (tuple21 a c)))
  (= (mem10 x
  (tb2t129 (image (tuple2 a1 c1) (tuple2 c1 d1) (t2tb5278 p) (t2tb689 w))))
  (exists ((a2 (tuple21 c d)))
  (and (mem21 a2 w) (mem (tuple2 (tuple2 c1 d1) (tuple2 a1 c1))
  (Tuple2 (tuple2 c1 d1) (tuple2 a1 c1) (t2tb693 a2) (t2tb133 x))
  (t2tb5278 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 c d) c))) (w (set (tuple21 c d))) (x c))
  (= (mem7 x (tb2t132 (image c1 (tuple2 c1 d1) (t2tb5279 p) (t2tb689 w))))
  (exists ((a2 (tuple21 c d)))
  (and (mem21 a2 w) (mem (tuple2 (tuple2 c1 d1) c1)
  (Tuple2 (tuple2 c1 d1) c1 (t2tb693 a2) (t2tb135 x)) (t2tb5279 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 c d) (set (tuple21 a b)))))
  (w (set (tuple21 c d))) (x (set (tuple21 a b))))
  (= (mem4 x
  (tb2t10
  (image (set1 (tuple2 a1 b1)) (tuple2 c1 d1) (t2tb5281 p) (t2tb689 w))))
  (exists ((a2 (tuple21 c d)))
  (and (mem21 a2 w) (mem (tuple2 (tuple2 c1 d1) (set1 (tuple2 a1 b1)))
  (Tuple2 (tuple2 c1 d1) (set1 (tuple2 a1 b1)) (t2tb693 a2) (t2tb11 x))
  (t2tb5281 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 c d) (tuple21 a b)))) (w (set (tuple21 c
  d))) (x (tuple21 a b)))
  (= (mem3 x
  (tb2t11 (image (tuple2 a1 b1) (tuple2 c1 d1) (t2tb5283 p) (t2tb689 w))))
  (exists ((a2 (tuple21 c d)))
  (and (mem21 a2 w) (mem (tuple2 (tuple2 c1 d1) (tuple2 a1 b1))
  (Tuple2 (tuple2 c1 d1) (tuple2 a1 b1) (t2tb693 a2) (t2tb13 x))
  (t2tb5283 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 c d) b))) (w (set (tuple21 c d))) (x b))
  (= (mem2 x (tb2t12 (image b1 (tuple2 c1 d1) (t2tb5285 p) (t2tb689 w))))
  (exists ((a2 (tuple21 c d)))
  (and (mem21 a2 w) (mem (tuple2 (tuple2 c1 d1) b1)
  (Tuple2 (tuple2 c1 d1) b1 (t2tb693 a2) (t2tb14 x)) (t2tb5285 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 c d) a))) (w (set (tuple21 c d))) (x a))
  (= (mem1 x (tb2t1 (image a1 (tuple2 c1 d1) (t2tb5287 p) (t2tb689 w))))
  (exists ((a2 (tuple21 c d)))
  (and (mem21 a2 w) (mem (tuple2 (tuple2 c1 d1) a1)
  (Tuple2 (tuple2 c1 d1) a1 (t2tb693 a2) (t2tb2 x)) (t2tb5287 p)))))))

;; mem_image
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (w (set (tuple21 c d))) (x uni))
  (= (mem b2 x (image b2 (tuple2 c1 d1) p (t2tb689 w)))
  (exists ((a2 (tuple21 c d)))
  (and (mem21 a2 w) (mem (tuple2 (tuple2 c1 d1) b2)
  (Tuple2 (tuple2 c1 d1) b2 (t2tb693 a2) x) p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 d (tuple21 (tuple21 a c) (tuple21 b d)))))
  (w (set d)) (x (tuple21 (tuple21 a c) (tuple21 b d))))
  (= (mem24 x
  (tb2t686
  (image (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) d1 (t2tb5289 p) (t2tb690 w))))
  (exists ((a2 d))
  (and (mem20 a2 w) (mem (tuple2 d1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
  (Tuple2 d1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb694 a2) (t2tb691 x))
  (t2tb5289 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 d (tuple21 b d)))) (w (set d)) (x (tuple21 b d)))
  (= (mem23 x (tb2t687 (image (tuple2 b1 d1) d1 (t2tb5292 p) (t2tb690 w))))
  (exists ((a2 d))
  (and (mem20 a2 w) (mem (tuple2 d1 (tuple2 b1 d1))
  (Tuple2 d1 (tuple2 b1 d1) (t2tb694 a2) (t2tb692 x)) (t2tb5292 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 d (set (tuple21 c d))))) (w (set d))
  (x (set (tuple21 c d))))
  (= (mem22 x
  (tb2t688 (image (set1 (tuple2 c1 d1)) d1 (t2tb5293 p) (t2tb690 w))))
  (exists ((a2 d))
  (and (mem20 a2 w) (mem (tuple2 d1 (set1 (tuple2 c1 d1)))
  (Tuple2 d1 (set1 (tuple2 c1 d1)) (t2tb694 a2) (t2tb689 x)) (t2tb5293 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 d (tuple21 c d)))) (w (set d)) (x (tuple21 c d)))
  (= (mem21 x (tb2t689 (image (tuple2 c1 d1) d1 (t2tb5295 p) (t2tb690 w))))
  (exists ((a2 d))
  (and (mem20 a2 w) (mem (tuple2 d1 (tuple2 c1 d1))
  (Tuple2 d1 (tuple2 c1 d1) (t2tb694 a2) (t2tb693 x)) (t2tb5295 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 d d))) (w (set d)) (x d))
  (= (mem20 x (tb2t690 (image d1 d1 (t2tb5297 p) (t2tb690 w))))
  (exists ((a2 d))
  (and (mem20 a2 w) (mem (tuple2 d1 d1)
  (Tuple2 d1 d1 (t2tb694 a2) (t2tb694 x)) (t2tb5297 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 d (tuple21 a c)))) (w (set d)) (x (tuple21 a c)))
  (= (mem10 x (tb2t129 (image (tuple2 a1 c1) d1 (t2tb5299 p) (t2tb690 w))))
  (exists ((a2 d))
  (and (mem20 a2 w) (mem (tuple2 d1 (tuple2 a1 c1))
  (Tuple2 d1 (tuple2 a1 c1) (t2tb694 a2) (t2tb133 x)) (t2tb5299 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 d c))) (w (set d)) (x c))
  (= (mem7 x (tb2t132 (image c1 d1 (t2tb829 p) (t2tb690 w))))
  (exists ((a2 d))
  (and (mem20 a2 w) (mem (tuple2 d1 c1)
  (Tuple2 d1 c1 (t2tb694 a2) (t2tb135 x)) (t2tb829 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 d (set (tuple21 a b))))) (w (set d))
  (x (set (tuple21 a b))))
  (= (mem4 x
  (tb2t10 (image (set1 (tuple2 a1 b1)) d1 (t2tb5301 p) (t2tb690 w))))
  (exists ((a2 d))
  (and (mem20 a2 w) (mem (tuple2 d1 (set1 (tuple2 a1 b1)))
  (Tuple2 d1 (set1 (tuple2 a1 b1)) (t2tb694 a2) (t2tb11 x)) (t2tb5301 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 d (tuple21 a b)))) (w (set d)) (x (tuple21 a b)))
  (= (mem3 x (tb2t11 (image (tuple2 a1 b1) d1 (t2tb5303 p) (t2tb690 w))))
  (exists ((a2 d))
  (and (mem20 a2 w) (mem (tuple2 d1 (tuple2 a1 b1))
  (Tuple2 d1 (tuple2 a1 b1) (t2tb694 a2) (t2tb13 x)) (t2tb5303 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 d b))) (w (set d)) (x b))
  (= (mem2 x (tb2t12 (image b1 d1 (t2tb5305 p) (t2tb690 w))))
  (exists ((a2 d))
  (and (mem20 a2 w) (mem (tuple2 d1 b1)
  (Tuple2 d1 b1 (t2tb694 a2) (t2tb14 x)) (t2tb5305 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 d a))) (w (set d)) (x a))
  (= (mem1 x (tb2t1 (image a1 d1 (t2tb5308 p) (t2tb690 w))))
  (exists ((a2 d))
  (and (mem20 a2 w) (mem (tuple2 d1 a1) (Tuple2 d1 a1 (t2tb694 a2) (t2tb2 x))
  (t2tb5308 p)))))))

;; mem_image
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (w (set d)) (x uni))
  (= (mem b2 x (image b2 d1 p (t2tb690 w)))
  (exists ((a2 d))
  (and (mem20 a2 w) (mem (tuple2 d1 b2) (Tuple2 d1 b2 (t2tb694 a2) x) p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a c) (tuple21 (tuple21 a c) (tuple21 b
  d))))) (w (set (tuple21 a c))) (x (tuple21 (tuple21 a c) (tuple21 b d))))
  (= (mem24 x
  (tb2t686
  (image (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 a1 c1) (t2tb5309 p)
  (t2tb129 w))))
  (exists ((a2 (tuple21 a c)))
  (and (mem10 a2 w) (mem
  (tuple2 (tuple2 a1 c1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
  (Tuple2 (tuple2 a1 c1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb133 a2)
  (t2tb691 x)) (t2tb5309 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a c) (tuple21 b d)))) (w (set (tuple21 a
  c))) (x (tuple21 b d)))
  (= (mem23 x (image11 p w))
  (exists ((a2 (tuple21 a c)))
  (and (mem10 a2 w) (mem24
  (tb2t691 (Tuple2 (tuple2 a1 c1) (tuple2 b1 d1) (t2tb133 a2) (t2tb692 x)))
  p))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a c) (set (tuple21 c d)))))
  (w (set (tuple21 a c))) (x (set (tuple21 c d))))
  (= (mem22 x
  (tb2t688
  (image (set1 (tuple2 c1 d1)) (tuple2 a1 c1) (t2tb5311 p) (t2tb129 w))))
  (exists ((a2 (tuple21 a c)))
  (and (mem10 a2 w) (mem (tuple2 (tuple2 a1 c1) (set1 (tuple2 c1 d1)))
  (Tuple2 (tuple2 a1 c1) (set1 (tuple2 c1 d1)) (t2tb133 a2) (t2tb689 x))
  (t2tb5311 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a c) (tuple21 c d)))) (w (set (tuple21 a
  c))) (x (tuple21 c d)))
  (= (mem21 x
  (tb2t689 (image (tuple2 c1 d1) (tuple2 a1 c1) (t2tb5313 p) (t2tb129 w))))
  (exists ((a2 (tuple21 a c)))
  (and (mem10 a2 w) (mem (tuple2 (tuple2 a1 c1) (tuple2 c1 d1))
  (Tuple2 (tuple2 a1 c1) (tuple2 c1 d1) (t2tb133 a2) (t2tb693 x))
  (t2tb5313 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a c) d))) (w (set (tuple21 a c))) (x d))
  (= (mem20 x (tb2t690 (image d1 (tuple2 a1 c1) (t2tb5315 p) (t2tb129 w))))
  (exists ((a2 (tuple21 a c)))
  (and (mem10 a2 w) (mem (tuple2 (tuple2 a1 c1) d1)
  (Tuple2 (tuple2 a1 c1) d1 (t2tb133 a2) (t2tb694 x)) (t2tb5315 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a c) (tuple21 a c)))) (w (set (tuple21 a
  c))) (x (tuple21 a c)))
  (= (mem10 x
  (tb2t129 (image (tuple2 a1 c1) (tuple2 a1 c1) (t2tb157 p) (t2tb129 w))))
  (exists ((a2 (tuple21 a c)))
  (and (mem10 a2 w) (mem (tuple2 (tuple2 a1 c1) (tuple2 a1 c1))
  (Tuple2 (tuple2 a1 c1) (tuple2 a1 c1) (t2tb133 a2) (t2tb133 x))
  (t2tb157 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a c) c))) (w (set (tuple21 a c))) (x c))
  (= (mem7 x (tb2t132 (image c1 (tuple2 a1 c1) (t2tb162 p) (t2tb129 w))))
  (exists ((a2 (tuple21 a c)))
  (and (mem10 a2 w) (mem (tuple2 (tuple2 a1 c1) c1)
  (Tuple2 (tuple2 a1 c1) c1 (t2tb133 a2) (t2tb135 x)) (t2tb162 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a c) (set (tuple21 a b)))))
  (w (set (tuple21 a c))) (x (set (tuple21 a b))))
  (= (mem4 x
  (tb2t10
  (image (set1 (tuple2 a1 b1)) (tuple2 a1 c1) (t2tb164 p) (t2tb129 w))))
  (exists ((a2 (tuple21 a c)))
  (and (mem10 a2 w) (mem (tuple2 (tuple2 a1 c1) (set1 (tuple2 a1 b1)))
  (Tuple2 (tuple2 a1 c1) (set1 (tuple2 a1 b1)) (t2tb133 a2) (t2tb11 x))
  (t2tb164 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a c) (tuple21 a b)))) (w (set (tuple21 a
  c))) (x (tuple21 a b)))
  (= (mem3 x
  (tb2t11 (image (tuple2 a1 b1) (tuple2 a1 c1) (t2tb166 p) (t2tb129 w))))
  (exists ((a2 (tuple21 a c)))
  (and (mem10 a2 w) (mem (tuple2 (tuple2 a1 c1) (tuple2 a1 b1))
  (Tuple2 (tuple2 a1 c1) (tuple2 a1 b1) (t2tb133 a2) (t2tb13 x))
  (t2tb166 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a c) b))) (w (set (tuple21 a c))) (x b))
  (= (mem2 x (tb2t12 (image b1 (tuple2 a1 c1) (t2tb168 p) (t2tb129 w))))
  (exists ((a2 (tuple21 a c)))
  (and (mem10 a2 w) (mem (tuple2 (tuple2 a1 c1) b1)
  (Tuple2 (tuple2 a1 c1) b1 (t2tb133 a2) (t2tb14 x)) (t2tb168 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a c) a))) (w (set (tuple21 a c))) (x a))
  (= (mem1 x (tb2t1 (image a1 (tuple2 a1 c1) (t2tb170 p) (t2tb129 w))))
  (exists ((a2 (tuple21 a c)))
  (and (mem10 a2 w) (mem (tuple2 (tuple2 a1 c1) a1)
  (Tuple2 (tuple2 a1 c1) a1 (t2tb133 a2) (t2tb2 x)) (t2tb170 p)))))))

;; mem_image
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (w (set (tuple21 a c))) (x uni))
  (= (mem b2 x (image b2 (tuple2 a1 c1) p (t2tb129 w)))
  (exists ((a2 (tuple21 a c)))
  (and (mem10 a2 w) (mem (tuple2 (tuple2 a1 c1) b2)
  (Tuple2 (tuple2 a1 c1) b2 (t2tb133 a2) x) p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 c (tuple21 (tuple21 a c) (tuple21 b d)))))
  (w (set c)) (x (tuple21 (tuple21 a c) (tuple21 b d))))
  (= (mem24 x
  (tb2t686
  (image (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) c1 (t2tb5317 p) (t2tb132 w))))
  (exists ((a2 c))
  (and (mem7 a2 w) (mem (tuple2 c1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
  (Tuple2 c1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb135 a2) (t2tb691 x))
  (t2tb5317 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 c (tuple21 b d)))) (w (set c)) (x (tuple21 b d)))
  (= (mem23 x (tb2t687 (image (tuple2 b1 d1) c1 (t2tb5319 p) (t2tb132 w))))
  (exists ((a2 c))
  (and (mem7 a2 w) (mem (tuple2 c1 (tuple2 b1 d1))
  (Tuple2 c1 (tuple2 b1 d1) (t2tb135 a2) (t2tb692 x)) (t2tb5319 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 c (set (tuple21 c d))))) (w (set c))
  (x (set (tuple21 c d))))
  (= (mem22 x
  (tb2t688 (image (set1 (tuple2 c1 d1)) c1 (t2tb5322 p) (t2tb132 w))))
  (exists ((a2 c))
  (and (mem7 a2 w) (mem (tuple2 c1 (set1 (tuple2 c1 d1)))
  (Tuple2 c1 (set1 (tuple2 c1 d1)) (t2tb135 a2) (t2tb689 x)) (t2tb5322 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 c (tuple21 c d)))) (w (set c)) (x (tuple21 c d)))
  (= (mem21 x (tb2t689 (image (tuple2 c1 d1) c1 (t2tb5323 p) (t2tb132 w))))
  (exists ((a2 c))
  (and (mem7 a2 w) (mem (tuple2 c1 (tuple2 c1 d1))
  (Tuple2 c1 (tuple2 c1 d1) (t2tb135 a2) (t2tb693 x)) (t2tb5323 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 c d))) (w (set c)) (x d))
  (= (mem20 x (image9 p w))
  (exists ((a2 c))
  (and (mem7 a2 w) (mem21 (tb2t693 (Tuple2 c1 d1 (t2tb135 a2) (t2tb694 x)))
  p))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 c (tuple21 a c)))) (w (set c)) (x (tuple21 a c)))
  (= (mem10 x (tb2t129 (image (tuple2 a1 c1) c1 (t2tb210 p) (t2tb132 w))))
  (exists ((a2 c))
  (and (mem7 a2 w) (mem (tuple2 c1 (tuple2 a1 c1))
  (Tuple2 c1 (tuple2 a1 c1) (t2tb135 a2) (t2tb133 x)) (t2tb210 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 c c))) (w (set c)) (x c))
  (= (mem7 x (tb2t132 (image c1 c1 (t2tb216 p) (t2tb132 w))))
  (exists ((a2 c))
  (and (mem7 a2 w) (mem (tuple2 c1 c1)
  (Tuple2 c1 c1 (t2tb135 a2) (t2tb135 x)) (t2tb216 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 c (set (tuple21 a b))))) (w (set c))
  (x (set (tuple21 a b))))
  (= (mem4 x
  (tb2t10 (image (set1 (tuple2 a1 b1)) c1 (t2tb218 p) (t2tb132 w))))
  (exists ((a2 c))
  (and (mem7 a2 w) (mem (tuple2 c1 (set1 (tuple2 a1 b1)))
  (Tuple2 c1 (set1 (tuple2 a1 b1)) (t2tb135 a2) (t2tb11 x)) (t2tb218 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 c (tuple21 a b)))) (w (set c)) (x (tuple21 a b)))
  (= (mem3 x (tb2t11 (image (tuple2 a1 b1) c1 (t2tb220 p) (t2tb132 w))))
  (exists ((a2 c))
  (and (mem7 a2 w) (mem (tuple2 c1 (tuple2 a1 b1))
  (Tuple2 c1 (tuple2 a1 b1) (t2tb135 a2) (t2tb13 x)) (t2tb220 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 c b))) (w (set c)) (x b))
  (= (mem2 x (tb2t12 (image b1 c1 (t2tb222 p) (t2tb132 w))))
  (exists ((a2 c))
  (and (mem7 a2 w) (mem (tuple2 c1 b1) (Tuple2 c1 b1 (t2tb135 a2) (t2tb14 x))
  (t2tb222 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 c a))) (w (set c)) (x a))
  (= (mem1 x (tb2t1 (image a1 c1 (t2tb224 p) (t2tb132 w))))
  (exists ((a2 c))
  (and (mem7 a2 w) (mem (tuple2 c1 a1) (Tuple2 c1 a1 (t2tb135 a2) (t2tb2 x))
  (t2tb224 p)))))))

;; mem_image
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (w (set c)) (x uni))
  (= (mem b2 x (image b2 c1 p (t2tb132 w)))
  (exists ((a2 c))
  (and (mem7 a2 w) (mem (tuple2 c1 b2) (Tuple2 c1 b2 (t2tb135 a2) x) p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a b)) (tuple21 (tuple21 a c)
  (tuple21 b d))))) (w (set (set (tuple21 a b)))) (x (tuple21 (tuple21 a c)
  (tuple21 b d))))
  (= (mem24 x
  (tb2t686
  (image (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (set1 (tuple2 a1 b1))
  (t2tb5325 p) (t2tb10 w))))
  (exists ((a2 (set (tuple21 a b))))
  (and (mem4 a2 w) (mem
  (tuple2 (set1 (tuple2 a1 b1)) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
  (Tuple2 (set1 (tuple2 a1 b1)) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))
  (t2tb11 a2) (t2tb691 x)) (t2tb5325 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a b)) (tuple21 b d))))
  (w (set (set (tuple21 a b)))) (x (tuple21 b d)))
  (= (mem23 x
  (tb2t687
  (image (tuple2 b1 d1) (set1 (tuple2 a1 b1)) (t2tb5327 p) (t2tb10 w))))
  (exists ((a2 (set (tuple21 a b))))
  (and (mem4 a2 w) (mem (tuple2 (set1 (tuple2 a1 b1)) (tuple2 b1 d1))
  (Tuple2 (set1 (tuple2 a1 b1)) (tuple2 b1 d1) (t2tb11 a2) (t2tb692 x))
  (t2tb5327 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a b)) (set (tuple21 c d)))))
  (w (set (set (tuple21 a b)))) (x (set (tuple21 c d))))
  (= (mem22 x
  (tb2t688
  (image (set1 (tuple2 c1 d1)) (set1 (tuple2 a1 b1)) (t2tb5329 p) (t2tb10 w))))
  (exists ((a2 (set (tuple21 a b))))
  (and (mem4 a2 w) (mem (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 c1 d1)))
  (Tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 c1 d1)) (t2tb11 a2)
  (t2tb689 x)) (t2tb5329 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a b)) (tuple21 c d))))
  (w (set (set (tuple21 a b)))) (x (tuple21 c d)))
  (= (mem21 x
  (tb2t689
  (image (tuple2 c1 d1) (set1 (tuple2 a1 b1)) (t2tb5331 p) (t2tb10 w))))
  (exists ((a2 (set (tuple21 a b))))
  (and (mem4 a2 w) (mem (tuple2 (set1 (tuple2 a1 b1)) (tuple2 c1 d1))
  (Tuple2 (set1 (tuple2 a1 b1)) (tuple2 c1 d1) (t2tb11 a2) (t2tb693 x))
  (t2tb5331 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a b)) d))) (w (set (set (tuple21 a
  b)))) (x d))
  (= (mem20 x
  (tb2t690 (image d1 (set1 (tuple2 a1 b1)) (t2tb5333 p) (t2tb10 w))))
  (exists ((a2 (set (tuple21 a b))))
  (and (mem4 a2 w) (mem (tuple2 (set1 (tuple2 a1 b1)) d1)
  (Tuple2 (set1 (tuple2 a1 b1)) d1 (t2tb11 a2) (t2tb694 x)) (t2tb5333 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a b)) (tuple21 a c))))
  (w (set (set (tuple21 a b)))) (x (tuple21 a c)))
  (= (mem10 x
  (tb2t129
  (image (tuple2 a1 c1) (set1 (tuple2 a1 b1)) (t2tb229 p) (t2tb10 w))))
  (exists ((a2 (set (tuple21 a b))))
  (and (mem4 a2 w) (mem (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 c1))
  (Tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 c1) (t2tb11 a2) (t2tb133 x))
  (t2tb229 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a b)) c))) (w (set (set (tuple21 a
  b)))) (x c))
  (= (mem7 x
  (tb2t132 (image c1 (set1 (tuple2 a1 b1)) (t2tb234 p) (t2tb10 w))))
  (exists ((a2 (set (tuple21 a b))))
  (and (mem4 a2 w) (mem (tuple2 (set1 (tuple2 a1 b1)) c1)
  (Tuple2 (set1 (tuple2 a1 b1)) c1 (t2tb11 a2) (t2tb135 x)) (t2tb234 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a b)) (set (tuple21 a b)))))
  (w (set (set (tuple21 a b)))) (x (set (tuple21 a b))))
  (= (mem4 x
  (tb2t10
  (image (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1)) (t2tb15 p) (t2tb10 w))))
  (exists ((a2 (set (tuple21 a b))))
  (and (mem4 a2 w) (mem (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1)))
  (Tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1)) (t2tb11 a2) (t2tb11 x))
  (t2tb15 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a b)) (tuple21 a b))))
  (w (set (set (tuple21 a b)))) (x (tuple21 a b)))
  (= (mem3 x
  (tb2t11 (image (tuple2 a1 b1) (set1 (tuple2 a1 b1)) (t2tb17 p) (t2tb10 w))))
  (exists ((a2 (set (tuple21 a b))))
  (and (mem4 a2 w) (mem (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 b1))
  (Tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 b1) (t2tb11 a2) (t2tb13 x))
  (t2tb17 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a b)) b))) (w (set (set (tuple21 a
  b)))) (x b))
  (= (mem2 x (tb2t12 (image b1 (set1 (tuple2 a1 b1)) (t2tb19 p) (t2tb10 w))))
  (exists ((a2 (set (tuple21 a b))))
  (and (mem4 a2 w) (mem (tuple2 (set1 (tuple2 a1 b1)) b1)
  (Tuple2 (set1 (tuple2 a1 b1)) b1 (t2tb11 a2) (t2tb14 x)) (t2tb19 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a b)) a))) (w (set (set (tuple21 a
  b)))) (x a))
  (= (mem1 x (tb2t1 (image a1 (set1 (tuple2 a1 b1)) (t2tb22 p) (t2tb10 w))))
  (exists ((a2 (set (tuple21 a b))))
  (and (mem4 a2 w) (mem (tuple2 (set1 (tuple2 a1 b1)) a1)
  (Tuple2 (set1 (tuple2 a1 b1)) a1 (t2tb11 a2) (t2tb2 x)) (t2tb22 p)))))))

;; mem_image
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (w (set (set (tuple21 a b)))) (x uni))
  (= (mem b2 x (image b2 (set1 (tuple2 a1 b1)) p (t2tb10 w)))
  (exists ((a2 (set (tuple21 a b))))
  (and (mem4 a2 w) (mem (tuple2 (set1 (tuple2 a1 b1)) b2)
  (Tuple2 (set1 (tuple2 a1 b1)) b2 (t2tb11 a2) x) p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) (tuple21 (tuple21 a c) (tuple21 b
  d))))) (w (set (tuple21 a b))) (x (tuple21 (tuple21 a c) (tuple21 b d))))
  (= (mem24 x
  (tb2t686
  (image (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 a1 b1) (t2tb5335 p)
  (t2tb11 w))))
  (exists ((a2 (tuple21 a b)))
  (and (mem3 a2 w) (mem
  (tuple2 (tuple2 a1 b1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
  (Tuple2 (tuple2 a1 b1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb13 a2)
  (t2tb691 x)) (t2tb5335 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) (tuple21 b d)))) (w (set (tuple21 a
  b))) (x (tuple21 b d)))
  (= (mem23 x
  (tb2t687 (image (tuple2 b1 d1) (tuple2 a1 b1) (t2tb5338 p) (t2tb11 w))))
  (exists ((a2 (tuple21 a b)))
  (and (mem3 a2 w) (mem (tuple2 (tuple2 a1 b1) (tuple2 b1 d1))
  (Tuple2 (tuple2 a1 b1) (tuple2 b1 d1) (t2tb13 a2) (t2tb692 x))
  (t2tb5338 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) (set (tuple21 c d)))))
  (w (set (tuple21 a b))) (x (set (tuple21 c d))))
  (= (mem22 x
  (tb2t688
  (image (set1 (tuple2 c1 d1)) (tuple2 a1 b1) (t2tb5339 p) (t2tb11 w))))
  (exists ((a2 (tuple21 a b)))
  (and (mem3 a2 w) (mem (tuple2 (tuple2 a1 b1) (set1 (tuple2 c1 d1)))
  (Tuple2 (tuple2 a1 b1) (set1 (tuple2 c1 d1)) (t2tb13 a2) (t2tb689 x))
  (t2tb5339 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) (tuple21 c d)))) (w (set (tuple21 a
  b))) (x (tuple21 c d)))
  (= (mem21 x
  (tb2t689 (image (tuple2 c1 d1) (tuple2 a1 b1) (t2tb879 p) (t2tb11 w))))
  (exists ((a2 (tuple21 a b)))
  (and (mem3 a2 w) (mem (tuple2 (tuple2 a1 b1) (tuple2 c1 d1))
  (Tuple2 (tuple2 a1 b1) (tuple2 c1 d1) (t2tb13 a2) (t2tb693 x))
  (t2tb879 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) d))) (w (set (tuple21 a b))) (x d))
  (= (mem20 x (tb2t690 (image d1 (tuple2 a1 b1) (t2tb5341 p) (t2tb11 w))))
  (exists ((a2 (tuple21 a b)))
  (and (mem3 a2 w) (mem (tuple2 (tuple2 a1 b1) d1)
  (Tuple2 (tuple2 a1 b1) d1 (t2tb13 a2) (t2tb694 x)) (t2tb5341 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) (tuple21 a c)))) (w (set (tuple21 a
  b))) (x (tuple21 a c)))
  (= (mem10 x
  (tb2t129 (image (tuple2 a1 c1) (tuple2 a1 b1) (t2tb238 p) (t2tb11 w))))
  (exists ((a2 (tuple21 a b)))
  (and (mem3 a2 w) (mem (tuple2 (tuple2 a1 b1) (tuple2 a1 c1))
  (Tuple2 (tuple2 a1 b1) (tuple2 a1 c1) (t2tb13 a2) (t2tb133 x))
  (t2tb238 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) c))) (w (set (tuple21 a b))) (x c))
  (= (mem7 x (tb2t132 (image c1 (tuple2 a1 b1) (t2tb245 p) (t2tb11 w))))
  (exists ((a2 (tuple21 a b)))
  (and (mem3 a2 w) (mem (tuple2 (tuple2 a1 b1) c1)
  (Tuple2 (tuple2 a1 b1) c1 (t2tb13 a2) (t2tb135 x)) (t2tb245 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) (set (tuple21 a b)))))
  (w (set (tuple21 a b))) (x (set (tuple21 a b))))
  (= (mem4 x
  (tb2t10 (image (set1 (tuple2 a1 b1)) (tuple2 a1 b1) (t2tb23 p) (t2tb11 w))))
  (exists ((a2 (tuple21 a b)))
  (and (mem3 a2 w) (mem (tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 b1)))
  (Tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 b1)) (t2tb13 a2) (t2tb11 x))
  (t2tb23 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) (tuple21 a b)))) (w (set (tuple21 a
  b))) (x (tuple21 a b)))
  (= (mem3 x
  (tb2t11 (image (tuple2 a1 b1) (tuple2 a1 b1) (t2tb25 p) (t2tb11 w))))
  (exists ((a2 (tuple21 a b)))
  (and (mem3 a2 w) (mem (tuple2 (tuple2 a1 b1) (tuple2 a1 b1))
  (Tuple2 (tuple2 a1 b1) (tuple2 a1 b1) (t2tb13 a2) (t2tb13 x)) (t2tb25 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) b))) (w (set (tuple21 a b))) (x b))
  (= (mem2 x (tb2t12 (image b1 (tuple2 a1 b1) (t2tb27 p) (t2tb11 w))))
  (exists ((a2 (tuple21 a b)))
  (and (mem3 a2 w) (mem (tuple2 (tuple2 a1 b1) b1)
  (Tuple2 (tuple2 a1 b1) b1 (t2tb13 a2) (t2tb14 x)) (t2tb27 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) a))) (w (set (tuple21 a b))) (x a))
  (= (mem1 x (tb2t1 (image a1 (tuple2 a1 b1) (t2tb29 p) (t2tb11 w))))
  (exists ((a2 (tuple21 a b)))
  (and (mem3 a2 w) (mem (tuple2 (tuple2 a1 b1) a1)
  (Tuple2 (tuple2 a1 b1) a1 (t2tb13 a2) (t2tb2 x)) (t2tb29 p)))))))

;; mem_image
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (w (set (tuple21 a b))) (x uni))
  (= (mem b2 x (image b2 (tuple2 a1 b1) p (t2tb11 w)))
  (exists ((a2 (tuple21 a b)))
  (and (mem3 a2 w) (mem (tuple2 (tuple2 a1 b1) b2)
  (Tuple2 (tuple2 a1 b1) b2 (t2tb13 a2) x) p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 b (tuple21 (tuple21 a c) (tuple21 b d)))))
  (w (set b)) (x (tuple21 (tuple21 a c) (tuple21 b d))))
  (= (mem24 x
  (tb2t686
  (image (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) b1 (t2tb5343 p) (t2tb12 w))))
  (exists ((a2 b))
  (and (mem2 a2 w) (mem (tuple2 b1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
  (Tuple2 b1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb14 a2) (t2tb691 x))
  (t2tb5343 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 b (tuple21 b d)))) (w (set b)) (x (tuple21 b d)))
  (= (mem23 x (tb2t687 (image (tuple2 b1 d1) b1 (t2tb5345 p) (t2tb12 w))))
  (exists ((a2 b))
  (and (mem2 a2 w) (mem (tuple2 b1 (tuple2 b1 d1))
  (Tuple2 b1 (tuple2 b1 d1) (t2tb14 a2) (t2tb692 x)) (t2tb5345 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 b (set (tuple21 c d))))) (w (set b))
  (x (set (tuple21 c d))))
  (= (mem22 x
  (tb2t688 (image (set1 (tuple2 c1 d1)) b1 (t2tb5347 p) (t2tb12 w))))
  (exists ((a2 b))
  (and (mem2 a2 w) (mem (tuple2 b1 (set1 (tuple2 c1 d1)))
  (Tuple2 b1 (set1 (tuple2 c1 d1)) (t2tb14 a2) (t2tb689 x)) (t2tb5347 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 b (tuple21 c d)))) (w (set b)) (x (tuple21 c d)))
  (= (mem21 x (tb2t689 (image (tuple2 c1 d1) b1 (t2tb891 p) (t2tb12 w))))
  (exists ((a2 b))
  (and (mem2 a2 w) (mem (tuple2 b1 (tuple2 c1 d1))
  (Tuple2 b1 (tuple2 c1 d1) (t2tb14 a2) (t2tb693 x)) (t2tb891 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 b d))) (w (set b)) (x d))
  (= (mem20 x (image10 p w))
  (exists ((a2 b))
  (and (mem2 a2 w) (mem23 (tb2t692 (Tuple2 b1 d1 (t2tb14 a2) (t2tb694 x)))
  p))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 b (tuple21 a c)))) (w (set b)) (x (tuple21 a c)))
  (= (mem10 x (tb2t129 (image (tuple2 a1 c1) b1 (t2tb248 p) (t2tb12 w))))
  (exists ((a2 b))
  (and (mem2 a2 w) (mem (tuple2 b1 (tuple2 a1 c1))
  (Tuple2 b1 (tuple2 a1 c1) (t2tb14 a2) (t2tb133 x)) (t2tb248 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 b c))) (w (set b)) (x c))
  (= (mem7 x (tb2t132 (image c1 b1 (t2tb131 p) (t2tb12 w))))
  (exists ((a2 b))
  (and (mem2 a2 w) (mem (tuple2 b1 c1) (Tuple2 b1 c1 (t2tb14 a2) (t2tb135 x))
  (t2tb131 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 b (set (tuple21 a b))))) (w (set b))
  (x (set (tuple21 a b))))
  (= (mem4 x (tb2t10 (image (set1 (tuple2 a1 b1)) b1 (t2tb31 p) (t2tb12 w))))
  (exists ((a2 b))
  (and (mem2 a2 w) (mem (tuple2 b1 (set1 (tuple2 a1 b1)))
  (Tuple2 b1 (set1 (tuple2 a1 b1)) (t2tb14 a2) (t2tb11 x)) (t2tb31 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 b (tuple21 a b)))) (w (set b)) (x (tuple21 a b)))
  (= (mem3 x (tb2t11 (image (tuple2 a1 b1) b1 (t2tb34 p) (t2tb12 w))))
  (exists ((a2 b))
  (and (mem2 a2 w) (mem (tuple2 b1 (tuple2 a1 b1))
  (Tuple2 b1 (tuple2 a1 b1) (t2tb14 a2) (t2tb13 x)) (t2tb34 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 b b))) (w (set b)) (x b))
  (= (mem2 x (tb2t12 (image b1 b1 (t2tb35 p) (t2tb12 w))))
  (exists ((a2 b))
  (and (mem2 a2 w) (mem (tuple2 b1 b1) (Tuple2 b1 b1 (t2tb14 a2) (t2tb14 x))
  (t2tb35 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 b a))) (w (set b)) (x a))
  (= (mem1 x (tb2t1 (image a1 b1 (t2tb37 p) (t2tb12 w))))
  (exists ((a2 b))
  (and (mem2 a2 w) (mem (tuple2 b1 a1) (Tuple2 b1 a1 (t2tb14 a2) (t2tb2 x))
  (t2tb37 p)))))))

;; mem_image
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (w (set b)) (x uni))
  (= (mem b2 x (image b2 b1 p (t2tb12 w)))
  (exists ((a2 b))
  (and (mem2 a2 w) (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 a2) x) p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 a (tuple21 (tuple21 a c) (tuple21 b d)))))
  (w (set a)) (x (tuple21 (tuple21 a c) (tuple21 b d))))
  (= (mem24 x
  (tb2t686
  (image (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) a1 (t2tb5349 p) (t2tb1 w))))
  (exists ((a2 a))
  (and (mem1 a2 w) (mem (tuple2 a1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
  (Tuple2 a1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb2 a2) (t2tb691 x))
  (t2tb5349 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 a (tuple21 b d)))) (w (set a)) (x (tuple21 b d)))
  (= (mem23 x (tb2t687 (image (tuple2 b1 d1) a1 (t2tb5351 p) (t2tb1 w))))
  (exists ((a2 a))
  (and (mem1 a2 w) (mem (tuple2 a1 (tuple2 b1 d1))
  (Tuple2 a1 (tuple2 b1 d1) (t2tb2 a2) (t2tb692 x)) (t2tb5351 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 a (set (tuple21 c d))))) (w (set a))
  (x (set (tuple21 c d))))
  (= (mem22 x
  (tb2t688 (image (set1 (tuple2 c1 d1)) a1 (t2tb5354 p) (t2tb1 w))))
  (exists ((a2 a))
  (and (mem1 a2 w) (mem (tuple2 a1 (set1 (tuple2 c1 d1)))
  (Tuple2 a1 (set1 (tuple2 c1 d1)) (t2tb2 a2) (t2tb689 x)) (t2tb5354 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 a (tuple21 c d)))) (w (set a)) (x (tuple21 c d)))
  (= (mem21 x (tb2t689 (image (tuple2 c1 d1) a1 (t2tb901 p) (t2tb1 w))))
  (exists ((a2 a))
  (and (mem1 a2 w) (mem (tuple2 a1 (tuple2 c1 d1))
  (Tuple2 a1 (tuple2 c1 d1) (t2tb2 a2) (t2tb693 x)) (t2tb901 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 a d))) (w (set a)) (x d))
  (= (mem20 x (tb2t690 (image d1 a1 (t2tb903 p) (t2tb1 w))))
  (exists ((a2 a))
  (and (mem1 a2 w) (mem (tuple2 a1 d1) (Tuple2 a1 d1 (t2tb2 a2) (t2tb694 x))
  (t2tb903 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 a (tuple21 a c)))) (w (set a)) (x (tuple21 a c)))
  (= (mem10 x (tb2t129 (image (tuple2 a1 c1) a1 (t2tb256 p) (t2tb1 w))))
  (exists ((a2 a))
  (and (mem1 a2 w) (mem (tuple2 a1 (tuple2 a1 c1))
  (Tuple2 a1 (tuple2 a1 c1) (t2tb2 a2) (t2tb133 x)) (t2tb256 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 a c))) (w (set a)) (x c))
  (= (mem7 x (image4 p w))
  (exists ((a2 a))
  (and (mem1 a2 w) (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 a2) (t2tb135 x))) p))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 a (set (tuple21 a b))))) (w (set a))
  (x (set (tuple21 a b))))
  (= (mem4 x (tb2t10 (image (set1 (tuple2 a1 b1)) a1 (t2tb39 p) (t2tb1 w))))
  (exists ((a2 a))
  (and (mem1 a2 w) (mem (tuple2 a1 (set1 (tuple2 a1 b1)))
  (Tuple2 a1 (set1 (tuple2 a1 b1)) (t2tb2 a2) (t2tb11 x)) (t2tb39 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 a (tuple21 a b)))) (w (set a)) (x (tuple21 a b)))
  (= (mem3 x (tb2t11 (image (tuple2 a1 b1) a1 (t2tb41 p) (t2tb1 w))))
  (exists ((a2 a))
  (and (mem1 a2 w) (mem (tuple2 a1 (tuple2 a1 b1))
  (Tuple2 a1 (tuple2 a1 b1) (t2tb2 a2) (t2tb13 x)) (t2tb41 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 a b))) (w (set a)) (x b))
  (= (mem2 x (image1 p w))
  (exists ((a2 a))
  (and (mem1 a2 w) (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 a2) (t2tb14 x))) p))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 a a))) (w (set a)) (x a))
  (= (mem1 x (tb2t1 (image a1 a1 (t2tb4 p) (t2tb1 w))))
  (exists ((a2 a))
  (and (mem1 a2 w) (mem (tuple2 a1 a1) (Tuple2 a1 a1 (t2tb2 a2) (t2tb2 x))
  (t2tb4 p)))))))

;; mem_image
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (w (set a)) (x uni))
  (= (mem b2 x (image b2 a1 p (t2tb1 w)))
  (exists ((a2 a))
  (and (mem1 a2 w) (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 a2) x) p)))))))

;; mem_image
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((p uni) (w uni) (x uni))
  (and
  (=> (mem b2 x (image b2 a2 p w))
  (exists ((a3 uni))
  (and (sort a2 a3)
  (and (mem a2 a3 w) (mem (tuple2 a2 b2) (Tuple2 a2 b2 a3 x) p)))))
  (=>
  (exists ((a3 uni))
  (and (mem a2 a3 w) (mem (tuple2 a2 b2) (Tuple2 a2 b2 a3 x) p))) (mem b2 x
  (image b2 a2 p w)))))))

(declare-fun infix_lspl (ty ty uni uni) uni)

;; infix <+_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (tuple2 a2 b2))
  (infix_lspl b2 a2 x x1)))))

;; mem_overriding
  (assert
  (forall ((b2 ty))
  (forall ((q uni) (p uni) (x (tuple21 (tuple21 a c) (tuple21 b d))) (y uni))
  (= (mem (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) b2)
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) b2 (t2tb691 x) y)
  (infix_lspl b2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) q p))
  (or
  (and (mem (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) b2)
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) b2 (t2tb691 x) y) q)
  (not (mem24 x (tb2t686 (dom b2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) p)))))
  (mem (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) b2)
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) b2 (t2tb691 x) y) p))))))

;; mem_overriding
  (assert
  (forall ((b2 ty))
  (forall ((q uni) (p uni) (x (tuple21 b d)) (y uni))
  (= (mem (tuple2 (tuple2 b1 d1) b2) (Tuple2 (tuple2 b1 d1) b2 (t2tb692 x) y)
  (infix_lspl b2 (tuple2 b1 d1) q p))
  (or
  (and (mem (tuple2 (tuple2 b1 d1) b2)
  (Tuple2 (tuple2 b1 d1) b2 (t2tb692 x) y) q)
  (not (mem23 x (tb2t687 (dom b2 (tuple2 b1 d1) p))))) (mem
  (tuple2 (tuple2 b1 d1) b2) (Tuple2 (tuple2 b1 d1) b2 (t2tb692 x) y) p))))))

;; mem_overriding
  (assert
  (forall ((b2 ty))
  (forall ((q uni) (p uni) (x (set (tuple21 c d))) (y uni))
  (= (mem (tuple2 (set1 (tuple2 c1 d1)) b2)
  (Tuple2 (set1 (tuple2 c1 d1)) b2 (t2tb689 x) y)
  (infix_lspl b2 (set1 (tuple2 c1 d1)) q p))
  (or
  (and (mem (tuple2 (set1 (tuple2 c1 d1)) b2)
  (Tuple2 (set1 (tuple2 c1 d1)) b2 (t2tb689 x) y) q)
  (not (mem22 x (tb2t688 (dom b2 (set1 (tuple2 c1 d1)) p))))) (mem
  (tuple2 (set1 (tuple2 c1 d1)) b2)
  (Tuple2 (set1 (tuple2 c1 d1)) b2 (t2tb689 x) y) p))))))

;; mem_overriding
  (assert
  (forall ((b2 ty))
  (forall ((q uni) (p uni) (x (tuple21 c d)) (y uni))
  (= (mem (tuple2 (tuple2 c1 d1) b2) (Tuple2 (tuple2 c1 d1) b2 (t2tb693 x) y)
  (infix_lspl b2 (tuple2 c1 d1) q p))
  (or
  (and (mem (tuple2 (tuple2 c1 d1) b2)
  (Tuple2 (tuple2 c1 d1) b2 (t2tb693 x) y) q)
  (not (mem21 x (tb2t689 (dom b2 (tuple2 c1 d1) p))))) (mem
  (tuple2 (tuple2 c1 d1) b2) (Tuple2 (tuple2 c1 d1) b2 (t2tb693 x) y) p))))))

;; mem_overriding
  (assert
  (forall ((b2 ty))
  (forall ((q uni) (p uni) (x d) (y uni))
  (= (mem (tuple2 d1 b2) (Tuple2 d1 b2 (t2tb694 x) y) (infix_lspl b2 d1 q p))
  (or
  (and (mem (tuple2 d1 b2) (Tuple2 d1 b2 (t2tb694 x) y) q)
  (not (mem20 x (tb2t690 (dom b2 d1 p))))) (mem (tuple2 d1 b2)
  (Tuple2 d1 b2 (t2tb694 x) y) p))))))

;; mem_overriding
  (assert
  (forall ((q (set (tuple21 (tuple21 a c) (tuple21 b d))))
  (p (set (tuple21 (tuple21 a c) (tuple21 b d)))) (x (tuple21 a c))
  (y (tuple21 b d)))
  (= (mem24
  (tb2t691 (Tuple2 (tuple2 a1 c1) (tuple2 b1 d1) (t2tb133 x) (t2tb692 y)))
  (tb2t686
  (infix_lspl (tuple2 b1 d1) (tuple2 a1 c1) (t2tb686 q) (t2tb686 p))))
  (or
  (and (mem24
  (tb2t691 (Tuple2 (tuple2 a1 c1) (tuple2 b1 d1) (t2tb133 x) (t2tb692 y))) q)
  (not (mem10 x (tb2t129 (dom (tuple2 b1 d1) (tuple2 a1 c1) (t2tb686 p))))))
  (mem24
  (tb2t691 (Tuple2 (tuple2 a1 c1) (tuple2 b1 d1) (t2tb133 x) (t2tb692 y)))
  p)))))

;; mem_overriding
  (assert
  (forall ((b2 ty))
  (forall ((q uni) (p uni) (x (tuple21 a c)) (y uni))
  (= (mem (tuple2 (tuple2 a1 c1) b2) (Tuple2 (tuple2 a1 c1) b2 (t2tb133 x) y)
  (infix_lspl b2 (tuple2 a1 c1) q p))
  (or
  (and (mem (tuple2 (tuple2 a1 c1) b2)
  (Tuple2 (tuple2 a1 c1) b2 (t2tb133 x) y) q)
  (not (mem10 x (tb2t129 (dom b2 (tuple2 a1 c1) p))))) (mem
  (tuple2 (tuple2 a1 c1) b2) (Tuple2 (tuple2 a1 c1) b2 (t2tb133 x) y) p))))))

;; mem_overriding
  (assert
  (forall ((q (set (tuple21 c d))) (p (set (tuple21 c d))) (x c) (y d))
  (= (mem21 (tb2t693 (Tuple2 c1 d1 (t2tb135 x) (t2tb694 y)))
  (tb2t689 (infix_lspl d1 c1 (t2tb689 q) (t2tb689 p))))
  (or
  (and (mem21 (tb2t693 (Tuple2 c1 d1 (t2tb135 x) (t2tb694 y))) q)
  (not (mem7 x (tb2t132 (dom d1 c1 (t2tb689 p)))))) (mem21
  (tb2t693 (Tuple2 c1 d1 (t2tb135 x) (t2tb694 y))) p)))))

;; mem_overriding
  (assert
  (forall ((b2 ty))
  (forall ((q uni) (p uni) (x c) (y uni))
  (= (mem (tuple2 c1 b2) (Tuple2 c1 b2 (t2tb135 x) y) (infix_lspl b2 c1 q p))
  (or
  (and (mem (tuple2 c1 b2) (Tuple2 c1 b2 (t2tb135 x) y) q)
  (not (mem7 x (tb2t132 (dom b2 c1 p))))) (mem (tuple2 c1 b2)
  (Tuple2 c1 b2 (t2tb135 x) y) p))))))

;; mem_overriding
  (assert
  (forall ((b2 ty))
  (forall ((q uni) (p uni) (x (set (tuple21 a b))) (y uni))
  (= (mem (tuple2 (set1 (tuple2 a1 b1)) b2)
  (Tuple2 (set1 (tuple2 a1 b1)) b2 (t2tb11 x) y)
  (infix_lspl b2 (set1 (tuple2 a1 b1)) q p))
  (or
  (and (mem (tuple2 (set1 (tuple2 a1 b1)) b2)
  (Tuple2 (set1 (tuple2 a1 b1)) b2 (t2tb11 x) y) q)
  (not (mem4 x (tb2t10 (dom b2 (set1 (tuple2 a1 b1)) p))))) (mem
  (tuple2 (set1 (tuple2 a1 b1)) b2)
  (Tuple2 (set1 (tuple2 a1 b1)) b2 (t2tb11 x) y) p))))))

;; mem_overriding
  (assert
  (forall ((b2 ty))
  (forall ((q uni) (p uni) (x (tuple21 a b)) (y uni))
  (= (mem (tuple2 (tuple2 a1 b1) b2) (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) y)
  (infix_lspl b2 (tuple2 a1 b1) q p))
  (or
  (and (mem (tuple2 (tuple2 a1 b1) b2)
  (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) y) q)
  (not (mem3 x (tb2t11 (dom b2 (tuple2 a1 b1) p))))) (mem
  (tuple2 (tuple2 a1 b1) b2) (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) y) p))))))

;; mem_overriding
  (assert
  (forall ((q (set (tuple21 b d))) (p (set (tuple21 b d))) (x b) (y d))
  (= (mem23 (tb2t692 (Tuple2 b1 d1 (t2tb14 x) (t2tb694 y)))
  (tb2t687 (infix_lspl d1 b1 (t2tb687 q) (t2tb687 p))))
  (or
  (and (mem23 (tb2t692 (Tuple2 b1 d1 (t2tb14 x) (t2tb694 y))) q)
  (not (mem2 x (tb2t12 (dom d1 b1 (t2tb687 p)))))) (mem23
  (tb2t692 (Tuple2 b1 d1 (t2tb14 x) (t2tb694 y))) p)))))

;; mem_overriding
  (assert
  (forall ((b2 ty))
  (forall ((q uni) (p uni) (x b) (y uni))
  (= (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) y) (infix_lspl b2 b1 q p))
  (or
  (and (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) y) q)
  (not (mem2 x (tb2t12 (dom b2 b1 p))))) (mem (tuple2 b1 b2)
  (Tuple2 b1 b2 (t2tb14 x) y) p))))))

;; mem_overriding
  (assert
  (forall ((q (set (tuple21 a c))) (p (set (tuple21 a c))) (x a) (y c))
  (= (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y)))
  (tb2t129 (infix_lspl c1 a1 (t2tb129 q) (t2tb129 p))))
  (or
  (and (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y))) q)
  (not (mem1 x (tb2t1 (dom c1 a1 (t2tb129 p)))))) (mem10
  (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y))) p)))))

;; mem_overriding
  (assert
  (forall ((q (set (tuple21 a b))) (p (set (tuple21 a b))) (x a) (y b))
  (= (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y)))
  (tb2t11 (infix_lspl b1 a1 (t2tb11 q) (t2tb11 p))))
  (or
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y))) q)
  (not (mem1 x (tb2t1 (dom b1 a1 (t2tb11 p)))))) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y))) p)))))

;; mem_overriding
  (assert
  (forall ((b2 ty))
  (forall ((q uni) (p uni) (x a) (y uni))
  (= (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) y) (infix_lspl b2 a1 q p))
  (or
  (and (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) y) q)
  (not (mem1 x (tb2t1 (dom b2 a1 p))))) (mem (tuple2 a1 b2)
  (Tuple2 a1 b2 (t2tb2 x) y) p))))))

;; mem_overriding
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((q uni) (p uni) (x uni) (y uni))
  (= (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) (infix_lspl b2 a2 q p))
  (or
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) q)
  (not (mem a2 x (dom b2 a2 p)))) (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) p))))))

(declare-fun direct_product (ty ty ty uni uni) uni)

;; direct_product_sort
  (assert
  (forall ((a2 ty) (b2 ty) (c2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (tuple2 a2 (tuple2 b2 c2)))
  (direct_product c2 b2 a2 x x1)))))

;; mem_direct_product
  (assert
  (forall ((b2 ty))
  (forall ((f2 uni) (g (set (tuple21 (tuple21 a c) (tuple21 b d))))
  (x (tuple21 a c)) (y uni) (z (tuple21 b d)))
  (= (mem (tuple2 (tuple2 a1 c1) (tuple2 b2 (tuple2 b1 d1)))
  (Tuple2 (tuple2 a1 c1) (tuple2 b2 (tuple2 b1 d1)) (t2tb133 x)
  (Tuple2 b2 (tuple2 b1 d1) y (t2tb692 z)))
  (direct_product (tuple2 b1 d1) b2 (tuple2 a1 c1) f2 (t2tb686 g)))
  (and (mem (tuple2 (tuple2 a1 c1) b2)
  (Tuple2 (tuple2 a1 c1) b2 (t2tb133 x) y) f2) (mem24
  (tb2t691 (Tuple2 (tuple2 a1 c1) (tuple2 b1 d1) (t2tb133 x) (t2tb692 z)))
  g))))))

(declare-fun t2tb5437 ((tuple21 (tuple21 a c) (tuple21 (tuple21 b d)
  (tuple21 b d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a c) (tuple21 (tuple21 b d) (tuple21 b d)))))
  (sort (tuple2 (tuple2 a1 c1) (tuple2 (tuple2 b1 d1) (tuple2 b1 d1)))
  (t2tb5437 x))))

(declare-fun tb2t5437 (uni) (tuple21 (tuple21 a c) (tuple21 (tuple21 b d)
  (tuple21 b d))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a c) (tuple21 (tuple21 b d) (tuple21 b d)))))
  (! (= (tb2t5437 (t2tb5437 i)) i) :pattern ((t2tb5437 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 c1) (tuple2 (tuple2 b1 d1) (tuple2 b1 d1)))
     j) (= (t2tb5437 (tb2t5437 j)) j)) :pattern ((t2tb5437 (tb2t5437 j))) )))

(declare-fun t2tb5438 ((set (tuple21 (tuple21 a c) (tuple21 (tuple21 b d)
  (tuple21 b d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a c) (tuple21 (tuple21 b d) (tuple21 b
  d)))))) (sort
  (set1 (tuple2 (tuple2 a1 c1) (tuple2 (tuple2 b1 d1) (tuple2 b1 d1))))
  (t2tb5438 x))))

(declare-fun tb2t5438 (uni) (set (tuple21 (tuple21 a c) (tuple21 (tuple21 b
  d) (tuple21 b d)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a c) (tuple21 (tuple21 b d) (tuple21 b
  d)))))) (! (= (tb2t5438 (t2tb5438 i)) i) :pattern ((t2tb5438 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 a1 c1) (tuple2 (tuple2 b1 d1) (tuple2 b1 d1)))) j)
     (= (t2tb5438 (tb2t5438 j)) j)) :pattern ((t2tb5438 (tb2t5438 j))) )))

;; mem_direct_product
  (assert
  (forall ((f2 (set (tuple21 (tuple21 a c) (tuple21 b d))))
  (g (set (tuple21 (tuple21 a c) (tuple21 b d)))) (x (tuple21 a c))
  (y (tuple21 b d)) (z (tuple21 b d)))
  (= (mem (tuple2 (tuple2 a1 c1) (tuple2 (tuple2 b1 d1) (tuple2 b1 d1)))
  (Tuple2 (tuple2 a1 c1) (tuple2 (tuple2 b1 d1) (tuple2 b1 d1)) (t2tb133 x)
  (Tuple2 (tuple2 b1 d1) (tuple2 b1 d1) (t2tb692 y) (t2tb692 z)))
  (direct_product (tuple2 b1 d1) (tuple2 b1 d1) (tuple2 a1 c1) (t2tb686 f2)
  (t2tb686 g)))
  (and (mem24
  (tb2t691 (Tuple2 (tuple2 a1 c1) (tuple2 b1 d1) (t2tb133 x) (t2tb692 y)))
  f2) (mem24
  (tb2t691 (Tuple2 (tuple2 a1 c1) (tuple2 b1 d1) (t2tb133 x) (t2tb692 z)))
  g)))))

;; mem_direct_product
  (assert
  (forall ((c2 ty))
  (forall ((f2 (set (tuple21 (tuple21 a c) (tuple21 b d)))) (g uni)
  (x (tuple21 a c)) (y (tuple21 b d)) (z uni))
  (= (mem (tuple2 (tuple2 a1 c1) (tuple2 (tuple2 b1 d1) c2))
  (Tuple2 (tuple2 a1 c1) (tuple2 (tuple2 b1 d1) c2) (t2tb133 x)
  (Tuple2 (tuple2 b1 d1) c2 (t2tb692 y) z))
  (direct_product c2 (tuple2 b1 d1) (tuple2 a1 c1) (t2tb686 f2) g))
  (and (mem24
  (tb2t691 (Tuple2 (tuple2 a1 c1) (tuple2 b1 d1) (t2tb133 x) (t2tb692 y)))
  f2) (mem (tuple2 (tuple2 a1 c1) c2)
  (Tuple2 (tuple2 a1 c1) c2 (t2tb133 x) z) g))))))

;; mem_direct_product
  (assert
  (forall ((f2 (set (tuple21 (tuple21 a c) b))) (g (set (tuple21 (tuple21 a
  c) d))) (x (tuple21 a c)) (y b) (z d))
  (= (mem24
  (tb2t691
  (Tuple2 (tuple2 a1 c1) (tuple2 b1 d1) (t2tb133 x)
  (Tuple2 b1 d1 (t2tb14 y) (t2tb694 z))))
  (tb2t686 (direct_product d1 b1 (tuple2 a1 c1) (t2tb168 f2) (t2tb5315 g))))
  (and (mem (tuple2 (tuple2 a1 c1) b1)
  (Tuple2 (tuple2 a1 c1) b1 (t2tb133 x) (t2tb14 y)) (t2tb168 f2)) (mem
  (tuple2 (tuple2 a1 c1) d1)
  (Tuple2 (tuple2 a1 c1) d1 (t2tb133 x) (t2tb694 z)) (t2tb5315 g))))))

;; mem_direct_product
  (assert
  (forall ((b2 ty))
  (forall ((f2 uni) (g (set (tuple21 c d))) (x c) (y uni) (z d))
  (= (mem (tuple2 c1 (tuple2 b2 d1))
  (Tuple2 c1 (tuple2 b2 d1) (t2tb135 x) (Tuple2 b2 d1 y (t2tb694 z)))
  (direct_product d1 b2 c1 f2 (t2tb689 g)))
  (and (mem (tuple2 c1 b2) (Tuple2 c1 b2 (t2tb135 x) y) f2) (mem21
  (tb2t693 (Tuple2 c1 d1 (t2tb135 x) (t2tb694 z))) g))))))

(declare-fun t2tb5439 ((set (tuple21 c (tuple21 d d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 c (tuple21 d d))))) (sort
  (set1 (tuple2 c1 (tuple2 d1 d1))) (t2tb5439 x))))

(declare-fun tb2t5439 (uni) (set (tuple21 c (tuple21 d d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 c (tuple21 d d)))))
  (! (= (tb2t5439 (t2tb5439 i)) i) :pattern ((t2tb5439 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 c1 (tuple2 d1 d1))) j)
     (= (t2tb5439 (tb2t5439 j)) j)) :pattern ((t2tb5439 (tb2t5439 j))) )))

(declare-fun t2tb5440 ((tuple21 c (tuple21 d d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 c (tuple21 d d)))) (sort (tuple2 c1 (tuple2 d1 d1))
  (t2tb5440 x))))

(declare-fun tb2t5440 (uni) (tuple21 c (tuple21 d d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 c (tuple21 d d))))
  (! (= (tb2t5440 (t2tb5440 i)) i) :pattern ((t2tb5440 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 c1 (tuple2 d1 d1)) j) (= (t2tb5440 (tb2t5440 j)) j)) :pattern (
  (t2tb5440 (tb2t5440 j))) )))

;; mem_direct_product
  (assert
  (forall ((f2 (set (tuple21 c d))) (g (set (tuple21 c d))) (x c) (y d)
  (z d))
  (= (mem (tuple2 c1 (tuple2 d1 d1))
  (Tuple2 c1 (tuple2 d1 d1) (t2tb135 x)
  (Tuple2 d1 d1 (t2tb694 y) (t2tb694 z)))
  (direct_product d1 d1 c1 (t2tb689 f2) (t2tb689 g)))
  (and (mem21 (tb2t693 (Tuple2 c1 d1 (t2tb135 x) (t2tb694 y))) f2) (mem21
  (tb2t693 (Tuple2 c1 d1 (t2tb135 x) (t2tb694 z))) g)))))

;; mem_direct_product
  (assert
  (forall ((c2 ty))
  (forall ((f2 (set (tuple21 c d))) (g uni) (x c) (y d) (z uni))
  (= (mem (tuple2 c1 (tuple2 d1 c2))
  (Tuple2 c1 (tuple2 d1 c2) (t2tb135 x) (Tuple2 d1 c2 (t2tb694 y) z))
  (direct_product c2 d1 c1 (t2tb689 f2) g))
  (and (mem21 (tb2t693 (Tuple2 c1 d1 (t2tb135 x) (t2tb694 y))) f2) (mem
  (tuple2 c1 c2) (Tuple2 c1 c2 (t2tb135 x) z) g))))))

;; mem_direct_product
  (assert
  (forall ((b2 ty))
  (forall ((f2 uni) (g (set (tuple21 b d))) (x b) (y uni) (z d))
  (= (mem (tuple2 b1 (tuple2 b2 d1))
  (Tuple2 b1 (tuple2 b2 d1) (t2tb14 x) (Tuple2 b2 d1 y (t2tb694 z)))
  (direct_product d1 b2 b1 f2 (t2tb687 g)))
  (and (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) y) f2) (mem23
  (tb2t692 (Tuple2 b1 d1 (t2tb14 x) (t2tb694 z))) g))))))

(declare-fun t2tb5441 ((set (tuple21 b (tuple21 d d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 b (tuple21 d d))))) (sort
  (set1 (tuple2 b1 (tuple2 d1 d1))) (t2tb5441 x))))

(declare-fun tb2t5441 (uni) (set (tuple21 b (tuple21 d d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 b (tuple21 d d)))))
  (! (= (tb2t5441 (t2tb5441 i)) i) :pattern ((t2tb5441 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 b1 (tuple2 d1 d1))) j)
     (= (t2tb5441 (tb2t5441 j)) j)) :pattern ((t2tb5441 (tb2t5441 j))) )))

(declare-fun t2tb5442 ((tuple21 b (tuple21 d d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 b (tuple21 d d)))) (sort (tuple2 b1 (tuple2 d1 d1))
  (t2tb5442 x))))

(declare-fun tb2t5442 (uni) (tuple21 b (tuple21 d d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 b (tuple21 d d))))
  (! (= (tb2t5442 (t2tb5442 i)) i) :pattern ((t2tb5442 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 b1 (tuple2 d1 d1)) j) (= (t2tb5442 (tb2t5442 j)) j)) :pattern (
  (t2tb5442 (tb2t5442 j))) )))

;; mem_direct_product
  (assert
  (forall ((f2 (set (tuple21 b d))) (g (set (tuple21 b d))) (x b) (y d)
  (z d))
  (= (mem (tuple2 b1 (tuple2 d1 d1))
  (Tuple2 b1 (tuple2 d1 d1) (t2tb14 x)
  (Tuple2 d1 d1 (t2tb694 y) (t2tb694 z)))
  (direct_product d1 d1 b1 (t2tb687 f2) (t2tb687 g)))
  (and (mem23 (tb2t692 (Tuple2 b1 d1 (t2tb14 x) (t2tb694 y))) f2) (mem23
  (tb2t692 (Tuple2 b1 d1 (t2tb14 x) (t2tb694 z))) g)))))

;; mem_direct_product
  (assert
  (forall ((c2 ty))
  (forall ((f2 (set (tuple21 b d))) (g uni) (x b) (y d) (z uni))
  (= (mem (tuple2 b1 (tuple2 d1 c2))
  (Tuple2 b1 (tuple2 d1 c2) (t2tb14 x) (Tuple2 d1 c2 (t2tb694 y) z))
  (direct_product c2 d1 b1 (t2tb687 f2) g))
  (and (mem23 (tb2t692 (Tuple2 b1 d1 (t2tb14 x) (t2tb694 y))) f2) (mem
  (tuple2 b1 c2) (Tuple2 b1 c2 (t2tb14 x) z) g))))))

;; mem_direct_product
  (assert
  (forall ((b2 ty))
  (forall ((f2 uni) (g (set (tuple21 a c))) (x a) (y uni) (z c))
  (= (mem (tuple2 a1 (tuple2 b2 c1))
  (Tuple2 a1 (tuple2 b2 c1) (t2tb2 x) (Tuple2 b2 c1 y (t2tb135 z)))
  (direct_product c1 b2 a1 f2 (t2tb129 g)))
  (and (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) y) f2) (mem10
  (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 z))) g))))))

;; mem_direct_product
  (assert
  (forall ((b2 ty))
  (forall ((f2 uni) (g (set (tuple21 a b))) (x a) (y uni) (z b))
  (= (mem (tuple2 a1 (tuple2 b2 b1))
  (Tuple2 a1 (tuple2 b2 b1) (t2tb2 x) (Tuple2 b2 b1 y (t2tb14 z)))
  (direct_product b1 b2 a1 f2 (t2tb11 g)))
  (and (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) y) f2) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 z))) g))))))

(declare-fun t2tb330 ((set (tuple21 a (tuple21 c c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (tuple21 c c))))) (sort
  (set1 (tuple2 a1 (tuple2 c1 c1))) (t2tb330 x))))

(declare-fun tb2t330 (uni) (set (tuple21 a (tuple21 c c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (tuple21 c c)))))
  (! (= (tb2t330 (t2tb330 i)) i) :pattern ((t2tb330 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (tuple2 c1 c1))) j)
     (= (t2tb330 (tb2t330 j)) j)) :pattern ((t2tb330 (tb2t330 j))) )))

(declare-fun t2tb331 ((tuple21 a (tuple21 c c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (tuple21 c c)))) (sort (tuple2 a1 (tuple2 c1 c1))
  (t2tb331 x))))

(declare-fun tb2t331 (uni) (tuple21 a (tuple21 c c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (tuple21 c c))))
  (! (= (tb2t331 (t2tb331 i)) i) :pattern ((t2tb331 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (tuple2 c1 c1)) j) (= (t2tb331 (tb2t331 j)) j)) :pattern (
  (t2tb331 (tb2t331 j))) )))

;; mem_direct_product
  (assert
  (forall ((f2 (set (tuple21 a c))) (g (set (tuple21 a c))) (x a) (y c)
  (z c))
  (= (mem (tuple2 a1 (tuple2 c1 c1))
  (Tuple2 a1 (tuple2 c1 c1) (t2tb2 x) (Tuple2 c1 c1 (t2tb135 y) (t2tb135 z)))
  (direct_product c1 c1 a1 (t2tb129 f2) (t2tb129 g)))
  (and (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y))) f2) (mem10
  (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 z))) g)))))

(declare-fun t2tb332 ((set (tuple21 a (tuple21 c b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (tuple21 c b))))) (sort
  (set1 (tuple2 a1 (tuple2 c1 b1))) (t2tb332 x))))

(declare-fun tb2t332 (uni) (set (tuple21 a (tuple21 c b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (tuple21 c b)))))
  (! (= (tb2t332 (t2tb332 i)) i) :pattern ((t2tb332 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (tuple2 c1 b1))) j)
     (= (t2tb332 (tb2t332 j)) j)) :pattern ((t2tb332 (tb2t332 j))) )))

(declare-fun t2tb333 ((tuple21 a (tuple21 c b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (tuple21 c b)))) (sort (tuple2 a1 (tuple2 c1 b1))
  (t2tb333 x))))

(declare-fun tb2t333 (uni) (tuple21 a (tuple21 c b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (tuple21 c b))))
  (! (= (tb2t333 (t2tb333 i)) i) :pattern ((t2tb333 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (tuple2 c1 b1)) j) (= (t2tb333 (tb2t333 j)) j)) :pattern (
  (t2tb333 (tb2t333 j))) )))

;; mem_direct_product
  (assert
  (forall ((f2 (set (tuple21 a c))) (g (set (tuple21 a b))) (x a) (y c)
  (z b))
  (= (mem (tuple2 a1 (tuple2 c1 b1))
  (Tuple2 a1 (tuple2 c1 b1) (t2tb2 x) (Tuple2 c1 b1 (t2tb135 y) (t2tb14 z)))
  (direct_product b1 c1 a1 (t2tb129 f2) (t2tb11 g)))
  (and (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y))) f2) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 z))) g)))))

;; mem_direct_product
  (assert
  (forall ((c2 ty))
  (forall ((f2 (set (tuple21 a c))) (g uni) (x a) (y c) (z uni))
  (= (mem (tuple2 a1 (tuple2 c1 c2))
  (Tuple2 a1 (tuple2 c1 c2) (t2tb2 x) (Tuple2 c1 c2 (t2tb135 y) z))
  (direct_product c2 c1 a1 (t2tb129 f2) g))
  (and (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y))) f2) (mem
  (tuple2 a1 c2) (Tuple2 a1 c2 (t2tb2 x) z) g))))))

(declare-fun t2tb260 ((tuple21 a (tuple21 b c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (tuple21 b c)))) (sort (tuple2 a1 (tuple2 b1 c1))
  (t2tb260 x))))

(declare-fun tb2t260 (uni) (tuple21 a (tuple21 b c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (tuple21 b c))))
  (! (= (tb2t260 (t2tb260 i)) i) :pattern ((t2tb260 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (tuple2 b1 c1)) j) (= (t2tb260 (tb2t260 j)) j)) :pattern (
  (t2tb260 (tb2t260 j))) )))

(declare-fun t2tb261 ((set (tuple21 a (tuple21 b c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (tuple21 b c))))) (sort
  (set1 (tuple2 a1 (tuple2 b1 c1))) (t2tb261 x))))

(declare-fun tb2t261 (uni) (set (tuple21 a (tuple21 b c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (tuple21 b c)))))
  (! (= (tb2t261 (t2tb261 i)) i) :pattern ((t2tb261 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (tuple2 b1 c1))) j)
     (= (t2tb261 (tb2t261 j)) j)) :pattern ((t2tb261 (tb2t261 j))) )))

;; mem_direct_product
  (assert
  (forall ((f2 (set (tuple21 a b))) (g (set (tuple21 a c))) (x a) (y b)
  (z c))
  (= (mem (tuple2 a1 (tuple2 b1 c1))
  (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (Tuple2 b1 c1 (t2tb14 y) (t2tb135 z)))
  (direct_product c1 b1 a1 (t2tb11 f2) (t2tb129 g)))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y))) f2) (mem10
  (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 z))) g)))))

(declare-fun t2tb59 ((set (tuple21 a (tuple21 b b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (tuple21 b b))))) (sort
  (set1 (tuple2 a1 (tuple2 b1 b1))) (t2tb59 x))))

(declare-fun tb2t59 (uni) (set (tuple21 a (tuple21 b b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (tuple21 b b)))))
  (! (= (tb2t59 (t2tb59 i)) i) :pattern ((t2tb59 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (tuple2 b1 b1))) j)
     (= (t2tb59 (tb2t59 j)) j)) :pattern ((t2tb59 (tb2t59 j))) )))

(declare-fun t2tb60 ((tuple21 a (tuple21 b b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (tuple21 b b)))) (sort (tuple2 a1 (tuple2 b1 b1))
  (t2tb60 x))))

(declare-fun tb2t60 (uni) (tuple21 a (tuple21 b b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (tuple21 b b))))
  (! (= (tb2t60 (t2tb60 i)) i) :pattern ((t2tb60 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (tuple2 b1 b1)) j) (= (t2tb60 (tb2t60 j)) j)) :pattern (
  (t2tb60 (tb2t60 j))) )))

;; mem_direct_product
  (assert
  (forall ((f2 (set (tuple21 a b))) (g (set (tuple21 a b))) (x a) (y b)
  (z b))
  (= (mem (tuple2 a1 (tuple2 b1 b1))
  (Tuple2 a1 (tuple2 b1 b1) (t2tb2 x) (Tuple2 b1 b1 (t2tb14 y) (t2tb14 z)))
  (direct_product b1 b1 a1 (t2tb11 f2) (t2tb11 g)))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y))) f2) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 z))) g)))))

;; mem_direct_product
  (assert
  (forall ((c2 ty))
  (forall ((f2 (set (tuple21 a b))) (g uni) (x a) (y b) (z uni))
  (= (mem (tuple2 a1 (tuple2 b1 c2))
  (Tuple2 a1 (tuple2 b1 c2) (t2tb2 x) (Tuple2 b1 c2 (t2tb14 y) z))
  (direct_product c2 b1 a1 (t2tb11 f2) g))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y))) f2) (mem
  (tuple2 a1 c2) (Tuple2 a1 c2 (t2tb2 x) z) g))))))

;; mem_direct_product
  (assert
  (forall ((a2 ty) (b2 ty) (c2 ty))
  (forall ((f2 uni) (g uni) (x uni) (y uni) (z uni))
  (= (mem (tuple2 a2 (tuple2 b2 c2))
  (Tuple2 a2 (tuple2 b2 c2) x (Tuple2 b2 c2 y z))
  (direct_product c2 b2 a2 f2 g))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) f2) (mem (tuple2 a2 c2)
  (Tuple2 a2 c2 x z) g))))))

(declare-fun prj1 (ty ty uni) uni)

;; prj1_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni)) (sort (set1 (tuple2 (tuple2 a2 b2) a2)) (prj1 b2 a2 x)))))

(declare-fun t2tb5443 ((tuple21 (set (tuple21 a c)) (set (tuple21 b
  d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a c)) (set (tuple21 b d))))) (sort
  (tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 b1 d1))) (t2tb5443 x))))

(declare-fun tb2t5443 (uni) (tuple21 (set (tuple21 a c)) (set (tuple21 b
  d))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a c)) (set (tuple21 b d)))))
  (! (= (tb2t5443 (t2tb5443 i)) i) :pattern ((t2tb5443 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 b1 d1))) j)
     (= (t2tb5443 (tb2t5443 j)) j)) :pattern ((t2tb5443 (tb2t5443 j))) )))

;; mem_proj_op_1
  (assert
  (forall ((s (set (tuple21 a c))) (t (set (tuple21 b d))) (x (tuple21 a c))
  (y (tuple21 b d)) (z (tuple21 a c)))
  (= (mem (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 a1 c1))
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 a1 c1)
  (Tuple2 (tuple2 a1 c1) (tuple2 b1 d1) (t2tb133 x) (t2tb692 y)) (t2tb133 z))
  (prj1 (tuple2 b1 d1) (tuple2 a1 c1)
  (Tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 b1 d1)) (t2tb129 s)
  (t2tb687 t))))
  (and (mem (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 a1 c1))
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 a1 c1)
  (Tuple2 (tuple2 a1 c1) (tuple2 b1 d1) (t2tb133 x) (t2tb692 y)) (t2tb133 z))
  (times (tuple2 a1 c1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))
  (t2tb686 (times9 s t)) (t2tb129 s))) (= z x)))))

(declare-fun t2tb5444 ((tuple21 (set c) (set d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set c) (set d)))) (sort (tuple2 (set1 c1) (set1 d1))
  (t2tb5444 x))))

(declare-fun tb2t5444 (uni) (tuple21 (set c) (set d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set c) (set d))))
  (! (= (tb2t5444 (t2tb5444 i)) i) :pattern ((t2tb5444 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 c1) (set1 d1)) j) (= (t2tb5444 (tb2t5444 j)) j)) :pattern (
  (t2tb5444 (tb2t5444 j))) )))

;; mem_proj_op_1
  (assert
  (forall ((s (set c)) (t (set d)) (x c) (y d) (z c))
  (= (mem (tuple2 (tuple2 c1 d1) c1)
  (Tuple2 (tuple2 c1 d1) c1 (Tuple2 c1 d1 (t2tb135 x) (t2tb694 y))
  (t2tb135 z))
  (prj1 d1 c1 (Tuple2 (set1 c1) (set1 d1) (t2tb132 s) (t2tb690 t))))
  (and (mem (tuple2 (tuple2 c1 d1) c1)
  (Tuple2 (tuple2 c1 d1) c1 (Tuple2 c1 d1 (t2tb135 x) (t2tb694 y))
  (t2tb135 z)) (times c1 (tuple2 c1 d1) (t2tb689 (times8 s t)) (t2tb132 s)))
  (= z x)))))

(declare-fun t2tb5445 ((tuple21 (set b) (set d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set b) (set d)))) (sort (tuple2 (set1 b1) (set1 d1))
  (t2tb5445 x))))

(declare-fun tb2t5445 (uni) (tuple21 (set b) (set d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set b) (set d))))
  (! (= (tb2t5445 (t2tb5445 i)) i) :pattern ((t2tb5445 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 b1) (set1 d1)) j) (= (t2tb5445 (tb2t5445 j)) j)) :pattern (
  (t2tb5445 (tb2t5445 j))) )))

;; mem_proj_op_1
  (assert
  (forall ((s (set b)) (t (set d)) (x b) (y d) (z b))
  (= (mem (tuple2 (tuple2 b1 d1) b1)
  (Tuple2 (tuple2 b1 d1) b1 (Tuple2 b1 d1 (t2tb14 x) (t2tb694 y)) (t2tb14 z))
  (prj1 d1 b1 (Tuple2 (set1 b1) (set1 d1) (t2tb12 s) (t2tb690 t))))
  (and (mem (tuple2 (tuple2 b1 d1) b1)
  (Tuple2 (tuple2 b1 d1) b1 (Tuple2 b1 d1 (t2tb14 x) (t2tb694 y)) (t2tb14 z))
  (times b1 (tuple2 b1 d1) (t2tb687 (times10 s t)) (t2tb12 s))) (= z x)))))

(declare-fun t2tb5446 ((tuple21 (set a) (set c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set a) (set c)))) (sort (tuple2 (set1 a1) (set1 c1))
  (t2tb5446 x))))

(declare-fun tb2t5446 (uni) (tuple21 (set a) (set c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set a) (set c))))
  (! (= (tb2t5446 (t2tb5446 i)) i) :pattern ((t2tb5446 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 a1) (set1 c1)) j) (= (t2tb5446 (tb2t5446 j)) j)) :pattern (
  (t2tb5446 (tb2t5446 j))) )))

;; mem_proj_op_1
  (assert
  (forall ((s (set a)) (t (set c)) (x a) (y c) (z a))
  (= (mem (tuple2 (tuple2 a1 c1) a1)
  (Tuple2 (tuple2 a1 c1) a1 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y)) (t2tb2 z))
  (prj1 c1 a1 (Tuple2 (set1 a1) (set1 c1) (t2tb1 s) (t2tb132 t))))
  (and (mem (tuple2 (tuple2 a1 c1) a1)
  (Tuple2 (tuple2 a1 c1) a1 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y)) (t2tb2 z))
  (times a1 (tuple2 a1 c1) (t2tb129 (times4 s t)) (t2tb1 s))) (= z x)))))

(declare-fun t2tb495 ((tuple21 (set a) (set b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set a) (set b)))) (sort (tuple2 (set1 a1) (set1 b1))
  (t2tb495 x))))

(declare-fun tb2t495 (uni) (tuple21 (set a) (set b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set a) (set b))))
  (! (= (tb2t495 (t2tb495 i)) i) :pattern ((t2tb495 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 a1) (set1 b1)) j) (= (t2tb495 (tb2t495 j)) j)) :pattern (
  (t2tb495 (tb2t495 j))) )))

;; mem_proj_op_1
  (assert
  (forall ((s (set a)) (t (set b)) (x a) (y b) (z a))
  (= (mem (tuple2 (tuple2 a1 b1) a1)
  (Tuple2 (tuple2 a1 b1) a1 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y)) (t2tb2 z))
  (prj1 b1 a1 (Tuple2 (set1 a1) (set1 b1) (t2tb1 s) (t2tb12 t))))
  (and (mem (tuple2 (tuple2 a1 b1) a1)
  (Tuple2 (tuple2 a1 b1) a1 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y)) (t2tb2 z))
  (times a1 (tuple2 a1 b1) (t2tb11 (times2 s t)) (t2tb1 s))) (= z x)))))

;; mem_proj_op_1
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (x uni) (y uni) (z uni))
  (=> (sort a2 x)
  (=> (sort a2 z)
  (= (mem (tuple2 (tuple2 a2 b2) a2)
  (Tuple2 (tuple2 a2 b2) a2 (Tuple2 a2 b2 x y) z)
  (prj1 b2 a2 (Tuple2 (set1 a2) (set1 b2) s t)))
  (and (mem (tuple2 (tuple2 a2 b2) a2)
  (Tuple2 (tuple2 a2 b2) a2 (Tuple2 a2 b2 x y) z)
  (times a2 (tuple2 a2 b2) (times b2 a2 s t) s)) (= z x))))))))

(declare-fun prj2 (ty ty uni) uni)

;; prj2_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni)) (sort (set1 (tuple2 (tuple2 a2 b2) b2)) (prj2 b2 a2 x)))))

;; mem_proj_op_2
  (assert
  (forall ((s (set (tuple21 a c))) (t (set (tuple21 b d))) (x (tuple21 a c))
  (y (tuple21 b d)) (z (tuple21 b d)))
  (= (mem (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 b1 d1))
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 b1 d1)
  (Tuple2 (tuple2 a1 c1) (tuple2 b1 d1) (t2tb133 x) (t2tb692 y)) (t2tb692 z))
  (prj2 (tuple2 b1 d1) (tuple2 a1 c1)
  (Tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 b1 d1)) (t2tb129 s)
  (t2tb687 t))))
  (and (mem (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 b1 d1))
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 b1 d1)
  (Tuple2 (tuple2 a1 c1) (tuple2 b1 d1) (t2tb133 x) (t2tb692 y)) (t2tb692 z))
  (times (tuple2 b1 d1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))
  (t2tb686 (times9 s t)) (t2tb687 t))) (= z y)))))

;; mem_proj_op_2
  (assert
  (forall ((s (set c)) (t (set d)) (x c) (y d) (z d))
  (= (mem (tuple2 (tuple2 c1 d1) d1)
  (Tuple2 (tuple2 c1 d1) d1 (Tuple2 c1 d1 (t2tb135 x) (t2tb694 y))
  (t2tb694 z))
  (prj2 d1 c1 (Tuple2 (set1 c1) (set1 d1) (t2tb132 s) (t2tb690 t))))
  (and (mem (tuple2 (tuple2 c1 d1) d1)
  (Tuple2 (tuple2 c1 d1) d1 (Tuple2 c1 d1 (t2tb135 x) (t2tb694 y))
  (t2tb694 z)) (times d1 (tuple2 c1 d1) (t2tb689 (times8 s t)) (t2tb690 t)))
  (= z y)))))

;; mem_proj_op_2
  (assert
  (forall ((s (set b)) (t (set d)) (x b) (y d) (z d))
  (= (mem (tuple2 (tuple2 b1 d1) d1)
  (Tuple2 (tuple2 b1 d1) d1 (Tuple2 b1 d1 (t2tb14 x) (t2tb694 y))
  (t2tb694 z))
  (prj2 d1 b1 (Tuple2 (set1 b1) (set1 d1) (t2tb12 s) (t2tb690 t))))
  (and (mem (tuple2 (tuple2 b1 d1) d1)
  (Tuple2 (tuple2 b1 d1) d1 (Tuple2 b1 d1 (t2tb14 x) (t2tb694 y))
  (t2tb694 z)) (times d1 (tuple2 b1 d1) (t2tb687 (times10 s t)) (t2tb690 t)))
  (= z y)))))

;; mem_proj_op_2
  (assert
  (forall ((s (set a)) (t (set c)) (x a) (y c) (z c))
  (= (mem (tuple2 (tuple2 a1 c1) c1)
  (Tuple2 (tuple2 a1 c1) c1 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y)) (t2tb135 z))
  (prj2 c1 a1 (Tuple2 (set1 a1) (set1 c1) (t2tb1 s) (t2tb132 t))))
  (and (mem (tuple2 (tuple2 a1 c1) c1)
  (Tuple2 (tuple2 a1 c1) c1 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y)) (t2tb135 z))
  (times c1 (tuple2 a1 c1) (t2tb129 (times4 s t)) (t2tb132 t))) (= z y)))))

;; mem_proj_op_2
  (assert
  (forall ((s (set a)) (t (set b)) (x a) (y b) (z b))
  (= (mem (tuple2 (tuple2 a1 b1) b1)
  (Tuple2 (tuple2 a1 b1) b1 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y)) (t2tb14 z))
  (prj2 b1 a1 (Tuple2 (set1 a1) (set1 b1) (t2tb1 s) (t2tb12 t))))
  (and (mem (tuple2 (tuple2 a1 b1) b1)
  (Tuple2 (tuple2 a1 b1) b1 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y)) (t2tb14 z))
  (times b1 (tuple2 a1 b1) (t2tb11 (times2 s t)) (t2tb12 t))) (= z y)))))

;; mem_proj_op_2
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (x uni) (y uni) (z uni))
  (=> (sort b2 y)
  (=> (sort b2 z)
  (= (mem (tuple2 (tuple2 a2 b2) b2)
  (Tuple2 (tuple2 a2 b2) b2 (Tuple2 a2 b2 x y) z)
  (prj2 b2 a2 (Tuple2 (set1 a2) (set1 b2) s t)))
  (and (mem (tuple2 (tuple2 a2 b2) b2)
  (Tuple2 (tuple2 a2 b2) b2 (Tuple2 a2 b2 x y) z)
  (times b2 (tuple2 a2 b2) (times b2 a2 s t) t)) (= z y))))))))

(declare-fun parallel_product (ty ty ty ty uni uni) uni)

;; parallel_product_sort
  (assert
  (forall ((a2 ty) (b2 ty) (c2 ty) (d2 ty))
  (forall ((x uni) (x1 uni)) (sort
  (set1 (tuple2 (tuple2 a2 c2) (tuple2 b2 d2)))
  (parallel_product d2 c2 b2 a2 x x1)))))

(declare-fun parallel_product1 ((set (tuple21 a b)) (set (tuple21 c
  d))) (set (tuple21 (tuple21 a c) (tuple21 b d))))

;; mem_parallel_product
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((h uni) (k (set (tuple21 (tuple21 a c) (tuple21 b d)))) (x uni)
  (y (tuple21 a c)) (z uni) (w (tuple21 b d)))
  (= (mem (tuple2 (tuple2 a2 (tuple2 a1 c1)) (tuple2 b2 (tuple2 b1 d1)))
  (Tuple2 (tuple2 a2 (tuple2 a1 c1)) (tuple2 b2 (tuple2 b1 d1))
  (Tuple2 a2 (tuple2 a1 c1) x (t2tb133 y))
  (Tuple2 b2 (tuple2 b1 d1) z (t2tb692 w)))
  (parallel_product (tuple2 b1 d1) (tuple2 a1 c1) b2 a2 h (t2tb686 k)))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x z) h) (mem24
  (tb2t691 (Tuple2 (tuple2 a1 c1) (tuple2 b1 d1) (t2tb133 y) (t2tb692 w)))
  k))))))

;; mem_parallel_product
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((h uni) (k (set (tuple21 c d))) (x uni) (y c) (z uni) (w d))
  (= (mem (tuple2 (tuple2 a2 c1) (tuple2 b2 d1))
  (Tuple2 (tuple2 a2 c1) (tuple2 b2 d1) (Tuple2 a2 c1 x (t2tb135 y))
  (Tuple2 b2 d1 z (t2tb694 w))) (parallel_product d1 c1 b2 a2 h (t2tb689 k)))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x z) h) (mem21
  (tb2t693 (Tuple2 c1 d1 (t2tb135 y) (t2tb694 w))) k))))))

;; mem_parallel_product
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((h uni) (k (set (tuple21 b d))) (x uni) (y b) (z uni) (w d))
  (= (mem (tuple2 (tuple2 a2 b1) (tuple2 b2 d1))
  (Tuple2 (tuple2 a2 b1) (tuple2 b2 d1) (Tuple2 a2 b1 x (t2tb14 y))
  (Tuple2 b2 d1 z (t2tb694 w))) (parallel_product d1 b1 b2 a2 h (t2tb687 k)))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x z) h) (mem23
  (tb2t692 (Tuple2 b1 d1 (t2tb14 y) (t2tb694 w))) k))))))

;; mem_parallel_product
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((h uni) (k (set (tuple21 a c))) (x uni) (y a) (z uni) (w c))
  (= (mem (tuple2 (tuple2 a2 a1) (tuple2 b2 c1))
  (Tuple2 (tuple2 a2 a1) (tuple2 b2 c1) (Tuple2 a2 a1 x (t2tb2 y))
  (Tuple2 b2 c1 z (t2tb135 w))) (parallel_product c1 a1 b2 a2 h (t2tb129 k)))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x z) h) (mem10
  (tb2t133 (Tuple2 a1 c1 (t2tb2 y) (t2tb135 w))) k))))))

;; mem_parallel_product
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((h uni) (k (set (tuple21 a b))) (x uni) (y a) (z uni) (w b))
  (= (mem (tuple2 (tuple2 a2 a1) (tuple2 b2 b1))
  (Tuple2 (tuple2 a2 a1) (tuple2 b2 b1) (Tuple2 a2 a1 x (t2tb2 y))
  (Tuple2 b2 b1 z (t2tb14 w))) (parallel_product b1 a1 b2 a2 h (t2tb11 k)))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x z) h) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 y) (t2tb14 w))) k))))))

(declare-fun t2tb5447 ((tuple21 (tuple21 (tuple21 a c) (tuple21 a c))
  (tuple21 (tuple21 b d) (tuple21 b d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 a c) (tuple21 a c))
  (tuple21 (tuple21 b d) (tuple21 b d))))) (sort
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 a1 c1))
  (tuple2 (tuple2 b1 d1) (tuple2 b1 d1))) (t2tb5447 x))))

(declare-fun tb2t5447 (uni) (tuple21 (tuple21 (tuple21 a c) (tuple21 a c))
  (tuple21 (tuple21 b d) (tuple21 b d))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 a c) (tuple21 a c))
  (tuple21 (tuple21 b d) (tuple21 b d)))))
  (! (= (tb2t5447 (t2tb5447 i)) i) :pattern ((t2tb5447 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 a1 c1))
     (tuple2 (tuple2 b1 d1) (tuple2 b1 d1))) j)
     (= (t2tb5447 (tb2t5447 j)) j)) :pattern ((t2tb5447 (tb2t5447 j))) )))

(declare-fun t2tb5448 ((set (tuple21 (tuple21 (tuple21 a c) (tuple21 a c))
  (tuple21 (tuple21 b d) (tuple21 b d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 a c) (tuple21 a c))
  (tuple21 (tuple21 b d) (tuple21 b d)))))) (sort
  (set1
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 a1 c1))
  (tuple2 (tuple2 b1 d1) (tuple2 b1 d1)))) (t2tb5448 x))))

(declare-fun tb2t5448 (uni) (set (tuple21 (tuple21 (tuple21 a c) (tuple21 a
  c)) (tuple21 (tuple21 b d) (tuple21 b d)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 a c) (tuple21 a c))
  (tuple21 (tuple21 b d) (tuple21 b d))))))
  (! (= (tb2t5448 (t2tb5448 i)) i) :pattern ((t2tb5448 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 a1 c1))
     (tuple2 (tuple2 b1 d1) (tuple2 b1 d1)))) j)
     (= (t2tb5448 (tb2t5448 j)) j)) :pattern ((t2tb5448 (tb2t5448 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 (tuple21 a c) (tuple21 b d))))
  (k (set (tuple21 (tuple21 a c) (tuple21 b d)))) (x (tuple21 a c))
  (y (tuple21 a c)) (z (tuple21 b d)) (w (tuple21 b d)))
  (= (mem
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 a1 c1))
  (tuple2 (tuple2 b1 d1) (tuple2 b1 d1)))
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 a1 c1))
  (tuple2 (tuple2 b1 d1) (tuple2 b1 d1))
  (Tuple2 (tuple2 a1 c1) (tuple2 a1 c1) (t2tb133 x) (t2tb133 y))
  (Tuple2 (tuple2 b1 d1) (tuple2 b1 d1) (t2tb692 z) (t2tb692 w)))
  (parallel_product (tuple2 b1 d1) (tuple2 a1 c1) (tuple2 b1 d1)
  (tuple2 a1 c1) (t2tb686 h) (t2tb686 k)))
  (and (mem24
  (tb2t691 (Tuple2 (tuple2 a1 c1) (tuple2 b1 d1) (t2tb133 x) (t2tb692 z))) h)
  (mem24
  (tb2t691 (Tuple2 (tuple2 a1 c1) (tuple2 b1 d1) (t2tb133 y) (t2tb692 w)))
  k)))))

(declare-fun t2tb5449 ((set (tuple21 (tuple21 (tuple21 a c) c)
  (tuple21 (tuple21 b d) d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 a c) c) (tuple21 (tuple21 b d)
  d))))) (sort
  (set1 (tuple2 (tuple2 (tuple2 a1 c1) c1) (tuple2 (tuple2 b1 d1) d1)))
  (t2tb5449 x))))

(declare-fun tb2t5449 (uni) (set (tuple21 (tuple21 (tuple21 a c) c)
  (tuple21 (tuple21 b d) d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 a c) c) (tuple21 (tuple21 b d)
  d))))) (! (= (tb2t5449 (t2tb5449 i)) i) :pattern ((t2tb5449 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 (tuple2 a1 c1) c1) (tuple2 (tuple2 b1 d1) d1))) j)
     (= (t2tb5449 (tb2t5449 j)) j)) :pattern ((t2tb5449 (tb2t5449 j))) )))

(declare-fun t2tb5450 ((tuple21 (tuple21 (tuple21 a c) c) (tuple21 (tuple21 b
  d) d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 a c) c) (tuple21 (tuple21 b d) d))))
  (sort (tuple2 (tuple2 (tuple2 a1 c1) c1) (tuple2 (tuple2 b1 d1) d1))
  (t2tb5450 x))))

(declare-fun tb2t5450 (uni) (tuple21 (tuple21 (tuple21 a c) c)
  (tuple21 (tuple21 b d) d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 a c) c) (tuple21 (tuple21 b d) d))))
  (! (= (tb2t5450 (t2tb5450 i)) i) :pattern ((t2tb5450 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 (tuple2 a1 c1) c1) (tuple2 (tuple2 b1 d1) d1))
     j) (= (t2tb5450 (tb2t5450 j)) j)) :pattern ((t2tb5450 (tb2t5450 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 (tuple21 a c) (tuple21 b d)))) (k (set (tuple21 c
  d))) (x (tuple21 a c)) (y c) (z (tuple21 b d)) (w d))
  (= (mem (tuple2 (tuple2 (tuple2 a1 c1) c1) (tuple2 (tuple2 b1 d1) d1))
  (Tuple2 (tuple2 (tuple2 a1 c1) c1) (tuple2 (tuple2 b1 d1) d1)
  (Tuple2 (tuple2 a1 c1) c1 (t2tb133 x) (t2tb135 y))
  (Tuple2 (tuple2 b1 d1) d1 (t2tb692 z) (t2tb694 w)))
  (parallel_product d1 c1 (tuple2 b1 d1) (tuple2 a1 c1) (t2tb686 h)
  (t2tb689 k)))
  (and (mem24
  (tb2t691 (Tuple2 (tuple2 a1 c1) (tuple2 b1 d1) (t2tb133 x) (t2tb692 z))) h)
  (mem21 (tb2t693 (Tuple2 c1 d1 (t2tb135 y) (t2tb694 w))) k)))))

(declare-fun t2tb5451 ((set (tuple21 (tuple21 (tuple21 a c) b)
  (tuple21 (tuple21 b d) d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 a c) b) (tuple21 (tuple21 b d)
  d))))) (sort
  (set1 (tuple2 (tuple2 (tuple2 a1 c1) b1) (tuple2 (tuple2 b1 d1) d1)))
  (t2tb5451 x))))

(declare-fun tb2t5451 (uni) (set (tuple21 (tuple21 (tuple21 a c) b)
  (tuple21 (tuple21 b d) d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 a c) b) (tuple21 (tuple21 b d)
  d))))) (! (= (tb2t5451 (t2tb5451 i)) i) :pattern ((t2tb5451 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 (tuple2 a1 c1) b1) (tuple2 (tuple2 b1 d1) d1))) j)
     (= (t2tb5451 (tb2t5451 j)) j)) :pattern ((t2tb5451 (tb2t5451 j))) )))

(declare-fun t2tb5452 ((tuple21 (tuple21 (tuple21 a c) b) (tuple21 (tuple21 b
  d) d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 a c) b) (tuple21 (tuple21 b d) d))))
  (sort (tuple2 (tuple2 (tuple2 a1 c1) b1) (tuple2 (tuple2 b1 d1) d1))
  (t2tb5452 x))))

(declare-fun tb2t5452 (uni) (tuple21 (tuple21 (tuple21 a c) b)
  (tuple21 (tuple21 b d) d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 a c) b) (tuple21 (tuple21 b d) d))))
  (! (= (tb2t5452 (t2tb5452 i)) i) :pattern ((t2tb5452 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 (tuple2 a1 c1) b1) (tuple2 (tuple2 b1 d1) d1))
     j) (= (t2tb5452 (tb2t5452 j)) j)) :pattern ((t2tb5452 (tb2t5452 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 (tuple21 a c) (tuple21 b d)))) (k (set (tuple21 b
  d))) (x (tuple21 a c)) (y b) (z (tuple21 b d)) (w d))
  (= (mem (tuple2 (tuple2 (tuple2 a1 c1) b1) (tuple2 (tuple2 b1 d1) d1))
  (Tuple2 (tuple2 (tuple2 a1 c1) b1) (tuple2 (tuple2 b1 d1) d1)
  (Tuple2 (tuple2 a1 c1) b1 (t2tb133 x) (t2tb14 y))
  (Tuple2 (tuple2 b1 d1) d1 (t2tb692 z) (t2tb694 w)))
  (parallel_product d1 b1 (tuple2 b1 d1) (tuple2 a1 c1) (t2tb686 h)
  (t2tb687 k)))
  (and (mem24
  (tb2t691 (Tuple2 (tuple2 a1 c1) (tuple2 b1 d1) (t2tb133 x) (t2tb692 z))) h)
  (mem23 (tb2t692 (Tuple2 b1 d1 (t2tb14 y) (t2tb694 w))) k)))))

(declare-fun t2tb5453 ((set (tuple21 (tuple21 (tuple21 a c) a)
  (tuple21 (tuple21 b d) c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 a c) a) (tuple21 (tuple21 b d)
  c))))) (sort
  (set1 (tuple2 (tuple2 (tuple2 a1 c1) a1) (tuple2 (tuple2 b1 d1) c1)))
  (t2tb5453 x))))

(declare-fun tb2t5453 (uni) (set (tuple21 (tuple21 (tuple21 a c) a)
  (tuple21 (tuple21 b d) c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 a c) a) (tuple21 (tuple21 b d)
  c))))) (! (= (tb2t5453 (t2tb5453 i)) i) :pattern ((t2tb5453 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 (tuple2 a1 c1) a1) (tuple2 (tuple2 b1 d1) c1))) j)
     (= (t2tb5453 (tb2t5453 j)) j)) :pattern ((t2tb5453 (tb2t5453 j))) )))

(declare-fun t2tb5454 ((tuple21 (tuple21 (tuple21 a c) a) (tuple21 (tuple21 b
  d) c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 a c) a) (tuple21 (tuple21 b d) c))))
  (sort (tuple2 (tuple2 (tuple2 a1 c1) a1) (tuple2 (tuple2 b1 d1) c1))
  (t2tb5454 x))))

(declare-fun tb2t5454 (uni) (tuple21 (tuple21 (tuple21 a c) a)
  (tuple21 (tuple21 b d) c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 a c) a) (tuple21 (tuple21 b d) c))))
  (! (= (tb2t5454 (t2tb5454 i)) i) :pattern ((t2tb5454 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 (tuple2 a1 c1) a1) (tuple2 (tuple2 b1 d1) c1))
     j) (= (t2tb5454 (tb2t5454 j)) j)) :pattern ((t2tb5454 (tb2t5454 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 (tuple21 a c) (tuple21 b d)))) (k (set (tuple21 a
  c))) (x (tuple21 a c)) (y a) (z (tuple21 b d)) (w c))
  (= (mem (tuple2 (tuple2 (tuple2 a1 c1) a1) (tuple2 (tuple2 b1 d1) c1))
  (Tuple2 (tuple2 (tuple2 a1 c1) a1) (tuple2 (tuple2 b1 d1) c1)
  (Tuple2 (tuple2 a1 c1) a1 (t2tb133 x) (t2tb2 y))
  (Tuple2 (tuple2 b1 d1) c1 (t2tb692 z) (t2tb135 w)))
  (parallel_product c1 a1 (tuple2 b1 d1) (tuple2 a1 c1) (t2tb686 h)
  (t2tb129 k)))
  (and (mem24
  (tb2t691 (Tuple2 (tuple2 a1 c1) (tuple2 b1 d1) (t2tb133 x) (t2tb692 z))) h)
  (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 y) (t2tb135 w))) k)))))

(declare-fun t2tb5455 ((set (tuple21 (tuple21 (tuple21 a c) a)
  (tuple21 (tuple21 b d) b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 a c) a) (tuple21 (tuple21 b d)
  b))))) (sort
  (set1 (tuple2 (tuple2 (tuple2 a1 c1) a1) (tuple2 (tuple2 b1 d1) b1)))
  (t2tb5455 x))))

(declare-fun tb2t5455 (uni) (set (tuple21 (tuple21 (tuple21 a c) a)
  (tuple21 (tuple21 b d) b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 a c) a) (tuple21 (tuple21 b d)
  b))))) (! (= (tb2t5455 (t2tb5455 i)) i) :pattern ((t2tb5455 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 (tuple2 a1 c1) a1) (tuple2 (tuple2 b1 d1) b1))) j)
     (= (t2tb5455 (tb2t5455 j)) j)) :pattern ((t2tb5455 (tb2t5455 j))) )))

(declare-fun t2tb5456 ((tuple21 (tuple21 (tuple21 a c) a) (tuple21 (tuple21 b
  d) b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 a c) a) (tuple21 (tuple21 b d) b))))
  (sort (tuple2 (tuple2 (tuple2 a1 c1) a1) (tuple2 (tuple2 b1 d1) b1))
  (t2tb5456 x))))

(declare-fun tb2t5456 (uni) (tuple21 (tuple21 (tuple21 a c) a)
  (tuple21 (tuple21 b d) b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 a c) a) (tuple21 (tuple21 b d) b))))
  (! (= (tb2t5456 (t2tb5456 i)) i) :pattern ((t2tb5456 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 (tuple2 a1 c1) a1) (tuple2 (tuple2 b1 d1) b1))
     j) (= (t2tb5456 (tb2t5456 j)) j)) :pattern ((t2tb5456 (tb2t5456 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 (tuple21 a c) (tuple21 b d)))) (k (set (tuple21 a
  b))) (x (tuple21 a c)) (y a) (z (tuple21 b d)) (w b))
  (= (mem (tuple2 (tuple2 (tuple2 a1 c1) a1) (tuple2 (tuple2 b1 d1) b1))
  (Tuple2 (tuple2 (tuple2 a1 c1) a1) (tuple2 (tuple2 b1 d1) b1)
  (Tuple2 (tuple2 a1 c1) a1 (t2tb133 x) (t2tb2 y))
  (Tuple2 (tuple2 b1 d1) b1 (t2tb692 z) (t2tb14 w)))
  (parallel_product b1 a1 (tuple2 b1 d1) (tuple2 a1 c1) (t2tb686 h)
  (t2tb11 k)))
  (and (mem24
  (tb2t691 (Tuple2 (tuple2 a1 c1) (tuple2 b1 d1) (t2tb133 x) (t2tb692 z))) h)
  (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 y) (t2tb14 w))) k)))))

;; mem_parallel_product
  (assert
  (forall ((c2 ty) (d2 ty))
  (forall ((h (set (tuple21 (tuple21 a c) (tuple21 b d)))) (k uni)
  (x (tuple21 a c)) (y uni) (z (tuple21 b d)) (w uni))
  (= (mem (tuple2 (tuple2 (tuple2 a1 c1) c2) (tuple2 (tuple2 b1 d1) d2))
  (Tuple2 (tuple2 (tuple2 a1 c1) c2) (tuple2 (tuple2 b1 d1) d2)
  (Tuple2 (tuple2 a1 c1) c2 (t2tb133 x) y)
  (Tuple2 (tuple2 b1 d1) d2 (t2tb692 z) w))
  (parallel_product d2 c2 (tuple2 b1 d1) (tuple2 a1 c1) (t2tb686 h) k))
  (and (mem24
  (tb2t691 (Tuple2 (tuple2 a1 c1) (tuple2 b1 d1) (t2tb133 x) (t2tb692 z))) h)
  (mem (tuple2 c2 d2) (Tuple2 c2 d2 y w) k))))))

(declare-fun t2tb5457 ((set (tuple21 (tuple21 c (tuple21 a c)) (tuple21 d
  (tuple21 b d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 c (tuple21 a c)) (tuple21 d (tuple21 b
  d)))))) (sort
  (set1 (tuple2 (tuple2 c1 (tuple2 a1 c1)) (tuple2 d1 (tuple2 b1 d1))))
  (t2tb5457 x))))

(declare-fun tb2t5457 (uni) (set (tuple21 (tuple21 c (tuple21 a c))
  (tuple21 d (tuple21 b d)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 c (tuple21 a c)) (tuple21 d (tuple21 b
  d)))))) (! (= (tb2t5457 (t2tb5457 i)) i) :pattern ((t2tb5457 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 c1 (tuple2 a1 c1)) (tuple2 d1 (tuple2 b1 d1)))) j)
     (= (t2tb5457 (tb2t5457 j)) j)) :pattern ((t2tb5457 (tb2t5457 j))) )))

(declare-fun t2tb5458 ((tuple21 (tuple21 c (tuple21 a c)) (tuple21 d
  (tuple21 b d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 c (tuple21 a c)) (tuple21 d (tuple21 b d)))))
  (sort (tuple2 (tuple2 c1 (tuple2 a1 c1)) (tuple2 d1 (tuple2 b1 d1)))
  (t2tb5458 x))))

(declare-fun tb2t5458 (uni) (tuple21 (tuple21 c (tuple21 a c)) (tuple21 d
  (tuple21 b d))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 c (tuple21 a c)) (tuple21 d (tuple21 b d)))))
  (! (= (tb2t5458 (t2tb5458 i)) i) :pattern ((t2tb5458 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 c1 (tuple2 a1 c1)) (tuple2 d1 (tuple2 b1 d1)))
     j) (= (t2tb5458 (tb2t5458 j)) j)) :pattern ((t2tb5458 (tb2t5458 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 c d))) (k (set (tuple21 (tuple21 a c) (tuple21 b
  d)))) (x c) (y (tuple21 a c)) (z d) (w (tuple21 b d)))
  (= (mem (tuple2 (tuple2 c1 (tuple2 a1 c1)) (tuple2 d1 (tuple2 b1 d1)))
  (Tuple2 (tuple2 c1 (tuple2 a1 c1)) (tuple2 d1 (tuple2 b1 d1))
  (Tuple2 c1 (tuple2 a1 c1) (t2tb135 x) (t2tb133 y))
  (Tuple2 d1 (tuple2 b1 d1) (t2tb694 z) (t2tb692 w)))
  (parallel_product (tuple2 b1 d1) (tuple2 a1 c1) d1 c1 (t2tb689 h)
  (t2tb686 k)))
  (and (mem21 (tb2t693 (Tuple2 c1 d1 (t2tb135 x) (t2tb694 z))) h) (mem24
  (tb2t691 (Tuple2 (tuple2 a1 c1) (tuple2 b1 d1) (t2tb133 y) (t2tb692 w)))
  k)))))

(declare-fun t2tb5459 ((set (tuple21 (tuple21 c c) (tuple21 d d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 c c) (tuple21 d d))))) (sort
  (set1 (tuple2 (tuple2 c1 c1) (tuple2 d1 d1))) (t2tb5459 x))))

(declare-fun tb2t5459 (uni) (set (tuple21 (tuple21 c c) (tuple21 d d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 c c) (tuple21 d d)))))
  (! (= (tb2t5459 (t2tb5459 i)) i) :pattern ((t2tb5459 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 c1 c1) (tuple2 d1 d1))) j)
     (= (t2tb5459 (tb2t5459 j)) j)) :pattern ((t2tb5459 (tb2t5459 j))) )))

(declare-fun t2tb5460 ((tuple21 (tuple21 c c) (tuple21 d d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 c c) (tuple21 d d)))) (sort
  (tuple2 (tuple2 c1 c1) (tuple2 d1 d1)) (t2tb5460 x))))

(declare-fun tb2t5460 (uni) (tuple21 (tuple21 c c) (tuple21 d d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 c c) (tuple21 d d))))
  (! (= (tb2t5460 (t2tb5460 i)) i) :pattern ((t2tb5460 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 c1 c1) (tuple2 d1 d1)) j)
     (= (t2tb5460 (tb2t5460 j)) j)) :pattern ((t2tb5460 (tb2t5460 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 c d))) (k (set (tuple21 c d))) (x c) (y c) (z d)
  (w d))
  (= (mem (tuple2 (tuple2 c1 c1) (tuple2 d1 d1))
  (Tuple2 (tuple2 c1 c1) (tuple2 d1 d1)
  (Tuple2 c1 c1 (t2tb135 x) (t2tb135 y))
  (Tuple2 d1 d1 (t2tb694 z) (t2tb694 w)))
  (parallel_product d1 c1 d1 c1 (t2tb689 h) (t2tb689 k)))
  (and (mem21 (tb2t693 (Tuple2 c1 d1 (t2tb135 x) (t2tb694 z))) h) (mem21
  (tb2t693 (Tuple2 c1 d1 (t2tb135 y) (t2tb694 w))) k)))))

(declare-fun t2tb5461 ((set (tuple21 (tuple21 c b) (tuple21 d d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 c b) (tuple21 d d))))) (sort
  (set1 (tuple2 (tuple2 c1 b1) (tuple2 d1 d1))) (t2tb5461 x))))

(declare-fun tb2t5461 (uni) (set (tuple21 (tuple21 c b) (tuple21 d d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 c b) (tuple21 d d)))))
  (! (= (tb2t5461 (t2tb5461 i)) i) :pattern ((t2tb5461 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 c1 b1) (tuple2 d1 d1))) j)
     (= (t2tb5461 (tb2t5461 j)) j)) :pattern ((t2tb5461 (tb2t5461 j))) )))

(declare-fun t2tb5462 ((tuple21 (tuple21 c b) (tuple21 d d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 c b) (tuple21 d d)))) (sort
  (tuple2 (tuple2 c1 b1) (tuple2 d1 d1)) (t2tb5462 x))))

(declare-fun tb2t5462 (uni) (tuple21 (tuple21 c b) (tuple21 d d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 c b) (tuple21 d d))))
  (! (= (tb2t5462 (t2tb5462 i)) i) :pattern ((t2tb5462 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 c1 b1) (tuple2 d1 d1)) j)
     (= (t2tb5462 (tb2t5462 j)) j)) :pattern ((t2tb5462 (tb2t5462 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 c d))) (k (set (tuple21 b d))) (x c) (y b) (z d)
  (w d))
  (= (mem (tuple2 (tuple2 c1 b1) (tuple2 d1 d1))
  (Tuple2 (tuple2 c1 b1) (tuple2 d1 d1) (Tuple2 c1 b1 (t2tb135 x) (t2tb14 y))
  (Tuple2 d1 d1 (t2tb694 z) (t2tb694 w)))
  (parallel_product d1 b1 d1 c1 (t2tb689 h) (t2tb687 k)))
  (and (mem21 (tb2t693 (Tuple2 c1 d1 (t2tb135 x) (t2tb694 z))) h) (mem23
  (tb2t692 (Tuple2 b1 d1 (t2tb14 y) (t2tb694 w))) k)))))

(declare-fun t2tb5463 ((set (tuple21 (tuple21 c a) (tuple21 d c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 c a) (tuple21 d c))))) (sort
  (set1 (tuple2 (tuple2 c1 a1) (tuple2 d1 c1))) (t2tb5463 x))))

(declare-fun tb2t5463 (uni) (set (tuple21 (tuple21 c a) (tuple21 d c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 c a) (tuple21 d c)))))
  (! (= (tb2t5463 (t2tb5463 i)) i) :pattern ((t2tb5463 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 c1 a1) (tuple2 d1 c1))) j)
     (= (t2tb5463 (tb2t5463 j)) j)) :pattern ((t2tb5463 (tb2t5463 j))) )))

(declare-fun t2tb5464 ((tuple21 (tuple21 c a) (tuple21 d c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 c a) (tuple21 d c)))) (sort
  (tuple2 (tuple2 c1 a1) (tuple2 d1 c1)) (t2tb5464 x))))

(declare-fun tb2t5464 (uni) (tuple21 (tuple21 c a) (tuple21 d c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 c a) (tuple21 d c))))
  (! (= (tb2t5464 (t2tb5464 i)) i) :pattern ((t2tb5464 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 c1 a1) (tuple2 d1 c1)) j)
     (= (t2tb5464 (tb2t5464 j)) j)) :pattern ((t2tb5464 (tb2t5464 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 c d))) (k (set (tuple21 a c))) (x c) (y a) (z d)
  (w c))
  (= (mem (tuple2 (tuple2 c1 a1) (tuple2 d1 c1))
  (Tuple2 (tuple2 c1 a1) (tuple2 d1 c1) (Tuple2 c1 a1 (t2tb135 x) (t2tb2 y))
  (Tuple2 d1 c1 (t2tb694 z) (t2tb135 w)))
  (parallel_product c1 a1 d1 c1 (t2tb689 h) (t2tb129 k)))
  (and (mem21 (tb2t693 (Tuple2 c1 d1 (t2tb135 x) (t2tb694 z))) h) (mem10
  (tb2t133 (Tuple2 a1 c1 (t2tb2 y) (t2tb135 w))) k)))))

(declare-fun t2tb5465 ((set (tuple21 (tuple21 c a) (tuple21 d b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 c a) (tuple21 d b))))) (sort
  (set1 (tuple2 (tuple2 c1 a1) (tuple2 d1 b1))) (t2tb5465 x))))

(declare-fun tb2t5465 (uni) (set (tuple21 (tuple21 c a) (tuple21 d b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 c a) (tuple21 d b)))))
  (! (= (tb2t5465 (t2tb5465 i)) i) :pattern ((t2tb5465 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 c1 a1) (tuple2 d1 b1))) j)
     (= (t2tb5465 (tb2t5465 j)) j)) :pattern ((t2tb5465 (tb2t5465 j))) )))

(declare-fun t2tb5466 ((tuple21 (tuple21 c a) (tuple21 d b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 c a) (tuple21 d b)))) (sort
  (tuple2 (tuple2 c1 a1) (tuple2 d1 b1)) (t2tb5466 x))))

(declare-fun tb2t5466 (uni) (tuple21 (tuple21 c a) (tuple21 d b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 c a) (tuple21 d b))))
  (! (= (tb2t5466 (t2tb5466 i)) i) :pattern ((t2tb5466 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 c1 a1) (tuple2 d1 b1)) j)
     (= (t2tb5466 (tb2t5466 j)) j)) :pattern ((t2tb5466 (tb2t5466 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 c d))) (k (set (tuple21 a b))) (x c) (y a) (z d)
  (w b))
  (= (mem (tuple2 (tuple2 c1 a1) (tuple2 d1 b1))
  (Tuple2 (tuple2 c1 a1) (tuple2 d1 b1) (Tuple2 c1 a1 (t2tb135 x) (t2tb2 y))
  (Tuple2 d1 b1 (t2tb694 z) (t2tb14 w)))
  (parallel_product b1 a1 d1 c1 (t2tb689 h) (t2tb11 k)))
  (and (mem21 (tb2t693 (Tuple2 c1 d1 (t2tb135 x) (t2tb694 z))) h) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 y) (t2tb14 w))) k)))))

;; mem_parallel_product
  (assert
  (forall ((c2 ty) (d2 ty))
  (forall ((h (set (tuple21 c d))) (k uni) (x c) (y uni) (z d) (w uni))
  (= (mem (tuple2 (tuple2 c1 c2) (tuple2 d1 d2))
  (Tuple2 (tuple2 c1 c2) (tuple2 d1 d2) (Tuple2 c1 c2 (t2tb135 x) y)
  (Tuple2 d1 d2 (t2tb694 z) w)) (parallel_product d2 c2 d1 c1 (t2tb689 h) k))
  (and (mem21 (tb2t693 (Tuple2 c1 d1 (t2tb135 x) (t2tb694 z))) h) (mem
  (tuple2 c2 d2) (Tuple2 c2 d2 y w) k))))))

(declare-fun t2tb5467 ((set (tuple21 (tuple21 b (tuple21 a c)) (tuple21 d
  (tuple21 b d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b (tuple21 a c)) (tuple21 d (tuple21 b
  d)))))) (sort
  (set1 (tuple2 (tuple2 b1 (tuple2 a1 c1)) (tuple2 d1 (tuple2 b1 d1))))
  (t2tb5467 x))))

(declare-fun tb2t5467 (uni) (set (tuple21 (tuple21 b (tuple21 a c))
  (tuple21 d (tuple21 b d)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b (tuple21 a c)) (tuple21 d (tuple21 b
  d)))))) (! (= (tb2t5467 (t2tb5467 i)) i) :pattern ((t2tb5467 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 b1 (tuple2 a1 c1)) (tuple2 d1 (tuple2 b1 d1)))) j)
     (= (t2tb5467 (tb2t5467 j)) j)) :pattern ((t2tb5467 (tb2t5467 j))) )))

(declare-fun t2tb5468 ((tuple21 (tuple21 b (tuple21 a c)) (tuple21 d
  (tuple21 b d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b (tuple21 a c)) (tuple21 d (tuple21 b d)))))
  (sort (tuple2 (tuple2 b1 (tuple2 a1 c1)) (tuple2 d1 (tuple2 b1 d1)))
  (t2tb5468 x))))

(declare-fun tb2t5468 (uni) (tuple21 (tuple21 b (tuple21 a c)) (tuple21 d
  (tuple21 b d))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b (tuple21 a c)) (tuple21 d (tuple21 b d)))))
  (! (= (tb2t5468 (t2tb5468 i)) i) :pattern ((t2tb5468 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 (tuple2 a1 c1)) (tuple2 d1 (tuple2 b1 d1)))
     j) (= (t2tb5468 (tb2t5468 j)) j)) :pattern ((t2tb5468 (tb2t5468 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 b d))) (k (set (tuple21 (tuple21 a c) (tuple21 b
  d)))) (x b) (y (tuple21 a c)) (z d) (w (tuple21 b d)))
  (= (mem (tuple2 (tuple2 b1 (tuple2 a1 c1)) (tuple2 d1 (tuple2 b1 d1)))
  (Tuple2 (tuple2 b1 (tuple2 a1 c1)) (tuple2 d1 (tuple2 b1 d1))
  (Tuple2 b1 (tuple2 a1 c1) (t2tb14 x) (t2tb133 y))
  (Tuple2 d1 (tuple2 b1 d1) (t2tb694 z) (t2tb692 w)))
  (parallel_product (tuple2 b1 d1) (tuple2 a1 c1) d1 b1 (t2tb687 h)
  (t2tb686 k)))
  (and (mem23 (tb2t692 (Tuple2 b1 d1 (t2tb14 x) (t2tb694 z))) h) (mem24
  (tb2t691 (Tuple2 (tuple2 a1 c1) (tuple2 b1 d1) (t2tb133 y) (t2tb692 w)))
  k)))))

(declare-fun t2tb5469 ((set (tuple21 (tuple21 b c) (tuple21 d d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b c) (tuple21 d d))))) (sort
  (set1 (tuple2 (tuple2 b1 c1) (tuple2 d1 d1))) (t2tb5469 x))))

(declare-fun tb2t5469 (uni) (set (tuple21 (tuple21 b c) (tuple21 d d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b c) (tuple21 d d)))))
  (! (= (tb2t5469 (t2tb5469 i)) i) :pattern ((t2tb5469 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 c1) (tuple2 d1 d1))) j)
     (= (t2tb5469 (tb2t5469 j)) j)) :pattern ((t2tb5469 (tb2t5469 j))) )))

(declare-fun t2tb5470 ((tuple21 (tuple21 b c) (tuple21 d d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b c) (tuple21 d d)))) (sort
  (tuple2 (tuple2 b1 c1) (tuple2 d1 d1)) (t2tb5470 x))))

(declare-fun tb2t5470 (uni) (tuple21 (tuple21 b c) (tuple21 d d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b c) (tuple21 d d))))
  (! (= (tb2t5470 (t2tb5470 i)) i) :pattern ((t2tb5470 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 c1) (tuple2 d1 d1)) j)
     (= (t2tb5470 (tb2t5470 j)) j)) :pattern ((t2tb5470 (tb2t5470 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 b d))) (k (set (tuple21 c d))) (x b) (y c) (z d)
  (w d))
  (= (mem (tuple2 (tuple2 b1 c1) (tuple2 d1 d1))
  (Tuple2 (tuple2 b1 c1) (tuple2 d1 d1) (Tuple2 b1 c1 (t2tb14 x) (t2tb135 y))
  (Tuple2 d1 d1 (t2tb694 z) (t2tb694 w)))
  (parallel_product d1 c1 d1 b1 (t2tb687 h) (t2tb689 k)))
  (and (mem23 (tb2t692 (Tuple2 b1 d1 (t2tb14 x) (t2tb694 z))) h) (mem21
  (tb2t693 (Tuple2 c1 d1 (t2tb135 y) (t2tb694 w))) k)))))

(declare-fun t2tb5471 ((set (tuple21 (tuple21 b b) (tuple21 d d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b b) (tuple21 d d))))) (sort
  (set1 (tuple2 (tuple2 b1 b1) (tuple2 d1 d1))) (t2tb5471 x))))

(declare-fun tb2t5471 (uni) (set (tuple21 (tuple21 b b) (tuple21 d d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b b) (tuple21 d d)))))
  (! (= (tb2t5471 (t2tb5471 i)) i) :pattern ((t2tb5471 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 b1) (tuple2 d1 d1))) j)
     (= (t2tb5471 (tb2t5471 j)) j)) :pattern ((t2tb5471 (tb2t5471 j))) )))

(declare-fun t2tb5472 ((tuple21 (tuple21 b b) (tuple21 d d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b b) (tuple21 d d)))) (sort
  (tuple2 (tuple2 b1 b1) (tuple2 d1 d1)) (t2tb5472 x))))

(declare-fun tb2t5472 (uni) (tuple21 (tuple21 b b) (tuple21 d d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b b) (tuple21 d d))))
  (! (= (tb2t5472 (t2tb5472 i)) i) :pattern ((t2tb5472 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 b1) (tuple2 d1 d1)) j)
     (= (t2tb5472 (tb2t5472 j)) j)) :pattern ((t2tb5472 (tb2t5472 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 b d))) (k (set (tuple21 b d))) (x b) (y b) (z d)
  (w d))
  (= (mem (tuple2 (tuple2 b1 b1) (tuple2 d1 d1))
  (Tuple2 (tuple2 b1 b1) (tuple2 d1 d1) (Tuple2 b1 b1 (t2tb14 x) (t2tb14 y))
  (Tuple2 d1 d1 (t2tb694 z) (t2tb694 w)))
  (parallel_product d1 b1 d1 b1 (t2tb687 h) (t2tb687 k)))
  (and (mem23 (tb2t692 (Tuple2 b1 d1 (t2tb14 x) (t2tb694 z))) h) (mem23
  (tb2t692 (Tuple2 b1 d1 (t2tb14 y) (t2tb694 w))) k)))))

(declare-fun t2tb5473 ((set (tuple21 (tuple21 b a) (tuple21 d c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b a) (tuple21 d c))))) (sort
  (set1 (tuple2 (tuple2 b1 a1) (tuple2 d1 c1))) (t2tb5473 x))))

(declare-fun tb2t5473 (uni) (set (tuple21 (tuple21 b a) (tuple21 d c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b a) (tuple21 d c)))))
  (! (= (tb2t5473 (t2tb5473 i)) i) :pattern ((t2tb5473 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 a1) (tuple2 d1 c1))) j)
     (= (t2tb5473 (tb2t5473 j)) j)) :pattern ((t2tb5473 (tb2t5473 j))) )))

(declare-fun t2tb5474 ((tuple21 (tuple21 b a) (tuple21 d c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b a) (tuple21 d c)))) (sort
  (tuple2 (tuple2 b1 a1) (tuple2 d1 c1)) (t2tb5474 x))))

(declare-fun tb2t5474 (uni) (tuple21 (tuple21 b a) (tuple21 d c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b a) (tuple21 d c))))
  (! (= (tb2t5474 (t2tb5474 i)) i) :pattern ((t2tb5474 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 a1) (tuple2 d1 c1)) j)
     (= (t2tb5474 (tb2t5474 j)) j)) :pattern ((t2tb5474 (tb2t5474 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 b d))) (k (set (tuple21 a c))) (x b) (y a) (z d)
  (w c))
  (= (mem (tuple2 (tuple2 b1 a1) (tuple2 d1 c1))
  (Tuple2 (tuple2 b1 a1) (tuple2 d1 c1) (Tuple2 b1 a1 (t2tb14 x) (t2tb2 y))
  (Tuple2 d1 c1 (t2tb694 z) (t2tb135 w)))
  (parallel_product c1 a1 d1 b1 (t2tb687 h) (t2tb129 k)))
  (and (mem23 (tb2t692 (Tuple2 b1 d1 (t2tb14 x) (t2tb694 z))) h) (mem10
  (tb2t133 (Tuple2 a1 c1 (t2tb2 y) (t2tb135 w))) k)))))

(declare-fun t2tb5475 ((set (tuple21 (tuple21 b a) (tuple21 d b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b a) (tuple21 d b))))) (sort
  (set1 (tuple2 (tuple2 b1 a1) (tuple2 d1 b1))) (t2tb5475 x))))

(declare-fun tb2t5475 (uni) (set (tuple21 (tuple21 b a) (tuple21 d b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b a) (tuple21 d b)))))
  (! (= (tb2t5475 (t2tb5475 i)) i) :pattern ((t2tb5475 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 a1) (tuple2 d1 b1))) j)
     (= (t2tb5475 (tb2t5475 j)) j)) :pattern ((t2tb5475 (tb2t5475 j))) )))

(declare-fun t2tb5476 ((tuple21 (tuple21 b a) (tuple21 d b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b a) (tuple21 d b)))) (sort
  (tuple2 (tuple2 b1 a1) (tuple2 d1 b1)) (t2tb5476 x))))

(declare-fun tb2t5476 (uni) (tuple21 (tuple21 b a) (tuple21 d b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b a) (tuple21 d b))))
  (! (= (tb2t5476 (t2tb5476 i)) i) :pattern ((t2tb5476 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 a1) (tuple2 d1 b1)) j)
     (= (t2tb5476 (tb2t5476 j)) j)) :pattern ((t2tb5476 (tb2t5476 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 b d))) (k (set (tuple21 a b))) (x b) (y a) (z d)
  (w b))
  (= (mem (tuple2 (tuple2 b1 a1) (tuple2 d1 b1))
  (Tuple2 (tuple2 b1 a1) (tuple2 d1 b1) (Tuple2 b1 a1 (t2tb14 x) (t2tb2 y))
  (Tuple2 d1 b1 (t2tb694 z) (t2tb14 w)))
  (parallel_product b1 a1 d1 b1 (t2tb687 h) (t2tb11 k)))
  (and (mem23 (tb2t692 (Tuple2 b1 d1 (t2tb14 x) (t2tb694 z))) h) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 y) (t2tb14 w))) k)))))

;; mem_parallel_product
  (assert
  (forall ((c2 ty) (d2 ty))
  (forall ((h (set (tuple21 b d))) (k uni) (x b) (y uni) (z d) (w uni))
  (= (mem (tuple2 (tuple2 b1 c2) (tuple2 d1 d2))
  (Tuple2 (tuple2 b1 c2) (tuple2 d1 d2) (Tuple2 b1 c2 (t2tb14 x) y)
  (Tuple2 d1 d2 (t2tb694 z) w)) (parallel_product d2 c2 d1 b1 (t2tb687 h) k))
  (and (mem23 (tb2t692 (Tuple2 b1 d1 (t2tb14 x) (t2tb694 z))) h) (mem
  (tuple2 c2 d2) (Tuple2 c2 d2 y w) k))))))

(declare-fun t2tb5477 ((set (tuple21 (tuple21 a (tuple21 a c)) (tuple21 c
  (tuple21 b d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a (tuple21 a c)) (tuple21 c (tuple21 b
  d)))))) (sort
  (set1 (tuple2 (tuple2 a1 (tuple2 a1 c1)) (tuple2 c1 (tuple2 b1 d1))))
  (t2tb5477 x))))

(declare-fun tb2t5477 (uni) (set (tuple21 (tuple21 a (tuple21 a c))
  (tuple21 c (tuple21 b d)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a (tuple21 a c)) (tuple21 c (tuple21 b
  d)))))) (! (= (tb2t5477 (t2tb5477 i)) i) :pattern ((t2tb5477 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 a1 (tuple2 a1 c1)) (tuple2 c1 (tuple2 b1 d1)))) j)
     (= (t2tb5477 (tb2t5477 j)) j)) :pattern ((t2tb5477 (tb2t5477 j))) )))

(declare-fun t2tb5478 ((tuple21 (tuple21 a (tuple21 a c)) (tuple21 c
  (tuple21 b d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a (tuple21 a c)) (tuple21 c (tuple21 b d)))))
  (sort (tuple2 (tuple2 a1 (tuple2 a1 c1)) (tuple2 c1 (tuple2 b1 d1)))
  (t2tb5478 x))))

(declare-fun tb2t5478 (uni) (tuple21 (tuple21 a (tuple21 a c)) (tuple21 c
  (tuple21 b d))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a (tuple21 a c)) (tuple21 c (tuple21 b d)))))
  (! (= (tb2t5478 (t2tb5478 i)) i) :pattern ((t2tb5478 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 (tuple2 a1 c1)) (tuple2 c1 (tuple2 b1 d1)))
     j) (= (t2tb5478 (tb2t5478 j)) j)) :pattern ((t2tb5478 (tb2t5478 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a c))) (k (set (tuple21 (tuple21 a c) (tuple21 b
  d)))) (x a) (y (tuple21 a c)) (z c) (w (tuple21 b d)))
  (= (mem (tuple2 (tuple2 a1 (tuple2 a1 c1)) (tuple2 c1 (tuple2 b1 d1)))
  (Tuple2 (tuple2 a1 (tuple2 a1 c1)) (tuple2 c1 (tuple2 b1 d1))
  (Tuple2 a1 (tuple2 a1 c1) (t2tb2 x) (t2tb133 y))
  (Tuple2 c1 (tuple2 b1 d1) (t2tb135 z) (t2tb692 w)))
  (parallel_product (tuple2 b1 d1) (tuple2 a1 c1) c1 a1 (t2tb129 h)
  (t2tb686 k)))
  (and (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 z))) h) (mem24
  (tb2t691 (Tuple2 (tuple2 a1 c1) (tuple2 b1 d1) (t2tb133 y) (t2tb692 w)))
  k)))))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a c))) (k (set (tuple21 c d))) (x a) (y c) (z c)
  (w d))
  (= (mem (tuple2 (tuple2 a1 c1) (tuple2 c1 d1))
  (Tuple2 (tuple2 a1 c1) (tuple2 c1 d1) (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y))
  (Tuple2 c1 d1 (t2tb135 z) (t2tb694 w)))
  (parallel_product d1 c1 c1 a1 (t2tb129 h) (t2tb689 k)))
  (and (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 z))) h) (mem21
  (tb2t693 (Tuple2 c1 d1 (t2tb135 y) (t2tb694 w))) k)))))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a c))) (k (set (tuple21 b d))) (x a) (y b) (z c)
  (w d))
  (= (mem (tuple2 (tuple2 a1 b1) (tuple2 c1 d1))
  (Tuple2 (tuple2 a1 b1) (tuple2 c1 d1) (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y))
  (Tuple2 c1 d1 (t2tb135 z) (t2tb694 w)))
  (parallel_product d1 b1 c1 a1 (t2tb129 h) (t2tb687 k)))
  (and (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 z))) h) (mem23
  (tb2t692 (Tuple2 b1 d1 (t2tb14 y) (t2tb694 w))) k)))))

(declare-fun t2tb342 ((set (tuple21 (tuple21 a a) (tuple21 c c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a a) (tuple21 c c))))) (sort
  (set1 (tuple2 (tuple2 a1 a1) (tuple2 c1 c1))) (t2tb342 x))))

(declare-fun tb2t342 (uni) (set (tuple21 (tuple21 a a) (tuple21 c c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a a) (tuple21 c c)))))
  (! (= (tb2t342 (t2tb342 i)) i) :pattern ((t2tb342 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 a1) (tuple2 c1 c1))) j)
     (= (t2tb342 (tb2t342 j)) j)) :pattern ((t2tb342 (tb2t342 j))) )))

(declare-fun t2tb343 ((tuple21 (tuple21 a a) (tuple21 c c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a a) (tuple21 c c)))) (sort
  (tuple2 (tuple2 a1 a1) (tuple2 c1 c1)) (t2tb343 x))))

(declare-fun tb2t343 (uni) (tuple21 (tuple21 a a) (tuple21 c c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a a) (tuple21 c c))))
  (! (= (tb2t343 (t2tb343 i)) i) :pattern ((t2tb343 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 a1) (tuple2 c1 c1)) j)
     (= (t2tb343 (tb2t343 j)) j)) :pattern ((t2tb343 (tb2t343 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a c))) (k (set (tuple21 a c))) (x a) (y a) (z c)
  (w c))
  (= (mem (tuple2 (tuple2 a1 a1) (tuple2 c1 c1))
  (Tuple2 (tuple2 a1 a1) (tuple2 c1 c1) (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y))
  (Tuple2 c1 c1 (t2tb135 z) (t2tb135 w)))
  (parallel_product c1 a1 c1 a1 (t2tb129 h) (t2tb129 k)))
  (and (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 z))) h) (mem10
  (tb2t133 (Tuple2 a1 c1 (t2tb2 y) (t2tb135 w))) k)))))

(declare-fun t2tb344 ((set (tuple21 (tuple21 a a) (tuple21 c b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a a) (tuple21 c b))))) (sort
  (set1 (tuple2 (tuple2 a1 a1) (tuple2 c1 b1))) (t2tb344 x))))

(declare-fun tb2t344 (uni) (set (tuple21 (tuple21 a a) (tuple21 c b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a a) (tuple21 c b)))))
  (! (= (tb2t344 (t2tb344 i)) i) :pattern ((t2tb344 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 a1) (tuple2 c1 b1))) j)
     (= (t2tb344 (tb2t344 j)) j)) :pattern ((t2tb344 (tb2t344 j))) )))

(declare-fun t2tb345 ((tuple21 (tuple21 a a) (tuple21 c b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a a) (tuple21 c b)))) (sort
  (tuple2 (tuple2 a1 a1) (tuple2 c1 b1)) (t2tb345 x))))

(declare-fun tb2t345 (uni) (tuple21 (tuple21 a a) (tuple21 c b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a a) (tuple21 c b))))
  (! (= (tb2t345 (t2tb345 i)) i) :pattern ((t2tb345 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 a1) (tuple2 c1 b1)) j)
     (= (t2tb345 (tb2t345 j)) j)) :pattern ((t2tb345 (tb2t345 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a c))) (k (set (tuple21 a b))) (x a) (y a) (z c)
  (w b))
  (= (mem (tuple2 (tuple2 a1 a1) (tuple2 c1 b1))
  (Tuple2 (tuple2 a1 a1) (tuple2 c1 b1) (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y))
  (Tuple2 c1 b1 (t2tb135 z) (t2tb14 w)))
  (parallel_product b1 a1 c1 a1 (t2tb129 h) (t2tb11 k)))
  (and (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 z))) h) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 y) (t2tb14 w))) k)))))

;; mem_parallel_product
  (assert
  (forall ((c2 ty) (d2 ty))
  (forall ((h (set (tuple21 a c))) (k uni) (x a) (y uni) (z c) (w uni))
  (= (mem (tuple2 (tuple2 a1 c2) (tuple2 c1 d2))
  (Tuple2 (tuple2 a1 c2) (tuple2 c1 d2) (Tuple2 a1 c2 (t2tb2 x) y)
  (Tuple2 c1 d2 (t2tb135 z) w)) (parallel_product d2 c2 c1 a1 (t2tb129 h) k))
  (and (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 z))) h) (mem
  (tuple2 c2 d2) (Tuple2 c2 d2 y w) k))))))

(declare-fun t2tb5479 ((set (tuple21 (tuple21 a (tuple21 a c)) (tuple21 b
  (tuple21 b d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a (tuple21 a c)) (tuple21 b (tuple21 b
  d)))))) (sort
  (set1 (tuple2 (tuple2 a1 (tuple2 a1 c1)) (tuple2 b1 (tuple2 b1 d1))))
  (t2tb5479 x))))

(declare-fun tb2t5479 (uni) (set (tuple21 (tuple21 a (tuple21 a c))
  (tuple21 b (tuple21 b d)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a (tuple21 a c)) (tuple21 b (tuple21 b
  d)))))) (! (= (tb2t5479 (t2tb5479 i)) i) :pattern ((t2tb5479 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 a1 (tuple2 a1 c1)) (tuple2 b1 (tuple2 b1 d1)))) j)
     (= (t2tb5479 (tb2t5479 j)) j)) :pattern ((t2tb5479 (tb2t5479 j))) )))

(declare-fun t2tb5480 ((tuple21 (tuple21 a (tuple21 a c)) (tuple21 b
  (tuple21 b d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a (tuple21 a c)) (tuple21 b (tuple21 b d)))))
  (sort (tuple2 (tuple2 a1 (tuple2 a1 c1)) (tuple2 b1 (tuple2 b1 d1)))
  (t2tb5480 x))))

(declare-fun tb2t5480 (uni) (tuple21 (tuple21 a (tuple21 a c)) (tuple21 b
  (tuple21 b d))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a (tuple21 a c)) (tuple21 b (tuple21 b d)))))
  (! (= (tb2t5480 (t2tb5480 i)) i) :pattern ((t2tb5480 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 (tuple2 a1 c1)) (tuple2 b1 (tuple2 b1 d1)))
     j) (= (t2tb5480 (tb2t5480 j)) j)) :pattern ((t2tb5480 (tb2t5480 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a b))) (k (set (tuple21 (tuple21 a c) (tuple21 b
  d)))) (x a) (y (tuple21 a c)) (z b) (w (tuple21 b d)))
  (= (mem (tuple2 (tuple2 a1 (tuple2 a1 c1)) (tuple2 b1 (tuple2 b1 d1)))
  (Tuple2 (tuple2 a1 (tuple2 a1 c1)) (tuple2 b1 (tuple2 b1 d1))
  (Tuple2 a1 (tuple2 a1 c1) (t2tb2 x) (t2tb133 y))
  (Tuple2 b1 (tuple2 b1 d1) (t2tb14 z) (t2tb692 w)))
  (parallel_product (tuple2 b1 d1) (tuple2 a1 c1) b1 a1 (t2tb11 h)
  (t2tb686 k)))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 z))) h) (mem24
  (tb2t691 (Tuple2 (tuple2 a1 c1) (tuple2 b1 d1) (t2tb133 y) (t2tb692 w)))
  k)))))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a b))) (k (set (tuple21 c d))) (x a) (y c) (z b)
  (w d))
  (= (mem24
  (tb2t691
  (Tuple2 (tuple2 a1 c1) (tuple2 b1 d1) (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y))
  (Tuple2 b1 d1 (t2tb14 z) (t2tb694 w)))) (parallel_product1 h k))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 z))) h) (mem21
  (tb2t693 (Tuple2 c1 d1 (t2tb135 y) (t2tb694 w))) k)))))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a b))) (k (set (tuple21 b d))) (x a) (y b) (z b)
  (w d))
  (= (mem (tuple2 (tuple2 a1 b1) (tuple2 b1 d1))
  (Tuple2 (tuple2 a1 b1) (tuple2 b1 d1) (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y))
  (Tuple2 b1 d1 (t2tb14 z) (t2tb694 w)))
  (parallel_product d1 b1 b1 a1 (t2tb11 h) (t2tb687 k)))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 z))) h) (mem23
  (tb2t692 (Tuple2 b1 d1 (t2tb14 y) (t2tb694 w))) k)))))

(declare-fun t2tb346 ((tuple21 (tuple21 a a) (tuple21 b c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a a) (tuple21 b c)))) (sort
  (tuple2 (tuple2 a1 a1) (tuple2 b1 c1)) (t2tb346 x))))

(declare-fun tb2t346 (uni) (tuple21 (tuple21 a a) (tuple21 b c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a a) (tuple21 b c))))
  (! (= (tb2t346 (t2tb346 i)) i) :pattern ((t2tb346 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 a1) (tuple2 b1 c1)) j)
     (= (t2tb346 (tb2t346 j)) j)) :pattern ((t2tb346 (tb2t346 j))) )))

(declare-fun t2tb347 ((set (tuple21 (tuple21 a a) (tuple21 b c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a a) (tuple21 b c))))) (sort
  (set1 (tuple2 (tuple2 a1 a1) (tuple2 b1 c1))) (t2tb347 x))))

(declare-fun tb2t347 (uni) (set (tuple21 (tuple21 a a) (tuple21 b c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a a) (tuple21 b c)))))
  (! (= (tb2t347 (t2tb347 i)) i) :pattern ((t2tb347 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 a1) (tuple2 b1 c1))) j)
     (= (t2tb347 (tb2t347 j)) j)) :pattern ((t2tb347 (tb2t347 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a b))) (k (set (tuple21 a c))) (x a) (y a) (z b)
  (w c))
  (= (mem (tuple2 (tuple2 a1 a1) (tuple2 b1 c1))
  (Tuple2 (tuple2 a1 a1) (tuple2 b1 c1) (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y))
  (Tuple2 b1 c1 (t2tb14 z) (t2tb135 w)))
  (parallel_product c1 a1 b1 a1 (t2tb11 h) (t2tb129 k)))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 z))) h) (mem10
  (tb2t133 (Tuple2 a1 c1 (t2tb2 y) (t2tb135 w))) k)))))

(declare-fun t2tb61 ((set (tuple21 (tuple21 a a) (tuple21 b b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a a) (tuple21 b b))))) (sort
  (set1 (tuple2 (tuple2 a1 a1) (tuple2 b1 b1))) (t2tb61 x))))

(declare-fun tb2t61 (uni) (set (tuple21 (tuple21 a a) (tuple21 b b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a a) (tuple21 b b)))))
  (! (= (tb2t61 (t2tb61 i)) i) :pattern ((t2tb61 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 a1) (tuple2 b1 b1))) j)
     (= (t2tb61 (tb2t61 j)) j)) :pattern ((t2tb61 (tb2t61 j))) )))

(declare-fun t2tb62 ((tuple21 (tuple21 a a) (tuple21 b b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a a) (tuple21 b b)))) (sort
  (tuple2 (tuple2 a1 a1) (tuple2 b1 b1)) (t2tb62 x))))

(declare-fun tb2t62 (uni) (tuple21 (tuple21 a a) (tuple21 b b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a a) (tuple21 b b))))
  (! (= (tb2t62 (t2tb62 i)) i) :pattern ((t2tb62 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 a1) (tuple2 b1 b1)) j)
     (= (t2tb62 (tb2t62 j)) j)) :pattern ((t2tb62 (tb2t62 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a b))) (k (set (tuple21 a b))) (x a) (y a) (z b)
  (w b))
  (= (mem (tuple2 (tuple2 a1 a1) (tuple2 b1 b1))
  (Tuple2 (tuple2 a1 a1) (tuple2 b1 b1) (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y))
  (Tuple2 b1 b1 (t2tb14 z) (t2tb14 w)))
  (parallel_product b1 a1 b1 a1 (t2tb11 h) (t2tb11 k)))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 z))) h) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 y) (t2tb14 w))) k)))))

;; mem_parallel_product
  (assert
  (forall ((c2 ty) (d2 ty))
  (forall ((h (set (tuple21 a b))) (k uni) (x a) (y uni) (z b) (w uni))
  (= (mem (tuple2 (tuple2 a1 c2) (tuple2 b1 d2))
  (Tuple2 (tuple2 a1 c2) (tuple2 b1 d2) (Tuple2 a1 c2 (t2tb2 x) y)
  (Tuple2 b1 d2 (t2tb14 z) w)) (parallel_product d2 c2 b1 a1 (t2tb11 h) k))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 z))) h) (mem
  (tuple2 c2 d2) (Tuple2 c2 d2 y w) k))))))

;; mem_parallel_product
  (assert
  (forall ((a2 ty) (b2 ty) (c2 ty) (d2 ty))
  (forall ((h uni) (k uni) (x uni) (y uni) (z uni) (w uni))
  (= (mem (tuple2 (tuple2 a2 c2) (tuple2 b2 d2))
  (Tuple2 (tuple2 a2 c2) (tuple2 b2 d2) (Tuple2 a2 c2 x y)
  (Tuple2 b2 d2 z w)) (parallel_product d2 c2 b2 a2 h k))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x z) h) (mem (tuple2 c2 d2)
  (Tuple2 c2 d2 y w) k))))))

(declare-fun infix_plmngt (ty ty uni uni) uni)

;; infix +->_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (set1 (tuple2 a2 b2)))
  (infix_plmngt b2 a2 x x1)))))

;; mem_partial_function_set
  (assert
  (forall ((s (set (tuple21 a c))) (t (set (tuple21 b d)))
  (f2 (set (tuple21 (tuple21 a c) (tuple21 b d)))))
  (= (mem (set1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))) (t2tb686 f2)
  (infix_plmngt (tuple2 b1 d1) (tuple2 a1 c1) (t2tb129 s) (t2tb687 t)))
  (and (mem (set1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))) (t2tb686 f2)
  (relation (tuple2 b1 d1) (tuple2 a1 c1) (t2tb129 s) (t2tb687 t)))
  (forall ((x (tuple21 a c)) (y1 (tuple21 b d)) (y2 (tuple21 b d)))
  (=>
  (and (mem24
  (tb2t691 (Tuple2 (tuple2 a1 c1) (tuple2 b1 d1) (t2tb133 x) (t2tb692 y1)))
  f2) (mem24
  (tb2t691 (Tuple2 (tuple2 a1 c1) (tuple2 b1 d1) (t2tb133 x) (t2tb692 y2)))
  f2)) (= y1 y2)))))))

;; mem_partial_function_set
  (assert
  (forall ((s (set c)) (t (set d)) (f2 (set (tuple21 c d))))
  (= (mem22 f2 (tb2t688 (infix_plmngt d1 c1 (t2tb132 s) (t2tb690 t))))
  (and (mem22 f2 (relation7 s t))
  (forall ((x c) (y1 d) (y2 d))
  (=>
  (and (mem21 (tb2t693 (Tuple2 c1 d1 (t2tb135 x) (t2tb694 y1))) f2) (mem21
  (tb2t693 (Tuple2 c1 d1 (t2tb135 x) (t2tb694 y2))) f2)) (= y1 y2)))))))

;; mem_partial_function_set
  (assert
  (forall ((s (set b)) (t (set d)) (f2 (set (tuple21 b d))))
  (= (mem (set1 (tuple2 b1 d1)) (t2tb687 f2)
  (infix_plmngt d1 b1 (t2tb12 s) (t2tb690 t)))
  (and (mem (set1 (tuple2 b1 d1)) (t2tb687 f2)
  (relation d1 b1 (t2tb12 s) (t2tb690 t)))
  (forall ((x b) (y1 d) (y2 d))
  (=>
  (and (mem23 (tb2t692 (Tuple2 b1 d1 (t2tb14 x) (t2tb694 y1))) f2) (mem23
  (tb2t692 (Tuple2 b1 d1 (t2tb14 x) (t2tb694 y2))) f2)) (= y1 y2)))))))

;; mem_partial_function_set
  (assert
  (forall ((s (set a)) (t (set c)) (f2 (set (tuple21 a c))))
  (= (mem (set1 (tuple2 a1 c1)) (t2tb129 f2)
  (infix_plmngt c1 a1 (t2tb1 s) (t2tb132 t)))
  (and (mem (set1 (tuple2 a1 c1)) (t2tb129 f2)
  (relation c1 a1 (t2tb1 s) (t2tb132 t)))
  (forall ((x a) (y1 c) (y2 c))
  (=>
  (and (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y1))) f2) (mem10
  (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y2))) f2)) (= y1 y2)))))))

;; mem_partial_function_set
  (assert
  (forall ((s (set a)) (t (set b)) (f2 (set (tuple21 a b))))
  (= (mem4 f2 (tb2t10 (infix_plmngt b1 a1 (t2tb1 s) (t2tb12 t))))
  (and (mem4 f2 (relation1 s t))
  (forall ((x a) (y1 b) (y2 b))
  (=>
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y1))) f2) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y2))) f2)) (= y1 y2)))))))

;; mem_partial_function_set
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (f2 uni))
  (and
  (=> (mem (set1 (tuple2 a2 b2)) f2 (infix_plmngt b2 a2 s t))
  (and (mem (set1 (tuple2 a2 b2)) f2 (relation b2 a2 s t))
  (forall ((x uni) (y1 uni) (y2 uni))
  (=> (sort b2 y1)
  (=> (sort b2 y2)
  (=>
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y1) f2) (mem (tuple2 a2 b2)
  (Tuple2 a2 b2 x y2) f2)) (= y1 y2)))))))
  (=>
  (and (mem (set1 (tuple2 a2 b2)) f2 (relation b2 a2 s t))
  (forall ((x uni) (y1 uni) (y2 uni))
  (=> (sort a2 x)
  (=> (sort b2 y1)
  (=> (sort b2 y2)
  (=>
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y1) f2) (mem (tuple2 a2 b2)
  (Tuple2 a2 b2 x y2) f2)) (= y1 y2))))))) (mem (set1 (tuple2 a2 b2)) f2
  (infix_plmngt b2 a2 s t)))))))

(declare-fun infix_mnmngt (ty ty uni uni) uni)

;; infix -->_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (set1 (tuple2 a2 b2)))
  (infix_mnmngt b2 a2 x x1)))))

;; mem_total_function_set
  (assert
  (forall ((b2 ty))
  (forall ((s (set (tuple21 (tuple21 a c) (tuple21 b d)))) (t uni) (x uni))
  (= (mem (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) b2)) x
  (infix_mnmngt b2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb686 s) t))
  (and (mem (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) b2)) x
  (infix_plmngt b2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb686 s) t))
  (infix_eqeq15 (tb2t686 (dom b2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) x))
  s))))))

;; mem_total_function_set
  (assert
  (forall ((b2 ty))
  (forall ((s (set (tuple21 b d))) (t uni) (x uni))
  (= (mem (set1 (tuple2 (tuple2 b1 d1) b2)) x
  (infix_mnmngt b2 (tuple2 b1 d1) (t2tb687 s) t))
  (and (mem (set1 (tuple2 (tuple2 b1 d1) b2)) x
  (infix_plmngt b2 (tuple2 b1 d1) (t2tb687 s) t)) (infix_eqeq22
  (tb2t687 (dom b2 (tuple2 b1 d1) x)) s))))))

;; mem_total_function_set
  (assert
  (forall ((b2 ty))
  (forall ((s (set (set (tuple21 c d)))) (t uni) (x uni))
  (= (mem (set1 (tuple2 (set1 (tuple2 c1 d1)) b2)) x
  (infix_mnmngt b2 (set1 (tuple2 c1 d1)) (t2tb688 s) t))
  (and (mem (set1 (tuple2 (set1 (tuple2 c1 d1)) b2)) x
  (infix_plmngt b2 (set1 (tuple2 c1 d1)) (t2tb688 s) t)) (infix_eqeq16
  (tb2t688 (dom b2 (set1 (tuple2 c1 d1)) x)) s))))))

;; mem_total_function_set
  (assert
  (forall ((b2 ty))
  (forall ((s (set (tuple21 c d))) (t uni) (x uni))
  (= (mem (set1 (tuple2 (tuple2 c1 d1) b2)) x
  (infix_mnmngt b2 (tuple2 c1 d1) (t2tb689 s) t))
  (and (mem (set1 (tuple2 (tuple2 c1 d1) b2)) x
  (infix_plmngt b2 (tuple2 c1 d1) (t2tb689 s) t)) (infix_eqeq14
  (tb2t689 (dom b2 (tuple2 c1 d1) x)) s))))))

;; mem_total_function_set
  (assert
  (forall ((b2 ty))
  (forall ((s (set d)) (t uni) (x uni))
  (= (mem (set1 (tuple2 d1 b2)) x (infix_mnmngt b2 d1 (t2tb690 s) t))
  (and (mem (set1 (tuple2 d1 b2)) x (infix_plmngt b2 d1 (t2tb690 s) t))
  (infix_eqeq13 (tb2t690 (dom b2 d1 x)) s))))))

;; mem_total_function_set
  (assert
  (forall ((b2 ty))
  (forall ((s (set (tuple21 a c))) (t uni) (x uni))
  (= (mem (set1 (tuple2 (tuple2 a1 c1) b2)) x
  (infix_mnmngt b2 (tuple2 a1 c1) (t2tb129 s) t))
  (and (mem (set1 (tuple2 (tuple2 a1 c1) b2)) x
  (infix_plmngt b2 (tuple2 a1 c1) (t2tb129 s) t)) (infix_eqeq9
  (tb2t129 (dom b2 (tuple2 a1 c1) x)) s))))))

;; mem_total_function_set
  (assert
  (forall ((s (set c)) (t (set d)) (x (set (tuple21 c d))))
  (= (mem22 x (tb2t688 (infix_mnmngt d1 c1 (t2tb132 s) (t2tb690 t))))
  (and (mem22 x (tb2t688 (infix_plmngt d1 c1 (t2tb132 s) (t2tb690 t))))
  (infix_eqeq7 (tb2t132 (dom d1 c1 (t2tb689 x))) s)))))

;; mem_total_function_set
  (assert
  (forall ((b2 ty))
  (forall ((s (set c)) (t uni) (x uni))
  (= (mem (set1 (tuple2 c1 b2)) x (infix_mnmngt b2 c1 (t2tb132 s) t))
  (and (mem (set1 (tuple2 c1 b2)) x (infix_plmngt b2 c1 (t2tb132 s) t))
  (infix_eqeq7 (tb2t132 (dom b2 c1 x)) s))))))

;; mem_total_function_set
  (assert
  (forall ((b2 ty))
  (forall ((s (set (set (tuple21 a b)))) (t uni) (x uni))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 b1)) b2)) x
  (infix_mnmngt b2 (set1 (tuple2 a1 b1)) (t2tb10 s) t))
  (and (mem (set1 (tuple2 (set1 (tuple2 a1 b1)) b2)) x
  (infix_plmngt b2 (set1 (tuple2 a1 b1)) (t2tb10 s) t)) (infix_eqeq5
  (tb2t10 (dom b2 (set1 (tuple2 a1 b1)) x)) s))))))

;; mem_total_function_set
  (assert
  (forall ((b2 ty))
  (forall ((s (set (tuple21 a b))) (t uni) (x uni))
  (= (mem (set1 (tuple2 (tuple2 a1 b1) b2)) x
  (infix_mnmngt b2 (tuple2 a1 b1) (t2tb11 s) t))
  (and (mem (set1 (tuple2 (tuple2 a1 b1) b2)) x
  (infix_plmngt b2 (tuple2 a1 b1) (t2tb11 s) t)) (infix_eqeq4
  (tb2t11 (dom b2 (tuple2 a1 b1) x)) s))))))

;; mem_total_function_set
  (assert
  (forall ((b2 ty))
  (forall ((s (set b)) (t uni) (x uni))
  (= (mem (set1 (tuple2 b1 b2)) x (infix_mnmngt b2 b1 (t2tb12 s) t))
  (and (mem (set1 (tuple2 b1 b2)) x (infix_plmngt b2 b1 (t2tb12 s) t))
  (infix_eqeq3 (tb2t12 (dom b2 b1 x)) s))))))

;; mem_total_function_set
  (assert
  (forall ((s (set a)) (t (set b)) (x (set (tuple21 a b))))
  (= (mem4 x (tb2t10 (infix_mnmngt b1 a1 (t2tb1 s) (t2tb12 t))))
  (and (mem4 x (tb2t10 (infix_plmngt b1 a1 (t2tb1 s) (t2tb12 t))))
  (infix_eqeq1 (tb2t1 (dom b1 a1 (t2tb11 x))) s)))))

;; mem_total_function_set
  (assert
  (forall ((b2 ty))
  (forall ((s (set a)) (t uni) (x uni))
  (= (mem (set1 (tuple2 a1 b2)) x (infix_mnmngt b2 a1 (t2tb1 s) t))
  (and (mem (set1 (tuple2 a1 b2)) x (infix_plmngt b2 a1 (t2tb1 s) t))
  (infix_eqeq1 (tb2t1 (dom b2 a1 x)) s))))))

;; mem_total_function_set
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (x uni))
  (= (mem (set1 (tuple2 a2 b2)) x (infix_mnmngt b2 a2 s t))
  (and (mem (set1 (tuple2 a2 b2)) x (infix_plmngt b2 a2 s t)) (infix_eqeq a2
  (dom b2 a2 x) s))))))

(declare-fun infix_gtplgt (ty ty uni uni) uni)

;; infix >+>_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (set1 (tuple2 a2 b2)))
  (infix_gtplgt b2 a2 x x1)))))

;; mem_partial_injection_set
  (assert
  (forall ((s (set d)) (t (set c)) (x (set (tuple21 d c))))
  (= (mem (set1 (tuple2 d1 c1)) (t2tb829 x)
  (infix_gtplgt c1 d1 (t2tb690 s) (t2tb132 t)))
  (and (mem (set1 (tuple2 d1 c1)) (t2tb829 x)
  (infix_plmngt c1 d1 (t2tb690 s) (t2tb132 t))) (mem22
  (tb2t689 (inverse c1 d1 (t2tb829 x)))
  (tb2t688 (infix_plmngt d1 c1 (t2tb132 t) (t2tb690 s))))))))

;; mem_partial_injection_set
  (assert
  (forall ((s (set c)) (t (set d)) (x (set (tuple21 c d))))
  (= (mem22 x (tb2t688 (infix_gtplgt d1 c1 (t2tb132 s) (t2tb690 t))))
  (and (mem22 x (tb2t688 (infix_plmngt d1 c1 (t2tb132 s) (t2tb690 t)))) (mem
  (set1 (tuple2 d1 c1)) (inverse d1 c1 (t2tb689 x))
  (infix_plmngt c1 d1 (t2tb690 t) (t2tb132 s)))))))

;; mem_partial_injection_set
  (assert
  (forall ((s (set b)) (t (set a)) (x (set (tuple21 b a))))
  (= (mem (set1 (tuple2 b1 a1)) (t2tb37 x)
  (infix_gtplgt a1 b1 (t2tb12 s) (t2tb1 t)))
  (and (mem (set1 (tuple2 b1 a1)) (t2tb37 x)
  (infix_plmngt a1 b1 (t2tb12 s) (t2tb1 t))) (mem4
  (tb2t11 (inverse a1 b1 (t2tb37 x)))
  (tb2t10 (infix_plmngt b1 a1 (t2tb1 t) (t2tb12 s))))))))

;; mem_partial_injection_set
  (assert
  (forall ((s (set a)) (t (set b)) (x (set (tuple21 a b))))
  (= (mem4 x (tb2t10 (infix_gtplgt b1 a1 (t2tb1 s) (t2tb12 t))))
  (and (mem4 x (tb2t10 (infix_plmngt b1 a1 (t2tb1 s) (t2tb12 t)))) (mem
  (set1 (tuple2 b1 a1)) (inverse b1 a1 (t2tb11 x))
  (infix_plmngt a1 b1 (t2tb12 t) (t2tb1 s)))))))

;; mem_partial_injection_set
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (x uni))
  (= (mem (set1 (tuple2 a2 b2)) x (infix_gtplgt b2 a2 s t))
  (and (mem (set1 (tuple2 a2 b2)) x (infix_plmngt b2 a2 s t)) (mem
  (set1 (tuple2 b2 a2)) (inverse b2 a2 x) (infix_plmngt a2 b2 t s)))))))

(declare-fun infix_gtmngt (ty ty uni uni) uni)

;; infix >->_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (set1 (tuple2 a2 b2)))
  (infix_gtmngt b2 a2 x x1)))))

;; mem_total_injection_set
  (assert
  (forall ((s (set c)) (t (set d)) (x (set (tuple21 c d))))
  (= (mem22 x (tb2t688 (infix_gtmngt d1 c1 (t2tb132 s) (t2tb690 t))))
  (and (mem22 x (tb2t688 (infix_gtplgt d1 c1 (t2tb132 s) (t2tb690 t))))
  (mem22 x (tb2t688 (infix_mnmngt d1 c1 (t2tb132 s) (t2tb690 t))))))))

;; mem_total_injection_set
  (assert
  (forall ((s (set a)) (t (set b)) (x (set (tuple21 a b))))
  (= (mem4 x (tb2t10 (infix_gtmngt b1 a1 (t2tb1 s) (t2tb12 t))))
  (and (mem4 x (tb2t10 (infix_gtplgt b1 a1 (t2tb1 s) (t2tb12 t)))) (mem4 x
  (tb2t10 (infix_mnmngt b1 a1 (t2tb1 s) (t2tb12 t))))))))

;; mem_total_injection_set
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (x uni))
  (= (mem (set1 (tuple2 a2 b2)) x (infix_gtmngt b2 a2 s t))
  (and (mem (set1 (tuple2 a2 b2)) x (infix_gtplgt b2 a2 s t)) (mem
  (set1 (tuple2 a2 b2)) x (infix_mnmngt b2 a2 s t)))))))

(declare-fun infix_plmngtgt (ty ty uni uni) uni)

;; infix +->>_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (set1 (tuple2 a2 b2)))
  (infix_plmngtgt b2 a2 x x1)))))

;; mem_partial_surjection_set
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set (tuple21 (tuple21 a c) (tuple21 b d)))) (x uni))
  (= (mem (set1 (tuple2 a2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))) x
  (infix_plmngtgt (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) a2 s (t2tb686 t)))
  (and (mem (set1 (tuple2 a2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))) x
  (infix_plmngt (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) a2 s (t2tb686 t)))
  (infix_eqeq15 (tb2t686 (ran (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) a2 x))
  t))))))

;; mem_partial_surjection_set
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set (tuple21 b d))) (x uni))
  (= (mem (set1 (tuple2 a2 (tuple2 b1 d1))) x
  (infix_plmngtgt (tuple2 b1 d1) a2 s (t2tb687 t)))
  (and (mem (set1 (tuple2 a2 (tuple2 b1 d1))) x
  (infix_plmngt (tuple2 b1 d1) a2 s (t2tb687 t))) (infix_eqeq22
  (tb2t687 (ran (tuple2 b1 d1) a2 x)) t))))))

;; mem_partial_surjection_set
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set (set (tuple21 c d)))) (x uni))
  (= (mem (set1 (tuple2 a2 (set1 (tuple2 c1 d1)))) x
  (infix_plmngtgt (set1 (tuple2 c1 d1)) a2 s (t2tb688 t)))
  (and (mem (set1 (tuple2 a2 (set1 (tuple2 c1 d1)))) x
  (infix_plmngt (set1 (tuple2 c1 d1)) a2 s (t2tb688 t))) (infix_eqeq16
  (tb2t688 (ran (set1 (tuple2 c1 d1)) a2 x)) t))))))

;; mem_partial_surjection_set
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set (tuple21 c d))) (x uni))
  (= (mem (set1 (tuple2 a2 (tuple2 c1 d1))) x
  (infix_plmngtgt (tuple2 c1 d1) a2 s (t2tb689 t)))
  (and (mem (set1 (tuple2 a2 (tuple2 c1 d1))) x
  (infix_plmngt (tuple2 c1 d1) a2 s (t2tb689 t))) (infix_eqeq14
  (tb2t689 (ran (tuple2 c1 d1) a2 x)) t))))))

;; mem_partial_surjection_set
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set d)) (x uni))
  (= (mem (set1 (tuple2 a2 d1)) x (infix_plmngtgt d1 a2 s (t2tb690 t)))
  (and (mem (set1 (tuple2 a2 d1)) x (infix_plmngt d1 a2 s (t2tb690 t)))
  (infix_eqeq13 (tb2t690 (ran d1 a2 x)) t))))))

;; mem_partial_surjection_set
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set (tuple21 a c))) (x uni))
  (= (mem (set1 (tuple2 a2 (tuple2 a1 c1))) x
  (infix_plmngtgt (tuple2 a1 c1) a2 s (t2tb129 t)))
  (and (mem (set1 (tuple2 a2 (tuple2 a1 c1))) x
  (infix_plmngt (tuple2 a1 c1) a2 s (t2tb129 t))) (infix_eqeq9
  (tb2t129 (ran (tuple2 a1 c1) a2 x)) t))))))

;; mem_partial_surjection_set
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set c)) (x uni))
  (= (mem (set1 (tuple2 a2 c1)) x (infix_plmngtgt c1 a2 s (t2tb132 t)))
  (and (mem (set1 (tuple2 a2 c1)) x (infix_plmngt c1 a2 s (t2tb132 t)))
  (infix_eqeq7 (tb2t132 (ran c1 a2 x)) t))))))

;; mem_partial_surjection_set
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set (set (tuple21 a b)))) (x uni))
  (= (mem (set1 (tuple2 a2 (set1 (tuple2 a1 b1)))) x
  (infix_plmngtgt (set1 (tuple2 a1 b1)) a2 s (t2tb10 t)))
  (and (mem (set1 (tuple2 a2 (set1 (tuple2 a1 b1)))) x
  (infix_plmngt (set1 (tuple2 a1 b1)) a2 s (t2tb10 t))) (infix_eqeq5
  (tb2t10 (ran (set1 (tuple2 a1 b1)) a2 x)) t))))))

;; mem_partial_surjection_set
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set (tuple21 a b))) (x uni))
  (= (mem (set1 (tuple2 a2 (tuple2 a1 b1))) x
  (infix_plmngtgt (tuple2 a1 b1) a2 s (t2tb11 t)))
  (and (mem (set1 (tuple2 a2 (tuple2 a1 b1))) x
  (infix_plmngt (tuple2 a1 b1) a2 s (t2tb11 t))) (infix_eqeq4
  (tb2t11 (ran (tuple2 a1 b1) a2 x)) t))))))

;; mem_partial_surjection_set
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set b)) (x uni))
  (= (mem (set1 (tuple2 a2 b1)) x (infix_plmngtgt b1 a2 s (t2tb12 t)))
  (and (mem (set1 (tuple2 a2 b1)) x (infix_plmngt b1 a2 s (t2tb12 t)))
  (infix_eqeq3 (tb2t12 (ran b1 a2 x)) t))))))

;; mem_partial_surjection_set
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set a)) (x uni))
  (= (mem (set1 (tuple2 a2 a1)) x (infix_plmngtgt a1 a2 s (t2tb1 t)))
  (and (mem (set1 (tuple2 a2 a1)) x (infix_plmngt a1 a2 s (t2tb1 t)))
  (infix_eqeq1 (tb2t1 (ran a1 a2 x)) t))))))

;; mem_partial_surjection_set
  (assert
  (forall ((s (set c)) (t (set d)) (x (set (tuple21 c d))))
  (= (mem22 x (tb2t688 (infix_plmngtgt d1 c1 (t2tb132 s) (t2tb690 t))))
  (and (mem22 x (tb2t688 (infix_plmngt d1 c1 (t2tb132 s) (t2tb690 t))))
  (infix_eqeq13 (tb2t690 (ran d1 c1 (t2tb689 x))) t)))))

;; mem_partial_surjection_set
  (assert
  (forall ((s (set a)) (t (set b)) (x (set (tuple21 a b))))
  (= (mem4 x (tb2t10 (infix_plmngtgt b1 a1 (t2tb1 s) (t2tb12 t))))
  (and (mem4 x (tb2t10 (infix_plmngt b1 a1 (t2tb1 s) (t2tb12 t))))
  (infix_eqeq3 (tb2t12 (ran b1 a1 (t2tb11 x))) t)))))

;; mem_partial_surjection_set
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (x uni))
  (= (mem (set1 (tuple2 a2 b2)) x (infix_plmngtgt b2 a2 s t))
  (and (mem (set1 (tuple2 a2 b2)) x (infix_plmngt b2 a2 s t)) (infix_eqeq b2
  (ran b2 a2 x) t))))))

(declare-fun infix_mnmngtgt (ty ty uni uni) uni)

;; infix -->>_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (set1 (tuple2 a2 b2)))
  (infix_mnmngtgt b2 a2 x x1)))))

;; mem_total_surjection_set
  (assert
  (forall ((s (set c)) (t (set d)) (x (set (tuple21 c d))))
  (= (mem22 x (tb2t688 (infix_mnmngtgt d1 c1 (t2tb132 s) (t2tb690 t))))
  (and (mem22 x (tb2t688 (infix_plmngtgt d1 c1 (t2tb132 s) (t2tb690 t))))
  (mem22 x (tb2t688 (infix_mnmngt d1 c1 (t2tb132 s) (t2tb690 t))))))))

;; mem_total_surjection_set
  (assert
  (forall ((s (set a)) (t (set b)) (x (set (tuple21 a b))))
  (= (mem4 x (tb2t10 (infix_mnmngtgt b1 a1 (t2tb1 s) (t2tb12 t))))
  (and (mem4 x (tb2t10 (infix_plmngtgt b1 a1 (t2tb1 s) (t2tb12 t)))) (mem4 x
  (tb2t10 (infix_mnmngt b1 a1 (t2tb1 s) (t2tb12 t))))))))

;; mem_total_surjection_set
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (x uni))
  (= (mem (set1 (tuple2 a2 b2)) x (infix_mnmngtgt b2 a2 s t))
  (and (mem (set1 (tuple2 a2 b2)) x (infix_plmngtgt b2 a2 s t)) (mem
  (set1 (tuple2 a2 b2)) x (infix_mnmngt b2 a2 s t)))))))

(declare-fun infix_gtplgtgt (ty ty uni uni) uni)

;; infix >+>>_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (set1 (tuple2 a2 b2)))
  (infix_gtplgtgt b2 a2 x x1)))))

;; mem_partial_bijection_set
  (assert
  (forall ((s (set c)) (t (set d)) (x (set (tuple21 c d))))
  (= (mem22 x (tb2t688 (infix_gtplgtgt d1 c1 (t2tb132 s) (t2tb690 t))))
  (and (mem22 x (tb2t688 (infix_gtplgt d1 c1 (t2tb132 s) (t2tb690 t))))
  (mem22 x (tb2t688 (infix_plmngtgt d1 c1 (t2tb132 s) (t2tb690 t))))))))

;; mem_partial_bijection_set
  (assert
  (forall ((s (set a)) (t (set b)) (x (set (tuple21 a b))))
  (= (mem4 x (tb2t10 (infix_gtplgtgt b1 a1 (t2tb1 s) (t2tb12 t))))
  (and (mem4 x (tb2t10 (infix_gtplgt b1 a1 (t2tb1 s) (t2tb12 t)))) (mem4 x
  (tb2t10 (infix_plmngtgt b1 a1 (t2tb1 s) (t2tb12 t))))))))

;; mem_partial_bijection_set
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (x uni))
  (= (mem (set1 (tuple2 a2 b2)) x (infix_gtplgtgt b2 a2 s t))
  (and (mem (set1 (tuple2 a2 b2)) x (infix_gtplgt b2 a2 s t)) (mem
  (set1 (tuple2 a2 b2)) x (infix_plmngtgt b2 a2 s t)))))))

(declare-fun infix_gtmngtgt (ty ty uni uni) uni)

;; infix >->>_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (set1 (tuple2 a2 b2)))
  (infix_gtmngtgt b2 a2 x x1)))))

;; mem_total_bijection_set
  (assert
  (forall ((s (set c)) (t (set d)) (x (set (tuple21 c d))))
  (= (mem22 x (tb2t688 (infix_gtmngtgt d1 c1 (t2tb132 s) (t2tb690 t))))
  (and (mem22 x (tb2t688 (infix_gtmngt d1 c1 (t2tb132 s) (t2tb690 t))))
  (mem22 x (tb2t688 (infix_mnmngtgt d1 c1 (t2tb132 s) (t2tb690 t))))))))

;; mem_total_bijection_set
  (assert
  (forall ((s (set a)) (t (set b)) (x (set (tuple21 a b))))
  (= (mem4 x (tb2t10 (infix_gtmngtgt b1 a1 (t2tb1 s) (t2tb12 t))))
  (and (mem4 x (tb2t10 (infix_gtmngt b1 a1 (t2tb1 s) (t2tb12 t)))) (mem4 x
  (tb2t10 (infix_mnmngtgt b1 a1 (t2tb1 s) (t2tb12 t))))))))

;; mem_total_bijection_set
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (x uni))
  (= (mem (set1 (tuple2 a2 b2)) x (infix_gtmngtgt b2 a2 s t))
  (and (mem (set1 (tuple2 a2 b2)) x (infix_gtmngt b2 a2 s t)) (mem
  (set1 (tuple2 a2 b2)) x (infix_mnmngtgt b2 a2 s t)))))))

(declare-fun apply (ty ty uni uni) uni)

;; apply_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort b2 (apply b2 a2 x x1)))))

;; apply_def0
  (assert
  (forall ((b2 ty))
  (forall ((f2 uni) (s (set (tuple21 (tuple21 a c) (tuple21 b d)))) (t uni)
  (a2 (tuple21 (tuple21 a c) (tuple21 b d))))
  (=>
  (and (mem (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) b2)) f2
  (infix_plmngt b2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb686 s) t))
  (mem24 a2 (tb2t686 (dom b2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) f2))))
  (mem (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) b2)
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) b2 (t2tb691 a2)
  (apply b2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) f2 (t2tb691 a2))) f2)))))

;; apply_def0
  (assert
  (forall ((b2 ty))
  (forall ((f2 uni) (s (set (tuple21 b d))) (t uni) (a2 (tuple21 b d)))
  (=>
  (and (mem (set1 (tuple2 (tuple2 b1 d1) b2)) f2
  (infix_plmngt b2 (tuple2 b1 d1) (t2tb687 s) t)) (mem23 a2
  (tb2t687 (dom b2 (tuple2 b1 d1) f2)))) (mem (tuple2 (tuple2 b1 d1) b2)
  (Tuple2 (tuple2 b1 d1) b2 (t2tb692 a2)
  (apply b2 (tuple2 b1 d1) f2 (t2tb692 a2))) f2)))))

;; apply_def0
  (assert
  (forall ((b2 ty))
  (forall ((f2 uni) (s (set (set (tuple21 c d)))) (t uni) (a2 (set (tuple21 c
  d))))
  (=>
  (and (mem (set1 (tuple2 (set1 (tuple2 c1 d1)) b2)) f2
  (infix_plmngt b2 (set1 (tuple2 c1 d1)) (t2tb688 s) t)) (mem22 a2
  (tb2t688 (dom b2 (set1 (tuple2 c1 d1)) f2)))) (mem
  (tuple2 (set1 (tuple2 c1 d1)) b2)
  (Tuple2 (set1 (tuple2 c1 d1)) b2 (t2tb689 a2)
  (apply b2 (set1 (tuple2 c1 d1)) f2 (t2tb689 a2))) f2)))))

;; apply_def0
  (assert
  (forall ((b2 ty))
  (forall ((f2 uni) (s (set (tuple21 c d))) (t uni) (a2 (tuple21 c d)))
  (=>
  (and (mem (set1 (tuple2 (tuple2 c1 d1) b2)) f2
  (infix_plmngt b2 (tuple2 c1 d1) (t2tb689 s) t)) (mem21 a2
  (tb2t689 (dom b2 (tuple2 c1 d1) f2)))) (mem (tuple2 (tuple2 c1 d1) b2)
  (Tuple2 (tuple2 c1 d1) b2 (t2tb693 a2)
  (apply b2 (tuple2 c1 d1) f2 (t2tb693 a2))) f2)))))

;; apply_def0
  (assert
  (forall ((b2 ty))
  (forall ((f2 uni) (s (set d)) (t uni) (a2 d))
  (=>
  (and (mem (set1 (tuple2 d1 b2)) f2 (infix_plmngt b2 d1 (t2tb690 s) t))
  (mem20 a2 (tb2t690 (dom b2 d1 f2)))) (mem (tuple2 d1 b2)
  (Tuple2 d1 b2 (t2tb694 a2) (apply b2 d1 f2 (t2tb694 a2))) f2)))))

;; apply_def0
  (assert
  (forall ((f2 (set (tuple21 (tuple21 a c) (tuple21 b d))))
  (s (set (tuple21 a c))) (t (set (tuple21 b d))) (a2 (tuple21 a c)))
  (=>
  (and (mem (set1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))) (t2tb686 f2)
  (infix_plmngt (tuple2 b1 d1) (tuple2 a1 c1) (t2tb129 s) (t2tb687 t)))
  (mem10 a2 (tb2t129 (dom (tuple2 b1 d1) (tuple2 a1 c1) (t2tb686 f2)))))
  (mem24
  (tb2t691
  (Tuple2 (tuple2 a1 c1) (tuple2 b1 d1) (t2tb133 a2)
  (apply (tuple2 b1 d1) (tuple2 a1 c1) (t2tb686 f2) (t2tb133 a2)))) f2))))

;; apply_def0
  (assert
  (forall ((b2 ty))
  (forall ((f2 uni) (s (set (tuple21 a c))) (t uni) (a2 (tuple21 a c)))
  (=>
  (and (mem (set1 (tuple2 (tuple2 a1 c1) b2)) f2
  (infix_plmngt b2 (tuple2 a1 c1) (t2tb129 s) t)) (mem10 a2
  (tb2t129 (dom b2 (tuple2 a1 c1) f2)))) (mem (tuple2 (tuple2 a1 c1) b2)
  (Tuple2 (tuple2 a1 c1) b2 (t2tb133 a2)
  (apply b2 (tuple2 a1 c1) f2 (t2tb133 a2))) f2)))))

;; apply_def0
  (assert
  (forall ((f2 (set (tuple21 c d))) (s (set c)) (t (set d)) (a2 c))
  (=>
  (and (mem22 f2 (tb2t688 (infix_plmngt d1 c1 (t2tb132 s) (t2tb690 t))))
  (mem7 a2 (tb2t132 (dom d1 c1 (t2tb689 f2))))) (mem21
  (tb2t693
  (Tuple2 c1 d1 (t2tb135 a2) (apply d1 c1 (t2tb689 f2) (t2tb135 a2)))) f2))))

;; apply_def0
  (assert
  (forall ((b2 ty))
  (forall ((f2 uni) (s (set c)) (t uni) (a2 c))
  (=>
  (and (mem (set1 (tuple2 c1 b2)) f2 (infix_plmngt b2 c1 (t2tb132 s) t))
  (mem7 a2 (tb2t132 (dom b2 c1 f2)))) (mem (tuple2 c1 b2)
  (Tuple2 c1 b2 (t2tb135 a2) (apply b2 c1 f2 (t2tb135 a2))) f2)))))

;; apply_def0
  (assert
  (forall ((b2 ty))
  (forall ((f2 uni) (s (set (set (tuple21 a b)))) (t uni) (a2 (set (tuple21 a
  b))))
  (=>
  (and (mem (set1 (tuple2 (set1 (tuple2 a1 b1)) b2)) f2
  (infix_plmngt b2 (set1 (tuple2 a1 b1)) (t2tb10 s) t)) (mem4 a2
  (tb2t10 (dom b2 (set1 (tuple2 a1 b1)) f2)))) (mem
  (tuple2 (set1 (tuple2 a1 b1)) b2)
  (Tuple2 (set1 (tuple2 a1 b1)) b2 (t2tb11 a2)
  (apply b2 (set1 (tuple2 a1 b1)) f2 (t2tb11 a2))) f2)))))

;; apply_def0
  (assert
  (forall ((b2 ty))
  (forall ((f2 uni) (s (set (tuple21 a b))) (t uni) (a2 (tuple21 a b)))
  (=>
  (and (mem (set1 (tuple2 (tuple2 a1 b1) b2)) f2
  (infix_plmngt b2 (tuple2 a1 b1) (t2tb11 s) t)) (mem3 a2
  (tb2t11 (dom b2 (tuple2 a1 b1) f2)))) (mem (tuple2 (tuple2 a1 b1) b2)
  (Tuple2 (tuple2 a1 b1) b2 (t2tb13 a2)
  (apply b2 (tuple2 a1 b1) f2 (t2tb13 a2))) f2)))))

;; apply_def0
  (assert
  (forall ((f2 (set (tuple21 b d))) (s (set b)) (t (set d)) (a2 b))
  (=>
  (and (mem (set1 (tuple2 b1 d1)) (t2tb687 f2)
  (infix_plmngt d1 b1 (t2tb12 s) (t2tb690 t))) (mem2 a2
  (tb2t12 (dom d1 b1 (t2tb687 f2))))) (mem23
  (tb2t692 (Tuple2 b1 d1 (t2tb14 a2) (apply d1 b1 (t2tb687 f2) (t2tb14 a2))))
  f2))))

;; apply_def0
  (assert
  (forall ((b2 ty))
  (forall ((f2 uni) (s (set b)) (t uni) (a2 b))
  (=>
  (and (mem (set1 (tuple2 b1 b2)) f2 (infix_plmngt b2 b1 (t2tb12 s) t)) (mem2
  a2 (tb2t12 (dom b2 b1 f2)))) (mem (tuple2 b1 b2)
  (Tuple2 b1 b2 (t2tb14 a2) (apply b2 b1 f2 (t2tb14 a2))) f2)))))

;; apply_def0
  (assert
  (forall ((f2 (set (tuple21 a c))) (s (set a)) (t (set c)) (a2 a))
  (=>
  (and (mem (set1 (tuple2 a1 c1)) (t2tb129 f2)
  (infix_plmngt c1 a1 (t2tb1 s) (t2tb132 t))) (mem1 a2
  (tb2t1 (dom c1 a1 (t2tb129 f2))))) (mem10
  (tb2t133 (Tuple2 a1 c1 (t2tb2 a2) (apply c1 a1 (t2tb129 f2) (t2tb2 a2))))
  f2))))

;; apply_def0
  (assert
  (forall ((f2 (set (tuple21 a b))) (s (set a)) (t (set b)) (a2 a))
  (=>
  (and (mem4 f2 (tb2t10 (infix_plmngt b1 a1 (t2tb1 s) (t2tb12 t)))) (mem1 a2
  (tb2t1 (dom b1 a1 (t2tb11 f2))))) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 a2) (apply b1 a1 (t2tb11 f2) (t2tb2 a2))))
  f2))))

;; apply_def0
  (assert
  (forall ((b2 ty))
  (forall ((f2 uni) (s (set a)) (t uni) (a2 a))
  (=>
  (and (mem (set1 (tuple2 a1 b2)) f2 (infix_plmngt b2 a1 (t2tb1 s) t)) (mem1
  a2 (tb2t1 (dom b2 a1 f2)))) (mem (tuple2 a1 b2)
  (Tuple2 a1 b2 (t2tb2 a2) (apply b2 a1 f2 (t2tb2 a2))) f2)))))

;; apply_def0
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((f2 uni) (s uni) (t uni) (a3 uni))
  (=>
  (and (mem (set1 (tuple2 a2 b2)) f2 (infix_plmngt b2 a2 s t)) (mem a2 a3
  (dom b2 a2 f2))) (mem (tuple2 a2 b2) (Tuple2 a2 b2 a3 (apply b2 a2 f2 a3))
  f2)))))

(assert
;; equal_image_10
 ;; File "lemmes_bbook.why", line 2359, characters 7-21
  (not
  (forall ((s (set a)) (u (set a)) (t (set b)) (w (set c)) (v (set c))
  (z (set d)) (p (set (tuple21 a b))) (q (set (tuple21 c d))))
  (=>
  (and (mem4 p (relation1 s t))
  (and (mem22 q (relation7 w z)) (and (subset2 u s) (subset9 v w))))
  (infix_eqeq22 (image11 (parallel_product1 p q) (times4 u v))
  (times10 (image1 p u) (image9 q v)))))))
(check-sat)
