(set-logic AUFBVDTLIRA)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
(declare-sort uni 0)

(declare-sort ty 0)

(declare-fun sort (ty uni) Bool)

(declare-fun witness (ty) uni)

;; witness_sort
  (assert (forall ((a2 ty)) (sort a2 (witness a2))))

(declare-fun int () ty)

(declare-fun real () ty)

(declare-sort set 1)

(declare-fun set1 (ty) ty)

(declare-sort f 0)

(declare-fun f1 () ty)

(declare-sort e 0)

(declare-fun e1 () ty)

(declare-sort d 0)

(declare-fun d1 () ty)

(declare-sort c 0)

(declare-fun c1 () ty)

(declare-sort b 0)

(declare-fun b1 () ty)

(declare-sort a 0)

(declare-fun a1 () ty)

(declare-sort tuple21 2)

(declare-fun tuple2 (ty ty) ty)

(declare-fun mem (ty uni uni) Bool)

(declare-fun mem1 (a (set a)) Bool)

(declare-fun mem2 (b (set b)) Bool)

(declare-fun mem3 ((tuple21 a b) (set (tuple21 a b))) Bool)

(declare-fun mem4 ((set (tuple21 a b)) (set (set (tuple21 a b)))) Bool)

(declare-fun mem7 (c (set c)) Bool)

(declare-fun mem20 (d (set d)) Bool)

(declare-fun mem21 ((tuple21 c d) (set (tuple21 c d))) Bool)

(declare-fun mem22 ((set (tuple21 c d)) (set (set (tuple21 c d)))) Bool)

(declare-fun mem24 ((tuple21 (tuple21 a c) (tuple21 b d))
  (set (tuple21 (tuple21 a c) (tuple21 b d)))) Bool)

(declare-fun mem36 (e (set e)) Bool)

(declare-fun mem37 (f (set f)) Bool)

(declare-fun mem38 ((tuple21 b e) (set (tuple21 b e))) Bool)

(declare-fun mem39 ((set (tuple21 b e)) (set (set (tuple21 b e)))) Bool)

(declare-fun mem40 ((tuple21 d f) (set (tuple21 d f))) Bool)

(declare-fun mem41 ((set (tuple21 d f)) (set (set (tuple21 d f)))) Bool)

(declare-fun mem42 ((tuple21 (tuple21 a c) (tuple21 e f))
  (set (tuple21 (tuple21 a c) (tuple21 e f)))) Bool)

(declare-fun mem43 ((tuple21 (tuple21 b d) (tuple21 e f))
  (set (tuple21 (tuple21 b d) (tuple21 e f)))) Bool)

(declare-fun mem44 ((tuple21 a e) (set (tuple21 a e))) Bool)

(declare-fun mem45 ((tuple21 c f) (set (tuple21 c f))) Bool)

(declare-fun infix_eqeq (ty uni uni) Bool)

(declare-fun infix_eqeq1 ((set a) (set a)) Bool)

(declare-fun infix_eqeq3 ((set b) (set b)) Bool)

(declare-fun infix_eqeq4 ((set (tuple21 a b)) (set (tuple21 a b))) Bool)

(declare-fun infix_eqeq5 ((set (set (tuple21 a b))) (set (set (tuple21 a
  b)))) Bool)

(declare-fun infix_eqeq7 ((set c) (set c)) Bool)

(declare-fun infix_eqeq13 ((set d) (set d)) Bool)

(declare-fun infix_eqeq14 ((set (tuple21 c d)) (set (tuple21 c d))) Bool)

(declare-fun infix_eqeq15 ((set (tuple21 (tuple21 a c) (tuple21 b d)))
  (set (tuple21 (tuple21 a c) (tuple21 b d)))) Bool)

(declare-fun infix_eqeq16 ((set (set (tuple21 c d))) (set (set (tuple21 c
  d)))) Bool)

(declare-fun infix_eqeq29 ((set e) (set e)) Bool)

(declare-fun infix_eqeq30 ((set f) (set f)) Bool)

(declare-fun infix_eqeq31 ((set (tuple21 b e)) (set (tuple21 b e))) Bool)

(declare-fun infix_eqeq32 ((set (tuple21 d f)) (set (tuple21 d f))) Bool)

(declare-fun infix_eqeq33 ((set (tuple21 (tuple21 a c) (tuple21 e f)))
  (set (tuple21 (tuple21 a c) (tuple21 e f)))) Bool)

(declare-fun infix_eqeq34 ((set (tuple21 (tuple21 b d) (tuple21 e f)))
  (set (tuple21 (tuple21 b d) (tuple21 e f)))) Bool)

(declare-fun infix_eqeq35 ((set (tuple21 a e)) (set (tuple21 a e))) Bool)

(declare-fun infix_eqeq36 ((set (tuple21 c f)) (set (tuple21 c f))) Bool)

(declare-fun infix_eqeq37 ((set (set (tuple21 d f))) (set (set (tuple21 d
  f)))) Bool)

(declare-fun infix_eqeq38 ((set (set (tuple21 b e))) (set (set (tuple21 b
  e)))) Bool)

;; infix ==_def
  (assert
  (forall ((s (set (tuple21 c f))) (t (set (tuple21 c f))))
  (= (infix_eqeq36 s t)
  (forall ((x (tuple21 c f))) (= (mem45 x s) (mem45 x t))))))

;; infix ==_def
  (assert
  (forall ((s (set (tuple21 a e))) (t (set (tuple21 a e))))
  (= (infix_eqeq35 s t)
  (forall ((x (tuple21 a e))) (= (mem44 x s) (mem44 x t))))))

;; infix ==_def
  (assert
  (forall ((s (set (tuple21 (tuple21 b d) (tuple21 e f))))
  (t (set (tuple21 (tuple21 b d) (tuple21 e f)))))
  (= (infix_eqeq34 s t)
  (forall ((x (tuple21 (tuple21 b d) (tuple21 e f))))
  (= (mem43 x s) (mem43 x t))))))

;; infix ==_def
  (assert
  (forall ((s (set (tuple21 (tuple21 a c) (tuple21 e f))))
  (t (set (tuple21 (tuple21 a c) (tuple21 e f)))))
  (= (infix_eqeq33 s t)
  (forall ((x (tuple21 (tuple21 a c) (tuple21 e f))))
  (= (mem42 x s) (mem42 x t))))))

;; infix ==_def
  (assert
  (forall ((s (set (set (tuple21 d f)))) (t (set (set (tuple21 d f)))))
  (= (infix_eqeq37 s t)
  (forall ((x (set (tuple21 d f)))) (= (mem41 x s) (mem41 x t))))))

;; infix ==_def
  (assert
  (forall ((s (set (tuple21 d f))) (t (set (tuple21 d f))))
  (= (infix_eqeq32 s t)
  (forall ((x (tuple21 d f))) (= (mem40 x s) (mem40 x t))))))

;; infix ==_def
  (assert
  (forall ((s (set (set (tuple21 b e)))) (t (set (set (tuple21 b e)))))
  (= (infix_eqeq38 s t)
  (forall ((x (set (tuple21 b e)))) (= (mem39 x s) (mem39 x t))))))

;; infix ==_def
  (assert
  (forall ((s (set (tuple21 b e))) (t (set (tuple21 b e))))
  (= (infix_eqeq31 s t)
  (forall ((x (tuple21 b e))) (= (mem38 x s) (mem38 x t))))))

;; infix ==_def
  (assert
  (forall ((s (set f)) (t (set f)))
  (= (infix_eqeq30 s t) (forall ((x f)) (= (mem37 x s) (mem37 x t))))))

;; infix ==_def
  (assert
  (forall ((s (set e)) (t (set e)))
  (= (infix_eqeq29 s t) (forall ((x e)) (= (mem36 x s) (mem36 x t))))))

;; infix ==_def
  (assert
  (forall ((s (set (tuple21 (tuple21 a c) (tuple21 b d))))
  (t (set (tuple21 (tuple21 a c) (tuple21 b d)))))
  (= (infix_eqeq15 s t)
  (forall ((x (tuple21 (tuple21 a c) (tuple21 b d))))
  (= (mem24 x s) (mem24 x t))))))

;; infix ==_def
  (assert
  (forall ((s (set (set (tuple21 c d)))) (t (set (set (tuple21 c d)))))
  (= (infix_eqeq16 s t)
  (forall ((x (set (tuple21 c d)))) (= (mem22 x s) (mem22 x t))))))

;; infix ==_def
  (assert
  (forall ((s (set (tuple21 c d))) (t (set (tuple21 c d))))
  (= (infix_eqeq14 s t)
  (forall ((x (tuple21 c d))) (= (mem21 x s) (mem21 x t))))))

;; infix ==_def
  (assert
  (forall ((s (set d)) (t (set d)))
  (= (infix_eqeq13 s t) (forall ((x d)) (= (mem20 x s) (mem20 x t))))))

;; infix ==_def
  (assert
  (forall ((s (set c)) (t (set c)))
  (= (infix_eqeq7 s t) (forall ((x c)) (= (mem7 x s) (mem7 x t))))))

;; infix ==_def
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set (set (tuple21 a b)))))
  (= (infix_eqeq5 s t)
  (forall ((x (set (tuple21 a b)))) (= (mem4 x s) (mem4 x t))))))

;; infix ==_def
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (tuple21 a b))))
  (= (infix_eqeq4 s t)
  (forall ((x (tuple21 a b))) (= (mem3 x s) (mem3 x t))))))

;; infix ==_def
  (assert
  (forall ((s (set b)) (t (set b)))
  (= (infix_eqeq3 s t) (forall ((x b)) (= (mem2 x s) (mem2 x t))))))

;; infix ==_def
  (assert
  (forall ((s (set a)) (t (set a)))
  (= (infix_eqeq1 s t) (forall ((x a)) (= (mem1 x s) (mem1 x t))))))

;; infix ==_def
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t uni))
  (and
  (=> (infix_eqeq a2 s t) (forall ((x uni)) (= (mem a2 x s) (mem a2 x t))))
  (=> (forall ((x uni)) (=> (sort a2 x) (= (mem a2 x s) (mem a2 x t))))
  (infix_eqeq a2 s t))))))

(declare-fun power (ty uni) uni)

;; power_sort
  (assert
  (forall ((a2 ty)) (forall ((x uni)) (sort (set1 (set1 a2)) (power a2 x)))))

(declare-fun non_empty_power (ty uni) uni)

;; non_empty_power_sort
  (assert
  (forall ((a2 ty))
  (forall ((x uni)) (sort (set1 (set1 a2)) (non_empty_power a2 x)))))

(declare-fun subset1 (ty uni uni) Bool)

(declare-fun t2tb2938 ((set (tuple21 d f))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 d f)))) (sort (set1 (tuple2 d1 f1))
  (t2tb2938 x))))

(declare-fun tb2t2938 (uni) (set (tuple21 d f)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 d f))))
  (! (= (tb2t2938 (t2tb2938 i)) i) :pattern ((t2tb2938 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 d1 f1)) j) (= (t2tb2938 (tb2t2938 j)) j)) :pattern (
  (t2tb2938 (tb2t2938 j))) )))

(declare-fun t2tb2939 ((set (set (tuple21 d f)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 d f))))) (sort (set1 (set1 (tuple2 d1 f1)))
  (t2tb2939 x))))

(declare-fun tb2t2939 (uni) (set (set (tuple21 d f))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 d f)))))
  (! (= (tb2t2939 (t2tb2939 i)) i) :pattern ((t2tb2939 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 d1 f1))) j) (= (t2tb2939 (tb2t2939 j)) j)) :pattern (
  (t2tb2939 (tb2t2939 j))) )))

;; subset_def
  (assert
  (forall ((s (set (tuple21 d f))) (t (set (tuple21 d f))))
  (= (subset1 (tuple2 d1 f1) (t2tb2938 s) (t2tb2938 t)) (mem41 s
  (tb2t2939 (power (tuple2 d1 f1) (t2tb2938 t)))))))

(declare-fun t2tb2940 ((set (tuple21 b e))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 b e)))) (sort (set1 (tuple2 b1 e1))
  (t2tb2940 x))))

(declare-fun tb2t2940 (uni) (set (tuple21 b e)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 b e))))
  (! (= (tb2t2940 (t2tb2940 i)) i) :pattern ((t2tb2940 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 b1 e1)) j) (= (t2tb2940 (tb2t2940 j)) j)) :pattern (
  (t2tb2940 (tb2t2940 j))) )))

(declare-fun t2tb2941 ((set (set (tuple21 b e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 b e))))) (sort (set1 (set1 (tuple2 b1 e1)))
  (t2tb2941 x))))

(declare-fun tb2t2941 (uni) (set (set (tuple21 b e))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 b e)))))
  (! (= (tb2t2941 (t2tb2941 i)) i) :pattern ((t2tb2941 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 b1 e1))) j) (= (t2tb2941 (tb2t2941 j)) j)) :pattern (
  (t2tb2941 (tb2t2941 j))) )))

;; subset_def
  (assert
  (forall ((s (set (tuple21 b e))) (t (set (tuple21 b e))))
  (= (subset1 (tuple2 b1 e1) (t2tb2940 s) (t2tb2940 t)) (mem39 s
  (tb2t2941 (power (tuple2 b1 e1) (t2tb2940 t)))))))

(declare-fun t2tb689 ((set (tuple21 c d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 c d)))) (sort (set1 (tuple2 c1 d1)) (t2tb689 x))))

(declare-fun tb2t689 (uni) (set (tuple21 c d)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 c d))))
  (! (= (tb2t689 (t2tb689 i)) i) :pattern ((t2tb689 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 c1 d1)) j) (= (t2tb689 (tb2t689 j)) j)) :pattern (
  (t2tb689 (tb2t689 j))) )))

(declare-fun t2tb688 ((set (set (tuple21 c d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 c d))))) (sort (set1 (set1 (tuple2 c1 d1)))
  (t2tb688 x))))

(declare-fun tb2t688 (uni) (set (set (tuple21 c d))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 c d)))))
  (! (= (tb2t688 (t2tb688 i)) i) :pattern ((t2tb688 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 c1 d1))) j) (= (t2tb688 (tb2t688 j)) j)) :pattern (
  (t2tb688 (tb2t688 j))) )))

;; subset_def
  (assert
  (forall ((s (set (tuple21 c d))) (t (set (tuple21 c d))))
  (= (subset1 (tuple2 c1 d1) (t2tb689 s) (t2tb689 t)) (mem22 s
  (tb2t688 (power (tuple2 c1 d1) (t2tb689 t)))))))

(declare-fun t2tb10 ((set (set (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 a b))))) (sort (set1 (set1 (tuple2 a1 b1)))
  (t2tb10 x))))

(declare-fun tb2t10 (uni) (set (set (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 a b)))))
  (! (= (tb2t10 (t2tb10 i)) i) :pattern ((t2tb10 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 a1 b1))) j) (= (t2tb10 (tb2t10 j)) j)) :pattern (
  (t2tb10 (tb2t10 j))) )))

(declare-fun t2tb11 ((set (tuple21 a b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a b)))) (sort (set1 (tuple2 a1 b1)) (t2tb11 x))))

(declare-fun tb2t11 (uni) (set (tuple21 a b)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a b))))
  (! (= (tb2t11 (t2tb11 i)) i) :pattern ((t2tb11 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 b1)) j) (= (t2tb11 (tb2t11 j)) j)) :pattern (
  (t2tb11 (tb2t11 j))) )))

;; subset_def
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (tuple21 a b))))
  (= (subset1 (tuple2 a1 b1) (t2tb11 s) (t2tb11 t)) (mem4 s
  (tb2t10 (power (tuple2 a1 b1) (t2tb11 t)))))))

;; subset_def
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t uni))
  (= (subset1 a2 s t) (mem (set1 a2) s (power a2 t))))))

(declare-fun subsetnoteq (ty uni uni) Bool)

(declare-fun t2tb2942 ((set (tuple21 c f))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 c f)))) (sort (set1 (tuple2 c1 f1))
  (t2tb2942 x))))

(declare-fun tb2t2942 (uni) (set (tuple21 c f)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 c f))))
  (! (= (tb2t2942 (t2tb2942 i)) i) :pattern ((t2tb2942 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 c1 f1)) j) (= (t2tb2942 (tb2t2942 j)) j)) :pattern (
  (t2tb2942 (tb2t2942 j))) )))

;; subsetnoteq_def
  (assert
  (forall ((s (set (tuple21 c f))) (t (set (tuple21 c f))))
  (= (subsetnoteq (tuple2 c1 f1) (t2tb2942 s) (t2tb2942 t))
  (and (subset1 (tuple2 c1 f1) (t2tb2942 s) (t2tb2942 t))
  (not (infix_eqeq36 s t))))))

(declare-fun t2tb2943 ((set (tuple21 a e))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a e)))) (sort (set1 (tuple2 a1 e1))
  (t2tb2943 x))))

(declare-fun tb2t2943 (uni) (set (tuple21 a e)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a e))))
  (! (= (tb2t2943 (t2tb2943 i)) i) :pattern ((t2tb2943 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 e1)) j) (= (t2tb2943 (tb2t2943 j)) j)) :pattern (
  (t2tb2943 (tb2t2943 j))) )))

;; subsetnoteq_def
  (assert
  (forall ((s (set (tuple21 a e))) (t (set (tuple21 a e))))
  (= (subsetnoteq (tuple2 a1 e1) (t2tb2943 s) (t2tb2943 t))
  (and (subset1 (tuple2 a1 e1) (t2tb2943 s) (t2tb2943 t))
  (not (infix_eqeq35 s t))))))

(declare-fun t2tb2944 ((set (tuple21 (tuple21 b d) (tuple21 e f)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b d) (tuple21 e f))))) (sort
  (set1 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1))) (t2tb2944 x))))

(declare-fun tb2t2944 (uni) (set (tuple21 (tuple21 b d) (tuple21 e f))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b d) (tuple21 e f)))))
  (! (= (tb2t2944 (t2tb2944 i)) i) :pattern ((t2tb2944 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1))) j)
     (= (t2tb2944 (tb2t2944 j)) j)) :pattern ((t2tb2944 (tb2t2944 j))) )))

;; subsetnoteq_def
  (assert
  (forall ((s (set (tuple21 (tuple21 b d) (tuple21 e f))))
  (t (set (tuple21 (tuple21 b d) (tuple21 e f)))))
  (= (subsetnoteq (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (t2tb2944 s)
  (t2tb2944 t))
  (and (subset1 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (t2tb2944 s)
  (t2tb2944 t)) (not (infix_eqeq34 s t))))))

(declare-fun t2tb2945 ((set (tuple21 (tuple21 a c) (tuple21 e f)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a c) (tuple21 e f))))) (sort
  (set1 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1))) (t2tb2945 x))))

(declare-fun tb2t2945 (uni) (set (tuple21 (tuple21 a c) (tuple21 e f))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a c) (tuple21 e f)))))
  (! (= (tb2t2945 (t2tb2945 i)) i) :pattern ((t2tb2945 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1))) j)
     (= (t2tb2945 (tb2t2945 j)) j)) :pattern ((t2tb2945 (tb2t2945 j))) )))

;; subsetnoteq_def
  (assert
  (forall ((s (set (tuple21 (tuple21 a c) (tuple21 e f))))
  (t (set (tuple21 (tuple21 a c) (tuple21 e f)))))
  (= (subsetnoteq (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (t2tb2945 s)
  (t2tb2945 t))
  (and (subset1 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (t2tb2945 s)
  (t2tb2945 t)) (not (infix_eqeq33 s t))))))

;; subsetnoteq_def
  (assert
  (forall ((s (set (set (tuple21 d f)))) (t (set (set (tuple21 d f)))))
  (= (subsetnoteq (set1 (tuple2 d1 f1)) (t2tb2939 s) (t2tb2939 t))
  (and (subset1 (set1 (tuple2 d1 f1)) (t2tb2939 s) (t2tb2939 t))
  (not (infix_eqeq37 s t))))))

;; subsetnoteq_def
  (assert
  (forall ((s (set (tuple21 d f))) (t (set (tuple21 d f))))
  (= (subsetnoteq (tuple2 d1 f1) (t2tb2938 s) (t2tb2938 t))
  (and (subset1 (tuple2 d1 f1) (t2tb2938 s) (t2tb2938 t))
  (not (infix_eqeq32 s t))))))

;; subsetnoteq_def
  (assert
  (forall ((s (set (set (tuple21 b e)))) (t (set (set (tuple21 b e)))))
  (= (subsetnoteq (set1 (tuple2 b1 e1)) (t2tb2941 s) (t2tb2941 t))
  (and (subset1 (set1 (tuple2 b1 e1)) (t2tb2941 s) (t2tb2941 t))
  (not (infix_eqeq38 s t))))))

;; subsetnoteq_def
  (assert
  (forall ((s (set (tuple21 b e))) (t (set (tuple21 b e))))
  (= (subsetnoteq (tuple2 b1 e1) (t2tb2940 s) (t2tb2940 t))
  (and (subset1 (tuple2 b1 e1) (t2tb2940 s) (t2tb2940 t))
  (not (infix_eqeq31 s t))))))

(declare-fun t2tb2946 ((set f)) uni)

;; t2tb_sort
  (assert (forall ((x (set f))) (sort (set1 f1) (t2tb2946 x))))

(declare-fun tb2t2946 (uni) (set f))

;; BridgeL
  (assert
  (forall ((i (set f)))
  (! (= (tb2t2946 (t2tb2946 i)) i) :pattern ((t2tb2946 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 f1) j) (= (t2tb2946 (tb2t2946 j)) j)) :pattern (
  (t2tb2946 (tb2t2946 j))) )))

;; subsetnoteq_def
  (assert
  (forall ((s (set f)) (t (set f)))
  (= (subsetnoteq f1 (t2tb2946 s) (t2tb2946 t))
  (and (subset1 f1 (t2tb2946 s) (t2tb2946 t)) (not (infix_eqeq30 s t))))))

(declare-fun t2tb2947 ((set e)) uni)

;; t2tb_sort
  (assert (forall ((x (set e))) (sort (set1 e1) (t2tb2947 x))))

(declare-fun tb2t2947 (uni) (set e))

;; BridgeL
  (assert
  (forall ((i (set e)))
  (! (= (tb2t2947 (t2tb2947 i)) i) :pattern ((t2tb2947 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 e1) j) (= (t2tb2947 (tb2t2947 j)) j)) :pattern (
  (t2tb2947 (tb2t2947 j))) )))

;; subsetnoteq_def
  (assert
  (forall ((s (set e)) (t (set e)))
  (= (subsetnoteq e1 (t2tb2947 s) (t2tb2947 t))
  (and (subset1 e1 (t2tb2947 s) (t2tb2947 t)) (not (infix_eqeq29 s t))))))

(declare-fun t2tb686 ((set (tuple21 (tuple21 a c) (tuple21 b d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a c) (tuple21 b d))))) (sort
  (set1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))) (t2tb686 x))))

(declare-fun tb2t686 (uni) (set (tuple21 (tuple21 a c) (tuple21 b d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a c) (tuple21 b d)))))
  (! (= (tb2t686 (t2tb686 i)) i) :pattern ((t2tb686 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))) j)
     (= (t2tb686 (tb2t686 j)) j)) :pattern ((t2tb686 (tb2t686 j))) )))

;; subsetnoteq_def
  (assert
  (forall ((s (set (tuple21 (tuple21 a c) (tuple21 b d))))
  (t (set (tuple21 (tuple21 a c) (tuple21 b d)))))
  (= (subsetnoteq (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb686 s)
  (t2tb686 t))
  (and (subset1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb686 s)
  (t2tb686 t)) (not (infix_eqeq15 s t))))))

;; subsetnoteq_def
  (assert
  (forall ((s (set (set (tuple21 c d)))) (t (set (set (tuple21 c d)))))
  (= (subsetnoteq (set1 (tuple2 c1 d1)) (t2tb688 s) (t2tb688 t))
  (and (subset1 (set1 (tuple2 c1 d1)) (t2tb688 s) (t2tb688 t))
  (not (infix_eqeq16 s t))))))

;; subsetnoteq_def
  (assert
  (forall ((s (set (tuple21 c d))) (t (set (tuple21 c d))))
  (= (subsetnoteq (tuple2 c1 d1) (t2tb689 s) (t2tb689 t))
  (and (subset1 (tuple2 c1 d1) (t2tb689 s) (t2tb689 t))
  (not (infix_eqeq14 s t))))))

(declare-fun t2tb690 ((set d)) uni)

;; t2tb_sort
  (assert (forall ((x (set d))) (sort (set1 d1) (t2tb690 x))))

(declare-fun tb2t690 (uni) (set d))

;; BridgeL
  (assert
  (forall ((i (set d)))
  (! (= (tb2t690 (t2tb690 i)) i) :pattern ((t2tb690 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 d1) j) (= (t2tb690 (tb2t690 j)) j)) :pattern ((t2tb690
                                                                   (tb2t690
                                                                   j))) )))

;; subsetnoteq_def
  (assert
  (forall ((s (set d)) (t (set d)))
  (= (subsetnoteq d1 (t2tb690 s) (t2tb690 t))
  (and (subset1 d1 (t2tb690 s) (t2tb690 t)) (not (infix_eqeq13 s t))))))

(declare-fun t2tb132 ((set c)) uni)

;; t2tb_sort
  (assert (forall ((x (set c))) (sort (set1 c1) (t2tb132 x))))

(declare-fun tb2t132 (uni) (set c))

;; BridgeL
  (assert
  (forall ((i (set c)))
  (! (= (tb2t132 (t2tb132 i)) i) :pattern ((t2tb132 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 c1) j) (= (t2tb132 (tb2t132 j)) j)) :pattern ((t2tb132
                                                                   (tb2t132
                                                                   j))) )))

;; subsetnoteq_def
  (assert
  (forall ((s (set c)) (t (set c)))
  (= (subsetnoteq c1 (t2tb132 s) (t2tb132 t))
  (and (subset1 c1 (t2tb132 s) (t2tb132 t)) (not (infix_eqeq7 s t))))))

;; subsetnoteq_def
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set (set (tuple21 a b)))))
  (= (subsetnoteq (set1 (tuple2 a1 b1)) (t2tb10 s) (t2tb10 t))
  (and (subset1 (set1 (tuple2 a1 b1)) (t2tb10 s) (t2tb10 t))
  (not (infix_eqeq5 s t))))))

;; subsetnoteq_def
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (tuple21 a b))))
  (= (subsetnoteq (tuple2 a1 b1) (t2tb11 s) (t2tb11 t))
  (and (subset1 (tuple2 a1 b1) (t2tb11 s) (t2tb11 t))
  (not (infix_eqeq4 s t))))))

(declare-fun t2tb12 ((set b)) uni)

;; t2tb_sort
  (assert (forall ((x (set b))) (sort (set1 b1) (t2tb12 x))))

(declare-fun tb2t12 (uni) (set b))

;; BridgeL
  (assert
  (forall ((i (set b))) (! (= (tb2t12 (t2tb12 i)) i) :pattern ((t2tb12 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 b1) j) (= (t2tb12 (tb2t12 j)) j)) :pattern ((t2tb12
                                                                 (tb2t12 j))) )))

;; subsetnoteq_def
  (assert
  (forall ((s (set b)) (t (set b)))
  (= (subsetnoteq b1 (t2tb12 s) (t2tb12 t))
  (and (subset1 b1 (t2tb12 s) (t2tb12 t)) (not (infix_eqeq3 s t))))))

(declare-fun t2tb1 ((set a)) uni)

;; t2tb_sort
  (assert (forall ((x (set a))) (sort (set1 a1) (t2tb1 x))))

(declare-fun tb2t1 (uni) (set a))

;; BridgeL
  (assert
  (forall ((i (set a))) (! (= (tb2t1 (t2tb1 i)) i) :pattern ((t2tb1 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 a1) j) (= (t2tb1 (tb2t1 j)) j)) :pattern ((t2tb1
                                                               (tb2t1 j))) )))

;; subsetnoteq_def
  (assert
  (forall ((s (set a)) (t (set a)))
  (= (subsetnoteq a1 (t2tb1 s) (t2tb1 t))
  (and (subset1 a1 (t2tb1 s) (t2tb1 t)) (not (infix_eqeq1 s t))))))

;; subsetnoteq_def
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t uni))
  (= (subsetnoteq a2 s t) (and (subset1 a2 s t) (not (infix_eqeq a2 s t)))))))

(declare-fun empty (ty) uni)

;; empty_sort
  (assert (forall ((a2 ty)) (sort (set1 a2) (empty a2))))

(declare-fun is_empty (ty uni) Bool)

;; is_empty_def
  (assert
  (forall ((s (set (tuple21 c f))))
  (= (is_empty (tuple2 c1 f1) (t2tb2942 s))
  (forall ((x (tuple21 c f))) (not (mem45 x s))))))

;; is_empty_def
  (assert
  (forall ((s (set (tuple21 a e))))
  (= (is_empty (tuple2 a1 e1) (t2tb2943 s))
  (forall ((x (tuple21 a e))) (not (mem44 x s))))))

;; is_empty_def
  (assert
  (forall ((s (set (tuple21 (tuple21 b d) (tuple21 e f)))))
  (= (is_empty (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (t2tb2944 s))
  (forall ((x (tuple21 (tuple21 b d) (tuple21 e f)))) (not (mem43 x s))))))

;; is_empty_def
  (assert
  (forall ((s (set (tuple21 (tuple21 a c) (tuple21 e f)))))
  (= (is_empty (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (t2tb2945 s))
  (forall ((x (tuple21 (tuple21 a c) (tuple21 e f)))) (not (mem42 x s))))))

;; is_empty_def
  (assert
  (forall ((s (set (set (tuple21 d f)))))
  (= (is_empty (set1 (tuple2 d1 f1)) (t2tb2939 s))
  (forall ((x (set (tuple21 d f)))) (not (mem41 x s))))))

;; is_empty_def
  (assert
  (forall ((s (set (tuple21 d f))))
  (= (is_empty (tuple2 d1 f1) (t2tb2938 s))
  (forall ((x (tuple21 d f))) (not (mem40 x s))))))

;; is_empty_def
  (assert
  (forall ((s (set (set (tuple21 b e)))))
  (= (is_empty (set1 (tuple2 b1 e1)) (t2tb2941 s))
  (forall ((x (set (tuple21 b e)))) (not (mem39 x s))))))

;; is_empty_def
  (assert
  (forall ((s (set (tuple21 b e))))
  (= (is_empty (tuple2 b1 e1) (t2tb2940 s))
  (forall ((x (tuple21 b e))) (not (mem38 x s))))))

;; is_empty_def
  (assert
  (forall ((s (set f)))
  (= (is_empty f1 (t2tb2946 s)) (forall ((x f)) (not (mem37 x s))))))

;; is_empty_def
  (assert
  (forall ((s (set e)))
  (= (is_empty e1 (t2tb2947 s)) (forall ((x e)) (not (mem36 x s))))))

;; is_empty_def
  (assert
  (forall ((s (set (tuple21 (tuple21 a c) (tuple21 b d)))))
  (= (is_empty (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb686 s))
  (forall ((x (tuple21 (tuple21 a c) (tuple21 b d)))) (not (mem24 x s))))))

;; is_empty_def
  (assert
  (forall ((s (set (set (tuple21 c d)))))
  (= (is_empty (set1 (tuple2 c1 d1)) (t2tb688 s))
  (forall ((x (set (tuple21 c d)))) (not (mem22 x s))))))

;; is_empty_def
  (assert
  (forall ((s (set (tuple21 c d))))
  (= (is_empty (tuple2 c1 d1) (t2tb689 s))
  (forall ((x (tuple21 c d))) (not (mem21 x s))))))

;; is_empty_def
  (assert
  (forall ((s (set d)))
  (= (is_empty d1 (t2tb690 s)) (forall ((x d)) (not (mem20 x s))))))

;; is_empty_def
  (assert
  (forall ((s (set c)))
  (= (is_empty c1 (t2tb132 s)) (forall ((x c)) (not (mem7 x s))))))

;; is_empty_def
  (assert
  (forall ((s (set (set (tuple21 a b)))))
  (= (is_empty (set1 (tuple2 a1 b1)) (t2tb10 s))
  (forall ((x (set (tuple21 a b)))) (not (mem4 x s))))))

;; is_empty_def
  (assert
  (forall ((s (set (tuple21 a b))))
  (= (is_empty (tuple2 a1 b1) (t2tb11 s))
  (forall ((x (tuple21 a b))) (not (mem3 x s))))))

;; is_empty_def
  (assert
  (forall ((s (set b)))
  (= (is_empty b1 (t2tb12 s)) (forall ((x b)) (not (mem2 x s))))))

;; is_empty_def
  (assert
  (forall ((s (set a)))
  (= (is_empty a1 (t2tb1 s)) (forall ((x a)) (not (mem1 x s))))))

;; is_empty_def
  (assert
  (forall ((a2 ty))
  (forall ((s uni))
  (and (=> (is_empty a2 s) (forall ((x uni)) (not (mem a2 x s))))
  (=> (forall ((x uni)) (=> (sort a2 x) (not (mem a2 x s)))) (is_empty a2 s))))))

;; empty_def1
  (assert (forall ((a2 ty)) (is_empty a2 (empty a2))))

;; empty
  (assert
  (forall ((x (tuple21 c f)))
  (not (mem45 x (tb2t2942 (empty (tuple2 c1 f1)))))))

;; empty
  (assert
  (forall ((x (tuple21 a e)))
  (not (mem44 x (tb2t2943 (empty (tuple2 a1 e1)))))))

;; empty
  (assert
  (forall ((x (tuple21 (tuple21 b d) (tuple21 e f))))
  (not (mem43 x (tb2t2944 (empty (tuple2 (tuple2 b1 d1) (tuple2 e1 f1))))))))

;; empty
  (assert
  (forall ((x (tuple21 (tuple21 a c) (tuple21 e f))))
  (not (mem42 x (tb2t2945 (empty (tuple2 (tuple2 a1 c1) (tuple2 e1 f1))))))))

;; empty
  (assert
  (forall ((x (set (tuple21 d f))))
  (not (mem41 x (tb2t2939 (empty (set1 (tuple2 d1 f1))))))))

;; empty
  (assert
  (forall ((x (tuple21 d f)))
  (not (mem40 x (tb2t2938 (empty (tuple2 d1 f1)))))))

;; empty
  (assert
  (forall ((x (set (tuple21 b e))))
  (not (mem39 x (tb2t2941 (empty (set1 (tuple2 b1 e1))))))))

;; empty
  (assert
  (forall ((x (tuple21 b e)))
  (not (mem38 x (tb2t2940 (empty (tuple2 b1 e1)))))))

;; empty
  (assert (forall ((x f)) (not (mem37 x (tb2t2946 (empty f1))))))

;; empty
  (assert (forall ((x e)) (not (mem36 x (tb2t2947 (empty e1))))))

;; empty
  (assert
  (forall ((x (tuple21 (tuple21 a c) (tuple21 b d))))
  (not (mem24 x (tb2t686 (empty (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))))))))

;; empty
  (assert
  (forall ((x (set (tuple21 c d))))
  (not (mem22 x (tb2t688 (empty (set1 (tuple2 c1 d1))))))))

;; empty
  (assert
  (forall ((x (tuple21 c d)))
  (not (mem21 x (tb2t689 (empty (tuple2 c1 d1)))))))

;; empty
  (assert (forall ((x d)) (not (mem20 x (tb2t690 (empty d1))))))

;; empty
  (assert (forall ((x c)) (not (mem7 x (tb2t132 (empty c1))))))

;; empty
  (assert
  (forall ((x (set (tuple21 a b))))
  (not (mem4 x (tb2t10 (empty (set1 (tuple2 a1 b1))))))))

;; empty
  (assert
  (forall ((x (tuple21 a b))) (not (mem3 x (tb2t11 (empty (tuple2 a1 b1)))))))

;; empty
  (assert (forall ((x b)) (not (mem2 x (tb2t12 (empty b1))))))

;; empty
  (assert (forall ((x a)) (not (mem1 x (tb2t1 (empty a1))))))

;; empty
  (assert (forall ((a2 ty)) (forall ((x uni)) (not (mem a2 x (empty a2))))))

(declare-fun add (ty uni uni) uni)

;; add_sort
  (assert
  (forall ((a2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 a2) (add a2 x x1)))))

(declare-fun t2tb2948 ((tuple21 c f)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 c f))) (sort (tuple2 c1 f1) (t2tb2948 x))))

(declare-fun tb2t2948 (uni) (tuple21 c f))

;; BridgeL
  (assert
  (forall ((i (tuple21 c f)))
  (! (= (tb2t2948 (t2tb2948 i)) i) :pattern ((t2tb2948 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 c1 f1) j) (= (t2tb2948 (tb2t2948 j)) j)) :pattern (
  (t2tb2948 (tb2t2948 j))) )))

;; add_def1
  (assert
  (forall ((x (tuple21 c f)) (y (tuple21 c f)))
  (forall ((s (set (tuple21 c f))))
  (= (mem45 x (tb2t2942 (add (tuple2 c1 f1) (t2tb2948 y) (t2tb2942 s))))
  (or (= x y) (mem45 x s))))))

(declare-fun t2tb2949 ((tuple21 a e)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 a e))) (sort (tuple2 a1 e1) (t2tb2949 x))))

(declare-fun tb2t2949 (uni) (tuple21 a e))

;; BridgeL
  (assert
  (forall ((i (tuple21 a e)))
  (! (= (tb2t2949 (t2tb2949 i)) i) :pattern ((t2tb2949 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 e1) j) (= (t2tb2949 (tb2t2949 j)) j)) :pattern (
  (t2tb2949 (tb2t2949 j))) )))

;; add_def1
  (assert
  (forall ((x (tuple21 a e)) (y (tuple21 a e)))
  (forall ((s (set (tuple21 a e))))
  (= (mem44 x (tb2t2943 (add (tuple2 a1 e1) (t2tb2949 y) (t2tb2943 s))))
  (or (= x y) (mem44 x s))))))

(declare-fun t2tb2950 ((tuple21 (tuple21 b d) (tuple21 e f))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b d) (tuple21 e f)))) (sort
  (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (t2tb2950 x))))

(declare-fun tb2t2950 (uni) (tuple21 (tuple21 b d) (tuple21 e f)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b d) (tuple21 e f))))
  (! (= (tb2t2950 (t2tb2950 i)) i) :pattern ((t2tb2950 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) j)
     (= (t2tb2950 (tb2t2950 j)) j)) :pattern ((t2tb2950 (tb2t2950 j))) )))

;; add_def1
  (assert
  (forall ((x (tuple21 (tuple21 b d) (tuple21 e f))) (y (tuple21 (tuple21 b
  d) (tuple21 e f))))
  (forall ((s (set (tuple21 (tuple21 b d) (tuple21 e f)))))
  (= (mem43 x
  (tb2t2944
  (add (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (t2tb2950 y) (t2tb2944 s))))
  (or (= x y) (mem43 x s))))))

(declare-fun t2tb2951 ((tuple21 (tuple21 a c) (tuple21 e f))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a c) (tuple21 e f)))) (sort
  (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (t2tb2951 x))))

(declare-fun tb2t2951 (uni) (tuple21 (tuple21 a c) (tuple21 e f)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a c) (tuple21 e f))))
  (! (= (tb2t2951 (t2tb2951 i)) i) :pattern ((t2tb2951 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) j)
     (= (t2tb2951 (tb2t2951 j)) j)) :pattern ((t2tb2951 (tb2t2951 j))) )))

;; add_def1
  (assert
  (forall ((x (tuple21 (tuple21 a c) (tuple21 e f))) (y (tuple21 (tuple21 a
  c) (tuple21 e f))))
  (forall ((s (set (tuple21 (tuple21 a c) (tuple21 e f)))))
  (= (mem42 x
  (tb2t2945
  (add (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (t2tb2951 y) (t2tb2945 s))))
  (or (= x y) (mem42 x s))))))

;; add_def1
  (assert
  (forall ((x (set (tuple21 d f))) (y (set (tuple21 d f))))
  (forall ((s (set (set (tuple21 d f)))))
  (= (mem41 x
  (tb2t2939 (add (set1 (tuple2 d1 f1)) (t2tb2938 y) (t2tb2939 s))))
  (or (= x y) (mem41 x s))))))

(declare-fun t2tb2952 ((tuple21 d f)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 d f))) (sort (tuple2 d1 f1) (t2tb2952 x))))

(declare-fun tb2t2952 (uni) (tuple21 d f))

;; BridgeL
  (assert
  (forall ((i (tuple21 d f)))
  (! (= (tb2t2952 (t2tb2952 i)) i) :pattern ((t2tb2952 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 d1 f1) j) (= (t2tb2952 (tb2t2952 j)) j)) :pattern (
  (t2tb2952 (tb2t2952 j))) )))

;; add_def1
  (assert
  (forall ((x (tuple21 d f)) (y (tuple21 d f)))
  (forall ((s (set (tuple21 d f))))
  (= (mem40 x (tb2t2938 (add (tuple2 d1 f1) (t2tb2952 y) (t2tb2938 s))))
  (or (= x y) (mem40 x s))))))

;; add_def1
  (assert
  (forall ((x (set (tuple21 b e))) (y (set (tuple21 b e))))
  (forall ((s (set (set (tuple21 b e)))))
  (= (mem39 x
  (tb2t2941 (add (set1 (tuple2 b1 e1)) (t2tb2940 y) (t2tb2941 s))))
  (or (= x y) (mem39 x s))))))

(declare-fun t2tb2953 ((tuple21 b e)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 b e))) (sort (tuple2 b1 e1) (t2tb2953 x))))

(declare-fun tb2t2953 (uni) (tuple21 b e))

;; BridgeL
  (assert
  (forall ((i (tuple21 b e)))
  (! (= (tb2t2953 (t2tb2953 i)) i) :pattern ((t2tb2953 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 b1 e1) j) (= (t2tb2953 (tb2t2953 j)) j)) :pattern (
  (t2tb2953 (tb2t2953 j))) )))

;; add_def1
  (assert
  (forall ((x (tuple21 b e)) (y (tuple21 b e)))
  (forall ((s (set (tuple21 b e))))
  (= (mem38 x (tb2t2940 (add (tuple2 b1 e1) (t2tb2953 y) (t2tb2940 s))))
  (or (= x y) (mem38 x s))))))

(declare-fun t2tb2954 (f) uni)

;; t2tb_sort
  (assert (forall ((x f)) (sort f1 (t2tb2954 x))))

(declare-fun tb2t2954 (uni) f)

;; BridgeL
  (assert
  (forall ((i f)) (! (= (tb2t2954 (t2tb2954 i)) i) :pattern ((t2tb2954 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort f1 j) (= (t2tb2954 (tb2t2954 j)) j)) :pattern ((t2tb2954
                                                              (tb2t2954 j))) )))

;; add_def1
  (assert
  (forall ((x f) (y f))
  (forall ((s (set f)))
  (= (mem37 x (tb2t2946 (add f1 (t2tb2954 y) (t2tb2946 s))))
  (or (= x y) (mem37 x s))))))

(declare-fun t2tb2955 (e) uni)

;; t2tb_sort
  (assert (forall ((x e)) (sort e1 (t2tb2955 x))))

(declare-fun tb2t2955 (uni) e)

;; BridgeL
  (assert
  (forall ((i e)) (! (= (tb2t2955 (t2tb2955 i)) i) :pattern ((t2tb2955 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort e1 j) (= (t2tb2955 (tb2t2955 j)) j)) :pattern ((t2tb2955
                                                              (tb2t2955 j))) )))

;; add_def1
  (assert
  (forall ((x e) (y e))
  (forall ((s (set e)))
  (= (mem36 x (tb2t2947 (add e1 (t2tb2955 y) (t2tb2947 s))))
  (or (= x y) (mem36 x s))))))

(declare-fun t2tb691 ((tuple21 (tuple21 a c) (tuple21 b d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a c) (tuple21 b d)))) (sort
  (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb691 x))))

(declare-fun tb2t691 (uni) (tuple21 (tuple21 a c) (tuple21 b d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a c) (tuple21 b d))))
  (! (= (tb2t691 (t2tb691 i)) i) :pattern ((t2tb691 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) j)
     (= (t2tb691 (tb2t691 j)) j)) :pattern ((t2tb691 (tb2t691 j))) )))

;; add_def1
  (assert
  (forall ((x (tuple21 (tuple21 a c) (tuple21 b d))) (y (tuple21 (tuple21 a
  c) (tuple21 b d))))
  (forall ((s (set (tuple21 (tuple21 a c) (tuple21 b d)))))
  (= (mem24 x
  (tb2t686
  (add (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb691 y) (t2tb686 s))))
  (or (= x y) (mem24 x s))))))

;; add_def1
  (assert
  (forall ((x (set (tuple21 c d))) (y (set (tuple21 c d))))
  (forall ((s (set (set (tuple21 c d)))))
  (= (mem22 x (tb2t688 (add (set1 (tuple2 c1 d1)) (t2tb689 y) (t2tb688 s))))
  (or (= x y) (mem22 x s))))))

(declare-fun t2tb693 ((tuple21 c d)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 c d))) (sort (tuple2 c1 d1) (t2tb693 x))))

(declare-fun tb2t693 (uni) (tuple21 c d))

;; BridgeL
  (assert
  (forall ((i (tuple21 c d)))
  (! (= (tb2t693 (t2tb693 i)) i) :pattern ((t2tb693 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 c1 d1) j) (= (t2tb693 (tb2t693 j)) j)) :pattern (
  (t2tb693 (tb2t693 j))) )))

;; add_def1
  (assert
  (forall ((x (tuple21 c d)) (y (tuple21 c d)))
  (forall ((s (set (tuple21 c d))))
  (= (mem21 x (tb2t689 (add (tuple2 c1 d1) (t2tb693 y) (t2tb689 s))))
  (or (= x y) (mem21 x s))))))

(declare-fun t2tb694 (d) uni)

;; t2tb_sort
  (assert (forall ((x d)) (sort d1 (t2tb694 x))))

(declare-fun tb2t694 (uni) d)

;; BridgeL
  (assert
  (forall ((i d)) (! (= (tb2t694 (t2tb694 i)) i) :pattern ((t2tb694 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort d1 j) (= (t2tb694 (tb2t694 j)) j)) :pattern ((t2tb694
                                                            (tb2t694 j))) )))

;; add_def1
  (assert
  (forall ((x d) (y d))
  (forall ((s (set d)))
  (= (mem20 x (tb2t690 (add d1 (t2tb694 y) (t2tb690 s))))
  (or (= x y) (mem20 x s))))))

(declare-fun t2tb135 (c) uni)

;; t2tb_sort
  (assert (forall ((x c)) (sort c1 (t2tb135 x))))

(declare-fun tb2t135 (uni) c)

;; BridgeL
  (assert
  (forall ((i c)) (! (= (tb2t135 (t2tb135 i)) i) :pattern ((t2tb135 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort c1 j) (= (t2tb135 (tb2t135 j)) j)) :pattern ((t2tb135
                                                            (tb2t135 j))) )))

;; add_def1
  (assert
  (forall ((x c) (y c))
  (forall ((s (set c)))
  (= (mem7 x (tb2t132 (add c1 (t2tb135 y) (t2tb132 s))))
  (or (= x y) (mem7 x s))))))

;; add_def1
  (assert
  (forall ((x (set (tuple21 a b))) (y (set (tuple21 a b))))
  (forall ((s (set (set (tuple21 a b)))))
  (= (mem4 x (tb2t10 (add (set1 (tuple2 a1 b1)) (t2tb11 y) (t2tb10 s))))
  (or (= x y) (mem4 x s))))))

(declare-fun t2tb13 ((tuple21 a b)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 a b))) (sort (tuple2 a1 b1) (t2tb13 x))))

(declare-fun tb2t13 (uni) (tuple21 a b))

;; BridgeL
  (assert
  (forall ((i (tuple21 a b)))
  (! (= (tb2t13 (t2tb13 i)) i) :pattern ((t2tb13 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 b1) j) (= (t2tb13 (tb2t13 j)) j)) :pattern (
  (t2tb13 (tb2t13 j))) )))

;; add_def1
  (assert
  (forall ((x (tuple21 a b)) (y (tuple21 a b)))
  (forall ((s (set (tuple21 a b))))
  (= (mem3 x (tb2t11 (add (tuple2 a1 b1) (t2tb13 y) (t2tb11 s))))
  (or (= x y) (mem3 x s))))))

(declare-fun t2tb14 (b) uni)

;; t2tb_sort
  (assert (forall ((x b)) (sort b1 (t2tb14 x))))

(declare-fun tb2t14 (uni) b)

;; BridgeL
  (assert
  (forall ((i b)) (! (= (tb2t14 (t2tb14 i)) i) :pattern ((t2tb14 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort b1 j) (= (t2tb14 (tb2t14 j)) j)) :pattern ((t2tb14 (tb2t14 j))) )))

;; add_def1
  (assert
  (forall ((x b) (y b))
  (forall ((s (set b)))
  (= (mem2 x (tb2t12 (add b1 (t2tb14 y) (t2tb12 s))))
  (or (= x y) (mem2 x s))))))

(declare-fun t2tb2 (a) uni)

;; t2tb_sort
  (assert (forall ((x a)) (sort a1 (t2tb2 x))))

(declare-fun tb2t2 (uni) a)

;; BridgeL
  (assert (forall ((i a)) (! (= (tb2t2 (t2tb2 i)) i) :pattern ((t2tb2 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort a1 j) (= (t2tb2 (tb2t2 j)) j)) :pattern ((t2tb2 (tb2t2 j))) )))

;; add_def1
  (assert
  (forall ((x a) (y a))
  (forall ((s (set a)))
  (= (mem1 x (tb2t1 (add a1 (t2tb2 y) (t2tb1 s)))) (or (= x y) (mem1 x s))))))

;; add_def1
  (assert
  (forall ((a2 ty))
  (forall ((x uni) (y uni))
  (=> (sort a2 x)
  (=> (sort a2 y)
  (forall ((s uni)) (= (mem a2 x (add a2 y s)) (or (= x y) (mem a2 x s)))))))))

(declare-fun singleton (ty uni) uni)

;; singleton_sort
  (assert
  (forall ((a2 ty)) (forall ((x uni)) (sort (set1 a2) (singleton a2 x)))))

;; mem_singleton
  (assert
  (forall ((x (tuple21 c f)) (y (tuple21 c f)))
  (= (mem45 x (tb2t2942 (singleton (tuple2 c1 f1) (t2tb2948 y)))) (= x y))))

;; mem_singleton
  (assert
  (forall ((x (tuple21 a e)) (y (tuple21 a e)))
  (= (mem44 x (tb2t2943 (singleton (tuple2 a1 e1) (t2tb2949 y)))) (= x y))))

;; mem_singleton
  (assert
  (forall ((x (tuple21 (tuple21 b d) (tuple21 e f))) (y (tuple21 (tuple21 b
  d) (tuple21 e f))))
  (= (mem43 x
  (tb2t2944 (singleton (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (t2tb2950 y))))
  (= x y))))

;; mem_singleton
  (assert
  (forall ((x (tuple21 (tuple21 a c) (tuple21 e f))) (y (tuple21 (tuple21 a
  c) (tuple21 e f))))
  (= (mem42 x
  (tb2t2945 (singleton (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (t2tb2951 y))))
  (= x y))))

;; mem_singleton
  (assert
  (forall ((x (set (tuple21 d f))) (y (set (tuple21 d f))))
  (= (mem41 x (tb2t2939 (singleton (set1 (tuple2 d1 f1)) (t2tb2938 y))))
  (= x y))))

;; mem_singleton
  (assert
  (forall ((x (tuple21 d f)) (y (tuple21 d f)))
  (= (mem40 x (tb2t2938 (singleton (tuple2 d1 f1) (t2tb2952 y)))) (= x y))))

;; mem_singleton
  (assert
  (forall ((x (set (tuple21 b e))) (y (set (tuple21 b e))))
  (= (mem39 x (tb2t2941 (singleton (set1 (tuple2 b1 e1)) (t2tb2940 y))))
  (= x y))))

;; mem_singleton
  (assert
  (forall ((x (tuple21 b e)) (y (tuple21 b e)))
  (= (mem38 x (tb2t2940 (singleton (tuple2 b1 e1) (t2tb2953 y)))) (= x y))))

;; mem_singleton
  (assert
  (forall ((x f) (y f))
  (= (mem37 x (tb2t2946 (singleton f1 (t2tb2954 y)))) (= x y))))

;; mem_singleton
  (assert
  (forall ((x e) (y e))
  (= (mem36 x (tb2t2947 (singleton e1 (t2tb2955 y)))) (= x y))))

;; mem_singleton
  (assert
  (forall ((x (tuple21 (tuple21 a c) (tuple21 b d))) (y (tuple21 (tuple21 a
  c) (tuple21 b d))))
  (= (mem24 x
  (tb2t686 (singleton (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb691 y))))
  (= x y))))

;; mem_singleton
  (assert
  (forall ((x (set (tuple21 c d))) (y (set (tuple21 c d))))
  (= (mem22 x (tb2t688 (singleton (set1 (tuple2 c1 d1)) (t2tb689 y))))
  (= x y))))

;; mem_singleton
  (assert
  (forall ((x (tuple21 c d)) (y (tuple21 c d)))
  (= (mem21 x (tb2t689 (singleton (tuple2 c1 d1) (t2tb693 y)))) (= x y))))

;; mem_singleton
  (assert
  (forall ((x d) (y d))
  (= (mem20 x (tb2t690 (singleton d1 (t2tb694 y)))) (= x y))))

;; mem_singleton
  (assert
  (forall ((x c) (y c))
  (= (mem7 x (tb2t132 (singleton c1 (t2tb135 y)))) (= x y))))

;; mem_singleton
  (assert
  (forall ((x (set (tuple21 a b))) (y (set (tuple21 a b))))
  (= (mem4 x (tb2t10 (singleton (set1 (tuple2 a1 b1)) (t2tb11 y)))) (= x y))))

;; mem_singleton
  (assert
  (forall ((x (tuple21 a b)) (y (tuple21 a b)))
  (= (mem3 x (tb2t11 (singleton (tuple2 a1 b1) (t2tb13 y)))) (= x y))))

;; mem_singleton
  (assert
  (forall ((x b) (y b))
  (= (mem2 x (tb2t12 (singleton b1 (t2tb14 y)))) (= x y))))

;; mem_singleton
  (assert
  (forall ((x a) (y a))
  (= (mem1 x (tb2t1 (singleton a1 (t2tb2 y)))) (= x y))))

;; mem_singleton
  (assert
  (forall ((a2 ty))
  (forall ((x uni) (y uni))
  (=> (sort a2 x) (=> (sort a2 y) (= (mem a2 x (singleton a2 y)) (= x y)))))))

(declare-fun remove (ty uni uni) uni)

;; remove_sort
  (assert
  (forall ((a2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 a2) (remove a2 x x1)))))

;; remove_def1
  (assert
  (forall ((x (tuple21 c f)) (y (tuple21 c f)) (s (set (tuple21 c f))))
  (= (mem45 x (tb2t2942 (remove (tuple2 c1 f1) (t2tb2948 y) (t2tb2942 s))))
  (and (not (= x y)) (mem45 x s)))))

;; remove_def1
  (assert
  (forall ((x (tuple21 a e)) (y (tuple21 a e)) (s (set (tuple21 a e))))
  (= (mem44 x (tb2t2943 (remove (tuple2 a1 e1) (t2tb2949 y) (t2tb2943 s))))
  (and (not (= x y)) (mem44 x s)))))

;; remove_def1
  (assert
  (forall ((x (tuple21 (tuple21 b d) (tuple21 e f))) (y (tuple21 (tuple21 b
  d) (tuple21 e f))) (s (set (tuple21 (tuple21 b d) (tuple21 e f)))))
  (= (mem43 x
  (tb2t2944
  (remove (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (t2tb2950 y) (t2tb2944 s))))
  (and (not (= x y)) (mem43 x s)))))

;; remove_def1
  (assert
  (forall ((x (tuple21 (tuple21 a c) (tuple21 e f))) (y (tuple21 (tuple21 a
  c) (tuple21 e f))) (s (set (tuple21 (tuple21 a c) (tuple21 e f)))))
  (= (mem42 x
  (tb2t2945
  (remove (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (t2tb2951 y) (t2tb2945 s))))
  (and (not (= x y)) (mem42 x s)))))

;; remove_def1
  (assert
  (forall ((x (set (tuple21 d f))) (y (set (tuple21 d f)))
  (s (set (set (tuple21 d f)))))
  (= (mem41 x
  (tb2t2939 (remove (set1 (tuple2 d1 f1)) (t2tb2938 y) (t2tb2939 s))))
  (and (not (= x y)) (mem41 x s)))))

;; remove_def1
  (assert
  (forall ((x (tuple21 d f)) (y (tuple21 d f)) (s (set (tuple21 d f))))
  (= (mem40 x (tb2t2938 (remove (tuple2 d1 f1) (t2tb2952 y) (t2tb2938 s))))
  (and (not (= x y)) (mem40 x s)))))

;; remove_def1
  (assert
  (forall ((x (set (tuple21 b e))) (y (set (tuple21 b e)))
  (s (set (set (tuple21 b e)))))
  (= (mem39 x
  (tb2t2941 (remove (set1 (tuple2 b1 e1)) (t2tb2940 y) (t2tb2941 s))))
  (and (not (= x y)) (mem39 x s)))))

;; remove_def1
  (assert
  (forall ((x (tuple21 b e)) (y (tuple21 b e)) (s (set (tuple21 b e))))
  (= (mem38 x (tb2t2940 (remove (tuple2 b1 e1) (t2tb2953 y) (t2tb2940 s))))
  (and (not (= x y)) (mem38 x s)))))

;; remove_def1
  (assert
  (forall ((x f) (y f) (s (set f)))
  (= (mem37 x (tb2t2946 (remove f1 (t2tb2954 y) (t2tb2946 s))))
  (and (not (= x y)) (mem37 x s)))))

;; remove_def1
  (assert
  (forall ((x e) (y e) (s (set e)))
  (= (mem36 x (tb2t2947 (remove e1 (t2tb2955 y) (t2tb2947 s))))
  (and (not (= x y)) (mem36 x s)))))

;; remove_def1
  (assert
  (forall ((x (tuple21 (tuple21 a c) (tuple21 b d))) (y (tuple21 (tuple21 a
  c) (tuple21 b d))) (s (set (tuple21 (tuple21 a c) (tuple21 b d)))))
  (= (mem24 x
  (tb2t686
  (remove (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb691 y) (t2tb686 s))))
  (and (not (= x y)) (mem24 x s)))))

;; remove_def1
  (assert
  (forall ((x (set (tuple21 c d))) (y (set (tuple21 c d)))
  (s (set (set (tuple21 c d)))))
  (= (mem22 x
  (tb2t688 (remove (set1 (tuple2 c1 d1)) (t2tb689 y) (t2tb688 s))))
  (and (not (= x y)) (mem22 x s)))))

;; remove_def1
  (assert
  (forall ((x (tuple21 c d)) (y (tuple21 c d)) (s (set (tuple21 c d))))
  (= (mem21 x (tb2t689 (remove (tuple2 c1 d1) (t2tb693 y) (t2tb689 s))))
  (and (not (= x y)) (mem21 x s)))))

;; remove_def1
  (assert
  (forall ((x d) (y d) (s (set d)))
  (= (mem20 x (tb2t690 (remove d1 (t2tb694 y) (t2tb690 s))))
  (and (not (= x y)) (mem20 x s)))))

;; remove_def1
  (assert
  (forall ((x c) (y c) (s (set c)))
  (= (mem7 x (tb2t132 (remove c1 (t2tb135 y) (t2tb132 s))))
  (and (not (= x y)) (mem7 x s)))))

;; remove_def1
  (assert
  (forall ((x (set (tuple21 a b))) (y (set (tuple21 a b)))
  (s (set (set (tuple21 a b)))))
  (= (mem4 x (tb2t10 (remove (set1 (tuple2 a1 b1)) (t2tb11 y) (t2tb10 s))))
  (and (not (= x y)) (mem4 x s)))))

;; remove_def1
  (assert
  (forall ((x (tuple21 a b)) (y (tuple21 a b)) (s (set (tuple21 a b))))
  (= (mem3 x (tb2t11 (remove (tuple2 a1 b1) (t2tb13 y) (t2tb11 s))))
  (and (not (= x y)) (mem3 x s)))))

;; remove_def1
  (assert
  (forall ((x b) (y b) (s (set b)))
  (= (mem2 x (tb2t12 (remove b1 (t2tb14 y) (t2tb12 s))))
  (and (not (= x y)) (mem2 x s)))))

;; remove_def1
  (assert
  (forall ((x a) (y a) (s (set a)))
  (= (mem1 x (tb2t1 (remove a1 (t2tb2 y) (t2tb1 s))))
  (and (not (= x y)) (mem1 x s)))))

;; remove_def1
  (assert
  (forall ((a2 ty))
  (forall ((x uni) (y uni) (s uni))
  (=> (sort a2 x)
  (=> (sort a2 y)
  (= (mem a2 x (remove a2 y s)) (and (not (= x y)) (mem a2 x s))))))))

(declare-fun all (ty) uni)

;; all_sort
  (assert (forall ((a2 ty)) (sort (set1 a2) (all a2))))

;; all_def
  (assert
  (forall ((x (tuple21 c f))) (mem45 x (tb2t2942 (all (tuple2 c1 f1))))))

;; all_def
  (assert
  (forall ((x (tuple21 a e))) (mem44 x (tb2t2943 (all (tuple2 a1 e1))))))

;; all_def
  (assert
  (forall ((x (tuple21 (tuple21 b d) (tuple21 e f)))) (mem43 x
  (tb2t2944 (all (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)))))))

;; all_def
  (assert
  (forall ((x (tuple21 (tuple21 a c) (tuple21 e f)))) (mem42 x
  (tb2t2945 (all (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)))))))

;; all_def
  (assert
  (forall ((x (set (tuple21 d f)))) (mem41 x
  (tb2t2939 (all (set1 (tuple2 d1 f1)))))))

;; all_def
  (assert
  (forall ((x (tuple21 d f))) (mem40 x (tb2t2938 (all (tuple2 d1 f1))))))

;; all_def
  (assert
  (forall ((x (set (tuple21 b e)))) (mem39 x
  (tb2t2941 (all (set1 (tuple2 b1 e1)))))))

;; all_def
  (assert
  (forall ((x (tuple21 b e))) (mem38 x (tb2t2940 (all (tuple2 b1 e1))))))

;; all_def
  (assert (forall ((x f)) (mem37 x (tb2t2946 (all f1)))))

;; all_def
  (assert (forall ((x e)) (mem36 x (tb2t2947 (all e1)))))

;; all_def
  (assert
  (forall ((x (tuple21 (tuple21 a c) (tuple21 b d)))) (mem24 x
  (tb2t686 (all (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))))))

;; all_def
  (assert
  (forall ((x (set (tuple21 c d)))) (mem22 x
  (tb2t688 (all (set1 (tuple2 c1 d1)))))))

;; all_def
  (assert
  (forall ((x (tuple21 c d))) (mem21 x (tb2t689 (all (tuple2 c1 d1))))))

;; all_def
  (assert (forall ((x d)) (mem20 x (tb2t690 (all d1)))))

;; all_def
  (assert (forall ((x c)) (mem7 x (tb2t132 (all c1)))))

;; all_def
  (assert
  (forall ((x (set (tuple21 a b)))) (mem4 x
  (tb2t10 (all (set1 (tuple2 a1 b1)))))))

;; all_def
  (assert
  (forall ((x (tuple21 a b))) (mem3 x (tb2t11 (all (tuple2 a1 b1))))))

;; all_def
  (assert (forall ((x b)) (mem2 x (tb2t12 (all b1)))))

;; all_def
  (assert (forall ((x a)) (mem1 x (tb2t1 (all a1)))))

;; all_def
  (assert (forall ((a2 ty)) (forall ((x uni)) (mem a2 x (all a2)))))

(declare-fun union1 (ty uni uni) uni)

;; union_sort
  (assert
  (forall ((a2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 a2) (union1 a2 x x1)))))

;; mem_union
  (assert
  (forall ((s (set (tuple21 c f))) (t (set (tuple21 c f))) (x (tuple21 c f)))
  (= (mem45 x (tb2t2942 (union1 (tuple2 c1 f1) (t2tb2942 s) (t2tb2942 t))))
  (or (mem45 x s) (mem45 x t)))))

;; mem_union
  (assert
  (forall ((s (set (tuple21 a e))) (t (set (tuple21 a e))) (x (tuple21 a e)))
  (= (mem44 x (tb2t2943 (union1 (tuple2 a1 e1) (t2tb2943 s) (t2tb2943 t))))
  (or (mem44 x s) (mem44 x t)))))

;; mem_union
  (assert
  (forall ((s (set (tuple21 (tuple21 b d) (tuple21 e f))))
  (t (set (tuple21 (tuple21 b d) (tuple21 e f)))) (x (tuple21 (tuple21 b d)
  (tuple21 e f))))
  (= (mem43 x
  (tb2t2944
  (union1 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (t2tb2944 s) (t2tb2944 t))))
  (or (mem43 x s) (mem43 x t)))))

;; mem_union
  (assert
  (forall ((s (set (tuple21 (tuple21 a c) (tuple21 e f))))
  (t (set (tuple21 (tuple21 a c) (tuple21 e f)))) (x (tuple21 (tuple21 a c)
  (tuple21 e f))))
  (= (mem42 x
  (tb2t2945
  (union1 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (t2tb2945 s) (t2tb2945 t))))
  (or (mem42 x s) (mem42 x t)))))

;; mem_union
  (assert
  (forall ((s (set (set (tuple21 d f)))) (t (set (set (tuple21 d f))))
  (x (set (tuple21 d f))))
  (= (mem41 x
  (tb2t2939 (union1 (set1 (tuple2 d1 f1)) (t2tb2939 s) (t2tb2939 t))))
  (or (mem41 x s) (mem41 x t)))))

;; mem_union
  (assert
  (forall ((s (set (tuple21 d f))) (t (set (tuple21 d f))) (x (tuple21 d f)))
  (= (mem40 x (tb2t2938 (union1 (tuple2 d1 f1) (t2tb2938 s) (t2tb2938 t))))
  (or (mem40 x s) (mem40 x t)))))

;; mem_union
  (assert
  (forall ((s (set (set (tuple21 b e)))) (t (set (set (tuple21 b e))))
  (x (set (tuple21 b e))))
  (= (mem39 x
  (tb2t2941 (union1 (set1 (tuple2 b1 e1)) (t2tb2941 s) (t2tb2941 t))))
  (or (mem39 x s) (mem39 x t)))))

;; mem_union
  (assert
  (forall ((s (set (tuple21 b e))) (t (set (tuple21 b e))) (x (tuple21 b e)))
  (= (mem38 x (tb2t2940 (union1 (tuple2 b1 e1) (t2tb2940 s) (t2tb2940 t))))
  (or (mem38 x s) (mem38 x t)))))

;; mem_union
  (assert
  (forall ((s (set f)) (t (set f)) (x f))
  (= (mem37 x (tb2t2946 (union1 f1 (t2tb2946 s) (t2tb2946 t))))
  (or (mem37 x s) (mem37 x t)))))

;; mem_union
  (assert
  (forall ((s (set e)) (t (set e)) (x e))
  (= (mem36 x (tb2t2947 (union1 e1 (t2tb2947 s) (t2tb2947 t))))
  (or (mem36 x s) (mem36 x t)))))

;; mem_union
  (assert
  (forall ((s (set (tuple21 (tuple21 a c) (tuple21 b d))))
  (t (set (tuple21 (tuple21 a c) (tuple21 b d)))) (x (tuple21 (tuple21 a c)
  (tuple21 b d))))
  (= (mem24 x
  (tb2t686
  (union1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb686 s) (t2tb686 t))))
  (or (mem24 x s) (mem24 x t)))))

;; mem_union
  (assert
  (forall ((s (set (set (tuple21 c d)))) (t (set (set (tuple21 c d))))
  (x (set (tuple21 c d))))
  (= (mem22 x
  (tb2t688 (union1 (set1 (tuple2 c1 d1)) (t2tb688 s) (t2tb688 t))))
  (or (mem22 x s) (mem22 x t)))))

;; mem_union
  (assert
  (forall ((s (set (tuple21 c d))) (t (set (tuple21 c d))) (x (tuple21 c d)))
  (= (mem21 x (tb2t689 (union1 (tuple2 c1 d1) (t2tb689 s) (t2tb689 t))))
  (or (mem21 x s) (mem21 x t)))))

;; mem_union
  (assert
  (forall ((s (set d)) (t (set d)) (x d))
  (= (mem20 x (tb2t690 (union1 d1 (t2tb690 s) (t2tb690 t))))
  (or (mem20 x s) (mem20 x t)))))

;; mem_union
  (assert
  (forall ((s (set c)) (t (set c)) (x c))
  (= (mem7 x (tb2t132 (union1 c1 (t2tb132 s) (t2tb132 t))))
  (or (mem7 x s) (mem7 x t)))))

;; mem_union
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set (set (tuple21 a b))))
  (x (set (tuple21 a b))))
  (= (mem4 x (tb2t10 (union1 (set1 (tuple2 a1 b1)) (t2tb10 s) (t2tb10 t))))
  (or (mem4 x s) (mem4 x t)))))

;; mem_union
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (tuple21 a b))) (x (tuple21 a b)))
  (= (mem3 x (tb2t11 (union1 (tuple2 a1 b1) (t2tb11 s) (t2tb11 t))))
  (or (mem3 x s) (mem3 x t)))))

;; mem_union
  (assert
  (forall ((s (set b)) (t (set b)) (x b))
  (= (mem2 x (tb2t12 (union1 b1 (t2tb12 s) (t2tb12 t))))
  (or (mem2 x s) (mem2 x t)))))

;; mem_union
  (assert
  (forall ((s (set a)) (t (set a)) (x a))
  (= (mem1 x (tb2t1 (union1 a1 (t2tb1 s) (t2tb1 t))))
  (or (mem1 x s) (mem1 x t)))))

;; mem_union
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t uni) (x uni))
  (= (mem a2 x (union1 a2 s t)) (or (mem a2 x s) (mem a2 x t))))))

(declare-fun inter (ty uni uni) uni)

;; inter_sort
  (assert
  (forall ((a2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 a2) (inter a2 x x1)))))

;; mem_inter
  (assert
  (forall ((s (set (tuple21 c f))) (t (set (tuple21 c f))) (x (tuple21 c f)))
  (= (mem45 x (tb2t2942 (inter (tuple2 c1 f1) (t2tb2942 s) (t2tb2942 t))))
  (and (mem45 x s) (mem45 x t)))))

;; mem_inter
  (assert
  (forall ((s (set (tuple21 a e))) (t (set (tuple21 a e))) (x (tuple21 a e)))
  (= (mem44 x (tb2t2943 (inter (tuple2 a1 e1) (t2tb2943 s) (t2tb2943 t))))
  (and (mem44 x s) (mem44 x t)))))

;; mem_inter
  (assert
  (forall ((s (set (tuple21 (tuple21 b d) (tuple21 e f))))
  (t (set (tuple21 (tuple21 b d) (tuple21 e f)))) (x (tuple21 (tuple21 b d)
  (tuple21 e f))))
  (= (mem43 x
  (tb2t2944
  (inter (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (t2tb2944 s) (t2tb2944 t))))
  (and (mem43 x s) (mem43 x t)))))

;; mem_inter
  (assert
  (forall ((s (set (tuple21 (tuple21 a c) (tuple21 e f))))
  (t (set (tuple21 (tuple21 a c) (tuple21 e f)))) (x (tuple21 (tuple21 a c)
  (tuple21 e f))))
  (= (mem42 x
  (tb2t2945
  (inter (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (t2tb2945 s) (t2tb2945 t))))
  (and (mem42 x s) (mem42 x t)))))

;; mem_inter
  (assert
  (forall ((s (set (set (tuple21 d f)))) (t (set (set (tuple21 d f))))
  (x (set (tuple21 d f))))
  (= (mem41 x
  (tb2t2939 (inter (set1 (tuple2 d1 f1)) (t2tb2939 s) (t2tb2939 t))))
  (and (mem41 x s) (mem41 x t)))))

;; mem_inter
  (assert
  (forall ((s (set (tuple21 d f))) (t (set (tuple21 d f))) (x (tuple21 d f)))
  (= (mem40 x (tb2t2938 (inter (tuple2 d1 f1) (t2tb2938 s) (t2tb2938 t))))
  (and (mem40 x s) (mem40 x t)))))

;; mem_inter
  (assert
  (forall ((s (set (set (tuple21 b e)))) (t (set (set (tuple21 b e))))
  (x (set (tuple21 b e))))
  (= (mem39 x
  (tb2t2941 (inter (set1 (tuple2 b1 e1)) (t2tb2941 s) (t2tb2941 t))))
  (and (mem39 x s) (mem39 x t)))))

;; mem_inter
  (assert
  (forall ((s (set (tuple21 b e))) (t (set (tuple21 b e))) (x (tuple21 b e)))
  (= (mem38 x (tb2t2940 (inter (tuple2 b1 e1) (t2tb2940 s) (t2tb2940 t))))
  (and (mem38 x s) (mem38 x t)))))

;; mem_inter
  (assert
  (forall ((s (set f)) (t (set f)) (x f))
  (= (mem37 x (tb2t2946 (inter f1 (t2tb2946 s) (t2tb2946 t))))
  (and (mem37 x s) (mem37 x t)))))

;; mem_inter
  (assert
  (forall ((s (set e)) (t (set e)) (x e))
  (= (mem36 x (tb2t2947 (inter e1 (t2tb2947 s) (t2tb2947 t))))
  (and (mem36 x s) (mem36 x t)))))

;; mem_inter
  (assert
  (forall ((s (set (tuple21 (tuple21 a c) (tuple21 b d))))
  (t (set (tuple21 (tuple21 a c) (tuple21 b d)))) (x (tuple21 (tuple21 a c)
  (tuple21 b d))))
  (= (mem24 x
  (tb2t686
  (inter (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb686 s) (t2tb686 t))))
  (and (mem24 x s) (mem24 x t)))))

;; mem_inter
  (assert
  (forall ((s (set (set (tuple21 c d)))) (t (set (set (tuple21 c d))))
  (x (set (tuple21 c d))))
  (= (mem22 x
  (tb2t688 (inter (set1 (tuple2 c1 d1)) (t2tb688 s) (t2tb688 t))))
  (and (mem22 x s) (mem22 x t)))))

;; mem_inter
  (assert
  (forall ((s (set (tuple21 c d))) (t (set (tuple21 c d))) (x (tuple21 c d)))
  (= (mem21 x (tb2t689 (inter (tuple2 c1 d1) (t2tb689 s) (t2tb689 t))))
  (and (mem21 x s) (mem21 x t)))))

;; mem_inter
  (assert
  (forall ((s (set d)) (t (set d)) (x d))
  (= (mem20 x (tb2t690 (inter d1 (t2tb690 s) (t2tb690 t))))
  (and (mem20 x s) (mem20 x t)))))

;; mem_inter
  (assert
  (forall ((s (set c)) (t (set c)) (x c))
  (= (mem7 x (tb2t132 (inter c1 (t2tb132 s) (t2tb132 t))))
  (and (mem7 x s) (mem7 x t)))))

;; mem_inter
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set (set (tuple21 a b))))
  (x (set (tuple21 a b))))
  (= (mem4 x (tb2t10 (inter (set1 (tuple2 a1 b1)) (t2tb10 s) (t2tb10 t))))
  (and (mem4 x s) (mem4 x t)))))

;; mem_inter
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (tuple21 a b))) (x (tuple21 a b)))
  (= (mem3 x (tb2t11 (inter (tuple2 a1 b1) (t2tb11 s) (t2tb11 t))))
  (and (mem3 x s) (mem3 x t)))))

;; mem_inter
  (assert
  (forall ((s (set b)) (t (set b)) (x b))
  (= (mem2 x (tb2t12 (inter b1 (t2tb12 s) (t2tb12 t))))
  (and (mem2 x s) (mem2 x t)))))

;; mem_inter
  (assert
  (forall ((s (set a)) (t (set a)) (x a))
  (= (mem1 x (tb2t1 (inter a1 (t2tb1 s) (t2tb1 t))))
  (and (mem1 x s) (mem1 x t)))))

;; mem_inter
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t uni) (x uni))
  (= (mem a2 x (inter a2 s t)) (and (mem a2 x s) (mem a2 x t))))))

(declare-fun diff (ty uni uni) uni)

;; diff_sort
  (assert
  (forall ((a2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 a2) (diff a2 x x1)))))

;; mem_diff
  (assert
  (forall ((s (set (tuple21 c f))) (t (set (tuple21 c f))) (x (tuple21 c f)))
  (= (mem45 x (tb2t2942 (diff (tuple2 c1 f1) (t2tb2942 s) (t2tb2942 t))))
  (and (mem45 x s) (not (mem45 x t))))))

;; mem_diff
  (assert
  (forall ((s (set (tuple21 a e))) (t (set (tuple21 a e))) (x (tuple21 a e)))
  (= (mem44 x (tb2t2943 (diff (tuple2 a1 e1) (t2tb2943 s) (t2tb2943 t))))
  (and (mem44 x s) (not (mem44 x t))))))

;; mem_diff
  (assert
  (forall ((s (set (tuple21 (tuple21 b d) (tuple21 e f))))
  (t (set (tuple21 (tuple21 b d) (tuple21 e f)))) (x (tuple21 (tuple21 b d)
  (tuple21 e f))))
  (= (mem43 x
  (tb2t2944
  (diff (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (t2tb2944 s) (t2tb2944 t))))
  (and (mem43 x s) (not (mem43 x t))))))

;; mem_diff
  (assert
  (forall ((s (set (tuple21 (tuple21 a c) (tuple21 e f))))
  (t (set (tuple21 (tuple21 a c) (tuple21 e f)))) (x (tuple21 (tuple21 a c)
  (tuple21 e f))))
  (= (mem42 x
  (tb2t2945
  (diff (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (t2tb2945 s) (t2tb2945 t))))
  (and (mem42 x s) (not (mem42 x t))))))

;; mem_diff
  (assert
  (forall ((s (set (set (tuple21 d f)))) (t (set (set (tuple21 d f))))
  (x (set (tuple21 d f))))
  (= (mem41 x
  (tb2t2939 (diff (set1 (tuple2 d1 f1)) (t2tb2939 s) (t2tb2939 t))))
  (and (mem41 x s) (not (mem41 x t))))))

;; mem_diff
  (assert
  (forall ((s (set (tuple21 d f))) (t (set (tuple21 d f))) (x (tuple21 d f)))
  (= (mem40 x (tb2t2938 (diff (tuple2 d1 f1) (t2tb2938 s) (t2tb2938 t))))
  (and (mem40 x s) (not (mem40 x t))))))

;; mem_diff
  (assert
  (forall ((s (set (set (tuple21 b e)))) (t (set (set (tuple21 b e))))
  (x (set (tuple21 b e))))
  (= (mem39 x
  (tb2t2941 (diff (set1 (tuple2 b1 e1)) (t2tb2941 s) (t2tb2941 t))))
  (and (mem39 x s) (not (mem39 x t))))))

;; mem_diff
  (assert
  (forall ((s (set (tuple21 b e))) (t (set (tuple21 b e))) (x (tuple21 b e)))
  (= (mem38 x (tb2t2940 (diff (tuple2 b1 e1) (t2tb2940 s) (t2tb2940 t))))
  (and (mem38 x s) (not (mem38 x t))))))

;; mem_diff
  (assert
  (forall ((s (set f)) (t (set f)) (x f))
  (= (mem37 x (tb2t2946 (diff f1 (t2tb2946 s) (t2tb2946 t))))
  (and (mem37 x s) (not (mem37 x t))))))

;; mem_diff
  (assert
  (forall ((s (set e)) (t (set e)) (x e))
  (= (mem36 x (tb2t2947 (diff e1 (t2tb2947 s) (t2tb2947 t))))
  (and (mem36 x s) (not (mem36 x t))))))

;; mem_diff
  (assert
  (forall ((s (set (tuple21 (tuple21 a c) (tuple21 b d))))
  (t (set (tuple21 (tuple21 a c) (tuple21 b d)))) (x (tuple21 (tuple21 a c)
  (tuple21 b d))))
  (= (mem24 x
  (tb2t686
  (diff (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb686 s) (t2tb686 t))))
  (and (mem24 x s) (not (mem24 x t))))))

;; mem_diff
  (assert
  (forall ((s (set (set (tuple21 c d)))) (t (set (set (tuple21 c d))))
  (x (set (tuple21 c d))))
  (= (mem22 x (tb2t688 (diff (set1 (tuple2 c1 d1)) (t2tb688 s) (t2tb688 t))))
  (and (mem22 x s) (not (mem22 x t))))))

;; mem_diff
  (assert
  (forall ((s (set (tuple21 c d))) (t (set (tuple21 c d))) (x (tuple21 c d)))
  (= (mem21 x (tb2t689 (diff (tuple2 c1 d1) (t2tb689 s) (t2tb689 t))))
  (and (mem21 x s) (not (mem21 x t))))))

;; mem_diff
  (assert
  (forall ((s (set d)) (t (set d)) (x d))
  (= (mem20 x (tb2t690 (diff d1 (t2tb690 s) (t2tb690 t))))
  (and (mem20 x s) (not (mem20 x t))))))

;; mem_diff
  (assert
  (forall ((s (set c)) (t (set c)) (x c))
  (= (mem7 x (tb2t132 (diff c1 (t2tb132 s) (t2tb132 t))))
  (and (mem7 x s) (not (mem7 x t))))))

;; mem_diff
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set (set (tuple21 a b))))
  (x (set (tuple21 a b))))
  (= (mem4 x (tb2t10 (diff (set1 (tuple2 a1 b1)) (t2tb10 s) (t2tb10 t))))
  (and (mem4 x s) (not (mem4 x t))))))

;; mem_diff
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (tuple21 a b))) (x (tuple21 a b)))
  (= (mem3 x (tb2t11 (diff (tuple2 a1 b1) (t2tb11 s) (t2tb11 t))))
  (and (mem3 x s) (not (mem3 x t))))))

;; mem_diff
  (assert
  (forall ((s (set b)) (t (set b)) (x b))
  (= (mem2 x (tb2t12 (diff b1 (t2tb12 s) (t2tb12 t))))
  (and (mem2 x s) (not (mem2 x t))))))

;; mem_diff
  (assert
  (forall ((s (set a)) (t (set a)) (x a))
  (= (mem1 x (tb2t1 (diff a1 (t2tb1 s) (t2tb1 t))))
  (and (mem1 x s) (not (mem1 x t))))))

;; mem_diff
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t uni) (x uni))
  (= (mem a2 x (diff a2 s t)) (and (mem a2 x s) (not (mem a2 x t)))))))

(declare-fun Tuple2 (ty ty uni uni) uni)

;; Tuple2_sort
  (assert
  (forall ((a2 ty) (a3 ty))
  (forall ((x uni) (x1 uni)) (sort (tuple2 a3 a2) (Tuple2 a3 a2 x x1)))))

(declare-fun Tuple2_proj_1 (ty ty uni) uni)

;; Tuple2_proj_1_sort
  (assert
  (forall ((a2 ty) (a3 ty))
  (forall ((x uni)) (sort a3 (Tuple2_proj_1 a3 a2 x)))))

;; Tuple2_proj_1_def
  (assert
  (forall ((a2 ty) (a3 ty))
  (forall ((u uni) (u1 uni))
  (=> (sort a3 u) (= (Tuple2_proj_1 a3 a2 (Tuple2 a3 a2 u u1)) u)))))

(declare-fun Tuple2_proj_2 (ty ty uni) uni)

;; Tuple2_proj_2_sort
  (assert
  (forall ((a2 ty) (a3 ty))
  (forall ((x uni)) (sort a2 (Tuple2_proj_2 a3 a2 x)))))

;; Tuple2_proj_2_def
  (assert
  (forall ((a2 ty) (a3 ty))
  (forall ((u uni) (u1 uni))
  (=> (sort a2 u1) (= (Tuple2_proj_2 a3 a2 (Tuple2 a3 a2 u u1)) u1)))))

;; tuple2_inversion
  (assert
  (forall ((a2 ty) (a3 ty))
  (forall ((u uni))
  (=> (sort (tuple2 a3 a2) u)
  (= u (Tuple2 a3 a2 (Tuple2_proj_1 a3 a2 u) (Tuple2_proj_2 a3 a2 u)))))))

(declare-fun times (ty ty uni uni) uni)

;; times_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (tuple2 a2 b2)) (times b2 a2 x x1)))))

;; mem_times
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set (tuple21 c f))) (x uni) (y (tuple21 c f)))
  (= (mem (tuple2 a2 (tuple2 c1 f1))
  (Tuple2 a2 (tuple2 c1 f1) x (t2tb2948 y))
  (times (tuple2 c1 f1) a2 s (t2tb2942 t))) (and (mem a2 x s) (mem45 y t))))))

;; mem_times
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set (tuple21 a e))) (x uni) (y (tuple21 a e)))
  (= (mem (tuple2 a2 (tuple2 a1 e1))
  (Tuple2 a2 (tuple2 a1 e1) x (t2tb2949 y))
  (times (tuple2 a1 e1) a2 s (t2tb2943 t))) (and (mem a2 x s) (mem44 y t))))))

;; mem_times
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set (tuple21 (tuple21 b d) (tuple21 e f)))) (x uni)
  (y (tuple21 (tuple21 b d) (tuple21 e f))))
  (= (mem (tuple2 a2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)))
  (Tuple2 a2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) x (t2tb2950 y))
  (times (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) a2 s (t2tb2944 t)))
  (and (mem a2 x s) (mem43 y t))))))

;; mem_times
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set (tuple21 (tuple21 a c) (tuple21 e f)))) (x uni)
  (y (tuple21 (tuple21 a c) (tuple21 e f))))
  (= (mem (tuple2 a2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)))
  (Tuple2 a2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) x (t2tb2951 y))
  (times (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) a2 s (t2tb2945 t)))
  (and (mem a2 x s) (mem42 y t))))))

;; mem_times
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set (set (tuple21 d f)))) (x uni) (y (set (tuple21 d
  f))))
  (= (mem (tuple2 a2 (set1 (tuple2 d1 f1)))
  (Tuple2 a2 (set1 (tuple2 d1 f1)) x (t2tb2938 y))
  (times (set1 (tuple2 d1 f1)) a2 s (t2tb2939 t)))
  (and (mem a2 x s) (mem41 y t))))))

;; mem_times
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set (tuple21 d f))) (x uni) (y (tuple21 d f)))
  (= (mem (tuple2 a2 (tuple2 d1 f1))
  (Tuple2 a2 (tuple2 d1 f1) x (t2tb2952 y))
  (times (tuple2 d1 f1) a2 s (t2tb2938 t))) (and (mem a2 x s) (mem40 y t))))))

;; mem_times
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set (set (tuple21 b e)))) (x uni) (y (set (tuple21 b
  e))))
  (= (mem (tuple2 a2 (set1 (tuple2 b1 e1)))
  (Tuple2 a2 (set1 (tuple2 b1 e1)) x (t2tb2940 y))
  (times (set1 (tuple2 b1 e1)) a2 s (t2tb2941 t)))
  (and (mem a2 x s) (mem39 y t))))))

;; mem_times
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set (tuple21 b e))) (x uni) (y (tuple21 b e)))
  (= (mem (tuple2 a2 (tuple2 b1 e1))
  (Tuple2 a2 (tuple2 b1 e1) x (t2tb2953 y))
  (times (tuple2 b1 e1) a2 s (t2tb2940 t))) (and (mem a2 x s) (mem38 y t))))))

;; mem_times
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set f)) (x uni) (y f))
  (= (mem (tuple2 a2 f1) (Tuple2 a2 f1 x (t2tb2954 y))
  (times f1 a2 s (t2tb2946 t))) (and (mem a2 x s) (mem37 y t))))))

;; mem_times
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set e)) (x uni) (y e))
  (= (mem (tuple2 a2 e1) (Tuple2 a2 e1 x (t2tb2955 y))
  (times e1 a2 s (t2tb2947 t))) (and (mem a2 x s) (mem36 y t))))))

;; mem_times
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set (tuple21 (tuple21 a c) (tuple21 b d)))) (x uni)
  (y (tuple21 (tuple21 a c) (tuple21 b d))))
  (= (mem (tuple2 a2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
  (Tuple2 a2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) x (t2tb691 y))
  (times (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) a2 s (t2tb686 t)))
  (and (mem a2 x s) (mem24 y t))))))

;; mem_times
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set (set (tuple21 c d)))) (x uni) (y (set (tuple21 c
  d))))
  (= (mem (tuple2 a2 (set1 (tuple2 c1 d1)))
  (Tuple2 a2 (set1 (tuple2 c1 d1)) x (t2tb689 y))
  (times (set1 (tuple2 c1 d1)) a2 s (t2tb688 t)))
  (and (mem a2 x s) (mem22 y t))))))

;; mem_times
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set (tuple21 c d))) (x uni) (y (tuple21 c d)))
  (= (mem (tuple2 a2 (tuple2 c1 d1)) (Tuple2 a2 (tuple2 c1 d1) x (t2tb693 y))
  (times (tuple2 c1 d1) a2 s (t2tb689 t))) (and (mem a2 x s) (mem21 y t))))))

;; mem_times
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set d)) (x uni) (y d))
  (= (mem (tuple2 a2 d1) (Tuple2 a2 d1 x (t2tb694 y))
  (times d1 a2 s (t2tb690 t))) (and (mem a2 x s) (mem20 y t))))))

;; mem_times
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set c)) (x uni) (y c))
  (= (mem (tuple2 a2 c1) (Tuple2 a2 c1 x (t2tb135 y))
  (times c1 a2 s (t2tb132 t))) (and (mem a2 x s) (mem7 y t))))))

;; mem_times
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set (set (tuple21 a b)))) (x uni) (y (set (tuple21 a
  b))))
  (= (mem (tuple2 a2 (set1 (tuple2 a1 b1)))
  (Tuple2 a2 (set1 (tuple2 a1 b1)) x (t2tb11 y))
  (times (set1 (tuple2 a1 b1)) a2 s (t2tb10 t)))
  (and (mem a2 x s) (mem4 y t))))))

;; mem_times
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set (tuple21 a b))) (x uni) (y (tuple21 a b)))
  (= (mem (tuple2 a2 (tuple2 a1 b1)) (Tuple2 a2 (tuple2 a1 b1) x (t2tb13 y))
  (times (tuple2 a1 b1) a2 s (t2tb11 t))) (and (mem a2 x s) (mem3 y t))))))

;; mem_times
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set b)) (x uni) (y b))
  (= (mem (tuple2 a2 b1) (Tuple2 a2 b1 x (t2tb14 y))
  (times b1 a2 s (t2tb12 t))) (and (mem a2 x s) (mem2 y t))))))

;; mem_times
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set a)) (x uni) (y a))
  (= (mem (tuple2 a2 a1) (Tuple2 a2 a1 x (t2tb2 y))
  (times a1 a2 s (t2tb1 t))) (and (mem a2 x s) (mem1 y t))))))

(declare-fun t2tb2956 ((set (tuple21 (tuple21 c f) (tuple21 c f)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 c f) (tuple21 c f))))) (sort
  (set1 (tuple2 (tuple2 c1 f1) (tuple2 c1 f1))) (t2tb2956 x))))

(declare-fun tb2t2956 (uni) (set (tuple21 (tuple21 c f) (tuple21 c f))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 c f) (tuple21 c f)))))
  (! (= (tb2t2956 (t2tb2956 i)) i) :pattern ((t2tb2956 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 c1 f1) (tuple2 c1 f1))) j)
     (= (t2tb2956 (tb2t2956 j)) j)) :pattern ((t2tb2956 (tb2t2956 j))) )))

(declare-fun t2tb2957 ((tuple21 (tuple21 c f) (tuple21 c f))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 c f) (tuple21 c f)))) (sort
  (tuple2 (tuple2 c1 f1) (tuple2 c1 f1)) (t2tb2957 x))))

(declare-fun tb2t2957 (uni) (tuple21 (tuple21 c f) (tuple21 c f)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 c f) (tuple21 c f))))
  (! (= (tb2t2957 (t2tb2957 i)) i) :pattern ((t2tb2957 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 c1 f1) (tuple2 c1 f1)) j)
     (= (t2tb2957 (tb2t2957 j)) j)) :pattern ((t2tb2957 (tb2t2957 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 c f))) (t (set (tuple21 c f))) (x (tuple21 c f))
  (y (tuple21 c f)))
  (= (mem (tuple2 (tuple2 c1 f1) (tuple2 c1 f1))
  (Tuple2 (tuple2 c1 f1) (tuple2 c1 f1) (t2tb2948 x) (t2tb2948 y))
  (times (tuple2 c1 f1) (tuple2 c1 f1) (t2tb2942 s) (t2tb2942 t)))
  (and (mem45 x s) (mem45 y t)))))

(declare-fun t2tb2958 ((set (tuple21 (tuple21 c f) (tuple21 a e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 c f) (tuple21 a e))))) (sort
  (set1 (tuple2 (tuple2 c1 f1) (tuple2 a1 e1))) (t2tb2958 x))))

(declare-fun tb2t2958 (uni) (set (tuple21 (tuple21 c f) (tuple21 a e))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 c f) (tuple21 a e)))))
  (! (= (tb2t2958 (t2tb2958 i)) i) :pattern ((t2tb2958 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 c1 f1) (tuple2 a1 e1))) j)
     (= (t2tb2958 (tb2t2958 j)) j)) :pattern ((t2tb2958 (tb2t2958 j))) )))

(declare-fun t2tb2959 ((tuple21 (tuple21 c f) (tuple21 a e))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 c f) (tuple21 a e)))) (sort
  (tuple2 (tuple2 c1 f1) (tuple2 a1 e1)) (t2tb2959 x))))

(declare-fun tb2t2959 (uni) (tuple21 (tuple21 c f) (tuple21 a e)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 c f) (tuple21 a e))))
  (! (= (tb2t2959 (t2tb2959 i)) i) :pattern ((t2tb2959 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 c1 f1) (tuple2 a1 e1)) j)
     (= (t2tb2959 (tb2t2959 j)) j)) :pattern ((t2tb2959 (tb2t2959 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 c f))) (t (set (tuple21 a e))) (x (tuple21 c f))
  (y (tuple21 a e)))
  (= (mem (tuple2 (tuple2 c1 f1) (tuple2 a1 e1))
  (Tuple2 (tuple2 c1 f1) (tuple2 a1 e1) (t2tb2948 x) (t2tb2949 y))
  (times (tuple2 a1 e1) (tuple2 c1 f1) (t2tb2942 s) (t2tb2943 t)))
  (and (mem45 x s) (mem44 y t)))))

(declare-fun t2tb2960 ((set (tuple21 (tuple21 c f) (tuple21 (tuple21 b d)
  (tuple21 e f))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 c f) (tuple21 (tuple21 b d) (tuple21 e
  f)))))) (sort
  (set1 (tuple2 (tuple2 c1 f1) (tuple2 (tuple2 b1 d1) (tuple2 e1 f1))))
  (t2tb2960 x))))

(declare-fun tb2t2960 (uni) (set (tuple21 (tuple21 c f) (tuple21 (tuple21 b
  d) (tuple21 e f)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 c f) (tuple21 (tuple21 b d) (tuple21 e
  f)))))) (! (= (tb2t2960 (t2tb2960 i)) i) :pattern ((t2tb2960 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 c1 f1) (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)))) j)
     (= (t2tb2960 (tb2t2960 j)) j)) :pattern ((t2tb2960 (tb2t2960 j))) )))

(declare-fun t2tb2961 ((tuple21 (tuple21 c f) (tuple21 (tuple21 b d)
  (tuple21 e f)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 c f) (tuple21 (tuple21 b d) (tuple21 e f)))))
  (sort (tuple2 (tuple2 c1 f1) (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)))
  (t2tb2961 x))))

(declare-fun tb2t2961 (uni) (tuple21 (tuple21 c f) (tuple21 (tuple21 b d)
  (tuple21 e f))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 c f) (tuple21 (tuple21 b d) (tuple21 e f)))))
  (! (= (tb2t2961 (t2tb2961 i)) i) :pattern ((t2tb2961 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 c1 f1) (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)))
     j) (= (t2tb2961 (tb2t2961 j)) j)) :pattern ((t2tb2961 (tb2t2961 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 c f))) (t (set (tuple21 (tuple21 b d) (tuple21 e
  f)))) (x (tuple21 c f)) (y (tuple21 (tuple21 b d) (tuple21 e f))))
  (= (mem (tuple2 (tuple2 c1 f1) (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)))
  (Tuple2 (tuple2 c1 f1) (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (t2tb2948 x)
  (t2tb2950 y))
  (times (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (tuple2 c1 f1) (t2tb2942 s)
  (t2tb2944 t))) (and (mem45 x s) (mem43 y t)))))

(declare-fun t2tb2962 ((set (tuple21 (tuple21 c f) (tuple21 (tuple21 a c)
  (tuple21 e f))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 c f) (tuple21 (tuple21 a c) (tuple21 e
  f)))))) (sort
  (set1 (tuple2 (tuple2 c1 f1) (tuple2 (tuple2 a1 c1) (tuple2 e1 f1))))
  (t2tb2962 x))))

(declare-fun tb2t2962 (uni) (set (tuple21 (tuple21 c f) (tuple21 (tuple21 a
  c) (tuple21 e f)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 c f) (tuple21 (tuple21 a c) (tuple21 e
  f)))))) (! (= (tb2t2962 (t2tb2962 i)) i) :pattern ((t2tb2962 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 c1 f1) (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)))) j)
     (= (t2tb2962 (tb2t2962 j)) j)) :pattern ((t2tb2962 (tb2t2962 j))) )))

(declare-fun t2tb2963 ((tuple21 (tuple21 c f) (tuple21 (tuple21 a c)
  (tuple21 e f)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 c f) (tuple21 (tuple21 a c) (tuple21 e f)))))
  (sort (tuple2 (tuple2 c1 f1) (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)))
  (t2tb2963 x))))

(declare-fun tb2t2963 (uni) (tuple21 (tuple21 c f) (tuple21 (tuple21 a c)
  (tuple21 e f))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 c f) (tuple21 (tuple21 a c) (tuple21 e f)))))
  (! (= (tb2t2963 (t2tb2963 i)) i) :pattern ((t2tb2963 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 c1 f1) (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)))
     j) (= (t2tb2963 (tb2t2963 j)) j)) :pattern ((t2tb2963 (tb2t2963 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 c f))) (t (set (tuple21 (tuple21 a c) (tuple21 e
  f)))) (x (tuple21 c f)) (y (tuple21 (tuple21 a c) (tuple21 e f))))
  (= (mem (tuple2 (tuple2 c1 f1) (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)))
  (Tuple2 (tuple2 c1 f1) (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (t2tb2948 x)
  (t2tb2951 y))
  (times (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (tuple2 c1 f1) (t2tb2942 s)
  (t2tb2945 t))) (and (mem45 x s) (mem42 y t)))))

(declare-fun t2tb2964 ((set (tuple21 (tuple21 c f) (set (tuple21 d
  f))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 c f) (set (tuple21 d f)))))) (sort
  (set1 (tuple2 (tuple2 c1 f1) (set1 (tuple2 d1 f1)))) (t2tb2964 x))))

(declare-fun tb2t2964 (uni) (set (tuple21 (tuple21 c f) (set (tuple21 d
  f)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 c f) (set (tuple21 d f))))))
  (! (= (tb2t2964 (t2tb2964 i)) i) :pattern ((t2tb2964 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 c1 f1) (set1 (tuple2 d1 f1)))) j)
     (= (t2tb2964 (tb2t2964 j)) j)) :pattern ((t2tb2964 (tb2t2964 j))) )))

(declare-fun t2tb2965 ((tuple21 (tuple21 c f) (set (tuple21 d f)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 c f) (set (tuple21 d f))))) (sort
  (tuple2 (tuple2 c1 f1) (set1 (tuple2 d1 f1))) (t2tb2965 x))))

(declare-fun tb2t2965 (uni) (tuple21 (tuple21 c f) (set (tuple21 d f))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 c f) (set (tuple21 d f)))))
  (! (= (tb2t2965 (t2tb2965 i)) i) :pattern ((t2tb2965 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 c1 f1) (set1 (tuple2 d1 f1))) j)
     (= (t2tb2965 (tb2t2965 j)) j)) :pattern ((t2tb2965 (tb2t2965 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 c f))) (t (set (set (tuple21 d f))))
  (x (tuple21 c f)) (y (set (tuple21 d f))))
  (= (mem (tuple2 (tuple2 c1 f1) (set1 (tuple2 d1 f1)))
  (Tuple2 (tuple2 c1 f1) (set1 (tuple2 d1 f1)) (t2tb2948 x) (t2tb2938 y))
  (times (set1 (tuple2 d1 f1)) (tuple2 c1 f1) (t2tb2942 s) (t2tb2939 t)))
  (and (mem45 x s) (mem41 y t)))))

(declare-fun t2tb2966 ((set (tuple21 (tuple21 c f) (tuple21 d f)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 c f) (tuple21 d f))))) (sort
  (set1 (tuple2 (tuple2 c1 f1) (tuple2 d1 f1))) (t2tb2966 x))))

(declare-fun tb2t2966 (uni) (set (tuple21 (tuple21 c f) (tuple21 d f))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 c f) (tuple21 d f)))))
  (! (= (tb2t2966 (t2tb2966 i)) i) :pattern ((t2tb2966 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 c1 f1) (tuple2 d1 f1))) j)
     (= (t2tb2966 (tb2t2966 j)) j)) :pattern ((t2tb2966 (tb2t2966 j))) )))

(declare-fun t2tb2967 ((tuple21 (tuple21 c f) (tuple21 d f))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 c f) (tuple21 d f)))) (sort
  (tuple2 (tuple2 c1 f1) (tuple2 d1 f1)) (t2tb2967 x))))

(declare-fun tb2t2967 (uni) (tuple21 (tuple21 c f) (tuple21 d f)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 c f) (tuple21 d f))))
  (! (= (tb2t2967 (t2tb2967 i)) i) :pattern ((t2tb2967 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 c1 f1) (tuple2 d1 f1)) j)
     (= (t2tb2967 (tb2t2967 j)) j)) :pattern ((t2tb2967 (tb2t2967 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 c f))) (t (set (tuple21 d f))) (x (tuple21 c f))
  (y (tuple21 d f)))
  (= (mem (tuple2 (tuple2 c1 f1) (tuple2 d1 f1))
  (Tuple2 (tuple2 c1 f1) (tuple2 d1 f1) (t2tb2948 x) (t2tb2952 y))
  (times (tuple2 d1 f1) (tuple2 c1 f1) (t2tb2942 s) (t2tb2938 t)))
  (and (mem45 x s) (mem40 y t)))))

(declare-fun t2tb2968 ((set (tuple21 (tuple21 c f) (set (tuple21 b
  e))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 c f) (set (tuple21 b e)))))) (sort
  (set1 (tuple2 (tuple2 c1 f1) (set1 (tuple2 b1 e1)))) (t2tb2968 x))))

(declare-fun tb2t2968 (uni) (set (tuple21 (tuple21 c f) (set (tuple21 b
  e)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 c f) (set (tuple21 b e))))))
  (! (= (tb2t2968 (t2tb2968 i)) i) :pattern ((t2tb2968 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 c1 f1) (set1 (tuple2 b1 e1)))) j)
     (= (t2tb2968 (tb2t2968 j)) j)) :pattern ((t2tb2968 (tb2t2968 j))) )))

(declare-fun t2tb2969 ((tuple21 (tuple21 c f) (set (tuple21 b e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 c f) (set (tuple21 b e))))) (sort
  (tuple2 (tuple2 c1 f1) (set1 (tuple2 b1 e1))) (t2tb2969 x))))

(declare-fun tb2t2969 (uni) (tuple21 (tuple21 c f) (set (tuple21 b e))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 c f) (set (tuple21 b e)))))
  (! (= (tb2t2969 (t2tb2969 i)) i) :pattern ((t2tb2969 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 c1 f1) (set1 (tuple2 b1 e1))) j)
     (= (t2tb2969 (tb2t2969 j)) j)) :pattern ((t2tb2969 (tb2t2969 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 c f))) (t (set (set (tuple21 b e))))
  (x (tuple21 c f)) (y (set (tuple21 b e))))
  (= (mem (tuple2 (tuple2 c1 f1) (set1 (tuple2 b1 e1)))
  (Tuple2 (tuple2 c1 f1) (set1 (tuple2 b1 e1)) (t2tb2948 x) (t2tb2940 y))
  (times (set1 (tuple2 b1 e1)) (tuple2 c1 f1) (t2tb2942 s) (t2tb2941 t)))
  (and (mem45 x s) (mem39 y t)))))

(declare-fun t2tb2970 ((set (tuple21 (tuple21 c f) (tuple21 b e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 c f) (tuple21 b e))))) (sort
  (set1 (tuple2 (tuple2 c1 f1) (tuple2 b1 e1))) (t2tb2970 x))))

(declare-fun tb2t2970 (uni) (set (tuple21 (tuple21 c f) (tuple21 b e))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 c f) (tuple21 b e)))))
  (! (= (tb2t2970 (t2tb2970 i)) i) :pattern ((t2tb2970 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 c1 f1) (tuple2 b1 e1))) j)
     (= (t2tb2970 (tb2t2970 j)) j)) :pattern ((t2tb2970 (tb2t2970 j))) )))

(declare-fun t2tb2971 ((tuple21 (tuple21 c f) (tuple21 b e))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 c f) (tuple21 b e)))) (sort
  (tuple2 (tuple2 c1 f1) (tuple2 b1 e1)) (t2tb2971 x))))

(declare-fun tb2t2971 (uni) (tuple21 (tuple21 c f) (tuple21 b e)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 c f) (tuple21 b e))))
  (! (= (tb2t2971 (t2tb2971 i)) i) :pattern ((t2tb2971 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 c1 f1) (tuple2 b1 e1)) j)
     (= (t2tb2971 (tb2t2971 j)) j)) :pattern ((t2tb2971 (tb2t2971 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 c f))) (t (set (tuple21 b e))) (x (tuple21 c f))
  (y (tuple21 b e)))
  (= (mem (tuple2 (tuple2 c1 f1) (tuple2 b1 e1))
  (Tuple2 (tuple2 c1 f1) (tuple2 b1 e1) (t2tb2948 x) (t2tb2953 y))
  (times (tuple2 b1 e1) (tuple2 c1 f1) (t2tb2942 s) (t2tb2940 t)))
  (and (mem45 x s) (mem38 y t)))))

(declare-fun t2tb2972 ((set (tuple21 (tuple21 c f) f))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 c f) f)))) (sort
  (set1 (tuple2 (tuple2 c1 f1) f1)) (t2tb2972 x))))

(declare-fun tb2t2972 (uni) (set (tuple21 (tuple21 c f) f)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 c f) f))))
  (! (= (tb2t2972 (t2tb2972 i)) i) :pattern ((t2tb2972 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 c1 f1) f1)) j)
     (= (t2tb2972 (tb2t2972 j)) j)) :pattern ((t2tb2972 (tb2t2972 j))) )))

(declare-fun t2tb2973 ((tuple21 (tuple21 c f) f)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 c f) f))) (sort (tuple2 (tuple2 c1 f1) f1)
  (t2tb2973 x))))

(declare-fun tb2t2973 (uni) (tuple21 (tuple21 c f) f))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 c f) f)))
  (! (= (tb2t2973 (t2tb2973 i)) i) :pattern ((t2tb2973 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 c1 f1) f1) j) (= (t2tb2973 (tb2t2973 j)) j)) :pattern (
  (t2tb2973 (tb2t2973 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 c f))) (t (set f)) (x (tuple21 c f)) (y f))
  (= (mem (tuple2 (tuple2 c1 f1) f1)
  (Tuple2 (tuple2 c1 f1) f1 (t2tb2948 x) (t2tb2954 y))
  (times f1 (tuple2 c1 f1) (t2tb2942 s) (t2tb2946 t)))
  (and (mem45 x s) (mem37 y t)))))

(declare-fun t2tb2974 ((set (tuple21 (tuple21 c f) e))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 c f) e)))) (sort
  (set1 (tuple2 (tuple2 c1 f1) e1)) (t2tb2974 x))))

(declare-fun tb2t2974 (uni) (set (tuple21 (tuple21 c f) e)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 c f) e))))
  (! (= (tb2t2974 (t2tb2974 i)) i) :pattern ((t2tb2974 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 c1 f1) e1)) j)
     (= (t2tb2974 (tb2t2974 j)) j)) :pattern ((t2tb2974 (tb2t2974 j))) )))

(declare-fun t2tb2975 ((tuple21 (tuple21 c f) e)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 c f) e))) (sort (tuple2 (tuple2 c1 f1) e1)
  (t2tb2975 x))))

(declare-fun tb2t2975 (uni) (tuple21 (tuple21 c f) e))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 c f) e)))
  (! (= (tb2t2975 (t2tb2975 i)) i) :pattern ((t2tb2975 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 c1 f1) e1) j) (= (t2tb2975 (tb2t2975 j)) j)) :pattern (
  (t2tb2975 (tb2t2975 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 c f))) (t (set e)) (x (tuple21 c f)) (y e))
  (= (mem (tuple2 (tuple2 c1 f1) e1)
  (Tuple2 (tuple2 c1 f1) e1 (t2tb2948 x) (t2tb2955 y))
  (times e1 (tuple2 c1 f1) (t2tb2942 s) (t2tb2947 t)))
  (and (mem45 x s) (mem36 y t)))))

(declare-fun t2tb2976 ((set (tuple21 (tuple21 c f) (tuple21 (tuple21 a c)
  (tuple21 b d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 c f) (tuple21 (tuple21 a c) (tuple21 b
  d)))))) (sort
  (set1 (tuple2 (tuple2 c1 f1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))))
  (t2tb2976 x))))

(declare-fun tb2t2976 (uni) (set (tuple21 (tuple21 c f) (tuple21 (tuple21 a
  c) (tuple21 b d)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 c f) (tuple21 (tuple21 a c) (tuple21 b
  d)))))) (! (= (tb2t2976 (t2tb2976 i)) i) :pattern ((t2tb2976 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 c1 f1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))) j)
     (= (t2tb2976 (tb2t2976 j)) j)) :pattern ((t2tb2976 (tb2t2976 j))) )))

(declare-fun t2tb2977 ((tuple21 (tuple21 c f) (tuple21 (tuple21 a c)
  (tuple21 b d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 c f) (tuple21 (tuple21 a c) (tuple21 b d)))))
  (sort (tuple2 (tuple2 c1 f1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
  (t2tb2977 x))))

(declare-fun tb2t2977 (uni) (tuple21 (tuple21 c f) (tuple21 (tuple21 a c)
  (tuple21 b d))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 c f) (tuple21 (tuple21 a c) (tuple21 b d)))))
  (! (= (tb2t2977 (t2tb2977 i)) i) :pattern ((t2tb2977 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 c1 f1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
     j) (= (t2tb2977 (tb2t2977 j)) j)) :pattern ((t2tb2977 (tb2t2977 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 c f))) (t (set (tuple21 (tuple21 a c) (tuple21 b
  d)))) (x (tuple21 c f)) (y (tuple21 (tuple21 a c) (tuple21 b d))))
  (= (mem (tuple2 (tuple2 c1 f1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
  (Tuple2 (tuple2 c1 f1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb2948 x)
  (t2tb691 y))
  (times (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 c1 f1) (t2tb2942 s)
  (t2tb686 t))) (and (mem45 x s) (mem24 y t)))))

(declare-fun t2tb2978 ((set (tuple21 (tuple21 c f) (set (tuple21 c
  d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 c f) (set (tuple21 c d)))))) (sort
  (set1 (tuple2 (tuple2 c1 f1) (set1 (tuple2 c1 d1)))) (t2tb2978 x))))

(declare-fun tb2t2978 (uni) (set (tuple21 (tuple21 c f) (set (tuple21 c
  d)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 c f) (set (tuple21 c d))))))
  (! (= (tb2t2978 (t2tb2978 i)) i) :pattern ((t2tb2978 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 c1 f1) (set1 (tuple2 c1 d1)))) j)
     (= (t2tb2978 (tb2t2978 j)) j)) :pattern ((t2tb2978 (tb2t2978 j))) )))

(declare-fun t2tb2979 ((tuple21 (tuple21 c f) (set (tuple21 c d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 c f) (set (tuple21 c d))))) (sort
  (tuple2 (tuple2 c1 f1) (set1 (tuple2 c1 d1))) (t2tb2979 x))))

(declare-fun tb2t2979 (uni) (tuple21 (tuple21 c f) (set (tuple21 c d))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 c f) (set (tuple21 c d)))))
  (! (= (tb2t2979 (t2tb2979 i)) i) :pattern ((t2tb2979 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 c1 f1) (set1 (tuple2 c1 d1))) j)
     (= (t2tb2979 (tb2t2979 j)) j)) :pattern ((t2tb2979 (tb2t2979 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 c f))) (t (set (set (tuple21 c d))))
  (x (tuple21 c f)) (y (set (tuple21 c d))))
  (= (mem (tuple2 (tuple2 c1 f1) (set1 (tuple2 c1 d1)))
  (Tuple2 (tuple2 c1 f1) (set1 (tuple2 c1 d1)) (t2tb2948 x) (t2tb689 y))
  (times (set1 (tuple2 c1 d1)) (tuple2 c1 f1) (t2tb2942 s) (t2tb688 t)))
  (and (mem45 x s) (mem22 y t)))))

(declare-fun t2tb2980 ((set (tuple21 (tuple21 c f) (tuple21 c d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 c f) (tuple21 c d))))) (sort
  (set1 (tuple2 (tuple2 c1 f1) (tuple2 c1 d1))) (t2tb2980 x))))

(declare-fun tb2t2980 (uni) (set (tuple21 (tuple21 c f) (tuple21 c d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 c f) (tuple21 c d)))))
  (! (= (tb2t2980 (t2tb2980 i)) i) :pattern ((t2tb2980 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 c1 f1) (tuple2 c1 d1))) j)
     (= (t2tb2980 (tb2t2980 j)) j)) :pattern ((t2tb2980 (tb2t2980 j))) )))

(declare-fun t2tb2981 ((tuple21 (tuple21 c f) (tuple21 c d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 c f) (tuple21 c d)))) (sort
  (tuple2 (tuple2 c1 f1) (tuple2 c1 d1)) (t2tb2981 x))))

(declare-fun tb2t2981 (uni) (tuple21 (tuple21 c f) (tuple21 c d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 c f) (tuple21 c d))))
  (! (= (tb2t2981 (t2tb2981 i)) i) :pattern ((t2tb2981 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 c1 f1) (tuple2 c1 d1)) j)
     (= (t2tb2981 (tb2t2981 j)) j)) :pattern ((t2tb2981 (tb2t2981 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 c f))) (t (set (tuple21 c d))) (x (tuple21 c f))
  (y (tuple21 c d)))
  (= (mem (tuple2 (tuple2 c1 f1) (tuple2 c1 d1))
  (Tuple2 (tuple2 c1 f1) (tuple2 c1 d1) (t2tb2948 x) (t2tb693 y))
  (times (tuple2 c1 d1) (tuple2 c1 f1) (t2tb2942 s) (t2tb689 t)))
  (and (mem45 x s) (mem21 y t)))))

(declare-fun t2tb2982 ((set (tuple21 (tuple21 c f) d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 c f) d)))) (sort
  (set1 (tuple2 (tuple2 c1 f1) d1)) (t2tb2982 x))))

(declare-fun tb2t2982 (uni) (set (tuple21 (tuple21 c f) d)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 c f) d))))
  (! (= (tb2t2982 (t2tb2982 i)) i) :pattern ((t2tb2982 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 c1 f1) d1)) j)
     (= (t2tb2982 (tb2t2982 j)) j)) :pattern ((t2tb2982 (tb2t2982 j))) )))

(declare-fun t2tb2983 ((tuple21 (tuple21 c f) d)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 c f) d))) (sort (tuple2 (tuple2 c1 f1) d1)
  (t2tb2983 x))))

(declare-fun tb2t2983 (uni) (tuple21 (tuple21 c f) d))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 c f) d)))
  (! (= (tb2t2983 (t2tb2983 i)) i) :pattern ((t2tb2983 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 c1 f1) d1) j) (= (t2tb2983 (tb2t2983 j)) j)) :pattern (
  (t2tb2983 (tb2t2983 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 c f))) (t (set d)) (x (tuple21 c f)) (y d))
  (= (mem (tuple2 (tuple2 c1 f1) d1)
  (Tuple2 (tuple2 c1 f1) d1 (t2tb2948 x) (t2tb694 y))
  (times d1 (tuple2 c1 f1) (t2tb2942 s) (t2tb690 t)))
  (and (mem45 x s) (mem20 y t)))))

(declare-fun t2tb2984 ((set (tuple21 (tuple21 c f) c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 c f) c)))) (sort
  (set1 (tuple2 (tuple2 c1 f1) c1)) (t2tb2984 x))))

(declare-fun tb2t2984 (uni) (set (tuple21 (tuple21 c f) c)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 c f) c))))
  (! (= (tb2t2984 (t2tb2984 i)) i) :pattern ((t2tb2984 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 c1 f1) c1)) j)
     (= (t2tb2984 (tb2t2984 j)) j)) :pattern ((t2tb2984 (tb2t2984 j))) )))

(declare-fun t2tb2985 ((tuple21 (tuple21 c f) c)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 c f) c))) (sort (tuple2 (tuple2 c1 f1) c1)
  (t2tb2985 x))))

(declare-fun tb2t2985 (uni) (tuple21 (tuple21 c f) c))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 c f) c)))
  (! (= (tb2t2985 (t2tb2985 i)) i) :pattern ((t2tb2985 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 c1 f1) c1) j) (= (t2tb2985 (tb2t2985 j)) j)) :pattern (
  (t2tb2985 (tb2t2985 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 c f))) (t (set c)) (x (tuple21 c f)) (y c))
  (= (mem (tuple2 (tuple2 c1 f1) c1)
  (Tuple2 (tuple2 c1 f1) c1 (t2tb2948 x) (t2tb135 y))
  (times c1 (tuple2 c1 f1) (t2tb2942 s) (t2tb132 t)))
  (and (mem45 x s) (mem7 y t)))))

(declare-fun t2tb2986 ((set (tuple21 (tuple21 c f) (set (tuple21 a
  b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 c f) (set (tuple21 a b)))))) (sort
  (set1 (tuple2 (tuple2 c1 f1) (set1 (tuple2 a1 b1)))) (t2tb2986 x))))

(declare-fun tb2t2986 (uni) (set (tuple21 (tuple21 c f) (set (tuple21 a
  b)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 c f) (set (tuple21 a b))))))
  (! (= (tb2t2986 (t2tb2986 i)) i) :pattern ((t2tb2986 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 c1 f1) (set1 (tuple2 a1 b1)))) j)
     (= (t2tb2986 (tb2t2986 j)) j)) :pattern ((t2tb2986 (tb2t2986 j))) )))

(declare-fun t2tb2987 ((tuple21 (tuple21 c f) (set (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 c f) (set (tuple21 a b))))) (sort
  (tuple2 (tuple2 c1 f1) (set1 (tuple2 a1 b1))) (t2tb2987 x))))

(declare-fun tb2t2987 (uni) (tuple21 (tuple21 c f) (set (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 c f) (set (tuple21 a b)))))
  (! (= (tb2t2987 (t2tb2987 i)) i) :pattern ((t2tb2987 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 c1 f1) (set1 (tuple2 a1 b1))) j)
     (= (t2tb2987 (tb2t2987 j)) j)) :pattern ((t2tb2987 (tb2t2987 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 c f))) (t (set (set (tuple21 a b))))
  (x (tuple21 c f)) (y (set (tuple21 a b))))
  (= (mem (tuple2 (tuple2 c1 f1) (set1 (tuple2 a1 b1)))
  (Tuple2 (tuple2 c1 f1) (set1 (tuple2 a1 b1)) (t2tb2948 x) (t2tb11 y))
  (times (set1 (tuple2 a1 b1)) (tuple2 c1 f1) (t2tb2942 s) (t2tb10 t)))
  (and (mem45 x s) (mem4 y t)))))

(declare-fun t2tb2988 ((set (tuple21 (tuple21 c f) (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 c f) (tuple21 a b))))) (sort
  (set1 (tuple2 (tuple2 c1 f1) (tuple2 a1 b1))) (t2tb2988 x))))

(declare-fun tb2t2988 (uni) (set (tuple21 (tuple21 c f) (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 c f) (tuple21 a b)))))
  (! (= (tb2t2988 (t2tb2988 i)) i) :pattern ((t2tb2988 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 c1 f1) (tuple2 a1 b1))) j)
     (= (t2tb2988 (tb2t2988 j)) j)) :pattern ((t2tb2988 (tb2t2988 j))) )))

(declare-fun t2tb2989 ((tuple21 (tuple21 c f) (tuple21 a b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 c f) (tuple21 a b)))) (sort
  (tuple2 (tuple2 c1 f1) (tuple2 a1 b1)) (t2tb2989 x))))

(declare-fun tb2t2989 (uni) (tuple21 (tuple21 c f) (tuple21 a b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 c f) (tuple21 a b))))
  (! (= (tb2t2989 (t2tb2989 i)) i) :pattern ((t2tb2989 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 c1 f1) (tuple2 a1 b1)) j)
     (= (t2tb2989 (tb2t2989 j)) j)) :pattern ((t2tb2989 (tb2t2989 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 c f))) (t (set (tuple21 a b))) (x (tuple21 c f))
  (y (tuple21 a b)))
  (= (mem (tuple2 (tuple2 c1 f1) (tuple2 a1 b1))
  (Tuple2 (tuple2 c1 f1) (tuple2 a1 b1) (t2tb2948 x) (t2tb13 y))
  (times (tuple2 a1 b1) (tuple2 c1 f1) (t2tb2942 s) (t2tb11 t)))
  (and (mem45 x s) (mem3 y t)))))

(declare-fun t2tb2990 ((set (tuple21 (tuple21 c f) b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 c f) b)))) (sort
  (set1 (tuple2 (tuple2 c1 f1) b1)) (t2tb2990 x))))

(declare-fun tb2t2990 (uni) (set (tuple21 (tuple21 c f) b)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 c f) b))))
  (! (= (tb2t2990 (t2tb2990 i)) i) :pattern ((t2tb2990 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 c1 f1) b1)) j)
     (= (t2tb2990 (tb2t2990 j)) j)) :pattern ((t2tb2990 (tb2t2990 j))) )))

(declare-fun t2tb2991 ((tuple21 (tuple21 c f) b)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 c f) b))) (sort (tuple2 (tuple2 c1 f1) b1)
  (t2tb2991 x))))

(declare-fun tb2t2991 (uni) (tuple21 (tuple21 c f) b))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 c f) b)))
  (! (= (tb2t2991 (t2tb2991 i)) i) :pattern ((t2tb2991 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 c1 f1) b1) j) (= (t2tb2991 (tb2t2991 j)) j)) :pattern (
  (t2tb2991 (tb2t2991 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 c f))) (t (set b)) (x (tuple21 c f)) (y b))
  (= (mem (tuple2 (tuple2 c1 f1) b1)
  (Tuple2 (tuple2 c1 f1) b1 (t2tb2948 x) (t2tb14 y))
  (times b1 (tuple2 c1 f1) (t2tb2942 s) (t2tb12 t)))
  (and (mem45 x s) (mem2 y t)))))

(declare-fun t2tb2992 ((set (tuple21 (tuple21 c f) a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 c f) a)))) (sort
  (set1 (tuple2 (tuple2 c1 f1) a1)) (t2tb2992 x))))

(declare-fun tb2t2992 (uni) (set (tuple21 (tuple21 c f) a)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 c f) a))))
  (! (= (tb2t2992 (t2tb2992 i)) i) :pattern ((t2tb2992 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 c1 f1) a1)) j)
     (= (t2tb2992 (tb2t2992 j)) j)) :pattern ((t2tb2992 (tb2t2992 j))) )))

(declare-fun t2tb2993 ((tuple21 (tuple21 c f) a)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 c f) a))) (sort (tuple2 (tuple2 c1 f1) a1)
  (t2tb2993 x))))

(declare-fun tb2t2993 (uni) (tuple21 (tuple21 c f) a))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 c f) a)))
  (! (= (tb2t2993 (t2tb2993 i)) i) :pattern ((t2tb2993 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 c1 f1) a1) j) (= (t2tb2993 (tb2t2993 j)) j)) :pattern (
  (t2tb2993 (tb2t2993 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 c f))) (t (set a)) (x (tuple21 c f)) (y a))
  (= (mem (tuple2 (tuple2 c1 f1) a1)
  (Tuple2 (tuple2 c1 f1) a1 (t2tb2948 x) (t2tb2 y))
  (times a1 (tuple2 c1 f1) (t2tb2942 s) (t2tb1 t)))
  (and (mem45 x s) (mem1 y t)))))

;; mem_times
  (assert
  (forall ((b2 ty))
  (forall ((s (set (tuple21 c f))) (t uni) (x (tuple21 c f)) (y uni))
  (= (mem (tuple2 (tuple2 c1 f1) b2)
  (Tuple2 (tuple2 c1 f1) b2 (t2tb2948 x) y)
  (times b2 (tuple2 c1 f1) (t2tb2942 s) t)) (and (mem45 x s) (mem b2 y t))))))

(declare-fun t2tb2994 ((set (tuple21 (tuple21 a e) (tuple21 c f)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a e) (tuple21 c f))))) (sort
  (set1 (tuple2 (tuple2 a1 e1) (tuple2 c1 f1))) (t2tb2994 x))))

(declare-fun tb2t2994 (uni) (set (tuple21 (tuple21 a e) (tuple21 c f))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a e) (tuple21 c f)))))
  (! (= (tb2t2994 (t2tb2994 i)) i) :pattern ((t2tb2994 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 e1) (tuple2 c1 f1))) j)
     (= (t2tb2994 (tb2t2994 j)) j)) :pattern ((t2tb2994 (tb2t2994 j))) )))

(declare-fun t2tb2995 ((tuple21 (tuple21 a e) (tuple21 c f))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a e) (tuple21 c f)))) (sort
  (tuple2 (tuple2 a1 e1) (tuple2 c1 f1)) (t2tb2995 x))))

(declare-fun tb2t2995 (uni) (tuple21 (tuple21 a e) (tuple21 c f)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a e) (tuple21 c f))))
  (! (= (tb2t2995 (t2tb2995 i)) i) :pattern ((t2tb2995 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 e1) (tuple2 c1 f1)) j)
     (= (t2tb2995 (tb2t2995 j)) j)) :pattern ((t2tb2995 (tb2t2995 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a e))) (t (set (tuple21 c f))) (x (tuple21 a e))
  (y (tuple21 c f)))
  (= (mem (tuple2 (tuple2 a1 e1) (tuple2 c1 f1))
  (Tuple2 (tuple2 a1 e1) (tuple2 c1 f1) (t2tb2949 x) (t2tb2948 y))
  (times (tuple2 c1 f1) (tuple2 a1 e1) (t2tb2943 s) (t2tb2942 t)))
  (and (mem44 x s) (mem45 y t)))))

(declare-fun t2tb2996 ((set (tuple21 (tuple21 a e) (tuple21 a e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a e) (tuple21 a e))))) (sort
  (set1 (tuple2 (tuple2 a1 e1) (tuple2 a1 e1))) (t2tb2996 x))))

(declare-fun tb2t2996 (uni) (set (tuple21 (tuple21 a e) (tuple21 a e))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a e) (tuple21 a e)))))
  (! (= (tb2t2996 (t2tb2996 i)) i) :pattern ((t2tb2996 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 e1) (tuple2 a1 e1))) j)
     (= (t2tb2996 (tb2t2996 j)) j)) :pattern ((t2tb2996 (tb2t2996 j))) )))

(declare-fun t2tb2997 ((tuple21 (tuple21 a e) (tuple21 a e))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a e) (tuple21 a e)))) (sort
  (tuple2 (tuple2 a1 e1) (tuple2 a1 e1)) (t2tb2997 x))))

(declare-fun tb2t2997 (uni) (tuple21 (tuple21 a e) (tuple21 a e)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a e) (tuple21 a e))))
  (! (= (tb2t2997 (t2tb2997 i)) i) :pattern ((t2tb2997 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 e1) (tuple2 a1 e1)) j)
     (= (t2tb2997 (tb2t2997 j)) j)) :pattern ((t2tb2997 (tb2t2997 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a e))) (t (set (tuple21 a e))) (x (tuple21 a e))
  (y (tuple21 a e)))
  (= (mem (tuple2 (tuple2 a1 e1) (tuple2 a1 e1))
  (Tuple2 (tuple2 a1 e1) (tuple2 a1 e1) (t2tb2949 x) (t2tb2949 y))
  (times (tuple2 a1 e1) (tuple2 a1 e1) (t2tb2943 s) (t2tb2943 t)))
  (and (mem44 x s) (mem44 y t)))))

(declare-fun t2tb2998 ((set (tuple21 (tuple21 a e) (tuple21 (tuple21 b d)
  (tuple21 e f))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a e) (tuple21 (tuple21 b d) (tuple21 e
  f)))))) (sort
  (set1 (tuple2 (tuple2 a1 e1) (tuple2 (tuple2 b1 d1) (tuple2 e1 f1))))
  (t2tb2998 x))))

(declare-fun tb2t2998 (uni) (set (tuple21 (tuple21 a e) (tuple21 (tuple21 b
  d) (tuple21 e f)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a e) (tuple21 (tuple21 b d) (tuple21 e
  f)))))) (! (= (tb2t2998 (t2tb2998 i)) i) :pattern ((t2tb2998 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 a1 e1) (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)))) j)
     (= (t2tb2998 (tb2t2998 j)) j)) :pattern ((t2tb2998 (tb2t2998 j))) )))

(declare-fun t2tb2999 ((tuple21 (tuple21 a e) (tuple21 (tuple21 b d)
  (tuple21 e f)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a e) (tuple21 (tuple21 b d) (tuple21 e f)))))
  (sort (tuple2 (tuple2 a1 e1) (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)))
  (t2tb2999 x))))

(declare-fun tb2t2999 (uni) (tuple21 (tuple21 a e) (tuple21 (tuple21 b d)
  (tuple21 e f))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a e) (tuple21 (tuple21 b d) (tuple21 e f)))))
  (! (= (tb2t2999 (t2tb2999 i)) i) :pattern ((t2tb2999 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 e1) (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)))
     j) (= (t2tb2999 (tb2t2999 j)) j)) :pattern ((t2tb2999 (tb2t2999 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a e))) (t (set (tuple21 (tuple21 b d) (tuple21 e
  f)))) (x (tuple21 a e)) (y (tuple21 (tuple21 b d) (tuple21 e f))))
  (= (mem (tuple2 (tuple2 a1 e1) (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)))
  (Tuple2 (tuple2 a1 e1) (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (t2tb2949 x)
  (t2tb2950 y))
  (times (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (tuple2 a1 e1) (t2tb2943 s)
  (t2tb2944 t))) (and (mem44 x s) (mem43 y t)))))

(declare-fun t2tb3000 ((set (tuple21 (tuple21 a e) (tuple21 (tuple21 a c)
  (tuple21 e f))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a e) (tuple21 (tuple21 a c) (tuple21 e
  f)))))) (sort
  (set1 (tuple2 (tuple2 a1 e1) (tuple2 (tuple2 a1 c1) (tuple2 e1 f1))))
  (t2tb3000 x))))

(declare-fun tb2t3000 (uni) (set (tuple21 (tuple21 a e) (tuple21 (tuple21 a
  c) (tuple21 e f)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a e) (tuple21 (tuple21 a c) (tuple21 e
  f)))))) (! (= (tb2t3000 (t2tb3000 i)) i) :pattern ((t2tb3000 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 a1 e1) (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)))) j)
     (= (t2tb3000 (tb2t3000 j)) j)) :pattern ((t2tb3000 (tb2t3000 j))) )))

(declare-fun t2tb3001 ((tuple21 (tuple21 a e) (tuple21 (tuple21 a c)
  (tuple21 e f)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a e) (tuple21 (tuple21 a c) (tuple21 e f)))))
  (sort (tuple2 (tuple2 a1 e1) (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)))
  (t2tb3001 x))))

(declare-fun tb2t3001 (uni) (tuple21 (tuple21 a e) (tuple21 (tuple21 a c)
  (tuple21 e f))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a e) (tuple21 (tuple21 a c) (tuple21 e f)))))
  (! (= (tb2t3001 (t2tb3001 i)) i) :pattern ((t2tb3001 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 e1) (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)))
     j) (= (t2tb3001 (tb2t3001 j)) j)) :pattern ((t2tb3001 (tb2t3001 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a e))) (t (set (tuple21 (tuple21 a c) (tuple21 e
  f)))) (x (tuple21 a e)) (y (tuple21 (tuple21 a c) (tuple21 e f))))
  (= (mem (tuple2 (tuple2 a1 e1) (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)))
  (Tuple2 (tuple2 a1 e1) (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (t2tb2949 x)
  (t2tb2951 y))
  (times (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (tuple2 a1 e1) (t2tb2943 s)
  (t2tb2945 t))) (and (mem44 x s) (mem42 y t)))))

(declare-fun t2tb3002 ((set (tuple21 (tuple21 a e) (set (tuple21 d
  f))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a e) (set (tuple21 d f)))))) (sort
  (set1 (tuple2 (tuple2 a1 e1) (set1 (tuple2 d1 f1)))) (t2tb3002 x))))

(declare-fun tb2t3002 (uni) (set (tuple21 (tuple21 a e) (set (tuple21 d
  f)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a e) (set (tuple21 d f))))))
  (! (= (tb2t3002 (t2tb3002 i)) i) :pattern ((t2tb3002 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 e1) (set1 (tuple2 d1 f1)))) j)
     (= (t2tb3002 (tb2t3002 j)) j)) :pattern ((t2tb3002 (tb2t3002 j))) )))

(declare-fun t2tb3003 ((tuple21 (tuple21 a e) (set (tuple21 d f)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a e) (set (tuple21 d f))))) (sort
  (tuple2 (tuple2 a1 e1) (set1 (tuple2 d1 f1))) (t2tb3003 x))))

(declare-fun tb2t3003 (uni) (tuple21 (tuple21 a e) (set (tuple21 d f))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a e) (set (tuple21 d f)))))
  (! (= (tb2t3003 (t2tb3003 i)) i) :pattern ((t2tb3003 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 e1) (set1 (tuple2 d1 f1))) j)
     (= (t2tb3003 (tb2t3003 j)) j)) :pattern ((t2tb3003 (tb2t3003 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a e))) (t (set (set (tuple21 d f))))
  (x (tuple21 a e)) (y (set (tuple21 d f))))
  (= (mem (tuple2 (tuple2 a1 e1) (set1 (tuple2 d1 f1)))
  (Tuple2 (tuple2 a1 e1) (set1 (tuple2 d1 f1)) (t2tb2949 x) (t2tb2938 y))
  (times (set1 (tuple2 d1 f1)) (tuple2 a1 e1) (t2tb2943 s) (t2tb2939 t)))
  (and (mem44 x s) (mem41 y t)))))

(declare-fun t2tb3004 ((set (tuple21 (tuple21 a e) (tuple21 d f)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a e) (tuple21 d f))))) (sort
  (set1 (tuple2 (tuple2 a1 e1) (tuple2 d1 f1))) (t2tb3004 x))))

(declare-fun tb2t3004 (uni) (set (tuple21 (tuple21 a e) (tuple21 d f))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a e) (tuple21 d f)))))
  (! (= (tb2t3004 (t2tb3004 i)) i) :pattern ((t2tb3004 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 e1) (tuple2 d1 f1))) j)
     (= (t2tb3004 (tb2t3004 j)) j)) :pattern ((t2tb3004 (tb2t3004 j))) )))

(declare-fun t2tb3005 ((tuple21 (tuple21 a e) (tuple21 d f))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a e) (tuple21 d f)))) (sort
  (tuple2 (tuple2 a1 e1) (tuple2 d1 f1)) (t2tb3005 x))))

(declare-fun tb2t3005 (uni) (tuple21 (tuple21 a e) (tuple21 d f)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a e) (tuple21 d f))))
  (! (= (tb2t3005 (t2tb3005 i)) i) :pattern ((t2tb3005 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 e1) (tuple2 d1 f1)) j)
     (= (t2tb3005 (tb2t3005 j)) j)) :pattern ((t2tb3005 (tb2t3005 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a e))) (t (set (tuple21 d f))) (x (tuple21 a e))
  (y (tuple21 d f)))
  (= (mem (tuple2 (tuple2 a1 e1) (tuple2 d1 f1))
  (Tuple2 (tuple2 a1 e1) (tuple2 d1 f1) (t2tb2949 x) (t2tb2952 y))
  (times (tuple2 d1 f1) (tuple2 a1 e1) (t2tb2943 s) (t2tb2938 t)))
  (and (mem44 x s) (mem40 y t)))))

(declare-fun t2tb3006 ((set (tuple21 (tuple21 a e) (set (tuple21 b
  e))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a e) (set (tuple21 b e)))))) (sort
  (set1 (tuple2 (tuple2 a1 e1) (set1 (tuple2 b1 e1)))) (t2tb3006 x))))

(declare-fun tb2t3006 (uni) (set (tuple21 (tuple21 a e) (set (tuple21 b
  e)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a e) (set (tuple21 b e))))))
  (! (= (tb2t3006 (t2tb3006 i)) i) :pattern ((t2tb3006 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 e1) (set1 (tuple2 b1 e1)))) j)
     (= (t2tb3006 (tb2t3006 j)) j)) :pattern ((t2tb3006 (tb2t3006 j))) )))

(declare-fun t2tb3007 ((tuple21 (tuple21 a e) (set (tuple21 b e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a e) (set (tuple21 b e))))) (sort
  (tuple2 (tuple2 a1 e1) (set1 (tuple2 b1 e1))) (t2tb3007 x))))

(declare-fun tb2t3007 (uni) (tuple21 (tuple21 a e) (set (tuple21 b e))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a e) (set (tuple21 b e)))))
  (! (= (tb2t3007 (t2tb3007 i)) i) :pattern ((t2tb3007 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 e1) (set1 (tuple2 b1 e1))) j)
     (= (t2tb3007 (tb2t3007 j)) j)) :pattern ((t2tb3007 (tb2t3007 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a e))) (t (set (set (tuple21 b e))))
  (x (tuple21 a e)) (y (set (tuple21 b e))))
  (= (mem (tuple2 (tuple2 a1 e1) (set1 (tuple2 b1 e1)))
  (Tuple2 (tuple2 a1 e1) (set1 (tuple2 b1 e1)) (t2tb2949 x) (t2tb2940 y))
  (times (set1 (tuple2 b1 e1)) (tuple2 a1 e1) (t2tb2943 s) (t2tb2941 t)))
  (and (mem44 x s) (mem39 y t)))))

(declare-fun t2tb3008 ((set (tuple21 (tuple21 a e) (tuple21 b e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a e) (tuple21 b e))))) (sort
  (set1 (tuple2 (tuple2 a1 e1) (tuple2 b1 e1))) (t2tb3008 x))))

(declare-fun tb2t3008 (uni) (set (tuple21 (tuple21 a e) (tuple21 b e))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a e) (tuple21 b e)))))
  (! (= (tb2t3008 (t2tb3008 i)) i) :pattern ((t2tb3008 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 e1) (tuple2 b1 e1))) j)
     (= (t2tb3008 (tb2t3008 j)) j)) :pattern ((t2tb3008 (tb2t3008 j))) )))

(declare-fun t2tb3009 ((tuple21 (tuple21 a e) (tuple21 b e))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a e) (tuple21 b e)))) (sort
  (tuple2 (tuple2 a1 e1) (tuple2 b1 e1)) (t2tb3009 x))))

(declare-fun tb2t3009 (uni) (tuple21 (tuple21 a e) (tuple21 b e)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a e) (tuple21 b e))))
  (! (= (tb2t3009 (t2tb3009 i)) i) :pattern ((t2tb3009 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 e1) (tuple2 b1 e1)) j)
     (= (t2tb3009 (tb2t3009 j)) j)) :pattern ((t2tb3009 (tb2t3009 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a e))) (t (set (tuple21 b e))) (x (tuple21 a e))
  (y (tuple21 b e)))
  (= (mem (tuple2 (tuple2 a1 e1) (tuple2 b1 e1))
  (Tuple2 (tuple2 a1 e1) (tuple2 b1 e1) (t2tb2949 x) (t2tb2953 y))
  (times (tuple2 b1 e1) (tuple2 a1 e1) (t2tb2943 s) (t2tb2940 t)))
  (and (mem44 x s) (mem38 y t)))))

(declare-fun t2tb3010 ((set (tuple21 (tuple21 a e) f))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a e) f)))) (sort
  (set1 (tuple2 (tuple2 a1 e1) f1)) (t2tb3010 x))))

(declare-fun tb2t3010 (uni) (set (tuple21 (tuple21 a e) f)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a e) f))))
  (! (= (tb2t3010 (t2tb3010 i)) i) :pattern ((t2tb3010 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 e1) f1)) j)
     (= (t2tb3010 (tb2t3010 j)) j)) :pattern ((t2tb3010 (tb2t3010 j))) )))

(declare-fun t2tb3011 ((tuple21 (tuple21 a e) f)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a e) f))) (sort (tuple2 (tuple2 a1 e1) f1)
  (t2tb3011 x))))

(declare-fun tb2t3011 (uni) (tuple21 (tuple21 a e) f))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a e) f)))
  (! (= (tb2t3011 (t2tb3011 i)) i) :pattern ((t2tb3011 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 e1) f1) j) (= (t2tb3011 (tb2t3011 j)) j)) :pattern (
  (t2tb3011 (tb2t3011 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a e))) (t (set f)) (x (tuple21 a e)) (y f))
  (= (mem (tuple2 (tuple2 a1 e1) f1)
  (Tuple2 (tuple2 a1 e1) f1 (t2tb2949 x) (t2tb2954 y))
  (times f1 (tuple2 a1 e1) (t2tb2943 s) (t2tb2946 t)))
  (and (mem44 x s) (mem37 y t)))))

(declare-fun t2tb3012 ((set (tuple21 (tuple21 a e) e))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a e) e)))) (sort
  (set1 (tuple2 (tuple2 a1 e1) e1)) (t2tb3012 x))))

(declare-fun tb2t3012 (uni) (set (tuple21 (tuple21 a e) e)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a e) e))))
  (! (= (tb2t3012 (t2tb3012 i)) i) :pattern ((t2tb3012 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 e1) e1)) j)
     (= (t2tb3012 (tb2t3012 j)) j)) :pattern ((t2tb3012 (tb2t3012 j))) )))

(declare-fun t2tb3013 ((tuple21 (tuple21 a e) e)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a e) e))) (sort (tuple2 (tuple2 a1 e1) e1)
  (t2tb3013 x))))

(declare-fun tb2t3013 (uni) (tuple21 (tuple21 a e) e))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a e) e)))
  (! (= (tb2t3013 (t2tb3013 i)) i) :pattern ((t2tb3013 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 e1) e1) j) (= (t2tb3013 (tb2t3013 j)) j)) :pattern (
  (t2tb3013 (tb2t3013 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a e))) (t (set e)) (x (tuple21 a e)) (y e))
  (= (mem (tuple2 (tuple2 a1 e1) e1)
  (Tuple2 (tuple2 a1 e1) e1 (t2tb2949 x) (t2tb2955 y))
  (times e1 (tuple2 a1 e1) (t2tb2943 s) (t2tb2947 t)))
  (and (mem44 x s) (mem36 y t)))))

(declare-fun t2tb3014 ((set (tuple21 (tuple21 a e) (tuple21 (tuple21 a c)
  (tuple21 b d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a e) (tuple21 (tuple21 a c) (tuple21 b
  d)))))) (sort
  (set1 (tuple2 (tuple2 a1 e1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))))
  (t2tb3014 x))))

(declare-fun tb2t3014 (uni) (set (tuple21 (tuple21 a e) (tuple21 (tuple21 a
  c) (tuple21 b d)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a e) (tuple21 (tuple21 a c) (tuple21 b
  d)))))) (! (= (tb2t3014 (t2tb3014 i)) i) :pattern ((t2tb3014 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 a1 e1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))) j)
     (= (t2tb3014 (tb2t3014 j)) j)) :pattern ((t2tb3014 (tb2t3014 j))) )))

(declare-fun t2tb3015 ((tuple21 (tuple21 a e) (tuple21 (tuple21 a c)
  (tuple21 b d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a e) (tuple21 (tuple21 a c) (tuple21 b d)))))
  (sort (tuple2 (tuple2 a1 e1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
  (t2tb3015 x))))

(declare-fun tb2t3015 (uni) (tuple21 (tuple21 a e) (tuple21 (tuple21 a c)
  (tuple21 b d))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a e) (tuple21 (tuple21 a c) (tuple21 b d)))))
  (! (= (tb2t3015 (t2tb3015 i)) i) :pattern ((t2tb3015 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 e1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
     j) (= (t2tb3015 (tb2t3015 j)) j)) :pattern ((t2tb3015 (tb2t3015 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a e))) (t (set (tuple21 (tuple21 a c) (tuple21 b
  d)))) (x (tuple21 a e)) (y (tuple21 (tuple21 a c) (tuple21 b d))))
  (= (mem (tuple2 (tuple2 a1 e1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
  (Tuple2 (tuple2 a1 e1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb2949 x)
  (t2tb691 y))
  (times (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 a1 e1) (t2tb2943 s)
  (t2tb686 t))) (and (mem44 x s) (mem24 y t)))))

(declare-fun t2tb3016 ((set (tuple21 (tuple21 a e) (set (tuple21 c
  d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a e) (set (tuple21 c d)))))) (sort
  (set1 (tuple2 (tuple2 a1 e1) (set1 (tuple2 c1 d1)))) (t2tb3016 x))))

(declare-fun tb2t3016 (uni) (set (tuple21 (tuple21 a e) (set (tuple21 c
  d)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a e) (set (tuple21 c d))))))
  (! (= (tb2t3016 (t2tb3016 i)) i) :pattern ((t2tb3016 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 e1) (set1 (tuple2 c1 d1)))) j)
     (= (t2tb3016 (tb2t3016 j)) j)) :pattern ((t2tb3016 (tb2t3016 j))) )))

(declare-fun t2tb3017 ((tuple21 (tuple21 a e) (set (tuple21 c d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a e) (set (tuple21 c d))))) (sort
  (tuple2 (tuple2 a1 e1) (set1 (tuple2 c1 d1))) (t2tb3017 x))))

(declare-fun tb2t3017 (uni) (tuple21 (tuple21 a e) (set (tuple21 c d))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a e) (set (tuple21 c d)))))
  (! (= (tb2t3017 (t2tb3017 i)) i) :pattern ((t2tb3017 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 e1) (set1 (tuple2 c1 d1))) j)
     (= (t2tb3017 (tb2t3017 j)) j)) :pattern ((t2tb3017 (tb2t3017 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a e))) (t (set (set (tuple21 c d))))
  (x (tuple21 a e)) (y (set (tuple21 c d))))
  (= (mem (tuple2 (tuple2 a1 e1) (set1 (tuple2 c1 d1)))
  (Tuple2 (tuple2 a1 e1) (set1 (tuple2 c1 d1)) (t2tb2949 x) (t2tb689 y))
  (times (set1 (tuple2 c1 d1)) (tuple2 a1 e1) (t2tb2943 s) (t2tb688 t)))
  (and (mem44 x s) (mem22 y t)))))

(declare-fun t2tb3018 ((set (tuple21 (tuple21 a e) (tuple21 c d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a e) (tuple21 c d))))) (sort
  (set1 (tuple2 (tuple2 a1 e1) (tuple2 c1 d1))) (t2tb3018 x))))

(declare-fun tb2t3018 (uni) (set (tuple21 (tuple21 a e) (tuple21 c d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a e) (tuple21 c d)))))
  (! (= (tb2t3018 (t2tb3018 i)) i) :pattern ((t2tb3018 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 e1) (tuple2 c1 d1))) j)
     (= (t2tb3018 (tb2t3018 j)) j)) :pattern ((t2tb3018 (tb2t3018 j))) )))

(declare-fun t2tb3019 ((tuple21 (tuple21 a e) (tuple21 c d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a e) (tuple21 c d)))) (sort
  (tuple2 (tuple2 a1 e1) (tuple2 c1 d1)) (t2tb3019 x))))

(declare-fun tb2t3019 (uni) (tuple21 (tuple21 a e) (tuple21 c d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a e) (tuple21 c d))))
  (! (= (tb2t3019 (t2tb3019 i)) i) :pattern ((t2tb3019 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 e1) (tuple2 c1 d1)) j)
     (= (t2tb3019 (tb2t3019 j)) j)) :pattern ((t2tb3019 (tb2t3019 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a e))) (t (set (tuple21 c d))) (x (tuple21 a e))
  (y (tuple21 c d)))
  (= (mem (tuple2 (tuple2 a1 e1) (tuple2 c1 d1))
  (Tuple2 (tuple2 a1 e1) (tuple2 c1 d1) (t2tb2949 x) (t2tb693 y))
  (times (tuple2 c1 d1) (tuple2 a1 e1) (t2tb2943 s) (t2tb689 t)))
  (and (mem44 x s) (mem21 y t)))))

(declare-fun t2tb3020 ((set (tuple21 (tuple21 a e) d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a e) d)))) (sort
  (set1 (tuple2 (tuple2 a1 e1) d1)) (t2tb3020 x))))

(declare-fun tb2t3020 (uni) (set (tuple21 (tuple21 a e) d)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a e) d))))
  (! (= (tb2t3020 (t2tb3020 i)) i) :pattern ((t2tb3020 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 e1) d1)) j)
     (= (t2tb3020 (tb2t3020 j)) j)) :pattern ((t2tb3020 (tb2t3020 j))) )))

(declare-fun t2tb3021 ((tuple21 (tuple21 a e) d)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a e) d))) (sort (tuple2 (tuple2 a1 e1) d1)
  (t2tb3021 x))))

(declare-fun tb2t3021 (uni) (tuple21 (tuple21 a e) d))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a e) d)))
  (! (= (tb2t3021 (t2tb3021 i)) i) :pattern ((t2tb3021 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 e1) d1) j) (= (t2tb3021 (tb2t3021 j)) j)) :pattern (
  (t2tb3021 (tb2t3021 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a e))) (t (set d)) (x (tuple21 a e)) (y d))
  (= (mem (tuple2 (tuple2 a1 e1) d1)
  (Tuple2 (tuple2 a1 e1) d1 (t2tb2949 x) (t2tb694 y))
  (times d1 (tuple2 a1 e1) (t2tb2943 s) (t2tb690 t)))
  (and (mem44 x s) (mem20 y t)))))

(declare-fun t2tb3022 ((set (tuple21 (tuple21 a e) c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a e) c)))) (sort
  (set1 (tuple2 (tuple2 a1 e1) c1)) (t2tb3022 x))))

(declare-fun tb2t3022 (uni) (set (tuple21 (tuple21 a e) c)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a e) c))))
  (! (= (tb2t3022 (t2tb3022 i)) i) :pattern ((t2tb3022 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 e1) c1)) j)
     (= (t2tb3022 (tb2t3022 j)) j)) :pattern ((t2tb3022 (tb2t3022 j))) )))

(declare-fun t2tb3023 ((tuple21 (tuple21 a e) c)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a e) c))) (sort (tuple2 (tuple2 a1 e1) c1)
  (t2tb3023 x))))

(declare-fun tb2t3023 (uni) (tuple21 (tuple21 a e) c))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a e) c)))
  (! (= (tb2t3023 (t2tb3023 i)) i) :pattern ((t2tb3023 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 e1) c1) j) (= (t2tb3023 (tb2t3023 j)) j)) :pattern (
  (t2tb3023 (tb2t3023 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a e))) (t (set c)) (x (tuple21 a e)) (y c))
  (= (mem (tuple2 (tuple2 a1 e1) c1)
  (Tuple2 (tuple2 a1 e1) c1 (t2tb2949 x) (t2tb135 y))
  (times c1 (tuple2 a1 e1) (t2tb2943 s) (t2tb132 t)))
  (and (mem44 x s) (mem7 y t)))))

(declare-fun t2tb3024 ((set (tuple21 (tuple21 a e) (set (tuple21 a
  b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a e) (set (tuple21 a b)))))) (sort
  (set1 (tuple2 (tuple2 a1 e1) (set1 (tuple2 a1 b1)))) (t2tb3024 x))))

(declare-fun tb2t3024 (uni) (set (tuple21 (tuple21 a e) (set (tuple21 a
  b)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a e) (set (tuple21 a b))))))
  (! (= (tb2t3024 (t2tb3024 i)) i) :pattern ((t2tb3024 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 e1) (set1 (tuple2 a1 b1)))) j)
     (= (t2tb3024 (tb2t3024 j)) j)) :pattern ((t2tb3024 (tb2t3024 j))) )))

(declare-fun t2tb3025 ((tuple21 (tuple21 a e) (set (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a e) (set (tuple21 a b))))) (sort
  (tuple2 (tuple2 a1 e1) (set1 (tuple2 a1 b1))) (t2tb3025 x))))

(declare-fun tb2t3025 (uni) (tuple21 (tuple21 a e) (set (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a e) (set (tuple21 a b)))))
  (! (= (tb2t3025 (t2tb3025 i)) i) :pattern ((t2tb3025 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 e1) (set1 (tuple2 a1 b1))) j)
     (= (t2tb3025 (tb2t3025 j)) j)) :pattern ((t2tb3025 (tb2t3025 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a e))) (t (set (set (tuple21 a b))))
  (x (tuple21 a e)) (y (set (tuple21 a b))))
  (= (mem (tuple2 (tuple2 a1 e1) (set1 (tuple2 a1 b1)))
  (Tuple2 (tuple2 a1 e1) (set1 (tuple2 a1 b1)) (t2tb2949 x) (t2tb11 y))
  (times (set1 (tuple2 a1 b1)) (tuple2 a1 e1) (t2tb2943 s) (t2tb10 t)))
  (and (mem44 x s) (mem4 y t)))))

(declare-fun t2tb3026 ((set (tuple21 (tuple21 a e) (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a e) (tuple21 a b))))) (sort
  (set1 (tuple2 (tuple2 a1 e1) (tuple2 a1 b1))) (t2tb3026 x))))

(declare-fun tb2t3026 (uni) (set (tuple21 (tuple21 a e) (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a e) (tuple21 a b)))))
  (! (= (tb2t3026 (t2tb3026 i)) i) :pattern ((t2tb3026 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 e1) (tuple2 a1 b1))) j)
     (= (t2tb3026 (tb2t3026 j)) j)) :pattern ((t2tb3026 (tb2t3026 j))) )))

(declare-fun t2tb3027 ((tuple21 (tuple21 a e) (tuple21 a b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a e) (tuple21 a b)))) (sort
  (tuple2 (tuple2 a1 e1) (tuple2 a1 b1)) (t2tb3027 x))))

(declare-fun tb2t3027 (uni) (tuple21 (tuple21 a e) (tuple21 a b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a e) (tuple21 a b))))
  (! (= (tb2t3027 (t2tb3027 i)) i) :pattern ((t2tb3027 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 e1) (tuple2 a1 b1)) j)
     (= (t2tb3027 (tb2t3027 j)) j)) :pattern ((t2tb3027 (tb2t3027 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a e))) (t (set (tuple21 a b))) (x (tuple21 a e))
  (y (tuple21 a b)))
  (= (mem (tuple2 (tuple2 a1 e1) (tuple2 a1 b1))
  (Tuple2 (tuple2 a1 e1) (tuple2 a1 b1) (t2tb2949 x) (t2tb13 y))
  (times (tuple2 a1 b1) (tuple2 a1 e1) (t2tb2943 s) (t2tb11 t)))
  (and (mem44 x s) (mem3 y t)))))

(declare-fun t2tb3028 ((set (tuple21 (tuple21 a e) b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a e) b)))) (sort
  (set1 (tuple2 (tuple2 a1 e1) b1)) (t2tb3028 x))))

(declare-fun tb2t3028 (uni) (set (tuple21 (tuple21 a e) b)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a e) b))))
  (! (= (tb2t3028 (t2tb3028 i)) i) :pattern ((t2tb3028 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 e1) b1)) j)
     (= (t2tb3028 (tb2t3028 j)) j)) :pattern ((t2tb3028 (tb2t3028 j))) )))

(declare-fun t2tb3029 ((tuple21 (tuple21 a e) b)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a e) b))) (sort (tuple2 (tuple2 a1 e1) b1)
  (t2tb3029 x))))

(declare-fun tb2t3029 (uni) (tuple21 (tuple21 a e) b))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a e) b)))
  (! (= (tb2t3029 (t2tb3029 i)) i) :pattern ((t2tb3029 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 e1) b1) j) (= (t2tb3029 (tb2t3029 j)) j)) :pattern (
  (t2tb3029 (tb2t3029 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a e))) (t (set b)) (x (tuple21 a e)) (y b))
  (= (mem (tuple2 (tuple2 a1 e1) b1)
  (Tuple2 (tuple2 a1 e1) b1 (t2tb2949 x) (t2tb14 y))
  (times b1 (tuple2 a1 e1) (t2tb2943 s) (t2tb12 t)))
  (and (mem44 x s) (mem2 y t)))))

(declare-fun t2tb3030 ((set (tuple21 (tuple21 a e) a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a e) a)))) (sort
  (set1 (tuple2 (tuple2 a1 e1) a1)) (t2tb3030 x))))

(declare-fun tb2t3030 (uni) (set (tuple21 (tuple21 a e) a)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a e) a))))
  (! (= (tb2t3030 (t2tb3030 i)) i) :pattern ((t2tb3030 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 e1) a1)) j)
     (= (t2tb3030 (tb2t3030 j)) j)) :pattern ((t2tb3030 (tb2t3030 j))) )))

(declare-fun t2tb3031 ((tuple21 (tuple21 a e) a)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a e) a))) (sort (tuple2 (tuple2 a1 e1) a1)
  (t2tb3031 x))))

(declare-fun tb2t3031 (uni) (tuple21 (tuple21 a e) a))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a e) a)))
  (! (= (tb2t3031 (t2tb3031 i)) i) :pattern ((t2tb3031 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 e1) a1) j) (= (t2tb3031 (tb2t3031 j)) j)) :pattern (
  (t2tb3031 (tb2t3031 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a e))) (t (set a)) (x (tuple21 a e)) (y a))
  (= (mem (tuple2 (tuple2 a1 e1) a1)
  (Tuple2 (tuple2 a1 e1) a1 (t2tb2949 x) (t2tb2 y))
  (times a1 (tuple2 a1 e1) (t2tb2943 s) (t2tb1 t)))
  (and (mem44 x s) (mem1 y t)))))

;; mem_times
  (assert
  (forall ((b2 ty))
  (forall ((s (set (tuple21 a e))) (t uni) (x (tuple21 a e)) (y uni))
  (= (mem (tuple2 (tuple2 a1 e1) b2)
  (Tuple2 (tuple2 a1 e1) b2 (t2tb2949 x) y)
  (times b2 (tuple2 a1 e1) (t2tb2943 s) t)) (and (mem44 x s) (mem b2 y t))))))

(declare-fun t2tb3032 ((set (tuple21 (tuple21 (tuple21 b d) (tuple21 e f))
  (tuple21 c f)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 b d) (tuple21 e f)) (tuple21 c
  f))))) (sort
  (set1 (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (tuple2 c1 f1)))
  (t2tb3032 x))))

(declare-fun tb2t3032 (uni) (set (tuple21 (tuple21 (tuple21 b d) (tuple21 e
  f)) (tuple21 c f))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 b d) (tuple21 e f)) (tuple21 c
  f))))) (! (= (tb2t3032 (t2tb3032 i)) i) :pattern ((t2tb3032 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (tuple2 c1 f1))) j)
     (= (t2tb3032 (tb2t3032 j)) j)) :pattern ((t2tb3032 (tb2t3032 j))) )))

(declare-fun t2tb3033 ((tuple21 (tuple21 (tuple21 b d) (tuple21 e f))
  (tuple21 c f))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 b d) (tuple21 e f)) (tuple21 c f))))
  (sort (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (tuple2 c1 f1))
  (t2tb3033 x))))

(declare-fun tb2t3033 (uni) (tuple21 (tuple21 (tuple21 b d) (tuple21 e f))
  (tuple21 c f)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 b d) (tuple21 e f)) (tuple21 c f))))
  (! (= (tb2t3033 (t2tb3033 i)) i) :pattern ((t2tb3033 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (tuple2 c1 f1))
     j) (= (t2tb3033 (tb2t3033 j)) j)) :pattern ((t2tb3033 (tb2t3033 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 (tuple21 b d) (tuple21 e f)))) (t (set (tuple21 c
  f))) (x (tuple21 (tuple21 b d) (tuple21 e f))) (y (tuple21 c f)))
  (= (mem (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (tuple2 c1 f1))
  (Tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (tuple2 c1 f1) (t2tb2950 x)
  (t2tb2948 y))
  (times (tuple2 c1 f1) (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (t2tb2944 s)
  (t2tb2942 t))) (and (mem43 x s) (mem45 y t)))))

(declare-fun t2tb3034 ((set (tuple21 (tuple21 (tuple21 b d) (tuple21 e f))
  (tuple21 a e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 b d) (tuple21 e f)) (tuple21 a
  e))))) (sort
  (set1 (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (tuple2 a1 e1)))
  (t2tb3034 x))))

(declare-fun tb2t3034 (uni) (set (tuple21 (tuple21 (tuple21 b d) (tuple21 e
  f)) (tuple21 a e))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 b d) (tuple21 e f)) (tuple21 a
  e))))) (! (= (tb2t3034 (t2tb3034 i)) i) :pattern ((t2tb3034 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (tuple2 a1 e1))) j)
     (= (t2tb3034 (tb2t3034 j)) j)) :pattern ((t2tb3034 (tb2t3034 j))) )))

(declare-fun t2tb3035 ((tuple21 (tuple21 (tuple21 b d) (tuple21 e f))
  (tuple21 a e))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 b d) (tuple21 e f)) (tuple21 a e))))
  (sort (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (tuple2 a1 e1))
  (t2tb3035 x))))

(declare-fun tb2t3035 (uni) (tuple21 (tuple21 (tuple21 b d) (tuple21 e f))
  (tuple21 a e)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 b d) (tuple21 e f)) (tuple21 a e))))
  (! (= (tb2t3035 (t2tb3035 i)) i) :pattern ((t2tb3035 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (tuple2 a1 e1))
     j) (= (t2tb3035 (tb2t3035 j)) j)) :pattern ((t2tb3035 (tb2t3035 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 (tuple21 b d) (tuple21 e f)))) (t (set (tuple21 a
  e))) (x (tuple21 (tuple21 b d) (tuple21 e f))) (y (tuple21 a e)))
  (= (mem (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (tuple2 a1 e1))
  (Tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (tuple2 a1 e1) (t2tb2950 x)
  (t2tb2949 y))
  (times (tuple2 a1 e1) (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (t2tb2944 s)
  (t2tb2943 t))) (and (mem43 x s) (mem44 y t)))))

(declare-fun t2tb3036 ((set (tuple21 (tuple21 (tuple21 b d) (tuple21 e f))
  (tuple21 (tuple21 b d) (tuple21 e f))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 b d) (tuple21 e f))
  (tuple21 (tuple21 b d) (tuple21 e f)))))) (sort
  (set1
  (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1))
  (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)))) (t2tb3036 x))))

(declare-fun tb2t3036 (uni) (set (tuple21 (tuple21 (tuple21 b d) (tuple21 e
  f)) (tuple21 (tuple21 b d) (tuple21 e f)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 b d) (tuple21 e f))
  (tuple21 (tuple21 b d) (tuple21 e f))))))
  (! (= (tb2t3036 (t2tb3036 i)) i) :pattern ((t2tb3036 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1))
     (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)))) j)
     (= (t2tb3036 (tb2t3036 j)) j)) :pattern ((t2tb3036 (tb2t3036 j))) )))

(declare-fun t2tb3037 ((tuple21 (tuple21 (tuple21 b d) (tuple21 e f))
  (tuple21 (tuple21 b d) (tuple21 e f)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 b d) (tuple21 e f))
  (tuple21 (tuple21 b d) (tuple21 e f))))) (sort
  (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1))
  (tuple2 (tuple2 b1 d1) (tuple2 e1 f1))) (t2tb3037 x))))

(declare-fun tb2t3037 (uni) (tuple21 (tuple21 (tuple21 b d) (tuple21 e f))
  (tuple21 (tuple21 b d) (tuple21 e f))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 b d) (tuple21 e f))
  (tuple21 (tuple21 b d) (tuple21 e f)))))
  (! (= (tb2t3037 (t2tb3037 i)) i) :pattern ((t2tb3037 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1))
     (tuple2 (tuple2 b1 d1) (tuple2 e1 f1))) j)
     (= (t2tb3037 (tb2t3037 j)) j)) :pattern ((t2tb3037 (tb2t3037 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 (tuple21 b d) (tuple21 e f))))
  (t (set (tuple21 (tuple21 b d) (tuple21 e f)))) (x (tuple21 (tuple21 b d)
  (tuple21 e f))) (y (tuple21 (tuple21 b d) (tuple21 e f))))
  (= (mem
  (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1))
  (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)))
  (Tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1))
  (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (t2tb2950 x) (t2tb2950 y))
  (times (tuple2 (tuple2 b1 d1) (tuple2 e1 f1))
  (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (t2tb2944 s) (t2tb2944 t)))
  (and (mem43 x s) (mem43 y t)))))

(declare-fun t2tb3038 ((set (tuple21 (tuple21 (tuple21 b d) (tuple21 e f))
  (tuple21 (tuple21 a c) (tuple21 e f))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 b d) (tuple21 e f))
  (tuple21 (tuple21 a c) (tuple21 e f)))))) (sort
  (set1
  (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1))
  (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)))) (t2tb3038 x))))

(declare-fun tb2t3038 (uni) (set (tuple21 (tuple21 (tuple21 b d) (tuple21 e
  f)) (tuple21 (tuple21 a c) (tuple21 e f)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 b d) (tuple21 e f))
  (tuple21 (tuple21 a c) (tuple21 e f))))))
  (! (= (tb2t3038 (t2tb3038 i)) i) :pattern ((t2tb3038 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1))
     (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)))) j)
     (= (t2tb3038 (tb2t3038 j)) j)) :pattern ((t2tb3038 (tb2t3038 j))) )))

(declare-fun t2tb3039 ((tuple21 (tuple21 (tuple21 b d) (tuple21 e f))
  (tuple21 (tuple21 a c) (tuple21 e f)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 b d) (tuple21 e f))
  (tuple21 (tuple21 a c) (tuple21 e f))))) (sort
  (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1))
  (tuple2 (tuple2 a1 c1) (tuple2 e1 f1))) (t2tb3039 x))))

(declare-fun tb2t3039 (uni) (tuple21 (tuple21 (tuple21 b d) (tuple21 e f))
  (tuple21 (tuple21 a c) (tuple21 e f))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 b d) (tuple21 e f))
  (tuple21 (tuple21 a c) (tuple21 e f)))))
  (! (= (tb2t3039 (t2tb3039 i)) i) :pattern ((t2tb3039 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1))
     (tuple2 (tuple2 a1 c1) (tuple2 e1 f1))) j)
     (= (t2tb3039 (tb2t3039 j)) j)) :pattern ((t2tb3039 (tb2t3039 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 (tuple21 b d) (tuple21 e f))))
  (t (set (tuple21 (tuple21 a c) (tuple21 e f)))) (x (tuple21 (tuple21 b d)
  (tuple21 e f))) (y (tuple21 (tuple21 a c) (tuple21 e f))))
  (= (mem
  (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1))
  (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)))
  (Tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1))
  (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (t2tb2950 x) (t2tb2951 y))
  (times (tuple2 (tuple2 a1 c1) (tuple2 e1 f1))
  (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (t2tb2944 s) (t2tb2945 t)))
  (and (mem43 x s) (mem42 y t)))))

(declare-fun t2tb3040 ((set (tuple21 (tuple21 (tuple21 b d) (tuple21 e f))
  (set (tuple21 d f))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 b d) (tuple21 e f))
  (set (tuple21 d f)))))) (sort
  (set1
  (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (set1 (tuple2 d1 f1))))
  (t2tb3040 x))))

(declare-fun tb2t3040 (uni) (set (tuple21 (tuple21 (tuple21 b d) (tuple21 e
  f)) (set (tuple21 d f)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 b d) (tuple21 e f))
  (set (tuple21 d f))))))
  (! (= (tb2t3040 (t2tb3040 i)) i) :pattern ((t2tb3040 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (set1 (tuple2 d1 f1))))
     j) (= (t2tb3040 (tb2t3040 j)) j)) :pattern ((t2tb3040 (tb2t3040 j))) )))

(declare-fun t2tb3041 ((tuple21 (tuple21 (tuple21 b d) (tuple21 e f))
  (set (tuple21 d f)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 b d) (tuple21 e f)) (set (tuple21 d
  f))))) (sort
  (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (set1 (tuple2 d1 f1)))
  (t2tb3041 x))))

(declare-fun tb2t3041 (uni) (tuple21 (tuple21 (tuple21 b d) (tuple21 e f))
  (set (tuple21 d f))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 b d) (tuple21 e f)) (set (tuple21 d
  f))))) (! (= (tb2t3041 (t2tb3041 i)) i) :pattern ((t2tb3041 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (set1 (tuple2 d1 f1))) j)
     (= (t2tb3041 (tb2t3041 j)) j)) :pattern ((t2tb3041 (tb2t3041 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 (tuple21 b d) (tuple21 e f))))
  (t (set (set (tuple21 d f)))) (x (tuple21 (tuple21 b d) (tuple21 e f)))
  (y (set (tuple21 d f))))
  (= (mem
  (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (set1 (tuple2 d1 f1)))
  (Tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (set1 (tuple2 d1 f1))
  (t2tb2950 x) (t2tb2938 y))
  (times (set1 (tuple2 d1 f1)) (tuple2 (tuple2 b1 d1) (tuple2 e1 f1))
  (t2tb2944 s) (t2tb2939 t))) (and (mem43 x s) (mem41 y t)))))

(declare-fun t2tb3042 ((set (tuple21 (tuple21 (tuple21 b d) (tuple21 e f))
  (tuple21 d f)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 b d) (tuple21 e f)) (tuple21 d
  f))))) (sort
  (set1 (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (tuple2 d1 f1)))
  (t2tb3042 x))))

(declare-fun tb2t3042 (uni) (set (tuple21 (tuple21 (tuple21 b d) (tuple21 e
  f)) (tuple21 d f))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 b d) (tuple21 e f)) (tuple21 d
  f))))) (! (= (tb2t3042 (t2tb3042 i)) i) :pattern ((t2tb3042 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (tuple2 d1 f1))) j)
     (= (t2tb3042 (tb2t3042 j)) j)) :pattern ((t2tb3042 (tb2t3042 j))) )))

(declare-fun t2tb3043 ((tuple21 (tuple21 (tuple21 b d) (tuple21 e f))
  (tuple21 d f))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 b d) (tuple21 e f)) (tuple21 d f))))
  (sort (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (tuple2 d1 f1))
  (t2tb3043 x))))

(declare-fun tb2t3043 (uni) (tuple21 (tuple21 (tuple21 b d) (tuple21 e f))
  (tuple21 d f)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 b d) (tuple21 e f)) (tuple21 d f))))
  (! (= (tb2t3043 (t2tb3043 i)) i) :pattern ((t2tb3043 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (tuple2 d1 f1))
     j) (= (t2tb3043 (tb2t3043 j)) j)) :pattern ((t2tb3043 (tb2t3043 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 (tuple21 b d) (tuple21 e f)))) (t (set (tuple21 d
  f))) (x (tuple21 (tuple21 b d) (tuple21 e f))) (y (tuple21 d f)))
  (= (mem (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (tuple2 d1 f1))
  (Tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (tuple2 d1 f1) (t2tb2950 x)
  (t2tb2952 y))
  (times (tuple2 d1 f1) (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (t2tb2944 s)
  (t2tb2938 t))) (and (mem43 x s) (mem40 y t)))))

(declare-fun t2tb3044 ((set (tuple21 (tuple21 (tuple21 b d) (tuple21 e f))
  (set (tuple21 b e))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 b d) (tuple21 e f))
  (set (tuple21 b e)))))) (sort
  (set1
  (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (set1 (tuple2 b1 e1))))
  (t2tb3044 x))))

(declare-fun tb2t3044 (uni) (set (tuple21 (tuple21 (tuple21 b d) (tuple21 e
  f)) (set (tuple21 b e)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 b d) (tuple21 e f))
  (set (tuple21 b e))))))
  (! (= (tb2t3044 (t2tb3044 i)) i) :pattern ((t2tb3044 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (set1 (tuple2 b1 e1))))
     j) (= (t2tb3044 (tb2t3044 j)) j)) :pattern ((t2tb3044 (tb2t3044 j))) )))

(declare-fun t2tb3045 ((tuple21 (tuple21 (tuple21 b d) (tuple21 e f))
  (set (tuple21 b e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 b d) (tuple21 e f)) (set (tuple21 b
  e))))) (sort
  (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (set1 (tuple2 b1 e1)))
  (t2tb3045 x))))

(declare-fun tb2t3045 (uni) (tuple21 (tuple21 (tuple21 b d) (tuple21 e f))
  (set (tuple21 b e))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 b d) (tuple21 e f)) (set (tuple21 b
  e))))) (! (= (tb2t3045 (t2tb3045 i)) i) :pattern ((t2tb3045 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (set1 (tuple2 b1 e1))) j)
     (= (t2tb3045 (tb2t3045 j)) j)) :pattern ((t2tb3045 (tb2t3045 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 (tuple21 b d) (tuple21 e f))))
  (t (set (set (tuple21 b e)))) (x (tuple21 (tuple21 b d) (tuple21 e f)))
  (y (set (tuple21 b e))))
  (= (mem
  (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (set1 (tuple2 b1 e1)))
  (Tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (set1 (tuple2 b1 e1))
  (t2tb2950 x) (t2tb2940 y))
  (times (set1 (tuple2 b1 e1)) (tuple2 (tuple2 b1 d1) (tuple2 e1 f1))
  (t2tb2944 s) (t2tb2941 t))) (and (mem43 x s) (mem39 y t)))))

(declare-fun t2tb3046 ((set (tuple21 (tuple21 (tuple21 b d) (tuple21 e f))
  (tuple21 b e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 b d) (tuple21 e f)) (tuple21 b
  e))))) (sort
  (set1 (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (tuple2 b1 e1)))
  (t2tb3046 x))))

(declare-fun tb2t3046 (uni) (set (tuple21 (tuple21 (tuple21 b d) (tuple21 e
  f)) (tuple21 b e))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 b d) (tuple21 e f)) (tuple21 b
  e))))) (! (= (tb2t3046 (t2tb3046 i)) i) :pattern ((t2tb3046 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (tuple2 b1 e1))) j)
     (= (t2tb3046 (tb2t3046 j)) j)) :pattern ((t2tb3046 (tb2t3046 j))) )))

(declare-fun t2tb3047 ((tuple21 (tuple21 (tuple21 b d) (tuple21 e f))
  (tuple21 b e))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 b d) (tuple21 e f)) (tuple21 b e))))
  (sort (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (tuple2 b1 e1))
  (t2tb3047 x))))

(declare-fun tb2t3047 (uni) (tuple21 (tuple21 (tuple21 b d) (tuple21 e f))
  (tuple21 b e)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 b d) (tuple21 e f)) (tuple21 b e))))
  (! (= (tb2t3047 (t2tb3047 i)) i) :pattern ((t2tb3047 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (tuple2 b1 e1))
     j) (= (t2tb3047 (tb2t3047 j)) j)) :pattern ((t2tb3047 (tb2t3047 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 (tuple21 b d) (tuple21 e f)))) (t (set (tuple21 b
  e))) (x (tuple21 (tuple21 b d) (tuple21 e f))) (y (tuple21 b e)))
  (= (mem (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (tuple2 b1 e1))
  (Tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (tuple2 b1 e1) (t2tb2950 x)
  (t2tb2953 y))
  (times (tuple2 b1 e1) (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (t2tb2944 s)
  (t2tb2940 t))) (and (mem43 x s) (mem38 y t)))))

(declare-fun t2tb3048 ((set (tuple21 (tuple21 (tuple21 b d) (tuple21 e f))
  f))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 b d) (tuple21 e f)) f)))) (sort
  (set1 (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) f1)) (t2tb3048 x))))

(declare-fun tb2t3048 (uni) (set (tuple21 (tuple21 (tuple21 b d) (tuple21 e
  f)) f)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 b d) (tuple21 e f)) f))))
  (! (= (tb2t3048 (t2tb3048 i)) i) :pattern ((t2tb3048 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) f1)) j)
     (= (t2tb3048 (tb2t3048 j)) j)) :pattern ((t2tb3048 (tb2t3048 j))) )))

(declare-fun t2tb3049 ((tuple21 (tuple21 (tuple21 b d) (tuple21 e f))
  f)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 b d) (tuple21 e f)) f))) (sort
  (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) f1) (t2tb3049 x))))

(declare-fun tb2t3049 (uni) (tuple21 (tuple21 (tuple21 b d) (tuple21 e f))
  f))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 b d) (tuple21 e f)) f)))
  (! (= (tb2t3049 (t2tb3049 i)) i) :pattern ((t2tb3049 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) f1) j)
     (= (t2tb3049 (tb2t3049 j)) j)) :pattern ((t2tb3049 (tb2t3049 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 (tuple21 b d) (tuple21 e f)))) (t (set f))
  (x (tuple21 (tuple21 b d) (tuple21 e f))) (y f))
  (= (mem (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) f1)
  (Tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) f1 (t2tb2950 x)
  (t2tb2954 y))
  (times f1 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (t2tb2944 s) (t2tb2946 t)))
  (and (mem43 x s) (mem37 y t)))))

(declare-fun t2tb3050 ((set (tuple21 (tuple21 (tuple21 b d) (tuple21 e f))
  e))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 b d) (tuple21 e f)) e)))) (sort
  (set1 (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) e1)) (t2tb3050 x))))

(declare-fun tb2t3050 (uni) (set (tuple21 (tuple21 (tuple21 b d) (tuple21 e
  f)) e)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 b d) (tuple21 e f)) e))))
  (! (= (tb2t3050 (t2tb3050 i)) i) :pattern ((t2tb3050 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) e1)) j)
     (= (t2tb3050 (tb2t3050 j)) j)) :pattern ((t2tb3050 (tb2t3050 j))) )))

(declare-fun t2tb3051 ((tuple21 (tuple21 (tuple21 b d) (tuple21 e f))
  e)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 b d) (tuple21 e f)) e))) (sort
  (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) e1) (t2tb3051 x))))

(declare-fun tb2t3051 (uni) (tuple21 (tuple21 (tuple21 b d) (tuple21 e f))
  e))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 b d) (tuple21 e f)) e)))
  (! (= (tb2t3051 (t2tb3051 i)) i) :pattern ((t2tb3051 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) e1) j)
     (= (t2tb3051 (tb2t3051 j)) j)) :pattern ((t2tb3051 (tb2t3051 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 (tuple21 b d) (tuple21 e f)))) (t (set e))
  (x (tuple21 (tuple21 b d) (tuple21 e f))) (y e))
  (= (mem (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) e1)
  (Tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) e1 (t2tb2950 x)
  (t2tb2955 y))
  (times e1 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (t2tb2944 s) (t2tb2947 t)))
  (and (mem43 x s) (mem36 y t)))))

(declare-fun t2tb3052 ((set (tuple21 (tuple21 (tuple21 b d) (tuple21 e f))
  (tuple21 (tuple21 a c) (tuple21 b d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 b d) (tuple21 e f))
  (tuple21 (tuple21 a c) (tuple21 b d)))))) (sort
  (set1
  (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1))
  (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))) (t2tb3052 x))))

(declare-fun tb2t3052 (uni) (set (tuple21 (tuple21 (tuple21 b d) (tuple21 e
  f)) (tuple21 (tuple21 a c) (tuple21 b d)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 b d) (tuple21 e f))
  (tuple21 (tuple21 a c) (tuple21 b d))))))
  (! (= (tb2t3052 (t2tb3052 i)) i) :pattern ((t2tb3052 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1))
     (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))) j)
     (= (t2tb3052 (tb2t3052 j)) j)) :pattern ((t2tb3052 (tb2t3052 j))) )))

(declare-fun t2tb3053 ((tuple21 (tuple21 (tuple21 b d) (tuple21 e f))
  (tuple21 (tuple21 a c) (tuple21 b d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 b d) (tuple21 e f))
  (tuple21 (tuple21 a c) (tuple21 b d))))) (sort
  (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1))
  (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))) (t2tb3053 x))))

(declare-fun tb2t3053 (uni) (tuple21 (tuple21 (tuple21 b d) (tuple21 e f))
  (tuple21 (tuple21 a c) (tuple21 b d))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 b d) (tuple21 e f))
  (tuple21 (tuple21 a c) (tuple21 b d)))))
  (! (= (tb2t3053 (t2tb3053 i)) i) :pattern ((t2tb3053 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1))
     (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))) j)
     (= (t2tb3053 (tb2t3053 j)) j)) :pattern ((t2tb3053 (tb2t3053 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 (tuple21 b d) (tuple21 e f))))
  (t (set (tuple21 (tuple21 a c) (tuple21 b d)))) (x (tuple21 (tuple21 b d)
  (tuple21 e f))) (y (tuple21 (tuple21 a c) (tuple21 b d))))
  (= (mem
  (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1))
  (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
  (Tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1))
  (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb2950 x) (t2tb691 y))
  (times (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))
  (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (t2tb2944 s) (t2tb686 t)))
  (and (mem43 x s) (mem24 y t)))))

(declare-fun t2tb3054 ((set (tuple21 (tuple21 (tuple21 b d) (tuple21 e f))
  (set (tuple21 c d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 b d) (tuple21 e f))
  (set (tuple21 c d)))))) (sort
  (set1
  (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (set1 (tuple2 c1 d1))))
  (t2tb3054 x))))

(declare-fun tb2t3054 (uni) (set (tuple21 (tuple21 (tuple21 b d) (tuple21 e
  f)) (set (tuple21 c d)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 b d) (tuple21 e f))
  (set (tuple21 c d))))))
  (! (= (tb2t3054 (t2tb3054 i)) i) :pattern ((t2tb3054 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (set1 (tuple2 c1 d1))))
     j) (= (t2tb3054 (tb2t3054 j)) j)) :pattern ((t2tb3054 (tb2t3054 j))) )))

(declare-fun t2tb3055 ((tuple21 (tuple21 (tuple21 b d) (tuple21 e f))
  (set (tuple21 c d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 b d) (tuple21 e f)) (set (tuple21 c
  d))))) (sort
  (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (set1 (tuple2 c1 d1)))
  (t2tb3055 x))))

(declare-fun tb2t3055 (uni) (tuple21 (tuple21 (tuple21 b d) (tuple21 e f))
  (set (tuple21 c d))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 b d) (tuple21 e f)) (set (tuple21 c
  d))))) (! (= (tb2t3055 (t2tb3055 i)) i) :pattern ((t2tb3055 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (set1 (tuple2 c1 d1))) j)
     (= (t2tb3055 (tb2t3055 j)) j)) :pattern ((t2tb3055 (tb2t3055 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 (tuple21 b d) (tuple21 e f))))
  (t (set (set (tuple21 c d)))) (x (tuple21 (tuple21 b d) (tuple21 e f)))
  (y (set (tuple21 c d))))
  (= (mem
  (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (set1 (tuple2 c1 d1)))
  (Tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (set1 (tuple2 c1 d1))
  (t2tb2950 x) (t2tb689 y))
  (times (set1 (tuple2 c1 d1)) (tuple2 (tuple2 b1 d1) (tuple2 e1 f1))
  (t2tb2944 s) (t2tb688 t))) (and (mem43 x s) (mem22 y t)))))

(declare-fun t2tb3056 ((set (tuple21 (tuple21 (tuple21 b d) (tuple21 e f))
  (tuple21 c d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 b d) (tuple21 e f)) (tuple21 c
  d))))) (sort
  (set1 (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (tuple2 c1 d1)))
  (t2tb3056 x))))

(declare-fun tb2t3056 (uni) (set (tuple21 (tuple21 (tuple21 b d) (tuple21 e
  f)) (tuple21 c d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 b d) (tuple21 e f)) (tuple21 c
  d))))) (! (= (tb2t3056 (t2tb3056 i)) i) :pattern ((t2tb3056 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (tuple2 c1 d1))) j)
     (= (t2tb3056 (tb2t3056 j)) j)) :pattern ((t2tb3056 (tb2t3056 j))) )))

(declare-fun t2tb3057 ((tuple21 (tuple21 (tuple21 b d) (tuple21 e f))
  (tuple21 c d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 b d) (tuple21 e f)) (tuple21 c d))))
  (sort (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (tuple2 c1 d1))
  (t2tb3057 x))))

(declare-fun tb2t3057 (uni) (tuple21 (tuple21 (tuple21 b d) (tuple21 e f))
  (tuple21 c d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 b d) (tuple21 e f)) (tuple21 c d))))
  (! (= (tb2t3057 (t2tb3057 i)) i) :pattern ((t2tb3057 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (tuple2 c1 d1))
     j) (= (t2tb3057 (tb2t3057 j)) j)) :pattern ((t2tb3057 (tb2t3057 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 (tuple21 b d) (tuple21 e f)))) (t (set (tuple21 c
  d))) (x (tuple21 (tuple21 b d) (tuple21 e f))) (y (tuple21 c d)))
  (= (mem (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (tuple2 c1 d1))
  (Tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (tuple2 c1 d1) (t2tb2950 x)
  (t2tb693 y))
  (times (tuple2 c1 d1) (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (t2tb2944 s)
  (t2tb689 t))) (and (mem43 x s) (mem21 y t)))))

(declare-fun t2tb3058 ((set (tuple21 (tuple21 (tuple21 b d) (tuple21 e f))
  d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 b d) (tuple21 e f)) d)))) (sort
  (set1 (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) d1)) (t2tb3058 x))))

(declare-fun tb2t3058 (uni) (set (tuple21 (tuple21 (tuple21 b d) (tuple21 e
  f)) d)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 b d) (tuple21 e f)) d))))
  (! (= (tb2t3058 (t2tb3058 i)) i) :pattern ((t2tb3058 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) d1)) j)
     (= (t2tb3058 (tb2t3058 j)) j)) :pattern ((t2tb3058 (tb2t3058 j))) )))

(declare-fun t2tb3059 ((tuple21 (tuple21 (tuple21 b d) (tuple21 e f))
  d)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 b d) (tuple21 e f)) d))) (sort
  (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) d1) (t2tb3059 x))))

(declare-fun tb2t3059 (uni) (tuple21 (tuple21 (tuple21 b d) (tuple21 e f))
  d))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 b d) (tuple21 e f)) d)))
  (! (= (tb2t3059 (t2tb3059 i)) i) :pattern ((t2tb3059 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) d1) j)
     (= (t2tb3059 (tb2t3059 j)) j)) :pattern ((t2tb3059 (tb2t3059 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 (tuple21 b d) (tuple21 e f)))) (t (set d))
  (x (tuple21 (tuple21 b d) (tuple21 e f))) (y d))
  (= (mem (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) d1)
  (Tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) d1 (t2tb2950 x) (t2tb694 y))
  (times d1 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (t2tb2944 s) (t2tb690 t)))
  (and (mem43 x s) (mem20 y t)))))

(declare-fun t2tb3060 ((set (tuple21 (tuple21 (tuple21 b d) (tuple21 e f))
  c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 b d) (tuple21 e f)) c)))) (sort
  (set1 (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) c1)) (t2tb3060 x))))

(declare-fun tb2t3060 (uni) (set (tuple21 (tuple21 (tuple21 b d) (tuple21 e
  f)) c)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 b d) (tuple21 e f)) c))))
  (! (= (tb2t3060 (t2tb3060 i)) i) :pattern ((t2tb3060 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) c1)) j)
     (= (t2tb3060 (tb2t3060 j)) j)) :pattern ((t2tb3060 (tb2t3060 j))) )))

(declare-fun t2tb3061 ((tuple21 (tuple21 (tuple21 b d) (tuple21 e f))
  c)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 b d) (tuple21 e f)) c))) (sort
  (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) c1) (t2tb3061 x))))

(declare-fun tb2t3061 (uni) (tuple21 (tuple21 (tuple21 b d) (tuple21 e f))
  c))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 b d) (tuple21 e f)) c)))
  (! (= (tb2t3061 (t2tb3061 i)) i) :pattern ((t2tb3061 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) c1) j)
     (= (t2tb3061 (tb2t3061 j)) j)) :pattern ((t2tb3061 (tb2t3061 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 (tuple21 b d) (tuple21 e f)))) (t (set c))
  (x (tuple21 (tuple21 b d) (tuple21 e f))) (y c))
  (= (mem (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) c1)
  (Tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) c1 (t2tb2950 x) (t2tb135 y))
  (times c1 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (t2tb2944 s) (t2tb132 t)))
  (and (mem43 x s) (mem7 y t)))))

(declare-fun t2tb3062 ((set (tuple21 (tuple21 (tuple21 b d) (tuple21 e f))
  (set (tuple21 a b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 b d) (tuple21 e f))
  (set (tuple21 a b)))))) (sort
  (set1
  (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (set1 (tuple2 a1 b1))))
  (t2tb3062 x))))

(declare-fun tb2t3062 (uni) (set (tuple21 (tuple21 (tuple21 b d) (tuple21 e
  f)) (set (tuple21 a b)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 b d) (tuple21 e f))
  (set (tuple21 a b))))))
  (! (= (tb2t3062 (t2tb3062 i)) i) :pattern ((t2tb3062 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (set1 (tuple2 a1 b1))))
     j) (= (t2tb3062 (tb2t3062 j)) j)) :pattern ((t2tb3062 (tb2t3062 j))) )))

(declare-fun t2tb3063 ((tuple21 (tuple21 (tuple21 b d) (tuple21 e f))
  (set (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 b d) (tuple21 e f)) (set (tuple21 a
  b))))) (sort
  (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (set1 (tuple2 a1 b1)))
  (t2tb3063 x))))

(declare-fun tb2t3063 (uni) (tuple21 (tuple21 (tuple21 b d) (tuple21 e f))
  (set (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 b d) (tuple21 e f)) (set (tuple21 a
  b))))) (! (= (tb2t3063 (t2tb3063 i)) i) :pattern ((t2tb3063 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (set1 (tuple2 a1 b1))) j)
     (= (t2tb3063 (tb2t3063 j)) j)) :pattern ((t2tb3063 (tb2t3063 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 (tuple21 b d) (tuple21 e f))))
  (t (set (set (tuple21 a b)))) (x (tuple21 (tuple21 b d) (tuple21 e f)))
  (y (set (tuple21 a b))))
  (= (mem
  (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (set1 (tuple2 a1 b1)))
  (Tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (set1 (tuple2 a1 b1))
  (t2tb2950 x) (t2tb11 y))
  (times (set1 (tuple2 a1 b1)) (tuple2 (tuple2 b1 d1) (tuple2 e1 f1))
  (t2tb2944 s) (t2tb10 t))) (and (mem43 x s) (mem4 y t)))))

(declare-fun t2tb3064 ((set (tuple21 (tuple21 (tuple21 b d) (tuple21 e f))
  (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 b d) (tuple21 e f)) (tuple21 a
  b))))) (sort
  (set1 (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (tuple2 a1 b1)))
  (t2tb3064 x))))

(declare-fun tb2t3064 (uni) (set (tuple21 (tuple21 (tuple21 b d) (tuple21 e
  f)) (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 b d) (tuple21 e f)) (tuple21 a
  b))))) (! (= (tb2t3064 (t2tb3064 i)) i) :pattern ((t2tb3064 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (tuple2 a1 b1))) j)
     (= (t2tb3064 (tb2t3064 j)) j)) :pattern ((t2tb3064 (tb2t3064 j))) )))

(declare-fun t2tb3065 ((tuple21 (tuple21 (tuple21 b d) (tuple21 e f))
  (tuple21 a b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 b d) (tuple21 e f)) (tuple21 a b))))
  (sort (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (tuple2 a1 b1))
  (t2tb3065 x))))

(declare-fun tb2t3065 (uni) (tuple21 (tuple21 (tuple21 b d) (tuple21 e f))
  (tuple21 a b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 b d) (tuple21 e f)) (tuple21 a b))))
  (! (= (tb2t3065 (t2tb3065 i)) i) :pattern ((t2tb3065 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (tuple2 a1 b1))
     j) (= (t2tb3065 (tb2t3065 j)) j)) :pattern ((t2tb3065 (tb2t3065 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 (tuple21 b d) (tuple21 e f)))) (t (set (tuple21 a
  b))) (x (tuple21 (tuple21 b d) (tuple21 e f))) (y (tuple21 a b)))
  (= (mem (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (tuple2 a1 b1))
  (Tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (tuple2 a1 b1) (t2tb2950 x)
  (t2tb13 y))
  (times (tuple2 a1 b1) (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (t2tb2944 s)
  (t2tb11 t))) (and (mem43 x s) (mem3 y t)))))

(declare-fun t2tb3066 ((set (tuple21 (tuple21 (tuple21 b d) (tuple21 e f))
  b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 b d) (tuple21 e f)) b)))) (sort
  (set1 (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) b1)) (t2tb3066 x))))

(declare-fun tb2t3066 (uni) (set (tuple21 (tuple21 (tuple21 b d) (tuple21 e
  f)) b)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 b d) (tuple21 e f)) b))))
  (! (= (tb2t3066 (t2tb3066 i)) i) :pattern ((t2tb3066 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) b1)) j)
     (= (t2tb3066 (tb2t3066 j)) j)) :pattern ((t2tb3066 (tb2t3066 j))) )))

(declare-fun t2tb3067 ((tuple21 (tuple21 (tuple21 b d) (tuple21 e f))
  b)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 b d) (tuple21 e f)) b))) (sort
  (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) b1) (t2tb3067 x))))

(declare-fun tb2t3067 (uni) (tuple21 (tuple21 (tuple21 b d) (tuple21 e f))
  b))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 b d) (tuple21 e f)) b)))
  (! (= (tb2t3067 (t2tb3067 i)) i) :pattern ((t2tb3067 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) b1) j)
     (= (t2tb3067 (tb2t3067 j)) j)) :pattern ((t2tb3067 (tb2t3067 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 (tuple21 b d) (tuple21 e f)))) (t (set b))
  (x (tuple21 (tuple21 b d) (tuple21 e f))) (y b))
  (= (mem (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) b1)
  (Tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) b1 (t2tb2950 x) (t2tb14 y))
  (times b1 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (t2tb2944 s) (t2tb12 t)))
  (and (mem43 x s) (mem2 y t)))))

(declare-fun t2tb3068 ((set (tuple21 (tuple21 (tuple21 b d) (tuple21 e f))
  a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 b d) (tuple21 e f)) a)))) (sort
  (set1 (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) a1)) (t2tb3068 x))))

(declare-fun tb2t3068 (uni) (set (tuple21 (tuple21 (tuple21 b d) (tuple21 e
  f)) a)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 b d) (tuple21 e f)) a))))
  (! (= (tb2t3068 (t2tb3068 i)) i) :pattern ((t2tb3068 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) a1)) j)
     (= (t2tb3068 (tb2t3068 j)) j)) :pattern ((t2tb3068 (tb2t3068 j))) )))

(declare-fun t2tb3069 ((tuple21 (tuple21 (tuple21 b d) (tuple21 e f))
  a)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 b d) (tuple21 e f)) a))) (sort
  (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) a1) (t2tb3069 x))))

(declare-fun tb2t3069 (uni) (tuple21 (tuple21 (tuple21 b d) (tuple21 e f))
  a))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 b d) (tuple21 e f)) a)))
  (! (= (tb2t3069 (t2tb3069 i)) i) :pattern ((t2tb3069 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) a1) j)
     (= (t2tb3069 (tb2t3069 j)) j)) :pattern ((t2tb3069 (tb2t3069 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 (tuple21 b d) (tuple21 e f)))) (t (set a))
  (x (tuple21 (tuple21 b d) (tuple21 e f))) (y a))
  (= (mem (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) a1)
  (Tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) a1 (t2tb2950 x) (t2tb2 y))
  (times a1 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (t2tb2944 s) (t2tb1 t)))
  (and (mem43 x s) (mem1 y t)))))

;; mem_times
  (assert
  (forall ((b2 ty))
  (forall ((s (set (tuple21 (tuple21 b d) (tuple21 e f)))) (t uni)
  (x (tuple21 (tuple21 b d) (tuple21 e f))) (y uni))
  (= (mem (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) b2)
  (Tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) b2 (t2tb2950 x) y)
  (times b2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (t2tb2944 s) t))
  (and (mem43 x s) (mem b2 y t))))))

(declare-fun t2tb3070 ((set (tuple21 (tuple21 (tuple21 a c) (tuple21 e f))
  (tuple21 c f)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 a c) (tuple21 e f)) (tuple21 c
  f))))) (sort
  (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (tuple2 c1 f1)))
  (t2tb3070 x))))

(declare-fun tb2t3070 (uni) (set (tuple21 (tuple21 (tuple21 a c) (tuple21 e
  f)) (tuple21 c f))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 a c) (tuple21 e f)) (tuple21 c
  f))))) (! (= (tb2t3070 (t2tb3070 i)) i) :pattern ((t2tb3070 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (tuple2 c1 f1))) j)
     (= (t2tb3070 (tb2t3070 j)) j)) :pattern ((t2tb3070 (tb2t3070 j))) )))

(declare-fun t2tb3071 ((tuple21 (tuple21 (tuple21 a c) (tuple21 e f))
  (tuple21 c f))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 a c) (tuple21 e f)) (tuple21 c f))))
  (sort (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (tuple2 c1 f1))
  (t2tb3071 x))))

(declare-fun tb2t3071 (uni) (tuple21 (tuple21 (tuple21 a c) (tuple21 e f))
  (tuple21 c f)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 a c) (tuple21 e f)) (tuple21 c f))))
  (! (= (tb2t3071 (t2tb3071 i)) i) :pattern ((t2tb3071 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (tuple2 c1 f1))
     j) (= (t2tb3071 (tb2t3071 j)) j)) :pattern ((t2tb3071 (tb2t3071 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 (tuple21 a c) (tuple21 e f)))) (t (set (tuple21 c
  f))) (x (tuple21 (tuple21 a c) (tuple21 e f))) (y (tuple21 c f)))
  (= (mem (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (tuple2 c1 f1))
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (tuple2 c1 f1) (t2tb2951 x)
  (t2tb2948 y))
  (times (tuple2 c1 f1) (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (t2tb2945 s)
  (t2tb2942 t))) (and (mem42 x s) (mem45 y t)))))

(declare-fun t2tb3072 ((set (tuple21 (tuple21 (tuple21 a c) (tuple21 e f))
  (tuple21 a e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 a c) (tuple21 e f)) (tuple21 a
  e))))) (sort
  (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (tuple2 a1 e1)))
  (t2tb3072 x))))

(declare-fun tb2t3072 (uni) (set (tuple21 (tuple21 (tuple21 a c) (tuple21 e
  f)) (tuple21 a e))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 a c) (tuple21 e f)) (tuple21 a
  e))))) (! (= (tb2t3072 (t2tb3072 i)) i) :pattern ((t2tb3072 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (tuple2 a1 e1))) j)
     (= (t2tb3072 (tb2t3072 j)) j)) :pattern ((t2tb3072 (tb2t3072 j))) )))

(declare-fun t2tb3073 ((tuple21 (tuple21 (tuple21 a c) (tuple21 e f))
  (tuple21 a e))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 a c) (tuple21 e f)) (tuple21 a e))))
  (sort (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (tuple2 a1 e1))
  (t2tb3073 x))))

(declare-fun tb2t3073 (uni) (tuple21 (tuple21 (tuple21 a c) (tuple21 e f))
  (tuple21 a e)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 a c) (tuple21 e f)) (tuple21 a e))))
  (! (= (tb2t3073 (t2tb3073 i)) i) :pattern ((t2tb3073 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (tuple2 a1 e1))
     j) (= (t2tb3073 (tb2t3073 j)) j)) :pattern ((t2tb3073 (tb2t3073 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 (tuple21 a c) (tuple21 e f)))) (t (set (tuple21 a
  e))) (x (tuple21 (tuple21 a c) (tuple21 e f))) (y (tuple21 a e)))
  (= (mem (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (tuple2 a1 e1))
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (tuple2 a1 e1) (t2tb2951 x)
  (t2tb2949 y))
  (times (tuple2 a1 e1) (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (t2tb2945 s)
  (t2tb2943 t))) (and (mem42 x s) (mem44 y t)))))

(declare-fun t2tb3074 ((set (tuple21 (tuple21 (tuple21 a c) (tuple21 e f))
  (tuple21 (tuple21 b d) (tuple21 e f))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 a c) (tuple21 e f))
  (tuple21 (tuple21 b d) (tuple21 e f)))))) (sort
  (set1
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1))
  (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)))) (t2tb3074 x))))

(declare-fun tb2t3074 (uni) (set (tuple21 (tuple21 (tuple21 a c) (tuple21 e
  f)) (tuple21 (tuple21 b d) (tuple21 e f)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 a c) (tuple21 e f))
  (tuple21 (tuple21 b d) (tuple21 e f))))))
  (! (= (tb2t3074 (t2tb3074 i)) i) :pattern ((t2tb3074 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1))
     (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)))) j)
     (= (t2tb3074 (tb2t3074 j)) j)) :pattern ((t2tb3074 (tb2t3074 j))) )))

(declare-fun t2tb3075 ((tuple21 (tuple21 (tuple21 a c) (tuple21 e f))
  (tuple21 (tuple21 b d) (tuple21 e f)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 a c) (tuple21 e f))
  (tuple21 (tuple21 b d) (tuple21 e f))))) (sort
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1))
  (tuple2 (tuple2 b1 d1) (tuple2 e1 f1))) (t2tb3075 x))))

(declare-fun tb2t3075 (uni) (tuple21 (tuple21 (tuple21 a c) (tuple21 e f))
  (tuple21 (tuple21 b d) (tuple21 e f))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 a c) (tuple21 e f))
  (tuple21 (tuple21 b d) (tuple21 e f)))))
  (! (= (tb2t3075 (t2tb3075 i)) i) :pattern ((t2tb3075 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1))
     (tuple2 (tuple2 b1 d1) (tuple2 e1 f1))) j)
     (= (t2tb3075 (tb2t3075 j)) j)) :pattern ((t2tb3075 (tb2t3075 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 (tuple21 a c) (tuple21 e f))))
  (t (set (tuple21 (tuple21 b d) (tuple21 e f)))) (x (tuple21 (tuple21 a c)
  (tuple21 e f))) (y (tuple21 (tuple21 b d) (tuple21 e f))))
  (= (mem
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1))
  (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)))
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1))
  (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (t2tb2951 x) (t2tb2950 y))
  (times (tuple2 (tuple2 b1 d1) (tuple2 e1 f1))
  (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (t2tb2945 s) (t2tb2944 t)))
  (and (mem42 x s) (mem43 y t)))))

(declare-fun t2tb3076 ((set (tuple21 (tuple21 (tuple21 a c) (tuple21 e f))
  (tuple21 (tuple21 a c) (tuple21 e f))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 a c) (tuple21 e f))
  (tuple21 (tuple21 a c) (tuple21 e f)))))) (sort
  (set1
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1))
  (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)))) (t2tb3076 x))))

(declare-fun tb2t3076 (uni) (set (tuple21 (tuple21 (tuple21 a c) (tuple21 e
  f)) (tuple21 (tuple21 a c) (tuple21 e f)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 a c) (tuple21 e f))
  (tuple21 (tuple21 a c) (tuple21 e f))))))
  (! (= (tb2t3076 (t2tb3076 i)) i) :pattern ((t2tb3076 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1))
     (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)))) j)
     (= (t2tb3076 (tb2t3076 j)) j)) :pattern ((t2tb3076 (tb2t3076 j))) )))

(declare-fun t2tb3077 ((tuple21 (tuple21 (tuple21 a c) (tuple21 e f))
  (tuple21 (tuple21 a c) (tuple21 e f)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 a c) (tuple21 e f))
  (tuple21 (tuple21 a c) (tuple21 e f))))) (sort
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1))
  (tuple2 (tuple2 a1 c1) (tuple2 e1 f1))) (t2tb3077 x))))

(declare-fun tb2t3077 (uni) (tuple21 (tuple21 (tuple21 a c) (tuple21 e f))
  (tuple21 (tuple21 a c) (tuple21 e f))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 a c) (tuple21 e f))
  (tuple21 (tuple21 a c) (tuple21 e f)))))
  (! (= (tb2t3077 (t2tb3077 i)) i) :pattern ((t2tb3077 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1))
     (tuple2 (tuple2 a1 c1) (tuple2 e1 f1))) j)
     (= (t2tb3077 (tb2t3077 j)) j)) :pattern ((t2tb3077 (tb2t3077 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 (tuple21 a c) (tuple21 e f))))
  (t (set (tuple21 (tuple21 a c) (tuple21 e f)))) (x (tuple21 (tuple21 a c)
  (tuple21 e f))) (y (tuple21 (tuple21 a c) (tuple21 e f))))
  (= (mem
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1))
  (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)))
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1))
  (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (t2tb2951 x) (t2tb2951 y))
  (times (tuple2 (tuple2 a1 c1) (tuple2 e1 f1))
  (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (t2tb2945 s) (t2tb2945 t)))
  (and (mem42 x s) (mem42 y t)))))

(declare-fun t2tb3078 ((set (tuple21 (tuple21 (tuple21 a c) (tuple21 e f))
  (set (tuple21 d f))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 a c) (tuple21 e f))
  (set (tuple21 d f)))))) (sort
  (set1
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (set1 (tuple2 d1 f1))))
  (t2tb3078 x))))

(declare-fun tb2t3078 (uni) (set (tuple21 (tuple21 (tuple21 a c) (tuple21 e
  f)) (set (tuple21 d f)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 a c) (tuple21 e f))
  (set (tuple21 d f))))))
  (! (= (tb2t3078 (t2tb3078 i)) i) :pattern ((t2tb3078 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (set1 (tuple2 d1 f1))))
     j) (= (t2tb3078 (tb2t3078 j)) j)) :pattern ((t2tb3078 (tb2t3078 j))) )))

(declare-fun t2tb3079 ((tuple21 (tuple21 (tuple21 a c) (tuple21 e f))
  (set (tuple21 d f)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 a c) (tuple21 e f)) (set (tuple21 d
  f))))) (sort
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (set1 (tuple2 d1 f1)))
  (t2tb3079 x))))

(declare-fun tb2t3079 (uni) (tuple21 (tuple21 (tuple21 a c) (tuple21 e f))
  (set (tuple21 d f))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 a c) (tuple21 e f)) (set (tuple21 d
  f))))) (! (= (tb2t3079 (t2tb3079 i)) i) :pattern ((t2tb3079 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (set1 (tuple2 d1 f1))) j)
     (= (t2tb3079 (tb2t3079 j)) j)) :pattern ((t2tb3079 (tb2t3079 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 (tuple21 a c) (tuple21 e f))))
  (t (set (set (tuple21 d f)))) (x (tuple21 (tuple21 a c) (tuple21 e f)))
  (y (set (tuple21 d f))))
  (= (mem
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (set1 (tuple2 d1 f1)))
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (set1 (tuple2 d1 f1))
  (t2tb2951 x) (t2tb2938 y))
  (times (set1 (tuple2 d1 f1)) (tuple2 (tuple2 a1 c1) (tuple2 e1 f1))
  (t2tb2945 s) (t2tb2939 t))) (and (mem42 x s) (mem41 y t)))))

(declare-fun t2tb3080 ((set (tuple21 (tuple21 (tuple21 a c) (tuple21 e f))
  (tuple21 d f)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 a c) (tuple21 e f)) (tuple21 d
  f))))) (sort
  (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (tuple2 d1 f1)))
  (t2tb3080 x))))

(declare-fun tb2t3080 (uni) (set (tuple21 (tuple21 (tuple21 a c) (tuple21 e
  f)) (tuple21 d f))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 a c) (tuple21 e f)) (tuple21 d
  f))))) (! (= (tb2t3080 (t2tb3080 i)) i) :pattern ((t2tb3080 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (tuple2 d1 f1))) j)
     (= (t2tb3080 (tb2t3080 j)) j)) :pattern ((t2tb3080 (tb2t3080 j))) )))

(declare-fun t2tb3081 ((tuple21 (tuple21 (tuple21 a c) (tuple21 e f))
  (tuple21 d f))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 a c) (tuple21 e f)) (tuple21 d f))))
  (sort (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (tuple2 d1 f1))
  (t2tb3081 x))))

(declare-fun tb2t3081 (uni) (tuple21 (tuple21 (tuple21 a c) (tuple21 e f))
  (tuple21 d f)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 a c) (tuple21 e f)) (tuple21 d f))))
  (! (= (tb2t3081 (t2tb3081 i)) i) :pattern ((t2tb3081 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (tuple2 d1 f1))
     j) (= (t2tb3081 (tb2t3081 j)) j)) :pattern ((t2tb3081 (tb2t3081 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 (tuple21 a c) (tuple21 e f)))) (t (set (tuple21 d
  f))) (x (tuple21 (tuple21 a c) (tuple21 e f))) (y (tuple21 d f)))
  (= (mem (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (tuple2 d1 f1))
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (tuple2 d1 f1) (t2tb2951 x)
  (t2tb2952 y))
  (times (tuple2 d1 f1) (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (t2tb2945 s)
  (t2tb2938 t))) (and (mem42 x s) (mem40 y t)))))

(declare-fun t2tb3082 ((set (tuple21 (tuple21 (tuple21 a c) (tuple21 e f))
  (set (tuple21 b e))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 a c) (tuple21 e f))
  (set (tuple21 b e)))))) (sort
  (set1
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (set1 (tuple2 b1 e1))))
  (t2tb3082 x))))

(declare-fun tb2t3082 (uni) (set (tuple21 (tuple21 (tuple21 a c) (tuple21 e
  f)) (set (tuple21 b e)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 a c) (tuple21 e f))
  (set (tuple21 b e))))))
  (! (= (tb2t3082 (t2tb3082 i)) i) :pattern ((t2tb3082 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (set1 (tuple2 b1 e1))))
     j) (= (t2tb3082 (tb2t3082 j)) j)) :pattern ((t2tb3082 (tb2t3082 j))) )))

(declare-fun t2tb3083 ((tuple21 (tuple21 (tuple21 a c) (tuple21 e f))
  (set (tuple21 b e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 a c) (tuple21 e f)) (set (tuple21 b
  e))))) (sort
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (set1 (tuple2 b1 e1)))
  (t2tb3083 x))))

(declare-fun tb2t3083 (uni) (tuple21 (tuple21 (tuple21 a c) (tuple21 e f))
  (set (tuple21 b e))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 a c) (tuple21 e f)) (set (tuple21 b
  e))))) (! (= (tb2t3083 (t2tb3083 i)) i) :pattern ((t2tb3083 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (set1 (tuple2 b1 e1))) j)
     (= (t2tb3083 (tb2t3083 j)) j)) :pattern ((t2tb3083 (tb2t3083 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 (tuple21 a c) (tuple21 e f))))
  (t (set (set (tuple21 b e)))) (x (tuple21 (tuple21 a c) (tuple21 e f)))
  (y (set (tuple21 b e))))
  (= (mem
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (set1 (tuple2 b1 e1)))
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (set1 (tuple2 b1 e1))
  (t2tb2951 x) (t2tb2940 y))
  (times (set1 (tuple2 b1 e1)) (tuple2 (tuple2 a1 c1) (tuple2 e1 f1))
  (t2tb2945 s) (t2tb2941 t))) (and (mem42 x s) (mem39 y t)))))

(declare-fun t2tb3084 ((set (tuple21 (tuple21 (tuple21 a c) (tuple21 e f))
  (tuple21 b e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 a c) (tuple21 e f)) (tuple21 b
  e))))) (sort
  (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (tuple2 b1 e1)))
  (t2tb3084 x))))

(declare-fun tb2t3084 (uni) (set (tuple21 (tuple21 (tuple21 a c) (tuple21 e
  f)) (tuple21 b e))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 a c) (tuple21 e f)) (tuple21 b
  e))))) (! (= (tb2t3084 (t2tb3084 i)) i) :pattern ((t2tb3084 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (tuple2 b1 e1))) j)
     (= (t2tb3084 (tb2t3084 j)) j)) :pattern ((t2tb3084 (tb2t3084 j))) )))

(declare-fun t2tb3085 ((tuple21 (tuple21 (tuple21 a c) (tuple21 e f))
  (tuple21 b e))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 a c) (tuple21 e f)) (tuple21 b e))))
  (sort (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (tuple2 b1 e1))
  (t2tb3085 x))))

(declare-fun tb2t3085 (uni) (tuple21 (tuple21 (tuple21 a c) (tuple21 e f))
  (tuple21 b e)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 a c) (tuple21 e f)) (tuple21 b e))))
  (! (= (tb2t3085 (t2tb3085 i)) i) :pattern ((t2tb3085 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (tuple2 b1 e1))
     j) (= (t2tb3085 (tb2t3085 j)) j)) :pattern ((t2tb3085 (tb2t3085 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 (tuple21 a c) (tuple21 e f)))) (t (set (tuple21 b
  e))) (x (tuple21 (tuple21 a c) (tuple21 e f))) (y (tuple21 b e)))
  (= (mem (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (tuple2 b1 e1))
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (tuple2 b1 e1) (t2tb2951 x)
  (t2tb2953 y))
  (times (tuple2 b1 e1) (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (t2tb2945 s)
  (t2tb2940 t))) (and (mem42 x s) (mem38 y t)))))

(declare-fun t2tb3086 ((set (tuple21 (tuple21 (tuple21 a c) (tuple21 e f))
  f))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 a c) (tuple21 e f)) f)))) (sort
  (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) f1)) (t2tb3086 x))))

(declare-fun tb2t3086 (uni) (set (tuple21 (tuple21 (tuple21 a c) (tuple21 e
  f)) f)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 a c) (tuple21 e f)) f))))
  (! (= (tb2t3086 (t2tb3086 i)) i) :pattern ((t2tb3086 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) f1)) j)
     (= (t2tb3086 (tb2t3086 j)) j)) :pattern ((t2tb3086 (tb2t3086 j))) )))

(declare-fun t2tb3087 ((tuple21 (tuple21 (tuple21 a c) (tuple21 e f))
  f)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 a c) (tuple21 e f)) f))) (sort
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) f1) (t2tb3087 x))))

(declare-fun tb2t3087 (uni) (tuple21 (tuple21 (tuple21 a c) (tuple21 e f))
  f))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 a c) (tuple21 e f)) f)))
  (! (= (tb2t3087 (t2tb3087 i)) i) :pattern ((t2tb3087 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) f1) j)
     (= (t2tb3087 (tb2t3087 j)) j)) :pattern ((t2tb3087 (tb2t3087 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 (tuple21 a c) (tuple21 e f)))) (t (set f))
  (x (tuple21 (tuple21 a c) (tuple21 e f))) (y f))
  (= (mem (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) f1)
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) f1 (t2tb2951 x)
  (t2tb2954 y))
  (times f1 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (t2tb2945 s) (t2tb2946 t)))
  (and (mem42 x s) (mem37 y t)))))

(declare-fun t2tb3088 ((set (tuple21 (tuple21 (tuple21 a c) (tuple21 e f))
  e))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 a c) (tuple21 e f)) e)))) (sort
  (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) e1)) (t2tb3088 x))))

(declare-fun tb2t3088 (uni) (set (tuple21 (tuple21 (tuple21 a c) (tuple21 e
  f)) e)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 a c) (tuple21 e f)) e))))
  (! (= (tb2t3088 (t2tb3088 i)) i) :pattern ((t2tb3088 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) e1)) j)
     (= (t2tb3088 (tb2t3088 j)) j)) :pattern ((t2tb3088 (tb2t3088 j))) )))

(declare-fun t2tb3089 ((tuple21 (tuple21 (tuple21 a c) (tuple21 e f))
  e)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 a c) (tuple21 e f)) e))) (sort
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) e1) (t2tb3089 x))))

(declare-fun tb2t3089 (uni) (tuple21 (tuple21 (tuple21 a c) (tuple21 e f))
  e))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 a c) (tuple21 e f)) e)))
  (! (= (tb2t3089 (t2tb3089 i)) i) :pattern ((t2tb3089 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) e1) j)
     (= (t2tb3089 (tb2t3089 j)) j)) :pattern ((t2tb3089 (tb2t3089 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 (tuple21 a c) (tuple21 e f)))) (t (set e))
  (x (tuple21 (tuple21 a c) (tuple21 e f))) (y e))
  (= (mem (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) e1)
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) e1 (t2tb2951 x)
  (t2tb2955 y))
  (times e1 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (t2tb2945 s) (t2tb2947 t)))
  (and (mem42 x s) (mem36 y t)))))

(declare-fun t2tb3090 ((set (tuple21 (tuple21 (tuple21 a c) (tuple21 e f))
  (tuple21 (tuple21 a c) (tuple21 b d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 a c) (tuple21 e f))
  (tuple21 (tuple21 a c) (tuple21 b d)))))) (sort
  (set1
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1))
  (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))) (t2tb3090 x))))

(declare-fun tb2t3090 (uni) (set (tuple21 (tuple21 (tuple21 a c) (tuple21 e
  f)) (tuple21 (tuple21 a c) (tuple21 b d)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 a c) (tuple21 e f))
  (tuple21 (tuple21 a c) (tuple21 b d))))))
  (! (= (tb2t3090 (t2tb3090 i)) i) :pattern ((t2tb3090 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1))
     (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))) j)
     (= (t2tb3090 (tb2t3090 j)) j)) :pattern ((t2tb3090 (tb2t3090 j))) )))

(declare-fun t2tb3091 ((tuple21 (tuple21 (tuple21 a c) (tuple21 e f))
  (tuple21 (tuple21 a c) (tuple21 b d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 a c) (tuple21 e f))
  (tuple21 (tuple21 a c) (tuple21 b d))))) (sort
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1))
  (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))) (t2tb3091 x))))

(declare-fun tb2t3091 (uni) (tuple21 (tuple21 (tuple21 a c) (tuple21 e f))
  (tuple21 (tuple21 a c) (tuple21 b d))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 a c) (tuple21 e f))
  (tuple21 (tuple21 a c) (tuple21 b d)))))
  (! (= (tb2t3091 (t2tb3091 i)) i) :pattern ((t2tb3091 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1))
     (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))) j)
     (= (t2tb3091 (tb2t3091 j)) j)) :pattern ((t2tb3091 (tb2t3091 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 (tuple21 a c) (tuple21 e f))))
  (t (set (tuple21 (tuple21 a c) (tuple21 b d)))) (x (tuple21 (tuple21 a c)
  (tuple21 e f))) (y (tuple21 (tuple21 a c) (tuple21 b d))))
  (= (mem
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1))
  (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1))
  (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb2951 x) (t2tb691 y))
  (times (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))
  (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (t2tb2945 s) (t2tb686 t)))
  (and (mem42 x s) (mem24 y t)))))

(declare-fun t2tb3092 ((set (tuple21 (tuple21 (tuple21 a c) (tuple21 e f))
  (set (tuple21 c d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 a c) (tuple21 e f))
  (set (tuple21 c d)))))) (sort
  (set1
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (set1 (tuple2 c1 d1))))
  (t2tb3092 x))))

(declare-fun tb2t3092 (uni) (set (tuple21 (tuple21 (tuple21 a c) (tuple21 e
  f)) (set (tuple21 c d)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 a c) (tuple21 e f))
  (set (tuple21 c d))))))
  (! (= (tb2t3092 (t2tb3092 i)) i) :pattern ((t2tb3092 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (set1 (tuple2 c1 d1))))
     j) (= (t2tb3092 (tb2t3092 j)) j)) :pattern ((t2tb3092 (tb2t3092 j))) )))

(declare-fun t2tb3093 ((tuple21 (tuple21 (tuple21 a c) (tuple21 e f))
  (set (tuple21 c d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 a c) (tuple21 e f)) (set (tuple21 c
  d))))) (sort
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (set1 (tuple2 c1 d1)))
  (t2tb3093 x))))

(declare-fun tb2t3093 (uni) (tuple21 (tuple21 (tuple21 a c) (tuple21 e f))
  (set (tuple21 c d))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 a c) (tuple21 e f)) (set (tuple21 c
  d))))) (! (= (tb2t3093 (t2tb3093 i)) i) :pattern ((t2tb3093 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (set1 (tuple2 c1 d1))) j)
     (= (t2tb3093 (tb2t3093 j)) j)) :pattern ((t2tb3093 (tb2t3093 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 (tuple21 a c) (tuple21 e f))))
  (t (set (set (tuple21 c d)))) (x (tuple21 (tuple21 a c) (tuple21 e f)))
  (y (set (tuple21 c d))))
  (= (mem
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (set1 (tuple2 c1 d1)))
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (set1 (tuple2 c1 d1))
  (t2tb2951 x) (t2tb689 y))
  (times (set1 (tuple2 c1 d1)) (tuple2 (tuple2 a1 c1) (tuple2 e1 f1))
  (t2tb2945 s) (t2tb688 t))) (and (mem42 x s) (mem22 y t)))))

(declare-fun t2tb3094 ((set (tuple21 (tuple21 (tuple21 a c) (tuple21 e f))
  (tuple21 c d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 a c) (tuple21 e f)) (tuple21 c
  d))))) (sort
  (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (tuple2 c1 d1)))
  (t2tb3094 x))))

(declare-fun tb2t3094 (uni) (set (tuple21 (tuple21 (tuple21 a c) (tuple21 e
  f)) (tuple21 c d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 a c) (tuple21 e f)) (tuple21 c
  d))))) (! (= (tb2t3094 (t2tb3094 i)) i) :pattern ((t2tb3094 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (tuple2 c1 d1))) j)
     (= (t2tb3094 (tb2t3094 j)) j)) :pattern ((t2tb3094 (tb2t3094 j))) )))

(declare-fun t2tb3095 ((tuple21 (tuple21 (tuple21 a c) (tuple21 e f))
  (tuple21 c d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 a c) (tuple21 e f)) (tuple21 c d))))
  (sort (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (tuple2 c1 d1))
  (t2tb3095 x))))

(declare-fun tb2t3095 (uni) (tuple21 (tuple21 (tuple21 a c) (tuple21 e f))
  (tuple21 c d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 a c) (tuple21 e f)) (tuple21 c d))))
  (! (= (tb2t3095 (t2tb3095 i)) i) :pattern ((t2tb3095 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (tuple2 c1 d1))
     j) (= (t2tb3095 (tb2t3095 j)) j)) :pattern ((t2tb3095 (tb2t3095 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 (tuple21 a c) (tuple21 e f)))) (t (set (tuple21 c
  d))) (x (tuple21 (tuple21 a c) (tuple21 e f))) (y (tuple21 c d)))
  (= (mem (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (tuple2 c1 d1))
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (tuple2 c1 d1) (t2tb2951 x)
  (t2tb693 y))
  (times (tuple2 c1 d1) (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (t2tb2945 s)
  (t2tb689 t))) (and (mem42 x s) (mem21 y t)))))

(declare-fun t2tb3096 ((set (tuple21 (tuple21 (tuple21 a c) (tuple21 e f))
  d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 a c) (tuple21 e f)) d)))) (sort
  (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) d1)) (t2tb3096 x))))

(declare-fun tb2t3096 (uni) (set (tuple21 (tuple21 (tuple21 a c) (tuple21 e
  f)) d)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 a c) (tuple21 e f)) d))))
  (! (= (tb2t3096 (t2tb3096 i)) i) :pattern ((t2tb3096 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) d1)) j)
     (= (t2tb3096 (tb2t3096 j)) j)) :pattern ((t2tb3096 (tb2t3096 j))) )))

(declare-fun t2tb3097 ((tuple21 (tuple21 (tuple21 a c) (tuple21 e f))
  d)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 a c) (tuple21 e f)) d))) (sort
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) d1) (t2tb3097 x))))

(declare-fun tb2t3097 (uni) (tuple21 (tuple21 (tuple21 a c) (tuple21 e f))
  d))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 a c) (tuple21 e f)) d)))
  (! (= (tb2t3097 (t2tb3097 i)) i) :pattern ((t2tb3097 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) d1) j)
     (= (t2tb3097 (tb2t3097 j)) j)) :pattern ((t2tb3097 (tb2t3097 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 (tuple21 a c) (tuple21 e f)))) (t (set d))
  (x (tuple21 (tuple21 a c) (tuple21 e f))) (y d))
  (= (mem (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) d1)
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) d1 (t2tb2951 x) (t2tb694 y))
  (times d1 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (t2tb2945 s) (t2tb690 t)))
  (and (mem42 x s) (mem20 y t)))))

(declare-fun t2tb3098 ((set (tuple21 (tuple21 (tuple21 a c) (tuple21 e f))
  c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 a c) (tuple21 e f)) c)))) (sort
  (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) c1)) (t2tb3098 x))))

(declare-fun tb2t3098 (uni) (set (tuple21 (tuple21 (tuple21 a c) (tuple21 e
  f)) c)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 a c) (tuple21 e f)) c))))
  (! (= (tb2t3098 (t2tb3098 i)) i) :pattern ((t2tb3098 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) c1)) j)
     (= (t2tb3098 (tb2t3098 j)) j)) :pattern ((t2tb3098 (tb2t3098 j))) )))

(declare-fun t2tb3099 ((tuple21 (tuple21 (tuple21 a c) (tuple21 e f))
  c)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 a c) (tuple21 e f)) c))) (sort
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) c1) (t2tb3099 x))))

(declare-fun tb2t3099 (uni) (tuple21 (tuple21 (tuple21 a c) (tuple21 e f))
  c))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 a c) (tuple21 e f)) c)))
  (! (= (tb2t3099 (t2tb3099 i)) i) :pattern ((t2tb3099 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) c1) j)
     (= (t2tb3099 (tb2t3099 j)) j)) :pattern ((t2tb3099 (tb2t3099 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 (tuple21 a c) (tuple21 e f)))) (t (set c))
  (x (tuple21 (tuple21 a c) (tuple21 e f))) (y c))
  (= (mem (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) c1)
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) c1 (t2tb2951 x) (t2tb135 y))
  (times c1 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (t2tb2945 s) (t2tb132 t)))
  (and (mem42 x s) (mem7 y t)))))

(declare-fun t2tb3100 ((set (tuple21 (tuple21 (tuple21 a c) (tuple21 e f))
  (set (tuple21 a b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 a c) (tuple21 e f))
  (set (tuple21 a b)))))) (sort
  (set1
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (set1 (tuple2 a1 b1))))
  (t2tb3100 x))))

(declare-fun tb2t3100 (uni) (set (tuple21 (tuple21 (tuple21 a c) (tuple21 e
  f)) (set (tuple21 a b)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 a c) (tuple21 e f))
  (set (tuple21 a b))))))
  (! (= (tb2t3100 (t2tb3100 i)) i) :pattern ((t2tb3100 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (set1 (tuple2 a1 b1))))
     j) (= (t2tb3100 (tb2t3100 j)) j)) :pattern ((t2tb3100 (tb2t3100 j))) )))

(declare-fun t2tb3101 ((tuple21 (tuple21 (tuple21 a c) (tuple21 e f))
  (set (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 a c) (tuple21 e f)) (set (tuple21 a
  b))))) (sort
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (set1 (tuple2 a1 b1)))
  (t2tb3101 x))))

(declare-fun tb2t3101 (uni) (tuple21 (tuple21 (tuple21 a c) (tuple21 e f))
  (set (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 a c) (tuple21 e f)) (set (tuple21 a
  b))))) (! (= (tb2t3101 (t2tb3101 i)) i) :pattern ((t2tb3101 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (set1 (tuple2 a1 b1))) j)
     (= (t2tb3101 (tb2t3101 j)) j)) :pattern ((t2tb3101 (tb2t3101 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 (tuple21 a c) (tuple21 e f))))
  (t (set (set (tuple21 a b)))) (x (tuple21 (tuple21 a c) (tuple21 e f)))
  (y (set (tuple21 a b))))
  (= (mem
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (set1 (tuple2 a1 b1)))
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (set1 (tuple2 a1 b1))
  (t2tb2951 x) (t2tb11 y))
  (times (set1 (tuple2 a1 b1)) (tuple2 (tuple2 a1 c1) (tuple2 e1 f1))
  (t2tb2945 s) (t2tb10 t))) (and (mem42 x s) (mem4 y t)))))

(declare-fun t2tb3102 ((set (tuple21 (tuple21 (tuple21 a c) (tuple21 e f))
  (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 a c) (tuple21 e f)) (tuple21 a
  b))))) (sort
  (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (tuple2 a1 b1)))
  (t2tb3102 x))))

(declare-fun tb2t3102 (uni) (set (tuple21 (tuple21 (tuple21 a c) (tuple21 e
  f)) (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 a c) (tuple21 e f)) (tuple21 a
  b))))) (! (= (tb2t3102 (t2tb3102 i)) i) :pattern ((t2tb3102 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (tuple2 a1 b1))) j)
     (= (t2tb3102 (tb2t3102 j)) j)) :pattern ((t2tb3102 (tb2t3102 j))) )))

(declare-fun t2tb3103 ((tuple21 (tuple21 (tuple21 a c) (tuple21 e f))
  (tuple21 a b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 a c) (tuple21 e f)) (tuple21 a b))))
  (sort (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (tuple2 a1 b1))
  (t2tb3103 x))))

(declare-fun tb2t3103 (uni) (tuple21 (tuple21 (tuple21 a c) (tuple21 e f))
  (tuple21 a b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 a c) (tuple21 e f)) (tuple21 a b))))
  (! (= (tb2t3103 (t2tb3103 i)) i) :pattern ((t2tb3103 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (tuple2 a1 b1))
     j) (= (t2tb3103 (tb2t3103 j)) j)) :pattern ((t2tb3103 (tb2t3103 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 (tuple21 a c) (tuple21 e f)))) (t (set (tuple21 a
  b))) (x (tuple21 (tuple21 a c) (tuple21 e f))) (y (tuple21 a b)))
  (= (mem (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (tuple2 a1 b1))
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (tuple2 a1 b1) (t2tb2951 x)
  (t2tb13 y))
  (times (tuple2 a1 b1) (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (t2tb2945 s)
  (t2tb11 t))) (and (mem42 x s) (mem3 y t)))))

(declare-fun t2tb3104 ((set (tuple21 (tuple21 (tuple21 a c) (tuple21 e f))
  b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 a c) (tuple21 e f)) b)))) (sort
  (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) b1)) (t2tb3104 x))))

(declare-fun tb2t3104 (uni) (set (tuple21 (tuple21 (tuple21 a c) (tuple21 e
  f)) b)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 a c) (tuple21 e f)) b))))
  (! (= (tb2t3104 (t2tb3104 i)) i) :pattern ((t2tb3104 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) b1)) j)
     (= (t2tb3104 (tb2t3104 j)) j)) :pattern ((t2tb3104 (tb2t3104 j))) )))

(declare-fun t2tb3105 ((tuple21 (tuple21 (tuple21 a c) (tuple21 e f))
  b)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 a c) (tuple21 e f)) b))) (sort
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) b1) (t2tb3105 x))))

(declare-fun tb2t3105 (uni) (tuple21 (tuple21 (tuple21 a c) (tuple21 e f))
  b))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 a c) (tuple21 e f)) b)))
  (! (= (tb2t3105 (t2tb3105 i)) i) :pattern ((t2tb3105 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) b1) j)
     (= (t2tb3105 (tb2t3105 j)) j)) :pattern ((t2tb3105 (tb2t3105 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 (tuple21 a c) (tuple21 e f)))) (t (set b))
  (x (tuple21 (tuple21 a c) (tuple21 e f))) (y b))
  (= (mem (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) b1)
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) b1 (t2tb2951 x) (t2tb14 y))
  (times b1 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (t2tb2945 s) (t2tb12 t)))
  (and (mem42 x s) (mem2 y t)))))

(declare-fun t2tb3106 ((set (tuple21 (tuple21 (tuple21 a c) (tuple21 e f))
  a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 a c) (tuple21 e f)) a)))) (sort
  (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) a1)) (t2tb3106 x))))

(declare-fun tb2t3106 (uni) (set (tuple21 (tuple21 (tuple21 a c) (tuple21 e
  f)) a)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 a c) (tuple21 e f)) a))))
  (! (= (tb2t3106 (t2tb3106 i)) i) :pattern ((t2tb3106 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) a1)) j)
     (= (t2tb3106 (tb2t3106 j)) j)) :pattern ((t2tb3106 (tb2t3106 j))) )))

(declare-fun t2tb3107 ((tuple21 (tuple21 (tuple21 a c) (tuple21 e f))
  a)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 a c) (tuple21 e f)) a))) (sort
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) a1) (t2tb3107 x))))

(declare-fun tb2t3107 (uni) (tuple21 (tuple21 (tuple21 a c) (tuple21 e f))
  a))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 a c) (tuple21 e f)) a)))
  (! (= (tb2t3107 (t2tb3107 i)) i) :pattern ((t2tb3107 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) a1) j)
     (= (t2tb3107 (tb2t3107 j)) j)) :pattern ((t2tb3107 (tb2t3107 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 (tuple21 a c) (tuple21 e f)))) (t (set a))
  (x (tuple21 (tuple21 a c) (tuple21 e f))) (y a))
  (= (mem (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) a1)
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) a1 (t2tb2951 x) (t2tb2 y))
  (times a1 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (t2tb2945 s) (t2tb1 t)))
  (and (mem42 x s) (mem1 y t)))))

;; mem_times
  (assert
  (forall ((b2 ty))
  (forall ((s (set (tuple21 (tuple21 a c) (tuple21 e f)))) (t uni)
  (x (tuple21 (tuple21 a c) (tuple21 e f))) (y uni))
  (= (mem (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) b2)
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) b2 (t2tb2951 x) y)
  (times b2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (t2tb2945 s) t))
  (and (mem42 x s) (mem b2 y t))))))

(declare-fun t2tb3108 ((set (tuple21 (set (tuple21 d f)) (tuple21 c
  f)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 d f)) (tuple21 c f))))) (sort
  (set1 (tuple2 (set1 (tuple2 d1 f1)) (tuple2 c1 f1))) (t2tb3108 x))))

(declare-fun tb2t3108 (uni) (set (tuple21 (set (tuple21 d f)) (tuple21 c
  f))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 d f)) (tuple21 c f)))))
  (! (= (tb2t3108 (t2tb3108 i)) i) :pattern ((t2tb3108 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 d1 f1)) (tuple2 c1 f1))) j)
     (= (t2tb3108 (tb2t3108 j)) j)) :pattern ((t2tb3108 (tb2t3108 j))) )))

(declare-fun t2tb3109 ((tuple21 (set (tuple21 d f)) (tuple21 c f))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 d f)) (tuple21 c f)))) (sort
  (tuple2 (set1 (tuple2 d1 f1)) (tuple2 c1 f1)) (t2tb3109 x))))

(declare-fun tb2t3109 (uni) (tuple21 (set (tuple21 d f)) (tuple21 c f)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 d f)) (tuple21 c f))))
  (! (= (tb2t3109 (t2tb3109 i)) i) :pattern ((t2tb3109 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 d1 f1)) (tuple2 c1 f1)) j)
     (= (t2tb3109 (tb2t3109 j)) j)) :pattern ((t2tb3109 (tb2t3109 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 d f)))) (t (set (tuple21 c f)))
  (x (set (tuple21 d f))) (y (tuple21 c f)))
  (= (mem (tuple2 (set1 (tuple2 d1 f1)) (tuple2 c1 f1))
  (Tuple2 (set1 (tuple2 d1 f1)) (tuple2 c1 f1) (t2tb2938 x) (t2tb2948 y))
  (times (tuple2 c1 f1) (set1 (tuple2 d1 f1)) (t2tb2939 s) (t2tb2942 t)))
  (and (mem41 x s) (mem45 y t)))))

(declare-fun t2tb3110 ((set (tuple21 (set (tuple21 d f)) (tuple21 a
  e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 d f)) (tuple21 a e))))) (sort
  (set1 (tuple2 (set1 (tuple2 d1 f1)) (tuple2 a1 e1))) (t2tb3110 x))))

(declare-fun tb2t3110 (uni) (set (tuple21 (set (tuple21 d f)) (tuple21 a
  e))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 d f)) (tuple21 a e)))))
  (! (= (tb2t3110 (t2tb3110 i)) i) :pattern ((t2tb3110 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 d1 f1)) (tuple2 a1 e1))) j)
     (= (t2tb3110 (tb2t3110 j)) j)) :pattern ((t2tb3110 (tb2t3110 j))) )))

(declare-fun t2tb3111 ((tuple21 (set (tuple21 d f)) (tuple21 a e))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 d f)) (tuple21 a e)))) (sort
  (tuple2 (set1 (tuple2 d1 f1)) (tuple2 a1 e1)) (t2tb3111 x))))

(declare-fun tb2t3111 (uni) (tuple21 (set (tuple21 d f)) (tuple21 a e)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 d f)) (tuple21 a e))))
  (! (= (tb2t3111 (t2tb3111 i)) i) :pattern ((t2tb3111 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 d1 f1)) (tuple2 a1 e1)) j)
     (= (t2tb3111 (tb2t3111 j)) j)) :pattern ((t2tb3111 (tb2t3111 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 d f)))) (t (set (tuple21 a e)))
  (x (set (tuple21 d f))) (y (tuple21 a e)))
  (= (mem (tuple2 (set1 (tuple2 d1 f1)) (tuple2 a1 e1))
  (Tuple2 (set1 (tuple2 d1 f1)) (tuple2 a1 e1) (t2tb2938 x) (t2tb2949 y))
  (times (tuple2 a1 e1) (set1 (tuple2 d1 f1)) (t2tb2939 s) (t2tb2943 t)))
  (and (mem41 x s) (mem44 y t)))))

(declare-fun t2tb3112 ((set (tuple21 (set (tuple21 d f)) (tuple21 (tuple21 b
  d) (tuple21 e f))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 d f)) (tuple21 (tuple21 b d)
  (tuple21 e f)))))) (sort
  (set1
  (tuple2 (set1 (tuple2 d1 f1)) (tuple2 (tuple2 b1 d1) (tuple2 e1 f1))))
  (t2tb3112 x))))

(declare-fun tb2t3112 (uni) (set (tuple21 (set (tuple21 d f))
  (tuple21 (tuple21 b d) (tuple21 e f)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 d f)) (tuple21 (tuple21 b d)
  (tuple21 e f))))))
  (! (= (tb2t3112 (t2tb3112 i)) i) :pattern ((t2tb3112 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (tuple2 (set1 (tuple2 d1 f1)) (tuple2 (tuple2 b1 d1) (tuple2 e1 f1))))
     j) (= (t2tb3112 (tb2t3112 j)) j)) :pattern ((t2tb3112 (tb2t3112 j))) )))

(declare-fun t2tb3113 ((tuple21 (set (tuple21 d f)) (tuple21 (tuple21 b d)
  (tuple21 e f)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 d f)) (tuple21 (tuple21 b d) (tuple21 e
  f))))) (sort
  (tuple2 (set1 (tuple2 d1 f1)) (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)))
  (t2tb3113 x))))

(declare-fun tb2t3113 (uni) (tuple21 (set (tuple21 d f)) (tuple21 (tuple21 b
  d) (tuple21 e f))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 d f)) (tuple21 (tuple21 b d) (tuple21 e
  f))))) (! (= (tb2t3113 (t2tb3113 i)) i) :pattern ((t2tb3113 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (tuple2 (set1 (tuple2 d1 f1)) (tuple2 (tuple2 b1 d1) (tuple2 e1 f1))) j)
     (= (t2tb3113 (tb2t3113 j)) j)) :pattern ((t2tb3113 (tb2t3113 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 d f)))) (t (set (tuple21 (tuple21 b d)
  (tuple21 e f)))) (x (set (tuple21 d f))) (y (tuple21 (tuple21 b d)
  (tuple21 e f))))
  (= (mem
  (tuple2 (set1 (tuple2 d1 f1)) (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)))
  (Tuple2 (set1 (tuple2 d1 f1)) (tuple2 (tuple2 b1 d1) (tuple2 e1 f1))
  (t2tb2938 x) (t2tb2950 y))
  (times (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (set1 (tuple2 d1 f1))
  (t2tb2939 s) (t2tb2944 t))) (and (mem41 x s) (mem43 y t)))))

(declare-fun t2tb3114 ((set (tuple21 (set (tuple21 d f)) (tuple21 (tuple21 a
  c) (tuple21 e f))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 d f)) (tuple21 (tuple21 a c)
  (tuple21 e f)))))) (sort
  (set1
  (tuple2 (set1 (tuple2 d1 f1)) (tuple2 (tuple2 a1 c1) (tuple2 e1 f1))))
  (t2tb3114 x))))

(declare-fun tb2t3114 (uni) (set (tuple21 (set (tuple21 d f))
  (tuple21 (tuple21 a c) (tuple21 e f)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 d f)) (tuple21 (tuple21 a c)
  (tuple21 e f))))))
  (! (= (tb2t3114 (t2tb3114 i)) i) :pattern ((t2tb3114 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (tuple2 (set1 (tuple2 d1 f1)) (tuple2 (tuple2 a1 c1) (tuple2 e1 f1))))
     j) (= (t2tb3114 (tb2t3114 j)) j)) :pattern ((t2tb3114 (tb2t3114 j))) )))

(declare-fun t2tb3115 ((tuple21 (set (tuple21 d f)) (tuple21 (tuple21 a c)
  (tuple21 e f)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 d f)) (tuple21 (tuple21 a c) (tuple21 e
  f))))) (sort
  (tuple2 (set1 (tuple2 d1 f1)) (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)))
  (t2tb3115 x))))

(declare-fun tb2t3115 (uni) (tuple21 (set (tuple21 d f)) (tuple21 (tuple21 a
  c) (tuple21 e f))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 d f)) (tuple21 (tuple21 a c) (tuple21 e
  f))))) (! (= (tb2t3115 (t2tb3115 i)) i) :pattern ((t2tb3115 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (tuple2 (set1 (tuple2 d1 f1)) (tuple2 (tuple2 a1 c1) (tuple2 e1 f1))) j)
     (= (t2tb3115 (tb2t3115 j)) j)) :pattern ((t2tb3115 (tb2t3115 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 d f)))) (t (set (tuple21 (tuple21 a c)
  (tuple21 e f)))) (x (set (tuple21 d f))) (y (tuple21 (tuple21 a c)
  (tuple21 e f))))
  (= (mem
  (tuple2 (set1 (tuple2 d1 f1)) (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)))
  (Tuple2 (set1 (tuple2 d1 f1)) (tuple2 (tuple2 a1 c1) (tuple2 e1 f1))
  (t2tb2938 x) (t2tb2951 y))
  (times (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (set1 (tuple2 d1 f1))
  (t2tb2939 s) (t2tb2945 t))) (and (mem41 x s) (mem42 y t)))))

(declare-fun t2tb3116 ((set (tuple21 (set (tuple21 d f)) (set (tuple21 d
  f))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 d f)) (set (tuple21 d f)))))) (sort
  (set1 (tuple2 (set1 (tuple2 d1 f1)) (set1 (tuple2 d1 f1)))) (t2tb3116 x))))

(declare-fun tb2t3116 (uni) (set (tuple21 (set (tuple21 d f)) (set (tuple21 d
  f)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 d f)) (set (tuple21 d f))))))
  (! (= (tb2t3116 (t2tb3116 i)) i) :pattern ((t2tb3116 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 d1 f1)) (set1 (tuple2 d1 f1)))) j)
     (= (t2tb3116 (tb2t3116 j)) j)) :pattern ((t2tb3116 (tb2t3116 j))) )))

(declare-fun t2tb3117 ((tuple21 (set (tuple21 d f)) (set (tuple21 d
  f)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 d f)) (set (tuple21 d f))))) (sort
  (tuple2 (set1 (tuple2 d1 f1)) (set1 (tuple2 d1 f1))) (t2tb3117 x))))

(declare-fun tb2t3117 (uni) (tuple21 (set (tuple21 d f)) (set (tuple21 d
  f))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 d f)) (set (tuple21 d f)))))
  (! (= (tb2t3117 (t2tb3117 i)) i) :pattern ((t2tb3117 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 d1 f1)) (set1 (tuple2 d1 f1))) j)
     (= (t2tb3117 (tb2t3117 j)) j)) :pattern ((t2tb3117 (tb2t3117 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 d f)))) (t (set (set (tuple21 d f))))
  (x (set (tuple21 d f))) (y (set (tuple21 d f))))
  (= (mem (tuple2 (set1 (tuple2 d1 f1)) (set1 (tuple2 d1 f1)))
  (Tuple2 (set1 (tuple2 d1 f1)) (set1 (tuple2 d1 f1)) (t2tb2938 x)
  (t2tb2938 y))
  (times (set1 (tuple2 d1 f1)) (set1 (tuple2 d1 f1)) (t2tb2939 s)
  (t2tb2939 t))) (and (mem41 x s) (mem41 y t)))))

(declare-fun t2tb3118 ((set (tuple21 (set (tuple21 d f)) (tuple21 d
  f)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 d f)) (tuple21 d f))))) (sort
  (set1 (tuple2 (set1 (tuple2 d1 f1)) (tuple2 d1 f1))) (t2tb3118 x))))

(declare-fun tb2t3118 (uni) (set (tuple21 (set (tuple21 d f)) (tuple21 d
  f))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 d f)) (tuple21 d f)))))
  (! (= (tb2t3118 (t2tb3118 i)) i) :pattern ((t2tb3118 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 d1 f1)) (tuple2 d1 f1))) j)
     (= (t2tb3118 (tb2t3118 j)) j)) :pattern ((t2tb3118 (tb2t3118 j))) )))

(declare-fun t2tb3119 ((tuple21 (set (tuple21 d f)) (tuple21 d f))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 d f)) (tuple21 d f)))) (sort
  (tuple2 (set1 (tuple2 d1 f1)) (tuple2 d1 f1)) (t2tb3119 x))))

(declare-fun tb2t3119 (uni) (tuple21 (set (tuple21 d f)) (tuple21 d f)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 d f)) (tuple21 d f))))
  (! (= (tb2t3119 (t2tb3119 i)) i) :pattern ((t2tb3119 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 d1 f1)) (tuple2 d1 f1)) j)
     (= (t2tb3119 (tb2t3119 j)) j)) :pattern ((t2tb3119 (tb2t3119 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 d f)))) (t (set (tuple21 d f)))
  (x (set (tuple21 d f))) (y (tuple21 d f)))
  (= (mem (tuple2 (set1 (tuple2 d1 f1)) (tuple2 d1 f1))
  (Tuple2 (set1 (tuple2 d1 f1)) (tuple2 d1 f1) (t2tb2938 x) (t2tb2952 y))
  (times (tuple2 d1 f1) (set1 (tuple2 d1 f1)) (t2tb2939 s) (t2tb2938 t)))
  (and (mem41 x s) (mem40 y t)))))

(declare-fun t2tb3120 ((set (tuple21 (set (tuple21 d f)) (set (tuple21 b
  e))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 d f)) (set (tuple21 b e)))))) (sort
  (set1 (tuple2 (set1 (tuple2 d1 f1)) (set1 (tuple2 b1 e1)))) (t2tb3120 x))))

(declare-fun tb2t3120 (uni) (set (tuple21 (set (tuple21 d f)) (set (tuple21 b
  e)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 d f)) (set (tuple21 b e))))))
  (! (= (tb2t3120 (t2tb3120 i)) i) :pattern ((t2tb3120 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 d1 f1)) (set1 (tuple2 b1 e1)))) j)
     (= (t2tb3120 (tb2t3120 j)) j)) :pattern ((t2tb3120 (tb2t3120 j))) )))

(declare-fun t2tb3121 ((tuple21 (set (tuple21 d f)) (set (tuple21 b
  e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 d f)) (set (tuple21 b e))))) (sort
  (tuple2 (set1 (tuple2 d1 f1)) (set1 (tuple2 b1 e1))) (t2tb3121 x))))

(declare-fun tb2t3121 (uni) (tuple21 (set (tuple21 d f)) (set (tuple21 b
  e))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 d f)) (set (tuple21 b e)))))
  (! (= (tb2t3121 (t2tb3121 i)) i) :pattern ((t2tb3121 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 d1 f1)) (set1 (tuple2 b1 e1))) j)
     (= (t2tb3121 (tb2t3121 j)) j)) :pattern ((t2tb3121 (tb2t3121 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 d f)))) (t (set (set (tuple21 b e))))
  (x (set (tuple21 d f))) (y (set (tuple21 b e))))
  (= (mem (tuple2 (set1 (tuple2 d1 f1)) (set1 (tuple2 b1 e1)))
  (Tuple2 (set1 (tuple2 d1 f1)) (set1 (tuple2 b1 e1)) (t2tb2938 x)
  (t2tb2940 y))
  (times (set1 (tuple2 b1 e1)) (set1 (tuple2 d1 f1)) (t2tb2939 s)
  (t2tb2941 t))) (and (mem41 x s) (mem39 y t)))))

(declare-fun t2tb3122 ((set (tuple21 (set (tuple21 d f)) (tuple21 b
  e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 d f)) (tuple21 b e))))) (sort
  (set1 (tuple2 (set1 (tuple2 d1 f1)) (tuple2 b1 e1))) (t2tb3122 x))))

(declare-fun tb2t3122 (uni) (set (tuple21 (set (tuple21 d f)) (tuple21 b
  e))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 d f)) (tuple21 b e)))))
  (! (= (tb2t3122 (t2tb3122 i)) i) :pattern ((t2tb3122 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 d1 f1)) (tuple2 b1 e1))) j)
     (= (t2tb3122 (tb2t3122 j)) j)) :pattern ((t2tb3122 (tb2t3122 j))) )))

(declare-fun t2tb3123 ((tuple21 (set (tuple21 d f)) (tuple21 b e))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 d f)) (tuple21 b e)))) (sort
  (tuple2 (set1 (tuple2 d1 f1)) (tuple2 b1 e1)) (t2tb3123 x))))

(declare-fun tb2t3123 (uni) (tuple21 (set (tuple21 d f)) (tuple21 b e)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 d f)) (tuple21 b e))))
  (! (= (tb2t3123 (t2tb3123 i)) i) :pattern ((t2tb3123 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 d1 f1)) (tuple2 b1 e1)) j)
     (= (t2tb3123 (tb2t3123 j)) j)) :pattern ((t2tb3123 (tb2t3123 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 d f)))) (t (set (tuple21 b e)))
  (x (set (tuple21 d f))) (y (tuple21 b e)))
  (= (mem (tuple2 (set1 (tuple2 d1 f1)) (tuple2 b1 e1))
  (Tuple2 (set1 (tuple2 d1 f1)) (tuple2 b1 e1) (t2tb2938 x) (t2tb2953 y))
  (times (tuple2 b1 e1) (set1 (tuple2 d1 f1)) (t2tb2939 s) (t2tb2940 t)))
  (and (mem41 x s) (mem38 y t)))))

(declare-fun t2tb3124 ((set (tuple21 (set (tuple21 d f)) f))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 d f)) f)))) (sort
  (set1 (tuple2 (set1 (tuple2 d1 f1)) f1)) (t2tb3124 x))))

(declare-fun tb2t3124 (uni) (set (tuple21 (set (tuple21 d f)) f)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 d f)) f))))
  (! (= (tb2t3124 (t2tb3124 i)) i) :pattern ((t2tb3124 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 d1 f1)) f1)) j)
     (= (t2tb3124 (tb2t3124 j)) j)) :pattern ((t2tb3124 (tb2t3124 j))) )))

(declare-fun t2tb3125 ((tuple21 (set (tuple21 d f)) f)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 d f)) f))) (sort
  (tuple2 (set1 (tuple2 d1 f1)) f1) (t2tb3125 x))))

(declare-fun tb2t3125 (uni) (tuple21 (set (tuple21 d f)) f))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 d f)) f)))
  (! (= (tb2t3125 (t2tb3125 i)) i) :pattern ((t2tb3125 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 d1 f1)) f1) j)
     (= (t2tb3125 (tb2t3125 j)) j)) :pattern ((t2tb3125 (tb2t3125 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 d f)))) (t (set f)) (x (set (tuple21 d f)))
  (y f))
  (= (mem (tuple2 (set1 (tuple2 d1 f1)) f1)
  (Tuple2 (set1 (tuple2 d1 f1)) f1 (t2tb2938 x) (t2tb2954 y))
  (times f1 (set1 (tuple2 d1 f1)) (t2tb2939 s) (t2tb2946 t)))
  (and (mem41 x s) (mem37 y t)))))

(declare-fun t2tb3126 ((set (tuple21 (set (tuple21 d f)) e))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 d f)) e)))) (sort
  (set1 (tuple2 (set1 (tuple2 d1 f1)) e1)) (t2tb3126 x))))

(declare-fun tb2t3126 (uni) (set (tuple21 (set (tuple21 d f)) e)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 d f)) e))))
  (! (= (tb2t3126 (t2tb3126 i)) i) :pattern ((t2tb3126 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 d1 f1)) e1)) j)
     (= (t2tb3126 (tb2t3126 j)) j)) :pattern ((t2tb3126 (tb2t3126 j))) )))

(declare-fun t2tb3127 ((tuple21 (set (tuple21 d f)) e)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 d f)) e))) (sort
  (tuple2 (set1 (tuple2 d1 f1)) e1) (t2tb3127 x))))

(declare-fun tb2t3127 (uni) (tuple21 (set (tuple21 d f)) e))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 d f)) e)))
  (! (= (tb2t3127 (t2tb3127 i)) i) :pattern ((t2tb3127 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 d1 f1)) e1) j)
     (= (t2tb3127 (tb2t3127 j)) j)) :pattern ((t2tb3127 (tb2t3127 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 d f)))) (t (set e)) (x (set (tuple21 d f)))
  (y e))
  (= (mem (tuple2 (set1 (tuple2 d1 f1)) e1)
  (Tuple2 (set1 (tuple2 d1 f1)) e1 (t2tb2938 x) (t2tb2955 y))
  (times e1 (set1 (tuple2 d1 f1)) (t2tb2939 s) (t2tb2947 t)))
  (and (mem41 x s) (mem36 y t)))))

(declare-fun t2tb3128 ((set (tuple21 (set (tuple21 d f)) (tuple21 (tuple21 a
  c) (tuple21 b d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 d f)) (tuple21 (tuple21 a c)
  (tuple21 b d)))))) (sort
  (set1
  (tuple2 (set1 (tuple2 d1 f1)) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))))
  (t2tb3128 x))))

(declare-fun tb2t3128 (uni) (set (tuple21 (set (tuple21 d f))
  (tuple21 (tuple21 a c) (tuple21 b d)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 d f)) (tuple21 (tuple21 a c)
  (tuple21 b d))))))
  (! (= (tb2t3128 (t2tb3128 i)) i) :pattern ((t2tb3128 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (tuple2 (set1 (tuple2 d1 f1)) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))))
     j) (= (t2tb3128 (tb2t3128 j)) j)) :pattern ((t2tb3128 (tb2t3128 j))) )))

(declare-fun t2tb3129 ((tuple21 (set (tuple21 d f)) (tuple21 (tuple21 a c)
  (tuple21 b d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 d f)) (tuple21 (tuple21 a c) (tuple21 b
  d))))) (sort
  (tuple2 (set1 (tuple2 d1 f1)) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
  (t2tb3129 x))))

(declare-fun tb2t3129 (uni) (tuple21 (set (tuple21 d f)) (tuple21 (tuple21 a
  c) (tuple21 b d))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 d f)) (tuple21 (tuple21 a c) (tuple21 b
  d))))) (! (= (tb2t3129 (t2tb3129 i)) i) :pattern ((t2tb3129 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (tuple2 (set1 (tuple2 d1 f1)) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))) j)
     (= (t2tb3129 (tb2t3129 j)) j)) :pattern ((t2tb3129 (tb2t3129 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 d f)))) (t (set (tuple21 (tuple21 a c)
  (tuple21 b d)))) (x (set (tuple21 d f))) (y (tuple21 (tuple21 a c)
  (tuple21 b d))))
  (= (mem
  (tuple2 (set1 (tuple2 d1 f1)) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
  (Tuple2 (set1 (tuple2 d1 f1)) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))
  (t2tb2938 x) (t2tb691 y))
  (times (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (set1 (tuple2 d1 f1))
  (t2tb2939 s) (t2tb686 t))) (and (mem41 x s) (mem24 y t)))))

(declare-fun t2tb3130 ((set (tuple21 (set (tuple21 d f)) (set (tuple21 c
  d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 d f)) (set (tuple21 c d)))))) (sort
  (set1 (tuple2 (set1 (tuple2 d1 f1)) (set1 (tuple2 c1 d1)))) (t2tb3130 x))))

(declare-fun tb2t3130 (uni) (set (tuple21 (set (tuple21 d f)) (set (tuple21 c
  d)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 d f)) (set (tuple21 c d))))))
  (! (= (tb2t3130 (t2tb3130 i)) i) :pattern ((t2tb3130 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 d1 f1)) (set1 (tuple2 c1 d1)))) j)
     (= (t2tb3130 (tb2t3130 j)) j)) :pattern ((t2tb3130 (tb2t3130 j))) )))

(declare-fun t2tb3131 ((tuple21 (set (tuple21 d f)) (set (tuple21 c
  d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 d f)) (set (tuple21 c d))))) (sort
  (tuple2 (set1 (tuple2 d1 f1)) (set1 (tuple2 c1 d1))) (t2tb3131 x))))

(declare-fun tb2t3131 (uni) (tuple21 (set (tuple21 d f)) (set (tuple21 c
  d))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 d f)) (set (tuple21 c d)))))
  (! (= (tb2t3131 (t2tb3131 i)) i) :pattern ((t2tb3131 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 d1 f1)) (set1 (tuple2 c1 d1))) j)
     (= (t2tb3131 (tb2t3131 j)) j)) :pattern ((t2tb3131 (tb2t3131 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 d f)))) (t (set (set (tuple21 c d))))
  (x (set (tuple21 d f))) (y (set (tuple21 c d))))
  (= (mem (tuple2 (set1 (tuple2 d1 f1)) (set1 (tuple2 c1 d1)))
  (Tuple2 (set1 (tuple2 d1 f1)) (set1 (tuple2 c1 d1)) (t2tb2938 x)
  (t2tb689 y))
  (times (set1 (tuple2 c1 d1)) (set1 (tuple2 d1 f1)) (t2tb2939 s)
  (t2tb688 t))) (and (mem41 x s) (mem22 y t)))))

(declare-fun t2tb3132 ((set (tuple21 (set (tuple21 d f)) (tuple21 c
  d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 d f)) (tuple21 c d))))) (sort
  (set1 (tuple2 (set1 (tuple2 d1 f1)) (tuple2 c1 d1))) (t2tb3132 x))))

(declare-fun tb2t3132 (uni) (set (tuple21 (set (tuple21 d f)) (tuple21 c
  d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 d f)) (tuple21 c d)))))
  (! (= (tb2t3132 (t2tb3132 i)) i) :pattern ((t2tb3132 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 d1 f1)) (tuple2 c1 d1))) j)
     (= (t2tb3132 (tb2t3132 j)) j)) :pattern ((t2tb3132 (tb2t3132 j))) )))

(declare-fun t2tb3133 ((tuple21 (set (tuple21 d f)) (tuple21 c d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 d f)) (tuple21 c d)))) (sort
  (tuple2 (set1 (tuple2 d1 f1)) (tuple2 c1 d1)) (t2tb3133 x))))

(declare-fun tb2t3133 (uni) (tuple21 (set (tuple21 d f)) (tuple21 c d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 d f)) (tuple21 c d))))
  (! (= (tb2t3133 (t2tb3133 i)) i) :pattern ((t2tb3133 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 d1 f1)) (tuple2 c1 d1)) j)
     (= (t2tb3133 (tb2t3133 j)) j)) :pattern ((t2tb3133 (tb2t3133 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 d f)))) (t (set (tuple21 c d)))
  (x (set (tuple21 d f))) (y (tuple21 c d)))
  (= (mem (tuple2 (set1 (tuple2 d1 f1)) (tuple2 c1 d1))
  (Tuple2 (set1 (tuple2 d1 f1)) (tuple2 c1 d1) (t2tb2938 x) (t2tb693 y))
  (times (tuple2 c1 d1) (set1 (tuple2 d1 f1)) (t2tb2939 s) (t2tb689 t)))
  (and (mem41 x s) (mem21 y t)))))

(declare-fun t2tb3134 ((set (tuple21 (set (tuple21 d f)) d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 d f)) d)))) (sort
  (set1 (tuple2 (set1 (tuple2 d1 f1)) d1)) (t2tb3134 x))))

(declare-fun tb2t3134 (uni) (set (tuple21 (set (tuple21 d f)) d)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 d f)) d))))
  (! (= (tb2t3134 (t2tb3134 i)) i) :pattern ((t2tb3134 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 d1 f1)) d1)) j)
     (= (t2tb3134 (tb2t3134 j)) j)) :pattern ((t2tb3134 (tb2t3134 j))) )))

(declare-fun t2tb3135 ((tuple21 (set (tuple21 d f)) d)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 d f)) d))) (sort
  (tuple2 (set1 (tuple2 d1 f1)) d1) (t2tb3135 x))))

(declare-fun tb2t3135 (uni) (tuple21 (set (tuple21 d f)) d))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 d f)) d)))
  (! (= (tb2t3135 (t2tb3135 i)) i) :pattern ((t2tb3135 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 d1 f1)) d1) j)
     (= (t2tb3135 (tb2t3135 j)) j)) :pattern ((t2tb3135 (tb2t3135 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 d f)))) (t (set d)) (x (set (tuple21 d f)))
  (y d))
  (= (mem (tuple2 (set1 (tuple2 d1 f1)) d1)
  (Tuple2 (set1 (tuple2 d1 f1)) d1 (t2tb2938 x) (t2tb694 y))
  (times d1 (set1 (tuple2 d1 f1)) (t2tb2939 s) (t2tb690 t)))
  (and (mem41 x s) (mem20 y t)))))

(declare-fun t2tb3136 ((set (tuple21 (set (tuple21 d f)) c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 d f)) c)))) (sort
  (set1 (tuple2 (set1 (tuple2 d1 f1)) c1)) (t2tb3136 x))))

(declare-fun tb2t3136 (uni) (set (tuple21 (set (tuple21 d f)) c)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 d f)) c))))
  (! (= (tb2t3136 (t2tb3136 i)) i) :pattern ((t2tb3136 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 d1 f1)) c1)) j)
     (= (t2tb3136 (tb2t3136 j)) j)) :pattern ((t2tb3136 (tb2t3136 j))) )))

(declare-fun t2tb3137 ((tuple21 (set (tuple21 d f)) c)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 d f)) c))) (sort
  (tuple2 (set1 (tuple2 d1 f1)) c1) (t2tb3137 x))))

(declare-fun tb2t3137 (uni) (tuple21 (set (tuple21 d f)) c))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 d f)) c)))
  (! (= (tb2t3137 (t2tb3137 i)) i) :pattern ((t2tb3137 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 d1 f1)) c1) j)
     (= (t2tb3137 (tb2t3137 j)) j)) :pattern ((t2tb3137 (tb2t3137 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 d f)))) (t (set c)) (x (set (tuple21 d f)))
  (y c))
  (= (mem (tuple2 (set1 (tuple2 d1 f1)) c1)
  (Tuple2 (set1 (tuple2 d1 f1)) c1 (t2tb2938 x) (t2tb135 y))
  (times c1 (set1 (tuple2 d1 f1)) (t2tb2939 s) (t2tb132 t)))
  (and (mem41 x s) (mem7 y t)))))

(declare-fun t2tb3138 ((set (tuple21 (set (tuple21 d f)) (set (tuple21 a
  b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 d f)) (set (tuple21 a b)))))) (sort
  (set1 (tuple2 (set1 (tuple2 d1 f1)) (set1 (tuple2 a1 b1)))) (t2tb3138 x))))

(declare-fun tb2t3138 (uni) (set (tuple21 (set (tuple21 d f)) (set (tuple21 a
  b)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 d f)) (set (tuple21 a b))))))
  (! (= (tb2t3138 (t2tb3138 i)) i) :pattern ((t2tb3138 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 d1 f1)) (set1 (tuple2 a1 b1)))) j)
     (= (t2tb3138 (tb2t3138 j)) j)) :pattern ((t2tb3138 (tb2t3138 j))) )))

(declare-fun t2tb3139 ((tuple21 (set (tuple21 d f)) (set (tuple21 a
  b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 d f)) (set (tuple21 a b))))) (sort
  (tuple2 (set1 (tuple2 d1 f1)) (set1 (tuple2 a1 b1))) (t2tb3139 x))))

(declare-fun tb2t3139 (uni) (tuple21 (set (tuple21 d f)) (set (tuple21 a
  b))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 d f)) (set (tuple21 a b)))))
  (! (= (tb2t3139 (t2tb3139 i)) i) :pattern ((t2tb3139 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 d1 f1)) (set1 (tuple2 a1 b1))) j)
     (= (t2tb3139 (tb2t3139 j)) j)) :pattern ((t2tb3139 (tb2t3139 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 d f)))) (t (set (set (tuple21 a b))))
  (x (set (tuple21 d f))) (y (set (tuple21 a b))))
  (= (mem (tuple2 (set1 (tuple2 d1 f1)) (set1 (tuple2 a1 b1)))
  (Tuple2 (set1 (tuple2 d1 f1)) (set1 (tuple2 a1 b1)) (t2tb2938 x)
  (t2tb11 y))
  (times (set1 (tuple2 a1 b1)) (set1 (tuple2 d1 f1)) (t2tb2939 s) (t2tb10 t)))
  (and (mem41 x s) (mem4 y t)))))

(declare-fun t2tb3140 ((set (tuple21 (set (tuple21 d f)) (tuple21 a
  b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 d f)) (tuple21 a b))))) (sort
  (set1 (tuple2 (set1 (tuple2 d1 f1)) (tuple2 a1 b1))) (t2tb3140 x))))

(declare-fun tb2t3140 (uni) (set (tuple21 (set (tuple21 d f)) (tuple21 a
  b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 d f)) (tuple21 a b)))))
  (! (= (tb2t3140 (t2tb3140 i)) i) :pattern ((t2tb3140 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 d1 f1)) (tuple2 a1 b1))) j)
     (= (t2tb3140 (tb2t3140 j)) j)) :pattern ((t2tb3140 (tb2t3140 j))) )))

(declare-fun t2tb3141 ((tuple21 (set (tuple21 d f)) (tuple21 a b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 d f)) (tuple21 a b)))) (sort
  (tuple2 (set1 (tuple2 d1 f1)) (tuple2 a1 b1)) (t2tb3141 x))))

(declare-fun tb2t3141 (uni) (tuple21 (set (tuple21 d f)) (tuple21 a b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 d f)) (tuple21 a b))))
  (! (= (tb2t3141 (t2tb3141 i)) i) :pattern ((t2tb3141 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 d1 f1)) (tuple2 a1 b1)) j)
     (= (t2tb3141 (tb2t3141 j)) j)) :pattern ((t2tb3141 (tb2t3141 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 d f)))) (t (set (tuple21 a b)))
  (x (set (tuple21 d f))) (y (tuple21 a b)))
  (= (mem (tuple2 (set1 (tuple2 d1 f1)) (tuple2 a1 b1))
  (Tuple2 (set1 (tuple2 d1 f1)) (tuple2 a1 b1) (t2tb2938 x) (t2tb13 y))
  (times (tuple2 a1 b1) (set1 (tuple2 d1 f1)) (t2tb2939 s) (t2tb11 t)))
  (and (mem41 x s) (mem3 y t)))))

(declare-fun t2tb3142 ((set (tuple21 (set (tuple21 d f)) b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 d f)) b)))) (sort
  (set1 (tuple2 (set1 (tuple2 d1 f1)) b1)) (t2tb3142 x))))

(declare-fun tb2t3142 (uni) (set (tuple21 (set (tuple21 d f)) b)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 d f)) b))))
  (! (= (tb2t3142 (t2tb3142 i)) i) :pattern ((t2tb3142 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 d1 f1)) b1)) j)
     (= (t2tb3142 (tb2t3142 j)) j)) :pattern ((t2tb3142 (tb2t3142 j))) )))

(declare-fun t2tb3143 ((tuple21 (set (tuple21 d f)) b)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 d f)) b))) (sort
  (tuple2 (set1 (tuple2 d1 f1)) b1) (t2tb3143 x))))

(declare-fun tb2t3143 (uni) (tuple21 (set (tuple21 d f)) b))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 d f)) b)))
  (! (= (tb2t3143 (t2tb3143 i)) i) :pattern ((t2tb3143 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 d1 f1)) b1) j)
     (= (t2tb3143 (tb2t3143 j)) j)) :pattern ((t2tb3143 (tb2t3143 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 d f)))) (t (set b)) (x (set (tuple21 d f)))
  (y b))
  (= (mem (tuple2 (set1 (tuple2 d1 f1)) b1)
  (Tuple2 (set1 (tuple2 d1 f1)) b1 (t2tb2938 x) (t2tb14 y))
  (times b1 (set1 (tuple2 d1 f1)) (t2tb2939 s) (t2tb12 t)))
  (and (mem41 x s) (mem2 y t)))))

(declare-fun t2tb3144 ((set (tuple21 (set (tuple21 d f)) a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 d f)) a)))) (sort
  (set1 (tuple2 (set1 (tuple2 d1 f1)) a1)) (t2tb3144 x))))

(declare-fun tb2t3144 (uni) (set (tuple21 (set (tuple21 d f)) a)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 d f)) a))))
  (! (= (tb2t3144 (t2tb3144 i)) i) :pattern ((t2tb3144 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 d1 f1)) a1)) j)
     (= (t2tb3144 (tb2t3144 j)) j)) :pattern ((t2tb3144 (tb2t3144 j))) )))

(declare-fun t2tb3145 ((tuple21 (set (tuple21 d f)) a)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 d f)) a))) (sort
  (tuple2 (set1 (tuple2 d1 f1)) a1) (t2tb3145 x))))

(declare-fun tb2t3145 (uni) (tuple21 (set (tuple21 d f)) a))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 d f)) a)))
  (! (= (tb2t3145 (t2tb3145 i)) i) :pattern ((t2tb3145 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 d1 f1)) a1) j)
     (= (t2tb3145 (tb2t3145 j)) j)) :pattern ((t2tb3145 (tb2t3145 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 d f)))) (t (set a)) (x (set (tuple21 d f)))
  (y a))
  (= (mem (tuple2 (set1 (tuple2 d1 f1)) a1)
  (Tuple2 (set1 (tuple2 d1 f1)) a1 (t2tb2938 x) (t2tb2 y))
  (times a1 (set1 (tuple2 d1 f1)) (t2tb2939 s) (t2tb1 t)))
  (and (mem41 x s) (mem1 y t)))))

;; mem_times
  (assert
  (forall ((b2 ty))
  (forall ((s (set (set (tuple21 d f)))) (t uni) (x (set (tuple21 d f)))
  (y uni))
  (= (mem (tuple2 (set1 (tuple2 d1 f1)) b2)
  (Tuple2 (set1 (tuple2 d1 f1)) b2 (t2tb2938 x) y)
  (times b2 (set1 (tuple2 d1 f1)) (t2tb2939 s) t))
  (and (mem41 x s) (mem b2 y t))))))

(declare-fun t2tb3146 ((set (tuple21 (tuple21 d f) (tuple21 c f)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 d f) (tuple21 c f))))) (sort
  (set1 (tuple2 (tuple2 d1 f1) (tuple2 c1 f1))) (t2tb3146 x))))

(declare-fun tb2t3146 (uni) (set (tuple21 (tuple21 d f) (tuple21 c f))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 d f) (tuple21 c f)))))
  (! (= (tb2t3146 (t2tb3146 i)) i) :pattern ((t2tb3146 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 d1 f1) (tuple2 c1 f1))) j)
     (= (t2tb3146 (tb2t3146 j)) j)) :pattern ((t2tb3146 (tb2t3146 j))) )))

(declare-fun t2tb3147 ((tuple21 (tuple21 d f) (tuple21 c f))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 d f) (tuple21 c f)))) (sort
  (tuple2 (tuple2 d1 f1) (tuple2 c1 f1)) (t2tb3147 x))))

(declare-fun tb2t3147 (uni) (tuple21 (tuple21 d f) (tuple21 c f)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 d f) (tuple21 c f))))
  (! (= (tb2t3147 (t2tb3147 i)) i) :pattern ((t2tb3147 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 d1 f1) (tuple2 c1 f1)) j)
     (= (t2tb3147 (tb2t3147 j)) j)) :pattern ((t2tb3147 (tb2t3147 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 d f))) (t (set (tuple21 c f))) (x (tuple21 d f))
  (y (tuple21 c f)))
  (= (mem (tuple2 (tuple2 d1 f1) (tuple2 c1 f1))
  (Tuple2 (tuple2 d1 f1) (tuple2 c1 f1) (t2tb2952 x) (t2tb2948 y))
  (times (tuple2 c1 f1) (tuple2 d1 f1) (t2tb2938 s) (t2tb2942 t)))
  (and (mem40 x s) (mem45 y t)))))

(declare-fun t2tb3148 ((set (tuple21 (tuple21 d f) (tuple21 a e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 d f) (tuple21 a e))))) (sort
  (set1 (tuple2 (tuple2 d1 f1) (tuple2 a1 e1))) (t2tb3148 x))))

(declare-fun tb2t3148 (uni) (set (tuple21 (tuple21 d f) (tuple21 a e))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 d f) (tuple21 a e)))))
  (! (= (tb2t3148 (t2tb3148 i)) i) :pattern ((t2tb3148 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 d1 f1) (tuple2 a1 e1))) j)
     (= (t2tb3148 (tb2t3148 j)) j)) :pattern ((t2tb3148 (tb2t3148 j))) )))

(declare-fun t2tb3149 ((tuple21 (tuple21 d f) (tuple21 a e))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 d f) (tuple21 a e)))) (sort
  (tuple2 (tuple2 d1 f1) (tuple2 a1 e1)) (t2tb3149 x))))

(declare-fun tb2t3149 (uni) (tuple21 (tuple21 d f) (tuple21 a e)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 d f) (tuple21 a e))))
  (! (= (tb2t3149 (t2tb3149 i)) i) :pattern ((t2tb3149 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 d1 f1) (tuple2 a1 e1)) j)
     (= (t2tb3149 (tb2t3149 j)) j)) :pattern ((t2tb3149 (tb2t3149 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 d f))) (t (set (tuple21 a e))) (x (tuple21 d f))
  (y (tuple21 a e)))
  (= (mem (tuple2 (tuple2 d1 f1) (tuple2 a1 e1))
  (Tuple2 (tuple2 d1 f1) (tuple2 a1 e1) (t2tb2952 x) (t2tb2949 y))
  (times (tuple2 a1 e1) (tuple2 d1 f1) (t2tb2938 s) (t2tb2943 t)))
  (and (mem40 x s) (mem44 y t)))))

(declare-fun t2tb3150 ((set (tuple21 (tuple21 d f) (tuple21 (tuple21 b d)
  (tuple21 e f))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 d f) (tuple21 (tuple21 b d) (tuple21 e
  f)))))) (sort
  (set1 (tuple2 (tuple2 d1 f1) (tuple2 (tuple2 b1 d1) (tuple2 e1 f1))))
  (t2tb3150 x))))

(declare-fun tb2t3150 (uni) (set (tuple21 (tuple21 d f) (tuple21 (tuple21 b
  d) (tuple21 e f)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 d f) (tuple21 (tuple21 b d) (tuple21 e
  f)))))) (! (= (tb2t3150 (t2tb3150 i)) i) :pattern ((t2tb3150 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 d1 f1) (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)))) j)
     (= (t2tb3150 (tb2t3150 j)) j)) :pattern ((t2tb3150 (tb2t3150 j))) )))

(declare-fun t2tb3151 ((tuple21 (tuple21 d f) (tuple21 (tuple21 b d)
  (tuple21 e f)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 d f) (tuple21 (tuple21 b d) (tuple21 e f)))))
  (sort (tuple2 (tuple2 d1 f1) (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)))
  (t2tb3151 x))))

(declare-fun tb2t3151 (uni) (tuple21 (tuple21 d f) (tuple21 (tuple21 b d)
  (tuple21 e f))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 d f) (tuple21 (tuple21 b d) (tuple21 e f)))))
  (! (= (tb2t3151 (t2tb3151 i)) i) :pattern ((t2tb3151 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 d1 f1) (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)))
     j) (= (t2tb3151 (tb2t3151 j)) j)) :pattern ((t2tb3151 (tb2t3151 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 d f))) (t (set (tuple21 (tuple21 b d) (tuple21 e
  f)))) (x (tuple21 d f)) (y (tuple21 (tuple21 b d) (tuple21 e f))))
  (= (mem (tuple2 (tuple2 d1 f1) (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)))
  (Tuple2 (tuple2 d1 f1) (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (t2tb2952 x)
  (t2tb2950 y))
  (times (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (tuple2 d1 f1) (t2tb2938 s)
  (t2tb2944 t))) (and (mem40 x s) (mem43 y t)))))

(declare-fun t2tb3152 ((set (tuple21 (tuple21 d f) (tuple21 (tuple21 a c)
  (tuple21 e f))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 d f) (tuple21 (tuple21 a c) (tuple21 e
  f)))))) (sort
  (set1 (tuple2 (tuple2 d1 f1) (tuple2 (tuple2 a1 c1) (tuple2 e1 f1))))
  (t2tb3152 x))))

(declare-fun tb2t3152 (uni) (set (tuple21 (tuple21 d f) (tuple21 (tuple21 a
  c) (tuple21 e f)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 d f) (tuple21 (tuple21 a c) (tuple21 e
  f)))))) (! (= (tb2t3152 (t2tb3152 i)) i) :pattern ((t2tb3152 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 d1 f1) (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)))) j)
     (= (t2tb3152 (tb2t3152 j)) j)) :pattern ((t2tb3152 (tb2t3152 j))) )))

(declare-fun t2tb3153 ((tuple21 (tuple21 d f) (tuple21 (tuple21 a c)
  (tuple21 e f)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 d f) (tuple21 (tuple21 a c) (tuple21 e f)))))
  (sort (tuple2 (tuple2 d1 f1) (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)))
  (t2tb3153 x))))

(declare-fun tb2t3153 (uni) (tuple21 (tuple21 d f) (tuple21 (tuple21 a c)
  (tuple21 e f))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 d f) (tuple21 (tuple21 a c) (tuple21 e f)))))
  (! (= (tb2t3153 (t2tb3153 i)) i) :pattern ((t2tb3153 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 d1 f1) (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)))
     j) (= (t2tb3153 (tb2t3153 j)) j)) :pattern ((t2tb3153 (tb2t3153 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 d f))) (t (set (tuple21 (tuple21 a c) (tuple21 e
  f)))) (x (tuple21 d f)) (y (tuple21 (tuple21 a c) (tuple21 e f))))
  (= (mem (tuple2 (tuple2 d1 f1) (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)))
  (Tuple2 (tuple2 d1 f1) (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (t2tb2952 x)
  (t2tb2951 y))
  (times (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (tuple2 d1 f1) (t2tb2938 s)
  (t2tb2945 t))) (and (mem40 x s) (mem42 y t)))))

(declare-fun t2tb3154 ((set (tuple21 (tuple21 d f) (set (tuple21 d
  f))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 d f) (set (tuple21 d f)))))) (sort
  (set1 (tuple2 (tuple2 d1 f1) (set1 (tuple2 d1 f1)))) (t2tb3154 x))))

(declare-fun tb2t3154 (uni) (set (tuple21 (tuple21 d f) (set (tuple21 d
  f)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 d f) (set (tuple21 d f))))))
  (! (= (tb2t3154 (t2tb3154 i)) i) :pattern ((t2tb3154 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 d1 f1) (set1 (tuple2 d1 f1)))) j)
     (= (t2tb3154 (tb2t3154 j)) j)) :pattern ((t2tb3154 (tb2t3154 j))) )))

(declare-fun t2tb3155 ((tuple21 (tuple21 d f) (set (tuple21 d f)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 d f) (set (tuple21 d f))))) (sort
  (tuple2 (tuple2 d1 f1) (set1 (tuple2 d1 f1))) (t2tb3155 x))))

(declare-fun tb2t3155 (uni) (tuple21 (tuple21 d f) (set (tuple21 d f))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 d f) (set (tuple21 d f)))))
  (! (= (tb2t3155 (t2tb3155 i)) i) :pattern ((t2tb3155 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 d1 f1) (set1 (tuple2 d1 f1))) j)
     (= (t2tb3155 (tb2t3155 j)) j)) :pattern ((t2tb3155 (tb2t3155 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 d f))) (t (set (set (tuple21 d f))))
  (x (tuple21 d f)) (y (set (tuple21 d f))))
  (= (mem (tuple2 (tuple2 d1 f1) (set1 (tuple2 d1 f1)))
  (Tuple2 (tuple2 d1 f1) (set1 (tuple2 d1 f1)) (t2tb2952 x) (t2tb2938 y))
  (times (set1 (tuple2 d1 f1)) (tuple2 d1 f1) (t2tb2938 s) (t2tb2939 t)))
  (and (mem40 x s) (mem41 y t)))))

(declare-fun t2tb3156 ((set (tuple21 (tuple21 d f) (tuple21 d f)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 d f) (tuple21 d f))))) (sort
  (set1 (tuple2 (tuple2 d1 f1) (tuple2 d1 f1))) (t2tb3156 x))))

(declare-fun tb2t3156 (uni) (set (tuple21 (tuple21 d f) (tuple21 d f))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 d f) (tuple21 d f)))))
  (! (= (tb2t3156 (t2tb3156 i)) i) :pattern ((t2tb3156 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 d1 f1) (tuple2 d1 f1))) j)
     (= (t2tb3156 (tb2t3156 j)) j)) :pattern ((t2tb3156 (tb2t3156 j))) )))

(declare-fun t2tb3157 ((tuple21 (tuple21 d f) (tuple21 d f))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 d f) (tuple21 d f)))) (sort
  (tuple2 (tuple2 d1 f1) (tuple2 d1 f1)) (t2tb3157 x))))

(declare-fun tb2t3157 (uni) (tuple21 (tuple21 d f) (tuple21 d f)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 d f) (tuple21 d f))))
  (! (= (tb2t3157 (t2tb3157 i)) i) :pattern ((t2tb3157 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 d1 f1) (tuple2 d1 f1)) j)
     (= (t2tb3157 (tb2t3157 j)) j)) :pattern ((t2tb3157 (tb2t3157 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 d f))) (t (set (tuple21 d f))) (x (tuple21 d f))
  (y (tuple21 d f)))
  (= (mem (tuple2 (tuple2 d1 f1) (tuple2 d1 f1))
  (Tuple2 (tuple2 d1 f1) (tuple2 d1 f1) (t2tb2952 x) (t2tb2952 y))
  (times (tuple2 d1 f1) (tuple2 d1 f1) (t2tb2938 s) (t2tb2938 t)))
  (and (mem40 x s) (mem40 y t)))))

(declare-fun t2tb3158 ((set (tuple21 (tuple21 d f) (set (tuple21 b
  e))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 d f) (set (tuple21 b e)))))) (sort
  (set1 (tuple2 (tuple2 d1 f1) (set1 (tuple2 b1 e1)))) (t2tb3158 x))))

(declare-fun tb2t3158 (uni) (set (tuple21 (tuple21 d f) (set (tuple21 b
  e)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 d f) (set (tuple21 b e))))))
  (! (= (tb2t3158 (t2tb3158 i)) i) :pattern ((t2tb3158 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 d1 f1) (set1 (tuple2 b1 e1)))) j)
     (= (t2tb3158 (tb2t3158 j)) j)) :pattern ((t2tb3158 (tb2t3158 j))) )))

(declare-fun t2tb3159 ((tuple21 (tuple21 d f) (set (tuple21 b e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 d f) (set (tuple21 b e))))) (sort
  (tuple2 (tuple2 d1 f1) (set1 (tuple2 b1 e1))) (t2tb3159 x))))

(declare-fun tb2t3159 (uni) (tuple21 (tuple21 d f) (set (tuple21 b e))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 d f) (set (tuple21 b e)))))
  (! (= (tb2t3159 (t2tb3159 i)) i) :pattern ((t2tb3159 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 d1 f1) (set1 (tuple2 b1 e1))) j)
     (= (t2tb3159 (tb2t3159 j)) j)) :pattern ((t2tb3159 (tb2t3159 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 d f))) (t (set (set (tuple21 b e))))
  (x (tuple21 d f)) (y (set (tuple21 b e))))
  (= (mem (tuple2 (tuple2 d1 f1) (set1 (tuple2 b1 e1)))
  (Tuple2 (tuple2 d1 f1) (set1 (tuple2 b1 e1)) (t2tb2952 x) (t2tb2940 y))
  (times (set1 (tuple2 b1 e1)) (tuple2 d1 f1) (t2tb2938 s) (t2tb2941 t)))
  (and (mem40 x s) (mem39 y t)))))

(declare-fun t2tb3160 ((set (tuple21 (tuple21 d f) (tuple21 b e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 d f) (tuple21 b e))))) (sort
  (set1 (tuple2 (tuple2 d1 f1) (tuple2 b1 e1))) (t2tb3160 x))))

(declare-fun tb2t3160 (uni) (set (tuple21 (tuple21 d f) (tuple21 b e))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 d f) (tuple21 b e)))))
  (! (= (tb2t3160 (t2tb3160 i)) i) :pattern ((t2tb3160 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 d1 f1) (tuple2 b1 e1))) j)
     (= (t2tb3160 (tb2t3160 j)) j)) :pattern ((t2tb3160 (tb2t3160 j))) )))

(declare-fun t2tb3161 ((tuple21 (tuple21 d f) (tuple21 b e))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 d f) (tuple21 b e)))) (sort
  (tuple2 (tuple2 d1 f1) (tuple2 b1 e1)) (t2tb3161 x))))

(declare-fun tb2t3161 (uni) (tuple21 (tuple21 d f) (tuple21 b e)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 d f) (tuple21 b e))))
  (! (= (tb2t3161 (t2tb3161 i)) i) :pattern ((t2tb3161 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 d1 f1) (tuple2 b1 e1)) j)
     (= (t2tb3161 (tb2t3161 j)) j)) :pattern ((t2tb3161 (tb2t3161 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 d f))) (t (set (tuple21 b e))) (x (tuple21 d f))
  (y (tuple21 b e)))
  (= (mem (tuple2 (tuple2 d1 f1) (tuple2 b1 e1))
  (Tuple2 (tuple2 d1 f1) (tuple2 b1 e1) (t2tb2952 x) (t2tb2953 y))
  (times (tuple2 b1 e1) (tuple2 d1 f1) (t2tb2938 s) (t2tb2940 t)))
  (and (mem40 x s) (mem38 y t)))))

(declare-fun t2tb3162 ((set (tuple21 (tuple21 d f) f))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 d f) f)))) (sort
  (set1 (tuple2 (tuple2 d1 f1) f1)) (t2tb3162 x))))

(declare-fun tb2t3162 (uni) (set (tuple21 (tuple21 d f) f)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 d f) f))))
  (! (= (tb2t3162 (t2tb3162 i)) i) :pattern ((t2tb3162 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 d1 f1) f1)) j)
     (= (t2tb3162 (tb2t3162 j)) j)) :pattern ((t2tb3162 (tb2t3162 j))) )))

(declare-fun t2tb3163 ((tuple21 (tuple21 d f) f)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 d f) f))) (sort (tuple2 (tuple2 d1 f1) f1)
  (t2tb3163 x))))

(declare-fun tb2t3163 (uni) (tuple21 (tuple21 d f) f))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 d f) f)))
  (! (= (tb2t3163 (t2tb3163 i)) i) :pattern ((t2tb3163 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 d1 f1) f1) j) (= (t2tb3163 (tb2t3163 j)) j)) :pattern (
  (t2tb3163 (tb2t3163 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 d f))) (t (set f)) (x (tuple21 d f)) (y f))
  (= (mem (tuple2 (tuple2 d1 f1) f1)
  (Tuple2 (tuple2 d1 f1) f1 (t2tb2952 x) (t2tb2954 y))
  (times f1 (tuple2 d1 f1) (t2tb2938 s) (t2tb2946 t)))
  (and (mem40 x s) (mem37 y t)))))

(declare-fun t2tb3164 ((set (tuple21 (tuple21 d f) e))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 d f) e)))) (sort
  (set1 (tuple2 (tuple2 d1 f1) e1)) (t2tb3164 x))))

(declare-fun tb2t3164 (uni) (set (tuple21 (tuple21 d f) e)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 d f) e))))
  (! (= (tb2t3164 (t2tb3164 i)) i) :pattern ((t2tb3164 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 d1 f1) e1)) j)
     (= (t2tb3164 (tb2t3164 j)) j)) :pattern ((t2tb3164 (tb2t3164 j))) )))

(declare-fun t2tb3165 ((tuple21 (tuple21 d f) e)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 d f) e))) (sort (tuple2 (tuple2 d1 f1) e1)
  (t2tb3165 x))))

(declare-fun tb2t3165 (uni) (tuple21 (tuple21 d f) e))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 d f) e)))
  (! (= (tb2t3165 (t2tb3165 i)) i) :pattern ((t2tb3165 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 d1 f1) e1) j) (= (t2tb3165 (tb2t3165 j)) j)) :pattern (
  (t2tb3165 (tb2t3165 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 d f))) (t (set e)) (x (tuple21 d f)) (y e))
  (= (mem (tuple2 (tuple2 d1 f1) e1)
  (Tuple2 (tuple2 d1 f1) e1 (t2tb2952 x) (t2tb2955 y))
  (times e1 (tuple2 d1 f1) (t2tb2938 s) (t2tb2947 t)))
  (and (mem40 x s) (mem36 y t)))))

(declare-fun t2tb3166 ((set (tuple21 (tuple21 d f) (tuple21 (tuple21 a c)
  (tuple21 b d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 d f) (tuple21 (tuple21 a c) (tuple21 b
  d)))))) (sort
  (set1 (tuple2 (tuple2 d1 f1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))))
  (t2tb3166 x))))

(declare-fun tb2t3166 (uni) (set (tuple21 (tuple21 d f) (tuple21 (tuple21 a
  c) (tuple21 b d)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 d f) (tuple21 (tuple21 a c) (tuple21 b
  d)))))) (! (= (tb2t3166 (t2tb3166 i)) i) :pattern ((t2tb3166 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 d1 f1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))) j)
     (= (t2tb3166 (tb2t3166 j)) j)) :pattern ((t2tb3166 (tb2t3166 j))) )))

(declare-fun t2tb3167 ((tuple21 (tuple21 d f) (tuple21 (tuple21 a c)
  (tuple21 b d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 d f) (tuple21 (tuple21 a c) (tuple21 b d)))))
  (sort (tuple2 (tuple2 d1 f1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
  (t2tb3167 x))))

(declare-fun tb2t3167 (uni) (tuple21 (tuple21 d f) (tuple21 (tuple21 a c)
  (tuple21 b d))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 d f) (tuple21 (tuple21 a c) (tuple21 b d)))))
  (! (= (tb2t3167 (t2tb3167 i)) i) :pattern ((t2tb3167 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 d1 f1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
     j) (= (t2tb3167 (tb2t3167 j)) j)) :pattern ((t2tb3167 (tb2t3167 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 d f))) (t (set (tuple21 (tuple21 a c) (tuple21 b
  d)))) (x (tuple21 d f)) (y (tuple21 (tuple21 a c) (tuple21 b d))))
  (= (mem (tuple2 (tuple2 d1 f1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
  (Tuple2 (tuple2 d1 f1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb2952 x)
  (t2tb691 y))
  (times (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 d1 f1) (t2tb2938 s)
  (t2tb686 t))) (and (mem40 x s) (mem24 y t)))))

(declare-fun t2tb3168 ((set (tuple21 (tuple21 d f) (set (tuple21 c
  d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 d f) (set (tuple21 c d)))))) (sort
  (set1 (tuple2 (tuple2 d1 f1) (set1 (tuple2 c1 d1)))) (t2tb3168 x))))

(declare-fun tb2t3168 (uni) (set (tuple21 (tuple21 d f) (set (tuple21 c
  d)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 d f) (set (tuple21 c d))))))
  (! (= (tb2t3168 (t2tb3168 i)) i) :pattern ((t2tb3168 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 d1 f1) (set1 (tuple2 c1 d1)))) j)
     (= (t2tb3168 (tb2t3168 j)) j)) :pattern ((t2tb3168 (tb2t3168 j))) )))

(declare-fun t2tb3169 ((tuple21 (tuple21 d f) (set (tuple21 c d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 d f) (set (tuple21 c d))))) (sort
  (tuple2 (tuple2 d1 f1) (set1 (tuple2 c1 d1))) (t2tb3169 x))))

(declare-fun tb2t3169 (uni) (tuple21 (tuple21 d f) (set (tuple21 c d))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 d f) (set (tuple21 c d)))))
  (! (= (tb2t3169 (t2tb3169 i)) i) :pattern ((t2tb3169 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 d1 f1) (set1 (tuple2 c1 d1))) j)
     (= (t2tb3169 (tb2t3169 j)) j)) :pattern ((t2tb3169 (tb2t3169 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 d f))) (t (set (set (tuple21 c d))))
  (x (tuple21 d f)) (y (set (tuple21 c d))))
  (= (mem (tuple2 (tuple2 d1 f1) (set1 (tuple2 c1 d1)))
  (Tuple2 (tuple2 d1 f1) (set1 (tuple2 c1 d1)) (t2tb2952 x) (t2tb689 y))
  (times (set1 (tuple2 c1 d1)) (tuple2 d1 f1) (t2tb2938 s) (t2tb688 t)))
  (and (mem40 x s) (mem22 y t)))))

(declare-fun t2tb3170 ((set (tuple21 (tuple21 d f) (tuple21 c d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 d f) (tuple21 c d))))) (sort
  (set1 (tuple2 (tuple2 d1 f1) (tuple2 c1 d1))) (t2tb3170 x))))

(declare-fun tb2t3170 (uni) (set (tuple21 (tuple21 d f) (tuple21 c d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 d f) (tuple21 c d)))))
  (! (= (tb2t3170 (t2tb3170 i)) i) :pattern ((t2tb3170 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 d1 f1) (tuple2 c1 d1))) j)
     (= (t2tb3170 (tb2t3170 j)) j)) :pattern ((t2tb3170 (tb2t3170 j))) )))

(declare-fun t2tb3171 ((tuple21 (tuple21 d f) (tuple21 c d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 d f) (tuple21 c d)))) (sort
  (tuple2 (tuple2 d1 f1) (tuple2 c1 d1)) (t2tb3171 x))))

(declare-fun tb2t3171 (uni) (tuple21 (tuple21 d f) (tuple21 c d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 d f) (tuple21 c d))))
  (! (= (tb2t3171 (t2tb3171 i)) i) :pattern ((t2tb3171 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 d1 f1) (tuple2 c1 d1)) j)
     (= (t2tb3171 (tb2t3171 j)) j)) :pattern ((t2tb3171 (tb2t3171 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 d f))) (t (set (tuple21 c d))) (x (tuple21 d f))
  (y (tuple21 c d)))
  (= (mem (tuple2 (tuple2 d1 f1) (tuple2 c1 d1))
  (Tuple2 (tuple2 d1 f1) (tuple2 c1 d1) (t2tb2952 x) (t2tb693 y))
  (times (tuple2 c1 d1) (tuple2 d1 f1) (t2tb2938 s) (t2tb689 t)))
  (and (mem40 x s) (mem21 y t)))))

(declare-fun t2tb3172 ((set (tuple21 (tuple21 d f) d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 d f) d)))) (sort
  (set1 (tuple2 (tuple2 d1 f1) d1)) (t2tb3172 x))))

(declare-fun tb2t3172 (uni) (set (tuple21 (tuple21 d f) d)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 d f) d))))
  (! (= (tb2t3172 (t2tb3172 i)) i) :pattern ((t2tb3172 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 d1 f1) d1)) j)
     (= (t2tb3172 (tb2t3172 j)) j)) :pattern ((t2tb3172 (tb2t3172 j))) )))

(declare-fun t2tb3173 ((tuple21 (tuple21 d f) d)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 d f) d))) (sort (tuple2 (tuple2 d1 f1) d1)
  (t2tb3173 x))))

(declare-fun tb2t3173 (uni) (tuple21 (tuple21 d f) d))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 d f) d)))
  (! (= (tb2t3173 (t2tb3173 i)) i) :pattern ((t2tb3173 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 d1 f1) d1) j) (= (t2tb3173 (tb2t3173 j)) j)) :pattern (
  (t2tb3173 (tb2t3173 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 d f))) (t (set d)) (x (tuple21 d f)) (y d))
  (= (mem (tuple2 (tuple2 d1 f1) d1)
  (Tuple2 (tuple2 d1 f1) d1 (t2tb2952 x) (t2tb694 y))
  (times d1 (tuple2 d1 f1) (t2tb2938 s) (t2tb690 t)))
  (and (mem40 x s) (mem20 y t)))))

(declare-fun t2tb3174 ((set (tuple21 (tuple21 d f) c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 d f) c)))) (sort
  (set1 (tuple2 (tuple2 d1 f1) c1)) (t2tb3174 x))))

(declare-fun tb2t3174 (uni) (set (tuple21 (tuple21 d f) c)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 d f) c))))
  (! (= (tb2t3174 (t2tb3174 i)) i) :pattern ((t2tb3174 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 d1 f1) c1)) j)
     (= (t2tb3174 (tb2t3174 j)) j)) :pattern ((t2tb3174 (tb2t3174 j))) )))

(declare-fun t2tb3175 ((tuple21 (tuple21 d f) c)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 d f) c))) (sort (tuple2 (tuple2 d1 f1) c1)
  (t2tb3175 x))))

(declare-fun tb2t3175 (uni) (tuple21 (tuple21 d f) c))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 d f) c)))
  (! (= (tb2t3175 (t2tb3175 i)) i) :pattern ((t2tb3175 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 d1 f1) c1) j) (= (t2tb3175 (tb2t3175 j)) j)) :pattern (
  (t2tb3175 (tb2t3175 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 d f))) (t (set c)) (x (tuple21 d f)) (y c))
  (= (mem (tuple2 (tuple2 d1 f1) c1)
  (Tuple2 (tuple2 d1 f1) c1 (t2tb2952 x) (t2tb135 y))
  (times c1 (tuple2 d1 f1) (t2tb2938 s) (t2tb132 t)))
  (and (mem40 x s) (mem7 y t)))))

(declare-fun t2tb3176 ((set (tuple21 (tuple21 d f) (set (tuple21 a
  b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 d f) (set (tuple21 a b)))))) (sort
  (set1 (tuple2 (tuple2 d1 f1) (set1 (tuple2 a1 b1)))) (t2tb3176 x))))

(declare-fun tb2t3176 (uni) (set (tuple21 (tuple21 d f) (set (tuple21 a
  b)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 d f) (set (tuple21 a b))))))
  (! (= (tb2t3176 (t2tb3176 i)) i) :pattern ((t2tb3176 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 d1 f1) (set1 (tuple2 a1 b1)))) j)
     (= (t2tb3176 (tb2t3176 j)) j)) :pattern ((t2tb3176 (tb2t3176 j))) )))

(declare-fun t2tb3177 ((tuple21 (tuple21 d f) (set (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 d f) (set (tuple21 a b))))) (sort
  (tuple2 (tuple2 d1 f1) (set1 (tuple2 a1 b1))) (t2tb3177 x))))

(declare-fun tb2t3177 (uni) (tuple21 (tuple21 d f) (set (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 d f) (set (tuple21 a b)))))
  (! (= (tb2t3177 (t2tb3177 i)) i) :pattern ((t2tb3177 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 d1 f1) (set1 (tuple2 a1 b1))) j)
     (= (t2tb3177 (tb2t3177 j)) j)) :pattern ((t2tb3177 (tb2t3177 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 d f))) (t (set (set (tuple21 a b))))
  (x (tuple21 d f)) (y (set (tuple21 a b))))
  (= (mem (tuple2 (tuple2 d1 f1) (set1 (tuple2 a1 b1)))
  (Tuple2 (tuple2 d1 f1) (set1 (tuple2 a1 b1)) (t2tb2952 x) (t2tb11 y))
  (times (set1 (tuple2 a1 b1)) (tuple2 d1 f1) (t2tb2938 s) (t2tb10 t)))
  (and (mem40 x s) (mem4 y t)))))

(declare-fun t2tb3178 ((set (tuple21 (tuple21 d f) (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 d f) (tuple21 a b))))) (sort
  (set1 (tuple2 (tuple2 d1 f1) (tuple2 a1 b1))) (t2tb3178 x))))

(declare-fun tb2t3178 (uni) (set (tuple21 (tuple21 d f) (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 d f) (tuple21 a b)))))
  (! (= (tb2t3178 (t2tb3178 i)) i) :pattern ((t2tb3178 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 d1 f1) (tuple2 a1 b1))) j)
     (= (t2tb3178 (tb2t3178 j)) j)) :pattern ((t2tb3178 (tb2t3178 j))) )))

(declare-fun t2tb3179 ((tuple21 (tuple21 d f) (tuple21 a b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 d f) (tuple21 a b)))) (sort
  (tuple2 (tuple2 d1 f1) (tuple2 a1 b1)) (t2tb3179 x))))

(declare-fun tb2t3179 (uni) (tuple21 (tuple21 d f) (tuple21 a b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 d f) (tuple21 a b))))
  (! (= (tb2t3179 (t2tb3179 i)) i) :pattern ((t2tb3179 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 d1 f1) (tuple2 a1 b1)) j)
     (= (t2tb3179 (tb2t3179 j)) j)) :pattern ((t2tb3179 (tb2t3179 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 d f))) (t (set (tuple21 a b))) (x (tuple21 d f))
  (y (tuple21 a b)))
  (= (mem (tuple2 (tuple2 d1 f1) (tuple2 a1 b1))
  (Tuple2 (tuple2 d1 f1) (tuple2 a1 b1) (t2tb2952 x) (t2tb13 y))
  (times (tuple2 a1 b1) (tuple2 d1 f1) (t2tb2938 s) (t2tb11 t)))
  (and (mem40 x s) (mem3 y t)))))

(declare-fun t2tb3180 ((set (tuple21 (tuple21 d f) b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 d f) b)))) (sort
  (set1 (tuple2 (tuple2 d1 f1) b1)) (t2tb3180 x))))

(declare-fun tb2t3180 (uni) (set (tuple21 (tuple21 d f) b)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 d f) b))))
  (! (= (tb2t3180 (t2tb3180 i)) i) :pattern ((t2tb3180 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 d1 f1) b1)) j)
     (= (t2tb3180 (tb2t3180 j)) j)) :pattern ((t2tb3180 (tb2t3180 j))) )))

(declare-fun t2tb3181 ((tuple21 (tuple21 d f) b)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 d f) b))) (sort (tuple2 (tuple2 d1 f1) b1)
  (t2tb3181 x))))

(declare-fun tb2t3181 (uni) (tuple21 (tuple21 d f) b))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 d f) b)))
  (! (= (tb2t3181 (t2tb3181 i)) i) :pattern ((t2tb3181 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 d1 f1) b1) j) (= (t2tb3181 (tb2t3181 j)) j)) :pattern (
  (t2tb3181 (tb2t3181 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 d f))) (t (set b)) (x (tuple21 d f)) (y b))
  (= (mem (tuple2 (tuple2 d1 f1) b1)
  (Tuple2 (tuple2 d1 f1) b1 (t2tb2952 x) (t2tb14 y))
  (times b1 (tuple2 d1 f1) (t2tb2938 s) (t2tb12 t)))
  (and (mem40 x s) (mem2 y t)))))

(declare-fun t2tb3182 ((set (tuple21 (tuple21 d f) a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 d f) a)))) (sort
  (set1 (tuple2 (tuple2 d1 f1) a1)) (t2tb3182 x))))

(declare-fun tb2t3182 (uni) (set (tuple21 (tuple21 d f) a)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 d f) a))))
  (! (= (tb2t3182 (t2tb3182 i)) i) :pattern ((t2tb3182 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 d1 f1) a1)) j)
     (= (t2tb3182 (tb2t3182 j)) j)) :pattern ((t2tb3182 (tb2t3182 j))) )))

(declare-fun t2tb3183 ((tuple21 (tuple21 d f) a)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 d f) a))) (sort (tuple2 (tuple2 d1 f1) a1)
  (t2tb3183 x))))

(declare-fun tb2t3183 (uni) (tuple21 (tuple21 d f) a))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 d f) a)))
  (! (= (tb2t3183 (t2tb3183 i)) i) :pattern ((t2tb3183 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 d1 f1) a1) j) (= (t2tb3183 (tb2t3183 j)) j)) :pattern (
  (t2tb3183 (tb2t3183 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 d f))) (t (set a)) (x (tuple21 d f)) (y a))
  (= (mem (tuple2 (tuple2 d1 f1) a1)
  (Tuple2 (tuple2 d1 f1) a1 (t2tb2952 x) (t2tb2 y))
  (times a1 (tuple2 d1 f1) (t2tb2938 s) (t2tb1 t)))
  (and (mem40 x s) (mem1 y t)))))

;; mem_times
  (assert
  (forall ((b2 ty))
  (forall ((s (set (tuple21 d f))) (t uni) (x (tuple21 d f)) (y uni))
  (= (mem (tuple2 (tuple2 d1 f1) b2)
  (Tuple2 (tuple2 d1 f1) b2 (t2tb2952 x) y)
  (times b2 (tuple2 d1 f1) (t2tb2938 s) t)) (and (mem40 x s) (mem b2 y t))))))

(declare-fun t2tb3184 ((set (tuple21 (set (tuple21 b e)) (tuple21 c
  f)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 b e)) (tuple21 c f))))) (sort
  (set1 (tuple2 (set1 (tuple2 b1 e1)) (tuple2 c1 f1))) (t2tb3184 x))))

(declare-fun tb2t3184 (uni) (set (tuple21 (set (tuple21 b e)) (tuple21 c
  f))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 b e)) (tuple21 c f)))))
  (! (= (tb2t3184 (t2tb3184 i)) i) :pattern ((t2tb3184 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 b1 e1)) (tuple2 c1 f1))) j)
     (= (t2tb3184 (tb2t3184 j)) j)) :pattern ((t2tb3184 (tb2t3184 j))) )))

(declare-fun t2tb3185 ((tuple21 (set (tuple21 b e)) (tuple21 c f))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 b e)) (tuple21 c f)))) (sort
  (tuple2 (set1 (tuple2 b1 e1)) (tuple2 c1 f1)) (t2tb3185 x))))

(declare-fun tb2t3185 (uni) (tuple21 (set (tuple21 b e)) (tuple21 c f)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 b e)) (tuple21 c f))))
  (! (= (tb2t3185 (t2tb3185 i)) i) :pattern ((t2tb3185 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 b1 e1)) (tuple2 c1 f1)) j)
     (= (t2tb3185 (tb2t3185 j)) j)) :pattern ((t2tb3185 (tb2t3185 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 b e)))) (t (set (tuple21 c f)))
  (x (set (tuple21 b e))) (y (tuple21 c f)))
  (= (mem (tuple2 (set1 (tuple2 b1 e1)) (tuple2 c1 f1))
  (Tuple2 (set1 (tuple2 b1 e1)) (tuple2 c1 f1) (t2tb2940 x) (t2tb2948 y))
  (times (tuple2 c1 f1) (set1 (tuple2 b1 e1)) (t2tb2941 s) (t2tb2942 t)))
  (and (mem39 x s) (mem45 y t)))))

(declare-fun t2tb3186 ((set (tuple21 (set (tuple21 b e)) (tuple21 a
  e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 b e)) (tuple21 a e))))) (sort
  (set1 (tuple2 (set1 (tuple2 b1 e1)) (tuple2 a1 e1))) (t2tb3186 x))))

(declare-fun tb2t3186 (uni) (set (tuple21 (set (tuple21 b e)) (tuple21 a
  e))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 b e)) (tuple21 a e)))))
  (! (= (tb2t3186 (t2tb3186 i)) i) :pattern ((t2tb3186 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 b1 e1)) (tuple2 a1 e1))) j)
     (= (t2tb3186 (tb2t3186 j)) j)) :pattern ((t2tb3186 (tb2t3186 j))) )))

(declare-fun t2tb3187 ((tuple21 (set (tuple21 b e)) (tuple21 a e))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 b e)) (tuple21 a e)))) (sort
  (tuple2 (set1 (tuple2 b1 e1)) (tuple2 a1 e1)) (t2tb3187 x))))

(declare-fun tb2t3187 (uni) (tuple21 (set (tuple21 b e)) (tuple21 a e)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 b e)) (tuple21 a e))))
  (! (= (tb2t3187 (t2tb3187 i)) i) :pattern ((t2tb3187 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 b1 e1)) (tuple2 a1 e1)) j)
     (= (t2tb3187 (tb2t3187 j)) j)) :pattern ((t2tb3187 (tb2t3187 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 b e)))) (t (set (tuple21 a e)))
  (x (set (tuple21 b e))) (y (tuple21 a e)))
  (= (mem (tuple2 (set1 (tuple2 b1 e1)) (tuple2 a1 e1))
  (Tuple2 (set1 (tuple2 b1 e1)) (tuple2 a1 e1) (t2tb2940 x) (t2tb2949 y))
  (times (tuple2 a1 e1) (set1 (tuple2 b1 e1)) (t2tb2941 s) (t2tb2943 t)))
  (and (mem39 x s) (mem44 y t)))))

(declare-fun t2tb3188 ((set (tuple21 (set (tuple21 b e)) (tuple21 (tuple21 b
  d) (tuple21 e f))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 b e)) (tuple21 (tuple21 b d)
  (tuple21 e f)))))) (sort
  (set1
  (tuple2 (set1 (tuple2 b1 e1)) (tuple2 (tuple2 b1 d1) (tuple2 e1 f1))))
  (t2tb3188 x))))

(declare-fun tb2t3188 (uni) (set (tuple21 (set (tuple21 b e))
  (tuple21 (tuple21 b d) (tuple21 e f)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 b e)) (tuple21 (tuple21 b d)
  (tuple21 e f))))))
  (! (= (tb2t3188 (t2tb3188 i)) i) :pattern ((t2tb3188 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (tuple2 (set1 (tuple2 b1 e1)) (tuple2 (tuple2 b1 d1) (tuple2 e1 f1))))
     j) (= (t2tb3188 (tb2t3188 j)) j)) :pattern ((t2tb3188 (tb2t3188 j))) )))

(declare-fun t2tb3189 ((tuple21 (set (tuple21 b e)) (tuple21 (tuple21 b d)
  (tuple21 e f)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 b e)) (tuple21 (tuple21 b d) (tuple21 e
  f))))) (sort
  (tuple2 (set1 (tuple2 b1 e1)) (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)))
  (t2tb3189 x))))

(declare-fun tb2t3189 (uni) (tuple21 (set (tuple21 b e)) (tuple21 (tuple21 b
  d) (tuple21 e f))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 b e)) (tuple21 (tuple21 b d) (tuple21 e
  f))))) (! (= (tb2t3189 (t2tb3189 i)) i) :pattern ((t2tb3189 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (tuple2 (set1 (tuple2 b1 e1)) (tuple2 (tuple2 b1 d1) (tuple2 e1 f1))) j)
     (= (t2tb3189 (tb2t3189 j)) j)) :pattern ((t2tb3189 (tb2t3189 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 b e)))) (t (set (tuple21 (tuple21 b d)
  (tuple21 e f)))) (x (set (tuple21 b e))) (y (tuple21 (tuple21 b d)
  (tuple21 e f))))
  (= (mem
  (tuple2 (set1 (tuple2 b1 e1)) (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)))
  (Tuple2 (set1 (tuple2 b1 e1)) (tuple2 (tuple2 b1 d1) (tuple2 e1 f1))
  (t2tb2940 x) (t2tb2950 y))
  (times (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (set1 (tuple2 b1 e1))
  (t2tb2941 s) (t2tb2944 t))) (and (mem39 x s) (mem43 y t)))))

(declare-fun t2tb3190 ((set (tuple21 (set (tuple21 b e)) (tuple21 (tuple21 a
  c) (tuple21 e f))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 b e)) (tuple21 (tuple21 a c)
  (tuple21 e f)))))) (sort
  (set1
  (tuple2 (set1 (tuple2 b1 e1)) (tuple2 (tuple2 a1 c1) (tuple2 e1 f1))))
  (t2tb3190 x))))

(declare-fun tb2t3190 (uni) (set (tuple21 (set (tuple21 b e))
  (tuple21 (tuple21 a c) (tuple21 e f)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 b e)) (tuple21 (tuple21 a c)
  (tuple21 e f))))))
  (! (= (tb2t3190 (t2tb3190 i)) i) :pattern ((t2tb3190 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (tuple2 (set1 (tuple2 b1 e1)) (tuple2 (tuple2 a1 c1) (tuple2 e1 f1))))
     j) (= (t2tb3190 (tb2t3190 j)) j)) :pattern ((t2tb3190 (tb2t3190 j))) )))

(declare-fun t2tb3191 ((tuple21 (set (tuple21 b e)) (tuple21 (tuple21 a c)
  (tuple21 e f)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 b e)) (tuple21 (tuple21 a c) (tuple21 e
  f))))) (sort
  (tuple2 (set1 (tuple2 b1 e1)) (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)))
  (t2tb3191 x))))

(declare-fun tb2t3191 (uni) (tuple21 (set (tuple21 b e)) (tuple21 (tuple21 a
  c) (tuple21 e f))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 b e)) (tuple21 (tuple21 a c) (tuple21 e
  f))))) (! (= (tb2t3191 (t2tb3191 i)) i) :pattern ((t2tb3191 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (tuple2 (set1 (tuple2 b1 e1)) (tuple2 (tuple2 a1 c1) (tuple2 e1 f1))) j)
     (= (t2tb3191 (tb2t3191 j)) j)) :pattern ((t2tb3191 (tb2t3191 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 b e)))) (t (set (tuple21 (tuple21 a c)
  (tuple21 e f)))) (x (set (tuple21 b e))) (y (tuple21 (tuple21 a c)
  (tuple21 e f))))
  (= (mem
  (tuple2 (set1 (tuple2 b1 e1)) (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)))
  (Tuple2 (set1 (tuple2 b1 e1)) (tuple2 (tuple2 a1 c1) (tuple2 e1 f1))
  (t2tb2940 x) (t2tb2951 y))
  (times (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (set1 (tuple2 b1 e1))
  (t2tb2941 s) (t2tb2945 t))) (and (mem39 x s) (mem42 y t)))))

(declare-fun t2tb3192 ((set (tuple21 (set (tuple21 b e)) (set (tuple21 d
  f))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 b e)) (set (tuple21 d f)))))) (sort
  (set1 (tuple2 (set1 (tuple2 b1 e1)) (set1 (tuple2 d1 f1)))) (t2tb3192 x))))

(declare-fun tb2t3192 (uni) (set (tuple21 (set (tuple21 b e)) (set (tuple21 d
  f)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 b e)) (set (tuple21 d f))))))
  (! (= (tb2t3192 (t2tb3192 i)) i) :pattern ((t2tb3192 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 b1 e1)) (set1 (tuple2 d1 f1)))) j)
     (= (t2tb3192 (tb2t3192 j)) j)) :pattern ((t2tb3192 (tb2t3192 j))) )))

(declare-fun t2tb3193 ((tuple21 (set (tuple21 b e)) (set (tuple21 d
  f)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 b e)) (set (tuple21 d f))))) (sort
  (tuple2 (set1 (tuple2 b1 e1)) (set1 (tuple2 d1 f1))) (t2tb3193 x))))

(declare-fun tb2t3193 (uni) (tuple21 (set (tuple21 b e)) (set (tuple21 d
  f))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 b e)) (set (tuple21 d f)))))
  (! (= (tb2t3193 (t2tb3193 i)) i) :pattern ((t2tb3193 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 b1 e1)) (set1 (tuple2 d1 f1))) j)
     (= (t2tb3193 (tb2t3193 j)) j)) :pattern ((t2tb3193 (tb2t3193 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 b e)))) (t (set (set (tuple21 d f))))
  (x (set (tuple21 b e))) (y (set (tuple21 d f))))
  (= (mem (tuple2 (set1 (tuple2 b1 e1)) (set1 (tuple2 d1 f1)))
  (Tuple2 (set1 (tuple2 b1 e1)) (set1 (tuple2 d1 f1)) (t2tb2940 x)
  (t2tb2938 y))
  (times (set1 (tuple2 d1 f1)) (set1 (tuple2 b1 e1)) (t2tb2941 s)
  (t2tb2939 t))) (and (mem39 x s) (mem41 y t)))))

(declare-fun t2tb3194 ((set (tuple21 (set (tuple21 b e)) (tuple21 d
  f)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 b e)) (tuple21 d f))))) (sort
  (set1 (tuple2 (set1 (tuple2 b1 e1)) (tuple2 d1 f1))) (t2tb3194 x))))

(declare-fun tb2t3194 (uni) (set (tuple21 (set (tuple21 b e)) (tuple21 d
  f))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 b e)) (tuple21 d f)))))
  (! (= (tb2t3194 (t2tb3194 i)) i) :pattern ((t2tb3194 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 b1 e1)) (tuple2 d1 f1))) j)
     (= (t2tb3194 (tb2t3194 j)) j)) :pattern ((t2tb3194 (tb2t3194 j))) )))

(declare-fun t2tb3195 ((tuple21 (set (tuple21 b e)) (tuple21 d f))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 b e)) (tuple21 d f)))) (sort
  (tuple2 (set1 (tuple2 b1 e1)) (tuple2 d1 f1)) (t2tb3195 x))))

(declare-fun tb2t3195 (uni) (tuple21 (set (tuple21 b e)) (tuple21 d f)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 b e)) (tuple21 d f))))
  (! (= (tb2t3195 (t2tb3195 i)) i) :pattern ((t2tb3195 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 b1 e1)) (tuple2 d1 f1)) j)
     (= (t2tb3195 (tb2t3195 j)) j)) :pattern ((t2tb3195 (tb2t3195 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 b e)))) (t (set (tuple21 d f)))
  (x (set (tuple21 b e))) (y (tuple21 d f)))
  (= (mem (tuple2 (set1 (tuple2 b1 e1)) (tuple2 d1 f1))
  (Tuple2 (set1 (tuple2 b1 e1)) (tuple2 d1 f1) (t2tb2940 x) (t2tb2952 y))
  (times (tuple2 d1 f1) (set1 (tuple2 b1 e1)) (t2tb2941 s) (t2tb2938 t)))
  (and (mem39 x s) (mem40 y t)))))

(declare-fun t2tb3196 ((set (tuple21 (set (tuple21 b e)) (set (tuple21 b
  e))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 b e)) (set (tuple21 b e)))))) (sort
  (set1 (tuple2 (set1 (tuple2 b1 e1)) (set1 (tuple2 b1 e1)))) (t2tb3196 x))))

(declare-fun tb2t3196 (uni) (set (tuple21 (set (tuple21 b e)) (set (tuple21 b
  e)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 b e)) (set (tuple21 b e))))))
  (! (= (tb2t3196 (t2tb3196 i)) i) :pattern ((t2tb3196 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 b1 e1)) (set1 (tuple2 b1 e1)))) j)
     (= (t2tb3196 (tb2t3196 j)) j)) :pattern ((t2tb3196 (tb2t3196 j))) )))

(declare-fun t2tb3197 ((tuple21 (set (tuple21 b e)) (set (tuple21 b
  e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 b e)) (set (tuple21 b e))))) (sort
  (tuple2 (set1 (tuple2 b1 e1)) (set1 (tuple2 b1 e1))) (t2tb3197 x))))

(declare-fun tb2t3197 (uni) (tuple21 (set (tuple21 b e)) (set (tuple21 b
  e))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 b e)) (set (tuple21 b e)))))
  (! (= (tb2t3197 (t2tb3197 i)) i) :pattern ((t2tb3197 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 b1 e1)) (set1 (tuple2 b1 e1))) j)
     (= (t2tb3197 (tb2t3197 j)) j)) :pattern ((t2tb3197 (tb2t3197 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 b e)))) (t (set (set (tuple21 b e))))
  (x (set (tuple21 b e))) (y (set (tuple21 b e))))
  (= (mem (tuple2 (set1 (tuple2 b1 e1)) (set1 (tuple2 b1 e1)))
  (Tuple2 (set1 (tuple2 b1 e1)) (set1 (tuple2 b1 e1)) (t2tb2940 x)
  (t2tb2940 y))
  (times (set1 (tuple2 b1 e1)) (set1 (tuple2 b1 e1)) (t2tb2941 s)
  (t2tb2941 t))) (and (mem39 x s) (mem39 y t)))))

(declare-fun t2tb3198 ((set (tuple21 (set (tuple21 b e)) (tuple21 b
  e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 b e)) (tuple21 b e))))) (sort
  (set1 (tuple2 (set1 (tuple2 b1 e1)) (tuple2 b1 e1))) (t2tb3198 x))))

(declare-fun tb2t3198 (uni) (set (tuple21 (set (tuple21 b e)) (tuple21 b
  e))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 b e)) (tuple21 b e)))))
  (! (= (tb2t3198 (t2tb3198 i)) i) :pattern ((t2tb3198 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 b1 e1)) (tuple2 b1 e1))) j)
     (= (t2tb3198 (tb2t3198 j)) j)) :pattern ((t2tb3198 (tb2t3198 j))) )))

(declare-fun t2tb3199 ((tuple21 (set (tuple21 b e)) (tuple21 b e))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 b e)) (tuple21 b e)))) (sort
  (tuple2 (set1 (tuple2 b1 e1)) (tuple2 b1 e1)) (t2tb3199 x))))

(declare-fun tb2t3199 (uni) (tuple21 (set (tuple21 b e)) (tuple21 b e)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 b e)) (tuple21 b e))))
  (! (= (tb2t3199 (t2tb3199 i)) i) :pattern ((t2tb3199 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 b1 e1)) (tuple2 b1 e1)) j)
     (= (t2tb3199 (tb2t3199 j)) j)) :pattern ((t2tb3199 (tb2t3199 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 b e)))) (t (set (tuple21 b e)))
  (x (set (tuple21 b e))) (y (tuple21 b e)))
  (= (mem (tuple2 (set1 (tuple2 b1 e1)) (tuple2 b1 e1))
  (Tuple2 (set1 (tuple2 b1 e1)) (tuple2 b1 e1) (t2tb2940 x) (t2tb2953 y))
  (times (tuple2 b1 e1) (set1 (tuple2 b1 e1)) (t2tb2941 s) (t2tb2940 t)))
  (and (mem39 x s) (mem38 y t)))))

(declare-fun t2tb3200 ((set (tuple21 (set (tuple21 b e)) f))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 b e)) f)))) (sort
  (set1 (tuple2 (set1 (tuple2 b1 e1)) f1)) (t2tb3200 x))))

(declare-fun tb2t3200 (uni) (set (tuple21 (set (tuple21 b e)) f)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 b e)) f))))
  (! (= (tb2t3200 (t2tb3200 i)) i) :pattern ((t2tb3200 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 b1 e1)) f1)) j)
     (= (t2tb3200 (tb2t3200 j)) j)) :pattern ((t2tb3200 (tb2t3200 j))) )))

(declare-fun t2tb3201 ((tuple21 (set (tuple21 b e)) f)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 b e)) f))) (sort
  (tuple2 (set1 (tuple2 b1 e1)) f1) (t2tb3201 x))))

(declare-fun tb2t3201 (uni) (tuple21 (set (tuple21 b e)) f))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 b e)) f)))
  (! (= (tb2t3201 (t2tb3201 i)) i) :pattern ((t2tb3201 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 b1 e1)) f1) j)
     (= (t2tb3201 (tb2t3201 j)) j)) :pattern ((t2tb3201 (tb2t3201 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 b e)))) (t (set f)) (x (set (tuple21 b e)))
  (y f))
  (= (mem (tuple2 (set1 (tuple2 b1 e1)) f1)
  (Tuple2 (set1 (tuple2 b1 e1)) f1 (t2tb2940 x) (t2tb2954 y))
  (times f1 (set1 (tuple2 b1 e1)) (t2tb2941 s) (t2tb2946 t)))
  (and (mem39 x s) (mem37 y t)))))

(declare-fun t2tb3202 ((set (tuple21 (set (tuple21 b e)) e))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 b e)) e)))) (sort
  (set1 (tuple2 (set1 (tuple2 b1 e1)) e1)) (t2tb3202 x))))

(declare-fun tb2t3202 (uni) (set (tuple21 (set (tuple21 b e)) e)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 b e)) e))))
  (! (= (tb2t3202 (t2tb3202 i)) i) :pattern ((t2tb3202 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 b1 e1)) e1)) j)
     (= (t2tb3202 (tb2t3202 j)) j)) :pattern ((t2tb3202 (tb2t3202 j))) )))

(declare-fun t2tb3203 ((tuple21 (set (tuple21 b e)) e)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 b e)) e))) (sort
  (tuple2 (set1 (tuple2 b1 e1)) e1) (t2tb3203 x))))

(declare-fun tb2t3203 (uni) (tuple21 (set (tuple21 b e)) e))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 b e)) e)))
  (! (= (tb2t3203 (t2tb3203 i)) i) :pattern ((t2tb3203 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 b1 e1)) e1) j)
     (= (t2tb3203 (tb2t3203 j)) j)) :pattern ((t2tb3203 (tb2t3203 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 b e)))) (t (set e)) (x (set (tuple21 b e)))
  (y e))
  (= (mem (tuple2 (set1 (tuple2 b1 e1)) e1)
  (Tuple2 (set1 (tuple2 b1 e1)) e1 (t2tb2940 x) (t2tb2955 y))
  (times e1 (set1 (tuple2 b1 e1)) (t2tb2941 s) (t2tb2947 t)))
  (and (mem39 x s) (mem36 y t)))))

(declare-fun t2tb3204 ((set (tuple21 (set (tuple21 b e)) (tuple21 (tuple21 a
  c) (tuple21 b d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 b e)) (tuple21 (tuple21 a c)
  (tuple21 b d)))))) (sort
  (set1
  (tuple2 (set1 (tuple2 b1 e1)) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))))
  (t2tb3204 x))))

(declare-fun tb2t3204 (uni) (set (tuple21 (set (tuple21 b e))
  (tuple21 (tuple21 a c) (tuple21 b d)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 b e)) (tuple21 (tuple21 a c)
  (tuple21 b d))))))
  (! (= (tb2t3204 (t2tb3204 i)) i) :pattern ((t2tb3204 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (tuple2 (set1 (tuple2 b1 e1)) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))))
     j) (= (t2tb3204 (tb2t3204 j)) j)) :pattern ((t2tb3204 (tb2t3204 j))) )))

(declare-fun t2tb3205 ((tuple21 (set (tuple21 b e)) (tuple21 (tuple21 a c)
  (tuple21 b d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 b e)) (tuple21 (tuple21 a c) (tuple21 b
  d))))) (sort
  (tuple2 (set1 (tuple2 b1 e1)) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
  (t2tb3205 x))))

(declare-fun tb2t3205 (uni) (tuple21 (set (tuple21 b e)) (tuple21 (tuple21 a
  c) (tuple21 b d))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 b e)) (tuple21 (tuple21 a c) (tuple21 b
  d))))) (! (= (tb2t3205 (t2tb3205 i)) i) :pattern ((t2tb3205 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (tuple2 (set1 (tuple2 b1 e1)) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))) j)
     (= (t2tb3205 (tb2t3205 j)) j)) :pattern ((t2tb3205 (tb2t3205 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 b e)))) (t (set (tuple21 (tuple21 a c)
  (tuple21 b d)))) (x (set (tuple21 b e))) (y (tuple21 (tuple21 a c)
  (tuple21 b d))))
  (= (mem
  (tuple2 (set1 (tuple2 b1 e1)) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
  (Tuple2 (set1 (tuple2 b1 e1)) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))
  (t2tb2940 x) (t2tb691 y))
  (times (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (set1 (tuple2 b1 e1))
  (t2tb2941 s) (t2tb686 t))) (and (mem39 x s) (mem24 y t)))))

(declare-fun t2tb3206 ((set (tuple21 (set (tuple21 b e)) (set (tuple21 c
  d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 b e)) (set (tuple21 c d)))))) (sort
  (set1 (tuple2 (set1 (tuple2 b1 e1)) (set1 (tuple2 c1 d1)))) (t2tb3206 x))))

(declare-fun tb2t3206 (uni) (set (tuple21 (set (tuple21 b e)) (set (tuple21 c
  d)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 b e)) (set (tuple21 c d))))))
  (! (= (tb2t3206 (t2tb3206 i)) i) :pattern ((t2tb3206 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 b1 e1)) (set1 (tuple2 c1 d1)))) j)
     (= (t2tb3206 (tb2t3206 j)) j)) :pattern ((t2tb3206 (tb2t3206 j))) )))

(declare-fun t2tb3207 ((tuple21 (set (tuple21 b e)) (set (tuple21 c
  d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 b e)) (set (tuple21 c d))))) (sort
  (tuple2 (set1 (tuple2 b1 e1)) (set1 (tuple2 c1 d1))) (t2tb3207 x))))

(declare-fun tb2t3207 (uni) (tuple21 (set (tuple21 b e)) (set (tuple21 c
  d))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 b e)) (set (tuple21 c d)))))
  (! (= (tb2t3207 (t2tb3207 i)) i) :pattern ((t2tb3207 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 b1 e1)) (set1 (tuple2 c1 d1))) j)
     (= (t2tb3207 (tb2t3207 j)) j)) :pattern ((t2tb3207 (tb2t3207 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 b e)))) (t (set (set (tuple21 c d))))
  (x (set (tuple21 b e))) (y (set (tuple21 c d))))
  (= (mem (tuple2 (set1 (tuple2 b1 e1)) (set1 (tuple2 c1 d1)))
  (Tuple2 (set1 (tuple2 b1 e1)) (set1 (tuple2 c1 d1)) (t2tb2940 x)
  (t2tb689 y))
  (times (set1 (tuple2 c1 d1)) (set1 (tuple2 b1 e1)) (t2tb2941 s)
  (t2tb688 t))) (and (mem39 x s) (mem22 y t)))))

(declare-fun t2tb3208 ((set (tuple21 (set (tuple21 b e)) (tuple21 c
  d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 b e)) (tuple21 c d))))) (sort
  (set1 (tuple2 (set1 (tuple2 b1 e1)) (tuple2 c1 d1))) (t2tb3208 x))))

(declare-fun tb2t3208 (uni) (set (tuple21 (set (tuple21 b e)) (tuple21 c
  d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 b e)) (tuple21 c d)))))
  (! (= (tb2t3208 (t2tb3208 i)) i) :pattern ((t2tb3208 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 b1 e1)) (tuple2 c1 d1))) j)
     (= (t2tb3208 (tb2t3208 j)) j)) :pattern ((t2tb3208 (tb2t3208 j))) )))

(declare-fun t2tb3209 ((tuple21 (set (tuple21 b e)) (tuple21 c d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 b e)) (tuple21 c d)))) (sort
  (tuple2 (set1 (tuple2 b1 e1)) (tuple2 c1 d1)) (t2tb3209 x))))

(declare-fun tb2t3209 (uni) (tuple21 (set (tuple21 b e)) (tuple21 c d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 b e)) (tuple21 c d))))
  (! (= (tb2t3209 (t2tb3209 i)) i) :pattern ((t2tb3209 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 b1 e1)) (tuple2 c1 d1)) j)
     (= (t2tb3209 (tb2t3209 j)) j)) :pattern ((t2tb3209 (tb2t3209 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 b e)))) (t (set (tuple21 c d)))
  (x (set (tuple21 b e))) (y (tuple21 c d)))
  (= (mem (tuple2 (set1 (tuple2 b1 e1)) (tuple2 c1 d1))
  (Tuple2 (set1 (tuple2 b1 e1)) (tuple2 c1 d1) (t2tb2940 x) (t2tb693 y))
  (times (tuple2 c1 d1) (set1 (tuple2 b1 e1)) (t2tb2941 s) (t2tb689 t)))
  (and (mem39 x s) (mem21 y t)))))

(declare-fun t2tb3210 ((set (tuple21 (set (tuple21 b e)) d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 b e)) d)))) (sort
  (set1 (tuple2 (set1 (tuple2 b1 e1)) d1)) (t2tb3210 x))))

(declare-fun tb2t3210 (uni) (set (tuple21 (set (tuple21 b e)) d)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 b e)) d))))
  (! (= (tb2t3210 (t2tb3210 i)) i) :pattern ((t2tb3210 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 b1 e1)) d1)) j)
     (= (t2tb3210 (tb2t3210 j)) j)) :pattern ((t2tb3210 (tb2t3210 j))) )))

(declare-fun t2tb3211 ((tuple21 (set (tuple21 b e)) d)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 b e)) d))) (sort
  (tuple2 (set1 (tuple2 b1 e1)) d1) (t2tb3211 x))))

(declare-fun tb2t3211 (uni) (tuple21 (set (tuple21 b e)) d))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 b e)) d)))
  (! (= (tb2t3211 (t2tb3211 i)) i) :pattern ((t2tb3211 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 b1 e1)) d1) j)
     (= (t2tb3211 (tb2t3211 j)) j)) :pattern ((t2tb3211 (tb2t3211 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 b e)))) (t (set d)) (x (set (tuple21 b e)))
  (y d))
  (= (mem (tuple2 (set1 (tuple2 b1 e1)) d1)
  (Tuple2 (set1 (tuple2 b1 e1)) d1 (t2tb2940 x) (t2tb694 y))
  (times d1 (set1 (tuple2 b1 e1)) (t2tb2941 s) (t2tb690 t)))
  (and (mem39 x s) (mem20 y t)))))

(declare-fun t2tb3212 ((set (tuple21 (set (tuple21 b e)) c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 b e)) c)))) (sort
  (set1 (tuple2 (set1 (tuple2 b1 e1)) c1)) (t2tb3212 x))))

(declare-fun tb2t3212 (uni) (set (tuple21 (set (tuple21 b e)) c)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 b e)) c))))
  (! (= (tb2t3212 (t2tb3212 i)) i) :pattern ((t2tb3212 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 b1 e1)) c1)) j)
     (= (t2tb3212 (tb2t3212 j)) j)) :pattern ((t2tb3212 (tb2t3212 j))) )))

(declare-fun t2tb3213 ((tuple21 (set (tuple21 b e)) c)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 b e)) c))) (sort
  (tuple2 (set1 (tuple2 b1 e1)) c1) (t2tb3213 x))))

(declare-fun tb2t3213 (uni) (tuple21 (set (tuple21 b e)) c))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 b e)) c)))
  (! (= (tb2t3213 (t2tb3213 i)) i) :pattern ((t2tb3213 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 b1 e1)) c1) j)
     (= (t2tb3213 (tb2t3213 j)) j)) :pattern ((t2tb3213 (tb2t3213 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 b e)))) (t (set c)) (x (set (tuple21 b e)))
  (y c))
  (= (mem (tuple2 (set1 (tuple2 b1 e1)) c1)
  (Tuple2 (set1 (tuple2 b1 e1)) c1 (t2tb2940 x) (t2tb135 y))
  (times c1 (set1 (tuple2 b1 e1)) (t2tb2941 s) (t2tb132 t)))
  (and (mem39 x s) (mem7 y t)))))

(declare-fun t2tb3214 ((set (tuple21 (set (tuple21 b e)) (set (tuple21 a
  b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 b e)) (set (tuple21 a b)))))) (sort
  (set1 (tuple2 (set1 (tuple2 b1 e1)) (set1 (tuple2 a1 b1)))) (t2tb3214 x))))

(declare-fun tb2t3214 (uni) (set (tuple21 (set (tuple21 b e)) (set (tuple21 a
  b)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 b e)) (set (tuple21 a b))))))
  (! (= (tb2t3214 (t2tb3214 i)) i) :pattern ((t2tb3214 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 b1 e1)) (set1 (tuple2 a1 b1)))) j)
     (= (t2tb3214 (tb2t3214 j)) j)) :pattern ((t2tb3214 (tb2t3214 j))) )))

(declare-fun t2tb3215 ((tuple21 (set (tuple21 b e)) (set (tuple21 a
  b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 b e)) (set (tuple21 a b))))) (sort
  (tuple2 (set1 (tuple2 b1 e1)) (set1 (tuple2 a1 b1))) (t2tb3215 x))))

(declare-fun tb2t3215 (uni) (tuple21 (set (tuple21 b e)) (set (tuple21 a
  b))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 b e)) (set (tuple21 a b)))))
  (! (= (tb2t3215 (t2tb3215 i)) i) :pattern ((t2tb3215 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 b1 e1)) (set1 (tuple2 a1 b1))) j)
     (= (t2tb3215 (tb2t3215 j)) j)) :pattern ((t2tb3215 (tb2t3215 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 b e)))) (t (set (set (tuple21 a b))))
  (x (set (tuple21 b e))) (y (set (tuple21 a b))))
  (= (mem (tuple2 (set1 (tuple2 b1 e1)) (set1 (tuple2 a1 b1)))
  (Tuple2 (set1 (tuple2 b1 e1)) (set1 (tuple2 a1 b1)) (t2tb2940 x)
  (t2tb11 y))
  (times (set1 (tuple2 a1 b1)) (set1 (tuple2 b1 e1)) (t2tb2941 s) (t2tb10 t)))
  (and (mem39 x s) (mem4 y t)))))

(declare-fun t2tb3216 ((set (tuple21 (set (tuple21 b e)) (tuple21 a
  b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 b e)) (tuple21 a b))))) (sort
  (set1 (tuple2 (set1 (tuple2 b1 e1)) (tuple2 a1 b1))) (t2tb3216 x))))

(declare-fun tb2t3216 (uni) (set (tuple21 (set (tuple21 b e)) (tuple21 a
  b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 b e)) (tuple21 a b)))))
  (! (= (tb2t3216 (t2tb3216 i)) i) :pattern ((t2tb3216 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 b1 e1)) (tuple2 a1 b1))) j)
     (= (t2tb3216 (tb2t3216 j)) j)) :pattern ((t2tb3216 (tb2t3216 j))) )))

(declare-fun t2tb3217 ((tuple21 (set (tuple21 b e)) (tuple21 a b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 b e)) (tuple21 a b)))) (sort
  (tuple2 (set1 (tuple2 b1 e1)) (tuple2 a1 b1)) (t2tb3217 x))))

(declare-fun tb2t3217 (uni) (tuple21 (set (tuple21 b e)) (tuple21 a b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 b e)) (tuple21 a b))))
  (! (= (tb2t3217 (t2tb3217 i)) i) :pattern ((t2tb3217 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 b1 e1)) (tuple2 a1 b1)) j)
     (= (t2tb3217 (tb2t3217 j)) j)) :pattern ((t2tb3217 (tb2t3217 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 b e)))) (t (set (tuple21 a b)))
  (x (set (tuple21 b e))) (y (tuple21 a b)))
  (= (mem (tuple2 (set1 (tuple2 b1 e1)) (tuple2 a1 b1))
  (Tuple2 (set1 (tuple2 b1 e1)) (tuple2 a1 b1) (t2tb2940 x) (t2tb13 y))
  (times (tuple2 a1 b1) (set1 (tuple2 b1 e1)) (t2tb2941 s) (t2tb11 t)))
  (and (mem39 x s) (mem3 y t)))))

(declare-fun t2tb3218 ((set (tuple21 (set (tuple21 b e)) b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 b e)) b)))) (sort
  (set1 (tuple2 (set1 (tuple2 b1 e1)) b1)) (t2tb3218 x))))

(declare-fun tb2t3218 (uni) (set (tuple21 (set (tuple21 b e)) b)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 b e)) b))))
  (! (= (tb2t3218 (t2tb3218 i)) i) :pattern ((t2tb3218 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 b1 e1)) b1)) j)
     (= (t2tb3218 (tb2t3218 j)) j)) :pattern ((t2tb3218 (tb2t3218 j))) )))

(declare-fun t2tb3219 ((tuple21 (set (tuple21 b e)) b)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 b e)) b))) (sort
  (tuple2 (set1 (tuple2 b1 e1)) b1) (t2tb3219 x))))

(declare-fun tb2t3219 (uni) (tuple21 (set (tuple21 b e)) b))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 b e)) b)))
  (! (= (tb2t3219 (t2tb3219 i)) i) :pattern ((t2tb3219 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 b1 e1)) b1) j)
     (= (t2tb3219 (tb2t3219 j)) j)) :pattern ((t2tb3219 (tb2t3219 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 b e)))) (t (set b)) (x (set (tuple21 b e)))
  (y b))
  (= (mem (tuple2 (set1 (tuple2 b1 e1)) b1)
  (Tuple2 (set1 (tuple2 b1 e1)) b1 (t2tb2940 x) (t2tb14 y))
  (times b1 (set1 (tuple2 b1 e1)) (t2tb2941 s) (t2tb12 t)))
  (and (mem39 x s) (mem2 y t)))))

(declare-fun t2tb3220 ((set (tuple21 (set (tuple21 b e)) a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 b e)) a)))) (sort
  (set1 (tuple2 (set1 (tuple2 b1 e1)) a1)) (t2tb3220 x))))

(declare-fun tb2t3220 (uni) (set (tuple21 (set (tuple21 b e)) a)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 b e)) a))))
  (! (= (tb2t3220 (t2tb3220 i)) i) :pattern ((t2tb3220 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 b1 e1)) a1)) j)
     (= (t2tb3220 (tb2t3220 j)) j)) :pattern ((t2tb3220 (tb2t3220 j))) )))

(declare-fun t2tb3221 ((tuple21 (set (tuple21 b e)) a)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 b e)) a))) (sort
  (tuple2 (set1 (tuple2 b1 e1)) a1) (t2tb3221 x))))

(declare-fun tb2t3221 (uni) (tuple21 (set (tuple21 b e)) a))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 b e)) a)))
  (! (= (tb2t3221 (t2tb3221 i)) i) :pattern ((t2tb3221 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 b1 e1)) a1) j)
     (= (t2tb3221 (tb2t3221 j)) j)) :pattern ((t2tb3221 (tb2t3221 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 b e)))) (t (set a)) (x (set (tuple21 b e)))
  (y a))
  (= (mem (tuple2 (set1 (tuple2 b1 e1)) a1)
  (Tuple2 (set1 (tuple2 b1 e1)) a1 (t2tb2940 x) (t2tb2 y))
  (times a1 (set1 (tuple2 b1 e1)) (t2tb2941 s) (t2tb1 t)))
  (and (mem39 x s) (mem1 y t)))))

;; mem_times
  (assert
  (forall ((b2 ty))
  (forall ((s (set (set (tuple21 b e)))) (t uni) (x (set (tuple21 b e)))
  (y uni))
  (= (mem (tuple2 (set1 (tuple2 b1 e1)) b2)
  (Tuple2 (set1 (tuple2 b1 e1)) b2 (t2tb2940 x) y)
  (times b2 (set1 (tuple2 b1 e1)) (t2tb2941 s) t))
  (and (mem39 x s) (mem b2 y t))))))

(declare-fun t2tb3222 ((set (tuple21 (tuple21 b e) (tuple21 c f)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b e) (tuple21 c f))))) (sort
  (set1 (tuple2 (tuple2 b1 e1) (tuple2 c1 f1))) (t2tb3222 x))))

(declare-fun tb2t3222 (uni) (set (tuple21 (tuple21 b e) (tuple21 c f))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b e) (tuple21 c f)))))
  (! (= (tb2t3222 (t2tb3222 i)) i) :pattern ((t2tb3222 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 e1) (tuple2 c1 f1))) j)
     (= (t2tb3222 (tb2t3222 j)) j)) :pattern ((t2tb3222 (tb2t3222 j))) )))

(declare-fun t2tb3223 ((tuple21 (tuple21 b e) (tuple21 c f))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b e) (tuple21 c f)))) (sort
  (tuple2 (tuple2 b1 e1) (tuple2 c1 f1)) (t2tb3223 x))))

(declare-fun tb2t3223 (uni) (tuple21 (tuple21 b e) (tuple21 c f)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b e) (tuple21 c f))))
  (! (= (tb2t3223 (t2tb3223 i)) i) :pattern ((t2tb3223 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 e1) (tuple2 c1 f1)) j)
     (= (t2tb3223 (tb2t3223 j)) j)) :pattern ((t2tb3223 (tb2t3223 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 b e))) (t (set (tuple21 c f))) (x (tuple21 b e))
  (y (tuple21 c f)))
  (= (mem (tuple2 (tuple2 b1 e1) (tuple2 c1 f1))
  (Tuple2 (tuple2 b1 e1) (tuple2 c1 f1) (t2tb2953 x) (t2tb2948 y))
  (times (tuple2 c1 f1) (tuple2 b1 e1) (t2tb2940 s) (t2tb2942 t)))
  (and (mem38 x s) (mem45 y t)))))

(declare-fun t2tb3224 ((set (tuple21 (tuple21 b e) (tuple21 a e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b e) (tuple21 a e))))) (sort
  (set1 (tuple2 (tuple2 b1 e1) (tuple2 a1 e1))) (t2tb3224 x))))

(declare-fun tb2t3224 (uni) (set (tuple21 (tuple21 b e) (tuple21 a e))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b e) (tuple21 a e)))))
  (! (= (tb2t3224 (t2tb3224 i)) i) :pattern ((t2tb3224 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 e1) (tuple2 a1 e1))) j)
     (= (t2tb3224 (tb2t3224 j)) j)) :pattern ((t2tb3224 (tb2t3224 j))) )))

(declare-fun t2tb3225 ((tuple21 (tuple21 b e) (tuple21 a e))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b e) (tuple21 a e)))) (sort
  (tuple2 (tuple2 b1 e1) (tuple2 a1 e1)) (t2tb3225 x))))

(declare-fun tb2t3225 (uni) (tuple21 (tuple21 b e) (tuple21 a e)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b e) (tuple21 a e))))
  (! (= (tb2t3225 (t2tb3225 i)) i) :pattern ((t2tb3225 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 e1) (tuple2 a1 e1)) j)
     (= (t2tb3225 (tb2t3225 j)) j)) :pattern ((t2tb3225 (tb2t3225 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 b e))) (t (set (tuple21 a e))) (x (tuple21 b e))
  (y (tuple21 a e)))
  (= (mem (tuple2 (tuple2 b1 e1) (tuple2 a1 e1))
  (Tuple2 (tuple2 b1 e1) (tuple2 a1 e1) (t2tb2953 x) (t2tb2949 y))
  (times (tuple2 a1 e1) (tuple2 b1 e1) (t2tb2940 s) (t2tb2943 t)))
  (and (mem38 x s) (mem44 y t)))))

(declare-fun t2tb3226 ((set (tuple21 (tuple21 b e) (tuple21 (tuple21 b d)
  (tuple21 e f))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b e) (tuple21 (tuple21 b d) (tuple21 e
  f)))))) (sort
  (set1 (tuple2 (tuple2 b1 e1) (tuple2 (tuple2 b1 d1) (tuple2 e1 f1))))
  (t2tb3226 x))))

(declare-fun tb2t3226 (uni) (set (tuple21 (tuple21 b e) (tuple21 (tuple21 b
  d) (tuple21 e f)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b e) (tuple21 (tuple21 b d) (tuple21 e
  f)))))) (! (= (tb2t3226 (t2tb3226 i)) i) :pattern ((t2tb3226 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 b1 e1) (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)))) j)
     (= (t2tb3226 (tb2t3226 j)) j)) :pattern ((t2tb3226 (tb2t3226 j))) )))

(declare-fun t2tb3227 ((tuple21 (tuple21 b e) (tuple21 (tuple21 b d)
  (tuple21 e f)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b e) (tuple21 (tuple21 b d) (tuple21 e f)))))
  (sort (tuple2 (tuple2 b1 e1) (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)))
  (t2tb3227 x))))

(declare-fun tb2t3227 (uni) (tuple21 (tuple21 b e) (tuple21 (tuple21 b d)
  (tuple21 e f))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b e) (tuple21 (tuple21 b d) (tuple21 e f)))))
  (! (= (tb2t3227 (t2tb3227 i)) i) :pattern ((t2tb3227 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 e1) (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)))
     j) (= (t2tb3227 (tb2t3227 j)) j)) :pattern ((t2tb3227 (tb2t3227 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 b e))) (t (set (tuple21 (tuple21 b d) (tuple21 e
  f)))) (x (tuple21 b e)) (y (tuple21 (tuple21 b d) (tuple21 e f))))
  (= (mem (tuple2 (tuple2 b1 e1) (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)))
  (Tuple2 (tuple2 b1 e1) (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (t2tb2953 x)
  (t2tb2950 y))
  (times (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (tuple2 b1 e1) (t2tb2940 s)
  (t2tb2944 t))) (and (mem38 x s) (mem43 y t)))))

(declare-fun t2tb3228 ((set (tuple21 (tuple21 b e) (tuple21 (tuple21 a c)
  (tuple21 e f))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b e) (tuple21 (tuple21 a c) (tuple21 e
  f)))))) (sort
  (set1 (tuple2 (tuple2 b1 e1) (tuple2 (tuple2 a1 c1) (tuple2 e1 f1))))
  (t2tb3228 x))))

(declare-fun tb2t3228 (uni) (set (tuple21 (tuple21 b e) (tuple21 (tuple21 a
  c) (tuple21 e f)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b e) (tuple21 (tuple21 a c) (tuple21 e
  f)))))) (! (= (tb2t3228 (t2tb3228 i)) i) :pattern ((t2tb3228 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 b1 e1) (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)))) j)
     (= (t2tb3228 (tb2t3228 j)) j)) :pattern ((t2tb3228 (tb2t3228 j))) )))

(declare-fun t2tb3229 ((tuple21 (tuple21 b e) (tuple21 (tuple21 a c)
  (tuple21 e f)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b e) (tuple21 (tuple21 a c) (tuple21 e f)))))
  (sort (tuple2 (tuple2 b1 e1) (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)))
  (t2tb3229 x))))

(declare-fun tb2t3229 (uni) (tuple21 (tuple21 b e) (tuple21 (tuple21 a c)
  (tuple21 e f))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b e) (tuple21 (tuple21 a c) (tuple21 e f)))))
  (! (= (tb2t3229 (t2tb3229 i)) i) :pattern ((t2tb3229 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 e1) (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)))
     j) (= (t2tb3229 (tb2t3229 j)) j)) :pattern ((t2tb3229 (tb2t3229 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 b e))) (t (set (tuple21 (tuple21 a c) (tuple21 e
  f)))) (x (tuple21 b e)) (y (tuple21 (tuple21 a c) (tuple21 e f))))
  (= (mem (tuple2 (tuple2 b1 e1) (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)))
  (Tuple2 (tuple2 b1 e1) (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (t2tb2953 x)
  (t2tb2951 y))
  (times (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (tuple2 b1 e1) (t2tb2940 s)
  (t2tb2945 t))) (and (mem38 x s) (mem42 y t)))))

(declare-fun t2tb3230 ((set (tuple21 (tuple21 b e) (set (tuple21 d
  f))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b e) (set (tuple21 d f)))))) (sort
  (set1 (tuple2 (tuple2 b1 e1) (set1 (tuple2 d1 f1)))) (t2tb3230 x))))

(declare-fun tb2t3230 (uni) (set (tuple21 (tuple21 b e) (set (tuple21 d
  f)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b e) (set (tuple21 d f))))))
  (! (= (tb2t3230 (t2tb3230 i)) i) :pattern ((t2tb3230 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 e1) (set1 (tuple2 d1 f1)))) j)
     (= (t2tb3230 (tb2t3230 j)) j)) :pattern ((t2tb3230 (tb2t3230 j))) )))

(declare-fun t2tb3231 ((tuple21 (tuple21 b e) (set (tuple21 d f)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b e) (set (tuple21 d f))))) (sort
  (tuple2 (tuple2 b1 e1) (set1 (tuple2 d1 f1))) (t2tb3231 x))))

(declare-fun tb2t3231 (uni) (tuple21 (tuple21 b e) (set (tuple21 d f))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b e) (set (tuple21 d f)))))
  (! (= (tb2t3231 (t2tb3231 i)) i) :pattern ((t2tb3231 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 e1) (set1 (tuple2 d1 f1))) j)
     (= (t2tb3231 (tb2t3231 j)) j)) :pattern ((t2tb3231 (tb2t3231 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 b e))) (t (set (set (tuple21 d f))))
  (x (tuple21 b e)) (y (set (tuple21 d f))))
  (= (mem (tuple2 (tuple2 b1 e1) (set1 (tuple2 d1 f1)))
  (Tuple2 (tuple2 b1 e1) (set1 (tuple2 d1 f1)) (t2tb2953 x) (t2tb2938 y))
  (times (set1 (tuple2 d1 f1)) (tuple2 b1 e1) (t2tb2940 s) (t2tb2939 t)))
  (and (mem38 x s) (mem41 y t)))))

(declare-fun t2tb3232 ((set (tuple21 (tuple21 b e) (tuple21 d f)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b e) (tuple21 d f))))) (sort
  (set1 (tuple2 (tuple2 b1 e1) (tuple2 d1 f1))) (t2tb3232 x))))

(declare-fun tb2t3232 (uni) (set (tuple21 (tuple21 b e) (tuple21 d f))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b e) (tuple21 d f)))))
  (! (= (tb2t3232 (t2tb3232 i)) i) :pattern ((t2tb3232 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 e1) (tuple2 d1 f1))) j)
     (= (t2tb3232 (tb2t3232 j)) j)) :pattern ((t2tb3232 (tb2t3232 j))) )))

(declare-fun t2tb3233 ((tuple21 (tuple21 b e) (tuple21 d f))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b e) (tuple21 d f)))) (sort
  (tuple2 (tuple2 b1 e1) (tuple2 d1 f1)) (t2tb3233 x))))

(declare-fun tb2t3233 (uni) (tuple21 (tuple21 b e) (tuple21 d f)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b e) (tuple21 d f))))
  (! (= (tb2t3233 (t2tb3233 i)) i) :pattern ((t2tb3233 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 e1) (tuple2 d1 f1)) j)
     (= (t2tb3233 (tb2t3233 j)) j)) :pattern ((t2tb3233 (tb2t3233 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 b e))) (t (set (tuple21 d f))) (x (tuple21 b e))
  (y (tuple21 d f)))
  (= (mem (tuple2 (tuple2 b1 e1) (tuple2 d1 f1))
  (Tuple2 (tuple2 b1 e1) (tuple2 d1 f1) (t2tb2953 x) (t2tb2952 y))
  (times (tuple2 d1 f1) (tuple2 b1 e1) (t2tb2940 s) (t2tb2938 t)))
  (and (mem38 x s) (mem40 y t)))))

(declare-fun t2tb3234 ((set (tuple21 (tuple21 b e) (set (tuple21 b
  e))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b e) (set (tuple21 b e)))))) (sort
  (set1 (tuple2 (tuple2 b1 e1) (set1 (tuple2 b1 e1)))) (t2tb3234 x))))

(declare-fun tb2t3234 (uni) (set (tuple21 (tuple21 b e) (set (tuple21 b
  e)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b e) (set (tuple21 b e))))))
  (! (= (tb2t3234 (t2tb3234 i)) i) :pattern ((t2tb3234 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 e1) (set1 (tuple2 b1 e1)))) j)
     (= (t2tb3234 (tb2t3234 j)) j)) :pattern ((t2tb3234 (tb2t3234 j))) )))

(declare-fun t2tb3235 ((tuple21 (tuple21 b e) (set (tuple21 b e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b e) (set (tuple21 b e))))) (sort
  (tuple2 (tuple2 b1 e1) (set1 (tuple2 b1 e1))) (t2tb3235 x))))

(declare-fun tb2t3235 (uni) (tuple21 (tuple21 b e) (set (tuple21 b e))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b e) (set (tuple21 b e)))))
  (! (= (tb2t3235 (t2tb3235 i)) i) :pattern ((t2tb3235 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 e1) (set1 (tuple2 b1 e1))) j)
     (= (t2tb3235 (tb2t3235 j)) j)) :pattern ((t2tb3235 (tb2t3235 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 b e))) (t (set (set (tuple21 b e))))
  (x (tuple21 b e)) (y (set (tuple21 b e))))
  (= (mem (tuple2 (tuple2 b1 e1) (set1 (tuple2 b1 e1)))
  (Tuple2 (tuple2 b1 e1) (set1 (tuple2 b1 e1)) (t2tb2953 x) (t2tb2940 y))
  (times (set1 (tuple2 b1 e1)) (tuple2 b1 e1) (t2tb2940 s) (t2tb2941 t)))
  (and (mem38 x s) (mem39 y t)))))

(declare-fun t2tb3236 ((set (tuple21 (tuple21 b e) (tuple21 b e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b e) (tuple21 b e))))) (sort
  (set1 (tuple2 (tuple2 b1 e1) (tuple2 b1 e1))) (t2tb3236 x))))

(declare-fun tb2t3236 (uni) (set (tuple21 (tuple21 b e) (tuple21 b e))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b e) (tuple21 b e)))))
  (! (= (tb2t3236 (t2tb3236 i)) i) :pattern ((t2tb3236 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 e1) (tuple2 b1 e1))) j)
     (= (t2tb3236 (tb2t3236 j)) j)) :pattern ((t2tb3236 (tb2t3236 j))) )))

(declare-fun t2tb3237 ((tuple21 (tuple21 b e) (tuple21 b e))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b e) (tuple21 b e)))) (sort
  (tuple2 (tuple2 b1 e1) (tuple2 b1 e1)) (t2tb3237 x))))

(declare-fun tb2t3237 (uni) (tuple21 (tuple21 b e) (tuple21 b e)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b e) (tuple21 b e))))
  (! (= (tb2t3237 (t2tb3237 i)) i) :pattern ((t2tb3237 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 e1) (tuple2 b1 e1)) j)
     (= (t2tb3237 (tb2t3237 j)) j)) :pattern ((t2tb3237 (tb2t3237 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 b e))) (t (set (tuple21 b e))) (x (tuple21 b e))
  (y (tuple21 b e)))
  (= (mem (tuple2 (tuple2 b1 e1) (tuple2 b1 e1))
  (Tuple2 (tuple2 b1 e1) (tuple2 b1 e1) (t2tb2953 x) (t2tb2953 y))
  (times (tuple2 b1 e1) (tuple2 b1 e1) (t2tb2940 s) (t2tb2940 t)))
  (and (mem38 x s) (mem38 y t)))))

(declare-fun t2tb3238 ((set (tuple21 (tuple21 b e) f))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b e) f)))) (sort
  (set1 (tuple2 (tuple2 b1 e1) f1)) (t2tb3238 x))))

(declare-fun tb2t3238 (uni) (set (tuple21 (tuple21 b e) f)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b e) f))))
  (! (= (tb2t3238 (t2tb3238 i)) i) :pattern ((t2tb3238 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 e1) f1)) j)
     (= (t2tb3238 (tb2t3238 j)) j)) :pattern ((t2tb3238 (tb2t3238 j))) )))

(declare-fun t2tb3239 ((tuple21 (tuple21 b e) f)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b e) f))) (sort (tuple2 (tuple2 b1 e1) f1)
  (t2tb3239 x))))

(declare-fun tb2t3239 (uni) (tuple21 (tuple21 b e) f))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b e) f)))
  (! (= (tb2t3239 (t2tb3239 i)) i) :pattern ((t2tb3239 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 e1) f1) j) (= (t2tb3239 (tb2t3239 j)) j)) :pattern (
  (t2tb3239 (tb2t3239 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 b e))) (t (set f)) (x (tuple21 b e)) (y f))
  (= (mem (tuple2 (tuple2 b1 e1) f1)
  (Tuple2 (tuple2 b1 e1) f1 (t2tb2953 x) (t2tb2954 y))
  (times f1 (tuple2 b1 e1) (t2tb2940 s) (t2tb2946 t)))
  (and (mem38 x s) (mem37 y t)))))

(declare-fun t2tb3240 ((set (tuple21 (tuple21 b e) e))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b e) e)))) (sort
  (set1 (tuple2 (tuple2 b1 e1) e1)) (t2tb3240 x))))

(declare-fun tb2t3240 (uni) (set (tuple21 (tuple21 b e) e)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b e) e))))
  (! (= (tb2t3240 (t2tb3240 i)) i) :pattern ((t2tb3240 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 e1) e1)) j)
     (= (t2tb3240 (tb2t3240 j)) j)) :pattern ((t2tb3240 (tb2t3240 j))) )))

(declare-fun t2tb3241 ((tuple21 (tuple21 b e) e)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b e) e))) (sort (tuple2 (tuple2 b1 e1) e1)
  (t2tb3241 x))))

(declare-fun tb2t3241 (uni) (tuple21 (tuple21 b e) e))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b e) e)))
  (! (= (tb2t3241 (t2tb3241 i)) i) :pattern ((t2tb3241 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 e1) e1) j) (= (t2tb3241 (tb2t3241 j)) j)) :pattern (
  (t2tb3241 (tb2t3241 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 b e))) (t (set e)) (x (tuple21 b e)) (y e))
  (= (mem (tuple2 (tuple2 b1 e1) e1)
  (Tuple2 (tuple2 b1 e1) e1 (t2tb2953 x) (t2tb2955 y))
  (times e1 (tuple2 b1 e1) (t2tb2940 s) (t2tb2947 t)))
  (and (mem38 x s) (mem36 y t)))))

(declare-fun t2tb3242 ((set (tuple21 (tuple21 b e) (tuple21 (tuple21 a c)
  (tuple21 b d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b e) (tuple21 (tuple21 a c) (tuple21 b
  d)))))) (sort
  (set1 (tuple2 (tuple2 b1 e1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))))
  (t2tb3242 x))))

(declare-fun tb2t3242 (uni) (set (tuple21 (tuple21 b e) (tuple21 (tuple21 a
  c) (tuple21 b d)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b e) (tuple21 (tuple21 a c) (tuple21 b
  d)))))) (! (= (tb2t3242 (t2tb3242 i)) i) :pattern ((t2tb3242 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 b1 e1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))) j)
     (= (t2tb3242 (tb2t3242 j)) j)) :pattern ((t2tb3242 (tb2t3242 j))) )))

(declare-fun t2tb3243 ((tuple21 (tuple21 b e) (tuple21 (tuple21 a c)
  (tuple21 b d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b e) (tuple21 (tuple21 a c) (tuple21 b d)))))
  (sort (tuple2 (tuple2 b1 e1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
  (t2tb3243 x))))

(declare-fun tb2t3243 (uni) (tuple21 (tuple21 b e) (tuple21 (tuple21 a c)
  (tuple21 b d))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b e) (tuple21 (tuple21 a c) (tuple21 b d)))))
  (! (= (tb2t3243 (t2tb3243 i)) i) :pattern ((t2tb3243 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 e1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
     j) (= (t2tb3243 (tb2t3243 j)) j)) :pattern ((t2tb3243 (tb2t3243 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 b e))) (t (set (tuple21 (tuple21 a c) (tuple21 b
  d)))) (x (tuple21 b e)) (y (tuple21 (tuple21 a c) (tuple21 b d))))
  (= (mem (tuple2 (tuple2 b1 e1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
  (Tuple2 (tuple2 b1 e1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb2953 x)
  (t2tb691 y))
  (times (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 b1 e1) (t2tb2940 s)
  (t2tb686 t))) (and (mem38 x s) (mem24 y t)))))

(declare-fun t2tb3244 ((set (tuple21 (tuple21 b e) (set (tuple21 c
  d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b e) (set (tuple21 c d)))))) (sort
  (set1 (tuple2 (tuple2 b1 e1) (set1 (tuple2 c1 d1)))) (t2tb3244 x))))

(declare-fun tb2t3244 (uni) (set (tuple21 (tuple21 b e) (set (tuple21 c
  d)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b e) (set (tuple21 c d))))))
  (! (= (tb2t3244 (t2tb3244 i)) i) :pattern ((t2tb3244 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 e1) (set1 (tuple2 c1 d1)))) j)
     (= (t2tb3244 (tb2t3244 j)) j)) :pattern ((t2tb3244 (tb2t3244 j))) )))

(declare-fun t2tb3245 ((tuple21 (tuple21 b e) (set (tuple21 c d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b e) (set (tuple21 c d))))) (sort
  (tuple2 (tuple2 b1 e1) (set1 (tuple2 c1 d1))) (t2tb3245 x))))

(declare-fun tb2t3245 (uni) (tuple21 (tuple21 b e) (set (tuple21 c d))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b e) (set (tuple21 c d)))))
  (! (= (tb2t3245 (t2tb3245 i)) i) :pattern ((t2tb3245 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 e1) (set1 (tuple2 c1 d1))) j)
     (= (t2tb3245 (tb2t3245 j)) j)) :pattern ((t2tb3245 (tb2t3245 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 b e))) (t (set (set (tuple21 c d))))
  (x (tuple21 b e)) (y (set (tuple21 c d))))
  (= (mem (tuple2 (tuple2 b1 e1) (set1 (tuple2 c1 d1)))
  (Tuple2 (tuple2 b1 e1) (set1 (tuple2 c1 d1)) (t2tb2953 x) (t2tb689 y))
  (times (set1 (tuple2 c1 d1)) (tuple2 b1 e1) (t2tb2940 s) (t2tb688 t)))
  (and (mem38 x s) (mem22 y t)))))

(declare-fun t2tb3246 ((set (tuple21 (tuple21 b e) (tuple21 c d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b e) (tuple21 c d))))) (sort
  (set1 (tuple2 (tuple2 b1 e1) (tuple2 c1 d1))) (t2tb3246 x))))

(declare-fun tb2t3246 (uni) (set (tuple21 (tuple21 b e) (tuple21 c d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b e) (tuple21 c d)))))
  (! (= (tb2t3246 (t2tb3246 i)) i) :pattern ((t2tb3246 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 e1) (tuple2 c1 d1))) j)
     (= (t2tb3246 (tb2t3246 j)) j)) :pattern ((t2tb3246 (tb2t3246 j))) )))

(declare-fun t2tb3247 ((tuple21 (tuple21 b e) (tuple21 c d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b e) (tuple21 c d)))) (sort
  (tuple2 (tuple2 b1 e1) (tuple2 c1 d1)) (t2tb3247 x))))

(declare-fun tb2t3247 (uni) (tuple21 (tuple21 b e) (tuple21 c d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b e) (tuple21 c d))))
  (! (= (tb2t3247 (t2tb3247 i)) i) :pattern ((t2tb3247 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 e1) (tuple2 c1 d1)) j)
     (= (t2tb3247 (tb2t3247 j)) j)) :pattern ((t2tb3247 (tb2t3247 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 b e))) (t (set (tuple21 c d))) (x (tuple21 b e))
  (y (tuple21 c d)))
  (= (mem (tuple2 (tuple2 b1 e1) (tuple2 c1 d1))
  (Tuple2 (tuple2 b1 e1) (tuple2 c1 d1) (t2tb2953 x) (t2tb693 y))
  (times (tuple2 c1 d1) (tuple2 b1 e1) (t2tb2940 s) (t2tb689 t)))
  (and (mem38 x s) (mem21 y t)))))

(declare-fun t2tb3248 ((set (tuple21 (tuple21 b e) d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b e) d)))) (sort
  (set1 (tuple2 (tuple2 b1 e1) d1)) (t2tb3248 x))))

(declare-fun tb2t3248 (uni) (set (tuple21 (tuple21 b e) d)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b e) d))))
  (! (= (tb2t3248 (t2tb3248 i)) i) :pattern ((t2tb3248 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 e1) d1)) j)
     (= (t2tb3248 (tb2t3248 j)) j)) :pattern ((t2tb3248 (tb2t3248 j))) )))

(declare-fun t2tb3249 ((tuple21 (tuple21 b e) d)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b e) d))) (sort (tuple2 (tuple2 b1 e1) d1)
  (t2tb3249 x))))

(declare-fun tb2t3249 (uni) (tuple21 (tuple21 b e) d))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b e) d)))
  (! (= (tb2t3249 (t2tb3249 i)) i) :pattern ((t2tb3249 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 e1) d1) j) (= (t2tb3249 (tb2t3249 j)) j)) :pattern (
  (t2tb3249 (tb2t3249 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 b e))) (t (set d)) (x (tuple21 b e)) (y d))
  (= (mem (tuple2 (tuple2 b1 e1) d1)
  (Tuple2 (tuple2 b1 e1) d1 (t2tb2953 x) (t2tb694 y))
  (times d1 (tuple2 b1 e1) (t2tb2940 s) (t2tb690 t)))
  (and (mem38 x s) (mem20 y t)))))

(declare-fun t2tb3250 ((set (tuple21 (tuple21 b e) c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b e) c)))) (sort
  (set1 (tuple2 (tuple2 b1 e1) c1)) (t2tb3250 x))))

(declare-fun tb2t3250 (uni) (set (tuple21 (tuple21 b e) c)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b e) c))))
  (! (= (tb2t3250 (t2tb3250 i)) i) :pattern ((t2tb3250 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 e1) c1)) j)
     (= (t2tb3250 (tb2t3250 j)) j)) :pattern ((t2tb3250 (tb2t3250 j))) )))

(declare-fun t2tb3251 ((tuple21 (tuple21 b e) c)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b e) c))) (sort (tuple2 (tuple2 b1 e1) c1)
  (t2tb3251 x))))

(declare-fun tb2t3251 (uni) (tuple21 (tuple21 b e) c))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b e) c)))
  (! (= (tb2t3251 (t2tb3251 i)) i) :pattern ((t2tb3251 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 e1) c1) j) (= (t2tb3251 (tb2t3251 j)) j)) :pattern (
  (t2tb3251 (tb2t3251 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 b e))) (t (set c)) (x (tuple21 b e)) (y c))
  (= (mem (tuple2 (tuple2 b1 e1) c1)
  (Tuple2 (tuple2 b1 e1) c1 (t2tb2953 x) (t2tb135 y))
  (times c1 (tuple2 b1 e1) (t2tb2940 s) (t2tb132 t)))
  (and (mem38 x s) (mem7 y t)))))

(declare-fun t2tb3252 ((set (tuple21 (tuple21 b e) (set (tuple21 a
  b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b e) (set (tuple21 a b)))))) (sort
  (set1 (tuple2 (tuple2 b1 e1) (set1 (tuple2 a1 b1)))) (t2tb3252 x))))

(declare-fun tb2t3252 (uni) (set (tuple21 (tuple21 b e) (set (tuple21 a
  b)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b e) (set (tuple21 a b))))))
  (! (= (tb2t3252 (t2tb3252 i)) i) :pattern ((t2tb3252 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 e1) (set1 (tuple2 a1 b1)))) j)
     (= (t2tb3252 (tb2t3252 j)) j)) :pattern ((t2tb3252 (tb2t3252 j))) )))

(declare-fun t2tb3253 ((tuple21 (tuple21 b e) (set (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b e) (set (tuple21 a b))))) (sort
  (tuple2 (tuple2 b1 e1) (set1 (tuple2 a1 b1))) (t2tb3253 x))))

(declare-fun tb2t3253 (uni) (tuple21 (tuple21 b e) (set (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b e) (set (tuple21 a b)))))
  (! (= (tb2t3253 (t2tb3253 i)) i) :pattern ((t2tb3253 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 e1) (set1 (tuple2 a1 b1))) j)
     (= (t2tb3253 (tb2t3253 j)) j)) :pattern ((t2tb3253 (tb2t3253 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 b e))) (t (set (set (tuple21 a b))))
  (x (tuple21 b e)) (y (set (tuple21 a b))))
  (= (mem (tuple2 (tuple2 b1 e1) (set1 (tuple2 a1 b1)))
  (Tuple2 (tuple2 b1 e1) (set1 (tuple2 a1 b1)) (t2tb2953 x) (t2tb11 y))
  (times (set1 (tuple2 a1 b1)) (tuple2 b1 e1) (t2tb2940 s) (t2tb10 t)))
  (and (mem38 x s) (mem4 y t)))))

(declare-fun t2tb3254 ((set (tuple21 (tuple21 b e) (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b e) (tuple21 a b))))) (sort
  (set1 (tuple2 (tuple2 b1 e1) (tuple2 a1 b1))) (t2tb3254 x))))

(declare-fun tb2t3254 (uni) (set (tuple21 (tuple21 b e) (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b e) (tuple21 a b)))))
  (! (= (tb2t3254 (t2tb3254 i)) i) :pattern ((t2tb3254 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 e1) (tuple2 a1 b1))) j)
     (= (t2tb3254 (tb2t3254 j)) j)) :pattern ((t2tb3254 (tb2t3254 j))) )))

(declare-fun t2tb3255 ((tuple21 (tuple21 b e) (tuple21 a b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b e) (tuple21 a b)))) (sort
  (tuple2 (tuple2 b1 e1) (tuple2 a1 b1)) (t2tb3255 x))))

(declare-fun tb2t3255 (uni) (tuple21 (tuple21 b e) (tuple21 a b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b e) (tuple21 a b))))
  (! (= (tb2t3255 (t2tb3255 i)) i) :pattern ((t2tb3255 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 e1) (tuple2 a1 b1)) j)
     (= (t2tb3255 (tb2t3255 j)) j)) :pattern ((t2tb3255 (tb2t3255 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 b e))) (t (set (tuple21 a b))) (x (tuple21 b e))
  (y (tuple21 a b)))
  (= (mem (tuple2 (tuple2 b1 e1) (tuple2 a1 b1))
  (Tuple2 (tuple2 b1 e1) (tuple2 a1 b1) (t2tb2953 x) (t2tb13 y))
  (times (tuple2 a1 b1) (tuple2 b1 e1) (t2tb2940 s) (t2tb11 t)))
  (and (mem38 x s) (mem3 y t)))))

(declare-fun t2tb3256 ((set (tuple21 (tuple21 b e) b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b e) b)))) (sort
  (set1 (tuple2 (tuple2 b1 e1) b1)) (t2tb3256 x))))

(declare-fun tb2t3256 (uni) (set (tuple21 (tuple21 b e) b)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b e) b))))
  (! (= (tb2t3256 (t2tb3256 i)) i) :pattern ((t2tb3256 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 e1) b1)) j)
     (= (t2tb3256 (tb2t3256 j)) j)) :pattern ((t2tb3256 (tb2t3256 j))) )))

(declare-fun t2tb3257 ((tuple21 (tuple21 b e) b)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b e) b))) (sort (tuple2 (tuple2 b1 e1) b1)
  (t2tb3257 x))))

(declare-fun tb2t3257 (uni) (tuple21 (tuple21 b e) b))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b e) b)))
  (! (= (tb2t3257 (t2tb3257 i)) i) :pattern ((t2tb3257 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 e1) b1) j) (= (t2tb3257 (tb2t3257 j)) j)) :pattern (
  (t2tb3257 (tb2t3257 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 b e))) (t (set b)) (x (tuple21 b e)) (y b))
  (= (mem (tuple2 (tuple2 b1 e1) b1)
  (Tuple2 (tuple2 b1 e1) b1 (t2tb2953 x) (t2tb14 y))
  (times b1 (tuple2 b1 e1) (t2tb2940 s) (t2tb12 t)))
  (and (mem38 x s) (mem2 y t)))))

(declare-fun t2tb3258 ((set (tuple21 (tuple21 b e) a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b e) a)))) (sort
  (set1 (tuple2 (tuple2 b1 e1) a1)) (t2tb3258 x))))

(declare-fun tb2t3258 (uni) (set (tuple21 (tuple21 b e) a)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b e) a))))
  (! (= (tb2t3258 (t2tb3258 i)) i) :pattern ((t2tb3258 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 e1) a1)) j)
     (= (t2tb3258 (tb2t3258 j)) j)) :pattern ((t2tb3258 (tb2t3258 j))) )))

(declare-fun t2tb3259 ((tuple21 (tuple21 b e) a)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b e) a))) (sort (tuple2 (tuple2 b1 e1) a1)
  (t2tb3259 x))))

(declare-fun tb2t3259 (uni) (tuple21 (tuple21 b e) a))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b e) a)))
  (! (= (tb2t3259 (t2tb3259 i)) i) :pattern ((t2tb3259 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 e1) a1) j) (= (t2tb3259 (tb2t3259 j)) j)) :pattern (
  (t2tb3259 (tb2t3259 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 b e))) (t (set a)) (x (tuple21 b e)) (y a))
  (= (mem (tuple2 (tuple2 b1 e1) a1)
  (Tuple2 (tuple2 b1 e1) a1 (t2tb2953 x) (t2tb2 y))
  (times a1 (tuple2 b1 e1) (t2tb2940 s) (t2tb1 t)))
  (and (mem38 x s) (mem1 y t)))))

;; mem_times
  (assert
  (forall ((b2 ty))
  (forall ((s (set (tuple21 b e))) (t uni) (x (tuple21 b e)) (y uni))
  (= (mem (tuple2 (tuple2 b1 e1) b2)
  (Tuple2 (tuple2 b1 e1) b2 (t2tb2953 x) y)
  (times b2 (tuple2 b1 e1) (t2tb2940 s) t)) (and (mem38 x s) (mem b2 y t))))))

(declare-fun t2tb3260 ((set (tuple21 f (tuple21 c f)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 f (tuple21 c f))))) (sort
  (set1 (tuple2 f1 (tuple2 c1 f1))) (t2tb3260 x))))

(declare-fun tb2t3260 (uni) (set (tuple21 f (tuple21 c f))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 f (tuple21 c f)))))
  (! (= (tb2t3260 (t2tb3260 i)) i) :pattern ((t2tb3260 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 f1 (tuple2 c1 f1))) j)
     (= (t2tb3260 (tb2t3260 j)) j)) :pattern ((t2tb3260 (tb2t3260 j))) )))

(declare-fun t2tb3261 ((tuple21 f (tuple21 c f))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 f (tuple21 c f)))) (sort (tuple2 f1 (tuple2 c1 f1))
  (t2tb3261 x))))

(declare-fun tb2t3261 (uni) (tuple21 f (tuple21 c f)))

;; BridgeL
  (assert
  (forall ((i (tuple21 f (tuple21 c f))))
  (! (= (tb2t3261 (t2tb3261 i)) i) :pattern ((t2tb3261 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 f1 (tuple2 c1 f1)) j) (= (t2tb3261 (tb2t3261 j)) j)) :pattern (
  (t2tb3261 (tb2t3261 j))) )))

;; mem_times
  (assert
  (forall ((s (set f)) (t (set (tuple21 c f))) (x f) (y (tuple21 c f)))
  (= (mem (tuple2 f1 (tuple2 c1 f1))
  (Tuple2 f1 (tuple2 c1 f1) (t2tb2954 x) (t2tb2948 y))
  (times (tuple2 c1 f1) f1 (t2tb2946 s) (t2tb2942 t)))
  (and (mem37 x s) (mem45 y t)))))

(declare-fun t2tb3262 ((set (tuple21 f (tuple21 a e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 f (tuple21 a e))))) (sort
  (set1 (tuple2 f1 (tuple2 a1 e1))) (t2tb3262 x))))

(declare-fun tb2t3262 (uni) (set (tuple21 f (tuple21 a e))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 f (tuple21 a e)))))
  (! (= (tb2t3262 (t2tb3262 i)) i) :pattern ((t2tb3262 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 f1 (tuple2 a1 e1))) j)
     (= (t2tb3262 (tb2t3262 j)) j)) :pattern ((t2tb3262 (tb2t3262 j))) )))

(declare-fun t2tb3263 ((tuple21 f (tuple21 a e))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 f (tuple21 a e)))) (sort (tuple2 f1 (tuple2 a1 e1))
  (t2tb3263 x))))

(declare-fun tb2t3263 (uni) (tuple21 f (tuple21 a e)))

;; BridgeL
  (assert
  (forall ((i (tuple21 f (tuple21 a e))))
  (! (= (tb2t3263 (t2tb3263 i)) i) :pattern ((t2tb3263 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 f1 (tuple2 a1 e1)) j) (= (t2tb3263 (tb2t3263 j)) j)) :pattern (
  (t2tb3263 (tb2t3263 j))) )))

;; mem_times
  (assert
  (forall ((s (set f)) (t (set (tuple21 a e))) (x f) (y (tuple21 a e)))
  (= (mem (tuple2 f1 (tuple2 a1 e1))
  (Tuple2 f1 (tuple2 a1 e1) (t2tb2954 x) (t2tb2949 y))
  (times (tuple2 a1 e1) f1 (t2tb2946 s) (t2tb2943 t)))
  (and (mem37 x s) (mem44 y t)))))

(declare-fun t2tb3264 ((set (tuple21 f (tuple21 (tuple21 b d) (tuple21 e
  f))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 f (tuple21 (tuple21 b d) (tuple21 e f)))))) (sort
  (set1 (tuple2 f1 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)))) (t2tb3264 x))))

(declare-fun tb2t3264 (uni) (set (tuple21 f (tuple21 (tuple21 b d) (tuple21 e
  f)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 f (tuple21 (tuple21 b d) (tuple21 e f))))))
  (! (= (tb2t3264 (t2tb3264 i)) i) :pattern ((t2tb3264 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 f1 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)))) j)
     (= (t2tb3264 (tb2t3264 j)) j)) :pattern ((t2tb3264 (tb2t3264 j))) )))

(declare-fun t2tb3265 ((tuple21 f (tuple21 (tuple21 b d) (tuple21 e
  f)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 f (tuple21 (tuple21 b d) (tuple21 e f))))) (sort
  (tuple2 f1 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1))) (t2tb3265 x))))

(declare-fun tb2t3265 (uni) (tuple21 f (tuple21 (tuple21 b d) (tuple21 e
  f))))

;; BridgeL
  (assert
  (forall ((i (tuple21 f (tuple21 (tuple21 b d) (tuple21 e f)))))
  (! (= (tb2t3265 (t2tb3265 i)) i) :pattern ((t2tb3265 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 f1 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1))) j)
     (= (t2tb3265 (tb2t3265 j)) j)) :pattern ((t2tb3265 (tb2t3265 j))) )))

;; mem_times
  (assert
  (forall ((s (set f)) (t (set (tuple21 (tuple21 b d) (tuple21 e f)))) (x f)
  (y (tuple21 (tuple21 b d) (tuple21 e f))))
  (= (mem (tuple2 f1 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)))
  (Tuple2 f1 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (t2tb2954 x)
  (t2tb2950 y))
  (times (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) f1 (t2tb2946 s) (t2tb2944 t)))
  (and (mem37 x s) (mem43 y t)))))

(declare-fun t2tb3266 ((set (tuple21 f (tuple21 (tuple21 a c) (tuple21 e
  f))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 f (tuple21 (tuple21 a c) (tuple21 e f)))))) (sort
  (set1 (tuple2 f1 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)))) (t2tb3266 x))))

(declare-fun tb2t3266 (uni) (set (tuple21 f (tuple21 (tuple21 a c) (tuple21 e
  f)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 f (tuple21 (tuple21 a c) (tuple21 e f))))))
  (! (= (tb2t3266 (t2tb3266 i)) i) :pattern ((t2tb3266 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 f1 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)))) j)
     (= (t2tb3266 (tb2t3266 j)) j)) :pattern ((t2tb3266 (tb2t3266 j))) )))

(declare-fun t2tb3267 ((tuple21 f (tuple21 (tuple21 a c) (tuple21 e
  f)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 f (tuple21 (tuple21 a c) (tuple21 e f))))) (sort
  (tuple2 f1 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1))) (t2tb3267 x))))

(declare-fun tb2t3267 (uni) (tuple21 f (tuple21 (tuple21 a c) (tuple21 e
  f))))

;; BridgeL
  (assert
  (forall ((i (tuple21 f (tuple21 (tuple21 a c) (tuple21 e f)))))
  (! (= (tb2t3267 (t2tb3267 i)) i) :pattern ((t2tb3267 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 f1 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1))) j)
     (= (t2tb3267 (tb2t3267 j)) j)) :pattern ((t2tb3267 (tb2t3267 j))) )))

;; mem_times
  (assert
  (forall ((s (set f)) (t (set (tuple21 (tuple21 a c) (tuple21 e f)))) (x f)
  (y (tuple21 (tuple21 a c) (tuple21 e f))))
  (= (mem (tuple2 f1 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)))
  (Tuple2 f1 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (t2tb2954 x)
  (t2tb2951 y))
  (times (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) f1 (t2tb2946 s) (t2tb2945 t)))
  (and (mem37 x s) (mem42 y t)))))

(declare-fun t2tb3268 ((set (tuple21 f (set (tuple21 d f))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 f (set (tuple21 d f)))))) (sort
  (set1 (tuple2 f1 (set1 (tuple2 d1 f1)))) (t2tb3268 x))))

(declare-fun tb2t3268 (uni) (set (tuple21 f (set (tuple21 d f)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 f (set (tuple21 d f))))))
  (! (= (tb2t3268 (t2tb3268 i)) i) :pattern ((t2tb3268 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 f1 (set1 (tuple2 d1 f1)))) j)
     (= (t2tb3268 (tb2t3268 j)) j)) :pattern ((t2tb3268 (tb2t3268 j))) )))

(declare-fun t2tb3269 ((tuple21 f (set (tuple21 d f)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 f (set (tuple21 d f))))) (sort
  (tuple2 f1 (set1 (tuple2 d1 f1))) (t2tb3269 x))))

(declare-fun tb2t3269 (uni) (tuple21 f (set (tuple21 d f))))

;; BridgeL
  (assert
  (forall ((i (tuple21 f (set (tuple21 d f)))))
  (! (= (tb2t3269 (t2tb3269 i)) i) :pattern ((t2tb3269 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 f1 (set1 (tuple2 d1 f1))) j)
     (= (t2tb3269 (tb2t3269 j)) j)) :pattern ((t2tb3269 (tb2t3269 j))) )))

;; mem_times
  (assert
  (forall ((s (set f)) (t (set (set (tuple21 d f)))) (x f) (y (set (tuple21 d
  f))))
  (= (mem (tuple2 f1 (set1 (tuple2 d1 f1)))
  (Tuple2 f1 (set1 (tuple2 d1 f1)) (t2tb2954 x) (t2tb2938 y))
  (times (set1 (tuple2 d1 f1)) f1 (t2tb2946 s) (t2tb2939 t)))
  (and (mem37 x s) (mem41 y t)))))

(declare-fun t2tb3270 ((set (tuple21 f (tuple21 d f)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 f (tuple21 d f))))) (sort
  (set1 (tuple2 f1 (tuple2 d1 f1))) (t2tb3270 x))))

(declare-fun tb2t3270 (uni) (set (tuple21 f (tuple21 d f))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 f (tuple21 d f)))))
  (! (= (tb2t3270 (t2tb3270 i)) i) :pattern ((t2tb3270 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 f1 (tuple2 d1 f1))) j)
     (= (t2tb3270 (tb2t3270 j)) j)) :pattern ((t2tb3270 (tb2t3270 j))) )))

(declare-fun t2tb3271 ((tuple21 f (tuple21 d f))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 f (tuple21 d f)))) (sort (tuple2 f1 (tuple2 d1 f1))
  (t2tb3271 x))))

(declare-fun tb2t3271 (uni) (tuple21 f (tuple21 d f)))

;; BridgeL
  (assert
  (forall ((i (tuple21 f (tuple21 d f))))
  (! (= (tb2t3271 (t2tb3271 i)) i) :pattern ((t2tb3271 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 f1 (tuple2 d1 f1)) j) (= (t2tb3271 (tb2t3271 j)) j)) :pattern (
  (t2tb3271 (tb2t3271 j))) )))

;; mem_times
  (assert
  (forall ((s (set f)) (t (set (tuple21 d f))) (x f) (y (tuple21 d f)))
  (= (mem (tuple2 f1 (tuple2 d1 f1))
  (Tuple2 f1 (tuple2 d1 f1) (t2tb2954 x) (t2tb2952 y))
  (times (tuple2 d1 f1) f1 (t2tb2946 s) (t2tb2938 t)))
  (and (mem37 x s) (mem40 y t)))))

(declare-fun t2tb3272 ((set (tuple21 f (set (tuple21 b e))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 f (set (tuple21 b e)))))) (sort
  (set1 (tuple2 f1 (set1 (tuple2 b1 e1)))) (t2tb3272 x))))

(declare-fun tb2t3272 (uni) (set (tuple21 f (set (tuple21 b e)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 f (set (tuple21 b e))))))
  (! (= (tb2t3272 (t2tb3272 i)) i) :pattern ((t2tb3272 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 f1 (set1 (tuple2 b1 e1)))) j)
     (= (t2tb3272 (tb2t3272 j)) j)) :pattern ((t2tb3272 (tb2t3272 j))) )))

(declare-fun t2tb3273 ((tuple21 f (set (tuple21 b e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 f (set (tuple21 b e))))) (sort
  (tuple2 f1 (set1 (tuple2 b1 e1))) (t2tb3273 x))))

(declare-fun tb2t3273 (uni) (tuple21 f (set (tuple21 b e))))

;; BridgeL
  (assert
  (forall ((i (tuple21 f (set (tuple21 b e)))))
  (! (= (tb2t3273 (t2tb3273 i)) i) :pattern ((t2tb3273 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 f1 (set1 (tuple2 b1 e1))) j)
     (= (t2tb3273 (tb2t3273 j)) j)) :pattern ((t2tb3273 (tb2t3273 j))) )))

;; mem_times
  (assert
  (forall ((s (set f)) (t (set (set (tuple21 b e)))) (x f) (y (set (tuple21 b
  e))))
  (= (mem (tuple2 f1 (set1 (tuple2 b1 e1)))
  (Tuple2 f1 (set1 (tuple2 b1 e1)) (t2tb2954 x) (t2tb2940 y))
  (times (set1 (tuple2 b1 e1)) f1 (t2tb2946 s) (t2tb2941 t)))
  (and (mem37 x s) (mem39 y t)))))

(declare-fun t2tb3274 ((set (tuple21 f (tuple21 b e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 f (tuple21 b e))))) (sort
  (set1 (tuple2 f1 (tuple2 b1 e1))) (t2tb3274 x))))

(declare-fun tb2t3274 (uni) (set (tuple21 f (tuple21 b e))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 f (tuple21 b e)))))
  (! (= (tb2t3274 (t2tb3274 i)) i) :pattern ((t2tb3274 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 f1 (tuple2 b1 e1))) j)
     (= (t2tb3274 (tb2t3274 j)) j)) :pattern ((t2tb3274 (tb2t3274 j))) )))

(declare-fun t2tb3275 ((tuple21 f (tuple21 b e))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 f (tuple21 b e)))) (sort (tuple2 f1 (tuple2 b1 e1))
  (t2tb3275 x))))

(declare-fun tb2t3275 (uni) (tuple21 f (tuple21 b e)))

;; BridgeL
  (assert
  (forall ((i (tuple21 f (tuple21 b e))))
  (! (= (tb2t3275 (t2tb3275 i)) i) :pattern ((t2tb3275 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 f1 (tuple2 b1 e1)) j) (= (t2tb3275 (tb2t3275 j)) j)) :pattern (
  (t2tb3275 (tb2t3275 j))) )))

;; mem_times
  (assert
  (forall ((s (set f)) (t (set (tuple21 b e))) (x f) (y (tuple21 b e)))
  (= (mem (tuple2 f1 (tuple2 b1 e1))
  (Tuple2 f1 (tuple2 b1 e1) (t2tb2954 x) (t2tb2953 y))
  (times (tuple2 b1 e1) f1 (t2tb2946 s) (t2tb2940 t)))
  (and (mem37 x s) (mem38 y t)))))

(declare-fun t2tb3276 ((set (tuple21 f f))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 f f)))) (sort (set1 (tuple2 f1 f1))
  (t2tb3276 x))))

(declare-fun tb2t3276 (uni) (set (tuple21 f f)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 f f))))
  (! (= (tb2t3276 (t2tb3276 i)) i) :pattern ((t2tb3276 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 f1 f1)) j) (= (t2tb3276 (tb2t3276 j)) j)) :pattern (
  (t2tb3276 (tb2t3276 j))) )))

(declare-fun t2tb3277 ((tuple21 f f)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 f f))) (sort (tuple2 f1 f1) (t2tb3277 x))))

(declare-fun tb2t3277 (uni) (tuple21 f f))

;; BridgeL
  (assert
  (forall ((i (tuple21 f f)))
  (! (= (tb2t3277 (t2tb3277 i)) i) :pattern ((t2tb3277 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 f1 f1) j) (= (t2tb3277 (tb2t3277 j)) j)) :pattern (
  (t2tb3277 (tb2t3277 j))) )))

;; mem_times
  (assert
  (forall ((s (set f)) (t (set f)) (x f) (y f))
  (= (mem (tuple2 f1 f1) (Tuple2 f1 f1 (t2tb2954 x) (t2tb2954 y))
  (times f1 f1 (t2tb2946 s) (t2tb2946 t))) (and (mem37 x s) (mem37 y t)))))

(declare-fun t2tb3278 ((set (tuple21 f e))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 f e)))) (sort (set1 (tuple2 f1 e1))
  (t2tb3278 x))))

(declare-fun tb2t3278 (uni) (set (tuple21 f e)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 f e))))
  (! (= (tb2t3278 (t2tb3278 i)) i) :pattern ((t2tb3278 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 f1 e1)) j) (= (t2tb3278 (tb2t3278 j)) j)) :pattern (
  (t2tb3278 (tb2t3278 j))) )))

(declare-fun t2tb3279 ((tuple21 f e)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 f e))) (sort (tuple2 f1 e1) (t2tb3279 x))))

(declare-fun tb2t3279 (uni) (tuple21 f e))

;; BridgeL
  (assert
  (forall ((i (tuple21 f e)))
  (! (= (tb2t3279 (t2tb3279 i)) i) :pattern ((t2tb3279 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 f1 e1) j) (= (t2tb3279 (tb2t3279 j)) j)) :pattern (
  (t2tb3279 (tb2t3279 j))) )))

;; mem_times
  (assert
  (forall ((s (set f)) (t (set e)) (x f) (y e))
  (= (mem (tuple2 f1 e1) (Tuple2 f1 e1 (t2tb2954 x) (t2tb2955 y))
  (times e1 f1 (t2tb2946 s) (t2tb2947 t))) (and (mem37 x s) (mem36 y t)))))

(declare-fun t2tb3280 ((set (tuple21 f (tuple21 (tuple21 a c) (tuple21 b
  d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 f (tuple21 (tuple21 a c) (tuple21 b d)))))) (sort
  (set1 (tuple2 f1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))) (t2tb3280 x))))

(declare-fun tb2t3280 (uni) (set (tuple21 f (tuple21 (tuple21 a c) (tuple21 b
  d)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 f (tuple21 (tuple21 a c) (tuple21 b d))))))
  (! (= (tb2t3280 (t2tb3280 i)) i) :pattern ((t2tb3280 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 f1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))) j)
     (= (t2tb3280 (tb2t3280 j)) j)) :pattern ((t2tb3280 (tb2t3280 j))) )))

(declare-fun t2tb3281 ((tuple21 f (tuple21 (tuple21 a c) (tuple21 b
  d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 f (tuple21 (tuple21 a c) (tuple21 b d))))) (sort
  (tuple2 f1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))) (t2tb3281 x))))

(declare-fun tb2t3281 (uni) (tuple21 f (tuple21 (tuple21 a c) (tuple21 b
  d))))

;; BridgeL
  (assert
  (forall ((i (tuple21 f (tuple21 (tuple21 a c) (tuple21 b d)))))
  (! (= (tb2t3281 (t2tb3281 i)) i) :pattern ((t2tb3281 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 f1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))) j)
     (= (t2tb3281 (tb2t3281 j)) j)) :pattern ((t2tb3281 (tb2t3281 j))) )))

;; mem_times
  (assert
  (forall ((s (set f)) (t (set (tuple21 (tuple21 a c) (tuple21 b d)))) (x f)
  (y (tuple21 (tuple21 a c) (tuple21 b d))))
  (= (mem (tuple2 f1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
  (Tuple2 f1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb2954 x) (t2tb691 y))
  (times (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) f1 (t2tb2946 s) (t2tb686 t)))
  (and (mem37 x s) (mem24 y t)))))

(declare-fun t2tb3282 ((set (tuple21 f (set (tuple21 c d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 f (set (tuple21 c d)))))) (sort
  (set1 (tuple2 f1 (set1 (tuple2 c1 d1)))) (t2tb3282 x))))

(declare-fun tb2t3282 (uni) (set (tuple21 f (set (tuple21 c d)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 f (set (tuple21 c d))))))
  (! (= (tb2t3282 (t2tb3282 i)) i) :pattern ((t2tb3282 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 f1 (set1 (tuple2 c1 d1)))) j)
     (= (t2tb3282 (tb2t3282 j)) j)) :pattern ((t2tb3282 (tb2t3282 j))) )))

(declare-fun t2tb3283 ((tuple21 f (set (tuple21 c d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 f (set (tuple21 c d))))) (sort
  (tuple2 f1 (set1 (tuple2 c1 d1))) (t2tb3283 x))))

(declare-fun tb2t3283 (uni) (tuple21 f (set (tuple21 c d))))

;; BridgeL
  (assert
  (forall ((i (tuple21 f (set (tuple21 c d)))))
  (! (= (tb2t3283 (t2tb3283 i)) i) :pattern ((t2tb3283 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 f1 (set1 (tuple2 c1 d1))) j)
     (= (t2tb3283 (tb2t3283 j)) j)) :pattern ((t2tb3283 (tb2t3283 j))) )))

;; mem_times
  (assert
  (forall ((s (set f)) (t (set (set (tuple21 c d)))) (x f) (y (set (tuple21 c
  d))))
  (= (mem (tuple2 f1 (set1 (tuple2 c1 d1)))
  (Tuple2 f1 (set1 (tuple2 c1 d1)) (t2tb2954 x) (t2tb689 y))
  (times (set1 (tuple2 c1 d1)) f1 (t2tb2946 s) (t2tb688 t)))
  (and (mem37 x s) (mem22 y t)))))

(declare-fun t2tb3284 ((set (tuple21 f (tuple21 c d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 f (tuple21 c d))))) (sort
  (set1 (tuple2 f1 (tuple2 c1 d1))) (t2tb3284 x))))

(declare-fun tb2t3284 (uni) (set (tuple21 f (tuple21 c d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 f (tuple21 c d)))))
  (! (= (tb2t3284 (t2tb3284 i)) i) :pattern ((t2tb3284 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 f1 (tuple2 c1 d1))) j)
     (= (t2tb3284 (tb2t3284 j)) j)) :pattern ((t2tb3284 (tb2t3284 j))) )))

(declare-fun t2tb3285 ((tuple21 f (tuple21 c d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 f (tuple21 c d)))) (sort (tuple2 f1 (tuple2 c1 d1))
  (t2tb3285 x))))

(declare-fun tb2t3285 (uni) (tuple21 f (tuple21 c d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 f (tuple21 c d))))
  (! (= (tb2t3285 (t2tb3285 i)) i) :pattern ((t2tb3285 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 f1 (tuple2 c1 d1)) j) (= (t2tb3285 (tb2t3285 j)) j)) :pattern (
  (t2tb3285 (tb2t3285 j))) )))

;; mem_times
  (assert
  (forall ((s (set f)) (t (set (tuple21 c d))) (x f) (y (tuple21 c d)))
  (= (mem (tuple2 f1 (tuple2 c1 d1))
  (Tuple2 f1 (tuple2 c1 d1) (t2tb2954 x) (t2tb693 y))
  (times (tuple2 c1 d1) f1 (t2tb2946 s) (t2tb689 t)))
  (and (mem37 x s) (mem21 y t)))))

(declare-fun t2tb3286 ((set (tuple21 f d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 f d)))) (sort (set1 (tuple2 f1 d1))
  (t2tb3286 x))))

(declare-fun tb2t3286 (uni) (set (tuple21 f d)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 f d))))
  (! (= (tb2t3286 (t2tb3286 i)) i) :pattern ((t2tb3286 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 f1 d1)) j) (= (t2tb3286 (tb2t3286 j)) j)) :pattern (
  (t2tb3286 (tb2t3286 j))) )))

(declare-fun t2tb3287 ((tuple21 f d)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 f d))) (sort (tuple2 f1 d1) (t2tb3287 x))))

(declare-fun tb2t3287 (uni) (tuple21 f d))

;; BridgeL
  (assert
  (forall ((i (tuple21 f d)))
  (! (= (tb2t3287 (t2tb3287 i)) i) :pattern ((t2tb3287 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 f1 d1) j) (= (t2tb3287 (tb2t3287 j)) j)) :pattern (
  (t2tb3287 (tb2t3287 j))) )))

;; mem_times
  (assert
  (forall ((s (set f)) (t (set d)) (x f) (y d))
  (= (mem (tuple2 f1 d1) (Tuple2 f1 d1 (t2tb2954 x) (t2tb694 y))
  (times d1 f1 (t2tb2946 s) (t2tb690 t))) (and (mem37 x s) (mem20 y t)))))

(declare-fun t2tb3288 ((set (tuple21 f c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 f c)))) (sort (set1 (tuple2 f1 c1))
  (t2tb3288 x))))

(declare-fun tb2t3288 (uni) (set (tuple21 f c)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 f c))))
  (! (= (tb2t3288 (t2tb3288 i)) i) :pattern ((t2tb3288 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 f1 c1)) j) (= (t2tb3288 (tb2t3288 j)) j)) :pattern (
  (t2tb3288 (tb2t3288 j))) )))

(declare-fun t2tb3289 ((tuple21 f c)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 f c))) (sort (tuple2 f1 c1) (t2tb3289 x))))

(declare-fun tb2t3289 (uni) (tuple21 f c))

;; BridgeL
  (assert
  (forall ((i (tuple21 f c)))
  (! (= (tb2t3289 (t2tb3289 i)) i) :pattern ((t2tb3289 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 f1 c1) j) (= (t2tb3289 (tb2t3289 j)) j)) :pattern (
  (t2tb3289 (tb2t3289 j))) )))

;; mem_times
  (assert
  (forall ((s (set f)) (t (set c)) (x f) (y c))
  (= (mem (tuple2 f1 c1) (Tuple2 f1 c1 (t2tb2954 x) (t2tb135 y))
  (times c1 f1 (t2tb2946 s) (t2tb132 t))) (and (mem37 x s) (mem7 y t)))))

(declare-fun t2tb3290 ((set (tuple21 f (set (tuple21 a b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 f (set (tuple21 a b)))))) (sort
  (set1 (tuple2 f1 (set1 (tuple2 a1 b1)))) (t2tb3290 x))))

(declare-fun tb2t3290 (uni) (set (tuple21 f (set (tuple21 a b)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 f (set (tuple21 a b))))))
  (! (= (tb2t3290 (t2tb3290 i)) i) :pattern ((t2tb3290 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 f1 (set1 (tuple2 a1 b1)))) j)
     (= (t2tb3290 (tb2t3290 j)) j)) :pattern ((t2tb3290 (tb2t3290 j))) )))

(declare-fun t2tb3291 ((tuple21 f (set (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 f (set (tuple21 a b))))) (sort
  (tuple2 f1 (set1 (tuple2 a1 b1))) (t2tb3291 x))))

(declare-fun tb2t3291 (uni) (tuple21 f (set (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (tuple21 f (set (tuple21 a b)))))
  (! (= (tb2t3291 (t2tb3291 i)) i) :pattern ((t2tb3291 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 f1 (set1 (tuple2 a1 b1))) j)
     (= (t2tb3291 (tb2t3291 j)) j)) :pattern ((t2tb3291 (tb2t3291 j))) )))

;; mem_times
  (assert
  (forall ((s (set f)) (t (set (set (tuple21 a b)))) (x f) (y (set (tuple21 a
  b))))
  (= (mem (tuple2 f1 (set1 (tuple2 a1 b1)))
  (Tuple2 f1 (set1 (tuple2 a1 b1)) (t2tb2954 x) (t2tb11 y))
  (times (set1 (tuple2 a1 b1)) f1 (t2tb2946 s) (t2tb10 t)))
  (and (mem37 x s) (mem4 y t)))))

(declare-fun t2tb3292 ((set (tuple21 f (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 f (tuple21 a b))))) (sort
  (set1 (tuple2 f1 (tuple2 a1 b1))) (t2tb3292 x))))

(declare-fun tb2t3292 (uni) (set (tuple21 f (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 f (tuple21 a b)))))
  (! (= (tb2t3292 (t2tb3292 i)) i) :pattern ((t2tb3292 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 f1 (tuple2 a1 b1))) j)
     (= (t2tb3292 (tb2t3292 j)) j)) :pattern ((t2tb3292 (tb2t3292 j))) )))

(declare-fun t2tb3293 ((tuple21 f (tuple21 a b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 f (tuple21 a b)))) (sort (tuple2 f1 (tuple2 a1 b1))
  (t2tb3293 x))))

(declare-fun tb2t3293 (uni) (tuple21 f (tuple21 a b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 f (tuple21 a b))))
  (! (= (tb2t3293 (t2tb3293 i)) i) :pattern ((t2tb3293 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 f1 (tuple2 a1 b1)) j) (= (t2tb3293 (tb2t3293 j)) j)) :pattern (
  (t2tb3293 (tb2t3293 j))) )))

;; mem_times
  (assert
  (forall ((s (set f)) (t (set (tuple21 a b))) (x f) (y (tuple21 a b)))
  (= (mem (tuple2 f1 (tuple2 a1 b1))
  (Tuple2 f1 (tuple2 a1 b1) (t2tb2954 x) (t2tb13 y))
  (times (tuple2 a1 b1) f1 (t2tb2946 s) (t2tb11 t)))
  (and (mem37 x s) (mem3 y t)))))

(declare-fun t2tb3294 ((set (tuple21 f b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 f b)))) (sort (set1 (tuple2 f1 b1))
  (t2tb3294 x))))

(declare-fun tb2t3294 (uni) (set (tuple21 f b)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 f b))))
  (! (= (tb2t3294 (t2tb3294 i)) i) :pattern ((t2tb3294 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 f1 b1)) j) (= (t2tb3294 (tb2t3294 j)) j)) :pattern (
  (t2tb3294 (tb2t3294 j))) )))

(declare-fun t2tb3295 ((tuple21 f b)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 f b))) (sort (tuple2 f1 b1) (t2tb3295 x))))

(declare-fun tb2t3295 (uni) (tuple21 f b))

;; BridgeL
  (assert
  (forall ((i (tuple21 f b)))
  (! (= (tb2t3295 (t2tb3295 i)) i) :pattern ((t2tb3295 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 f1 b1) j) (= (t2tb3295 (tb2t3295 j)) j)) :pattern (
  (t2tb3295 (tb2t3295 j))) )))

;; mem_times
  (assert
  (forall ((s (set f)) (t (set b)) (x f) (y b))
  (= (mem (tuple2 f1 b1) (Tuple2 f1 b1 (t2tb2954 x) (t2tb14 y))
  (times b1 f1 (t2tb2946 s) (t2tb12 t))) (and (mem37 x s) (mem2 y t)))))

(declare-fun t2tb3296 ((set (tuple21 f a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 f a)))) (sort (set1 (tuple2 f1 a1))
  (t2tb3296 x))))

(declare-fun tb2t3296 (uni) (set (tuple21 f a)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 f a))))
  (! (= (tb2t3296 (t2tb3296 i)) i) :pattern ((t2tb3296 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 f1 a1)) j) (= (t2tb3296 (tb2t3296 j)) j)) :pattern (
  (t2tb3296 (tb2t3296 j))) )))

(declare-fun t2tb3297 ((tuple21 f a)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 f a))) (sort (tuple2 f1 a1) (t2tb3297 x))))

(declare-fun tb2t3297 (uni) (tuple21 f a))

;; BridgeL
  (assert
  (forall ((i (tuple21 f a)))
  (! (= (tb2t3297 (t2tb3297 i)) i) :pattern ((t2tb3297 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 f1 a1) j) (= (t2tb3297 (tb2t3297 j)) j)) :pattern (
  (t2tb3297 (tb2t3297 j))) )))

;; mem_times
  (assert
  (forall ((s (set f)) (t (set a)) (x f) (y a))
  (= (mem (tuple2 f1 a1) (Tuple2 f1 a1 (t2tb2954 x) (t2tb2 y))
  (times a1 f1 (t2tb2946 s) (t2tb1 t))) (and (mem37 x s) (mem1 y t)))))

;; mem_times
  (assert
  (forall ((b2 ty))
  (forall ((s (set f)) (t uni) (x f) (y uni))
  (= (mem (tuple2 f1 b2) (Tuple2 f1 b2 (t2tb2954 x) y)
  (times b2 f1 (t2tb2946 s) t)) (and (mem37 x s) (mem b2 y t))))))

(declare-fun t2tb3298 ((set (tuple21 e (tuple21 c f)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 e (tuple21 c f))))) (sort
  (set1 (tuple2 e1 (tuple2 c1 f1))) (t2tb3298 x))))

(declare-fun tb2t3298 (uni) (set (tuple21 e (tuple21 c f))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 e (tuple21 c f)))))
  (! (= (tb2t3298 (t2tb3298 i)) i) :pattern ((t2tb3298 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 e1 (tuple2 c1 f1))) j)
     (= (t2tb3298 (tb2t3298 j)) j)) :pattern ((t2tb3298 (tb2t3298 j))) )))

(declare-fun t2tb3299 ((tuple21 e (tuple21 c f))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 e (tuple21 c f)))) (sort (tuple2 e1 (tuple2 c1 f1))
  (t2tb3299 x))))

(declare-fun tb2t3299 (uni) (tuple21 e (tuple21 c f)))

;; BridgeL
  (assert
  (forall ((i (tuple21 e (tuple21 c f))))
  (! (= (tb2t3299 (t2tb3299 i)) i) :pattern ((t2tb3299 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 e1 (tuple2 c1 f1)) j) (= (t2tb3299 (tb2t3299 j)) j)) :pattern (
  (t2tb3299 (tb2t3299 j))) )))

;; mem_times
  (assert
  (forall ((s (set e)) (t (set (tuple21 c f))) (x e) (y (tuple21 c f)))
  (= (mem (tuple2 e1 (tuple2 c1 f1))
  (Tuple2 e1 (tuple2 c1 f1) (t2tb2955 x) (t2tb2948 y))
  (times (tuple2 c1 f1) e1 (t2tb2947 s) (t2tb2942 t)))
  (and (mem36 x s) (mem45 y t)))))

(declare-fun t2tb3300 ((set (tuple21 e (tuple21 a e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 e (tuple21 a e))))) (sort
  (set1 (tuple2 e1 (tuple2 a1 e1))) (t2tb3300 x))))

(declare-fun tb2t3300 (uni) (set (tuple21 e (tuple21 a e))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 e (tuple21 a e)))))
  (! (= (tb2t3300 (t2tb3300 i)) i) :pattern ((t2tb3300 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 e1 (tuple2 a1 e1))) j)
     (= (t2tb3300 (tb2t3300 j)) j)) :pattern ((t2tb3300 (tb2t3300 j))) )))

(declare-fun t2tb3301 ((tuple21 e (tuple21 a e))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 e (tuple21 a e)))) (sort (tuple2 e1 (tuple2 a1 e1))
  (t2tb3301 x))))

(declare-fun tb2t3301 (uni) (tuple21 e (tuple21 a e)))

;; BridgeL
  (assert
  (forall ((i (tuple21 e (tuple21 a e))))
  (! (= (tb2t3301 (t2tb3301 i)) i) :pattern ((t2tb3301 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 e1 (tuple2 a1 e1)) j) (= (t2tb3301 (tb2t3301 j)) j)) :pattern (
  (t2tb3301 (tb2t3301 j))) )))

;; mem_times
  (assert
  (forall ((s (set e)) (t (set (tuple21 a e))) (x e) (y (tuple21 a e)))
  (= (mem (tuple2 e1 (tuple2 a1 e1))
  (Tuple2 e1 (tuple2 a1 e1) (t2tb2955 x) (t2tb2949 y))
  (times (tuple2 a1 e1) e1 (t2tb2947 s) (t2tb2943 t)))
  (and (mem36 x s) (mem44 y t)))))

(declare-fun t2tb3302 ((set (tuple21 e (tuple21 (tuple21 b d) (tuple21 e
  f))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 e (tuple21 (tuple21 b d) (tuple21 e f)))))) (sort
  (set1 (tuple2 e1 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)))) (t2tb3302 x))))

(declare-fun tb2t3302 (uni) (set (tuple21 e (tuple21 (tuple21 b d) (tuple21 e
  f)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 e (tuple21 (tuple21 b d) (tuple21 e f))))))
  (! (= (tb2t3302 (t2tb3302 i)) i) :pattern ((t2tb3302 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 e1 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)))) j)
     (= (t2tb3302 (tb2t3302 j)) j)) :pattern ((t2tb3302 (tb2t3302 j))) )))

(declare-fun t2tb3303 ((tuple21 e (tuple21 (tuple21 b d) (tuple21 e
  f)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 e (tuple21 (tuple21 b d) (tuple21 e f))))) (sort
  (tuple2 e1 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1))) (t2tb3303 x))))

(declare-fun tb2t3303 (uni) (tuple21 e (tuple21 (tuple21 b d) (tuple21 e
  f))))

;; BridgeL
  (assert
  (forall ((i (tuple21 e (tuple21 (tuple21 b d) (tuple21 e f)))))
  (! (= (tb2t3303 (t2tb3303 i)) i) :pattern ((t2tb3303 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 e1 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1))) j)
     (= (t2tb3303 (tb2t3303 j)) j)) :pattern ((t2tb3303 (tb2t3303 j))) )))

;; mem_times
  (assert
  (forall ((s (set e)) (t (set (tuple21 (tuple21 b d) (tuple21 e f)))) (x e)
  (y (tuple21 (tuple21 b d) (tuple21 e f))))
  (= (mem (tuple2 e1 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)))
  (Tuple2 e1 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (t2tb2955 x)
  (t2tb2950 y))
  (times (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) e1 (t2tb2947 s) (t2tb2944 t)))
  (and (mem36 x s) (mem43 y t)))))

(declare-fun t2tb3304 ((set (tuple21 e (tuple21 (tuple21 a c) (tuple21 e
  f))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 e (tuple21 (tuple21 a c) (tuple21 e f)))))) (sort
  (set1 (tuple2 e1 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)))) (t2tb3304 x))))

(declare-fun tb2t3304 (uni) (set (tuple21 e (tuple21 (tuple21 a c) (tuple21 e
  f)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 e (tuple21 (tuple21 a c) (tuple21 e f))))))
  (! (= (tb2t3304 (t2tb3304 i)) i) :pattern ((t2tb3304 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 e1 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)))) j)
     (= (t2tb3304 (tb2t3304 j)) j)) :pattern ((t2tb3304 (tb2t3304 j))) )))

(declare-fun t2tb3305 ((tuple21 e (tuple21 (tuple21 a c) (tuple21 e
  f)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 e (tuple21 (tuple21 a c) (tuple21 e f))))) (sort
  (tuple2 e1 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1))) (t2tb3305 x))))

(declare-fun tb2t3305 (uni) (tuple21 e (tuple21 (tuple21 a c) (tuple21 e
  f))))

;; BridgeL
  (assert
  (forall ((i (tuple21 e (tuple21 (tuple21 a c) (tuple21 e f)))))
  (! (= (tb2t3305 (t2tb3305 i)) i) :pattern ((t2tb3305 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 e1 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1))) j)
     (= (t2tb3305 (tb2t3305 j)) j)) :pattern ((t2tb3305 (tb2t3305 j))) )))

;; mem_times
  (assert
  (forall ((s (set e)) (t (set (tuple21 (tuple21 a c) (tuple21 e f)))) (x e)
  (y (tuple21 (tuple21 a c) (tuple21 e f))))
  (= (mem (tuple2 e1 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)))
  (Tuple2 e1 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (t2tb2955 x)
  (t2tb2951 y))
  (times (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) e1 (t2tb2947 s) (t2tb2945 t)))
  (and (mem36 x s) (mem42 y t)))))

(declare-fun t2tb3306 ((set (tuple21 e (set (tuple21 d f))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 e (set (tuple21 d f)))))) (sort
  (set1 (tuple2 e1 (set1 (tuple2 d1 f1)))) (t2tb3306 x))))

(declare-fun tb2t3306 (uni) (set (tuple21 e (set (tuple21 d f)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 e (set (tuple21 d f))))))
  (! (= (tb2t3306 (t2tb3306 i)) i) :pattern ((t2tb3306 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 e1 (set1 (tuple2 d1 f1)))) j)
     (= (t2tb3306 (tb2t3306 j)) j)) :pattern ((t2tb3306 (tb2t3306 j))) )))

(declare-fun t2tb3307 ((tuple21 e (set (tuple21 d f)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 e (set (tuple21 d f))))) (sort
  (tuple2 e1 (set1 (tuple2 d1 f1))) (t2tb3307 x))))

(declare-fun tb2t3307 (uni) (tuple21 e (set (tuple21 d f))))

;; BridgeL
  (assert
  (forall ((i (tuple21 e (set (tuple21 d f)))))
  (! (= (tb2t3307 (t2tb3307 i)) i) :pattern ((t2tb3307 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 e1 (set1 (tuple2 d1 f1))) j)
     (= (t2tb3307 (tb2t3307 j)) j)) :pattern ((t2tb3307 (tb2t3307 j))) )))

;; mem_times
  (assert
  (forall ((s (set e)) (t (set (set (tuple21 d f)))) (x e) (y (set (tuple21 d
  f))))
  (= (mem (tuple2 e1 (set1 (tuple2 d1 f1)))
  (Tuple2 e1 (set1 (tuple2 d1 f1)) (t2tb2955 x) (t2tb2938 y))
  (times (set1 (tuple2 d1 f1)) e1 (t2tb2947 s) (t2tb2939 t)))
  (and (mem36 x s) (mem41 y t)))))

(declare-fun t2tb3308 ((set (tuple21 e (tuple21 d f)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 e (tuple21 d f))))) (sort
  (set1 (tuple2 e1 (tuple2 d1 f1))) (t2tb3308 x))))

(declare-fun tb2t3308 (uni) (set (tuple21 e (tuple21 d f))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 e (tuple21 d f)))))
  (! (= (tb2t3308 (t2tb3308 i)) i) :pattern ((t2tb3308 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 e1 (tuple2 d1 f1))) j)
     (= (t2tb3308 (tb2t3308 j)) j)) :pattern ((t2tb3308 (tb2t3308 j))) )))

(declare-fun t2tb3309 ((tuple21 e (tuple21 d f))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 e (tuple21 d f)))) (sort (tuple2 e1 (tuple2 d1 f1))
  (t2tb3309 x))))

(declare-fun tb2t3309 (uni) (tuple21 e (tuple21 d f)))

;; BridgeL
  (assert
  (forall ((i (tuple21 e (tuple21 d f))))
  (! (= (tb2t3309 (t2tb3309 i)) i) :pattern ((t2tb3309 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 e1 (tuple2 d1 f1)) j) (= (t2tb3309 (tb2t3309 j)) j)) :pattern (
  (t2tb3309 (tb2t3309 j))) )))

;; mem_times
  (assert
  (forall ((s (set e)) (t (set (tuple21 d f))) (x e) (y (tuple21 d f)))
  (= (mem (tuple2 e1 (tuple2 d1 f1))
  (Tuple2 e1 (tuple2 d1 f1) (t2tb2955 x) (t2tb2952 y))
  (times (tuple2 d1 f1) e1 (t2tb2947 s) (t2tb2938 t)))
  (and (mem36 x s) (mem40 y t)))))

(declare-fun t2tb3310 ((set (tuple21 e (set (tuple21 b e))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 e (set (tuple21 b e)))))) (sort
  (set1 (tuple2 e1 (set1 (tuple2 b1 e1)))) (t2tb3310 x))))

(declare-fun tb2t3310 (uni) (set (tuple21 e (set (tuple21 b e)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 e (set (tuple21 b e))))))
  (! (= (tb2t3310 (t2tb3310 i)) i) :pattern ((t2tb3310 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 e1 (set1 (tuple2 b1 e1)))) j)
     (= (t2tb3310 (tb2t3310 j)) j)) :pattern ((t2tb3310 (tb2t3310 j))) )))

(declare-fun t2tb3311 ((tuple21 e (set (tuple21 b e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 e (set (tuple21 b e))))) (sort
  (tuple2 e1 (set1 (tuple2 b1 e1))) (t2tb3311 x))))

(declare-fun tb2t3311 (uni) (tuple21 e (set (tuple21 b e))))

;; BridgeL
  (assert
  (forall ((i (tuple21 e (set (tuple21 b e)))))
  (! (= (tb2t3311 (t2tb3311 i)) i) :pattern ((t2tb3311 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 e1 (set1 (tuple2 b1 e1))) j)
     (= (t2tb3311 (tb2t3311 j)) j)) :pattern ((t2tb3311 (tb2t3311 j))) )))

;; mem_times
  (assert
  (forall ((s (set e)) (t (set (set (tuple21 b e)))) (x e) (y (set (tuple21 b
  e))))
  (= (mem (tuple2 e1 (set1 (tuple2 b1 e1)))
  (Tuple2 e1 (set1 (tuple2 b1 e1)) (t2tb2955 x) (t2tb2940 y))
  (times (set1 (tuple2 b1 e1)) e1 (t2tb2947 s) (t2tb2941 t)))
  (and (mem36 x s) (mem39 y t)))))

(declare-fun t2tb3312 ((set (tuple21 e (tuple21 b e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 e (tuple21 b e))))) (sort
  (set1 (tuple2 e1 (tuple2 b1 e1))) (t2tb3312 x))))

(declare-fun tb2t3312 (uni) (set (tuple21 e (tuple21 b e))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 e (tuple21 b e)))))
  (! (= (tb2t3312 (t2tb3312 i)) i) :pattern ((t2tb3312 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 e1 (tuple2 b1 e1))) j)
     (= (t2tb3312 (tb2t3312 j)) j)) :pattern ((t2tb3312 (tb2t3312 j))) )))

(declare-fun t2tb3313 ((tuple21 e (tuple21 b e))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 e (tuple21 b e)))) (sort (tuple2 e1 (tuple2 b1 e1))
  (t2tb3313 x))))

(declare-fun tb2t3313 (uni) (tuple21 e (tuple21 b e)))

;; BridgeL
  (assert
  (forall ((i (tuple21 e (tuple21 b e))))
  (! (= (tb2t3313 (t2tb3313 i)) i) :pattern ((t2tb3313 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 e1 (tuple2 b1 e1)) j) (= (t2tb3313 (tb2t3313 j)) j)) :pattern (
  (t2tb3313 (tb2t3313 j))) )))

;; mem_times
  (assert
  (forall ((s (set e)) (t (set (tuple21 b e))) (x e) (y (tuple21 b e)))
  (= (mem (tuple2 e1 (tuple2 b1 e1))
  (Tuple2 e1 (tuple2 b1 e1) (t2tb2955 x) (t2tb2953 y))
  (times (tuple2 b1 e1) e1 (t2tb2947 s) (t2tb2940 t)))
  (and (mem36 x s) (mem38 y t)))))

(declare-fun t2tb3314 ((set (tuple21 e f))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 e f)))) (sort (set1 (tuple2 e1 f1))
  (t2tb3314 x))))

(declare-fun tb2t3314 (uni) (set (tuple21 e f)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 e f))))
  (! (= (tb2t3314 (t2tb3314 i)) i) :pattern ((t2tb3314 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 e1 f1)) j) (= (t2tb3314 (tb2t3314 j)) j)) :pattern (
  (t2tb3314 (tb2t3314 j))) )))

(declare-fun t2tb3315 ((tuple21 e f)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 e f))) (sort (tuple2 e1 f1) (t2tb3315 x))))

(declare-fun tb2t3315 (uni) (tuple21 e f))

;; BridgeL
  (assert
  (forall ((i (tuple21 e f)))
  (! (= (tb2t3315 (t2tb3315 i)) i) :pattern ((t2tb3315 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 e1 f1) j) (= (t2tb3315 (tb2t3315 j)) j)) :pattern (
  (t2tb3315 (tb2t3315 j))) )))

;; mem_times
  (assert
  (forall ((s (set e)) (t (set f)) (x e) (y f))
  (= (mem (tuple2 e1 f1) (Tuple2 e1 f1 (t2tb2955 x) (t2tb2954 y))
  (times f1 e1 (t2tb2947 s) (t2tb2946 t))) (and (mem36 x s) (mem37 y t)))))

(declare-fun t2tb3316 ((set (tuple21 e e))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 e e)))) (sort (set1 (tuple2 e1 e1))
  (t2tb3316 x))))

(declare-fun tb2t3316 (uni) (set (tuple21 e e)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 e e))))
  (! (= (tb2t3316 (t2tb3316 i)) i) :pattern ((t2tb3316 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 e1 e1)) j) (= (t2tb3316 (tb2t3316 j)) j)) :pattern (
  (t2tb3316 (tb2t3316 j))) )))

(declare-fun t2tb3317 ((tuple21 e e)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 e e))) (sort (tuple2 e1 e1) (t2tb3317 x))))

(declare-fun tb2t3317 (uni) (tuple21 e e))

;; BridgeL
  (assert
  (forall ((i (tuple21 e e)))
  (! (= (tb2t3317 (t2tb3317 i)) i) :pattern ((t2tb3317 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 e1 e1) j) (= (t2tb3317 (tb2t3317 j)) j)) :pattern (
  (t2tb3317 (tb2t3317 j))) )))

;; mem_times
  (assert
  (forall ((s (set e)) (t (set e)) (x e) (y e))
  (= (mem (tuple2 e1 e1) (Tuple2 e1 e1 (t2tb2955 x) (t2tb2955 y))
  (times e1 e1 (t2tb2947 s) (t2tb2947 t))) (and (mem36 x s) (mem36 y t)))))

(declare-fun t2tb3318 ((set (tuple21 e (tuple21 (tuple21 a c) (tuple21 b
  d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 e (tuple21 (tuple21 a c) (tuple21 b d)))))) (sort
  (set1 (tuple2 e1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))) (t2tb3318 x))))

(declare-fun tb2t3318 (uni) (set (tuple21 e (tuple21 (tuple21 a c) (tuple21 b
  d)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 e (tuple21 (tuple21 a c) (tuple21 b d))))))
  (! (= (tb2t3318 (t2tb3318 i)) i) :pattern ((t2tb3318 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 e1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))) j)
     (= (t2tb3318 (tb2t3318 j)) j)) :pattern ((t2tb3318 (tb2t3318 j))) )))

(declare-fun t2tb3319 ((tuple21 e (tuple21 (tuple21 a c) (tuple21 b
  d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 e (tuple21 (tuple21 a c) (tuple21 b d))))) (sort
  (tuple2 e1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))) (t2tb3319 x))))

(declare-fun tb2t3319 (uni) (tuple21 e (tuple21 (tuple21 a c) (tuple21 b
  d))))

;; BridgeL
  (assert
  (forall ((i (tuple21 e (tuple21 (tuple21 a c) (tuple21 b d)))))
  (! (= (tb2t3319 (t2tb3319 i)) i) :pattern ((t2tb3319 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 e1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))) j)
     (= (t2tb3319 (tb2t3319 j)) j)) :pattern ((t2tb3319 (tb2t3319 j))) )))

;; mem_times
  (assert
  (forall ((s (set e)) (t (set (tuple21 (tuple21 a c) (tuple21 b d)))) (x e)
  (y (tuple21 (tuple21 a c) (tuple21 b d))))
  (= (mem (tuple2 e1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
  (Tuple2 e1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb2955 x) (t2tb691 y))
  (times (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) e1 (t2tb2947 s) (t2tb686 t)))
  (and (mem36 x s) (mem24 y t)))))

(declare-fun t2tb3320 ((set (tuple21 e (set (tuple21 c d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 e (set (tuple21 c d)))))) (sort
  (set1 (tuple2 e1 (set1 (tuple2 c1 d1)))) (t2tb3320 x))))

(declare-fun tb2t3320 (uni) (set (tuple21 e (set (tuple21 c d)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 e (set (tuple21 c d))))))
  (! (= (tb2t3320 (t2tb3320 i)) i) :pattern ((t2tb3320 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 e1 (set1 (tuple2 c1 d1)))) j)
     (= (t2tb3320 (tb2t3320 j)) j)) :pattern ((t2tb3320 (tb2t3320 j))) )))

(declare-fun t2tb3321 ((tuple21 e (set (tuple21 c d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 e (set (tuple21 c d))))) (sort
  (tuple2 e1 (set1 (tuple2 c1 d1))) (t2tb3321 x))))

(declare-fun tb2t3321 (uni) (tuple21 e (set (tuple21 c d))))

;; BridgeL
  (assert
  (forall ((i (tuple21 e (set (tuple21 c d)))))
  (! (= (tb2t3321 (t2tb3321 i)) i) :pattern ((t2tb3321 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 e1 (set1 (tuple2 c1 d1))) j)
     (= (t2tb3321 (tb2t3321 j)) j)) :pattern ((t2tb3321 (tb2t3321 j))) )))

;; mem_times
  (assert
  (forall ((s (set e)) (t (set (set (tuple21 c d)))) (x e) (y (set (tuple21 c
  d))))
  (= (mem (tuple2 e1 (set1 (tuple2 c1 d1)))
  (Tuple2 e1 (set1 (tuple2 c1 d1)) (t2tb2955 x) (t2tb689 y))
  (times (set1 (tuple2 c1 d1)) e1 (t2tb2947 s) (t2tb688 t)))
  (and (mem36 x s) (mem22 y t)))))

(declare-fun t2tb3322 ((set (tuple21 e (tuple21 c d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 e (tuple21 c d))))) (sort
  (set1 (tuple2 e1 (tuple2 c1 d1))) (t2tb3322 x))))

(declare-fun tb2t3322 (uni) (set (tuple21 e (tuple21 c d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 e (tuple21 c d)))))
  (! (= (tb2t3322 (t2tb3322 i)) i) :pattern ((t2tb3322 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 e1 (tuple2 c1 d1))) j)
     (= (t2tb3322 (tb2t3322 j)) j)) :pattern ((t2tb3322 (tb2t3322 j))) )))

(declare-fun t2tb3323 ((tuple21 e (tuple21 c d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 e (tuple21 c d)))) (sort (tuple2 e1 (tuple2 c1 d1))
  (t2tb3323 x))))

(declare-fun tb2t3323 (uni) (tuple21 e (tuple21 c d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 e (tuple21 c d))))
  (! (= (tb2t3323 (t2tb3323 i)) i) :pattern ((t2tb3323 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 e1 (tuple2 c1 d1)) j) (= (t2tb3323 (tb2t3323 j)) j)) :pattern (
  (t2tb3323 (tb2t3323 j))) )))

;; mem_times
  (assert
  (forall ((s (set e)) (t (set (tuple21 c d))) (x e) (y (tuple21 c d)))
  (= (mem (tuple2 e1 (tuple2 c1 d1))
  (Tuple2 e1 (tuple2 c1 d1) (t2tb2955 x) (t2tb693 y))
  (times (tuple2 c1 d1) e1 (t2tb2947 s) (t2tb689 t)))
  (and (mem36 x s) (mem21 y t)))))

(declare-fun t2tb3324 ((set (tuple21 e d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 e d)))) (sort (set1 (tuple2 e1 d1))
  (t2tb3324 x))))

(declare-fun tb2t3324 (uni) (set (tuple21 e d)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 e d))))
  (! (= (tb2t3324 (t2tb3324 i)) i) :pattern ((t2tb3324 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 e1 d1)) j) (= (t2tb3324 (tb2t3324 j)) j)) :pattern (
  (t2tb3324 (tb2t3324 j))) )))

(declare-fun t2tb3325 ((tuple21 e d)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 e d))) (sort (tuple2 e1 d1) (t2tb3325 x))))

(declare-fun tb2t3325 (uni) (tuple21 e d))

;; BridgeL
  (assert
  (forall ((i (tuple21 e d)))
  (! (= (tb2t3325 (t2tb3325 i)) i) :pattern ((t2tb3325 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 e1 d1) j) (= (t2tb3325 (tb2t3325 j)) j)) :pattern (
  (t2tb3325 (tb2t3325 j))) )))

;; mem_times
  (assert
  (forall ((s (set e)) (t (set d)) (x e) (y d))
  (= (mem (tuple2 e1 d1) (Tuple2 e1 d1 (t2tb2955 x) (t2tb694 y))
  (times d1 e1 (t2tb2947 s) (t2tb690 t))) (and (mem36 x s) (mem20 y t)))))

(declare-fun t2tb3326 ((set (tuple21 e c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 e c)))) (sort (set1 (tuple2 e1 c1))
  (t2tb3326 x))))

(declare-fun tb2t3326 (uni) (set (tuple21 e c)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 e c))))
  (! (= (tb2t3326 (t2tb3326 i)) i) :pattern ((t2tb3326 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 e1 c1)) j) (= (t2tb3326 (tb2t3326 j)) j)) :pattern (
  (t2tb3326 (tb2t3326 j))) )))

(declare-fun t2tb3327 ((tuple21 e c)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 e c))) (sort (tuple2 e1 c1) (t2tb3327 x))))

(declare-fun tb2t3327 (uni) (tuple21 e c))

;; BridgeL
  (assert
  (forall ((i (tuple21 e c)))
  (! (= (tb2t3327 (t2tb3327 i)) i) :pattern ((t2tb3327 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 e1 c1) j) (= (t2tb3327 (tb2t3327 j)) j)) :pattern (
  (t2tb3327 (tb2t3327 j))) )))

;; mem_times
  (assert
  (forall ((s (set e)) (t (set c)) (x e) (y c))
  (= (mem (tuple2 e1 c1) (Tuple2 e1 c1 (t2tb2955 x) (t2tb135 y))
  (times c1 e1 (t2tb2947 s) (t2tb132 t))) (and (mem36 x s) (mem7 y t)))))

(declare-fun t2tb3328 ((set (tuple21 e (set (tuple21 a b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 e (set (tuple21 a b)))))) (sort
  (set1 (tuple2 e1 (set1 (tuple2 a1 b1)))) (t2tb3328 x))))

(declare-fun tb2t3328 (uni) (set (tuple21 e (set (tuple21 a b)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 e (set (tuple21 a b))))))
  (! (= (tb2t3328 (t2tb3328 i)) i) :pattern ((t2tb3328 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 e1 (set1 (tuple2 a1 b1)))) j)
     (= (t2tb3328 (tb2t3328 j)) j)) :pattern ((t2tb3328 (tb2t3328 j))) )))

(declare-fun t2tb3329 ((tuple21 e (set (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 e (set (tuple21 a b))))) (sort
  (tuple2 e1 (set1 (tuple2 a1 b1))) (t2tb3329 x))))

(declare-fun tb2t3329 (uni) (tuple21 e (set (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (tuple21 e (set (tuple21 a b)))))
  (! (= (tb2t3329 (t2tb3329 i)) i) :pattern ((t2tb3329 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 e1 (set1 (tuple2 a1 b1))) j)
     (= (t2tb3329 (tb2t3329 j)) j)) :pattern ((t2tb3329 (tb2t3329 j))) )))

;; mem_times
  (assert
  (forall ((s (set e)) (t (set (set (tuple21 a b)))) (x e) (y (set (tuple21 a
  b))))
  (= (mem (tuple2 e1 (set1 (tuple2 a1 b1)))
  (Tuple2 e1 (set1 (tuple2 a1 b1)) (t2tb2955 x) (t2tb11 y))
  (times (set1 (tuple2 a1 b1)) e1 (t2tb2947 s) (t2tb10 t)))
  (and (mem36 x s) (mem4 y t)))))

(declare-fun t2tb3330 ((set (tuple21 e (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 e (tuple21 a b))))) (sort
  (set1 (tuple2 e1 (tuple2 a1 b1))) (t2tb3330 x))))

(declare-fun tb2t3330 (uni) (set (tuple21 e (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 e (tuple21 a b)))))
  (! (= (tb2t3330 (t2tb3330 i)) i) :pattern ((t2tb3330 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 e1 (tuple2 a1 b1))) j)
     (= (t2tb3330 (tb2t3330 j)) j)) :pattern ((t2tb3330 (tb2t3330 j))) )))

(declare-fun t2tb3331 ((tuple21 e (tuple21 a b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 e (tuple21 a b)))) (sort (tuple2 e1 (tuple2 a1 b1))
  (t2tb3331 x))))

(declare-fun tb2t3331 (uni) (tuple21 e (tuple21 a b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 e (tuple21 a b))))
  (! (= (tb2t3331 (t2tb3331 i)) i) :pattern ((t2tb3331 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 e1 (tuple2 a1 b1)) j) (= (t2tb3331 (tb2t3331 j)) j)) :pattern (
  (t2tb3331 (tb2t3331 j))) )))

;; mem_times
  (assert
  (forall ((s (set e)) (t (set (tuple21 a b))) (x e) (y (tuple21 a b)))
  (= (mem (tuple2 e1 (tuple2 a1 b1))
  (Tuple2 e1 (tuple2 a1 b1) (t2tb2955 x) (t2tb13 y))
  (times (tuple2 a1 b1) e1 (t2tb2947 s) (t2tb11 t)))
  (and (mem36 x s) (mem3 y t)))))

(declare-fun t2tb3332 ((set (tuple21 e b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 e b)))) (sort (set1 (tuple2 e1 b1))
  (t2tb3332 x))))

(declare-fun tb2t3332 (uni) (set (tuple21 e b)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 e b))))
  (! (= (tb2t3332 (t2tb3332 i)) i) :pattern ((t2tb3332 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 e1 b1)) j) (= (t2tb3332 (tb2t3332 j)) j)) :pattern (
  (t2tb3332 (tb2t3332 j))) )))

(declare-fun t2tb3333 ((tuple21 e b)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 e b))) (sort (tuple2 e1 b1) (t2tb3333 x))))

(declare-fun tb2t3333 (uni) (tuple21 e b))

;; BridgeL
  (assert
  (forall ((i (tuple21 e b)))
  (! (= (tb2t3333 (t2tb3333 i)) i) :pattern ((t2tb3333 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 e1 b1) j) (= (t2tb3333 (tb2t3333 j)) j)) :pattern (
  (t2tb3333 (tb2t3333 j))) )))

;; mem_times
  (assert
  (forall ((s (set e)) (t (set b)) (x e) (y b))
  (= (mem (tuple2 e1 b1) (Tuple2 e1 b1 (t2tb2955 x) (t2tb14 y))
  (times b1 e1 (t2tb2947 s) (t2tb12 t))) (and (mem36 x s) (mem2 y t)))))

(declare-fun t2tb3334 ((set (tuple21 e a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 e a)))) (sort (set1 (tuple2 e1 a1))
  (t2tb3334 x))))

(declare-fun tb2t3334 (uni) (set (tuple21 e a)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 e a))))
  (! (= (tb2t3334 (t2tb3334 i)) i) :pattern ((t2tb3334 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 e1 a1)) j) (= (t2tb3334 (tb2t3334 j)) j)) :pattern (
  (t2tb3334 (tb2t3334 j))) )))

(declare-fun t2tb3335 ((tuple21 e a)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 e a))) (sort (tuple2 e1 a1) (t2tb3335 x))))

(declare-fun tb2t3335 (uni) (tuple21 e a))

;; BridgeL
  (assert
  (forall ((i (tuple21 e a)))
  (! (= (tb2t3335 (t2tb3335 i)) i) :pattern ((t2tb3335 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 e1 a1) j) (= (t2tb3335 (tb2t3335 j)) j)) :pattern (
  (t2tb3335 (tb2t3335 j))) )))

;; mem_times
  (assert
  (forall ((s (set e)) (t (set a)) (x e) (y a))
  (= (mem (tuple2 e1 a1) (Tuple2 e1 a1 (t2tb2955 x) (t2tb2 y))
  (times a1 e1 (t2tb2947 s) (t2tb1 t))) (and (mem36 x s) (mem1 y t)))))

;; mem_times
  (assert
  (forall ((b2 ty))
  (forall ((s (set e)) (t uni) (x e) (y uni))
  (= (mem (tuple2 e1 b2) (Tuple2 e1 b2 (t2tb2955 x) y)
  (times b2 e1 (t2tb2947 s) t)) (and (mem36 x s) (mem b2 y t))))))

(declare-fun t2tb3336 ((set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  (tuple21 c f)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) (tuple21 c
  f))))) (sort
  (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 c1 f1)))
  (t2tb3336 x))))

(declare-fun tb2t3336 (uni) (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b
  d)) (tuple21 c f))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) (tuple21 c
  f))))) (! (= (tb2t3336 (t2tb3336 i)) i) :pattern ((t2tb3336 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 c1 f1))) j)
     (= (t2tb3336 (tb2t3336 j)) j)) :pattern ((t2tb3336 (tb2t3336 j))) )))

(declare-fun t2tb3337 ((tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  (tuple21 c f))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) (tuple21 c f))))
  (sort (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 c1 f1))
  (t2tb3337 x))))

(declare-fun tb2t3337 (uni) (tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  (tuple21 c f)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) (tuple21 c f))))
  (! (= (tb2t3337 (t2tb3337 i)) i) :pattern ((t2tb3337 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 c1 f1))
     j) (= (t2tb3337 (tb2t3337 j)) j)) :pattern ((t2tb3337 (tb2t3337 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 (tuple21 a c) (tuple21 b d)))) (t (set (tuple21 c
  f))) (x (tuple21 (tuple21 a c) (tuple21 b d))) (y (tuple21 c f)))
  (= (mem (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 c1 f1))
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 c1 f1) (t2tb691 x)
  (t2tb2948 y))
  (times (tuple2 c1 f1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb686 s)
  (t2tb2942 t))) (and (mem24 x s) (mem45 y t)))))

(declare-fun t2tb3338 ((set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  (tuple21 a e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) (tuple21 a
  e))))) (sort
  (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 a1 e1)))
  (t2tb3338 x))))

(declare-fun tb2t3338 (uni) (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b
  d)) (tuple21 a e))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) (tuple21 a
  e))))) (! (= (tb2t3338 (t2tb3338 i)) i) :pattern ((t2tb3338 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 a1 e1))) j)
     (= (t2tb3338 (tb2t3338 j)) j)) :pattern ((t2tb3338 (tb2t3338 j))) )))

(declare-fun t2tb3339 ((tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  (tuple21 a e))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) (tuple21 a e))))
  (sort (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 a1 e1))
  (t2tb3339 x))))

(declare-fun tb2t3339 (uni) (tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  (tuple21 a e)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) (tuple21 a e))))
  (! (= (tb2t3339 (t2tb3339 i)) i) :pattern ((t2tb3339 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 a1 e1))
     j) (= (t2tb3339 (tb2t3339 j)) j)) :pattern ((t2tb3339 (tb2t3339 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 (tuple21 a c) (tuple21 b d)))) (t (set (tuple21 a
  e))) (x (tuple21 (tuple21 a c) (tuple21 b d))) (y (tuple21 a e)))
  (= (mem (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 a1 e1))
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 a1 e1) (t2tb691 x)
  (t2tb2949 y))
  (times (tuple2 a1 e1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb686 s)
  (t2tb2943 t))) (and (mem24 x s) (mem44 y t)))))

(declare-fun t2tb3340 ((set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  (tuple21 (tuple21 b d) (tuple21 e f))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  (tuple21 (tuple21 b d) (tuple21 e f)))))) (sort
  (set1
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))
  (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)))) (t2tb3340 x))))

(declare-fun tb2t3340 (uni) (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b
  d)) (tuple21 (tuple21 b d) (tuple21 e f)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  (tuple21 (tuple21 b d) (tuple21 e f))))))
  (! (= (tb2t3340 (t2tb3340 i)) i) :pattern ((t2tb3340 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))
     (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)))) j)
     (= (t2tb3340 (tb2t3340 j)) j)) :pattern ((t2tb3340 (tb2t3340 j))) )))

(declare-fun t2tb3341 ((tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  (tuple21 (tuple21 b d) (tuple21 e f)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  (tuple21 (tuple21 b d) (tuple21 e f))))) (sort
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))
  (tuple2 (tuple2 b1 d1) (tuple2 e1 f1))) (t2tb3341 x))))

(declare-fun tb2t3341 (uni) (tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  (tuple21 (tuple21 b d) (tuple21 e f))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  (tuple21 (tuple21 b d) (tuple21 e f)))))
  (! (= (tb2t3341 (t2tb3341 i)) i) :pattern ((t2tb3341 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))
     (tuple2 (tuple2 b1 d1) (tuple2 e1 f1))) j)
     (= (t2tb3341 (tb2t3341 j)) j)) :pattern ((t2tb3341 (tb2t3341 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 (tuple21 a c) (tuple21 b d))))
  (t (set (tuple21 (tuple21 b d) (tuple21 e f)))) (x (tuple21 (tuple21 a c)
  (tuple21 b d))) (y (tuple21 (tuple21 b d) (tuple21 e f))))
  (= (mem
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))
  (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)))
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))
  (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (t2tb691 x) (t2tb2950 y))
  (times (tuple2 (tuple2 b1 d1) (tuple2 e1 f1))
  (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb686 s) (t2tb2944 t)))
  (and (mem24 x s) (mem43 y t)))))

(declare-fun t2tb3342 ((set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  (tuple21 (tuple21 a c) (tuple21 e f))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  (tuple21 (tuple21 a c) (tuple21 e f)))))) (sort
  (set1
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))
  (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)))) (t2tb3342 x))))

(declare-fun tb2t3342 (uni) (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b
  d)) (tuple21 (tuple21 a c) (tuple21 e f)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  (tuple21 (tuple21 a c) (tuple21 e f))))))
  (! (= (tb2t3342 (t2tb3342 i)) i) :pattern ((t2tb3342 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))
     (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)))) j)
     (= (t2tb3342 (tb2t3342 j)) j)) :pattern ((t2tb3342 (tb2t3342 j))) )))

(declare-fun t2tb3343 ((tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  (tuple21 (tuple21 a c) (tuple21 e f)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  (tuple21 (tuple21 a c) (tuple21 e f))))) (sort
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))
  (tuple2 (tuple2 a1 c1) (tuple2 e1 f1))) (t2tb3343 x))))

(declare-fun tb2t3343 (uni) (tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  (tuple21 (tuple21 a c) (tuple21 e f))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  (tuple21 (tuple21 a c) (tuple21 e f)))))
  (! (= (tb2t3343 (t2tb3343 i)) i) :pattern ((t2tb3343 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))
     (tuple2 (tuple2 a1 c1) (tuple2 e1 f1))) j)
     (= (t2tb3343 (tb2t3343 j)) j)) :pattern ((t2tb3343 (tb2t3343 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 (tuple21 a c) (tuple21 b d))))
  (t (set (tuple21 (tuple21 a c) (tuple21 e f)))) (x (tuple21 (tuple21 a c)
  (tuple21 b d))) (y (tuple21 (tuple21 a c) (tuple21 e f))))
  (= (mem
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))
  (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)))
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))
  (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (t2tb691 x) (t2tb2951 y))
  (times (tuple2 (tuple2 a1 c1) (tuple2 e1 f1))
  (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb686 s) (t2tb2945 t)))
  (and (mem24 x s) (mem42 y t)))))

(declare-fun t2tb3344 ((set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  (set (tuple21 d f))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  (set (tuple21 d f)))))) (sort
  (set1
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (set1 (tuple2 d1 f1))))
  (t2tb3344 x))))

(declare-fun tb2t3344 (uni) (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b
  d)) (set (tuple21 d f)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  (set (tuple21 d f))))))
  (! (= (tb2t3344 (t2tb3344 i)) i) :pattern ((t2tb3344 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (set1 (tuple2 d1 f1))))
     j) (= (t2tb3344 (tb2t3344 j)) j)) :pattern ((t2tb3344 (tb2t3344 j))) )))

(declare-fun t2tb3345 ((tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  (set (tuple21 d f)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) (set (tuple21 d
  f))))) (sort
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (set1 (tuple2 d1 f1)))
  (t2tb3345 x))))

(declare-fun tb2t3345 (uni) (tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  (set (tuple21 d f))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) (set (tuple21 d
  f))))) (! (= (tb2t3345 (t2tb3345 i)) i) :pattern ((t2tb3345 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (set1 (tuple2 d1 f1))) j)
     (= (t2tb3345 (tb2t3345 j)) j)) :pattern ((t2tb3345 (tb2t3345 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 (tuple21 a c) (tuple21 b d))))
  (t (set (set (tuple21 d f)))) (x (tuple21 (tuple21 a c) (tuple21 b d)))
  (y (set (tuple21 d f))))
  (= (mem
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (set1 (tuple2 d1 f1)))
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (set1 (tuple2 d1 f1))
  (t2tb691 x) (t2tb2938 y))
  (times (set1 (tuple2 d1 f1)) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))
  (t2tb686 s) (t2tb2939 t))) (and (mem24 x s) (mem41 y t)))))

(declare-fun t2tb3346 ((set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  (tuple21 d f)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) (tuple21 d
  f))))) (sort
  (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 d1 f1)))
  (t2tb3346 x))))

(declare-fun tb2t3346 (uni) (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b
  d)) (tuple21 d f))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) (tuple21 d
  f))))) (! (= (tb2t3346 (t2tb3346 i)) i) :pattern ((t2tb3346 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 d1 f1))) j)
     (= (t2tb3346 (tb2t3346 j)) j)) :pattern ((t2tb3346 (tb2t3346 j))) )))

(declare-fun t2tb3347 ((tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  (tuple21 d f))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) (tuple21 d f))))
  (sort (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 d1 f1))
  (t2tb3347 x))))

(declare-fun tb2t3347 (uni) (tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  (tuple21 d f)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) (tuple21 d f))))
  (! (= (tb2t3347 (t2tb3347 i)) i) :pattern ((t2tb3347 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 d1 f1))
     j) (= (t2tb3347 (tb2t3347 j)) j)) :pattern ((t2tb3347 (tb2t3347 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 (tuple21 a c) (tuple21 b d)))) (t (set (tuple21 d
  f))) (x (tuple21 (tuple21 a c) (tuple21 b d))) (y (tuple21 d f)))
  (= (mem (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 d1 f1))
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 d1 f1) (t2tb691 x)
  (t2tb2952 y))
  (times (tuple2 d1 f1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb686 s)
  (t2tb2938 t))) (and (mem24 x s) (mem40 y t)))))

(declare-fun t2tb3348 ((set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  (set (tuple21 b e))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  (set (tuple21 b e)))))) (sort
  (set1
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (set1 (tuple2 b1 e1))))
  (t2tb3348 x))))

(declare-fun tb2t3348 (uni) (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b
  d)) (set (tuple21 b e)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  (set (tuple21 b e))))))
  (! (= (tb2t3348 (t2tb3348 i)) i) :pattern ((t2tb3348 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (set1 (tuple2 b1 e1))))
     j) (= (t2tb3348 (tb2t3348 j)) j)) :pattern ((t2tb3348 (tb2t3348 j))) )))

(declare-fun t2tb3349 ((tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  (set (tuple21 b e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) (set (tuple21 b
  e))))) (sort
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (set1 (tuple2 b1 e1)))
  (t2tb3349 x))))

(declare-fun tb2t3349 (uni) (tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  (set (tuple21 b e))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) (set (tuple21 b
  e))))) (! (= (tb2t3349 (t2tb3349 i)) i) :pattern ((t2tb3349 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (set1 (tuple2 b1 e1))) j)
     (= (t2tb3349 (tb2t3349 j)) j)) :pattern ((t2tb3349 (tb2t3349 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 (tuple21 a c) (tuple21 b d))))
  (t (set (set (tuple21 b e)))) (x (tuple21 (tuple21 a c) (tuple21 b d)))
  (y (set (tuple21 b e))))
  (= (mem
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (set1 (tuple2 b1 e1)))
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (set1 (tuple2 b1 e1))
  (t2tb691 x) (t2tb2940 y))
  (times (set1 (tuple2 b1 e1)) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))
  (t2tb686 s) (t2tb2941 t))) (and (mem24 x s) (mem39 y t)))))

(declare-fun t2tb3350 ((set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  (tuple21 b e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) (tuple21 b
  e))))) (sort
  (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 b1 e1)))
  (t2tb3350 x))))

(declare-fun tb2t3350 (uni) (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b
  d)) (tuple21 b e))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) (tuple21 b
  e))))) (! (= (tb2t3350 (t2tb3350 i)) i) :pattern ((t2tb3350 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 b1 e1))) j)
     (= (t2tb3350 (tb2t3350 j)) j)) :pattern ((t2tb3350 (tb2t3350 j))) )))

(declare-fun t2tb3351 ((tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  (tuple21 b e))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) (tuple21 b e))))
  (sort (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 b1 e1))
  (t2tb3351 x))))

(declare-fun tb2t3351 (uni) (tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  (tuple21 b e)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) (tuple21 b e))))
  (! (= (tb2t3351 (t2tb3351 i)) i) :pattern ((t2tb3351 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 b1 e1))
     j) (= (t2tb3351 (tb2t3351 j)) j)) :pattern ((t2tb3351 (tb2t3351 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 (tuple21 a c) (tuple21 b d)))) (t (set (tuple21 b
  e))) (x (tuple21 (tuple21 a c) (tuple21 b d))) (y (tuple21 b e)))
  (= (mem (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 b1 e1))
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 b1 e1) (t2tb691 x)
  (t2tb2953 y))
  (times (tuple2 b1 e1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb686 s)
  (t2tb2940 t))) (and (mem24 x s) (mem38 y t)))))

(declare-fun t2tb3352 ((set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  f))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) f)))) (sort
  (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) f1)) (t2tb3352 x))))

(declare-fun tb2t3352 (uni) (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b
  d)) f)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) f))))
  (! (= (tb2t3352 (t2tb3352 i)) i) :pattern ((t2tb3352 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) f1)) j)
     (= (t2tb3352 (tb2t3352 j)) j)) :pattern ((t2tb3352 (tb2t3352 j))) )))

(declare-fun t2tb3353 ((tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  f)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) f))) (sort
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) f1) (t2tb3353 x))))

(declare-fun tb2t3353 (uni) (tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  f))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) f)))
  (! (= (tb2t3353 (t2tb3353 i)) i) :pattern ((t2tb3353 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) f1) j)
     (= (t2tb3353 (tb2t3353 j)) j)) :pattern ((t2tb3353 (tb2t3353 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 (tuple21 a c) (tuple21 b d)))) (t (set f))
  (x (tuple21 (tuple21 a c) (tuple21 b d))) (y f))
  (= (mem (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) f1)
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) f1 (t2tb691 x) (t2tb2954 y))
  (times f1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb686 s) (t2tb2946 t)))
  (and (mem24 x s) (mem37 y t)))))

(declare-fun t2tb3354 ((set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  e))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) e)))) (sort
  (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) e1)) (t2tb3354 x))))

(declare-fun tb2t3354 (uni) (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b
  d)) e)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) e))))
  (! (= (tb2t3354 (t2tb3354 i)) i) :pattern ((t2tb3354 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) e1)) j)
     (= (t2tb3354 (tb2t3354 j)) j)) :pattern ((t2tb3354 (tb2t3354 j))) )))

(declare-fun t2tb3355 ((tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  e)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) e))) (sort
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) e1) (t2tb3355 x))))

(declare-fun tb2t3355 (uni) (tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  e))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) e)))
  (! (= (tb2t3355 (t2tb3355 i)) i) :pattern ((t2tb3355 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) e1) j)
     (= (t2tb3355 (tb2t3355 j)) j)) :pattern ((t2tb3355 (tb2t3355 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 (tuple21 a c) (tuple21 b d)))) (t (set e))
  (x (tuple21 (tuple21 a c) (tuple21 b d))) (y e))
  (= (mem (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) e1)
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) e1 (t2tb691 x) (t2tb2955 y))
  (times e1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb686 s) (t2tb2947 t)))
  (and (mem24 x s) (mem36 y t)))))

(declare-fun t2tb3356 ((set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  (tuple21 (tuple21 a c) (tuple21 b d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  (tuple21 (tuple21 a c) (tuple21 b d)))))) (sort
  (set1
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))
  (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))) (t2tb3356 x))))

(declare-fun tb2t3356 (uni) (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b
  d)) (tuple21 (tuple21 a c) (tuple21 b d)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  (tuple21 (tuple21 a c) (tuple21 b d))))))
  (! (= (tb2t3356 (t2tb3356 i)) i) :pattern ((t2tb3356 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))
     (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))) j)
     (= (t2tb3356 (tb2t3356 j)) j)) :pattern ((t2tb3356 (tb2t3356 j))) )))

(declare-fun t2tb3357 ((tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  (tuple21 (tuple21 a c) (tuple21 b d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  (tuple21 (tuple21 a c) (tuple21 b d))))) (sort
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))
  (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))) (t2tb3357 x))))

(declare-fun tb2t3357 (uni) (tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  (tuple21 (tuple21 a c) (tuple21 b d))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  (tuple21 (tuple21 a c) (tuple21 b d)))))
  (! (= (tb2t3357 (t2tb3357 i)) i) :pattern ((t2tb3357 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))
     (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))) j)
     (= (t2tb3357 (tb2t3357 j)) j)) :pattern ((t2tb3357 (tb2t3357 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 (tuple21 a c) (tuple21 b d))))
  (t (set (tuple21 (tuple21 a c) (tuple21 b d)))) (x (tuple21 (tuple21 a c)
  (tuple21 b d))) (y (tuple21 (tuple21 a c) (tuple21 b d))))
  (= (mem
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))
  (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))
  (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb691 x) (t2tb691 y))
  (times (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))
  (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb686 s) (t2tb686 t)))
  (and (mem24 x s) (mem24 y t)))))

(declare-fun t2tb3358 ((set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  (set (tuple21 c d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  (set (tuple21 c d)))))) (sort
  (set1
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (set1 (tuple2 c1 d1))))
  (t2tb3358 x))))

(declare-fun tb2t3358 (uni) (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b
  d)) (set (tuple21 c d)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  (set (tuple21 c d))))))
  (! (= (tb2t3358 (t2tb3358 i)) i) :pattern ((t2tb3358 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (set1 (tuple2 c1 d1))))
     j) (= (t2tb3358 (tb2t3358 j)) j)) :pattern ((t2tb3358 (tb2t3358 j))) )))

(declare-fun t2tb3359 ((tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  (set (tuple21 c d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) (set (tuple21 c
  d))))) (sort
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (set1 (tuple2 c1 d1)))
  (t2tb3359 x))))

(declare-fun tb2t3359 (uni) (tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  (set (tuple21 c d))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) (set (tuple21 c
  d))))) (! (= (tb2t3359 (t2tb3359 i)) i) :pattern ((t2tb3359 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (set1 (tuple2 c1 d1))) j)
     (= (t2tb3359 (tb2t3359 j)) j)) :pattern ((t2tb3359 (tb2t3359 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 (tuple21 a c) (tuple21 b d))))
  (t (set (set (tuple21 c d)))) (x (tuple21 (tuple21 a c) (tuple21 b d)))
  (y (set (tuple21 c d))))
  (= (mem
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (set1 (tuple2 c1 d1)))
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (set1 (tuple2 c1 d1))
  (t2tb691 x) (t2tb689 y))
  (times (set1 (tuple2 c1 d1)) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))
  (t2tb686 s) (t2tb688 t))) (and (mem24 x s) (mem22 y t)))))

(declare-fun t2tb3360 ((set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  (tuple21 c d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) (tuple21 c
  d))))) (sort
  (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 c1 d1)))
  (t2tb3360 x))))

(declare-fun tb2t3360 (uni) (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b
  d)) (tuple21 c d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) (tuple21 c
  d))))) (! (= (tb2t3360 (t2tb3360 i)) i) :pattern ((t2tb3360 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 c1 d1))) j)
     (= (t2tb3360 (tb2t3360 j)) j)) :pattern ((t2tb3360 (tb2t3360 j))) )))

(declare-fun t2tb3361 ((tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  (tuple21 c d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) (tuple21 c d))))
  (sort (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 c1 d1))
  (t2tb3361 x))))

(declare-fun tb2t3361 (uni) (tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  (tuple21 c d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) (tuple21 c d))))
  (! (= (tb2t3361 (t2tb3361 i)) i) :pattern ((t2tb3361 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 c1 d1))
     j) (= (t2tb3361 (tb2t3361 j)) j)) :pattern ((t2tb3361 (tb2t3361 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 (tuple21 a c) (tuple21 b d)))) (t (set (tuple21 c
  d))) (x (tuple21 (tuple21 a c) (tuple21 b d))) (y (tuple21 c d)))
  (= (mem (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 c1 d1))
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 c1 d1) (t2tb691 x)
  (t2tb693 y))
  (times (tuple2 c1 d1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb686 s)
  (t2tb689 t))) (and (mem24 x s) (mem21 y t)))))

(declare-fun t2tb3362 ((set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) d)))) (sort
  (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) d1)) (t2tb3362 x))))

(declare-fun tb2t3362 (uni) (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b
  d)) d)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) d))))
  (! (= (tb2t3362 (t2tb3362 i)) i) :pattern ((t2tb3362 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) d1)) j)
     (= (t2tb3362 (tb2t3362 j)) j)) :pattern ((t2tb3362 (tb2t3362 j))) )))

(declare-fun t2tb3363 ((tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  d)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) d))) (sort
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) d1) (t2tb3363 x))))

(declare-fun tb2t3363 (uni) (tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  d))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) d)))
  (! (= (tb2t3363 (t2tb3363 i)) i) :pattern ((t2tb3363 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) d1) j)
     (= (t2tb3363 (tb2t3363 j)) j)) :pattern ((t2tb3363 (tb2t3363 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 (tuple21 a c) (tuple21 b d)))) (t (set d))
  (x (tuple21 (tuple21 a c) (tuple21 b d))) (y d))
  (= (mem (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) d1)
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) d1 (t2tb691 x) (t2tb694 y))
  (times d1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb686 s) (t2tb690 t)))
  (and (mem24 x s) (mem20 y t)))))

(declare-fun t2tb3364 ((set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) c)))) (sort
  (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) c1)) (t2tb3364 x))))

(declare-fun tb2t3364 (uni) (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b
  d)) c)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) c))))
  (! (= (tb2t3364 (t2tb3364 i)) i) :pattern ((t2tb3364 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) c1)) j)
     (= (t2tb3364 (tb2t3364 j)) j)) :pattern ((t2tb3364 (tb2t3364 j))) )))

(declare-fun t2tb3365 ((tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  c)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) c))) (sort
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) c1) (t2tb3365 x))))

(declare-fun tb2t3365 (uni) (tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  c))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) c)))
  (! (= (tb2t3365 (t2tb3365 i)) i) :pattern ((t2tb3365 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) c1) j)
     (= (t2tb3365 (tb2t3365 j)) j)) :pattern ((t2tb3365 (tb2t3365 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 (tuple21 a c) (tuple21 b d)))) (t (set c))
  (x (tuple21 (tuple21 a c) (tuple21 b d))) (y c))
  (= (mem (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) c1)
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) c1 (t2tb691 x) (t2tb135 y))
  (times c1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb686 s) (t2tb132 t)))
  (and (mem24 x s) (mem7 y t)))))

(declare-fun t2tb3366 ((set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  (set (tuple21 a b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  (set (tuple21 a b)))))) (sort
  (set1
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (set1 (tuple2 a1 b1))))
  (t2tb3366 x))))

(declare-fun tb2t3366 (uni) (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b
  d)) (set (tuple21 a b)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  (set (tuple21 a b))))))
  (! (= (tb2t3366 (t2tb3366 i)) i) :pattern ((t2tb3366 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (set1 (tuple2 a1 b1))))
     j) (= (t2tb3366 (tb2t3366 j)) j)) :pattern ((t2tb3366 (tb2t3366 j))) )))

(declare-fun t2tb3367 ((tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  (set (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) (set (tuple21 a
  b))))) (sort
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (set1 (tuple2 a1 b1)))
  (t2tb3367 x))))

(declare-fun tb2t3367 (uni) (tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  (set (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) (set (tuple21 a
  b))))) (! (= (tb2t3367 (t2tb3367 i)) i) :pattern ((t2tb3367 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (set1 (tuple2 a1 b1))) j)
     (= (t2tb3367 (tb2t3367 j)) j)) :pattern ((t2tb3367 (tb2t3367 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 (tuple21 a c) (tuple21 b d))))
  (t (set (set (tuple21 a b)))) (x (tuple21 (tuple21 a c) (tuple21 b d)))
  (y (set (tuple21 a b))))
  (= (mem
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (set1 (tuple2 a1 b1)))
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (set1 (tuple2 a1 b1))
  (t2tb691 x) (t2tb11 y))
  (times (set1 (tuple2 a1 b1)) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))
  (t2tb686 s) (t2tb10 t))) (and (mem24 x s) (mem4 y t)))))

(declare-fun t2tb3368 ((set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) (tuple21 a
  b))))) (sort
  (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 a1 b1)))
  (t2tb3368 x))))

(declare-fun tb2t3368 (uni) (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b
  d)) (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) (tuple21 a
  b))))) (! (= (tb2t3368 (t2tb3368 i)) i) :pattern ((t2tb3368 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 a1 b1))) j)
     (= (t2tb3368 (tb2t3368 j)) j)) :pattern ((t2tb3368 (tb2t3368 j))) )))

(declare-fun t2tb3369 ((tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  (tuple21 a b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) (tuple21 a b))))
  (sort (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 a1 b1))
  (t2tb3369 x))))

(declare-fun tb2t3369 (uni) (tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  (tuple21 a b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) (tuple21 a b))))
  (! (= (tb2t3369 (t2tb3369 i)) i) :pattern ((t2tb3369 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 a1 b1))
     j) (= (t2tb3369 (tb2t3369 j)) j)) :pattern ((t2tb3369 (tb2t3369 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 (tuple21 a c) (tuple21 b d)))) (t (set (tuple21 a
  b))) (x (tuple21 (tuple21 a c) (tuple21 b d))) (y (tuple21 a b)))
  (= (mem (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 a1 b1))
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 a1 b1) (t2tb691 x)
  (t2tb13 y))
  (times (tuple2 a1 b1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb686 s)
  (t2tb11 t))) (and (mem24 x s) (mem3 y t)))))

(declare-fun t2tb3370 ((set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) b)))) (sort
  (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) b1)) (t2tb3370 x))))

(declare-fun tb2t3370 (uni) (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b
  d)) b)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) b))))
  (! (= (tb2t3370 (t2tb3370 i)) i) :pattern ((t2tb3370 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) b1)) j)
     (= (t2tb3370 (tb2t3370 j)) j)) :pattern ((t2tb3370 (tb2t3370 j))) )))

(declare-fun t2tb3371 ((tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  b)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) b))) (sort
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) b1) (t2tb3371 x))))

(declare-fun tb2t3371 (uni) (tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  b))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) b)))
  (! (= (tb2t3371 (t2tb3371 i)) i) :pattern ((t2tb3371 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) b1) j)
     (= (t2tb3371 (tb2t3371 j)) j)) :pattern ((t2tb3371 (tb2t3371 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 (tuple21 a c) (tuple21 b d)))) (t (set b))
  (x (tuple21 (tuple21 a c) (tuple21 b d))) (y b))
  (= (mem (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) b1)
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) b1 (t2tb691 x) (t2tb14 y))
  (times b1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb686 s) (t2tb12 t)))
  (and (mem24 x s) (mem2 y t)))))

(declare-fun t2tb3372 ((set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) a)))) (sort
  (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) a1)) (t2tb3372 x))))

(declare-fun tb2t3372 (uni) (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b
  d)) a)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) a))))
  (! (= (tb2t3372 (t2tb3372 i)) i) :pattern ((t2tb3372 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) a1)) j)
     (= (t2tb3372 (tb2t3372 j)) j)) :pattern ((t2tb3372 (tb2t3372 j))) )))

(declare-fun t2tb3373 ((tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  a)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) a))) (sort
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) a1) (t2tb3373 x))))

(declare-fun tb2t3373 (uni) (tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  a))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) a)))
  (! (= (tb2t3373 (t2tb3373 i)) i) :pattern ((t2tb3373 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) a1) j)
     (= (t2tb3373 (tb2t3373 j)) j)) :pattern ((t2tb3373 (tb2t3373 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 (tuple21 a c) (tuple21 b d)))) (t (set a))
  (x (tuple21 (tuple21 a c) (tuple21 b d))) (y a))
  (= (mem (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) a1)
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) a1 (t2tb691 x) (t2tb2 y))
  (times a1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb686 s) (t2tb1 t)))
  (and (mem24 x s) (mem1 y t)))))

;; mem_times
  (assert
  (forall ((b2 ty))
  (forall ((s (set (tuple21 (tuple21 a c) (tuple21 b d)))) (t uni)
  (x (tuple21 (tuple21 a c) (tuple21 b d))) (y uni))
  (= (mem (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) b2)
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) b2 (t2tb691 x) y)
  (times b2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb686 s) t))
  (and (mem24 x s) (mem b2 y t))))))

(declare-fun t2tb687 ((set (tuple21 b d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 b d)))) (sort (set1 (tuple2 b1 d1)) (t2tb687 x))))

(declare-fun tb2t687 (uni) (set (tuple21 b d)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 b d))))
  (! (= (tb2t687 (t2tb687 i)) i) :pattern ((t2tb687 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 b1 d1)) j) (= (t2tb687 (tb2t687 j)) j)) :pattern (
  (t2tb687 (tb2t687 j))) )))

(declare-fun t2tb692 ((tuple21 b d)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 b d))) (sort (tuple2 b1 d1) (t2tb692 x))))

(declare-fun tb2t692 (uni) (tuple21 b d))

;; BridgeL
  (assert
  (forall ((i (tuple21 b d)))
  (! (= (tb2t692 (t2tb692 i)) i) :pattern ((t2tb692 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 b1 d1) j) (= (t2tb692 (tb2t692 j)) j)) :pattern (
  (t2tb692 (tb2t692 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 b d))) (t (set (tuple21 e f))) (x (tuple21 b d))
  (y (tuple21 e f)))
  (= (mem43
  (tb2t2950 (Tuple2 (tuple2 b1 d1) (tuple2 e1 f1) (t2tb692 x) (t2tb3315 y)))
  (tb2t2944 (times (tuple2 e1 f1) (tuple2 b1 d1) (t2tb687 s) (t2tb3314 t))))
  (and (mem (tuple2 b1 d1) (t2tb692 x) (t2tb687 s)) (mem (tuple2 e1 f1)
  (t2tb3315 y) (t2tb3314 t))))))

(declare-fun t2tb3374 ((set (tuple21 (set (tuple21 c d)) (tuple21 c
  f)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 c d)) (tuple21 c f))))) (sort
  (set1 (tuple2 (set1 (tuple2 c1 d1)) (tuple2 c1 f1))) (t2tb3374 x))))

(declare-fun tb2t3374 (uni) (set (tuple21 (set (tuple21 c d)) (tuple21 c
  f))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 c d)) (tuple21 c f)))))
  (! (= (tb2t3374 (t2tb3374 i)) i) :pattern ((t2tb3374 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 c1 d1)) (tuple2 c1 f1))) j)
     (= (t2tb3374 (tb2t3374 j)) j)) :pattern ((t2tb3374 (tb2t3374 j))) )))

(declare-fun t2tb3375 ((tuple21 (set (tuple21 c d)) (tuple21 c f))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 c d)) (tuple21 c f)))) (sort
  (tuple2 (set1 (tuple2 c1 d1)) (tuple2 c1 f1)) (t2tb3375 x))))

(declare-fun tb2t3375 (uni) (tuple21 (set (tuple21 c d)) (tuple21 c f)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 c d)) (tuple21 c f))))
  (! (= (tb2t3375 (t2tb3375 i)) i) :pattern ((t2tb3375 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 c1 d1)) (tuple2 c1 f1)) j)
     (= (t2tb3375 (tb2t3375 j)) j)) :pattern ((t2tb3375 (tb2t3375 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 c d)))) (t (set (tuple21 c f)))
  (x (set (tuple21 c d))) (y (tuple21 c f)))
  (= (mem (tuple2 (set1 (tuple2 c1 d1)) (tuple2 c1 f1))
  (Tuple2 (set1 (tuple2 c1 d1)) (tuple2 c1 f1) (t2tb689 x) (t2tb2948 y))
  (times (tuple2 c1 f1) (set1 (tuple2 c1 d1)) (t2tb688 s) (t2tb2942 t)))
  (and (mem22 x s) (mem45 y t)))))

(declare-fun t2tb3376 ((set (tuple21 (set (tuple21 c d)) (tuple21 a
  e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 c d)) (tuple21 a e))))) (sort
  (set1 (tuple2 (set1 (tuple2 c1 d1)) (tuple2 a1 e1))) (t2tb3376 x))))

(declare-fun tb2t3376 (uni) (set (tuple21 (set (tuple21 c d)) (tuple21 a
  e))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 c d)) (tuple21 a e)))))
  (! (= (tb2t3376 (t2tb3376 i)) i) :pattern ((t2tb3376 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 c1 d1)) (tuple2 a1 e1))) j)
     (= (t2tb3376 (tb2t3376 j)) j)) :pattern ((t2tb3376 (tb2t3376 j))) )))

(declare-fun t2tb3377 ((tuple21 (set (tuple21 c d)) (tuple21 a e))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 c d)) (tuple21 a e)))) (sort
  (tuple2 (set1 (tuple2 c1 d1)) (tuple2 a1 e1)) (t2tb3377 x))))

(declare-fun tb2t3377 (uni) (tuple21 (set (tuple21 c d)) (tuple21 a e)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 c d)) (tuple21 a e))))
  (! (= (tb2t3377 (t2tb3377 i)) i) :pattern ((t2tb3377 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 c1 d1)) (tuple2 a1 e1)) j)
     (= (t2tb3377 (tb2t3377 j)) j)) :pattern ((t2tb3377 (tb2t3377 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 c d)))) (t (set (tuple21 a e)))
  (x (set (tuple21 c d))) (y (tuple21 a e)))
  (= (mem (tuple2 (set1 (tuple2 c1 d1)) (tuple2 a1 e1))
  (Tuple2 (set1 (tuple2 c1 d1)) (tuple2 a1 e1) (t2tb689 x) (t2tb2949 y))
  (times (tuple2 a1 e1) (set1 (tuple2 c1 d1)) (t2tb688 s) (t2tb2943 t)))
  (and (mem22 x s) (mem44 y t)))))

(declare-fun t2tb3378 ((set (tuple21 (set (tuple21 c d)) (tuple21 (tuple21 b
  d) (tuple21 e f))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 c d)) (tuple21 (tuple21 b d)
  (tuple21 e f)))))) (sort
  (set1
  (tuple2 (set1 (tuple2 c1 d1)) (tuple2 (tuple2 b1 d1) (tuple2 e1 f1))))
  (t2tb3378 x))))

(declare-fun tb2t3378 (uni) (set (tuple21 (set (tuple21 c d))
  (tuple21 (tuple21 b d) (tuple21 e f)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 c d)) (tuple21 (tuple21 b d)
  (tuple21 e f))))))
  (! (= (tb2t3378 (t2tb3378 i)) i) :pattern ((t2tb3378 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (tuple2 (set1 (tuple2 c1 d1)) (tuple2 (tuple2 b1 d1) (tuple2 e1 f1))))
     j) (= (t2tb3378 (tb2t3378 j)) j)) :pattern ((t2tb3378 (tb2t3378 j))) )))

(declare-fun t2tb3379 ((tuple21 (set (tuple21 c d)) (tuple21 (tuple21 b d)
  (tuple21 e f)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 c d)) (tuple21 (tuple21 b d) (tuple21 e
  f))))) (sort
  (tuple2 (set1 (tuple2 c1 d1)) (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)))
  (t2tb3379 x))))

(declare-fun tb2t3379 (uni) (tuple21 (set (tuple21 c d)) (tuple21 (tuple21 b
  d) (tuple21 e f))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 c d)) (tuple21 (tuple21 b d) (tuple21 e
  f))))) (! (= (tb2t3379 (t2tb3379 i)) i) :pattern ((t2tb3379 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (tuple2 (set1 (tuple2 c1 d1)) (tuple2 (tuple2 b1 d1) (tuple2 e1 f1))) j)
     (= (t2tb3379 (tb2t3379 j)) j)) :pattern ((t2tb3379 (tb2t3379 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 c d)))) (t (set (tuple21 (tuple21 b d)
  (tuple21 e f)))) (x (set (tuple21 c d))) (y (tuple21 (tuple21 b d)
  (tuple21 e f))))
  (= (mem
  (tuple2 (set1 (tuple2 c1 d1)) (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)))
  (Tuple2 (set1 (tuple2 c1 d1)) (tuple2 (tuple2 b1 d1) (tuple2 e1 f1))
  (t2tb689 x) (t2tb2950 y))
  (times (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (set1 (tuple2 c1 d1))
  (t2tb688 s) (t2tb2944 t))) (and (mem22 x s) (mem43 y t)))))

(declare-fun t2tb3380 ((set (tuple21 (set (tuple21 c d)) (tuple21 (tuple21 a
  c) (tuple21 e f))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 c d)) (tuple21 (tuple21 a c)
  (tuple21 e f)))))) (sort
  (set1
  (tuple2 (set1 (tuple2 c1 d1)) (tuple2 (tuple2 a1 c1) (tuple2 e1 f1))))
  (t2tb3380 x))))

(declare-fun tb2t3380 (uni) (set (tuple21 (set (tuple21 c d))
  (tuple21 (tuple21 a c) (tuple21 e f)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 c d)) (tuple21 (tuple21 a c)
  (tuple21 e f))))))
  (! (= (tb2t3380 (t2tb3380 i)) i) :pattern ((t2tb3380 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (tuple2 (set1 (tuple2 c1 d1)) (tuple2 (tuple2 a1 c1) (tuple2 e1 f1))))
     j) (= (t2tb3380 (tb2t3380 j)) j)) :pattern ((t2tb3380 (tb2t3380 j))) )))

(declare-fun t2tb3381 ((tuple21 (set (tuple21 c d)) (tuple21 (tuple21 a c)
  (tuple21 e f)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 c d)) (tuple21 (tuple21 a c) (tuple21 e
  f))))) (sort
  (tuple2 (set1 (tuple2 c1 d1)) (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)))
  (t2tb3381 x))))

(declare-fun tb2t3381 (uni) (tuple21 (set (tuple21 c d)) (tuple21 (tuple21 a
  c) (tuple21 e f))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 c d)) (tuple21 (tuple21 a c) (tuple21 e
  f))))) (! (= (tb2t3381 (t2tb3381 i)) i) :pattern ((t2tb3381 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (tuple2 (set1 (tuple2 c1 d1)) (tuple2 (tuple2 a1 c1) (tuple2 e1 f1))) j)
     (= (t2tb3381 (tb2t3381 j)) j)) :pattern ((t2tb3381 (tb2t3381 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 c d)))) (t (set (tuple21 (tuple21 a c)
  (tuple21 e f)))) (x (set (tuple21 c d))) (y (tuple21 (tuple21 a c)
  (tuple21 e f))))
  (= (mem
  (tuple2 (set1 (tuple2 c1 d1)) (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)))
  (Tuple2 (set1 (tuple2 c1 d1)) (tuple2 (tuple2 a1 c1) (tuple2 e1 f1))
  (t2tb689 x) (t2tb2951 y))
  (times (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (set1 (tuple2 c1 d1))
  (t2tb688 s) (t2tb2945 t))) (and (mem22 x s) (mem42 y t)))))

(declare-fun t2tb3382 ((set (tuple21 (set (tuple21 c d)) (set (tuple21 d
  f))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 c d)) (set (tuple21 d f)))))) (sort
  (set1 (tuple2 (set1 (tuple2 c1 d1)) (set1 (tuple2 d1 f1)))) (t2tb3382 x))))

(declare-fun tb2t3382 (uni) (set (tuple21 (set (tuple21 c d)) (set (tuple21 d
  f)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 c d)) (set (tuple21 d f))))))
  (! (= (tb2t3382 (t2tb3382 i)) i) :pattern ((t2tb3382 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 c1 d1)) (set1 (tuple2 d1 f1)))) j)
     (= (t2tb3382 (tb2t3382 j)) j)) :pattern ((t2tb3382 (tb2t3382 j))) )))

(declare-fun t2tb3383 ((tuple21 (set (tuple21 c d)) (set (tuple21 d
  f)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 c d)) (set (tuple21 d f))))) (sort
  (tuple2 (set1 (tuple2 c1 d1)) (set1 (tuple2 d1 f1))) (t2tb3383 x))))

(declare-fun tb2t3383 (uni) (tuple21 (set (tuple21 c d)) (set (tuple21 d
  f))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 c d)) (set (tuple21 d f)))))
  (! (= (tb2t3383 (t2tb3383 i)) i) :pattern ((t2tb3383 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 c1 d1)) (set1 (tuple2 d1 f1))) j)
     (= (t2tb3383 (tb2t3383 j)) j)) :pattern ((t2tb3383 (tb2t3383 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 c d)))) (t (set (set (tuple21 d f))))
  (x (set (tuple21 c d))) (y (set (tuple21 d f))))
  (= (mem (tuple2 (set1 (tuple2 c1 d1)) (set1 (tuple2 d1 f1)))
  (Tuple2 (set1 (tuple2 c1 d1)) (set1 (tuple2 d1 f1)) (t2tb689 x)
  (t2tb2938 y))
  (times (set1 (tuple2 d1 f1)) (set1 (tuple2 c1 d1)) (t2tb688 s)
  (t2tb2939 t))) (and (mem22 x s) (mem41 y t)))))

(declare-fun t2tb3384 ((set (tuple21 (set (tuple21 c d)) (tuple21 d
  f)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 c d)) (tuple21 d f))))) (sort
  (set1 (tuple2 (set1 (tuple2 c1 d1)) (tuple2 d1 f1))) (t2tb3384 x))))

(declare-fun tb2t3384 (uni) (set (tuple21 (set (tuple21 c d)) (tuple21 d
  f))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 c d)) (tuple21 d f)))))
  (! (= (tb2t3384 (t2tb3384 i)) i) :pattern ((t2tb3384 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 c1 d1)) (tuple2 d1 f1))) j)
     (= (t2tb3384 (tb2t3384 j)) j)) :pattern ((t2tb3384 (tb2t3384 j))) )))

(declare-fun t2tb3385 ((tuple21 (set (tuple21 c d)) (tuple21 d f))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 c d)) (tuple21 d f)))) (sort
  (tuple2 (set1 (tuple2 c1 d1)) (tuple2 d1 f1)) (t2tb3385 x))))

(declare-fun tb2t3385 (uni) (tuple21 (set (tuple21 c d)) (tuple21 d f)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 c d)) (tuple21 d f))))
  (! (= (tb2t3385 (t2tb3385 i)) i) :pattern ((t2tb3385 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 c1 d1)) (tuple2 d1 f1)) j)
     (= (t2tb3385 (tb2t3385 j)) j)) :pattern ((t2tb3385 (tb2t3385 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 c d)))) (t (set (tuple21 d f)))
  (x (set (tuple21 c d))) (y (tuple21 d f)))
  (= (mem (tuple2 (set1 (tuple2 c1 d1)) (tuple2 d1 f1))
  (Tuple2 (set1 (tuple2 c1 d1)) (tuple2 d1 f1) (t2tb689 x) (t2tb2952 y))
  (times (tuple2 d1 f1) (set1 (tuple2 c1 d1)) (t2tb688 s) (t2tb2938 t)))
  (and (mem22 x s) (mem40 y t)))))

(declare-fun t2tb3386 ((set (tuple21 (set (tuple21 c d)) (set (tuple21 b
  e))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 c d)) (set (tuple21 b e)))))) (sort
  (set1 (tuple2 (set1 (tuple2 c1 d1)) (set1 (tuple2 b1 e1)))) (t2tb3386 x))))

(declare-fun tb2t3386 (uni) (set (tuple21 (set (tuple21 c d)) (set (tuple21 b
  e)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 c d)) (set (tuple21 b e))))))
  (! (= (tb2t3386 (t2tb3386 i)) i) :pattern ((t2tb3386 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 c1 d1)) (set1 (tuple2 b1 e1)))) j)
     (= (t2tb3386 (tb2t3386 j)) j)) :pattern ((t2tb3386 (tb2t3386 j))) )))

(declare-fun t2tb3387 ((tuple21 (set (tuple21 c d)) (set (tuple21 b
  e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 c d)) (set (tuple21 b e))))) (sort
  (tuple2 (set1 (tuple2 c1 d1)) (set1 (tuple2 b1 e1))) (t2tb3387 x))))

(declare-fun tb2t3387 (uni) (tuple21 (set (tuple21 c d)) (set (tuple21 b
  e))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 c d)) (set (tuple21 b e)))))
  (! (= (tb2t3387 (t2tb3387 i)) i) :pattern ((t2tb3387 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 c1 d1)) (set1 (tuple2 b1 e1))) j)
     (= (t2tb3387 (tb2t3387 j)) j)) :pattern ((t2tb3387 (tb2t3387 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 c d)))) (t (set (set (tuple21 b e))))
  (x (set (tuple21 c d))) (y (set (tuple21 b e))))
  (= (mem (tuple2 (set1 (tuple2 c1 d1)) (set1 (tuple2 b1 e1)))
  (Tuple2 (set1 (tuple2 c1 d1)) (set1 (tuple2 b1 e1)) (t2tb689 x)
  (t2tb2940 y))
  (times (set1 (tuple2 b1 e1)) (set1 (tuple2 c1 d1)) (t2tb688 s)
  (t2tb2941 t))) (and (mem22 x s) (mem39 y t)))))

(declare-fun t2tb3388 ((set (tuple21 (set (tuple21 c d)) (tuple21 b
  e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 c d)) (tuple21 b e))))) (sort
  (set1 (tuple2 (set1 (tuple2 c1 d1)) (tuple2 b1 e1))) (t2tb3388 x))))

(declare-fun tb2t3388 (uni) (set (tuple21 (set (tuple21 c d)) (tuple21 b
  e))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 c d)) (tuple21 b e)))))
  (! (= (tb2t3388 (t2tb3388 i)) i) :pattern ((t2tb3388 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 c1 d1)) (tuple2 b1 e1))) j)
     (= (t2tb3388 (tb2t3388 j)) j)) :pattern ((t2tb3388 (tb2t3388 j))) )))

(declare-fun t2tb3389 ((tuple21 (set (tuple21 c d)) (tuple21 b e))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 c d)) (tuple21 b e)))) (sort
  (tuple2 (set1 (tuple2 c1 d1)) (tuple2 b1 e1)) (t2tb3389 x))))

(declare-fun tb2t3389 (uni) (tuple21 (set (tuple21 c d)) (tuple21 b e)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 c d)) (tuple21 b e))))
  (! (= (tb2t3389 (t2tb3389 i)) i) :pattern ((t2tb3389 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 c1 d1)) (tuple2 b1 e1)) j)
     (= (t2tb3389 (tb2t3389 j)) j)) :pattern ((t2tb3389 (tb2t3389 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 c d)))) (t (set (tuple21 b e)))
  (x (set (tuple21 c d))) (y (tuple21 b e)))
  (= (mem (tuple2 (set1 (tuple2 c1 d1)) (tuple2 b1 e1))
  (Tuple2 (set1 (tuple2 c1 d1)) (tuple2 b1 e1) (t2tb689 x) (t2tb2953 y))
  (times (tuple2 b1 e1) (set1 (tuple2 c1 d1)) (t2tb688 s) (t2tb2940 t)))
  (and (mem22 x s) (mem38 y t)))))

(declare-fun t2tb3390 ((set (tuple21 (set (tuple21 c d)) f))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 c d)) f)))) (sort
  (set1 (tuple2 (set1 (tuple2 c1 d1)) f1)) (t2tb3390 x))))

(declare-fun tb2t3390 (uni) (set (tuple21 (set (tuple21 c d)) f)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 c d)) f))))
  (! (= (tb2t3390 (t2tb3390 i)) i) :pattern ((t2tb3390 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 c1 d1)) f1)) j)
     (= (t2tb3390 (tb2t3390 j)) j)) :pattern ((t2tb3390 (tb2t3390 j))) )))

(declare-fun t2tb3391 ((tuple21 (set (tuple21 c d)) f)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 c d)) f))) (sort
  (tuple2 (set1 (tuple2 c1 d1)) f1) (t2tb3391 x))))

(declare-fun tb2t3391 (uni) (tuple21 (set (tuple21 c d)) f))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 c d)) f)))
  (! (= (tb2t3391 (t2tb3391 i)) i) :pattern ((t2tb3391 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 c1 d1)) f1) j)
     (= (t2tb3391 (tb2t3391 j)) j)) :pattern ((t2tb3391 (tb2t3391 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 c d)))) (t (set f)) (x (set (tuple21 c d)))
  (y f))
  (= (mem (tuple2 (set1 (tuple2 c1 d1)) f1)
  (Tuple2 (set1 (tuple2 c1 d1)) f1 (t2tb689 x) (t2tb2954 y))
  (times f1 (set1 (tuple2 c1 d1)) (t2tb688 s) (t2tb2946 t)))
  (and (mem22 x s) (mem37 y t)))))

(declare-fun t2tb3392 ((set (tuple21 (set (tuple21 c d)) e))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 c d)) e)))) (sort
  (set1 (tuple2 (set1 (tuple2 c1 d1)) e1)) (t2tb3392 x))))

(declare-fun tb2t3392 (uni) (set (tuple21 (set (tuple21 c d)) e)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 c d)) e))))
  (! (= (tb2t3392 (t2tb3392 i)) i) :pattern ((t2tb3392 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 c1 d1)) e1)) j)
     (= (t2tb3392 (tb2t3392 j)) j)) :pattern ((t2tb3392 (tb2t3392 j))) )))

(declare-fun t2tb3393 ((tuple21 (set (tuple21 c d)) e)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 c d)) e))) (sort
  (tuple2 (set1 (tuple2 c1 d1)) e1) (t2tb3393 x))))

(declare-fun tb2t3393 (uni) (tuple21 (set (tuple21 c d)) e))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 c d)) e)))
  (! (= (tb2t3393 (t2tb3393 i)) i) :pattern ((t2tb3393 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 c1 d1)) e1) j)
     (= (t2tb3393 (tb2t3393 j)) j)) :pattern ((t2tb3393 (tb2t3393 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 c d)))) (t (set e)) (x (set (tuple21 c d)))
  (y e))
  (= (mem (tuple2 (set1 (tuple2 c1 d1)) e1)
  (Tuple2 (set1 (tuple2 c1 d1)) e1 (t2tb689 x) (t2tb2955 y))
  (times e1 (set1 (tuple2 c1 d1)) (t2tb688 s) (t2tb2947 t)))
  (and (mem22 x s) (mem36 y t)))))

(declare-fun t2tb3394 ((set (tuple21 (set (tuple21 c d)) (tuple21 (tuple21 a
  c) (tuple21 b d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 c d)) (tuple21 (tuple21 a c)
  (tuple21 b d)))))) (sort
  (set1
  (tuple2 (set1 (tuple2 c1 d1)) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))))
  (t2tb3394 x))))

(declare-fun tb2t3394 (uni) (set (tuple21 (set (tuple21 c d))
  (tuple21 (tuple21 a c) (tuple21 b d)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 c d)) (tuple21 (tuple21 a c)
  (tuple21 b d))))))
  (! (= (tb2t3394 (t2tb3394 i)) i) :pattern ((t2tb3394 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (tuple2 (set1 (tuple2 c1 d1)) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))))
     j) (= (t2tb3394 (tb2t3394 j)) j)) :pattern ((t2tb3394 (tb2t3394 j))) )))

(declare-fun t2tb3395 ((tuple21 (set (tuple21 c d)) (tuple21 (tuple21 a c)
  (tuple21 b d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 c d)) (tuple21 (tuple21 a c) (tuple21 b
  d))))) (sort
  (tuple2 (set1 (tuple2 c1 d1)) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
  (t2tb3395 x))))

(declare-fun tb2t3395 (uni) (tuple21 (set (tuple21 c d)) (tuple21 (tuple21 a
  c) (tuple21 b d))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 c d)) (tuple21 (tuple21 a c) (tuple21 b
  d))))) (! (= (tb2t3395 (t2tb3395 i)) i) :pattern ((t2tb3395 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (tuple2 (set1 (tuple2 c1 d1)) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))) j)
     (= (t2tb3395 (tb2t3395 j)) j)) :pattern ((t2tb3395 (tb2t3395 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 c d)))) (t (set (tuple21 (tuple21 a c)
  (tuple21 b d)))) (x (set (tuple21 c d))) (y (tuple21 (tuple21 a c)
  (tuple21 b d))))
  (= (mem
  (tuple2 (set1 (tuple2 c1 d1)) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
  (Tuple2 (set1 (tuple2 c1 d1)) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))
  (t2tb689 x) (t2tb691 y))
  (times (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (set1 (tuple2 c1 d1))
  (t2tb688 s) (t2tb686 t))) (and (mem22 x s) (mem24 y t)))))

(declare-fun t2tb3396 ((set (tuple21 (set (tuple21 c d)) (set (tuple21 c
  d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 c d)) (set (tuple21 c d)))))) (sort
  (set1 (tuple2 (set1 (tuple2 c1 d1)) (set1 (tuple2 c1 d1)))) (t2tb3396 x))))

(declare-fun tb2t3396 (uni) (set (tuple21 (set (tuple21 c d)) (set (tuple21 c
  d)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 c d)) (set (tuple21 c d))))))
  (! (= (tb2t3396 (t2tb3396 i)) i) :pattern ((t2tb3396 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 c1 d1)) (set1 (tuple2 c1 d1)))) j)
     (= (t2tb3396 (tb2t3396 j)) j)) :pattern ((t2tb3396 (tb2t3396 j))) )))

(declare-fun t2tb3397 ((tuple21 (set (tuple21 c d)) (set (tuple21 c
  d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 c d)) (set (tuple21 c d))))) (sort
  (tuple2 (set1 (tuple2 c1 d1)) (set1 (tuple2 c1 d1))) (t2tb3397 x))))

(declare-fun tb2t3397 (uni) (tuple21 (set (tuple21 c d)) (set (tuple21 c
  d))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 c d)) (set (tuple21 c d)))))
  (! (= (tb2t3397 (t2tb3397 i)) i) :pattern ((t2tb3397 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 c1 d1)) (set1 (tuple2 c1 d1))) j)
     (= (t2tb3397 (tb2t3397 j)) j)) :pattern ((t2tb3397 (tb2t3397 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 c d)))) (t (set (set (tuple21 c d))))
  (x (set (tuple21 c d))) (y (set (tuple21 c d))))
  (= (mem (tuple2 (set1 (tuple2 c1 d1)) (set1 (tuple2 c1 d1)))
  (Tuple2 (set1 (tuple2 c1 d1)) (set1 (tuple2 c1 d1)) (t2tb689 x)
  (t2tb689 y))
  (times (set1 (tuple2 c1 d1)) (set1 (tuple2 c1 d1)) (t2tb688 s) (t2tb688 t)))
  (and (mem22 x s) (mem22 y t)))))

(declare-fun t2tb3398 ((set (tuple21 (set (tuple21 c d)) (tuple21 c
  d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 c d)) (tuple21 c d))))) (sort
  (set1 (tuple2 (set1 (tuple2 c1 d1)) (tuple2 c1 d1))) (t2tb3398 x))))

(declare-fun tb2t3398 (uni) (set (tuple21 (set (tuple21 c d)) (tuple21 c
  d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 c d)) (tuple21 c d)))))
  (! (= (tb2t3398 (t2tb3398 i)) i) :pattern ((t2tb3398 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 c1 d1)) (tuple2 c1 d1))) j)
     (= (t2tb3398 (tb2t3398 j)) j)) :pattern ((t2tb3398 (tb2t3398 j))) )))

(declare-fun t2tb3399 ((tuple21 (set (tuple21 c d)) (tuple21 c d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 c d)) (tuple21 c d)))) (sort
  (tuple2 (set1 (tuple2 c1 d1)) (tuple2 c1 d1)) (t2tb3399 x))))

(declare-fun tb2t3399 (uni) (tuple21 (set (tuple21 c d)) (tuple21 c d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 c d)) (tuple21 c d))))
  (! (= (tb2t3399 (t2tb3399 i)) i) :pattern ((t2tb3399 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 c1 d1)) (tuple2 c1 d1)) j)
     (= (t2tb3399 (tb2t3399 j)) j)) :pattern ((t2tb3399 (tb2t3399 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 c d)))) (t (set (tuple21 c d)))
  (x (set (tuple21 c d))) (y (tuple21 c d)))
  (= (mem (tuple2 (set1 (tuple2 c1 d1)) (tuple2 c1 d1))
  (Tuple2 (set1 (tuple2 c1 d1)) (tuple2 c1 d1) (t2tb689 x) (t2tb693 y))
  (times (tuple2 c1 d1) (set1 (tuple2 c1 d1)) (t2tb688 s) (t2tb689 t)))
  (and (mem22 x s) (mem21 y t)))))

(declare-fun t2tb3400 ((set (tuple21 (set (tuple21 c d)) d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 c d)) d)))) (sort
  (set1 (tuple2 (set1 (tuple2 c1 d1)) d1)) (t2tb3400 x))))

(declare-fun tb2t3400 (uni) (set (tuple21 (set (tuple21 c d)) d)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 c d)) d))))
  (! (= (tb2t3400 (t2tb3400 i)) i) :pattern ((t2tb3400 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 c1 d1)) d1)) j)
     (= (t2tb3400 (tb2t3400 j)) j)) :pattern ((t2tb3400 (tb2t3400 j))) )))

(declare-fun t2tb3401 ((tuple21 (set (tuple21 c d)) d)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 c d)) d))) (sort
  (tuple2 (set1 (tuple2 c1 d1)) d1) (t2tb3401 x))))

(declare-fun tb2t3401 (uni) (tuple21 (set (tuple21 c d)) d))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 c d)) d)))
  (! (= (tb2t3401 (t2tb3401 i)) i) :pattern ((t2tb3401 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 c1 d1)) d1) j)
     (= (t2tb3401 (tb2t3401 j)) j)) :pattern ((t2tb3401 (tb2t3401 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 c d)))) (t (set d)) (x (set (tuple21 c d)))
  (y d))
  (= (mem (tuple2 (set1 (tuple2 c1 d1)) d1)
  (Tuple2 (set1 (tuple2 c1 d1)) d1 (t2tb689 x) (t2tb694 y))
  (times d1 (set1 (tuple2 c1 d1)) (t2tb688 s) (t2tb690 t)))
  (and (mem22 x s) (mem20 y t)))))

(declare-fun t2tb3402 ((set (tuple21 (set (tuple21 c d)) c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 c d)) c)))) (sort
  (set1 (tuple2 (set1 (tuple2 c1 d1)) c1)) (t2tb3402 x))))

(declare-fun tb2t3402 (uni) (set (tuple21 (set (tuple21 c d)) c)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 c d)) c))))
  (! (= (tb2t3402 (t2tb3402 i)) i) :pattern ((t2tb3402 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 c1 d1)) c1)) j)
     (= (t2tb3402 (tb2t3402 j)) j)) :pattern ((t2tb3402 (tb2t3402 j))) )))

(declare-fun t2tb3403 ((tuple21 (set (tuple21 c d)) c)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 c d)) c))) (sort
  (tuple2 (set1 (tuple2 c1 d1)) c1) (t2tb3403 x))))

(declare-fun tb2t3403 (uni) (tuple21 (set (tuple21 c d)) c))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 c d)) c)))
  (! (= (tb2t3403 (t2tb3403 i)) i) :pattern ((t2tb3403 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 c1 d1)) c1) j)
     (= (t2tb3403 (tb2t3403 j)) j)) :pattern ((t2tb3403 (tb2t3403 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 c d)))) (t (set c)) (x (set (tuple21 c d)))
  (y c))
  (= (mem (tuple2 (set1 (tuple2 c1 d1)) c1)
  (Tuple2 (set1 (tuple2 c1 d1)) c1 (t2tb689 x) (t2tb135 y))
  (times c1 (set1 (tuple2 c1 d1)) (t2tb688 s) (t2tb132 t)))
  (and (mem22 x s) (mem7 y t)))))

(declare-fun t2tb3404 ((set (tuple21 (set (tuple21 c d)) (set (tuple21 a
  b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 c d)) (set (tuple21 a b)))))) (sort
  (set1 (tuple2 (set1 (tuple2 c1 d1)) (set1 (tuple2 a1 b1)))) (t2tb3404 x))))

(declare-fun tb2t3404 (uni) (set (tuple21 (set (tuple21 c d)) (set (tuple21 a
  b)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 c d)) (set (tuple21 a b))))))
  (! (= (tb2t3404 (t2tb3404 i)) i) :pattern ((t2tb3404 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 c1 d1)) (set1 (tuple2 a1 b1)))) j)
     (= (t2tb3404 (tb2t3404 j)) j)) :pattern ((t2tb3404 (tb2t3404 j))) )))

(declare-fun t2tb3405 ((tuple21 (set (tuple21 c d)) (set (tuple21 a
  b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 c d)) (set (tuple21 a b))))) (sort
  (tuple2 (set1 (tuple2 c1 d1)) (set1 (tuple2 a1 b1))) (t2tb3405 x))))

(declare-fun tb2t3405 (uni) (tuple21 (set (tuple21 c d)) (set (tuple21 a
  b))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 c d)) (set (tuple21 a b)))))
  (! (= (tb2t3405 (t2tb3405 i)) i) :pattern ((t2tb3405 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 c1 d1)) (set1 (tuple2 a1 b1))) j)
     (= (t2tb3405 (tb2t3405 j)) j)) :pattern ((t2tb3405 (tb2t3405 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 c d)))) (t (set (set (tuple21 a b))))
  (x (set (tuple21 c d))) (y (set (tuple21 a b))))
  (= (mem (tuple2 (set1 (tuple2 c1 d1)) (set1 (tuple2 a1 b1)))
  (Tuple2 (set1 (tuple2 c1 d1)) (set1 (tuple2 a1 b1)) (t2tb689 x) (t2tb11 y))
  (times (set1 (tuple2 a1 b1)) (set1 (tuple2 c1 d1)) (t2tb688 s) (t2tb10 t)))
  (and (mem22 x s) (mem4 y t)))))

(declare-fun t2tb3406 ((set (tuple21 (set (tuple21 c d)) (tuple21 a
  b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 c d)) (tuple21 a b))))) (sort
  (set1 (tuple2 (set1 (tuple2 c1 d1)) (tuple2 a1 b1))) (t2tb3406 x))))

(declare-fun tb2t3406 (uni) (set (tuple21 (set (tuple21 c d)) (tuple21 a
  b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 c d)) (tuple21 a b)))))
  (! (= (tb2t3406 (t2tb3406 i)) i) :pattern ((t2tb3406 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 c1 d1)) (tuple2 a1 b1))) j)
     (= (t2tb3406 (tb2t3406 j)) j)) :pattern ((t2tb3406 (tb2t3406 j))) )))

(declare-fun t2tb3407 ((tuple21 (set (tuple21 c d)) (tuple21 a b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 c d)) (tuple21 a b)))) (sort
  (tuple2 (set1 (tuple2 c1 d1)) (tuple2 a1 b1)) (t2tb3407 x))))

(declare-fun tb2t3407 (uni) (tuple21 (set (tuple21 c d)) (tuple21 a b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 c d)) (tuple21 a b))))
  (! (= (tb2t3407 (t2tb3407 i)) i) :pattern ((t2tb3407 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 c1 d1)) (tuple2 a1 b1)) j)
     (= (t2tb3407 (tb2t3407 j)) j)) :pattern ((t2tb3407 (tb2t3407 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 c d)))) (t (set (tuple21 a b)))
  (x (set (tuple21 c d))) (y (tuple21 a b)))
  (= (mem (tuple2 (set1 (tuple2 c1 d1)) (tuple2 a1 b1))
  (Tuple2 (set1 (tuple2 c1 d1)) (tuple2 a1 b1) (t2tb689 x) (t2tb13 y))
  (times (tuple2 a1 b1) (set1 (tuple2 c1 d1)) (t2tb688 s) (t2tb11 t)))
  (and (mem22 x s) (mem3 y t)))))

(declare-fun t2tb3408 ((set (tuple21 (set (tuple21 c d)) b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 c d)) b)))) (sort
  (set1 (tuple2 (set1 (tuple2 c1 d1)) b1)) (t2tb3408 x))))

(declare-fun tb2t3408 (uni) (set (tuple21 (set (tuple21 c d)) b)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 c d)) b))))
  (! (= (tb2t3408 (t2tb3408 i)) i) :pattern ((t2tb3408 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 c1 d1)) b1)) j)
     (= (t2tb3408 (tb2t3408 j)) j)) :pattern ((t2tb3408 (tb2t3408 j))) )))

(declare-fun t2tb3409 ((tuple21 (set (tuple21 c d)) b)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 c d)) b))) (sort
  (tuple2 (set1 (tuple2 c1 d1)) b1) (t2tb3409 x))))

(declare-fun tb2t3409 (uni) (tuple21 (set (tuple21 c d)) b))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 c d)) b)))
  (! (= (tb2t3409 (t2tb3409 i)) i) :pattern ((t2tb3409 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 c1 d1)) b1) j)
     (= (t2tb3409 (tb2t3409 j)) j)) :pattern ((t2tb3409 (tb2t3409 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 c d)))) (t (set b)) (x (set (tuple21 c d)))
  (y b))
  (= (mem (tuple2 (set1 (tuple2 c1 d1)) b1)
  (Tuple2 (set1 (tuple2 c1 d1)) b1 (t2tb689 x) (t2tb14 y))
  (times b1 (set1 (tuple2 c1 d1)) (t2tb688 s) (t2tb12 t)))
  (and (mem22 x s) (mem2 y t)))))

(declare-fun t2tb3410 ((set (tuple21 (set (tuple21 c d)) a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 c d)) a)))) (sort
  (set1 (tuple2 (set1 (tuple2 c1 d1)) a1)) (t2tb3410 x))))

(declare-fun tb2t3410 (uni) (set (tuple21 (set (tuple21 c d)) a)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 c d)) a))))
  (! (= (tb2t3410 (t2tb3410 i)) i) :pattern ((t2tb3410 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 c1 d1)) a1)) j)
     (= (t2tb3410 (tb2t3410 j)) j)) :pattern ((t2tb3410 (tb2t3410 j))) )))

(declare-fun t2tb3411 ((tuple21 (set (tuple21 c d)) a)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 c d)) a))) (sort
  (tuple2 (set1 (tuple2 c1 d1)) a1) (t2tb3411 x))))

(declare-fun tb2t3411 (uni) (tuple21 (set (tuple21 c d)) a))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 c d)) a)))
  (! (= (tb2t3411 (t2tb3411 i)) i) :pattern ((t2tb3411 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 c1 d1)) a1) j)
     (= (t2tb3411 (tb2t3411 j)) j)) :pattern ((t2tb3411 (tb2t3411 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 c d)))) (t (set a)) (x (set (tuple21 c d)))
  (y a))
  (= (mem (tuple2 (set1 (tuple2 c1 d1)) a1)
  (Tuple2 (set1 (tuple2 c1 d1)) a1 (t2tb689 x) (t2tb2 y))
  (times a1 (set1 (tuple2 c1 d1)) (t2tb688 s) (t2tb1 t)))
  (and (mem22 x s) (mem1 y t)))))

;; mem_times
  (assert
  (forall ((b2 ty))
  (forall ((s (set (set (tuple21 c d)))) (t uni) (x (set (tuple21 c d)))
  (y uni))
  (= (mem (tuple2 (set1 (tuple2 c1 d1)) b2)
  (Tuple2 (set1 (tuple2 c1 d1)) b2 (t2tb689 x) y)
  (times b2 (set1 (tuple2 c1 d1)) (t2tb688 s) t))
  (and (mem22 x s) (mem b2 y t))))))

(declare-fun t2tb3412 ((set (tuple21 (tuple21 c d) (tuple21 c f)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 c d) (tuple21 c f))))) (sort
  (set1 (tuple2 (tuple2 c1 d1) (tuple2 c1 f1))) (t2tb3412 x))))

(declare-fun tb2t3412 (uni) (set (tuple21 (tuple21 c d) (tuple21 c f))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 c d) (tuple21 c f)))))
  (! (= (tb2t3412 (t2tb3412 i)) i) :pattern ((t2tb3412 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 c1 d1) (tuple2 c1 f1))) j)
     (= (t2tb3412 (tb2t3412 j)) j)) :pattern ((t2tb3412 (tb2t3412 j))) )))

(declare-fun t2tb3413 ((tuple21 (tuple21 c d) (tuple21 c f))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 c d) (tuple21 c f)))) (sort
  (tuple2 (tuple2 c1 d1) (tuple2 c1 f1)) (t2tb3413 x))))

(declare-fun tb2t3413 (uni) (tuple21 (tuple21 c d) (tuple21 c f)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 c d) (tuple21 c f))))
  (! (= (tb2t3413 (t2tb3413 i)) i) :pattern ((t2tb3413 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 c1 d1) (tuple2 c1 f1)) j)
     (= (t2tb3413 (tb2t3413 j)) j)) :pattern ((t2tb3413 (tb2t3413 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 c d))) (t (set (tuple21 c f))) (x (tuple21 c d))
  (y (tuple21 c f)))
  (= (mem (tuple2 (tuple2 c1 d1) (tuple2 c1 f1))
  (Tuple2 (tuple2 c1 d1) (tuple2 c1 f1) (t2tb693 x) (t2tb2948 y))
  (times (tuple2 c1 f1) (tuple2 c1 d1) (t2tb689 s) (t2tb2942 t)))
  (and (mem21 x s) (mem45 y t)))))

(declare-fun t2tb3414 ((set (tuple21 (tuple21 c d) (tuple21 a e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 c d) (tuple21 a e))))) (sort
  (set1 (tuple2 (tuple2 c1 d1) (tuple2 a1 e1))) (t2tb3414 x))))

(declare-fun tb2t3414 (uni) (set (tuple21 (tuple21 c d) (tuple21 a e))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 c d) (tuple21 a e)))))
  (! (= (tb2t3414 (t2tb3414 i)) i) :pattern ((t2tb3414 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 c1 d1) (tuple2 a1 e1))) j)
     (= (t2tb3414 (tb2t3414 j)) j)) :pattern ((t2tb3414 (tb2t3414 j))) )))

(declare-fun t2tb3415 ((tuple21 (tuple21 c d) (tuple21 a e))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 c d) (tuple21 a e)))) (sort
  (tuple2 (tuple2 c1 d1) (tuple2 a1 e1)) (t2tb3415 x))))

(declare-fun tb2t3415 (uni) (tuple21 (tuple21 c d) (tuple21 a e)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 c d) (tuple21 a e))))
  (! (= (tb2t3415 (t2tb3415 i)) i) :pattern ((t2tb3415 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 c1 d1) (tuple2 a1 e1)) j)
     (= (t2tb3415 (tb2t3415 j)) j)) :pattern ((t2tb3415 (tb2t3415 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 c d))) (t (set (tuple21 a e))) (x (tuple21 c d))
  (y (tuple21 a e)))
  (= (mem (tuple2 (tuple2 c1 d1) (tuple2 a1 e1))
  (Tuple2 (tuple2 c1 d1) (tuple2 a1 e1) (t2tb693 x) (t2tb2949 y))
  (times (tuple2 a1 e1) (tuple2 c1 d1) (t2tb689 s) (t2tb2943 t)))
  (and (mem21 x s) (mem44 y t)))))

(declare-fun t2tb3416 ((set (tuple21 (tuple21 c d) (tuple21 (tuple21 b d)
  (tuple21 e f))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 c d) (tuple21 (tuple21 b d) (tuple21 e
  f)))))) (sort
  (set1 (tuple2 (tuple2 c1 d1) (tuple2 (tuple2 b1 d1) (tuple2 e1 f1))))
  (t2tb3416 x))))

(declare-fun tb2t3416 (uni) (set (tuple21 (tuple21 c d) (tuple21 (tuple21 b
  d) (tuple21 e f)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 c d) (tuple21 (tuple21 b d) (tuple21 e
  f)))))) (! (= (tb2t3416 (t2tb3416 i)) i) :pattern ((t2tb3416 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 c1 d1) (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)))) j)
     (= (t2tb3416 (tb2t3416 j)) j)) :pattern ((t2tb3416 (tb2t3416 j))) )))

(declare-fun t2tb3417 ((tuple21 (tuple21 c d) (tuple21 (tuple21 b d)
  (tuple21 e f)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 c d) (tuple21 (tuple21 b d) (tuple21 e f)))))
  (sort (tuple2 (tuple2 c1 d1) (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)))
  (t2tb3417 x))))

(declare-fun tb2t3417 (uni) (tuple21 (tuple21 c d) (tuple21 (tuple21 b d)
  (tuple21 e f))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 c d) (tuple21 (tuple21 b d) (tuple21 e f)))))
  (! (= (tb2t3417 (t2tb3417 i)) i) :pattern ((t2tb3417 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 c1 d1) (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)))
     j) (= (t2tb3417 (tb2t3417 j)) j)) :pattern ((t2tb3417 (tb2t3417 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 c d))) (t (set (tuple21 (tuple21 b d) (tuple21 e
  f)))) (x (tuple21 c d)) (y (tuple21 (tuple21 b d) (tuple21 e f))))
  (= (mem (tuple2 (tuple2 c1 d1) (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)))
  (Tuple2 (tuple2 c1 d1) (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (t2tb693 x)
  (t2tb2950 y))
  (times (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (tuple2 c1 d1) (t2tb689 s)
  (t2tb2944 t))) (and (mem21 x s) (mem43 y t)))))

(declare-fun t2tb3418 ((set (tuple21 (tuple21 c d) (tuple21 (tuple21 a c)
  (tuple21 e f))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 c d) (tuple21 (tuple21 a c) (tuple21 e
  f)))))) (sort
  (set1 (tuple2 (tuple2 c1 d1) (tuple2 (tuple2 a1 c1) (tuple2 e1 f1))))
  (t2tb3418 x))))

(declare-fun tb2t3418 (uni) (set (tuple21 (tuple21 c d) (tuple21 (tuple21 a
  c) (tuple21 e f)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 c d) (tuple21 (tuple21 a c) (tuple21 e
  f)))))) (! (= (tb2t3418 (t2tb3418 i)) i) :pattern ((t2tb3418 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 c1 d1) (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)))) j)
     (= (t2tb3418 (tb2t3418 j)) j)) :pattern ((t2tb3418 (tb2t3418 j))) )))

(declare-fun t2tb3419 ((tuple21 (tuple21 c d) (tuple21 (tuple21 a c)
  (tuple21 e f)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 c d) (tuple21 (tuple21 a c) (tuple21 e f)))))
  (sort (tuple2 (tuple2 c1 d1) (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)))
  (t2tb3419 x))))

(declare-fun tb2t3419 (uni) (tuple21 (tuple21 c d) (tuple21 (tuple21 a c)
  (tuple21 e f))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 c d) (tuple21 (tuple21 a c) (tuple21 e f)))))
  (! (= (tb2t3419 (t2tb3419 i)) i) :pattern ((t2tb3419 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 c1 d1) (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)))
     j) (= (t2tb3419 (tb2t3419 j)) j)) :pattern ((t2tb3419 (tb2t3419 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 c d))) (t (set (tuple21 (tuple21 a c) (tuple21 e
  f)))) (x (tuple21 c d)) (y (tuple21 (tuple21 a c) (tuple21 e f))))
  (= (mem (tuple2 (tuple2 c1 d1) (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)))
  (Tuple2 (tuple2 c1 d1) (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (t2tb693 x)
  (t2tb2951 y))
  (times (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (tuple2 c1 d1) (t2tb689 s)
  (t2tb2945 t))) (and (mem21 x s) (mem42 y t)))))

(declare-fun t2tb3420 ((set (tuple21 (tuple21 c d) (set (tuple21 d
  f))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 c d) (set (tuple21 d f)))))) (sort
  (set1 (tuple2 (tuple2 c1 d1) (set1 (tuple2 d1 f1)))) (t2tb3420 x))))

(declare-fun tb2t3420 (uni) (set (tuple21 (tuple21 c d) (set (tuple21 d
  f)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 c d) (set (tuple21 d f))))))
  (! (= (tb2t3420 (t2tb3420 i)) i) :pattern ((t2tb3420 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 c1 d1) (set1 (tuple2 d1 f1)))) j)
     (= (t2tb3420 (tb2t3420 j)) j)) :pattern ((t2tb3420 (tb2t3420 j))) )))

(declare-fun t2tb3421 ((tuple21 (tuple21 c d) (set (tuple21 d f)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 c d) (set (tuple21 d f))))) (sort
  (tuple2 (tuple2 c1 d1) (set1 (tuple2 d1 f1))) (t2tb3421 x))))

(declare-fun tb2t3421 (uni) (tuple21 (tuple21 c d) (set (tuple21 d f))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 c d) (set (tuple21 d f)))))
  (! (= (tb2t3421 (t2tb3421 i)) i) :pattern ((t2tb3421 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 c1 d1) (set1 (tuple2 d1 f1))) j)
     (= (t2tb3421 (tb2t3421 j)) j)) :pattern ((t2tb3421 (tb2t3421 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 c d))) (t (set (set (tuple21 d f))))
  (x (tuple21 c d)) (y (set (tuple21 d f))))
  (= (mem (tuple2 (tuple2 c1 d1) (set1 (tuple2 d1 f1)))
  (Tuple2 (tuple2 c1 d1) (set1 (tuple2 d1 f1)) (t2tb693 x) (t2tb2938 y))
  (times (set1 (tuple2 d1 f1)) (tuple2 c1 d1) (t2tb689 s) (t2tb2939 t)))
  (and (mem21 x s) (mem41 y t)))))

(declare-fun t2tb3422 ((set (tuple21 (tuple21 c d) (tuple21 d f)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 c d) (tuple21 d f))))) (sort
  (set1 (tuple2 (tuple2 c1 d1) (tuple2 d1 f1))) (t2tb3422 x))))

(declare-fun tb2t3422 (uni) (set (tuple21 (tuple21 c d) (tuple21 d f))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 c d) (tuple21 d f)))))
  (! (= (tb2t3422 (t2tb3422 i)) i) :pattern ((t2tb3422 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 c1 d1) (tuple2 d1 f1))) j)
     (= (t2tb3422 (tb2t3422 j)) j)) :pattern ((t2tb3422 (tb2t3422 j))) )))

(declare-fun t2tb3423 ((tuple21 (tuple21 c d) (tuple21 d f))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 c d) (tuple21 d f)))) (sort
  (tuple2 (tuple2 c1 d1) (tuple2 d1 f1)) (t2tb3423 x))))

(declare-fun tb2t3423 (uni) (tuple21 (tuple21 c d) (tuple21 d f)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 c d) (tuple21 d f))))
  (! (= (tb2t3423 (t2tb3423 i)) i) :pattern ((t2tb3423 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 c1 d1) (tuple2 d1 f1)) j)
     (= (t2tb3423 (tb2t3423 j)) j)) :pattern ((t2tb3423 (tb2t3423 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 c d))) (t (set (tuple21 d f))) (x (tuple21 c d))
  (y (tuple21 d f)))
  (= (mem (tuple2 (tuple2 c1 d1) (tuple2 d1 f1))
  (Tuple2 (tuple2 c1 d1) (tuple2 d1 f1) (t2tb693 x) (t2tb2952 y))
  (times (tuple2 d1 f1) (tuple2 c1 d1) (t2tb689 s) (t2tb2938 t)))
  (and (mem21 x s) (mem40 y t)))))

(declare-fun t2tb3424 ((set (tuple21 (tuple21 c d) (set (tuple21 b
  e))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 c d) (set (tuple21 b e)))))) (sort
  (set1 (tuple2 (tuple2 c1 d1) (set1 (tuple2 b1 e1)))) (t2tb3424 x))))

(declare-fun tb2t3424 (uni) (set (tuple21 (tuple21 c d) (set (tuple21 b
  e)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 c d) (set (tuple21 b e))))))
  (! (= (tb2t3424 (t2tb3424 i)) i) :pattern ((t2tb3424 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 c1 d1) (set1 (tuple2 b1 e1)))) j)
     (= (t2tb3424 (tb2t3424 j)) j)) :pattern ((t2tb3424 (tb2t3424 j))) )))

(declare-fun t2tb3425 ((tuple21 (tuple21 c d) (set (tuple21 b e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 c d) (set (tuple21 b e))))) (sort
  (tuple2 (tuple2 c1 d1) (set1 (tuple2 b1 e1))) (t2tb3425 x))))

(declare-fun tb2t3425 (uni) (tuple21 (tuple21 c d) (set (tuple21 b e))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 c d) (set (tuple21 b e)))))
  (! (= (tb2t3425 (t2tb3425 i)) i) :pattern ((t2tb3425 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 c1 d1) (set1 (tuple2 b1 e1))) j)
     (= (t2tb3425 (tb2t3425 j)) j)) :pattern ((t2tb3425 (tb2t3425 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 c d))) (t (set (set (tuple21 b e))))
  (x (tuple21 c d)) (y (set (tuple21 b e))))
  (= (mem (tuple2 (tuple2 c1 d1) (set1 (tuple2 b1 e1)))
  (Tuple2 (tuple2 c1 d1) (set1 (tuple2 b1 e1)) (t2tb693 x) (t2tb2940 y))
  (times (set1 (tuple2 b1 e1)) (tuple2 c1 d1) (t2tb689 s) (t2tb2941 t)))
  (and (mem21 x s) (mem39 y t)))))

(declare-fun t2tb3426 ((set (tuple21 (tuple21 c d) (tuple21 b e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 c d) (tuple21 b e))))) (sort
  (set1 (tuple2 (tuple2 c1 d1) (tuple2 b1 e1))) (t2tb3426 x))))

(declare-fun tb2t3426 (uni) (set (tuple21 (tuple21 c d) (tuple21 b e))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 c d) (tuple21 b e)))))
  (! (= (tb2t3426 (t2tb3426 i)) i) :pattern ((t2tb3426 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 c1 d1) (tuple2 b1 e1))) j)
     (= (t2tb3426 (tb2t3426 j)) j)) :pattern ((t2tb3426 (tb2t3426 j))) )))

(declare-fun t2tb3427 ((tuple21 (tuple21 c d) (tuple21 b e))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 c d) (tuple21 b e)))) (sort
  (tuple2 (tuple2 c1 d1) (tuple2 b1 e1)) (t2tb3427 x))))

(declare-fun tb2t3427 (uni) (tuple21 (tuple21 c d) (tuple21 b e)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 c d) (tuple21 b e))))
  (! (= (tb2t3427 (t2tb3427 i)) i) :pattern ((t2tb3427 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 c1 d1) (tuple2 b1 e1)) j)
     (= (t2tb3427 (tb2t3427 j)) j)) :pattern ((t2tb3427 (tb2t3427 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 c d))) (t (set (tuple21 b e))) (x (tuple21 c d))
  (y (tuple21 b e)))
  (= (mem (tuple2 (tuple2 c1 d1) (tuple2 b1 e1))
  (Tuple2 (tuple2 c1 d1) (tuple2 b1 e1) (t2tb693 x) (t2tb2953 y))
  (times (tuple2 b1 e1) (tuple2 c1 d1) (t2tb689 s) (t2tb2940 t)))
  (and (mem21 x s) (mem38 y t)))))

(declare-fun t2tb3428 ((set (tuple21 (tuple21 c d) f))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 c d) f)))) (sort
  (set1 (tuple2 (tuple2 c1 d1) f1)) (t2tb3428 x))))

(declare-fun tb2t3428 (uni) (set (tuple21 (tuple21 c d) f)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 c d) f))))
  (! (= (tb2t3428 (t2tb3428 i)) i) :pattern ((t2tb3428 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 c1 d1) f1)) j)
     (= (t2tb3428 (tb2t3428 j)) j)) :pattern ((t2tb3428 (tb2t3428 j))) )))

(declare-fun t2tb3429 ((tuple21 (tuple21 c d) f)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 c d) f))) (sort (tuple2 (tuple2 c1 d1) f1)
  (t2tb3429 x))))

(declare-fun tb2t3429 (uni) (tuple21 (tuple21 c d) f))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 c d) f)))
  (! (= (tb2t3429 (t2tb3429 i)) i) :pattern ((t2tb3429 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 c1 d1) f1) j) (= (t2tb3429 (tb2t3429 j)) j)) :pattern (
  (t2tb3429 (tb2t3429 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 c d))) (t (set f)) (x (tuple21 c d)) (y f))
  (= (mem (tuple2 (tuple2 c1 d1) f1)
  (Tuple2 (tuple2 c1 d1) f1 (t2tb693 x) (t2tb2954 y))
  (times f1 (tuple2 c1 d1) (t2tb689 s) (t2tb2946 t)))
  (and (mem21 x s) (mem37 y t)))))

(declare-fun t2tb3430 ((set (tuple21 (tuple21 c d) e))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 c d) e)))) (sort
  (set1 (tuple2 (tuple2 c1 d1) e1)) (t2tb3430 x))))

(declare-fun tb2t3430 (uni) (set (tuple21 (tuple21 c d) e)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 c d) e))))
  (! (= (tb2t3430 (t2tb3430 i)) i) :pattern ((t2tb3430 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 c1 d1) e1)) j)
     (= (t2tb3430 (tb2t3430 j)) j)) :pattern ((t2tb3430 (tb2t3430 j))) )))

(declare-fun t2tb3431 ((tuple21 (tuple21 c d) e)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 c d) e))) (sort (tuple2 (tuple2 c1 d1) e1)
  (t2tb3431 x))))

(declare-fun tb2t3431 (uni) (tuple21 (tuple21 c d) e))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 c d) e)))
  (! (= (tb2t3431 (t2tb3431 i)) i) :pattern ((t2tb3431 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 c1 d1) e1) j) (= (t2tb3431 (tb2t3431 j)) j)) :pattern (
  (t2tb3431 (tb2t3431 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 c d))) (t (set e)) (x (tuple21 c d)) (y e))
  (= (mem (tuple2 (tuple2 c1 d1) e1)
  (Tuple2 (tuple2 c1 d1) e1 (t2tb693 x) (t2tb2955 y))
  (times e1 (tuple2 c1 d1) (t2tb689 s) (t2tb2947 t)))
  (and (mem21 x s) (mem36 y t)))))

(declare-fun t2tb3432 ((set (tuple21 (tuple21 c d) (tuple21 (tuple21 a c)
  (tuple21 b d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 c d) (tuple21 (tuple21 a c) (tuple21 b
  d)))))) (sort
  (set1 (tuple2 (tuple2 c1 d1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))))
  (t2tb3432 x))))

(declare-fun tb2t3432 (uni) (set (tuple21 (tuple21 c d) (tuple21 (tuple21 a
  c) (tuple21 b d)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 c d) (tuple21 (tuple21 a c) (tuple21 b
  d)))))) (! (= (tb2t3432 (t2tb3432 i)) i) :pattern ((t2tb3432 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 c1 d1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))) j)
     (= (t2tb3432 (tb2t3432 j)) j)) :pattern ((t2tb3432 (tb2t3432 j))) )))

(declare-fun t2tb3433 ((tuple21 (tuple21 c d) (tuple21 (tuple21 a c)
  (tuple21 b d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 c d) (tuple21 (tuple21 a c) (tuple21 b d)))))
  (sort (tuple2 (tuple2 c1 d1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
  (t2tb3433 x))))

(declare-fun tb2t3433 (uni) (tuple21 (tuple21 c d) (tuple21 (tuple21 a c)
  (tuple21 b d))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 c d) (tuple21 (tuple21 a c) (tuple21 b d)))))
  (! (= (tb2t3433 (t2tb3433 i)) i) :pattern ((t2tb3433 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 c1 d1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
     j) (= (t2tb3433 (tb2t3433 j)) j)) :pattern ((t2tb3433 (tb2t3433 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 c d))) (t (set (tuple21 (tuple21 a c) (tuple21 b
  d)))) (x (tuple21 c d)) (y (tuple21 (tuple21 a c) (tuple21 b d))))
  (= (mem (tuple2 (tuple2 c1 d1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
  (Tuple2 (tuple2 c1 d1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb693 x)
  (t2tb691 y))
  (times (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 c1 d1) (t2tb689 s)
  (t2tb686 t))) (and (mem21 x s) (mem24 y t)))))

(declare-fun t2tb3434 ((set (tuple21 (tuple21 c d) (set (tuple21 c
  d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 c d) (set (tuple21 c d)))))) (sort
  (set1 (tuple2 (tuple2 c1 d1) (set1 (tuple2 c1 d1)))) (t2tb3434 x))))

(declare-fun tb2t3434 (uni) (set (tuple21 (tuple21 c d) (set (tuple21 c
  d)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 c d) (set (tuple21 c d))))))
  (! (= (tb2t3434 (t2tb3434 i)) i) :pattern ((t2tb3434 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 c1 d1) (set1 (tuple2 c1 d1)))) j)
     (= (t2tb3434 (tb2t3434 j)) j)) :pattern ((t2tb3434 (tb2t3434 j))) )))

(declare-fun t2tb3435 ((tuple21 (tuple21 c d) (set (tuple21 c d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 c d) (set (tuple21 c d))))) (sort
  (tuple2 (tuple2 c1 d1) (set1 (tuple2 c1 d1))) (t2tb3435 x))))

(declare-fun tb2t3435 (uni) (tuple21 (tuple21 c d) (set (tuple21 c d))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 c d) (set (tuple21 c d)))))
  (! (= (tb2t3435 (t2tb3435 i)) i) :pattern ((t2tb3435 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 c1 d1) (set1 (tuple2 c1 d1))) j)
     (= (t2tb3435 (tb2t3435 j)) j)) :pattern ((t2tb3435 (tb2t3435 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 c d))) (t (set (set (tuple21 c d))))
  (x (tuple21 c d)) (y (set (tuple21 c d))))
  (= (mem (tuple2 (tuple2 c1 d1) (set1 (tuple2 c1 d1)))
  (Tuple2 (tuple2 c1 d1) (set1 (tuple2 c1 d1)) (t2tb693 x) (t2tb689 y))
  (times (set1 (tuple2 c1 d1)) (tuple2 c1 d1) (t2tb689 s) (t2tb688 t)))
  (and (mem21 x s) (mem22 y t)))))

(declare-fun t2tb799 ((set (tuple21 (tuple21 c d) (tuple21 c d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 c d) (tuple21 c d))))) (sort
  (set1 (tuple2 (tuple2 c1 d1) (tuple2 c1 d1))) (t2tb799 x))))

(declare-fun tb2t799 (uni) (set (tuple21 (tuple21 c d) (tuple21 c d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 c d) (tuple21 c d)))))
  (! (= (tb2t799 (t2tb799 i)) i) :pattern ((t2tb799 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 c1 d1) (tuple2 c1 d1))) j)
     (= (t2tb799 (tb2t799 j)) j)) :pattern ((t2tb799 (tb2t799 j))) )))

(declare-fun t2tb800 ((tuple21 (tuple21 c d) (tuple21 c d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 c d) (tuple21 c d)))) (sort
  (tuple2 (tuple2 c1 d1) (tuple2 c1 d1)) (t2tb800 x))))

(declare-fun tb2t800 (uni) (tuple21 (tuple21 c d) (tuple21 c d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 c d) (tuple21 c d))))
  (! (= (tb2t800 (t2tb800 i)) i) :pattern ((t2tb800 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 c1 d1) (tuple2 c1 d1)) j)
     (= (t2tb800 (tb2t800 j)) j)) :pattern ((t2tb800 (tb2t800 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 c d))) (t (set (tuple21 c d))) (x (tuple21 c d))
  (y (tuple21 c d)))
  (= (mem (tuple2 (tuple2 c1 d1) (tuple2 c1 d1))
  (Tuple2 (tuple2 c1 d1) (tuple2 c1 d1) (t2tb693 x) (t2tb693 y))
  (times (tuple2 c1 d1) (tuple2 c1 d1) (t2tb689 s) (t2tb689 t)))
  (and (mem21 x s) (mem21 y t)))))

(declare-fun t2tb801 ((set (tuple21 (tuple21 c d) d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 c d) d)))) (sort
  (set1 (tuple2 (tuple2 c1 d1) d1)) (t2tb801 x))))

(declare-fun tb2t801 (uni) (set (tuple21 (tuple21 c d) d)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 c d) d))))
  (! (= (tb2t801 (t2tb801 i)) i) :pattern ((t2tb801 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 c1 d1) d1)) j)
     (= (t2tb801 (tb2t801 j)) j)) :pattern ((t2tb801 (tb2t801 j))) )))

(declare-fun t2tb802 ((tuple21 (tuple21 c d) d)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 c d) d))) (sort (tuple2 (tuple2 c1 d1) d1)
  (t2tb802 x))))

(declare-fun tb2t802 (uni) (tuple21 (tuple21 c d) d))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 c d) d)))
  (! (= (tb2t802 (t2tb802 i)) i) :pattern ((t2tb802 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 c1 d1) d1) j) (= (t2tb802 (tb2t802 j)) j)) :pattern (
  (t2tb802 (tb2t802 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 c d))) (t (set d)) (x (tuple21 c d)) (y d))
  (= (mem (tuple2 (tuple2 c1 d1) d1)
  (Tuple2 (tuple2 c1 d1) d1 (t2tb693 x) (t2tb694 y))
  (times d1 (tuple2 c1 d1) (t2tb689 s) (t2tb690 t)))
  (and (mem21 x s) (mem20 y t)))))

(declare-fun t2tb805 ((set (tuple21 (tuple21 c d) c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 c d) c)))) (sort
  (set1 (tuple2 (tuple2 c1 d1) c1)) (t2tb805 x))))

(declare-fun tb2t805 (uni) (set (tuple21 (tuple21 c d) c)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 c d) c))))
  (! (= (tb2t805 (t2tb805 i)) i) :pattern ((t2tb805 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 c1 d1) c1)) j)
     (= (t2tb805 (tb2t805 j)) j)) :pattern ((t2tb805 (tb2t805 j))) )))

(declare-fun t2tb806 ((tuple21 (tuple21 c d) c)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 c d) c))) (sort (tuple2 (tuple2 c1 d1) c1)
  (t2tb806 x))))

(declare-fun tb2t806 (uni) (tuple21 (tuple21 c d) c))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 c d) c)))
  (! (= (tb2t806 (t2tb806 i)) i) :pattern ((t2tb806 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 c1 d1) c1) j) (= (t2tb806 (tb2t806 j)) j)) :pattern (
  (t2tb806 (tb2t806 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 c d))) (t (set c)) (x (tuple21 c d)) (y c))
  (= (mem (tuple2 (tuple2 c1 d1) c1)
  (Tuple2 (tuple2 c1 d1) c1 (t2tb693 x) (t2tb135 y))
  (times c1 (tuple2 c1 d1) (t2tb689 s) (t2tb132 t)))
  (and (mem21 x s) (mem7 y t)))))

(declare-fun t2tb3436 ((set (tuple21 (tuple21 c d) (set (tuple21 a
  b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 c d) (set (tuple21 a b)))))) (sort
  (set1 (tuple2 (tuple2 c1 d1) (set1 (tuple2 a1 b1)))) (t2tb3436 x))))

(declare-fun tb2t3436 (uni) (set (tuple21 (tuple21 c d) (set (tuple21 a
  b)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 c d) (set (tuple21 a b))))))
  (! (= (tb2t3436 (t2tb3436 i)) i) :pattern ((t2tb3436 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 c1 d1) (set1 (tuple2 a1 b1)))) j)
     (= (t2tb3436 (tb2t3436 j)) j)) :pattern ((t2tb3436 (tb2t3436 j))) )))

(declare-fun t2tb3437 ((tuple21 (tuple21 c d) (set (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 c d) (set (tuple21 a b))))) (sort
  (tuple2 (tuple2 c1 d1) (set1 (tuple2 a1 b1))) (t2tb3437 x))))

(declare-fun tb2t3437 (uni) (tuple21 (tuple21 c d) (set (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 c d) (set (tuple21 a b)))))
  (! (= (tb2t3437 (t2tb3437 i)) i) :pattern ((t2tb3437 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 c1 d1) (set1 (tuple2 a1 b1))) j)
     (= (t2tb3437 (tb2t3437 j)) j)) :pattern ((t2tb3437 (tb2t3437 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 c d))) (t (set (set (tuple21 a b))))
  (x (tuple21 c d)) (y (set (tuple21 a b))))
  (= (mem (tuple2 (tuple2 c1 d1) (set1 (tuple2 a1 b1)))
  (Tuple2 (tuple2 c1 d1) (set1 (tuple2 a1 b1)) (t2tb693 x) (t2tb11 y))
  (times (set1 (tuple2 a1 b1)) (tuple2 c1 d1) (t2tb689 s) (t2tb10 t)))
  (and (mem21 x s) (mem4 y t)))))

(declare-fun t2tb3438 ((set (tuple21 (tuple21 c d) (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 c d) (tuple21 a b))))) (sort
  (set1 (tuple2 (tuple2 c1 d1) (tuple2 a1 b1))) (t2tb3438 x))))

(declare-fun tb2t3438 (uni) (set (tuple21 (tuple21 c d) (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 c d) (tuple21 a b)))))
  (! (= (tb2t3438 (t2tb3438 i)) i) :pattern ((t2tb3438 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 c1 d1) (tuple2 a1 b1))) j)
     (= (t2tb3438 (tb2t3438 j)) j)) :pattern ((t2tb3438 (tb2t3438 j))) )))

(declare-fun t2tb3439 ((tuple21 (tuple21 c d) (tuple21 a b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 c d) (tuple21 a b)))) (sort
  (tuple2 (tuple2 c1 d1) (tuple2 a1 b1)) (t2tb3439 x))))

(declare-fun tb2t3439 (uni) (tuple21 (tuple21 c d) (tuple21 a b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 c d) (tuple21 a b))))
  (! (= (tb2t3439 (t2tb3439 i)) i) :pattern ((t2tb3439 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 c1 d1) (tuple2 a1 b1)) j)
     (= (t2tb3439 (tb2t3439 j)) j)) :pattern ((t2tb3439 (tb2t3439 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 c d))) (t (set (tuple21 a b))) (x (tuple21 c d))
  (y (tuple21 a b)))
  (= (mem (tuple2 (tuple2 c1 d1) (tuple2 a1 b1))
  (Tuple2 (tuple2 c1 d1) (tuple2 a1 b1) (t2tb693 x) (t2tb13 y))
  (times (tuple2 a1 b1) (tuple2 c1 d1) (t2tb689 s) (t2tb11 t)))
  (and (mem21 x s) (mem3 y t)))))

(declare-fun t2tb811 ((set (tuple21 (tuple21 c d) b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 c d) b)))) (sort
  (set1 (tuple2 (tuple2 c1 d1) b1)) (t2tb811 x))))

(declare-fun tb2t811 (uni) (set (tuple21 (tuple21 c d) b)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 c d) b))))
  (! (= (tb2t811 (t2tb811 i)) i) :pattern ((t2tb811 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 c1 d1) b1)) j)
     (= (t2tb811 (tb2t811 j)) j)) :pattern ((t2tb811 (tb2t811 j))) )))

(declare-fun t2tb812 ((tuple21 (tuple21 c d) b)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 c d) b))) (sort (tuple2 (tuple2 c1 d1) b1)
  (t2tb812 x))))

(declare-fun tb2t812 (uni) (tuple21 (tuple21 c d) b))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 c d) b)))
  (! (= (tb2t812 (t2tb812 i)) i) :pattern ((t2tb812 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 c1 d1) b1) j) (= (t2tb812 (tb2t812 j)) j)) :pattern (
  (t2tb812 (tb2t812 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 c d))) (t (set b)) (x (tuple21 c d)) (y b))
  (= (mem (tuple2 (tuple2 c1 d1) b1)
  (Tuple2 (tuple2 c1 d1) b1 (t2tb693 x) (t2tb14 y))
  (times b1 (tuple2 c1 d1) (t2tb689 s) (t2tb12 t)))
  (and (mem21 x s) (mem2 y t)))))

(declare-fun t2tb813 ((set (tuple21 (tuple21 c d) a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 c d) a)))) (sort
  (set1 (tuple2 (tuple2 c1 d1) a1)) (t2tb813 x))))

(declare-fun tb2t813 (uni) (set (tuple21 (tuple21 c d) a)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 c d) a))))
  (! (= (tb2t813 (t2tb813 i)) i) :pattern ((t2tb813 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 c1 d1) a1)) j)
     (= (t2tb813 (tb2t813 j)) j)) :pattern ((t2tb813 (tb2t813 j))) )))

(declare-fun t2tb814 ((tuple21 (tuple21 c d) a)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 c d) a))) (sort (tuple2 (tuple2 c1 d1) a1)
  (t2tb814 x))))

(declare-fun tb2t814 (uni) (tuple21 (tuple21 c d) a))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 c d) a)))
  (! (= (tb2t814 (t2tb814 i)) i) :pattern ((t2tb814 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 c1 d1) a1) j) (= (t2tb814 (tb2t814 j)) j)) :pattern (
  (t2tb814 (tb2t814 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 c d))) (t (set a)) (x (tuple21 c d)) (y a))
  (= (mem (tuple2 (tuple2 c1 d1) a1)
  (Tuple2 (tuple2 c1 d1) a1 (t2tb693 x) (t2tb2 y))
  (times a1 (tuple2 c1 d1) (t2tb689 s) (t2tb1 t)))
  (and (mem21 x s) (mem1 y t)))))

;; mem_times
  (assert
  (forall ((b2 ty))
  (forall ((s (set (tuple21 c d))) (t uni) (x (tuple21 c d)) (y uni))
  (= (mem (tuple2 (tuple2 c1 d1) b2) (Tuple2 (tuple2 c1 d1) b2 (t2tb693 x) y)
  (times b2 (tuple2 c1 d1) (t2tb689 s) t)) (and (mem21 x s) (mem b2 y t))))))

(declare-fun t2tb3440 ((set (tuple21 d (tuple21 c f)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 d (tuple21 c f))))) (sort
  (set1 (tuple2 d1 (tuple2 c1 f1))) (t2tb3440 x))))

(declare-fun tb2t3440 (uni) (set (tuple21 d (tuple21 c f))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 d (tuple21 c f)))))
  (! (= (tb2t3440 (t2tb3440 i)) i) :pattern ((t2tb3440 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 d1 (tuple2 c1 f1))) j)
     (= (t2tb3440 (tb2t3440 j)) j)) :pattern ((t2tb3440 (tb2t3440 j))) )))

(declare-fun t2tb3441 ((tuple21 d (tuple21 c f))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 d (tuple21 c f)))) (sort (tuple2 d1 (tuple2 c1 f1))
  (t2tb3441 x))))

(declare-fun tb2t3441 (uni) (tuple21 d (tuple21 c f)))

;; BridgeL
  (assert
  (forall ((i (tuple21 d (tuple21 c f))))
  (! (= (tb2t3441 (t2tb3441 i)) i) :pattern ((t2tb3441 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 d1 (tuple2 c1 f1)) j) (= (t2tb3441 (tb2t3441 j)) j)) :pattern (
  (t2tb3441 (tb2t3441 j))) )))

;; mem_times
  (assert
  (forall ((s (set d)) (t (set (tuple21 c f))) (x d) (y (tuple21 c f)))
  (= (mem (tuple2 d1 (tuple2 c1 f1))
  (Tuple2 d1 (tuple2 c1 f1) (t2tb694 x) (t2tb2948 y))
  (times (tuple2 c1 f1) d1 (t2tb690 s) (t2tb2942 t)))
  (and (mem20 x s) (mem45 y t)))))

(declare-fun t2tb3442 ((set (tuple21 d (tuple21 a e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 d (tuple21 a e))))) (sort
  (set1 (tuple2 d1 (tuple2 a1 e1))) (t2tb3442 x))))

(declare-fun tb2t3442 (uni) (set (tuple21 d (tuple21 a e))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 d (tuple21 a e)))))
  (! (= (tb2t3442 (t2tb3442 i)) i) :pattern ((t2tb3442 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 d1 (tuple2 a1 e1))) j)
     (= (t2tb3442 (tb2t3442 j)) j)) :pattern ((t2tb3442 (tb2t3442 j))) )))

(declare-fun t2tb3443 ((tuple21 d (tuple21 a e))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 d (tuple21 a e)))) (sort (tuple2 d1 (tuple2 a1 e1))
  (t2tb3443 x))))

(declare-fun tb2t3443 (uni) (tuple21 d (tuple21 a e)))

;; BridgeL
  (assert
  (forall ((i (tuple21 d (tuple21 a e))))
  (! (= (tb2t3443 (t2tb3443 i)) i) :pattern ((t2tb3443 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 d1 (tuple2 a1 e1)) j) (= (t2tb3443 (tb2t3443 j)) j)) :pattern (
  (t2tb3443 (tb2t3443 j))) )))

;; mem_times
  (assert
  (forall ((s (set d)) (t (set (tuple21 a e))) (x d) (y (tuple21 a e)))
  (= (mem (tuple2 d1 (tuple2 a1 e1))
  (Tuple2 d1 (tuple2 a1 e1) (t2tb694 x) (t2tb2949 y))
  (times (tuple2 a1 e1) d1 (t2tb690 s) (t2tb2943 t)))
  (and (mem20 x s) (mem44 y t)))))

(declare-fun t2tb3444 ((set (tuple21 d (tuple21 (tuple21 b d) (tuple21 e
  f))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 d (tuple21 (tuple21 b d) (tuple21 e f)))))) (sort
  (set1 (tuple2 d1 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)))) (t2tb3444 x))))

(declare-fun tb2t3444 (uni) (set (tuple21 d (tuple21 (tuple21 b d) (tuple21 e
  f)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 d (tuple21 (tuple21 b d) (tuple21 e f))))))
  (! (= (tb2t3444 (t2tb3444 i)) i) :pattern ((t2tb3444 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 d1 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)))) j)
     (= (t2tb3444 (tb2t3444 j)) j)) :pattern ((t2tb3444 (tb2t3444 j))) )))

(declare-fun t2tb3445 ((tuple21 d (tuple21 (tuple21 b d) (tuple21 e
  f)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 d (tuple21 (tuple21 b d) (tuple21 e f))))) (sort
  (tuple2 d1 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1))) (t2tb3445 x))))

(declare-fun tb2t3445 (uni) (tuple21 d (tuple21 (tuple21 b d) (tuple21 e
  f))))

;; BridgeL
  (assert
  (forall ((i (tuple21 d (tuple21 (tuple21 b d) (tuple21 e f)))))
  (! (= (tb2t3445 (t2tb3445 i)) i) :pattern ((t2tb3445 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 d1 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1))) j)
     (= (t2tb3445 (tb2t3445 j)) j)) :pattern ((t2tb3445 (tb2t3445 j))) )))

;; mem_times
  (assert
  (forall ((s (set d)) (t (set (tuple21 (tuple21 b d) (tuple21 e f)))) (x d)
  (y (tuple21 (tuple21 b d) (tuple21 e f))))
  (= (mem (tuple2 d1 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)))
  (Tuple2 d1 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (t2tb694 x) (t2tb2950 y))
  (times (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) d1 (t2tb690 s) (t2tb2944 t)))
  (and (mem20 x s) (mem43 y t)))))

(declare-fun t2tb3446 ((set (tuple21 d (tuple21 (tuple21 a c) (tuple21 e
  f))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 d (tuple21 (tuple21 a c) (tuple21 e f)))))) (sort
  (set1 (tuple2 d1 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)))) (t2tb3446 x))))

(declare-fun tb2t3446 (uni) (set (tuple21 d (tuple21 (tuple21 a c) (tuple21 e
  f)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 d (tuple21 (tuple21 a c) (tuple21 e f))))))
  (! (= (tb2t3446 (t2tb3446 i)) i) :pattern ((t2tb3446 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 d1 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)))) j)
     (= (t2tb3446 (tb2t3446 j)) j)) :pattern ((t2tb3446 (tb2t3446 j))) )))

(declare-fun t2tb3447 ((tuple21 d (tuple21 (tuple21 a c) (tuple21 e
  f)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 d (tuple21 (tuple21 a c) (tuple21 e f))))) (sort
  (tuple2 d1 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1))) (t2tb3447 x))))

(declare-fun tb2t3447 (uni) (tuple21 d (tuple21 (tuple21 a c) (tuple21 e
  f))))

;; BridgeL
  (assert
  (forall ((i (tuple21 d (tuple21 (tuple21 a c) (tuple21 e f)))))
  (! (= (tb2t3447 (t2tb3447 i)) i) :pattern ((t2tb3447 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 d1 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1))) j)
     (= (t2tb3447 (tb2t3447 j)) j)) :pattern ((t2tb3447 (tb2t3447 j))) )))

;; mem_times
  (assert
  (forall ((s (set d)) (t (set (tuple21 (tuple21 a c) (tuple21 e f)))) (x d)
  (y (tuple21 (tuple21 a c) (tuple21 e f))))
  (= (mem (tuple2 d1 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)))
  (Tuple2 d1 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (t2tb694 x) (t2tb2951 y))
  (times (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) d1 (t2tb690 s) (t2tb2945 t)))
  (and (mem20 x s) (mem42 y t)))))

(declare-fun t2tb3448 ((set (tuple21 d (set (tuple21 d f))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 d (set (tuple21 d f)))))) (sort
  (set1 (tuple2 d1 (set1 (tuple2 d1 f1)))) (t2tb3448 x))))

(declare-fun tb2t3448 (uni) (set (tuple21 d (set (tuple21 d f)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 d (set (tuple21 d f))))))
  (! (= (tb2t3448 (t2tb3448 i)) i) :pattern ((t2tb3448 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 d1 (set1 (tuple2 d1 f1)))) j)
     (= (t2tb3448 (tb2t3448 j)) j)) :pattern ((t2tb3448 (tb2t3448 j))) )))

(declare-fun t2tb3449 ((tuple21 d (set (tuple21 d f)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 d (set (tuple21 d f))))) (sort
  (tuple2 d1 (set1 (tuple2 d1 f1))) (t2tb3449 x))))

(declare-fun tb2t3449 (uni) (tuple21 d (set (tuple21 d f))))

;; BridgeL
  (assert
  (forall ((i (tuple21 d (set (tuple21 d f)))))
  (! (= (tb2t3449 (t2tb3449 i)) i) :pattern ((t2tb3449 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 d1 (set1 (tuple2 d1 f1))) j)
     (= (t2tb3449 (tb2t3449 j)) j)) :pattern ((t2tb3449 (tb2t3449 j))) )))

;; mem_times
  (assert
  (forall ((s (set d)) (t (set (set (tuple21 d f)))) (x d) (y (set (tuple21 d
  f))))
  (= (mem (tuple2 d1 (set1 (tuple2 d1 f1)))
  (Tuple2 d1 (set1 (tuple2 d1 f1)) (t2tb694 x) (t2tb2938 y))
  (times (set1 (tuple2 d1 f1)) d1 (t2tb690 s) (t2tb2939 t)))
  (and (mem20 x s) (mem41 y t)))))

(declare-fun t2tb3450 ((set (tuple21 d (tuple21 d f)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 d (tuple21 d f))))) (sort
  (set1 (tuple2 d1 (tuple2 d1 f1))) (t2tb3450 x))))

(declare-fun tb2t3450 (uni) (set (tuple21 d (tuple21 d f))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 d (tuple21 d f)))))
  (! (= (tb2t3450 (t2tb3450 i)) i) :pattern ((t2tb3450 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 d1 (tuple2 d1 f1))) j)
     (= (t2tb3450 (tb2t3450 j)) j)) :pattern ((t2tb3450 (tb2t3450 j))) )))

(declare-fun t2tb3451 ((tuple21 d (tuple21 d f))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 d (tuple21 d f)))) (sort (tuple2 d1 (tuple2 d1 f1))
  (t2tb3451 x))))

(declare-fun tb2t3451 (uni) (tuple21 d (tuple21 d f)))

;; BridgeL
  (assert
  (forall ((i (tuple21 d (tuple21 d f))))
  (! (= (tb2t3451 (t2tb3451 i)) i) :pattern ((t2tb3451 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 d1 (tuple2 d1 f1)) j) (= (t2tb3451 (tb2t3451 j)) j)) :pattern (
  (t2tb3451 (tb2t3451 j))) )))

;; mem_times
  (assert
  (forall ((s (set d)) (t (set (tuple21 d f))) (x d) (y (tuple21 d f)))
  (= (mem (tuple2 d1 (tuple2 d1 f1))
  (Tuple2 d1 (tuple2 d1 f1) (t2tb694 x) (t2tb2952 y))
  (times (tuple2 d1 f1) d1 (t2tb690 s) (t2tb2938 t)))
  (and (mem20 x s) (mem40 y t)))))

(declare-fun t2tb3452 ((set (tuple21 d (set (tuple21 b e))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 d (set (tuple21 b e)))))) (sort
  (set1 (tuple2 d1 (set1 (tuple2 b1 e1)))) (t2tb3452 x))))

(declare-fun tb2t3452 (uni) (set (tuple21 d (set (tuple21 b e)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 d (set (tuple21 b e))))))
  (! (= (tb2t3452 (t2tb3452 i)) i) :pattern ((t2tb3452 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 d1 (set1 (tuple2 b1 e1)))) j)
     (= (t2tb3452 (tb2t3452 j)) j)) :pattern ((t2tb3452 (tb2t3452 j))) )))

(declare-fun t2tb3453 ((tuple21 d (set (tuple21 b e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 d (set (tuple21 b e))))) (sort
  (tuple2 d1 (set1 (tuple2 b1 e1))) (t2tb3453 x))))

(declare-fun tb2t3453 (uni) (tuple21 d (set (tuple21 b e))))

;; BridgeL
  (assert
  (forall ((i (tuple21 d (set (tuple21 b e)))))
  (! (= (tb2t3453 (t2tb3453 i)) i) :pattern ((t2tb3453 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 d1 (set1 (tuple2 b1 e1))) j)
     (= (t2tb3453 (tb2t3453 j)) j)) :pattern ((t2tb3453 (tb2t3453 j))) )))

;; mem_times
  (assert
  (forall ((s (set d)) (t (set (set (tuple21 b e)))) (x d) (y (set (tuple21 b
  e))))
  (= (mem (tuple2 d1 (set1 (tuple2 b1 e1)))
  (Tuple2 d1 (set1 (tuple2 b1 e1)) (t2tb694 x) (t2tb2940 y))
  (times (set1 (tuple2 b1 e1)) d1 (t2tb690 s) (t2tb2941 t)))
  (and (mem20 x s) (mem39 y t)))))

(declare-fun t2tb3454 ((set (tuple21 d (tuple21 b e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 d (tuple21 b e))))) (sort
  (set1 (tuple2 d1 (tuple2 b1 e1))) (t2tb3454 x))))

(declare-fun tb2t3454 (uni) (set (tuple21 d (tuple21 b e))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 d (tuple21 b e)))))
  (! (= (tb2t3454 (t2tb3454 i)) i) :pattern ((t2tb3454 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 d1 (tuple2 b1 e1))) j)
     (= (t2tb3454 (tb2t3454 j)) j)) :pattern ((t2tb3454 (tb2t3454 j))) )))

(declare-fun t2tb3455 ((tuple21 d (tuple21 b e))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 d (tuple21 b e)))) (sort (tuple2 d1 (tuple2 b1 e1))
  (t2tb3455 x))))

(declare-fun tb2t3455 (uni) (tuple21 d (tuple21 b e)))

;; BridgeL
  (assert
  (forall ((i (tuple21 d (tuple21 b e))))
  (! (= (tb2t3455 (t2tb3455 i)) i) :pattern ((t2tb3455 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 d1 (tuple2 b1 e1)) j) (= (t2tb3455 (tb2t3455 j)) j)) :pattern (
  (t2tb3455 (tb2t3455 j))) )))

;; mem_times
  (assert
  (forall ((s (set d)) (t (set (tuple21 b e))) (x d) (y (tuple21 b e)))
  (= (mem (tuple2 d1 (tuple2 b1 e1))
  (Tuple2 d1 (tuple2 b1 e1) (t2tb694 x) (t2tb2953 y))
  (times (tuple2 b1 e1) d1 (t2tb690 s) (t2tb2940 t)))
  (and (mem20 x s) (mem38 y t)))))

;; mem_times
  (assert
  (forall ((s (set d)) (t (set f)) (x d) (y f))
  (= (mem40 (tb2t2952 (Tuple2 d1 f1 (t2tb694 x) (t2tb2954 y)))
  (tb2t2938 (times f1 d1 (t2tb690 s) (t2tb2946 t))))
  (and (mem20 x s) (mem37 y t)))))

(declare-fun t2tb3456 ((set (tuple21 d e))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 d e)))) (sort (set1 (tuple2 d1 e1))
  (t2tb3456 x))))

(declare-fun tb2t3456 (uni) (set (tuple21 d e)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 d e))))
  (! (= (tb2t3456 (t2tb3456 i)) i) :pattern ((t2tb3456 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 d1 e1)) j) (= (t2tb3456 (tb2t3456 j)) j)) :pattern (
  (t2tb3456 (tb2t3456 j))) )))

(declare-fun t2tb3457 ((tuple21 d e)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 d e))) (sort (tuple2 d1 e1) (t2tb3457 x))))

(declare-fun tb2t3457 (uni) (tuple21 d e))

;; BridgeL
  (assert
  (forall ((i (tuple21 d e)))
  (! (= (tb2t3457 (t2tb3457 i)) i) :pattern ((t2tb3457 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 d1 e1) j) (= (t2tb3457 (tb2t3457 j)) j)) :pattern (
  (t2tb3457 (tb2t3457 j))) )))

;; mem_times
  (assert
  (forall ((s (set d)) (t (set e)) (x d) (y e))
  (= (mem (tuple2 d1 e1) (Tuple2 d1 e1 (t2tb694 x) (t2tb2955 y))
  (times e1 d1 (t2tb690 s) (t2tb2947 t))) (and (mem20 x s) (mem36 y t)))))

(declare-fun t2tb3458 ((set (tuple21 d (tuple21 (tuple21 a c) (tuple21 b
  d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 d (tuple21 (tuple21 a c) (tuple21 b d)))))) (sort
  (set1 (tuple2 d1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))) (t2tb3458 x))))

(declare-fun tb2t3458 (uni) (set (tuple21 d (tuple21 (tuple21 a c) (tuple21 b
  d)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 d (tuple21 (tuple21 a c) (tuple21 b d))))))
  (! (= (tb2t3458 (t2tb3458 i)) i) :pattern ((t2tb3458 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 d1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))) j)
     (= (t2tb3458 (tb2t3458 j)) j)) :pattern ((t2tb3458 (tb2t3458 j))) )))

(declare-fun t2tb3459 ((tuple21 d (tuple21 (tuple21 a c) (tuple21 b
  d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 d (tuple21 (tuple21 a c) (tuple21 b d))))) (sort
  (tuple2 d1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))) (t2tb3459 x))))

(declare-fun tb2t3459 (uni) (tuple21 d (tuple21 (tuple21 a c) (tuple21 b
  d))))

;; BridgeL
  (assert
  (forall ((i (tuple21 d (tuple21 (tuple21 a c) (tuple21 b d)))))
  (! (= (tb2t3459 (t2tb3459 i)) i) :pattern ((t2tb3459 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 d1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))) j)
     (= (t2tb3459 (tb2t3459 j)) j)) :pattern ((t2tb3459 (tb2t3459 j))) )))

;; mem_times
  (assert
  (forall ((s (set d)) (t (set (tuple21 (tuple21 a c) (tuple21 b d)))) (x d)
  (y (tuple21 (tuple21 a c) (tuple21 b d))))
  (= (mem (tuple2 d1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
  (Tuple2 d1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb694 x) (t2tb691 y))
  (times (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) d1 (t2tb690 s) (t2tb686 t)))
  (and (mem20 x s) (mem24 y t)))))

(declare-fun t2tb3460 ((set (tuple21 d (set (tuple21 c d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 d (set (tuple21 c d)))))) (sort
  (set1 (tuple2 d1 (set1 (tuple2 c1 d1)))) (t2tb3460 x))))

(declare-fun tb2t3460 (uni) (set (tuple21 d (set (tuple21 c d)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 d (set (tuple21 c d))))))
  (! (= (tb2t3460 (t2tb3460 i)) i) :pattern ((t2tb3460 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 d1 (set1 (tuple2 c1 d1)))) j)
     (= (t2tb3460 (tb2t3460 j)) j)) :pattern ((t2tb3460 (tb2t3460 j))) )))

(declare-fun t2tb3461 ((tuple21 d (set (tuple21 c d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 d (set (tuple21 c d))))) (sort
  (tuple2 d1 (set1 (tuple2 c1 d1))) (t2tb3461 x))))

(declare-fun tb2t3461 (uni) (tuple21 d (set (tuple21 c d))))

;; BridgeL
  (assert
  (forall ((i (tuple21 d (set (tuple21 c d)))))
  (! (= (tb2t3461 (t2tb3461 i)) i) :pattern ((t2tb3461 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 d1 (set1 (tuple2 c1 d1))) j)
     (= (t2tb3461 (tb2t3461 j)) j)) :pattern ((t2tb3461 (tb2t3461 j))) )))

;; mem_times
  (assert
  (forall ((s (set d)) (t (set (set (tuple21 c d)))) (x d) (y (set (tuple21 c
  d))))
  (= (mem (tuple2 d1 (set1 (tuple2 c1 d1)))
  (Tuple2 d1 (set1 (tuple2 c1 d1)) (t2tb694 x) (t2tb689 y))
  (times (set1 (tuple2 c1 d1)) d1 (t2tb690 s) (t2tb688 t)))
  (and (mem20 x s) (mem22 y t)))))

(declare-fun t2tb823 ((set (tuple21 d (tuple21 c d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 d (tuple21 c d))))) (sort
  (set1 (tuple2 d1 (tuple2 c1 d1))) (t2tb823 x))))

(declare-fun tb2t823 (uni) (set (tuple21 d (tuple21 c d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 d (tuple21 c d)))))
  (! (= (tb2t823 (t2tb823 i)) i) :pattern ((t2tb823 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 d1 (tuple2 c1 d1))) j)
     (= (t2tb823 (tb2t823 j)) j)) :pattern ((t2tb823 (tb2t823 j))) )))

(declare-fun t2tb824 ((tuple21 d (tuple21 c d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 d (tuple21 c d)))) (sort (tuple2 d1 (tuple2 c1 d1))
  (t2tb824 x))))

(declare-fun tb2t824 (uni) (tuple21 d (tuple21 c d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 d (tuple21 c d))))
  (! (= (tb2t824 (t2tb824 i)) i) :pattern ((t2tb824 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 d1 (tuple2 c1 d1)) j) (= (t2tb824 (tb2t824 j)) j)) :pattern (
  (t2tb824 (tb2t824 j))) )))

;; mem_times
  (assert
  (forall ((s (set d)) (t (set (tuple21 c d))) (x d) (y (tuple21 c d)))
  (= (mem (tuple2 d1 (tuple2 c1 d1))
  (Tuple2 d1 (tuple2 c1 d1) (t2tb694 x) (t2tb693 y))
  (times (tuple2 c1 d1) d1 (t2tb690 s) (t2tb689 t)))
  (and (mem20 x s) (mem21 y t)))))

(declare-fun t2tb825 ((set (tuple21 d d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 d d)))) (sort (set1 (tuple2 d1 d1)) (t2tb825 x))))

(declare-fun tb2t825 (uni) (set (tuple21 d d)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 d d))))
  (! (= (tb2t825 (t2tb825 i)) i) :pattern ((t2tb825 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 d1 d1)) j) (= (t2tb825 (tb2t825 j)) j)) :pattern (
  (t2tb825 (tb2t825 j))) )))

(declare-fun t2tb826 ((tuple21 d d)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 d d))) (sort (tuple2 d1 d1) (t2tb826 x))))

(declare-fun tb2t826 (uni) (tuple21 d d))

;; BridgeL
  (assert
  (forall ((i (tuple21 d d)))
  (! (= (tb2t826 (t2tb826 i)) i) :pattern ((t2tb826 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 d1 d1) j) (= (t2tb826 (tb2t826 j)) j)) :pattern (
  (t2tb826 (tb2t826 j))) )))

;; mem_times
  (assert
  (forall ((s (set d)) (t (set d)) (x d) (y d))
  (= (mem (tuple2 d1 d1) (Tuple2 d1 d1 (t2tb694 x) (t2tb694 y))
  (times d1 d1 (t2tb690 s) (t2tb690 t))) (and (mem20 x s) (mem20 y t)))))

(declare-fun t2tb829 ((set (tuple21 d c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 d c)))) (sort (set1 (tuple2 d1 c1)) (t2tb829 x))))

(declare-fun tb2t829 (uni) (set (tuple21 d c)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 d c))))
  (! (= (tb2t829 (t2tb829 i)) i) :pattern ((t2tb829 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 d1 c1)) j) (= (t2tb829 (tb2t829 j)) j)) :pattern (
  (t2tb829 (tb2t829 j))) )))

(declare-fun t2tb830 ((tuple21 d c)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 d c))) (sort (tuple2 d1 c1) (t2tb830 x))))

(declare-fun tb2t830 (uni) (tuple21 d c))

;; BridgeL
  (assert
  (forall ((i (tuple21 d c)))
  (! (= (tb2t830 (t2tb830 i)) i) :pattern ((t2tb830 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 d1 c1) j) (= (t2tb830 (tb2t830 j)) j)) :pattern (
  (t2tb830 (tb2t830 j))) )))

;; mem_times
  (assert
  (forall ((s (set d)) (t (set c)) (x d) (y c))
  (= (mem (tuple2 d1 c1) (Tuple2 d1 c1 (t2tb694 x) (t2tb135 y))
  (times c1 d1 (t2tb690 s) (t2tb132 t))) (and (mem20 x s) (mem7 y t)))))

(declare-fun t2tb831 ((set (tuple21 d (set (tuple21 a b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 d (set (tuple21 a b)))))) (sort
  (set1 (tuple2 d1 (set1 (tuple2 a1 b1)))) (t2tb831 x))))

(declare-fun tb2t831 (uni) (set (tuple21 d (set (tuple21 a b)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 d (set (tuple21 a b))))))
  (! (= (tb2t831 (t2tb831 i)) i) :pattern ((t2tb831 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 d1 (set1 (tuple2 a1 b1)))) j)
     (= (t2tb831 (tb2t831 j)) j)) :pattern ((t2tb831 (tb2t831 j))) )))

(declare-fun t2tb832 ((tuple21 d (set (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 d (set (tuple21 a b))))) (sort
  (tuple2 d1 (set1 (tuple2 a1 b1))) (t2tb832 x))))

(declare-fun tb2t832 (uni) (tuple21 d (set (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (tuple21 d (set (tuple21 a b)))))
  (! (= (tb2t832 (t2tb832 i)) i) :pattern ((t2tb832 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 d1 (set1 (tuple2 a1 b1))) j)
     (= (t2tb832 (tb2t832 j)) j)) :pattern ((t2tb832 (tb2t832 j))) )))

;; mem_times
  (assert
  (forall ((s (set d)) (t (set (set (tuple21 a b)))) (x d) (y (set (tuple21 a
  b))))
  (= (mem (tuple2 d1 (set1 (tuple2 a1 b1)))
  (Tuple2 d1 (set1 (tuple2 a1 b1)) (t2tb694 x) (t2tb11 y))
  (times (set1 (tuple2 a1 b1)) d1 (t2tb690 s) (t2tb10 t)))
  (and (mem20 x s) (mem4 y t)))))

(declare-fun t2tb833 ((set (tuple21 d (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 d (tuple21 a b))))) (sort
  (set1 (tuple2 d1 (tuple2 a1 b1))) (t2tb833 x))))

(declare-fun tb2t833 (uni) (set (tuple21 d (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 d (tuple21 a b)))))
  (! (= (tb2t833 (t2tb833 i)) i) :pattern ((t2tb833 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 d1 (tuple2 a1 b1))) j)
     (= (t2tb833 (tb2t833 j)) j)) :pattern ((t2tb833 (tb2t833 j))) )))

(declare-fun t2tb834 ((tuple21 d (tuple21 a b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 d (tuple21 a b)))) (sort (tuple2 d1 (tuple2 a1 b1))
  (t2tb834 x))))

(declare-fun tb2t834 (uni) (tuple21 d (tuple21 a b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 d (tuple21 a b))))
  (! (= (tb2t834 (t2tb834 i)) i) :pattern ((t2tb834 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 d1 (tuple2 a1 b1)) j) (= (t2tb834 (tb2t834 j)) j)) :pattern (
  (t2tb834 (tb2t834 j))) )))

;; mem_times
  (assert
  (forall ((s (set d)) (t (set (tuple21 a b))) (x d) (y (tuple21 a b)))
  (= (mem (tuple2 d1 (tuple2 a1 b1))
  (Tuple2 d1 (tuple2 a1 b1) (t2tb694 x) (t2tb13 y))
  (times (tuple2 a1 b1) d1 (t2tb690 s) (t2tb11 t)))
  (and (mem20 x s) (mem3 y t)))))

(declare-fun t2tb835 ((set (tuple21 d b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 d b)))) (sort (set1 (tuple2 d1 b1)) (t2tb835 x))))

(declare-fun tb2t835 (uni) (set (tuple21 d b)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 d b))))
  (! (= (tb2t835 (t2tb835 i)) i) :pattern ((t2tb835 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 d1 b1)) j) (= (t2tb835 (tb2t835 j)) j)) :pattern (
  (t2tb835 (tb2t835 j))) )))

(declare-fun t2tb836 ((tuple21 d b)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 d b))) (sort (tuple2 d1 b1) (t2tb836 x))))

(declare-fun tb2t836 (uni) (tuple21 d b))

;; BridgeL
  (assert
  (forall ((i (tuple21 d b)))
  (! (= (tb2t836 (t2tb836 i)) i) :pattern ((t2tb836 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 d1 b1) j) (= (t2tb836 (tb2t836 j)) j)) :pattern (
  (t2tb836 (tb2t836 j))) )))

;; mem_times
  (assert
  (forall ((s (set d)) (t (set b)) (x d) (y b))
  (= (mem (tuple2 d1 b1) (Tuple2 d1 b1 (t2tb694 x) (t2tb14 y))
  (times b1 d1 (t2tb690 s) (t2tb12 t))) (and (mem20 x s) (mem2 y t)))))

(declare-fun t2tb837 ((set (tuple21 d a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 d a)))) (sort (set1 (tuple2 d1 a1)) (t2tb837 x))))

(declare-fun tb2t837 (uni) (set (tuple21 d a)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 d a))))
  (! (= (tb2t837 (t2tb837 i)) i) :pattern ((t2tb837 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 d1 a1)) j) (= (t2tb837 (tb2t837 j)) j)) :pattern (
  (t2tb837 (tb2t837 j))) )))

(declare-fun t2tb838 ((tuple21 d a)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 d a))) (sort (tuple2 d1 a1) (t2tb838 x))))

(declare-fun tb2t838 (uni) (tuple21 d a))

;; BridgeL
  (assert
  (forall ((i (tuple21 d a)))
  (! (= (tb2t838 (t2tb838 i)) i) :pattern ((t2tb838 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 d1 a1) j) (= (t2tb838 (tb2t838 j)) j)) :pattern (
  (t2tb838 (tb2t838 j))) )))

;; mem_times
  (assert
  (forall ((s (set d)) (t (set a)) (x d) (y a))
  (= (mem (tuple2 d1 a1) (Tuple2 d1 a1 (t2tb694 x) (t2tb2 y))
  (times a1 d1 (t2tb690 s) (t2tb1 t))) (and (mem20 x s) (mem1 y t)))))

;; mem_times
  (assert
  (forall ((b2 ty))
  (forall ((s (set d)) (t uni) (x d) (y uni))
  (= (mem (tuple2 d1 b2) (Tuple2 d1 b2 (t2tb694 x) y)
  (times b2 d1 (t2tb690 s) t)) (and (mem20 x s) (mem b2 y t))))))

(declare-fun t2tb129 ((set (tuple21 a c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a c)))) (sort (set1 (tuple2 a1 c1)) (t2tb129 x))))

(declare-fun tb2t129 (uni) (set (tuple21 a c)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a c))))
  (! (= (tb2t129 (t2tb129 i)) i) :pattern ((t2tb129 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 c1)) j) (= (t2tb129 (tb2t129 j)) j)) :pattern (
  (t2tb129 (tb2t129 j))) )))

(declare-fun t2tb133 ((tuple21 a c)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 a c))) (sort (tuple2 a1 c1) (t2tb133 x))))

(declare-fun tb2t133 (uni) (tuple21 a c))

;; BridgeL
  (assert
  (forall ((i (tuple21 a c)))
  (! (= (tb2t133 (t2tb133 i)) i) :pattern ((t2tb133 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 c1) j) (= (t2tb133 (tb2t133 j)) j)) :pattern (
  (t2tb133 (tb2t133 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a c))) (t (set (tuple21 e f))) (x (tuple21 a c))
  (y (tuple21 e f)))
  (= (mem42
  (tb2t2951 (Tuple2 (tuple2 a1 c1) (tuple2 e1 f1) (t2tb133 x) (t2tb3315 y)))
  (tb2t2945 (times (tuple2 e1 f1) (tuple2 a1 c1) (t2tb129 s) (t2tb3314 t))))
  (and (mem (tuple2 a1 c1) (t2tb133 x) (t2tb129 s)) (mem (tuple2 e1 f1)
  (t2tb3315 y) (t2tb3314 t))))))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a c))) (t (set (tuple21 b d))) (x (tuple21 a c))
  (y (tuple21 b d)))
  (= (mem24
  (tb2t691 (Tuple2 (tuple2 a1 c1) (tuple2 b1 d1) (t2tb133 x) (t2tb692 y)))
  (tb2t686 (times (tuple2 b1 d1) (tuple2 a1 c1) (t2tb129 s) (t2tb687 t))))
  (and (mem (tuple2 a1 c1) (t2tb133 x) (t2tb129 s)) (mem (tuple2 b1 d1)
  (t2tb692 y) (t2tb687 t))))))

(declare-fun t2tb3462 ((set (tuple21 c (tuple21 c f)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 c (tuple21 c f))))) (sort
  (set1 (tuple2 c1 (tuple2 c1 f1))) (t2tb3462 x))))

(declare-fun tb2t3462 (uni) (set (tuple21 c (tuple21 c f))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 c (tuple21 c f)))))
  (! (= (tb2t3462 (t2tb3462 i)) i) :pattern ((t2tb3462 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 c1 (tuple2 c1 f1))) j)
     (= (t2tb3462 (tb2t3462 j)) j)) :pattern ((t2tb3462 (tb2t3462 j))) )))

(declare-fun t2tb3463 ((tuple21 c (tuple21 c f))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 c (tuple21 c f)))) (sort (tuple2 c1 (tuple2 c1 f1))
  (t2tb3463 x))))

(declare-fun tb2t3463 (uni) (tuple21 c (tuple21 c f)))

;; BridgeL
  (assert
  (forall ((i (tuple21 c (tuple21 c f))))
  (! (= (tb2t3463 (t2tb3463 i)) i) :pattern ((t2tb3463 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 c1 (tuple2 c1 f1)) j) (= (t2tb3463 (tb2t3463 j)) j)) :pattern (
  (t2tb3463 (tb2t3463 j))) )))

;; mem_times
  (assert
  (forall ((s (set c)) (t (set (tuple21 c f))) (x c) (y (tuple21 c f)))
  (= (mem (tuple2 c1 (tuple2 c1 f1))
  (Tuple2 c1 (tuple2 c1 f1) (t2tb135 x) (t2tb2948 y))
  (times (tuple2 c1 f1) c1 (t2tb132 s) (t2tb2942 t)))
  (and (mem7 x s) (mem45 y t)))))

(declare-fun t2tb3464 ((set (tuple21 c (tuple21 a e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 c (tuple21 a e))))) (sort
  (set1 (tuple2 c1 (tuple2 a1 e1))) (t2tb3464 x))))

(declare-fun tb2t3464 (uni) (set (tuple21 c (tuple21 a e))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 c (tuple21 a e)))))
  (! (= (tb2t3464 (t2tb3464 i)) i) :pattern ((t2tb3464 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 c1 (tuple2 a1 e1))) j)
     (= (t2tb3464 (tb2t3464 j)) j)) :pattern ((t2tb3464 (tb2t3464 j))) )))

(declare-fun t2tb3465 ((tuple21 c (tuple21 a e))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 c (tuple21 a e)))) (sort (tuple2 c1 (tuple2 a1 e1))
  (t2tb3465 x))))

(declare-fun tb2t3465 (uni) (tuple21 c (tuple21 a e)))

;; BridgeL
  (assert
  (forall ((i (tuple21 c (tuple21 a e))))
  (! (= (tb2t3465 (t2tb3465 i)) i) :pattern ((t2tb3465 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 c1 (tuple2 a1 e1)) j) (= (t2tb3465 (tb2t3465 j)) j)) :pattern (
  (t2tb3465 (tb2t3465 j))) )))

;; mem_times
  (assert
  (forall ((s (set c)) (t (set (tuple21 a e))) (x c) (y (tuple21 a e)))
  (= (mem (tuple2 c1 (tuple2 a1 e1))
  (Tuple2 c1 (tuple2 a1 e1) (t2tb135 x) (t2tb2949 y))
  (times (tuple2 a1 e1) c1 (t2tb132 s) (t2tb2943 t)))
  (and (mem7 x s) (mem44 y t)))))

(declare-fun t2tb3466 ((tuple21 c (tuple21 (tuple21 b d) (tuple21 e
  f)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 c (tuple21 (tuple21 b d) (tuple21 e f))))) (sort
  (tuple2 c1 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1))) (t2tb3466 x))))

(declare-fun tb2t3466 (uni) (tuple21 c (tuple21 (tuple21 b d) (tuple21 e
  f))))

;; BridgeL
  (assert
  (forall ((i (tuple21 c (tuple21 (tuple21 b d) (tuple21 e f)))))
  (! (= (tb2t3466 (t2tb3466 i)) i) :pattern ((t2tb3466 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 c1 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1))) j)
     (= (t2tb3466 (tb2t3466 j)) j)) :pattern ((t2tb3466 (tb2t3466 j))) )))

(declare-fun t2tb3467 ((set (tuple21 c (tuple21 (tuple21 b d) (tuple21 e
  f))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 c (tuple21 (tuple21 b d) (tuple21 e f)))))) (sort
  (set1 (tuple2 c1 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)))) (t2tb3467 x))))

(declare-fun tb2t3467 (uni) (set (tuple21 c (tuple21 (tuple21 b d) (tuple21 e
  f)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 c (tuple21 (tuple21 b d) (tuple21 e f))))))
  (! (= (tb2t3467 (t2tb3467 i)) i) :pattern ((t2tb3467 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 c1 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)))) j)
     (= (t2tb3467 (tb2t3467 j)) j)) :pattern ((t2tb3467 (tb2t3467 j))) )))

;; mem_times
  (assert
  (forall ((s (set c)) (t (set (tuple21 (tuple21 b d) (tuple21 e f)))) (x c)
  (y (tuple21 (tuple21 b d) (tuple21 e f))))
  (= (mem (tuple2 c1 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)))
  (Tuple2 c1 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (t2tb135 x) (t2tb2950 y))
  (times (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) c1 (t2tb132 s) (t2tb2944 t)))
  (and (mem7 x s) (mem43 y t)))))

(declare-fun t2tb3468 ((set (tuple21 c (tuple21 (tuple21 a c) (tuple21 e
  f))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 c (tuple21 (tuple21 a c) (tuple21 e f)))))) (sort
  (set1 (tuple2 c1 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)))) (t2tb3468 x))))

(declare-fun tb2t3468 (uni) (set (tuple21 c (tuple21 (tuple21 a c) (tuple21 e
  f)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 c (tuple21 (tuple21 a c) (tuple21 e f))))))
  (! (= (tb2t3468 (t2tb3468 i)) i) :pattern ((t2tb3468 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 c1 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)))) j)
     (= (t2tb3468 (tb2t3468 j)) j)) :pattern ((t2tb3468 (tb2t3468 j))) )))

(declare-fun t2tb3469 ((tuple21 c (tuple21 (tuple21 a c) (tuple21 e
  f)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 c (tuple21 (tuple21 a c) (tuple21 e f))))) (sort
  (tuple2 c1 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1))) (t2tb3469 x))))

(declare-fun tb2t3469 (uni) (tuple21 c (tuple21 (tuple21 a c) (tuple21 e
  f))))

;; BridgeL
  (assert
  (forall ((i (tuple21 c (tuple21 (tuple21 a c) (tuple21 e f)))))
  (! (= (tb2t3469 (t2tb3469 i)) i) :pattern ((t2tb3469 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 c1 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1))) j)
     (= (t2tb3469 (tb2t3469 j)) j)) :pattern ((t2tb3469 (tb2t3469 j))) )))

;; mem_times
  (assert
  (forall ((s (set c)) (t (set (tuple21 (tuple21 a c) (tuple21 e f)))) (x c)
  (y (tuple21 (tuple21 a c) (tuple21 e f))))
  (= (mem (tuple2 c1 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)))
  (Tuple2 c1 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (t2tb135 x) (t2tb2951 y))
  (times (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) c1 (t2tb132 s) (t2tb2945 t)))
  (and (mem7 x s) (mem42 y t)))))

(declare-fun t2tb3470 ((set (tuple21 c (set (tuple21 d f))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 c (set (tuple21 d f)))))) (sort
  (set1 (tuple2 c1 (set1 (tuple2 d1 f1)))) (t2tb3470 x))))

(declare-fun tb2t3470 (uni) (set (tuple21 c (set (tuple21 d f)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 c (set (tuple21 d f))))))
  (! (= (tb2t3470 (t2tb3470 i)) i) :pattern ((t2tb3470 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 c1 (set1 (tuple2 d1 f1)))) j)
     (= (t2tb3470 (tb2t3470 j)) j)) :pattern ((t2tb3470 (tb2t3470 j))) )))

(declare-fun t2tb3471 ((tuple21 c (set (tuple21 d f)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 c (set (tuple21 d f))))) (sort
  (tuple2 c1 (set1 (tuple2 d1 f1))) (t2tb3471 x))))

(declare-fun tb2t3471 (uni) (tuple21 c (set (tuple21 d f))))

;; BridgeL
  (assert
  (forall ((i (tuple21 c (set (tuple21 d f)))))
  (! (= (tb2t3471 (t2tb3471 i)) i) :pattern ((t2tb3471 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 c1 (set1 (tuple2 d1 f1))) j)
     (= (t2tb3471 (tb2t3471 j)) j)) :pattern ((t2tb3471 (tb2t3471 j))) )))

;; mem_times
  (assert
  (forall ((s (set c)) (t (set (set (tuple21 d f)))) (x c) (y (set (tuple21 d
  f))))
  (= (mem (tuple2 c1 (set1 (tuple2 d1 f1)))
  (Tuple2 c1 (set1 (tuple2 d1 f1)) (t2tb135 x) (t2tb2938 y))
  (times (set1 (tuple2 d1 f1)) c1 (t2tb132 s) (t2tb2939 t)))
  (and (mem7 x s) (mem41 y t)))))

(declare-fun t2tb3472 ((set (tuple21 c (tuple21 d f)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 c (tuple21 d f))))) (sort
  (set1 (tuple2 c1 (tuple2 d1 f1))) (t2tb3472 x))))

(declare-fun tb2t3472 (uni) (set (tuple21 c (tuple21 d f))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 c (tuple21 d f)))))
  (! (= (tb2t3472 (t2tb3472 i)) i) :pattern ((t2tb3472 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 c1 (tuple2 d1 f1))) j)
     (= (t2tb3472 (tb2t3472 j)) j)) :pattern ((t2tb3472 (tb2t3472 j))) )))

(declare-fun t2tb3473 ((tuple21 c (tuple21 d f))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 c (tuple21 d f)))) (sort (tuple2 c1 (tuple2 d1 f1))
  (t2tb3473 x))))

(declare-fun tb2t3473 (uni) (tuple21 c (tuple21 d f)))

;; BridgeL
  (assert
  (forall ((i (tuple21 c (tuple21 d f))))
  (! (= (tb2t3473 (t2tb3473 i)) i) :pattern ((t2tb3473 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 c1 (tuple2 d1 f1)) j) (= (t2tb3473 (tb2t3473 j)) j)) :pattern (
  (t2tb3473 (tb2t3473 j))) )))

;; mem_times
  (assert
  (forall ((s (set c)) (t (set (tuple21 d f))) (x c) (y (tuple21 d f)))
  (= (mem (tuple2 c1 (tuple2 d1 f1))
  (Tuple2 c1 (tuple2 d1 f1) (t2tb135 x) (t2tb2952 y))
  (times (tuple2 d1 f1) c1 (t2tb132 s) (t2tb2938 t)))
  (and (mem7 x s) (mem40 y t)))))

(declare-fun t2tb3474 ((set (tuple21 c (set (tuple21 b e))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 c (set (tuple21 b e)))))) (sort
  (set1 (tuple2 c1 (set1 (tuple2 b1 e1)))) (t2tb3474 x))))

(declare-fun tb2t3474 (uni) (set (tuple21 c (set (tuple21 b e)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 c (set (tuple21 b e))))))
  (! (= (tb2t3474 (t2tb3474 i)) i) :pattern ((t2tb3474 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 c1 (set1 (tuple2 b1 e1)))) j)
     (= (t2tb3474 (tb2t3474 j)) j)) :pattern ((t2tb3474 (tb2t3474 j))) )))

(declare-fun t2tb3475 ((tuple21 c (set (tuple21 b e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 c (set (tuple21 b e))))) (sort
  (tuple2 c1 (set1 (tuple2 b1 e1))) (t2tb3475 x))))

(declare-fun tb2t3475 (uni) (tuple21 c (set (tuple21 b e))))

;; BridgeL
  (assert
  (forall ((i (tuple21 c (set (tuple21 b e)))))
  (! (= (tb2t3475 (t2tb3475 i)) i) :pattern ((t2tb3475 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 c1 (set1 (tuple2 b1 e1))) j)
     (= (t2tb3475 (tb2t3475 j)) j)) :pattern ((t2tb3475 (tb2t3475 j))) )))

;; mem_times
  (assert
  (forall ((s (set c)) (t (set (set (tuple21 b e)))) (x c) (y (set (tuple21 b
  e))))
  (= (mem (tuple2 c1 (set1 (tuple2 b1 e1)))
  (Tuple2 c1 (set1 (tuple2 b1 e1)) (t2tb135 x) (t2tb2940 y))
  (times (set1 (tuple2 b1 e1)) c1 (t2tb132 s) (t2tb2941 t)))
  (and (mem7 x s) (mem39 y t)))))

(declare-fun t2tb3476 ((set (tuple21 c (tuple21 b e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 c (tuple21 b e))))) (sort
  (set1 (tuple2 c1 (tuple2 b1 e1))) (t2tb3476 x))))

(declare-fun tb2t3476 (uni) (set (tuple21 c (tuple21 b e))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 c (tuple21 b e)))))
  (! (= (tb2t3476 (t2tb3476 i)) i) :pattern ((t2tb3476 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 c1 (tuple2 b1 e1))) j)
     (= (t2tb3476 (tb2t3476 j)) j)) :pattern ((t2tb3476 (tb2t3476 j))) )))

(declare-fun t2tb3477 ((tuple21 c (tuple21 b e))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 c (tuple21 b e)))) (sort (tuple2 c1 (tuple2 b1 e1))
  (t2tb3477 x))))

(declare-fun tb2t3477 (uni) (tuple21 c (tuple21 b e)))

;; BridgeL
  (assert
  (forall ((i (tuple21 c (tuple21 b e))))
  (! (= (tb2t3477 (t2tb3477 i)) i) :pattern ((t2tb3477 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 c1 (tuple2 b1 e1)) j) (= (t2tb3477 (tb2t3477 j)) j)) :pattern (
  (t2tb3477 (tb2t3477 j))) )))

;; mem_times
  (assert
  (forall ((s (set c)) (t (set (tuple21 b e))) (x c) (y (tuple21 b e)))
  (= (mem (tuple2 c1 (tuple2 b1 e1))
  (Tuple2 c1 (tuple2 b1 e1) (t2tb135 x) (t2tb2953 y))
  (times (tuple2 b1 e1) c1 (t2tb132 s) (t2tb2940 t)))
  (and (mem7 x s) (mem38 y t)))))

;; mem_times
  (assert
  (forall ((s (set c)) (t (set f)) (x c) (y f))
  (= (mem45 (tb2t2948 (Tuple2 c1 f1 (t2tb135 x) (t2tb2954 y)))
  (tb2t2942 (times f1 c1 (t2tb132 s) (t2tb2946 t))))
  (and (mem7 x s) (mem37 y t)))))

(declare-fun t2tb3478 ((set (tuple21 c e))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 c e)))) (sort (set1 (tuple2 c1 e1))
  (t2tb3478 x))))

(declare-fun tb2t3478 (uni) (set (tuple21 c e)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 c e))))
  (! (= (tb2t3478 (t2tb3478 i)) i) :pattern ((t2tb3478 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 c1 e1)) j) (= (t2tb3478 (tb2t3478 j)) j)) :pattern (
  (t2tb3478 (tb2t3478 j))) )))

(declare-fun t2tb3479 ((tuple21 c e)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 c e))) (sort (tuple2 c1 e1) (t2tb3479 x))))

(declare-fun tb2t3479 (uni) (tuple21 c e))

;; BridgeL
  (assert
  (forall ((i (tuple21 c e)))
  (! (= (tb2t3479 (t2tb3479 i)) i) :pattern ((t2tb3479 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 c1 e1) j) (= (t2tb3479 (tb2t3479 j)) j)) :pattern (
  (t2tb3479 (tb2t3479 j))) )))

;; mem_times
  (assert
  (forall ((s (set c)) (t (set e)) (x c) (y e))
  (= (mem (tuple2 c1 e1) (Tuple2 c1 e1 (t2tb135 x) (t2tb2955 y))
  (times e1 c1 (t2tb132 s) (t2tb2947 t))) (and (mem7 x s) (mem36 y t)))))

(declare-fun t2tb3480 ((set (tuple21 c (tuple21 (tuple21 a c) (tuple21 b
  d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 c (tuple21 (tuple21 a c) (tuple21 b d)))))) (sort
  (set1 (tuple2 c1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))) (t2tb3480 x))))

(declare-fun tb2t3480 (uni) (set (tuple21 c (tuple21 (tuple21 a c) (tuple21 b
  d)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 c (tuple21 (tuple21 a c) (tuple21 b d))))))
  (! (= (tb2t3480 (t2tb3480 i)) i) :pattern ((t2tb3480 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 c1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))) j)
     (= (t2tb3480 (tb2t3480 j)) j)) :pattern ((t2tb3480 (tb2t3480 j))) )))

(declare-fun t2tb3481 ((tuple21 c (tuple21 (tuple21 a c) (tuple21 b
  d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 c (tuple21 (tuple21 a c) (tuple21 b d))))) (sort
  (tuple2 c1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))) (t2tb3481 x))))

(declare-fun tb2t3481 (uni) (tuple21 c (tuple21 (tuple21 a c) (tuple21 b
  d))))

;; BridgeL
  (assert
  (forall ((i (tuple21 c (tuple21 (tuple21 a c) (tuple21 b d)))))
  (! (= (tb2t3481 (t2tb3481 i)) i) :pattern ((t2tb3481 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 c1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))) j)
     (= (t2tb3481 (tb2t3481 j)) j)) :pattern ((t2tb3481 (tb2t3481 j))) )))

;; mem_times
  (assert
  (forall ((s (set c)) (t (set (tuple21 (tuple21 a c) (tuple21 b d)))) (x c)
  (y (tuple21 (tuple21 a c) (tuple21 b d))))
  (= (mem (tuple2 c1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
  (Tuple2 c1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb135 x) (t2tb691 y))
  (times (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) c1 (t2tb132 s) (t2tb686 t)))
  (and (mem7 x s) (mem24 y t)))))

(declare-fun t2tb3482 ((tuple21 c (set (tuple21 c d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 c (set (tuple21 c d))))) (sort
  (tuple2 c1 (set1 (tuple2 c1 d1))) (t2tb3482 x))))

(declare-fun tb2t3482 (uni) (tuple21 c (set (tuple21 c d))))

;; BridgeL
  (assert
  (forall ((i (tuple21 c (set (tuple21 c d)))))
  (! (= (tb2t3482 (t2tb3482 i)) i) :pattern ((t2tb3482 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 c1 (set1 (tuple2 c1 d1))) j)
     (= (t2tb3482 (tb2t3482 j)) j)) :pattern ((t2tb3482 (tb2t3482 j))) )))

(declare-fun t2tb3483 ((set (tuple21 c (set (tuple21 c d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 c (set (tuple21 c d)))))) (sort
  (set1 (tuple2 c1 (set1 (tuple2 c1 d1)))) (t2tb3483 x))))

(declare-fun tb2t3483 (uni) (set (tuple21 c (set (tuple21 c d)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 c (set (tuple21 c d))))))
  (! (= (tb2t3483 (t2tb3483 i)) i) :pattern ((t2tb3483 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 c1 (set1 (tuple2 c1 d1)))) j)
     (= (t2tb3483 (tb2t3483 j)) j)) :pattern ((t2tb3483 (tb2t3483 j))) )))

;; mem_times
  (assert
  (forall ((s (set c)) (t (set (set (tuple21 c d)))) (x c) (y (set (tuple21 c
  d))))
  (= (mem (tuple2 c1 (set1 (tuple2 c1 d1)))
  (Tuple2 c1 (set1 (tuple2 c1 d1)) (t2tb135 x) (t2tb689 y))
  (times (set1 (tuple2 c1 d1)) c1 (t2tb132 s) (t2tb688 t)))
  (and (mem7 x s) (mem22 y t)))))

(declare-fun t2tb857 ((set (tuple21 c (tuple21 c d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 c (tuple21 c d))))) (sort
  (set1 (tuple2 c1 (tuple2 c1 d1))) (t2tb857 x))))

(declare-fun tb2t857 (uni) (set (tuple21 c (tuple21 c d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 c (tuple21 c d)))))
  (! (= (tb2t857 (t2tb857 i)) i) :pattern ((t2tb857 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 c1 (tuple2 c1 d1))) j)
     (= (t2tb857 (tb2t857 j)) j)) :pattern ((t2tb857 (tb2t857 j))) )))

(declare-fun t2tb858 ((tuple21 c (tuple21 c d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 c (tuple21 c d)))) (sort (tuple2 c1 (tuple2 c1 d1))
  (t2tb858 x))))

(declare-fun tb2t858 (uni) (tuple21 c (tuple21 c d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 c (tuple21 c d))))
  (! (= (tb2t858 (t2tb858 i)) i) :pattern ((t2tb858 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 c1 (tuple2 c1 d1)) j) (= (t2tb858 (tb2t858 j)) j)) :pattern (
  (t2tb858 (tb2t858 j))) )))

;; mem_times
  (assert
  (forall ((s (set c)) (t (set (tuple21 c d))) (x c) (y (tuple21 c d)))
  (= (mem (tuple2 c1 (tuple2 c1 d1))
  (Tuple2 c1 (tuple2 c1 d1) (t2tb135 x) (t2tb693 y))
  (times (tuple2 c1 d1) c1 (t2tb132 s) (t2tb689 t)))
  (and (mem7 x s) (mem21 y t)))))

;; mem_times
  (assert
  (forall ((s (set c)) (t (set d)) (x c) (y d))
  (= (mem21 (tb2t693 (Tuple2 c1 d1 (t2tb135 x) (t2tb694 y)))
  (tb2t689 (times d1 c1 (t2tb132 s) (t2tb690 t))))
  (and (mem7 x s) (mem20 y t)))))

(declare-fun t2tb216 ((set (tuple21 c c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 c c)))) (sort (set1 (tuple2 c1 c1)) (t2tb216 x))))

(declare-fun tb2t216 (uni) (set (tuple21 c c)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 c c))))
  (! (= (tb2t216 (t2tb216 i)) i) :pattern ((t2tb216 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 c1 c1)) j) (= (t2tb216 (tb2t216 j)) j)) :pattern (
  (t2tb216 (tb2t216 j))) )))

(declare-fun t2tb217 ((tuple21 c c)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 c c))) (sort (tuple2 c1 c1) (t2tb217 x))))

(declare-fun tb2t217 (uni) (tuple21 c c))

;; BridgeL
  (assert
  (forall ((i (tuple21 c c)))
  (! (= (tb2t217 (t2tb217 i)) i) :pattern ((t2tb217 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 c1 c1) j) (= (t2tb217 (tb2t217 j)) j)) :pattern (
  (t2tb217 (tb2t217 j))) )))

;; mem_times
  (assert
  (forall ((s (set c)) (t (set c)) (x c) (y c))
  (= (mem (tuple2 c1 c1) (Tuple2 c1 c1 (t2tb135 x) (t2tb135 y))
  (times c1 c1 (t2tb132 s) (t2tb132 t))) (and (mem7 x s) (mem7 y t)))))

(declare-fun t2tb218 ((set (tuple21 c (set (tuple21 a b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 c (set (tuple21 a b)))))) (sort
  (set1 (tuple2 c1 (set1 (tuple2 a1 b1)))) (t2tb218 x))))

(declare-fun tb2t218 (uni) (set (tuple21 c (set (tuple21 a b)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 c (set (tuple21 a b))))))
  (! (= (tb2t218 (t2tb218 i)) i) :pattern ((t2tb218 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 c1 (set1 (tuple2 a1 b1)))) j)
     (= (t2tb218 (tb2t218 j)) j)) :pattern ((t2tb218 (tb2t218 j))) )))

(declare-fun t2tb219 ((tuple21 c (set (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 c (set (tuple21 a b))))) (sort
  (tuple2 c1 (set1 (tuple2 a1 b1))) (t2tb219 x))))

(declare-fun tb2t219 (uni) (tuple21 c (set (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (tuple21 c (set (tuple21 a b)))))
  (! (= (tb2t219 (t2tb219 i)) i) :pattern ((t2tb219 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 c1 (set1 (tuple2 a1 b1))) j)
     (= (t2tb219 (tb2t219 j)) j)) :pattern ((t2tb219 (tb2t219 j))) )))

;; mem_times
  (assert
  (forall ((s (set c)) (t (set (set (tuple21 a b)))) (x c) (y (set (tuple21 a
  b))))
  (= (mem (tuple2 c1 (set1 (tuple2 a1 b1)))
  (Tuple2 c1 (set1 (tuple2 a1 b1)) (t2tb135 x) (t2tb11 y))
  (times (set1 (tuple2 a1 b1)) c1 (t2tb132 s) (t2tb10 t)))
  (and (mem7 x s) (mem4 y t)))))

(declare-fun t2tb220 ((set (tuple21 c (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 c (tuple21 a b))))) (sort
  (set1 (tuple2 c1 (tuple2 a1 b1))) (t2tb220 x))))

(declare-fun tb2t220 (uni) (set (tuple21 c (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 c (tuple21 a b)))))
  (! (= (tb2t220 (t2tb220 i)) i) :pattern ((t2tb220 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 c1 (tuple2 a1 b1))) j)
     (= (t2tb220 (tb2t220 j)) j)) :pattern ((t2tb220 (tb2t220 j))) )))

(declare-fun t2tb221 ((tuple21 c (tuple21 a b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 c (tuple21 a b)))) (sort (tuple2 c1 (tuple2 a1 b1))
  (t2tb221 x))))

(declare-fun tb2t221 (uni) (tuple21 c (tuple21 a b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 c (tuple21 a b))))
  (! (= (tb2t221 (t2tb221 i)) i) :pattern ((t2tb221 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 c1 (tuple2 a1 b1)) j) (= (t2tb221 (tb2t221 j)) j)) :pattern (
  (t2tb221 (tb2t221 j))) )))

;; mem_times
  (assert
  (forall ((s (set c)) (t (set (tuple21 a b))) (x c) (y (tuple21 a b)))
  (= (mem (tuple2 c1 (tuple2 a1 b1))
  (Tuple2 c1 (tuple2 a1 b1) (t2tb135 x) (t2tb13 y))
  (times (tuple2 a1 b1) c1 (t2tb132 s) (t2tb11 t)))
  (and (mem7 x s) (mem3 y t)))))

(declare-fun t2tb222 ((set (tuple21 c b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 c b)))) (sort (set1 (tuple2 c1 b1)) (t2tb222 x))))

(declare-fun tb2t222 (uni) (set (tuple21 c b)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 c b))))
  (! (= (tb2t222 (t2tb222 i)) i) :pattern ((t2tb222 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 c1 b1)) j) (= (t2tb222 (tb2t222 j)) j)) :pattern (
  (t2tb222 (tb2t222 j))) )))

(declare-fun t2tb223 ((tuple21 c b)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 c b))) (sort (tuple2 c1 b1) (t2tb223 x))))

(declare-fun tb2t223 (uni) (tuple21 c b))

;; BridgeL
  (assert
  (forall ((i (tuple21 c b)))
  (! (= (tb2t223 (t2tb223 i)) i) :pattern ((t2tb223 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 c1 b1) j) (= (t2tb223 (tb2t223 j)) j)) :pattern (
  (t2tb223 (tb2t223 j))) )))

;; mem_times
  (assert
  (forall ((s (set c)) (t (set b)) (x c) (y b))
  (= (mem (tuple2 c1 b1) (Tuple2 c1 b1 (t2tb135 x) (t2tb14 y))
  (times b1 c1 (t2tb132 s) (t2tb12 t))) (and (mem7 x s) (mem2 y t)))))

(declare-fun t2tb224 ((set (tuple21 c a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 c a)))) (sort (set1 (tuple2 c1 a1)) (t2tb224 x))))

(declare-fun tb2t224 (uni) (set (tuple21 c a)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 c a))))
  (! (= (tb2t224 (t2tb224 i)) i) :pattern ((t2tb224 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 c1 a1)) j) (= (t2tb224 (tb2t224 j)) j)) :pattern (
  (t2tb224 (tb2t224 j))) )))

(declare-fun t2tb225 ((tuple21 c a)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 c a))) (sort (tuple2 c1 a1) (t2tb225 x))))

(declare-fun tb2t225 (uni) (tuple21 c a))

;; BridgeL
  (assert
  (forall ((i (tuple21 c a)))
  (! (= (tb2t225 (t2tb225 i)) i) :pattern ((t2tb225 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 c1 a1) j) (= (t2tb225 (tb2t225 j)) j)) :pattern (
  (t2tb225 (tb2t225 j))) )))

;; mem_times
  (assert
  (forall ((s (set c)) (t (set a)) (x c) (y a))
  (= (mem (tuple2 c1 a1) (Tuple2 c1 a1 (t2tb135 x) (t2tb2 y))
  (times a1 c1 (t2tb132 s) (t2tb1 t))) (and (mem7 x s) (mem1 y t)))))

;; mem_times
  (assert
  (forall ((b2 ty))
  (forall ((s (set c)) (t uni) (x c) (y uni))
  (= (mem (tuple2 c1 b2) (Tuple2 c1 b2 (t2tb135 x) y)
  (times b2 c1 (t2tb132 s) t)) (and (mem7 x s) (mem b2 y t))))))

(declare-fun t2tb3484 ((set (tuple21 (set (tuple21 a b)) (tuple21 c
  f)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a b)) (tuple21 c f))))) (sort
  (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 c1 f1))) (t2tb3484 x))))

(declare-fun tb2t3484 (uni) (set (tuple21 (set (tuple21 a b)) (tuple21 c
  f))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a b)) (tuple21 c f)))))
  (! (= (tb2t3484 (t2tb3484 i)) i) :pattern ((t2tb3484 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 c1 f1))) j)
     (= (t2tb3484 (tb2t3484 j)) j)) :pattern ((t2tb3484 (tb2t3484 j))) )))

(declare-fun t2tb3485 ((tuple21 (set (tuple21 a b)) (tuple21 c f))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a b)) (tuple21 c f)))) (sort
  (tuple2 (set1 (tuple2 a1 b1)) (tuple2 c1 f1)) (t2tb3485 x))))

(declare-fun tb2t3485 (uni) (tuple21 (set (tuple21 a b)) (tuple21 c f)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a b)) (tuple21 c f))))
  (! (= (tb2t3485 (t2tb3485 i)) i) :pattern ((t2tb3485 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 a1 b1)) (tuple2 c1 f1)) j)
     (= (t2tb3485 (tb2t3485 j)) j)) :pattern ((t2tb3485 (tb2t3485 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set (tuple21 c f)))
  (x (set (tuple21 a b))) (y (tuple21 c f)))
  (= (mem (tuple2 (set1 (tuple2 a1 b1)) (tuple2 c1 f1))
  (Tuple2 (set1 (tuple2 a1 b1)) (tuple2 c1 f1) (t2tb11 x) (t2tb2948 y))
  (times (tuple2 c1 f1) (set1 (tuple2 a1 b1)) (t2tb10 s) (t2tb2942 t)))
  (and (mem4 x s) (mem45 y t)))))

(declare-fun t2tb3486 ((set (tuple21 (set (tuple21 a b)) (tuple21 a
  e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a b)) (tuple21 a e))))) (sort
  (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 e1))) (t2tb3486 x))))

(declare-fun tb2t3486 (uni) (set (tuple21 (set (tuple21 a b)) (tuple21 a
  e))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a b)) (tuple21 a e)))))
  (! (= (tb2t3486 (t2tb3486 i)) i) :pattern ((t2tb3486 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 e1))) j)
     (= (t2tb3486 (tb2t3486 j)) j)) :pattern ((t2tb3486 (tb2t3486 j))) )))

(declare-fun t2tb3487 ((tuple21 (set (tuple21 a b)) (tuple21 a e))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a b)) (tuple21 a e)))) (sort
  (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 e1)) (t2tb3487 x))))

(declare-fun tb2t3487 (uni) (tuple21 (set (tuple21 a b)) (tuple21 a e)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a b)) (tuple21 a e))))
  (! (= (tb2t3487 (t2tb3487 i)) i) :pattern ((t2tb3487 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 e1)) j)
     (= (t2tb3487 (tb2t3487 j)) j)) :pattern ((t2tb3487 (tb2t3487 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set (tuple21 a e)))
  (x (set (tuple21 a b))) (y (tuple21 a e)))
  (= (mem (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 e1))
  (Tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 e1) (t2tb11 x) (t2tb2949 y))
  (times (tuple2 a1 e1) (set1 (tuple2 a1 b1)) (t2tb10 s) (t2tb2943 t)))
  (and (mem4 x s) (mem44 y t)))))

(declare-fun t2tb3488 ((set (tuple21 (set (tuple21 a b)) (tuple21 (tuple21 b
  d) (tuple21 e f))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a b)) (tuple21 (tuple21 b d)
  (tuple21 e f)))))) (sort
  (set1
  (tuple2 (set1 (tuple2 a1 b1)) (tuple2 (tuple2 b1 d1) (tuple2 e1 f1))))
  (t2tb3488 x))))

(declare-fun tb2t3488 (uni) (set (tuple21 (set (tuple21 a b))
  (tuple21 (tuple21 b d) (tuple21 e f)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a b)) (tuple21 (tuple21 b d)
  (tuple21 e f))))))
  (! (= (tb2t3488 (t2tb3488 i)) i) :pattern ((t2tb3488 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (tuple2 (set1 (tuple2 a1 b1)) (tuple2 (tuple2 b1 d1) (tuple2 e1 f1))))
     j) (= (t2tb3488 (tb2t3488 j)) j)) :pattern ((t2tb3488 (tb2t3488 j))) )))

(declare-fun t2tb3489 ((tuple21 (set (tuple21 a b)) (tuple21 (tuple21 b d)
  (tuple21 e f)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a b)) (tuple21 (tuple21 b d) (tuple21 e
  f))))) (sort
  (tuple2 (set1 (tuple2 a1 b1)) (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)))
  (t2tb3489 x))))

(declare-fun tb2t3489 (uni) (tuple21 (set (tuple21 a b)) (tuple21 (tuple21 b
  d) (tuple21 e f))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a b)) (tuple21 (tuple21 b d) (tuple21 e
  f))))) (! (= (tb2t3489 (t2tb3489 i)) i) :pattern ((t2tb3489 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (tuple2 (set1 (tuple2 a1 b1)) (tuple2 (tuple2 b1 d1) (tuple2 e1 f1))) j)
     (= (t2tb3489 (tb2t3489 j)) j)) :pattern ((t2tb3489 (tb2t3489 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set (tuple21 (tuple21 b d)
  (tuple21 e f)))) (x (set (tuple21 a b))) (y (tuple21 (tuple21 b d)
  (tuple21 e f))))
  (= (mem
  (tuple2 (set1 (tuple2 a1 b1)) (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)))
  (Tuple2 (set1 (tuple2 a1 b1)) (tuple2 (tuple2 b1 d1) (tuple2 e1 f1))
  (t2tb11 x) (t2tb2950 y))
  (times (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (set1 (tuple2 a1 b1))
  (t2tb10 s) (t2tb2944 t))) (and (mem4 x s) (mem43 y t)))))

(declare-fun t2tb3490 ((set (tuple21 (set (tuple21 a b)) (tuple21 (tuple21 a
  c) (tuple21 e f))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a b)) (tuple21 (tuple21 a c)
  (tuple21 e f)))))) (sort
  (set1
  (tuple2 (set1 (tuple2 a1 b1)) (tuple2 (tuple2 a1 c1) (tuple2 e1 f1))))
  (t2tb3490 x))))

(declare-fun tb2t3490 (uni) (set (tuple21 (set (tuple21 a b))
  (tuple21 (tuple21 a c) (tuple21 e f)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a b)) (tuple21 (tuple21 a c)
  (tuple21 e f))))))
  (! (= (tb2t3490 (t2tb3490 i)) i) :pattern ((t2tb3490 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (tuple2 (set1 (tuple2 a1 b1)) (tuple2 (tuple2 a1 c1) (tuple2 e1 f1))))
     j) (= (t2tb3490 (tb2t3490 j)) j)) :pattern ((t2tb3490 (tb2t3490 j))) )))

(declare-fun t2tb3491 ((tuple21 (set (tuple21 a b)) (tuple21 (tuple21 a c)
  (tuple21 e f)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a b)) (tuple21 (tuple21 a c) (tuple21 e
  f))))) (sort
  (tuple2 (set1 (tuple2 a1 b1)) (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)))
  (t2tb3491 x))))

(declare-fun tb2t3491 (uni) (tuple21 (set (tuple21 a b)) (tuple21 (tuple21 a
  c) (tuple21 e f))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a b)) (tuple21 (tuple21 a c) (tuple21 e
  f))))) (! (= (tb2t3491 (t2tb3491 i)) i) :pattern ((t2tb3491 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (tuple2 (set1 (tuple2 a1 b1)) (tuple2 (tuple2 a1 c1) (tuple2 e1 f1))) j)
     (= (t2tb3491 (tb2t3491 j)) j)) :pattern ((t2tb3491 (tb2t3491 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set (tuple21 (tuple21 a c)
  (tuple21 e f)))) (x (set (tuple21 a b))) (y (tuple21 (tuple21 a c)
  (tuple21 e f))))
  (= (mem
  (tuple2 (set1 (tuple2 a1 b1)) (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)))
  (Tuple2 (set1 (tuple2 a1 b1)) (tuple2 (tuple2 a1 c1) (tuple2 e1 f1))
  (t2tb11 x) (t2tb2951 y))
  (times (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (set1 (tuple2 a1 b1))
  (t2tb10 s) (t2tb2945 t))) (and (mem4 x s) (mem42 y t)))))

(declare-fun t2tb3492 ((set (tuple21 (set (tuple21 a b)) (set (tuple21 d
  f))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a b)) (set (tuple21 d f)))))) (sort
  (set1 (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 d1 f1)))) (t2tb3492 x))))

(declare-fun tb2t3492 (uni) (set (tuple21 (set (tuple21 a b)) (set (tuple21 d
  f)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a b)) (set (tuple21 d f))))))
  (! (= (tb2t3492 (t2tb3492 i)) i) :pattern ((t2tb3492 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 d1 f1)))) j)
     (= (t2tb3492 (tb2t3492 j)) j)) :pattern ((t2tb3492 (tb2t3492 j))) )))

(declare-fun t2tb3493 ((tuple21 (set (tuple21 a b)) (set (tuple21 d
  f)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a b)) (set (tuple21 d f))))) (sort
  (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 d1 f1))) (t2tb3493 x))))

(declare-fun tb2t3493 (uni) (tuple21 (set (tuple21 a b)) (set (tuple21 d
  f))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a b)) (set (tuple21 d f)))))
  (! (= (tb2t3493 (t2tb3493 i)) i) :pattern ((t2tb3493 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 d1 f1))) j)
     (= (t2tb3493 (tb2t3493 j)) j)) :pattern ((t2tb3493 (tb2t3493 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set (set (tuple21 d f))))
  (x (set (tuple21 a b))) (y (set (tuple21 d f))))
  (= (mem (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 d1 f1)))
  (Tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 d1 f1)) (t2tb11 x)
  (t2tb2938 y))
  (times (set1 (tuple2 d1 f1)) (set1 (tuple2 a1 b1)) (t2tb10 s) (t2tb2939 t)))
  (and (mem4 x s) (mem41 y t)))))

(declare-fun t2tb3494 ((set (tuple21 (set (tuple21 a b)) (tuple21 d
  f)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a b)) (tuple21 d f))))) (sort
  (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 d1 f1))) (t2tb3494 x))))

(declare-fun tb2t3494 (uni) (set (tuple21 (set (tuple21 a b)) (tuple21 d
  f))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a b)) (tuple21 d f)))))
  (! (= (tb2t3494 (t2tb3494 i)) i) :pattern ((t2tb3494 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 d1 f1))) j)
     (= (t2tb3494 (tb2t3494 j)) j)) :pattern ((t2tb3494 (tb2t3494 j))) )))

(declare-fun t2tb3495 ((tuple21 (set (tuple21 a b)) (tuple21 d f))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a b)) (tuple21 d f)))) (sort
  (tuple2 (set1 (tuple2 a1 b1)) (tuple2 d1 f1)) (t2tb3495 x))))

(declare-fun tb2t3495 (uni) (tuple21 (set (tuple21 a b)) (tuple21 d f)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a b)) (tuple21 d f))))
  (! (= (tb2t3495 (t2tb3495 i)) i) :pattern ((t2tb3495 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 a1 b1)) (tuple2 d1 f1)) j)
     (= (t2tb3495 (tb2t3495 j)) j)) :pattern ((t2tb3495 (tb2t3495 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set (tuple21 d f)))
  (x (set (tuple21 a b))) (y (tuple21 d f)))
  (= (mem (tuple2 (set1 (tuple2 a1 b1)) (tuple2 d1 f1))
  (Tuple2 (set1 (tuple2 a1 b1)) (tuple2 d1 f1) (t2tb11 x) (t2tb2952 y))
  (times (tuple2 d1 f1) (set1 (tuple2 a1 b1)) (t2tb10 s) (t2tb2938 t)))
  (and (mem4 x s) (mem40 y t)))))

(declare-fun t2tb3496 ((set (tuple21 (set (tuple21 a b)) (set (tuple21 b
  e))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a b)) (set (tuple21 b e)))))) (sort
  (set1 (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 b1 e1)))) (t2tb3496 x))))

(declare-fun tb2t3496 (uni) (set (tuple21 (set (tuple21 a b)) (set (tuple21 b
  e)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a b)) (set (tuple21 b e))))))
  (! (= (tb2t3496 (t2tb3496 i)) i) :pattern ((t2tb3496 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 b1 e1)))) j)
     (= (t2tb3496 (tb2t3496 j)) j)) :pattern ((t2tb3496 (tb2t3496 j))) )))

(declare-fun t2tb3497 ((tuple21 (set (tuple21 a b)) (set (tuple21 b
  e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a b)) (set (tuple21 b e))))) (sort
  (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 b1 e1))) (t2tb3497 x))))

(declare-fun tb2t3497 (uni) (tuple21 (set (tuple21 a b)) (set (tuple21 b
  e))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a b)) (set (tuple21 b e)))))
  (! (= (tb2t3497 (t2tb3497 i)) i) :pattern ((t2tb3497 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 b1 e1))) j)
     (= (t2tb3497 (tb2t3497 j)) j)) :pattern ((t2tb3497 (tb2t3497 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set (set (tuple21 b e))))
  (x (set (tuple21 a b))) (y (set (tuple21 b e))))
  (= (mem (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 b1 e1)))
  (Tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 b1 e1)) (t2tb11 x)
  (t2tb2940 y))
  (times (set1 (tuple2 b1 e1)) (set1 (tuple2 a1 b1)) (t2tb10 s) (t2tb2941 t)))
  (and (mem4 x s) (mem39 y t)))))

(declare-fun t2tb3498 ((tuple21 (set (tuple21 a b)) (tuple21 b e))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a b)) (tuple21 b e)))) (sort
  (tuple2 (set1 (tuple2 a1 b1)) (tuple2 b1 e1)) (t2tb3498 x))))

(declare-fun tb2t3498 (uni) (tuple21 (set (tuple21 a b)) (tuple21 b e)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a b)) (tuple21 b e))))
  (! (= (tb2t3498 (t2tb3498 i)) i) :pattern ((t2tb3498 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 a1 b1)) (tuple2 b1 e1)) j)
     (= (t2tb3498 (tb2t3498 j)) j)) :pattern ((t2tb3498 (tb2t3498 j))) )))

(declare-fun t2tb3499 ((set (tuple21 (set (tuple21 a b)) (tuple21 b
  e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a b)) (tuple21 b e))))) (sort
  (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 b1 e1))) (t2tb3499 x))))

(declare-fun tb2t3499 (uni) (set (tuple21 (set (tuple21 a b)) (tuple21 b
  e))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a b)) (tuple21 b e)))))
  (! (= (tb2t3499 (t2tb3499 i)) i) :pattern ((t2tb3499 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 b1 e1))) j)
     (= (t2tb3499 (tb2t3499 j)) j)) :pattern ((t2tb3499 (tb2t3499 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set (tuple21 b e)))
  (x (set (tuple21 a b))) (y (tuple21 b e)))
  (= (mem (tuple2 (set1 (tuple2 a1 b1)) (tuple2 b1 e1))
  (Tuple2 (set1 (tuple2 a1 b1)) (tuple2 b1 e1) (t2tb11 x) (t2tb2953 y))
  (times (tuple2 b1 e1) (set1 (tuple2 a1 b1)) (t2tb10 s) (t2tb2940 t)))
  (and (mem4 x s) (mem38 y t)))))

(declare-fun t2tb3500 ((set (tuple21 (set (tuple21 a b)) f))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a b)) f)))) (sort
  (set1 (tuple2 (set1 (tuple2 a1 b1)) f1)) (t2tb3500 x))))

(declare-fun tb2t3500 (uni) (set (tuple21 (set (tuple21 a b)) f)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a b)) f))))
  (! (= (tb2t3500 (t2tb3500 i)) i) :pattern ((t2tb3500 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 a1 b1)) f1)) j)
     (= (t2tb3500 (tb2t3500 j)) j)) :pattern ((t2tb3500 (tb2t3500 j))) )))

(declare-fun t2tb3501 ((tuple21 (set (tuple21 a b)) f)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a b)) f))) (sort
  (tuple2 (set1 (tuple2 a1 b1)) f1) (t2tb3501 x))))

(declare-fun tb2t3501 (uni) (tuple21 (set (tuple21 a b)) f))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a b)) f)))
  (! (= (tb2t3501 (t2tb3501 i)) i) :pattern ((t2tb3501 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 a1 b1)) f1) j)
     (= (t2tb3501 (tb2t3501 j)) j)) :pattern ((t2tb3501 (tb2t3501 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set f)) (x (set (tuple21 a b)))
  (y f))
  (= (mem (tuple2 (set1 (tuple2 a1 b1)) f1)
  (Tuple2 (set1 (tuple2 a1 b1)) f1 (t2tb11 x) (t2tb2954 y))
  (times f1 (set1 (tuple2 a1 b1)) (t2tb10 s) (t2tb2946 t)))
  (and (mem4 x s) (mem37 y t)))))

(declare-fun t2tb3502 ((set (tuple21 (set (tuple21 a b)) e))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a b)) e)))) (sort
  (set1 (tuple2 (set1 (tuple2 a1 b1)) e1)) (t2tb3502 x))))

(declare-fun tb2t3502 (uni) (set (tuple21 (set (tuple21 a b)) e)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a b)) e))))
  (! (= (tb2t3502 (t2tb3502 i)) i) :pattern ((t2tb3502 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 a1 b1)) e1)) j)
     (= (t2tb3502 (tb2t3502 j)) j)) :pattern ((t2tb3502 (tb2t3502 j))) )))

(declare-fun t2tb3503 ((tuple21 (set (tuple21 a b)) e)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a b)) e))) (sort
  (tuple2 (set1 (tuple2 a1 b1)) e1) (t2tb3503 x))))

(declare-fun tb2t3503 (uni) (tuple21 (set (tuple21 a b)) e))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a b)) e)))
  (! (= (tb2t3503 (t2tb3503 i)) i) :pattern ((t2tb3503 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 a1 b1)) e1) j)
     (= (t2tb3503 (tb2t3503 j)) j)) :pattern ((t2tb3503 (tb2t3503 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set e)) (x (set (tuple21 a b)))
  (y e))
  (= (mem (tuple2 (set1 (tuple2 a1 b1)) e1)
  (Tuple2 (set1 (tuple2 a1 b1)) e1 (t2tb11 x) (t2tb2955 y))
  (times e1 (set1 (tuple2 a1 b1)) (t2tb10 s) (t2tb2947 t)))
  (and (mem4 x s) (mem36 y t)))))

(declare-fun t2tb3504 ((set (tuple21 (set (tuple21 a b)) (tuple21 (tuple21 a
  c) (tuple21 b d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a b)) (tuple21 (tuple21 a c)
  (tuple21 b d)))))) (sort
  (set1
  (tuple2 (set1 (tuple2 a1 b1)) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))))
  (t2tb3504 x))))

(declare-fun tb2t3504 (uni) (set (tuple21 (set (tuple21 a b))
  (tuple21 (tuple21 a c) (tuple21 b d)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a b)) (tuple21 (tuple21 a c)
  (tuple21 b d))))))
  (! (= (tb2t3504 (t2tb3504 i)) i) :pattern ((t2tb3504 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (tuple2 (set1 (tuple2 a1 b1)) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))))
     j) (= (t2tb3504 (tb2t3504 j)) j)) :pattern ((t2tb3504 (tb2t3504 j))) )))

(declare-fun t2tb3505 ((tuple21 (set (tuple21 a b)) (tuple21 (tuple21 a c)
  (tuple21 b d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a b)) (tuple21 (tuple21 a c) (tuple21 b
  d))))) (sort
  (tuple2 (set1 (tuple2 a1 b1)) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
  (t2tb3505 x))))

(declare-fun tb2t3505 (uni) (tuple21 (set (tuple21 a b)) (tuple21 (tuple21 a
  c) (tuple21 b d))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a b)) (tuple21 (tuple21 a c) (tuple21 b
  d))))) (! (= (tb2t3505 (t2tb3505 i)) i) :pattern ((t2tb3505 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (tuple2 (set1 (tuple2 a1 b1)) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))) j)
     (= (t2tb3505 (tb2t3505 j)) j)) :pattern ((t2tb3505 (tb2t3505 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set (tuple21 (tuple21 a c)
  (tuple21 b d)))) (x (set (tuple21 a b))) (y (tuple21 (tuple21 a c)
  (tuple21 b d))))
  (= (mem
  (tuple2 (set1 (tuple2 a1 b1)) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
  (Tuple2 (set1 (tuple2 a1 b1)) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))
  (t2tb11 x) (t2tb691 y))
  (times (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (set1 (tuple2 a1 b1))
  (t2tb10 s) (t2tb686 t))) (and (mem4 x s) (mem24 y t)))))

(declare-fun t2tb3506 ((set (tuple21 (set (tuple21 a b)) (set (tuple21 c
  d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a b)) (set (tuple21 c d)))))) (sort
  (set1 (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 c1 d1)))) (t2tb3506 x))))

(declare-fun tb2t3506 (uni) (set (tuple21 (set (tuple21 a b)) (set (tuple21 c
  d)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a b)) (set (tuple21 c d))))))
  (! (= (tb2t3506 (t2tb3506 i)) i) :pattern ((t2tb3506 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 c1 d1)))) j)
     (= (t2tb3506 (tb2t3506 j)) j)) :pattern ((t2tb3506 (tb2t3506 j))) )))

(declare-fun t2tb3507 ((tuple21 (set (tuple21 a b)) (set (tuple21 c
  d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a b)) (set (tuple21 c d))))) (sort
  (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 c1 d1))) (t2tb3507 x))))

(declare-fun tb2t3507 (uni) (tuple21 (set (tuple21 a b)) (set (tuple21 c
  d))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a b)) (set (tuple21 c d)))))
  (! (= (tb2t3507 (t2tb3507 i)) i) :pattern ((t2tb3507 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 c1 d1))) j)
     (= (t2tb3507 (tb2t3507 j)) j)) :pattern ((t2tb3507 (tb2t3507 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set (set (tuple21 c d))))
  (x (set (tuple21 a b))) (y (set (tuple21 c d))))
  (= (mem (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 c1 d1)))
  (Tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 c1 d1)) (t2tb11 x) (t2tb689 y))
  (times (set1 (tuple2 c1 d1)) (set1 (tuple2 a1 b1)) (t2tb10 s) (t2tb688 t)))
  (and (mem4 x s) (mem22 y t)))))

(declare-fun t2tb3508 ((set (tuple21 (set (tuple21 a b)) (tuple21 c
  d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a b)) (tuple21 c d))))) (sort
  (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 c1 d1))) (t2tb3508 x))))

(declare-fun tb2t3508 (uni) (set (tuple21 (set (tuple21 a b)) (tuple21 c
  d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a b)) (tuple21 c d)))))
  (! (= (tb2t3508 (t2tb3508 i)) i) :pattern ((t2tb3508 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 c1 d1))) j)
     (= (t2tb3508 (tb2t3508 j)) j)) :pattern ((t2tb3508 (tb2t3508 j))) )))

(declare-fun t2tb3509 ((tuple21 (set (tuple21 a b)) (tuple21 c d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a b)) (tuple21 c d)))) (sort
  (tuple2 (set1 (tuple2 a1 b1)) (tuple2 c1 d1)) (t2tb3509 x))))

(declare-fun tb2t3509 (uni) (tuple21 (set (tuple21 a b)) (tuple21 c d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a b)) (tuple21 c d))))
  (! (= (tb2t3509 (t2tb3509 i)) i) :pattern ((t2tb3509 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 a1 b1)) (tuple2 c1 d1)) j)
     (= (t2tb3509 (tb2t3509 j)) j)) :pattern ((t2tb3509 (tb2t3509 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set (tuple21 c d)))
  (x (set (tuple21 a b))) (y (tuple21 c d)))
  (= (mem (tuple2 (set1 (tuple2 a1 b1)) (tuple2 c1 d1))
  (Tuple2 (set1 (tuple2 a1 b1)) (tuple2 c1 d1) (t2tb11 x) (t2tb693 y))
  (times (tuple2 c1 d1) (set1 (tuple2 a1 b1)) (t2tb10 s) (t2tb689 t)))
  (and (mem4 x s) (mem21 y t)))))

(declare-fun t2tb869 ((set (tuple21 (set (tuple21 a b)) d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a b)) d)))) (sort
  (set1 (tuple2 (set1 (tuple2 a1 b1)) d1)) (t2tb869 x))))

(declare-fun tb2t869 (uni) (set (tuple21 (set (tuple21 a b)) d)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a b)) d))))
  (! (= (tb2t869 (t2tb869 i)) i) :pattern ((t2tb869 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 a1 b1)) d1)) j)
     (= (t2tb869 (tb2t869 j)) j)) :pattern ((t2tb869 (tb2t869 j))) )))

(declare-fun t2tb870 ((tuple21 (set (tuple21 a b)) d)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a b)) d))) (sort
  (tuple2 (set1 (tuple2 a1 b1)) d1) (t2tb870 x))))

(declare-fun tb2t870 (uni) (tuple21 (set (tuple21 a b)) d))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a b)) d)))
  (! (= (tb2t870 (t2tb870 i)) i) :pattern ((t2tb870 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 a1 b1)) d1) j)
     (= (t2tb870 (tb2t870 j)) j)) :pattern ((t2tb870 (tb2t870 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set d)) (x (set (tuple21 a b)))
  (y d))
  (= (mem (tuple2 (set1 (tuple2 a1 b1)) d1)
  (Tuple2 (set1 (tuple2 a1 b1)) d1 (t2tb11 x) (t2tb694 y))
  (times d1 (set1 (tuple2 a1 b1)) (t2tb10 s) (t2tb690 t)))
  (and (mem4 x s) (mem20 y t)))))

(declare-fun t2tb234 ((set (tuple21 (set (tuple21 a b)) c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a b)) c)))) (sort
  (set1 (tuple2 (set1 (tuple2 a1 b1)) c1)) (t2tb234 x))))

(declare-fun tb2t234 (uni) (set (tuple21 (set (tuple21 a b)) c)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a b)) c))))
  (! (= (tb2t234 (t2tb234 i)) i) :pattern ((t2tb234 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 a1 b1)) c1)) j)
     (= (t2tb234 (tb2t234 j)) j)) :pattern ((t2tb234 (tb2t234 j))) )))

(declare-fun t2tb235 ((tuple21 (set (tuple21 a b)) c)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a b)) c))) (sort
  (tuple2 (set1 (tuple2 a1 b1)) c1) (t2tb235 x))))

(declare-fun tb2t235 (uni) (tuple21 (set (tuple21 a b)) c))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a b)) c)))
  (! (= (tb2t235 (t2tb235 i)) i) :pattern ((t2tb235 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 a1 b1)) c1) j)
     (= (t2tb235 (tb2t235 j)) j)) :pattern ((t2tb235 (tb2t235 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set c)) (x (set (tuple21 a b)))
  (y c))
  (= (mem (tuple2 (set1 (tuple2 a1 b1)) c1)
  (Tuple2 (set1 (tuple2 a1 b1)) c1 (t2tb11 x) (t2tb135 y))
  (times c1 (set1 (tuple2 a1 b1)) (t2tb10 s) (t2tb132 t)))
  (and (mem4 x s) (mem7 y t)))))

(declare-fun t2tb15 ((set (tuple21 (set (tuple21 a b)) (set (tuple21 a
  b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a b)) (set (tuple21 a b)))))) (sort
  (set1 (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1)))) (t2tb15 x))))

(declare-fun tb2t15 (uni) (set (tuple21 (set (tuple21 a b)) (set (tuple21 a
  b)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a b)) (set (tuple21 a b))))))
  (! (= (tb2t15 (t2tb15 i)) i) :pattern ((t2tb15 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1)))) j)
     (= (t2tb15 (tb2t15 j)) j)) :pattern ((t2tb15 (tb2t15 j))) )))

(declare-fun t2tb16 ((tuple21 (set (tuple21 a b)) (set (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a b)) (set (tuple21 a b))))) (sort
  (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1))) (t2tb16 x))))

(declare-fun tb2t16 (uni) (tuple21 (set (tuple21 a b)) (set (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a b)) (set (tuple21 a b)))))
  (! (= (tb2t16 (t2tb16 i)) i) :pattern ((t2tb16 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1))) j)
     (= (t2tb16 (tb2t16 j)) j)) :pattern ((t2tb16 (tb2t16 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set (set (tuple21 a b))))
  (x (set (tuple21 a b))) (y (set (tuple21 a b))))
  (= (mem (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1)))
  (Tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1)) (t2tb11 x) (t2tb11 y))
  (times (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1)) (t2tb10 s) (t2tb10 t)))
  (and (mem4 x s) (mem4 y t)))))

(declare-fun t2tb17 ((set (tuple21 (set (tuple21 a b)) (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a b)) (tuple21 a b))))) (sort
  (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 b1))) (t2tb17 x))))

(declare-fun tb2t17 (uni) (set (tuple21 (set (tuple21 a b)) (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a b)) (tuple21 a b)))))
  (! (= (tb2t17 (t2tb17 i)) i) :pattern ((t2tb17 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 b1))) j)
     (= (t2tb17 (tb2t17 j)) j)) :pattern ((t2tb17 (tb2t17 j))) )))

(declare-fun t2tb18 ((tuple21 (set (tuple21 a b)) (tuple21 a b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a b)) (tuple21 a b)))) (sort
  (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 b1)) (t2tb18 x))))

(declare-fun tb2t18 (uni) (tuple21 (set (tuple21 a b)) (tuple21 a b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a b)) (tuple21 a b))))
  (! (= (tb2t18 (t2tb18 i)) i) :pattern ((t2tb18 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 b1)) j)
     (= (t2tb18 (tb2t18 j)) j)) :pattern ((t2tb18 (tb2t18 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set (tuple21 a b)))
  (x (set (tuple21 a b))) (y (tuple21 a b)))
  (= (mem (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 b1))
  (Tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 b1) (t2tb11 x) (t2tb13 y))
  (times (tuple2 a1 b1) (set1 (tuple2 a1 b1)) (t2tb10 s) (t2tb11 t)))
  (and (mem4 x s) (mem3 y t)))))

(declare-fun t2tb19 ((set (tuple21 (set (tuple21 a b)) b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a b)) b)))) (sort
  (set1 (tuple2 (set1 (tuple2 a1 b1)) b1)) (t2tb19 x))))

(declare-fun tb2t19 (uni) (set (tuple21 (set (tuple21 a b)) b)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a b)) b))))
  (! (= (tb2t19 (t2tb19 i)) i) :pattern ((t2tb19 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 a1 b1)) b1)) j)
     (= (t2tb19 (tb2t19 j)) j)) :pattern ((t2tb19 (tb2t19 j))) )))

(declare-fun t2tb20 ((tuple21 (set (tuple21 a b)) b)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a b)) b))) (sort
  (tuple2 (set1 (tuple2 a1 b1)) b1) (t2tb20 x))))

(declare-fun tb2t20 (uni) (tuple21 (set (tuple21 a b)) b))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a b)) b)))
  (! (= (tb2t20 (t2tb20 i)) i) :pattern ((t2tb20 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 a1 b1)) b1) j)
     (= (t2tb20 (tb2t20 j)) j)) :pattern ((t2tb20 (tb2t20 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set b)) (x (set (tuple21 a b)))
  (y b))
  (= (mem (tuple2 (set1 (tuple2 a1 b1)) b1)
  (Tuple2 (set1 (tuple2 a1 b1)) b1 (t2tb11 x) (t2tb14 y))
  (times b1 (set1 (tuple2 a1 b1)) (t2tb10 s) (t2tb12 t)))
  (and (mem4 x s) (mem2 y t)))))

(declare-fun t2tb21 ((tuple21 (set (tuple21 a b)) a)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a b)) a))) (sort
  (tuple2 (set1 (tuple2 a1 b1)) a1) (t2tb21 x))))

(declare-fun tb2t21 (uni) (tuple21 (set (tuple21 a b)) a))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a b)) a)))
  (! (= (tb2t21 (t2tb21 i)) i) :pattern ((t2tb21 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 a1 b1)) a1) j)
     (= (t2tb21 (tb2t21 j)) j)) :pattern ((t2tb21 (tb2t21 j))) )))

(declare-fun t2tb22 ((set (tuple21 (set (tuple21 a b)) a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a b)) a)))) (sort
  (set1 (tuple2 (set1 (tuple2 a1 b1)) a1)) (t2tb22 x))))

(declare-fun tb2t22 (uni) (set (tuple21 (set (tuple21 a b)) a)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a b)) a))))
  (! (= (tb2t22 (t2tb22 i)) i) :pattern ((t2tb22 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 a1 b1)) a1)) j)
     (= (t2tb22 (tb2t22 j)) j)) :pattern ((t2tb22 (tb2t22 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set a)) (x (set (tuple21 a b)))
  (y a))
  (= (mem (tuple2 (set1 (tuple2 a1 b1)) a1)
  (Tuple2 (set1 (tuple2 a1 b1)) a1 (t2tb11 x) (t2tb2 y))
  (times a1 (set1 (tuple2 a1 b1)) (t2tb10 s) (t2tb1 t)))
  (and (mem4 x s) (mem1 y t)))))

;; mem_times
  (assert
  (forall ((b2 ty))
  (forall ((s (set (set (tuple21 a b)))) (t uni) (x (set (tuple21 a b)))
  (y uni))
  (= (mem (tuple2 (set1 (tuple2 a1 b1)) b2)
  (Tuple2 (set1 (tuple2 a1 b1)) b2 (t2tb11 x) y)
  (times b2 (set1 (tuple2 a1 b1)) (t2tb10 s) t))
  (and (mem4 x s) (mem b2 y t))))))

(declare-fun t2tb3510 ((set (tuple21 (tuple21 a b) (tuple21 c f)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) (tuple21 c f))))) (sort
  (set1 (tuple2 (tuple2 a1 b1) (tuple2 c1 f1))) (t2tb3510 x))))

(declare-fun tb2t3510 (uni) (set (tuple21 (tuple21 a b) (tuple21 c f))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a b) (tuple21 c f)))))
  (! (= (tb2t3510 (t2tb3510 i)) i) :pattern ((t2tb3510 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 b1) (tuple2 c1 f1))) j)
     (= (t2tb3510 (tb2t3510 j)) j)) :pattern ((t2tb3510 (tb2t3510 j))) )))

(declare-fun t2tb3511 ((tuple21 (tuple21 a b) (tuple21 c f))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a b) (tuple21 c f)))) (sort
  (tuple2 (tuple2 a1 b1) (tuple2 c1 f1)) (t2tb3511 x))))

(declare-fun tb2t3511 (uni) (tuple21 (tuple21 a b) (tuple21 c f)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a b) (tuple21 c f))))
  (! (= (tb2t3511 (t2tb3511 i)) i) :pattern ((t2tb3511 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 b1) (tuple2 c1 f1)) j)
     (= (t2tb3511 (tb2t3511 j)) j)) :pattern ((t2tb3511 (tb2t3511 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (tuple21 c f))) (x (tuple21 a b))
  (y (tuple21 c f)))
  (= (mem (tuple2 (tuple2 a1 b1) (tuple2 c1 f1))
  (Tuple2 (tuple2 a1 b1) (tuple2 c1 f1) (t2tb13 x) (t2tb2948 y))
  (times (tuple2 c1 f1) (tuple2 a1 b1) (t2tb11 s) (t2tb2942 t)))
  (and (mem3 x s) (mem45 y t)))))

(declare-fun t2tb3512 ((set (tuple21 (tuple21 a b) (tuple21 a e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) (tuple21 a e))))) (sort
  (set1 (tuple2 (tuple2 a1 b1) (tuple2 a1 e1))) (t2tb3512 x))))

(declare-fun tb2t3512 (uni) (set (tuple21 (tuple21 a b) (tuple21 a e))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a b) (tuple21 a e)))))
  (! (= (tb2t3512 (t2tb3512 i)) i) :pattern ((t2tb3512 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 b1) (tuple2 a1 e1))) j)
     (= (t2tb3512 (tb2t3512 j)) j)) :pattern ((t2tb3512 (tb2t3512 j))) )))

(declare-fun t2tb3513 ((tuple21 (tuple21 a b) (tuple21 a e))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a b) (tuple21 a e)))) (sort
  (tuple2 (tuple2 a1 b1) (tuple2 a1 e1)) (t2tb3513 x))))

(declare-fun tb2t3513 (uni) (tuple21 (tuple21 a b) (tuple21 a e)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a b) (tuple21 a e))))
  (! (= (tb2t3513 (t2tb3513 i)) i) :pattern ((t2tb3513 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 b1) (tuple2 a1 e1)) j)
     (= (t2tb3513 (tb2t3513 j)) j)) :pattern ((t2tb3513 (tb2t3513 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (tuple21 a e))) (x (tuple21 a b))
  (y (tuple21 a e)))
  (= (mem (tuple2 (tuple2 a1 b1) (tuple2 a1 e1))
  (Tuple2 (tuple2 a1 b1) (tuple2 a1 e1) (t2tb13 x) (t2tb2949 y))
  (times (tuple2 a1 e1) (tuple2 a1 b1) (t2tb11 s) (t2tb2943 t)))
  (and (mem3 x s) (mem44 y t)))))

(declare-fun t2tb3514 ((tuple21 (tuple21 a b) (tuple21 (tuple21 b d)
  (tuple21 e f)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a b) (tuple21 (tuple21 b d) (tuple21 e f)))))
  (sort (tuple2 (tuple2 a1 b1) (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)))
  (t2tb3514 x))))

(declare-fun tb2t3514 (uni) (tuple21 (tuple21 a b) (tuple21 (tuple21 b d)
  (tuple21 e f))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a b) (tuple21 (tuple21 b d) (tuple21 e f)))))
  (! (= (tb2t3514 (t2tb3514 i)) i) :pattern ((t2tb3514 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 b1) (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)))
     j) (= (t2tb3514 (tb2t3514 j)) j)) :pattern ((t2tb3514 (tb2t3514 j))) )))

(declare-fun t2tb3515 ((set (tuple21 (tuple21 a b) (tuple21 (tuple21 b d)
  (tuple21 e f))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) (tuple21 (tuple21 b d) (tuple21 e
  f)))))) (sort
  (set1 (tuple2 (tuple2 a1 b1) (tuple2 (tuple2 b1 d1) (tuple2 e1 f1))))
  (t2tb3515 x))))

(declare-fun tb2t3515 (uni) (set (tuple21 (tuple21 a b) (tuple21 (tuple21 b
  d) (tuple21 e f)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a b) (tuple21 (tuple21 b d) (tuple21 e
  f)))))) (! (= (tb2t3515 (t2tb3515 i)) i) :pattern ((t2tb3515 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 a1 b1) (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)))) j)
     (= (t2tb3515 (tb2t3515 j)) j)) :pattern ((t2tb3515 (tb2t3515 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (tuple21 (tuple21 b d) (tuple21 e
  f)))) (x (tuple21 a b)) (y (tuple21 (tuple21 b d) (tuple21 e f))))
  (= (mem (tuple2 (tuple2 a1 b1) (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)))
  (Tuple2 (tuple2 a1 b1) (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (t2tb13 x)
  (t2tb2950 y))
  (times (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (tuple2 a1 b1) (t2tb11 s)
  (t2tb2944 t))) (and (mem3 x s) (mem43 y t)))))

(declare-fun t2tb3516 ((set (tuple21 (tuple21 a b) (tuple21 (tuple21 a c)
  (tuple21 e f))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) (tuple21 (tuple21 a c) (tuple21 e
  f)))))) (sort
  (set1 (tuple2 (tuple2 a1 b1) (tuple2 (tuple2 a1 c1) (tuple2 e1 f1))))
  (t2tb3516 x))))

(declare-fun tb2t3516 (uni) (set (tuple21 (tuple21 a b) (tuple21 (tuple21 a
  c) (tuple21 e f)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a b) (tuple21 (tuple21 a c) (tuple21 e
  f)))))) (! (= (tb2t3516 (t2tb3516 i)) i) :pattern ((t2tb3516 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 a1 b1) (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)))) j)
     (= (t2tb3516 (tb2t3516 j)) j)) :pattern ((t2tb3516 (tb2t3516 j))) )))

(declare-fun t2tb3517 ((tuple21 (tuple21 a b) (tuple21 (tuple21 a c)
  (tuple21 e f)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a b) (tuple21 (tuple21 a c) (tuple21 e f)))))
  (sort (tuple2 (tuple2 a1 b1) (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)))
  (t2tb3517 x))))

(declare-fun tb2t3517 (uni) (tuple21 (tuple21 a b) (tuple21 (tuple21 a c)
  (tuple21 e f))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a b) (tuple21 (tuple21 a c) (tuple21 e f)))))
  (! (= (tb2t3517 (t2tb3517 i)) i) :pattern ((t2tb3517 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 b1) (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)))
     j) (= (t2tb3517 (tb2t3517 j)) j)) :pattern ((t2tb3517 (tb2t3517 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (tuple21 (tuple21 a c) (tuple21 e
  f)))) (x (tuple21 a b)) (y (tuple21 (tuple21 a c) (tuple21 e f))))
  (= (mem (tuple2 (tuple2 a1 b1) (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)))
  (Tuple2 (tuple2 a1 b1) (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (t2tb13 x)
  (t2tb2951 y))
  (times (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (tuple2 a1 b1) (t2tb11 s)
  (t2tb2945 t))) (and (mem3 x s) (mem42 y t)))))

(declare-fun t2tb3518 ((set (tuple21 (tuple21 a b) (set (tuple21 d
  f))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) (set (tuple21 d f)))))) (sort
  (set1 (tuple2 (tuple2 a1 b1) (set1 (tuple2 d1 f1)))) (t2tb3518 x))))

(declare-fun tb2t3518 (uni) (set (tuple21 (tuple21 a b) (set (tuple21 d
  f)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a b) (set (tuple21 d f))))))
  (! (= (tb2t3518 (t2tb3518 i)) i) :pattern ((t2tb3518 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 b1) (set1 (tuple2 d1 f1)))) j)
     (= (t2tb3518 (tb2t3518 j)) j)) :pattern ((t2tb3518 (tb2t3518 j))) )))

(declare-fun t2tb3519 ((tuple21 (tuple21 a b) (set (tuple21 d f)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a b) (set (tuple21 d f))))) (sort
  (tuple2 (tuple2 a1 b1) (set1 (tuple2 d1 f1))) (t2tb3519 x))))

(declare-fun tb2t3519 (uni) (tuple21 (tuple21 a b) (set (tuple21 d f))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a b) (set (tuple21 d f)))))
  (! (= (tb2t3519 (t2tb3519 i)) i) :pattern ((t2tb3519 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 b1) (set1 (tuple2 d1 f1))) j)
     (= (t2tb3519 (tb2t3519 j)) j)) :pattern ((t2tb3519 (tb2t3519 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (set (tuple21 d f))))
  (x (tuple21 a b)) (y (set (tuple21 d f))))
  (= (mem (tuple2 (tuple2 a1 b1) (set1 (tuple2 d1 f1)))
  (Tuple2 (tuple2 a1 b1) (set1 (tuple2 d1 f1)) (t2tb13 x) (t2tb2938 y))
  (times (set1 (tuple2 d1 f1)) (tuple2 a1 b1) (t2tb11 s) (t2tb2939 t)))
  (and (mem3 x s) (mem41 y t)))))

(declare-fun t2tb3520 ((set (tuple21 (tuple21 a b) (tuple21 d f)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) (tuple21 d f))))) (sort
  (set1 (tuple2 (tuple2 a1 b1) (tuple2 d1 f1))) (t2tb3520 x))))

(declare-fun tb2t3520 (uni) (set (tuple21 (tuple21 a b) (tuple21 d f))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a b) (tuple21 d f)))))
  (! (= (tb2t3520 (t2tb3520 i)) i) :pattern ((t2tb3520 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 b1) (tuple2 d1 f1))) j)
     (= (t2tb3520 (tb2t3520 j)) j)) :pattern ((t2tb3520 (tb2t3520 j))) )))

(declare-fun t2tb3521 ((tuple21 (tuple21 a b) (tuple21 d f))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a b) (tuple21 d f)))) (sort
  (tuple2 (tuple2 a1 b1) (tuple2 d1 f1)) (t2tb3521 x))))

(declare-fun tb2t3521 (uni) (tuple21 (tuple21 a b) (tuple21 d f)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a b) (tuple21 d f))))
  (! (= (tb2t3521 (t2tb3521 i)) i) :pattern ((t2tb3521 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 b1) (tuple2 d1 f1)) j)
     (= (t2tb3521 (tb2t3521 j)) j)) :pattern ((t2tb3521 (tb2t3521 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (tuple21 d f))) (x (tuple21 a b))
  (y (tuple21 d f)))
  (= (mem (tuple2 (tuple2 a1 b1) (tuple2 d1 f1))
  (Tuple2 (tuple2 a1 b1) (tuple2 d1 f1) (t2tb13 x) (t2tb2952 y))
  (times (tuple2 d1 f1) (tuple2 a1 b1) (t2tb11 s) (t2tb2938 t)))
  (and (mem3 x s) (mem40 y t)))))

(declare-fun t2tb3522 ((set (tuple21 (tuple21 a b) (set (tuple21 b
  e))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) (set (tuple21 b e)))))) (sort
  (set1 (tuple2 (tuple2 a1 b1) (set1 (tuple2 b1 e1)))) (t2tb3522 x))))

(declare-fun tb2t3522 (uni) (set (tuple21 (tuple21 a b) (set (tuple21 b
  e)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a b) (set (tuple21 b e))))))
  (! (= (tb2t3522 (t2tb3522 i)) i) :pattern ((t2tb3522 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 b1) (set1 (tuple2 b1 e1)))) j)
     (= (t2tb3522 (tb2t3522 j)) j)) :pattern ((t2tb3522 (tb2t3522 j))) )))

(declare-fun t2tb3523 ((tuple21 (tuple21 a b) (set (tuple21 b e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a b) (set (tuple21 b e))))) (sort
  (tuple2 (tuple2 a1 b1) (set1 (tuple2 b1 e1))) (t2tb3523 x))))

(declare-fun tb2t3523 (uni) (tuple21 (tuple21 a b) (set (tuple21 b e))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a b) (set (tuple21 b e)))))
  (! (= (tb2t3523 (t2tb3523 i)) i) :pattern ((t2tb3523 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 b1) (set1 (tuple2 b1 e1))) j)
     (= (t2tb3523 (tb2t3523 j)) j)) :pattern ((t2tb3523 (tb2t3523 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (set (tuple21 b e))))
  (x (tuple21 a b)) (y (set (tuple21 b e))))
  (= (mem (tuple2 (tuple2 a1 b1) (set1 (tuple2 b1 e1)))
  (Tuple2 (tuple2 a1 b1) (set1 (tuple2 b1 e1)) (t2tb13 x) (t2tb2940 y))
  (times (set1 (tuple2 b1 e1)) (tuple2 a1 b1) (t2tb11 s) (t2tb2941 t)))
  (and (mem3 x s) (mem39 y t)))))

(declare-fun t2tb3524 ((set (tuple21 (tuple21 a b) (tuple21 b e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) (tuple21 b e))))) (sort
  (set1 (tuple2 (tuple2 a1 b1) (tuple2 b1 e1))) (t2tb3524 x))))

(declare-fun tb2t3524 (uni) (set (tuple21 (tuple21 a b) (tuple21 b e))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a b) (tuple21 b e)))))
  (! (= (tb2t3524 (t2tb3524 i)) i) :pattern ((t2tb3524 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 b1) (tuple2 b1 e1))) j)
     (= (t2tb3524 (tb2t3524 j)) j)) :pattern ((t2tb3524 (tb2t3524 j))) )))

(declare-fun t2tb3525 ((tuple21 (tuple21 a b) (tuple21 b e))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a b) (tuple21 b e)))) (sort
  (tuple2 (tuple2 a1 b1) (tuple2 b1 e1)) (t2tb3525 x))))

(declare-fun tb2t3525 (uni) (tuple21 (tuple21 a b) (tuple21 b e)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a b) (tuple21 b e))))
  (! (= (tb2t3525 (t2tb3525 i)) i) :pattern ((t2tb3525 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 b1) (tuple2 b1 e1)) j)
     (= (t2tb3525 (tb2t3525 j)) j)) :pattern ((t2tb3525 (tb2t3525 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (tuple21 b e))) (x (tuple21 a b))
  (y (tuple21 b e)))
  (= (mem (tuple2 (tuple2 a1 b1) (tuple2 b1 e1))
  (Tuple2 (tuple2 a1 b1) (tuple2 b1 e1) (t2tb13 x) (t2tb2953 y))
  (times (tuple2 b1 e1) (tuple2 a1 b1) (t2tb11 s) (t2tb2940 t)))
  (and (mem3 x s) (mem38 y t)))))

(declare-fun t2tb3526 ((set (tuple21 (tuple21 a b) f))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) f)))) (sort
  (set1 (tuple2 (tuple2 a1 b1) f1)) (t2tb3526 x))))

(declare-fun tb2t3526 (uni) (set (tuple21 (tuple21 a b) f)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a b) f))))
  (! (= (tb2t3526 (t2tb3526 i)) i) :pattern ((t2tb3526 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 b1) f1)) j)
     (= (t2tb3526 (tb2t3526 j)) j)) :pattern ((t2tb3526 (tb2t3526 j))) )))

(declare-fun t2tb3527 ((tuple21 (tuple21 a b) f)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a b) f))) (sort (tuple2 (tuple2 a1 b1) f1)
  (t2tb3527 x))))

(declare-fun tb2t3527 (uni) (tuple21 (tuple21 a b) f))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a b) f)))
  (! (= (tb2t3527 (t2tb3527 i)) i) :pattern ((t2tb3527 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 b1) f1) j) (= (t2tb3527 (tb2t3527 j)) j)) :pattern (
  (t2tb3527 (tb2t3527 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a b))) (t (set f)) (x (tuple21 a b)) (y f))
  (= (mem (tuple2 (tuple2 a1 b1) f1)
  (Tuple2 (tuple2 a1 b1) f1 (t2tb13 x) (t2tb2954 y))
  (times f1 (tuple2 a1 b1) (t2tb11 s) (t2tb2946 t)))
  (and (mem3 x s) (mem37 y t)))))

(declare-fun t2tb3528 ((set (tuple21 (tuple21 a b) e))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) e)))) (sort
  (set1 (tuple2 (tuple2 a1 b1) e1)) (t2tb3528 x))))

(declare-fun tb2t3528 (uni) (set (tuple21 (tuple21 a b) e)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a b) e))))
  (! (= (tb2t3528 (t2tb3528 i)) i) :pattern ((t2tb3528 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 b1) e1)) j)
     (= (t2tb3528 (tb2t3528 j)) j)) :pattern ((t2tb3528 (tb2t3528 j))) )))

(declare-fun t2tb3529 ((tuple21 (tuple21 a b) e)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a b) e))) (sort (tuple2 (tuple2 a1 b1) e1)
  (t2tb3529 x))))

(declare-fun tb2t3529 (uni) (tuple21 (tuple21 a b) e))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a b) e)))
  (! (= (tb2t3529 (t2tb3529 i)) i) :pattern ((t2tb3529 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 b1) e1) j) (= (t2tb3529 (tb2t3529 j)) j)) :pattern (
  (t2tb3529 (tb2t3529 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a b))) (t (set e)) (x (tuple21 a b)) (y e))
  (= (mem (tuple2 (tuple2 a1 b1) e1)
  (Tuple2 (tuple2 a1 b1) e1 (t2tb13 x) (t2tb2955 y))
  (times e1 (tuple2 a1 b1) (t2tb11 s) (t2tb2947 t)))
  (and (mem3 x s) (mem36 y t)))))

(declare-fun t2tb3530 ((tuple21 (tuple21 a b) (tuple21 (tuple21 a c)
  (tuple21 b d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a b) (tuple21 (tuple21 a c) (tuple21 b d)))))
  (sort (tuple2 (tuple2 a1 b1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
  (t2tb3530 x))))

(declare-fun tb2t3530 (uni) (tuple21 (tuple21 a b) (tuple21 (tuple21 a c)
  (tuple21 b d))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a b) (tuple21 (tuple21 a c) (tuple21 b d)))))
  (! (= (tb2t3530 (t2tb3530 i)) i) :pattern ((t2tb3530 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 b1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
     j) (= (t2tb3530 (tb2t3530 j)) j)) :pattern ((t2tb3530 (tb2t3530 j))) )))

(declare-fun t2tb3531 ((set (tuple21 (tuple21 a b) (tuple21 (tuple21 a c)
  (tuple21 b d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) (tuple21 (tuple21 a c) (tuple21 b
  d)))))) (sort
  (set1 (tuple2 (tuple2 a1 b1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))))
  (t2tb3531 x))))

(declare-fun tb2t3531 (uni) (set (tuple21 (tuple21 a b) (tuple21 (tuple21 a
  c) (tuple21 b d)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a b) (tuple21 (tuple21 a c) (tuple21 b
  d)))))) (! (= (tb2t3531 (t2tb3531 i)) i) :pattern ((t2tb3531 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 a1 b1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))) j)
     (= (t2tb3531 (tb2t3531 j)) j)) :pattern ((t2tb3531 (tb2t3531 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (tuple21 (tuple21 a c) (tuple21 b
  d)))) (x (tuple21 a b)) (y (tuple21 (tuple21 a c) (tuple21 b d))))
  (= (mem (tuple2 (tuple2 a1 b1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
  (Tuple2 (tuple2 a1 b1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb13 x)
  (t2tb691 y))
  (times (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 a1 b1) (t2tb11 s)
  (t2tb686 t))) (and (mem3 x s) (mem24 y t)))))

(declare-fun t2tb3532 ((set (tuple21 (tuple21 a b) (set (tuple21 c
  d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) (set (tuple21 c d)))))) (sort
  (set1 (tuple2 (tuple2 a1 b1) (set1 (tuple2 c1 d1)))) (t2tb3532 x))))

(declare-fun tb2t3532 (uni) (set (tuple21 (tuple21 a b) (set (tuple21 c
  d)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a b) (set (tuple21 c d))))))
  (! (= (tb2t3532 (t2tb3532 i)) i) :pattern ((t2tb3532 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 b1) (set1 (tuple2 c1 d1)))) j)
     (= (t2tb3532 (tb2t3532 j)) j)) :pattern ((t2tb3532 (tb2t3532 j))) )))

(declare-fun t2tb3533 ((tuple21 (tuple21 a b) (set (tuple21 c d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a b) (set (tuple21 c d))))) (sort
  (tuple2 (tuple2 a1 b1) (set1 (tuple2 c1 d1))) (t2tb3533 x))))

(declare-fun tb2t3533 (uni) (tuple21 (tuple21 a b) (set (tuple21 c d))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a b) (set (tuple21 c d)))))
  (! (= (tb2t3533 (t2tb3533 i)) i) :pattern ((t2tb3533 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 b1) (set1 (tuple2 c1 d1))) j)
     (= (t2tb3533 (tb2t3533 j)) j)) :pattern ((t2tb3533 (tb2t3533 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (set (tuple21 c d))))
  (x (tuple21 a b)) (y (set (tuple21 c d))))
  (= (mem (tuple2 (tuple2 a1 b1) (set1 (tuple2 c1 d1)))
  (Tuple2 (tuple2 a1 b1) (set1 (tuple2 c1 d1)) (t2tb13 x) (t2tb689 y))
  (times (set1 (tuple2 c1 d1)) (tuple2 a1 b1) (t2tb11 s) (t2tb688 t)))
  (and (mem3 x s) (mem22 y t)))))

(declare-fun t2tb879 ((set (tuple21 (tuple21 a b) (tuple21 c d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) (tuple21 c d))))) (sort
  (set1 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1))) (t2tb879 x))))

(declare-fun tb2t879 (uni) (set (tuple21 (tuple21 a b) (tuple21 c d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a b) (tuple21 c d)))))
  (! (= (tb2t879 (t2tb879 i)) i) :pattern ((t2tb879 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1))) j)
     (= (t2tb879 (tb2t879 j)) j)) :pattern ((t2tb879 (tb2t879 j))) )))

(declare-fun t2tb880 ((tuple21 (tuple21 a b) (tuple21 c d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a b) (tuple21 c d)))) (sort
  (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) (t2tb880 x))))

(declare-fun tb2t880 (uni) (tuple21 (tuple21 a b) (tuple21 c d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a b) (tuple21 c d))))
  (! (= (tb2t880 (t2tb880 i)) i) :pattern ((t2tb880 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) j)
     (= (t2tb880 (tb2t880 j)) j)) :pattern ((t2tb880 (tb2t880 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (tuple21 c d))) (x (tuple21 a b))
  (y (tuple21 c d)))
  (= (mem (tuple2 (tuple2 a1 b1) (tuple2 c1 d1))
  (Tuple2 (tuple2 a1 b1) (tuple2 c1 d1) (t2tb13 x) (t2tb693 y))
  (times (tuple2 c1 d1) (tuple2 a1 b1) (t2tb11 s) (t2tb689 t)))
  (and (mem3 x s) (mem21 y t)))))

(declare-fun t2tb881 ((set (tuple21 (tuple21 a b) d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) d)))) (sort
  (set1 (tuple2 (tuple2 a1 b1) d1)) (t2tb881 x))))

(declare-fun tb2t881 (uni) (set (tuple21 (tuple21 a b) d)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a b) d))))
  (! (= (tb2t881 (t2tb881 i)) i) :pattern ((t2tb881 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 b1) d1)) j)
     (= (t2tb881 (tb2t881 j)) j)) :pattern ((t2tb881 (tb2t881 j))) )))

(declare-fun t2tb882 ((tuple21 (tuple21 a b) d)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a b) d))) (sort (tuple2 (tuple2 a1 b1) d1)
  (t2tb882 x))))

(declare-fun tb2t882 (uni) (tuple21 (tuple21 a b) d))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a b) d)))
  (! (= (tb2t882 (t2tb882 i)) i) :pattern ((t2tb882 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 b1) d1) j) (= (t2tb882 (tb2t882 j)) j)) :pattern (
  (t2tb882 (tb2t882 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a b))) (t (set d)) (x (tuple21 a b)) (y d))
  (= (mem (tuple2 (tuple2 a1 b1) d1)
  (Tuple2 (tuple2 a1 b1) d1 (t2tb13 x) (t2tb694 y))
  (times d1 (tuple2 a1 b1) (t2tb11 s) (t2tb690 t)))
  (and (mem3 x s) (mem20 y t)))))

(declare-fun t2tb244 ((tuple21 (tuple21 a b) c)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a b) c))) (sort (tuple2 (tuple2 a1 b1) c1)
  (t2tb244 x))))

(declare-fun tb2t244 (uni) (tuple21 (tuple21 a b) c))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a b) c)))
  (! (= (tb2t244 (t2tb244 i)) i) :pattern ((t2tb244 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 b1) c1) j) (= (t2tb244 (tb2t244 j)) j)) :pattern (
  (t2tb244 (tb2t244 j))) )))

(declare-fun t2tb245 ((set (tuple21 (tuple21 a b) c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) c)))) (sort
  (set1 (tuple2 (tuple2 a1 b1) c1)) (t2tb245 x))))

(declare-fun tb2t245 (uni) (set (tuple21 (tuple21 a b) c)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a b) c))))
  (! (= (tb2t245 (t2tb245 i)) i) :pattern ((t2tb245 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 b1) c1)) j)
     (= (t2tb245 (tb2t245 j)) j)) :pattern ((t2tb245 (tb2t245 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a b))) (t (set c)) (x (tuple21 a b)) (y c))
  (= (mem (tuple2 (tuple2 a1 b1) c1)
  (Tuple2 (tuple2 a1 b1) c1 (t2tb13 x) (t2tb135 y))
  (times c1 (tuple2 a1 b1) (t2tb11 s) (t2tb132 t)))
  (and (mem3 x s) (mem7 y t)))))

(declare-fun t2tb23 ((set (tuple21 (tuple21 a b) (set (tuple21 a b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) (set (tuple21 a b)))))) (sort
  (set1 (tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 b1)))) (t2tb23 x))))

(declare-fun tb2t23 (uni) (set (tuple21 (tuple21 a b) (set (tuple21 a b)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a b) (set (tuple21 a b))))))
  (! (= (tb2t23 (t2tb23 i)) i) :pattern ((t2tb23 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 b1)))) j)
     (= (t2tb23 (tb2t23 j)) j)) :pattern ((t2tb23 (tb2t23 j))) )))

(declare-fun t2tb24 ((tuple21 (tuple21 a b) (set (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a b) (set (tuple21 a b))))) (sort
  (tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 b1))) (t2tb24 x))))

(declare-fun tb2t24 (uni) (tuple21 (tuple21 a b) (set (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a b) (set (tuple21 a b)))))
  (! (= (tb2t24 (t2tb24 i)) i) :pattern ((t2tb24 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 b1))) j)
     (= (t2tb24 (tb2t24 j)) j)) :pattern ((t2tb24 (tb2t24 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (set (tuple21 a b))))
  (x (tuple21 a b)) (y (set (tuple21 a b))))
  (= (mem (tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 b1)))
  (Tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 b1)) (t2tb13 x) (t2tb11 y))
  (times (set1 (tuple2 a1 b1)) (tuple2 a1 b1) (t2tb11 s) (t2tb10 t)))
  (and (mem3 x s) (mem4 y t)))))

(declare-fun t2tb25 ((set (tuple21 (tuple21 a b) (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) (tuple21 a b))))) (sort
  (set1 (tuple2 (tuple2 a1 b1) (tuple2 a1 b1))) (t2tb25 x))))

(declare-fun tb2t25 (uni) (set (tuple21 (tuple21 a b) (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a b) (tuple21 a b)))))
  (! (= (tb2t25 (t2tb25 i)) i) :pattern ((t2tb25 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 b1) (tuple2 a1 b1))) j)
     (= (t2tb25 (tb2t25 j)) j)) :pattern ((t2tb25 (tb2t25 j))) )))

(declare-fun t2tb26 ((tuple21 (tuple21 a b) (tuple21 a b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a b) (tuple21 a b)))) (sort
  (tuple2 (tuple2 a1 b1) (tuple2 a1 b1)) (t2tb26 x))))

(declare-fun tb2t26 (uni) (tuple21 (tuple21 a b) (tuple21 a b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a b) (tuple21 a b))))
  (! (= (tb2t26 (t2tb26 i)) i) :pattern ((t2tb26 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 b1) (tuple2 a1 b1)) j)
     (= (t2tb26 (tb2t26 j)) j)) :pattern ((t2tb26 (tb2t26 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (tuple21 a b))) (x (tuple21 a b))
  (y (tuple21 a b)))
  (= (mem (tuple2 (tuple2 a1 b1) (tuple2 a1 b1))
  (Tuple2 (tuple2 a1 b1) (tuple2 a1 b1) (t2tb13 x) (t2tb13 y))
  (times (tuple2 a1 b1) (tuple2 a1 b1) (t2tb11 s) (t2tb11 t)))
  (and (mem3 x s) (mem3 y t)))))

(declare-fun t2tb27 ((set (tuple21 (tuple21 a b) b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) b)))) (sort
  (set1 (tuple2 (tuple2 a1 b1) b1)) (t2tb27 x))))

(declare-fun tb2t27 (uni) (set (tuple21 (tuple21 a b) b)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a b) b))))
  (! (= (tb2t27 (t2tb27 i)) i) :pattern ((t2tb27 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 b1) b1)) j)
     (= (t2tb27 (tb2t27 j)) j)) :pattern ((t2tb27 (tb2t27 j))) )))

(declare-fun t2tb28 ((tuple21 (tuple21 a b) b)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a b) b))) (sort (tuple2 (tuple2 a1 b1) b1)
  (t2tb28 x))))

(declare-fun tb2t28 (uni) (tuple21 (tuple21 a b) b))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a b) b)))
  (! (= (tb2t28 (t2tb28 i)) i) :pattern ((t2tb28 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 b1) b1) j) (= (t2tb28 (tb2t28 j)) j)) :pattern (
  (t2tb28 (tb2t28 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a b))) (t (set b)) (x (tuple21 a b)) (y b))
  (= (mem (tuple2 (tuple2 a1 b1) b1)
  (Tuple2 (tuple2 a1 b1) b1 (t2tb13 x) (t2tb14 y))
  (times b1 (tuple2 a1 b1) (t2tb11 s) (t2tb12 t)))
  (and (mem3 x s) (mem2 y t)))))

(declare-fun t2tb29 ((set (tuple21 (tuple21 a b) a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) a)))) (sort
  (set1 (tuple2 (tuple2 a1 b1) a1)) (t2tb29 x))))

(declare-fun tb2t29 (uni) (set (tuple21 (tuple21 a b) a)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a b) a))))
  (! (= (tb2t29 (t2tb29 i)) i) :pattern ((t2tb29 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 b1) a1)) j)
     (= (t2tb29 (tb2t29 j)) j)) :pattern ((t2tb29 (tb2t29 j))) )))

(declare-fun t2tb30 ((tuple21 (tuple21 a b) a)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a b) a))) (sort (tuple2 (tuple2 a1 b1) a1)
  (t2tb30 x))))

(declare-fun tb2t30 (uni) (tuple21 (tuple21 a b) a))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a b) a)))
  (! (= (tb2t30 (t2tb30 i)) i) :pattern ((t2tb30 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 b1) a1) j) (= (t2tb30 (tb2t30 j)) j)) :pattern (
  (t2tb30 (tb2t30 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a b))) (t (set a)) (x (tuple21 a b)) (y a))
  (= (mem (tuple2 (tuple2 a1 b1) a1)
  (Tuple2 (tuple2 a1 b1) a1 (t2tb13 x) (t2tb2 y))
  (times a1 (tuple2 a1 b1) (t2tb11 s) (t2tb1 t)))
  (and (mem3 x s) (mem1 y t)))))

;; mem_times
  (assert
  (forall ((b2 ty))
  (forall ((s (set (tuple21 a b))) (t uni) (x (tuple21 a b)) (y uni))
  (= (mem (tuple2 (tuple2 a1 b1) b2) (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) y)
  (times b2 (tuple2 a1 b1) (t2tb11 s) t)) (and (mem3 x s) (mem b2 y t))))))

(declare-fun t2tb3534 ((set (tuple21 b (tuple21 c f)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 b (tuple21 c f))))) (sort
  (set1 (tuple2 b1 (tuple2 c1 f1))) (t2tb3534 x))))

(declare-fun tb2t3534 (uni) (set (tuple21 b (tuple21 c f))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 b (tuple21 c f)))))
  (! (= (tb2t3534 (t2tb3534 i)) i) :pattern ((t2tb3534 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 b1 (tuple2 c1 f1))) j)
     (= (t2tb3534 (tb2t3534 j)) j)) :pattern ((t2tb3534 (tb2t3534 j))) )))

(declare-fun t2tb3535 ((tuple21 b (tuple21 c f))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 b (tuple21 c f)))) (sort (tuple2 b1 (tuple2 c1 f1))
  (t2tb3535 x))))

(declare-fun tb2t3535 (uni) (tuple21 b (tuple21 c f)))

;; BridgeL
  (assert
  (forall ((i (tuple21 b (tuple21 c f))))
  (! (= (tb2t3535 (t2tb3535 i)) i) :pattern ((t2tb3535 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 b1 (tuple2 c1 f1)) j) (= (t2tb3535 (tb2t3535 j)) j)) :pattern (
  (t2tb3535 (tb2t3535 j))) )))

;; mem_times
  (assert
  (forall ((s (set b)) (t (set (tuple21 c f))) (x b) (y (tuple21 c f)))
  (= (mem (tuple2 b1 (tuple2 c1 f1))
  (Tuple2 b1 (tuple2 c1 f1) (t2tb14 x) (t2tb2948 y))
  (times (tuple2 c1 f1) b1 (t2tb12 s) (t2tb2942 t)))
  (and (mem2 x s) (mem45 y t)))))

(declare-fun t2tb3536 ((set (tuple21 b (tuple21 a e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 b (tuple21 a e))))) (sort
  (set1 (tuple2 b1 (tuple2 a1 e1))) (t2tb3536 x))))

(declare-fun tb2t3536 (uni) (set (tuple21 b (tuple21 a e))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 b (tuple21 a e)))))
  (! (= (tb2t3536 (t2tb3536 i)) i) :pattern ((t2tb3536 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 b1 (tuple2 a1 e1))) j)
     (= (t2tb3536 (tb2t3536 j)) j)) :pattern ((t2tb3536 (tb2t3536 j))) )))

(declare-fun t2tb3537 ((tuple21 b (tuple21 a e))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 b (tuple21 a e)))) (sort (tuple2 b1 (tuple2 a1 e1))
  (t2tb3537 x))))

(declare-fun tb2t3537 (uni) (tuple21 b (tuple21 a e)))

;; BridgeL
  (assert
  (forall ((i (tuple21 b (tuple21 a e))))
  (! (= (tb2t3537 (t2tb3537 i)) i) :pattern ((t2tb3537 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 b1 (tuple2 a1 e1)) j) (= (t2tb3537 (tb2t3537 j)) j)) :pattern (
  (t2tb3537 (tb2t3537 j))) )))

;; mem_times
  (assert
  (forall ((s (set b)) (t (set (tuple21 a e))) (x b) (y (tuple21 a e)))
  (= (mem (tuple2 b1 (tuple2 a1 e1))
  (Tuple2 b1 (tuple2 a1 e1) (t2tb14 x) (t2tb2949 y))
  (times (tuple2 a1 e1) b1 (t2tb12 s) (t2tb2943 t)))
  (and (mem2 x s) (mem44 y t)))))

(declare-fun t2tb3538 ((set (tuple21 b (tuple21 (tuple21 b d) (tuple21 e
  f))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 b (tuple21 (tuple21 b d) (tuple21 e f)))))) (sort
  (set1 (tuple2 b1 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)))) (t2tb3538 x))))

(declare-fun tb2t3538 (uni) (set (tuple21 b (tuple21 (tuple21 b d) (tuple21 e
  f)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 b (tuple21 (tuple21 b d) (tuple21 e f))))))
  (! (= (tb2t3538 (t2tb3538 i)) i) :pattern ((t2tb3538 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 b1 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)))) j)
     (= (t2tb3538 (tb2t3538 j)) j)) :pattern ((t2tb3538 (tb2t3538 j))) )))

(declare-fun t2tb3539 ((tuple21 b (tuple21 (tuple21 b d) (tuple21 e
  f)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 b (tuple21 (tuple21 b d) (tuple21 e f))))) (sort
  (tuple2 b1 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1))) (t2tb3539 x))))

(declare-fun tb2t3539 (uni) (tuple21 b (tuple21 (tuple21 b d) (tuple21 e
  f))))

;; BridgeL
  (assert
  (forall ((i (tuple21 b (tuple21 (tuple21 b d) (tuple21 e f)))))
  (! (= (tb2t3539 (t2tb3539 i)) i) :pattern ((t2tb3539 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 b1 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1))) j)
     (= (t2tb3539 (tb2t3539 j)) j)) :pattern ((t2tb3539 (tb2t3539 j))) )))

;; mem_times
  (assert
  (forall ((s (set b)) (t (set (tuple21 (tuple21 b d) (tuple21 e f)))) (x b)
  (y (tuple21 (tuple21 b d) (tuple21 e f))))
  (= (mem (tuple2 b1 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)))
  (Tuple2 b1 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (t2tb14 x) (t2tb2950 y))
  (times (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) b1 (t2tb12 s) (t2tb2944 t)))
  (and (mem2 x s) (mem43 y t)))))

(declare-fun t2tb3540 ((set (tuple21 b (tuple21 (tuple21 a c) (tuple21 e
  f))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 b (tuple21 (tuple21 a c) (tuple21 e f)))))) (sort
  (set1 (tuple2 b1 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)))) (t2tb3540 x))))

(declare-fun tb2t3540 (uni) (set (tuple21 b (tuple21 (tuple21 a c) (tuple21 e
  f)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 b (tuple21 (tuple21 a c) (tuple21 e f))))))
  (! (= (tb2t3540 (t2tb3540 i)) i) :pattern ((t2tb3540 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 b1 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)))) j)
     (= (t2tb3540 (tb2t3540 j)) j)) :pattern ((t2tb3540 (tb2t3540 j))) )))

(declare-fun t2tb3541 ((tuple21 b (tuple21 (tuple21 a c) (tuple21 e
  f)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 b (tuple21 (tuple21 a c) (tuple21 e f))))) (sort
  (tuple2 b1 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1))) (t2tb3541 x))))

(declare-fun tb2t3541 (uni) (tuple21 b (tuple21 (tuple21 a c) (tuple21 e
  f))))

;; BridgeL
  (assert
  (forall ((i (tuple21 b (tuple21 (tuple21 a c) (tuple21 e f)))))
  (! (= (tb2t3541 (t2tb3541 i)) i) :pattern ((t2tb3541 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 b1 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1))) j)
     (= (t2tb3541 (tb2t3541 j)) j)) :pattern ((t2tb3541 (tb2t3541 j))) )))

;; mem_times
  (assert
  (forall ((s (set b)) (t (set (tuple21 (tuple21 a c) (tuple21 e f)))) (x b)
  (y (tuple21 (tuple21 a c) (tuple21 e f))))
  (= (mem (tuple2 b1 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)))
  (Tuple2 b1 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (t2tb14 x) (t2tb2951 y))
  (times (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) b1 (t2tb12 s) (t2tb2945 t)))
  (and (mem2 x s) (mem42 y t)))))

(declare-fun t2tb3542 ((set (tuple21 b (set (tuple21 d f))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 b (set (tuple21 d f)))))) (sort
  (set1 (tuple2 b1 (set1 (tuple2 d1 f1)))) (t2tb3542 x))))

(declare-fun tb2t3542 (uni) (set (tuple21 b (set (tuple21 d f)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 b (set (tuple21 d f))))))
  (! (= (tb2t3542 (t2tb3542 i)) i) :pattern ((t2tb3542 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 b1 (set1 (tuple2 d1 f1)))) j)
     (= (t2tb3542 (tb2t3542 j)) j)) :pattern ((t2tb3542 (tb2t3542 j))) )))

(declare-fun t2tb3543 ((tuple21 b (set (tuple21 d f)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 b (set (tuple21 d f))))) (sort
  (tuple2 b1 (set1 (tuple2 d1 f1))) (t2tb3543 x))))

(declare-fun tb2t3543 (uni) (tuple21 b (set (tuple21 d f))))

;; BridgeL
  (assert
  (forall ((i (tuple21 b (set (tuple21 d f)))))
  (! (= (tb2t3543 (t2tb3543 i)) i) :pattern ((t2tb3543 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 b1 (set1 (tuple2 d1 f1))) j)
     (= (t2tb3543 (tb2t3543 j)) j)) :pattern ((t2tb3543 (tb2t3543 j))) )))

;; mem_times
  (assert
  (forall ((s (set b)) (t (set (set (tuple21 d f)))) (x b) (y (set (tuple21 d
  f))))
  (= (mem (tuple2 b1 (set1 (tuple2 d1 f1)))
  (Tuple2 b1 (set1 (tuple2 d1 f1)) (t2tb14 x) (t2tb2938 y))
  (times (set1 (tuple2 d1 f1)) b1 (t2tb12 s) (t2tb2939 t)))
  (and (mem2 x s) (mem41 y t)))))

(declare-fun t2tb3544 ((set (tuple21 b (tuple21 d f)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 b (tuple21 d f))))) (sort
  (set1 (tuple2 b1 (tuple2 d1 f1))) (t2tb3544 x))))

(declare-fun tb2t3544 (uni) (set (tuple21 b (tuple21 d f))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 b (tuple21 d f)))))
  (! (= (tb2t3544 (t2tb3544 i)) i) :pattern ((t2tb3544 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 b1 (tuple2 d1 f1))) j)
     (= (t2tb3544 (tb2t3544 j)) j)) :pattern ((t2tb3544 (tb2t3544 j))) )))

(declare-fun t2tb3545 ((tuple21 b (tuple21 d f))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 b (tuple21 d f)))) (sort (tuple2 b1 (tuple2 d1 f1))
  (t2tb3545 x))))

(declare-fun tb2t3545 (uni) (tuple21 b (tuple21 d f)))

;; BridgeL
  (assert
  (forall ((i (tuple21 b (tuple21 d f))))
  (! (= (tb2t3545 (t2tb3545 i)) i) :pattern ((t2tb3545 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 b1 (tuple2 d1 f1)) j) (= (t2tb3545 (tb2t3545 j)) j)) :pattern (
  (t2tb3545 (tb2t3545 j))) )))

;; mem_times
  (assert
  (forall ((s (set b)) (t (set (tuple21 d f))) (x b) (y (tuple21 d f)))
  (= (mem (tuple2 b1 (tuple2 d1 f1))
  (Tuple2 b1 (tuple2 d1 f1) (t2tb14 x) (t2tb2952 y))
  (times (tuple2 d1 f1) b1 (t2tb12 s) (t2tb2938 t)))
  (and (mem2 x s) (mem40 y t)))))

(declare-fun t2tb3546 ((tuple21 b (set (tuple21 b e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 b (set (tuple21 b e))))) (sort
  (tuple2 b1 (set1 (tuple2 b1 e1))) (t2tb3546 x))))

(declare-fun tb2t3546 (uni) (tuple21 b (set (tuple21 b e))))

;; BridgeL
  (assert
  (forall ((i (tuple21 b (set (tuple21 b e)))))
  (! (= (tb2t3546 (t2tb3546 i)) i) :pattern ((t2tb3546 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 b1 (set1 (tuple2 b1 e1))) j)
     (= (t2tb3546 (tb2t3546 j)) j)) :pattern ((t2tb3546 (tb2t3546 j))) )))

(declare-fun t2tb3547 ((set (tuple21 b (set (tuple21 b e))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 b (set (tuple21 b e)))))) (sort
  (set1 (tuple2 b1 (set1 (tuple2 b1 e1)))) (t2tb3547 x))))

(declare-fun tb2t3547 (uni) (set (tuple21 b (set (tuple21 b e)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 b (set (tuple21 b e))))))
  (! (= (tb2t3547 (t2tb3547 i)) i) :pattern ((t2tb3547 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 b1 (set1 (tuple2 b1 e1)))) j)
     (= (t2tb3547 (tb2t3547 j)) j)) :pattern ((t2tb3547 (tb2t3547 j))) )))

;; mem_times
  (assert
  (forall ((s (set b)) (t (set (set (tuple21 b e)))) (x b) (y (set (tuple21 b
  e))))
  (= (mem (tuple2 b1 (set1 (tuple2 b1 e1)))
  (Tuple2 b1 (set1 (tuple2 b1 e1)) (t2tb14 x) (t2tb2940 y))
  (times (set1 (tuple2 b1 e1)) b1 (t2tb12 s) (t2tb2941 t)))
  (and (mem2 x s) (mem39 y t)))))

(declare-fun t2tb3548 ((set (tuple21 b (tuple21 b e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 b (tuple21 b e))))) (sort
  (set1 (tuple2 b1 (tuple2 b1 e1))) (t2tb3548 x))))

(declare-fun tb2t3548 (uni) (set (tuple21 b (tuple21 b e))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 b (tuple21 b e)))))
  (! (= (tb2t3548 (t2tb3548 i)) i) :pattern ((t2tb3548 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 b1 (tuple2 b1 e1))) j)
     (= (t2tb3548 (tb2t3548 j)) j)) :pattern ((t2tb3548 (tb2t3548 j))) )))

(declare-fun t2tb3549 ((tuple21 b (tuple21 b e))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 b (tuple21 b e)))) (sort (tuple2 b1 (tuple2 b1 e1))
  (t2tb3549 x))))

(declare-fun tb2t3549 (uni) (tuple21 b (tuple21 b e)))

;; BridgeL
  (assert
  (forall ((i (tuple21 b (tuple21 b e))))
  (! (= (tb2t3549 (t2tb3549 i)) i) :pattern ((t2tb3549 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 b1 (tuple2 b1 e1)) j) (= (t2tb3549 (tb2t3549 j)) j)) :pattern (
  (t2tb3549 (tb2t3549 j))) )))

;; mem_times
  (assert
  (forall ((s (set b)) (t (set (tuple21 b e))) (x b) (y (tuple21 b e)))
  (= (mem (tuple2 b1 (tuple2 b1 e1))
  (Tuple2 b1 (tuple2 b1 e1) (t2tb14 x) (t2tb2953 y))
  (times (tuple2 b1 e1) b1 (t2tb12 s) (t2tb2940 t)))
  (and (mem2 x s) (mem38 y t)))))

(declare-fun t2tb3550 ((set (tuple21 b f))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 b f)))) (sort (set1 (tuple2 b1 f1))
  (t2tb3550 x))))

(declare-fun tb2t3550 (uni) (set (tuple21 b f)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 b f))))
  (! (= (tb2t3550 (t2tb3550 i)) i) :pattern ((t2tb3550 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 b1 f1)) j) (= (t2tb3550 (tb2t3550 j)) j)) :pattern (
  (t2tb3550 (tb2t3550 j))) )))

(declare-fun t2tb3551 ((tuple21 b f)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 b f))) (sort (tuple2 b1 f1) (t2tb3551 x))))

(declare-fun tb2t3551 (uni) (tuple21 b f))

;; BridgeL
  (assert
  (forall ((i (tuple21 b f)))
  (! (= (tb2t3551 (t2tb3551 i)) i) :pattern ((t2tb3551 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 b1 f1) j) (= (t2tb3551 (tb2t3551 j)) j)) :pattern (
  (t2tb3551 (tb2t3551 j))) )))

;; mem_times
  (assert
  (forall ((s (set b)) (t (set f)) (x b) (y f))
  (= (mem (tuple2 b1 f1) (Tuple2 b1 f1 (t2tb14 x) (t2tb2954 y))
  (times f1 b1 (t2tb12 s) (t2tb2946 t))) (and (mem2 x s) (mem37 y t)))))

;; mem_times
  (assert
  (forall ((s (set b)) (t (set e)) (x b) (y e))
  (= (mem38 (tb2t2953 (Tuple2 b1 e1 (t2tb14 x) (t2tb2955 y)))
  (tb2t2940 (times e1 b1 (t2tb12 s) (t2tb2947 t))))
  (and (mem2 x s) (mem36 y t)))))

(declare-fun t2tb3552 ((set (tuple21 b (tuple21 (tuple21 a c) (tuple21 b
  d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 b (tuple21 (tuple21 a c) (tuple21 b d)))))) (sort
  (set1 (tuple2 b1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))) (t2tb3552 x))))

(declare-fun tb2t3552 (uni) (set (tuple21 b (tuple21 (tuple21 a c) (tuple21 b
  d)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 b (tuple21 (tuple21 a c) (tuple21 b d))))))
  (! (= (tb2t3552 (t2tb3552 i)) i) :pattern ((t2tb3552 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 b1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))) j)
     (= (t2tb3552 (tb2t3552 j)) j)) :pattern ((t2tb3552 (tb2t3552 j))) )))

(declare-fun t2tb3553 ((tuple21 b (tuple21 (tuple21 a c) (tuple21 b
  d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 b (tuple21 (tuple21 a c) (tuple21 b d))))) (sort
  (tuple2 b1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))) (t2tb3553 x))))

(declare-fun tb2t3553 (uni) (tuple21 b (tuple21 (tuple21 a c) (tuple21 b
  d))))

;; BridgeL
  (assert
  (forall ((i (tuple21 b (tuple21 (tuple21 a c) (tuple21 b d)))))
  (! (= (tb2t3553 (t2tb3553 i)) i) :pattern ((t2tb3553 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 b1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))) j)
     (= (t2tb3553 (tb2t3553 j)) j)) :pattern ((t2tb3553 (tb2t3553 j))) )))

;; mem_times
  (assert
  (forall ((s (set b)) (t (set (tuple21 (tuple21 a c) (tuple21 b d)))) (x b)
  (y (tuple21 (tuple21 a c) (tuple21 b d))))
  (= (mem (tuple2 b1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
  (Tuple2 b1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb14 x) (t2tb691 y))
  (times (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) b1 (t2tb12 s) (t2tb686 t)))
  (and (mem2 x s) (mem24 y t)))))

(declare-fun t2tb3554 ((set (tuple21 b (set (tuple21 c d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 b (set (tuple21 c d)))))) (sort
  (set1 (tuple2 b1 (set1 (tuple2 c1 d1)))) (t2tb3554 x))))

(declare-fun tb2t3554 (uni) (set (tuple21 b (set (tuple21 c d)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 b (set (tuple21 c d))))))
  (! (= (tb2t3554 (t2tb3554 i)) i) :pattern ((t2tb3554 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 b1 (set1 (tuple2 c1 d1)))) j)
     (= (t2tb3554 (tb2t3554 j)) j)) :pattern ((t2tb3554 (tb2t3554 j))) )))

(declare-fun t2tb3555 ((tuple21 b (set (tuple21 c d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 b (set (tuple21 c d))))) (sort
  (tuple2 b1 (set1 (tuple2 c1 d1))) (t2tb3555 x))))

(declare-fun tb2t3555 (uni) (tuple21 b (set (tuple21 c d))))

;; BridgeL
  (assert
  (forall ((i (tuple21 b (set (tuple21 c d)))))
  (! (= (tb2t3555 (t2tb3555 i)) i) :pattern ((t2tb3555 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 b1 (set1 (tuple2 c1 d1))) j)
     (= (t2tb3555 (tb2t3555 j)) j)) :pattern ((t2tb3555 (tb2t3555 j))) )))

;; mem_times
  (assert
  (forall ((s (set b)) (t (set (set (tuple21 c d)))) (x b) (y (set (tuple21 c
  d))))
  (= (mem (tuple2 b1 (set1 (tuple2 c1 d1)))
  (Tuple2 b1 (set1 (tuple2 c1 d1)) (t2tb14 x) (t2tb689 y))
  (times (set1 (tuple2 c1 d1)) b1 (t2tb12 s) (t2tb688 t)))
  (and (mem2 x s) (mem22 y t)))))

(declare-fun t2tb891 ((set (tuple21 b (tuple21 c d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 b (tuple21 c d))))) (sort
  (set1 (tuple2 b1 (tuple2 c1 d1))) (t2tb891 x))))

(declare-fun tb2t891 (uni) (set (tuple21 b (tuple21 c d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 b (tuple21 c d)))))
  (! (= (tb2t891 (t2tb891 i)) i) :pattern ((t2tb891 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 b1 (tuple2 c1 d1))) j)
     (= (t2tb891 (tb2t891 j)) j)) :pattern ((t2tb891 (tb2t891 j))) )))

(declare-fun t2tb892 ((tuple21 b (tuple21 c d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 b (tuple21 c d)))) (sort (tuple2 b1 (tuple2 c1 d1))
  (t2tb892 x))))

(declare-fun tb2t892 (uni) (tuple21 b (tuple21 c d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 b (tuple21 c d))))
  (! (= (tb2t892 (t2tb892 i)) i) :pattern ((t2tb892 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 b1 (tuple2 c1 d1)) j) (= (t2tb892 (tb2t892 j)) j)) :pattern (
  (t2tb892 (tb2t892 j))) )))

;; mem_times
  (assert
  (forall ((s (set b)) (t (set (tuple21 c d))) (x b) (y (tuple21 c d)))
  (= (mem (tuple2 b1 (tuple2 c1 d1))
  (Tuple2 b1 (tuple2 c1 d1) (t2tb14 x) (t2tb693 y))
  (times (tuple2 c1 d1) b1 (t2tb12 s) (t2tb689 t)))
  (and (mem2 x s) (mem21 y t)))))

;; mem_times
  (assert
  (forall ((s (set b)) (t (set d)) (x b) (y d))
  (= (mem (tuple2 b1 d1) (Tuple2 b1 d1 (t2tb14 x) (t2tb694 y))
  (times d1 b1 (t2tb12 s) (t2tb690 t))) (and (mem2 x s) (mem20 y t)))))

(declare-fun t2tb131 ((set (tuple21 b c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 b c)))) (sort (set1 (tuple2 b1 c1)) (t2tb131 x))))

(declare-fun tb2t131 (uni) (set (tuple21 b c)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 b c))))
  (! (= (tb2t131 (t2tb131 i)) i) :pattern ((t2tb131 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 b1 c1)) j) (= (t2tb131 (tb2t131 j)) j)) :pattern (
  (t2tb131 (tb2t131 j))) )))

(declare-fun t2tb134 ((tuple21 b c)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 b c))) (sort (tuple2 b1 c1) (t2tb134 x))))

(declare-fun tb2t134 (uni) (tuple21 b c))

;; BridgeL
  (assert
  (forall ((i (tuple21 b c)))
  (! (= (tb2t134 (t2tb134 i)) i) :pattern ((t2tb134 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 b1 c1) j) (= (t2tb134 (tb2t134 j)) j)) :pattern (
  (t2tb134 (tb2t134 j))) )))

;; mem_times
  (assert
  (forall ((s (set b)) (t (set c)) (x b) (y c))
  (= (mem (tuple2 b1 c1) (Tuple2 b1 c1 (t2tb14 x) (t2tb135 y))
  (times c1 b1 (t2tb12 s) (t2tb132 t))) (and (mem2 x s) (mem7 y t)))))

(declare-fun t2tb31 ((set (tuple21 b (set (tuple21 a b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 b (set (tuple21 a b)))))) (sort
  (set1 (tuple2 b1 (set1 (tuple2 a1 b1)))) (t2tb31 x))))

(declare-fun tb2t31 (uni) (set (tuple21 b (set (tuple21 a b)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 b (set (tuple21 a b))))))
  (! (= (tb2t31 (t2tb31 i)) i) :pattern ((t2tb31 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 b1 (set1 (tuple2 a1 b1)))) j)
     (= (t2tb31 (tb2t31 j)) j)) :pattern ((t2tb31 (tb2t31 j))) )))

(declare-fun t2tb32 ((tuple21 b (set (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 b (set (tuple21 a b))))) (sort
  (tuple2 b1 (set1 (tuple2 a1 b1))) (t2tb32 x))))

(declare-fun tb2t32 (uni) (tuple21 b (set (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (tuple21 b (set (tuple21 a b)))))
  (! (= (tb2t32 (t2tb32 i)) i) :pattern ((t2tb32 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 b1 (set1 (tuple2 a1 b1))) j)
     (= (t2tb32 (tb2t32 j)) j)) :pattern ((t2tb32 (tb2t32 j))) )))

;; mem_times
  (assert
  (forall ((s (set b)) (t (set (set (tuple21 a b)))) (x b) (y (set (tuple21 a
  b))))
  (= (mem (tuple2 b1 (set1 (tuple2 a1 b1)))
  (Tuple2 b1 (set1 (tuple2 a1 b1)) (t2tb14 x) (t2tb11 y))
  (times (set1 (tuple2 a1 b1)) b1 (t2tb12 s) (t2tb10 t)))
  (and (mem2 x s) (mem4 y t)))))

(declare-fun t2tb33 ((tuple21 b (tuple21 a b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 b (tuple21 a b)))) (sort (tuple2 b1 (tuple2 a1 b1))
  (t2tb33 x))))

(declare-fun tb2t33 (uni) (tuple21 b (tuple21 a b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 b (tuple21 a b))))
  (! (= (tb2t33 (t2tb33 i)) i) :pattern ((t2tb33 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 b1 (tuple2 a1 b1)) j) (= (t2tb33 (tb2t33 j)) j)) :pattern (
  (t2tb33 (tb2t33 j))) )))

(declare-fun t2tb34 ((set (tuple21 b (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 b (tuple21 a b))))) (sort
  (set1 (tuple2 b1 (tuple2 a1 b1))) (t2tb34 x))))

(declare-fun tb2t34 (uni) (set (tuple21 b (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 b (tuple21 a b)))))
  (! (= (tb2t34 (t2tb34 i)) i) :pattern ((t2tb34 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 b1 (tuple2 a1 b1))) j)
     (= (t2tb34 (tb2t34 j)) j)) :pattern ((t2tb34 (tb2t34 j))) )))

;; mem_times
  (assert
  (forall ((s (set b)) (t (set (tuple21 a b))) (x b) (y (tuple21 a b)))
  (= (mem (tuple2 b1 (tuple2 a1 b1))
  (Tuple2 b1 (tuple2 a1 b1) (t2tb14 x) (t2tb13 y))
  (times (tuple2 a1 b1) b1 (t2tb12 s) (t2tb11 t)))
  (and (mem2 x s) (mem3 y t)))))

(declare-fun t2tb35 ((set (tuple21 b b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 b b)))) (sort (set1 (tuple2 b1 b1)) (t2tb35 x))))

(declare-fun tb2t35 (uni) (set (tuple21 b b)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 b b))))
  (! (= (tb2t35 (t2tb35 i)) i) :pattern ((t2tb35 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 b1 b1)) j) (= (t2tb35 (tb2t35 j)) j)) :pattern (
  (t2tb35 (tb2t35 j))) )))

(declare-fun t2tb36 ((tuple21 b b)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 b b))) (sort (tuple2 b1 b1) (t2tb36 x))))

(declare-fun tb2t36 (uni) (tuple21 b b))

;; BridgeL
  (assert
  (forall ((i (tuple21 b b)))
  (! (= (tb2t36 (t2tb36 i)) i) :pattern ((t2tb36 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 b1 b1) j) (= (t2tb36 (tb2t36 j)) j)) :pattern (
  (t2tb36 (tb2t36 j))) )))

;; mem_times
  (assert
  (forall ((s (set b)) (t (set b)) (x b) (y b))
  (= (mem (tuple2 b1 b1) (Tuple2 b1 b1 (t2tb14 x) (t2tb14 y))
  (times b1 b1 (t2tb12 s) (t2tb12 t))) (and (mem2 x s) (mem2 y t)))))

(declare-fun t2tb37 ((set (tuple21 b a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 b a)))) (sort (set1 (tuple2 b1 a1)) (t2tb37 x))))

(declare-fun tb2t37 (uni) (set (tuple21 b a)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 b a))))
  (! (= (tb2t37 (t2tb37 i)) i) :pattern ((t2tb37 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 b1 a1)) j) (= (t2tb37 (tb2t37 j)) j)) :pattern (
  (t2tb37 (tb2t37 j))) )))

(declare-fun t2tb38 ((tuple21 b a)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 b a))) (sort (tuple2 b1 a1) (t2tb38 x))))

(declare-fun tb2t38 (uni) (tuple21 b a))

;; BridgeL
  (assert
  (forall ((i (tuple21 b a)))
  (! (= (tb2t38 (t2tb38 i)) i) :pattern ((t2tb38 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 b1 a1) j) (= (t2tb38 (tb2t38 j)) j)) :pattern (
  (t2tb38 (tb2t38 j))) )))

;; mem_times
  (assert
  (forall ((s (set b)) (t (set a)) (x b) (y a))
  (= (mem (tuple2 b1 a1) (Tuple2 b1 a1 (t2tb14 x) (t2tb2 y))
  (times a1 b1 (t2tb12 s) (t2tb1 t))) (and (mem2 x s) (mem1 y t)))))

;; mem_times
  (assert
  (forall ((b2 ty))
  (forall ((s (set b)) (t uni) (x b) (y uni))
  (= (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) y)
  (times b2 b1 (t2tb12 s) t)) (and (mem2 x s) (mem b2 y t))))))

(declare-fun t2tb3556 ((set (tuple21 a (tuple21 c f)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (tuple21 c f))))) (sort
  (set1 (tuple2 a1 (tuple2 c1 f1))) (t2tb3556 x))))

(declare-fun tb2t3556 (uni) (set (tuple21 a (tuple21 c f))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (tuple21 c f)))))
  (! (= (tb2t3556 (t2tb3556 i)) i) :pattern ((t2tb3556 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (tuple2 c1 f1))) j)
     (= (t2tb3556 (tb2t3556 j)) j)) :pattern ((t2tb3556 (tb2t3556 j))) )))

(declare-fun t2tb3557 ((tuple21 a (tuple21 c f))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (tuple21 c f)))) (sort (tuple2 a1 (tuple2 c1 f1))
  (t2tb3557 x))))

(declare-fun tb2t3557 (uni) (tuple21 a (tuple21 c f)))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (tuple21 c f))))
  (! (= (tb2t3557 (t2tb3557 i)) i) :pattern ((t2tb3557 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (tuple2 c1 f1)) j) (= (t2tb3557 (tb2t3557 j)) j)) :pattern (
  (t2tb3557 (tb2t3557 j))) )))

;; mem_times
  (assert
  (forall ((s (set a)) (t (set (tuple21 c f))) (x a) (y (tuple21 c f)))
  (= (mem (tuple2 a1 (tuple2 c1 f1))
  (Tuple2 a1 (tuple2 c1 f1) (t2tb2 x) (t2tb2948 y))
  (times (tuple2 c1 f1) a1 (t2tb1 s) (t2tb2942 t)))
  (and (mem1 x s) (mem45 y t)))))

(declare-fun t2tb3558 ((set (tuple21 a (tuple21 a e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (tuple21 a e))))) (sort
  (set1 (tuple2 a1 (tuple2 a1 e1))) (t2tb3558 x))))

(declare-fun tb2t3558 (uni) (set (tuple21 a (tuple21 a e))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (tuple21 a e)))))
  (! (= (tb2t3558 (t2tb3558 i)) i) :pattern ((t2tb3558 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (tuple2 a1 e1))) j)
     (= (t2tb3558 (tb2t3558 j)) j)) :pattern ((t2tb3558 (tb2t3558 j))) )))

(declare-fun t2tb3559 ((tuple21 a (tuple21 a e))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (tuple21 a e)))) (sort (tuple2 a1 (tuple2 a1 e1))
  (t2tb3559 x))))

(declare-fun tb2t3559 (uni) (tuple21 a (tuple21 a e)))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (tuple21 a e))))
  (! (= (tb2t3559 (t2tb3559 i)) i) :pattern ((t2tb3559 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (tuple2 a1 e1)) j) (= (t2tb3559 (tb2t3559 j)) j)) :pattern (
  (t2tb3559 (tb2t3559 j))) )))

;; mem_times
  (assert
  (forall ((s (set a)) (t (set (tuple21 a e))) (x a) (y (tuple21 a e)))
  (= (mem (tuple2 a1 (tuple2 a1 e1))
  (Tuple2 a1 (tuple2 a1 e1) (t2tb2 x) (t2tb2949 y))
  (times (tuple2 a1 e1) a1 (t2tb1 s) (t2tb2943 t)))
  (and (mem1 x s) (mem44 y t)))))

(declare-fun t2tb3560 ((set (tuple21 a (tuple21 (tuple21 b d) (tuple21 e
  f))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (tuple21 (tuple21 b d) (tuple21 e f)))))) (sort
  (set1 (tuple2 a1 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)))) (t2tb3560 x))))

(declare-fun tb2t3560 (uni) (set (tuple21 a (tuple21 (tuple21 b d) (tuple21 e
  f)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (tuple21 (tuple21 b d) (tuple21 e f))))))
  (! (= (tb2t3560 (t2tb3560 i)) i) :pattern ((t2tb3560 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)))) j)
     (= (t2tb3560 (tb2t3560 j)) j)) :pattern ((t2tb3560 (tb2t3560 j))) )))

(declare-fun t2tb3561 ((tuple21 a (tuple21 (tuple21 b d) (tuple21 e
  f)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (tuple21 (tuple21 b d) (tuple21 e f))))) (sort
  (tuple2 a1 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1))) (t2tb3561 x))))

(declare-fun tb2t3561 (uni) (tuple21 a (tuple21 (tuple21 b d) (tuple21 e
  f))))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (tuple21 (tuple21 b d) (tuple21 e f)))))
  (! (= (tb2t3561 (t2tb3561 i)) i) :pattern ((t2tb3561 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1))) j)
     (= (t2tb3561 (tb2t3561 j)) j)) :pattern ((t2tb3561 (tb2t3561 j))) )))

;; mem_times
  (assert
  (forall ((s (set a)) (t (set (tuple21 (tuple21 b d) (tuple21 e f)))) (x a)
  (y (tuple21 (tuple21 b d) (tuple21 e f))))
  (= (mem (tuple2 a1 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)))
  (Tuple2 a1 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (t2tb2 x) (t2tb2950 y))
  (times (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) a1 (t2tb1 s) (t2tb2944 t)))
  (and (mem1 x s) (mem43 y t)))))

(declare-fun t2tb3562 ((tuple21 a (tuple21 (tuple21 a c) (tuple21 e
  f)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (tuple21 (tuple21 a c) (tuple21 e f))))) (sort
  (tuple2 a1 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1))) (t2tb3562 x))))

(declare-fun tb2t3562 (uni) (tuple21 a (tuple21 (tuple21 a c) (tuple21 e
  f))))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (tuple21 (tuple21 a c) (tuple21 e f)))))
  (! (= (tb2t3562 (t2tb3562 i)) i) :pattern ((t2tb3562 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1))) j)
     (= (t2tb3562 (tb2t3562 j)) j)) :pattern ((t2tb3562 (tb2t3562 j))) )))

(declare-fun t2tb3563 ((set (tuple21 a (tuple21 (tuple21 a c) (tuple21 e
  f))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (tuple21 (tuple21 a c) (tuple21 e f)))))) (sort
  (set1 (tuple2 a1 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)))) (t2tb3563 x))))

(declare-fun tb2t3563 (uni) (set (tuple21 a (tuple21 (tuple21 a c) (tuple21 e
  f)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (tuple21 (tuple21 a c) (tuple21 e f))))))
  (! (= (tb2t3563 (t2tb3563 i)) i) :pattern ((t2tb3563 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)))) j)
     (= (t2tb3563 (tb2t3563 j)) j)) :pattern ((t2tb3563 (tb2t3563 j))) )))

;; mem_times
  (assert
  (forall ((s (set a)) (t (set (tuple21 (tuple21 a c) (tuple21 e f)))) (x a)
  (y (tuple21 (tuple21 a c) (tuple21 e f))))
  (= (mem (tuple2 a1 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)))
  (Tuple2 a1 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (t2tb2 x) (t2tb2951 y))
  (times (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) a1 (t2tb1 s) (t2tb2945 t)))
  (and (mem1 x s) (mem42 y t)))))

(declare-fun t2tb3564 ((set (tuple21 a (set (tuple21 d f))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (set (tuple21 d f)))))) (sort
  (set1 (tuple2 a1 (set1 (tuple2 d1 f1)))) (t2tb3564 x))))

(declare-fun tb2t3564 (uni) (set (tuple21 a (set (tuple21 d f)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (set (tuple21 d f))))))
  (! (= (tb2t3564 (t2tb3564 i)) i) :pattern ((t2tb3564 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (set1 (tuple2 d1 f1)))) j)
     (= (t2tb3564 (tb2t3564 j)) j)) :pattern ((t2tb3564 (tb2t3564 j))) )))

(declare-fun t2tb3565 ((tuple21 a (set (tuple21 d f)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (set (tuple21 d f))))) (sort
  (tuple2 a1 (set1 (tuple2 d1 f1))) (t2tb3565 x))))

(declare-fun tb2t3565 (uni) (tuple21 a (set (tuple21 d f))))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (set (tuple21 d f)))))
  (! (= (tb2t3565 (t2tb3565 i)) i) :pattern ((t2tb3565 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (set1 (tuple2 d1 f1))) j)
     (= (t2tb3565 (tb2t3565 j)) j)) :pattern ((t2tb3565 (tb2t3565 j))) )))

;; mem_times
  (assert
  (forall ((s (set a)) (t (set (set (tuple21 d f)))) (x a) (y (set (tuple21 d
  f))))
  (= (mem (tuple2 a1 (set1 (tuple2 d1 f1)))
  (Tuple2 a1 (set1 (tuple2 d1 f1)) (t2tb2 x) (t2tb2938 y))
  (times (set1 (tuple2 d1 f1)) a1 (t2tb1 s) (t2tb2939 t)))
  (and (mem1 x s) (mem41 y t)))))

(declare-fun t2tb3566 ((set (tuple21 a (tuple21 d f)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (tuple21 d f))))) (sort
  (set1 (tuple2 a1 (tuple2 d1 f1))) (t2tb3566 x))))

(declare-fun tb2t3566 (uni) (set (tuple21 a (tuple21 d f))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (tuple21 d f)))))
  (! (= (tb2t3566 (t2tb3566 i)) i) :pattern ((t2tb3566 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (tuple2 d1 f1))) j)
     (= (t2tb3566 (tb2t3566 j)) j)) :pattern ((t2tb3566 (tb2t3566 j))) )))

(declare-fun t2tb3567 ((tuple21 a (tuple21 d f))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (tuple21 d f)))) (sort (tuple2 a1 (tuple2 d1 f1))
  (t2tb3567 x))))

(declare-fun tb2t3567 (uni) (tuple21 a (tuple21 d f)))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (tuple21 d f))))
  (! (= (tb2t3567 (t2tb3567 i)) i) :pattern ((t2tb3567 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (tuple2 d1 f1)) j) (= (t2tb3567 (tb2t3567 j)) j)) :pattern (
  (t2tb3567 (tb2t3567 j))) )))

;; mem_times
  (assert
  (forall ((s (set a)) (t (set (tuple21 d f))) (x a) (y (tuple21 d f)))
  (= (mem (tuple2 a1 (tuple2 d1 f1))
  (Tuple2 a1 (tuple2 d1 f1) (t2tb2 x) (t2tb2952 y))
  (times (tuple2 d1 f1) a1 (t2tb1 s) (t2tb2938 t)))
  (and (mem1 x s) (mem40 y t)))))

(declare-fun t2tb3568 ((set (tuple21 a (set (tuple21 b e))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (set (tuple21 b e)))))) (sort
  (set1 (tuple2 a1 (set1 (tuple2 b1 e1)))) (t2tb3568 x))))

(declare-fun tb2t3568 (uni) (set (tuple21 a (set (tuple21 b e)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (set (tuple21 b e))))))
  (! (= (tb2t3568 (t2tb3568 i)) i) :pattern ((t2tb3568 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (set1 (tuple2 b1 e1)))) j)
     (= (t2tb3568 (tb2t3568 j)) j)) :pattern ((t2tb3568 (tb2t3568 j))) )))

(declare-fun t2tb3569 ((tuple21 a (set (tuple21 b e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (set (tuple21 b e))))) (sort
  (tuple2 a1 (set1 (tuple2 b1 e1))) (t2tb3569 x))))

(declare-fun tb2t3569 (uni) (tuple21 a (set (tuple21 b e))))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (set (tuple21 b e)))))
  (! (= (tb2t3569 (t2tb3569 i)) i) :pattern ((t2tb3569 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (set1 (tuple2 b1 e1))) j)
     (= (t2tb3569 (tb2t3569 j)) j)) :pattern ((t2tb3569 (tb2t3569 j))) )))

;; mem_times
  (assert
  (forall ((s (set a)) (t (set (set (tuple21 b e)))) (x a) (y (set (tuple21 b
  e))))
  (= (mem (tuple2 a1 (set1 (tuple2 b1 e1)))
  (Tuple2 a1 (set1 (tuple2 b1 e1)) (t2tb2 x) (t2tb2940 y))
  (times (set1 (tuple2 b1 e1)) a1 (t2tb1 s) (t2tb2941 t)))
  (and (mem1 x s) (mem39 y t)))))

(declare-fun t2tb3570 ((set (tuple21 a (tuple21 b e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (tuple21 b e))))) (sort
  (set1 (tuple2 a1 (tuple2 b1 e1))) (t2tb3570 x))))

(declare-fun tb2t3570 (uni) (set (tuple21 a (tuple21 b e))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (tuple21 b e)))))
  (! (= (tb2t3570 (t2tb3570 i)) i) :pattern ((t2tb3570 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (tuple2 b1 e1))) j)
     (= (t2tb3570 (tb2t3570 j)) j)) :pattern ((t2tb3570 (tb2t3570 j))) )))

(declare-fun t2tb3571 ((tuple21 a (tuple21 b e))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (tuple21 b e)))) (sort (tuple2 a1 (tuple2 b1 e1))
  (t2tb3571 x))))

(declare-fun tb2t3571 (uni) (tuple21 a (tuple21 b e)))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (tuple21 b e))))
  (! (= (tb2t3571 (t2tb3571 i)) i) :pattern ((t2tb3571 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (tuple2 b1 e1)) j) (= (t2tb3571 (tb2t3571 j)) j)) :pattern (
  (t2tb3571 (tb2t3571 j))) )))

;; mem_times
  (assert
  (forall ((s (set a)) (t (set (tuple21 b e))) (x a) (y (tuple21 b e)))
  (= (mem (tuple2 a1 (tuple2 b1 e1))
  (Tuple2 a1 (tuple2 b1 e1) (t2tb2 x) (t2tb2953 y))
  (times (tuple2 b1 e1) a1 (t2tb1 s) (t2tb2940 t)))
  (and (mem1 x s) (mem38 y t)))))

(declare-fun t2tb3572 ((set (tuple21 a f))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a f)))) (sort (set1 (tuple2 a1 f1))
  (t2tb3572 x))))

(declare-fun tb2t3572 (uni) (set (tuple21 a f)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a f))))
  (! (= (tb2t3572 (t2tb3572 i)) i) :pattern ((t2tb3572 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 f1)) j) (= (t2tb3572 (tb2t3572 j)) j)) :pattern (
  (t2tb3572 (tb2t3572 j))) )))

(declare-fun t2tb3573 ((tuple21 a f)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 a f))) (sort (tuple2 a1 f1) (t2tb3573 x))))

(declare-fun tb2t3573 (uni) (tuple21 a f))

;; BridgeL
  (assert
  (forall ((i (tuple21 a f)))
  (! (= (tb2t3573 (t2tb3573 i)) i) :pattern ((t2tb3573 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 f1) j) (= (t2tb3573 (tb2t3573 j)) j)) :pattern (
  (t2tb3573 (tb2t3573 j))) )))

;; mem_times
  (assert
  (forall ((s (set a)) (t (set f)) (x a) (y f))
  (= (mem (tuple2 a1 f1) (Tuple2 a1 f1 (t2tb2 x) (t2tb2954 y))
  (times f1 a1 (t2tb1 s) (t2tb2946 t))) (and (mem1 x s) (mem37 y t)))))

;; mem_times
  (assert
  (forall ((s (set a)) (t (set e)) (x a) (y e))
  (= (mem44 (tb2t2949 (Tuple2 a1 e1 (t2tb2 x) (t2tb2955 y)))
  (tb2t2943 (times e1 a1 (t2tb1 s) (t2tb2947 t))))
  (and (mem1 x s) (mem36 y t)))))

(declare-fun t2tb3574 ((set (tuple21 a (tuple21 (tuple21 a c) (tuple21 b
  d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (tuple21 (tuple21 a c) (tuple21 b d)))))) (sort
  (set1 (tuple2 a1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))) (t2tb3574 x))))

(declare-fun tb2t3574 (uni) (set (tuple21 a (tuple21 (tuple21 a c) (tuple21 b
  d)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (tuple21 (tuple21 a c) (tuple21 b d))))))
  (! (= (tb2t3574 (t2tb3574 i)) i) :pattern ((t2tb3574 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))) j)
     (= (t2tb3574 (tb2t3574 j)) j)) :pattern ((t2tb3574 (tb2t3574 j))) )))

(declare-fun t2tb3575 ((tuple21 a (tuple21 (tuple21 a c) (tuple21 b
  d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (tuple21 (tuple21 a c) (tuple21 b d))))) (sort
  (tuple2 a1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))) (t2tb3575 x))))

(declare-fun tb2t3575 (uni) (tuple21 a (tuple21 (tuple21 a c) (tuple21 b
  d))))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (tuple21 (tuple21 a c) (tuple21 b d)))))
  (! (= (tb2t3575 (t2tb3575 i)) i) :pattern ((t2tb3575 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))) j)
     (= (t2tb3575 (tb2t3575 j)) j)) :pattern ((t2tb3575 (tb2t3575 j))) )))

;; mem_times
  (assert
  (forall ((s (set a)) (t (set (tuple21 (tuple21 a c) (tuple21 b d)))) (x a)
  (y (tuple21 (tuple21 a c) (tuple21 b d))))
  (= (mem (tuple2 a1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
  (Tuple2 a1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb2 x) (t2tb691 y))
  (times (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) a1 (t2tb1 s) (t2tb686 t)))
  (and (mem1 x s) (mem24 y t)))))

(declare-fun t2tb3576 ((set (tuple21 a (set (tuple21 c d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (set (tuple21 c d)))))) (sort
  (set1 (tuple2 a1 (set1 (tuple2 c1 d1)))) (t2tb3576 x))))

(declare-fun tb2t3576 (uni) (set (tuple21 a (set (tuple21 c d)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (set (tuple21 c d))))))
  (! (= (tb2t3576 (t2tb3576 i)) i) :pattern ((t2tb3576 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (set1 (tuple2 c1 d1)))) j)
     (= (t2tb3576 (tb2t3576 j)) j)) :pattern ((t2tb3576 (tb2t3576 j))) )))

(declare-fun t2tb3577 ((tuple21 a (set (tuple21 c d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (set (tuple21 c d))))) (sort
  (tuple2 a1 (set1 (tuple2 c1 d1))) (t2tb3577 x))))

(declare-fun tb2t3577 (uni) (tuple21 a (set (tuple21 c d))))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (set (tuple21 c d)))))
  (! (= (tb2t3577 (t2tb3577 i)) i) :pattern ((t2tb3577 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (set1 (tuple2 c1 d1))) j)
     (= (t2tb3577 (tb2t3577 j)) j)) :pattern ((t2tb3577 (tb2t3577 j))) )))

;; mem_times
  (assert
  (forall ((s (set a)) (t (set (set (tuple21 c d)))) (x a) (y (set (tuple21 c
  d))))
  (= (mem (tuple2 a1 (set1 (tuple2 c1 d1)))
  (Tuple2 a1 (set1 (tuple2 c1 d1)) (t2tb2 x) (t2tb689 y))
  (times (set1 (tuple2 c1 d1)) a1 (t2tb1 s) (t2tb688 t)))
  (and (mem1 x s) (mem22 y t)))))

(declare-fun t2tb901 ((set (tuple21 a (tuple21 c d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (tuple21 c d))))) (sort
  (set1 (tuple2 a1 (tuple2 c1 d1))) (t2tb901 x))))

(declare-fun tb2t901 (uni) (set (tuple21 a (tuple21 c d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (tuple21 c d)))))
  (! (= (tb2t901 (t2tb901 i)) i) :pattern ((t2tb901 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (tuple2 c1 d1))) j)
     (= (t2tb901 (tb2t901 j)) j)) :pattern ((t2tb901 (tb2t901 j))) )))

(declare-fun t2tb902 ((tuple21 a (tuple21 c d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (tuple21 c d)))) (sort (tuple2 a1 (tuple2 c1 d1))
  (t2tb902 x))))

(declare-fun tb2t902 (uni) (tuple21 a (tuple21 c d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (tuple21 c d))))
  (! (= (tb2t902 (t2tb902 i)) i) :pattern ((t2tb902 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (tuple2 c1 d1)) j) (= (t2tb902 (tb2t902 j)) j)) :pattern (
  (t2tb902 (tb2t902 j))) )))

;; mem_times
  (assert
  (forall ((s (set a)) (t (set (tuple21 c d))) (x a) (y (tuple21 c d)))
  (= (mem (tuple2 a1 (tuple2 c1 d1))
  (Tuple2 a1 (tuple2 c1 d1) (t2tb2 x) (t2tb693 y))
  (times (tuple2 c1 d1) a1 (t2tb1 s) (t2tb689 t)))
  (and (mem1 x s) (mem21 y t)))))

(declare-fun t2tb903 ((set (tuple21 a d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a d)))) (sort (set1 (tuple2 a1 d1)) (t2tb903 x))))

(declare-fun tb2t903 (uni) (set (tuple21 a d)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a d))))
  (! (= (tb2t903 (t2tb903 i)) i) :pattern ((t2tb903 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 d1)) j) (= (t2tb903 (tb2t903 j)) j)) :pattern (
  (t2tb903 (tb2t903 j))) )))

(declare-fun t2tb904 ((tuple21 a d)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 a d))) (sort (tuple2 a1 d1) (t2tb904 x))))

(declare-fun tb2t904 (uni) (tuple21 a d))

;; BridgeL
  (assert
  (forall ((i (tuple21 a d)))
  (! (= (tb2t904 (t2tb904 i)) i) :pattern ((t2tb904 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 d1) j) (= (t2tb904 (tb2t904 j)) j)) :pattern (
  (t2tb904 (tb2t904 j))) )))

;; mem_times
  (assert
  (forall ((s (set a)) (t (set d)) (x a) (y d))
  (= (mem (tuple2 a1 d1) (Tuple2 a1 d1 (t2tb2 x) (t2tb694 y))
  (times d1 a1 (t2tb1 s) (t2tb690 t))) (and (mem1 x s) (mem20 y t)))))

;; mem_times
  (assert
  (forall ((s (set a)) (t (set c)) (x a) (y c))
  (= (mem (tuple2 a1 c1) (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y))
  (times c1 a1 (t2tb1 s) (t2tb132 t))) (and (mem1 x s) (mem7 y t)))))

(declare-fun t2tb39 ((set (tuple21 a (set (tuple21 a b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (set (tuple21 a b)))))) (sort
  (set1 (tuple2 a1 (set1 (tuple2 a1 b1)))) (t2tb39 x))))

(declare-fun tb2t39 (uni) (set (tuple21 a (set (tuple21 a b)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (set (tuple21 a b))))))
  (! (= (tb2t39 (t2tb39 i)) i) :pattern ((t2tb39 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (set1 (tuple2 a1 b1)))) j)
     (= (t2tb39 (tb2t39 j)) j)) :pattern ((t2tb39 (tb2t39 j))) )))

(declare-fun t2tb40 ((tuple21 a (set (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (set (tuple21 a b))))) (sort
  (tuple2 a1 (set1 (tuple2 a1 b1))) (t2tb40 x))))

(declare-fun tb2t40 (uni) (tuple21 a (set (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (set (tuple21 a b)))))
  (! (= (tb2t40 (t2tb40 i)) i) :pattern ((t2tb40 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (set1 (tuple2 a1 b1))) j)
     (= (t2tb40 (tb2t40 j)) j)) :pattern ((t2tb40 (tb2t40 j))) )))

;; mem_times
  (assert
  (forall ((s (set a)) (t (set (set (tuple21 a b)))) (x a) (y (set (tuple21 a
  b))))
  (= (mem (tuple2 a1 (set1 (tuple2 a1 b1)))
  (Tuple2 a1 (set1 (tuple2 a1 b1)) (t2tb2 x) (t2tb11 y))
  (times (set1 (tuple2 a1 b1)) a1 (t2tb1 s) (t2tb10 t)))
  (and (mem1 x s) (mem4 y t)))))

(declare-fun t2tb41 ((set (tuple21 a (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (tuple21 a b))))) (sort
  (set1 (tuple2 a1 (tuple2 a1 b1))) (t2tb41 x))))

(declare-fun tb2t41 (uni) (set (tuple21 a (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (tuple21 a b)))))
  (! (= (tb2t41 (t2tb41 i)) i) :pattern ((t2tb41 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (tuple2 a1 b1))) j)
     (= (t2tb41 (tb2t41 j)) j)) :pattern ((t2tb41 (tb2t41 j))) )))

(declare-fun t2tb42 ((tuple21 a (tuple21 a b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (tuple21 a b)))) (sort (tuple2 a1 (tuple2 a1 b1))
  (t2tb42 x))))

(declare-fun tb2t42 (uni) (tuple21 a (tuple21 a b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (tuple21 a b))))
  (! (= (tb2t42 (t2tb42 i)) i) :pattern ((t2tb42 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (tuple2 a1 b1)) j) (= (t2tb42 (tb2t42 j)) j)) :pattern (
  (t2tb42 (tb2t42 j))) )))

;; mem_times
  (assert
  (forall ((s (set a)) (t (set (tuple21 a b))) (x a) (y (tuple21 a b)))
  (= (mem (tuple2 a1 (tuple2 a1 b1))
  (Tuple2 a1 (tuple2 a1 b1) (t2tb2 x) (t2tb13 y))
  (times (tuple2 a1 b1) a1 (t2tb1 s) (t2tb11 t)))
  (and (mem1 x s) (mem3 y t)))))

;; mem_times
  (assert
  (forall ((s (set a)) (t (set b)) (x a) (y b))
  (= (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y)))
  (tb2t11 (times b1 a1 (t2tb1 s) (t2tb12 t)))) (and (mem1 x s) (mem2 y t)))))

(declare-fun t2tb4 ((set (tuple21 a a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a a)))) (sort (set1 (tuple2 a1 a1)) (t2tb4 x))))

(declare-fun tb2t4 (uni) (set (tuple21 a a)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a a))))
  (! (= (tb2t4 (t2tb4 i)) i) :pattern ((t2tb4 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 a1)) j) (= (t2tb4 (tb2t4 j)) j)) :pattern (
  (t2tb4 (tb2t4 j))) )))

(declare-fun t2tb5 ((tuple21 a a)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 a a))) (sort (tuple2 a1 a1) (t2tb5 x))))

(declare-fun tb2t5 (uni) (tuple21 a a))

;; BridgeL
  (assert
  (forall ((i (tuple21 a a)))
  (! (= (tb2t5 (t2tb5 i)) i) :pattern ((t2tb5 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 a1) j) (= (t2tb5 (tb2t5 j)) j)) :pattern ((t2tb5
                                                                    (tb2t5 j))) )))

;; mem_times
  (assert
  (forall ((s (set a)) (t (set a)) (x a) (y a))
  (= (mem (tuple2 a1 a1) (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y))
  (times a1 a1 (t2tb1 s) (t2tb1 t))) (and (mem1 x s) (mem1 y t)))))

;; mem_times
  (assert
  (forall ((b2 ty))
  (forall ((s (set a)) (t uni) (x a) (y uni))
  (= (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) y)
  (times b2 a1 (t2tb1 s) t)) (and (mem1 x s) (mem b2 y t))))))

;; mem_times
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (x uni) (y uni))
  (= (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) (times b2 a2 s t))
  (and (mem a2 x s) (mem b2 y t))))))

(declare-fun t2tb3578 ((set (set (tuple21 c f)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 c f))))) (sort (set1 (set1 (tuple2 c1 f1)))
  (t2tb3578 x))))

(declare-fun tb2t3578 (uni) (set (set (tuple21 c f))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 c f)))))
  (! (= (tb2t3578 (t2tb3578 i)) i) :pattern ((t2tb3578 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 c1 f1))) j) (= (t2tb3578 (tb2t3578 j)) j)) :pattern (
  (t2tb3578 (tb2t3578 j))) )))

;; mem_power
  (assert
  (forall ((s (set (tuple21 c f))) (t (set (tuple21 c f))))
  (= (mem (set1 (tuple2 c1 f1)) (t2tb2942 s)
  (power (tuple2 c1 f1) (t2tb2942 t)))
  (forall ((x (tuple21 c f))) (=> (mem45 x s) (mem45 x t))))))

(declare-fun t2tb3579 ((set (set (tuple21 a e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 a e))))) (sort (set1 (set1 (tuple2 a1 e1)))
  (t2tb3579 x))))

(declare-fun tb2t3579 (uni) (set (set (tuple21 a e))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 a e)))))
  (! (= (tb2t3579 (t2tb3579 i)) i) :pattern ((t2tb3579 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 a1 e1))) j) (= (t2tb3579 (tb2t3579 j)) j)) :pattern (
  (t2tb3579 (tb2t3579 j))) )))

;; mem_power
  (assert
  (forall ((s (set (tuple21 a e))) (t (set (tuple21 a e))))
  (= (mem (set1 (tuple2 a1 e1)) (t2tb2943 s)
  (power (tuple2 a1 e1) (t2tb2943 t)))
  (forall ((x (tuple21 a e))) (=> (mem44 x s) (mem44 x t))))))

(declare-fun t2tb3580 ((set (set (tuple21 (tuple21 b d) (tuple21 e
  f))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 b d) (tuple21 e f)))))) (sort
  (set1 (set1 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)))) (t2tb3580 x))))

(declare-fun tb2t3580 (uni) (set (set (tuple21 (tuple21 b d) (tuple21 e
  f)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 b d) (tuple21 e f))))))
  (! (= (tb2t3580 (t2tb3580 i)) i) :pattern ((t2tb3580 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)))) j)
     (= (t2tb3580 (tb2t3580 j)) j)) :pattern ((t2tb3580 (tb2t3580 j))) )))

;; mem_power
  (assert
  (forall ((s (set (tuple21 (tuple21 b d) (tuple21 e f))))
  (t (set (tuple21 (tuple21 b d) (tuple21 e f)))))
  (= (mem (set1 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1))) (t2tb2944 s)
  (power (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (t2tb2944 t)))
  (forall ((x (tuple21 (tuple21 b d) (tuple21 e f))))
  (=> (mem43 x s) (mem43 x t))))))

(declare-fun t2tb3581 ((set (set (tuple21 (tuple21 a c) (tuple21 e
  f))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a c) (tuple21 e f)))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)))) (t2tb3581 x))))

(declare-fun tb2t3581 (uni) (set (set (tuple21 (tuple21 a c) (tuple21 e
  f)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a c) (tuple21 e f))))))
  (! (= (tb2t3581 (t2tb3581 i)) i) :pattern ((t2tb3581 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)))) j)
     (= (t2tb3581 (tb2t3581 j)) j)) :pattern ((t2tb3581 (tb2t3581 j))) )))

;; mem_power
  (assert
  (forall ((s (set (tuple21 (tuple21 a c) (tuple21 e f))))
  (t (set (tuple21 (tuple21 a c) (tuple21 e f)))))
  (= (mem (set1 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1))) (t2tb2945 s)
  (power (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (t2tb2945 t)))
  (forall ((x (tuple21 (tuple21 a c) (tuple21 e f))))
  (=> (mem42 x s) (mem42 x t))))))

(declare-fun t2tb3582 ((set (set (set (tuple21 d f))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (set (tuple21 d f)))))) (sort
  (set1 (set1 (set1 (tuple2 d1 f1)))) (t2tb3582 x))))

(declare-fun tb2t3582 (uni) (set (set (set (tuple21 d f)))))

;; BridgeL
  (assert
  (forall ((i (set (set (set (tuple21 d f))))))
  (! (= (tb2t3582 (t2tb3582 i)) i) :pattern ((t2tb3582 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (set1 (tuple2 d1 f1)))) j)
     (= (t2tb3582 (tb2t3582 j)) j)) :pattern ((t2tb3582 (tb2t3582 j))) )))

;; mem_power
  (assert
  (forall ((s (set (set (tuple21 d f)))) (t (set (set (tuple21 d f)))))
  (= (mem (set1 (set1 (tuple2 d1 f1))) (t2tb2939 s)
  (power (set1 (tuple2 d1 f1)) (t2tb2939 t)))
  (forall ((x (set (tuple21 d f)))) (=> (mem41 x s) (mem41 x t))))))

;; mem_power
  (assert
  (forall ((s (set (tuple21 d f))) (t (set (tuple21 d f))))
  (= (mem41 s (tb2t2939 (power (tuple2 d1 f1) (t2tb2938 t))))
  (forall ((x (tuple21 d f))) (=> (mem40 x s) (mem40 x t))))))

(declare-fun t2tb3583 ((set (set (set (tuple21 b e))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (set (tuple21 b e)))))) (sort
  (set1 (set1 (set1 (tuple2 b1 e1)))) (t2tb3583 x))))

(declare-fun tb2t3583 (uni) (set (set (set (tuple21 b e)))))

;; BridgeL
  (assert
  (forall ((i (set (set (set (tuple21 b e))))))
  (! (= (tb2t3583 (t2tb3583 i)) i) :pattern ((t2tb3583 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (set1 (tuple2 b1 e1)))) j)
     (= (t2tb3583 (tb2t3583 j)) j)) :pattern ((t2tb3583 (tb2t3583 j))) )))

;; mem_power
  (assert
  (forall ((s (set (set (tuple21 b e)))) (t (set (set (tuple21 b e)))))
  (= (mem (set1 (set1 (tuple2 b1 e1))) (t2tb2941 s)
  (power (set1 (tuple2 b1 e1)) (t2tb2941 t)))
  (forall ((x (set (tuple21 b e)))) (=> (mem39 x s) (mem39 x t))))))

;; mem_power
  (assert
  (forall ((s (set (tuple21 b e))) (t (set (tuple21 b e))))
  (= (mem39 s (tb2t2941 (power (tuple2 b1 e1) (t2tb2940 t))))
  (forall ((x (tuple21 b e))) (=> (mem38 x s) (mem38 x t))))))

(declare-fun t2tb3584 ((set (set f))) uni)

;; t2tb_sort
  (assert (forall ((x (set (set f)))) (sort (set1 (set1 f1)) (t2tb3584 x))))

(declare-fun tb2t3584 (uni) (set (set f)))

;; BridgeL
  (assert
  (forall ((i (set (set f))))
  (! (= (tb2t3584 (t2tb3584 i)) i) :pattern ((t2tb3584 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 f1)) j) (= (t2tb3584 (tb2t3584 j)) j)) :pattern (
  (t2tb3584 (tb2t3584 j))) )))

;; mem_power
  (assert
  (forall ((s (set f)) (t (set f)))
  (= (mem (set1 f1) (t2tb2946 s) (power f1 (t2tb2946 t)))
  (forall ((x f)) (=> (mem37 x s) (mem37 x t))))))

(declare-fun t2tb3585 ((set (set e))) uni)

;; t2tb_sort
  (assert (forall ((x (set (set e)))) (sort (set1 (set1 e1)) (t2tb3585 x))))

(declare-fun tb2t3585 (uni) (set (set e)))

;; BridgeL
  (assert
  (forall ((i (set (set e))))
  (! (= (tb2t3585 (t2tb3585 i)) i) :pattern ((t2tb3585 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 e1)) j) (= (t2tb3585 (tb2t3585 j)) j)) :pattern (
  (t2tb3585 (tb2t3585 j))) )))

;; mem_power
  (assert
  (forall ((s (set e)) (t (set e)))
  (= (mem (set1 e1) (t2tb2947 s) (power e1 (t2tb2947 t)))
  (forall ((x e)) (=> (mem36 x s) (mem36 x t))))))

(declare-fun t2tb685 ((set (set (tuple21 (tuple21 a c) (tuple21 b d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a c) (tuple21 b d)))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))) (t2tb685 x))))

(declare-fun tb2t685 (uni) (set (set (tuple21 (tuple21 a c) (tuple21 b d)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a c) (tuple21 b d))))))
  (! (= (tb2t685 (t2tb685 i)) i) :pattern ((t2tb685 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))) j)
     (= (t2tb685 (tb2t685 j)) j)) :pattern ((t2tb685 (tb2t685 j))) )))

;; mem_power
  (assert
  (forall ((s (set (tuple21 (tuple21 a c) (tuple21 b d))))
  (t (set (tuple21 (tuple21 a c) (tuple21 b d)))))
  (= (mem (set1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))) (t2tb686 s)
  (power (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb686 t)))
  (forall ((x (tuple21 (tuple21 a c) (tuple21 b d))))
  (=> (mem24 x s) (mem24 x t))))))

(declare-fun t2tb3586 ((set (set (set (tuple21 c d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (set (tuple21 c d)))))) (sort
  (set1 (set1 (set1 (tuple2 c1 d1)))) (t2tb3586 x))))

(declare-fun tb2t3586 (uni) (set (set (set (tuple21 c d)))))

;; BridgeL
  (assert
  (forall ((i (set (set (set (tuple21 c d))))))
  (! (= (tb2t3586 (t2tb3586 i)) i) :pattern ((t2tb3586 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (set1 (tuple2 c1 d1)))) j)
     (= (t2tb3586 (tb2t3586 j)) j)) :pattern ((t2tb3586 (tb2t3586 j))) )))

;; mem_power
  (assert
  (forall ((s (set (set (tuple21 c d)))) (t (set (set (tuple21 c d)))))
  (= (mem (set1 (set1 (tuple2 c1 d1))) (t2tb688 s)
  (power (set1 (tuple2 c1 d1)) (t2tb688 t)))
  (forall ((x (set (tuple21 c d)))) (=> (mem22 x s) (mem22 x t))))))

;; mem_power
  (assert
  (forall ((s (set (tuple21 c d))) (t (set (tuple21 c d))))
  (= (mem22 s (tb2t688 (power (tuple2 c1 d1) (t2tb689 t))))
  (forall ((x (tuple21 c d))) (=> (mem21 x s) (mem21 x t))))))

(declare-fun t2tb908 ((set (set d))) uni)

;; t2tb_sort
  (assert (forall ((x (set (set d)))) (sort (set1 (set1 d1)) (t2tb908 x))))

(declare-fun tb2t908 (uni) (set (set d)))

;; BridgeL
  (assert
  (forall ((i (set (set d))))
  (! (= (tb2t908 (t2tb908 i)) i) :pattern ((t2tb908 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 d1)) j) (= (t2tb908 (tb2t908 j)) j)) :pattern (
  (t2tb908 (tb2t908 j))) )))

;; mem_power
  (assert
  (forall ((s (set d)) (t (set d)))
  (= (mem (set1 d1) (t2tb690 s) (power d1 (t2tb690 t)))
  (forall ((x d)) (=> (mem20 x s) (mem20 x t))))))

(declare-fun t2tb264 ((set (set c))) uni)

;; t2tb_sort
  (assert (forall ((x (set (set c)))) (sort (set1 (set1 c1)) (t2tb264 x))))

(declare-fun tb2t264 (uni) (set (set c)))

;; BridgeL
  (assert
  (forall ((i (set (set c))))
  (! (= (tb2t264 (t2tb264 i)) i) :pattern ((t2tb264 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 c1)) j) (= (t2tb264 (tb2t264 j)) j)) :pattern (
  (t2tb264 (tb2t264 j))) )))

;; mem_power
  (assert
  (forall ((s (set c)) (t (set c)))
  (= (mem (set1 c1) (t2tb132 s) (power c1 (t2tb132 t)))
  (forall ((x c)) (=> (mem7 x s) (mem7 x t))))))

(declare-fun t2tb43 ((set (set (set (tuple21 a b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (set (tuple21 a b)))))) (sort
  (set1 (set1 (set1 (tuple2 a1 b1)))) (t2tb43 x))))

(declare-fun tb2t43 (uni) (set (set (set (tuple21 a b)))))

;; BridgeL
  (assert
  (forall ((i (set (set (set (tuple21 a b))))))
  (! (= (tb2t43 (t2tb43 i)) i) :pattern ((t2tb43 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (set1 (tuple2 a1 b1)))) j)
     (= (t2tb43 (tb2t43 j)) j)) :pattern ((t2tb43 (tb2t43 j))) )))

;; mem_power
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set (set (tuple21 a b)))))
  (= (mem (set1 (set1 (tuple2 a1 b1))) (t2tb10 s)
  (power (set1 (tuple2 a1 b1)) (t2tb10 t)))
  (forall ((x (set (tuple21 a b)))) (=> (mem4 x s) (mem4 x t))))))

;; mem_power
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (tuple21 a b))))
  (= (mem4 s (tb2t10 (power (tuple2 a1 b1) (t2tb11 t))))
  (forall ((x (tuple21 a b))) (=> (mem3 x s) (mem3 x t))))))

(declare-fun t2tb44 ((set (set b))) uni)

;; t2tb_sort
  (assert (forall ((x (set (set b)))) (sort (set1 (set1 b1)) (t2tb44 x))))

(declare-fun tb2t44 (uni) (set (set b)))

;; BridgeL
  (assert
  (forall ((i (set (set b))))
  (! (= (tb2t44 (t2tb44 i)) i) :pattern ((t2tb44 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 b1)) j) (= (t2tb44 (tb2t44 j)) j)) :pattern (
  (t2tb44 (tb2t44 j))) )))

;; mem_power
  (assert
  (forall ((s (set b)) (t (set b)))
  (= (mem (set1 b1) (t2tb12 s) (power b1 (t2tb12 t)))
  (forall ((x b)) (=> (mem2 x s) (mem2 x t))))))

(declare-fun t2tb ((set (set a))) uni)

;; t2tb_sort
  (assert (forall ((x (set (set a)))) (sort (set1 (set1 a1)) (t2tb x))))

(declare-fun tb2t (uni) (set (set a)))

;; BridgeL
  (assert
  (forall ((i (set (set a)))) (! (= (tb2t (t2tb i)) i) :pattern ((t2tb i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 a1)) j) (= (t2tb (tb2t j)) j)) :pattern ((t2tb
                                                                    (tb2t j))) )))

;; mem_power
  (assert
  (forall ((s (set a)) (t (set a)))
  (= (mem (set1 a1) (t2tb1 s) (power a1 (t2tb1 t)))
  (forall ((x a)) (=> (mem1 x s) (mem1 x t))))))

;; mem_power
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t uni))
  (and
  (=> (mem (set1 a2) s (power a2 t))
  (forall ((x uni)) (=> (mem a2 x s) (mem a2 x t))))
  (=> (forall ((x uni)) (=> (sort a2 x) (=> (mem a2 x s) (mem a2 x t)))) (mem
  (set1 a2) s (power a2 t)))))))

;; mem_non_empty_power
  (assert
  (forall ((s (set (tuple21 c f))) (t (set (tuple21 c f))))
  (= (mem (set1 (tuple2 c1 f1)) (t2tb2942 s)
  (non_empty_power (tuple2 c1 f1) (t2tb2942 t)))
  (and (forall ((x (tuple21 c f))) (=> (mem45 x s) (mem45 x t)))
  (not (infix_eqeq36 s (tb2t2942 (empty (tuple2 c1 f1)))))))))

;; mem_non_empty_power
  (assert
  (forall ((s (set (tuple21 a e))) (t (set (tuple21 a e))))
  (= (mem (set1 (tuple2 a1 e1)) (t2tb2943 s)
  (non_empty_power (tuple2 a1 e1) (t2tb2943 t)))
  (and (forall ((x (tuple21 a e))) (=> (mem44 x s) (mem44 x t)))
  (not (infix_eqeq35 s (tb2t2943 (empty (tuple2 a1 e1)))))))))

;; mem_non_empty_power
  (assert
  (forall ((s (set (tuple21 (tuple21 b d) (tuple21 e f))))
  (t (set (tuple21 (tuple21 b d) (tuple21 e f)))))
  (= (mem (set1 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1))) (t2tb2944 s)
  (non_empty_power (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (t2tb2944 t)))
  (and
  (forall ((x (tuple21 (tuple21 b d) (tuple21 e f))))
  (=> (mem43 x s) (mem43 x t)))
  (not (infix_eqeq34 s
  (tb2t2944 (empty (tuple2 (tuple2 b1 d1) (tuple2 e1 f1))))))))))

;; mem_non_empty_power
  (assert
  (forall ((s (set (tuple21 (tuple21 a c) (tuple21 e f))))
  (t (set (tuple21 (tuple21 a c) (tuple21 e f)))))
  (= (mem (set1 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1))) (t2tb2945 s)
  (non_empty_power (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (t2tb2945 t)))
  (and
  (forall ((x (tuple21 (tuple21 a c) (tuple21 e f))))
  (=> (mem42 x s) (mem42 x t)))
  (not (infix_eqeq33 s
  (tb2t2945 (empty (tuple2 (tuple2 a1 c1) (tuple2 e1 f1))))))))))

;; mem_non_empty_power
  (assert
  (forall ((s (set (set (tuple21 d f)))) (t (set (set (tuple21 d f)))))
  (= (mem (set1 (set1 (tuple2 d1 f1))) (t2tb2939 s)
  (non_empty_power (set1 (tuple2 d1 f1)) (t2tb2939 t)))
  (and (forall ((x (set (tuple21 d f)))) (=> (mem41 x s) (mem41 x t)))
  (not (infix_eqeq37 s (tb2t2939 (empty (set1 (tuple2 d1 f1))))))))))

;; mem_non_empty_power
  (assert
  (forall ((s (set (tuple21 d f))) (t (set (tuple21 d f))))
  (= (mem41 s (tb2t2939 (non_empty_power (tuple2 d1 f1) (t2tb2938 t))))
  (and (forall ((x (tuple21 d f))) (=> (mem40 x s) (mem40 x t)))
  (not (infix_eqeq32 s (tb2t2938 (empty (tuple2 d1 f1)))))))))

;; mem_non_empty_power
  (assert
  (forall ((s (set (set (tuple21 b e)))) (t (set (set (tuple21 b e)))))
  (= (mem (set1 (set1 (tuple2 b1 e1))) (t2tb2941 s)
  (non_empty_power (set1 (tuple2 b1 e1)) (t2tb2941 t)))
  (and (forall ((x (set (tuple21 b e)))) (=> (mem39 x s) (mem39 x t)))
  (not (infix_eqeq38 s (tb2t2941 (empty (set1 (tuple2 b1 e1))))))))))

;; mem_non_empty_power
  (assert
  (forall ((s (set (tuple21 b e))) (t (set (tuple21 b e))))
  (= (mem39 s (tb2t2941 (non_empty_power (tuple2 b1 e1) (t2tb2940 t))))
  (and (forall ((x (tuple21 b e))) (=> (mem38 x s) (mem38 x t)))
  (not (infix_eqeq31 s (tb2t2940 (empty (tuple2 b1 e1)))))))))

;; mem_non_empty_power
  (assert
  (forall ((s (set f)) (t (set f)))
  (= (mem (set1 f1) (t2tb2946 s) (non_empty_power f1 (t2tb2946 t)))
  (and (forall ((x f)) (=> (mem37 x s) (mem37 x t)))
  (not (infix_eqeq30 s (tb2t2946 (empty f1))))))))

;; mem_non_empty_power
  (assert
  (forall ((s (set e)) (t (set e)))
  (= (mem (set1 e1) (t2tb2947 s) (non_empty_power e1 (t2tb2947 t)))
  (and (forall ((x e)) (=> (mem36 x s) (mem36 x t)))
  (not (infix_eqeq29 s (tb2t2947 (empty e1))))))))

;; mem_non_empty_power
  (assert
  (forall ((s (set (tuple21 (tuple21 a c) (tuple21 b d))))
  (t (set (tuple21 (tuple21 a c) (tuple21 b d)))))
  (= (mem (set1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))) (t2tb686 s)
  (non_empty_power (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb686 t)))
  (and
  (forall ((x (tuple21 (tuple21 a c) (tuple21 b d))))
  (=> (mem24 x s) (mem24 x t)))
  (not (infix_eqeq15 s
  (tb2t686 (empty (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))))))))))

;; mem_non_empty_power
  (assert
  (forall ((s (set (set (tuple21 c d)))) (t (set (set (tuple21 c d)))))
  (= (mem (set1 (set1 (tuple2 c1 d1))) (t2tb688 s)
  (non_empty_power (set1 (tuple2 c1 d1)) (t2tb688 t)))
  (and (forall ((x (set (tuple21 c d)))) (=> (mem22 x s) (mem22 x t)))
  (not (infix_eqeq16 s (tb2t688 (empty (set1 (tuple2 c1 d1))))))))))

;; mem_non_empty_power
  (assert
  (forall ((s (set (tuple21 c d))) (t (set (tuple21 c d))))
  (= (mem22 s (tb2t688 (non_empty_power (tuple2 c1 d1) (t2tb689 t))))
  (and (forall ((x (tuple21 c d))) (=> (mem21 x s) (mem21 x t)))
  (not (infix_eqeq14 s (tb2t689 (empty (tuple2 c1 d1)))))))))

;; mem_non_empty_power
  (assert
  (forall ((s (set d)) (t (set d)))
  (= (mem (set1 d1) (t2tb690 s) (non_empty_power d1 (t2tb690 t)))
  (and (forall ((x d)) (=> (mem20 x s) (mem20 x t)))
  (not (infix_eqeq13 s (tb2t690 (empty d1))))))))

;; mem_non_empty_power
  (assert
  (forall ((s (set c)) (t (set c)))
  (= (mem (set1 c1) (t2tb132 s) (non_empty_power c1 (t2tb132 t)))
  (and (forall ((x c)) (=> (mem7 x s) (mem7 x t)))
  (not (infix_eqeq7 s (tb2t132 (empty c1))))))))

;; mem_non_empty_power
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set (set (tuple21 a b)))))
  (= (mem (set1 (set1 (tuple2 a1 b1))) (t2tb10 s)
  (non_empty_power (set1 (tuple2 a1 b1)) (t2tb10 t)))
  (and (forall ((x (set (tuple21 a b)))) (=> (mem4 x s) (mem4 x t)))
  (not (infix_eqeq5 s (tb2t10 (empty (set1 (tuple2 a1 b1))))))))))

;; mem_non_empty_power
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (tuple21 a b))))
  (= (mem4 s (tb2t10 (non_empty_power (tuple2 a1 b1) (t2tb11 t))))
  (and (forall ((x (tuple21 a b))) (=> (mem3 x s) (mem3 x t)))
  (not (infix_eqeq4 s (tb2t11 (empty (tuple2 a1 b1)))))))))

;; mem_non_empty_power
  (assert
  (forall ((s (set b)) (t (set b)))
  (= (mem (set1 b1) (t2tb12 s) (non_empty_power b1 (t2tb12 t)))
  (and (forall ((x b)) (=> (mem2 x s) (mem2 x t)))
  (not (infix_eqeq3 s (tb2t12 (empty b1))))))))

;; mem_non_empty_power
  (assert
  (forall ((s (set a)) (t (set a)))
  (= (mem (set1 a1) (t2tb1 s) (non_empty_power a1 (t2tb1 t)))
  (and (forall ((x a)) (=> (mem1 x s) (mem1 x t)))
  (not (infix_eqeq1 s (tb2t1 (empty a1))))))))

;; mem_non_empty_power
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t uni))
  (and
  (=> (mem (set1 a2) s (non_empty_power a2 t))
  (and (forall ((x uni)) (=> (mem a2 x s) (mem a2 x t)))
  (not (infix_eqeq a2 s (empty a2)))))
  (=>
  (and (forall ((x uni)) (=> (sort a2 x) (=> (mem a2 x s) (mem a2 x t))))
  (not (infix_eqeq a2 s (empty a2)))) (mem (set1 a2) s
  (non_empty_power a2 t)))))))

(declare-fun choose (ty uni) uni)

;; choose_sort
  (assert (forall ((a2 ty)) (forall ((x uni)) (sort a2 (choose a2 x)))))

(declare-fun relation (ty ty uni uni) uni)

;; relation_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (set1 (tuple2 a2 b2)))
  (relation b2 a2 x x1)))))

(declare-fun relation1 ((set a) (set b)) (set (set (tuple21 a b))))

(declare-fun relation7 ((set c) (set d)) (set (set (tuple21 c d))))

(declare-fun relation10 ((set d) (set f)) (set (set (tuple21 d f))))

(declare-fun relation11 ((set b) (set e)) (set (set (tuple21 b e))))

;; mem_relation
  (assert
  (forall ((a2 ty))
  (forall ((u uni) (v (set (tuple21 c f))) (r uni))
  (and
  (=> (mem (set1 (tuple2 a2 (tuple2 c1 f1))) r
  (relation (tuple2 c1 f1) a2 u (t2tb2942 v)))
  (forall ((x uni) (y (tuple21 c f)))
  (=> (mem (tuple2 a2 (tuple2 c1 f1))
  (Tuple2 a2 (tuple2 c1 f1) x (t2tb2948 y)) r)
  (and (mem a2 x u) (mem45 y v)))))
  (=>
  (forall ((x uni) (y (tuple21 c f)))
  (=> (sort a2 x)
  (=> (mem (tuple2 a2 (tuple2 c1 f1))
  (Tuple2 a2 (tuple2 c1 f1) x (t2tb2948 y)) r)
  (and (mem a2 x u) (mem45 y v))))) (mem (set1 (tuple2 a2 (tuple2 c1 f1))) r
  (relation (tuple2 c1 f1) a2 u (t2tb2942 v))))))))

;; mem_relation
  (assert
  (forall ((a2 ty))
  (forall ((u uni) (v (set (tuple21 a e))) (r uni))
  (and
  (=> (mem (set1 (tuple2 a2 (tuple2 a1 e1))) r
  (relation (tuple2 a1 e1) a2 u (t2tb2943 v)))
  (forall ((x uni) (y (tuple21 a e)))
  (=> (mem (tuple2 a2 (tuple2 a1 e1))
  (Tuple2 a2 (tuple2 a1 e1) x (t2tb2949 y)) r)
  (and (mem a2 x u) (mem44 y v)))))
  (=>
  (forall ((x uni) (y (tuple21 a e)))
  (=> (sort a2 x)
  (=> (mem (tuple2 a2 (tuple2 a1 e1))
  (Tuple2 a2 (tuple2 a1 e1) x (t2tb2949 y)) r)
  (and (mem a2 x u) (mem44 y v))))) (mem (set1 (tuple2 a2 (tuple2 a1 e1))) r
  (relation (tuple2 a1 e1) a2 u (t2tb2943 v))))))))

;; mem_relation
  (assert
  (forall ((a2 ty))
  (forall ((u uni) (v (set (tuple21 (tuple21 b d) (tuple21 e f)))) (r uni))
  (and
  (=> (mem (set1 (tuple2 a2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)))) r
  (relation (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) a2 u (t2tb2944 v)))
  (forall ((x uni) (y (tuple21 (tuple21 b d) (tuple21 e f))))
  (=> (mem (tuple2 a2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)))
  (Tuple2 a2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) x (t2tb2950 y)) r)
  (and (mem a2 x u) (mem43 y v)))))
  (=>
  (forall ((x uni) (y (tuple21 (tuple21 b d) (tuple21 e f))))
  (=> (sort a2 x)
  (=> (mem (tuple2 a2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)))
  (Tuple2 a2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) x (t2tb2950 y)) r)
  (and (mem a2 x u) (mem43 y v))))) (mem
  (set1 (tuple2 a2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)))) r
  (relation (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) a2 u (t2tb2944 v))))))))

;; mem_relation
  (assert
  (forall ((a2 ty))
  (forall ((u uni) (v (set (tuple21 (tuple21 a c) (tuple21 e f)))) (r uni))
  (and
  (=> (mem (set1 (tuple2 a2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)))) r
  (relation (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) a2 u (t2tb2945 v)))
  (forall ((x uni) (y (tuple21 (tuple21 a c) (tuple21 e f))))
  (=> (mem (tuple2 a2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)))
  (Tuple2 a2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) x (t2tb2951 y)) r)
  (and (mem a2 x u) (mem42 y v)))))
  (=>
  (forall ((x uni) (y (tuple21 (tuple21 a c) (tuple21 e f))))
  (=> (sort a2 x)
  (=> (mem (tuple2 a2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)))
  (Tuple2 a2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) x (t2tb2951 y)) r)
  (and (mem a2 x u) (mem42 y v))))) (mem
  (set1 (tuple2 a2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)))) r
  (relation (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) a2 u (t2tb2945 v))))))))

;; mem_relation
  (assert
  (forall ((a2 ty))
  (forall ((u uni) (v (set (set (tuple21 d f)))) (r uni))
  (and
  (=> (mem (set1 (tuple2 a2 (set1 (tuple2 d1 f1)))) r
  (relation (set1 (tuple2 d1 f1)) a2 u (t2tb2939 v)))
  (forall ((x uni) (y (set (tuple21 d f))))
  (=> (mem (tuple2 a2 (set1 (tuple2 d1 f1)))
  (Tuple2 a2 (set1 (tuple2 d1 f1)) x (t2tb2938 y)) r)
  (and (mem a2 x u) (mem41 y v)))))
  (=>
  (forall ((x uni) (y (set (tuple21 d f))))
  (=> (sort a2 x)
  (=> (mem (tuple2 a2 (set1 (tuple2 d1 f1)))
  (Tuple2 a2 (set1 (tuple2 d1 f1)) x (t2tb2938 y)) r)
  (and (mem a2 x u) (mem41 y v))))) (mem
  (set1 (tuple2 a2 (set1 (tuple2 d1 f1)))) r
  (relation (set1 (tuple2 d1 f1)) a2 u (t2tb2939 v))))))))

;; mem_relation
  (assert
  (forall ((a2 ty))
  (forall ((u uni) (v (set (tuple21 d f))) (r uni))
  (and
  (=> (mem (set1 (tuple2 a2 (tuple2 d1 f1))) r
  (relation (tuple2 d1 f1) a2 u (t2tb2938 v)))
  (forall ((x uni) (y (tuple21 d f)))
  (=> (mem (tuple2 a2 (tuple2 d1 f1))
  (Tuple2 a2 (tuple2 d1 f1) x (t2tb2952 y)) r)
  (and (mem a2 x u) (mem40 y v)))))
  (=>
  (forall ((x uni) (y (tuple21 d f)))
  (=> (sort a2 x)
  (=> (mem (tuple2 a2 (tuple2 d1 f1))
  (Tuple2 a2 (tuple2 d1 f1) x (t2tb2952 y)) r)
  (and (mem a2 x u) (mem40 y v))))) (mem (set1 (tuple2 a2 (tuple2 d1 f1))) r
  (relation (tuple2 d1 f1) a2 u (t2tb2938 v))))))))

;; mem_relation
  (assert
  (forall ((a2 ty))
  (forall ((u uni) (v (set (set (tuple21 b e)))) (r uni))
  (and
  (=> (mem (set1 (tuple2 a2 (set1 (tuple2 b1 e1)))) r
  (relation (set1 (tuple2 b1 e1)) a2 u (t2tb2941 v)))
  (forall ((x uni) (y (set (tuple21 b e))))
  (=> (mem (tuple2 a2 (set1 (tuple2 b1 e1)))
  (Tuple2 a2 (set1 (tuple2 b1 e1)) x (t2tb2940 y)) r)
  (and (mem a2 x u) (mem39 y v)))))
  (=>
  (forall ((x uni) (y (set (tuple21 b e))))
  (=> (sort a2 x)
  (=> (mem (tuple2 a2 (set1 (tuple2 b1 e1)))
  (Tuple2 a2 (set1 (tuple2 b1 e1)) x (t2tb2940 y)) r)
  (and (mem a2 x u) (mem39 y v))))) (mem
  (set1 (tuple2 a2 (set1 (tuple2 b1 e1)))) r
  (relation (set1 (tuple2 b1 e1)) a2 u (t2tb2941 v))))))))

;; mem_relation
  (assert
  (forall ((a2 ty))
  (forall ((u uni) (v (set (tuple21 b e))) (r uni))
  (and
  (=> (mem (set1 (tuple2 a2 (tuple2 b1 e1))) r
  (relation (tuple2 b1 e1) a2 u (t2tb2940 v)))
  (forall ((x uni) (y (tuple21 b e)))
  (=> (mem (tuple2 a2 (tuple2 b1 e1))
  (Tuple2 a2 (tuple2 b1 e1) x (t2tb2953 y)) r)
  (and (mem a2 x u) (mem38 y v)))))
  (=>
  (forall ((x uni) (y (tuple21 b e)))
  (=> (sort a2 x)
  (=> (mem (tuple2 a2 (tuple2 b1 e1))
  (Tuple2 a2 (tuple2 b1 e1) x (t2tb2953 y)) r)
  (and (mem a2 x u) (mem38 y v))))) (mem (set1 (tuple2 a2 (tuple2 b1 e1))) r
  (relation (tuple2 b1 e1) a2 u (t2tb2940 v))))))))

;; mem_relation
  (assert
  (forall ((a2 ty))
  (forall ((u uni) (v (set f)) (r uni))
  (and
  (=> (mem (set1 (tuple2 a2 f1)) r (relation f1 a2 u (t2tb2946 v)))
  (forall ((x uni) (y f))
  (=> (mem (tuple2 a2 f1) (Tuple2 a2 f1 x (t2tb2954 y)) r)
  (and (mem a2 x u) (mem37 y v)))))
  (=>
  (forall ((x uni) (y f))
  (=> (sort a2 x)
  (=> (mem (tuple2 a2 f1) (Tuple2 a2 f1 x (t2tb2954 y)) r)
  (and (mem a2 x u) (mem37 y v))))) (mem (set1 (tuple2 a2 f1)) r
  (relation f1 a2 u (t2tb2946 v))))))))

;; mem_relation
  (assert
  (forall ((a2 ty))
  (forall ((u uni) (v (set e)) (r uni))
  (and
  (=> (mem (set1 (tuple2 a2 e1)) r (relation e1 a2 u (t2tb2947 v)))
  (forall ((x uni) (y e))
  (=> (mem (tuple2 a2 e1) (Tuple2 a2 e1 x (t2tb2955 y)) r)
  (and (mem a2 x u) (mem36 y v)))))
  (=>
  (forall ((x uni) (y e))
  (=> (sort a2 x)
  (=> (mem (tuple2 a2 e1) (Tuple2 a2 e1 x (t2tb2955 y)) r)
  (and (mem a2 x u) (mem36 y v))))) (mem (set1 (tuple2 a2 e1)) r
  (relation e1 a2 u (t2tb2947 v))))))))

;; mem_relation
  (assert
  (forall ((a2 ty))
  (forall ((u uni) (v (set (tuple21 (tuple21 a c) (tuple21 b d)))) (r uni))
  (and
  (=> (mem (set1 (tuple2 a2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))) r
  (relation (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) a2 u (t2tb686 v)))
  (forall ((x uni) (y (tuple21 (tuple21 a c) (tuple21 b d))))
  (=> (mem (tuple2 a2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
  (Tuple2 a2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) x (t2tb691 y)) r)
  (and (mem a2 x u) (mem24 y v)))))
  (=>
  (forall ((x uni) (y (tuple21 (tuple21 a c) (tuple21 b d))))
  (=> (sort a2 x)
  (=> (mem (tuple2 a2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
  (Tuple2 a2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) x (t2tb691 y)) r)
  (and (mem a2 x u) (mem24 y v))))) (mem
  (set1 (tuple2 a2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))) r
  (relation (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) a2 u (t2tb686 v))))))))

;; mem_relation
  (assert
  (forall ((a2 ty))
  (forall ((u uni) (v (set (set (tuple21 c d)))) (r uni))
  (and
  (=> (mem (set1 (tuple2 a2 (set1 (tuple2 c1 d1)))) r
  (relation (set1 (tuple2 c1 d1)) a2 u (t2tb688 v)))
  (forall ((x uni) (y (set (tuple21 c d))))
  (=> (mem (tuple2 a2 (set1 (tuple2 c1 d1)))
  (Tuple2 a2 (set1 (tuple2 c1 d1)) x (t2tb689 y)) r)
  (and (mem a2 x u) (mem22 y v)))))
  (=>
  (forall ((x uni) (y (set (tuple21 c d))))
  (=> (sort a2 x)
  (=> (mem (tuple2 a2 (set1 (tuple2 c1 d1)))
  (Tuple2 a2 (set1 (tuple2 c1 d1)) x (t2tb689 y)) r)
  (and (mem a2 x u) (mem22 y v))))) (mem
  (set1 (tuple2 a2 (set1 (tuple2 c1 d1)))) r
  (relation (set1 (tuple2 c1 d1)) a2 u (t2tb688 v))))))))

;; mem_relation
  (assert
  (forall ((a2 ty))
  (forall ((u uni) (v (set (tuple21 c d))) (r uni))
  (and
  (=> (mem (set1 (tuple2 a2 (tuple2 c1 d1))) r
  (relation (tuple2 c1 d1) a2 u (t2tb689 v)))
  (forall ((x uni) (y (tuple21 c d)))
  (=> (mem (tuple2 a2 (tuple2 c1 d1))
  (Tuple2 a2 (tuple2 c1 d1) x (t2tb693 y)) r) (and (mem a2 x u) (mem21 y v)))))
  (=>
  (forall ((x uni) (y (tuple21 c d)))
  (=> (sort a2 x)
  (=> (mem (tuple2 a2 (tuple2 c1 d1))
  (Tuple2 a2 (tuple2 c1 d1) x (t2tb693 y)) r) (and (mem a2 x u) (mem21 y v)))))
  (mem (set1 (tuple2 a2 (tuple2 c1 d1))) r
  (relation (tuple2 c1 d1) a2 u (t2tb689 v))))))))

;; mem_relation
  (assert
  (forall ((a2 ty))
  (forall ((u uni) (v (set d)) (r uni))
  (and
  (=> (mem (set1 (tuple2 a2 d1)) r (relation d1 a2 u (t2tb690 v)))
  (forall ((x uni) (y d))
  (=> (mem (tuple2 a2 d1) (Tuple2 a2 d1 x (t2tb694 y)) r)
  (and (mem a2 x u) (mem20 y v)))))
  (=>
  (forall ((x uni) (y d))
  (=> (sort a2 x)
  (=> (mem (tuple2 a2 d1) (Tuple2 a2 d1 x (t2tb694 y)) r)
  (and (mem a2 x u) (mem20 y v))))) (mem (set1 (tuple2 a2 d1)) r
  (relation d1 a2 u (t2tb690 v))))))))

;; mem_relation
  (assert
  (forall ((a2 ty))
  (forall ((u uni) (v (set c)) (r uni))
  (and
  (=> (mem (set1 (tuple2 a2 c1)) r (relation c1 a2 u (t2tb132 v)))
  (forall ((x uni) (y c))
  (=> (mem (tuple2 a2 c1) (Tuple2 a2 c1 x (t2tb135 y)) r)
  (and (mem a2 x u) (mem7 y v)))))
  (=>
  (forall ((x uni) (y c))
  (=> (sort a2 x)
  (=> (mem (tuple2 a2 c1) (Tuple2 a2 c1 x (t2tb135 y)) r)
  (and (mem a2 x u) (mem7 y v))))) (mem (set1 (tuple2 a2 c1)) r
  (relation c1 a2 u (t2tb132 v))))))))

;; mem_relation
  (assert
  (forall ((a2 ty))
  (forall ((u uni) (v (set (set (tuple21 a b)))) (r uni))
  (and
  (=> (mem (set1 (tuple2 a2 (set1 (tuple2 a1 b1)))) r
  (relation (set1 (tuple2 a1 b1)) a2 u (t2tb10 v)))
  (forall ((x uni) (y (set (tuple21 a b))))
  (=> (mem (tuple2 a2 (set1 (tuple2 a1 b1)))
  (Tuple2 a2 (set1 (tuple2 a1 b1)) x (t2tb11 y)) r)
  (and (mem a2 x u) (mem4 y v)))))
  (=>
  (forall ((x uni) (y (set (tuple21 a b))))
  (=> (sort a2 x)
  (=> (mem (tuple2 a2 (set1 (tuple2 a1 b1)))
  (Tuple2 a2 (set1 (tuple2 a1 b1)) x (t2tb11 y)) r)
  (and (mem a2 x u) (mem4 y v))))) (mem
  (set1 (tuple2 a2 (set1 (tuple2 a1 b1)))) r
  (relation (set1 (tuple2 a1 b1)) a2 u (t2tb10 v))))))))

;; mem_relation
  (assert
  (forall ((a2 ty))
  (forall ((u uni) (v (set (tuple21 a b))) (r uni))
  (and
  (=> (mem (set1 (tuple2 a2 (tuple2 a1 b1))) r
  (relation (tuple2 a1 b1) a2 u (t2tb11 v)))
  (forall ((x uni) (y (tuple21 a b)))
  (=> (mem (tuple2 a2 (tuple2 a1 b1)) (Tuple2 a2 (tuple2 a1 b1) x (t2tb13 y))
  r) (and (mem a2 x u) (mem3 y v)))))
  (=>
  (forall ((x uni) (y (tuple21 a b)))
  (=> (sort a2 x)
  (=> (mem (tuple2 a2 (tuple2 a1 b1)) (Tuple2 a2 (tuple2 a1 b1) x (t2tb13 y))
  r) (and (mem a2 x u) (mem3 y v))))) (mem (set1 (tuple2 a2 (tuple2 a1 b1)))
  r (relation (tuple2 a1 b1) a2 u (t2tb11 v))))))))

;; mem_relation
  (assert
  (forall ((a2 ty))
  (forall ((u uni) (v (set b)) (r uni))
  (and
  (=> (mem (set1 (tuple2 a2 b1)) r (relation b1 a2 u (t2tb12 v)))
  (forall ((x uni) (y b))
  (=> (mem (tuple2 a2 b1) (Tuple2 a2 b1 x (t2tb14 y)) r)
  (and (mem a2 x u) (mem2 y v)))))
  (=>
  (forall ((x uni) (y b))
  (=> (sort a2 x)
  (=> (mem (tuple2 a2 b1) (Tuple2 a2 b1 x (t2tb14 y)) r)
  (and (mem a2 x u) (mem2 y v))))) (mem (set1 (tuple2 a2 b1)) r
  (relation b1 a2 u (t2tb12 v))))))))

;; mem_relation
  (assert
  (forall ((a2 ty))
  (forall ((u uni) (v (set a)) (r uni))
  (and
  (=> (mem (set1 (tuple2 a2 a1)) r (relation a1 a2 u (t2tb1 v)))
  (forall ((x uni) (y a))
  (=> (mem (tuple2 a2 a1) (Tuple2 a2 a1 x (t2tb2 y)) r)
  (and (mem a2 x u) (mem1 y v)))))
  (=>
  (forall ((x uni) (y a))
  (=> (sort a2 x)
  (=> (mem (tuple2 a2 a1) (Tuple2 a2 a1 x (t2tb2 y)) r)
  (and (mem a2 x u) (mem1 y v))))) (mem (set1 (tuple2 a2 a1)) r
  (relation a1 a2 u (t2tb1 v))))))))

(declare-fun t2tb3587 ((set (set (tuple21 (tuple21 c f) (tuple21 c
  f))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 c f) (tuple21 c f)))))) (sort
  (set1 (set1 (tuple2 (tuple2 c1 f1) (tuple2 c1 f1)))) (t2tb3587 x))))

(declare-fun tb2t3587 (uni) (set (set (tuple21 (tuple21 c f) (tuple21 c
  f)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 c f) (tuple21 c f))))))
  (! (= (tb2t3587 (t2tb3587 i)) i) :pattern ((t2tb3587 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 c1 f1) (tuple2 c1 f1)))) j)
     (= (t2tb3587 (tb2t3587 j)) j)) :pattern ((t2tb3587 (tb2t3587 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 c f))) (v (set (tuple21 c f)))
  (r (set (tuple21 (tuple21 c f) (tuple21 c f)))))
  (= (mem (set1 (tuple2 (tuple2 c1 f1) (tuple2 c1 f1))) (t2tb2956 r)
  (relation (tuple2 c1 f1) (tuple2 c1 f1) (t2tb2942 u) (t2tb2942 v)))
  (forall ((x (tuple21 c f)) (y (tuple21 c f)))
  (=> (mem (tuple2 (tuple2 c1 f1) (tuple2 c1 f1))
  (Tuple2 (tuple2 c1 f1) (tuple2 c1 f1) (t2tb2948 x) (t2tb2948 y))
  (t2tb2956 r)) (and (mem45 x u) (mem45 y v)))))))

(declare-fun t2tb3588 ((set (set (tuple21 (tuple21 c f) (tuple21 a
  e))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 c f) (tuple21 a e)))))) (sort
  (set1 (set1 (tuple2 (tuple2 c1 f1) (tuple2 a1 e1)))) (t2tb3588 x))))

(declare-fun tb2t3588 (uni) (set (set (tuple21 (tuple21 c f) (tuple21 a
  e)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 c f) (tuple21 a e))))))
  (! (= (tb2t3588 (t2tb3588 i)) i) :pattern ((t2tb3588 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 c1 f1) (tuple2 a1 e1)))) j)
     (= (t2tb3588 (tb2t3588 j)) j)) :pattern ((t2tb3588 (tb2t3588 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 c f))) (v (set (tuple21 a e)))
  (r (set (tuple21 (tuple21 c f) (tuple21 a e)))))
  (= (mem (set1 (tuple2 (tuple2 c1 f1) (tuple2 a1 e1))) (t2tb2958 r)
  (relation (tuple2 a1 e1) (tuple2 c1 f1) (t2tb2942 u) (t2tb2943 v)))
  (forall ((x (tuple21 c f)) (y (tuple21 a e)))
  (=> (mem (tuple2 (tuple2 c1 f1) (tuple2 a1 e1))
  (Tuple2 (tuple2 c1 f1) (tuple2 a1 e1) (t2tb2948 x) (t2tb2949 y))
  (t2tb2958 r)) (and (mem45 x u) (mem44 y v)))))))

(declare-fun t2tb3589 ((set (set (tuple21 (tuple21 c f) (tuple21 (tuple21 b
  d) (tuple21 e f)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 c f) (tuple21 (tuple21 b d)
  (tuple21 e f))))))) (sort
  (set1
  (set1 (tuple2 (tuple2 c1 f1) (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)))))
  (t2tb3589 x))))

(declare-fun tb2t3589 (uni) (set (set (tuple21 (tuple21 c f)
  (tuple21 (tuple21 b d) (tuple21 e f))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 c f) (tuple21 (tuple21 b d)
  (tuple21 e f)))))))
  (! (= (tb2t3589 (t2tb3589 i)) i) :pattern ((t2tb3589 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (set1 (tuple2 (tuple2 c1 f1) (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)))))
     j) (= (t2tb3589 (tb2t3589 j)) j)) :pattern ((t2tb3589 (tb2t3589 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 c f))) (v (set (tuple21 (tuple21 b d) (tuple21 e
  f)))) (r (set (tuple21 (tuple21 c f) (tuple21 (tuple21 b d) (tuple21 e
  f))))))
  (= (mem
  (set1 (tuple2 (tuple2 c1 f1) (tuple2 (tuple2 b1 d1) (tuple2 e1 f1))))
  (t2tb2960 r)
  (relation (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (tuple2 c1 f1)
  (t2tb2942 u) (t2tb2944 v)))
  (forall ((x (tuple21 c f)) (y (tuple21 (tuple21 b d) (tuple21 e f))))
  (=> (mem (tuple2 (tuple2 c1 f1) (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)))
  (Tuple2 (tuple2 c1 f1) (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (t2tb2948 x)
  (t2tb2950 y)) (t2tb2960 r)) (and (mem45 x u) (mem43 y v)))))))

(declare-fun t2tb3590 ((set (set (tuple21 (tuple21 c f) (tuple21 (tuple21 a
  c) (tuple21 e f)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 c f) (tuple21 (tuple21 a c)
  (tuple21 e f))))))) (sort
  (set1
  (set1 (tuple2 (tuple2 c1 f1) (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)))))
  (t2tb3590 x))))

(declare-fun tb2t3590 (uni) (set (set (tuple21 (tuple21 c f)
  (tuple21 (tuple21 a c) (tuple21 e f))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 c f) (tuple21 (tuple21 a c)
  (tuple21 e f)))))))
  (! (= (tb2t3590 (t2tb3590 i)) i) :pattern ((t2tb3590 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (set1 (tuple2 (tuple2 c1 f1) (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)))))
     j) (= (t2tb3590 (tb2t3590 j)) j)) :pattern ((t2tb3590 (tb2t3590 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 c f))) (v (set (tuple21 (tuple21 a c) (tuple21 e
  f)))) (r (set (tuple21 (tuple21 c f) (tuple21 (tuple21 a c) (tuple21 e
  f))))))
  (= (mem
  (set1 (tuple2 (tuple2 c1 f1) (tuple2 (tuple2 a1 c1) (tuple2 e1 f1))))
  (t2tb2962 r)
  (relation (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (tuple2 c1 f1)
  (t2tb2942 u) (t2tb2945 v)))
  (forall ((x (tuple21 c f)) (y (tuple21 (tuple21 a c) (tuple21 e f))))
  (=> (mem (tuple2 (tuple2 c1 f1) (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)))
  (Tuple2 (tuple2 c1 f1) (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (t2tb2948 x)
  (t2tb2951 y)) (t2tb2962 r)) (and (mem45 x u) (mem42 y v)))))))

(declare-fun t2tb3591 ((set (set (tuple21 (tuple21 c f) (set (tuple21 d
  f)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 c f) (set (tuple21 d f))))))) (sort
  (set1 (set1 (tuple2 (tuple2 c1 f1) (set1 (tuple2 d1 f1))))) (t2tb3591 x))))

(declare-fun tb2t3591 (uni) (set (set (tuple21 (tuple21 c f) (set (tuple21 d
  f))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 c f) (set (tuple21 d f)))))))
  (! (= (tb2t3591 (t2tb3591 i)) i) :pattern ((t2tb3591 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 c1 f1) (set1 (tuple2 d1 f1))))) j)
     (= (t2tb3591 (tb2t3591 j)) j)) :pattern ((t2tb3591 (tb2t3591 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 c f))) (v (set (set (tuple21 d f))))
  (r (set (tuple21 (tuple21 c f) (set (tuple21 d f))))))
  (= (mem (set1 (tuple2 (tuple2 c1 f1) (set1 (tuple2 d1 f1)))) (t2tb2964 r)
  (relation (set1 (tuple2 d1 f1)) (tuple2 c1 f1) (t2tb2942 u) (t2tb2939 v)))
  (forall ((x (tuple21 c f)) (y (set (tuple21 d f))))
  (=> (mem (tuple2 (tuple2 c1 f1) (set1 (tuple2 d1 f1)))
  (Tuple2 (tuple2 c1 f1) (set1 (tuple2 d1 f1)) (t2tb2948 x) (t2tb2938 y))
  (t2tb2964 r)) (and (mem45 x u) (mem41 y v)))))))

(declare-fun t2tb3592 ((set (set (tuple21 (tuple21 c f) (tuple21 d
  f))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 c f) (tuple21 d f)))))) (sort
  (set1 (set1 (tuple2 (tuple2 c1 f1) (tuple2 d1 f1)))) (t2tb3592 x))))

(declare-fun tb2t3592 (uni) (set (set (tuple21 (tuple21 c f) (tuple21 d
  f)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 c f) (tuple21 d f))))))
  (! (= (tb2t3592 (t2tb3592 i)) i) :pattern ((t2tb3592 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 c1 f1) (tuple2 d1 f1)))) j)
     (= (t2tb3592 (tb2t3592 j)) j)) :pattern ((t2tb3592 (tb2t3592 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 c f))) (v (set (tuple21 d f)))
  (r (set (tuple21 (tuple21 c f) (tuple21 d f)))))
  (= (mem (set1 (tuple2 (tuple2 c1 f1) (tuple2 d1 f1))) (t2tb2966 r)
  (relation (tuple2 d1 f1) (tuple2 c1 f1) (t2tb2942 u) (t2tb2938 v)))
  (forall ((x (tuple21 c f)) (y (tuple21 d f)))
  (=> (mem (tuple2 (tuple2 c1 f1) (tuple2 d1 f1))
  (Tuple2 (tuple2 c1 f1) (tuple2 d1 f1) (t2tb2948 x) (t2tb2952 y))
  (t2tb2966 r)) (and (mem45 x u) (mem40 y v)))))))

(declare-fun t2tb3593 ((set (set (tuple21 (tuple21 c f) (set (tuple21 b
  e)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 c f) (set (tuple21 b e))))))) (sort
  (set1 (set1 (tuple2 (tuple2 c1 f1) (set1 (tuple2 b1 e1))))) (t2tb3593 x))))

(declare-fun tb2t3593 (uni) (set (set (tuple21 (tuple21 c f) (set (tuple21 b
  e))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 c f) (set (tuple21 b e)))))))
  (! (= (tb2t3593 (t2tb3593 i)) i) :pattern ((t2tb3593 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 c1 f1) (set1 (tuple2 b1 e1))))) j)
     (= (t2tb3593 (tb2t3593 j)) j)) :pattern ((t2tb3593 (tb2t3593 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 c f))) (v (set (set (tuple21 b e))))
  (r (set (tuple21 (tuple21 c f) (set (tuple21 b e))))))
  (= (mem (set1 (tuple2 (tuple2 c1 f1) (set1 (tuple2 b1 e1)))) (t2tb2968 r)
  (relation (set1 (tuple2 b1 e1)) (tuple2 c1 f1) (t2tb2942 u) (t2tb2941 v)))
  (forall ((x (tuple21 c f)) (y (set (tuple21 b e))))
  (=> (mem (tuple2 (tuple2 c1 f1) (set1 (tuple2 b1 e1)))
  (Tuple2 (tuple2 c1 f1) (set1 (tuple2 b1 e1)) (t2tb2948 x) (t2tb2940 y))
  (t2tb2968 r)) (and (mem45 x u) (mem39 y v)))))))

(declare-fun t2tb3594 ((set (set (tuple21 (tuple21 c f) (tuple21 b
  e))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 c f) (tuple21 b e)))))) (sort
  (set1 (set1 (tuple2 (tuple2 c1 f1) (tuple2 b1 e1)))) (t2tb3594 x))))

(declare-fun tb2t3594 (uni) (set (set (tuple21 (tuple21 c f) (tuple21 b
  e)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 c f) (tuple21 b e))))))
  (! (= (tb2t3594 (t2tb3594 i)) i) :pattern ((t2tb3594 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 c1 f1) (tuple2 b1 e1)))) j)
     (= (t2tb3594 (tb2t3594 j)) j)) :pattern ((t2tb3594 (tb2t3594 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 c f))) (v (set (tuple21 b e)))
  (r (set (tuple21 (tuple21 c f) (tuple21 b e)))))
  (= (mem (set1 (tuple2 (tuple2 c1 f1) (tuple2 b1 e1))) (t2tb2970 r)
  (relation (tuple2 b1 e1) (tuple2 c1 f1) (t2tb2942 u) (t2tb2940 v)))
  (forall ((x (tuple21 c f)) (y (tuple21 b e)))
  (=> (mem (tuple2 (tuple2 c1 f1) (tuple2 b1 e1))
  (Tuple2 (tuple2 c1 f1) (tuple2 b1 e1) (t2tb2948 x) (t2tb2953 y))
  (t2tb2970 r)) (and (mem45 x u) (mem38 y v)))))))

(declare-fun t2tb3595 ((set (set (tuple21 (tuple21 c f) f)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 c f) f))))) (sort
  (set1 (set1 (tuple2 (tuple2 c1 f1) f1))) (t2tb3595 x))))

(declare-fun tb2t3595 (uni) (set (set (tuple21 (tuple21 c f) f))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 c f) f)))))
  (! (= (tb2t3595 (t2tb3595 i)) i) :pattern ((t2tb3595 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 c1 f1) f1))) j)
     (= (t2tb3595 (tb2t3595 j)) j)) :pattern ((t2tb3595 (tb2t3595 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 c f))) (v (set f)) (r (set (tuple21 (tuple21 c f)
  f))))
  (= (mem (set1 (tuple2 (tuple2 c1 f1) f1)) (t2tb2972 r)
  (relation f1 (tuple2 c1 f1) (t2tb2942 u) (t2tb2946 v)))
  (forall ((x (tuple21 c f)) (y f))
  (=> (mem (tuple2 (tuple2 c1 f1) f1)
  (Tuple2 (tuple2 c1 f1) f1 (t2tb2948 x) (t2tb2954 y)) (t2tb2972 r))
  (and (mem45 x u) (mem37 y v)))))))

(declare-fun t2tb3596 ((set (set (tuple21 (tuple21 c f) e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 c f) e))))) (sort
  (set1 (set1 (tuple2 (tuple2 c1 f1) e1))) (t2tb3596 x))))

(declare-fun tb2t3596 (uni) (set (set (tuple21 (tuple21 c f) e))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 c f) e)))))
  (! (= (tb2t3596 (t2tb3596 i)) i) :pattern ((t2tb3596 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 c1 f1) e1))) j)
     (= (t2tb3596 (tb2t3596 j)) j)) :pattern ((t2tb3596 (tb2t3596 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 c f))) (v (set e)) (r (set (tuple21 (tuple21 c f)
  e))))
  (= (mem (set1 (tuple2 (tuple2 c1 f1) e1)) (t2tb2974 r)
  (relation e1 (tuple2 c1 f1) (t2tb2942 u) (t2tb2947 v)))
  (forall ((x (tuple21 c f)) (y e))
  (=> (mem (tuple2 (tuple2 c1 f1) e1)
  (Tuple2 (tuple2 c1 f1) e1 (t2tb2948 x) (t2tb2955 y)) (t2tb2974 r))
  (and (mem45 x u) (mem36 y v)))))))

(declare-fun t2tb3597 ((set (set (tuple21 (tuple21 c f) (tuple21 (tuple21 a
  c) (tuple21 b d)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 c f) (tuple21 (tuple21 a c)
  (tuple21 b d))))))) (sort
  (set1
  (set1 (tuple2 (tuple2 c1 f1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))))
  (t2tb3597 x))))

(declare-fun tb2t3597 (uni) (set (set (tuple21 (tuple21 c f)
  (tuple21 (tuple21 a c) (tuple21 b d))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 c f) (tuple21 (tuple21 a c)
  (tuple21 b d)))))))
  (! (= (tb2t3597 (t2tb3597 i)) i) :pattern ((t2tb3597 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (set1 (tuple2 (tuple2 c1 f1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))))
     j) (= (t2tb3597 (tb2t3597 j)) j)) :pattern ((t2tb3597 (tb2t3597 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 c f))) (v (set (tuple21 (tuple21 a c) (tuple21 b
  d)))) (r (set (tuple21 (tuple21 c f) (tuple21 (tuple21 a c) (tuple21 b
  d))))))
  (= (mem
  (set1 (tuple2 (tuple2 c1 f1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))))
  (t2tb2976 r)
  (relation (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 c1 f1)
  (t2tb2942 u) (t2tb686 v)))
  (forall ((x (tuple21 c f)) (y (tuple21 (tuple21 a c) (tuple21 b d))))
  (=> (mem (tuple2 (tuple2 c1 f1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
  (Tuple2 (tuple2 c1 f1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb2948 x)
  (t2tb691 y)) (t2tb2976 r)) (and (mem45 x u) (mem24 y v)))))))

(declare-fun t2tb3598 ((set (set (tuple21 (tuple21 c f) (set (tuple21 c
  d)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 c f) (set (tuple21 c d))))))) (sort
  (set1 (set1 (tuple2 (tuple2 c1 f1) (set1 (tuple2 c1 d1))))) (t2tb3598 x))))

(declare-fun tb2t3598 (uni) (set (set (tuple21 (tuple21 c f) (set (tuple21 c
  d))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 c f) (set (tuple21 c d)))))))
  (! (= (tb2t3598 (t2tb3598 i)) i) :pattern ((t2tb3598 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 c1 f1) (set1 (tuple2 c1 d1))))) j)
     (= (t2tb3598 (tb2t3598 j)) j)) :pattern ((t2tb3598 (tb2t3598 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 c f))) (v (set (set (tuple21 c d))))
  (r (set (tuple21 (tuple21 c f) (set (tuple21 c d))))))
  (= (mem (set1 (tuple2 (tuple2 c1 f1) (set1 (tuple2 c1 d1)))) (t2tb2978 r)
  (relation (set1 (tuple2 c1 d1)) (tuple2 c1 f1) (t2tb2942 u) (t2tb688 v)))
  (forall ((x (tuple21 c f)) (y (set (tuple21 c d))))
  (=> (mem (tuple2 (tuple2 c1 f1) (set1 (tuple2 c1 d1)))
  (Tuple2 (tuple2 c1 f1) (set1 (tuple2 c1 d1)) (t2tb2948 x) (t2tb689 y))
  (t2tb2978 r)) (and (mem45 x u) (mem22 y v)))))))

(declare-fun t2tb3599 ((set (set (tuple21 (tuple21 c f) (tuple21 c
  d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 c f) (tuple21 c d)))))) (sort
  (set1 (set1 (tuple2 (tuple2 c1 f1) (tuple2 c1 d1)))) (t2tb3599 x))))

(declare-fun tb2t3599 (uni) (set (set (tuple21 (tuple21 c f) (tuple21 c
  d)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 c f) (tuple21 c d))))))
  (! (= (tb2t3599 (t2tb3599 i)) i) :pattern ((t2tb3599 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 c1 f1) (tuple2 c1 d1)))) j)
     (= (t2tb3599 (tb2t3599 j)) j)) :pattern ((t2tb3599 (tb2t3599 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 c f))) (v (set (tuple21 c d)))
  (r (set (tuple21 (tuple21 c f) (tuple21 c d)))))
  (= (mem (set1 (tuple2 (tuple2 c1 f1) (tuple2 c1 d1))) (t2tb2980 r)
  (relation (tuple2 c1 d1) (tuple2 c1 f1) (t2tb2942 u) (t2tb689 v)))
  (forall ((x (tuple21 c f)) (y (tuple21 c d)))
  (=> (mem (tuple2 (tuple2 c1 f1) (tuple2 c1 d1))
  (Tuple2 (tuple2 c1 f1) (tuple2 c1 d1) (t2tb2948 x) (t2tb693 y))
  (t2tb2980 r)) (and (mem45 x u) (mem21 y v)))))))

(declare-fun t2tb3600 ((set (set (tuple21 (tuple21 c f) d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 c f) d))))) (sort
  (set1 (set1 (tuple2 (tuple2 c1 f1) d1))) (t2tb3600 x))))

(declare-fun tb2t3600 (uni) (set (set (tuple21 (tuple21 c f) d))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 c f) d)))))
  (! (= (tb2t3600 (t2tb3600 i)) i) :pattern ((t2tb3600 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 c1 f1) d1))) j)
     (= (t2tb3600 (tb2t3600 j)) j)) :pattern ((t2tb3600 (tb2t3600 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 c f))) (v (set d)) (r (set (tuple21 (tuple21 c f)
  d))))
  (= (mem (set1 (tuple2 (tuple2 c1 f1) d1)) (t2tb2982 r)
  (relation d1 (tuple2 c1 f1) (t2tb2942 u) (t2tb690 v)))
  (forall ((x (tuple21 c f)) (y d))
  (=> (mem (tuple2 (tuple2 c1 f1) d1)
  (Tuple2 (tuple2 c1 f1) d1 (t2tb2948 x) (t2tb694 y)) (t2tb2982 r))
  (and (mem45 x u) (mem20 y v)))))))

(declare-fun t2tb3601 ((set (set (tuple21 (tuple21 c f) c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 c f) c))))) (sort
  (set1 (set1 (tuple2 (tuple2 c1 f1) c1))) (t2tb3601 x))))

(declare-fun tb2t3601 (uni) (set (set (tuple21 (tuple21 c f) c))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 c f) c)))))
  (! (= (tb2t3601 (t2tb3601 i)) i) :pattern ((t2tb3601 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 c1 f1) c1))) j)
     (= (t2tb3601 (tb2t3601 j)) j)) :pattern ((t2tb3601 (tb2t3601 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 c f))) (v (set c)) (r (set (tuple21 (tuple21 c f)
  c))))
  (= (mem (set1 (tuple2 (tuple2 c1 f1) c1)) (t2tb2984 r)
  (relation c1 (tuple2 c1 f1) (t2tb2942 u) (t2tb132 v)))
  (forall ((x (tuple21 c f)) (y c))
  (=> (mem (tuple2 (tuple2 c1 f1) c1)
  (Tuple2 (tuple2 c1 f1) c1 (t2tb2948 x) (t2tb135 y)) (t2tb2984 r))
  (and (mem45 x u) (mem7 y v)))))))

(declare-fun t2tb3602 ((set (set (tuple21 (tuple21 c f) (set (tuple21 a
  b)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 c f) (set (tuple21 a b))))))) (sort
  (set1 (set1 (tuple2 (tuple2 c1 f1) (set1 (tuple2 a1 b1))))) (t2tb3602 x))))

(declare-fun tb2t3602 (uni) (set (set (tuple21 (tuple21 c f) (set (tuple21 a
  b))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 c f) (set (tuple21 a b)))))))
  (! (= (tb2t3602 (t2tb3602 i)) i) :pattern ((t2tb3602 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 c1 f1) (set1 (tuple2 a1 b1))))) j)
     (= (t2tb3602 (tb2t3602 j)) j)) :pattern ((t2tb3602 (tb2t3602 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 c f))) (v (set (set (tuple21 a b))))
  (r (set (tuple21 (tuple21 c f) (set (tuple21 a b))))))
  (= (mem (set1 (tuple2 (tuple2 c1 f1) (set1 (tuple2 a1 b1)))) (t2tb2986 r)
  (relation (set1 (tuple2 a1 b1)) (tuple2 c1 f1) (t2tb2942 u) (t2tb10 v)))
  (forall ((x (tuple21 c f)) (y (set (tuple21 a b))))
  (=> (mem (tuple2 (tuple2 c1 f1) (set1 (tuple2 a1 b1)))
  (Tuple2 (tuple2 c1 f1) (set1 (tuple2 a1 b1)) (t2tb2948 x) (t2tb11 y))
  (t2tb2986 r)) (and (mem45 x u) (mem4 y v)))))))

(declare-fun t2tb3603 ((set (set (tuple21 (tuple21 c f) (tuple21 a
  b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 c f) (tuple21 a b)))))) (sort
  (set1 (set1 (tuple2 (tuple2 c1 f1) (tuple2 a1 b1)))) (t2tb3603 x))))

(declare-fun tb2t3603 (uni) (set (set (tuple21 (tuple21 c f) (tuple21 a
  b)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 c f) (tuple21 a b))))))
  (! (= (tb2t3603 (t2tb3603 i)) i) :pattern ((t2tb3603 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 c1 f1) (tuple2 a1 b1)))) j)
     (= (t2tb3603 (tb2t3603 j)) j)) :pattern ((t2tb3603 (tb2t3603 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 c f))) (v (set (tuple21 a b)))
  (r (set (tuple21 (tuple21 c f) (tuple21 a b)))))
  (= (mem (set1 (tuple2 (tuple2 c1 f1) (tuple2 a1 b1))) (t2tb2988 r)
  (relation (tuple2 a1 b1) (tuple2 c1 f1) (t2tb2942 u) (t2tb11 v)))
  (forall ((x (tuple21 c f)) (y (tuple21 a b)))
  (=> (mem (tuple2 (tuple2 c1 f1) (tuple2 a1 b1))
  (Tuple2 (tuple2 c1 f1) (tuple2 a1 b1) (t2tb2948 x) (t2tb13 y))
  (t2tb2988 r)) (and (mem45 x u) (mem3 y v)))))))

(declare-fun t2tb3604 ((set (set (tuple21 (tuple21 c f) b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 c f) b))))) (sort
  (set1 (set1 (tuple2 (tuple2 c1 f1) b1))) (t2tb3604 x))))

(declare-fun tb2t3604 (uni) (set (set (tuple21 (tuple21 c f) b))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 c f) b)))))
  (! (= (tb2t3604 (t2tb3604 i)) i) :pattern ((t2tb3604 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 c1 f1) b1))) j)
     (= (t2tb3604 (tb2t3604 j)) j)) :pattern ((t2tb3604 (tb2t3604 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 c f))) (v (set b)) (r (set (tuple21 (tuple21 c f)
  b))))
  (= (mem (set1 (tuple2 (tuple2 c1 f1) b1)) (t2tb2990 r)
  (relation b1 (tuple2 c1 f1) (t2tb2942 u) (t2tb12 v)))
  (forall ((x (tuple21 c f)) (y b))
  (=> (mem (tuple2 (tuple2 c1 f1) b1)
  (Tuple2 (tuple2 c1 f1) b1 (t2tb2948 x) (t2tb14 y)) (t2tb2990 r))
  (and (mem45 x u) (mem2 y v)))))))

(declare-fun t2tb3605 ((set (set (tuple21 (tuple21 c f) a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 c f) a))))) (sort
  (set1 (set1 (tuple2 (tuple2 c1 f1) a1))) (t2tb3605 x))))

(declare-fun tb2t3605 (uni) (set (set (tuple21 (tuple21 c f) a))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 c f) a)))))
  (! (= (tb2t3605 (t2tb3605 i)) i) :pattern ((t2tb3605 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 c1 f1) a1))) j)
     (= (t2tb3605 (tb2t3605 j)) j)) :pattern ((t2tb3605 (tb2t3605 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 c f))) (v (set a)) (r (set (tuple21 (tuple21 c f)
  a))))
  (= (mem (set1 (tuple2 (tuple2 c1 f1) a1)) (t2tb2992 r)
  (relation a1 (tuple2 c1 f1) (t2tb2942 u) (t2tb1 v)))
  (forall ((x (tuple21 c f)) (y a))
  (=> (mem (tuple2 (tuple2 c1 f1) a1)
  (Tuple2 (tuple2 c1 f1) a1 (t2tb2948 x) (t2tb2 y)) (t2tb2992 r))
  (and (mem45 x u) (mem1 y v)))))))

;; mem_relation
  (assert
  (forall ((b2 ty))
  (forall ((u (set (tuple21 c f))) (v uni) (r uni))
  (and
  (=> (mem (set1 (tuple2 (tuple2 c1 f1) b2)) r
  (relation b2 (tuple2 c1 f1) (t2tb2942 u) v))
  (forall ((x (tuple21 c f)) (y uni))
  (=> (mem (tuple2 (tuple2 c1 f1) b2)
  (Tuple2 (tuple2 c1 f1) b2 (t2tb2948 x) y) r)
  (and (mem45 x u) (mem b2 y v)))))
  (=>
  (forall ((x (tuple21 c f)) (y uni))
  (=> (sort b2 y)
  (=> (mem (tuple2 (tuple2 c1 f1) b2)
  (Tuple2 (tuple2 c1 f1) b2 (t2tb2948 x) y) r)
  (and (mem45 x u) (mem b2 y v))))) (mem (set1 (tuple2 (tuple2 c1 f1) b2)) r
  (relation b2 (tuple2 c1 f1) (t2tb2942 u) v)))))))

(declare-fun t2tb3606 ((set (set (tuple21 (tuple21 a e) (tuple21 c
  f))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a e) (tuple21 c f)))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 e1) (tuple2 c1 f1)))) (t2tb3606 x))))

(declare-fun tb2t3606 (uni) (set (set (tuple21 (tuple21 a e) (tuple21 c
  f)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a e) (tuple21 c f))))))
  (! (= (tb2t3606 (t2tb3606 i)) i) :pattern ((t2tb3606 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 e1) (tuple2 c1 f1)))) j)
     (= (t2tb3606 (tb2t3606 j)) j)) :pattern ((t2tb3606 (tb2t3606 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a e))) (v (set (tuple21 c f)))
  (r (set (tuple21 (tuple21 a e) (tuple21 c f)))))
  (= (mem (set1 (tuple2 (tuple2 a1 e1) (tuple2 c1 f1))) (t2tb2994 r)
  (relation (tuple2 c1 f1) (tuple2 a1 e1) (t2tb2943 u) (t2tb2942 v)))
  (forall ((x (tuple21 a e)) (y (tuple21 c f)))
  (=> (mem (tuple2 (tuple2 a1 e1) (tuple2 c1 f1))
  (Tuple2 (tuple2 a1 e1) (tuple2 c1 f1) (t2tb2949 x) (t2tb2948 y))
  (t2tb2994 r)) (and (mem44 x u) (mem45 y v)))))))

(declare-fun t2tb3607 ((set (set (tuple21 (tuple21 a e) (tuple21 a
  e))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a e) (tuple21 a e)))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 e1) (tuple2 a1 e1)))) (t2tb3607 x))))

(declare-fun tb2t3607 (uni) (set (set (tuple21 (tuple21 a e) (tuple21 a
  e)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a e) (tuple21 a e))))))
  (! (= (tb2t3607 (t2tb3607 i)) i) :pattern ((t2tb3607 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 e1) (tuple2 a1 e1)))) j)
     (= (t2tb3607 (tb2t3607 j)) j)) :pattern ((t2tb3607 (tb2t3607 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a e))) (v (set (tuple21 a e)))
  (r (set (tuple21 (tuple21 a e) (tuple21 a e)))))
  (= (mem (set1 (tuple2 (tuple2 a1 e1) (tuple2 a1 e1))) (t2tb2996 r)
  (relation (tuple2 a1 e1) (tuple2 a1 e1) (t2tb2943 u) (t2tb2943 v)))
  (forall ((x (tuple21 a e)) (y (tuple21 a e)))
  (=> (mem (tuple2 (tuple2 a1 e1) (tuple2 a1 e1))
  (Tuple2 (tuple2 a1 e1) (tuple2 a1 e1) (t2tb2949 x) (t2tb2949 y))
  (t2tb2996 r)) (and (mem44 x u) (mem44 y v)))))))

(declare-fun t2tb3608 ((set (set (tuple21 (tuple21 a e) (tuple21 (tuple21 b
  d) (tuple21 e f)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a e) (tuple21 (tuple21 b d)
  (tuple21 e f))))))) (sort
  (set1
  (set1 (tuple2 (tuple2 a1 e1) (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)))))
  (t2tb3608 x))))

(declare-fun tb2t3608 (uni) (set (set (tuple21 (tuple21 a e)
  (tuple21 (tuple21 b d) (tuple21 e f))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a e) (tuple21 (tuple21 b d)
  (tuple21 e f)))))))
  (! (= (tb2t3608 (t2tb3608 i)) i) :pattern ((t2tb3608 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (set1 (tuple2 (tuple2 a1 e1) (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)))))
     j) (= (t2tb3608 (tb2t3608 j)) j)) :pattern ((t2tb3608 (tb2t3608 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a e))) (v (set (tuple21 (tuple21 b d) (tuple21 e
  f)))) (r (set (tuple21 (tuple21 a e) (tuple21 (tuple21 b d) (tuple21 e
  f))))))
  (= (mem
  (set1 (tuple2 (tuple2 a1 e1) (tuple2 (tuple2 b1 d1) (tuple2 e1 f1))))
  (t2tb2998 r)
  (relation (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (tuple2 a1 e1)
  (t2tb2943 u) (t2tb2944 v)))
  (forall ((x (tuple21 a e)) (y (tuple21 (tuple21 b d) (tuple21 e f))))
  (=> (mem (tuple2 (tuple2 a1 e1) (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)))
  (Tuple2 (tuple2 a1 e1) (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (t2tb2949 x)
  (t2tb2950 y)) (t2tb2998 r)) (and (mem44 x u) (mem43 y v)))))))

(declare-fun t2tb3609 ((set (set (tuple21 (tuple21 a e) (tuple21 (tuple21 a
  c) (tuple21 e f)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a e) (tuple21 (tuple21 a c)
  (tuple21 e f))))))) (sort
  (set1
  (set1 (tuple2 (tuple2 a1 e1) (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)))))
  (t2tb3609 x))))

(declare-fun tb2t3609 (uni) (set (set (tuple21 (tuple21 a e)
  (tuple21 (tuple21 a c) (tuple21 e f))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a e) (tuple21 (tuple21 a c)
  (tuple21 e f)))))))
  (! (= (tb2t3609 (t2tb3609 i)) i) :pattern ((t2tb3609 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (set1 (tuple2 (tuple2 a1 e1) (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)))))
     j) (= (t2tb3609 (tb2t3609 j)) j)) :pattern ((t2tb3609 (tb2t3609 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a e))) (v (set (tuple21 (tuple21 a c) (tuple21 e
  f)))) (r (set (tuple21 (tuple21 a e) (tuple21 (tuple21 a c) (tuple21 e
  f))))))
  (= (mem
  (set1 (tuple2 (tuple2 a1 e1) (tuple2 (tuple2 a1 c1) (tuple2 e1 f1))))
  (t2tb3000 r)
  (relation (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (tuple2 a1 e1)
  (t2tb2943 u) (t2tb2945 v)))
  (forall ((x (tuple21 a e)) (y (tuple21 (tuple21 a c) (tuple21 e f))))
  (=> (mem (tuple2 (tuple2 a1 e1) (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)))
  (Tuple2 (tuple2 a1 e1) (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (t2tb2949 x)
  (t2tb2951 y)) (t2tb3000 r)) (and (mem44 x u) (mem42 y v)))))))

(declare-fun t2tb3610 ((set (set (tuple21 (tuple21 a e) (set (tuple21 d
  f)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a e) (set (tuple21 d f))))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 e1) (set1 (tuple2 d1 f1))))) (t2tb3610 x))))

(declare-fun tb2t3610 (uni) (set (set (tuple21 (tuple21 a e) (set (tuple21 d
  f))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a e) (set (tuple21 d f)))))))
  (! (= (tb2t3610 (t2tb3610 i)) i) :pattern ((t2tb3610 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 e1) (set1 (tuple2 d1 f1))))) j)
     (= (t2tb3610 (tb2t3610 j)) j)) :pattern ((t2tb3610 (tb2t3610 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a e))) (v (set (set (tuple21 d f))))
  (r (set (tuple21 (tuple21 a e) (set (tuple21 d f))))))
  (= (mem (set1 (tuple2 (tuple2 a1 e1) (set1 (tuple2 d1 f1)))) (t2tb3002 r)
  (relation (set1 (tuple2 d1 f1)) (tuple2 a1 e1) (t2tb2943 u) (t2tb2939 v)))
  (forall ((x (tuple21 a e)) (y (set (tuple21 d f))))
  (=> (mem (tuple2 (tuple2 a1 e1) (set1 (tuple2 d1 f1)))
  (Tuple2 (tuple2 a1 e1) (set1 (tuple2 d1 f1)) (t2tb2949 x) (t2tb2938 y))
  (t2tb3002 r)) (and (mem44 x u) (mem41 y v)))))))

(declare-fun t2tb3611 ((set (set (tuple21 (tuple21 a e) (tuple21 d
  f))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a e) (tuple21 d f)))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 e1) (tuple2 d1 f1)))) (t2tb3611 x))))

(declare-fun tb2t3611 (uni) (set (set (tuple21 (tuple21 a e) (tuple21 d
  f)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a e) (tuple21 d f))))))
  (! (= (tb2t3611 (t2tb3611 i)) i) :pattern ((t2tb3611 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 e1) (tuple2 d1 f1)))) j)
     (= (t2tb3611 (tb2t3611 j)) j)) :pattern ((t2tb3611 (tb2t3611 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a e))) (v (set (tuple21 d f)))
  (r (set (tuple21 (tuple21 a e) (tuple21 d f)))))
  (= (mem (set1 (tuple2 (tuple2 a1 e1) (tuple2 d1 f1))) (t2tb3004 r)
  (relation (tuple2 d1 f1) (tuple2 a1 e1) (t2tb2943 u) (t2tb2938 v)))
  (forall ((x (tuple21 a e)) (y (tuple21 d f)))
  (=> (mem (tuple2 (tuple2 a1 e1) (tuple2 d1 f1))
  (Tuple2 (tuple2 a1 e1) (tuple2 d1 f1) (t2tb2949 x) (t2tb2952 y))
  (t2tb3004 r)) (and (mem44 x u) (mem40 y v)))))))

(declare-fun t2tb3612 ((set (set (tuple21 (tuple21 a e) (set (tuple21 b
  e)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a e) (set (tuple21 b e))))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 e1) (set1 (tuple2 b1 e1))))) (t2tb3612 x))))

(declare-fun tb2t3612 (uni) (set (set (tuple21 (tuple21 a e) (set (tuple21 b
  e))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a e) (set (tuple21 b e)))))))
  (! (= (tb2t3612 (t2tb3612 i)) i) :pattern ((t2tb3612 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 e1) (set1 (tuple2 b1 e1))))) j)
     (= (t2tb3612 (tb2t3612 j)) j)) :pattern ((t2tb3612 (tb2t3612 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a e))) (v (set (set (tuple21 b e))))
  (r (set (tuple21 (tuple21 a e) (set (tuple21 b e))))))
  (= (mem (set1 (tuple2 (tuple2 a1 e1) (set1 (tuple2 b1 e1)))) (t2tb3006 r)
  (relation (set1 (tuple2 b1 e1)) (tuple2 a1 e1) (t2tb2943 u) (t2tb2941 v)))
  (forall ((x (tuple21 a e)) (y (set (tuple21 b e))))
  (=> (mem (tuple2 (tuple2 a1 e1) (set1 (tuple2 b1 e1)))
  (Tuple2 (tuple2 a1 e1) (set1 (tuple2 b1 e1)) (t2tb2949 x) (t2tb2940 y))
  (t2tb3006 r)) (and (mem44 x u) (mem39 y v)))))))

(declare-fun t2tb3613 ((set (set (tuple21 (tuple21 a e) (tuple21 b
  e))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a e) (tuple21 b e)))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 e1) (tuple2 b1 e1)))) (t2tb3613 x))))

(declare-fun tb2t3613 (uni) (set (set (tuple21 (tuple21 a e) (tuple21 b
  e)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a e) (tuple21 b e))))))
  (! (= (tb2t3613 (t2tb3613 i)) i) :pattern ((t2tb3613 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 e1) (tuple2 b1 e1)))) j)
     (= (t2tb3613 (tb2t3613 j)) j)) :pattern ((t2tb3613 (tb2t3613 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a e))) (v (set (tuple21 b e)))
  (r (set (tuple21 (tuple21 a e) (tuple21 b e)))))
  (= (mem (set1 (tuple2 (tuple2 a1 e1) (tuple2 b1 e1))) (t2tb3008 r)
  (relation (tuple2 b1 e1) (tuple2 a1 e1) (t2tb2943 u) (t2tb2940 v)))
  (forall ((x (tuple21 a e)) (y (tuple21 b e)))
  (=> (mem (tuple2 (tuple2 a1 e1) (tuple2 b1 e1))
  (Tuple2 (tuple2 a1 e1) (tuple2 b1 e1) (t2tb2949 x) (t2tb2953 y))
  (t2tb3008 r)) (and (mem44 x u) (mem38 y v)))))))

(declare-fun t2tb3614 ((set (set (tuple21 (tuple21 a e) f)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a e) f))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 e1) f1))) (t2tb3614 x))))

(declare-fun tb2t3614 (uni) (set (set (tuple21 (tuple21 a e) f))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a e) f)))))
  (! (= (tb2t3614 (t2tb3614 i)) i) :pattern ((t2tb3614 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 e1) f1))) j)
     (= (t2tb3614 (tb2t3614 j)) j)) :pattern ((t2tb3614 (tb2t3614 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a e))) (v (set f)) (r (set (tuple21 (tuple21 a e)
  f))))
  (= (mem (set1 (tuple2 (tuple2 a1 e1) f1)) (t2tb3010 r)
  (relation f1 (tuple2 a1 e1) (t2tb2943 u) (t2tb2946 v)))
  (forall ((x (tuple21 a e)) (y f))
  (=> (mem (tuple2 (tuple2 a1 e1) f1)
  (Tuple2 (tuple2 a1 e1) f1 (t2tb2949 x) (t2tb2954 y)) (t2tb3010 r))
  (and (mem44 x u) (mem37 y v)))))))

(declare-fun t2tb3615 ((set (set (tuple21 (tuple21 a e) e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a e) e))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 e1) e1))) (t2tb3615 x))))

(declare-fun tb2t3615 (uni) (set (set (tuple21 (tuple21 a e) e))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a e) e)))))
  (! (= (tb2t3615 (t2tb3615 i)) i) :pattern ((t2tb3615 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 e1) e1))) j)
     (= (t2tb3615 (tb2t3615 j)) j)) :pattern ((t2tb3615 (tb2t3615 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a e))) (v (set e)) (r (set (tuple21 (tuple21 a e)
  e))))
  (= (mem (set1 (tuple2 (tuple2 a1 e1) e1)) (t2tb3012 r)
  (relation e1 (tuple2 a1 e1) (t2tb2943 u) (t2tb2947 v)))
  (forall ((x (tuple21 a e)) (y e))
  (=> (mem (tuple2 (tuple2 a1 e1) e1)
  (Tuple2 (tuple2 a1 e1) e1 (t2tb2949 x) (t2tb2955 y)) (t2tb3012 r))
  (and (mem44 x u) (mem36 y v)))))))

(declare-fun t2tb3616 ((set (set (tuple21 (tuple21 a e) (tuple21 (tuple21 a
  c) (tuple21 b d)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a e) (tuple21 (tuple21 a c)
  (tuple21 b d))))))) (sort
  (set1
  (set1 (tuple2 (tuple2 a1 e1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))))
  (t2tb3616 x))))

(declare-fun tb2t3616 (uni) (set (set (tuple21 (tuple21 a e)
  (tuple21 (tuple21 a c) (tuple21 b d))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a e) (tuple21 (tuple21 a c)
  (tuple21 b d)))))))
  (! (= (tb2t3616 (t2tb3616 i)) i) :pattern ((t2tb3616 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (set1 (tuple2 (tuple2 a1 e1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))))
     j) (= (t2tb3616 (tb2t3616 j)) j)) :pattern ((t2tb3616 (tb2t3616 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a e))) (v (set (tuple21 (tuple21 a c) (tuple21 b
  d)))) (r (set (tuple21 (tuple21 a e) (tuple21 (tuple21 a c) (tuple21 b
  d))))))
  (= (mem
  (set1 (tuple2 (tuple2 a1 e1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))))
  (t2tb3014 r)
  (relation (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 a1 e1)
  (t2tb2943 u) (t2tb686 v)))
  (forall ((x (tuple21 a e)) (y (tuple21 (tuple21 a c) (tuple21 b d))))
  (=> (mem (tuple2 (tuple2 a1 e1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
  (Tuple2 (tuple2 a1 e1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb2949 x)
  (t2tb691 y)) (t2tb3014 r)) (and (mem44 x u) (mem24 y v)))))))

(declare-fun t2tb3617 ((set (set (tuple21 (tuple21 a e) (set (tuple21 c
  d)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a e) (set (tuple21 c d))))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 e1) (set1 (tuple2 c1 d1))))) (t2tb3617 x))))

(declare-fun tb2t3617 (uni) (set (set (tuple21 (tuple21 a e) (set (tuple21 c
  d))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a e) (set (tuple21 c d)))))))
  (! (= (tb2t3617 (t2tb3617 i)) i) :pattern ((t2tb3617 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 e1) (set1 (tuple2 c1 d1))))) j)
     (= (t2tb3617 (tb2t3617 j)) j)) :pattern ((t2tb3617 (tb2t3617 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a e))) (v (set (set (tuple21 c d))))
  (r (set (tuple21 (tuple21 a e) (set (tuple21 c d))))))
  (= (mem (set1 (tuple2 (tuple2 a1 e1) (set1 (tuple2 c1 d1)))) (t2tb3016 r)
  (relation (set1 (tuple2 c1 d1)) (tuple2 a1 e1) (t2tb2943 u) (t2tb688 v)))
  (forall ((x (tuple21 a e)) (y (set (tuple21 c d))))
  (=> (mem (tuple2 (tuple2 a1 e1) (set1 (tuple2 c1 d1)))
  (Tuple2 (tuple2 a1 e1) (set1 (tuple2 c1 d1)) (t2tb2949 x) (t2tb689 y))
  (t2tb3016 r)) (and (mem44 x u) (mem22 y v)))))))

(declare-fun t2tb3618 ((set (set (tuple21 (tuple21 a e) (tuple21 c
  d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a e) (tuple21 c d)))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 e1) (tuple2 c1 d1)))) (t2tb3618 x))))

(declare-fun tb2t3618 (uni) (set (set (tuple21 (tuple21 a e) (tuple21 c
  d)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a e) (tuple21 c d))))))
  (! (= (tb2t3618 (t2tb3618 i)) i) :pattern ((t2tb3618 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 e1) (tuple2 c1 d1)))) j)
     (= (t2tb3618 (tb2t3618 j)) j)) :pattern ((t2tb3618 (tb2t3618 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a e))) (v (set (tuple21 c d)))
  (r (set (tuple21 (tuple21 a e) (tuple21 c d)))))
  (= (mem (set1 (tuple2 (tuple2 a1 e1) (tuple2 c1 d1))) (t2tb3018 r)
  (relation (tuple2 c1 d1) (tuple2 a1 e1) (t2tb2943 u) (t2tb689 v)))
  (forall ((x (tuple21 a e)) (y (tuple21 c d)))
  (=> (mem (tuple2 (tuple2 a1 e1) (tuple2 c1 d1))
  (Tuple2 (tuple2 a1 e1) (tuple2 c1 d1) (t2tb2949 x) (t2tb693 y))
  (t2tb3018 r)) (and (mem44 x u) (mem21 y v)))))))

(declare-fun t2tb3619 ((set (set (tuple21 (tuple21 a e) d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a e) d))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 e1) d1))) (t2tb3619 x))))

(declare-fun tb2t3619 (uni) (set (set (tuple21 (tuple21 a e) d))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a e) d)))))
  (! (= (tb2t3619 (t2tb3619 i)) i) :pattern ((t2tb3619 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 e1) d1))) j)
     (= (t2tb3619 (tb2t3619 j)) j)) :pattern ((t2tb3619 (tb2t3619 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a e))) (v (set d)) (r (set (tuple21 (tuple21 a e)
  d))))
  (= (mem (set1 (tuple2 (tuple2 a1 e1) d1)) (t2tb3020 r)
  (relation d1 (tuple2 a1 e1) (t2tb2943 u) (t2tb690 v)))
  (forall ((x (tuple21 a e)) (y d))
  (=> (mem (tuple2 (tuple2 a1 e1) d1)
  (Tuple2 (tuple2 a1 e1) d1 (t2tb2949 x) (t2tb694 y)) (t2tb3020 r))
  (and (mem44 x u) (mem20 y v)))))))

(declare-fun t2tb3620 ((set (set (tuple21 (tuple21 a e) c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a e) c))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 e1) c1))) (t2tb3620 x))))

(declare-fun tb2t3620 (uni) (set (set (tuple21 (tuple21 a e) c))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a e) c)))))
  (! (= (tb2t3620 (t2tb3620 i)) i) :pattern ((t2tb3620 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 e1) c1))) j)
     (= (t2tb3620 (tb2t3620 j)) j)) :pattern ((t2tb3620 (tb2t3620 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a e))) (v (set c)) (r (set (tuple21 (tuple21 a e)
  c))))
  (= (mem (set1 (tuple2 (tuple2 a1 e1) c1)) (t2tb3022 r)
  (relation c1 (tuple2 a1 e1) (t2tb2943 u) (t2tb132 v)))
  (forall ((x (tuple21 a e)) (y c))
  (=> (mem (tuple2 (tuple2 a1 e1) c1)
  (Tuple2 (tuple2 a1 e1) c1 (t2tb2949 x) (t2tb135 y)) (t2tb3022 r))
  (and (mem44 x u) (mem7 y v)))))))

(declare-fun t2tb3621 ((set (set (tuple21 (tuple21 a e) (set (tuple21 a
  b)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a e) (set (tuple21 a b))))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 e1) (set1 (tuple2 a1 b1))))) (t2tb3621 x))))

(declare-fun tb2t3621 (uni) (set (set (tuple21 (tuple21 a e) (set (tuple21 a
  b))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a e) (set (tuple21 a b)))))))
  (! (= (tb2t3621 (t2tb3621 i)) i) :pattern ((t2tb3621 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 e1) (set1 (tuple2 a1 b1))))) j)
     (= (t2tb3621 (tb2t3621 j)) j)) :pattern ((t2tb3621 (tb2t3621 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a e))) (v (set (set (tuple21 a b))))
  (r (set (tuple21 (tuple21 a e) (set (tuple21 a b))))))
  (= (mem (set1 (tuple2 (tuple2 a1 e1) (set1 (tuple2 a1 b1)))) (t2tb3024 r)
  (relation (set1 (tuple2 a1 b1)) (tuple2 a1 e1) (t2tb2943 u) (t2tb10 v)))
  (forall ((x (tuple21 a e)) (y (set (tuple21 a b))))
  (=> (mem (tuple2 (tuple2 a1 e1) (set1 (tuple2 a1 b1)))
  (Tuple2 (tuple2 a1 e1) (set1 (tuple2 a1 b1)) (t2tb2949 x) (t2tb11 y))
  (t2tb3024 r)) (and (mem44 x u) (mem4 y v)))))))

(declare-fun t2tb3622 ((set (set (tuple21 (tuple21 a e) (tuple21 a
  b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a e) (tuple21 a b)))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 e1) (tuple2 a1 b1)))) (t2tb3622 x))))

(declare-fun tb2t3622 (uni) (set (set (tuple21 (tuple21 a e) (tuple21 a
  b)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a e) (tuple21 a b))))))
  (! (= (tb2t3622 (t2tb3622 i)) i) :pattern ((t2tb3622 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 e1) (tuple2 a1 b1)))) j)
     (= (t2tb3622 (tb2t3622 j)) j)) :pattern ((t2tb3622 (tb2t3622 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a e))) (v (set (tuple21 a b)))
  (r (set (tuple21 (tuple21 a e) (tuple21 a b)))))
  (= (mem (set1 (tuple2 (tuple2 a1 e1) (tuple2 a1 b1))) (t2tb3026 r)
  (relation (tuple2 a1 b1) (tuple2 a1 e1) (t2tb2943 u) (t2tb11 v)))
  (forall ((x (tuple21 a e)) (y (tuple21 a b)))
  (=> (mem (tuple2 (tuple2 a1 e1) (tuple2 a1 b1))
  (Tuple2 (tuple2 a1 e1) (tuple2 a1 b1) (t2tb2949 x) (t2tb13 y))
  (t2tb3026 r)) (and (mem44 x u) (mem3 y v)))))))

(declare-fun t2tb3623 ((set (set (tuple21 (tuple21 a e) b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a e) b))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 e1) b1))) (t2tb3623 x))))

(declare-fun tb2t3623 (uni) (set (set (tuple21 (tuple21 a e) b))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a e) b)))))
  (! (= (tb2t3623 (t2tb3623 i)) i) :pattern ((t2tb3623 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 e1) b1))) j)
     (= (t2tb3623 (tb2t3623 j)) j)) :pattern ((t2tb3623 (tb2t3623 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a e))) (v (set b)) (r (set (tuple21 (tuple21 a e)
  b))))
  (= (mem (set1 (tuple2 (tuple2 a1 e1) b1)) (t2tb3028 r)
  (relation b1 (tuple2 a1 e1) (t2tb2943 u) (t2tb12 v)))
  (forall ((x (tuple21 a e)) (y b))
  (=> (mem (tuple2 (tuple2 a1 e1) b1)
  (Tuple2 (tuple2 a1 e1) b1 (t2tb2949 x) (t2tb14 y)) (t2tb3028 r))
  (and (mem44 x u) (mem2 y v)))))))

(declare-fun t2tb3624 ((set (set (tuple21 (tuple21 a e) a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a e) a))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 e1) a1))) (t2tb3624 x))))

(declare-fun tb2t3624 (uni) (set (set (tuple21 (tuple21 a e) a))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a e) a)))))
  (! (= (tb2t3624 (t2tb3624 i)) i) :pattern ((t2tb3624 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 e1) a1))) j)
     (= (t2tb3624 (tb2t3624 j)) j)) :pattern ((t2tb3624 (tb2t3624 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a e))) (v (set a)) (r (set (tuple21 (tuple21 a e)
  a))))
  (= (mem (set1 (tuple2 (tuple2 a1 e1) a1)) (t2tb3030 r)
  (relation a1 (tuple2 a1 e1) (t2tb2943 u) (t2tb1 v)))
  (forall ((x (tuple21 a e)) (y a))
  (=> (mem (tuple2 (tuple2 a1 e1) a1)
  (Tuple2 (tuple2 a1 e1) a1 (t2tb2949 x) (t2tb2 y)) (t2tb3030 r))
  (and (mem44 x u) (mem1 y v)))))))

;; mem_relation
  (assert
  (forall ((b2 ty))
  (forall ((u (set (tuple21 a e))) (v uni) (r uni))
  (and
  (=> (mem (set1 (tuple2 (tuple2 a1 e1) b2)) r
  (relation b2 (tuple2 a1 e1) (t2tb2943 u) v))
  (forall ((x (tuple21 a e)) (y uni))
  (=> (mem (tuple2 (tuple2 a1 e1) b2)
  (Tuple2 (tuple2 a1 e1) b2 (t2tb2949 x) y) r)
  (and (mem44 x u) (mem b2 y v)))))
  (=>
  (forall ((x (tuple21 a e)) (y uni))
  (=> (sort b2 y)
  (=> (mem (tuple2 (tuple2 a1 e1) b2)
  (Tuple2 (tuple2 a1 e1) b2 (t2tb2949 x) y) r)
  (and (mem44 x u) (mem b2 y v))))) (mem (set1 (tuple2 (tuple2 a1 e1) b2)) r
  (relation b2 (tuple2 a1 e1) (t2tb2943 u) v)))))))

(declare-fun t2tb3625 ((set (set (tuple21 (tuple21 (tuple21 b d) (tuple21 e
  f)) (tuple21 c f))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 (tuple21 b d) (tuple21 e f))
  (tuple21 c f)))))) (sort
  (set1
  (set1 (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (tuple2 c1 f1))))
  (t2tb3625 x))))

(declare-fun tb2t3625 (uni) (set (set (tuple21 (tuple21 (tuple21 b d)
  (tuple21 e f)) (tuple21 c f)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 (tuple21 b d) (tuple21 e f))
  (tuple21 c f))))))
  (! (= (tb2t3625 (t2tb3625 i)) i) :pattern ((t2tb3625 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (set1 (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (tuple2 c1 f1))))
     j) (= (t2tb3625 (tb2t3625 j)) j)) :pattern ((t2tb3625 (tb2t3625 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 (tuple21 b d) (tuple21 e f)))) (v (set (tuple21 c
  f))) (r (set (tuple21 (tuple21 (tuple21 b d) (tuple21 e f)) (tuple21 c
  f)))))
  (= (mem
  (set1 (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (tuple2 c1 f1)))
  (t2tb3032 r)
  (relation (tuple2 c1 f1) (tuple2 (tuple2 b1 d1) (tuple2 e1 f1))
  (t2tb2944 u) (t2tb2942 v)))
  (forall ((x (tuple21 (tuple21 b d) (tuple21 e f))) (y (tuple21 c f)))
  (=> (mem (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (tuple2 c1 f1))
  (Tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (tuple2 c1 f1) (t2tb2950 x)
  (t2tb2948 y)) (t2tb3032 r)) (and (mem43 x u) (mem45 y v)))))))

(declare-fun t2tb3626 ((set (set (tuple21 (tuple21 (tuple21 b d) (tuple21 e
  f)) (tuple21 a e))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 (tuple21 b d) (tuple21 e f))
  (tuple21 a e)))))) (sort
  (set1
  (set1 (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (tuple2 a1 e1))))
  (t2tb3626 x))))

(declare-fun tb2t3626 (uni) (set (set (tuple21 (tuple21 (tuple21 b d)
  (tuple21 e f)) (tuple21 a e)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 (tuple21 b d) (tuple21 e f))
  (tuple21 a e))))))
  (! (= (tb2t3626 (t2tb3626 i)) i) :pattern ((t2tb3626 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (set1 (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (tuple2 a1 e1))))
     j) (= (t2tb3626 (tb2t3626 j)) j)) :pattern ((t2tb3626 (tb2t3626 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 (tuple21 b d) (tuple21 e f)))) (v (set (tuple21 a
  e))) (r (set (tuple21 (tuple21 (tuple21 b d) (tuple21 e f)) (tuple21 a
  e)))))
  (= (mem
  (set1 (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (tuple2 a1 e1)))
  (t2tb3034 r)
  (relation (tuple2 a1 e1) (tuple2 (tuple2 b1 d1) (tuple2 e1 f1))
  (t2tb2944 u) (t2tb2943 v)))
  (forall ((x (tuple21 (tuple21 b d) (tuple21 e f))) (y (tuple21 a e)))
  (=> (mem (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (tuple2 a1 e1))
  (Tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (tuple2 a1 e1) (t2tb2950 x)
  (t2tb2949 y)) (t2tb3034 r)) (and (mem43 x u) (mem44 y v)))))))

(declare-fun t2tb3627 ((set (set (tuple21 (tuple21 (tuple21 b d) (tuple21 e
  f)) (tuple21 (tuple21 b d) (tuple21 e f)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 (tuple21 b d) (tuple21 e f))
  (tuple21 (tuple21 b d) (tuple21 e f))))))) (sort
  (set1
  (set1
  (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1))
  (tuple2 (tuple2 b1 d1) (tuple2 e1 f1))))) (t2tb3627 x))))

(declare-fun tb2t3627 (uni) (set (set (tuple21 (tuple21 (tuple21 b d)
  (tuple21 e f)) (tuple21 (tuple21 b d) (tuple21 e f))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 (tuple21 b d) (tuple21 e f))
  (tuple21 (tuple21 b d) (tuple21 e f)))))))
  (! (= (tb2t3627 (t2tb3627 i)) i) :pattern ((t2tb3627 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (set1
     (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1))
     (tuple2 (tuple2 b1 d1) (tuple2 e1 f1))))) j)
     (= (t2tb3627 (tb2t3627 j)) j)) :pattern ((t2tb3627 (tb2t3627 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 (tuple21 b d) (tuple21 e f))))
  (v (set (tuple21 (tuple21 b d) (tuple21 e f))))
  (r (set (tuple21 (tuple21 (tuple21 b d) (tuple21 e f)) (tuple21 (tuple21 b
  d) (tuple21 e f))))))
  (= (mem
  (set1
  (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1))
  (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)))) (t2tb3036 r)
  (relation (tuple2 (tuple2 b1 d1) (tuple2 e1 f1))
  (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (t2tb2944 u) (t2tb2944 v)))
  (forall ((x (tuple21 (tuple21 b d) (tuple21 e f))) (y (tuple21 (tuple21 b
  d) (tuple21 e f))))
  (=> (mem
  (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1))
  (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)))
  (Tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1))
  (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (t2tb2950 x) (t2tb2950 y))
  (t2tb3036 r)) (and (mem43 x u) (mem43 y v)))))))

(declare-fun t2tb3628 ((set (set (tuple21 (tuple21 (tuple21 b d) (tuple21 e
  f)) (tuple21 (tuple21 a c) (tuple21 e f)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 (tuple21 b d) (tuple21 e f))
  (tuple21 (tuple21 a c) (tuple21 e f))))))) (sort
  (set1
  (set1
  (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1))
  (tuple2 (tuple2 a1 c1) (tuple2 e1 f1))))) (t2tb3628 x))))

(declare-fun tb2t3628 (uni) (set (set (tuple21 (tuple21 (tuple21 b d)
  (tuple21 e f)) (tuple21 (tuple21 a c) (tuple21 e f))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 (tuple21 b d) (tuple21 e f))
  (tuple21 (tuple21 a c) (tuple21 e f)))))))
  (! (= (tb2t3628 (t2tb3628 i)) i) :pattern ((t2tb3628 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (set1
     (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1))
     (tuple2 (tuple2 a1 c1) (tuple2 e1 f1))))) j)
     (= (t2tb3628 (tb2t3628 j)) j)) :pattern ((t2tb3628 (tb2t3628 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 (tuple21 b d) (tuple21 e f))))
  (v (set (tuple21 (tuple21 a c) (tuple21 e f))))
  (r (set (tuple21 (tuple21 (tuple21 b d) (tuple21 e f)) (tuple21 (tuple21 a
  c) (tuple21 e f))))))
  (= (mem
  (set1
  (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1))
  (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)))) (t2tb3038 r)
  (relation (tuple2 (tuple2 a1 c1) (tuple2 e1 f1))
  (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (t2tb2944 u) (t2tb2945 v)))
  (forall ((x (tuple21 (tuple21 b d) (tuple21 e f))) (y (tuple21 (tuple21 a
  c) (tuple21 e f))))
  (=> (mem
  (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1))
  (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)))
  (Tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1))
  (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (t2tb2950 x) (t2tb2951 y))
  (t2tb3038 r)) (and (mem43 x u) (mem42 y v)))))))

(declare-fun t2tb3629 ((set (set (tuple21 (tuple21 (tuple21 b d) (tuple21 e
  f)) (set (tuple21 d f)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 (tuple21 b d) (tuple21 e f))
  (set (tuple21 d f))))))) (sort
  (set1
  (set1
  (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (set1 (tuple2 d1 f1)))))
  (t2tb3629 x))))

(declare-fun tb2t3629 (uni) (set (set (tuple21 (tuple21 (tuple21 b d)
  (tuple21 e f)) (set (tuple21 d f))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 (tuple21 b d) (tuple21 e f))
  (set (tuple21 d f)))))))
  (! (= (tb2t3629 (t2tb3629 i)) i) :pattern ((t2tb3629 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (set1
     (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (set1 (tuple2 d1 f1)))))
     j) (= (t2tb3629 (tb2t3629 j)) j)) :pattern ((t2tb3629 (tb2t3629 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 (tuple21 b d) (tuple21 e f))))
  (v (set (set (tuple21 d f)))) (r (set (tuple21 (tuple21 (tuple21 b d)
  (tuple21 e f)) (set (tuple21 d f))))))
  (= (mem
  (set1
  (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (set1 (tuple2 d1 f1))))
  (t2tb3040 r)
  (relation (set1 (tuple2 d1 f1)) (tuple2 (tuple2 b1 d1) (tuple2 e1 f1))
  (t2tb2944 u) (t2tb2939 v)))
  (forall ((x (tuple21 (tuple21 b d) (tuple21 e f))) (y (set (tuple21 d f))))
  (=> (mem
  (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (set1 (tuple2 d1 f1)))
  (Tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (set1 (tuple2 d1 f1))
  (t2tb2950 x) (t2tb2938 y)) (t2tb3040 r)) (and (mem43 x u) (mem41 y v)))))))

(declare-fun t2tb3630 ((set (set (tuple21 (tuple21 (tuple21 b d) (tuple21 e
  f)) (tuple21 d f))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 (tuple21 b d) (tuple21 e f))
  (tuple21 d f)))))) (sort
  (set1
  (set1 (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (tuple2 d1 f1))))
  (t2tb3630 x))))

(declare-fun tb2t3630 (uni) (set (set (tuple21 (tuple21 (tuple21 b d)
  (tuple21 e f)) (tuple21 d f)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 (tuple21 b d) (tuple21 e f))
  (tuple21 d f))))))
  (! (= (tb2t3630 (t2tb3630 i)) i) :pattern ((t2tb3630 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (set1 (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (tuple2 d1 f1))))
     j) (= (t2tb3630 (tb2t3630 j)) j)) :pattern ((t2tb3630 (tb2t3630 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 (tuple21 b d) (tuple21 e f)))) (v (set (tuple21 d
  f))) (r (set (tuple21 (tuple21 (tuple21 b d) (tuple21 e f)) (tuple21 d
  f)))))
  (= (mem
  (set1 (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (tuple2 d1 f1)))
  (t2tb3042 r)
  (relation (tuple2 d1 f1) (tuple2 (tuple2 b1 d1) (tuple2 e1 f1))
  (t2tb2944 u) (t2tb2938 v)))
  (forall ((x (tuple21 (tuple21 b d) (tuple21 e f))) (y (tuple21 d f)))
  (=> (mem (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (tuple2 d1 f1))
  (Tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (tuple2 d1 f1) (t2tb2950 x)
  (t2tb2952 y)) (t2tb3042 r)) (and (mem43 x u) (mem40 y v)))))))

(declare-fun t2tb3631 ((set (set (tuple21 (tuple21 (tuple21 b d) (tuple21 e
  f)) (set (tuple21 b e)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 (tuple21 b d) (tuple21 e f))
  (set (tuple21 b e))))))) (sort
  (set1
  (set1
  (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (set1 (tuple2 b1 e1)))))
  (t2tb3631 x))))

(declare-fun tb2t3631 (uni) (set (set (tuple21 (tuple21 (tuple21 b d)
  (tuple21 e f)) (set (tuple21 b e))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 (tuple21 b d) (tuple21 e f))
  (set (tuple21 b e)))))))
  (! (= (tb2t3631 (t2tb3631 i)) i) :pattern ((t2tb3631 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (set1
     (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (set1 (tuple2 b1 e1)))))
     j) (= (t2tb3631 (tb2t3631 j)) j)) :pattern ((t2tb3631 (tb2t3631 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 (tuple21 b d) (tuple21 e f))))
  (v (set (set (tuple21 b e)))) (r (set (tuple21 (tuple21 (tuple21 b d)
  (tuple21 e f)) (set (tuple21 b e))))))
  (= (mem
  (set1
  (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (set1 (tuple2 b1 e1))))
  (t2tb3044 r)
  (relation (set1 (tuple2 b1 e1)) (tuple2 (tuple2 b1 d1) (tuple2 e1 f1))
  (t2tb2944 u) (t2tb2941 v)))
  (forall ((x (tuple21 (tuple21 b d) (tuple21 e f))) (y (set (tuple21 b e))))
  (=> (mem
  (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (set1 (tuple2 b1 e1)))
  (Tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (set1 (tuple2 b1 e1))
  (t2tb2950 x) (t2tb2940 y)) (t2tb3044 r)) (and (mem43 x u) (mem39 y v)))))))

(declare-fun t2tb3632 ((set (set (tuple21 (tuple21 (tuple21 b d) (tuple21 e
  f)) (tuple21 b e))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 (tuple21 b d) (tuple21 e f))
  (tuple21 b e)))))) (sort
  (set1
  (set1 (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (tuple2 b1 e1))))
  (t2tb3632 x))))

(declare-fun tb2t3632 (uni) (set (set (tuple21 (tuple21 (tuple21 b d)
  (tuple21 e f)) (tuple21 b e)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 (tuple21 b d) (tuple21 e f))
  (tuple21 b e))))))
  (! (= (tb2t3632 (t2tb3632 i)) i) :pattern ((t2tb3632 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (set1 (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (tuple2 b1 e1))))
     j) (= (t2tb3632 (tb2t3632 j)) j)) :pattern ((t2tb3632 (tb2t3632 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 (tuple21 b d) (tuple21 e f)))) (v (set (tuple21 b
  e))) (r (set (tuple21 (tuple21 (tuple21 b d) (tuple21 e f)) (tuple21 b
  e)))))
  (= (mem
  (set1 (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (tuple2 b1 e1)))
  (t2tb3046 r)
  (relation (tuple2 b1 e1) (tuple2 (tuple2 b1 d1) (tuple2 e1 f1))
  (t2tb2944 u) (t2tb2940 v)))
  (forall ((x (tuple21 (tuple21 b d) (tuple21 e f))) (y (tuple21 b e)))
  (=> (mem (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (tuple2 b1 e1))
  (Tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (tuple2 b1 e1) (t2tb2950 x)
  (t2tb2953 y)) (t2tb3046 r)) (and (mem43 x u) (mem38 y v)))))))

(declare-fun t2tb3633 ((set (set (tuple21 (tuple21 (tuple21 b d) (tuple21 e
  f)) f)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 (tuple21 b d) (tuple21 e f)) f)))))
  (sort (set1 (set1 (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) f1)))
  (t2tb3633 x))))

(declare-fun tb2t3633 (uni) (set (set (tuple21 (tuple21 (tuple21 b d)
  (tuple21 e f)) f))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 (tuple21 b d) (tuple21 e f)) f)))))
  (! (= (tb2t3633 (t2tb3633 i)) i) :pattern ((t2tb3633 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) f1))) j)
     (= (t2tb3633 (tb2t3633 j)) j)) :pattern ((t2tb3633 (tb2t3633 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 (tuple21 b d) (tuple21 e f)))) (v (set f))
  (r (set (tuple21 (tuple21 (tuple21 b d) (tuple21 e f)) f))))
  (= (mem (set1 (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) f1))
  (t2tb3048 r)
  (relation f1 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (t2tb2944 u)
  (t2tb2946 v)))
  (forall ((x (tuple21 (tuple21 b d) (tuple21 e f))) (y f))
  (=> (mem (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) f1)
  (Tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) f1 (t2tb2950 x)
  (t2tb2954 y)) (t2tb3048 r)) (and (mem43 x u) (mem37 y v)))))))

(declare-fun t2tb3634 ((set (set (tuple21 (tuple21 (tuple21 b d) (tuple21 e
  f)) e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 (tuple21 b d) (tuple21 e f)) e)))))
  (sort (set1 (set1 (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) e1)))
  (t2tb3634 x))))

(declare-fun tb2t3634 (uni) (set (set (tuple21 (tuple21 (tuple21 b d)
  (tuple21 e f)) e))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 (tuple21 b d) (tuple21 e f)) e)))))
  (! (= (tb2t3634 (t2tb3634 i)) i) :pattern ((t2tb3634 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) e1))) j)
     (= (t2tb3634 (tb2t3634 j)) j)) :pattern ((t2tb3634 (tb2t3634 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 (tuple21 b d) (tuple21 e f)))) (v (set e))
  (r (set (tuple21 (tuple21 (tuple21 b d) (tuple21 e f)) e))))
  (= (mem (set1 (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) e1))
  (t2tb3050 r)
  (relation e1 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (t2tb2944 u)
  (t2tb2947 v)))
  (forall ((x (tuple21 (tuple21 b d) (tuple21 e f))) (y e))
  (=> (mem (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) e1)
  (Tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) e1 (t2tb2950 x)
  (t2tb2955 y)) (t2tb3050 r)) (and (mem43 x u) (mem36 y v)))))))

(declare-fun t2tb3635 ((set (set (tuple21 (tuple21 (tuple21 b d) (tuple21 e
  f)) (tuple21 (tuple21 a c) (tuple21 b d)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 (tuple21 b d) (tuple21 e f))
  (tuple21 (tuple21 a c) (tuple21 b d))))))) (sort
  (set1
  (set1
  (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1))
  (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))))) (t2tb3635 x))))

(declare-fun tb2t3635 (uni) (set (set (tuple21 (tuple21 (tuple21 b d)
  (tuple21 e f)) (tuple21 (tuple21 a c) (tuple21 b d))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 (tuple21 b d) (tuple21 e f))
  (tuple21 (tuple21 a c) (tuple21 b d)))))))
  (! (= (tb2t3635 (t2tb3635 i)) i) :pattern ((t2tb3635 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (set1
     (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1))
     (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))))) j)
     (= (t2tb3635 (tb2t3635 j)) j)) :pattern ((t2tb3635 (tb2t3635 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 (tuple21 b d) (tuple21 e f))))
  (v (set (tuple21 (tuple21 a c) (tuple21 b d))))
  (r (set (tuple21 (tuple21 (tuple21 b d) (tuple21 e f)) (tuple21 (tuple21 a
  c) (tuple21 b d))))))
  (= (mem
  (set1
  (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1))
  (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))) (t2tb3052 r)
  (relation (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))
  (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (t2tb2944 u) (t2tb686 v)))
  (forall ((x (tuple21 (tuple21 b d) (tuple21 e f))) (y (tuple21 (tuple21 a
  c) (tuple21 b d))))
  (=> (mem
  (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1))
  (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
  (Tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1))
  (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb2950 x) (t2tb691 y))
  (t2tb3052 r)) (and (mem43 x u) (mem24 y v)))))))

(declare-fun t2tb3636 ((set (set (tuple21 (tuple21 (tuple21 b d) (tuple21 e
  f)) (set (tuple21 c d)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 (tuple21 b d) (tuple21 e f))
  (set (tuple21 c d))))))) (sort
  (set1
  (set1
  (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (set1 (tuple2 c1 d1)))))
  (t2tb3636 x))))

(declare-fun tb2t3636 (uni) (set (set (tuple21 (tuple21 (tuple21 b d)
  (tuple21 e f)) (set (tuple21 c d))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 (tuple21 b d) (tuple21 e f))
  (set (tuple21 c d)))))))
  (! (= (tb2t3636 (t2tb3636 i)) i) :pattern ((t2tb3636 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (set1
     (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (set1 (tuple2 c1 d1)))))
     j) (= (t2tb3636 (tb2t3636 j)) j)) :pattern ((t2tb3636 (tb2t3636 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 (tuple21 b d) (tuple21 e f))))
  (v (set (set (tuple21 c d)))) (r (set (tuple21 (tuple21 (tuple21 b d)
  (tuple21 e f)) (set (tuple21 c d))))))
  (= (mem
  (set1
  (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (set1 (tuple2 c1 d1))))
  (t2tb3054 r)
  (relation (set1 (tuple2 c1 d1)) (tuple2 (tuple2 b1 d1) (tuple2 e1 f1))
  (t2tb2944 u) (t2tb688 v)))
  (forall ((x (tuple21 (tuple21 b d) (tuple21 e f))) (y (set (tuple21 c d))))
  (=> (mem
  (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (set1 (tuple2 c1 d1)))
  (Tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (set1 (tuple2 c1 d1))
  (t2tb2950 x) (t2tb689 y)) (t2tb3054 r)) (and (mem43 x u) (mem22 y v)))))))

(declare-fun t2tb3637 ((set (set (tuple21 (tuple21 (tuple21 b d) (tuple21 e
  f)) (tuple21 c d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 (tuple21 b d) (tuple21 e f))
  (tuple21 c d)))))) (sort
  (set1
  (set1 (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (tuple2 c1 d1))))
  (t2tb3637 x))))

(declare-fun tb2t3637 (uni) (set (set (tuple21 (tuple21 (tuple21 b d)
  (tuple21 e f)) (tuple21 c d)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 (tuple21 b d) (tuple21 e f))
  (tuple21 c d))))))
  (! (= (tb2t3637 (t2tb3637 i)) i) :pattern ((t2tb3637 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (set1 (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (tuple2 c1 d1))))
     j) (= (t2tb3637 (tb2t3637 j)) j)) :pattern ((t2tb3637 (tb2t3637 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 (tuple21 b d) (tuple21 e f)))) (v (set (tuple21 c
  d))) (r (set (tuple21 (tuple21 (tuple21 b d) (tuple21 e f)) (tuple21 c
  d)))))
  (= (mem
  (set1 (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (tuple2 c1 d1)))
  (t2tb3056 r)
  (relation (tuple2 c1 d1) (tuple2 (tuple2 b1 d1) (tuple2 e1 f1))
  (t2tb2944 u) (t2tb689 v)))
  (forall ((x (tuple21 (tuple21 b d) (tuple21 e f))) (y (tuple21 c d)))
  (=> (mem (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (tuple2 c1 d1))
  (Tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (tuple2 c1 d1) (t2tb2950 x)
  (t2tb693 y)) (t2tb3056 r)) (and (mem43 x u) (mem21 y v)))))))

(declare-fun t2tb3638 ((set (set (tuple21 (tuple21 (tuple21 b d) (tuple21 e
  f)) d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 (tuple21 b d) (tuple21 e f)) d)))))
  (sort (set1 (set1 (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) d1)))
  (t2tb3638 x))))

(declare-fun tb2t3638 (uni) (set (set (tuple21 (tuple21 (tuple21 b d)
  (tuple21 e f)) d))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 (tuple21 b d) (tuple21 e f)) d)))))
  (! (= (tb2t3638 (t2tb3638 i)) i) :pattern ((t2tb3638 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) d1))) j)
     (= (t2tb3638 (tb2t3638 j)) j)) :pattern ((t2tb3638 (tb2t3638 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 (tuple21 b d) (tuple21 e f)))) (v (set d))
  (r (set (tuple21 (tuple21 (tuple21 b d) (tuple21 e f)) d))))
  (= (mem (set1 (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) d1))
  (t2tb3058 r)
  (relation d1 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (t2tb2944 u)
  (t2tb690 v)))
  (forall ((x (tuple21 (tuple21 b d) (tuple21 e f))) (y d))
  (=> (mem (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) d1)
  (Tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) d1 (t2tb2950 x) (t2tb694 y))
  (t2tb3058 r)) (and (mem43 x u) (mem20 y v)))))))

(declare-fun t2tb3639 ((set (set (tuple21 (tuple21 (tuple21 b d) (tuple21 e
  f)) c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 (tuple21 b d) (tuple21 e f)) c)))))
  (sort (set1 (set1 (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) c1)))
  (t2tb3639 x))))

(declare-fun tb2t3639 (uni) (set (set (tuple21 (tuple21 (tuple21 b d)
  (tuple21 e f)) c))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 (tuple21 b d) (tuple21 e f)) c)))))
  (! (= (tb2t3639 (t2tb3639 i)) i) :pattern ((t2tb3639 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) c1))) j)
     (= (t2tb3639 (tb2t3639 j)) j)) :pattern ((t2tb3639 (tb2t3639 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 (tuple21 b d) (tuple21 e f)))) (v (set c))
  (r (set (tuple21 (tuple21 (tuple21 b d) (tuple21 e f)) c))))
  (= (mem (set1 (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) c1))
  (t2tb3060 r)
  (relation c1 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (t2tb2944 u)
  (t2tb132 v)))
  (forall ((x (tuple21 (tuple21 b d) (tuple21 e f))) (y c))
  (=> (mem (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) c1)
  (Tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) c1 (t2tb2950 x) (t2tb135 y))
  (t2tb3060 r)) (and (mem43 x u) (mem7 y v)))))))

(declare-fun t2tb3640 ((set (set (tuple21 (tuple21 (tuple21 b d) (tuple21 e
  f)) (set (tuple21 a b)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 (tuple21 b d) (tuple21 e f))
  (set (tuple21 a b))))))) (sort
  (set1
  (set1
  (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (set1 (tuple2 a1 b1)))))
  (t2tb3640 x))))

(declare-fun tb2t3640 (uni) (set (set (tuple21 (tuple21 (tuple21 b d)
  (tuple21 e f)) (set (tuple21 a b))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 (tuple21 b d) (tuple21 e f))
  (set (tuple21 a b)))))))
  (! (= (tb2t3640 (t2tb3640 i)) i) :pattern ((t2tb3640 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (set1
     (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (set1 (tuple2 a1 b1)))))
     j) (= (t2tb3640 (tb2t3640 j)) j)) :pattern ((t2tb3640 (tb2t3640 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 (tuple21 b d) (tuple21 e f))))
  (v (set (set (tuple21 a b)))) (r (set (tuple21 (tuple21 (tuple21 b d)
  (tuple21 e f)) (set (tuple21 a b))))))
  (= (mem
  (set1
  (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (set1 (tuple2 a1 b1))))
  (t2tb3062 r)
  (relation (set1 (tuple2 a1 b1)) (tuple2 (tuple2 b1 d1) (tuple2 e1 f1))
  (t2tb2944 u) (t2tb10 v)))
  (forall ((x (tuple21 (tuple21 b d) (tuple21 e f))) (y (set (tuple21 a b))))
  (=> (mem
  (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (set1 (tuple2 a1 b1)))
  (Tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (set1 (tuple2 a1 b1))
  (t2tb2950 x) (t2tb11 y)) (t2tb3062 r)) (and (mem43 x u) (mem4 y v)))))))

(declare-fun t2tb3641 ((set (set (tuple21 (tuple21 (tuple21 b d) (tuple21 e
  f)) (tuple21 a b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 (tuple21 b d) (tuple21 e f))
  (tuple21 a b)))))) (sort
  (set1
  (set1 (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (tuple2 a1 b1))))
  (t2tb3641 x))))

(declare-fun tb2t3641 (uni) (set (set (tuple21 (tuple21 (tuple21 b d)
  (tuple21 e f)) (tuple21 a b)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 (tuple21 b d) (tuple21 e f))
  (tuple21 a b))))))
  (! (= (tb2t3641 (t2tb3641 i)) i) :pattern ((t2tb3641 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (set1 (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (tuple2 a1 b1))))
     j) (= (t2tb3641 (tb2t3641 j)) j)) :pattern ((t2tb3641 (tb2t3641 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 (tuple21 b d) (tuple21 e f)))) (v (set (tuple21 a
  b))) (r (set (tuple21 (tuple21 (tuple21 b d) (tuple21 e f)) (tuple21 a
  b)))))
  (= (mem
  (set1 (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (tuple2 a1 b1)))
  (t2tb3064 r)
  (relation (tuple2 a1 b1) (tuple2 (tuple2 b1 d1) (tuple2 e1 f1))
  (t2tb2944 u) (t2tb11 v)))
  (forall ((x (tuple21 (tuple21 b d) (tuple21 e f))) (y (tuple21 a b)))
  (=> (mem (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (tuple2 a1 b1))
  (Tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (tuple2 a1 b1) (t2tb2950 x)
  (t2tb13 y)) (t2tb3064 r)) (and (mem43 x u) (mem3 y v)))))))

(declare-fun t2tb3642 ((set (set (tuple21 (tuple21 (tuple21 b d) (tuple21 e
  f)) b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 (tuple21 b d) (tuple21 e f)) b)))))
  (sort (set1 (set1 (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) b1)))
  (t2tb3642 x))))

(declare-fun tb2t3642 (uni) (set (set (tuple21 (tuple21 (tuple21 b d)
  (tuple21 e f)) b))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 (tuple21 b d) (tuple21 e f)) b)))))
  (! (= (tb2t3642 (t2tb3642 i)) i) :pattern ((t2tb3642 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) b1))) j)
     (= (t2tb3642 (tb2t3642 j)) j)) :pattern ((t2tb3642 (tb2t3642 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 (tuple21 b d) (tuple21 e f)))) (v (set b))
  (r (set (tuple21 (tuple21 (tuple21 b d) (tuple21 e f)) b))))
  (= (mem (set1 (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) b1))
  (t2tb3066 r)
  (relation b1 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (t2tb2944 u)
  (t2tb12 v)))
  (forall ((x (tuple21 (tuple21 b d) (tuple21 e f))) (y b))
  (=> (mem (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) b1)
  (Tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) b1 (t2tb2950 x) (t2tb14 y))
  (t2tb3066 r)) (and (mem43 x u) (mem2 y v)))))))

(declare-fun t2tb3643 ((set (set (tuple21 (tuple21 (tuple21 b d) (tuple21 e
  f)) a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 (tuple21 b d) (tuple21 e f)) a)))))
  (sort (set1 (set1 (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) a1)))
  (t2tb3643 x))))

(declare-fun tb2t3643 (uni) (set (set (tuple21 (tuple21 (tuple21 b d)
  (tuple21 e f)) a))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 (tuple21 b d) (tuple21 e f)) a)))))
  (! (= (tb2t3643 (t2tb3643 i)) i) :pattern ((t2tb3643 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) a1))) j)
     (= (t2tb3643 (tb2t3643 j)) j)) :pattern ((t2tb3643 (tb2t3643 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 (tuple21 b d) (tuple21 e f)))) (v (set a))
  (r (set (tuple21 (tuple21 (tuple21 b d) (tuple21 e f)) a))))
  (= (mem (set1 (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) a1))
  (t2tb3068 r)
  (relation a1 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (t2tb2944 u) (t2tb1 v)))
  (forall ((x (tuple21 (tuple21 b d) (tuple21 e f))) (y a))
  (=> (mem (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) a1)
  (Tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) a1 (t2tb2950 x) (t2tb2 y))
  (t2tb3068 r)) (and (mem43 x u) (mem1 y v)))))))

;; mem_relation
  (assert
  (forall ((b2 ty))
  (forall ((u (set (tuple21 (tuple21 b d) (tuple21 e f)))) (v uni) (r uni))
  (and
  (=> (mem (set1 (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) b2)) r
  (relation b2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (t2tb2944 u) v))
  (forall ((x (tuple21 (tuple21 b d) (tuple21 e f))) (y uni))
  (=> (mem (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) b2)
  (Tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) b2 (t2tb2950 x) y) r)
  (and (mem43 x u) (mem b2 y v)))))
  (=>
  (forall ((x (tuple21 (tuple21 b d) (tuple21 e f))) (y uni))
  (=> (sort b2 y)
  (=> (mem (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) b2)
  (Tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) b2 (t2tb2950 x) y) r)
  (and (mem43 x u) (mem b2 y v))))) (mem
  (set1 (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) b2)) r
  (relation b2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (t2tb2944 u) v)))))))

(declare-fun t2tb3644 ((set (set (tuple21 (tuple21 (tuple21 a c) (tuple21 e
  f)) (tuple21 c f))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 (tuple21 a c) (tuple21 e f))
  (tuple21 c f)))))) (sort
  (set1
  (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (tuple2 c1 f1))))
  (t2tb3644 x))))

(declare-fun tb2t3644 (uni) (set (set (tuple21 (tuple21 (tuple21 a c)
  (tuple21 e f)) (tuple21 c f)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 (tuple21 a c) (tuple21 e f))
  (tuple21 c f))))))
  (! (= (tb2t3644 (t2tb3644 i)) i) :pattern ((t2tb3644 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (tuple2 c1 f1))))
     j) (= (t2tb3644 (tb2t3644 j)) j)) :pattern ((t2tb3644 (tb2t3644 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 (tuple21 a c) (tuple21 e f)))) (v (set (tuple21 c
  f))) (r (set (tuple21 (tuple21 (tuple21 a c) (tuple21 e f)) (tuple21 c
  f)))))
  (= (mem
  (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (tuple2 c1 f1)))
  (t2tb3070 r)
  (relation (tuple2 c1 f1) (tuple2 (tuple2 a1 c1) (tuple2 e1 f1))
  (t2tb2945 u) (t2tb2942 v)))
  (forall ((x (tuple21 (tuple21 a c) (tuple21 e f))) (y (tuple21 c f)))
  (=> (mem (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (tuple2 c1 f1))
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (tuple2 c1 f1) (t2tb2951 x)
  (t2tb2948 y)) (t2tb3070 r)) (and (mem42 x u) (mem45 y v)))))))

(declare-fun t2tb3645 ((set (set (tuple21 (tuple21 (tuple21 a c) (tuple21 e
  f)) (tuple21 a e))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 (tuple21 a c) (tuple21 e f))
  (tuple21 a e)))))) (sort
  (set1
  (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (tuple2 a1 e1))))
  (t2tb3645 x))))

(declare-fun tb2t3645 (uni) (set (set (tuple21 (tuple21 (tuple21 a c)
  (tuple21 e f)) (tuple21 a e)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 (tuple21 a c) (tuple21 e f))
  (tuple21 a e))))))
  (! (= (tb2t3645 (t2tb3645 i)) i) :pattern ((t2tb3645 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (tuple2 a1 e1))))
     j) (= (t2tb3645 (tb2t3645 j)) j)) :pattern ((t2tb3645 (tb2t3645 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 (tuple21 a c) (tuple21 e f)))) (v (set (tuple21 a
  e))) (r (set (tuple21 (tuple21 (tuple21 a c) (tuple21 e f)) (tuple21 a
  e)))))
  (= (mem
  (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (tuple2 a1 e1)))
  (t2tb3072 r)
  (relation (tuple2 a1 e1) (tuple2 (tuple2 a1 c1) (tuple2 e1 f1))
  (t2tb2945 u) (t2tb2943 v)))
  (forall ((x (tuple21 (tuple21 a c) (tuple21 e f))) (y (tuple21 a e)))
  (=> (mem (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (tuple2 a1 e1))
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (tuple2 a1 e1) (t2tb2951 x)
  (t2tb2949 y)) (t2tb3072 r)) (and (mem42 x u) (mem44 y v)))))))

(declare-fun t2tb3646 ((set (set (tuple21 (tuple21 (tuple21 a c) (tuple21 e
  f)) (tuple21 (tuple21 b d) (tuple21 e f)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 (tuple21 a c) (tuple21 e f))
  (tuple21 (tuple21 b d) (tuple21 e f))))))) (sort
  (set1
  (set1
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1))
  (tuple2 (tuple2 b1 d1) (tuple2 e1 f1))))) (t2tb3646 x))))

(declare-fun tb2t3646 (uni) (set (set (tuple21 (tuple21 (tuple21 a c)
  (tuple21 e f)) (tuple21 (tuple21 b d) (tuple21 e f))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 (tuple21 a c) (tuple21 e f))
  (tuple21 (tuple21 b d) (tuple21 e f)))))))
  (! (= (tb2t3646 (t2tb3646 i)) i) :pattern ((t2tb3646 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (set1
     (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1))
     (tuple2 (tuple2 b1 d1) (tuple2 e1 f1))))) j)
     (= (t2tb3646 (tb2t3646 j)) j)) :pattern ((t2tb3646 (tb2t3646 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 (tuple21 a c) (tuple21 e f))))
  (v (set (tuple21 (tuple21 b d) (tuple21 e f))))
  (r (set (tuple21 (tuple21 (tuple21 a c) (tuple21 e f)) (tuple21 (tuple21 b
  d) (tuple21 e f))))))
  (= (mem
  (set1
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1))
  (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)))) (t2tb3074 r)
  (relation (tuple2 (tuple2 b1 d1) (tuple2 e1 f1))
  (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (t2tb2945 u) (t2tb2944 v)))
  (forall ((x (tuple21 (tuple21 a c) (tuple21 e f))) (y (tuple21 (tuple21 b
  d) (tuple21 e f))))
  (=> (mem
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1))
  (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)))
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1))
  (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (t2tb2951 x) (t2tb2950 y))
  (t2tb3074 r)) (and (mem42 x u) (mem43 y v)))))))

(declare-fun t2tb3647 ((set (set (tuple21 (tuple21 (tuple21 a c) (tuple21 e
  f)) (tuple21 (tuple21 a c) (tuple21 e f)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 (tuple21 a c) (tuple21 e f))
  (tuple21 (tuple21 a c) (tuple21 e f))))))) (sort
  (set1
  (set1
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1))
  (tuple2 (tuple2 a1 c1) (tuple2 e1 f1))))) (t2tb3647 x))))

(declare-fun tb2t3647 (uni) (set (set (tuple21 (tuple21 (tuple21 a c)
  (tuple21 e f)) (tuple21 (tuple21 a c) (tuple21 e f))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 (tuple21 a c) (tuple21 e f))
  (tuple21 (tuple21 a c) (tuple21 e f)))))))
  (! (= (tb2t3647 (t2tb3647 i)) i) :pattern ((t2tb3647 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (set1
     (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1))
     (tuple2 (tuple2 a1 c1) (tuple2 e1 f1))))) j)
     (= (t2tb3647 (tb2t3647 j)) j)) :pattern ((t2tb3647 (tb2t3647 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 (tuple21 a c) (tuple21 e f))))
  (v (set (tuple21 (tuple21 a c) (tuple21 e f))))
  (r (set (tuple21 (tuple21 (tuple21 a c) (tuple21 e f)) (tuple21 (tuple21 a
  c) (tuple21 e f))))))
  (= (mem
  (set1
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1))
  (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)))) (t2tb3076 r)
  (relation (tuple2 (tuple2 a1 c1) (tuple2 e1 f1))
  (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (t2tb2945 u) (t2tb2945 v)))
  (forall ((x (tuple21 (tuple21 a c) (tuple21 e f))) (y (tuple21 (tuple21 a
  c) (tuple21 e f))))
  (=> (mem
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1))
  (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)))
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1))
  (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (t2tb2951 x) (t2tb2951 y))
  (t2tb3076 r)) (and (mem42 x u) (mem42 y v)))))))

(declare-fun t2tb3648 ((set (set (tuple21 (tuple21 (tuple21 a c) (tuple21 e
  f)) (set (tuple21 d f)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 (tuple21 a c) (tuple21 e f))
  (set (tuple21 d f))))))) (sort
  (set1
  (set1
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (set1 (tuple2 d1 f1)))))
  (t2tb3648 x))))

(declare-fun tb2t3648 (uni) (set (set (tuple21 (tuple21 (tuple21 a c)
  (tuple21 e f)) (set (tuple21 d f))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 (tuple21 a c) (tuple21 e f))
  (set (tuple21 d f)))))))
  (! (= (tb2t3648 (t2tb3648 i)) i) :pattern ((t2tb3648 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (set1
     (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (set1 (tuple2 d1 f1)))))
     j) (= (t2tb3648 (tb2t3648 j)) j)) :pattern ((t2tb3648 (tb2t3648 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 (tuple21 a c) (tuple21 e f))))
  (v (set (set (tuple21 d f)))) (r (set (tuple21 (tuple21 (tuple21 a c)
  (tuple21 e f)) (set (tuple21 d f))))))
  (= (mem
  (set1
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (set1 (tuple2 d1 f1))))
  (t2tb3078 r)
  (relation (set1 (tuple2 d1 f1)) (tuple2 (tuple2 a1 c1) (tuple2 e1 f1))
  (t2tb2945 u) (t2tb2939 v)))
  (forall ((x (tuple21 (tuple21 a c) (tuple21 e f))) (y (set (tuple21 d f))))
  (=> (mem
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (set1 (tuple2 d1 f1)))
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (set1 (tuple2 d1 f1))
  (t2tb2951 x) (t2tb2938 y)) (t2tb3078 r)) (and (mem42 x u) (mem41 y v)))))))

(declare-fun t2tb3649 ((set (set (tuple21 (tuple21 (tuple21 a c) (tuple21 e
  f)) (tuple21 d f))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 (tuple21 a c) (tuple21 e f))
  (tuple21 d f)))))) (sort
  (set1
  (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (tuple2 d1 f1))))
  (t2tb3649 x))))

(declare-fun tb2t3649 (uni) (set (set (tuple21 (tuple21 (tuple21 a c)
  (tuple21 e f)) (tuple21 d f)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 (tuple21 a c) (tuple21 e f))
  (tuple21 d f))))))
  (! (= (tb2t3649 (t2tb3649 i)) i) :pattern ((t2tb3649 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (tuple2 d1 f1))))
     j) (= (t2tb3649 (tb2t3649 j)) j)) :pattern ((t2tb3649 (tb2t3649 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 (tuple21 a c) (tuple21 e f)))) (v (set (tuple21 d
  f))) (r (set (tuple21 (tuple21 (tuple21 a c) (tuple21 e f)) (tuple21 d
  f)))))
  (= (mem
  (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (tuple2 d1 f1)))
  (t2tb3080 r)
  (relation (tuple2 d1 f1) (tuple2 (tuple2 a1 c1) (tuple2 e1 f1))
  (t2tb2945 u) (t2tb2938 v)))
  (forall ((x (tuple21 (tuple21 a c) (tuple21 e f))) (y (tuple21 d f)))
  (=> (mem (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (tuple2 d1 f1))
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (tuple2 d1 f1) (t2tb2951 x)
  (t2tb2952 y)) (t2tb3080 r)) (and (mem42 x u) (mem40 y v)))))))

(declare-fun t2tb3650 ((set (set (tuple21 (tuple21 (tuple21 a c) (tuple21 e
  f)) (set (tuple21 b e)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 (tuple21 a c) (tuple21 e f))
  (set (tuple21 b e))))))) (sort
  (set1
  (set1
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (set1 (tuple2 b1 e1)))))
  (t2tb3650 x))))

(declare-fun tb2t3650 (uni) (set (set (tuple21 (tuple21 (tuple21 a c)
  (tuple21 e f)) (set (tuple21 b e))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 (tuple21 a c) (tuple21 e f))
  (set (tuple21 b e)))))))
  (! (= (tb2t3650 (t2tb3650 i)) i) :pattern ((t2tb3650 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (set1
     (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (set1 (tuple2 b1 e1)))))
     j) (= (t2tb3650 (tb2t3650 j)) j)) :pattern ((t2tb3650 (tb2t3650 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 (tuple21 a c) (tuple21 e f))))
  (v (set (set (tuple21 b e)))) (r (set (tuple21 (tuple21 (tuple21 a c)
  (tuple21 e f)) (set (tuple21 b e))))))
  (= (mem
  (set1
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (set1 (tuple2 b1 e1))))
  (t2tb3082 r)
  (relation (set1 (tuple2 b1 e1)) (tuple2 (tuple2 a1 c1) (tuple2 e1 f1))
  (t2tb2945 u) (t2tb2941 v)))
  (forall ((x (tuple21 (tuple21 a c) (tuple21 e f))) (y (set (tuple21 b e))))
  (=> (mem
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (set1 (tuple2 b1 e1)))
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (set1 (tuple2 b1 e1))
  (t2tb2951 x) (t2tb2940 y)) (t2tb3082 r)) (and (mem42 x u) (mem39 y v)))))))

(declare-fun t2tb3651 ((set (set (tuple21 (tuple21 (tuple21 a c) (tuple21 e
  f)) (tuple21 b e))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 (tuple21 a c) (tuple21 e f))
  (tuple21 b e)))))) (sort
  (set1
  (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (tuple2 b1 e1))))
  (t2tb3651 x))))

(declare-fun tb2t3651 (uni) (set (set (tuple21 (tuple21 (tuple21 a c)
  (tuple21 e f)) (tuple21 b e)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 (tuple21 a c) (tuple21 e f))
  (tuple21 b e))))))
  (! (= (tb2t3651 (t2tb3651 i)) i) :pattern ((t2tb3651 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (tuple2 b1 e1))))
     j) (= (t2tb3651 (tb2t3651 j)) j)) :pattern ((t2tb3651 (tb2t3651 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 (tuple21 a c) (tuple21 e f)))) (v (set (tuple21 b
  e))) (r (set (tuple21 (tuple21 (tuple21 a c) (tuple21 e f)) (tuple21 b
  e)))))
  (= (mem
  (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (tuple2 b1 e1)))
  (t2tb3084 r)
  (relation (tuple2 b1 e1) (tuple2 (tuple2 a1 c1) (tuple2 e1 f1))
  (t2tb2945 u) (t2tb2940 v)))
  (forall ((x (tuple21 (tuple21 a c) (tuple21 e f))) (y (tuple21 b e)))
  (=> (mem (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (tuple2 b1 e1))
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (tuple2 b1 e1) (t2tb2951 x)
  (t2tb2953 y)) (t2tb3084 r)) (and (mem42 x u) (mem38 y v)))))))

(declare-fun t2tb3652 ((set (set (tuple21 (tuple21 (tuple21 a c) (tuple21 e
  f)) f)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 (tuple21 a c) (tuple21 e f)) f)))))
  (sort (set1 (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) f1)))
  (t2tb3652 x))))

(declare-fun tb2t3652 (uni) (set (set (tuple21 (tuple21 (tuple21 a c)
  (tuple21 e f)) f))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 (tuple21 a c) (tuple21 e f)) f)))))
  (! (= (tb2t3652 (t2tb3652 i)) i) :pattern ((t2tb3652 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) f1))) j)
     (= (t2tb3652 (tb2t3652 j)) j)) :pattern ((t2tb3652 (tb2t3652 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 (tuple21 a c) (tuple21 e f)))) (v (set f))
  (r (set (tuple21 (tuple21 (tuple21 a c) (tuple21 e f)) f))))
  (= (mem (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) f1))
  (t2tb3086 r)
  (relation f1 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (t2tb2945 u)
  (t2tb2946 v)))
  (forall ((x (tuple21 (tuple21 a c) (tuple21 e f))) (y f))
  (=> (mem (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) f1)
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) f1 (t2tb2951 x)
  (t2tb2954 y)) (t2tb3086 r)) (and (mem42 x u) (mem37 y v)))))))

(declare-fun t2tb3653 ((set (set (tuple21 (tuple21 (tuple21 a c) (tuple21 e
  f)) e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 (tuple21 a c) (tuple21 e f)) e)))))
  (sort (set1 (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) e1)))
  (t2tb3653 x))))

(declare-fun tb2t3653 (uni) (set (set (tuple21 (tuple21 (tuple21 a c)
  (tuple21 e f)) e))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 (tuple21 a c) (tuple21 e f)) e)))))
  (! (= (tb2t3653 (t2tb3653 i)) i) :pattern ((t2tb3653 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) e1))) j)
     (= (t2tb3653 (tb2t3653 j)) j)) :pattern ((t2tb3653 (tb2t3653 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 (tuple21 a c) (tuple21 e f)))) (v (set e))
  (r (set (tuple21 (tuple21 (tuple21 a c) (tuple21 e f)) e))))
  (= (mem (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) e1))
  (t2tb3088 r)
  (relation e1 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (t2tb2945 u)
  (t2tb2947 v)))
  (forall ((x (tuple21 (tuple21 a c) (tuple21 e f))) (y e))
  (=> (mem (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) e1)
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) e1 (t2tb2951 x)
  (t2tb2955 y)) (t2tb3088 r)) (and (mem42 x u) (mem36 y v)))))))

(declare-fun t2tb3654 ((set (set (tuple21 (tuple21 (tuple21 a c) (tuple21 e
  f)) (tuple21 (tuple21 a c) (tuple21 b d)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 (tuple21 a c) (tuple21 e f))
  (tuple21 (tuple21 a c) (tuple21 b d))))))) (sort
  (set1
  (set1
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1))
  (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))))) (t2tb3654 x))))

(declare-fun tb2t3654 (uni) (set (set (tuple21 (tuple21 (tuple21 a c)
  (tuple21 e f)) (tuple21 (tuple21 a c) (tuple21 b d))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 (tuple21 a c) (tuple21 e f))
  (tuple21 (tuple21 a c) (tuple21 b d)))))))
  (! (= (tb2t3654 (t2tb3654 i)) i) :pattern ((t2tb3654 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (set1
     (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1))
     (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))))) j)
     (= (t2tb3654 (tb2t3654 j)) j)) :pattern ((t2tb3654 (tb2t3654 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 (tuple21 a c) (tuple21 e f))))
  (v (set (tuple21 (tuple21 a c) (tuple21 b d))))
  (r (set (tuple21 (tuple21 (tuple21 a c) (tuple21 e f)) (tuple21 (tuple21 a
  c) (tuple21 b d))))))
  (= (mem
  (set1
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1))
  (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))) (t2tb3090 r)
  (relation (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))
  (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (t2tb2945 u) (t2tb686 v)))
  (forall ((x (tuple21 (tuple21 a c) (tuple21 e f))) (y (tuple21 (tuple21 a
  c) (tuple21 b d))))
  (=> (mem
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1))
  (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1))
  (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb2951 x) (t2tb691 y))
  (t2tb3090 r)) (and (mem42 x u) (mem24 y v)))))))

(declare-fun t2tb3655 ((set (set (tuple21 (tuple21 (tuple21 a c) (tuple21 e
  f)) (set (tuple21 c d)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 (tuple21 a c) (tuple21 e f))
  (set (tuple21 c d))))))) (sort
  (set1
  (set1
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (set1 (tuple2 c1 d1)))))
  (t2tb3655 x))))

(declare-fun tb2t3655 (uni) (set (set (tuple21 (tuple21 (tuple21 a c)
  (tuple21 e f)) (set (tuple21 c d))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 (tuple21 a c) (tuple21 e f))
  (set (tuple21 c d)))))))
  (! (= (tb2t3655 (t2tb3655 i)) i) :pattern ((t2tb3655 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (set1
     (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (set1 (tuple2 c1 d1)))))
     j) (= (t2tb3655 (tb2t3655 j)) j)) :pattern ((t2tb3655 (tb2t3655 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 (tuple21 a c) (tuple21 e f))))
  (v (set (set (tuple21 c d)))) (r (set (tuple21 (tuple21 (tuple21 a c)
  (tuple21 e f)) (set (tuple21 c d))))))
  (= (mem
  (set1
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (set1 (tuple2 c1 d1))))
  (t2tb3092 r)
  (relation (set1 (tuple2 c1 d1)) (tuple2 (tuple2 a1 c1) (tuple2 e1 f1))
  (t2tb2945 u) (t2tb688 v)))
  (forall ((x (tuple21 (tuple21 a c) (tuple21 e f))) (y (set (tuple21 c d))))
  (=> (mem
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (set1 (tuple2 c1 d1)))
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (set1 (tuple2 c1 d1))
  (t2tb2951 x) (t2tb689 y)) (t2tb3092 r)) (and (mem42 x u) (mem22 y v)))))))

(declare-fun t2tb3656 ((set (set (tuple21 (tuple21 (tuple21 a c) (tuple21 e
  f)) (tuple21 c d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 (tuple21 a c) (tuple21 e f))
  (tuple21 c d)))))) (sort
  (set1
  (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (tuple2 c1 d1))))
  (t2tb3656 x))))

(declare-fun tb2t3656 (uni) (set (set (tuple21 (tuple21 (tuple21 a c)
  (tuple21 e f)) (tuple21 c d)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 (tuple21 a c) (tuple21 e f))
  (tuple21 c d))))))
  (! (= (tb2t3656 (t2tb3656 i)) i) :pattern ((t2tb3656 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (tuple2 c1 d1))))
     j) (= (t2tb3656 (tb2t3656 j)) j)) :pattern ((t2tb3656 (tb2t3656 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 (tuple21 a c) (tuple21 e f)))) (v (set (tuple21 c
  d))) (r (set (tuple21 (tuple21 (tuple21 a c) (tuple21 e f)) (tuple21 c
  d)))))
  (= (mem
  (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (tuple2 c1 d1)))
  (t2tb3094 r)
  (relation (tuple2 c1 d1) (tuple2 (tuple2 a1 c1) (tuple2 e1 f1))
  (t2tb2945 u) (t2tb689 v)))
  (forall ((x (tuple21 (tuple21 a c) (tuple21 e f))) (y (tuple21 c d)))
  (=> (mem (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (tuple2 c1 d1))
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (tuple2 c1 d1) (t2tb2951 x)
  (t2tb693 y)) (t2tb3094 r)) (and (mem42 x u) (mem21 y v)))))))

(declare-fun t2tb3657 ((set (set (tuple21 (tuple21 (tuple21 a c) (tuple21 e
  f)) d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 (tuple21 a c) (tuple21 e f)) d)))))
  (sort (set1 (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) d1)))
  (t2tb3657 x))))

(declare-fun tb2t3657 (uni) (set (set (tuple21 (tuple21 (tuple21 a c)
  (tuple21 e f)) d))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 (tuple21 a c) (tuple21 e f)) d)))))
  (! (= (tb2t3657 (t2tb3657 i)) i) :pattern ((t2tb3657 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) d1))) j)
     (= (t2tb3657 (tb2t3657 j)) j)) :pattern ((t2tb3657 (tb2t3657 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 (tuple21 a c) (tuple21 e f)))) (v (set d))
  (r (set (tuple21 (tuple21 (tuple21 a c) (tuple21 e f)) d))))
  (= (mem (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) d1))
  (t2tb3096 r)
  (relation d1 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (t2tb2945 u)
  (t2tb690 v)))
  (forall ((x (tuple21 (tuple21 a c) (tuple21 e f))) (y d))
  (=> (mem (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) d1)
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) d1 (t2tb2951 x) (t2tb694 y))
  (t2tb3096 r)) (and (mem42 x u) (mem20 y v)))))))

(declare-fun t2tb3658 ((set (set (tuple21 (tuple21 (tuple21 a c) (tuple21 e
  f)) c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 (tuple21 a c) (tuple21 e f)) c)))))
  (sort (set1 (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) c1)))
  (t2tb3658 x))))

(declare-fun tb2t3658 (uni) (set (set (tuple21 (tuple21 (tuple21 a c)
  (tuple21 e f)) c))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 (tuple21 a c) (tuple21 e f)) c)))))
  (! (= (tb2t3658 (t2tb3658 i)) i) :pattern ((t2tb3658 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) c1))) j)
     (= (t2tb3658 (tb2t3658 j)) j)) :pattern ((t2tb3658 (tb2t3658 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 (tuple21 a c) (tuple21 e f)))) (v (set c))
  (r (set (tuple21 (tuple21 (tuple21 a c) (tuple21 e f)) c))))
  (= (mem (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) c1))
  (t2tb3098 r)
  (relation c1 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (t2tb2945 u)
  (t2tb132 v)))
  (forall ((x (tuple21 (tuple21 a c) (tuple21 e f))) (y c))
  (=> (mem (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) c1)
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) c1 (t2tb2951 x) (t2tb135 y))
  (t2tb3098 r)) (and (mem42 x u) (mem7 y v)))))))

(declare-fun t2tb3659 ((set (set (tuple21 (tuple21 (tuple21 a c) (tuple21 e
  f)) (set (tuple21 a b)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 (tuple21 a c) (tuple21 e f))
  (set (tuple21 a b))))))) (sort
  (set1
  (set1
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (set1 (tuple2 a1 b1)))))
  (t2tb3659 x))))

(declare-fun tb2t3659 (uni) (set (set (tuple21 (tuple21 (tuple21 a c)
  (tuple21 e f)) (set (tuple21 a b))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 (tuple21 a c) (tuple21 e f))
  (set (tuple21 a b)))))))
  (! (= (tb2t3659 (t2tb3659 i)) i) :pattern ((t2tb3659 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (set1
     (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (set1 (tuple2 a1 b1)))))
     j) (= (t2tb3659 (tb2t3659 j)) j)) :pattern ((t2tb3659 (tb2t3659 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 (tuple21 a c) (tuple21 e f))))
  (v (set (set (tuple21 a b)))) (r (set (tuple21 (tuple21 (tuple21 a c)
  (tuple21 e f)) (set (tuple21 a b))))))
  (= (mem
  (set1
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (set1 (tuple2 a1 b1))))
  (t2tb3100 r)
  (relation (set1 (tuple2 a1 b1)) (tuple2 (tuple2 a1 c1) (tuple2 e1 f1))
  (t2tb2945 u) (t2tb10 v)))
  (forall ((x (tuple21 (tuple21 a c) (tuple21 e f))) (y (set (tuple21 a b))))
  (=> (mem
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (set1 (tuple2 a1 b1)))
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (set1 (tuple2 a1 b1))
  (t2tb2951 x) (t2tb11 y)) (t2tb3100 r)) (and (mem42 x u) (mem4 y v)))))))

(declare-fun t2tb3660 ((set (set (tuple21 (tuple21 (tuple21 a c) (tuple21 e
  f)) (tuple21 a b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 (tuple21 a c) (tuple21 e f))
  (tuple21 a b)))))) (sort
  (set1
  (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (tuple2 a1 b1))))
  (t2tb3660 x))))

(declare-fun tb2t3660 (uni) (set (set (tuple21 (tuple21 (tuple21 a c)
  (tuple21 e f)) (tuple21 a b)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 (tuple21 a c) (tuple21 e f))
  (tuple21 a b))))))
  (! (= (tb2t3660 (t2tb3660 i)) i) :pattern ((t2tb3660 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (tuple2 a1 b1))))
     j) (= (t2tb3660 (tb2t3660 j)) j)) :pattern ((t2tb3660 (tb2t3660 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 (tuple21 a c) (tuple21 e f)))) (v (set (tuple21 a
  b))) (r (set (tuple21 (tuple21 (tuple21 a c) (tuple21 e f)) (tuple21 a
  b)))))
  (= (mem
  (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (tuple2 a1 b1)))
  (t2tb3102 r)
  (relation (tuple2 a1 b1) (tuple2 (tuple2 a1 c1) (tuple2 e1 f1))
  (t2tb2945 u) (t2tb11 v)))
  (forall ((x (tuple21 (tuple21 a c) (tuple21 e f))) (y (tuple21 a b)))
  (=> (mem (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (tuple2 a1 b1))
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (tuple2 a1 b1) (t2tb2951 x)
  (t2tb13 y)) (t2tb3102 r)) (and (mem42 x u) (mem3 y v)))))))

(declare-fun t2tb3661 ((set (set (tuple21 (tuple21 (tuple21 a c) (tuple21 e
  f)) b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 (tuple21 a c) (tuple21 e f)) b)))))
  (sort (set1 (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) b1)))
  (t2tb3661 x))))

(declare-fun tb2t3661 (uni) (set (set (tuple21 (tuple21 (tuple21 a c)
  (tuple21 e f)) b))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 (tuple21 a c) (tuple21 e f)) b)))))
  (! (= (tb2t3661 (t2tb3661 i)) i) :pattern ((t2tb3661 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) b1))) j)
     (= (t2tb3661 (tb2t3661 j)) j)) :pattern ((t2tb3661 (tb2t3661 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 (tuple21 a c) (tuple21 e f)))) (v (set b))
  (r (set (tuple21 (tuple21 (tuple21 a c) (tuple21 e f)) b))))
  (= (mem (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) b1))
  (t2tb3104 r)
  (relation b1 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (t2tb2945 u)
  (t2tb12 v)))
  (forall ((x (tuple21 (tuple21 a c) (tuple21 e f))) (y b))
  (=> (mem (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) b1)
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) b1 (t2tb2951 x) (t2tb14 y))
  (t2tb3104 r)) (and (mem42 x u) (mem2 y v)))))))

(declare-fun t2tb3662 ((set (set (tuple21 (tuple21 (tuple21 a c) (tuple21 e
  f)) a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 (tuple21 a c) (tuple21 e f)) a)))))
  (sort (set1 (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) a1)))
  (t2tb3662 x))))

(declare-fun tb2t3662 (uni) (set (set (tuple21 (tuple21 (tuple21 a c)
  (tuple21 e f)) a))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 (tuple21 a c) (tuple21 e f)) a)))))
  (! (= (tb2t3662 (t2tb3662 i)) i) :pattern ((t2tb3662 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) a1))) j)
     (= (t2tb3662 (tb2t3662 j)) j)) :pattern ((t2tb3662 (tb2t3662 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 (tuple21 a c) (tuple21 e f)))) (v (set a))
  (r (set (tuple21 (tuple21 (tuple21 a c) (tuple21 e f)) a))))
  (= (mem (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) a1))
  (t2tb3106 r)
  (relation a1 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (t2tb2945 u) (t2tb1 v)))
  (forall ((x (tuple21 (tuple21 a c) (tuple21 e f))) (y a))
  (=> (mem (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) a1)
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) a1 (t2tb2951 x) (t2tb2 y))
  (t2tb3106 r)) (and (mem42 x u) (mem1 y v)))))))

;; mem_relation
  (assert
  (forall ((b2 ty))
  (forall ((u (set (tuple21 (tuple21 a c) (tuple21 e f)))) (v uni) (r uni))
  (and
  (=> (mem (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) b2)) r
  (relation b2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (t2tb2945 u) v))
  (forall ((x (tuple21 (tuple21 a c) (tuple21 e f))) (y uni))
  (=> (mem (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) b2)
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) b2 (t2tb2951 x) y) r)
  (and (mem42 x u) (mem b2 y v)))))
  (=>
  (forall ((x (tuple21 (tuple21 a c) (tuple21 e f))) (y uni))
  (=> (sort b2 y)
  (=> (mem (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) b2)
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) b2 (t2tb2951 x) y) r)
  (and (mem42 x u) (mem b2 y v))))) (mem
  (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) b2)) r
  (relation b2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (t2tb2945 u) v)))))))

(declare-fun t2tb3663 ((set (set (tuple21 (set (tuple21 d f)) (tuple21 c
  f))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 d f)) (tuple21 c f)))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 d1 f1)) (tuple2 c1 f1)))) (t2tb3663 x))))

(declare-fun tb2t3663 (uni) (set (set (tuple21 (set (tuple21 d f)) (tuple21 c
  f)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 d f)) (tuple21 c f))))))
  (! (= (tb2t3663 (t2tb3663 i)) i) :pattern ((t2tb3663 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 d1 f1)) (tuple2 c1 f1)))) j)
     (= (t2tb3663 (tb2t3663 j)) j)) :pattern ((t2tb3663 (tb2t3663 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 d f)))) (v (set (tuple21 c f)))
  (r (set (tuple21 (set (tuple21 d f)) (tuple21 c f)))))
  (= (mem (set1 (tuple2 (set1 (tuple2 d1 f1)) (tuple2 c1 f1))) (t2tb3108 r)
  (relation (tuple2 c1 f1) (set1 (tuple2 d1 f1)) (t2tb2939 u) (t2tb2942 v)))
  (forall ((x (set (tuple21 d f))) (y (tuple21 c f)))
  (=> (mem (tuple2 (set1 (tuple2 d1 f1)) (tuple2 c1 f1))
  (Tuple2 (set1 (tuple2 d1 f1)) (tuple2 c1 f1) (t2tb2938 x) (t2tb2948 y))
  (t2tb3108 r)) (and (mem41 x u) (mem45 y v)))))))

(declare-fun t2tb3664 ((set (set (tuple21 (set (tuple21 d f)) (tuple21 a
  e))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 d f)) (tuple21 a e)))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 d1 f1)) (tuple2 a1 e1)))) (t2tb3664 x))))

(declare-fun tb2t3664 (uni) (set (set (tuple21 (set (tuple21 d f)) (tuple21 a
  e)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 d f)) (tuple21 a e))))))
  (! (= (tb2t3664 (t2tb3664 i)) i) :pattern ((t2tb3664 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 d1 f1)) (tuple2 a1 e1)))) j)
     (= (t2tb3664 (tb2t3664 j)) j)) :pattern ((t2tb3664 (tb2t3664 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 d f)))) (v (set (tuple21 a e)))
  (r (set (tuple21 (set (tuple21 d f)) (tuple21 a e)))))
  (= (mem (set1 (tuple2 (set1 (tuple2 d1 f1)) (tuple2 a1 e1))) (t2tb3110 r)
  (relation (tuple2 a1 e1) (set1 (tuple2 d1 f1)) (t2tb2939 u) (t2tb2943 v)))
  (forall ((x (set (tuple21 d f))) (y (tuple21 a e)))
  (=> (mem (tuple2 (set1 (tuple2 d1 f1)) (tuple2 a1 e1))
  (Tuple2 (set1 (tuple2 d1 f1)) (tuple2 a1 e1) (t2tb2938 x) (t2tb2949 y))
  (t2tb3110 r)) (and (mem41 x u) (mem44 y v)))))))

(declare-fun t2tb3665 ((set (set (tuple21 (set (tuple21 d f))
  (tuple21 (tuple21 b d) (tuple21 e f)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 d f)) (tuple21 (tuple21 b d)
  (tuple21 e f))))))) (sort
  (set1
  (set1
  (tuple2 (set1 (tuple2 d1 f1)) (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)))))
  (t2tb3665 x))))

(declare-fun tb2t3665 (uni) (set (set (tuple21 (set (tuple21 d f))
  (tuple21 (tuple21 b d) (tuple21 e f))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 d f)) (tuple21 (tuple21 b d)
  (tuple21 e f)))))))
  (! (= (tb2t3665 (t2tb3665 i)) i) :pattern ((t2tb3665 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (set1
     (tuple2 (set1 (tuple2 d1 f1)) (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)))))
     j) (= (t2tb3665 (tb2t3665 j)) j)) :pattern ((t2tb3665 (tb2t3665 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 d f)))) (v (set (tuple21 (tuple21 b d)
  (tuple21 e f)))) (r (set (tuple21 (set (tuple21 d f)) (tuple21 (tuple21 b
  d) (tuple21 e f))))))
  (= (mem
  (set1
  (tuple2 (set1 (tuple2 d1 f1)) (tuple2 (tuple2 b1 d1) (tuple2 e1 f1))))
  (t2tb3112 r)
  (relation (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (set1 (tuple2 d1 f1))
  (t2tb2939 u) (t2tb2944 v)))
  (forall ((x (set (tuple21 d f))) (y (tuple21 (tuple21 b d) (tuple21 e f))))
  (=> (mem
  (tuple2 (set1 (tuple2 d1 f1)) (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)))
  (Tuple2 (set1 (tuple2 d1 f1)) (tuple2 (tuple2 b1 d1) (tuple2 e1 f1))
  (t2tb2938 x) (t2tb2950 y)) (t2tb3112 r)) (and (mem41 x u) (mem43 y v)))))))

(declare-fun t2tb3666 ((set (set (tuple21 (set (tuple21 d f))
  (tuple21 (tuple21 a c) (tuple21 e f)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 d f)) (tuple21 (tuple21 a c)
  (tuple21 e f))))))) (sort
  (set1
  (set1
  (tuple2 (set1 (tuple2 d1 f1)) (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)))))
  (t2tb3666 x))))

(declare-fun tb2t3666 (uni) (set (set (tuple21 (set (tuple21 d f))
  (tuple21 (tuple21 a c) (tuple21 e f))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 d f)) (tuple21 (tuple21 a c)
  (tuple21 e f)))))))
  (! (= (tb2t3666 (t2tb3666 i)) i) :pattern ((t2tb3666 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (set1
     (tuple2 (set1 (tuple2 d1 f1)) (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)))))
     j) (= (t2tb3666 (tb2t3666 j)) j)) :pattern ((t2tb3666 (tb2t3666 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 d f)))) (v (set (tuple21 (tuple21 a c)
  (tuple21 e f)))) (r (set (tuple21 (set (tuple21 d f)) (tuple21 (tuple21 a
  c) (tuple21 e f))))))
  (= (mem
  (set1
  (tuple2 (set1 (tuple2 d1 f1)) (tuple2 (tuple2 a1 c1) (tuple2 e1 f1))))
  (t2tb3114 r)
  (relation (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (set1 (tuple2 d1 f1))
  (t2tb2939 u) (t2tb2945 v)))
  (forall ((x (set (tuple21 d f))) (y (tuple21 (tuple21 a c) (tuple21 e f))))
  (=> (mem
  (tuple2 (set1 (tuple2 d1 f1)) (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)))
  (Tuple2 (set1 (tuple2 d1 f1)) (tuple2 (tuple2 a1 c1) (tuple2 e1 f1))
  (t2tb2938 x) (t2tb2951 y)) (t2tb3114 r)) (and (mem41 x u) (mem42 y v)))))))

(declare-fun t2tb3667 ((set (set (tuple21 (set (tuple21 d f)) (set (tuple21 d
  f)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 d f)) (set (tuple21 d f)))))))
  (sort (set1 (set1 (tuple2 (set1 (tuple2 d1 f1)) (set1 (tuple2 d1 f1)))))
  (t2tb3667 x))))

(declare-fun tb2t3667 (uni) (set (set (tuple21 (set (tuple21 d f))
  (set (tuple21 d f))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 d f)) (set (tuple21 d f)))))))
  (! (= (tb2t3667 (t2tb3667 i)) i) :pattern ((t2tb3667 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (set1 (tuple2 d1 f1)) (set1 (tuple2 d1 f1))))) j)
     (= (t2tb3667 (tb2t3667 j)) j)) :pattern ((t2tb3667 (tb2t3667 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 d f)))) (v (set (set (tuple21 d f))))
  (r (set (tuple21 (set (tuple21 d f)) (set (tuple21 d f))))))
  (= (mem (set1 (tuple2 (set1 (tuple2 d1 f1)) (set1 (tuple2 d1 f1))))
  (t2tb3116 r)
  (relation (set1 (tuple2 d1 f1)) (set1 (tuple2 d1 f1)) (t2tb2939 u)
  (t2tb2939 v)))
  (forall ((x (set (tuple21 d f))) (y (set (tuple21 d f))))
  (=> (mem (tuple2 (set1 (tuple2 d1 f1)) (set1 (tuple2 d1 f1)))
  (Tuple2 (set1 (tuple2 d1 f1)) (set1 (tuple2 d1 f1)) (t2tb2938 x)
  (t2tb2938 y)) (t2tb3116 r)) (and (mem41 x u) (mem41 y v)))))))

(declare-fun t2tb3668 ((set (set (tuple21 (set (tuple21 d f)) (tuple21 d
  f))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 d f)) (tuple21 d f)))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 d1 f1)) (tuple2 d1 f1)))) (t2tb3668 x))))

(declare-fun tb2t3668 (uni) (set (set (tuple21 (set (tuple21 d f)) (tuple21 d
  f)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 d f)) (tuple21 d f))))))
  (! (= (tb2t3668 (t2tb3668 i)) i) :pattern ((t2tb3668 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 d1 f1)) (tuple2 d1 f1)))) j)
     (= (t2tb3668 (tb2t3668 j)) j)) :pattern ((t2tb3668 (tb2t3668 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 d f)))) (v (set (tuple21 d f)))
  (r (set (tuple21 (set (tuple21 d f)) (tuple21 d f)))))
  (= (mem (set1 (tuple2 (set1 (tuple2 d1 f1)) (tuple2 d1 f1))) (t2tb3118 r)
  (relation (tuple2 d1 f1) (set1 (tuple2 d1 f1)) (t2tb2939 u) (t2tb2938 v)))
  (forall ((x (set (tuple21 d f))) (y (tuple21 d f)))
  (=> (mem (tuple2 (set1 (tuple2 d1 f1)) (tuple2 d1 f1))
  (Tuple2 (set1 (tuple2 d1 f1)) (tuple2 d1 f1) (t2tb2938 x) (t2tb2952 y))
  (t2tb3118 r)) (and (mem41 x u) (mem40 y v)))))))

(declare-fun t2tb3669 ((set (set (tuple21 (set (tuple21 d f)) (set (tuple21 b
  e)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 d f)) (set (tuple21 b e)))))))
  (sort (set1 (set1 (tuple2 (set1 (tuple2 d1 f1)) (set1 (tuple2 b1 e1)))))
  (t2tb3669 x))))

(declare-fun tb2t3669 (uni) (set (set (tuple21 (set (tuple21 d f))
  (set (tuple21 b e))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 d f)) (set (tuple21 b e)))))))
  (! (= (tb2t3669 (t2tb3669 i)) i) :pattern ((t2tb3669 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (set1 (tuple2 d1 f1)) (set1 (tuple2 b1 e1))))) j)
     (= (t2tb3669 (tb2t3669 j)) j)) :pattern ((t2tb3669 (tb2t3669 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 d f)))) (v (set (set (tuple21 b e))))
  (r (set (tuple21 (set (tuple21 d f)) (set (tuple21 b e))))))
  (= (mem (set1 (tuple2 (set1 (tuple2 d1 f1)) (set1 (tuple2 b1 e1))))
  (t2tb3120 r)
  (relation (set1 (tuple2 b1 e1)) (set1 (tuple2 d1 f1)) (t2tb2939 u)
  (t2tb2941 v)))
  (forall ((x (set (tuple21 d f))) (y (set (tuple21 b e))))
  (=> (mem (tuple2 (set1 (tuple2 d1 f1)) (set1 (tuple2 b1 e1)))
  (Tuple2 (set1 (tuple2 d1 f1)) (set1 (tuple2 b1 e1)) (t2tb2938 x)
  (t2tb2940 y)) (t2tb3120 r)) (and (mem41 x u) (mem39 y v)))))))

(declare-fun t2tb3670 ((set (set (tuple21 (set (tuple21 d f)) (tuple21 b
  e))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 d f)) (tuple21 b e)))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 d1 f1)) (tuple2 b1 e1)))) (t2tb3670 x))))

(declare-fun tb2t3670 (uni) (set (set (tuple21 (set (tuple21 d f)) (tuple21 b
  e)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 d f)) (tuple21 b e))))))
  (! (= (tb2t3670 (t2tb3670 i)) i) :pattern ((t2tb3670 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 d1 f1)) (tuple2 b1 e1)))) j)
     (= (t2tb3670 (tb2t3670 j)) j)) :pattern ((t2tb3670 (tb2t3670 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 d f)))) (v (set (tuple21 b e)))
  (r (set (tuple21 (set (tuple21 d f)) (tuple21 b e)))))
  (= (mem (set1 (tuple2 (set1 (tuple2 d1 f1)) (tuple2 b1 e1))) (t2tb3122 r)
  (relation (tuple2 b1 e1) (set1 (tuple2 d1 f1)) (t2tb2939 u) (t2tb2940 v)))
  (forall ((x (set (tuple21 d f))) (y (tuple21 b e)))
  (=> (mem (tuple2 (set1 (tuple2 d1 f1)) (tuple2 b1 e1))
  (Tuple2 (set1 (tuple2 d1 f1)) (tuple2 b1 e1) (t2tb2938 x) (t2tb2953 y))
  (t2tb3122 r)) (and (mem41 x u) (mem38 y v)))))))

(declare-fun t2tb3671 ((set (set (tuple21 (set (tuple21 d f)) f)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 d f)) f))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 d1 f1)) f1))) (t2tb3671 x))))

(declare-fun tb2t3671 (uni) (set (set (tuple21 (set (tuple21 d f)) f))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 d f)) f)))))
  (! (= (tb2t3671 (t2tb3671 i)) i) :pattern ((t2tb3671 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 d1 f1)) f1))) j)
     (= (t2tb3671 (tb2t3671 j)) j)) :pattern ((t2tb3671 (tb2t3671 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 d f)))) (v (set f))
  (r (set (tuple21 (set (tuple21 d f)) f))))
  (= (mem (set1 (tuple2 (set1 (tuple2 d1 f1)) f1)) (t2tb3124 r)
  (relation f1 (set1 (tuple2 d1 f1)) (t2tb2939 u) (t2tb2946 v)))
  (forall ((x (set (tuple21 d f))) (y f))
  (=> (mem (tuple2 (set1 (tuple2 d1 f1)) f1)
  (Tuple2 (set1 (tuple2 d1 f1)) f1 (t2tb2938 x) (t2tb2954 y)) (t2tb3124 r))
  (and (mem41 x u) (mem37 y v)))))))

(declare-fun t2tb3672 ((set (set (tuple21 (set (tuple21 d f)) e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 d f)) e))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 d1 f1)) e1))) (t2tb3672 x))))

(declare-fun tb2t3672 (uni) (set (set (tuple21 (set (tuple21 d f)) e))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 d f)) e)))))
  (! (= (tb2t3672 (t2tb3672 i)) i) :pattern ((t2tb3672 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 d1 f1)) e1))) j)
     (= (t2tb3672 (tb2t3672 j)) j)) :pattern ((t2tb3672 (tb2t3672 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 d f)))) (v (set e))
  (r (set (tuple21 (set (tuple21 d f)) e))))
  (= (mem (set1 (tuple2 (set1 (tuple2 d1 f1)) e1)) (t2tb3126 r)
  (relation e1 (set1 (tuple2 d1 f1)) (t2tb2939 u) (t2tb2947 v)))
  (forall ((x (set (tuple21 d f))) (y e))
  (=> (mem (tuple2 (set1 (tuple2 d1 f1)) e1)
  (Tuple2 (set1 (tuple2 d1 f1)) e1 (t2tb2938 x) (t2tb2955 y)) (t2tb3126 r))
  (and (mem41 x u) (mem36 y v)))))))

(declare-fun t2tb3673 ((set (set (tuple21 (set (tuple21 d f))
  (tuple21 (tuple21 a c) (tuple21 b d)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 d f)) (tuple21 (tuple21 a c)
  (tuple21 b d))))))) (sort
  (set1
  (set1
  (tuple2 (set1 (tuple2 d1 f1)) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))))
  (t2tb3673 x))))

(declare-fun tb2t3673 (uni) (set (set (tuple21 (set (tuple21 d f))
  (tuple21 (tuple21 a c) (tuple21 b d))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 d f)) (tuple21 (tuple21 a c)
  (tuple21 b d)))))))
  (! (= (tb2t3673 (t2tb3673 i)) i) :pattern ((t2tb3673 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (set1
     (tuple2 (set1 (tuple2 d1 f1)) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))))
     j) (= (t2tb3673 (tb2t3673 j)) j)) :pattern ((t2tb3673 (tb2t3673 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 d f)))) (v (set (tuple21 (tuple21 a c)
  (tuple21 b d)))) (r (set (tuple21 (set (tuple21 d f)) (tuple21 (tuple21 a
  c) (tuple21 b d))))))
  (= (mem
  (set1
  (tuple2 (set1 (tuple2 d1 f1)) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))))
  (t2tb3128 r)
  (relation (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (set1 (tuple2 d1 f1))
  (t2tb2939 u) (t2tb686 v)))
  (forall ((x (set (tuple21 d f))) (y (tuple21 (tuple21 a c) (tuple21 b d))))
  (=> (mem
  (tuple2 (set1 (tuple2 d1 f1)) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
  (Tuple2 (set1 (tuple2 d1 f1)) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))
  (t2tb2938 x) (t2tb691 y)) (t2tb3128 r)) (and (mem41 x u) (mem24 y v)))))))

(declare-fun t2tb3674 ((set (set (tuple21 (set (tuple21 d f)) (set (tuple21 c
  d)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 d f)) (set (tuple21 c d)))))))
  (sort (set1 (set1 (tuple2 (set1 (tuple2 d1 f1)) (set1 (tuple2 c1 d1)))))
  (t2tb3674 x))))

(declare-fun tb2t3674 (uni) (set (set (tuple21 (set (tuple21 d f))
  (set (tuple21 c d))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 d f)) (set (tuple21 c d)))))))
  (! (= (tb2t3674 (t2tb3674 i)) i) :pattern ((t2tb3674 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (set1 (tuple2 d1 f1)) (set1 (tuple2 c1 d1))))) j)
     (= (t2tb3674 (tb2t3674 j)) j)) :pattern ((t2tb3674 (tb2t3674 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 d f)))) (v (set (set (tuple21 c d))))
  (r (set (tuple21 (set (tuple21 d f)) (set (tuple21 c d))))))
  (= (mem (set1 (tuple2 (set1 (tuple2 d1 f1)) (set1 (tuple2 c1 d1))))
  (t2tb3130 r)
  (relation (set1 (tuple2 c1 d1)) (set1 (tuple2 d1 f1)) (t2tb2939 u)
  (t2tb688 v)))
  (forall ((x (set (tuple21 d f))) (y (set (tuple21 c d))))
  (=> (mem (tuple2 (set1 (tuple2 d1 f1)) (set1 (tuple2 c1 d1)))
  (Tuple2 (set1 (tuple2 d1 f1)) (set1 (tuple2 c1 d1)) (t2tb2938 x)
  (t2tb689 y)) (t2tb3130 r)) (and (mem41 x u) (mem22 y v)))))))

(declare-fun t2tb3675 ((set (set (tuple21 (set (tuple21 d f)) (tuple21 c
  d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 d f)) (tuple21 c d)))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 d1 f1)) (tuple2 c1 d1)))) (t2tb3675 x))))

(declare-fun tb2t3675 (uni) (set (set (tuple21 (set (tuple21 d f)) (tuple21 c
  d)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 d f)) (tuple21 c d))))))
  (! (= (tb2t3675 (t2tb3675 i)) i) :pattern ((t2tb3675 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 d1 f1)) (tuple2 c1 d1)))) j)
     (= (t2tb3675 (tb2t3675 j)) j)) :pattern ((t2tb3675 (tb2t3675 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 d f)))) (v (set (tuple21 c d)))
  (r (set (tuple21 (set (tuple21 d f)) (tuple21 c d)))))
  (= (mem (set1 (tuple2 (set1 (tuple2 d1 f1)) (tuple2 c1 d1))) (t2tb3132 r)
  (relation (tuple2 c1 d1) (set1 (tuple2 d1 f1)) (t2tb2939 u) (t2tb689 v)))
  (forall ((x (set (tuple21 d f))) (y (tuple21 c d)))
  (=> (mem (tuple2 (set1 (tuple2 d1 f1)) (tuple2 c1 d1))
  (Tuple2 (set1 (tuple2 d1 f1)) (tuple2 c1 d1) (t2tb2938 x) (t2tb693 y))
  (t2tb3132 r)) (and (mem41 x u) (mem21 y v)))))))

(declare-fun t2tb3676 ((set (set (tuple21 (set (tuple21 d f)) d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 d f)) d))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 d1 f1)) d1))) (t2tb3676 x))))

(declare-fun tb2t3676 (uni) (set (set (tuple21 (set (tuple21 d f)) d))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 d f)) d)))))
  (! (= (tb2t3676 (t2tb3676 i)) i) :pattern ((t2tb3676 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 d1 f1)) d1))) j)
     (= (t2tb3676 (tb2t3676 j)) j)) :pattern ((t2tb3676 (tb2t3676 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 d f)))) (v (set d))
  (r (set (tuple21 (set (tuple21 d f)) d))))
  (= (mem (set1 (tuple2 (set1 (tuple2 d1 f1)) d1)) (t2tb3134 r)
  (relation d1 (set1 (tuple2 d1 f1)) (t2tb2939 u) (t2tb690 v)))
  (forall ((x (set (tuple21 d f))) (y d))
  (=> (mem (tuple2 (set1 (tuple2 d1 f1)) d1)
  (Tuple2 (set1 (tuple2 d1 f1)) d1 (t2tb2938 x) (t2tb694 y)) (t2tb3134 r))
  (and (mem41 x u) (mem20 y v)))))))

(declare-fun t2tb3677 ((set (set (tuple21 (set (tuple21 d f)) c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 d f)) c))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 d1 f1)) c1))) (t2tb3677 x))))

(declare-fun tb2t3677 (uni) (set (set (tuple21 (set (tuple21 d f)) c))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 d f)) c)))))
  (! (= (tb2t3677 (t2tb3677 i)) i) :pattern ((t2tb3677 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 d1 f1)) c1))) j)
     (= (t2tb3677 (tb2t3677 j)) j)) :pattern ((t2tb3677 (tb2t3677 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 d f)))) (v (set c))
  (r (set (tuple21 (set (tuple21 d f)) c))))
  (= (mem (set1 (tuple2 (set1 (tuple2 d1 f1)) c1)) (t2tb3136 r)
  (relation c1 (set1 (tuple2 d1 f1)) (t2tb2939 u) (t2tb132 v)))
  (forall ((x (set (tuple21 d f))) (y c))
  (=> (mem (tuple2 (set1 (tuple2 d1 f1)) c1)
  (Tuple2 (set1 (tuple2 d1 f1)) c1 (t2tb2938 x) (t2tb135 y)) (t2tb3136 r))
  (and (mem41 x u) (mem7 y v)))))))

(declare-fun t2tb3678 ((set (set (tuple21 (set (tuple21 d f)) (set (tuple21 a
  b)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 d f)) (set (tuple21 a b)))))))
  (sort (set1 (set1 (tuple2 (set1 (tuple2 d1 f1)) (set1 (tuple2 a1 b1)))))
  (t2tb3678 x))))

(declare-fun tb2t3678 (uni) (set (set (tuple21 (set (tuple21 d f))
  (set (tuple21 a b))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 d f)) (set (tuple21 a b)))))))
  (! (= (tb2t3678 (t2tb3678 i)) i) :pattern ((t2tb3678 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (set1 (tuple2 d1 f1)) (set1 (tuple2 a1 b1))))) j)
     (= (t2tb3678 (tb2t3678 j)) j)) :pattern ((t2tb3678 (tb2t3678 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 d f)))) (v (set (set (tuple21 a b))))
  (r (set (tuple21 (set (tuple21 d f)) (set (tuple21 a b))))))
  (= (mem (set1 (tuple2 (set1 (tuple2 d1 f1)) (set1 (tuple2 a1 b1))))
  (t2tb3138 r)
  (relation (set1 (tuple2 a1 b1)) (set1 (tuple2 d1 f1)) (t2tb2939 u)
  (t2tb10 v)))
  (forall ((x (set (tuple21 d f))) (y (set (tuple21 a b))))
  (=> (mem (tuple2 (set1 (tuple2 d1 f1)) (set1 (tuple2 a1 b1)))
  (Tuple2 (set1 (tuple2 d1 f1)) (set1 (tuple2 a1 b1)) (t2tb2938 x)
  (t2tb11 y)) (t2tb3138 r)) (and (mem41 x u) (mem4 y v)))))))

(declare-fun t2tb3679 ((set (set (tuple21 (set (tuple21 d f)) (tuple21 a
  b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 d f)) (tuple21 a b)))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 d1 f1)) (tuple2 a1 b1)))) (t2tb3679 x))))

(declare-fun tb2t3679 (uni) (set (set (tuple21 (set (tuple21 d f)) (tuple21 a
  b)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 d f)) (tuple21 a b))))))
  (! (= (tb2t3679 (t2tb3679 i)) i) :pattern ((t2tb3679 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 d1 f1)) (tuple2 a1 b1)))) j)
     (= (t2tb3679 (tb2t3679 j)) j)) :pattern ((t2tb3679 (tb2t3679 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 d f)))) (v (set (tuple21 a b)))
  (r (set (tuple21 (set (tuple21 d f)) (tuple21 a b)))))
  (= (mem (set1 (tuple2 (set1 (tuple2 d1 f1)) (tuple2 a1 b1))) (t2tb3140 r)
  (relation (tuple2 a1 b1) (set1 (tuple2 d1 f1)) (t2tb2939 u) (t2tb11 v)))
  (forall ((x (set (tuple21 d f))) (y (tuple21 a b)))
  (=> (mem (tuple2 (set1 (tuple2 d1 f1)) (tuple2 a1 b1))
  (Tuple2 (set1 (tuple2 d1 f1)) (tuple2 a1 b1) (t2tb2938 x) (t2tb13 y))
  (t2tb3140 r)) (and (mem41 x u) (mem3 y v)))))))

(declare-fun t2tb3680 ((set (set (tuple21 (set (tuple21 d f)) b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 d f)) b))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 d1 f1)) b1))) (t2tb3680 x))))

(declare-fun tb2t3680 (uni) (set (set (tuple21 (set (tuple21 d f)) b))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 d f)) b)))))
  (! (= (tb2t3680 (t2tb3680 i)) i) :pattern ((t2tb3680 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 d1 f1)) b1))) j)
     (= (t2tb3680 (tb2t3680 j)) j)) :pattern ((t2tb3680 (tb2t3680 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 d f)))) (v (set b))
  (r (set (tuple21 (set (tuple21 d f)) b))))
  (= (mem (set1 (tuple2 (set1 (tuple2 d1 f1)) b1)) (t2tb3142 r)
  (relation b1 (set1 (tuple2 d1 f1)) (t2tb2939 u) (t2tb12 v)))
  (forall ((x (set (tuple21 d f))) (y b))
  (=> (mem (tuple2 (set1 (tuple2 d1 f1)) b1)
  (Tuple2 (set1 (tuple2 d1 f1)) b1 (t2tb2938 x) (t2tb14 y)) (t2tb3142 r))
  (and (mem41 x u) (mem2 y v)))))))

(declare-fun t2tb3681 ((set (set (tuple21 (set (tuple21 d f)) a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 d f)) a))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 d1 f1)) a1))) (t2tb3681 x))))

(declare-fun tb2t3681 (uni) (set (set (tuple21 (set (tuple21 d f)) a))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 d f)) a)))))
  (! (= (tb2t3681 (t2tb3681 i)) i) :pattern ((t2tb3681 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 d1 f1)) a1))) j)
     (= (t2tb3681 (tb2t3681 j)) j)) :pattern ((t2tb3681 (tb2t3681 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 d f)))) (v (set a))
  (r (set (tuple21 (set (tuple21 d f)) a))))
  (= (mem (set1 (tuple2 (set1 (tuple2 d1 f1)) a1)) (t2tb3144 r)
  (relation a1 (set1 (tuple2 d1 f1)) (t2tb2939 u) (t2tb1 v)))
  (forall ((x (set (tuple21 d f))) (y a))
  (=> (mem (tuple2 (set1 (tuple2 d1 f1)) a1)
  (Tuple2 (set1 (tuple2 d1 f1)) a1 (t2tb2938 x) (t2tb2 y)) (t2tb3144 r))
  (and (mem41 x u) (mem1 y v)))))))

;; mem_relation
  (assert
  (forall ((b2 ty))
  (forall ((u (set (set (tuple21 d f)))) (v uni) (r uni))
  (and
  (=> (mem (set1 (tuple2 (set1 (tuple2 d1 f1)) b2)) r
  (relation b2 (set1 (tuple2 d1 f1)) (t2tb2939 u) v))
  (forall ((x (set (tuple21 d f))) (y uni))
  (=> (mem (tuple2 (set1 (tuple2 d1 f1)) b2)
  (Tuple2 (set1 (tuple2 d1 f1)) b2 (t2tb2938 x) y) r)
  (and (mem41 x u) (mem b2 y v)))))
  (=>
  (forall ((x (set (tuple21 d f))) (y uni))
  (=> (sort b2 y)
  (=> (mem (tuple2 (set1 (tuple2 d1 f1)) b2)
  (Tuple2 (set1 (tuple2 d1 f1)) b2 (t2tb2938 x) y) r)
  (and (mem41 x u) (mem b2 y v))))) (mem
  (set1 (tuple2 (set1 (tuple2 d1 f1)) b2)) r
  (relation b2 (set1 (tuple2 d1 f1)) (t2tb2939 u) v)))))))

(declare-fun t2tb3682 ((set (set (tuple21 (tuple21 d f) (tuple21 c
  f))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 d f) (tuple21 c f)))))) (sort
  (set1 (set1 (tuple2 (tuple2 d1 f1) (tuple2 c1 f1)))) (t2tb3682 x))))

(declare-fun tb2t3682 (uni) (set (set (tuple21 (tuple21 d f) (tuple21 c
  f)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 d f) (tuple21 c f))))))
  (! (= (tb2t3682 (t2tb3682 i)) i) :pattern ((t2tb3682 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 d1 f1) (tuple2 c1 f1)))) j)
     (= (t2tb3682 (tb2t3682 j)) j)) :pattern ((t2tb3682 (tb2t3682 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 d f))) (v (set (tuple21 c f)))
  (r (set (tuple21 (tuple21 d f) (tuple21 c f)))))
  (= (mem (set1 (tuple2 (tuple2 d1 f1) (tuple2 c1 f1))) (t2tb3146 r)
  (relation (tuple2 c1 f1) (tuple2 d1 f1) (t2tb2938 u) (t2tb2942 v)))
  (forall ((x (tuple21 d f)) (y (tuple21 c f)))
  (=> (mem (tuple2 (tuple2 d1 f1) (tuple2 c1 f1))
  (Tuple2 (tuple2 d1 f1) (tuple2 c1 f1) (t2tb2952 x) (t2tb2948 y))
  (t2tb3146 r)) (and (mem40 x u) (mem45 y v)))))))

(declare-fun t2tb3683 ((set (set (tuple21 (tuple21 d f) (tuple21 a
  e))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 d f) (tuple21 a e)))))) (sort
  (set1 (set1 (tuple2 (tuple2 d1 f1) (tuple2 a1 e1)))) (t2tb3683 x))))

(declare-fun tb2t3683 (uni) (set (set (tuple21 (tuple21 d f) (tuple21 a
  e)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 d f) (tuple21 a e))))))
  (! (= (tb2t3683 (t2tb3683 i)) i) :pattern ((t2tb3683 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 d1 f1) (tuple2 a1 e1)))) j)
     (= (t2tb3683 (tb2t3683 j)) j)) :pattern ((t2tb3683 (tb2t3683 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 d f))) (v (set (tuple21 a e)))
  (r (set (tuple21 (tuple21 d f) (tuple21 a e)))))
  (= (mem (set1 (tuple2 (tuple2 d1 f1) (tuple2 a1 e1))) (t2tb3148 r)
  (relation (tuple2 a1 e1) (tuple2 d1 f1) (t2tb2938 u) (t2tb2943 v)))
  (forall ((x (tuple21 d f)) (y (tuple21 a e)))
  (=> (mem (tuple2 (tuple2 d1 f1) (tuple2 a1 e1))
  (Tuple2 (tuple2 d1 f1) (tuple2 a1 e1) (t2tb2952 x) (t2tb2949 y))
  (t2tb3148 r)) (and (mem40 x u) (mem44 y v)))))))

(declare-fun t2tb3684 ((set (set (tuple21 (tuple21 d f) (tuple21 (tuple21 b
  d) (tuple21 e f)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 d f) (tuple21 (tuple21 b d)
  (tuple21 e f))))))) (sort
  (set1
  (set1 (tuple2 (tuple2 d1 f1) (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)))))
  (t2tb3684 x))))

(declare-fun tb2t3684 (uni) (set (set (tuple21 (tuple21 d f)
  (tuple21 (tuple21 b d) (tuple21 e f))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 d f) (tuple21 (tuple21 b d)
  (tuple21 e f)))))))
  (! (= (tb2t3684 (t2tb3684 i)) i) :pattern ((t2tb3684 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (set1 (tuple2 (tuple2 d1 f1) (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)))))
     j) (= (t2tb3684 (tb2t3684 j)) j)) :pattern ((t2tb3684 (tb2t3684 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 d f))) (v (set (tuple21 (tuple21 b d) (tuple21 e
  f)))) (r (set (tuple21 (tuple21 d f) (tuple21 (tuple21 b d) (tuple21 e
  f))))))
  (= (mem
  (set1 (tuple2 (tuple2 d1 f1) (tuple2 (tuple2 b1 d1) (tuple2 e1 f1))))
  (t2tb3150 r)
  (relation (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (tuple2 d1 f1)
  (t2tb2938 u) (t2tb2944 v)))
  (forall ((x (tuple21 d f)) (y (tuple21 (tuple21 b d) (tuple21 e f))))
  (=> (mem (tuple2 (tuple2 d1 f1) (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)))
  (Tuple2 (tuple2 d1 f1) (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (t2tb2952 x)
  (t2tb2950 y)) (t2tb3150 r)) (and (mem40 x u) (mem43 y v)))))))

(declare-fun t2tb3685 ((set (set (tuple21 (tuple21 d f) (tuple21 (tuple21 a
  c) (tuple21 e f)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 d f) (tuple21 (tuple21 a c)
  (tuple21 e f))))))) (sort
  (set1
  (set1 (tuple2 (tuple2 d1 f1) (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)))))
  (t2tb3685 x))))

(declare-fun tb2t3685 (uni) (set (set (tuple21 (tuple21 d f)
  (tuple21 (tuple21 a c) (tuple21 e f))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 d f) (tuple21 (tuple21 a c)
  (tuple21 e f)))))))
  (! (= (tb2t3685 (t2tb3685 i)) i) :pattern ((t2tb3685 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (set1 (tuple2 (tuple2 d1 f1) (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)))))
     j) (= (t2tb3685 (tb2t3685 j)) j)) :pattern ((t2tb3685 (tb2t3685 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 d f))) (v (set (tuple21 (tuple21 a c) (tuple21 e
  f)))) (r (set (tuple21 (tuple21 d f) (tuple21 (tuple21 a c) (tuple21 e
  f))))))
  (= (mem
  (set1 (tuple2 (tuple2 d1 f1) (tuple2 (tuple2 a1 c1) (tuple2 e1 f1))))
  (t2tb3152 r)
  (relation (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (tuple2 d1 f1)
  (t2tb2938 u) (t2tb2945 v)))
  (forall ((x (tuple21 d f)) (y (tuple21 (tuple21 a c) (tuple21 e f))))
  (=> (mem (tuple2 (tuple2 d1 f1) (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)))
  (Tuple2 (tuple2 d1 f1) (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (t2tb2952 x)
  (t2tb2951 y)) (t2tb3152 r)) (and (mem40 x u) (mem42 y v)))))))

(declare-fun t2tb3686 ((set (set (tuple21 (tuple21 d f) (set (tuple21 d
  f)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 d f) (set (tuple21 d f))))))) (sort
  (set1 (set1 (tuple2 (tuple2 d1 f1) (set1 (tuple2 d1 f1))))) (t2tb3686 x))))

(declare-fun tb2t3686 (uni) (set (set (tuple21 (tuple21 d f) (set (tuple21 d
  f))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 d f) (set (tuple21 d f)))))))
  (! (= (tb2t3686 (t2tb3686 i)) i) :pattern ((t2tb3686 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 d1 f1) (set1 (tuple2 d1 f1))))) j)
     (= (t2tb3686 (tb2t3686 j)) j)) :pattern ((t2tb3686 (tb2t3686 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 d f))) (v (set (set (tuple21 d f))))
  (r (set (tuple21 (tuple21 d f) (set (tuple21 d f))))))
  (= (mem (set1 (tuple2 (tuple2 d1 f1) (set1 (tuple2 d1 f1)))) (t2tb3154 r)
  (relation (set1 (tuple2 d1 f1)) (tuple2 d1 f1) (t2tb2938 u) (t2tb2939 v)))
  (forall ((x (tuple21 d f)) (y (set (tuple21 d f))))
  (=> (mem (tuple2 (tuple2 d1 f1) (set1 (tuple2 d1 f1)))
  (Tuple2 (tuple2 d1 f1) (set1 (tuple2 d1 f1)) (t2tb2952 x) (t2tb2938 y))
  (t2tb3154 r)) (and (mem40 x u) (mem41 y v)))))))

(declare-fun t2tb3687 ((set (set (tuple21 (tuple21 d f) (tuple21 d
  f))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 d f) (tuple21 d f)))))) (sort
  (set1 (set1 (tuple2 (tuple2 d1 f1) (tuple2 d1 f1)))) (t2tb3687 x))))

(declare-fun tb2t3687 (uni) (set (set (tuple21 (tuple21 d f) (tuple21 d
  f)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 d f) (tuple21 d f))))))
  (! (= (tb2t3687 (t2tb3687 i)) i) :pattern ((t2tb3687 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 d1 f1) (tuple2 d1 f1)))) j)
     (= (t2tb3687 (tb2t3687 j)) j)) :pattern ((t2tb3687 (tb2t3687 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 d f))) (v (set (tuple21 d f)))
  (r (set (tuple21 (tuple21 d f) (tuple21 d f)))))
  (= (mem (set1 (tuple2 (tuple2 d1 f1) (tuple2 d1 f1))) (t2tb3156 r)
  (relation (tuple2 d1 f1) (tuple2 d1 f1) (t2tb2938 u) (t2tb2938 v)))
  (forall ((x (tuple21 d f)) (y (tuple21 d f)))
  (=> (mem (tuple2 (tuple2 d1 f1) (tuple2 d1 f1))
  (Tuple2 (tuple2 d1 f1) (tuple2 d1 f1) (t2tb2952 x) (t2tb2952 y))
  (t2tb3156 r)) (and (mem40 x u) (mem40 y v)))))))

(declare-fun t2tb3688 ((set (set (tuple21 (tuple21 d f) (set (tuple21 b
  e)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 d f) (set (tuple21 b e))))))) (sort
  (set1 (set1 (tuple2 (tuple2 d1 f1) (set1 (tuple2 b1 e1))))) (t2tb3688 x))))

(declare-fun tb2t3688 (uni) (set (set (tuple21 (tuple21 d f) (set (tuple21 b
  e))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 d f) (set (tuple21 b e)))))))
  (! (= (tb2t3688 (t2tb3688 i)) i) :pattern ((t2tb3688 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 d1 f1) (set1 (tuple2 b1 e1))))) j)
     (= (t2tb3688 (tb2t3688 j)) j)) :pattern ((t2tb3688 (tb2t3688 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 d f))) (v (set (set (tuple21 b e))))
  (r (set (tuple21 (tuple21 d f) (set (tuple21 b e))))))
  (= (mem (set1 (tuple2 (tuple2 d1 f1) (set1 (tuple2 b1 e1)))) (t2tb3158 r)
  (relation (set1 (tuple2 b1 e1)) (tuple2 d1 f1) (t2tb2938 u) (t2tb2941 v)))
  (forall ((x (tuple21 d f)) (y (set (tuple21 b e))))
  (=> (mem (tuple2 (tuple2 d1 f1) (set1 (tuple2 b1 e1)))
  (Tuple2 (tuple2 d1 f1) (set1 (tuple2 b1 e1)) (t2tb2952 x) (t2tb2940 y))
  (t2tb3158 r)) (and (mem40 x u) (mem39 y v)))))))

(declare-fun t2tb3689 ((set (set (tuple21 (tuple21 d f) (tuple21 b
  e))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 d f) (tuple21 b e)))))) (sort
  (set1 (set1 (tuple2 (tuple2 d1 f1) (tuple2 b1 e1)))) (t2tb3689 x))))

(declare-fun tb2t3689 (uni) (set (set (tuple21 (tuple21 d f) (tuple21 b
  e)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 d f) (tuple21 b e))))))
  (! (= (tb2t3689 (t2tb3689 i)) i) :pattern ((t2tb3689 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 d1 f1) (tuple2 b1 e1)))) j)
     (= (t2tb3689 (tb2t3689 j)) j)) :pattern ((t2tb3689 (tb2t3689 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 d f))) (v (set (tuple21 b e)))
  (r (set (tuple21 (tuple21 d f) (tuple21 b e)))))
  (= (mem (set1 (tuple2 (tuple2 d1 f1) (tuple2 b1 e1))) (t2tb3160 r)
  (relation (tuple2 b1 e1) (tuple2 d1 f1) (t2tb2938 u) (t2tb2940 v)))
  (forall ((x (tuple21 d f)) (y (tuple21 b e)))
  (=> (mem (tuple2 (tuple2 d1 f1) (tuple2 b1 e1))
  (Tuple2 (tuple2 d1 f1) (tuple2 b1 e1) (t2tb2952 x) (t2tb2953 y))
  (t2tb3160 r)) (and (mem40 x u) (mem38 y v)))))))

(declare-fun t2tb3690 ((set (set (tuple21 (tuple21 d f) f)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 d f) f))))) (sort
  (set1 (set1 (tuple2 (tuple2 d1 f1) f1))) (t2tb3690 x))))

(declare-fun tb2t3690 (uni) (set (set (tuple21 (tuple21 d f) f))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 d f) f)))))
  (! (= (tb2t3690 (t2tb3690 i)) i) :pattern ((t2tb3690 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 d1 f1) f1))) j)
     (= (t2tb3690 (tb2t3690 j)) j)) :pattern ((t2tb3690 (tb2t3690 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 d f))) (v (set f)) (r (set (tuple21 (tuple21 d f)
  f))))
  (= (mem (set1 (tuple2 (tuple2 d1 f1) f1)) (t2tb3162 r)
  (relation f1 (tuple2 d1 f1) (t2tb2938 u) (t2tb2946 v)))
  (forall ((x (tuple21 d f)) (y f))
  (=> (mem (tuple2 (tuple2 d1 f1) f1)
  (Tuple2 (tuple2 d1 f1) f1 (t2tb2952 x) (t2tb2954 y)) (t2tb3162 r))
  (and (mem40 x u) (mem37 y v)))))))

(declare-fun t2tb3691 ((set (set (tuple21 (tuple21 d f) e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 d f) e))))) (sort
  (set1 (set1 (tuple2 (tuple2 d1 f1) e1))) (t2tb3691 x))))

(declare-fun tb2t3691 (uni) (set (set (tuple21 (tuple21 d f) e))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 d f) e)))))
  (! (= (tb2t3691 (t2tb3691 i)) i) :pattern ((t2tb3691 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 d1 f1) e1))) j)
     (= (t2tb3691 (tb2t3691 j)) j)) :pattern ((t2tb3691 (tb2t3691 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 d f))) (v (set e)) (r (set (tuple21 (tuple21 d f)
  e))))
  (= (mem (set1 (tuple2 (tuple2 d1 f1) e1)) (t2tb3164 r)
  (relation e1 (tuple2 d1 f1) (t2tb2938 u) (t2tb2947 v)))
  (forall ((x (tuple21 d f)) (y e))
  (=> (mem (tuple2 (tuple2 d1 f1) e1)
  (Tuple2 (tuple2 d1 f1) e1 (t2tb2952 x) (t2tb2955 y)) (t2tb3164 r))
  (and (mem40 x u) (mem36 y v)))))))

(declare-fun t2tb3692 ((set (set (tuple21 (tuple21 d f) (tuple21 (tuple21 a
  c) (tuple21 b d)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 d f) (tuple21 (tuple21 a c)
  (tuple21 b d))))))) (sort
  (set1
  (set1 (tuple2 (tuple2 d1 f1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))))
  (t2tb3692 x))))

(declare-fun tb2t3692 (uni) (set (set (tuple21 (tuple21 d f)
  (tuple21 (tuple21 a c) (tuple21 b d))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 d f) (tuple21 (tuple21 a c)
  (tuple21 b d)))))))
  (! (= (tb2t3692 (t2tb3692 i)) i) :pattern ((t2tb3692 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (set1 (tuple2 (tuple2 d1 f1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))))
     j) (= (t2tb3692 (tb2t3692 j)) j)) :pattern ((t2tb3692 (tb2t3692 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 d f))) (v (set (tuple21 (tuple21 a c) (tuple21 b
  d)))) (r (set (tuple21 (tuple21 d f) (tuple21 (tuple21 a c) (tuple21 b
  d))))))
  (= (mem
  (set1 (tuple2 (tuple2 d1 f1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))))
  (t2tb3166 r)
  (relation (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 d1 f1)
  (t2tb2938 u) (t2tb686 v)))
  (forall ((x (tuple21 d f)) (y (tuple21 (tuple21 a c) (tuple21 b d))))
  (=> (mem (tuple2 (tuple2 d1 f1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
  (Tuple2 (tuple2 d1 f1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb2952 x)
  (t2tb691 y)) (t2tb3166 r)) (and (mem40 x u) (mem24 y v)))))))

(declare-fun t2tb3693 ((set (set (tuple21 (tuple21 d f) (set (tuple21 c
  d)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 d f) (set (tuple21 c d))))))) (sort
  (set1 (set1 (tuple2 (tuple2 d1 f1) (set1 (tuple2 c1 d1))))) (t2tb3693 x))))

(declare-fun tb2t3693 (uni) (set (set (tuple21 (tuple21 d f) (set (tuple21 c
  d))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 d f) (set (tuple21 c d)))))))
  (! (= (tb2t3693 (t2tb3693 i)) i) :pattern ((t2tb3693 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 d1 f1) (set1 (tuple2 c1 d1))))) j)
     (= (t2tb3693 (tb2t3693 j)) j)) :pattern ((t2tb3693 (tb2t3693 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 d f))) (v (set (set (tuple21 c d))))
  (r (set (tuple21 (tuple21 d f) (set (tuple21 c d))))))
  (= (mem (set1 (tuple2 (tuple2 d1 f1) (set1 (tuple2 c1 d1)))) (t2tb3168 r)
  (relation (set1 (tuple2 c1 d1)) (tuple2 d1 f1) (t2tb2938 u) (t2tb688 v)))
  (forall ((x (tuple21 d f)) (y (set (tuple21 c d))))
  (=> (mem (tuple2 (tuple2 d1 f1) (set1 (tuple2 c1 d1)))
  (Tuple2 (tuple2 d1 f1) (set1 (tuple2 c1 d1)) (t2tb2952 x) (t2tb689 y))
  (t2tb3168 r)) (and (mem40 x u) (mem22 y v)))))))

(declare-fun t2tb3694 ((set (set (tuple21 (tuple21 d f) (tuple21 c
  d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 d f) (tuple21 c d)))))) (sort
  (set1 (set1 (tuple2 (tuple2 d1 f1) (tuple2 c1 d1)))) (t2tb3694 x))))

(declare-fun tb2t3694 (uni) (set (set (tuple21 (tuple21 d f) (tuple21 c
  d)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 d f) (tuple21 c d))))))
  (! (= (tb2t3694 (t2tb3694 i)) i) :pattern ((t2tb3694 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 d1 f1) (tuple2 c1 d1)))) j)
     (= (t2tb3694 (tb2t3694 j)) j)) :pattern ((t2tb3694 (tb2t3694 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 d f))) (v (set (tuple21 c d)))
  (r (set (tuple21 (tuple21 d f) (tuple21 c d)))))
  (= (mem (set1 (tuple2 (tuple2 d1 f1) (tuple2 c1 d1))) (t2tb3170 r)
  (relation (tuple2 c1 d1) (tuple2 d1 f1) (t2tb2938 u) (t2tb689 v)))
  (forall ((x (tuple21 d f)) (y (tuple21 c d)))
  (=> (mem (tuple2 (tuple2 d1 f1) (tuple2 c1 d1))
  (Tuple2 (tuple2 d1 f1) (tuple2 c1 d1) (t2tb2952 x) (t2tb693 y))
  (t2tb3170 r)) (and (mem40 x u) (mem21 y v)))))))

(declare-fun t2tb3695 ((set (set (tuple21 (tuple21 d f) d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 d f) d))))) (sort
  (set1 (set1 (tuple2 (tuple2 d1 f1) d1))) (t2tb3695 x))))

(declare-fun tb2t3695 (uni) (set (set (tuple21 (tuple21 d f) d))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 d f) d)))))
  (! (= (tb2t3695 (t2tb3695 i)) i) :pattern ((t2tb3695 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 d1 f1) d1))) j)
     (= (t2tb3695 (tb2t3695 j)) j)) :pattern ((t2tb3695 (tb2t3695 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 d f))) (v (set d)) (r (set (tuple21 (tuple21 d f)
  d))))
  (= (mem (set1 (tuple2 (tuple2 d1 f1) d1)) (t2tb3172 r)
  (relation d1 (tuple2 d1 f1) (t2tb2938 u) (t2tb690 v)))
  (forall ((x (tuple21 d f)) (y d))
  (=> (mem (tuple2 (tuple2 d1 f1) d1)
  (Tuple2 (tuple2 d1 f1) d1 (t2tb2952 x) (t2tb694 y)) (t2tb3172 r))
  (and (mem40 x u) (mem20 y v)))))))

(declare-fun t2tb3696 ((set (set (tuple21 (tuple21 d f) c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 d f) c))))) (sort
  (set1 (set1 (tuple2 (tuple2 d1 f1) c1))) (t2tb3696 x))))

(declare-fun tb2t3696 (uni) (set (set (tuple21 (tuple21 d f) c))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 d f) c)))))
  (! (= (tb2t3696 (t2tb3696 i)) i) :pattern ((t2tb3696 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 d1 f1) c1))) j)
     (= (t2tb3696 (tb2t3696 j)) j)) :pattern ((t2tb3696 (tb2t3696 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 d f))) (v (set c)) (r (set (tuple21 (tuple21 d f)
  c))))
  (= (mem (set1 (tuple2 (tuple2 d1 f1) c1)) (t2tb3174 r)
  (relation c1 (tuple2 d1 f1) (t2tb2938 u) (t2tb132 v)))
  (forall ((x (tuple21 d f)) (y c))
  (=> (mem (tuple2 (tuple2 d1 f1) c1)
  (Tuple2 (tuple2 d1 f1) c1 (t2tb2952 x) (t2tb135 y)) (t2tb3174 r))
  (and (mem40 x u) (mem7 y v)))))))

(declare-fun t2tb3697 ((set (set (tuple21 (tuple21 d f) (set (tuple21 a
  b)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 d f) (set (tuple21 a b))))))) (sort
  (set1 (set1 (tuple2 (tuple2 d1 f1) (set1 (tuple2 a1 b1))))) (t2tb3697 x))))

(declare-fun tb2t3697 (uni) (set (set (tuple21 (tuple21 d f) (set (tuple21 a
  b))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 d f) (set (tuple21 a b)))))))
  (! (= (tb2t3697 (t2tb3697 i)) i) :pattern ((t2tb3697 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 d1 f1) (set1 (tuple2 a1 b1))))) j)
     (= (t2tb3697 (tb2t3697 j)) j)) :pattern ((t2tb3697 (tb2t3697 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 d f))) (v (set (set (tuple21 a b))))
  (r (set (tuple21 (tuple21 d f) (set (tuple21 a b))))))
  (= (mem (set1 (tuple2 (tuple2 d1 f1) (set1 (tuple2 a1 b1)))) (t2tb3176 r)
  (relation (set1 (tuple2 a1 b1)) (tuple2 d1 f1) (t2tb2938 u) (t2tb10 v)))
  (forall ((x (tuple21 d f)) (y (set (tuple21 a b))))
  (=> (mem (tuple2 (tuple2 d1 f1) (set1 (tuple2 a1 b1)))
  (Tuple2 (tuple2 d1 f1) (set1 (tuple2 a1 b1)) (t2tb2952 x) (t2tb11 y))
  (t2tb3176 r)) (and (mem40 x u) (mem4 y v)))))))

(declare-fun t2tb3698 ((set (set (tuple21 (tuple21 d f) (tuple21 a
  b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 d f) (tuple21 a b)))))) (sort
  (set1 (set1 (tuple2 (tuple2 d1 f1) (tuple2 a1 b1)))) (t2tb3698 x))))

(declare-fun tb2t3698 (uni) (set (set (tuple21 (tuple21 d f) (tuple21 a
  b)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 d f) (tuple21 a b))))))
  (! (= (tb2t3698 (t2tb3698 i)) i) :pattern ((t2tb3698 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 d1 f1) (tuple2 a1 b1)))) j)
     (= (t2tb3698 (tb2t3698 j)) j)) :pattern ((t2tb3698 (tb2t3698 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 d f))) (v (set (tuple21 a b)))
  (r (set (tuple21 (tuple21 d f) (tuple21 a b)))))
  (= (mem (set1 (tuple2 (tuple2 d1 f1) (tuple2 a1 b1))) (t2tb3178 r)
  (relation (tuple2 a1 b1) (tuple2 d1 f1) (t2tb2938 u) (t2tb11 v)))
  (forall ((x (tuple21 d f)) (y (tuple21 a b)))
  (=> (mem (tuple2 (tuple2 d1 f1) (tuple2 a1 b1))
  (Tuple2 (tuple2 d1 f1) (tuple2 a1 b1) (t2tb2952 x) (t2tb13 y))
  (t2tb3178 r)) (and (mem40 x u) (mem3 y v)))))))

(declare-fun t2tb3699 ((set (set (tuple21 (tuple21 d f) b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 d f) b))))) (sort
  (set1 (set1 (tuple2 (tuple2 d1 f1) b1))) (t2tb3699 x))))

(declare-fun tb2t3699 (uni) (set (set (tuple21 (tuple21 d f) b))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 d f) b)))))
  (! (= (tb2t3699 (t2tb3699 i)) i) :pattern ((t2tb3699 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 d1 f1) b1))) j)
     (= (t2tb3699 (tb2t3699 j)) j)) :pattern ((t2tb3699 (tb2t3699 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 d f))) (v (set b)) (r (set (tuple21 (tuple21 d f)
  b))))
  (= (mem (set1 (tuple2 (tuple2 d1 f1) b1)) (t2tb3180 r)
  (relation b1 (tuple2 d1 f1) (t2tb2938 u) (t2tb12 v)))
  (forall ((x (tuple21 d f)) (y b))
  (=> (mem (tuple2 (tuple2 d1 f1) b1)
  (Tuple2 (tuple2 d1 f1) b1 (t2tb2952 x) (t2tb14 y)) (t2tb3180 r))
  (and (mem40 x u) (mem2 y v)))))))

(declare-fun t2tb3700 ((set (set (tuple21 (tuple21 d f) a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 d f) a))))) (sort
  (set1 (set1 (tuple2 (tuple2 d1 f1) a1))) (t2tb3700 x))))

(declare-fun tb2t3700 (uni) (set (set (tuple21 (tuple21 d f) a))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 d f) a)))))
  (! (= (tb2t3700 (t2tb3700 i)) i) :pattern ((t2tb3700 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 d1 f1) a1))) j)
     (= (t2tb3700 (tb2t3700 j)) j)) :pattern ((t2tb3700 (tb2t3700 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 d f))) (v (set a)) (r (set (tuple21 (tuple21 d f)
  a))))
  (= (mem (set1 (tuple2 (tuple2 d1 f1) a1)) (t2tb3182 r)
  (relation a1 (tuple2 d1 f1) (t2tb2938 u) (t2tb1 v)))
  (forall ((x (tuple21 d f)) (y a))
  (=> (mem (tuple2 (tuple2 d1 f1) a1)
  (Tuple2 (tuple2 d1 f1) a1 (t2tb2952 x) (t2tb2 y)) (t2tb3182 r))
  (and (mem40 x u) (mem1 y v)))))))

;; mem_relation
  (assert
  (forall ((b2 ty))
  (forall ((u (set (tuple21 d f))) (v uni) (r uni))
  (and
  (=> (mem (set1 (tuple2 (tuple2 d1 f1) b2)) r
  (relation b2 (tuple2 d1 f1) (t2tb2938 u) v))
  (forall ((x (tuple21 d f)) (y uni))
  (=> (mem (tuple2 (tuple2 d1 f1) b2)
  (Tuple2 (tuple2 d1 f1) b2 (t2tb2952 x) y) r)
  (and (mem40 x u) (mem b2 y v)))))
  (=>
  (forall ((x (tuple21 d f)) (y uni))
  (=> (sort b2 y)
  (=> (mem (tuple2 (tuple2 d1 f1) b2)
  (Tuple2 (tuple2 d1 f1) b2 (t2tb2952 x) y) r)
  (and (mem40 x u) (mem b2 y v))))) (mem (set1 (tuple2 (tuple2 d1 f1) b2)) r
  (relation b2 (tuple2 d1 f1) (t2tb2938 u) v)))))))

(declare-fun t2tb3701 ((set (set (tuple21 (set (tuple21 b e)) (tuple21 c
  f))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 b e)) (tuple21 c f)))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 b1 e1)) (tuple2 c1 f1)))) (t2tb3701 x))))

(declare-fun tb2t3701 (uni) (set (set (tuple21 (set (tuple21 b e)) (tuple21 c
  f)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 b e)) (tuple21 c f))))))
  (! (= (tb2t3701 (t2tb3701 i)) i) :pattern ((t2tb3701 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 b1 e1)) (tuple2 c1 f1)))) j)
     (= (t2tb3701 (tb2t3701 j)) j)) :pattern ((t2tb3701 (tb2t3701 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 b e)))) (v (set (tuple21 c f)))
  (r (set (tuple21 (set (tuple21 b e)) (tuple21 c f)))))
  (= (mem (set1 (tuple2 (set1 (tuple2 b1 e1)) (tuple2 c1 f1))) (t2tb3184 r)
  (relation (tuple2 c1 f1) (set1 (tuple2 b1 e1)) (t2tb2941 u) (t2tb2942 v)))
  (forall ((x (set (tuple21 b e))) (y (tuple21 c f)))
  (=> (mem (tuple2 (set1 (tuple2 b1 e1)) (tuple2 c1 f1))
  (Tuple2 (set1 (tuple2 b1 e1)) (tuple2 c1 f1) (t2tb2940 x) (t2tb2948 y))
  (t2tb3184 r)) (and (mem39 x u) (mem45 y v)))))))

(declare-fun t2tb3702 ((set (set (tuple21 (set (tuple21 b e)) (tuple21 a
  e))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 b e)) (tuple21 a e)))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 b1 e1)) (tuple2 a1 e1)))) (t2tb3702 x))))

(declare-fun tb2t3702 (uni) (set (set (tuple21 (set (tuple21 b e)) (tuple21 a
  e)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 b e)) (tuple21 a e))))))
  (! (= (tb2t3702 (t2tb3702 i)) i) :pattern ((t2tb3702 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 b1 e1)) (tuple2 a1 e1)))) j)
     (= (t2tb3702 (tb2t3702 j)) j)) :pattern ((t2tb3702 (tb2t3702 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 b e)))) (v (set (tuple21 a e)))
  (r (set (tuple21 (set (tuple21 b e)) (tuple21 a e)))))
  (= (mem (set1 (tuple2 (set1 (tuple2 b1 e1)) (tuple2 a1 e1))) (t2tb3186 r)
  (relation (tuple2 a1 e1) (set1 (tuple2 b1 e1)) (t2tb2941 u) (t2tb2943 v)))
  (forall ((x (set (tuple21 b e))) (y (tuple21 a e)))
  (=> (mem (tuple2 (set1 (tuple2 b1 e1)) (tuple2 a1 e1))
  (Tuple2 (set1 (tuple2 b1 e1)) (tuple2 a1 e1) (t2tb2940 x) (t2tb2949 y))
  (t2tb3186 r)) (and (mem39 x u) (mem44 y v)))))))

(declare-fun t2tb3703 ((set (set (tuple21 (set (tuple21 b e))
  (tuple21 (tuple21 b d) (tuple21 e f)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 b e)) (tuple21 (tuple21 b d)
  (tuple21 e f))))))) (sort
  (set1
  (set1
  (tuple2 (set1 (tuple2 b1 e1)) (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)))))
  (t2tb3703 x))))

(declare-fun tb2t3703 (uni) (set (set (tuple21 (set (tuple21 b e))
  (tuple21 (tuple21 b d) (tuple21 e f))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 b e)) (tuple21 (tuple21 b d)
  (tuple21 e f)))))))
  (! (= (tb2t3703 (t2tb3703 i)) i) :pattern ((t2tb3703 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (set1
     (tuple2 (set1 (tuple2 b1 e1)) (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)))))
     j) (= (t2tb3703 (tb2t3703 j)) j)) :pattern ((t2tb3703 (tb2t3703 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 b e)))) (v (set (tuple21 (tuple21 b d)
  (tuple21 e f)))) (r (set (tuple21 (set (tuple21 b e)) (tuple21 (tuple21 b
  d) (tuple21 e f))))))
  (= (mem
  (set1
  (tuple2 (set1 (tuple2 b1 e1)) (tuple2 (tuple2 b1 d1) (tuple2 e1 f1))))
  (t2tb3188 r)
  (relation (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (set1 (tuple2 b1 e1))
  (t2tb2941 u) (t2tb2944 v)))
  (forall ((x (set (tuple21 b e))) (y (tuple21 (tuple21 b d) (tuple21 e f))))
  (=> (mem
  (tuple2 (set1 (tuple2 b1 e1)) (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)))
  (Tuple2 (set1 (tuple2 b1 e1)) (tuple2 (tuple2 b1 d1) (tuple2 e1 f1))
  (t2tb2940 x) (t2tb2950 y)) (t2tb3188 r)) (and (mem39 x u) (mem43 y v)))))))

(declare-fun t2tb3704 ((set (set (tuple21 (set (tuple21 b e))
  (tuple21 (tuple21 a c) (tuple21 e f)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 b e)) (tuple21 (tuple21 a c)
  (tuple21 e f))))))) (sort
  (set1
  (set1
  (tuple2 (set1 (tuple2 b1 e1)) (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)))))
  (t2tb3704 x))))

(declare-fun tb2t3704 (uni) (set (set (tuple21 (set (tuple21 b e))
  (tuple21 (tuple21 a c) (tuple21 e f))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 b e)) (tuple21 (tuple21 a c)
  (tuple21 e f)))))))
  (! (= (tb2t3704 (t2tb3704 i)) i) :pattern ((t2tb3704 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (set1
     (tuple2 (set1 (tuple2 b1 e1)) (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)))))
     j) (= (t2tb3704 (tb2t3704 j)) j)) :pattern ((t2tb3704 (tb2t3704 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 b e)))) (v (set (tuple21 (tuple21 a c)
  (tuple21 e f)))) (r (set (tuple21 (set (tuple21 b e)) (tuple21 (tuple21 a
  c) (tuple21 e f))))))
  (= (mem
  (set1
  (tuple2 (set1 (tuple2 b1 e1)) (tuple2 (tuple2 a1 c1) (tuple2 e1 f1))))
  (t2tb3190 r)
  (relation (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (set1 (tuple2 b1 e1))
  (t2tb2941 u) (t2tb2945 v)))
  (forall ((x (set (tuple21 b e))) (y (tuple21 (tuple21 a c) (tuple21 e f))))
  (=> (mem
  (tuple2 (set1 (tuple2 b1 e1)) (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)))
  (Tuple2 (set1 (tuple2 b1 e1)) (tuple2 (tuple2 a1 c1) (tuple2 e1 f1))
  (t2tb2940 x) (t2tb2951 y)) (t2tb3190 r)) (and (mem39 x u) (mem42 y v)))))))

(declare-fun t2tb3705 ((set (set (tuple21 (set (tuple21 b e)) (set (tuple21 d
  f)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 b e)) (set (tuple21 d f)))))))
  (sort (set1 (set1 (tuple2 (set1 (tuple2 b1 e1)) (set1 (tuple2 d1 f1)))))
  (t2tb3705 x))))

(declare-fun tb2t3705 (uni) (set (set (tuple21 (set (tuple21 b e))
  (set (tuple21 d f))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 b e)) (set (tuple21 d f)))))))
  (! (= (tb2t3705 (t2tb3705 i)) i) :pattern ((t2tb3705 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (set1 (tuple2 b1 e1)) (set1 (tuple2 d1 f1))))) j)
     (= (t2tb3705 (tb2t3705 j)) j)) :pattern ((t2tb3705 (tb2t3705 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 b e)))) (v (set (set (tuple21 d f))))
  (r (set (tuple21 (set (tuple21 b e)) (set (tuple21 d f))))))
  (= (mem (set1 (tuple2 (set1 (tuple2 b1 e1)) (set1 (tuple2 d1 f1))))
  (t2tb3192 r)
  (relation (set1 (tuple2 d1 f1)) (set1 (tuple2 b1 e1)) (t2tb2941 u)
  (t2tb2939 v)))
  (forall ((x (set (tuple21 b e))) (y (set (tuple21 d f))))
  (=> (mem (tuple2 (set1 (tuple2 b1 e1)) (set1 (tuple2 d1 f1)))
  (Tuple2 (set1 (tuple2 b1 e1)) (set1 (tuple2 d1 f1)) (t2tb2940 x)
  (t2tb2938 y)) (t2tb3192 r)) (and (mem39 x u) (mem41 y v)))))))

(declare-fun t2tb3706 ((set (set (tuple21 (set (tuple21 b e)) (tuple21 d
  f))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 b e)) (tuple21 d f)))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 b1 e1)) (tuple2 d1 f1)))) (t2tb3706 x))))

(declare-fun tb2t3706 (uni) (set (set (tuple21 (set (tuple21 b e)) (tuple21 d
  f)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 b e)) (tuple21 d f))))))
  (! (= (tb2t3706 (t2tb3706 i)) i) :pattern ((t2tb3706 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 b1 e1)) (tuple2 d1 f1)))) j)
     (= (t2tb3706 (tb2t3706 j)) j)) :pattern ((t2tb3706 (tb2t3706 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 b e)))) (v (set (tuple21 d f)))
  (r (set (tuple21 (set (tuple21 b e)) (tuple21 d f)))))
  (= (mem (set1 (tuple2 (set1 (tuple2 b1 e1)) (tuple2 d1 f1))) (t2tb3194 r)
  (relation (tuple2 d1 f1) (set1 (tuple2 b1 e1)) (t2tb2941 u) (t2tb2938 v)))
  (forall ((x (set (tuple21 b e))) (y (tuple21 d f)))
  (=> (mem (tuple2 (set1 (tuple2 b1 e1)) (tuple2 d1 f1))
  (Tuple2 (set1 (tuple2 b1 e1)) (tuple2 d1 f1) (t2tb2940 x) (t2tb2952 y))
  (t2tb3194 r)) (and (mem39 x u) (mem40 y v)))))))

(declare-fun t2tb3707 ((set (set (tuple21 (set (tuple21 b e)) (set (tuple21 b
  e)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 b e)) (set (tuple21 b e)))))))
  (sort (set1 (set1 (tuple2 (set1 (tuple2 b1 e1)) (set1 (tuple2 b1 e1)))))
  (t2tb3707 x))))

(declare-fun tb2t3707 (uni) (set (set (tuple21 (set (tuple21 b e))
  (set (tuple21 b e))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 b e)) (set (tuple21 b e)))))))
  (! (= (tb2t3707 (t2tb3707 i)) i) :pattern ((t2tb3707 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (set1 (tuple2 b1 e1)) (set1 (tuple2 b1 e1))))) j)
     (= (t2tb3707 (tb2t3707 j)) j)) :pattern ((t2tb3707 (tb2t3707 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 b e)))) (v (set (set (tuple21 b e))))
  (r (set (tuple21 (set (tuple21 b e)) (set (tuple21 b e))))))
  (= (mem (set1 (tuple2 (set1 (tuple2 b1 e1)) (set1 (tuple2 b1 e1))))
  (t2tb3196 r)
  (relation (set1 (tuple2 b1 e1)) (set1 (tuple2 b1 e1)) (t2tb2941 u)
  (t2tb2941 v)))
  (forall ((x (set (tuple21 b e))) (y (set (tuple21 b e))))
  (=> (mem (tuple2 (set1 (tuple2 b1 e1)) (set1 (tuple2 b1 e1)))
  (Tuple2 (set1 (tuple2 b1 e1)) (set1 (tuple2 b1 e1)) (t2tb2940 x)
  (t2tb2940 y)) (t2tb3196 r)) (and (mem39 x u) (mem39 y v)))))))

(declare-fun t2tb3708 ((set (set (tuple21 (set (tuple21 b e)) (tuple21 b
  e))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 b e)) (tuple21 b e)))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 b1 e1)) (tuple2 b1 e1)))) (t2tb3708 x))))

(declare-fun tb2t3708 (uni) (set (set (tuple21 (set (tuple21 b e)) (tuple21 b
  e)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 b e)) (tuple21 b e))))))
  (! (= (tb2t3708 (t2tb3708 i)) i) :pattern ((t2tb3708 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 b1 e1)) (tuple2 b1 e1)))) j)
     (= (t2tb3708 (tb2t3708 j)) j)) :pattern ((t2tb3708 (tb2t3708 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 b e)))) (v (set (tuple21 b e)))
  (r (set (tuple21 (set (tuple21 b e)) (tuple21 b e)))))
  (= (mem (set1 (tuple2 (set1 (tuple2 b1 e1)) (tuple2 b1 e1))) (t2tb3198 r)
  (relation (tuple2 b1 e1) (set1 (tuple2 b1 e1)) (t2tb2941 u) (t2tb2940 v)))
  (forall ((x (set (tuple21 b e))) (y (tuple21 b e)))
  (=> (mem (tuple2 (set1 (tuple2 b1 e1)) (tuple2 b1 e1))
  (Tuple2 (set1 (tuple2 b1 e1)) (tuple2 b1 e1) (t2tb2940 x) (t2tb2953 y))
  (t2tb3198 r)) (and (mem39 x u) (mem38 y v)))))))

(declare-fun t2tb3709 ((set (set (tuple21 (set (tuple21 b e)) f)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 b e)) f))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 b1 e1)) f1))) (t2tb3709 x))))

(declare-fun tb2t3709 (uni) (set (set (tuple21 (set (tuple21 b e)) f))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 b e)) f)))))
  (! (= (tb2t3709 (t2tb3709 i)) i) :pattern ((t2tb3709 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 b1 e1)) f1))) j)
     (= (t2tb3709 (tb2t3709 j)) j)) :pattern ((t2tb3709 (tb2t3709 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 b e)))) (v (set f))
  (r (set (tuple21 (set (tuple21 b e)) f))))
  (= (mem (set1 (tuple2 (set1 (tuple2 b1 e1)) f1)) (t2tb3200 r)
  (relation f1 (set1 (tuple2 b1 e1)) (t2tb2941 u) (t2tb2946 v)))
  (forall ((x (set (tuple21 b e))) (y f))
  (=> (mem (tuple2 (set1 (tuple2 b1 e1)) f1)
  (Tuple2 (set1 (tuple2 b1 e1)) f1 (t2tb2940 x) (t2tb2954 y)) (t2tb3200 r))
  (and (mem39 x u) (mem37 y v)))))))

(declare-fun t2tb3710 ((set (set (tuple21 (set (tuple21 b e)) e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 b e)) e))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 b1 e1)) e1))) (t2tb3710 x))))

(declare-fun tb2t3710 (uni) (set (set (tuple21 (set (tuple21 b e)) e))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 b e)) e)))))
  (! (= (tb2t3710 (t2tb3710 i)) i) :pattern ((t2tb3710 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 b1 e1)) e1))) j)
     (= (t2tb3710 (tb2t3710 j)) j)) :pattern ((t2tb3710 (tb2t3710 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 b e)))) (v (set e))
  (r (set (tuple21 (set (tuple21 b e)) e))))
  (= (mem (set1 (tuple2 (set1 (tuple2 b1 e1)) e1)) (t2tb3202 r)
  (relation e1 (set1 (tuple2 b1 e1)) (t2tb2941 u) (t2tb2947 v)))
  (forall ((x (set (tuple21 b e))) (y e))
  (=> (mem (tuple2 (set1 (tuple2 b1 e1)) e1)
  (Tuple2 (set1 (tuple2 b1 e1)) e1 (t2tb2940 x) (t2tb2955 y)) (t2tb3202 r))
  (and (mem39 x u) (mem36 y v)))))))

(declare-fun t2tb3711 ((set (set (tuple21 (set (tuple21 b e))
  (tuple21 (tuple21 a c) (tuple21 b d)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 b e)) (tuple21 (tuple21 a c)
  (tuple21 b d))))))) (sort
  (set1
  (set1
  (tuple2 (set1 (tuple2 b1 e1)) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))))
  (t2tb3711 x))))

(declare-fun tb2t3711 (uni) (set (set (tuple21 (set (tuple21 b e))
  (tuple21 (tuple21 a c) (tuple21 b d))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 b e)) (tuple21 (tuple21 a c)
  (tuple21 b d)))))))
  (! (= (tb2t3711 (t2tb3711 i)) i) :pattern ((t2tb3711 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (set1
     (tuple2 (set1 (tuple2 b1 e1)) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))))
     j) (= (t2tb3711 (tb2t3711 j)) j)) :pattern ((t2tb3711 (tb2t3711 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 b e)))) (v (set (tuple21 (tuple21 a c)
  (tuple21 b d)))) (r (set (tuple21 (set (tuple21 b e)) (tuple21 (tuple21 a
  c) (tuple21 b d))))))
  (= (mem
  (set1
  (tuple2 (set1 (tuple2 b1 e1)) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))))
  (t2tb3204 r)
  (relation (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (set1 (tuple2 b1 e1))
  (t2tb2941 u) (t2tb686 v)))
  (forall ((x (set (tuple21 b e))) (y (tuple21 (tuple21 a c) (tuple21 b d))))
  (=> (mem
  (tuple2 (set1 (tuple2 b1 e1)) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
  (Tuple2 (set1 (tuple2 b1 e1)) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))
  (t2tb2940 x) (t2tb691 y)) (t2tb3204 r)) (and (mem39 x u) (mem24 y v)))))))

(declare-fun t2tb3712 ((set (set (tuple21 (set (tuple21 b e)) (set (tuple21 c
  d)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 b e)) (set (tuple21 c d)))))))
  (sort (set1 (set1 (tuple2 (set1 (tuple2 b1 e1)) (set1 (tuple2 c1 d1)))))
  (t2tb3712 x))))

(declare-fun tb2t3712 (uni) (set (set (tuple21 (set (tuple21 b e))
  (set (tuple21 c d))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 b e)) (set (tuple21 c d)))))))
  (! (= (tb2t3712 (t2tb3712 i)) i) :pattern ((t2tb3712 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (set1 (tuple2 b1 e1)) (set1 (tuple2 c1 d1))))) j)
     (= (t2tb3712 (tb2t3712 j)) j)) :pattern ((t2tb3712 (tb2t3712 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 b e)))) (v (set (set (tuple21 c d))))
  (r (set (tuple21 (set (tuple21 b e)) (set (tuple21 c d))))))
  (= (mem (set1 (tuple2 (set1 (tuple2 b1 e1)) (set1 (tuple2 c1 d1))))
  (t2tb3206 r)
  (relation (set1 (tuple2 c1 d1)) (set1 (tuple2 b1 e1)) (t2tb2941 u)
  (t2tb688 v)))
  (forall ((x (set (tuple21 b e))) (y (set (tuple21 c d))))
  (=> (mem (tuple2 (set1 (tuple2 b1 e1)) (set1 (tuple2 c1 d1)))
  (Tuple2 (set1 (tuple2 b1 e1)) (set1 (tuple2 c1 d1)) (t2tb2940 x)
  (t2tb689 y)) (t2tb3206 r)) (and (mem39 x u) (mem22 y v)))))))

(declare-fun t2tb3713 ((set (set (tuple21 (set (tuple21 b e)) (tuple21 c
  d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 b e)) (tuple21 c d)))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 b1 e1)) (tuple2 c1 d1)))) (t2tb3713 x))))

(declare-fun tb2t3713 (uni) (set (set (tuple21 (set (tuple21 b e)) (tuple21 c
  d)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 b e)) (tuple21 c d))))))
  (! (= (tb2t3713 (t2tb3713 i)) i) :pattern ((t2tb3713 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 b1 e1)) (tuple2 c1 d1)))) j)
     (= (t2tb3713 (tb2t3713 j)) j)) :pattern ((t2tb3713 (tb2t3713 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 b e)))) (v (set (tuple21 c d)))
  (r (set (tuple21 (set (tuple21 b e)) (tuple21 c d)))))
  (= (mem (set1 (tuple2 (set1 (tuple2 b1 e1)) (tuple2 c1 d1))) (t2tb3208 r)
  (relation (tuple2 c1 d1) (set1 (tuple2 b1 e1)) (t2tb2941 u) (t2tb689 v)))
  (forall ((x (set (tuple21 b e))) (y (tuple21 c d)))
  (=> (mem (tuple2 (set1 (tuple2 b1 e1)) (tuple2 c1 d1))
  (Tuple2 (set1 (tuple2 b1 e1)) (tuple2 c1 d1) (t2tb2940 x) (t2tb693 y))
  (t2tb3208 r)) (and (mem39 x u) (mem21 y v)))))))

(declare-fun t2tb3714 ((set (set (tuple21 (set (tuple21 b e)) d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 b e)) d))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 b1 e1)) d1))) (t2tb3714 x))))

(declare-fun tb2t3714 (uni) (set (set (tuple21 (set (tuple21 b e)) d))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 b e)) d)))))
  (! (= (tb2t3714 (t2tb3714 i)) i) :pattern ((t2tb3714 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 b1 e1)) d1))) j)
     (= (t2tb3714 (tb2t3714 j)) j)) :pattern ((t2tb3714 (tb2t3714 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 b e)))) (v (set d))
  (r (set (tuple21 (set (tuple21 b e)) d))))
  (= (mem (set1 (tuple2 (set1 (tuple2 b1 e1)) d1)) (t2tb3210 r)
  (relation d1 (set1 (tuple2 b1 e1)) (t2tb2941 u) (t2tb690 v)))
  (forall ((x (set (tuple21 b e))) (y d))
  (=> (mem (tuple2 (set1 (tuple2 b1 e1)) d1)
  (Tuple2 (set1 (tuple2 b1 e1)) d1 (t2tb2940 x) (t2tb694 y)) (t2tb3210 r))
  (and (mem39 x u) (mem20 y v)))))))

(declare-fun t2tb3715 ((set (set (tuple21 (set (tuple21 b e)) c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 b e)) c))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 b1 e1)) c1))) (t2tb3715 x))))

(declare-fun tb2t3715 (uni) (set (set (tuple21 (set (tuple21 b e)) c))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 b e)) c)))))
  (! (= (tb2t3715 (t2tb3715 i)) i) :pattern ((t2tb3715 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 b1 e1)) c1))) j)
     (= (t2tb3715 (tb2t3715 j)) j)) :pattern ((t2tb3715 (tb2t3715 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 b e)))) (v (set c))
  (r (set (tuple21 (set (tuple21 b e)) c))))
  (= (mem (set1 (tuple2 (set1 (tuple2 b1 e1)) c1)) (t2tb3212 r)
  (relation c1 (set1 (tuple2 b1 e1)) (t2tb2941 u) (t2tb132 v)))
  (forall ((x (set (tuple21 b e))) (y c))
  (=> (mem (tuple2 (set1 (tuple2 b1 e1)) c1)
  (Tuple2 (set1 (tuple2 b1 e1)) c1 (t2tb2940 x) (t2tb135 y)) (t2tb3212 r))
  (and (mem39 x u) (mem7 y v)))))))

(declare-fun t2tb3716 ((set (set (tuple21 (set (tuple21 b e)) (set (tuple21 a
  b)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 b e)) (set (tuple21 a b)))))))
  (sort (set1 (set1 (tuple2 (set1 (tuple2 b1 e1)) (set1 (tuple2 a1 b1)))))
  (t2tb3716 x))))

(declare-fun tb2t3716 (uni) (set (set (tuple21 (set (tuple21 b e))
  (set (tuple21 a b))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 b e)) (set (tuple21 a b)))))))
  (! (= (tb2t3716 (t2tb3716 i)) i) :pattern ((t2tb3716 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (set1 (tuple2 b1 e1)) (set1 (tuple2 a1 b1))))) j)
     (= (t2tb3716 (tb2t3716 j)) j)) :pattern ((t2tb3716 (tb2t3716 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 b e)))) (v (set (set (tuple21 a b))))
  (r (set (tuple21 (set (tuple21 b e)) (set (tuple21 a b))))))
  (= (mem (set1 (tuple2 (set1 (tuple2 b1 e1)) (set1 (tuple2 a1 b1))))
  (t2tb3214 r)
  (relation (set1 (tuple2 a1 b1)) (set1 (tuple2 b1 e1)) (t2tb2941 u)
  (t2tb10 v)))
  (forall ((x (set (tuple21 b e))) (y (set (tuple21 a b))))
  (=> (mem (tuple2 (set1 (tuple2 b1 e1)) (set1 (tuple2 a1 b1)))
  (Tuple2 (set1 (tuple2 b1 e1)) (set1 (tuple2 a1 b1)) (t2tb2940 x)
  (t2tb11 y)) (t2tb3214 r)) (and (mem39 x u) (mem4 y v)))))))

(declare-fun t2tb3717 ((set (set (tuple21 (set (tuple21 b e)) (tuple21 a
  b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 b e)) (tuple21 a b)))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 b1 e1)) (tuple2 a1 b1)))) (t2tb3717 x))))

(declare-fun tb2t3717 (uni) (set (set (tuple21 (set (tuple21 b e)) (tuple21 a
  b)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 b e)) (tuple21 a b))))))
  (! (= (tb2t3717 (t2tb3717 i)) i) :pattern ((t2tb3717 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 b1 e1)) (tuple2 a1 b1)))) j)
     (= (t2tb3717 (tb2t3717 j)) j)) :pattern ((t2tb3717 (tb2t3717 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 b e)))) (v (set (tuple21 a b)))
  (r (set (tuple21 (set (tuple21 b e)) (tuple21 a b)))))
  (= (mem (set1 (tuple2 (set1 (tuple2 b1 e1)) (tuple2 a1 b1))) (t2tb3216 r)
  (relation (tuple2 a1 b1) (set1 (tuple2 b1 e1)) (t2tb2941 u) (t2tb11 v)))
  (forall ((x (set (tuple21 b e))) (y (tuple21 a b)))
  (=> (mem (tuple2 (set1 (tuple2 b1 e1)) (tuple2 a1 b1))
  (Tuple2 (set1 (tuple2 b1 e1)) (tuple2 a1 b1) (t2tb2940 x) (t2tb13 y))
  (t2tb3216 r)) (and (mem39 x u) (mem3 y v)))))))

(declare-fun t2tb3718 ((set (set (tuple21 (set (tuple21 b e)) b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 b e)) b))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 b1 e1)) b1))) (t2tb3718 x))))

(declare-fun tb2t3718 (uni) (set (set (tuple21 (set (tuple21 b e)) b))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 b e)) b)))))
  (! (= (tb2t3718 (t2tb3718 i)) i) :pattern ((t2tb3718 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 b1 e1)) b1))) j)
     (= (t2tb3718 (tb2t3718 j)) j)) :pattern ((t2tb3718 (tb2t3718 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 b e)))) (v (set b))
  (r (set (tuple21 (set (tuple21 b e)) b))))
  (= (mem (set1 (tuple2 (set1 (tuple2 b1 e1)) b1)) (t2tb3218 r)
  (relation b1 (set1 (tuple2 b1 e1)) (t2tb2941 u) (t2tb12 v)))
  (forall ((x (set (tuple21 b e))) (y b))
  (=> (mem (tuple2 (set1 (tuple2 b1 e1)) b1)
  (Tuple2 (set1 (tuple2 b1 e1)) b1 (t2tb2940 x) (t2tb14 y)) (t2tb3218 r))
  (and (mem39 x u) (mem2 y v)))))))

(declare-fun t2tb3719 ((set (set (tuple21 (set (tuple21 b e)) a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 b e)) a))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 b1 e1)) a1))) (t2tb3719 x))))

(declare-fun tb2t3719 (uni) (set (set (tuple21 (set (tuple21 b e)) a))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 b e)) a)))))
  (! (= (tb2t3719 (t2tb3719 i)) i) :pattern ((t2tb3719 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 b1 e1)) a1))) j)
     (= (t2tb3719 (tb2t3719 j)) j)) :pattern ((t2tb3719 (tb2t3719 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 b e)))) (v (set a))
  (r (set (tuple21 (set (tuple21 b e)) a))))
  (= (mem (set1 (tuple2 (set1 (tuple2 b1 e1)) a1)) (t2tb3220 r)
  (relation a1 (set1 (tuple2 b1 e1)) (t2tb2941 u) (t2tb1 v)))
  (forall ((x (set (tuple21 b e))) (y a))
  (=> (mem (tuple2 (set1 (tuple2 b1 e1)) a1)
  (Tuple2 (set1 (tuple2 b1 e1)) a1 (t2tb2940 x) (t2tb2 y)) (t2tb3220 r))
  (and (mem39 x u) (mem1 y v)))))))

;; mem_relation
  (assert
  (forall ((b2 ty))
  (forall ((u (set (set (tuple21 b e)))) (v uni) (r uni))
  (and
  (=> (mem (set1 (tuple2 (set1 (tuple2 b1 e1)) b2)) r
  (relation b2 (set1 (tuple2 b1 e1)) (t2tb2941 u) v))
  (forall ((x (set (tuple21 b e))) (y uni))
  (=> (mem (tuple2 (set1 (tuple2 b1 e1)) b2)
  (Tuple2 (set1 (tuple2 b1 e1)) b2 (t2tb2940 x) y) r)
  (and (mem39 x u) (mem b2 y v)))))
  (=>
  (forall ((x (set (tuple21 b e))) (y uni))
  (=> (sort b2 y)
  (=> (mem (tuple2 (set1 (tuple2 b1 e1)) b2)
  (Tuple2 (set1 (tuple2 b1 e1)) b2 (t2tb2940 x) y) r)
  (and (mem39 x u) (mem b2 y v))))) (mem
  (set1 (tuple2 (set1 (tuple2 b1 e1)) b2)) r
  (relation b2 (set1 (tuple2 b1 e1)) (t2tb2941 u) v)))))))

(declare-fun t2tb3720 ((set (set (tuple21 (tuple21 b e) (tuple21 c
  f))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 b e) (tuple21 c f)))))) (sort
  (set1 (set1 (tuple2 (tuple2 b1 e1) (tuple2 c1 f1)))) (t2tb3720 x))))

(declare-fun tb2t3720 (uni) (set (set (tuple21 (tuple21 b e) (tuple21 c
  f)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 b e) (tuple21 c f))))))
  (! (= (tb2t3720 (t2tb3720 i)) i) :pattern ((t2tb3720 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 b1 e1) (tuple2 c1 f1)))) j)
     (= (t2tb3720 (tb2t3720 j)) j)) :pattern ((t2tb3720 (tb2t3720 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 b e))) (v (set (tuple21 c f)))
  (r (set (tuple21 (tuple21 b e) (tuple21 c f)))))
  (= (mem (set1 (tuple2 (tuple2 b1 e1) (tuple2 c1 f1))) (t2tb3222 r)
  (relation (tuple2 c1 f1) (tuple2 b1 e1) (t2tb2940 u) (t2tb2942 v)))
  (forall ((x (tuple21 b e)) (y (tuple21 c f)))
  (=> (mem (tuple2 (tuple2 b1 e1) (tuple2 c1 f1))
  (Tuple2 (tuple2 b1 e1) (tuple2 c1 f1) (t2tb2953 x) (t2tb2948 y))
  (t2tb3222 r)) (and (mem38 x u) (mem45 y v)))))))

(declare-fun t2tb3721 ((set (set (tuple21 (tuple21 b e) (tuple21 a
  e))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 b e) (tuple21 a e)))))) (sort
  (set1 (set1 (tuple2 (tuple2 b1 e1) (tuple2 a1 e1)))) (t2tb3721 x))))

(declare-fun tb2t3721 (uni) (set (set (tuple21 (tuple21 b e) (tuple21 a
  e)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 b e) (tuple21 a e))))))
  (! (= (tb2t3721 (t2tb3721 i)) i) :pattern ((t2tb3721 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 b1 e1) (tuple2 a1 e1)))) j)
     (= (t2tb3721 (tb2t3721 j)) j)) :pattern ((t2tb3721 (tb2t3721 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 b e))) (v (set (tuple21 a e)))
  (r (set (tuple21 (tuple21 b e) (tuple21 a e)))))
  (= (mem (set1 (tuple2 (tuple2 b1 e1) (tuple2 a1 e1))) (t2tb3224 r)
  (relation (tuple2 a1 e1) (tuple2 b1 e1) (t2tb2940 u) (t2tb2943 v)))
  (forall ((x (tuple21 b e)) (y (tuple21 a e)))
  (=> (mem (tuple2 (tuple2 b1 e1) (tuple2 a1 e1))
  (Tuple2 (tuple2 b1 e1) (tuple2 a1 e1) (t2tb2953 x) (t2tb2949 y))
  (t2tb3224 r)) (and (mem38 x u) (mem44 y v)))))))

(declare-fun t2tb3722 ((set (set (tuple21 (tuple21 b e) (tuple21 (tuple21 b
  d) (tuple21 e f)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 b e) (tuple21 (tuple21 b d)
  (tuple21 e f))))))) (sort
  (set1
  (set1 (tuple2 (tuple2 b1 e1) (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)))))
  (t2tb3722 x))))

(declare-fun tb2t3722 (uni) (set (set (tuple21 (tuple21 b e)
  (tuple21 (tuple21 b d) (tuple21 e f))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 b e) (tuple21 (tuple21 b d)
  (tuple21 e f)))))))
  (! (= (tb2t3722 (t2tb3722 i)) i) :pattern ((t2tb3722 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (set1 (tuple2 (tuple2 b1 e1) (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)))))
     j) (= (t2tb3722 (tb2t3722 j)) j)) :pattern ((t2tb3722 (tb2t3722 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 b e))) (v (set (tuple21 (tuple21 b d) (tuple21 e
  f)))) (r (set (tuple21 (tuple21 b e) (tuple21 (tuple21 b d) (tuple21 e
  f))))))
  (= (mem
  (set1 (tuple2 (tuple2 b1 e1) (tuple2 (tuple2 b1 d1) (tuple2 e1 f1))))
  (t2tb3226 r)
  (relation (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (tuple2 b1 e1)
  (t2tb2940 u) (t2tb2944 v)))
  (forall ((x (tuple21 b e)) (y (tuple21 (tuple21 b d) (tuple21 e f))))
  (=> (mem (tuple2 (tuple2 b1 e1) (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)))
  (Tuple2 (tuple2 b1 e1) (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (t2tb2953 x)
  (t2tb2950 y)) (t2tb3226 r)) (and (mem38 x u) (mem43 y v)))))))

(declare-fun t2tb3723 ((set (set (tuple21 (tuple21 b e) (tuple21 (tuple21 a
  c) (tuple21 e f)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 b e) (tuple21 (tuple21 a c)
  (tuple21 e f))))))) (sort
  (set1
  (set1 (tuple2 (tuple2 b1 e1) (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)))))
  (t2tb3723 x))))

(declare-fun tb2t3723 (uni) (set (set (tuple21 (tuple21 b e)
  (tuple21 (tuple21 a c) (tuple21 e f))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 b e) (tuple21 (tuple21 a c)
  (tuple21 e f)))))))
  (! (= (tb2t3723 (t2tb3723 i)) i) :pattern ((t2tb3723 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (set1 (tuple2 (tuple2 b1 e1) (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)))))
     j) (= (t2tb3723 (tb2t3723 j)) j)) :pattern ((t2tb3723 (tb2t3723 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 b e))) (v (set (tuple21 (tuple21 a c) (tuple21 e
  f)))) (r (set (tuple21 (tuple21 b e) (tuple21 (tuple21 a c) (tuple21 e
  f))))))
  (= (mem
  (set1 (tuple2 (tuple2 b1 e1) (tuple2 (tuple2 a1 c1) (tuple2 e1 f1))))
  (t2tb3228 r)
  (relation (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (tuple2 b1 e1)
  (t2tb2940 u) (t2tb2945 v)))
  (forall ((x (tuple21 b e)) (y (tuple21 (tuple21 a c) (tuple21 e f))))
  (=> (mem (tuple2 (tuple2 b1 e1) (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)))
  (Tuple2 (tuple2 b1 e1) (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (t2tb2953 x)
  (t2tb2951 y)) (t2tb3228 r)) (and (mem38 x u) (mem42 y v)))))))

(declare-fun t2tb3724 ((set (set (tuple21 (tuple21 b e) (set (tuple21 d
  f)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 b e) (set (tuple21 d f))))))) (sort
  (set1 (set1 (tuple2 (tuple2 b1 e1) (set1 (tuple2 d1 f1))))) (t2tb3724 x))))

(declare-fun tb2t3724 (uni) (set (set (tuple21 (tuple21 b e) (set (tuple21 d
  f))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 b e) (set (tuple21 d f)))))))
  (! (= (tb2t3724 (t2tb3724 i)) i) :pattern ((t2tb3724 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 b1 e1) (set1 (tuple2 d1 f1))))) j)
     (= (t2tb3724 (tb2t3724 j)) j)) :pattern ((t2tb3724 (tb2t3724 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 b e))) (v (set (set (tuple21 d f))))
  (r (set (tuple21 (tuple21 b e) (set (tuple21 d f))))))
  (= (mem (set1 (tuple2 (tuple2 b1 e1) (set1 (tuple2 d1 f1)))) (t2tb3230 r)
  (relation (set1 (tuple2 d1 f1)) (tuple2 b1 e1) (t2tb2940 u) (t2tb2939 v)))
  (forall ((x (tuple21 b e)) (y (set (tuple21 d f))))
  (=> (mem (tuple2 (tuple2 b1 e1) (set1 (tuple2 d1 f1)))
  (Tuple2 (tuple2 b1 e1) (set1 (tuple2 d1 f1)) (t2tb2953 x) (t2tb2938 y))
  (t2tb3230 r)) (and (mem38 x u) (mem41 y v)))))))

(declare-fun t2tb3725 ((set (set (tuple21 (tuple21 b e) (tuple21 d
  f))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 b e) (tuple21 d f)))))) (sort
  (set1 (set1 (tuple2 (tuple2 b1 e1) (tuple2 d1 f1)))) (t2tb3725 x))))

(declare-fun tb2t3725 (uni) (set (set (tuple21 (tuple21 b e) (tuple21 d
  f)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 b e) (tuple21 d f))))))
  (! (= (tb2t3725 (t2tb3725 i)) i) :pattern ((t2tb3725 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 b1 e1) (tuple2 d1 f1)))) j)
     (= (t2tb3725 (tb2t3725 j)) j)) :pattern ((t2tb3725 (tb2t3725 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 b e))) (v (set (tuple21 d f)))
  (r (set (tuple21 (tuple21 b e) (tuple21 d f)))))
  (= (mem (set1 (tuple2 (tuple2 b1 e1) (tuple2 d1 f1))) (t2tb3232 r)
  (relation (tuple2 d1 f1) (tuple2 b1 e1) (t2tb2940 u) (t2tb2938 v)))
  (forall ((x (tuple21 b e)) (y (tuple21 d f)))
  (=> (mem (tuple2 (tuple2 b1 e1) (tuple2 d1 f1))
  (Tuple2 (tuple2 b1 e1) (tuple2 d1 f1) (t2tb2953 x) (t2tb2952 y))
  (t2tb3232 r)) (and (mem38 x u) (mem40 y v)))))))

(declare-fun t2tb3726 ((set (set (tuple21 (tuple21 b e) (set (tuple21 b
  e)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 b e) (set (tuple21 b e))))))) (sort
  (set1 (set1 (tuple2 (tuple2 b1 e1) (set1 (tuple2 b1 e1))))) (t2tb3726 x))))

(declare-fun tb2t3726 (uni) (set (set (tuple21 (tuple21 b e) (set (tuple21 b
  e))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 b e) (set (tuple21 b e)))))))
  (! (= (tb2t3726 (t2tb3726 i)) i) :pattern ((t2tb3726 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 b1 e1) (set1 (tuple2 b1 e1))))) j)
     (= (t2tb3726 (tb2t3726 j)) j)) :pattern ((t2tb3726 (tb2t3726 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 b e))) (v (set (set (tuple21 b e))))
  (r (set (tuple21 (tuple21 b e) (set (tuple21 b e))))))
  (= (mem (set1 (tuple2 (tuple2 b1 e1) (set1 (tuple2 b1 e1)))) (t2tb3234 r)
  (relation (set1 (tuple2 b1 e1)) (tuple2 b1 e1) (t2tb2940 u) (t2tb2941 v)))
  (forall ((x (tuple21 b e)) (y (set (tuple21 b e))))
  (=> (mem (tuple2 (tuple2 b1 e1) (set1 (tuple2 b1 e1)))
  (Tuple2 (tuple2 b1 e1) (set1 (tuple2 b1 e1)) (t2tb2953 x) (t2tb2940 y))
  (t2tb3234 r)) (and (mem38 x u) (mem39 y v)))))))

(declare-fun t2tb3727 ((set (set (tuple21 (tuple21 b e) (tuple21 b
  e))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 b e) (tuple21 b e)))))) (sort
  (set1 (set1 (tuple2 (tuple2 b1 e1) (tuple2 b1 e1)))) (t2tb3727 x))))

(declare-fun tb2t3727 (uni) (set (set (tuple21 (tuple21 b e) (tuple21 b
  e)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 b e) (tuple21 b e))))))
  (! (= (tb2t3727 (t2tb3727 i)) i) :pattern ((t2tb3727 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 b1 e1) (tuple2 b1 e1)))) j)
     (= (t2tb3727 (tb2t3727 j)) j)) :pattern ((t2tb3727 (tb2t3727 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 b e))) (v (set (tuple21 b e)))
  (r (set (tuple21 (tuple21 b e) (tuple21 b e)))))
  (= (mem (set1 (tuple2 (tuple2 b1 e1) (tuple2 b1 e1))) (t2tb3236 r)
  (relation (tuple2 b1 e1) (tuple2 b1 e1) (t2tb2940 u) (t2tb2940 v)))
  (forall ((x (tuple21 b e)) (y (tuple21 b e)))
  (=> (mem (tuple2 (tuple2 b1 e1) (tuple2 b1 e1))
  (Tuple2 (tuple2 b1 e1) (tuple2 b1 e1) (t2tb2953 x) (t2tb2953 y))
  (t2tb3236 r)) (and (mem38 x u) (mem38 y v)))))))

(declare-fun t2tb3728 ((set (set (tuple21 (tuple21 b e) f)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 b e) f))))) (sort
  (set1 (set1 (tuple2 (tuple2 b1 e1) f1))) (t2tb3728 x))))

(declare-fun tb2t3728 (uni) (set (set (tuple21 (tuple21 b e) f))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 b e) f)))))
  (! (= (tb2t3728 (t2tb3728 i)) i) :pattern ((t2tb3728 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 b1 e1) f1))) j)
     (= (t2tb3728 (tb2t3728 j)) j)) :pattern ((t2tb3728 (tb2t3728 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 b e))) (v (set f)) (r (set (tuple21 (tuple21 b e)
  f))))
  (= (mem (set1 (tuple2 (tuple2 b1 e1) f1)) (t2tb3238 r)
  (relation f1 (tuple2 b1 e1) (t2tb2940 u) (t2tb2946 v)))
  (forall ((x (tuple21 b e)) (y f))
  (=> (mem (tuple2 (tuple2 b1 e1) f1)
  (Tuple2 (tuple2 b1 e1) f1 (t2tb2953 x) (t2tb2954 y)) (t2tb3238 r))
  (and (mem38 x u) (mem37 y v)))))))

(declare-fun t2tb3729 ((set (set (tuple21 (tuple21 b e) e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 b e) e))))) (sort
  (set1 (set1 (tuple2 (tuple2 b1 e1) e1))) (t2tb3729 x))))

(declare-fun tb2t3729 (uni) (set (set (tuple21 (tuple21 b e) e))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 b e) e)))))
  (! (= (tb2t3729 (t2tb3729 i)) i) :pattern ((t2tb3729 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 b1 e1) e1))) j)
     (= (t2tb3729 (tb2t3729 j)) j)) :pattern ((t2tb3729 (tb2t3729 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 b e))) (v (set e)) (r (set (tuple21 (tuple21 b e)
  e))))
  (= (mem (set1 (tuple2 (tuple2 b1 e1) e1)) (t2tb3240 r)
  (relation e1 (tuple2 b1 e1) (t2tb2940 u) (t2tb2947 v)))
  (forall ((x (tuple21 b e)) (y e))
  (=> (mem (tuple2 (tuple2 b1 e1) e1)
  (Tuple2 (tuple2 b1 e1) e1 (t2tb2953 x) (t2tb2955 y)) (t2tb3240 r))
  (and (mem38 x u) (mem36 y v)))))))

(declare-fun t2tb3730 ((set (set (tuple21 (tuple21 b e) (tuple21 (tuple21 a
  c) (tuple21 b d)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 b e) (tuple21 (tuple21 a c)
  (tuple21 b d))))))) (sort
  (set1
  (set1 (tuple2 (tuple2 b1 e1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))))
  (t2tb3730 x))))

(declare-fun tb2t3730 (uni) (set (set (tuple21 (tuple21 b e)
  (tuple21 (tuple21 a c) (tuple21 b d))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 b e) (tuple21 (tuple21 a c)
  (tuple21 b d)))))))
  (! (= (tb2t3730 (t2tb3730 i)) i) :pattern ((t2tb3730 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (set1 (tuple2 (tuple2 b1 e1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))))
     j) (= (t2tb3730 (tb2t3730 j)) j)) :pattern ((t2tb3730 (tb2t3730 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 b e))) (v (set (tuple21 (tuple21 a c) (tuple21 b
  d)))) (r (set (tuple21 (tuple21 b e) (tuple21 (tuple21 a c) (tuple21 b
  d))))))
  (= (mem
  (set1 (tuple2 (tuple2 b1 e1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))))
  (t2tb3242 r)
  (relation (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 b1 e1)
  (t2tb2940 u) (t2tb686 v)))
  (forall ((x (tuple21 b e)) (y (tuple21 (tuple21 a c) (tuple21 b d))))
  (=> (mem (tuple2 (tuple2 b1 e1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
  (Tuple2 (tuple2 b1 e1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb2953 x)
  (t2tb691 y)) (t2tb3242 r)) (and (mem38 x u) (mem24 y v)))))))

(declare-fun t2tb3731 ((set (set (tuple21 (tuple21 b e) (set (tuple21 c
  d)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 b e) (set (tuple21 c d))))))) (sort
  (set1 (set1 (tuple2 (tuple2 b1 e1) (set1 (tuple2 c1 d1))))) (t2tb3731 x))))

(declare-fun tb2t3731 (uni) (set (set (tuple21 (tuple21 b e) (set (tuple21 c
  d))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 b e) (set (tuple21 c d)))))))
  (! (= (tb2t3731 (t2tb3731 i)) i) :pattern ((t2tb3731 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 b1 e1) (set1 (tuple2 c1 d1))))) j)
     (= (t2tb3731 (tb2t3731 j)) j)) :pattern ((t2tb3731 (tb2t3731 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 b e))) (v (set (set (tuple21 c d))))
  (r (set (tuple21 (tuple21 b e) (set (tuple21 c d))))))
  (= (mem (set1 (tuple2 (tuple2 b1 e1) (set1 (tuple2 c1 d1)))) (t2tb3244 r)
  (relation (set1 (tuple2 c1 d1)) (tuple2 b1 e1) (t2tb2940 u) (t2tb688 v)))
  (forall ((x (tuple21 b e)) (y (set (tuple21 c d))))
  (=> (mem (tuple2 (tuple2 b1 e1) (set1 (tuple2 c1 d1)))
  (Tuple2 (tuple2 b1 e1) (set1 (tuple2 c1 d1)) (t2tb2953 x) (t2tb689 y))
  (t2tb3244 r)) (and (mem38 x u) (mem22 y v)))))))

(declare-fun t2tb3732 ((set (set (tuple21 (tuple21 b e) (tuple21 c
  d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 b e) (tuple21 c d)))))) (sort
  (set1 (set1 (tuple2 (tuple2 b1 e1) (tuple2 c1 d1)))) (t2tb3732 x))))

(declare-fun tb2t3732 (uni) (set (set (tuple21 (tuple21 b e) (tuple21 c
  d)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 b e) (tuple21 c d))))))
  (! (= (tb2t3732 (t2tb3732 i)) i) :pattern ((t2tb3732 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 b1 e1) (tuple2 c1 d1)))) j)
     (= (t2tb3732 (tb2t3732 j)) j)) :pattern ((t2tb3732 (tb2t3732 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 b e))) (v (set (tuple21 c d)))
  (r (set (tuple21 (tuple21 b e) (tuple21 c d)))))
  (= (mem (set1 (tuple2 (tuple2 b1 e1) (tuple2 c1 d1))) (t2tb3246 r)
  (relation (tuple2 c1 d1) (tuple2 b1 e1) (t2tb2940 u) (t2tb689 v)))
  (forall ((x (tuple21 b e)) (y (tuple21 c d)))
  (=> (mem (tuple2 (tuple2 b1 e1) (tuple2 c1 d1))
  (Tuple2 (tuple2 b1 e1) (tuple2 c1 d1) (t2tb2953 x) (t2tb693 y))
  (t2tb3246 r)) (and (mem38 x u) (mem21 y v)))))))

(declare-fun t2tb3733 ((set (set (tuple21 (tuple21 b e) d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 b e) d))))) (sort
  (set1 (set1 (tuple2 (tuple2 b1 e1) d1))) (t2tb3733 x))))

(declare-fun tb2t3733 (uni) (set (set (tuple21 (tuple21 b e) d))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 b e) d)))))
  (! (= (tb2t3733 (t2tb3733 i)) i) :pattern ((t2tb3733 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 b1 e1) d1))) j)
     (= (t2tb3733 (tb2t3733 j)) j)) :pattern ((t2tb3733 (tb2t3733 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 b e))) (v (set d)) (r (set (tuple21 (tuple21 b e)
  d))))
  (= (mem (set1 (tuple2 (tuple2 b1 e1) d1)) (t2tb3248 r)
  (relation d1 (tuple2 b1 e1) (t2tb2940 u) (t2tb690 v)))
  (forall ((x (tuple21 b e)) (y d))
  (=> (mem (tuple2 (tuple2 b1 e1) d1)
  (Tuple2 (tuple2 b1 e1) d1 (t2tb2953 x) (t2tb694 y)) (t2tb3248 r))
  (and (mem38 x u) (mem20 y v)))))))

(declare-fun t2tb3734 ((set (set (tuple21 (tuple21 b e) c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 b e) c))))) (sort
  (set1 (set1 (tuple2 (tuple2 b1 e1) c1))) (t2tb3734 x))))

(declare-fun tb2t3734 (uni) (set (set (tuple21 (tuple21 b e) c))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 b e) c)))))
  (! (= (tb2t3734 (t2tb3734 i)) i) :pattern ((t2tb3734 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 b1 e1) c1))) j)
     (= (t2tb3734 (tb2t3734 j)) j)) :pattern ((t2tb3734 (tb2t3734 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 b e))) (v (set c)) (r (set (tuple21 (tuple21 b e)
  c))))
  (= (mem (set1 (tuple2 (tuple2 b1 e1) c1)) (t2tb3250 r)
  (relation c1 (tuple2 b1 e1) (t2tb2940 u) (t2tb132 v)))
  (forall ((x (tuple21 b e)) (y c))
  (=> (mem (tuple2 (tuple2 b1 e1) c1)
  (Tuple2 (tuple2 b1 e1) c1 (t2tb2953 x) (t2tb135 y)) (t2tb3250 r))
  (and (mem38 x u) (mem7 y v)))))))

(declare-fun t2tb3735 ((set (set (tuple21 (tuple21 b e) (set (tuple21 a
  b)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 b e) (set (tuple21 a b))))))) (sort
  (set1 (set1 (tuple2 (tuple2 b1 e1) (set1 (tuple2 a1 b1))))) (t2tb3735 x))))

(declare-fun tb2t3735 (uni) (set (set (tuple21 (tuple21 b e) (set (tuple21 a
  b))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 b e) (set (tuple21 a b)))))))
  (! (= (tb2t3735 (t2tb3735 i)) i) :pattern ((t2tb3735 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 b1 e1) (set1 (tuple2 a1 b1))))) j)
     (= (t2tb3735 (tb2t3735 j)) j)) :pattern ((t2tb3735 (tb2t3735 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 b e))) (v (set (set (tuple21 a b))))
  (r (set (tuple21 (tuple21 b e) (set (tuple21 a b))))))
  (= (mem (set1 (tuple2 (tuple2 b1 e1) (set1 (tuple2 a1 b1)))) (t2tb3252 r)
  (relation (set1 (tuple2 a1 b1)) (tuple2 b1 e1) (t2tb2940 u) (t2tb10 v)))
  (forall ((x (tuple21 b e)) (y (set (tuple21 a b))))
  (=> (mem (tuple2 (tuple2 b1 e1) (set1 (tuple2 a1 b1)))
  (Tuple2 (tuple2 b1 e1) (set1 (tuple2 a1 b1)) (t2tb2953 x) (t2tb11 y))
  (t2tb3252 r)) (and (mem38 x u) (mem4 y v)))))))

(declare-fun t2tb3736 ((set (set (tuple21 (tuple21 b e) (tuple21 a
  b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 b e) (tuple21 a b)))))) (sort
  (set1 (set1 (tuple2 (tuple2 b1 e1) (tuple2 a1 b1)))) (t2tb3736 x))))

(declare-fun tb2t3736 (uni) (set (set (tuple21 (tuple21 b e) (tuple21 a
  b)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 b e) (tuple21 a b))))))
  (! (= (tb2t3736 (t2tb3736 i)) i) :pattern ((t2tb3736 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 b1 e1) (tuple2 a1 b1)))) j)
     (= (t2tb3736 (tb2t3736 j)) j)) :pattern ((t2tb3736 (tb2t3736 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 b e))) (v (set (tuple21 a b)))
  (r (set (tuple21 (tuple21 b e) (tuple21 a b)))))
  (= (mem (set1 (tuple2 (tuple2 b1 e1) (tuple2 a1 b1))) (t2tb3254 r)
  (relation (tuple2 a1 b1) (tuple2 b1 e1) (t2tb2940 u) (t2tb11 v)))
  (forall ((x (tuple21 b e)) (y (tuple21 a b)))
  (=> (mem (tuple2 (tuple2 b1 e1) (tuple2 a1 b1))
  (Tuple2 (tuple2 b1 e1) (tuple2 a1 b1) (t2tb2953 x) (t2tb13 y))
  (t2tb3254 r)) (and (mem38 x u) (mem3 y v)))))))

(declare-fun t2tb3737 ((set (set (tuple21 (tuple21 b e) b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 b e) b))))) (sort
  (set1 (set1 (tuple2 (tuple2 b1 e1) b1))) (t2tb3737 x))))

(declare-fun tb2t3737 (uni) (set (set (tuple21 (tuple21 b e) b))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 b e) b)))))
  (! (= (tb2t3737 (t2tb3737 i)) i) :pattern ((t2tb3737 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 b1 e1) b1))) j)
     (= (t2tb3737 (tb2t3737 j)) j)) :pattern ((t2tb3737 (tb2t3737 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 b e))) (v (set b)) (r (set (tuple21 (tuple21 b e)
  b))))
  (= (mem (set1 (tuple2 (tuple2 b1 e1) b1)) (t2tb3256 r)
  (relation b1 (tuple2 b1 e1) (t2tb2940 u) (t2tb12 v)))
  (forall ((x (tuple21 b e)) (y b))
  (=> (mem (tuple2 (tuple2 b1 e1) b1)
  (Tuple2 (tuple2 b1 e1) b1 (t2tb2953 x) (t2tb14 y)) (t2tb3256 r))
  (and (mem38 x u) (mem2 y v)))))))

(declare-fun t2tb3738 ((set (set (tuple21 (tuple21 b e) a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 b e) a))))) (sort
  (set1 (set1 (tuple2 (tuple2 b1 e1) a1))) (t2tb3738 x))))

(declare-fun tb2t3738 (uni) (set (set (tuple21 (tuple21 b e) a))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 b e) a)))))
  (! (= (tb2t3738 (t2tb3738 i)) i) :pattern ((t2tb3738 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 b1 e1) a1))) j)
     (= (t2tb3738 (tb2t3738 j)) j)) :pattern ((t2tb3738 (tb2t3738 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 b e))) (v (set a)) (r (set (tuple21 (tuple21 b e)
  a))))
  (= (mem (set1 (tuple2 (tuple2 b1 e1) a1)) (t2tb3258 r)
  (relation a1 (tuple2 b1 e1) (t2tb2940 u) (t2tb1 v)))
  (forall ((x (tuple21 b e)) (y a))
  (=> (mem (tuple2 (tuple2 b1 e1) a1)
  (Tuple2 (tuple2 b1 e1) a1 (t2tb2953 x) (t2tb2 y)) (t2tb3258 r))
  (and (mem38 x u) (mem1 y v)))))))

;; mem_relation
  (assert
  (forall ((b2 ty))
  (forall ((u (set (tuple21 b e))) (v uni) (r uni))
  (and
  (=> (mem (set1 (tuple2 (tuple2 b1 e1) b2)) r
  (relation b2 (tuple2 b1 e1) (t2tb2940 u) v))
  (forall ((x (tuple21 b e)) (y uni))
  (=> (mem (tuple2 (tuple2 b1 e1) b2)
  (Tuple2 (tuple2 b1 e1) b2 (t2tb2953 x) y) r)
  (and (mem38 x u) (mem b2 y v)))))
  (=>
  (forall ((x (tuple21 b e)) (y uni))
  (=> (sort b2 y)
  (=> (mem (tuple2 (tuple2 b1 e1) b2)
  (Tuple2 (tuple2 b1 e1) b2 (t2tb2953 x) y) r)
  (and (mem38 x u) (mem b2 y v))))) (mem (set1 (tuple2 (tuple2 b1 e1) b2)) r
  (relation b2 (tuple2 b1 e1) (t2tb2940 u) v)))))))

(declare-fun t2tb3739 ((set (set (tuple21 f (tuple21 c f))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 f (tuple21 c f)))))) (sort
  (set1 (set1 (tuple2 f1 (tuple2 c1 f1)))) (t2tb3739 x))))

(declare-fun tb2t3739 (uni) (set (set (tuple21 f (tuple21 c f)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 f (tuple21 c f))))))
  (! (= (tb2t3739 (t2tb3739 i)) i) :pattern ((t2tb3739 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 f1 (tuple2 c1 f1)))) j)
     (= (t2tb3739 (tb2t3739 j)) j)) :pattern ((t2tb3739 (tb2t3739 j))) )))

;; mem_relation
  (assert
  (forall ((u (set f)) (v (set (tuple21 c f))) (r (set (tuple21 f (tuple21 c
  f)))))
  (= (mem (set1 (tuple2 f1 (tuple2 c1 f1))) (t2tb3260 r)
  (relation (tuple2 c1 f1) f1 (t2tb2946 u) (t2tb2942 v)))
  (forall ((x f) (y (tuple21 c f)))
  (=> (mem (tuple2 f1 (tuple2 c1 f1))
  (Tuple2 f1 (tuple2 c1 f1) (t2tb2954 x) (t2tb2948 y)) (t2tb3260 r))
  (and (mem37 x u) (mem45 y v)))))))

(declare-fun t2tb3740 ((set (set (tuple21 f (tuple21 a e))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 f (tuple21 a e)))))) (sort
  (set1 (set1 (tuple2 f1 (tuple2 a1 e1)))) (t2tb3740 x))))

(declare-fun tb2t3740 (uni) (set (set (tuple21 f (tuple21 a e)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 f (tuple21 a e))))))
  (! (= (tb2t3740 (t2tb3740 i)) i) :pattern ((t2tb3740 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 f1 (tuple2 a1 e1)))) j)
     (= (t2tb3740 (tb2t3740 j)) j)) :pattern ((t2tb3740 (tb2t3740 j))) )))

;; mem_relation
  (assert
  (forall ((u (set f)) (v (set (tuple21 a e))) (r (set (tuple21 f (tuple21 a
  e)))))
  (= (mem (set1 (tuple2 f1 (tuple2 a1 e1))) (t2tb3262 r)
  (relation (tuple2 a1 e1) f1 (t2tb2946 u) (t2tb2943 v)))
  (forall ((x f) (y (tuple21 a e)))
  (=> (mem (tuple2 f1 (tuple2 a1 e1))
  (Tuple2 f1 (tuple2 a1 e1) (t2tb2954 x) (t2tb2949 y)) (t2tb3262 r))
  (and (mem37 x u) (mem44 y v)))))))

(declare-fun t2tb3741 ((set (set (tuple21 f (tuple21 (tuple21 b d) (tuple21 e
  f)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 f (tuple21 (tuple21 b d) (tuple21 e f)))))))
  (sort (set1 (set1 (tuple2 f1 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)))))
  (t2tb3741 x))))

(declare-fun tb2t3741 (uni) (set (set (tuple21 f (tuple21 (tuple21 b d)
  (tuple21 e f))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 f (tuple21 (tuple21 b d) (tuple21 e f)))))))
  (! (= (tb2t3741 (t2tb3741 i)) i) :pattern ((t2tb3741 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 f1 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1))))) j)
     (= (t2tb3741 (tb2t3741 j)) j)) :pattern ((t2tb3741 (tb2t3741 j))) )))

;; mem_relation
  (assert
  (forall ((u (set f)) (v (set (tuple21 (tuple21 b d) (tuple21 e f))))
  (r (set (tuple21 f (tuple21 (tuple21 b d) (tuple21 e f))))))
  (= (mem (set1 (tuple2 f1 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1))))
  (t2tb3264 r)
  (relation (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) f1 (t2tb2946 u)
  (t2tb2944 v)))
  (forall ((x f) (y (tuple21 (tuple21 b d) (tuple21 e f))))
  (=> (mem (tuple2 f1 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)))
  (Tuple2 f1 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (t2tb2954 x)
  (t2tb2950 y)) (t2tb3264 r)) (and (mem37 x u) (mem43 y v)))))))

(declare-fun t2tb3742 ((set (set (tuple21 f (tuple21 (tuple21 a c) (tuple21 e
  f)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 f (tuple21 (tuple21 a c) (tuple21 e f)))))))
  (sort (set1 (set1 (tuple2 f1 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)))))
  (t2tb3742 x))))

(declare-fun tb2t3742 (uni) (set (set (tuple21 f (tuple21 (tuple21 a c)
  (tuple21 e f))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 f (tuple21 (tuple21 a c) (tuple21 e f)))))))
  (! (= (tb2t3742 (t2tb3742 i)) i) :pattern ((t2tb3742 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 f1 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1))))) j)
     (= (t2tb3742 (tb2t3742 j)) j)) :pattern ((t2tb3742 (tb2t3742 j))) )))

;; mem_relation
  (assert
  (forall ((u (set f)) (v (set (tuple21 (tuple21 a c) (tuple21 e f))))
  (r (set (tuple21 f (tuple21 (tuple21 a c) (tuple21 e f))))))
  (= (mem (set1 (tuple2 f1 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1))))
  (t2tb3266 r)
  (relation (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) f1 (t2tb2946 u)
  (t2tb2945 v)))
  (forall ((x f) (y (tuple21 (tuple21 a c) (tuple21 e f))))
  (=> (mem (tuple2 f1 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)))
  (Tuple2 f1 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (t2tb2954 x)
  (t2tb2951 y)) (t2tb3266 r)) (and (mem37 x u) (mem42 y v)))))))

(declare-fun t2tb3743 ((set (set (tuple21 f (set (tuple21 d f)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 f (set (tuple21 d f))))))) (sort
  (set1 (set1 (tuple2 f1 (set1 (tuple2 d1 f1))))) (t2tb3743 x))))

(declare-fun tb2t3743 (uni) (set (set (tuple21 f (set (tuple21 d f))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 f (set (tuple21 d f)))))))
  (! (= (tb2t3743 (t2tb3743 i)) i) :pattern ((t2tb3743 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 f1 (set1 (tuple2 d1 f1))))) j)
     (= (t2tb3743 (tb2t3743 j)) j)) :pattern ((t2tb3743 (tb2t3743 j))) )))

;; mem_relation
  (assert
  (forall ((u (set f)) (v (set (set (tuple21 d f)))) (r (set (tuple21 f
  (set (tuple21 d f))))))
  (= (mem (set1 (tuple2 f1 (set1 (tuple2 d1 f1)))) (t2tb3268 r)
  (relation (set1 (tuple2 d1 f1)) f1 (t2tb2946 u) (t2tb2939 v)))
  (forall ((x f) (y (set (tuple21 d f))))
  (=> (mem (tuple2 f1 (set1 (tuple2 d1 f1)))
  (Tuple2 f1 (set1 (tuple2 d1 f1)) (t2tb2954 x) (t2tb2938 y)) (t2tb3268 r))
  (and (mem37 x u) (mem41 y v)))))))

(declare-fun t2tb3744 ((set (set (tuple21 f (tuple21 d f))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 f (tuple21 d f)))))) (sort
  (set1 (set1 (tuple2 f1 (tuple2 d1 f1)))) (t2tb3744 x))))

(declare-fun tb2t3744 (uni) (set (set (tuple21 f (tuple21 d f)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 f (tuple21 d f))))))
  (! (= (tb2t3744 (t2tb3744 i)) i) :pattern ((t2tb3744 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 f1 (tuple2 d1 f1)))) j)
     (= (t2tb3744 (tb2t3744 j)) j)) :pattern ((t2tb3744 (tb2t3744 j))) )))

;; mem_relation
  (assert
  (forall ((u (set f)) (v (set (tuple21 d f))) (r (set (tuple21 f (tuple21 d
  f)))))
  (= (mem (set1 (tuple2 f1 (tuple2 d1 f1))) (t2tb3270 r)
  (relation (tuple2 d1 f1) f1 (t2tb2946 u) (t2tb2938 v)))
  (forall ((x f) (y (tuple21 d f)))
  (=> (mem (tuple2 f1 (tuple2 d1 f1))
  (Tuple2 f1 (tuple2 d1 f1) (t2tb2954 x) (t2tb2952 y)) (t2tb3270 r))
  (and (mem37 x u) (mem40 y v)))))))

(declare-fun t2tb3745 ((set (set (tuple21 f (set (tuple21 b e)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 f (set (tuple21 b e))))))) (sort
  (set1 (set1 (tuple2 f1 (set1 (tuple2 b1 e1))))) (t2tb3745 x))))

(declare-fun tb2t3745 (uni) (set (set (tuple21 f (set (tuple21 b e))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 f (set (tuple21 b e)))))))
  (! (= (tb2t3745 (t2tb3745 i)) i) :pattern ((t2tb3745 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 f1 (set1 (tuple2 b1 e1))))) j)
     (= (t2tb3745 (tb2t3745 j)) j)) :pattern ((t2tb3745 (tb2t3745 j))) )))

;; mem_relation
  (assert
  (forall ((u (set f)) (v (set (set (tuple21 b e)))) (r (set (tuple21 f
  (set (tuple21 b e))))))
  (= (mem (set1 (tuple2 f1 (set1 (tuple2 b1 e1)))) (t2tb3272 r)
  (relation (set1 (tuple2 b1 e1)) f1 (t2tb2946 u) (t2tb2941 v)))
  (forall ((x f) (y (set (tuple21 b e))))
  (=> (mem (tuple2 f1 (set1 (tuple2 b1 e1)))
  (Tuple2 f1 (set1 (tuple2 b1 e1)) (t2tb2954 x) (t2tb2940 y)) (t2tb3272 r))
  (and (mem37 x u) (mem39 y v)))))))

(declare-fun t2tb3746 ((set (set (tuple21 f (tuple21 b e))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 f (tuple21 b e)))))) (sort
  (set1 (set1 (tuple2 f1 (tuple2 b1 e1)))) (t2tb3746 x))))

(declare-fun tb2t3746 (uni) (set (set (tuple21 f (tuple21 b e)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 f (tuple21 b e))))))
  (! (= (tb2t3746 (t2tb3746 i)) i) :pattern ((t2tb3746 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 f1 (tuple2 b1 e1)))) j)
     (= (t2tb3746 (tb2t3746 j)) j)) :pattern ((t2tb3746 (tb2t3746 j))) )))

;; mem_relation
  (assert
  (forall ((u (set f)) (v (set (tuple21 b e))) (r (set (tuple21 f (tuple21 b
  e)))))
  (= (mem (set1 (tuple2 f1 (tuple2 b1 e1))) (t2tb3274 r)
  (relation (tuple2 b1 e1) f1 (t2tb2946 u) (t2tb2940 v)))
  (forall ((x f) (y (tuple21 b e)))
  (=> (mem (tuple2 f1 (tuple2 b1 e1))
  (Tuple2 f1 (tuple2 b1 e1) (t2tb2954 x) (t2tb2953 y)) (t2tb3274 r))
  (and (mem37 x u) (mem38 y v)))))))

(declare-fun t2tb3747 ((set (set (tuple21 f f)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 f f))))) (sort (set1 (set1 (tuple2 f1 f1)))
  (t2tb3747 x))))

(declare-fun tb2t3747 (uni) (set (set (tuple21 f f))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 f f)))))
  (! (= (tb2t3747 (t2tb3747 i)) i) :pattern ((t2tb3747 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 f1 f1))) j) (= (t2tb3747 (tb2t3747 j)) j)) :pattern (
  (t2tb3747 (tb2t3747 j))) )))

;; mem_relation
  (assert
  (forall ((u (set f)) (v (set f)) (r (set (tuple21 f f))))
  (= (mem (set1 (tuple2 f1 f1)) (t2tb3276 r)
  (relation f1 f1 (t2tb2946 u) (t2tb2946 v)))
  (forall ((x f) (y f))
  (=> (mem (tuple2 f1 f1) (Tuple2 f1 f1 (t2tb2954 x) (t2tb2954 y))
  (t2tb3276 r)) (and (mem37 x u) (mem37 y v)))))))

(declare-fun t2tb3748 ((set (set (tuple21 f e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 f e))))) (sort (set1 (set1 (tuple2 f1 e1)))
  (t2tb3748 x))))

(declare-fun tb2t3748 (uni) (set (set (tuple21 f e))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 f e)))))
  (! (= (tb2t3748 (t2tb3748 i)) i) :pattern ((t2tb3748 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 f1 e1))) j) (= (t2tb3748 (tb2t3748 j)) j)) :pattern (
  (t2tb3748 (tb2t3748 j))) )))

;; mem_relation
  (assert
  (forall ((u (set f)) (v (set e)) (r (set (tuple21 f e))))
  (= (mem (set1 (tuple2 f1 e1)) (t2tb3278 r)
  (relation e1 f1 (t2tb2946 u) (t2tb2947 v)))
  (forall ((x f) (y e))
  (=> (mem (tuple2 f1 e1) (Tuple2 f1 e1 (t2tb2954 x) (t2tb2955 y))
  (t2tb3278 r)) (and (mem37 x u) (mem36 y v)))))))

(declare-fun t2tb3749 ((set (set (tuple21 f (tuple21 (tuple21 a c) (tuple21 b
  d)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 f (tuple21 (tuple21 a c) (tuple21 b d)))))))
  (sort (set1 (set1 (tuple2 f1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))))
  (t2tb3749 x))))

(declare-fun tb2t3749 (uni) (set (set (tuple21 f (tuple21 (tuple21 a c)
  (tuple21 b d))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 f (tuple21 (tuple21 a c) (tuple21 b d)))))))
  (! (= (tb2t3749 (t2tb3749 i)) i) :pattern ((t2tb3749 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 f1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))))) j)
     (= (t2tb3749 (tb2t3749 j)) j)) :pattern ((t2tb3749 (tb2t3749 j))) )))

;; mem_relation
  (assert
  (forall ((u (set f)) (v (set (tuple21 (tuple21 a c) (tuple21 b d))))
  (r (set (tuple21 f (tuple21 (tuple21 a c) (tuple21 b d))))))
  (= (mem (set1 (tuple2 f1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))))
  (t2tb3280 r)
  (relation (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) f1 (t2tb2946 u)
  (t2tb686 v)))
  (forall ((x f) (y (tuple21 (tuple21 a c) (tuple21 b d))))
  (=> (mem (tuple2 f1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
  (Tuple2 f1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb2954 x) (t2tb691 y))
  (t2tb3280 r)) (and (mem37 x u) (mem24 y v)))))))

(declare-fun t2tb3750 ((set (set (tuple21 f (set (tuple21 c d)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 f (set (tuple21 c d))))))) (sort
  (set1 (set1 (tuple2 f1 (set1 (tuple2 c1 d1))))) (t2tb3750 x))))

(declare-fun tb2t3750 (uni) (set (set (tuple21 f (set (tuple21 c d))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 f (set (tuple21 c d)))))))
  (! (= (tb2t3750 (t2tb3750 i)) i) :pattern ((t2tb3750 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 f1 (set1 (tuple2 c1 d1))))) j)
     (= (t2tb3750 (tb2t3750 j)) j)) :pattern ((t2tb3750 (tb2t3750 j))) )))

;; mem_relation
  (assert
  (forall ((u (set f)) (v (set (set (tuple21 c d)))) (r (set (tuple21 f
  (set (tuple21 c d))))))
  (= (mem (set1 (tuple2 f1 (set1 (tuple2 c1 d1)))) (t2tb3282 r)
  (relation (set1 (tuple2 c1 d1)) f1 (t2tb2946 u) (t2tb688 v)))
  (forall ((x f) (y (set (tuple21 c d))))
  (=> (mem (tuple2 f1 (set1 (tuple2 c1 d1)))
  (Tuple2 f1 (set1 (tuple2 c1 d1)) (t2tb2954 x) (t2tb689 y)) (t2tb3282 r))
  (and (mem37 x u) (mem22 y v)))))))

(declare-fun t2tb3751 ((set (set (tuple21 f (tuple21 c d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 f (tuple21 c d)))))) (sort
  (set1 (set1 (tuple2 f1 (tuple2 c1 d1)))) (t2tb3751 x))))

(declare-fun tb2t3751 (uni) (set (set (tuple21 f (tuple21 c d)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 f (tuple21 c d))))))
  (! (= (tb2t3751 (t2tb3751 i)) i) :pattern ((t2tb3751 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 f1 (tuple2 c1 d1)))) j)
     (= (t2tb3751 (tb2t3751 j)) j)) :pattern ((t2tb3751 (tb2t3751 j))) )))

;; mem_relation
  (assert
  (forall ((u (set f)) (v (set (tuple21 c d))) (r (set (tuple21 f (tuple21 c
  d)))))
  (= (mem (set1 (tuple2 f1 (tuple2 c1 d1))) (t2tb3284 r)
  (relation (tuple2 c1 d1) f1 (t2tb2946 u) (t2tb689 v)))
  (forall ((x f) (y (tuple21 c d)))
  (=> (mem (tuple2 f1 (tuple2 c1 d1))
  (Tuple2 f1 (tuple2 c1 d1) (t2tb2954 x) (t2tb693 y)) (t2tb3284 r))
  (and (mem37 x u) (mem21 y v)))))))

(declare-fun t2tb3752 ((set (set (tuple21 f d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 f d))))) (sort (set1 (set1 (tuple2 f1 d1)))
  (t2tb3752 x))))

(declare-fun tb2t3752 (uni) (set (set (tuple21 f d))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 f d)))))
  (! (= (tb2t3752 (t2tb3752 i)) i) :pattern ((t2tb3752 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 f1 d1))) j) (= (t2tb3752 (tb2t3752 j)) j)) :pattern (
  (t2tb3752 (tb2t3752 j))) )))

;; mem_relation
  (assert
  (forall ((u (set f)) (v (set d)) (r (set (tuple21 f d))))
  (= (mem (set1 (tuple2 f1 d1)) (t2tb3286 r)
  (relation d1 f1 (t2tb2946 u) (t2tb690 v)))
  (forall ((x f) (y d))
  (=> (mem (tuple2 f1 d1) (Tuple2 f1 d1 (t2tb2954 x) (t2tb694 y))
  (t2tb3286 r)) (and (mem37 x u) (mem20 y v)))))))

(declare-fun t2tb3753 ((set (set (tuple21 f c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 f c))))) (sort (set1 (set1 (tuple2 f1 c1)))
  (t2tb3753 x))))

(declare-fun tb2t3753 (uni) (set (set (tuple21 f c))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 f c)))))
  (! (= (tb2t3753 (t2tb3753 i)) i) :pattern ((t2tb3753 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 f1 c1))) j) (= (t2tb3753 (tb2t3753 j)) j)) :pattern (
  (t2tb3753 (tb2t3753 j))) )))

;; mem_relation
  (assert
  (forall ((u (set f)) (v (set c)) (r (set (tuple21 f c))))
  (= (mem (set1 (tuple2 f1 c1)) (t2tb3288 r)
  (relation c1 f1 (t2tb2946 u) (t2tb132 v)))
  (forall ((x f) (y c))
  (=> (mem (tuple2 f1 c1) (Tuple2 f1 c1 (t2tb2954 x) (t2tb135 y))
  (t2tb3288 r)) (and (mem37 x u) (mem7 y v)))))))

(declare-fun t2tb3754 ((set (set (tuple21 f (set (tuple21 a b)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 f (set (tuple21 a b))))))) (sort
  (set1 (set1 (tuple2 f1 (set1 (tuple2 a1 b1))))) (t2tb3754 x))))

(declare-fun tb2t3754 (uni) (set (set (tuple21 f (set (tuple21 a b))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 f (set (tuple21 a b)))))))
  (! (= (tb2t3754 (t2tb3754 i)) i) :pattern ((t2tb3754 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 f1 (set1 (tuple2 a1 b1))))) j)
     (= (t2tb3754 (tb2t3754 j)) j)) :pattern ((t2tb3754 (tb2t3754 j))) )))

;; mem_relation
  (assert
  (forall ((u (set f)) (v (set (set (tuple21 a b)))) (r (set (tuple21 f
  (set (tuple21 a b))))))
  (= (mem (set1 (tuple2 f1 (set1 (tuple2 a1 b1)))) (t2tb3290 r)
  (relation (set1 (tuple2 a1 b1)) f1 (t2tb2946 u) (t2tb10 v)))
  (forall ((x f) (y (set (tuple21 a b))))
  (=> (mem (tuple2 f1 (set1 (tuple2 a1 b1)))
  (Tuple2 f1 (set1 (tuple2 a1 b1)) (t2tb2954 x) (t2tb11 y)) (t2tb3290 r))
  (and (mem37 x u) (mem4 y v)))))))

(declare-fun t2tb3755 ((set (set (tuple21 f (tuple21 a b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 f (tuple21 a b)))))) (sort
  (set1 (set1 (tuple2 f1 (tuple2 a1 b1)))) (t2tb3755 x))))

(declare-fun tb2t3755 (uni) (set (set (tuple21 f (tuple21 a b)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 f (tuple21 a b))))))
  (! (= (tb2t3755 (t2tb3755 i)) i) :pattern ((t2tb3755 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 f1 (tuple2 a1 b1)))) j)
     (= (t2tb3755 (tb2t3755 j)) j)) :pattern ((t2tb3755 (tb2t3755 j))) )))

;; mem_relation
  (assert
  (forall ((u (set f)) (v (set (tuple21 a b))) (r (set (tuple21 f (tuple21 a
  b)))))
  (= (mem (set1 (tuple2 f1 (tuple2 a1 b1))) (t2tb3292 r)
  (relation (tuple2 a1 b1) f1 (t2tb2946 u) (t2tb11 v)))
  (forall ((x f) (y (tuple21 a b)))
  (=> (mem (tuple2 f1 (tuple2 a1 b1))
  (Tuple2 f1 (tuple2 a1 b1) (t2tb2954 x) (t2tb13 y)) (t2tb3292 r))
  (and (mem37 x u) (mem3 y v)))))))

(declare-fun t2tb3756 ((set (set (tuple21 f b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 f b))))) (sort (set1 (set1 (tuple2 f1 b1)))
  (t2tb3756 x))))

(declare-fun tb2t3756 (uni) (set (set (tuple21 f b))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 f b)))))
  (! (= (tb2t3756 (t2tb3756 i)) i) :pattern ((t2tb3756 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 f1 b1))) j) (= (t2tb3756 (tb2t3756 j)) j)) :pattern (
  (t2tb3756 (tb2t3756 j))) )))

;; mem_relation
  (assert
  (forall ((u (set f)) (v (set b)) (r (set (tuple21 f b))))
  (= (mem (set1 (tuple2 f1 b1)) (t2tb3294 r)
  (relation b1 f1 (t2tb2946 u) (t2tb12 v)))
  (forall ((x f) (y b))
  (=> (mem (tuple2 f1 b1) (Tuple2 f1 b1 (t2tb2954 x) (t2tb14 y))
  (t2tb3294 r)) (and (mem37 x u) (mem2 y v)))))))

(declare-fun t2tb3757 ((set (set (tuple21 f a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 f a))))) (sort (set1 (set1 (tuple2 f1 a1)))
  (t2tb3757 x))))

(declare-fun tb2t3757 (uni) (set (set (tuple21 f a))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 f a)))))
  (! (= (tb2t3757 (t2tb3757 i)) i) :pattern ((t2tb3757 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 f1 a1))) j) (= (t2tb3757 (tb2t3757 j)) j)) :pattern (
  (t2tb3757 (tb2t3757 j))) )))

;; mem_relation
  (assert
  (forall ((u (set f)) (v (set a)) (r (set (tuple21 f a))))
  (= (mem (set1 (tuple2 f1 a1)) (t2tb3296 r)
  (relation a1 f1 (t2tb2946 u) (t2tb1 v)))
  (forall ((x f) (y a))
  (=> (mem (tuple2 f1 a1) (Tuple2 f1 a1 (t2tb2954 x) (t2tb2 y)) (t2tb3296 r))
  (and (mem37 x u) (mem1 y v)))))))

;; mem_relation
  (assert
  (forall ((b2 ty))
  (forall ((u (set f)) (v uni) (r uni))
  (and
  (=> (mem (set1 (tuple2 f1 b2)) r (relation b2 f1 (t2tb2946 u) v))
  (forall ((x f) (y uni))
  (=> (mem (tuple2 f1 b2) (Tuple2 f1 b2 (t2tb2954 x) y) r)
  (and (mem37 x u) (mem b2 y v)))))
  (=>
  (forall ((x f) (y uni))
  (=> (sort b2 y)
  (=> (mem (tuple2 f1 b2) (Tuple2 f1 b2 (t2tb2954 x) y) r)
  (and (mem37 x u) (mem b2 y v))))) (mem (set1 (tuple2 f1 b2)) r
  (relation b2 f1 (t2tb2946 u) v)))))))

(declare-fun t2tb3758 ((set (set (tuple21 e (tuple21 c f))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 e (tuple21 c f)))))) (sort
  (set1 (set1 (tuple2 e1 (tuple2 c1 f1)))) (t2tb3758 x))))

(declare-fun tb2t3758 (uni) (set (set (tuple21 e (tuple21 c f)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 e (tuple21 c f))))))
  (! (= (tb2t3758 (t2tb3758 i)) i) :pattern ((t2tb3758 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 e1 (tuple2 c1 f1)))) j)
     (= (t2tb3758 (tb2t3758 j)) j)) :pattern ((t2tb3758 (tb2t3758 j))) )))

;; mem_relation
  (assert
  (forall ((u (set e)) (v (set (tuple21 c f))) (r (set (tuple21 e (tuple21 c
  f)))))
  (= (mem (set1 (tuple2 e1 (tuple2 c1 f1))) (t2tb3298 r)
  (relation (tuple2 c1 f1) e1 (t2tb2947 u) (t2tb2942 v)))
  (forall ((x e) (y (tuple21 c f)))
  (=> (mem (tuple2 e1 (tuple2 c1 f1))
  (Tuple2 e1 (tuple2 c1 f1) (t2tb2955 x) (t2tb2948 y)) (t2tb3298 r))
  (and (mem36 x u) (mem45 y v)))))))

(declare-fun t2tb3759 ((set (set (tuple21 e (tuple21 a e))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 e (tuple21 a e)))))) (sort
  (set1 (set1 (tuple2 e1 (tuple2 a1 e1)))) (t2tb3759 x))))

(declare-fun tb2t3759 (uni) (set (set (tuple21 e (tuple21 a e)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 e (tuple21 a e))))))
  (! (= (tb2t3759 (t2tb3759 i)) i) :pattern ((t2tb3759 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 e1 (tuple2 a1 e1)))) j)
     (= (t2tb3759 (tb2t3759 j)) j)) :pattern ((t2tb3759 (tb2t3759 j))) )))

;; mem_relation
  (assert
  (forall ((u (set e)) (v (set (tuple21 a e))) (r (set (tuple21 e (tuple21 a
  e)))))
  (= (mem (set1 (tuple2 e1 (tuple2 a1 e1))) (t2tb3300 r)
  (relation (tuple2 a1 e1) e1 (t2tb2947 u) (t2tb2943 v)))
  (forall ((x e) (y (tuple21 a e)))
  (=> (mem (tuple2 e1 (tuple2 a1 e1))
  (Tuple2 e1 (tuple2 a1 e1) (t2tb2955 x) (t2tb2949 y)) (t2tb3300 r))
  (and (mem36 x u) (mem44 y v)))))))

(declare-fun t2tb3760 ((set (set (tuple21 e (tuple21 (tuple21 b d) (tuple21 e
  f)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 e (tuple21 (tuple21 b d) (tuple21 e f)))))))
  (sort (set1 (set1 (tuple2 e1 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)))))
  (t2tb3760 x))))

(declare-fun tb2t3760 (uni) (set (set (tuple21 e (tuple21 (tuple21 b d)
  (tuple21 e f))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 e (tuple21 (tuple21 b d) (tuple21 e f)))))))
  (! (= (tb2t3760 (t2tb3760 i)) i) :pattern ((t2tb3760 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 e1 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1))))) j)
     (= (t2tb3760 (tb2t3760 j)) j)) :pattern ((t2tb3760 (tb2t3760 j))) )))

;; mem_relation
  (assert
  (forall ((u (set e)) (v (set (tuple21 (tuple21 b d) (tuple21 e f))))
  (r (set (tuple21 e (tuple21 (tuple21 b d) (tuple21 e f))))))
  (= (mem (set1 (tuple2 e1 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1))))
  (t2tb3302 r)
  (relation (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) e1 (t2tb2947 u)
  (t2tb2944 v)))
  (forall ((x e) (y (tuple21 (tuple21 b d) (tuple21 e f))))
  (=> (mem (tuple2 e1 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)))
  (Tuple2 e1 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (t2tb2955 x)
  (t2tb2950 y)) (t2tb3302 r)) (and (mem36 x u) (mem43 y v)))))))

(declare-fun t2tb3761 ((set (set (tuple21 e (tuple21 (tuple21 a c) (tuple21 e
  f)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 e (tuple21 (tuple21 a c) (tuple21 e f)))))))
  (sort (set1 (set1 (tuple2 e1 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)))))
  (t2tb3761 x))))

(declare-fun tb2t3761 (uni) (set (set (tuple21 e (tuple21 (tuple21 a c)
  (tuple21 e f))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 e (tuple21 (tuple21 a c) (tuple21 e f)))))))
  (! (= (tb2t3761 (t2tb3761 i)) i) :pattern ((t2tb3761 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 e1 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1))))) j)
     (= (t2tb3761 (tb2t3761 j)) j)) :pattern ((t2tb3761 (tb2t3761 j))) )))

;; mem_relation
  (assert
  (forall ((u (set e)) (v (set (tuple21 (tuple21 a c) (tuple21 e f))))
  (r (set (tuple21 e (tuple21 (tuple21 a c) (tuple21 e f))))))
  (= (mem (set1 (tuple2 e1 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1))))
  (t2tb3304 r)
  (relation (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) e1 (t2tb2947 u)
  (t2tb2945 v)))
  (forall ((x e) (y (tuple21 (tuple21 a c) (tuple21 e f))))
  (=> (mem (tuple2 e1 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)))
  (Tuple2 e1 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (t2tb2955 x)
  (t2tb2951 y)) (t2tb3304 r)) (and (mem36 x u) (mem42 y v)))))))

(declare-fun t2tb3762 ((set (set (tuple21 e (set (tuple21 d f)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 e (set (tuple21 d f))))))) (sort
  (set1 (set1 (tuple2 e1 (set1 (tuple2 d1 f1))))) (t2tb3762 x))))

(declare-fun tb2t3762 (uni) (set (set (tuple21 e (set (tuple21 d f))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 e (set (tuple21 d f)))))))
  (! (= (tb2t3762 (t2tb3762 i)) i) :pattern ((t2tb3762 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 e1 (set1 (tuple2 d1 f1))))) j)
     (= (t2tb3762 (tb2t3762 j)) j)) :pattern ((t2tb3762 (tb2t3762 j))) )))

;; mem_relation
  (assert
  (forall ((u (set e)) (v (set (set (tuple21 d f)))) (r (set (tuple21 e
  (set (tuple21 d f))))))
  (= (mem (set1 (tuple2 e1 (set1 (tuple2 d1 f1)))) (t2tb3306 r)
  (relation (set1 (tuple2 d1 f1)) e1 (t2tb2947 u) (t2tb2939 v)))
  (forall ((x e) (y (set (tuple21 d f))))
  (=> (mem (tuple2 e1 (set1 (tuple2 d1 f1)))
  (Tuple2 e1 (set1 (tuple2 d1 f1)) (t2tb2955 x) (t2tb2938 y)) (t2tb3306 r))
  (and (mem36 x u) (mem41 y v)))))))

(declare-fun t2tb3763 ((set (set (tuple21 e (tuple21 d f))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 e (tuple21 d f)))))) (sort
  (set1 (set1 (tuple2 e1 (tuple2 d1 f1)))) (t2tb3763 x))))

(declare-fun tb2t3763 (uni) (set (set (tuple21 e (tuple21 d f)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 e (tuple21 d f))))))
  (! (= (tb2t3763 (t2tb3763 i)) i) :pattern ((t2tb3763 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 e1 (tuple2 d1 f1)))) j)
     (= (t2tb3763 (tb2t3763 j)) j)) :pattern ((t2tb3763 (tb2t3763 j))) )))

;; mem_relation
  (assert
  (forall ((u (set e)) (v (set (tuple21 d f))) (r (set (tuple21 e (tuple21 d
  f)))))
  (= (mem (set1 (tuple2 e1 (tuple2 d1 f1))) (t2tb3308 r)
  (relation (tuple2 d1 f1) e1 (t2tb2947 u) (t2tb2938 v)))
  (forall ((x e) (y (tuple21 d f)))
  (=> (mem (tuple2 e1 (tuple2 d1 f1))
  (Tuple2 e1 (tuple2 d1 f1) (t2tb2955 x) (t2tb2952 y)) (t2tb3308 r))
  (and (mem36 x u) (mem40 y v)))))))

(declare-fun t2tb3764 ((set (set (tuple21 e (set (tuple21 b e)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 e (set (tuple21 b e))))))) (sort
  (set1 (set1 (tuple2 e1 (set1 (tuple2 b1 e1))))) (t2tb3764 x))))

(declare-fun tb2t3764 (uni) (set (set (tuple21 e (set (tuple21 b e))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 e (set (tuple21 b e)))))))
  (! (= (tb2t3764 (t2tb3764 i)) i) :pattern ((t2tb3764 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 e1 (set1 (tuple2 b1 e1))))) j)
     (= (t2tb3764 (tb2t3764 j)) j)) :pattern ((t2tb3764 (tb2t3764 j))) )))

;; mem_relation
  (assert
  (forall ((u (set e)) (v (set (set (tuple21 b e)))) (r (set (tuple21 e
  (set (tuple21 b e))))))
  (= (mem (set1 (tuple2 e1 (set1 (tuple2 b1 e1)))) (t2tb3310 r)
  (relation (set1 (tuple2 b1 e1)) e1 (t2tb2947 u) (t2tb2941 v)))
  (forall ((x e) (y (set (tuple21 b e))))
  (=> (mem (tuple2 e1 (set1 (tuple2 b1 e1)))
  (Tuple2 e1 (set1 (tuple2 b1 e1)) (t2tb2955 x) (t2tb2940 y)) (t2tb3310 r))
  (and (mem36 x u) (mem39 y v)))))))

(declare-fun t2tb3765 ((set (set (tuple21 e (tuple21 b e))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 e (tuple21 b e)))))) (sort
  (set1 (set1 (tuple2 e1 (tuple2 b1 e1)))) (t2tb3765 x))))

(declare-fun tb2t3765 (uni) (set (set (tuple21 e (tuple21 b e)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 e (tuple21 b e))))))
  (! (= (tb2t3765 (t2tb3765 i)) i) :pattern ((t2tb3765 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 e1 (tuple2 b1 e1)))) j)
     (= (t2tb3765 (tb2t3765 j)) j)) :pattern ((t2tb3765 (tb2t3765 j))) )))

;; mem_relation
  (assert
  (forall ((u (set e)) (v (set (tuple21 b e))) (r (set (tuple21 e (tuple21 b
  e)))))
  (= (mem (set1 (tuple2 e1 (tuple2 b1 e1))) (t2tb3312 r)
  (relation (tuple2 b1 e1) e1 (t2tb2947 u) (t2tb2940 v)))
  (forall ((x e) (y (tuple21 b e)))
  (=> (mem (tuple2 e1 (tuple2 b1 e1))
  (Tuple2 e1 (tuple2 b1 e1) (t2tb2955 x) (t2tb2953 y)) (t2tb3312 r))
  (and (mem36 x u) (mem38 y v)))))))

(declare-fun t2tb3766 ((set (set (tuple21 e f)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 e f))))) (sort (set1 (set1 (tuple2 e1 f1)))
  (t2tb3766 x))))

(declare-fun tb2t3766 (uni) (set (set (tuple21 e f))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 e f)))))
  (! (= (tb2t3766 (t2tb3766 i)) i) :pattern ((t2tb3766 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 e1 f1))) j) (= (t2tb3766 (tb2t3766 j)) j)) :pattern (
  (t2tb3766 (tb2t3766 j))) )))

;; mem_relation
  (assert
  (forall ((u (set e)) (v (set f)) (r (set (tuple21 e f))))
  (= (mem (set1 (tuple2 e1 f1)) (t2tb3314 r)
  (relation f1 e1 (t2tb2947 u) (t2tb2946 v)))
  (forall ((x e) (y f))
  (=> (mem (tuple2 e1 f1) (Tuple2 e1 f1 (t2tb2955 x) (t2tb2954 y))
  (t2tb3314 r)) (and (mem36 x u) (mem37 y v)))))))

(declare-fun t2tb3767 ((set (set (tuple21 e e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 e e))))) (sort (set1 (set1 (tuple2 e1 e1)))
  (t2tb3767 x))))

(declare-fun tb2t3767 (uni) (set (set (tuple21 e e))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 e e)))))
  (! (= (tb2t3767 (t2tb3767 i)) i) :pattern ((t2tb3767 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 e1 e1))) j) (= (t2tb3767 (tb2t3767 j)) j)) :pattern (
  (t2tb3767 (tb2t3767 j))) )))

;; mem_relation
  (assert
  (forall ((u (set e)) (v (set e)) (r (set (tuple21 e e))))
  (= (mem (set1 (tuple2 e1 e1)) (t2tb3316 r)
  (relation e1 e1 (t2tb2947 u) (t2tb2947 v)))
  (forall ((x e) (y e))
  (=> (mem (tuple2 e1 e1) (Tuple2 e1 e1 (t2tb2955 x) (t2tb2955 y))
  (t2tb3316 r)) (and (mem36 x u) (mem36 y v)))))))

(declare-fun t2tb3768 ((set (set (tuple21 e (tuple21 (tuple21 a c) (tuple21 b
  d)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 e (tuple21 (tuple21 a c) (tuple21 b d)))))))
  (sort (set1 (set1 (tuple2 e1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))))
  (t2tb3768 x))))

(declare-fun tb2t3768 (uni) (set (set (tuple21 e (tuple21 (tuple21 a c)
  (tuple21 b d))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 e (tuple21 (tuple21 a c) (tuple21 b d)))))))
  (! (= (tb2t3768 (t2tb3768 i)) i) :pattern ((t2tb3768 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 e1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))))) j)
     (= (t2tb3768 (tb2t3768 j)) j)) :pattern ((t2tb3768 (tb2t3768 j))) )))

;; mem_relation
  (assert
  (forall ((u (set e)) (v (set (tuple21 (tuple21 a c) (tuple21 b d))))
  (r (set (tuple21 e (tuple21 (tuple21 a c) (tuple21 b d))))))
  (= (mem (set1 (tuple2 e1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))))
  (t2tb3318 r)
  (relation (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) e1 (t2tb2947 u)
  (t2tb686 v)))
  (forall ((x e) (y (tuple21 (tuple21 a c) (tuple21 b d))))
  (=> (mem (tuple2 e1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
  (Tuple2 e1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb2955 x) (t2tb691 y))
  (t2tb3318 r)) (and (mem36 x u) (mem24 y v)))))))

(declare-fun t2tb3769 ((set (set (tuple21 e (set (tuple21 c d)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 e (set (tuple21 c d))))))) (sort
  (set1 (set1 (tuple2 e1 (set1 (tuple2 c1 d1))))) (t2tb3769 x))))

(declare-fun tb2t3769 (uni) (set (set (tuple21 e (set (tuple21 c d))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 e (set (tuple21 c d)))))))
  (! (= (tb2t3769 (t2tb3769 i)) i) :pattern ((t2tb3769 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 e1 (set1 (tuple2 c1 d1))))) j)
     (= (t2tb3769 (tb2t3769 j)) j)) :pattern ((t2tb3769 (tb2t3769 j))) )))

;; mem_relation
  (assert
  (forall ((u (set e)) (v (set (set (tuple21 c d)))) (r (set (tuple21 e
  (set (tuple21 c d))))))
  (= (mem (set1 (tuple2 e1 (set1 (tuple2 c1 d1)))) (t2tb3320 r)
  (relation (set1 (tuple2 c1 d1)) e1 (t2tb2947 u) (t2tb688 v)))
  (forall ((x e) (y (set (tuple21 c d))))
  (=> (mem (tuple2 e1 (set1 (tuple2 c1 d1)))
  (Tuple2 e1 (set1 (tuple2 c1 d1)) (t2tb2955 x) (t2tb689 y)) (t2tb3320 r))
  (and (mem36 x u) (mem22 y v)))))))

(declare-fun t2tb3770 ((set (set (tuple21 e (tuple21 c d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 e (tuple21 c d)))))) (sort
  (set1 (set1 (tuple2 e1 (tuple2 c1 d1)))) (t2tb3770 x))))

(declare-fun tb2t3770 (uni) (set (set (tuple21 e (tuple21 c d)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 e (tuple21 c d))))))
  (! (= (tb2t3770 (t2tb3770 i)) i) :pattern ((t2tb3770 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 e1 (tuple2 c1 d1)))) j)
     (= (t2tb3770 (tb2t3770 j)) j)) :pattern ((t2tb3770 (tb2t3770 j))) )))

;; mem_relation
  (assert
  (forall ((u (set e)) (v (set (tuple21 c d))) (r (set (tuple21 e (tuple21 c
  d)))))
  (= (mem (set1 (tuple2 e1 (tuple2 c1 d1))) (t2tb3322 r)
  (relation (tuple2 c1 d1) e1 (t2tb2947 u) (t2tb689 v)))
  (forall ((x e) (y (tuple21 c d)))
  (=> (mem (tuple2 e1 (tuple2 c1 d1))
  (Tuple2 e1 (tuple2 c1 d1) (t2tb2955 x) (t2tb693 y)) (t2tb3322 r))
  (and (mem36 x u) (mem21 y v)))))))

(declare-fun t2tb3771 ((set (set (tuple21 e d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 e d))))) (sort (set1 (set1 (tuple2 e1 d1)))
  (t2tb3771 x))))

(declare-fun tb2t3771 (uni) (set (set (tuple21 e d))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 e d)))))
  (! (= (tb2t3771 (t2tb3771 i)) i) :pattern ((t2tb3771 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 e1 d1))) j) (= (t2tb3771 (tb2t3771 j)) j)) :pattern (
  (t2tb3771 (tb2t3771 j))) )))

;; mem_relation
  (assert
  (forall ((u (set e)) (v (set d)) (r (set (tuple21 e d))))
  (= (mem (set1 (tuple2 e1 d1)) (t2tb3324 r)
  (relation d1 e1 (t2tb2947 u) (t2tb690 v)))
  (forall ((x e) (y d))
  (=> (mem (tuple2 e1 d1) (Tuple2 e1 d1 (t2tb2955 x) (t2tb694 y))
  (t2tb3324 r)) (and (mem36 x u) (mem20 y v)))))))

(declare-fun t2tb3772 ((set (set (tuple21 e c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 e c))))) (sort (set1 (set1 (tuple2 e1 c1)))
  (t2tb3772 x))))

(declare-fun tb2t3772 (uni) (set (set (tuple21 e c))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 e c)))))
  (! (= (tb2t3772 (t2tb3772 i)) i) :pattern ((t2tb3772 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 e1 c1))) j) (= (t2tb3772 (tb2t3772 j)) j)) :pattern (
  (t2tb3772 (tb2t3772 j))) )))

;; mem_relation
  (assert
  (forall ((u (set e)) (v (set c)) (r (set (tuple21 e c))))
  (= (mem (set1 (tuple2 e1 c1)) (t2tb3326 r)
  (relation c1 e1 (t2tb2947 u) (t2tb132 v)))
  (forall ((x e) (y c))
  (=> (mem (tuple2 e1 c1) (Tuple2 e1 c1 (t2tb2955 x) (t2tb135 y))
  (t2tb3326 r)) (and (mem36 x u) (mem7 y v)))))))

(declare-fun t2tb3773 ((set (set (tuple21 e (set (tuple21 a b)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 e (set (tuple21 a b))))))) (sort
  (set1 (set1 (tuple2 e1 (set1 (tuple2 a1 b1))))) (t2tb3773 x))))

(declare-fun tb2t3773 (uni) (set (set (tuple21 e (set (tuple21 a b))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 e (set (tuple21 a b)))))))
  (! (= (tb2t3773 (t2tb3773 i)) i) :pattern ((t2tb3773 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 e1 (set1 (tuple2 a1 b1))))) j)
     (= (t2tb3773 (tb2t3773 j)) j)) :pattern ((t2tb3773 (tb2t3773 j))) )))

;; mem_relation
  (assert
  (forall ((u (set e)) (v (set (set (tuple21 a b)))) (r (set (tuple21 e
  (set (tuple21 a b))))))
  (= (mem (set1 (tuple2 e1 (set1 (tuple2 a1 b1)))) (t2tb3328 r)
  (relation (set1 (tuple2 a1 b1)) e1 (t2tb2947 u) (t2tb10 v)))
  (forall ((x e) (y (set (tuple21 a b))))
  (=> (mem (tuple2 e1 (set1 (tuple2 a1 b1)))
  (Tuple2 e1 (set1 (tuple2 a1 b1)) (t2tb2955 x) (t2tb11 y)) (t2tb3328 r))
  (and (mem36 x u) (mem4 y v)))))))

(declare-fun t2tb3774 ((set (set (tuple21 e (tuple21 a b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 e (tuple21 a b)))))) (sort
  (set1 (set1 (tuple2 e1 (tuple2 a1 b1)))) (t2tb3774 x))))

(declare-fun tb2t3774 (uni) (set (set (tuple21 e (tuple21 a b)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 e (tuple21 a b))))))
  (! (= (tb2t3774 (t2tb3774 i)) i) :pattern ((t2tb3774 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 e1 (tuple2 a1 b1)))) j)
     (= (t2tb3774 (tb2t3774 j)) j)) :pattern ((t2tb3774 (tb2t3774 j))) )))

;; mem_relation
  (assert
  (forall ((u (set e)) (v (set (tuple21 a b))) (r (set (tuple21 e (tuple21 a
  b)))))
  (= (mem (set1 (tuple2 e1 (tuple2 a1 b1))) (t2tb3330 r)
  (relation (tuple2 a1 b1) e1 (t2tb2947 u) (t2tb11 v)))
  (forall ((x e) (y (tuple21 a b)))
  (=> (mem (tuple2 e1 (tuple2 a1 b1))
  (Tuple2 e1 (tuple2 a1 b1) (t2tb2955 x) (t2tb13 y)) (t2tb3330 r))
  (and (mem36 x u) (mem3 y v)))))))

(declare-fun t2tb3775 ((set (set (tuple21 e b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 e b))))) (sort (set1 (set1 (tuple2 e1 b1)))
  (t2tb3775 x))))

(declare-fun tb2t3775 (uni) (set (set (tuple21 e b))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 e b)))))
  (! (= (tb2t3775 (t2tb3775 i)) i) :pattern ((t2tb3775 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 e1 b1))) j) (= (t2tb3775 (tb2t3775 j)) j)) :pattern (
  (t2tb3775 (tb2t3775 j))) )))

;; mem_relation
  (assert
  (forall ((u (set e)) (v (set b)) (r (set (tuple21 e b))))
  (= (mem (set1 (tuple2 e1 b1)) (t2tb3332 r)
  (relation b1 e1 (t2tb2947 u) (t2tb12 v)))
  (forall ((x e) (y b))
  (=> (mem (tuple2 e1 b1) (Tuple2 e1 b1 (t2tb2955 x) (t2tb14 y))
  (t2tb3332 r)) (and (mem36 x u) (mem2 y v)))))))

(declare-fun t2tb3776 ((set (set (tuple21 e a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 e a))))) (sort (set1 (set1 (tuple2 e1 a1)))
  (t2tb3776 x))))

(declare-fun tb2t3776 (uni) (set (set (tuple21 e a))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 e a)))))
  (! (= (tb2t3776 (t2tb3776 i)) i) :pattern ((t2tb3776 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 e1 a1))) j) (= (t2tb3776 (tb2t3776 j)) j)) :pattern (
  (t2tb3776 (tb2t3776 j))) )))

;; mem_relation
  (assert
  (forall ((u (set e)) (v (set a)) (r (set (tuple21 e a))))
  (= (mem (set1 (tuple2 e1 a1)) (t2tb3334 r)
  (relation a1 e1 (t2tb2947 u) (t2tb1 v)))
  (forall ((x e) (y a))
  (=> (mem (tuple2 e1 a1) (Tuple2 e1 a1 (t2tb2955 x) (t2tb2 y)) (t2tb3334 r))
  (and (mem36 x u) (mem1 y v)))))))

;; mem_relation
  (assert
  (forall ((b2 ty))
  (forall ((u (set e)) (v uni) (r uni))
  (and
  (=> (mem (set1 (tuple2 e1 b2)) r (relation b2 e1 (t2tb2947 u) v))
  (forall ((x e) (y uni))
  (=> (mem (tuple2 e1 b2) (Tuple2 e1 b2 (t2tb2955 x) y) r)
  (and (mem36 x u) (mem b2 y v)))))
  (=>
  (forall ((x e) (y uni))
  (=> (sort b2 y)
  (=> (mem (tuple2 e1 b2) (Tuple2 e1 b2 (t2tb2955 x) y) r)
  (and (mem36 x u) (mem b2 y v))))) (mem (set1 (tuple2 e1 b2)) r
  (relation b2 e1 (t2tb2947 u) v)))))))

(declare-fun t2tb3777 ((set (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b
  d)) (tuple21 c f))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  (tuple21 c f)))))) (sort
  (set1
  (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 c1 f1))))
  (t2tb3777 x))))

(declare-fun tb2t3777 (uni) (set (set (tuple21 (tuple21 (tuple21 a c)
  (tuple21 b d)) (tuple21 c f)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  (tuple21 c f))))))
  (! (= (tb2t3777 (t2tb3777 i)) i) :pattern ((t2tb3777 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 c1 f1))))
     j) (= (t2tb3777 (tb2t3777 j)) j)) :pattern ((t2tb3777 (tb2t3777 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 (tuple21 a c) (tuple21 b d)))) (v (set (tuple21 c
  f))) (r (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) (tuple21 c
  f)))))
  (= (mem
  (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 c1 f1)))
  (t2tb3336 r)
  (relation (tuple2 c1 f1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb686 u)
  (t2tb2942 v)))
  (forall ((x (tuple21 (tuple21 a c) (tuple21 b d))) (y (tuple21 c f)))
  (=> (mem (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 c1 f1))
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 c1 f1) (t2tb691 x)
  (t2tb2948 y)) (t2tb3336 r)) (and (mem24 x u) (mem45 y v)))))))

(declare-fun t2tb3778 ((set (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b
  d)) (tuple21 a e))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  (tuple21 a e)))))) (sort
  (set1
  (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 a1 e1))))
  (t2tb3778 x))))

(declare-fun tb2t3778 (uni) (set (set (tuple21 (tuple21 (tuple21 a c)
  (tuple21 b d)) (tuple21 a e)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  (tuple21 a e))))))
  (! (= (tb2t3778 (t2tb3778 i)) i) :pattern ((t2tb3778 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 a1 e1))))
     j) (= (t2tb3778 (tb2t3778 j)) j)) :pattern ((t2tb3778 (tb2t3778 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 (tuple21 a c) (tuple21 b d)))) (v (set (tuple21 a
  e))) (r (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) (tuple21 a
  e)))))
  (= (mem
  (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 a1 e1)))
  (t2tb3338 r)
  (relation (tuple2 a1 e1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb686 u)
  (t2tb2943 v)))
  (forall ((x (tuple21 (tuple21 a c) (tuple21 b d))) (y (tuple21 a e)))
  (=> (mem (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 a1 e1))
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 a1 e1) (t2tb691 x)
  (t2tb2949 y)) (t2tb3338 r)) (and (mem24 x u) (mem44 y v)))))))

(declare-fun t2tb3779 ((set (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b
  d)) (tuple21 (tuple21 b d) (tuple21 e f)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  (tuple21 (tuple21 b d) (tuple21 e f))))))) (sort
  (set1
  (set1
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))
  (tuple2 (tuple2 b1 d1) (tuple2 e1 f1))))) (t2tb3779 x))))

(declare-fun tb2t3779 (uni) (set (set (tuple21 (tuple21 (tuple21 a c)
  (tuple21 b d)) (tuple21 (tuple21 b d) (tuple21 e f))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  (tuple21 (tuple21 b d) (tuple21 e f)))))))
  (! (= (tb2t3779 (t2tb3779 i)) i) :pattern ((t2tb3779 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (set1
     (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))
     (tuple2 (tuple2 b1 d1) (tuple2 e1 f1))))) j)
     (= (t2tb3779 (tb2t3779 j)) j)) :pattern ((t2tb3779 (tb2t3779 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 (tuple21 a c) (tuple21 b d))))
  (v (set (tuple21 (tuple21 b d) (tuple21 e f))))
  (r (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) (tuple21 (tuple21 b
  d) (tuple21 e f))))))
  (= (mem
  (set1
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))
  (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)))) (t2tb3340 r)
  (relation (tuple2 (tuple2 b1 d1) (tuple2 e1 f1))
  (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb686 u) (t2tb2944 v)))
  (forall ((x (tuple21 (tuple21 a c) (tuple21 b d))) (y (tuple21 (tuple21 b
  d) (tuple21 e f))))
  (=> (mem
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))
  (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)))
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))
  (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (t2tb691 x) (t2tb2950 y))
  (t2tb3340 r)) (and (mem24 x u) (mem43 y v)))))))

(declare-fun t2tb3780 ((set (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b
  d)) (tuple21 (tuple21 a c) (tuple21 e f)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  (tuple21 (tuple21 a c) (tuple21 e f))))))) (sort
  (set1
  (set1
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))
  (tuple2 (tuple2 a1 c1) (tuple2 e1 f1))))) (t2tb3780 x))))

(declare-fun tb2t3780 (uni) (set (set (tuple21 (tuple21 (tuple21 a c)
  (tuple21 b d)) (tuple21 (tuple21 a c) (tuple21 e f))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  (tuple21 (tuple21 a c) (tuple21 e f)))))))
  (! (= (tb2t3780 (t2tb3780 i)) i) :pattern ((t2tb3780 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (set1
     (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))
     (tuple2 (tuple2 a1 c1) (tuple2 e1 f1))))) j)
     (= (t2tb3780 (tb2t3780 j)) j)) :pattern ((t2tb3780 (tb2t3780 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 (tuple21 a c) (tuple21 b d))))
  (v (set (tuple21 (tuple21 a c) (tuple21 e f))))
  (r (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) (tuple21 (tuple21 a
  c) (tuple21 e f))))))
  (= (mem
  (set1
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))
  (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)))) (t2tb3342 r)
  (relation (tuple2 (tuple2 a1 c1) (tuple2 e1 f1))
  (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb686 u) (t2tb2945 v)))
  (forall ((x (tuple21 (tuple21 a c) (tuple21 b d))) (y (tuple21 (tuple21 a
  c) (tuple21 e f))))
  (=> (mem
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))
  (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)))
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))
  (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (t2tb691 x) (t2tb2951 y))
  (t2tb3342 r)) (and (mem24 x u) (mem42 y v)))))))

(declare-fun t2tb3781 ((set (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b
  d)) (set (tuple21 d f)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  (set (tuple21 d f))))))) (sort
  (set1
  (set1
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (set1 (tuple2 d1 f1)))))
  (t2tb3781 x))))

(declare-fun tb2t3781 (uni) (set (set (tuple21 (tuple21 (tuple21 a c)
  (tuple21 b d)) (set (tuple21 d f))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  (set (tuple21 d f)))))))
  (! (= (tb2t3781 (t2tb3781 i)) i) :pattern ((t2tb3781 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (set1
     (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (set1 (tuple2 d1 f1)))))
     j) (= (t2tb3781 (tb2t3781 j)) j)) :pattern ((t2tb3781 (tb2t3781 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 (tuple21 a c) (tuple21 b d))))
  (v (set (set (tuple21 d f)))) (r (set (tuple21 (tuple21 (tuple21 a c)
  (tuple21 b d)) (set (tuple21 d f))))))
  (= (mem
  (set1
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (set1 (tuple2 d1 f1))))
  (t2tb3344 r)
  (relation (set1 (tuple2 d1 f1)) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))
  (t2tb686 u) (t2tb2939 v)))
  (forall ((x (tuple21 (tuple21 a c) (tuple21 b d))) (y (set (tuple21 d f))))
  (=> (mem
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (set1 (tuple2 d1 f1)))
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (set1 (tuple2 d1 f1))
  (t2tb691 x) (t2tb2938 y)) (t2tb3344 r)) (and (mem24 x u) (mem41 y v)))))))

(declare-fun t2tb3782 ((set (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b
  d)) (tuple21 d f))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  (tuple21 d f)))))) (sort
  (set1
  (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 d1 f1))))
  (t2tb3782 x))))

(declare-fun tb2t3782 (uni) (set (set (tuple21 (tuple21 (tuple21 a c)
  (tuple21 b d)) (tuple21 d f)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  (tuple21 d f))))))
  (! (= (tb2t3782 (t2tb3782 i)) i) :pattern ((t2tb3782 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 d1 f1))))
     j) (= (t2tb3782 (tb2t3782 j)) j)) :pattern ((t2tb3782 (tb2t3782 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 (tuple21 a c) (tuple21 b d)))) (v (set (tuple21 d
  f))) (r (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) (tuple21 d
  f)))))
  (= (mem
  (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 d1 f1)))
  (t2tb3346 r)
  (relation (tuple2 d1 f1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb686 u)
  (t2tb2938 v)))
  (forall ((x (tuple21 (tuple21 a c) (tuple21 b d))) (y (tuple21 d f)))
  (=> (mem (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 d1 f1))
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 d1 f1) (t2tb691 x)
  (t2tb2952 y)) (t2tb3346 r)) (and (mem24 x u) (mem40 y v)))))))

(declare-fun t2tb3783 ((set (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b
  d)) (set (tuple21 b e)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  (set (tuple21 b e))))))) (sort
  (set1
  (set1
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (set1 (tuple2 b1 e1)))))
  (t2tb3783 x))))

(declare-fun tb2t3783 (uni) (set (set (tuple21 (tuple21 (tuple21 a c)
  (tuple21 b d)) (set (tuple21 b e))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  (set (tuple21 b e)))))))
  (! (= (tb2t3783 (t2tb3783 i)) i) :pattern ((t2tb3783 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (set1
     (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (set1 (tuple2 b1 e1)))))
     j) (= (t2tb3783 (tb2t3783 j)) j)) :pattern ((t2tb3783 (tb2t3783 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 (tuple21 a c) (tuple21 b d))))
  (v (set (set (tuple21 b e)))) (r (set (tuple21 (tuple21 (tuple21 a c)
  (tuple21 b d)) (set (tuple21 b e))))))
  (= (mem
  (set1
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (set1 (tuple2 b1 e1))))
  (t2tb3348 r)
  (relation (set1 (tuple2 b1 e1)) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))
  (t2tb686 u) (t2tb2941 v)))
  (forall ((x (tuple21 (tuple21 a c) (tuple21 b d))) (y (set (tuple21 b e))))
  (=> (mem
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (set1 (tuple2 b1 e1)))
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (set1 (tuple2 b1 e1))
  (t2tb691 x) (t2tb2940 y)) (t2tb3348 r)) (and (mem24 x u) (mem39 y v)))))))

(declare-fun t2tb3784 ((set (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b
  d)) (tuple21 b e))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  (tuple21 b e)))))) (sort
  (set1
  (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 b1 e1))))
  (t2tb3784 x))))

(declare-fun tb2t3784 (uni) (set (set (tuple21 (tuple21 (tuple21 a c)
  (tuple21 b d)) (tuple21 b e)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  (tuple21 b e))))))
  (! (= (tb2t3784 (t2tb3784 i)) i) :pattern ((t2tb3784 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 b1 e1))))
     j) (= (t2tb3784 (tb2t3784 j)) j)) :pattern ((t2tb3784 (tb2t3784 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 (tuple21 a c) (tuple21 b d)))) (v (set (tuple21 b
  e))) (r (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) (tuple21 b
  e)))))
  (= (mem
  (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 b1 e1)))
  (t2tb3350 r)
  (relation (tuple2 b1 e1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb686 u)
  (t2tb2940 v)))
  (forall ((x (tuple21 (tuple21 a c) (tuple21 b d))) (y (tuple21 b e)))
  (=> (mem (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 b1 e1))
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 b1 e1) (t2tb691 x)
  (t2tb2953 y)) (t2tb3350 r)) (and (mem24 x u) (mem38 y v)))))))

(declare-fun t2tb3785 ((set (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b
  d)) f)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) f)))))
  (sort (set1 (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) f1)))
  (t2tb3785 x))))

(declare-fun tb2t3785 (uni) (set (set (tuple21 (tuple21 (tuple21 a c)
  (tuple21 b d)) f))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) f)))))
  (! (= (tb2t3785 (t2tb3785 i)) i) :pattern ((t2tb3785 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) f1))) j)
     (= (t2tb3785 (tb2t3785 j)) j)) :pattern ((t2tb3785 (tb2t3785 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 (tuple21 a c) (tuple21 b d)))) (v (set f))
  (r (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) f))))
  (= (mem (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) f1))
  (t2tb3352 r)
  (relation f1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb686 u)
  (t2tb2946 v)))
  (forall ((x (tuple21 (tuple21 a c) (tuple21 b d))) (y f))
  (=> (mem (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) f1)
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) f1 (t2tb691 x) (t2tb2954 y))
  (t2tb3352 r)) (and (mem24 x u) (mem37 y v)))))))

(declare-fun t2tb3786 ((set (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b
  d)) e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) e)))))
  (sort (set1 (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) e1)))
  (t2tb3786 x))))

(declare-fun tb2t3786 (uni) (set (set (tuple21 (tuple21 (tuple21 a c)
  (tuple21 b d)) e))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) e)))))
  (! (= (tb2t3786 (t2tb3786 i)) i) :pattern ((t2tb3786 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) e1))) j)
     (= (t2tb3786 (tb2t3786 j)) j)) :pattern ((t2tb3786 (tb2t3786 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 (tuple21 a c) (tuple21 b d)))) (v (set e))
  (r (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) e))))
  (= (mem (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) e1))
  (t2tb3354 r)
  (relation e1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb686 u)
  (t2tb2947 v)))
  (forall ((x (tuple21 (tuple21 a c) (tuple21 b d))) (y e))
  (=> (mem (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) e1)
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) e1 (t2tb691 x) (t2tb2955 y))
  (t2tb3354 r)) (and (mem24 x u) (mem36 y v)))))))

(declare-fun t2tb3787 ((set (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b
  d)) (tuple21 (tuple21 a c) (tuple21 b d)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  (tuple21 (tuple21 a c) (tuple21 b d))))))) (sort
  (set1
  (set1
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))
  (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))))) (t2tb3787 x))))

(declare-fun tb2t3787 (uni) (set (set (tuple21 (tuple21 (tuple21 a c)
  (tuple21 b d)) (tuple21 (tuple21 a c) (tuple21 b d))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  (tuple21 (tuple21 a c) (tuple21 b d)))))))
  (! (= (tb2t3787 (t2tb3787 i)) i) :pattern ((t2tb3787 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (set1
     (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))
     (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))))) j)
     (= (t2tb3787 (tb2t3787 j)) j)) :pattern ((t2tb3787 (tb2t3787 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 (tuple21 a c) (tuple21 b d))))
  (v (set (tuple21 (tuple21 a c) (tuple21 b d))))
  (r (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) (tuple21 (tuple21 a
  c) (tuple21 b d))))))
  (= (mem
  (set1
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))
  (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))) (t2tb3356 r)
  (relation (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))
  (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb686 u) (t2tb686 v)))
  (forall ((x (tuple21 (tuple21 a c) (tuple21 b d))) (y (tuple21 (tuple21 a
  c) (tuple21 b d))))
  (=> (mem
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))
  (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))
  (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb691 x) (t2tb691 y))
  (t2tb3356 r)) (and (mem24 x u) (mem24 y v)))))))

(declare-fun t2tb3788 ((set (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b
  d)) (set (tuple21 c d)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  (set (tuple21 c d))))))) (sort
  (set1
  (set1
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (set1 (tuple2 c1 d1)))))
  (t2tb3788 x))))

(declare-fun tb2t3788 (uni) (set (set (tuple21 (tuple21 (tuple21 a c)
  (tuple21 b d)) (set (tuple21 c d))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  (set (tuple21 c d)))))))
  (! (= (tb2t3788 (t2tb3788 i)) i) :pattern ((t2tb3788 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (set1
     (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (set1 (tuple2 c1 d1)))))
     j) (= (t2tb3788 (tb2t3788 j)) j)) :pattern ((t2tb3788 (tb2t3788 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 (tuple21 a c) (tuple21 b d))))
  (v (set (set (tuple21 c d)))) (r (set (tuple21 (tuple21 (tuple21 a c)
  (tuple21 b d)) (set (tuple21 c d))))))
  (= (mem
  (set1
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (set1 (tuple2 c1 d1))))
  (t2tb3358 r)
  (relation (set1 (tuple2 c1 d1)) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))
  (t2tb686 u) (t2tb688 v)))
  (forall ((x (tuple21 (tuple21 a c) (tuple21 b d))) (y (set (tuple21 c d))))
  (=> (mem
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (set1 (tuple2 c1 d1)))
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (set1 (tuple2 c1 d1))
  (t2tb691 x) (t2tb689 y)) (t2tb3358 r)) (and (mem24 x u) (mem22 y v)))))))

(declare-fun t2tb3789 ((set (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b
  d)) (tuple21 c d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  (tuple21 c d)))))) (sort
  (set1
  (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 c1 d1))))
  (t2tb3789 x))))

(declare-fun tb2t3789 (uni) (set (set (tuple21 (tuple21 (tuple21 a c)
  (tuple21 b d)) (tuple21 c d)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  (tuple21 c d))))))
  (! (= (tb2t3789 (t2tb3789 i)) i) :pattern ((t2tb3789 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 c1 d1))))
     j) (= (t2tb3789 (tb2t3789 j)) j)) :pattern ((t2tb3789 (tb2t3789 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 (tuple21 a c) (tuple21 b d)))) (v (set (tuple21 c
  d))) (r (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) (tuple21 c
  d)))))
  (= (mem
  (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 c1 d1)))
  (t2tb3360 r)
  (relation (tuple2 c1 d1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb686 u)
  (t2tb689 v)))
  (forall ((x (tuple21 (tuple21 a c) (tuple21 b d))) (y (tuple21 c d)))
  (=> (mem (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 c1 d1))
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 c1 d1) (t2tb691 x)
  (t2tb693 y)) (t2tb3360 r)) (and (mem24 x u) (mem21 y v)))))))

(declare-fun t2tb3790 ((set (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b
  d)) d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) d)))))
  (sort (set1 (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) d1)))
  (t2tb3790 x))))

(declare-fun tb2t3790 (uni) (set (set (tuple21 (tuple21 (tuple21 a c)
  (tuple21 b d)) d))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) d)))))
  (! (= (tb2t3790 (t2tb3790 i)) i) :pattern ((t2tb3790 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) d1))) j)
     (= (t2tb3790 (tb2t3790 j)) j)) :pattern ((t2tb3790 (tb2t3790 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 (tuple21 a c) (tuple21 b d)))) (v (set d))
  (r (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) d))))
  (= (mem (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) d1))
  (t2tb3362 r)
  (relation d1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb686 u)
  (t2tb690 v)))
  (forall ((x (tuple21 (tuple21 a c) (tuple21 b d))) (y d))
  (=> (mem (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) d1)
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) d1 (t2tb691 x) (t2tb694 y))
  (t2tb3362 r)) (and (mem24 x u) (mem20 y v)))))))

(declare-fun t2tb3791 ((set (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b
  d)) c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) c)))))
  (sort (set1 (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) c1)))
  (t2tb3791 x))))

(declare-fun tb2t3791 (uni) (set (set (tuple21 (tuple21 (tuple21 a c)
  (tuple21 b d)) c))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) c)))))
  (! (= (tb2t3791 (t2tb3791 i)) i) :pattern ((t2tb3791 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) c1))) j)
     (= (t2tb3791 (tb2t3791 j)) j)) :pattern ((t2tb3791 (tb2t3791 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 (tuple21 a c) (tuple21 b d)))) (v (set c))
  (r (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) c))))
  (= (mem (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) c1))
  (t2tb3364 r)
  (relation c1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb686 u)
  (t2tb132 v)))
  (forall ((x (tuple21 (tuple21 a c) (tuple21 b d))) (y c))
  (=> (mem (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) c1)
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) c1 (t2tb691 x) (t2tb135 y))
  (t2tb3364 r)) (and (mem24 x u) (mem7 y v)))))))

(declare-fun t2tb3792 ((set (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b
  d)) (set (tuple21 a b)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  (set (tuple21 a b))))))) (sort
  (set1
  (set1
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (set1 (tuple2 a1 b1)))))
  (t2tb3792 x))))

(declare-fun tb2t3792 (uni) (set (set (tuple21 (tuple21 (tuple21 a c)
  (tuple21 b d)) (set (tuple21 a b))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  (set (tuple21 a b)))))))
  (! (= (tb2t3792 (t2tb3792 i)) i) :pattern ((t2tb3792 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (set1
     (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (set1 (tuple2 a1 b1)))))
     j) (= (t2tb3792 (tb2t3792 j)) j)) :pattern ((t2tb3792 (tb2t3792 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 (tuple21 a c) (tuple21 b d))))
  (v (set (set (tuple21 a b)))) (r (set (tuple21 (tuple21 (tuple21 a c)
  (tuple21 b d)) (set (tuple21 a b))))))
  (= (mem
  (set1
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (set1 (tuple2 a1 b1))))
  (t2tb3366 r)
  (relation (set1 (tuple2 a1 b1)) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))
  (t2tb686 u) (t2tb10 v)))
  (forall ((x (tuple21 (tuple21 a c) (tuple21 b d))) (y (set (tuple21 a b))))
  (=> (mem
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (set1 (tuple2 a1 b1)))
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (set1 (tuple2 a1 b1))
  (t2tb691 x) (t2tb11 y)) (t2tb3366 r)) (and (mem24 x u) (mem4 y v)))))))

(declare-fun t2tb3793 ((set (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b
  d)) (tuple21 a b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  (tuple21 a b)))))) (sort
  (set1
  (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 a1 b1))))
  (t2tb3793 x))))

(declare-fun tb2t3793 (uni) (set (set (tuple21 (tuple21 (tuple21 a c)
  (tuple21 b d)) (tuple21 a b)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  (tuple21 a b))))))
  (! (= (tb2t3793 (t2tb3793 i)) i) :pattern ((t2tb3793 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 a1 b1))))
     j) (= (t2tb3793 (tb2t3793 j)) j)) :pattern ((t2tb3793 (tb2t3793 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 (tuple21 a c) (tuple21 b d)))) (v (set (tuple21 a
  b))) (r (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) (tuple21 a
  b)))))
  (= (mem
  (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 a1 b1)))
  (t2tb3368 r)
  (relation (tuple2 a1 b1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb686 u)
  (t2tb11 v)))
  (forall ((x (tuple21 (tuple21 a c) (tuple21 b d))) (y (tuple21 a b)))
  (=> (mem (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 a1 b1))
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 a1 b1) (t2tb691 x)
  (t2tb13 y)) (t2tb3368 r)) (and (mem24 x u) (mem3 y v)))))))

(declare-fun t2tb3794 ((set (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b
  d)) b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) b)))))
  (sort (set1 (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) b1)))
  (t2tb3794 x))))

(declare-fun tb2t3794 (uni) (set (set (tuple21 (tuple21 (tuple21 a c)
  (tuple21 b d)) b))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) b)))))
  (! (= (tb2t3794 (t2tb3794 i)) i) :pattern ((t2tb3794 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) b1))) j)
     (= (t2tb3794 (tb2t3794 j)) j)) :pattern ((t2tb3794 (tb2t3794 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 (tuple21 a c) (tuple21 b d)))) (v (set b))
  (r (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) b))))
  (= (mem (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) b1))
  (t2tb3370 r)
  (relation b1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb686 u) (t2tb12 v)))
  (forall ((x (tuple21 (tuple21 a c) (tuple21 b d))) (y b))
  (=> (mem (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) b1)
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) b1 (t2tb691 x) (t2tb14 y))
  (t2tb3370 r)) (and (mem24 x u) (mem2 y v)))))))

(declare-fun t2tb3795 ((set (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b
  d)) a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) a)))))
  (sort (set1 (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) a1)))
  (t2tb3795 x))))

(declare-fun tb2t3795 (uni) (set (set (tuple21 (tuple21 (tuple21 a c)
  (tuple21 b d)) a))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) a)))))
  (! (= (tb2t3795 (t2tb3795 i)) i) :pattern ((t2tb3795 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) a1))) j)
     (= (t2tb3795 (tb2t3795 j)) j)) :pattern ((t2tb3795 (tb2t3795 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 (tuple21 a c) (tuple21 b d)))) (v (set a))
  (r (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) a))))
  (= (mem (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) a1))
  (t2tb3372 r)
  (relation a1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb686 u) (t2tb1 v)))
  (forall ((x (tuple21 (tuple21 a c) (tuple21 b d))) (y a))
  (=> (mem (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) a1)
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) a1 (t2tb691 x) (t2tb2 y))
  (t2tb3372 r)) (and (mem24 x u) (mem1 y v)))))))

;; mem_relation
  (assert
  (forall ((b2 ty))
  (forall ((u (set (tuple21 (tuple21 a c) (tuple21 b d)))) (v uni) (r uni))
  (and
  (=> (mem (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) b2)) r
  (relation b2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb686 u) v))
  (forall ((x (tuple21 (tuple21 a c) (tuple21 b d))) (y uni))
  (=> (mem (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) b2)
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) b2 (t2tb691 x) y) r)
  (and (mem24 x u) (mem b2 y v)))))
  (=>
  (forall ((x (tuple21 (tuple21 a c) (tuple21 b d))) (y uni))
  (=> (sort b2 y)
  (=> (mem (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) b2)
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) b2 (t2tb691 x) y) r)
  (and (mem24 x u) (mem b2 y v))))) (mem
  (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) b2)) r
  (relation b2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb686 u) v)))))))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 b d))) (v (set (tuple21 e f)))
  (r (set (tuple21 (tuple21 b d) (tuple21 e f)))))
  (= (mem (set1 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1))) (t2tb2944 r)
  (relation (tuple2 e1 f1) (tuple2 b1 d1) (t2tb687 u) (t2tb3314 v)))
  (forall ((x (tuple21 b d)) (y (tuple21 e f)))
  (=> (mem43
  (tb2t2950 (Tuple2 (tuple2 b1 d1) (tuple2 e1 f1) (t2tb692 x) (t2tb3315 y)))
  r)
  (and (mem (tuple2 b1 d1) (t2tb692 x) (t2tb687 u)) (mem (tuple2 e1 f1)
  (t2tb3315 y) (t2tb3314 v))))))))

(declare-fun t2tb3796 ((set (set (tuple21 (set (tuple21 c d)) (tuple21 c
  f))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 c d)) (tuple21 c f)))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 c1 d1)) (tuple2 c1 f1)))) (t2tb3796 x))))

(declare-fun tb2t3796 (uni) (set (set (tuple21 (set (tuple21 c d)) (tuple21 c
  f)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 c d)) (tuple21 c f))))))
  (! (= (tb2t3796 (t2tb3796 i)) i) :pattern ((t2tb3796 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 c1 d1)) (tuple2 c1 f1)))) j)
     (= (t2tb3796 (tb2t3796 j)) j)) :pattern ((t2tb3796 (tb2t3796 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 c d)))) (v (set (tuple21 c f)))
  (r (set (tuple21 (set (tuple21 c d)) (tuple21 c f)))))
  (= (mem (set1 (tuple2 (set1 (tuple2 c1 d1)) (tuple2 c1 f1))) (t2tb3374 r)
  (relation (tuple2 c1 f1) (set1 (tuple2 c1 d1)) (t2tb688 u) (t2tb2942 v)))
  (forall ((x (set (tuple21 c d))) (y (tuple21 c f)))
  (=> (mem (tuple2 (set1 (tuple2 c1 d1)) (tuple2 c1 f1))
  (Tuple2 (set1 (tuple2 c1 d1)) (tuple2 c1 f1) (t2tb689 x) (t2tb2948 y))
  (t2tb3374 r)) (and (mem22 x u) (mem45 y v)))))))

(declare-fun t2tb3797 ((set (set (tuple21 (set (tuple21 c d)) (tuple21 a
  e))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 c d)) (tuple21 a e)))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 c1 d1)) (tuple2 a1 e1)))) (t2tb3797 x))))

(declare-fun tb2t3797 (uni) (set (set (tuple21 (set (tuple21 c d)) (tuple21 a
  e)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 c d)) (tuple21 a e))))))
  (! (= (tb2t3797 (t2tb3797 i)) i) :pattern ((t2tb3797 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 c1 d1)) (tuple2 a1 e1)))) j)
     (= (t2tb3797 (tb2t3797 j)) j)) :pattern ((t2tb3797 (tb2t3797 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 c d)))) (v (set (tuple21 a e)))
  (r (set (tuple21 (set (tuple21 c d)) (tuple21 a e)))))
  (= (mem (set1 (tuple2 (set1 (tuple2 c1 d1)) (tuple2 a1 e1))) (t2tb3376 r)
  (relation (tuple2 a1 e1) (set1 (tuple2 c1 d1)) (t2tb688 u) (t2tb2943 v)))
  (forall ((x (set (tuple21 c d))) (y (tuple21 a e)))
  (=> (mem (tuple2 (set1 (tuple2 c1 d1)) (tuple2 a1 e1))
  (Tuple2 (set1 (tuple2 c1 d1)) (tuple2 a1 e1) (t2tb689 x) (t2tb2949 y))
  (t2tb3376 r)) (and (mem22 x u) (mem44 y v)))))))

(declare-fun t2tb3798 ((set (set (tuple21 (set (tuple21 c d))
  (tuple21 (tuple21 b d) (tuple21 e f)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 c d)) (tuple21 (tuple21 b d)
  (tuple21 e f))))))) (sort
  (set1
  (set1
  (tuple2 (set1 (tuple2 c1 d1)) (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)))))
  (t2tb3798 x))))

(declare-fun tb2t3798 (uni) (set (set (tuple21 (set (tuple21 c d))
  (tuple21 (tuple21 b d) (tuple21 e f))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 c d)) (tuple21 (tuple21 b d)
  (tuple21 e f)))))))
  (! (= (tb2t3798 (t2tb3798 i)) i) :pattern ((t2tb3798 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (set1
     (tuple2 (set1 (tuple2 c1 d1)) (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)))))
     j) (= (t2tb3798 (tb2t3798 j)) j)) :pattern ((t2tb3798 (tb2t3798 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 c d)))) (v (set (tuple21 (tuple21 b d)
  (tuple21 e f)))) (r (set (tuple21 (set (tuple21 c d)) (tuple21 (tuple21 b
  d) (tuple21 e f))))))
  (= (mem
  (set1
  (tuple2 (set1 (tuple2 c1 d1)) (tuple2 (tuple2 b1 d1) (tuple2 e1 f1))))
  (t2tb3378 r)
  (relation (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (set1 (tuple2 c1 d1))
  (t2tb688 u) (t2tb2944 v)))
  (forall ((x (set (tuple21 c d))) (y (tuple21 (tuple21 b d) (tuple21 e f))))
  (=> (mem
  (tuple2 (set1 (tuple2 c1 d1)) (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)))
  (Tuple2 (set1 (tuple2 c1 d1)) (tuple2 (tuple2 b1 d1) (tuple2 e1 f1))
  (t2tb689 x) (t2tb2950 y)) (t2tb3378 r)) (and (mem22 x u) (mem43 y v)))))))

(declare-fun t2tb3799 ((set (set (tuple21 (set (tuple21 c d))
  (tuple21 (tuple21 a c) (tuple21 e f)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 c d)) (tuple21 (tuple21 a c)
  (tuple21 e f))))))) (sort
  (set1
  (set1
  (tuple2 (set1 (tuple2 c1 d1)) (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)))))
  (t2tb3799 x))))

(declare-fun tb2t3799 (uni) (set (set (tuple21 (set (tuple21 c d))
  (tuple21 (tuple21 a c) (tuple21 e f))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 c d)) (tuple21 (tuple21 a c)
  (tuple21 e f)))))))
  (! (= (tb2t3799 (t2tb3799 i)) i) :pattern ((t2tb3799 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (set1
     (tuple2 (set1 (tuple2 c1 d1)) (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)))))
     j) (= (t2tb3799 (tb2t3799 j)) j)) :pattern ((t2tb3799 (tb2t3799 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 c d)))) (v (set (tuple21 (tuple21 a c)
  (tuple21 e f)))) (r (set (tuple21 (set (tuple21 c d)) (tuple21 (tuple21 a
  c) (tuple21 e f))))))
  (= (mem
  (set1
  (tuple2 (set1 (tuple2 c1 d1)) (tuple2 (tuple2 a1 c1) (tuple2 e1 f1))))
  (t2tb3380 r)
  (relation (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (set1 (tuple2 c1 d1))
  (t2tb688 u) (t2tb2945 v)))
  (forall ((x (set (tuple21 c d))) (y (tuple21 (tuple21 a c) (tuple21 e f))))
  (=> (mem
  (tuple2 (set1 (tuple2 c1 d1)) (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)))
  (Tuple2 (set1 (tuple2 c1 d1)) (tuple2 (tuple2 a1 c1) (tuple2 e1 f1))
  (t2tb689 x) (t2tb2951 y)) (t2tb3380 r)) (and (mem22 x u) (mem42 y v)))))))

(declare-fun t2tb3800 ((set (set (tuple21 (set (tuple21 c d)) (set (tuple21 d
  f)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 c d)) (set (tuple21 d f)))))))
  (sort (set1 (set1 (tuple2 (set1 (tuple2 c1 d1)) (set1 (tuple2 d1 f1)))))
  (t2tb3800 x))))

(declare-fun tb2t3800 (uni) (set (set (tuple21 (set (tuple21 c d))
  (set (tuple21 d f))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 c d)) (set (tuple21 d f)))))))
  (! (= (tb2t3800 (t2tb3800 i)) i) :pattern ((t2tb3800 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (set1 (tuple2 c1 d1)) (set1 (tuple2 d1 f1))))) j)
     (= (t2tb3800 (tb2t3800 j)) j)) :pattern ((t2tb3800 (tb2t3800 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 c d)))) (v (set (set (tuple21 d f))))
  (r (set (tuple21 (set (tuple21 c d)) (set (tuple21 d f))))))
  (= (mem (set1 (tuple2 (set1 (tuple2 c1 d1)) (set1 (tuple2 d1 f1))))
  (t2tb3382 r)
  (relation (set1 (tuple2 d1 f1)) (set1 (tuple2 c1 d1)) (t2tb688 u)
  (t2tb2939 v)))
  (forall ((x (set (tuple21 c d))) (y (set (tuple21 d f))))
  (=> (mem (tuple2 (set1 (tuple2 c1 d1)) (set1 (tuple2 d1 f1)))
  (Tuple2 (set1 (tuple2 c1 d1)) (set1 (tuple2 d1 f1)) (t2tb689 x)
  (t2tb2938 y)) (t2tb3382 r)) (and (mem22 x u) (mem41 y v)))))))

(declare-fun t2tb3801 ((set (set (tuple21 (set (tuple21 c d)) (tuple21 d
  f))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 c d)) (tuple21 d f)))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 c1 d1)) (tuple2 d1 f1)))) (t2tb3801 x))))

(declare-fun tb2t3801 (uni) (set (set (tuple21 (set (tuple21 c d)) (tuple21 d
  f)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 c d)) (tuple21 d f))))))
  (! (= (tb2t3801 (t2tb3801 i)) i) :pattern ((t2tb3801 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 c1 d1)) (tuple2 d1 f1)))) j)
     (= (t2tb3801 (tb2t3801 j)) j)) :pattern ((t2tb3801 (tb2t3801 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 c d)))) (v (set (tuple21 d f)))
  (r (set (tuple21 (set (tuple21 c d)) (tuple21 d f)))))
  (= (mem (set1 (tuple2 (set1 (tuple2 c1 d1)) (tuple2 d1 f1))) (t2tb3384 r)
  (relation (tuple2 d1 f1) (set1 (tuple2 c1 d1)) (t2tb688 u) (t2tb2938 v)))
  (forall ((x (set (tuple21 c d))) (y (tuple21 d f)))
  (=> (mem (tuple2 (set1 (tuple2 c1 d1)) (tuple2 d1 f1))
  (Tuple2 (set1 (tuple2 c1 d1)) (tuple2 d1 f1) (t2tb689 x) (t2tb2952 y))
  (t2tb3384 r)) (and (mem22 x u) (mem40 y v)))))))

(declare-fun t2tb3802 ((set (set (tuple21 (set (tuple21 c d)) (set (tuple21 b
  e)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 c d)) (set (tuple21 b e)))))))
  (sort (set1 (set1 (tuple2 (set1 (tuple2 c1 d1)) (set1 (tuple2 b1 e1)))))
  (t2tb3802 x))))

(declare-fun tb2t3802 (uni) (set (set (tuple21 (set (tuple21 c d))
  (set (tuple21 b e))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 c d)) (set (tuple21 b e)))))))
  (! (= (tb2t3802 (t2tb3802 i)) i) :pattern ((t2tb3802 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (set1 (tuple2 c1 d1)) (set1 (tuple2 b1 e1))))) j)
     (= (t2tb3802 (tb2t3802 j)) j)) :pattern ((t2tb3802 (tb2t3802 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 c d)))) (v (set (set (tuple21 b e))))
  (r (set (tuple21 (set (tuple21 c d)) (set (tuple21 b e))))))
  (= (mem (set1 (tuple2 (set1 (tuple2 c1 d1)) (set1 (tuple2 b1 e1))))
  (t2tb3386 r)
  (relation (set1 (tuple2 b1 e1)) (set1 (tuple2 c1 d1)) (t2tb688 u)
  (t2tb2941 v)))
  (forall ((x (set (tuple21 c d))) (y (set (tuple21 b e))))
  (=> (mem (tuple2 (set1 (tuple2 c1 d1)) (set1 (tuple2 b1 e1)))
  (Tuple2 (set1 (tuple2 c1 d1)) (set1 (tuple2 b1 e1)) (t2tb689 x)
  (t2tb2940 y)) (t2tb3386 r)) (and (mem22 x u) (mem39 y v)))))))

(declare-fun t2tb3803 ((set (set (tuple21 (set (tuple21 c d)) (tuple21 b
  e))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 c d)) (tuple21 b e)))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 c1 d1)) (tuple2 b1 e1)))) (t2tb3803 x))))

(declare-fun tb2t3803 (uni) (set (set (tuple21 (set (tuple21 c d)) (tuple21 b
  e)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 c d)) (tuple21 b e))))))
  (! (= (tb2t3803 (t2tb3803 i)) i) :pattern ((t2tb3803 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 c1 d1)) (tuple2 b1 e1)))) j)
     (= (t2tb3803 (tb2t3803 j)) j)) :pattern ((t2tb3803 (tb2t3803 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 c d)))) (v (set (tuple21 b e)))
  (r (set (tuple21 (set (tuple21 c d)) (tuple21 b e)))))
  (= (mem (set1 (tuple2 (set1 (tuple2 c1 d1)) (tuple2 b1 e1))) (t2tb3388 r)
  (relation (tuple2 b1 e1) (set1 (tuple2 c1 d1)) (t2tb688 u) (t2tb2940 v)))
  (forall ((x (set (tuple21 c d))) (y (tuple21 b e)))
  (=> (mem (tuple2 (set1 (tuple2 c1 d1)) (tuple2 b1 e1))
  (Tuple2 (set1 (tuple2 c1 d1)) (tuple2 b1 e1) (t2tb689 x) (t2tb2953 y))
  (t2tb3388 r)) (and (mem22 x u) (mem38 y v)))))))

(declare-fun t2tb3804 ((set (set (tuple21 (set (tuple21 c d)) f)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 c d)) f))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 c1 d1)) f1))) (t2tb3804 x))))

(declare-fun tb2t3804 (uni) (set (set (tuple21 (set (tuple21 c d)) f))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 c d)) f)))))
  (! (= (tb2t3804 (t2tb3804 i)) i) :pattern ((t2tb3804 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 c1 d1)) f1))) j)
     (= (t2tb3804 (tb2t3804 j)) j)) :pattern ((t2tb3804 (tb2t3804 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 c d)))) (v (set f))
  (r (set (tuple21 (set (tuple21 c d)) f))))
  (= (mem (set1 (tuple2 (set1 (tuple2 c1 d1)) f1)) (t2tb3390 r)
  (relation f1 (set1 (tuple2 c1 d1)) (t2tb688 u) (t2tb2946 v)))
  (forall ((x (set (tuple21 c d))) (y f))
  (=> (mem (tuple2 (set1 (tuple2 c1 d1)) f1)
  (Tuple2 (set1 (tuple2 c1 d1)) f1 (t2tb689 x) (t2tb2954 y)) (t2tb3390 r))
  (and (mem22 x u) (mem37 y v)))))))

(declare-fun t2tb3805 ((set (set (tuple21 (set (tuple21 c d)) e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 c d)) e))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 c1 d1)) e1))) (t2tb3805 x))))

(declare-fun tb2t3805 (uni) (set (set (tuple21 (set (tuple21 c d)) e))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 c d)) e)))))
  (! (= (tb2t3805 (t2tb3805 i)) i) :pattern ((t2tb3805 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 c1 d1)) e1))) j)
     (= (t2tb3805 (tb2t3805 j)) j)) :pattern ((t2tb3805 (tb2t3805 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 c d)))) (v (set e))
  (r (set (tuple21 (set (tuple21 c d)) e))))
  (= (mem (set1 (tuple2 (set1 (tuple2 c1 d1)) e1)) (t2tb3392 r)
  (relation e1 (set1 (tuple2 c1 d1)) (t2tb688 u) (t2tb2947 v)))
  (forall ((x (set (tuple21 c d))) (y e))
  (=> (mem (tuple2 (set1 (tuple2 c1 d1)) e1)
  (Tuple2 (set1 (tuple2 c1 d1)) e1 (t2tb689 x) (t2tb2955 y)) (t2tb3392 r))
  (and (mem22 x u) (mem36 y v)))))))

(declare-fun t2tb3806 ((set (set (tuple21 (set (tuple21 c d))
  (tuple21 (tuple21 a c) (tuple21 b d)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 c d)) (tuple21 (tuple21 a c)
  (tuple21 b d))))))) (sort
  (set1
  (set1
  (tuple2 (set1 (tuple2 c1 d1)) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))))
  (t2tb3806 x))))

(declare-fun tb2t3806 (uni) (set (set (tuple21 (set (tuple21 c d))
  (tuple21 (tuple21 a c) (tuple21 b d))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 c d)) (tuple21 (tuple21 a c)
  (tuple21 b d)))))))
  (! (= (tb2t3806 (t2tb3806 i)) i) :pattern ((t2tb3806 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (set1
     (tuple2 (set1 (tuple2 c1 d1)) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))))
     j) (= (t2tb3806 (tb2t3806 j)) j)) :pattern ((t2tb3806 (tb2t3806 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 c d)))) (v (set (tuple21 (tuple21 a c)
  (tuple21 b d)))) (r (set (tuple21 (set (tuple21 c d)) (tuple21 (tuple21 a
  c) (tuple21 b d))))))
  (= (mem
  (set1
  (tuple2 (set1 (tuple2 c1 d1)) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))))
  (t2tb3394 r)
  (relation (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (set1 (tuple2 c1 d1))
  (t2tb688 u) (t2tb686 v)))
  (forall ((x (set (tuple21 c d))) (y (tuple21 (tuple21 a c) (tuple21 b d))))
  (=> (mem
  (tuple2 (set1 (tuple2 c1 d1)) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
  (Tuple2 (set1 (tuple2 c1 d1)) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))
  (t2tb689 x) (t2tb691 y)) (t2tb3394 r)) (and (mem22 x u) (mem24 y v)))))))

(declare-fun t2tb3807 ((set (set (tuple21 (set (tuple21 c d)) (set (tuple21 c
  d)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 c d)) (set (tuple21 c d)))))))
  (sort (set1 (set1 (tuple2 (set1 (tuple2 c1 d1)) (set1 (tuple2 c1 d1)))))
  (t2tb3807 x))))

(declare-fun tb2t3807 (uni) (set (set (tuple21 (set (tuple21 c d))
  (set (tuple21 c d))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 c d)) (set (tuple21 c d)))))))
  (! (= (tb2t3807 (t2tb3807 i)) i) :pattern ((t2tb3807 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (set1 (tuple2 c1 d1)) (set1 (tuple2 c1 d1))))) j)
     (= (t2tb3807 (tb2t3807 j)) j)) :pattern ((t2tb3807 (tb2t3807 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 c d)))) (v (set (set (tuple21 c d))))
  (r (set (tuple21 (set (tuple21 c d)) (set (tuple21 c d))))))
  (= (mem (set1 (tuple2 (set1 (tuple2 c1 d1)) (set1 (tuple2 c1 d1))))
  (t2tb3396 r)
  (relation (set1 (tuple2 c1 d1)) (set1 (tuple2 c1 d1)) (t2tb688 u)
  (t2tb688 v)))
  (forall ((x (set (tuple21 c d))) (y (set (tuple21 c d))))
  (=> (mem (tuple2 (set1 (tuple2 c1 d1)) (set1 (tuple2 c1 d1)))
  (Tuple2 (set1 (tuple2 c1 d1)) (set1 (tuple2 c1 d1)) (t2tb689 x)
  (t2tb689 y)) (t2tb3396 r)) (and (mem22 x u) (mem22 y v)))))))

(declare-fun t2tb3808 ((set (set (tuple21 (set (tuple21 c d)) (tuple21 c
  d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 c d)) (tuple21 c d)))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 c1 d1)) (tuple2 c1 d1)))) (t2tb3808 x))))

(declare-fun tb2t3808 (uni) (set (set (tuple21 (set (tuple21 c d)) (tuple21 c
  d)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 c d)) (tuple21 c d))))))
  (! (= (tb2t3808 (t2tb3808 i)) i) :pattern ((t2tb3808 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 c1 d1)) (tuple2 c1 d1)))) j)
     (= (t2tb3808 (tb2t3808 j)) j)) :pattern ((t2tb3808 (tb2t3808 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 c d)))) (v (set (tuple21 c d)))
  (r (set (tuple21 (set (tuple21 c d)) (tuple21 c d)))))
  (= (mem (set1 (tuple2 (set1 (tuple2 c1 d1)) (tuple2 c1 d1))) (t2tb3398 r)
  (relation (tuple2 c1 d1) (set1 (tuple2 c1 d1)) (t2tb688 u) (t2tb689 v)))
  (forall ((x (set (tuple21 c d))) (y (tuple21 c d)))
  (=> (mem (tuple2 (set1 (tuple2 c1 d1)) (tuple2 c1 d1))
  (Tuple2 (set1 (tuple2 c1 d1)) (tuple2 c1 d1) (t2tb689 x) (t2tb693 y))
  (t2tb3398 r)) (and (mem22 x u) (mem21 y v)))))))

(declare-fun t2tb3809 ((set (set (tuple21 (set (tuple21 c d)) d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 c d)) d))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 c1 d1)) d1))) (t2tb3809 x))))

(declare-fun tb2t3809 (uni) (set (set (tuple21 (set (tuple21 c d)) d))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 c d)) d)))))
  (! (= (tb2t3809 (t2tb3809 i)) i) :pattern ((t2tb3809 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 c1 d1)) d1))) j)
     (= (t2tb3809 (tb2t3809 j)) j)) :pattern ((t2tb3809 (tb2t3809 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 c d)))) (v (set d))
  (r (set (tuple21 (set (tuple21 c d)) d))))
  (= (mem (set1 (tuple2 (set1 (tuple2 c1 d1)) d1)) (t2tb3400 r)
  (relation d1 (set1 (tuple2 c1 d1)) (t2tb688 u) (t2tb690 v)))
  (forall ((x (set (tuple21 c d))) (y d))
  (=> (mem (tuple2 (set1 (tuple2 c1 d1)) d1)
  (Tuple2 (set1 (tuple2 c1 d1)) d1 (t2tb689 x) (t2tb694 y)) (t2tb3400 r))
  (and (mem22 x u) (mem20 y v)))))))

(declare-fun t2tb3810 ((set (set (tuple21 (set (tuple21 c d)) c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 c d)) c))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 c1 d1)) c1))) (t2tb3810 x))))

(declare-fun tb2t3810 (uni) (set (set (tuple21 (set (tuple21 c d)) c))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 c d)) c)))))
  (! (= (tb2t3810 (t2tb3810 i)) i) :pattern ((t2tb3810 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 c1 d1)) c1))) j)
     (= (t2tb3810 (tb2t3810 j)) j)) :pattern ((t2tb3810 (tb2t3810 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 c d)))) (v (set c))
  (r (set (tuple21 (set (tuple21 c d)) c))))
  (= (mem (set1 (tuple2 (set1 (tuple2 c1 d1)) c1)) (t2tb3402 r)
  (relation c1 (set1 (tuple2 c1 d1)) (t2tb688 u) (t2tb132 v)))
  (forall ((x (set (tuple21 c d))) (y c))
  (=> (mem (tuple2 (set1 (tuple2 c1 d1)) c1)
  (Tuple2 (set1 (tuple2 c1 d1)) c1 (t2tb689 x) (t2tb135 y)) (t2tb3402 r))
  (and (mem22 x u) (mem7 y v)))))))

(declare-fun t2tb3811 ((set (set (tuple21 (set (tuple21 c d)) (set (tuple21 a
  b)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 c d)) (set (tuple21 a b)))))))
  (sort (set1 (set1 (tuple2 (set1 (tuple2 c1 d1)) (set1 (tuple2 a1 b1)))))
  (t2tb3811 x))))

(declare-fun tb2t3811 (uni) (set (set (tuple21 (set (tuple21 c d))
  (set (tuple21 a b))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 c d)) (set (tuple21 a b)))))))
  (! (= (tb2t3811 (t2tb3811 i)) i) :pattern ((t2tb3811 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (set1 (tuple2 c1 d1)) (set1 (tuple2 a1 b1))))) j)
     (= (t2tb3811 (tb2t3811 j)) j)) :pattern ((t2tb3811 (tb2t3811 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 c d)))) (v (set (set (tuple21 a b))))
  (r (set (tuple21 (set (tuple21 c d)) (set (tuple21 a b))))))
  (= (mem (set1 (tuple2 (set1 (tuple2 c1 d1)) (set1 (tuple2 a1 b1))))
  (t2tb3404 r)
  (relation (set1 (tuple2 a1 b1)) (set1 (tuple2 c1 d1)) (t2tb688 u)
  (t2tb10 v)))
  (forall ((x (set (tuple21 c d))) (y (set (tuple21 a b))))
  (=> (mem (tuple2 (set1 (tuple2 c1 d1)) (set1 (tuple2 a1 b1)))
  (Tuple2 (set1 (tuple2 c1 d1)) (set1 (tuple2 a1 b1)) (t2tb689 x) (t2tb11 y))
  (t2tb3404 r)) (and (mem22 x u) (mem4 y v)))))))

(declare-fun t2tb3812 ((set (set (tuple21 (set (tuple21 c d)) (tuple21 a
  b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 c d)) (tuple21 a b)))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 c1 d1)) (tuple2 a1 b1)))) (t2tb3812 x))))

(declare-fun tb2t3812 (uni) (set (set (tuple21 (set (tuple21 c d)) (tuple21 a
  b)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 c d)) (tuple21 a b))))))
  (! (= (tb2t3812 (t2tb3812 i)) i) :pattern ((t2tb3812 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 c1 d1)) (tuple2 a1 b1)))) j)
     (= (t2tb3812 (tb2t3812 j)) j)) :pattern ((t2tb3812 (tb2t3812 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 c d)))) (v (set (tuple21 a b)))
  (r (set (tuple21 (set (tuple21 c d)) (tuple21 a b)))))
  (= (mem (set1 (tuple2 (set1 (tuple2 c1 d1)) (tuple2 a1 b1))) (t2tb3406 r)
  (relation (tuple2 a1 b1) (set1 (tuple2 c1 d1)) (t2tb688 u) (t2tb11 v)))
  (forall ((x (set (tuple21 c d))) (y (tuple21 a b)))
  (=> (mem (tuple2 (set1 (tuple2 c1 d1)) (tuple2 a1 b1))
  (Tuple2 (set1 (tuple2 c1 d1)) (tuple2 a1 b1) (t2tb689 x) (t2tb13 y))
  (t2tb3406 r)) (and (mem22 x u) (mem3 y v)))))))

(declare-fun t2tb3813 ((set (set (tuple21 (set (tuple21 c d)) b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 c d)) b))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 c1 d1)) b1))) (t2tb3813 x))))

(declare-fun tb2t3813 (uni) (set (set (tuple21 (set (tuple21 c d)) b))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 c d)) b)))))
  (! (= (tb2t3813 (t2tb3813 i)) i) :pattern ((t2tb3813 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 c1 d1)) b1))) j)
     (= (t2tb3813 (tb2t3813 j)) j)) :pattern ((t2tb3813 (tb2t3813 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 c d)))) (v (set b))
  (r (set (tuple21 (set (tuple21 c d)) b))))
  (= (mem (set1 (tuple2 (set1 (tuple2 c1 d1)) b1)) (t2tb3408 r)
  (relation b1 (set1 (tuple2 c1 d1)) (t2tb688 u) (t2tb12 v)))
  (forall ((x (set (tuple21 c d))) (y b))
  (=> (mem (tuple2 (set1 (tuple2 c1 d1)) b1)
  (Tuple2 (set1 (tuple2 c1 d1)) b1 (t2tb689 x) (t2tb14 y)) (t2tb3408 r))
  (and (mem22 x u) (mem2 y v)))))))

(declare-fun t2tb3814 ((set (set (tuple21 (set (tuple21 c d)) a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 c d)) a))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 c1 d1)) a1))) (t2tb3814 x))))

(declare-fun tb2t3814 (uni) (set (set (tuple21 (set (tuple21 c d)) a))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 c d)) a)))))
  (! (= (tb2t3814 (t2tb3814 i)) i) :pattern ((t2tb3814 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 c1 d1)) a1))) j)
     (= (t2tb3814 (tb2t3814 j)) j)) :pattern ((t2tb3814 (tb2t3814 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 c d)))) (v (set a))
  (r (set (tuple21 (set (tuple21 c d)) a))))
  (= (mem (set1 (tuple2 (set1 (tuple2 c1 d1)) a1)) (t2tb3410 r)
  (relation a1 (set1 (tuple2 c1 d1)) (t2tb688 u) (t2tb1 v)))
  (forall ((x (set (tuple21 c d))) (y a))
  (=> (mem (tuple2 (set1 (tuple2 c1 d1)) a1)
  (Tuple2 (set1 (tuple2 c1 d1)) a1 (t2tb689 x) (t2tb2 y)) (t2tb3410 r))
  (and (mem22 x u) (mem1 y v)))))))

;; mem_relation
  (assert
  (forall ((b2 ty))
  (forall ((u (set (set (tuple21 c d)))) (v uni) (r uni))
  (and
  (=> (mem (set1 (tuple2 (set1 (tuple2 c1 d1)) b2)) r
  (relation b2 (set1 (tuple2 c1 d1)) (t2tb688 u) v))
  (forall ((x (set (tuple21 c d))) (y uni))
  (=> (mem (tuple2 (set1 (tuple2 c1 d1)) b2)
  (Tuple2 (set1 (tuple2 c1 d1)) b2 (t2tb689 x) y) r)
  (and (mem22 x u) (mem b2 y v)))))
  (=>
  (forall ((x (set (tuple21 c d))) (y uni))
  (=> (sort b2 y)
  (=> (mem (tuple2 (set1 (tuple2 c1 d1)) b2)
  (Tuple2 (set1 (tuple2 c1 d1)) b2 (t2tb689 x) y) r)
  (and (mem22 x u) (mem b2 y v))))) (mem
  (set1 (tuple2 (set1 (tuple2 c1 d1)) b2)) r
  (relation b2 (set1 (tuple2 c1 d1)) (t2tb688 u) v)))))))

(declare-fun t2tb3815 ((set (set (tuple21 (tuple21 c d) (tuple21 c
  f))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 c d) (tuple21 c f)))))) (sort
  (set1 (set1 (tuple2 (tuple2 c1 d1) (tuple2 c1 f1)))) (t2tb3815 x))))

(declare-fun tb2t3815 (uni) (set (set (tuple21 (tuple21 c d) (tuple21 c
  f)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 c d) (tuple21 c f))))))
  (! (= (tb2t3815 (t2tb3815 i)) i) :pattern ((t2tb3815 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 c1 d1) (tuple2 c1 f1)))) j)
     (= (t2tb3815 (tb2t3815 j)) j)) :pattern ((t2tb3815 (tb2t3815 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 c d))) (v (set (tuple21 c f)))
  (r (set (tuple21 (tuple21 c d) (tuple21 c f)))))
  (= (mem (set1 (tuple2 (tuple2 c1 d1) (tuple2 c1 f1))) (t2tb3412 r)
  (relation (tuple2 c1 f1) (tuple2 c1 d1) (t2tb689 u) (t2tb2942 v)))
  (forall ((x (tuple21 c d)) (y (tuple21 c f)))
  (=> (mem (tuple2 (tuple2 c1 d1) (tuple2 c1 f1))
  (Tuple2 (tuple2 c1 d1) (tuple2 c1 f1) (t2tb693 x) (t2tb2948 y))
  (t2tb3412 r)) (and (mem21 x u) (mem45 y v)))))))

(declare-fun t2tb3816 ((set (set (tuple21 (tuple21 c d) (tuple21 a
  e))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 c d) (tuple21 a e)))))) (sort
  (set1 (set1 (tuple2 (tuple2 c1 d1) (tuple2 a1 e1)))) (t2tb3816 x))))

(declare-fun tb2t3816 (uni) (set (set (tuple21 (tuple21 c d) (tuple21 a
  e)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 c d) (tuple21 a e))))))
  (! (= (tb2t3816 (t2tb3816 i)) i) :pattern ((t2tb3816 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 c1 d1) (tuple2 a1 e1)))) j)
     (= (t2tb3816 (tb2t3816 j)) j)) :pattern ((t2tb3816 (tb2t3816 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 c d))) (v (set (tuple21 a e)))
  (r (set (tuple21 (tuple21 c d) (tuple21 a e)))))
  (= (mem (set1 (tuple2 (tuple2 c1 d1) (tuple2 a1 e1))) (t2tb3414 r)
  (relation (tuple2 a1 e1) (tuple2 c1 d1) (t2tb689 u) (t2tb2943 v)))
  (forall ((x (tuple21 c d)) (y (tuple21 a e)))
  (=> (mem (tuple2 (tuple2 c1 d1) (tuple2 a1 e1))
  (Tuple2 (tuple2 c1 d1) (tuple2 a1 e1) (t2tb693 x) (t2tb2949 y))
  (t2tb3414 r)) (and (mem21 x u) (mem44 y v)))))))

(declare-fun t2tb3817 ((set (set (tuple21 (tuple21 c d) (tuple21 (tuple21 b
  d) (tuple21 e f)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 c d) (tuple21 (tuple21 b d)
  (tuple21 e f))))))) (sort
  (set1
  (set1 (tuple2 (tuple2 c1 d1) (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)))))
  (t2tb3817 x))))

(declare-fun tb2t3817 (uni) (set (set (tuple21 (tuple21 c d)
  (tuple21 (tuple21 b d) (tuple21 e f))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 c d) (tuple21 (tuple21 b d)
  (tuple21 e f)))))))
  (! (= (tb2t3817 (t2tb3817 i)) i) :pattern ((t2tb3817 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (set1 (tuple2 (tuple2 c1 d1) (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)))))
     j) (= (t2tb3817 (tb2t3817 j)) j)) :pattern ((t2tb3817 (tb2t3817 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 c d))) (v (set (tuple21 (tuple21 b d) (tuple21 e
  f)))) (r (set (tuple21 (tuple21 c d) (tuple21 (tuple21 b d) (tuple21 e
  f))))))
  (= (mem
  (set1 (tuple2 (tuple2 c1 d1) (tuple2 (tuple2 b1 d1) (tuple2 e1 f1))))
  (t2tb3416 r)
  (relation (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (tuple2 c1 d1) (t2tb689 u)
  (t2tb2944 v)))
  (forall ((x (tuple21 c d)) (y (tuple21 (tuple21 b d) (tuple21 e f))))
  (=> (mem (tuple2 (tuple2 c1 d1) (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)))
  (Tuple2 (tuple2 c1 d1) (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (t2tb693 x)
  (t2tb2950 y)) (t2tb3416 r)) (and (mem21 x u) (mem43 y v)))))))

(declare-fun t2tb3818 ((set (set (tuple21 (tuple21 c d) (tuple21 (tuple21 a
  c) (tuple21 e f)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 c d) (tuple21 (tuple21 a c)
  (tuple21 e f))))))) (sort
  (set1
  (set1 (tuple2 (tuple2 c1 d1) (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)))))
  (t2tb3818 x))))

(declare-fun tb2t3818 (uni) (set (set (tuple21 (tuple21 c d)
  (tuple21 (tuple21 a c) (tuple21 e f))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 c d) (tuple21 (tuple21 a c)
  (tuple21 e f)))))))
  (! (= (tb2t3818 (t2tb3818 i)) i) :pattern ((t2tb3818 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (set1 (tuple2 (tuple2 c1 d1) (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)))))
     j) (= (t2tb3818 (tb2t3818 j)) j)) :pattern ((t2tb3818 (tb2t3818 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 c d))) (v (set (tuple21 (tuple21 a c) (tuple21 e
  f)))) (r (set (tuple21 (tuple21 c d) (tuple21 (tuple21 a c) (tuple21 e
  f))))))
  (= (mem
  (set1 (tuple2 (tuple2 c1 d1) (tuple2 (tuple2 a1 c1) (tuple2 e1 f1))))
  (t2tb3418 r)
  (relation (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (tuple2 c1 d1) (t2tb689 u)
  (t2tb2945 v)))
  (forall ((x (tuple21 c d)) (y (tuple21 (tuple21 a c) (tuple21 e f))))
  (=> (mem (tuple2 (tuple2 c1 d1) (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)))
  (Tuple2 (tuple2 c1 d1) (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (t2tb693 x)
  (t2tb2951 y)) (t2tb3418 r)) (and (mem21 x u) (mem42 y v)))))))

(declare-fun t2tb3819 ((set (set (tuple21 (tuple21 c d) (set (tuple21 d
  f)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 c d) (set (tuple21 d f))))))) (sort
  (set1 (set1 (tuple2 (tuple2 c1 d1) (set1 (tuple2 d1 f1))))) (t2tb3819 x))))

(declare-fun tb2t3819 (uni) (set (set (tuple21 (tuple21 c d) (set (tuple21 d
  f))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 c d) (set (tuple21 d f)))))))
  (! (= (tb2t3819 (t2tb3819 i)) i) :pattern ((t2tb3819 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 c1 d1) (set1 (tuple2 d1 f1))))) j)
     (= (t2tb3819 (tb2t3819 j)) j)) :pattern ((t2tb3819 (tb2t3819 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 c d))) (v (set (set (tuple21 d f))))
  (r (set (tuple21 (tuple21 c d) (set (tuple21 d f))))))
  (= (mem (set1 (tuple2 (tuple2 c1 d1) (set1 (tuple2 d1 f1)))) (t2tb3420 r)
  (relation (set1 (tuple2 d1 f1)) (tuple2 c1 d1) (t2tb689 u) (t2tb2939 v)))
  (forall ((x (tuple21 c d)) (y (set (tuple21 d f))))
  (=> (mem (tuple2 (tuple2 c1 d1) (set1 (tuple2 d1 f1)))
  (Tuple2 (tuple2 c1 d1) (set1 (tuple2 d1 f1)) (t2tb693 x) (t2tb2938 y))
  (t2tb3420 r)) (and (mem21 x u) (mem41 y v)))))))

(declare-fun t2tb3820 ((set (set (tuple21 (tuple21 c d) (tuple21 d
  f))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 c d) (tuple21 d f)))))) (sort
  (set1 (set1 (tuple2 (tuple2 c1 d1) (tuple2 d1 f1)))) (t2tb3820 x))))

(declare-fun tb2t3820 (uni) (set (set (tuple21 (tuple21 c d) (tuple21 d
  f)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 c d) (tuple21 d f))))))
  (! (= (tb2t3820 (t2tb3820 i)) i) :pattern ((t2tb3820 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 c1 d1) (tuple2 d1 f1)))) j)
     (= (t2tb3820 (tb2t3820 j)) j)) :pattern ((t2tb3820 (tb2t3820 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 c d))) (v (set (tuple21 d f)))
  (r (set (tuple21 (tuple21 c d) (tuple21 d f)))))
  (= (mem (set1 (tuple2 (tuple2 c1 d1) (tuple2 d1 f1))) (t2tb3422 r)
  (relation (tuple2 d1 f1) (tuple2 c1 d1) (t2tb689 u) (t2tb2938 v)))
  (forall ((x (tuple21 c d)) (y (tuple21 d f)))
  (=> (mem (tuple2 (tuple2 c1 d1) (tuple2 d1 f1))
  (Tuple2 (tuple2 c1 d1) (tuple2 d1 f1) (t2tb693 x) (t2tb2952 y))
  (t2tb3422 r)) (and (mem21 x u) (mem40 y v)))))))

(declare-fun t2tb3821 ((set (set (tuple21 (tuple21 c d) (set (tuple21 b
  e)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 c d) (set (tuple21 b e))))))) (sort
  (set1 (set1 (tuple2 (tuple2 c1 d1) (set1 (tuple2 b1 e1))))) (t2tb3821 x))))

(declare-fun tb2t3821 (uni) (set (set (tuple21 (tuple21 c d) (set (tuple21 b
  e))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 c d) (set (tuple21 b e)))))))
  (! (= (tb2t3821 (t2tb3821 i)) i) :pattern ((t2tb3821 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 c1 d1) (set1 (tuple2 b1 e1))))) j)
     (= (t2tb3821 (tb2t3821 j)) j)) :pattern ((t2tb3821 (tb2t3821 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 c d))) (v (set (set (tuple21 b e))))
  (r (set (tuple21 (tuple21 c d) (set (tuple21 b e))))))
  (= (mem (set1 (tuple2 (tuple2 c1 d1) (set1 (tuple2 b1 e1)))) (t2tb3424 r)
  (relation (set1 (tuple2 b1 e1)) (tuple2 c1 d1) (t2tb689 u) (t2tb2941 v)))
  (forall ((x (tuple21 c d)) (y (set (tuple21 b e))))
  (=> (mem (tuple2 (tuple2 c1 d1) (set1 (tuple2 b1 e1)))
  (Tuple2 (tuple2 c1 d1) (set1 (tuple2 b1 e1)) (t2tb693 x) (t2tb2940 y))
  (t2tb3424 r)) (and (mem21 x u) (mem39 y v)))))))

(declare-fun t2tb3822 ((set (set (tuple21 (tuple21 c d) (tuple21 b
  e))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 c d) (tuple21 b e)))))) (sort
  (set1 (set1 (tuple2 (tuple2 c1 d1) (tuple2 b1 e1)))) (t2tb3822 x))))

(declare-fun tb2t3822 (uni) (set (set (tuple21 (tuple21 c d) (tuple21 b
  e)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 c d) (tuple21 b e))))))
  (! (= (tb2t3822 (t2tb3822 i)) i) :pattern ((t2tb3822 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 c1 d1) (tuple2 b1 e1)))) j)
     (= (t2tb3822 (tb2t3822 j)) j)) :pattern ((t2tb3822 (tb2t3822 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 c d))) (v (set (tuple21 b e)))
  (r (set (tuple21 (tuple21 c d) (tuple21 b e)))))
  (= (mem (set1 (tuple2 (tuple2 c1 d1) (tuple2 b1 e1))) (t2tb3426 r)
  (relation (tuple2 b1 e1) (tuple2 c1 d1) (t2tb689 u) (t2tb2940 v)))
  (forall ((x (tuple21 c d)) (y (tuple21 b e)))
  (=> (mem (tuple2 (tuple2 c1 d1) (tuple2 b1 e1))
  (Tuple2 (tuple2 c1 d1) (tuple2 b1 e1) (t2tb693 x) (t2tb2953 y))
  (t2tb3426 r)) (and (mem21 x u) (mem38 y v)))))))

(declare-fun t2tb3823 ((set (set (tuple21 (tuple21 c d) f)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 c d) f))))) (sort
  (set1 (set1 (tuple2 (tuple2 c1 d1) f1))) (t2tb3823 x))))

(declare-fun tb2t3823 (uni) (set (set (tuple21 (tuple21 c d) f))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 c d) f)))))
  (! (= (tb2t3823 (t2tb3823 i)) i) :pattern ((t2tb3823 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 c1 d1) f1))) j)
     (= (t2tb3823 (tb2t3823 j)) j)) :pattern ((t2tb3823 (tb2t3823 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 c d))) (v (set f)) (r (set (tuple21 (tuple21 c d)
  f))))
  (= (mem (set1 (tuple2 (tuple2 c1 d1) f1)) (t2tb3428 r)
  (relation f1 (tuple2 c1 d1) (t2tb689 u) (t2tb2946 v)))
  (forall ((x (tuple21 c d)) (y f))
  (=> (mem (tuple2 (tuple2 c1 d1) f1)
  (Tuple2 (tuple2 c1 d1) f1 (t2tb693 x) (t2tb2954 y)) (t2tb3428 r))
  (and (mem21 x u) (mem37 y v)))))))

(declare-fun t2tb3824 ((set (set (tuple21 (tuple21 c d) e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 c d) e))))) (sort
  (set1 (set1 (tuple2 (tuple2 c1 d1) e1))) (t2tb3824 x))))

(declare-fun tb2t3824 (uni) (set (set (tuple21 (tuple21 c d) e))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 c d) e)))))
  (! (= (tb2t3824 (t2tb3824 i)) i) :pattern ((t2tb3824 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 c1 d1) e1))) j)
     (= (t2tb3824 (tb2t3824 j)) j)) :pattern ((t2tb3824 (tb2t3824 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 c d))) (v (set e)) (r (set (tuple21 (tuple21 c d)
  e))))
  (= (mem (set1 (tuple2 (tuple2 c1 d1) e1)) (t2tb3430 r)
  (relation e1 (tuple2 c1 d1) (t2tb689 u) (t2tb2947 v)))
  (forall ((x (tuple21 c d)) (y e))
  (=> (mem (tuple2 (tuple2 c1 d1) e1)
  (Tuple2 (tuple2 c1 d1) e1 (t2tb693 x) (t2tb2955 y)) (t2tb3430 r))
  (and (mem21 x u) (mem36 y v)))))))

(declare-fun t2tb3825 ((set (set (tuple21 (tuple21 c d) (tuple21 (tuple21 a
  c) (tuple21 b d)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 c d) (tuple21 (tuple21 a c)
  (tuple21 b d))))))) (sort
  (set1
  (set1 (tuple2 (tuple2 c1 d1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))))
  (t2tb3825 x))))

(declare-fun tb2t3825 (uni) (set (set (tuple21 (tuple21 c d)
  (tuple21 (tuple21 a c) (tuple21 b d))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 c d) (tuple21 (tuple21 a c)
  (tuple21 b d)))))))
  (! (= (tb2t3825 (t2tb3825 i)) i) :pattern ((t2tb3825 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (set1 (tuple2 (tuple2 c1 d1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))))
     j) (= (t2tb3825 (tb2t3825 j)) j)) :pattern ((t2tb3825 (tb2t3825 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 c d))) (v (set (tuple21 (tuple21 a c) (tuple21 b
  d)))) (r (set (tuple21 (tuple21 c d) (tuple21 (tuple21 a c) (tuple21 b
  d))))))
  (= (mem
  (set1 (tuple2 (tuple2 c1 d1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))))
  (t2tb3432 r)
  (relation (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 c1 d1) (t2tb689 u)
  (t2tb686 v)))
  (forall ((x (tuple21 c d)) (y (tuple21 (tuple21 a c) (tuple21 b d))))
  (=> (mem (tuple2 (tuple2 c1 d1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
  (Tuple2 (tuple2 c1 d1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb693 x)
  (t2tb691 y)) (t2tb3432 r)) (and (mem21 x u) (mem24 y v)))))))

(declare-fun t2tb3826 ((set (set (tuple21 (tuple21 c d) (set (tuple21 c
  d)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 c d) (set (tuple21 c d))))))) (sort
  (set1 (set1 (tuple2 (tuple2 c1 d1) (set1 (tuple2 c1 d1))))) (t2tb3826 x))))

(declare-fun tb2t3826 (uni) (set (set (tuple21 (tuple21 c d) (set (tuple21 c
  d))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 c d) (set (tuple21 c d)))))))
  (! (= (tb2t3826 (t2tb3826 i)) i) :pattern ((t2tb3826 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 c1 d1) (set1 (tuple2 c1 d1))))) j)
     (= (t2tb3826 (tb2t3826 j)) j)) :pattern ((t2tb3826 (tb2t3826 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 c d))) (v (set (set (tuple21 c d))))
  (r (set (tuple21 (tuple21 c d) (set (tuple21 c d))))))
  (= (mem (set1 (tuple2 (tuple2 c1 d1) (set1 (tuple2 c1 d1)))) (t2tb3434 r)
  (relation (set1 (tuple2 c1 d1)) (tuple2 c1 d1) (t2tb689 u) (t2tb688 v)))
  (forall ((x (tuple21 c d)) (y (set (tuple21 c d))))
  (=> (mem (tuple2 (tuple2 c1 d1) (set1 (tuple2 c1 d1)))
  (Tuple2 (tuple2 c1 d1) (set1 (tuple2 c1 d1)) (t2tb693 x) (t2tb689 y))
  (t2tb3434 r)) (and (mem21 x u) (mem22 y v)))))))

(declare-fun t2tb3827 ((set (set (tuple21 (tuple21 c d) (tuple21 c
  d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 c d) (tuple21 c d)))))) (sort
  (set1 (set1 (tuple2 (tuple2 c1 d1) (tuple2 c1 d1)))) (t2tb3827 x))))

(declare-fun tb2t3827 (uni) (set (set (tuple21 (tuple21 c d) (tuple21 c
  d)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 c d) (tuple21 c d))))))
  (! (= (tb2t3827 (t2tb3827 i)) i) :pattern ((t2tb3827 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 c1 d1) (tuple2 c1 d1)))) j)
     (= (t2tb3827 (tb2t3827 j)) j)) :pattern ((t2tb3827 (tb2t3827 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 c d))) (v (set (tuple21 c d)))
  (r (set (tuple21 (tuple21 c d) (tuple21 c d)))))
  (= (mem (set1 (tuple2 (tuple2 c1 d1) (tuple2 c1 d1))) (t2tb799 r)
  (relation (tuple2 c1 d1) (tuple2 c1 d1) (t2tb689 u) (t2tb689 v)))
  (forall ((x (tuple21 c d)) (y (tuple21 c d)))
  (=> (mem (tuple2 (tuple2 c1 d1) (tuple2 c1 d1))
  (Tuple2 (tuple2 c1 d1) (tuple2 c1 d1) (t2tb693 x) (t2tb693 y)) (t2tb799 r))
  (and (mem21 x u) (mem21 y v)))))))

(declare-fun t2tb3828 ((set (set (tuple21 (tuple21 c d) d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 c d) d))))) (sort
  (set1 (set1 (tuple2 (tuple2 c1 d1) d1))) (t2tb3828 x))))

(declare-fun tb2t3828 (uni) (set (set (tuple21 (tuple21 c d) d))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 c d) d)))))
  (! (= (tb2t3828 (t2tb3828 i)) i) :pattern ((t2tb3828 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 c1 d1) d1))) j)
     (= (t2tb3828 (tb2t3828 j)) j)) :pattern ((t2tb3828 (tb2t3828 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 c d))) (v (set d)) (r (set (tuple21 (tuple21 c d)
  d))))
  (= (mem (set1 (tuple2 (tuple2 c1 d1) d1)) (t2tb801 r)
  (relation d1 (tuple2 c1 d1) (t2tb689 u) (t2tb690 v)))
  (forall ((x (tuple21 c d)) (y d))
  (=> (mem (tuple2 (tuple2 c1 d1) d1)
  (Tuple2 (tuple2 c1 d1) d1 (t2tb693 x) (t2tb694 y)) (t2tb801 r))
  (and (mem21 x u) (mem20 y v)))))))

(declare-fun t2tb3829 ((set (set (tuple21 (tuple21 c d) c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 c d) c))))) (sort
  (set1 (set1 (tuple2 (tuple2 c1 d1) c1))) (t2tb3829 x))))

(declare-fun tb2t3829 (uni) (set (set (tuple21 (tuple21 c d) c))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 c d) c)))))
  (! (= (tb2t3829 (t2tb3829 i)) i) :pattern ((t2tb3829 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 c1 d1) c1))) j)
     (= (t2tb3829 (tb2t3829 j)) j)) :pattern ((t2tb3829 (tb2t3829 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 c d))) (v (set c)) (r (set (tuple21 (tuple21 c d)
  c))))
  (= (mem (set1 (tuple2 (tuple2 c1 d1) c1)) (t2tb805 r)
  (relation c1 (tuple2 c1 d1) (t2tb689 u) (t2tb132 v)))
  (forall ((x (tuple21 c d)) (y c))
  (=> (mem (tuple2 (tuple2 c1 d1) c1)
  (Tuple2 (tuple2 c1 d1) c1 (t2tb693 x) (t2tb135 y)) (t2tb805 r))
  (and (mem21 x u) (mem7 y v)))))))

(declare-fun t2tb3830 ((set (set (tuple21 (tuple21 c d) (set (tuple21 a
  b)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 c d) (set (tuple21 a b))))))) (sort
  (set1 (set1 (tuple2 (tuple2 c1 d1) (set1 (tuple2 a1 b1))))) (t2tb3830 x))))

(declare-fun tb2t3830 (uni) (set (set (tuple21 (tuple21 c d) (set (tuple21 a
  b))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 c d) (set (tuple21 a b)))))))
  (! (= (tb2t3830 (t2tb3830 i)) i) :pattern ((t2tb3830 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 c1 d1) (set1 (tuple2 a1 b1))))) j)
     (= (t2tb3830 (tb2t3830 j)) j)) :pattern ((t2tb3830 (tb2t3830 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 c d))) (v (set (set (tuple21 a b))))
  (r (set (tuple21 (tuple21 c d) (set (tuple21 a b))))))
  (= (mem (set1 (tuple2 (tuple2 c1 d1) (set1 (tuple2 a1 b1)))) (t2tb3436 r)
  (relation (set1 (tuple2 a1 b1)) (tuple2 c1 d1) (t2tb689 u) (t2tb10 v)))
  (forall ((x (tuple21 c d)) (y (set (tuple21 a b))))
  (=> (mem (tuple2 (tuple2 c1 d1) (set1 (tuple2 a1 b1)))
  (Tuple2 (tuple2 c1 d1) (set1 (tuple2 a1 b1)) (t2tb693 x) (t2tb11 y))
  (t2tb3436 r)) (and (mem21 x u) (mem4 y v)))))))

(declare-fun t2tb3831 ((set (set (tuple21 (tuple21 c d) (tuple21 a
  b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 c d) (tuple21 a b)))))) (sort
  (set1 (set1 (tuple2 (tuple2 c1 d1) (tuple2 a1 b1)))) (t2tb3831 x))))

(declare-fun tb2t3831 (uni) (set (set (tuple21 (tuple21 c d) (tuple21 a
  b)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 c d) (tuple21 a b))))))
  (! (= (tb2t3831 (t2tb3831 i)) i) :pattern ((t2tb3831 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 c1 d1) (tuple2 a1 b1)))) j)
     (= (t2tb3831 (tb2t3831 j)) j)) :pattern ((t2tb3831 (tb2t3831 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 c d))) (v (set (tuple21 a b)))
  (r (set (tuple21 (tuple21 c d) (tuple21 a b)))))
  (= (mem (set1 (tuple2 (tuple2 c1 d1) (tuple2 a1 b1))) (t2tb3438 r)
  (relation (tuple2 a1 b1) (tuple2 c1 d1) (t2tb689 u) (t2tb11 v)))
  (forall ((x (tuple21 c d)) (y (tuple21 a b)))
  (=> (mem (tuple2 (tuple2 c1 d1) (tuple2 a1 b1))
  (Tuple2 (tuple2 c1 d1) (tuple2 a1 b1) (t2tb693 x) (t2tb13 y)) (t2tb3438 r))
  (and (mem21 x u) (mem3 y v)))))))

(declare-fun t2tb3832 ((set (set (tuple21 (tuple21 c d) b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 c d) b))))) (sort
  (set1 (set1 (tuple2 (tuple2 c1 d1) b1))) (t2tb3832 x))))

(declare-fun tb2t3832 (uni) (set (set (tuple21 (tuple21 c d) b))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 c d) b)))))
  (! (= (tb2t3832 (t2tb3832 i)) i) :pattern ((t2tb3832 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 c1 d1) b1))) j)
     (= (t2tb3832 (tb2t3832 j)) j)) :pattern ((t2tb3832 (tb2t3832 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 c d))) (v (set b)) (r (set (tuple21 (tuple21 c d)
  b))))
  (= (mem (set1 (tuple2 (tuple2 c1 d1) b1)) (t2tb811 r)
  (relation b1 (tuple2 c1 d1) (t2tb689 u) (t2tb12 v)))
  (forall ((x (tuple21 c d)) (y b))
  (=> (mem (tuple2 (tuple2 c1 d1) b1)
  (Tuple2 (tuple2 c1 d1) b1 (t2tb693 x) (t2tb14 y)) (t2tb811 r))
  (and (mem21 x u) (mem2 y v)))))))

(declare-fun t2tb3833 ((set (set (tuple21 (tuple21 c d) a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 c d) a))))) (sort
  (set1 (set1 (tuple2 (tuple2 c1 d1) a1))) (t2tb3833 x))))

(declare-fun tb2t3833 (uni) (set (set (tuple21 (tuple21 c d) a))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 c d) a)))))
  (! (= (tb2t3833 (t2tb3833 i)) i) :pattern ((t2tb3833 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 c1 d1) a1))) j)
     (= (t2tb3833 (tb2t3833 j)) j)) :pattern ((t2tb3833 (tb2t3833 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 c d))) (v (set a)) (r (set (tuple21 (tuple21 c d)
  a))))
  (= (mem (set1 (tuple2 (tuple2 c1 d1) a1)) (t2tb813 r)
  (relation a1 (tuple2 c1 d1) (t2tb689 u) (t2tb1 v)))
  (forall ((x (tuple21 c d)) (y a))
  (=> (mem (tuple2 (tuple2 c1 d1) a1)
  (Tuple2 (tuple2 c1 d1) a1 (t2tb693 x) (t2tb2 y)) (t2tb813 r))
  (and (mem21 x u) (mem1 y v)))))))

;; mem_relation
  (assert
  (forall ((b2 ty))
  (forall ((u (set (tuple21 c d))) (v uni) (r uni))
  (and
  (=> (mem (set1 (tuple2 (tuple2 c1 d1) b2)) r
  (relation b2 (tuple2 c1 d1) (t2tb689 u) v))
  (forall ((x (tuple21 c d)) (y uni))
  (=> (mem (tuple2 (tuple2 c1 d1) b2)
  (Tuple2 (tuple2 c1 d1) b2 (t2tb693 x) y) r) (and (mem21 x u) (mem b2 y v)))))
  (=>
  (forall ((x (tuple21 c d)) (y uni))
  (=> (sort b2 y)
  (=> (mem (tuple2 (tuple2 c1 d1) b2)
  (Tuple2 (tuple2 c1 d1) b2 (t2tb693 x) y) r) (and (mem21 x u) (mem b2 y v)))))
  (mem (set1 (tuple2 (tuple2 c1 d1) b2)) r
  (relation b2 (tuple2 c1 d1) (t2tb689 u) v)))))))

(declare-fun t2tb3834 ((set (set (tuple21 d (tuple21 c f))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 d (tuple21 c f)))))) (sort
  (set1 (set1 (tuple2 d1 (tuple2 c1 f1)))) (t2tb3834 x))))

(declare-fun tb2t3834 (uni) (set (set (tuple21 d (tuple21 c f)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 d (tuple21 c f))))))
  (! (= (tb2t3834 (t2tb3834 i)) i) :pattern ((t2tb3834 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 d1 (tuple2 c1 f1)))) j)
     (= (t2tb3834 (tb2t3834 j)) j)) :pattern ((t2tb3834 (tb2t3834 j))) )))

;; mem_relation
  (assert
  (forall ((u (set d)) (v (set (tuple21 c f))) (r (set (tuple21 d (tuple21 c
  f)))))
  (= (mem (set1 (tuple2 d1 (tuple2 c1 f1))) (t2tb3440 r)
  (relation (tuple2 c1 f1) d1 (t2tb690 u) (t2tb2942 v)))
  (forall ((x d) (y (tuple21 c f)))
  (=> (mem (tuple2 d1 (tuple2 c1 f1))
  (Tuple2 d1 (tuple2 c1 f1) (t2tb694 x) (t2tb2948 y)) (t2tb3440 r))
  (and (mem20 x u) (mem45 y v)))))))

(declare-fun t2tb3835 ((set (set (tuple21 d (tuple21 a e))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 d (tuple21 a e)))))) (sort
  (set1 (set1 (tuple2 d1 (tuple2 a1 e1)))) (t2tb3835 x))))

(declare-fun tb2t3835 (uni) (set (set (tuple21 d (tuple21 a e)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 d (tuple21 a e))))))
  (! (= (tb2t3835 (t2tb3835 i)) i) :pattern ((t2tb3835 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 d1 (tuple2 a1 e1)))) j)
     (= (t2tb3835 (tb2t3835 j)) j)) :pattern ((t2tb3835 (tb2t3835 j))) )))

;; mem_relation
  (assert
  (forall ((u (set d)) (v (set (tuple21 a e))) (r (set (tuple21 d (tuple21 a
  e)))))
  (= (mem (set1 (tuple2 d1 (tuple2 a1 e1))) (t2tb3442 r)
  (relation (tuple2 a1 e1) d1 (t2tb690 u) (t2tb2943 v)))
  (forall ((x d) (y (tuple21 a e)))
  (=> (mem (tuple2 d1 (tuple2 a1 e1))
  (Tuple2 d1 (tuple2 a1 e1) (t2tb694 x) (t2tb2949 y)) (t2tb3442 r))
  (and (mem20 x u) (mem44 y v)))))))

(declare-fun t2tb3836 ((set (set (tuple21 d (tuple21 (tuple21 b d) (tuple21 e
  f)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 d (tuple21 (tuple21 b d) (tuple21 e f)))))))
  (sort (set1 (set1 (tuple2 d1 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)))))
  (t2tb3836 x))))

(declare-fun tb2t3836 (uni) (set (set (tuple21 d (tuple21 (tuple21 b d)
  (tuple21 e f))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 d (tuple21 (tuple21 b d) (tuple21 e f)))))))
  (! (= (tb2t3836 (t2tb3836 i)) i) :pattern ((t2tb3836 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 d1 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1))))) j)
     (= (t2tb3836 (tb2t3836 j)) j)) :pattern ((t2tb3836 (tb2t3836 j))) )))

;; mem_relation
  (assert
  (forall ((u (set d)) (v (set (tuple21 (tuple21 b d) (tuple21 e f))))
  (r (set (tuple21 d (tuple21 (tuple21 b d) (tuple21 e f))))))
  (= (mem (set1 (tuple2 d1 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1))))
  (t2tb3444 r)
  (relation (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) d1 (t2tb690 u)
  (t2tb2944 v)))
  (forall ((x d) (y (tuple21 (tuple21 b d) (tuple21 e f))))
  (=> (mem (tuple2 d1 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)))
  (Tuple2 d1 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (t2tb694 x) (t2tb2950 y))
  (t2tb3444 r)) (and (mem20 x u) (mem43 y v)))))))

(declare-fun t2tb3837 ((set (set (tuple21 d (tuple21 (tuple21 a c) (tuple21 e
  f)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 d (tuple21 (tuple21 a c) (tuple21 e f)))))))
  (sort (set1 (set1 (tuple2 d1 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)))))
  (t2tb3837 x))))

(declare-fun tb2t3837 (uni) (set (set (tuple21 d (tuple21 (tuple21 a c)
  (tuple21 e f))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 d (tuple21 (tuple21 a c) (tuple21 e f)))))))
  (! (= (tb2t3837 (t2tb3837 i)) i) :pattern ((t2tb3837 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 d1 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1))))) j)
     (= (t2tb3837 (tb2t3837 j)) j)) :pattern ((t2tb3837 (tb2t3837 j))) )))

;; mem_relation
  (assert
  (forall ((u (set d)) (v (set (tuple21 (tuple21 a c) (tuple21 e f))))
  (r (set (tuple21 d (tuple21 (tuple21 a c) (tuple21 e f))))))
  (= (mem (set1 (tuple2 d1 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1))))
  (t2tb3446 r)
  (relation (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) d1 (t2tb690 u)
  (t2tb2945 v)))
  (forall ((x d) (y (tuple21 (tuple21 a c) (tuple21 e f))))
  (=> (mem (tuple2 d1 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)))
  (Tuple2 d1 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (t2tb694 x) (t2tb2951 y))
  (t2tb3446 r)) (and (mem20 x u) (mem42 y v)))))))

(declare-fun t2tb3838 ((set (set (tuple21 d (set (tuple21 d f)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 d (set (tuple21 d f))))))) (sort
  (set1 (set1 (tuple2 d1 (set1 (tuple2 d1 f1))))) (t2tb3838 x))))

(declare-fun tb2t3838 (uni) (set (set (tuple21 d (set (tuple21 d f))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 d (set (tuple21 d f)))))))
  (! (= (tb2t3838 (t2tb3838 i)) i) :pattern ((t2tb3838 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 d1 (set1 (tuple2 d1 f1))))) j)
     (= (t2tb3838 (tb2t3838 j)) j)) :pattern ((t2tb3838 (tb2t3838 j))) )))

;; mem_relation
  (assert
  (forall ((u (set d)) (v (set (set (tuple21 d f)))) (r (set (tuple21 d
  (set (tuple21 d f))))))
  (= (mem (set1 (tuple2 d1 (set1 (tuple2 d1 f1)))) (t2tb3448 r)
  (relation (set1 (tuple2 d1 f1)) d1 (t2tb690 u) (t2tb2939 v)))
  (forall ((x d) (y (set (tuple21 d f))))
  (=> (mem (tuple2 d1 (set1 (tuple2 d1 f1)))
  (Tuple2 d1 (set1 (tuple2 d1 f1)) (t2tb694 x) (t2tb2938 y)) (t2tb3448 r))
  (and (mem20 x u) (mem41 y v)))))))

(declare-fun t2tb3839 ((set (set (tuple21 d (tuple21 d f))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 d (tuple21 d f)))))) (sort
  (set1 (set1 (tuple2 d1 (tuple2 d1 f1)))) (t2tb3839 x))))

(declare-fun tb2t3839 (uni) (set (set (tuple21 d (tuple21 d f)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 d (tuple21 d f))))))
  (! (= (tb2t3839 (t2tb3839 i)) i) :pattern ((t2tb3839 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 d1 (tuple2 d1 f1)))) j)
     (= (t2tb3839 (tb2t3839 j)) j)) :pattern ((t2tb3839 (tb2t3839 j))) )))

;; mem_relation
  (assert
  (forall ((u (set d)) (v (set (tuple21 d f))) (r (set (tuple21 d (tuple21 d
  f)))))
  (= (mem (set1 (tuple2 d1 (tuple2 d1 f1))) (t2tb3450 r)
  (relation (tuple2 d1 f1) d1 (t2tb690 u) (t2tb2938 v)))
  (forall ((x d) (y (tuple21 d f)))
  (=> (mem (tuple2 d1 (tuple2 d1 f1))
  (Tuple2 d1 (tuple2 d1 f1) (t2tb694 x) (t2tb2952 y)) (t2tb3450 r))
  (and (mem20 x u) (mem40 y v)))))))

(declare-fun t2tb3840 ((set (set (tuple21 d (set (tuple21 b e)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 d (set (tuple21 b e))))))) (sort
  (set1 (set1 (tuple2 d1 (set1 (tuple2 b1 e1))))) (t2tb3840 x))))

(declare-fun tb2t3840 (uni) (set (set (tuple21 d (set (tuple21 b e))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 d (set (tuple21 b e)))))))
  (! (= (tb2t3840 (t2tb3840 i)) i) :pattern ((t2tb3840 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 d1 (set1 (tuple2 b1 e1))))) j)
     (= (t2tb3840 (tb2t3840 j)) j)) :pattern ((t2tb3840 (tb2t3840 j))) )))

;; mem_relation
  (assert
  (forall ((u (set d)) (v (set (set (tuple21 b e)))) (r (set (tuple21 d
  (set (tuple21 b e))))))
  (= (mem (set1 (tuple2 d1 (set1 (tuple2 b1 e1)))) (t2tb3452 r)
  (relation (set1 (tuple2 b1 e1)) d1 (t2tb690 u) (t2tb2941 v)))
  (forall ((x d) (y (set (tuple21 b e))))
  (=> (mem (tuple2 d1 (set1 (tuple2 b1 e1)))
  (Tuple2 d1 (set1 (tuple2 b1 e1)) (t2tb694 x) (t2tb2940 y)) (t2tb3452 r))
  (and (mem20 x u) (mem39 y v)))))))

(declare-fun t2tb3841 ((set (set (tuple21 d (tuple21 b e))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 d (tuple21 b e)))))) (sort
  (set1 (set1 (tuple2 d1 (tuple2 b1 e1)))) (t2tb3841 x))))

(declare-fun tb2t3841 (uni) (set (set (tuple21 d (tuple21 b e)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 d (tuple21 b e))))))
  (! (= (tb2t3841 (t2tb3841 i)) i) :pattern ((t2tb3841 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 d1 (tuple2 b1 e1)))) j)
     (= (t2tb3841 (tb2t3841 j)) j)) :pattern ((t2tb3841 (tb2t3841 j))) )))

;; mem_relation
  (assert
  (forall ((u (set d)) (v (set (tuple21 b e))) (r (set (tuple21 d (tuple21 b
  e)))))
  (= (mem (set1 (tuple2 d1 (tuple2 b1 e1))) (t2tb3454 r)
  (relation (tuple2 b1 e1) d1 (t2tb690 u) (t2tb2940 v)))
  (forall ((x d) (y (tuple21 b e)))
  (=> (mem (tuple2 d1 (tuple2 b1 e1))
  (Tuple2 d1 (tuple2 b1 e1) (t2tb694 x) (t2tb2953 y)) (t2tb3454 r))
  (and (mem20 x u) (mem38 y v)))))))

;; mem_relation
  (assert
  (forall ((u (set d)) (v (set f)) (r (set (tuple21 d f))))
  (= (mem41 r (relation10 u v))
  (forall ((x d) (y f))
  (=> (mem40 (tb2t2952 (Tuple2 d1 f1 (t2tb694 x) (t2tb2954 y))) r)
  (and (mem20 x u) (mem37 y v)))))))

(declare-fun t2tb3842 ((set (set (tuple21 d e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 d e))))) (sort (set1 (set1 (tuple2 d1 e1)))
  (t2tb3842 x))))

(declare-fun tb2t3842 (uni) (set (set (tuple21 d e))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 d e)))))
  (! (= (tb2t3842 (t2tb3842 i)) i) :pattern ((t2tb3842 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 d1 e1))) j) (= (t2tb3842 (tb2t3842 j)) j)) :pattern (
  (t2tb3842 (tb2t3842 j))) )))

;; mem_relation
  (assert
  (forall ((u (set d)) (v (set e)) (r (set (tuple21 d e))))
  (= (mem (set1 (tuple2 d1 e1)) (t2tb3456 r)
  (relation e1 d1 (t2tb690 u) (t2tb2947 v)))
  (forall ((x d) (y e))
  (=> (mem (tuple2 d1 e1) (Tuple2 d1 e1 (t2tb694 x) (t2tb2955 y))
  (t2tb3456 r)) (and (mem20 x u) (mem36 y v)))))))

(declare-fun t2tb3843 ((set (set (tuple21 d (tuple21 (tuple21 a c) (tuple21 b
  d)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 d (tuple21 (tuple21 a c) (tuple21 b d)))))))
  (sort (set1 (set1 (tuple2 d1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))))
  (t2tb3843 x))))

(declare-fun tb2t3843 (uni) (set (set (tuple21 d (tuple21 (tuple21 a c)
  (tuple21 b d))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 d (tuple21 (tuple21 a c) (tuple21 b d)))))))
  (! (= (tb2t3843 (t2tb3843 i)) i) :pattern ((t2tb3843 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 d1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))))) j)
     (= (t2tb3843 (tb2t3843 j)) j)) :pattern ((t2tb3843 (tb2t3843 j))) )))

;; mem_relation
  (assert
  (forall ((u (set d)) (v (set (tuple21 (tuple21 a c) (tuple21 b d))))
  (r (set (tuple21 d (tuple21 (tuple21 a c) (tuple21 b d))))))
  (= (mem (set1 (tuple2 d1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))))
  (t2tb3458 r)
  (relation (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) d1 (t2tb690 u)
  (t2tb686 v)))
  (forall ((x d) (y (tuple21 (tuple21 a c) (tuple21 b d))))
  (=> (mem (tuple2 d1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
  (Tuple2 d1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb694 x) (t2tb691 y))
  (t2tb3458 r)) (and (mem20 x u) (mem24 y v)))))))

(declare-fun t2tb3844 ((set (set (tuple21 d (set (tuple21 c d)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 d (set (tuple21 c d))))))) (sort
  (set1 (set1 (tuple2 d1 (set1 (tuple2 c1 d1))))) (t2tb3844 x))))

(declare-fun tb2t3844 (uni) (set (set (tuple21 d (set (tuple21 c d))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 d (set (tuple21 c d)))))))
  (! (= (tb2t3844 (t2tb3844 i)) i) :pattern ((t2tb3844 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 d1 (set1 (tuple2 c1 d1))))) j)
     (= (t2tb3844 (tb2t3844 j)) j)) :pattern ((t2tb3844 (tb2t3844 j))) )))

;; mem_relation
  (assert
  (forall ((u (set d)) (v (set (set (tuple21 c d)))) (r (set (tuple21 d
  (set (tuple21 c d))))))
  (= (mem (set1 (tuple2 d1 (set1 (tuple2 c1 d1)))) (t2tb3460 r)
  (relation (set1 (tuple2 c1 d1)) d1 (t2tb690 u) (t2tb688 v)))
  (forall ((x d) (y (set (tuple21 c d))))
  (=> (mem (tuple2 d1 (set1 (tuple2 c1 d1)))
  (Tuple2 d1 (set1 (tuple2 c1 d1)) (t2tb694 x) (t2tb689 y)) (t2tb3460 r))
  (and (mem20 x u) (mem22 y v)))))))

(declare-fun t2tb3845 ((set (set (tuple21 d (tuple21 c d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 d (tuple21 c d)))))) (sort
  (set1 (set1 (tuple2 d1 (tuple2 c1 d1)))) (t2tb3845 x))))

(declare-fun tb2t3845 (uni) (set (set (tuple21 d (tuple21 c d)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 d (tuple21 c d))))))
  (! (= (tb2t3845 (t2tb3845 i)) i) :pattern ((t2tb3845 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 d1 (tuple2 c1 d1)))) j)
     (= (t2tb3845 (tb2t3845 j)) j)) :pattern ((t2tb3845 (tb2t3845 j))) )))

;; mem_relation
  (assert
  (forall ((u (set d)) (v (set (tuple21 c d))) (r (set (tuple21 d (tuple21 c
  d)))))
  (= (mem (set1 (tuple2 d1 (tuple2 c1 d1))) (t2tb823 r)
  (relation (tuple2 c1 d1) d1 (t2tb690 u) (t2tb689 v)))
  (forall ((x d) (y (tuple21 c d)))
  (=> (mem (tuple2 d1 (tuple2 c1 d1))
  (Tuple2 d1 (tuple2 c1 d1) (t2tb694 x) (t2tb693 y)) (t2tb823 r))
  (and (mem20 x u) (mem21 y v)))))))

(declare-fun t2tb974 ((set (set (tuple21 d d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 d d))))) (sort (set1 (set1 (tuple2 d1 d1)))
  (t2tb974 x))))

(declare-fun tb2t974 (uni) (set (set (tuple21 d d))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 d d)))))
  (! (= (tb2t974 (t2tb974 i)) i) :pattern ((t2tb974 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 d1 d1))) j) (= (t2tb974 (tb2t974 j)) j)) :pattern (
  (t2tb974 (tb2t974 j))) )))

;; mem_relation
  (assert
  (forall ((u (set d)) (v (set d)) (r (set (tuple21 d d))))
  (= (mem (set1 (tuple2 d1 d1)) (t2tb825 r)
  (relation d1 d1 (t2tb690 u) (t2tb690 v)))
  (forall ((x d) (y d))
  (=> (mem (tuple2 d1 d1) (Tuple2 d1 d1 (t2tb694 x) (t2tb694 y)) (t2tb825 r))
  (and (mem20 x u) (mem20 y v)))))))

(declare-fun t2tb976 ((set (set (tuple21 d c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 d c))))) (sort (set1 (set1 (tuple2 d1 c1)))
  (t2tb976 x))))

(declare-fun tb2t976 (uni) (set (set (tuple21 d c))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 d c)))))
  (! (= (tb2t976 (t2tb976 i)) i) :pattern ((t2tb976 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 d1 c1))) j) (= (t2tb976 (tb2t976 j)) j)) :pattern (
  (t2tb976 (tb2t976 j))) )))

;; mem_relation
  (assert
  (forall ((u (set d)) (v (set c)) (r (set (tuple21 d c))))
  (= (mem (set1 (tuple2 d1 c1)) (t2tb829 r)
  (relation c1 d1 (t2tb690 u) (t2tb132 v)))
  (forall ((x d) (y c))
  (=> (mem (tuple2 d1 c1) (Tuple2 d1 c1 (t2tb694 x) (t2tb135 y)) (t2tb829 r))
  (and (mem20 x u) (mem7 y v)))))))

(declare-fun t2tb977 ((set (set (tuple21 d (set (tuple21 a b)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 d (set (tuple21 a b))))))) (sort
  (set1 (set1 (tuple2 d1 (set1 (tuple2 a1 b1))))) (t2tb977 x))))

(declare-fun tb2t977 (uni) (set (set (tuple21 d (set (tuple21 a b))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 d (set (tuple21 a b)))))))
  (! (= (tb2t977 (t2tb977 i)) i) :pattern ((t2tb977 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 d1 (set1 (tuple2 a1 b1))))) j)
     (= (t2tb977 (tb2t977 j)) j)) :pattern ((t2tb977 (tb2t977 j))) )))

;; mem_relation
  (assert
  (forall ((u (set d)) (v (set (set (tuple21 a b)))) (r (set (tuple21 d
  (set (tuple21 a b))))))
  (= (mem (set1 (tuple2 d1 (set1 (tuple2 a1 b1)))) (t2tb831 r)
  (relation (set1 (tuple2 a1 b1)) d1 (t2tb690 u) (t2tb10 v)))
  (forall ((x d) (y (set (tuple21 a b))))
  (=> (mem (tuple2 d1 (set1 (tuple2 a1 b1)))
  (Tuple2 d1 (set1 (tuple2 a1 b1)) (t2tb694 x) (t2tb11 y)) (t2tb831 r))
  (and (mem20 x u) (mem4 y v)))))))

(declare-fun t2tb978 ((set (set (tuple21 d (tuple21 a b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 d (tuple21 a b)))))) (sort
  (set1 (set1 (tuple2 d1 (tuple2 a1 b1)))) (t2tb978 x))))

(declare-fun tb2t978 (uni) (set (set (tuple21 d (tuple21 a b)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 d (tuple21 a b))))))
  (! (= (tb2t978 (t2tb978 i)) i) :pattern ((t2tb978 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 d1 (tuple2 a1 b1)))) j)
     (= (t2tb978 (tb2t978 j)) j)) :pattern ((t2tb978 (tb2t978 j))) )))

;; mem_relation
  (assert
  (forall ((u (set d)) (v (set (tuple21 a b))) (r (set (tuple21 d (tuple21 a
  b)))))
  (= (mem (set1 (tuple2 d1 (tuple2 a1 b1))) (t2tb833 r)
  (relation (tuple2 a1 b1) d1 (t2tb690 u) (t2tb11 v)))
  (forall ((x d) (y (tuple21 a b)))
  (=> (mem (tuple2 d1 (tuple2 a1 b1))
  (Tuple2 d1 (tuple2 a1 b1) (t2tb694 x) (t2tb13 y)) (t2tb833 r))
  (and (mem20 x u) (mem3 y v)))))))

(declare-fun t2tb979 ((set (set (tuple21 d b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 d b))))) (sort (set1 (set1 (tuple2 d1 b1)))
  (t2tb979 x))))

(declare-fun tb2t979 (uni) (set (set (tuple21 d b))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 d b)))))
  (! (= (tb2t979 (t2tb979 i)) i) :pattern ((t2tb979 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 d1 b1))) j) (= (t2tb979 (tb2t979 j)) j)) :pattern (
  (t2tb979 (tb2t979 j))) )))

;; mem_relation
  (assert
  (forall ((u (set d)) (v (set b)) (r (set (tuple21 d b))))
  (= (mem (set1 (tuple2 d1 b1)) (t2tb835 r)
  (relation b1 d1 (t2tb690 u) (t2tb12 v)))
  (forall ((x d) (y b))
  (=> (mem (tuple2 d1 b1) (Tuple2 d1 b1 (t2tb694 x) (t2tb14 y)) (t2tb835 r))
  (and (mem20 x u) (mem2 y v)))))))

(declare-fun t2tb980 ((set (set (tuple21 d a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 d a))))) (sort (set1 (set1 (tuple2 d1 a1)))
  (t2tb980 x))))

(declare-fun tb2t980 (uni) (set (set (tuple21 d a))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 d a)))))
  (! (= (tb2t980 (t2tb980 i)) i) :pattern ((t2tb980 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 d1 a1))) j) (= (t2tb980 (tb2t980 j)) j)) :pattern (
  (t2tb980 (tb2t980 j))) )))

;; mem_relation
  (assert
  (forall ((u (set d)) (v (set a)) (r (set (tuple21 d a))))
  (= (mem (set1 (tuple2 d1 a1)) (t2tb837 r)
  (relation a1 d1 (t2tb690 u) (t2tb1 v)))
  (forall ((x d) (y a))
  (=> (mem (tuple2 d1 a1) (Tuple2 d1 a1 (t2tb694 x) (t2tb2 y)) (t2tb837 r))
  (and (mem20 x u) (mem1 y v)))))))

;; mem_relation
  (assert
  (forall ((b2 ty))
  (forall ((u (set d)) (v uni) (r uni))
  (and
  (=> (mem (set1 (tuple2 d1 b2)) r (relation b2 d1 (t2tb690 u) v))
  (forall ((x d) (y uni))
  (=> (mem (tuple2 d1 b2) (Tuple2 d1 b2 (t2tb694 x) y) r)
  (and (mem20 x u) (mem b2 y v)))))
  (=>
  (forall ((x d) (y uni))
  (=> (sort b2 y)
  (=> (mem (tuple2 d1 b2) (Tuple2 d1 b2 (t2tb694 x) y) r)
  (and (mem20 x u) (mem b2 y v))))) (mem (set1 (tuple2 d1 b2)) r
  (relation b2 d1 (t2tb690 u) v)))))))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a c))) (v (set (tuple21 e f)))
  (r (set (tuple21 (tuple21 a c) (tuple21 e f)))))
  (= (mem (set1 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1))) (t2tb2945 r)
  (relation (tuple2 e1 f1) (tuple2 a1 c1) (t2tb129 u) (t2tb3314 v)))
  (forall ((x (tuple21 a c)) (y (tuple21 e f)))
  (=> (mem42
  (tb2t2951 (Tuple2 (tuple2 a1 c1) (tuple2 e1 f1) (t2tb133 x) (t2tb3315 y)))
  r)
  (and (mem (tuple2 a1 c1) (t2tb133 x) (t2tb129 u)) (mem (tuple2 e1 f1)
  (t2tb3315 y) (t2tb3314 v))))))))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a c))) (v (set (tuple21 b d)))
  (r (set (tuple21 (tuple21 a c) (tuple21 b d)))))
  (= (mem (set1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))) (t2tb686 r)
  (relation (tuple2 b1 d1) (tuple2 a1 c1) (t2tb129 u) (t2tb687 v)))
  (forall ((x (tuple21 a c)) (y (tuple21 b d)))
  (=> (mem24
  (tb2t691 (Tuple2 (tuple2 a1 c1) (tuple2 b1 d1) (t2tb133 x) (t2tb692 y))) r)
  (and (mem (tuple2 a1 c1) (t2tb133 x) (t2tb129 u)) (mem (tuple2 b1 d1)
  (t2tb692 y) (t2tb687 v))))))))

(declare-fun t2tb3846 ((set (set (tuple21 c (tuple21 c f))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 c (tuple21 c f)))))) (sort
  (set1 (set1 (tuple2 c1 (tuple2 c1 f1)))) (t2tb3846 x))))

(declare-fun tb2t3846 (uni) (set (set (tuple21 c (tuple21 c f)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 c (tuple21 c f))))))
  (! (= (tb2t3846 (t2tb3846 i)) i) :pattern ((t2tb3846 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 c1 (tuple2 c1 f1)))) j)
     (= (t2tb3846 (tb2t3846 j)) j)) :pattern ((t2tb3846 (tb2t3846 j))) )))

;; mem_relation
  (assert
  (forall ((u (set c)) (v (set (tuple21 c f))) (r (set (tuple21 c (tuple21 c
  f)))))
  (= (mem (set1 (tuple2 c1 (tuple2 c1 f1))) (t2tb3462 r)
  (relation (tuple2 c1 f1) c1 (t2tb132 u) (t2tb2942 v)))
  (forall ((x c) (y (tuple21 c f)))
  (=> (mem (tuple2 c1 (tuple2 c1 f1))
  (Tuple2 c1 (tuple2 c1 f1) (t2tb135 x) (t2tb2948 y)) (t2tb3462 r))
  (and (mem7 x u) (mem45 y v)))))))

(declare-fun t2tb3847 ((set (set (tuple21 c (tuple21 a e))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 c (tuple21 a e)))))) (sort
  (set1 (set1 (tuple2 c1 (tuple2 a1 e1)))) (t2tb3847 x))))

(declare-fun tb2t3847 (uni) (set (set (tuple21 c (tuple21 a e)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 c (tuple21 a e))))))
  (! (= (tb2t3847 (t2tb3847 i)) i) :pattern ((t2tb3847 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 c1 (tuple2 a1 e1)))) j)
     (= (t2tb3847 (tb2t3847 j)) j)) :pattern ((t2tb3847 (tb2t3847 j))) )))

;; mem_relation
  (assert
  (forall ((u (set c)) (v (set (tuple21 a e))) (r (set (tuple21 c (tuple21 a
  e)))))
  (= (mem (set1 (tuple2 c1 (tuple2 a1 e1))) (t2tb3464 r)
  (relation (tuple2 a1 e1) c1 (t2tb132 u) (t2tb2943 v)))
  (forall ((x c) (y (tuple21 a e)))
  (=> (mem (tuple2 c1 (tuple2 a1 e1))
  (Tuple2 c1 (tuple2 a1 e1) (t2tb135 x) (t2tb2949 y)) (t2tb3464 r))
  (and (mem7 x u) (mem44 y v)))))))

(declare-fun t2tb3848 ((set (set (tuple21 c (tuple21 (tuple21 b d) (tuple21 e
  f)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 c (tuple21 (tuple21 b d) (tuple21 e f)))))))
  (sort (set1 (set1 (tuple2 c1 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)))))
  (t2tb3848 x))))

(declare-fun tb2t3848 (uni) (set (set (tuple21 c (tuple21 (tuple21 b d)
  (tuple21 e f))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 c (tuple21 (tuple21 b d) (tuple21 e f)))))))
  (! (= (tb2t3848 (t2tb3848 i)) i) :pattern ((t2tb3848 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 c1 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1))))) j)
     (= (t2tb3848 (tb2t3848 j)) j)) :pattern ((t2tb3848 (tb2t3848 j))) )))

;; mem_relation
  (assert
  (forall ((u (set c)) (v (set (tuple21 (tuple21 b d) (tuple21 e f))))
  (r (set (tuple21 c (tuple21 (tuple21 b d) (tuple21 e f))))))
  (= (mem (set1 (tuple2 c1 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1))))
  (t2tb3467 r)
  (relation (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) c1 (t2tb132 u)
  (t2tb2944 v)))
  (forall ((x c) (y (tuple21 (tuple21 b d) (tuple21 e f))))
  (=> (mem (tuple2 c1 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)))
  (Tuple2 c1 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (t2tb135 x) (t2tb2950 y))
  (t2tb3467 r)) (and (mem7 x u) (mem43 y v)))))))

(declare-fun t2tb3849 ((set (set (tuple21 c (tuple21 (tuple21 a c) (tuple21 e
  f)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 c (tuple21 (tuple21 a c) (tuple21 e f)))))))
  (sort (set1 (set1 (tuple2 c1 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)))))
  (t2tb3849 x))))

(declare-fun tb2t3849 (uni) (set (set (tuple21 c (tuple21 (tuple21 a c)
  (tuple21 e f))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 c (tuple21 (tuple21 a c) (tuple21 e f)))))))
  (! (= (tb2t3849 (t2tb3849 i)) i) :pattern ((t2tb3849 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 c1 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1))))) j)
     (= (t2tb3849 (tb2t3849 j)) j)) :pattern ((t2tb3849 (tb2t3849 j))) )))

;; mem_relation
  (assert
  (forall ((u (set c)) (v (set (tuple21 (tuple21 a c) (tuple21 e f))))
  (r (set (tuple21 c (tuple21 (tuple21 a c) (tuple21 e f))))))
  (= (mem (set1 (tuple2 c1 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1))))
  (t2tb3468 r)
  (relation (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) c1 (t2tb132 u)
  (t2tb2945 v)))
  (forall ((x c) (y (tuple21 (tuple21 a c) (tuple21 e f))))
  (=> (mem (tuple2 c1 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)))
  (Tuple2 c1 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (t2tb135 x) (t2tb2951 y))
  (t2tb3468 r)) (and (mem7 x u) (mem42 y v)))))))

(declare-fun t2tb3850 ((set (set (tuple21 c (set (tuple21 d f)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 c (set (tuple21 d f))))))) (sort
  (set1 (set1 (tuple2 c1 (set1 (tuple2 d1 f1))))) (t2tb3850 x))))

(declare-fun tb2t3850 (uni) (set (set (tuple21 c (set (tuple21 d f))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 c (set (tuple21 d f)))))))
  (! (= (tb2t3850 (t2tb3850 i)) i) :pattern ((t2tb3850 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 c1 (set1 (tuple2 d1 f1))))) j)
     (= (t2tb3850 (tb2t3850 j)) j)) :pattern ((t2tb3850 (tb2t3850 j))) )))

;; mem_relation
  (assert
  (forall ((u (set c)) (v (set (set (tuple21 d f)))) (r (set (tuple21 c
  (set (tuple21 d f))))))
  (= (mem (set1 (tuple2 c1 (set1 (tuple2 d1 f1)))) (t2tb3470 r)
  (relation (set1 (tuple2 d1 f1)) c1 (t2tb132 u) (t2tb2939 v)))
  (forall ((x c) (y (set (tuple21 d f))))
  (=> (mem (tuple2 c1 (set1 (tuple2 d1 f1)))
  (Tuple2 c1 (set1 (tuple2 d1 f1)) (t2tb135 x) (t2tb2938 y)) (t2tb3470 r))
  (and (mem7 x u) (mem41 y v)))))))

(declare-fun t2tb3851 ((set (set (tuple21 c (tuple21 d f))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 c (tuple21 d f)))))) (sort
  (set1 (set1 (tuple2 c1 (tuple2 d1 f1)))) (t2tb3851 x))))

(declare-fun tb2t3851 (uni) (set (set (tuple21 c (tuple21 d f)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 c (tuple21 d f))))))
  (! (= (tb2t3851 (t2tb3851 i)) i) :pattern ((t2tb3851 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 c1 (tuple2 d1 f1)))) j)
     (= (t2tb3851 (tb2t3851 j)) j)) :pattern ((t2tb3851 (tb2t3851 j))) )))

;; mem_relation
  (assert
  (forall ((u (set c)) (v (set (tuple21 d f))) (r (set (tuple21 c (tuple21 d
  f)))))
  (= (mem (set1 (tuple2 c1 (tuple2 d1 f1))) (t2tb3472 r)
  (relation (tuple2 d1 f1) c1 (t2tb132 u) (t2tb2938 v)))
  (forall ((x c) (y (tuple21 d f)))
  (=> (mem (tuple2 c1 (tuple2 d1 f1))
  (Tuple2 c1 (tuple2 d1 f1) (t2tb135 x) (t2tb2952 y)) (t2tb3472 r))
  (and (mem7 x u) (mem40 y v)))))))

(declare-fun t2tb3852 ((set (set (tuple21 c (set (tuple21 b e)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 c (set (tuple21 b e))))))) (sort
  (set1 (set1 (tuple2 c1 (set1 (tuple2 b1 e1))))) (t2tb3852 x))))

(declare-fun tb2t3852 (uni) (set (set (tuple21 c (set (tuple21 b e))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 c (set (tuple21 b e)))))))
  (! (= (tb2t3852 (t2tb3852 i)) i) :pattern ((t2tb3852 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 c1 (set1 (tuple2 b1 e1))))) j)
     (= (t2tb3852 (tb2t3852 j)) j)) :pattern ((t2tb3852 (tb2t3852 j))) )))

;; mem_relation
  (assert
  (forall ((u (set c)) (v (set (set (tuple21 b e)))) (r (set (tuple21 c
  (set (tuple21 b e))))))
  (= (mem (set1 (tuple2 c1 (set1 (tuple2 b1 e1)))) (t2tb3474 r)
  (relation (set1 (tuple2 b1 e1)) c1 (t2tb132 u) (t2tb2941 v)))
  (forall ((x c) (y (set (tuple21 b e))))
  (=> (mem (tuple2 c1 (set1 (tuple2 b1 e1)))
  (Tuple2 c1 (set1 (tuple2 b1 e1)) (t2tb135 x) (t2tb2940 y)) (t2tb3474 r))
  (and (mem7 x u) (mem39 y v)))))))

(declare-fun t2tb3853 ((set (set (tuple21 c (tuple21 b e))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 c (tuple21 b e)))))) (sort
  (set1 (set1 (tuple2 c1 (tuple2 b1 e1)))) (t2tb3853 x))))

(declare-fun tb2t3853 (uni) (set (set (tuple21 c (tuple21 b e)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 c (tuple21 b e))))))
  (! (= (tb2t3853 (t2tb3853 i)) i) :pattern ((t2tb3853 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 c1 (tuple2 b1 e1)))) j)
     (= (t2tb3853 (tb2t3853 j)) j)) :pattern ((t2tb3853 (tb2t3853 j))) )))

;; mem_relation
  (assert
  (forall ((u (set c)) (v (set (tuple21 b e))) (r (set (tuple21 c (tuple21 b
  e)))))
  (= (mem (set1 (tuple2 c1 (tuple2 b1 e1))) (t2tb3476 r)
  (relation (tuple2 b1 e1) c1 (t2tb132 u) (t2tb2940 v)))
  (forall ((x c) (y (tuple21 b e)))
  (=> (mem (tuple2 c1 (tuple2 b1 e1))
  (Tuple2 c1 (tuple2 b1 e1) (t2tb135 x) (t2tb2953 y)) (t2tb3476 r))
  (and (mem7 x u) (mem38 y v)))))))

;; mem_relation
  (assert
  (forall ((u (set c)) (v (set f)) (r (set (tuple21 c f))))
  (= (mem (set1 (tuple2 c1 f1)) (t2tb2942 r)
  (relation f1 c1 (t2tb132 u) (t2tb2946 v)))
  (forall ((x c) (y f))
  (=> (mem45 (tb2t2948 (Tuple2 c1 f1 (t2tb135 x) (t2tb2954 y))) r)
  (and (mem7 x u) (mem37 y v)))))))

(declare-fun t2tb3854 ((set (set (tuple21 c e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 c e))))) (sort (set1 (set1 (tuple2 c1 e1)))
  (t2tb3854 x))))

(declare-fun tb2t3854 (uni) (set (set (tuple21 c e))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 c e)))))
  (! (= (tb2t3854 (t2tb3854 i)) i) :pattern ((t2tb3854 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 c1 e1))) j) (= (t2tb3854 (tb2t3854 j)) j)) :pattern (
  (t2tb3854 (tb2t3854 j))) )))

;; mem_relation
  (assert
  (forall ((u (set c)) (v (set e)) (r (set (tuple21 c e))))
  (= (mem (set1 (tuple2 c1 e1)) (t2tb3478 r)
  (relation e1 c1 (t2tb132 u) (t2tb2947 v)))
  (forall ((x c) (y e))
  (=> (mem (tuple2 c1 e1) (Tuple2 c1 e1 (t2tb135 x) (t2tb2955 y))
  (t2tb3478 r)) (and (mem7 x u) (mem36 y v)))))))

(declare-fun t2tb3855 ((set (set (tuple21 c (tuple21 (tuple21 a c) (tuple21 b
  d)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 c (tuple21 (tuple21 a c) (tuple21 b d)))))))
  (sort (set1 (set1 (tuple2 c1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))))
  (t2tb3855 x))))

(declare-fun tb2t3855 (uni) (set (set (tuple21 c (tuple21 (tuple21 a c)
  (tuple21 b d))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 c (tuple21 (tuple21 a c) (tuple21 b d)))))))
  (! (= (tb2t3855 (t2tb3855 i)) i) :pattern ((t2tb3855 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 c1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))))) j)
     (= (t2tb3855 (tb2t3855 j)) j)) :pattern ((t2tb3855 (tb2t3855 j))) )))

;; mem_relation
  (assert
  (forall ((u (set c)) (v (set (tuple21 (tuple21 a c) (tuple21 b d))))
  (r (set (tuple21 c (tuple21 (tuple21 a c) (tuple21 b d))))))
  (= (mem (set1 (tuple2 c1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))))
  (t2tb3480 r)
  (relation (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) c1 (t2tb132 u)
  (t2tb686 v)))
  (forall ((x c) (y (tuple21 (tuple21 a c) (tuple21 b d))))
  (=> (mem (tuple2 c1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
  (Tuple2 c1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb135 x) (t2tb691 y))
  (t2tb3480 r)) (and (mem7 x u) (mem24 y v)))))))

(declare-fun t2tb3856 ((set (set (tuple21 c (set (tuple21 c d)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 c (set (tuple21 c d))))))) (sort
  (set1 (set1 (tuple2 c1 (set1 (tuple2 c1 d1))))) (t2tb3856 x))))

(declare-fun tb2t3856 (uni) (set (set (tuple21 c (set (tuple21 c d))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 c (set (tuple21 c d)))))))
  (! (= (tb2t3856 (t2tb3856 i)) i) :pattern ((t2tb3856 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 c1 (set1 (tuple2 c1 d1))))) j)
     (= (t2tb3856 (tb2t3856 j)) j)) :pattern ((t2tb3856 (tb2t3856 j))) )))

;; mem_relation
  (assert
  (forall ((u (set c)) (v (set (set (tuple21 c d)))) (r (set (tuple21 c
  (set (tuple21 c d))))))
  (= (mem (set1 (tuple2 c1 (set1 (tuple2 c1 d1)))) (t2tb3483 r)
  (relation (set1 (tuple2 c1 d1)) c1 (t2tb132 u) (t2tb688 v)))
  (forall ((x c) (y (set (tuple21 c d))))
  (=> (mem (tuple2 c1 (set1 (tuple2 c1 d1)))
  (Tuple2 c1 (set1 (tuple2 c1 d1)) (t2tb135 x) (t2tb689 y)) (t2tb3483 r))
  (and (mem7 x u) (mem22 y v)))))))

(declare-fun t2tb3857 ((set (set (tuple21 c (tuple21 c d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 c (tuple21 c d)))))) (sort
  (set1 (set1 (tuple2 c1 (tuple2 c1 d1)))) (t2tb3857 x))))

(declare-fun tb2t3857 (uni) (set (set (tuple21 c (tuple21 c d)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 c (tuple21 c d))))))
  (! (= (tb2t3857 (t2tb3857 i)) i) :pattern ((t2tb3857 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 c1 (tuple2 c1 d1)))) j)
     (= (t2tb3857 (tb2t3857 j)) j)) :pattern ((t2tb3857 (tb2t3857 j))) )))

;; mem_relation
  (assert
  (forall ((u (set c)) (v (set (tuple21 c d))) (r (set (tuple21 c (tuple21 c
  d)))))
  (= (mem (set1 (tuple2 c1 (tuple2 c1 d1))) (t2tb857 r)
  (relation (tuple2 c1 d1) c1 (t2tb132 u) (t2tb689 v)))
  (forall ((x c) (y (tuple21 c d)))
  (=> (mem (tuple2 c1 (tuple2 c1 d1))
  (Tuple2 c1 (tuple2 c1 d1) (t2tb135 x) (t2tb693 y)) (t2tb857 r))
  (and (mem7 x u) (mem21 y v)))))))

;; mem_relation
  (assert
  (forall ((u (set c)) (v (set d)) (r (set (tuple21 c d))))
  (= (mem22 r (relation7 u v))
  (forall ((x c) (y d))
  (=> (mem21 (tb2t693 (Tuple2 c1 d1 (t2tb135 x) (t2tb694 y))) r)
  (and (mem7 x u) (mem20 y v)))))))

(declare-fun t2tb305 ((set (set (tuple21 c c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 c c))))) (sort (set1 (set1 (tuple2 c1 c1)))
  (t2tb305 x))))

(declare-fun tb2t305 (uni) (set (set (tuple21 c c))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 c c)))))
  (! (= (tb2t305 (t2tb305 i)) i) :pattern ((t2tb305 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 c1 c1))) j) (= (t2tb305 (tb2t305 j)) j)) :pattern (
  (t2tb305 (tb2t305 j))) )))

;; mem_relation
  (assert
  (forall ((u (set c)) (v (set c)) (r (set (tuple21 c c))))
  (= (mem (set1 (tuple2 c1 c1)) (t2tb216 r)
  (relation c1 c1 (t2tb132 u) (t2tb132 v)))
  (forall ((x c) (y c))
  (=> (mem (tuple2 c1 c1) (Tuple2 c1 c1 (t2tb135 x) (t2tb135 y)) (t2tb216 r))
  (and (mem7 x u) (mem7 y v)))))))

(declare-fun t2tb306 ((set (set (tuple21 c (set (tuple21 a b)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 c (set (tuple21 a b))))))) (sort
  (set1 (set1 (tuple2 c1 (set1 (tuple2 a1 b1))))) (t2tb306 x))))

(declare-fun tb2t306 (uni) (set (set (tuple21 c (set (tuple21 a b))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 c (set (tuple21 a b)))))))
  (! (= (tb2t306 (t2tb306 i)) i) :pattern ((t2tb306 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 c1 (set1 (tuple2 a1 b1))))) j)
     (= (t2tb306 (tb2t306 j)) j)) :pattern ((t2tb306 (tb2t306 j))) )))

;; mem_relation
  (assert
  (forall ((u (set c)) (v (set (set (tuple21 a b)))) (r (set (tuple21 c
  (set (tuple21 a b))))))
  (= (mem (set1 (tuple2 c1 (set1 (tuple2 a1 b1)))) (t2tb218 r)
  (relation (set1 (tuple2 a1 b1)) c1 (t2tb132 u) (t2tb10 v)))
  (forall ((x c) (y (set (tuple21 a b))))
  (=> (mem (tuple2 c1 (set1 (tuple2 a1 b1)))
  (Tuple2 c1 (set1 (tuple2 a1 b1)) (t2tb135 x) (t2tb11 y)) (t2tb218 r))
  (and (mem7 x u) (mem4 y v)))))))

(declare-fun t2tb307 ((set (set (tuple21 c (tuple21 a b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 c (tuple21 a b)))))) (sort
  (set1 (set1 (tuple2 c1 (tuple2 a1 b1)))) (t2tb307 x))))

(declare-fun tb2t307 (uni) (set (set (tuple21 c (tuple21 a b)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 c (tuple21 a b))))))
  (! (= (tb2t307 (t2tb307 i)) i) :pattern ((t2tb307 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 c1 (tuple2 a1 b1)))) j)
     (= (t2tb307 (tb2t307 j)) j)) :pattern ((t2tb307 (tb2t307 j))) )))

;; mem_relation
  (assert
  (forall ((u (set c)) (v (set (tuple21 a b))) (r (set (tuple21 c (tuple21 a
  b)))))
  (= (mem (set1 (tuple2 c1 (tuple2 a1 b1))) (t2tb220 r)
  (relation (tuple2 a1 b1) c1 (t2tb132 u) (t2tb11 v)))
  (forall ((x c) (y (tuple21 a b)))
  (=> (mem (tuple2 c1 (tuple2 a1 b1))
  (Tuple2 c1 (tuple2 a1 b1) (t2tb135 x) (t2tb13 y)) (t2tb220 r))
  (and (mem7 x u) (mem3 y v)))))))

(declare-fun t2tb308 ((set (set (tuple21 c b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 c b))))) (sort (set1 (set1 (tuple2 c1 b1)))
  (t2tb308 x))))

(declare-fun tb2t308 (uni) (set (set (tuple21 c b))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 c b)))))
  (! (= (tb2t308 (t2tb308 i)) i) :pattern ((t2tb308 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 c1 b1))) j) (= (t2tb308 (tb2t308 j)) j)) :pattern (
  (t2tb308 (tb2t308 j))) )))

;; mem_relation
  (assert
  (forall ((u (set c)) (v (set b)) (r (set (tuple21 c b))))
  (= (mem (set1 (tuple2 c1 b1)) (t2tb222 r)
  (relation b1 c1 (t2tb132 u) (t2tb12 v)))
  (forall ((x c) (y b))
  (=> (mem (tuple2 c1 b1) (Tuple2 c1 b1 (t2tb135 x) (t2tb14 y)) (t2tb222 r))
  (and (mem7 x u) (mem2 y v)))))))

(declare-fun t2tb309 ((set (set (tuple21 c a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 c a))))) (sort (set1 (set1 (tuple2 c1 a1)))
  (t2tb309 x))))

(declare-fun tb2t309 (uni) (set (set (tuple21 c a))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 c a)))))
  (! (= (tb2t309 (t2tb309 i)) i) :pattern ((t2tb309 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 c1 a1))) j) (= (t2tb309 (tb2t309 j)) j)) :pattern (
  (t2tb309 (tb2t309 j))) )))

;; mem_relation
  (assert
  (forall ((u (set c)) (v (set a)) (r (set (tuple21 c a))))
  (= (mem (set1 (tuple2 c1 a1)) (t2tb224 r)
  (relation a1 c1 (t2tb132 u) (t2tb1 v)))
  (forall ((x c) (y a))
  (=> (mem (tuple2 c1 a1) (Tuple2 c1 a1 (t2tb135 x) (t2tb2 y)) (t2tb224 r))
  (and (mem7 x u) (mem1 y v)))))))

;; mem_relation
  (assert
  (forall ((b2 ty))
  (forall ((u (set c)) (v uni) (r uni))
  (and
  (=> (mem (set1 (tuple2 c1 b2)) r (relation b2 c1 (t2tb132 u) v))
  (forall ((x c) (y uni))
  (=> (mem (tuple2 c1 b2) (Tuple2 c1 b2 (t2tb135 x) y) r)
  (and (mem7 x u) (mem b2 y v)))))
  (=>
  (forall ((x c) (y uni))
  (=> (sort b2 y)
  (=> (mem (tuple2 c1 b2) (Tuple2 c1 b2 (t2tb135 x) y) r)
  (and (mem7 x u) (mem b2 y v))))) (mem (set1 (tuple2 c1 b2)) r
  (relation b2 c1 (t2tb132 u) v)))))))

(declare-fun t2tb3858 ((set (set (tuple21 (set (tuple21 a b)) (tuple21 c
  f))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a b)) (tuple21 c f)))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 c1 f1)))) (t2tb3858 x))))

(declare-fun tb2t3858 (uni) (set (set (tuple21 (set (tuple21 a b)) (tuple21 c
  f)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a b)) (tuple21 c f))))))
  (! (= (tb2t3858 (t2tb3858 i)) i) :pattern ((t2tb3858 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 c1 f1)))) j)
     (= (t2tb3858 (tb2t3858 j)) j)) :pattern ((t2tb3858 (tb2t3858 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a b)))) (v (set (tuple21 c f)))
  (r (set (tuple21 (set (tuple21 a b)) (tuple21 c f)))))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 c1 f1))) (t2tb3484 r)
  (relation (tuple2 c1 f1) (set1 (tuple2 a1 b1)) (t2tb10 u) (t2tb2942 v)))
  (forall ((x (set (tuple21 a b))) (y (tuple21 c f)))
  (=> (mem (tuple2 (set1 (tuple2 a1 b1)) (tuple2 c1 f1))
  (Tuple2 (set1 (tuple2 a1 b1)) (tuple2 c1 f1) (t2tb11 x) (t2tb2948 y))
  (t2tb3484 r)) (and (mem4 x u) (mem45 y v)))))))

(declare-fun t2tb3859 ((set (set (tuple21 (set (tuple21 a b)) (tuple21 a
  e))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a b)) (tuple21 a e)))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 e1)))) (t2tb3859 x))))

(declare-fun tb2t3859 (uni) (set (set (tuple21 (set (tuple21 a b)) (tuple21 a
  e)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a b)) (tuple21 a e))))))
  (! (= (tb2t3859 (t2tb3859 i)) i) :pattern ((t2tb3859 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 e1)))) j)
     (= (t2tb3859 (tb2t3859 j)) j)) :pattern ((t2tb3859 (tb2t3859 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a b)))) (v (set (tuple21 a e)))
  (r (set (tuple21 (set (tuple21 a b)) (tuple21 a e)))))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 e1))) (t2tb3486 r)
  (relation (tuple2 a1 e1) (set1 (tuple2 a1 b1)) (t2tb10 u) (t2tb2943 v)))
  (forall ((x (set (tuple21 a b))) (y (tuple21 a e)))
  (=> (mem (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 e1))
  (Tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 e1) (t2tb11 x) (t2tb2949 y))
  (t2tb3486 r)) (and (mem4 x u) (mem44 y v)))))))

(declare-fun t2tb3860 ((set (set (tuple21 (set (tuple21 a b))
  (tuple21 (tuple21 b d) (tuple21 e f)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a b)) (tuple21 (tuple21 b d)
  (tuple21 e f))))))) (sort
  (set1
  (set1
  (tuple2 (set1 (tuple2 a1 b1)) (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)))))
  (t2tb3860 x))))

(declare-fun tb2t3860 (uni) (set (set (tuple21 (set (tuple21 a b))
  (tuple21 (tuple21 b d) (tuple21 e f))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a b)) (tuple21 (tuple21 b d)
  (tuple21 e f)))))))
  (! (= (tb2t3860 (t2tb3860 i)) i) :pattern ((t2tb3860 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (set1
     (tuple2 (set1 (tuple2 a1 b1)) (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)))))
     j) (= (t2tb3860 (tb2t3860 j)) j)) :pattern ((t2tb3860 (tb2t3860 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a b)))) (v (set (tuple21 (tuple21 b d)
  (tuple21 e f)))) (r (set (tuple21 (set (tuple21 a b)) (tuple21 (tuple21 b
  d) (tuple21 e f))))))
  (= (mem
  (set1
  (tuple2 (set1 (tuple2 a1 b1)) (tuple2 (tuple2 b1 d1) (tuple2 e1 f1))))
  (t2tb3488 r)
  (relation (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (set1 (tuple2 a1 b1))
  (t2tb10 u) (t2tb2944 v)))
  (forall ((x (set (tuple21 a b))) (y (tuple21 (tuple21 b d) (tuple21 e f))))
  (=> (mem
  (tuple2 (set1 (tuple2 a1 b1)) (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)))
  (Tuple2 (set1 (tuple2 a1 b1)) (tuple2 (tuple2 b1 d1) (tuple2 e1 f1))
  (t2tb11 x) (t2tb2950 y)) (t2tb3488 r)) (and (mem4 x u) (mem43 y v)))))))

(declare-fun t2tb3861 ((set (set (tuple21 (set (tuple21 a b))
  (tuple21 (tuple21 a c) (tuple21 e f)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a b)) (tuple21 (tuple21 a c)
  (tuple21 e f))))))) (sort
  (set1
  (set1
  (tuple2 (set1 (tuple2 a1 b1)) (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)))))
  (t2tb3861 x))))

(declare-fun tb2t3861 (uni) (set (set (tuple21 (set (tuple21 a b))
  (tuple21 (tuple21 a c) (tuple21 e f))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a b)) (tuple21 (tuple21 a c)
  (tuple21 e f)))))))
  (! (= (tb2t3861 (t2tb3861 i)) i) :pattern ((t2tb3861 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (set1
     (tuple2 (set1 (tuple2 a1 b1)) (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)))))
     j) (= (t2tb3861 (tb2t3861 j)) j)) :pattern ((t2tb3861 (tb2t3861 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a b)))) (v (set (tuple21 (tuple21 a c)
  (tuple21 e f)))) (r (set (tuple21 (set (tuple21 a b)) (tuple21 (tuple21 a
  c) (tuple21 e f))))))
  (= (mem
  (set1
  (tuple2 (set1 (tuple2 a1 b1)) (tuple2 (tuple2 a1 c1) (tuple2 e1 f1))))
  (t2tb3490 r)
  (relation (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (set1 (tuple2 a1 b1))
  (t2tb10 u) (t2tb2945 v)))
  (forall ((x (set (tuple21 a b))) (y (tuple21 (tuple21 a c) (tuple21 e f))))
  (=> (mem
  (tuple2 (set1 (tuple2 a1 b1)) (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)))
  (Tuple2 (set1 (tuple2 a1 b1)) (tuple2 (tuple2 a1 c1) (tuple2 e1 f1))
  (t2tb11 x) (t2tb2951 y)) (t2tb3490 r)) (and (mem4 x u) (mem42 y v)))))))

(declare-fun t2tb3862 ((set (set (tuple21 (set (tuple21 a b)) (set (tuple21 d
  f)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a b)) (set (tuple21 d f)))))))
  (sort (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 d1 f1)))))
  (t2tb3862 x))))

(declare-fun tb2t3862 (uni) (set (set (tuple21 (set (tuple21 a b))
  (set (tuple21 d f))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a b)) (set (tuple21 d f)))))))
  (! (= (tb2t3862 (t2tb3862 i)) i) :pattern ((t2tb3862 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 d1 f1))))) j)
     (= (t2tb3862 (tb2t3862 j)) j)) :pattern ((t2tb3862 (tb2t3862 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a b)))) (v (set (set (tuple21 d f))))
  (r (set (tuple21 (set (tuple21 a b)) (set (tuple21 d f))))))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 d1 f1))))
  (t2tb3492 r)
  (relation (set1 (tuple2 d1 f1)) (set1 (tuple2 a1 b1)) (t2tb10 u)
  (t2tb2939 v)))
  (forall ((x (set (tuple21 a b))) (y (set (tuple21 d f))))
  (=> (mem (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 d1 f1)))
  (Tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 d1 f1)) (t2tb11 x)
  (t2tb2938 y)) (t2tb3492 r)) (and (mem4 x u) (mem41 y v)))))))

(declare-fun t2tb3863 ((set (set (tuple21 (set (tuple21 a b)) (tuple21 d
  f))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a b)) (tuple21 d f)))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 d1 f1)))) (t2tb3863 x))))

(declare-fun tb2t3863 (uni) (set (set (tuple21 (set (tuple21 a b)) (tuple21 d
  f)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a b)) (tuple21 d f))))))
  (! (= (tb2t3863 (t2tb3863 i)) i) :pattern ((t2tb3863 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 d1 f1)))) j)
     (= (t2tb3863 (tb2t3863 j)) j)) :pattern ((t2tb3863 (tb2t3863 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a b)))) (v (set (tuple21 d f)))
  (r (set (tuple21 (set (tuple21 a b)) (tuple21 d f)))))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 d1 f1))) (t2tb3494 r)
  (relation (tuple2 d1 f1) (set1 (tuple2 a1 b1)) (t2tb10 u) (t2tb2938 v)))
  (forall ((x (set (tuple21 a b))) (y (tuple21 d f)))
  (=> (mem (tuple2 (set1 (tuple2 a1 b1)) (tuple2 d1 f1))
  (Tuple2 (set1 (tuple2 a1 b1)) (tuple2 d1 f1) (t2tb11 x) (t2tb2952 y))
  (t2tb3494 r)) (and (mem4 x u) (mem40 y v)))))))

(declare-fun t2tb3864 ((set (set (tuple21 (set (tuple21 a b)) (set (tuple21 b
  e)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a b)) (set (tuple21 b e)))))))
  (sort (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 b1 e1)))))
  (t2tb3864 x))))

(declare-fun tb2t3864 (uni) (set (set (tuple21 (set (tuple21 a b))
  (set (tuple21 b e))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a b)) (set (tuple21 b e)))))))
  (! (= (tb2t3864 (t2tb3864 i)) i) :pattern ((t2tb3864 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 b1 e1))))) j)
     (= (t2tb3864 (tb2t3864 j)) j)) :pattern ((t2tb3864 (tb2t3864 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a b)))) (v (set (set (tuple21 b e))))
  (r (set (tuple21 (set (tuple21 a b)) (set (tuple21 b e))))))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 b1 e1))))
  (t2tb3496 r)
  (relation (set1 (tuple2 b1 e1)) (set1 (tuple2 a1 b1)) (t2tb10 u)
  (t2tb2941 v)))
  (forall ((x (set (tuple21 a b))) (y (set (tuple21 b e))))
  (=> (mem (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 b1 e1)))
  (Tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 b1 e1)) (t2tb11 x)
  (t2tb2940 y)) (t2tb3496 r)) (and (mem4 x u) (mem39 y v)))))))

(declare-fun t2tb3865 ((set (set (tuple21 (set (tuple21 a b)) (tuple21 b
  e))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a b)) (tuple21 b e)))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 b1 e1)))) (t2tb3865 x))))

(declare-fun tb2t3865 (uni) (set (set (tuple21 (set (tuple21 a b)) (tuple21 b
  e)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a b)) (tuple21 b e))))))
  (! (= (tb2t3865 (t2tb3865 i)) i) :pattern ((t2tb3865 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 b1 e1)))) j)
     (= (t2tb3865 (tb2t3865 j)) j)) :pattern ((t2tb3865 (tb2t3865 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a b)))) (v (set (tuple21 b e)))
  (r (set (tuple21 (set (tuple21 a b)) (tuple21 b e)))))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 b1 e1))) (t2tb3499 r)
  (relation (tuple2 b1 e1) (set1 (tuple2 a1 b1)) (t2tb10 u) (t2tb2940 v)))
  (forall ((x (set (tuple21 a b))) (y (tuple21 b e)))
  (=> (mem (tuple2 (set1 (tuple2 a1 b1)) (tuple2 b1 e1))
  (Tuple2 (set1 (tuple2 a1 b1)) (tuple2 b1 e1) (t2tb11 x) (t2tb2953 y))
  (t2tb3499 r)) (and (mem4 x u) (mem38 y v)))))))

(declare-fun t2tb3866 ((set (set (tuple21 (set (tuple21 a b)) f)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a b)) f))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) f1))) (t2tb3866 x))))

(declare-fun tb2t3866 (uni) (set (set (tuple21 (set (tuple21 a b)) f))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a b)) f)))))
  (! (= (tb2t3866 (t2tb3866 i)) i) :pattern ((t2tb3866 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) f1))) j)
     (= (t2tb3866 (tb2t3866 j)) j)) :pattern ((t2tb3866 (tb2t3866 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a b)))) (v (set f))
  (r (set (tuple21 (set (tuple21 a b)) f))))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 b1)) f1)) (t2tb3500 r)
  (relation f1 (set1 (tuple2 a1 b1)) (t2tb10 u) (t2tb2946 v)))
  (forall ((x (set (tuple21 a b))) (y f))
  (=> (mem (tuple2 (set1 (tuple2 a1 b1)) f1)
  (Tuple2 (set1 (tuple2 a1 b1)) f1 (t2tb11 x) (t2tb2954 y)) (t2tb3500 r))
  (and (mem4 x u) (mem37 y v)))))))

(declare-fun t2tb3867 ((set (set (tuple21 (set (tuple21 a b)) e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a b)) e))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) e1))) (t2tb3867 x))))

(declare-fun tb2t3867 (uni) (set (set (tuple21 (set (tuple21 a b)) e))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a b)) e)))))
  (! (= (tb2t3867 (t2tb3867 i)) i) :pattern ((t2tb3867 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) e1))) j)
     (= (t2tb3867 (tb2t3867 j)) j)) :pattern ((t2tb3867 (tb2t3867 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a b)))) (v (set e))
  (r (set (tuple21 (set (tuple21 a b)) e))))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 b1)) e1)) (t2tb3502 r)
  (relation e1 (set1 (tuple2 a1 b1)) (t2tb10 u) (t2tb2947 v)))
  (forall ((x (set (tuple21 a b))) (y e))
  (=> (mem (tuple2 (set1 (tuple2 a1 b1)) e1)
  (Tuple2 (set1 (tuple2 a1 b1)) e1 (t2tb11 x) (t2tb2955 y)) (t2tb3502 r))
  (and (mem4 x u) (mem36 y v)))))))

(declare-fun t2tb3868 ((set (set (tuple21 (set (tuple21 a b))
  (tuple21 (tuple21 a c) (tuple21 b d)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a b)) (tuple21 (tuple21 a c)
  (tuple21 b d))))))) (sort
  (set1
  (set1
  (tuple2 (set1 (tuple2 a1 b1)) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))))
  (t2tb3868 x))))

(declare-fun tb2t3868 (uni) (set (set (tuple21 (set (tuple21 a b))
  (tuple21 (tuple21 a c) (tuple21 b d))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a b)) (tuple21 (tuple21 a c)
  (tuple21 b d)))))))
  (! (= (tb2t3868 (t2tb3868 i)) i) :pattern ((t2tb3868 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (set1
     (tuple2 (set1 (tuple2 a1 b1)) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))))
     j) (= (t2tb3868 (tb2t3868 j)) j)) :pattern ((t2tb3868 (tb2t3868 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a b)))) (v (set (tuple21 (tuple21 a c)
  (tuple21 b d)))) (r (set (tuple21 (set (tuple21 a b)) (tuple21 (tuple21 a
  c) (tuple21 b d))))))
  (= (mem
  (set1
  (tuple2 (set1 (tuple2 a1 b1)) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))))
  (t2tb3504 r)
  (relation (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (set1 (tuple2 a1 b1))
  (t2tb10 u) (t2tb686 v)))
  (forall ((x (set (tuple21 a b))) (y (tuple21 (tuple21 a c) (tuple21 b d))))
  (=> (mem
  (tuple2 (set1 (tuple2 a1 b1)) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
  (Tuple2 (set1 (tuple2 a1 b1)) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))
  (t2tb11 x) (t2tb691 y)) (t2tb3504 r)) (and (mem4 x u) (mem24 y v)))))))

(declare-fun t2tb3869 ((set (set (tuple21 (set (tuple21 a b)) (set (tuple21 c
  d)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a b)) (set (tuple21 c d)))))))
  (sort (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 c1 d1)))))
  (t2tb3869 x))))

(declare-fun tb2t3869 (uni) (set (set (tuple21 (set (tuple21 a b))
  (set (tuple21 c d))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a b)) (set (tuple21 c d)))))))
  (! (= (tb2t3869 (t2tb3869 i)) i) :pattern ((t2tb3869 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 c1 d1))))) j)
     (= (t2tb3869 (tb2t3869 j)) j)) :pattern ((t2tb3869 (tb2t3869 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a b)))) (v (set (set (tuple21 c d))))
  (r (set (tuple21 (set (tuple21 a b)) (set (tuple21 c d))))))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 c1 d1))))
  (t2tb3506 r)
  (relation (set1 (tuple2 c1 d1)) (set1 (tuple2 a1 b1)) (t2tb10 u)
  (t2tb688 v)))
  (forall ((x (set (tuple21 a b))) (y (set (tuple21 c d))))
  (=> (mem (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 c1 d1)))
  (Tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 c1 d1)) (t2tb11 x) (t2tb689 y))
  (t2tb3506 r)) (and (mem4 x u) (mem22 y v)))))))

(declare-fun t2tb3870 ((set (set (tuple21 (set (tuple21 a b)) (tuple21 c
  d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a b)) (tuple21 c d)))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 c1 d1)))) (t2tb3870 x))))

(declare-fun tb2t3870 (uni) (set (set (tuple21 (set (tuple21 a b)) (tuple21 c
  d)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a b)) (tuple21 c d))))))
  (! (= (tb2t3870 (t2tb3870 i)) i) :pattern ((t2tb3870 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 c1 d1)))) j)
     (= (t2tb3870 (tb2t3870 j)) j)) :pattern ((t2tb3870 (tb2t3870 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a b)))) (v (set (tuple21 c d)))
  (r (set (tuple21 (set (tuple21 a b)) (tuple21 c d)))))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 c1 d1))) (t2tb3508 r)
  (relation (tuple2 c1 d1) (set1 (tuple2 a1 b1)) (t2tb10 u) (t2tb689 v)))
  (forall ((x (set (tuple21 a b))) (y (tuple21 c d)))
  (=> (mem (tuple2 (set1 (tuple2 a1 b1)) (tuple2 c1 d1))
  (Tuple2 (set1 (tuple2 a1 b1)) (tuple2 c1 d1) (t2tb11 x) (t2tb693 y))
  (t2tb3508 r)) (and (mem4 x u) (mem21 y v)))))))

(declare-fun t2tb996 ((set (set (tuple21 (set (tuple21 a b)) d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a b)) d))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) d1))) (t2tb996 x))))

(declare-fun tb2t996 (uni) (set (set (tuple21 (set (tuple21 a b)) d))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a b)) d)))))
  (! (= (tb2t996 (t2tb996 i)) i) :pattern ((t2tb996 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) d1))) j)
     (= (t2tb996 (tb2t996 j)) j)) :pattern ((t2tb996 (tb2t996 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a b)))) (v (set d))
  (r (set (tuple21 (set (tuple21 a b)) d))))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 b1)) d1)) (t2tb869 r)
  (relation d1 (set1 (tuple2 a1 b1)) (t2tb10 u) (t2tb690 v)))
  (forall ((x (set (tuple21 a b))) (y d))
  (=> (mem (tuple2 (set1 (tuple2 a1 b1)) d1)
  (Tuple2 (set1 (tuple2 a1 b1)) d1 (t2tb11 x) (t2tb694 y)) (t2tb869 r))
  (and (mem4 x u) (mem20 y v)))))))

(declare-fun t2tb314 ((set (set (tuple21 (set (tuple21 a b)) c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a b)) c))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) c1))) (t2tb314 x))))

(declare-fun tb2t314 (uni) (set (set (tuple21 (set (tuple21 a b)) c))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a b)) c)))))
  (! (= (tb2t314 (t2tb314 i)) i) :pattern ((t2tb314 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) c1))) j)
     (= (t2tb314 (tb2t314 j)) j)) :pattern ((t2tb314 (tb2t314 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a b)))) (v (set c))
  (r (set (tuple21 (set (tuple21 a b)) c))))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 b1)) c1)) (t2tb234 r)
  (relation c1 (set1 (tuple2 a1 b1)) (t2tb10 u) (t2tb132 v)))
  (forall ((x (set (tuple21 a b))) (y c))
  (=> (mem (tuple2 (set1 (tuple2 a1 b1)) c1)
  (Tuple2 (set1 (tuple2 a1 b1)) c1 (t2tb11 x) (t2tb135 y)) (t2tb234 r))
  (and (mem4 x u) (mem7 y v)))))))

(declare-fun t2tb45 ((set (set (tuple21 (set (tuple21 a b)) (set (tuple21 a
  b)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a b)) (set (tuple21 a b)))))))
  (sort (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1)))))
  (t2tb45 x))))

(declare-fun tb2t45 (uni) (set (set (tuple21 (set (tuple21 a b))
  (set (tuple21 a b))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a b)) (set (tuple21 a b)))))))
  (! (= (tb2t45 (t2tb45 i)) i) :pattern ((t2tb45 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1))))) j)
     (= (t2tb45 (tb2t45 j)) j)) :pattern ((t2tb45 (tb2t45 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a b)))) (v (set (set (tuple21 a b))))
  (r (set (tuple21 (set (tuple21 a b)) (set (tuple21 a b))))))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1))))
  (t2tb15 r)
  (relation (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1)) (t2tb10 u)
  (t2tb10 v)))
  (forall ((x (set (tuple21 a b))) (y (set (tuple21 a b))))
  (=> (mem (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1)))
  (Tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1)) (t2tb11 x) (t2tb11 y))
  (t2tb15 r)) (and (mem4 x u) (mem4 y v)))))))

(declare-fun t2tb46 ((set (set (tuple21 (set (tuple21 a b)) (tuple21 a
  b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a b)) (tuple21 a b)))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 b1)))) (t2tb46 x))))

(declare-fun tb2t46 (uni) (set (set (tuple21 (set (tuple21 a b)) (tuple21 a
  b)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a b)) (tuple21 a b))))))
  (! (= (tb2t46 (t2tb46 i)) i) :pattern ((t2tb46 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 b1)))) j)
     (= (t2tb46 (tb2t46 j)) j)) :pattern ((t2tb46 (tb2t46 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a b)))) (v (set (tuple21 a b)))
  (r (set (tuple21 (set (tuple21 a b)) (tuple21 a b)))))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 b1))) (t2tb17 r)
  (relation (tuple2 a1 b1) (set1 (tuple2 a1 b1)) (t2tb10 u) (t2tb11 v)))
  (forall ((x (set (tuple21 a b))) (y (tuple21 a b)))
  (=> (mem (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 b1))
  (Tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 b1) (t2tb11 x) (t2tb13 y))
  (t2tb17 r)) (and (mem4 x u) (mem3 y v)))))))

(declare-fun t2tb47 ((set (set (tuple21 (set (tuple21 a b)) b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a b)) b))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) b1))) (t2tb47 x))))

(declare-fun tb2t47 (uni) (set (set (tuple21 (set (tuple21 a b)) b))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a b)) b)))))
  (! (= (tb2t47 (t2tb47 i)) i) :pattern ((t2tb47 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) b1))) j)
     (= (t2tb47 (tb2t47 j)) j)) :pattern ((t2tb47 (tb2t47 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a b)))) (v (set b))
  (r (set (tuple21 (set (tuple21 a b)) b))))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 b1)) b1)) (t2tb19 r)
  (relation b1 (set1 (tuple2 a1 b1)) (t2tb10 u) (t2tb12 v)))
  (forall ((x (set (tuple21 a b))) (y b))
  (=> (mem (tuple2 (set1 (tuple2 a1 b1)) b1)
  (Tuple2 (set1 (tuple2 a1 b1)) b1 (t2tb11 x) (t2tb14 y)) (t2tb19 r))
  (and (mem4 x u) (mem2 y v)))))))

(declare-fun t2tb48 ((set (set (tuple21 (set (tuple21 a b)) a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a b)) a))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) a1))) (t2tb48 x))))

(declare-fun tb2t48 (uni) (set (set (tuple21 (set (tuple21 a b)) a))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a b)) a)))))
  (! (= (tb2t48 (t2tb48 i)) i) :pattern ((t2tb48 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) a1))) j)
     (= (t2tb48 (tb2t48 j)) j)) :pattern ((t2tb48 (tb2t48 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a b)))) (v (set a))
  (r (set (tuple21 (set (tuple21 a b)) a))))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 b1)) a1)) (t2tb22 r)
  (relation a1 (set1 (tuple2 a1 b1)) (t2tb10 u) (t2tb1 v)))
  (forall ((x (set (tuple21 a b))) (y a))
  (=> (mem (tuple2 (set1 (tuple2 a1 b1)) a1)
  (Tuple2 (set1 (tuple2 a1 b1)) a1 (t2tb11 x) (t2tb2 y)) (t2tb22 r))
  (and (mem4 x u) (mem1 y v)))))))

;; mem_relation
  (assert
  (forall ((b2 ty))
  (forall ((u (set (set (tuple21 a b)))) (v uni) (r uni))
  (and
  (=> (mem (set1 (tuple2 (set1 (tuple2 a1 b1)) b2)) r
  (relation b2 (set1 (tuple2 a1 b1)) (t2tb10 u) v))
  (forall ((x (set (tuple21 a b))) (y uni))
  (=> (mem (tuple2 (set1 (tuple2 a1 b1)) b2)
  (Tuple2 (set1 (tuple2 a1 b1)) b2 (t2tb11 x) y) r)
  (and (mem4 x u) (mem b2 y v)))))
  (=>
  (forall ((x (set (tuple21 a b))) (y uni))
  (=> (sort b2 y)
  (=> (mem (tuple2 (set1 (tuple2 a1 b1)) b2)
  (Tuple2 (set1 (tuple2 a1 b1)) b2 (t2tb11 x) y) r)
  (and (mem4 x u) (mem b2 y v))))) (mem
  (set1 (tuple2 (set1 (tuple2 a1 b1)) b2)) r
  (relation b2 (set1 (tuple2 a1 b1)) (t2tb10 u) v)))))))

(declare-fun t2tb3871 ((set (set (tuple21 (tuple21 a b) (tuple21 c
  f))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a b) (tuple21 c f)))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 b1) (tuple2 c1 f1)))) (t2tb3871 x))))

(declare-fun tb2t3871 (uni) (set (set (tuple21 (tuple21 a b) (tuple21 c
  f)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a b) (tuple21 c f))))))
  (! (= (tb2t3871 (t2tb3871 i)) i) :pattern ((t2tb3871 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 b1) (tuple2 c1 f1)))) j)
     (= (t2tb3871 (tb2t3871 j)) j)) :pattern ((t2tb3871 (tb2t3871 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a b))) (v (set (tuple21 c f)))
  (r (set (tuple21 (tuple21 a b) (tuple21 c f)))))
  (= (mem (set1 (tuple2 (tuple2 a1 b1) (tuple2 c1 f1))) (t2tb3510 r)
  (relation (tuple2 c1 f1) (tuple2 a1 b1) (t2tb11 u) (t2tb2942 v)))
  (forall ((x (tuple21 a b)) (y (tuple21 c f)))
  (=> (mem (tuple2 (tuple2 a1 b1) (tuple2 c1 f1))
  (Tuple2 (tuple2 a1 b1) (tuple2 c1 f1) (t2tb13 x) (t2tb2948 y))
  (t2tb3510 r)) (and (mem3 x u) (mem45 y v)))))))

(declare-fun t2tb3872 ((set (set (tuple21 (tuple21 a b) (tuple21 a
  e))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a b) (tuple21 a e)))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 b1) (tuple2 a1 e1)))) (t2tb3872 x))))

(declare-fun tb2t3872 (uni) (set (set (tuple21 (tuple21 a b) (tuple21 a
  e)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a b) (tuple21 a e))))))
  (! (= (tb2t3872 (t2tb3872 i)) i) :pattern ((t2tb3872 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 b1) (tuple2 a1 e1)))) j)
     (= (t2tb3872 (tb2t3872 j)) j)) :pattern ((t2tb3872 (tb2t3872 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a b))) (v (set (tuple21 a e)))
  (r (set (tuple21 (tuple21 a b) (tuple21 a e)))))
  (= (mem (set1 (tuple2 (tuple2 a1 b1) (tuple2 a1 e1))) (t2tb3512 r)
  (relation (tuple2 a1 e1) (tuple2 a1 b1) (t2tb11 u) (t2tb2943 v)))
  (forall ((x (tuple21 a b)) (y (tuple21 a e)))
  (=> (mem (tuple2 (tuple2 a1 b1) (tuple2 a1 e1))
  (Tuple2 (tuple2 a1 b1) (tuple2 a1 e1) (t2tb13 x) (t2tb2949 y))
  (t2tb3512 r)) (and (mem3 x u) (mem44 y v)))))))

(declare-fun t2tb3873 ((set (set (tuple21 (tuple21 a b) (tuple21 (tuple21 b
  d) (tuple21 e f)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a b) (tuple21 (tuple21 b d)
  (tuple21 e f))))))) (sort
  (set1
  (set1 (tuple2 (tuple2 a1 b1) (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)))))
  (t2tb3873 x))))

(declare-fun tb2t3873 (uni) (set (set (tuple21 (tuple21 a b)
  (tuple21 (tuple21 b d) (tuple21 e f))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a b) (tuple21 (tuple21 b d)
  (tuple21 e f)))))))
  (! (= (tb2t3873 (t2tb3873 i)) i) :pattern ((t2tb3873 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (set1 (tuple2 (tuple2 a1 b1) (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)))))
     j) (= (t2tb3873 (tb2t3873 j)) j)) :pattern ((t2tb3873 (tb2t3873 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a b))) (v (set (tuple21 (tuple21 b d) (tuple21 e
  f)))) (r (set (tuple21 (tuple21 a b) (tuple21 (tuple21 b d) (tuple21 e
  f))))))
  (= (mem
  (set1 (tuple2 (tuple2 a1 b1) (tuple2 (tuple2 b1 d1) (tuple2 e1 f1))))
  (t2tb3515 r)
  (relation (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (tuple2 a1 b1) (t2tb11 u)
  (t2tb2944 v)))
  (forall ((x (tuple21 a b)) (y (tuple21 (tuple21 b d) (tuple21 e f))))
  (=> (mem (tuple2 (tuple2 a1 b1) (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)))
  (Tuple2 (tuple2 a1 b1) (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (t2tb13 x)
  (t2tb2950 y)) (t2tb3515 r)) (and (mem3 x u) (mem43 y v)))))))

(declare-fun t2tb3874 ((set (set (tuple21 (tuple21 a b) (tuple21 (tuple21 a
  c) (tuple21 e f)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a b) (tuple21 (tuple21 a c)
  (tuple21 e f))))))) (sort
  (set1
  (set1 (tuple2 (tuple2 a1 b1) (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)))))
  (t2tb3874 x))))

(declare-fun tb2t3874 (uni) (set (set (tuple21 (tuple21 a b)
  (tuple21 (tuple21 a c) (tuple21 e f))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a b) (tuple21 (tuple21 a c)
  (tuple21 e f)))))))
  (! (= (tb2t3874 (t2tb3874 i)) i) :pattern ((t2tb3874 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (set1 (tuple2 (tuple2 a1 b1) (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)))))
     j) (= (t2tb3874 (tb2t3874 j)) j)) :pattern ((t2tb3874 (tb2t3874 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a b))) (v (set (tuple21 (tuple21 a c) (tuple21 e
  f)))) (r (set (tuple21 (tuple21 a b) (tuple21 (tuple21 a c) (tuple21 e
  f))))))
  (= (mem
  (set1 (tuple2 (tuple2 a1 b1) (tuple2 (tuple2 a1 c1) (tuple2 e1 f1))))
  (t2tb3516 r)
  (relation (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (tuple2 a1 b1) (t2tb11 u)
  (t2tb2945 v)))
  (forall ((x (tuple21 a b)) (y (tuple21 (tuple21 a c) (tuple21 e f))))
  (=> (mem (tuple2 (tuple2 a1 b1) (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)))
  (Tuple2 (tuple2 a1 b1) (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (t2tb13 x)
  (t2tb2951 y)) (t2tb3516 r)) (and (mem3 x u) (mem42 y v)))))))

(declare-fun t2tb3875 ((set (set (tuple21 (tuple21 a b) (set (tuple21 d
  f)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a b) (set (tuple21 d f))))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 b1) (set1 (tuple2 d1 f1))))) (t2tb3875 x))))

(declare-fun tb2t3875 (uni) (set (set (tuple21 (tuple21 a b) (set (tuple21 d
  f))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a b) (set (tuple21 d f)))))))
  (! (= (tb2t3875 (t2tb3875 i)) i) :pattern ((t2tb3875 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 b1) (set1 (tuple2 d1 f1))))) j)
     (= (t2tb3875 (tb2t3875 j)) j)) :pattern ((t2tb3875 (tb2t3875 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a b))) (v (set (set (tuple21 d f))))
  (r (set (tuple21 (tuple21 a b) (set (tuple21 d f))))))
  (= (mem (set1 (tuple2 (tuple2 a1 b1) (set1 (tuple2 d1 f1)))) (t2tb3518 r)
  (relation (set1 (tuple2 d1 f1)) (tuple2 a1 b1) (t2tb11 u) (t2tb2939 v)))
  (forall ((x (tuple21 a b)) (y (set (tuple21 d f))))
  (=> (mem (tuple2 (tuple2 a1 b1) (set1 (tuple2 d1 f1)))
  (Tuple2 (tuple2 a1 b1) (set1 (tuple2 d1 f1)) (t2tb13 x) (t2tb2938 y))
  (t2tb3518 r)) (and (mem3 x u) (mem41 y v)))))))

(declare-fun t2tb3876 ((set (set (tuple21 (tuple21 a b) (tuple21 d
  f))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a b) (tuple21 d f)))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 b1) (tuple2 d1 f1)))) (t2tb3876 x))))

(declare-fun tb2t3876 (uni) (set (set (tuple21 (tuple21 a b) (tuple21 d
  f)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a b) (tuple21 d f))))))
  (! (= (tb2t3876 (t2tb3876 i)) i) :pattern ((t2tb3876 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 b1) (tuple2 d1 f1)))) j)
     (= (t2tb3876 (tb2t3876 j)) j)) :pattern ((t2tb3876 (tb2t3876 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a b))) (v (set (tuple21 d f)))
  (r (set (tuple21 (tuple21 a b) (tuple21 d f)))))
  (= (mem (set1 (tuple2 (tuple2 a1 b1) (tuple2 d1 f1))) (t2tb3520 r)
  (relation (tuple2 d1 f1) (tuple2 a1 b1) (t2tb11 u) (t2tb2938 v)))
  (forall ((x (tuple21 a b)) (y (tuple21 d f)))
  (=> (mem (tuple2 (tuple2 a1 b1) (tuple2 d1 f1))
  (Tuple2 (tuple2 a1 b1) (tuple2 d1 f1) (t2tb13 x) (t2tb2952 y))
  (t2tb3520 r)) (and (mem3 x u) (mem40 y v)))))))

(declare-fun t2tb3877 ((set (set (tuple21 (tuple21 a b) (set (tuple21 b
  e)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a b) (set (tuple21 b e))))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 b1) (set1 (tuple2 b1 e1))))) (t2tb3877 x))))

(declare-fun tb2t3877 (uni) (set (set (tuple21 (tuple21 a b) (set (tuple21 b
  e))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a b) (set (tuple21 b e)))))))
  (! (= (tb2t3877 (t2tb3877 i)) i) :pattern ((t2tb3877 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 b1) (set1 (tuple2 b1 e1))))) j)
     (= (t2tb3877 (tb2t3877 j)) j)) :pattern ((t2tb3877 (tb2t3877 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a b))) (v (set (set (tuple21 b e))))
  (r (set (tuple21 (tuple21 a b) (set (tuple21 b e))))))
  (= (mem (set1 (tuple2 (tuple2 a1 b1) (set1 (tuple2 b1 e1)))) (t2tb3522 r)
  (relation (set1 (tuple2 b1 e1)) (tuple2 a1 b1) (t2tb11 u) (t2tb2941 v)))
  (forall ((x (tuple21 a b)) (y (set (tuple21 b e))))
  (=> (mem (tuple2 (tuple2 a1 b1) (set1 (tuple2 b1 e1)))
  (Tuple2 (tuple2 a1 b1) (set1 (tuple2 b1 e1)) (t2tb13 x) (t2tb2940 y))
  (t2tb3522 r)) (and (mem3 x u) (mem39 y v)))))))

(declare-fun t2tb3878 ((set (set (tuple21 (tuple21 a b) (tuple21 b
  e))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a b) (tuple21 b e)))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 b1) (tuple2 b1 e1)))) (t2tb3878 x))))

(declare-fun tb2t3878 (uni) (set (set (tuple21 (tuple21 a b) (tuple21 b
  e)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a b) (tuple21 b e))))))
  (! (= (tb2t3878 (t2tb3878 i)) i) :pattern ((t2tb3878 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 b1) (tuple2 b1 e1)))) j)
     (= (t2tb3878 (tb2t3878 j)) j)) :pattern ((t2tb3878 (tb2t3878 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a b))) (v (set (tuple21 b e)))
  (r (set (tuple21 (tuple21 a b) (tuple21 b e)))))
  (= (mem (set1 (tuple2 (tuple2 a1 b1) (tuple2 b1 e1))) (t2tb3524 r)
  (relation (tuple2 b1 e1) (tuple2 a1 b1) (t2tb11 u) (t2tb2940 v)))
  (forall ((x (tuple21 a b)) (y (tuple21 b e)))
  (=> (mem (tuple2 (tuple2 a1 b1) (tuple2 b1 e1))
  (Tuple2 (tuple2 a1 b1) (tuple2 b1 e1) (t2tb13 x) (t2tb2953 y))
  (t2tb3524 r)) (and (mem3 x u) (mem38 y v)))))))

(declare-fun t2tb3879 ((set (set (tuple21 (tuple21 a b) f)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a b) f))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 b1) f1))) (t2tb3879 x))))

(declare-fun tb2t3879 (uni) (set (set (tuple21 (tuple21 a b) f))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a b) f)))))
  (! (= (tb2t3879 (t2tb3879 i)) i) :pattern ((t2tb3879 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 b1) f1))) j)
     (= (t2tb3879 (tb2t3879 j)) j)) :pattern ((t2tb3879 (tb2t3879 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a b))) (v (set f)) (r (set (tuple21 (tuple21 a b)
  f))))
  (= (mem (set1 (tuple2 (tuple2 a1 b1) f1)) (t2tb3526 r)
  (relation f1 (tuple2 a1 b1) (t2tb11 u) (t2tb2946 v)))
  (forall ((x (tuple21 a b)) (y f))
  (=> (mem (tuple2 (tuple2 a1 b1) f1)
  (Tuple2 (tuple2 a1 b1) f1 (t2tb13 x) (t2tb2954 y)) (t2tb3526 r))
  (and (mem3 x u) (mem37 y v)))))))

(declare-fun t2tb3880 ((set (set (tuple21 (tuple21 a b) e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a b) e))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 b1) e1))) (t2tb3880 x))))

(declare-fun tb2t3880 (uni) (set (set (tuple21 (tuple21 a b) e))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a b) e)))))
  (! (= (tb2t3880 (t2tb3880 i)) i) :pattern ((t2tb3880 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 b1) e1))) j)
     (= (t2tb3880 (tb2t3880 j)) j)) :pattern ((t2tb3880 (tb2t3880 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a b))) (v (set e)) (r (set (tuple21 (tuple21 a b)
  e))))
  (= (mem (set1 (tuple2 (tuple2 a1 b1) e1)) (t2tb3528 r)
  (relation e1 (tuple2 a1 b1) (t2tb11 u) (t2tb2947 v)))
  (forall ((x (tuple21 a b)) (y e))
  (=> (mem (tuple2 (tuple2 a1 b1) e1)
  (Tuple2 (tuple2 a1 b1) e1 (t2tb13 x) (t2tb2955 y)) (t2tb3528 r))
  (and (mem3 x u) (mem36 y v)))))))

(declare-fun t2tb3881 ((set (set (tuple21 (tuple21 a b) (tuple21 (tuple21 a
  c) (tuple21 b d)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a b) (tuple21 (tuple21 a c)
  (tuple21 b d))))))) (sort
  (set1
  (set1 (tuple2 (tuple2 a1 b1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))))
  (t2tb3881 x))))

(declare-fun tb2t3881 (uni) (set (set (tuple21 (tuple21 a b)
  (tuple21 (tuple21 a c) (tuple21 b d))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a b) (tuple21 (tuple21 a c)
  (tuple21 b d)))))))
  (! (= (tb2t3881 (t2tb3881 i)) i) :pattern ((t2tb3881 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (set1 (tuple2 (tuple2 a1 b1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))))
     j) (= (t2tb3881 (tb2t3881 j)) j)) :pattern ((t2tb3881 (tb2t3881 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a b))) (v (set (tuple21 (tuple21 a c) (tuple21 b
  d)))) (r (set (tuple21 (tuple21 a b) (tuple21 (tuple21 a c) (tuple21 b
  d))))))
  (= (mem
  (set1 (tuple2 (tuple2 a1 b1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))))
  (t2tb3531 r)
  (relation (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 a1 b1) (t2tb11 u)
  (t2tb686 v)))
  (forall ((x (tuple21 a b)) (y (tuple21 (tuple21 a c) (tuple21 b d))))
  (=> (mem (tuple2 (tuple2 a1 b1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
  (Tuple2 (tuple2 a1 b1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb13 x)
  (t2tb691 y)) (t2tb3531 r)) (and (mem3 x u) (mem24 y v)))))))

(declare-fun t2tb3882 ((set (set (tuple21 (tuple21 a b) (set (tuple21 c
  d)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a b) (set (tuple21 c d))))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 b1) (set1 (tuple2 c1 d1))))) (t2tb3882 x))))

(declare-fun tb2t3882 (uni) (set (set (tuple21 (tuple21 a b) (set (tuple21 c
  d))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a b) (set (tuple21 c d)))))))
  (! (= (tb2t3882 (t2tb3882 i)) i) :pattern ((t2tb3882 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 b1) (set1 (tuple2 c1 d1))))) j)
     (= (t2tb3882 (tb2t3882 j)) j)) :pattern ((t2tb3882 (tb2t3882 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a b))) (v (set (set (tuple21 c d))))
  (r (set (tuple21 (tuple21 a b) (set (tuple21 c d))))))
  (= (mem (set1 (tuple2 (tuple2 a1 b1) (set1 (tuple2 c1 d1)))) (t2tb3532 r)
  (relation (set1 (tuple2 c1 d1)) (tuple2 a1 b1) (t2tb11 u) (t2tb688 v)))
  (forall ((x (tuple21 a b)) (y (set (tuple21 c d))))
  (=> (mem (tuple2 (tuple2 a1 b1) (set1 (tuple2 c1 d1)))
  (Tuple2 (tuple2 a1 b1) (set1 (tuple2 c1 d1)) (t2tb13 x) (t2tb689 y))
  (t2tb3532 r)) (and (mem3 x u) (mem22 y v)))))))

(declare-fun t2tb3883 ((set (set (tuple21 (tuple21 a b) (tuple21 c
  d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a b) (tuple21 c d)))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)))) (t2tb3883 x))))

(declare-fun tb2t3883 (uni) (set (set (tuple21 (tuple21 a b) (tuple21 c
  d)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a b) (tuple21 c d))))))
  (! (= (tb2t3883 (t2tb3883 i)) i) :pattern ((t2tb3883 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)))) j)
     (= (t2tb3883 (tb2t3883 j)) j)) :pattern ((t2tb3883 (tb2t3883 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a b))) (v (set (tuple21 c d)))
  (r (set (tuple21 (tuple21 a b) (tuple21 c d)))))
  (= (mem (set1 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1))) (t2tb879 r)
  (relation (tuple2 c1 d1) (tuple2 a1 b1) (t2tb11 u) (t2tb689 v)))
  (forall ((x (tuple21 a b)) (y (tuple21 c d)))
  (=> (mem (tuple2 (tuple2 a1 b1) (tuple2 c1 d1))
  (Tuple2 (tuple2 a1 b1) (tuple2 c1 d1) (t2tb13 x) (t2tb693 y)) (t2tb879 r))
  (and (mem3 x u) (mem21 y v)))))))

(declare-fun t2tb1002 ((set (set (tuple21 (tuple21 a b) d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a b) d))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 b1) d1))) (t2tb1002 x))))

(declare-fun tb2t1002 (uni) (set (set (tuple21 (tuple21 a b) d))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a b) d)))))
  (! (= (tb2t1002 (t2tb1002 i)) i) :pattern ((t2tb1002 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 b1) d1))) j)
     (= (t2tb1002 (tb2t1002 j)) j)) :pattern ((t2tb1002 (tb2t1002 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a b))) (v (set d)) (r (set (tuple21 (tuple21 a b)
  d))))
  (= (mem (set1 (tuple2 (tuple2 a1 b1) d1)) (t2tb881 r)
  (relation d1 (tuple2 a1 b1) (t2tb11 u) (t2tb690 v)))
  (forall ((x (tuple21 a b)) (y d))
  (=> (mem (tuple2 (tuple2 a1 b1) d1)
  (Tuple2 (tuple2 a1 b1) d1 (t2tb13 x) (t2tb694 y)) (t2tb881 r))
  (and (mem3 x u) (mem20 y v)))))))

(declare-fun t2tb319 ((set (set (tuple21 (tuple21 a b) c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a b) c))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 b1) c1))) (t2tb319 x))))

(declare-fun tb2t319 (uni) (set (set (tuple21 (tuple21 a b) c))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a b) c)))))
  (! (= (tb2t319 (t2tb319 i)) i) :pattern ((t2tb319 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 b1) c1))) j)
     (= (t2tb319 (tb2t319 j)) j)) :pattern ((t2tb319 (tb2t319 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a b))) (v (set c)) (r (set (tuple21 (tuple21 a b)
  c))))
  (= (mem (set1 (tuple2 (tuple2 a1 b1) c1)) (t2tb245 r)
  (relation c1 (tuple2 a1 b1) (t2tb11 u) (t2tb132 v)))
  (forall ((x (tuple21 a b)) (y c))
  (=> (mem (tuple2 (tuple2 a1 b1) c1)
  (Tuple2 (tuple2 a1 b1) c1 (t2tb13 x) (t2tb135 y)) (t2tb245 r))
  (and (mem3 x u) (mem7 y v)))))))

(declare-fun t2tb49 ((set (set (tuple21 (tuple21 a b) (set (tuple21 a
  b)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a b) (set (tuple21 a b))))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 b1))))) (t2tb49 x))))

(declare-fun tb2t49 (uni) (set (set (tuple21 (tuple21 a b) (set (tuple21 a
  b))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a b) (set (tuple21 a b)))))))
  (! (= (tb2t49 (t2tb49 i)) i) :pattern ((t2tb49 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 b1))))) j)
     (= (t2tb49 (tb2t49 j)) j)) :pattern ((t2tb49 (tb2t49 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a b))) (v (set (set (tuple21 a b))))
  (r (set (tuple21 (tuple21 a b) (set (tuple21 a b))))))
  (= (mem (set1 (tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 b1)))) (t2tb23 r)
  (relation (set1 (tuple2 a1 b1)) (tuple2 a1 b1) (t2tb11 u) (t2tb10 v)))
  (forall ((x (tuple21 a b)) (y (set (tuple21 a b))))
  (=> (mem (tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 b1)))
  (Tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 b1)) (t2tb13 x) (t2tb11 y))
  (t2tb23 r)) (and (mem3 x u) (mem4 y v)))))))

(declare-fun t2tb50 ((set (set (tuple21 (tuple21 a b) (tuple21 a b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a b) (tuple21 a b)))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 b1) (tuple2 a1 b1)))) (t2tb50 x))))

(declare-fun tb2t50 (uni) (set (set (tuple21 (tuple21 a b) (tuple21 a b)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a b) (tuple21 a b))))))
  (! (= (tb2t50 (t2tb50 i)) i) :pattern ((t2tb50 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 b1) (tuple2 a1 b1)))) j)
     (= (t2tb50 (tb2t50 j)) j)) :pattern ((t2tb50 (tb2t50 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a b))) (v (set (tuple21 a b)))
  (r (set (tuple21 (tuple21 a b) (tuple21 a b)))))
  (= (mem (set1 (tuple2 (tuple2 a1 b1) (tuple2 a1 b1))) (t2tb25 r)
  (relation (tuple2 a1 b1) (tuple2 a1 b1) (t2tb11 u) (t2tb11 v)))
  (forall ((x (tuple21 a b)) (y (tuple21 a b)))
  (=> (mem (tuple2 (tuple2 a1 b1) (tuple2 a1 b1))
  (Tuple2 (tuple2 a1 b1) (tuple2 a1 b1) (t2tb13 x) (t2tb13 y)) (t2tb25 r))
  (and (mem3 x u) (mem3 y v)))))))

(declare-fun t2tb51 ((set (set (tuple21 (tuple21 a b) b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a b) b))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 b1) b1))) (t2tb51 x))))

(declare-fun tb2t51 (uni) (set (set (tuple21 (tuple21 a b) b))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a b) b)))))
  (! (= (tb2t51 (t2tb51 i)) i) :pattern ((t2tb51 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 b1) b1))) j)
     (= (t2tb51 (tb2t51 j)) j)) :pattern ((t2tb51 (tb2t51 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a b))) (v (set b)) (r (set (tuple21 (tuple21 a b)
  b))))
  (= (mem (set1 (tuple2 (tuple2 a1 b1) b1)) (t2tb27 r)
  (relation b1 (tuple2 a1 b1) (t2tb11 u) (t2tb12 v)))
  (forall ((x (tuple21 a b)) (y b))
  (=> (mem (tuple2 (tuple2 a1 b1) b1)
  (Tuple2 (tuple2 a1 b1) b1 (t2tb13 x) (t2tb14 y)) (t2tb27 r))
  (and (mem3 x u) (mem2 y v)))))))

(declare-fun t2tb52 ((set (set (tuple21 (tuple21 a b) a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a b) a))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 b1) a1))) (t2tb52 x))))

(declare-fun tb2t52 (uni) (set (set (tuple21 (tuple21 a b) a))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a b) a)))))
  (! (= (tb2t52 (t2tb52 i)) i) :pattern ((t2tb52 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 b1) a1))) j)
     (= (t2tb52 (tb2t52 j)) j)) :pattern ((t2tb52 (tb2t52 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a b))) (v (set a)) (r (set (tuple21 (tuple21 a b)
  a))))
  (= (mem (set1 (tuple2 (tuple2 a1 b1) a1)) (t2tb29 r)
  (relation a1 (tuple2 a1 b1) (t2tb11 u) (t2tb1 v)))
  (forall ((x (tuple21 a b)) (y a))
  (=> (mem (tuple2 (tuple2 a1 b1) a1)
  (Tuple2 (tuple2 a1 b1) a1 (t2tb13 x) (t2tb2 y)) (t2tb29 r))
  (and (mem3 x u) (mem1 y v)))))))

;; mem_relation
  (assert
  (forall ((b2 ty))
  (forall ((u (set (tuple21 a b))) (v uni) (r uni))
  (and
  (=> (mem (set1 (tuple2 (tuple2 a1 b1) b2)) r
  (relation b2 (tuple2 a1 b1) (t2tb11 u) v))
  (forall ((x (tuple21 a b)) (y uni))
  (=> (mem (tuple2 (tuple2 a1 b1) b2) (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) y)
  r) (and (mem3 x u) (mem b2 y v)))))
  (=>
  (forall ((x (tuple21 a b)) (y uni))
  (=> (sort b2 y)
  (=> (mem (tuple2 (tuple2 a1 b1) b2) (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) y)
  r) (and (mem3 x u) (mem b2 y v))))) (mem (set1 (tuple2 (tuple2 a1 b1) b2))
  r (relation b2 (tuple2 a1 b1) (t2tb11 u) v)))))))

(declare-fun t2tb3884 ((set (set (tuple21 b (tuple21 c f))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 b (tuple21 c f)))))) (sort
  (set1 (set1 (tuple2 b1 (tuple2 c1 f1)))) (t2tb3884 x))))

(declare-fun tb2t3884 (uni) (set (set (tuple21 b (tuple21 c f)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 b (tuple21 c f))))))
  (! (= (tb2t3884 (t2tb3884 i)) i) :pattern ((t2tb3884 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 b1 (tuple2 c1 f1)))) j)
     (= (t2tb3884 (tb2t3884 j)) j)) :pattern ((t2tb3884 (tb2t3884 j))) )))

;; mem_relation
  (assert
  (forall ((u (set b)) (v (set (tuple21 c f))) (r (set (tuple21 b (tuple21 c
  f)))))
  (= (mem (set1 (tuple2 b1 (tuple2 c1 f1))) (t2tb3534 r)
  (relation (tuple2 c1 f1) b1 (t2tb12 u) (t2tb2942 v)))
  (forall ((x b) (y (tuple21 c f)))
  (=> (mem (tuple2 b1 (tuple2 c1 f1))
  (Tuple2 b1 (tuple2 c1 f1) (t2tb14 x) (t2tb2948 y)) (t2tb3534 r))
  (and (mem2 x u) (mem45 y v)))))))

(declare-fun t2tb3885 ((set (set (tuple21 b (tuple21 a e))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 b (tuple21 a e)))))) (sort
  (set1 (set1 (tuple2 b1 (tuple2 a1 e1)))) (t2tb3885 x))))

(declare-fun tb2t3885 (uni) (set (set (tuple21 b (tuple21 a e)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 b (tuple21 a e))))))
  (! (= (tb2t3885 (t2tb3885 i)) i) :pattern ((t2tb3885 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 b1 (tuple2 a1 e1)))) j)
     (= (t2tb3885 (tb2t3885 j)) j)) :pattern ((t2tb3885 (tb2t3885 j))) )))

;; mem_relation
  (assert
  (forall ((u (set b)) (v (set (tuple21 a e))) (r (set (tuple21 b (tuple21 a
  e)))))
  (= (mem (set1 (tuple2 b1 (tuple2 a1 e1))) (t2tb3536 r)
  (relation (tuple2 a1 e1) b1 (t2tb12 u) (t2tb2943 v)))
  (forall ((x b) (y (tuple21 a e)))
  (=> (mem (tuple2 b1 (tuple2 a1 e1))
  (Tuple2 b1 (tuple2 a1 e1) (t2tb14 x) (t2tb2949 y)) (t2tb3536 r))
  (and (mem2 x u) (mem44 y v)))))))

(declare-fun t2tb3886 ((set (set (tuple21 b (tuple21 (tuple21 b d) (tuple21 e
  f)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 b (tuple21 (tuple21 b d) (tuple21 e f)))))))
  (sort (set1 (set1 (tuple2 b1 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)))))
  (t2tb3886 x))))

(declare-fun tb2t3886 (uni) (set (set (tuple21 b (tuple21 (tuple21 b d)
  (tuple21 e f))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 b (tuple21 (tuple21 b d) (tuple21 e f)))))))
  (! (= (tb2t3886 (t2tb3886 i)) i) :pattern ((t2tb3886 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 b1 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1))))) j)
     (= (t2tb3886 (tb2t3886 j)) j)) :pattern ((t2tb3886 (tb2t3886 j))) )))

;; mem_relation
  (assert
  (forall ((u (set b)) (v (set (tuple21 (tuple21 b d) (tuple21 e f))))
  (r (set (tuple21 b (tuple21 (tuple21 b d) (tuple21 e f))))))
  (= (mem (set1 (tuple2 b1 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1))))
  (t2tb3538 r)
  (relation (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) b1 (t2tb12 u)
  (t2tb2944 v)))
  (forall ((x b) (y (tuple21 (tuple21 b d) (tuple21 e f))))
  (=> (mem (tuple2 b1 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)))
  (Tuple2 b1 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (t2tb14 x) (t2tb2950 y))
  (t2tb3538 r)) (and (mem2 x u) (mem43 y v)))))))

(declare-fun t2tb3887 ((set (set (tuple21 b (tuple21 (tuple21 a c) (tuple21 e
  f)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 b (tuple21 (tuple21 a c) (tuple21 e f)))))))
  (sort (set1 (set1 (tuple2 b1 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)))))
  (t2tb3887 x))))

(declare-fun tb2t3887 (uni) (set (set (tuple21 b (tuple21 (tuple21 a c)
  (tuple21 e f))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 b (tuple21 (tuple21 a c) (tuple21 e f)))))))
  (! (= (tb2t3887 (t2tb3887 i)) i) :pattern ((t2tb3887 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 b1 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1))))) j)
     (= (t2tb3887 (tb2t3887 j)) j)) :pattern ((t2tb3887 (tb2t3887 j))) )))

;; mem_relation
  (assert
  (forall ((u (set b)) (v (set (tuple21 (tuple21 a c) (tuple21 e f))))
  (r (set (tuple21 b (tuple21 (tuple21 a c) (tuple21 e f))))))
  (= (mem (set1 (tuple2 b1 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1))))
  (t2tb3540 r)
  (relation (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) b1 (t2tb12 u)
  (t2tb2945 v)))
  (forall ((x b) (y (tuple21 (tuple21 a c) (tuple21 e f))))
  (=> (mem (tuple2 b1 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)))
  (Tuple2 b1 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (t2tb14 x) (t2tb2951 y))
  (t2tb3540 r)) (and (mem2 x u) (mem42 y v)))))))

(declare-fun t2tb3888 ((set (set (tuple21 b (set (tuple21 d f)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 b (set (tuple21 d f))))))) (sort
  (set1 (set1 (tuple2 b1 (set1 (tuple2 d1 f1))))) (t2tb3888 x))))

(declare-fun tb2t3888 (uni) (set (set (tuple21 b (set (tuple21 d f))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 b (set (tuple21 d f)))))))
  (! (= (tb2t3888 (t2tb3888 i)) i) :pattern ((t2tb3888 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 b1 (set1 (tuple2 d1 f1))))) j)
     (= (t2tb3888 (tb2t3888 j)) j)) :pattern ((t2tb3888 (tb2t3888 j))) )))

;; mem_relation
  (assert
  (forall ((u (set b)) (v (set (set (tuple21 d f)))) (r (set (tuple21 b
  (set (tuple21 d f))))))
  (= (mem (set1 (tuple2 b1 (set1 (tuple2 d1 f1)))) (t2tb3542 r)
  (relation (set1 (tuple2 d1 f1)) b1 (t2tb12 u) (t2tb2939 v)))
  (forall ((x b) (y (set (tuple21 d f))))
  (=> (mem (tuple2 b1 (set1 (tuple2 d1 f1)))
  (Tuple2 b1 (set1 (tuple2 d1 f1)) (t2tb14 x) (t2tb2938 y)) (t2tb3542 r))
  (and (mem2 x u) (mem41 y v)))))))

(declare-fun t2tb3889 ((set (set (tuple21 b (tuple21 d f))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 b (tuple21 d f)))))) (sort
  (set1 (set1 (tuple2 b1 (tuple2 d1 f1)))) (t2tb3889 x))))

(declare-fun tb2t3889 (uni) (set (set (tuple21 b (tuple21 d f)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 b (tuple21 d f))))))
  (! (= (tb2t3889 (t2tb3889 i)) i) :pattern ((t2tb3889 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 b1 (tuple2 d1 f1)))) j)
     (= (t2tb3889 (tb2t3889 j)) j)) :pattern ((t2tb3889 (tb2t3889 j))) )))

;; mem_relation
  (assert
  (forall ((u (set b)) (v (set (tuple21 d f))) (r (set (tuple21 b (tuple21 d
  f)))))
  (= (mem (set1 (tuple2 b1 (tuple2 d1 f1))) (t2tb3544 r)
  (relation (tuple2 d1 f1) b1 (t2tb12 u) (t2tb2938 v)))
  (forall ((x b) (y (tuple21 d f)))
  (=> (mem (tuple2 b1 (tuple2 d1 f1))
  (Tuple2 b1 (tuple2 d1 f1) (t2tb14 x) (t2tb2952 y)) (t2tb3544 r))
  (and (mem2 x u) (mem40 y v)))))))

(declare-fun t2tb3890 ((set (set (tuple21 b (set (tuple21 b e)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 b (set (tuple21 b e))))))) (sort
  (set1 (set1 (tuple2 b1 (set1 (tuple2 b1 e1))))) (t2tb3890 x))))

(declare-fun tb2t3890 (uni) (set (set (tuple21 b (set (tuple21 b e))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 b (set (tuple21 b e)))))))
  (! (= (tb2t3890 (t2tb3890 i)) i) :pattern ((t2tb3890 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 b1 (set1 (tuple2 b1 e1))))) j)
     (= (t2tb3890 (tb2t3890 j)) j)) :pattern ((t2tb3890 (tb2t3890 j))) )))

;; mem_relation
  (assert
  (forall ((u (set b)) (v (set (set (tuple21 b e)))) (r (set (tuple21 b
  (set (tuple21 b e))))))
  (= (mem (set1 (tuple2 b1 (set1 (tuple2 b1 e1)))) (t2tb3547 r)
  (relation (set1 (tuple2 b1 e1)) b1 (t2tb12 u) (t2tb2941 v)))
  (forall ((x b) (y (set (tuple21 b e))))
  (=> (mem (tuple2 b1 (set1 (tuple2 b1 e1)))
  (Tuple2 b1 (set1 (tuple2 b1 e1)) (t2tb14 x) (t2tb2940 y)) (t2tb3547 r))
  (and (mem2 x u) (mem39 y v)))))))

(declare-fun t2tb3891 ((set (set (tuple21 b (tuple21 b e))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 b (tuple21 b e)))))) (sort
  (set1 (set1 (tuple2 b1 (tuple2 b1 e1)))) (t2tb3891 x))))

(declare-fun tb2t3891 (uni) (set (set (tuple21 b (tuple21 b e)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 b (tuple21 b e))))))
  (! (= (tb2t3891 (t2tb3891 i)) i) :pattern ((t2tb3891 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 b1 (tuple2 b1 e1)))) j)
     (= (t2tb3891 (tb2t3891 j)) j)) :pattern ((t2tb3891 (tb2t3891 j))) )))

;; mem_relation
  (assert
  (forall ((u (set b)) (v (set (tuple21 b e))) (r (set (tuple21 b (tuple21 b
  e)))))
  (= (mem (set1 (tuple2 b1 (tuple2 b1 e1))) (t2tb3548 r)
  (relation (tuple2 b1 e1) b1 (t2tb12 u) (t2tb2940 v)))
  (forall ((x b) (y (tuple21 b e)))
  (=> (mem (tuple2 b1 (tuple2 b1 e1))
  (Tuple2 b1 (tuple2 b1 e1) (t2tb14 x) (t2tb2953 y)) (t2tb3548 r))
  (and (mem2 x u) (mem38 y v)))))))

(declare-fun t2tb3892 ((set (set (tuple21 b f)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 b f))))) (sort (set1 (set1 (tuple2 b1 f1)))
  (t2tb3892 x))))

(declare-fun tb2t3892 (uni) (set (set (tuple21 b f))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 b f)))))
  (! (= (tb2t3892 (t2tb3892 i)) i) :pattern ((t2tb3892 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 b1 f1))) j) (= (t2tb3892 (tb2t3892 j)) j)) :pattern (
  (t2tb3892 (tb2t3892 j))) )))

;; mem_relation
  (assert
  (forall ((u (set b)) (v (set f)) (r (set (tuple21 b f))))
  (= (mem (set1 (tuple2 b1 f1)) (t2tb3550 r)
  (relation f1 b1 (t2tb12 u) (t2tb2946 v)))
  (forall ((x b) (y f))
  (=> (mem (tuple2 b1 f1) (Tuple2 b1 f1 (t2tb14 x) (t2tb2954 y))
  (t2tb3550 r)) (and (mem2 x u) (mem37 y v)))))))

;; mem_relation
  (assert
  (forall ((u (set b)) (v (set e)) (r (set (tuple21 b e))))
  (= (mem39 r (relation11 u v))
  (forall ((x b) (y e))
  (=> (mem38 (tb2t2953 (Tuple2 b1 e1 (t2tb14 x) (t2tb2955 y))) r)
  (and (mem2 x u) (mem36 y v)))))))

(declare-fun t2tb3893 ((set (set (tuple21 b (tuple21 (tuple21 a c) (tuple21 b
  d)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 b (tuple21 (tuple21 a c) (tuple21 b d)))))))
  (sort (set1 (set1 (tuple2 b1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))))
  (t2tb3893 x))))

(declare-fun tb2t3893 (uni) (set (set (tuple21 b (tuple21 (tuple21 a c)
  (tuple21 b d))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 b (tuple21 (tuple21 a c) (tuple21 b d)))))))
  (! (= (tb2t3893 (t2tb3893 i)) i) :pattern ((t2tb3893 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 b1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))))) j)
     (= (t2tb3893 (tb2t3893 j)) j)) :pattern ((t2tb3893 (tb2t3893 j))) )))

;; mem_relation
  (assert
  (forall ((u (set b)) (v (set (tuple21 (tuple21 a c) (tuple21 b d))))
  (r (set (tuple21 b (tuple21 (tuple21 a c) (tuple21 b d))))))
  (= (mem (set1 (tuple2 b1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))))
  (t2tb3552 r)
  (relation (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) b1 (t2tb12 u) (t2tb686 v)))
  (forall ((x b) (y (tuple21 (tuple21 a c) (tuple21 b d))))
  (=> (mem (tuple2 b1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
  (Tuple2 b1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb14 x) (t2tb691 y))
  (t2tb3552 r)) (and (mem2 x u) (mem24 y v)))))))

(declare-fun t2tb3894 ((set (set (tuple21 b (set (tuple21 c d)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 b (set (tuple21 c d))))))) (sort
  (set1 (set1 (tuple2 b1 (set1 (tuple2 c1 d1))))) (t2tb3894 x))))

(declare-fun tb2t3894 (uni) (set (set (tuple21 b (set (tuple21 c d))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 b (set (tuple21 c d)))))))
  (! (= (tb2t3894 (t2tb3894 i)) i) :pattern ((t2tb3894 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 b1 (set1 (tuple2 c1 d1))))) j)
     (= (t2tb3894 (tb2t3894 j)) j)) :pattern ((t2tb3894 (tb2t3894 j))) )))

;; mem_relation
  (assert
  (forall ((u (set b)) (v (set (set (tuple21 c d)))) (r (set (tuple21 b
  (set (tuple21 c d))))))
  (= (mem (set1 (tuple2 b1 (set1 (tuple2 c1 d1)))) (t2tb3554 r)
  (relation (set1 (tuple2 c1 d1)) b1 (t2tb12 u) (t2tb688 v)))
  (forall ((x b) (y (set (tuple21 c d))))
  (=> (mem (tuple2 b1 (set1 (tuple2 c1 d1)))
  (Tuple2 b1 (set1 (tuple2 c1 d1)) (t2tb14 x) (t2tb689 y)) (t2tb3554 r))
  (and (mem2 x u) (mem22 y v)))))))

(declare-fun t2tb1007 ((set (set (tuple21 b (tuple21 c d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 b (tuple21 c d)))))) (sort
  (set1 (set1 (tuple2 b1 (tuple2 c1 d1)))) (t2tb1007 x))))

(declare-fun tb2t1007 (uni) (set (set (tuple21 b (tuple21 c d)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 b (tuple21 c d))))))
  (! (= (tb2t1007 (t2tb1007 i)) i) :pattern ((t2tb1007 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 b1 (tuple2 c1 d1)))) j)
     (= (t2tb1007 (tb2t1007 j)) j)) :pattern ((t2tb1007 (tb2t1007 j))) )))

;; mem_relation
  (assert
  (forall ((u (set b)) (v (set (tuple21 c d))) (r (set (tuple21 b (tuple21 c
  d)))))
  (= (mem (set1 (tuple2 b1 (tuple2 c1 d1))) (t2tb891 r)
  (relation (tuple2 c1 d1) b1 (t2tb12 u) (t2tb689 v)))
  (forall ((x b) (y (tuple21 c d)))
  (=> (mem (tuple2 b1 (tuple2 c1 d1))
  (Tuple2 b1 (tuple2 c1 d1) (t2tb14 x) (t2tb693 y)) (t2tb891 r))
  (and (mem2 x u) (mem21 y v)))))))

(declare-fun t2tb906 ((set (set (tuple21 b d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 b d))))) (sort (set1 (set1 (tuple2 b1 d1)))
  (t2tb906 x))))

(declare-fun tb2t906 (uni) (set (set (tuple21 b d))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 b d)))))
  (! (= (tb2t906 (t2tb906 i)) i) :pattern ((t2tb906 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 b1 d1))) j) (= (t2tb906 (tb2t906 j)) j)) :pattern (
  (t2tb906 (tb2t906 j))) )))

;; mem_relation
  (assert
  (forall ((u (set b)) (v (set d)) (r (set (tuple21 b d))))
  (= (mem (set1 (tuple2 b1 d1)) (t2tb687 r)
  (relation d1 b1 (t2tb12 u) (t2tb690 v)))
  (forall ((x b) (y d))
  (=> (mem (tuple2 b1 d1) (Tuple2 b1 d1 (t2tb14 x) (t2tb694 y)) (t2tb687 r))
  (and (mem2 x u) (mem20 y v)))))))

(declare-fun t2tb130 ((set (set (tuple21 b c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 b c))))) (sort (set1 (set1 (tuple2 b1 c1)))
  (t2tb130 x))))

(declare-fun tb2t130 (uni) (set (set (tuple21 b c))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 b c)))))
  (! (= (tb2t130 (t2tb130 i)) i) :pattern ((t2tb130 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 b1 c1))) j) (= (t2tb130 (tb2t130 j)) j)) :pattern (
  (t2tb130 (tb2t130 j))) )))

;; mem_relation
  (assert
  (forall ((u (set b)) (v (set c)) (r (set (tuple21 b c))))
  (= (mem (set1 (tuple2 b1 c1)) (t2tb131 r)
  (relation c1 b1 (t2tb12 u) (t2tb132 v)))
  (forall ((x b) (y c))
  (=> (mem (tuple2 b1 c1) (Tuple2 b1 c1 (t2tb14 x) (t2tb135 y)) (t2tb131 r))
  (and (mem2 x u) (mem7 y v)))))))

(declare-fun t2tb53 ((set (set (tuple21 b (set (tuple21 a b)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 b (set (tuple21 a b))))))) (sort
  (set1 (set1 (tuple2 b1 (set1 (tuple2 a1 b1))))) (t2tb53 x))))

(declare-fun tb2t53 (uni) (set (set (tuple21 b (set (tuple21 a b))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 b (set (tuple21 a b)))))))
  (! (= (tb2t53 (t2tb53 i)) i) :pattern ((t2tb53 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 b1 (set1 (tuple2 a1 b1))))) j)
     (= (t2tb53 (tb2t53 j)) j)) :pattern ((t2tb53 (tb2t53 j))) )))

;; mem_relation
  (assert
  (forall ((u (set b)) (v (set (set (tuple21 a b)))) (r (set (tuple21 b
  (set (tuple21 a b))))))
  (= (mem (set1 (tuple2 b1 (set1 (tuple2 a1 b1)))) (t2tb31 r)
  (relation (set1 (tuple2 a1 b1)) b1 (t2tb12 u) (t2tb10 v)))
  (forall ((x b) (y (set (tuple21 a b))))
  (=> (mem (tuple2 b1 (set1 (tuple2 a1 b1)))
  (Tuple2 b1 (set1 (tuple2 a1 b1)) (t2tb14 x) (t2tb11 y)) (t2tb31 r))
  (and (mem2 x u) (mem4 y v)))))))

(declare-fun t2tb54 ((set (set (tuple21 b (tuple21 a b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 b (tuple21 a b)))))) (sort
  (set1 (set1 (tuple2 b1 (tuple2 a1 b1)))) (t2tb54 x))))

(declare-fun tb2t54 (uni) (set (set (tuple21 b (tuple21 a b)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 b (tuple21 a b))))))
  (! (= (tb2t54 (t2tb54 i)) i) :pattern ((t2tb54 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 b1 (tuple2 a1 b1)))) j)
     (= (t2tb54 (tb2t54 j)) j)) :pattern ((t2tb54 (tb2t54 j))) )))

;; mem_relation
  (assert
  (forall ((u (set b)) (v (set (tuple21 a b))) (r (set (tuple21 b (tuple21 a
  b)))))
  (= (mem (set1 (tuple2 b1 (tuple2 a1 b1))) (t2tb34 r)
  (relation (tuple2 a1 b1) b1 (t2tb12 u) (t2tb11 v)))
  (forall ((x b) (y (tuple21 a b)))
  (=> (mem (tuple2 b1 (tuple2 a1 b1))
  (Tuple2 b1 (tuple2 a1 b1) (t2tb14 x) (t2tb13 y)) (t2tb34 r))
  (and (mem2 x u) (mem3 y v)))))))

(declare-fun t2tb55 ((set (set (tuple21 b b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 b b))))) (sort (set1 (set1 (tuple2 b1 b1)))
  (t2tb55 x))))

(declare-fun tb2t55 (uni) (set (set (tuple21 b b))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 b b)))))
  (! (= (tb2t55 (t2tb55 i)) i) :pattern ((t2tb55 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 b1 b1))) j) (= (t2tb55 (tb2t55 j)) j)) :pattern (
  (t2tb55 (tb2t55 j))) )))

;; mem_relation
  (assert
  (forall ((u (set b)) (v (set b)) (r (set (tuple21 b b))))
  (= (mem (set1 (tuple2 b1 b1)) (t2tb35 r)
  (relation b1 b1 (t2tb12 u) (t2tb12 v)))
  (forall ((x b) (y b))
  (=> (mem (tuple2 b1 b1) (Tuple2 b1 b1 (t2tb14 x) (t2tb14 y)) (t2tb35 r))
  (and (mem2 x u) (mem2 y v)))))))

(declare-fun t2tb56 ((set (set (tuple21 b a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 b a))))) (sort (set1 (set1 (tuple2 b1 a1)))
  (t2tb56 x))))

(declare-fun tb2t56 (uni) (set (set (tuple21 b a))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 b a)))))
  (! (= (tb2t56 (t2tb56 i)) i) :pattern ((t2tb56 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 b1 a1))) j) (= (t2tb56 (tb2t56 j)) j)) :pattern (
  (t2tb56 (tb2t56 j))) )))

;; mem_relation
  (assert
  (forall ((u (set b)) (v (set a)) (r (set (tuple21 b a))))
  (= (mem (set1 (tuple2 b1 a1)) (t2tb37 r)
  (relation a1 b1 (t2tb12 u) (t2tb1 v)))
  (forall ((x b) (y a))
  (=> (mem (tuple2 b1 a1) (Tuple2 b1 a1 (t2tb14 x) (t2tb2 y)) (t2tb37 r))
  (and (mem2 x u) (mem1 y v)))))))

;; mem_relation
  (assert
  (forall ((b2 ty))
  (forall ((u (set b)) (v uni) (r uni))
  (and
  (=> (mem (set1 (tuple2 b1 b2)) r (relation b2 b1 (t2tb12 u) v))
  (forall ((x b) (y uni))
  (=> (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) y) r)
  (and (mem2 x u) (mem b2 y v)))))
  (=>
  (forall ((x b) (y uni))
  (=> (sort b2 y)
  (=> (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) y) r)
  (and (mem2 x u) (mem b2 y v))))) (mem (set1 (tuple2 b1 b2)) r
  (relation b2 b1 (t2tb12 u) v)))))))

(declare-fun t2tb3895 ((set (set (tuple21 a (tuple21 c f))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 a (tuple21 c f)))))) (sort
  (set1 (set1 (tuple2 a1 (tuple2 c1 f1)))) (t2tb3895 x))))

(declare-fun tb2t3895 (uni) (set (set (tuple21 a (tuple21 c f)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 a (tuple21 c f))))))
  (! (= (tb2t3895 (t2tb3895 i)) i) :pattern ((t2tb3895 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 a1 (tuple2 c1 f1)))) j)
     (= (t2tb3895 (tb2t3895 j)) j)) :pattern ((t2tb3895 (tb2t3895 j))) )))

;; mem_relation
  (assert
  (forall ((u (set a)) (v (set (tuple21 c f))) (r (set (tuple21 a (tuple21 c
  f)))))
  (= (mem (set1 (tuple2 a1 (tuple2 c1 f1))) (t2tb3556 r)
  (relation (tuple2 c1 f1) a1 (t2tb1 u) (t2tb2942 v)))
  (forall ((x a) (y (tuple21 c f)))
  (=> (mem (tuple2 a1 (tuple2 c1 f1))
  (Tuple2 a1 (tuple2 c1 f1) (t2tb2 x) (t2tb2948 y)) (t2tb3556 r))
  (and (mem1 x u) (mem45 y v)))))))

(declare-fun t2tb3896 ((set (set (tuple21 a (tuple21 a e))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 a (tuple21 a e)))))) (sort
  (set1 (set1 (tuple2 a1 (tuple2 a1 e1)))) (t2tb3896 x))))

(declare-fun tb2t3896 (uni) (set (set (tuple21 a (tuple21 a e)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 a (tuple21 a e))))))
  (! (= (tb2t3896 (t2tb3896 i)) i) :pattern ((t2tb3896 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 a1 (tuple2 a1 e1)))) j)
     (= (t2tb3896 (tb2t3896 j)) j)) :pattern ((t2tb3896 (tb2t3896 j))) )))

;; mem_relation
  (assert
  (forall ((u (set a)) (v (set (tuple21 a e))) (r (set (tuple21 a (tuple21 a
  e)))))
  (= (mem (set1 (tuple2 a1 (tuple2 a1 e1))) (t2tb3558 r)
  (relation (tuple2 a1 e1) a1 (t2tb1 u) (t2tb2943 v)))
  (forall ((x a) (y (tuple21 a e)))
  (=> (mem (tuple2 a1 (tuple2 a1 e1))
  (Tuple2 a1 (tuple2 a1 e1) (t2tb2 x) (t2tb2949 y)) (t2tb3558 r))
  (and (mem1 x u) (mem44 y v)))))))

(declare-fun t2tb3897 ((set (set (tuple21 a (tuple21 (tuple21 b d) (tuple21 e
  f)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 a (tuple21 (tuple21 b d) (tuple21 e f)))))))
  (sort (set1 (set1 (tuple2 a1 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)))))
  (t2tb3897 x))))

(declare-fun tb2t3897 (uni) (set (set (tuple21 a (tuple21 (tuple21 b d)
  (tuple21 e f))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 a (tuple21 (tuple21 b d) (tuple21 e f)))))))
  (! (= (tb2t3897 (t2tb3897 i)) i) :pattern ((t2tb3897 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 a1 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1))))) j)
     (= (t2tb3897 (tb2t3897 j)) j)) :pattern ((t2tb3897 (tb2t3897 j))) )))

;; mem_relation
  (assert
  (forall ((u (set a)) (v (set (tuple21 (tuple21 b d) (tuple21 e f))))
  (r (set (tuple21 a (tuple21 (tuple21 b d) (tuple21 e f))))))
  (= (mem (set1 (tuple2 a1 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1))))
  (t2tb3560 r)
  (relation (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) a1 (t2tb1 u) (t2tb2944 v)))
  (forall ((x a) (y (tuple21 (tuple21 b d) (tuple21 e f))))
  (=> (mem (tuple2 a1 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)))
  (Tuple2 a1 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (t2tb2 x) (t2tb2950 y))
  (t2tb3560 r)) (and (mem1 x u) (mem43 y v)))))))

(declare-fun t2tb3898 ((set (set (tuple21 a (tuple21 (tuple21 a c) (tuple21 e
  f)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 a (tuple21 (tuple21 a c) (tuple21 e f)))))))
  (sort (set1 (set1 (tuple2 a1 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)))))
  (t2tb3898 x))))

(declare-fun tb2t3898 (uni) (set (set (tuple21 a (tuple21 (tuple21 a c)
  (tuple21 e f))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 a (tuple21 (tuple21 a c) (tuple21 e f)))))))
  (! (= (tb2t3898 (t2tb3898 i)) i) :pattern ((t2tb3898 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 a1 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1))))) j)
     (= (t2tb3898 (tb2t3898 j)) j)) :pattern ((t2tb3898 (tb2t3898 j))) )))

;; mem_relation
  (assert
  (forall ((u (set a)) (v (set (tuple21 (tuple21 a c) (tuple21 e f))))
  (r (set (tuple21 a (tuple21 (tuple21 a c) (tuple21 e f))))))
  (= (mem (set1 (tuple2 a1 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1))))
  (t2tb3563 r)
  (relation (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) a1 (t2tb1 u) (t2tb2945 v)))
  (forall ((x a) (y (tuple21 (tuple21 a c) (tuple21 e f))))
  (=> (mem (tuple2 a1 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)))
  (Tuple2 a1 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (t2tb2 x) (t2tb2951 y))
  (t2tb3563 r)) (and (mem1 x u) (mem42 y v)))))))

(declare-fun t2tb3899 ((set (set (tuple21 a (set (tuple21 d f)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 a (set (tuple21 d f))))))) (sort
  (set1 (set1 (tuple2 a1 (set1 (tuple2 d1 f1))))) (t2tb3899 x))))

(declare-fun tb2t3899 (uni) (set (set (tuple21 a (set (tuple21 d f))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 a (set (tuple21 d f)))))))
  (! (= (tb2t3899 (t2tb3899 i)) i) :pattern ((t2tb3899 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 a1 (set1 (tuple2 d1 f1))))) j)
     (= (t2tb3899 (tb2t3899 j)) j)) :pattern ((t2tb3899 (tb2t3899 j))) )))

;; mem_relation
  (assert
  (forall ((u (set a)) (v (set (set (tuple21 d f)))) (r (set (tuple21 a
  (set (tuple21 d f))))))
  (= (mem (set1 (tuple2 a1 (set1 (tuple2 d1 f1)))) (t2tb3564 r)
  (relation (set1 (tuple2 d1 f1)) a1 (t2tb1 u) (t2tb2939 v)))
  (forall ((x a) (y (set (tuple21 d f))))
  (=> (mem (tuple2 a1 (set1 (tuple2 d1 f1)))
  (Tuple2 a1 (set1 (tuple2 d1 f1)) (t2tb2 x) (t2tb2938 y)) (t2tb3564 r))
  (and (mem1 x u) (mem41 y v)))))))

(declare-fun t2tb3900 ((set (set (tuple21 a (tuple21 d f))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 a (tuple21 d f)))))) (sort
  (set1 (set1 (tuple2 a1 (tuple2 d1 f1)))) (t2tb3900 x))))

(declare-fun tb2t3900 (uni) (set (set (tuple21 a (tuple21 d f)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 a (tuple21 d f))))))
  (! (= (tb2t3900 (t2tb3900 i)) i) :pattern ((t2tb3900 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 a1 (tuple2 d1 f1)))) j)
     (= (t2tb3900 (tb2t3900 j)) j)) :pattern ((t2tb3900 (tb2t3900 j))) )))

;; mem_relation
  (assert
  (forall ((u (set a)) (v (set (tuple21 d f))) (r (set (tuple21 a (tuple21 d
  f)))))
  (= (mem (set1 (tuple2 a1 (tuple2 d1 f1))) (t2tb3566 r)
  (relation (tuple2 d1 f1) a1 (t2tb1 u) (t2tb2938 v)))
  (forall ((x a) (y (tuple21 d f)))
  (=> (mem (tuple2 a1 (tuple2 d1 f1))
  (Tuple2 a1 (tuple2 d1 f1) (t2tb2 x) (t2tb2952 y)) (t2tb3566 r))
  (and (mem1 x u) (mem40 y v)))))))

(declare-fun t2tb3901 ((set (set (tuple21 a (set (tuple21 b e)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 a (set (tuple21 b e))))))) (sort
  (set1 (set1 (tuple2 a1 (set1 (tuple2 b1 e1))))) (t2tb3901 x))))

(declare-fun tb2t3901 (uni) (set (set (tuple21 a (set (tuple21 b e))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 a (set (tuple21 b e)))))))
  (! (= (tb2t3901 (t2tb3901 i)) i) :pattern ((t2tb3901 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 a1 (set1 (tuple2 b1 e1))))) j)
     (= (t2tb3901 (tb2t3901 j)) j)) :pattern ((t2tb3901 (tb2t3901 j))) )))

;; mem_relation
  (assert
  (forall ((u (set a)) (v (set (set (tuple21 b e)))) (r (set (tuple21 a
  (set (tuple21 b e))))))
  (= (mem (set1 (tuple2 a1 (set1 (tuple2 b1 e1)))) (t2tb3568 r)
  (relation (set1 (tuple2 b1 e1)) a1 (t2tb1 u) (t2tb2941 v)))
  (forall ((x a) (y (set (tuple21 b e))))
  (=> (mem (tuple2 a1 (set1 (tuple2 b1 e1)))
  (Tuple2 a1 (set1 (tuple2 b1 e1)) (t2tb2 x) (t2tb2940 y)) (t2tb3568 r))
  (and (mem1 x u) (mem39 y v)))))))

(declare-fun t2tb3902 ((set (set (tuple21 a (tuple21 b e))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 a (tuple21 b e)))))) (sort
  (set1 (set1 (tuple2 a1 (tuple2 b1 e1)))) (t2tb3902 x))))

(declare-fun tb2t3902 (uni) (set (set (tuple21 a (tuple21 b e)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 a (tuple21 b e))))))
  (! (= (tb2t3902 (t2tb3902 i)) i) :pattern ((t2tb3902 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 a1 (tuple2 b1 e1)))) j)
     (= (t2tb3902 (tb2t3902 j)) j)) :pattern ((t2tb3902 (tb2t3902 j))) )))

;; mem_relation
  (assert
  (forall ((u (set a)) (v (set (tuple21 b e))) (r (set (tuple21 a (tuple21 b
  e)))))
  (= (mem (set1 (tuple2 a1 (tuple2 b1 e1))) (t2tb3570 r)
  (relation (tuple2 b1 e1) a1 (t2tb1 u) (t2tb2940 v)))
  (forall ((x a) (y (tuple21 b e)))
  (=> (mem (tuple2 a1 (tuple2 b1 e1))
  (Tuple2 a1 (tuple2 b1 e1) (t2tb2 x) (t2tb2953 y)) (t2tb3570 r))
  (and (mem1 x u) (mem38 y v)))))))

(declare-fun t2tb3903 ((set (set (tuple21 a f)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 a f))))) (sort (set1 (set1 (tuple2 a1 f1)))
  (t2tb3903 x))))

(declare-fun tb2t3903 (uni) (set (set (tuple21 a f))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 a f)))))
  (! (= (tb2t3903 (t2tb3903 i)) i) :pattern ((t2tb3903 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 a1 f1))) j) (= (t2tb3903 (tb2t3903 j)) j)) :pattern (
  (t2tb3903 (tb2t3903 j))) )))

;; mem_relation
  (assert
  (forall ((u (set a)) (v (set f)) (r (set (tuple21 a f))))
  (= (mem (set1 (tuple2 a1 f1)) (t2tb3572 r)
  (relation f1 a1 (t2tb1 u) (t2tb2946 v)))
  (forall ((x a) (y f))
  (=> (mem (tuple2 a1 f1) (Tuple2 a1 f1 (t2tb2 x) (t2tb2954 y)) (t2tb3572 r))
  (and (mem1 x u) (mem37 y v)))))))

;; mem_relation
  (assert
  (forall ((u (set a)) (v (set e)) (r (set (tuple21 a e))))
  (= (mem (set1 (tuple2 a1 e1)) (t2tb2943 r)
  (relation e1 a1 (t2tb1 u) (t2tb2947 v)))
  (forall ((x a) (y e))
  (=> (mem44 (tb2t2949 (Tuple2 a1 e1 (t2tb2 x) (t2tb2955 y))) r)
  (and (mem1 x u) (mem36 y v)))))))

(declare-fun t2tb3904 ((set (set (tuple21 a (tuple21 (tuple21 a c) (tuple21 b
  d)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 a (tuple21 (tuple21 a c) (tuple21 b d)))))))
  (sort (set1 (set1 (tuple2 a1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))))
  (t2tb3904 x))))

(declare-fun tb2t3904 (uni) (set (set (tuple21 a (tuple21 (tuple21 a c)
  (tuple21 b d))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 a (tuple21 (tuple21 a c) (tuple21 b d)))))))
  (! (= (tb2t3904 (t2tb3904 i)) i) :pattern ((t2tb3904 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 a1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))))) j)
     (= (t2tb3904 (tb2t3904 j)) j)) :pattern ((t2tb3904 (tb2t3904 j))) )))

;; mem_relation
  (assert
  (forall ((u (set a)) (v (set (tuple21 (tuple21 a c) (tuple21 b d))))
  (r (set (tuple21 a (tuple21 (tuple21 a c) (tuple21 b d))))))
  (= (mem (set1 (tuple2 a1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))))
  (t2tb3574 r)
  (relation (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) a1 (t2tb1 u) (t2tb686 v)))
  (forall ((x a) (y (tuple21 (tuple21 a c) (tuple21 b d))))
  (=> (mem (tuple2 a1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
  (Tuple2 a1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb2 x) (t2tb691 y))
  (t2tb3574 r)) (and (mem1 x u) (mem24 y v)))))))

(declare-fun t2tb3905 ((set (set (tuple21 a (set (tuple21 c d)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 a (set (tuple21 c d))))))) (sort
  (set1 (set1 (tuple2 a1 (set1 (tuple2 c1 d1))))) (t2tb3905 x))))

(declare-fun tb2t3905 (uni) (set (set (tuple21 a (set (tuple21 c d))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 a (set (tuple21 c d)))))))
  (! (= (tb2t3905 (t2tb3905 i)) i) :pattern ((t2tb3905 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 a1 (set1 (tuple2 c1 d1))))) j)
     (= (t2tb3905 (tb2t3905 j)) j)) :pattern ((t2tb3905 (tb2t3905 j))) )))

;; mem_relation
  (assert
  (forall ((u (set a)) (v (set (set (tuple21 c d)))) (r (set (tuple21 a
  (set (tuple21 c d))))))
  (= (mem (set1 (tuple2 a1 (set1 (tuple2 c1 d1)))) (t2tb3576 r)
  (relation (set1 (tuple2 c1 d1)) a1 (t2tb1 u) (t2tb688 v)))
  (forall ((x a) (y (set (tuple21 c d))))
  (=> (mem (tuple2 a1 (set1 (tuple2 c1 d1)))
  (Tuple2 a1 (set1 (tuple2 c1 d1)) (t2tb2 x) (t2tb689 y)) (t2tb3576 r))
  (and (mem1 x u) (mem22 y v)))))))

(declare-fun t2tb1012 ((set (set (tuple21 a (tuple21 c d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 a (tuple21 c d)))))) (sort
  (set1 (set1 (tuple2 a1 (tuple2 c1 d1)))) (t2tb1012 x))))

(declare-fun tb2t1012 (uni) (set (set (tuple21 a (tuple21 c d)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 a (tuple21 c d))))))
  (! (= (tb2t1012 (t2tb1012 i)) i) :pattern ((t2tb1012 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 a1 (tuple2 c1 d1)))) j)
     (= (t2tb1012 (tb2t1012 j)) j)) :pattern ((t2tb1012 (tb2t1012 j))) )))

;; mem_relation
  (assert
  (forall ((u (set a)) (v (set (tuple21 c d))) (r (set (tuple21 a (tuple21 c
  d)))))
  (= (mem (set1 (tuple2 a1 (tuple2 c1 d1))) (t2tb901 r)
  (relation (tuple2 c1 d1) a1 (t2tb1 u) (t2tb689 v)))
  (forall ((x a) (y (tuple21 c d)))
  (=> (mem (tuple2 a1 (tuple2 c1 d1))
  (Tuple2 a1 (tuple2 c1 d1) (t2tb2 x) (t2tb693 y)) (t2tb901 r))
  (and (mem1 x u) (mem21 y v)))))))

(declare-fun t2tb1013 ((set (set (tuple21 a d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 a d))))) (sort (set1 (set1 (tuple2 a1 d1)))
  (t2tb1013 x))))

(declare-fun tb2t1013 (uni) (set (set (tuple21 a d))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 a d)))))
  (! (= (tb2t1013 (t2tb1013 i)) i) :pattern ((t2tb1013 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 a1 d1))) j) (= (t2tb1013 (tb2t1013 j)) j)) :pattern (
  (t2tb1013 (tb2t1013 j))) )))

;; mem_relation
  (assert
  (forall ((u (set a)) (v (set d)) (r (set (tuple21 a d))))
  (= (mem (set1 (tuple2 a1 d1)) (t2tb903 r)
  (relation d1 a1 (t2tb1 u) (t2tb690 v)))
  (forall ((x a) (y d))
  (=> (mem (tuple2 a1 d1) (Tuple2 a1 d1 (t2tb2 x) (t2tb694 y)) (t2tb903 r))
  (and (mem1 x u) (mem20 y v)))))))

(declare-fun t2tb128 ((set (set (tuple21 a c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 a c))))) (sort (set1 (set1 (tuple2 a1 c1)))
  (t2tb128 x))))

(declare-fun tb2t128 (uni) (set (set (tuple21 a c))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 a c)))))
  (! (= (tb2t128 (t2tb128 i)) i) :pattern ((t2tb128 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 a1 c1))) j) (= (t2tb128 (tb2t128 j)) j)) :pattern (
  (t2tb128 (tb2t128 j))) )))

;; mem_relation
  (assert
  (forall ((u (set a)) (v (set c)) (r (set (tuple21 a c))))
  (= (mem (set1 (tuple2 a1 c1)) (t2tb129 r)
  (relation c1 a1 (t2tb1 u) (t2tb132 v)))
  (forall ((x a) (y c))
  (=> (mem (tuple2 a1 c1) (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y)) (t2tb129 r))
  (and (mem1 x u) (mem7 y v)))))))

(declare-fun t2tb57 ((set (set (tuple21 a (set (tuple21 a b)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 a (set (tuple21 a b))))))) (sort
  (set1 (set1 (tuple2 a1 (set1 (tuple2 a1 b1))))) (t2tb57 x))))

(declare-fun tb2t57 (uni) (set (set (tuple21 a (set (tuple21 a b))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 a (set (tuple21 a b)))))))
  (! (= (tb2t57 (t2tb57 i)) i) :pattern ((t2tb57 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 a1 (set1 (tuple2 a1 b1))))) j)
     (= (t2tb57 (tb2t57 j)) j)) :pattern ((t2tb57 (tb2t57 j))) )))

;; mem_relation
  (assert
  (forall ((u (set a)) (v (set (set (tuple21 a b)))) (r (set (tuple21 a
  (set (tuple21 a b))))))
  (= (mem (set1 (tuple2 a1 (set1 (tuple2 a1 b1)))) (t2tb39 r)
  (relation (set1 (tuple2 a1 b1)) a1 (t2tb1 u) (t2tb10 v)))
  (forall ((x a) (y (set (tuple21 a b))))
  (=> (mem (tuple2 a1 (set1 (tuple2 a1 b1)))
  (Tuple2 a1 (set1 (tuple2 a1 b1)) (t2tb2 x) (t2tb11 y)) (t2tb39 r))
  (and (mem1 x u) (mem4 y v)))))))

(declare-fun t2tb58 ((set (set (tuple21 a (tuple21 a b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 a (tuple21 a b)))))) (sort
  (set1 (set1 (tuple2 a1 (tuple2 a1 b1)))) (t2tb58 x))))

(declare-fun tb2t58 (uni) (set (set (tuple21 a (tuple21 a b)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 a (tuple21 a b))))))
  (! (= (tb2t58 (t2tb58 i)) i) :pattern ((t2tb58 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 a1 (tuple2 a1 b1)))) j)
     (= (t2tb58 (tb2t58 j)) j)) :pattern ((t2tb58 (tb2t58 j))) )))

;; mem_relation
  (assert
  (forall ((u (set a)) (v (set (tuple21 a b))) (r (set (tuple21 a (tuple21 a
  b)))))
  (= (mem (set1 (tuple2 a1 (tuple2 a1 b1))) (t2tb41 r)
  (relation (tuple2 a1 b1) a1 (t2tb1 u) (t2tb11 v)))
  (forall ((x a) (y (tuple21 a b)))
  (=> (mem (tuple2 a1 (tuple2 a1 b1))
  (Tuple2 a1 (tuple2 a1 b1) (t2tb2 x) (t2tb13 y)) (t2tb41 r))
  (and (mem1 x u) (mem3 y v)))))))

;; mem_relation
  (assert
  (forall ((u (set a)) (v (set b)) (r (set (tuple21 a b))))
  (= (mem4 r (relation1 u v))
  (forall ((x a) (y b))
  (=> (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y))) r)
  (and (mem1 x u) (mem2 y v)))))))

(declare-fun t2tb3 ((set (set (tuple21 a a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 a a))))) (sort (set1 (set1 (tuple2 a1 a1)))
  (t2tb3 x))))

(declare-fun tb2t3 (uni) (set (set (tuple21 a a))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 a a)))))
  (! (= (tb2t3 (t2tb3 i)) i) :pattern ((t2tb3 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 a1 a1))) j) (= (t2tb3 (tb2t3 j)) j)) :pattern (
  (t2tb3 (tb2t3 j))) )))

;; mem_relation
  (assert
  (forall ((u (set a)) (v (set a)) (r (set (tuple21 a a))))
  (= (mem (set1 (tuple2 a1 a1)) (t2tb4 r)
  (relation a1 a1 (t2tb1 u) (t2tb1 v)))
  (forall ((x a) (y a))
  (=> (mem (tuple2 a1 a1) (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y)) (t2tb4 r))
  (and (mem1 x u) (mem1 y v)))))))

;; mem_relation
  (assert
  (forall ((b2 ty))
  (forall ((u (set a)) (v uni) (r uni))
  (and
  (=> (mem (set1 (tuple2 a1 b2)) r (relation b2 a1 (t2tb1 u) v))
  (forall ((x a) (y uni))
  (=> (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) y) r)
  (and (mem1 x u) (mem b2 y v)))))
  (=>
  (forall ((x a) (y uni))
  (=> (sort b2 y)
  (=> (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) y) r)
  (and (mem1 x u) (mem b2 y v))))) (mem (set1 (tuple2 a1 b2)) r
  (relation b2 a1 (t2tb1 u) v)))))))

;; mem_relation
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((u uni) (v uni) (r uni))
  (and
  (=> (mem (set1 (tuple2 a2 b2)) r (relation b2 a2 u v))
  (forall ((x uni) (y uni))
  (=> (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) r)
  (and (mem a2 x u) (mem b2 y v)))))
  (=>
  (forall ((x uni) (y uni))
  (=> (sort a2 x)
  (=> (sort b2 y)
  (=> (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) r)
  (and (mem a2 x u) (mem b2 y v)))))) (mem (set1 (tuple2 a2 b2)) r
  (relation b2 a2 u v)))))))

(declare-fun inverse (ty ty uni) uni)

;; inverse_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni)) (sort (set1 (tuple2 b2 a2)) (inverse b2 a2 x)))))

(declare-fun t2tb3906 ((set (tuple21 (tuple21 e f) (tuple21 b d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 e f) (tuple21 b d))))) (sort
  (set1 (tuple2 (tuple2 e1 f1) (tuple2 b1 d1))) (t2tb3906 x))))

(declare-fun tb2t3906 (uni) (set (tuple21 (tuple21 e f) (tuple21 b d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 e f) (tuple21 b d)))))
  (! (= (tb2t3906 (t2tb3906 i)) i) :pattern ((t2tb3906 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 e1 f1) (tuple2 b1 d1))) j)
     (= (t2tb3906 (tb2t3906 j)) j)) :pattern ((t2tb3906 (tb2t3906 j))) )))

(declare-fun t2tb3907 ((tuple21 (tuple21 e f) (tuple21 b d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 e f) (tuple21 b d)))) (sort
  (tuple2 (tuple2 e1 f1) (tuple2 b1 d1)) (t2tb3907 x))))

(declare-fun tb2t3907 (uni) (tuple21 (tuple21 e f) (tuple21 b d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 e f) (tuple21 b d))))
  (! (= (tb2t3907 (t2tb3907 i)) i) :pattern ((t2tb3907 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 e1 f1) (tuple2 b1 d1)) j)
     (= (t2tb3907 (tb2t3907 j)) j)) :pattern ((t2tb3907 (tb2t3907 j))) )))

;; mem_inverse
  (assert
  (forall ((p (set (tuple21 (tuple21 e f) (tuple21 b d)))) (x (tuple21 b d))
  (y (tuple21 e f)))
  (= (mem43
  (tb2t2950 (Tuple2 (tuple2 b1 d1) (tuple2 e1 f1) (t2tb692 x) (t2tb3315 y)))
  (tb2t2944 (inverse (tuple2 b1 d1) (tuple2 e1 f1) (t2tb3906 p)))) (mem
  (tuple2 (tuple2 e1 f1) (tuple2 b1 d1))
  (Tuple2 (tuple2 e1 f1) (tuple2 b1 d1) (t2tb3315 y) (t2tb692 x))
  (t2tb3906 p)))))

(declare-fun t2tb3908 ((set (tuple21 (tuple21 e f) (tuple21 a c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 e f) (tuple21 a c))))) (sort
  (set1 (tuple2 (tuple2 e1 f1) (tuple2 a1 c1))) (t2tb3908 x))))

(declare-fun tb2t3908 (uni) (set (tuple21 (tuple21 e f) (tuple21 a c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 e f) (tuple21 a c)))))
  (! (= (tb2t3908 (t2tb3908 i)) i) :pattern ((t2tb3908 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 e1 f1) (tuple2 a1 c1))) j)
     (= (t2tb3908 (tb2t3908 j)) j)) :pattern ((t2tb3908 (tb2t3908 j))) )))

(declare-fun t2tb3909 ((tuple21 (tuple21 e f) (tuple21 a c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 e f) (tuple21 a c)))) (sort
  (tuple2 (tuple2 e1 f1) (tuple2 a1 c1)) (t2tb3909 x))))

(declare-fun tb2t3909 (uni) (tuple21 (tuple21 e f) (tuple21 a c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 e f) (tuple21 a c))))
  (! (= (tb2t3909 (t2tb3909 i)) i) :pattern ((t2tb3909 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 e1 f1) (tuple2 a1 c1)) j)
     (= (t2tb3909 (tb2t3909 j)) j)) :pattern ((t2tb3909 (tb2t3909 j))) )))

;; mem_inverse
  (assert
  (forall ((p (set (tuple21 (tuple21 e f) (tuple21 a c)))) (x (tuple21 a c))
  (y (tuple21 e f)))
  (= (mem42
  (tb2t2951 (Tuple2 (tuple2 a1 c1) (tuple2 e1 f1) (t2tb133 x) (t2tb3315 y)))
  (tb2t2945 (inverse (tuple2 a1 c1) (tuple2 e1 f1) (t2tb3908 p)))) (mem
  (tuple2 (tuple2 e1 f1) (tuple2 a1 c1))
  (Tuple2 (tuple2 e1 f1) (tuple2 a1 c1) (t2tb3315 y) (t2tb133 x))
  (t2tb3908 p)))))

;; mem_inverse
  (assert
  (forall ((p (set (tuple21 f d))) (x d) (y f))
  (= (mem40 (tb2t2952 (Tuple2 d1 f1 (t2tb694 x) (t2tb2954 y)))
  (tb2t2938 (inverse d1 f1 (t2tb3286 p)))) (mem (tuple2 f1 d1)
  (Tuple2 f1 d1 (t2tb2954 y) (t2tb694 x)) (t2tb3286 p)))))

;; mem_inverse
  (assert
  (forall ((p (set (tuple21 f c))) (x c) (y f))
  (= (mem45 (tb2t2948 (Tuple2 c1 f1 (t2tb135 x) (t2tb2954 y)))
  (tb2t2942 (inverse c1 f1 (t2tb3288 p)))) (mem (tuple2 f1 c1)
  (Tuple2 f1 c1 (t2tb2954 y) (t2tb135 x)) (t2tb3288 p)))))

;; mem_inverse
  (assert
  (forall ((p (set (tuple21 e b))) (x b) (y e))
  (= (mem38 (tb2t2953 (Tuple2 b1 e1 (t2tb14 x) (t2tb2955 y)))
  (tb2t2940 (inverse b1 e1 (t2tb3332 p)))) (mem (tuple2 e1 b1)
  (Tuple2 e1 b1 (t2tb2955 y) (t2tb14 x)) (t2tb3332 p)))))

;; mem_inverse
  (assert
  (forall ((p (set (tuple21 e a))) (x a) (y e))
  (= (mem44 (tb2t2949 (Tuple2 a1 e1 (t2tb2 x) (t2tb2955 y)))
  (tb2t2943 (inverse a1 e1 (t2tb3334 p)))) (mem (tuple2 e1 a1)
  (Tuple2 e1 a1 (t2tb2955 y) (t2tb2 x)) (t2tb3334 p)))))

;; mem_inverse
  (assert
  (forall ((p (set (tuple21 (tuple21 b d) (tuple21 e f)))) (x (tuple21 e f))
  (y (tuple21 b d)))
  (= (mem (tuple2 (tuple2 e1 f1) (tuple2 b1 d1))
  (Tuple2 (tuple2 e1 f1) (tuple2 b1 d1) (t2tb3315 x) (t2tb692 y))
  (inverse (tuple2 e1 f1) (tuple2 b1 d1) (t2tb2944 p))) (mem43
  (tb2t2950 (Tuple2 (tuple2 b1 d1) (tuple2 e1 f1) (t2tb692 y) (t2tb3315 x)))
  p))))

(declare-fun t2tb755 ((set (tuple21 (tuple21 b d) (tuple21 a c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b d) (tuple21 a c))))) (sort
  (set1 (tuple2 (tuple2 b1 d1) (tuple2 a1 c1))) (t2tb755 x))))

(declare-fun tb2t755 (uni) (set (tuple21 (tuple21 b d) (tuple21 a c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b d) (tuple21 a c)))))
  (! (= (tb2t755 (t2tb755 i)) i) :pattern ((t2tb755 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 d1) (tuple2 a1 c1))) j)
     (= (t2tb755 (tb2t755 j)) j)) :pattern ((t2tb755 (tb2t755 j))) )))

(declare-fun t2tb756 ((tuple21 (tuple21 b d) (tuple21 a c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b d) (tuple21 a c)))) (sort
  (tuple2 (tuple2 b1 d1) (tuple2 a1 c1)) (t2tb756 x))))

(declare-fun tb2t756 (uni) (tuple21 (tuple21 b d) (tuple21 a c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b d) (tuple21 a c))))
  (! (= (tb2t756 (t2tb756 i)) i) :pattern ((t2tb756 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 d1) (tuple2 a1 c1)) j)
     (= (t2tb756 (tb2t756 j)) j)) :pattern ((t2tb756 (tb2t756 j))) )))

;; mem_inverse
  (assert
  (forall ((p (set (tuple21 (tuple21 b d) (tuple21 a c)))) (x (tuple21 a c))
  (y (tuple21 b d)))
  (= (mem24
  (tb2t691 (Tuple2 (tuple2 a1 c1) (tuple2 b1 d1) (t2tb133 x) (t2tb692 y)))
  (tb2t686 (inverse (tuple2 a1 c1) (tuple2 b1 d1) (t2tb755 p)))) (mem
  (tuple2 (tuple2 b1 d1) (tuple2 a1 c1))
  (Tuple2 (tuple2 b1 d1) (tuple2 a1 c1) (t2tb692 y) (t2tb133 x))
  (t2tb755 p)))))

;; mem_inverse
  (assert
  (forall ((p (set (tuple21 d f))) (x f) (y d))
  (= (mem (tuple2 f1 d1) (Tuple2 f1 d1 (t2tb2954 x) (t2tb694 y))
  (inverse f1 d1 (t2tb2938 p))) (mem40
  (tb2t2952 (Tuple2 d1 f1 (t2tb694 y) (t2tb2954 x))) p))))

;; mem_inverse
  (assert
  (forall ((p (set (tuple21 d c))) (x c) (y d))
  (= (mem21 (tb2t693 (Tuple2 c1 d1 (t2tb135 x) (t2tb694 y)))
  (tb2t689 (inverse c1 d1 (t2tb829 p)))) (mem (tuple2 d1 c1)
  (Tuple2 d1 c1 (t2tb694 y) (t2tb135 x)) (t2tb829 p)))))

;; mem_inverse
  (assert
  (forall ((p (set (tuple21 (tuple21 a c) (tuple21 e f)))) (x (tuple21 e f))
  (y (tuple21 a c)))
  (= (mem (tuple2 (tuple2 e1 f1) (tuple2 a1 c1))
  (Tuple2 (tuple2 e1 f1) (tuple2 a1 c1) (t2tb3315 x) (t2tb133 y))
  (inverse (tuple2 e1 f1) (tuple2 a1 c1) (t2tb2945 p))) (mem42
  (tb2t2951 (Tuple2 (tuple2 a1 c1) (tuple2 e1 f1) (t2tb133 y) (t2tb3315 x)))
  p))))

;; mem_inverse
  (assert
  (forall ((p (set (tuple21 (tuple21 a c) (tuple21 b d)))) (x (tuple21 b d))
  (y (tuple21 a c)))
  (= (mem (tuple2 (tuple2 b1 d1) (tuple2 a1 c1))
  (Tuple2 (tuple2 b1 d1) (tuple2 a1 c1) (t2tb692 x) (t2tb133 y))
  (inverse (tuple2 b1 d1) (tuple2 a1 c1) (t2tb686 p))) (mem24
  (tb2t691 (Tuple2 (tuple2 a1 c1) (tuple2 b1 d1) (t2tb133 y) (t2tb692 x)))
  p))))

;; mem_inverse
  (assert
  (forall ((p (set (tuple21 c f))) (x f) (y c))
  (= (mem (tuple2 f1 c1) (Tuple2 f1 c1 (t2tb2954 x) (t2tb135 y))
  (inverse f1 c1 (t2tb2942 p))) (mem45
  (tb2t2948 (Tuple2 c1 f1 (t2tb135 y) (t2tb2954 x))) p))))

;; mem_inverse
  (assert
  (forall ((p (set (tuple21 c d))) (x d) (y c))
  (= (mem (tuple2 d1 c1) (Tuple2 d1 c1 (t2tb694 x) (t2tb135 y))
  (inverse d1 c1 (t2tb689 p))) (mem21
  (tb2t693 (Tuple2 c1 d1 (t2tb135 y) (t2tb694 x))) p))))

;; mem_inverse
  (assert
  (forall ((p (set (tuple21 b e))) (x e) (y b))
  (= (mem (tuple2 e1 b1) (Tuple2 e1 b1 (t2tb2955 x) (t2tb14 y))
  (inverse e1 b1 (t2tb2940 p))) (mem38
  (tb2t2953 (Tuple2 b1 e1 (t2tb14 y) (t2tb2955 x))) p))))

;; mem_inverse
  (assert
  (forall ((p (set (tuple21 b a))) (x a) (y b))
  (= (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y)))
  (tb2t11 (inverse a1 b1 (t2tb37 p)))) (mem (tuple2 b1 a1)
  (Tuple2 b1 a1 (t2tb14 y) (t2tb2 x)) (t2tb37 p)))))

;; mem_inverse
  (assert
  (forall ((p (set (tuple21 a e))) (x e) (y a))
  (= (mem (tuple2 e1 a1) (Tuple2 e1 a1 (t2tb2955 x) (t2tb2 y))
  (inverse e1 a1 (t2tb2943 p))) (mem44
  (tb2t2949 (Tuple2 a1 e1 (t2tb2 y) (t2tb2955 x))) p))))

;; mem_inverse
  (assert
  (forall ((p (set (tuple21 a b))) (x b) (y a))
  (= (mem (tuple2 b1 a1) (Tuple2 b1 a1 (t2tb14 x) (t2tb2 y))
  (inverse b1 a1 (t2tb11 p))) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 y) (t2tb14 x))) p))))

;; mem_inverse
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((p uni) (x uni) (y uni))
  (= (mem (tuple2 b2 a2) (Tuple2 b2 a2 x y) (inverse b2 a2 p)) (mem
  (tuple2 a2 b2) (Tuple2 a2 b2 y x) p)))))

(declare-fun dom (ty ty uni) uni)

;; dom_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni)) (sort (set1 a2) (dom b2 a2 x)))))

;; mem_dom
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (x (tuple21 c f)))
  (and
  (=> (mem45 x (tb2t2942 (dom b2 (tuple2 c1 f1) p)))
  (exists ((b3 uni))
  (and (sort b2 b3) (mem (tuple2 (tuple2 c1 f1) b2)
  (Tuple2 (tuple2 c1 f1) b2 (t2tb2948 x) b3) p))))
  (=>
  (exists ((b3 uni)) (mem (tuple2 (tuple2 c1 f1) b2)
  (Tuple2 (tuple2 c1 f1) b2 (t2tb2948 x) b3) p)) (mem45 x
  (tb2t2942 (dom b2 (tuple2 c1 f1) p))))))))

;; mem_dom
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (x (tuple21 a e)))
  (and
  (=> (mem44 x (tb2t2943 (dom b2 (tuple2 a1 e1) p)))
  (exists ((b3 uni))
  (and (sort b2 b3) (mem (tuple2 (tuple2 a1 e1) b2)
  (Tuple2 (tuple2 a1 e1) b2 (t2tb2949 x) b3) p))))
  (=>
  (exists ((b3 uni)) (mem (tuple2 (tuple2 a1 e1) b2)
  (Tuple2 (tuple2 a1 e1) b2 (t2tb2949 x) b3) p)) (mem44 x
  (tb2t2943 (dom b2 (tuple2 a1 e1) p))))))))

;; mem_dom
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (x (tuple21 (tuple21 b d) (tuple21 e f))))
  (and
  (=> (mem43 x (tb2t2944 (dom b2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) p)))
  (exists ((b3 uni))
  (and (sort b2 b3) (mem (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) b2)
  (Tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) b2 (t2tb2950 x) b3) p))))
  (=>
  (exists ((b3 uni)) (mem (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) b2)
  (Tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) b2 (t2tb2950 x) b3) p))
  (mem43 x (tb2t2944 (dom b2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) p))))))))

;; mem_dom
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (x (tuple21 (tuple21 a c) (tuple21 e f))))
  (and
  (=> (mem42 x (tb2t2945 (dom b2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) p)))
  (exists ((b3 uni))
  (and (sort b2 b3) (mem (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) b2)
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) b2 (t2tb2951 x) b3) p))))
  (=>
  (exists ((b3 uni)) (mem (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) b2)
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) b2 (t2tb2951 x) b3) p))
  (mem42 x (tb2t2945 (dom b2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) p))))))))

;; mem_dom
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (x (set (tuple21 d f))))
  (and
  (=> (mem41 x (tb2t2939 (dom b2 (set1 (tuple2 d1 f1)) p)))
  (exists ((b3 uni))
  (and (sort b2 b3) (mem (tuple2 (set1 (tuple2 d1 f1)) b2)
  (Tuple2 (set1 (tuple2 d1 f1)) b2 (t2tb2938 x) b3) p))))
  (=>
  (exists ((b3 uni)) (mem (tuple2 (set1 (tuple2 d1 f1)) b2)
  (Tuple2 (set1 (tuple2 d1 f1)) b2 (t2tb2938 x) b3) p)) (mem41 x
  (tb2t2939 (dom b2 (set1 (tuple2 d1 f1)) p))))))))

;; mem_dom
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (x (tuple21 d f)))
  (and
  (=> (mem40 x (tb2t2938 (dom b2 (tuple2 d1 f1) p)))
  (exists ((b3 uni))
  (and (sort b2 b3) (mem (tuple2 (tuple2 d1 f1) b2)
  (Tuple2 (tuple2 d1 f1) b2 (t2tb2952 x) b3) p))))
  (=>
  (exists ((b3 uni)) (mem (tuple2 (tuple2 d1 f1) b2)
  (Tuple2 (tuple2 d1 f1) b2 (t2tb2952 x) b3) p)) (mem40 x
  (tb2t2938 (dom b2 (tuple2 d1 f1) p))))))))

;; mem_dom
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (x (set (tuple21 b e))))
  (and
  (=> (mem39 x (tb2t2941 (dom b2 (set1 (tuple2 b1 e1)) p)))
  (exists ((b3 uni))
  (and (sort b2 b3) (mem (tuple2 (set1 (tuple2 b1 e1)) b2)
  (Tuple2 (set1 (tuple2 b1 e1)) b2 (t2tb2940 x) b3) p))))
  (=>
  (exists ((b3 uni)) (mem (tuple2 (set1 (tuple2 b1 e1)) b2)
  (Tuple2 (set1 (tuple2 b1 e1)) b2 (t2tb2940 x) b3) p)) (mem39 x
  (tb2t2941 (dom b2 (set1 (tuple2 b1 e1)) p))))))))

;; mem_dom
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (x (tuple21 b e)))
  (and
  (=> (mem38 x (tb2t2940 (dom b2 (tuple2 b1 e1) p)))
  (exists ((b3 uni))
  (and (sort b2 b3) (mem (tuple2 (tuple2 b1 e1) b2)
  (Tuple2 (tuple2 b1 e1) b2 (t2tb2953 x) b3) p))))
  (=>
  (exists ((b3 uni)) (mem (tuple2 (tuple2 b1 e1) b2)
  (Tuple2 (tuple2 b1 e1) b2 (t2tb2953 x) b3) p)) (mem38 x
  (tb2t2940 (dom b2 (tuple2 b1 e1) p))))))))

;; mem_dom
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (x f))
  (and
  (=> (mem37 x (tb2t2946 (dom b2 f1 p)))
  (exists ((b3 uni))
  (and (sort b2 b3) (mem (tuple2 f1 b2) (Tuple2 f1 b2 (t2tb2954 x) b3) p))))
  (=>
  (exists ((b3 uni)) (mem (tuple2 f1 b2) (Tuple2 f1 b2 (t2tb2954 x) b3) p))
  (mem37 x (tb2t2946 (dom b2 f1 p))))))))

;; mem_dom
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (x e))
  (and
  (=> (mem36 x (tb2t2947 (dom b2 e1 p)))
  (exists ((b3 uni))
  (and (sort b2 b3) (mem (tuple2 e1 b2) (Tuple2 e1 b2 (t2tb2955 x) b3) p))))
  (=>
  (exists ((b3 uni)) (mem (tuple2 e1 b2) (Tuple2 e1 b2 (t2tb2955 x) b3) p))
  (mem36 x (tb2t2947 (dom b2 e1 p))))))))

;; mem_dom
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (x (tuple21 (tuple21 a c) (tuple21 b d))))
  (and
  (=> (mem24 x (tb2t686 (dom b2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) p)))
  (exists ((b3 uni))
  (and (sort b2 b3) (mem (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) b2)
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) b2 (t2tb691 x) b3) p))))
  (=>
  (exists ((b3 uni)) (mem (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) b2)
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) b2 (t2tb691 x) b3) p))
  (mem24 x (tb2t686 (dom b2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) p))))))))

;; mem_dom
  (assert
  (forall ((p (set (tuple21 (tuple21 b d) (tuple21 e f)))) (x (tuple21 b d)))
  (= (mem (tuple2 b1 d1) (t2tb692 x)
  (dom (tuple2 e1 f1) (tuple2 b1 d1) (t2tb2944 p)))
  (exists ((b2 (tuple21 e f))) (mem43
  (tb2t2950 (Tuple2 (tuple2 b1 d1) (tuple2 e1 f1) (t2tb692 x) (t2tb3315 b2)))
  p)))))

;; mem_dom
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (x (set (tuple21 c d))))
  (and
  (=> (mem22 x (tb2t688 (dom b2 (set1 (tuple2 c1 d1)) p)))
  (exists ((b3 uni))
  (and (sort b2 b3) (mem (tuple2 (set1 (tuple2 c1 d1)) b2)
  (Tuple2 (set1 (tuple2 c1 d1)) b2 (t2tb689 x) b3) p))))
  (=>
  (exists ((b3 uni)) (mem (tuple2 (set1 (tuple2 c1 d1)) b2)
  (Tuple2 (set1 (tuple2 c1 d1)) b2 (t2tb689 x) b3) p)) (mem22 x
  (tb2t688 (dom b2 (set1 (tuple2 c1 d1)) p))))))))

;; mem_dom
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (x (tuple21 c d)))
  (and
  (=> (mem21 x (tb2t689 (dom b2 (tuple2 c1 d1) p)))
  (exists ((b3 uni))
  (and (sort b2 b3) (mem (tuple2 (tuple2 c1 d1) b2)
  (Tuple2 (tuple2 c1 d1) b2 (t2tb693 x) b3) p))))
  (=>
  (exists ((b3 uni)) (mem (tuple2 (tuple2 c1 d1) b2)
  (Tuple2 (tuple2 c1 d1) b2 (t2tb693 x) b3) p)) (mem21 x
  (tb2t689 (dom b2 (tuple2 c1 d1) p))))))))

;; mem_dom
  (assert
  (forall ((p (set (tuple21 d f))) (x d))
  (= (mem20 x (tb2t690 (dom f1 d1 (t2tb2938 p))))
  (exists ((b2 f)) (mem40 (tb2t2952 (Tuple2 d1 f1 (t2tb694 x) (t2tb2954 b2)))
  p)))))

;; mem_dom
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (x d))
  (and
  (=> (mem20 x (tb2t690 (dom b2 d1 p)))
  (exists ((b3 uni))
  (and (sort b2 b3) (mem (tuple2 d1 b2) (Tuple2 d1 b2 (t2tb694 x) b3) p))))
  (=>
  (exists ((b3 uni)) (mem (tuple2 d1 b2) (Tuple2 d1 b2 (t2tb694 x) b3) p))
  (mem20 x (tb2t690 (dom b2 d1 p))))))))

;; mem_dom
  (assert
  (forall ((p (set (tuple21 (tuple21 a c) (tuple21 e f)))) (x (tuple21 a c)))
  (= (mem (tuple2 a1 c1) (t2tb133 x)
  (dom (tuple2 e1 f1) (tuple2 a1 c1) (t2tb2945 p)))
  (exists ((b2 (tuple21 e f))) (mem42
  (tb2t2951 (Tuple2 (tuple2 a1 c1) (tuple2 e1 f1) (t2tb133 x) (t2tb3315 b2)))
  p)))))

;; mem_dom
  (assert
  (forall ((p (set (tuple21 (tuple21 a c) (tuple21 b d)))) (x (tuple21 a c)))
  (= (mem (tuple2 a1 c1) (t2tb133 x)
  (dom (tuple2 b1 d1) (tuple2 a1 c1) (t2tb686 p)))
  (exists ((b2 (tuple21 b d))) (mem24
  (tb2t691 (Tuple2 (tuple2 a1 c1) (tuple2 b1 d1) (t2tb133 x) (t2tb692 b2)))
  p)))))

;; mem_dom
  (assert
  (forall ((p (set (tuple21 c f))) (x c))
  (= (mem7 x (tb2t132 (dom f1 c1 (t2tb2942 p))))
  (exists ((b2 f)) (mem45 (tb2t2948 (Tuple2 c1 f1 (t2tb135 x) (t2tb2954 b2)))
  p)))))

;; mem_dom
  (assert
  (forall ((p (set (tuple21 c d))) (x c))
  (= (mem7 x (tb2t132 (dom d1 c1 (t2tb689 p))))
  (exists ((b2 d)) (mem21 (tb2t693 (Tuple2 c1 d1 (t2tb135 x) (t2tb694 b2)))
  p)))))

;; mem_dom
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (x c))
  (and
  (=> (mem7 x (tb2t132 (dom b2 c1 p)))
  (exists ((b3 uni))
  (and (sort b2 b3) (mem (tuple2 c1 b2) (Tuple2 c1 b2 (t2tb135 x) b3) p))))
  (=>
  (exists ((b3 uni)) (mem (tuple2 c1 b2) (Tuple2 c1 b2 (t2tb135 x) b3) p))
  (mem7 x (tb2t132 (dom b2 c1 p))))))))

;; mem_dom
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (x (set (tuple21 a b))))
  (and
  (=> (mem4 x (tb2t10 (dom b2 (set1 (tuple2 a1 b1)) p)))
  (exists ((b3 uni))
  (and (sort b2 b3) (mem (tuple2 (set1 (tuple2 a1 b1)) b2)
  (Tuple2 (set1 (tuple2 a1 b1)) b2 (t2tb11 x) b3) p))))
  (=>
  (exists ((b3 uni)) (mem (tuple2 (set1 (tuple2 a1 b1)) b2)
  (Tuple2 (set1 (tuple2 a1 b1)) b2 (t2tb11 x) b3) p)) (mem4 x
  (tb2t10 (dom b2 (set1 (tuple2 a1 b1)) p))))))))

;; mem_dom
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (x (tuple21 a b)))
  (and
  (=> (mem3 x (tb2t11 (dom b2 (tuple2 a1 b1) p)))
  (exists ((b3 uni))
  (and (sort b2 b3) (mem (tuple2 (tuple2 a1 b1) b2)
  (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) b3) p))))
  (=>
  (exists ((b3 uni)) (mem (tuple2 (tuple2 a1 b1) b2)
  (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) b3) p)) (mem3 x
  (tb2t11 (dom b2 (tuple2 a1 b1) p))))))))

;; mem_dom
  (assert
  (forall ((p (set (tuple21 b e))) (x b))
  (= (mem2 x (tb2t12 (dom e1 b1 (t2tb2940 p))))
  (exists ((b2 e)) (mem38 (tb2t2953 (Tuple2 b1 e1 (t2tb14 x) (t2tb2955 b2)))
  p)))))

;; mem_dom
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (x b))
  (and
  (=> (mem2 x (tb2t12 (dom b2 b1 p)))
  (exists ((b3 uni))
  (and (sort b2 b3) (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) b3) p))))
  (=> (exists ((b3 uni)) (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) b3) p))
  (mem2 x (tb2t12 (dom b2 b1 p))))))))

;; mem_dom
  (assert
  (forall ((p (set (tuple21 a e))) (x a))
  (= (mem1 x (tb2t1 (dom e1 a1 (t2tb2943 p))))
  (exists ((b2 e)) (mem44 (tb2t2949 (Tuple2 a1 e1 (t2tb2 x) (t2tb2955 b2)))
  p)))))

;; mem_dom
  (assert
  (forall ((p (set (tuple21 a b))) (x a))
  (= (mem1 x (tb2t1 (dom b1 a1 (t2tb11 p))))
  (exists ((b2 b)) (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 b2))) p)))))

;; mem_dom
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (x a))
  (and
  (=> (mem1 x (tb2t1 (dom b2 a1 p)))
  (exists ((b3 uni))
  (and (sort b2 b3) (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) b3) p))))
  (=> (exists ((b3 uni)) (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) b3) p))
  (mem1 x (tb2t1 (dom b2 a1 p))))))))

;; mem_dom
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((p uni) (x uni))
  (and
  (=> (mem a2 x (dom b2 a2 p))
  (exists ((b3 uni))
  (and (sort b2 b3) (mem (tuple2 a2 b2) (Tuple2 a2 b2 x b3) p))))
  (=> (exists ((b3 uni)) (mem (tuple2 a2 b2) (Tuple2 a2 b2 x b3) p)) (mem a2
  x (dom b2 a2 p)))))))

(declare-fun ran (ty ty uni) uni)

;; ran_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni)) (sort (set1 b2) (ran b2 a2 x)))))

;; mem_ran
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (x (tuple21 c f)))
  (and
  (=> (mem45 x (tb2t2942 (ran (tuple2 c1 f1) a2 p)))
  (exists ((a3 uni))
  (and (sort a2 a3) (mem (tuple2 a2 (tuple2 c1 f1))
  (Tuple2 a2 (tuple2 c1 f1) a3 (t2tb2948 x)) p))))
  (=>
  (exists ((a3 uni)) (mem (tuple2 a2 (tuple2 c1 f1))
  (Tuple2 a2 (tuple2 c1 f1) a3 (t2tb2948 x)) p)) (mem45 x
  (tb2t2942 (ran (tuple2 c1 f1) a2 p))))))))

;; mem_ran
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (x (tuple21 a e)))
  (and
  (=> (mem44 x (tb2t2943 (ran (tuple2 a1 e1) a2 p)))
  (exists ((a3 uni))
  (and (sort a2 a3) (mem (tuple2 a2 (tuple2 a1 e1))
  (Tuple2 a2 (tuple2 a1 e1) a3 (t2tb2949 x)) p))))
  (=>
  (exists ((a3 uni)) (mem (tuple2 a2 (tuple2 a1 e1))
  (Tuple2 a2 (tuple2 a1 e1) a3 (t2tb2949 x)) p)) (mem44 x
  (tb2t2943 (ran (tuple2 a1 e1) a2 p))))))))

;; mem_ran
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (x (tuple21 (tuple21 b d) (tuple21 e f))))
  (and
  (=> (mem43 x (tb2t2944 (ran (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) a2 p)))
  (exists ((a3 uni))
  (and (sort a2 a3) (mem (tuple2 a2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)))
  (Tuple2 a2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) a3 (t2tb2950 x)) p))))
  (=>
  (exists ((a3 uni)) (mem (tuple2 a2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)))
  (Tuple2 a2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) a3 (t2tb2950 x)) p))
  (mem43 x (tb2t2944 (ran (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) a2 p))))))))

;; mem_ran
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (x (tuple21 (tuple21 a c) (tuple21 e f))))
  (and
  (=> (mem42 x (tb2t2945 (ran (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) a2 p)))
  (exists ((a3 uni))
  (and (sort a2 a3) (mem (tuple2 a2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)))
  (Tuple2 a2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) a3 (t2tb2951 x)) p))))
  (=>
  (exists ((a3 uni)) (mem (tuple2 a2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)))
  (Tuple2 a2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) a3 (t2tb2951 x)) p))
  (mem42 x (tb2t2945 (ran (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) a2 p))))))))

;; mem_ran
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (x (set (tuple21 d f))))
  (and
  (=> (mem41 x (tb2t2939 (ran (set1 (tuple2 d1 f1)) a2 p)))
  (exists ((a3 uni))
  (and (sort a2 a3) (mem (tuple2 a2 (set1 (tuple2 d1 f1)))
  (Tuple2 a2 (set1 (tuple2 d1 f1)) a3 (t2tb2938 x)) p))))
  (=>
  (exists ((a3 uni)) (mem (tuple2 a2 (set1 (tuple2 d1 f1)))
  (Tuple2 a2 (set1 (tuple2 d1 f1)) a3 (t2tb2938 x)) p)) (mem41 x
  (tb2t2939 (ran (set1 (tuple2 d1 f1)) a2 p))))))))

;; mem_ran
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (x (tuple21 d f)))
  (and
  (=> (mem40 x (tb2t2938 (ran (tuple2 d1 f1) a2 p)))
  (exists ((a3 uni))
  (and (sort a2 a3) (mem (tuple2 a2 (tuple2 d1 f1))
  (Tuple2 a2 (tuple2 d1 f1) a3 (t2tb2952 x)) p))))
  (=>
  (exists ((a3 uni)) (mem (tuple2 a2 (tuple2 d1 f1))
  (Tuple2 a2 (tuple2 d1 f1) a3 (t2tb2952 x)) p)) (mem40 x
  (tb2t2938 (ran (tuple2 d1 f1) a2 p))))))))

;; mem_ran
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (x (set (tuple21 b e))))
  (and
  (=> (mem39 x (tb2t2941 (ran (set1 (tuple2 b1 e1)) a2 p)))
  (exists ((a3 uni))
  (and (sort a2 a3) (mem (tuple2 a2 (set1 (tuple2 b1 e1)))
  (Tuple2 a2 (set1 (tuple2 b1 e1)) a3 (t2tb2940 x)) p))))
  (=>
  (exists ((a3 uni)) (mem (tuple2 a2 (set1 (tuple2 b1 e1)))
  (Tuple2 a2 (set1 (tuple2 b1 e1)) a3 (t2tb2940 x)) p)) (mem39 x
  (tb2t2941 (ran (set1 (tuple2 b1 e1)) a2 p))))))))

;; mem_ran
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (x (tuple21 b e)))
  (and
  (=> (mem38 x (tb2t2940 (ran (tuple2 b1 e1) a2 p)))
  (exists ((a3 uni))
  (and (sort a2 a3) (mem (tuple2 a2 (tuple2 b1 e1))
  (Tuple2 a2 (tuple2 b1 e1) a3 (t2tb2953 x)) p))))
  (=>
  (exists ((a3 uni)) (mem (tuple2 a2 (tuple2 b1 e1))
  (Tuple2 a2 (tuple2 b1 e1) a3 (t2tb2953 x)) p)) (mem38 x
  (tb2t2940 (ran (tuple2 b1 e1) a2 p))))))))

;; mem_ran
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (x f))
  (and
  (=> (mem37 x (tb2t2946 (ran f1 a2 p)))
  (exists ((a3 uni))
  (and (sort a2 a3) (mem (tuple2 a2 f1) (Tuple2 a2 f1 a3 (t2tb2954 x)) p))))
  (=>
  (exists ((a3 uni)) (mem (tuple2 a2 f1) (Tuple2 a2 f1 a3 (t2tb2954 x)) p))
  (mem37 x (tb2t2946 (ran f1 a2 p))))))))

;; mem_ran
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (x e))
  (and
  (=> (mem36 x (tb2t2947 (ran e1 a2 p)))
  (exists ((a3 uni))
  (and (sort a2 a3) (mem (tuple2 a2 e1) (Tuple2 a2 e1 a3 (t2tb2955 x)) p))))
  (=>
  (exists ((a3 uni)) (mem (tuple2 a2 e1) (Tuple2 a2 e1 a3 (t2tb2955 x)) p))
  (mem36 x (tb2t2947 (ran e1 a2 p))))))))

;; mem_ran
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (x (tuple21 (tuple21 a c) (tuple21 b d))))
  (and
  (=> (mem24 x (tb2t686 (ran (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) a2 p)))
  (exists ((a3 uni))
  (and (sort a2 a3) (mem (tuple2 a2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
  (Tuple2 a2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) a3 (t2tb691 x)) p))))
  (=>
  (exists ((a3 uni)) (mem (tuple2 a2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
  (Tuple2 a2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) a3 (t2tb691 x)) p))
  (mem24 x (tb2t686 (ran (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) a2 p))))))))

;; mem_ran
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (x (set (tuple21 c d))))
  (and
  (=> (mem22 x (tb2t688 (ran (set1 (tuple2 c1 d1)) a2 p)))
  (exists ((a3 uni))
  (and (sort a2 a3) (mem (tuple2 a2 (set1 (tuple2 c1 d1)))
  (Tuple2 a2 (set1 (tuple2 c1 d1)) a3 (t2tb689 x)) p))))
  (=>
  (exists ((a3 uni)) (mem (tuple2 a2 (set1 (tuple2 c1 d1)))
  (Tuple2 a2 (set1 (tuple2 c1 d1)) a3 (t2tb689 x)) p)) (mem22 x
  (tb2t688 (ran (set1 (tuple2 c1 d1)) a2 p))))))))

;; mem_ran
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (x (tuple21 c d)))
  (and
  (=> (mem21 x (tb2t689 (ran (tuple2 c1 d1) a2 p)))
  (exists ((a3 uni))
  (and (sort a2 a3) (mem (tuple2 a2 (tuple2 c1 d1))
  (Tuple2 a2 (tuple2 c1 d1) a3 (t2tb693 x)) p))))
  (=>
  (exists ((a3 uni)) (mem (tuple2 a2 (tuple2 c1 d1))
  (Tuple2 a2 (tuple2 c1 d1) a3 (t2tb693 x)) p)) (mem21 x
  (tb2t689 (ran (tuple2 c1 d1) a2 p))))))))

;; mem_ran
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (x d))
  (and
  (=> (mem20 x (tb2t690 (ran d1 a2 p)))
  (exists ((a3 uni))
  (and (sort a2 a3) (mem (tuple2 a2 d1) (Tuple2 a2 d1 a3 (t2tb694 x)) p))))
  (=>
  (exists ((a3 uni)) (mem (tuple2 a2 d1) (Tuple2 a2 d1 a3 (t2tb694 x)) p))
  (mem20 x (tb2t690 (ran d1 a2 p))))))))

;; mem_ran
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (x c))
  (and
  (=> (mem7 x (tb2t132 (ran c1 a2 p)))
  (exists ((a3 uni))
  (and (sort a2 a3) (mem (tuple2 a2 c1) (Tuple2 a2 c1 a3 (t2tb135 x)) p))))
  (=>
  (exists ((a3 uni)) (mem (tuple2 a2 c1) (Tuple2 a2 c1 a3 (t2tb135 x)) p))
  (mem7 x (tb2t132 (ran c1 a2 p))))))))

;; mem_ran
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (x (set (tuple21 a b))))
  (and
  (=> (mem4 x (tb2t10 (ran (set1 (tuple2 a1 b1)) a2 p)))
  (exists ((a3 uni))
  (and (sort a2 a3) (mem (tuple2 a2 (set1 (tuple2 a1 b1)))
  (Tuple2 a2 (set1 (tuple2 a1 b1)) a3 (t2tb11 x)) p))))
  (=>
  (exists ((a3 uni)) (mem (tuple2 a2 (set1 (tuple2 a1 b1)))
  (Tuple2 a2 (set1 (tuple2 a1 b1)) a3 (t2tb11 x)) p)) (mem4 x
  (tb2t10 (ran (set1 (tuple2 a1 b1)) a2 p))))))))

;; mem_ran
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (x (tuple21 a b)))
  (and
  (=> (mem3 x (tb2t11 (ran (tuple2 a1 b1) a2 p)))
  (exists ((a3 uni))
  (and (sort a2 a3) (mem (tuple2 a2 (tuple2 a1 b1))
  (Tuple2 a2 (tuple2 a1 b1) a3 (t2tb13 x)) p))))
  (=>
  (exists ((a3 uni)) (mem (tuple2 a2 (tuple2 a1 b1))
  (Tuple2 a2 (tuple2 a1 b1) a3 (t2tb13 x)) p)) (mem3 x
  (tb2t11 (ran (tuple2 a1 b1) a2 p))))))))

;; mem_ran
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (x b))
  (and
  (=> (mem2 x (tb2t12 (ran b1 a2 p)))
  (exists ((a3 uni))
  (and (sort a2 a3) (mem (tuple2 a2 b1) (Tuple2 a2 b1 a3 (t2tb14 x)) p))))
  (=> (exists ((a3 uni)) (mem (tuple2 a2 b1) (Tuple2 a2 b1 a3 (t2tb14 x)) p))
  (mem2 x (tb2t12 (ran b1 a2 p))))))))

;; mem_ran
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (x a))
  (and
  (=> (mem1 x (tb2t1 (ran a1 a2 p)))
  (exists ((a3 uni))
  (and (sort a2 a3) (mem (tuple2 a2 a1) (Tuple2 a2 a1 a3 (t2tb2 x)) p))))
  (=> (exists ((a3 uni)) (mem (tuple2 a2 a1) (Tuple2 a2 a1 a3 (t2tb2 x)) p))
  (mem1 x (tb2t1 (ran a1 a2 p))))))))

;; mem_ran
  (assert
  (forall ((p (set (tuple21 (tuple21 b d) (tuple21 e f)))) (x (tuple21 e f)))
  (= (mem (tuple2 e1 f1) (t2tb3315 x)
  (ran (tuple2 e1 f1) (tuple2 b1 d1) (t2tb2944 p)))
  (exists ((a2 (tuple21 b d))) (mem43
  (tb2t2950 (Tuple2 (tuple2 b1 d1) (tuple2 e1 f1) (t2tb692 a2) (t2tb3315 x)))
  p)))))

;; mem_ran
  (assert
  (forall ((p (set (tuple21 d f))) (x f))
  (= (mem37 x (tb2t2946 (ran f1 d1 (t2tb2938 p))))
  (exists ((a2 d)) (mem40 (tb2t2952 (Tuple2 d1 f1 (t2tb694 a2) (t2tb2954 x)))
  p)))))

;; mem_ran
  (assert
  (forall ((p (set (tuple21 (tuple21 a c) (tuple21 e f)))) (x (tuple21 e f)))
  (= (mem (tuple2 e1 f1) (t2tb3315 x)
  (ran (tuple2 e1 f1) (tuple2 a1 c1) (t2tb2945 p)))
  (exists ((a2 (tuple21 a c))) (mem42
  (tb2t2951 (Tuple2 (tuple2 a1 c1) (tuple2 e1 f1) (t2tb133 a2) (t2tb3315 x)))
  p)))))

;; mem_ran
  (assert
  (forall ((p (set (tuple21 (tuple21 a c) (tuple21 b d)))) (x (tuple21 b d)))
  (= (mem (tuple2 b1 d1) (t2tb692 x)
  (ran (tuple2 b1 d1) (tuple2 a1 c1) (t2tb686 p)))
  (exists ((a2 (tuple21 a c))) (mem24
  (tb2t691 (Tuple2 (tuple2 a1 c1) (tuple2 b1 d1) (t2tb133 a2) (t2tb692 x)))
  p)))))

;; mem_ran
  (assert
  (forall ((p (set (tuple21 c f))) (x f))
  (= (mem37 x (tb2t2946 (ran f1 c1 (t2tb2942 p))))
  (exists ((a2 c)) (mem45 (tb2t2948 (Tuple2 c1 f1 (t2tb135 a2) (t2tb2954 x)))
  p)))))

;; mem_ran
  (assert
  (forall ((p (set (tuple21 c d))) (x d))
  (= (mem20 x (tb2t690 (ran d1 c1 (t2tb689 p))))
  (exists ((a2 c)) (mem21 (tb2t693 (Tuple2 c1 d1 (t2tb135 a2) (t2tb694 x)))
  p)))))

;; mem_ran
  (assert
  (forall ((p (set (tuple21 b e))) (x e))
  (= (mem36 x (tb2t2947 (ran e1 b1 (t2tb2940 p))))
  (exists ((a2 b)) (mem38 (tb2t2953 (Tuple2 b1 e1 (t2tb14 a2) (t2tb2955 x)))
  p)))))

;; mem_ran
  (assert
  (forall ((p (set (tuple21 a e))) (x e))
  (= (mem36 x (tb2t2947 (ran e1 a1 (t2tb2943 p))))
  (exists ((a2 a)) (mem44 (tb2t2949 (Tuple2 a1 e1 (t2tb2 a2) (t2tb2955 x)))
  p)))))

;; mem_ran
  (assert
  (forall ((p (set (tuple21 a b))) (x b))
  (= (mem2 x (tb2t12 (ran b1 a1 (t2tb11 p))))
  (exists ((a2 a)) (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 a2) (t2tb14 x))) p)))))

;; mem_ran
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((p uni) (x uni))
  (and
  (=> (mem b2 x (ran b2 a2 p))
  (exists ((a3 uni))
  (and (sort a2 a3) (mem (tuple2 a2 b2) (Tuple2 a2 b2 a3 x) p))))
  (=> (exists ((a3 uni)) (mem (tuple2 a2 b2) (Tuple2 a2 b2 a3 x) p)) (mem b2
  x (ran b2 a2 p)))))))

(declare-fun semicolon (ty ty ty uni uni) uni)

;; semicolon_sort
  (assert
  (forall ((a2 ty) (b2 ty) (c2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (tuple2 a2 c2))
  (semicolon c2 b2 a2 x x1)))))

(declare-fun semicolon19 ((set (tuple21 (tuple21 a c) (tuple21 b d)))
  (set (tuple21 (tuple21 b d) (tuple21 e f)))) (set (tuple21 (tuple21 a c)
  (tuple21 e f))))

(declare-fun semicolon20 ((set (tuple21 a b)) (set (tuple21 b
  e))) (set (tuple21 a e)))

(declare-fun semicolon21 ((set (tuple21 c d)) (set (tuple21 d
  f))) (set (tuple21 c f)))

;; mem_semicolon
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (q (set (tuple21 (tuple21 b d) (tuple21 e f)))) (x uni)
  (y (tuple21 e f)))
  (= (mem (tuple2 a2 (tuple2 e1 f1))
  (Tuple2 a2 (tuple2 e1 f1) x (t2tb3315 y))
  (semicolon (tuple2 e1 f1) (tuple2 b1 d1) a2 p (t2tb2944 q)))
  (exists ((b2 (tuple21 b d)))
  (and (mem (tuple2 a2 (tuple2 b1 d1))
  (Tuple2 a2 (tuple2 b1 d1) x (t2tb692 b2)) p) (mem43
  (tb2t2950 (Tuple2 (tuple2 b1 d1) (tuple2 e1 f1) (t2tb692 b2) (t2tb3315 y)))
  q)))))))

;; mem_semicolon
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (q (set (tuple21 d f))) (x uni) (y f))
  (= (mem (tuple2 a2 f1) (Tuple2 a2 f1 x (t2tb2954 y))
  (semicolon f1 d1 a2 p (t2tb2938 q)))
  (exists ((b2 d))
  (and (mem (tuple2 a2 d1) (Tuple2 a2 d1 x (t2tb694 b2)) p) (mem40
  (tb2t2952 (Tuple2 d1 f1 (t2tb694 b2) (t2tb2954 y))) q)))))))

;; mem_semicolon
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (q (set (tuple21 (tuple21 a c) (tuple21 e f)))) (x uni)
  (y (tuple21 e f)))
  (= (mem (tuple2 a2 (tuple2 e1 f1))
  (Tuple2 a2 (tuple2 e1 f1) x (t2tb3315 y))
  (semicolon (tuple2 e1 f1) (tuple2 a1 c1) a2 p (t2tb2945 q)))
  (exists ((b2 (tuple21 a c)))
  (and (mem (tuple2 a2 (tuple2 a1 c1))
  (Tuple2 a2 (tuple2 a1 c1) x (t2tb133 b2)) p) (mem42
  (tb2t2951 (Tuple2 (tuple2 a1 c1) (tuple2 e1 f1) (t2tb133 b2) (t2tb3315 y)))
  q)))))))

;; mem_semicolon
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (q (set (tuple21 (tuple21 a c) (tuple21 b d)))) (x uni)
  (y (tuple21 b d)))
  (= (mem (tuple2 a2 (tuple2 b1 d1)) (Tuple2 a2 (tuple2 b1 d1) x (t2tb692 y))
  (semicolon (tuple2 b1 d1) (tuple2 a1 c1) a2 p (t2tb686 q)))
  (exists ((b2 (tuple21 a c)))
  (and (mem (tuple2 a2 (tuple2 a1 c1))
  (Tuple2 a2 (tuple2 a1 c1) x (t2tb133 b2)) p) (mem24
  (tb2t691 (Tuple2 (tuple2 a1 c1) (tuple2 b1 d1) (t2tb133 b2) (t2tb692 y)))
  q)))))))

;; mem_semicolon
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (q (set (tuple21 c f))) (x uni) (y f))
  (= (mem (tuple2 a2 f1) (Tuple2 a2 f1 x (t2tb2954 y))
  (semicolon f1 c1 a2 p (t2tb2942 q)))
  (exists ((b2 c))
  (and (mem (tuple2 a2 c1) (Tuple2 a2 c1 x (t2tb135 b2)) p) (mem45
  (tb2t2948 (Tuple2 c1 f1 (t2tb135 b2) (t2tb2954 y))) q)))))))

;; mem_semicolon
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (q (set (tuple21 c d))) (x uni) (y d))
  (= (mem (tuple2 a2 d1) (Tuple2 a2 d1 x (t2tb694 y))
  (semicolon d1 c1 a2 p (t2tb689 q)))
  (exists ((b2 c))
  (and (mem (tuple2 a2 c1) (Tuple2 a2 c1 x (t2tb135 b2)) p) (mem21
  (tb2t693 (Tuple2 c1 d1 (t2tb135 b2) (t2tb694 y))) q)))))))

;; mem_semicolon
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (q (set (tuple21 b e))) (x uni) (y e))
  (= (mem (tuple2 a2 e1) (Tuple2 a2 e1 x (t2tb2955 y))
  (semicolon e1 b1 a2 p (t2tb2940 q)))
  (exists ((b2 b))
  (and (mem (tuple2 a2 b1) (Tuple2 a2 b1 x (t2tb14 b2)) p) (mem38
  (tb2t2953 (Tuple2 b1 e1 (t2tb14 b2) (t2tb2955 y))) q)))))))

;; mem_semicolon
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (q (set (tuple21 a e))) (x uni) (y e))
  (= (mem (tuple2 a2 e1) (Tuple2 a2 e1 x (t2tb2955 y))
  (semicolon e1 a1 a2 p (t2tb2943 q)))
  (exists ((b2 a))
  (and (mem (tuple2 a2 a1) (Tuple2 a2 a1 x (t2tb2 b2)) p) (mem44
  (tb2t2949 (Tuple2 a1 e1 (t2tb2 b2) (t2tb2955 y))) q)))))))

;; mem_semicolon
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (q (set (tuple21 a b))) (x uni) (y b))
  (= (mem (tuple2 a2 b1) (Tuple2 a2 b1 x (t2tb14 y))
  (semicolon b1 a1 a2 p (t2tb11 q)))
  (exists ((b2 a))
  (and (mem (tuple2 a2 a1) (Tuple2 a2 a1 x (t2tb2 b2)) p) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 b2) (t2tb14 y))) q)))))))

;; mem_semicolon
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (q uni) (x (tuple21 b d)) (y (tuple21 e f)))
  (and
  (=> (mem43
  (tb2t2950 (Tuple2 (tuple2 b1 d1) (tuple2 e1 f1) (t2tb692 x) (t2tb3315 y)))
  (tb2t2944 (semicolon (tuple2 e1 f1) b2 (tuple2 b1 d1) p q)))
  (exists ((b3 uni))
  (and (sort b2 b3)
  (and (mem (tuple2 (tuple2 b1 d1) b2)
  (Tuple2 (tuple2 b1 d1) b2 (t2tb692 x) b3) p) (mem
  (tuple2 b2 (tuple2 e1 f1)) (Tuple2 b2 (tuple2 e1 f1) b3 (t2tb3315 y)) q)))))
  (=>
  (exists ((b3 uni))
  (and (mem (tuple2 (tuple2 b1 d1) b2)
  (Tuple2 (tuple2 b1 d1) b2 (t2tb692 x) b3) p) (mem
  (tuple2 b2 (tuple2 e1 f1)) (Tuple2 b2 (tuple2 e1 f1) b3 (t2tb3315 y)) q)))
  (mem43
  (tb2t2950 (Tuple2 (tuple2 b1 d1) (tuple2 e1 f1) (t2tb692 x) (t2tb3315 y)))
  (tb2t2944 (semicolon (tuple2 e1 f1) b2 (tuple2 b1 d1) p q))))))))

(declare-fun t2tb3910 ((set (tuple21 (tuple21 e f) (tuple21 e f)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 e f) (tuple21 e f))))) (sort
  (set1 (tuple2 (tuple2 e1 f1) (tuple2 e1 f1))) (t2tb3910 x))))

(declare-fun tb2t3910 (uni) (set (tuple21 (tuple21 e f) (tuple21 e f))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 e f) (tuple21 e f)))))
  (! (= (tb2t3910 (t2tb3910 i)) i) :pattern ((t2tb3910 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 e1 f1) (tuple2 e1 f1))) j)
     (= (t2tb3910 (tb2t3910 j)) j)) :pattern ((t2tb3910 (tb2t3910 j))) )))

(declare-fun t2tb3911 ((tuple21 (tuple21 e f) (tuple21 e f))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 e f) (tuple21 e f)))) (sort
  (tuple2 (tuple2 e1 f1) (tuple2 e1 f1)) (t2tb3911 x))))

(declare-fun tb2t3911 (uni) (tuple21 (tuple21 e f) (tuple21 e f)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 e f) (tuple21 e f))))
  (! (= (tb2t3911 (t2tb3911 i)) i) :pattern ((t2tb3911 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 e1 f1) (tuple2 e1 f1)) j)
     (= (t2tb3911 (tb2t3911 j)) j)) :pattern ((t2tb3911 (tb2t3911 j))) )))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 (tuple21 b d) (tuple21 e f))))
  (q (set (tuple21 (tuple21 e f) (tuple21 e f)))) (x (tuple21 b d))
  (y (tuple21 e f)))
  (= (mem43
  (tb2t2950 (Tuple2 (tuple2 b1 d1) (tuple2 e1 f1) (t2tb692 x) (t2tb3315 y)))
  (tb2t2944
  (semicolon (tuple2 e1 f1) (tuple2 e1 f1) (tuple2 b1 d1) (t2tb2944 p)
  (t2tb3910 q))))
  (exists ((b2 (tuple21 e f)))
  (and (mem43
  (tb2t2950 (Tuple2 (tuple2 b1 d1) (tuple2 e1 f1) (t2tb692 x) (t2tb3315 b2)))
  p) (mem (tuple2 (tuple2 e1 f1) (tuple2 e1 f1))
  (Tuple2 (tuple2 e1 f1) (tuple2 e1 f1) (t2tb3315 b2) (t2tb3315 y))
  (t2tb3910 q)))))))

;; mem_semicolon
  (assert
  (forall ((c2 ty))
  (forall ((p (set (tuple21 (tuple21 b d) (tuple21 e f)))) (q uni)
  (x (tuple21 b d)) (y uni))
  (= (mem (tuple2 (tuple2 b1 d1) c2) (Tuple2 (tuple2 b1 d1) c2 (t2tb692 x) y)
  (semicolon c2 (tuple2 e1 f1) (tuple2 b1 d1) (t2tb2944 p) q))
  (exists ((b2 (tuple21 e f)))
  (and (mem43
  (tb2t2950 (Tuple2 (tuple2 b1 d1) (tuple2 e1 f1) (t2tb692 x) (t2tb3315 b2)))
  p) (mem (tuple2 (tuple2 e1 f1) c2)
  (Tuple2 (tuple2 e1 f1) c2 (t2tb3315 b2) y) q)))))))

(declare-fun t2tb747 ((set (tuple21 (tuple21 b d) (tuple21 b d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b d) (tuple21 b d))))) (sort
  (set1 (tuple2 (tuple2 b1 d1) (tuple2 b1 d1))) (t2tb747 x))))

(declare-fun tb2t747 (uni) (set (tuple21 (tuple21 b d) (tuple21 b d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b d) (tuple21 b d)))))
  (! (= (tb2t747 (t2tb747 i)) i) :pattern ((t2tb747 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 d1) (tuple2 b1 d1))) j)
     (= (t2tb747 (tb2t747 j)) j)) :pattern ((t2tb747 (tb2t747 j))) )))

(declare-fun t2tb748 ((tuple21 (tuple21 b d) (tuple21 b d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b d) (tuple21 b d)))) (sort
  (tuple2 (tuple2 b1 d1) (tuple2 b1 d1)) (t2tb748 x))))

(declare-fun tb2t748 (uni) (tuple21 (tuple21 b d) (tuple21 b d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b d) (tuple21 b d))))
  (! (= (tb2t748 (t2tb748 i)) i) :pattern ((t2tb748 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 d1) (tuple2 b1 d1)) j)
     (= (t2tb748 (tb2t748 j)) j)) :pattern ((t2tb748 (tb2t748 j))) )))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 (tuple21 b d) (tuple21 b d))))
  (q (set (tuple21 (tuple21 b d) (tuple21 e f)))) (x (tuple21 b d))
  (y (tuple21 e f)))
  (= (mem43
  (tb2t2950 (Tuple2 (tuple2 b1 d1) (tuple2 e1 f1) (t2tb692 x) (t2tb3315 y)))
  (tb2t2944
  (semicolon (tuple2 e1 f1) (tuple2 b1 d1) (tuple2 b1 d1) (t2tb747 p)
  (t2tb2944 q))))
  (exists ((b2 (tuple21 b d)))
  (and (mem (tuple2 (tuple2 b1 d1) (tuple2 b1 d1))
  (Tuple2 (tuple2 b1 d1) (tuple2 b1 d1) (t2tb692 x) (t2tb692 b2))
  (t2tb747 p)) (mem43
  (tb2t2950 (Tuple2 (tuple2 b1 d1) (tuple2 e1 f1) (t2tb692 b2) (t2tb3315 y)))
  q))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 (tuple21 b d) (tuple21 a c))))
  (q (set (tuple21 (tuple21 a c) (tuple21 e f)))) (x (tuple21 b d))
  (y (tuple21 e f)))
  (= (mem43
  (tb2t2950 (Tuple2 (tuple2 b1 d1) (tuple2 e1 f1) (t2tb692 x) (t2tb3315 y)))
  (tb2t2944
  (semicolon (tuple2 e1 f1) (tuple2 a1 c1) (tuple2 b1 d1) (t2tb755 p)
  (t2tb2945 q))))
  (exists ((b2 (tuple21 a c)))
  (and (mem (tuple2 (tuple2 b1 d1) (tuple2 a1 c1))
  (Tuple2 (tuple2 b1 d1) (tuple2 a1 c1) (t2tb692 x) (t2tb133 b2))
  (t2tb755 p)) (mem42
  (tb2t2951 (Tuple2 (tuple2 a1 c1) (tuple2 e1 f1) (t2tb133 b2) (t2tb3315 y)))
  q))))))

;; mem_semicolon
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (q uni) (x d) (y f))
  (and
  (=> (mem40 (tb2t2952 (Tuple2 d1 f1 (t2tb694 x) (t2tb2954 y)))
  (tb2t2938 (semicolon f1 b2 d1 p q)))
  (exists ((b3 uni))
  (and (sort b2 b3)
  (and (mem (tuple2 d1 b2) (Tuple2 d1 b2 (t2tb694 x) b3) p) (mem
  (tuple2 b2 f1) (Tuple2 b2 f1 b3 (t2tb2954 y)) q)))))
  (=>
  (exists ((b3 uni))
  (and (mem (tuple2 d1 b2) (Tuple2 d1 b2 (t2tb694 x) b3) p) (mem
  (tuple2 b2 f1) (Tuple2 b2 f1 b3 (t2tb2954 y)) q))) (mem40
  (tb2t2952 (Tuple2 d1 f1 (t2tb694 x) (t2tb2954 y)))
  (tb2t2938 (semicolon f1 b2 d1 p q))))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 d f))) (q (set (tuple21 f f))) (x d) (y f))
  (= (mem40 (tb2t2952 (Tuple2 d1 f1 (t2tb694 x) (t2tb2954 y)))
  (tb2t2938 (semicolon f1 f1 d1 (t2tb2938 p) (t2tb3276 q))))
  (exists ((b2 f))
  (and (mem40 (tb2t2952 (Tuple2 d1 f1 (t2tb694 x) (t2tb2954 b2))) p) (mem
  (tuple2 f1 f1) (Tuple2 f1 f1 (t2tb2954 b2) (t2tb2954 y)) (t2tb3276 q)))))))

;; mem_semicolon
  (assert
  (forall ((c2 ty))
  (forall ((p (set (tuple21 d f))) (q uni) (x d) (y uni))
  (= (mem (tuple2 d1 c2) (Tuple2 d1 c2 (t2tb694 x) y)
  (semicolon c2 f1 d1 (t2tb2938 p) q))
  (exists ((b2 f))
  (and (mem40 (tb2t2952 (Tuple2 d1 f1 (t2tb694 x) (t2tb2954 b2))) p) (mem
  (tuple2 f1 c2) (Tuple2 f1 c2 (t2tb2954 b2) y) q)))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 d d))) (q (set (tuple21 d f))) (x d) (y f))
  (= (mem40 (tb2t2952 (Tuple2 d1 f1 (t2tb694 x) (t2tb2954 y)))
  (tb2t2938 (semicolon f1 d1 d1 (t2tb825 p) (t2tb2938 q))))
  (exists ((b2 d))
  (and (mem (tuple2 d1 d1) (Tuple2 d1 d1 (t2tb694 x) (t2tb694 b2))
  (t2tb825 p)) (mem40 (tb2t2952 (Tuple2 d1 f1 (t2tb694 b2) (t2tb2954 y))) q))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 d c))) (q (set (tuple21 c f))) (x d) (y f))
  (= (mem40 (tb2t2952 (Tuple2 d1 f1 (t2tb694 x) (t2tb2954 y)))
  (tb2t2938 (semicolon f1 c1 d1 (t2tb829 p) (t2tb2942 q))))
  (exists ((b2 c))
  (and (mem (tuple2 d1 c1) (Tuple2 d1 c1 (t2tb694 x) (t2tb135 b2))
  (t2tb829 p)) (mem45 (tb2t2948 (Tuple2 c1 f1 (t2tb135 b2) (t2tb2954 y))) q))))))

;; mem_semicolon
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (q uni) (x (tuple21 a c)) (y (tuple21 e f)))
  (and
  (=> (mem42
  (tb2t2951 (Tuple2 (tuple2 a1 c1) (tuple2 e1 f1) (t2tb133 x) (t2tb3315 y)))
  (tb2t2945 (semicolon (tuple2 e1 f1) b2 (tuple2 a1 c1) p q)))
  (exists ((b3 uni))
  (and (sort b2 b3)
  (and (mem (tuple2 (tuple2 a1 c1) b2)
  (Tuple2 (tuple2 a1 c1) b2 (t2tb133 x) b3) p) (mem
  (tuple2 b2 (tuple2 e1 f1)) (Tuple2 b2 (tuple2 e1 f1) b3 (t2tb3315 y)) q)))))
  (=>
  (exists ((b3 uni))
  (and (mem (tuple2 (tuple2 a1 c1) b2)
  (Tuple2 (tuple2 a1 c1) b2 (t2tb133 x) b3) p) (mem
  (tuple2 b2 (tuple2 e1 f1)) (Tuple2 b2 (tuple2 e1 f1) b3 (t2tb3315 y)) q)))
  (mem42
  (tb2t2951 (Tuple2 (tuple2 a1 c1) (tuple2 e1 f1) (t2tb133 x) (t2tb3315 y)))
  (tb2t2945 (semicolon (tuple2 e1 f1) b2 (tuple2 a1 c1) p q))))))))

;; mem_semicolon
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (q uni) (x (tuple21 a c)) (y (tuple21 b d)))
  (and
  (=> (mem24
  (tb2t691 (Tuple2 (tuple2 a1 c1) (tuple2 b1 d1) (t2tb133 x) (t2tb692 y)))
  (tb2t686 (semicolon (tuple2 b1 d1) b2 (tuple2 a1 c1) p q)))
  (exists ((b3 uni))
  (and (sort b2 b3)
  (and (mem (tuple2 (tuple2 a1 c1) b2)
  (Tuple2 (tuple2 a1 c1) b2 (t2tb133 x) b3) p) (mem
  (tuple2 b2 (tuple2 b1 d1)) (Tuple2 b2 (tuple2 b1 d1) b3 (t2tb692 y)) q)))))
  (=>
  (exists ((b3 uni))
  (and (mem (tuple2 (tuple2 a1 c1) b2)
  (Tuple2 (tuple2 a1 c1) b2 (t2tb133 x) b3) p) (mem
  (tuple2 b2 (tuple2 b1 d1)) (Tuple2 b2 (tuple2 b1 d1) b3 (t2tb692 y)) q)))
  (mem24
  (tb2t691 (Tuple2 (tuple2 a1 c1) (tuple2 b1 d1) (t2tb133 x) (t2tb692 y)))
  (tb2t686 (semicolon (tuple2 b1 d1) b2 (tuple2 a1 c1) p q))))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 (tuple21 a c) (tuple21 e f))))
  (q (set (tuple21 (tuple21 e f) (tuple21 e f)))) (x (tuple21 a c))
  (y (tuple21 e f)))
  (= (mem42
  (tb2t2951 (Tuple2 (tuple2 a1 c1) (tuple2 e1 f1) (t2tb133 x) (t2tb3315 y)))
  (tb2t2945
  (semicolon (tuple2 e1 f1) (tuple2 e1 f1) (tuple2 a1 c1) (t2tb2945 p)
  (t2tb3910 q))))
  (exists ((b2 (tuple21 e f)))
  (and (mem42
  (tb2t2951 (Tuple2 (tuple2 a1 c1) (tuple2 e1 f1) (t2tb133 x) (t2tb3315 b2)))
  p) (mem (tuple2 (tuple2 e1 f1) (tuple2 e1 f1))
  (Tuple2 (tuple2 e1 f1) (tuple2 e1 f1) (t2tb3315 b2) (t2tb3315 y))
  (t2tb3910 q)))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 (tuple21 a c) (tuple21 e f))))
  (q (set (tuple21 (tuple21 e f) (tuple21 b d)))) (x (tuple21 a c))
  (y (tuple21 b d)))
  (= (mem24
  (tb2t691 (Tuple2 (tuple2 a1 c1) (tuple2 b1 d1) (t2tb133 x) (t2tb692 y)))
  (tb2t686
  (semicolon (tuple2 b1 d1) (tuple2 e1 f1) (tuple2 a1 c1) (t2tb2945 p)
  (t2tb3906 q))))
  (exists ((b2 (tuple21 e f)))
  (and (mem42
  (tb2t2951 (Tuple2 (tuple2 a1 c1) (tuple2 e1 f1) (t2tb133 x) (t2tb3315 b2)))
  p) (mem (tuple2 (tuple2 e1 f1) (tuple2 b1 d1))
  (Tuple2 (tuple2 e1 f1) (tuple2 b1 d1) (t2tb3315 b2) (t2tb692 y))
  (t2tb3906 q)))))))

;; mem_semicolon
  (assert
  (forall ((c2 ty))
  (forall ((p (set (tuple21 (tuple21 a c) (tuple21 e f)))) (q uni)
  (x (tuple21 a c)) (y uni))
  (= (mem (tuple2 (tuple2 a1 c1) c2) (Tuple2 (tuple2 a1 c1) c2 (t2tb133 x) y)
  (semicolon c2 (tuple2 e1 f1) (tuple2 a1 c1) (t2tb2945 p) q))
  (exists ((b2 (tuple21 e f)))
  (and (mem42
  (tb2t2951 (Tuple2 (tuple2 a1 c1) (tuple2 e1 f1) (t2tb133 x) (t2tb3315 b2)))
  p) (mem (tuple2 (tuple2 e1 f1) c2)
  (Tuple2 (tuple2 e1 f1) c2 (t2tb3315 b2) y) q)))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 (tuple21 a c) (tuple21 b d))))
  (q (set (tuple21 (tuple21 b d) (tuple21 e f)))) (x (tuple21 a c))
  (y (tuple21 e f)))
  (= (mem42
  (tb2t2951 (Tuple2 (tuple2 a1 c1) (tuple2 e1 f1) (t2tb133 x) (t2tb3315 y)))
  (semicolon19 p q))
  (exists ((b2 (tuple21 b d)))
  (and (mem24
  (tb2t691 (Tuple2 (tuple2 a1 c1) (tuple2 b1 d1) (t2tb133 x) (t2tb692 b2)))
  p) (mem43
  (tb2t2950 (Tuple2 (tuple2 b1 d1) (tuple2 e1 f1) (t2tb692 b2) (t2tb3315 y)))
  q))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 (tuple21 a c) (tuple21 b d))))
  (q (set (tuple21 (tuple21 b d) (tuple21 b d)))) (x (tuple21 a c))
  (y (tuple21 b d)))
  (= (mem24
  (tb2t691 (Tuple2 (tuple2 a1 c1) (tuple2 b1 d1) (t2tb133 x) (t2tb692 y)))
  (tb2t686
  (semicolon (tuple2 b1 d1) (tuple2 b1 d1) (tuple2 a1 c1) (t2tb686 p)
  (t2tb747 q))))
  (exists ((b2 (tuple21 b d)))
  (and (mem24
  (tb2t691 (Tuple2 (tuple2 a1 c1) (tuple2 b1 d1) (t2tb133 x) (t2tb692 b2)))
  p) (mem (tuple2 (tuple2 b1 d1) (tuple2 b1 d1))
  (Tuple2 (tuple2 b1 d1) (tuple2 b1 d1) (t2tb692 b2) (t2tb692 y))
  (t2tb747 q)))))))

;; mem_semicolon
  (assert
  (forall ((c2 ty))
  (forall ((p (set (tuple21 (tuple21 a c) (tuple21 b d)))) (q uni)
  (x (tuple21 a c)) (y uni))
  (= (mem (tuple2 (tuple2 a1 c1) c2) (Tuple2 (tuple2 a1 c1) c2 (t2tb133 x) y)
  (semicolon c2 (tuple2 b1 d1) (tuple2 a1 c1) (t2tb686 p) q))
  (exists ((b2 (tuple21 b d)))
  (and (mem24
  (tb2t691 (Tuple2 (tuple2 a1 c1) (tuple2 b1 d1) (t2tb133 x) (t2tb692 b2)))
  p) (mem (tuple2 (tuple2 b1 d1) c2)
  (Tuple2 (tuple2 b1 d1) c2 (t2tb692 b2) y) q)))))))

(declare-fun t2tb156 ((tuple21 (tuple21 a c) (tuple21 a c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a c) (tuple21 a c)))) (sort
  (tuple2 (tuple2 a1 c1) (tuple2 a1 c1)) (t2tb156 x))))

(declare-fun tb2t156 (uni) (tuple21 (tuple21 a c) (tuple21 a c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a c) (tuple21 a c))))
  (! (= (tb2t156 (t2tb156 i)) i) :pattern ((t2tb156 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 c1) (tuple2 a1 c1)) j)
     (= (t2tb156 (tb2t156 j)) j)) :pattern ((t2tb156 (tb2t156 j))) )))

(declare-fun t2tb157 ((set (tuple21 (tuple21 a c) (tuple21 a c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a c) (tuple21 a c))))) (sort
  (set1 (tuple2 (tuple2 a1 c1) (tuple2 a1 c1))) (t2tb157 x))))

(declare-fun tb2t157 (uni) (set (tuple21 (tuple21 a c) (tuple21 a c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a c) (tuple21 a c)))))
  (! (= (tb2t157 (t2tb157 i)) i) :pattern ((t2tb157 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 c1) (tuple2 a1 c1))) j)
     (= (t2tb157 (tb2t157 j)) j)) :pattern ((t2tb157 (tb2t157 j))) )))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 (tuple21 a c) (tuple21 a c))))
  (q (set (tuple21 (tuple21 a c) (tuple21 e f)))) (x (tuple21 a c))
  (y (tuple21 e f)))
  (= (mem42
  (tb2t2951 (Tuple2 (tuple2 a1 c1) (tuple2 e1 f1) (t2tb133 x) (t2tb3315 y)))
  (tb2t2945
  (semicolon (tuple2 e1 f1) (tuple2 a1 c1) (tuple2 a1 c1) (t2tb157 p)
  (t2tb2945 q))))
  (exists ((b2 (tuple21 a c)))
  (and (mem (tuple2 (tuple2 a1 c1) (tuple2 a1 c1))
  (Tuple2 (tuple2 a1 c1) (tuple2 a1 c1) (t2tb133 x) (t2tb133 b2))
  (t2tb157 p)) (mem42
  (tb2t2951 (Tuple2 (tuple2 a1 c1) (tuple2 e1 f1) (t2tb133 b2) (t2tb3315 y)))
  q))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 (tuple21 a c) (tuple21 a c))))
  (q (set (tuple21 (tuple21 a c) (tuple21 b d)))) (x (tuple21 a c))
  (y (tuple21 b d)))
  (= (mem24
  (tb2t691 (Tuple2 (tuple2 a1 c1) (tuple2 b1 d1) (t2tb133 x) (t2tb692 y)))
  (tb2t686
  (semicolon (tuple2 b1 d1) (tuple2 a1 c1) (tuple2 a1 c1) (t2tb157 p)
  (t2tb686 q))))
  (exists ((b2 (tuple21 a c)))
  (and (mem (tuple2 (tuple2 a1 c1) (tuple2 a1 c1))
  (Tuple2 (tuple2 a1 c1) (tuple2 a1 c1) (t2tb133 x) (t2tb133 b2))
  (t2tb157 p)) (mem24
  (tb2t691 (Tuple2 (tuple2 a1 c1) (tuple2 b1 d1) (t2tb133 b2) (t2tb692 y)))
  q))))))

;; mem_semicolon
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (q uni) (x c) (y f))
  (and
  (=> (mem45 (tb2t2948 (Tuple2 c1 f1 (t2tb135 x) (t2tb2954 y)))
  (tb2t2942 (semicolon f1 b2 c1 p q)))
  (exists ((b3 uni))
  (and (sort b2 b3)
  (and (mem (tuple2 c1 b2) (Tuple2 c1 b2 (t2tb135 x) b3) p) (mem
  (tuple2 b2 f1) (Tuple2 b2 f1 b3 (t2tb2954 y)) q)))))
  (=>
  (exists ((b3 uni))
  (and (mem (tuple2 c1 b2) (Tuple2 c1 b2 (t2tb135 x) b3) p) (mem
  (tuple2 b2 f1) (Tuple2 b2 f1 b3 (t2tb2954 y)) q))) (mem45
  (tb2t2948 (Tuple2 c1 f1 (t2tb135 x) (t2tb2954 y)))
  (tb2t2942 (semicolon f1 b2 c1 p q))))))))

;; mem_semicolon
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (q uni) (x c) (y d))
  (and
  (=> (mem21 (tb2t693 (Tuple2 c1 d1 (t2tb135 x) (t2tb694 y)))
  (tb2t689 (semicolon d1 b2 c1 p q)))
  (exists ((b3 uni))
  (and (sort b2 b3)
  (and (mem (tuple2 c1 b2) (Tuple2 c1 b2 (t2tb135 x) b3) p) (mem
  (tuple2 b2 d1) (Tuple2 b2 d1 b3 (t2tb694 y)) q)))))
  (=>
  (exists ((b3 uni))
  (and (mem (tuple2 c1 b2) (Tuple2 c1 b2 (t2tb135 x) b3) p) (mem
  (tuple2 b2 d1) (Tuple2 b2 d1 b3 (t2tb694 y)) q))) (mem21
  (tb2t693 (Tuple2 c1 d1 (t2tb135 x) (t2tb694 y)))
  (tb2t689 (semicolon d1 b2 c1 p q))))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 c f))) (q (set (tuple21 f f))) (x c) (y f))
  (= (mem45 (tb2t2948 (Tuple2 c1 f1 (t2tb135 x) (t2tb2954 y)))
  (tb2t2942 (semicolon f1 f1 c1 (t2tb2942 p) (t2tb3276 q))))
  (exists ((b2 f))
  (and (mem45 (tb2t2948 (Tuple2 c1 f1 (t2tb135 x) (t2tb2954 b2))) p) (mem
  (tuple2 f1 f1) (Tuple2 f1 f1 (t2tb2954 b2) (t2tb2954 y)) (t2tb3276 q)))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 c f))) (q (set (tuple21 f d))) (x c) (y d))
  (= (mem21 (tb2t693 (Tuple2 c1 d1 (t2tb135 x) (t2tb694 y)))
  (tb2t689 (semicolon d1 f1 c1 (t2tb2942 p) (t2tb3286 q))))
  (exists ((b2 f))
  (and (mem45 (tb2t2948 (Tuple2 c1 f1 (t2tb135 x) (t2tb2954 b2))) p) (mem
  (tuple2 f1 d1) (Tuple2 f1 d1 (t2tb2954 b2) (t2tb694 y)) (t2tb3286 q)))))))

;; mem_semicolon
  (assert
  (forall ((c2 ty))
  (forall ((p (set (tuple21 c f))) (q uni) (x c) (y uni))
  (= (mem (tuple2 c1 c2) (Tuple2 c1 c2 (t2tb135 x) y)
  (semicolon c2 f1 c1 (t2tb2942 p) q))
  (exists ((b2 f))
  (and (mem45 (tb2t2948 (Tuple2 c1 f1 (t2tb135 x) (t2tb2954 b2))) p) (mem
  (tuple2 f1 c2) (Tuple2 f1 c2 (t2tb2954 b2) y) q)))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 c d))) (q (set (tuple21 d f))) (x c) (y f))
  (= (mem45 (tb2t2948 (Tuple2 c1 f1 (t2tb135 x) (t2tb2954 y)))
  (semicolon21 p q))
  (exists ((b2 d))
  (and (mem21 (tb2t693 (Tuple2 c1 d1 (t2tb135 x) (t2tb694 b2))) p) (mem40
  (tb2t2952 (Tuple2 d1 f1 (t2tb694 b2) (t2tb2954 y))) q))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 c d))) (q (set (tuple21 d d))) (x c) (y d))
  (= (mem21 (tb2t693 (Tuple2 c1 d1 (t2tb135 x) (t2tb694 y)))
  (tb2t689 (semicolon d1 d1 c1 (t2tb689 p) (t2tb825 q))))
  (exists ((b2 d))
  (and (mem21 (tb2t693 (Tuple2 c1 d1 (t2tb135 x) (t2tb694 b2))) p) (mem
  (tuple2 d1 d1) (Tuple2 d1 d1 (t2tb694 b2) (t2tb694 y)) (t2tb825 q)))))))

;; mem_semicolon
  (assert
  (forall ((c2 ty))
  (forall ((p (set (tuple21 c d))) (q uni) (x c) (y uni))
  (= (mem (tuple2 c1 c2) (Tuple2 c1 c2 (t2tb135 x) y)
  (semicolon c2 d1 c1 (t2tb689 p) q))
  (exists ((b2 d))
  (and (mem21 (tb2t693 (Tuple2 c1 d1 (t2tb135 x) (t2tb694 b2))) p) (mem
  (tuple2 d1 c2) (Tuple2 d1 c2 (t2tb694 b2) y) q)))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 c c))) (q (set (tuple21 c f))) (x c) (y f))
  (= (mem45 (tb2t2948 (Tuple2 c1 f1 (t2tb135 x) (t2tb2954 y)))
  (tb2t2942 (semicolon f1 c1 c1 (t2tb216 p) (t2tb2942 q))))
  (exists ((b2 c))
  (and (mem (tuple2 c1 c1) (Tuple2 c1 c1 (t2tb135 x) (t2tb135 b2))
  (t2tb216 p)) (mem45 (tb2t2948 (Tuple2 c1 f1 (t2tb135 b2) (t2tb2954 y))) q))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 c c))) (q (set (tuple21 c d))) (x c) (y d))
  (= (mem21 (tb2t693 (Tuple2 c1 d1 (t2tb135 x) (t2tb694 y)))
  (tb2t689 (semicolon d1 c1 c1 (t2tb216 p) (t2tb689 q))))
  (exists ((b2 c))
  (and (mem (tuple2 c1 c1) (Tuple2 c1 c1 (t2tb135 x) (t2tb135 b2))
  (t2tb216 p)) (mem21 (tb2t693 (Tuple2 c1 d1 (t2tb135 b2) (t2tb694 y))) q))))))

;; mem_semicolon
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (q uni) (x b) (y e))
  (and
  (=> (mem38 (tb2t2953 (Tuple2 b1 e1 (t2tb14 x) (t2tb2955 y)))
  (tb2t2940 (semicolon e1 b2 b1 p q)))
  (exists ((b3 uni))
  (and (sort b2 b3)
  (and (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) b3) p) (mem
  (tuple2 b2 e1) (Tuple2 b2 e1 b3 (t2tb2955 y)) q)))))
  (=>
  (exists ((b3 uni))
  (and (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) b3) p) (mem
  (tuple2 b2 e1) (Tuple2 b2 e1 b3 (t2tb2955 y)) q))) (mem38
  (tb2t2953 (Tuple2 b1 e1 (t2tb14 x) (t2tb2955 y)))
  (tb2t2940 (semicolon e1 b2 b1 p q))))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 b e))) (q (set (tuple21 e e))) (x b) (y e))
  (= (mem38 (tb2t2953 (Tuple2 b1 e1 (t2tb14 x) (t2tb2955 y)))
  (tb2t2940 (semicolon e1 e1 b1 (t2tb2940 p) (t2tb3316 q))))
  (exists ((b2 e))
  (and (mem38 (tb2t2953 (Tuple2 b1 e1 (t2tb14 x) (t2tb2955 b2))) p) (mem
  (tuple2 e1 e1) (Tuple2 e1 e1 (t2tb2955 b2) (t2tb2955 y)) (t2tb3316 q)))))))

;; mem_semicolon
  (assert
  (forall ((c2 ty))
  (forall ((p (set (tuple21 b e))) (q uni) (x b) (y uni))
  (= (mem (tuple2 b1 c2) (Tuple2 b1 c2 (t2tb14 x) y)
  (semicolon c2 e1 b1 (t2tb2940 p) q))
  (exists ((b2 e))
  (and (mem38 (tb2t2953 (Tuple2 b1 e1 (t2tb14 x) (t2tb2955 b2))) p) (mem
  (tuple2 e1 c2) (Tuple2 e1 c2 (t2tb2955 b2) y) q)))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 b b))) (q (set (tuple21 b e))) (x b) (y e))
  (= (mem38 (tb2t2953 (Tuple2 b1 e1 (t2tb14 x) (t2tb2955 y)))
  (tb2t2940 (semicolon e1 b1 b1 (t2tb35 p) (t2tb2940 q))))
  (exists ((b2 b))
  (and (mem (tuple2 b1 b1) (Tuple2 b1 b1 (t2tb14 x) (t2tb14 b2)) (t2tb35 p))
  (mem38 (tb2t2953 (Tuple2 b1 e1 (t2tb14 b2) (t2tb2955 y))) q))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 b a))) (q (set (tuple21 a e))) (x b) (y e))
  (= (mem38 (tb2t2953 (Tuple2 b1 e1 (t2tb14 x) (t2tb2955 y)))
  (tb2t2940 (semicolon e1 a1 b1 (t2tb37 p) (t2tb2943 q))))
  (exists ((b2 a))
  (and (mem (tuple2 b1 a1) (Tuple2 b1 a1 (t2tb14 x) (t2tb2 b2)) (t2tb37 p))
  (mem44 (tb2t2949 (Tuple2 a1 e1 (t2tb2 b2) (t2tb2955 y))) q))))))

;; mem_semicolon
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (q uni) (x a) (y e))
  (and
  (=> (mem44 (tb2t2949 (Tuple2 a1 e1 (t2tb2 x) (t2tb2955 y)))
  (tb2t2943 (semicolon e1 b2 a1 p q)))
  (exists ((b3 uni))
  (and (sort b2 b3)
  (and (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) b3) p) (mem (tuple2 b2 e1)
  (Tuple2 b2 e1 b3 (t2tb2955 y)) q)))))
  (=>
  (exists ((b3 uni))
  (and (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) b3) p) (mem (tuple2 b2 e1)
  (Tuple2 b2 e1 b3 (t2tb2955 y)) q))) (mem44
  (tb2t2949 (Tuple2 a1 e1 (t2tb2 x) (t2tb2955 y)))
  (tb2t2943 (semicolon e1 b2 a1 p q))))))))

;; mem_semicolon
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (q uni) (x a) (y b))
  (and
  (=> (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y)))
  (tb2t11 (semicolon b1 b2 a1 p q)))
  (exists ((b3 uni))
  (and (sort b2 b3)
  (and (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) b3) p) (mem (tuple2 b2 b1)
  (Tuple2 b2 b1 b3 (t2tb14 y)) q)))))
  (=>
  (exists ((b3 uni))
  (and (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) b3) p) (mem (tuple2 b2 b1)
  (Tuple2 b2 b1 b3 (t2tb14 y)) q))) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y)))
  (tb2t11 (semicolon b1 b2 a1 p q))))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 a e))) (q (set (tuple21 e e))) (x a) (y e))
  (= (mem44 (tb2t2949 (Tuple2 a1 e1 (t2tb2 x) (t2tb2955 y)))
  (tb2t2943 (semicolon e1 e1 a1 (t2tb2943 p) (t2tb3316 q))))
  (exists ((b2 e))
  (and (mem44 (tb2t2949 (Tuple2 a1 e1 (t2tb2 x) (t2tb2955 b2))) p) (mem
  (tuple2 e1 e1) (Tuple2 e1 e1 (t2tb2955 b2) (t2tb2955 y)) (t2tb3316 q)))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 a e))) (q (set (tuple21 e b))) (x a) (y b))
  (= (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y)))
  (tb2t11 (semicolon b1 e1 a1 (t2tb2943 p) (t2tb3332 q))))
  (exists ((b2 e))
  (and (mem44 (tb2t2949 (Tuple2 a1 e1 (t2tb2 x) (t2tb2955 b2))) p) (mem
  (tuple2 e1 b1) (Tuple2 e1 b1 (t2tb2955 b2) (t2tb14 y)) (t2tb3332 q)))))))

;; mem_semicolon
  (assert
  (forall ((c2 ty))
  (forall ((p (set (tuple21 a e))) (q uni) (x a) (y uni))
  (= (mem (tuple2 a1 c2) (Tuple2 a1 c2 (t2tb2 x) y)
  (semicolon c2 e1 a1 (t2tb2943 p) q))
  (exists ((b2 e))
  (and (mem44 (tb2t2949 (Tuple2 a1 e1 (t2tb2 x) (t2tb2955 b2))) p) (mem
  (tuple2 e1 c2) (Tuple2 e1 c2 (t2tb2955 b2) y) q)))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 a b))) (q (set (tuple21 b e))) (x a) (y e))
  (= (mem44 (tb2t2949 (Tuple2 a1 e1 (t2tb2 x) (t2tb2955 y)))
  (semicolon20 p q))
  (exists ((b2 b))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 b2))) p) (mem38
  (tb2t2953 (Tuple2 b1 e1 (t2tb14 b2) (t2tb2955 y))) q))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 a b))) (q (set (tuple21 b b))) (x a) (y b))
  (= (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y)))
  (tb2t11 (semicolon b1 b1 a1 (t2tb11 p) (t2tb35 q))))
  (exists ((b2 b))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 b2))) p) (mem
  (tuple2 b1 b1) (Tuple2 b1 b1 (t2tb14 b2) (t2tb14 y)) (t2tb35 q)))))))

;; mem_semicolon
  (assert
  (forall ((c2 ty))
  (forall ((p (set (tuple21 a b))) (q uni) (x a) (y uni))
  (= (mem (tuple2 a1 c2) (Tuple2 a1 c2 (t2tb2 x) y)
  (semicolon c2 b1 a1 (t2tb11 p) q))
  (exists ((b2 b))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 b2))) p) (mem
  (tuple2 b1 c2) (Tuple2 b1 c2 (t2tb14 b2) y) q)))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 a a))) (q (set (tuple21 a e))) (x a) (y e))
  (= (mem44 (tb2t2949 (Tuple2 a1 e1 (t2tb2 x) (t2tb2955 y)))
  (tb2t2943 (semicolon e1 a1 a1 (t2tb4 p) (t2tb2943 q))))
  (exists ((b2 a))
  (and (mem (tuple2 a1 a1) (Tuple2 a1 a1 (t2tb2 x) (t2tb2 b2)) (t2tb4 p))
  (mem44 (tb2t2949 (Tuple2 a1 e1 (t2tb2 b2) (t2tb2955 y))) q))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 a a))) (q (set (tuple21 a b))) (x a) (y b))
  (= (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y)))
  (tb2t11 (semicolon b1 a1 a1 (t2tb4 p) (t2tb11 q))))
  (exists ((b2 a))
  (and (mem (tuple2 a1 a1) (Tuple2 a1 a1 (t2tb2 x) (t2tb2 b2)) (t2tb4 p))
  (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 b2) (t2tb14 y))) q))))))

;; mem_semicolon
  (assert
  (forall ((a2 ty) (b2 ty) (c2 ty))
  (forall ((p uni) (q uni) (x uni) (y uni))
  (and
  (=> (mem (tuple2 a2 c2) (Tuple2 a2 c2 x y) (semicolon c2 b2 a2 p q))
  (exists ((b3 uni))
  (and (sort b2 b3)
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x b3) p) (mem (tuple2 b2 c2)
  (Tuple2 b2 c2 b3 y) q)))))
  (=>
  (exists ((b3 uni))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x b3) p) (mem (tuple2 b2 c2)
  (Tuple2 b2 c2 b3 y) q))) (mem (tuple2 a2 c2) (Tuple2 a2 c2 x y)
  (semicolon c2 b2 a2 p q)))))))

(declare-fun semicolon_back (ty ty ty uni uni) uni)

;; semicolon_back_sort
  (assert
  (forall ((a2 ty) (b2 ty) (c2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (tuple2 a2 c2))
  (semicolon_back c2 b2 a2 x x1)))))

;; semicolon_back
  (assert
  (forall ((p (set (tuple21 (tuple21 a c) (tuple21 b d))))
  (q (set (tuple21 (tuple21 b d) (tuple21 e f)))))
  (= (tb2t2945
     (semicolon_back (tuple2 e1 f1) (tuple2 b1 d1) (tuple2 a1 c1)
     (t2tb2944 q) (t2tb686 p))) (semicolon19 p q))))

;; semicolon_back
  (assert
  (forall ((p (set (tuple21 c d))) (q (set (tuple21 d f))))
  (= (tb2t2942 (semicolon_back f1 d1 c1 (t2tb2938 q) (t2tb689 p))) (semicolon21
                                                                   p q))))

;; semicolon_back
  (assert
  (forall ((p (set (tuple21 a b))) (q (set (tuple21 b e))))
  (= (tb2t2943 (semicolon_back e1 b1 a1 (t2tb2940 q) (t2tb11 p))) (semicolon20
                                                                  p q))))

;; semicolon_back
  (assert
  (forall ((a2 ty) (b2 ty) (c2 ty))
  (forall ((p uni) (q uni))
  (= (semicolon_back c2 b2 a2 q p) (semicolon c2 b2 a2 p q)))))

(declare-fun id (ty uni) uni)

;; id_sort
  (assert
  (forall ((a2 ty))
  (forall ((x uni)) (sort (set1 (tuple2 a2 a2)) (id a2 x)))))

;; mem_id
  (assert
  (forall ((u (set (tuple21 c f))) (x (tuple21 c f)) (y (tuple21 c f)))
  (= (mem (tuple2 (tuple2 c1 f1) (tuple2 c1 f1))
  (Tuple2 (tuple2 c1 f1) (tuple2 c1 f1) (t2tb2948 x) (t2tb2948 y))
  (id (tuple2 c1 f1) (t2tb2942 u))) (and (mem45 x u) (= x y)))))

;; mem_id
  (assert
  (forall ((u (set (tuple21 a e))) (x (tuple21 a e)) (y (tuple21 a e)))
  (= (mem (tuple2 (tuple2 a1 e1) (tuple2 a1 e1))
  (Tuple2 (tuple2 a1 e1) (tuple2 a1 e1) (t2tb2949 x) (t2tb2949 y))
  (id (tuple2 a1 e1) (t2tb2943 u))) (and (mem44 x u) (= x y)))))

;; mem_id
  (assert
  (forall ((u (set (tuple21 (tuple21 b d) (tuple21 e f))))
  (x (tuple21 (tuple21 b d) (tuple21 e f))) (y (tuple21 (tuple21 b d)
  (tuple21 e f))))
  (= (mem
  (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1))
  (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)))
  (Tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1))
  (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (t2tb2950 x) (t2tb2950 y))
  (id (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (t2tb2944 u)))
  (and (mem43 x u) (= x y)))))

;; mem_id
  (assert
  (forall ((u (set (tuple21 (tuple21 a c) (tuple21 e f))))
  (x (tuple21 (tuple21 a c) (tuple21 e f))) (y (tuple21 (tuple21 a c)
  (tuple21 e f))))
  (= (mem
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1))
  (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)))
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1))
  (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (t2tb2951 x) (t2tb2951 y))
  (id (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (t2tb2945 u)))
  (and (mem42 x u) (= x y)))))

;; mem_id
  (assert
  (forall ((u (set (set (tuple21 d f)))) (x (set (tuple21 d f)))
  (y (set (tuple21 d f))))
  (= (mem (tuple2 (set1 (tuple2 d1 f1)) (set1 (tuple2 d1 f1)))
  (Tuple2 (set1 (tuple2 d1 f1)) (set1 (tuple2 d1 f1)) (t2tb2938 x)
  (t2tb2938 y)) (id (set1 (tuple2 d1 f1)) (t2tb2939 u)))
  (and (mem41 x u) (= x y)))))

;; mem_id
  (assert
  (forall ((u (set (tuple21 d f))) (x (tuple21 d f)) (y (tuple21 d f)))
  (= (mem (tuple2 (tuple2 d1 f1) (tuple2 d1 f1))
  (Tuple2 (tuple2 d1 f1) (tuple2 d1 f1) (t2tb2952 x) (t2tb2952 y))
  (id (tuple2 d1 f1) (t2tb2938 u))) (and (mem40 x u) (= x y)))))

;; mem_id
  (assert
  (forall ((u (set (set (tuple21 b e)))) (x (set (tuple21 b e)))
  (y (set (tuple21 b e))))
  (= (mem (tuple2 (set1 (tuple2 b1 e1)) (set1 (tuple2 b1 e1)))
  (Tuple2 (set1 (tuple2 b1 e1)) (set1 (tuple2 b1 e1)) (t2tb2940 x)
  (t2tb2940 y)) (id (set1 (tuple2 b1 e1)) (t2tb2941 u)))
  (and (mem39 x u) (= x y)))))

;; mem_id
  (assert
  (forall ((u (set (tuple21 b e))) (x (tuple21 b e)) (y (tuple21 b e)))
  (= (mem (tuple2 (tuple2 b1 e1) (tuple2 b1 e1))
  (Tuple2 (tuple2 b1 e1) (tuple2 b1 e1) (t2tb2953 x) (t2tb2953 y))
  (id (tuple2 b1 e1) (t2tb2940 u))) (and (mem38 x u) (= x y)))))

;; mem_id
  (assert
  (forall ((u (set f)) (x f) (y f))
  (= (mem (tuple2 f1 f1) (Tuple2 f1 f1 (t2tb2954 x) (t2tb2954 y))
  (id f1 (t2tb2946 u))) (and (mem37 x u) (= x y)))))

;; mem_id
  (assert
  (forall ((u (set e)) (x e) (y e))
  (= (mem (tuple2 e1 e1) (Tuple2 e1 e1 (t2tb2955 x) (t2tb2955 y))
  (id e1 (t2tb2947 u))) (and (mem36 x u) (= x y)))))

;; mem_id
  (assert
  (forall ((u (set (tuple21 (tuple21 a c) (tuple21 b d))))
  (x (tuple21 (tuple21 a c) (tuple21 b d))) (y (tuple21 (tuple21 a c)
  (tuple21 b d))))
  (= (mem
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))
  (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))
  (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb691 x) (t2tb691 y))
  (id (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb686 u)))
  (and (mem24 x u) (= x y)))))

;; mem_id
  (assert
  (forall ((u (set (set (tuple21 c d)))) (x (set (tuple21 c d)))
  (y (set (tuple21 c d))))
  (= (mem (tuple2 (set1 (tuple2 c1 d1)) (set1 (tuple2 c1 d1)))
  (Tuple2 (set1 (tuple2 c1 d1)) (set1 (tuple2 c1 d1)) (t2tb689 x)
  (t2tb689 y)) (id (set1 (tuple2 c1 d1)) (t2tb688 u)))
  (and (mem22 x u) (= x y)))))

;; mem_id
  (assert
  (forall ((u (set (tuple21 c d))) (x (tuple21 c d)) (y (tuple21 c d)))
  (= (mem (tuple2 (tuple2 c1 d1) (tuple2 c1 d1))
  (Tuple2 (tuple2 c1 d1) (tuple2 c1 d1) (t2tb693 x) (t2tb693 y))
  (id (tuple2 c1 d1) (t2tb689 u))) (and (mem21 x u) (= x y)))))

;; mem_id
  (assert
  (forall ((u (set d)) (x d) (y d))
  (= (mem (tuple2 d1 d1) (Tuple2 d1 d1 (t2tb694 x) (t2tb694 y))
  (id d1 (t2tb690 u))) (and (mem20 x u) (= x y)))))

;; mem_id
  (assert
  (forall ((u (set c)) (x c) (y c))
  (= (mem (tuple2 c1 c1) (Tuple2 c1 c1 (t2tb135 x) (t2tb135 y))
  (id c1 (t2tb132 u))) (and (mem7 x u) (= x y)))))

;; mem_id
  (assert
  (forall ((u (set (set (tuple21 a b)))) (x (set (tuple21 a b)))
  (y (set (tuple21 a b))))
  (= (mem (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1)))
  (Tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1)) (t2tb11 x) (t2tb11 y))
  (id (set1 (tuple2 a1 b1)) (t2tb10 u))) (and (mem4 x u) (= x y)))))

;; mem_id
  (assert
  (forall ((u (set (tuple21 a b))) (x (tuple21 a b)) (y (tuple21 a b)))
  (= (mem (tuple2 (tuple2 a1 b1) (tuple2 a1 b1))
  (Tuple2 (tuple2 a1 b1) (tuple2 a1 b1) (t2tb13 x) (t2tb13 y))
  (id (tuple2 a1 b1) (t2tb11 u))) (and (mem3 x u) (= x y)))))

;; mem_id
  (assert
  (forall ((u (set b)) (x b) (y b))
  (= (mem (tuple2 b1 b1) (Tuple2 b1 b1 (t2tb14 x) (t2tb14 y))
  (id b1 (t2tb12 u))) (and (mem2 x u) (= x y)))))

;; mem_id
  (assert
  (forall ((u (set a)) (x a) (y a))
  (= (mem (tuple2 a1 a1) (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y))
  (id a1 (t2tb1 u))) (and (mem1 x u) (= x y)))))

;; mem_id
  (assert
  (forall ((a2 ty))
  (forall ((u uni) (x uni) (y uni))
  (=> (sort a2 x)
  (=> (sort a2 y)
  (= (mem (tuple2 a2 a2) (Tuple2 a2 a2 x y) (id a2 u))
  (and (mem a2 x u) (= x y))))))))

(declare-fun domain_restriction (ty ty uni uni) uni)

;; domain_restriction_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (tuple2 a2 b2))
  (domain_restriction b2 a2 x x1)))))

;; mem_domain_restriction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (tuple21 c f))) (x (tuple21 c f)) (y uni))
  (= (mem (tuple2 (tuple2 c1 f1) b2)
  (Tuple2 (tuple2 c1 f1) b2 (t2tb2948 x) y)
  (domain_restriction b2 (tuple2 c1 f1) (t2tb2942 s) p))
  (and (mem (tuple2 (tuple2 c1 f1) b2)
  (Tuple2 (tuple2 c1 f1) b2 (t2tb2948 x) y) p) (mem45 x s))))))

;; mem_domain_restriction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (tuple21 a e))) (x (tuple21 a e)) (y uni))
  (= (mem (tuple2 (tuple2 a1 e1) b2)
  (Tuple2 (tuple2 a1 e1) b2 (t2tb2949 x) y)
  (domain_restriction b2 (tuple2 a1 e1) (t2tb2943 s) p))
  (and (mem (tuple2 (tuple2 a1 e1) b2)
  (Tuple2 (tuple2 a1 e1) b2 (t2tb2949 x) y) p) (mem44 x s))))))

;; mem_domain_restriction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (tuple21 (tuple21 b d) (tuple21 e f))))
  (x (tuple21 (tuple21 b d) (tuple21 e f))) (y uni))
  (= (mem (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) b2)
  (Tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) b2 (t2tb2950 x) y)
  (domain_restriction b2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (t2tb2944 s)
  p))
  (and (mem (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) b2)
  (Tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) b2 (t2tb2950 x) y) p) (mem43
  x s))))))

;; mem_domain_restriction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (tuple21 (tuple21 a c) (tuple21 e f))))
  (x (tuple21 (tuple21 a c) (tuple21 e f))) (y uni))
  (= (mem (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) b2)
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) b2 (t2tb2951 x) y)
  (domain_restriction b2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (t2tb2945 s)
  p))
  (and (mem (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) b2)
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) b2 (t2tb2951 x) y) p) (mem42
  x s))))))

;; mem_domain_restriction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (set (tuple21 d f)))) (x (set (tuple21 d f)))
  (y uni))
  (= (mem (tuple2 (set1 (tuple2 d1 f1)) b2)
  (Tuple2 (set1 (tuple2 d1 f1)) b2 (t2tb2938 x) y)
  (domain_restriction b2 (set1 (tuple2 d1 f1)) (t2tb2939 s) p))
  (and (mem (tuple2 (set1 (tuple2 d1 f1)) b2)
  (Tuple2 (set1 (tuple2 d1 f1)) b2 (t2tb2938 x) y) p) (mem41 x s))))))

;; mem_domain_restriction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (tuple21 d f))) (x (tuple21 d f)) (y uni))
  (= (mem (tuple2 (tuple2 d1 f1) b2)
  (Tuple2 (tuple2 d1 f1) b2 (t2tb2952 x) y)
  (domain_restriction b2 (tuple2 d1 f1) (t2tb2938 s) p))
  (and (mem (tuple2 (tuple2 d1 f1) b2)
  (Tuple2 (tuple2 d1 f1) b2 (t2tb2952 x) y) p) (mem40 x s))))))

;; mem_domain_restriction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (set (tuple21 b e)))) (x (set (tuple21 b e)))
  (y uni))
  (= (mem (tuple2 (set1 (tuple2 b1 e1)) b2)
  (Tuple2 (set1 (tuple2 b1 e1)) b2 (t2tb2940 x) y)
  (domain_restriction b2 (set1 (tuple2 b1 e1)) (t2tb2941 s) p))
  (and (mem (tuple2 (set1 (tuple2 b1 e1)) b2)
  (Tuple2 (set1 (tuple2 b1 e1)) b2 (t2tb2940 x) y) p) (mem39 x s))))))

;; mem_domain_restriction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (tuple21 b e))) (x (tuple21 b e)) (y uni))
  (= (mem (tuple2 (tuple2 b1 e1) b2)
  (Tuple2 (tuple2 b1 e1) b2 (t2tb2953 x) y)
  (domain_restriction b2 (tuple2 b1 e1) (t2tb2940 s) p))
  (and (mem (tuple2 (tuple2 b1 e1) b2)
  (Tuple2 (tuple2 b1 e1) b2 (t2tb2953 x) y) p) (mem38 x s))))))

;; mem_domain_restriction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set f)) (x f) (y uni))
  (= (mem (tuple2 f1 b2) (Tuple2 f1 b2 (t2tb2954 x) y)
  (domain_restriction b2 f1 (t2tb2946 s) p))
  (and (mem (tuple2 f1 b2) (Tuple2 f1 b2 (t2tb2954 x) y) p) (mem37 x s))))))

;; mem_domain_restriction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set e)) (x e) (y uni))
  (= (mem (tuple2 e1 b2) (Tuple2 e1 b2 (t2tb2955 x) y)
  (domain_restriction b2 e1 (t2tb2947 s) p))
  (and (mem (tuple2 e1 b2) (Tuple2 e1 b2 (t2tb2955 x) y) p) (mem36 x s))))))

;; mem_domain_restriction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (tuple21 (tuple21 a c) (tuple21 b d))))
  (x (tuple21 (tuple21 a c) (tuple21 b d))) (y uni))
  (= (mem (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) b2)
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) b2 (t2tb691 x) y)
  (domain_restriction b2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb686 s)
  p))
  (and (mem (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) b2)
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) b2 (t2tb691 x) y) p) (mem24
  x s))))))

;; mem_domain_restriction
  (assert
  (forall ((p (set (tuple21 (tuple21 b d) (tuple21 e f)))) (s (set (tuple21 b
  d))) (x (tuple21 b d)) (y (tuple21 e f)))
  (= (mem43
  (tb2t2950 (Tuple2 (tuple2 b1 d1) (tuple2 e1 f1) (t2tb692 x) (t2tb3315 y)))
  (tb2t2944
  (domain_restriction (tuple2 e1 f1) (tuple2 b1 d1) (t2tb687 s) (t2tb2944 p))))
  (and (mem43
  (tb2t2950 (Tuple2 (tuple2 b1 d1) (tuple2 e1 f1) (t2tb692 x) (t2tb3315 y)))
  p) (mem (tuple2 b1 d1) (t2tb692 x) (t2tb687 s))))))

;; mem_domain_restriction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (set (tuple21 c d)))) (x (set (tuple21 c d)))
  (y uni))
  (= (mem (tuple2 (set1 (tuple2 c1 d1)) b2)
  (Tuple2 (set1 (tuple2 c1 d1)) b2 (t2tb689 x) y)
  (domain_restriction b2 (set1 (tuple2 c1 d1)) (t2tb688 s) p))
  (and (mem (tuple2 (set1 (tuple2 c1 d1)) b2)
  (Tuple2 (set1 (tuple2 c1 d1)) b2 (t2tb689 x) y) p) (mem22 x s))))))

;; mem_domain_restriction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (tuple21 c d))) (x (tuple21 c d)) (y uni))
  (= (mem (tuple2 (tuple2 c1 d1) b2) (Tuple2 (tuple2 c1 d1) b2 (t2tb693 x) y)
  (domain_restriction b2 (tuple2 c1 d1) (t2tb689 s) p))
  (and (mem (tuple2 (tuple2 c1 d1) b2)
  (Tuple2 (tuple2 c1 d1) b2 (t2tb693 x) y) p) (mem21 x s))))))

;; mem_domain_restriction
  (assert
  (forall ((p (set (tuple21 d f))) (s (set d)) (x d) (y f))
  (= (mem40 (tb2t2952 (Tuple2 d1 f1 (t2tb694 x) (t2tb2954 y)))
  (tb2t2938 (domain_restriction f1 d1 (t2tb690 s) (t2tb2938 p))))
  (and (mem40 (tb2t2952 (Tuple2 d1 f1 (t2tb694 x) (t2tb2954 y))) p) (mem20 x
  s)))))

;; mem_domain_restriction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set d)) (x d) (y uni))
  (= (mem (tuple2 d1 b2) (Tuple2 d1 b2 (t2tb694 x) y)
  (domain_restriction b2 d1 (t2tb690 s) p))
  (and (mem (tuple2 d1 b2) (Tuple2 d1 b2 (t2tb694 x) y) p) (mem20 x s))))))

;; mem_domain_restriction
  (assert
  (forall ((p (set (tuple21 (tuple21 a c) (tuple21 e f)))) (s (set (tuple21 a
  c))) (x (tuple21 a c)) (y (tuple21 e f)))
  (= (mem42
  (tb2t2951 (Tuple2 (tuple2 a1 c1) (tuple2 e1 f1) (t2tb133 x) (t2tb3315 y)))
  (tb2t2945
  (domain_restriction (tuple2 e1 f1) (tuple2 a1 c1) (t2tb129 s) (t2tb2945 p))))
  (and (mem42
  (tb2t2951 (Tuple2 (tuple2 a1 c1) (tuple2 e1 f1) (t2tb133 x) (t2tb3315 y)))
  p) (mem (tuple2 a1 c1) (t2tb133 x) (t2tb129 s))))))

;; mem_domain_restriction
  (assert
  (forall ((p (set (tuple21 (tuple21 a c) (tuple21 b d)))) (s (set (tuple21 a
  c))) (x (tuple21 a c)) (y (tuple21 b d)))
  (= (mem24
  (tb2t691 (Tuple2 (tuple2 a1 c1) (tuple2 b1 d1) (t2tb133 x) (t2tb692 y)))
  (tb2t686
  (domain_restriction (tuple2 b1 d1) (tuple2 a1 c1) (t2tb129 s) (t2tb686 p))))
  (and (mem24
  (tb2t691 (Tuple2 (tuple2 a1 c1) (tuple2 b1 d1) (t2tb133 x) (t2tb692 y))) p)
  (mem (tuple2 a1 c1) (t2tb133 x) (t2tb129 s))))))

;; mem_domain_restriction
  (assert
  (forall ((p (set (tuple21 c f))) (s (set c)) (x c) (y f))
  (= (mem45 (tb2t2948 (Tuple2 c1 f1 (t2tb135 x) (t2tb2954 y)))
  (tb2t2942 (domain_restriction f1 c1 (t2tb132 s) (t2tb2942 p))))
  (and (mem45 (tb2t2948 (Tuple2 c1 f1 (t2tb135 x) (t2tb2954 y))) p) (mem7 x
  s)))))

;; mem_domain_restriction
  (assert
  (forall ((p (set (tuple21 c d))) (s (set c)) (x c) (y d))
  (= (mem21 (tb2t693 (Tuple2 c1 d1 (t2tb135 x) (t2tb694 y)))
  (tb2t689 (domain_restriction d1 c1 (t2tb132 s) (t2tb689 p))))
  (and (mem21 (tb2t693 (Tuple2 c1 d1 (t2tb135 x) (t2tb694 y))) p) (mem7 x s)))))

;; mem_domain_restriction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set c)) (x c) (y uni))
  (= (mem (tuple2 c1 b2) (Tuple2 c1 b2 (t2tb135 x) y)
  (domain_restriction b2 c1 (t2tb132 s) p))
  (and (mem (tuple2 c1 b2) (Tuple2 c1 b2 (t2tb135 x) y) p) (mem7 x s))))))

;; mem_domain_restriction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (set (tuple21 a b)))) (x (set (tuple21 a b)))
  (y uni))
  (= (mem (tuple2 (set1 (tuple2 a1 b1)) b2)
  (Tuple2 (set1 (tuple2 a1 b1)) b2 (t2tb11 x) y)
  (domain_restriction b2 (set1 (tuple2 a1 b1)) (t2tb10 s) p))
  (and (mem (tuple2 (set1 (tuple2 a1 b1)) b2)
  (Tuple2 (set1 (tuple2 a1 b1)) b2 (t2tb11 x) y) p) (mem4 x s))))))

;; mem_domain_restriction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (tuple21 a b))) (x (tuple21 a b)) (y uni))
  (= (mem (tuple2 (tuple2 a1 b1) b2) (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) y)
  (domain_restriction b2 (tuple2 a1 b1) (t2tb11 s) p))
  (and (mem (tuple2 (tuple2 a1 b1) b2)
  (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) y) p) (mem3 x s))))))

;; mem_domain_restriction
  (assert
  (forall ((p (set (tuple21 b e))) (s (set b)) (x b) (y e))
  (= (mem38 (tb2t2953 (Tuple2 b1 e1 (t2tb14 x) (t2tb2955 y)))
  (tb2t2940 (domain_restriction e1 b1 (t2tb12 s) (t2tb2940 p))))
  (and (mem38 (tb2t2953 (Tuple2 b1 e1 (t2tb14 x) (t2tb2955 y))) p) (mem2 x
  s)))))

;; mem_domain_restriction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set b)) (x b) (y uni))
  (= (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) y)
  (domain_restriction b2 b1 (t2tb12 s) p))
  (and (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) y) p) (mem2 x s))))))

;; mem_domain_restriction
  (assert
  (forall ((p (set (tuple21 a e))) (s (set a)) (x a) (y e))
  (= (mem44 (tb2t2949 (Tuple2 a1 e1 (t2tb2 x) (t2tb2955 y)))
  (tb2t2943 (domain_restriction e1 a1 (t2tb1 s) (t2tb2943 p))))
  (and (mem44 (tb2t2949 (Tuple2 a1 e1 (t2tb2 x) (t2tb2955 y))) p) (mem1 x s)))))

;; mem_domain_restriction
  (assert
  (forall ((p (set (tuple21 a b))) (s (set a)) (x a) (y b))
  (= (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y)))
  (tb2t11 (domain_restriction b1 a1 (t2tb1 s) (t2tb11 p))))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y))) p) (mem1 x s)))))

;; mem_domain_restriction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set a)) (x a) (y uni))
  (= (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) y)
  (domain_restriction b2 a1 (t2tb1 s) p))
  (and (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) y) p) (mem1 x s))))))

;; mem_domain_restriction
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((p uni) (s uni) (x uni) (y uni))
  (= (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) (domain_restriction b2 a2 s p))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) p) (mem a2 x s))))))

(declare-fun range_restriction (ty ty uni uni) uni)

;; range_restriction_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (tuple2 a2 b2))
  (range_restriction b2 a2 x x1)))))

;; mem_range_restriction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (tuple21 c f))) (x uni) (y (tuple21 c f)))
  (= (mem (tuple2 a2 (tuple2 c1 f1))
  (Tuple2 a2 (tuple2 c1 f1) x (t2tb2948 y))
  (range_restriction (tuple2 c1 f1) a2 p (t2tb2942 t)))
  (and (mem (tuple2 a2 (tuple2 c1 f1))
  (Tuple2 a2 (tuple2 c1 f1) x (t2tb2948 y)) p) (mem45 y t))))))

;; mem_range_restriction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (tuple21 a e))) (x uni) (y (tuple21 a e)))
  (= (mem (tuple2 a2 (tuple2 a1 e1))
  (Tuple2 a2 (tuple2 a1 e1) x (t2tb2949 y))
  (range_restriction (tuple2 a1 e1) a2 p (t2tb2943 t)))
  (and (mem (tuple2 a2 (tuple2 a1 e1))
  (Tuple2 a2 (tuple2 a1 e1) x (t2tb2949 y)) p) (mem44 y t))))))

;; mem_range_restriction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (tuple21 (tuple21 b d) (tuple21 e f)))) (x uni)
  (y (tuple21 (tuple21 b d) (tuple21 e f))))
  (= (mem (tuple2 a2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)))
  (Tuple2 a2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) x (t2tb2950 y))
  (range_restriction (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) a2 p
  (t2tb2944 t)))
  (and (mem (tuple2 a2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)))
  (Tuple2 a2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) x (t2tb2950 y)) p) (mem43
  y t))))))

;; mem_range_restriction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (tuple21 (tuple21 a c) (tuple21 e f)))) (x uni)
  (y (tuple21 (tuple21 a c) (tuple21 e f))))
  (= (mem (tuple2 a2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)))
  (Tuple2 a2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) x (t2tb2951 y))
  (range_restriction (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) a2 p
  (t2tb2945 t)))
  (and (mem (tuple2 a2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)))
  (Tuple2 a2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) x (t2tb2951 y)) p) (mem42
  y t))))))

;; mem_range_restriction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (set (tuple21 d f)))) (x uni) (y (set (tuple21 d
  f))))
  (= (mem (tuple2 a2 (set1 (tuple2 d1 f1)))
  (Tuple2 a2 (set1 (tuple2 d1 f1)) x (t2tb2938 y))
  (range_restriction (set1 (tuple2 d1 f1)) a2 p (t2tb2939 t)))
  (and (mem (tuple2 a2 (set1 (tuple2 d1 f1)))
  (Tuple2 a2 (set1 (tuple2 d1 f1)) x (t2tb2938 y)) p) (mem41 y t))))))

;; mem_range_restriction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (tuple21 d f))) (x uni) (y (tuple21 d f)))
  (= (mem (tuple2 a2 (tuple2 d1 f1))
  (Tuple2 a2 (tuple2 d1 f1) x (t2tb2952 y))
  (range_restriction (tuple2 d1 f1) a2 p (t2tb2938 t)))
  (and (mem (tuple2 a2 (tuple2 d1 f1))
  (Tuple2 a2 (tuple2 d1 f1) x (t2tb2952 y)) p) (mem40 y t))))))

;; mem_range_restriction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (set (tuple21 b e)))) (x uni) (y (set (tuple21 b
  e))))
  (= (mem (tuple2 a2 (set1 (tuple2 b1 e1)))
  (Tuple2 a2 (set1 (tuple2 b1 e1)) x (t2tb2940 y))
  (range_restriction (set1 (tuple2 b1 e1)) a2 p (t2tb2941 t)))
  (and (mem (tuple2 a2 (set1 (tuple2 b1 e1)))
  (Tuple2 a2 (set1 (tuple2 b1 e1)) x (t2tb2940 y)) p) (mem39 y t))))))

;; mem_range_restriction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (tuple21 b e))) (x uni) (y (tuple21 b e)))
  (= (mem (tuple2 a2 (tuple2 b1 e1))
  (Tuple2 a2 (tuple2 b1 e1) x (t2tb2953 y))
  (range_restriction (tuple2 b1 e1) a2 p (t2tb2940 t)))
  (and (mem (tuple2 a2 (tuple2 b1 e1))
  (Tuple2 a2 (tuple2 b1 e1) x (t2tb2953 y)) p) (mem38 y t))))))

;; mem_range_restriction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set f)) (x uni) (y f))
  (= (mem (tuple2 a2 f1) (Tuple2 a2 f1 x (t2tb2954 y))
  (range_restriction f1 a2 p (t2tb2946 t)))
  (and (mem (tuple2 a2 f1) (Tuple2 a2 f1 x (t2tb2954 y)) p) (mem37 y t))))))

;; mem_range_restriction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set e)) (x uni) (y e))
  (= (mem (tuple2 a2 e1) (Tuple2 a2 e1 x (t2tb2955 y))
  (range_restriction e1 a2 p (t2tb2947 t)))
  (and (mem (tuple2 a2 e1) (Tuple2 a2 e1 x (t2tb2955 y)) p) (mem36 y t))))))

;; mem_range_restriction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (tuple21 (tuple21 a c) (tuple21 b d)))) (x uni)
  (y (tuple21 (tuple21 a c) (tuple21 b d))))
  (= (mem (tuple2 a2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
  (Tuple2 a2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) x (t2tb691 y))
  (range_restriction (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) a2 p (t2tb686 t)))
  (and (mem (tuple2 a2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
  (Tuple2 a2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) x (t2tb691 y)) p) (mem24
  y t))))))

;; mem_range_restriction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (set (tuple21 c d)))) (x uni) (y (set (tuple21 c
  d))))
  (= (mem (tuple2 a2 (set1 (tuple2 c1 d1)))
  (Tuple2 a2 (set1 (tuple2 c1 d1)) x (t2tb689 y))
  (range_restriction (set1 (tuple2 c1 d1)) a2 p (t2tb688 t)))
  (and (mem (tuple2 a2 (set1 (tuple2 c1 d1)))
  (Tuple2 a2 (set1 (tuple2 c1 d1)) x (t2tb689 y)) p) (mem22 y t))))))

;; mem_range_restriction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (tuple21 c d))) (x uni) (y (tuple21 c d)))
  (= (mem (tuple2 a2 (tuple2 c1 d1)) (Tuple2 a2 (tuple2 c1 d1) x (t2tb693 y))
  (range_restriction (tuple2 c1 d1) a2 p (t2tb689 t)))
  (and (mem (tuple2 a2 (tuple2 c1 d1))
  (Tuple2 a2 (tuple2 c1 d1) x (t2tb693 y)) p) (mem21 y t))))))

;; mem_range_restriction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set d)) (x uni) (y d))
  (= (mem (tuple2 a2 d1) (Tuple2 a2 d1 x (t2tb694 y))
  (range_restriction d1 a2 p (t2tb690 t)))
  (and (mem (tuple2 a2 d1) (Tuple2 a2 d1 x (t2tb694 y)) p) (mem20 y t))))))

;; mem_range_restriction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set c)) (x uni) (y c))
  (= (mem (tuple2 a2 c1) (Tuple2 a2 c1 x (t2tb135 y))
  (range_restriction c1 a2 p (t2tb132 t)))
  (and (mem (tuple2 a2 c1) (Tuple2 a2 c1 x (t2tb135 y)) p) (mem7 y t))))))

;; mem_range_restriction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (set (tuple21 a b)))) (x uni) (y (set (tuple21 a
  b))))
  (= (mem (tuple2 a2 (set1 (tuple2 a1 b1)))
  (Tuple2 a2 (set1 (tuple2 a1 b1)) x (t2tb11 y))
  (range_restriction (set1 (tuple2 a1 b1)) a2 p (t2tb10 t)))
  (and (mem (tuple2 a2 (set1 (tuple2 a1 b1)))
  (Tuple2 a2 (set1 (tuple2 a1 b1)) x (t2tb11 y)) p) (mem4 y t))))))

;; mem_range_restriction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (tuple21 a b))) (x uni) (y (tuple21 a b)))
  (= (mem (tuple2 a2 (tuple2 a1 b1)) (Tuple2 a2 (tuple2 a1 b1) x (t2tb13 y))
  (range_restriction (tuple2 a1 b1) a2 p (t2tb11 t)))
  (and (mem (tuple2 a2 (tuple2 a1 b1))
  (Tuple2 a2 (tuple2 a1 b1) x (t2tb13 y)) p) (mem3 y t))))))

;; mem_range_restriction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set b)) (x uni) (y b))
  (= (mem (tuple2 a2 b1) (Tuple2 a2 b1 x (t2tb14 y))
  (range_restriction b1 a2 p (t2tb12 t)))
  (and (mem (tuple2 a2 b1) (Tuple2 a2 b1 x (t2tb14 y)) p) (mem2 y t))))))

;; mem_range_restriction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set a)) (x uni) (y a))
  (= (mem (tuple2 a2 a1) (Tuple2 a2 a1 x (t2tb2 y))
  (range_restriction a1 a2 p (t2tb1 t)))
  (and (mem (tuple2 a2 a1) (Tuple2 a2 a1 x (t2tb2 y)) p) (mem1 y t))))))

;; mem_range_restriction
  (assert
  (forall ((p (set (tuple21 (tuple21 b d) (tuple21 e f)))) (t (set (tuple21 e
  f))) (x (tuple21 b d)) (y (tuple21 e f)))
  (= (mem43
  (tb2t2950 (Tuple2 (tuple2 b1 d1) (tuple2 e1 f1) (t2tb692 x) (t2tb3315 y)))
  (tb2t2944
  (range_restriction (tuple2 e1 f1) (tuple2 b1 d1) (t2tb2944 p) (t2tb3314 t))))
  (and (mem43
  (tb2t2950 (Tuple2 (tuple2 b1 d1) (tuple2 e1 f1) (t2tb692 x) (t2tb3315 y)))
  p) (mem (tuple2 e1 f1) (t2tb3315 y) (t2tb3314 t))))))

;; mem_range_restriction
  (assert
  (forall ((p (set (tuple21 d f))) (t (set f)) (x d) (y f))
  (= (mem40 (tb2t2952 (Tuple2 d1 f1 (t2tb694 x) (t2tb2954 y)))
  (tb2t2938 (range_restriction f1 d1 (t2tb2938 p) (t2tb2946 t))))
  (and (mem40 (tb2t2952 (Tuple2 d1 f1 (t2tb694 x) (t2tb2954 y))) p) (mem37 y
  t)))))

;; mem_range_restriction
  (assert
  (forall ((p (set (tuple21 (tuple21 a c) (tuple21 e f)))) (t (set (tuple21 e
  f))) (x (tuple21 a c)) (y (tuple21 e f)))
  (= (mem42
  (tb2t2951 (Tuple2 (tuple2 a1 c1) (tuple2 e1 f1) (t2tb133 x) (t2tb3315 y)))
  (tb2t2945
  (range_restriction (tuple2 e1 f1) (tuple2 a1 c1) (t2tb2945 p) (t2tb3314 t))))
  (and (mem42
  (tb2t2951 (Tuple2 (tuple2 a1 c1) (tuple2 e1 f1) (t2tb133 x) (t2tb3315 y)))
  p) (mem (tuple2 e1 f1) (t2tb3315 y) (t2tb3314 t))))))

;; mem_range_restriction
  (assert
  (forall ((p (set (tuple21 (tuple21 a c) (tuple21 b d)))) (t (set (tuple21 b
  d))) (x (tuple21 a c)) (y (tuple21 b d)))
  (= (mem24
  (tb2t691 (Tuple2 (tuple2 a1 c1) (tuple2 b1 d1) (t2tb133 x) (t2tb692 y)))
  (tb2t686
  (range_restriction (tuple2 b1 d1) (tuple2 a1 c1) (t2tb686 p) (t2tb687 t))))
  (and (mem24
  (tb2t691 (Tuple2 (tuple2 a1 c1) (tuple2 b1 d1) (t2tb133 x) (t2tb692 y))) p)
  (mem (tuple2 b1 d1) (t2tb692 y) (t2tb687 t))))))

;; mem_range_restriction
  (assert
  (forall ((p (set (tuple21 c f))) (t (set f)) (x c) (y f))
  (= (mem45 (tb2t2948 (Tuple2 c1 f1 (t2tb135 x) (t2tb2954 y)))
  (tb2t2942 (range_restriction f1 c1 (t2tb2942 p) (t2tb2946 t))))
  (and (mem45 (tb2t2948 (Tuple2 c1 f1 (t2tb135 x) (t2tb2954 y))) p) (mem37 y
  t)))))

;; mem_range_restriction
  (assert
  (forall ((p (set (tuple21 c d))) (t (set d)) (x c) (y d))
  (= (mem21 (tb2t693 (Tuple2 c1 d1 (t2tb135 x) (t2tb694 y)))
  (tb2t689 (range_restriction d1 c1 (t2tb689 p) (t2tb690 t))))
  (and (mem21 (tb2t693 (Tuple2 c1 d1 (t2tb135 x) (t2tb694 y))) p) (mem20 y
  t)))))

;; mem_range_restriction
  (assert
  (forall ((p (set (tuple21 b e))) (t (set e)) (x b) (y e))
  (= (mem38 (tb2t2953 (Tuple2 b1 e1 (t2tb14 x) (t2tb2955 y)))
  (tb2t2940 (range_restriction e1 b1 (t2tb2940 p) (t2tb2947 t))))
  (and (mem38 (tb2t2953 (Tuple2 b1 e1 (t2tb14 x) (t2tb2955 y))) p) (mem36 y
  t)))))

;; mem_range_restriction
  (assert
  (forall ((p (set (tuple21 a e))) (t (set e)) (x a) (y e))
  (= (mem44 (tb2t2949 (Tuple2 a1 e1 (t2tb2 x) (t2tb2955 y)))
  (tb2t2943 (range_restriction e1 a1 (t2tb2943 p) (t2tb2947 t))))
  (and (mem44 (tb2t2949 (Tuple2 a1 e1 (t2tb2 x) (t2tb2955 y))) p) (mem36 y
  t)))))

;; mem_range_restriction
  (assert
  (forall ((p (set (tuple21 a b))) (t (set b)) (x a) (y b))
  (= (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y)))
  (tb2t11 (range_restriction b1 a1 (t2tb11 p) (t2tb12 t))))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y))) p) (mem2 y t)))))

;; mem_range_restriction
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((p uni) (t uni) (x uni) (y uni))
  (= (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) (range_restriction b2 a2 p t))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) p) (mem b2 y t))))))

(declare-fun domain_substraction (ty ty uni uni) uni)

;; domain_substraction_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (tuple2 a2 b2))
  (domain_substraction b2 a2 x x1)))))

;; mem_domain_substraction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (tuple21 c f))) (x (tuple21 c f)) (y uni))
  (= (mem (tuple2 (tuple2 c1 f1) b2)
  (Tuple2 (tuple2 c1 f1) b2 (t2tb2948 x) y)
  (domain_substraction b2 (tuple2 c1 f1) (t2tb2942 s) p))
  (and (mem (tuple2 (tuple2 c1 f1) b2)
  (Tuple2 (tuple2 c1 f1) b2 (t2tb2948 x) y) p) (not (mem45 x s)))))))

;; mem_domain_substraction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (tuple21 a e))) (x (tuple21 a e)) (y uni))
  (= (mem (tuple2 (tuple2 a1 e1) b2)
  (Tuple2 (tuple2 a1 e1) b2 (t2tb2949 x) y)
  (domain_substraction b2 (tuple2 a1 e1) (t2tb2943 s) p))
  (and (mem (tuple2 (tuple2 a1 e1) b2)
  (Tuple2 (tuple2 a1 e1) b2 (t2tb2949 x) y) p) (not (mem44 x s)))))))

;; mem_domain_substraction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (tuple21 (tuple21 b d) (tuple21 e f))))
  (x (tuple21 (tuple21 b d) (tuple21 e f))) (y uni))
  (= (mem (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) b2)
  (Tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) b2 (t2tb2950 x) y)
  (domain_substraction b2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (t2tb2944 s)
  p))
  (and (mem (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) b2)
  (Tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) b2 (t2tb2950 x) y) p)
  (not (mem43 x s)))))))

;; mem_domain_substraction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (tuple21 (tuple21 a c) (tuple21 e f))))
  (x (tuple21 (tuple21 a c) (tuple21 e f))) (y uni))
  (= (mem (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) b2)
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) b2 (t2tb2951 x) y)
  (domain_substraction b2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (t2tb2945 s)
  p))
  (and (mem (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) b2)
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) b2 (t2tb2951 x) y) p)
  (not (mem42 x s)))))))

;; mem_domain_substraction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (set (tuple21 d f)))) (x (set (tuple21 d f)))
  (y uni))
  (= (mem (tuple2 (set1 (tuple2 d1 f1)) b2)
  (Tuple2 (set1 (tuple2 d1 f1)) b2 (t2tb2938 x) y)
  (domain_substraction b2 (set1 (tuple2 d1 f1)) (t2tb2939 s) p))
  (and (mem (tuple2 (set1 (tuple2 d1 f1)) b2)
  (Tuple2 (set1 (tuple2 d1 f1)) b2 (t2tb2938 x) y) p) (not (mem41 x s)))))))

;; mem_domain_substraction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (tuple21 d f))) (x (tuple21 d f)) (y uni))
  (= (mem (tuple2 (tuple2 d1 f1) b2)
  (Tuple2 (tuple2 d1 f1) b2 (t2tb2952 x) y)
  (domain_substraction b2 (tuple2 d1 f1) (t2tb2938 s) p))
  (and (mem (tuple2 (tuple2 d1 f1) b2)
  (Tuple2 (tuple2 d1 f1) b2 (t2tb2952 x) y) p) (not (mem40 x s)))))))

;; mem_domain_substraction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (set (tuple21 b e)))) (x (set (tuple21 b e)))
  (y uni))
  (= (mem (tuple2 (set1 (tuple2 b1 e1)) b2)
  (Tuple2 (set1 (tuple2 b1 e1)) b2 (t2tb2940 x) y)
  (domain_substraction b2 (set1 (tuple2 b1 e1)) (t2tb2941 s) p))
  (and (mem (tuple2 (set1 (tuple2 b1 e1)) b2)
  (Tuple2 (set1 (tuple2 b1 e1)) b2 (t2tb2940 x) y) p) (not (mem39 x s)))))))

;; mem_domain_substraction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (tuple21 b e))) (x (tuple21 b e)) (y uni))
  (= (mem (tuple2 (tuple2 b1 e1) b2)
  (Tuple2 (tuple2 b1 e1) b2 (t2tb2953 x) y)
  (domain_substraction b2 (tuple2 b1 e1) (t2tb2940 s) p))
  (and (mem (tuple2 (tuple2 b1 e1) b2)
  (Tuple2 (tuple2 b1 e1) b2 (t2tb2953 x) y) p) (not (mem38 x s)))))))

;; mem_domain_substraction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set f)) (x f) (y uni))
  (= (mem (tuple2 f1 b2) (Tuple2 f1 b2 (t2tb2954 x) y)
  (domain_substraction b2 f1 (t2tb2946 s) p))
  (and (mem (tuple2 f1 b2) (Tuple2 f1 b2 (t2tb2954 x) y) p)
  (not (mem37 x s)))))))

;; mem_domain_substraction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set e)) (x e) (y uni))
  (= (mem (tuple2 e1 b2) (Tuple2 e1 b2 (t2tb2955 x) y)
  (domain_substraction b2 e1 (t2tb2947 s) p))
  (and (mem (tuple2 e1 b2) (Tuple2 e1 b2 (t2tb2955 x) y) p)
  (not (mem36 x s)))))))

;; mem_domain_substraction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (tuple21 (tuple21 a c) (tuple21 b d))))
  (x (tuple21 (tuple21 a c) (tuple21 b d))) (y uni))
  (= (mem (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) b2)
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) b2 (t2tb691 x) y)
  (domain_substraction b2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb686 s)
  p))
  (and (mem (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) b2)
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) b2 (t2tb691 x) y) p)
  (not (mem24 x s)))))))

;; mem_domain_substraction
  (assert
  (forall ((p (set (tuple21 (tuple21 b d) (tuple21 e f)))) (s (set (tuple21 b
  d))) (x (tuple21 b d)) (y (tuple21 e f)))
  (= (mem43
  (tb2t2950 (Tuple2 (tuple2 b1 d1) (tuple2 e1 f1) (t2tb692 x) (t2tb3315 y)))
  (tb2t2944
  (domain_substraction (tuple2 e1 f1) (tuple2 b1 d1) (t2tb687 s)
  (t2tb2944 p))))
  (and (mem43
  (tb2t2950 (Tuple2 (tuple2 b1 d1) (tuple2 e1 f1) (t2tb692 x) (t2tb3315 y)))
  p) (not (mem (tuple2 b1 d1) (t2tb692 x) (t2tb687 s)))))))

;; mem_domain_substraction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (set (tuple21 c d)))) (x (set (tuple21 c d)))
  (y uni))
  (= (mem (tuple2 (set1 (tuple2 c1 d1)) b2)
  (Tuple2 (set1 (tuple2 c1 d1)) b2 (t2tb689 x) y)
  (domain_substraction b2 (set1 (tuple2 c1 d1)) (t2tb688 s) p))
  (and (mem (tuple2 (set1 (tuple2 c1 d1)) b2)
  (Tuple2 (set1 (tuple2 c1 d1)) b2 (t2tb689 x) y) p) (not (mem22 x s)))))))

;; mem_domain_substraction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (tuple21 c d))) (x (tuple21 c d)) (y uni))
  (= (mem (tuple2 (tuple2 c1 d1) b2) (Tuple2 (tuple2 c1 d1) b2 (t2tb693 x) y)
  (domain_substraction b2 (tuple2 c1 d1) (t2tb689 s) p))
  (and (mem (tuple2 (tuple2 c1 d1) b2)
  (Tuple2 (tuple2 c1 d1) b2 (t2tb693 x) y) p) (not (mem21 x s)))))))

;; mem_domain_substraction
  (assert
  (forall ((p (set (tuple21 d f))) (s (set d)) (x d) (y f))
  (= (mem40 (tb2t2952 (Tuple2 d1 f1 (t2tb694 x) (t2tb2954 y)))
  (tb2t2938 (domain_substraction f1 d1 (t2tb690 s) (t2tb2938 p))))
  (and (mem40 (tb2t2952 (Tuple2 d1 f1 (t2tb694 x) (t2tb2954 y))) p)
  (not (mem20 x s))))))

;; mem_domain_substraction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set d)) (x d) (y uni))
  (= (mem (tuple2 d1 b2) (Tuple2 d1 b2 (t2tb694 x) y)
  (domain_substraction b2 d1 (t2tb690 s) p))
  (and (mem (tuple2 d1 b2) (Tuple2 d1 b2 (t2tb694 x) y) p) (not (mem20 x s)))))))

;; mem_domain_substraction
  (assert
  (forall ((p (set (tuple21 (tuple21 a c) (tuple21 e f)))) (s (set (tuple21 a
  c))) (x (tuple21 a c)) (y (tuple21 e f)))
  (= (mem42
  (tb2t2951 (Tuple2 (tuple2 a1 c1) (tuple2 e1 f1) (t2tb133 x) (t2tb3315 y)))
  (tb2t2945
  (domain_substraction (tuple2 e1 f1) (tuple2 a1 c1) (t2tb129 s)
  (t2tb2945 p))))
  (and (mem42
  (tb2t2951 (Tuple2 (tuple2 a1 c1) (tuple2 e1 f1) (t2tb133 x) (t2tb3315 y)))
  p) (not (mem (tuple2 a1 c1) (t2tb133 x) (t2tb129 s)))))))

;; mem_domain_substraction
  (assert
  (forall ((p (set (tuple21 (tuple21 a c) (tuple21 b d)))) (s (set (tuple21 a
  c))) (x (tuple21 a c)) (y (tuple21 b d)))
  (= (mem24
  (tb2t691 (Tuple2 (tuple2 a1 c1) (tuple2 b1 d1) (t2tb133 x) (t2tb692 y)))
  (tb2t686
  (domain_substraction (tuple2 b1 d1) (tuple2 a1 c1) (t2tb129 s) (t2tb686 p))))
  (and (mem24
  (tb2t691 (Tuple2 (tuple2 a1 c1) (tuple2 b1 d1) (t2tb133 x) (t2tb692 y))) p)
  (not (mem (tuple2 a1 c1) (t2tb133 x) (t2tb129 s)))))))

;; mem_domain_substraction
  (assert
  (forall ((p (set (tuple21 c f))) (s (set c)) (x c) (y f))
  (= (mem45 (tb2t2948 (Tuple2 c1 f1 (t2tb135 x) (t2tb2954 y)))
  (tb2t2942 (domain_substraction f1 c1 (t2tb132 s) (t2tb2942 p))))
  (and (mem45 (tb2t2948 (Tuple2 c1 f1 (t2tb135 x) (t2tb2954 y))) p)
  (not (mem7 x s))))))

;; mem_domain_substraction
  (assert
  (forall ((p (set (tuple21 c d))) (s (set c)) (x c) (y d))
  (= (mem21 (tb2t693 (Tuple2 c1 d1 (t2tb135 x) (t2tb694 y)))
  (tb2t689 (domain_substraction d1 c1 (t2tb132 s) (t2tb689 p))))
  (and (mem21 (tb2t693 (Tuple2 c1 d1 (t2tb135 x) (t2tb694 y))) p)
  (not (mem7 x s))))))

;; mem_domain_substraction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set c)) (x c) (y uni))
  (= (mem (tuple2 c1 b2) (Tuple2 c1 b2 (t2tb135 x) y)
  (domain_substraction b2 c1 (t2tb132 s) p))
  (and (mem (tuple2 c1 b2) (Tuple2 c1 b2 (t2tb135 x) y) p) (not (mem7 x s)))))))

;; mem_domain_substraction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (set (tuple21 a b)))) (x (set (tuple21 a b)))
  (y uni))
  (= (mem (tuple2 (set1 (tuple2 a1 b1)) b2)
  (Tuple2 (set1 (tuple2 a1 b1)) b2 (t2tb11 x) y)
  (domain_substraction b2 (set1 (tuple2 a1 b1)) (t2tb10 s) p))
  (and (mem (tuple2 (set1 (tuple2 a1 b1)) b2)
  (Tuple2 (set1 (tuple2 a1 b1)) b2 (t2tb11 x) y) p) (not (mem4 x s)))))))

;; mem_domain_substraction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (tuple21 a b))) (x (tuple21 a b)) (y uni))
  (= (mem (tuple2 (tuple2 a1 b1) b2) (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) y)
  (domain_substraction b2 (tuple2 a1 b1) (t2tb11 s) p))
  (and (mem (tuple2 (tuple2 a1 b1) b2)
  (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) y) p) (not (mem3 x s)))))))

;; mem_domain_substraction
  (assert
  (forall ((p (set (tuple21 b e))) (s (set b)) (x b) (y e))
  (= (mem38 (tb2t2953 (Tuple2 b1 e1 (t2tb14 x) (t2tb2955 y)))
  (tb2t2940 (domain_substraction e1 b1 (t2tb12 s) (t2tb2940 p))))
  (and (mem38 (tb2t2953 (Tuple2 b1 e1 (t2tb14 x) (t2tb2955 y))) p)
  (not (mem2 x s))))))

;; mem_domain_substraction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set b)) (x b) (y uni))
  (= (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) y)
  (domain_substraction b2 b1 (t2tb12 s) p))
  (and (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) y) p) (not (mem2 x s)))))))

;; mem_domain_substraction
  (assert
  (forall ((p (set (tuple21 a e))) (s (set a)) (x a) (y e))
  (= (mem44 (tb2t2949 (Tuple2 a1 e1 (t2tb2 x) (t2tb2955 y)))
  (tb2t2943 (domain_substraction e1 a1 (t2tb1 s) (t2tb2943 p))))
  (and (mem44 (tb2t2949 (Tuple2 a1 e1 (t2tb2 x) (t2tb2955 y))) p)
  (not (mem1 x s))))))

;; mem_domain_substraction
  (assert
  (forall ((p (set (tuple21 a b))) (s (set a)) (x a) (y b))
  (= (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y)))
  (tb2t11 (domain_substraction b1 a1 (t2tb1 s) (t2tb11 p))))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y))) p)
  (not (mem1 x s))))))

;; mem_domain_substraction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set a)) (x a) (y uni))
  (= (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) y)
  (domain_substraction b2 a1 (t2tb1 s) p))
  (and (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) y) p) (not (mem1 x s)))))))

;; mem_domain_substraction
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((p uni) (s uni) (x uni) (y uni))
  (= (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) (domain_substraction b2 a2 s p))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) p) (not (mem a2 x s)))))))

(declare-fun range_substraction (ty ty uni uni) uni)

;; range_substraction_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (tuple2 a2 b2))
  (range_substraction b2 a2 x x1)))))

;; mem_range_substraction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (tuple21 c f))) (x uni) (y (tuple21 c f)))
  (= (mem (tuple2 a2 (tuple2 c1 f1))
  (Tuple2 a2 (tuple2 c1 f1) x (t2tb2948 y))
  (range_substraction (tuple2 c1 f1) a2 p (t2tb2942 t)))
  (and (mem (tuple2 a2 (tuple2 c1 f1))
  (Tuple2 a2 (tuple2 c1 f1) x (t2tb2948 y)) p) (not (mem45 y t)))))))

;; mem_range_substraction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (tuple21 a e))) (x uni) (y (tuple21 a e)))
  (= (mem (tuple2 a2 (tuple2 a1 e1))
  (Tuple2 a2 (tuple2 a1 e1) x (t2tb2949 y))
  (range_substraction (tuple2 a1 e1) a2 p (t2tb2943 t)))
  (and (mem (tuple2 a2 (tuple2 a1 e1))
  (Tuple2 a2 (tuple2 a1 e1) x (t2tb2949 y)) p) (not (mem44 y t)))))))

;; mem_range_substraction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (tuple21 (tuple21 b d) (tuple21 e f)))) (x uni)
  (y (tuple21 (tuple21 b d) (tuple21 e f))))
  (= (mem (tuple2 a2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)))
  (Tuple2 a2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) x (t2tb2950 y))
  (range_substraction (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) a2 p
  (t2tb2944 t)))
  (and (mem (tuple2 a2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)))
  (Tuple2 a2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) x (t2tb2950 y)) p)
  (not (mem43 y t)))))))

;; mem_range_substraction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (tuple21 (tuple21 a c) (tuple21 e f)))) (x uni)
  (y (tuple21 (tuple21 a c) (tuple21 e f))))
  (= (mem (tuple2 a2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)))
  (Tuple2 a2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) x (t2tb2951 y))
  (range_substraction (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) a2 p
  (t2tb2945 t)))
  (and (mem (tuple2 a2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)))
  (Tuple2 a2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) x (t2tb2951 y)) p)
  (not (mem42 y t)))))))

;; mem_range_substraction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (set (tuple21 d f)))) (x uni) (y (set (tuple21 d
  f))))
  (= (mem (tuple2 a2 (set1 (tuple2 d1 f1)))
  (Tuple2 a2 (set1 (tuple2 d1 f1)) x (t2tb2938 y))
  (range_substraction (set1 (tuple2 d1 f1)) a2 p (t2tb2939 t)))
  (and (mem (tuple2 a2 (set1 (tuple2 d1 f1)))
  (Tuple2 a2 (set1 (tuple2 d1 f1)) x (t2tb2938 y)) p) (not (mem41 y t)))))))

;; mem_range_substraction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (tuple21 d f))) (x uni) (y (tuple21 d f)))
  (= (mem (tuple2 a2 (tuple2 d1 f1))
  (Tuple2 a2 (tuple2 d1 f1) x (t2tb2952 y))
  (range_substraction (tuple2 d1 f1) a2 p (t2tb2938 t)))
  (and (mem (tuple2 a2 (tuple2 d1 f1))
  (Tuple2 a2 (tuple2 d1 f1) x (t2tb2952 y)) p) (not (mem40 y t)))))))

;; mem_range_substraction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (set (tuple21 b e)))) (x uni) (y (set (tuple21 b
  e))))
  (= (mem (tuple2 a2 (set1 (tuple2 b1 e1)))
  (Tuple2 a2 (set1 (tuple2 b1 e1)) x (t2tb2940 y))
  (range_substraction (set1 (tuple2 b1 e1)) a2 p (t2tb2941 t)))
  (and (mem (tuple2 a2 (set1 (tuple2 b1 e1)))
  (Tuple2 a2 (set1 (tuple2 b1 e1)) x (t2tb2940 y)) p) (not (mem39 y t)))))))

;; mem_range_substraction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (tuple21 b e))) (x uni) (y (tuple21 b e)))
  (= (mem (tuple2 a2 (tuple2 b1 e1))
  (Tuple2 a2 (tuple2 b1 e1) x (t2tb2953 y))
  (range_substraction (tuple2 b1 e1) a2 p (t2tb2940 t)))
  (and (mem (tuple2 a2 (tuple2 b1 e1))
  (Tuple2 a2 (tuple2 b1 e1) x (t2tb2953 y)) p) (not (mem38 y t)))))))

;; mem_range_substraction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set f)) (x uni) (y f))
  (= (mem (tuple2 a2 f1) (Tuple2 a2 f1 x (t2tb2954 y))
  (range_substraction f1 a2 p (t2tb2946 t)))
  (and (mem (tuple2 a2 f1) (Tuple2 a2 f1 x (t2tb2954 y)) p)
  (not (mem37 y t)))))))

;; mem_range_substraction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set e)) (x uni) (y e))
  (= (mem (tuple2 a2 e1) (Tuple2 a2 e1 x (t2tb2955 y))
  (range_substraction e1 a2 p (t2tb2947 t)))
  (and (mem (tuple2 a2 e1) (Tuple2 a2 e1 x (t2tb2955 y)) p)
  (not (mem36 y t)))))))

;; mem_range_substraction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (tuple21 (tuple21 a c) (tuple21 b d)))) (x uni)
  (y (tuple21 (tuple21 a c) (tuple21 b d))))
  (= (mem (tuple2 a2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
  (Tuple2 a2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) x (t2tb691 y))
  (range_substraction (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) a2 p
  (t2tb686 t)))
  (and (mem (tuple2 a2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
  (Tuple2 a2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) x (t2tb691 y)) p)
  (not (mem24 y t)))))))

;; mem_range_substraction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (set (tuple21 c d)))) (x uni) (y (set (tuple21 c
  d))))
  (= (mem (tuple2 a2 (set1 (tuple2 c1 d1)))
  (Tuple2 a2 (set1 (tuple2 c1 d1)) x (t2tb689 y))
  (range_substraction (set1 (tuple2 c1 d1)) a2 p (t2tb688 t)))
  (and (mem (tuple2 a2 (set1 (tuple2 c1 d1)))
  (Tuple2 a2 (set1 (tuple2 c1 d1)) x (t2tb689 y)) p) (not (mem22 y t)))))))

;; mem_range_substraction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (tuple21 c d))) (x uni) (y (tuple21 c d)))
  (= (mem (tuple2 a2 (tuple2 c1 d1)) (Tuple2 a2 (tuple2 c1 d1) x (t2tb693 y))
  (range_substraction (tuple2 c1 d1) a2 p (t2tb689 t)))
  (and (mem (tuple2 a2 (tuple2 c1 d1))
  (Tuple2 a2 (tuple2 c1 d1) x (t2tb693 y)) p) (not (mem21 y t)))))))

;; mem_range_substraction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set d)) (x uni) (y d))
  (= (mem (tuple2 a2 d1) (Tuple2 a2 d1 x (t2tb694 y))
  (range_substraction d1 a2 p (t2tb690 t)))
  (and (mem (tuple2 a2 d1) (Tuple2 a2 d1 x (t2tb694 y)) p) (not (mem20 y t)))))))

;; mem_range_substraction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set c)) (x uni) (y c))
  (= (mem (tuple2 a2 c1) (Tuple2 a2 c1 x (t2tb135 y))
  (range_substraction c1 a2 p (t2tb132 t)))
  (and (mem (tuple2 a2 c1) (Tuple2 a2 c1 x (t2tb135 y)) p) (not (mem7 y t)))))))

;; mem_range_substraction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (set (tuple21 a b)))) (x uni) (y (set (tuple21 a
  b))))
  (= (mem (tuple2 a2 (set1 (tuple2 a1 b1)))
  (Tuple2 a2 (set1 (tuple2 a1 b1)) x (t2tb11 y))
  (range_substraction (set1 (tuple2 a1 b1)) a2 p (t2tb10 t)))
  (and (mem (tuple2 a2 (set1 (tuple2 a1 b1)))
  (Tuple2 a2 (set1 (tuple2 a1 b1)) x (t2tb11 y)) p) (not (mem4 y t)))))))

;; mem_range_substraction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (tuple21 a b))) (x uni) (y (tuple21 a b)))
  (= (mem (tuple2 a2 (tuple2 a1 b1)) (Tuple2 a2 (tuple2 a1 b1) x (t2tb13 y))
  (range_substraction (tuple2 a1 b1) a2 p (t2tb11 t)))
  (and (mem (tuple2 a2 (tuple2 a1 b1))
  (Tuple2 a2 (tuple2 a1 b1) x (t2tb13 y)) p) (not (mem3 y t)))))))

;; mem_range_substraction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set b)) (x uni) (y b))
  (= (mem (tuple2 a2 b1) (Tuple2 a2 b1 x (t2tb14 y))
  (range_substraction b1 a2 p (t2tb12 t)))
  (and (mem (tuple2 a2 b1) (Tuple2 a2 b1 x (t2tb14 y)) p) (not (mem2 y t)))))))

;; mem_range_substraction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set a)) (x uni) (y a))
  (= (mem (tuple2 a2 a1) (Tuple2 a2 a1 x (t2tb2 y))
  (range_substraction a1 a2 p (t2tb1 t)))
  (and (mem (tuple2 a2 a1) (Tuple2 a2 a1 x (t2tb2 y)) p) (not (mem1 y t)))))))

;; mem_range_substraction
  (assert
  (forall ((p (set (tuple21 (tuple21 b d) (tuple21 e f)))) (t (set (tuple21 e
  f))) (x (tuple21 b d)) (y (tuple21 e f)))
  (= (mem43
  (tb2t2950 (Tuple2 (tuple2 b1 d1) (tuple2 e1 f1) (t2tb692 x) (t2tb3315 y)))
  (tb2t2944
  (range_substraction (tuple2 e1 f1) (tuple2 b1 d1) (t2tb2944 p)
  (t2tb3314 t))))
  (and (mem43
  (tb2t2950 (Tuple2 (tuple2 b1 d1) (tuple2 e1 f1) (t2tb692 x) (t2tb3315 y)))
  p) (not (mem (tuple2 e1 f1) (t2tb3315 y) (t2tb3314 t)))))))

;; mem_range_substraction
  (assert
  (forall ((p (set (tuple21 d f))) (t (set f)) (x d) (y f))
  (= (mem40 (tb2t2952 (Tuple2 d1 f1 (t2tb694 x) (t2tb2954 y)))
  (tb2t2938 (range_substraction f1 d1 (t2tb2938 p) (t2tb2946 t))))
  (and (mem40 (tb2t2952 (Tuple2 d1 f1 (t2tb694 x) (t2tb2954 y))) p)
  (not (mem37 y t))))))

;; mem_range_substraction
  (assert
  (forall ((p (set (tuple21 (tuple21 a c) (tuple21 e f)))) (t (set (tuple21 e
  f))) (x (tuple21 a c)) (y (tuple21 e f)))
  (= (mem42
  (tb2t2951 (Tuple2 (tuple2 a1 c1) (tuple2 e1 f1) (t2tb133 x) (t2tb3315 y)))
  (tb2t2945
  (range_substraction (tuple2 e1 f1) (tuple2 a1 c1) (t2tb2945 p)
  (t2tb3314 t))))
  (and (mem42
  (tb2t2951 (Tuple2 (tuple2 a1 c1) (tuple2 e1 f1) (t2tb133 x) (t2tb3315 y)))
  p) (not (mem (tuple2 e1 f1) (t2tb3315 y) (t2tb3314 t)))))))

;; mem_range_substraction
  (assert
  (forall ((p (set (tuple21 (tuple21 a c) (tuple21 b d)))) (t (set (tuple21 b
  d))) (x (tuple21 a c)) (y (tuple21 b d)))
  (= (mem24
  (tb2t691 (Tuple2 (tuple2 a1 c1) (tuple2 b1 d1) (t2tb133 x) (t2tb692 y)))
  (tb2t686
  (range_substraction (tuple2 b1 d1) (tuple2 a1 c1) (t2tb686 p) (t2tb687 t))))
  (and (mem24
  (tb2t691 (Tuple2 (tuple2 a1 c1) (tuple2 b1 d1) (t2tb133 x) (t2tb692 y))) p)
  (not (mem (tuple2 b1 d1) (t2tb692 y) (t2tb687 t)))))))

;; mem_range_substraction
  (assert
  (forall ((p (set (tuple21 c f))) (t (set f)) (x c) (y f))
  (= (mem45 (tb2t2948 (Tuple2 c1 f1 (t2tb135 x) (t2tb2954 y)))
  (tb2t2942 (range_substraction f1 c1 (t2tb2942 p) (t2tb2946 t))))
  (and (mem45 (tb2t2948 (Tuple2 c1 f1 (t2tb135 x) (t2tb2954 y))) p)
  (not (mem37 y t))))))

;; mem_range_substraction
  (assert
  (forall ((p (set (tuple21 c d))) (t (set d)) (x c) (y d))
  (= (mem21 (tb2t693 (Tuple2 c1 d1 (t2tb135 x) (t2tb694 y)))
  (tb2t689 (range_substraction d1 c1 (t2tb689 p) (t2tb690 t))))
  (and (mem21 (tb2t693 (Tuple2 c1 d1 (t2tb135 x) (t2tb694 y))) p)
  (not (mem20 y t))))))

;; mem_range_substraction
  (assert
  (forall ((p (set (tuple21 b e))) (t (set e)) (x b) (y e))
  (= (mem38 (tb2t2953 (Tuple2 b1 e1 (t2tb14 x) (t2tb2955 y)))
  (tb2t2940 (range_substraction e1 b1 (t2tb2940 p) (t2tb2947 t))))
  (and (mem38 (tb2t2953 (Tuple2 b1 e1 (t2tb14 x) (t2tb2955 y))) p)
  (not (mem36 y t))))))

;; mem_range_substraction
  (assert
  (forall ((p (set (tuple21 a e))) (t (set e)) (x a) (y e))
  (= (mem44 (tb2t2949 (Tuple2 a1 e1 (t2tb2 x) (t2tb2955 y)))
  (tb2t2943 (range_substraction e1 a1 (t2tb2943 p) (t2tb2947 t))))
  (and (mem44 (tb2t2949 (Tuple2 a1 e1 (t2tb2 x) (t2tb2955 y))) p)
  (not (mem36 y t))))))

;; mem_range_substraction
  (assert
  (forall ((p (set (tuple21 a b))) (t (set b)) (x a) (y b))
  (= (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y)))
  (tb2t11 (range_substraction b1 a1 (t2tb11 p) (t2tb12 t))))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y))) p)
  (not (mem2 y t))))))

;; mem_range_substraction
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((p uni) (t uni) (x uni) (y uni))
  (= (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) (range_substraction b2 a2 p t))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) p) (not (mem b2 y t)))))))

(declare-fun image (ty ty uni uni) uni)

;; image_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 b2) (image b2 a2 x x1)))))

;; mem_image
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (w uni) (x (tuple21 c f)))
  (and
  (=> (mem45 x (tb2t2942 (image (tuple2 c1 f1) a2 p w)))
  (exists ((a3 uni))
  (and (sort a2 a3)
  (and (mem a2 a3 w) (mem (tuple2 a2 (tuple2 c1 f1))
  (Tuple2 a2 (tuple2 c1 f1) a3 (t2tb2948 x)) p)))))
  (=>
  (exists ((a3 uni))
  (and (mem a2 a3 w) (mem (tuple2 a2 (tuple2 c1 f1))
  (Tuple2 a2 (tuple2 c1 f1) a3 (t2tb2948 x)) p))) (mem45 x
  (tb2t2942 (image (tuple2 c1 f1) a2 p w))))))))

;; mem_image
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (w uni) (x (tuple21 a e)))
  (and
  (=> (mem44 x (tb2t2943 (image (tuple2 a1 e1) a2 p w)))
  (exists ((a3 uni))
  (and (sort a2 a3)
  (and (mem a2 a3 w) (mem (tuple2 a2 (tuple2 a1 e1))
  (Tuple2 a2 (tuple2 a1 e1) a3 (t2tb2949 x)) p)))))
  (=>
  (exists ((a3 uni))
  (and (mem a2 a3 w) (mem (tuple2 a2 (tuple2 a1 e1))
  (Tuple2 a2 (tuple2 a1 e1) a3 (t2tb2949 x)) p))) (mem44 x
  (tb2t2943 (image (tuple2 a1 e1) a2 p w))))))))

;; mem_image
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (w uni) (x (tuple21 (tuple21 b d) (tuple21 e f))))
  (and
  (=> (mem43 x
  (tb2t2944 (image (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) a2 p w)))
  (exists ((a3 uni))
  (and (sort a2 a3)
  (and (mem a2 a3 w) (mem (tuple2 a2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)))
  (Tuple2 a2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) a3 (t2tb2950 x)) p)))))
  (=>
  (exists ((a3 uni))
  (and (mem a2 a3 w) (mem (tuple2 a2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)))
  (Tuple2 a2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) a3 (t2tb2950 x)) p)))
  (mem43 x (tb2t2944 (image (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) a2 p w))))))))

;; mem_image
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (w uni) (x (tuple21 (tuple21 a c) (tuple21 e f))))
  (and
  (=> (mem42 x
  (tb2t2945 (image (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) a2 p w)))
  (exists ((a3 uni))
  (and (sort a2 a3)
  (and (mem a2 a3 w) (mem (tuple2 a2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)))
  (Tuple2 a2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) a3 (t2tb2951 x)) p)))))
  (=>
  (exists ((a3 uni))
  (and (mem a2 a3 w) (mem (tuple2 a2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)))
  (Tuple2 a2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) a3 (t2tb2951 x)) p)))
  (mem42 x (tb2t2945 (image (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) a2 p w))))))))

;; mem_image
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (w uni) (x (set (tuple21 d f))))
  (and
  (=> (mem41 x (tb2t2939 (image (set1 (tuple2 d1 f1)) a2 p w)))
  (exists ((a3 uni))
  (and (sort a2 a3)
  (and (mem a2 a3 w) (mem (tuple2 a2 (set1 (tuple2 d1 f1)))
  (Tuple2 a2 (set1 (tuple2 d1 f1)) a3 (t2tb2938 x)) p)))))
  (=>
  (exists ((a3 uni))
  (and (mem a2 a3 w) (mem (tuple2 a2 (set1 (tuple2 d1 f1)))
  (Tuple2 a2 (set1 (tuple2 d1 f1)) a3 (t2tb2938 x)) p))) (mem41 x
  (tb2t2939 (image (set1 (tuple2 d1 f1)) a2 p w))))))))

;; mem_image
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (w uni) (x (tuple21 d f)))
  (and
  (=> (mem40 x (tb2t2938 (image (tuple2 d1 f1) a2 p w)))
  (exists ((a3 uni))
  (and (sort a2 a3)
  (and (mem a2 a3 w) (mem (tuple2 a2 (tuple2 d1 f1))
  (Tuple2 a2 (tuple2 d1 f1) a3 (t2tb2952 x)) p)))))
  (=>
  (exists ((a3 uni))
  (and (mem a2 a3 w) (mem (tuple2 a2 (tuple2 d1 f1))
  (Tuple2 a2 (tuple2 d1 f1) a3 (t2tb2952 x)) p))) (mem40 x
  (tb2t2938 (image (tuple2 d1 f1) a2 p w))))))))

;; mem_image
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (w uni) (x (set (tuple21 b e))))
  (and
  (=> (mem39 x (tb2t2941 (image (set1 (tuple2 b1 e1)) a2 p w)))
  (exists ((a3 uni))
  (and (sort a2 a3)
  (and (mem a2 a3 w) (mem (tuple2 a2 (set1 (tuple2 b1 e1)))
  (Tuple2 a2 (set1 (tuple2 b1 e1)) a3 (t2tb2940 x)) p)))))
  (=>
  (exists ((a3 uni))
  (and (mem a2 a3 w) (mem (tuple2 a2 (set1 (tuple2 b1 e1)))
  (Tuple2 a2 (set1 (tuple2 b1 e1)) a3 (t2tb2940 x)) p))) (mem39 x
  (tb2t2941 (image (set1 (tuple2 b1 e1)) a2 p w))))))))

;; mem_image
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (w uni) (x (tuple21 b e)))
  (and
  (=> (mem38 x (tb2t2940 (image (tuple2 b1 e1) a2 p w)))
  (exists ((a3 uni))
  (and (sort a2 a3)
  (and (mem a2 a3 w) (mem (tuple2 a2 (tuple2 b1 e1))
  (Tuple2 a2 (tuple2 b1 e1) a3 (t2tb2953 x)) p)))))
  (=>
  (exists ((a3 uni))
  (and (mem a2 a3 w) (mem (tuple2 a2 (tuple2 b1 e1))
  (Tuple2 a2 (tuple2 b1 e1) a3 (t2tb2953 x)) p))) (mem38 x
  (tb2t2940 (image (tuple2 b1 e1) a2 p w))))))))

;; mem_image
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (w uni) (x f))
  (and
  (=> (mem37 x (tb2t2946 (image f1 a2 p w)))
  (exists ((a3 uni))
  (and (sort a2 a3)
  (and (mem a2 a3 w) (mem (tuple2 a2 f1) (Tuple2 a2 f1 a3 (t2tb2954 x)) p)))))
  (=>
  (exists ((a3 uni))
  (and (mem a2 a3 w) (mem (tuple2 a2 f1) (Tuple2 a2 f1 a3 (t2tb2954 x)) p)))
  (mem37 x (tb2t2946 (image f1 a2 p w))))))))

;; mem_image
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (w uni) (x e))
  (and
  (=> (mem36 x (tb2t2947 (image e1 a2 p w)))
  (exists ((a3 uni))
  (and (sort a2 a3)
  (and (mem a2 a3 w) (mem (tuple2 a2 e1) (Tuple2 a2 e1 a3 (t2tb2955 x)) p)))))
  (=>
  (exists ((a3 uni))
  (and (mem a2 a3 w) (mem (tuple2 a2 e1) (Tuple2 a2 e1 a3 (t2tb2955 x)) p)))
  (mem36 x (tb2t2947 (image e1 a2 p w))))))))

;; mem_image
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (w uni) (x (tuple21 (tuple21 a c) (tuple21 b d))))
  (and
  (=> (mem24 x
  (tb2t686 (image (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) a2 p w)))
  (exists ((a3 uni))
  (and (sort a2 a3)
  (and (mem a2 a3 w) (mem (tuple2 a2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
  (Tuple2 a2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) a3 (t2tb691 x)) p)))))
  (=>
  (exists ((a3 uni))
  (and (mem a2 a3 w) (mem (tuple2 a2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
  (Tuple2 a2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) a3 (t2tb691 x)) p)))
  (mem24 x (tb2t686 (image (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) a2 p w))))))))

;; mem_image
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (w uni) (x (set (tuple21 c d))))
  (and
  (=> (mem22 x (tb2t688 (image (set1 (tuple2 c1 d1)) a2 p w)))
  (exists ((a3 uni))
  (and (sort a2 a3)
  (and (mem a2 a3 w) (mem (tuple2 a2 (set1 (tuple2 c1 d1)))
  (Tuple2 a2 (set1 (tuple2 c1 d1)) a3 (t2tb689 x)) p)))))
  (=>
  (exists ((a3 uni))
  (and (mem a2 a3 w) (mem (tuple2 a2 (set1 (tuple2 c1 d1)))
  (Tuple2 a2 (set1 (tuple2 c1 d1)) a3 (t2tb689 x)) p))) (mem22 x
  (tb2t688 (image (set1 (tuple2 c1 d1)) a2 p w))))))))

;; mem_image
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (w uni) (x (tuple21 c d)))
  (and
  (=> (mem21 x (tb2t689 (image (tuple2 c1 d1) a2 p w)))
  (exists ((a3 uni))
  (and (sort a2 a3)
  (and (mem a2 a3 w) (mem (tuple2 a2 (tuple2 c1 d1))
  (Tuple2 a2 (tuple2 c1 d1) a3 (t2tb693 x)) p)))))
  (=>
  (exists ((a3 uni))
  (and (mem a2 a3 w) (mem (tuple2 a2 (tuple2 c1 d1))
  (Tuple2 a2 (tuple2 c1 d1) a3 (t2tb693 x)) p))) (mem21 x
  (tb2t689 (image (tuple2 c1 d1) a2 p w))))))))

;; mem_image
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (w uni) (x d))
  (and
  (=> (mem20 x (tb2t690 (image d1 a2 p w)))
  (exists ((a3 uni))
  (and (sort a2 a3)
  (and (mem a2 a3 w) (mem (tuple2 a2 d1) (Tuple2 a2 d1 a3 (t2tb694 x)) p)))))
  (=>
  (exists ((a3 uni))
  (and (mem a2 a3 w) (mem (tuple2 a2 d1) (Tuple2 a2 d1 a3 (t2tb694 x)) p)))
  (mem20 x (tb2t690 (image d1 a2 p w))))))))

;; mem_image
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (w uni) (x c))
  (and
  (=> (mem7 x (tb2t132 (image c1 a2 p w)))
  (exists ((a3 uni))
  (and (sort a2 a3)
  (and (mem a2 a3 w) (mem (tuple2 a2 c1) (Tuple2 a2 c1 a3 (t2tb135 x)) p)))))
  (=>
  (exists ((a3 uni))
  (and (mem a2 a3 w) (mem (tuple2 a2 c1) (Tuple2 a2 c1 a3 (t2tb135 x)) p)))
  (mem7 x (tb2t132 (image c1 a2 p w))))))))

;; mem_image
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (w uni) (x (set (tuple21 a b))))
  (and
  (=> (mem4 x (tb2t10 (image (set1 (tuple2 a1 b1)) a2 p w)))
  (exists ((a3 uni))
  (and (sort a2 a3)
  (and (mem a2 a3 w) (mem (tuple2 a2 (set1 (tuple2 a1 b1)))
  (Tuple2 a2 (set1 (tuple2 a1 b1)) a3 (t2tb11 x)) p)))))
  (=>
  (exists ((a3 uni))
  (and (mem a2 a3 w) (mem (tuple2 a2 (set1 (tuple2 a1 b1)))
  (Tuple2 a2 (set1 (tuple2 a1 b1)) a3 (t2tb11 x)) p))) (mem4 x
  (tb2t10 (image (set1 (tuple2 a1 b1)) a2 p w))))))))

;; mem_image
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (w uni) (x (tuple21 a b)))
  (and
  (=> (mem3 x (tb2t11 (image (tuple2 a1 b1) a2 p w)))
  (exists ((a3 uni))
  (and (sort a2 a3)
  (and (mem a2 a3 w) (mem (tuple2 a2 (tuple2 a1 b1))
  (Tuple2 a2 (tuple2 a1 b1) a3 (t2tb13 x)) p)))))
  (=>
  (exists ((a3 uni))
  (and (mem a2 a3 w) (mem (tuple2 a2 (tuple2 a1 b1))
  (Tuple2 a2 (tuple2 a1 b1) a3 (t2tb13 x)) p))) (mem3 x
  (tb2t11 (image (tuple2 a1 b1) a2 p w))))))))

;; mem_image
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (w uni) (x b))
  (and
  (=> (mem2 x (tb2t12 (image b1 a2 p w)))
  (exists ((a3 uni))
  (and (sort a2 a3)
  (and (mem a2 a3 w) (mem (tuple2 a2 b1) (Tuple2 a2 b1 a3 (t2tb14 x)) p)))))
  (=>
  (exists ((a3 uni))
  (and (mem a2 a3 w) (mem (tuple2 a2 b1) (Tuple2 a2 b1 a3 (t2tb14 x)) p)))
  (mem2 x (tb2t12 (image b1 a2 p w))))))))

;; mem_image
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (w uni) (x a))
  (and
  (=> (mem1 x (tb2t1 (image a1 a2 p w)))
  (exists ((a3 uni))
  (and (sort a2 a3)
  (and (mem a2 a3 w) (mem (tuple2 a2 a1) (Tuple2 a2 a1 a3 (t2tb2 x)) p)))))
  (=>
  (exists ((a3 uni))
  (and (mem a2 a3 w) (mem (tuple2 a2 a1) (Tuple2 a2 a1 a3 (t2tb2 x)) p)))
  (mem1 x (tb2t1 (image a1 a2 p w))))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 c f) (tuple21 c f)))) (w (set (tuple21 c
  f))) (x (tuple21 c f)))
  (= (mem45 x
  (tb2t2942 (image (tuple2 c1 f1) (tuple2 c1 f1) (t2tb2956 p) (t2tb2942 w))))
  (exists ((a2 (tuple21 c f)))
  (and (mem45 a2 w) (mem (tuple2 (tuple2 c1 f1) (tuple2 c1 f1))
  (Tuple2 (tuple2 c1 f1) (tuple2 c1 f1) (t2tb2948 a2) (t2tb2948 x))
  (t2tb2956 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 c f) (tuple21 a e)))) (w (set (tuple21 c
  f))) (x (tuple21 a e)))
  (= (mem44 x
  (tb2t2943 (image (tuple2 a1 e1) (tuple2 c1 f1) (t2tb2958 p) (t2tb2942 w))))
  (exists ((a2 (tuple21 c f)))
  (and (mem45 a2 w) (mem (tuple2 (tuple2 c1 f1) (tuple2 a1 e1))
  (Tuple2 (tuple2 c1 f1) (tuple2 a1 e1) (t2tb2948 a2) (t2tb2949 x))
  (t2tb2958 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 c f) (tuple21 (tuple21 b d) (tuple21 e
  f))))) (w (set (tuple21 c f))) (x (tuple21 (tuple21 b d) (tuple21 e f))))
  (= (mem43 x
  (tb2t2944
  (image (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (tuple2 c1 f1) (t2tb2960 p)
  (t2tb2942 w))))
  (exists ((a2 (tuple21 c f)))
  (and (mem45 a2 w) (mem
  (tuple2 (tuple2 c1 f1) (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)))
  (Tuple2 (tuple2 c1 f1) (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (t2tb2948 a2)
  (t2tb2950 x)) (t2tb2960 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 c f) (tuple21 (tuple21 a c) (tuple21 e
  f))))) (w (set (tuple21 c f))) (x (tuple21 (tuple21 a c) (tuple21 e f))))
  (= (mem42 x
  (tb2t2945
  (image (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (tuple2 c1 f1) (t2tb2962 p)
  (t2tb2942 w))))
  (exists ((a2 (tuple21 c f)))
  (and (mem45 a2 w) (mem
  (tuple2 (tuple2 c1 f1) (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)))
  (Tuple2 (tuple2 c1 f1) (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (t2tb2948 a2)
  (t2tb2951 x)) (t2tb2962 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 c f) (set (tuple21 d f)))))
  (w (set (tuple21 c f))) (x (set (tuple21 d f))))
  (= (mem41 x
  (tb2t2939
  (image (set1 (tuple2 d1 f1)) (tuple2 c1 f1) (t2tb2964 p) (t2tb2942 w))))
  (exists ((a2 (tuple21 c f)))
  (and (mem45 a2 w) (mem (tuple2 (tuple2 c1 f1) (set1 (tuple2 d1 f1)))
  (Tuple2 (tuple2 c1 f1) (set1 (tuple2 d1 f1)) (t2tb2948 a2) (t2tb2938 x))
  (t2tb2964 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 c f) (tuple21 d f)))) (w (set (tuple21 c
  f))) (x (tuple21 d f)))
  (= (mem40 x
  (tb2t2938 (image (tuple2 d1 f1) (tuple2 c1 f1) (t2tb2966 p) (t2tb2942 w))))
  (exists ((a2 (tuple21 c f)))
  (and (mem45 a2 w) (mem (tuple2 (tuple2 c1 f1) (tuple2 d1 f1))
  (Tuple2 (tuple2 c1 f1) (tuple2 d1 f1) (t2tb2948 a2) (t2tb2952 x))
  (t2tb2966 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 c f) (set (tuple21 b e)))))
  (w (set (tuple21 c f))) (x (set (tuple21 b e))))
  (= (mem39 x
  (tb2t2941
  (image (set1 (tuple2 b1 e1)) (tuple2 c1 f1) (t2tb2968 p) (t2tb2942 w))))
  (exists ((a2 (tuple21 c f)))
  (and (mem45 a2 w) (mem (tuple2 (tuple2 c1 f1) (set1 (tuple2 b1 e1)))
  (Tuple2 (tuple2 c1 f1) (set1 (tuple2 b1 e1)) (t2tb2948 a2) (t2tb2940 x))
  (t2tb2968 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 c f) (tuple21 b e)))) (w (set (tuple21 c
  f))) (x (tuple21 b e)))
  (= (mem38 x
  (tb2t2940 (image (tuple2 b1 e1) (tuple2 c1 f1) (t2tb2970 p) (t2tb2942 w))))
  (exists ((a2 (tuple21 c f)))
  (and (mem45 a2 w) (mem (tuple2 (tuple2 c1 f1) (tuple2 b1 e1))
  (Tuple2 (tuple2 c1 f1) (tuple2 b1 e1) (t2tb2948 a2) (t2tb2953 x))
  (t2tb2970 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 c f) f))) (w (set (tuple21 c f))) (x f))
  (= (mem37 x (tb2t2946 (image f1 (tuple2 c1 f1) (t2tb2972 p) (t2tb2942 w))))
  (exists ((a2 (tuple21 c f)))
  (and (mem45 a2 w) (mem (tuple2 (tuple2 c1 f1) f1)
  (Tuple2 (tuple2 c1 f1) f1 (t2tb2948 a2) (t2tb2954 x)) (t2tb2972 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 c f) e))) (w (set (tuple21 c f))) (x e))
  (= (mem36 x (tb2t2947 (image e1 (tuple2 c1 f1) (t2tb2974 p) (t2tb2942 w))))
  (exists ((a2 (tuple21 c f)))
  (and (mem45 a2 w) (mem (tuple2 (tuple2 c1 f1) e1)
  (Tuple2 (tuple2 c1 f1) e1 (t2tb2948 a2) (t2tb2955 x)) (t2tb2974 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 c f) (tuple21 (tuple21 a c) (tuple21 b
  d))))) (w (set (tuple21 c f))) (x (tuple21 (tuple21 a c) (tuple21 b d))))
  (= (mem24 x
  (tb2t686
  (image (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 c1 f1) (t2tb2976 p)
  (t2tb2942 w))))
  (exists ((a2 (tuple21 c f)))
  (and (mem45 a2 w) (mem
  (tuple2 (tuple2 c1 f1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
  (Tuple2 (tuple2 c1 f1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb2948 a2)
  (t2tb691 x)) (t2tb2976 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 c f) (set (tuple21 c d)))))
  (w (set (tuple21 c f))) (x (set (tuple21 c d))))
  (= (mem22 x
  (tb2t688
  (image (set1 (tuple2 c1 d1)) (tuple2 c1 f1) (t2tb2978 p) (t2tb2942 w))))
  (exists ((a2 (tuple21 c f)))
  (and (mem45 a2 w) (mem (tuple2 (tuple2 c1 f1) (set1 (tuple2 c1 d1)))
  (Tuple2 (tuple2 c1 f1) (set1 (tuple2 c1 d1)) (t2tb2948 a2) (t2tb689 x))
  (t2tb2978 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 c f) (tuple21 c d)))) (w (set (tuple21 c
  f))) (x (tuple21 c d)))
  (= (mem21 x
  (tb2t689 (image (tuple2 c1 d1) (tuple2 c1 f1) (t2tb2980 p) (t2tb2942 w))))
  (exists ((a2 (tuple21 c f)))
  (and (mem45 a2 w) (mem (tuple2 (tuple2 c1 f1) (tuple2 c1 d1))
  (Tuple2 (tuple2 c1 f1) (tuple2 c1 d1) (t2tb2948 a2) (t2tb693 x))
  (t2tb2980 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 c f) d))) (w (set (tuple21 c f))) (x d))
  (= (mem20 x (tb2t690 (image d1 (tuple2 c1 f1) (t2tb2982 p) (t2tb2942 w))))
  (exists ((a2 (tuple21 c f)))
  (and (mem45 a2 w) (mem (tuple2 (tuple2 c1 f1) d1)
  (Tuple2 (tuple2 c1 f1) d1 (t2tb2948 a2) (t2tb694 x)) (t2tb2982 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 c f) c))) (w (set (tuple21 c f))) (x c))
  (= (mem7 x (tb2t132 (image c1 (tuple2 c1 f1) (t2tb2984 p) (t2tb2942 w))))
  (exists ((a2 (tuple21 c f)))
  (and (mem45 a2 w) (mem (tuple2 (tuple2 c1 f1) c1)
  (Tuple2 (tuple2 c1 f1) c1 (t2tb2948 a2) (t2tb135 x)) (t2tb2984 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 c f) (set (tuple21 a b)))))
  (w (set (tuple21 c f))) (x (set (tuple21 a b))))
  (= (mem4 x
  (tb2t10
  (image (set1 (tuple2 a1 b1)) (tuple2 c1 f1) (t2tb2986 p) (t2tb2942 w))))
  (exists ((a2 (tuple21 c f)))
  (and (mem45 a2 w) (mem (tuple2 (tuple2 c1 f1) (set1 (tuple2 a1 b1)))
  (Tuple2 (tuple2 c1 f1) (set1 (tuple2 a1 b1)) (t2tb2948 a2) (t2tb11 x))
  (t2tb2986 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 c f) (tuple21 a b)))) (w (set (tuple21 c
  f))) (x (tuple21 a b)))
  (= (mem3 x
  (tb2t11 (image (tuple2 a1 b1) (tuple2 c1 f1) (t2tb2988 p) (t2tb2942 w))))
  (exists ((a2 (tuple21 c f)))
  (and (mem45 a2 w) (mem (tuple2 (tuple2 c1 f1) (tuple2 a1 b1))
  (Tuple2 (tuple2 c1 f1) (tuple2 a1 b1) (t2tb2948 a2) (t2tb13 x))
  (t2tb2988 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 c f) b))) (w (set (tuple21 c f))) (x b))
  (= (mem2 x (tb2t12 (image b1 (tuple2 c1 f1) (t2tb2990 p) (t2tb2942 w))))
  (exists ((a2 (tuple21 c f)))
  (and (mem45 a2 w) (mem (tuple2 (tuple2 c1 f1) b1)
  (Tuple2 (tuple2 c1 f1) b1 (t2tb2948 a2) (t2tb14 x)) (t2tb2990 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 c f) a))) (w (set (tuple21 c f))) (x a))
  (= (mem1 x (tb2t1 (image a1 (tuple2 c1 f1) (t2tb2992 p) (t2tb2942 w))))
  (exists ((a2 (tuple21 c f)))
  (and (mem45 a2 w) (mem (tuple2 (tuple2 c1 f1) a1)
  (Tuple2 (tuple2 c1 f1) a1 (t2tb2948 a2) (t2tb2 x)) (t2tb2992 p)))))))

;; mem_image
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (w (set (tuple21 c f))) (x uni))
  (= (mem b2 x (image b2 (tuple2 c1 f1) p (t2tb2942 w)))
  (exists ((a2 (tuple21 c f)))
  (and (mem45 a2 w) (mem (tuple2 (tuple2 c1 f1) b2)
  (Tuple2 (tuple2 c1 f1) b2 (t2tb2948 a2) x) p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a e) (tuple21 c f)))) (w (set (tuple21 a
  e))) (x (tuple21 c f)))
  (= (mem45 x
  (tb2t2942 (image (tuple2 c1 f1) (tuple2 a1 e1) (t2tb2994 p) (t2tb2943 w))))
  (exists ((a2 (tuple21 a e)))
  (and (mem44 a2 w) (mem (tuple2 (tuple2 a1 e1) (tuple2 c1 f1))
  (Tuple2 (tuple2 a1 e1) (tuple2 c1 f1) (t2tb2949 a2) (t2tb2948 x))
  (t2tb2994 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a e) (tuple21 a e)))) (w (set (tuple21 a
  e))) (x (tuple21 a e)))
  (= (mem44 x
  (tb2t2943 (image (tuple2 a1 e1) (tuple2 a1 e1) (t2tb2996 p) (t2tb2943 w))))
  (exists ((a2 (tuple21 a e)))
  (and (mem44 a2 w) (mem (tuple2 (tuple2 a1 e1) (tuple2 a1 e1))
  (Tuple2 (tuple2 a1 e1) (tuple2 a1 e1) (t2tb2949 a2) (t2tb2949 x))
  (t2tb2996 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a e) (tuple21 (tuple21 b d) (tuple21 e
  f))))) (w (set (tuple21 a e))) (x (tuple21 (tuple21 b d) (tuple21 e f))))
  (= (mem43 x
  (tb2t2944
  (image (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (tuple2 a1 e1) (t2tb2998 p)
  (t2tb2943 w))))
  (exists ((a2 (tuple21 a e)))
  (and (mem44 a2 w) (mem
  (tuple2 (tuple2 a1 e1) (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)))
  (Tuple2 (tuple2 a1 e1) (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (t2tb2949 a2)
  (t2tb2950 x)) (t2tb2998 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a e) (tuple21 (tuple21 a c) (tuple21 e
  f))))) (w (set (tuple21 a e))) (x (tuple21 (tuple21 a c) (tuple21 e f))))
  (= (mem42 x
  (tb2t2945
  (image (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (tuple2 a1 e1) (t2tb3000 p)
  (t2tb2943 w))))
  (exists ((a2 (tuple21 a e)))
  (and (mem44 a2 w) (mem
  (tuple2 (tuple2 a1 e1) (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)))
  (Tuple2 (tuple2 a1 e1) (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (t2tb2949 a2)
  (t2tb2951 x)) (t2tb3000 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a e) (set (tuple21 d f)))))
  (w (set (tuple21 a e))) (x (set (tuple21 d f))))
  (= (mem41 x
  (tb2t2939
  (image (set1 (tuple2 d1 f1)) (tuple2 a1 e1) (t2tb3002 p) (t2tb2943 w))))
  (exists ((a2 (tuple21 a e)))
  (and (mem44 a2 w) (mem (tuple2 (tuple2 a1 e1) (set1 (tuple2 d1 f1)))
  (Tuple2 (tuple2 a1 e1) (set1 (tuple2 d1 f1)) (t2tb2949 a2) (t2tb2938 x))
  (t2tb3002 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a e) (tuple21 d f)))) (w (set (tuple21 a
  e))) (x (tuple21 d f)))
  (= (mem40 x
  (tb2t2938 (image (tuple2 d1 f1) (tuple2 a1 e1) (t2tb3004 p) (t2tb2943 w))))
  (exists ((a2 (tuple21 a e)))
  (and (mem44 a2 w) (mem (tuple2 (tuple2 a1 e1) (tuple2 d1 f1))
  (Tuple2 (tuple2 a1 e1) (tuple2 d1 f1) (t2tb2949 a2) (t2tb2952 x))
  (t2tb3004 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a e) (set (tuple21 b e)))))
  (w (set (tuple21 a e))) (x (set (tuple21 b e))))
  (= (mem39 x
  (tb2t2941
  (image (set1 (tuple2 b1 e1)) (tuple2 a1 e1) (t2tb3006 p) (t2tb2943 w))))
  (exists ((a2 (tuple21 a e)))
  (and (mem44 a2 w) (mem (tuple2 (tuple2 a1 e1) (set1 (tuple2 b1 e1)))
  (Tuple2 (tuple2 a1 e1) (set1 (tuple2 b1 e1)) (t2tb2949 a2) (t2tb2940 x))
  (t2tb3006 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a e) (tuple21 b e)))) (w (set (tuple21 a
  e))) (x (tuple21 b e)))
  (= (mem38 x
  (tb2t2940 (image (tuple2 b1 e1) (tuple2 a1 e1) (t2tb3008 p) (t2tb2943 w))))
  (exists ((a2 (tuple21 a e)))
  (and (mem44 a2 w) (mem (tuple2 (tuple2 a1 e1) (tuple2 b1 e1))
  (Tuple2 (tuple2 a1 e1) (tuple2 b1 e1) (t2tb2949 a2) (t2tb2953 x))
  (t2tb3008 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a e) f))) (w (set (tuple21 a e))) (x f))
  (= (mem37 x (tb2t2946 (image f1 (tuple2 a1 e1) (t2tb3010 p) (t2tb2943 w))))
  (exists ((a2 (tuple21 a e)))
  (and (mem44 a2 w) (mem (tuple2 (tuple2 a1 e1) f1)
  (Tuple2 (tuple2 a1 e1) f1 (t2tb2949 a2) (t2tb2954 x)) (t2tb3010 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a e) e))) (w (set (tuple21 a e))) (x e))
  (= (mem36 x (tb2t2947 (image e1 (tuple2 a1 e1) (t2tb3012 p) (t2tb2943 w))))
  (exists ((a2 (tuple21 a e)))
  (and (mem44 a2 w) (mem (tuple2 (tuple2 a1 e1) e1)
  (Tuple2 (tuple2 a1 e1) e1 (t2tb2949 a2) (t2tb2955 x)) (t2tb3012 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a e) (tuple21 (tuple21 a c) (tuple21 b
  d))))) (w (set (tuple21 a e))) (x (tuple21 (tuple21 a c) (tuple21 b d))))
  (= (mem24 x
  (tb2t686
  (image (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 a1 e1) (t2tb3014 p)
  (t2tb2943 w))))
  (exists ((a2 (tuple21 a e)))
  (and (mem44 a2 w) (mem
  (tuple2 (tuple2 a1 e1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
  (Tuple2 (tuple2 a1 e1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb2949 a2)
  (t2tb691 x)) (t2tb3014 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a e) (set (tuple21 c d)))))
  (w (set (tuple21 a e))) (x (set (tuple21 c d))))
  (= (mem22 x
  (tb2t688
  (image (set1 (tuple2 c1 d1)) (tuple2 a1 e1) (t2tb3016 p) (t2tb2943 w))))
  (exists ((a2 (tuple21 a e)))
  (and (mem44 a2 w) (mem (tuple2 (tuple2 a1 e1) (set1 (tuple2 c1 d1)))
  (Tuple2 (tuple2 a1 e1) (set1 (tuple2 c1 d1)) (t2tb2949 a2) (t2tb689 x))
  (t2tb3016 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a e) (tuple21 c d)))) (w (set (tuple21 a
  e))) (x (tuple21 c d)))
  (= (mem21 x
  (tb2t689 (image (tuple2 c1 d1) (tuple2 a1 e1) (t2tb3018 p) (t2tb2943 w))))
  (exists ((a2 (tuple21 a e)))
  (and (mem44 a2 w) (mem (tuple2 (tuple2 a1 e1) (tuple2 c1 d1))
  (Tuple2 (tuple2 a1 e1) (tuple2 c1 d1) (t2tb2949 a2) (t2tb693 x))
  (t2tb3018 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a e) d))) (w (set (tuple21 a e))) (x d))
  (= (mem20 x (tb2t690 (image d1 (tuple2 a1 e1) (t2tb3020 p) (t2tb2943 w))))
  (exists ((a2 (tuple21 a e)))
  (and (mem44 a2 w) (mem (tuple2 (tuple2 a1 e1) d1)
  (Tuple2 (tuple2 a1 e1) d1 (t2tb2949 a2) (t2tb694 x)) (t2tb3020 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a e) c))) (w (set (tuple21 a e))) (x c))
  (= (mem7 x (tb2t132 (image c1 (tuple2 a1 e1) (t2tb3022 p) (t2tb2943 w))))
  (exists ((a2 (tuple21 a e)))
  (and (mem44 a2 w) (mem (tuple2 (tuple2 a1 e1) c1)
  (Tuple2 (tuple2 a1 e1) c1 (t2tb2949 a2) (t2tb135 x)) (t2tb3022 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a e) (set (tuple21 a b)))))
  (w (set (tuple21 a e))) (x (set (tuple21 a b))))
  (= (mem4 x
  (tb2t10
  (image (set1 (tuple2 a1 b1)) (tuple2 a1 e1) (t2tb3024 p) (t2tb2943 w))))
  (exists ((a2 (tuple21 a e)))
  (and (mem44 a2 w) (mem (tuple2 (tuple2 a1 e1) (set1 (tuple2 a1 b1)))
  (Tuple2 (tuple2 a1 e1) (set1 (tuple2 a1 b1)) (t2tb2949 a2) (t2tb11 x))
  (t2tb3024 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a e) (tuple21 a b)))) (w (set (tuple21 a
  e))) (x (tuple21 a b)))
  (= (mem3 x
  (tb2t11 (image (tuple2 a1 b1) (tuple2 a1 e1) (t2tb3026 p) (t2tb2943 w))))
  (exists ((a2 (tuple21 a e)))
  (and (mem44 a2 w) (mem (tuple2 (tuple2 a1 e1) (tuple2 a1 b1))
  (Tuple2 (tuple2 a1 e1) (tuple2 a1 b1) (t2tb2949 a2) (t2tb13 x))
  (t2tb3026 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a e) b))) (w (set (tuple21 a e))) (x b))
  (= (mem2 x (tb2t12 (image b1 (tuple2 a1 e1) (t2tb3028 p) (t2tb2943 w))))
  (exists ((a2 (tuple21 a e)))
  (and (mem44 a2 w) (mem (tuple2 (tuple2 a1 e1) b1)
  (Tuple2 (tuple2 a1 e1) b1 (t2tb2949 a2) (t2tb14 x)) (t2tb3028 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a e) a))) (w (set (tuple21 a e))) (x a))
  (= (mem1 x (tb2t1 (image a1 (tuple2 a1 e1) (t2tb3030 p) (t2tb2943 w))))
  (exists ((a2 (tuple21 a e)))
  (and (mem44 a2 w) (mem (tuple2 (tuple2 a1 e1) a1)
  (Tuple2 (tuple2 a1 e1) a1 (t2tb2949 a2) (t2tb2 x)) (t2tb3030 p)))))))

;; mem_image
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (w (set (tuple21 a e))) (x uni))
  (= (mem b2 x (image b2 (tuple2 a1 e1) p (t2tb2943 w)))
  (exists ((a2 (tuple21 a e)))
  (and (mem44 a2 w) (mem (tuple2 (tuple2 a1 e1) b2)
  (Tuple2 (tuple2 a1 e1) b2 (t2tb2949 a2) x) p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 (tuple21 b d) (tuple21 e f)) (tuple21 c
  f)))) (w (set (tuple21 (tuple21 b d) (tuple21 e f)))) (x (tuple21 c f)))
  (= (mem45 x
  (tb2t2942
  (image (tuple2 c1 f1) (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (t2tb3032 p)
  (t2tb2944 w))))
  (exists ((a2 (tuple21 (tuple21 b d) (tuple21 e f))))
  (and (mem43 a2 w) (mem
  (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (tuple2 c1 f1))
  (Tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (tuple2 c1 f1) (t2tb2950 a2)
  (t2tb2948 x)) (t2tb3032 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 (tuple21 b d) (tuple21 e f)) (tuple21 a
  e)))) (w (set (tuple21 (tuple21 b d) (tuple21 e f)))) (x (tuple21 a e)))
  (= (mem44 x
  (tb2t2943
  (image (tuple2 a1 e1) (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (t2tb3034 p)
  (t2tb2944 w))))
  (exists ((a2 (tuple21 (tuple21 b d) (tuple21 e f))))
  (and (mem43 a2 w) (mem
  (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (tuple2 a1 e1))
  (Tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (tuple2 a1 e1) (t2tb2950 a2)
  (t2tb2949 x)) (t2tb3034 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 (tuple21 b d) (tuple21 e f))
  (tuple21 (tuple21 b d) (tuple21 e f))))) (w (set (tuple21 (tuple21 b d)
  (tuple21 e f)))) (x (tuple21 (tuple21 b d) (tuple21 e f))))
  (= (mem43 x
  (tb2t2944
  (image (tuple2 (tuple2 b1 d1) (tuple2 e1 f1))
  (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (t2tb3036 p) (t2tb2944 w))))
  (exists ((a2 (tuple21 (tuple21 b d) (tuple21 e f))))
  (and (mem43 a2 w) (mem
  (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1))
  (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)))
  (Tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1))
  (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (t2tb2950 a2) (t2tb2950 x))
  (t2tb3036 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 (tuple21 b d) (tuple21 e f))
  (tuple21 (tuple21 a c) (tuple21 e f))))) (w (set (tuple21 (tuple21 b d)
  (tuple21 e f)))) (x (tuple21 (tuple21 a c) (tuple21 e f))))
  (= (mem42 x
  (tb2t2945
  (image (tuple2 (tuple2 a1 c1) (tuple2 e1 f1))
  (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (t2tb3038 p) (t2tb2944 w))))
  (exists ((a2 (tuple21 (tuple21 b d) (tuple21 e f))))
  (and (mem43 a2 w) (mem
  (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1))
  (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)))
  (Tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1))
  (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (t2tb2950 a2) (t2tb2951 x))
  (t2tb3038 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 (tuple21 b d) (tuple21 e f))
  (set (tuple21 d f))))) (w (set (tuple21 (tuple21 b d) (tuple21 e f))))
  (x (set (tuple21 d f))))
  (= (mem41 x
  (tb2t2939
  (image (set1 (tuple2 d1 f1)) (tuple2 (tuple2 b1 d1) (tuple2 e1 f1))
  (t2tb3040 p) (t2tb2944 w))))
  (exists ((a2 (tuple21 (tuple21 b d) (tuple21 e f))))
  (and (mem43 a2 w) (mem
  (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (set1 (tuple2 d1 f1)))
  (Tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (set1 (tuple2 d1 f1))
  (t2tb2950 a2) (t2tb2938 x)) (t2tb3040 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 (tuple21 b d) (tuple21 e f)) (tuple21 d
  f)))) (w (set (tuple21 (tuple21 b d) (tuple21 e f)))) (x (tuple21 d f)))
  (= (mem40 x
  (tb2t2938
  (image (tuple2 d1 f1) (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (t2tb3042 p)
  (t2tb2944 w))))
  (exists ((a2 (tuple21 (tuple21 b d) (tuple21 e f))))
  (and (mem43 a2 w) (mem
  (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (tuple2 d1 f1))
  (Tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (tuple2 d1 f1) (t2tb2950 a2)
  (t2tb2952 x)) (t2tb3042 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 (tuple21 b d) (tuple21 e f))
  (set (tuple21 b e))))) (w (set (tuple21 (tuple21 b d) (tuple21 e f))))
  (x (set (tuple21 b e))))
  (= (mem39 x
  (tb2t2941
  (image (set1 (tuple2 b1 e1)) (tuple2 (tuple2 b1 d1) (tuple2 e1 f1))
  (t2tb3044 p) (t2tb2944 w))))
  (exists ((a2 (tuple21 (tuple21 b d) (tuple21 e f))))
  (and (mem43 a2 w) (mem
  (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (set1 (tuple2 b1 e1)))
  (Tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (set1 (tuple2 b1 e1))
  (t2tb2950 a2) (t2tb2940 x)) (t2tb3044 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 (tuple21 b d) (tuple21 e f)) (tuple21 b
  e)))) (w (set (tuple21 (tuple21 b d) (tuple21 e f)))) (x (tuple21 b e)))
  (= (mem38 x
  (tb2t2940
  (image (tuple2 b1 e1) (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (t2tb3046 p)
  (t2tb2944 w))))
  (exists ((a2 (tuple21 (tuple21 b d) (tuple21 e f))))
  (and (mem43 a2 w) (mem
  (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (tuple2 b1 e1))
  (Tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (tuple2 b1 e1) (t2tb2950 a2)
  (t2tb2953 x)) (t2tb3046 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 (tuple21 b d) (tuple21 e f)) f)))
  (w (set (tuple21 (tuple21 b d) (tuple21 e f)))) (x f))
  (= (mem37 x
  (tb2t2946
  (image f1 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (t2tb3048 p) (t2tb2944 w))))
  (exists ((a2 (tuple21 (tuple21 b d) (tuple21 e f))))
  (and (mem43 a2 w) (mem (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) f1)
  (Tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) f1 (t2tb2950 a2)
  (t2tb2954 x)) (t2tb3048 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 (tuple21 b d) (tuple21 e f)) e)))
  (w (set (tuple21 (tuple21 b d) (tuple21 e f)))) (x e))
  (= (mem36 x
  (tb2t2947
  (image e1 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (t2tb3050 p) (t2tb2944 w))))
  (exists ((a2 (tuple21 (tuple21 b d) (tuple21 e f))))
  (and (mem43 a2 w) (mem (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) e1)
  (Tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) e1 (t2tb2950 a2)
  (t2tb2955 x)) (t2tb3050 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 (tuple21 b d) (tuple21 e f))
  (tuple21 (tuple21 a c) (tuple21 b d))))) (w (set (tuple21 (tuple21 b d)
  (tuple21 e f)))) (x (tuple21 (tuple21 a c) (tuple21 b d))))
  (= (mem24 x
  (tb2t686
  (image (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))
  (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (t2tb3052 p) (t2tb2944 w))))
  (exists ((a2 (tuple21 (tuple21 b d) (tuple21 e f))))
  (and (mem43 a2 w) (mem
  (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1))
  (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
  (Tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1))
  (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb2950 a2) (t2tb691 x))
  (t2tb3052 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 (tuple21 b d) (tuple21 e f))
  (set (tuple21 c d))))) (w (set (tuple21 (tuple21 b d) (tuple21 e f))))
  (x (set (tuple21 c d))))
  (= (mem22 x
  (tb2t688
  (image (set1 (tuple2 c1 d1)) (tuple2 (tuple2 b1 d1) (tuple2 e1 f1))
  (t2tb3054 p) (t2tb2944 w))))
  (exists ((a2 (tuple21 (tuple21 b d) (tuple21 e f))))
  (and (mem43 a2 w) (mem
  (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (set1 (tuple2 c1 d1)))
  (Tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (set1 (tuple2 c1 d1))
  (t2tb2950 a2) (t2tb689 x)) (t2tb3054 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 (tuple21 b d) (tuple21 e f)) (tuple21 c
  d)))) (w (set (tuple21 (tuple21 b d) (tuple21 e f)))) (x (tuple21 c d)))
  (= (mem21 x
  (tb2t689
  (image (tuple2 c1 d1) (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (t2tb3056 p)
  (t2tb2944 w))))
  (exists ((a2 (tuple21 (tuple21 b d) (tuple21 e f))))
  (and (mem43 a2 w) (mem
  (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (tuple2 c1 d1))
  (Tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (tuple2 c1 d1) (t2tb2950 a2)
  (t2tb693 x)) (t2tb3056 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 (tuple21 b d) (tuple21 e f)) d)))
  (w (set (tuple21 (tuple21 b d) (tuple21 e f)))) (x d))
  (= (mem20 x
  (tb2t690
  (image d1 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (t2tb3058 p) (t2tb2944 w))))
  (exists ((a2 (tuple21 (tuple21 b d) (tuple21 e f))))
  (and (mem43 a2 w) (mem (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) d1)
  (Tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) d1 (t2tb2950 a2)
  (t2tb694 x)) (t2tb3058 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 (tuple21 b d) (tuple21 e f)) c)))
  (w (set (tuple21 (tuple21 b d) (tuple21 e f)))) (x c))
  (= (mem7 x
  (tb2t132
  (image c1 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (t2tb3060 p) (t2tb2944 w))))
  (exists ((a2 (tuple21 (tuple21 b d) (tuple21 e f))))
  (and (mem43 a2 w) (mem (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) c1)
  (Tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) c1 (t2tb2950 a2)
  (t2tb135 x)) (t2tb3060 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 (tuple21 b d) (tuple21 e f))
  (set (tuple21 a b))))) (w (set (tuple21 (tuple21 b d) (tuple21 e f))))
  (x (set (tuple21 a b))))
  (= (mem4 x
  (tb2t10
  (image (set1 (tuple2 a1 b1)) (tuple2 (tuple2 b1 d1) (tuple2 e1 f1))
  (t2tb3062 p) (t2tb2944 w))))
  (exists ((a2 (tuple21 (tuple21 b d) (tuple21 e f))))
  (and (mem43 a2 w) (mem
  (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (set1 (tuple2 a1 b1)))
  (Tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (set1 (tuple2 a1 b1))
  (t2tb2950 a2) (t2tb11 x)) (t2tb3062 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 (tuple21 b d) (tuple21 e f)) (tuple21 a
  b)))) (w (set (tuple21 (tuple21 b d) (tuple21 e f)))) (x (tuple21 a b)))
  (= (mem3 x
  (tb2t11
  (image (tuple2 a1 b1) (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (t2tb3064 p)
  (t2tb2944 w))))
  (exists ((a2 (tuple21 (tuple21 b d) (tuple21 e f))))
  (and (mem43 a2 w) (mem
  (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (tuple2 a1 b1))
  (Tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (tuple2 a1 b1) (t2tb2950 a2)
  (t2tb13 x)) (t2tb3064 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 (tuple21 b d) (tuple21 e f)) b)))
  (w (set (tuple21 (tuple21 b d) (tuple21 e f)))) (x b))
  (= (mem2 x
  (tb2t12
  (image b1 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (t2tb3066 p) (t2tb2944 w))))
  (exists ((a2 (tuple21 (tuple21 b d) (tuple21 e f))))
  (and (mem43 a2 w) (mem (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) b1)
  (Tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) b1 (t2tb2950 a2) (t2tb14 x))
  (t2tb3066 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 (tuple21 b d) (tuple21 e f)) a)))
  (w (set (tuple21 (tuple21 b d) (tuple21 e f)))) (x a))
  (= (mem1 x
  (tb2t1
  (image a1 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (t2tb3068 p) (t2tb2944 w))))
  (exists ((a2 (tuple21 (tuple21 b d) (tuple21 e f))))
  (and (mem43 a2 w) (mem (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) a1)
  (Tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) a1 (t2tb2950 a2) (t2tb2 x))
  (t2tb3068 p)))))))

;; mem_image
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (w (set (tuple21 (tuple21 b d) (tuple21 e f)))) (x uni))
  (= (mem b2 x
  (image b2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) p (t2tb2944 w)))
  (exists ((a2 (tuple21 (tuple21 b d) (tuple21 e f))))
  (and (mem43 a2 w) (mem (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) b2)
  (Tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) b2 (t2tb2950 a2) x) p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 (tuple21 a c) (tuple21 e f)) (tuple21 c
  f)))) (w (set (tuple21 (tuple21 a c) (tuple21 e f)))) (x (tuple21 c f)))
  (= (mem45 x
  (tb2t2942
  (image (tuple2 c1 f1) (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (t2tb3070 p)
  (t2tb2945 w))))
  (exists ((a2 (tuple21 (tuple21 a c) (tuple21 e f))))
  (and (mem42 a2 w) (mem
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (tuple2 c1 f1))
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (tuple2 c1 f1) (t2tb2951 a2)
  (t2tb2948 x)) (t2tb3070 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 (tuple21 a c) (tuple21 e f)) (tuple21 a
  e)))) (w (set (tuple21 (tuple21 a c) (tuple21 e f)))) (x (tuple21 a e)))
  (= (mem44 x
  (tb2t2943
  (image (tuple2 a1 e1) (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (t2tb3072 p)
  (t2tb2945 w))))
  (exists ((a2 (tuple21 (tuple21 a c) (tuple21 e f))))
  (and (mem42 a2 w) (mem
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (tuple2 a1 e1))
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (tuple2 a1 e1) (t2tb2951 a2)
  (t2tb2949 x)) (t2tb3072 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 (tuple21 a c) (tuple21 e f))
  (tuple21 (tuple21 b d) (tuple21 e f))))) (w (set (tuple21 (tuple21 a c)
  (tuple21 e f)))) (x (tuple21 (tuple21 b d) (tuple21 e f))))
  (= (mem43 x
  (tb2t2944
  (image (tuple2 (tuple2 b1 d1) (tuple2 e1 f1))
  (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (t2tb3074 p) (t2tb2945 w))))
  (exists ((a2 (tuple21 (tuple21 a c) (tuple21 e f))))
  (and (mem42 a2 w) (mem
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1))
  (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)))
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1))
  (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (t2tb2951 a2) (t2tb2950 x))
  (t2tb3074 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 (tuple21 a c) (tuple21 e f))
  (tuple21 (tuple21 a c) (tuple21 e f))))) (w (set (tuple21 (tuple21 a c)
  (tuple21 e f)))) (x (tuple21 (tuple21 a c) (tuple21 e f))))
  (= (mem42 x
  (tb2t2945
  (image (tuple2 (tuple2 a1 c1) (tuple2 e1 f1))
  (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (t2tb3076 p) (t2tb2945 w))))
  (exists ((a2 (tuple21 (tuple21 a c) (tuple21 e f))))
  (and (mem42 a2 w) (mem
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1))
  (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)))
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1))
  (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (t2tb2951 a2) (t2tb2951 x))
  (t2tb3076 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 (tuple21 a c) (tuple21 e f))
  (set (tuple21 d f))))) (w (set (tuple21 (tuple21 a c) (tuple21 e f))))
  (x (set (tuple21 d f))))
  (= (mem41 x
  (tb2t2939
  (image (set1 (tuple2 d1 f1)) (tuple2 (tuple2 a1 c1) (tuple2 e1 f1))
  (t2tb3078 p) (t2tb2945 w))))
  (exists ((a2 (tuple21 (tuple21 a c) (tuple21 e f))))
  (and (mem42 a2 w) (mem
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (set1 (tuple2 d1 f1)))
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (set1 (tuple2 d1 f1))
  (t2tb2951 a2) (t2tb2938 x)) (t2tb3078 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 (tuple21 a c) (tuple21 e f)) (tuple21 d
  f)))) (w (set (tuple21 (tuple21 a c) (tuple21 e f)))) (x (tuple21 d f)))
  (= (mem40 x
  (tb2t2938
  (image (tuple2 d1 f1) (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (t2tb3080 p)
  (t2tb2945 w))))
  (exists ((a2 (tuple21 (tuple21 a c) (tuple21 e f))))
  (and (mem42 a2 w) (mem
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (tuple2 d1 f1))
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (tuple2 d1 f1) (t2tb2951 a2)
  (t2tb2952 x)) (t2tb3080 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 (tuple21 a c) (tuple21 e f))
  (set (tuple21 b e))))) (w (set (tuple21 (tuple21 a c) (tuple21 e f))))
  (x (set (tuple21 b e))))
  (= (mem39 x
  (tb2t2941
  (image (set1 (tuple2 b1 e1)) (tuple2 (tuple2 a1 c1) (tuple2 e1 f1))
  (t2tb3082 p) (t2tb2945 w))))
  (exists ((a2 (tuple21 (tuple21 a c) (tuple21 e f))))
  (and (mem42 a2 w) (mem
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (set1 (tuple2 b1 e1)))
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (set1 (tuple2 b1 e1))
  (t2tb2951 a2) (t2tb2940 x)) (t2tb3082 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 (tuple21 a c) (tuple21 e f)) (tuple21 b
  e)))) (w (set (tuple21 (tuple21 a c) (tuple21 e f)))) (x (tuple21 b e)))
  (= (mem38 x
  (tb2t2940
  (image (tuple2 b1 e1) (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (t2tb3084 p)
  (t2tb2945 w))))
  (exists ((a2 (tuple21 (tuple21 a c) (tuple21 e f))))
  (and (mem42 a2 w) (mem
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (tuple2 b1 e1))
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (tuple2 b1 e1) (t2tb2951 a2)
  (t2tb2953 x)) (t2tb3084 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 (tuple21 a c) (tuple21 e f)) f)))
  (w (set (tuple21 (tuple21 a c) (tuple21 e f)))) (x f))
  (= (mem37 x
  (tb2t2946
  (image f1 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (t2tb3086 p) (t2tb2945 w))))
  (exists ((a2 (tuple21 (tuple21 a c) (tuple21 e f))))
  (and (mem42 a2 w) (mem (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) f1)
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) f1 (t2tb2951 a2)
  (t2tb2954 x)) (t2tb3086 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 (tuple21 a c) (tuple21 e f)) e)))
  (w (set (tuple21 (tuple21 a c) (tuple21 e f)))) (x e))
  (= (mem36 x
  (tb2t2947
  (image e1 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (t2tb3088 p) (t2tb2945 w))))
  (exists ((a2 (tuple21 (tuple21 a c) (tuple21 e f))))
  (and (mem42 a2 w) (mem (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) e1)
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) e1 (t2tb2951 a2)
  (t2tb2955 x)) (t2tb3088 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 (tuple21 a c) (tuple21 e f))
  (tuple21 (tuple21 a c) (tuple21 b d))))) (w (set (tuple21 (tuple21 a c)
  (tuple21 e f)))) (x (tuple21 (tuple21 a c) (tuple21 b d))))
  (= (mem24 x
  (tb2t686
  (image (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))
  (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (t2tb3090 p) (t2tb2945 w))))
  (exists ((a2 (tuple21 (tuple21 a c) (tuple21 e f))))
  (and (mem42 a2 w) (mem
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1))
  (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1))
  (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb2951 a2) (t2tb691 x))
  (t2tb3090 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 (tuple21 a c) (tuple21 e f))
  (set (tuple21 c d))))) (w (set (tuple21 (tuple21 a c) (tuple21 e f))))
  (x (set (tuple21 c d))))
  (= (mem22 x
  (tb2t688
  (image (set1 (tuple2 c1 d1)) (tuple2 (tuple2 a1 c1) (tuple2 e1 f1))
  (t2tb3092 p) (t2tb2945 w))))
  (exists ((a2 (tuple21 (tuple21 a c) (tuple21 e f))))
  (and (mem42 a2 w) (mem
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (set1 (tuple2 c1 d1)))
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (set1 (tuple2 c1 d1))
  (t2tb2951 a2) (t2tb689 x)) (t2tb3092 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 (tuple21 a c) (tuple21 e f)) (tuple21 c
  d)))) (w (set (tuple21 (tuple21 a c) (tuple21 e f)))) (x (tuple21 c d)))
  (= (mem21 x
  (tb2t689
  (image (tuple2 c1 d1) (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (t2tb3094 p)
  (t2tb2945 w))))
  (exists ((a2 (tuple21 (tuple21 a c) (tuple21 e f))))
  (and (mem42 a2 w) (mem
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (tuple2 c1 d1))
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (tuple2 c1 d1) (t2tb2951 a2)
  (t2tb693 x)) (t2tb3094 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 (tuple21 a c) (tuple21 e f)) d)))
  (w (set (tuple21 (tuple21 a c) (tuple21 e f)))) (x d))
  (= (mem20 x
  (tb2t690
  (image d1 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (t2tb3096 p) (t2tb2945 w))))
  (exists ((a2 (tuple21 (tuple21 a c) (tuple21 e f))))
  (and (mem42 a2 w) (mem (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) d1)
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) d1 (t2tb2951 a2)
  (t2tb694 x)) (t2tb3096 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 (tuple21 a c) (tuple21 e f)) c)))
  (w (set (tuple21 (tuple21 a c) (tuple21 e f)))) (x c))
  (= (mem7 x
  (tb2t132
  (image c1 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (t2tb3098 p) (t2tb2945 w))))
  (exists ((a2 (tuple21 (tuple21 a c) (tuple21 e f))))
  (and (mem42 a2 w) (mem (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) c1)
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) c1 (t2tb2951 a2)
  (t2tb135 x)) (t2tb3098 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 (tuple21 a c) (tuple21 e f))
  (set (tuple21 a b))))) (w (set (tuple21 (tuple21 a c) (tuple21 e f))))
  (x (set (tuple21 a b))))
  (= (mem4 x
  (tb2t10
  (image (set1 (tuple2 a1 b1)) (tuple2 (tuple2 a1 c1) (tuple2 e1 f1))
  (t2tb3100 p) (t2tb2945 w))))
  (exists ((a2 (tuple21 (tuple21 a c) (tuple21 e f))))
  (and (mem42 a2 w) (mem
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (set1 (tuple2 a1 b1)))
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (set1 (tuple2 a1 b1))
  (t2tb2951 a2) (t2tb11 x)) (t2tb3100 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 (tuple21 a c) (tuple21 e f)) (tuple21 a
  b)))) (w (set (tuple21 (tuple21 a c) (tuple21 e f)))) (x (tuple21 a b)))
  (= (mem3 x
  (tb2t11
  (image (tuple2 a1 b1) (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (t2tb3102 p)
  (t2tb2945 w))))
  (exists ((a2 (tuple21 (tuple21 a c) (tuple21 e f))))
  (and (mem42 a2 w) (mem
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (tuple2 a1 b1))
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (tuple2 a1 b1) (t2tb2951 a2)
  (t2tb13 x)) (t2tb3102 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 (tuple21 a c) (tuple21 e f)) b)))
  (w (set (tuple21 (tuple21 a c) (tuple21 e f)))) (x b))
  (= (mem2 x
  (tb2t12
  (image b1 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (t2tb3104 p) (t2tb2945 w))))
  (exists ((a2 (tuple21 (tuple21 a c) (tuple21 e f))))
  (and (mem42 a2 w) (mem (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) b1)
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) b1 (t2tb2951 a2) (t2tb14 x))
  (t2tb3104 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 (tuple21 a c) (tuple21 e f)) a)))
  (w (set (tuple21 (tuple21 a c) (tuple21 e f)))) (x a))
  (= (mem1 x
  (tb2t1
  (image a1 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (t2tb3106 p) (t2tb2945 w))))
  (exists ((a2 (tuple21 (tuple21 a c) (tuple21 e f))))
  (and (mem42 a2 w) (mem (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) a1)
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) a1 (t2tb2951 a2) (t2tb2 x))
  (t2tb3106 p)))))))

;; mem_image
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (w (set (tuple21 (tuple21 a c) (tuple21 e f)))) (x uni))
  (= (mem b2 x
  (image b2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) p (t2tb2945 w)))
  (exists ((a2 (tuple21 (tuple21 a c) (tuple21 e f))))
  (and (mem42 a2 w) (mem (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) b2)
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) b2 (t2tb2951 a2) x) p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 d f)) (tuple21 c f))))
  (w (set (set (tuple21 d f)))) (x (tuple21 c f)))
  (= (mem45 x
  (tb2t2942
  (image (tuple2 c1 f1) (set1 (tuple2 d1 f1)) (t2tb3108 p) (t2tb2939 w))))
  (exists ((a2 (set (tuple21 d f))))
  (and (mem41 a2 w) (mem (tuple2 (set1 (tuple2 d1 f1)) (tuple2 c1 f1))
  (Tuple2 (set1 (tuple2 d1 f1)) (tuple2 c1 f1) (t2tb2938 a2) (t2tb2948 x))
  (t2tb3108 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 d f)) (tuple21 a e))))
  (w (set (set (tuple21 d f)))) (x (tuple21 a e)))
  (= (mem44 x
  (tb2t2943
  (image (tuple2 a1 e1) (set1 (tuple2 d1 f1)) (t2tb3110 p) (t2tb2939 w))))
  (exists ((a2 (set (tuple21 d f))))
  (and (mem41 a2 w) (mem (tuple2 (set1 (tuple2 d1 f1)) (tuple2 a1 e1))
  (Tuple2 (set1 (tuple2 d1 f1)) (tuple2 a1 e1) (t2tb2938 a2) (t2tb2949 x))
  (t2tb3110 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 d f)) (tuple21 (tuple21 b d)
  (tuple21 e f))))) (w (set (set (tuple21 d f)))) (x (tuple21 (tuple21 b d)
  (tuple21 e f))))
  (= (mem43 x
  (tb2t2944
  (image (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (set1 (tuple2 d1 f1))
  (t2tb3112 p) (t2tb2939 w))))
  (exists ((a2 (set (tuple21 d f))))
  (and (mem41 a2 w) (mem
  (tuple2 (set1 (tuple2 d1 f1)) (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)))
  (Tuple2 (set1 (tuple2 d1 f1)) (tuple2 (tuple2 b1 d1) (tuple2 e1 f1))
  (t2tb2938 a2) (t2tb2950 x)) (t2tb3112 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 d f)) (tuple21 (tuple21 a c)
  (tuple21 e f))))) (w (set (set (tuple21 d f)))) (x (tuple21 (tuple21 a c)
  (tuple21 e f))))
  (= (mem42 x
  (tb2t2945
  (image (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (set1 (tuple2 d1 f1))
  (t2tb3114 p) (t2tb2939 w))))
  (exists ((a2 (set (tuple21 d f))))
  (and (mem41 a2 w) (mem
  (tuple2 (set1 (tuple2 d1 f1)) (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)))
  (Tuple2 (set1 (tuple2 d1 f1)) (tuple2 (tuple2 a1 c1) (tuple2 e1 f1))
  (t2tb2938 a2) (t2tb2951 x)) (t2tb3114 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 d f)) (set (tuple21 d f)))))
  (w (set (set (tuple21 d f)))) (x (set (tuple21 d f))))
  (= (mem41 x
  (tb2t2939
  (image (set1 (tuple2 d1 f1)) (set1 (tuple2 d1 f1)) (t2tb3116 p)
  (t2tb2939 w))))
  (exists ((a2 (set (tuple21 d f))))
  (and (mem41 a2 w) (mem (tuple2 (set1 (tuple2 d1 f1)) (set1 (tuple2 d1 f1)))
  (Tuple2 (set1 (tuple2 d1 f1)) (set1 (tuple2 d1 f1)) (t2tb2938 a2)
  (t2tb2938 x)) (t2tb3116 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 d f)) (tuple21 d f))))
  (w (set (set (tuple21 d f)))) (x (tuple21 d f)))
  (= (mem40 x
  (tb2t2938
  (image (tuple2 d1 f1) (set1 (tuple2 d1 f1)) (t2tb3118 p) (t2tb2939 w))))
  (exists ((a2 (set (tuple21 d f))))
  (and (mem41 a2 w) (mem (tuple2 (set1 (tuple2 d1 f1)) (tuple2 d1 f1))
  (Tuple2 (set1 (tuple2 d1 f1)) (tuple2 d1 f1) (t2tb2938 a2) (t2tb2952 x))
  (t2tb3118 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 d f)) (set (tuple21 b e)))))
  (w (set (set (tuple21 d f)))) (x (set (tuple21 b e))))
  (= (mem39 x
  (tb2t2941
  (image (set1 (tuple2 b1 e1)) (set1 (tuple2 d1 f1)) (t2tb3120 p)
  (t2tb2939 w))))
  (exists ((a2 (set (tuple21 d f))))
  (and (mem41 a2 w) (mem (tuple2 (set1 (tuple2 d1 f1)) (set1 (tuple2 b1 e1)))
  (Tuple2 (set1 (tuple2 d1 f1)) (set1 (tuple2 b1 e1)) (t2tb2938 a2)
  (t2tb2940 x)) (t2tb3120 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 d f)) (tuple21 b e))))
  (w (set (set (tuple21 d f)))) (x (tuple21 b e)))
  (= (mem38 x
  (tb2t2940
  (image (tuple2 b1 e1) (set1 (tuple2 d1 f1)) (t2tb3122 p) (t2tb2939 w))))
  (exists ((a2 (set (tuple21 d f))))
  (and (mem41 a2 w) (mem (tuple2 (set1 (tuple2 d1 f1)) (tuple2 b1 e1))
  (Tuple2 (set1 (tuple2 d1 f1)) (tuple2 b1 e1) (t2tb2938 a2) (t2tb2953 x))
  (t2tb3122 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 d f)) f))) (w (set (set (tuple21 d
  f)))) (x f))
  (= (mem37 x
  (tb2t2946 (image f1 (set1 (tuple2 d1 f1)) (t2tb3124 p) (t2tb2939 w))))
  (exists ((a2 (set (tuple21 d f))))
  (and (mem41 a2 w) (mem (tuple2 (set1 (tuple2 d1 f1)) f1)
  (Tuple2 (set1 (tuple2 d1 f1)) f1 (t2tb2938 a2) (t2tb2954 x)) (t2tb3124 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 d f)) e))) (w (set (set (tuple21 d
  f)))) (x e))
  (= (mem36 x
  (tb2t2947 (image e1 (set1 (tuple2 d1 f1)) (t2tb3126 p) (t2tb2939 w))))
  (exists ((a2 (set (tuple21 d f))))
  (and (mem41 a2 w) (mem (tuple2 (set1 (tuple2 d1 f1)) e1)
  (Tuple2 (set1 (tuple2 d1 f1)) e1 (t2tb2938 a2) (t2tb2955 x)) (t2tb3126 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 d f)) (tuple21 (tuple21 a c)
  (tuple21 b d))))) (w (set (set (tuple21 d f)))) (x (tuple21 (tuple21 a c)
  (tuple21 b d))))
  (= (mem24 x
  (tb2t686
  (image (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (set1 (tuple2 d1 f1))
  (t2tb3128 p) (t2tb2939 w))))
  (exists ((a2 (set (tuple21 d f))))
  (and (mem41 a2 w) (mem
  (tuple2 (set1 (tuple2 d1 f1)) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
  (Tuple2 (set1 (tuple2 d1 f1)) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))
  (t2tb2938 a2) (t2tb691 x)) (t2tb3128 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 d f)) (set (tuple21 c d)))))
  (w (set (set (tuple21 d f)))) (x (set (tuple21 c d))))
  (= (mem22 x
  (tb2t688
  (image (set1 (tuple2 c1 d1)) (set1 (tuple2 d1 f1)) (t2tb3130 p)
  (t2tb2939 w))))
  (exists ((a2 (set (tuple21 d f))))
  (and (mem41 a2 w) (mem (tuple2 (set1 (tuple2 d1 f1)) (set1 (tuple2 c1 d1)))
  (Tuple2 (set1 (tuple2 d1 f1)) (set1 (tuple2 c1 d1)) (t2tb2938 a2)
  (t2tb689 x)) (t2tb3130 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 d f)) (tuple21 c d))))
  (w (set (set (tuple21 d f)))) (x (tuple21 c d)))
  (= (mem21 x
  (tb2t689
  (image (tuple2 c1 d1) (set1 (tuple2 d1 f1)) (t2tb3132 p) (t2tb2939 w))))
  (exists ((a2 (set (tuple21 d f))))
  (and (mem41 a2 w) (mem (tuple2 (set1 (tuple2 d1 f1)) (tuple2 c1 d1))
  (Tuple2 (set1 (tuple2 d1 f1)) (tuple2 c1 d1) (t2tb2938 a2) (t2tb693 x))
  (t2tb3132 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 d f)) d))) (w (set (set (tuple21 d
  f)))) (x d))
  (= (mem20 x
  (tb2t690 (image d1 (set1 (tuple2 d1 f1)) (t2tb3134 p) (t2tb2939 w))))
  (exists ((a2 (set (tuple21 d f))))
  (and (mem41 a2 w) (mem (tuple2 (set1 (tuple2 d1 f1)) d1)
  (Tuple2 (set1 (tuple2 d1 f1)) d1 (t2tb2938 a2) (t2tb694 x)) (t2tb3134 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 d f)) c))) (w (set (set (tuple21 d
  f)))) (x c))
  (= (mem7 x
  (tb2t132 (image c1 (set1 (tuple2 d1 f1)) (t2tb3136 p) (t2tb2939 w))))
  (exists ((a2 (set (tuple21 d f))))
  (and (mem41 a2 w) (mem (tuple2 (set1 (tuple2 d1 f1)) c1)
  (Tuple2 (set1 (tuple2 d1 f1)) c1 (t2tb2938 a2) (t2tb135 x)) (t2tb3136 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 d f)) (set (tuple21 a b)))))
  (w (set (set (tuple21 d f)))) (x (set (tuple21 a b))))
  (= (mem4 x
  (tb2t10
  (image (set1 (tuple2 a1 b1)) (set1 (tuple2 d1 f1)) (t2tb3138 p)
  (t2tb2939 w))))
  (exists ((a2 (set (tuple21 d f))))
  (and (mem41 a2 w) (mem (tuple2 (set1 (tuple2 d1 f1)) (set1 (tuple2 a1 b1)))
  (Tuple2 (set1 (tuple2 d1 f1)) (set1 (tuple2 a1 b1)) (t2tb2938 a2)
  (t2tb11 x)) (t2tb3138 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 d f)) (tuple21 a b))))
  (w (set (set (tuple21 d f)))) (x (tuple21 a b)))
  (= (mem3 x
  (tb2t11
  (image (tuple2 a1 b1) (set1 (tuple2 d1 f1)) (t2tb3140 p) (t2tb2939 w))))
  (exists ((a2 (set (tuple21 d f))))
  (and (mem41 a2 w) (mem (tuple2 (set1 (tuple2 d1 f1)) (tuple2 a1 b1))
  (Tuple2 (set1 (tuple2 d1 f1)) (tuple2 a1 b1) (t2tb2938 a2) (t2tb13 x))
  (t2tb3140 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 d f)) b))) (w (set (set (tuple21 d
  f)))) (x b))
  (= (mem2 x
  (tb2t12 (image b1 (set1 (tuple2 d1 f1)) (t2tb3142 p) (t2tb2939 w))))
  (exists ((a2 (set (tuple21 d f))))
  (and (mem41 a2 w) (mem (tuple2 (set1 (tuple2 d1 f1)) b1)
  (Tuple2 (set1 (tuple2 d1 f1)) b1 (t2tb2938 a2) (t2tb14 x)) (t2tb3142 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 d f)) a))) (w (set (set (tuple21 d
  f)))) (x a))
  (= (mem1 x
  (tb2t1 (image a1 (set1 (tuple2 d1 f1)) (t2tb3144 p) (t2tb2939 w))))
  (exists ((a2 (set (tuple21 d f))))
  (and (mem41 a2 w) (mem (tuple2 (set1 (tuple2 d1 f1)) a1)
  (Tuple2 (set1 (tuple2 d1 f1)) a1 (t2tb2938 a2) (t2tb2 x)) (t2tb3144 p)))))))

;; mem_image
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (w (set (set (tuple21 d f)))) (x uni))
  (= (mem b2 x (image b2 (set1 (tuple2 d1 f1)) p (t2tb2939 w)))
  (exists ((a2 (set (tuple21 d f))))
  (and (mem41 a2 w) (mem (tuple2 (set1 (tuple2 d1 f1)) b2)
  (Tuple2 (set1 (tuple2 d1 f1)) b2 (t2tb2938 a2) x) p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 d f) (tuple21 c f)))) (w (set (tuple21 d
  f))) (x (tuple21 c f)))
  (= (mem45 x
  (tb2t2942 (image (tuple2 c1 f1) (tuple2 d1 f1) (t2tb3146 p) (t2tb2938 w))))
  (exists ((a2 (tuple21 d f)))
  (and (mem40 a2 w) (mem (tuple2 (tuple2 d1 f1) (tuple2 c1 f1))
  (Tuple2 (tuple2 d1 f1) (tuple2 c1 f1) (t2tb2952 a2) (t2tb2948 x))
  (t2tb3146 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 d f) (tuple21 a e)))) (w (set (tuple21 d
  f))) (x (tuple21 a e)))
  (= (mem44 x
  (tb2t2943 (image (tuple2 a1 e1) (tuple2 d1 f1) (t2tb3148 p) (t2tb2938 w))))
  (exists ((a2 (tuple21 d f)))
  (and (mem40 a2 w) (mem (tuple2 (tuple2 d1 f1) (tuple2 a1 e1))
  (Tuple2 (tuple2 d1 f1) (tuple2 a1 e1) (t2tb2952 a2) (t2tb2949 x))
  (t2tb3148 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 d f) (tuple21 (tuple21 b d) (tuple21 e
  f))))) (w (set (tuple21 d f))) (x (tuple21 (tuple21 b d) (tuple21 e f))))
  (= (mem43 x
  (tb2t2944
  (image (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (tuple2 d1 f1) (t2tb3150 p)
  (t2tb2938 w))))
  (exists ((a2 (tuple21 d f)))
  (and (mem40 a2 w) (mem
  (tuple2 (tuple2 d1 f1) (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)))
  (Tuple2 (tuple2 d1 f1) (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (t2tb2952 a2)
  (t2tb2950 x)) (t2tb3150 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 d f) (tuple21 (tuple21 a c) (tuple21 e
  f))))) (w (set (tuple21 d f))) (x (tuple21 (tuple21 a c) (tuple21 e f))))
  (= (mem42 x
  (tb2t2945
  (image (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (tuple2 d1 f1) (t2tb3152 p)
  (t2tb2938 w))))
  (exists ((a2 (tuple21 d f)))
  (and (mem40 a2 w) (mem
  (tuple2 (tuple2 d1 f1) (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)))
  (Tuple2 (tuple2 d1 f1) (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (t2tb2952 a2)
  (t2tb2951 x)) (t2tb3152 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 d f) (set (tuple21 d f)))))
  (w (set (tuple21 d f))) (x (set (tuple21 d f))))
  (= (mem41 x
  (tb2t2939
  (image (set1 (tuple2 d1 f1)) (tuple2 d1 f1) (t2tb3154 p) (t2tb2938 w))))
  (exists ((a2 (tuple21 d f)))
  (and (mem40 a2 w) (mem (tuple2 (tuple2 d1 f1) (set1 (tuple2 d1 f1)))
  (Tuple2 (tuple2 d1 f1) (set1 (tuple2 d1 f1)) (t2tb2952 a2) (t2tb2938 x))
  (t2tb3154 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 d f) (tuple21 d f)))) (w (set (tuple21 d
  f))) (x (tuple21 d f)))
  (= (mem40 x
  (tb2t2938 (image (tuple2 d1 f1) (tuple2 d1 f1) (t2tb3156 p) (t2tb2938 w))))
  (exists ((a2 (tuple21 d f)))
  (and (mem40 a2 w) (mem (tuple2 (tuple2 d1 f1) (tuple2 d1 f1))
  (Tuple2 (tuple2 d1 f1) (tuple2 d1 f1) (t2tb2952 a2) (t2tb2952 x))
  (t2tb3156 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 d f) (set (tuple21 b e)))))
  (w (set (tuple21 d f))) (x (set (tuple21 b e))))
  (= (mem39 x
  (tb2t2941
  (image (set1 (tuple2 b1 e1)) (tuple2 d1 f1) (t2tb3158 p) (t2tb2938 w))))
  (exists ((a2 (tuple21 d f)))
  (and (mem40 a2 w) (mem (tuple2 (tuple2 d1 f1) (set1 (tuple2 b1 e1)))
  (Tuple2 (tuple2 d1 f1) (set1 (tuple2 b1 e1)) (t2tb2952 a2) (t2tb2940 x))
  (t2tb3158 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 d f) (tuple21 b e)))) (w (set (tuple21 d
  f))) (x (tuple21 b e)))
  (= (mem38 x
  (tb2t2940 (image (tuple2 b1 e1) (tuple2 d1 f1) (t2tb3160 p) (t2tb2938 w))))
  (exists ((a2 (tuple21 d f)))
  (and (mem40 a2 w) (mem (tuple2 (tuple2 d1 f1) (tuple2 b1 e1))
  (Tuple2 (tuple2 d1 f1) (tuple2 b1 e1) (t2tb2952 a2) (t2tb2953 x))
  (t2tb3160 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 d f) f))) (w (set (tuple21 d f))) (x f))
  (= (mem37 x (tb2t2946 (image f1 (tuple2 d1 f1) (t2tb3162 p) (t2tb2938 w))))
  (exists ((a2 (tuple21 d f)))
  (and (mem40 a2 w) (mem (tuple2 (tuple2 d1 f1) f1)
  (Tuple2 (tuple2 d1 f1) f1 (t2tb2952 a2) (t2tb2954 x)) (t2tb3162 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 d f) e))) (w (set (tuple21 d f))) (x e))
  (= (mem36 x (tb2t2947 (image e1 (tuple2 d1 f1) (t2tb3164 p) (t2tb2938 w))))
  (exists ((a2 (tuple21 d f)))
  (and (mem40 a2 w) (mem (tuple2 (tuple2 d1 f1) e1)
  (Tuple2 (tuple2 d1 f1) e1 (t2tb2952 a2) (t2tb2955 x)) (t2tb3164 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 d f) (tuple21 (tuple21 a c) (tuple21 b
  d))))) (w (set (tuple21 d f))) (x (tuple21 (tuple21 a c) (tuple21 b d))))
  (= (mem24 x
  (tb2t686
  (image (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 d1 f1) (t2tb3166 p)
  (t2tb2938 w))))
  (exists ((a2 (tuple21 d f)))
  (and (mem40 a2 w) (mem
  (tuple2 (tuple2 d1 f1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
  (Tuple2 (tuple2 d1 f1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb2952 a2)
  (t2tb691 x)) (t2tb3166 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 d f) (set (tuple21 c d)))))
  (w (set (tuple21 d f))) (x (set (tuple21 c d))))
  (= (mem22 x
  (tb2t688
  (image (set1 (tuple2 c1 d1)) (tuple2 d1 f1) (t2tb3168 p) (t2tb2938 w))))
  (exists ((a2 (tuple21 d f)))
  (and (mem40 a2 w) (mem (tuple2 (tuple2 d1 f1) (set1 (tuple2 c1 d1)))
  (Tuple2 (tuple2 d1 f1) (set1 (tuple2 c1 d1)) (t2tb2952 a2) (t2tb689 x))
  (t2tb3168 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 d f) (tuple21 c d)))) (w (set (tuple21 d
  f))) (x (tuple21 c d)))
  (= (mem21 x
  (tb2t689 (image (tuple2 c1 d1) (tuple2 d1 f1) (t2tb3170 p) (t2tb2938 w))))
  (exists ((a2 (tuple21 d f)))
  (and (mem40 a2 w) (mem (tuple2 (tuple2 d1 f1) (tuple2 c1 d1))
  (Tuple2 (tuple2 d1 f1) (tuple2 c1 d1) (t2tb2952 a2) (t2tb693 x))
  (t2tb3170 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 d f) d))) (w (set (tuple21 d f))) (x d))
  (= (mem20 x (tb2t690 (image d1 (tuple2 d1 f1) (t2tb3172 p) (t2tb2938 w))))
  (exists ((a2 (tuple21 d f)))
  (and (mem40 a2 w) (mem (tuple2 (tuple2 d1 f1) d1)
  (Tuple2 (tuple2 d1 f1) d1 (t2tb2952 a2) (t2tb694 x)) (t2tb3172 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 d f) c))) (w (set (tuple21 d f))) (x c))
  (= (mem7 x (tb2t132 (image c1 (tuple2 d1 f1) (t2tb3174 p) (t2tb2938 w))))
  (exists ((a2 (tuple21 d f)))
  (and (mem40 a2 w) (mem (tuple2 (tuple2 d1 f1) c1)
  (Tuple2 (tuple2 d1 f1) c1 (t2tb2952 a2) (t2tb135 x)) (t2tb3174 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 d f) (set (tuple21 a b)))))
  (w (set (tuple21 d f))) (x (set (tuple21 a b))))
  (= (mem4 x
  (tb2t10
  (image (set1 (tuple2 a1 b1)) (tuple2 d1 f1) (t2tb3176 p) (t2tb2938 w))))
  (exists ((a2 (tuple21 d f)))
  (and (mem40 a2 w) (mem (tuple2 (tuple2 d1 f1) (set1 (tuple2 a1 b1)))
  (Tuple2 (tuple2 d1 f1) (set1 (tuple2 a1 b1)) (t2tb2952 a2) (t2tb11 x))
  (t2tb3176 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 d f) (tuple21 a b)))) (w (set (tuple21 d
  f))) (x (tuple21 a b)))
  (= (mem3 x
  (tb2t11 (image (tuple2 a1 b1) (tuple2 d1 f1) (t2tb3178 p) (t2tb2938 w))))
  (exists ((a2 (tuple21 d f)))
  (and (mem40 a2 w) (mem (tuple2 (tuple2 d1 f1) (tuple2 a1 b1))
  (Tuple2 (tuple2 d1 f1) (tuple2 a1 b1) (t2tb2952 a2) (t2tb13 x))
  (t2tb3178 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 d f) b))) (w (set (tuple21 d f))) (x b))
  (= (mem2 x (tb2t12 (image b1 (tuple2 d1 f1) (t2tb3180 p) (t2tb2938 w))))
  (exists ((a2 (tuple21 d f)))
  (and (mem40 a2 w) (mem (tuple2 (tuple2 d1 f1) b1)
  (Tuple2 (tuple2 d1 f1) b1 (t2tb2952 a2) (t2tb14 x)) (t2tb3180 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 d f) a))) (w (set (tuple21 d f))) (x a))
  (= (mem1 x (tb2t1 (image a1 (tuple2 d1 f1) (t2tb3182 p) (t2tb2938 w))))
  (exists ((a2 (tuple21 d f)))
  (and (mem40 a2 w) (mem (tuple2 (tuple2 d1 f1) a1)
  (Tuple2 (tuple2 d1 f1) a1 (t2tb2952 a2) (t2tb2 x)) (t2tb3182 p)))))))

;; mem_image
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (w (set (tuple21 d f))) (x uni))
  (= (mem b2 x (image b2 (tuple2 d1 f1) p (t2tb2938 w)))
  (exists ((a2 (tuple21 d f)))
  (and (mem40 a2 w) (mem (tuple2 (tuple2 d1 f1) b2)
  (Tuple2 (tuple2 d1 f1) b2 (t2tb2952 a2) x) p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 b e)) (tuple21 c f))))
  (w (set (set (tuple21 b e)))) (x (tuple21 c f)))
  (= (mem45 x
  (tb2t2942
  (image (tuple2 c1 f1) (set1 (tuple2 b1 e1)) (t2tb3184 p) (t2tb2941 w))))
  (exists ((a2 (set (tuple21 b e))))
  (and (mem39 a2 w) (mem (tuple2 (set1 (tuple2 b1 e1)) (tuple2 c1 f1))
  (Tuple2 (set1 (tuple2 b1 e1)) (tuple2 c1 f1) (t2tb2940 a2) (t2tb2948 x))
  (t2tb3184 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 b e)) (tuple21 a e))))
  (w (set (set (tuple21 b e)))) (x (tuple21 a e)))
  (= (mem44 x
  (tb2t2943
  (image (tuple2 a1 e1) (set1 (tuple2 b1 e1)) (t2tb3186 p) (t2tb2941 w))))
  (exists ((a2 (set (tuple21 b e))))
  (and (mem39 a2 w) (mem (tuple2 (set1 (tuple2 b1 e1)) (tuple2 a1 e1))
  (Tuple2 (set1 (tuple2 b1 e1)) (tuple2 a1 e1) (t2tb2940 a2) (t2tb2949 x))
  (t2tb3186 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 b e)) (tuple21 (tuple21 b d)
  (tuple21 e f))))) (w (set (set (tuple21 b e)))) (x (tuple21 (tuple21 b d)
  (tuple21 e f))))
  (= (mem43 x
  (tb2t2944
  (image (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (set1 (tuple2 b1 e1))
  (t2tb3188 p) (t2tb2941 w))))
  (exists ((a2 (set (tuple21 b e))))
  (and (mem39 a2 w) (mem
  (tuple2 (set1 (tuple2 b1 e1)) (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)))
  (Tuple2 (set1 (tuple2 b1 e1)) (tuple2 (tuple2 b1 d1) (tuple2 e1 f1))
  (t2tb2940 a2) (t2tb2950 x)) (t2tb3188 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 b e)) (tuple21 (tuple21 a c)
  (tuple21 e f))))) (w (set (set (tuple21 b e)))) (x (tuple21 (tuple21 a c)
  (tuple21 e f))))
  (= (mem42 x
  (tb2t2945
  (image (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (set1 (tuple2 b1 e1))
  (t2tb3190 p) (t2tb2941 w))))
  (exists ((a2 (set (tuple21 b e))))
  (and (mem39 a2 w) (mem
  (tuple2 (set1 (tuple2 b1 e1)) (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)))
  (Tuple2 (set1 (tuple2 b1 e1)) (tuple2 (tuple2 a1 c1) (tuple2 e1 f1))
  (t2tb2940 a2) (t2tb2951 x)) (t2tb3190 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 b e)) (set (tuple21 d f)))))
  (w (set (set (tuple21 b e)))) (x (set (tuple21 d f))))
  (= (mem41 x
  (tb2t2939
  (image (set1 (tuple2 d1 f1)) (set1 (tuple2 b1 e1)) (t2tb3192 p)
  (t2tb2941 w))))
  (exists ((a2 (set (tuple21 b e))))
  (and (mem39 a2 w) (mem (tuple2 (set1 (tuple2 b1 e1)) (set1 (tuple2 d1 f1)))
  (Tuple2 (set1 (tuple2 b1 e1)) (set1 (tuple2 d1 f1)) (t2tb2940 a2)
  (t2tb2938 x)) (t2tb3192 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 b e)) (tuple21 d f))))
  (w (set (set (tuple21 b e)))) (x (tuple21 d f)))
  (= (mem40 x
  (tb2t2938
  (image (tuple2 d1 f1) (set1 (tuple2 b1 e1)) (t2tb3194 p) (t2tb2941 w))))
  (exists ((a2 (set (tuple21 b e))))
  (and (mem39 a2 w) (mem (tuple2 (set1 (tuple2 b1 e1)) (tuple2 d1 f1))
  (Tuple2 (set1 (tuple2 b1 e1)) (tuple2 d1 f1) (t2tb2940 a2) (t2tb2952 x))
  (t2tb3194 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 b e)) (set (tuple21 b e)))))
  (w (set (set (tuple21 b e)))) (x (set (tuple21 b e))))
  (= (mem39 x
  (tb2t2941
  (image (set1 (tuple2 b1 e1)) (set1 (tuple2 b1 e1)) (t2tb3196 p)
  (t2tb2941 w))))
  (exists ((a2 (set (tuple21 b e))))
  (and (mem39 a2 w) (mem (tuple2 (set1 (tuple2 b1 e1)) (set1 (tuple2 b1 e1)))
  (Tuple2 (set1 (tuple2 b1 e1)) (set1 (tuple2 b1 e1)) (t2tb2940 a2)
  (t2tb2940 x)) (t2tb3196 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 b e)) (tuple21 b e))))
  (w (set (set (tuple21 b e)))) (x (tuple21 b e)))
  (= (mem38 x
  (tb2t2940
  (image (tuple2 b1 e1) (set1 (tuple2 b1 e1)) (t2tb3198 p) (t2tb2941 w))))
  (exists ((a2 (set (tuple21 b e))))
  (and (mem39 a2 w) (mem (tuple2 (set1 (tuple2 b1 e1)) (tuple2 b1 e1))
  (Tuple2 (set1 (tuple2 b1 e1)) (tuple2 b1 e1) (t2tb2940 a2) (t2tb2953 x))
  (t2tb3198 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 b e)) f))) (w (set (set (tuple21 b
  e)))) (x f))
  (= (mem37 x
  (tb2t2946 (image f1 (set1 (tuple2 b1 e1)) (t2tb3200 p) (t2tb2941 w))))
  (exists ((a2 (set (tuple21 b e))))
  (and (mem39 a2 w) (mem (tuple2 (set1 (tuple2 b1 e1)) f1)
  (Tuple2 (set1 (tuple2 b1 e1)) f1 (t2tb2940 a2) (t2tb2954 x)) (t2tb3200 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 b e)) e))) (w (set (set (tuple21 b
  e)))) (x e))
  (= (mem36 x
  (tb2t2947 (image e1 (set1 (tuple2 b1 e1)) (t2tb3202 p) (t2tb2941 w))))
  (exists ((a2 (set (tuple21 b e))))
  (and (mem39 a2 w) (mem (tuple2 (set1 (tuple2 b1 e1)) e1)
  (Tuple2 (set1 (tuple2 b1 e1)) e1 (t2tb2940 a2) (t2tb2955 x)) (t2tb3202 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 b e)) (tuple21 (tuple21 a c)
  (tuple21 b d))))) (w (set (set (tuple21 b e)))) (x (tuple21 (tuple21 a c)
  (tuple21 b d))))
  (= (mem24 x
  (tb2t686
  (image (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (set1 (tuple2 b1 e1))
  (t2tb3204 p) (t2tb2941 w))))
  (exists ((a2 (set (tuple21 b e))))
  (and (mem39 a2 w) (mem
  (tuple2 (set1 (tuple2 b1 e1)) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
  (Tuple2 (set1 (tuple2 b1 e1)) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))
  (t2tb2940 a2) (t2tb691 x)) (t2tb3204 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 b e)) (set (tuple21 c d)))))
  (w (set (set (tuple21 b e)))) (x (set (tuple21 c d))))
  (= (mem22 x
  (tb2t688
  (image (set1 (tuple2 c1 d1)) (set1 (tuple2 b1 e1)) (t2tb3206 p)
  (t2tb2941 w))))
  (exists ((a2 (set (tuple21 b e))))
  (and (mem39 a2 w) (mem (tuple2 (set1 (tuple2 b1 e1)) (set1 (tuple2 c1 d1)))
  (Tuple2 (set1 (tuple2 b1 e1)) (set1 (tuple2 c1 d1)) (t2tb2940 a2)
  (t2tb689 x)) (t2tb3206 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 b e)) (tuple21 c d))))
  (w (set (set (tuple21 b e)))) (x (tuple21 c d)))
  (= (mem21 x
  (tb2t689
  (image (tuple2 c1 d1) (set1 (tuple2 b1 e1)) (t2tb3208 p) (t2tb2941 w))))
  (exists ((a2 (set (tuple21 b e))))
  (and (mem39 a2 w) (mem (tuple2 (set1 (tuple2 b1 e1)) (tuple2 c1 d1))
  (Tuple2 (set1 (tuple2 b1 e1)) (tuple2 c1 d1) (t2tb2940 a2) (t2tb693 x))
  (t2tb3208 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 b e)) d))) (w (set (set (tuple21 b
  e)))) (x d))
  (= (mem20 x
  (tb2t690 (image d1 (set1 (tuple2 b1 e1)) (t2tb3210 p) (t2tb2941 w))))
  (exists ((a2 (set (tuple21 b e))))
  (and (mem39 a2 w) (mem (tuple2 (set1 (tuple2 b1 e1)) d1)
  (Tuple2 (set1 (tuple2 b1 e1)) d1 (t2tb2940 a2) (t2tb694 x)) (t2tb3210 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 b e)) c))) (w (set (set (tuple21 b
  e)))) (x c))
  (= (mem7 x
  (tb2t132 (image c1 (set1 (tuple2 b1 e1)) (t2tb3212 p) (t2tb2941 w))))
  (exists ((a2 (set (tuple21 b e))))
  (and (mem39 a2 w) (mem (tuple2 (set1 (tuple2 b1 e1)) c1)
  (Tuple2 (set1 (tuple2 b1 e1)) c1 (t2tb2940 a2) (t2tb135 x)) (t2tb3212 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 b e)) (set (tuple21 a b)))))
  (w (set (set (tuple21 b e)))) (x (set (tuple21 a b))))
  (= (mem4 x
  (tb2t10
  (image (set1 (tuple2 a1 b1)) (set1 (tuple2 b1 e1)) (t2tb3214 p)
  (t2tb2941 w))))
  (exists ((a2 (set (tuple21 b e))))
  (and (mem39 a2 w) (mem (tuple2 (set1 (tuple2 b1 e1)) (set1 (tuple2 a1 b1)))
  (Tuple2 (set1 (tuple2 b1 e1)) (set1 (tuple2 a1 b1)) (t2tb2940 a2)
  (t2tb11 x)) (t2tb3214 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 b e)) (tuple21 a b))))
  (w (set (set (tuple21 b e)))) (x (tuple21 a b)))
  (= (mem3 x
  (tb2t11
  (image (tuple2 a1 b1) (set1 (tuple2 b1 e1)) (t2tb3216 p) (t2tb2941 w))))
  (exists ((a2 (set (tuple21 b e))))
  (and (mem39 a2 w) (mem (tuple2 (set1 (tuple2 b1 e1)) (tuple2 a1 b1))
  (Tuple2 (set1 (tuple2 b1 e1)) (tuple2 a1 b1) (t2tb2940 a2) (t2tb13 x))
  (t2tb3216 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 b e)) b))) (w (set (set (tuple21 b
  e)))) (x b))
  (= (mem2 x
  (tb2t12 (image b1 (set1 (tuple2 b1 e1)) (t2tb3218 p) (t2tb2941 w))))
  (exists ((a2 (set (tuple21 b e))))
  (and (mem39 a2 w) (mem (tuple2 (set1 (tuple2 b1 e1)) b1)
  (Tuple2 (set1 (tuple2 b1 e1)) b1 (t2tb2940 a2) (t2tb14 x)) (t2tb3218 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 b e)) a))) (w (set (set (tuple21 b
  e)))) (x a))
  (= (mem1 x
  (tb2t1 (image a1 (set1 (tuple2 b1 e1)) (t2tb3220 p) (t2tb2941 w))))
  (exists ((a2 (set (tuple21 b e))))
  (and (mem39 a2 w) (mem (tuple2 (set1 (tuple2 b1 e1)) a1)
  (Tuple2 (set1 (tuple2 b1 e1)) a1 (t2tb2940 a2) (t2tb2 x)) (t2tb3220 p)))))))

;; mem_image
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (w (set (set (tuple21 b e)))) (x uni))
  (= (mem b2 x (image b2 (set1 (tuple2 b1 e1)) p (t2tb2941 w)))
  (exists ((a2 (set (tuple21 b e))))
  (and (mem39 a2 w) (mem (tuple2 (set1 (tuple2 b1 e1)) b2)
  (Tuple2 (set1 (tuple2 b1 e1)) b2 (t2tb2940 a2) x) p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 b e) (tuple21 c f)))) (w (set (tuple21 b
  e))) (x (tuple21 c f)))
  (= (mem45 x
  (tb2t2942 (image (tuple2 c1 f1) (tuple2 b1 e1) (t2tb3222 p) (t2tb2940 w))))
  (exists ((a2 (tuple21 b e)))
  (and (mem38 a2 w) (mem (tuple2 (tuple2 b1 e1) (tuple2 c1 f1))
  (Tuple2 (tuple2 b1 e1) (tuple2 c1 f1) (t2tb2953 a2) (t2tb2948 x))
  (t2tb3222 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 b e) (tuple21 a e)))) (w (set (tuple21 b
  e))) (x (tuple21 a e)))
  (= (mem44 x
  (tb2t2943 (image (tuple2 a1 e1) (tuple2 b1 e1) (t2tb3224 p) (t2tb2940 w))))
  (exists ((a2 (tuple21 b e)))
  (and (mem38 a2 w) (mem (tuple2 (tuple2 b1 e1) (tuple2 a1 e1))
  (Tuple2 (tuple2 b1 e1) (tuple2 a1 e1) (t2tb2953 a2) (t2tb2949 x))
  (t2tb3224 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 b e) (tuple21 (tuple21 b d) (tuple21 e
  f))))) (w (set (tuple21 b e))) (x (tuple21 (tuple21 b d) (tuple21 e f))))
  (= (mem43 x
  (tb2t2944
  (image (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (tuple2 b1 e1) (t2tb3226 p)
  (t2tb2940 w))))
  (exists ((a2 (tuple21 b e)))
  (and (mem38 a2 w) (mem
  (tuple2 (tuple2 b1 e1) (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)))
  (Tuple2 (tuple2 b1 e1) (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (t2tb2953 a2)
  (t2tb2950 x)) (t2tb3226 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 b e) (tuple21 (tuple21 a c) (tuple21 e
  f))))) (w (set (tuple21 b e))) (x (tuple21 (tuple21 a c) (tuple21 e f))))
  (= (mem42 x
  (tb2t2945
  (image (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (tuple2 b1 e1) (t2tb3228 p)
  (t2tb2940 w))))
  (exists ((a2 (tuple21 b e)))
  (and (mem38 a2 w) (mem
  (tuple2 (tuple2 b1 e1) (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)))
  (Tuple2 (tuple2 b1 e1) (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (t2tb2953 a2)
  (t2tb2951 x)) (t2tb3228 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 b e) (set (tuple21 d f)))))
  (w (set (tuple21 b e))) (x (set (tuple21 d f))))
  (= (mem41 x
  (tb2t2939
  (image (set1 (tuple2 d1 f1)) (tuple2 b1 e1) (t2tb3230 p) (t2tb2940 w))))
  (exists ((a2 (tuple21 b e)))
  (and (mem38 a2 w) (mem (tuple2 (tuple2 b1 e1) (set1 (tuple2 d1 f1)))
  (Tuple2 (tuple2 b1 e1) (set1 (tuple2 d1 f1)) (t2tb2953 a2) (t2tb2938 x))
  (t2tb3230 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 b e) (tuple21 d f)))) (w (set (tuple21 b
  e))) (x (tuple21 d f)))
  (= (mem40 x
  (tb2t2938 (image (tuple2 d1 f1) (tuple2 b1 e1) (t2tb3232 p) (t2tb2940 w))))
  (exists ((a2 (tuple21 b e)))
  (and (mem38 a2 w) (mem (tuple2 (tuple2 b1 e1) (tuple2 d1 f1))
  (Tuple2 (tuple2 b1 e1) (tuple2 d1 f1) (t2tb2953 a2) (t2tb2952 x))
  (t2tb3232 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 b e) (set (tuple21 b e)))))
  (w (set (tuple21 b e))) (x (set (tuple21 b e))))
  (= (mem39 x
  (tb2t2941
  (image (set1 (tuple2 b1 e1)) (tuple2 b1 e1) (t2tb3234 p) (t2tb2940 w))))
  (exists ((a2 (tuple21 b e)))
  (and (mem38 a2 w) (mem (tuple2 (tuple2 b1 e1) (set1 (tuple2 b1 e1)))
  (Tuple2 (tuple2 b1 e1) (set1 (tuple2 b1 e1)) (t2tb2953 a2) (t2tb2940 x))
  (t2tb3234 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 b e) (tuple21 b e)))) (w (set (tuple21 b
  e))) (x (tuple21 b e)))
  (= (mem38 x
  (tb2t2940 (image (tuple2 b1 e1) (tuple2 b1 e1) (t2tb3236 p) (t2tb2940 w))))
  (exists ((a2 (tuple21 b e)))
  (and (mem38 a2 w) (mem (tuple2 (tuple2 b1 e1) (tuple2 b1 e1))
  (Tuple2 (tuple2 b1 e1) (tuple2 b1 e1) (t2tb2953 a2) (t2tb2953 x))
  (t2tb3236 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 b e) f))) (w (set (tuple21 b e))) (x f))
  (= (mem37 x (tb2t2946 (image f1 (tuple2 b1 e1) (t2tb3238 p) (t2tb2940 w))))
  (exists ((a2 (tuple21 b e)))
  (and (mem38 a2 w) (mem (tuple2 (tuple2 b1 e1) f1)
  (Tuple2 (tuple2 b1 e1) f1 (t2tb2953 a2) (t2tb2954 x)) (t2tb3238 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 b e) e))) (w (set (tuple21 b e))) (x e))
  (= (mem36 x (tb2t2947 (image e1 (tuple2 b1 e1) (t2tb3240 p) (t2tb2940 w))))
  (exists ((a2 (tuple21 b e)))
  (and (mem38 a2 w) (mem (tuple2 (tuple2 b1 e1) e1)
  (Tuple2 (tuple2 b1 e1) e1 (t2tb2953 a2) (t2tb2955 x)) (t2tb3240 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 b e) (tuple21 (tuple21 a c) (tuple21 b
  d))))) (w (set (tuple21 b e))) (x (tuple21 (tuple21 a c) (tuple21 b d))))
  (= (mem24 x
  (tb2t686
  (image (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 b1 e1) (t2tb3242 p)
  (t2tb2940 w))))
  (exists ((a2 (tuple21 b e)))
  (and (mem38 a2 w) (mem
  (tuple2 (tuple2 b1 e1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
  (Tuple2 (tuple2 b1 e1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb2953 a2)
  (t2tb691 x)) (t2tb3242 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 b e) (set (tuple21 c d)))))
  (w (set (tuple21 b e))) (x (set (tuple21 c d))))
  (= (mem22 x
  (tb2t688
  (image (set1 (tuple2 c1 d1)) (tuple2 b1 e1) (t2tb3244 p) (t2tb2940 w))))
  (exists ((a2 (tuple21 b e)))
  (and (mem38 a2 w) (mem (tuple2 (tuple2 b1 e1) (set1 (tuple2 c1 d1)))
  (Tuple2 (tuple2 b1 e1) (set1 (tuple2 c1 d1)) (t2tb2953 a2) (t2tb689 x))
  (t2tb3244 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 b e) (tuple21 c d)))) (w (set (tuple21 b
  e))) (x (tuple21 c d)))
  (= (mem21 x
  (tb2t689 (image (tuple2 c1 d1) (tuple2 b1 e1) (t2tb3246 p) (t2tb2940 w))))
  (exists ((a2 (tuple21 b e)))
  (and (mem38 a2 w) (mem (tuple2 (tuple2 b1 e1) (tuple2 c1 d1))
  (Tuple2 (tuple2 b1 e1) (tuple2 c1 d1) (t2tb2953 a2) (t2tb693 x))
  (t2tb3246 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 b e) d))) (w (set (tuple21 b e))) (x d))
  (= (mem20 x (tb2t690 (image d1 (tuple2 b1 e1) (t2tb3248 p) (t2tb2940 w))))
  (exists ((a2 (tuple21 b e)))
  (and (mem38 a2 w) (mem (tuple2 (tuple2 b1 e1) d1)
  (Tuple2 (tuple2 b1 e1) d1 (t2tb2953 a2) (t2tb694 x)) (t2tb3248 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 b e) c))) (w (set (tuple21 b e))) (x c))
  (= (mem7 x (tb2t132 (image c1 (tuple2 b1 e1) (t2tb3250 p) (t2tb2940 w))))
  (exists ((a2 (tuple21 b e)))
  (and (mem38 a2 w) (mem (tuple2 (tuple2 b1 e1) c1)
  (Tuple2 (tuple2 b1 e1) c1 (t2tb2953 a2) (t2tb135 x)) (t2tb3250 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 b e) (set (tuple21 a b)))))
  (w (set (tuple21 b e))) (x (set (tuple21 a b))))
  (= (mem4 x
  (tb2t10
  (image (set1 (tuple2 a1 b1)) (tuple2 b1 e1) (t2tb3252 p) (t2tb2940 w))))
  (exists ((a2 (tuple21 b e)))
  (and (mem38 a2 w) (mem (tuple2 (tuple2 b1 e1) (set1 (tuple2 a1 b1)))
  (Tuple2 (tuple2 b1 e1) (set1 (tuple2 a1 b1)) (t2tb2953 a2) (t2tb11 x))
  (t2tb3252 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 b e) (tuple21 a b)))) (w (set (tuple21 b
  e))) (x (tuple21 a b)))
  (= (mem3 x
  (tb2t11 (image (tuple2 a1 b1) (tuple2 b1 e1) (t2tb3254 p) (t2tb2940 w))))
  (exists ((a2 (tuple21 b e)))
  (and (mem38 a2 w) (mem (tuple2 (tuple2 b1 e1) (tuple2 a1 b1))
  (Tuple2 (tuple2 b1 e1) (tuple2 a1 b1) (t2tb2953 a2) (t2tb13 x))
  (t2tb3254 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 b e) b))) (w (set (tuple21 b e))) (x b))
  (= (mem2 x (tb2t12 (image b1 (tuple2 b1 e1) (t2tb3256 p) (t2tb2940 w))))
  (exists ((a2 (tuple21 b e)))
  (and (mem38 a2 w) (mem (tuple2 (tuple2 b1 e1) b1)
  (Tuple2 (tuple2 b1 e1) b1 (t2tb2953 a2) (t2tb14 x)) (t2tb3256 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 b e) a))) (w (set (tuple21 b e))) (x a))
  (= (mem1 x (tb2t1 (image a1 (tuple2 b1 e1) (t2tb3258 p) (t2tb2940 w))))
  (exists ((a2 (tuple21 b e)))
  (and (mem38 a2 w) (mem (tuple2 (tuple2 b1 e1) a1)
  (Tuple2 (tuple2 b1 e1) a1 (t2tb2953 a2) (t2tb2 x)) (t2tb3258 p)))))))

;; mem_image
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (w (set (tuple21 b e))) (x uni))
  (= (mem b2 x (image b2 (tuple2 b1 e1) p (t2tb2940 w)))
  (exists ((a2 (tuple21 b e)))
  (and (mem38 a2 w) (mem (tuple2 (tuple2 b1 e1) b2)
  (Tuple2 (tuple2 b1 e1) b2 (t2tb2953 a2) x) p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 f (tuple21 c f)))) (w (set f)) (x (tuple21 c f)))
  (= (mem45 x (tb2t2942 (image (tuple2 c1 f1) f1 (t2tb3260 p) (t2tb2946 w))))
  (exists ((a2 f))
  (and (mem37 a2 w) (mem (tuple2 f1 (tuple2 c1 f1))
  (Tuple2 f1 (tuple2 c1 f1) (t2tb2954 a2) (t2tb2948 x)) (t2tb3260 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 f (tuple21 a e)))) (w (set f)) (x (tuple21 a e)))
  (= (mem44 x (tb2t2943 (image (tuple2 a1 e1) f1 (t2tb3262 p) (t2tb2946 w))))
  (exists ((a2 f))
  (and (mem37 a2 w) (mem (tuple2 f1 (tuple2 a1 e1))
  (Tuple2 f1 (tuple2 a1 e1) (t2tb2954 a2) (t2tb2949 x)) (t2tb3262 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 f (tuple21 (tuple21 b d) (tuple21 e f)))))
  (w (set f)) (x (tuple21 (tuple21 b d) (tuple21 e f))))
  (= (mem43 x
  (tb2t2944
  (image (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) f1 (t2tb3264 p) (t2tb2946 w))))
  (exists ((a2 f))
  (and (mem37 a2 w) (mem (tuple2 f1 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)))
  (Tuple2 f1 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (t2tb2954 a2)
  (t2tb2950 x)) (t2tb3264 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 f (tuple21 (tuple21 a c) (tuple21 e f)))))
  (w (set f)) (x (tuple21 (tuple21 a c) (tuple21 e f))))
  (= (mem42 x
  (tb2t2945
  (image (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) f1 (t2tb3266 p) (t2tb2946 w))))
  (exists ((a2 f))
  (and (mem37 a2 w) (mem (tuple2 f1 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)))
  (Tuple2 f1 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (t2tb2954 a2)
  (t2tb2951 x)) (t2tb3266 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 f (set (tuple21 d f))))) (w (set f))
  (x (set (tuple21 d f))))
  (= (mem41 x
  (tb2t2939 (image (set1 (tuple2 d1 f1)) f1 (t2tb3268 p) (t2tb2946 w))))
  (exists ((a2 f))
  (and (mem37 a2 w) (mem (tuple2 f1 (set1 (tuple2 d1 f1)))
  (Tuple2 f1 (set1 (tuple2 d1 f1)) (t2tb2954 a2) (t2tb2938 x)) (t2tb3268 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 f (tuple21 d f)))) (w (set f)) (x (tuple21 d f)))
  (= (mem40 x (tb2t2938 (image (tuple2 d1 f1) f1 (t2tb3270 p) (t2tb2946 w))))
  (exists ((a2 f))
  (and (mem37 a2 w) (mem (tuple2 f1 (tuple2 d1 f1))
  (Tuple2 f1 (tuple2 d1 f1) (t2tb2954 a2) (t2tb2952 x)) (t2tb3270 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 f (set (tuple21 b e))))) (w (set f))
  (x (set (tuple21 b e))))
  (= (mem39 x
  (tb2t2941 (image (set1 (tuple2 b1 e1)) f1 (t2tb3272 p) (t2tb2946 w))))
  (exists ((a2 f))
  (and (mem37 a2 w) (mem (tuple2 f1 (set1 (tuple2 b1 e1)))
  (Tuple2 f1 (set1 (tuple2 b1 e1)) (t2tb2954 a2) (t2tb2940 x)) (t2tb3272 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 f (tuple21 b e)))) (w (set f)) (x (tuple21 b e)))
  (= (mem38 x (tb2t2940 (image (tuple2 b1 e1) f1 (t2tb3274 p) (t2tb2946 w))))
  (exists ((a2 f))
  (and (mem37 a2 w) (mem (tuple2 f1 (tuple2 b1 e1))
  (Tuple2 f1 (tuple2 b1 e1) (t2tb2954 a2) (t2tb2953 x)) (t2tb3274 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 f f))) (w (set f)) (x f))
  (= (mem37 x (tb2t2946 (image f1 f1 (t2tb3276 p) (t2tb2946 w))))
  (exists ((a2 f))
  (and (mem37 a2 w) (mem (tuple2 f1 f1)
  (Tuple2 f1 f1 (t2tb2954 a2) (t2tb2954 x)) (t2tb3276 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 f e))) (w (set f)) (x e))
  (= (mem36 x (tb2t2947 (image e1 f1 (t2tb3278 p) (t2tb2946 w))))
  (exists ((a2 f))
  (and (mem37 a2 w) (mem (tuple2 f1 e1)
  (Tuple2 f1 e1 (t2tb2954 a2) (t2tb2955 x)) (t2tb3278 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 f (tuple21 (tuple21 a c) (tuple21 b d)))))
  (w (set f)) (x (tuple21 (tuple21 a c) (tuple21 b d))))
  (= (mem24 x
  (tb2t686
  (image (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) f1 (t2tb3280 p) (t2tb2946 w))))
  (exists ((a2 f))
  (and (mem37 a2 w) (mem (tuple2 f1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
  (Tuple2 f1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb2954 a2)
  (t2tb691 x)) (t2tb3280 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 f (set (tuple21 c d))))) (w (set f))
  (x (set (tuple21 c d))))
  (= (mem22 x
  (tb2t688 (image (set1 (tuple2 c1 d1)) f1 (t2tb3282 p) (t2tb2946 w))))
  (exists ((a2 f))
  (and (mem37 a2 w) (mem (tuple2 f1 (set1 (tuple2 c1 d1)))
  (Tuple2 f1 (set1 (tuple2 c1 d1)) (t2tb2954 a2) (t2tb689 x)) (t2tb3282 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 f (tuple21 c d)))) (w (set f)) (x (tuple21 c d)))
  (= (mem21 x (tb2t689 (image (tuple2 c1 d1) f1 (t2tb3284 p) (t2tb2946 w))))
  (exists ((a2 f))
  (and (mem37 a2 w) (mem (tuple2 f1 (tuple2 c1 d1))
  (Tuple2 f1 (tuple2 c1 d1) (t2tb2954 a2) (t2tb693 x)) (t2tb3284 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 f d))) (w (set f)) (x d))
  (= (mem20 x (tb2t690 (image d1 f1 (t2tb3286 p) (t2tb2946 w))))
  (exists ((a2 f))
  (and (mem37 a2 w) (mem (tuple2 f1 d1)
  (Tuple2 f1 d1 (t2tb2954 a2) (t2tb694 x)) (t2tb3286 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 f c))) (w (set f)) (x c))
  (= (mem7 x (tb2t132 (image c1 f1 (t2tb3288 p) (t2tb2946 w))))
  (exists ((a2 f))
  (and (mem37 a2 w) (mem (tuple2 f1 c1)
  (Tuple2 f1 c1 (t2tb2954 a2) (t2tb135 x)) (t2tb3288 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 f (set (tuple21 a b))))) (w (set f))
  (x (set (tuple21 a b))))
  (= (mem4 x
  (tb2t10 (image (set1 (tuple2 a1 b1)) f1 (t2tb3290 p) (t2tb2946 w))))
  (exists ((a2 f))
  (and (mem37 a2 w) (mem (tuple2 f1 (set1 (tuple2 a1 b1)))
  (Tuple2 f1 (set1 (tuple2 a1 b1)) (t2tb2954 a2) (t2tb11 x)) (t2tb3290 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 f (tuple21 a b)))) (w (set f)) (x (tuple21 a b)))
  (= (mem3 x (tb2t11 (image (tuple2 a1 b1) f1 (t2tb3292 p) (t2tb2946 w))))
  (exists ((a2 f))
  (and (mem37 a2 w) (mem (tuple2 f1 (tuple2 a1 b1))
  (Tuple2 f1 (tuple2 a1 b1) (t2tb2954 a2) (t2tb13 x)) (t2tb3292 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 f b))) (w (set f)) (x b))
  (= (mem2 x (tb2t12 (image b1 f1 (t2tb3294 p) (t2tb2946 w))))
  (exists ((a2 f))
  (and (mem37 a2 w) (mem (tuple2 f1 b1)
  (Tuple2 f1 b1 (t2tb2954 a2) (t2tb14 x)) (t2tb3294 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 f a))) (w (set f)) (x a))
  (= (mem1 x (tb2t1 (image a1 f1 (t2tb3296 p) (t2tb2946 w))))
  (exists ((a2 f))
  (and (mem37 a2 w) (mem (tuple2 f1 a1)
  (Tuple2 f1 a1 (t2tb2954 a2) (t2tb2 x)) (t2tb3296 p)))))))

;; mem_image
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (w (set f)) (x uni))
  (= (mem b2 x (image b2 f1 p (t2tb2946 w)))
  (exists ((a2 f))
  (and (mem37 a2 w) (mem (tuple2 f1 b2) (Tuple2 f1 b2 (t2tb2954 a2) x) p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 e (tuple21 c f)))) (w (set e)) (x (tuple21 c f)))
  (= (mem45 x (tb2t2942 (image (tuple2 c1 f1) e1 (t2tb3298 p) (t2tb2947 w))))
  (exists ((a2 e))
  (and (mem36 a2 w) (mem (tuple2 e1 (tuple2 c1 f1))
  (Tuple2 e1 (tuple2 c1 f1) (t2tb2955 a2) (t2tb2948 x)) (t2tb3298 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 e (tuple21 a e)))) (w (set e)) (x (tuple21 a e)))
  (= (mem44 x (tb2t2943 (image (tuple2 a1 e1) e1 (t2tb3300 p) (t2tb2947 w))))
  (exists ((a2 e))
  (and (mem36 a2 w) (mem (tuple2 e1 (tuple2 a1 e1))
  (Tuple2 e1 (tuple2 a1 e1) (t2tb2955 a2) (t2tb2949 x)) (t2tb3300 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 e (tuple21 (tuple21 b d) (tuple21 e f)))))
  (w (set e)) (x (tuple21 (tuple21 b d) (tuple21 e f))))
  (= (mem43 x
  (tb2t2944
  (image (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) e1 (t2tb3302 p) (t2tb2947 w))))
  (exists ((a2 e))
  (and (mem36 a2 w) (mem (tuple2 e1 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)))
  (Tuple2 e1 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (t2tb2955 a2)
  (t2tb2950 x)) (t2tb3302 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 e (tuple21 (tuple21 a c) (tuple21 e f)))))
  (w (set e)) (x (tuple21 (tuple21 a c) (tuple21 e f))))
  (= (mem42 x
  (tb2t2945
  (image (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) e1 (t2tb3304 p) (t2tb2947 w))))
  (exists ((a2 e))
  (and (mem36 a2 w) (mem (tuple2 e1 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)))
  (Tuple2 e1 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (t2tb2955 a2)
  (t2tb2951 x)) (t2tb3304 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 e (set (tuple21 d f))))) (w (set e))
  (x (set (tuple21 d f))))
  (= (mem41 x
  (tb2t2939 (image (set1 (tuple2 d1 f1)) e1 (t2tb3306 p) (t2tb2947 w))))
  (exists ((a2 e))
  (and (mem36 a2 w) (mem (tuple2 e1 (set1 (tuple2 d1 f1)))
  (Tuple2 e1 (set1 (tuple2 d1 f1)) (t2tb2955 a2) (t2tb2938 x)) (t2tb3306 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 e (tuple21 d f)))) (w (set e)) (x (tuple21 d f)))
  (= (mem40 x (tb2t2938 (image (tuple2 d1 f1) e1 (t2tb3308 p) (t2tb2947 w))))
  (exists ((a2 e))
  (and (mem36 a2 w) (mem (tuple2 e1 (tuple2 d1 f1))
  (Tuple2 e1 (tuple2 d1 f1) (t2tb2955 a2) (t2tb2952 x)) (t2tb3308 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 e (set (tuple21 b e))))) (w (set e))
  (x (set (tuple21 b e))))
  (= (mem39 x
  (tb2t2941 (image (set1 (tuple2 b1 e1)) e1 (t2tb3310 p) (t2tb2947 w))))
  (exists ((a2 e))
  (and (mem36 a2 w) (mem (tuple2 e1 (set1 (tuple2 b1 e1)))
  (Tuple2 e1 (set1 (tuple2 b1 e1)) (t2tb2955 a2) (t2tb2940 x)) (t2tb3310 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 e (tuple21 b e)))) (w (set e)) (x (tuple21 b e)))
  (= (mem38 x (tb2t2940 (image (tuple2 b1 e1) e1 (t2tb3312 p) (t2tb2947 w))))
  (exists ((a2 e))
  (and (mem36 a2 w) (mem (tuple2 e1 (tuple2 b1 e1))
  (Tuple2 e1 (tuple2 b1 e1) (t2tb2955 a2) (t2tb2953 x)) (t2tb3312 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 e f))) (w (set e)) (x f))
  (= (mem37 x (tb2t2946 (image f1 e1 (t2tb3314 p) (t2tb2947 w))))
  (exists ((a2 e))
  (and (mem36 a2 w) (mem (tuple2 e1 f1)
  (Tuple2 e1 f1 (t2tb2955 a2) (t2tb2954 x)) (t2tb3314 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 e e))) (w (set e)) (x e))
  (= (mem36 x (tb2t2947 (image e1 e1 (t2tb3316 p) (t2tb2947 w))))
  (exists ((a2 e))
  (and (mem36 a2 w) (mem (tuple2 e1 e1)
  (Tuple2 e1 e1 (t2tb2955 a2) (t2tb2955 x)) (t2tb3316 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 e (tuple21 (tuple21 a c) (tuple21 b d)))))
  (w (set e)) (x (tuple21 (tuple21 a c) (tuple21 b d))))
  (= (mem24 x
  (tb2t686
  (image (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) e1 (t2tb3318 p) (t2tb2947 w))))
  (exists ((a2 e))
  (and (mem36 a2 w) (mem (tuple2 e1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
  (Tuple2 e1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb2955 a2)
  (t2tb691 x)) (t2tb3318 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 e (set (tuple21 c d))))) (w (set e))
  (x (set (tuple21 c d))))
  (= (mem22 x
  (tb2t688 (image (set1 (tuple2 c1 d1)) e1 (t2tb3320 p) (t2tb2947 w))))
  (exists ((a2 e))
  (and (mem36 a2 w) (mem (tuple2 e1 (set1 (tuple2 c1 d1)))
  (Tuple2 e1 (set1 (tuple2 c1 d1)) (t2tb2955 a2) (t2tb689 x)) (t2tb3320 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 e (tuple21 c d)))) (w (set e)) (x (tuple21 c d)))
  (= (mem21 x (tb2t689 (image (tuple2 c1 d1) e1 (t2tb3322 p) (t2tb2947 w))))
  (exists ((a2 e))
  (and (mem36 a2 w) (mem (tuple2 e1 (tuple2 c1 d1))
  (Tuple2 e1 (tuple2 c1 d1) (t2tb2955 a2) (t2tb693 x)) (t2tb3322 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 e d))) (w (set e)) (x d))
  (= (mem20 x (tb2t690 (image d1 e1 (t2tb3324 p) (t2tb2947 w))))
  (exists ((a2 e))
  (and (mem36 a2 w) (mem (tuple2 e1 d1)
  (Tuple2 e1 d1 (t2tb2955 a2) (t2tb694 x)) (t2tb3324 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 e c))) (w (set e)) (x c))
  (= (mem7 x (tb2t132 (image c1 e1 (t2tb3326 p) (t2tb2947 w))))
  (exists ((a2 e))
  (and (mem36 a2 w) (mem (tuple2 e1 c1)
  (Tuple2 e1 c1 (t2tb2955 a2) (t2tb135 x)) (t2tb3326 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 e (set (tuple21 a b))))) (w (set e))
  (x (set (tuple21 a b))))
  (= (mem4 x
  (tb2t10 (image (set1 (tuple2 a1 b1)) e1 (t2tb3328 p) (t2tb2947 w))))
  (exists ((a2 e))
  (and (mem36 a2 w) (mem (tuple2 e1 (set1 (tuple2 a1 b1)))
  (Tuple2 e1 (set1 (tuple2 a1 b1)) (t2tb2955 a2) (t2tb11 x)) (t2tb3328 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 e (tuple21 a b)))) (w (set e)) (x (tuple21 a b)))
  (= (mem3 x (tb2t11 (image (tuple2 a1 b1) e1 (t2tb3330 p) (t2tb2947 w))))
  (exists ((a2 e))
  (and (mem36 a2 w) (mem (tuple2 e1 (tuple2 a1 b1))
  (Tuple2 e1 (tuple2 a1 b1) (t2tb2955 a2) (t2tb13 x)) (t2tb3330 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 e b))) (w (set e)) (x b))
  (= (mem2 x (tb2t12 (image b1 e1 (t2tb3332 p) (t2tb2947 w))))
  (exists ((a2 e))
  (and (mem36 a2 w) (mem (tuple2 e1 b1)
  (Tuple2 e1 b1 (t2tb2955 a2) (t2tb14 x)) (t2tb3332 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 e a))) (w (set e)) (x a))
  (= (mem1 x (tb2t1 (image a1 e1 (t2tb3334 p) (t2tb2947 w))))
  (exists ((a2 e))
  (and (mem36 a2 w) (mem (tuple2 e1 a1)
  (Tuple2 e1 a1 (t2tb2955 a2) (t2tb2 x)) (t2tb3334 p)))))))

;; mem_image
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (w (set e)) (x uni))
  (= (mem b2 x (image b2 e1 p (t2tb2947 w)))
  (exists ((a2 e))
  (and (mem36 a2 w) (mem (tuple2 e1 b2) (Tuple2 e1 b2 (t2tb2955 a2) x) p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) (tuple21 c
  f)))) (w (set (tuple21 (tuple21 a c) (tuple21 b d)))) (x (tuple21 c f)))
  (= (mem45 x
  (tb2t2942
  (image (tuple2 c1 f1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb3336 p)
  (t2tb686 w))))
  (exists ((a2 (tuple21 (tuple21 a c) (tuple21 b d))))
  (and (mem24 a2 w) (mem
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 c1 f1))
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 c1 f1) (t2tb691 a2)
  (t2tb2948 x)) (t2tb3336 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) (tuple21 a
  e)))) (w (set (tuple21 (tuple21 a c) (tuple21 b d)))) (x (tuple21 a e)))
  (= (mem44 x
  (tb2t2943
  (image (tuple2 a1 e1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb3338 p)
  (t2tb686 w))))
  (exists ((a2 (tuple21 (tuple21 a c) (tuple21 b d))))
  (and (mem24 a2 w) (mem
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 a1 e1))
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 a1 e1) (t2tb691 a2)
  (t2tb2949 x)) (t2tb3338 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  (tuple21 (tuple21 b d) (tuple21 e f))))) (w (set (tuple21 (tuple21 a c)
  (tuple21 b d)))) (x (tuple21 (tuple21 b d) (tuple21 e f))))
  (= (mem43 x
  (tb2t2944
  (image (tuple2 (tuple2 b1 d1) (tuple2 e1 f1))
  (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb3340 p) (t2tb686 w))))
  (exists ((a2 (tuple21 (tuple21 a c) (tuple21 b d))))
  (and (mem24 a2 w) (mem
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))
  (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)))
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))
  (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (t2tb691 a2) (t2tb2950 x))
  (t2tb3340 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  (tuple21 (tuple21 a c) (tuple21 e f))))) (w (set (tuple21 (tuple21 a c)
  (tuple21 b d)))) (x (tuple21 (tuple21 a c) (tuple21 e f))))
  (= (mem42 x
  (tb2t2945
  (image (tuple2 (tuple2 a1 c1) (tuple2 e1 f1))
  (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb3342 p) (t2tb686 w))))
  (exists ((a2 (tuple21 (tuple21 a c) (tuple21 b d))))
  (and (mem24 a2 w) (mem
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))
  (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)))
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))
  (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (t2tb691 a2) (t2tb2951 x))
  (t2tb3342 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  (set (tuple21 d f))))) (w (set (tuple21 (tuple21 a c) (tuple21 b d))))
  (x (set (tuple21 d f))))
  (= (mem41 x
  (tb2t2939
  (image (set1 (tuple2 d1 f1)) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))
  (t2tb3344 p) (t2tb686 w))))
  (exists ((a2 (tuple21 (tuple21 a c) (tuple21 b d))))
  (and (mem24 a2 w) (mem
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (set1 (tuple2 d1 f1)))
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (set1 (tuple2 d1 f1))
  (t2tb691 a2) (t2tb2938 x)) (t2tb3344 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) (tuple21 d
  f)))) (w (set (tuple21 (tuple21 a c) (tuple21 b d)))) (x (tuple21 d f)))
  (= (mem40 x
  (tb2t2938
  (image (tuple2 d1 f1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb3346 p)
  (t2tb686 w))))
  (exists ((a2 (tuple21 (tuple21 a c) (tuple21 b d))))
  (and (mem24 a2 w) (mem
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 d1 f1))
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 d1 f1) (t2tb691 a2)
  (t2tb2952 x)) (t2tb3346 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  (set (tuple21 b e))))) (w (set (tuple21 (tuple21 a c) (tuple21 b d))))
  (x (set (tuple21 b e))))
  (= (mem39 x
  (tb2t2941
  (image (set1 (tuple2 b1 e1)) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))
  (t2tb3348 p) (t2tb686 w))))
  (exists ((a2 (tuple21 (tuple21 a c) (tuple21 b d))))
  (and (mem24 a2 w) (mem
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (set1 (tuple2 b1 e1)))
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (set1 (tuple2 b1 e1))
  (t2tb691 a2) (t2tb2940 x)) (t2tb3348 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) (tuple21 b
  e)))) (w (set (tuple21 (tuple21 a c) (tuple21 b d)))) (x (tuple21 b e)))
  (= (mem38 x
  (tb2t2940
  (image (tuple2 b1 e1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb3350 p)
  (t2tb686 w))))
  (exists ((a2 (tuple21 (tuple21 a c) (tuple21 b d))))
  (and (mem24 a2 w) (mem
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 b1 e1))
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 b1 e1) (t2tb691 a2)
  (t2tb2953 x)) (t2tb3350 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) f)))
  (w (set (tuple21 (tuple21 a c) (tuple21 b d)))) (x f))
  (= (mem37 x
  (tb2t2946
  (image f1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb3352 p) (t2tb686 w))))
  (exists ((a2 (tuple21 (tuple21 a c) (tuple21 b d))))
  (and (mem24 a2 w) (mem (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) f1)
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) f1 (t2tb691 a2)
  (t2tb2954 x)) (t2tb3352 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) e)))
  (w (set (tuple21 (tuple21 a c) (tuple21 b d)))) (x e))
  (= (mem36 x
  (tb2t2947
  (image e1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb3354 p) (t2tb686 w))))
  (exists ((a2 (tuple21 (tuple21 a c) (tuple21 b d))))
  (and (mem24 a2 w) (mem (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) e1)
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) e1 (t2tb691 a2)
  (t2tb2955 x)) (t2tb3354 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  (tuple21 (tuple21 a c) (tuple21 b d))))) (w (set (tuple21 (tuple21 a c)
  (tuple21 b d)))) (x (tuple21 (tuple21 a c) (tuple21 b d))))
  (= (mem24 x
  (tb2t686
  (image (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))
  (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb3356 p) (t2tb686 w))))
  (exists ((a2 (tuple21 (tuple21 a c) (tuple21 b d))))
  (and (mem24 a2 w) (mem
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))
  (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))
  (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb691 a2) (t2tb691 x))
  (t2tb3356 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  (set (tuple21 c d))))) (w (set (tuple21 (tuple21 a c) (tuple21 b d))))
  (x (set (tuple21 c d))))
  (= (mem22 x
  (tb2t688
  (image (set1 (tuple2 c1 d1)) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))
  (t2tb3358 p) (t2tb686 w))))
  (exists ((a2 (tuple21 (tuple21 a c) (tuple21 b d))))
  (and (mem24 a2 w) (mem
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (set1 (tuple2 c1 d1)))
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (set1 (tuple2 c1 d1))
  (t2tb691 a2) (t2tb689 x)) (t2tb3358 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) (tuple21 c
  d)))) (w (set (tuple21 (tuple21 a c) (tuple21 b d)))) (x (tuple21 c d)))
  (= (mem21 x
  (tb2t689
  (image (tuple2 c1 d1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb3360 p)
  (t2tb686 w))))
  (exists ((a2 (tuple21 (tuple21 a c) (tuple21 b d))))
  (and (mem24 a2 w) (mem
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 c1 d1))
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 c1 d1) (t2tb691 a2)
  (t2tb693 x)) (t2tb3360 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) d)))
  (w (set (tuple21 (tuple21 a c) (tuple21 b d)))) (x d))
  (= (mem20 x
  (tb2t690
  (image d1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb3362 p) (t2tb686 w))))
  (exists ((a2 (tuple21 (tuple21 a c) (tuple21 b d))))
  (and (mem24 a2 w) (mem (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) d1)
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) d1 (t2tb691 a2) (t2tb694 x))
  (t2tb3362 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) c)))
  (w (set (tuple21 (tuple21 a c) (tuple21 b d)))) (x c))
  (= (mem7 x
  (tb2t132
  (image c1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb3364 p) (t2tb686 w))))
  (exists ((a2 (tuple21 (tuple21 a c) (tuple21 b d))))
  (and (mem24 a2 w) (mem (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) c1)
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) c1 (t2tb691 a2) (t2tb135 x))
  (t2tb3364 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  (set (tuple21 a b))))) (w (set (tuple21 (tuple21 a c) (tuple21 b d))))
  (x (set (tuple21 a b))))
  (= (mem4 x
  (tb2t10
  (image (set1 (tuple2 a1 b1)) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))
  (t2tb3366 p) (t2tb686 w))))
  (exists ((a2 (tuple21 (tuple21 a c) (tuple21 b d))))
  (and (mem24 a2 w) (mem
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (set1 (tuple2 a1 b1)))
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (set1 (tuple2 a1 b1))
  (t2tb691 a2) (t2tb11 x)) (t2tb3366 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) (tuple21 a
  b)))) (w (set (tuple21 (tuple21 a c) (tuple21 b d)))) (x (tuple21 a b)))
  (= (mem3 x
  (tb2t11
  (image (tuple2 a1 b1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb3368 p)
  (t2tb686 w))))
  (exists ((a2 (tuple21 (tuple21 a c) (tuple21 b d))))
  (and (mem24 a2 w) (mem
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 a1 b1))
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 a1 b1) (t2tb691 a2)
  (t2tb13 x)) (t2tb3368 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) b)))
  (w (set (tuple21 (tuple21 a c) (tuple21 b d)))) (x b))
  (= (mem2 x
  (tb2t12
  (image b1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb3370 p) (t2tb686 w))))
  (exists ((a2 (tuple21 (tuple21 a c) (tuple21 b d))))
  (and (mem24 a2 w) (mem (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) b1)
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) b1 (t2tb691 a2) (t2tb14 x))
  (t2tb3370 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) a)))
  (w (set (tuple21 (tuple21 a c) (tuple21 b d)))) (x a))
  (= (mem1 x
  (tb2t1
  (image a1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb3372 p) (t2tb686 w))))
  (exists ((a2 (tuple21 (tuple21 a c) (tuple21 b d))))
  (and (mem24 a2 w) (mem (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) a1)
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) a1 (t2tb691 a2) (t2tb2 x))
  (t2tb3372 p)))))))

;; mem_image
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (w (set (tuple21 (tuple21 a c) (tuple21 b d)))) (x uni))
  (= (mem b2 x
  (image b2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) p (t2tb686 w)))
  (exists ((a2 (tuple21 (tuple21 a c) (tuple21 b d))))
  (and (mem24 a2 w) (mem (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) b2)
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) b2 (t2tb691 a2) x) p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 b d) (tuple21 e f)))) (w (set (tuple21 b
  d))) (x (tuple21 e f)))
  (= (mem (tuple2 e1 f1) (t2tb3315 x)
  (image (tuple2 e1 f1) (tuple2 b1 d1) (t2tb2944 p) (t2tb687 w)))
  (exists ((a2 (tuple21 b d)))
  (and (mem (tuple2 b1 d1) (t2tb692 a2) (t2tb687 w)) (mem43
  (tb2t2950 (Tuple2 (tuple2 b1 d1) (tuple2 e1 f1) (t2tb692 a2) (t2tb3315 x)))
  p))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 c d)) (tuple21 c f))))
  (w (set (set (tuple21 c d)))) (x (tuple21 c f)))
  (= (mem45 x
  (tb2t2942
  (image (tuple2 c1 f1) (set1 (tuple2 c1 d1)) (t2tb3374 p) (t2tb688 w))))
  (exists ((a2 (set (tuple21 c d))))
  (and (mem22 a2 w) (mem (tuple2 (set1 (tuple2 c1 d1)) (tuple2 c1 f1))
  (Tuple2 (set1 (tuple2 c1 d1)) (tuple2 c1 f1) (t2tb689 a2) (t2tb2948 x))
  (t2tb3374 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 c d)) (tuple21 a e))))
  (w (set (set (tuple21 c d)))) (x (tuple21 a e)))
  (= (mem44 x
  (tb2t2943
  (image (tuple2 a1 e1) (set1 (tuple2 c1 d1)) (t2tb3376 p) (t2tb688 w))))
  (exists ((a2 (set (tuple21 c d))))
  (and (mem22 a2 w) (mem (tuple2 (set1 (tuple2 c1 d1)) (tuple2 a1 e1))
  (Tuple2 (set1 (tuple2 c1 d1)) (tuple2 a1 e1) (t2tb689 a2) (t2tb2949 x))
  (t2tb3376 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 c d)) (tuple21 (tuple21 b d)
  (tuple21 e f))))) (w (set (set (tuple21 c d)))) (x (tuple21 (tuple21 b d)
  (tuple21 e f))))
  (= (mem43 x
  (tb2t2944
  (image (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (set1 (tuple2 c1 d1))
  (t2tb3378 p) (t2tb688 w))))
  (exists ((a2 (set (tuple21 c d))))
  (and (mem22 a2 w) (mem
  (tuple2 (set1 (tuple2 c1 d1)) (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)))
  (Tuple2 (set1 (tuple2 c1 d1)) (tuple2 (tuple2 b1 d1) (tuple2 e1 f1))
  (t2tb689 a2) (t2tb2950 x)) (t2tb3378 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 c d)) (tuple21 (tuple21 a c)
  (tuple21 e f))))) (w (set (set (tuple21 c d)))) (x (tuple21 (tuple21 a c)
  (tuple21 e f))))
  (= (mem42 x
  (tb2t2945
  (image (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (set1 (tuple2 c1 d1))
  (t2tb3380 p) (t2tb688 w))))
  (exists ((a2 (set (tuple21 c d))))
  (and (mem22 a2 w) (mem
  (tuple2 (set1 (tuple2 c1 d1)) (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)))
  (Tuple2 (set1 (tuple2 c1 d1)) (tuple2 (tuple2 a1 c1) (tuple2 e1 f1))
  (t2tb689 a2) (t2tb2951 x)) (t2tb3380 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 c d)) (set (tuple21 d f)))))
  (w (set (set (tuple21 c d)))) (x (set (tuple21 d f))))
  (= (mem41 x
  (tb2t2939
  (image (set1 (tuple2 d1 f1)) (set1 (tuple2 c1 d1)) (t2tb3382 p)
  (t2tb688 w))))
  (exists ((a2 (set (tuple21 c d))))
  (and (mem22 a2 w) (mem (tuple2 (set1 (tuple2 c1 d1)) (set1 (tuple2 d1 f1)))
  (Tuple2 (set1 (tuple2 c1 d1)) (set1 (tuple2 d1 f1)) (t2tb689 a2)
  (t2tb2938 x)) (t2tb3382 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 c d)) (tuple21 d f))))
  (w (set (set (tuple21 c d)))) (x (tuple21 d f)))
  (= (mem40 x
  (tb2t2938
  (image (tuple2 d1 f1) (set1 (tuple2 c1 d1)) (t2tb3384 p) (t2tb688 w))))
  (exists ((a2 (set (tuple21 c d))))
  (and (mem22 a2 w) (mem (tuple2 (set1 (tuple2 c1 d1)) (tuple2 d1 f1))
  (Tuple2 (set1 (tuple2 c1 d1)) (tuple2 d1 f1) (t2tb689 a2) (t2tb2952 x))
  (t2tb3384 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 c d)) (set (tuple21 b e)))))
  (w (set (set (tuple21 c d)))) (x (set (tuple21 b e))))
  (= (mem39 x
  (tb2t2941
  (image (set1 (tuple2 b1 e1)) (set1 (tuple2 c1 d1)) (t2tb3386 p)
  (t2tb688 w))))
  (exists ((a2 (set (tuple21 c d))))
  (and (mem22 a2 w) (mem (tuple2 (set1 (tuple2 c1 d1)) (set1 (tuple2 b1 e1)))
  (Tuple2 (set1 (tuple2 c1 d1)) (set1 (tuple2 b1 e1)) (t2tb689 a2)
  (t2tb2940 x)) (t2tb3386 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 c d)) (tuple21 b e))))
  (w (set (set (tuple21 c d)))) (x (tuple21 b e)))
  (= (mem38 x
  (tb2t2940
  (image (tuple2 b1 e1) (set1 (tuple2 c1 d1)) (t2tb3388 p) (t2tb688 w))))
  (exists ((a2 (set (tuple21 c d))))
  (and (mem22 a2 w) (mem (tuple2 (set1 (tuple2 c1 d1)) (tuple2 b1 e1))
  (Tuple2 (set1 (tuple2 c1 d1)) (tuple2 b1 e1) (t2tb689 a2) (t2tb2953 x))
  (t2tb3388 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 c d)) f))) (w (set (set (tuple21 c
  d)))) (x f))
  (= (mem37 x
  (tb2t2946 (image f1 (set1 (tuple2 c1 d1)) (t2tb3390 p) (t2tb688 w))))
  (exists ((a2 (set (tuple21 c d))))
  (and (mem22 a2 w) (mem (tuple2 (set1 (tuple2 c1 d1)) f1)
  (Tuple2 (set1 (tuple2 c1 d1)) f1 (t2tb689 a2) (t2tb2954 x)) (t2tb3390 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 c d)) e))) (w (set (set (tuple21 c
  d)))) (x e))
  (= (mem36 x
  (tb2t2947 (image e1 (set1 (tuple2 c1 d1)) (t2tb3392 p) (t2tb688 w))))
  (exists ((a2 (set (tuple21 c d))))
  (and (mem22 a2 w) (mem (tuple2 (set1 (tuple2 c1 d1)) e1)
  (Tuple2 (set1 (tuple2 c1 d1)) e1 (t2tb689 a2) (t2tb2955 x)) (t2tb3392 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 c d)) (tuple21 (tuple21 a c)
  (tuple21 b d))))) (w (set (set (tuple21 c d)))) (x (tuple21 (tuple21 a c)
  (tuple21 b d))))
  (= (mem24 x
  (tb2t686
  (image (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (set1 (tuple2 c1 d1))
  (t2tb3394 p) (t2tb688 w))))
  (exists ((a2 (set (tuple21 c d))))
  (and (mem22 a2 w) (mem
  (tuple2 (set1 (tuple2 c1 d1)) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
  (Tuple2 (set1 (tuple2 c1 d1)) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))
  (t2tb689 a2) (t2tb691 x)) (t2tb3394 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 c d)) (set (tuple21 c d)))))
  (w (set (set (tuple21 c d)))) (x (set (tuple21 c d))))
  (= (mem22 x
  (tb2t688
  (image (set1 (tuple2 c1 d1)) (set1 (tuple2 c1 d1)) (t2tb3396 p)
  (t2tb688 w))))
  (exists ((a2 (set (tuple21 c d))))
  (and (mem22 a2 w) (mem (tuple2 (set1 (tuple2 c1 d1)) (set1 (tuple2 c1 d1)))
  (Tuple2 (set1 (tuple2 c1 d1)) (set1 (tuple2 c1 d1)) (t2tb689 a2)
  (t2tb689 x)) (t2tb3396 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 c d)) (tuple21 c d))))
  (w (set (set (tuple21 c d)))) (x (tuple21 c d)))
  (= (mem21 x
  (tb2t689
  (image (tuple2 c1 d1) (set1 (tuple2 c1 d1)) (t2tb3398 p) (t2tb688 w))))
  (exists ((a2 (set (tuple21 c d))))
  (and (mem22 a2 w) (mem (tuple2 (set1 (tuple2 c1 d1)) (tuple2 c1 d1))
  (Tuple2 (set1 (tuple2 c1 d1)) (tuple2 c1 d1) (t2tb689 a2) (t2tb693 x))
  (t2tb3398 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 c d)) d))) (w (set (set (tuple21 c
  d)))) (x d))
  (= (mem20 x
  (tb2t690 (image d1 (set1 (tuple2 c1 d1)) (t2tb3400 p) (t2tb688 w))))
  (exists ((a2 (set (tuple21 c d))))
  (and (mem22 a2 w) (mem (tuple2 (set1 (tuple2 c1 d1)) d1)
  (Tuple2 (set1 (tuple2 c1 d1)) d1 (t2tb689 a2) (t2tb694 x)) (t2tb3400 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 c d)) c))) (w (set (set (tuple21 c
  d)))) (x c))
  (= (mem7 x
  (tb2t132 (image c1 (set1 (tuple2 c1 d1)) (t2tb3402 p) (t2tb688 w))))
  (exists ((a2 (set (tuple21 c d))))
  (and (mem22 a2 w) (mem (tuple2 (set1 (tuple2 c1 d1)) c1)
  (Tuple2 (set1 (tuple2 c1 d1)) c1 (t2tb689 a2) (t2tb135 x)) (t2tb3402 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 c d)) (set (tuple21 a b)))))
  (w (set (set (tuple21 c d)))) (x (set (tuple21 a b))))
  (= (mem4 x
  (tb2t10
  (image (set1 (tuple2 a1 b1)) (set1 (tuple2 c1 d1)) (t2tb3404 p)
  (t2tb688 w))))
  (exists ((a2 (set (tuple21 c d))))
  (and (mem22 a2 w) (mem (tuple2 (set1 (tuple2 c1 d1)) (set1 (tuple2 a1 b1)))
  (Tuple2 (set1 (tuple2 c1 d1)) (set1 (tuple2 a1 b1)) (t2tb689 a2)
  (t2tb11 x)) (t2tb3404 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 c d)) (tuple21 a b))))
  (w (set (set (tuple21 c d)))) (x (tuple21 a b)))
  (= (mem3 x
  (tb2t11
  (image (tuple2 a1 b1) (set1 (tuple2 c1 d1)) (t2tb3406 p) (t2tb688 w))))
  (exists ((a2 (set (tuple21 c d))))
  (and (mem22 a2 w) (mem (tuple2 (set1 (tuple2 c1 d1)) (tuple2 a1 b1))
  (Tuple2 (set1 (tuple2 c1 d1)) (tuple2 a1 b1) (t2tb689 a2) (t2tb13 x))
  (t2tb3406 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 c d)) b))) (w (set (set (tuple21 c
  d)))) (x b))
  (= (mem2 x
  (tb2t12 (image b1 (set1 (tuple2 c1 d1)) (t2tb3408 p) (t2tb688 w))))
  (exists ((a2 (set (tuple21 c d))))
  (and (mem22 a2 w) (mem (tuple2 (set1 (tuple2 c1 d1)) b1)
  (Tuple2 (set1 (tuple2 c1 d1)) b1 (t2tb689 a2) (t2tb14 x)) (t2tb3408 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 c d)) a))) (w (set (set (tuple21 c
  d)))) (x a))
  (= (mem1 x
  (tb2t1 (image a1 (set1 (tuple2 c1 d1)) (t2tb3410 p) (t2tb688 w))))
  (exists ((a2 (set (tuple21 c d))))
  (and (mem22 a2 w) (mem (tuple2 (set1 (tuple2 c1 d1)) a1)
  (Tuple2 (set1 (tuple2 c1 d1)) a1 (t2tb689 a2) (t2tb2 x)) (t2tb3410 p)))))))

;; mem_image
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (w (set (set (tuple21 c d)))) (x uni))
  (= (mem b2 x (image b2 (set1 (tuple2 c1 d1)) p (t2tb688 w)))
  (exists ((a2 (set (tuple21 c d))))
  (and (mem22 a2 w) (mem (tuple2 (set1 (tuple2 c1 d1)) b2)
  (Tuple2 (set1 (tuple2 c1 d1)) b2 (t2tb689 a2) x) p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 c d) (tuple21 c f)))) (w (set (tuple21 c
  d))) (x (tuple21 c f)))
  (= (mem45 x
  (tb2t2942 (image (tuple2 c1 f1) (tuple2 c1 d1) (t2tb3412 p) (t2tb689 w))))
  (exists ((a2 (tuple21 c d)))
  (and (mem21 a2 w) (mem (tuple2 (tuple2 c1 d1) (tuple2 c1 f1))
  (Tuple2 (tuple2 c1 d1) (tuple2 c1 f1) (t2tb693 a2) (t2tb2948 x))
  (t2tb3412 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 c d) (tuple21 a e)))) (w (set (tuple21 c
  d))) (x (tuple21 a e)))
  (= (mem44 x
  (tb2t2943 (image (tuple2 a1 e1) (tuple2 c1 d1) (t2tb3414 p) (t2tb689 w))))
  (exists ((a2 (tuple21 c d)))
  (and (mem21 a2 w) (mem (tuple2 (tuple2 c1 d1) (tuple2 a1 e1))
  (Tuple2 (tuple2 c1 d1) (tuple2 a1 e1) (t2tb693 a2) (t2tb2949 x))
  (t2tb3414 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 c d) (tuple21 (tuple21 b d) (tuple21 e
  f))))) (w (set (tuple21 c d))) (x (tuple21 (tuple21 b d) (tuple21 e f))))
  (= (mem43 x
  (tb2t2944
  (image (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (tuple2 c1 d1) (t2tb3416 p)
  (t2tb689 w))))
  (exists ((a2 (tuple21 c d)))
  (and (mem21 a2 w) (mem
  (tuple2 (tuple2 c1 d1) (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)))
  (Tuple2 (tuple2 c1 d1) (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (t2tb693 a2)
  (t2tb2950 x)) (t2tb3416 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 c d) (tuple21 (tuple21 a c) (tuple21 e
  f))))) (w (set (tuple21 c d))) (x (tuple21 (tuple21 a c) (tuple21 e f))))
  (= (mem42 x
  (tb2t2945
  (image (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (tuple2 c1 d1) (t2tb3418 p)
  (t2tb689 w))))
  (exists ((a2 (tuple21 c d)))
  (and (mem21 a2 w) (mem
  (tuple2 (tuple2 c1 d1) (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)))
  (Tuple2 (tuple2 c1 d1) (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (t2tb693 a2)
  (t2tb2951 x)) (t2tb3418 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 c d) (set (tuple21 d f)))))
  (w (set (tuple21 c d))) (x (set (tuple21 d f))))
  (= (mem41 x
  (tb2t2939
  (image (set1 (tuple2 d1 f1)) (tuple2 c1 d1) (t2tb3420 p) (t2tb689 w))))
  (exists ((a2 (tuple21 c d)))
  (and (mem21 a2 w) (mem (tuple2 (tuple2 c1 d1) (set1 (tuple2 d1 f1)))
  (Tuple2 (tuple2 c1 d1) (set1 (tuple2 d1 f1)) (t2tb693 a2) (t2tb2938 x))
  (t2tb3420 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 c d) (tuple21 d f)))) (w (set (tuple21 c
  d))) (x (tuple21 d f)))
  (= (mem40 x
  (tb2t2938 (image (tuple2 d1 f1) (tuple2 c1 d1) (t2tb3422 p) (t2tb689 w))))
  (exists ((a2 (tuple21 c d)))
  (and (mem21 a2 w) (mem (tuple2 (tuple2 c1 d1) (tuple2 d1 f1))
  (Tuple2 (tuple2 c1 d1) (tuple2 d1 f1) (t2tb693 a2) (t2tb2952 x))
  (t2tb3422 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 c d) (set (tuple21 b e)))))
  (w (set (tuple21 c d))) (x (set (tuple21 b e))))
  (= (mem39 x
  (tb2t2941
  (image (set1 (tuple2 b1 e1)) (tuple2 c1 d1) (t2tb3424 p) (t2tb689 w))))
  (exists ((a2 (tuple21 c d)))
  (and (mem21 a2 w) (mem (tuple2 (tuple2 c1 d1) (set1 (tuple2 b1 e1)))
  (Tuple2 (tuple2 c1 d1) (set1 (tuple2 b1 e1)) (t2tb693 a2) (t2tb2940 x))
  (t2tb3424 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 c d) (tuple21 b e)))) (w (set (tuple21 c
  d))) (x (tuple21 b e)))
  (= (mem38 x
  (tb2t2940 (image (tuple2 b1 e1) (tuple2 c1 d1) (t2tb3426 p) (t2tb689 w))))
  (exists ((a2 (tuple21 c d)))
  (and (mem21 a2 w) (mem (tuple2 (tuple2 c1 d1) (tuple2 b1 e1))
  (Tuple2 (tuple2 c1 d1) (tuple2 b1 e1) (t2tb693 a2) (t2tb2953 x))
  (t2tb3426 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 c d) f))) (w (set (tuple21 c d))) (x f))
  (= (mem37 x (tb2t2946 (image f1 (tuple2 c1 d1) (t2tb3428 p) (t2tb689 w))))
  (exists ((a2 (tuple21 c d)))
  (and (mem21 a2 w) (mem (tuple2 (tuple2 c1 d1) f1)
  (Tuple2 (tuple2 c1 d1) f1 (t2tb693 a2) (t2tb2954 x)) (t2tb3428 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 c d) e))) (w (set (tuple21 c d))) (x e))
  (= (mem36 x (tb2t2947 (image e1 (tuple2 c1 d1) (t2tb3430 p) (t2tb689 w))))
  (exists ((a2 (tuple21 c d)))
  (and (mem21 a2 w) (mem (tuple2 (tuple2 c1 d1) e1)
  (Tuple2 (tuple2 c1 d1) e1 (t2tb693 a2) (t2tb2955 x)) (t2tb3430 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 c d) (tuple21 (tuple21 a c) (tuple21 b
  d))))) (w (set (tuple21 c d))) (x (tuple21 (tuple21 a c) (tuple21 b d))))
  (= (mem24 x
  (tb2t686
  (image (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 c1 d1) (t2tb3432 p)
  (t2tb689 w))))
  (exists ((a2 (tuple21 c d)))
  (and (mem21 a2 w) (mem
  (tuple2 (tuple2 c1 d1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
  (Tuple2 (tuple2 c1 d1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb693 a2)
  (t2tb691 x)) (t2tb3432 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 c d) (set (tuple21 c d)))))
  (w (set (tuple21 c d))) (x (set (tuple21 c d))))
  (= (mem22 x
  (tb2t688
  (image (set1 (tuple2 c1 d1)) (tuple2 c1 d1) (t2tb3434 p) (t2tb689 w))))
  (exists ((a2 (tuple21 c d)))
  (and (mem21 a2 w) (mem (tuple2 (tuple2 c1 d1) (set1 (tuple2 c1 d1)))
  (Tuple2 (tuple2 c1 d1) (set1 (tuple2 c1 d1)) (t2tb693 a2) (t2tb689 x))
  (t2tb3434 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 c d) (tuple21 c d)))) (w (set (tuple21 c
  d))) (x (tuple21 c d)))
  (= (mem21 x
  (tb2t689 (image (tuple2 c1 d1) (tuple2 c1 d1) (t2tb799 p) (t2tb689 w))))
  (exists ((a2 (tuple21 c d)))
  (and (mem21 a2 w) (mem (tuple2 (tuple2 c1 d1) (tuple2 c1 d1))
  (Tuple2 (tuple2 c1 d1) (tuple2 c1 d1) (t2tb693 a2) (t2tb693 x))
  (t2tb799 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 c d) d))) (w (set (tuple21 c d))) (x d))
  (= (mem20 x (tb2t690 (image d1 (tuple2 c1 d1) (t2tb801 p) (t2tb689 w))))
  (exists ((a2 (tuple21 c d)))
  (and (mem21 a2 w) (mem (tuple2 (tuple2 c1 d1) d1)
  (Tuple2 (tuple2 c1 d1) d1 (t2tb693 a2) (t2tb694 x)) (t2tb801 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 c d) c))) (w (set (tuple21 c d))) (x c))
  (= (mem7 x (tb2t132 (image c1 (tuple2 c1 d1) (t2tb805 p) (t2tb689 w))))
  (exists ((a2 (tuple21 c d)))
  (and (mem21 a2 w) (mem (tuple2 (tuple2 c1 d1) c1)
  (Tuple2 (tuple2 c1 d1) c1 (t2tb693 a2) (t2tb135 x)) (t2tb805 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 c d) (set (tuple21 a b)))))
  (w (set (tuple21 c d))) (x (set (tuple21 a b))))
  (= (mem4 x
  (tb2t10
  (image (set1 (tuple2 a1 b1)) (tuple2 c1 d1) (t2tb3436 p) (t2tb689 w))))
  (exists ((a2 (tuple21 c d)))
  (and (mem21 a2 w) (mem (tuple2 (tuple2 c1 d1) (set1 (tuple2 a1 b1)))
  (Tuple2 (tuple2 c1 d1) (set1 (tuple2 a1 b1)) (t2tb693 a2) (t2tb11 x))
  (t2tb3436 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 c d) (tuple21 a b)))) (w (set (tuple21 c
  d))) (x (tuple21 a b)))
  (= (mem3 x
  (tb2t11 (image (tuple2 a1 b1) (tuple2 c1 d1) (t2tb3438 p) (t2tb689 w))))
  (exists ((a2 (tuple21 c d)))
  (and (mem21 a2 w) (mem (tuple2 (tuple2 c1 d1) (tuple2 a1 b1))
  (Tuple2 (tuple2 c1 d1) (tuple2 a1 b1) (t2tb693 a2) (t2tb13 x))
  (t2tb3438 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 c d) b))) (w (set (tuple21 c d))) (x b))
  (= (mem2 x (tb2t12 (image b1 (tuple2 c1 d1) (t2tb811 p) (t2tb689 w))))
  (exists ((a2 (tuple21 c d)))
  (and (mem21 a2 w) (mem (tuple2 (tuple2 c1 d1) b1)
  (Tuple2 (tuple2 c1 d1) b1 (t2tb693 a2) (t2tb14 x)) (t2tb811 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 c d) a))) (w (set (tuple21 c d))) (x a))
  (= (mem1 x (tb2t1 (image a1 (tuple2 c1 d1) (t2tb813 p) (t2tb689 w))))
  (exists ((a2 (tuple21 c d)))
  (and (mem21 a2 w) (mem (tuple2 (tuple2 c1 d1) a1)
  (Tuple2 (tuple2 c1 d1) a1 (t2tb693 a2) (t2tb2 x)) (t2tb813 p)))))))

;; mem_image
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (w (set (tuple21 c d))) (x uni))
  (= (mem b2 x (image b2 (tuple2 c1 d1) p (t2tb689 w)))
  (exists ((a2 (tuple21 c d)))
  (and (mem21 a2 w) (mem (tuple2 (tuple2 c1 d1) b2)
  (Tuple2 (tuple2 c1 d1) b2 (t2tb693 a2) x) p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 d (tuple21 c f)))) (w (set d)) (x (tuple21 c f)))
  (= (mem45 x (tb2t2942 (image (tuple2 c1 f1) d1 (t2tb3440 p) (t2tb690 w))))
  (exists ((a2 d))
  (and (mem20 a2 w) (mem (tuple2 d1 (tuple2 c1 f1))
  (Tuple2 d1 (tuple2 c1 f1) (t2tb694 a2) (t2tb2948 x)) (t2tb3440 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 d (tuple21 a e)))) (w (set d)) (x (tuple21 a e)))
  (= (mem44 x (tb2t2943 (image (tuple2 a1 e1) d1 (t2tb3442 p) (t2tb690 w))))
  (exists ((a2 d))
  (and (mem20 a2 w) (mem (tuple2 d1 (tuple2 a1 e1))
  (Tuple2 d1 (tuple2 a1 e1) (t2tb694 a2) (t2tb2949 x)) (t2tb3442 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 d (tuple21 (tuple21 b d) (tuple21 e f)))))
  (w (set d)) (x (tuple21 (tuple21 b d) (tuple21 e f))))
  (= (mem43 x
  (tb2t2944
  (image (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) d1 (t2tb3444 p) (t2tb690 w))))
  (exists ((a2 d))
  (and (mem20 a2 w) (mem (tuple2 d1 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)))
  (Tuple2 d1 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (t2tb694 a2)
  (t2tb2950 x)) (t2tb3444 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 d (tuple21 (tuple21 a c) (tuple21 e f)))))
  (w (set d)) (x (tuple21 (tuple21 a c) (tuple21 e f))))
  (= (mem42 x
  (tb2t2945
  (image (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) d1 (t2tb3446 p) (t2tb690 w))))
  (exists ((a2 d))
  (and (mem20 a2 w) (mem (tuple2 d1 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)))
  (Tuple2 d1 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (t2tb694 a2)
  (t2tb2951 x)) (t2tb3446 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 d (set (tuple21 d f))))) (w (set d))
  (x (set (tuple21 d f))))
  (= (mem41 x
  (tb2t2939 (image (set1 (tuple2 d1 f1)) d1 (t2tb3448 p) (t2tb690 w))))
  (exists ((a2 d))
  (and (mem20 a2 w) (mem (tuple2 d1 (set1 (tuple2 d1 f1)))
  (Tuple2 d1 (set1 (tuple2 d1 f1)) (t2tb694 a2) (t2tb2938 x)) (t2tb3448 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 d (tuple21 d f)))) (w (set d)) (x (tuple21 d f)))
  (= (mem40 x (tb2t2938 (image (tuple2 d1 f1) d1 (t2tb3450 p) (t2tb690 w))))
  (exists ((a2 d))
  (and (mem20 a2 w) (mem (tuple2 d1 (tuple2 d1 f1))
  (Tuple2 d1 (tuple2 d1 f1) (t2tb694 a2) (t2tb2952 x)) (t2tb3450 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 d (set (tuple21 b e))))) (w (set d))
  (x (set (tuple21 b e))))
  (= (mem39 x
  (tb2t2941 (image (set1 (tuple2 b1 e1)) d1 (t2tb3452 p) (t2tb690 w))))
  (exists ((a2 d))
  (and (mem20 a2 w) (mem (tuple2 d1 (set1 (tuple2 b1 e1)))
  (Tuple2 d1 (set1 (tuple2 b1 e1)) (t2tb694 a2) (t2tb2940 x)) (t2tb3452 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 d (tuple21 b e)))) (w (set d)) (x (tuple21 b e)))
  (= (mem38 x (tb2t2940 (image (tuple2 b1 e1) d1 (t2tb3454 p) (t2tb690 w))))
  (exists ((a2 d))
  (and (mem20 a2 w) (mem (tuple2 d1 (tuple2 b1 e1))
  (Tuple2 d1 (tuple2 b1 e1) (t2tb694 a2) (t2tb2953 x)) (t2tb3454 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 d f))) (w (set d)) (x f))
  (= (mem37 x (tb2t2946 (image f1 d1 (t2tb2938 p) (t2tb690 w))))
  (exists ((a2 d))
  (and (mem20 a2 w) (mem40
  (tb2t2952 (Tuple2 d1 f1 (t2tb694 a2) (t2tb2954 x))) p))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 d e))) (w (set d)) (x e))
  (= (mem36 x (tb2t2947 (image e1 d1 (t2tb3456 p) (t2tb690 w))))
  (exists ((a2 d))
  (and (mem20 a2 w) (mem (tuple2 d1 e1)
  (Tuple2 d1 e1 (t2tb694 a2) (t2tb2955 x)) (t2tb3456 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 d (tuple21 (tuple21 a c) (tuple21 b d)))))
  (w (set d)) (x (tuple21 (tuple21 a c) (tuple21 b d))))
  (= (mem24 x
  (tb2t686
  (image (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) d1 (t2tb3458 p) (t2tb690 w))))
  (exists ((a2 d))
  (and (mem20 a2 w) (mem (tuple2 d1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
  (Tuple2 d1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb694 a2) (t2tb691 x))
  (t2tb3458 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 d (set (tuple21 c d))))) (w (set d))
  (x (set (tuple21 c d))))
  (= (mem22 x
  (tb2t688 (image (set1 (tuple2 c1 d1)) d1 (t2tb3460 p) (t2tb690 w))))
  (exists ((a2 d))
  (and (mem20 a2 w) (mem (tuple2 d1 (set1 (tuple2 c1 d1)))
  (Tuple2 d1 (set1 (tuple2 c1 d1)) (t2tb694 a2) (t2tb689 x)) (t2tb3460 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 d (tuple21 c d)))) (w (set d)) (x (tuple21 c d)))
  (= (mem21 x (tb2t689 (image (tuple2 c1 d1) d1 (t2tb823 p) (t2tb690 w))))
  (exists ((a2 d))
  (and (mem20 a2 w) (mem (tuple2 d1 (tuple2 c1 d1))
  (Tuple2 d1 (tuple2 c1 d1) (t2tb694 a2) (t2tb693 x)) (t2tb823 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 d d))) (w (set d)) (x d))
  (= (mem20 x (tb2t690 (image d1 d1 (t2tb825 p) (t2tb690 w))))
  (exists ((a2 d))
  (and (mem20 a2 w) (mem (tuple2 d1 d1)
  (Tuple2 d1 d1 (t2tb694 a2) (t2tb694 x)) (t2tb825 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 d c))) (w (set d)) (x c))
  (= (mem7 x (tb2t132 (image c1 d1 (t2tb829 p) (t2tb690 w))))
  (exists ((a2 d))
  (and (mem20 a2 w) (mem (tuple2 d1 c1)
  (Tuple2 d1 c1 (t2tb694 a2) (t2tb135 x)) (t2tb829 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 d (set (tuple21 a b))))) (w (set d))
  (x (set (tuple21 a b))))
  (= (mem4 x
  (tb2t10 (image (set1 (tuple2 a1 b1)) d1 (t2tb831 p) (t2tb690 w))))
  (exists ((a2 d))
  (and (mem20 a2 w) (mem (tuple2 d1 (set1 (tuple2 a1 b1)))
  (Tuple2 d1 (set1 (tuple2 a1 b1)) (t2tb694 a2) (t2tb11 x)) (t2tb831 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 d (tuple21 a b)))) (w (set d)) (x (tuple21 a b)))
  (= (mem3 x (tb2t11 (image (tuple2 a1 b1) d1 (t2tb833 p) (t2tb690 w))))
  (exists ((a2 d))
  (and (mem20 a2 w) (mem (tuple2 d1 (tuple2 a1 b1))
  (Tuple2 d1 (tuple2 a1 b1) (t2tb694 a2) (t2tb13 x)) (t2tb833 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 d b))) (w (set d)) (x b))
  (= (mem2 x (tb2t12 (image b1 d1 (t2tb835 p) (t2tb690 w))))
  (exists ((a2 d))
  (and (mem20 a2 w) (mem (tuple2 d1 b1)
  (Tuple2 d1 b1 (t2tb694 a2) (t2tb14 x)) (t2tb835 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 d a))) (w (set d)) (x a))
  (= (mem1 x (tb2t1 (image a1 d1 (t2tb837 p) (t2tb690 w))))
  (exists ((a2 d))
  (and (mem20 a2 w) (mem (tuple2 d1 a1) (Tuple2 d1 a1 (t2tb694 a2) (t2tb2 x))
  (t2tb837 p)))))))

;; mem_image
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (w (set d)) (x uni))
  (= (mem b2 x (image b2 d1 p (t2tb690 w)))
  (exists ((a2 d))
  (and (mem20 a2 w) (mem (tuple2 d1 b2) (Tuple2 d1 b2 (t2tb694 a2) x) p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a c) (tuple21 e f)))) (w (set (tuple21 a
  c))) (x (tuple21 e f)))
  (= (mem (tuple2 e1 f1) (t2tb3315 x)
  (image (tuple2 e1 f1) (tuple2 a1 c1) (t2tb2945 p) (t2tb129 w)))
  (exists ((a2 (tuple21 a c)))
  (and (mem (tuple2 a1 c1) (t2tb133 a2) (t2tb129 w)) (mem42
  (tb2t2951 (Tuple2 (tuple2 a1 c1) (tuple2 e1 f1) (t2tb133 a2) (t2tb3315 x)))
  p))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a c) (tuple21 b d)))) (w (set (tuple21 a
  c))) (x (tuple21 b d)))
  (= (mem (tuple2 b1 d1) (t2tb692 x)
  (image (tuple2 b1 d1) (tuple2 a1 c1) (t2tb686 p) (t2tb129 w)))
  (exists ((a2 (tuple21 a c)))
  (and (mem (tuple2 a1 c1) (t2tb133 a2) (t2tb129 w)) (mem24
  (tb2t691 (Tuple2 (tuple2 a1 c1) (tuple2 b1 d1) (t2tb133 a2) (t2tb692 x)))
  p))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 c (tuple21 c f)))) (w (set c)) (x (tuple21 c f)))
  (= (mem45 x (tb2t2942 (image (tuple2 c1 f1) c1 (t2tb3462 p) (t2tb132 w))))
  (exists ((a2 c))
  (and (mem7 a2 w) (mem (tuple2 c1 (tuple2 c1 f1))
  (Tuple2 c1 (tuple2 c1 f1) (t2tb135 a2) (t2tb2948 x)) (t2tb3462 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 c (tuple21 a e)))) (w (set c)) (x (tuple21 a e)))
  (= (mem44 x (tb2t2943 (image (tuple2 a1 e1) c1 (t2tb3464 p) (t2tb132 w))))
  (exists ((a2 c))
  (and (mem7 a2 w) (mem (tuple2 c1 (tuple2 a1 e1))
  (Tuple2 c1 (tuple2 a1 e1) (t2tb135 a2) (t2tb2949 x)) (t2tb3464 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 c (tuple21 (tuple21 b d) (tuple21 e f)))))
  (w (set c)) (x (tuple21 (tuple21 b d) (tuple21 e f))))
  (= (mem43 x
  (tb2t2944
  (image (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) c1 (t2tb3467 p) (t2tb132 w))))
  (exists ((a2 c))
  (and (mem7 a2 w) (mem (tuple2 c1 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)))
  (Tuple2 c1 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (t2tb135 a2)
  (t2tb2950 x)) (t2tb3467 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 c (tuple21 (tuple21 a c) (tuple21 e f)))))
  (w (set c)) (x (tuple21 (tuple21 a c) (tuple21 e f))))
  (= (mem42 x
  (tb2t2945
  (image (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) c1 (t2tb3468 p) (t2tb132 w))))
  (exists ((a2 c))
  (and (mem7 a2 w) (mem (tuple2 c1 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)))
  (Tuple2 c1 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (t2tb135 a2)
  (t2tb2951 x)) (t2tb3468 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 c (set (tuple21 d f))))) (w (set c))
  (x (set (tuple21 d f))))
  (= (mem41 x
  (tb2t2939 (image (set1 (tuple2 d1 f1)) c1 (t2tb3470 p) (t2tb132 w))))
  (exists ((a2 c))
  (and (mem7 a2 w) (mem (tuple2 c1 (set1 (tuple2 d1 f1)))
  (Tuple2 c1 (set1 (tuple2 d1 f1)) (t2tb135 a2) (t2tb2938 x)) (t2tb3470 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 c (tuple21 d f)))) (w (set c)) (x (tuple21 d f)))
  (= (mem40 x (tb2t2938 (image (tuple2 d1 f1) c1 (t2tb3472 p) (t2tb132 w))))
  (exists ((a2 c))
  (and (mem7 a2 w) (mem (tuple2 c1 (tuple2 d1 f1))
  (Tuple2 c1 (tuple2 d1 f1) (t2tb135 a2) (t2tb2952 x)) (t2tb3472 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 c (set (tuple21 b e))))) (w (set c))
  (x (set (tuple21 b e))))
  (= (mem39 x
  (tb2t2941 (image (set1 (tuple2 b1 e1)) c1 (t2tb3474 p) (t2tb132 w))))
  (exists ((a2 c))
  (and (mem7 a2 w) (mem (tuple2 c1 (set1 (tuple2 b1 e1)))
  (Tuple2 c1 (set1 (tuple2 b1 e1)) (t2tb135 a2) (t2tb2940 x)) (t2tb3474 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 c (tuple21 b e)))) (w (set c)) (x (tuple21 b e)))
  (= (mem38 x (tb2t2940 (image (tuple2 b1 e1) c1 (t2tb3476 p) (t2tb132 w))))
  (exists ((a2 c))
  (and (mem7 a2 w) (mem (tuple2 c1 (tuple2 b1 e1))
  (Tuple2 c1 (tuple2 b1 e1) (t2tb135 a2) (t2tb2953 x)) (t2tb3476 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 c f))) (w (set c)) (x f))
  (= (mem37 x (tb2t2946 (image f1 c1 (t2tb2942 p) (t2tb132 w))))
  (exists ((a2 c))
  (and (mem7 a2 w) (mem45 (tb2t2948 (Tuple2 c1 f1 (t2tb135 a2) (t2tb2954 x)))
  p))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 c e))) (w (set c)) (x e))
  (= (mem36 x (tb2t2947 (image e1 c1 (t2tb3478 p) (t2tb132 w))))
  (exists ((a2 c))
  (and (mem7 a2 w) (mem (tuple2 c1 e1)
  (Tuple2 c1 e1 (t2tb135 a2) (t2tb2955 x)) (t2tb3478 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 c (tuple21 (tuple21 a c) (tuple21 b d)))))
  (w (set c)) (x (tuple21 (tuple21 a c) (tuple21 b d))))
  (= (mem24 x
  (tb2t686
  (image (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) c1 (t2tb3480 p) (t2tb132 w))))
  (exists ((a2 c))
  (and (mem7 a2 w) (mem (tuple2 c1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
  (Tuple2 c1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb135 a2) (t2tb691 x))
  (t2tb3480 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 c (set (tuple21 c d))))) (w (set c))
  (x (set (tuple21 c d))))
  (= (mem22 x
  (tb2t688 (image (set1 (tuple2 c1 d1)) c1 (t2tb3483 p) (t2tb132 w))))
  (exists ((a2 c))
  (and (mem7 a2 w) (mem (tuple2 c1 (set1 (tuple2 c1 d1)))
  (Tuple2 c1 (set1 (tuple2 c1 d1)) (t2tb135 a2) (t2tb689 x)) (t2tb3483 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 c (tuple21 c d)))) (w (set c)) (x (tuple21 c d)))
  (= (mem21 x (tb2t689 (image (tuple2 c1 d1) c1 (t2tb857 p) (t2tb132 w))))
  (exists ((a2 c))
  (and (mem7 a2 w) (mem (tuple2 c1 (tuple2 c1 d1))
  (Tuple2 c1 (tuple2 c1 d1) (t2tb135 a2) (t2tb693 x)) (t2tb857 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 c d))) (w (set c)) (x d))
  (= (mem20 x (tb2t690 (image d1 c1 (t2tb689 p) (t2tb132 w))))
  (exists ((a2 c))
  (and (mem7 a2 w) (mem21 (tb2t693 (Tuple2 c1 d1 (t2tb135 a2) (t2tb694 x)))
  p))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 c c))) (w (set c)) (x c))
  (= (mem7 x (tb2t132 (image c1 c1 (t2tb216 p) (t2tb132 w))))
  (exists ((a2 c))
  (and (mem7 a2 w) (mem (tuple2 c1 c1)
  (Tuple2 c1 c1 (t2tb135 a2) (t2tb135 x)) (t2tb216 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 c (set (tuple21 a b))))) (w (set c))
  (x (set (tuple21 a b))))
  (= (mem4 x
  (tb2t10 (image (set1 (tuple2 a1 b1)) c1 (t2tb218 p) (t2tb132 w))))
  (exists ((a2 c))
  (and (mem7 a2 w) (mem (tuple2 c1 (set1 (tuple2 a1 b1)))
  (Tuple2 c1 (set1 (tuple2 a1 b1)) (t2tb135 a2) (t2tb11 x)) (t2tb218 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 c (tuple21 a b)))) (w (set c)) (x (tuple21 a b)))
  (= (mem3 x (tb2t11 (image (tuple2 a1 b1) c1 (t2tb220 p) (t2tb132 w))))
  (exists ((a2 c))
  (and (mem7 a2 w) (mem (tuple2 c1 (tuple2 a1 b1))
  (Tuple2 c1 (tuple2 a1 b1) (t2tb135 a2) (t2tb13 x)) (t2tb220 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 c b))) (w (set c)) (x b))
  (= (mem2 x (tb2t12 (image b1 c1 (t2tb222 p) (t2tb132 w))))
  (exists ((a2 c))
  (and (mem7 a2 w) (mem (tuple2 c1 b1) (Tuple2 c1 b1 (t2tb135 a2) (t2tb14 x))
  (t2tb222 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 c a))) (w (set c)) (x a))
  (= (mem1 x (tb2t1 (image a1 c1 (t2tb224 p) (t2tb132 w))))
  (exists ((a2 c))
  (and (mem7 a2 w) (mem (tuple2 c1 a1) (Tuple2 c1 a1 (t2tb135 a2) (t2tb2 x))
  (t2tb224 p)))))))

;; mem_image
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (w (set c)) (x uni))
  (= (mem b2 x (image b2 c1 p (t2tb132 w)))
  (exists ((a2 c))
  (and (mem7 a2 w) (mem (tuple2 c1 b2) (Tuple2 c1 b2 (t2tb135 a2) x) p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a b)) (tuple21 c f))))
  (w (set (set (tuple21 a b)))) (x (tuple21 c f)))
  (= (mem45 x
  (tb2t2942
  (image (tuple2 c1 f1) (set1 (tuple2 a1 b1)) (t2tb3484 p) (t2tb10 w))))
  (exists ((a2 (set (tuple21 a b))))
  (and (mem4 a2 w) (mem (tuple2 (set1 (tuple2 a1 b1)) (tuple2 c1 f1))
  (Tuple2 (set1 (tuple2 a1 b1)) (tuple2 c1 f1) (t2tb11 a2) (t2tb2948 x))
  (t2tb3484 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a b)) (tuple21 a e))))
  (w (set (set (tuple21 a b)))) (x (tuple21 a e)))
  (= (mem44 x
  (tb2t2943
  (image (tuple2 a1 e1) (set1 (tuple2 a1 b1)) (t2tb3486 p) (t2tb10 w))))
  (exists ((a2 (set (tuple21 a b))))
  (and (mem4 a2 w) (mem (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 e1))
  (Tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 e1) (t2tb11 a2) (t2tb2949 x))
  (t2tb3486 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a b)) (tuple21 (tuple21 b d)
  (tuple21 e f))))) (w (set (set (tuple21 a b)))) (x (tuple21 (tuple21 b d)
  (tuple21 e f))))
  (= (mem43 x
  (tb2t2944
  (image (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (set1 (tuple2 a1 b1))
  (t2tb3488 p) (t2tb10 w))))
  (exists ((a2 (set (tuple21 a b))))
  (and (mem4 a2 w) (mem
  (tuple2 (set1 (tuple2 a1 b1)) (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)))
  (Tuple2 (set1 (tuple2 a1 b1)) (tuple2 (tuple2 b1 d1) (tuple2 e1 f1))
  (t2tb11 a2) (t2tb2950 x)) (t2tb3488 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a b)) (tuple21 (tuple21 a c)
  (tuple21 e f))))) (w (set (set (tuple21 a b)))) (x (tuple21 (tuple21 a c)
  (tuple21 e f))))
  (= (mem42 x
  (tb2t2945
  (image (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (set1 (tuple2 a1 b1))
  (t2tb3490 p) (t2tb10 w))))
  (exists ((a2 (set (tuple21 a b))))
  (and (mem4 a2 w) (mem
  (tuple2 (set1 (tuple2 a1 b1)) (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)))
  (Tuple2 (set1 (tuple2 a1 b1)) (tuple2 (tuple2 a1 c1) (tuple2 e1 f1))
  (t2tb11 a2) (t2tb2951 x)) (t2tb3490 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a b)) (set (tuple21 d f)))))
  (w (set (set (tuple21 a b)))) (x (set (tuple21 d f))))
  (= (mem41 x
  (tb2t2939
  (image (set1 (tuple2 d1 f1)) (set1 (tuple2 a1 b1)) (t2tb3492 p) (t2tb10 w))))
  (exists ((a2 (set (tuple21 a b))))
  (and (mem4 a2 w) (mem (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 d1 f1)))
  (Tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 d1 f1)) (t2tb11 a2)
  (t2tb2938 x)) (t2tb3492 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a b)) (tuple21 d f))))
  (w (set (set (tuple21 a b)))) (x (tuple21 d f)))
  (= (mem40 x
  (tb2t2938
  (image (tuple2 d1 f1) (set1 (tuple2 a1 b1)) (t2tb3494 p) (t2tb10 w))))
  (exists ((a2 (set (tuple21 a b))))
  (and (mem4 a2 w) (mem (tuple2 (set1 (tuple2 a1 b1)) (tuple2 d1 f1))
  (Tuple2 (set1 (tuple2 a1 b1)) (tuple2 d1 f1) (t2tb11 a2) (t2tb2952 x))
  (t2tb3494 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a b)) (set (tuple21 b e)))))
  (w (set (set (tuple21 a b)))) (x (set (tuple21 b e))))
  (= (mem39 x
  (tb2t2941
  (image (set1 (tuple2 b1 e1)) (set1 (tuple2 a1 b1)) (t2tb3496 p) (t2tb10 w))))
  (exists ((a2 (set (tuple21 a b))))
  (and (mem4 a2 w) (mem (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 b1 e1)))
  (Tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 b1 e1)) (t2tb11 a2)
  (t2tb2940 x)) (t2tb3496 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a b)) (tuple21 b e))))
  (w (set (set (tuple21 a b)))) (x (tuple21 b e)))
  (= (mem38 x
  (tb2t2940
  (image (tuple2 b1 e1) (set1 (tuple2 a1 b1)) (t2tb3499 p) (t2tb10 w))))
  (exists ((a2 (set (tuple21 a b))))
  (and (mem4 a2 w) (mem (tuple2 (set1 (tuple2 a1 b1)) (tuple2 b1 e1))
  (Tuple2 (set1 (tuple2 a1 b1)) (tuple2 b1 e1) (t2tb11 a2) (t2tb2953 x))
  (t2tb3499 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a b)) f))) (w (set (set (tuple21 a
  b)))) (x f))
  (= (mem37 x
  (tb2t2946 (image f1 (set1 (tuple2 a1 b1)) (t2tb3500 p) (t2tb10 w))))
  (exists ((a2 (set (tuple21 a b))))
  (and (mem4 a2 w) (mem (tuple2 (set1 (tuple2 a1 b1)) f1)
  (Tuple2 (set1 (tuple2 a1 b1)) f1 (t2tb11 a2) (t2tb2954 x)) (t2tb3500 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a b)) e))) (w (set (set (tuple21 a
  b)))) (x e))
  (= (mem36 x
  (tb2t2947 (image e1 (set1 (tuple2 a1 b1)) (t2tb3502 p) (t2tb10 w))))
  (exists ((a2 (set (tuple21 a b))))
  (and (mem4 a2 w) (mem (tuple2 (set1 (tuple2 a1 b1)) e1)
  (Tuple2 (set1 (tuple2 a1 b1)) e1 (t2tb11 a2) (t2tb2955 x)) (t2tb3502 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a b)) (tuple21 (tuple21 a c)
  (tuple21 b d))))) (w (set (set (tuple21 a b)))) (x (tuple21 (tuple21 a c)
  (tuple21 b d))))
  (= (mem24 x
  (tb2t686
  (image (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (set1 (tuple2 a1 b1))
  (t2tb3504 p) (t2tb10 w))))
  (exists ((a2 (set (tuple21 a b))))
  (and (mem4 a2 w) (mem
  (tuple2 (set1 (tuple2 a1 b1)) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
  (Tuple2 (set1 (tuple2 a1 b1)) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))
  (t2tb11 a2) (t2tb691 x)) (t2tb3504 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a b)) (set (tuple21 c d)))))
  (w (set (set (tuple21 a b)))) (x (set (tuple21 c d))))
  (= (mem22 x
  (tb2t688
  (image (set1 (tuple2 c1 d1)) (set1 (tuple2 a1 b1)) (t2tb3506 p) (t2tb10 w))))
  (exists ((a2 (set (tuple21 a b))))
  (and (mem4 a2 w) (mem (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 c1 d1)))
  (Tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 c1 d1)) (t2tb11 a2)
  (t2tb689 x)) (t2tb3506 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a b)) (tuple21 c d))))
  (w (set (set (tuple21 a b)))) (x (tuple21 c d)))
  (= (mem21 x
  (tb2t689
  (image (tuple2 c1 d1) (set1 (tuple2 a1 b1)) (t2tb3508 p) (t2tb10 w))))
  (exists ((a2 (set (tuple21 a b))))
  (and (mem4 a2 w) (mem (tuple2 (set1 (tuple2 a1 b1)) (tuple2 c1 d1))
  (Tuple2 (set1 (tuple2 a1 b1)) (tuple2 c1 d1) (t2tb11 a2) (t2tb693 x))
  (t2tb3508 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a b)) d))) (w (set (set (tuple21 a
  b)))) (x d))
  (= (mem20 x
  (tb2t690 (image d1 (set1 (tuple2 a1 b1)) (t2tb869 p) (t2tb10 w))))
  (exists ((a2 (set (tuple21 a b))))
  (and (mem4 a2 w) (mem (tuple2 (set1 (tuple2 a1 b1)) d1)
  (Tuple2 (set1 (tuple2 a1 b1)) d1 (t2tb11 a2) (t2tb694 x)) (t2tb869 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a b)) c))) (w (set (set (tuple21 a
  b)))) (x c))
  (= (mem7 x
  (tb2t132 (image c1 (set1 (tuple2 a1 b1)) (t2tb234 p) (t2tb10 w))))
  (exists ((a2 (set (tuple21 a b))))
  (and (mem4 a2 w) (mem (tuple2 (set1 (tuple2 a1 b1)) c1)
  (Tuple2 (set1 (tuple2 a1 b1)) c1 (t2tb11 a2) (t2tb135 x)) (t2tb234 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a b)) (set (tuple21 a b)))))
  (w (set (set (tuple21 a b)))) (x (set (tuple21 a b))))
  (= (mem4 x
  (tb2t10
  (image (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1)) (t2tb15 p) (t2tb10 w))))
  (exists ((a2 (set (tuple21 a b))))
  (and (mem4 a2 w) (mem (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1)))
  (Tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1)) (t2tb11 a2) (t2tb11 x))
  (t2tb15 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a b)) (tuple21 a b))))
  (w (set (set (tuple21 a b)))) (x (tuple21 a b)))
  (= (mem3 x
  (tb2t11 (image (tuple2 a1 b1) (set1 (tuple2 a1 b1)) (t2tb17 p) (t2tb10 w))))
  (exists ((a2 (set (tuple21 a b))))
  (and (mem4 a2 w) (mem (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 b1))
  (Tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 b1) (t2tb11 a2) (t2tb13 x))
  (t2tb17 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a b)) b))) (w (set (set (tuple21 a
  b)))) (x b))
  (= (mem2 x (tb2t12 (image b1 (set1 (tuple2 a1 b1)) (t2tb19 p) (t2tb10 w))))
  (exists ((a2 (set (tuple21 a b))))
  (and (mem4 a2 w) (mem (tuple2 (set1 (tuple2 a1 b1)) b1)
  (Tuple2 (set1 (tuple2 a1 b1)) b1 (t2tb11 a2) (t2tb14 x)) (t2tb19 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a b)) a))) (w (set (set (tuple21 a
  b)))) (x a))
  (= (mem1 x (tb2t1 (image a1 (set1 (tuple2 a1 b1)) (t2tb22 p) (t2tb10 w))))
  (exists ((a2 (set (tuple21 a b))))
  (and (mem4 a2 w) (mem (tuple2 (set1 (tuple2 a1 b1)) a1)
  (Tuple2 (set1 (tuple2 a1 b1)) a1 (t2tb11 a2) (t2tb2 x)) (t2tb22 p)))))))

;; mem_image
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (w (set (set (tuple21 a b)))) (x uni))
  (= (mem b2 x (image b2 (set1 (tuple2 a1 b1)) p (t2tb10 w)))
  (exists ((a2 (set (tuple21 a b))))
  (and (mem4 a2 w) (mem (tuple2 (set1 (tuple2 a1 b1)) b2)
  (Tuple2 (set1 (tuple2 a1 b1)) b2 (t2tb11 a2) x) p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) (tuple21 c f)))) (w (set (tuple21 a
  b))) (x (tuple21 c f)))
  (= (mem45 x
  (tb2t2942 (image (tuple2 c1 f1) (tuple2 a1 b1) (t2tb3510 p) (t2tb11 w))))
  (exists ((a2 (tuple21 a b)))
  (and (mem3 a2 w) (mem (tuple2 (tuple2 a1 b1) (tuple2 c1 f1))
  (Tuple2 (tuple2 a1 b1) (tuple2 c1 f1) (t2tb13 a2) (t2tb2948 x))
  (t2tb3510 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) (tuple21 a e)))) (w (set (tuple21 a
  b))) (x (tuple21 a e)))
  (= (mem44 x
  (tb2t2943 (image (tuple2 a1 e1) (tuple2 a1 b1) (t2tb3512 p) (t2tb11 w))))
  (exists ((a2 (tuple21 a b)))
  (and (mem3 a2 w) (mem (tuple2 (tuple2 a1 b1) (tuple2 a1 e1))
  (Tuple2 (tuple2 a1 b1) (tuple2 a1 e1) (t2tb13 a2) (t2tb2949 x))
  (t2tb3512 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) (tuple21 (tuple21 b d) (tuple21 e
  f))))) (w (set (tuple21 a b))) (x (tuple21 (tuple21 b d) (tuple21 e f))))
  (= (mem43 x
  (tb2t2944
  (image (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (tuple2 a1 b1) (t2tb3515 p)
  (t2tb11 w))))
  (exists ((a2 (tuple21 a b)))
  (and (mem3 a2 w) (mem
  (tuple2 (tuple2 a1 b1) (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)))
  (Tuple2 (tuple2 a1 b1) (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (t2tb13 a2)
  (t2tb2950 x)) (t2tb3515 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) (tuple21 (tuple21 a c) (tuple21 e
  f))))) (w (set (tuple21 a b))) (x (tuple21 (tuple21 a c) (tuple21 e f))))
  (= (mem42 x
  (tb2t2945
  (image (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (tuple2 a1 b1) (t2tb3516 p)
  (t2tb11 w))))
  (exists ((a2 (tuple21 a b)))
  (and (mem3 a2 w) (mem
  (tuple2 (tuple2 a1 b1) (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)))
  (Tuple2 (tuple2 a1 b1) (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (t2tb13 a2)
  (t2tb2951 x)) (t2tb3516 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) (set (tuple21 d f)))))
  (w (set (tuple21 a b))) (x (set (tuple21 d f))))
  (= (mem41 x
  (tb2t2939
  (image (set1 (tuple2 d1 f1)) (tuple2 a1 b1) (t2tb3518 p) (t2tb11 w))))
  (exists ((a2 (tuple21 a b)))
  (and (mem3 a2 w) (mem (tuple2 (tuple2 a1 b1) (set1 (tuple2 d1 f1)))
  (Tuple2 (tuple2 a1 b1) (set1 (tuple2 d1 f1)) (t2tb13 a2) (t2tb2938 x))
  (t2tb3518 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) (tuple21 d f)))) (w (set (tuple21 a
  b))) (x (tuple21 d f)))
  (= (mem40 x
  (tb2t2938 (image (tuple2 d1 f1) (tuple2 a1 b1) (t2tb3520 p) (t2tb11 w))))
  (exists ((a2 (tuple21 a b)))
  (and (mem3 a2 w) (mem (tuple2 (tuple2 a1 b1) (tuple2 d1 f1))
  (Tuple2 (tuple2 a1 b1) (tuple2 d1 f1) (t2tb13 a2) (t2tb2952 x))
  (t2tb3520 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) (set (tuple21 b e)))))
  (w (set (tuple21 a b))) (x (set (tuple21 b e))))
  (= (mem39 x
  (tb2t2941
  (image (set1 (tuple2 b1 e1)) (tuple2 a1 b1) (t2tb3522 p) (t2tb11 w))))
  (exists ((a2 (tuple21 a b)))
  (and (mem3 a2 w) (mem (tuple2 (tuple2 a1 b1) (set1 (tuple2 b1 e1)))
  (Tuple2 (tuple2 a1 b1) (set1 (tuple2 b1 e1)) (t2tb13 a2) (t2tb2940 x))
  (t2tb3522 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) (tuple21 b e)))) (w (set (tuple21 a
  b))) (x (tuple21 b e)))
  (= (mem38 x
  (tb2t2940 (image (tuple2 b1 e1) (tuple2 a1 b1) (t2tb3524 p) (t2tb11 w))))
  (exists ((a2 (tuple21 a b)))
  (and (mem3 a2 w) (mem (tuple2 (tuple2 a1 b1) (tuple2 b1 e1))
  (Tuple2 (tuple2 a1 b1) (tuple2 b1 e1) (t2tb13 a2) (t2tb2953 x))
  (t2tb3524 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) f))) (w (set (tuple21 a b))) (x f))
  (= (mem37 x (tb2t2946 (image f1 (tuple2 a1 b1) (t2tb3526 p) (t2tb11 w))))
  (exists ((a2 (tuple21 a b)))
  (and (mem3 a2 w) (mem (tuple2 (tuple2 a1 b1) f1)
  (Tuple2 (tuple2 a1 b1) f1 (t2tb13 a2) (t2tb2954 x)) (t2tb3526 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) e))) (w (set (tuple21 a b))) (x e))
  (= (mem36 x (tb2t2947 (image e1 (tuple2 a1 b1) (t2tb3528 p) (t2tb11 w))))
  (exists ((a2 (tuple21 a b)))
  (and (mem3 a2 w) (mem (tuple2 (tuple2 a1 b1) e1)
  (Tuple2 (tuple2 a1 b1) e1 (t2tb13 a2) (t2tb2955 x)) (t2tb3528 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) (tuple21 (tuple21 a c) (tuple21 b
  d))))) (w (set (tuple21 a b))) (x (tuple21 (tuple21 a c) (tuple21 b d))))
  (= (mem24 x
  (tb2t686
  (image (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 a1 b1) (t2tb3531 p)
  (t2tb11 w))))
  (exists ((a2 (tuple21 a b)))
  (and (mem3 a2 w) (mem
  (tuple2 (tuple2 a1 b1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
  (Tuple2 (tuple2 a1 b1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb13 a2)
  (t2tb691 x)) (t2tb3531 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) (set (tuple21 c d)))))
  (w (set (tuple21 a b))) (x (set (tuple21 c d))))
  (= (mem22 x
  (tb2t688
  (image (set1 (tuple2 c1 d1)) (tuple2 a1 b1) (t2tb3532 p) (t2tb11 w))))
  (exists ((a2 (tuple21 a b)))
  (and (mem3 a2 w) (mem (tuple2 (tuple2 a1 b1) (set1 (tuple2 c1 d1)))
  (Tuple2 (tuple2 a1 b1) (set1 (tuple2 c1 d1)) (t2tb13 a2) (t2tb689 x))
  (t2tb3532 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) (tuple21 c d)))) (w (set (tuple21 a
  b))) (x (tuple21 c d)))
  (= (mem21 x
  (tb2t689 (image (tuple2 c1 d1) (tuple2 a1 b1) (t2tb879 p) (t2tb11 w))))
  (exists ((a2 (tuple21 a b)))
  (and (mem3 a2 w) (mem (tuple2 (tuple2 a1 b1) (tuple2 c1 d1))
  (Tuple2 (tuple2 a1 b1) (tuple2 c1 d1) (t2tb13 a2) (t2tb693 x))
  (t2tb879 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) d))) (w (set (tuple21 a b))) (x d))
  (= (mem20 x (tb2t690 (image d1 (tuple2 a1 b1) (t2tb881 p) (t2tb11 w))))
  (exists ((a2 (tuple21 a b)))
  (and (mem3 a2 w) (mem (tuple2 (tuple2 a1 b1) d1)
  (Tuple2 (tuple2 a1 b1) d1 (t2tb13 a2) (t2tb694 x)) (t2tb881 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) c))) (w (set (tuple21 a b))) (x c))
  (= (mem7 x (tb2t132 (image c1 (tuple2 a1 b1) (t2tb245 p) (t2tb11 w))))
  (exists ((a2 (tuple21 a b)))
  (and (mem3 a2 w) (mem (tuple2 (tuple2 a1 b1) c1)
  (Tuple2 (tuple2 a1 b1) c1 (t2tb13 a2) (t2tb135 x)) (t2tb245 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) (set (tuple21 a b)))))
  (w (set (tuple21 a b))) (x (set (tuple21 a b))))
  (= (mem4 x
  (tb2t10 (image (set1 (tuple2 a1 b1)) (tuple2 a1 b1) (t2tb23 p) (t2tb11 w))))
  (exists ((a2 (tuple21 a b)))
  (and (mem3 a2 w) (mem (tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 b1)))
  (Tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 b1)) (t2tb13 a2) (t2tb11 x))
  (t2tb23 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) (tuple21 a b)))) (w (set (tuple21 a
  b))) (x (tuple21 a b)))
  (= (mem3 x
  (tb2t11 (image (tuple2 a1 b1) (tuple2 a1 b1) (t2tb25 p) (t2tb11 w))))
  (exists ((a2 (tuple21 a b)))
  (and (mem3 a2 w) (mem (tuple2 (tuple2 a1 b1) (tuple2 a1 b1))
  (Tuple2 (tuple2 a1 b1) (tuple2 a1 b1) (t2tb13 a2) (t2tb13 x)) (t2tb25 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) b))) (w (set (tuple21 a b))) (x b))
  (= (mem2 x (tb2t12 (image b1 (tuple2 a1 b1) (t2tb27 p) (t2tb11 w))))
  (exists ((a2 (tuple21 a b)))
  (and (mem3 a2 w) (mem (tuple2 (tuple2 a1 b1) b1)
  (Tuple2 (tuple2 a1 b1) b1 (t2tb13 a2) (t2tb14 x)) (t2tb27 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) a))) (w (set (tuple21 a b))) (x a))
  (= (mem1 x (tb2t1 (image a1 (tuple2 a1 b1) (t2tb29 p) (t2tb11 w))))
  (exists ((a2 (tuple21 a b)))
  (and (mem3 a2 w) (mem (tuple2 (tuple2 a1 b1) a1)
  (Tuple2 (tuple2 a1 b1) a1 (t2tb13 a2) (t2tb2 x)) (t2tb29 p)))))))

;; mem_image
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (w (set (tuple21 a b))) (x uni))
  (= (mem b2 x (image b2 (tuple2 a1 b1) p (t2tb11 w)))
  (exists ((a2 (tuple21 a b)))
  (and (mem3 a2 w) (mem (tuple2 (tuple2 a1 b1) b2)
  (Tuple2 (tuple2 a1 b1) b2 (t2tb13 a2) x) p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 b (tuple21 c f)))) (w (set b)) (x (tuple21 c f)))
  (= (mem45 x (tb2t2942 (image (tuple2 c1 f1) b1 (t2tb3534 p) (t2tb12 w))))
  (exists ((a2 b))
  (and (mem2 a2 w) (mem (tuple2 b1 (tuple2 c1 f1))
  (Tuple2 b1 (tuple2 c1 f1) (t2tb14 a2) (t2tb2948 x)) (t2tb3534 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 b (tuple21 a e)))) (w (set b)) (x (tuple21 a e)))
  (= (mem44 x (tb2t2943 (image (tuple2 a1 e1) b1 (t2tb3536 p) (t2tb12 w))))
  (exists ((a2 b))
  (and (mem2 a2 w) (mem (tuple2 b1 (tuple2 a1 e1))
  (Tuple2 b1 (tuple2 a1 e1) (t2tb14 a2) (t2tb2949 x)) (t2tb3536 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 b (tuple21 (tuple21 b d) (tuple21 e f)))))
  (w (set b)) (x (tuple21 (tuple21 b d) (tuple21 e f))))
  (= (mem43 x
  (tb2t2944
  (image (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) b1 (t2tb3538 p) (t2tb12 w))))
  (exists ((a2 b))
  (and (mem2 a2 w) (mem (tuple2 b1 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)))
  (Tuple2 b1 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (t2tb14 a2) (t2tb2950 x))
  (t2tb3538 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 b (tuple21 (tuple21 a c) (tuple21 e f)))))
  (w (set b)) (x (tuple21 (tuple21 a c) (tuple21 e f))))
  (= (mem42 x
  (tb2t2945
  (image (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) b1 (t2tb3540 p) (t2tb12 w))))
  (exists ((a2 b))
  (and (mem2 a2 w) (mem (tuple2 b1 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)))
  (Tuple2 b1 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (t2tb14 a2) (t2tb2951 x))
  (t2tb3540 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 b (set (tuple21 d f))))) (w (set b))
  (x (set (tuple21 d f))))
  (= (mem41 x
  (tb2t2939 (image (set1 (tuple2 d1 f1)) b1 (t2tb3542 p) (t2tb12 w))))
  (exists ((a2 b))
  (and (mem2 a2 w) (mem (tuple2 b1 (set1 (tuple2 d1 f1)))
  (Tuple2 b1 (set1 (tuple2 d1 f1)) (t2tb14 a2) (t2tb2938 x)) (t2tb3542 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 b (tuple21 d f)))) (w (set b)) (x (tuple21 d f)))
  (= (mem40 x (tb2t2938 (image (tuple2 d1 f1) b1 (t2tb3544 p) (t2tb12 w))))
  (exists ((a2 b))
  (and (mem2 a2 w) (mem (tuple2 b1 (tuple2 d1 f1))
  (Tuple2 b1 (tuple2 d1 f1) (t2tb14 a2) (t2tb2952 x)) (t2tb3544 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 b (set (tuple21 b e))))) (w (set b))
  (x (set (tuple21 b e))))
  (= (mem39 x
  (tb2t2941 (image (set1 (tuple2 b1 e1)) b1 (t2tb3547 p) (t2tb12 w))))
  (exists ((a2 b))
  (and (mem2 a2 w) (mem (tuple2 b1 (set1 (tuple2 b1 e1)))
  (Tuple2 b1 (set1 (tuple2 b1 e1)) (t2tb14 a2) (t2tb2940 x)) (t2tb3547 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 b (tuple21 b e)))) (w (set b)) (x (tuple21 b e)))
  (= (mem38 x (tb2t2940 (image (tuple2 b1 e1) b1 (t2tb3548 p) (t2tb12 w))))
  (exists ((a2 b))
  (and (mem2 a2 w) (mem (tuple2 b1 (tuple2 b1 e1))
  (Tuple2 b1 (tuple2 b1 e1) (t2tb14 a2) (t2tb2953 x)) (t2tb3548 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 b f))) (w (set b)) (x f))
  (= (mem37 x (tb2t2946 (image f1 b1 (t2tb3550 p) (t2tb12 w))))
  (exists ((a2 b))
  (and (mem2 a2 w) (mem (tuple2 b1 f1)
  (Tuple2 b1 f1 (t2tb14 a2) (t2tb2954 x)) (t2tb3550 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 b e))) (w (set b)) (x e))
  (= (mem36 x (tb2t2947 (image e1 b1 (t2tb2940 p) (t2tb12 w))))
  (exists ((a2 b))
  (and (mem2 a2 w) (mem38 (tb2t2953 (Tuple2 b1 e1 (t2tb14 a2) (t2tb2955 x)))
  p))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 b (tuple21 (tuple21 a c) (tuple21 b d)))))
  (w (set b)) (x (tuple21 (tuple21 a c) (tuple21 b d))))
  (= (mem24 x
  (tb2t686
  (image (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) b1 (t2tb3552 p) (t2tb12 w))))
  (exists ((a2 b))
  (and (mem2 a2 w) (mem (tuple2 b1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
  (Tuple2 b1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb14 a2) (t2tb691 x))
  (t2tb3552 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 b (set (tuple21 c d))))) (w (set b))
  (x (set (tuple21 c d))))
  (= (mem22 x
  (tb2t688 (image (set1 (tuple2 c1 d1)) b1 (t2tb3554 p) (t2tb12 w))))
  (exists ((a2 b))
  (and (mem2 a2 w) (mem (tuple2 b1 (set1 (tuple2 c1 d1)))
  (Tuple2 b1 (set1 (tuple2 c1 d1)) (t2tb14 a2) (t2tb689 x)) (t2tb3554 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 b (tuple21 c d)))) (w (set b)) (x (tuple21 c d)))
  (= (mem21 x (tb2t689 (image (tuple2 c1 d1) b1 (t2tb891 p) (t2tb12 w))))
  (exists ((a2 b))
  (and (mem2 a2 w) (mem (tuple2 b1 (tuple2 c1 d1))
  (Tuple2 b1 (tuple2 c1 d1) (t2tb14 a2) (t2tb693 x)) (t2tb891 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 b d))) (w (set b)) (x d))
  (= (mem20 x (tb2t690 (image d1 b1 (t2tb687 p) (t2tb12 w))))
  (exists ((a2 b))
  (and (mem2 a2 w) (mem (tuple2 b1 d1) (Tuple2 b1 d1 (t2tb14 a2) (t2tb694 x))
  (t2tb687 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 b c))) (w (set b)) (x c))
  (= (mem7 x (tb2t132 (image c1 b1 (t2tb131 p) (t2tb12 w))))
  (exists ((a2 b))
  (and (mem2 a2 w) (mem (tuple2 b1 c1) (Tuple2 b1 c1 (t2tb14 a2) (t2tb135 x))
  (t2tb131 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 b (set (tuple21 a b))))) (w (set b))
  (x (set (tuple21 a b))))
  (= (mem4 x (tb2t10 (image (set1 (tuple2 a1 b1)) b1 (t2tb31 p) (t2tb12 w))))
  (exists ((a2 b))
  (and (mem2 a2 w) (mem (tuple2 b1 (set1 (tuple2 a1 b1)))
  (Tuple2 b1 (set1 (tuple2 a1 b1)) (t2tb14 a2) (t2tb11 x)) (t2tb31 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 b (tuple21 a b)))) (w (set b)) (x (tuple21 a b)))
  (= (mem3 x (tb2t11 (image (tuple2 a1 b1) b1 (t2tb34 p) (t2tb12 w))))
  (exists ((a2 b))
  (and (mem2 a2 w) (mem (tuple2 b1 (tuple2 a1 b1))
  (Tuple2 b1 (tuple2 a1 b1) (t2tb14 a2) (t2tb13 x)) (t2tb34 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 b b))) (w (set b)) (x b))
  (= (mem2 x (tb2t12 (image b1 b1 (t2tb35 p) (t2tb12 w))))
  (exists ((a2 b))
  (and (mem2 a2 w) (mem (tuple2 b1 b1) (Tuple2 b1 b1 (t2tb14 a2) (t2tb14 x))
  (t2tb35 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 b a))) (w (set b)) (x a))
  (= (mem1 x (tb2t1 (image a1 b1 (t2tb37 p) (t2tb12 w))))
  (exists ((a2 b))
  (and (mem2 a2 w) (mem (tuple2 b1 a1) (Tuple2 b1 a1 (t2tb14 a2) (t2tb2 x))
  (t2tb37 p)))))))

;; mem_image
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (w (set b)) (x uni))
  (= (mem b2 x (image b2 b1 p (t2tb12 w)))
  (exists ((a2 b))
  (and (mem2 a2 w) (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 a2) x) p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 a (tuple21 c f)))) (w (set a)) (x (tuple21 c f)))
  (= (mem45 x (tb2t2942 (image (tuple2 c1 f1) a1 (t2tb3556 p) (t2tb1 w))))
  (exists ((a2 a))
  (and (mem1 a2 w) (mem (tuple2 a1 (tuple2 c1 f1))
  (Tuple2 a1 (tuple2 c1 f1) (t2tb2 a2) (t2tb2948 x)) (t2tb3556 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 a (tuple21 a e)))) (w (set a)) (x (tuple21 a e)))
  (= (mem44 x (tb2t2943 (image (tuple2 a1 e1) a1 (t2tb3558 p) (t2tb1 w))))
  (exists ((a2 a))
  (and (mem1 a2 w) (mem (tuple2 a1 (tuple2 a1 e1))
  (Tuple2 a1 (tuple2 a1 e1) (t2tb2 a2) (t2tb2949 x)) (t2tb3558 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 a (tuple21 (tuple21 b d) (tuple21 e f)))))
  (w (set a)) (x (tuple21 (tuple21 b d) (tuple21 e f))))
  (= (mem43 x
  (tb2t2944
  (image (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) a1 (t2tb3560 p) (t2tb1 w))))
  (exists ((a2 a))
  (and (mem1 a2 w) (mem (tuple2 a1 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)))
  (Tuple2 a1 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (t2tb2 a2) (t2tb2950 x))
  (t2tb3560 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 a (tuple21 (tuple21 a c) (tuple21 e f)))))
  (w (set a)) (x (tuple21 (tuple21 a c) (tuple21 e f))))
  (= (mem42 x
  (tb2t2945
  (image (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) a1 (t2tb3563 p) (t2tb1 w))))
  (exists ((a2 a))
  (and (mem1 a2 w) (mem (tuple2 a1 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)))
  (Tuple2 a1 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (t2tb2 a2) (t2tb2951 x))
  (t2tb3563 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 a (set (tuple21 d f))))) (w (set a))
  (x (set (tuple21 d f))))
  (= (mem41 x
  (tb2t2939 (image (set1 (tuple2 d1 f1)) a1 (t2tb3564 p) (t2tb1 w))))
  (exists ((a2 a))
  (and (mem1 a2 w) (mem (tuple2 a1 (set1 (tuple2 d1 f1)))
  (Tuple2 a1 (set1 (tuple2 d1 f1)) (t2tb2 a2) (t2tb2938 x)) (t2tb3564 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 a (tuple21 d f)))) (w (set a)) (x (tuple21 d f)))
  (= (mem40 x (tb2t2938 (image (tuple2 d1 f1) a1 (t2tb3566 p) (t2tb1 w))))
  (exists ((a2 a))
  (and (mem1 a2 w) (mem (tuple2 a1 (tuple2 d1 f1))
  (Tuple2 a1 (tuple2 d1 f1) (t2tb2 a2) (t2tb2952 x)) (t2tb3566 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 a (set (tuple21 b e))))) (w (set a))
  (x (set (tuple21 b e))))
  (= (mem39 x
  (tb2t2941 (image (set1 (tuple2 b1 e1)) a1 (t2tb3568 p) (t2tb1 w))))
  (exists ((a2 a))
  (and (mem1 a2 w) (mem (tuple2 a1 (set1 (tuple2 b1 e1)))
  (Tuple2 a1 (set1 (tuple2 b1 e1)) (t2tb2 a2) (t2tb2940 x)) (t2tb3568 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 a (tuple21 b e)))) (w (set a)) (x (tuple21 b e)))
  (= (mem38 x (tb2t2940 (image (tuple2 b1 e1) a1 (t2tb3570 p) (t2tb1 w))))
  (exists ((a2 a))
  (and (mem1 a2 w) (mem (tuple2 a1 (tuple2 b1 e1))
  (Tuple2 a1 (tuple2 b1 e1) (t2tb2 a2) (t2tb2953 x)) (t2tb3570 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 a f))) (w (set a)) (x f))
  (= (mem37 x (tb2t2946 (image f1 a1 (t2tb3572 p) (t2tb1 w))))
  (exists ((a2 a))
  (and (mem1 a2 w) (mem (tuple2 a1 f1) (Tuple2 a1 f1 (t2tb2 a2) (t2tb2954 x))
  (t2tb3572 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 a e))) (w (set a)) (x e))
  (= (mem36 x (tb2t2947 (image e1 a1 (t2tb2943 p) (t2tb1 w))))
  (exists ((a2 a))
  (and (mem1 a2 w) (mem44 (tb2t2949 (Tuple2 a1 e1 (t2tb2 a2) (t2tb2955 x)))
  p))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 a (tuple21 (tuple21 a c) (tuple21 b d)))))
  (w (set a)) (x (tuple21 (tuple21 a c) (tuple21 b d))))
  (= (mem24 x
  (tb2t686
  (image (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) a1 (t2tb3574 p) (t2tb1 w))))
  (exists ((a2 a))
  (and (mem1 a2 w) (mem (tuple2 a1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
  (Tuple2 a1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb2 a2) (t2tb691 x))
  (t2tb3574 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 a (set (tuple21 c d))))) (w (set a))
  (x (set (tuple21 c d))))
  (= (mem22 x
  (tb2t688 (image (set1 (tuple2 c1 d1)) a1 (t2tb3576 p) (t2tb1 w))))
  (exists ((a2 a))
  (and (mem1 a2 w) (mem (tuple2 a1 (set1 (tuple2 c1 d1)))
  (Tuple2 a1 (set1 (tuple2 c1 d1)) (t2tb2 a2) (t2tb689 x)) (t2tb3576 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 a (tuple21 c d)))) (w (set a)) (x (tuple21 c d)))
  (= (mem21 x (tb2t689 (image (tuple2 c1 d1) a1 (t2tb901 p) (t2tb1 w))))
  (exists ((a2 a))
  (and (mem1 a2 w) (mem (tuple2 a1 (tuple2 c1 d1))
  (Tuple2 a1 (tuple2 c1 d1) (t2tb2 a2) (t2tb693 x)) (t2tb901 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 a d))) (w (set a)) (x d))
  (= (mem20 x (tb2t690 (image d1 a1 (t2tb903 p) (t2tb1 w))))
  (exists ((a2 a))
  (and (mem1 a2 w) (mem (tuple2 a1 d1) (Tuple2 a1 d1 (t2tb2 a2) (t2tb694 x))
  (t2tb903 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 a c))) (w (set a)) (x c))
  (= (mem7 x (tb2t132 (image c1 a1 (t2tb129 p) (t2tb1 w))))
  (exists ((a2 a))
  (and (mem1 a2 w) (mem (tuple2 a1 c1) (Tuple2 a1 c1 (t2tb2 a2) (t2tb135 x))
  (t2tb129 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 a (set (tuple21 a b))))) (w (set a))
  (x (set (tuple21 a b))))
  (= (mem4 x (tb2t10 (image (set1 (tuple2 a1 b1)) a1 (t2tb39 p) (t2tb1 w))))
  (exists ((a2 a))
  (and (mem1 a2 w) (mem (tuple2 a1 (set1 (tuple2 a1 b1)))
  (Tuple2 a1 (set1 (tuple2 a1 b1)) (t2tb2 a2) (t2tb11 x)) (t2tb39 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 a (tuple21 a b)))) (w (set a)) (x (tuple21 a b)))
  (= (mem3 x (tb2t11 (image (tuple2 a1 b1) a1 (t2tb41 p) (t2tb1 w))))
  (exists ((a2 a))
  (and (mem1 a2 w) (mem (tuple2 a1 (tuple2 a1 b1))
  (Tuple2 a1 (tuple2 a1 b1) (t2tb2 a2) (t2tb13 x)) (t2tb41 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 a b))) (w (set a)) (x b))
  (= (mem2 x (tb2t12 (image b1 a1 (t2tb11 p) (t2tb1 w))))
  (exists ((a2 a))
  (and (mem1 a2 w) (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 a2) (t2tb14 x))) p))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 a a))) (w (set a)) (x a))
  (= (mem1 x (tb2t1 (image a1 a1 (t2tb4 p) (t2tb1 w))))
  (exists ((a2 a))
  (and (mem1 a2 w) (mem (tuple2 a1 a1) (Tuple2 a1 a1 (t2tb2 a2) (t2tb2 x))
  (t2tb4 p)))))))

;; mem_image
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (w (set a)) (x uni))
  (= (mem b2 x (image b2 a1 p (t2tb1 w)))
  (exists ((a2 a))
  (and (mem1 a2 w) (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 a2) x) p)))))))

;; mem_image
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((p uni) (w uni) (x uni))
  (and
  (=> (mem b2 x (image b2 a2 p w))
  (exists ((a3 uni))
  (and (sort a2 a3)
  (and (mem a2 a3 w) (mem (tuple2 a2 b2) (Tuple2 a2 b2 a3 x) p)))))
  (=>
  (exists ((a3 uni))
  (and (mem a2 a3 w) (mem (tuple2 a2 b2) (Tuple2 a2 b2 a3 x) p))) (mem b2 x
  (image b2 a2 p w)))))))

(declare-fun infix_lspl (ty ty uni uni) uni)

;; infix <+_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (tuple2 a2 b2))
  (infix_lspl b2 a2 x x1)))))

;; mem_overriding
  (assert
  (forall ((b2 ty))
  (forall ((q uni) (p uni) (x (tuple21 c f)) (y uni))
  (= (mem (tuple2 (tuple2 c1 f1) b2)
  (Tuple2 (tuple2 c1 f1) b2 (t2tb2948 x) y)
  (infix_lspl b2 (tuple2 c1 f1) q p))
  (or
  (and (mem (tuple2 (tuple2 c1 f1) b2)
  (Tuple2 (tuple2 c1 f1) b2 (t2tb2948 x) y) q)
  (not (mem45 x (tb2t2942 (dom b2 (tuple2 c1 f1) p))))) (mem
  (tuple2 (tuple2 c1 f1) b2) (Tuple2 (tuple2 c1 f1) b2 (t2tb2948 x) y) p))))))

;; mem_overriding
  (assert
  (forall ((b2 ty))
  (forall ((q uni) (p uni) (x (tuple21 a e)) (y uni))
  (= (mem (tuple2 (tuple2 a1 e1) b2)
  (Tuple2 (tuple2 a1 e1) b2 (t2tb2949 x) y)
  (infix_lspl b2 (tuple2 a1 e1) q p))
  (or
  (and (mem (tuple2 (tuple2 a1 e1) b2)
  (Tuple2 (tuple2 a1 e1) b2 (t2tb2949 x) y) q)
  (not (mem44 x (tb2t2943 (dom b2 (tuple2 a1 e1) p))))) (mem
  (tuple2 (tuple2 a1 e1) b2) (Tuple2 (tuple2 a1 e1) b2 (t2tb2949 x) y) p))))))

;; mem_overriding
  (assert
  (forall ((b2 ty))
  (forall ((q uni) (p uni) (x (tuple21 (tuple21 b d) (tuple21 e f))) (y uni))
  (= (mem (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) b2)
  (Tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) b2 (t2tb2950 x) y)
  (infix_lspl b2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) q p))
  (or
  (and (mem (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) b2)
  (Tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) b2 (t2tb2950 x) y) q)
  (not (mem43 x
  (tb2t2944 (dom b2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) p))))) (mem
  (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) b2)
  (Tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) b2 (t2tb2950 x) y) p))))))

;; mem_overriding
  (assert
  (forall ((b2 ty))
  (forall ((q uni) (p uni) (x (tuple21 (tuple21 a c) (tuple21 e f))) (y uni))
  (= (mem (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) b2)
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) b2 (t2tb2951 x) y)
  (infix_lspl b2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) q p))
  (or
  (and (mem (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) b2)
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) b2 (t2tb2951 x) y) q)
  (not (mem42 x
  (tb2t2945 (dom b2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) p))))) (mem
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) b2)
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) b2 (t2tb2951 x) y) p))))))

;; mem_overriding
  (assert
  (forall ((b2 ty))
  (forall ((q uni) (p uni) (x (set (tuple21 d f))) (y uni))
  (= (mem (tuple2 (set1 (tuple2 d1 f1)) b2)
  (Tuple2 (set1 (tuple2 d1 f1)) b2 (t2tb2938 x) y)
  (infix_lspl b2 (set1 (tuple2 d1 f1)) q p))
  (or
  (and (mem (tuple2 (set1 (tuple2 d1 f1)) b2)
  (Tuple2 (set1 (tuple2 d1 f1)) b2 (t2tb2938 x) y) q)
  (not (mem41 x (tb2t2939 (dom b2 (set1 (tuple2 d1 f1)) p))))) (mem
  (tuple2 (set1 (tuple2 d1 f1)) b2)
  (Tuple2 (set1 (tuple2 d1 f1)) b2 (t2tb2938 x) y) p))))))

;; mem_overriding
  (assert
  (forall ((b2 ty))
  (forall ((q uni) (p uni) (x (tuple21 d f)) (y uni))
  (= (mem (tuple2 (tuple2 d1 f1) b2)
  (Tuple2 (tuple2 d1 f1) b2 (t2tb2952 x) y)
  (infix_lspl b2 (tuple2 d1 f1) q p))
  (or
  (and (mem (tuple2 (tuple2 d1 f1) b2)
  (Tuple2 (tuple2 d1 f1) b2 (t2tb2952 x) y) q)
  (not (mem40 x (tb2t2938 (dom b2 (tuple2 d1 f1) p))))) (mem
  (tuple2 (tuple2 d1 f1) b2) (Tuple2 (tuple2 d1 f1) b2 (t2tb2952 x) y) p))))))

;; mem_overriding
  (assert
  (forall ((b2 ty))
  (forall ((q uni) (p uni) (x (set (tuple21 b e))) (y uni))
  (= (mem (tuple2 (set1 (tuple2 b1 e1)) b2)
  (Tuple2 (set1 (tuple2 b1 e1)) b2 (t2tb2940 x) y)
  (infix_lspl b2 (set1 (tuple2 b1 e1)) q p))
  (or
  (and (mem (tuple2 (set1 (tuple2 b1 e1)) b2)
  (Tuple2 (set1 (tuple2 b1 e1)) b2 (t2tb2940 x) y) q)
  (not (mem39 x (tb2t2941 (dom b2 (set1 (tuple2 b1 e1)) p))))) (mem
  (tuple2 (set1 (tuple2 b1 e1)) b2)
  (Tuple2 (set1 (tuple2 b1 e1)) b2 (t2tb2940 x) y) p))))))

;; mem_overriding
  (assert
  (forall ((b2 ty))
  (forall ((q uni) (p uni) (x (tuple21 b e)) (y uni))
  (= (mem (tuple2 (tuple2 b1 e1) b2)
  (Tuple2 (tuple2 b1 e1) b2 (t2tb2953 x) y)
  (infix_lspl b2 (tuple2 b1 e1) q p))
  (or
  (and (mem (tuple2 (tuple2 b1 e1) b2)
  (Tuple2 (tuple2 b1 e1) b2 (t2tb2953 x) y) q)
  (not (mem38 x (tb2t2940 (dom b2 (tuple2 b1 e1) p))))) (mem
  (tuple2 (tuple2 b1 e1) b2) (Tuple2 (tuple2 b1 e1) b2 (t2tb2953 x) y) p))))))

;; mem_overriding
  (assert
  (forall ((b2 ty))
  (forall ((q uni) (p uni) (x f) (y uni))
  (= (mem (tuple2 f1 b2) (Tuple2 f1 b2 (t2tb2954 x) y)
  (infix_lspl b2 f1 q p))
  (or
  (and (mem (tuple2 f1 b2) (Tuple2 f1 b2 (t2tb2954 x) y) q)
  (not (mem37 x (tb2t2946 (dom b2 f1 p))))) (mem (tuple2 f1 b2)
  (Tuple2 f1 b2 (t2tb2954 x) y) p))))))

;; mem_overriding
  (assert
  (forall ((b2 ty))
  (forall ((q uni) (p uni) (x e) (y uni))
  (= (mem (tuple2 e1 b2) (Tuple2 e1 b2 (t2tb2955 x) y)
  (infix_lspl b2 e1 q p))
  (or
  (and (mem (tuple2 e1 b2) (Tuple2 e1 b2 (t2tb2955 x) y) q)
  (not (mem36 x (tb2t2947 (dom b2 e1 p))))) (mem (tuple2 e1 b2)
  (Tuple2 e1 b2 (t2tb2955 x) y) p))))))

;; mem_overriding
  (assert
  (forall ((b2 ty))
  (forall ((q uni) (p uni) (x (tuple21 (tuple21 a c) (tuple21 b d))) (y uni))
  (= (mem (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) b2)
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) b2 (t2tb691 x) y)
  (infix_lspl b2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) q p))
  (or
  (and (mem (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) b2)
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) b2 (t2tb691 x) y) q)
  (not (mem24 x (tb2t686 (dom b2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) p)))))
  (mem (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) b2)
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) b2 (t2tb691 x) y) p))))))

;; mem_overriding
  (assert
  (forall ((q (set (tuple21 (tuple21 b d) (tuple21 e f))))
  (p (set (tuple21 (tuple21 b d) (tuple21 e f)))) (x (tuple21 b d))
  (y (tuple21 e f)))
  (= (mem43
  (tb2t2950 (Tuple2 (tuple2 b1 d1) (tuple2 e1 f1) (t2tb692 x) (t2tb3315 y)))
  (tb2t2944
  (infix_lspl (tuple2 e1 f1) (tuple2 b1 d1) (t2tb2944 q) (t2tb2944 p))))
  (or
  (and (mem43
  (tb2t2950 (Tuple2 (tuple2 b1 d1) (tuple2 e1 f1) (t2tb692 x) (t2tb3315 y)))
  q)
  (not (mem (tuple2 b1 d1) (t2tb692 x)
  (dom (tuple2 e1 f1) (tuple2 b1 d1) (t2tb2944 p))))) (mem43
  (tb2t2950 (Tuple2 (tuple2 b1 d1) (tuple2 e1 f1) (t2tb692 x) (t2tb3315 y)))
  p)))))

;; mem_overriding
  (assert
  (forall ((b2 ty))
  (forall ((q uni) (p uni) (x (set (tuple21 c d))) (y uni))
  (= (mem (tuple2 (set1 (tuple2 c1 d1)) b2)
  (Tuple2 (set1 (tuple2 c1 d1)) b2 (t2tb689 x) y)
  (infix_lspl b2 (set1 (tuple2 c1 d1)) q p))
  (or
  (and (mem (tuple2 (set1 (tuple2 c1 d1)) b2)
  (Tuple2 (set1 (tuple2 c1 d1)) b2 (t2tb689 x) y) q)
  (not (mem22 x (tb2t688 (dom b2 (set1 (tuple2 c1 d1)) p))))) (mem
  (tuple2 (set1 (tuple2 c1 d1)) b2)
  (Tuple2 (set1 (tuple2 c1 d1)) b2 (t2tb689 x) y) p))))))

;; mem_overriding
  (assert
  (forall ((b2 ty))
  (forall ((q uni) (p uni) (x (tuple21 c d)) (y uni))
  (= (mem (tuple2 (tuple2 c1 d1) b2) (Tuple2 (tuple2 c1 d1) b2 (t2tb693 x) y)
  (infix_lspl b2 (tuple2 c1 d1) q p))
  (or
  (and (mem (tuple2 (tuple2 c1 d1) b2)
  (Tuple2 (tuple2 c1 d1) b2 (t2tb693 x) y) q)
  (not (mem21 x (tb2t689 (dom b2 (tuple2 c1 d1) p))))) (mem
  (tuple2 (tuple2 c1 d1) b2) (Tuple2 (tuple2 c1 d1) b2 (t2tb693 x) y) p))))))

;; mem_overriding
  (assert
  (forall ((q (set (tuple21 d f))) (p (set (tuple21 d f))) (x d) (y f))
  (= (mem40 (tb2t2952 (Tuple2 d1 f1 (t2tb694 x) (t2tb2954 y)))
  (tb2t2938 (infix_lspl f1 d1 (t2tb2938 q) (t2tb2938 p))))
  (or
  (and (mem40 (tb2t2952 (Tuple2 d1 f1 (t2tb694 x) (t2tb2954 y))) q)
  (not (mem20 x (tb2t690 (dom f1 d1 (t2tb2938 p)))))) (mem40
  (tb2t2952 (Tuple2 d1 f1 (t2tb694 x) (t2tb2954 y))) p)))))

;; mem_overriding
  (assert
  (forall ((b2 ty))
  (forall ((q uni) (p uni) (x d) (y uni))
  (= (mem (tuple2 d1 b2) (Tuple2 d1 b2 (t2tb694 x) y) (infix_lspl b2 d1 q p))
  (or
  (and (mem (tuple2 d1 b2) (Tuple2 d1 b2 (t2tb694 x) y) q)
  (not (mem20 x (tb2t690 (dom b2 d1 p))))) (mem (tuple2 d1 b2)
  (Tuple2 d1 b2 (t2tb694 x) y) p))))))

;; mem_overriding
  (assert
  (forall ((q (set (tuple21 (tuple21 a c) (tuple21 e f))))
  (p (set (tuple21 (tuple21 a c) (tuple21 e f)))) (x (tuple21 a c))
  (y (tuple21 e f)))
  (= (mem42
  (tb2t2951 (Tuple2 (tuple2 a1 c1) (tuple2 e1 f1) (t2tb133 x) (t2tb3315 y)))
  (tb2t2945
  (infix_lspl (tuple2 e1 f1) (tuple2 a1 c1) (t2tb2945 q) (t2tb2945 p))))
  (or
  (and (mem42
  (tb2t2951 (Tuple2 (tuple2 a1 c1) (tuple2 e1 f1) (t2tb133 x) (t2tb3315 y)))
  q)
  (not (mem (tuple2 a1 c1) (t2tb133 x)
  (dom (tuple2 e1 f1) (tuple2 a1 c1) (t2tb2945 p))))) (mem42
  (tb2t2951 (Tuple2 (tuple2 a1 c1) (tuple2 e1 f1) (t2tb133 x) (t2tb3315 y)))
  p)))))

;; mem_overriding
  (assert
  (forall ((q (set (tuple21 (tuple21 a c) (tuple21 b d))))
  (p (set (tuple21 (tuple21 a c) (tuple21 b d)))) (x (tuple21 a c))
  (y (tuple21 b d)))
  (= (mem24
  (tb2t691 (Tuple2 (tuple2 a1 c1) (tuple2 b1 d1) (t2tb133 x) (t2tb692 y)))
  (tb2t686
  (infix_lspl (tuple2 b1 d1) (tuple2 a1 c1) (t2tb686 q) (t2tb686 p))))
  (or
  (and (mem24
  (tb2t691 (Tuple2 (tuple2 a1 c1) (tuple2 b1 d1) (t2tb133 x) (t2tb692 y))) q)
  (not (mem (tuple2 a1 c1) (t2tb133 x)
  (dom (tuple2 b1 d1) (tuple2 a1 c1) (t2tb686 p))))) (mem24
  (tb2t691 (Tuple2 (tuple2 a1 c1) (tuple2 b1 d1) (t2tb133 x) (t2tb692 y)))
  p)))))

;; mem_overriding
  (assert
  (forall ((q (set (tuple21 c f))) (p (set (tuple21 c f))) (x c) (y f))
  (= (mem45 (tb2t2948 (Tuple2 c1 f1 (t2tb135 x) (t2tb2954 y)))
  (tb2t2942 (infix_lspl f1 c1 (t2tb2942 q) (t2tb2942 p))))
  (or
  (and (mem45 (tb2t2948 (Tuple2 c1 f1 (t2tb135 x) (t2tb2954 y))) q)
  (not (mem7 x (tb2t132 (dom f1 c1 (t2tb2942 p)))))) (mem45
  (tb2t2948 (Tuple2 c1 f1 (t2tb135 x) (t2tb2954 y))) p)))))

;; mem_overriding
  (assert
  (forall ((q (set (tuple21 c d))) (p (set (tuple21 c d))) (x c) (y d))
  (= (mem21 (tb2t693 (Tuple2 c1 d1 (t2tb135 x) (t2tb694 y)))
  (tb2t689 (infix_lspl d1 c1 (t2tb689 q) (t2tb689 p))))
  (or
  (and (mem21 (tb2t693 (Tuple2 c1 d1 (t2tb135 x) (t2tb694 y))) q)
  (not (mem7 x (tb2t132 (dom d1 c1 (t2tb689 p)))))) (mem21
  (tb2t693 (Tuple2 c1 d1 (t2tb135 x) (t2tb694 y))) p)))))

;; mem_overriding
  (assert
  (forall ((b2 ty))
  (forall ((q uni) (p uni) (x c) (y uni))
  (= (mem (tuple2 c1 b2) (Tuple2 c1 b2 (t2tb135 x) y) (infix_lspl b2 c1 q p))
  (or
  (and (mem (tuple2 c1 b2) (Tuple2 c1 b2 (t2tb135 x) y) q)
  (not (mem7 x (tb2t132 (dom b2 c1 p))))) (mem (tuple2 c1 b2)
  (Tuple2 c1 b2 (t2tb135 x) y) p))))))

;; mem_overriding
  (assert
  (forall ((b2 ty))
  (forall ((q uni) (p uni) (x (set (tuple21 a b))) (y uni))
  (= (mem (tuple2 (set1 (tuple2 a1 b1)) b2)
  (Tuple2 (set1 (tuple2 a1 b1)) b2 (t2tb11 x) y)
  (infix_lspl b2 (set1 (tuple2 a1 b1)) q p))
  (or
  (and (mem (tuple2 (set1 (tuple2 a1 b1)) b2)
  (Tuple2 (set1 (tuple2 a1 b1)) b2 (t2tb11 x) y) q)
  (not (mem4 x (tb2t10 (dom b2 (set1 (tuple2 a1 b1)) p))))) (mem
  (tuple2 (set1 (tuple2 a1 b1)) b2)
  (Tuple2 (set1 (tuple2 a1 b1)) b2 (t2tb11 x) y) p))))))

;; mem_overriding
  (assert
  (forall ((b2 ty))
  (forall ((q uni) (p uni) (x (tuple21 a b)) (y uni))
  (= (mem (tuple2 (tuple2 a1 b1) b2) (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) y)
  (infix_lspl b2 (tuple2 a1 b1) q p))
  (or
  (and (mem (tuple2 (tuple2 a1 b1) b2)
  (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) y) q)
  (not (mem3 x (tb2t11 (dom b2 (tuple2 a1 b1) p))))) (mem
  (tuple2 (tuple2 a1 b1) b2) (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) y) p))))))

;; mem_overriding
  (assert
  (forall ((q (set (tuple21 b e))) (p (set (tuple21 b e))) (x b) (y e))
  (= (mem38 (tb2t2953 (Tuple2 b1 e1 (t2tb14 x) (t2tb2955 y)))
  (tb2t2940 (infix_lspl e1 b1 (t2tb2940 q) (t2tb2940 p))))
  (or
  (and (mem38 (tb2t2953 (Tuple2 b1 e1 (t2tb14 x) (t2tb2955 y))) q)
  (not (mem2 x (tb2t12 (dom e1 b1 (t2tb2940 p)))))) (mem38
  (tb2t2953 (Tuple2 b1 e1 (t2tb14 x) (t2tb2955 y))) p)))))

;; mem_overriding
  (assert
  (forall ((b2 ty))
  (forall ((q uni) (p uni) (x b) (y uni))
  (= (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) y) (infix_lspl b2 b1 q p))
  (or
  (and (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) y) q)
  (not (mem2 x (tb2t12 (dom b2 b1 p))))) (mem (tuple2 b1 b2)
  (Tuple2 b1 b2 (t2tb14 x) y) p))))))

;; mem_overriding
  (assert
  (forall ((q (set (tuple21 a e))) (p (set (tuple21 a e))) (x a) (y e))
  (= (mem44 (tb2t2949 (Tuple2 a1 e1 (t2tb2 x) (t2tb2955 y)))
  (tb2t2943 (infix_lspl e1 a1 (t2tb2943 q) (t2tb2943 p))))
  (or
  (and (mem44 (tb2t2949 (Tuple2 a1 e1 (t2tb2 x) (t2tb2955 y))) q)
  (not (mem1 x (tb2t1 (dom e1 a1 (t2tb2943 p)))))) (mem44
  (tb2t2949 (Tuple2 a1 e1 (t2tb2 x) (t2tb2955 y))) p)))))

;; mem_overriding
  (assert
  (forall ((q (set (tuple21 a b))) (p (set (tuple21 a b))) (x a) (y b))
  (= (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y)))
  (tb2t11 (infix_lspl b1 a1 (t2tb11 q) (t2tb11 p))))
  (or
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y))) q)
  (not (mem1 x (tb2t1 (dom b1 a1 (t2tb11 p)))))) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y))) p)))))

;; mem_overriding
  (assert
  (forall ((b2 ty))
  (forall ((q uni) (p uni) (x a) (y uni))
  (= (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) y) (infix_lspl b2 a1 q p))
  (or
  (and (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) y) q)
  (not (mem1 x (tb2t1 (dom b2 a1 p))))) (mem (tuple2 a1 b2)
  (Tuple2 a1 b2 (t2tb2 x) y) p))))))

;; mem_overriding
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((q uni) (p uni) (x uni) (y uni))
  (= (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) (infix_lspl b2 a2 q p))
  (or
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) q)
  (not (mem a2 x (dom b2 a2 p)))) (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) p))))))

(declare-fun direct_product (ty ty ty uni uni) uni)

;; direct_product_sort
  (assert
  (forall ((a2 ty) (b2 ty) (c2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (tuple2 a2 (tuple2 b2 c2)))
  (direct_product c2 b2 a2 x x1)))))

;; mem_direct_product
  (assert
  (forall ((b2 ty))
  (forall ((f2 uni) (g (set (tuple21 (tuple21 b d) (tuple21 e f))))
  (x (tuple21 b d)) (y uni) (z (tuple21 e f)))
  (= (mem (tuple2 (tuple2 b1 d1) (tuple2 b2 (tuple2 e1 f1)))
  (Tuple2 (tuple2 b1 d1) (tuple2 b2 (tuple2 e1 f1)) (t2tb692 x)
  (Tuple2 b2 (tuple2 e1 f1) y (t2tb3315 z)))
  (direct_product (tuple2 e1 f1) b2 (tuple2 b1 d1) f2 (t2tb2944 g)))
  (and (mem (tuple2 (tuple2 b1 d1) b2)
  (Tuple2 (tuple2 b1 d1) b2 (t2tb692 x) y) f2) (mem43
  (tb2t2950 (Tuple2 (tuple2 b1 d1) (tuple2 e1 f1) (t2tb692 x) (t2tb3315 z)))
  g))))))

(declare-fun t2tb3912 ((set (tuple21 (tuple21 b d) (tuple21 (tuple21 e f)
  (tuple21 e f))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b d) (tuple21 (tuple21 e f) (tuple21 e
  f)))))) (sort
  (set1 (tuple2 (tuple2 b1 d1) (tuple2 (tuple2 e1 f1) (tuple2 e1 f1))))
  (t2tb3912 x))))

(declare-fun tb2t3912 (uni) (set (tuple21 (tuple21 b d) (tuple21 (tuple21 e
  f) (tuple21 e f)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b d) (tuple21 (tuple21 e f) (tuple21 e
  f)))))) (! (= (tb2t3912 (t2tb3912 i)) i) :pattern ((t2tb3912 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 b1 d1) (tuple2 (tuple2 e1 f1) (tuple2 e1 f1)))) j)
     (= (t2tb3912 (tb2t3912 j)) j)) :pattern ((t2tb3912 (tb2t3912 j))) )))

(declare-fun t2tb3913 ((tuple21 (tuple21 b d) (tuple21 (tuple21 e f)
  (tuple21 e f)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b d) (tuple21 (tuple21 e f) (tuple21 e f)))))
  (sort (tuple2 (tuple2 b1 d1) (tuple2 (tuple2 e1 f1) (tuple2 e1 f1)))
  (t2tb3913 x))))

(declare-fun tb2t3913 (uni) (tuple21 (tuple21 b d) (tuple21 (tuple21 e f)
  (tuple21 e f))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b d) (tuple21 (tuple21 e f) (tuple21 e f)))))
  (! (= (tb2t3913 (t2tb3913 i)) i) :pattern ((t2tb3913 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 d1) (tuple2 (tuple2 e1 f1) (tuple2 e1 f1)))
     j) (= (t2tb3913 (tb2t3913 j)) j)) :pattern ((t2tb3913 (tb2t3913 j))) )))

;; mem_direct_product
  (assert
  (forall ((f2 (set (tuple21 (tuple21 b d) (tuple21 e f))))
  (g (set (tuple21 (tuple21 b d) (tuple21 e f)))) (x (tuple21 b d))
  (y (tuple21 e f)) (z (tuple21 e f)))
  (= (mem (tuple2 (tuple2 b1 d1) (tuple2 (tuple2 e1 f1) (tuple2 e1 f1)))
  (Tuple2 (tuple2 b1 d1) (tuple2 (tuple2 e1 f1) (tuple2 e1 f1)) (t2tb692 x)
  (Tuple2 (tuple2 e1 f1) (tuple2 e1 f1) (t2tb3315 y) (t2tb3315 z)))
  (direct_product (tuple2 e1 f1) (tuple2 e1 f1) (tuple2 b1 d1) (t2tb2944 f2)
  (t2tb2944 g)))
  (and (mem43
  (tb2t2950 (Tuple2 (tuple2 b1 d1) (tuple2 e1 f1) (t2tb692 x) (t2tb3315 y)))
  f2) (mem43
  (tb2t2950 (Tuple2 (tuple2 b1 d1) (tuple2 e1 f1) (t2tb692 x) (t2tb3315 z)))
  g)))))

;; mem_direct_product
  (assert
  (forall ((c2 ty))
  (forall ((f2 (set (tuple21 (tuple21 b d) (tuple21 e f)))) (g uni)
  (x (tuple21 b d)) (y (tuple21 e f)) (z uni))
  (= (mem (tuple2 (tuple2 b1 d1) (tuple2 (tuple2 e1 f1) c2))
  (Tuple2 (tuple2 b1 d1) (tuple2 (tuple2 e1 f1) c2) (t2tb692 x)
  (Tuple2 (tuple2 e1 f1) c2 (t2tb3315 y) z))
  (direct_product c2 (tuple2 e1 f1) (tuple2 b1 d1) (t2tb2944 f2) g))
  (and (mem43
  (tb2t2950 (Tuple2 (tuple2 b1 d1) (tuple2 e1 f1) (t2tb692 x) (t2tb3315 y)))
  f2) (mem (tuple2 (tuple2 b1 d1) c2)
  (Tuple2 (tuple2 b1 d1) c2 (t2tb692 x) z) g))))))

(declare-fun t2tb3914 ((tuple21 (tuple21 b d) f)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b d) f))) (sort (tuple2 (tuple2 b1 d1) f1)
  (t2tb3914 x))))

(declare-fun tb2t3914 (uni) (tuple21 (tuple21 b d) f))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b d) f)))
  (! (= (tb2t3914 (t2tb3914 i)) i) :pattern ((t2tb3914 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 d1) f1) j) (= (t2tb3914 (tb2t3914 j)) j)) :pattern (
  (t2tb3914 (tb2t3914 j))) )))

(declare-fun t2tb3915 ((set (tuple21 (tuple21 b d) e))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b d) e)))) (sort
  (set1 (tuple2 (tuple2 b1 d1) e1)) (t2tb3915 x))))

(declare-fun tb2t3915 (uni) (set (tuple21 (tuple21 b d) e)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b d) e))))
  (! (= (tb2t3915 (t2tb3915 i)) i) :pattern ((t2tb3915 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 d1) e1)) j)
     (= (t2tb3915 (tb2t3915 j)) j)) :pattern ((t2tb3915 (tb2t3915 j))) )))

(declare-fun t2tb3916 ((tuple21 (tuple21 b d) e)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b d) e))) (sort (tuple2 (tuple2 b1 d1) e1)
  (t2tb3916 x))))

(declare-fun tb2t3916 (uni) (tuple21 (tuple21 b d) e))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b d) e)))
  (! (= (tb2t3916 (t2tb3916 i)) i) :pattern ((t2tb3916 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 d1) e1) j) (= (t2tb3916 (tb2t3916 j)) j)) :pattern (
  (t2tb3916 (tb2t3916 j))) )))

(declare-fun t2tb3917 ((set (tuple21 (tuple21 b d) f))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b d) f)))) (sort
  (set1 (tuple2 (tuple2 b1 d1) f1)) (t2tb3917 x))))

(declare-fun tb2t3917 (uni) (set (tuple21 (tuple21 b d) f)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b d) f))))
  (! (= (tb2t3917 (t2tb3917 i)) i) :pattern ((t2tb3917 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 d1) f1)) j)
     (= (t2tb3917 (tb2t3917 j)) j)) :pattern ((t2tb3917 (tb2t3917 j))) )))

;; mem_direct_product
  (assert
  (forall ((f2 (set (tuple21 (tuple21 b d) e))) (g (set (tuple21 (tuple21 b
  d) f))) (x (tuple21 b d)) (y e) (z f))
  (= (mem43
  (tb2t2950
  (Tuple2 (tuple2 b1 d1) (tuple2 e1 f1) (t2tb692 x)
  (Tuple2 e1 f1 (t2tb2955 y) (t2tb2954 z))))
  (tb2t2944 (direct_product f1 e1 (tuple2 b1 d1) (t2tb3915 f2) (t2tb3917 g))))
  (and (mem (tuple2 (tuple2 b1 d1) e1)
  (Tuple2 (tuple2 b1 d1) e1 (t2tb692 x) (t2tb2955 y)) (t2tb3915 f2)) (mem
  (tuple2 (tuple2 b1 d1) f1)
  (Tuple2 (tuple2 b1 d1) f1 (t2tb692 x) (t2tb2954 z)) (t2tb3917 g))))))

;; mem_direct_product
  (assert
  (forall ((b2 ty))
  (forall ((f2 uni) (g (set (tuple21 d f))) (x d) (y uni) (z f))
  (= (mem (tuple2 d1 (tuple2 b2 f1))
  (Tuple2 d1 (tuple2 b2 f1) (t2tb694 x) (Tuple2 b2 f1 y (t2tb2954 z)))
  (direct_product f1 b2 d1 f2 (t2tb2938 g)))
  (and (mem (tuple2 d1 b2) (Tuple2 d1 b2 (t2tb694 x) y) f2) (mem40
  (tb2t2952 (Tuple2 d1 f1 (t2tb694 x) (t2tb2954 z))) g))))))

(declare-fun t2tb3918 ((set (tuple21 d (tuple21 f f)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 d (tuple21 f f))))) (sort
  (set1 (tuple2 d1 (tuple2 f1 f1))) (t2tb3918 x))))

(declare-fun tb2t3918 (uni) (set (tuple21 d (tuple21 f f))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 d (tuple21 f f)))))
  (! (= (tb2t3918 (t2tb3918 i)) i) :pattern ((t2tb3918 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 d1 (tuple2 f1 f1))) j)
     (= (t2tb3918 (tb2t3918 j)) j)) :pattern ((t2tb3918 (tb2t3918 j))) )))

(declare-fun t2tb3919 ((tuple21 d (tuple21 f f))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 d (tuple21 f f)))) (sort (tuple2 d1 (tuple2 f1 f1))
  (t2tb3919 x))))

(declare-fun tb2t3919 (uni) (tuple21 d (tuple21 f f)))

;; BridgeL
  (assert
  (forall ((i (tuple21 d (tuple21 f f))))
  (! (= (tb2t3919 (t2tb3919 i)) i) :pattern ((t2tb3919 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 d1 (tuple2 f1 f1)) j) (= (t2tb3919 (tb2t3919 j)) j)) :pattern (
  (t2tb3919 (tb2t3919 j))) )))

;; mem_direct_product
  (assert
  (forall ((f2 (set (tuple21 d f))) (g (set (tuple21 d f))) (x d) (y f)
  (z f))
  (= (mem (tuple2 d1 (tuple2 f1 f1))
  (Tuple2 d1 (tuple2 f1 f1) (t2tb694 x)
  (Tuple2 f1 f1 (t2tb2954 y) (t2tb2954 z)))
  (direct_product f1 f1 d1 (t2tb2938 f2) (t2tb2938 g)))
  (and (mem40 (tb2t2952 (Tuple2 d1 f1 (t2tb694 x) (t2tb2954 y))) f2) (mem40
  (tb2t2952 (Tuple2 d1 f1 (t2tb694 x) (t2tb2954 z))) g)))))

;; mem_direct_product
  (assert
  (forall ((c2 ty))
  (forall ((f2 (set (tuple21 d f))) (g uni) (x d) (y f) (z uni))
  (= (mem (tuple2 d1 (tuple2 f1 c2))
  (Tuple2 d1 (tuple2 f1 c2) (t2tb694 x) (Tuple2 f1 c2 (t2tb2954 y) z))
  (direct_product c2 f1 d1 (t2tb2938 f2) g))
  (and (mem40 (tb2t2952 (Tuple2 d1 f1 (t2tb694 x) (t2tb2954 y))) f2) (mem
  (tuple2 d1 c2) (Tuple2 d1 c2 (t2tb694 x) z) g))))))

;; mem_direct_product
  (assert
  (forall ((b2 ty))
  (forall ((f2 uni) (g (set (tuple21 (tuple21 a c) (tuple21 e f))))
  (x (tuple21 a c)) (y uni) (z (tuple21 e f)))
  (= (mem (tuple2 (tuple2 a1 c1) (tuple2 b2 (tuple2 e1 f1)))
  (Tuple2 (tuple2 a1 c1) (tuple2 b2 (tuple2 e1 f1)) (t2tb133 x)
  (Tuple2 b2 (tuple2 e1 f1) y (t2tb3315 z)))
  (direct_product (tuple2 e1 f1) b2 (tuple2 a1 c1) f2 (t2tb2945 g)))
  (and (mem (tuple2 (tuple2 a1 c1) b2)
  (Tuple2 (tuple2 a1 c1) b2 (t2tb133 x) y) f2) (mem42
  (tb2t2951 (Tuple2 (tuple2 a1 c1) (tuple2 e1 f1) (t2tb133 x) (t2tb3315 z)))
  g))))))

;; mem_direct_product
  (assert
  (forall ((b2 ty))
  (forall ((f2 uni) (g (set (tuple21 (tuple21 a c) (tuple21 b d))))
  (x (tuple21 a c)) (y uni) (z (tuple21 b d)))
  (= (mem (tuple2 (tuple2 a1 c1) (tuple2 b2 (tuple2 b1 d1)))
  (Tuple2 (tuple2 a1 c1) (tuple2 b2 (tuple2 b1 d1)) (t2tb133 x)
  (Tuple2 b2 (tuple2 b1 d1) y (t2tb692 z)))
  (direct_product (tuple2 b1 d1) b2 (tuple2 a1 c1) f2 (t2tb686 g)))
  (and (mem (tuple2 (tuple2 a1 c1) b2)
  (Tuple2 (tuple2 a1 c1) b2 (t2tb133 x) y) f2) (mem24
  (tb2t691 (Tuple2 (tuple2 a1 c1) (tuple2 b1 d1) (t2tb133 x) (t2tb692 z)))
  g))))))

(declare-fun t2tb3920 ((set (tuple21 (tuple21 a c) (tuple21 (tuple21 e f)
  (tuple21 e f))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a c) (tuple21 (tuple21 e f) (tuple21 e
  f)))))) (sort
  (set1 (tuple2 (tuple2 a1 c1) (tuple2 (tuple2 e1 f1) (tuple2 e1 f1))))
  (t2tb3920 x))))

(declare-fun tb2t3920 (uni) (set (tuple21 (tuple21 a c) (tuple21 (tuple21 e
  f) (tuple21 e f)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a c) (tuple21 (tuple21 e f) (tuple21 e
  f)))))) (! (= (tb2t3920 (t2tb3920 i)) i) :pattern ((t2tb3920 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 a1 c1) (tuple2 (tuple2 e1 f1) (tuple2 e1 f1)))) j)
     (= (t2tb3920 (tb2t3920 j)) j)) :pattern ((t2tb3920 (tb2t3920 j))) )))

(declare-fun t2tb3921 ((tuple21 (tuple21 a c) (tuple21 (tuple21 e f)
  (tuple21 e f)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a c) (tuple21 (tuple21 e f) (tuple21 e f)))))
  (sort (tuple2 (tuple2 a1 c1) (tuple2 (tuple2 e1 f1) (tuple2 e1 f1)))
  (t2tb3921 x))))

(declare-fun tb2t3921 (uni) (tuple21 (tuple21 a c) (tuple21 (tuple21 e f)
  (tuple21 e f))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a c) (tuple21 (tuple21 e f) (tuple21 e f)))))
  (! (= (tb2t3921 (t2tb3921 i)) i) :pattern ((t2tb3921 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 c1) (tuple2 (tuple2 e1 f1) (tuple2 e1 f1)))
     j) (= (t2tb3921 (tb2t3921 j)) j)) :pattern ((t2tb3921 (tb2t3921 j))) )))

;; mem_direct_product
  (assert
  (forall ((f2 (set (tuple21 (tuple21 a c) (tuple21 e f))))
  (g (set (tuple21 (tuple21 a c) (tuple21 e f)))) (x (tuple21 a c))
  (y (tuple21 e f)) (z (tuple21 e f)))
  (= (mem (tuple2 (tuple2 a1 c1) (tuple2 (tuple2 e1 f1) (tuple2 e1 f1)))
  (Tuple2 (tuple2 a1 c1) (tuple2 (tuple2 e1 f1) (tuple2 e1 f1)) (t2tb133 x)
  (Tuple2 (tuple2 e1 f1) (tuple2 e1 f1) (t2tb3315 y) (t2tb3315 z)))
  (direct_product (tuple2 e1 f1) (tuple2 e1 f1) (tuple2 a1 c1) (t2tb2945 f2)
  (t2tb2945 g)))
  (and (mem42
  (tb2t2951 (Tuple2 (tuple2 a1 c1) (tuple2 e1 f1) (t2tb133 x) (t2tb3315 y)))
  f2) (mem42
  (tb2t2951 (Tuple2 (tuple2 a1 c1) (tuple2 e1 f1) (t2tb133 x) (t2tb3315 z)))
  g)))))

(declare-fun t2tb3922 ((tuple21 (tuple21 a c) (tuple21 (tuple21 e f)
  (tuple21 b d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a c) (tuple21 (tuple21 e f) (tuple21 b d)))))
  (sort (tuple2 (tuple2 a1 c1) (tuple2 (tuple2 e1 f1) (tuple2 b1 d1)))
  (t2tb3922 x))))

(declare-fun tb2t3922 (uni) (tuple21 (tuple21 a c) (tuple21 (tuple21 e f)
  (tuple21 b d))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a c) (tuple21 (tuple21 e f) (tuple21 b d)))))
  (! (= (tb2t3922 (t2tb3922 i)) i) :pattern ((t2tb3922 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 c1) (tuple2 (tuple2 e1 f1) (tuple2 b1 d1)))
     j) (= (t2tb3922 (tb2t3922 j)) j)) :pattern ((t2tb3922 (tb2t3922 j))) )))

(declare-fun t2tb3923 ((set (tuple21 (tuple21 a c) (tuple21 (tuple21 e f)
  (tuple21 b d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a c) (tuple21 (tuple21 e f) (tuple21 b
  d)))))) (sort
  (set1 (tuple2 (tuple2 a1 c1) (tuple2 (tuple2 e1 f1) (tuple2 b1 d1))))
  (t2tb3923 x))))

(declare-fun tb2t3923 (uni) (set (tuple21 (tuple21 a c) (tuple21 (tuple21 e
  f) (tuple21 b d)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a c) (tuple21 (tuple21 e f) (tuple21 b
  d)))))) (! (= (tb2t3923 (t2tb3923 i)) i) :pattern ((t2tb3923 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 a1 c1) (tuple2 (tuple2 e1 f1) (tuple2 b1 d1)))) j)
     (= (t2tb3923 (tb2t3923 j)) j)) :pattern ((t2tb3923 (tb2t3923 j))) )))

;; mem_direct_product
  (assert
  (forall ((f2 (set (tuple21 (tuple21 a c) (tuple21 e f))))
  (g (set (tuple21 (tuple21 a c) (tuple21 b d)))) (x (tuple21 a c))
  (y (tuple21 e f)) (z (tuple21 b d)))
  (= (mem (tuple2 (tuple2 a1 c1) (tuple2 (tuple2 e1 f1) (tuple2 b1 d1)))
  (Tuple2 (tuple2 a1 c1) (tuple2 (tuple2 e1 f1) (tuple2 b1 d1)) (t2tb133 x)
  (Tuple2 (tuple2 e1 f1) (tuple2 b1 d1) (t2tb3315 y) (t2tb692 z)))
  (direct_product (tuple2 b1 d1) (tuple2 e1 f1) (tuple2 a1 c1) (t2tb2945 f2)
  (t2tb686 g)))
  (and (mem42
  (tb2t2951 (Tuple2 (tuple2 a1 c1) (tuple2 e1 f1) (t2tb133 x) (t2tb3315 y)))
  f2) (mem24
  (tb2t691 (Tuple2 (tuple2 a1 c1) (tuple2 b1 d1) (t2tb133 x) (t2tb692 z)))
  g)))))

;; mem_direct_product
  (assert
  (forall ((c2 ty))
  (forall ((f2 (set (tuple21 (tuple21 a c) (tuple21 e f)))) (g uni)
  (x (tuple21 a c)) (y (tuple21 e f)) (z uni))
  (= (mem (tuple2 (tuple2 a1 c1) (tuple2 (tuple2 e1 f1) c2))
  (Tuple2 (tuple2 a1 c1) (tuple2 (tuple2 e1 f1) c2) (t2tb133 x)
  (Tuple2 (tuple2 e1 f1) c2 (t2tb3315 y) z))
  (direct_product c2 (tuple2 e1 f1) (tuple2 a1 c1) (t2tb2945 f2) g))
  (and (mem42
  (tb2t2951 (Tuple2 (tuple2 a1 c1) (tuple2 e1 f1) (t2tb133 x) (t2tb3315 y)))
  f2) (mem (tuple2 (tuple2 a1 c1) c2)
  (Tuple2 (tuple2 a1 c1) c2 (t2tb133 x) z) g))))))

(declare-fun t2tb3924 ((set (tuple21 (tuple21 a c) f))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a c) f)))) (sort
  (set1 (tuple2 (tuple2 a1 c1) f1)) (t2tb3924 x))))

(declare-fun tb2t3924 (uni) (set (tuple21 (tuple21 a c) f)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a c) f))))
  (! (= (tb2t3924 (t2tb3924 i)) i) :pattern ((t2tb3924 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 c1) f1)) j)
     (= (t2tb3924 (tb2t3924 j)) j)) :pattern ((t2tb3924 (tb2t3924 j))) )))

(declare-fun t2tb3925 ((set (tuple21 (tuple21 a c) e))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a c) e)))) (sort
  (set1 (tuple2 (tuple2 a1 c1) e1)) (t2tb3925 x))))

(declare-fun tb2t3925 (uni) (set (tuple21 (tuple21 a c) e)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a c) e))))
  (! (= (tb2t3925 (t2tb3925 i)) i) :pattern ((t2tb3925 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 c1) e1)) j)
     (= (t2tb3925 (tb2t3925 j)) j)) :pattern ((t2tb3925 (tb2t3925 j))) )))

(declare-fun t2tb3926 ((tuple21 (tuple21 a c) f)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a c) f))) (sort (tuple2 (tuple2 a1 c1) f1)
  (t2tb3926 x))))

(declare-fun tb2t3926 (uni) (tuple21 (tuple21 a c) f))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a c) f)))
  (! (= (tb2t3926 (t2tb3926 i)) i) :pattern ((t2tb3926 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 c1) f1) j) (= (t2tb3926 (tb2t3926 j)) j)) :pattern (
  (t2tb3926 (tb2t3926 j))) )))

(declare-fun t2tb3927 ((tuple21 (tuple21 a c) e)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a c) e))) (sort (tuple2 (tuple2 a1 c1) e1)
  (t2tb3927 x))))

(declare-fun tb2t3927 (uni) (tuple21 (tuple21 a c) e))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a c) e)))
  (! (= (tb2t3927 (t2tb3927 i)) i) :pattern ((t2tb3927 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 c1) e1) j) (= (t2tb3927 (tb2t3927 j)) j)) :pattern (
  (t2tb3927 (tb2t3927 j))) )))

;; mem_direct_product
  (assert
  (forall ((f2 (set (tuple21 (tuple21 a c) e))) (g (set (tuple21 (tuple21 a
  c) f))) (x (tuple21 a c)) (y e) (z f))
  (= (mem42
  (tb2t2951
  (Tuple2 (tuple2 a1 c1) (tuple2 e1 f1) (t2tb133 x)
  (Tuple2 e1 f1 (t2tb2955 y) (t2tb2954 z))))
  (tb2t2945 (direct_product f1 e1 (tuple2 a1 c1) (t2tb3925 f2) (t2tb3924 g))))
  (and (mem (tuple2 (tuple2 a1 c1) e1)
  (Tuple2 (tuple2 a1 c1) e1 (t2tb133 x) (t2tb2955 y)) (t2tb3925 f2)) (mem
  (tuple2 (tuple2 a1 c1) f1)
  (Tuple2 (tuple2 a1 c1) f1 (t2tb133 x) (t2tb2954 z)) (t2tb3924 g))))))

(declare-fun t2tb3928 ((set (tuple21 (tuple21 a c) (tuple21 (tuple21 b d)
  (tuple21 e f))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a c) (tuple21 (tuple21 b d) (tuple21 e
  f)))))) (sort
  (set1 (tuple2 (tuple2 a1 c1) (tuple2 (tuple2 b1 d1) (tuple2 e1 f1))))
  (t2tb3928 x))))

(declare-fun tb2t3928 (uni) (set (tuple21 (tuple21 a c) (tuple21 (tuple21 b
  d) (tuple21 e f)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a c) (tuple21 (tuple21 b d) (tuple21 e
  f)))))) (! (= (tb2t3928 (t2tb3928 i)) i) :pattern ((t2tb3928 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 a1 c1) (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)))) j)
     (= (t2tb3928 (tb2t3928 j)) j)) :pattern ((t2tb3928 (tb2t3928 j))) )))

(declare-fun t2tb3929 ((tuple21 (tuple21 a c) (tuple21 (tuple21 b d)
  (tuple21 e f)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a c) (tuple21 (tuple21 b d) (tuple21 e f)))))
  (sort (tuple2 (tuple2 a1 c1) (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)))
  (t2tb3929 x))))

(declare-fun tb2t3929 (uni) (tuple21 (tuple21 a c) (tuple21 (tuple21 b d)
  (tuple21 e f))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a c) (tuple21 (tuple21 b d) (tuple21 e f)))))
  (! (= (tb2t3929 (t2tb3929 i)) i) :pattern ((t2tb3929 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 c1) (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)))
     j) (= (t2tb3929 (tb2t3929 j)) j)) :pattern ((t2tb3929 (tb2t3929 j))) )))

;; mem_direct_product
  (assert
  (forall ((f2 (set (tuple21 (tuple21 a c) (tuple21 b d))))
  (g (set (tuple21 (tuple21 a c) (tuple21 e f)))) (x (tuple21 a c))
  (y (tuple21 b d)) (z (tuple21 e f)))
  (= (mem (tuple2 (tuple2 a1 c1) (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)))
  (Tuple2 (tuple2 a1 c1) (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (t2tb133 x)
  (Tuple2 (tuple2 b1 d1) (tuple2 e1 f1) (t2tb692 y) (t2tb3315 z)))
  (direct_product (tuple2 e1 f1) (tuple2 b1 d1) (tuple2 a1 c1) (t2tb686 f2)
  (t2tb2945 g)))
  (and (mem24
  (tb2t691 (Tuple2 (tuple2 a1 c1) (tuple2 b1 d1) (t2tb133 x) (t2tb692 y)))
  f2) (mem42
  (tb2t2951 (Tuple2 (tuple2 a1 c1) (tuple2 e1 f1) (t2tb133 x) (t2tb3315 z)))
  g)))))

(declare-fun t2tb3930 ((set (tuple21 (tuple21 a c) (tuple21 (tuple21 b d)
  (tuple21 b d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a c) (tuple21 (tuple21 b d) (tuple21 b
  d)))))) (sort
  (set1 (tuple2 (tuple2 a1 c1) (tuple2 (tuple2 b1 d1) (tuple2 b1 d1))))
  (t2tb3930 x))))

(declare-fun tb2t3930 (uni) (set (tuple21 (tuple21 a c) (tuple21 (tuple21 b
  d) (tuple21 b d)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a c) (tuple21 (tuple21 b d) (tuple21 b
  d)))))) (! (= (tb2t3930 (t2tb3930 i)) i) :pattern ((t2tb3930 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 a1 c1) (tuple2 (tuple2 b1 d1) (tuple2 b1 d1)))) j)
     (= (t2tb3930 (tb2t3930 j)) j)) :pattern ((t2tb3930 (tb2t3930 j))) )))

(declare-fun t2tb3931 ((tuple21 (tuple21 a c) (tuple21 (tuple21 b d)
  (tuple21 b d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a c) (tuple21 (tuple21 b d) (tuple21 b d)))))
  (sort (tuple2 (tuple2 a1 c1) (tuple2 (tuple2 b1 d1) (tuple2 b1 d1)))
  (t2tb3931 x))))

(declare-fun tb2t3931 (uni) (tuple21 (tuple21 a c) (tuple21 (tuple21 b d)
  (tuple21 b d))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a c) (tuple21 (tuple21 b d) (tuple21 b d)))))
  (! (= (tb2t3931 (t2tb3931 i)) i) :pattern ((t2tb3931 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 c1) (tuple2 (tuple2 b1 d1) (tuple2 b1 d1)))
     j) (= (t2tb3931 (tb2t3931 j)) j)) :pattern ((t2tb3931 (tb2t3931 j))) )))

;; mem_direct_product
  (assert
  (forall ((f2 (set (tuple21 (tuple21 a c) (tuple21 b d))))
  (g (set (tuple21 (tuple21 a c) (tuple21 b d)))) (x (tuple21 a c))
  (y (tuple21 b d)) (z (tuple21 b d)))
  (= (mem (tuple2 (tuple2 a1 c1) (tuple2 (tuple2 b1 d1) (tuple2 b1 d1)))
  (Tuple2 (tuple2 a1 c1) (tuple2 (tuple2 b1 d1) (tuple2 b1 d1)) (t2tb133 x)
  (Tuple2 (tuple2 b1 d1) (tuple2 b1 d1) (t2tb692 y) (t2tb692 z)))
  (direct_product (tuple2 b1 d1) (tuple2 b1 d1) (tuple2 a1 c1) (t2tb686 f2)
  (t2tb686 g)))
  (and (mem24
  (tb2t691 (Tuple2 (tuple2 a1 c1) (tuple2 b1 d1) (t2tb133 x) (t2tb692 y)))
  f2) (mem24
  (tb2t691 (Tuple2 (tuple2 a1 c1) (tuple2 b1 d1) (t2tb133 x) (t2tb692 z)))
  g)))))

;; mem_direct_product
  (assert
  (forall ((c2 ty))
  (forall ((f2 (set (tuple21 (tuple21 a c) (tuple21 b d)))) (g uni)
  (x (tuple21 a c)) (y (tuple21 b d)) (z uni))
  (= (mem (tuple2 (tuple2 a1 c1) (tuple2 (tuple2 b1 d1) c2))
  (Tuple2 (tuple2 a1 c1) (tuple2 (tuple2 b1 d1) c2) (t2tb133 x)
  (Tuple2 (tuple2 b1 d1) c2 (t2tb692 y) z))
  (direct_product c2 (tuple2 b1 d1) (tuple2 a1 c1) (t2tb686 f2) g))
  (and (mem24
  (tb2t691 (Tuple2 (tuple2 a1 c1) (tuple2 b1 d1) (t2tb133 x) (t2tb692 y)))
  f2) (mem (tuple2 (tuple2 a1 c1) c2)
  (Tuple2 (tuple2 a1 c1) c2 (t2tb133 x) z) g))))))

(declare-fun t2tb168 ((set (tuple21 (tuple21 a c) b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a c) b)))) (sort
  (set1 (tuple2 (tuple2 a1 c1) b1)) (t2tb168 x))))

(declare-fun tb2t168 (uni) (set (tuple21 (tuple21 a c) b)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a c) b))))
  (! (= (tb2t168 (t2tb168 i)) i) :pattern ((t2tb168 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 c1) b1)) j)
     (= (t2tb168 (tb2t168 j)) j)) :pattern ((t2tb168 (tb2t168 j))) )))

(declare-fun t2tb847 ((set (tuple21 (tuple21 a c) d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a c) d)))) (sort
  (set1 (tuple2 (tuple2 a1 c1) d1)) (t2tb847 x))))

(declare-fun tb2t847 (uni) (set (tuple21 (tuple21 a c) d)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a c) d))))
  (! (= (tb2t847 (t2tb847 i)) i) :pattern ((t2tb847 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 c1) d1)) j)
     (= (t2tb847 (tb2t847 j)) j)) :pattern ((t2tb847 (tb2t847 j))) )))

(declare-fun t2tb169 ((tuple21 (tuple21 a c) b)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a c) b))) (sort (tuple2 (tuple2 a1 c1) b1)
  (t2tb169 x))))

(declare-fun tb2t169 (uni) (tuple21 (tuple21 a c) b))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a c) b)))
  (! (= (tb2t169 (t2tb169 i)) i) :pattern ((t2tb169 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 c1) b1) j) (= (t2tb169 (tb2t169 j)) j)) :pattern (
  (t2tb169 (tb2t169 j))) )))

(declare-fun t2tb848 ((tuple21 (tuple21 a c) d)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a c) d))) (sort (tuple2 (tuple2 a1 c1) d1)
  (t2tb848 x))))

(declare-fun tb2t848 (uni) (tuple21 (tuple21 a c) d))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a c) d)))
  (! (= (tb2t848 (t2tb848 i)) i) :pattern ((t2tb848 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 c1) d1) j) (= (t2tb848 (tb2t848 j)) j)) :pattern (
  (t2tb848 (tb2t848 j))) )))

;; mem_direct_product
  (assert
  (forall ((f2 (set (tuple21 (tuple21 a c) b))) (g (set (tuple21 (tuple21 a
  c) d))) (x (tuple21 a c)) (y b) (z d))
  (= (mem24
  (tb2t691
  (Tuple2 (tuple2 a1 c1) (tuple2 b1 d1) (t2tb133 x)
  (Tuple2 b1 d1 (t2tb14 y) (t2tb694 z))))
  (tb2t686 (direct_product d1 b1 (tuple2 a1 c1) (t2tb168 f2) (t2tb847 g))))
  (and (mem (tuple2 (tuple2 a1 c1) b1)
  (Tuple2 (tuple2 a1 c1) b1 (t2tb133 x) (t2tb14 y)) (t2tb168 f2)) (mem
  (tuple2 (tuple2 a1 c1) d1)
  (Tuple2 (tuple2 a1 c1) d1 (t2tb133 x) (t2tb694 z)) (t2tb847 g))))))

;; mem_direct_product
  (assert
  (forall ((b2 ty))
  (forall ((f2 uni) (g (set (tuple21 c f))) (x c) (y uni) (z f))
  (= (mem (tuple2 c1 (tuple2 b2 f1))
  (Tuple2 c1 (tuple2 b2 f1) (t2tb135 x) (Tuple2 b2 f1 y (t2tb2954 z)))
  (direct_product f1 b2 c1 f2 (t2tb2942 g)))
  (and (mem (tuple2 c1 b2) (Tuple2 c1 b2 (t2tb135 x) y) f2) (mem45
  (tb2t2948 (Tuple2 c1 f1 (t2tb135 x) (t2tb2954 z))) g))))))

;; mem_direct_product
  (assert
  (forall ((b2 ty))
  (forall ((f2 uni) (g (set (tuple21 c d))) (x c) (y uni) (z d))
  (= (mem (tuple2 c1 (tuple2 b2 d1))
  (Tuple2 c1 (tuple2 b2 d1) (t2tb135 x) (Tuple2 b2 d1 y (t2tb694 z)))
  (direct_product d1 b2 c1 f2 (t2tb689 g)))
  (and (mem (tuple2 c1 b2) (Tuple2 c1 b2 (t2tb135 x) y) f2) (mem21
  (tb2t693 (Tuple2 c1 d1 (t2tb135 x) (t2tb694 z))) g))))))

(declare-fun t2tb3932 ((tuple21 c (tuple21 f f))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 c (tuple21 f f)))) (sort (tuple2 c1 (tuple2 f1 f1))
  (t2tb3932 x))))

(declare-fun tb2t3932 (uni) (tuple21 c (tuple21 f f)))

;; BridgeL
  (assert
  (forall ((i (tuple21 c (tuple21 f f))))
  (! (= (tb2t3932 (t2tb3932 i)) i) :pattern ((t2tb3932 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 c1 (tuple2 f1 f1)) j) (= (t2tb3932 (tb2t3932 j)) j)) :pattern (
  (t2tb3932 (tb2t3932 j))) )))

(declare-fun t2tb3933 ((set (tuple21 c (tuple21 f f)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 c (tuple21 f f))))) (sort
  (set1 (tuple2 c1 (tuple2 f1 f1))) (t2tb3933 x))))

(declare-fun tb2t3933 (uni) (set (tuple21 c (tuple21 f f))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 c (tuple21 f f)))))
  (! (= (tb2t3933 (t2tb3933 i)) i) :pattern ((t2tb3933 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 c1 (tuple2 f1 f1))) j)
     (= (t2tb3933 (tb2t3933 j)) j)) :pattern ((t2tb3933 (tb2t3933 j))) )))

;; mem_direct_product
  (assert
  (forall ((f2 (set (tuple21 c f))) (g (set (tuple21 c f))) (x c) (y f)
  (z f))
  (= (mem (tuple2 c1 (tuple2 f1 f1))
  (Tuple2 c1 (tuple2 f1 f1) (t2tb135 x)
  (Tuple2 f1 f1 (t2tb2954 y) (t2tb2954 z)))
  (direct_product f1 f1 c1 (t2tb2942 f2) (t2tb2942 g)))
  (and (mem45 (tb2t2948 (Tuple2 c1 f1 (t2tb135 x) (t2tb2954 y))) f2) (mem45
  (tb2t2948 (Tuple2 c1 f1 (t2tb135 x) (t2tb2954 z))) g)))))

(declare-fun t2tb3934 ((set (tuple21 c (tuple21 f d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 c (tuple21 f d))))) (sort
  (set1 (tuple2 c1 (tuple2 f1 d1))) (t2tb3934 x))))

(declare-fun tb2t3934 (uni) (set (tuple21 c (tuple21 f d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 c (tuple21 f d)))))
  (! (= (tb2t3934 (t2tb3934 i)) i) :pattern ((t2tb3934 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 c1 (tuple2 f1 d1))) j)
     (= (t2tb3934 (tb2t3934 j)) j)) :pattern ((t2tb3934 (tb2t3934 j))) )))

(declare-fun t2tb3935 ((tuple21 c (tuple21 f d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 c (tuple21 f d)))) (sort (tuple2 c1 (tuple2 f1 d1))
  (t2tb3935 x))))

(declare-fun tb2t3935 (uni) (tuple21 c (tuple21 f d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 c (tuple21 f d))))
  (! (= (tb2t3935 (t2tb3935 i)) i) :pattern ((t2tb3935 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 c1 (tuple2 f1 d1)) j) (= (t2tb3935 (tb2t3935 j)) j)) :pattern (
  (t2tb3935 (tb2t3935 j))) )))

;; mem_direct_product
  (assert
  (forall ((f2 (set (tuple21 c f))) (g (set (tuple21 c d))) (x c) (y f)
  (z d))
  (= (mem (tuple2 c1 (tuple2 f1 d1))
  (Tuple2 c1 (tuple2 f1 d1) (t2tb135 x)
  (Tuple2 f1 d1 (t2tb2954 y) (t2tb694 z)))
  (direct_product d1 f1 c1 (t2tb2942 f2) (t2tb689 g)))
  (and (mem45 (tb2t2948 (Tuple2 c1 f1 (t2tb135 x) (t2tb2954 y))) f2) (mem21
  (tb2t693 (Tuple2 c1 d1 (t2tb135 x) (t2tb694 z))) g)))))

;; mem_direct_product
  (assert
  (forall ((c2 ty))
  (forall ((f2 (set (tuple21 c f))) (g uni) (x c) (y f) (z uni))
  (= (mem (tuple2 c1 (tuple2 f1 c2))
  (Tuple2 c1 (tuple2 f1 c2) (t2tb135 x) (Tuple2 f1 c2 (t2tb2954 y) z))
  (direct_product c2 f1 c1 (t2tb2942 f2) g))
  (and (mem45 (tb2t2948 (Tuple2 c1 f1 (t2tb135 x) (t2tb2954 y))) f2) (mem
  (tuple2 c1 c2) (Tuple2 c1 c2 (t2tb135 x) z) g))))))

;; mem_direct_product
  (assert
  (forall ((f2 (set (tuple21 c d))) (g (set (tuple21 c f))) (x c) (y d)
  (z f))
  (= (mem (tuple2 c1 (tuple2 d1 f1))
  (Tuple2 c1 (tuple2 d1 f1) (t2tb135 x)
  (Tuple2 d1 f1 (t2tb694 y) (t2tb2954 z)))
  (direct_product f1 d1 c1 (t2tb689 f2) (t2tb2942 g)))
  (and (mem21 (tb2t693 (Tuple2 c1 d1 (t2tb135 x) (t2tb694 y))) f2) (mem45
  (tb2t2948 (Tuple2 c1 f1 (t2tb135 x) (t2tb2954 z))) g)))))

(declare-fun t2tb3936 ((set (tuple21 c (tuple21 d d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 c (tuple21 d d))))) (sort
  (set1 (tuple2 c1 (tuple2 d1 d1))) (t2tb3936 x))))

(declare-fun tb2t3936 (uni) (set (tuple21 c (tuple21 d d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 c (tuple21 d d)))))
  (! (= (tb2t3936 (t2tb3936 i)) i) :pattern ((t2tb3936 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 c1 (tuple2 d1 d1))) j)
     (= (t2tb3936 (tb2t3936 j)) j)) :pattern ((t2tb3936 (tb2t3936 j))) )))

(declare-fun t2tb3937 ((tuple21 c (tuple21 d d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 c (tuple21 d d)))) (sort (tuple2 c1 (tuple2 d1 d1))
  (t2tb3937 x))))

(declare-fun tb2t3937 (uni) (tuple21 c (tuple21 d d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 c (tuple21 d d))))
  (! (= (tb2t3937 (t2tb3937 i)) i) :pattern ((t2tb3937 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 c1 (tuple2 d1 d1)) j) (= (t2tb3937 (tb2t3937 j)) j)) :pattern (
  (t2tb3937 (tb2t3937 j))) )))

;; mem_direct_product
  (assert
  (forall ((f2 (set (tuple21 c d))) (g (set (tuple21 c d))) (x c) (y d)
  (z d))
  (= (mem (tuple2 c1 (tuple2 d1 d1))
  (Tuple2 c1 (tuple2 d1 d1) (t2tb135 x)
  (Tuple2 d1 d1 (t2tb694 y) (t2tb694 z)))
  (direct_product d1 d1 c1 (t2tb689 f2) (t2tb689 g)))
  (and (mem21 (tb2t693 (Tuple2 c1 d1 (t2tb135 x) (t2tb694 y))) f2) (mem21
  (tb2t693 (Tuple2 c1 d1 (t2tb135 x) (t2tb694 z))) g)))))

;; mem_direct_product
  (assert
  (forall ((c2 ty))
  (forall ((f2 (set (tuple21 c d))) (g uni) (x c) (y d) (z uni))
  (= (mem (tuple2 c1 (tuple2 d1 c2))
  (Tuple2 c1 (tuple2 d1 c2) (t2tb135 x) (Tuple2 d1 c2 (t2tb694 y) z))
  (direct_product c2 d1 c1 (t2tb689 f2) g))
  (and (mem21 (tb2t693 (Tuple2 c1 d1 (t2tb135 x) (t2tb694 y))) f2) (mem
  (tuple2 c1 c2) (Tuple2 c1 c2 (t2tb135 x) z) g))))))

;; mem_direct_product
  (assert
  (forall ((b2 ty))
  (forall ((f2 uni) (g (set (tuple21 b e))) (x b) (y uni) (z e))
  (= (mem (tuple2 b1 (tuple2 b2 e1))
  (Tuple2 b1 (tuple2 b2 e1) (t2tb14 x) (Tuple2 b2 e1 y (t2tb2955 z)))
  (direct_product e1 b2 b1 f2 (t2tb2940 g)))
  (and (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) y) f2) (mem38
  (tb2t2953 (Tuple2 b1 e1 (t2tb14 x) (t2tb2955 z))) g))))))

(declare-fun t2tb3938 ((set (tuple21 b (tuple21 e e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 b (tuple21 e e))))) (sort
  (set1 (tuple2 b1 (tuple2 e1 e1))) (t2tb3938 x))))

(declare-fun tb2t3938 (uni) (set (tuple21 b (tuple21 e e))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 b (tuple21 e e)))))
  (! (= (tb2t3938 (t2tb3938 i)) i) :pattern ((t2tb3938 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 b1 (tuple2 e1 e1))) j)
     (= (t2tb3938 (tb2t3938 j)) j)) :pattern ((t2tb3938 (tb2t3938 j))) )))

(declare-fun t2tb3939 ((tuple21 b (tuple21 e e))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 b (tuple21 e e)))) (sort (tuple2 b1 (tuple2 e1 e1))
  (t2tb3939 x))))

(declare-fun tb2t3939 (uni) (tuple21 b (tuple21 e e)))

;; BridgeL
  (assert
  (forall ((i (tuple21 b (tuple21 e e))))
  (! (= (tb2t3939 (t2tb3939 i)) i) :pattern ((t2tb3939 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 b1 (tuple2 e1 e1)) j) (= (t2tb3939 (tb2t3939 j)) j)) :pattern (
  (t2tb3939 (tb2t3939 j))) )))

;; mem_direct_product
  (assert
  (forall ((f2 (set (tuple21 b e))) (g (set (tuple21 b e))) (x b) (y e)
  (z e))
  (= (mem (tuple2 b1 (tuple2 e1 e1))
  (Tuple2 b1 (tuple2 e1 e1) (t2tb14 x)
  (Tuple2 e1 e1 (t2tb2955 y) (t2tb2955 z)))
  (direct_product e1 e1 b1 (t2tb2940 f2) (t2tb2940 g)))
  (and (mem38 (tb2t2953 (Tuple2 b1 e1 (t2tb14 x) (t2tb2955 y))) f2) (mem38
  (tb2t2953 (Tuple2 b1 e1 (t2tb14 x) (t2tb2955 z))) g)))))

;; mem_direct_product
  (assert
  (forall ((c2 ty))
  (forall ((f2 (set (tuple21 b e))) (g uni) (x b) (y e) (z uni))
  (= (mem (tuple2 b1 (tuple2 e1 c2))
  (Tuple2 b1 (tuple2 e1 c2) (t2tb14 x) (Tuple2 e1 c2 (t2tb2955 y) z))
  (direct_product c2 e1 b1 (t2tb2940 f2) g))
  (and (mem38 (tb2t2953 (Tuple2 b1 e1 (t2tb14 x) (t2tb2955 y))) f2) (mem
  (tuple2 b1 c2) (Tuple2 b1 c2 (t2tb14 x) z) g))))))

;; mem_direct_product
  (assert
  (forall ((b2 ty))
  (forall ((f2 uni) (g (set (tuple21 a e))) (x a) (y uni) (z e))
  (= (mem (tuple2 a1 (tuple2 b2 e1))
  (Tuple2 a1 (tuple2 b2 e1) (t2tb2 x) (Tuple2 b2 e1 y (t2tb2955 z)))
  (direct_product e1 b2 a1 f2 (t2tb2943 g)))
  (and (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) y) f2) (mem44
  (tb2t2949 (Tuple2 a1 e1 (t2tb2 x) (t2tb2955 z))) g))))))

;; mem_direct_product
  (assert
  (forall ((b2 ty))
  (forall ((f2 uni) (g (set (tuple21 a b))) (x a) (y uni) (z b))
  (= (mem (tuple2 a1 (tuple2 b2 b1))
  (Tuple2 a1 (tuple2 b2 b1) (t2tb2 x) (Tuple2 b2 b1 y (t2tb14 z)))
  (direct_product b1 b2 a1 f2 (t2tb11 g)))
  (and (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) y) f2) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 z))) g))))))

(declare-fun t2tb3940 ((set (tuple21 a (tuple21 e e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (tuple21 e e))))) (sort
  (set1 (tuple2 a1 (tuple2 e1 e1))) (t2tb3940 x))))

(declare-fun tb2t3940 (uni) (set (tuple21 a (tuple21 e e))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (tuple21 e e)))))
  (! (= (tb2t3940 (t2tb3940 i)) i) :pattern ((t2tb3940 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (tuple2 e1 e1))) j)
     (= (t2tb3940 (tb2t3940 j)) j)) :pattern ((t2tb3940 (tb2t3940 j))) )))

(declare-fun t2tb3941 ((tuple21 a (tuple21 e e))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (tuple21 e e)))) (sort (tuple2 a1 (tuple2 e1 e1))
  (t2tb3941 x))))

(declare-fun tb2t3941 (uni) (tuple21 a (tuple21 e e)))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (tuple21 e e))))
  (! (= (tb2t3941 (t2tb3941 i)) i) :pattern ((t2tb3941 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (tuple2 e1 e1)) j) (= (t2tb3941 (tb2t3941 j)) j)) :pattern (
  (t2tb3941 (tb2t3941 j))) )))

;; mem_direct_product
  (assert
  (forall ((f2 (set (tuple21 a e))) (g (set (tuple21 a e))) (x a) (y e)
  (z e))
  (= (mem (tuple2 a1 (tuple2 e1 e1))
  (Tuple2 a1 (tuple2 e1 e1) (t2tb2 x)
  (Tuple2 e1 e1 (t2tb2955 y) (t2tb2955 z)))
  (direct_product e1 e1 a1 (t2tb2943 f2) (t2tb2943 g)))
  (and (mem44 (tb2t2949 (Tuple2 a1 e1 (t2tb2 x) (t2tb2955 y))) f2) (mem44
  (tb2t2949 (Tuple2 a1 e1 (t2tb2 x) (t2tb2955 z))) g)))))

(declare-fun t2tb3942 ((set (tuple21 a (tuple21 e b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (tuple21 e b))))) (sort
  (set1 (tuple2 a1 (tuple2 e1 b1))) (t2tb3942 x))))

(declare-fun tb2t3942 (uni) (set (tuple21 a (tuple21 e b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (tuple21 e b)))))
  (! (= (tb2t3942 (t2tb3942 i)) i) :pattern ((t2tb3942 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (tuple2 e1 b1))) j)
     (= (t2tb3942 (tb2t3942 j)) j)) :pattern ((t2tb3942 (tb2t3942 j))) )))

(declare-fun t2tb3943 ((tuple21 a (tuple21 e b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (tuple21 e b)))) (sort (tuple2 a1 (tuple2 e1 b1))
  (t2tb3943 x))))

(declare-fun tb2t3943 (uni) (tuple21 a (tuple21 e b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (tuple21 e b))))
  (! (= (tb2t3943 (t2tb3943 i)) i) :pattern ((t2tb3943 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (tuple2 e1 b1)) j) (= (t2tb3943 (tb2t3943 j)) j)) :pattern (
  (t2tb3943 (tb2t3943 j))) )))

;; mem_direct_product
  (assert
  (forall ((f2 (set (tuple21 a e))) (g (set (tuple21 a b))) (x a) (y e)
  (z b))
  (= (mem (tuple2 a1 (tuple2 e1 b1))
  (Tuple2 a1 (tuple2 e1 b1) (t2tb2 x) (Tuple2 e1 b1 (t2tb2955 y) (t2tb14 z)))
  (direct_product b1 e1 a1 (t2tb2943 f2) (t2tb11 g)))
  (and (mem44 (tb2t2949 (Tuple2 a1 e1 (t2tb2 x) (t2tb2955 y))) f2) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 z))) g)))))

;; mem_direct_product
  (assert
  (forall ((c2 ty))
  (forall ((f2 (set (tuple21 a e))) (g uni) (x a) (y e) (z uni))
  (= (mem (tuple2 a1 (tuple2 e1 c2))
  (Tuple2 a1 (tuple2 e1 c2) (t2tb2 x) (Tuple2 e1 c2 (t2tb2955 y) z))
  (direct_product c2 e1 a1 (t2tb2943 f2) g))
  (and (mem44 (tb2t2949 (Tuple2 a1 e1 (t2tb2 x) (t2tb2955 y))) f2) (mem
  (tuple2 a1 c2) (Tuple2 a1 c2 (t2tb2 x) z) g))))))

;; mem_direct_product
  (assert
  (forall ((f2 (set (tuple21 a b))) (g (set (tuple21 a e))) (x a) (y b)
  (z e))
  (= (mem (tuple2 a1 (tuple2 b1 e1))
  (Tuple2 a1 (tuple2 b1 e1) (t2tb2 x) (Tuple2 b1 e1 (t2tb14 y) (t2tb2955 z)))
  (direct_product e1 b1 a1 (t2tb11 f2) (t2tb2943 g)))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y))) f2) (mem44
  (tb2t2949 (Tuple2 a1 e1 (t2tb2 x) (t2tb2955 z))) g)))))

(declare-fun t2tb59 ((set (tuple21 a (tuple21 b b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (tuple21 b b))))) (sort
  (set1 (tuple2 a1 (tuple2 b1 b1))) (t2tb59 x))))

(declare-fun tb2t59 (uni) (set (tuple21 a (tuple21 b b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (tuple21 b b)))))
  (! (= (tb2t59 (t2tb59 i)) i) :pattern ((t2tb59 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (tuple2 b1 b1))) j)
     (= (t2tb59 (tb2t59 j)) j)) :pattern ((t2tb59 (tb2t59 j))) )))

(declare-fun t2tb60 ((tuple21 a (tuple21 b b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (tuple21 b b)))) (sort (tuple2 a1 (tuple2 b1 b1))
  (t2tb60 x))))

(declare-fun tb2t60 (uni) (tuple21 a (tuple21 b b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (tuple21 b b))))
  (! (= (tb2t60 (t2tb60 i)) i) :pattern ((t2tb60 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (tuple2 b1 b1)) j) (= (t2tb60 (tb2t60 j)) j)) :pattern (
  (t2tb60 (tb2t60 j))) )))

;; mem_direct_product
  (assert
  (forall ((f2 (set (tuple21 a b))) (g (set (tuple21 a b))) (x a) (y b)
  (z b))
  (= (mem (tuple2 a1 (tuple2 b1 b1))
  (Tuple2 a1 (tuple2 b1 b1) (t2tb2 x) (Tuple2 b1 b1 (t2tb14 y) (t2tb14 z)))
  (direct_product b1 b1 a1 (t2tb11 f2) (t2tb11 g)))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y))) f2) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 z))) g)))))

;; mem_direct_product
  (assert
  (forall ((c2 ty))
  (forall ((f2 (set (tuple21 a b))) (g uni) (x a) (y b) (z uni))
  (= (mem (tuple2 a1 (tuple2 b1 c2))
  (Tuple2 a1 (tuple2 b1 c2) (t2tb2 x) (Tuple2 b1 c2 (t2tb14 y) z))
  (direct_product c2 b1 a1 (t2tb11 f2) g))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y))) f2) (mem
  (tuple2 a1 c2) (Tuple2 a1 c2 (t2tb2 x) z) g))))))

;; mem_direct_product
  (assert
  (forall ((a2 ty) (b2 ty) (c2 ty))
  (forall ((f2 uni) (g uni) (x uni) (y uni) (z uni))
  (= (mem (tuple2 a2 (tuple2 b2 c2))
  (Tuple2 a2 (tuple2 b2 c2) x (Tuple2 b2 c2 y z))
  (direct_product c2 b2 a2 f2 g))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) f2) (mem (tuple2 a2 c2)
  (Tuple2 a2 c2 x z) g))))))

(declare-fun prj1 (ty ty uni) uni)

;; prj1_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni)) (sort (set1 (tuple2 (tuple2 a2 b2) a2)) (prj1 b2 a2 x)))))

;; mem_proj_op_1
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (x uni) (y uni) (z uni))
  (=> (sort a2 x)
  (=> (sort a2 z)
  (= (mem (tuple2 (tuple2 a2 b2) a2)
  (Tuple2 (tuple2 a2 b2) a2 (Tuple2 a2 b2 x y) z)
  (prj1 b2 a2 (Tuple2 (set1 a2) (set1 b2) s t)))
  (and (mem (tuple2 (tuple2 a2 b2) a2)
  (Tuple2 (tuple2 a2 b2) a2 (Tuple2 a2 b2 x y) z)
  (times a2 (tuple2 a2 b2) (times b2 a2 s t) s)) (= z x))))))))

(declare-fun prj2 (ty ty uni) uni)

;; prj2_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni)) (sort (set1 (tuple2 (tuple2 a2 b2) b2)) (prj2 b2 a2 x)))))

;; mem_proj_op_2
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (x uni) (y uni) (z uni))
  (=> (sort b2 y)
  (=> (sort b2 z)
  (= (mem (tuple2 (tuple2 a2 b2) b2)
  (Tuple2 (tuple2 a2 b2) b2 (Tuple2 a2 b2 x y) z)
  (prj2 b2 a2 (Tuple2 (set1 a2) (set1 b2) s t)))
  (and (mem (tuple2 (tuple2 a2 b2) b2)
  (Tuple2 (tuple2 a2 b2) b2 (Tuple2 a2 b2 x y) z)
  (times b2 (tuple2 a2 b2) (times b2 a2 s t) t)) (= z y))))))))

(declare-fun parallel_product (ty ty ty ty uni uni) uni)

;; parallel_product_sort
  (assert
  (forall ((a2 ty) (b2 ty) (c2 ty) (d2 ty))
  (forall ((x uni) (x1 uni)) (sort
  (set1 (tuple2 (tuple2 a2 c2) (tuple2 b2 d2)))
  (parallel_product d2 c2 b2 a2 x x1)))))

(declare-fun parallel_product1 ((set (tuple21 a b)) (set (tuple21 c
  d))) (set (tuple21 (tuple21 a c) (tuple21 b d))))

(declare-fun parallel_product3 ((set (tuple21 a e)) (set (tuple21 c
  f))) (set (tuple21 (tuple21 a c) (tuple21 e f))))

(declare-fun parallel_product4 ((set (tuple21 b e)) (set (tuple21 d
  f))) (set (tuple21 (tuple21 b d) (tuple21 e f))))

;; mem_parallel_product
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((h uni) (k (set (tuple21 (tuple21 b d) (tuple21 e f)))) (x uni)
  (y (tuple21 b d)) (z uni) (w (tuple21 e f)))
  (= (mem (tuple2 (tuple2 a2 (tuple2 b1 d1)) (tuple2 b2 (tuple2 e1 f1)))
  (Tuple2 (tuple2 a2 (tuple2 b1 d1)) (tuple2 b2 (tuple2 e1 f1))
  (Tuple2 a2 (tuple2 b1 d1) x (t2tb692 y))
  (Tuple2 b2 (tuple2 e1 f1) z (t2tb3315 w)))
  (parallel_product (tuple2 e1 f1) (tuple2 b1 d1) b2 a2 h (t2tb2944 k)))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x z) h) (mem43
  (tb2t2950 (Tuple2 (tuple2 b1 d1) (tuple2 e1 f1) (t2tb692 y) (t2tb3315 w)))
  k))))))

;; mem_parallel_product
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((h uni) (k (set (tuple21 d f))) (x uni) (y d) (z uni) (w f))
  (= (mem (tuple2 (tuple2 a2 d1) (tuple2 b2 f1))
  (Tuple2 (tuple2 a2 d1) (tuple2 b2 f1) (Tuple2 a2 d1 x (t2tb694 y))
  (Tuple2 b2 f1 z (t2tb2954 w)))
  (parallel_product f1 d1 b2 a2 h (t2tb2938 k)))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x z) h) (mem40
  (tb2t2952 (Tuple2 d1 f1 (t2tb694 y) (t2tb2954 w))) k))))))

;; mem_parallel_product
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((h uni) (k (set (tuple21 (tuple21 a c) (tuple21 e f)))) (x uni)
  (y (tuple21 a c)) (z uni) (w (tuple21 e f)))
  (= (mem (tuple2 (tuple2 a2 (tuple2 a1 c1)) (tuple2 b2 (tuple2 e1 f1)))
  (Tuple2 (tuple2 a2 (tuple2 a1 c1)) (tuple2 b2 (tuple2 e1 f1))
  (Tuple2 a2 (tuple2 a1 c1) x (t2tb133 y))
  (Tuple2 b2 (tuple2 e1 f1) z (t2tb3315 w)))
  (parallel_product (tuple2 e1 f1) (tuple2 a1 c1) b2 a2 h (t2tb2945 k)))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x z) h) (mem42
  (tb2t2951 (Tuple2 (tuple2 a1 c1) (tuple2 e1 f1) (t2tb133 y) (t2tb3315 w)))
  k))))))

;; mem_parallel_product
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((h uni) (k (set (tuple21 (tuple21 a c) (tuple21 b d)))) (x uni)
  (y (tuple21 a c)) (z uni) (w (tuple21 b d)))
  (= (mem (tuple2 (tuple2 a2 (tuple2 a1 c1)) (tuple2 b2 (tuple2 b1 d1)))
  (Tuple2 (tuple2 a2 (tuple2 a1 c1)) (tuple2 b2 (tuple2 b1 d1))
  (Tuple2 a2 (tuple2 a1 c1) x (t2tb133 y))
  (Tuple2 b2 (tuple2 b1 d1) z (t2tb692 w)))
  (parallel_product (tuple2 b1 d1) (tuple2 a1 c1) b2 a2 h (t2tb686 k)))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x z) h) (mem24
  (tb2t691 (Tuple2 (tuple2 a1 c1) (tuple2 b1 d1) (t2tb133 y) (t2tb692 w)))
  k))))))

;; mem_parallel_product
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((h uni) (k (set (tuple21 c f))) (x uni) (y c) (z uni) (w f))
  (= (mem (tuple2 (tuple2 a2 c1) (tuple2 b2 f1))
  (Tuple2 (tuple2 a2 c1) (tuple2 b2 f1) (Tuple2 a2 c1 x (t2tb135 y))
  (Tuple2 b2 f1 z (t2tb2954 w)))
  (parallel_product f1 c1 b2 a2 h (t2tb2942 k)))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x z) h) (mem45
  (tb2t2948 (Tuple2 c1 f1 (t2tb135 y) (t2tb2954 w))) k))))))

;; mem_parallel_product
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((h uni) (k (set (tuple21 c d))) (x uni) (y c) (z uni) (w d))
  (= (mem (tuple2 (tuple2 a2 c1) (tuple2 b2 d1))
  (Tuple2 (tuple2 a2 c1) (tuple2 b2 d1) (Tuple2 a2 c1 x (t2tb135 y))
  (Tuple2 b2 d1 z (t2tb694 w))) (parallel_product d1 c1 b2 a2 h (t2tb689 k)))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x z) h) (mem21
  (tb2t693 (Tuple2 c1 d1 (t2tb135 y) (t2tb694 w))) k))))))

;; mem_parallel_product
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((h uni) (k (set (tuple21 b e))) (x uni) (y b) (z uni) (w e))
  (= (mem (tuple2 (tuple2 a2 b1) (tuple2 b2 e1))
  (Tuple2 (tuple2 a2 b1) (tuple2 b2 e1) (Tuple2 a2 b1 x (t2tb14 y))
  (Tuple2 b2 e1 z (t2tb2955 w)))
  (parallel_product e1 b1 b2 a2 h (t2tb2940 k)))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x z) h) (mem38
  (tb2t2953 (Tuple2 b1 e1 (t2tb14 y) (t2tb2955 w))) k))))))

;; mem_parallel_product
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((h uni) (k (set (tuple21 a e))) (x uni) (y a) (z uni) (w e))
  (= (mem (tuple2 (tuple2 a2 a1) (tuple2 b2 e1))
  (Tuple2 (tuple2 a2 a1) (tuple2 b2 e1) (Tuple2 a2 a1 x (t2tb2 y))
  (Tuple2 b2 e1 z (t2tb2955 w)))
  (parallel_product e1 a1 b2 a2 h (t2tb2943 k)))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x z) h) (mem44
  (tb2t2949 (Tuple2 a1 e1 (t2tb2 y) (t2tb2955 w))) k))))))

;; mem_parallel_product
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((h uni) (k (set (tuple21 a b))) (x uni) (y a) (z uni) (w b))
  (= (mem (tuple2 (tuple2 a2 a1) (tuple2 b2 b1))
  (Tuple2 (tuple2 a2 a1) (tuple2 b2 b1) (Tuple2 a2 a1 x (t2tb2 y))
  (Tuple2 b2 b1 z (t2tb14 w))) (parallel_product b1 a1 b2 a2 h (t2tb11 k)))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x z) h) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 y) (t2tb14 w))) k))))))

(declare-fun t2tb3944 ((set (tuple21 (tuple21 (tuple21 b d) (tuple21 b d))
  (tuple21 (tuple21 e f) (tuple21 e f))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 b d) (tuple21 b d))
  (tuple21 (tuple21 e f) (tuple21 e f)))))) (sort
  (set1
  (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 b1 d1))
  (tuple2 (tuple2 e1 f1) (tuple2 e1 f1)))) (t2tb3944 x))))

(declare-fun tb2t3944 (uni) (set (tuple21 (tuple21 (tuple21 b d) (tuple21 b
  d)) (tuple21 (tuple21 e f) (tuple21 e f)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 b d) (tuple21 b d))
  (tuple21 (tuple21 e f) (tuple21 e f))))))
  (! (= (tb2t3944 (t2tb3944 i)) i) :pattern ((t2tb3944 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 b1 d1))
     (tuple2 (tuple2 e1 f1) (tuple2 e1 f1)))) j)
     (= (t2tb3944 (tb2t3944 j)) j)) :pattern ((t2tb3944 (tb2t3944 j))) )))

(declare-fun t2tb3945 ((tuple21 (tuple21 (tuple21 b d) (tuple21 b d))
  (tuple21 (tuple21 e f) (tuple21 e f)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 b d) (tuple21 b d))
  (tuple21 (tuple21 e f) (tuple21 e f))))) (sort
  (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 b1 d1))
  (tuple2 (tuple2 e1 f1) (tuple2 e1 f1))) (t2tb3945 x))))

(declare-fun tb2t3945 (uni) (tuple21 (tuple21 (tuple21 b d) (tuple21 b d))
  (tuple21 (tuple21 e f) (tuple21 e f))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 b d) (tuple21 b d))
  (tuple21 (tuple21 e f) (tuple21 e f)))))
  (! (= (tb2t3945 (t2tb3945 i)) i) :pattern ((t2tb3945 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 b1 d1))
     (tuple2 (tuple2 e1 f1) (tuple2 e1 f1))) j)
     (= (t2tb3945 (tb2t3945 j)) j)) :pattern ((t2tb3945 (tb2t3945 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 (tuple21 b d) (tuple21 e f))))
  (k (set (tuple21 (tuple21 b d) (tuple21 e f)))) (x (tuple21 b d))
  (y (tuple21 b d)) (z (tuple21 e f)) (w (tuple21 e f)))
  (= (mem
  (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 b1 d1))
  (tuple2 (tuple2 e1 f1) (tuple2 e1 f1)))
  (Tuple2 (tuple2 (tuple2 b1 d1) (tuple2 b1 d1))
  (tuple2 (tuple2 e1 f1) (tuple2 e1 f1))
  (Tuple2 (tuple2 b1 d1) (tuple2 b1 d1) (t2tb692 x) (t2tb692 y))
  (Tuple2 (tuple2 e1 f1) (tuple2 e1 f1) (t2tb3315 z) (t2tb3315 w)))
  (parallel_product (tuple2 e1 f1) (tuple2 b1 d1) (tuple2 e1 f1)
  (tuple2 b1 d1) (t2tb2944 h) (t2tb2944 k)))
  (and (mem43
  (tb2t2950 (Tuple2 (tuple2 b1 d1) (tuple2 e1 f1) (t2tb692 x) (t2tb3315 z)))
  h) (mem43
  (tb2t2950 (Tuple2 (tuple2 b1 d1) (tuple2 e1 f1) (t2tb692 y) (t2tb3315 w)))
  k)))))

(declare-fun t2tb754 ((tuple21 (tuple21 b d) d)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b d) d))) (sort (tuple2 (tuple2 b1 d1) d1)
  (t2tb754 x))))

(declare-fun tb2t754 (uni) (tuple21 (tuple21 b d) d))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b d) d)))
  (! (= (tb2t754 (t2tb754 i)) i) :pattern ((t2tb754 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 d1) d1) j) (= (t2tb754 (tb2t754 j)) j)) :pattern (
  (t2tb754 (tb2t754 j))) )))

(declare-fun t2tb3946 ((tuple21 (tuple21 e f) f)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 e f) f))) (sort (tuple2 (tuple2 e1 f1) f1)
  (t2tb3946 x))))

(declare-fun tb2t3946 (uni) (tuple21 (tuple21 e f) f))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 e f) f)))
  (! (= (tb2t3946 (t2tb3946 i)) i) :pattern ((t2tb3946 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 e1 f1) f1) j) (= (t2tb3946 (tb2t3946 j)) j)) :pattern (
  (t2tb3946 (tb2t3946 j))) )))

(declare-fun t2tb3947 ((set (tuple21 (tuple21 (tuple21 b d) d)
  (tuple21 (tuple21 e f) f)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 b d) d) (tuple21 (tuple21 e f)
  f))))) (sort
  (set1 (tuple2 (tuple2 (tuple2 b1 d1) d1) (tuple2 (tuple2 e1 f1) f1)))
  (t2tb3947 x))))

(declare-fun tb2t3947 (uni) (set (tuple21 (tuple21 (tuple21 b d) d)
  (tuple21 (tuple21 e f) f))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 b d) d) (tuple21 (tuple21 e f)
  f))))) (! (= (tb2t3947 (t2tb3947 i)) i) :pattern ((t2tb3947 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 (tuple2 b1 d1) d1) (tuple2 (tuple2 e1 f1) f1))) j)
     (= (t2tb3947 (tb2t3947 j)) j)) :pattern ((t2tb3947 (tb2t3947 j))) )))

(declare-fun t2tb3948 ((tuple21 (tuple21 (tuple21 b d) d) (tuple21 (tuple21 e
  f) f))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 b d) d) (tuple21 (tuple21 e f) f))))
  (sort (tuple2 (tuple2 (tuple2 b1 d1) d1) (tuple2 (tuple2 e1 f1) f1))
  (t2tb3948 x))))

(declare-fun tb2t3948 (uni) (tuple21 (tuple21 (tuple21 b d) d)
  (tuple21 (tuple21 e f) f)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 b d) d) (tuple21 (tuple21 e f) f))))
  (! (= (tb2t3948 (t2tb3948 i)) i) :pattern ((t2tb3948 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 (tuple2 b1 d1) d1) (tuple2 (tuple2 e1 f1) f1))
     j) (= (t2tb3948 (tb2t3948 j)) j)) :pattern ((t2tb3948 (tb2t3948 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 (tuple21 b d) (tuple21 e f)))) (k (set (tuple21 d
  f))) (x (tuple21 b d)) (y d) (z (tuple21 e f)) (w f))
  (= (mem (tuple2 (tuple2 (tuple2 b1 d1) d1) (tuple2 (tuple2 e1 f1) f1))
  (Tuple2 (tuple2 (tuple2 b1 d1) d1) (tuple2 (tuple2 e1 f1) f1)
  (Tuple2 (tuple2 b1 d1) d1 (t2tb692 x) (t2tb694 y))
  (Tuple2 (tuple2 e1 f1) f1 (t2tb3315 z) (t2tb2954 w)))
  (parallel_product f1 d1 (tuple2 e1 f1) (tuple2 b1 d1) (t2tb2944 h)
  (t2tb2938 k)))
  (and (mem43
  (tb2t2950 (Tuple2 (tuple2 b1 d1) (tuple2 e1 f1) (t2tb692 x) (t2tb3315 z)))
  h) (mem40 (tb2t2952 (Tuple2 d1 f1 (t2tb694 y) (t2tb2954 w))) k)))))

(declare-fun t2tb3949 ((set (tuple21 (tuple21 (tuple21 b d) (tuple21 a c))
  (tuple21 (tuple21 e f) (tuple21 e f))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 b d) (tuple21 a c))
  (tuple21 (tuple21 e f) (tuple21 e f)))))) (sort
  (set1
  (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 a1 c1))
  (tuple2 (tuple2 e1 f1) (tuple2 e1 f1)))) (t2tb3949 x))))

(declare-fun tb2t3949 (uni) (set (tuple21 (tuple21 (tuple21 b d) (tuple21 a
  c)) (tuple21 (tuple21 e f) (tuple21 e f)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 b d) (tuple21 a c))
  (tuple21 (tuple21 e f) (tuple21 e f))))))
  (! (= (tb2t3949 (t2tb3949 i)) i) :pattern ((t2tb3949 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 a1 c1))
     (tuple2 (tuple2 e1 f1) (tuple2 e1 f1)))) j)
     (= (t2tb3949 (tb2t3949 j)) j)) :pattern ((t2tb3949 (tb2t3949 j))) )))

(declare-fun t2tb3950 ((tuple21 (tuple21 (tuple21 b d) (tuple21 a c))
  (tuple21 (tuple21 e f) (tuple21 e f)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 b d) (tuple21 a c))
  (tuple21 (tuple21 e f) (tuple21 e f))))) (sort
  (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 a1 c1))
  (tuple2 (tuple2 e1 f1) (tuple2 e1 f1))) (t2tb3950 x))))

(declare-fun tb2t3950 (uni) (tuple21 (tuple21 (tuple21 b d) (tuple21 a c))
  (tuple21 (tuple21 e f) (tuple21 e f))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 b d) (tuple21 a c))
  (tuple21 (tuple21 e f) (tuple21 e f)))))
  (! (= (tb2t3950 (t2tb3950 i)) i) :pattern ((t2tb3950 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 a1 c1))
     (tuple2 (tuple2 e1 f1) (tuple2 e1 f1))) j)
     (= (t2tb3950 (tb2t3950 j)) j)) :pattern ((t2tb3950 (tb2t3950 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 (tuple21 b d) (tuple21 e f))))
  (k (set (tuple21 (tuple21 a c) (tuple21 e f)))) (x (tuple21 b d))
  (y (tuple21 a c)) (z (tuple21 e f)) (w (tuple21 e f)))
  (= (mem
  (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 a1 c1))
  (tuple2 (tuple2 e1 f1) (tuple2 e1 f1)))
  (Tuple2 (tuple2 (tuple2 b1 d1) (tuple2 a1 c1))
  (tuple2 (tuple2 e1 f1) (tuple2 e1 f1))
  (Tuple2 (tuple2 b1 d1) (tuple2 a1 c1) (t2tb692 x) (t2tb133 y))
  (Tuple2 (tuple2 e1 f1) (tuple2 e1 f1) (t2tb3315 z) (t2tb3315 w)))
  (parallel_product (tuple2 e1 f1) (tuple2 a1 c1) (tuple2 e1 f1)
  (tuple2 b1 d1) (t2tb2944 h) (t2tb2945 k)))
  (and (mem43
  (tb2t2950 (Tuple2 (tuple2 b1 d1) (tuple2 e1 f1) (t2tb692 x) (t2tb3315 z)))
  h) (mem42
  (tb2t2951 (Tuple2 (tuple2 a1 c1) (tuple2 e1 f1) (t2tb133 y) (t2tb3315 w)))
  k)))))

(declare-fun t2tb3951 ((set (tuple21 (tuple21 (tuple21 b d) (tuple21 a c))
  (tuple21 (tuple21 e f) (tuple21 b d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 b d) (tuple21 a c))
  (tuple21 (tuple21 e f) (tuple21 b d)))))) (sort
  (set1
  (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 a1 c1))
  (tuple2 (tuple2 e1 f1) (tuple2 b1 d1)))) (t2tb3951 x))))

(declare-fun tb2t3951 (uni) (set (tuple21 (tuple21 (tuple21 b d) (tuple21 a
  c)) (tuple21 (tuple21 e f) (tuple21 b d)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 b d) (tuple21 a c))
  (tuple21 (tuple21 e f) (tuple21 b d))))))
  (! (= (tb2t3951 (t2tb3951 i)) i) :pattern ((t2tb3951 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 a1 c1))
     (tuple2 (tuple2 e1 f1) (tuple2 b1 d1)))) j)
     (= (t2tb3951 (tb2t3951 j)) j)) :pattern ((t2tb3951 (tb2t3951 j))) )))

(declare-fun t2tb3952 ((tuple21 (tuple21 (tuple21 b d) (tuple21 a c))
  (tuple21 (tuple21 e f) (tuple21 b d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 b d) (tuple21 a c))
  (tuple21 (tuple21 e f) (tuple21 b d))))) (sort
  (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 a1 c1))
  (tuple2 (tuple2 e1 f1) (tuple2 b1 d1))) (t2tb3952 x))))

(declare-fun tb2t3952 (uni) (tuple21 (tuple21 (tuple21 b d) (tuple21 a c))
  (tuple21 (tuple21 e f) (tuple21 b d))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 b d) (tuple21 a c))
  (tuple21 (tuple21 e f) (tuple21 b d)))))
  (! (= (tb2t3952 (t2tb3952 i)) i) :pattern ((t2tb3952 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 a1 c1))
     (tuple2 (tuple2 e1 f1) (tuple2 b1 d1))) j)
     (= (t2tb3952 (tb2t3952 j)) j)) :pattern ((t2tb3952 (tb2t3952 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 (tuple21 b d) (tuple21 e f))))
  (k (set (tuple21 (tuple21 a c) (tuple21 b d)))) (x (tuple21 b d))
  (y (tuple21 a c)) (z (tuple21 e f)) (w (tuple21 b d)))
  (= (mem
  (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 a1 c1))
  (tuple2 (tuple2 e1 f1) (tuple2 b1 d1)))
  (Tuple2 (tuple2 (tuple2 b1 d1) (tuple2 a1 c1))
  (tuple2 (tuple2 e1 f1) (tuple2 b1 d1))
  (Tuple2 (tuple2 b1 d1) (tuple2 a1 c1) (t2tb692 x) (t2tb133 y))
  (Tuple2 (tuple2 e1 f1) (tuple2 b1 d1) (t2tb3315 z) (t2tb692 w)))
  (parallel_product (tuple2 b1 d1) (tuple2 a1 c1) (tuple2 e1 f1)
  (tuple2 b1 d1) (t2tb2944 h) (t2tb686 k)))
  (and (mem43
  (tb2t2950 (Tuple2 (tuple2 b1 d1) (tuple2 e1 f1) (t2tb692 x) (t2tb3315 z)))
  h) (mem24
  (tb2t691 (Tuple2 (tuple2 a1 c1) (tuple2 b1 d1) (t2tb133 y) (t2tb692 w)))
  k)))))

(declare-fun t2tb3953 ((tuple21 (tuple21 (tuple21 b d) c) (tuple21 (tuple21 e
  f) f))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 b d) c) (tuple21 (tuple21 e f) f))))
  (sort (tuple2 (tuple2 (tuple2 b1 d1) c1) (tuple2 (tuple2 e1 f1) f1))
  (t2tb3953 x))))

(declare-fun tb2t3953 (uni) (tuple21 (tuple21 (tuple21 b d) c)
  (tuple21 (tuple21 e f) f)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 b d) c) (tuple21 (tuple21 e f) f))))
  (! (= (tb2t3953 (t2tb3953 i)) i) :pattern ((t2tb3953 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 (tuple2 b1 d1) c1) (tuple2 (tuple2 e1 f1) f1))
     j) (= (t2tb3953 (tb2t3953 j)) j)) :pattern ((t2tb3953 (tb2t3953 j))) )))

(declare-fun t2tb1761 ((tuple21 (tuple21 b d) c)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b d) c))) (sort (tuple2 (tuple2 b1 d1) c1)
  (t2tb1761 x))))

(declare-fun tb2t1761 (uni) (tuple21 (tuple21 b d) c))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b d) c)))
  (! (= (tb2t1761 (t2tb1761 i)) i) :pattern ((t2tb1761 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 d1) c1) j) (= (t2tb1761 (tb2t1761 j)) j)) :pattern (
  (t2tb1761 (tb2t1761 j))) )))

(declare-fun t2tb3954 ((set (tuple21 (tuple21 (tuple21 b d) c)
  (tuple21 (tuple21 e f) f)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 b d) c) (tuple21 (tuple21 e f)
  f))))) (sort
  (set1 (tuple2 (tuple2 (tuple2 b1 d1) c1) (tuple2 (tuple2 e1 f1) f1)))
  (t2tb3954 x))))

(declare-fun tb2t3954 (uni) (set (tuple21 (tuple21 (tuple21 b d) c)
  (tuple21 (tuple21 e f) f))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 b d) c) (tuple21 (tuple21 e f)
  f))))) (! (= (tb2t3954 (t2tb3954 i)) i) :pattern ((t2tb3954 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 (tuple2 b1 d1) c1) (tuple2 (tuple2 e1 f1) f1))) j)
     (= (t2tb3954 (tb2t3954 j)) j)) :pattern ((t2tb3954 (tb2t3954 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 (tuple21 b d) (tuple21 e f)))) (k (set (tuple21 c
  f))) (x (tuple21 b d)) (y c) (z (tuple21 e f)) (w f))
  (= (mem (tuple2 (tuple2 (tuple2 b1 d1) c1) (tuple2 (tuple2 e1 f1) f1))
  (Tuple2 (tuple2 (tuple2 b1 d1) c1) (tuple2 (tuple2 e1 f1) f1)
  (Tuple2 (tuple2 b1 d1) c1 (t2tb692 x) (t2tb135 y))
  (Tuple2 (tuple2 e1 f1) f1 (t2tb3315 z) (t2tb2954 w)))
  (parallel_product f1 c1 (tuple2 e1 f1) (tuple2 b1 d1) (t2tb2944 h)
  (t2tb2942 k)))
  (and (mem43
  (tb2t2950 (Tuple2 (tuple2 b1 d1) (tuple2 e1 f1) (t2tb692 x) (t2tb3315 z)))
  h) (mem45 (tb2t2948 (Tuple2 c1 f1 (t2tb135 y) (t2tb2954 w))) k)))))

(declare-fun t2tb3955 ((set (tuple21 (tuple21 (tuple21 b d) c)
  (tuple21 (tuple21 e f) d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 b d) c) (tuple21 (tuple21 e f)
  d))))) (sort
  (set1 (tuple2 (tuple2 (tuple2 b1 d1) c1) (tuple2 (tuple2 e1 f1) d1)))
  (t2tb3955 x))))

(declare-fun tb2t3955 (uni) (set (tuple21 (tuple21 (tuple21 b d) c)
  (tuple21 (tuple21 e f) d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 b d) c) (tuple21 (tuple21 e f)
  d))))) (! (= (tb2t3955 (t2tb3955 i)) i) :pattern ((t2tb3955 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 (tuple2 b1 d1) c1) (tuple2 (tuple2 e1 f1) d1))) j)
     (= (t2tb3955 (tb2t3955 j)) j)) :pattern ((t2tb3955 (tb2t3955 j))) )))

(declare-fun t2tb3956 ((tuple21 (tuple21 (tuple21 b d) c) (tuple21 (tuple21 e
  f) d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 b d) c) (tuple21 (tuple21 e f) d))))
  (sort (tuple2 (tuple2 (tuple2 b1 d1) c1) (tuple2 (tuple2 e1 f1) d1))
  (t2tb3956 x))))

(declare-fun tb2t3956 (uni) (tuple21 (tuple21 (tuple21 b d) c)
  (tuple21 (tuple21 e f) d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 b d) c) (tuple21 (tuple21 e f) d))))
  (! (= (tb2t3956 (t2tb3956 i)) i) :pattern ((t2tb3956 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 (tuple2 b1 d1) c1) (tuple2 (tuple2 e1 f1) d1))
     j) (= (t2tb3956 (tb2t3956 j)) j)) :pattern ((t2tb3956 (tb2t3956 j))) )))

(declare-fun t2tb3957 ((tuple21 (tuple21 e f) d)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 e f) d))) (sort (tuple2 (tuple2 e1 f1) d1)
  (t2tb3957 x))))

(declare-fun tb2t3957 (uni) (tuple21 (tuple21 e f) d))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 e f) d)))
  (! (= (tb2t3957 (t2tb3957 i)) i) :pattern ((t2tb3957 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 e1 f1) d1) j) (= (t2tb3957 (tb2t3957 j)) j)) :pattern (
  (t2tb3957 (tb2t3957 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 (tuple21 b d) (tuple21 e f)))) (k (set (tuple21 c
  d))) (x (tuple21 b d)) (y c) (z (tuple21 e f)) (w d))
  (= (mem (tuple2 (tuple2 (tuple2 b1 d1) c1) (tuple2 (tuple2 e1 f1) d1))
  (Tuple2 (tuple2 (tuple2 b1 d1) c1) (tuple2 (tuple2 e1 f1) d1)
  (Tuple2 (tuple2 b1 d1) c1 (t2tb692 x) (t2tb135 y))
  (Tuple2 (tuple2 e1 f1) d1 (t2tb3315 z) (t2tb694 w)))
  (parallel_product d1 c1 (tuple2 e1 f1) (tuple2 b1 d1) (t2tb2944 h)
  (t2tb689 k)))
  (and (mem43
  (tb2t2950 (Tuple2 (tuple2 b1 d1) (tuple2 e1 f1) (t2tb692 x) (t2tb3315 z)))
  h) (mem21 (tb2t693 (Tuple2 c1 d1 (t2tb135 y) (t2tb694 w))) k)))))

(declare-fun t2tb764 ((tuple21 (tuple21 b d) b)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b d) b))) (sort (tuple2 (tuple2 b1 d1) b1)
  (t2tb764 x))))

(declare-fun tb2t764 (uni) (tuple21 (tuple21 b d) b))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b d) b)))
  (! (= (tb2t764 (t2tb764 i)) i) :pattern ((t2tb764 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 d1) b1) j) (= (t2tb764 (tb2t764 j)) j)) :pattern (
  (t2tb764 (tb2t764 j))) )))

(declare-fun t2tb3958 ((tuple21 (tuple21 e f) e)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 e f) e))) (sort (tuple2 (tuple2 e1 f1) e1)
  (t2tb3958 x))))

(declare-fun tb2t3958 (uni) (tuple21 (tuple21 e f) e))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 e f) e)))
  (! (= (tb2t3958 (t2tb3958 i)) i) :pattern ((t2tb3958 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 e1 f1) e1) j) (= (t2tb3958 (tb2t3958 j)) j)) :pattern (
  (t2tb3958 (tb2t3958 j))) )))

(declare-fun t2tb3959 ((set (tuple21 (tuple21 (tuple21 b d) b)
  (tuple21 (tuple21 e f) e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 b d) b) (tuple21 (tuple21 e f)
  e))))) (sort
  (set1 (tuple2 (tuple2 (tuple2 b1 d1) b1) (tuple2 (tuple2 e1 f1) e1)))
  (t2tb3959 x))))

(declare-fun tb2t3959 (uni) (set (tuple21 (tuple21 (tuple21 b d) b)
  (tuple21 (tuple21 e f) e))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 b d) b) (tuple21 (tuple21 e f)
  e))))) (! (= (tb2t3959 (t2tb3959 i)) i) :pattern ((t2tb3959 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 (tuple2 b1 d1) b1) (tuple2 (tuple2 e1 f1) e1))) j)
     (= (t2tb3959 (tb2t3959 j)) j)) :pattern ((t2tb3959 (tb2t3959 j))) )))

(declare-fun t2tb3960 ((tuple21 (tuple21 (tuple21 b d) b) (tuple21 (tuple21 e
  f) e))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 b d) b) (tuple21 (tuple21 e f) e))))
  (sort (tuple2 (tuple2 (tuple2 b1 d1) b1) (tuple2 (tuple2 e1 f1) e1))
  (t2tb3960 x))))

(declare-fun tb2t3960 (uni) (tuple21 (tuple21 (tuple21 b d) b)
  (tuple21 (tuple21 e f) e)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 b d) b) (tuple21 (tuple21 e f) e))))
  (! (= (tb2t3960 (t2tb3960 i)) i) :pattern ((t2tb3960 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 (tuple2 b1 d1) b1) (tuple2 (tuple2 e1 f1) e1))
     j) (= (t2tb3960 (tb2t3960 j)) j)) :pattern ((t2tb3960 (tb2t3960 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 (tuple21 b d) (tuple21 e f)))) (k (set (tuple21 b
  e))) (x (tuple21 b d)) (y b) (z (tuple21 e f)) (w e))
  (= (mem (tuple2 (tuple2 (tuple2 b1 d1) b1) (tuple2 (tuple2 e1 f1) e1))
  (Tuple2 (tuple2 (tuple2 b1 d1) b1) (tuple2 (tuple2 e1 f1) e1)
  (Tuple2 (tuple2 b1 d1) b1 (t2tb692 x) (t2tb14 y))
  (Tuple2 (tuple2 e1 f1) e1 (t2tb3315 z) (t2tb2955 w)))
  (parallel_product e1 b1 (tuple2 e1 f1) (tuple2 b1 d1) (t2tb2944 h)
  (t2tb2940 k)))
  (and (mem43
  (tb2t2950 (Tuple2 (tuple2 b1 d1) (tuple2 e1 f1) (t2tb692 x) (t2tb3315 z)))
  h) (mem38 (tb2t2953 (Tuple2 b1 e1 (t2tb14 y) (t2tb2955 w))) k)))))

(declare-fun t2tb2043 ((tuple21 (tuple21 b d) a)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b d) a))) (sort (tuple2 (tuple2 b1 d1) a1)
  (t2tb2043 x))))

(declare-fun tb2t2043 (uni) (tuple21 (tuple21 b d) a))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b d) a)))
  (! (= (tb2t2043 (t2tb2043 i)) i) :pattern ((t2tb2043 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 d1) a1) j) (= (t2tb2043 (tb2t2043 j)) j)) :pattern (
  (t2tb2043 (tb2t2043 j))) )))

(declare-fun t2tb3961 ((set (tuple21 (tuple21 (tuple21 b d) a)
  (tuple21 (tuple21 e f) e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 b d) a) (tuple21 (tuple21 e f)
  e))))) (sort
  (set1 (tuple2 (tuple2 (tuple2 b1 d1) a1) (tuple2 (tuple2 e1 f1) e1)))
  (t2tb3961 x))))

(declare-fun tb2t3961 (uni) (set (tuple21 (tuple21 (tuple21 b d) a)
  (tuple21 (tuple21 e f) e))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 b d) a) (tuple21 (tuple21 e f)
  e))))) (! (= (tb2t3961 (t2tb3961 i)) i) :pattern ((t2tb3961 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 (tuple2 b1 d1) a1) (tuple2 (tuple2 e1 f1) e1))) j)
     (= (t2tb3961 (tb2t3961 j)) j)) :pattern ((t2tb3961 (tb2t3961 j))) )))

(declare-fun t2tb3962 ((tuple21 (tuple21 (tuple21 b d) a) (tuple21 (tuple21 e
  f) e))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 b d) a) (tuple21 (tuple21 e f) e))))
  (sort (tuple2 (tuple2 (tuple2 b1 d1) a1) (tuple2 (tuple2 e1 f1) e1))
  (t2tb3962 x))))

(declare-fun tb2t3962 (uni) (tuple21 (tuple21 (tuple21 b d) a)
  (tuple21 (tuple21 e f) e)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 b d) a) (tuple21 (tuple21 e f) e))))
  (! (= (tb2t3962 (t2tb3962 i)) i) :pattern ((t2tb3962 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 (tuple2 b1 d1) a1) (tuple2 (tuple2 e1 f1) e1))
     j) (= (t2tb3962 (tb2t3962 j)) j)) :pattern ((t2tb3962 (tb2t3962 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 (tuple21 b d) (tuple21 e f)))) (k (set (tuple21 a
  e))) (x (tuple21 b d)) (y a) (z (tuple21 e f)) (w e))
  (= (mem (tuple2 (tuple2 (tuple2 b1 d1) a1) (tuple2 (tuple2 e1 f1) e1))
  (Tuple2 (tuple2 (tuple2 b1 d1) a1) (tuple2 (tuple2 e1 f1) e1)
  (Tuple2 (tuple2 b1 d1) a1 (t2tb692 x) (t2tb2 y))
  (Tuple2 (tuple2 e1 f1) e1 (t2tb3315 z) (t2tb2955 w)))
  (parallel_product e1 a1 (tuple2 e1 f1) (tuple2 b1 d1) (t2tb2944 h)
  (t2tb2943 k)))
  (and (mem43
  (tb2t2950 (Tuple2 (tuple2 b1 d1) (tuple2 e1 f1) (t2tb692 x) (t2tb3315 z)))
  h) (mem44 (tb2t2949 (Tuple2 a1 e1 (t2tb2 y) (t2tb2955 w))) k)))))

(declare-fun t2tb3963 ((tuple21 (tuple21 e f) b)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 e f) b))) (sort (tuple2 (tuple2 e1 f1) b1)
  (t2tb3963 x))))

(declare-fun tb2t3963 (uni) (tuple21 (tuple21 e f) b))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 e f) b)))
  (! (= (tb2t3963 (t2tb3963 i)) i) :pattern ((t2tb3963 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 e1 f1) b1) j) (= (t2tb3963 (tb2t3963 j)) j)) :pattern (
  (t2tb3963 (tb2t3963 j))) )))

(declare-fun t2tb3964 ((set (tuple21 (tuple21 (tuple21 b d) a)
  (tuple21 (tuple21 e f) b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 b d) a) (tuple21 (tuple21 e f)
  b))))) (sort
  (set1 (tuple2 (tuple2 (tuple2 b1 d1) a1) (tuple2 (tuple2 e1 f1) b1)))
  (t2tb3964 x))))

(declare-fun tb2t3964 (uni) (set (tuple21 (tuple21 (tuple21 b d) a)
  (tuple21 (tuple21 e f) b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 b d) a) (tuple21 (tuple21 e f)
  b))))) (! (= (tb2t3964 (t2tb3964 i)) i) :pattern ((t2tb3964 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 (tuple2 b1 d1) a1) (tuple2 (tuple2 e1 f1) b1))) j)
     (= (t2tb3964 (tb2t3964 j)) j)) :pattern ((t2tb3964 (tb2t3964 j))) )))

(declare-fun t2tb3965 ((tuple21 (tuple21 (tuple21 b d) a) (tuple21 (tuple21 e
  f) b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 b d) a) (tuple21 (tuple21 e f) b))))
  (sort (tuple2 (tuple2 (tuple2 b1 d1) a1) (tuple2 (tuple2 e1 f1) b1))
  (t2tb3965 x))))

(declare-fun tb2t3965 (uni) (tuple21 (tuple21 (tuple21 b d) a)
  (tuple21 (tuple21 e f) b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 b d) a) (tuple21 (tuple21 e f) b))))
  (! (= (tb2t3965 (t2tb3965 i)) i) :pattern ((t2tb3965 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 (tuple2 b1 d1) a1) (tuple2 (tuple2 e1 f1) b1))
     j) (= (t2tb3965 (tb2t3965 j)) j)) :pattern ((t2tb3965 (tb2t3965 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 (tuple21 b d) (tuple21 e f)))) (k (set (tuple21 a
  b))) (x (tuple21 b d)) (y a) (z (tuple21 e f)) (w b))
  (= (mem (tuple2 (tuple2 (tuple2 b1 d1) a1) (tuple2 (tuple2 e1 f1) b1))
  (Tuple2 (tuple2 (tuple2 b1 d1) a1) (tuple2 (tuple2 e1 f1) b1)
  (Tuple2 (tuple2 b1 d1) a1 (t2tb692 x) (t2tb2 y))
  (Tuple2 (tuple2 e1 f1) b1 (t2tb3315 z) (t2tb14 w)))
  (parallel_product b1 a1 (tuple2 e1 f1) (tuple2 b1 d1) (t2tb2944 h)
  (t2tb11 k)))
  (and (mem43
  (tb2t2950 (Tuple2 (tuple2 b1 d1) (tuple2 e1 f1) (t2tb692 x) (t2tb3315 z)))
  h) (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 y) (t2tb14 w))) k)))))

;; mem_parallel_product
  (assert
  (forall ((c2 ty) (d2 ty))
  (forall ((h (set (tuple21 (tuple21 b d) (tuple21 e f)))) (k uni)
  (x (tuple21 b d)) (y uni) (z (tuple21 e f)) (w uni))
  (= (mem (tuple2 (tuple2 (tuple2 b1 d1) c2) (tuple2 (tuple2 e1 f1) d2))
  (Tuple2 (tuple2 (tuple2 b1 d1) c2) (tuple2 (tuple2 e1 f1) d2)
  (Tuple2 (tuple2 b1 d1) c2 (t2tb692 x) y)
  (Tuple2 (tuple2 e1 f1) d2 (t2tb3315 z) w))
  (parallel_product d2 c2 (tuple2 e1 f1) (tuple2 b1 d1) (t2tb2944 h) k))
  (and (mem43
  (tb2t2950 (Tuple2 (tuple2 b1 d1) (tuple2 e1 f1) (t2tb692 x) (t2tb3315 z)))
  h) (mem (tuple2 c2 d2) (Tuple2 c2 d2 y w) k))))))

(declare-fun t2tb3966 ((tuple21 f (tuple21 e f))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 f (tuple21 e f)))) (sort (tuple2 f1 (tuple2 e1 f1))
  (t2tb3966 x))))

(declare-fun tb2t3966 (uni) (tuple21 f (tuple21 e f)))

;; BridgeL
  (assert
  (forall ((i (tuple21 f (tuple21 e f))))
  (! (= (tb2t3966 (t2tb3966 i)) i) :pattern ((t2tb3966 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 f1 (tuple2 e1 f1)) j) (= (t2tb3966 (tb2t3966 j)) j)) :pattern (
  (t2tb3966 (tb2t3966 j))) )))

(declare-fun t2tb3967 ((set (tuple21 (tuple21 d (tuple21 b d)) (tuple21 f
  (tuple21 e f))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 d (tuple21 b d)) (tuple21 f (tuple21 e
  f)))))) (sort
  (set1 (tuple2 (tuple2 d1 (tuple2 b1 d1)) (tuple2 f1 (tuple2 e1 f1))))
  (t2tb3967 x))))

(declare-fun tb2t3967 (uni) (set (tuple21 (tuple21 d (tuple21 b d))
  (tuple21 f (tuple21 e f)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 d (tuple21 b d)) (tuple21 f (tuple21 e
  f)))))) (! (= (tb2t3967 (t2tb3967 i)) i) :pattern ((t2tb3967 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 d1 (tuple2 b1 d1)) (tuple2 f1 (tuple2 e1 f1)))) j)
     (= (t2tb3967 (tb2t3967 j)) j)) :pattern ((t2tb3967 (tb2t3967 j))) )))

(declare-fun t2tb3968 ((tuple21 (tuple21 d (tuple21 b d)) (tuple21 f
  (tuple21 e f)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 d (tuple21 b d)) (tuple21 f (tuple21 e f)))))
  (sort (tuple2 (tuple2 d1 (tuple2 b1 d1)) (tuple2 f1 (tuple2 e1 f1)))
  (t2tb3968 x))))

(declare-fun tb2t3968 (uni) (tuple21 (tuple21 d (tuple21 b d)) (tuple21 f
  (tuple21 e f))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 d (tuple21 b d)) (tuple21 f (tuple21 e f)))))
  (! (= (tb2t3968 (t2tb3968 i)) i) :pattern ((t2tb3968 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 d1 (tuple2 b1 d1)) (tuple2 f1 (tuple2 e1 f1)))
     j) (= (t2tb3968 (tb2t3968 j)) j)) :pattern ((t2tb3968 (tb2t3968 j))) )))

(declare-fun t2tb820 ((tuple21 d (tuple21 b d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 d (tuple21 b d)))) (sort (tuple2 d1 (tuple2 b1 d1))
  (t2tb820 x))))

(declare-fun tb2t820 (uni) (tuple21 d (tuple21 b d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 d (tuple21 b d))))
  (! (= (tb2t820 (t2tb820 i)) i) :pattern ((t2tb820 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 d1 (tuple2 b1 d1)) j) (= (t2tb820 (tb2t820 j)) j)) :pattern (
  (t2tb820 (tb2t820 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 d f))) (k (set (tuple21 (tuple21 b d) (tuple21 e
  f)))) (x d) (y (tuple21 b d)) (z f) (w (tuple21 e f)))
  (= (mem (tuple2 (tuple2 d1 (tuple2 b1 d1)) (tuple2 f1 (tuple2 e1 f1)))
  (Tuple2 (tuple2 d1 (tuple2 b1 d1)) (tuple2 f1 (tuple2 e1 f1))
  (Tuple2 d1 (tuple2 b1 d1) (t2tb694 x) (t2tb692 y))
  (Tuple2 f1 (tuple2 e1 f1) (t2tb2954 z) (t2tb3315 w)))
  (parallel_product (tuple2 e1 f1) (tuple2 b1 d1) f1 d1 (t2tb2938 h)
  (t2tb2944 k)))
  (and (mem40 (tb2t2952 (Tuple2 d1 f1 (t2tb694 x) (t2tb2954 z))) h) (mem43
  (tb2t2950 (Tuple2 (tuple2 b1 d1) (tuple2 e1 f1) (t2tb692 y) (t2tb3315 w)))
  k)))))

(declare-fun t2tb3969 ((set (tuple21 (tuple21 d d) (tuple21 f f)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 d d) (tuple21 f f))))) (sort
  (set1 (tuple2 (tuple2 d1 d1) (tuple2 f1 f1))) (t2tb3969 x))))

(declare-fun tb2t3969 (uni) (set (tuple21 (tuple21 d d) (tuple21 f f))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 d d) (tuple21 f f)))))
  (! (= (tb2t3969 (t2tb3969 i)) i) :pattern ((t2tb3969 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 d1 d1) (tuple2 f1 f1))) j)
     (= (t2tb3969 (tb2t3969 j)) j)) :pattern ((t2tb3969 (tb2t3969 j))) )))

(declare-fun t2tb3970 ((tuple21 (tuple21 d d) (tuple21 f f))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 d d) (tuple21 f f)))) (sort
  (tuple2 (tuple2 d1 d1) (tuple2 f1 f1)) (t2tb3970 x))))

(declare-fun tb2t3970 (uni) (tuple21 (tuple21 d d) (tuple21 f f)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 d d) (tuple21 f f))))
  (! (= (tb2t3970 (t2tb3970 i)) i) :pattern ((t2tb3970 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 d1 d1) (tuple2 f1 f1)) j)
     (= (t2tb3970 (tb2t3970 j)) j)) :pattern ((t2tb3970 (tb2t3970 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 d f))) (k (set (tuple21 d f))) (x d) (y d) (z f)
  (w f))
  (= (mem (tuple2 (tuple2 d1 d1) (tuple2 f1 f1))
  (Tuple2 (tuple2 d1 d1) (tuple2 f1 f1)
  (Tuple2 d1 d1 (t2tb694 x) (t2tb694 y))
  (Tuple2 f1 f1 (t2tb2954 z) (t2tb2954 w)))
  (parallel_product f1 d1 f1 d1 (t2tb2938 h) (t2tb2938 k)))
  (and (mem40 (tb2t2952 (Tuple2 d1 f1 (t2tb694 x) (t2tb2954 z))) h) (mem40
  (tb2t2952 (Tuple2 d1 f1 (t2tb694 y) (t2tb2954 w))) k)))))

(declare-fun t2tb3971 ((tuple21 (tuple21 d (tuple21 a c)) (tuple21 f
  (tuple21 e f)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 d (tuple21 a c)) (tuple21 f (tuple21 e f)))))
  (sort (tuple2 (tuple2 d1 (tuple2 a1 c1)) (tuple2 f1 (tuple2 e1 f1)))
  (t2tb3971 x))))

(declare-fun tb2t3971 (uni) (tuple21 (tuple21 d (tuple21 a c)) (tuple21 f
  (tuple21 e f))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 d (tuple21 a c)) (tuple21 f (tuple21 e f)))))
  (! (= (tb2t3971 (t2tb3971 i)) i) :pattern ((t2tb3971 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 d1 (tuple2 a1 c1)) (tuple2 f1 (tuple2 e1 f1)))
     j) (= (t2tb3971 (tb2t3971 j)) j)) :pattern ((t2tb3971 (tb2t3971 j))) )))

(declare-fun t2tb1781 ((tuple21 d (tuple21 a c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 d (tuple21 a c)))) (sort (tuple2 d1 (tuple2 a1 c1))
  (t2tb1781 x))))

(declare-fun tb2t1781 (uni) (tuple21 d (tuple21 a c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 d (tuple21 a c))))
  (! (= (tb2t1781 (t2tb1781 i)) i) :pattern ((t2tb1781 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 d1 (tuple2 a1 c1)) j) (= (t2tb1781 (tb2t1781 j)) j)) :pattern (
  (t2tb1781 (tb2t1781 j))) )))

(declare-fun t2tb3972 ((set (tuple21 (tuple21 d (tuple21 a c)) (tuple21 f
  (tuple21 e f))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 d (tuple21 a c)) (tuple21 f (tuple21 e
  f)))))) (sort
  (set1 (tuple2 (tuple2 d1 (tuple2 a1 c1)) (tuple2 f1 (tuple2 e1 f1))))
  (t2tb3972 x))))

(declare-fun tb2t3972 (uni) (set (tuple21 (tuple21 d (tuple21 a c))
  (tuple21 f (tuple21 e f)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 d (tuple21 a c)) (tuple21 f (tuple21 e
  f)))))) (! (= (tb2t3972 (t2tb3972 i)) i) :pattern ((t2tb3972 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 d1 (tuple2 a1 c1)) (tuple2 f1 (tuple2 e1 f1)))) j)
     (= (t2tb3972 (tb2t3972 j)) j)) :pattern ((t2tb3972 (tb2t3972 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 d f))) (k (set (tuple21 (tuple21 a c) (tuple21 e
  f)))) (x d) (y (tuple21 a c)) (z f) (w (tuple21 e f)))
  (= (mem (tuple2 (tuple2 d1 (tuple2 a1 c1)) (tuple2 f1 (tuple2 e1 f1)))
  (Tuple2 (tuple2 d1 (tuple2 a1 c1)) (tuple2 f1 (tuple2 e1 f1))
  (Tuple2 d1 (tuple2 a1 c1) (t2tb694 x) (t2tb133 y))
  (Tuple2 f1 (tuple2 e1 f1) (t2tb2954 z) (t2tb3315 w)))
  (parallel_product (tuple2 e1 f1) (tuple2 a1 c1) f1 d1 (t2tb2938 h)
  (t2tb2945 k)))
  (and (mem40 (tb2t2952 (Tuple2 d1 f1 (t2tb694 x) (t2tb2954 z))) h) (mem42
  (tb2t2951 (Tuple2 (tuple2 a1 c1) (tuple2 e1 f1) (t2tb133 y) (t2tb3315 w)))
  k)))))

(declare-fun t2tb3973 ((set (tuple21 (tuple21 d (tuple21 a c)) (tuple21 f
  (tuple21 b d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 d (tuple21 a c)) (tuple21 f (tuple21 b
  d)))))) (sort
  (set1 (tuple2 (tuple2 d1 (tuple2 a1 c1)) (tuple2 f1 (tuple2 b1 d1))))
  (t2tb3973 x))))

(declare-fun tb2t3973 (uni) (set (tuple21 (tuple21 d (tuple21 a c))
  (tuple21 f (tuple21 b d)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 d (tuple21 a c)) (tuple21 f (tuple21 b
  d)))))) (! (= (tb2t3973 (t2tb3973 i)) i) :pattern ((t2tb3973 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 d1 (tuple2 a1 c1)) (tuple2 f1 (tuple2 b1 d1)))) j)
     (= (t2tb3973 (tb2t3973 j)) j)) :pattern ((t2tb3973 (tb2t3973 j))) )))

(declare-fun t2tb3974 ((tuple21 (tuple21 d (tuple21 a c)) (tuple21 f
  (tuple21 b d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 d (tuple21 a c)) (tuple21 f (tuple21 b d)))))
  (sort (tuple2 (tuple2 d1 (tuple2 a1 c1)) (tuple2 f1 (tuple2 b1 d1)))
  (t2tb3974 x))))

(declare-fun tb2t3974 (uni) (tuple21 (tuple21 d (tuple21 a c)) (tuple21 f
  (tuple21 b d))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 d (tuple21 a c)) (tuple21 f (tuple21 b d)))))
  (! (= (tb2t3974 (t2tb3974 i)) i) :pattern ((t2tb3974 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 d1 (tuple2 a1 c1)) (tuple2 f1 (tuple2 b1 d1)))
     j) (= (t2tb3974 (tb2t3974 j)) j)) :pattern ((t2tb3974 (tb2t3974 j))) )))

(declare-fun t2tb3975 ((tuple21 f (tuple21 b d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 f (tuple21 b d)))) (sort (tuple2 f1 (tuple2 b1 d1))
  (t2tb3975 x))))

(declare-fun tb2t3975 (uni) (tuple21 f (tuple21 b d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 f (tuple21 b d))))
  (! (= (tb2t3975 (t2tb3975 i)) i) :pattern ((t2tb3975 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 f1 (tuple2 b1 d1)) j) (= (t2tb3975 (tb2t3975 j)) j)) :pattern (
  (t2tb3975 (tb2t3975 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 d f))) (k (set (tuple21 (tuple21 a c) (tuple21 b
  d)))) (x d) (y (tuple21 a c)) (z f) (w (tuple21 b d)))
  (= (mem (tuple2 (tuple2 d1 (tuple2 a1 c1)) (tuple2 f1 (tuple2 b1 d1)))
  (Tuple2 (tuple2 d1 (tuple2 a1 c1)) (tuple2 f1 (tuple2 b1 d1))
  (Tuple2 d1 (tuple2 a1 c1) (t2tb694 x) (t2tb133 y))
  (Tuple2 f1 (tuple2 b1 d1) (t2tb2954 z) (t2tb692 w)))
  (parallel_product (tuple2 b1 d1) (tuple2 a1 c1) f1 d1 (t2tb2938 h)
  (t2tb686 k)))
  (and (mem40 (tb2t2952 (Tuple2 d1 f1 (t2tb694 x) (t2tb2954 z))) h) (mem24
  (tb2t691 (Tuple2 (tuple2 a1 c1) (tuple2 b1 d1) (t2tb133 y) (t2tb692 w)))
  k)))))

(declare-fun t2tb3976 ((set (tuple21 (tuple21 d c) (tuple21 f f)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 d c) (tuple21 f f))))) (sort
  (set1 (tuple2 (tuple2 d1 c1) (tuple2 f1 f1))) (t2tb3976 x))))

(declare-fun tb2t3976 (uni) (set (tuple21 (tuple21 d c) (tuple21 f f))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 d c) (tuple21 f f)))))
  (! (= (tb2t3976 (t2tb3976 i)) i) :pattern ((t2tb3976 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 d1 c1) (tuple2 f1 f1))) j)
     (= (t2tb3976 (tb2t3976 j)) j)) :pattern ((t2tb3976 (tb2t3976 j))) )))

(declare-fun t2tb3977 ((tuple21 (tuple21 d c) (tuple21 f f))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 d c) (tuple21 f f)))) (sort
  (tuple2 (tuple2 d1 c1) (tuple2 f1 f1)) (t2tb3977 x))))

(declare-fun tb2t3977 (uni) (tuple21 (tuple21 d c) (tuple21 f f)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 d c) (tuple21 f f))))
  (! (= (tb2t3977 (t2tb3977 i)) i) :pattern ((t2tb3977 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 d1 c1) (tuple2 f1 f1)) j)
     (= (t2tb3977 (tb2t3977 j)) j)) :pattern ((t2tb3977 (tb2t3977 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 d f))) (k (set (tuple21 c f))) (x d) (y c) (z f)
  (w f))
  (= (mem (tuple2 (tuple2 d1 c1) (tuple2 f1 f1))
  (Tuple2 (tuple2 d1 c1) (tuple2 f1 f1)
  (Tuple2 d1 c1 (t2tb694 x) (t2tb135 y))
  (Tuple2 f1 f1 (t2tb2954 z) (t2tb2954 w)))
  (parallel_product f1 c1 f1 d1 (t2tb2938 h) (t2tb2942 k)))
  (and (mem40 (tb2t2952 (Tuple2 d1 f1 (t2tb694 x) (t2tb2954 z))) h) (mem45
  (tb2t2948 (Tuple2 c1 f1 (t2tb135 y) (t2tb2954 w))) k)))))

(declare-fun t2tb3978 ((set (tuple21 (tuple21 d c) (tuple21 f d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 d c) (tuple21 f d))))) (sort
  (set1 (tuple2 (tuple2 d1 c1) (tuple2 f1 d1))) (t2tb3978 x))))

(declare-fun tb2t3978 (uni) (set (tuple21 (tuple21 d c) (tuple21 f d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 d c) (tuple21 f d)))))
  (! (= (tb2t3978 (t2tb3978 i)) i) :pattern ((t2tb3978 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 d1 c1) (tuple2 f1 d1))) j)
     (= (t2tb3978 (tb2t3978 j)) j)) :pattern ((t2tb3978 (tb2t3978 j))) )))

(declare-fun t2tb3979 ((tuple21 (tuple21 d c) (tuple21 f d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 d c) (tuple21 f d)))) (sort
  (tuple2 (tuple2 d1 c1) (tuple2 f1 d1)) (t2tb3979 x))))

(declare-fun tb2t3979 (uni) (tuple21 (tuple21 d c) (tuple21 f d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 d c) (tuple21 f d))))
  (! (= (tb2t3979 (t2tb3979 i)) i) :pattern ((t2tb3979 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 d1 c1) (tuple2 f1 d1)) j)
     (= (t2tb3979 (tb2t3979 j)) j)) :pattern ((t2tb3979 (tb2t3979 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 d f))) (k (set (tuple21 c d))) (x d) (y c) (z f)
  (w d))
  (= (mem (tuple2 (tuple2 d1 c1) (tuple2 f1 d1))
  (Tuple2 (tuple2 d1 c1) (tuple2 f1 d1)
  (Tuple2 d1 c1 (t2tb694 x) (t2tb135 y))
  (Tuple2 f1 d1 (t2tb2954 z) (t2tb694 w)))
  (parallel_product d1 c1 f1 d1 (t2tb2938 h) (t2tb689 k)))
  (and (mem40 (tb2t2952 (Tuple2 d1 f1 (t2tb694 x) (t2tb2954 z))) h) (mem21
  (tb2t693 (Tuple2 c1 d1 (t2tb135 y) (t2tb694 w))) k)))))

(declare-fun t2tb3980 ((set (tuple21 (tuple21 d b) (tuple21 f e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 d b) (tuple21 f e))))) (sort
  (set1 (tuple2 (tuple2 d1 b1) (tuple2 f1 e1))) (t2tb3980 x))))

(declare-fun tb2t3980 (uni) (set (tuple21 (tuple21 d b) (tuple21 f e))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 d b) (tuple21 f e)))))
  (! (= (tb2t3980 (t2tb3980 i)) i) :pattern ((t2tb3980 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 d1 b1) (tuple2 f1 e1))) j)
     (= (t2tb3980 (tb2t3980 j)) j)) :pattern ((t2tb3980 (tb2t3980 j))) )))

(declare-fun t2tb3981 ((tuple21 (tuple21 d b) (tuple21 f e))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 d b) (tuple21 f e)))) (sort
  (tuple2 (tuple2 d1 b1) (tuple2 f1 e1)) (t2tb3981 x))))

(declare-fun tb2t3981 (uni) (tuple21 (tuple21 d b) (tuple21 f e)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 d b) (tuple21 f e))))
  (! (= (tb2t3981 (t2tb3981 i)) i) :pattern ((t2tb3981 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 d1 b1) (tuple2 f1 e1)) j)
     (= (t2tb3981 (tb2t3981 j)) j)) :pattern ((t2tb3981 (tb2t3981 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 d f))) (k (set (tuple21 b e))) (x d) (y b) (z f)
  (w e))
  (= (mem (tuple2 (tuple2 d1 b1) (tuple2 f1 e1))
  (Tuple2 (tuple2 d1 b1) (tuple2 f1 e1) (Tuple2 d1 b1 (t2tb694 x) (t2tb14 y))
  (Tuple2 f1 e1 (t2tb2954 z) (t2tb2955 w)))
  (parallel_product e1 b1 f1 d1 (t2tb2938 h) (t2tb2940 k)))
  (and (mem40 (tb2t2952 (Tuple2 d1 f1 (t2tb694 x) (t2tb2954 z))) h) (mem38
  (tb2t2953 (Tuple2 b1 e1 (t2tb14 y) (t2tb2955 w))) k)))))

(declare-fun t2tb3982 ((set (tuple21 (tuple21 d a) (tuple21 f e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 d a) (tuple21 f e))))) (sort
  (set1 (tuple2 (tuple2 d1 a1) (tuple2 f1 e1))) (t2tb3982 x))))

(declare-fun tb2t3982 (uni) (set (tuple21 (tuple21 d a) (tuple21 f e))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 d a) (tuple21 f e)))))
  (! (= (tb2t3982 (t2tb3982 i)) i) :pattern ((t2tb3982 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 d1 a1) (tuple2 f1 e1))) j)
     (= (t2tb3982 (tb2t3982 j)) j)) :pattern ((t2tb3982 (tb2t3982 j))) )))

(declare-fun t2tb3983 ((tuple21 (tuple21 d a) (tuple21 f e))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 d a) (tuple21 f e)))) (sort
  (tuple2 (tuple2 d1 a1) (tuple2 f1 e1)) (t2tb3983 x))))

(declare-fun tb2t3983 (uni) (tuple21 (tuple21 d a) (tuple21 f e)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 d a) (tuple21 f e))))
  (! (= (tb2t3983 (t2tb3983 i)) i) :pattern ((t2tb3983 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 d1 a1) (tuple2 f1 e1)) j)
     (= (t2tb3983 (tb2t3983 j)) j)) :pattern ((t2tb3983 (tb2t3983 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 d f))) (k (set (tuple21 a e))) (x d) (y a) (z f)
  (w e))
  (= (mem (tuple2 (tuple2 d1 a1) (tuple2 f1 e1))
  (Tuple2 (tuple2 d1 a1) (tuple2 f1 e1) (Tuple2 d1 a1 (t2tb694 x) (t2tb2 y))
  (Tuple2 f1 e1 (t2tb2954 z) (t2tb2955 w)))
  (parallel_product e1 a1 f1 d1 (t2tb2938 h) (t2tb2943 k)))
  (and (mem40 (tb2t2952 (Tuple2 d1 f1 (t2tb694 x) (t2tb2954 z))) h) (mem44
  (tb2t2949 (Tuple2 a1 e1 (t2tb2 y) (t2tb2955 w))) k)))))

(declare-fun t2tb3984 ((set (tuple21 (tuple21 d a) (tuple21 f b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 d a) (tuple21 f b))))) (sort
  (set1 (tuple2 (tuple2 d1 a1) (tuple2 f1 b1))) (t2tb3984 x))))

(declare-fun tb2t3984 (uni) (set (tuple21 (tuple21 d a) (tuple21 f b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 d a) (tuple21 f b)))))
  (! (= (tb2t3984 (t2tb3984 i)) i) :pattern ((t2tb3984 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 d1 a1) (tuple2 f1 b1))) j)
     (= (t2tb3984 (tb2t3984 j)) j)) :pattern ((t2tb3984 (tb2t3984 j))) )))

(declare-fun t2tb3985 ((tuple21 (tuple21 d a) (tuple21 f b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 d a) (tuple21 f b)))) (sort
  (tuple2 (tuple2 d1 a1) (tuple2 f1 b1)) (t2tb3985 x))))

(declare-fun tb2t3985 (uni) (tuple21 (tuple21 d a) (tuple21 f b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 d a) (tuple21 f b))))
  (! (= (tb2t3985 (t2tb3985 i)) i) :pattern ((t2tb3985 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 d1 a1) (tuple2 f1 b1)) j)
     (= (t2tb3985 (tb2t3985 j)) j)) :pattern ((t2tb3985 (tb2t3985 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 d f))) (k (set (tuple21 a b))) (x d) (y a) (z f)
  (w b))
  (= (mem (tuple2 (tuple2 d1 a1) (tuple2 f1 b1))
  (Tuple2 (tuple2 d1 a1) (tuple2 f1 b1) (Tuple2 d1 a1 (t2tb694 x) (t2tb2 y))
  (Tuple2 f1 b1 (t2tb2954 z) (t2tb14 w)))
  (parallel_product b1 a1 f1 d1 (t2tb2938 h) (t2tb11 k)))
  (and (mem40 (tb2t2952 (Tuple2 d1 f1 (t2tb694 x) (t2tb2954 z))) h) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 y) (t2tb14 w))) k)))))

;; mem_parallel_product
  (assert
  (forall ((c2 ty) (d2 ty))
  (forall ((h (set (tuple21 d f))) (k uni) (x d) (y uni) (z f) (w uni))
  (= (mem (tuple2 (tuple2 d1 c2) (tuple2 f1 d2))
  (Tuple2 (tuple2 d1 c2) (tuple2 f1 d2) (Tuple2 d1 c2 (t2tb694 x) y)
  (Tuple2 f1 d2 (t2tb2954 z) w))
  (parallel_product d2 c2 f1 d1 (t2tb2938 h) k))
  (and (mem40 (tb2t2952 (Tuple2 d1 f1 (t2tb694 x) (t2tb2954 z))) h) (mem
  (tuple2 c2 d2) (Tuple2 c2 d2 y w) k))))))

(declare-fun t2tb3986 ((tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  (tuple21 (tuple21 e f) (tuple21 e f)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  (tuple21 (tuple21 e f) (tuple21 e f))))) (sort
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))
  (tuple2 (tuple2 e1 f1) (tuple2 e1 f1))) (t2tb3986 x))))

(declare-fun tb2t3986 (uni) (tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  (tuple21 (tuple21 e f) (tuple21 e f))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  (tuple21 (tuple21 e f) (tuple21 e f)))))
  (! (= (tb2t3986 (t2tb3986 i)) i) :pattern ((t2tb3986 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))
     (tuple2 (tuple2 e1 f1) (tuple2 e1 f1))) j)
     (= (t2tb3986 (tb2t3986 j)) j)) :pattern ((t2tb3986 (tb2t3986 j))) )))

(declare-fun t2tb3987 ((set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  (tuple21 (tuple21 e f) (tuple21 e f))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  (tuple21 (tuple21 e f) (tuple21 e f)))))) (sort
  (set1
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))
  (tuple2 (tuple2 e1 f1) (tuple2 e1 f1)))) (t2tb3987 x))))

(declare-fun tb2t3987 (uni) (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b
  d)) (tuple21 (tuple21 e f) (tuple21 e f)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  (tuple21 (tuple21 e f) (tuple21 e f))))))
  (! (= (tb2t3987 (t2tb3987 i)) i) :pattern ((t2tb3987 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))
     (tuple2 (tuple2 e1 f1) (tuple2 e1 f1)))) j)
     (= (t2tb3987 (tb2t3987 j)) j)) :pattern ((t2tb3987 (tb2t3987 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 (tuple21 a c) (tuple21 e f))))
  (k (set (tuple21 (tuple21 b d) (tuple21 e f)))) (x (tuple21 a c))
  (y (tuple21 b d)) (z (tuple21 e f)) (w (tuple21 e f)))
  (= (mem
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))
  (tuple2 (tuple2 e1 f1) (tuple2 e1 f1)))
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))
  (tuple2 (tuple2 e1 f1) (tuple2 e1 f1))
  (Tuple2 (tuple2 a1 c1) (tuple2 b1 d1) (t2tb133 x) (t2tb692 y))
  (Tuple2 (tuple2 e1 f1) (tuple2 e1 f1) (t2tb3315 z) (t2tb3315 w)))
  (parallel_product (tuple2 e1 f1) (tuple2 b1 d1) (tuple2 e1 f1)
  (tuple2 a1 c1) (t2tb2945 h) (t2tb2944 k)))
  (and (mem42
  (tb2t2951 (Tuple2 (tuple2 a1 c1) (tuple2 e1 f1) (t2tb133 x) (t2tb3315 z)))
  h) (mem43
  (tb2t2950 (Tuple2 (tuple2 b1 d1) (tuple2 e1 f1) (t2tb692 y) (t2tb3315 w)))
  k)))))

(declare-fun t2tb3988 ((set (tuple21 (tuple21 (tuple21 a c) d)
  (tuple21 (tuple21 e f) f)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 a c) d) (tuple21 (tuple21 e f)
  f))))) (sort
  (set1 (tuple2 (tuple2 (tuple2 a1 c1) d1) (tuple2 (tuple2 e1 f1) f1)))
  (t2tb3988 x))))

(declare-fun tb2t3988 (uni) (set (tuple21 (tuple21 (tuple21 a c) d)
  (tuple21 (tuple21 e f) f))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 a c) d) (tuple21 (tuple21 e f)
  f))))) (! (= (tb2t3988 (t2tb3988 i)) i) :pattern ((t2tb3988 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 (tuple2 a1 c1) d1) (tuple2 (tuple2 e1 f1) f1))) j)
     (= (t2tb3988 (tb2t3988 j)) j)) :pattern ((t2tb3988 (tb2t3988 j))) )))

(declare-fun t2tb3989 ((tuple21 (tuple21 (tuple21 a c) d) (tuple21 (tuple21 e
  f) f))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 a c) d) (tuple21 (tuple21 e f) f))))
  (sort (tuple2 (tuple2 (tuple2 a1 c1) d1) (tuple2 (tuple2 e1 f1) f1))
  (t2tb3989 x))))

(declare-fun tb2t3989 (uni) (tuple21 (tuple21 (tuple21 a c) d)
  (tuple21 (tuple21 e f) f)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 a c) d) (tuple21 (tuple21 e f) f))))
  (! (= (tb2t3989 (t2tb3989 i)) i) :pattern ((t2tb3989 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 (tuple2 a1 c1) d1) (tuple2 (tuple2 e1 f1) f1))
     j) (= (t2tb3989 (tb2t3989 j)) j)) :pattern ((t2tb3989 (tb2t3989 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 (tuple21 a c) (tuple21 e f)))) (k (set (tuple21 d
  f))) (x (tuple21 a c)) (y d) (z (tuple21 e f)) (w f))
  (= (mem (tuple2 (tuple2 (tuple2 a1 c1) d1) (tuple2 (tuple2 e1 f1) f1))
  (Tuple2 (tuple2 (tuple2 a1 c1) d1) (tuple2 (tuple2 e1 f1) f1)
  (Tuple2 (tuple2 a1 c1) d1 (t2tb133 x) (t2tb694 y))
  (Tuple2 (tuple2 e1 f1) f1 (t2tb3315 z) (t2tb2954 w)))
  (parallel_product f1 d1 (tuple2 e1 f1) (tuple2 a1 c1) (t2tb2945 h)
  (t2tb2938 k)))
  (and (mem42
  (tb2t2951 (Tuple2 (tuple2 a1 c1) (tuple2 e1 f1) (t2tb133 x) (t2tb3315 z)))
  h) (mem40 (tb2t2952 (Tuple2 d1 f1 (t2tb694 y) (t2tb2954 w))) k)))))

(declare-fun t2tb3990 ((set (tuple21 (tuple21 (tuple21 a c) (tuple21 a c))
  (tuple21 (tuple21 e f) (tuple21 e f))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 a c) (tuple21 a c))
  (tuple21 (tuple21 e f) (tuple21 e f)))))) (sort
  (set1
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 a1 c1))
  (tuple2 (tuple2 e1 f1) (tuple2 e1 f1)))) (t2tb3990 x))))

(declare-fun tb2t3990 (uni) (set (tuple21 (tuple21 (tuple21 a c) (tuple21 a
  c)) (tuple21 (tuple21 e f) (tuple21 e f)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 a c) (tuple21 a c))
  (tuple21 (tuple21 e f) (tuple21 e f))))))
  (! (= (tb2t3990 (t2tb3990 i)) i) :pattern ((t2tb3990 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 a1 c1))
     (tuple2 (tuple2 e1 f1) (tuple2 e1 f1)))) j)
     (= (t2tb3990 (tb2t3990 j)) j)) :pattern ((t2tb3990 (tb2t3990 j))) )))

(declare-fun t2tb3991 ((tuple21 (tuple21 (tuple21 a c) (tuple21 a c))
  (tuple21 (tuple21 e f) (tuple21 e f)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 a c) (tuple21 a c))
  (tuple21 (tuple21 e f) (tuple21 e f))))) (sort
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 a1 c1))
  (tuple2 (tuple2 e1 f1) (tuple2 e1 f1))) (t2tb3991 x))))

(declare-fun tb2t3991 (uni) (tuple21 (tuple21 (tuple21 a c) (tuple21 a c))
  (tuple21 (tuple21 e f) (tuple21 e f))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 a c) (tuple21 a c))
  (tuple21 (tuple21 e f) (tuple21 e f)))))
  (! (= (tb2t3991 (t2tb3991 i)) i) :pattern ((t2tb3991 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 a1 c1))
     (tuple2 (tuple2 e1 f1) (tuple2 e1 f1))) j)
     (= (t2tb3991 (tb2t3991 j)) j)) :pattern ((t2tb3991 (tb2t3991 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 (tuple21 a c) (tuple21 e f))))
  (k (set (tuple21 (tuple21 a c) (tuple21 e f)))) (x (tuple21 a c))
  (y (tuple21 a c)) (z (tuple21 e f)) (w (tuple21 e f)))
  (= (mem
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 a1 c1))
  (tuple2 (tuple2 e1 f1) (tuple2 e1 f1)))
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 a1 c1))
  (tuple2 (tuple2 e1 f1) (tuple2 e1 f1))
  (Tuple2 (tuple2 a1 c1) (tuple2 a1 c1) (t2tb133 x) (t2tb133 y))
  (Tuple2 (tuple2 e1 f1) (tuple2 e1 f1) (t2tb3315 z) (t2tb3315 w)))
  (parallel_product (tuple2 e1 f1) (tuple2 a1 c1) (tuple2 e1 f1)
  (tuple2 a1 c1) (t2tb2945 h) (t2tb2945 k)))
  (and (mem42
  (tb2t2951 (Tuple2 (tuple2 a1 c1) (tuple2 e1 f1) (t2tb133 x) (t2tb3315 z)))
  h) (mem42
  (tb2t2951 (Tuple2 (tuple2 a1 c1) (tuple2 e1 f1) (t2tb133 y) (t2tb3315 w)))
  k)))))

(declare-fun t2tb3992 ((set (tuple21 (tuple21 (tuple21 a c) (tuple21 a c))
  (tuple21 (tuple21 e f) (tuple21 b d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 a c) (tuple21 a c))
  (tuple21 (tuple21 e f) (tuple21 b d)))))) (sort
  (set1
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 a1 c1))
  (tuple2 (tuple2 e1 f1) (tuple2 b1 d1)))) (t2tb3992 x))))

(declare-fun tb2t3992 (uni) (set (tuple21 (tuple21 (tuple21 a c) (tuple21 a
  c)) (tuple21 (tuple21 e f) (tuple21 b d)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 a c) (tuple21 a c))
  (tuple21 (tuple21 e f) (tuple21 b d))))))
  (! (= (tb2t3992 (t2tb3992 i)) i) :pattern ((t2tb3992 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 a1 c1))
     (tuple2 (tuple2 e1 f1) (tuple2 b1 d1)))) j)
     (= (t2tb3992 (tb2t3992 j)) j)) :pattern ((t2tb3992 (tb2t3992 j))) )))

(declare-fun t2tb3993 ((tuple21 (tuple21 (tuple21 a c) (tuple21 a c))
  (tuple21 (tuple21 e f) (tuple21 b d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 a c) (tuple21 a c))
  (tuple21 (tuple21 e f) (tuple21 b d))))) (sort
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 a1 c1))
  (tuple2 (tuple2 e1 f1) (tuple2 b1 d1))) (t2tb3993 x))))

(declare-fun tb2t3993 (uni) (tuple21 (tuple21 (tuple21 a c) (tuple21 a c))
  (tuple21 (tuple21 e f) (tuple21 b d))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 a c) (tuple21 a c))
  (tuple21 (tuple21 e f) (tuple21 b d)))))
  (! (= (tb2t3993 (t2tb3993 i)) i) :pattern ((t2tb3993 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 a1 c1))
     (tuple2 (tuple2 e1 f1) (tuple2 b1 d1))) j)
     (= (t2tb3993 (tb2t3993 j)) j)) :pattern ((t2tb3993 (tb2t3993 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 (tuple21 a c) (tuple21 e f))))
  (k (set (tuple21 (tuple21 a c) (tuple21 b d)))) (x (tuple21 a c))
  (y (tuple21 a c)) (z (tuple21 e f)) (w (tuple21 b d)))
  (= (mem
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 a1 c1))
  (tuple2 (tuple2 e1 f1) (tuple2 b1 d1)))
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 a1 c1))
  (tuple2 (tuple2 e1 f1) (tuple2 b1 d1))
  (Tuple2 (tuple2 a1 c1) (tuple2 a1 c1) (t2tb133 x) (t2tb133 y))
  (Tuple2 (tuple2 e1 f1) (tuple2 b1 d1) (t2tb3315 z) (t2tb692 w)))
  (parallel_product (tuple2 b1 d1) (tuple2 a1 c1) (tuple2 e1 f1)
  (tuple2 a1 c1) (t2tb2945 h) (t2tb686 k)))
  (and (mem42
  (tb2t2951 (Tuple2 (tuple2 a1 c1) (tuple2 e1 f1) (t2tb133 x) (t2tb3315 z)))
  h) (mem24
  (tb2t691 (Tuple2 (tuple2 a1 c1) (tuple2 b1 d1) (t2tb133 y) (t2tb692 w)))
  k)))))

(declare-fun t2tb163 ((tuple21 (tuple21 a c) c)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a c) c))) (sort (tuple2 (tuple2 a1 c1) c1)
  (t2tb163 x))))

(declare-fun tb2t163 (uni) (tuple21 (tuple21 a c) c))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a c) c)))
  (! (= (tb2t163 (t2tb163 i)) i) :pattern ((t2tb163 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 c1) c1) j) (= (t2tb163 (tb2t163 j)) j)) :pattern (
  (t2tb163 (tb2t163 j))) )))

(declare-fun t2tb3994 ((set (tuple21 (tuple21 (tuple21 a c) c)
  (tuple21 (tuple21 e f) f)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 a c) c) (tuple21 (tuple21 e f)
  f))))) (sort
  (set1 (tuple2 (tuple2 (tuple2 a1 c1) c1) (tuple2 (tuple2 e1 f1) f1)))
  (t2tb3994 x))))

(declare-fun tb2t3994 (uni) (set (tuple21 (tuple21 (tuple21 a c) c)
  (tuple21 (tuple21 e f) f))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 a c) c) (tuple21 (tuple21 e f)
  f))))) (! (= (tb2t3994 (t2tb3994 i)) i) :pattern ((t2tb3994 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 (tuple2 a1 c1) c1) (tuple2 (tuple2 e1 f1) f1))) j)
     (= (t2tb3994 (tb2t3994 j)) j)) :pattern ((t2tb3994 (tb2t3994 j))) )))

(declare-fun t2tb3995 ((tuple21 (tuple21 (tuple21 a c) c) (tuple21 (tuple21 e
  f) f))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 a c) c) (tuple21 (tuple21 e f) f))))
  (sort (tuple2 (tuple2 (tuple2 a1 c1) c1) (tuple2 (tuple2 e1 f1) f1))
  (t2tb3995 x))))

(declare-fun tb2t3995 (uni) (tuple21 (tuple21 (tuple21 a c) c)
  (tuple21 (tuple21 e f) f)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 a c) c) (tuple21 (tuple21 e f) f))))
  (! (= (tb2t3995 (t2tb3995 i)) i) :pattern ((t2tb3995 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 (tuple2 a1 c1) c1) (tuple2 (tuple2 e1 f1) f1))
     j) (= (t2tb3995 (tb2t3995 j)) j)) :pattern ((t2tb3995 (tb2t3995 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 (tuple21 a c) (tuple21 e f)))) (k (set (tuple21 c
  f))) (x (tuple21 a c)) (y c) (z (tuple21 e f)) (w f))
  (= (mem (tuple2 (tuple2 (tuple2 a1 c1) c1) (tuple2 (tuple2 e1 f1) f1))
  (Tuple2 (tuple2 (tuple2 a1 c1) c1) (tuple2 (tuple2 e1 f1) f1)
  (Tuple2 (tuple2 a1 c1) c1 (t2tb133 x) (t2tb135 y))
  (Tuple2 (tuple2 e1 f1) f1 (t2tb3315 z) (t2tb2954 w)))
  (parallel_product f1 c1 (tuple2 e1 f1) (tuple2 a1 c1) (t2tb2945 h)
  (t2tb2942 k)))
  (and (mem42
  (tb2t2951 (Tuple2 (tuple2 a1 c1) (tuple2 e1 f1) (t2tb133 x) (t2tb3315 z)))
  h) (mem45 (tb2t2948 (Tuple2 c1 f1 (t2tb135 y) (t2tb2954 w))) k)))))

(declare-fun t2tb3996 ((set (tuple21 (tuple21 (tuple21 a c) c)
  (tuple21 (tuple21 e f) d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 a c) c) (tuple21 (tuple21 e f)
  d))))) (sort
  (set1 (tuple2 (tuple2 (tuple2 a1 c1) c1) (tuple2 (tuple2 e1 f1) d1)))
  (t2tb3996 x))))

(declare-fun tb2t3996 (uni) (set (tuple21 (tuple21 (tuple21 a c) c)
  (tuple21 (tuple21 e f) d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 a c) c) (tuple21 (tuple21 e f)
  d))))) (! (= (tb2t3996 (t2tb3996 i)) i) :pattern ((t2tb3996 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 (tuple2 a1 c1) c1) (tuple2 (tuple2 e1 f1) d1))) j)
     (= (t2tb3996 (tb2t3996 j)) j)) :pattern ((t2tb3996 (tb2t3996 j))) )))

(declare-fun t2tb3997 ((tuple21 (tuple21 (tuple21 a c) c) (tuple21 (tuple21 e
  f) d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 a c) c) (tuple21 (tuple21 e f) d))))
  (sort (tuple2 (tuple2 (tuple2 a1 c1) c1) (tuple2 (tuple2 e1 f1) d1))
  (t2tb3997 x))))

(declare-fun tb2t3997 (uni) (tuple21 (tuple21 (tuple21 a c) c)
  (tuple21 (tuple21 e f) d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 a c) c) (tuple21 (tuple21 e f) d))))
  (! (= (tb2t3997 (t2tb3997 i)) i) :pattern ((t2tb3997 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 (tuple2 a1 c1) c1) (tuple2 (tuple2 e1 f1) d1))
     j) (= (t2tb3997 (tb2t3997 j)) j)) :pattern ((t2tb3997 (tb2t3997 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 (tuple21 a c) (tuple21 e f)))) (k (set (tuple21 c
  d))) (x (tuple21 a c)) (y c) (z (tuple21 e f)) (w d))
  (= (mem (tuple2 (tuple2 (tuple2 a1 c1) c1) (tuple2 (tuple2 e1 f1) d1))
  (Tuple2 (tuple2 (tuple2 a1 c1) c1) (tuple2 (tuple2 e1 f1) d1)
  (Tuple2 (tuple2 a1 c1) c1 (t2tb133 x) (t2tb135 y))
  (Tuple2 (tuple2 e1 f1) d1 (t2tb3315 z) (t2tb694 w)))
  (parallel_product d1 c1 (tuple2 e1 f1) (tuple2 a1 c1) (t2tb2945 h)
  (t2tb689 k)))
  (and (mem42
  (tb2t2951 (Tuple2 (tuple2 a1 c1) (tuple2 e1 f1) (t2tb133 x) (t2tb3315 z)))
  h) (mem21 (tb2t693 (Tuple2 c1 d1 (t2tb135 y) (t2tb694 w))) k)))))

(declare-fun t2tb3998 ((set (tuple21 (tuple21 (tuple21 a c) b)
  (tuple21 (tuple21 e f) e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 a c) b) (tuple21 (tuple21 e f)
  e))))) (sort
  (set1 (tuple2 (tuple2 (tuple2 a1 c1) b1) (tuple2 (tuple2 e1 f1) e1)))
  (t2tb3998 x))))

(declare-fun tb2t3998 (uni) (set (tuple21 (tuple21 (tuple21 a c) b)
  (tuple21 (tuple21 e f) e))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 a c) b) (tuple21 (tuple21 e f)
  e))))) (! (= (tb2t3998 (t2tb3998 i)) i) :pattern ((t2tb3998 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 (tuple2 a1 c1) b1) (tuple2 (tuple2 e1 f1) e1))) j)
     (= (t2tb3998 (tb2t3998 j)) j)) :pattern ((t2tb3998 (tb2t3998 j))) )))

(declare-fun t2tb3999 ((tuple21 (tuple21 (tuple21 a c) b) (tuple21 (tuple21 e
  f) e))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 a c) b) (tuple21 (tuple21 e f) e))))
  (sort (tuple2 (tuple2 (tuple2 a1 c1) b1) (tuple2 (tuple2 e1 f1) e1))
  (t2tb3999 x))))

(declare-fun tb2t3999 (uni) (tuple21 (tuple21 (tuple21 a c) b)
  (tuple21 (tuple21 e f) e)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 a c) b) (tuple21 (tuple21 e f) e))))
  (! (= (tb2t3999 (t2tb3999 i)) i) :pattern ((t2tb3999 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 (tuple2 a1 c1) b1) (tuple2 (tuple2 e1 f1) e1))
     j) (= (t2tb3999 (tb2t3999 j)) j)) :pattern ((t2tb3999 (tb2t3999 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 (tuple21 a c) (tuple21 e f)))) (k (set (tuple21 b
  e))) (x (tuple21 a c)) (y b) (z (tuple21 e f)) (w e))
  (= (mem (tuple2 (tuple2 (tuple2 a1 c1) b1) (tuple2 (tuple2 e1 f1) e1))
  (Tuple2 (tuple2 (tuple2 a1 c1) b1) (tuple2 (tuple2 e1 f1) e1)
  (Tuple2 (tuple2 a1 c1) b1 (t2tb133 x) (t2tb14 y))
  (Tuple2 (tuple2 e1 f1) e1 (t2tb3315 z) (t2tb2955 w)))
  (parallel_product e1 b1 (tuple2 e1 f1) (tuple2 a1 c1) (t2tb2945 h)
  (t2tb2940 k)))
  (and (mem42
  (tb2t2951 (Tuple2 (tuple2 a1 c1) (tuple2 e1 f1) (t2tb133 x) (t2tb3315 z)))
  h) (mem38 (tb2t2953 (Tuple2 b1 e1 (t2tb14 y) (t2tb2955 w))) k)))))

(declare-fun t2tb4000 ((tuple21 (tuple21 (tuple21 a c) a) (tuple21 (tuple21 e
  f) e))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 a c) a) (tuple21 (tuple21 e f) e))))
  (sort (tuple2 (tuple2 (tuple2 a1 c1) a1) (tuple2 (tuple2 e1 f1) e1))
  (t2tb4000 x))))

(declare-fun tb2t4000 (uni) (tuple21 (tuple21 (tuple21 a c) a)
  (tuple21 (tuple21 e f) e)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 a c) a) (tuple21 (tuple21 e f) e))))
  (! (= (tb2t4000 (t2tb4000 i)) i) :pattern ((t2tb4000 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 (tuple2 a1 c1) a1) (tuple2 (tuple2 e1 f1) e1))
     j) (= (t2tb4000 (tb2t4000 j)) j)) :pattern ((t2tb4000 (tb2t4000 j))) )))

(declare-fun t2tb171 ((tuple21 (tuple21 a c) a)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a c) a))) (sort (tuple2 (tuple2 a1 c1) a1)
  (t2tb171 x))))

(declare-fun tb2t171 (uni) (tuple21 (tuple21 a c) a))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a c) a)))
  (! (= (tb2t171 (t2tb171 i)) i) :pattern ((t2tb171 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 c1) a1) j) (= (t2tb171 (tb2t171 j)) j)) :pattern (
  (t2tb171 (tb2t171 j))) )))

(declare-fun t2tb4001 ((set (tuple21 (tuple21 (tuple21 a c) a)
  (tuple21 (tuple21 e f) e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 a c) a) (tuple21 (tuple21 e f)
  e))))) (sort
  (set1 (tuple2 (tuple2 (tuple2 a1 c1) a1) (tuple2 (tuple2 e1 f1) e1)))
  (t2tb4001 x))))

(declare-fun tb2t4001 (uni) (set (tuple21 (tuple21 (tuple21 a c) a)
  (tuple21 (tuple21 e f) e))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 a c) a) (tuple21 (tuple21 e f)
  e))))) (! (= (tb2t4001 (t2tb4001 i)) i) :pattern ((t2tb4001 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 (tuple2 a1 c1) a1) (tuple2 (tuple2 e1 f1) e1))) j)
     (= (t2tb4001 (tb2t4001 j)) j)) :pattern ((t2tb4001 (tb2t4001 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 (tuple21 a c) (tuple21 e f)))) (k (set (tuple21 a
  e))) (x (tuple21 a c)) (y a) (z (tuple21 e f)) (w e))
  (= (mem (tuple2 (tuple2 (tuple2 a1 c1) a1) (tuple2 (tuple2 e1 f1) e1))
  (Tuple2 (tuple2 (tuple2 a1 c1) a1) (tuple2 (tuple2 e1 f1) e1)
  (Tuple2 (tuple2 a1 c1) a1 (t2tb133 x) (t2tb2 y))
  (Tuple2 (tuple2 e1 f1) e1 (t2tb3315 z) (t2tb2955 w)))
  (parallel_product e1 a1 (tuple2 e1 f1) (tuple2 a1 c1) (t2tb2945 h)
  (t2tb2943 k)))
  (and (mem42
  (tb2t2951 (Tuple2 (tuple2 a1 c1) (tuple2 e1 f1) (t2tb133 x) (t2tb3315 z)))
  h) (mem44 (tb2t2949 (Tuple2 a1 e1 (t2tb2 y) (t2tb2955 w))) k)))))

(declare-fun t2tb4002 ((set (tuple21 (tuple21 (tuple21 a c) a)
  (tuple21 (tuple21 e f) b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 a c) a) (tuple21 (tuple21 e f)
  b))))) (sort
  (set1 (tuple2 (tuple2 (tuple2 a1 c1) a1) (tuple2 (tuple2 e1 f1) b1)))
  (t2tb4002 x))))

(declare-fun tb2t4002 (uni) (set (tuple21 (tuple21 (tuple21 a c) a)
  (tuple21 (tuple21 e f) b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 a c) a) (tuple21 (tuple21 e f)
  b))))) (! (= (tb2t4002 (t2tb4002 i)) i) :pattern ((t2tb4002 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 (tuple2 a1 c1) a1) (tuple2 (tuple2 e1 f1) b1))) j)
     (= (t2tb4002 (tb2t4002 j)) j)) :pattern ((t2tb4002 (tb2t4002 j))) )))

(declare-fun t2tb4003 ((tuple21 (tuple21 (tuple21 a c) a) (tuple21 (tuple21 e
  f) b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 a c) a) (tuple21 (tuple21 e f) b))))
  (sort (tuple2 (tuple2 (tuple2 a1 c1) a1) (tuple2 (tuple2 e1 f1) b1))
  (t2tb4003 x))))

(declare-fun tb2t4003 (uni) (tuple21 (tuple21 (tuple21 a c) a)
  (tuple21 (tuple21 e f) b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 a c) a) (tuple21 (tuple21 e f) b))))
  (! (= (tb2t4003 (t2tb4003 i)) i) :pattern ((t2tb4003 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 (tuple2 a1 c1) a1) (tuple2 (tuple2 e1 f1) b1))
     j) (= (t2tb4003 (tb2t4003 j)) j)) :pattern ((t2tb4003 (tb2t4003 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 (tuple21 a c) (tuple21 e f)))) (k (set (tuple21 a
  b))) (x (tuple21 a c)) (y a) (z (tuple21 e f)) (w b))
  (= (mem (tuple2 (tuple2 (tuple2 a1 c1) a1) (tuple2 (tuple2 e1 f1) b1))
  (Tuple2 (tuple2 (tuple2 a1 c1) a1) (tuple2 (tuple2 e1 f1) b1)
  (Tuple2 (tuple2 a1 c1) a1 (t2tb133 x) (t2tb2 y))
  (Tuple2 (tuple2 e1 f1) b1 (t2tb3315 z) (t2tb14 w)))
  (parallel_product b1 a1 (tuple2 e1 f1) (tuple2 a1 c1) (t2tb2945 h)
  (t2tb11 k)))
  (and (mem42
  (tb2t2951 (Tuple2 (tuple2 a1 c1) (tuple2 e1 f1) (t2tb133 x) (t2tb3315 z)))
  h) (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 y) (t2tb14 w))) k)))))

;; mem_parallel_product
  (assert
  (forall ((c2 ty) (d2 ty))
  (forall ((h (set (tuple21 (tuple21 a c) (tuple21 e f)))) (k uni)
  (x (tuple21 a c)) (y uni) (z (tuple21 e f)) (w uni))
  (= (mem (tuple2 (tuple2 (tuple2 a1 c1) c2) (tuple2 (tuple2 e1 f1) d2))
  (Tuple2 (tuple2 (tuple2 a1 c1) c2) (tuple2 (tuple2 e1 f1) d2)
  (Tuple2 (tuple2 a1 c1) c2 (t2tb133 x) y)
  (Tuple2 (tuple2 e1 f1) d2 (t2tb3315 z) w))
  (parallel_product d2 c2 (tuple2 e1 f1) (tuple2 a1 c1) (t2tb2945 h) k))
  (and (mem42
  (tb2t2951 (Tuple2 (tuple2 a1 c1) (tuple2 e1 f1) (t2tb133 x) (t2tb3315 z)))
  h) (mem (tuple2 c2 d2) (Tuple2 c2 d2 y w) k))))))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 (tuple21 a c) (tuple21 b d))))
  (k (set (tuple21 (tuple21 b d) (tuple21 e f)))) (x (tuple21 a c))
  (y (tuple21 b d)) (z (tuple21 b d)) (w (tuple21 e f)))
  (= (mem
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))
  (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)))
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))
  (tuple2 (tuple2 b1 d1) (tuple2 e1 f1))
  (Tuple2 (tuple2 a1 c1) (tuple2 b1 d1) (t2tb133 x) (t2tb692 y))
  (Tuple2 (tuple2 b1 d1) (tuple2 e1 f1) (t2tb692 z) (t2tb3315 w)))
  (parallel_product (tuple2 e1 f1) (tuple2 b1 d1) (tuple2 b1 d1)
  (tuple2 a1 c1) (t2tb686 h) (t2tb2944 k)))
  (and (mem24
  (tb2t691 (Tuple2 (tuple2 a1 c1) (tuple2 b1 d1) (t2tb133 x) (t2tb692 z))) h)
  (mem43
  (tb2t2950 (Tuple2 (tuple2 b1 d1) (tuple2 e1 f1) (t2tb692 y) (t2tb3315 w)))
  k)))))

(declare-fun t2tb4004 ((set (tuple21 (tuple21 (tuple21 a c) d)
  (tuple21 (tuple21 b d) f)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 a c) d) (tuple21 (tuple21 b d)
  f))))) (sort
  (set1 (tuple2 (tuple2 (tuple2 a1 c1) d1) (tuple2 (tuple2 b1 d1) f1)))
  (t2tb4004 x))))

(declare-fun tb2t4004 (uni) (set (tuple21 (tuple21 (tuple21 a c) d)
  (tuple21 (tuple21 b d) f))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 a c) d) (tuple21 (tuple21 b d)
  f))))) (! (= (tb2t4004 (t2tb4004 i)) i) :pattern ((t2tb4004 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 (tuple2 a1 c1) d1) (tuple2 (tuple2 b1 d1) f1))) j)
     (= (t2tb4004 (tb2t4004 j)) j)) :pattern ((t2tb4004 (tb2t4004 j))) )))

(declare-fun t2tb4005 ((tuple21 (tuple21 (tuple21 a c) d) (tuple21 (tuple21 b
  d) f))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 a c) d) (tuple21 (tuple21 b d) f))))
  (sort (tuple2 (tuple2 (tuple2 a1 c1) d1) (tuple2 (tuple2 b1 d1) f1))
  (t2tb4005 x))))

(declare-fun tb2t4005 (uni) (tuple21 (tuple21 (tuple21 a c) d)
  (tuple21 (tuple21 b d) f)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 a c) d) (tuple21 (tuple21 b d) f))))
  (! (= (tb2t4005 (t2tb4005 i)) i) :pattern ((t2tb4005 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 (tuple2 a1 c1) d1) (tuple2 (tuple2 b1 d1) f1))
     j) (= (t2tb4005 (tb2t4005 j)) j)) :pattern ((t2tb4005 (tb2t4005 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 (tuple21 a c) (tuple21 b d)))) (k (set (tuple21 d
  f))) (x (tuple21 a c)) (y d) (z (tuple21 b d)) (w f))
  (= (mem (tuple2 (tuple2 (tuple2 a1 c1) d1) (tuple2 (tuple2 b1 d1) f1))
  (Tuple2 (tuple2 (tuple2 a1 c1) d1) (tuple2 (tuple2 b1 d1) f1)
  (Tuple2 (tuple2 a1 c1) d1 (t2tb133 x) (t2tb694 y))
  (Tuple2 (tuple2 b1 d1) f1 (t2tb692 z) (t2tb2954 w)))
  (parallel_product f1 d1 (tuple2 b1 d1) (tuple2 a1 c1) (t2tb686 h)
  (t2tb2938 k)))
  (and (mem24
  (tb2t691 (Tuple2 (tuple2 a1 c1) (tuple2 b1 d1) (t2tb133 x) (t2tb692 z))) h)
  (mem40 (tb2t2952 (Tuple2 d1 f1 (t2tb694 y) (t2tb2954 w))) k)))))

(declare-fun t2tb4006 ((set (tuple21 (tuple21 (tuple21 a c) (tuple21 a c))
  (tuple21 (tuple21 b d) (tuple21 e f))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 a c) (tuple21 a c))
  (tuple21 (tuple21 b d) (tuple21 e f)))))) (sort
  (set1
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 a1 c1))
  (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)))) (t2tb4006 x))))

(declare-fun tb2t4006 (uni) (set (tuple21 (tuple21 (tuple21 a c) (tuple21 a
  c)) (tuple21 (tuple21 b d) (tuple21 e f)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 a c) (tuple21 a c))
  (tuple21 (tuple21 b d) (tuple21 e f))))))
  (! (= (tb2t4006 (t2tb4006 i)) i) :pattern ((t2tb4006 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 a1 c1))
     (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)))) j)
     (= (t2tb4006 (tb2t4006 j)) j)) :pattern ((t2tb4006 (tb2t4006 j))) )))

(declare-fun t2tb4007 ((tuple21 (tuple21 (tuple21 a c) (tuple21 a c))
  (tuple21 (tuple21 b d) (tuple21 e f)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 a c) (tuple21 a c))
  (tuple21 (tuple21 b d) (tuple21 e f))))) (sort
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 a1 c1))
  (tuple2 (tuple2 b1 d1) (tuple2 e1 f1))) (t2tb4007 x))))

(declare-fun tb2t4007 (uni) (tuple21 (tuple21 (tuple21 a c) (tuple21 a c))
  (tuple21 (tuple21 b d) (tuple21 e f))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 a c) (tuple21 a c))
  (tuple21 (tuple21 b d) (tuple21 e f)))))
  (! (= (tb2t4007 (t2tb4007 i)) i) :pattern ((t2tb4007 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 a1 c1))
     (tuple2 (tuple2 b1 d1) (tuple2 e1 f1))) j)
     (= (t2tb4007 (tb2t4007 j)) j)) :pattern ((t2tb4007 (tb2t4007 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 (tuple21 a c) (tuple21 b d))))
  (k (set (tuple21 (tuple21 a c) (tuple21 e f)))) (x (tuple21 a c))
  (y (tuple21 a c)) (z (tuple21 b d)) (w (tuple21 e f)))
  (= (mem
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 a1 c1))
  (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)))
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 a1 c1))
  (tuple2 (tuple2 b1 d1) (tuple2 e1 f1))
  (Tuple2 (tuple2 a1 c1) (tuple2 a1 c1) (t2tb133 x) (t2tb133 y))
  (Tuple2 (tuple2 b1 d1) (tuple2 e1 f1) (t2tb692 z) (t2tb3315 w)))
  (parallel_product (tuple2 e1 f1) (tuple2 a1 c1) (tuple2 b1 d1)
  (tuple2 a1 c1) (t2tb686 h) (t2tb2945 k)))
  (and (mem24
  (tb2t691 (Tuple2 (tuple2 a1 c1) (tuple2 b1 d1) (t2tb133 x) (t2tb692 z))) h)
  (mem42
  (tb2t2951 (Tuple2 (tuple2 a1 c1) (tuple2 e1 f1) (t2tb133 y) (t2tb3315 w)))
  k)))))

(declare-fun t2tb4008 ((set (tuple21 (tuple21 (tuple21 a c) (tuple21 a c))
  (tuple21 (tuple21 b d) (tuple21 b d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 a c) (tuple21 a c))
  (tuple21 (tuple21 b d) (tuple21 b d)))))) (sort
  (set1
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 a1 c1))
  (tuple2 (tuple2 b1 d1) (tuple2 b1 d1)))) (t2tb4008 x))))

(declare-fun tb2t4008 (uni) (set (tuple21 (tuple21 (tuple21 a c) (tuple21 a
  c)) (tuple21 (tuple21 b d) (tuple21 b d)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 a c) (tuple21 a c))
  (tuple21 (tuple21 b d) (tuple21 b d))))))
  (! (= (tb2t4008 (t2tb4008 i)) i) :pattern ((t2tb4008 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 a1 c1))
     (tuple2 (tuple2 b1 d1) (tuple2 b1 d1)))) j)
     (= (t2tb4008 (tb2t4008 j)) j)) :pattern ((t2tb4008 (tb2t4008 j))) )))

(declare-fun t2tb4009 ((tuple21 (tuple21 (tuple21 a c) (tuple21 a c))
  (tuple21 (tuple21 b d) (tuple21 b d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 a c) (tuple21 a c))
  (tuple21 (tuple21 b d) (tuple21 b d))))) (sort
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 a1 c1))
  (tuple2 (tuple2 b1 d1) (tuple2 b1 d1))) (t2tb4009 x))))

(declare-fun tb2t4009 (uni) (tuple21 (tuple21 (tuple21 a c) (tuple21 a c))
  (tuple21 (tuple21 b d) (tuple21 b d))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 a c) (tuple21 a c))
  (tuple21 (tuple21 b d) (tuple21 b d)))))
  (! (= (tb2t4009 (t2tb4009 i)) i) :pattern ((t2tb4009 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 a1 c1))
     (tuple2 (tuple2 b1 d1) (tuple2 b1 d1))) j)
     (= (t2tb4009 (tb2t4009 j)) j)) :pattern ((t2tb4009 (tb2t4009 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 (tuple21 a c) (tuple21 b d))))
  (k (set (tuple21 (tuple21 a c) (tuple21 b d)))) (x (tuple21 a c))
  (y (tuple21 a c)) (z (tuple21 b d)) (w (tuple21 b d)))
  (= (mem
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 a1 c1))
  (tuple2 (tuple2 b1 d1) (tuple2 b1 d1)))
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 a1 c1))
  (tuple2 (tuple2 b1 d1) (tuple2 b1 d1))
  (Tuple2 (tuple2 a1 c1) (tuple2 a1 c1) (t2tb133 x) (t2tb133 y))
  (Tuple2 (tuple2 b1 d1) (tuple2 b1 d1) (t2tb692 z) (t2tb692 w)))
  (parallel_product (tuple2 b1 d1) (tuple2 a1 c1) (tuple2 b1 d1)
  (tuple2 a1 c1) (t2tb686 h) (t2tb686 k)))
  (and (mem24
  (tb2t691 (Tuple2 (tuple2 a1 c1) (tuple2 b1 d1) (t2tb133 x) (t2tb692 z))) h)
  (mem24
  (tb2t691 (Tuple2 (tuple2 a1 c1) (tuple2 b1 d1) (t2tb133 y) (t2tb692 w)))
  k)))))

(declare-fun t2tb4010 ((set (tuple21 (tuple21 (tuple21 a c) c)
  (tuple21 (tuple21 b d) f)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 a c) c) (tuple21 (tuple21 b d)
  f))))) (sort
  (set1 (tuple2 (tuple2 (tuple2 a1 c1) c1) (tuple2 (tuple2 b1 d1) f1)))
  (t2tb4010 x))))

(declare-fun tb2t4010 (uni) (set (tuple21 (tuple21 (tuple21 a c) c)
  (tuple21 (tuple21 b d) f))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 a c) c) (tuple21 (tuple21 b d)
  f))))) (! (= (tb2t4010 (t2tb4010 i)) i) :pattern ((t2tb4010 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 (tuple2 a1 c1) c1) (tuple2 (tuple2 b1 d1) f1))) j)
     (= (t2tb4010 (tb2t4010 j)) j)) :pattern ((t2tb4010 (tb2t4010 j))) )))

(declare-fun t2tb4011 ((tuple21 (tuple21 (tuple21 a c) c) (tuple21 (tuple21 b
  d) f))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 a c) c) (tuple21 (tuple21 b d) f))))
  (sort (tuple2 (tuple2 (tuple2 a1 c1) c1) (tuple2 (tuple2 b1 d1) f1))
  (t2tb4011 x))))

(declare-fun tb2t4011 (uni) (tuple21 (tuple21 (tuple21 a c) c)
  (tuple21 (tuple21 b d) f)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 a c) c) (tuple21 (tuple21 b d) f))))
  (! (= (tb2t4011 (t2tb4011 i)) i) :pattern ((t2tb4011 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 (tuple2 a1 c1) c1) (tuple2 (tuple2 b1 d1) f1))
     j) (= (t2tb4011 (tb2t4011 j)) j)) :pattern ((t2tb4011 (tb2t4011 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 (tuple21 a c) (tuple21 b d)))) (k (set (tuple21 c
  f))) (x (tuple21 a c)) (y c) (z (tuple21 b d)) (w f))
  (= (mem (tuple2 (tuple2 (tuple2 a1 c1) c1) (tuple2 (tuple2 b1 d1) f1))
  (Tuple2 (tuple2 (tuple2 a1 c1) c1) (tuple2 (tuple2 b1 d1) f1)
  (Tuple2 (tuple2 a1 c1) c1 (t2tb133 x) (t2tb135 y))
  (Tuple2 (tuple2 b1 d1) f1 (t2tb692 z) (t2tb2954 w)))
  (parallel_product f1 c1 (tuple2 b1 d1) (tuple2 a1 c1) (t2tb686 h)
  (t2tb2942 k)))
  (and (mem24
  (tb2t691 (Tuple2 (tuple2 a1 c1) (tuple2 b1 d1) (t2tb133 x) (t2tb692 z))) h)
  (mem45 (tb2t2948 (Tuple2 c1 f1 (t2tb135 y) (t2tb2954 w))) k)))))

(declare-fun t2tb4012 ((set (tuple21 (tuple21 (tuple21 a c) c)
  (tuple21 (tuple21 b d) d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 a c) c) (tuple21 (tuple21 b d)
  d))))) (sort
  (set1 (tuple2 (tuple2 (tuple2 a1 c1) c1) (tuple2 (tuple2 b1 d1) d1)))
  (t2tb4012 x))))

(declare-fun tb2t4012 (uni) (set (tuple21 (tuple21 (tuple21 a c) c)
  (tuple21 (tuple21 b d) d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 a c) c) (tuple21 (tuple21 b d)
  d))))) (! (= (tb2t4012 (t2tb4012 i)) i) :pattern ((t2tb4012 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 (tuple2 a1 c1) c1) (tuple2 (tuple2 b1 d1) d1))) j)
     (= (t2tb4012 (tb2t4012 j)) j)) :pattern ((t2tb4012 (tb2t4012 j))) )))

(declare-fun t2tb4013 ((tuple21 (tuple21 (tuple21 a c) c) (tuple21 (tuple21 b
  d) d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 a c) c) (tuple21 (tuple21 b d) d))))
  (sort (tuple2 (tuple2 (tuple2 a1 c1) c1) (tuple2 (tuple2 b1 d1) d1))
  (t2tb4013 x))))

(declare-fun tb2t4013 (uni) (tuple21 (tuple21 (tuple21 a c) c)
  (tuple21 (tuple21 b d) d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 a c) c) (tuple21 (tuple21 b d) d))))
  (! (= (tb2t4013 (t2tb4013 i)) i) :pattern ((t2tb4013 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 (tuple2 a1 c1) c1) (tuple2 (tuple2 b1 d1) d1))
     j) (= (t2tb4013 (tb2t4013 j)) j)) :pattern ((t2tb4013 (tb2t4013 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 (tuple21 a c) (tuple21 b d)))) (k (set (tuple21 c
  d))) (x (tuple21 a c)) (y c) (z (tuple21 b d)) (w d))
  (= (mem (tuple2 (tuple2 (tuple2 a1 c1) c1) (tuple2 (tuple2 b1 d1) d1))
  (Tuple2 (tuple2 (tuple2 a1 c1) c1) (tuple2 (tuple2 b1 d1) d1)
  (Tuple2 (tuple2 a1 c1) c1 (t2tb133 x) (t2tb135 y))
  (Tuple2 (tuple2 b1 d1) d1 (t2tb692 z) (t2tb694 w)))
  (parallel_product d1 c1 (tuple2 b1 d1) (tuple2 a1 c1) (t2tb686 h)
  (t2tb689 k)))
  (and (mem24
  (tb2t691 (Tuple2 (tuple2 a1 c1) (tuple2 b1 d1) (t2tb133 x) (t2tb692 z))) h)
  (mem21 (tb2t693 (Tuple2 c1 d1 (t2tb135 y) (t2tb694 w))) k)))))

(declare-fun t2tb4014 ((set (tuple21 (tuple21 (tuple21 a c) b)
  (tuple21 (tuple21 b d) e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 a c) b) (tuple21 (tuple21 b d)
  e))))) (sort
  (set1 (tuple2 (tuple2 (tuple2 a1 c1) b1) (tuple2 (tuple2 b1 d1) e1)))
  (t2tb4014 x))))

(declare-fun tb2t4014 (uni) (set (tuple21 (tuple21 (tuple21 a c) b)
  (tuple21 (tuple21 b d) e))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 a c) b) (tuple21 (tuple21 b d)
  e))))) (! (= (tb2t4014 (t2tb4014 i)) i) :pattern ((t2tb4014 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 (tuple2 a1 c1) b1) (tuple2 (tuple2 b1 d1) e1))) j)
     (= (t2tb4014 (tb2t4014 j)) j)) :pattern ((t2tb4014 (tb2t4014 j))) )))

(declare-fun t2tb4015 ((tuple21 (tuple21 (tuple21 a c) b) (tuple21 (tuple21 b
  d) e))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 a c) b) (tuple21 (tuple21 b d) e))))
  (sort (tuple2 (tuple2 (tuple2 a1 c1) b1) (tuple2 (tuple2 b1 d1) e1))
  (t2tb4015 x))))

(declare-fun tb2t4015 (uni) (tuple21 (tuple21 (tuple21 a c) b)
  (tuple21 (tuple21 b d) e)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 a c) b) (tuple21 (tuple21 b d) e))))
  (! (= (tb2t4015 (t2tb4015 i)) i) :pattern ((t2tb4015 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 (tuple2 a1 c1) b1) (tuple2 (tuple2 b1 d1) e1))
     j) (= (t2tb4015 (tb2t4015 j)) j)) :pattern ((t2tb4015 (tb2t4015 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 (tuple21 a c) (tuple21 b d)))) (k (set (tuple21 b
  e))) (x (tuple21 a c)) (y b) (z (tuple21 b d)) (w e))
  (= (mem (tuple2 (tuple2 (tuple2 a1 c1) b1) (tuple2 (tuple2 b1 d1) e1))
  (Tuple2 (tuple2 (tuple2 a1 c1) b1) (tuple2 (tuple2 b1 d1) e1)
  (Tuple2 (tuple2 a1 c1) b1 (t2tb133 x) (t2tb14 y))
  (Tuple2 (tuple2 b1 d1) e1 (t2tb692 z) (t2tb2955 w)))
  (parallel_product e1 b1 (tuple2 b1 d1) (tuple2 a1 c1) (t2tb686 h)
  (t2tb2940 k)))
  (and (mem24
  (tb2t691 (Tuple2 (tuple2 a1 c1) (tuple2 b1 d1) (t2tb133 x) (t2tb692 z))) h)
  (mem38 (tb2t2953 (Tuple2 b1 e1 (t2tb14 y) (t2tb2955 w))) k)))))

(declare-fun t2tb4016 ((set (tuple21 (tuple21 (tuple21 a c) a)
  (tuple21 (tuple21 b d) e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 a c) a) (tuple21 (tuple21 b d)
  e))))) (sort
  (set1 (tuple2 (tuple2 (tuple2 a1 c1) a1) (tuple2 (tuple2 b1 d1) e1)))
  (t2tb4016 x))))

(declare-fun tb2t4016 (uni) (set (tuple21 (tuple21 (tuple21 a c) a)
  (tuple21 (tuple21 b d) e))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 a c) a) (tuple21 (tuple21 b d)
  e))))) (! (= (tb2t4016 (t2tb4016 i)) i) :pattern ((t2tb4016 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 (tuple2 a1 c1) a1) (tuple2 (tuple2 b1 d1) e1))) j)
     (= (t2tb4016 (tb2t4016 j)) j)) :pattern ((t2tb4016 (tb2t4016 j))) )))

(declare-fun t2tb4017 ((tuple21 (tuple21 (tuple21 a c) a) (tuple21 (tuple21 b
  d) e))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 a c) a) (tuple21 (tuple21 b d) e))))
  (sort (tuple2 (tuple2 (tuple2 a1 c1) a1) (tuple2 (tuple2 b1 d1) e1))
  (t2tb4017 x))))

(declare-fun tb2t4017 (uni) (tuple21 (tuple21 (tuple21 a c) a)
  (tuple21 (tuple21 b d) e)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 a c) a) (tuple21 (tuple21 b d) e))))
  (! (= (tb2t4017 (t2tb4017 i)) i) :pattern ((t2tb4017 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 (tuple2 a1 c1) a1) (tuple2 (tuple2 b1 d1) e1))
     j) (= (t2tb4017 (tb2t4017 j)) j)) :pattern ((t2tb4017 (tb2t4017 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 (tuple21 a c) (tuple21 b d)))) (k (set (tuple21 a
  e))) (x (tuple21 a c)) (y a) (z (tuple21 b d)) (w e))
  (= (mem (tuple2 (tuple2 (tuple2 a1 c1) a1) (tuple2 (tuple2 b1 d1) e1))
  (Tuple2 (tuple2 (tuple2 a1 c1) a1) (tuple2 (tuple2 b1 d1) e1)
  (Tuple2 (tuple2 a1 c1) a1 (t2tb133 x) (t2tb2 y))
  (Tuple2 (tuple2 b1 d1) e1 (t2tb692 z) (t2tb2955 w)))
  (parallel_product e1 a1 (tuple2 b1 d1) (tuple2 a1 c1) (t2tb686 h)
  (t2tb2943 k)))
  (and (mem24
  (tb2t691 (Tuple2 (tuple2 a1 c1) (tuple2 b1 d1) (t2tb133 x) (t2tb692 z))) h)
  (mem44 (tb2t2949 (Tuple2 a1 e1 (t2tb2 y) (t2tb2955 w))) k)))))

(declare-fun t2tb4018 ((set (tuple21 (tuple21 (tuple21 a c) a)
  (tuple21 (tuple21 b d) b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 a c) a) (tuple21 (tuple21 b d)
  b))))) (sort
  (set1 (tuple2 (tuple2 (tuple2 a1 c1) a1) (tuple2 (tuple2 b1 d1) b1)))
  (t2tb4018 x))))

(declare-fun tb2t4018 (uni) (set (tuple21 (tuple21 (tuple21 a c) a)
  (tuple21 (tuple21 b d) b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 a c) a) (tuple21 (tuple21 b d)
  b))))) (! (= (tb2t4018 (t2tb4018 i)) i) :pattern ((t2tb4018 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 (tuple2 a1 c1) a1) (tuple2 (tuple2 b1 d1) b1))) j)
     (= (t2tb4018 (tb2t4018 j)) j)) :pattern ((t2tb4018 (tb2t4018 j))) )))

(declare-fun t2tb4019 ((tuple21 (tuple21 (tuple21 a c) a) (tuple21 (tuple21 b
  d) b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 a c) a) (tuple21 (tuple21 b d) b))))
  (sort (tuple2 (tuple2 (tuple2 a1 c1) a1) (tuple2 (tuple2 b1 d1) b1))
  (t2tb4019 x))))

(declare-fun tb2t4019 (uni) (tuple21 (tuple21 (tuple21 a c) a)
  (tuple21 (tuple21 b d) b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 a c) a) (tuple21 (tuple21 b d) b))))
  (! (= (tb2t4019 (t2tb4019 i)) i) :pattern ((t2tb4019 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 (tuple2 a1 c1) a1) (tuple2 (tuple2 b1 d1) b1))
     j) (= (t2tb4019 (tb2t4019 j)) j)) :pattern ((t2tb4019 (tb2t4019 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 (tuple21 a c) (tuple21 b d)))) (k (set (tuple21 a
  b))) (x (tuple21 a c)) (y a) (z (tuple21 b d)) (w b))
  (= (mem (tuple2 (tuple2 (tuple2 a1 c1) a1) (tuple2 (tuple2 b1 d1) b1))
  (Tuple2 (tuple2 (tuple2 a1 c1) a1) (tuple2 (tuple2 b1 d1) b1)
  (Tuple2 (tuple2 a1 c1) a1 (t2tb133 x) (t2tb2 y))
  (Tuple2 (tuple2 b1 d1) b1 (t2tb692 z) (t2tb14 w)))
  (parallel_product b1 a1 (tuple2 b1 d1) (tuple2 a1 c1) (t2tb686 h)
  (t2tb11 k)))
  (and (mem24
  (tb2t691 (Tuple2 (tuple2 a1 c1) (tuple2 b1 d1) (t2tb133 x) (t2tb692 z))) h)
  (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 y) (t2tb14 w))) k)))))

;; mem_parallel_product
  (assert
  (forall ((c2 ty) (d2 ty))
  (forall ((h (set (tuple21 (tuple21 a c) (tuple21 b d)))) (k uni)
  (x (tuple21 a c)) (y uni) (z (tuple21 b d)) (w uni))
  (= (mem (tuple2 (tuple2 (tuple2 a1 c1) c2) (tuple2 (tuple2 b1 d1) d2))
  (Tuple2 (tuple2 (tuple2 a1 c1) c2) (tuple2 (tuple2 b1 d1) d2)
  (Tuple2 (tuple2 a1 c1) c2 (t2tb133 x) y)
  (Tuple2 (tuple2 b1 d1) d2 (t2tb692 z) w))
  (parallel_product d2 c2 (tuple2 b1 d1) (tuple2 a1 c1) (t2tb686 h) k))
  (and (mem24
  (tb2t691 (Tuple2 (tuple2 a1 c1) (tuple2 b1 d1) (t2tb133 x) (t2tb692 z))) h)
  (mem (tuple2 c2 d2) (Tuple2 c2 d2 y w) k))))))

(declare-fun t2tb1782 ((tuple21 c (tuple21 b d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 c (tuple21 b d)))) (sort (tuple2 c1 (tuple2 b1 d1))
  (t2tb1782 x))))

(declare-fun tb2t1782 (uni) (tuple21 c (tuple21 b d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 c (tuple21 b d))))
  (! (= (tb2t1782 (t2tb1782 i)) i) :pattern ((t2tb1782 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 c1 (tuple2 b1 d1)) j) (= (t2tb1782 (tb2t1782 j)) j)) :pattern (
  (t2tb1782 (tb2t1782 j))) )))

(declare-fun t2tb4020 ((set (tuple21 (tuple21 c (tuple21 b d)) (tuple21 f
  (tuple21 e f))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 c (tuple21 b d)) (tuple21 f (tuple21 e
  f)))))) (sort
  (set1 (tuple2 (tuple2 c1 (tuple2 b1 d1)) (tuple2 f1 (tuple2 e1 f1))))
  (t2tb4020 x))))

(declare-fun tb2t4020 (uni) (set (tuple21 (tuple21 c (tuple21 b d))
  (tuple21 f (tuple21 e f)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 c (tuple21 b d)) (tuple21 f (tuple21 e
  f)))))) (! (= (tb2t4020 (t2tb4020 i)) i) :pattern ((t2tb4020 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 c1 (tuple2 b1 d1)) (tuple2 f1 (tuple2 e1 f1)))) j)
     (= (t2tb4020 (tb2t4020 j)) j)) :pattern ((t2tb4020 (tb2t4020 j))) )))

(declare-fun t2tb4021 ((tuple21 (tuple21 c (tuple21 b d)) (tuple21 f
  (tuple21 e f)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 c (tuple21 b d)) (tuple21 f (tuple21 e f)))))
  (sort (tuple2 (tuple2 c1 (tuple2 b1 d1)) (tuple2 f1 (tuple2 e1 f1)))
  (t2tb4021 x))))

(declare-fun tb2t4021 (uni) (tuple21 (tuple21 c (tuple21 b d)) (tuple21 f
  (tuple21 e f))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 c (tuple21 b d)) (tuple21 f (tuple21 e f)))))
  (! (= (tb2t4021 (t2tb4021 i)) i) :pattern ((t2tb4021 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 c1 (tuple2 b1 d1)) (tuple2 f1 (tuple2 e1 f1)))
     j) (= (t2tb4021 (tb2t4021 j)) j)) :pattern ((t2tb4021 (tb2t4021 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 c f))) (k (set (tuple21 (tuple21 b d) (tuple21 e
  f)))) (x c) (y (tuple21 b d)) (z f) (w (tuple21 e f)))
  (= (mem (tuple2 (tuple2 c1 (tuple2 b1 d1)) (tuple2 f1 (tuple2 e1 f1)))
  (Tuple2 (tuple2 c1 (tuple2 b1 d1)) (tuple2 f1 (tuple2 e1 f1))
  (Tuple2 c1 (tuple2 b1 d1) (t2tb135 x) (t2tb692 y))
  (Tuple2 f1 (tuple2 e1 f1) (t2tb2954 z) (t2tb3315 w)))
  (parallel_product (tuple2 e1 f1) (tuple2 b1 d1) f1 c1 (t2tb2942 h)
  (t2tb2944 k)))
  (and (mem45 (tb2t2948 (Tuple2 c1 f1 (t2tb135 x) (t2tb2954 z))) h) (mem43
  (tb2t2950 (Tuple2 (tuple2 b1 d1) (tuple2 e1 f1) (t2tb692 y) (t2tb3315 w)))
  k)))))

(declare-fun t2tb4022 ((set (tuple21 (tuple21 c d) (tuple21 f f)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 c d) (tuple21 f f))))) (sort
  (set1 (tuple2 (tuple2 c1 d1) (tuple2 f1 f1))) (t2tb4022 x))))

(declare-fun tb2t4022 (uni) (set (tuple21 (tuple21 c d) (tuple21 f f))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 c d) (tuple21 f f)))))
  (! (= (tb2t4022 (t2tb4022 i)) i) :pattern ((t2tb4022 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 c1 d1) (tuple2 f1 f1))) j)
     (= (t2tb4022 (tb2t4022 j)) j)) :pattern ((t2tb4022 (tb2t4022 j))) )))

(declare-fun t2tb4023 ((tuple21 (tuple21 c d) (tuple21 f f))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 c d) (tuple21 f f)))) (sort
  (tuple2 (tuple2 c1 d1) (tuple2 f1 f1)) (t2tb4023 x))))

(declare-fun tb2t4023 (uni) (tuple21 (tuple21 c d) (tuple21 f f)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 c d) (tuple21 f f))))
  (! (= (tb2t4023 (t2tb4023 i)) i) :pattern ((t2tb4023 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 c1 d1) (tuple2 f1 f1)) j)
     (= (t2tb4023 (tb2t4023 j)) j)) :pattern ((t2tb4023 (tb2t4023 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 c f))) (k (set (tuple21 d f))) (x c) (y d) (z f)
  (w f))
  (= (mem (tuple2 (tuple2 c1 d1) (tuple2 f1 f1))
  (Tuple2 (tuple2 c1 d1) (tuple2 f1 f1)
  (Tuple2 c1 d1 (t2tb135 x) (t2tb694 y))
  (Tuple2 f1 f1 (t2tb2954 z) (t2tb2954 w)))
  (parallel_product f1 d1 f1 c1 (t2tb2942 h) (t2tb2938 k)))
  (and (mem45 (tb2t2948 (Tuple2 c1 f1 (t2tb135 x) (t2tb2954 z))) h) (mem40
  (tb2t2952 (Tuple2 d1 f1 (t2tb694 y) (t2tb2954 w))) k)))))

(declare-fun t2tb4024 ((tuple21 (tuple21 c (tuple21 a c)) (tuple21 f
  (tuple21 e f)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 c (tuple21 a c)) (tuple21 f (tuple21 e f)))))
  (sort (tuple2 (tuple2 c1 (tuple2 a1 c1)) (tuple2 f1 (tuple2 e1 f1)))
  (t2tb4024 x))))

(declare-fun tb2t4024 (uni) (tuple21 (tuple21 c (tuple21 a c)) (tuple21 f
  (tuple21 e f))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 c (tuple21 a c)) (tuple21 f (tuple21 e f)))))
  (! (= (tb2t4024 (t2tb4024 i)) i) :pattern ((t2tb4024 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 c1 (tuple2 a1 c1)) (tuple2 f1 (tuple2 e1 f1)))
     j) (= (t2tb4024 (tb2t4024 j)) j)) :pattern ((t2tb4024 (tb2t4024 j))) )))

(declare-fun t2tb211 ((tuple21 c (tuple21 a c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 c (tuple21 a c)))) (sort (tuple2 c1 (tuple2 a1 c1))
  (t2tb211 x))))

(declare-fun tb2t211 (uni) (tuple21 c (tuple21 a c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 c (tuple21 a c))))
  (! (= (tb2t211 (t2tb211 i)) i) :pattern ((t2tb211 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 c1 (tuple2 a1 c1)) j) (= (t2tb211 (tb2t211 j)) j)) :pattern (
  (t2tb211 (tb2t211 j))) )))

(declare-fun t2tb4025 ((set (tuple21 (tuple21 c (tuple21 a c)) (tuple21 f
  (tuple21 e f))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 c (tuple21 a c)) (tuple21 f (tuple21 e
  f)))))) (sort
  (set1 (tuple2 (tuple2 c1 (tuple2 a1 c1)) (tuple2 f1 (tuple2 e1 f1))))
  (t2tb4025 x))))

(declare-fun tb2t4025 (uni) (set (tuple21 (tuple21 c (tuple21 a c))
  (tuple21 f (tuple21 e f)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 c (tuple21 a c)) (tuple21 f (tuple21 e
  f)))))) (! (= (tb2t4025 (t2tb4025 i)) i) :pattern ((t2tb4025 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 c1 (tuple2 a1 c1)) (tuple2 f1 (tuple2 e1 f1)))) j)
     (= (t2tb4025 (tb2t4025 j)) j)) :pattern ((t2tb4025 (tb2t4025 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 c f))) (k (set (tuple21 (tuple21 a c) (tuple21 e
  f)))) (x c) (y (tuple21 a c)) (z f) (w (tuple21 e f)))
  (= (mem (tuple2 (tuple2 c1 (tuple2 a1 c1)) (tuple2 f1 (tuple2 e1 f1)))
  (Tuple2 (tuple2 c1 (tuple2 a1 c1)) (tuple2 f1 (tuple2 e1 f1))
  (Tuple2 c1 (tuple2 a1 c1) (t2tb135 x) (t2tb133 y))
  (Tuple2 f1 (tuple2 e1 f1) (t2tb2954 z) (t2tb3315 w)))
  (parallel_product (tuple2 e1 f1) (tuple2 a1 c1) f1 c1 (t2tb2942 h)
  (t2tb2945 k)))
  (and (mem45 (tb2t2948 (Tuple2 c1 f1 (t2tb135 x) (t2tb2954 z))) h) (mem42
  (tb2t2951 (Tuple2 (tuple2 a1 c1) (tuple2 e1 f1) (t2tb133 y) (t2tb3315 w)))
  k)))))

(declare-fun t2tb4026 ((set (tuple21 (tuple21 c (tuple21 a c)) (tuple21 f
  (tuple21 b d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 c (tuple21 a c)) (tuple21 f (tuple21 b
  d)))))) (sort
  (set1 (tuple2 (tuple2 c1 (tuple2 a1 c1)) (tuple2 f1 (tuple2 b1 d1))))
  (t2tb4026 x))))

(declare-fun tb2t4026 (uni) (set (tuple21 (tuple21 c (tuple21 a c))
  (tuple21 f (tuple21 b d)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 c (tuple21 a c)) (tuple21 f (tuple21 b
  d)))))) (! (= (tb2t4026 (t2tb4026 i)) i) :pattern ((t2tb4026 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 c1 (tuple2 a1 c1)) (tuple2 f1 (tuple2 b1 d1)))) j)
     (= (t2tb4026 (tb2t4026 j)) j)) :pattern ((t2tb4026 (tb2t4026 j))) )))

(declare-fun t2tb4027 ((tuple21 (tuple21 c (tuple21 a c)) (tuple21 f
  (tuple21 b d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 c (tuple21 a c)) (tuple21 f (tuple21 b d)))))
  (sort (tuple2 (tuple2 c1 (tuple2 a1 c1)) (tuple2 f1 (tuple2 b1 d1)))
  (t2tb4027 x))))

(declare-fun tb2t4027 (uni) (tuple21 (tuple21 c (tuple21 a c)) (tuple21 f
  (tuple21 b d))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 c (tuple21 a c)) (tuple21 f (tuple21 b d)))))
  (! (= (tb2t4027 (t2tb4027 i)) i) :pattern ((t2tb4027 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 c1 (tuple2 a1 c1)) (tuple2 f1 (tuple2 b1 d1)))
     j) (= (t2tb4027 (tb2t4027 j)) j)) :pattern ((t2tb4027 (tb2t4027 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 c f))) (k (set (tuple21 (tuple21 a c) (tuple21 b
  d)))) (x c) (y (tuple21 a c)) (z f) (w (tuple21 b d)))
  (= (mem (tuple2 (tuple2 c1 (tuple2 a1 c1)) (tuple2 f1 (tuple2 b1 d1)))
  (Tuple2 (tuple2 c1 (tuple2 a1 c1)) (tuple2 f1 (tuple2 b1 d1))
  (Tuple2 c1 (tuple2 a1 c1) (t2tb135 x) (t2tb133 y))
  (Tuple2 f1 (tuple2 b1 d1) (t2tb2954 z) (t2tb692 w)))
  (parallel_product (tuple2 b1 d1) (tuple2 a1 c1) f1 c1 (t2tb2942 h)
  (t2tb686 k)))
  (and (mem45 (tb2t2948 (Tuple2 c1 f1 (t2tb135 x) (t2tb2954 z))) h) (mem24
  (tb2t691 (Tuple2 (tuple2 a1 c1) (tuple2 b1 d1) (t2tb133 y) (t2tb692 w)))
  k)))))

(declare-fun t2tb4028 ((set (tuple21 (tuple21 c c) (tuple21 f f)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 c c) (tuple21 f f))))) (sort
  (set1 (tuple2 (tuple2 c1 c1) (tuple2 f1 f1))) (t2tb4028 x))))

(declare-fun tb2t4028 (uni) (set (tuple21 (tuple21 c c) (tuple21 f f))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 c c) (tuple21 f f)))))
  (! (= (tb2t4028 (t2tb4028 i)) i) :pattern ((t2tb4028 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 c1 c1) (tuple2 f1 f1))) j)
     (= (t2tb4028 (tb2t4028 j)) j)) :pattern ((t2tb4028 (tb2t4028 j))) )))

(declare-fun t2tb4029 ((tuple21 (tuple21 c c) (tuple21 f f))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 c c) (tuple21 f f)))) (sort
  (tuple2 (tuple2 c1 c1) (tuple2 f1 f1)) (t2tb4029 x))))

(declare-fun tb2t4029 (uni) (tuple21 (tuple21 c c) (tuple21 f f)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 c c) (tuple21 f f))))
  (! (= (tb2t4029 (t2tb4029 i)) i) :pattern ((t2tb4029 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 c1 c1) (tuple2 f1 f1)) j)
     (= (t2tb4029 (tb2t4029 j)) j)) :pattern ((t2tb4029 (tb2t4029 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 c f))) (k (set (tuple21 c f))) (x c) (y c) (z f)
  (w f))
  (= (mem (tuple2 (tuple2 c1 c1) (tuple2 f1 f1))
  (Tuple2 (tuple2 c1 c1) (tuple2 f1 f1)
  (Tuple2 c1 c1 (t2tb135 x) (t2tb135 y))
  (Tuple2 f1 f1 (t2tb2954 z) (t2tb2954 w)))
  (parallel_product f1 c1 f1 c1 (t2tb2942 h) (t2tb2942 k)))
  (and (mem45 (tb2t2948 (Tuple2 c1 f1 (t2tb135 x) (t2tb2954 z))) h) (mem45
  (tb2t2948 (Tuple2 c1 f1 (t2tb135 y) (t2tb2954 w))) k)))))

(declare-fun t2tb4030 ((set (tuple21 (tuple21 c c) (tuple21 f d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 c c) (tuple21 f d))))) (sort
  (set1 (tuple2 (tuple2 c1 c1) (tuple2 f1 d1))) (t2tb4030 x))))

(declare-fun tb2t4030 (uni) (set (tuple21 (tuple21 c c) (tuple21 f d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 c c) (tuple21 f d)))))
  (! (= (tb2t4030 (t2tb4030 i)) i) :pattern ((t2tb4030 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 c1 c1) (tuple2 f1 d1))) j)
     (= (t2tb4030 (tb2t4030 j)) j)) :pattern ((t2tb4030 (tb2t4030 j))) )))

(declare-fun t2tb4031 ((tuple21 (tuple21 c c) (tuple21 f d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 c c) (tuple21 f d)))) (sort
  (tuple2 (tuple2 c1 c1) (tuple2 f1 d1)) (t2tb4031 x))))

(declare-fun tb2t4031 (uni) (tuple21 (tuple21 c c) (tuple21 f d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 c c) (tuple21 f d))))
  (! (= (tb2t4031 (t2tb4031 i)) i) :pattern ((t2tb4031 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 c1 c1) (tuple2 f1 d1)) j)
     (= (t2tb4031 (tb2t4031 j)) j)) :pattern ((t2tb4031 (tb2t4031 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 c f))) (k (set (tuple21 c d))) (x c) (y c) (z f)
  (w d))
  (= (mem (tuple2 (tuple2 c1 c1) (tuple2 f1 d1))
  (Tuple2 (tuple2 c1 c1) (tuple2 f1 d1)
  (Tuple2 c1 c1 (t2tb135 x) (t2tb135 y))
  (Tuple2 f1 d1 (t2tb2954 z) (t2tb694 w)))
  (parallel_product d1 c1 f1 c1 (t2tb2942 h) (t2tb689 k)))
  (and (mem45 (tb2t2948 (Tuple2 c1 f1 (t2tb135 x) (t2tb2954 z))) h) (mem21
  (tb2t693 (Tuple2 c1 d1 (t2tb135 y) (t2tb694 w))) k)))))

(declare-fun t2tb4032 ((set (tuple21 (tuple21 c b) (tuple21 f e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 c b) (tuple21 f e))))) (sort
  (set1 (tuple2 (tuple2 c1 b1) (tuple2 f1 e1))) (t2tb4032 x))))

(declare-fun tb2t4032 (uni) (set (tuple21 (tuple21 c b) (tuple21 f e))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 c b) (tuple21 f e)))))
  (! (= (tb2t4032 (t2tb4032 i)) i) :pattern ((t2tb4032 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 c1 b1) (tuple2 f1 e1))) j)
     (= (t2tb4032 (tb2t4032 j)) j)) :pattern ((t2tb4032 (tb2t4032 j))) )))

(declare-fun t2tb4033 ((tuple21 (tuple21 c b) (tuple21 f e))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 c b) (tuple21 f e)))) (sort
  (tuple2 (tuple2 c1 b1) (tuple2 f1 e1)) (t2tb4033 x))))

(declare-fun tb2t4033 (uni) (tuple21 (tuple21 c b) (tuple21 f e)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 c b) (tuple21 f e))))
  (! (= (tb2t4033 (t2tb4033 i)) i) :pattern ((t2tb4033 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 c1 b1) (tuple2 f1 e1)) j)
     (= (t2tb4033 (tb2t4033 j)) j)) :pattern ((t2tb4033 (tb2t4033 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 c f))) (k (set (tuple21 b e))) (x c) (y b) (z f)
  (w e))
  (= (mem (tuple2 (tuple2 c1 b1) (tuple2 f1 e1))
  (Tuple2 (tuple2 c1 b1) (tuple2 f1 e1) (Tuple2 c1 b1 (t2tb135 x) (t2tb14 y))
  (Tuple2 f1 e1 (t2tb2954 z) (t2tb2955 w)))
  (parallel_product e1 b1 f1 c1 (t2tb2942 h) (t2tb2940 k)))
  (and (mem45 (tb2t2948 (Tuple2 c1 f1 (t2tb135 x) (t2tb2954 z))) h) (mem38
  (tb2t2953 (Tuple2 b1 e1 (t2tb14 y) (t2tb2955 w))) k)))))

(declare-fun t2tb4034 ((set (tuple21 (tuple21 c a) (tuple21 f e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 c a) (tuple21 f e))))) (sort
  (set1 (tuple2 (tuple2 c1 a1) (tuple2 f1 e1))) (t2tb4034 x))))

(declare-fun tb2t4034 (uni) (set (tuple21 (tuple21 c a) (tuple21 f e))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 c a) (tuple21 f e)))))
  (! (= (tb2t4034 (t2tb4034 i)) i) :pattern ((t2tb4034 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 c1 a1) (tuple2 f1 e1))) j)
     (= (t2tb4034 (tb2t4034 j)) j)) :pattern ((t2tb4034 (tb2t4034 j))) )))

(declare-fun t2tb4035 ((tuple21 (tuple21 c a) (tuple21 f e))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 c a) (tuple21 f e)))) (sort
  (tuple2 (tuple2 c1 a1) (tuple2 f1 e1)) (t2tb4035 x))))

(declare-fun tb2t4035 (uni) (tuple21 (tuple21 c a) (tuple21 f e)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 c a) (tuple21 f e))))
  (! (= (tb2t4035 (t2tb4035 i)) i) :pattern ((t2tb4035 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 c1 a1) (tuple2 f1 e1)) j)
     (= (t2tb4035 (tb2t4035 j)) j)) :pattern ((t2tb4035 (tb2t4035 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 c f))) (k (set (tuple21 a e))) (x c) (y a) (z f)
  (w e))
  (= (mem (tuple2 (tuple2 c1 a1) (tuple2 f1 e1))
  (Tuple2 (tuple2 c1 a1) (tuple2 f1 e1) (Tuple2 c1 a1 (t2tb135 x) (t2tb2 y))
  (Tuple2 f1 e1 (t2tb2954 z) (t2tb2955 w)))
  (parallel_product e1 a1 f1 c1 (t2tb2942 h) (t2tb2943 k)))
  (and (mem45 (tb2t2948 (Tuple2 c1 f1 (t2tb135 x) (t2tb2954 z))) h) (mem44
  (tb2t2949 (Tuple2 a1 e1 (t2tb2 y) (t2tb2955 w))) k)))))

(declare-fun t2tb4036 ((set (tuple21 (tuple21 c a) (tuple21 f b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 c a) (tuple21 f b))))) (sort
  (set1 (tuple2 (tuple2 c1 a1) (tuple2 f1 b1))) (t2tb4036 x))))

(declare-fun tb2t4036 (uni) (set (tuple21 (tuple21 c a) (tuple21 f b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 c a) (tuple21 f b)))))
  (! (= (tb2t4036 (t2tb4036 i)) i) :pattern ((t2tb4036 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 c1 a1) (tuple2 f1 b1))) j)
     (= (t2tb4036 (tb2t4036 j)) j)) :pattern ((t2tb4036 (tb2t4036 j))) )))

(declare-fun t2tb4037 ((tuple21 (tuple21 c a) (tuple21 f b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 c a) (tuple21 f b)))) (sort
  (tuple2 (tuple2 c1 a1) (tuple2 f1 b1)) (t2tb4037 x))))

(declare-fun tb2t4037 (uni) (tuple21 (tuple21 c a) (tuple21 f b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 c a) (tuple21 f b))))
  (! (= (tb2t4037 (t2tb4037 i)) i) :pattern ((t2tb4037 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 c1 a1) (tuple2 f1 b1)) j)
     (= (t2tb4037 (tb2t4037 j)) j)) :pattern ((t2tb4037 (tb2t4037 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 c f))) (k (set (tuple21 a b))) (x c) (y a) (z f)
  (w b))
  (= (mem (tuple2 (tuple2 c1 a1) (tuple2 f1 b1))
  (Tuple2 (tuple2 c1 a1) (tuple2 f1 b1) (Tuple2 c1 a1 (t2tb135 x) (t2tb2 y))
  (Tuple2 f1 b1 (t2tb2954 z) (t2tb14 w)))
  (parallel_product b1 a1 f1 c1 (t2tb2942 h) (t2tb11 k)))
  (and (mem45 (tb2t2948 (Tuple2 c1 f1 (t2tb135 x) (t2tb2954 z))) h) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 y) (t2tb14 w))) k)))))

;; mem_parallel_product
  (assert
  (forall ((c2 ty) (d2 ty))
  (forall ((h (set (tuple21 c f))) (k uni) (x c) (y uni) (z f) (w uni))
  (= (mem (tuple2 (tuple2 c1 c2) (tuple2 f1 d2))
  (Tuple2 (tuple2 c1 c2) (tuple2 f1 d2) (Tuple2 c1 c2 (t2tb135 x) y)
  (Tuple2 f1 d2 (t2tb2954 z) w))
  (parallel_product d2 c2 f1 c1 (t2tb2942 h) k))
  (and (mem45 (tb2t2948 (Tuple2 c1 f1 (t2tb135 x) (t2tb2954 z))) h) (mem
  (tuple2 c2 d2) (Tuple2 c2 d2 y w) k))))))

(declare-fun t2tb4038 ((set (tuple21 (tuple21 c (tuple21 b d)) (tuple21 d
  (tuple21 e f))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 c (tuple21 b d)) (tuple21 d (tuple21 e
  f)))))) (sort
  (set1 (tuple2 (tuple2 c1 (tuple2 b1 d1)) (tuple2 d1 (tuple2 e1 f1))))
  (t2tb4038 x))))

(declare-fun tb2t4038 (uni) (set (tuple21 (tuple21 c (tuple21 b d))
  (tuple21 d (tuple21 e f)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 c (tuple21 b d)) (tuple21 d (tuple21 e
  f)))))) (! (= (tb2t4038 (t2tb4038 i)) i) :pattern ((t2tb4038 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 c1 (tuple2 b1 d1)) (tuple2 d1 (tuple2 e1 f1)))) j)
     (= (t2tb4038 (tb2t4038 j)) j)) :pattern ((t2tb4038 (tb2t4038 j))) )))

(declare-fun t2tb4039 ((tuple21 (tuple21 c (tuple21 b d)) (tuple21 d
  (tuple21 e f)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 c (tuple21 b d)) (tuple21 d (tuple21 e f)))))
  (sort (tuple2 (tuple2 c1 (tuple2 b1 d1)) (tuple2 d1 (tuple2 e1 f1)))
  (t2tb4039 x))))

(declare-fun tb2t4039 (uni) (tuple21 (tuple21 c (tuple21 b d)) (tuple21 d
  (tuple21 e f))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 c (tuple21 b d)) (tuple21 d (tuple21 e f)))))
  (! (= (tb2t4039 (t2tb4039 i)) i) :pattern ((t2tb4039 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 c1 (tuple2 b1 d1)) (tuple2 d1 (tuple2 e1 f1)))
     j) (= (t2tb4039 (tb2t4039 j)) j)) :pattern ((t2tb4039 (tb2t4039 j))) )))

(declare-fun t2tb4040 ((tuple21 d (tuple21 e f))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 d (tuple21 e f)))) (sort (tuple2 d1 (tuple2 e1 f1))
  (t2tb4040 x))))

(declare-fun tb2t4040 (uni) (tuple21 d (tuple21 e f)))

;; BridgeL
  (assert
  (forall ((i (tuple21 d (tuple21 e f))))
  (! (= (tb2t4040 (t2tb4040 i)) i) :pattern ((t2tb4040 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 d1 (tuple2 e1 f1)) j) (= (t2tb4040 (tb2t4040 j)) j)) :pattern (
  (t2tb4040 (tb2t4040 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 c d))) (k (set (tuple21 (tuple21 b d) (tuple21 e
  f)))) (x c) (y (tuple21 b d)) (z d) (w (tuple21 e f)))
  (= (mem (tuple2 (tuple2 c1 (tuple2 b1 d1)) (tuple2 d1 (tuple2 e1 f1)))
  (Tuple2 (tuple2 c1 (tuple2 b1 d1)) (tuple2 d1 (tuple2 e1 f1))
  (Tuple2 c1 (tuple2 b1 d1) (t2tb135 x) (t2tb692 y))
  (Tuple2 d1 (tuple2 e1 f1) (t2tb694 z) (t2tb3315 w)))
  (parallel_product (tuple2 e1 f1) (tuple2 b1 d1) d1 c1 (t2tb689 h)
  (t2tb2944 k)))
  (and (mem21 (tb2t693 (Tuple2 c1 d1 (t2tb135 x) (t2tb694 z))) h) (mem43
  (tb2t2950 (Tuple2 (tuple2 b1 d1) (tuple2 e1 f1) (t2tb692 y) (t2tb3315 w)))
  k)))))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 c d))) (k (set (tuple21 d f))) (x c) (y d) (z d)
  (w f))
  (= (mem (tuple2 (tuple2 c1 d1) (tuple2 d1 f1))
  (Tuple2 (tuple2 c1 d1) (tuple2 d1 f1)
  (Tuple2 c1 d1 (t2tb135 x) (t2tb694 y))
  (Tuple2 d1 f1 (t2tb694 z) (t2tb2954 w)))
  (parallel_product f1 d1 d1 c1 (t2tb689 h) (t2tb2938 k)))
  (and (mem21 (tb2t693 (Tuple2 c1 d1 (t2tb135 x) (t2tb694 z))) h) (mem40
  (tb2t2952 (Tuple2 d1 f1 (t2tb694 y) (t2tb2954 w))) k)))))

(declare-fun t2tb4041 ((set (tuple21 (tuple21 c (tuple21 a c)) (tuple21 d
  (tuple21 e f))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 c (tuple21 a c)) (tuple21 d (tuple21 e
  f)))))) (sort
  (set1 (tuple2 (tuple2 c1 (tuple2 a1 c1)) (tuple2 d1 (tuple2 e1 f1))))
  (t2tb4041 x))))

(declare-fun tb2t4041 (uni) (set (tuple21 (tuple21 c (tuple21 a c))
  (tuple21 d (tuple21 e f)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 c (tuple21 a c)) (tuple21 d (tuple21 e
  f)))))) (! (= (tb2t4041 (t2tb4041 i)) i) :pattern ((t2tb4041 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 c1 (tuple2 a1 c1)) (tuple2 d1 (tuple2 e1 f1)))) j)
     (= (t2tb4041 (tb2t4041 j)) j)) :pattern ((t2tb4041 (tb2t4041 j))) )))

(declare-fun t2tb4042 ((tuple21 (tuple21 c (tuple21 a c)) (tuple21 d
  (tuple21 e f)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 c (tuple21 a c)) (tuple21 d (tuple21 e f)))))
  (sort (tuple2 (tuple2 c1 (tuple2 a1 c1)) (tuple2 d1 (tuple2 e1 f1)))
  (t2tb4042 x))))

(declare-fun tb2t4042 (uni) (tuple21 (tuple21 c (tuple21 a c)) (tuple21 d
  (tuple21 e f))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 c (tuple21 a c)) (tuple21 d (tuple21 e f)))))
  (! (= (tb2t4042 (t2tb4042 i)) i) :pattern ((t2tb4042 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 c1 (tuple2 a1 c1)) (tuple2 d1 (tuple2 e1 f1)))
     j) (= (t2tb4042 (tb2t4042 j)) j)) :pattern ((t2tb4042 (tb2t4042 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 c d))) (k (set (tuple21 (tuple21 a c) (tuple21 e
  f)))) (x c) (y (tuple21 a c)) (z d) (w (tuple21 e f)))
  (= (mem (tuple2 (tuple2 c1 (tuple2 a1 c1)) (tuple2 d1 (tuple2 e1 f1)))
  (Tuple2 (tuple2 c1 (tuple2 a1 c1)) (tuple2 d1 (tuple2 e1 f1))
  (Tuple2 c1 (tuple2 a1 c1) (t2tb135 x) (t2tb133 y))
  (Tuple2 d1 (tuple2 e1 f1) (t2tb694 z) (t2tb3315 w)))
  (parallel_product (tuple2 e1 f1) (tuple2 a1 c1) d1 c1 (t2tb689 h)
  (t2tb2945 k)))
  (and (mem21 (tb2t693 (Tuple2 c1 d1 (t2tb135 x) (t2tb694 z))) h) (mem42
  (tb2t2951 (Tuple2 (tuple2 a1 c1) (tuple2 e1 f1) (t2tb133 y) (t2tb3315 w)))
  k)))))

(declare-fun t2tb4043 ((set (tuple21 (tuple21 c (tuple21 a c)) (tuple21 d
  (tuple21 b d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 c (tuple21 a c)) (tuple21 d (tuple21 b
  d)))))) (sort
  (set1 (tuple2 (tuple2 c1 (tuple2 a1 c1)) (tuple2 d1 (tuple2 b1 d1))))
  (t2tb4043 x))))

(declare-fun tb2t4043 (uni) (set (tuple21 (tuple21 c (tuple21 a c))
  (tuple21 d (tuple21 b d)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 c (tuple21 a c)) (tuple21 d (tuple21 b
  d)))))) (! (= (tb2t4043 (t2tb4043 i)) i) :pattern ((t2tb4043 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 c1 (tuple2 a1 c1)) (tuple2 d1 (tuple2 b1 d1)))) j)
     (= (t2tb4043 (tb2t4043 j)) j)) :pattern ((t2tb4043 (tb2t4043 j))) )))

(declare-fun t2tb4044 ((tuple21 (tuple21 c (tuple21 a c)) (tuple21 d
  (tuple21 b d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 c (tuple21 a c)) (tuple21 d (tuple21 b d)))))
  (sort (tuple2 (tuple2 c1 (tuple2 a1 c1)) (tuple2 d1 (tuple2 b1 d1)))
  (t2tb4044 x))))

(declare-fun tb2t4044 (uni) (tuple21 (tuple21 c (tuple21 a c)) (tuple21 d
  (tuple21 b d))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 c (tuple21 a c)) (tuple21 d (tuple21 b d)))))
  (! (= (tb2t4044 (t2tb4044 i)) i) :pattern ((t2tb4044 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 c1 (tuple2 a1 c1)) (tuple2 d1 (tuple2 b1 d1)))
     j) (= (t2tb4044 (tb2t4044 j)) j)) :pattern ((t2tb4044 (tb2t4044 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 c d))) (k (set (tuple21 (tuple21 a c) (tuple21 b
  d)))) (x c) (y (tuple21 a c)) (z d) (w (tuple21 b d)))
  (= (mem (tuple2 (tuple2 c1 (tuple2 a1 c1)) (tuple2 d1 (tuple2 b1 d1)))
  (Tuple2 (tuple2 c1 (tuple2 a1 c1)) (tuple2 d1 (tuple2 b1 d1))
  (Tuple2 c1 (tuple2 a1 c1) (t2tb135 x) (t2tb133 y))
  (Tuple2 d1 (tuple2 b1 d1) (t2tb694 z) (t2tb692 w)))
  (parallel_product (tuple2 b1 d1) (tuple2 a1 c1) d1 c1 (t2tb689 h)
  (t2tb686 k)))
  (and (mem21 (tb2t693 (Tuple2 c1 d1 (t2tb135 x) (t2tb694 z))) h) (mem24
  (tb2t691 (Tuple2 (tuple2 a1 c1) (tuple2 b1 d1) (t2tb133 y) (t2tb692 w)))
  k)))))

(declare-fun t2tb4045 ((set (tuple21 (tuple21 c c) (tuple21 d f)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 c c) (tuple21 d f))))) (sort
  (set1 (tuple2 (tuple2 c1 c1) (tuple2 d1 f1))) (t2tb4045 x))))

(declare-fun tb2t4045 (uni) (set (tuple21 (tuple21 c c) (tuple21 d f))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 c c) (tuple21 d f)))))
  (! (= (tb2t4045 (t2tb4045 i)) i) :pattern ((t2tb4045 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 c1 c1) (tuple2 d1 f1))) j)
     (= (t2tb4045 (tb2t4045 j)) j)) :pattern ((t2tb4045 (tb2t4045 j))) )))

(declare-fun t2tb4046 ((tuple21 (tuple21 c c) (tuple21 d f))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 c c) (tuple21 d f)))) (sort
  (tuple2 (tuple2 c1 c1) (tuple2 d1 f1)) (t2tb4046 x))))

(declare-fun tb2t4046 (uni) (tuple21 (tuple21 c c) (tuple21 d f)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 c c) (tuple21 d f))))
  (! (= (tb2t4046 (t2tb4046 i)) i) :pattern ((t2tb4046 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 c1 c1) (tuple2 d1 f1)) j)
     (= (t2tb4046 (tb2t4046 j)) j)) :pattern ((t2tb4046 (tb2t4046 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 c d))) (k (set (tuple21 c f))) (x c) (y c) (z d)
  (w f))
  (= (mem (tuple2 (tuple2 c1 c1) (tuple2 d1 f1))
  (Tuple2 (tuple2 c1 c1) (tuple2 d1 f1)
  (Tuple2 c1 c1 (t2tb135 x) (t2tb135 y))
  (Tuple2 d1 f1 (t2tb694 z) (t2tb2954 w)))
  (parallel_product f1 c1 d1 c1 (t2tb689 h) (t2tb2942 k)))
  (and (mem21 (tb2t693 (Tuple2 c1 d1 (t2tb135 x) (t2tb694 z))) h) (mem45
  (tb2t2948 (Tuple2 c1 f1 (t2tb135 y) (t2tb2954 w))) k)))))

(declare-fun t2tb4047 ((set (tuple21 (tuple21 c c) (tuple21 d d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 c c) (tuple21 d d))))) (sort
  (set1 (tuple2 (tuple2 c1 c1) (tuple2 d1 d1))) (t2tb4047 x))))

(declare-fun tb2t4047 (uni) (set (tuple21 (tuple21 c c) (tuple21 d d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 c c) (tuple21 d d)))))
  (! (= (tb2t4047 (t2tb4047 i)) i) :pattern ((t2tb4047 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 c1 c1) (tuple2 d1 d1))) j)
     (= (t2tb4047 (tb2t4047 j)) j)) :pattern ((t2tb4047 (tb2t4047 j))) )))

(declare-fun t2tb4048 ((tuple21 (tuple21 c c) (tuple21 d d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 c c) (tuple21 d d)))) (sort
  (tuple2 (tuple2 c1 c1) (tuple2 d1 d1)) (t2tb4048 x))))

(declare-fun tb2t4048 (uni) (tuple21 (tuple21 c c) (tuple21 d d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 c c) (tuple21 d d))))
  (! (= (tb2t4048 (t2tb4048 i)) i) :pattern ((t2tb4048 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 c1 c1) (tuple2 d1 d1)) j)
     (= (t2tb4048 (tb2t4048 j)) j)) :pattern ((t2tb4048 (tb2t4048 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 c d))) (k (set (tuple21 c d))) (x c) (y c) (z d)
  (w d))
  (= (mem (tuple2 (tuple2 c1 c1) (tuple2 d1 d1))
  (Tuple2 (tuple2 c1 c1) (tuple2 d1 d1)
  (Tuple2 c1 c1 (t2tb135 x) (t2tb135 y))
  (Tuple2 d1 d1 (t2tb694 z) (t2tb694 w)))
  (parallel_product d1 c1 d1 c1 (t2tb689 h) (t2tb689 k)))
  (and (mem21 (tb2t693 (Tuple2 c1 d1 (t2tb135 x) (t2tb694 z))) h) (mem21
  (tb2t693 (Tuple2 c1 d1 (t2tb135 y) (t2tb694 w))) k)))))

(declare-fun t2tb4049 ((set (tuple21 (tuple21 c b) (tuple21 d e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 c b) (tuple21 d e))))) (sort
  (set1 (tuple2 (tuple2 c1 b1) (tuple2 d1 e1))) (t2tb4049 x))))

(declare-fun tb2t4049 (uni) (set (tuple21 (tuple21 c b) (tuple21 d e))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 c b) (tuple21 d e)))))
  (! (= (tb2t4049 (t2tb4049 i)) i) :pattern ((t2tb4049 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 c1 b1) (tuple2 d1 e1))) j)
     (= (t2tb4049 (tb2t4049 j)) j)) :pattern ((t2tb4049 (tb2t4049 j))) )))

(declare-fun t2tb4050 ((tuple21 (tuple21 c b) (tuple21 d e))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 c b) (tuple21 d e)))) (sort
  (tuple2 (tuple2 c1 b1) (tuple2 d1 e1)) (t2tb4050 x))))

(declare-fun tb2t4050 (uni) (tuple21 (tuple21 c b) (tuple21 d e)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 c b) (tuple21 d e))))
  (! (= (tb2t4050 (t2tb4050 i)) i) :pattern ((t2tb4050 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 c1 b1) (tuple2 d1 e1)) j)
     (= (t2tb4050 (tb2t4050 j)) j)) :pattern ((t2tb4050 (tb2t4050 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 c d))) (k (set (tuple21 b e))) (x c) (y b) (z d)
  (w e))
  (= (mem (tuple2 (tuple2 c1 b1) (tuple2 d1 e1))
  (Tuple2 (tuple2 c1 b1) (tuple2 d1 e1) (Tuple2 c1 b1 (t2tb135 x) (t2tb14 y))
  (Tuple2 d1 e1 (t2tb694 z) (t2tb2955 w)))
  (parallel_product e1 b1 d1 c1 (t2tb689 h) (t2tb2940 k)))
  (and (mem21 (tb2t693 (Tuple2 c1 d1 (t2tb135 x) (t2tb694 z))) h) (mem38
  (tb2t2953 (Tuple2 b1 e1 (t2tb14 y) (t2tb2955 w))) k)))))

(declare-fun t2tb4051 ((tuple21 (tuple21 c a) (tuple21 d e))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 c a) (tuple21 d e)))) (sort
  (tuple2 (tuple2 c1 a1) (tuple2 d1 e1)) (t2tb4051 x))))

(declare-fun tb2t4051 (uni) (tuple21 (tuple21 c a) (tuple21 d e)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 c a) (tuple21 d e))))
  (! (= (tb2t4051 (t2tb4051 i)) i) :pattern ((t2tb4051 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 c1 a1) (tuple2 d1 e1)) j)
     (= (t2tb4051 (tb2t4051 j)) j)) :pattern ((t2tb4051 (tb2t4051 j))) )))

(declare-fun t2tb4052 ((set (tuple21 (tuple21 c a) (tuple21 d e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 c a) (tuple21 d e))))) (sort
  (set1 (tuple2 (tuple2 c1 a1) (tuple2 d1 e1))) (t2tb4052 x))))

(declare-fun tb2t4052 (uni) (set (tuple21 (tuple21 c a) (tuple21 d e))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 c a) (tuple21 d e)))))
  (! (= (tb2t4052 (t2tb4052 i)) i) :pattern ((t2tb4052 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 c1 a1) (tuple2 d1 e1))) j)
     (= (t2tb4052 (tb2t4052 j)) j)) :pattern ((t2tb4052 (tb2t4052 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 c d))) (k (set (tuple21 a e))) (x c) (y a) (z d)
  (w e))
  (= (mem (tuple2 (tuple2 c1 a1) (tuple2 d1 e1))
  (Tuple2 (tuple2 c1 a1) (tuple2 d1 e1) (Tuple2 c1 a1 (t2tb135 x) (t2tb2 y))
  (Tuple2 d1 e1 (t2tb694 z) (t2tb2955 w)))
  (parallel_product e1 a1 d1 c1 (t2tb689 h) (t2tb2943 k)))
  (and (mem21 (tb2t693 (Tuple2 c1 d1 (t2tb135 x) (t2tb694 z))) h) (mem44
  (tb2t2949 (Tuple2 a1 e1 (t2tb2 y) (t2tb2955 w))) k)))))

(declare-fun t2tb4053 ((set (tuple21 (tuple21 c a) (tuple21 d b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 c a) (tuple21 d b))))) (sort
  (set1 (tuple2 (tuple2 c1 a1) (tuple2 d1 b1))) (t2tb4053 x))))

(declare-fun tb2t4053 (uni) (set (tuple21 (tuple21 c a) (tuple21 d b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 c a) (tuple21 d b)))))
  (! (= (tb2t4053 (t2tb4053 i)) i) :pattern ((t2tb4053 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 c1 a1) (tuple2 d1 b1))) j)
     (= (t2tb4053 (tb2t4053 j)) j)) :pattern ((t2tb4053 (tb2t4053 j))) )))

(declare-fun t2tb4054 ((tuple21 (tuple21 c a) (tuple21 d b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 c a) (tuple21 d b)))) (sort
  (tuple2 (tuple2 c1 a1) (tuple2 d1 b1)) (t2tb4054 x))))

(declare-fun tb2t4054 (uni) (tuple21 (tuple21 c a) (tuple21 d b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 c a) (tuple21 d b))))
  (! (= (tb2t4054 (t2tb4054 i)) i) :pattern ((t2tb4054 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 c1 a1) (tuple2 d1 b1)) j)
     (= (t2tb4054 (tb2t4054 j)) j)) :pattern ((t2tb4054 (tb2t4054 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 c d))) (k (set (tuple21 a b))) (x c) (y a) (z d)
  (w b))
  (= (mem (tuple2 (tuple2 c1 a1) (tuple2 d1 b1))
  (Tuple2 (tuple2 c1 a1) (tuple2 d1 b1) (Tuple2 c1 a1 (t2tb135 x) (t2tb2 y))
  (Tuple2 d1 b1 (t2tb694 z) (t2tb14 w)))
  (parallel_product b1 a1 d1 c1 (t2tb689 h) (t2tb11 k)))
  (and (mem21 (tb2t693 (Tuple2 c1 d1 (t2tb135 x) (t2tb694 z))) h) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 y) (t2tb14 w))) k)))))

;; mem_parallel_product
  (assert
  (forall ((c2 ty) (d2 ty))
  (forall ((h (set (tuple21 c d))) (k uni) (x c) (y uni) (z d) (w uni))
  (= (mem (tuple2 (tuple2 c1 c2) (tuple2 d1 d2))
  (Tuple2 (tuple2 c1 c2) (tuple2 d1 d2) (Tuple2 c1 c2 (t2tb135 x) y)
  (Tuple2 d1 d2 (t2tb694 z) w)) (parallel_product d2 c2 d1 c1 (t2tb689 h) k))
  (and (mem21 (tb2t693 (Tuple2 c1 d1 (t2tb135 x) (t2tb694 z))) h) (mem
  (tuple2 c2 d2) (Tuple2 c2 d2 y w) k))))))

(declare-fun t2tb888 ((tuple21 b (tuple21 b d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 b (tuple21 b d)))) (sort (tuple2 b1 (tuple2 b1 d1))
  (t2tb888 x))))

(declare-fun tb2t888 (uni) (tuple21 b (tuple21 b d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 b (tuple21 b d))))
  (! (= (tb2t888 (t2tb888 i)) i) :pattern ((t2tb888 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 b1 (tuple2 b1 d1)) j) (= (t2tb888 (tb2t888 j)) j)) :pattern (
  (t2tb888 (tb2t888 j))) )))

(declare-fun t2tb4055 ((set (tuple21 (tuple21 b (tuple21 b d)) (tuple21 e
  (tuple21 e f))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b (tuple21 b d)) (tuple21 e (tuple21 e
  f)))))) (sort
  (set1 (tuple2 (tuple2 b1 (tuple2 b1 d1)) (tuple2 e1 (tuple2 e1 f1))))
  (t2tb4055 x))))

(declare-fun tb2t4055 (uni) (set (tuple21 (tuple21 b (tuple21 b d))
  (tuple21 e (tuple21 e f)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b (tuple21 b d)) (tuple21 e (tuple21 e
  f)))))) (! (= (tb2t4055 (t2tb4055 i)) i) :pattern ((t2tb4055 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 b1 (tuple2 b1 d1)) (tuple2 e1 (tuple2 e1 f1)))) j)
     (= (t2tb4055 (tb2t4055 j)) j)) :pattern ((t2tb4055 (tb2t4055 j))) )))

(declare-fun t2tb4056 ((tuple21 (tuple21 b (tuple21 b d)) (tuple21 e
  (tuple21 e f)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b (tuple21 b d)) (tuple21 e (tuple21 e f)))))
  (sort (tuple2 (tuple2 b1 (tuple2 b1 d1)) (tuple2 e1 (tuple2 e1 f1)))
  (t2tb4056 x))))

(declare-fun tb2t4056 (uni) (tuple21 (tuple21 b (tuple21 b d)) (tuple21 e
  (tuple21 e f))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b (tuple21 b d)) (tuple21 e (tuple21 e f)))))
  (! (= (tb2t4056 (t2tb4056 i)) i) :pattern ((t2tb4056 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 (tuple2 b1 d1)) (tuple2 e1 (tuple2 e1 f1)))
     j) (= (t2tb4056 (tb2t4056 j)) j)) :pattern ((t2tb4056 (tb2t4056 j))) )))

(declare-fun t2tb4057 ((tuple21 e (tuple21 e f))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 e (tuple21 e f)))) (sort (tuple2 e1 (tuple2 e1 f1))
  (t2tb4057 x))))

(declare-fun tb2t4057 (uni) (tuple21 e (tuple21 e f)))

;; BridgeL
  (assert
  (forall ((i (tuple21 e (tuple21 e f))))
  (! (= (tb2t4057 (t2tb4057 i)) i) :pattern ((t2tb4057 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 e1 (tuple2 e1 f1)) j) (= (t2tb4057 (tb2t4057 j)) j)) :pattern (
  (t2tb4057 (tb2t4057 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 b e))) (k (set (tuple21 (tuple21 b d) (tuple21 e
  f)))) (x b) (y (tuple21 b d)) (z e) (w (tuple21 e f)))
  (= (mem (tuple2 (tuple2 b1 (tuple2 b1 d1)) (tuple2 e1 (tuple2 e1 f1)))
  (Tuple2 (tuple2 b1 (tuple2 b1 d1)) (tuple2 e1 (tuple2 e1 f1))
  (Tuple2 b1 (tuple2 b1 d1) (t2tb14 x) (t2tb692 y))
  (Tuple2 e1 (tuple2 e1 f1) (t2tb2955 z) (t2tb3315 w)))
  (parallel_product (tuple2 e1 f1) (tuple2 b1 d1) e1 b1 (t2tb2940 h)
  (t2tb2944 k)))
  (and (mem38 (tb2t2953 (Tuple2 b1 e1 (t2tb14 x) (t2tb2955 z))) h) (mem43
  (tb2t2950 (Tuple2 (tuple2 b1 d1) (tuple2 e1 f1) (t2tb692 y) (t2tb3315 w)))
  k)))))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 b e))) (k (set (tuple21 d f))) (x b) (y d) (z e)
  (w f))
  (= (mem43
  (tb2t2950
  (Tuple2 (tuple2 b1 d1) (tuple2 e1 f1) (Tuple2 b1 d1 (t2tb14 x) (t2tb694 y))
  (Tuple2 e1 f1 (t2tb2955 z) (t2tb2954 w)))) (parallel_product4 h k))
  (and (mem38 (tb2t2953 (Tuple2 b1 e1 (t2tb14 x) (t2tb2955 z))) h) (mem40
  (tb2t2952 (Tuple2 d1 f1 (t2tb694 y) (t2tb2954 w))) k)))))

(declare-fun t2tb249 ((tuple21 b (tuple21 a c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 b (tuple21 a c)))) (sort (tuple2 b1 (tuple2 a1 c1))
  (t2tb249 x))))

(declare-fun tb2t249 (uni) (tuple21 b (tuple21 a c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 b (tuple21 a c))))
  (! (= (tb2t249 (t2tb249 i)) i) :pattern ((t2tb249 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 b1 (tuple2 a1 c1)) j) (= (t2tb249 (tb2t249 j)) j)) :pattern (
  (t2tb249 (tb2t249 j))) )))

(declare-fun t2tb4058 ((set (tuple21 (tuple21 b (tuple21 a c)) (tuple21 e
  (tuple21 e f))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b (tuple21 a c)) (tuple21 e (tuple21 e
  f)))))) (sort
  (set1 (tuple2 (tuple2 b1 (tuple2 a1 c1)) (tuple2 e1 (tuple2 e1 f1))))
  (t2tb4058 x))))

(declare-fun tb2t4058 (uni) (set (tuple21 (tuple21 b (tuple21 a c))
  (tuple21 e (tuple21 e f)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b (tuple21 a c)) (tuple21 e (tuple21 e
  f)))))) (! (= (tb2t4058 (t2tb4058 i)) i) :pattern ((t2tb4058 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 b1 (tuple2 a1 c1)) (tuple2 e1 (tuple2 e1 f1)))) j)
     (= (t2tb4058 (tb2t4058 j)) j)) :pattern ((t2tb4058 (tb2t4058 j))) )))

(declare-fun t2tb4059 ((tuple21 (tuple21 b (tuple21 a c)) (tuple21 e
  (tuple21 e f)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b (tuple21 a c)) (tuple21 e (tuple21 e f)))))
  (sort (tuple2 (tuple2 b1 (tuple2 a1 c1)) (tuple2 e1 (tuple2 e1 f1)))
  (t2tb4059 x))))

(declare-fun tb2t4059 (uni) (tuple21 (tuple21 b (tuple21 a c)) (tuple21 e
  (tuple21 e f))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b (tuple21 a c)) (tuple21 e (tuple21 e f)))))
  (! (= (tb2t4059 (t2tb4059 i)) i) :pattern ((t2tb4059 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 (tuple2 a1 c1)) (tuple2 e1 (tuple2 e1 f1)))
     j) (= (t2tb4059 (tb2t4059 j)) j)) :pattern ((t2tb4059 (tb2t4059 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 b e))) (k (set (tuple21 (tuple21 a c) (tuple21 e
  f)))) (x b) (y (tuple21 a c)) (z e) (w (tuple21 e f)))
  (= (mem (tuple2 (tuple2 b1 (tuple2 a1 c1)) (tuple2 e1 (tuple2 e1 f1)))
  (Tuple2 (tuple2 b1 (tuple2 a1 c1)) (tuple2 e1 (tuple2 e1 f1))
  (Tuple2 b1 (tuple2 a1 c1) (t2tb14 x) (t2tb133 y))
  (Tuple2 e1 (tuple2 e1 f1) (t2tb2955 z) (t2tb3315 w)))
  (parallel_product (tuple2 e1 f1) (tuple2 a1 c1) e1 b1 (t2tb2940 h)
  (t2tb2945 k)))
  (and (mem38 (tb2t2953 (Tuple2 b1 e1 (t2tb14 x) (t2tb2955 z))) h) (mem42
  (tb2t2951 (Tuple2 (tuple2 a1 c1) (tuple2 e1 f1) (t2tb133 y) (t2tb3315 w)))
  k)))))

(declare-fun t2tb4060 ((tuple21 e (tuple21 b d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 e (tuple21 b d)))) (sort (tuple2 e1 (tuple2 b1 d1))
  (t2tb4060 x))))

(declare-fun tb2t4060 (uni) (tuple21 e (tuple21 b d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 e (tuple21 b d))))
  (! (= (tb2t4060 (t2tb4060 i)) i) :pattern ((t2tb4060 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 e1 (tuple2 b1 d1)) j) (= (t2tb4060 (tb2t4060 j)) j)) :pattern (
  (t2tb4060 (tb2t4060 j))) )))

(declare-fun t2tb4061 ((set (tuple21 (tuple21 b (tuple21 a c)) (tuple21 e
  (tuple21 b d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b (tuple21 a c)) (tuple21 e (tuple21 b
  d)))))) (sort
  (set1 (tuple2 (tuple2 b1 (tuple2 a1 c1)) (tuple2 e1 (tuple2 b1 d1))))
  (t2tb4061 x))))

(declare-fun tb2t4061 (uni) (set (tuple21 (tuple21 b (tuple21 a c))
  (tuple21 e (tuple21 b d)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b (tuple21 a c)) (tuple21 e (tuple21 b
  d)))))) (! (= (tb2t4061 (t2tb4061 i)) i) :pattern ((t2tb4061 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 b1 (tuple2 a1 c1)) (tuple2 e1 (tuple2 b1 d1)))) j)
     (= (t2tb4061 (tb2t4061 j)) j)) :pattern ((t2tb4061 (tb2t4061 j))) )))

(declare-fun t2tb4062 ((tuple21 (tuple21 b (tuple21 a c)) (tuple21 e
  (tuple21 b d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b (tuple21 a c)) (tuple21 e (tuple21 b d)))))
  (sort (tuple2 (tuple2 b1 (tuple2 a1 c1)) (tuple2 e1 (tuple2 b1 d1)))
  (t2tb4062 x))))

(declare-fun tb2t4062 (uni) (tuple21 (tuple21 b (tuple21 a c)) (tuple21 e
  (tuple21 b d))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b (tuple21 a c)) (tuple21 e (tuple21 b d)))))
  (! (= (tb2t4062 (t2tb4062 i)) i) :pattern ((t2tb4062 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 (tuple2 a1 c1)) (tuple2 e1 (tuple2 b1 d1)))
     j) (= (t2tb4062 (tb2t4062 j)) j)) :pattern ((t2tb4062 (tb2t4062 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 b e))) (k (set (tuple21 (tuple21 a c) (tuple21 b
  d)))) (x b) (y (tuple21 a c)) (z e) (w (tuple21 b d)))
  (= (mem (tuple2 (tuple2 b1 (tuple2 a1 c1)) (tuple2 e1 (tuple2 b1 d1)))
  (Tuple2 (tuple2 b1 (tuple2 a1 c1)) (tuple2 e1 (tuple2 b1 d1))
  (Tuple2 b1 (tuple2 a1 c1) (t2tb14 x) (t2tb133 y))
  (Tuple2 e1 (tuple2 b1 d1) (t2tb2955 z) (t2tb692 w)))
  (parallel_product (tuple2 b1 d1) (tuple2 a1 c1) e1 b1 (t2tb2940 h)
  (t2tb686 k)))
  (and (mem38 (tb2t2953 (Tuple2 b1 e1 (t2tb14 x) (t2tb2955 z))) h) (mem24
  (tb2t691 (Tuple2 (tuple2 a1 c1) (tuple2 b1 d1) (t2tb133 y) (t2tb692 w)))
  k)))))

(declare-fun t2tb4063 ((set (tuple21 (tuple21 b c) (tuple21 e f)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b c) (tuple21 e f))))) (sort
  (set1 (tuple2 (tuple2 b1 c1) (tuple2 e1 f1))) (t2tb4063 x))))

(declare-fun tb2t4063 (uni) (set (tuple21 (tuple21 b c) (tuple21 e f))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b c) (tuple21 e f)))))
  (! (= (tb2t4063 (t2tb4063 i)) i) :pattern ((t2tb4063 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 c1) (tuple2 e1 f1))) j)
     (= (t2tb4063 (tb2t4063 j)) j)) :pattern ((t2tb4063 (tb2t4063 j))) )))

(declare-fun t2tb4064 ((tuple21 (tuple21 b c) (tuple21 e f))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b c) (tuple21 e f)))) (sort
  (tuple2 (tuple2 b1 c1) (tuple2 e1 f1)) (t2tb4064 x))))

(declare-fun tb2t4064 (uni) (tuple21 (tuple21 b c) (tuple21 e f)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b c) (tuple21 e f))))
  (! (= (tb2t4064 (t2tb4064 i)) i) :pattern ((t2tb4064 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 c1) (tuple2 e1 f1)) j)
     (= (t2tb4064 (tb2t4064 j)) j)) :pattern ((t2tb4064 (tb2t4064 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 b e))) (k (set (tuple21 c f))) (x b) (y c) (z e)
  (w f))
  (= (mem (tuple2 (tuple2 b1 c1) (tuple2 e1 f1))
  (Tuple2 (tuple2 b1 c1) (tuple2 e1 f1) (Tuple2 b1 c1 (t2tb14 x) (t2tb135 y))
  (Tuple2 e1 f1 (t2tb2955 z) (t2tb2954 w)))
  (parallel_product f1 c1 e1 b1 (t2tb2940 h) (t2tb2942 k)))
  (and (mem38 (tb2t2953 (Tuple2 b1 e1 (t2tb14 x) (t2tb2955 z))) h) (mem45
  (tb2t2948 (Tuple2 c1 f1 (t2tb135 y) (t2tb2954 w))) k)))))

(declare-fun t2tb4065 ((set (tuple21 (tuple21 b c) (tuple21 e d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b c) (tuple21 e d))))) (sort
  (set1 (tuple2 (tuple2 b1 c1) (tuple2 e1 d1))) (t2tb4065 x))))

(declare-fun tb2t4065 (uni) (set (tuple21 (tuple21 b c) (tuple21 e d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b c) (tuple21 e d)))))
  (! (= (tb2t4065 (t2tb4065 i)) i) :pattern ((t2tb4065 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 c1) (tuple2 e1 d1))) j)
     (= (t2tb4065 (tb2t4065 j)) j)) :pattern ((t2tb4065 (tb2t4065 j))) )))

(declare-fun t2tb4066 ((tuple21 (tuple21 b c) (tuple21 e d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b c) (tuple21 e d)))) (sort
  (tuple2 (tuple2 b1 c1) (tuple2 e1 d1)) (t2tb4066 x))))

(declare-fun tb2t4066 (uni) (tuple21 (tuple21 b c) (tuple21 e d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b c) (tuple21 e d))))
  (! (= (tb2t4066 (t2tb4066 i)) i) :pattern ((t2tb4066 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 c1) (tuple2 e1 d1)) j)
     (= (t2tb4066 (tb2t4066 j)) j)) :pattern ((t2tb4066 (tb2t4066 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 b e))) (k (set (tuple21 c d))) (x b) (y c) (z e)
  (w d))
  (= (mem (tuple2 (tuple2 b1 c1) (tuple2 e1 d1))
  (Tuple2 (tuple2 b1 c1) (tuple2 e1 d1) (Tuple2 b1 c1 (t2tb14 x) (t2tb135 y))
  (Tuple2 e1 d1 (t2tb2955 z) (t2tb694 w)))
  (parallel_product d1 c1 e1 b1 (t2tb2940 h) (t2tb689 k)))
  (and (mem38 (tb2t2953 (Tuple2 b1 e1 (t2tb14 x) (t2tb2955 z))) h) (mem21
  (tb2t693 (Tuple2 c1 d1 (t2tb135 y) (t2tb694 w))) k)))))

(declare-fun t2tb4067 ((tuple21 (tuple21 b b) (tuple21 e e))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b b) (tuple21 e e)))) (sort
  (tuple2 (tuple2 b1 b1) (tuple2 e1 e1)) (t2tb4067 x))))

(declare-fun tb2t4067 (uni) (tuple21 (tuple21 b b) (tuple21 e e)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b b) (tuple21 e e))))
  (! (= (tb2t4067 (t2tb4067 i)) i) :pattern ((t2tb4067 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 b1) (tuple2 e1 e1)) j)
     (= (t2tb4067 (tb2t4067 j)) j)) :pattern ((t2tb4067 (tb2t4067 j))) )))

(declare-fun t2tb4068 ((set (tuple21 (tuple21 b b) (tuple21 e e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b b) (tuple21 e e))))) (sort
  (set1 (tuple2 (tuple2 b1 b1) (tuple2 e1 e1))) (t2tb4068 x))))

(declare-fun tb2t4068 (uni) (set (tuple21 (tuple21 b b) (tuple21 e e))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b b) (tuple21 e e)))))
  (! (= (tb2t4068 (t2tb4068 i)) i) :pattern ((t2tb4068 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 b1) (tuple2 e1 e1))) j)
     (= (t2tb4068 (tb2t4068 j)) j)) :pattern ((t2tb4068 (tb2t4068 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 b e))) (k (set (tuple21 b e))) (x b) (y b) (z e)
  (w e))
  (= (mem (tuple2 (tuple2 b1 b1) (tuple2 e1 e1))
  (Tuple2 (tuple2 b1 b1) (tuple2 e1 e1) (Tuple2 b1 b1 (t2tb14 x) (t2tb14 y))
  (Tuple2 e1 e1 (t2tb2955 z) (t2tb2955 w)))
  (parallel_product e1 b1 e1 b1 (t2tb2940 h) (t2tb2940 k)))
  (and (mem38 (tb2t2953 (Tuple2 b1 e1 (t2tb14 x) (t2tb2955 z))) h) (mem38
  (tb2t2953 (Tuple2 b1 e1 (t2tb14 y) (t2tb2955 w))) k)))))

(declare-fun t2tb4069 ((set (tuple21 (tuple21 b a) (tuple21 e e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b a) (tuple21 e e))))) (sort
  (set1 (tuple2 (tuple2 b1 a1) (tuple2 e1 e1))) (t2tb4069 x))))

(declare-fun tb2t4069 (uni) (set (tuple21 (tuple21 b a) (tuple21 e e))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b a) (tuple21 e e)))))
  (! (= (tb2t4069 (t2tb4069 i)) i) :pattern ((t2tb4069 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 a1) (tuple2 e1 e1))) j)
     (= (t2tb4069 (tb2t4069 j)) j)) :pattern ((t2tb4069 (tb2t4069 j))) )))

(declare-fun t2tb4070 ((tuple21 (tuple21 b a) (tuple21 e e))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b a) (tuple21 e e)))) (sort
  (tuple2 (tuple2 b1 a1) (tuple2 e1 e1)) (t2tb4070 x))))

(declare-fun tb2t4070 (uni) (tuple21 (tuple21 b a) (tuple21 e e)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b a) (tuple21 e e))))
  (! (= (tb2t4070 (t2tb4070 i)) i) :pattern ((t2tb4070 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 a1) (tuple2 e1 e1)) j)
     (= (t2tb4070 (tb2t4070 j)) j)) :pattern ((t2tb4070 (tb2t4070 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 b e))) (k (set (tuple21 a e))) (x b) (y a) (z e)
  (w e))
  (= (mem (tuple2 (tuple2 b1 a1) (tuple2 e1 e1))
  (Tuple2 (tuple2 b1 a1) (tuple2 e1 e1) (Tuple2 b1 a1 (t2tb14 x) (t2tb2 y))
  (Tuple2 e1 e1 (t2tb2955 z) (t2tb2955 w)))
  (parallel_product e1 a1 e1 b1 (t2tb2940 h) (t2tb2943 k)))
  (and (mem38 (tb2t2953 (Tuple2 b1 e1 (t2tb14 x) (t2tb2955 z))) h) (mem44
  (tb2t2949 (Tuple2 a1 e1 (t2tb2 y) (t2tb2955 w))) k)))))

(declare-fun t2tb4071 ((set (tuple21 (tuple21 b a) (tuple21 e b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b a) (tuple21 e b))))) (sort
  (set1 (tuple2 (tuple2 b1 a1) (tuple2 e1 b1))) (t2tb4071 x))))

(declare-fun tb2t4071 (uni) (set (tuple21 (tuple21 b a) (tuple21 e b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b a) (tuple21 e b)))))
  (! (= (tb2t4071 (t2tb4071 i)) i) :pattern ((t2tb4071 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 a1) (tuple2 e1 b1))) j)
     (= (t2tb4071 (tb2t4071 j)) j)) :pattern ((t2tb4071 (tb2t4071 j))) )))

(declare-fun t2tb4072 ((tuple21 (tuple21 b a) (tuple21 e b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b a) (tuple21 e b)))) (sort
  (tuple2 (tuple2 b1 a1) (tuple2 e1 b1)) (t2tb4072 x))))

(declare-fun tb2t4072 (uni) (tuple21 (tuple21 b a) (tuple21 e b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b a) (tuple21 e b))))
  (! (= (tb2t4072 (t2tb4072 i)) i) :pattern ((t2tb4072 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 a1) (tuple2 e1 b1)) j)
     (= (t2tb4072 (tb2t4072 j)) j)) :pattern ((t2tb4072 (tb2t4072 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 b e))) (k (set (tuple21 a b))) (x b) (y a) (z e)
  (w b))
  (= (mem (tuple2 (tuple2 b1 a1) (tuple2 e1 b1))
  (Tuple2 (tuple2 b1 a1) (tuple2 e1 b1) (Tuple2 b1 a1 (t2tb14 x) (t2tb2 y))
  (Tuple2 e1 b1 (t2tb2955 z) (t2tb14 w)))
  (parallel_product b1 a1 e1 b1 (t2tb2940 h) (t2tb11 k)))
  (and (mem38 (tb2t2953 (Tuple2 b1 e1 (t2tb14 x) (t2tb2955 z))) h) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 y) (t2tb14 w))) k)))))

;; mem_parallel_product
  (assert
  (forall ((c2 ty) (d2 ty))
  (forall ((h (set (tuple21 b e))) (k uni) (x b) (y uni) (z e) (w uni))
  (= (mem (tuple2 (tuple2 b1 c2) (tuple2 e1 d2))
  (Tuple2 (tuple2 b1 c2) (tuple2 e1 d2) (Tuple2 b1 c2 (t2tb14 x) y)
  (Tuple2 e1 d2 (t2tb2955 z) w))
  (parallel_product d2 c2 e1 b1 (t2tb2940 h) k))
  (and (mem38 (tb2t2953 (Tuple2 b1 e1 (t2tb14 x) (t2tb2955 z))) h) (mem
  (tuple2 c2 d2) (Tuple2 c2 d2 y w) k))))))

(declare-fun t2tb2055 ((tuple21 a (tuple21 b d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (tuple21 b d)))) (sort (tuple2 a1 (tuple2 b1 d1))
  (t2tb2055 x))))

(declare-fun tb2t2055 (uni) (tuple21 a (tuple21 b d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (tuple21 b d))))
  (! (= (tb2t2055 (t2tb2055 i)) i) :pattern ((t2tb2055 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (tuple2 b1 d1)) j) (= (t2tb2055 (tb2t2055 j)) j)) :pattern (
  (t2tb2055 (tb2t2055 j))) )))

(declare-fun t2tb4073 ((set (tuple21 (tuple21 a (tuple21 b d)) (tuple21 e
  (tuple21 e f))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a (tuple21 b d)) (tuple21 e (tuple21 e
  f)))))) (sort
  (set1 (tuple2 (tuple2 a1 (tuple2 b1 d1)) (tuple2 e1 (tuple2 e1 f1))))
  (t2tb4073 x))))

(declare-fun tb2t4073 (uni) (set (tuple21 (tuple21 a (tuple21 b d))
  (tuple21 e (tuple21 e f)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a (tuple21 b d)) (tuple21 e (tuple21 e
  f)))))) (! (= (tb2t4073 (t2tb4073 i)) i) :pattern ((t2tb4073 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 a1 (tuple2 b1 d1)) (tuple2 e1 (tuple2 e1 f1)))) j)
     (= (t2tb4073 (tb2t4073 j)) j)) :pattern ((t2tb4073 (tb2t4073 j))) )))

(declare-fun t2tb4074 ((tuple21 (tuple21 a (tuple21 b d)) (tuple21 e
  (tuple21 e f)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a (tuple21 b d)) (tuple21 e (tuple21 e f)))))
  (sort (tuple2 (tuple2 a1 (tuple2 b1 d1)) (tuple2 e1 (tuple2 e1 f1)))
  (t2tb4074 x))))

(declare-fun tb2t4074 (uni) (tuple21 (tuple21 a (tuple21 b d)) (tuple21 e
  (tuple21 e f))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a (tuple21 b d)) (tuple21 e (tuple21 e f)))))
  (! (= (tb2t4074 (t2tb4074 i)) i) :pattern ((t2tb4074 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 (tuple2 b1 d1)) (tuple2 e1 (tuple2 e1 f1)))
     j) (= (t2tb4074 (tb2t4074 j)) j)) :pattern ((t2tb4074 (tb2t4074 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a e))) (k (set (tuple21 (tuple21 b d) (tuple21 e
  f)))) (x a) (y (tuple21 b d)) (z e) (w (tuple21 e f)))
  (= (mem (tuple2 (tuple2 a1 (tuple2 b1 d1)) (tuple2 e1 (tuple2 e1 f1)))
  (Tuple2 (tuple2 a1 (tuple2 b1 d1)) (tuple2 e1 (tuple2 e1 f1))
  (Tuple2 a1 (tuple2 b1 d1) (t2tb2 x) (t2tb692 y))
  (Tuple2 e1 (tuple2 e1 f1) (t2tb2955 z) (t2tb3315 w)))
  (parallel_product (tuple2 e1 f1) (tuple2 b1 d1) e1 a1 (t2tb2943 h)
  (t2tb2944 k)))
  (and (mem44 (tb2t2949 (Tuple2 a1 e1 (t2tb2 x) (t2tb2955 z))) h) (mem43
  (tb2t2950 (Tuple2 (tuple2 b1 d1) (tuple2 e1 f1) (t2tb692 y) (t2tb3315 w)))
  k)))))

(declare-fun t2tb4075 ((set (tuple21 (tuple21 a d) (tuple21 e f)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a d) (tuple21 e f))))) (sort
  (set1 (tuple2 (tuple2 a1 d1) (tuple2 e1 f1))) (t2tb4075 x))))

(declare-fun tb2t4075 (uni) (set (tuple21 (tuple21 a d) (tuple21 e f))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a d) (tuple21 e f)))))
  (! (= (tb2t4075 (t2tb4075 i)) i) :pattern ((t2tb4075 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 d1) (tuple2 e1 f1))) j)
     (= (t2tb4075 (tb2t4075 j)) j)) :pattern ((t2tb4075 (tb2t4075 j))) )))

(declare-fun t2tb4076 ((tuple21 (tuple21 a d) (tuple21 e f))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a d) (tuple21 e f)))) (sort
  (tuple2 (tuple2 a1 d1) (tuple2 e1 f1)) (t2tb4076 x))))

(declare-fun tb2t4076 (uni) (tuple21 (tuple21 a d) (tuple21 e f)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a d) (tuple21 e f))))
  (! (= (tb2t4076 (t2tb4076 i)) i) :pattern ((t2tb4076 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 d1) (tuple2 e1 f1)) j)
     (= (t2tb4076 (tb2t4076 j)) j)) :pattern ((t2tb4076 (tb2t4076 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a e))) (k (set (tuple21 d f))) (x a) (y d) (z e)
  (w f))
  (= (mem (tuple2 (tuple2 a1 d1) (tuple2 e1 f1))
  (Tuple2 (tuple2 a1 d1) (tuple2 e1 f1) (Tuple2 a1 d1 (t2tb2 x) (t2tb694 y))
  (Tuple2 e1 f1 (t2tb2955 z) (t2tb2954 w)))
  (parallel_product f1 d1 e1 a1 (t2tb2943 h) (t2tb2938 k)))
  (and (mem44 (tb2t2949 (Tuple2 a1 e1 (t2tb2 x) (t2tb2955 z))) h) (mem40
  (tb2t2952 (Tuple2 d1 f1 (t2tb694 y) (t2tb2954 w))) k)))))

(declare-fun t2tb4077 ((set (tuple21 (tuple21 a (tuple21 a c)) (tuple21 e
  (tuple21 e f))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a (tuple21 a c)) (tuple21 e (tuple21 e
  f)))))) (sort
  (set1 (tuple2 (tuple2 a1 (tuple2 a1 c1)) (tuple2 e1 (tuple2 e1 f1))))
  (t2tb4077 x))))

(declare-fun tb2t4077 (uni) (set (tuple21 (tuple21 a (tuple21 a c))
  (tuple21 e (tuple21 e f)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a (tuple21 a c)) (tuple21 e (tuple21 e
  f)))))) (! (= (tb2t4077 (t2tb4077 i)) i) :pattern ((t2tb4077 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 a1 (tuple2 a1 c1)) (tuple2 e1 (tuple2 e1 f1)))) j)
     (= (t2tb4077 (tb2t4077 j)) j)) :pattern ((t2tb4077 (tb2t4077 j))) )))

(declare-fun t2tb257 ((tuple21 a (tuple21 a c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (tuple21 a c)))) (sort (tuple2 a1 (tuple2 a1 c1))
  (t2tb257 x))))

(declare-fun tb2t257 (uni) (tuple21 a (tuple21 a c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (tuple21 a c))))
  (! (= (tb2t257 (t2tb257 i)) i) :pattern ((t2tb257 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (tuple2 a1 c1)) j) (= (t2tb257 (tb2t257 j)) j)) :pattern (
  (t2tb257 (tb2t257 j))) )))

(declare-fun t2tb4078 ((tuple21 (tuple21 a (tuple21 a c)) (tuple21 e
  (tuple21 e f)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a (tuple21 a c)) (tuple21 e (tuple21 e f)))))
  (sort (tuple2 (tuple2 a1 (tuple2 a1 c1)) (tuple2 e1 (tuple2 e1 f1)))
  (t2tb4078 x))))

(declare-fun tb2t4078 (uni) (tuple21 (tuple21 a (tuple21 a c)) (tuple21 e
  (tuple21 e f))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a (tuple21 a c)) (tuple21 e (tuple21 e f)))))
  (! (= (tb2t4078 (t2tb4078 i)) i) :pattern ((t2tb4078 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 (tuple2 a1 c1)) (tuple2 e1 (tuple2 e1 f1)))
     j) (= (t2tb4078 (tb2t4078 j)) j)) :pattern ((t2tb4078 (tb2t4078 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a e))) (k (set (tuple21 (tuple21 a c) (tuple21 e
  f)))) (x a) (y (tuple21 a c)) (z e) (w (tuple21 e f)))
  (= (mem (tuple2 (tuple2 a1 (tuple2 a1 c1)) (tuple2 e1 (tuple2 e1 f1)))
  (Tuple2 (tuple2 a1 (tuple2 a1 c1)) (tuple2 e1 (tuple2 e1 f1))
  (Tuple2 a1 (tuple2 a1 c1) (t2tb2 x) (t2tb133 y))
  (Tuple2 e1 (tuple2 e1 f1) (t2tb2955 z) (t2tb3315 w)))
  (parallel_product (tuple2 e1 f1) (tuple2 a1 c1) e1 a1 (t2tb2943 h)
  (t2tb2945 k)))
  (and (mem44 (tb2t2949 (Tuple2 a1 e1 (t2tb2 x) (t2tb2955 z))) h) (mem42
  (tb2t2951 (Tuple2 (tuple2 a1 c1) (tuple2 e1 f1) (t2tb133 y) (t2tb3315 w)))
  k)))))

(declare-fun t2tb4079 ((set (tuple21 (tuple21 a (tuple21 a c)) (tuple21 e
  (tuple21 b d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a (tuple21 a c)) (tuple21 e (tuple21 b
  d)))))) (sort
  (set1 (tuple2 (tuple2 a1 (tuple2 a1 c1)) (tuple2 e1 (tuple2 b1 d1))))
  (t2tb4079 x))))

(declare-fun tb2t4079 (uni) (set (tuple21 (tuple21 a (tuple21 a c))
  (tuple21 e (tuple21 b d)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a (tuple21 a c)) (tuple21 e (tuple21 b
  d)))))) (! (= (tb2t4079 (t2tb4079 i)) i) :pattern ((t2tb4079 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 a1 (tuple2 a1 c1)) (tuple2 e1 (tuple2 b1 d1)))) j)
     (= (t2tb4079 (tb2t4079 j)) j)) :pattern ((t2tb4079 (tb2t4079 j))) )))

(declare-fun t2tb4080 ((tuple21 (tuple21 a (tuple21 a c)) (tuple21 e
  (tuple21 b d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a (tuple21 a c)) (tuple21 e (tuple21 b d)))))
  (sort (tuple2 (tuple2 a1 (tuple2 a1 c1)) (tuple2 e1 (tuple2 b1 d1)))
  (t2tb4080 x))))

(declare-fun tb2t4080 (uni) (tuple21 (tuple21 a (tuple21 a c)) (tuple21 e
  (tuple21 b d))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a (tuple21 a c)) (tuple21 e (tuple21 b d)))))
  (! (= (tb2t4080 (t2tb4080 i)) i) :pattern ((t2tb4080 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 (tuple2 a1 c1)) (tuple2 e1 (tuple2 b1 d1)))
     j) (= (t2tb4080 (tb2t4080 j)) j)) :pattern ((t2tb4080 (tb2t4080 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a e))) (k (set (tuple21 (tuple21 a c) (tuple21 b
  d)))) (x a) (y (tuple21 a c)) (z e) (w (tuple21 b d)))
  (= (mem (tuple2 (tuple2 a1 (tuple2 a1 c1)) (tuple2 e1 (tuple2 b1 d1)))
  (Tuple2 (tuple2 a1 (tuple2 a1 c1)) (tuple2 e1 (tuple2 b1 d1))
  (Tuple2 a1 (tuple2 a1 c1) (t2tb2 x) (t2tb133 y))
  (Tuple2 e1 (tuple2 b1 d1) (t2tb2955 z) (t2tb692 w)))
  (parallel_product (tuple2 b1 d1) (tuple2 a1 c1) e1 a1 (t2tb2943 h)
  (t2tb686 k)))
  (and (mem44 (tb2t2949 (Tuple2 a1 e1 (t2tb2 x) (t2tb2955 z))) h) (mem24
  (tb2t691 (Tuple2 (tuple2 a1 c1) (tuple2 b1 d1) (t2tb133 y) (t2tb692 w)))
  k)))))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a e))) (k (set (tuple21 c f))) (x a) (y c) (z e)
  (w f))
  (= (mem42
  (tb2t2951
  (Tuple2 (tuple2 a1 c1) (tuple2 e1 f1) (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y))
  (Tuple2 e1 f1 (t2tb2955 z) (t2tb2954 w)))) (parallel_product3 h k))
  (and (mem44 (tb2t2949 (Tuple2 a1 e1 (t2tb2 x) (t2tb2955 z))) h) (mem45
  (tb2t2948 (Tuple2 c1 f1 (t2tb135 y) (t2tb2954 w))) k)))))

(declare-fun t2tb4081 ((set (tuple21 (tuple21 a c) (tuple21 e d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a c) (tuple21 e d))))) (sort
  (set1 (tuple2 (tuple2 a1 c1) (tuple2 e1 d1))) (t2tb4081 x))))

(declare-fun tb2t4081 (uni) (set (tuple21 (tuple21 a c) (tuple21 e d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a c) (tuple21 e d)))))
  (! (= (tb2t4081 (t2tb4081 i)) i) :pattern ((t2tb4081 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 c1) (tuple2 e1 d1))) j)
     (= (t2tb4081 (tb2t4081 j)) j)) :pattern ((t2tb4081 (tb2t4081 j))) )))

(declare-fun t2tb4082 ((tuple21 (tuple21 a c) (tuple21 e d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a c) (tuple21 e d)))) (sort
  (tuple2 (tuple2 a1 c1) (tuple2 e1 d1)) (t2tb4082 x))))

(declare-fun tb2t4082 (uni) (tuple21 (tuple21 a c) (tuple21 e d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a c) (tuple21 e d))))
  (! (= (tb2t4082 (t2tb4082 i)) i) :pattern ((t2tb4082 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 c1) (tuple2 e1 d1)) j)
     (= (t2tb4082 (tb2t4082 j)) j)) :pattern ((t2tb4082 (tb2t4082 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a e))) (k (set (tuple21 c d))) (x a) (y c) (z e)
  (w d))
  (= (mem (tuple2 (tuple2 a1 c1) (tuple2 e1 d1))
  (Tuple2 (tuple2 a1 c1) (tuple2 e1 d1) (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y))
  (Tuple2 e1 d1 (t2tb2955 z) (t2tb694 w)))
  (parallel_product d1 c1 e1 a1 (t2tb2943 h) (t2tb689 k)))
  (and (mem44 (tb2t2949 (Tuple2 a1 e1 (t2tb2 x) (t2tb2955 z))) h) (mem21
  (tb2t693 (Tuple2 c1 d1 (t2tb135 y) (t2tb694 w))) k)))))

(declare-fun t2tb4083 ((set (tuple21 (tuple21 a b) (tuple21 e e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) (tuple21 e e))))) (sort
  (set1 (tuple2 (tuple2 a1 b1) (tuple2 e1 e1))) (t2tb4083 x))))

(declare-fun tb2t4083 (uni) (set (tuple21 (tuple21 a b) (tuple21 e e))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a b) (tuple21 e e)))))
  (! (= (tb2t4083 (t2tb4083 i)) i) :pattern ((t2tb4083 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 b1) (tuple2 e1 e1))) j)
     (= (t2tb4083 (tb2t4083 j)) j)) :pattern ((t2tb4083 (tb2t4083 j))) )))

(declare-fun t2tb4084 ((tuple21 (tuple21 a b) (tuple21 e e))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a b) (tuple21 e e)))) (sort
  (tuple2 (tuple2 a1 b1) (tuple2 e1 e1)) (t2tb4084 x))))

(declare-fun tb2t4084 (uni) (tuple21 (tuple21 a b) (tuple21 e e)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a b) (tuple21 e e))))
  (! (= (tb2t4084 (t2tb4084 i)) i) :pattern ((t2tb4084 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 b1) (tuple2 e1 e1)) j)
     (= (t2tb4084 (tb2t4084 j)) j)) :pattern ((t2tb4084 (tb2t4084 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a e))) (k (set (tuple21 b e))) (x a) (y b) (z e)
  (w e))
  (= (mem (tuple2 (tuple2 a1 b1) (tuple2 e1 e1))
  (Tuple2 (tuple2 a1 b1) (tuple2 e1 e1) (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y))
  (Tuple2 e1 e1 (t2tb2955 z) (t2tb2955 w)))
  (parallel_product e1 b1 e1 a1 (t2tb2943 h) (t2tb2940 k)))
  (and (mem44 (tb2t2949 (Tuple2 a1 e1 (t2tb2 x) (t2tb2955 z))) h) (mem38
  (tb2t2953 (Tuple2 b1 e1 (t2tb14 y) (t2tb2955 w))) k)))))

(declare-fun t2tb4085 ((set (tuple21 (tuple21 a a) (tuple21 e e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a a) (tuple21 e e))))) (sort
  (set1 (tuple2 (tuple2 a1 a1) (tuple2 e1 e1))) (t2tb4085 x))))

(declare-fun tb2t4085 (uni) (set (tuple21 (tuple21 a a) (tuple21 e e))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a a) (tuple21 e e)))))
  (! (= (tb2t4085 (t2tb4085 i)) i) :pattern ((t2tb4085 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 a1) (tuple2 e1 e1))) j)
     (= (t2tb4085 (tb2t4085 j)) j)) :pattern ((t2tb4085 (tb2t4085 j))) )))

(declare-fun t2tb4086 ((tuple21 (tuple21 a a) (tuple21 e e))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a a) (tuple21 e e)))) (sort
  (tuple2 (tuple2 a1 a1) (tuple2 e1 e1)) (t2tb4086 x))))

(declare-fun tb2t4086 (uni) (tuple21 (tuple21 a a) (tuple21 e e)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a a) (tuple21 e e))))
  (! (= (tb2t4086 (t2tb4086 i)) i) :pattern ((t2tb4086 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 a1) (tuple2 e1 e1)) j)
     (= (t2tb4086 (tb2t4086 j)) j)) :pattern ((t2tb4086 (tb2t4086 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a e))) (k (set (tuple21 a e))) (x a) (y a) (z e)
  (w e))
  (= (mem (tuple2 (tuple2 a1 a1) (tuple2 e1 e1))
  (Tuple2 (tuple2 a1 a1) (tuple2 e1 e1) (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y))
  (Tuple2 e1 e1 (t2tb2955 z) (t2tb2955 w)))
  (parallel_product e1 a1 e1 a1 (t2tb2943 h) (t2tb2943 k)))
  (and (mem44 (tb2t2949 (Tuple2 a1 e1 (t2tb2 x) (t2tb2955 z))) h) (mem44
  (tb2t2949 (Tuple2 a1 e1 (t2tb2 y) (t2tb2955 w))) k)))))

(declare-fun t2tb4087 ((set (tuple21 (tuple21 a a) (tuple21 e b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a a) (tuple21 e b))))) (sort
  (set1 (tuple2 (tuple2 a1 a1) (tuple2 e1 b1))) (t2tb4087 x))))

(declare-fun tb2t4087 (uni) (set (tuple21 (tuple21 a a) (tuple21 e b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a a) (tuple21 e b)))))
  (! (= (tb2t4087 (t2tb4087 i)) i) :pattern ((t2tb4087 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 a1) (tuple2 e1 b1))) j)
     (= (t2tb4087 (tb2t4087 j)) j)) :pattern ((t2tb4087 (tb2t4087 j))) )))

(declare-fun t2tb4088 ((tuple21 (tuple21 a a) (tuple21 e b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a a) (tuple21 e b)))) (sort
  (tuple2 (tuple2 a1 a1) (tuple2 e1 b1)) (t2tb4088 x))))

(declare-fun tb2t4088 (uni) (tuple21 (tuple21 a a) (tuple21 e b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a a) (tuple21 e b))))
  (! (= (tb2t4088 (t2tb4088 i)) i) :pattern ((t2tb4088 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 a1) (tuple2 e1 b1)) j)
     (= (t2tb4088 (tb2t4088 j)) j)) :pattern ((t2tb4088 (tb2t4088 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a e))) (k (set (tuple21 a b))) (x a) (y a) (z e)
  (w b))
  (= (mem (tuple2 (tuple2 a1 a1) (tuple2 e1 b1))
  (Tuple2 (tuple2 a1 a1) (tuple2 e1 b1) (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y))
  (Tuple2 e1 b1 (t2tb2955 z) (t2tb14 w)))
  (parallel_product b1 a1 e1 a1 (t2tb2943 h) (t2tb11 k)))
  (and (mem44 (tb2t2949 (Tuple2 a1 e1 (t2tb2 x) (t2tb2955 z))) h) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 y) (t2tb14 w))) k)))))

;; mem_parallel_product
  (assert
  (forall ((c2 ty) (d2 ty))
  (forall ((h (set (tuple21 a e))) (k uni) (x a) (y uni) (z e) (w uni))
  (= (mem (tuple2 (tuple2 a1 c2) (tuple2 e1 d2))
  (Tuple2 (tuple2 a1 c2) (tuple2 e1 d2) (Tuple2 a1 c2 (t2tb2 x) y)
  (Tuple2 e1 d2 (t2tb2955 z) w))
  (parallel_product d2 c2 e1 a1 (t2tb2943 h) k))
  (and (mem44 (tb2t2949 (Tuple2 a1 e1 (t2tb2 x) (t2tb2955 z))) h) (mem
  (tuple2 c2 d2) (Tuple2 c2 d2 y w) k))))))

(declare-fun t2tb4089 ((tuple21 b (tuple21 e f))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 b (tuple21 e f)))) (sort (tuple2 b1 (tuple2 e1 f1))
  (t2tb4089 x))))

(declare-fun tb2t4089 (uni) (tuple21 b (tuple21 e f)))

;; BridgeL
  (assert
  (forall ((i (tuple21 b (tuple21 e f))))
  (! (= (tb2t4089 (t2tb4089 i)) i) :pattern ((t2tb4089 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 b1 (tuple2 e1 f1)) j) (= (t2tb4089 (tb2t4089 j)) j)) :pattern (
  (t2tb4089 (tb2t4089 j))) )))

(declare-fun t2tb4090 ((set (tuple21 (tuple21 a (tuple21 b d)) (tuple21 b
  (tuple21 e f))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a (tuple21 b d)) (tuple21 b (tuple21 e
  f)))))) (sort
  (set1 (tuple2 (tuple2 a1 (tuple2 b1 d1)) (tuple2 b1 (tuple2 e1 f1))))
  (t2tb4090 x))))

(declare-fun tb2t4090 (uni) (set (tuple21 (tuple21 a (tuple21 b d))
  (tuple21 b (tuple21 e f)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a (tuple21 b d)) (tuple21 b (tuple21 e
  f)))))) (! (= (tb2t4090 (t2tb4090 i)) i) :pattern ((t2tb4090 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 a1 (tuple2 b1 d1)) (tuple2 b1 (tuple2 e1 f1)))) j)
     (= (t2tb4090 (tb2t4090 j)) j)) :pattern ((t2tb4090 (tb2t4090 j))) )))

(declare-fun t2tb4091 ((tuple21 (tuple21 a (tuple21 b d)) (tuple21 b
  (tuple21 e f)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a (tuple21 b d)) (tuple21 b (tuple21 e f)))))
  (sort (tuple2 (tuple2 a1 (tuple2 b1 d1)) (tuple2 b1 (tuple2 e1 f1)))
  (t2tb4091 x))))

(declare-fun tb2t4091 (uni) (tuple21 (tuple21 a (tuple21 b d)) (tuple21 b
  (tuple21 e f))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a (tuple21 b d)) (tuple21 b (tuple21 e f)))))
  (! (= (tb2t4091 (t2tb4091 i)) i) :pattern ((t2tb4091 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 (tuple2 b1 d1)) (tuple2 b1 (tuple2 e1 f1)))
     j) (= (t2tb4091 (tb2t4091 j)) j)) :pattern ((t2tb4091 (tb2t4091 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a b))) (k (set (tuple21 (tuple21 b d) (tuple21 e
  f)))) (x a) (y (tuple21 b d)) (z b) (w (tuple21 e f)))
  (= (mem (tuple2 (tuple2 a1 (tuple2 b1 d1)) (tuple2 b1 (tuple2 e1 f1)))
  (Tuple2 (tuple2 a1 (tuple2 b1 d1)) (tuple2 b1 (tuple2 e1 f1))
  (Tuple2 a1 (tuple2 b1 d1) (t2tb2 x) (t2tb692 y))
  (Tuple2 b1 (tuple2 e1 f1) (t2tb14 z) (t2tb3315 w)))
  (parallel_product (tuple2 e1 f1) (tuple2 b1 d1) b1 a1 (t2tb11 h)
  (t2tb2944 k)))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 z))) h) (mem43
  (tb2t2950 (Tuple2 (tuple2 b1 d1) (tuple2 e1 f1) (t2tb692 y) (t2tb3315 w)))
  k)))))

(declare-fun t2tb4092 ((set (tuple21 (tuple21 a d) (tuple21 b f)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a d) (tuple21 b f))))) (sort
  (set1 (tuple2 (tuple2 a1 d1) (tuple2 b1 f1))) (t2tb4092 x))))

(declare-fun tb2t4092 (uni) (set (tuple21 (tuple21 a d) (tuple21 b f))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a d) (tuple21 b f)))))
  (! (= (tb2t4092 (t2tb4092 i)) i) :pattern ((t2tb4092 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 d1) (tuple2 b1 f1))) j)
     (= (t2tb4092 (tb2t4092 j)) j)) :pattern ((t2tb4092 (tb2t4092 j))) )))

(declare-fun t2tb4093 ((tuple21 (tuple21 a d) (tuple21 b f))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a d) (tuple21 b f)))) (sort
  (tuple2 (tuple2 a1 d1) (tuple2 b1 f1)) (t2tb4093 x))))

(declare-fun tb2t4093 (uni) (tuple21 (tuple21 a d) (tuple21 b f)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a d) (tuple21 b f))))
  (! (= (tb2t4093 (t2tb4093 i)) i) :pattern ((t2tb4093 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 d1) (tuple2 b1 f1)) j)
     (= (t2tb4093 (tb2t4093 j)) j)) :pattern ((t2tb4093 (tb2t4093 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a b))) (k (set (tuple21 d f))) (x a) (y d) (z b)
  (w f))
  (= (mem (tuple2 (tuple2 a1 d1) (tuple2 b1 f1))
  (Tuple2 (tuple2 a1 d1) (tuple2 b1 f1) (Tuple2 a1 d1 (t2tb2 x) (t2tb694 y))
  (Tuple2 b1 f1 (t2tb14 z) (t2tb2954 w)))
  (parallel_product f1 d1 b1 a1 (t2tb11 h) (t2tb2938 k)))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 z))) h) (mem40
  (tb2t2952 (Tuple2 d1 f1 (t2tb694 y) (t2tb2954 w))) k)))))

(declare-fun t2tb4094 ((set (tuple21 (tuple21 a (tuple21 a c)) (tuple21 b
  (tuple21 e f))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a (tuple21 a c)) (tuple21 b (tuple21 e
  f)))))) (sort
  (set1 (tuple2 (tuple2 a1 (tuple2 a1 c1)) (tuple2 b1 (tuple2 e1 f1))))
  (t2tb4094 x))))

(declare-fun tb2t4094 (uni) (set (tuple21 (tuple21 a (tuple21 a c))
  (tuple21 b (tuple21 e f)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a (tuple21 a c)) (tuple21 b (tuple21 e
  f)))))) (! (= (tb2t4094 (t2tb4094 i)) i) :pattern ((t2tb4094 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 a1 (tuple2 a1 c1)) (tuple2 b1 (tuple2 e1 f1)))) j)
     (= (t2tb4094 (tb2t4094 j)) j)) :pattern ((t2tb4094 (tb2t4094 j))) )))

(declare-fun t2tb4095 ((tuple21 (tuple21 a (tuple21 a c)) (tuple21 b
  (tuple21 e f)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a (tuple21 a c)) (tuple21 b (tuple21 e f)))))
  (sort (tuple2 (tuple2 a1 (tuple2 a1 c1)) (tuple2 b1 (tuple2 e1 f1)))
  (t2tb4095 x))))

(declare-fun tb2t4095 (uni) (tuple21 (tuple21 a (tuple21 a c)) (tuple21 b
  (tuple21 e f))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a (tuple21 a c)) (tuple21 b (tuple21 e f)))))
  (! (= (tb2t4095 (t2tb4095 i)) i) :pattern ((t2tb4095 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 (tuple2 a1 c1)) (tuple2 b1 (tuple2 e1 f1)))
     j) (= (t2tb4095 (tb2t4095 j)) j)) :pattern ((t2tb4095 (tb2t4095 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a b))) (k (set (tuple21 (tuple21 a c) (tuple21 e
  f)))) (x a) (y (tuple21 a c)) (z b) (w (tuple21 e f)))
  (= (mem (tuple2 (tuple2 a1 (tuple2 a1 c1)) (tuple2 b1 (tuple2 e1 f1)))
  (Tuple2 (tuple2 a1 (tuple2 a1 c1)) (tuple2 b1 (tuple2 e1 f1))
  (Tuple2 a1 (tuple2 a1 c1) (t2tb2 x) (t2tb133 y))
  (Tuple2 b1 (tuple2 e1 f1) (t2tb14 z) (t2tb3315 w)))
  (parallel_product (tuple2 e1 f1) (tuple2 a1 c1) b1 a1 (t2tb11 h)
  (t2tb2945 k)))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 z))) h) (mem42
  (tb2t2951 (Tuple2 (tuple2 a1 c1) (tuple2 e1 f1) (t2tb133 y) (t2tb3315 w)))
  k)))))

(declare-fun t2tb4096 ((set (tuple21 (tuple21 a (tuple21 a c)) (tuple21 b
  (tuple21 b d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a (tuple21 a c)) (tuple21 b (tuple21 b
  d)))))) (sort
  (set1 (tuple2 (tuple2 a1 (tuple2 a1 c1)) (tuple2 b1 (tuple2 b1 d1))))
  (t2tb4096 x))))

(declare-fun tb2t4096 (uni) (set (tuple21 (tuple21 a (tuple21 a c))
  (tuple21 b (tuple21 b d)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a (tuple21 a c)) (tuple21 b (tuple21 b
  d)))))) (! (= (tb2t4096 (t2tb4096 i)) i) :pattern ((t2tb4096 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 a1 (tuple2 a1 c1)) (tuple2 b1 (tuple2 b1 d1)))) j)
     (= (t2tb4096 (tb2t4096 j)) j)) :pattern ((t2tb4096 (tb2t4096 j))) )))

(declare-fun t2tb4097 ((tuple21 (tuple21 a (tuple21 a c)) (tuple21 b
  (tuple21 b d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a (tuple21 a c)) (tuple21 b (tuple21 b d)))))
  (sort (tuple2 (tuple2 a1 (tuple2 a1 c1)) (tuple2 b1 (tuple2 b1 d1)))
  (t2tb4097 x))))

(declare-fun tb2t4097 (uni) (tuple21 (tuple21 a (tuple21 a c)) (tuple21 b
  (tuple21 b d))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a (tuple21 a c)) (tuple21 b (tuple21 b d)))))
  (! (= (tb2t4097 (t2tb4097 i)) i) :pattern ((t2tb4097 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 (tuple2 a1 c1)) (tuple2 b1 (tuple2 b1 d1)))
     j) (= (t2tb4097 (tb2t4097 j)) j)) :pattern ((t2tb4097 (tb2t4097 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a b))) (k (set (tuple21 (tuple21 a c) (tuple21 b
  d)))) (x a) (y (tuple21 a c)) (z b) (w (tuple21 b d)))
  (= (mem (tuple2 (tuple2 a1 (tuple2 a1 c1)) (tuple2 b1 (tuple2 b1 d1)))
  (Tuple2 (tuple2 a1 (tuple2 a1 c1)) (tuple2 b1 (tuple2 b1 d1))
  (Tuple2 a1 (tuple2 a1 c1) (t2tb2 x) (t2tb133 y))
  (Tuple2 b1 (tuple2 b1 d1) (t2tb14 z) (t2tb692 w)))
  (parallel_product (tuple2 b1 d1) (tuple2 a1 c1) b1 a1 (t2tb11 h)
  (t2tb686 k)))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 z))) h) (mem24
  (tb2t691 (Tuple2 (tuple2 a1 c1) (tuple2 b1 d1) (t2tb133 y) (t2tb692 w)))
  k)))))

(declare-fun t2tb4098 ((set (tuple21 (tuple21 a c) (tuple21 b f)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a c) (tuple21 b f))))) (sort
  (set1 (tuple2 (tuple2 a1 c1) (tuple2 b1 f1))) (t2tb4098 x))))

(declare-fun tb2t4098 (uni) (set (tuple21 (tuple21 a c) (tuple21 b f))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a c) (tuple21 b f)))))
  (! (= (tb2t4098 (t2tb4098 i)) i) :pattern ((t2tb4098 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 c1) (tuple2 b1 f1))) j)
     (= (t2tb4098 (tb2t4098 j)) j)) :pattern ((t2tb4098 (tb2t4098 j))) )))

(declare-fun t2tb4099 ((tuple21 (tuple21 a c) (tuple21 b f))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a c) (tuple21 b f)))) (sort
  (tuple2 (tuple2 a1 c1) (tuple2 b1 f1)) (t2tb4099 x))))

(declare-fun tb2t4099 (uni) (tuple21 (tuple21 a c) (tuple21 b f)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a c) (tuple21 b f))))
  (! (= (tb2t4099 (t2tb4099 i)) i) :pattern ((t2tb4099 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 c1) (tuple2 b1 f1)) j)
     (= (t2tb4099 (tb2t4099 j)) j)) :pattern ((t2tb4099 (tb2t4099 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a b))) (k (set (tuple21 c f))) (x a) (y c) (z b)
  (w f))
  (= (mem (tuple2 (tuple2 a1 c1) (tuple2 b1 f1))
  (Tuple2 (tuple2 a1 c1) (tuple2 b1 f1) (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y))
  (Tuple2 b1 f1 (t2tb14 z) (t2tb2954 w)))
  (parallel_product f1 c1 b1 a1 (t2tb11 h) (t2tb2942 k)))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 z))) h) (mem45
  (tb2t2948 (Tuple2 c1 f1 (t2tb135 y) (t2tb2954 w))) k)))))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a b))) (k (set (tuple21 c d))) (x a) (y c) (z b)
  (w d))
  (= (mem24
  (tb2t691
  (Tuple2 (tuple2 a1 c1) (tuple2 b1 d1) (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y))
  (Tuple2 b1 d1 (t2tb14 z) (t2tb694 w)))) (parallel_product1 h k))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 z))) h) (mem21
  (tb2t693 (Tuple2 c1 d1 (t2tb135 y) (t2tb694 w))) k)))))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a b))) (k (set (tuple21 b e))) (x a) (y b) (z b)
  (w e))
  (= (mem (tuple2 (tuple2 a1 b1) (tuple2 b1 e1))
  (Tuple2 (tuple2 a1 b1) (tuple2 b1 e1) (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y))
  (Tuple2 b1 e1 (t2tb14 z) (t2tb2955 w)))
  (parallel_product e1 b1 b1 a1 (t2tb11 h) (t2tb2940 k)))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 z))) h) (mem38
  (tb2t2953 (Tuple2 b1 e1 (t2tb14 y) (t2tb2955 w))) k)))))

(declare-fun t2tb4100 ((set (tuple21 (tuple21 a a) (tuple21 b e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a a) (tuple21 b e))))) (sort
  (set1 (tuple2 (tuple2 a1 a1) (tuple2 b1 e1))) (t2tb4100 x))))

(declare-fun tb2t4100 (uni) (set (tuple21 (tuple21 a a) (tuple21 b e))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a a) (tuple21 b e)))))
  (! (= (tb2t4100 (t2tb4100 i)) i) :pattern ((t2tb4100 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 a1) (tuple2 b1 e1))) j)
     (= (t2tb4100 (tb2t4100 j)) j)) :pattern ((t2tb4100 (tb2t4100 j))) )))

(declare-fun t2tb4101 ((tuple21 (tuple21 a a) (tuple21 b e))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a a) (tuple21 b e)))) (sort
  (tuple2 (tuple2 a1 a1) (tuple2 b1 e1)) (t2tb4101 x))))

(declare-fun tb2t4101 (uni) (tuple21 (tuple21 a a) (tuple21 b e)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a a) (tuple21 b e))))
  (! (= (tb2t4101 (t2tb4101 i)) i) :pattern ((t2tb4101 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 a1) (tuple2 b1 e1)) j)
     (= (t2tb4101 (tb2t4101 j)) j)) :pattern ((t2tb4101 (tb2t4101 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a b))) (k (set (tuple21 a e))) (x a) (y a) (z b)
  (w e))
  (= (mem (tuple2 (tuple2 a1 a1) (tuple2 b1 e1))
  (Tuple2 (tuple2 a1 a1) (tuple2 b1 e1) (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y))
  (Tuple2 b1 e1 (t2tb14 z) (t2tb2955 w)))
  (parallel_product e1 a1 b1 a1 (t2tb11 h) (t2tb2943 k)))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 z))) h) (mem44
  (tb2t2949 (Tuple2 a1 e1 (t2tb2 y) (t2tb2955 w))) k)))))

(declare-fun t2tb61 ((set (tuple21 (tuple21 a a) (tuple21 b b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a a) (tuple21 b b))))) (sort
  (set1 (tuple2 (tuple2 a1 a1) (tuple2 b1 b1))) (t2tb61 x))))

(declare-fun tb2t61 (uni) (set (tuple21 (tuple21 a a) (tuple21 b b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a a) (tuple21 b b)))))
  (! (= (tb2t61 (t2tb61 i)) i) :pattern ((t2tb61 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 a1) (tuple2 b1 b1))) j)
     (= (t2tb61 (tb2t61 j)) j)) :pattern ((t2tb61 (tb2t61 j))) )))

(declare-fun t2tb62 ((tuple21 (tuple21 a a) (tuple21 b b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a a) (tuple21 b b)))) (sort
  (tuple2 (tuple2 a1 a1) (tuple2 b1 b1)) (t2tb62 x))))

(declare-fun tb2t62 (uni) (tuple21 (tuple21 a a) (tuple21 b b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a a) (tuple21 b b))))
  (! (= (tb2t62 (t2tb62 i)) i) :pattern ((t2tb62 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 a1) (tuple2 b1 b1)) j)
     (= (t2tb62 (tb2t62 j)) j)) :pattern ((t2tb62 (tb2t62 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a b))) (k (set (tuple21 a b))) (x a) (y a) (z b)
  (w b))
  (= (mem (tuple2 (tuple2 a1 a1) (tuple2 b1 b1))
  (Tuple2 (tuple2 a1 a1) (tuple2 b1 b1) (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y))
  (Tuple2 b1 b1 (t2tb14 z) (t2tb14 w)))
  (parallel_product b1 a1 b1 a1 (t2tb11 h) (t2tb11 k)))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 z))) h) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 y) (t2tb14 w))) k)))))

;; mem_parallel_product
  (assert
  (forall ((c2 ty) (d2 ty))
  (forall ((h (set (tuple21 a b))) (k uni) (x a) (y uni) (z b) (w uni))
  (= (mem (tuple2 (tuple2 a1 c2) (tuple2 b1 d2))
  (Tuple2 (tuple2 a1 c2) (tuple2 b1 d2) (Tuple2 a1 c2 (t2tb2 x) y)
  (Tuple2 b1 d2 (t2tb14 z) w)) (parallel_product d2 c2 b1 a1 (t2tb11 h) k))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 z))) h) (mem
  (tuple2 c2 d2) (Tuple2 c2 d2 y w) k))))))

;; mem_parallel_product
  (assert
  (forall ((a2 ty) (b2 ty) (c2 ty) (d2 ty))
  (forall ((h uni) (k uni) (x uni) (y uni) (z uni) (w uni))
  (= (mem (tuple2 (tuple2 a2 c2) (tuple2 b2 d2))
  (Tuple2 (tuple2 a2 c2) (tuple2 b2 d2) (Tuple2 a2 c2 x y)
  (Tuple2 b2 d2 z w)) (parallel_product d2 c2 b2 a2 h k))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x z) h) (mem (tuple2 c2 d2)
  (Tuple2 c2 d2 y w) k))))))

(declare-fun infix_plmngt (ty ty uni uni) uni)

;; infix +->_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (set1 (tuple2 a2 b2)))
  (infix_plmngt b2 a2 x x1)))))

;; mem_partial_function_set
  (assert
  (forall ((s (set (tuple21 b d))) (t (set (tuple21 e f)))
  (f2 (set (tuple21 (tuple21 b d) (tuple21 e f)))))
  (= (mem (set1 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1))) (t2tb2944 f2)
  (infix_plmngt (tuple2 e1 f1) (tuple2 b1 d1) (t2tb687 s) (t2tb3314 t)))
  (and (mem (set1 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1))) (t2tb2944 f2)
  (relation (tuple2 e1 f1) (tuple2 b1 d1) (t2tb687 s) (t2tb3314 t)))
  (forall ((x (tuple21 b d)) (y1 (tuple21 e f)) (y2 (tuple21 e f)))
  (=>
  (and (mem43
  (tb2t2950 (Tuple2 (tuple2 b1 d1) (tuple2 e1 f1) (t2tb692 x) (t2tb3315 y1)))
  f2) (mem43
  (tb2t2950 (Tuple2 (tuple2 b1 d1) (tuple2 e1 f1) (t2tb692 x) (t2tb3315 y2)))
  f2)) (= y1 y2)))))))

;; mem_partial_function_set
  (assert
  (forall ((s (set d)) (t (set f)) (f2 (set (tuple21 d f))))
  (= (mem41 f2 (tb2t2939 (infix_plmngt f1 d1 (t2tb690 s) (t2tb2946 t))))
  (and (mem41 f2 (relation10 s t))
  (forall ((x d) (y1 f) (y2 f))
  (=>
  (and (mem40 (tb2t2952 (Tuple2 d1 f1 (t2tb694 x) (t2tb2954 y1))) f2) (mem40
  (tb2t2952 (Tuple2 d1 f1 (t2tb694 x) (t2tb2954 y2))) f2)) (= y1 y2)))))))

;; mem_partial_function_set
  (assert
  (forall ((s (set (tuple21 a c))) (t (set (tuple21 e f)))
  (f2 (set (tuple21 (tuple21 a c) (tuple21 e f)))))
  (= (mem (set1 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1))) (t2tb2945 f2)
  (infix_plmngt (tuple2 e1 f1) (tuple2 a1 c1) (t2tb129 s) (t2tb3314 t)))
  (and (mem (set1 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1))) (t2tb2945 f2)
  (relation (tuple2 e1 f1) (tuple2 a1 c1) (t2tb129 s) (t2tb3314 t)))
  (forall ((x (tuple21 a c)) (y1 (tuple21 e f)) (y2 (tuple21 e f)))
  (=>
  (and (mem42
  (tb2t2951 (Tuple2 (tuple2 a1 c1) (tuple2 e1 f1) (t2tb133 x) (t2tb3315 y1)))
  f2) (mem42
  (tb2t2951 (Tuple2 (tuple2 a1 c1) (tuple2 e1 f1) (t2tb133 x) (t2tb3315 y2)))
  f2)) (= y1 y2)))))))

;; mem_partial_function_set
  (assert
  (forall ((s (set (tuple21 a c))) (t (set (tuple21 b d)))
  (f2 (set (tuple21 (tuple21 a c) (tuple21 b d)))))
  (= (mem (set1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))) (t2tb686 f2)
  (infix_plmngt (tuple2 b1 d1) (tuple2 a1 c1) (t2tb129 s) (t2tb687 t)))
  (and (mem (set1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))) (t2tb686 f2)
  (relation (tuple2 b1 d1) (tuple2 a1 c1) (t2tb129 s) (t2tb687 t)))
  (forall ((x (tuple21 a c)) (y1 (tuple21 b d)) (y2 (tuple21 b d)))
  (=>
  (and (mem24
  (tb2t691 (Tuple2 (tuple2 a1 c1) (tuple2 b1 d1) (t2tb133 x) (t2tb692 y1)))
  f2) (mem24
  (tb2t691 (Tuple2 (tuple2 a1 c1) (tuple2 b1 d1) (t2tb133 x) (t2tb692 y2)))
  f2)) (= y1 y2)))))))

;; mem_partial_function_set
  (assert
  (forall ((s (set c)) (t (set f)) (f2 (set (tuple21 c f))))
  (= (mem (set1 (tuple2 c1 f1)) (t2tb2942 f2)
  (infix_plmngt f1 c1 (t2tb132 s) (t2tb2946 t)))
  (and (mem (set1 (tuple2 c1 f1)) (t2tb2942 f2)
  (relation f1 c1 (t2tb132 s) (t2tb2946 t)))
  (forall ((x c) (y1 f) (y2 f))
  (=>
  (and (mem45 (tb2t2948 (Tuple2 c1 f1 (t2tb135 x) (t2tb2954 y1))) f2) (mem45
  (tb2t2948 (Tuple2 c1 f1 (t2tb135 x) (t2tb2954 y2))) f2)) (= y1 y2)))))))

;; mem_partial_function_set
  (assert
  (forall ((s (set c)) (t (set d)) (f2 (set (tuple21 c d))))
  (= (mem22 f2 (tb2t688 (infix_plmngt d1 c1 (t2tb132 s) (t2tb690 t))))
  (and (mem22 f2 (relation7 s t))
  (forall ((x c) (y1 d) (y2 d))
  (=>
  (and (mem21 (tb2t693 (Tuple2 c1 d1 (t2tb135 x) (t2tb694 y1))) f2) (mem21
  (tb2t693 (Tuple2 c1 d1 (t2tb135 x) (t2tb694 y2))) f2)) (= y1 y2)))))))

;; mem_partial_function_set
  (assert
  (forall ((s (set b)) (t (set e)) (f2 (set (tuple21 b e))))
  (= (mem39 f2 (tb2t2941 (infix_plmngt e1 b1 (t2tb12 s) (t2tb2947 t))))
  (and (mem39 f2 (relation11 s t))
  (forall ((x b) (y1 e) (y2 e))
  (=>
  (and (mem38 (tb2t2953 (Tuple2 b1 e1 (t2tb14 x) (t2tb2955 y1))) f2) (mem38
  (tb2t2953 (Tuple2 b1 e1 (t2tb14 x) (t2tb2955 y2))) f2)) (= y1 y2)))))))

;; mem_partial_function_set
  (assert
  (forall ((s (set a)) (t (set e)) (f2 (set (tuple21 a e))))
  (= (mem (set1 (tuple2 a1 e1)) (t2tb2943 f2)
  (infix_plmngt e1 a1 (t2tb1 s) (t2tb2947 t)))
  (and (mem (set1 (tuple2 a1 e1)) (t2tb2943 f2)
  (relation e1 a1 (t2tb1 s) (t2tb2947 t)))
  (forall ((x a) (y1 e) (y2 e))
  (=>
  (and (mem44 (tb2t2949 (Tuple2 a1 e1 (t2tb2 x) (t2tb2955 y1))) f2) (mem44
  (tb2t2949 (Tuple2 a1 e1 (t2tb2 x) (t2tb2955 y2))) f2)) (= y1 y2)))))))

;; mem_partial_function_set
  (assert
  (forall ((s (set a)) (t (set b)) (f2 (set (tuple21 a b))))
  (= (mem4 f2 (tb2t10 (infix_plmngt b1 a1 (t2tb1 s) (t2tb12 t))))
  (and (mem4 f2 (relation1 s t))
  (forall ((x a) (y1 b) (y2 b))
  (=>
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y1))) f2) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y2))) f2)) (= y1 y2)))))))

;; mem_partial_function_set
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (f2 uni))
  (and
  (=> (mem (set1 (tuple2 a2 b2)) f2 (infix_plmngt b2 a2 s t))
  (and (mem (set1 (tuple2 a2 b2)) f2 (relation b2 a2 s t))
  (forall ((x uni) (y1 uni) (y2 uni))
  (=> (sort b2 y1)
  (=> (sort b2 y2)
  (=>
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y1) f2) (mem (tuple2 a2 b2)
  (Tuple2 a2 b2 x y2) f2)) (= y1 y2)))))))
  (=>
  (and (mem (set1 (tuple2 a2 b2)) f2 (relation b2 a2 s t))
  (forall ((x uni) (y1 uni) (y2 uni))
  (=> (sort a2 x)
  (=> (sort b2 y1)
  (=> (sort b2 y2)
  (=>
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y1) f2) (mem (tuple2 a2 b2)
  (Tuple2 a2 b2 x y2) f2)) (= y1 y2))))))) (mem (set1 (tuple2 a2 b2)) f2
  (infix_plmngt b2 a2 s t)))))))

(declare-fun infix_mnmngt (ty ty uni uni) uni)

;; infix -->_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (set1 (tuple2 a2 b2)))
  (infix_mnmngt b2 a2 x x1)))))

;; mem_total_function_set
  (assert
  (forall ((b2 ty))
  (forall ((s (set (tuple21 c f))) (t uni) (x uni))
  (= (mem (set1 (tuple2 (tuple2 c1 f1) b2)) x
  (infix_mnmngt b2 (tuple2 c1 f1) (t2tb2942 s) t))
  (and (mem (set1 (tuple2 (tuple2 c1 f1) b2)) x
  (infix_plmngt b2 (tuple2 c1 f1) (t2tb2942 s) t)) (infix_eqeq36
  (tb2t2942 (dom b2 (tuple2 c1 f1) x)) s))))))

;; mem_total_function_set
  (assert
  (forall ((b2 ty))
  (forall ((s (set (tuple21 a e))) (t uni) (x uni))
  (= (mem (set1 (tuple2 (tuple2 a1 e1) b2)) x
  (infix_mnmngt b2 (tuple2 a1 e1) (t2tb2943 s) t))
  (and (mem (set1 (tuple2 (tuple2 a1 e1) b2)) x
  (infix_plmngt b2 (tuple2 a1 e1) (t2tb2943 s) t)) (infix_eqeq35
  (tb2t2943 (dom b2 (tuple2 a1 e1) x)) s))))))

;; mem_total_function_set
  (assert
  (forall ((b2 ty))
  (forall ((s (set (tuple21 (tuple21 b d) (tuple21 e f)))) (t uni) (x uni))
  (= (mem (set1 (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) b2)) x
  (infix_mnmngt b2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (t2tb2944 s) t))
  (and (mem (set1 (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) b2)) x
  (infix_plmngt b2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (t2tb2944 s) t))
  (infix_eqeq34 (tb2t2944 (dom b2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) x))
  s))))))

;; mem_total_function_set
  (assert
  (forall ((b2 ty))
  (forall ((s (set (tuple21 (tuple21 a c) (tuple21 e f)))) (t uni) (x uni))
  (= (mem (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) b2)) x
  (infix_mnmngt b2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (t2tb2945 s) t))
  (and (mem (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) b2)) x
  (infix_plmngt b2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (t2tb2945 s) t))
  (infix_eqeq33 (tb2t2945 (dom b2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) x))
  s))))))

;; mem_total_function_set
  (assert
  (forall ((b2 ty))
  (forall ((s (set (set (tuple21 d f)))) (t uni) (x uni))
  (= (mem (set1 (tuple2 (set1 (tuple2 d1 f1)) b2)) x
  (infix_mnmngt b2 (set1 (tuple2 d1 f1)) (t2tb2939 s) t))
  (and (mem (set1 (tuple2 (set1 (tuple2 d1 f1)) b2)) x
  (infix_plmngt b2 (set1 (tuple2 d1 f1)) (t2tb2939 s) t)) (infix_eqeq37
  (tb2t2939 (dom b2 (set1 (tuple2 d1 f1)) x)) s))))))

;; mem_total_function_set
  (assert
  (forall ((b2 ty))
  (forall ((s (set (tuple21 d f))) (t uni) (x uni))
  (= (mem (set1 (tuple2 (tuple2 d1 f1) b2)) x
  (infix_mnmngt b2 (tuple2 d1 f1) (t2tb2938 s) t))
  (and (mem (set1 (tuple2 (tuple2 d1 f1) b2)) x
  (infix_plmngt b2 (tuple2 d1 f1) (t2tb2938 s) t)) (infix_eqeq32
  (tb2t2938 (dom b2 (tuple2 d1 f1) x)) s))))))

;; mem_total_function_set
  (assert
  (forall ((b2 ty))
  (forall ((s (set (set (tuple21 b e)))) (t uni) (x uni))
  (= (mem (set1 (tuple2 (set1 (tuple2 b1 e1)) b2)) x
  (infix_mnmngt b2 (set1 (tuple2 b1 e1)) (t2tb2941 s) t))
  (and (mem (set1 (tuple2 (set1 (tuple2 b1 e1)) b2)) x
  (infix_plmngt b2 (set1 (tuple2 b1 e1)) (t2tb2941 s) t)) (infix_eqeq38
  (tb2t2941 (dom b2 (set1 (tuple2 b1 e1)) x)) s))))))

;; mem_total_function_set
  (assert
  (forall ((b2 ty))
  (forall ((s (set (tuple21 b e))) (t uni) (x uni))
  (= (mem (set1 (tuple2 (tuple2 b1 e1) b2)) x
  (infix_mnmngt b2 (tuple2 b1 e1) (t2tb2940 s) t))
  (and (mem (set1 (tuple2 (tuple2 b1 e1) b2)) x
  (infix_plmngt b2 (tuple2 b1 e1) (t2tb2940 s) t)) (infix_eqeq31
  (tb2t2940 (dom b2 (tuple2 b1 e1) x)) s))))))

;; mem_total_function_set
  (assert
  (forall ((b2 ty))
  (forall ((s (set f)) (t uni) (x uni))
  (= (mem (set1 (tuple2 f1 b2)) x (infix_mnmngt b2 f1 (t2tb2946 s) t))
  (and (mem (set1 (tuple2 f1 b2)) x (infix_plmngt b2 f1 (t2tb2946 s) t))
  (infix_eqeq30 (tb2t2946 (dom b2 f1 x)) s))))))

;; mem_total_function_set
  (assert
  (forall ((b2 ty))
  (forall ((s (set e)) (t uni) (x uni))
  (= (mem (set1 (tuple2 e1 b2)) x (infix_mnmngt b2 e1 (t2tb2947 s) t))
  (and (mem (set1 (tuple2 e1 b2)) x (infix_plmngt b2 e1 (t2tb2947 s) t))
  (infix_eqeq29 (tb2t2947 (dom b2 e1 x)) s))))))

;; mem_total_function_set
  (assert
  (forall ((b2 ty))
  (forall ((s (set (tuple21 (tuple21 a c) (tuple21 b d)))) (t uni) (x uni))
  (= (mem (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) b2)) x
  (infix_mnmngt b2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb686 s) t))
  (and (mem (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) b2)) x
  (infix_plmngt b2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb686 s) t))
  (infix_eqeq15 (tb2t686 (dom b2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) x))
  s))))))

;; mem_total_function_set
  (assert
  (forall ((b2 ty))
  (forall ((s (set (set (tuple21 c d)))) (t uni) (x uni))
  (= (mem (set1 (tuple2 (set1 (tuple2 c1 d1)) b2)) x
  (infix_mnmngt b2 (set1 (tuple2 c1 d1)) (t2tb688 s) t))
  (and (mem (set1 (tuple2 (set1 (tuple2 c1 d1)) b2)) x
  (infix_plmngt b2 (set1 (tuple2 c1 d1)) (t2tb688 s) t)) (infix_eqeq16
  (tb2t688 (dom b2 (set1 (tuple2 c1 d1)) x)) s))))))

;; mem_total_function_set
  (assert
  (forall ((b2 ty))
  (forall ((s (set (tuple21 c d))) (t uni) (x uni))
  (= (mem (set1 (tuple2 (tuple2 c1 d1) b2)) x
  (infix_mnmngt b2 (tuple2 c1 d1) (t2tb689 s) t))
  (and (mem (set1 (tuple2 (tuple2 c1 d1) b2)) x
  (infix_plmngt b2 (tuple2 c1 d1) (t2tb689 s) t)) (infix_eqeq14
  (tb2t689 (dom b2 (tuple2 c1 d1) x)) s))))))

;; mem_total_function_set
  (assert
  (forall ((s (set d)) (t (set f)) (x (set (tuple21 d f))))
  (= (mem41 x (tb2t2939 (infix_mnmngt f1 d1 (t2tb690 s) (t2tb2946 t))))
  (and (mem41 x (tb2t2939 (infix_plmngt f1 d1 (t2tb690 s) (t2tb2946 t))))
  (infix_eqeq13 (tb2t690 (dom f1 d1 (t2tb2938 x))) s)))))

;; mem_total_function_set
  (assert
  (forall ((b2 ty))
  (forall ((s (set d)) (t uni) (x uni))
  (= (mem (set1 (tuple2 d1 b2)) x (infix_mnmngt b2 d1 (t2tb690 s) t))
  (and (mem (set1 (tuple2 d1 b2)) x (infix_plmngt b2 d1 (t2tb690 s) t))
  (infix_eqeq13 (tb2t690 (dom b2 d1 x)) s))))))

;; mem_total_function_set
  (assert
  (forall ((s (set c)) (t (set d)) (x (set (tuple21 c d))))
  (= (mem22 x (tb2t688 (infix_mnmngt d1 c1 (t2tb132 s) (t2tb690 t))))
  (and (mem22 x (tb2t688 (infix_plmngt d1 c1 (t2tb132 s) (t2tb690 t))))
  (infix_eqeq7 (tb2t132 (dom d1 c1 (t2tb689 x))) s)))))

;; mem_total_function_set
  (assert
  (forall ((b2 ty))
  (forall ((s (set c)) (t uni) (x uni))
  (= (mem (set1 (tuple2 c1 b2)) x (infix_mnmngt b2 c1 (t2tb132 s) t))
  (and (mem (set1 (tuple2 c1 b2)) x (infix_plmngt b2 c1 (t2tb132 s) t))
  (infix_eqeq7 (tb2t132 (dom b2 c1 x)) s))))))

;; mem_total_function_set
  (assert
  (forall ((b2 ty))
  (forall ((s (set (set (tuple21 a b)))) (t uni) (x uni))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 b1)) b2)) x
  (infix_mnmngt b2 (set1 (tuple2 a1 b1)) (t2tb10 s) t))
  (and (mem (set1 (tuple2 (set1 (tuple2 a1 b1)) b2)) x
  (infix_plmngt b2 (set1 (tuple2 a1 b1)) (t2tb10 s) t)) (infix_eqeq5
  (tb2t10 (dom b2 (set1 (tuple2 a1 b1)) x)) s))))))

;; mem_total_function_set
  (assert
  (forall ((b2 ty))
  (forall ((s (set (tuple21 a b))) (t uni) (x uni))
  (= (mem (set1 (tuple2 (tuple2 a1 b1) b2)) x
  (infix_mnmngt b2 (tuple2 a1 b1) (t2tb11 s) t))
  (and (mem (set1 (tuple2 (tuple2 a1 b1) b2)) x
  (infix_plmngt b2 (tuple2 a1 b1) (t2tb11 s) t)) (infix_eqeq4
  (tb2t11 (dom b2 (tuple2 a1 b1) x)) s))))))

;; mem_total_function_set
  (assert
  (forall ((s (set b)) (t (set e)) (x (set (tuple21 b e))))
  (= (mem39 x (tb2t2941 (infix_mnmngt e1 b1 (t2tb12 s) (t2tb2947 t))))
  (and (mem39 x (tb2t2941 (infix_plmngt e1 b1 (t2tb12 s) (t2tb2947 t))))
  (infix_eqeq3 (tb2t12 (dom e1 b1 (t2tb2940 x))) s)))))

;; mem_total_function_set
  (assert
  (forall ((b2 ty))
  (forall ((s (set b)) (t uni) (x uni))
  (= (mem (set1 (tuple2 b1 b2)) x (infix_mnmngt b2 b1 (t2tb12 s) t))
  (and (mem (set1 (tuple2 b1 b2)) x (infix_plmngt b2 b1 (t2tb12 s) t))
  (infix_eqeq3 (tb2t12 (dom b2 b1 x)) s))))))

;; mem_total_function_set
  (assert
  (forall ((s (set a)) (t (set b)) (x (set (tuple21 a b))))
  (= (mem4 x (tb2t10 (infix_mnmngt b1 a1 (t2tb1 s) (t2tb12 t))))
  (and (mem4 x (tb2t10 (infix_plmngt b1 a1 (t2tb1 s) (t2tb12 t))))
  (infix_eqeq1 (tb2t1 (dom b1 a1 (t2tb11 x))) s)))))

;; mem_total_function_set
  (assert
  (forall ((b2 ty))
  (forall ((s (set a)) (t uni) (x uni))
  (= (mem (set1 (tuple2 a1 b2)) x (infix_mnmngt b2 a1 (t2tb1 s) t))
  (and (mem (set1 (tuple2 a1 b2)) x (infix_plmngt b2 a1 (t2tb1 s) t))
  (infix_eqeq1 (tb2t1 (dom b2 a1 x)) s))))))

;; mem_total_function_set
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (x uni))
  (= (mem (set1 (tuple2 a2 b2)) x (infix_mnmngt b2 a2 s t))
  (and (mem (set1 (tuple2 a2 b2)) x (infix_plmngt b2 a2 s t)) (infix_eqeq a2
  (dom b2 a2 x) s))))))

(declare-fun infix_gtplgt (ty ty uni uni) uni)

;; infix >+>_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (set1 (tuple2 a2 b2)))
  (infix_gtplgt b2 a2 x x1)))))

;; mem_partial_injection_set
  (assert
  (forall ((s (set f)) (t (set d)) (x (set (tuple21 f d))))
  (= (mem (set1 (tuple2 f1 d1)) (t2tb3286 x)
  (infix_gtplgt d1 f1 (t2tb2946 s) (t2tb690 t)))
  (and (mem (set1 (tuple2 f1 d1)) (t2tb3286 x)
  (infix_plmngt d1 f1 (t2tb2946 s) (t2tb690 t))) (mem41
  (tb2t2938 (inverse d1 f1 (t2tb3286 x)))
  (tb2t2939 (infix_plmngt f1 d1 (t2tb690 t) (t2tb2946 s))))))))

;; mem_partial_injection_set
  (assert
  (forall ((s (set e)) (t (set b)) (x (set (tuple21 e b))))
  (= (mem (set1 (tuple2 e1 b1)) (t2tb3332 x)
  (infix_gtplgt b1 e1 (t2tb2947 s) (t2tb12 t)))
  (and (mem (set1 (tuple2 e1 b1)) (t2tb3332 x)
  (infix_plmngt b1 e1 (t2tb2947 s) (t2tb12 t))) (mem39
  (tb2t2940 (inverse b1 e1 (t2tb3332 x)))
  (tb2t2941 (infix_plmngt e1 b1 (t2tb12 t) (t2tb2947 s))))))))

;; mem_partial_injection_set
  (assert
  (forall ((s (set d)) (t (set f)) (x (set (tuple21 d f))))
  (= (mem41 x (tb2t2939 (infix_gtplgt f1 d1 (t2tb690 s) (t2tb2946 t))))
  (and (mem41 x (tb2t2939 (infix_plmngt f1 d1 (t2tb690 s) (t2tb2946 t))))
  (mem (set1 (tuple2 f1 d1)) (inverse f1 d1 (t2tb2938 x))
  (infix_plmngt d1 f1 (t2tb2946 t) (t2tb690 s)))))))

;; mem_partial_injection_set
  (assert
  (forall ((s (set d)) (t (set c)) (x (set (tuple21 d c))))
  (= (mem (set1 (tuple2 d1 c1)) (t2tb829 x)
  (infix_gtplgt c1 d1 (t2tb690 s) (t2tb132 t)))
  (and (mem (set1 (tuple2 d1 c1)) (t2tb829 x)
  (infix_plmngt c1 d1 (t2tb690 s) (t2tb132 t))) (mem22
  (tb2t689 (inverse c1 d1 (t2tb829 x)))
  (tb2t688 (infix_plmngt d1 c1 (t2tb132 t) (t2tb690 s))))))))

;; mem_partial_injection_set
  (assert
  (forall ((s (set c)) (t (set d)) (x (set (tuple21 c d))))
  (= (mem22 x (tb2t688 (infix_gtplgt d1 c1 (t2tb132 s) (t2tb690 t))))
  (and (mem22 x (tb2t688 (infix_plmngt d1 c1 (t2tb132 s) (t2tb690 t)))) (mem
  (set1 (tuple2 d1 c1)) (inverse d1 c1 (t2tb689 x))
  (infix_plmngt c1 d1 (t2tb690 t) (t2tb132 s)))))))

;; mem_partial_injection_set
  (assert
  (forall ((s (set b)) (t (set e)) (x (set (tuple21 b e))))
  (= (mem39 x (tb2t2941 (infix_gtplgt e1 b1 (t2tb12 s) (t2tb2947 t))))
  (and (mem39 x (tb2t2941 (infix_plmngt e1 b1 (t2tb12 s) (t2tb2947 t)))) (mem
  (set1 (tuple2 e1 b1)) (inverse e1 b1 (t2tb2940 x))
  (infix_plmngt b1 e1 (t2tb2947 t) (t2tb12 s)))))))

;; mem_partial_injection_set
  (assert
  (forall ((s (set b)) (t (set a)) (x (set (tuple21 b a))))
  (= (mem (set1 (tuple2 b1 a1)) (t2tb37 x)
  (infix_gtplgt a1 b1 (t2tb12 s) (t2tb1 t)))
  (and (mem (set1 (tuple2 b1 a1)) (t2tb37 x)
  (infix_plmngt a1 b1 (t2tb12 s) (t2tb1 t))) (mem4
  (tb2t11 (inverse a1 b1 (t2tb37 x)))
  (tb2t10 (infix_plmngt b1 a1 (t2tb1 t) (t2tb12 s))))))))

;; mem_partial_injection_set
  (assert
  (forall ((s (set a)) (t (set b)) (x (set (tuple21 a b))))
  (= (mem4 x (tb2t10 (infix_gtplgt b1 a1 (t2tb1 s) (t2tb12 t))))
  (and (mem4 x (tb2t10 (infix_plmngt b1 a1 (t2tb1 s) (t2tb12 t)))) (mem
  (set1 (tuple2 b1 a1)) (inverse b1 a1 (t2tb11 x))
  (infix_plmngt a1 b1 (t2tb12 t) (t2tb1 s)))))))

;; mem_partial_injection_set
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (x uni))
  (= (mem (set1 (tuple2 a2 b2)) x (infix_gtplgt b2 a2 s t))
  (and (mem (set1 (tuple2 a2 b2)) x (infix_plmngt b2 a2 s t)) (mem
  (set1 (tuple2 b2 a2)) (inverse b2 a2 x) (infix_plmngt a2 b2 t s)))))))

(declare-fun infix_gtmngt (ty ty uni uni) uni)

;; infix >->_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (set1 (tuple2 a2 b2)))
  (infix_gtmngt b2 a2 x x1)))))

;; mem_total_injection_set
  (assert
  (forall ((s (set d)) (t (set f)) (x (set (tuple21 d f))))
  (= (mem41 x (tb2t2939 (infix_gtmngt f1 d1 (t2tb690 s) (t2tb2946 t))))
  (and (mem41 x (tb2t2939 (infix_gtplgt f1 d1 (t2tb690 s) (t2tb2946 t))))
  (mem41 x (tb2t2939 (infix_mnmngt f1 d1 (t2tb690 s) (t2tb2946 t))))))))

;; mem_total_injection_set
  (assert
  (forall ((s (set c)) (t (set d)) (x (set (tuple21 c d))))
  (= (mem22 x (tb2t688 (infix_gtmngt d1 c1 (t2tb132 s) (t2tb690 t))))
  (and (mem22 x (tb2t688 (infix_gtplgt d1 c1 (t2tb132 s) (t2tb690 t))))
  (mem22 x (tb2t688 (infix_mnmngt d1 c1 (t2tb132 s) (t2tb690 t))))))))

;; mem_total_injection_set
  (assert
  (forall ((s (set b)) (t (set e)) (x (set (tuple21 b e))))
  (= (mem39 x (tb2t2941 (infix_gtmngt e1 b1 (t2tb12 s) (t2tb2947 t))))
  (and (mem39 x (tb2t2941 (infix_gtplgt e1 b1 (t2tb12 s) (t2tb2947 t))))
  (mem39 x (tb2t2941 (infix_mnmngt e1 b1 (t2tb12 s) (t2tb2947 t))))))))

;; mem_total_injection_set
  (assert
  (forall ((s (set a)) (t (set b)) (x (set (tuple21 a b))))
  (= (mem4 x (tb2t10 (infix_gtmngt b1 a1 (t2tb1 s) (t2tb12 t))))
  (and (mem4 x (tb2t10 (infix_gtplgt b1 a1 (t2tb1 s) (t2tb12 t)))) (mem4 x
  (tb2t10 (infix_mnmngt b1 a1 (t2tb1 s) (t2tb12 t))))))))

;; mem_total_injection_set
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (x uni))
  (= (mem (set1 (tuple2 a2 b2)) x (infix_gtmngt b2 a2 s t))
  (and (mem (set1 (tuple2 a2 b2)) x (infix_gtplgt b2 a2 s t)) (mem
  (set1 (tuple2 a2 b2)) x (infix_mnmngt b2 a2 s t)))))))

(declare-fun infix_plmngtgt (ty ty uni uni) uni)

;; infix +->>_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (set1 (tuple2 a2 b2)))
  (infix_plmngtgt b2 a2 x x1)))))

;; mem_partial_surjection_set
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set (tuple21 c f))) (x uni))
  (= (mem (set1 (tuple2 a2 (tuple2 c1 f1))) x
  (infix_plmngtgt (tuple2 c1 f1) a2 s (t2tb2942 t)))
  (and (mem (set1 (tuple2 a2 (tuple2 c1 f1))) x
  (infix_plmngt (tuple2 c1 f1) a2 s (t2tb2942 t))) (infix_eqeq36
  (tb2t2942 (ran (tuple2 c1 f1) a2 x)) t))))))

;; mem_partial_surjection_set
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set (tuple21 a e))) (x uni))
  (= (mem (set1 (tuple2 a2 (tuple2 a1 e1))) x
  (infix_plmngtgt (tuple2 a1 e1) a2 s (t2tb2943 t)))
  (and (mem (set1 (tuple2 a2 (tuple2 a1 e1))) x
  (infix_plmngt (tuple2 a1 e1) a2 s (t2tb2943 t))) (infix_eqeq35
  (tb2t2943 (ran (tuple2 a1 e1) a2 x)) t))))))

;; mem_partial_surjection_set
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set (tuple21 (tuple21 b d) (tuple21 e f)))) (x uni))
  (= (mem (set1 (tuple2 a2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)))) x
  (infix_plmngtgt (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) a2 s (t2tb2944 t)))
  (and (mem (set1 (tuple2 a2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)))) x
  (infix_plmngt (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) a2 s (t2tb2944 t)))
  (infix_eqeq34 (tb2t2944 (ran (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) a2 x))
  t))))))

;; mem_partial_surjection_set
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set (tuple21 (tuple21 a c) (tuple21 e f)))) (x uni))
  (= (mem (set1 (tuple2 a2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)))) x
  (infix_plmngtgt (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) a2 s (t2tb2945 t)))
  (and (mem (set1 (tuple2 a2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)))) x
  (infix_plmngt (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) a2 s (t2tb2945 t)))
  (infix_eqeq33 (tb2t2945 (ran (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) a2 x))
  t))))))

;; mem_partial_surjection_set
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set (set (tuple21 d f)))) (x uni))
  (= (mem (set1 (tuple2 a2 (set1 (tuple2 d1 f1)))) x
  (infix_plmngtgt (set1 (tuple2 d1 f1)) a2 s (t2tb2939 t)))
  (and (mem (set1 (tuple2 a2 (set1 (tuple2 d1 f1)))) x
  (infix_plmngt (set1 (tuple2 d1 f1)) a2 s (t2tb2939 t))) (infix_eqeq37
  (tb2t2939 (ran (set1 (tuple2 d1 f1)) a2 x)) t))))))

;; mem_partial_surjection_set
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set (tuple21 d f))) (x uni))
  (= (mem (set1 (tuple2 a2 (tuple2 d1 f1))) x
  (infix_plmngtgt (tuple2 d1 f1) a2 s (t2tb2938 t)))
  (and (mem (set1 (tuple2 a2 (tuple2 d1 f1))) x
  (infix_plmngt (tuple2 d1 f1) a2 s (t2tb2938 t))) (infix_eqeq32
  (tb2t2938 (ran (tuple2 d1 f1) a2 x)) t))))))

;; mem_partial_surjection_set
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set (set (tuple21 b e)))) (x uni))
  (= (mem (set1 (tuple2 a2 (set1 (tuple2 b1 e1)))) x
  (infix_plmngtgt (set1 (tuple2 b1 e1)) a2 s (t2tb2941 t)))
  (and (mem (set1 (tuple2 a2 (set1 (tuple2 b1 e1)))) x
  (infix_plmngt (set1 (tuple2 b1 e1)) a2 s (t2tb2941 t))) (infix_eqeq38
  (tb2t2941 (ran (set1 (tuple2 b1 e1)) a2 x)) t))))))

;; mem_partial_surjection_set
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set (tuple21 b e))) (x uni))
  (= (mem (set1 (tuple2 a2 (tuple2 b1 e1))) x
  (infix_plmngtgt (tuple2 b1 e1) a2 s (t2tb2940 t)))
  (and (mem (set1 (tuple2 a2 (tuple2 b1 e1))) x
  (infix_plmngt (tuple2 b1 e1) a2 s (t2tb2940 t))) (infix_eqeq31
  (tb2t2940 (ran (tuple2 b1 e1) a2 x)) t))))))

;; mem_partial_surjection_set
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set f)) (x uni))
  (= (mem (set1 (tuple2 a2 f1)) x (infix_plmngtgt f1 a2 s (t2tb2946 t)))
  (and (mem (set1 (tuple2 a2 f1)) x (infix_plmngt f1 a2 s (t2tb2946 t)))
  (infix_eqeq30 (tb2t2946 (ran f1 a2 x)) t))))))

;; mem_partial_surjection_set
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set e)) (x uni))
  (= (mem (set1 (tuple2 a2 e1)) x (infix_plmngtgt e1 a2 s (t2tb2947 t)))
  (and (mem (set1 (tuple2 a2 e1)) x (infix_plmngt e1 a2 s (t2tb2947 t)))
  (infix_eqeq29 (tb2t2947 (ran e1 a2 x)) t))))))

;; mem_partial_surjection_set
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set (tuple21 (tuple21 a c) (tuple21 b d)))) (x uni))
  (= (mem (set1 (tuple2 a2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))) x
  (infix_plmngtgt (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) a2 s (t2tb686 t)))
  (and (mem (set1 (tuple2 a2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))) x
  (infix_plmngt (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) a2 s (t2tb686 t)))
  (infix_eqeq15 (tb2t686 (ran (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) a2 x))
  t))))))

;; mem_partial_surjection_set
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set (set (tuple21 c d)))) (x uni))
  (= (mem (set1 (tuple2 a2 (set1 (tuple2 c1 d1)))) x
  (infix_plmngtgt (set1 (tuple2 c1 d1)) a2 s (t2tb688 t)))
  (and (mem (set1 (tuple2 a2 (set1 (tuple2 c1 d1)))) x
  (infix_plmngt (set1 (tuple2 c1 d1)) a2 s (t2tb688 t))) (infix_eqeq16
  (tb2t688 (ran (set1 (tuple2 c1 d1)) a2 x)) t))))))

;; mem_partial_surjection_set
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set (tuple21 c d))) (x uni))
  (= (mem (set1 (tuple2 a2 (tuple2 c1 d1))) x
  (infix_plmngtgt (tuple2 c1 d1) a2 s (t2tb689 t)))
  (and (mem (set1 (tuple2 a2 (tuple2 c1 d1))) x
  (infix_plmngt (tuple2 c1 d1) a2 s (t2tb689 t))) (infix_eqeq14
  (tb2t689 (ran (tuple2 c1 d1) a2 x)) t))))))

;; mem_partial_surjection_set
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set d)) (x uni))
  (= (mem (set1 (tuple2 a2 d1)) x (infix_plmngtgt d1 a2 s (t2tb690 t)))
  (and (mem (set1 (tuple2 a2 d1)) x (infix_plmngt d1 a2 s (t2tb690 t)))
  (infix_eqeq13 (tb2t690 (ran d1 a2 x)) t))))))

;; mem_partial_surjection_set
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set c)) (x uni))
  (= (mem (set1 (tuple2 a2 c1)) x (infix_plmngtgt c1 a2 s (t2tb132 t)))
  (and (mem (set1 (tuple2 a2 c1)) x (infix_plmngt c1 a2 s (t2tb132 t)))
  (infix_eqeq7 (tb2t132 (ran c1 a2 x)) t))))))

;; mem_partial_surjection_set
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set (set (tuple21 a b)))) (x uni))
  (= (mem (set1 (tuple2 a2 (set1 (tuple2 a1 b1)))) x
  (infix_plmngtgt (set1 (tuple2 a1 b1)) a2 s (t2tb10 t)))
  (and (mem (set1 (tuple2 a2 (set1 (tuple2 a1 b1)))) x
  (infix_plmngt (set1 (tuple2 a1 b1)) a2 s (t2tb10 t))) (infix_eqeq5
  (tb2t10 (ran (set1 (tuple2 a1 b1)) a2 x)) t))))))

;; mem_partial_surjection_set
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set (tuple21 a b))) (x uni))
  (= (mem (set1 (tuple2 a2 (tuple2 a1 b1))) x
  (infix_plmngtgt (tuple2 a1 b1) a2 s (t2tb11 t)))
  (and (mem (set1 (tuple2 a2 (tuple2 a1 b1))) x
  (infix_plmngt (tuple2 a1 b1) a2 s (t2tb11 t))) (infix_eqeq4
  (tb2t11 (ran (tuple2 a1 b1) a2 x)) t))))))

;; mem_partial_surjection_set
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set b)) (x uni))
  (= (mem (set1 (tuple2 a2 b1)) x (infix_plmngtgt b1 a2 s (t2tb12 t)))
  (and (mem (set1 (tuple2 a2 b1)) x (infix_plmngt b1 a2 s (t2tb12 t)))
  (infix_eqeq3 (tb2t12 (ran b1 a2 x)) t))))))

;; mem_partial_surjection_set
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set a)) (x uni))
  (= (mem (set1 (tuple2 a2 a1)) x (infix_plmngtgt a1 a2 s (t2tb1 t)))
  (and (mem (set1 (tuple2 a2 a1)) x (infix_plmngt a1 a2 s (t2tb1 t)))
  (infix_eqeq1 (tb2t1 (ran a1 a2 x)) t))))))

;; mem_partial_surjection_set
  (assert
  (forall ((s (set d)) (t (set f)) (x (set (tuple21 d f))))
  (= (mem41 x (tb2t2939 (infix_plmngtgt f1 d1 (t2tb690 s) (t2tb2946 t))))
  (and (mem41 x (tb2t2939 (infix_plmngt f1 d1 (t2tb690 s) (t2tb2946 t))))
  (infix_eqeq30 (tb2t2946 (ran f1 d1 (t2tb2938 x))) t)))))

;; mem_partial_surjection_set
  (assert
  (forall ((s (set c)) (t (set d)) (x (set (tuple21 c d))))
  (= (mem22 x (tb2t688 (infix_plmngtgt d1 c1 (t2tb132 s) (t2tb690 t))))
  (and (mem22 x (tb2t688 (infix_plmngt d1 c1 (t2tb132 s) (t2tb690 t))))
  (infix_eqeq13 (tb2t690 (ran d1 c1 (t2tb689 x))) t)))))

;; mem_partial_surjection_set
  (assert
  (forall ((s (set b)) (t (set e)) (x (set (tuple21 b e))))
  (= (mem39 x (tb2t2941 (infix_plmngtgt e1 b1 (t2tb12 s) (t2tb2947 t))))
  (and (mem39 x (tb2t2941 (infix_plmngt e1 b1 (t2tb12 s) (t2tb2947 t))))
  (infix_eqeq29 (tb2t2947 (ran e1 b1 (t2tb2940 x))) t)))))

;; mem_partial_surjection_set
  (assert
  (forall ((s (set a)) (t (set b)) (x (set (tuple21 a b))))
  (= (mem4 x (tb2t10 (infix_plmngtgt b1 a1 (t2tb1 s) (t2tb12 t))))
  (and (mem4 x (tb2t10 (infix_plmngt b1 a1 (t2tb1 s) (t2tb12 t))))
  (infix_eqeq3 (tb2t12 (ran b1 a1 (t2tb11 x))) t)))))

;; mem_partial_surjection_set
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (x uni))
  (= (mem (set1 (tuple2 a2 b2)) x (infix_plmngtgt b2 a2 s t))
  (and (mem (set1 (tuple2 a2 b2)) x (infix_plmngt b2 a2 s t)) (infix_eqeq b2
  (ran b2 a2 x) t))))))

(declare-fun infix_mnmngtgt (ty ty uni uni) uni)

;; infix -->>_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (set1 (tuple2 a2 b2)))
  (infix_mnmngtgt b2 a2 x x1)))))

;; mem_total_surjection_set
  (assert
  (forall ((s (set d)) (t (set f)) (x (set (tuple21 d f))))
  (= (mem41 x (tb2t2939 (infix_mnmngtgt f1 d1 (t2tb690 s) (t2tb2946 t))))
  (and (mem41 x (tb2t2939 (infix_plmngtgt f1 d1 (t2tb690 s) (t2tb2946 t))))
  (mem41 x (tb2t2939 (infix_mnmngt f1 d1 (t2tb690 s) (t2tb2946 t))))))))

;; mem_total_surjection_set
  (assert
  (forall ((s (set c)) (t (set d)) (x (set (tuple21 c d))))
  (= (mem22 x (tb2t688 (infix_mnmngtgt d1 c1 (t2tb132 s) (t2tb690 t))))
  (and (mem22 x (tb2t688 (infix_plmngtgt d1 c1 (t2tb132 s) (t2tb690 t))))
  (mem22 x (tb2t688 (infix_mnmngt d1 c1 (t2tb132 s) (t2tb690 t))))))))

;; mem_total_surjection_set
  (assert
  (forall ((s (set b)) (t (set e)) (x (set (tuple21 b e))))
  (= (mem39 x (tb2t2941 (infix_mnmngtgt e1 b1 (t2tb12 s) (t2tb2947 t))))
  (and (mem39 x (tb2t2941 (infix_plmngtgt e1 b1 (t2tb12 s) (t2tb2947 t))))
  (mem39 x (tb2t2941 (infix_mnmngt e1 b1 (t2tb12 s) (t2tb2947 t))))))))

;; mem_total_surjection_set
  (assert
  (forall ((s (set a)) (t (set b)) (x (set (tuple21 a b))))
  (= (mem4 x (tb2t10 (infix_mnmngtgt b1 a1 (t2tb1 s) (t2tb12 t))))
  (and (mem4 x (tb2t10 (infix_plmngtgt b1 a1 (t2tb1 s) (t2tb12 t)))) (mem4 x
  (tb2t10 (infix_mnmngt b1 a1 (t2tb1 s) (t2tb12 t))))))))

;; mem_total_surjection_set
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (x uni))
  (= (mem (set1 (tuple2 a2 b2)) x (infix_mnmngtgt b2 a2 s t))
  (and (mem (set1 (tuple2 a2 b2)) x (infix_plmngtgt b2 a2 s t)) (mem
  (set1 (tuple2 a2 b2)) x (infix_mnmngt b2 a2 s t)))))))

(declare-fun infix_gtplgtgt (ty ty uni uni) uni)

;; infix >+>>_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (set1 (tuple2 a2 b2)))
  (infix_gtplgtgt b2 a2 x x1)))))

;; mem_partial_bijection_set
  (assert
  (forall ((s (set d)) (t (set f)) (x (set (tuple21 d f))))
  (= (mem41 x (tb2t2939 (infix_gtplgtgt f1 d1 (t2tb690 s) (t2tb2946 t))))
  (and (mem41 x (tb2t2939 (infix_gtplgt f1 d1 (t2tb690 s) (t2tb2946 t))))
  (mem41 x (tb2t2939 (infix_plmngtgt f1 d1 (t2tb690 s) (t2tb2946 t))))))))

;; mem_partial_bijection_set
  (assert
  (forall ((s (set c)) (t (set d)) (x (set (tuple21 c d))))
  (= (mem22 x (tb2t688 (infix_gtplgtgt d1 c1 (t2tb132 s) (t2tb690 t))))
  (and (mem22 x (tb2t688 (infix_gtplgt d1 c1 (t2tb132 s) (t2tb690 t))))
  (mem22 x (tb2t688 (infix_plmngtgt d1 c1 (t2tb132 s) (t2tb690 t))))))))

;; mem_partial_bijection_set
  (assert
  (forall ((s (set b)) (t (set e)) (x (set (tuple21 b e))))
  (= (mem39 x (tb2t2941 (infix_gtplgtgt e1 b1 (t2tb12 s) (t2tb2947 t))))
  (and (mem39 x (tb2t2941 (infix_gtplgt e1 b1 (t2tb12 s) (t2tb2947 t))))
  (mem39 x (tb2t2941 (infix_plmngtgt e1 b1 (t2tb12 s) (t2tb2947 t))))))))

;; mem_partial_bijection_set
  (assert
  (forall ((s (set a)) (t (set b)) (x (set (tuple21 a b))))
  (= (mem4 x (tb2t10 (infix_gtplgtgt b1 a1 (t2tb1 s) (t2tb12 t))))
  (and (mem4 x (tb2t10 (infix_gtplgt b1 a1 (t2tb1 s) (t2tb12 t)))) (mem4 x
  (tb2t10 (infix_plmngtgt b1 a1 (t2tb1 s) (t2tb12 t))))))))

;; mem_partial_bijection_set
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (x uni))
  (= (mem (set1 (tuple2 a2 b2)) x (infix_gtplgtgt b2 a2 s t))
  (and (mem (set1 (tuple2 a2 b2)) x (infix_gtplgt b2 a2 s t)) (mem
  (set1 (tuple2 a2 b2)) x (infix_plmngtgt b2 a2 s t)))))))

(declare-fun infix_gtmngtgt (ty ty uni uni) uni)

;; infix >->>_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (set1 (tuple2 a2 b2)))
  (infix_gtmngtgt b2 a2 x x1)))))

;; mem_total_bijection_set
  (assert
  (forall ((s (set d)) (t (set f)) (x (set (tuple21 d f))))
  (= (mem41 x (tb2t2939 (infix_gtmngtgt f1 d1 (t2tb690 s) (t2tb2946 t))))
  (and (mem41 x (tb2t2939 (infix_gtmngt f1 d1 (t2tb690 s) (t2tb2946 t))))
  (mem41 x (tb2t2939 (infix_mnmngtgt f1 d1 (t2tb690 s) (t2tb2946 t))))))))

;; mem_total_bijection_set
  (assert
  (forall ((s (set c)) (t (set d)) (x (set (tuple21 c d))))
  (= (mem22 x (tb2t688 (infix_gtmngtgt d1 c1 (t2tb132 s) (t2tb690 t))))
  (and (mem22 x (tb2t688 (infix_gtmngt d1 c1 (t2tb132 s) (t2tb690 t))))
  (mem22 x (tb2t688 (infix_mnmngtgt d1 c1 (t2tb132 s) (t2tb690 t))))))))

;; mem_total_bijection_set
  (assert
  (forall ((s (set b)) (t (set e)) (x (set (tuple21 b e))))
  (= (mem39 x (tb2t2941 (infix_gtmngtgt e1 b1 (t2tb12 s) (t2tb2947 t))))
  (and (mem39 x (tb2t2941 (infix_gtmngt e1 b1 (t2tb12 s) (t2tb2947 t))))
  (mem39 x (tb2t2941 (infix_mnmngtgt e1 b1 (t2tb12 s) (t2tb2947 t))))))))

;; mem_total_bijection_set
  (assert
  (forall ((s (set a)) (t (set b)) (x (set (tuple21 a b))))
  (= (mem4 x (tb2t10 (infix_gtmngtgt b1 a1 (t2tb1 s) (t2tb12 t))))
  (and (mem4 x (tb2t10 (infix_gtmngt b1 a1 (t2tb1 s) (t2tb12 t)))) (mem4 x
  (tb2t10 (infix_mnmngtgt b1 a1 (t2tb1 s) (t2tb12 t))))))))

;; mem_total_bijection_set
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (x uni))
  (= (mem (set1 (tuple2 a2 b2)) x (infix_gtmngtgt b2 a2 s t))
  (and (mem (set1 (tuple2 a2 b2)) x (infix_gtmngt b2 a2 s t)) (mem
  (set1 (tuple2 a2 b2)) x (infix_mnmngtgt b2 a2 s t)))))))

(declare-fun apply (ty ty uni uni) uni)

;; apply_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort b2 (apply b2 a2 x x1)))))

;; apply_def0
  (assert
  (forall ((b2 ty))
  (forall ((f2 uni) (s (set (tuple21 c f))) (t uni) (a2 (tuple21 c f)))
  (=>
  (and (mem (set1 (tuple2 (tuple2 c1 f1) b2)) f2
  (infix_plmngt b2 (tuple2 c1 f1) (t2tb2942 s) t)) (mem45 a2
  (tb2t2942 (dom b2 (tuple2 c1 f1) f2)))) (mem (tuple2 (tuple2 c1 f1) b2)
  (Tuple2 (tuple2 c1 f1) b2 (t2tb2948 a2)
  (apply b2 (tuple2 c1 f1) f2 (t2tb2948 a2))) f2)))))

;; apply_def0
  (assert
  (forall ((b2 ty))
  (forall ((f2 uni) (s (set (tuple21 a e))) (t uni) (a2 (tuple21 a e)))
  (=>
  (and (mem (set1 (tuple2 (tuple2 a1 e1) b2)) f2
  (infix_plmngt b2 (tuple2 a1 e1) (t2tb2943 s) t)) (mem44 a2
  (tb2t2943 (dom b2 (tuple2 a1 e1) f2)))) (mem (tuple2 (tuple2 a1 e1) b2)
  (Tuple2 (tuple2 a1 e1) b2 (t2tb2949 a2)
  (apply b2 (tuple2 a1 e1) f2 (t2tb2949 a2))) f2)))))

;; apply_def0
  (assert
  (forall ((b2 ty))
  (forall ((f2 uni) (s (set (tuple21 (tuple21 b d) (tuple21 e f)))) (t uni)
  (a2 (tuple21 (tuple21 b d) (tuple21 e f))))
  (=>
  (and (mem (set1 (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) b2)) f2
  (infix_plmngt b2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) (t2tb2944 s) t))
  (mem43 a2 (tb2t2944 (dom b2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) f2))))
  (mem (tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) b2)
  (Tuple2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) b2 (t2tb2950 a2)
  (apply b2 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1)) f2 (t2tb2950 a2))) f2)))))

;; apply_def0
  (assert
  (forall ((b2 ty))
  (forall ((f2 uni) (s (set (tuple21 (tuple21 a c) (tuple21 e f)))) (t uni)
  (a2 (tuple21 (tuple21 a c) (tuple21 e f))))
  (=>
  (and (mem (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) b2)) f2
  (infix_plmngt b2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) (t2tb2945 s) t))
  (mem42 a2 (tb2t2945 (dom b2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) f2))))
  (mem (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) b2)
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) b2 (t2tb2951 a2)
  (apply b2 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1)) f2 (t2tb2951 a2))) f2)))))

;; apply_def0
  (assert
  (forall ((b2 ty))
  (forall ((f2 uni) (s (set (set (tuple21 d f)))) (t uni) (a2 (set (tuple21 d
  f))))
  (=>
  (and (mem (set1 (tuple2 (set1 (tuple2 d1 f1)) b2)) f2
  (infix_plmngt b2 (set1 (tuple2 d1 f1)) (t2tb2939 s) t)) (mem41 a2
  (tb2t2939 (dom b2 (set1 (tuple2 d1 f1)) f2)))) (mem
  (tuple2 (set1 (tuple2 d1 f1)) b2)
  (Tuple2 (set1 (tuple2 d1 f1)) b2 (t2tb2938 a2)
  (apply b2 (set1 (tuple2 d1 f1)) f2 (t2tb2938 a2))) f2)))))

;; apply_def0
  (assert
  (forall ((b2 ty))
  (forall ((f2 uni) (s (set (tuple21 d f))) (t uni) (a2 (tuple21 d f)))
  (=>
  (and (mem (set1 (tuple2 (tuple2 d1 f1) b2)) f2
  (infix_plmngt b2 (tuple2 d1 f1) (t2tb2938 s) t)) (mem40 a2
  (tb2t2938 (dom b2 (tuple2 d1 f1) f2)))) (mem (tuple2 (tuple2 d1 f1) b2)
  (Tuple2 (tuple2 d1 f1) b2 (t2tb2952 a2)
  (apply b2 (tuple2 d1 f1) f2 (t2tb2952 a2))) f2)))))

;; apply_def0
  (assert
  (forall ((b2 ty))
  (forall ((f2 uni) (s (set (set (tuple21 b e)))) (t uni) (a2 (set (tuple21 b
  e))))
  (=>
  (and (mem (set1 (tuple2 (set1 (tuple2 b1 e1)) b2)) f2
  (infix_plmngt b2 (set1 (tuple2 b1 e1)) (t2tb2941 s) t)) (mem39 a2
  (tb2t2941 (dom b2 (set1 (tuple2 b1 e1)) f2)))) (mem
  (tuple2 (set1 (tuple2 b1 e1)) b2)
  (Tuple2 (set1 (tuple2 b1 e1)) b2 (t2tb2940 a2)
  (apply b2 (set1 (tuple2 b1 e1)) f2 (t2tb2940 a2))) f2)))))

;; apply_def0
  (assert
  (forall ((b2 ty))
  (forall ((f2 uni) (s (set (tuple21 b e))) (t uni) (a2 (tuple21 b e)))
  (=>
  (and (mem (set1 (tuple2 (tuple2 b1 e1) b2)) f2
  (infix_plmngt b2 (tuple2 b1 e1) (t2tb2940 s) t)) (mem38 a2
  (tb2t2940 (dom b2 (tuple2 b1 e1) f2)))) (mem (tuple2 (tuple2 b1 e1) b2)
  (Tuple2 (tuple2 b1 e1) b2 (t2tb2953 a2)
  (apply b2 (tuple2 b1 e1) f2 (t2tb2953 a2))) f2)))))

;; apply_def0
  (assert
  (forall ((b2 ty))
  (forall ((f2 uni) (s (set f)) (t uni) (a2 f))
  (=>
  (and (mem (set1 (tuple2 f1 b2)) f2 (infix_plmngt b2 f1 (t2tb2946 s) t))
  (mem37 a2 (tb2t2946 (dom b2 f1 f2)))) (mem (tuple2 f1 b2)
  (Tuple2 f1 b2 (t2tb2954 a2) (apply b2 f1 f2 (t2tb2954 a2))) f2)))))

;; apply_def0
  (assert
  (forall ((b2 ty))
  (forall ((f2 uni) (s (set e)) (t uni) (a2 e))
  (=>
  (and (mem (set1 (tuple2 e1 b2)) f2 (infix_plmngt b2 e1 (t2tb2947 s) t))
  (mem36 a2 (tb2t2947 (dom b2 e1 f2)))) (mem (tuple2 e1 b2)
  (Tuple2 e1 b2 (t2tb2955 a2) (apply b2 e1 f2 (t2tb2955 a2))) f2)))))

;; apply_def0
  (assert
  (forall ((b2 ty))
  (forall ((f2 uni) (s (set (tuple21 (tuple21 a c) (tuple21 b d)))) (t uni)
  (a2 (tuple21 (tuple21 a c) (tuple21 b d))))
  (=>
  (and (mem (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) b2)) f2
  (infix_plmngt b2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb686 s) t))
  (mem24 a2 (tb2t686 (dom b2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) f2))))
  (mem (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) b2)
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) b2 (t2tb691 a2)
  (apply b2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) f2 (t2tb691 a2))) f2)))))

;; apply_def0
  (assert
  (forall ((f2 (set (tuple21 (tuple21 b d) (tuple21 e f))))
  (s (set (tuple21 b d))) (t (set (tuple21 e f))) (a2 (tuple21 b d)))
  (=>
  (and (mem (set1 (tuple2 (tuple2 b1 d1) (tuple2 e1 f1))) (t2tb2944 f2)
  (infix_plmngt (tuple2 e1 f1) (tuple2 b1 d1) (t2tb687 s) (t2tb3314 t))) (mem
  (tuple2 b1 d1) (t2tb692 a2)
  (dom (tuple2 e1 f1) (tuple2 b1 d1) (t2tb2944 f2)))) (mem43
  (tb2t2950
  (Tuple2 (tuple2 b1 d1) (tuple2 e1 f1) (t2tb692 a2)
  (apply (tuple2 e1 f1) (tuple2 b1 d1) (t2tb2944 f2) (t2tb692 a2)))) f2))))

;; apply_def0
  (assert
  (forall ((b2 ty))
  (forall ((f2 uni) (s (set (set (tuple21 c d)))) (t uni) (a2 (set (tuple21 c
  d))))
  (=>
  (and (mem (set1 (tuple2 (set1 (tuple2 c1 d1)) b2)) f2
  (infix_plmngt b2 (set1 (tuple2 c1 d1)) (t2tb688 s) t)) (mem22 a2
  (tb2t688 (dom b2 (set1 (tuple2 c1 d1)) f2)))) (mem
  (tuple2 (set1 (tuple2 c1 d1)) b2)
  (Tuple2 (set1 (tuple2 c1 d1)) b2 (t2tb689 a2)
  (apply b2 (set1 (tuple2 c1 d1)) f2 (t2tb689 a2))) f2)))))

;; apply_def0
  (assert
  (forall ((b2 ty))
  (forall ((f2 uni) (s (set (tuple21 c d))) (t uni) (a2 (tuple21 c d)))
  (=>
  (and (mem (set1 (tuple2 (tuple2 c1 d1) b2)) f2
  (infix_plmngt b2 (tuple2 c1 d1) (t2tb689 s) t)) (mem21 a2
  (tb2t689 (dom b2 (tuple2 c1 d1) f2)))) (mem (tuple2 (tuple2 c1 d1) b2)
  (Tuple2 (tuple2 c1 d1) b2 (t2tb693 a2)
  (apply b2 (tuple2 c1 d1) f2 (t2tb693 a2))) f2)))))

;; apply_def0
  (assert
  (forall ((f2 (set (tuple21 d f))) (s (set d)) (t (set f)) (a2 d))
  (=>
  (and (mem41 f2 (tb2t2939 (infix_plmngt f1 d1 (t2tb690 s) (t2tb2946 t))))
  (mem20 a2 (tb2t690 (dom f1 d1 (t2tb2938 f2))))) (mem40
  (tb2t2952
  (Tuple2 d1 f1 (t2tb694 a2) (apply f1 d1 (t2tb2938 f2) (t2tb694 a2)))) f2))))

;; apply_def0
  (assert
  (forall ((b2 ty))
  (forall ((f2 uni) (s (set d)) (t uni) (a2 d))
  (=>
  (and (mem (set1 (tuple2 d1 b2)) f2 (infix_plmngt b2 d1 (t2tb690 s) t))
  (mem20 a2 (tb2t690 (dom b2 d1 f2)))) (mem (tuple2 d1 b2)
  (Tuple2 d1 b2 (t2tb694 a2) (apply b2 d1 f2 (t2tb694 a2))) f2)))))

;; apply_def0
  (assert
  (forall ((f2 (set (tuple21 (tuple21 a c) (tuple21 e f))))
  (s (set (tuple21 a c))) (t (set (tuple21 e f))) (a2 (tuple21 a c)))
  (=>
  (and (mem (set1 (tuple2 (tuple2 a1 c1) (tuple2 e1 f1))) (t2tb2945 f2)
  (infix_plmngt (tuple2 e1 f1) (tuple2 a1 c1) (t2tb129 s) (t2tb3314 t))) (mem
  (tuple2 a1 c1) (t2tb133 a2)
  (dom (tuple2 e1 f1) (tuple2 a1 c1) (t2tb2945 f2)))) (mem42
  (tb2t2951
  (Tuple2 (tuple2 a1 c1) (tuple2 e1 f1) (t2tb133 a2)
  (apply (tuple2 e1 f1) (tuple2 a1 c1) (t2tb2945 f2) (t2tb133 a2)))) f2))))

;; apply_def0
  (assert
  (forall ((f2 (set (tuple21 (tuple21 a c) (tuple21 b d))))
  (s (set (tuple21 a c))) (t (set (tuple21 b d))) (a2 (tuple21 a c)))
  (=>
  (and (mem (set1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))) (t2tb686 f2)
  (infix_plmngt (tuple2 b1 d1) (tuple2 a1 c1) (t2tb129 s) (t2tb687 t))) (mem
  (tuple2 a1 c1) (t2tb133 a2)
  (dom (tuple2 b1 d1) (tuple2 a1 c1) (t2tb686 f2)))) (mem24
  (tb2t691
  (Tuple2 (tuple2 a1 c1) (tuple2 b1 d1) (t2tb133 a2)
  (apply (tuple2 b1 d1) (tuple2 a1 c1) (t2tb686 f2) (t2tb133 a2)))) f2))))

;; apply_def0
  (assert
  (forall ((f2 (set (tuple21 c f))) (s (set c)) (t (set f)) (a2 c))
  (=>
  (and (mem (set1 (tuple2 c1 f1)) (t2tb2942 f2)
  (infix_plmngt f1 c1 (t2tb132 s) (t2tb2946 t))) (mem7 a2
  (tb2t132 (dom f1 c1 (t2tb2942 f2))))) (mem45
  (tb2t2948
  (Tuple2 c1 f1 (t2tb135 a2) (apply f1 c1 (t2tb2942 f2) (t2tb135 a2)))) f2))))

;; apply_def0
  (assert
  (forall ((f2 (set (tuple21 c d))) (s (set c)) (t (set d)) (a2 c))
  (=>
  (and (mem22 f2 (tb2t688 (infix_plmngt d1 c1 (t2tb132 s) (t2tb690 t))))
  (mem7 a2 (tb2t132 (dom d1 c1 (t2tb689 f2))))) (mem21
  (tb2t693
  (Tuple2 c1 d1 (t2tb135 a2) (apply d1 c1 (t2tb689 f2) (t2tb135 a2)))) f2))))

;; apply_def0
  (assert
  (forall ((b2 ty))
  (forall ((f2 uni) (s (set c)) (t uni) (a2 c))
  (=>
  (and (mem (set1 (tuple2 c1 b2)) f2 (infix_plmngt b2 c1 (t2tb132 s) t))
  (mem7 a2 (tb2t132 (dom b2 c1 f2)))) (mem (tuple2 c1 b2)
  (Tuple2 c1 b2 (t2tb135 a2) (apply b2 c1 f2 (t2tb135 a2))) f2)))))

;; apply_def0
  (assert
  (forall ((b2 ty))
  (forall ((f2 uni) (s (set (set (tuple21 a b)))) (t uni) (a2 (set (tuple21 a
  b))))
  (=>
  (and (mem (set1 (tuple2 (set1 (tuple2 a1 b1)) b2)) f2
  (infix_plmngt b2 (set1 (tuple2 a1 b1)) (t2tb10 s) t)) (mem4 a2
  (tb2t10 (dom b2 (set1 (tuple2 a1 b1)) f2)))) (mem
  (tuple2 (set1 (tuple2 a1 b1)) b2)
  (Tuple2 (set1 (tuple2 a1 b1)) b2 (t2tb11 a2)
  (apply b2 (set1 (tuple2 a1 b1)) f2 (t2tb11 a2))) f2)))))

;; apply_def0
  (assert
  (forall ((b2 ty))
  (forall ((f2 uni) (s (set (tuple21 a b))) (t uni) (a2 (tuple21 a b)))
  (=>
  (and (mem (set1 (tuple2 (tuple2 a1 b1) b2)) f2
  (infix_plmngt b2 (tuple2 a1 b1) (t2tb11 s) t)) (mem3 a2
  (tb2t11 (dom b2 (tuple2 a1 b1) f2)))) (mem (tuple2 (tuple2 a1 b1) b2)
  (Tuple2 (tuple2 a1 b1) b2 (t2tb13 a2)
  (apply b2 (tuple2 a1 b1) f2 (t2tb13 a2))) f2)))))

;; apply_def0
  (assert
  (forall ((f2 (set (tuple21 b e))) (s (set b)) (t (set e)) (a2 b))
  (=>
  (and (mem39 f2 (tb2t2941 (infix_plmngt e1 b1 (t2tb12 s) (t2tb2947 t))))
  (mem2 a2 (tb2t12 (dom e1 b1 (t2tb2940 f2))))) (mem38
  (tb2t2953
  (Tuple2 b1 e1 (t2tb14 a2) (apply e1 b1 (t2tb2940 f2) (t2tb14 a2)))) f2))))

;; apply_def0
  (assert
  (forall ((b2 ty))
  (forall ((f2 uni) (s (set b)) (t uni) (a2 b))
  (=>
  (and (mem (set1 (tuple2 b1 b2)) f2 (infix_plmngt b2 b1 (t2tb12 s) t)) (mem2
  a2 (tb2t12 (dom b2 b1 f2)))) (mem (tuple2 b1 b2)
  (Tuple2 b1 b2 (t2tb14 a2) (apply b2 b1 f2 (t2tb14 a2))) f2)))))

;; apply_def0
  (assert
  (forall ((f2 (set (tuple21 a e))) (s (set a)) (t (set e)) (a2 a))
  (=>
  (and (mem (set1 (tuple2 a1 e1)) (t2tb2943 f2)
  (infix_plmngt e1 a1 (t2tb1 s) (t2tb2947 t))) (mem1 a2
  (tb2t1 (dom e1 a1 (t2tb2943 f2))))) (mem44
  (tb2t2949 (Tuple2 a1 e1 (t2tb2 a2) (apply e1 a1 (t2tb2943 f2) (t2tb2 a2))))
  f2))))

;; apply_def0
  (assert
  (forall ((f2 (set (tuple21 a b))) (s (set a)) (t (set b)) (a2 a))
  (=>
  (and (mem4 f2 (tb2t10 (infix_plmngt b1 a1 (t2tb1 s) (t2tb12 t)))) (mem1 a2
  (tb2t1 (dom b1 a1 (t2tb11 f2))))) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 a2) (apply b1 a1 (t2tb11 f2) (t2tb2 a2))))
  f2))))

;; apply_def0
  (assert
  (forall ((b2 ty))
  (forall ((f2 uni) (s (set a)) (t uni) (a2 a))
  (=>
  (and (mem (set1 (tuple2 a1 b2)) f2 (infix_plmngt b2 a1 (t2tb1 s) t)) (mem1
  a2 (tb2t1 (dom b2 a1 f2)))) (mem (tuple2 a1 b2)
  (Tuple2 a1 b2 (t2tb2 a2) (apply b2 a1 f2 (t2tb2 a2))) f2)))))

;; apply_def0
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((f2 uni) (s uni) (t uni) (a3 uni))
  (=>
  (and (mem (set1 (tuple2 a2 b2)) f2 (infix_plmngt b2 a2 s t)) (mem a2 a3
  (dom b2 a2 f2))) (mem (tuple2 a2 b2) (Tuple2 a2 b2 a3 (apply b2 a2 f2 a3))
  f2)))))

(assert
;; equal_semicolon_34
 ;; File "lemmes_bbook.why", line 1796, characters 7-25
  (not
  (forall ((s (set a)) (t (set b)) (u (set c)) (v (set d)) (w (set e))
  (z (set f)) (p (set (tuple21 a b))) (q (set (tuple21 c d)))
  (h (set (tuple21 b e))) (k (set (tuple21 d f))))
  (=>
  (and (mem4 p (relation1 s t))
  (and (mem22 q (relation7 u v))
  (and (mem39 h (relation11 t w)) (mem41 k (relation10 v z))))) (infix_eqeq33
  (semicolon19 (parallel_product1 p q) (parallel_product4 h k))
  (parallel_product3 (semicolon20 p h) (semicolon21 q k)))))))
(check-sat)
