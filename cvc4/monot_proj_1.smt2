(set-logic AUFBVDTLIRA)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
(declare-sort uni 0)

(declare-sort ty 0)

(declare-fun sort (ty uni) Bool)

(declare-fun witness (ty) uni)

;; witness_sort
  (assert (forall ((a2 ty)) (sort a2 (witness a2))))

(declare-fun int () ty)

(declare-fun real () ty)

(declare-sort set 1)

(declare-fun set1 (ty) ty)

(declare-fun mem (ty uni uni) Bool)

(declare-fun infix_eqeq (ty uni uni) Bool)

;; infix ==_def
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t uni))
  (and
  (=> (infix_eqeq a2 s t) (forall ((x uni)) (= (mem a2 x s) (mem a2 x t))))
  (=> (forall ((x uni)) (=> (sort a2 x) (= (mem a2 x s) (mem a2 x t))))
  (infix_eqeq a2 s t))))))

(declare-fun power (ty uni) uni)

;; power_sort
  (assert
  (forall ((a2 ty)) (forall ((x uni)) (sort (set1 (set1 a2)) (power a2 x)))))

(declare-fun non_empty_power (ty uni) uni)

;; non_empty_power_sort
  (assert
  (forall ((a2 ty))
  (forall ((x uni)) (sort (set1 (set1 a2)) (non_empty_power a2 x)))))

(declare-sort b 0)

(declare-fun b1 () ty)

(declare-sort a 0)

(declare-fun a1 () ty)

(declare-sort tuple21 2)

(declare-fun tuple2 (ty ty) ty)

(declare-fun subset1 (ty uni uni) Bool)

(declare-fun subset2 ((set a) (set a)) Bool)

(declare-fun subset5 ((set b) (set b)) Bool)

(declare-fun subset15 ((set (tuple21 (tuple21 a b) a))
  (set (tuple21 (tuple21 a b) a))) Bool)

(declare-fun t2tb52 ((set (set (tuple21 (tuple21 a b) a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a b) a))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 b1) a1))) (t2tb52 x))))

(declare-fun tb2t52 (uni) (set (set (tuple21 (tuple21 a b) a))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a b) a)))))
  (! (= (tb2t52 (t2tb52 i)) i) :pattern ((t2tb52 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 b1) a1))) j)
     (= (t2tb52 (tb2t52 j)) j)) :pattern ((t2tb52 (tb2t52 j))) )))

(declare-fun t2tb29 ((set (tuple21 (tuple21 a b) a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) a)))) (sort
  (set1 (tuple2 (tuple2 a1 b1) a1)) (t2tb29 x))))

(declare-fun tb2t29 (uni) (set (tuple21 (tuple21 a b) a)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a b) a))))
  (! (= (tb2t29 (t2tb29 i)) i) :pattern ((t2tb29 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 b1) a1)) j)
     (= (t2tb29 (tb2t29 j)) j)) :pattern ((t2tb29 (tb2t29 j))) )))

;; subset_def
  (assert
  (forall ((s (set (tuple21 (tuple21 a b) a))) (t (set (tuple21 (tuple21 a b)
  a))))
  (= (subset15 s t) (mem (set1 (tuple2 (tuple2 a1 b1) a1)) (t2tb29 s)
  (power (tuple2 (tuple2 a1 b1) a1) (t2tb29 t))))))

(declare-fun t2tb12 ((set b)) uni)

;; t2tb_sort
  (assert (forall ((x (set b))) (sort (set1 b1) (t2tb12 x))))

(declare-fun tb2t12 (uni) (set b))

;; BridgeL
  (assert
  (forall ((i (set b))) (! (= (tb2t12 (t2tb12 i)) i) :pattern ((t2tb12 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 b1) j) (= (t2tb12 (tb2t12 j)) j)) :pattern ((t2tb12
                                                                 (tb2t12 j))) )))

(declare-fun t2tb44 ((set (set b))) uni)

;; t2tb_sort
  (assert (forall ((x (set (set b)))) (sort (set1 (set1 b1)) (t2tb44 x))))

(declare-fun tb2t44 (uni) (set (set b)))

;; BridgeL
  (assert
  (forall ((i (set (set b))))
  (! (= (tb2t44 (t2tb44 i)) i) :pattern ((t2tb44 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 b1)) j) (= (t2tb44 (tb2t44 j)) j)) :pattern (
  (t2tb44 (tb2t44 j))) )))

;; subset_def
  (assert
  (forall ((s (set b)) (t (set b)))
  (= (subset5 s t) (mem (set1 b1) (t2tb12 s) (power b1 (t2tb12 t))))))

(declare-fun t2tb ((set (set a))) uni)

;; t2tb_sort
  (assert (forall ((x (set (set a)))) (sort (set1 (set1 a1)) (t2tb x))))

(declare-fun tb2t (uni) (set (set a)))

;; BridgeL
  (assert
  (forall ((i (set (set a)))) (! (= (tb2t (t2tb i)) i) :pattern ((t2tb i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 a1)) j) (= (t2tb (tb2t j)) j)) :pattern ((t2tb
                                                                    (tb2t j))) )))

(declare-fun t2tb1 ((set a)) uni)

;; t2tb_sort
  (assert (forall ((x (set a))) (sort (set1 a1) (t2tb1 x))))

(declare-fun tb2t1 (uni) (set a))

;; BridgeL
  (assert
  (forall ((i (set a))) (! (= (tb2t1 (t2tb1 i)) i) :pattern ((t2tb1 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 a1) j) (= (t2tb1 (tb2t1 j)) j)) :pattern ((t2tb1
                                                               (tb2t1 j))) )))

;; subset_def
  (assert
  (forall ((s (set a)) (t (set a)))
  (= (subset2 s t) (mem (set1 a1) (t2tb1 s) (power a1 (t2tb1 t))))))

;; subset_def
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t uni))
  (= (subset1 a2 s t) (mem (set1 a2) s (power a2 t))))))

(declare-fun subsetnoteq (ty uni uni) Bool)

;; subsetnoteq_def
  (assert
  (forall ((s (set (tuple21 (tuple21 a b) a))) (t (set (tuple21 (tuple21 a b)
  a))))
  (= (subsetnoteq (tuple2 (tuple2 a1 b1) a1) (t2tb29 s) (t2tb29 t))
  (and (subset15 s t)
  (not (infix_eqeq (tuple2 (tuple2 a1 b1) a1) (t2tb29 s) (t2tb29 t)))))))

;; subsetnoteq_def
  (assert
  (forall ((s (set b)) (t (set b)))
  (= (subsetnoteq b1 (t2tb12 s) (t2tb12 t))
  (and (subset5 s t) (not (infix_eqeq b1 (t2tb12 s) (t2tb12 t)))))))

;; subsetnoteq_def
  (assert
  (forall ((s (set a)) (t (set a)))
  (= (subsetnoteq a1 (t2tb1 s) (t2tb1 t))
  (and (subset2 s t) (not (infix_eqeq a1 (t2tb1 s) (t2tb1 t)))))))

;; subsetnoteq_def
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t uni))
  (= (subsetnoteq a2 s t) (and (subset1 a2 s t) (not (infix_eqeq a2 s t)))))))

(declare-fun empty (ty) uni)

;; empty_sort
  (assert (forall ((a2 ty)) (sort (set1 a2) (empty a2))))

(declare-fun is_empty (ty uni) Bool)

;; is_empty_def
  (assert
  (forall ((a2 ty))
  (forall ((s uni))
  (and (=> (is_empty a2 s) (forall ((x uni)) (not (mem a2 x s))))
  (=> (forall ((x uni)) (=> (sort a2 x) (not (mem a2 x s)))) (is_empty a2 s))))))

;; empty_def1
  (assert (forall ((a2 ty)) (is_empty a2 (empty a2))))

;; empty
  (assert (forall ((a2 ty)) (forall ((x uni)) (not (mem a2 x (empty a2))))))

(declare-fun add (ty uni uni) uni)

;; add_sort
  (assert
  (forall ((a2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 a2) (add a2 x x1)))))

;; add_def1
  (assert
  (forall ((a2 ty))
  (forall ((x uni) (y uni))
  (=> (sort a2 x)
  (=> (sort a2 y)
  (forall ((s uni)) (= (mem a2 x (add a2 y s)) (or (= x y) (mem a2 x s)))))))))

(declare-fun singleton (ty uni) uni)

;; singleton_sort
  (assert
  (forall ((a2 ty)) (forall ((x uni)) (sort (set1 a2) (singleton a2 x)))))

;; mem_singleton
  (assert
  (forall ((a2 ty))
  (forall ((x uni) (y uni))
  (=> (sort a2 x) (=> (sort a2 y) (= (mem a2 x (singleton a2 y)) (= x y)))))))

(declare-fun remove (ty uni uni) uni)

;; remove_sort
  (assert
  (forall ((a2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 a2) (remove a2 x x1)))))

;; remove_def1
  (assert
  (forall ((a2 ty))
  (forall ((x uni) (y uni) (s uni))
  (=> (sort a2 x)
  (=> (sort a2 y)
  (= (mem a2 x (remove a2 y s)) (and (not (= x y)) (mem a2 x s))))))))

(declare-fun all (ty) uni)

;; all_sort
  (assert (forall ((a2 ty)) (sort (set1 a2) (all a2))))

;; all_def
  (assert (forall ((a2 ty)) (forall ((x uni)) (mem a2 x (all a2)))))

(declare-fun union1 (ty uni uni) uni)

;; union_sort
  (assert
  (forall ((a2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 a2) (union1 a2 x x1)))))

;; mem_union
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t uni) (x uni))
  (= (mem a2 x (union1 a2 s t)) (or (mem a2 x s) (mem a2 x t))))))

(declare-fun inter (ty uni uni) uni)

;; inter_sort
  (assert
  (forall ((a2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 a2) (inter a2 x x1)))))

;; mem_inter
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t uni) (x uni))
  (= (mem a2 x (inter a2 s t)) (and (mem a2 x s) (mem a2 x t))))))

(declare-fun diff (ty uni uni) uni)

;; diff_sort
  (assert
  (forall ((a2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 a2) (diff a2 x x1)))))

;; mem_diff
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t uni) (x uni))
  (= (mem a2 x (diff a2 s t)) (and (mem a2 x s) (not (mem a2 x t)))))))

(declare-fun Tuple2 (ty ty uni uni) uni)

;; Tuple2_sort
  (assert
  (forall ((a2 ty) (a3 ty))
  (forall ((x uni) (x1 uni)) (sort (tuple2 a3 a2) (Tuple2 a3 a2 x x1)))))

(declare-fun Tuple21 (a b) (tuple21 a b))

(declare-fun Tuple22 ((tuple21 a b) a) (tuple21 (tuple21 a b) a))

(declare-fun Tuple23 ((set a) (set b)) (tuple21 (set a) (set b)))

(declare-fun Tuple2_proj_1 (ty ty uni) uni)

;; Tuple2_proj_1_sort
  (assert
  (forall ((a2 ty) (a3 ty))
  (forall ((x uni)) (sort a3 (Tuple2_proj_1 a3 a2 x)))))

(declare-fun t2tb495 ((tuple21 (set a) (set b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set a) (set b)))) (sort (tuple2 (set1 a1) (set1 b1))
  (t2tb495 x))))

(declare-fun tb2t495 (uni) (tuple21 (set a) (set b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set a) (set b))))
  (! (= (tb2t495 (t2tb495 i)) i) :pattern ((t2tb495 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 a1) (set1 b1)) j) (= (t2tb495 (tb2t495 j)) j)) :pattern (
  (t2tb495 (tb2t495 j))) )))

;; Tuple2_proj_1_def
  (assert
  (forall ((u (set a)) (u1 (set b)))
  (= (tb2t1 (Tuple2_proj_1 (set1 a1) (set1 b1) (t2tb495 (Tuple23 u u1)))) u)))

(declare-fun t2tb2 (a) uni)

;; t2tb_sort
  (assert (forall ((x a)) (sort a1 (t2tb2 x))))

(declare-fun tb2t2 (uni) a)

;; BridgeL
  (assert (forall ((i a)) (! (= (tb2t2 (t2tb2 i)) i) :pattern ((t2tb2 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort a1 j) (= (t2tb2 (tb2t2 j)) j)) :pattern ((t2tb2 (tb2t2 j))) )))

(declare-fun t2tb13 ((tuple21 a b)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 a b))) (sort (tuple2 a1 b1) (t2tb13 x))))

(declare-fun tb2t13 (uni) (tuple21 a b))

;; BridgeL
  (assert
  (forall ((i (tuple21 a b)))
  (! (= (tb2t13 (t2tb13 i)) i) :pattern ((t2tb13 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 b1) j) (= (t2tb13 (tb2t13 j)) j)) :pattern (
  (t2tb13 (tb2t13 j))) )))

;; Tuple2_proj_1_def
  (assert
  (forall ((u a) (u1 b))
  (= (tb2t2 (Tuple2_proj_1 a1 b1 (t2tb13 (Tuple21 u u1)))) u)))

(declare-fun t2tb30 ((tuple21 (tuple21 a b) a)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a b) a))) (sort (tuple2 (tuple2 a1 b1) a1)
  (t2tb30 x))))

(declare-fun tb2t30 (uni) (tuple21 (tuple21 a b) a))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a b) a)))
  (! (= (tb2t30 (t2tb30 i)) i) :pattern ((t2tb30 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 b1) a1) j) (= (t2tb30 (tb2t30 j)) j)) :pattern (
  (t2tb30 (tb2t30 j))) )))

;; Tuple2_proj_1_def
  (assert
  (forall ((u (tuple21 a b)) (u1 a))
  (= (tb2t13 (Tuple2_proj_1 (tuple2 a1 b1) a1 (t2tb30 (Tuple22 u u1)))) u)))

;; Tuple2_proj_1_def
  (assert
  (forall ((a2 ty) (a3 ty))
  (forall ((u uni) (u1 uni))
  (=> (sort a3 u) (= (Tuple2_proj_1 a3 a2 (Tuple2 a3 a2 u u1)) u)))))

(declare-fun Tuple2_proj_2 (ty ty uni) uni)

;; Tuple2_proj_2_sort
  (assert
  (forall ((a2 ty) (a3 ty))
  (forall ((x uni)) (sort a2 (Tuple2_proj_2 a3 a2 x)))))

;; Tuple2_proj_2_def
  (assert
  (forall ((u (set a)) (u1 (set b)))
  (= (tb2t12 (Tuple2_proj_2 (set1 a1) (set1 b1) (t2tb495 (Tuple23 u u1)))) u1)))

(declare-fun t2tb14 (b) uni)

;; t2tb_sort
  (assert (forall ((x b)) (sort b1 (t2tb14 x))))

(declare-fun tb2t14 (uni) b)

;; BridgeL
  (assert
  (forall ((i b)) (! (= (tb2t14 (t2tb14 i)) i) :pattern ((t2tb14 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort b1 j) (= (t2tb14 (tb2t14 j)) j)) :pattern ((t2tb14 (tb2t14 j))) )))

;; Tuple2_proj_2_def
  (assert
  (forall ((u a) (u1 b))
  (= (tb2t14 (Tuple2_proj_2 a1 b1 (t2tb13 (Tuple21 u u1)))) u1)))

;; Tuple2_proj_2_def
  (assert
  (forall ((u (tuple21 a b)) (u1 a))
  (= (tb2t2 (Tuple2_proj_2 (tuple2 a1 b1) a1 (t2tb30 (Tuple22 u u1)))) u1)))

;; Tuple2_proj_2_def
  (assert
  (forall ((a2 ty) (a3 ty))
  (forall ((u uni) (u1 uni))
  (=> (sort a2 u1) (= (Tuple2_proj_2 a3 a2 (Tuple2 a3 a2 u u1)) u1)))))

;; tuple2_inversion
  (assert
  (forall ((u (tuple21 (set a) (set b))))
  (= u (Tuple23 (tb2t1 (Tuple2_proj_1 (set1 a1) (set1 b1) (t2tb495 u)))
       (tb2t12 (Tuple2_proj_2 (set1 a1) (set1 b1) (t2tb495 u)))))))

;; tuple2_inversion
  (assert
  (forall ((u (tuple21 a b)))
  (= u (Tuple21 (tb2t2 (Tuple2_proj_1 a1 b1 (t2tb13 u)))
       (tb2t14 (Tuple2_proj_2 a1 b1 (t2tb13 u)))))))

;; tuple2_inversion
  (assert
  (forall ((u (tuple21 (tuple21 a b) a)))
  (= u (Tuple22 (tb2t13 (Tuple2_proj_1 (tuple2 a1 b1) a1 (t2tb30 u)))
       (tb2t2 (Tuple2_proj_2 (tuple2 a1 b1) a1 (t2tb30 u)))))))

;; tuple2_inversion
  (assert
  (forall ((a2 ty) (a3 ty))
  (forall ((u uni))
  (=> (sort (tuple2 a3 a2) u)
  (= u (Tuple2 a3 a2 (Tuple2_proj_1 a3 a2 u) (Tuple2_proj_2 a3 a2 u)))))))

(declare-fun times (ty ty uni uni) uni)

;; times_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (tuple2 a2 b2)) (times b2 a2 x x1)))))

(declare-fun t2tb11 ((set (tuple21 a b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a b)))) (sort (set1 (tuple2 a1 b1)) (t2tb11 x))))

(declare-fun tb2t11 (uni) (set (tuple21 a b)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a b))))
  (! (= (tb2t11 (t2tb11 i)) i) :pattern ((t2tb11 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 b1)) j) (= (t2tb11 (tb2t11 j)) j)) :pattern (
  (t2tb11 (tb2t11 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a b))) (t (set a)) (x (tuple21 a b)) (y a))
  (= (mem (tuple2 (tuple2 a1 b1) a1) (t2tb30 (Tuple22 x y))
  (times a1 (tuple2 a1 b1) (t2tb11 s) (t2tb1 t)))
  (and (mem (tuple2 a1 b1) (t2tb13 x) (t2tb11 s)) (mem a1 (t2tb2 y)
  (t2tb1 t))))))

(declare-fun t2tb1285 ((set (tuple21 (set a) (set b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set a) (set b))))) (sort
  (set1 (tuple2 (set1 a1) (set1 b1))) (t2tb1285 x))))

(declare-fun tb2t1285 (uni) (set (tuple21 (set a) (set b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set a) (set b)))))
  (! (= (tb2t1285 (t2tb1285 i)) i) :pattern ((t2tb1285 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 a1) (set1 b1))) j)
     (= (t2tb1285 (tb2t1285 j)) j)) :pattern ((t2tb1285 (tb2t1285 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set a))) (t (set (set b))) (x (set a)) (y (set b)))
  (= (mem (tuple2 (set1 a1) (set1 b1)) (t2tb495 (Tuple23 x y))
  (times (set1 b1) (set1 a1) (t2tb s) (t2tb44 t)))
  (and (mem (set1 a1) (t2tb1 x) (t2tb s)) (mem (set1 b1) (t2tb12 y)
  (t2tb44 t))))))

;; mem_times
  (assert
  (forall ((s (set a)) (t (set b)) (x a) (y b))
  (= (mem (tuple2 a1 b1) (t2tb13 (Tuple21 x y))
  (times b1 a1 (t2tb1 s) (t2tb12 t)))
  (and (mem a1 (t2tb2 x) (t2tb1 s)) (mem b1 (t2tb14 y) (t2tb12 t))))))

;; mem_times
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (x uni) (y uni))
  (= (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) (times b2 a2 s t))
  (and (mem a2 x s) (mem b2 y t))))))

;; mem_power
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t uni))
  (and
  (=> (mem (set1 a2) s (power a2 t))
  (forall ((x uni)) (=> (mem a2 x s) (mem a2 x t))))
  (=> (forall ((x uni)) (=> (sort a2 x) (=> (mem a2 x s) (mem a2 x t)))) (mem
  (set1 a2) s (power a2 t)))))))

;; mem_non_empty_power
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t uni))
  (and
  (=> (mem (set1 a2) s (non_empty_power a2 t))
  (and (forall ((x uni)) (=> (mem a2 x s) (mem a2 x t)))
  (not (infix_eqeq a2 s (empty a2)))))
  (=>
  (and (forall ((x uni)) (=> (sort a2 x) (=> (mem a2 x s) (mem a2 x t))))
  (not (infix_eqeq a2 s (empty a2)))) (mem (set1 a2) s
  (non_empty_power a2 t)))))))

(declare-fun choose (ty uni) uni)

;; choose_sort
  (assert (forall ((a2 ty)) (forall ((x uni)) (sort a2 (choose a2 x)))))

(declare-fun relation (ty ty uni uni) uni)

;; relation_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (set1 (tuple2 a2 b2)))
  (relation b2 a2 x x1)))))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a b))) (v (set a)) (r (set (tuple21 (tuple21 a b)
  a))))
  (= (mem (set1 (tuple2 (tuple2 a1 b1) a1)) (t2tb29 r)
  (relation a1 (tuple2 a1 b1) (t2tb11 u) (t2tb1 v)))
  (forall ((x (tuple21 a b)) (y a))
  (=> (mem (tuple2 (tuple2 a1 b1) a1) (t2tb30 (Tuple22 x y)) (t2tb29 r))
  (and (mem (tuple2 a1 b1) (t2tb13 x) (t2tb11 u)) (mem a1 (t2tb2 y)
  (t2tb1 v))))))))

(declare-fun t2tb1286 ((set (set (tuple21 (set a) (set b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set a) (set b)))))) (sort
  (set1 (set1 (tuple2 (set1 a1) (set1 b1)))) (t2tb1286 x))))

(declare-fun tb2t1286 (uni) (set (set (tuple21 (set a) (set b)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set a) (set b))))))
  (! (= (tb2t1286 (t2tb1286 i)) i) :pattern ((t2tb1286 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 a1) (set1 b1)))) j)
     (= (t2tb1286 (tb2t1286 j)) j)) :pattern ((t2tb1286 (tb2t1286 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set a))) (v (set (set b))) (r (set (tuple21 (set a)
  (set b)))))
  (= (mem (set1 (tuple2 (set1 a1) (set1 b1))) (t2tb1285 r)
  (relation (set1 b1) (set1 a1) (t2tb u) (t2tb44 v)))
  (forall ((x (set a)) (y (set b)))
  (=> (mem (tuple2 (set1 a1) (set1 b1)) (t2tb495 (Tuple23 x y)) (t2tb1285 r))
  (and (mem (set1 a1) (t2tb1 x) (t2tb u)) (mem (set1 b1) (t2tb12 y)
  (t2tb44 v))))))))

(declare-fun t2tb10 ((set (set (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 a b))))) (sort (set1 (set1 (tuple2 a1 b1)))
  (t2tb10 x))))

(declare-fun tb2t10 (uni) (set (set (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 a b)))))
  (! (= (tb2t10 (t2tb10 i)) i) :pattern ((t2tb10 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 a1 b1))) j) (= (t2tb10 (tb2t10 j)) j)) :pattern (
  (t2tb10 (tb2t10 j))) )))

;; mem_relation
  (assert
  (forall ((u (set a)) (v (set b)) (r (set (tuple21 a b))))
  (= (mem (set1 (tuple2 a1 b1)) (t2tb11 r)
  (relation b1 a1 (t2tb1 u) (t2tb12 v)))
  (forall ((x a) (y b))
  (=> (mem (tuple2 a1 b1) (t2tb13 (Tuple21 x y)) (t2tb11 r))
  (and (mem a1 (t2tb2 x) (t2tb1 u)) (mem b1 (t2tb14 y) (t2tb12 v))))))))

;; mem_relation
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((u uni) (v uni) (r uni))
  (and
  (=> (mem (set1 (tuple2 a2 b2)) r (relation b2 a2 u v))
  (forall ((x uni) (y uni))
  (=> (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) r)
  (and (mem a2 x u) (mem b2 y v)))))
  (=>
  (forall ((x uni) (y uni))
  (=> (sort a2 x)
  (=> (sort b2 y)
  (=> (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) r)
  (and (mem a2 x u) (mem b2 y v)))))) (mem (set1 (tuple2 a2 b2)) r
  (relation b2 a2 u v)))))))

(declare-fun inverse (ty ty uni) uni)

;; inverse_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni)) (sort (set1 (tuple2 b2 a2)) (inverse b2 a2 x)))))

(declare-fun t2tb41 ((set (tuple21 a (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (tuple21 a b))))) (sort
  (set1 (tuple2 a1 (tuple2 a1 b1))) (t2tb41 x))))

(declare-fun tb2t41 (uni) (set (tuple21 a (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (tuple21 a b)))))
  (! (= (tb2t41 (t2tb41 i)) i) :pattern ((t2tb41 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (tuple2 a1 b1))) j)
     (= (t2tb41 (tb2t41 j)) j)) :pattern ((t2tb41 (tb2t41 j))) )))

(declare-fun t2tb42 ((tuple21 a (tuple21 a b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (tuple21 a b)))) (sort (tuple2 a1 (tuple2 a1 b1))
  (t2tb42 x))))

(declare-fun tb2t42 (uni) (tuple21 a (tuple21 a b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (tuple21 a b))))
  (! (= (tb2t42 (t2tb42 i)) i) :pattern ((t2tb42 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (tuple2 a1 b1)) j) (= (t2tb42 (tb2t42 j)) j)) :pattern (
  (t2tb42 (tb2t42 j))) )))

;; mem_inverse
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) a))) (x a) (y (tuple21 a b)))
  (= (mem (tuple2 a1 (tuple2 a1 b1))
  (Tuple2 a1 (tuple2 a1 b1) (t2tb2 x) (t2tb13 y))
  (inverse a1 (tuple2 a1 b1) (t2tb29 p))) (mem (tuple2 (tuple2 a1 b1) a1)
  (t2tb30 (Tuple22 y x)) (t2tb29 p)))))

(declare-fun t2tb1287 ((set (tuple21 (set b) (set a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set b) (set a))))) (sort
  (set1 (tuple2 (set1 b1) (set1 a1))) (t2tb1287 x))))

(declare-fun tb2t1287 (uni) (set (tuple21 (set b) (set a))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set b) (set a)))))
  (! (= (tb2t1287 (t2tb1287 i)) i) :pattern ((t2tb1287 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 b1) (set1 a1))) j)
     (= (t2tb1287 (tb2t1287 j)) j)) :pattern ((t2tb1287 (tb2t1287 j))) )))

(declare-fun t2tb1288 ((tuple21 (set b) (set a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set b) (set a)))) (sort (tuple2 (set1 b1) (set1 a1))
  (t2tb1288 x))))

(declare-fun tb2t1288 (uni) (tuple21 (set b) (set a)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set b) (set a))))
  (! (= (tb2t1288 (t2tb1288 i)) i) :pattern ((t2tb1288 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 b1) (set1 a1)) j) (= (t2tb1288 (tb2t1288 j)) j)) :pattern (
  (t2tb1288 (tb2t1288 j))) )))

;; mem_inverse
  (assert
  (forall ((p (set (tuple21 (set b) (set a)))) (x (set a)) (y (set b)))
  (= (mem (tuple2 (set1 a1) (set1 b1)) (t2tb495 (Tuple23 x y))
  (inverse (set1 a1) (set1 b1) (t2tb1287 p))) (mem
  (tuple2 (set1 b1) (set1 a1))
  (Tuple2 (set1 b1) (set1 a1) (t2tb12 y) (t2tb1 x)) (t2tb1287 p)))))

(declare-fun t2tb37 ((set (tuple21 b a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 b a)))) (sort (set1 (tuple2 b1 a1)) (t2tb37 x))))

(declare-fun tb2t37 (uni) (set (tuple21 b a)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 b a))))
  (! (= (tb2t37 (t2tb37 i)) i) :pattern ((t2tb37 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 b1 a1)) j) (= (t2tb37 (tb2t37 j)) j)) :pattern (
  (t2tb37 (tb2t37 j))) )))

(declare-fun t2tb38 ((tuple21 b a)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 b a))) (sort (tuple2 b1 a1) (t2tb38 x))))

(declare-fun tb2t38 (uni) (tuple21 b a))

;; BridgeL
  (assert
  (forall ((i (tuple21 b a)))
  (! (= (tb2t38 (t2tb38 i)) i) :pattern ((t2tb38 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 b1 a1) j) (= (t2tb38 (tb2t38 j)) j)) :pattern (
  (t2tb38 (tb2t38 j))) )))

;; mem_inverse
  (assert
  (forall ((p (set (tuple21 b a))) (x a) (y b))
  (= (mem (tuple2 a1 b1) (t2tb13 (Tuple21 x y)) (inverse a1 b1 (t2tb37 p)))
  (mem (tuple2 b1 a1) (Tuple2 b1 a1 (t2tb14 y) (t2tb2 x)) (t2tb37 p)))))

;; mem_inverse
  (assert
  (forall ((p (set (tuple21 (set a) (set b)))) (x (set b)) (y (set a)))
  (= (mem (tuple2 (set1 b1) (set1 a1))
  (Tuple2 (set1 b1) (set1 a1) (t2tb12 x) (t2tb1 y))
  (inverse (set1 b1) (set1 a1) (t2tb1285 p))) (mem
  (tuple2 (set1 a1) (set1 b1)) (t2tb495 (Tuple23 y x)) (t2tb1285 p)))))

;; mem_inverse
  (assert
  (forall ((p (set (tuple21 a (tuple21 a b)))) (x (tuple21 a b)) (y a))
  (= (mem (tuple2 (tuple2 a1 b1) a1) (t2tb30 (Tuple22 x y))
  (inverse (tuple2 a1 b1) a1 (t2tb41 p))) (mem (tuple2 a1 (tuple2 a1 b1))
  (Tuple2 a1 (tuple2 a1 b1) (t2tb2 y) (t2tb13 x)) (t2tb41 p)))))

;; mem_inverse
  (assert
  (forall ((p (set (tuple21 a b))) (x b) (y a))
  (= (mem (tuple2 b1 a1) (Tuple2 b1 a1 (t2tb14 x) (t2tb2 y))
  (inverse b1 a1 (t2tb11 p))) (mem (tuple2 a1 b1) (t2tb13 (Tuple21 y x))
  (t2tb11 p)))))

;; mem_inverse
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((p uni) (x uni) (y uni))
  (= (mem (tuple2 b2 a2) (Tuple2 b2 a2 x y) (inverse b2 a2 p)) (mem
  (tuple2 a2 b2) (Tuple2 a2 b2 y x) p)))))

(declare-fun dom (ty ty uni) uni)

;; dom_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni)) (sort (set1 a2) (dom b2 a2 x)))))

;; mem_dom
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) a))) (x (tuple21 a b)))
  (= (mem (tuple2 a1 b1) (t2tb13 x) (dom a1 (tuple2 a1 b1) (t2tb29 p)))
  (exists ((b2 a)) (mem (tuple2 (tuple2 a1 b1) a1) (t2tb30 (Tuple22 x b2))
  (t2tb29 p))))))

;; mem_dom
  (assert
  (forall ((p (set (tuple21 (set a) (set b)))) (x (set a)))
  (= (mem (set1 a1) (t2tb1 x) (dom (set1 b1) (set1 a1) (t2tb1285 p)))
  (exists ((b2 (set b))) (mem (tuple2 (set1 a1) (set1 b1))
  (t2tb495 (Tuple23 x b2)) (t2tb1285 p))))))

;; mem_dom
  (assert
  (forall ((p (set (tuple21 a b))) (x a))
  (= (mem a1 (t2tb2 x) (dom b1 a1 (t2tb11 p)))
  (exists ((b2 b)) (mem (tuple2 a1 b1) (t2tb13 (Tuple21 x b2)) (t2tb11 p))))))

;; mem_dom
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((p uni) (x uni))
  (and
  (=> (mem a2 x (dom b2 a2 p))
  (exists ((b3 uni))
  (and (sort b2 b3) (mem (tuple2 a2 b2) (Tuple2 a2 b2 x b3) p))))
  (=> (exists ((b3 uni)) (mem (tuple2 a2 b2) (Tuple2 a2 b2 x b3) p)) (mem a2
  x (dom b2 a2 p)))))))

(declare-fun ran (ty ty uni) uni)

;; ran_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni)) (sort (set1 b2) (ran b2 a2 x)))))

;; mem_ran
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) a))) (x a))
  (= (mem a1 (t2tb2 x) (ran a1 (tuple2 a1 b1) (t2tb29 p)))
  (exists ((a2 (tuple21 a b))) (mem (tuple2 (tuple2 a1 b1) a1)
  (t2tb30 (Tuple22 a2 x)) (t2tb29 p))))))

;; mem_ran
  (assert
  (forall ((p (set (tuple21 (set a) (set b)))) (x (set b)))
  (= (mem (set1 b1) (t2tb12 x) (ran (set1 b1) (set1 a1) (t2tb1285 p)))
  (exists ((a2 (set a))) (mem (tuple2 (set1 a1) (set1 b1))
  (t2tb495 (Tuple23 a2 x)) (t2tb1285 p))))))

;; mem_ran
  (assert
  (forall ((p (set (tuple21 a b))) (x b))
  (= (mem b1 (t2tb14 x) (ran b1 a1 (t2tb11 p)))
  (exists ((a2 a)) (mem (tuple2 a1 b1) (t2tb13 (Tuple21 a2 x)) (t2tb11 p))))))

;; mem_ran
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((p uni) (x uni))
  (and
  (=> (mem b2 x (ran b2 a2 p))
  (exists ((a3 uni))
  (and (sort a2 a3) (mem (tuple2 a2 b2) (Tuple2 a2 b2 a3 x) p))))
  (=> (exists ((a3 uni)) (mem (tuple2 a2 b2) (Tuple2 a2 b2 a3 x) p)) (mem b2
  x (ran b2 a2 p)))))))

(declare-fun semicolon (ty ty ty uni uni) uni)

;; semicolon_sort
  (assert
  (forall ((a2 ty) (b2 ty) (c2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (tuple2 a2 c2))
  (semicolon c2 b2 a2 x x1)))))

;; mem_semicolon
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (q (set (tuple21 (tuple21 a b) a))) (x uni) (y a))
  (= (mem (tuple2 a2 a1) (Tuple2 a2 a1 x (t2tb2 y))
  (semicolon a1 (tuple2 a1 b1) a2 p (t2tb29 q)))
  (exists ((b2 (tuple21 a b)))
  (and (mem (tuple2 a2 (tuple2 a1 b1))
  (Tuple2 a2 (tuple2 a1 b1) x (t2tb13 b2)) p) (mem (tuple2 (tuple2 a1 b1) a1)
  (t2tb30 (Tuple22 b2 y)) (t2tb29 q))))))))

;; mem_semicolon
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (q (set (tuple21 (set a) (set b)))) (x uni) (y (set b)))
  (= (mem (tuple2 a2 (set1 b1)) (Tuple2 a2 (set1 b1) x (t2tb12 y))
  (semicolon (set1 b1) (set1 a1) a2 p (t2tb1285 q)))
  (exists ((b2 (set a)))
  (and (mem (tuple2 a2 (set1 a1)) (Tuple2 a2 (set1 a1) x (t2tb1 b2)) p) (mem
  (tuple2 (set1 a1) (set1 b1)) (t2tb495 (Tuple23 b2 y)) (t2tb1285 q))))))))

;; mem_semicolon
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (q (set (tuple21 a b))) (x uni) (y b))
  (= (mem (tuple2 a2 b1) (Tuple2 a2 b1 x (t2tb14 y))
  (semicolon b1 a1 a2 p (t2tb11 q)))
  (exists ((b2 a))
  (and (mem (tuple2 a2 a1) (Tuple2 a2 a1 x (t2tb2 b2)) p) (mem (tuple2 a1 b1)
  (t2tb13 (Tuple21 b2 y)) (t2tb11 q))))))))

;; mem_semicolon
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (q uni) (x (tuple21 a b)) (y a))
  (and
  (=> (mem (tuple2 (tuple2 a1 b1) a1) (t2tb30 (Tuple22 x y))
  (semicolon a1 b2 (tuple2 a1 b1) p q))
  (exists ((b3 uni))
  (and (sort b2 b3)
  (and (mem (tuple2 (tuple2 a1 b1) b2)
  (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) b3) p) (mem (tuple2 b2 a1)
  (Tuple2 b2 a1 b3 (t2tb2 y)) q)))))
  (=>
  (exists ((b3 uni))
  (and (mem (tuple2 (tuple2 a1 b1) b2)
  (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) b3) p) (mem (tuple2 b2 a1)
  (Tuple2 b2 a1 b3 (t2tb2 y)) q))) (mem (tuple2 (tuple2 a1 b1) a1)
  (t2tb30 (Tuple22 x y)) (semicolon a1 b2 (tuple2 a1 b1) p q)))))))

(declare-fun t2tb25 ((set (tuple21 (tuple21 a b) (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) (tuple21 a b))))) (sort
  (set1 (tuple2 (tuple2 a1 b1) (tuple2 a1 b1))) (t2tb25 x))))

(declare-fun tb2t25 (uni) (set (tuple21 (tuple21 a b) (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a b) (tuple21 a b)))))
  (! (= (tb2t25 (t2tb25 i)) i) :pattern ((t2tb25 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 b1) (tuple2 a1 b1))) j)
     (= (t2tb25 (tb2t25 j)) j)) :pattern ((t2tb25 (tb2t25 j))) )))

(declare-fun t2tb26 ((tuple21 (tuple21 a b) (tuple21 a b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a b) (tuple21 a b)))) (sort
  (tuple2 (tuple2 a1 b1) (tuple2 a1 b1)) (t2tb26 x))))

(declare-fun tb2t26 (uni) (tuple21 (tuple21 a b) (tuple21 a b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a b) (tuple21 a b))))
  (! (= (tb2t26 (t2tb26 i)) i) :pattern ((t2tb26 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 b1) (tuple2 a1 b1)) j)
     (= (t2tb26 (tb2t26 j)) j)) :pattern ((t2tb26 (tb2t26 j))) )))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) (tuple21 a b))))
  (q (set (tuple21 (tuple21 a b) a))) (x (tuple21 a b)) (y a))
  (= (mem (tuple2 (tuple2 a1 b1) a1) (t2tb30 (Tuple22 x y))
  (semicolon a1 (tuple2 a1 b1) (tuple2 a1 b1) (t2tb25 p) (t2tb29 q)))
  (exists ((b2 (tuple21 a b)))
  (and (mem (tuple2 (tuple2 a1 b1) (tuple2 a1 b1))
  (Tuple2 (tuple2 a1 b1) (tuple2 a1 b1) (t2tb13 x) (t2tb13 b2)) (t2tb25 p))
  (mem (tuple2 (tuple2 a1 b1) a1) (t2tb30 (Tuple22 b2 y)) (t2tb29 q)))))))

(declare-fun t2tb27 ((set (tuple21 (tuple21 a b) b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) b)))) (sort
  (set1 (tuple2 (tuple2 a1 b1) b1)) (t2tb27 x))))

(declare-fun tb2t27 (uni) (set (tuple21 (tuple21 a b) b)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a b) b))))
  (! (= (tb2t27 (t2tb27 i)) i) :pattern ((t2tb27 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 b1) b1)) j)
     (= (t2tb27 (tb2t27 j)) j)) :pattern ((t2tb27 (tb2t27 j))) )))

(declare-fun t2tb28 ((tuple21 (tuple21 a b) b)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a b) b))) (sort (tuple2 (tuple2 a1 b1) b1)
  (t2tb28 x))))

(declare-fun tb2t28 (uni) (tuple21 (tuple21 a b) b))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a b) b)))
  (! (= (tb2t28 (t2tb28 i)) i) :pattern ((t2tb28 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 b1) b1) j) (= (t2tb28 (tb2t28 j)) j)) :pattern (
  (t2tb28 (tb2t28 j))) )))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) a))) (q (set (tuple21 a b)))
  (x (tuple21 a b)) (y b))
  (= (mem (tuple2 (tuple2 a1 b1) b1)
  (Tuple2 (tuple2 a1 b1) b1 (t2tb13 x) (t2tb14 y))
  (semicolon b1 a1 (tuple2 a1 b1) (t2tb29 p) (t2tb11 q)))
  (exists ((b2 a))
  (and (mem (tuple2 (tuple2 a1 b1) a1) (t2tb30 (Tuple22 x b2)) (t2tb29 p))
  (mem (tuple2 a1 b1) (t2tb13 (Tuple21 b2 y)) (t2tb11 q)))))))

(declare-fun t2tb4 ((set (tuple21 a a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a a)))) (sort (set1 (tuple2 a1 a1)) (t2tb4 x))))

(declare-fun tb2t4 (uni) (set (tuple21 a a)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a a))))
  (! (= (tb2t4 (t2tb4 i)) i) :pattern ((t2tb4 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 a1)) j) (= (t2tb4 (tb2t4 j)) j)) :pattern (
  (t2tb4 (tb2t4 j))) )))

(declare-fun t2tb5 ((tuple21 a a)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 a a))) (sort (tuple2 a1 a1) (t2tb5 x))))

(declare-fun tb2t5 (uni) (tuple21 a a))

;; BridgeL
  (assert
  (forall ((i (tuple21 a a)))
  (! (= (tb2t5 (t2tb5 i)) i) :pattern ((t2tb5 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 a1) j) (= (t2tb5 (tb2t5 j)) j)) :pattern ((t2tb5
                                                                    (tb2t5 j))) )))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) a))) (q (set (tuple21 a a)))
  (x (tuple21 a b)) (y a))
  (= (mem (tuple2 (tuple2 a1 b1) a1) (t2tb30 (Tuple22 x y))
  (semicolon a1 a1 (tuple2 a1 b1) (t2tb29 p) (t2tb4 q)))
  (exists ((b2 a))
  (and (mem (tuple2 (tuple2 a1 b1) a1) (t2tb30 (Tuple22 x b2)) (t2tb29 p))
  (mem (tuple2 a1 a1) (Tuple2 a1 a1 (t2tb2 b2) (t2tb2 y)) (t2tb4 q)))))))

;; mem_semicolon
  (assert
  (forall ((c2 ty))
  (forall ((p (set (tuple21 (tuple21 a b) a))) (q uni) (x (tuple21 a b))
  (y uni))
  (= (mem (tuple2 (tuple2 a1 b1) c2) (Tuple2 (tuple2 a1 b1) c2 (t2tb13 x) y)
  (semicolon c2 a1 (tuple2 a1 b1) (t2tb29 p) q))
  (exists ((b2 a))
  (and (mem (tuple2 (tuple2 a1 b1) a1) (t2tb30 (Tuple22 x b2)) (t2tb29 p))
  (mem (tuple2 a1 c2) (Tuple2 a1 c2 (t2tb2 b2) y) q)))))))

;; mem_semicolon
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (q uni) (x (set a)) (y (set b)))
  (and
  (=> (mem (tuple2 (set1 a1) (set1 b1)) (t2tb495 (Tuple23 x y))
  (semicolon (set1 b1) b2 (set1 a1) p q))
  (exists ((b3 uni))
  (and (sort b2 b3)
  (and (mem (tuple2 (set1 a1) b2) (Tuple2 (set1 a1) b2 (t2tb1 x) b3) p) (mem
  (tuple2 b2 (set1 b1)) (Tuple2 b2 (set1 b1) b3 (t2tb12 y)) q)))))
  (=>
  (exists ((b3 uni))
  (and (mem (tuple2 (set1 a1) b2) (Tuple2 (set1 a1) b2 (t2tb1 x) b3) p) (mem
  (tuple2 b2 (set1 b1)) (Tuple2 b2 (set1 b1) b3 (t2tb12 y)) q))) (mem
  (tuple2 (set1 a1) (set1 b1)) (t2tb495 (Tuple23 x y))
  (semicolon (set1 b1) b2 (set1 a1) p q)))))))

(declare-fun t2tb1289 ((set (tuple21 (set b) (set b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set b) (set b))))) (sort
  (set1 (tuple2 (set1 b1) (set1 b1))) (t2tb1289 x))))

(declare-fun tb2t1289 (uni) (set (tuple21 (set b) (set b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set b) (set b)))))
  (! (= (tb2t1289 (t2tb1289 i)) i) :pattern ((t2tb1289 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 b1) (set1 b1))) j)
     (= (t2tb1289 (tb2t1289 j)) j)) :pattern ((t2tb1289 (tb2t1289 j))) )))

(declare-fun t2tb1290 ((tuple21 (set b) (set b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set b) (set b)))) (sort (tuple2 (set1 b1) (set1 b1))
  (t2tb1290 x))))

(declare-fun tb2t1290 (uni) (tuple21 (set b) (set b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set b) (set b))))
  (! (= (tb2t1290 (t2tb1290 i)) i) :pattern ((t2tb1290 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 b1) (set1 b1)) j) (= (t2tb1290 (tb2t1290 j)) j)) :pattern (
  (t2tb1290 (tb2t1290 j))) )))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 (set a) (set b)))) (q (set (tuple21 (set b)
  (set b)))) (x (set a)) (y (set b)))
  (= (mem (tuple2 (set1 a1) (set1 b1)) (t2tb495 (Tuple23 x y))
  (semicolon (set1 b1) (set1 b1) (set1 a1) (t2tb1285 p) (t2tb1289 q)))
  (exists ((b2 (set b)))
  (and (mem (tuple2 (set1 a1) (set1 b1)) (t2tb495 (Tuple23 x b2))
  (t2tb1285 p)) (mem (tuple2 (set1 b1) (set1 b1))
  (Tuple2 (set1 b1) (set1 b1) (t2tb12 b2) (t2tb12 y)) (t2tb1289 q)))))))

;; mem_semicolon
  (assert
  (forall ((c2 ty))
  (forall ((p (set (tuple21 (set a) (set b)))) (q uni) (x (set a)) (y uni))
  (= (mem (tuple2 (set1 a1) c2) (Tuple2 (set1 a1) c2 (t2tb1 x) y)
  (semicolon c2 (set1 b1) (set1 a1) (t2tb1285 p) q))
  (exists ((b2 (set b)))
  (and (mem (tuple2 (set1 a1) (set1 b1)) (t2tb495 (Tuple23 x b2))
  (t2tb1285 p)) (mem (tuple2 (set1 b1) c2)
  (Tuple2 (set1 b1) c2 (t2tb12 b2) y) q)))))))

(declare-fun t2tb1291 ((set (tuple21 (set a) (set a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set a) (set a))))) (sort
  (set1 (tuple2 (set1 a1) (set1 a1))) (t2tb1291 x))))

(declare-fun tb2t1291 (uni) (set (tuple21 (set a) (set a))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set a) (set a)))))
  (! (= (tb2t1291 (t2tb1291 i)) i) :pattern ((t2tb1291 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 a1) (set1 a1))) j)
     (= (t2tb1291 (tb2t1291 j)) j)) :pattern ((t2tb1291 (tb2t1291 j))) )))

(declare-fun t2tb1292 ((tuple21 (set a) (set a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set a) (set a)))) (sort (tuple2 (set1 a1) (set1 a1))
  (t2tb1292 x))))

(declare-fun tb2t1292 (uni) (tuple21 (set a) (set a)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set a) (set a))))
  (! (= (tb2t1292 (t2tb1292 i)) i) :pattern ((t2tb1292 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 a1) (set1 a1)) j) (= (t2tb1292 (tb2t1292 j)) j)) :pattern (
  (t2tb1292 (tb2t1292 j))) )))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 (set a) (set a)))) (q (set (tuple21 (set a)
  (set b)))) (x (set a)) (y (set b)))
  (= (mem (tuple2 (set1 a1) (set1 b1)) (t2tb495 (Tuple23 x y))
  (semicolon (set1 b1) (set1 a1) (set1 a1) (t2tb1291 p) (t2tb1285 q)))
  (exists ((b2 (set a)))
  (and (mem (tuple2 (set1 a1) (set1 a1))
  (Tuple2 (set1 a1) (set1 a1) (t2tb1 x) (t2tb1 b2)) (t2tb1291 p)) (mem
  (tuple2 (set1 a1) (set1 b1)) (t2tb495 (Tuple23 b2 y)) (t2tb1285 q)))))))

;; mem_semicolon
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (q uni) (x a) (y b))
  (and
  (=> (mem (tuple2 a1 b1) (t2tb13 (Tuple21 x y)) (semicolon b1 b2 a1 p q))
  (exists ((b3 uni))
  (and (sort b2 b3)
  (and (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) b3) p) (mem (tuple2 b2 b1)
  (Tuple2 b2 b1 b3 (t2tb14 y)) q)))))
  (=>
  (exists ((b3 uni))
  (and (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) b3) p) (mem (tuple2 b2 b1)
  (Tuple2 b2 b1 b3 (t2tb14 y)) q))) (mem (tuple2 a1 b1)
  (t2tb13 (Tuple21 x y)) (semicolon b1 b2 a1 p q)))))))

(declare-fun t2tb35 ((set (tuple21 b b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 b b)))) (sort (set1 (tuple2 b1 b1)) (t2tb35 x))))

(declare-fun tb2t35 (uni) (set (tuple21 b b)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 b b))))
  (! (= (tb2t35 (t2tb35 i)) i) :pattern ((t2tb35 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 b1 b1)) j) (= (t2tb35 (tb2t35 j)) j)) :pattern (
  (t2tb35 (tb2t35 j))) )))

(declare-fun t2tb36 ((tuple21 b b)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 b b))) (sort (tuple2 b1 b1) (t2tb36 x))))

(declare-fun tb2t36 (uni) (tuple21 b b))

;; BridgeL
  (assert
  (forall ((i (tuple21 b b)))
  (! (= (tb2t36 (t2tb36 i)) i) :pattern ((t2tb36 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 b1 b1) j) (= (t2tb36 (tb2t36 j)) j)) :pattern (
  (t2tb36 (tb2t36 j))) )))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 a b))) (q (set (tuple21 b b))) (x a) (y b))
  (= (mem (tuple2 a1 b1) (t2tb13 (Tuple21 x y))
  (semicolon b1 b1 a1 (t2tb11 p) (t2tb35 q)))
  (exists ((b2 b))
  (and (mem (tuple2 a1 b1) (t2tb13 (Tuple21 x b2)) (t2tb11 p)) (mem
  (tuple2 b1 b1) (Tuple2 b1 b1 (t2tb14 b2) (t2tb14 y)) (t2tb35 q)))))))

;; mem_semicolon
  (assert
  (forall ((c2 ty))
  (forall ((p (set (tuple21 a b))) (q uni) (x a) (y uni))
  (= (mem (tuple2 a1 c2) (Tuple2 a1 c2 (t2tb2 x) y)
  (semicolon c2 b1 a1 (t2tb11 p) q))
  (exists ((b2 b))
  (and (mem (tuple2 a1 b1) (t2tb13 (Tuple21 x b2)) (t2tb11 p)) (mem
  (tuple2 b1 c2) (Tuple2 b1 c2 (t2tb14 b2) y) q)))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 a a))) (q (set (tuple21 a b))) (x a) (y b))
  (= (mem (tuple2 a1 b1) (t2tb13 (Tuple21 x y))
  (semicolon b1 a1 a1 (t2tb4 p) (t2tb11 q)))
  (exists ((b2 a))
  (and (mem (tuple2 a1 a1) (Tuple2 a1 a1 (t2tb2 x) (t2tb2 b2)) (t2tb4 p))
  (mem (tuple2 a1 b1) (t2tb13 (Tuple21 b2 y)) (t2tb11 q)))))))

;; mem_semicolon
  (assert
  (forall ((a2 ty) (b2 ty) (c2 ty))
  (forall ((p uni) (q uni) (x uni) (y uni))
  (and
  (=> (mem (tuple2 a2 c2) (Tuple2 a2 c2 x y) (semicolon c2 b2 a2 p q))
  (exists ((b3 uni))
  (and (sort b2 b3)
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x b3) p) (mem (tuple2 b2 c2)
  (Tuple2 b2 c2 b3 y) q)))))
  (=>
  (exists ((b3 uni))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x b3) p) (mem (tuple2 b2 c2)
  (Tuple2 b2 c2 b3 y) q))) (mem (tuple2 a2 c2) (Tuple2 a2 c2 x y)
  (semicolon c2 b2 a2 p q)))))))

(declare-fun semicolon_back (ty ty ty uni uni) uni)

;; semicolon_back_sort
  (assert
  (forall ((a2 ty) (b2 ty) (c2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (tuple2 a2 c2))
  (semicolon_back c2 b2 a2 x x1)))))

;; semicolon_back
  (assert
  (forall ((a2 ty) (b2 ty) (c2 ty))
  (forall ((p uni) (q uni))
  (= (semicolon_back c2 b2 a2 q p) (semicolon c2 b2 a2 p q)))))

(declare-fun id (ty uni) uni)

;; id_sort
  (assert
  (forall ((a2 ty))
  (forall ((x uni)) (sort (set1 (tuple2 a2 a2)) (id a2 x)))))

;; mem_id
  (assert
  (forall ((a2 ty))
  (forall ((u uni) (x uni) (y uni))
  (=> (sort a2 x)
  (=> (sort a2 y)
  (= (mem (tuple2 a2 a2) (Tuple2 a2 a2 x y) (id a2 u))
  (and (mem a2 x u) (= x y))))))))

(declare-fun domain_restriction (ty ty uni uni) uni)

;; domain_restriction_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (tuple2 a2 b2))
  (domain_restriction b2 a2 x x1)))))

;; mem_domain_restriction
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) a))) (s (set (tuple21 a b)))
  (x (tuple21 a b)) (y a))
  (= (mem (tuple2 (tuple2 a1 b1) a1) (t2tb30 (Tuple22 x y))
  (domain_restriction a1 (tuple2 a1 b1) (t2tb11 s) (t2tb29 p)))
  (and (mem (tuple2 (tuple2 a1 b1) a1) (t2tb30 (Tuple22 x y)) (t2tb29 p))
  (mem (tuple2 a1 b1) (t2tb13 x) (t2tb11 s))))))

;; mem_domain_restriction
  (assert
  (forall ((p (set (tuple21 (set a) (set b)))) (s (set (set a))) (x (set a))
  (y (set b)))
  (= (mem (tuple2 (set1 a1) (set1 b1)) (t2tb495 (Tuple23 x y))
  (domain_restriction (set1 b1) (set1 a1) (t2tb s) (t2tb1285 p)))
  (and (mem (tuple2 (set1 a1) (set1 b1)) (t2tb495 (Tuple23 x y))
  (t2tb1285 p)) (mem (set1 a1) (t2tb1 x) (t2tb s))))))

;; mem_domain_restriction
  (assert
  (forall ((p (set (tuple21 a b))) (s (set a)) (x a) (y b))
  (= (mem (tuple2 a1 b1) (t2tb13 (Tuple21 x y))
  (domain_restriction b1 a1 (t2tb1 s) (t2tb11 p)))
  (and (mem (tuple2 a1 b1) (t2tb13 (Tuple21 x y)) (t2tb11 p)) (mem a1
  (t2tb2 x) (t2tb1 s))))))

;; mem_domain_restriction
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((p uni) (s uni) (x uni) (y uni))
  (= (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) (domain_restriction b2 a2 s p))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) p) (mem a2 x s))))))

(declare-fun range_restriction (ty ty uni uni) uni)

;; range_restriction_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (tuple2 a2 b2))
  (range_restriction b2 a2 x x1)))))

;; mem_range_restriction
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) a))) (t (set a)) (x (tuple21 a b))
  (y a))
  (= (mem (tuple2 (tuple2 a1 b1) a1) (t2tb30 (Tuple22 x y))
  (range_restriction a1 (tuple2 a1 b1) (t2tb29 p) (t2tb1 t)))
  (and (mem (tuple2 (tuple2 a1 b1) a1) (t2tb30 (Tuple22 x y)) (t2tb29 p))
  (mem a1 (t2tb2 y) (t2tb1 t))))))

;; mem_range_restriction
  (assert
  (forall ((p (set (tuple21 (set a) (set b)))) (t (set (set b))) (x (set a))
  (y (set b)))
  (= (mem (tuple2 (set1 a1) (set1 b1)) (t2tb495 (Tuple23 x y))
  (range_restriction (set1 b1) (set1 a1) (t2tb1285 p) (t2tb44 t)))
  (and (mem (tuple2 (set1 a1) (set1 b1)) (t2tb495 (Tuple23 x y))
  (t2tb1285 p)) (mem (set1 b1) (t2tb12 y) (t2tb44 t))))))

;; mem_range_restriction
  (assert
  (forall ((p (set (tuple21 a b))) (t (set b)) (x a) (y b))
  (= (mem (tuple2 a1 b1) (t2tb13 (Tuple21 x y))
  (range_restriction b1 a1 (t2tb11 p) (t2tb12 t)))
  (and (mem (tuple2 a1 b1) (t2tb13 (Tuple21 x y)) (t2tb11 p)) (mem b1
  (t2tb14 y) (t2tb12 t))))))

;; mem_range_restriction
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((p uni) (t uni) (x uni) (y uni))
  (= (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) (range_restriction b2 a2 p t))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) p) (mem b2 y t))))))

(declare-fun domain_substraction (ty ty uni uni) uni)

;; domain_substraction_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (tuple2 a2 b2))
  (domain_substraction b2 a2 x x1)))))

;; mem_domain_substraction
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) a))) (s (set (tuple21 a b)))
  (x (tuple21 a b)) (y a))
  (= (mem (tuple2 (tuple2 a1 b1) a1) (t2tb30 (Tuple22 x y))
  (domain_substraction a1 (tuple2 a1 b1) (t2tb11 s) (t2tb29 p)))
  (and (mem (tuple2 (tuple2 a1 b1) a1) (t2tb30 (Tuple22 x y)) (t2tb29 p))
  (not (mem (tuple2 a1 b1) (t2tb13 x) (t2tb11 s)))))))

;; mem_domain_substraction
  (assert
  (forall ((p (set (tuple21 (set a) (set b)))) (s (set (set a))) (x (set a))
  (y (set b)))
  (= (mem (tuple2 (set1 a1) (set1 b1)) (t2tb495 (Tuple23 x y))
  (domain_substraction (set1 b1) (set1 a1) (t2tb s) (t2tb1285 p)))
  (and (mem (tuple2 (set1 a1) (set1 b1)) (t2tb495 (Tuple23 x y))
  (t2tb1285 p)) (not (mem (set1 a1) (t2tb1 x) (t2tb s)))))))

;; mem_domain_substraction
  (assert
  (forall ((p (set (tuple21 a b))) (s (set a)) (x a) (y b))
  (= (mem (tuple2 a1 b1) (t2tb13 (Tuple21 x y))
  (domain_substraction b1 a1 (t2tb1 s) (t2tb11 p)))
  (and (mem (tuple2 a1 b1) (t2tb13 (Tuple21 x y)) (t2tb11 p))
  (not (mem a1 (t2tb2 x) (t2tb1 s)))))))

;; mem_domain_substraction
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((p uni) (s uni) (x uni) (y uni))
  (= (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) (domain_substraction b2 a2 s p))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) p) (not (mem a2 x s)))))))

(declare-fun range_substraction (ty ty uni uni) uni)

;; range_substraction_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (tuple2 a2 b2))
  (range_substraction b2 a2 x x1)))))

;; mem_range_substraction
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) a))) (t (set a)) (x (tuple21 a b))
  (y a))
  (= (mem (tuple2 (tuple2 a1 b1) a1) (t2tb30 (Tuple22 x y))
  (range_substraction a1 (tuple2 a1 b1) (t2tb29 p) (t2tb1 t)))
  (and (mem (tuple2 (tuple2 a1 b1) a1) (t2tb30 (Tuple22 x y)) (t2tb29 p))
  (not (mem a1 (t2tb2 y) (t2tb1 t)))))))

;; mem_range_substraction
  (assert
  (forall ((p (set (tuple21 (set a) (set b)))) (t (set (set b))) (x (set a))
  (y (set b)))
  (= (mem (tuple2 (set1 a1) (set1 b1)) (t2tb495 (Tuple23 x y))
  (range_substraction (set1 b1) (set1 a1) (t2tb1285 p) (t2tb44 t)))
  (and (mem (tuple2 (set1 a1) (set1 b1)) (t2tb495 (Tuple23 x y))
  (t2tb1285 p)) (not (mem (set1 b1) (t2tb12 y) (t2tb44 t)))))))

;; mem_range_substraction
  (assert
  (forall ((p (set (tuple21 a b))) (t (set b)) (x a) (y b))
  (= (mem (tuple2 a1 b1) (t2tb13 (Tuple21 x y))
  (range_substraction b1 a1 (t2tb11 p) (t2tb12 t)))
  (and (mem (tuple2 a1 b1) (t2tb13 (Tuple21 x y)) (t2tb11 p))
  (not (mem b1 (t2tb14 y) (t2tb12 t)))))))

;; mem_range_substraction
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((p uni) (t uni) (x uni) (y uni))
  (= (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) (range_substraction b2 a2 p t))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) p) (not (mem b2 y t)))))))

(declare-fun image (ty ty uni uni) uni)

;; image_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 b2) (image b2 a2 x x1)))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) a))) (w (set (tuple21 a b))) (x a))
  (= (mem a1 (t2tb2 x) (image a1 (tuple2 a1 b1) (t2tb29 p) (t2tb11 w)))
  (exists ((a2 (tuple21 a b)))
  (and (mem (tuple2 a1 b1) (t2tb13 a2) (t2tb11 w)) (mem
  (tuple2 (tuple2 a1 b1) a1) (t2tb30 (Tuple22 a2 x)) (t2tb29 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set a) (set b)))) (w (set (set a))) (x (set b)))
  (= (mem (set1 b1) (t2tb12 x)
  (image (set1 b1) (set1 a1) (t2tb1285 p) (t2tb w)))
  (exists ((a2 (set a)))
  (and (mem (set1 a1) (t2tb1 a2) (t2tb w)) (mem (tuple2 (set1 a1) (set1 b1))
  (t2tb495 (Tuple23 a2 x)) (t2tb1285 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 a b))) (w (set a)) (x b))
  (= (mem b1 (t2tb14 x) (image b1 a1 (t2tb11 p) (t2tb1 w)))
  (exists ((a2 a))
  (and (mem a1 (t2tb2 a2) (t2tb1 w)) (mem (tuple2 a1 b1)
  (t2tb13 (Tuple21 a2 x)) (t2tb11 p)))))))

;; mem_image
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((p uni) (w uni) (x uni))
  (and
  (=> (mem b2 x (image b2 a2 p w))
  (exists ((a3 uni))
  (and (sort a2 a3)
  (and (mem a2 a3 w) (mem (tuple2 a2 b2) (Tuple2 a2 b2 a3 x) p)))))
  (=>
  (exists ((a3 uni))
  (and (mem a2 a3 w) (mem (tuple2 a2 b2) (Tuple2 a2 b2 a3 x) p))) (mem b2 x
  (image b2 a2 p w)))))))

(declare-fun infix_lspl (ty ty uni uni) uni)

;; infix <+_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (tuple2 a2 b2))
  (infix_lspl b2 a2 x x1)))))

;; mem_overriding
  (assert
  (forall ((q (set (tuple21 (tuple21 a b) a))) (p (set (tuple21 (tuple21 a b)
  a))) (x (tuple21 a b)) (y a))
  (= (mem (tuple2 (tuple2 a1 b1) a1) (t2tb30 (Tuple22 x y))
  (infix_lspl a1 (tuple2 a1 b1) (t2tb29 q) (t2tb29 p)))
  (or
  (and (mem (tuple2 (tuple2 a1 b1) a1) (t2tb30 (Tuple22 x y)) (t2tb29 q))
  (not (mem (tuple2 a1 b1) (t2tb13 x) (dom a1 (tuple2 a1 b1) (t2tb29 p)))))
  (mem (tuple2 (tuple2 a1 b1) a1) (t2tb30 (Tuple22 x y)) (t2tb29 p))))))

;; mem_overriding
  (assert
  (forall ((q (set (tuple21 (set a) (set b)))) (p (set (tuple21 (set a)
  (set b)))) (x (set a)) (y (set b)))
  (= (mem (tuple2 (set1 a1) (set1 b1)) (t2tb495 (Tuple23 x y))
  (infix_lspl (set1 b1) (set1 a1) (t2tb1285 q) (t2tb1285 p)))
  (or
  (and (mem (tuple2 (set1 a1) (set1 b1)) (t2tb495 (Tuple23 x y))
  (t2tb1285 q))
  (not (mem (set1 a1) (t2tb1 x) (dom (set1 b1) (set1 a1) (t2tb1285 p)))))
  (mem (tuple2 (set1 a1) (set1 b1)) (t2tb495 (Tuple23 x y)) (t2tb1285 p))))))

;; mem_overriding
  (assert
  (forall ((q (set (tuple21 a b))) (p (set (tuple21 a b))) (x a) (y b))
  (= (mem (tuple2 a1 b1) (t2tb13 (Tuple21 x y))
  (infix_lspl b1 a1 (t2tb11 q) (t2tb11 p)))
  (or
  (and (mem (tuple2 a1 b1) (t2tb13 (Tuple21 x y)) (t2tb11 q))
  (not (mem a1 (t2tb2 x) (dom b1 a1 (t2tb11 p))))) (mem (tuple2 a1 b1)
  (t2tb13 (Tuple21 x y)) (t2tb11 p))))))

;; mem_overriding
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((q uni) (p uni) (x uni) (y uni))
  (= (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) (infix_lspl b2 a2 q p))
  (or
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) q)
  (not (mem a2 x (dom b2 a2 p)))) (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) p))))))

(declare-fun direct_product (ty ty ty uni uni) uni)

;; direct_product_sort
  (assert
  (forall ((a2 ty) (b2 ty) (c2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (tuple2 a2 (tuple2 b2 c2)))
  (direct_product c2 b2 a2 x x1)))))

;; mem_direct_product
  (assert
  (forall ((a2 ty))
  (forall ((f uni) (g uni) (x uni) (y (tuple21 a b)) (z a))
  (= (mem (tuple2 a2 (tuple2 (tuple2 a1 b1) a1))
  (Tuple2 a2 (tuple2 (tuple2 a1 b1) a1) x (t2tb30 (Tuple22 y z)))
  (direct_product a1 (tuple2 a1 b1) a2 f g))
  (and (mem (tuple2 a2 (tuple2 a1 b1))
  (Tuple2 a2 (tuple2 a1 b1) x (t2tb13 y)) f) (mem (tuple2 a2 a1)
  (Tuple2 a2 a1 x (t2tb2 z)) g))))))

;; mem_direct_product
  (assert
  (forall ((a2 ty))
  (forall ((f uni) (g uni) (x uni) (y (set a)) (z (set b)))
  (= (mem (tuple2 a2 (tuple2 (set1 a1) (set1 b1)))
  (Tuple2 a2 (tuple2 (set1 a1) (set1 b1)) x (t2tb495 (Tuple23 y z)))
  (direct_product (set1 b1) (set1 a1) a2 f g))
  (and (mem (tuple2 a2 (set1 a1)) (Tuple2 a2 (set1 a1) x (t2tb1 y)) f) (mem
  (tuple2 a2 (set1 b1)) (Tuple2 a2 (set1 b1) x (t2tb12 z)) g))))))

;; mem_direct_product
  (assert
  (forall ((a2 ty))
  (forall ((f uni) (g uni) (x uni) (y a) (z b))
  (= (mem (tuple2 a2 (tuple2 a1 b1))
  (Tuple2 a2 (tuple2 a1 b1) x (t2tb13 (Tuple21 y z)))
  (direct_product b1 a1 a2 f g))
  (and (mem (tuple2 a2 a1) (Tuple2 a2 a1 x (t2tb2 y)) f) (mem (tuple2 a2 b1)
  (Tuple2 a2 b1 x (t2tb14 z)) g))))))

;; mem_direct_product
  (assert
  (forall ((b2 ty))
  (forall ((f uni) (g (set (tuple21 (tuple21 a b) a))) (x (tuple21 a b))
  (y uni) (z a))
  (= (mem (tuple2 (tuple2 a1 b1) (tuple2 b2 a1))
  (Tuple2 (tuple2 a1 b1) (tuple2 b2 a1) (t2tb13 x)
  (Tuple2 b2 a1 y (t2tb2 z)))
  (direct_product a1 b2 (tuple2 a1 b1) f (t2tb29 g)))
  (and (mem (tuple2 (tuple2 a1 b1) b2)
  (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) y) f) (mem (tuple2 (tuple2 a1 b1) a1)
  (t2tb30 (Tuple22 x z)) (t2tb29 g)))))))

(declare-fun t2tb1293 ((set (tuple21 (tuple21 a b) (tuple21 (tuple21 a b)
  a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) (tuple21 (tuple21 a b) a))))) (sort
  (set1 (tuple2 (tuple2 a1 b1) (tuple2 (tuple2 a1 b1) a1))) (t2tb1293 x))))

(declare-fun tb2t1293 (uni) (set (tuple21 (tuple21 a b) (tuple21 (tuple21 a
  b) a))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a b) (tuple21 (tuple21 a b) a)))))
  (! (= (tb2t1293 (t2tb1293 i)) i) :pattern ((t2tb1293 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 b1) (tuple2 (tuple2 a1 b1) a1))) j)
     (= (t2tb1293 (tb2t1293 j)) j)) :pattern ((t2tb1293 (tb2t1293 j))) )))

(declare-fun t2tb1294 ((tuple21 (tuple21 a b) (tuple21 (tuple21 a b)
  a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a b) (tuple21 (tuple21 a b) a)))) (sort
  (tuple2 (tuple2 a1 b1) (tuple2 (tuple2 a1 b1) a1)) (t2tb1294 x))))

(declare-fun tb2t1294 (uni) (tuple21 (tuple21 a b) (tuple21 (tuple21 a b)
  a)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a b) (tuple21 (tuple21 a b) a))))
  (! (= (tb2t1294 (t2tb1294 i)) i) :pattern ((t2tb1294 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 b1) (tuple2 (tuple2 a1 b1) a1)) j)
     (= (t2tb1294 (tb2t1294 j)) j)) :pattern ((t2tb1294 (tb2t1294 j))) )))

;; mem_direct_product
  (assert
  (forall ((f (set (tuple21 (tuple21 a b) (tuple21 a b))))
  (g (set (tuple21 (tuple21 a b) a))) (x (tuple21 a b)) (y (tuple21 a b))
  (z a))
  (= (mem (tuple2 (tuple2 a1 b1) (tuple2 (tuple2 a1 b1) a1))
  (Tuple2 (tuple2 a1 b1) (tuple2 (tuple2 a1 b1) a1) (t2tb13 x)
  (t2tb30 (Tuple22 y z)))
  (direct_product a1 (tuple2 a1 b1) (tuple2 a1 b1) (t2tb25 f) (t2tb29 g)))
  (and (mem (tuple2 (tuple2 a1 b1) (tuple2 a1 b1))
  (Tuple2 (tuple2 a1 b1) (tuple2 a1 b1) (t2tb13 x) (t2tb13 y)) (t2tb25 f))
  (mem (tuple2 (tuple2 a1 b1) a1) (t2tb30 (Tuple22 x z)) (t2tb29 g))))))

;; mem_direct_product
  (assert
  (forall ((f (set (tuple21 (tuple21 a b) a))) (g (set (tuple21 (tuple21 a b)
  b))) (x (tuple21 a b)) (y a) (z b))
  (= (mem (tuple2 (tuple2 a1 b1) (tuple2 a1 b1))
  (Tuple2 (tuple2 a1 b1) (tuple2 a1 b1) (t2tb13 x) (t2tb13 (Tuple21 y z)))
  (direct_product b1 a1 (tuple2 a1 b1) (t2tb29 f) (t2tb27 g)))
  (and (mem (tuple2 (tuple2 a1 b1) a1) (t2tb30 (Tuple22 x y)) (t2tb29 f))
  (mem (tuple2 (tuple2 a1 b1) b1)
  (Tuple2 (tuple2 a1 b1) b1 (t2tb13 x) (t2tb14 z)) (t2tb27 g))))))

(declare-fun t2tb1295 ((set (tuple21 (tuple21 a b) (tuple21 a a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) (tuple21 a a))))) (sort
  (set1 (tuple2 (tuple2 a1 b1) (tuple2 a1 a1))) (t2tb1295 x))))

(declare-fun tb2t1295 (uni) (set (tuple21 (tuple21 a b) (tuple21 a a))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a b) (tuple21 a a)))))
  (! (= (tb2t1295 (t2tb1295 i)) i) :pattern ((t2tb1295 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 b1) (tuple2 a1 a1))) j)
     (= (t2tb1295 (tb2t1295 j)) j)) :pattern ((t2tb1295 (tb2t1295 j))) )))

(declare-fun t2tb1296 ((tuple21 (tuple21 a b) (tuple21 a a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a b) (tuple21 a a)))) (sort
  (tuple2 (tuple2 a1 b1) (tuple2 a1 a1)) (t2tb1296 x))))

(declare-fun tb2t1296 (uni) (tuple21 (tuple21 a b) (tuple21 a a)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a b) (tuple21 a a))))
  (! (= (tb2t1296 (t2tb1296 i)) i) :pattern ((t2tb1296 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 b1) (tuple2 a1 a1)) j)
     (= (t2tb1296 (tb2t1296 j)) j)) :pattern ((t2tb1296 (tb2t1296 j))) )))

;; mem_direct_product
  (assert
  (forall ((f (set (tuple21 (tuple21 a b) a))) (g (set (tuple21 (tuple21 a b)
  a))) (x (tuple21 a b)) (y a) (z a))
  (= (mem (tuple2 (tuple2 a1 b1) (tuple2 a1 a1))
  (Tuple2 (tuple2 a1 b1) (tuple2 a1 a1) (t2tb13 x)
  (Tuple2 a1 a1 (t2tb2 y) (t2tb2 z)))
  (direct_product a1 a1 (tuple2 a1 b1) (t2tb29 f) (t2tb29 g)))
  (and (mem (tuple2 (tuple2 a1 b1) a1) (t2tb30 (Tuple22 x y)) (t2tb29 f))
  (mem (tuple2 (tuple2 a1 b1) a1) (t2tb30 (Tuple22 x z)) (t2tb29 g))))))

;; mem_direct_product
  (assert
  (forall ((c2 ty))
  (forall ((f (set (tuple21 (tuple21 a b) a))) (g uni) (x (tuple21 a b))
  (y a) (z uni))
  (= (mem (tuple2 (tuple2 a1 b1) (tuple2 a1 c2))
  (Tuple2 (tuple2 a1 b1) (tuple2 a1 c2) (t2tb13 x)
  (Tuple2 a1 c2 (t2tb2 y) z))
  (direct_product c2 a1 (tuple2 a1 b1) (t2tb29 f) g))
  (and (mem (tuple2 (tuple2 a1 b1) a1) (t2tb30 (Tuple22 x y)) (t2tb29 f))
  (mem (tuple2 (tuple2 a1 b1) c2) (Tuple2 (tuple2 a1 b1) c2 (t2tb13 x) z) g))))))

;; mem_direct_product
  (assert
  (forall ((b2 ty))
  (forall ((f uni) (g (set (tuple21 (set a) (set b)))) (x (set a)) (y uni)
  (z (set b)))
  (= (mem (tuple2 (set1 a1) (tuple2 b2 (set1 b1)))
  (Tuple2 (set1 a1) (tuple2 b2 (set1 b1)) (t2tb1 x)
  (Tuple2 b2 (set1 b1) y (t2tb12 z)))
  (direct_product (set1 b1) b2 (set1 a1) f (t2tb1285 g)))
  (and (mem (tuple2 (set1 a1) b2) (Tuple2 (set1 a1) b2 (t2tb1 x) y) f) (mem
  (tuple2 (set1 a1) (set1 b1)) (t2tb495 (Tuple23 x z)) (t2tb1285 g)))))))

(declare-fun t2tb1297 ((set (tuple21 (set a) (tuple21 (set b)
  (set b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set a) (tuple21 (set b) (set b)))))) (sort
  (set1 (tuple2 (set1 a1) (tuple2 (set1 b1) (set1 b1)))) (t2tb1297 x))))

(declare-fun tb2t1297 (uni) (set (tuple21 (set a) (tuple21 (set b)
  (set b)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set a) (tuple21 (set b) (set b))))))
  (! (= (tb2t1297 (t2tb1297 i)) i) :pattern ((t2tb1297 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 a1) (tuple2 (set1 b1) (set1 b1)))) j)
     (= (t2tb1297 (tb2t1297 j)) j)) :pattern ((t2tb1297 (tb2t1297 j))) )))

(declare-fun t2tb1298 ((tuple21 (set a) (tuple21 (set b) (set b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set a) (tuple21 (set b) (set b))))) (sort
  (tuple2 (set1 a1) (tuple2 (set1 b1) (set1 b1))) (t2tb1298 x))))

(declare-fun tb2t1298 (uni) (tuple21 (set a) (tuple21 (set b) (set b))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set a) (tuple21 (set b) (set b)))))
  (! (= (tb2t1298 (t2tb1298 i)) i) :pattern ((t2tb1298 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 a1) (tuple2 (set1 b1) (set1 b1))) j)
     (= (t2tb1298 (tb2t1298 j)) j)) :pattern ((t2tb1298 (tb2t1298 j))) )))

;; mem_direct_product
  (assert
  (forall ((f (set (tuple21 (set a) (set b)))) (g (set (tuple21 (set a)
  (set b)))) (x (set a)) (y (set b)) (z (set b)))
  (= (mem (tuple2 (set1 a1) (tuple2 (set1 b1) (set1 b1)))
  (Tuple2 (set1 a1) (tuple2 (set1 b1) (set1 b1)) (t2tb1 x)
  (Tuple2 (set1 b1) (set1 b1) (t2tb12 y) (t2tb12 z)))
  (direct_product (set1 b1) (set1 b1) (set1 a1) (t2tb1285 f) (t2tb1285 g)))
  (and (mem (tuple2 (set1 a1) (set1 b1)) (t2tb495 (Tuple23 x y))
  (t2tb1285 f)) (mem (tuple2 (set1 a1) (set1 b1)) (t2tb495 (Tuple23 x z))
  (t2tb1285 g))))))

;; mem_direct_product
  (assert
  (forall ((c2 ty))
  (forall ((f (set (tuple21 (set a) (set b)))) (g uni) (x (set a))
  (y (set b)) (z uni))
  (= (mem (tuple2 (set1 a1) (tuple2 (set1 b1) c2))
  (Tuple2 (set1 a1) (tuple2 (set1 b1) c2) (t2tb1 x)
  (Tuple2 (set1 b1) c2 (t2tb12 y) z))
  (direct_product c2 (set1 b1) (set1 a1) (t2tb1285 f) g))
  (and (mem (tuple2 (set1 a1) (set1 b1)) (t2tb495 (Tuple23 x y))
  (t2tb1285 f)) (mem (tuple2 (set1 a1) c2) (Tuple2 (set1 a1) c2 (t2tb1 x) z)
  g))))))

(declare-fun t2tb1299 ((set (tuple21 (set a) (tuple21 (set a)
  (set b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set a) (tuple21 (set a) (set b)))))) (sort
  (set1 (tuple2 (set1 a1) (tuple2 (set1 a1) (set1 b1)))) (t2tb1299 x))))

(declare-fun tb2t1299 (uni) (set (tuple21 (set a) (tuple21 (set a)
  (set b)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set a) (tuple21 (set a) (set b))))))
  (! (= (tb2t1299 (t2tb1299 i)) i) :pattern ((t2tb1299 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 a1) (tuple2 (set1 a1) (set1 b1)))) j)
     (= (t2tb1299 (tb2t1299 j)) j)) :pattern ((t2tb1299 (tb2t1299 j))) )))

(declare-fun t2tb1300 ((tuple21 (set a) (tuple21 (set a) (set b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set a) (tuple21 (set a) (set b))))) (sort
  (tuple2 (set1 a1) (tuple2 (set1 a1) (set1 b1))) (t2tb1300 x))))

(declare-fun tb2t1300 (uni) (tuple21 (set a) (tuple21 (set a) (set b))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set a) (tuple21 (set a) (set b)))))
  (! (= (tb2t1300 (t2tb1300 i)) i) :pattern ((t2tb1300 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 a1) (tuple2 (set1 a1) (set1 b1))) j)
     (= (t2tb1300 (tb2t1300 j)) j)) :pattern ((t2tb1300 (tb2t1300 j))) )))

;; mem_direct_product
  (assert
  (forall ((f (set (tuple21 (set a) (set a)))) (g (set (tuple21 (set a)
  (set b)))) (x (set a)) (y (set a)) (z (set b)))
  (= (mem (tuple2 (set1 a1) (tuple2 (set1 a1) (set1 b1)))
  (Tuple2 (set1 a1) (tuple2 (set1 a1) (set1 b1)) (t2tb1 x)
  (t2tb495 (Tuple23 y z)))
  (direct_product (set1 b1) (set1 a1) (set1 a1) (t2tb1291 f) (t2tb1285 g)))
  (and (mem (tuple2 (set1 a1) (set1 a1))
  (Tuple2 (set1 a1) (set1 a1) (t2tb1 x) (t2tb1 y)) (t2tb1291 f)) (mem
  (tuple2 (set1 a1) (set1 b1)) (t2tb495 (Tuple23 x z)) (t2tb1285 g))))))

;; mem_direct_product
  (assert
  (forall ((b2 ty))
  (forall ((f uni) (g (set (tuple21 a b))) (x a) (y uni) (z b))
  (= (mem (tuple2 a1 (tuple2 b2 b1))
  (Tuple2 a1 (tuple2 b2 b1) (t2tb2 x) (Tuple2 b2 b1 y (t2tb14 z)))
  (direct_product b1 b2 a1 f (t2tb11 g)))
  (and (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) y) f) (mem (tuple2 a1 b1)
  (t2tb13 (Tuple21 x z)) (t2tb11 g)))))))

(declare-fun t2tb59 ((set (tuple21 a (tuple21 b b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (tuple21 b b))))) (sort
  (set1 (tuple2 a1 (tuple2 b1 b1))) (t2tb59 x))))

(declare-fun tb2t59 (uni) (set (tuple21 a (tuple21 b b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (tuple21 b b)))))
  (! (= (tb2t59 (t2tb59 i)) i) :pattern ((t2tb59 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (tuple2 b1 b1))) j)
     (= (t2tb59 (tb2t59 j)) j)) :pattern ((t2tb59 (tb2t59 j))) )))

(declare-fun t2tb60 ((tuple21 a (tuple21 b b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (tuple21 b b)))) (sort (tuple2 a1 (tuple2 b1 b1))
  (t2tb60 x))))

(declare-fun tb2t60 (uni) (tuple21 a (tuple21 b b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (tuple21 b b))))
  (! (= (tb2t60 (t2tb60 i)) i) :pattern ((t2tb60 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (tuple2 b1 b1)) j) (= (t2tb60 (tb2t60 j)) j)) :pattern (
  (t2tb60 (tb2t60 j))) )))

;; mem_direct_product
  (assert
  (forall ((f (set (tuple21 a b))) (g (set (tuple21 a b))) (x a) (y b) (z b))
  (= (mem (tuple2 a1 (tuple2 b1 b1))
  (Tuple2 a1 (tuple2 b1 b1) (t2tb2 x) (Tuple2 b1 b1 (t2tb14 y) (t2tb14 z)))
  (direct_product b1 b1 a1 (t2tb11 f) (t2tb11 g)))
  (and (mem (tuple2 a1 b1) (t2tb13 (Tuple21 x y)) (t2tb11 f)) (mem
  (tuple2 a1 b1) (t2tb13 (Tuple21 x z)) (t2tb11 g))))))

;; mem_direct_product
  (assert
  (forall ((c2 ty))
  (forall ((f (set (tuple21 a b))) (g uni) (x a) (y b) (z uni))
  (= (mem (tuple2 a1 (tuple2 b1 c2))
  (Tuple2 a1 (tuple2 b1 c2) (t2tb2 x) (Tuple2 b1 c2 (t2tb14 y) z))
  (direct_product c2 b1 a1 (t2tb11 f) g))
  (and (mem (tuple2 a1 b1) (t2tb13 (Tuple21 x y)) (t2tb11 f)) (mem
  (tuple2 a1 c2) (Tuple2 a1 c2 (t2tb2 x) z) g))))))

;; mem_direct_product
  (assert
  (forall ((f (set (tuple21 a a))) (g (set (tuple21 a b))) (x a) (y a) (z b))
  (= (mem (tuple2 a1 (tuple2 a1 b1))
  (Tuple2 a1 (tuple2 a1 b1) (t2tb2 x) (t2tb13 (Tuple21 y z)))
  (direct_product b1 a1 a1 (t2tb4 f) (t2tb11 g)))
  (and (mem (tuple2 a1 a1) (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y)) (t2tb4 f)) (mem
  (tuple2 a1 b1) (t2tb13 (Tuple21 x z)) (t2tb11 g))))))

;; mem_direct_product
  (assert
  (forall ((a2 ty) (b2 ty) (c2 ty))
  (forall ((f uni) (g uni) (x uni) (y uni) (z uni))
  (= (mem (tuple2 a2 (tuple2 b2 c2))
  (Tuple2 a2 (tuple2 b2 c2) x (Tuple2 b2 c2 y z))
  (direct_product c2 b2 a2 f g))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) f) (mem (tuple2 a2 c2)
  (Tuple2 a2 c2 x z) g))))))

(declare-fun prj1 (ty ty uni) uni)

;; prj1_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni)) (sort (set1 (tuple2 (tuple2 a2 b2) a2)) (prj1 b2 a2 x)))))

(declare-fun prj11 ((tuple21 (set a) (set b))) (set (tuple21 (tuple21 a b)
  a)))

(declare-fun t2tb1301 ((tuple21 (set (tuple21 a b)) (set a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a b)) (set a)))) (sort
  (tuple2 (set1 (tuple2 a1 b1)) (set1 a1)) (t2tb1301 x))))

(declare-fun tb2t1301 (uni) (tuple21 (set (tuple21 a b)) (set a)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a b)) (set a))))
  (! (= (tb2t1301 (t2tb1301 i)) i) :pattern ((t2tb1301 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 a1 b1)) (set1 a1)) j)
     (= (t2tb1301 (tb2t1301 j)) j)) :pattern ((t2tb1301 (tb2t1301 j))) )))

(declare-fun t2tb1302 ((tuple21 (tuple21 (tuple21 a b) a) (tuple21 a
  b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 a b) a) (tuple21 a b)))) (sort
  (tuple2 (tuple2 (tuple2 a1 b1) a1) (tuple2 a1 b1)) (t2tb1302 x))))

(declare-fun tb2t1302 (uni) (tuple21 (tuple21 (tuple21 a b) a) (tuple21 a
  b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 a b) a) (tuple21 a b))))
  (! (= (tb2t1302 (t2tb1302 i)) i) :pattern ((t2tb1302 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 (tuple2 a1 b1) a1) (tuple2 a1 b1)) j)
     (= (t2tb1302 (tb2t1302 j)) j)) :pattern ((t2tb1302 (tb2t1302 j))) )))

(declare-fun t2tb1303 ((set (tuple21 (tuple21 (tuple21 a b) a) (tuple21 a
  b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 a b) a) (tuple21 a b))))) (sort
  (set1 (tuple2 (tuple2 (tuple2 a1 b1) a1) (tuple2 a1 b1))) (t2tb1303 x))))

(declare-fun tb2t1303 (uni) (set (tuple21 (tuple21 (tuple21 a b) a)
  (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 a b) a) (tuple21 a b)))))
  (! (= (tb2t1303 (t2tb1303 i)) i) :pattern ((t2tb1303 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 (tuple2 a1 b1) a1) (tuple2 a1 b1))) j)
     (= (t2tb1303 (tb2t1303 j)) j)) :pattern ((t2tb1303 (tb2t1303 j))) )))

;; mem_proj_op_1
  (assert
  (forall ((s (set (tuple21 a b))) (t (set a)) (x (tuple21 a b)) (y a)
  (z (tuple21 a b)))
  (= (mem (tuple2 (tuple2 (tuple2 a1 b1) a1) (tuple2 a1 b1))
  (Tuple2 (tuple2 (tuple2 a1 b1) a1) (tuple2 a1 b1) (t2tb30 (Tuple22 x y))
  (t2tb13 z))
  (prj1 a1 (tuple2 a1 b1)
  (Tuple2 (set1 (tuple2 a1 b1)) (set1 a1) (t2tb11 s) (t2tb1 t))))
  (and (mem (tuple2 (tuple2 (tuple2 a1 b1) a1) (tuple2 a1 b1))
  (Tuple2 (tuple2 (tuple2 a1 b1) a1) (tuple2 a1 b1) (t2tb30 (Tuple22 x y))
  (t2tb13 z))
  (times (tuple2 a1 b1) (tuple2 (tuple2 a1 b1) a1)
  (times a1 (tuple2 a1 b1) (t2tb11 s) (t2tb1 t)) (t2tb11 s))) (= z x)))))

(declare-fun t2tb1304 ((set (tuple21 (tuple21 (set a) (set b))
  (set a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (set a) (set b)) (set a))))) (sort
  (set1 (tuple2 (tuple2 (set1 a1) (set1 b1)) (set1 a1))) (t2tb1304 x))))

(declare-fun tb2t1304 (uni) (set (tuple21 (tuple21 (set a) (set b))
  (set a))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (set a) (set b)) (set a)))))
  (! (= (tb2t1304 (t2tb1304 i)) i) :pattern ((t2tb1304 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 (set1 a1) (set1 b1)) (set1 a1))) j)
     (= (t2tb1304 (tb2t1304 j)) j)) :pattern ((t2tb1304 (tb2t1304 j))) )))

(declare-fun t2tb1305 ((tuple21 (set (set a)) (set (set b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (set a)) (set (set b))))) (sort
  (tuple2 (set1 (set1 a1)) (set1 (set1 b1))) (t2tb1305 x))))

(declare-fun tb2t1305 (uni) (tuple21 (set (set a)) (set (set b))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (set a)) (set (set b)))))
  (! (= (tb2t1305 (t2tb1305 i)) i) :pattern ((t2tb1305 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (set1 a1)) (set1 (set1 b1))) j)
     (= (t2tb1305 (tb2t1305 j)) j)) :pattern ((t2tb1305 (tb2t1305 j))) )))

(declare-fun t2tb1306 ((tuple21 (tuple21 (set a) (set b)) (set a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (set a) (set b)) (set a)))) (sort
  (tuple2 (tuple2 (set1 a1) (set1 b1)) (set1 a1)) (t2tb1306 x))))

(declare-fun tb2t1306 (uni) (tuple21 (tuple21 (set a) (set b)) (set a)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (set a) (set b)) (set a))))
  (! (= (tb2t1306 (t2tb1306 i)) i) :pattern ((t2tb1306 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 (set1 a1) (set1 b1)) (set1 a1)) j)
     (= (t2tb1306 (tb2t1306 j)) j)) :pattern ((t2tb1306 (tb2t1306 j))) )))

;; mem_proj_op_1
  (assert
  (forall ((s (set (set a))) (t (set (set b))) (x (set a)) (y (set b))
  (z (set a)))
  (= (mem (tuple2 (tuple2 (set1 a1) (set1 b1)) (set1 a1))
  (Tuple2 (tuple2 (set1 a1) (set1 b1)) (set1 a1) (t2tb495 (Tuple23 x y))
  (t2tb1 z))
  (prj1 (set1 b1) (set1 a1)
  (Tuple2 (set1 (set1 a1)) (set1 (set1 b1)) (t2tb s) (t2tb44 t))))
  (and (mem (tuple2 (tuple2 (set1 a1) (set1 b1)) (set1 a1))
  (Tuple2 (tuple2 (set1 a1) (set1 b1)) (set1 a1) (t2tb495 (Tuple23 x y))
  (t2tb1 z))
  (times (set1 a1) (tuple2 (set1 a1) (set1 b1))
  (times (set1 b1) (set1 a1) (t2tb s) (t2tb44 t)) (t2tb s))) (= z x)))))

;; mem_proj_op_1
  (assert
  (forall ((s (set a)) (t (set b)) (x a) (y b) (z a))
  (= (mem (tuple2 (tuple2 a1 b1) a1) (t2tb30 (Tuple22 (Tuple21 x y) z))
  (t2tb29 (prj11 (Tuple23 s t))))
  (and (mem (tuple2 (tuple2 a1 b1) a1) (t2tb30 (Tuple22 (Tuple21 x y) z))
  (times a1 (tuple2 a1 b1) (times b1 a1 (t2tb1 s) (t2tb12 t)) (t2tb1 s)))
  (= z x)))))

;; mem_proj_op_1
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (x uni) (y uni) (z uni))
  (=> (sort a2 x)
  (=> (sort a2 z)
  (= (mem (tuple2 (tuple2 a2 b2) a2)
  (Tuple2 (tuple2 a2 b2) a2 (Tuple2 a2 b2 x y) z)
  (prj1 b2 a2 (Tuple2 (set1 a2) (set1 b2) s t)))
  (and (mem (tuple2 (tuple2 a2 b2) a2)
  (Tuple2 (tuple2 a2 b2) a2 (Tuple2 a2 b2 x y) z)
  (times a2 (tuple2 a2 b2) (times b2 a2 s t) s)) (= z x))))))))

(declare-fun prj2 (ty ty uni) uni)

;; prj2_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni)) (sort (set1 (tuple2 (tuple2 a2 b2) b2)) (prj2 b2 a2 x)))))

(declare-fun t2tb1307 ((set (tuple21 (tuple21 (tuple21 a b) a) a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 a b) a) a)))) (sort
  (set1 (tuple2 (tuple2 (tuple2 a1 b1) a1) a1)) (t2tb1307 x))))

(declare-fun tb2t1307 (uni) (set (tuple21 (tuple21 (tuple21 a b) a) a)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 a b) a) a))))
  (! (= (tb2t1307 (t2tb1307 i)) i) :pattern ((t2tb1307 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 (tuple2 a1 b1) a1) a1)) j)
     (= (t2tb1307 (tb2t1307 j)) j)) :pattern ((t2tb1307 (tb2t1307 j))) )))

(declare-fun t2tb1308 ((tuple21 (tuple21 (tuple21 a b) a) a)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 a b) a) a))) (sort
  (tuple2 (tuple2 (tuple2 a1 b1) a1) a1) (t2tb1308 x))))

(declare-fun tb2t1308 (uni) (tuple21 (tuple21 (tuple21 a b) a) a))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 a b) a) a)))
  (! (= (tb2t1308 (t2tb1308 i)) i) :pattern ((t2tb1308 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 (tuple2 a1 b1) a1) a1) j)
     (= (t2tb1308 (tb2t1308 j)) j)) :pattern ((t2tb1308 (tb2t1308 j))) )))

;; mem_proj_op_2
  (assert
  (forall ((s (set (tuple21 a b))) (t (set a)) (x (tuple21 a b)) (y a) (z a))
  (= (mem (tuple2 (tuple2 (tuple2 a1 b1) a1) a1)
  (Tuple2 (tuple2 (tuple2 a1 b1) a1) a1 (t2tb30 (Tuple22 x y)) (t2tb2 z))
  (prj2 a1 (tuple2 a1 b1)
  (Tuple2 (set1 (tuple2 a1 b1)) (set1 a1) (t2tb11 s) (t2tb1 t))))
  (and (mem (tuple2 (tuple2 (tuple2 a1 b1) a1) a1)
  (Tuple2 (tuple2 (tuple2 a1 b1) a1) a1 (t2tb30 (Tuple22 x y)) (t2tb2 z))
  (times a1 (tuple2 (tuple2 a1 b1) a1)
  (times a1 (tuple2 a1 b1) (t2tb11 s) (t2tb1 t)) (t2tb1 t))) (= z y)))))

(declare-fun t2tb1309 ((set (tuple21 (tuple21 (set a) (set b))
  (set b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (set a) (set b)) (set b))))) (sort
  (set1 (tuple2 (tuple2 (set1 a1) (set1 b1)) (set1 b1))) (t2tb1309 x))))

(declare-fun tb2t1309 (uni) (set (tuple21 (tuple21 (set a) (set b))
  (set b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (set a) (set b)) (set b)))))
  (! (= (tb2t1309 (t2tb1309 i)) i) :pattern ((t2tb1309 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 (set1 a1) (set1 b1)) (set1 b1))) j)
     (= (t2tb1309 (tb2t1309 j)) j)) :pattern ((t2tb1309 (tb2t1309 j))) )))

(declare-fun t2tb1310 ((tuple21 (tuple21 (set a) (set b)) (set b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (set a) (set b)) (set b)))) (sort
  (tuple2 (tuple2 (set1 a1) (set1 b1)) (set1 b1)) (t2tb1310 x))))

(declare-fun tb2t1310 (uni) (tuple21 (tuple21 (set a) (set b)) (set b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (set a) (set b)) (set b))))
  (! (= (tb2t1310 (t2tb1310 i)) i) :pattern ((t2tb1310 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 (set1 a1) (set1 b1)) (set1 b1)) j)
     (= (t2tb1310 (tb2t1310 j)) j)) :pattern ((t2tb1310 (tb2t1310 j))) )))

;; mem_proj_op_2
  (assert
  (forall ((s (set (set a))) (t (set (set b))) (x (set a)) (y (set b))
  (z (set b)))
  (= (mem (tuple2 (tuple2 (set1 a1) (set1 b1)) (set1 b1))
  (Tuple2 (tuple2 (set1 a1) (set1 b1)) (set1 b1) (t2tb495 (Tuple23 x y))
  (t2tb12 z))
  (prj2 (set1 b1) (set1 a1)
  (Tuple2 (set1 (set1 a1)) (set1 (set1 b1)) (t2tb s) (t2tb44 t))))
  (and (mem (tuple2 (tuple2 (set1 a1) (set1 b1)) (set1 b1))
  (Tuple2 (tuple2 (set1 a1) (set1 b1)) (set1 b1) (t2tb495 (Tuple23 x y))
  (t2tb12 z))
  (times (set1 b1) (tuple2 (set1 a1) (set1 b1))
  (times (set1 b1) (set1 a1) (t2tb s) (t2tb44 t)) (t2tb44 t))) (= z y)))))

;; mem_proj_op_2
  (assert
  (forall ((s (set a)) (t (set b)) (x a) (y b) (z b))
  (= (mem (tuple2 (tuple2 a1 b1) b1)
  (Tuple2 (tuple2 a1 b1) b1 (t2tb13 (Tuple21 x y)) (t2tb14 z))
  (prj2 b1 a1 (t2tb495 (Tuple23 s t))))
  (and (mem (tuple2 (tuple2 a1 b1) b1)
  (Tuple2 (tuple2 a1 b1) b1 (t2tb13 (Tuple21 x y)) (t2tb14 z))
  (times b1 (tuple2 a1 b1) (times b1 a1 (t2tb1 s) (t2tb12 t)) (t2tb12 t)))
  (= z y)))))

;; mem_proj_op_2
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (x uni) (y uni) (z uni))
  (=> (sort b2 y)
  (=> (sort b2 z)
  (= (mem (tuple2 (tuple2 a2 b2) b2)
  (Tuple2 (tuple2 a2 b2) b2 (Tuple2 a2 b2 x y) z)
  (prj2 b2 a2 (Tuple2 (set1 a2) (set1 b2) s t)))
  (and (mem (tuple2 (tuple2 a2 b2) b2)
  (Tuple2 (tuple2 a2 b2) b2 (Tuple2 a2 b2 x y) z)
  (times b2 (tuple2 a2 b2) (times b2 a2 s t) t)) (= z y))))))))

(declare-fun parallel_product (ty ty ty ty uni uni) uni)

;; parallel_product_sort
  (assert
  (forall ((a2 ty) (b2 ty) (c2 ty) (d2 ty))
  (forall ((x uni) (x1 uni)) (sort
  (set1 (tuple2 (tuple2 a2 c2) (tuple2 b2 d2)))
  (parallel_product d2 c2 b2 a2 x x1)))))

;; mem_parallel_product
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((h uni) (k (set (tuple21 (tuple21 a b) a))) (x uni) (y (tuple21 a
  b)) (z uni) (w a))
  (= (mem (tuple2 (tuple2 a2 (tuple2 a1 b1)) (tuple2 b2 a1))
  (Tuple2 (tuple2 a2 (tuple2 a1 b1)) (tuple2 b2 a1)
  (Tuple2 a2 (tuple2 a1 b1) x (t2tb13 y)) (Tuple2 b2 a1 z (t2tb2 w)))
  (parallel_product a1 (tuple2 a1 b1) b2 a2 h (t2tb29 k)))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x z) h) (mem
  (tuple2 (tuple2 a1 b1) a1) (t2tb30 (Tuple22 y w)) (t2tb29 k)))))))

;; mem_parallel_product
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((h uni) (k (set (tuple21 (set a) (set b)))) (x uni) (y (set a))
  (z uni) (w (set b)))
  (= (mem (tuple2 (tuple2 a2 (set1 a1)) (tuple2 b2 (set1 b1)))
  (Tuple2 (tuple2 a2 (set1 a1)) (tuple2 b2 (set1 b1))
  (Tuple2 a2 (set1 a1) x (t2tb1 y)) (Tuple2 b2 (set1 b1) z (t2tb12 w)))
  (parallel_product (set1 b1) (set1 a1) b2 a2 h (t2tb1285 k)))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x z) h) (mem
  (tuple2 (set1 a1) (set1 b1)) (t2tb495 (Tuple23 y w)) (t2tb1285 k)))))))

;; mem_parallel_product
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((h uni) (k (set (tuple21 a b))) (x uni) (y a) (z uni) (w b))
  (= (mem (tuple2 (tuple2 a2 a1) (tuple2 b2 b1))
  (Tuple2 (tuple2 a2 a1) (tuple2 b2 b1) (Tuple2 a2 a1 x (t2tb2 y))
  (Tuple2 b2 b1 z (t2tb14 w))) (parallel_product b1 a1 b2 a2 h (t2tb11 k)))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x z) h) (mem (tuple2 a1 b1)
  (t2tb13 (Tuple21 y w)) (t2tb11 k)))))))

;; mem_parallel_product
  (assert
  (forall ((a2 ty) (c2 ty))
  (forall ((h uni) (k uni) (x uni) (y uni) (z (tuple21 a b)) (w a))
  (= (mem (tuple2 (tuple2 a2 c2) (tuple2 (tuple2 a1 b1) a1))
  (Tuple2 (tuple2 a2 c2) (tuple2 (tuple2 a1 b1) a1) (Tuple2 a2 c2 x y)
  (t2tb30 (Tuple22 z w))) (parallel_product a1 c2 (tuple2 a1 b1) a2 h k))
  (and (mem (tuple2 a2 (tuple2 a1 b1))
  (Tuple2 a2 (tuple2 a1 b1) x (t2tb13 z)) h) (mem (tuple2 c2 a1)
  (Tuple2 c2 a1 y (t2tb2 w)) k))))))

;; mem_parallel_product
  (assert
  (forall ((a2 ty))
  (forall ((h uni) (k (set (tuple21 (tuple21 a b) a))) (x uni) (y (tuple21 a
  b)) (z (tuple21 a b)) (w a))
  (= (mem (tuple2 (tuple2 a2 (tuple2 a1 b1)) (tuple2 (tuple2 a1 b1) a1))
  (Tuple2 (tuple2 a2 (tuple2 a1 b1)) (tuple2 (tuple2 a1 b1) a1)
  (Tuple2 a2 (tuple2 a1 b1) x (t2tb13 y)) (t2tb30 (Tuple22 z w)))
  (parallel_product a1 (tuple2 a1 b1) (tuple2 a1 b1) a2 h (t2tb29 k)))
  (and (mem (tuple2 a2 (tuple2 a1 b1))
  (Tuple2 a2 (tuple2 a1 b1) x (t2tb13 z)) h) (mem (tuple2 (tuple2 a1 b1) a1)
  (t2tb30 (Tuple22 y w)) (t2tb29 k)))))))

;; mem_parallel_product
  (assert
  (forall ((a2 ty) (c2 ty))
  (forall ((h uni) (k uni) (x uni) (y uni) (z (set a)) (w (set b)))
  (= (mem (tuple2 (tuple2 a2 c2) (tuple2 (set1 a1) (set1 b1)))
  (Tuple2 (tuple2 a2 c2) (tuple2 (set1 a1) (set1 b1)) (Tuple2 a2 c2 x y)
  (t2tb495 (Tuple23 z w))) (parallel_product (set1 b1) c2 (set1 a1) a2 h k))
  (and (mem (tuple2 a2 (set1 a1)) (Tuple2 a2 (set1 a1) x (t2tb1 z)) h) (mem
  (tuple2 c2 (set1 b1)) (Tuple2 c2 (set1 b1) y (t2tb12 w)) k))))))

;; mem_parallel_product
  (assert
  (forall ((a2 ty))
  (forall ((h uni) (k (set (tuple21 (set a) (set b)))) (x uni) (y (set a))
  (z (set a)) (w (set b)))
  (= (mem (tuple2 (tuple2 a2 (set1 a1)) (tuple2 (set1 a1) (set1 b1)))
  (Tuple2 (tuple2 a2 (set1 a1)) (tuple2 (set1 a1) (set1 b1))
  (Tuple2 a2 (set1 a1) x (t2tb1 y)) (t2tb495 (Tuple23 z w)))
  (parallel_product (set1 b1) (set1 a1) (set1 a1) a2 h (t2tb1285 k)))
  (and (mem (tuple2 a2 (set1 a1)) (Tuple2 a2 (set1 a1) x (t2tb1 z)) h) (mem
  (tuple2 (set1 a1) (set1 b1)) (t2tb495 (Tuple23 y w)) (t2tb1285 k)))))))

;; mem_parallel_product
  (assert
  (forall ((a2 ty) (c2 ty))
  (forall ((h uni) (k uni) (x uni) (y uni) (z a) (w b))
  (= (mem (tuple2 (tuple2 a2 c2) (tuple2 a1 b1))
  (Tuple2 (tuple2 a2 c2) (tuple2 a1 b1) (Tuple2 a2 c2 x y)
  (t2tb13 (Tuple21 z w))) (parallel_product b1 c2 a1 a2 h k))
  (and (mem (tuple2 a2 a1) (Tuple2 a2 a1 x (t2tb2 z)) h) (mem (tuple2 c2 b1)
  (Tuple2 c2 b1 y (t2tb14 w)) k))))))

;; mem_parallel_product
  (assert
  (forall ((a2 ty))
  (forall ((h uni) (k (set (tuple21 a b))) (x uni) (y a) (z a) (w b))
  (= (mem (tuple2 (tuple2 a2 a1) (tuple2 a1 b1))
  (Tuple2 (tuple2 a2 a1) (tuple2 a1 b1) (Tuple2 a2 a1 x (t2tb2 y))
  (t2tb13 (Tuple21 z w))) (parallel_product b1 a1 a1 a2 h (t2tb11 k)))
  (and (mem (tuple2 a2 a1) (Tuple2 a2 a1 x (t2tb2 z)) h) (mem (tuple2 a1 b1)
  (t2tb13 (Tuple21 y w)) (t2tb11 k)))))))

;; mem_parallel_product
  (assert
  (forall ((b2 ty))
  (forall ((h uni) (k (set (tuple21 a b))) (x (tuple21 a b)) (y a) (z uni)
  (w b))
  (= (mem (tuple2 (tuple2 (tuple2 a1 b1) a1) (tuple2 b2 b1))
  (Tuple2 (tuple2 (tuple2 a1 b1) a1) (tuple2 b2 b1) (t2tb30 (Tuple22 x y))
  (Tuple2 b2 b1 z (t2tb14 w)))
  (parallel_product b1 a1 b2 (tuple2 a1 b1) h (t2tb11 k)))
  (and (mem (tuple2 (tuple2 a1 b1) b2)
  (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) z) h) (mem (tuple2 a1 b1)
  (t2tb13 (Tuple21 y w)) (t2tb11 k)))))))

;; mem_parallel_product
  (assert
  (forall ((b2 ty) (d2 ty))
  (forall ((h uni) (k uni) (x (tuple21 a b)) (y a) (z uni) (w uni))
  (= (mem (tuple2 (tuple2 (tuple2 a1 b1) a1) (tuple2 b2 d2))
  (Tuple2 (tuple2 (tuple2 a1 b1) a1) (tuple2 b2 d2) (t2tb30 (Tuple22 x y))
  (Tuple2 b2 d2 z w)) (parallel_product d2 a1 b2 (tuple2 a1 b1) h k))
  (and (mem (tuple2 (tuple2 a1 b1) b2)
  (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) z) h) (mem (tuple2 a1 d2)
  (Tuple2 a1 d2 (t2tb2 y) w) k))))))

(declare-fun t2tb1311 ((set (tuple21 (tuple21 (tuple21 a b) a)
  (tuple21 (tuple21 a b) a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 a b) a) (tuple21 (tuple21 a b)
  a))))) (sort
  (set1 (tuple2 (tuple2 (tuple2 a1 b1) a1) (tuple2 (tuple2 a1 b1) a1)))
  (t2tb1311 x))))

(declare-fun tb2t1311 (uni) (set (tuple21 (tuple21 (tuple21 a b) a)
  (tuple21 (tuple21 a b) a))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 a b) a) (tuple21 (tuple21 a b)
  a))))) (! (= (tb2t1311 (t2tb1311 i)) i) :pattern ((t2tb1311 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 (tuple2 a1 b1) a1) (tuple2 (tuple2 a1 b1) a1))) j)
     (= (t2tb1311 (tb2t1311 j)) j)) :pattern ((t2tb1311 (tb2t1311 j))) )))

(declare-fun t2tb1312 ((tuple21 (tuple21 (tuple21 a b) a) (tuple21 (tuple21 a
  b) a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 a b) a) (tuple21 (tuple21 a b) a))))
  (sort (tuple2 (tuple2 (tuple2 a1 b1) a1) (tuple2 (tuple2 a1 b1) a1))
  (t2tb1312 x))))

(declare-fun tb2t1312 (uni) (tuple21 (tuple21 (tuple21 a b) a)
  (tuple21 (tuple21 a b) a)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 a b) a) (tuple21 (tuple21 a b) a))))
  (! (= (tb2t1312 (t2tb1312 i)) i) :pattern ((t2tb1312 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 (tuple2 a1 b1) a1) (tuple2 (tuple2 a1 b1) a1))
     j) (= (t2tb1312 (tb2t1312 j)) j)) :pattern ((t2tb1312 (tb2t1312 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 (tuple21 a b) (tuple21 a b)))) (k (set (tuple21 a
  a))) (x (tuple21 a b)) (y a) (z (tuple21 a b)) (w a))
  (= (mem (tuple2 (tuple2 (tuple2 a1 b1) a1) (tuple2 (tuple2 a1 b1) a1))
  (Tuple2 (tuple2 (tuple2 a1 b1) a1) (tuple2 (tuple2 a1 b1) a1)
  (t2tb30 (Tuple22 x y)) (t2tb30 (Tuple22 z w)))
  (parallel_product a1 a1 (tuple2 a1 b1) (tuple2 a1 b1) (t2tb25 h) (t2tb4 k)))
  (and (mem (tuple2 (tuple2 a1 b1) (tuple2 a1 b1))
  (Tuple2 (tuple2 a1 b1) (tuple2 a1 b1) (t2tb13 x) (t2tb13 z)) (t2tb25 h))
  (mem (tuple2 a1 a1) (Tuple2 a1 a1 (t2tb2 y) (t2tb2 w)) (t2tb4 k))))))

(declare-fun t2tb1313 ((tuple21 a (set b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (set b)))) (sort (tuple2 a1 (set1 b1))
  (t2tb1313 x))))

(declare-fun tb2t1313 (uni) (tuple21 a (set b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (set b))))
  (! (= (tb2t1313 (t2tb1313 i)) i) :pattern ((t2tb1313 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (set1 b1)) j) (= (t2tb1313 (tb2t1313 j)) j)) :pattern (
  (t2tb1313 (tb2t1313 j))) )))

(declare-fun t2tb1314 ((tuple21 (tuple21 a b) (set a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a b) (set a)))) (sort
  (tuple2 (tuple2 a1 b1) (set1 a1)) (t2tb1314 x))))

(declare-fun tb2t1314 (uni) (tuple21 (tuple21 a b) (set a)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a b) (set a))))
  (! (= (tb2t1314 (t2tb1314 i)) i) :pattern ((t2tb1314 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 b1) (set1 a1)) j)
     (= (t2tb1314 (tb2t1314 j)) j)) :pattern ((t2tb1314 (tb2t1314 j))) )))

(declare-fun t2tb1315 ((set (tuple21 (tuple21 (tuple21 a b) a)
  (tuple21 (set a) (set b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 a b) a) (tuple21 (set a)
  (set b)))))) (sort
  (set1 (tuple2 (tuple2 (tuple2 a1 b1) a1) (tuple2 (set1 a1) (set1 b1))))
  (t2tb1315 x))))

(declare-fun tb2t1315 (uni) (set (tuple21 (tuple21 (tuple21 a b) a)
  (tuple21 (set a) (set b)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 a b) a) (tuple21 (set a)
  (set b)))))) (! (= (tb2t1315 (t2tb1315 i)) i) :pattern ((t2tb1315 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 (tuple2 a1 b1) a1) (tuple2 (set1 a1) (set1 b1))))
     j) (= (t2tb1315 (tb2t1315 j)) j)) :pattern ((t2tb1315 (tb2t1315 j))) )))

(declare-fun t2tb1316 ((tuple21 (tuple21 (tuple21 a b) a) (tuple21 (set a)
  (set b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 a b) a) (tuple21 (set a) (set b)))))
  (sort (tuple2 (tuple2 (tuple2 a1 b1) a1) (tuple2 (set1 a1) (set1 b1)))
  (t2tb1316 x))))

(declare-fun tb2t1316 (uni) (tuple21 (tuple21 (tuple21 a b) a)
  (tuple21 (set a) (set b))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 a b) a) (tuple21 (set a) (set b)))))
  (! (= (tb2t1316 (t2tb1316 i)) i) :pattern ((t2tb1316 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (tuple2 (tuple2 (tuple2 a1 b1) a1) (tuple2 (set1 a1) (set1 b1))) j)
     (= (t2tb1316 (tb2t1316 j)) j)) :pattern ((t2tb1316 (tb2t1316 j))) )))

(declare-fun t2tb1317 ((set (tuple21 a (set b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (set b))))) (sort (set1 (tuple2 a1 (set1 b1)))
  (t2tb1317 x))))

(declare-fun tb2t1317 (uni) (set (tuple21 a (set b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (set b)))))
  (! (= (tb2t1317 (t2tb1317 i)) i) :pattern ((t2tb1317 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (set1 b1))) j) (= (t2tb1317 (tb2t1317 j)) j)) :pattern (
  (t2tb1317 (tb2t1317 j))) )))

(declare-fun t2tb1318 ((set (tuple21 (tuple21 a b) (set a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) (set a))))) (sort
  (set1 (tuple2 (tuple2 a1 b1) (set1 a1))) (t2tb1318 x))))

(declare-fun tb2t1318 (uni) (set (tuple21 (tuple21 a b) (set a))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a b) (set a)))))
  (! (= (tb2t1318 (t2tb1318 i)) i) :pattern ((t2tb1318 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 b1) (set1 a1))) j)
     (= (t2tb1318 (tb2t1318 j)) j)) :pattern ((t2tb1318 (tb2t1318 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 (tuple21 a b) (set a)))) (k (set (tuple21 a
  (set b)))) (x (tuple21 a b)) (y a) (z (set a)) (w (set b)))
  (= (mem (tuple2 (tuple2 (tuple2 a1 b1) a1) (tuple2 (set1 a1) (set1 b1)))
  (Tuple2 (tuple2 (tuple2 a1 b1) a1) (tuple2 (set1 a1) (set1 b1))
  (t2tb30 (Tuple22 x y)) (t2tb495 (Tuple23 z w)))
  (parallel_product (set1 b1) a1 (set1 a1) (tuple2 a1 b1) (t2tb1318 h)
  (t2tb1317 k)))
  (and (mem (tuple2 (tuple2 a1 b1) (set1 a1))
  (Tuple2 (tuple2 a1 b1) (set1 a1) (t2tb13 x) (t2tb1 z)) (t2tb1318 h)) (mem
  (tuple2 a1 (set1 b1)) (Tuple2 a1 (set1 b1) (t2tb2 y) (t2tb12 w))
  (t2tb1317 k))))))

;; mem_parallel_product
  (assert
  (forall ((c2 ty))
  (forall ((h (set (tuple21 (tuple21 a b) a))) (k uni) (x (tuple21 a b))
  (y uni) (z a) (w b))
  (= (mem (tuple2 (tuple2 (tuple2 a1 b1) c2) (tuple2 a1 b1))
  (Tuple2 (tuple2 (tuple2 a1 b1) c2) (tuple2 a1 b1)
  (Tuple2 (tuple2 a1 b1) c2 (t2tb13 x) y) (t2tb13 (Tuple21 z w)))
  (parallel_product b1 c2 a1 (tuple2 a1 b1) (t2tb29 h) k))
  (and (mem (tuple2 (tuple2 a1 b1) a1) (t2tb30 (Tuple22 x z)) (t2tb29 h))
  (mem (tuple2 c2 b1) (Tuple2 c2 b1 y (t2tb14 w)) k))))))

(declare-fun t2tb1319 ((set (tuple21 (tuple21 (tuple21 a b) (tuple21 a b))
  (tuple21 a a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 a b) (tuple21 a b)) (tuple21 a
  a))))) (sort
  (set1 (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 b1)) (tuple2 a1 a1)))
  (t2tb1319 x))))

(declare-fun tb2t1319 (uni) (set (tuple21 (tuple21 (tuple21 a b) (tuple21 a
  b)) (tuple21 a a))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 a b) (tuple21 a b)) (tuple21 a
  a))))) (! (= (tb2t1319 (t2tb1319 i)) i) :pattern ((t2tb1319 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 b1)) (tuple2 a1 a1))) j)
     (= (t2tb1319 (tb2t1319 j)) j)) :pattern ((t2tb1319 (tb2t1319 j))) )))

(declare-fun t2tb1320 ((tuple21 (tuple21 (tuple21 a b) (tuple21 a b))
  (tuple21 a a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 a b) (tuple21 a b)) (tuple21 a a))))
  (sort (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 b1)) (tuple2 a1 a1))
  (t2tb1320 x))))

(declare-fun tb2t1320 (uni) (tuple21 (tuple21 (tuple21 a b) (tuple21 a b))
  (tuple21 a a)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 a b) (tuple21 a b)) (tuple21 a a))))
  (! (= (tb2t1320 (t2tb1320 i)) i) :pattern ((t2tb1320 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 b1)) (tuple2 a1 a1))
     j) (= (t2tb1320 (tb2t1320 j)) j)) :pattern ((t2tb1320 (tb2t1320 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 (tuple21 a b) a))) (k (set (tuple21 (tuple21 a b)
  a))) (x (tuple21 a b)) (y (tuple21 a b)) (z a) (w a))
  (= (mem (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 b1)) (tuple2 a1 a1))
  (Tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 b1)) (tuple2 a1 a1)
  (Tuple2 (tuple2 a1 b1) (tuple2 a1 b1) (t2tb13 x) (t2tb13 y))
  (Tuple2 a1 a1 (t2tb2 z) (t2tb2 w)))
  (parallel_product a1 (tuple2 a1 b1) a1 (tuple2 a1 b1) (t2tb29 h)
  (t2tb29 k)))
  (and (mem (tuple2 (tuple2 a1 b1) a1) (t2tb30 (Tuple22 x z)) (t2tb29 h))
  (mem (tuple2 (tuple2 a1 b1) a1) (t2tb30 (Tuple22 y w)) (t2tb29 k))))))

(declare-fun t2tb1321 ((tuple21 (tuple21 (tuple21 a b) (set a)) (tuple21 a
  (set b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 a b) (set a)) (tuple21 a (set b)))))
  (sort (tuple2 (tuple2 (tuple2 a1 b1) (set1 a1)) (tuple2 a1 (set1 b1)))
  (t2tb1321 x))))

(declare-fun tb2t1321 (uni) (tuple21 (tuple21 (tuple21 a b) (set a))
  (tuple21 a (set b))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 a b) (set a)) (tuple21 a (set b)))))
  (! (= (tb2t1321 (t2tb1321 i)) i) :pattern ((t2tb1321 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (tuple2 (tuple2 (tuple2 a1 b1) (set1 a1)) (tuple2 a1 (set1 b1))) j)
     (= (t2tb1321 (tb2t1321 j)) j)) :pattern ((t2tb1321 (tb2t1321 j))) )))

(declare-fun t2tb1322 ((set (tuple21 (tuple21 (tuple21 a b) (set a))
  (tuple21 a (set b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 a b) (set a)) (tuple21 a
  (set b)))))) (sort
  (set1 (tuple2 (tuple2 (tuple2 a1 b1) (set1 a1)) (tuple2 a1 (set1 b1))))
  (t2tb1322 x))))

(declare-fun tb2t1322 (uni) (set (tuple21 (tuple21 (tuple21 a b) (set a))
  (tuple21 a (set b)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 a b) (set a)) (tuple21 a
  (set b)))))) (! (= (tb2t1322 (t2tb1322 i)) i) :pattern ((t2tb1322 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 (tuple2 a1 b1) (set1 a1)) (tuple2 a1 (set1 b1))))
     j) (= (t2tb1322 (tb2t1322 j)) j)) :pattern ((t2tb1322 (tb2t1322 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 (tuple21 a b) a))) (k (set (tuple21 (set a)
  (set b)))) (x (tuple21 a b)) (y (set a)) (z a) (w (set b)))
  (= (mem (tuple2 (tuple2 (tuple2 a1 b1) (set1 a1)) (tuple2 a1 (set1 b1)))
  (Tuple2 (tuple2 (tuple2 a1 b1) (set1 a1)) (tuple2 a1 (set1 b1))
  (Tuple2 (tuple2 a1 b1) (set1 a1) (t2tb13 x) (t2tb1 y))
  (Tuple2 a1 (set1 b1) (t2tb2 z) (t2tb12 w)))
  (parallel_product (set1 b1) (set1 a1) a1 (tuple2 a1 b1) (t2tb29 h)
  (t2tb1285 k)))
  (and (mem (tuple2 (tuple2 a1 b1) a1) (t2tb30 (Tuple22 x z)) (t2tb29 h))
  (mem (tuple2 (set1 a1) (set1 b1)) (t2tb495 (Tuple23 y w)) (t2tb1285 k))))))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 (tuple21 a b) a))) (k (set (tuple21 a b)))
  (x (tuple21 a b)) (y a) (z a) (w b))
  (= (mem (tuple2 (tuple2 (tuple2 a1 b1) a1) (tuple2 a1 b1))
  (Tuple2 (tuple2 (tuple2 a1 b1) a1) (tuple2 a1 b1) (t2tb30 (Tuple22 x y))
  (t2tb13 (Tuple21 z w)))
  (parallel_product b1 a1 a1 (tuple2 a1 b1) (t2tb29 h) (t2tb11 k)))
  (and (mem (tuple2 (tuple2 a1 b1) a1) (t2tb30 (Tuple22 x z)) (t2tb29 h))
  (mem (tuple2 a1 b1) (t2tb13 (Tuple21 y w)) (t2tb11 k))))))

;; mem_parallel_product
  (assert
  (forall ((d2 ty))
  (forall ((h (set (tuple21 (tuple21 a b) a))) (k uni) (x (tuple21 a b))
  (y a) (z a) (w uni))
  (= (mem (tuple2 (tuple2 (tuple2 a1 b1) a1) (tuple2 a1 d2))
  (Tuple2 (tuple2 (tuple2 a1 b1) a1) (tuple2 a1 d2) (t2tb30 (Tuple22 x y))
  (Tuple2 a1 d2 (t2tb2 z) w))
  (parallel_product d2 a1 a1 (tuple2 a1 b1) (t2tb29 h) k))
  (and (mem (tuple2 (tuple2 a1 b1) a1) (t2tb30 (Tuple22 x z)) (t2tb29 h))
  (mem (tuple2 a1 d2) (Tuple2 a1 d2 (t2tb2 y) w) k))))))

;; mem_parallel_product
  (assert
  (forall ((c2 ty) (d2 ty))
  (forall ((h (set (tuple21 (tuple21 a b) a))) (k uni) (x (tuple21 a b))
  (y uni) (z a) (w uni))
  (= (mem (tuple2 (tuple2 (tuple2 a1 b1) c2) (tuple2 a1 d2))
  (Tuple2 (tuple2 (tuple2 a1 b1) c2) (tuple2 a1 d2)
  (Tuple2 (tuple2 a1 b1) c2 (t2tb13 x) y) (Tuple2 a1 d2 (t2tb2 z) w))
  (parallel_product d2 c2 a1 (tuple2 a1 b1) (t2tb29 h) k))
  (and (mem (tuple2 (tuple2 a1 b1) a1) (t2tb30 (Tuple22 x z)) (t2tb29 h))
  (mem (tuple2 c2 d2) (Tuple2 c2 d2 y w) k))))))

;; mem_parallel_product
  (assert
  (forall ((b2 ty) (d2 ty))
  (forall ((h uni) (k uni) (x (set a)) (y (set b)) (z uni) (w uni))
  (= (mem (tuple2 (tuple2 (set1 a1) (set1 b1)) (tuple2 b2 d2))
  (Tuple2 (tuple2 (set1 a1) (set1 b1)) (tuple2 b2 d2) (t2tb495 (Tuple23 x y))
  (Tuple2 b2 d2 z w)) (parallel_product d2 (set1 b1) b2 (set1 a1) h k))
  (and (mem (tuple2 (set1 a1) b2) (Tuple2 (set1 a1) b2 (t2tb1 x) z) h) (mem
  (tuple2 (set1 b1) d2) (Tuple2 (set1 b1) d2 (t2tb12 y) w) k))))))

(declare-fun t2tb1323 ((tuple21 (set b) a)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set b) a))) (sort (tuple2 (set1 b1) a1)
  (t2tb1323 x))))

(declare-fun tb2t1323 (uni) (tuple21 (set b) a))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set b) a)))
  (! (= (tb2t1323 (t2tb1323 i)) i) :pattern ((t2tb1323 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 b1) a1) j) (= (t2tb1323 (tb2t1323 j)) j)) :pattern (
  (t2tb1323 (tb2t1323 j))) )))

(declare-fun t2tb1324 ((tuple21 (set a) (tuple21 a b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set a) (tuple21 a b)))) (sort
  (tuple2 (set1 a1) (tuple2 a1 b1)) (t2tb1324 x))))

(declare-fun tb2t1324 (uni) (tuple21 (set a) (tuple21 a b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set a) (tuple21 a b))))
  (! (= (tb2t1324 (t2tb1324 i)) i) :pattern ((t2tb1324 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 a1) (tuple2 a1 b1)) j)
     (= (t2tb1324 (tb2t1324 j)) j)) :pattern ((t2tb1324 (tb2t1324 j))) )))

(declare-fun t2tb1325 ((set (tuple21 (tuple21 (set a) (set b))
  (tuple21 (tuple21 a b) a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (set a) (set b)) (tuple21 (tuple21 a b)
  a))))) (sort
  (set1 (tuple2 (tuple2 (set1 a1) (set1 b1)) (tuple2 (tuple2 a1 b1) a1)))
  (t2tb1325 x))))

(declare-fun tb2t1325 (uni) (set (tuple21 (tuple21 (set a) (set b))
  (tuple21 (tuple21 a b) a))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (set a) (set b)) (tuple21 (tuple21 a b)
  a))))) (! (= (tb2t1325 (t2tb1325 i)) i) :pattern ((t2tb1325 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 (set1 a1) (set1 b1)) (tuple2 (tuple2 a1 b1) a1)))
     j) (= (t2tb1325 (tb2t1325 j)) j)) :pattern ((t2tb1325 (tb2t1325 j))) )))

(declare-fun t2tb1326 ((tuple21 (tuple21 (set a) (set b)) (tuple21 (tuple21 a
  b) a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (set a) (set b)) (tuple21 (tuple21 a b) a))))
  (sort (tuple2 (tuple2 (set1 a1) (set1 b1)) (tuple2 (tuple2 a1 b1) a1))
  (t2tb1326 x))))

(declare-fun tb2t1326 (uni) (tuple21 (tuple21 (set a) (set b))
  (tuple21 (tuple21 a b) a)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (set a) (set b)) (tuple21 (tuple21 a b) a))))
  (! (= (tb2t1326 (t2tb1326 i)) i) :pattern ((t2tb1326 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (tuple2 (tuple2 (set1 a1) (set1 b1)) (tuple2 (tuple2 a1 b1) a1)) j)
     (= (t2tb1326 (tb2t1326 j)) j)) :pattern ((t2tb1326 (tb2t1326 j))) )))

(declare-fun t2tb1327 ((set (tuple21 (set b) a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set b) a)))) (sort (set1 (tuple2 (set1 b1) a1))
  (t2tb1327 x))))

(declare-fun tb2t1327 (uni) (set (tuple21 (set b) a)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set b) a))))
  (! (= (tb2t1327 (t2tb1327 i)) i) :pattern ((t2tb1327 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 b1) a1)) j) (= (t2tb1327 (tb2t1327 j)) j)) :pattern (
  (t2tb1327 (tb2t1327 j))) )))

(declare-fun t2tb1328 ((set (tuple21 (set a) (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set a) (tuple21 a b))))) (sort
  (set1 (tuple2 (set1 a1) (tuple2 a1 b1))) (t2tb1328 x))))

(declare-fun tb2t1328 (uni) (set (tuple21 (set a) (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set a) (tuple21 a b)))))
  (! (= (tb2t1328 (t2tb1328 i)) i) :pattern ((t2tb1328 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 a1) (tuple2 a1 b1))) j)
     (= (t2tb1328 (tb2t1328 j)) j)) :pattern ((t2tb1328 (tb2t1328 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 (set a) (tuple21 a b)))) (k (set (tuple21 (set b)
  a))) (x (set a)) (y (set b)) (z (tuple21 a b)) (w a))
  (= (mem (tuple2 (tuple2 (set1 a1) (set1 b1)) (tuple2 (tuple2 a1 b1) a1))
  (Tuple2 (tuple2 (set1 a1) (set1 b1)) (tuple2 (tuple2 a1 b1) a1)
  (t2tb495 (Tuple23 x y)) (t2tb30 (Tuple22 z w)))
  (parallel_product a1 (set1 b1) (tuple2 a1 b1) (set1 a1) (t2tb1328 h)
  (t2tb1327 k)))
  (and (mem (tuple2 (set1 a1) (tuple2 a1 b1))
  (Tuple2 (set1 a1) (tuple2 a1 b1) (t2tb1 x) (t2tb13 z)) (t2tb1328 h)) (mem
  (tuple2 (set1 b1) a1) (Tuple2 (set1 b1) a1 (t2tb12 y) (t2tb2 w))
  (t2tb1327 k))))))

(declare-fun t2tb1329 ((set (tuple21 (tuple21 (set a) (tuple21 a b))
  (tuple21 (set b) a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (set a) (tuple21 a b)) (tuple21 (set b)
  a))))) (sort
  (set1 (tuple2 (tuple2 (set1 a1) (tuple2 a1 b1)) (tuple2 (set1 b1) a1)))
  (t2tb1329 x))))

(declare-fun tb2t1329 (uni) (set (tuple21 (tuple21 (set a) (tuple21 a b))
  (tuple21 (set b) a))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (set a) (tuple21 a b)) (tuple21 (set b)
  a))))) (! (= (tb2t1329 (t2tb1329 i)) i) :pattern ((t2tb1329 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 (set1 a1) (tuple2 a1 b1)) (tuple2 (set1 b1) a1)))
     j) (= (t2tb1329 (tb2t1329 j)) j)) :pattern ((t2tb1329 (tb2t1329 j))) )))

(declare-fun t2tb1330 ((tuple21 (tuple21 (set a) (tuple21 a b))
  (tuple21 (set b) a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (set a) (tuple21 a b)) (tuple21 (set b) a))))
  (sort (tuple2 (tuple2 (set1 a1) (tuple2 a1 b1)) (tuple2 (set1 b1) a1))
  (t2tb1330 x))))

(declare-fun tb2t1330 (uni) (tuple21 (tuple21 (set a) (tuple21 a b))
  (tuple21 (set b) a)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (set a) (tuple21 a b)) (tuple21 (set b) a))))
  (! (= (tb2t1330 (t2tb1330 i)) i) :pattern ((t2tb1330 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (tuple2 (tuple2 (set1 a1) (tuple2 a1 b1)) (tuple2 (set1 b1) a1)) j)
     (= (t2tb1330 (tb2t1330 j)) j)) :pattern ((t2tb1330 (tb2t1330 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 (set a) (set b)))) (k (set (tuple21 (tuple21 a b)
  a))) (x (set a)) (y (tuple21 a b)) (z (set b)) (w a))
  (= (mem (tuple2 (tuple2 (set1 a1) (tuple2 a1 b1)) (tuple2 (set1 b1) a1))
  (Tuple2 (tuple2 (set1 a1) (tuple2 a1 b1)) (tuple2 (set1 b1) a1)
  (Tuple2 (set1 a1) (tuple2 a1 b1) (t2tb1 x) (t2tb13 y))
  (Tuple2 (set1 b1) a1 (t2tb12 z) (t2tb2 w)))
  (parallel_product a1 (tuple2 a1 b1) (set1 b1) (set1 a1) (t2tb1285 h)
  (t2tb29 k)))
  (and (mem (tuple2 (set1 a1) (set1 b1)) (t2tb495 (Tuple23 x z))
  (t2tb1285 h)) (mem (tuple2 (tuple2 a1 b1) a1) (t2tb30 (Tuple22 y w))
  (t2tb29 k))))))

;; mem_parallel_product
  (assert
  (forall ((d2 ty))
  (forall ((h (set (tuple21 (set a) (set b)))) (k uni) (x (set a))
  (y (set b)) (z (set b)) (w uni))
  (= (mem (tuple2 (tuple2 (set1 a1) (set1 b1)) (tuple2 (set1 b1) d2))
  (Tuple2 (tuple2 (set1 a1) (set1 b1)) (tuple2 (set1 b1) d2)
  (t2tb495 (Tuple23 x y)) (Tuple2 (set1 b1) d2 (t2tb12 z) w))
  (parallel_product d2 (set1 b1) (set1 b1) (set1 a1) (t2tb1285 h) k))
  (and (mem (tuple2 (set1 a1) (set1 b1)) (t2tb495 (Tuple23 x z))
  (t2tb1285 h)) (mem (tuple2 (set1 b1) d2) (Tuple2 (set1 b1) d2 (t2tb12 y) w)
  k))))))

(declare-fun t2tb1331 ((set (tuple21 (tuple21 (set a) (set a))
  (tuple21 (set b) (set b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (set a) (set a)) (tuple21 (set b)
  (set b)))))) (sort
  (set1 (tuple2 (tuple2 (set1 a1) (set1 a1)) (tuple2 (set1 b1) (set1 b1))))
  (t2tb1331 x))))

(declare-fun tb2t1331 (uni) (set (tuple21 (tuple21 (set a) (set a))
  (tuple21 (set b) (set b)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (set a) (set a)) (tuple21 (set b)
  (set b)))))) (! (= (tb2t1331 (t2tb1331 i)) i) :pattern ((t2tb1331 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (tuple2 (tuple2 (set1 a1) (set1 a1)) (tuple2 (set1 b1) (set1 b1)))) j)
     (= (t2tb1331 (tb2t1331 j)) j)) :pattern ((t2tb1331 (tb2t1331 j))) )))

(declare-fun t2tb1332 ((tuple21 (tuple21 (set a) (set a)) (tuple21 (set b)
  (set b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (set a) (set a)) (tuple21 (set b) (set b)))))
  (sort (tuple2 (tuple2 (set1 a1) (set1 a1)) (tuple2 (set1 b1) (set1 b1)))
  (t2tb1332 x))))

(declare-fun tb2t1332 (uni) (tuple21 (tuple21 (set a) (set a))
  (tuple21 (set b) (set b))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (set a) (set a)) (tuple21 (set b) (set b)))))
  (! (= (tb2t1332 (t2tb1332 i)) i) :pattern ((t2tb1332 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (tuple2 (tuple2 (set1 a1) (set1 a1)) (tuple2 (set1 b1) (set1 b1))) j)
     (= (t2tb1332 (tb2t1332 j)) j)) :pattern ((t2tb1332 (tb2t1332 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 (set a) (set b)))) (k (set (tuple21 (set a)
  (set b)))) (x (set a)) (y (set a)) (z (set b)) (w (set b)))
  (= (mem (tuple2 (tuple2 (set1 a1) (set1 a1)) (tuple2 (set1 b1) (set1 b1)))
  (Tuple2 (tuple2 (set1 a1) (set1 a1)) (tuple2 (set1 b1) (set1 b1))
  (Tuple2 (set1 a1) (set1 a1) (t2tb1 x) (t2tb1 y))
  (Tuple2 (set1 b1) (set1 b1) (t2tb12 z) (t2tb12 w)))
  (parallel_product (set1 b1) (set1 a1) (set1 b1) (set1 a1) (t2tb1285 h)
  (t2tb1285 k)))
  (and (mem (tuple2 (set1 a1) (set1 b1)) (t2tb495 (Tuple23 x z))
  (t2tb1285 h)) (mem (tuple2 (set1 a1) (set1 b1)) (t2tb495 (Tuple23 y w))
  (t2tb1285 k))))))

(declare-fun t2tb1333 ((set (tuple21 (tuple21 (set a) a) (tuple21 (set b)
  b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (set a) a) (tuple21 (set b) b))))) (sort
  (set1 (tuple2 (tuple2 (set1 a1) a1) (tuple2 (set1 b1) b1))) (t2tb1333 x))))

(declare-fun tb2t1333 (uni) (set (tuple21 (tuple21 (set a) a)
  (tuple21 (set b) b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (set a) a) (tuple21 (set b) b)))))
  (! (= (tb2t1333 (t2tb1333 i)) i) :pattern ((t2tb1333 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 (set1 a1) a1) (tuple2 (set1 b1) b1))) j)
     (= (t2tb1333 (tb2t1333 j)) j)) :pattern ((t2tb1333 (tb2t1333 j))) )))

(declare-fun t2tb1334 ((tuple21 (tuple21 (set a) a) (tuple21 (set b)
  b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (set a) a) (tuple21 (set b) b)))) (sort
  (tuple2 (tuple2 (set1 a1) a1) (tuple2 (set1 b1) b1)) (t2tb1334 x))))

(declare-fun tb2t1334 (uni) (tuple21 (tuple21 (set a) a) (tuple21 (set b)
  b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (set a) a) (tuple21 (set b) b))))
  (! (= (tb2t1334 (t2tb1334 i)) i) :pattern ((t2tb1334 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 (set1 a1) a1) (tuple2 (set1 b1) b1)) j)
     (= (t2tb1334 (tb2t1334 j)) j)) :pattern ((t2tb1334 (tb2t1334 j))) )))

(declare-fun t2tb1335 ((tuple21 (set b) b)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set b) b))) (sort (tuple2 (set1 b1) b1)
  (t2tb1335 x))))

(declare-fun tb2t1335 (uni) (tuple21 (set b) b))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set b) b)))
  (! (= (tb2t1335 (t2tb1335 i)) i) :pattern ((t2tb1335 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 b1) b1) j) (= (t2tb1335 (tb2t1335 j)) j)) :pattern (
  (t2tb1335 (tb2t1335 j))) )))

(declare-fun t2tb1336 ((tuple21 (set a) a)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set a) a))) (sort (tuple2 (set1 a1) a1)
  (t2tb1336 x))))

(declare-fun tb2t1336 (uni) (tuple21 (set a) a))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set a) a)))
  (! (= (tb2t1336 (t2tb1336 i)) i) :pattern ((t2tb1336 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 a1) a1) j) (= (t2tb1336 (tb2t1336 j)) j)) :pattern (
  (t2tb1336 (tb2t1336 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 (set a) (set b)))) (k (set (tuple21 a b)))
  (x (set a)) (y a) (z (set b)) (w b))
  (= (mem (tuple2 (tuple2 (set1 a1) a1) (tuple2 (set1 b1) b1))
  (Tuple2 (tuple2 (set1 a1) a1) (tuple2 (set1 b1) b1)
  (Tuple2 (set1 a1) a1 (t2tb1 x) (t2tb2 y))
  (Tuple2 (set1 b1) b1 (t2tb12 z) (t2tb14 w)))
  (parallel_product b1 a1 (set1 b1) (set1 a1) (t2tb1285 h) (t2tb11 k)))
  (and (mem (tuple2 (set1 a1) (set1 b1)) (t2tb495 (Tuple23 x z))
  (t2tb1285 h)) (mem (tuple2 a1 b1) (t2tb13 (Tuple21 y w)) (t2tb11 k))))))

;; mem_parallel_product
  (assert
  (forall ((c2 ty) (d2 ty))
  (forall ((h (set (tuple21 (set a) (set b)))) (k uni) (x (set a)) (y uni)
  (z (set b)) (w uni))
  (= (mem (tuple2 (tuple2 (set1 a1) c2) (tuple2 (set1 b1) d2))
  (Tuple2 (tuple2 (set1 a1) c2) (tuple2 (set1 b1) d2)
  (Tuple2 (set1 a1) c2 (t2tb1 x) y) (Tuple2 (set1 b1) d2 (t2tb12 z) w))
  (parallel_product d2 c2 (set1 b1) (set1 a1) (t2tb1285 h) k))
  (and (mem (tuple2 (set1 a1) (set1 b1)) (t2tb495 (Tuple23 x z))
  (t2tb1285 h)) (mem (tuple2 c2 d2) (Tuple2 c2 d2 y w) k))))))

(declare-fun t2tb1337 ((tuple21 (tuple21 (set a) (set b)) (tuple21 (set a)
  (set b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (set a) (set b)) (tuple21 (set a) (set b)))))
  (sort (tuple2 (tuple2 (set1 a1) (set1 b1)) (tuple2 (set1 a1) (set1 b1)))
  (t2tb1337 x))))

(declare-fun tb2t1337 (uni) (tuple21 (tuple21 (set a) (set b))
  (tuple21 (set a) (set b))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (set a) (set b)) (tuple21 (set a) (set b)))))
  (! (= (tb2t1337 (t2tb1337 i)) i) :pattern ((t2tb1337 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (tuple2 (tuple2 (set1 a1) (set1 b1)) (tuple2 (set1 a1) (set1 b1))) j)
     (= (t2tb1337 (tb2t1337 j)) j)) :pattern ((t2tb1337 (tb2t1337 j))) )))

(declare-fun t2tb1338 ((set (tuple21 (tuple21 (set a) (set b))
  (tuple21 (set a) (set b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (set a) (set b)) (tuple21 (set a)
  (set b)))))) (sort
  (set1 (tuple2 (tuple2 (set1 a1) (set1 b1)) (tuple2 (set1 a1) (set1 b1))))
  (t2tb1338 x))))

(declare-fun tb2t1338 (uni) (set (tuple21 (tuple21 (set a) (set b))
  (tuple21 (set a) (set b)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (set a) (set b)) (tuple21 (set a)
  (set b)))))) (! (= (tb2t1338 (t2tb1338 i)) i) :pattern ((t2tb1338 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (tuple2 (tuple2 (set1 a1) (set1 b1)) (tuple2 (set1 a1) (set1 b1)))) j)
     (= (t2tb1338 (tb2t1338 j)) j)) :pattern ((t2tb1338 (tb2t1338 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 (set a) (set a)))) (k (set (tuple21 (set b)
  (set b)))) (x (set a)) (y (set b)) (z (set a)) (w (set b)))
  (= (mem (tuple2 (tuple2 (set1 a1) (set1 b1)) (tuple2 (set1 a1) (set1 b1)))
  (Tuple2 (tuple2 (set1 a1) (set1 b1)) (tuple2 (set1 a1) (set1 b1))
  (t2tb495 (Tuple23 x y)) (t2tb495 (Tuple23 z w)))
  (parallel_product (set1 b1) (set1 b1) (set1 a1) (set1 a1) (t2tb1291 h)
  (t2tb1289 k)))
  (and (mem (tuple2 (set1 a1) (set1 a1))
  (Tuple2 (set1 a1) (set1 a1) (t2tb1 x) (t2tb1 z)) (t2tb1291 h)) (mem
  (tuple2 (set1 b1) (set1 b1))
  (Tuple2 (set1 b1) (set1 b1) (t2tb12 y) (t2tb12 w)) (t2tb1289 k))))))

(declare-fun t2tb1339 ((tuple21 (tuple21 (set a) (set b)) (tuple21 a
  b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (set a) (set b)) (tuple21 a b)))) (sort
  (tuple2 (tuple2 (set1 a1) (set1 b1)) (tuple2 a1 b1)) (t2tb1339 x))))

(declare-fun tb2t1339 (uni) (tuple21 (tuple21 (set a) (set b)) (tuple21 a
  b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (set a) (set b)) (tuple21 a b))))
  (! (= (tb2t1339 (t2tb1339 i)) i) :pattern ((t2tb1339 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 (set1 a1) (set1 b1)) (tuple2 a1 b1)) j)
     (= (t2tb1339 (tb2t1339 j)) j)) :pattern ((t2tb1339 (tb2t1339 j))) )))

(declare-fun t2tb1340 ((set (tuple21 (tuple21 (set a) (set b)) (tuple21 a
  b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (set a) (set b)) (tuple21 a b))))) (sort
  (set1 (tuple2 (tuple2 (set1 a1) (set1 b1)) (tuple2 a1 b1))) (t2tb1340 x))))

(declare-fun tb2t1340 (uni) (set (tuple21 (tuple21 (set a) (set b))
  (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (set a) (set b)) (tuple21 a b)))))
  (! (= (tb2t1340 (t2tb1340 i)) i) :pattern ((t2tb1340 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 (set1 a1) (set1 b1)) (tuple2 a1 b1))) j)
     (= (t2tb1340 (tb2t1340 j)) j)) :pattern ((t2tb1340 (tb2t1340 j))) )))

(declare-fun t2tb1341 ((set (tuple21 (set b) b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set b) b)))) (sort (set1 (tuple2 (set1 b1) b1))
  (t2tb1341 x))))

(declare-fun tb2t1341 (uni) (set (tuple21 (set b) b)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set b) b))))
  (! (= (tb2t1341 (t2tb1341 i)) i) :pattern ((t2tb1341 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 b1) b1)) j) (= (t2tb1341 (tb2t1341 j)) j)) :pattern (
  (t2tb1341 (tb2t1341 j))) )))

(declare-fun t2tb1342 ((set (tuple21 (set a) a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set a) a)))) (sort (set1 (tuple2 (set1 a1) a1))
  (t2tb1342 x))))

(declare-fun tb2t1342 (uni) (set (tuple21 (set a) a)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set a) a))))
  (! (= (tb2t1342 (t2tb1342 i)) i) :pattern ((t2tb1342 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 a1) a1)) j) (= (t2tb1342 (tb2t1342 j)) j)) :pattern (
  (t2tb1342 (tb2t1342 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 (set a) a))) (k (set (tuple21 (set b) b)))
  (x (set a)) (y (set b)) (z a) (w b))
  (= (mem (tuple2 (tuple2 (set1 a1) (set1 b1)) (tuple2 a1 b1))
  (Tuple2 (tuple2 (set1 a1) (set1 b1)) (tuple2 a1 b1) (t2tb495 (Tuple23 x y))
  (t2tb13 (Tuple21 z w)))
  (parallel_product b1 (set1 b1) a1 (set1 a1) (t2tb1342 h) (t2tb1341 k)))
  (and (mem (tuple2 (set1 a1) a1) (Tuple2 (set1 a1) a1 (t2tb1 x) (t2tb2 z))
  (t2tb1342 h)) (mem (tuple2 (set1 b1) b1)
  (Tuple2 (set1 b1) b1 (t2tb12 y) (t2tb14 w)) (t2tb1341 k))))))

;; mem_parallel_product
  (assert
  (forall ((b2 ty) (d2 ty))
  (forall ((h uni) (k uni) (x a) (y b) (z uni) (w uni))
  (= (mem (tuple2 (tuple2 a1 b1) (tuple2 b2 d2))
  (Tuple2 (tuple2 a1 b1) (tuple2 b2 d2) (t2tb13 (Tuple21 x y))
  (Tuple2 b2 d2 z w)) (parallel_product d2 b1 b2 a1 h k))
  (and (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) z) h) (mem (tuple2 b1 d2)
  (Tuple2 b1 d2 (t2tb14 y) w) k))))))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a (tuple21 a b)))) (k (set (tuple21 b a))) (x a)
  (y b) (z (tuple21 a b)) (w a))
  (= (mem (tuple2 (tuple2 a1 b1) (tuple2 (tuple2 a1 b1) a1))
  (Tuple2 (tuple2 a1 b1) (tuple2 (tuple2 a1 b1) a1) (t2tb13 (Tuple21 x y))
  (t2tb30 (Tuple22 z w)))
  (parallel_product a1 b1 (tuple2 a1 b1) a1 (t2tb41 h) (t2tb37 k)))
  (and (mem (tuple2 a1 (tuple2 a1 b1))
  (Tuple2 a1 (tuple2 a1 b1) (t2tb2 x) (t2tb13 z)) (t2tb41 h)) (mem
  (tuple2 b1 a1) (Tuple2 b1 a1 (t2tb14 y) (t2tb2 w)) (t2tb37 k))))))

(declare-fun t2tb1343 ((tuple21 (tuple21 a (tuple21 a b)) (tuple21 b
  a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a (tuple21 a b)) (tuple21 b a)))) (sort
  (tuple2 (tuple2 a1 (tuple2 a1 b1)) (tuple2 b1 a1)) (t2tb1343 x))))

(declare-fun tb2t1343 (uni) (tuple21 (tuple21 a (tuple21 a b)) (tuple21 b
  a)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a (tuple21 a b)) (tuple21 b a))))
  (! (= (tb2t1343 (t2tb1343 i)) i) :pattern ((t2tb1343 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 (tuple2 a1 b1)) (tuple2 b1 a1)) j)
     (= (t2tb1343 (tb2t1343 j)) j)) :pattern ((t2tb1343 (tb2t1343 j))) )))

(declare-fun t2tb1344 ((set (tuple21 (tuple21 a (tuple21 a b)) (tuple21 b
  a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a (tuple21 a b)) (tuple21 b a))))) (sort
  (set1 (tuple2 (tuple2 a1 (tuple2 a1 b1)) (tuple2 b1 a1))) (t2tb1344 x))))

(declare-fun tb2t1344 (uni) (set (tuple21 (tuple21 a (tuple21 a b))
  (tuple21 b a))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a (tuple21 a b)) (tuple21 b a)))))
  (! (= (tb2t1344 (t2tb1344 i)) i) :pattern ((t2tb1344 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 (tuple2 a1 b1)) (tuple2 b1 a1))) j)
     (= (t2tb1344 (tb2t1344 j)) j)) :pattern ((t2tb1344 (tb2t1344 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a b))) (k (set (tuple21 (tuple21 a b) a))) (x a)
  (y (tuple21 a b)) (z b) (w a))
  (= (mem (tuple2 (tuple2 a1 (tuple2 a1 b1)) (tuple2 b1 a1))
  (Tuple2 (tuple2 a1 (tuple2 a1 b1)) (tuple2 b1 a1)
  (Tuple2 a1 (tuple2 a1 b1) (t2tb2 x) (t2tb13 y))
  (Tuple2 b1 a1 (t2tb14 z) (t2tb2 w)))
  (parallel_product a1 (tuple2 a1 b1) b1 a1 (t2tb11 h) (t2tb29 k)))
  (and (mem (tuple2 a1 b1) (t2tb13 (Tuple21 x z)) (t2tb11 h)) (mem
  (tuple2 (tuple2 a1 b1) a1) (t2tb30 (Tuple22 y w)) (t2tb29 k))))))

;; mem_parallel_product
  (assert
  (forall ((d2 ty))
  (forall ((h (set (tuple21 a b))) (k uni) (x a) (y b) (z b) (w uni))
  (= (mem (tuple2 (tuple2 a1 b1) (tuple2 b1 d2))
  (Tuple2 (tuple2 a1 b1) (tuple2 b1 d2) (t2tb13 (Tuple21 x y))
  (Tuple2 b1 d2 (t2tb14 z) w)) (parallel_product d2 b1 b1 a1 (t2tb11 h) k))
  (and (mem (tuple2 a1 b1) (t2tb13 (Tuple21 x z)) (t2tb11 h)) (mem
  (tuple2 b1 d2) (Tuple2 b1 d2 (t2tb14 y) w) k))))))

(declare-fun t2tb1345 ((tuple21 a (set a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (set a)))) (sort (tuple2 a1 (set1 a1))
  (t2tb1345 x))))

(declare-fun tb2t1345 (uni) (tuple21 a (set a)))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (set a))))
  (! (= (tb2t1345 (t2tb1345 i)) i) :pattern ((t2tb1345 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (set1 a1)) j) (= (t2tb1345 (tb2t1345 j)) j)) :pattern (
  (t2tb1345 (tb2t1345 j))) )))

(declare-fun t2tb1346 ((set (tuple21 (tuple21 a (set a)) (tuple21 b
  (set b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a (set a)) (tuple21 b (set b)))))) (sort
  (set1 (tuple2 (tuple2 a1 (set1 a1)) (tuple2 b1 (set1 b1)))) (t2tb1346 x))))

(declare-fun tb2t1346 (uni) (set (tuple21 (tuple21 a (set a)) (tuple21 b
  (set b)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a (set a)) (tuple21 b (set b))))))
  (! (= (tb2t1346 (t2tb1346 i)) i) :pattern ((t2tb1346 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 (set1 a1)) (tuple2 b1 (set1 b1)))) j)
     (= (t2tb1346 (tb2t1346 j)) j)) :pattern ((t2tb1346 (tb2t1346 j))) )))

(declare-fun t2tb1347 ((tuple21 (tuple21 a (set a)) (tuple21 b
  (set b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a (set a)) (tuple21 b (set b))))) (sort
  (tuple2 (tuple2 a1 (set1 a1)) (tuple2 b1 (set1 b1))) (t2tb1347 x))))

(declare-fun tb2t1347 (uni) (tuple21 (tuple21 a (set a)) (tuple21 b
  (set b))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a (set a)) (tuple21 b (set b)))))
  (! (= (tb2t1347 (t2tb1347 i)) i) :pattern ((t2tb1347 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 (set1 a1)) (tuple2 b1 (set1 b1))) j)
     (= (t2tb1347 (tb2t1347 j)) j)) :pattern ((t2tb1347 (tb2t1347 j))) )))

(declare-fun t2tb1348 ((tuple21 b (set b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 b (set b)))) (sort (tuple2 b1 (set1 b1))
  (t2tb1348 x))))

(declare-fun tb2t1348 (uni) (tuple21 b (set b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 b (set b))))
  (! (= (tb2t1348 (t2tb1348 i)) i) :pattern ((t2tb1348 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 b1 (set1 b1)) j) (= (t2tb1348 (tb2t1348 j)) j)) :pattern (
  (t2tb1348 (tb2t1348 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a b))) (k (set (tuple21 (set a) (set b)))) (x a)
  (y (set a)) (z b) (w (set b)))
  (= (mem (tuple2 (tuple2 a1 (set1 a1)) (tuple2 b1 (set1 b1)))
  (Tuple2 (tuple2 a1 (set1 a1)) (tuple2 b1 (set1 b1))
  (Tuple2 a1 (set1 a1) (t2tb2 x) (t2tb1 y))
  (Tuple2 b1 (set1 b1) (t2tb14 z) (t2tb12 w)))
  (parallel_product (set1 b1) (set1 a1) b1 a1 (t2tb11 h) (t2tb1285 k)))
  (and (mem (tuple2 a1 b1) (t2tb13 (Tuple21 x z)) (t2tb11 h)) (mem
  (tuple2 (set1 a1) (set1 b1)) (t2tb495 (Tuple23 y w)) (t2tb1285 k))))))

(declare-fun t2tb61 ((set (tuple21 (tuple21 a a) (tuple21 b b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a a) (tuple21 b b))))) (sort
  (set1 (tuple2 (tuple2 a1 a1) (tuple2 b1 b1))) (t2tb61 x))))

(declare-fun tb2t61 (uni) (set (tuple21 (tuple21 a a) (tuple21 b b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a a) (tuple21 b b)))))
  (! (= (tb2t61 (t2tb61 i)) i) :pattern ((t2tb61 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 a1) (tuple2 b1 b1))) j)
     (= (t2tb61 (tb2t61 j)) j)) :pattern ((t2tb61 (tb2t61 j))) )))

(declare-fun t2tb62 ((tuple21 (tuple21 a a) (tuple21 b b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a a) (tuple21 b b)))) (sort
  (tuple2 (tuple2 a1 a1) (tuple2 b1 b1)) (t2tb62 x))))

(declare-fun tb2t62 (uni) (tuple21 (tuple21 a a) (tuple21 b b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a a) (tuple21 b b))))
  (! (= (tb2t62 (t2tb62 i)) i) :pattern ((t2tb62 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 a1) (tuple2 b1 b1)) j)
     (= (t2tb62 (tb2t62 j)) j)) :pattern ((t2tb62 (tb2t62 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a b))) (k (set (tuple21 a b))) (x a) (y a) (z b)
  (w b))
  (= (mem (tuple2 (tuple2 a1 a1) (tuple2 b1 b1))
  (Tuple2 (tuple2 a1 a1) (tuple2 b1 b1) (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y))
  (Tuple2 b1 b1 (t2tb14 z) (t2tb14 w)))
  (parallel_product b1 a1 b1 a1 (t2tb11 h) (t2tb11 k)))
  (and (mem (tuple2 a1 b1) (t2tb13 (Tuple21 x z)) (t2tb11 h)) (mem
  (tuple2 a1 b1) (t2tb13 (Tuple21 y w)) (t2tb11 k))))))

;; mem_parallel_product
  (assert
  (forall ((c2 ty) (d2 ty))
  (forall ((h (set (tuple21 a b))) (k uni) (x a) (y uni) (z b) (w uni))
  (= (mem (tuple2 (tuple2 a1 c2) (tuple2 b1 d2))
  (Tuple2 (tuple2 a1 c2) (tuple2 b1 d2) (Tuple2 a1 c2 (t2tb2 x) y)
  (Tuple2 b1 d2 (t2tb14 z) w)) (parallel_product d2 c2 b1 a1 (t2tb11 h) k))
  (and (mem (tuple2 a1 b1) (t2tb13 (Tuple21 x z)) (t2tb11 h)) (mem
  (tuple2 c2 d2) (Tuple2 c2 d2 y w) k))))))

(declare-fun t2tb1349 ((set (tuple21 (tuple21 a b) (tuple21 (set a)
  (set b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) (tuple21 (set a) (set b)))))) (sort
  (set1 (tuple2 (tuple2 a1 b1) (tuple2 (set1 a1) (set1 b1)))) (t2tb1349 x))))

(declare-fun tb2t1349 (uni) (set (tuple21 (tuple21 a b) (tuple21 (set a)
  (set b)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a b) (tuple21 (set a) (set b))))))
  (! (= (tb2t1349 (t2tb1349 i)) i) :pattern ((t2tb1349 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 b1) (tuple2 (set1 a1) (set1 b1)))) j)
     (= (t2tb1349 (tb2t1349 j)) j)) :pattern ((t2tb1349 (tb2t1349 j))) )))

(declare-fun t2tb1350 ((set (tuple21 b (set b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 b (set b))))) (sort (set1 (tuple2 b1 (set1 b1)))
  (t2tb1350 x))))

(declare-fun tb2t1350 (uni) (set (tuple21 b (set b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 b (set b)))))
  (! (= (tb2t1350 (t2tb1350 i)) i) :pattern ((t2tb1350 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 b1 (set1 b1))) j) (= (t2tb1350 (tb2t1350 j)) j)) :pattern (
  (t2tb1350 (tb2t1350 j))) )))

(declare-fun t2tb1351 ((set (tuple21 a (set a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (set a))))) (sort (set1 (tuple2 a1 (set1 a1)))
  (t2tb1351 x))))

(declare-fun tb2t1351 (uni) (set (tuple21 a (set a))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (set a)))))
  (! (= (tb2t1351 (t2tb1351 i)) i) :pattern ((t2tb1351 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (set1 a1))) j) (= (t2tb1351 (tb2t1351 j)) j)) :pattern (
  (t2tb1351 (tb2t1351 j))) )))

(declare-fun t2tb1352 ((tuple21 (tuple21 a b) (tuple21 (set a)
  (set b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a b) (tuple21 (set a) (set b))))) (sort
  (tuple2 (tuple2 a1 b1) (tuple2 (set1 a1) (set1 b1))) (t2tb1352 x))))

(declare-fun tb2t1352 (uni) (tuple21 (tuple21 a b) (tuple21 (set a)
  (set b))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a b) (tuple21 (set a) (set b)))))
  (! (= (tb2t1352 (t2tb1352 i)) i) :pattern ((t2tb1352 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 b1) (tuple2 (set1 a1) (set1 b1))) j)
     (= (t2tb1352 (tb2t1352 j)) j)) :pattern ((t2tb1352 (tb2t1352 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a (set a)))) (k (set (tuple21 b (set b)))) (x a)
  (y b) (z (set a)) (w (set b)))
  (= (mem (tuple2 (tuple2 a1 b1) (tuple2 (set1 a1) (set1 b1)))
  (Tuple2 (tuple2 a1 b1) (tuple2 (set1 a1) (set1 b1)) (t2tb13 (Tuple21 x y))
  (t2tb495 (Tuple23 z w)))
  (parallel_product (set1 b1) b1 (set1 a1) a1 (t2tb1351 h) (t2tb1350 k)))
  (and (mem (tuple2 a1 (set1 a1)) (Tuple2 a1 (set1 a1) (t2tb2 x) (t2tb1 z))
  (t2tb1351 h)) (mem (tuple2 b1 (set1 b1))
  (Tuple2 b1 (set1 b1) (t2tb14 y) (t2tb12 w)) (t2tb1350 k))))))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a a))) (k (set (tuple21 b b))) (x a) (y b) (z a)
  (w b))
  (= (mem (tuple2 (tuple2 a1 b1) (tuple2 a1 b1))
  (Tuple2 (tuple2 a1 b1) (tuple2 a1 b1) (t2tb13 (Tuple21 x y))
  (t2tb13 (Tuple21 z w)))
  (parallel_product b1 b1 a1 a1 (t2tb4 h) (t2tb35 k)))
  (and (mem (tuple2 a1 a1) (Tuple2 a1 a1 (t2tb2 x) (t2tb2 z)) (t2tb4 h)) (mem
  (tuple2 b1 b1) (Tuple2 b1 b1 (t2tb14 y) (t2tb14 w)) (t2tb35 k))))))

;; mem_parallel_product
  (assert
  (forall ((a2 ty) (b2 ty) (c2 ty) (d2 ty))
  (forall ((h uni) (k uni) (x uni) (y uni) (z uni) (w uni))
  (= (mem (tuple2 (tuple2 a2 c2) (tuple2 b2 d2))
  (Tuple2 (tuple2 a2 c2) (tuple2 b2 d2) (Tuple2 a2 c2 x y)
  (Tuple2 b2 d2 z w)) (parallel_product d2 c2 b2 a2 h k))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x z) h) (mem (tuple2 c2 d2)
  (Tuple2 c2 d2 y w) k))))))

(declare-fun infix_plmngt (ty ty uni uni) uni)

;; infix +->_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (set1 (tuple2 a2 b2)))
  (infix_plmngt b2 a2 x x1)))))

;; mem_partial_function_set
  (assert
  (forall ((s (set (tuple21 a b))) (t (set a)) (f (set (tuple21 (tuple21 a b)
  a))))
  (= (mem (set1 (tuple2 (tuple2 a1 b1) a1)) (t2tb29 f)
  (infix_plmngt a1 (tuple2 a1 b1) (t2tb11 s) (t2tb1 t)))
  (and (mem (set1 (tuple2 (tuple2 a1 b1) a1)) (t2tb29 f)
  (relation a1 (tuple2 a1 b1) (t2tb11 s) (t2tb1 t)))
  (forall ((x (tuple21 a b)) (y1 a) (y2 a))
  (=>
  (and (mem (tuple2 (tuple2 a1 b1) a1) (t2tb30 (Tuple22 x y1)) (t2tb29 f))
  (mem (tuple2 (tuple2 a1 b1) a1) (t2tb30 (Tuple22 x y2)) (t2tb29 f)))
  (= y1 y2)))))))

;; mem_partial_function_set
  (assert
  (forall ((s (set (set a))) (t (set (set b))) (f (set (tuple21 (set a)
  (set b)))))
  (= (mem (set1 (tuple2 (set1 a1) (set1 b1))) (t2tb1285 f)
  (infix_plmngt (set1 b1) (set1 a1) (t2tb s) (t2tb44 t)))
  (and (mem (set1 (tuple2 (set1 a1) (set1 b1))) (t2tb1285 f)
  (relation (set1 b1) (set1 a1) (t2tb s) (t2tb44 t)))
  (forall ((x (set a)) (y1 (set b)) (y2 (set b)))
  (=>
  (and (mem (tuple2 (set1 a1) (set1 b1)) (t2tb495 (Tuple23 x y1))
  (t2tb1285 f)) (mem (tuple2 (set1 a1) (set1 b1)) (t2tb495 (Tuple23 x y2))
  (t2tb1285 f))) (= y1 y2)))))))

;; mem_partial_function_set
  (assert
  (forall ((s (set a)) (t (set b)) (f (set (tuple21 a b))))
  (= (mem (set1 (tuple2 a1 b1)) (t2tb11 f)
  (infix_plmngt b1 a1 (t2tb1 s) (t2tb12 t)))
  (and (mem (set1 (tuple2 a1 b1)) (t2tb11 f)
  (relation b1 a1 (t2tb1 s) (t2tb12 t)))
  (forall ((x a) (y1 b) (y2 b))
  (=>
  (and (mem (tuple2 a1 b1) (t2tb13 (Tuple21 x y1)) (t2tb11 f)) (mem
  (tuple2 a1 b1) (t2tb13 (Tuple21 x y2)) (t2tb11 f))) (= y1 y2)))))))

;; mem_partial_function_set
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (f uni))
  (and
  (=> (mem (set1 (tuple2 a2 b2)) f (infix_plmngt b2 a2 s t))
  (and (mem (set1 (tuple2 a2 b2)) f (relation b2 a2 s t))
  (forall ((x uni) (y1 uni) (y2 uni))
  (=> (sort b2 y1)
  (=> (sort b2 y2)
  (=>
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y1) f) (mem (tuple2 a2 b2)
  (Tuple2 a2 b2 x y2) f)) (= y1 y2)))))))
  (=>
  (and (mem (set1 (tuple2 a2 b2)) f (relation b2 a2 s t))
  (forall ((x uni) (y1 uni) (y2 uni))
  (=> (sort a2 x)
  (=> (sort b2 y1)
  (=> (sort b2 y2)
  (=>
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y1) f) (mem (tuple2 a2 b2)
  (Tuple2 a2 b2 x y2) f)) (= y1 y2))))))) (mem (set1 (tuple2 a2 b2)) f
  (infix_plmngt b2 a2 s t)))))))

(declare-fun infix_mnmngt (ty ty uni uni) uni)

;; infix -->_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (set1 (tuple2 a2 b2)))
  (infix_mnmngt b2 a2 x x1)))))

;; mem_total_function_set
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (x uni))
  (= (mem (set1 (tuple2 a2 b2)) x (infix_mnmngt b2 a2 s t))
  (and (mem (set1 (tuple2 a2 b2)) x (infix_plmngt b2 a2 s t)) (infix_eqeq a2
  (dom b2 a2 x) s))))))

(declare-fun infix_gtplgt (ty ty uni uni) uni)

;; infix >+>_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (set1 (tuple2 a2 b2)))
  (infix_gtplgt b2 a2 x x1)))))

;; mem_partial_injection_set
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (x uni))
  (= (mem (set1 (tuple2 a2 b2)) x (infix_gtplgt b2 a2 s t))
  (and (mem (set1 (tuple2 a2 b2)) x (infix_plmngt b2 a2 s t)) (mem
  (set1 (tuple2 b2 a2)) (inverse b2 a2 x) (infix_plmngt a2 b2 t s)))))))

(declare-fun infix_gtmngt (ty ty uni uni) uni)

;; infix >->_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (set1 (tuple2 a2 b2)))
  (infix_gtmngt b2 a2 x x1)))))

;; mem_total_injection_set
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (x uni))
  (= (mem (set1 (tuple2 a2 b2)) x (infix_gtmngt b2 a2 s t))
  (and (mem (set1 (tuple2 a2 b2)) x (infix_gtplgt b2 a2 s t)) (mem
  (set1 (tuple2 a2 b2)) x (infix_mnmngt b2 a2 s t)))))))

(declare-fun infix_plmngtgt (ty ty uni uni) uni)

;; infix +->>_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (set1 (tuple2 a2 b2)))
  (infix_plmngtgt b2 a2 x x1)))))

;; mem_partial_surjection_set
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (x uni))
  (= (mem (set1 (tuple2 a2 b2)) x (infix_plmngtgt b2 a2 s t))
  (and (mem (set1 (tuple2 a2 b2)) x (infix_plmngt b2 a2 s t)) (infix_eqeq b2
  (ran b2 a2 x) t))))))

(declare-fun infix_mnmngtgt (ty ty uni uni) uni)

;; infix -->>_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (set1 (tuple2 a2 b2)))
  (infix_mnmngtgt b2 a2 x x1)))))

;; mem_total_surjection_set
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (x uni))
  (= (mem (set1 (tuple2 a2 b2)) x (infix_mnmngtgt b2 a2 s t))
  (and (mem (set1 (tuple2 a2 b2)) x (infix_plmngtgt b2 a2 s t)) (mem
  (set1 (tuple2 a2 b2)) x (infix_mnmngt b2 a2 s t)))))))

(declare-fun infix_gtplgtgt (ty ty uni uni) uni)

;; infix >+>>_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (set1 (tuple2 a2 b2)))
  (infix_gtplgtgt b2 a2 x x1)))))

;; mem_partial_bijection_set
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (x uni))
  (= (mem (set1 (tuple2 a2 b2)) x (infix_gtplgtgt b2 a2 s t))
  (and (mem (set1 (tuple2 a2 b2)) x (infix_gtplgt b2 a2 s t)) (mem
  (set1 (tuple2 a2 b2)) x (infix_plmngtgt b2 a2 s t)))))))

(declare-fun infix_gtmngtgt (ty ty uni uni) uni)

;; infix >->>_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (set1 (tuple2 a2 b2)))
  (infix_gtmngtgt b2 a2 x x1)))))

;; mem_total_bijection_set
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (x uni))
  (= (mem (set1 (tuple2 a2 b2)) x (infix_gtmngtgt b2 a2 s t))
  (and (mem (set1 (tuple2 a2 b2)) x (infix_gtmngt b2 a2 s t)) (mem
  (set1 (tuple2 a2 b2)) x (infix_mnmngtgt b2 a2 s t)))))))

(declare-fun apply (ty ty uni uni) uni)

;; apply_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort b2 (apply b2 a2 x x1)))))

;; apply_def0
  (assert
  (forall ((f (set (tuple21 (tuple21 a b) a))) (s (set (tuple21 a b)))
  (t (set a)) (a2 (tuple21 a b)))
  (=>
  (and (mem (set1 (tuple2 (tuple2 a1 b1) a1)) (t2tb29 f)
  (infix_plmngt a1 (tuple2 a1 b1) (t2tb11 s) (t2tb1 t))) (mem (tuple2 a1 b1)
  (t2tb13 a2) (dom a1 (tuple2 a1 b1) (t2tb29 f)))) (mem
  (tuple2 (tuple2 a1 b1) a1)
  (t2tb30
  (Tuple22 a2 (tb2t2 (apply a1 (tuple2 a1 b1) (t2tb29 f) (t2tb13 a2)))))
  (t2tb29 f)))))

;; apply_def0
  (assert
  (forall ((f (set (tuple21 (set a) (set b)))) (s (set (set a)))
  (t (set (set b))) (a2 (set a)))
  (=>
  (and (mem (set1 (tuple2 (set1 a1) (set1 b1))) (t2tb1285 f)
  (infix_plmngt (set1 b1) (set1 a1) (t2tb s) (t2tb44 t))) (mem (set1 a1)
  (t2tb1 a2) (dom (set1 b1) (set1 a1) (t2tb1285 f)))) (mem
  (tuple2 (set1 a1) (set1 b1))
  (t2tb495
  (Tuple23 a2 (tb2t12 (apply (set1 b1) (set1 a1) (t2tb1285 f) (t2tb1 a2)))))
  (t2tb1285 f)))))

;; apply_def0
  (assert
  (forall ((f (set (tuple21 a b))) (s (set a)) (t (set b)) (a2 a))
  (=>
  (and (mem (set1 (tuple2 a1 b1)) (t2tb11 f)
  (infix_plmngt b1 a1 (t2tb1 s) (t2tb12 t))) (mem a1 (t2tb2 a2)
  (dom b1 a1 (t2tb11 f)))) (mem (tuple2 a1 b1)
  (t2tb13 (Tuple21 a2 (tb2t14 (apply b1 a1 (t2tb11 f) (t2tb2 a2)))))
  (t2tb11 f)))))

;; apply_def0
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((f uni) (s uni) (t uni) (a3 uni))
  (=>
  (and (mem (set1 (tuple2 a2 b2)) f (infix_plmngt b2 a2 s t)) (mem a2 a3
  (dom b2 a2 f))) (mem (tuple2 a2 b2) (Tuple2 a2 b2 a3 (apply b2 a2 f a3))
  f)))))

(assert
;; monot_proj_1
 ;; File "lemmes_bbook.why", line 856, characters 7-19
  (not
  (forall ((s (set a)) (u (set a)) (t (set b)) (v (set b)))
  (=> (and (subset2 u s) (subset5 v t)) (subset15 (prj11 (Tuple23 u v))
  (prj11 (Tuple23 s t)))))))
(check-sat)
