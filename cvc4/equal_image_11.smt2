(set-logic AUFBVDTLIRA)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
(declare-sort uni 0)

(declare-sort ty 0)

(declare-fun sort (ty uni) Bool)

(declare-fun witness (ty) uni)

;; witness_sort
  (assert (forall ((a2 ty)) (sort a2 (witness a2))))

(declare-fun int () ty)

(declare-fun real () ty)

(declare-sort set 1)

(declare-fun set1 (ty) ty)

(declare-sort c 0)

(declare-fun c1 () ty)

(declare-sort b 0)

(declare-fun b1 () ty)

(declare-sort a 0)

(declare-fun a1 () ty)

(declare-sort tuple21 2)

(declare-fun tuple2 (ty ty) ty)

(declare-fun mem (ty uni uni) Bool)

(declare-fun mem1 (a (set a)) Bool)

(declare-fun mem12 ((tuple21 a a) (set (tuple21 a a))) Bool)

(declare-fun mem2 (b (set b)) Bool)

(declare-fun mem3 ((tuple21 a b) (set (tuple21 a b))) Bool)

(declare-fun mem4 ((set (tuple21 a b)) (set (set (tuple21 a b)))) Bool)

(declare-fun mem7 (c (set c)) Bool)

(declare-fun mem8 ((tuple21 b c) (set (tuple21 b c))) Bool)

(declare-fun mem9 ((set (tuple21 b c)) (set (set (tuple21 b c)))) Bool)

(declare-fun mem10 ((tuple21 a c) (set (tuple21 a c))) Bool)

(declare-fun mem51 ((tuple21 (tuple21 a b) (tuple21 a c))
  (set (tuple21 (tuple21 a b) (tuple21 a c)))) Bool)

(declare-fun infix_eqeq (ty uni uni) Bool)

(declare-fun infix_eqeq1 ((set a) (set a)) Bool)

(declare-fun infix_eqeq2 ((set (tuple21 a a)) (set (tuple21 a a))) Bool)

(declare-fun infix_eqeq3 ((set b) (set b)) Bool)

(declare-fun infix_eqeq4 ((set (tuple21 a b)) (set (tuple21 a b))) Bool)

(declare-fun infix_eqeq5 ((set (set (tuple21 a b))) (set (set (tuple21 a
  b)))) Bool)

(declare-fun infix_eqeq7 ((set c) (set c)) Bool)

(declare-fun infix_eqeq8 ((set (tuple21 b c)) (set (tuple21 b c))) Bool)

(declare-fun infix_eqeq9 ((set (tuple21 a c)) (set (tuple21 a c))) Bool)

(declare-fun infix_eqeq10 ((set (set (tuple21 b c))) (set (set (tuple21 b
  c)))) Bool)

(declare-fun infix_eqeq44 ((set (tuple21 (tuple21 a b) (tuple21 a c)))
  (set (tuple21 (tuple21 a b) (tuple21 a c)))) Bool)

;; infix ==_def
  (assert
  (forall ((s (set (tuple21 (tuple21 a b) (tuple21 a c))))
  (t (set (tuple21 (tuple21 a b) (tuple21 a c)))))
  (= (infix_eqeq44 s t)
  (forall ((x (tuple21 (tuple21 a b) (tuple21 a c))))
  (= (mem51 x s) (mem51 x t))))))

;; infix ==_def
  (assert
  (forall ((s (set (tuple21 a c))) (t (set (tuple21 a c))))
  (= (infix_eqeq9 s t)
  (forall ((x (tuple21 a c))) (= (mem10 x s) (mem10 x t))))))

;; infix ==_def
  (assert
  (forall ((s (set (set (tuple21 b c)))) (t (set (set (tuple21 b c)))))
  (= (infix_eqeq10 s t)
  (forall ((x (set (tuple21 b c)))) (= (mem9 x s) (mem9 x t))))))

;; infix ==_def
  (assert
  (forall ((s (set (tuple21 b c))) (t (set (tuple21 b c))))
  (= (infix_eqeq8 s t)
  (forall ((x (tuple21 b c))) (= (mem8 x s) (mem8 x t))))))

;; infix ==_def
  (assert
  (forall ((s (set c)) (t (set c)))
  (= (infix_eqeq7 s t) (forall ((x c)) (= (mem7 x s) (mem7 x t))))))

;; infix ==_def
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set (set (tuple21 a b)))))
  (= (infix_eqeq5 s t)
  (forall ((x (set (tuple21 a b)))) (= (mem4 x s) (mem4 x t))))))

;; infix ==_def
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (tuple21 a b))))
  (= (infix_eqeq4 s t)
  (forall ((x (tuple21 a b))) (= (mem3 x s) (mem3 x t))))))

;; infix ==_def
  (assert
  (forall ((s (set b)) (t (set b)))
  (= (infix_eqeq3 s t) (forall ((x b)) (= (mem2 x s) (mem2 x t))))))

;; infix ==_def
  (assert
  (forall ((s (set (tuple21 a a))) (t (set (tuple21 a a))))
  (= (infix_eqeq2 s t)
  (forall ((x (tuple21 a a))) (= (mem12 x s) (mem12 x t))))))

;; infix ==_def
  (assert
  (forall ((s (set a)) (t (set a)))
  (= (infix_eqeq1 s t) (forall ((x a)) (= (mem1 x s) (mem1 x t))))))

;; infix ==_def
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t uni))
  (and
  (=> (infix_eqeq a2 s t) (forall ((x uni)) (= (mem a2 x s) (mem a2 x t))))
  (=> (forall ((x uni)) (=> (sort a2 x) (= (mem a2 x s) (mem a2 x t))))
  (infix_eqeq a2 s t))))))

(declare-fun power (ty uni) uni)

;; power_sort
  (assert
  (forall ((a2 ty)) (forall ((x uni)) (sort (set1 (set1 a2)) (power a2 x)))))

(declare-fun non_empty_power (ty uni) uni)

;; non_empty_power_sort
  (assert
  (forall ((a2 ty))
  (forall ((x uni)) (sort (set1 (set1 a2)) (non_empty_power a2 x)))))

(declare-fun subset1 (ty uni uni) Bool)

(declare-fun t2tb130 ((set (set (tuple21 b c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 b c))))) (sort (set1 (set1 (tuple2 b1 c1)))
  (t2tb130 x))))

(declare-fun tb2t130 (uni) (set (set (tuple21 b c))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 b c)))))
  (! (= (tb2t130 (t2tb130 i)) i) :pattern ((t2tb130 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 b1 c1))) j) (= (t2tb130 (tb2t130 j)) j)) :pattern (
  (t2tb130 (tb2t130 j))) )))

(declare-fun t2tb131 ((set (tuple21 b c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 b c)))) (sort (set1 (tuple2 b1 c1)) (t2tb131 x))))

(declare-fun tb2t131 (uni) (set (tuple21 b c)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 b c))))
  (! (= (tb2t131 (t2tb131 i)) i) :pattern ((t2tb131 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 b1 c1)) j) (= (t2tb131 (tb2t131 j)) j)) :pattern (
  (t2tb131 (tb2t131 j))) )))

;; subset_def
  (assert
  (forall ((s (set (tuple21 b c))) (t (set (tuple21 b c))))
  (= (subset1 (tuple2 b1 c1) (t2tb131 s) (t2tb131 t)) (mem9 s
  (tb2t130 (power (tuple2 b1 c1) (t2tb131 t)))))))

(declare-fun t2tb10 ((set (set (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 a b))))) (sort (set1 (set1 (tuple2 a1 b1)))
  (t2tb10 x))))

(declare-fun tb2t10 (uni) (set (set (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 a b)))))
  (! (= (tb2t10 (t2tb10 i)) i) :pattern ((t2tb10 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 a1 b1))) j) (= (t2tb10 (tb2t10 j)) j)) :pattern (
  (t2tb10 (tb2t10 j))) )))

(declare-fun t2tb11 ((set (tuple21 a b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a b)))) (sort (set1 (tuple2 a1 b1)) (t2tb11 x))))

(declare-fun tb2t11 (uni) (set (tuple21 a b)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a b))))
  (! (= (tb2t11 (t2tb11 i)) i) :pattern ((t2tb11 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 b1)) j) (= (t2tb11 (tb2t11 j)) j)) :pattern (
  (t2tb11 (tb2t11 j))) )))

;; subset_def
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (tuple21 a b))))
  (= (subset1 (tuple2 a1 b1) (t2tb11 s) (t2tb11 t)) (mem4 s
  (tb2t10 (power (tuple2 a1 b1) (t2tb11 t)))))))

;; subset_def
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t uni))
  (= (subset1 a2 s t) (mem (set1 a2) s (power a2 t))))))

(declare-fun subsetnoteq (ty uni uni) Bool)

(declare-fun t2tb238 ((set (tuple21 (tuple21 a b) (tuple21 a c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) (tuple21 a c))))) (sort
  (set1 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1))) (t2tb238 x))))

(declare-fun tb2t238 (uni) (set (tuple21 (tuple21 a b) (tuple21 a c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a b) (tuple21 a c)))))
  (! (= (tb2t238 (t2tb238 i)) i) :pattern ((t2tb238 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1))) j)
     (= (t2tb238 (tb2t238 j)) j)) :pattern ((t2tb238 (tb2t238 j))) )))

;; subsetnoteq_def
  (assert
  (forall ((s (set (tuple21 (tuple21 a b) (tuple21 a c))))
  (t (set (tuple21 (tuple21 a b) (tuple21 a c)))))
  (= (subsetnoteq (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) (t2tb238 s)
  (t2tb238 t))
  (and (subset1 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) (t2tb238 s)
  (t2tb238 t)) (not (infix_eqeq44 s t))))))

(declare-fun t2tb129 ((set (tuple21 a c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a c)))) (sort (set1 (tuple2 a1 c1)) (t2tb129 x))))

(declare-fun tb2t129 (uni) (set (tuple21 a c)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a c))))
  (! (= (tb2t129 (t2tb129 i)) i) :pattern ((t2tb129 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 c1)) j) (= (t2tb129 (tb2t129 j)) j)) :pattern (
  (t2tb129 (tb2t129 j))) )))

;; subsetnoteq_def
  (assert
  (forall ((s (set (tuple21 a c))) (t (set (tuple21 a c))))
  (= (subsetnoteq (tuple2 a1 c1) (t2tb129 s) (t2tb129 t))
  (and (subset1 (tuple2 a1 c1) (t2tb129 s) (t2tb129 t))
  (not (infix_eqeq9 s t))))))

;; subsetnoteq_def
  (assert
  (forall ((s (set (set (tuple21 b c)))) (t (set (set (tuple21 b c)))))
  (= (subsetnoteq (set1 (tuple2 b1 c1)) (t2tb130 s) (t2tb130 t))
  (and (subset1 (set1 (tuple2 b1 c1)) (t2tb130 s) (t2tb130 t))
  (not (infix_eqeq10 s t))))))

;; subsetnoteq_def
  (assert
  (forall ((s (set (tuple21 b c))) (t (set (tuple21 b c))))
  (= (subsetnoteq (tuple2 b1 c1) (t2tb131 s) (t2tb131 t))
  (and (subset1 (tuple2 b1 c1) (t2tb131 s) (t2tb131 t))
  (not (infix_eqeq8 s t))))))

(declare-fun t2tb132 ((set c)) uni)

;; t2tb_sort
  (assert (forall ((x (set c))) (sort (set1 c1) (t2tb132 x))))

(declare-fun tb2t132 (uni) (set c))

;; BridgeL
  (assert
  (forall ((i (set c)))
  (! (= (tb2t132 (t2tb132 i)) i) :pattern ((t2tb132 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 c1) j) (= (t2tb132 (tb2t132 j)) j)) :pattern ((t2tb132
                                                                   (tb2t132
                                                                   j))) )))

;; subsetnoteq_def
  (assert
  (forall ((s (set c)) (t (set c)))
  (= (subsetnoteq c1 (t2tb132 s) (t2tb132 t))
  (and (subset1 c1 (t2tb132 s) (t2tb132 t)) (not (infix_eqeq7 s t))))))

;; subsetnoteq_def
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set (set (tuple21 a b)))))
  (= (subsetnoteq (set1 (tuple2 a1 b1)) (t2tb10 s) (t2tb10 t))
  (and (subset1 (set1 (tuple2 a1 b1)) (t2tb10 s) (t2tb10 t))
  (not (infix_eqeq5 s t))))))

;; subsetnoteq_def
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (tuple21 a b))))
  (= (subsetnoteq (tuple2 a1 b1) (t2tb11 s) (t2tb11 t))
  (and (subset1 (tuple2 a1 b1) (t2tb11 s) (t2tb11 t))
  (not (infix_eqeq4 s t))))))

(declare-fun t2tb12 ((set b)) uni)

;; t2tb_sort
  (assert (forall ((x (set b))) (sort (set1 b1) (t2tb12 x))))

(declare-fun tb2t12 (uni) (set b))

;; BridgeL
  (assert
  (forall ((i (set b))) (! (= (tb2t12 (t2tb12 i)) i) :pattern ((t2tb12 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 b1) j) (= (t2tb12 (tb2t12 j)) j)) :pattern ((t2tb12
                                                                 (tb2t12 j))) )))

;; subsetnoteq_def
  (assert
  (forall ((s (set b)) (t (set b)))
  (= (subsetnoteq b1 (t2tb12 s) (t2tb12 t))
  (and (subset1 b1 (t2tb12 s) (t2tb12 t)) (not (infix_eqeq3 s t))))))

(declare-fun t2tb4 ((set (tuple21 a a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a a)))) (sort (set1 (tuple2 a1 a1)) (t2tb4 x))))

(declare-fun tb2t4 (uni) (set (tuple21 a a)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a a))))
  (! (= (tb2t4 (t2tb4 i)) i) :pattern ((t2tb4 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 a1)) j) (= (t2tb4 (tb2t4 j)) j)) :pattern (
  (t2tb4 (tb2t4 j))) )))

;; subsetnoteq_def
  (assert
  (forall ((s (set (tuple21 a a))) (t (set (tuple21 a a))))
  (= (subsetnoteq (tuple2 a1 a1) (t2tb4 s) (t2tb4 t))
  (and (subset1 (tuple2 a1 a1) (t2tb4 s) (t2tb4 t)) (not (infix_eqeq2 s t))))))

(declare-fun t2tb1 ((set a)) uni)

;; t2tb_sort
  (assert (forall ((x (set a))) (sort (set1 a1) (t2tb1 x))))

(declare-fun tb2t1 (uni) (set a))

;; BridgeL
  (assert
  (forall ((i (set a))) (! (= (tb2t1 (t2tb1 i)) i) :pattern ((t2tb1 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 a1) j) (= (t2tb1 (tb2t1 j)) j)) :pattern ((t2tb1
                                                               (tb2t1 j))) )))

;; subsetnoteq_def
  (assert
  (forall ((s (set a)) (t (set a)))
  (= (subsetnoteq a1 (t2tb1 s) (t2tb1 t))
  (and (subset1 a1 (t2tb1 s) (t2tb1 t)) (not (infix_eqeq1 s t))))))

;; subsetnoteq_def
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t uni))
  (= (subsetnoteq a2 s t) (and (subset1 a2 s t) (not (infix_eqeq a2 s t)))))))

(declare-fun empty (ty) uni)

;; empty_sort
  (assert (forall ((a2 ty)) (sort (set1 a2) (empty a2))))

(declare-fun is_empty (ty uni) Bool)

;; is_empty_def
  (assert
  (forall ((s (set (tuple21 (tuple21 a b) (tuple21 a c)))))
  (= (is_empty (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) (t2tb238 s))
  (forall ((x (tuple21 (tuple21 a b) (tuple21 a c)))) (not (mem51 x s))))))

;; is_empty_def
  (assert
  (forall ((s (set (tuple21 a c))))
  (= (is_empty (tuple2 a1 c1) (t2tb129 s))
  (forall ((x (tuple21 a c))) (not (mem10 x s))))))

;; is_empty_def
  (assert
  (forall ((s (set (set (tuple21 b c)))))
  (= (is_empty (set1 (tuple2 b1 c1)) (t2tb130 s))
  (forall ((x (set (tuple21 b c)))) (not (mem9 x s))))))

;; is_empty_def
  (assert
  (forall ((s (set (tuple21 b c))))
  (= (is_empty (tuple2 b1 c1) (t2tb131 s))
  (forall ((x (tuple21 b c))) (not (mem8 x s))))))

;; is_empty_def
  (assert
  (forall ((s (set c)))
  (= (is_empty c1 (t2tb132 s)) (forall ((x c)) (not (mem7 x s))))))

;; is_empty_def
  (assert
  (forall ((s (set (set (tuple21 a b)))))
  (= (is_empty (set1 (tuple2 a1 b1)) (t2tb10 s))
  (forall ((x (set (tuple21 a b)))) (not (mem4 x s))))))

;; is_empty_def
  (assert
  (forall ((s (set (tuple21 a b))))
  (= (is_empty (tuple2 a1 b1) (t2tb11 s))
  (forall ((x (tuple21 a b))) (not (mem3 x s))))))

;; is_empty_def
  (assert
  (forall ((s (set b)))
  (= (is_empty b1 (t2tb12 s)) (forall ((x b)) (not (mem2 x s))))))

;; is_empty_def
  (assert
  (forall ((s (set (tuple21 a a))))
  (= (is_empty (tuple2 a1 a1) (t2tb4 s))
  (forall ((x (tuple21 a a))) (not (mem12 x s))))))

;; is_empty_def
  (assert
  (forall ((s (set a)))
  (= (is_empty a1 (t2tb1 s)) (forall ((x a)) (not (mem1 x s))))))

;; is_empty_def
  (assert
  (forall ((a2 ty))
  (forall ((s uni))
  (and (=> (is_empty a2 s) (forall ((x uni)) (not (mem a2 x s))))
  (=> (forall ((x uni)) (=> (sort a2 x) (not (mem a2 x s)))) (is_empty a2 s))))))

;; empty_def1
  (assert (forall ((a2 ty)) (is_empty a2 (empty a2))))

;; empty
  (assert
  (forall ((x (tuple21 (tuple21 a b) (tuple21 a c))))
  (not (mem51 x (tb2t238 (empty (tuple2 (tuple2 a1 b1) (tuple2 a1 c1))))))))

;; empty
  (assert
  (forall ((x (tuple21 a c)))
  (not (mem10 x (tb2t129 (empty (tuple2 a1 c1)))))))

;; empty
  (assert
  (forall ((x (set (tuple21 b c))))
  (not (mem9 x (tb2t130 (empty (set1 (tuple2 b1 c1))))))))

;; empty
  (assert
  (forall ((x (tuple21 b c)))
  (not (mem8 x (tb2t131 (empty (tuple2 b1 c1)))))))

;; empty
  (assert (forall ((x c)) (not (mem7 x (tb2t132 (empty c1))))))

;; empty
  (assert
  (forall ((x (set (tuple21 a b))))
  (not (mem4 x (tb2t10 (empty (set1 (tuple2 a1 b1))))))))

;; empty
  (assert
  (forall ((x (tuple21 a b))) (not (mem3 x (tb2t11 (empty (tuple2 a1 b1)))))))

;; empty
  (assert (forall ((x b)) (not (mem2 x (tb2t12 (empty b1))))))

;; empty
  (assert
  (forall ((x (tuple21 a a))) (not (mem12 x (tb2t4 (empty (tuple2 a1 a1)))))))

;; empty
  (assert (forall ((x a)) (not (mem1 x (tb2t1 (empty a1))))))

;; empty
  (assert (forall ((a2 ty)) (forall ((x uni)) (not (mem a2 x (empty a2))))))

(declare-fun add (ty uni uni) uni)

;; add_sort
  (assert
  (forall ((a2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 a2) (add a2 x x1)))))

(declare-fun t2tb239 ((tuple21 (tuple21 a b) (tuple21 a c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a b) (tuple21 a c)))) (sort
  (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) (t2tb239 x))))

(declare-fun tb2t239 (uni) (tuple21 (tuple21 a b) (tuple21 a c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a b) (tuple21 a c))))
  (! (= (tb2t239 (t2tb239 i)) i) :pattern ((t2tb239 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) j)
     (= (t2tb239 (tb2t239 j)) j)) :pattern ((t2tb239 (tb2t239 j))) )))

;; add_def1
  (assert
  (forall ((x (tuple21 (tuple21 a b) (tuple21 a c))) (y (tuple21 (tuple21 a
  b) (tuple21 a c))))
  (forall ((s (set (tuple21 (tuple21 a b) (tuple21 a c)))))
  (= (mem51 x
  (tb2t238
  (add (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) (t2tb239 y) (t2tb238 s))))
  (or (= x y) (mem51 x s))))))

(declare-fun t2tb133 ((tuple21 a c)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 a c))) (sort (tuple2 a1 c1) (t2tb133 x))))

(declare-fun tb2t133 (uni) (tuple21 a c))

;; BridgeL
  (assert
  (forall ((i (tuple21 a c)))
  (! (= (tb2t133 (t2tb133 i)) i) :pattern ((t2tb133 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 c1) j) (= (t2tb133 (tb2t133 j)) j)) :pattern (
  (t2tb133 (tb2t133 j))) )))

;; add_def1
  (assert
  (forall ((x (tuple21 a c)) (y (tuple21 a c)))
  (forall ((s (set (tuple21 a c))))
  (= (mem10 x (tb2t129 (add (tuple2 a1 c1) (t2tb133 y) (t2tb129 s))))
  (or (= x y) (mem10 x s))))))

;; add_def1
  (assert
  (forall ((x (set (tuple21 b c))) (y (set (tuple21 b c))))
  (forall ((s (set (set (tuple21 b c)))))
  (= (mem9 x (tb2t130 (add (set1 (tuple2 b1 c1)) (t2tb131 y) (t2tb130 s))))
  (or (= x y) (mem9 x s))))))

(declare-fun t2tb134 ((tuple21 b c)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 b c))) (sort (tuple2 b1 c1) (t2tb134 x))))

(declare-fun tb2t134 (uni) (tuple21 b c))

;; BridgeL
  (assert
  (forall ((i (tuple21 b c)))
  (! (= (tb2t134 (t2tb134 i)) i) :pattern ((t2tb134 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 b1 c1) j) (= (t2tb134 (tb2t134 j)) j)) :pattern (
  (t2tb134 (tb2t134 j))) )))

;; add_def1
  (assert
  (forall ((x (tuple21 b c)) (y (tuple21 b c)))
  (forall ((s (set (tuple21 b c))))
  (= (mem8 x (tb2t131 (add (tuple2 b1 c1) (t2tb134 y) (t2tb131 s))))
  (or (= x y) (mem8 x s))))))

(declare-fun t2tb135 (c) uni)

;; t2tb_sort
  (assert (forall ((x c)) (sort c1 (t2tb135 x))))

(declare-fun tb2t135 (uni) c)

;; BridgeL
  (assert
  (forall ((i c)) (! (= (tb2t135 (t2tb135 i)) i) :pattern ((t2tb135 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort c1 j) (= (t2tb135 (tb2t135 j)) j)) :pattern ((t2tb135
                                                            (tb2t135 j))) )))

;; add_def1
  (assert
  (forall ((x c) (y c))
  (forall ((s (set c)))
  (= (mem7 x (tb2t132 (add c1 (t2tb135 y) (t2tb132 s))))
  (or (= x y) (mem7 x s))))))

;; add_def1
  (assert
  (forall ((x (set (tuple21 a b))) (y (set (tuple21 a b))))
  (forall ((s (set (set (tuple21 a b)))))
  (= (mem4 x (tb2t10 (add (set1 (tuple2 a1 b1)) (t2tb11 y) (t2tb10 s))))
  (or (= x y) (mem4 x s))))))

(declare-fun t2tb13 ((tuple21 a b)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 a b))) (sort (tuple2 a1 b1) (t2tb13 x))))

(declare-fun tb2t13 (uni) (tuple21 a b))

;; BridgeL
  (assert
  (forall ((i (tuple21 a b)))
  (! (= (tb2t13 (t2tb13 i)) i) :pattern ((t2tb13 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 b1) j) (= (t2tb13 (tb2t13 j)) j)) :pattern (
  (t2tb13 (tb2t13 j))) )))

;; add_def1
  (assert
  (forall ((x (tuple21 a b)) (y (tuple21 a b)))
  (forall ((s (set (tuple21 a b))))
  (= (mem3 x (tb2t11 (add (tuple2 a1 b1) (t2tb13 y) (t2tb11 s))))
  (or (= x y) (mem3 x s))))))

(declare-fun t2tb14 (b) uni)

;; t2tb_sort
  (assert (forall ((x b)) (sort b1 (t2tb14 x))))

(declare-fun tb2t14 (uni) b)

;; BridgeL
  (assert
  (forall ((i b)) (! (= (tb2t14 (t2tb14 i)) i) :pattern ((t2tb14 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort b1 j) (= (t2tb14 (tb2t14 j)) j)) :pattern ((t2tb14 (tb2t14 j))) )))

;; add_def1
  (assert
  (forall ((x b) (y b))
  (forall ((s (set b)))
  (= (mem2 x (tb2t12 (add b1 (t2tb14 y) (t2tb12 s))))
  (or (= x y) (mem2 x s))))))

(declare-fun t2tb5 ((tuple21 a a)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 a a))) (sort (tuple2 a1 a1) (t2tb5 x))))

(declare-fun tb2t5 (uni) (tuple21 a a))

;; BridgeL
  (assert
  (forall ((i (tuple21 a a)))
  (! (= (tb2t5 (t2tb5 i)) i) :pattern ((t2tb5 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 a1) j) (= (t2tb5 (tb2t5 j)) j)) :pattern ((t2tb5
                                                                    (tb2t5 j))) )))

;; add_def1
  (assert
  (forall ((x (tuple21 a a)) (y (tuple21 a a)))
  (forall ((s (set (tuple21 a a))))
  (= (mem12 x (tb2t4 (add (tuple2 a1 a1) (t2tb5 y) (t2tb4 s))))
  (or (= x y) (mem12 x s))))))

(declare-fun t2tb2 (a) uni)

;; t2tb_sort
  (assert (forall ((x a)) (sort a1 (t2tb2 x))))

(declare-fun tb2t2 (uni) a)

;; BridgeL
  (assert (forall ((i a)) (! (= (tb2t2 (t2tb2 i)) i) :pattern ((t2tb2 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort a1 j) (= (t2tb2 (tb2t2 j)) j)) :pattern ((t2tb2 (tb2t2 j))) )))

;; add_def1
  (assert
  (forall ((x a) (y a))
  (forall ((s (set a)))
  (= (mem1 x (tb2t1 (add a1 (t2tb2 y) (t2tb1 s)))) (or (= x y) (mem1 x s))))))

;; add_def1
  (assert
  (forall ((a2 ty))
  (forall ((x uni) (y uni))
  (=> (sort a2 x)
  (=> (sort a2 y)
  (forall ((s uni)) (= (mem a2 x (add a2 y s)) (or (= x y) (mem a2 x s)))))))))

(declare-fun singleton (ty uni) uni)

;; singleton_sort
  (assert
  (forall ((a2 ty)) (forall ((x uni)) (sort (set1 a2) (singleton a2 x)))))

;; mem_singleton
  (assert
  (forall ((x (tuple21 (tuple21 a b) (tuple21 a c))) (y (tuple21 (tuple21 a
  b) (tuple21 a c))))
  (= (mem51 x
  (tb2t238 (singleton (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) (t2tb239 y))))
  (= x y))))

;; mem_singleton
  (assert
  (forall ((x (tuple21 a c)) (y (tuple21 a c)))
  (= (mem10 x (tb2t129 (singleton (tuple2 a1 c1) (t2tb133 y)))) (= x y))))

;; mem_singleton
  (assert
  (forall ((x (set (tuple21 b c))) (y (set (tuple21 b c))))
  (= (mem9 x (tb2t130 (singleton (set1 (tuple2 b1 c1)) (t2tb131 y))))
  (= x y))))

;; mem_singleton
  (assert
  (forall ((x (tuple21 b c)) (y (tuple21 b c)))
  (= (mem8 x (tb2t131 (singleton (tuple2 b1 c1) (t2tb134 y)))) (= x y))))

;; mem_singleton
  (assert
  (forall ((x c) (y c))
  (= (mem7 x (tb2t132 (singleton c1 (t2tb135 y)))) (= x y))))

;; mem_singleton
  (assert
  (forall ((x (set (tuple21 a b))) (y (set (tuple21 a b))))
  (= (mem4 x (tb2t10 (singleton (set1 (tuple2 a1 b1)) (t2tb11 y)))) (= x y))))

;; mem_singleton
  (assert
  (forall ((x (tuple21 a b)) (y (tuple21 a b)))
  (= (mem3 x (tb2t11 (singleton (tuple2 a1 b1) (t2tb13 y)))) (= x y))))

;; mem_singleton
  (assert
  (forall ((x b) (y b))
  (= (mem2 x (tb2t12 (singleton b1 (t2tb14 y)))) (= x y))))

;; mem_singleton
  (assert
  (forall ((x (tuple21 a a)) (y (tuple21 a a)))
  (= (mem12 x (tb2t4 (singleton (tuple2 a1 a1) (t2tb5 y)))) (= x y))))

;; mem_singleton
  (assert
  (forall ((x a) (y a))
  (= (mem1 x (tb2t1 (singleton a1 (t2tb2 y)))) (= x y))))

;; mem_singleton
  (assert
  (forall ((a2 ty))
  (forall ((x uni) (y uni))
  (=> (sort a2 x) (=> (sort a2 y) (= (mem a2 x (singleton a2 y)) (= x y)))))))

(declare-fun remove (ty uni uni) uni)

;; remove_sort
  (assert
  (forall ((a2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 a2) (remove a2 x x1)))))

;; remove_def1
  (assert
  (forall ((x (tuple21 (tuple21 a b) (tuple21 a c))) (y (tuple21 (tuple21 a
  b) (tuple21 a c))) (s (set (tuple21 (tuple21 a b) (tuple21 a c)))))
  (= (mem51 x
  (tb2t238
  (remove (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) (t2tb239 y) (t2tb238 s))))
  (and (not (= x y)) (mem51 x s)))))

;; remove_def1
  (assert
  (forall ((x (tuple21 a c)) (y (tuple21 a c)) (s (set (tuple21 a c))))
  (= (mem10 x (tb2t129 (remove (tuple2 a1 c1) (t2tb133 y) (t2tb129 s))))
  (and (not (= x y)) (mem10 x s)))))

;; remove_def1
  (assert
  (forall ((x (set (tuple21 b c))) (y (set (tuple21 b c)))
  (s (set (set (tuple21 b c)))))
  (= (mem9 x
  (tb2t130 (remove (set1 (tuple2 b1 c1)) (t2tb131 y) (t2tb130 s))))
  (and (not (= x y)) (mem9 x s)))))

;; remove_def1
  (assert
  (forall ((x (tuple21 b c)) (y (tuple21 b c)) (s (set (tuple21 b c))))
  (= (mem8 x (tb2t131 (remove (tuple2 b1 c1) (t2tb134 y) (t2tb131 s))))
  (and (not (= x y)) (mem8 x s)))))

;; remove_def1
  (assert
  (forall ((x c) (y c) (s (set c)))
  (= (mem7 x (tb2t132 (remove c1 (t2tb135 y) (t2tb132 s))))
  (and (not (= x y)) (mem7 x s)))))

;; remove_def1
  (assert
  (forall ((x (set (tuple21 a b))) (y (set (tuple21 a b)))
  (s (set (set (tuple21 a b)))))
  (= (mem4 x (tb2t10 (remove (set1 (tuple2 a1 b1)) (t2tb11 y) (t2tb10 s))))
  (and (not (= x y)) (mem4 x s)))))

;; remove_def1
  (assert
  (forall ((x (tuple21 a b)) (y (tuple21 a b)) (s (set (tuple21 a b))))
  (= (mem3 x (tb2t11 (remove (tuple2 a1 b1) (t2tb13 y) (t2tb11 s))))
  (and (not (= x y)) (mem3 x s)))))

;; remove_def1
  (assert
  (forall ((x b) (y b) (s (set b)))
  (= (mem2 x (tb2t12 (remove b1 (t2tb14 y) (t2tb12 s))))
  (and (not (= x y)) (mem2 x s)))))

;; remove_def1
  (assert
  (forall ((x (tuple21 a a)) (y (tuple21 a a)) (s (set (tuple21 a a))))
  (= (mem12 x (tb2t4 (remove (tuple2 a1 a1) (t2tb5 y) (t2tb4 s))))
  (and (not (= x y)) (mem12 x s)))))

;; remove_def1
  (assert
  (forall ((x a) (y a) (s (set a)))
  (= (mem1 x (tb2t1 (remove a1 (t2tb2 y) (t2tb1 s))))
  (and (not (= x y)) (mem1 x s)))))

;; remove_def1
  (assert
  (forall ((a2 ty))
  (forall ((x uni) (y uni) (s uni))
  (=> (sort a2 x)
  (=> (sort a2 y)
  (= (mem a2 x (remove a2 y s)) (and (not (= x y)) (mem a2 x s))))))))

(declare-fun all (ty) uni)

;; all_sort
  (assert (forall ((a2 ty)) (sort (set1 a2) (all a2))))

;; all_def
  (assert
  (forall ((x (tuple21 (tuple21 a b) (tuple21 a c)))) (mem51 x
  (tb2t238 (all (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)))))))

;; all_def
  (assert
  (forall ((x (tuple21 a c))) (mem10 x (tb2t129 (all (tuple2 a1 c1))))))

;; all_def
  (assert
  (forall ((x (set (tuple21 b c)))) (mem9 x
  (tb2t130 (all (set1 (tuple2 b1 c1)))))))

;; all_def
  (assert
  (forall ((x (tuple21 b c))) (mem8 x (tb2t131 (all (tuple2 b1 c1))))))

;; all_def
  (assert (forall ((x c)) (mem7 x (tb2t132 (all c1)))))

;; all_def
  (assert
  (forall ((x (set (tuple21 a b)))) (mem4 x
  (tb2t10 (all (set1 (tuple2 a1 b1)))))))

;; all_def
  (assert
  (forall ((x (tuple21 a b))) (mem3 x (tb2t11 (all (tuple2 a1 b1))))))

;; all_def
  (assert (forall ((x b)) (mem2 x (tb2t12 (all b1)))))

;; all_def
  (assert
  (forall ((x (tuple21 a a))) (mem12 x (tb2t4 (all (tuple2 a1 a1))))))

;; all_def
  (assert (forall ((x a)) (mem1 x (tb2t1 (all a1)))))

;; all_def
  (assert (forall ((a2 ty)) (forall ((x uni)) (mem a2 x (all a2)))))

(declare-fun union1 (ty uni uni) uni)

;; union_sort
  (assert
  (forall ((a2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 a2) (union1 a2 x x1)))))

;; mem_union
  (assert
  (forall ((s (set (tuple21 (tuple21 a b) (tuple21 a c))))
  (t (set (tuple21 (tuple21 a b) (tuple21 a c)))) (x (tuple21 (tuple21 a b)
  (tuple21 a c))))
  (= (mem51 x
  (tb2t238
  (union1 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) (t2tb238 s) (t2tb238 t))))
  (or (mem51 x s) (mem51 x t)))))

;; mem_union
  (assert
  (forall ((s (set (tuple21 a c))) (t (set (tuple21 a c))) (x (tuple21 a c)))
  (= (mem10 x (tb2t129 (union1 (tuple2 a1 c1) (t2tb129 s) (t2tb129 t))))
  (or (mem10 x s) (mem10 x t)))))

;; mem_union
  (assert
  (forall ((s (set (set (tuple21 b c)))) (t (set (set (tuple21 b c))))
  (x (set (tuple21 b c))))
  (= (mem9 x
  (tb2t130 (union1 (set1 (tuple2 b1 c1)) (t2tb130 s) (t2tb130 t))))
  (or (mem9 x s) (mem9 x t)))))

;; mem_union
  (assert
  (forall ((s (set (tuple21 b c))) (t (set (tuple21 b c))) (x (tuple21 b c)))
  (= (mem8 x (tb2t131 (union1 (tuple2 b1 c1) (t2tb131 s) (t2tb131 t))))
  (or (mem8 x s) (mem8 x t)))))

;; mem_union
  (assert
  (forall ((s (set c)) (t (set c)) (x c))
  (= (mem7 x (tb2t132 (union1 c1 (t2tb132 s) (t2tb132 t))))
  (or (mem7 x s) (mem7 x t)))))

;; mem_union
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set (set (tuple21 a b))))
  (x (set (tuple21 a b))))
  (= (mem4 x (tb2t10 (union1 (set1 (tuple2 a1 b1)) (t2tb10 s) (t2tb10 t))))
  (or (mem4 x s) (mem4 x t)))))

;; mem_union
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (tuple21 a b))) (x (tuple21 a b)))
  (= (mem3 x (tb2t11 (union1 (tuple2 a1 b1) (t2tb11 s) (t2tb11 t))))
  (or (mem3 x s) (mem3 x t)))))

;; mem_union
  (assert
  (forall ((s (set b)) (t (set b)) (x b))
  (= (mem2 x (tb2t12 (union1 b1 (t2tb12 s) (t2tb12 t))))
  (or (mem2 x s) (mem2 x t)))))

;; mem_union
  (assert
  (forall ((s (set (tuple21 a a))) (t (set (tuple21 a a))) (x (tuple21 a a)))
  (= (mem12 x (tb2t4 (union1 (tuple2 a1 a1) (t2tb4 s) (t2tb4 t))))
  (or (mem12 x s) (mem12 x t)))))

;; mem_union
  (assert
  (forall ((s (set a)) (t (set a)) (x a))
  (= (mem1 x (tb2t1 (union1 a1 (t2tb1 s) (t2tb1 t))))
  (or (mem1 x s) (mem1 x t)))))

;; mem_union
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t uni) (x uni))
  (= (mem a2 x (union1 a2 s t)) (or (mem a2 x s) (mem a2 x t))))))

(declare-fun inter (ty uni uni) uni)

;; inter_sort
  (assert
  (forall ((a2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 a2) (inter a2 x x1)))))

;; mem_inter
  (assert
  (forall ((s (set (tuple21 (tuple21 a b) (tuple21 a c))))
  (t (set (tuple21 (tuple21 a b) (tuple21 a c)))) (x (tuple21 (tuple21 a b)
  (tuple21 a c))))
  (= (mem51 x
  (tb2t238
  (inter (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) (t2tb238 s) (t2tb238 t))))
  (and (mem51 x s) (mem51 x t)))))

;; mem_inter
  (assert
  (forall ((s (set (tuple21 a c))) (t (set (tuple21 a c))) (x (tuple21 a c)))
  (= (mem10 x (tb2t129 (inter (tuple2 a1 c1) (t2tb129 s) (t2tb129 t))))
  (and (mem10 x s) (mem10 x t)))))

;; mem_inter
  (assert
  (forall ((s (set (set (tuple21 b c)))) (t (set (set (tuple21 b c))))
  (x (set (tuple21 b c))))
  (= (mem9 x (tb2t130 (inter (set1 (tuple2 b1 c1)) (t2tb130 s) (t2tb130 t))))
  (and (mem9 x s) (mem9 x t)))))

;; mem_inter
  (assert
  (forall ((s (set (tuple21 b c))) (t (set (tuple21 b c))) (x (tuple21 b c)))
  (= (mem8 x (tb2t131 (inter (tuple2 b1 c1) (t2tb131 s) (t2tb131 t))))
  (and (mem8 x s) (mem8 x t)))))

;; mem_inter
  (assert
  (forall ((s (set c)) (t (set c)) (x c))
  (= (mem7 x (tb2t132 (inter c1 (t2tb132 s) (t2tb132 t))))
  (and (mem7 x s) (mem7 x t)))))

;; mem_inter
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set (set (tuple21 a b))))
  (x (set (tuple21 a b))))
  (= (mem4 x (tb2t10 (inter (set1 (tuple2 a1 b1)) (t2tb10 s) (t2tb10 t))))
  (and (mem4 x s) (mem4 x t)))))

;; mem_inter
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (tuple21 a b))) (x (tuple21 a b)))
  (= (mem3 x (tb2t11 (inter (tuple2 a1 b1) (t2tb11 s) (t2tb11 t))))
  (and (mem3 x s) (mem3 x t)))))

;; mem_inter
  (assert
  (forall ((s (set b)) (t (set b)) (x b))
  (= (mem2 x (tb2t12 (inter b1 (t2tb12 s) (t2tb12 t))))
  (and (mem2 x s) (mem2 x t)))))

;; mem_inter
  (assert
  (forall ((s (set (tuple21 a a))) (t (set (tuple21 a a))) (x (tuple21 a a)))
  (= (mem12 x (tb2t4 (inter (tuple2 a1 a1) (t2tb4 s) (t2tb4 t))))
  (and (mem12 x s) (mem12 x t)))))

;; mem_inter
  (assert
  (forall ((s (set a)) (t (set a)) (x a))
  (= (mem1 x (tb2t1 (inter a1 (t2tb1 s) (t2tb1 t))))
  (and (mem1 x s) (mem1 x t)))))

;; mem_inter
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t uni) (x uni))
  (= (mem a2 x (inter a2 s t)) (and (mem a2 x s) (mem a2 x t))))))

(declare-fun diff (ty uni uni) uni)

;; diff_sort
  (assert
  (forall ((a2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 a2) (diff a2 x x1)))))

;; mem_diff
  (assert
  (forall ((s (set (tuple21 (tuple21 a b) (tuple21 a c))))
  (t (set (tuple21 (tuple21 a b) (tuple21 a c)))) (x (tuple21 (tuple21 a b)
  (tuple21 a c))))
  (= (mem51 x
  (tb2t238
  (diff (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) (t2tb238 s) (t2tb238 t))))
  (and (mem51 x s) (not (mem51 x t))))))

;; mem_diff
  (assert
  (forall ((s (set (tuple21 a c))) (t (set (tuple21 a c))) (x (tuple21 a c)))
  (= (mem10 x (tb2t129 (diff (tuple2 a1 c1) (t2tb129 s) (t2tb129 t))))
  (and (mem10 x s) (not (mem10 x t))))))

;; mem_diff
  (assert
  (forall ((s (set (set (tuple21 b c)))) (t (set (set (tuple21 b c))))
  (x (set (tuple21 b c))))
  (= (mem9 x (tb2t130 (diff (set1 (tuple2 b1 c1)) (t2tb130 s) (t2tb130 t))))
  (and (mem9 x s) (not (mem9 x t))))))

;; mem_diff
  (assert
  (forall ((s (set (tuple21 b c))) (t (set (tuple21 b c))) (x (tuple21 b c)))
  (= (mem8 x (tb2t131 (diff (tuple2 b1 c1) (t2tb131 s) (t2tb131 t))))
  (and (mem8 x s) (not (mem8 x t))))))

;; mem_diff
  (assert
  (forall ((s (set c)) (t (set c)) (x c))
  (= (mem7 x (tb2t132 (diff c1 (t2tb132 s) (t2tb132 t))))
  (and (mem7 x s) (not (mem7 x t))))))

;; mem_diff
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set (set (tuple21 a b))))
  (x (set (tuple21 a b))))
  (= (mem4 x (tb2t10 (diff (set1 (tuple2 a1 b1)) (t2tb10 s) (t2tb10 t))))
  (and (mem4 x s) (not (mem4 x t))))))

;; mem_diff
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (tuple21 a b))) (x (tuple21 a b)))
  (= (mem3 x (tb2t11 (diff (tuple2 a1 b1) (t2tb11 s) (t2tb11 t))))
  (and (mem3 x s) (not (mem3 x t))))))

;; mem_diff
  (assert
  (forall ((s (set b)) (t (set b)) (x b))
  (= (mem2 x (tb2t12 (diff b1 (t2tb12 s) (t2tb12 t))))
  (and (mem2 x s) (not (mem2 x t))))))

;; mem_diff
  (assert
  (forall ((s (set (tuple21 a a))) (t (set (tuple21 a a))) (x (tuple21 a a)))
  (= (mem12 x (tb2t4 (diff (tuple2 a1 a1) (t2tb4 s) (t2tb4 t))))
  (and (mem12 x s) (not (mem12 x t))))))

;; mem_diff
  (assert
  (forall ((s (set a)) (t (set a)) (x a))
  (= (mem1 x (tb2t1 (diff a1 (t2tb1 s) (t2tb1 t))))
  (and (mem1 x s) (not (mem1 x t))))))

;; mem_diff
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t uni) (x uni))
  (= (mem a2 x (diff a2 s t)) (and (mem a2 x s) (not (mem a2 x t)))))))

(declare-fun Tuple2 (ty ty uni uni) uni)

;; Tuple2_sort
  (assert
  (forall ((a2 ty) (a3 ty))
  (forall ((x uni) (x1 uni)) (sort (tuple2 a3 a2) (Tuple2 a3 a2 x x1)))))

(declare-fun Tuple2_proj_1 (ty ty uni) uni)

;; Tuple2_proj_1_sort
  (assert
  (forall ((a2 ty) (a3 ty))
  (forall ((x uni)) (sort a3 (Tuple2_proj_1 a3 a2 x)))))

;; Tuple2_proj_1_def
  (assert
  (forall ((a2 ty) (a3 ty))
  (forall ((u uni) (u1 uni))
  (=> (sort a3 u) (= (Tuple2_proj_1 a3 a2 (Tuple2 a3 a2 u u1)) u)))))

(declare-fun Tuple2_proj_2 (ty ty uni) uni)

;; Tuple2_proj_2_sort
  (assert
  (forall ((a2 ty) (a3 ty))
  (forall ((x uni)) (sort a2 (Tuple2_proj_2 a3 a2 x)))))

;; Tuple2_proj_2_def
  (assert
  (forall ((a2 ty) (a3 ty))
  (forall ((u uni) (u1 uni))
  (=> (sort a2 u1) (= (Tuple2_proj_2 a3 a2 (Tuple2 a3 a2 u u1)) u1)))))

;; tuple2_inversion
  (assert
  (forall ((a2 ty) (a3 ty))
  (forall ((u uni))
  (=> (sort (tuple2 a3 a2) u)
  (= u (Tuple2 a3 a2 (Tuple2_proj_1 a3 a2 u) (Tuple2_proj_2 a3 a2 u)))))))

(declare-fun times (ty ty uni uni) uni)

;; times_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (tuple2 a2 b2)) (times b2 a2 x x1)))))

;; mem_times
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set (tuple21 (tuple21 a b) (tuple21 a c)))) (x uni)
  (y (tuple21 (tuple21 a b) (tuple21 a c))))
  (= (mem (tuple2 a2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)))
  (Tuple2 a2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) x (t2tb239 y))
  (times (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) a2 s (t2tb238 t)))
  (and (mem a2 x s) (mem51 y t))))))

;; mem_times
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set (tuple21 a c))) (x uni) (y (tuple21 a c)))
  (= (mem (tuple2 a2 (tuple2 a1 c1)) (Tuple2 a2 (tuple2 a1 c1) x (t2tb133 y))
  (times (tuple2 a1 c1) a2 s (t2tb129 t))) (and (mem a2 x s) (mem10 y t))))))

;; mem_times
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set (set (tuple21 b c)))) (x uni) (y (set (tuple21 b
  c))))
  (= (mem (tuple2 a2 (set1 (tuple2 b1 c1)))
  (Tuple2 a2 (set1 (tuple2 b1 c1)) x (t2tb131 y))
  (times (set1 (tuple2 b1 c1)) a2 s (t2tb130 t)))
  (and (mem a2 x s) (mem9 y t))))))

;; mem_times
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set (tuple21 b c))) (x uni) (y (tuple21 b c)))
  (= (mem (tuple2 a2 (tuple2 b1 c1)) (Tuple2 a2 (tuple2 b1 c1) x (t2tb134 y))
  (times (tuple2 b1 c1) a2 s (t2tb131 t))) (and (mem a2 x s) (mem8 y t))))))

;; mem_times
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set c)) (x uni) (y c))
  (= (mem (tuple2 a2 c1) (Tuple2 a2 c1 x (t2tb135 y))
  (times c1 a2 s (t2tb132 t))) (and (mem a2 x s) (mem7 y t))))))

;; mem_times
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set (set (tuple21 a b)))) (x uni) (y (set (tuple21 a
  b))))
  (= (mem (tuple2 a2 (set1 (tuple2 a1 b1)))
  (Tuple2 a2 (set1 (tuple2 a1 b1)) x (t2tb11 y))
  (times (set1 (tuple2 a1 b1)) a2 s (t2tb10 t)))
  (and (mem a2 x s) (mem4 y t))))))

;; mem_times
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set (tuple21 a b))) (x uni) (y (tuple21 a b)))
  (= (mem (tuple2 a2 (tuple2 a1 b1)) (Tuple2 a2 (tuple2 a1 b1) x (t2tb13 y))
  (times (tuple2 a1 b1) a2 s (t2tb11 t))) (and (mem a2 x s) (mem3 y t))))))

;; mem_times
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set b)) (x uni) (y b))
  (= (mem (tuple2 a2 b1) (Tuple2 a2 b1 x (t2tb14 y))
  (times b1 a2 s (t2tb12 t))) (and (mem a2 x s) (mem2 y t))))))

;; mem_times
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set (tuple21 a a))) (x uni) (y (tuple21 a a)))
  (= (mem (tuple2 a2 (tuple2 a1 a1)) (Tuple2 a2 (tuple2 a1 a1) x (t2tb5 y))
  (times (tuple2 a1 a1) a2 s (t2tb4 t))) (and (mem a2 x s) (mem12 y t))))))

;; mem_times
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set a)) (x uni) (y a))
  (= (mem (tuple2 a2 a1) (Tuple2 a2 a1 x (t2tb2 y))
  (times a1 a2 s (t2tb1 t))) (and (mem a2 x s) (mem1 y t))))))

(declare-fun t2tb5481 ((set (tuple21 (tuple21 (tuple21 a b) (tuple21 a c))
  (tuple21 (tuple21 a b) (tuple21 a c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 a b) (tuple21 a c))
  (tuple21 (tuple21 a b) (tuple21 a c)))))) (sort
  (set1
  (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1))
  (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)))) (t2tb5481 x))))

(declare-fun tb2t5481 (uni) (set (tuple21 (tuple21 (tuple21 a b) (tuple21 a
  c)) (tuple21 (tuple21 a b) (tuple21 a c)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 a b) (tuple21 a c))
  (tuple21 (tuple21 a b) (tuple21 a c))))))
  (! (= (tb2t5481 (t2tb5481 i)) i) :pattern ((t2tb5481 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1))
     (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)))) j)
     (= (t2tb5481 (tb2t5481 j)) j)) :pattern ((t2tb5481 (tb2t5481 j))) )))

(declare-fun t2tb5482 ((tuple21 (tuple21 (tuple21 a b) (tuple21 a c))
  (tuple21 (tuple21 a b) (tuple21 a c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 a b) (tuple21 a c))
  (tuple21 (tuple21 a b) (tuple21 a c))))) (sort
  (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1))
  (tuple2 (tuple2 a1 b1) (tuple2 a1 c1))) (t2tb5482 x))))

(declare-fun tb2t5482 (uni) (tuple21 (tuple21 (tuple21 a b) (tuple21 a c))
  (tuple21 (tuple21 a b) (tuple21 a c))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 a b) (tuple21 a c))
  (tuple21 (tuple21 a b) (tuple21 a c)))))
  (! (= (tb2t5482 (t2tb5482 i)) i) :pattern ((t2tb5482 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1))
     (tuple2 (tuple2 a1 b1) (tuple2 a1 c1))) j)
     (= (t2tb5482 (tb2t5482 j)) j)) :pattern ((t2tb5482 (tb2t5482 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 (tuple21 a b) (tuple21 a c))))
  (t (set (tuple21 (tuple21 a b) (tuple21 a c)))) (x (tuple21 (tuple21 a b)
  (tuple21 a c))) (y (tuple21 (tuple21 a b) (tuple21 a c))))
  (= (mem
  (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1))
  (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)))
  (Tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1))
  (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) (t2tb239 x) (t2tb239 y))
  (times (tuple2 (tuple2 a1 b1) (tuple2 a1 c1))
  (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) (t2tb238 s) (t2tb238 t)))
  (and (mem51 x s) (mem51 y t)))))

(declare-fun t2tb5483 ((set (tuple21 (tuple21 (tuple21 a b) (tuple21 a c))
  (tuple21 a c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 a b) (tuple21 a c)) (tuple21 a
  c))))) (sort
  (set1 (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) (tuple2 a1 c1)))
  (t2tb5483 x))))

(declare-fun tb2t5483 (uni) (set (tuple21 (tuple21 (tuple21 a b) (tuple21 a
  c)) (tuple21 a c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 a b) (tuple21 a c)) (tuple21 a
  c))))) (! (= (tb2t5483 (t2tb5483 i)) i) :pattern ((t2tb5483 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) (tuple2 a1 c1))) j)
     (= (t2tb5483 (tb2t5483 j)) j)) :pattern ((t2tb5483 (tb2t5483 j))) )))

(declare-fun t2tb5484 ((tuple21 (tuple21 (tuple21 a b) (tuple21 a c))
  (tuple21 a c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 a b) (tuple21 a c)) (tuple21 a c))))
  (sort (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) (tuple2 a1 c1))
  (t2tb5484 x))))

(declare-fun tb2t5484 (uni) (tuple21 (tuple21 (tuple21 a b) (tuple21 a c))
  (tuple21 a c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 a b) (tuple21 a c)) (tuple21 a c))))
  (! (= (tb2t5484 (t2tb5484 i)) i) :pattern ((t2tb5484 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) (tuple2 a1 c1))
     j) (= (t2tb5484 (tb2t5484 j)) j)) :pattern ((t2tb5484 (tb2t5484 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 (tuple21 a b) (tuple21 a c)))) (t (set (tuple21 a
  c))) (x (tuple21 (tuple21 a b) (tuple21 a c))) (y (tuple21 a c)))
  (= (mem (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) (tuple2 a1 c1))
  (Tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) (tuple2 a1 c1) (t2tb239 x)
  (t2tb133 y))
  (times (tuple2 a1 c1) (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) (t2tb238 s)
  (t2tb129 t))) (and (mem51 x s) (mem10 y t)))))

(declare-fun t2tb5485 ((set (tuple21 (tuple21 (tuple21 a b) (tuple21 a c))
  (set (tuple21 b c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 a b) (tuple21 a c))
  (set (tuple21 b c)))))) (sort
  (set1
  (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) (set1 (tuple2 b1 c1))))
  (t2tb5485 x))))

(declare-fun tb2t5485 (uni) (set (tuple21 (tuple21 (tuple21 a b) (tuple21 a
  c)) (set (tuple21 b c)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 a b) (tuple21 a c))
  (set (tuple21 b c))))))
  (! (= (tb2t5485 (t2tb5485 i)) i) :pattern ((t2tb5485 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) (set1 (tuple2 b1 c1))))
     j) (= (t2tb5485 (tb2t5485 j)) j)) :pattern ((t2tb5485 (tb2t5485 j))) )))

(declare-fun t2tb5486 ((tuple21 (tuple21 (tuple21 a b) (tuple21 a c))
  (set (tuple21 b c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 a b) (tuple21 a c)) (set (tuple21 b
  c))))) (sort
  (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) (set1 (tuple2 b1 c1)))
  (t2tb5486 x))))

(declare-fun tb2t5486 (uni) (tuple21 (tuple21 (tuple21 a b) (tuple21 a c))
  (set (tuple21 b c))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 a b) (tuple21 a c)) (set (tuple21 b
  c))))) (! (= (tb2t5486 (t2tb5486 i)) i) :pattern ((t2tb5486 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) (set1 (tuple2 b1 c1))) j)
     (= (t2tb5486 (tb2t5486 j)) j)) :pattern ((t2tb5486 (tb2t5486 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 (tuple21 a b) (tuple21 a c))))
  (t (set (set (tuple21 b c)))) (x (tuple21 (tuple21 a b) (tuple21 a c)))
  (y (set (tuple21 b c))))
  (= (mem
  (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) (set1 (tuple2 b1 c1)))
  (Tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) (set1 (tuple2 b1 c1))
  (t2tb239 x) (t2tb131 y))
  (times (set1 (tuple2 b1 c1)) (tuple2 (tuple2 a1 b1) (tuple2 a1 c1))
  (t2tb238 s) (t2tb130 t))) (and (mem51 x s) (mem9 y t)))))

(declare-fun t2tb5487 ((set (tuple21 (tuple21 (tuple21 a b) (tuple21 a c))
  (tuple21 b c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 a b) (tuple21 a c)) (tuple21 b
  c))))) (sort
  (set1 (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) (tuple2 b1 c1)))
  (t2tb5487 x))))

(declare-fun tb2t5487 (uni) (set (tuple21 (tuple21 (tuple21 a b) (tuple21 a
  c)) (tuple21 b c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 a b) (tuple21 a c)) (tuple21 b
  c))))) (! (= (tb2t5487 (t2tb5487 i)) i) :pattern ((t2tb5487 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) (tuple2 b1 c1))) j)
     (= (t2tb5487 (tb2t5487 j)) j)) :pattern ((t2tb5487 (tb2t5487 j))) )))

(declare-fun t2tb5488 ((tuple21 (tuple21 (tuple21 a b) (tuple21 a c))
  (tuple21 b c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 a b) (tuple21 a c)) (tuple21 b c))))
  (sort (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) (tuple2 b1 c1))
  (t2tb5488 x))))

(declare-fun tb2t5488 (uni) (tuple21 (tuple21 (tuple21 a b) (tuple21 a c))
  (tuple21 b c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 a b) (tuple21 a c)) (tuple21 b c))))
  (! (= (tb2t5488 (t2tb5488 i)) i) :pattern ((t2tb5488 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) (tuple2 b1 c1))
     j) (= (t2tb5488 (tb2t5488 j)) j)) :pattern ((t2tb5488 (tb2t5488 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 (tuple21 a b) (tuple21 a c)))) (t (set (tuple21 b
  c))) (x (tuple21 (tuple21 a b) (tuple21 a c))) (y (tuple21 b c)))
  (= (mem (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) (tuple2 b1 c1))
  (Tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) (tuple2 b1 c1) (t2tb239 x)
  (t2tb134 y))
  (times (tuple2 b1 c1) (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) (t2tb238 s)
  (t2tb131 t))) (and (mem51 x s) (mem8 y t)))))

(declare-fun t2tb5489 ((set (tuple21 (tuple21 (tuple21 a b) (tuple21 a c))
  c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 a b) (tuple21 a c)) c)))) (sort
  (set1 (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) c1)) (t2tb5489 x))))

(declare-fun tb2t5489 (uni) (set (tuple21 (tuple21 (tuple21 a b) (tuple21 a
  c)) c)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 a b) (tuple21 a c)) c))))
  (! (= (tb2t5489 (t2tb5489 i)) i) :pattern ((t2tb5489 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) c1)) j)
     (= (t2tb5489 (tb2t5489 j)) j)) :pattern ((t2tb5489 (tb2t5489 j))) )))

(declare-fun t2tb5490 ((tuple21 (tuple21 (tuple21 a b) (tuple21 a c))
  c)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 a b) (tuple21 a c)) c))) (sort
  (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) c1) (t2tb5490 x))))

(declare-fun tb2t5490 (uni) (tuple21 (tuple21 (tuple21 a b) (tuple21 a c))
  c))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 a b) (tuple21 a c)) c)))
  (! (= (tb2t5490 (t2tb5490 i)) i) :pattern ((t2tb5490 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) c1) j)
     (= (t2tb5490 (tb2t5490 j)) j)) :pattern ((t2tb5490 (tb2t5490 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 (tuple21 a b) (tuple21 a c)))) (t (set c))
  (x (tuple21 (tuple21 a b) (tuple21 a c))) (y c))
  (= (mem (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) c1)
  (Tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) c1 (t2tb239 x) (t2tb135 y))
  (times c1 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) (t2tb238 s) (t2tb132 t)))
  (and (mem51 x s) (mem7 y t)))))

(declare-fun t2tb5491 ((set (tuple21 (tuple21 (tuple21 a b) (tuple21 a c))
  (set (tuple21 a b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 a b) (tuple21 a c))
  (set (tuple21 a b)))))) (sort
  (set1
  (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) (set1 (tuple2 a1 b1))))
  (t2tb5491 x))))

(declare-fun tb2t5491 (uni) (set (tuple21 (tuple21 (tuple21 a b) (tuple21 a
  c)) (set (tuple21 a b)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 a b) (tuple21 a c))
  (set (tuple21 a b))))))
  (! (= (tb2t5491 (t2tb5491 i)) i) :pattern ((t2tb5491 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) (set1 (tuple2 a1 b1))))
     j) (= (t2tb5491 (tb2t5491 j)) j)) :pattern ((t2tb5491 (tb2t5491 j))) )))

(declare-fun t2tb5492 ((tuple21 (tuple21 (tuple21 a b) (tuple21 a c))
  (set (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 a b) (tuple21 a c)) (set (tuple21 a
  b))))) (sort
  (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) (set1 (tuple2 a1 b1)))
  (t2tb5492 x))))

(declare-fun tb2t5492 (uni) (tuple21 (tuple21 (tuple21 a b) (tuple21 a c))
  (set (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 a b) (tuple21 a c)) (set (tuple21 a
  b))))) (! (= (tb2t5492 (t2tb5492 i)) i) :pattern ((t2tb5492 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) (set1 (tuple2 a1 b1))) j)
     (= (t2tb5492 (tb2t5492 j)) j)) :pattern ((t2tb5492 (tb2t5492 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 (tuple21 a b) (tuple21 a c))))
  (t (set (set (tuple21 a b)))) (x (tuple21 (tuple21 a b) (tuple21 a c)))
  (y (set (tuple21 a b))))
  (= (mem
  (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) (set1 (tuple2 a1 b1)))
  (Tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) (set1 (tuple2 a1 b1))
  (t2tb239 x) (t2tb11 y))
  (times (set1 (tuple2 a1 b1)) (tuple2 (tuple2 a1 b1) (tuple2 a1 c1))
  (t2tb238 s) (t2tb10 t))) (and (mem51 x s) (mem4 y t)))))

(declare-fun t2tb5493 ((set (tuple21 (tuple21 (tuple21 a b) (tuple21 a c))
  (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 a b) (tuple21 a c)) (tuple21 a
  b))))) (sort
  (set1 (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) (tuple2 a1 b1)))
  (t2tb5493 x))))

(declare-fun tb2t5493 (uni) (set (tuple21 (tuple21 (tuple21 a b) (tuple21 a
  c)) (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 a b) (tuple21 a c)) (tuple21 a
  b))))) (! (= (tb2t5493 (t2tb5493 i)) i) :pattern ((t2tb5493 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) (tuple2 a1 b1))) j)
     (= (t2tb5493 (tb2t5493 j)) j)) :pattern ((t2tb5493 (tb2t5493 j))) )))

(declare-fun t2tb5494 ((tuple21 (tuple21 (tuple21 a b) (tuple21 a c))
  (tuple21 a b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 a b) (tuple21 a c)) (tuple21 a b))))
  (sort (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) (tuple2 a1 b1))
  (t2tb5494 x))))

(declare-fun tb2t5494 (uni) (tuple21 (tuple21 (tuple21 a b) (tuple21 a c))
  (tuple21 a b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 a b) (tuple21 a c)) (tuple21 a b))))
  (! (= (tb2t5494 (t2tb5494 i)) i) :pattern ((t2tb5494 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) (tuple2 a1 b1))
     j) (= (t2tb5494 (tb2t5494 j)) j)) :pattern ((t2tb5494 (tb2t5494 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 (tuple21 a b) (tuple21 a c)))) (t (set (tuple21 a
  b))) (x (tuple21 (tuple21 a b) (tuple21 a c))) (y (tuple21 a b)))
  (= (mem (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) (tuple2 a1 b1))
  (Tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) (tuple2 a1 b1) (t2tb239 x)
  (t2tb13 y))
  (times (tuple2 a1 b1) (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) (t2tb238 s)
  (t2tb11 t))) (and (mem51 x s) (mem3 y t)))))

(declare-fun t2tb5495 ((tuple21 (tuple21 (tuple21 a b) (tuple21 a c))
  b)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 a b) (tuple21 a c)) b))) (sort
  (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) b1) (t2tb5495 x))))

(declare-fun tb2t5495 (uni) (tuple21 (tuple21 (tuple21 a b) (tuple21 a c))
  b))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 a b) (tuple21 a c)) b)))
  (! (= (tb2t5495 (t2tb5495 i)) i) :pattern ((t2tb5495 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) b1) j)
     (= (t2tb5495 (tb2t5495 j)) j)) :pattern ((t2tb5495 (tb2t5495 j))) )))

(declare-fun t2tb5496 ((set (tuple21 (tuple21 (tuple21 a b) (tuple21 a c))
  b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 a b) (tuple21 a c)) b)))) (sort
  (set1 (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) b1)) (t2tb5496 x))))

(declare-fun tb2t5496 (uni) (set (tuple21 (tuple21 (tuple21 a b) (tuple21 a
  c)) b)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 a b) (tuple21 a c)) b))))
  (! (= (tb2t5496 (t2tb5496 i)) i) :pattern ((t2tb5496 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) b1)) j)
     (= (t2tb5496 (tb2t5496 j)) j)) :pattern ((t2tb5496 (tb2t5496 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 (tuple21 a b) (tuple21 a c)))) (t (set b))
  (x (tuple21 (tuple21 a b) (tuple21 a c))) (y b))
  (= (mem (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) b1)
  (Tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) b1 (t2tb239 x) (t2tb14 y))
  (times b1 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) (t2tb238 s) (t2tb12 t)))
  (and (mem51 x s) (mem2 y t)))))

(declare-fun t2tb5497 ((set (tuple21 (tuple21 (tuple21 a b) (tuple21 a c))
  (tuple21 a a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 a b) (tuple21 a c)) (tuple21 a
  a))))) (sort
  (set1 (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) (tuple2 a1 a1)))
  (t2tb5497 x))))

(declare-fun tb2t5497 (uni) (set (tuple21 (tuple21 (tuple21 a b) (tuple21 a
  c)) (tuple21 a a))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 a b) (tuple21 a c)) (tuple21 a
  a))))) (! (= (tb2t5497 (t2tb5497 i)) i) :pattern ((t2tb5497 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) (tuple2 a1 a1))) j)
     (= (t2tb5497 (tb2t5497 j)) j)) :pattern ((t2tb5497 (tb2t5497 j))) )))

(declare-fun t2tb5498 ((tuple21 (tuple21 (tuple21 a b) (tuple21 a c))
  (tuple21 a a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 a b) (tuple21 a c)) (tuple21 a a))))
  (sort (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) (tuple2 a1 a1))
  (t2tb5498 x))))

(declare-fun tb2t5498 (uni) (tuple21 (tuple21 (tuple21 a b) (tuple21 a c))
  (tuple21 a a)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 a b) (tuple21 a c)) (tuple21 a a))))
  (! (= (tb2t5498 (t2tb5498 i)) i) :pattern ((t2tb5498 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) (tuple2 a1 a1))
     j) (= (t2tb5498 (tb2t5498 j)) j)) :pattern ((t2tb5498 (tb2t5498 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 (tuple21 a b) (tuple21 a c)))) (t (set (tuple21 a
  a))) (x (tuple21 (tuple21 a b) (tuple21 a c))) (y (tuple21 a a)))
  (= (mem (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) (tuple2 a1 a1))
  (Tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) (tuple2 a1 a1) (t2tb239 x)
  (t2tb5 y))
  (times (tuple2 a1 a1) (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) (t2tb238 s)
  (t2tb4 t))) (and (mem51 x s) (mem12 y t)))))

(declare-fun t2tb5499 ((set (tuple21 (tuple21 (tuple21 a b) (tuple21 a c))
  a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 a b) (tuple21 a c)) a)))) (sort
  (set1 (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) a1)) (t2tb5499 x))))

(declare-fun tb2t5499 (uni) (set (tuple21 (tuple21 (tuple21 a b) (tuple21 a
  c)) a)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 a b) (tuple21 a c)) a))))
  (! (= (tb2t5499 (t2tb5499 i)) i) :pattern ((t2tb5499 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) a1)) j)
     (= (t2tb5499 (tb2t5499 j)) j)) :pattern ((t2tb5499 (tb2t5499 j))) )))

(declare-fun t2tb5500 ((tuple21 (tuple21 (tuple21 a b) (tuple21 a c))
  a)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 a b) (tuple21 a c)) a))) (sort
  (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) a1) (t2tb5500 x))))

(declare-fun tb2t5500 (uni) (tuple21 (tuple21 (tuple21 a b) (tuple21 a c))
  a))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 a b) (tuple21 a c)) a)))
  (! (= (tb2t5500 (t2tb5500 i)) i) :pattern ((t2tb5500 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) a1) j)
     (= (t2tb5500 (tb2t5500 j)) j)) :pattern ((t2tb5500 (tb2t5500 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 (tuple21 a b) (tuple21 a c)))) (t (set a))
  (x (tuple21 (tuple21 a b) (tuple21 a c))) (y a))
  (= (mem (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) a1)
  (Tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) a1 (t2tb239 x) (t2tb2 y))
  (times a1 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) (t2tb238 s) (t2tb1 t)))
  (and (mem51 x s) (mem1 y t)))))

;; mem_times
  (assert
  (forall ((b2 ty))
  (forall ((s (set (tuple21 (tuple21 a b) (tuple21 a c)))) (t uni)
  (x (tuple21 (tuple21 a b) (tuple21 a c))) (y uni))
  (= (mem (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) b2)
  (Tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) b2 (t2tb239 x) y)
  (times b2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) (t2tb238 s) t))
  (and (mem51 x s) (mem b2 y t))))))

(declare-fun t2tb5501 ((set (tuple21 (tuple21 a c) (tuple21 (tuple21 a b)
  (tuple21 a c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a c) (tuple21 (tuple21 a b) (tuple21 a
  c)))))) (sort
  (set1 (tuple2 (tuple2 a1 c1) (tuple2 (tuple2 a1 b1) (tuple2 a1 c1))))
  (t2tb5501 x))))

(declare-fun tb2t5501 (uni) (set (tuple21 (tuple21 a c) (tuple21 (tuple21 a
  b) (tuple21 a c)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a c) (tuple21 (tuple21 a b) (tuple21 a
  c)))))) (! (= (tb2t5501 (t2tb5501 i)) i) :pattern ((t2tb5501 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 a1 c1) (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)))) j)
     (= (t2tb5501 (tb2t5501 j)) j)) :pattern ((t2tb5501 (tb2t5501 j))) )))

(declare-fun t2tb5502 ((tuple21 (tuple21 a c) (tuple21 (tuple21 a b)
  (tuple21 a c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a c) (tuple21 (tuple21 a b) (tuple21 a c)))))
  (sort (tuple2 (tuple2 a1 c1) (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)))
  (t2tb5502 x))))

(declare-fun tb2t5502 (uni) (tuple21 (tuple21 a c) (tuple21 (tuple21 a b)
  (tuple21 a c))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a c) (tuple21 (tuple21 a b) (tuple21 a c)))))
  (! (= (tb2t5502 (t2tb5502 i)) i) :pattern ((t2tb5502 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 c1) (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)))
     j) (= (t2tb5502 (tb2t5502 j)) j)) :pattern ((t2tb5502 (tb2t5502 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a c))) (t (set (tuple21 (tuple21 a b) (tuple21 a
  c)))) (x (tuple21 a c)) (y (tuple21 (tuple21 a b) (tuple21 a c))))
  (= (mem (tuple2 (tuple2 a1 c1) (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)))
  (Tuple2 (tuple2 a1 c1) (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) (t2tb133 x)
  (t2tb239 y))
  (times (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) (tuple2 a1 c1) (t2tb129 s)
  (t2tb238 t))) (and (mem10 x s) (mem51 y t)))))

(declare-fun t2tb156 ((tuple21 (tuple21 a c) (tuple21 a c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a c) (tuple21 a c)))) (sort
  (tuple2 (tuple2 a1 c1) (tuple2 a1 c1)) (t2tb156 x))))

(declare-fun tb2t156 (uni) (tuple21 (tuple21 a c) (tuple21 a c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a c) (tuple21 a c))))
  (! (= (tb2t156 (t2tb156 i)) i) :pattern ((t2tb156 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 c1) (tuple2 a1 c1)) j)
     (= (t2tb156 (tb2t156 j)) j)) :pattern ((t2tb156 (tb2t156 j))) )))

(declare-fun t2tb157 ((set (tuple21 (tuple21 a c) (tuple21 a c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a c) (tuple21 a c))))) (sort
  (set1 (tuple2 (tuple2 a1 c1) (tuple2 a1 c1))) (t2tb157 x))))

(declare-fun tb2t157 (uni) (set (tuple21 (tuple21 a c) (tuple21 a c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a c) (tuple21 a c)))))
  (! (= (tb2t157 (t2tb157 i)) i) :pattern ((t2tb157 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 c1) (tuple2 a1 c1))) j)
     (= (t2tb157 (tb2t157 j)) j)) :pattern ((t2tb157 (tb2t157 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a c))) (t (set (tuple21 a c))) (x (tuple21 a c))
  (y (tuple21 a c)))
  (= (mem (tuple2 (tuple2 a1 c1) (tuple2 a1 c1))
  (Tuple2 (tuple2 a1 c1) (tuple2 a1 c1) (t2tb133 x) (t2tb133 y))
  (times (tuple2 a1 c1) (tuple2 a1 c1) (t2tb129 s) (t2tb129 t)))
  (and (mem10 x s) (mem10 y t)))))

(declare-fun t2tb1089 ((set (tuple21 (tuple21 a c) (set (tuple21 b
  c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a c) (set (tuple21 b c)))))) (sort
  (set1 (tuple2 (tuple2 a1 c1) (set1 (tuple2 b1 c1)))) (t2tb1089 x))))

(declare-fun tb2t1089 (uni) (set (tuple21 (tuple21 a c) (set (tuple21 b
  c)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a c) (set (tuple21 b c))))))
  (! (= (tb2t1089 (t2tb1089 i)) i) :pattern ((t2tb1089 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 c1) (set1 (tuple2 b1 c1)))) j)
     (= (t2tb1089 (tb2t1089 j)) j)) :pattern ((t2tb1089 (tb2t1089 j))) )))

(declare-fun t2tb1090 ((tuple21 (tuple21 a c) (set (tuple21 b c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a c) (set (tuple21 b c))))) (sort
  (tuple2 (tuple2 a1 c1) (set1 (tuple2 b1 c1))) (t2tb1090 x))))

(declare-fun tb2t1090 (uni) (tuple21 (tuple21 a c) (set (tuple21 b c))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a c) (set (tuple21 b c)))))
  (! (= (tb2t1090 (t2tb1090 i)) i) :pattern ((t2tb1090 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 c1) (set1 (tuple2 b1 c1))) j)
     (= (t2tb1090 (tb2t1090 j)) j)) :pattern ((t2tb1090 (tb2t1090 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a c))) (t (set (set (tuple21 b c))))
  (x (tuple21 a c)) (y (set (tuple21 b c))))
  (= (mem (tuple2 (tuple2 a1 c1) (set1 (tuple2 b1 c1)))
  (Tuple2 (tuple2 a1 c1) (set1 (tuple2 b1 c1)) (t2tb133 x) (t2tb131 y))
  (times (set1 (tuple2 b1 c1)) (tuple2 a1 c1) (t2tb129 s) (t2tb130 t)))
  (and (mem10 x s) (mem9 y t)))))

(declare-fun t2tb1091 ((set (tuple21 (tuple21 a c) (tuple21 b c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a c) (tuple21 b c))))) (sort
  (set1 (tuple2 (tuple2 a1 c1) (tuple2 b1 c1))) (t2tb1091 x))))

(declare-fun tb2t1091 (uni) (set (tuple21 (tuple21 a c) (tuple21 b c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a c) (tuple21 b c)))))
  (! (= (tb2t1091 (t2tb1091 i)) i) :pattern ((t2tb1091 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 c1) (tuple2 b1 c1))) j)
     (= (t2tb1091 (tb2t1091 j)) j)) :pattern ((t2tb1091 (tb2t1091 j))) )))

(declare-fun t2tb1092 ((tuple21 (tuple21 a c) (tuple21 b c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a c) (tuple21 b c)))) (sort
  (tuple2 (tuple2 a1 c1) (tuple2 b1 c1)) (t2tb1092 x))))

(declare-fun tb2t1092 (uni) (tuple21 (tuple21 a c) (tuple21 b c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a c) (tuple21 b c))))
  (! (= (tb2t1092 (t2tb1092 i)) i) :pattern ((t2tb1092 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 c1) (tuple2 b1 c1)) j)
     (= (t2tb1092 (tb2t1092 j)) j)) :pattern ((t2tb1092 (tb2t1092 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a c))) (t (set (tuple21 b c))) (x (tuple21 a c))
  (y (tuple21 b c)))
  (= (mem (tuple2 (tuple2 a1 c1) (tuple2 b1 c1))
  (Tuple2 (tuple2 a1 c1) (tuple2 b1 c1) (t2tb133 x) (t2tb134 y))
  (times (tuple2 b1 c1) (tuple2 a1 c1) (t2tb129 s) (t2tb131 t)))
  (and (mem10 x s) (mem8 y t)))))

(declare-fun t2tb162 ((set (tuple21 (tuple21 a c) c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a c) c)))) (sort
  (set1 (tuple2 (tuple2 a1 c1) c1)) (t2tb162 x))))

(declare-fun tb2t162 (uni) (set (tuple21 (tuple21 a c) c)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a c) c))))
  (! (= (tb2t162 (t2tb162 i)) i) :pattern ((t2tb162 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 c1) c1)) j)
     (= (t2tb162 (tb2t162 j)) j)) :pattern ((t2tb162 (tb2t162 j))) )))

(declare-fun t2tb163 ((tuple21 (tuple21 a c) c)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a c) c))) (sort (tuple2 (tuple2 a1 c1) c1)
  (t2tb163 x))))

(declare-fun tb2t163 (uni) (tuple21 (tuple21 a c) c))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a c) c)))
  (! (= (tb2t163 (t2tb163 i)) i) :pattern ((t2tb163 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 c1) c1) j) (= (t2tb163 (tb2t163 j)) j)) :pattern (
  (t2tb163 (tb2t163 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a c))) (t (set c)) (x (tuple21 a c)) (y c))
  (= (mem (tuple2 (tuple2 a1 c1) c1)
  (Tuple2 (tuple2 a1 c1) c1 (t2tb133 x) (t2tb135 y))
  (times c1 (tuple2 a1 c1) (t2tb129 s) (t2tb132 t)))
  (and (mem10 x s) (mem7 y t)))))

(declare-fun t2tb164 ((set (tuple21 (tuple21 a c) (set (tuple21 a b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a c) (set (tuple21 a b)))))) (sort
  (set1 (tuple2 (tuple2 a1 c1) (set1 (tuple2 a1 b1)))) (t2tb164 x))))

(declare-fun tb2t164 (uni) (set (tuple21 (tuple21 a c) (set (tuple21 a b)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a c) (set (tuple21 a b))))))
  (! (= (tb2t164 (t2tb164 i)) i) :pattern ((t2tb164 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 c1) (set1 (tuple2 a1 b1)))) j)
     (= (t2tb164 (tb2t164 j)) j)) :pattern ((t2tb164 (tb2t164 j))) )))

(declare-fun t2tb165 ((tuple21 (tuple21 a c) (set (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a c) (set (tuple21 a b))))) (sort
  (tuple2 (tuple2 a1 c1) (set1 (tuple2 a1 b1))) (t2tb165 x))))

(declare-fun tb2t165 (uni) (tuple21 (tuple21 a c) (set (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a c) (set (tuple21 a b)))))
  (! (= (tb2t165 (t2tb165 i)) i) :pattern ((t2tb165 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 c1) (set1 (tuple2 a1 b1))) j)
     (= (t2tb165 (tb2t165 j)) j)) :pattern ((t2tb165 (tb2t165 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a c))) (t (set (set (tuple21 a b))))
  (x (tuple21 a c)) (y (set (tuple21 a b))))
  (= (mem (tuple2 (tuple2 a1 c1) (set1 (tuple2 a1 b1)))
  (Tuple2 (tuple2 a1 c1) (set1 (tuple2 a1 b1)) (t2tb133 x) (t2tb11 y))
  (times (set1 (tuple2 a1 b1)) (tuple2 a1 c1) (t2tb129 s) (t2tb10 t)))
  (and (mem10 x s) (mem4 y t)))))

(declare-fun t2tb166 ((set (tuple21 (tuple21 a c) (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a c) (tuple21 a b))))) (sort
  (set1 (tuple2 (tuple2 a1 c1) (tuple2 a1 b1))) (t2tb166 x))))

(declare-fun tb2t166 (uni) (set (tuple21 (tuple21 a c) (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a c) (tuple21 a b)))))
  (! (= (tb2t166 (t2tb166 i)) i) :pattern ((t2tb166 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 c1) (tuple2 a1 b1))) j)
     (= (t2tb166 (tb2t166 j)) j)) :pattern ((t2tb166 (tb2t166 j))) )))

(declare-fun t2tb167 ((tuple21 (tuple21 a c) (tuple21 a b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a c) (tuple21 a b)))) (sort
  (tuple2 (tuple2 a1 c1) (tuple2 a1 b1)) (t2tb167 x))))

(declare-fun tb2t167 (uni) (tuple21 (tuple21 a c) (tuple21 a b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a c) (tuple21 a b))))
  (! (= (tb2t167 (t2tb167 i)) i) :pattern ((t2tb167 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 c1) (tuple2 a1 b1)) j)
     (= (t2tb167 (tb2t167 j)) j)) :pattern ((t2tb167 (tb2t167 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a c))) (t (set (tuple21 a b))) (x (tuple21 a c))
  (y (tuple21 a b)))
  (= (mem (tuple2 (tuple2 a1 c1) (tuple2 a1 b1))
  (Tuple2 (tuple2 a1 c1) (tuple2 a1 b1) (t2tb133 x) (t2tb13 y))
  (times (tuple2 a1 b1) (tuple2 a1 c1) (t2tb129 s) (t2tb11 t)))
  (and (mem10 x s) (mem3 y t)))))

(declare-fun t2tb168 ((set (tuple21 (tuple21 a c) b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a c) b)))) (sort
  (set1 (tuple2 (tuple2 a1 c1) b1)) (t2tb168 x))))

(declare-fun tb2t168 (uni) (set (tuple21 (tuple21 a c) b)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a c) b))))
  (! (= (tb2t168 (t2tb168 i)) i) :pattern ((t2tb168 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 c1) b1)) j)
     (= (t2tb168 (tb2t168 j)) j)) :pattern ((t2tb168 (tb2t168 j))) )))

(declare-fun t2tb169 ((tuple21 (tuple21 a c) b)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a c) b))) (sort (tuple2 (tuple2 a1 c1) b1)
  (t2tb169 x))))

(declare-fun tb2t169 (uni) (tuple21 (tuple21 a c) b))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a c) b)))
  (! (= (tb2t169 (t2tb169 i)) i) :pattern ((t2tb169 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 c1) b1) j) (= (t2tb169 (tb2t169 j)) j)) :pattern (
  (t2tb169 (tb2t169 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a c))) (t (set b)) (x (tuple21 a c)) (y b))
  (= (mem (tuple2 (tuple2 a1 c1) b1)
  (Tuple2 (tuple2 a1 c1) b1 (t2tb133 x) (t2tb14 y))
  (times b1 (tuple2 a1 c1) (t2tb129 s) (t2tb12 t)))
  (and (mem10 x s) (mem2 y t)))))

(declare-fun t2tb5503 ((set (tuple21 (tuple21 a c) (tuple21 a a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a c) (tuple21 a a))))) (sort
  (set1 (tuple2 (tuple2 a1 c1) (tuple2 a1 a1))) (t2tb5503 x))))

(declare-fun tb2t5503 (uni) (set (tuple21 (tuple21 a c) (tuple21 a a))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a c) (tuple21 a a)))))
  (! (= (tb2t5503 (t2tb5503 i)) i) :pattern ((t2tb5503 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 c1) (tuple2 a1 a1))) j)
     (= (t2tb5503 (tb2t5503 j)) j)) :pattern ((t2tb5503 (tb2t5503 j))) )))

(declare-fun t2tb5504 ((tuple21 (tuple21 a c) (tuple21 a a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a c) (tuple21 a a)))) (sort
  (tuple2 (tuple2 a1 c1) (tuple2 a1 a1)) (t2tb5504 x))))

(declare-fun tb2t5504 (uni) (tuple21 (tuple21 a c) (tuple21 a a)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a c) (tuple21 a a))))
  (! (= (tb2t5504 (t2tb5504 i)) i) :pattern ((t2tb5504 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 c1) (tuple2 a1 a1)) j)
     (= (t2tb5504 (tb2t5504 j)) j)) :pattern ((t2tb5504 (tb2t5504 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a c))) (t (set (tuple21 a a))) (x (tuple21 a c))
  (y (tuple21 a a)))
  (= (mem (tuple2 (tuple2 a1 c1) (tuple2 a1 a1))
  (Tuple2 (tuple2 a1 c1) (tuple2 a1 a1) (t2tb133 x) (t2tb5 y))
  (times (tuple2 a1 a1) (tuple2 a1 c1) (t2tb129 s) (t2tb4 t)))
  (and (mem10 x s) (mem12 y t)))))

(declare-fun t2tb170 ((set (tuple21 (tuple21 a c) a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a c) a)))) (sort
  (set1 (tuple2 (tuple2 a1 c1) a1)) (t2tb170 x))))

(declare-fun tb2t170 (uni) (set (tuple21 (tuple21 a c) a)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a c) a))))
  (! (= (tb2t170 (t2tb170 i)) i) :pattern ((t2tb170 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 c1) a1)) j)
     (= (t2tb170 (tb2t170 j)) j)) :pattern ((t2tb170 (tb2t170 j))) )))

(declare-fun t2tb171 ((tuple21 (tuple21 a c) a)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a c) a))) (sort (tuple2 (tuple2 a1 c1) a1)
  (t2tb171 x))))

(declare-fun tb2t171 (uni) (tuple21 (tuple21 a c) a))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a c) a)))
  (! (= (tb2t171 (t2tb171 i)) i) :pattern ((t2tb171 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 c1) a1) j) (= (t2tb171 (tb2t171 j)) j)) :pattern (
  (t2tb171 (tb2t171 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a c))) (t (set a)) (x (tuple21 a c)) (y a))
  (= (mem (tuple2 (tuple2 a1 c1) a1)
  (Tuple2 (tuple2 a1 c1) a1 (t2tb133 x) (t2tb2 y))
  (times a1 (tuple2 a1 c1) (t2tb129 s) (t2tb1 t)))
  (and (mem10 x s) (mem1 y t)))))

;; mem_times
  (assert
  (forall ((b2 ty))
  (forall ((s (set (tuple21 a c))) (t uni) (x (tuple21 a c)) (y uni))
  (= (mem (tuple2 (tuple2 a1 c1) b2) (Tuple2 (tuple2 a1 c1) b2 (t2tb133 x) y)
  (times b2 (tuple2 a1 c1) (t2tb129 s) t)) (and (mem10 x s) (mem b2 y t))))))

(declare-fun t2tb5505 ((set (tuple21 (set (tuple21 b c)) (tuple21 (tuple21 a
  b) (tuple21 a c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 b c)) (tuple21 (tuple21 a b)
  (tuple21 a c)))))) (sort
  (set1
  (tuple2 (set1 (tuple2 b1 c1)) (tuple2 (tuple2 a1 b1) (tuple2 a1 c1))))
  (t2tb5505 x))))

(declare-fun tb2t5505 (uni) (set (tuple21 (set (tuple21 b c))
  (tuple21 (tuple21 a b) (tuple21 a c)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 b c)) (tuple21 (tuple21 a b)
  (tuple21 a c))))))
  (! (= (tb2t5505 (t2tb5505 i)) i) :pattern ((t2tb5505 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (tuple2 (set1 (tuple2 b1 c1)) (tuple2 (tuple2 a1 b1) (tuple2 a1 c1))))
     j) (= (t2tb5505 (tb2t5505 j)) j)) :pattern ((t2tb5505 (tb2t5505 j))) )))

(declare-fun t2tb5506 ((tuple21 (set (tuple21 b c)) (tuple21 (tuple21 a b)
  (tuple21 a c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 b c)) (tuple21 (tuple21 a b) (tuple21 a
  c))))) (sort
  (tuple2 (set1 (tuple2 b1 c1)) (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)))
  (t2tb5506 x))))

(declare-fun tb2t5506 (uni) (tuple21 (set (tuple21 b c)) (tuple21 (tuple21 a
  b) (tuple21 a c))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 b c)) (tuple21 (tuple21 a b) (tuple21 a
  c))))) (! (= (tb2t5506 (t2tb5506 i)) i) :pattern ((t2tb5506 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (tuple2 (set1 (tuple2 b1 c1)) (tuple2 (tuple2 a1 b1) (tuple2 a1 c1))) j)
     (= (t2tb5506 (tb2t5506 j)) j)) :pattern ((t2tb5506 (tb2t5506 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 b c)))) (t (set (tuple21 (tuple21 a b)
  (tuple21 a c)))) (x (set (tuple21 b c))) (y (tuple21 (tuple21 a b)
  (tuple21 a c))))
  (= (mem
  (tuple2 (set1 (tuple2 b1 c1)) (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)))
  (Tuple2 (set1 (tuple2 b1 c1)) (tuple2 (tuple2 a1 b1) (tuple2 a1 c1))
  (t2tb131 x) (t2tb239 y))
  (times (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) (set1 (tuple2 b1 c1))
  (t2tb130 s) (t2tb238 t))) (and (mem9 x s) (mem51 y t)))))

(declare-fun t2tb1093 ((tuple21 (set (tuple21 b c)) (tuple21 a c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 b c)) (tuple21 a c)))) (sort
  (tuple2 (set1 (tuple2 b1 c1)) (tuple2 a1 c1)) (t2tb1093 x))))

(declare-fun tb2t1093 (uni) (tuple21 (set (tuple21 b c)) (tuple21 a c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 b c)) (tuple21 a c))))
  (! (= (tb2t1093 (t2tb1093 i)) i) :pattern ((t2tb1093 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 b1 c1)) (tuple2 a1 c1)) j)
     (= (t2tb1093 (tb2t1093 j)) j)) :pattern ((t2tb1093 (tb2t1093 j))) )))

(declare-fun t2tb1094 ((set (tuple21 (set (tuple21 b c)) (tuple21 a
  c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 b c)) (tuple21 a c))))) (sort
  (set1 (tuple2 (set1 (tuple2 b1 c1)) (tuple2 a1 c1))) (t2tb1094 x))))

(declare-fun tb2t1094 (uni) (set (tuple21 (set (tuple21 b c)) (tuple21 a
  c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 b c)) (tuple21 a c)))))
  (! (= (tb2t1094 (t2tb1094 i)) i) :pattern ((t2tb1094 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 b1 c1)) (tuple2 a1 c1))) j)
     (= (t2tb1094 (tb2t1094 j)) j)) :pattern ((t2tb1094 (tb2t1094 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 b c)))) (t (set (tuple21 a c)))
  (x (set (tuple21 b c))) (y (tuple21 a c)))
  (= (mem (tuple2 (set1 (tuple2 b1 c1)) (tuple2 a1 c1))
  (Tuple2 (set1 (tuple2 b1 c1)) (tuple2 a1 c1) (t2tb131 x) (t2tb133 y))
  (times (tuple2 a1 c1) (set1 (tuple2 b1 c1)) (t2tb130 s) (t2tb129 t)))
  (and (mem9 x s) (mem10 y t)))))

(declare-fun t2tb1095 ((set (tuple21 (set (tuple21 b c)) (set (tuple21 b
  c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 b c)) (set (tuple21 b c)))))) (sort
  (set1 (tuple2 (set1 (tuple2 b1 c1)) (set1 (tuple2 b1 c1)))) (t2tb1095 x))))

(declare-fun tb2t1095 (uni) (set (tuple21 (set (tuple21 b c)) (set (tuple21 b
  c)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 b c)) (set (tuple21 b c))))))
  (! (= (tb2t1095 (t2tb1095 i)) i) :pattern ((t2tb1095 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 b1 c1)) (set1 (tuple2 b1 c1)))) j)
     (= (t2tb1095 (tb2t1095 j)) j)) :pattern ((t2tb1095 (tb2t1095 j))) )))

(declare-fun t2tb1096 ((tuple21 (set (tuple21 b c)) (set (tuple21 b
  c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 b c)) (set (tuple21 b c))))) (sort
  (tuple2 (set1 (tuple2 b1 c1)) (set1 (tuple2 b1 c1))) (t2tb1096 x))))

(declare-fun tb2t1096 (uni) (tuple21 (set (tuple21 b c)) (set (tuple21 b
  c))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 b c)) (set (tuple21 b c)))))
  (! (= (tb2t1096 (t2tb1096 i)) i) :pattern ((t2tb1096 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 b1 c1)) (set1 (tuple2 b1 c1))) j)
     (= (t2tb1096 (tb2t1096 j)) j)) :pattern ((t2tb1096 (tb2t1096 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 b c)))) (t (set (set (tuple21 b c))))
  (x (set (tuple21 b c))) (y (set (tuple21 b c))))
  (= (mem (tuple2 (set1 (tuple2 b1 c1)) (set1 (tuple2 b1 c1)))
  (Tuple2 (set1 (tuple2 b1 c1)) (set1 (tuple2 b1 c1)) (t2tb131 x)
  (t2tb131 y))
  (times (set1 (tuple2 b1 c1)) (set1 (tuple2 b1 c1)) (t2tb130 s) (t2tb130 t)))
  (and (mem9 x s) (mem9 y t)))))

(declare-fun t2tb1097 ((set (tuple21 (set (tuple21 b c)) (tuple21 b
  c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 b c)) (tuple21 b c))))) (sort
  (set1 (tuple2 (set1 (tuple2 b1 c1)) (tuple2 b1 c1))) (t2tb1097 x))))

(declare-fun tb2t1097 (uni) (set (tuple21 (set (tuple21 b c)) (tuple21 b
  c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 b c)) (tuple21 b c)))))
  (! (= (tb2t1097 (t2tb1097 i)) i) :pattern ((t2tb1097 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 b1 c1)) (tuple2 b1 c1))) j)
     (= (t2tb1097 (tb2t1097 j)) j)) :pattern ((t2tb1097 (tb2t1097 j))) )))

(declare-fun t2tb1098 ((tuple21 (set (tuple21 b c)) (tuple21 b c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 b c)) (tuple21 b c)))) (sort
  (tuple2 (set1 (tuple2 b1 c1)) (tuple2 b1 c1)) (t2tb1098 x))))

(declare-fun tb2t1098 (uni) (tuple21 (set (tuple21 b c)) (tuple21 b c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 b c)) (tuple21 b c))))
  (! (= (tb2t1098 (t2tb1098 i)) i) :pattern ((t2tb1098 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 b1 c1)) (tuple2 b1 c1)) j)
     (= (t2tb1098 (tb2t1098 j)) j)) :pattern ((t2tb1098 (tb2t1098 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 b c)))) (t (set (tuple21 b c)))
  (x (set (tuple21 b c))) (y (tuple21 b c)))
  (= (mem (tuple2 (set1 (tuple2 b1 c1)) (tuple2 b1 c1))
  (Tuple2 (set1 (tuple2 b1 c1)) (tuple2 b1 c1) (t2tb131 x) (t2tb134 y))
  (times (tuple2 b1 c1) (set1 (tuple2 b1 c1)) (t2tb130 s) (t2tb131 t)))
  (and (mem9 x s) (mem8 y t)))))

(declare-fun t2tb1099 ((set (tuple21 (set (tuple21 b c)) c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 b c)) c)))) (sort
  (set1 (tuple2 (set1 (tuple2 b1 c1)) c1)) (t2tb1099 x))))

(declare-fun tb2t1099 (uni) (set (tuple21 (set (tuple21 b c)) c)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 b c)) c))))
  (! (= (tb2t1099 (t2tb1099 i)) i) :pattern ((t2tb1099 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 b1 c1)) c1)) j)
     (= (t2tb1099 (tb2t1099 j)) j)) :pattern ((t2tb1099 (tb2t1099 j))) )))

(declare-fun t2tb1100 ((tuple21 (set (tuple21 b c)) c)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 b c)) c))) (sort
  (tuple2 (set1 (tuple2 b1 c1)) c1) (t2tb1100 x))))

(declare-fun tb2t1100 (uni) (tuple21 (set (tuple21 b c)) c))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 b c)) c)))
  (! (= (tb2t1100 (t2tb1100 i)) i) :pattern ((t2tb1100 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 b1 c1)) c1) j)
     (= (t2tb1100 (tb2t1100 j)) j)) :pattern ((t2tb1100 (tb2t1100 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 b c)))) (t (set c)) (x (set (tuple21 b c)))
  (y c))
  (= (mem (tuple2 (set1 (tuple2 b1 c1)) c1)
  (Tuple2 (set1 (tuple2 b1 c1)) c1 (t2tb131 x) (t2tb135 y))
  (times c1 (set1 (tuple2 b1 c1)) (t2tb130 s) (t2tb132 t)))
  (and (mem9 x s) (mem7 y t)))))

(declare-fun t2tb1101 ((set (tuple21 (set (tuple21 b c)) (set (tuple21 a
  b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 b c)) (set (tuple21 a b)))))) (sort
  (set1 (tuple2 (set1 (tuple2 b1 c1)) (set1 (tuple2 a1 b1)))) (t2tb1101 x))))

(declare-fun tb2t1101 (uni) (set (tuple21 (set (tuple21 b c)) (set (tuple21 a
  b)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 b c)) (set (tuple21 a b))))))
  (! (= (tb2t1101 (t2tb1101 i)) i) :pattern ((t2tb1101 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 b1 c1)) (set1 (tuple2 a1 b1)))) j)
     (= (t2tb1101 (tb2t1101 j)) j)) :pattern ((t2tb1101 (tb2t1101 j))) )))

(declare-fun t2tb1102 ((tuple21 (set (tuple21 b c)) (set (tuple21 a
  b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 b c)) (set (tuple21 a b))))) (sort
  (tuple2 (set1 (tuple2 b1 c1)) (set1 (tuple2 a1 b1))) (t2tb1102 x))))

(declare-fun tb2t1102 (uni) (tuple21 (set (tuple21 b c)) (set (tuple21 a
  b))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 b c)) (set (tuple21 a b)))))
  (! (= (tb2t1102 (t2tb1102 i)) i) :pattern ((t2tb1102 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 b1 c1)) (set1 (tuple2 a1 b1))) j)
     (= (t2tb1102 (tb2t1102 j)) j)) :pattern ((t2tb1102 (tb2t1102 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 b c)))) (t (set (set (tuple21 a b))))
  (x (set (tuple21 b c))) (y (set (tuple21 a b))))
  (= (mem (tuple2 (set1 (tuple2 b1 c1)) (set1 (tuple2 a1 b1)))
  (Tuple2 (set1 (tuple2 b1 c1)) (set1 (tuple2 a1 b1)) (t2tb131 x) (t2tb11 y))
  (times (set1 (tuple2 a1 b1)) (set1 (tuple2 b1 c1)) (t2tb130 s) (t2tb10 t)))
  (and (mem9 x s) (mem4 y t)))))

(declare-fun t2tb1103 ((set (tuple21 (set (tuple21 b c)) (tuple21 a
  b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 b c)) (tuple21 a b))))) (sort
  (set1 (tuple2 (set1 (tuple2 b1 c1)) (tuple2 a1 b1))) (t2tb1103 x))))

(declare-fun tb2t1103 (uni) (set (tuple21 (set (tuple21 b c)) (tuple21 a
  b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 b c)) (tuple21 a b)))))
  (! (= (tb2t1103 (t2tb1103 i)) i) :pattern ((t2tb1103 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 b1 c1)) (tuple2 a1 b1))) j)
     (= (t2tb1103 (tb2t1103 j)) j)) :pattern ((t2tb1103 (tb2t1103 j))) )))

(declare-fun t2tb1104 ((tuple21 (set (tuple21 b c)) (tuple21 a b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 b c)) (tuple21 a b)))) (sort
  (tuple2 (set1 (tuple2 b1 c1)) (tuple2 a1 b1)) (t2tb1104 x))))

(declare-fun tb2t1104 (uni) (tuple21 (set (tuple21 b c)) (tuple21 a b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 b c)) (tuple21 a b))))
  (! (= (tb2t1104 (t2tb1104 i)) i) :pattern ((t2tb1104 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 b1 c1)) (tuple2 a1 b1)) j)
     (= (t2tb1104 (tb2t1104 j)) j)) :pattern ((t2tb1104 (tb2t1104 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 b c)))) (t (set (tuple21 a b)))
  (x (set (tuple21 b c))) (y (tuple21 a b)))
  (= (mem (tuple2 (set1 (tuple2 b1 c1)) (tuple2 a1 b1))
  (Tuple2 (set1 (tuple2 b1 c1)) (tuple2 a1 b1) (t2tb131 x) (t2tb13 y))
  (times (tuple2 a1 b1) (set1 (tuple2 b1 c1)) (t2tb130 s) (t2tb11 t)))
  (and (mem9 x s) (mem3 y t)))))

(declare-fun t2tb1105 ((set (tuple21 (set (tuple21 b c)) b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 b c)) b)))) (sort
  (set1 (tuple2 (set1 (tuple2 b1 c1)) b1)) (t2tb1105 x))))

(declare-fun tb2t1105 (uni) (set (tuple21 (set (tuple21 b c)) b)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 b c)) b))))
  (! (= (tb2t1105 (t2tb1105 i)) i) :pattern ((t2tb1105 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 b1 c1)) b1)) j)
     (= (t2tb1105 (tb2t1105 j)) j)) :pattern ((t2tb1105 (tb2t1105 j))) )))

(declare-fun t2tb1106 ((tuple21 (set (tuple21 b c)) b)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 b c)) b))) (sort
  (tuple2 (set1 (tuple2 b1 c1)) b1) (t2tb1106 x))))

(declare-fun tb2t1106 (uni) (tuple21 (set (tuple21 b c)) b))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 b c)) b)))
  (! (= (tb2t1106 (t2tb1106 i)) i) :pattern ((t2tb1106 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 b1 c1)) b1) j)
     (= (t2tb1106 (tb2t1106 j)) j)) :pattern ((t2tb1106 (tb2t1106 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 b c)))) (t (set b)) (x (set (tuple21 b c)))
  (y b))
  (= (mem (tuple2 (set1 (tuple2 b1 c1)) b1)
  (Tuple2 (set1 (tuple2 b1 c1)) b1 (t2tb131 x) (t2tb14 y))
  (times b1 (set1 (tuple2 b1 c1)) (t2tb130 s) (t2tb12 t)))
  (and (mem9 x s) (mem2 y t)))))

(declare-fun t2tb5507 ((set (tuple21 (set (tuple21 b c)) (tuple21 a
  a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 b c)) (tuple21 a a))))) (sort
  (set1 (tuple2 (set1 (tuple2 b1 c1)) (tuple2 a1 a1))) (t2tb5507 x))))

(declare-fun tb2t5507 (uni) (set (tuple21 (set (tuple21 b c)) (tuple21 a
  a))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 b c)) (tuple21 a a)))))
  (! (= (tb2t5507 (t2tb5507 i)) i) :pattern ((t2tb5507 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 b1 c1)) (tuple2 a1 a1))) j)
     (= (t2tb5507 (tb2t5507 j)) j)) :pattern ((t2tb5507 (tb2t5507 j))) )))

(declare-fun t2tb5508 ((tuple21 (set (tuple21 b c)) (tuple21 a a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 b c)) (tuple21 a a)))) (sort
  (tuple2 (set1 (tuple2 b1 c1)) (tuple2 a1 a1)) (t2tb5508 x))))

(declare-fun tb2t5508 (uni) (tuple21 (set (tuple21 b c)) (tuple21 a a)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 b c)) (tuple21 a a))))
  (! (= (tb2t5508 (t2tb5508 i)) i) :pattern ((t2tb5508 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 b1 c1)) (tuple2 a1 a1)) j)
     (= (t2tb5508 (tb2t5508 j)) j)) :pattern ((t2tb5508 (tb2t5508 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 b c)))) (t (set (tuple21 a a)))
  (x (set (tuple21 b c))) (y (tuple21 a a)))
  (= (mem (tuple2 (set1 (tuple2 b1 c1)) (tuple2 a1 a1))
  (Tuple2 (set1 (tuple2 b1 c1)) (tuple2 a1 a1) (t2tb131 x) (t2tb5 y))
  (times (tuple2 a1 a1) (set1 (tuple2 b1 c1)) (t2tb130 s) (t2tb4 t)))
  (and (mem9 x s) (mem12 y t)))))

(declare-fun t2tb1107 ((set (tuple21 (set (tuple21 b c)) a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 b c)) a)))) (sort
  (set1 (tuple2 (set1 (tuple2 b1 c1)) a1)) (t2tb1107 x))))

(declare-fun tb2t1107 (uni) (set (tuple21 (set (tuple21 b c)) a)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 b c)) a))))
  (! (= (tb2t1107 (t2tb1107 i)) i) :pattern ((t2tb1107 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 b1 c1)) a1)) j)
     (= (t2tb1107 (tb2t1107 j)) j)) :pattern ((t2tb1107 (tb2t1107 j))) )))

(declare-fun t2tb1108 ((tuple21 (set (tuple21 b c)) a)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 b c)) a))) (sort
  (tuple2 (set1 (tuple2 b1 c1)) a1) (t2tb1108 x))))

(declare-fun tb2t1108 (uni) (tuple21 (set (tuple21 b c)) a))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 b c)) a)))
  (! (= (tb2t1108 (t2tb1108 i)) i) :pattern ((t2tb1108 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 b1 c1)) a1) j)
     (= (t2tb1108 (tb2t1108 j)) j)) :pattern ((t2tb1108 (tb2t1108 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 b c)))) (t (set a)) (x (set (tuple21 b c)))
  (y a))
  (= (mem (tuple2 (set1 (tuple2 b1 c1)) a1)
  (Tuple2 (set1 (tuple2 b1 c1)) a1 (t2tb131 x) (t2tb2 y))
  (times a1 (set1 (tuple2 b1 c1)) (t2tb130 s) (t2tb1 t)))
  (and (mem9 x s) (mem1 y t)))))

;; mem_times
  (assert
  (forall ((b2 ty))
  (forall ((s (set (set (tuple21 b c)))) (t uni) (x (set (tuple21 b c)))
  (y uni))
  (= (mem (tuple2 (set1 (tuple2 b1 c1)) b2)
  (Tuple2 (set1 (tuple2 b1 c1)) b2 (t2tb131 x) y)
  (times b2 (set1 (tuple2 b1 c1)) (t2tb130 s) t))
  (and (mem9 x s) (mem b2 y t))))))

(declare-fun t2tb5509 ((tuple21 (tuple21 b c) (tuple21 (tuple21 a b)
  (tuple21 a c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b c) (tuple21 (tuple21 a b) (tuple21 a c)))))
  (sort (tuple2 (tuple2 b1 c1) (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)))
  (t2tb5509 x))))

(declare-fun tb2t5509 (uni) (tuple21 (tuple21 b c) (tuple21 (tuple21 a b)
  (tuple21 a c))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b c) (tuple21 (tuple21 a b) (tuple21 a c)))))
  (! (= (tb2t5509 (t2tb5509 i)) i) :pattern ((t2tb5509 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 c1) (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)))
     j) (= (t2tb5509 (tb2t5509 j)) j)) :pattern ((t2tb5509 (tb2t5509 j))) )))

(declare-fun t2tb5510 ((set (tuple21 (tuple21 b c) (tuple21 (tuple21 a b)
  (tuple21 a c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b c) (tuple21 (tuple21 a b) (tuple21 a
  c)))))) (sort
  (set1 (tuple2 (tuple2 b1 c1) (tuple2 (tuple2 a1 b1) (tuple2 a1 c1))))
  (t2tb5510 x))))

(declare-fun tb2t5510 (uni) (set (tuple21 (tuple21 b c) (tuple21 (tuple21 a
  b) (tuple21 a c)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b c) (tuple21 (tuple21 a b) (tuple21 a
  c)))))) (! (= (tb2t5510 (t2tb5510 i)) i) :pattern ((t2tb5510 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 b1 c1) (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)))) j)
     (= (t2tb5510 (tb2t5510 j)) j)) :pattern ((t2tb5510 (tb2t5510 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 b c))) (t (set (tuple21 (tuple21 a b) (tuple21 a
  c)))) (x (tuple21 b c)) (y (tuple21 (tuple21 a b) (tuple21 a c))))
  (= (mem (tuple2 (tuple2 b1 c1) (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)))
  (Tuple2 (tuple2 b1 c1) (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) (t2tb134 x)
  (t2tb239 y))
  (times (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) (tuple2 b1 c1) (t2tb131 s)
  (t2tb238 t))) (and (mem8 x s) (mem51 y t)))))

(declare-fun t2tb1109 ((set (tuple21 (tuple21 b c) (tuple21 a c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b c) (tuple21 a c))))) (sort
  (set1 (tuple2 (tuple2 b1 c1) (tuple2 a1 c1))) (t2tb1109 x))))

(declare-fun tb2t1109 (uni) (set (tuple21 (tuple21 b c) (tuple21 a c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b c) (tuple21 a c)))))
  (! (= (tb2t1109 (t2tb1109 i)) i) :pattern ((t2tb1109 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 c1) (tuple2 a1 c1))) j)
     (= (t2tb1109 (tb2t1109 j)) j)) :pattern ((t2tb1109 (tb2t1109 j))) )))

(declare-fun t2tb1110 ((tuple21 (tuple21 b c) (tuple21 a c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b c) (tuple21 a c)))) (sort
  (tuple2 (tuple2 b1 c1) (tuple2 a1 c1)) (t2tb1110 x))))

(declare-fun tb2t1110 (uni) (tuple21 (tuple21 b c) (tuple21 a c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b c) (tuple21 a c))))
  (! (= (tb2t1110 (t2tb1110 i)) i) :pattern ((t2tb1110 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 c1) (tuple2 a1 c1)) j)
     (= (t2tb1110 (tb2t1110 j)) j)) :pattern ((t2tb1110 (tb2t1110 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 b c))) (t (set (tuple21 a c))) (x (tuple21 b c))
  (y (tuple21 a c)))
  (= (mem (tuple2 (tuple2 b1 c1) (tuple2 a1 c1))
  (Tuple2 (tuple2 b1 c1) (tuple2 a1 c1) (t2tb134 x) (t2tb133 y))
  (times (tuple2 a1 c1) (tuple2 b1 c1) (t2tb131 s) (t2tb129 t)))
  (and (mem8 x s) (mem10 y t)))))

(declare-fun t2tb1111 ((set (tuple21 (tuple21 b c) (set (tuple21 b
  c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b c) (set (tuple21 b c)))))) (sort
  (set1 (tuple2 (tuple2 b1 c1) (set1 (tuple2 b1 c1)))) (t2tb1111 x))))

(declare-fun tb2t1111 (uni) (set (tuple21 (tuple21 b c) (set (tuple21 b
  c)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b c) (set (tuple21 b c))))))
  (! (= (tb2t1111 (t2tb1111 i)) i) :pattern ((t2tb1111 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 c1) (set1 (tuple2 b1 c1)))) j)
     (= (t2tb1111 (tb2t1111 j)) j)) :pattern ((t2tb1111 (tb2t1111 j))) )))

(declare-fun t2tb1112 ((tuple21 (tuple21 b c) (set (tuple21 b c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b c) (set (tuple21 b c))))) (sort
  (tuple2 (tuple2 b1 c1) (set1 (tuple2 b1 c1))) (t2tb1112 x))))

(declare-fun tb2t1112 (uni) (tuple21 (tuple21 b c) (set (tuple21 b c))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b c) (set (tuple21 b c)))))
  (! (= (tb2t1112 (t2tb1112 i)) i) :pattern ((t2tb1112 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 c1) (set1 (tuple2 b1 c1))) j)
     (= (t2tb1112 (tb2t1112 j)) j)) :pattern ((t2tb1112 (tb2t1112 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 b c))) (t (set (set (tuple21 b c))))
  (x (tuple21 b c)) (y (set (tuple21 b c))))
  (= (mem (tuple2 (tuple2 b1 c1) (set1 (tuple2 b1 c1)))
  (Tuple2 (tuple2 b1 c1) (set1 (tuple2 b1 c1)) (t2tb134 x) (t2tb131 y))
  (times (set1 (tuple2 b1 c1)) (tuple2 b1 c1) (t2tb131 s) (t2tb130 t)))
  (and (mem8 x s) (mem9 y t)))))

(declare-fun t2tb1113 ((set (tuple21 (tuple21 b c) (tuple21 b c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b c) (tuple21 b c))))) (sort
  (set1 (tuple2 (tuple2 b1 c1) (tuple2 b1 c1))) (t2tb1113 x))))

(declare-fun tb2t1113 (uni) (set (tuple21 (tuple21 b c) (tuple21 b c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b c) (tuple21 b c)))))
  (! (= (tb2t1113 (t2tb1113 i)) i) :pattern ((t2tb1113 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 c1) (tuple2 b1 c1))) j)
     (= (t2tb1113 (tb2t1113 j)) j)) :pattern ((t2tb1113 (tb2t1113 j))) )))

(declare-fun t2tb1114 ((tuple21 (tuple21 b c) (tuple21 b c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b c) (tuple21 b c)))) (sort
  (tuple2 (tuple2 b1 c1) (tuple2 b1 c1)) (t2tb1114 x))))

(declare-fun tb2t1114 (uni) (tuple21 (tuple21 b c) (tuple21 b c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b c) (tuple21 b c))))
  (! (= (tb2t1114 (t2tb1114 i)) i) :pattern ((t2tb1114 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 c1) (tuple2 b1 c1)) j)
     (= (t2tb1114 (tb2t1114 j)) j)) :pattern ((t2tb1114 (tb2t1114 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 b c))) (t (set (tuple21 b c))) (x (tuple21 b c))
  (y (tuple21 b c)))
  (= (mem (tuple2 (tuple2 b1 c1) (tuple2 b1 c1))
  (Tuple2 (tuple2 b1 c1) (tuple2 b1 c1) (t2tb134 x) (t2tb134 y))
  (times (tuple2 b1 c1) (tuple2 b1 c1) (t2tb131 s) (t2tb131 t)))
  (and (mem8 x s) (mem8 y t)))))

(declare-fun t2tb1115 ((set (tuple21 (tuple21 b c) c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b c) c)))) (sort
  (set1 (tuple2 (tuple2 b1 c1) c1)) (t2tb1115 x))))

(declare-fun tb2t1115 (uni) (set (tuple21 (tuple21 b c) c)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b c) c))))
  (! (= (tb2t1115 (t2tb1115 i)) i) :pattern ((t2tb1115 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 c1) c1)) j)
     (= (t2tb1115 (tb2t1115 j)) j)) :pattern ((t2tb1115 (tb2t1115 j))) )))

(declare-fun t2tb1116 ((tuple21 (tuple21 b c) c)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b c) c))) (sort (tuple2 (tuple2 b1 c1) c1)
  (t2tb1116 x))))

(declare-fun tb2t1116 (uni) (tuple21 (tuple21 b c) c))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b c) c)))
  (! (= (tb2t1116 (t2tb1116 i)) i) :pattern ((t2tb1116 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 c1) c1) j) (= (t2tb1116 (tb2t1116 j)) j)) :pattern (
  (t2tb1116 (tb2t1116 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 b c))) (t (set c)) (x (tuple21 b c)) (y c))
  (= (mem (tuple2 (tuple2 b1 c1) c1)
  (Tuple2 (tuple2 b1 c1) c1 (t2tb134 x) (t2tb135 y))
  (times c1 (tuple2 b1 c1) (t2tb131 s) (t2tb132 t)))
  (and (mem8 x s) (mem7 y t)))))

(declare-fun t2tb1117 ((set (tuple21 (tuple21 b c) (set (tuple21 a
  b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b c) (set (tuple21 a b)))))) (sort
  (set1 (tuple2 (tuple2 b1 c1) (set1 (tuple2 a1 b1)))) (t2tb1117 x))))

(declare-fun tb2t1117 (uni) (set (tuple21 (tuple21 b c) (set (tuple21 a
  b)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b c) (set (tuple21 a b))))))
  (! (= (tb2t1117 (t2tb1117 i)) i) :pattern ((t2tb1117 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 c1) (set1 (tuple2 a1 b1)))) j)
     (= (t2tb1117 (tb2t1117 j)) j)) :pattern ((t2tb1117 (tb2t1117 j))) )))

(declare-fun t2tb1118 ((tuple21 (tuple21 b c) (set (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b c) (set (tuple21 a b))))) (sort
  (tuple2 (tuple2 b1 c1) (set1 (tuple2 a1 b1))) (t2tb1118 x))))

(declare-fun tb2t1118 (uni) (tuple21 (tuple21 b c) (set (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b c) (set (tuple21 a b)))))
  (! (= (tb2t1118 (t2tb1118 i)) i) :pattern ((t2tb1118 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 c1) (set1 (tuple2 a1 b1))) j)
     (= (t2tb1118 (tb2t1118 j)) j)) :pattern ((t2tb1118 (tb2t1118 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 b c))) (t (set (set (tuple21 a b))))
  (x (tuple21 b c)) (y (set (tuple21 a b))))
  (= (mem (tuple2 (tuple2 b1 c1) (set1 (tuple2 a1 b1)))
  (Tuple2 (tuple2 b1 c1) (set1 (tuple2 a1 b1)) (t2tb134 x) (t2tb11 y))
  (times (set1 (tuple2 a1 b1)) (tuple2 b1 c1) (t2tb131 s) (t2tb10 t)))
  (and (mem8 x s) (mem4 y t)))))

(declare-fun t2tb1119 ((set (tuple21 (tuple21 b c) (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b c) (tuple21 a b))))) (sort
  (set1 (tuple2 (tuple2 b1 c1) (tuple2 a1 b1))) (t2tb1119 x))))

(declare-fun tb2t1119 (uni) (set (tuple21 (tuple21 b c) (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b c) (tuple21 a b)))))
  (! (= (tb2t1119 (t2tb1119 i)) i) :pattern ((t2tb1119 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 c1) (tuple2 a1 b1))) j)
     (= (t2tb1119 (tb2t1119 j)) j)) :pattern ((t2tb1119 (tb2t1119 j))) )))

(declare-fun t2tb1120 ((tuple21 (tuple21 b c) (tuple21 a b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b c) (tuple21 a b)))) (sort
  (tuple2 (tuple2 b1 c1) (tuple2 a1 b1)) (t2tb1120 x))))

(declare-fun tb2t1120 (uni) (tuple21 (tuple21 b c) (tuple21 a b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b c) (tuple21 a b))))
  (! (= (tb2t1120 (t2tb1120 i)) i) :pattern ((t2tb1120 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 c1) (tuple2 a1 b1)) j)
     (= (t2tb1120 (tb2t1120 j)) j)) :pattern ((t2tb1120 (tb2t1120 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 b c))) (t (set (tuple21 a b))) (x (tuple21 b c))
  (y (tuple21 a b)))
  (= (mem (tuple2 (tuple2 b1 c1) (tuple2 a1 b1))
  (Tuple2 (tuple2 b1 c1) (tuple2 a1 b1) (t2tb134 x) (t2tb13 y))
  (times (tuple2 a1 b1) (tuple2 b1 c1) (t2tb131 s) (t2tb11 t)))
  (and (mem8 x s) (mem3 y t)))))

(declare-fun t2tb1121 ((set (tuple21 (tuple21 b c) b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b c) b)))) (sort
  (set1 (tuple2 (tuple2 b1 c1) b1)) (t2tb1121 x))))

(declare-fun tb2t1121 (uni) (set (tuple21 (tuple21 b c) b)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b c) b))))
  (! (= (tb2t1121 (t2tb1121 i)) i) :pattern ((t2tb1121 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 c1) b1)) j)
     (= (t2tb1121 (tb2t1121 j)) j)) :pattern ((t2tb1121 (tb2t1121 j))) )))

(declare-fun t2tb1122 ((tuple21 (tuple21 b c) b)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b c) b))) (sort (tuple2 (tuple2 b1 c1) b1)
  (t2tb1122 x))))

(declare-fun tb2t1122 (uni) (tuple21 (tuple21 b c) b))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b c) b)))
  (! (= (tb2t1122 (t2tb1122 i)) i) :pattern ((t2tb1122 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 c1) b1) j) (= (t2tb1122 (tb2t1122 j)) j)) :pattern (
  (t2tb1122 (tb2t1122 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 b c))) (t (set b)) (x (tuple21 b c)) (y b))
  (= (mem (tuple2 (tuple2 b1 c1) b1)
  (Tuple2 (tuple2 b1 c1) b1 (t2tb134 x) (t2tb14 y))
  (times b1 (tuple2 b1 c1) (t2tb131 s) (t2tb12 t)))
  (and (mem8 x s) (mem2 y t)))))

(declare-fun t2tb5511 ((set (tuple21 (tuple21 b c) (tuple21 a a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b c) (tuple21 a a))))) (sort
  (set1 (tuple2 (tuple2 b1 c1) (tuple2 a1 a1))) (t2tb5511 x))))

(declare-fun tb2t5511 (uni) (set (tuple21 (tuple21 b c) (tuple21 a a))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b c) (tuple21 a a)))))
  (! (= (tb2t5511 (t2tb5511 i)) i) :pattern ((t2tb5511 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 c1) (tuple2 a1 a1))) j)
     (= (t2tb5511 (tb2t5511 j)) j)) :pattern ((t2tb5511 (tb2t5511 j))) )))

(declare-fun t2tb5512 ((tuple21 (tuple21 b c) (tuple21 a a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b c) (tuple21 a a)))) (sort
  (tuple2 (tuple2 b1 c1) (tuple2 a1 a1)) (t2tb5512 x))))

(declare-fun tb2t5512 (uni) (tuple21 (tuple21 b c) (tuple21 a a)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b c) (tuple21 a a))))
  (! (= (tb2t5512 (t2tb5512 i)) i) :pattern ((t2tb5512 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 c1) (tuple2 a1 a1)) j)
     (= (t2tb5512 (tb2t5512 j)) j)) :pattern ((t2tb5512 (tb2t5512 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 b c))) (t (set (tuple21 a a))) (x (tuple21 b c))
  (y (tuple21 a a)))
  (= (mem (tuple2 (tuple2 b1 c1) (tuple2 a1 a1))
  (Tuple2 (tuple2 b1 c1) (tuple2 a1 a1) (t2tb134 x) (t2tb5 y))
  (times (tuple2 a1 a1) (tuple2 b1 c1) (t2tb131 s) (t2tb4 t)))
  (and (mem8 x s) (mem12 y t)))))

(declare-fun t2tb1123 ((tuple21 (tuple21 b c) a)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b c) a))) (sort (tuple2 (tuple2 b1 c1) a1)
  (t2tb1123 x))))

(declare-fun tb2t1123 (uni) (tuple21 (tuple21 b c) a))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b c) a)))
  (! (= (tb2t1123 (t2tb1123 i)) i) :pattern ((t2tb1123 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 c1) a1) j) (= (t2tb1123 (tb2t1123 j)) j)) :pattern (
  (t2tb1123 (tb2t1123 j))) )))

(declare-fun t2tb1124 ((set (tuple21 (tuple21 b c) a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b c) a)))) (sort
  (set1 (tuple2 (tuple2 b1 c1) a1)) (t2tb1124 x))))

(declare-fun tb2t1124 (uni) (set (tuple21 (tuple21 b c) a)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b c) a))))
  (! (= (tb2t1124 (t2tb1124 i)) i) :pattern ((t2tb1124 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 c1) a1)) j)
     (= (t2tb1124 (tb2t1124 j)) j)) :pattern ((t2tb1124 (tb2t1124 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 b c))) (t (set a)) (x (tuple21 b c)) (y a))
  (= (mem (tuple2 (tuple2 b1 c1) a1)
  (Tuple2 (tuple2 b1 c1) a1 (t2tb134 x) (t2tb2 y))
  (times a1 (tuple2 b1 c1) (t2tb131 s) (t2tb1 t)))
  (and (mem8 x s) (mem1 y t)))))

;; mem_times
  (assert
  (forall ((b2 ty))
  (forall ((s (set (tuple21 b c))) (t uni) (x (tuple21 b c)) (y uni))
  (= (mem (tuple2 (tuple2 b1 c1) b2) (Tuple2 (tuple2 b1 c1) b2 (t2tb134 x) y)
  (times b2 (tuple2 b1 c1) (t2tb131 s) t)) (and (mem8 x s) (mem b2 y t))))))

(declare-fun t2tb5513 ((set (tuple21 c (tuple21 (tuple21 a b) (tuple21 a
  c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 c (tuple21 (tuple21 a b) (tuple21 a c)))))) (sort
  (set1 (tuple2 c1 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)))) (t2tb5513 x))))

(declare-fun tb2t5513 (uni) (set (tuple21 c (tuple21 (tuple21 a b) (tuple21 a
  c)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 c (tuple21 (tuple21 a b) (tuple21 a c))))))
  (! (= (tb2t5513 (t2tb5513 i)) i) :pattern ((t2tb5513 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 c1 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)))) j)
     (= (t2tb5513 (tb2t5513 j)) j)) :pattern ((t2tb5513 (tb2t5513 j))) )))

(declare-fun t2tb5514 ((tuple21 c (tuple21 (tuple21 a b) (tuple21 a
  c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 c (tuple21 (tuple21 a b) (tuple21 a c))))) (sort
  (tuple2 c1 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1))) (t2tb5514 x))))

(declare-fun tb2t5514 (uni) (tuple21 c (tuple21 (tuple21 a b) (tuple21 a
  c))))

;; BridgeL
  (assert
  (forall ((i (tuple21 c (tuple21 (tuple21 a b) (tuple21 a c)))))
  (! (= (tb2t5514 (t2tb5514 i)) i) :pattern ((t2tb5514 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 c1 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1))) j)
     (= (t2tb5514 (tb2t5514 j)) j)) :pattern ((t2tb5514 (tb2t5514 j))) )))

;; mem_times
  (assert
  (forall ((s (set c)) (t (set (tuple21 (tuple21 a b) (tuple21 a c)))) (x c)
  (y (tuple21 (tuple21 a b) (tuple21 a c))))
  (= (mem (tuple2 c1 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)))
  (Tuple2 c1 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) (t2tb135 x) (t2tb239 y))
  (times (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) c1 (t2tb132 s) (t2tb238 t)))
  (and (mem7 x s) (mem51 y t)))))

(declare-fun t2tb210 ((set (tuple21 c (tuple21 a c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 c (tuple21 a c))))) (sort
  (set1 (tuple2 c1 (tuple2 a1 c1))) (t2tb210 x))))

(declare-fun tb2t210 (uni) (set (tuple21 c (tuple21 a c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 c (tuple21 a c)))))
  (! (= (tb2t210 (t2tb210 i)) i) :pattern ((t2tb210 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 c1 (tuple2 a1 c1))) j)
     (= (t2tb210 (tb2t210 j)) j)) :pattern ((t2tb210 (tb2t210 j))) )))

(declare-fun t2tb211 ((tuple21 c (tuple21 a c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 c (tuple21 a c)))) (sort (tuple2 c1 (tuple2 a1 c1))
  (t2tb211 x))))

(declare-fun tb2t211 (uni) (tuple21 c (tuple21 a c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 c (tuple21 a c))))
  (! (= (tb2t211 (t2tb211 i)) i) :pattern ((t2tb211 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 c1 (tuple2 a1 c1)) j) (= (t2tb211 (tb2t211 j)) j)) :pattern (
  (t2tb211 (tb2t211 j))) )))

;; mem_times
  (assert
  (forall ((s (set c)) (t (set (tuple21 a c))) (x c) (y (tuple21 a c)))
  (= (mem (tuple2 c1 (tuple2 a1 c1))
  (Tuple2 c1 (tuple2 a1 c1) (t2tb135 x) (t2tb133 y))
  (times (tuple2 a1 c1) c1 (t2tb132 s) (t2tb129 t)))
  (and (mem7 x s) (mem10 y t)))))

(declare-fun t2tb1125 ((set (tuple21 c (set (tuple21 b c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 c (set (tuple21 b c)))))) (sort
  (set1 (tuple2 c1 (set1 (tuple2 b1 c1)))) (t2tb1125 x))))

(declare-fun tb2t1125 (uni) (set (tuple21 c (set (tuple21 b c)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 c (set (tuple21 b c))))))
  (! (= (tb2t1125 (t2tb1125 i)) i) :pattern ((t2tb1125 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 c1 (set1 (tuple2 b1 c1)))) j)
     (= (t2tb1125 (tb2t1125 j)) j)) :pattern ((t2tb1125 (tb2t1125 j))) )))

(declare-fun t2tb1126 ((tuple21 c (set (tuple21 b c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 c (set (tuple21 b c))))) (sort
  (tuple2 c1 (set1 (tuple2 b1 c1))) (t2tb1126 x))))

(declare-fun tb2t1126 (uni) (tuple21 c (set (tuple21 b c))))

;; BridgeL
  (assert
  (forall ((i (tuple21 c (set (tuple21 b c)))))
  (! (= (tb2t1126 (t2tb1126 i)) i) :pattern ((t2tb1126 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 c1 (set1 (tuple2 b1 c1))) j)
     (= (t2tb1126 (tb2t1126 j)) j)) :pattern ((t2tb1126 (tb2t1126 j))) )))

;; mem_times
  (assert
  (forall ((s (set c)) (t (set (set (tuple21 b c)))) (x c) (y (set (tuple21 b
  c))))
  (= (mem (tuple2 c1 (set1 (tuple2 b1 c1)))
  (Tuple2 c1 (set1 (tuple2 b1 c1)) (t2tb135 x) (t2tb131 y))
  (times (set1 (tuple2 b1 c1)) c1 (t2tb132 s) (t2tb130 t)))
  (and (mem7 x s) (mem9 y t)))))

(declare-fun t2tb1127 ((set (tuple21 c (tuple21 b c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 c (tuple21 b c))))) (sort
  (set1 (tuple2 c1 (tuple2 b1 c1))) (t2tb1127 x))))

(declare-fun tb2t1127 (uni) (set (tuple21 c (tuple21 b c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 c (tuple21 b c)))))
  (! (= (tb2t1127 (t2tb1127 i)) i) :pattern ((t2tb1127 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 c1 (tuple2 b1 c1))) j)
     (= (t2tb1127 (tb2t1127 j)) j)) :pattern ((t2tb1127 (tb2t1127 j))) )))

(declare-fun t2tb1128 ((tuple21 c (tuple21 b c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 c (tuple21 b c)))) (sort (tuple2 c1 (tuple2 b1 c1))
  (t2tb1128 x))))

(declare-fun tb2t1128 (uni) (tuple21 c (tuple21 b c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 c (tuple21 b c))))
  (! (= (tb2t1128 (t2tb1128 i)) i) :pattern ((t2tb1128 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 c1 (tuple2 b1 c1)) j) (= (t2tb1128 (tb2t1128 j)) j)) :pattern (
  (t2tb1128 (tb2t1128 j))) )))

;; mem_times
  (assert
  (forall ((s (set c)) (t (set (tuple21 b c))) (x c) (y (tuple21 b c)))
  (= (mem (tuple2 c1 (tuple2 b1 c1))
  (Tuple2 c1 (tuple2 b1 c1) (t2tb135 x) (t2tb134 y))
  (times (tuple2 b1 c1) c1 (t2tb132 s) (t2tb131 t)))
  (and (mem7 x s) (mem8 y t)))))

(declare-fun t2tb216 ((set (tuple21 c c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 c c)))) (sort (set1 (tuple2 c1 c1)) (t2tb216 x))))

(declare-fun tb2t216 (uni) (set (tuple21 c c)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 c c))))
  (! (= (tb2t216 (t2tb216 i)) i) :pattern ((t2tb216 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 c1 c1)) j) (= (t2tb216 (tb2t216 j)) j)) :pattern (
  (t2tb216 (tb2t216 j))) )))

(declare-fun t2tb217 ((tuple21 c c)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 c c))) (sort (tuple2 c1 c1) (t2tb217 x))))

(declare-fun tb2t217 (uni) (tuple21 c c))

;; BridgeL
  (assert
  (forall ((i (tuple21 c c)))
  (! (= (tb2t217 (t2tb217 i)) i) :pattern ((t2tb217 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 c1 c1) j) (= (t2tb217 (tb2t217 j)) j)) :pattern (
  (t2tb217 (tb2t217 j))) )))

;; mem_times
  (assert
  (forall ((s (set c)) (t (set c)) (x c) (y c))
  (= (mem (tuple2 c1 c1) (Tuple2 c1 c1 (t2tb135 x) (t2tb135 y))
  (times c1 c1 (t2tb132 s) (t2tb132 t))) (and (mem7 x s) (mem7 y t)))))

(declare-fun t2tb218 ((set (tuple21 c (set (tuple21 a b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 c (set (tuple21 a b)))))) (sort
  (set1 (tuple2 c1 (set1 (tuple2 a1 b1)))) (t2tb218 x))))

(declare-fun tb2t218 (uni) (set (tuple21 c (set (tuple21 a b)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 c (set (tuple21 a b))))))
  (! (= (tb2t218 (t2tb218 i)) i) :pattern ((t2tb218 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 c1 (set1 (tuple2 a1 b1)))) j)
     (= (t2tb218 (tb2t218 j)) j)) :pattern ((t2tb218 (tb2t218 j))) )))

(declare-fun t2tb219 ((tuple21 c (set (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 c (set (tuple21 a b))))) (sort
  (tuple2 c1 (set1 (tuple2 a1 b1))) (t2tb219 x))))

(declare-fun tb2t219 (uni) (tuple21 c (set (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (tuple21 c (set (tuple21 a b)))))
  (! (= (tb2t219 (t2tb219 i)) i) :pattern ((t2tb219 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 c1 (set1 (tuple2 a1 b1))) j)
     (= (t2tb219 (tb2t219 j)) j)) :pattern ((t2tb219 (tb2t219 j))) )))

;; mem_times
  (assert
  (forall ((s (set c)) (t (set (set (tuple21 a b)))) (x c) (y (set (tuple21 a
  b))))
  (= (mem (tuple2 c1 (set1 (tuple2 a1 b1)))
  (Tuple2 c1 (set1 (tuple2 a1 b1)) (t2tb135 x) (t2tb11 y))
  (times (set1 (tuple2 a1 b1)) c1 (t2tb132 s) (t2tb10 t)))
  (and (mem7 x s) (mem4 y t)))))

(declare-fun t2tb220 ((set (tuple21 c (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 c (tuple21 a b))))) (sort
  (set1 (tuple2 c1 (tuple2 a1 b1))) (t2tb220 x))))

(declare-fun tb2t220 (uni) (set (tuple21 c (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 c (tuple21 a b)))))
  (! (= (tb2t220 (t2tb220 i)) i) :pattern ((t2tb220 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 c1 (tuple2 a1 b1))) j)
     (= (t2tb220 (tb2t220 j)) j)) :pattern ((t2tb220 (tb2t220 j))) )))

(declare-fun t2tb221 ((tuple21 c (tuple21 a b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 c (tuple21 a b)))) (sort (tuple2 c1 (tuple2 a1 b1))
  (t2tb221 x))))

(declare-fun tb2t221 (uni) (tuple21 c (tuple21 a b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 c (tuple21 a b))))
  (! (= (tb2t221 (t2tb221 i)) i) :pattern ((t2tb221 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 c1 (tuple2 a1 b1)) j) (= (t2tb221 (tb2t221 j)) j)) :pattern (
  (t2tb221 (tb2t221 j))) )))

;; mem_times
  (assert
  (forall ((s (set c)) (t (set (tuple21 a b))) (x c) (y (tuple21 a b)))
  (= (mem (tuple2 c1 (tuple2 a1 b1))
  (Tuple2 c1 (tuple2 a1 b1) (t2tb135 x) (t2tb13 y))
  (times (tuple2 a1 b1) c1 (t2tb132 s) (t2tb11 t)))
  (and (mem7 x s) (mem3 y t)))))

(declare-fun t2tb222 ((set (tuple21 c b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 c b)))) (sort (set1 (tuple2 c1 b1)) (t2tb222 x))))

(declare-fun tb2t222 (uni) (set (tuple21 c b)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 c b))))
  (! (= (tb2t222 (t2tb222 i)) i) :pattern ((t2tb222 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 c1 b1)) j) (= (t2tb222 (tb2t222 j)) j)) :pattern (
  (t2tb222 (tb2t222 j))) )))

(declare-fun t2tb223 ((tuple21 c b)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 c b))) (sort (tuple2 c1 b1) (t2tb223 x))))

(declare-fun tb2t223 (uni) (tuple21 c b))

;; BridgeL
  (assert
  (forall ((i (tuple21 c b)))
  (! (= (tb2t223 (t2tb223 i)) i) :pattern ((t2tb223 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 c1 b1) j) (= (t2tb223 (tb2t223 j)) j)) :pattern (
  (t2tb223 (tb2t223 j))) )))

;; mem_times
  (assert
  (forall ((s (set c)) (t (set b)) (x c) (y b))
  (= (mem (tuple2 c1 b1) (Tuple2 c1 b1 (t2tb135 x) (t2tb14 y))
  (times b1 c1 (t2tb132 s) (t2tb12 t))) (and (mem7 x s) (mem2 y t)))))

(declare-fun t2tb5515 ((set (tuple21 c (tuple21 a a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 c (tuple21 a a))))) (sort
  (set1 (tuple2 c1 (tuple2 a1 a1))) (t2tb5515 x))))

(declare-fun tb2t5515 (uni) (set (tuple21 c (tuple21 a a))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 c (tuple21 a a)))))
  (! (= (tb2t5515 (t2tb5515 i)) i) :pattern ((t2tb5515 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 c1 (tuple2 a1 a1))) j)
     (= (t2tb5515 (tb2t5515 j)) j)) :pattern ((t2tb5515 (tb2t5515 j))) )))

(declare-fun t2tb5516 ((tuple21 c (tuple21 a a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 c (tuple21 a a)))) (sort (tuple2 c1 (tuple2 a1 a1))
  (t2tb5516 x))))

(declare-fun tb2t5516 (uni) (tuple21 c (tuple21 a a)))

;; BridgeL
  (assert
  (forall ((i (tuple21 c (tuple21 a a))))
  (! (= (tb2t5516 (t2tb5516 i)) i) :pattern ((t2tb5516 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 c1 (tuple2 a1 a1)) j) (= (t2tb5516 (tb2t5516 j)) j)) :pattern (
  (t2tb5516 (tb2t5516 j))) )))

;; mem_times
  (assert
  (forall ((s (set c)) (t (set (tuple21 a a))) (x c) (y (tuple21 a a)))
  (= (mem (tuple2 c1 (tuple2 a1 a1))
  (Tuple2 c1 (tuple2 a1 a1) (t2tb135 x) (t2tb5 y))
  (times (tuple2 a1 a1) c1 (t2tb132 s) (t2tb4 t)))
  (and (mem7 x s) (mem12 y t)))))

(declare-fun t2tb224 ((set (tuple21 c a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 c a)))) (sort (set1 (tuple2 c1 a1)) (t2tb224 x))))

(declare-fun tb2t224 (uni) (set (tuple21 c a)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 c a))))
  (! (= (tb2t224 (t2tb224 i)) i) :pattern ((t2tb224 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 c1 a1)) j) (= (t2tb224 (tb2t224 j)) j)) :pattern (
  (t2tb224 (tb2t224 j))) )))

(declare-fun t2tb225 ((tuple21 c a)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 c a))) (sort (tuple2 c1 a1) (t2tb225 x))))

(declare-fun tb2t225 (uni) (tuple21 c a))

;; BridgeL
  (assert
  (forall ((i (tuple21 c a)))
  (! (= (tb2t225 (t2tb225 i)) i) :pattern ((t2tb225 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 c1 a1) j) (= (t2tb225 (tb2t225 j)) j)) :pattern (
  (t2tb225 (tb2t225 j))) )))

;; mem_times
  (assert
  (forall ((s (set c)) (t (set a)) (x c) (y a))
  (= (mem (tuple2 c1 a1) (Tuple2 c1 a1 (t2tb135 x) (t2tb2 y))
  (times a1 c1 (t2tb132 s) (t2tb1 t))) (and (mem7 x s) (mem1 y t)))))

;; mem_times
  (assert
  (forall ((b2 ty))
  (forall ((s (set c)) (t uni) (x c) (y uni))
  (= (mem (tuple2 c1 b2) (Tuple2 c1 b2 (t2tb135 x) y)
  (times b2 c1 (t2tb132 s) t)) (and (mem7 x s) (mem b2 y t))))))

(declare-fun t2tb5517 ((set (tuple21 (set (tuple21 a b)) (tuple21 (tuple21 a
  b) (tuple21 a c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a b)) (tuple21 (tuple21 a b)
  (tuple21 a c)))))) (sort
  (set1
  (tuple2 (set1 (tuple2 a1 b1)) (tuple2 (tuple2 a1 b1) (tuple2 a1 c1))))
  (t2tb5517 x))))

(declare-fun tb2t5517 (uni) (set (tuple21 (set (tuple21 a b))
  (tuple21 (tuple21 a b) (tuple21 a c)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a b)) (tuple21 (tuple21 a b)
  (tuple21 a c))))))
  (! (= (tb2t5517 (t2tb5517 i)) i) :pattern ((t2tb5517 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (tuple2 (set1 (tuple2 a1 b1)) (tuple2 (tuple2 a1 b1) (tuple2 a1 c1))))
     j) (= (t2tb5517 (tb2t5517 j)) j)) :pattern ((t2tb5517 (tb2t5517 j))) )))

(declare-fun t2tb5518 ((tuple21 (set (tuple21 a b)) (tuple21 (tuple21 a b)
  (tuple21 a c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a b)) (tuple21 (tuple21 a b) (tuple21 a
  c))))) (sort
  (tuple2 (set1 (tuple2 a1 b1)) (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)))
  (t2tb5518 x))))

(declare-fun tb2t5518 (uni) (tuple21 (set (tuple21 a b)) (tuple21 (tuple21 a
  b) (tuple21 a c))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a b)) (tuple21 (tuple21 a b) (tuple21 a
  c))))) (! (= (tb2t5518 (t2tb5518 i)) i) :pattern ((t2tb5518 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (tuple2 (set1 (tuple2 a1 b1)) (tuple2 (tuple2 a1 b1) (tuple2 a1 c1))) j)
     (= (t2tb5518 (tb2t5518 j)) j)) :pattern ((t2tb5518 (tb2t5518 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set (tuple21 (tuple21 a b)
  (tuple21 a c)))) (x (set (tuple21 a b))) (y (tuple21 (tuple21 a b)
  (tuple21 a c))))
  (= (mem
  (tuple2 (set1 (tuple2 a1 b1)) (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)))
  (Tuple2 (set1 (tuple2 a1 b1)) (tuple2 (tuple2 a1 b1) (tuple2 a1 c1))
  (t2tb11 x) (t2tb239 y))
  (times (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) (set1 (tuple2 a1 b1))
  (t2tb10 s) (t2tb238 t))) (and (mem4 x s) (mem51 y t)))))

(declare-fun t2tb228 ((tuple21 (set (tuple21 a b)) (tuple21 a c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a b)) (tuple21 a c)))) (sort
  (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 c1)) (t2tb228 x))))

(declare-fun tb2t228 (uni) (tuple21 (set (tuple21 a b)) (tuple21 a c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a b)) (tuple21 a c))))
  (! (= (tb2t228 (t2tb228 i)) i) :pattern ((t2tb228 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 c1)) j)
     (= (t2tb228 (tb2t228 j)) j)) :pattern ((t2tb228 (tb2t228 j))) )))

(declare-fun t2tb229 ((set (tuple21 (set (tuple21 a b)) (tuple21 a c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a b)) (tuple21 a c))))) (sort
  (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 c1))) (t2tb229 x))))

(declare-fun tb2t229 (uni) (set (tuple21 (set (tuple21 a b)) (tuple21 a c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a b)) (tuple21 a c)))))
  (! (= (tb2t229 (t2tb229 i)) i) :pattern ((t2tb229 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 c1))) j)
     (= (t2tb229 (tb2t229 j)) j)) :pattern ((t2tb229 (tb2t229 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set (tuple21 a c)))
  (x (set (tuple21 a b))) (y (tuple21 a c)))
  (= (mem (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 c1))
  (Tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 c1) (t2tb11 x) (t2tb133 y))
  (times (tuple2 a1 c1) (set1 (tuple2 a1 b1)) (t2tb10 s) (t2tb129 t)))
  (and (mem4 x s) (mem10 y t)))))

(declare-fun t2tb1129 ((set (tuple21 (set (tuple21 a b)) (set (tuple21 b
  c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a b)) (set (tuple21 b c)))))) (sort
  (set1 (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 b1 c1)))) (t2tb1129 x))))

(declare-fun tb2t1129 (uni) (set (tuple21 (set (tuple21 a b)) (set (tuple21 b
  c)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a b)) (set (tuple21 b c))))))
  (! (= (tb2t1129 (t2tb1129 i)) i) :pattern ((t2tb1129 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 b1 c1)))) j)
     (= (t2tb1129 (tb2t1129 j)) j)) :pattern ((t2tb1129 (tb2t1129 j))) )))

(declare-fun t2tb1130 ((tuple21 (set (tuple21 a b)) (set (tuple21 b
  c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a b)) (set (tuple21 b c))))) (sort
  (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 b1 c1))) (t2tb1130 x))))

(declare-fun tb2t1130 (uni) (tuple21 (set (tuple21 a b)) (set (tuple21 b
  c))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a b)) (set (tuple21 b c)))))
  (! (= (tb2t1130 (t2tb1130 i)) i) :pattern ((t2tb1130 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 b1 c1))) j)
     (= (t2tb1130 (tb2t1130 j)) j)) :pattern ((t2tb1130 (tb2t1130 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set (set (tuple21 b c))))
  (x (set (tuple21 a b))) (y (set (tuple21 b c))))
  (= (mem (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 b1 c1)))
  (Tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 b1 c1)) (t2tb11 x) (t2tb131 y))
  (times (set1 (tuple2 b1 c1)) (set1 (tuple2 a1 b1)) (t2tb10 s) (t2tb130 t)))
  (and (mem4 x s) (mem9 y t)))))

(declare-fun t2tb1131 ((set (tuple21 (set (tuple21 a b)) (tuple21 b
  c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a b)) (tuple21 b c))))) (sort
  (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 b1 c1))) (t2tb1131 x))))

(declare-fun tb2t1131 (uni) (set (tuple21 (set (tuple21 a b)) (tuple21 b
  c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a b)) (tuple21 b c)))))
  (! (= (tb2t1131 (t2tb1131 i)) i) :pattern ((t2tb1131 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 b1 c1))) j)
     (= (t2tb1131 (tb2t1131 j)) j)) :pattern ((t2tb1131 (tb2t1131 j))) )))

(declare-fun t2tb1132 ((tuple21 (set (tuple21 a b)) (tuple21 b c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a b)) (tuple21 b c)))) (sort
  (tuple2 (set1 (tuple2 a1 b1)) (tuple2 b1 c1)) (t2tb1132 x))))

(declare-fun tb2t1132 (uni) (tuple21 (set (tuple21 a b)) (tuple21 b c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a b)) (tuple21 b c))))
  (! (= (tb2t1132 (t2tb1132 i)) i) :pattern ((t2tb1132 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 a1 b1)) (tuple2 b1 c1)) j)
     (= (t2tb1132 (tb2t1132 j)) j)) :pattern ((t2tb1132 (tb2t1132 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set (tuple21 b c)))
  (x (set (tuple21 a b))) (y (tuple21 b c)))
  (= (mem (tuple2 (set1 (tuple2 a1 b1)) (tuple2 b1 c1))
  (Tuple2 (set1 (tuple2 a1 b1)) (tuple2 b1 c1) (t2tb11 x) (t2tb134 y))
  (times (tuple2 b1 c1) (set1 (tuple2 a1 b1)) (t2tb10 s) (t2tb131 t)))
  (and (mem4 x s) (mem8 y t)))))

(declare-fun t2tb234 ((set (tuple21 (set (tuple21 a b)) c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a b)) c)))) (sort
  (set1 (tuple2 (set1 (tuple2 a1 b1)) c1)) (t2tb234 x))))

(declare-fun tb2t234 (uni) (set (tuple21 (set (tuple21 a b)) c)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a b)) c))))
  (! (= (tb2t234 (t2tb234 i)) i) :pattern ((t2tb234 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 a1 b1)) c1)) j)
     (= (t2tb234 (tb2t234 j)) j)) :pattern ((t2tb234 (tb2t234 j))) )))

(declare-fun t2tb235 ((tuple21 (set (tuple21 a b)) c)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a b)) c))) (sort
  (tuple2 (set1 (tuple2 a1 b1)) c1) (t2tb235 x))))

(declare-fun tb2t235 (uni) (tuple21 (set (tuple21 a b)) c))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a b)) c)))
  (! (= (tb2t235 (t2tb235 i)) i) :pattern ((t2tb235 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 a1 b1)) c1) j)
     (= (t2tb235 (tb2t235 j)) j)) :pattern ((t2tb235 (tb2t235 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set c)) (x (set (tuple21 a b)))
  (y c))
  (= (mem (tuple2 (set1 (tuple2 a1 b1)) c1)
  (Tuple2 (set1 (tuple2 a1 b1)) c1 (t2tb11 x) (t2tb135 y))
  (times c1 (set1 (tuple2 a1 b1)) (t2tb10 s) (t2tb132 t)))
  (and (mem4 x s) (mem7 y t)))))

(declare-fun t2tb15 ((set (tuple21 (set (tuple21 a b)) (set (tuple21 a
  b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a b)) (set (tuple21 a b)))))) (sort
  (set1 (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1)))) (t2tb15 x))))

(declare-fun tb2t15 (uni) (set (tuple21 (set (tuple21 a b)) (set (tuple21 a
  b)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a b)) (set (tuple21 a b))))))
  (! (= (tb2t15 (t2tb15 i)) i) :pattern ((t2tb15 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1)))) j)
     (= (t2tb15 (tb2t15 j)) j)) :pattern ((t2tb15 (tb2t15 j))) )))

(declare-fun t2tb16 ((tuple21 (set (tuple21 a b)) (set (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a b)) (set (tuple21 a b))))) (sort
  (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1))) (t2tb16 x))))

(declare-fun tb2t16 (uni) (tuple21 (set (tuple21 a b)) (set (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a b)) (set (tuple21 a b)))))
  (! (= (tb2t16 (t2tb16 i)) i) :pattern ((t2tb16 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1))) j)
     (= (t2tb16 (tb2t16 j)) j)) :pattern ((t2tb16 (tb2t16 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set (set (tuple21 a b))))
  (x (set (tuple21 a b))) (y (set (tuple21 a b))))
  (= (mem (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1)))
  (Tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1)) (t2tb11 x) (t2tb11 y))
  (times (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1)) (t2tb10 s) (t2tb10 t)))
  (and (mem4 x s) (mem4 y t)))))

(declare-fun t2tb17 ((set (tuple21 (set (tuple21 a b)) (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a b)) (tuple21 a b))))) (sort
  (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 b1))) (t2tb17 x))))

(declare-fun tb2t17 (uni) (set (tuple21 (set (tuple21 a b)) (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a b)) (tuple21 a b)))))
  (! (= (tb2t17 (t2tb17 i)) i) :pattern ((t2tb17 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 b1))) j)
     (= (t2tb17 (tb2t17 j)) j)) :pattern ((t2tb17 (tb2t17 j))) )))

(declare-fun t2tb18 ((tuple21 (set (tuple21 a b)) (tuple21 a b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a b)) (tuple21 a b)))) (sort
  (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 b1)) (t2tb18 x))))

(declare-fun tb2t18 (uni) (tuple21 (set (tuple21 a b)) (tuple21 a b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a b)) (tuple21 a b))))
  (! (= (tb2t18 (t2tb18 i)) i) :pattern ((t2tb18 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 b1)) j)
     (= (t2tb18 (tb2t18 j)) j)) :pattern ((t2tb18 (tb2t18 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set (tuple21 a b)))
  (x (set (tuple21 a b))) (y (tuple21 a b)))
  (= (mem (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 b1))
  (Tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 b1) (t2tb11 x) (t2tb13 y))
  (times (tuple2 a1 b1) (set1 (tuple2 a1 b1)) (t2tb10 s) (t2tb11 t)))
  (and (mem4 x s) (mem3 y t)))))

(declare-fun t2tb19 ((set (tuple21 (set (tuple21 a b)) b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a b)) b)))) (sort
  (set1 (tuple2 (set1 (tuple2 a1 b1)) b1)) (t2tb19 x))))

(declare-fun tb2t19 (uni) (set (tuple21 (set (tuple21 a b)) b)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a b)) b))))
  (! (= (tb2t19 (t2tb19 i)) i) :pattern ((t2tb19 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 a1 b1)) b1)) j)
     (= (t2tb19 (tb2t19 j)) j)) :pattern ((t2tb19 (tb2t19 j))) )))

(declare-fun t2tb20 ((tuple21 (set (tuple21 a b)) b)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a b)) b))) (sort
  (tuple2 (set1 (tuple2 a1 b1)) b1) (t2tb20 x))))

(declare-fun tb2t20 (uni) (tuple21 (set (tuple21 a b)) b))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a b)) b)))
  (! (= (tb2t20 (t2tb20 i)) i) :pattern ((t2tb20 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 a1 b1)) b1) j)
     (= (t2tb20 (tb2t20 j)) j)) :pattern ((t2tb20 (tb2t20 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set b)) (x (set (tuple21 a b)))
  (y b))
  (= (mem (tuple2 (set1 (tuple2 a1 b1)) b1)
  (Tuple2 (set1 (tuple2 a1 b1)) b1 (t2tb11 x) (t2tb14 y))
  (times b1 (set1 (tuple2 a1 b1)) (t2tb10 s) (t2tb12 t)))
  (and (mem4 x s) (mem2 y t)))))

(declare-fun t2tb5062 ((set (tuple21 (set (tuple21 a b)) (tuple21 a
  a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a b)) (tuple21 a a))))) (sort
  (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 a1))) (t2tb5062 x))))

(declare-fun tb2t5062 (uni) (set (tuple21 (set (tuple21 a b)) (tuple21 a
  a))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a b)) (tuple21 a a)))))
  (! (= (tb2t5062 (t2tb5062 i)) i) :pattern ((t2tb5062 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 a1))) j)
     (= (t2tb5062 (tb2t5062 j)) j)) :pattern ((t2tb5062 (tb2t5062 j))) )))

(declare-fun t2tb5063 ((tuple21 (set (tuple21 a b)) (tuple21 a a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a b)) (tuple21 a a)))) (sort
  (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 a1)) (t2tb5063 x))))

(declare-fun tb2t5063 (uni) (tuple21 (set (tuple21 a b)) (tuple21 a a)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a b)) (tuple21 a a))))
  (! (= (tb2t5063 (t2tb5063 i)) i) :pattern ((t2tb5063 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 a1)) j)
     (= (t2tb5063 (tb2t5063 j)) j)) :pattern ((t2tb5063 (tb2t5063 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set (tuple21 a a)))
  (x (set (tuple21 a b))) (y (tuple21 a a)))
  (= (mem (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 a1))
  (Tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 a1) (t2tb11 x) (t2tb5 y))
  (times (tuple2 a1 a1) (set1 (tuple2 a1 b1)) (t2tb10 s) (t2tb4 t)))
  (and (mem4 x s) (mem12 y t)))))

(declare-fun t2tb21 ((tuple21 (set (tuple21 a b)) a)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a b)) a))) (sort
  (tuple2 (set1 (tuple2 a1 b1)) a1) (t2tb21 x))))

(declare-fun tb2t21 (uni) (tuple21 (set (tuple21 a b)) a))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a b)) a)))
  (! (= (tb2t21 (t2tb21 i)) i) :pattern ((t2tb21 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 a1 b1)) a1) j)
     (= (t2tb21 (tb2t21 j)) j)) :pattern ((t2tb21 (tb2t21 j))) )))

(declare-fun t2tb22 ((set (tuple21 (set (tuple21 a b)) a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a b)) a)))) (sort
  (set1 (tuple2 (set1 (tuple2 a1 b1)) a1)) (t2tb22 x))))

(declare-fun tb2t22 (uni) (set (tuple21 (set (tuple21 a b)) a)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a b)) a))))
  (! (= (tb2t22 (t2tb22 i)) i) :pattern ((t2tb22 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 a1 b1)) a1)) j)
     (= (t2tb22 (tb2t22 j)) j)) :pattern ((t2tb22 (tb2t22 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set a)) (x (set (tuple21 a b)))
  (y a))
  (= (mem (tuple2 (set1 (tuple2 a1 b1)) a1)
  (Tuple2 (set1 (tuple2 a1 b1)) a1 (t2tb11 x) (t2tb2 y))
  (times a1 (set1 (tuple2 a1 b1)) (t2tb10 s) (t2tb1 t)))
  (and (mem4 x s) (mem1 y t)))))

;; mem_times
  (assert
  (forall ((b2 ty))
  (forall ((s (set (set (tuple21 a b)))) (t uni) (x (set (tuple21 a b)))
  (y uni))
  (= (mem (tuple2 (set1 (tuple2 a1 b1)) b2)
  (Tuple2 (set1 (tuple2 a1 b1)) b2 (t2tb11 x) y)
  (times b2 (set1 (tuple2 a1 b1)) (t2tb10 s) t))
  (and (mem4 x s) (mem b2 y t))))))

(declare-fun t2tb5519 ((set (tuple21 (tuple21 a b) (tuple21 (tuple21 a b)
  (tuple21 a c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) (tuple21 (tuple21 a b) (tuple21 a
  c)))))) (sort
  (set1 (tuple2 (tuple2 a1 b1) (tuple2 (tuple2 a1 b1) (tuple2 a1 c1))))
  (t2tb5519 x))))

(declare-fun tb2t5519 (uni) (set (tuple21 (tuple21 a b) (tuple21 (tuple21 a
  b) (tuple21 a c)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a b) (tuple21 (tuple21 a b) (tuple21 a
  c)))))) (! (= (tb2t5519 (t2tb5519 i)) i) :pattern ((t2tb5519 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 a1 b1) (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)))) j)
     (= (t2tb5519 (tb2t5519 j)) j)) :pattern ((t2tb5519 (tb2t5519 j))) )))

(declare-fun t2tb5520 ((tuple21 (tuple21 a b) (tuple21 (tuple21 a b)
  (tuple21 a c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a b) (tuple21 (tuple21 a b) (tuple21 a c)))))
  (sort (tuple2 (tuple2 a1 b1) (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)))
  (t2tb5520 x))))

(declare-fun tb2t5520 (uni) (tuple21 (tuple21 a b) (tuple21 (tuple21 a b)
  (tuple21 a c))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a b) (tuple21 (tuple21 a b) (tuple21 a c)))))
  (! (= (tb2t5520 (t2tb5520 i)) i) :pattern ((t2tb5520 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 b1) (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)))
     j) (= (t2tb5520 (tb2t5520 j)) j)) :pattern ((t2tb5520 (tb2t5520 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (tuple21 (tuple21 a b) (tuple21 a
  c)))) (x (tuple21 a b)) (y (tuple21 (tuple21 a b) (tuple21 a c))))
  (= (mem (tuple2 (tuple2 a1 b1) (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)))
  (Tuple2 (tuple2 a1 b1) (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) (t2tb13 x)
  (t2tb239 y))
  (times (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) (tuple2 a1 b1) (t2tb11 s)
  (t2tb238 t))) (and (mem3 x s) (mem51 y t)))))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (tuple21 a c))) (x (tuple21 a b))
  (y (tuple21 a c)))
  (= (mem51
  (tb2t239 (Tuple2 (tuple2 a1 b1) (tuple2 a1 c1) (t2tb13 x) (t2tb133 y)))
  (tb2t238 (times (tuple2 a1 c1) (tuple2 a1 b1) (t2tb11 s) (t2tb129 t))))
  (and (mem3 x s) (mem10 y t)))))

(declare-fun t2tb1133 ((set (tuple21 (tuple21 a b) (set (tuple21 b
  c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) (set (tuple21 b c)))))) (sort
  (set1 (tuple2 (tuple2 a1 b1) (set1 (tuple2 b1 c1)))) (t2tb1133 x))))

(declare-fun tb2t1133 (uni) (set (tuple21 (tuple21 a b) (set (tuple21 b
  c)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a b) (set (tuple21 b c))))))
  (! (= (tb2t1133 (t2tb1133 i)) i) :pattern ((t2tb1133 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 b1) (set1 (tuple2 b1 c1)))) j)
     (= (t2tb1133 (tb2t1133 j)) j)) :pattern ((t2tb1133 (tb2t1133 j))) )))

(declare-fun t2tb1134 ((tuple21 (tuple21 a b) (set (tuple21 b c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a b) (set (tuple21 b c))))) (sort
  (tuple2 (tuple2 a1 b1) (set1 (tuple2 b1 c1))) (t2tb1134 x))))

(declare-fun tb2t1134 (uni) (tuple21 (tuple21 a b) (set (tuple21 b c))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a b) (set (tuple21 b c)))))
  (! (= (tb2t1134 (t2tb1134 i)) i) :pattern ((t2tb1134 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 b1) (set1 (tuple2 b1 c1))) j)
     (= (t2tb1134 (tb2t1134 j)) j)) :pattern ((t2tb1134 (tb2t1134 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (set (tuple21 b c))))
  (x (tuple21 a b)) (y (set (tuple21 b c))))
  (= (mem (tuple2 (tuple2 a1 b1) (set1 (tuple2 b1 c1)))
  (Tuple2 (tuple2 a1 b1) (set1 (tuple2 b1 c1)) (t2tb13 x) (t2tb131 y))
  (times (set1 (tuple2 b1 c1)) (tuple2 a1 b1) (t2tb11 s) (t2tb130 t)))
  (and (mem3 x s) (mem9 y t)))))

(declare-fun t2tb1135 ((set (tuple21 (tuple21 a b) (tuple21 b c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) (tuple21 b c))))) (sort
  (set1 (tuple2 (tuple2 a1 b1) (tuple2 b1 c1))) (t2tb1135 x))))

(declare-fun tb2t1135 (uni) (set (tuple21 (tuple21 a b) (tuple21 b c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a b) (tuple21 b c)))))
  (! (= (tb2t1135 (t2tb1135 i)) i) :pattern ((t2tb1135 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 b1) (tuple2 b1 c1))) j)
     (= (t2tb1135 (tb2t1135 j)) j)) :pattern ((t2tb1135 (tb2t1135 j))) )))

(declare-fun t2tb1136 ((tuple21 (tuple21 a b) (tuple21 b c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a b) (tuple21 b c)))) (sort
  (tuple2 (tuple2 a1 b1) (tuple2 b1 c1)) (t2tb1136 x))))

(declare-fun tb2t1136 (uni) (tuple21 (tuple21 a b) (tuple21 b c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a b) (tuple21 b c))))
  (! (= (tb2t1136 (t2tb1136 i)) i) :pattern ((t2tb1136 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 b1) (tuple2 b1 c1)) j)
     (= (t2tb1136 (tb2t1136 j)) j)) :pattern ((t2tb1136 (tb2t1136 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (tuple21 b c))) (x (tuple21 a b))
  (y (tuple21 b c)))
  (= (mem (tuple2 (tuple2 a1 b1) (tuple2 b1 c1))
  (Tuple2 (tuple2 a1 b1) (tuple2 b1 c1) (t2tb13 x) (t2tb134 y))
  (times (tuple2 b1 c1) (tuple2 a1 b1) (t2tb11 s) (t2tb131 t)))
  (and (mem3 x s) (mem8 y t)))))

(declare-fun t2tb244 ((tuple21 (tuple21 a b) c)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a b) c))) (sort (tuple2 (tuple2 a1 b1) c1)
  (t2tb244 x))))

(declare-fun tb2t244 (uni) (tuple21 (tuple21 a b) c))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a b) c)))
  (! (= (tb2t244 (t2tb244 i)) i) :pattern ((t2tb244 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 b1) c1) j) (= (t2tb244 (tb2t244 j)) j)) :pattern (
  (t2tb244 (tb2t244 j))) )))

(declare-fun t2tb245 ((set (tuple21 (tuple21 a b) c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) c)))) (sort
  (set1 (tuple2 (tuple2 a1 b1) c1)) (t2tb245 x))))

(declare-fun tb2t245 (uni) (set (tuple21 (tuple21 a b) c)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a b) c))))
  (! (= (tb2t245 (t2tb245 i)) i) :pattern ((t2tb245 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 b1) c1)) j)
     (= (t2tb245 (tb2t245 j)) j)) :pattern ((t2tb245 (tb2t245 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a b))) (t (set c)) (x (tuple21 a b)) (y c))
  (= (mem (tuple2 (tuple2 a1 b1) c1)
  (Tuple2 (tuple2 a1 b1) c1 (t2tb13 x) (t2tb135 y))
  (times c1 (tuple2 a1 b1) (t2tb11 s) (t2tb132 t)))
  (and (mem3 x s) (mem7 y t)))))

(declare-fun t2tb23 ((set (tuple21 (tuple21 a b) (set (tuple21 a b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) (set (tuple21 a b)))))) (sort
  (set1 (tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 b1)))) (t2tb23 x))))

(declare-fun tb2t23 (uni) (set (tuple21 (tuple21 a b) (set (tuple21 a b)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a b) (set (tuple21 a b))))))
  (! (= (tb2t23 (t2tb23 i)) i) :pattern ((t2tb23 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 b1)))) j)
     (= (t2tb23 (tb2t23 j)) j)) :pattern ((t2tb23 (tb2t23 j))) )))

(declare-fun t2tb24 ((tuple21 (tuple21 a b) (set (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a b) (set (tuple21 a b))))) (sort
  (tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 b1))) (t2tb24 x))))

(declare-fun tb2t24 (uni) (tuple21 (tuple21 a b) (set (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a b) (set (tuple21 a b)))))
  (! (= (tb2t24 (t2tb24 i)) i) :pattern ((t2tb24 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 b1))) j)
     (= (t2tb24 (tb2t24 j)) j)) :pattern ((t2tb24 (tb2t24 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (set (tuple21 a b))))
  (x (tuple21 a b)) (y (set (tuple21 a b))))
  (= (mem (tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 b1)))
  (Tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 b1)) (t2tb13 x) (t2tb11 y))
  (times (set1 (tuple2 a1 b1)) (tuple2 a1 b1) (t2tb11 s) (t2tb10 t)))
  (and (mem3 x s) (mem4 y t)))))

(declare-fun t2tb25 ((set (tuple21 (tuple21 a b) (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) (tuple21 a b))))) (sort
  (set1 (tuple2 (tuple2 a1 b1) (tuple2 a1 b1))) (t2tb25 x))))

(declare-fun tb2t25 (uni) (set (tuple21 (tuple21 a b) (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a b) (tuple21 a b)))))
  (! (= (tb2t25 (t2tb25 i)) i) :pattern ((t2tb25 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 b1) (tuple2 a1 b1))) j)
     (= (t2tb25 (tb2t25 j)) j)) :pattern ((t2tb25 (tb2t25 j))) )))

(declare-fun t2tb26 ((tuple21 (tuple21 a b) (tuple21 a b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a b) (tuple21 a b)))) (sort
  (tuple2 (tuple2 a1 b1) (tuple2 a1 b1)) (t2tb26 x))))

(declare-fun tb2t26 (uni) (tuple21 (tuple21 a b) (tuple21 a b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a b) (tuple21 a b))))
  (! (= (tb2t26 (t2tb26 i)) i) :pattern ((t2tb26 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 b1) (tuple2 a1 b1)) j)
     (= (t2tb26 (tb2t26 j)) j)) :pattern ((t2tb26 (tb2t26 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (tuple21 a b))) (x (tuple21 a b))
  (y (tuple21 a b)))
  (= (mem (tuple2 (tuple2 a1 b1) (tuple2 a1 b1))
  (Tuple2 (tuple2 a1 b1) (tuple2 a1 b1) (t2tb13 x) (t2tb13 y))
  (times (tuple2 a1 b1) (tuple2 a1 b1) (t2tb11 s) (t2tb11 t)))
  (and (mem3 x s) (mem3 y t)))))

(declare-fun t2tb27 ((set (tuple21 (tuple21 a b) b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) b)))) (sort
  (set1 (tuple2 (tuple2 a1 b1) b1)) (t2tb27 x))))

(declare-fun tb2t27 (uni) (set (tuple21 (tuple21 a b) b)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a b) b))))
  (! (= (tb2t27 (t2tb27 i)) i) :pattern ((t2tb27 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 b1) b1)) j)
     (= (t2tb27 (tb2t27 j)) j)) :pattern ((t2tb27 (tb2t27 j))) )))

(declare-fun t2tb28 ((tuple21 (tuple21 a b) b)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a b) b))) (sort (tuple2 (tuple2 a1 b1) b1)
  (t2tb28 x))))

(declare-fun tb2t28 (uni) (tuple21 (tuple21 a b) b))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a b) b)))
  (! (= (tb2t28 (t2tb28 i)) i) :pattern ((t2tb28 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 b1) b1) j) (= (t2tb28 (tb2t28 j)) j)) :pattern (
  (t2tb28 (tb2t28 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a b))) (t (set b)) (x (tuple21 a b)) (y b))
  (= (mem (tuple2 (tuple2 a1 b1) b1)
  (Tuple2 (tuple2 a1 b1) b1 (t2tb13 x) (t2tb14 y))
  (times b1 (tuple2 a1 b1) (t2tb11 s) (t2tb12 t)))
  (and (mem3 x s) (mem2 y t)))))

(declare-fun t2tb2716 ((set (tuple21 (tuple21 a b) (tuple21 a a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) (tuple21 a a))))) (sort
  (set1 (tuple2 (tuple2 a1 b1) (tuple2 a1 a1))) (t2tb2716 x))))

(declare-fun tb2t2716 (uni) (set (tuple21 (tuple21 a b) (tuple21 a a))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a b) (tuple21 a a)))))
  (! (= (tb2t2716 (t2tb2716 i)) i) :pattern ((t2tb2716 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 b1) (tuple2 a1 a1))) j)
     (= (t2tb2716 (tb2t2716 j)) j)) :pattern ((t2tb2716 (tb2t2716 j))) )))

(declare-fun t2tb2717 ((tuple21 (tuple21 a b) (tuple21 a a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a b) (tuple21 a a)))) (sort
  (tuple2 (tuple2 a1 b1) (tuple2 a1 a1)) (t2tb2717 x))))

(declare-fun tb2t2717 (uni) (tuple21 (tuple21 a b) (tuple21 a a)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a b) (tuple21 a a))))
  (! (= (tb2t2717 (t2tb2717 i)) i) :pattern ((t2tb2717 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 b1) (tuple2 a1 a1)) j)
     (= (t2tb2717 (tb2t2717 j)) j)) :pattern ((t2tb2717 (tb2t2717 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (tuple21 a a))) (x (tuple21 a b))
  (y (tuple21 a a)))
  (= (mem (tuple2 (tuple2 a1 b1) (tuple2 a1 a1))
  (Tuple2 (tuple2 a1 b1) (tuple2 a1 a1) (t2tb13 x) (t2tb5 y))
  (times (tuple2 a1 a1) (tuple2 a1 b1) (t2tb11 s) (t2tb4 t)))
  (and (mem3 x s) (mem12 y t)))))

(declare-fun t2tb29 ((set (tuple21 (tuple21 a b) a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) a)))) (sort
  (set1 (tuple2 (tuple2 a1 b1) a1)) (t2tb29 x))))

(declare-fun tb2t29 (uni) (set (tuple21 (tuple21 a b) a)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a b) a))))
  (! (= (tb2t29 (t2tb29 i)) i) :pattern ((t2tb29 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 b1) a1)) j)
     (= (t2tb29 (tb2t29 j)) j)) :pattern ((t2tb29 (tb2t29 j))) )))

(declare-fun t2tb30 ((tuple21 (tuple21 a b) a)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a b) a))) (sort (tuple2 (tuple2 a1 b1) a1)
  (t2tb30 x))))

(declare-fun tb2t30 (uni) (tuple21 (tuple21 a b) a))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a b) a)))
  (! (= (tb2t30 (t2tb30 i)) i) :pattern ((t2tb30 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 b1) a1) j) (= (t2tb30 (tb2t30 j)) j)) :pattern (
  (t2tb30 (tb2t30 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a b))) (t (set a)) (x (tuple21 a b)) (y a))
  (= (mem (tuple2 (tuple2 a1 b1) a1)
  (Tuple2 (tuple2 a1 b1) a1 (t2tb13 x) (t2tb2 y))
  (times a1 (tuple2 a1 b1) (t2tb11 s) (t2tb1 t)))
  (and (mem3 x s) (mem1 y t)))))

;; mem_times
  (assert
  (forall ((b2 ty))
  (forall ((s (set (tuple21 a b))) (t uni) (x (tuple21 a b)) (y uni))
  (= (mem (tuple2 (tuple2 a1 b1) b2) (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) y)
  (times b2 (tuple2 a1 b1) (t2tb11 s) t)) (and (mem3 x s) (mem b2 y t))))))

(declare-fun t2tb5521 ((set (tuple21 b (tuple21 (tuple21 a b) (tuple21 a
  c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 b (tuple21 (tuple21 a b) (tuple21 a c)))))) (sort
  (set1 (tuple2 b1 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)))) (t2tb5521 x))))

(declare-fun tb2t5521 (uni) (set (tuple21 b (tuple21 (tuple21 a b) (tuple21 a
  c)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 b (tuple21 (tuple21 a b) (tuple21 a c))))))
  (! (= (tb2t5521 (t2tb5521 i)) i) :pattern ((t2tb5521 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 b1 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)))) j)
     (= (t2tb5521 (tb2t5521 j)) j)) :pattern ((t2tb5521 (tb2t5521 j))) )))

(declare-fun t2tb5522 ((tuple21 b (tuple21 (tuple21 a b) (tuple21 a
  c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 b (tuple21 (tuple21 a b) (tuple21 a c))))) (sort
  (tuple2 b1 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1))) (t2tb5522 x))))

(declare-fun tb2t5522 (uni) (tuple21 b (tuple21 (tuple21 a b) (tuple21 a
  c))))

;; BridgeL
  (assert
  (forall ((i (tuple21 b (tuple21 (tuple21 a b) (tuple21 a c)))))
  (! (= (tb2t5522 (t2tb5522 i)) i) :pattern ((t2tb5522 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 b1 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1))) j)
     (= (t2tb5522 (tb2t5522 j)) j)) :pattern ((t2tb5522 (tb2t5522 j))) )))

;; mem_times
  (assert
  (forall ((s (set b)) (t (set (tuple21 (tuple21 a b) (tuple21 a c)))) (x b)
  (y (tuple21 (tuple21 a b) (tuple21 a c))))
  (= (mem (tuple2 b1 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)))
  (Tuple2 b1 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) (t2tb14 x) (t2tb239 y))
  (times (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) b1 (t2tb12 s) (t2tb238 t)))
  (and (mem2 x s) (mem51 y t)))))

(declare-fun t2tb248 ((set (tuple21 b (tuple21 a c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 b (tuple21 a c))))) (sort
  (set1 (tuple2 b1 (tuple2 a1 c1))) (t2tb248 x))))

(declare-fun tb2t248 (uni) (set (tuple21 b (tuple21 a c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 b (tuple21 a c)))))
  (! (= (tb2t248 (t2tb248 i)) i) :pattern ((t2tb248 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 b1 (tuple2 a1 c1))) j)
     (= (t2tb248 (tb2t248 j)) j)) :pattern ((t2tb248 (tb2t248 j))) )))

(declare-fun t2tb249 ((tuple21 b (tuple21 a c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 b (tuple21 a c)))) (sort (tuple2 b1 (tuple2 a1 c1))
  (t2tb249 x))))

(declare-fun tb2t249 (uni) (tuple21 b (tuple21 a c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 b (tuple21 a c))))
  (! (= (tb2t249 (t2tb249 i)) i) :pattern ((t2tb249 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 b1 (tuple2 a1 c1)) j) (= (t2tb249 (tb2t249 j)) j)) :pattern (
  (t2tb249 (tb2t249 j))) )))

;; mem_times
  (assert
  (forall ((s (set b)) (t (set (tuple21 a c))) (x b) (y (tuple21 a c)))
  (= (mem (tuple2 b1 (tuple2 a1 c1))
  (Tuple2 b1 (tuple2 a1 c1) (t2tb14 x) (t2tb133 y))
  (times (tuple2 a1 c1) b1 (t2tb12 s) (t2tb129 t)))
  (and (mem2 x s) (mem10 y t)))))

(declare-fun t2tb1137 ((tuple21 b (set (tuple21 b c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 b (set (tuple21 b c))))) (sort
  (tuple2 b1 (set1 (tuple2 b1 c1))) (t2tb1137 x))))

(declare-fun tb2t1137 (uni) (tuple21 b (set (tuple21 b c))))

;; BridgeL
  (assert
  (forall ((i (tuple21 b (set (tuple21 b c)))))
  (! (= (tb2t1137 (t2tb1137 i)) i) :pattern ((t2tb1137 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 b1 (set1 (tuple2 b1 c1))) j)
     (= (t2tb1137 (tb2t1137 j)) j)) :pattern ((t2tb1137 (tb2t1137 j))) )))

(declare-fun t2tb1138 ((set (tuple21 b (set (tuple21 b c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 b (set (tuple21 b c)))))) (sort
  (set1 (tuple2 b1 (set1 (tuple2 b1 c1)))) (t2tb1138 x))))

(declare-fun tb2t1138 (uni) (set (tuple21 b (set (tuple21 b c)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 b (set (tuple21 b c))))))
  (! (= (tb2t1138 (t2tb1138 i)) i) :pattern ((t2tb1138 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 b1 (set1 (tuple2 b1 c1)))) j)
     (= (t2tb1138 (tb2t1138 j)) j)) :pattern ((t2tb1138 (tb2t1138 j))) )))

;; mem_times
  (assert
  (forall ((s (set b)) (t (set (set (tuple21 b c)))) (x b) (y (set (tuple21 b
  c))))
  (= (mem (tuple2 b1 (set1 (tuple2 b1 c1)))
  (Tuple2 b1 (set1 (tuple2 b1 c1)) (t2tb14 x) (t2tb131 y))
  (times (set1 (tuple2 b1 c1)) b1 (t2tb12 s) (t2tb130 t)))
  (and (mem2 x s) (mem9 y t)))))

(declare-fun t2tb1139 ((set (tuple21 b (tuple21 b c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 b (tuple21 b c))))) (sort
  (set1 (tuple2 b1 (tuple2 b1 c1))) (t2tb1139 x))))

(declare-fun tb2t1139 (uni) (set (tuple21 b (tuple21 b c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 b (tuple21 b c)))))
  (! (= (tb2t1139 (t2tb1139 i)) i) :pattern ((t2tb1139 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 b1 (tuple2 b1 c1))) j)
     (= (t2tb1139 (tb2t1139 j)) j)) :pattern ((t2tb1139 (tb2t1139 j))) )))

(declare-fun t2tb1140 ((tuple21 b (tuple21 b c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 b (tuple21 b c)))) (sort (tuple2 b1 (tuple2 b1 c1))
  (t2tb1140 x))))

(declare-fun tb2t1140 (uni) (tuple21 b (tuple21 b c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 b (tuple21 b c))))
  (! (= (tb2t1140 (t2tb1140 i)) i) :pattern ((t2tb1140 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 b1 (tuple2 b1 c1)) j) (= (t2tb1140 (tb2t1140 j)) j)) :pattern (
  (t2tb1140 (tb2t1140 j))) )))

;; mem_times
  (assert
  (forall ((s (set b)) (t (set (tuple21 b c))) (x b) (y (tuple21 b c)))
  (= (mem (tuple2 b1 (tuple2 b1 c1))
  (Tuple2 b1 (tuple2 b1 c1) (t2tb14 x) (t2tb134 y))
  (times (tuple2 b1 c1) b1 (t2tb12 s) (t2tb131 t)))
  (and (mem2 x s) (mem8 y t)))))

;; mem_times
  (assert
  (forall ((s (set b)) (t (set c)) (x b) (y c))
  (= (mem8 (tb2t134 (Tuple2 b1 c1 (t2tb14 x) (t2tb135 y)))
  (tb2t131 (times c1 b1 (t2tb12 s) (t2tb132 t))))
  (and (mem2 x s) (mem7 y t)))))

(declare-fun t2tb31 ((set (tuple21 b (set (tuple21 a b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 b (set (tuple21 a b)))))) (sort
  (set1 (tuple2 b1 (set1 (tuple2 a1 b1)))) (t2tb31 x))))

(declare-fun tb2t31 (uni) (set (tuple21 b (set (tuple21 a b)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 b (set (tuple21 a b))))))
  (! (= (tb2t31 (t2tb31 i)) i) :pattern ((t2tb31 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 b1 (set1 (tuple2 a1 b1)))) j)
     (= (t2tb31 (tb2t31 j)) j)) :pattern ((t2tb31 (tb2t31 j))) )))

(declare-fun t2tb32 ((tuple21 b (set (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 b (set (tuple21 a b))))) (sort
  (tuple2 b1 (set1 (tuple2 a1 b1))) (t2tb32 x))))

(declare-fun tb2t32 (uni) (tuple21 b (set (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (tuple21 b (set (tuple21 a b)))))
  (! (= (tb2t32 (t2tb32 i)) i) :pattern ((t2tb32 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 b1 (set1 (tuple2 a1 b1))) j)
     (= (t2tb32 (tb2t32 j)) j)) :pattern ((t2tb32 (tb2t32 j))) )))

;; mem_times
  (assert
  (forall ((s (set b)) (t (set (set (tuple21 a b)))) (x b) (y (set (tuple21 a
  b))))
  (= (mem (tuple2 b1 (set1 (tuple2 a1 b1)))
  (Tuple2 b1 (set1 (tuple2 a1 b1)) (t2tb14 x) (t2tb11 y))
  (times (set1 (tuple2 a1 b1)) b1 (t2tb12 s) (t2tb10 t)))
  (and (mem2 x s) (mem4 y t)))))

(declare-fun t2tb33 ((tuple21 b (tuple21 a b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 b (tuple21 a b)))) (sort (tuple2 b1 (tuple2 a1 b1))
  (t2tb33 x))))

(declare-fun tb2t33 (uni) (tuple21 b (tuple21 a b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 b (tuple21 a b))))
  (! (= (tb2t33 (t2tb33 i)) i) :pattern ((t2tb33 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 b1 (tuple2 a1 b1)) j) (= (t2tb33 (tb2t33 j)) j)) :pattern (
  (t2tb33 (tb2t33 j))) )))

(declare-fun t2tb34 ((set (tuple21 b (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 b (tuple21 a b))))) (sort
  (set1 (tuple2 b1 (tuple2 a1 b1))) (t2tb34 x))))

(declare-fun tb2t34 (uni) (set (tuple21 b (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 b (tuple21 a b)))))
  (! (= (tb2t34 (t2tb34 i)) i) :pattern ((t2tb34 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 b1 (tuple2 a1 b1))) j)
     (= (t2tb34 (tb2t34 j)) j)) :pattern ((t2tb34 (tb2t34 j))) )))

;; mem_times
  (assert
  (forall ((s (set b)) (t (set (tuple21 a b))) (x b) (y (tuple21 a b)))
  (= (mem (tuple2 b1 (tuple2 a1 b1))
  (Tuple2 b1 (tuple2 a1 b1) (t2tb14 x) (t2tb13 y))
  (times (tuple2 a1 b1) b1 (t2tb12 s) (t2tb11 t)))
  (and (mem2 x s) (mem3 y t)))))

(declare-fun t2tb35 ((set (tuple21 b b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 b b)))) (sort (set1 (tuple2 b1 b1)) (t2tb35 x))))

(declare-fun tb2t35 (uni) (set (tuple21 b b)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 b b))))
  (! (= (tb2t35 (t2tb35 i)) i) :pattern ((t2tb35 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 b1 b1)) j) (= (t2tb35 (tb2t35 j)) j)) :pattern (
  (t2tb35 (tb2t35 j))) )))

(declare-fun t2tb36 ((tuple21 b b)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 b b))) (sort (tuple2 b1 b1) (t2tb36 x))))

(declare-fun tb2t36 (uni) (tuple21 b b))

;; BridgeL
  (assert
  (forall ((i (tuple21 b b)))
  (! (= (tb2t36 (t2tb36 i)) i) :pattern ((t2tb36 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 b1 b1) j) (= (t2tb36 (tb2t36 j)) j)) :pattern (
  (t2tb36 (tb2t36 j))) )))

;; mem_times
  (assert
  (forall ((s (set b)) (t (set b)) (x b) (y b))
  (= (mem (tuple2 b1 b1) (Tuple2 b1 b1 (t2tb14 x) (t2tb14 y))
  (times b1 b1 (t2tb12 s) (t2tb12 t))) (and (mem2 x s) (mem2 y t)))))

(declare-fun t2tb1084 ((set (tuple21 b (tuple21 a a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 b (tuple21 a a))))) (sort
  (set1 (tuple2 b1 (tuple2 a1 a1))) (t2tb1084 x))))

(declare-fun tb2t1084 (uni) (set (tuple21 b (tuple21 a a))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 b (tuple21 a a)))))
  (! (= (tb2t1084 (t2tb1084 i)) i) :pattern ((t2tb1084 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 b1 (tuple2 a1 a1))) j)
     (= (t2tb1084 (tb2t1084 j)) j)) :pattern ((t2tb1084 (tb2t1084 j))) )))

(declare-fun t2tb1085 ((tuple21 b (tuple21 a a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 b (tuple21 a a)))) (sort (tuple2 b1 (tuple2 a1 a1))
  (t2tb1085 x))))

(declare-fun tb2t1085 (uni) (tuple21 b (tuple21 a a)))

;; BridgeL
  (assert
  (forall ((i (tuple21 b (tuple21 a a))))
  (! (= (tb2t1085 (t2tb1085 i)) i) :pattern ((t2tb1085 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 b1 (tuple2 a1 a1)) j) (= (t2tb1085 (tb2t1085 j)) j)) :pattern (
  (t2tb1085 (tb2t1085 j))) )))

;; mem_times
  (assert
  (forall ((s (set b)) (t (set (tuple21 a a))) (x b) (y (tuple21 a a)))
  (= (mem (tuple2 b1 (tuple2 a1 a1))
  (Tuple2 b1 (tuple2 a1 a1) (t2tb14 x) (t2tb5 y))
  (times (tuple2 a1 a1) b1 (t2tb12 s) (t2tb4 t)))
  (and (mem2 x s) (mem12 y t)))))

(declare-fun t2tb37 ((set (tuple21 b a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 b a)))) (sort (set1 (tuple2 b1 a1)) (t2tb37 x))))

(declare-fun tb2t37 (uni) (set (tuple21 b a)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 b a))))
  (! (= (tb2t37 (t2tb37 i)) i) :pattern ((t2tb37 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 b1 a1)) j) (= (t2tb37 (tb2t37 j)) j)) :pattern (
  (t2tb37 (tb2t37 j))) )))

(declare-fun t2tb38 ((tuple21 b a)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 b a))) (sort (tuple2 b1 a1) (t2tb38 x))))

(declare-fun tb2t38 (uni) (tuple21 b a))

;; BridgeL
  (assert
  (forall ((i (tuple21 b a)))
  (! (= (tb2t38 (t2tb38 i)) i) :pattern ((t2tb38 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 b1 a1) j) (= (t2tb38 (tb2t38 j)) j)) :pattern (
  (t2tb38 (tb2t38 j))) )))

;; mem_times
  (assert
  (forall ((s (set b)) (t (set a)) (x b) (y a))
  (= (mem (tuple2 b1 a1) (Tuple2 b1 a1 (t2tb14 x) (t2tb2 y))
  (times a1 b1 (t2tb12 s) (t2tb1 t))) (and (mem2 x s) (mem1 y t)))))

;; mem_times
  (assert
  (forall ((b2 ty))
  (forall ((s (set b)) (t uni) (x b) (y uni))
  (= (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) y)
  (times b2 b1 (t2tb12 s) t)) (and (mem2 x s) (mem b2 y t))))))

(declare-fun t2tb5523 ((set (tuple21 (tuple21 a a) (tuple21 (tuple21 a b)
  (tuple21 a c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a a) (tuple21 (tuple21 a b) (tuple21 a
  c)))))) (sort
  (set1 (tuple2 (tuple2 a1 a1) (tuple2 (tuple2 a1 b1) (tuple2 a1 c1))))
  (t2tb5523 x))))

(declare-fun tb2t5523 (uni) (set (tuple21 (tuple21 a a) (tuple21 (tuple21 a
  b) (tuple21 a c)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a a) (tuple21 (tuple21 a b) (tuple21 a
  c)))))) (! (= (tb2t5523 (t2tb5523 i)) i) :pattern ((t2tb5523 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 a1 a1) (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)))) j)
     (= (t2tb5523 (tb2t5523 j)) j)) :pattern ((t2tb5523 (tb2t5523 j))) )))

(declare-fun t2tb5524 ((tuple21 (tuple21 a a) (tuple21 (tuple21 a b)
  (tuple21 a c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a a) (tuple21 (tuple21 a b) (tuple21 a c)))))
  (sort (tuple2 (tuple2 a1 a1) (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)))
  (t2tb5524 x))))

(declare-fun tb2t5524 (uni) (tuple21 (tuple21 a a) (tuple21 (tuple21 a b)
  (tuple21 a c))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a a) (tuple21 (tuple21 a b) (tuple21 a c)))))
  (! (= (tb2t5524 (t2tb5524 i)) i) :pattern ((t2tb5524 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 a1) (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)))
     j) (= (t2tb5524 (tb2t5524 j)) j)) :pattern ((t2tb5524 (tb2t5524 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a a))) (t (set (tuple21 (tuple21 a b) (tuple21 a
  c)))) (x (tuple21 a a)) (y (tuple21 (tuple21 a b) (tuple21 a c))))
  (= (mem (tuple2 (tuple2 a1 a1) (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)))
  (Tuple2 (tuple2 a1 a1) (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) (t2tb5 x)
  (t2tb239 y))
  (times (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) (tuple2 a1 a1) (t2tb4 s)
  (t2tb238 t))) (and (mem12 x s) (mem51 y t)))))

(declare-fun t2tb5525 ((tuple21 (tuple21 a a) (tuple21 a c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a a) (tuple21 a c)))) (sort
  (tuple2 (tuple2 a1 a1) (tuple2 a1 c1)) (t2tb5525 x))))

(declare-fun tb2t5525 (uni) (tuple21 (tuple21 a a) (tuple21 a c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a a) (tuple21 a c))))
  (! (= (tb2t5525 (t2tb5525 i)) i) :pattern ((t2tb5525 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 a1) (tuple2 a1 c1)) j)
     (= (t2tb5525 (tb2t5525 j)) j)) :pattern ((t2tb5525 (tb2t5525 j))) )))

(declare-fun t2tb5526 ((set (tuple21 (tuple21 a a) (tuple21 a c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a a) (tuple21 a c))))) (sort
  (set1 (tuple2 (tuple2 a1 a1) (tuple2 a1 c1))) (t2tb5526 x))))

(declare-fun tb2t5526 (uni) (set (tuple21 (tuple21 a a) (tuple21 a c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a a) (tuple21 a c)))))
  (! (= (tb2t5526 (t2tb5526 i)) i) :pattern ((t2tb5526 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 a1) (tuple2 a1 c1))) j)
     (= (t2tb5526 (tb2t5526 j)) j)) :pattern ((t2tb5526 (tb2t5526 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a a))) (t (set (tuple21 a c))) (x (tuple21 a a))
  (y (tuple21 a c)))
  (= (mem (tuple2 (tuple2 a1 a1) (tuple2 a1 c1))
  (Tuple2 (tuple2 a1 a1) (tuple2 a1 c1) (t2tb5 x) (t2tb133 y))
  (times (tuple2 a1 c1) (tuple2 a1 a1) (t2tb4 s) (t2tb129 t)))
  (and (mem12 x s) (mem10 y t)))))

(declare-fun t2tb5527 ((set (tuple21 (tuple21 a a) (set (tuple21 b
  c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a a) (set (tuple21 b c)))))) (sort
  (set1 (tuple2 (tuple2 a1 a1) (set1 (tuple2 b1 c1)))) (t2tb5527 x))))

(declare-fun tb2t5527 (uni) (set (tuple21 (tuple21 a a) (set (tuple21 b
  c)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a a) (set (tuple21 b c))))))
  (! (= (tb2t5527 (t2tb5527 i)) i) :pattern ((t2tb5527 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 a1) (set1 (tuple2 b1 c1)))) j)
     (= (t2tb5527 (tb2t5527 j)) j)) :pattern ((t2tb5527 (tb2t5527 j))) )))

(declare-fun t2tb5528 ((tuple21 (tuple21 a a) (set (tuple21 b c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a a) (set (tuple21 b c))))) (sort
  (tuple2 (tuple2 a1 a1) (set1 (tuple2 b1 c1))) (t2tb5528 x))))

(declare-fun tb2t5528 (uni) (tuple21 (tuple21 a a) (set (tuple21 b c))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a a) (set (tuple21 b c)))))
  (! (= (tb2t5528 (t2tb5528 i)) i) :pattern ((t2tb5528 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 a1) (set1 (tuple2 b1 c1))) j)
     (= (t2tb5528 (tb2t5528 j)) j)) :pattern ((t2tb5528 (tb2t5528 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a a))) (t (set (set (tuple21 b c))))
  (x (tuple21 a a)) (y (set (tuple21 b c))))
  (= (mem (tuple2 (tuple2 a1 a1) (set1 (tuple2 b1 c1)))
  (Tuple2 (tuple2 a1 a1) (set1 (tuple2 b1 c1)) (t2tb5 x) (t2tb131 y))
  (times (set1 (tuple2 b1 c1)) (tuple2 a1 a1) (t2tb4 s) (t2tb130 t)))
  (and (mem12 x s) (mem9 y t)))))

(declare-fun t2tb346 ((tuple21 (tuple21 a a) (tuple21 b c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a a) (tuple21 b c)))) (sort
  (tuple2 (tuple2 a1 a1) (tuple2 b1 c1)) (t2tb346 x))))

(declare-fun tb2t346 (uni) (tuple21 (tuple21 a a) (tuple21 b c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a a) (tuple21 b c))))
  (! (= (tb2t346 (t2tb346 i)) i) :pattern ((t2tb346 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 a1) (tuple2 b1 c1)) j)
     (= (t2tb346 (tb2t346 j)) j)) :pattern ((t2tb346 (tb2t346 j))) )))

(declare-fun t2tb347 ((set (tuple21 (tuple21 a a) (tuple21 b c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a a) (tuple21 b c))))) (sort
  (set1 (tuple2 (tuple2 a1 a1) (tuple2 b1 c1))) (t2tb347 x))))

(declare-fun tb2t347 (uni) (set (tuple21 (tuple21 a a) (tuple21 b c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a a) (tuple21 b c)))))
  (! (= (tb2t347 (t2tb347 i)) i) :pattern ((t2tb347 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 a1) (tuple2 b1 c1))) j)
     (= (t2tb347 (tb2t347 j)) j)) :pattern ((t2tb347 (tb2t347 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a a))) (t (set (tuple21 b c))) (x (tuple21 a a))
  (y (tuple21 b c)))
  (= (mem (tuple2 (tuple2 a1 a1) (tuple2 b1 c1))
  (Tuple2 (tuple2 a1 a1) (tuple2 b1 c1) (t2tb5 x) (t2tb134 y))
  (times (tuple2 b1 c1) (tuple2 a1 a1) (t2tb4 s) (t2tb131 t)))
  (and (mem12 x s) (mem8 y t)))))

(declare-fun t2tb5529 ((set (tuple21 (tuple21 a a) c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a a) c)))) (sort
  (set1 (tuple2 (tuple2 a1 a1) c1)) (t2tb5529 x))))

(declare-fun tb2t5529 (uni) (set (tuple21 (tuple21 a a) c)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a a) c))))
  (! (= (tb2t5529 (t2tb5529 i)) i) :pattern ((t2tb5529 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 a1) c1)) j)
     (= (t2tb5529 (tb2t5529 j)) j)) :pattern ((t2tb5529 (tb2t5529 j))) )))

(declare-fun t2tb5530 ((tuple21 (tuple21 a a) c)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a a) c))) (sort (tuple2 (tuple2 a1 a1) c1)
  (t2tb5530 x))))

(declare-fun tb2t5530 (uni) (tuple21 (tuple21 a a) c))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a a) c)))
  (! (= (tb2t5530 (t2tb5530 i)) i) :pattern ((t2tb5530 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 a1) c1) j) (= (t2tb5530 (tb2t5530 j)) j)) :pattern (
  (t2tb5530 (tb2t5530 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a a))) (t (set c)) (x (tuple21 a a)) (y c))
  (= (mem (tuple2 (tuple2 a1 a1) c1)
  (Tuple2 (tuple2 a1 a1) c1 (t2tb5 x) (t2tb135 y))
  (times c1 (tuple2 a1 a1) (t2tb4 s) (t2tb132 t)))
  (and (mem12 x s) (mem7 y t)))))

(declare-fun t2tb5064 ((set (tuple21 (tuple21 a a) (set (tuple21 a
  b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a a) (set (tuple21 a b)))))) (sort
  (set1 (tuple2 (tuple2 a1 a1) (set1 (tuple2 a1 b1)))) (t2tb5064 x))))

(declare-fun tb2t5064 (uni) (set (tuple21 (tuple21 a a) (set (tuple21 a
  b)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a a) (set (tuple21 a b))))))
  (! (= (tb2t5064 (t2tb5064 i)) i) :pattern ((t2tb5064 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 a1) (set1 (tuple2 a1 b1)))) j)
     (= (t2tb5064 (tb2t5064 j)) j)) :pattern ((t2tb5064 (tb2t5064 j))) )))

(declare-fun t2tb5065 ((tuple21 (tuple21 a a) (set (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a a) (set (tuple21 a b))))) (sort
  (tuple2 (tuple2 a1 a1) (set1 (tuple2 a1 b1))) (t2tb5065 x))))

(declare-fun tb2t5065 (uni) (tuple21 (tuple21 a a) (set (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a a) (set (tuple21 a b)))))
  (! (= (tb2t5065 (t2tb5065 i)) i) :pattern ((t2tb5065 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 a1) (set1 (tuple2 a1 b1))) j)
     (= (t2tb5065 (tb2t5065 j)) j)) :pattern ((t2tb5065 (tb2t5065 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a a))) (t (set (set (tuple21 a b))))
  (x (tuple21 a a)) (y (set (tuple21 a b))))
  (= (mem (tuple2 (tuple2 a1 a1) (set1 (tuple2 a1 b1)))
  (Tuple2 (tuple2 a1 a1) (set1 (tuple2 a1 b1)) (t2tb5 x) (t2tb11 y))
  (times (set1 (tuple2 a1 b1)) (tuple2 a1 a1) (t2tb4 s) (t2tb10 t)))
  (and (mem12 x s) (mem4 y t)))))

(declare-fun t2tb2720 ((set (tuple21 (tuple21 a a) (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a a) (tuple21 a b))))) (sort
  (set1 (tuple2 (tuple2 a1 a1) (tuple2 a1 b1))) (t2tb2720 x))))

(declare-fun tb2t2720 (uni) (set (tuple21 (tuple21 a a) (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a a) (tuple21 a b)))))
  (! (= (tb2t2720 (t2tb2720 i)) i) :pattern ((t2tb2720 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 a1) (tuple2 a1 b1))) j)
     (= (t2tb2720 (tb2t2720 j)) j)) :pattern ((t2tb2720 (tb2t2720 j))) )))

(declare-fun t2tb2721 ((tuple21 (tuple21 a a) (tuple21 a b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a a) (tuple21 a b)))) (sort
  (tuple2 (tuple2 a1 a1) (tuple2 a1 b1)) (t2tb2721 x))))

(declare-fun tb2t2721 (uni) (tuple21 (tuple21 a a) (tuple21 a b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a a) (tuple21 a b))))
  (! (= (tb2t2721 (t2tb2721 i)) i) :pattern ((t2tb2721 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 a1) (tuple2 a1 b1)) j)
     (= (t2tb2721 (tb2t2721 j)) j)) :pattern ((t2tb2721 (tb2t2721 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a a))) (t (set (tuple21 a b))) (x (tuple21 a a))
  (y (tuple21 a b)))
  (= (mem (tuple2 (tuple2 a1 a1) (tuple2 a1 b1))
  (Tuple2 (tuple2 a1 a1) (tuple2 a1 b1) (t2tb5 x) (t2tb13 y))
  (times (tuple2 a1 b1) (tuple2 a1 a1) (t2tb4 s) (t2tb11 t)))
  (and (mem12 x s) (mem3 y t)))))

(declare-fun t2tb2722 ((set (tuple21 (tuple21 a a) b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a a) b)))) (sort
  (set1 (tuple2 (tuple2 a1 a1) b1)) (t2tb2722 x))))

(declare-fun tb2t2722 (uni) (set (tuple21 (tuple21 a a) b)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a a) b))))
  (! (= (tb2t2722 (t2tb2722 i)) i) :pattern ((t2tb2722 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 a1) b1)) j)
     (= (t2tb2722 (tb2t2722 j)) j)) :pattern ((t2tb2722 (tb2t2722 j))) )))

(declare-fun t2tb2723 ((tuple21 (tuple21 a a) b)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a a) b))) (sort (tuple2 (tuple2 a1 a1) b1)
  (t2tb2723 x))))

(declare-fun tb2t2723 (uni) (tuple21 (tuple21 a a) b))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a a) b)))
  (! (= (tb2t2723 (t2tb2723 i)) i) :pattern ((t2tb2723 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 a1) b1) j) (= (t2tb2723 (tb2t2723 j)) j)) :pattern (
  (t2tb2723 (tb2t2723 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a a))) (t (set b)) (x (tuple21 a a)) (y b))
  (= (mem (tuple2 (tuple2 a1 a1) b1)
  (Tuple2 (tuple2 a1 a1) b1 (t2tb5 x) (t2tb14 y))
  (times b1 (tuple2 a1 a1) (t2tb4 s) (t2tb12 t)))
  (and (mem12 x s) (mem2 y t)))))

(declare-fun t2tb2724 ((set (tuple21 (tuple21 a a) (tuple21 a a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a a) (tuple21 a a))))) (sort
  (set1 (tuple2 (tuple2 a1 a1) (tuple2 a1 a1))) (t2tb2724 x))))

(declare-fun tb2t2724 (uni) (set (tuple21 (tuple21 a a) (tuple21 a a))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a a) (tuple21 a a)))))
  (! (= (tb2t2724 (t2tb2724 i)) i) :pattern ((t2tb2724 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 a1) (tuple2 a1 a1))) j)
     (= (t2tb2724 (tb2t2724 j)) j)) :pattern ((t2tb2724 (tb2t2724 j))) )))

(declare-fun t2tb2725 ((tuple21 (tuple21 a a) (tuple21 a a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a a) (tuple21 a a)))) (sort
  (tuple2 (tuple2 a1 a1) (tuple2 a1 a1)) (t2tb2725 x))))

(declare-fun tb2t2725 (uni) (tuple21 (tuple21 a a) (tuple21 a a)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a a) (tuple21 a a))))
  (! (= (tb2t2725 (t2tb2725 i)) i) :pattern ((t2tb2725 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 a1) (tuple2 a1 a1)) j)
     (= (t2tb2725 (tb2t2725 j)) j)) :pattern ((t2tb2725 (tb2t2725 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a a))) (t (set (tuple21 a a))) (x (tuple21 a a))
  (y (tuple21 a a)))
  (= (mem (tuple2 (tuple2 a1 a1) (tuple2 a1 a1))
  (Tuple2 (tuple2 a1 a1) (tuple2 a1 a1) (t2tb5 x) (t2tb5 y))
  (times (tuple2 a1 a1) (tuple2 a1 a1) (t2tb4 s) (t2tb4 t)))
  (and (mem12 x s) (mem12 y t)))))

(declare-fun t2tb2726 ((tuple21 (tuple21 a a) a)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a a) a))) (sort (tuple2 (tuple2 a1 a1) a1)
  (t2tb2726 x))))

(declare-fun tb2t2726 (uni) (tuple21 (tuple21 a a) a))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a a) a)))
  (! (= (tb2t2726 (t2tb2726 i)) i) :pattern ((t2tb2726 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 a1) a1) j) (= (t2tb2726 (tb2t2726 j)) j)) :pattern (
  (t2tb2726 (tb2t2726 j))) )))

(declare-fun t2tb2727 ((set (tuple21 (tuple21 a a) a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a a) a)))) (sort
  (set1 (tuple2 (tuple2 a1 a1) a1)) (t2tb2727 x))))

(declare-fun tb2t2727 (uni) (set (tuple21 (tuple21 a a) a)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a a) a))))
  (! (= (tb2t2727 (t2tb2727 i)) i) :pattern ((t2tb2727 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 a1) a1)) j)
     (= (t2tb2727 (tb2t2727 j)) j)) :pattern ((t2tb2727 (tb2t2727 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a a))) (t (set a)) (x (tuple21 a a)) (y a))
  (= (mem (tuple2 (tuple2 a1 a1) a1)
  (Tuple2 (tuple2 a1 a1) a1 (t2tb5 x) (t2tb2 y))
  (times a1 (tuple2 a1 a1) (t2tb4 s) (t2tb1 t)))
  (and (mem12 x s) (mem1 y t)))))

;; mem_times
  (assert
  (forall ((b2 ty))
  (forall ((s (set (tuple21 a a))) (t uni) (x (tuple21 a a)) (y uni))
  (= (mem (tuple2 (tuple2 a1 a1) b2) (Tuple2 (tuple2 a1 a1) b2 (t2tb5 x) y)
  (times b2 (tuple2 a1 a1) (t2tb4 s) t)) (and (mem12 x s) (mem b2 y t))))))

(declare-fun t2tb5531 ((set (tuple21 a (tuple21 (tuple21 a b) (tuple21 a
  c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (tuple21 (tuple21 a b) (tuple21 a c)))))) (sort
  (set1 (tuple2 a1 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)))) (t2tb5531 x))))

(declare-fun tb2t5531 (uni) (set (tuple21 a (tuple21 (tuple21 a b) (tuple21 a
  c)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (tuple21 (tuple21 a b) (tuple21 a c))))))
  (! (= (tb2t5531 (t2tb5531 i)) i) :pattern ((t2tb5531 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)))) j)
     (= (t2tb5531 (tb2t5531 j)) j)) :pattern ((t2tb5531 (tb2t5531 j))) )))

(declare-fun t2tb5532 ((tuple21 a (tuple21 (tuple21 a b) (tuple21 a
  c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (tuple21 (tuple21 a b) (tuple21 a c))))) (sort
  (tuple2 a1 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1))) (t2tb5532 x))))

(declare-fun tb2t5532 (uni) (tuple21 a (tuple21 (tuple21 a b) (tuple21 a
  c))))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (tuple21 (tuple21 a b) (tuple21 a c)))))
  (! (= (tb2t5532 (t2tb5532 i)) i) :pattern ((t2tb5532 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1))) j)
     (= (t2tb5532 (tb2t5532 j)) j)) :pattern ((t2tb5532 (tb2t5532 j))) )))

;; mem_times
  (assert
  (forall ((s (set a)) (t (set (tuple21 (tuple21 a b) (tuple21 a c)))) (x a)
  (y (tuple21 (tuple21 a b) (tuple21 a c))))
  (= (mem (tuple2 a1 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)))
  (Tuple2 a1 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) (t2tb2 x) (t2tb239 y))
  (times (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) a1 (t2tb1 s) (t2tb238 t)))
  (and (mem1 x s) (mem51 y t)))))

(declare-fun t2tb256 ((set (tuple21 a (tuple21 a c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (tuple21 a c))))) (sort
  (set1 (tuple2 a1 (tuple2 a1 c1))) (t2tb256 x))))

(declare-fun tb2t256 (uni) (set (tuple21 a (tuple21 a c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (tuple21 a c)))))
  (! (= (tb2t256 (t2tb256 i)) i) :pattern ((t2tb256 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (tuple2 a1 c1))) j)
     (= (t2tb256 (tb2t256 j)) j)) :pattern ((t2tb256 (tb2t256 j))) )))

(declare-fun t2tb257 ((tuple21 a (tuple21 a c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (tuple21 a c)))) (sort (tuple2 a1 (tuple2 a1 c1))
  (t2tb257 x))))

(declare-fun tb2t257 (uni) (tuple21 a (tuple21 a c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (tuple21 a c))))
  (! (= (tb2t257 (t2tb257 i)) i) :pattern ((t2tb257 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (tuple2 a1 c1)) j) (= (t2tb257 (tb2t257 j)) j)) :pattern (
  (t2tb257 (tb2t257 j))) )))

;; mem_times
  (assert
  (forall ((s (set a)) (t (set (tuple21 a c))) (x a) (y (tuple21 a c)))
  (= (mem (tuple2 a1 (tuple2 a1 c1))
  (Tuple2 a1 (tuple2 a1 c1) (t2tb2 x) (t2tb133 y))
  (times (tuple2 a1 c1) a1 (t2tb1 s) (t2tb129 t)))
  (and (mem1 x s) (mem10 y t)))))

(declare-fun t2tb1141 ((set (tuple21 a (set (tuple21 b c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (set (tuple21 b c)))))) (sort
  (set1 (tuple2 a1 (set1 (tuple2 b1 c1)))) (t2tb1141 x))))

(declare-fun tb2t1141 (uni) (set (tuple21 a (set (tuple21 b c)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (set (tuple21 b c))))))
  (! (= (tb2t1141 (t2tb1141 i)) i) :pattern ((t2tb1141 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (set1 (tuple2 b1 c1)))) j)
     (= (t2tb1141 (tb2t1141 j)) j)) :pattern ((t2tb1141 (tb2t1141 j))) )))

(declare-fun t2tb1142 ((tuple21 a (set (tuple21 b c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (set (tuple21 b c))))) (sort
  (tuple2 a1 (set1 (tuple2 b1 c1))) (t2tb1142 x))))

(declare-fun tb2t1142 (uni) (tuple21 a (set (tuple21 b c))))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (set (tuple21 b c)))))
  (! (= (tb2t1142 (t2tb1142 i)) i) :pattern ((t2tb1142 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (set1 (tuple2 b1 c1))) j)
     (= (t2tb1142 (tb2t1142 j)) j)) :pattern ((t2tb1142 (tb2t1142 j))) )))

;; mem_times
  (assert
  (forall ((s (set a)) (t (set (set (tuple21 b c)))) (x a) (y (set (tuple21 b
  c))))
  (= (mem (tuple2 a1 (set1 (tuple2 b1 c1)))
  (Tuple2 a1 (set1 (tuple2 b1 c1)) (t2tb2 x) (t2tb131 y))
  (times (set1 (tuple2 b1 c1)) a1 (t2tb1 s) (t2tb130 t)))
  (and (mem1 x s) (mem9 y t)))))

(declare-fun t2tb260 ((tuple21 a (tuple21 b c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (tuple21 b c)))) (sort (tuple2 a1 (tuple2 b1 c1))
  (t2tb260 x))))

(declare-fun tb2t260 (uni) (tuple21 a (tuple21 b c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (tuple21 b c))))
  (! (= (tb2t260 (t2tb260 i)) i) :pattern ((t2tb260 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (tuple2 b1 c1)) j) (= (t2tb260 (tb2t260 j)) j)) :pattern (
  (t2tb260 (tb2t260 j))) )))

(declare-fun t2tb261 ((set (tuple21 a (tuple21 b c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (tuple21 b c))))) (sort
  (set1 (tuple2 a1 (tuple2 b1 c1))) (t2tb261 x))))

(declare-fun tb2t261 (uni) (set (tuple21 a (tuple21 b c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (tuple21 b c)))))
  (! (= (tb2t261 (t2tb261 i)) i) :pattern ((t2tb261 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (tuple2 b1 c1))) j)
     (= (t2tb261 (tb2t261 j)) j)) :pattern ((t2tb261 (tb2t261 j))) )))

;; mem_times
  (assert
  (forall ((s (set a)) (t (set (tuple21 b c))) (x a) (y (tuple21 b c)))
  (= (mem (tuple2 a1 (tuple2 b1 c1))
  (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 y))
  (times (tuple2 b1 c1) a1 (t2tb1 s) (t2tb131 t)))
  (and (mem1 x s) (mem8 y t)))))

;; mem_times
  (assert
  (forall ((s (set a)) (t (set c)) (x a) (y c))
  (= (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y)))
  (tb2t129 (times c1 a1 (t2tb1 s) (t2tb132 t)))) (and (mem1 x s) (mem7 y t)))))

(declare-fun t2tb39 ((set (tuple21 a (set (tuple21 a b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (set (tuple21 a b)))))) (sort
  (set1 (tuple2 a1 (set1 (tuple2 a1 b1)))) (t2tb39 x))))

(declare-fun tb2t39 (uni) (set (tuple21 a (set (tuple21 a b)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (set (tuple21 a b))))))
  (! (= (tb2t39 (t2tb39 i)) i) :pattern ((t2tb39 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (set1 (tuple2 a1 b1)))) j)
     (= (t2tb39 (tb2t39 j)) j)) :pattern ((t2tb39 (tb2t39 j))) )))

(declare-fun t2tb40 ((tuple21 a (set (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (set (tuple21 a b))))) (sort
  (tuple2 a1 (set1 (tuple2 a1 b1))) (t2tb40 x))))

(declare-fun tb2t40 (uni) (tuple21 a (set (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (set (tuple21 a b)))))
  (! (= (tb2t40 (t2tb40 i)) i) :pattern ((t2tb40 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (set1 (tuple2 a1 b1))) j)
     (= (t2tb40 (tb2t40 j)) j)) :pattern ((t2tb40 (tb2t40 j))) )))

;; mem_times
  (assert
  (forall ((s (set a)) (t (set (set (tuple21 a b)))) (x a) (y (set (tuple21 a
  b))))
  (= (mem (tuple2 a1 (set1 (tuple2 a1 b1)))
  (Tuple2 a1 (set1 (tuple2 a1 b1)) (t2tb2 x) (t2tb11 y))
  (times (set1 (tuple2 a1 b1)) a1 (t2tb1 s) (t2tb10 t)))
  (and (mem1 x s) (mem4 y t)))))

(declare-fun t2tb41 ((set (tuple21 a (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (tuple21 a b))))) (sort
  (set1 (tuple2 a1 (tuple2 a1 b1))) (t2tb41 x))))

(declare-fun tb2t41 (uni) (set (tuple21 a (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (tuple21 a b)))))
  (! (= (tb2t41 (t2tb41 i)) i) :pattern ((t2tb41 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (tuple2 a1 b1))) j)
     (= (t2tb41 (tb2t41 j)) j)) :pattern ((t2tb41 (tb2t41 j))) )))

(declare-fun t2tb42 ((tuple21 a (tuple21 a b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (tuple21 a b)))) (sort (tuple2 a1 (tuple2 a1 b1))
  (t2tb42 x))))

(declare-fun tb2t42 (uni) (tuple21 a (tuple21 a b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (tuple21 a b))))
  (! (= (tb2t42 (t2tb42 i)) i) :pattern ((t2tb42 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (tuple2 a1 b1)) j) (= (t2tb42 (tb2t42 j)) j)) :pattern (
  (t2tb42 (tb2t42 j))) )))

;; mem_times
  (assert
  (forall ((s (set a)) (t (set (tuple21 a b))) (x a) (y (tuple21 a b)))
  (= (mem (tuple2 a1 (tuple2 a1 b1))
  (Tuple2 a1 (tuple2 a1 b1) (t2tb2 x) (t2tb13 y))
  (times (tuple2 a1 b1) a1 (t2tb1 s) (t2tb11 t)))
  (and (mem1 x s) (mem3 y t)))))

;; mem_times
  (assert
  (forall ((s (set a)) (t (set b)) (x a) (y b))
  (= (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y)))
  (tb2t11 (times b1 a1 (t2tb1 s) (t2tb12 t)))) (and (mem1 x s) (mem2 y t)))))

(declare-fun t2tb2728 ((set (tuple21 a (tuple21 a a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (tuple21 a a))))) (sort
  (set1 (tuple2 a1 (tuple2 a1 a1))) (t2tb2728 x))))

(declare-fun tb2t2728 (uni) (set (tuple21 a (tuple21 a a))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (tuple21 a a)))))
  (! (= (tb2t2728 (t2tb2728 i)) i) :pattern ((t2tb2728 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (tuple2 a1 a1))) j)
     (= (t2tb2728 (tb2t2728 j)) j)) :pattern ((t2tb2728 (tb2t2728 j))) )))

(declare-fun t2tb2729 ((tuple21 a (tuple21 a a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (tuple21 a a)))) (sort (tuple2 a1 (tuple2 a1 a1))
  (t2tb2729 x))))

(declare-fun tb2t2729 (uni) (tuple21 a (tuple21 a a)))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (tuple21 a a))))
  (! (= (tb2t2729 (t2tb2729 i)) i) :pattern ((t2tb2729 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (tuple2 a1 a1)) j) (= (t2tb2729 (tb2t2729 j)) j)) :pattern (
  (t2tb2729 (tb2t2729 j))) )))

;; mem_times
  (assert
  (forall ((s (set a)) (t (set (tuple21 a a))) (x a) (y (tuple21 a a)))
  (= (mem (tuple2 a1 (tuple2 a1 a1))
  (Tuple2 a1 (tuple2 a1 a1) (t2tb2 x) (t2tb5 y))
  (times (tuple2 a1 a1) a1 (t2tb1 s) (t2tb4 t)))
  (and (mem1 x s) (mem12 y t)))))

;; mem_times
  (assert
  (forall ((s (set a)) (t (set a)) (x a) (y a))
  (= (mem12 (tb2t5 (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y)))
  (tb2t4 (times a1 a1 (t2tb1 s) (t2tb1 t)))) (and (mem1 x s) (mem1 y t)))))

;; mem_times
  (assert
  (forall ((b2 ty))
  (forall ((s (set a)) (t uni) (x a) (y uni))
  (= (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) y)
  (times b2 a1 (t2tb1 s) t)) (and (mem1 x s) (mem b2 y t))))))

;; mem_times
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (x uni) (y uni))
  (= (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) (times b2 a2 s t))
  (and (mem a2 x s) (mem b2 y t))))))

(declare-fun t2tb316 ((set (set (tuple21 (tuple21 a b) (tuple21 a c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a b) (tuple21 a c)))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)))) (t2tb316 x))))

(declare-fun tb2t316 (uni) (set (set (tuple21 (tuple21 a b) (tuple21 a c)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a b) (tuple21 a c))))))
  (! (= (tb2t316 (t2tb316 i)) i) :pattern ((t2tb316 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)))) j)
     (= (t2tb316 (tb2t316 j)) j)) :pattern ((t2tb316 (tb2t316 j))) )))

;; mem_power
  (assert
  (forall ((s (set (tuple21 (tuple21 a b) (tuple21 a c))))
  (t (set (tuple21 (tuple21 a b) (tuple21 a c)))))
  (= (mem (set1 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1))) (t2tb238 s)
  (power (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) (t2tb238 t)))
  (forall ((x (tuple21 (tuple21 a b) (tuple21 a c))))
  (=> (mem51 x s) (mem51 x t))))))

(declare-fun t2tb128 ((set (set (tuple21 a c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 a c))))) (sort (set1 (set1 (tuple2 a1 c1)))
  (t2tb128 x))))

(declare-fun tb2t128 (uni) (set (set (tuple21 a c))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 a c)))))
  (! (= (tb2t128 (t2tb128 i)) i) :pattern ((t2tb128 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 a1 c1))) j) (= (t2tb128 (tb2t128 j)) j)) :pattern (
  (t2tb128 (tb2t128 j))) )))

;; mem_power
  (assert
  (forall ((s (set (tuple21 a c))) (t (set (tuple21 a c))))
  (= (mem (set1 (tuple2 a1 c1)) (t2tb129 s)
  (power (tuple2 a1 c1) (t2tb129 t)))
  (forall ((x (tuple21 a c))) (=> (mem10 x s) (mem10 x t))))))

(declare-fun t2tb1088 ((set (set (set (tuple21 b c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (set (tuple21 b c)))))) (sort
  (set1 (set1 (set1 (tuple2 b1 c1)))) (t2tb1088 x))))

(declare-fun tb2t1088 (uni) (set (set (set (tuple21 b c)))))

;; BridgeL
  (assert
  (forall ((i (set (set (set (tuple21 b c))))))
  (! (= (tb2t1088 (t2tb1088 i)) i) :pattern ((t2tb1088 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (set1 (tuple2 b1 c1)))) j)
     (= (t2tb1088 (tb2t1088 j)) j)) :pattern ((t2tb1088 (tb2t1088 j))) )))

;; mem_power
  (assert
  (forall ((s (set (set (tuple21 b c)))) (t (set (set (tuple21 b c)))))
  (= (mem (set1 (set1 (tuple2 b1 c1))) (t2tb130 s)
  (power (set1 (tuple2 b1 c1)) (t2tb130 t)))
  (forall ((x (set (tuple21 b c)))) (=> (mem9 x s) (mem9 x t))))))

;; mem_power
  (assert
  (forall ((s (set (tuple21 b c))) (t (set (tuple21 b c))))
  (= (mem9 s (tb2t130 (power (tuple2 b1 c1) (t2tb131 t))))
  (forall ((x (tuple21 b c))) (=> (mem8 x s) (mem8 x t))))))

(declare-fun t2tb264 ((set (set c))) uni)

;; t2tb_sort
  (assert (forall ((x (set (set c)))) (sort (set1 (set1 c1)) (t2tb264 x))))

(declare-fun tb2t264 (uni) (set (set c)))

;; BridgeL
  (assert
  (forall ((i (set (set c))))
  (! (= (tb2t264 (t2tb264 i)) i) :pattern ((t2tb264 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 c1)) j) (= (t2tb264 (tb2t264 j)) j)) :pattern (
  (t2tb264 (tb2t264 j))) )))

;; mem_power
  (assert
  (forall ((s (set c)) (t (set c)))
  (= (mem (set1 c1) (t2tb132 s) (power c1 (t2tb132 t)))
  (forall ((x c)) (=> (mem7 x s) (mem7 x t))))))

(declare-fun t2tb43 ((set (set (set (tuple21 a b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (set (tuple21 a b)))))) (sort
  (set1 (set1 (set1 (tuple2 a1 b1)))) (t2tb43 x))))

(declare-fun tb2t43 (uni) (set (set (set (tuple21 a b)))))

;; BridgeL
  (assert
  (forall ((i (set (set (set (tuple21 a b))))))
  (! (= (tb2t43 (t2tb43 i)) i) :pattern ((t2tb43 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (set1 (tuple2 a1 b1)))) j)
     (= (t2tb43 (tb2t43 j)) j)) :pattern ((t2tb43 (tb2t43 j))) )))

;; mem_power
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set (set (tuple21 a b)))))
  (= (mem (set1 (set1 (tuple2 a1 b1))) (t2tb10 s)
  (power (set1 (tuple2 a1 b1)) (t2tb10 t)))
  (forall ((x (set (tuple21 a b)))) (=> (mem4 x s) (mem4 x t))))))

;; mem_power
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (tuple21 a b))))
  (= (mem4 s (tb2t10 (power (tuple2 a1 b1) (t2tb11 t))))
  (forall ((x (tuple21 a b))) (=> (mem3 x s) (mem3 x t))))))

(declare-fun t2tb44 ((set (set b))) uni)

;; t2tb_sort
  (assert (forall ((x (set (set b)))) (sort (set1 (set1 b1)) (t2tb44 x))))

(declare-fun tb2t44 (uni) (set (set b)))

;; BridgeL
  (assert
  (forall ((i (set (set b))))
  (! (= (tb2t44 (t2tb44 i)) i) :pattern ((t2tb44 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 b1)) j) (= (t2tb44 (tb2t44 j)) j)) :pattern (
  (t2tb44 (tb2t44 j))) )))

;; mem_power
  (assert
  (forall ((s (set b)) (t (set b)))
  (= (mem (set1 b1) (t2tb12 s) (power b1 (t2tb12 t)))
  (forall ((x b)) (=> (mem2 x s) (mem2 x t))))))

(declare-fun t2tb3 ((set (set (tuple21 a a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 a a))))) (sort (set1 (set1 (tuple2 a1 a1)))
  (t2tb3 x))))

(declare-fun tb2t3 (uni) (set (set (tuple21 a a))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 a a)))))
  (! (= (tb2t3 (t2tb3 i)) i) :pattern ((t2tb3 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 a1 a1))) j) (= (t2tb3 (tb2t3 j)) j)) :pattern (
  (t2tb3 (tb2t3 j))) )))

;; mem_power
  (assert
  (forall ((s (set (tuple21 a a))) (t (set (tuple21 a a))))
  (= (mem (set1 (tuple2 a1 a1)) (t2tb4 s) (power (tuple2 a1 a1) (t2tb4 t)))
  (forall ((x (tuple21 a a))) (=> (mem12 x s) (mem12 x t))))))

(declare-fun t2tb ((set (set a))) uni)

;; t2tb_sort
  (assert (forall ((x (set (set a)))) (sort (set1 (set1 a1)) (t2tb x))))

(declare-fun tb2t (uni) (set (set a)))

;; BridgeL
  (assert
  (forall ((i (set (set a)))) (! (= (tb2t (t2tb i)) i) :pattern ((t2tb i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 a1)) j) (= (t2tb (tb2t j)) j)) :pattern ((t2tb
                                                                    (tb2t j))) )))

;; mem_power
  (assert
  (forall ((s (set a)) (t (set a)))
  (= (mem (set1 a1) (t2tb1 s) (power a1 (t2tb1 t)))
  (forall ((x a)) (=> (mem1 x s) (mem1 x t))))))

;; mem_power
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t uni))
  (and
  (=> (mem (set1 a2) s (power a2 t))
  (forall ((x uni)) (=> (mem a2 x s) (mem a2 x t))))
  (=> (forall ((x uni)) (=> (sort a2 x) (=> (mem a2 x s) (mem a2 x t)))) (mem
  (set1 a2) s (power a2 t)))))))

;; mem_non_empty_power
  (assert
  (forall ((s (set (tuple21 (tuple21 a b) (tuple21 a c))))
  (t (set (tuple21 (tuple21 a b) (tuple21 a c)))))
  (= (mem (set1 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1))) (t2tb238 s)
  (non_empty_power (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) (t2tb238 t)))
  (and
  (forall ((x (tuple21 (tuple21 a b) (tuple21 a c))))
  (=> (mem51 x s) (mem51 x t)))
  (not (infix_eqeq44 s
  (tb2t238 (empty (tuple2 (tuple2 a1 b1) (tuple2 a1 c1))))))))))

;; mem_non_empty_power
  (assert
  (forall ((s (set (tuple21 a c))) (t (set (tuple21 a c))))
  (= (mem (set1 (tuple2 a1 c1)) (t2tb129 s)
  (non_empty_power (tuple2 a1 c1) (t2tb129 t)))
  (and (forall ((x (tuple21 a c))) (=> (mem10 x s) (mem10 x t)))
  (not (infix_eqeq9 s (tb2t129 (empty (tuple2 a1 c1)))))))))

;; mem_non_empty_power
  (assert
  (forall ((s (set (set (tuple21 b c)))) (t (set (set (tuple21 b c)))))
  (= (mem (set1 (set1 (tuple2 b1 c1))) (t2tb130 s)
  (non_empty_power (set1 (tuple2 b1 c1)) (t2tb130 t)))
  (and (forall ((x (set (tuple21 b c)))) (=> (mem9 x s) (mem9 x t)))
  (not (infix_eqeq10 s (tb2t130 (empty (set1 (tuple2 b1 c1))))))))))

;; mem_non_empty_power
  (assert
  (forall ((s (set (tuple21 b c))) (t (set (tuple21 b c))))
  (= (mem9 s (tb2t130 (non_empty_power (tuple2 b1 c1) (t2tb131 t))))
  (and (forall ((x (tuple21 b c))) (=> (mem8 x s) (mem8 x t)))
  (not (infix_eqeq8 s (tb2t131 (empty (tuple2 b1 c1)))))))))

;; mem_non_empty_power
  (assert
  (forall ((s (set c)) (t (set c)))
  (= (mem (set1 c1) (t2tb132 s) (non_empty_power c1 (t2tb132 t)))
  (and (forall ((x c)) (=> (mem7 x s) (mem7 x t)))
  (not (infix_eqeq7 s (tb2t132 (empty c1))))))))

;; mem_non_empty_power
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set (set (tuple21 a b)))))
  (= (mem (set1 (set1 (tuple2 a1 b1))) (t2tb10 s)
  (non_empty_power (set1 (tuple2 a1 b1)) (t2tb10 t)))
  (and (forall ((x (set (tuple21 a b)))) (=> (mem4 x s) (mem4 x t)))
  (not (infix_eqeq5 s (tb2t10 (empty (set1 (tuple2 a1 b1))))))))))

;; mem_non_empty_power
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (tuple21 a b))))
  (= (mem4 s (tb2t10 (non_empty_power (tuple2 a1 b1) (t2tb11 t))))
  (and (forall ((x (tuple21 a b))) (=> (mem3 x s) (mem3 x t)))
  (not (infix_eqeq4 s (tb2t11 (empty (tuple2 a1 b1)))))))))

;; mem_non_empty_power
  (assert
  (forall ((s (set b)) (t (set b)))
  (= (mem (set1 b1) (t2tb12 s) (non_empty_power b1 (t2tb12 t)))
  (and (forall ((x b)) (=> (mem2 x s) (mem2 x t)))
  (not (infix_eqeq3 s (tb2t12 (empty b1))))))))

;; mem_non_empty_power
  (assert
  (forall ((s (set (tuple21 a a))) (t (set (tuple21 a a))))
  (= (mem (set1 (tuple2 a1 a1)) (t2tb4 s)
  (non_empty_power (tuple2 a1 a1) (t2tb4 t)))
  (and (forall ((x (tuple21 a a))) (=> (mem12 x s) (mem12 x t)))
  (not (infix_eqeq2 s (tb2t4 (empty (tuple2 a1 a1)))))))))

;; mem_non_empty_power
  (assert
  (forall ((s (set a)) (t (set a)))
  (= (mem (set1 a1) (t2tb1 s) (non_empty_power a1 (t2tb1 t)))
  (and (forall ((x a)) (=> (mem1 x s) (mem1 x t)))
  (not (infix_eqeq1 s (tb2t1 (empty a1))))))))

;; mem_non_empty_power
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t uni))
  (and
  (=> (mem (set1 a2) s (non_empty_power a2 t))
  (and (forall ((x uni)) (=> (mem a2 x s) (mem a2 x t)))
  (not (infix_eqeq a2 s (empty a2)))))
  (=>
  (and (forall ((x uni)) (=> (sort a2 x) (=> (mem a2 x s) (mem a2 x t))))
  (not (infix_eqeq a2 s (empty a2)))) (mem (set1 a2) s
  (non_empty_power a2 t)))))))

(declare-fun choose (ty uni) uni)

;; choose_sort
  (assert (forall ((a2 ty)) (forall ((x uni)) (sort a2 (choose a2 x)))))

(declare-fun relation (ty ty uni uni) uni)

;; relation_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (set1 (tuple2 a2 b2)))
  (relation b2 a2 x x1)))))

(declare-fun relation1 ((set a) (set b)) (set (set (tuple21 a b))))

(declare-fun relation4 ((set b) (set c)) (set (set (tuple21 b c))))

;; mem_relation
  (assert
  (forall ((a2 ty))
  (forall ((u uni) (v (set (tuple21 (tuple21 a b) (tuple21 a c)))) (r uni))
  (and
  (=> (mem (set1 (tuple2 a2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)))) r
  (relation (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) a2 u (t2tb238 v)))
  (forall ((x uni) (y (tuple21 (tuple21 a b) (tuple21 a c))))
  (=> (mem (tuple2 a2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)))
  (Tuple2 a2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) x (t2tb239 y)) r)
  (and (mem a2 x u) (mem51 y v)))))
  (=>
  (forall ((x uni) (y (tuple21 (tuple21 a b) (tuple21 a c))))
  (=> (sort a2 x)
  (=> (mem (tuple2 a2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)))
  (Tuple2 a2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) x (t2tb239 y)) r)
  (and (mem a2 x u) (mem51 y v))))) (mem
  (set1 (tuple2 a2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)))) r
  (relation (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) a2 u (t2tb238 v))))))))

;; mem_relation
  (assert
  (forall ((a2 ty))
  (forall ((u uni) (v (set (tuple21 a c))) (r uni))
  (and
  (=> (mem (set1 (tuple2 a2 (tuple2 a1 c1))) r
  (relation (tuple2 a1 c1) a2 u (t2tb129 v)))
  (forall ((x uni) (y (tuple21 a c)))
  (=> (mem (tuple2 a2 (tuple2 a1 c1))
  (Tuple2 a2 (tuple2 a1 c1) x (t2tb133 y)) r) (and (mem a2 x u) (mem10 y v)))))
  (=>
  (forall ((x uni) (y (tuple21 a c)))
  (=> (sort a2 x)
  (=> (mem (tuple2 a2 (tuple2 a1 c1))
  (Tuple2 a2 (tuple2 a1 c1) x (t2tb133 y)) r) (and (mem a2 x u) (mem10 y v)))))
  (mem (set1 (tuple2 a2 (tuple2 a1 c1))) r
  (relation (tuple2 a1 c1) a2 u (t2tb129 v))))))))

;; mem_relation
  (assert
  (forall ((a2 ty))
  (forall ((u uni) (v (set (set (tuple21 b c)))) (r uni))
  (and
  (=> (mem (set1 (tuple2 a2 (set1 (tuple2 b1 c1)))) r
  (relation (set1 (tuple2 b1 c1)) a2 u (t2tb130 v)))
  (forall ((x uni) (y (set (tuple21 b c))))
  (=> (mem (tuple2 a2 (set1 (tuple2 b1 c1)))
  (Tuple2 a2 (set1 (tuple2 b1 c1)) x (t2tb131 y)) r)
  (and (mem a2 x u) (mem9 y v)))))
  (=>
  (forall ((x uni) (y (set (tuple21 b c))))
  (=> (sort a2 x)
  (=> (mem (tuple2 a2 (set1 (tuple2 b1 c1)))
  (Tuple2 a2 (set1 (tuple2 b1 c1)) x (t2tb131 y)) r)
  (and (mem a2 x u) (mem9 y v))))) (mem
  (set1 (tuple2 a2 (set1 (tuple2 b1 c1)))) r
  (relation (set1 (tuple2 b1 c1)) a2 u (t2tb130 v))))))))

;; mem_relation
  (assert
  (forall ((a2 ty))
  (forall ((u uni) (v (set (tuple21 b c))) (r uni))
  (and
  (=> (mem (set1 (tuple2 a2 (tuple2 b1 c1))) r
  (relation (tuple2 b1 c1) a2 u (t2tb131 v)))
  (forall ((x uni) (y (tuple21 b c)))
  (=> (mem (tuple2 a2 (tuple2 b1 c1))
  (Tuple2 a2 (tuple2 b1 c1) x (t2tb134 y)) r) (and (mem a2 x u) (mem8 y v)))))
  (=>
  (forall ((x uni) (y (tuple21 b c)))
  (=> (sort a2 x)
  (=> (mem (tuple2 a2 (tuple2 b1 c1))
  (Tuple2 a2 (tuple2 b1 c1) x (t2tb134 y)) r) (and (mem a2 x u) (mem8 y v)))))
  (mem (set1 (tuple2 a2 (tuple2 b1 c1))) r
  (relation (tuple2 b1 c1) a2 u (t2tb131 v))))))))

;; mem_relation
  (assert
  (forall ((a2 ty))
  (forall ((u uni) (v (set c)) (r uni))
  (and
  (=> (mem (set1 (tuple2 a2 c1)) r (relation c1 a2 u (t2tb132 v)))
  (forall ((x uni) (y c))
  (=> (mem (tuple2 a2 c1) (Tuple2 a2 c1 x (t2tb135 y)) r)
  (and (mem a2 x u) (mem7 y v)))))
  (=>
  (forall ((x uni) (y c))
  (=> (sort a2 x)
  (=> (mem (tuple2 a2 c1) (Tuple2 a2 c1 x (t2tb135 y)) r)
  (and (mem a2 x u) (mem7 y v))))) (mem (set1 (tuple2 a2 c1)) r
  (relation c1 a2 u (t2tb132 v))))))))

;; mem_relation
  (assert
  (forall ((a2 ty))
  (forall ((u uni) (v (set (set (tuple21 a b)))) (r uni))
  (and
  (=> (mem (set1 (tuple2 a2 (set1 (tuple2 a1 b1)))) r
  (relation (set1 (tuple2 a1 b1)) a2 u (t2tb10 v)))
  (forall ((x uni) (y (set (tuple21 a b))))
  (=> (mem (tuple2 a2 (set1 (tuple2 a1 b1)))
  (Tuple2 a2 (set1 (tuple2 a1 b1)) x (t2tb11 y)) r)
  (and (mem a2 x u) (mem4 y v)))))
  (=>
  (forall ((x uni) (y (set (tuple21 a b))))
  (=> (sort a2 x)
  (=> (mem (tuple2 a2 (set1 (tuple2 a1 b1)))
  (Tuple2 a2 (set1 (tuple2 a1 b1)) x (t2tb11 y)) r)
  (and (mem a2 x u) (mem4 y v))))) (mem
  (set1 (tuple2 a2 (set1 (tuple2 a1 b1)))) r
  (relation (set1 (tuple2 a1 b1)) a2 u (t2tb10 v))))))))

;; mem_relation
  (assert
  (forall ((a2 ty))
  (forall ((u uni) (v (set (tuple21 a b))) (r uni))
  (and
  (=> (mem (set1 (tuple2 a2 (tuple2 a1 b1))) r
  (relation (tuple2 a1 b1) a2 u (t2tb11 v)))
  (forall ((x uni) (y (tuple21 a b)))
  (=> (mem (tuple2 a2 (tuple2 a1 b1)) (Tuple2 a2 (tuple2 a1 b1) x (t2tb13 y))
  r) (and (mem a2 x u) (mem3 y v)))))
  (=>
  (forall ((x uni) (y (tuple21 a b)))
  (=> (sort a2 x)
  (=> (mem (tuple2 a2 (tuple2 a1 b1)) (Tuple2 a2 (tuple2 a1 b1) x (t2tb13 y))
  r) (and (mem a2 x u) (mem3 y v))))) (mem (set1 (tuple2 a2 (tuple2 a1 b1)))
  r (relation (tuple2 a1 b1) a2 u (t2tb11 v))))))))

;; mem_relation
  (assert
  (forall ((a2 ty))
  (forall ((u uni) (v (set b)) (r uni))
  (and
  (=> (mem (set1 (tuple2 a2 b1)) r (relation b1 a2 u (t2tb12 v)))
  (forall ((x uni) (y b))
  (=> (mem (tuple2 a2 b1) (Tuple2 a2 b1 x (t2tb14 y)) r)
  (and (mem a2 x u) (mem2 y v)))))
  (=>
  (forall ((x uni) (y b))
  (=> (sort a2 x)
  (=> (mem (tuple2 a2 b1) (Tuple2 a2 b1 x (t2tb14 y)) r)
  (and (mem a2 x u) (mem2 y v))))) (mem (set1 (tuple2 a2 b1)) r
  (relation b1 a2 u (t2tb12 v))))))))

;; mem_relation
  (assert
  (forall ((a2 ty))
  (forall ((u uni) (v (set (tuple21 a a))) (r uni))
  (and
  (=> (mem (set1 (tuple2 a2 (tuple2 a1 a1))) r
  (relation (tuple2 a1 a1) a2 u (t2tb4 v)))
  (forall ((x uni) (y (tuple21 a a)))
  (=> (mem (tuple2 a2 (tuple2 a1 a1)) (Tuple2 a2 (tuple2 a1 a1) x (t2tb5 y))
  r) (and (mem a2 x u) (mem12 y v)))))
  (=>
  (forall ((x uni) (y (tuple21 a a)))
  (=> (sort a2 x)
  (=> (mem (tuple2 a2 (tuple2 a1 a1)) (Tuple2 a2 (tuple2 a1 a1) x (t2tb5 y))
  r) (and (mem a2 x u) (mem12 y v))))) (mem (set1 (tuple2 a2 (tuple2 a1 a1)))
  r (relation (tuple2 a1 a1) a2 u (t2tb4 v))))))))

;; mem_relation
  (assert
  (forall ((a2 ty))
  (forall ((u uni) (v (set a)) (r uni))
  (and
  (=> (mem (set1 (tuple2 a2 a1)) r (relation a1 a2 u (t2tb1 v)))
  (forall ((x uni) (y a))
  (=> (mem (tuple2 a2 a1) (Tuple2 a2 a1 x (t2tb2 y)) r)
  (and (mem a2 x u) (mem1 y v)))))
  (=>
  (forall ((x uni) (y a))
  (=> (sort a2 x)
  (=> (mem (tuple2 a2 a1) (Tuple2 a2 a1 x (t2tb2 y)) r)
  (and (mem a2 x u) (mem1 y v))))) (mem (set1 (tuple2 a2 a1)) r
  (relation a1 a2 u (t2tb1 v))))))))

(declare-fun t2tb5533 ((set (set (tuple21 (tuple21 (tuple21 a b) (tuple21 a
  c)) (tuple21 (tuple21 a b) (tuple21 a c)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 (tuple21 a b) (tuple21 a c))
  (tuple21 (tuple21 a b) (tuple21 a c))))))) (sort
  (set1
  (set1
  (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1))
  (tuple2 (tuple2 a1 b1) (tuple2 a1 c1))))) (t2tb5533 x))))

(declare-fun tb2t5533 (uni) (set (set (tuple21 (tuple21 (tuple21 a b)
  (tuple21 a c)) (tuple21 (tuple21 a b) (tuple21 a c))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 (tuple21 a b) (tuple21 a c))
  (tuple21 (tuple21 a b) (tuple21 a c)))))))
  (! (= (tb2t5533 (t2tb5533 i)) i) :pattern ((t2tb5533 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (set1
     (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1))
     (tuple2 (tuple2 a1 b1) (tuple2 a1 c1))))) j)
     (= (t2tb5533 (tb2t5533 j)) j)) :pattern ((t2tb5533 (tb2t5533 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 (tuple21 a b) (tuple21 a c))))
  (v (set (tuple21 (tuple21 a b) (tuple21 a c))))
  (r (set (tuple21 (tuple21 (tuple21 a b) (tuple21 a c)) (tuple21 (tuple21 a
  b) (tuple21 a c))))))
  (= (mem
  (set1
  (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1))
  (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)))) (t2tb5481 r)
  (relation (tuple2 (tuple2 a1 b1) (tuple2 a1 c1))
  (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) (t2tb238 u) (t2tb238 v)))
  (forall ((x (tuple21 (tuple21 a b) (tuple21 a c))) (y (tuple21 (tuple21 a
  b) (tuple21 a c))))
  (=> (mem
  (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1))
  (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)))
  (Tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1))
  (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) (t2tb239 x) (t2tb239 y))
  (t2tb5481 r)) (and (mem51 x u) (mem51 y v)))))))

(declare-fun t2tb5534 ((set (set (tuple21 (tuple21 (tuple21 a b) (tuple21 a
  c)) (tuple21 a c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 (tuple21 a b) (tuple21 a c))
  (tuple21 a c)))))) (sort
  (set1
  (set1 (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) (tuple2 a1 c1))))
  (t2tb5534 x))))

(declare-fun tb2t5534 (uni) (set (set (tuple21 (tuple21 (tuple21 a b)
  (tuple21 a c)) (tuple21 a c)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 (tuple21 a b) (tuple21 a c))
  (tuple21 a c))))))
  (! (= (tb2t5534 (t2tb5534 i)) i) :pattern ((t2tb5534 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (set1 (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) (tuple2 a1 c1))))
     j) (= (t2tb5534 (tb2t5534 j)) j)) :pattern ((t2tb5534 (tb2t5534 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 (tuple21 a b) (tuple21 a c)))) (v (set (tuple21 a
  c))) (r (set (tuple21 (tuple21 (tuple21 a b) (tuple21 a c)) (tuple21 a
  c)))))
  (= (mem
  (set1 (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) (tuple2 a1 c1)))
  (t2tb5483 r)
  (relation (tuple2 a1 c1) (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) (t2tb238 u)
  (t2tb129 v)))
  (forall ((x (tuple21 (tuple21 a b) (tuple21 a c))) (y (tuple21 a c)))
  (=> (mem (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) (tuple2 a1 c1))
  (Tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) (tuple2 a1 c1) (t2tb239 x)
  (t2tb133 y)) (t2tb5483 r)) (and (mem51 x u) (mem10 y v)))))))

(declare-fun t2tb5535 ((set (set (tuple21 (tuple21 (tuple21 a b) (tuple21 a
  c)) (set (tuple21 b c)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 (tuple21 a b) (tuple21 a c))
  (set (tuple21 b c))))))) (sort
  (set1
  (set1
  (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) (set1 (tuple2 b1 c1)))))
  (t2tb5535 x))))

(declare-fun tb2t5535 (uni) (set (set (tuple21 (tuple21 (tuple21 a b)
  (tuple21 a c)) (set (tuple21 b c))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 (tuple21 a b) (tuple21 a c))
  (set (tuple21 b c)))))))
  (! (= (tb2t5535 (t2tb5535 i)) i) :pattern ((t2tb5535 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (set1
     (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) (set1 (tuple2 b1 c1)))))
     j) (= (t2tb5535 (tb2t5535 j)) j)) :pattern ((t2tb5535 (tb2t5535 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 (tuple21 a b) (tuple21 a c))))
  (v (set (set (tuple21 b c)))) (r (set (tuple21 (tuple21 (tuple21 a b)
  (tuple21 a c)) (set (tuple21 b c))))))
  (= (mem
  (set1
  (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) (set1 (tuple2 b1 c1))))
  (t2tb5485 r)
  (relation (set1 (tuple2 b1 c1)) (tuple2 (tuple2 a1 b1) (tuple2 a1 c1))
  (t2tb238 u) (t2tb130 v)))
  (forall ((x (tuple21 (tuple21 a b) (tuple21 a c))) (y (set (tuple21 b c))))
  (=> (mem
  (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) (set1 (tuple2 b1 c1)))
  (Tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) (set1 (tuple2 b1 c1))
  (t2tb239 x) (t2tb131 y)) (t2tb5485 r)) (and (mem51 x u) (mem9 y v)))))))

(declare-fun t2tb5536 ((set (set (tuple21 (tuple21 (tuple21 a b) (tuple21 a
  c)) (tuple21 b c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 (tuple21 a b) (tuple21 a c))
  (tuple21 b c)))))) (sort
  (set1
  (set1 (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) (tuple2 b1 c1))))
  (t2tb5536 x))))

(declare-fun tb2t5536 (uni) (set (set (tuple21 (tuple21 (tuple21 a b)
  (tuple21 a c)) (tuple21 b c)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 (tuple21 a b) (tuple21 a c))
  (tuple21 b c))))))
  (! (= (tb2t5536 (t2tb5536 i)) i) :pattern ((t2tb5536 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (set1 (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) (tuple2 b1 c1))))
     j) (= (t2tb5536 (tb2t5536 j)) j)) :pattern ((t2tb5536 (tb2t5536 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 (tuple21 a b) (tuple21 a c)))) (v (set (tuple21 b
  c))) (r (set (tuple21 (tuple21 (tuple21 a b) (tuple21 a c)) (tuple21 b
  c)))))
  (= (mem
  (set1 (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) (tuple2 b1 c1)))
  (t2tb5487 r)
  (relation (tuple2 b1 c1) (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) (t2tb238 u)
  (t2tb131 v)))
  (forall ((x (tuple21 (tuple21 a b) (tuple21 a c))) (y (tuple21 b c)))
  (=> (mem (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) (tuple2 b1 c1))
  (Tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) (tuple2 b1 c1) (t2tb239 x)
  (t2tb134 y)) (t2tb5487 r)) (and (mem51 x u) (mem8 y v)))))))

(declare-fun t2tb5537 ((set (set (tuple21 (tuple21 (tuple21 a b) (tuple21 a
  c)) c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 (tuple21 a b) (tuple21 a c)) c)))))
  (sort (set1 (set1 (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) c1)))
  (t2tb5537 x))))

(declare-fun tb2t5537 (uni) (set (set (tuple21 (tuple21 (tuple21 a b)
  (tuple21 a c)) c))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 (tuple21 a b) (tuple21 a c)) c)))))
  (! (= (tb2t5537 (t2tb5537 i)) i) :pattern ((t2tb5537 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) c1))) j)
     (= (t2tb5537 (tb2t5537 j)) j)) :pattern ((t2tb5537 (tb2t5537 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 (tuple21 a b) (tuple21 a c)))) (v (set c))
  (r (set (tuple21 (tuple21 (tuple21 a b) (tuple21 a c)) c))))
  (= (mem (set1 (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) c1))
  (t2tb5489 r)
  (relation c1 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) (t2tb238 u)
  (t2tb132 v)))
  (forall ((x (tuple21 (tuple21 a b) (tuple21 a c))) (y c))
  (=> (mem (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) c1)
  (Tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) c1 (t2tb239 x) (t2tb135 y))
  (t2tb5489 r)) (and (mem51 x u) (mem7 y v)))))))

(declare-fun t2tb5538 ((set (set (tuple21 (tuple21 (tuple21 a b) (tuple21 a
  c)) (set (tuple21 a b)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 (tuple21 a b) (tuple21 a c))
  (set (tuple21 a b))))))) (sort
  (set1
  (set1
  (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) (set1 (tuple2 a1 b1)))))
  (t2tb5538 x))))

(declare-fun tb2t5538 (uni) (set (set (tuple21 (tuple21 (tuple21 a b)
  (tuple21 a c)) (set (tuple21 a b))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 (tuple21 a b) (tuple21 a c))
  (set (tuple21 a b)))))))
  (! (= (tb2t5538 (t2tb5538 i)) i) :pattern ((t2tb5538 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (set1
     (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) (set1 (tuple2 a1 b1)))))
     j) (= (t2tb5538 (tb2t5538 j)) j)) :pattern ((t2tb5538 (tb2t5538 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 (tuple21 a b) (tuple21 a c))))
  (v (set (set (tuple21 a b)))) (r (set (tuple21 (tuple21 (tuple21 a b)
  (tuple21 a c)) (set (tuple21 a b))))))
  (= (mem
  (set1
  (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) (set1 (tuple2 a1 b1))))
  (t2tb5491 r)
  (relation (set1 (tuple2 a1 b1)) (tuple2 (tuple2 a1 b1) (tuple2 a1 c1))
  (t2tb238 u) (t2tb10 v)))
  (forall ((x (tuple21 (tuple21 a b) (tuple21 a c))) (y (set (tuple21 a b))))
  (=> (mem
  (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) (set1 (tuple2 a1 b1)))
  (Tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) (set1 (tuple2 a1 b1))
  (t2tb239 x) (t2tb11 y)) (t2tb5491 r)) (and (mem51 x u) (mem4 y v)))))))

(declare-fun t2tb5539 ((set (set (tuple21 (tuple21 (tuple21 a b) (tuple21 a
  c)) (tuple21 a b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 (tuple21 a b) (tuple21 a c))
  (tuple21 a b)))))) (sort
  (set1
  (set1 (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) (tuple2 a1 b1))))
  (t2tb5539 x))))

(declare-fun tb2t5539 (uni) (set (set (tuple21 (tuple21 (tuple21 a b)
  (tuple21 a c)) (tuple21 a b)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 (tuple21 a b) (tuple21 a c))
  (tuple21 a b))))))
  (! (= (tb2t5539 (t2tb5539 i)) i) :pattern ((t2tb5539 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (set1 (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) (tuple2 a1 b1))))
     j) (= (t2tb5539 (tb2t5539 j)) j)) :pattern ((t2tb5539 (tb2t5539 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 (tuple21 a b) (tuple21 a c)))) (v (set (tuple21 a
  b))) (r (set (tuple21 (tuple21 (tuple21 a b) (tuple21 a c)) (tuple21 a
  b)))))
  (= (mem
  (set1 (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) (tuple2 a1 b1)))
  (t2tb5493 r)
  (relation (tuple2 a1 b1) (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) (t2tb238 u)
  (t2tb11 v)))
  (forall ((x (tuple21 (tuple21 a b) (tuple21 a c))) (y (tuple21 a b)))
  (=> (mem (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) (tuple2 a1 b1))
  (Tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) (tuple2 a1 b1) (t2tb239 x)
  (t2tb13 y)) (t2tb5493 r)) (and (mem51 x u) (mem3 y v)))))))

(declare-fun t2tb5540 ((set (set (tuple21 (tuple21 (tuple21 a b) (tuple21 a
  c)) b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 (tuple21 a b) (tuple21 a c)) b)))))
  (sort (set1 (set1 (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) b1)))
  (t2tb5540 x))))

(declare-fun tb2t5540 (uni) (set (set (tuple21 (tuple21 (tuple21 a b)
  (tuple21 a c)) b))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 (tuple21 a b) (tuple21 a c)) b)))))
  (! (= (tb2t5540 (t2tb5540 i)) i) :pattern ((t2tb5540 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) b1))) j)
     (= (t2tb5540 (tb2t5540 j)) j)) :pattern ((t2tb5540 (tb2t5540 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 (tuple21 a b) (tuple21 a c)))) (v (set b))
  (r (set (tuple21 (tuple21 (tuple21 a b) (tuple21 a c)) b))))
  (= (mem (set1 (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) b1))
  (t2tb5496 r)
  (relation b1 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) (t2tb238 u) (t2tb12 v)))
  (forall ((x (tuple21 (tuple21 a b) (tuple21 a c))) (y b))
  (=> (mem (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) b1)
  (Tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) b1 (t2tb239 x) (t2tb14 y))
  (t2tb5496 r)) (and (mem51 x u) (mem2 y v)))))))

(declare-fun t2tb5541 ((set (set (tuple21 (tuple21 (tuple21 a b) (tuple21 a
  c)) (tuple21 a a))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 (tuple21 a b) (tuple21 a c))
  (tuple21 a a)))))) (sort
  (set1
  (set1 (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) (tuple2 a1 a1))))
  (t2tb5541 x))))

(declare-fun tb2t5541 (uni) (set (set (tuple21 (tuple21 (tuple21 a b)
  (tuple21 a c)) (tuple21 a a)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 (tuple21 a b) (tuple21 a c))
  (tuple21 a a))))))
  (! (= (tb2t5541 (t2tb5541 i)) i) :pattern ((t2tb5541 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (set1 (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) (tuple2 a1 a1))))
     j) (= (t2tb5541 (tb2t5541 j)) j)) :pattern ((t2tb5541 (tb2t5541 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 (tuple21 a b) (tuple21 a c)))) (v (set (tuple21 a
  a))) (r (set (tuple21 (tuple21 (tuple21 a b) (tuple21 a c)) (tuple21 a
  a)))))
  (= (mem
  (set1 (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) (tuple2 a1 a1)))
  (t2tb5497 r)
  (relation (tuple2 a1 a1) (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) (t2tb238 u)
  (t2tb4 v)))
  (forall ((x (tuple21 (tuple21 a b) (tuple21 a c))) (y (tuple21 a a)))
  (=> (mem (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) (tuple2 a1 a1))
  (Tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) (tuple2 a1 a1) (t2tb239 x)
  (t2tb5 y)) (t2tb5497 r)) (and (mem51 x u) (mem12 y v)))))))

(declare-fun t2tb5542 ((set (set (tuple21 (tuple21 (tuple21 a b) (tuple21 a
  c)) a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 (tuple21 a b) (tuple21 a c)) a)))))
  (sort (set1 (set1 (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) a1)))
  (t2tb5542 x))))

(declare-fun tb2t5542 (uni) (set (set (tuple21 (tuple21 (tuple21 a b)
  (tuple21 a c)) a))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 (tuple21 a b) (tuple21 a c)) a)))))
  (! (= (tb2t5542 (t2tb5542 i)) i) :pattern ((t2tb5542 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) a1))) j)
     (= (t2tb5542 (tb2t5542 j)) j)) :pattern ((t2tb5542 (tb2t5542 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 (tuple21 a b) (tuple21 a c)))) (v (set a))
  (r (set (tuple21 (tuple21 (tuple21 a b) (tuple21 a c)) a))))
  (= (mem (set1 (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) a1))
  (t2tb5499 r)
  (relation a1 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) (t2tb238 u) (t2tb1 v)))
  (forall ((x (tuple21 (tuple21 a b) (tuple21 a c))) (y a))
  (=> (mem (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) a1)
  (Tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) a1 (t2tb239 x) (t2tb2 y))
  (t2tb5499 r)) (and (mem51 x u) (mem1 y v)))))))

;; mem_relation
  (assert
  (forall ((b2 ty))
  (forall ((u (set (tuple21 (tuple21 a b) (tuple21 a c)))) (v uni) (r uni))
  (and
  (=> (mem (set1 (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) b2)) r
  (relation b2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) (t2tb238 u) v))
  (forall ((x (tuple21 (tuple21 a b) (tuple21 a c))) (y uni))
  (=> (mem (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) b2)
  (Tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) b2 (t2tb239 x) y) r)
  (and (mem51 x u) (mem b2 y v)))))
  (=>
  (forall ((x (tuple21 (tuple21 a b) (tuple21 a c))) (y uni))
  (=> (sort b2 y)
  (=> (mem (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) b2)
  (Tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) b2 (t2tb239 x) y) r)
  (and (mem51 x u) (mem b2 y v))))) (mem
  (set1 (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) b2)) r
  (relation b2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) (t2tb238 u) v)))))))

(declare-fun t2tb5543 ((set (set (tuple21 (tuple21 a c) (tuple21 (tuple21 a
  b) (tuple21 a c)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a c) (tuple21 (tuple21 a b)
  (tuple21 a c))))))) (sort
  (set1
  (set1 (tuple2 (tuple2 a1 c1) (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)))))
  (t2tb5543 x))))

(declare-fun tb2t5543 (uni) (set (set (tuple21 (tuple21 a c)
  (tuple21 (tuple21 a b) (tuple21 a c))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a c) (tuple21 (tuple21 a b)
  (tuple21 a c)))))))
  (! (= (tb2t5543 (t2tb5543 i)) i) :pattern ((t2tb5543 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (set1 (tuple2 (tuple2 a1 c1) (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)))))
     j) (= (t2tb5543 (tb2t5543 j)) j)) :pattern ((t2tb5543 (tb2t5543 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a c))) (v (set (tuple21 (tuple21 a b) (tuple21 a
  c)))) (r (set (tuple21 (tuple21 a c) (tuple21 (tuple21 a b) (tuple21 a
  c))))))
  (= (mem
  (set1 (tuple2 (tuple2 a1 c1) (tuple2 (tuple2 a1 b1) (tuple2 a1 c1))))
  (t2tb5501 r)
  (relation (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) (tuple2 a1 c1) (t2tb129 u)
  (t2tb238 v)))
  (forall ((x (tuple21 a c)) (y (tuple21 (tuple21 a b) (tuple21 a c))))
  (=> (mem (tuple2 (tuple2 a1 c1) (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)))
  (Tuple2 (tuple2 a1 c1) (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) (t2tb133 x)
  (t2tb239 y)) (t2tb5501 r)) (and (mem10 x u) (mem51 y v)))))))

(declare-fun t2tb275 ((set (set (tuple21 (tuple21 a c) (tuple21 a c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a c) (tuple21 a c)))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 c1) (tuple2 a1 c1)))) (t2tb275 x))))

(declare-fun tb2t275 (uni) (set (set (tuple21 (tuple21 a c) (tuple21 a c)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a c) (tuple21 a c))))))
  (! (= (tb2t275 (t2tb275 i)) i) :pattern ((t2tb275 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 c1) (tuple2 a1 c1)))) j)
     (= (t2tb275 (tb2t275 j)) j)) :pattern ((t2tb275 (tb2t275 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a c))) (v (set (tuple21 a c)))
  (r (set (tuple21 (tuple21 a c) (tuple21 a c)))))
  (= (mem (set1 (tuple2 (tuple2 a1 c1) (tuple2 a1 c1))) (t2tb157 r)
  (relation (tuple2 a1 c1) (tuple2 a1 c1) (t2tb129 u) (t2tb129 v)))
  (forall ((x (tuple21 a c)) (y (tuple21 a c)))
  (=> (mem (tuple2 (tuple2 a1 c1) (tuple2 a1 c1))
  (Tuple2 (tuple2 a1 c1) (tuple2 a1 c1) (t2tb133 x) (t2tb133 y)) (t2tb157 r))
  (and (mem10 x u) (mem10 y v)))))))

(declare-fun t2tb1143 ((set (set (tuple21 (tuple21 a c) (set (tuple21 b
  c)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a c) (set (tuple21 b c))))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 c1) (set1 (tuple2 b1 c1))))) (t2tb1143 x))))

(declare-fun tb2t1143 (uni) (set (set (tuple21 (tuple21 a c) (set (tuple21 b
  c))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a c) (set (tuple21 b c)))))))
  (! (= (tb2t1143 (t2tb1143 i)) i) :pattern ((t2tb1143 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 c1) (set1 (tuple2 b1 c1))))) j)
     (= (t2tb1143 (tb2t1143 j)) j)) :pattern ((t2tb1143 (tb2t1143 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a c))) (v (set (set (tuple21 b c))))
  (r (set (tuple21 (tuple21 a c) (set (tuple21 b c))))))
  (= (mem (set1 (tuple2 (tuple2 a1 c1) (set1 (tuple2 b1 c1)))) (t2tb1089 r)
  (relation (set1 (tuple2 b1 c1)) (tuple2 a1 c1) (t2tb129 u) (t2tb130 v)))
  (forall ((x (tuple21 a c)) (y (set (tuple21 b c))))
  (=> (mem (tuple2 (tuple2 a1 c1) (set1 (tuple2 b1 c1)))
  (Tuple2 (tuple2 a1 c1) (set1 (tuple2 b1 c1)) (t2tb133 x) (t2tb131 y))
  (t2tb1089 r)) (and (mem10 x u) (mem9 y v)))))))

(declare-fun t2tb1144 ((set (set (tuple21 (tuple21 a c) (tuple21 b
  c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a c) (tuple21 b c)))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 c1) (tuple2 b1 c1)))) (t2tb1144 x))))

(declare-fun tb2t1144 (uni) (set (set (tuple21 (tuple21 a c) (tuple21 b
  c)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a c) (tuple21 b c))))))
  (! (= (tb2t1144 (t2tb1144 i)) i) :pattern ((t2tb1144 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 c1) (tuple2 b1 c1)))) j)
     (= (t2tb1144 (tb2t1144 j)) j)) :pattern ((t2tb1144 (tb2t1144 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a c))) (v (set (tuple21 b c)))
  (r (set (tuple21 (tuple21 a c) (tuple21 b c)))))
  (= (mem (set1 (tuple2 (tuple2 a1 c1) (tuple2 b1 c1))) (t2tb1091 r)
  (relation (tuple2 b1 c1) (tuple2 a1 c1) (t2tb129 u) (t2tb131 v)))
  (forall ((x (tuple21 a c)) (y (tuple21 b c)))
  (=> (mem (tuple2 (tuple2 a1 c1) (tuple2 b1 c1))
  (Tuple2 (tuple2 a1 c1) (tuple2 b1 c1) (t2tb133 x) (t2tb134 y))
  (t2tb1091 r)) (and (mem10 x u) (mem8 y v)))))))

(declare-fun t2tb278 ((set (set (tuple21 (tuple21 a c) c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a c) c))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 c1) c1))) (t2tb278 x))))

(declare-fun tb2t278 (uni) (set (set (tuple21 (tuple21 a c) c))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a c) c)))))
  (! (= (tb2t278 (t2tb278 i)) i) :pattern ((t2tb278 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 c1) c1))) j)
     (= (t2tb278 (tb2t278 j)) j)) :pattern ((t2tb278 (tb2t278 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a c))) (v (set c)) (r (set (tuple21 (tuple21 a c)
  c))))
  (= (mem (set1 (tuple2 (tuple2 a1 c1) c1)) (t2tb162 r)
  (relation c1 (tuple2 a1 c1) (t2tb129 u) (t2tb132 v)))
  (forall ((x (tuple21 a c)) (y c))
  (=> (mem (tuple2 (tuple2 a1 c1) c1)
  (Tuple2 (tuple2 a1 c1) c1 (t2tb133 x) (t2tb135 y)) (t2tb162 r))
  (and (mem10 x u) (mem7 y v)))))))

(declare-fun t2tb279 ((set (set (tuple21 (tuple21 a c) (set (tuple21 a
  b)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a c) (set (tuple21 a b))))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 c1) (set1 (tuple2 a1 b1))))) (t2tb279 x))))

(declare-fun tb2t279 (uni) (set (set (tuple21 (tuple21 a c) (set (tuple21 a
  b))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a c) (set (tuple21 a b)))))))
  (! (= (tb2t279 (t2tb279 i)) i) :pattern ((t2tb279 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 c1) (set1 (tuple2 a1 b1))))) j)
     (= (t2tb279 (tb2t279 j)) j)) :pattern ((t2tb279 (tb2t279 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a c))) (v (set (set (tuple21 a b))))
  (r (set (tuple21 (tuple21 a c) (set (tuple21 a b))))))
  (= (mem (set1 (tuple2 (tuple2 a1 c1) (set1 (tuple2 a1 b1)))) (t2tb164 r)
  (relation (set1 (tuple2 a1 b1)) (tuple2 a1 c1) (t2tb129 u) (t2tb10 v)))
  (forall ((x (tuple21 a c)) (y (set (tuple21 a b))))
  (=> (mem (tuple2 (tuple2 a1 c1) (set1 (tuple2 a1 b1)))
  (Tuple2 (tuple2 a1 c1) (set1 (tuple2 a1 b1)) (t2tb133 x) (t2tb11 y))
  (t2tb164 r)) (and (mem10 x u) (mem4 y v)))))))

(declare-fun t2tb280 ((set (set (tuple21 (tuple21 a c) (tuple21 a b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a c) (tuple21 a b)))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 c1) (tuple2 a1 b1)))) (t2tb280 x))))

(declare-fun tb2t280 (uni) (set (set (tuple21 (tuple21 a c) (tuple21 a b)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a c) (tuple21 a b))))))
  (! (= (tb2t280 (t2tb280 i)) i) :pattern ((t2tb280 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 c1) (tuple2 a1 b1)))) j)
     (= (t2tb280 (tb2t280 j)) j)) :pattern ((t2tb280 (tb2t280 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a c))) (v (set (tuple21 a b)))
  (r (set (tuple21 (tuple21 a c) (tuple21 a b)))))
  (= (mem (set1 (tuple2 (tuple2 a1 c1) (tuple2 a1 b1))) (t2tb166 r)
  (relation (tuple2 a1 b1) (tuple2 a1 c1) (t2tb129 u) (t2tb11 v)))
  (forall ((x (tuple21 a c)) (y (tuple21 a b)))
  (=> (mem (tuple2 (tuple2 a1 c1) (tuple2 a1 b1))
  (Tuple2 (tuple2 a1 c1) (tuple2 a1 b1) (t2tb133 x) (t2tb13 y)) (t2tb166 r))
  (and (mem10 x u) (mem3 y v)))))))

(declare-fun t2tb281 ((set (set (tuple21 (tuple21 a c) b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a c) b))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 c1) b1))) (t2tb281 x))))

(declare-fun tb2t281 (uni) (set (set (tuple21 (tuple21 a c) b))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a c) b)))))
  (! (= (tb2t281 (t2tb281 i)) i) :pattern ((t2tb281 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 c1) b1))) j)
     (= (t2tb281 (tb2t281 j)) j)) :pattern ((t2tb281 (tb2t281 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a c))) (v (set b)) (r (set (tuple21 (tuple21 a c)
  b))))
  (= (mem (set1 (tuple2 (tuple2 a1 c1) b1)) (t2tb168 r)
  (relation b1 (tuple2 a1 c1) (t2tb129 u) (t2tb12 v)))
  (forall ((x (tuple21 a c)) (y b))
  (=> (mem (tuple2 (tuple2 a1 c1) b1)
  (Tuple2 (tuple2 a1 c1) b1 (t2tb133 x) (t2tb14 y)) (t2tb168 r))
  (and (mem10 x u) (mem2 y v)))))))

(declare-fun t2tb5544 ((set (set (tuple21 (tuple21 a c) (tuple21 a
  a))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a c) (tuple21 a a)))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 c1) (tuple2 a1 a1)))) (t2tb5544 x))))

(declare-fun tb2t5544 (uni) (set (set (tuple21 (tuple21 a c) (tuple21 a
  a)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a c) (tuple21 a a))))))
  (! (= (tb2t5544 (t2tb5544 i)) i) :pattern ((t2tb5544 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 c1) (tuple2 a1 a1)))) j)
     (= (t2tb5544 (tb2t5544 j)) j)) :pattern ((t2tb5544 (tb2t5544 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a c))) (v (set (tuple21 a a)))
  (r (set (tuple21 (tuple21 a c) (tuple21 a a)))))
  (= (mem (set1 (tuple2 (tuple2 a1 c1) (tuple2 a1 a1))) (t2tb5503 r)
  (relation (tuple2 a1 a1) (tuple2 a1 c1) (t2tb129 u) (t2tb4 v)))
  (forall ((x (tuple21 a c)) (y (tuple21 a a)))
  (=> (mem (tuple2 (tuple2 a1 c1) (tuple2 a1 a1))
  (Tuple2 (tuple2 a1 c1) (tuple2 a1 a1) (t2tb133 x) (t2tb5 y)) (t2tb5503 r))
  (and (mem10 x u) (mem12 y v)))))))

(declare-fun t2tb282 ((set (set (tuple21 (tuple21 a c) a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a c) a))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 c1) a1))) (t2tb282 x))))

(declare-fun tb2t282 (uni) (set (set (tuple21 (tuple21 a c) a))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a c) a)))))
  (! (= (tb2t282 (t2tb282 i)) i) :pattern ((t2tb282 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 c1) a1))) j)
     (= (t2tb282 (tb2t282 j)) j)) :pattern ((t2tb282 (tb2t282 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a c))) (v (set a)) (r (set (tuple21 (tuple21 a c)
  a))))
  (= (mem (set1 (tuple2 (tuple2 a1 c1) a1)) (t2tb170 r)
  (relation a1 (tuple2 a1 c1) (t2tb129 u) (t2tb1 v)))
  (forall ((x (tuple21 a c)) (y a))
  (=> (mem (tuple2 (tuple2 a1 c1) a1)
  (Tuple2 (tuple2 a1 c1) a1 (t2tb133 x) (t2tb2 y)) (t2tb170 r))
  (and (mem10 x u) (mem1 y v)))))))

;; mem_relation
  (assert
  (forall ((b2 ty))
  (forall ((u (set (tuple21 a c))) (v uni) (r uni))
  (and
  (=> (mem (set1 (tuple2 (tuple2 a1 c1) b2)) r
  (relation b2 (tuple2 a1 c1) (t2tb129 u) v))
  (forall ((x (tuple21 a c)) (y uni))
  (=> (mem (tuple2 (tuple2 a1 c1) b2)
  (Tuple2 (tuple2 a1 c1) b2 (t2tb133 x) y) r) (and (mem10 x u) (mem b2 y v)))))
  (=>
  (forall ((x (tuple21 a c)) (y uni))
  (=> (sort b2 y)
  (=> (mem (tuple2 (tuple2 a1 c1) b2)
  (Tuple2 (tuple2 a1 c1) b2 (t2tb133 x) y) r) (and (mem10 x u) (mem b2 y v)))))
  (mem (set1 (tuple2 (tuple2 a1 c1) b2)) r
  (relation b2 (tuple2 a1 c1) (t2tb129 u) v)))))))

(declare-fun t2tb5545 ((set (set (tuple21 (set (tuple21 b c))
  (tuple21 (tuple21 a b) (tuple21 a c)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 b c)) (tuple21 (tuple21 a b)
  (tuple21 a c))))))) (sort
  (set1
  (set1
  (tuple2 (set1 (tuple2 b1 c1)) (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)))))
  (t2tb5545 x))))

(declare-fun tb2t5545 (uni) (set (set (tuple21 (set (tuple21 b c))
  (tuple21 (tuple21 a b) (tuple21 a c))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 b c)) (tuple21 (tuple21 a b)
  (tuple21 a c)))))))
  (! (= (tb2t5545 (t2tb5545 i)) i) :pattern ((t2tb5545 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (set1
     (tuple2 (set1 (tuple2 b1 c1)) (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)))))
     j) (= (t2tb5545 (tb2t5545 j)) j)) :pattern ((t2tb5545 (tb2t5545 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 b c)))) (v (set (tuple21 (tuple21 a b)
  (tuple21 a c)))) (r (set (tuple21 (set (tuple21 b c)) (tuple21 (tuple21 a
  b) (tuple21 a c))))))
  (= (mem
  (set1
  (tuple2 (set1 (tuple2 b1 c1)) (tuple2 (tuple2 a1 b1) (tuple2 a1 c1))))
  (t2tb5505 r)
  (relation (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) (set1 (tuple2 b1 c1))
  (t2tb130 u) (t2tb238 v)))
  (forall ((x (set (tuple21 b c))) (y (tuple21 (tuple21 a b) (tuple21 a c))))
  (=> (mem
  (tuple2 (set1 (tuple2 b1 c1)) (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)))
  (Tuple2 (set1 (tuple2 b1 c1)) (tuple2 (tuple2 a1 b1) (tuple2 a1 c1))
  (t2tb131 x) (t2tb239 y)) (t2tb5505 r)) (and (mem9 x u) (mem51 y v)))))))

(declare-fun t2tb1145 ((set (set (tuple21 (set (tuple21 b c)) (tuple21 a
  c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 b c)) (tuple21 a c)))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 b1 c1)) (tuple2 a1 c1)))) (t2tb1145 x))))

(declare-fun tb2t1145 (uni) (set (set (tuple21 (set (tuple21 b c)) (tuple21 a
  c)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 b c)) (tuple21 a c))))))
  (! (= (tb2t1145 (t2tb1145 i)) i) :pattern ((t2tb1145 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 b1 c1)) (tuple2 a1 c1)))) j)
     (= (t2tb1145 (tb2t1145 j)) j)) :pattern ((t2tb1145 (tb2t1145 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 b c)))) (v (set (tuple21 a c)))
  (r (set (tuple21 (set (tuple21 b c)) (tuple21 a c)))))
  (= (mem (set1 (tuple2 (set1 (tuple2 b1 c1)) (tuple2 a1 c1))) (t2tb1094 r)
  (relation (tuple2 a1 c1) (set1 (tuple2 b1 c1)) (t2tb130 u) (t2tb129 v)))
  (forall ((x (set (tuple21 b c))) (y (tuple21 a c)))
  (=> (mem (tuple2 (set1 (tuple2 b1 c1)) (tuple2 a1 c1))
  (Tuple2 (set1 (tuple2 b1 c1)) (tuple2 a1 c1) (t2tb131 x) (t2tb133 y))
  (t2tb1094 r)) (and (mem9 x u) (mem10 y v)))))))

(declare-fun t2tb1146 ((set (set (tuple21 (set (tuple21 b c)) (set (tuple21 b
  c)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 b c)) (set (tuple21 b c)))))))
  (sort (set1 (set1 (tuple2 (set1 (tuple2 b1 c1)) (set1 (tuple2 b1 c1)))))
  (t2tb1146 x))))

(declare-fun tb2t1146 (uni) (set (set (tuple21 (set (tuple21 b c))
  (set (tuple21 b c))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 b c)) (set (tuple21 b c)))))))
  (! (= (tb2t1146 (t2tb1146 i)) i) :pattern ((t2tb1146 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (set1 (tuple2 b1 c1)) (set1 (tuple2 b1 c1))))) j)
     (= (t2tb1146 (tb2t1146 j)) j)) :pattern ((t2tb1146 (tb2t1146 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 b c)))) (v (set (set (tuple21 b c))))
  (r (set (tuple21 (set (tuple21 b c)) (set (tuple21 b c))))))
  (= (mem (set1 (tuple2 (set1 (tuple2 b1 c1)) (set1 (tuple2 b1 c1))))
  (t2tb1095 r)
  (relation (set1 (tuple2 b1 c1)) (set1 (tuple2 b1 c1)) (t2tb130 u)
  (t2tb130 v)))
  (forall ((x (set (tuple21 b c))) (y (set (tuple21 b c))))
  (=> (mem (tuple2 (set1 (tuple2 b1 c1)) (set1 (tuple2 b1 c1)))
  (Tuple2 (set1 (tuple2 b1 c1)) (set1 (tuple2 b1 c1)) (t2tb131 x)
  (t2tb131 y)) (t2tb1095 r)) (and (mem9 x u) (mem9 y v)))))))

(declare-fun t2tb1147 ((set (set (tuple21 (set (tuple21 b c)) (tuple21 b
  c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 b c)) (tuple21 b c)))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 b1 c1)) (tuple2 b1 c1)))) (t2tb1147 x))))

(declare-fun tb2t1147 (uni) (set (set (tuple21 (set (tuple21 b c)) (tuple21 b
  c)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 b c)) (tuple21 b c))))))
  (! (= (tb2t1147 (t2tb1147 i)) i) :pattern ((t2tb1147 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 b1 c1)) (tuple2 b1 c1)))) j)
     (= (t2tb1147 (tb2t1147 j)) j)) :pattern ((t2tb1147 (tb2t1147 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 b c)))) (v (set (tuple21 b c)))
  (r (set (tuple21 (set (tuple21 b c)) (tuple21 b c)))))
  (= (mem (set1 (tuple2 (set1 (tuple2 b1 c1)) (tuple2 b1 c1))) (t2tb1097 r)
  (relation (tuple2 b1 c1) (set1 (tuple2 b1 c1)) (t2tb130 u) (t2tb131 v)))
  (forall ((x (set (tuple21 b c))) (y (tuple21 b c)))
  (=> (mem (tuple2 (set1 (tuple2 b1 c1)) (tuple2 b1 c1))
  (Tuple2 (set1 (tuple2 b1 c1)) (tuple2 b1 c1) (t2tb131 x) (t2tb134 y))
  (t2tb1097 r)) (and (mem9 x u) (mem8 y v)))))))

(declare-fun t2tb1148 ((set (set (tuple21 (set (tuple21 b c)) c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 b c)) c))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 b1 c1)) c1))) (t2tb1148 x))))

(declare-fun tb2t1148 (uni) (set (set (tuple21 (set (tuple21 b c)) c))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 b c)) c)))))
  (! (= (tb2t1148 (t2tb1148 i)) i) :pattern ((t2tb1148 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 b1 c1)) c1))) j)
     (= (t2tb1148 (tb2t1148 j)) j)) :pattern ((t2tb1148 (tb2t1148 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 b c)))) (v (set c))
  (r (set (tuple21 (set (tuple21 b c)) c))))
  (= (mem (set1 (tuple2 (set1 (tuple2 b1 c1)) c1)) (t2tb1099 r)
  (relation c1 (set1 (tuple2 b1 c1)) (t2tb130 u) (t2tb132 v)))
  (forall ((x (set (tuple21 b c))) (y c))
  (=> (mem (tuple2 (set1 (tuple2 b1 c1)) c1)
  (Tuple2 (set1 (tuple2 b1 c1)) c1 (t2tb131 x) (t2tb135 y)) (t2tb1099 r))
  (and (mem9 x u) (mem7 y v)))))))

(declare-fun t2tb1149 ((set (set (tuple21 (set (tuple21 b c)) (set (tuple21 a
  b)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 b c)) (set (tuple21 a b)))))))
  (sort (set1 (set1 (tuple2 (set1 (tuple2 b1 c1)) (set1 (tuple2 a1 b1)))))
  (t2tb1149 x))))

(declare-fun tb2t1149 (uni) (set (set (tuple21 (set (tuple21 b c))
  (set (tuple21 a b))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 b c)) (set (tuple21 a b)))))))
  (! (= (tb2t1149 (t2tb1149 i)) i) :pattern ((t2tb1149 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (set1 (tuple2 b1 c1)) (set1 (tuple2 a1 b1))))) j)
     (= (t2tb1149 (tb2t1149 j)) j)) :pattern ((t2tb1149 (tb2t1149 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 b c)))) (v (set (set (tuple21 a b))))
  (r (set (tuple21 (set (tuple21 b c)) (set (tuple21 a b))))))
  (= (mem (set1 (tuple2 (set1 (tuple2 b1 c1)) (set1 (tuple2 a1 b1))))
  (t2tb1101 r)
  (relation (set1 (tuple2 a1 b1)) (set1 (tuple2 b1 c1)) (t2tb130 u)
  (t2tb10 v)))
  (forall ((x (set (tuple21 b c))) (y (set (tuple21 a b))))
  (=> (mem (tuple2 (set1 (tuple2 b1 c1)) (set1 (tuple2 a1 b1)))
  (Tuple2 (set1 (tuple2 b1 c1)) (set1 (tuple2 a1 b1)) (t2tb131 x) (t2tb11 y))
  (t2tb1101 r)) (and (mem9 x u) (mem4 y v)))))))

(declare-fun t2tb1150 ((set (set (tuple21 (set (tuple21 b c)) (tuple21 a
  b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 b c)) (tuple21 a b)))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 b1 c1)) (tuple2 a1 b1)))) (t2tb1150 x))))

(declare-fun tb2t1150 (uni) (set (set (tuple21 (set (tuple21 b c)) (tuple21 a
  b)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 b c)) (tuple21 a b))))))
  (! (= (tb2t1150 (t2tb1150 i)) i) :pattern ((t2tb1150 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 b1 c1)) (tuple2 a1 b1)))) j)
     (= (t2tb1150 (tb2t1150 j)) j)) :pattern ((t2tb1150 (tb2t1150 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 b c)))) (v (set (tuple21 a b)))
  (r (set (tuple21 (set (tuple21 b c)) (tuple21 a b)))))
  (= (mem (set1 (tuple2 (set1 (tuple2 b1 c1)) (tuple2 a1 b1))) (t2tb1103 r)
  (relation (tuple2 a1 b1) (set1 (tuple2 b1 c1)) (t2tb130 u) (t2tb11 v)))
  (forall ((x (set (tuple21 b c))) (y (tuple21 a b)))
  (=> (mem (tuple2 (set1 (tuple2 b1 c1)) (tuple2 a1 b1))
  (Tuple2 (set1 (tuple2 b1 c1)) (tuple2 a1 b1) (t2tb131 x) (t2tb13 y))
  (t2tb1103 r)) (and (mem9 x u) (mem3 y v)))))))

(declare-fun t2tb1151 ((set (set (tuple21 (set (tuple21 b c)) b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 b c)) b))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 b1 c1)) b1))) (t2tb1151 x))))

(declare-fun tb2t1151 (uni) (set (set (tuple21 (set (tuple21 b c)) b))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 b c)) b)))))
  (! (= (tb2t1151 (t2tb1151 i)) i) :pattern ((t2tb1151 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 b1 c1)) b1))) j)
     (= (t2tb1151 (tb2t1151 j)) j)) :pattern ((t2tb1151 (tb2t1151 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 b c)))) (v (set b))
  (r (set (tuple21 (set (tuple21 b c)) b))))
  (= (mem (set1 (tuple2 (set1 (tuple2 b1 c1)) b1)) (t2tb1105 r)
  (relation b1 (set1 (tuple2 b1 c1)) (t2tb130 u) (t2tb12 v)))
  (forall ((x (set (tuple21 b c))) (y b))
  (=> (mem (tuple2 (set1 (tuple2 b1 c1)) b1)
  (Tuple2 (set1 (tuple2 b1 c1)) b1 (t2tb131 x) (t2tb14 y)) (t2tb1105 r))
  (and (mem9 x u) (mem2 y v)))))))

(declare-fun t2tb5546 ((set (set (tuple21 (set (tuple21 b c)) (tuple21 a
  a))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 b c)) (tuple21 a a)))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 b1 c1)) (tuple2 a1 a1)))) (t2tb5546 x))))

(declare-fun tb2t5546 (uni) (set (set (tuple21 (set (tuple21 b c)) (tuple21 a
  a)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 b c)) (tuple21 a a))))))
  (! (= (tb2t5546 (t2tb5546 i)) i) :pattern ((t2tb5546 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 b1 c1)) (tuple2 a1 a1)))) j)
     (= (t2tb5546 (tb2t5546 j)) j)) :pattern ((t2tb5546 (tb2t5546 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 b c)))) (v (set (tuple21 a a)))
  (r (set (tuple21 (set (tuple21 b c)) (tuple21 a a)))))
  (= (mem (set1 (tuple2 (set1 (tuple2 b1 c1)) (tuple2 a1 a1))) (t2tb5507 r)
  (relation (tuple2 a1 a1) (set1 (tuple2 b1 c1)) (t2tb130 u) (t2tb4 v)))
  (forall ((x (set (tuple21 b c))) (y (tuple21 a a)))
  (=> (mem (tuple2 (set1 (tuple2 b1 c1)) (tuple2 a1 a1))
  (Tuple2 (set1 (tuple2 b1 c1)) (tuple2 a1 a1) (t2tb131 x) (t2tb5 y))
  (t2tb5507 r)) (and (mem9 x u) (mem12 y v)))))))

(declare-fun t2tb1152 ((set (set (tuple21 (set (tuple21 b c)) a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 b c)) a))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 b1 c1)) a1))) (t2tb1152 x))))

(declare-fun tb2t1152 (uni) (set (set (tuple21 (set (tuple21 b c)) a))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 b c)) a)))))
  (! (= (tb2t1152 (t2tb1152 i)) i) :pattern ((t2tb1152 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 b1 c1)) a1))) j)
     (= (t2tb1152 (tb2t1152 j)) j)) :pattern ((t2tb1152 (tb2t1152 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 b c)))) (v (set a))
  (r (set (tuple21 (set (tuple21 b c)) a))))
  (= (mem (set1 (tuple2 (set1 (tuple2 b1 c1)) a1)) (t2tb1107 r)
  (relation a1 (set1 (tuple2 b1 c1)) (t2tb130 u) (t2tb1 v)))
  (forall ((x (set (tuple21 b c))) (y a))
  (=> (mem (tuple2 (set1 (tuple2 b1 c1)) a1)
  (Tuple2 (set1 (tuple2 b1 c1)) a1 (t2tb131 x) (t2tb2 y)) (t2tb1107 r))
  (and (mem9 x u) (mem1 y v)))))))

;; mem_relation
  (assert
  (forall ((b2 ty))
  (forall ((u (set (set (tuple21 b c)))) (v uni) (r uni))
  (and
  (=> (mem (set1 (tuple2 (set1 (tuple2 b1 c1)) b2)) r
  (relation b2 (set1 (tuple2 b1 c1)) (t2tb130 u) v))
  (forall ((x (set (tuple21 b c))) (y uni))
  (=> (mem (tuple2 (set1 (tuple2 b1 c1)) b2)
  (Tuple2 (set1 (tuple2 b1 c1)) b2 (t2tb131 x) y) r)
  (and (mem9 x u) (mem b2 y v)))))
  (=>
  (forall ((x (set (tuple21 b c))) (y uni))
  (=> (sort b2 y)
  (=> (mem (tuple2 (set1 (tuple2 b1 c1)) b2)
  (Tuple2 (set1 (tuple2 b1 c1)) b2 (t2tb131 x) y) r)
  (and (mem9 x u) (mem b2 y v))))) (mem
  (set1 (tuple2 (set1 (tuple2 b1 c1)) b2)) r
  (relation b2 (set1 (tuple2 b1 c1)) (t2tb130 u) v)))))))

(declare-fun t2tb5547 ((set (set (tuple21 (tuple21 b c) (tuple21 (tuple21 a
  b) (tuple21 a c)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 b c) (tuple21 (tuple21 a b)
  (tuple21 a c))))))) (sort
  (set1
  (set1 (tuple2 (tuple2 b1 c1) (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)))))
  (t2tb5547 x))))

(declare-fun tb2t5547 (uni) (set (set (tuple21 (tuple21 b c)
  (tuple21 (tuple21 a b) (tuple21 a c))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 b c) (tuple21 (tuple21 a b)
  (tuple21 a c)))))))
  (! (= (tb2t5547 (t2tb5547 i)) i) :pattern ((t2tb5547 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (set1 (tuple2 (tuple2 b1 c1) (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)))))
     j) (= (t2tb5547 (tb2t5547 j)) j)) :pattern ((t2tb5547 (tb2t5547 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 b c))) (v (set (tuple21 (tuple21 a b) (tuple21 a
  c)))) (r (set (tuple21 (tuple21 b c) (tuple21 (tuple21 a b) (tuple21 a
  c))))))
  (= (mem
  (set1 (tuple2 (tuple2 b1 c1) (tuple2 (tuple2 a1 b1) (tuple2 a1 c1))))
  (t2tb5510 r)
  (relation (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) (tuple2 b1 c1) (t2tb131 u)
  (t2tb238 v)))
  (forall ((x (tuple21 b c)) (y (tuple21 (tuple21 a b) (tuple21 a c))))
  (=> (mem (tuple2 (tuple2 b1 c1) (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)))
  (Tuple2 (tuple2 b1 c1) (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) (t2tb134 x)
  (t2tb239 y)) (t2tb5510 r)) (and (mem8 x u) (mem51 y v)))))))

(declare-fun t2tb1153 ((set (set (tuple21 (tuple21 b c) (tuple21 a
  c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 b c) (tuple21 a c)))))) (sort
  (set1 (set1 (tuple2 (tuple2 b1 c1) (tuple2 a1 c1)))) (t2tb1153 x))))

(declare-fun tb2t1153 (uni) (set (set (tuple21 (tuple21 b c) (tuple21 a
  c)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 b c) (tuple21 a c))))))
  (! (= (tb2t1153 (t2tb1153 i)) i) :pattern ((t2tb1153 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 b1 c1) (tuple2 a1 c1)))) j)
     (= (t2tb1153 (tb2t1153 j)) j)) :pattern ((t2tb1153 (tb2t1153 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 b c))) (v (set (tuple21 a c)))
  (r (set (tuple21 (tuple21 b c) (tuple21 a c)))))
  (= (mem (set1 (tuple2 (tuple2 b1 c1) (tuple2 a1 c1))) (t2tb1109 r)
  (relation (tuple2 a1 c1) (tuple2 b1 c1) (t2tb131 u) (t2tb129 v)))
  (forall ((x (tuple21 b c)) (y (tuple21 a c)))
  (=> (mem (tuple2 (tuple2 b1 c1) (tuple2 a1 c1))
  (Tuple2 (tuple2 b1 c1) (tuple2 a1 c1) (t2tb134 x) (t2tb133 y))
  (t2tb1109 r)) (and (mem8 x u) (mem10 y v)))))))

(declare-fun t2tb1154 ((set (set (tuple21 (tuple21 b c) (set (tuple21 b
  c)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 b c) (set (tuple21 b c))))))) (sort
  (set1 (set1 (tuple2 (tuple2 b1 c1) (set1 (tuple2 b1 c1))))) (t2tb1154 x))))

(declare-fun tb2t1154 (uni) (set (set (tuple21 (tuple21 b c) (set (tuple21 b
  c))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 b c) (set (tuple21 b c)))))))
  (! (= (tb2t1154 (t2tb1154 i)) i) :pattern ((t2tb1154 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 b1 c1) (set1 (tuple2 b1 c1))))) j)
     (= (t2tb1154 (tb2t1154 j)) j)) :pattern ((t2tb1154 (tb2t1154 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 b c))) (v (set (set (tuple21 b c))))
  (r (set (tuple21 (tuple21 b c) (set (tuple21 b c))))))
  (= (mem (set1 (tuple2 (tuple2 b1 c1) (set1 (tuple2 b1 c1)))) (t2tb1111 r)
  (relation (set1 (tuple2 b1 c1)) (tuple2 b1 c1) (t2tb131 u) (t2tb130 v)))
  (forall ((x (tuple21 b c)) (y (set (tuple21 b c))))
  (=> (mem (tuple2 (tuple2 b1 c1) (set1 (tuple2 b1 c1)))
  (Tuple2 (tuple2 b1 c1) (set1 (tuple2 b1 c1)) (t2tb134 x) (t2tb131 y))
  (t2tb1111 r)) (and (mem8 x u) (mem9 y v)))))))

(declare-fun t2tb1155 ((set (set (tuple21 (tuple21 b c) (tuple21 b
  c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 b c) (tuple21 b c)))))) (sort
  (set1 (set1 (tuple2 (tuple2 b1 c1) (tuple2 b1 c1)))) (t2tb1155 x))))

(declare-fun tb2t1155 (uni) (set (set (tuple21 (tuple21 b c) (tuple21 b
  c)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 b c) (tuple21 b c))))))
  (! (= (tb2t1155 (t2tb1155 i)) i) :pattern ((t2tb1155 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 b1 c1) (tuple2 b1 c1)))) j)
     (= (t2tb1155 (tb2t1155 j)) j)) :pattern ((t2tb1155 (tb2t1155 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 b c))) (v (set (tuple21 b c)))
  (r (set (tuple21 (tuple21 b c) (tuple21 b c)))))
  (= (mem (set1 (tuple2 (tuple2 b1 c1) (tuple2 b1 c1))) (t2tb1113 r)
  (relation (tuple2 b1 c1) (tuple2 b1 c1) (t2tb131 u) (t2tb131 v)))
  (forall ((x (tuple21 b c)) (y (tuple21 b c)))
  (=> (mem (tuple2 (tuple2 b1 c1) (tuple2 b1 c1))
  (Tuple2 (tuple2 b1 c1) (tuple2 b1 c1) (t2tb134 x) (t2tb134 y))
  (t2tb1113 r)) (and (mem8 x u) (mem8 y v)))))))

(declare-fun t2tb1156 ((set (set (tuple21 (tuple21 b c) c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 b c) c))))) (sort
  (set1 (set1 (tuple2 (tuple2 b1 c1) c1))) (t2tb1156 x))))

(declare-fun tb2t1156 (uni) (set (set (tuple21 (tuple21 b c) c))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 b c) c)))))
  (! (= (tb2t1156 (t2tb1156 i)) i) :pattern ((t2tb1156 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 b1 c1) c1))) j)
     (= (t2tb1156 (tb2t1156 j)) j)) :pattern ((t2tb1156 (tb2t1156 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 b c))) (v (set c)) (r (set (tuple21 (tuple21 b c)
  c))))
  (= (mem (set1 (tuple2 (tuple2 b1 c1) c1)) (t2tb1115 r)
  (relation c1 (tuple2 b1 c1) (t2tb131 u) (t2tb132 v)))
  (forall ((x (tuple21 b c)) (y c))
  (=> (mem (tuple2 (tuple2 b1 c1) c1)
  (Tuple2 (tuple2 b1 c1) c1 (t2tb134 x) (t2tb135 y)) (t2tb1115 r))
  (and (mem8 x u) (mem7 y v)))))))

(declare-fun t2tb1157 ((set (set (tuple21 (tuple21 b c) (set (tuple21 a
  b)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 b c) (set (tuple21 a b))))))) (sort
  (set1 (set1 (tuple2 (tuple2 b1 c1) (set1 (tuple2 a1 b1))))) (t2tb1157 x))))

(declare-fun tb2t1157 (uni) (set (set (tuple21 (tuple21 b c) (set (tuple21 a
  b))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 b c) (set (tuple21 a b)))))))
  (! (= (tb2t1157 (t2tb1157 i)) i) :pattern ((t2tb1157 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 b1 c1) (set1 (tuple2 a1 b1))))) j)
     (= (t2tb1157 (tb2t1157 j)) j)) :pattern ((t2tb1157 (tb2t1157 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 b c))) (v (set (set (tuple21 a b))))
  (r (set (tuple21 (tuple21 b c) (set (tuple21 a b))))))
  (= (mem (set1 (tuple2 (tuple2 b1 c1) (set1 (tuple2 a1 b1)))) (t2tb1117 r)
  (relation (set1 (tuple2 a1 b1)) (tuple2 b1 c1) (t2tb131 u) (t2tb10 v)))
  (forall ((x (tuple21 b c)) (y (set (tuple21 a b))))
  (=> (mem (tuple2 (tuple2 b1 c1) (set1 (tuple2 a1 b1)))
  (Tuple2 (tuple2 b1 c1) (set1 (tuple2 a1 b1)) (t2tb134 x) (t2tb11 y))
  (t2tb1117 r)) (and (mem8 x u) (mem4 y v)))))))

(declare-fun t2tb1158 ((set (set (tuple21 (tuple21 b c) (tuple21 a
  b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 b c) (tuple21 a b)))))) (sort
  (set1 (set1 (tuple2 (tuple2 b1 c1) (tuple2 a1 b1)))) (t2tb1158 x))))

(declare-fun tb2t1158 (uni) (set (set (tuple21 (tuple21 b c) (tuple21 a
  b)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 b c) (tuple21 a b))))))
  (! (= (tb2t1158 (t2tb1158 i)) i) :pattern ((t2tb1158 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 b1 c1) (tuple2 a1 b1)))) j)
     (= (t2tb1158 (tb2t1158 j)) j)) :pattern ((t2tb1158 (tb2t1158 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 b c))) (v (set (tuple21 a b)))
  (r (set (tuple21 (tuple21 b c) (tuple21 a b)))))
  (= (mem (set1 (tuple2 (tuple2 b1 c1) (tuple2 a1 b1))) (t2tb1119 r)
  (relation (tuple2 a1 b1) (tuple2 b1 c1) (t2tb131 u) (t2tb11 v)))
  (forall ((x (tuple21 b c)) (y (tuple21 a b)))
  (=> (mem (tuple2 (tuple2 b1 c1) (tuple2 a1 b1))
  (Tuple2 (tuple2 b1 c1) (tuple2 a1 b1) (t2tb134 x) (t2tb13 y)) (t2tb1119 r))
  (and (mem8 x u) (mem3 y v)))))))

(declare-fun t2tb1159 ((set (set (tuple21 (tuple21 b c) b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 b c) b))))) (sort
  (set1 (set1 (tuple2 (tuple2 b1 c1) b1))) (t2tb1159 x))))

(declare-fun tb2t1159 (uni) (set (set (tuple21 (tuple21 b c) b))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 b c) b)))))
  (! (= (tb2t1159 (t2tb1159 i)) i) :pattern ((t2tb1159 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 b1 c1) b1))) j)
     (= (t2tb1159 (tb2t1159 j)) j)) :pattern ((t2tb1159 (tb2t1159 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 b c))) (v (set b)) (r (set (tuple21 (tuple21 b c)
  b))))
  (= (mem (set1 (tuple2 (tuple2 b1 c1) b1)) (t2tb1121 r)
  (relation b1 (tuple2 b1 c1) (t2tb131 u) (t2tb12 v)))
  (forall ((x (tuple21 b c)) (y b))
  (=> (mem (tuple2 (tuple2 b1 c1) b1)
  (Tuple2 (tuple2 b1 c1) b1 (t2tb134 x) (t2tb14 y)) (t2tb1121 r))
  (and (mem8 x u) (mem2 y v)))))))

(declare-fun t2tb5548 ((set (set (tuple21 (tuple21 b c) (tuple21 a
  a))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 b c) (tuple21 a a)))))) (sort
  (set1 (set1 (tuple2 (tuple2 b1 c1) (tuple2 a1 a1)))) (t2tb5548 x))))

(declare-fun tb2t5548 (uni) (set (set (tuple21 (tuple21 b c) (tuple21 a
  a)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 b c) (tuple21 a a))))))
  (! (= (tb2t5548 (t2tb5548 i)) i) :pattern ((t2tb5548 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 b1 c1) (tuple2 a1 a1)))) j)
     (= (t2tb5548 (tb2t5548 j)) j)) :pattern ((t2tb5548 (tb2t5548 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 b c))) (v (set (tuple21 a a)))
  (r (set (tuple21 (tuple21 b c) (tuple21 a a)))))
  (= (mem (set1 (tuple2 (tuple2 b1 c1) (tuple2 a1 a1))) (t2tb5511 r)
  (relation (tuple2 a1 a1) (tuple2 b1 c1) (t2tb131 u) (t2tb4 v)))
  (forall ((x (tuple21 b c)) (y (tuple21 a a)))
  (=> (mem (tuple2 (tuple2 b1 c1) (tuple2 a1 a1))
  (Tuple2 (tuple2 b1 c1) (tuple2 a1 a1) (t2tb134 x) (t2tb5 y)) (t2tb5511 r))
  (and (mem8 x u) (mem12 y v)))))))

(declare-fun t2tb1160 ((set (set (tuple21 (tuple21 b c) a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 b c) a))))) (sort
  (set1 (set1 (tuple2 (tuple2 b1 c1) a1))) (t2tb1160 x))))

(declare-fun tb2t1160 (uni) (set (set (tuple21 (tuple21 b c) a))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 b c) a)))))
  (! (= (tb2t1160 (t2tb1160 i)) i) :pattern ((t2tb1160 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 b1 c1) a1))) j)
     (= (t2tb1160 (tb2t1160 j)) j)) :pattern ((t2tb1160 (tb2t1160 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 b c))) (v (set a)) (r (set (tuple21 (tuple21 b c)
  a))))
  (= (mem (set1 (tuple2 (tuple2 b1 c1) a1)) (t2tb1124 r)
  (relation a1 (tuple2 b1 c1) (t2tb131 u) (t2tb1 v)))
  (forall ((x (tuple21 b c)) (y a))
  (=> (mem (tuple2 (tuple2 b1 c1) a1)
  (Tuple2 (tuple2 b1 c1) a1 (t2tb134 x) (t2tb2 y)) (t2tb1124 r))
  (and (mem8 x u) (mem1 y v)))))))

;; mem_relation
  (assert
  (forall ((b2 ty))
  (forall ((u (set (tuple21 b c))) (v uni) (r uni))
  (and
  (=> (mem (set1 (tuple2 (tuple2 b1 c1) b2)) r
  (relation b2 (tuple2 b1 c1) (t2tb131 u) v))
  (forall ((x (tuple21 b c)) (y uni))
  (=> (mem (tuple2 (tuple2 b1 c1) b2)
  (Tuple2 (tuple2 b1 c1) b2 (t2tb134 x) y) r) (and (mem8 x u) (mem b2 y v)))))
  (=>
  (forall ((x (tuple21 b c)) (y uni))
  (=> (sort b2 y)
  (=> (mem (tuple2 (tuple2 b1 c1) b2)
  (Tuple2 (tuple2 b1 c1) b2 (t2tb134 x) y) r) (and (mem8 x u) (mem b2 y v)))))
  (mem (set1 (tuple2 (tuple2 b1 c1) b2)) r
  (relation b2 (tuple2 b1 c1) (t2tb131 u) v)))))))

(declare-fun t2tb5549 ((set (set (tuple21 c (tuple21 (tuple21 a b) (tuple21 a
  c)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 c (tuple21 (tuple21 a b) (tuple21 a c)))))))
  (sort (set1 (set1 (tuple2 c1 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)))))
  (t2tb5549 x))))

(declare-fun tb2t5549 (uni) (set (set (tuple21 c (tuple21 (tuple21 a b)
  (tuple21 a c))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 c (tuple21 (tuple21 a b) (tuple21 a c)))))))
  (! (= (tb2t5549 (t2tb5549 i)) i) :pattern ((t2tb5549 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 c1 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1))))) j)
     (= (t2tb5549 (tb2t5549 j)) j)) :pattern ((t2tb5549 (tb2t5549 j))) )))

;; mem_relation
  (assert
  (forall ((u (set c)) (v (set (tuple21 (tuple21 a b) (tuple21 a c))))
  (r (set (tuple21 c (tuple21 (tuple21 a b) (tuple21 a c))))))
  (= (mem (set1 (tuple2 c1 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1))))
  (t2tb5513 r)
  (relation (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) c1 (t2tb132 u)
  (t2tb238 v)))
  (forall ((x c) (y (tuple21 (tuple21 a b) (tuple21 a c))))
  (=> (mem (tuple2 c1 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)))
  (Tuple2 c1 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) (t2tb135 x) (t2tb239 y))
  (t2tb5513 r)) (and (mem7 x u) (mem51 y v)))))))

(declare-fun t2tb302 ((set (set (tuple21 c (tuple21 a c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 c (tuple21 a c)))))) (sort
  (set1 (set1 (tuple2 c1 (tuple2 a1 c1)))) (t2tb302 x))))

(declare-fun tb2t302 (uni) (set (set (tuple21 c (tuple21 a c)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 c (tuple21 a c))))))
  (! (= (tb2t302 (t2tb302 i)) i) :pattern ((t2tb302 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 c1 (tuple2 a1 c1)))) j)
     (= (t2tb302 (tb2t302 j)) j)) :pattern ((t2tb302 (tb2t302 j))) )))

;; mem_relation
  (assert
  (forall ((u (set c)) (v (set (tuple21 a c))) (r (set (tuple21 c (tuple21 a
  c)))))
  (= (mem (set1 (tuple2 c1 (tuple2 a1 c1))) (t2tb210 r)
  (relation (tuple2 a1 c1) c1 (t2tb132 u) (t2tb129 v)))
  (forall ((x c) (y (tuple21 a c)))
  (=> (mem (tuple2 c1 (tuple2 a1 c1))
  (Tuple2 c1 (tuple2 a1 c1) (t2tb135 x) (t2tb133 y)) (t2tb210 r))
  (and (mem7 x u) (mem10 y v)))))))

(declare-fun t2tb1161 ((set (set (tuple21 c (set (tuple21 b c)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 c (set (tuple21 b c))))))) (sort
  (set1 (set1 (tuple2 c1 (set1 (tuple2 b1 c1))))) (t2tb1161 x))))

(declare-fun tb2t1161 (uni) (set (set (tuple21 c (set (tuple21 b c))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 c (set (tuple21 b c)))))))
  (! (= (tb2t1161 (t2tb1161 i)) i) :pattern ((t2tb1161 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 c1 (set1 (tuple2 b1 c1))))) j)
     (= (t2tb1161 (tb2t1161 j)) j)) :pattern ((t2tb1161 (tb2t1161 j))) )))

;; mem_relation
  (assert
  (forall ((u (set c)) (v (set (set (tuple21 b c)))) (r (set (tuple21 c
  (set (tuple21 b c))))))
  (= (mem (set1 (tuple2 c1 (set1 (tuple2 b1 c1)))) (t2tb1125 r)
  (relation (set1 (tuple2 b1 c1)) c1 (t2tb132 u) (t2tb130 v)))
  (forall ((x c) (y (set (tuple21 b c))))
  (=> (mem (tuple2 c1 (set1 (tuple2 b1 c1)))
  (Tuple2 c1 (set1 (tuple2 b1 c1)) (t2tb135 x) (t2tb131 y)) (t2tb1125 r))
  (and (mem7 x u) (mem9 y v)))))))

(declare-fun t2tb1162 ((set (set (tuple21 c (tuple21 b c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 c (tuple21 b c)))))) (sort
  (set1 (set1 (tuple2 c1 (tuple2 b1 c1)))) (t2tb1162 x))))

(declare-fun tb2t1162 (uni) (set (set (tuple21 c (tuple21 b c)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 c (tuple21 b c))))))
  (! (= (tb2t1162 (t2tb1162 i)) i) :pattern ((t2tb1162 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 c1 (tuple2 b1 c1)))) j)
     (= (t2tb1162 (tb2t1162 j)) j)) :pattern ((t2tb1162 (tb2t1162 j))) )))

;; mem_relation
  (assert
  (forall ((u (set c)) (v (set (tuple21 b c))) (r (set (tuple21 c (tuple21 b
  c)))))
  (= (mem (set1 (tuple2 c1 (tuple2 b1 c1))) (t2tb1127 r)
  (relation (tuple2 b1 c1) c1 (t2tb132 u) (t2tb131 v)))
  (forall ((x c) (y (tuple21 b c)))
  (=> (mem (tuple2 c1 (tuple2 b1 c1))
  (Tuple2 c1 (tuple2 b1 c1) (t2tb135 x) (t2tb134 y)) (t2tb1127 r))
  (and (mem7 x u) (mem8 y v)))))))

(declare-fun t2tb305 ((set (set (tuple21 c c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 c c))))) (sort (set1 (set1 (tuple2 c1 c1)))
  (t2tb305 x))))

(declare-fun tb2t305 (uni) (set (set (tuple21 c c))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 c c)))))
  (! (= (tb2t305 (t2tb305 i)) i) :pattern ((t2tb305 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 c1 c1))) j) (= (t2tb305 (tb2t305 j)) j)) :pattern (
  (t2tb305 (tb2t305 j))) )))

;; mem_relation
  (assert
  (forall ((u (set c)) (v (set c)) (r (set (tuple21 c c))))
  (= (mem (set1 (tuple2 c1 c1)) (t2tb216 r)
  (relation c1 c1 (t2tb132 u) (t2tb132 v)))
  (forall ((x c) (y c))
  (=> (mem (tuple2 c1 c1) (Tuple2 c1 c1 (t2tb135 x) (t2tb135 y)) (t2tb216 r))
  (and (mem7 x u) (mem7 y v)))))))

(declare-fun t2tb306 ((set (set (tuple21 c (set (tuple21 a b)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 c (set (tuple21 a b))))))) (sort
  (set1 (set1 (tuple2 c1 (set1 (tuple2 a1 b1))))) (t2tb306 x))))

(declare-fun tb2t306 (uni) (set (set (tuple21 c (set (tuple21 a b))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 c (set (tuple21 a b)))))))
  (! (= (tb2t306 (t2tb306 i)) i) :pattern ((t2tb306 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 c1 (set1 (tuple2 a1 b1))))) j)
     (= (t2tb306 (tb2t306 j)) j)) :pattern ((t2tb306 (tb2t306 j))) )))

;; mem_relation
  (assert
  (forall ((u (set c)) (v (set (set (tuple21 a b)))) (r (set (tuple21 c
  (set (tuple21 a b))))))
  (= (mem (set1 (tuple2 c1 (set1 (tuple2 a1 b1)))) (t2tb218 r)
  (relation (set1 (tuple2 a1 b1)) c1 (t2tb132 u) (t2tb10 v)))
  (forall ((x c) (y (set (tuple21 a b))))
  (=> (mem (tuple2 c1 (set1 (tuple2 a1 b1)))
  (Tuple2 c1 (set1 (tuple2 a1 b1)) (t2tb135 x) (t2tb11 y)) (t2tb218 r))
  (and (mem7 x u) (mem4 y v)))))))

(declare-fun t2tb307 ((set (set (tuple21 c (tuple21 a b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 c (tuple21 a b)))))) (sort
  (set1 (set1 (tuple2 c1 (tuple2 a1 b1)))) (t2tb307 x))))

(declare-fun tb2t307 (uni) (set (set (tuple21 c (tuple21 a b)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 c (tuple21 a b))))))
  (! (= (tb2t307 (t2tb307 i)) i) :pattern ((t2tb307 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 c1 (tuple2 a1 b1)))) j)
     (= (t2tb307 (tb2t307 j)) j)) :pattern ((t2tb307 (tb2t307 j))) )))

;; mem_relation
  (assert
  (forall ((u (set c)) (v (set (tuple21 a b))) (r (set (tuple21 c (tuple21 a
  b)))))
  (= (mem (set1 (tuple2 c1 (tuple2 a1 b1))) (t2tb220 r)
  (relation (tuple2 a1 b1) c1 (t2tb132 u) (t2tb11 v)))
  (forall ((x c) (y (tuple21 a b)))
  (=> (mem (tuple2 c1 (tuple2 a1 b1))
  (Tuple2 c1 (tuple2 a1 b1) (t2tb135 x) (t2tb13 y)) (t2tb220 r))
  (and (mem7 x u) (mem3 y v)))))))

(declare-fun t2tb308 ((set (set (tuple21 c b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 c b))))) (sort (set1 (set1 (tuple2 c1 b1)))
  (t2tb308 x))))

(declare-fun tb2t308 (uni) (set (set (tuple21 c b))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 c b)))))
  (! (= (tb2t308 (t2tb308 i)) i) :pattern ((t2tb308 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 c1 b1))) j) (= (t2tb308 (tb2t308 j)) j)) :pattern (
  (t2tb308 (tb2t308 j))) )))

;; mem_relation
  (assert
  (forall ((u (set c)) (v (set b)) (r (set (tuple21 c b))))
  (= (mem (set1 (tuple2 c1 b1)) (t2tb222 r)
  (relation b1 c1 (t2tb132 u) (t2tb12 v)))
  (forall ((x c) (y b))
  (=> (mem (tuple2 c1 b1) (Tuple2 c1 b1 (t2tb135 x) (t2tb14 y)) (t2tb222 r))
  (and (mem7 x u) (mem2 y v)))))))

(declare-fun t2tb5550 ((set (set (tuple21 c (tuple21 a a))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 c (tuple21 a a)))))) (sort
  (set1 (set1 (tuple2 c1 (tuple2 a1 a1)))) (t2tb5550 x))))

(declare-fun tb2t5550 (uni) (set (set (tuple21 c (tuple21 a a)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 c (tuple21 a a))))))
  (! (= (tb2t5550 (t2tb5550 i)) i) :pattern ((t2tb5550 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 c1 (tuple2 a1 a1)))) j)
     (= (t2tb5550 (tb2t5550 j)) j)) :pattern ((t2tb5550 (tb2t5550 j))) )))

;; mem_relation
  (assert
  (forall ((u (set c)) (v (set (tuple21 a a))) (r (set (tuple21 c (tuple21 a
  a)))))
  (= (mem (set1 (tuple2 c1 (tuple2 a1 a1))) (t2tb5515 r)
  (relation (tuple2 a1 a1) c1 (t2tb132 u) (t2tb4 v)))
  (forall ((x c) (y (tuple21 a a)))
  (=> (mem (tuple2 c1 (tuple2 a1 a1))
  (Tuple2 c1 (tuple2 a1 a1) (t2tb135 x) (t2tb5 y)) (t2tb5515 r))
  (and (mem7 x u) (mem12 y v)))))))

(declare-fun t2tb309 ((set (set (tuple21 c a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 c a))))) (sort (set1 (set1 (tuple2 c1 a1)))
  (t2tb309 x))))

(declare-fun tb2t309 (uni) (set (set (tuple21 c a))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 c a)))))
  (! (= (tb2t309 (t2tb309 i)) i) :pattern ((t2tb309 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 c1 a1))) j) (= (t2tb309 (tb2t309 j)) j)) :pattern (
  (t2tb309 (tb2t309 j))) )))

;; mem_relation
  (assert
  (forall ((u (set c)) (v (set a)) (r (set (tuple21 c a))))
  (= (mem (set1 (tuple2 c1 a1)) (t2tb224 r)
  (relation a1 c1 (t2tb132 u) (t2tb1 v)))
  (forall ((x c) (y a))
  (=> (mem (tuple2 c1 a1) (Tuple2 c1 a1 (t2tb135 x) (t2tb2 y)) (t2tb224 r))
  (and (mem7 x u) (mem1 y v)))))))

;; mem_relation
  (assert
  (forall ((b2 ty))
  (forall ((u (set c)) (v uni) (r uni))
  (and
  (=> (mem (set1 (tuple2 c1 b2)) r (relation b2 c1 (t2tb132 u) v))
  (forall ((x c) (y uni))
  (=> (mem (tuple2 c1 b2) (Tuple2 c1 b2 (t2tb135 x) y) r)
  (and (mem7 x u) (mem b2 y v)))))
  (=>
  (forall ((x c) (y uni))
  (=> (sort b2 y)
  (=> (mem (tuple2 c1 b2) (Tuple2 c1 b2 (t2tb135 x) y) r)
  (and (mem7 x u) (mem b2 y v))))) (mem (set1 (tuple2 c1 b2)) r
  (relation b2 c1 (t2tb132 u) v)))))))

(declare-fun t2tb5551 ((set (set (tuple21 (set (tuple21 a b))
  (tuple21 (tuple21 a b) (tuple21 a c)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a b)) (tuple21 (tuple21 a b)
  (tuple21 a c))))))) (sort
  (set1
  (set1
  (tuple2 (set1 (tuple2 a1 b1)) (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)))))
  (t2tb5551 x))))

(declare-fun tb2t5551 (uni) (set (set (tuple21 (set (tuple21 a b))
  (tuple21 (tuple21 a b) (tuple21 a c))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a b)) (tuple21 (tuple21 a b)
  (tuple21 a c)))))))
  (! (= (tb2t5551 (t2tb5551 i)) i) :pattern ((t2tb5551 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (set1
     (tuple2 (set1 (tuple2 a1 b1)) (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)))))
     j) (= (t2tb5551 (tb2t5551 j)) j)) :pattern ((t2tb5551 (tb2t5551 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a b)))) (v (set (tuple21 (tuple21 a b)
  (tuple21 a c)))) (r (set (tuple21 (set (tuple21 a b)) (tuple21 (tuple21 a
  b) (tuple21 a c))))))
  (= (mem
  (set1
  (tuple2 (set1 (tuple2 a1 b1)) (tuple2 (tuple2 a1 b1) (tuple2 a1 c1))))
  (t2tb5517 r)
  (relation (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) (set1 (tuple2 a1 b1))
  (t2tb10 u) (t2tb238 v)))
  (forall ((x (set (tuple21 a b))) (y (tuple21 (tuple21 a b) (tuple21 a c))))
  (=> (mem
  (tuple2 (set1 (tuple2 a1 b1)) (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)))
  (Tuple2 (set1 (tuple2 a1 b1)) (tuple2 (tuple2 a1 b1) (tuple2 a1 c1))
  (t2tb11 x) (t2tb239 y)) (t2tb5517 r)) (and (mem4 x u) (mem51 y v)))))))

(declare-fun t2tb311 ((set (set (tuple21 (set (tuple21 a b)) (tuple21 a
  c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a b)) (tuple21 a c)))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 c1)))) (t2tb311 x))))

(declare-fun tb2t311 (uni) (set (set (tuple21 (set (tuple21 a b)) (tuple21 a
  c)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a b)) (tuple21 a c))))))
  (! (= (tb2t311 (t2tb311 i)) i) :pattern ((t2tb311 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 c1)))) j)
     (= (t2tb311 (tb2t311 j)) j)) :pattern ((t2tb311 (tb2t311 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a b)))) (v (set (tuple21 a c)))
  (r (set (tuple21 (set (tuple21 a b)) (tuple21 a c)))))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 c1))) (t2tb229 r)
  (relation (tuple2 a1 c1) (set1 (tuple2 a1 b1)) (t2tb10 u) (t2tb129 v)))
  (forall ((x (set (tuple21 a b))) (y (tuple21 a c)))
  (=> (mem (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 c1))
  (Tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 c1) (t2tb11 x) (t2tb133 y))
  (t2tb229 r)) (and (mem4 x u) (mem10 y v)))))))

(declare-fun t2tb1163 ((set (set (tuple21 (set (tuple21 a b)) (set (tuple21 b
  c)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a b)) (set (tuple21 b c)))))))
  (sort (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 b1 c1)))))
  (t2tb1163 x))))

(declare-fun tb2t1163 (uni) (set (set (tuple21 (set (tuple21 a b))
  (set (tuple21 b c))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a b)) (set (tuple21 b c)))))))
  (! (= (tb2t1163 (t2tb1163 i)) i) :pattern ((t2tb1163 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 b1 c1))))) j)
     (= (t2tb1163 (tb2t1163 j)) j)) :pattern ((t2tb1163 (tb2t1163 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a b)))) (v (set (set (tuple21 b c))))
  (r (set (tuple21 (set (tuple21 a b)) (set (tuple21 b c))))))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 b1 c1))))
  (t2tb1129 r)
  (relation (set1 (tuple2 b1 c1)) (set1 (tuple2 a1 b1)) (t2tb10 u)
  (t2tb130 v)))
  (forall ((x (set (tuple21 a b))) (y (set (tuple21 b c))))
  (=> (mem (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 b1 c1)))
  (Tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 b1 c1)) (t2tb11 x) (t2tb131 y))
  (t2tb1129 r)) (and (mem4 x u) (mem9 y v)))))))

(declare-fun t2tb1164 ((set (set (tuple21 (set (tuple21 a b)) (tuple21 b
  c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a b)) (tuple21 b c)))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 b1 c1)))) (t2tb1164 x))))

(declare-fun tb2t1164 (uni) (set (set (tuple21 (set (tuple21 a b)) (tuple21 b
  c)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a b)) (tuple21 b c))))))
  (! (= (tb2t1164 (t2tb1164 i)) i) :pattern ((t2tb1164 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 b1 c1)))) j)
     (= (t2tb1164 (tb2t1164 j)) j)) :pattern ((t2tb1164 (tb2t1164 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a b)))) (v (set (tuple21 b c)))
  (r (set (tuple21 (set (tuple21 a b)) (tuple21 b c)))))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 b1 c1))) (t2tb1131 r)
  (relation (tuple2 b1 c1) (set1 (tuple2 a1 b1)) (t2tb10 u) (t2tb131 v)))
  (forall ((x (set (tuple21 a b))) (y (tuple21 b c)))
  (=> (mem (tuple2 (set1 (tuple2 a1 b1)) (tuple2 b1 c1))
  (Tuple2 (set1 (tuple2 a1 b1)) (tuple2 b1 c1) (t2tb11 x) (t2tb134 y))
  (t2tb1131 r)) (and (mem4 x u) (mem8 y v)))))))

(declare-fun t2tb314 ((set (set (tuple21 (set (tuple21 a b)) c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a b)) c))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) c1))) (t2tb314 x))))

(declare-fun tb2t314 (uni) (set (set (tuple21 (set (tuple21 a b)) c))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a b)) c)))))
  (! (= (tb2t314 (t2tb314 i)) i) :pattern ((t2tb314 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) c1))) j)
     (= (t2tb314 (tb2t314 j)) j)) :pattern ((t2tb314 (tb2t314 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a b)))) (v (set c))
  (r (set (tuple21 (set (tuple21 a b)) c))))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 b1)) c1)) (t2tb234 r)
  (relation c1 (set1 (tuple2 a1 b1)) (t2tb10 u) (t2tb132 v)))
  (forall ((x (set (tuple21 a b))) (y c))
  (=> (mem (tuple2 (set1 (tuple2 a1 b1)) c1)
  (Tuple2 (set1 (tuple2 a1 b1)) c1 (t2tb11 x) (t2tb135 y)) (t2tb234 r))
  (and (mem4 x u) (mem7 y v)))))))

(declare-fun t2tb45 ((set (set (tuple21 (set (tuple21 a b)) (set (tuple21 a
  b)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a b)) (set (tuple21 a b)))))))
  (sort (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1)))))
  (t2tb45 x))))

(declare-fun tb2t45 (uni) (set (set (tuple21 (set (tuple21 a b))
  (set (tuple21 a b))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a b)) (set (tuple21 a b)))))))
  (! (= (tb2t45 (t2tb45 i)) i) :pattern ((t2tb45 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1))))) j)
     (= (t2tb45 (tb2t45 j)) j)) :pattern ((t2tb45 (tb2t45 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a b)))) (v (set (set (tuple21 a b))))
  (r (set (tuple21 (set (tuple21 a b)) (set (tuple21 a b))))))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1))))
  (t2tb15 r)
  (relation (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1)) (t2tb10 u)
  (t2tb10 v)))
  (forall ((x (set (tuple21 a b))) (y (set (tuple21 a b))))
  (=> (mem (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1)))
  (Tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1)) (t2tb11 x) (t2tb11 y))
  (t2tb15 r)) (and (mem4 x u) (mem4 y v)))))))

(declare-fun t2tb46 ((set (set (tuple21 (set (tuple21 a b)) (tuple21 a
  b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a b)) (tuple21 a b)))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 b1)))) (t2tb46 x))))

(declare-fun tb2t46 (uni) (set (set (tuple21 (set (tuple21 a b)) (tuple21 a
  b)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a b)) (tuple21 a b))))))
  (! (= (tb2t46 (t2tb46 i)) i) :pattern ((t2tb46 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 b1)))) j)
     (= (t2tb46 (tb2t46 j)) j)) :pattern ((t2tb46 (tb2t46 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a b)))) (v (set (tuple21 a b)))
  (r (set (tuple21 (set (tuple21 a b)) (tuple21 a b)))))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 b1))) (t2tb17 r)
  (relation (tuple2 a1 b1) (set1 (tuple2 a1 b1)) (t2tb10 u) (t2tb11 v)))
  (forall ((x (set (tuple21 a b))) (y (tuple21 a b)))
  (=> (mem (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 b1))
  (Tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 b1) (t2tb11 x) (t2tb13 y))
  (t2tb17 r)) (and (mem4 x u) (mem3 y v)))))))

(declare-fun t2tb47 ((set (set (tuple21 (set (tuple21 a b)) b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a b)) b))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) b1))) (t2tb47 x))))

(declare-fun tb2t47 (uni) (set (set (tuple21 (set (tuple21 a b)) b))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a b)) b)))))
  (! (= (tb2t47 (t2tb47 i)) i) :pattern ((t2tb47 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) b1))) j)
     (= (t2tb47 (tb2t47 j)) j)) :pattern ((t2tb47 (tb2t47 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a b)))) (v (set b))
  (r (set (tuple21 (set (tuple21 a b)) b))))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 b1)) b1)) (t2tb19 r)
  (relation b1 (set1 (tuple2 a1 b1)) (t2tb10 u) (t2tb12 v)))
  (forall ((x (set (tuple21 a b))) (y b))
  (=> (mem (tuple2 (set1 (tuple2 a1 b1)) b1)
  (Tuple2 (set1 (tuple2 a1 b1)) b1 (t2tb11 x) (t2tb14 y)) (t2tb19 r))
  (and (mem4 x u) (mem2 y v)))))))

(declare-fun t2tb5068 ((set (set (tuple21 (set (tuple21 a b)) (tuple21 a
  a))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a b)) (tuple21 a a)))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 a1)))) (t2tb5068 x))))

(declare-fun tb2t5068 (uni) (set (set (tuple21 (set (tuple21 a b)) (tuple21 a
  a)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a b)) (tuple21 a a))))))
  (! (= (tb2t5068 (t2tb5068 i)) i) :pattern ((t2tb5068 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 a1)))) j)
     (= (t2tb5068 (tb2t5068 j)) j)) :pattern ((t2tb5068 (tb2t5068 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a b)))) (v (set (tuple21 a a)))
  (r (set (tuple21 (set (tuple21 a b)) (tuple21 a a)))))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 a1))) (t2tb5062 r)
  (relation (tuple2 a1 a1) (set1 (tuple2 a1 b1)) (t2tb10 u) (t2tb4 v)))
  (forall ((x (set (tuple21 a b))) (y (tuple21 a a)))
  (=> (mem (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 a1))
  (Tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 a1) (t2tb11 x) (t2tb5 y))
  (t2tb5062 r)) (and (mem4 x u) (mem12 y v)))))))

(declare-fun t2tb48 ((set (set (tuple21 (set (tuple21 a b)) a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a b)) a))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) a1))) (t2tb48 x))))

(declare-fun tb2t48 (uni) (set (set (tuple21 (set (tuple21 a b)) a))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a b)) a)))))
  (! (= (tb2t48 (t2tb48 i)) i) :pattern ((t2tb48 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) a1))) j)
     (= (t2tb48 (tb2t48 j)) j)) :pattern ((t2tb48 (tb2t48 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a b)))) (v (set a))
  (r (set (tuple21 (set (tuple21 a b)) a))))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 b1)) a1)) (t2tb22 r)
  (relation a1 (set1 (tuple2 a1 b1)) (t2tb10 u) (t2tb1 v)))
  (forall ((x (set (tuple21 a b))) (y a))
  (=> (mem (tuple2 (set1 (tuple2 a1 b1)) a1)
  (Tuple2 (set1 (tuple2 a1 b1)) a1 (t2tb11 x) (t2tb2 y)) (t2tb22 r))
  (and (mem4 x u) (mem1 y v)))))))

;; mem_relation
  (assert
  (forall ((b2 ty))
  (forall ((u (set (set (tuple21 a b)))) (v uni) (r uni))
  (and
  (=> (mem (set1 (tuple2 (set1 (tuple2 a1 b1)) b2)) r
  (relation b2 (set1 (tuple2 a1 b1)) (t2tb10 u) v))
  (forall ((x (set (tuple21 a b))) (y uni))
  (=> (mem (tuple2 (set1 (tuple2 a1 b1)) b2)
  (Tuple2 (set1 (tuple2 a1 b1)) b2 (t2tb11 x) y) r)
  (and (mem4 x u) (mem b2 y v)))))
  (=>
  (forall ((x (set (tuple21 a b))) (y uni))
  (=> (sort b2 y)
  (=> (mem (tuple2 (set1 (tuple2 a1 b1)) b2)
  (Tuple2 (set1 (tuple2 a1 b1)) b2 (t2tb11 x) y) r)
  (and (mem4 x u) (mem b2 y v))))) (mem
  (set1 (tuple2 (set1 (tuple2 a1 b1)) b2)) r
  (relation b2 (set1 (tuple2 a1 b1)) (t2tb10 u) v)))))))

(declare-fun t2tb5552 ((set (set (tuple21 (tuple21 a b) (tuple21 (tuple21 a
  b) (tuple21 a c)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a b) (tuple21 (tuple21 a b)
  (tuple21 a c))))))) (sort
  (set1
  (set1 (tuple2 (tuple2 a1 b1) (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)))))
  (t2tb5552 x))))

(declare-fun tb2t5552 (uni) (set (set (tuple21 (tuple21 a b)
  (tuple21 (tuple21 a b) (tuple21 a c))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a b) (tuple21 (tuple21 a b)
  (tuple21 a c)))))))
  (! (= (tb2t5552 (t2tb5552 i)) i) :pattern ((t2tb5552 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (set1 (tuple2 (tuple2 a1 b1) (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)))))
     j) (= (t2tb5552 (tb2t5552 j)) j)) :pattern ((t2tb5552 (tb2t5552 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a b))) (v (set (tuple21 (tuple21 a b) (tuple21 a
  c)))) (r (set (tuple21 (tuple21 a b) (tuple21 (tuple21 a b) (tuple21 a
  c))))))
  (= (mem
  (set1 (tuple2 (tuple2 a1 b1) (tuple2 (tuple2 a1 b1) (tuple2 a1 c1))))
  (t2tb5519 r)
  (relation (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) (tuple2 a1 b1) (t2tb11 u)
  (t2tb238 v)))
  (forall ((x (tuple21 a b)) (y (tuple21 (tuple21 a b) (tuple21 a c))))
  (=> (mem (tuple2 (tuple2 a1 b1) (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)))
  (Tuple2 (tuple2 a1 b1) (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) (t2tb13 x)
  (t2tb239 y)) (t2tb5519 r)) (and (mem3 x u) (mem51 y v)))))))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a b))) (v (set (tuple21 a c)))
  (r (set (tuple21 (tuple21 a b) (tuple21 a c)))))
  (= (mem (set1 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1))) (t2tb238 r)
  (relation (tuple2 a1 c1) (tuple2 a1 b1) (t2tb11 u) (t2tb129 v)))
  (forall ((x (tuple21 a b)) (y (tuple21 a c)))
  (=> (mem51
  (tb2t239 (Tuple2 (tuple2 a1 b1) (tuple2 a1 c1) (t2tb13 x) (t2tb133 y))) r)
  (and (mem3 x u) (mem10 y v)))))))

(declare-fun t2tb1165 ((set (set (tuple21 (tuple21 a b) (set (tuple21 b
  c)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a b) (set (tuple21 b c))))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 b1) (set1 (tuple2 b1 c1))))) (t2tb1165 x))))

(declare-fun tb2t1165 (uni) (set (set (tuple21 (tuple21 a b) (set (tuple21 b
  c))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a b) (set (tuple21 b c)))))))
  (! (= (tb2t1165 (t2tb1165 i)) i) :pattern ((t2tb1165 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 b1) (set1 (tuple2 b1 c1))))) j)
     (= (t2tb1165 (tb2t1165 j)) j)) :pattern ((t2tb1165 (tb2t1165 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a b))) (v (set (set (tuple21 b c))))
  (r (set (tuple21 (tuple21 a b) (set (tuple21 b c))))))
  (= (mem (set1 (tuple2 (tuple2 a1 b1) (set1 (tuple2 b1 c1)))) (t2tb1133 r)
  (relation (set1 (tuple2 b1 c1)) (tuple2 a1 b1) (t2tb11 u) (t2tb130 v)))
  (forall ((x (tuple21 a b)) (y (set (tuple21 b c))))
  (=> (mem (tuple2 (tuple2 a1 b1) (set1 (tuple2 b1 c1)))
  (Tuple2 (tuple2 a1 b1) (set1 (tuple2 b1 c1)) (t2tb13 x) (t2tb131 y))
  (t2tb1133 r)) (and (mem3 x u) (mem9 y v)))))))

(declare-fun t2tb1166 ((set (set (tuple21 (tuple21 a b) (tuple21 b
  c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a b) (tuple21 b c)))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 b1) (tuple2 b1 c1)))) (t2tb1166 x))))

(declare-fun tb2t1166 (uni) (set (set (tuple21 (tuple21 a b) (tuple21 b
  c)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a b) (tuple21 b c))))))
  (! (= (tb2t1166 (t2tb1166 i)) i) :pattern ((t2tb1166 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 b1) (tuple2 b1 c1)))) j)
     (= (t2tb1166 (tb2t1166 j)) j)) :pattern ((t2tb1166 (tb2t1166 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a b))) (v (set (tuple21 b c)))
  (r (set (tuple21 (tuple21 a b) (tuple21 b c)))))
  (= (mem (set1 (tuple2 (tuple2 a1 b1) (tuple2 b1 c1))) (t2tb1135 r)
  (relation (tuple2 b1 c1) (tuple2 a1 b1) (t2tb11 u) (t2tb131 v)))
  (forall ((x (tuple21 a b)) (y (tuple21 b c)))
  (=> (mem (tuple2 (tuple2 a1 b1) (tuple2 b1 c1))
  (Tuple2 (tuple2 a1 b1) (tuple2 b1 c1) (t2tb13 x) (t2tb134 y)) (t2tb1135 r))
  (and (mem3 x u) (mem8 y v)))))))

(declare-fun t2tb319 ((set (set (tuple21 (tuple21 a b) c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a b) c))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 b1) c1))) (t2tb319 x))))

(declare-fun tb2t319 (uni) (set (set (tuple21 (tuple21 a b) c))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a b) c)))))
  (! (= (tb2t319 (t2tb319 i)) i) :pattern ((t2tb319 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 b1) c1))) j)
     (= (t2tb319 (tb2t319 j)) j)) :pattern ((t2tb319 (tb2t319 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a b))) (v (set c)) (r (set (tuple21 (tuple21 a b)
  c))))
  (= (mem (set1 (tuple2 (tuple2 a1 b1) c1)) (t2tb245 r)
  (relation c1 (tuple2 a1 b1) (t2tb11 u) (t2tb132 v)))
  (forall ((x (tuple21 a b)) (y c))
  (=> (mem (tuple2 (tuple2 a1 b1) c1)
  (Tuple2 (tuple2 a1 b1) c1 (t2tb13 x) (t2tb135 y)) (t2tb245 r))
  (and (mem3 x u) (mem7 y v)))))))

(declare-fun t2tb49 ((set (set (tuple21 (tuple21 a b) (set (tuple21 a
  b)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a b) (set (tuple21 a b))))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 b1))))) (t2tb49 x))))

(declare-fun tb2t49 (uni) (set (set (tuple21 (tuple21 a b) (set (tuple21 a
  b))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a b) (set (tuple21 a b)))))))
  (! (= (tb2t49 (t2tb49 i)) i) :pattern ((t2tb49 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 b1))))) j)
     (= (t2tb49 (tb2t49 j)) j)) :pattern ((t2tb49 (tb2t49 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a b))) (v (set (set (tuple21 a b))))
  (r (set (tuple21 (tuple21 a b) (set (tuple21 a b))))))
  (= (mem (set1 (tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 b1)))) (t2tb23 r)
  (relation (set1 (tuple2 a1 b1)) (tuple2 a1 b1) (t2tb11 u) (t2tb10 v)))
  (forall ((x (tuple21 a b)) (y (set (tuple21 a b))))
  (=> (mem (tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 b1)))
  (Tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 b1)) (t2tb13 x) (t2tb11 y))
  (t2tb23 r)) (and (mem3 x u) (mem4 y v)))))))

(declare-fun t2tb50 ((set (set (tuple21 (tuple21 a b) (tuple21 a b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a b) (tuple21 a b)))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 b1) (tuple2 a1 b1)))) (t2tb50 x))))

(declare-fun tb2t50 (uni) (set (set (tuple21 (tuple21 a b) (tuple21 a b)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a b) (tuple21 a b))))))
  (! (= (tb2t50 (t2tb50 i)) i) :pattern ((t2tb50 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 b1) (tuple2 a1 b1)))) j)
     (= (t2tb50 (tb2t50 j)) j)) :pattern ((t2tb50 (tb2t50 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a b))) (v (set (tuple21 a b)))
  (r (set (tuple21 (tuple21 a b) (tuple21 a b)))))
  (= (mem (set1 (tuple2 (tuple2 a1 b1) (tuple2 a1 b1))) (t2tb25 r)
  (relation (tuple2 a1 b1) (tuple2 a1 b1) (t2tb11 u) (t2tb11 v)))
  (forall ((x (tuple21 a b)) (y (tuple21 a b)))
  (=> (mem (tuple2 (tuple2 a1 b1) (tuple2 a1 b1))
  (Tuple2 (tuple2 a1 b1) (tuple2 a1 b1) (t2tb13 x) (t2tb13 y)) (t2tb25 r))
  (and (mem3 x u) (mem3 y v)))))))

(declare-fun t2tb51 ((set (set (tuple21 (tuple21 a b) b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a b) b))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 b1) b1))) (t2tb51 x))))

(declare-fun tb2t51 (uni) (set (set (tuple21 (tuple21 a b) b))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a b) b)))))
  (! (= (tb2t51 (t2tb51 i)) i) :pattern ((t2tb51 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 b1) b1))) j)
     (= (t2tb51 (tb2t51 j)) j)) :pattern ((t2tb51 (tb2t51 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a b))) (v (set b)) (r (set (tuple21 (tuple21 a b)
  b))))
  (= (mem (set1 (tuple2 (tuple2 a1 b1) b1)) (t2tb27 r)
  (relation b1 (tuple2 a1 b1) (t2tb11 u) (t2tb12 v)))
  (forall ((x (tuple21 a b)) (y b))
  (=> (mem (tuple2 (tuple2 a1 b1) b1)
  (Tuple2 (tuple2 a1 b1) b1 (t2tb13 x) (t2tb14 y)) (t2tb27 r))
  (and (mem3 x u) (mem2 y v)))))))

(declare-fun t2tb2731 ((set (set (tuple21 (tuple21 a b) (tuple21 a
  a))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a b) (tuple21 a a)))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 b1) (tuple2 a1 a1)))) (t2tb2731 x))))

(declare-fun tb2t2731 (uni) (set (set (tuple21 (tuple21 a b) (tuple21 a
  a)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a b) (tuple21 a a))))))
  (! (= (tb2t2731 (t2tb2731 i)) i) :pattern ((t2tb2731 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 b1) (tuple2 a1 a1)))) j)
     (= (t2tb2731 (tb2t2731 j)) j)) :pattern ((t2tb2731 (tb2t2731 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a b))) (v (set (tuple21 a a)))
  (r (set (tuple21 (tuple21 a b) (tuple21 a a)))))
  (= (mem (set1 (tuple2 (tuple2 a1 b1) (tuple2 a1 a1))) (t2tb2716 r)
  (relation (tuple2 a1 a1) (tuple2 a1 b1) (t2tb11 u) (t2tb4 v)))
  (forall ((x (tuple21 a b)) (y (tuple21 a a)))
  (=> (mem (tuple2 (tuple2 a1 b1) (tuple2 a1 a1))
  (Tuple2 (tuple2 a1 b1) (tuple2 a1 a1) (t2tb13 x) (t2tb5 y)) (t2tb2716 r))
  (and (mem3 x u) (mem12 y v)))))))

(declare-fun t2tb52 ((set (set (tuple21 (tuple21 a b) a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a b) a))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 b1) a1))) (t2tb52 x))))

(declare-fun tb2t52 (uni) (set (set (tuple21 (tuple21 a b) a))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a b) a)))))
  (! (= (tb2t52 (t2tb52 i)) i) :pattern ((t2tb52 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 b1) a1))) j)
     (= (t2tb52 (tb2t52 j)) j)) :pattern ((t2tb52 (tb2t52 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a b))) (v (set a)) (r (set (tuple21 (tuple21 a b)
  a))))
  (= (mem (set1 (tuple2 (tuple2 a1 b1) a1)) (t2tb29 r)
  (relation a1 (tuple2 a1 b1) (t2tb11 u) (t2tb1 v)))
  (forall ((x (tuple21 a b)) (y a))
  (=> (mem (tuple2 (tuple2 a1 b1) a1)
  (Tuple2 (tuple2 a1 b1) a1 (t2tb13 x) (t2tb2 y)) (t2tb29 r))
  (and (mem3 x u) (mem1 y v)))))))

;; mem_relation
  (assert
  (forall ((b2 ty))
  (forall ((u (set (tuple21 a b))) (v uni) (r uni))
  (and
  (=> (mem (set1 (tuple2 (tuple2 a1 b1) b2)) r
  (relation b2 (tuple2 a1 b1) (t2tb11 u) v))
  (forall ((x (tuple21 a b)) (y uni))
  (=> (mem (tuple2 (tuple2 a1 b1) b2) (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) y)
  r) (and (mem3 x u) (mem b2 y v)))))
  (=>
  (forall ((x (tuple21 a b)) (y uni))
  (=> (sort b2 y)
  (=> (mem (tuple2 (tuple2 a1 b1) b2) (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) y)
  r) (and (mem3 x u) (mem b2 y v))))) (mem (set1 (tuple2 (tuple2 a1 b1) b2))
  r (relation b2 (tuple2 a1 b1) (t2tb11 u) v)))))))

(declare-fun t2tb5553 ((set (set (tuple21 b (tuple21 (tuple21 a b) (tuple21 a
  c)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 b (tuple21 (tuple21 a b) (tuple21 a c)))))))
  (sort (set1 (set1 (tuple2 b1 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)))))
  (t2tb5553 x))))

(declare-fun tb2t5553 (uni) (set (set (tuple21 b (tuple21 (tuple21 a b)
  (tuple21 a c))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 b (tuple21 (tuple21 a b) (tuple21 a c)))))))
  (! (= (tb2t5553 (t2tb5553 i)) i) :pattern ((t2tb5553 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 b1 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1))))) j)
     (= (t2tb5553 (tb2t5553 j)) j)) :pattern ((t2tb5553 (tb2t5553 j))) )))

;; mem_relation
  (assert
  (forall ((u (set b)) (v (set (tuple21 (tuple21 a b) (tuple21 a c))))
  (r (set (tuple21 b (tuple21 (tuple21 a b) (tuple21 a c))))))
  (= (mem (set1 (tuple2 b1 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1))))
  (t2tb5521 r)
  (relation (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) b1 (t2tb12 u) (t2tb238 v)))
  (forall ((x b) (y (tuple21 (tuple21 a b) (tuple21 a c))))
  (=> (mem (tuple2 b1 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)))
  (Tuple2 b1 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) (t2tb14 x) (t2tb239 y))
  (t2tb5521 r)) (and (mem2 x u) (mem51 y v)))))))

(declare-fun t2tb321 ((set (set (tuple21 b (tuple21 a c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 b (tuple21 a c)))))) (sort
  (set1 (set1 (tuple2 b1 (tuple2 a1 c1)))) (t2tb321 x))))

(declare-fun tb2t321 (uni) (set (set (tuple21 b (tuple21 a c)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 b (tuple21 a c))))))
  (! (= (tb2t321 (t2tb321 i)) i) :pattern ((t2tb321 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 b1 (tuple2 a1 c1)))) j)
     (= (t2tb321 (tb2t321 j)) j)) :pattern ((t2tb321 (tb2t321 j))) )))

;; mem_relation
  (assert
  (forall ((u (set b)) (v (set (tuple21 a c))) (r (set (tuple21 b (tuple21 a
  c)))))
  (= (mem (set1 (tuple2 b1 (tuple2 a1 c1))) (t2tb248 r)
  (relation (tuple2 a1 c1) b1 (t2tb12 u) (t2tb129 v)))
  (forall ((x b) (y (tuple21 a c)))
  (=> (mem (tuple2 b1 (tuple2 a1 c1))
  (Tuple2 b1 (tuple2 a1 c1) (t2tb14 x) (t2tb133 y)) (t2tb248 r))
  (and (mem2 x u) (mem10 y v)))))))

(declare-fun t2tb1167 ((set (set (tuple21 b (set (tuple21 b c)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 b (set (tuple21 b c))))))) (sort
  (set1 (set1 (tuple2 b1 (set1 (tuple2 b1 c1))))) (t2tb1167 x))))

(declare-fun tb2t1167 (uni) (set (set (tuple21 b (set (tuple21 b c))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 b (set (tuple21 b c)))))))
  (! (= (tb2t1167 (t2tb1167 i)) i) :pattern ((t2tb1167 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 b1 (set1 (tuple2 b1 c1))))) j)
     (= (t2tb1167 (tb2t1167 j)) j)) :pattern ((t2tb1167 (tb2t1167 j))) )))

;; mem_relation
  (assert
  (forall ((u (set b)) (v (set (set (tuple21 b c)))) (r (set (tuple21 b
  (set (tuple21 b c))))))
  (= (mem (set1 (tuple2 b1 (set1 (tuple2 b1 c1)))) (t2tb1138 r)
  (relation (set1 (tuple2 b1 c1)) b1 (t2tb12 u) (t2tb130 v)))
  (forall ((x b) (y (set (tuple21 b c))))
  (=> (mem (tuple2 b1 (set1 (tuple2 b1 c1)))
  (Tuple2 b1 (set1 (tuple2 b1 c1)) (t2tb14 x) (t2tb131 y)) (t2tb1138 r))
  (and (mem2 x u) (mem9 y v)))))))

(declare-fun t2tb1168 ((set (set (tuple21 b (tuple21 b c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 b (tuple21 b c)))))) (sort
  (set1 (set1 (tuple2 b1 (tuple2 b1 c1)))) (t2tb1168 x))))

(declare-fun tb2t1168 (uni) (set (set (tuple21 b (tuple21 b c)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 b (tuple21 b c))))))
  (! (= (tb2t1168 (t2tb1168 i)) i) :pattern ((t2tb1168 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 b1 (tuple2 b1 c1)))) j)
     (= (t2tb1168 (tb2t1168 j)) j)) :pattern ((t2tb1168 (tb2t1168 j))) )))

;; mem_relation
  (assert
  (forall ((u (set b)) (v (set (tuple21 b c))) (r (set (tuple21 b (tuple21 b
  c)))))
  (= (mem (set1 (tuple2 b1 (tuple2 b1 c1))) (t2tb1139 r)
  (relation (tuple2 b1 c1) b1 (t2tb12 u) (t2tb131 v)))
  (forall ((x b) (y (tuple21 b c)))
  (=> (mem (tuple2 b1 (tuple2 b1 c1))
  (Tuple2 b1 (tuple2 b1 c1) (t2tb14 x) (t2tb134 y)) (t2tb1139 r))
  (and (mem2 x u) (mem8 y v)))))))

;; mem_relation
  (assert
  (forall ((u (set b)) (v (set c)) (r (set (tuple21 b c))))
  (= (mem9 r (relation4 u v))
  (forall ((x b) (y c))
  (=> (mem8 (tb2t134 (Tuple2 b1 c1 (t2tb14 x) (t2tb135 y))) r)
  (and (mem2 x u) (mem7 y v)))))))

(declare-fun t2tb53 ((set (set (tuple21 b (set (tuple21 a b)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 b (set (tuple21 a b))))))) (sort
  (set1 (set1 (tuple2 b1 (set1 (tuple2 a1 b1))))) (t2tb53 x))))

(declare-fun tb2t53 (uni) (set (set (tuple21 b (set (tuple21 a b))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 b (set (tuple21 a b)))))))
  (! (= (tb2t53 (t2tb53 i)) i) :pattern ((t2tb53 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 b1 (set1 (tuple2 a1 b1))))) j)
     (= (t2tb53 (tb2t53 j)) j)) :pattern ((t2tb53 (tb2t53 j))) )))

;; mem_relation
  (assert
  (forall ((u (set b)) (v (set (set (tuple21 a b)))) (r (set (tuple21 b
  (set (tuple21 a b))))))
  (= (mem (set1 (tuple2 b1 (set1 (tuple2 a1 b1)))) (t2tb31 r)
  (relation (set1 (tuple2 a1 b1)) b1 (t2tb12 u) (t2tb10 v)))
  (forall ((x b) (y (set (tuple21 a b))))
  (=> (mem (tuple2 b1 (set1 (tuple2 a1 b1)))
  (Tuple2 b1 (set1 (tuple2 a1 b1)) (t2tb14 x) (t2tb11 y)) (t2tb31 r))
  (and (mem2 x u) (mem4 y v)))))))

(declare-fun t2tb54 ((set (set (tuple21 b (tuple21 a b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 b (tuple21 a b)))))) (sort
  (set1 (set1 (tuple2 b1 (tuple2 a1 b1)))) (t2tb54 x))))

(declare-fun tb2t54 (uni) (set (set (tuple21 b (tuple21 a b)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 b (tuple21 a b))))))
  (! (= (tb2t54 (t2tb54 i)) i) :pattern ((t2tb54 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 b1 (tuple2 a1 b1)))) j)
     (= (t2tb54 (tb2t54 j)) j)) :pattern ((t2tb54 (tb2t54 j))) )))

;; mem_relation
  (assert
  (forall ((u (set b)) (v (set (tuple21 a b))) (r (set (tuple21 b (tuple21 a
  b)))))
  (= (mem (set1 (tuple2 b1 (tuple2 a1 b1))) (t2tb34 r)
  (relation (tuple2 a1 b1) b1 (t2tb12 u) (t2tb11 v)))
  (forall ((x b) (y (tuple21 a b)))
  (=> (mem (tuple2 b1 (tuple2 a1 b1))
  (Tuple2 b1 (tuple2 a1 b1) (t2tb14 x) (t2tb13 y)) (t2tb34 r))
  (and (mem2 x u) (mem3 y v)))))))

(declare-fun t2tb55 ((set (set (tuple21 b b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 b b))))) (sort (set1 (set1 (tuple2 b1 b1)))
  (t2tb55 x))))

(declare-fun tb2t55 (uni) (set (set (tuple21 b b))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 b b)))))
  (! (= (tb2t55 (t2tb55 i)) i) :pattern ((t2tb55 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 b1 b1))) j) (= (t2tb55 (tb2t55 j)) j)) :pattern (
  (t2tb55 (tb2t55 j))) )))

;; mem_relation
  (assert
  (forall ((u (set b)) (v (set b)) (r (set (tuple21 b b))))
  (= (mem (set1 (tuple2 b1 b1)) (t2tb35 r)
  (relation b1 b1 (t2tb12 u) (t2tb12 v)))
  (forall ((x b) (y b))
  (=> (mem (tuple2 b1 b1) (Tuple2 b1 b1 (t2tb14 x) (t2tb14 y)) (t2tb35 r))
  (and (mem2 x u) (mem2 y v)))))))

(declare-fun t2tb2732 ((set (set (tuple21 b (tuple21 a a))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 b (tuple21 a a)))))) (sort
  (set1 (set1 (tuple2 b1 (tuple2 a1 a1)))) (t2tb2732 x))))

(declare-fun tb2t2732 (uni) (set (set (tuple21 b (tuple21 a a)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 b (tuple21 a a))))))
  (! (= (tb2t2732 (t2tb2732 i)) i) :pattern ((t2tb2732 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 b1 (tuple2 a1 a1)))) j)
     (= (t2tb2732 (tb2t2732 j)) j)) :pattern ((t2tb2732 (tb2t2732 j))) )))

;; mem_relation
  (assert
  (forall ((u (set b)) (v (set (tuple21 a a))) (r (set (tuple21 b (tuple21 a
  a)))))
  (= (mem (set1 (tuple2 b1 (tuple2 a1 a1))) (t2tb1084 r)
  (relation (tuple2 a1 a1) b1 (t2tb12 u) (t2tb4 v)))
  (forall ((x b) (y (tuple21 a a)))
  (=> (mem (tuple2 b1 (tuple2 a1 a1))
  (Tuple2 b1 (tuple2 a1 a1) (t2tb14 x) (t2tb5 y)) (t2tb1084 r))
  (and (mem2 x u) (mem12 y v)))))))

(declare-fun t2tb56 ((set (set (tuple21 b a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 b a))))) (sort (set1 (set1 (tuple2 b1 a1)))
  (t2tb56 x))))

(declare-fun tb2t56 (uni) (set (set (tuple21 b a))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 b a)))))
  (! (= (tb2t56 (t2tb56 i)) i) :pattern ((t2tb56 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 b1 a1))) j) (= (t2tb56 (tb2t56 j)) j)) :pattern (
  (t2tb56 (tb2t56 j))) )))

;; mem_relation
  (assert
  (forall ((u (set b)) (v (set a)) (r (set (tuple21 b a))))
  (= (mem (set1 (tuple2 b1 a1)) (t2tb37 r)
  (relation a1 b1 (t2tb12 u) (t2tb1 v)))
  (forall ((x b) (y a))
  (=> (mem (tuple2 b1 a1) (Tuple2 b1 a1 (t2tb14 x) (t2tb2 y)) (t2tb37 r))
  (and (mem2 x u) (mem1 y v)))))))

;; mem_relation
  (assert
  (forall ((b2 ty))
  (forall ((u (set b)) (v uni) (r uni))
  (and
  (=> (mem (set1 (tuple2 b1 b2)) r (relation b2 b1 (t2tb12 u) v))
  (forall ((x b) (y uni))
  (=> (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) y) r)
  (and (mem2 x u) (mem b2 y v)))))
  (=>
  (forall ((x b) (y uni))
  (=> (sort b2 y)
  (=> (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) y) r)
  (and (mem2 x u) (mem b2 y v))))) (mem (set1 (tuple2 b1 b2)) r
  (relation b2 b1 (t2tb12 u) v)))))))

(declare-fun t2tb5554 ((set (set (tuple21 (tuple21 a a) (tuple21 (tuple21 a
  b) (tuple21 a c)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a a) (tuple21 (tuple21 a b)
  (tuple21 a c))))))) (sort
  (set1
  (set1 (tuple2 (tuple2 a1 a1) (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)))))
  (t2tb5554 x))))

(declare-fun tb2t5554 (uni) (set (set (tuple21 (tuple21 a a)
  (tuple21 (tuple21 a b) (tuple21 a c))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a a) (tuple21 (tuple21 a b)
  (tuple21 a c)))))))
  (! (= (tb2t5554 (t2tb5554 i)) i) :pattern ((t2tb5554 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (set1 (tuple2 (tuple2 a1 a1) (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)))))
     j) (= (t2tb5554 (tb2t5554 j)) j)) :pattern ((t2tb5554 (tb2t5554 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a a))) (v (set (tuple21 (tuple21 a b) (tuple21 a
  c)))) (r (set (tuple21 (tuple21 a a) (tuple21 (tuple21 a b) (tuple21 a
  c))))))
  (= (mem
  (set1 (tuple2 (tuple2 a1 a1) (tuple2 (tuple2 a1 b1) (tuple2 a1 c1))))
  (t2tb5523 r)
  (relation (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) (tuple2 a1 a1) (t2tb4 u)
  (t2tb238 v)))
  (forall ((x (tuple21 a a)) (y (tuple21 (tuple21 a b) (tuple21 a c))))
  (=> (mem (tuple2 (tuple2 a1 a1) (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)))
  (Tuple2 (tuple2 a1 a1) (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) (t2tb5 x)
  (t2tb239 y)) (t2tb5523 r)) (and (mem12 x u) (mem51 y v)))))))

(declare-fun t2tb5555 ((set (set (tuple21 (tuple21 a a) (tuple21 a
  c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a a) (tuple21 a c)))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 a1) (tuple2 a1 c1)))) (t2tb5555 x))))

(declare-fun tb2t5555 (uni) (set (set (tuple21 (tuple21 a a) (tuple21 a
  c)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a a) (tuple21 a c))))))
  (! (= (tb2t5555 (t2tb5555 i)) i) :pattern ((t2tb5555 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 a1) (tuple2 a1 c1)))) j)
     (= (t2tb5555 (tb2t5555 j)) j)) :pattern ((t2tb5555 (tb2t5555 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a a))) (v (set (tuple21 a c)))
  (r (set (tuple21 (tuple21 a a) (tuple21 a c)))))
  (= (mem (set1 (tuple2 (tuple2 a1 a1) (tuple2 a1 c1))) (t2tb5526 r)
  (relation (tuple2 a1 c1) (tuple2 a1 a1) (t2tb4 u) (t2tb129 v)))
  (forall ((x (tuple21 a a)) (y (tuple21 a c)))
  (=> (mem (tuple2 (tuple2 a1 a1) (tuple2 a1 c1))
  (Tuple2 (tuple2 a1 a1) (tuple2 a1 c1) (t2tb5 x) (t2tb133 y)) (t2tb5526 r))
  (and (mem12 x u) (mem10 y v)))))))

(declare-fun t2tb5556 ((set (set (tuple21 (tuple21 a a) (set (tuple21 b
  c)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a a) (set (tuple21 b c))))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 a1) (set1 (tuple2 b1 c1))))) (t2tb5556 x))))

(declare-fun tb2t5556 (uni) (set (set (tuple21 (tuple21 a a) (set (tuple21 b
  c))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a a) (set (tuple21 b c)))))))
  (! (= (tb2t5556 (t2tb5556 i)) i) :pattern ((t2tb5556 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 a1) (set1 (tuple2 b1 c1))))) j)
     (= (t2tb5556 (tb2t5556 j)) j)) :pattern ((t2tb5556 (tb2t5556 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a a))) (v (set (set (tuple21 b c))))
  (r (set (tuple21 (tuple21 a a) (set (tuple21 b c))))))
  (= (mem (set1 (tuple2 (tuple2 a1 a1) (set1 (tuple2 b1 c1)))) (t2tb5527 r)
  (relation (set1 (tuple2 b1 c1)) (tuple2 a1 a1) (t2tb4 u) (t2tb130 v)))
  (forall ((x (tuple21 a a)) (y (set (tuple21 b c))))
  (=> (mem (tuple2 (tuple2 a1 a1) (set1 (tuple2 b1 c1)))
  (Tuple2 (tuple2 a1 a1) (set1 (tuple2 b1 c1)) (t2tb5 x) (t2tb131 y))
  (t2tb5527 r)) (and (mem12 x u) (mem9 y v)))))))

(declare-fun t2tb5557 ((set (set (tuple21 (tuple21 a a) (tuple21 b
  c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a a) (tuple21 b c)))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 a1) (tuple2 b1 c1)))) (t2tb5557 x))))

(declare-fun tb2t5557 (uni) (set (set (tuple21 (tuple21 a a) (tuple21 b
  c)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a a) (tuple21 b c))))))
  (! (= (tb2t5557 (t2tb5557 i)) i) :pattern ((t2tb5557 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 a1) (tuple2 b1 c1)))) j)
     (= (t2tb5557 (tb2t5557 j)) j)) :pattern ((t2tb5557 (tb2t5557 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a a))) (v (set (tuple21 b c)))
  (r (set (tuple21 (tuple21 a a) (tuple21 b c)))))
  (= (mem (set1 (tuple2 (tuple2 a1 a1) (tuple2 b1 c1))) (t2tb347 r)
  (relation (tuple2 b1 c1) (tuple2 a1 a1) (t2tb4 u) (t2tb131 v)))
  (forall ((x (tuple21 a a)) (y (tuple21 b c)))
  (=> (mem (tuple2 (tuple2 a1 a1) (tuple2 b1 c1))
  (Tuple2 (tuple2 a1 a1) (tuple2 b1 c1) (t2tb5 x) (t2tb134 y)) (t2tb347 r))
  (and (mem12 x u) (mem8 y v)))))))

(declare-fun t2tb5558 ((set (set (tuple21 (tuple21 a a) c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a a) c))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 a1) c1))) (t2tb5558 x))))

(declare-fun tb2t5558 (uni) (set (set (tuple21 (tuple21 a a) c))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a a) c)))))
  (! (= (tb2t5558 (t2tb5558 i)) i) :pattern ((t2tb5558 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 a1) c1))) j)
     (= (t2tb5558 (tb2t5558 j)) j)) :pattern ((t2tb5558 (tb2t5558 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a a))) (v (set c)) (r (set (tuple21 (tuple21 a a)
  c))))
  (= (mem (set1 (tuple2 (tuple2 a1 a1) c1)) (t2tb5529 r)
  (relation c1 (tuple2 a1 a1) (t2tb4 u) (t2tb132 v)))
  (forall ((x (tuple21 a a)) (y c))
  (=> (mem (tuple2 (tuple2 a1 a1) c1)
  (Tuple2 (tuple2 a1 a1) c1 (t2tb5 x) (t2tb135 y)) (t2tb5529 r))
  (and (mem12 x u) (mem7 y v)))))))

(declare-fun t2tb5069 ((set (set (tuple21 (tuple21 a a) (set (tuple21 a
  b)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a a) (set (tuple21 a b))))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 a1) (set1 (tuple2 a1 b1))))) (t2tb5069 x))))

(declare-fun tb2t5069 (uni) (set (set (tuple21 (tuple21 a a) (set (tuple21 a
  b))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a a) (set (tuple21 a b)))))))
  (! (= (tb2t5069 (t2tb5069 i)) i) :pattern ((t2tb5069 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 a1) (set1 (tuple2 a1 b1))))) j)
     (= (t2tb5069 (tb2t5069 j)) j)) :pattern ((t2tb5069 (tb2t5069 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a a))) (v (set (set (tuple21 a b))))
  (r (set (tuple21 (tuple21 a a) (set (tuple21 a b))))))
  (= (mem (set1 (tuple2 (tuple2 a1 a1) (set1 (tuple2 a1 b1)))) (t2tb5064 r)
  (relation (set1 (tuple2 a1 b1)) (tuple2 a1 a1) (t2tb4 u) (t2tb10 v)))
  (forall ((x (tuple21 a a)) (y (set (tuple21 a b))))
  (=> (mem (tuple2 (tuple2 a1 a1) (set1 (tuple2 a1 b1)))
  (Tuple2 (tuple2 a1 a1) (set1 (tuple2 a1 b1)) (t2tb5 x) (t2tb11 y))
  (t2tb5064 r)) (and (mem12 x u) (mem4 y v)))))))

(declare-fun t2tb2734 ((set (set (tuple21 (tuple21 a a) (tuple21 a
  b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a a) (tuple21 a b)))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 a1) (tuple2 a1 b1)))) (t2tb2734 x))))

(declare-fun tb2t2734 (uni) (set (set (tuple21 (tuple21 a a) (tuple21 a
  b)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a a) (tuple21 a b))))))
  (! (= (tb2t2734 (t2tb2734 i)) i) :pattern ((t2tb2734 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 a1) (tuple2 a1 b1)))) j)
     (= (t2tb2734 (tb2t2734 j)) j)) :pattern ((t2tb2734 (tb2t2734 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a a))) (v (set (tuple21 a b)))
  (r (set (tuple21 (tuple21 a a) (tuple21 a b)))))
  (= (mem (set1 (tuple2 (tuple2 a1 a1) (tuple2 a1 b1))) (t2tb2720 r)
  (relation (tuple2 a1 b1) (tuple2 a1 a1) (t2tb4 u) (t2tb11 v)))
  (forall ((x (tuple21 a a)) (y (tuple21 a b)))
  (=> (mem (tuple2 (tuple2 a1 a1) (tuple2 a1 b1))
  (Tuple2 (tuple2 a1 a1) (tuple2 a1 b1) (t2tb5 x) (t2tb13 y)) (t2tb2720 r))
  (and (mem12 x u) (mem3 y v)))))))

(declare-fun t2tb2735 ((set (set (tuple21 (tuple21 a a) b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a a) b))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 a1) b1))) (t2tb2735 x))))

(declare-fun tb2t2735 (uni) (set (set (tuple21 (tuple21 a a) b))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a a) b)))))
  (! (= (tb2t2735 (t2tb2735 i)) i) :pattern ((t2tb2735 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 a1) b1))) j)
     (= (t2tb2735 (tb2t2735 j)) j)) :pattern ((t2tb2735 (tb2t2735 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a a))) (v (set b)) (r (set (tuple21 (tuple21 a a)
  b))))
  (= (mem (set1 (tuple2 (tuple2 a1 a1) b1)) (t2tb2722 r)
  (relation b1 (tuple2 a1 a1) (t2tb4 u) (t2tb12 v)))
  (forall ((x (tuple21 a a)) (y b))
  (=> (mem (tuple2 (tuple2 a1 a1) b1)
  (Tuple2 (tuple2 a1 a1) b1 (t2tb5 x) (t2tb14 y)) (t2tb2722 r))
  (and (mem12 x u) (mem2 y v)))))))

(declare-fun t2tb2736 ((set (set (tuple21 (tuple21 a a) (tuple21 a
  a))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a a) (tuple21 a a)))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 a1) (tuple2 a1 a1)))) (t2tb2736 x))))

(declare-fun tb2t2736 (uni) (set (set (tuple21 (tuple21 a a) (tuple21 a
  a)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a a) (tuple21 a a))))))
  (! (= (tb2t2736 (t2tb2736 i)) i) :pattern ((t2tb2736 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 a1) (tuple2 a1 a1)))) j)
     (= (t2tb2736 (tb2t2736 j)) j)) :pattern ((t2tb2736 (tb2t2736 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a a))) (v (set (tuple21 a a)))
  (r (set (tuple21 (tuple21 a a) (tuple21 a a)))))
  (= (mem (set1 (tuple2 (tuple2 a1 a1) (tuple2 a1 a1))) (t2tb2724 r)
  (relation (tuple2 a1 a1) (tuple2 a1 a1) (t2tb4 u) (t2tb4 v)))
  (forall ((x (tuple21 a a)) (y (tuple21 a a)))
  (=> (mem (tuple2 (tuple2 a1 a1) (tuple2 a1 a1))
  (Tuple2 (tuple2 a1 a1) (tuple2 a1 a1) (t2tb5 x) (t2tb5 y)) (t2tb2724 r))
  (and (mem12 x u) (mem12 y v)))))))

(declare-fun t2tb2737 ((set (set (tuple21 (tuple21 a a) a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a a) a))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 a1) a1))) (t2tb2737 x))))

(declare-fun tb2t2737 (uni) (set (set (tuple21 (tuple21 a a) a))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a a) a)))))
  (! (= (tb2t2737 (t2tb2737 i)) i) :pattern ((t2tb2737 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 a1) a1))) j)
     (= (t2tb2737 (tb2t2737 j)) j)) :pattern ((t2tb2737 (tb2t2737 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a a))) (v (set a)) (r (set (tuple21 (tuple21 a a)
  a))))
  (= (mem (set1 (tuple2 (tuple2 a1 a1) a1)) (t2tb2727 r)
  (relation a1 (tuple2 a1 a1) (t2tb4 u) (t2tb1 v)))
  (forall ((x (tuple21 a a)) (y a))
  (=> (mem (tuple2 (tuple2 a1 a1) a1)
  (Tuple2 (tuple2 a1 a1) a1 (t2tb5 x) (t2tb2 y)) (t2tb2727 r))
  (and (mem12 x u) (mem1 y v)))))))

;; mem_relation
  (assert
  (forall ((b2 ty))
  (forall ((u (set (tuple21 a a))) (v uni) (r uni))
  (and
  (=> (mem (set1 (tuple2 (tuple2 a1 a1) b2)) r
  (relation b2 (tuple2 a1 a1) (t2tb4 u) v))
  (forall ((x (tuple21 a a)) (y uni))
  (=> (mem (tuple2 (tuple2 a1 a1) b2) (Tuple2 (tuple2 a1 a1) b2 (t2tb5 x) y)
  r) (and (mem12 x u) (mem b2 y v)))))
  (=>
  (forall ((x (tuple21 a a)) (y uni))
  (=> (sort b2 y)
  (=> (mem (tuple2 (tuple2 a1 a1) b2) (Tuple2 (tuple2 a1 a1) b2 (t2tb5 x) y)
  r) (and (mem12 x u) (mem b2 y v))))) (mem (set1 (tuple2 (tuple2 a1 a1) b2))
  r (relation b2 (tuple2 a1 a1) (t2tb4 u) v)))))))

(declare-fun t2tb5559 ((set (set (tuple21 a (tuple21 (tuple21 a b) (tuple21 a
  c)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 a (tuple21 (tuple21 a b) (tuple21 a c)))))))
  (sort (set1 (set1 (tuple2 a1 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)))))
  (t2tb5559 x))))

(declare-fun tb2t5559 (uni) (set (set (tuple21 a (tuple21 (tuple21 a b)
  (tuple21 a c))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 a (tuple21 (tuple21 a b) (tuple21 a c)))))))
  (! (= (tb2t5559 (t2tb5559 i)) i) :pattern ((t2tb5559 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 a1 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1))))) j)
     (= (t2tb5559 (tb2t5559 j)) j)) :pattern ((t2tb5559 (tb2t5559 j))) )))

;; mem_relation
  (assert
  (forall ((u (set a)) (v (set (tuple21 (tuple21 a b) (tuple21 a c))))
  (r (set (tuple21 a (tuple21 (tuple21 a b) (tuple21 a c))))))
  (= (mem (set1 (tuple2 a1 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1))))
  (t2tb5531 r)
  (relation (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) a1 (t2tb1 u) (t2tb238 v)))
  (forall ((x a) (y (tuple21 (tuple21 a b) (tuple21 a c))))
  (=> (mem (tuple2 a1 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)))
  (Tuple2 a1 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) (t2tb2 x) (t2tb239 y))
  (t2tb5531 r)) (and (mem1 x u) (mem51 y v)))))))

(declare-fun t2tb325 ((set (set (tuple21 a (tuple21 a c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 a (tuple21 a c)))))) (sort
  (set1 (set1 (tuple2 a1 (tuple2 a1 c1)))) (t2tb325 x))))

(declare-fun tb2t325 (uni) (set (set (tuple21 a (tuple21 a c)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 a (tuple21 a c))))))
  (! (= (tb2t325 (t2tb325 i)) i) :pattern ((t2tb325 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 a1 (tuple2 a1 c1)))) j)
     (= (t2tb325 (tb2t325 j)) j)) :pattern ((t2tb325 (tb2t325 j))) )))

;; mem_relation
  (assert
  (forall ((u (set a)) (v (set (tuple21 a c))) (r (set (tuple21 a (tuple21 a
  c)))))
  (= (mem (set1 (tuple2 a1 (tuple2 a1 c1))) (t2tb256 r)
  (relation (tuple2 a1 c1) a1 (t2tb1 u) (t2tb129 v)))
  (forall ((x a) (y (tuple21 a c)))
  (=> (mem (tuple2 a1 (tuple2 a1 c1))
  (Tuple2 a1 (tuple2 a1 c1) (t2tb2 x) (t2tb133 y)) (t2tb256 r))
  (and (mem1 x u) (mem10 y v)))))))

(declare-fun t2tb1169 ((set (set (tuple21 a (set (tuple21 b c)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 a (set (tuple21 b c))))))) (sort
  (set1 (set1 (tuple2 a1 (set1 (tuple2 b1 c1))))) (t2tb1169 x))))

(declare-fun tb2t1169 (uni) (set (set (tuple21 a (set (tuple21 b c))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 a (set (tuple21 b c)))))))
  (! (= (tb2t1169 (t2tb1169 i)) i) :pattern ((t2tb1169 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 a1 (set1 (tuple2 b1 c1))))) j)
     (= (t2tb1169 (tb2t1169 j)) j)) :pattern ((t2tb1169 (tb2t1169 j))) )))

;; mem_relation
  (assert
  (forall ((u (set a)) (v (set (set (tuple21 b c)))) (r (set (tuple21 a
  (set (tuple21 b c))))))
  (= (mem (set1 (tuple2 a1 (set1 (tuple2 b1 c1)))) (t2tb1141 r)
  (relation (set1 (tuple2 b1 c1)) a1 (t2tb1 u) (t2tb130 v)))
  (forall ((x a) (y (set (tuple21 b c))))
  (=> (mem (tuple2 a1 (set1 (tuple2 b1 c1)))
  (Tuple2 a1 (set1 (tuple2 b1 c1)) (t2tb2 x) (t2tb131 y)) (t2tb1141 r))
  (and (mem1 x u) (mem9 y v)))))))

(declare-fun t2tb327 ((set (set (tuple21 a (tuple21 b c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 a (tuple21 b c)))))) (sort
  (set1 (set1 (tuple2 a1 (tuple2 b1 c1)))) (t2tb327 x))))

(declare-fun tb2t327 (uni) (set (set (tuple21 a (tuple21 b c)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 a (tuple21 b c))))))
  (! (= (tb2t327 (t2tb327 i)) i) :pattern ((t2tb327 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 a1 (tuple2 b1 c1)))) j)
     (= (t2tb327 (tb2t327 j)) j)) :pattern ((t2tb327 (tb2t327 j))) )))

;; mem_relation
  (assert
  (forall ((u (set a)) (v (set (tuple21 b c))) (r (set (tuple21 a (tuple21 b
  c)))))
  (= (mem (set1 (tuple2 a1 (tuple2 b1 c1))) (t2tb261 r)
  (relation (tuple2 b1 c1) a1 (t2tb1 u) (t2tb131 v)))
  (forall ((x a) (y (tuple21 b c)))
  (=> (mem (tuple2 a1 (tuple2 b1 c1))
  (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 y)) (t2tb261 r))
  (and (mem1 x u) (mem8 y v)))))))

;; mem_relation
  (assert
  (forall ((u (set a)) (v (set c)) (r (set (tuple21 a c))))
  (= (mem (set1 (tuple2 a1 c1)) (t2tb129 r)
  (relation c1 a1 (t2tb1 u) (t2tb132 v)))
  (forall ((x a) (y c))
  (=> (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y))) r)
  (and (mem1 x u) (mem7 y v)))))))

(declare-fun t2tb57 ((set (set (tuple21 a (set (tuple21 a b)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 a (set (tuple21 a b))))))) (sort
  (set1 (set1 (tuple2 a1 (set1 (tuple2 a1 b1))))) (t2tb57 x))))

(declare-fun tb2t57 (uni) (set (set (tuple21 a (set (tuple21 a b))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 a (set (tuple21 a b)))))))
  (! (= (tb2t57 (t2tb57 i)) i) :pattern ((t2tb57 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 a1 (set1 (tuple2 a1 b1))))) j)
     (= (t2tb57 (tb2t57 j)) j)) :pattern ((t2tb57 (tb2t57 j))) )))

;; mem_relation
  (assert
  (forall ((u (set a)) (v (set (set (tuple21 a b)))) (r (set (tuple21 a
  (set (tuple21 a b))))))
  (= (mem (set1 (tuple2 a1 (set1 (tuple2 a1 b1)))) (t2tb39 r)
  (relation (set1 (tuple2 a1 b1)) a1 (t2tb1 u) (t2tb10 v)))
  (forall ((x a) (y (set (tuple21 a b))))
  (=> (mem (tuple2 a1 (set1 (tuple2 a1 b1)))
  (Tuple2 a1 (set1 (tuple2 a1 b1)) (t2tb2 x) (t2tb11 y)) (t2tb39 r))
  (and (mem1 x u) (mem4 y v)))))))

(declare-fun t2tb58 ((set (set (tuple21 a (tuple21 a b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 a (tuple21 a b)))))) (sort
  (set1 (set1 (tuple2 a1 (tuple2 a1 b1)))) (t2tb58 x))))

(declare-fun tb2t58 (uni) (set (set (tuple21 a (tuple21 a b)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 a (tuple21 a b))))))
  (! (= (tb2t58 (t2tb58 i)) i) :pattern ((t2tb58 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 a1 (tuple2 a1 b1)))) j)
     (= (t2tb58 (tb2t58 j)) j)) :pattern ((t2tb58 (tb2t58 j))) )))

;; mem_relation
  (assert
  (forall ((u (set a)) (v (set (tuple21 a b))) (r (set (tuple21 a (tuple21 a
  b)))))
  (= (mem (set1 (tuple2 a1 (tuple2 a1 b1))) (t2tb41 r)
  (relation (tuple2 a1 b1) a1 (t2tb1 u) (t2tb11 v)))
  (forall ((x a) (y (tuple21 a b)))
  (=> (mem (tuple2 a1 (tuple2 a1 b1))
  (Tuple2 a1 (tuple2 a1 b1) (t2tb2 x) (t2tb13 y)) (t2tb41 r))
  (and (mem1 x u) (mem3 y v)))))))

;; mem_relation
  (assert
  (forall ((u (set a)) (v (set b)) (r (set (tuple21 a b))))
  (= (mem4 r (relation1 u v))
  (forall ((x a) (y b))
  (=> (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y))) r)
  (and (mem1 x u) (mem2 y v)))))))

(declare-fun t2tb2738 ((set (set (tuple21 a (tuple21 a a))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 a (tuple21 a a)))))) (sort
  (set1 (set1 (tuple2 a1 (tuple2 a1 a1)))) (t2tb2738 x))))

(declare-fun tb2t2738 (uni) (set (set (tuple21 a (tuple21 a a)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 a (tuple21 a a))))))
  (! (= (tb2t2738 (t2tb2738 i)) i) :pattern ((t2tb2738 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 a1 (tuple2 a1 a1)))) j)
     (= (t2tb2738 (tb2t2738 j)) j)) :pattern ((t2tb2738 (tb2t2738 j))) )))

;; mem_relation
  (assert
  (forall ((u (set a)) (v (set (tuple21 a a))) (r (set (tuple21 a (tuple21 a
  a)))))
  (= (mem (set1 (tuple2 a1 (tuple2 a1 a1))) (t2tb2728 r)
  (relation (tuple2 a1 a1) a1 (t2tb1 u) (t2tb4 v)))
  (forall ((x a) (y (tuple21 a a)))
  (=> (mem (tuple2 a1 (tuple2 a1 a1))
  (Tuple2 a1 (tuple2 a1 a1) (t2tb2 x) (t2tb5 y)) (t2tb2728 r))
  (and (mem1 x u) (mem12 y v)))))))

;; mem_relation
  (assert
  (forall ((u (set a)) (v (set a)) (r (set (tuple21 a a))))
  (= (mem (set1 (tuple2 a1 a1)) (t2tb4 r)
  (relation a1 a1 (t2tb1 u) (t2tb1 v)))
  (forall ((x a) (y a))
  (=> (mem12 (tb2t5 (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y))) r)
  (and (mem1 x u) (mem1 y v)))))))

;; mem_relation
  (assert
  (forall ((b2 ty))
  (forall ((u (set a)) (v uni) (r uni))
  (and
  (=> (mem (set1 (tuple2 a1 b2)) r (relation b2 a1 (t2tb1 u) v))
  (forall ((x a) (y uni))
  (=> (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) y) r)
  (and (mem1 x u) (mem b2 y v)))))
  (=>
  (forall ((x a) (y uni))
  (=> (sort b2 y)
  (=> (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) y) r)
  (and (mem1 x u) (mem b2 y v))))) (mem (set1 (tuple2 a1 b2)) r
  (relation b2 a1 (t2tb1 u) v)))))))

;; mem_relation
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((u uni) (v uni) (r uni))
  (and
  (=> (mem (set1 (tuple2 a2 b2)) r (relation b2 a2 u v))
  (forall ((x uni) (y uni))
  (=> (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) r)
  (and (mem a2 x u) (mem b2 y v)))))
  (=>
  (forall ((x uni) (y uni))
  (=> (sort a2 x)
  (=> (sort b2 y)
  (=> (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) r)
  (and (mem a2 x u) (mem b2 y v)))))) (mem (set1 (tuple2 a2 b2)) r
  (relation b2 a2 u v)))))))

(declare-fun inverse (ty ty uni) uni)

;; inverse_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni)) (sort (set1 (tuple2 b2 a2)) (inverse b2 a2 x)))))

;; mem_inverse
  (assert
  (forall ((p (set (tuple21 (tuple21 a c) (tuple21 a b)))) (x (tuple21 a b))
  (y (tuple21 a c)))
  (= (mem51
  (tb2t239 (Tuple2 (tuple2 a1 b1) (tuple2 a1 c1) (t2tb13 x) (t2tb133 y)))
  (tb2t238 (inverse (tuple2 a1 b1) (tuple2 a1 c1) (t2tb166 p)))) (mem
  (tuple2 (tuple2 a1 c1) (tuple2 a1 b1))
  (Tuple2 (tuple2 a1 c1) (tuple2 a1 b1) (t2tb133 y) (t2tb13 x)) (t2tb166 p)))))

;; mem_inverse
  (assert
  (forall ((p (set (tuple21 c b))) (x b) (y c))
  (= (mem8 (tb2t134 (Tuple2 b1 c1 (t2tb14 x) (t2tb135 y)))
  (tb2t131 (inverse b1 c1 (t2tb222 p)))) (mem (tuple2 c1 b1)
  (Tuple2 c1 b1 (t2tb135 y) (t2tb14 x)) (t2tb222 p)))))

;; mem_inverse
  (assert
  (forall ((p (set (tuple21 c a))) (x a) (y c))
  (= (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y)))
  (tb2t129 (inverse a1 c1 (t2tb224 p)))) (mem (tuple2 c1 a1)
  (Tuple2 c1 a1 (t2tb135 y) (t2tb2 x)) (t2tb224 p)))))

;; mem_inverse
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) (tuple21 a c)))) (x (tuple21 a c))
  (y (tuple21 a b)))
  (= (mem (tuple2 (tuple2 a1 c1) (tuple2 a1 b1))
  (Tuple2 (tuple2 a1 c1) (tuple2 a1 b1) (t2tb133 x) (t2tb13 y))
  (inverse (tuple2 a1 c1) (tuple2 a1 b1) (t2tb238 p))) (mem51
  (tb2t239 (Tuple2 (tuple2 a1 b1) (tuple2 a1 c1) (t2tb13 y) (t2tb133 x))) p))))

;; mem_inverse
  (assert
  (forall ((p (set (tuple21 b c))) (x c) (y b))
  (= (mem (tuple2 c1 b1) (Tuple2 c1 b1 (t2tb135 x) (t2tb14 y))
  (inverse c1 b1 (t2tb131 p))) (mem8
  (tb2t134 (Tuple2 b1 c1 (t2tb14 y) (t2tb135 x))) p))))

;; mem_inverse
  (assert
  (forall ((p (set (tuple21 b a))) (x a) (y b))
  (= (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y)))
  (tb2t11 (inverse a1 b1 (t2tb37 p)))) (mem (tuple2 b1 a1)
  (Tuple2 b1 a1 (t2tb14 y) (t2tb2 x)) (t2tb37 p)))))

;; mem_inverse
  (assert
  (forall ((p (set (tuple21 a c))) (x c) (y a))
  (= (mem (tuple2 c1 a1) (Tuple2 c1 a1 (t2tb135 x) (t2tb2 y))
  (inverse c1 a1 (t2tb129 p))) (mem10
  (tb2t133 (Tuple2 a1 c1 (t2tb2 y) (t2tb135 x))) p))))

;; mem_inverse
  (assert
  (forall ((p (set (tuple21 a b))) (x b) (y a))
  (= (mem (tuple2 b1 a1) (Tuple2 b1 a1 (t2tb14 x) (t2tb2 y))
  (inverse b1 a1 (t2tb11 p))) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 y) (t2tb14 x))) p))))

;; mem_inverse
  (assert
  (forall ((p (set (tuple21 a a))) (x a) (y a))
  (= (mem12 (tb2t5 (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y)))
  (tb2t4 (inverse a1 a1 (t2tb4 p)))) (mem12
  (tb2t5 (Tuple2 a1 a1 (t2tb2 y) (t2tb2 x))) p))))

;; mem_inverse
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((p uni) (x uni) (y uni))
  (= (mem (tuple2 b2 a2) (Tuple2 b2 a2 x y) (inverse b2 a2 p)) (mem
  (tuple2 a2 b2) (Tuple2 a2 b2 y x) p)))))

(declare-fun dom (ty ty uni) uni)

;; dom_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni)) (sort (set1 a2) (dom b2 a2 x)))))

;; mem_dom
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (x (tuple21 (tuple21 a b) (tuple21 a c))))
  (and
  (=> (mem51 x (tb2t238 (dom b2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) p)))
  (exists ((b3 uni))
  (and (sort b2 b3) (mem (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) b2)
  (Tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) b2 (t2tb239 x) b3) p))))
  (=>
  (exists ((b3 uni)) (mem (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) b2)
  (Tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) b2 (t2tb239 x) b3) p))
  (mem51 x (tb2t238 (dom b2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) p))))))))

;; mem_dom
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (x (tuple21 a c)))
  (and
  (=> (mem10 x (tb2t129 (dom b2 (tuple2 a1 c1) p)))
  (exists ((b3 uni))
  (and (sort b2 b3) (mem (tuple2 (tuple2 a1 c1) b2)
  (Tuple2 (tuple2 a1 c1) b2 (t2tb133 x) b3) p))))
  (=>
  (exists ((b3 uni)) (mem (tuple2 (tuple2 a1 c1) b2)
  (Tuple2 (tuple2 a1 c1) b2 (t2tb133 x) b3) p)) (mem10 x
  (tb2t129 (dom b2 (tuple2 a1 c1) p))))))))

;; mem_dom
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (x (set (tuple21 b c))))
  (and
  (=> (mem9 x (tb2t130 (dom b2 (set1 (tuple2 b1 c1)) p)))
  (exists ((b3 uni))
  (and (sort b2 b3) (mem (tuple2 (set1 (tuple2 b1 c1)) b2)
  (Tuple2 (set1 (tuple2 b1 c1)) b2 (t2tb131 x) b3) p))))
  (=>
  (exists ((b3 uni)) (mem (tuple2 (set1 (tuple2 b1 c1)) b2)
  (Tuple2 (set1 (tuple2 b1 c1)) b2 (t2tb131 x) b3) p)) (mem9 x
  (tb2t130 (dom b2 (set1 (tuple2 b1 c1)) p))))))))

;; mem_dom
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (x (tuple21 b c)))
  (and
  (=> (mem8 x (tb2t131 (dom b2 (tuple2 b1 c1) p)))
  (exists ((b3 uni))
  (and (sort b2 b3) (mem (tuple2 (tuple2 b1 c1) b2)
  (Tuple2 (tuple2 b1 c1) b2 (t2tb134 x) b3) p))))
  (=>
  (exists ((b3 uni)) (mem (tuple2 (tuple2 b1 c1) b2)
  (Tuple2 (tuple2 b1 c1) b2 (t2tb134 x) b3) p)) (mem8 x
  (tb2t131 (dom b2 (tuple2 b1 c1) p))))))))

;; mem_dom
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (x c))
  (and
  (=> (mem7 x (tb2t132 (dom b2 c1 p)))
  (exists ((b3 uni))
  (and (sort b2 b3) (mem (tuple2 c1 b2) (Tuple2 c1 b2 (t2tb135 x) b3) p))))
  (=>
  (exists ((b3 uni)) (mem (tuple2 c1 b2) (Tuple2 c1 b2 (t2tb135 x) b3) p))
  (mem7 x (tb2t132 (dom b2 c1 p))))))))

;; mem_dom
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (x (set (tuple21 a b))))
  (and
  (=> (mem4 x (tb2t10 (dom b2 (set1 (tuple2 a1 b1)) p)))
  (exists ((b3 uni))
  (and (sort b2 b3) (mem (tuple2 (set1 (tuple2 a1 b1)) b2)
  (Tuple2 (set1 (tuple2 a1 b1)) b2 (t2tb11 x) b3) p))))
  (=>
  (exists ((b3 uni)) (mem (tuple2 (set1 (tuple2 a1 b1)) b2)
  (Tuple2 (set1 (tuple2 a1 b1)) b2 (t2tb11 x) b3) p)) (mem4 x
  (tb2t10 (dom b2 (set1 (tuple2 a1 b1)) p))))))))

;; mem_dom
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) (tuple21 a c)))) (x (tuple21 a b)))
  (= (mem3 x (tb2t11 (dom (tuple2 a1 c1) (tuple2 a1 b1) (t2tb238 p))))
  (exists ((b2 (tuple21 a c))) (mem51
  (tb2t239 (Tuple2 (tuple2 a1 b1) (tuple2 a1 c1) (t2tb13 x) (t2tb133 b2)))
  p)))))

;; mem_dom
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (x (tuple21 a b)))
  (and
  (=> (mem3 x (tb2t11 (dom b2 (tuple2 a1 b1) p)))
  (exists ((b3 uni))
  (and (sort b2 b3) (mem (tuple2 (tuple2 a1 b1) b2)
  (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) b3) p))))
  (=>
  (exists ((b3 uni)) (mem (tuple2 (tuple2 a1 b1) b2)
  (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) b3) p)) (mem3 x
  (tb2t11 (dom b2 (tuple2 a1 b1) p))))))))

;; mem_dom
  (assert
  (forall ((p (set (tuple21 b c))) (x b))
  (= (mem2 x (tb2t12 (dom c1 b1 (t2tb131 p))))
  (exists ((b2 c)) (mem8 (tb2t134 (Tuple2 b1 c1 (t2tb14 x) (t2tb135 b2))) p)))))

;; mem_dom
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (x b))
  (and
  (=> (mem2 x (tb2t12 (dom b2 b1 p)))
  (exists ((b3 uni))
  (and (sort b2 b3) (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) b3) p))))
  (=> (exists ((b3 uni)) (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) b3) p))
  (mem2 x (tb2t12 (dom b2 b1 p))))))))

;; mem_dom
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (x (tuple21 a a)))
  (and
  (=> (mem12 x (tb2t4 (dom b2 (tuple2 a1 a1) p)))
  (exists ((b3 uni))
  (and (sort b2 b3) (mem (tuple2 (tuple2 a1 a1) b2)
  (Tuple2 (tuple2 a1 a1) b2 (t2tb5 x) b3) p))))
  (=>
  (exists ((b3 uni)) (mem (tuple2 (tuple2 a1 a1) b2)
  (Tuple2 (tuple2 a1 a1) b2 (t2tb5 x) b3) p)) (mem12 x
  (tb2t4 (dom b2 (tuple2 a1 a1) p))))))))

;; mem_dom
  (assert
  (forall ((p (set (tuple21 a c))) (x a))
  (= (mem1 x (tb2t1 (dom c1 a1 (t2tb129 p))))
  (exists ((b2 c)) (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 b2))) p)))))

;; mem_dom
  (assert
  (forall ((p (set (tuple21 a b))) (x a))
  (= (mem1 x (tb2t1 (dom b1 a1 (t2tb11 p))))
  (exists ((b2 b)) (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 b2))) p)))))

;; mem_dom
  (assert
  (forall ((p (set (tuple21 a a))) (x a))
  (= (mem1 x (tb2t1 (dom a1 a1 (t2tb4 p))))
  (exists ((b2 a)) (mem12 (tb2t5 (Tuple2 a1 a1 (t2tb2 x) (t2tb2 b2))) p)))))

;; mem_dom
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (x a))
  (and
  (=> (mem1 x (tb2t1 (dom b2 a1 p)))
  (exists ((b3 uni))
  (and (sort b2 b3) (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) b3) p))))
  (=> (exists ((b3 uni)) (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) b3) p))
  (mem1 x (tb2t1 (dom b2 a1 p))))))))

;; mem_dom
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((p uni) (x uni))
  (and
  (=> (mem a2 x (dom b2 a2 p))
  (exists ((b3 uni))
  (and (sort b2 b3) (mem (tuple2 a2 b2) (Tuple2 a2 b2 x b3) p))))
  (=> (exists ((b3 uni)) (mem (tuple2 a2 b2) (Tuple2 a2 b2 x b3) p)) (mem a2
  x (dom b2 a2 p)))))))

(declare-fun ran (ty ty uni) uni)

;; ran_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni)) (sort (set1 b2) (ran b2 a2 x)))))

;; mem_ran
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (x (tuple21 (tuple21 a b) (tuple21 a c))))
  (and
  (=> (mem51 x (tb2t238 (ran (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) a2 p)))
  (exists ((a3 uni))
  (and (sort a2 a3) (mem (tuple2 a2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)))
  (Tuple2 a2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) a3 (t2tb239 x)) p))))
  (=>
  (exists ((a3 uni)) (mem (tuple2 a2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)))
  (Tuple2 a2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) a3 (t2tb239 x)) p))
  (mem51 x (tb2t238 (ran (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) a2 p))))))))

;; mem_ran
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (x (tuple21 a c)))
  (and
  (=> (mem10 x (tb2t129 (ran (tuple2 a1 c1) a2 p)))
  (exists ((a3 uni))
  (and (sort a2 a3) (mem (tuple2 a2 (tuple2 a1 c1))
  (Tuple2 a2 (tuple2 a1 c1) a3 (t2tb133 x)) p))))
  (=>
  (exists ((a3 uni)) (mem (tuple2 a2 (tuple2 a1 c1))
  (Tuple2 a2 (tuple2 a1 c1) a3 (t2tb133 x)) p)) (mem10 x
  (tb2t129 (ran (tuple2 a1 c1) a2 p))))))))

;; mem_ran
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (x (set (tuple21 b c))))
  (and
  (=> (mem9 x (tb2t130 (ran (set1 (tuple2 b1 c1)) a2 p)))
  (exists ((a3 uni))
  (and (sort a2 a3) (mem (tuple2 a2 (set1 (tuple2 b1 c1)))
  (Tuple2 a2 (set1 (tuple2 b1 c1)) a3 (t2tb131 x)) p))))
  (=>
  (exists ((a3 uni)) (mem (tuple2 a2 (set1 (tuple2 b1 c1)))
  (Tuple2 a2 (set1 (tuple2 b1 c1)) a3 (t2tb131 x)) p)) (mem9 x
  (tb2t130 (ran (set1 (tuple2 b1 c1)) a2 p))))))))

;; mem_ran
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (x (tuple21 b c)))
  (and
  (=> (mem8 x (tb2t131 (ran (tuple2 b1 c1) a2 p)))
  (exists ((a3 uni))
  (and (sort a2 a3) (mem (tuple2 a2 (tuple2 b1 c1))
  (Tuple2 a2 (tuple2 b1 c1) a3 (t2tb134 x)) p))))
  (=>
  (exists ((a3 uni)) (mem (tuple2 a2 (tuple2 b1 c1))
  (Tuple2 a2 (tuple2 b1 c1) a3 (t2tb134 x)) p)) (mem8 x
  (tb2t131 (ran (tuple2 b1 c1) a2 p))))))))

;; mem_ran
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (x c))
  (and
  (=> (mem7 x (tb2t132 (ran c1 a2 p)))
  (exists ((a3 uni))
  (and (sort a2 a3) (mem (tuple2 a2 c1) (Tuple2 a2 c1 a3 (t2tb135 x)) p))))
  (=>
  (exists ((a3 uni)) (mem (tuple2 a2 c1) (Tuple2 a2 c1 a3 (t2tb135 x)) p))
  (mem7 x (tb2t132 (ran c1 a2 p))))))))

;; mem_ran
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (x (set (tuple21 a b))))
  (and
  (=> (mem4 x (tb2t10 (ran (set1 (tuple2 a1 b1)) a2 p)))
  (exists ((a3 uni))
  (and (sort a2 a3) (mem (tuple2 a2 (set1 (tuple2 a1 b1)))
  (Tuple2 a2 (set1 (tuple2 a1 b1)) a3 (t2tb11 x)) p))))
  (=>
  (exists ((a3 uni)) (mem (tuple2 a2 (set1 (tuple2 a1 b1)))
  (Tuple2 a2 (set1 (tuple2 a1 b1)) a3 (t2tb11 x)) p)) (mem4 x
  (tb2t10 (ran (set1 (tuple2 a1 b1)) a2 p))))))))

;; mem_ran
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (x (tuple21 a b)))
  (and
  (=> (mem3 x (tb2t11 (ran (tuple2 a1 b1) a2 p)))
  (exists ((a3 uni))
  (and (sort a2 a3) (mem (tuple2 a2 (tuple2 a1 b1))
  (Tuple2 a2 (tuple2 a1 b1) a3 (t2tb13 x)) p))))
  (=>
  (exists ((a3 uni)) (mem (tuple2 a2 (tuple2 a1 b1))
  (Tuple2 a2 (tuple2 a1 b1) a3 (t2tb13 x)) p)) (mem3 x
  (tb2t11 (ran (tuple2 a1 b1) a2 p))))))))

;; mem_ran
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (x b))
  (and
  (=> (mem2 x (tb2t12 (ran b1 a2 p)))
  (exists ((a3 uni))
  (and (sort a2 a3) (mem (tuple2 a2 b1) (Tuple2 a2 b1 a3 (t2tb14 x)) p))))
  (=> (exists ((a3 uni)) (mem (tuple2 a2 b1) (Tuple2 a2 b1 a3 (t2tb14 x)) p))
  (mem2 x (tb2t12 (ran b1 a2 p))))))))

;; mem_ran
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (x (tuple21 a a)))
  (and
  (=> (mem12 x (tb2t4 (ran (tuple2 a1 a1) a2 p)))
  (exists ((a3 uni))
  (and (sort a2 a3) (mem (tuple2 a2 (tuple2 a1 a1))
  (Tuple2 a2 (tuple2 a1 a1) a3 (t2tb5 x)) p))))
  (=>
  (exists ((a3 uni)) (mem (tuple2 a2 (tuple2 a1 a1))
  (Tuple2 a2 (tuple2 a1 a1) a3 (t2tb5 x)) p)) (mem12 x
  (tb2t4 (ran (tuple2 a1 a1) a2 p))))))))

;; mem_ran
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (x a))
  (and
  (=> (mem1 x (tb2t1 (ran a1 a2 p)))
  (exists ((a3 uni))
  (and (sort a2 a3) (mem (tuple2 a2 a1) (Tuple2 a2 a1 a3 (t2tb2 x)) p))))
  (=> (exists ((a3 uni)) (mem (tuple2 a2 a1) (Tuple2 a2 a1 a3 (t2tb2 x)) p))
  (mem1 x (tb2t1 (ran a1 a2 p))))))))

;; mem_ran
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) (tuple21 a c)))) (x (tuple21 a c)))
  (= (mem10 x (tb2t129 (ran (tuple2 a1 c1) (tuple2 a1 b1) (t2tb238 p))))
  (exists ((a2 (tuple21 a b))) (mem51
  (tb2t239 (Tuple2 (tuple2 a1 b1) (tuple2 a1 c1) (t2tb13 a2) (t2tb133 x)))
  p)))))

;; mem_ran
  (assert
  (forall ((p (set (tuple21 b c))) (x c))
  (= (mem7 x (tb2t132 (ran c1 b1 (t2tb131 p))))
  (exists ((a2 b)) (mem8 (tb2t134 (Tuple2 b1 c1 (t2tb14 a2) (t2tb135 x))) p)))))

;; mem_ran
  (assert
  (forall ((p (set (tuple21 a c))) (x c))
  (= (mem7 x (tb2t132 (ran c1 a1 (t2tb129 p))))
  (exists ((a2 a)) (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 a2) (t2tb135 x))) p)))))

;; mem_ran
  (assert
  (forall ((p (set (tuple21 a b))) (x b))
  (= (mem2 x (tb2t12 (ran b1 a1 (t2tb11 p))))
  (exists ((a2 a)) (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 a2) (t2tb14 x))) p)))))

;; mem_ran
  (assert
  (forall ((p (set (tuple21 a a))) (x a))
  (= (mem1 x (tb2t1 (ran a1 a1 (t2tb4 p))))
  (exists ((a2 a)) (mem12 (tb2t5 (Tuple2 a1 a1 (t2tb2 a2) (t2tb2 x))) p)))))

;; mem_ran
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((p uni) (x uni))
  (and
  (=> (mem b2 x (ran b2 a2 p))
  (exists ((a3 uni))
  (and (sort a2 a3) (mem (tuple2 a2 b2) (Tuple2 a2 b2 a3 x) p))))
  (=> (exists ((a3 uni)) (mem (tuple2 a2 b2) (Tuple2 a2 b2 a3 x) p)) (mem b2
  x (ran b2 a2 p)))))))

(declare-fun semicolon (ty ty ty uni uni) uni)

;; semicolon_sort
  (assert
  (forall ((a2 ty) (b2 ty) (c2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (tuple2 a2 c2))
  (semicolon c2 b2 a2 x x1)))))

(declare-fun semicolon2 ((set (tuple21 a a)) (set (tuple21 a
  a))) (set (tuple21 a a)))

(declare-fun semicolon4 ((set (tuple21 a a)) (set (tuple21 a
  b))) (set (tuple21 a b)))

(declare-fun semicolon24 ((set (tuple21 a a)) (set (tuple21 a
  c))) (set (tuple21 a c)))

(declare-fun semicolon1 ((set (tuple21 a b)) (set (tuple21 b
  c))) (set (tuple21 a c)))

;; mem_semicolon
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (q (set (tuple21 (tuple21 a b) (tuple21 a c)))) (x uni)
  (y (tuple21 a c)))
  (= (mem (tuple2 a2 (tuple2 a1 c1)) (Tuple2 a2 (tuple2 a1 c1) x (t2tb133 y))
  (semicolon (tuple2 a1 c1) (tuple2 a1 b1) a2 p (t2tb238 q)))
  (exists ((b2 (tuple21 a b)))
  (and (mem (tuple2 a2 (tuple2 a1 b1))
  (Tuple2 a2 (tuple2 a1 b1) x (t2tb13 b2)) p) (mem51
  (tb2t239 (Tuple2 (tuple2 a1 b1) (tuple2 a1 c1) (t2tb13 b2) (t2tb133 y)))
  q)))))))

;; mem_semicolon
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (q (set (tuple21 b c))) (x uni) (y c))
  (= (mem (tuple2 a2 c1) (Tuple2 a2 c1 x (t2tb135 y))
  (semicolon c1 b1 a2 p (t2tb131 q)))
  (exists ((b2 b))
  (and (mem (tuple2 a2 b1) (Tuple2 a2 b1 x (t2tb14 b2)) p) (mem8
  (tb2t134 (Tuple2 b1 c1 (t2tb14 b2) (t2tb135 y))) q)))))))

;; mem_semicolon
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (q (set (tuple21 a c))) (x uni) (y c))
  (= (mem (tuple2 a2 c1) (Tuple2 a2 c1 x (t2tb135 y))
  (semicolon c1 a1 a2 p (t2tb129 q)))
  (exists ((b2 a))
  (and (mem (tuple2 a2 a1) (Tuple2 a2 a1 x (t2tb2 b2)) p) (mem10
  (tb2t133 (Tuple2 a1 c1 (t2tb2 b2) (t2tb135 y))) q)))))))

;; mem_semicolon
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (q (set (tuple21 a b))) (x uni) (y b))
  (= (mem (tuple2 a2 b1) (Tuple2 a2 b1 x (t2tb14 y))
  (semicolon b1 a1 a2 p (t2tb11 q)))
  (exists ((b2 a))
  (and (mem (tuple2 a2 a1) (Tuple2 a2 a1 x (t2tb2 b2)) p) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 b2) (t2tb14 y))) q)))))))

;; mem_semicolon
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (q (set (tuple21 a a))) (x uni) (y a))
  (= (mem (tuple2 a2 a1) (Tuple2 a2 a1 x (t2tb2 y))
  (semicolon a1 a1 a2 p (t2tb4 q)))
  (exists ((b2 a))
  (and (mem (tuple2 a2 a1) (Tuple2 a2 a1 x (t2tb2 b2)) p) (mem12
  (tb2t5 (Tuple2 a1 a1 (t2tb2 b2) (t2tb2 y))) q)))))))

;; mem_semicolon
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (q uni) (x (tuple21 a b)) (y (tuple21 a c)))
  (and
  (=> (mem51
  (tb2t239 (Tuple2 (tuple2 a1 b1) (tuple2 a1 c1) (t2tb13 x) (t2tb133 y)))
  (tb2t238 (semicolon (tuple2 a1 c1) b2 (tuple2 a1 b1) p q)))
  (exists ((b3 uni))
  (and (sort b2 b3)
  (and (mem (tuple2 (tuple2 a1 b1) b2)
  (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) b3) p) (mem (tuple2 b2 (tuple2 a1 c1))
  (Tuple2 b2 (tuple2 a1 c1) b3 (t2tb133 y)) q)))))
  (=>
  (exists ((b3 uni))
  (and (mem (tuple2 (tuple2 a1 b1) b2)
  (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) b3) p) (mem (tuple2 b2 (tuple2 a1 c1))
  (Tuple2 b2 (tuple2 a1 c1) b3 (t2tb133 y)) q))) (mem51
  (tb2t239 (Tuple2 (tuple2 a1 b1) (tuple2 a1 c1) (t2tb13 x) (t2tb133 y)))
  (tb2t238 (semicolon (tuple2 a1 c1) b2 (tuple2 a1 b1) p q))))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) (tuple21 a c))))
  (q (set (tuple21 (tuple21 a c) (tuple21 a c)))) (x (tuple21 a b))
  (y (tuple21 a c)))
  (= (mem51
  (tb2t239 (Tuple2 (tuple2 a1 b1) (tuple2 a1 c1) (t2tb13 x) (t2tb133 y)))
  (tb2t238
  (semicolon (tuple2 a1 c1) (tuple2 a1 c1) (tuple2 a1 b1) (t2tb238 p)
  (t2tb157 q))))
  (exists ((b2 (tuple21 a c)))
  (and (mem51
  (tb2t239 (Tuple2 (tuple2 a1 b1) (tuple2 a1 c1) (t2tb13 x) (t2tb133 b2))) p)
  (mem (tuple2 (tuple2 a1 c1) (tuple2 a1 c1))
  (Tuple2 (tuple2 a1 c1) (tuple2 a1 c1) (t2tb133 b2) (t2tb133 y))
  (t2tb157 q)))))))

;; mem_semicolon
  (assert
  (forall ((c2 ty))
  (forall ((p (set (tuple21 (tuple21 a b) (tuple21 a c)))) (q uni)
  (x (tuple21 a b)) (y uni))
  (= (mem (tuple2 (tuple2 a1 b1) c2) (Tuple2 (tuple2 a1 b1) c2 (t2tb13 x) y)
  (semicolon c2 (tuple2 a1 c1) (tuple2 a1 b1) (t2tb238 p) q))
  (exists ((b2 (tuple21 a c)))
  (and (mem51
  (tb2t239 (Tuple2 (tuple2 a1 b1) (tuple2 a1 c1) (t2tb13 x) (t2tb133 b2))) p)
  (mem (tuple2 (tuple2 a1 c1) c2) (Tuple2 (tuple2 a1 c1) c2 (t2tb133 b2) y)
  q)))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) (tuple21 a b))))
  (q (set (tuple21 (tuple21 a b) (tuple21 a c)))) (x (tuple21 a b))
  (y (tuple21 a c)))
  (= (mem51
  (tb2t239 (Tuple2 (tuple2 a1 b1) (tuple2 a1 c1) (t2tb13 x) (t2tb133 y)))
  (tb2t238
  (semicolon (tuple2 a1 c1) (tuple2 a1 b1) (tuple2 a1 b1) (t2tb25 p)
  (t2tb238 q))))
  (exists ((b2 (tuple21 a b)))
  (and (mem (tuple2 (tuple2 a1 b1) (tuple2 a1 b1))
  (Tuple2 (tuple2 a1 b1) (tuple2 a1 b1) (t2tb13 x) (t2tb13 b2)) (t2tb25 p))
  (mem51
  (tb2t239 (Tuple2 (tuple2 a1 b1) (tuple2 a1 c1) (t2tb13 b2) (t2tb133 y)))
  q))))))

;; mem_semicolon
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (q uni) (x b) (y c))
  (and
  (=> (mem8 (tb2t134 (Tuple2 b1 c1 (t2tb14 x) (t2tb135 y)))
  (tb2t131 (semicolon c1 b2 b1 p q)))
  (exists ((b3 uni))
  (and (sort b2 b3)
  (and (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) b3) p) (mem
  (tuple2 b2 c1) (Tuple2 b2 c1 b3 (t2tb135 y)) q)))))
  (=>
  (exists ((b3 uni))
  (and (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) b3) p) (mem
  (tuple2 b2 c1) (Tuple2 b2 c1 b3 (t2tb135 y)) q))) (mem8
  (tb2t134 (Tuple2 b1 c1 (t2tb14 x) (t2tb135 y)))
  (tb2t131 (semicolon c1 b2 b1 p q))))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 b c))) (q (set (tuple21 c c))) (x b) (y c))
  (= (mem8 (tb2t134 (Tuple2 b1 c1 (t2tb14 x) (t2tb135 y)))
  (tb2t131 (semicolon c1 c1 b1 (t2tb131 p) (t2tb216 q))))
  (exists ((b2 c))
  (and (mem8 (tb2t134 (Tuple2 b1 c1 (t2tb14 x) (t2tb135 b2))) p) (mem
  (tuple2 c1 c1) (Tuple2 c1 c1 (t2tb135 b2) (t2tb135 y)) (t2tb216 q)))))))

;; mem_semicolon
  (assert
  (forall ((c2 ty))
  (forall ((p (set (tuple21 b c))) (q uni) (x b) (y uni))
  (= (mem (tuple2 b1 c2) (Tuple2 b1 c2 (t2tb14 x) y)
  (semicolon c2 c1 b1 (t2tb131 p) q))
  (exists ((b2 c))
  (and (mem8 (tb2t134 (Tuple2 b1 c1 (t2tb14 x) (t2tb135 b2))) p) (mem
  (tuple2 c1 c2) (Tuple2 c1 c2 (t2tb135 b2) y) q)))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 b b))) (q (set (tuple21 b c))) (x b) (y c))
  (= (mem8 (tb2t134 (Tuple2 b1 c1 (t2tb14 x) (t2tb135 y)))
  (tb2t131 (semicolon c1 b1 b1 (t2tb35 p) (t2tb131 q))))
  (exists ((b2 b))
  (and (mem (tuple2 b1 b1) (Tuple2 b1 b1 (t2tb14 x) (t2tb14 b2)) (t2tb35 p))
  (mem8 (tb2t134 (Tuple2 b1 c1 (t2tb14 b2) (t2tb135 y))) q))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 b a))) (q (set (tuple21 a c))) (x b) (y c))
  (= (mem8 (tb2t134 (Tuple2 b1 c1 (t2tb14 x) (t2tb135 y)))
  (tb2t131 (semicolon c1 a1 b1 (t2tb37 p) (t2tb129 q))))
  (exists ((b2 a))
  (and (mem (tuple2 b1 a1) (Tuple2 b1 a1 (t2tb14 x) (t2tb2 b2)) (t2tb37 p))
  (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 b2) (t2tb135 y))) q))))))

;; mem_semicolon
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (q uni) (x a) (y c))
  (and
  (=> (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y)))
  (tb2t129 (semicolon c1 b2 a1 p q)))
  (exists ((b3 uni))
  (and (sort b2 b3)
  (and (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) b3) p) (mem (tuple2 b2 c1)
  (Tuple2 b2 c1 b3 (t2tb135 y)) q)))))
  (=>
  (exists ((b3 uni))
  (and (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) b3) p) (mem (tuple2 b2 c1)
  (Tuple2 b2 c1 b3 (t2tb135 y)) q))) (mem10
  (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y)))
  (tb2t129 (semicolon c1 b2 a1 p q))))))))

;; mem_semicolon
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (q uni) (x a) (y b))
  (and
  (=> (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y)))
  (tb2t11 (semicolon b1 b2 a1 p q)))
  (exists ((b3 uni))
  (and (sort b2 b3)
  (and (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) b3) p) (mem (tuple2 b2 b1)
  (Tuple2 b2 b1 b3 (t2tb14 y)) q)))))
  (=>
  (exists ((b3 uni))
  (and (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) b3) p) (mem (tuple2 b2 b1)
  (Tuple2 b2 b1 b3 (t2tb14 y)) q))) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y)))
  (tb2t11 (semicolon b1 b2 a1 p q))))))))

;; mem_semicolon
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (q uni) (x a) (y a))
  (and
  (=> (mem12 (tb2t5 (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y)))
  (tb2t4 (semicolon a1 b2 a1 p q)))
  (exists ((b3 uni))
  (and (sort b2 b3)
  (and (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) b3) p) (mem (tuple2 b2 a1)
  (Tuple2 b2 a1 b3 (t2tb2 y)) q)))))
  (=>
  (exists ((b3 uni))
  (and (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) b3) p) (mem (tuple2 b2 a1)
  (Tuple2 b2 a1 b3 (t2tb2 y)) q))) (mem12
  (tb2t5 (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y)))
  (tb2t4 (semicolon a1 b2 a1 p q))))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 a c))) (q (set (tuple21 c c))) (x a) (y c))
  (= (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y)))
  (tb2t129 (semicolon c1 c1 a1 (t2tb129 p) (t2tb216 q))))
  (exists ((b2 c))
  (and (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 b2))) p) (mem
  (tuple2 c1 c1) (Tuple2 c1 c1 (t2tb135 b2) (t2tb135 y)) (t2tb216 q)))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 a c))) (q (set (tuple21 c b))) (x a) (y b))
  (= (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y)))
  (tb2t11 (semicolon b1 c1 a1 (t2tb129 p) (t2tb222 q))))
  (exists ((b2 c))
  (and (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 b2))) p) (mem
  (tuple2 c1 b1) (Tuple2 c1 b1 (t2tb135 b2) (t2tb14 y)) (t2tb222 q)))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 a c))) (q (set (tuple21 c a))) (x a) (y a))
  (= (mem12 (tb2t5 (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y)))
  (tb2t4 (semicolon a1 c1 a1 (t2tb129 p) (t2tb224 q))))
  (exists ((b2 c))
  (and (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 b2))) p) (mem
  (tuple2 c1 a1) (Tuple2 c1 a1 (t2tb135 b2) (t2tb2 y)) (t2tb224 q)))))))

;; mem_semicolon
  (assert
  (forall ((c2 ty))
  (forall ((p (set (tuple21 a c))) (q uni) (x a) (y uni))
  (= (mem (tuple2 a1 c2) (Tuple2 a1 c2 (t2tb2 x) y)
  (semicolon c2 c1 a1 (t2tb129 p) q))
  (exists ((b2 c))
  (and (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 b2))) p) (mem
  (tuple2 c1 c2) (Tuple2 c1 c2 (t2tb135 b2) y) q)))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 a b))) (q (set (tuple21 b c))) (x a) (y c))
  (= (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y))) (semicolon1 p q))
  (exists ((b2 b))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 b2))) p) (mem8
  (tb2t134 (Tuple2 b1 c1 (t2tb14 b2) (t2tb135 y))) q))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 a b))) (q (set (tuple21 b b))) (x a) (y b))
  (= (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y)))
  (tb2t11 (semicolon b1 b1 a1 (t2tb11 p) (t2tb35 q))))
  (exists ((b2 b))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 b2))) p) (mem
  (tuple2 b1 b1) (Tuple2 b1 b1 (t2tb14 b2) (t2tb14 y)) (t2tb35 q)))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 a b))) (q (set (tuple21 b a))) (x a) (y a))
  (= (mem12 (tb2t5 (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y)))
  (tb2t4 (semicolon a1 b1 a1 (t2tb11 p) (t2tb37 q))))
  (exists ((b2 b))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 b2))) p) (mem
  (tuple2 b1 a1) (Tuple2 b1 a1 (t2tb14 b2) (t2tb2 y)) (t2tb37 q)))))))

;; mem_semicolon
  (assert
  (forall ((c2 ty))
  (forall ((p (set (tuple21 a b))) (q uni) (x a) (y uni))
  (= (mem (tuple2 a1 c2) (Tuple2 a1 c2 (t2tb2 x) y)
  (semicolon c2 b1 a1 (t2tb11 p) q))
  (exists ((b2 b))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 b2))) p) (mem
  (tuple2 b1 c2) (Tuple2 b1 c2 (t2tb14 b2) y) q)))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 a a))) (q (set (tuple21 a c))) (x a) (y c))
  (= (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y))) (semicolon24 p q))
  (exists ((b2 a))
  (and (mem12 (tb2t5 (Tuple2 a1 a1 (t2tb2 x) (t2tb2 b2))) p) (mem10
  (tb2t133 (Tuple2 a1 c1 (t2tb2 b2) (t2tb135 y))) q))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 a a))) (q (set (tuple21 a b))) (x a) (y b))
  (= (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y))) (semicolon4 p q))
  (exists ((b2 a))
  (and (mem12 (tb2t5 (Tuple2 a1 a1 (t2tb2 x) (t2tb2 b2))) p) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 b2) (t2tb14 y))) q))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 a a))) (q (set (tuple21 a a))) (x a) (y a))
  (= (mem12 (tb2t5 (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y))) (semicolon2 p q))
  (exists ((b2 a))
  (and (mem12 (tb2t5 (Tuple2 a1 a1 (t2tb2 x) (t2tb2 b2))) p) (mem12
  (tb2t5 (Tuple2 a1 a1 (t2tb2 b2) (t2tb2 y))) q))))))

;; mem_semicolon
  (assert
  (forall ((c2 ty))
  (forall ((p (set (tuple21 a a))) (q uni) (x a) (y uni))
  (= (mem (tuple2 a1 c2) (Tuple2 a1 c2 (t2tb2 x) y)
  (semicolon c2 a1 a1 (t2tb4 p) q))
  (exists ((b2 a))
  (and (mem12 (tb2t5 (Tuple2 a1 a1 (t2tb2 x) (t2tb2 b2))) p) (mem
  (tuple2 a1 c2) (Tuple2 a1 c2 (t2tb2 b2) y) q)))))))

;; mem_semicolon
  (assert
  (forall ((a2 ty) (b2 ty) (c2 ty))
  (forall ((p uni) (q uni) (x uni) (y uni))
  (and
  (=> (mem (tuple2 a2 c2) (Tuple2 a2 c2 x y) (semicolon c2 b2 a2 p q))
  (exists ((b3 uni))
  (and (sort b2 b3)
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x b3) p) (mem (tuple2 b2 c2)
  (Tuple2 b2 c2 b3 y) q)))))
  (=>
  (exists ((b3 uni))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x b3) p) (mem (tuple2 b2 c2)
  (Tuple2 b2 c2 b3 y) q))) (mem (tuple2 a2 c2) (Tuple2 a2 c2 x y)
  (semicolon c2 b2 a2 p q)))))))

(declare-fun semicolon_back (ty ty ty uni uni) uni)

;; semicolon_back_sort
  (assert
  (forall ((a2 ty) (b2 ty) (c2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (tuple2 a2 c2))
  (semicolon_back c2 b2 a2 x x1)))))

;; semicolon_back
  (assert
  (forall ((p (set (tuple21 a b))) (q (set (tuple21 b c))))
  (= (tb2t129 (semicolon_back c1 b1 a1 (t2tb131 q) (t2tb11 p))) (semicolon1 p
                                                                q))))

;; semicolon_back
  (assert
  (forall ((p (set (tuple21 a a))) (q (set (tuple21 a c))))
  (= (tb2t129 (semicolon_back c1 a1 a1 (t2tb129 q) (t2tb4 p))) (semicolon24 p
                                                               q))))

;; semicolon_back
  (assert
  (forall ((p (set (tuple21 a a))) (q (set (tuple21 a b))))
  (= (tb2t11 (semicolon_back b1 a1 a1 (t2tb11 q) (t2tb4 p))) (semicolon4 p q))))

;; semicolon_back
  (assert
  (forall ((p (set (tuple21 a a))) (q (set (tuple21 a a))))
  (= (tb2t4 (semicolon_back a1 a1 a1 (t2tb4 q) (t2tb4 p))) (semicolon2 p q))))

;; semicolon_back
  (assert
  (forall ((a2 ty) (b2 ty) (c2 ty))
  (forall ((p uni) (q uni))
  (= (semicolon_back c2 b2 a2 q p) (semicolon c2 b2 a2 p q)))))

(declare-fun id (ty uni) uni)

;; id_sort
  (assert
  (forall ((a2 ty))
  (forall ((x uni)) (sort (set1 (tuple2 a2 a2)) (id a2 x)))))

(declare-fun id1 ((set a)) (set (tuple21 a a)))

;; mem_id
  (assert
  (forall ((u (set (tuple21 (tuple21 a b) (tuple21 a c))))
  (x (tuple21 (tuple21 a b) (tuple21 a c))) (y (tuple21 (tuple21 a b)
  (tuple21 a c))))
  (= (mem
  (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1))
  (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)))
  (Tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1))
  (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) (t2tb239 x) (t2tb239 y))
  (id (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) (t2tb238 u)))
  (and (mem51 x u) (= x y)))))

;; mem_id
  (assert
  (forall ((u (set (tuple21 a c))) (x (tuple21 a c)) (y (tuple21 a c)))
  (= (mem (tuple2 (tuple2 a1 c1) (tuple2 a1 c1))
  (Tuple2 (tuple2 a1 c1) (tuple2 a1 c1) (t2tb133 x) (t2tb133 y))
  (id (tuple2 a1 c1) (t2tb129 u))) (and (mem10 x u) (= x y)))))

;; mem_id
  (assert
  (forall ((u (set (set (tuple21 b c)))) (x (set (tuple21 b c)))
  (y (set (tuple21 b c))))
  (= (mem (tuple2 (set1 (tuple2 b1 c1)) (set1 (tuple2 b1 c1)))
  (Tuple2 (set1 (tuple2 b1 c1)) (set1 (tuple2 b1 c1)) (t2tb131 x)
  (t2tb131 y)) (id (set1 (tuple2 b1 c1)) (t2tb130 u)))
  (and (mem9 x u) (= x y)))))

;; mem_id
  (assert
  (forall ((u (set (tuple21 b c))) (x (tuple21 b c)) (y (tuple21 b c)))
  (= (mem (tuple2 (tuple2 b1 c1) (tuple2 b1 c1))
  (Tuple2 (tuple2 b1 c1) (tuple2 b1 c1) (t2tb134 x) (t2tb134 y))
  (id (tuple2 b1 c1) (t2tb131 u))) (and (mem8 x u) (= x y)))))

;; mem_id
  (assert
  (forall ((u (set c)) (x c) (y c))
  (= (mem (tuple2 c1 c1) (Tuple2 c1 c1 (t2tb135 x) (t2tb135 y))
  (id c1 (t2tb132 u))) (and (mem7 x u) (= x y)))))

;; mem_id
  (assert
  (forall ((u (set (set (tuple21 a b)))) (x (set (tuple21 a b)))
  (y (set (tuple21 a b))))
  (= (mem (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1)))
  (Tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1)) (t2tb11 x) (t2tb11 y))
  (id (set1 (tuple2 a1 b1)) (t2tb10 u))) (and (mem4 x u) (= x y)))))

;; mem_id
  (assert
  (forall ((u (set (tuple21 a b))) (x (tuple21 a b)) (y (tuple21 a b)))
  (= (mem (tuple2 (tuple2 a1 b1) (tuple2 a1 b1))
  (Tuple2 (tuple2 a1 b1) (tuple2 a1 b1) (t2tb13 x) (t2tb13 y))
  (id (tuple2 a1 b1) (t2tb11 u))) (and (mem3 x u) (= x y)))))

;; mem_id
  (assert
  (forall ((u (set b)) (x b) (y b))
  (= (mem (tuple2 b1 b1) (Tuple2 b1 b1 (t2tb14 x) (t2tb14 y))
  (id b1 (t2tb12 u))) (and (mem2 x u) (= x y)))))

;; mem_id
  (assert
  (forall ((u (set (tuple21 a a))) (x (tuple21 a a)) (y (tuple21 a a)))
  (= (mem (tuple2 (tuple2 a1 a1) (tuple2 a1 a1))
  (Tuple2 (tuple2 a1 a1) (tuple2 a1 a1) (t2tb5 x) (t2tb5 y))
  (id (tuple2 a1 a1) (t2tb4 u))) (and (mem12 x u) (= x y)))))

;; mem_id
  (assert
  (forall ((u (set a)) (x a) (y a))
  (= (mem12 (tb2t5 (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y))) (id1 u))
  (and (mem1 x u) (= x y)))))

;; mem_id
  (assert
  (forall ((a2 ty))
  (forall ((u uni) (x uni) (y uni))
  (=> (sort a2 x)
  (=> (sort a2 y)
  (= (mem (tuple2 a2 a2) (Tuple2 a2 a2 x y) (id a2 u))
  (and (mem a2 x u) (= x y))))))))

(declare-fun domain_restriction (ty ty uni uni) uni)

;; domain_restriction_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (tuple2 a2 b2))
  (domain_restriction b2 a2 x x1)))))

;; mem_domain_restriction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (tuple21 (tuple21 a b) (tuple21 a c))))
  (x (tuple21 (tuple21 a b) (tuple21 a c))) (y uni))
  (= (mem (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) b2)
  (Tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) b2 (t2tb239 x) y)
  (domain_restriction b2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) (t2tb238 s)
  p))
  (and (mem (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) b2)
  (Tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) b2 (t2tb239 x) y) p) (mem51
  x s))))))

;; mem_domain_restriction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (tuple21 a c))) (x (tuple21 a c)) (y uni))
  (= (mem (tuple2 (tuple2 a1 c1) b2) (Tuple2 (tuple2 a1 c1) b2 (t2tb133 x) y)
  (domain_restriction b2 (tuple2 a1 c1) (t2tb129 s) p))
  (and (mem (tuple2 (tuple2 a1 c1) b2)
  (Tuple2 (tuple2 a1 c1) b2 (t2tb133 x) y) p) (mem10 x s))))))

;; mem_domain_restriction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (set (tuple21 b c)))) (x (set (tuple21 b c)))
  (y uni))
  (= (mem (tuple2 (set1 (tuple2 b1 c1)) b2)
  (Tuple2 (set1 (tuple2 b1 c1)) b2 (t2tb131 x) y)
  (domain_restriction b2 (set1 (tuple2 b1 c1)) (t2tb130 s) p))
  (and (mem (tuple2 (set1 (tuple2 b1 c1)) b2)
  (Tuple2 (set1 (tuple2 b1 c1)) b2 (t2tb131 x) y) p) (mem9 x s))))))

;; mem_domain_restriction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (tuple21 b c))) (x (tuple21 b c)) (y uni))
  (= (mem (tuple2 (tuple2 b1 c1) b2) (Tuple2 (tuple2 b1 c1) b2 (t2tb134 x) y)
  (domain_restriction b2 (tuple2 b1 c1) (t2tb131 s) p))
  (and (mem (tuple2 (tuple2 b1 c1) b2)
  (Tuple2 (tuple2 b1 c1) b2 (t2tb134 x) y) p) (mem8 x s))))))

;; mem_domain_restriction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set c)) (x c) (y uni))
  (= (mem (tuple2 c1 b2) (Tuple2 c1 b2 (t2tb135 x) y)
  (domain_restriction b2 c1 (t2tb132 s) p))
  (and (mem (tuple2 c1 b2) (Tuple2 c1 b2 (t2tb135 x) y) p) (mem7 x s))))))

;; mem_domain_restriction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (set (tuple21 a b)))) (x (set (tuple21 a b)))
  (y uni))
  (= (mem (tuple2 (set1 (tuple2 a1 b1)) b2)
  (Tuple2 (set1 (tuple2 a1 b1)) b2 (t2tb11 x) y)
  (domain_restriction b2 (set1 (tuple2 a1 b1)) (t2tb10 s) p))
  (and (mem (tuple2 (set1 (tuple2 a1 b1)) b2)
  (Tuple2 (set1 (tuple2 a1 b1)) b2 (t2tb11 x) y) p) (mem4 x s))))))

;; mem_domain_restriction
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) (tuple21 a c)))) (s (set (tuple21 a
  b))) (x (tuple21 a b)) (y (tuple21 a c)))
  (= (mem51
  (tb2t239 (Tuple2 (tuple2 a1 b1) (tuple2 a1 c1) (t2tb13 x) (t2tb133 y)))
  (tb2t238
  (domain_restriction (tuple2 a1 c1) (tuple2 a1 b1) (t2tb11 s) (t2tb238 p))))
  (and (mem51
  (tb2t239 (Tuple2 (tuple2 a1 b1) (tuple2 a1 c1) (t2tb13 x) (t2tb133 y))) p)
  (mem3 x s)))))

;; mem_domain_restriction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (tuple21 a b))) (x (tuple21 a b)) (y uni))
  (= (mem (tuple2 (tuple2 a1 b1) b2) (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) y)
  (domain_restriction b2 (tuple2 a1 b1) (t2tb11 s) p))
  (and (mem (tuple2 (tuple2 a1 b1) b2)
  (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) y) p) (mem3 x s))))))

;; mem_domain_restriction
  (assert
  (forall ((p (set (tuple21 b c))) (s (set b)) (x b) (y c))
  (= (mem8 (tb2t134 (Tuple2 b1 c1 (t2tb14 x) (t2tb135 y)))
  (tb2t131 (domain_restriction c1 b1 (t2tb12 s) (t2tb131 p))))
  (and (mem8 (tb2t134 (Tuple2 b1 c1 (t2tb14 x) (t2tb135 y))) p) (mem2 x s)))))

;; mem_domain_restriction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set b)) (x b) (y uni))
  (= (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) y)
  (domain_restriction b2 b1 (t2tb12 s) p))
  (and (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) y) p) (mem2 x s))))))

;; mem_domain_restriction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (tuple21 a a))) (x (tuple21 a a)) (y uni))
  (= (mem (tuple2 (tuple2 a1 a1) b2) (Tuple2 (tuple2 a1 a1) b2 (t2tb5 x) y)
  (domain_restriction b2 (tuple2 a1 a1) (t2tb4 s) p))
  (and (mem (tuple2 (tuple2 a1 a1) b2) (Tuple2 (tuple2 a1 a1) b2 (t2tb5 x) y)
  p) (mem12 x s))))))

;; mem_domain_restriction
  (assert
  (forall ((p (set (tuple21 a c))) (s (set a)) (x a) (y c))
  (= (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y)))
  (tb2t129 (domain_restriction c1 a1 (t2tb1 s) (t2tb129 p))))
  (and (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y))) p) (mem1 x s)))))

;; mem_domain_restriction
  (assert
  (forall ((p (set (tuple21 a b))) (s (set a)) (x a) (y b))
  (= (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y)))
  (tb2t11 (domain_restriction b1 a1 (t2tb1 s) (t2tb11 p))))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y))) p) (mem1 x s)))))

;; mem_domain_restriction
  (assert
  (forall ((p (set (tuple21 a a))) (s (set a)) (x a) (y a))
  (= (mem12 (tb2t5 (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y)))
  (tb2t4 (domain_restriction a1 a1 (t2tb1 s) (t2tb4 p))))
  (and (mem12 (tb2t5 (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y))) p) (mem1 x s)))))

;; mem_domain_restriction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set a)) (x a) (y uni))
  (= (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) y)
  (domain_restriction b2 a1 (t2tb1 s) p))
  (and (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) y) p) (mem1 x s))))))

;; mem_domain_restriction
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((p uni) (s uni) (x uni) (y uni))
  (= (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) (domain_restriction b2 a2 s p))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) p) (mem a2 x s))))))

(declare-fun range_restriction (ty ty uni uni) uni)

;; range_restriction_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (tuple2 a2 b2))
  (range_restriction b2 a2 x x1)))))

;; mem_range_restriction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (tuple21 (tuple21 a b) (tuple21 a c)))) (x uni)
  (y (tuple21 (tuple21 a b) (tuple21 a c))))
  (= (mem (tuple2 a2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)))
  (Tuple2 a2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) x (t2tb239 y))
  (range_restriction (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) a2 p (t2tb238 t)))
  (and (mem (tuple2 a2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)))
  (Tuple2 a2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) x (t2tb239 y)) p) (mem51
  y t))))))

;; mem_range_restriction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (tuple21 a c))) (x uni) (y (tuple21 a c)))
  (= (mem (tuple2 a2 (tuple2 a1 c1)) (Tuple2 a2 (tuple2 a1 c1) x (t2tb133 y))
  (range_restriction (tuple2 a1 c1) a2 p (t2tb129 t)))
  (and (mem (tuple2 a2 (tuple2 a1 c1))
  (Tuple2 a2 (tuple2 a1 c1) x (t2tb133 y)) p) (mem10 y t))))))

;; mem_range_restriction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (set (tuple21 b c)))) (x uni) (y (set (tuple21 b
  c))))
  (= (mem (tuple2 a2 (set1 (tuple2 b1 c1)))
  (Tuple2 a2 (set1 (tuple2 b1 c1)) x (t2tb131 y))
  (range_restriction (set1 (tuple2 b1 c1)) a2 p (t2tb130 t)))
  (and (mem (tuple2 a2 (set1 (tuple2 b1 c1)))
  (Tuple2 a2 (set1 (tuple2 b1 c1)) x (t2tb131 y)) p) (mem9 y t))))))

;; mem_range_restriction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (tuple21 b c))) (x uni) (y (tuple21 b c)))
  (= (mem (tuple2 a2 (tuple2 b1 c1)) (Tuple2 a2 (tuple2 b1 c1) x (t2tb134 y))
  (range_restriction (tuple2 b1 c1) a2 p (t2tb131 t)))
  (and (mem (tuple2 a2 (tuple2 b1 c1))
  (Tuple2 a2 (tuple2 b1 c1) x (t2tb134 y)) p) (mem8 y t))))))

;; mem_range_restriction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set c)) (x uni) (y c))
  (= (mem (tuple2 a2 c1) (Tuple2 a2 c1 x (t2tb135 y))
  (range_restriction c1 a2 p (t2tb132 t)))
  (and (mem (tuple2 a2 c1) (Tuple2 a2 c1 x (t2tb135 y)) p) (mem7 y t))))))

;; mem_range_restriction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (set (tuple21 a b)))) (x uni) (y (set (tuple21 a
  b))))
  (= (mem (tuple2 a2 (set1 (tuple2 a1 b1)))
  (Tuple2 a2 (set1 (tuple2 a1 b1)) x (t2tb11 y))
  (range_restriction (set1 (tuple2 a1 b1)) a2 p (t2tb10 t)))
  (and (mem (tuple2 a2 (set1 (tuple2 a1 b1)))
  (Tuple2 a2 (set1 (tuple2 a1 b1)) x (t2tb11 y)) p) (mem4 y t))))))

;; mem_range_restriction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (tuple21 a b))) (x uni) (y (tuple21 a b)))
  (= (mem (tuple2 a2 (tuple2 a1 b1)) (Tuple2 a2 (tuple2 a1 b1) x (t2tb13 y))
  (range_restriction (tuple2 a1 b1) a2 p (t2tb11 t)))
  (and (mem (tuple2 a2 (tuple2 a1 b1))
  (Tuple2 a2 (tuple2 a1 b1) x (t2tb13 y)) p) (mem3 y t))))))

;; mem_range_restriction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set b)) (x uni) (y b))
  (= (mem (tuple2 a2 b1) (Tuple2 a2 b1 x (t2tb14 y))
  (range_restriction b1 a2 p (t2tb12 t)))
  (and (mem (tuple2 a2 b1) (Tuple2 a2 b1 x (t2tb14 y)) p) (mem2 y t))))))

;; mem_range_restriction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (tuple21 a a))) (x uni) (y (tuple21 a a)))
  (= (mem (tuple2 a2 (tuple2 a1 a1)) (Tuple2 a2 (tuple2 a1 a1) x (t2tb5 y))
  (range_restriction (tuple2 a1 a1) a2 p (t2tb4 t)))
  (and (mem (tuple2 a2 (tuple2 a1 a1)) (Tuple2 a2 (tuple2 a1 a1) x (t2tb5 y))
  p) (mem12 y t))))))

;; mem_range_restriction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set a)) (x uni) (y a))
  (= (mem (tuple2 a2 a1) (Tuple2 a2 a1 x (t2tb2 y))
  (range_restriction a1 a2 p (t2tb1 t)))
  (and (mem (tuple2 a2 a1) (Tuple2 a2 a1 x (t2tb2 y)) p) (mem1 y t))))))

;; mem_range_restriction
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) (tuple21 a c)))) (t (set (tuple21 a
  c))) (x (tuple21 a b)) (y (tuple21 a c)))
  (= (mem51
  (tb2t239 (Tuple2 (tuple2 a1 b1) (tuple2 a1 c1) (t2tb13 x) (t2tb133 y)))
  (tb2t238
  (range_restriction (tuple2 a1 c1) (tuple2 a1 b1) (t2tb238 p) (t2tb129 t))))
  (and (mem51
  (tb2t239 (Tuple2 (tuple2 a1 b1) (tuple2 a1 c1) (t2tb13 x) (t2tb133 y))) p)
  (mem10 y t)))))

;; mem_range_restriction
  (assert
  (forall ((p (set (tuple21 b c))) (t (set c)) (x b) (y c))
  (= (mem8 (tb2t134 (Tuple2 b1 c1 (t2tb14 x) (t2tb135 y)))
  (tb2t131 (range_restriction c1 b1 (t2tb131 p) (t2tb132 t))))
  (and (mem8 (tb2t134 (Tuple2 b1 c1 (t2tb14 x) (t2tb135 y))) p) (mem7 y t)))))

;; mem_range_restriction
  (assert
  (forall ((p (set (tuple21 a c))) (t (set c)) (x a) (y c))
  (= (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y)))
  (tb2t129 (range_restriction c1 a1 (t2tb129 p) (t2tb132 t))))
  (and (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y))) p) (mem7 y t)))))

;; mem_range_restriction
  (assert
  (forall ((p (set (tuple21 a b))) (t (set b)) (x a) (y b))
  (= (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y)))
  (tb2t11 (range_restriction b1 a1 (t2tb11 p) (t2tb12 t))))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y))) p) (mem2 y t)))))

;; mem_range_restriction
  (assert
  (forall ((p (set (tuple21 a a))) (t (set a)) (x a) (y a))
  (= (mem12 (tb2t5 (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y)))
  (tb2t4 (range_restriction a1 a1 (t2tb4 p) (t2tb1 t))))
  (and (mem12 (tb2t5 (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y))) p) (mem1 y t)))))

;; mem_range_restriction
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((p uni) (t uni) (x uni) (y uni))
  (= (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) (range_restriction b2 a2 p t))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) p) (mem b2 y t))))))

(declare-fun domain_substraction (ty ty uni uni) uni)

;; domain_substraction_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (tuple2 a2 b2))
  (domain_substraction b2 a2 x x1)))))

;; mem_domain_substraction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (tuple21 (tuple21 a b) (tuple21 a c))))
  (x (tuple21 (tuple21 a b) (tuple21 a c))) (y uni))
  (= (mem (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) b2)
  (Tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) b2 (t2tb239 x) y)
  (domain_substraction b2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) (t2tb238 s)
  p))
  (and (mem (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) b2)
  (Tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) b2 (t2tb239 x) y) p)
  (not (mem51 x s)))))))

;; mem_domain_substraction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (tuple21 a c))) (x (tuple21 a c)) (y uni))
  (= (mem (tuple2 (tuple2 a1 c1) b2) (Tuple2 (tuple2 a1 c1) b2 (t2tb133 x) y)
  (domain_substraction b2 (tuple2 a1 c1) (t2tb129 s) p))
  (and (mem (tuple2 (tuple2 a1 c1) b2)
  (Tuple2 (tuple2 a1 c1) b2 (t2tb133 x) y) p) (not (mem10 x s)))))))

;; mem_domain_substraction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (set (tuple21 b c)))) (x (set (tuple21 b c)))
  (y uni))
  (= (mem (tuple2 (set1 (tuple2 b1 c1)) b2)
  (Tuple2 (set1 (tuple2 b1 c1)) b2 (t2tb131 x) y)
  (domain_substraction b2 (set1 (tuple2 b1 c1)) (t2tb130 s) p))
  (and (mem (tuple2 (set1 (tuple2 b1 c1)) b2)
  (Tuple2 (set1 (tuple2 b1 c1)) b2 (t2tb131 x) y) p) (not (mem9 x s)))))))

;; mem_domain_substraction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (tuple21 b c))) (x (tuple21 b c)) (y uni))
  (= (mem (tuple2 (tuple2 b1 c1) b2) (Tuple2 (tuple2 b1 c1) b2 (t2tb134 x) y)
  (domain_substraction b2 (tuple2 b1 c1) (t2tb131 s) p))
  (and (mem (tuple2 (tuple2 b1 c1) b2)
  (Tuple2 (tuple2 b1 c1) b2 (t2tb134 x) y) p) (not (mem8 x s)))))))

;; mem_domain_substraction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set c)) (x c) (y uni))
  (= (mem (tuple2 c1 b2) (Tuple2 c1 b2 (t2tb135 x) y)
  (domain_substraction b2 c1 (t2tb132 s) p))
  (and (mem (tuple2 c1 b2) (Tuple2 c1 b2 (t2tb135 x) y) p) (not (mem7 x s)))))))

;; mem_domain_substraction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (set (tuple21 a b)))) (x (set (tuple21 a b)))
  (y uni))
  (= (mem (tuple2 (set1 (tuple2 a1 b1)) b2)
  (Tuple2 (set1 (tuple2 a1 b1)) b2 (t2tb11 x) y)
  (domain_substraction b2 (set1 (tuple2 a1 b1)) (t2tb10 s) p))
  (and (mem (tuple2 (set1 (tuple2 a1 b1)) b2)
  (Tuple2 (set1 (tuple2 a1 b1)) b2 (t2tb11 x) y) p) (not (mem4 x s)))))))

;; mem_domain_substraction
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) (tuple21 a c)))) (s (set (tuple21 a
  b))) (x (tuple21 a b)) (y (tuple21 a c)))
  (= (mem51
  (tb2t239 (Tuple2 (tuple2 a1 b1) (tuple2 a1 c1) (t2tb13 x) (t2tb133 y)))
  (tb2t238
  (domain_substraction (tuple2 a1 c1) (tuple2 a1 b1) (t2tb11 s) (t2tb238 p))))
  (and (mem51
  (tb2t239 (Tuple2 (tuple2 a1 b1) (tuple2 a1 c1) (t2tb13 x) (t2tb133 y))) p)
  (not (mem3 x s))))))

;; mem_domain_substraction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (tuple21 a b))) (x (tuple21 a b)) (y uni))
  (= (mem (tuple2 (tuple2 a1 b1) b2) (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) y)
  (domain_substraction b2 (tuple2 a1 b1) (t2tb11 s) p))
  (and (mem (tuple2 (tuple2 a1 b1) b2)
  (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) y) p) (not (mem3 x s)))))))

;; mem_domain_substraction
  (assert
  (forall ((p (set (tuple21 b c))) (s (set b)) (x b) (y c))
  (= (mem8 (tb2t134 (Tuple2 b1 c1 (t2tb14 x) (t2tb135 y)))
  (tb2t131 (domain_substraction c1 b1 (t2tb12 s) (t2tb131 p))))
  (and (mem8 (tb2t134 (Tuple2 b1 c1 (t2tb14 x) (t2tb135 y))) p)
  (not (mem2 x s))))))

;; mem_domain_substraction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set b)) (x b) (y uni))
  (= (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) y)
  (domain_substraction b2 b1 (t2tb12 s) p))
  (and (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) y) p) (not (mem2 x s)))))))

;; mem_domain_substraction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (tuple21 a a))) (x (tuple21 a a)) (y uni))
  (= (mem (tuple2 (tuple2 a1 a1) b2) (Tuple2 (tuple2 a1 a1) b2 (t2tb5 x) y)
  (domain_substraction b2 (tuple2 a1 a1) (t2tb4 s) p))
  (and (mem (tuple2 (tuple2 a1 a1) b2) (Tuple2 (tuple2 a1 a1) b2 (t2tb5 x) y)
  p) (not (mem12 x s)))))))

;; mem_domain_substraction
  (assert
  (forall ((p (set (tuple21 a c))) (s (set a)) (x a) (y c))
  (= (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y)))
  (tb2t129 (domain_substraction c1 a1 (t2tb1 s) (t2tb129 p))))
  (and (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y))) p)
  (not (mem1 x s))))))

;; mem_domain_substraction
  (assert
  (forall ((p (set (tuple21 a b))) (s (set a)) (x a) (y b))
  (= (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y)))
  (tb2t11 (domain_substraction b1 a1 (t2tb1 s) (t2tb11 p))))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y))) p)
  (not (mem1 x s))))))

;; mem_domain_substraction
  (assert
  (forall ((p (set (tuple21 a a))) (s (set a)) (x a) (y a))
  (= (mem12 (tb2t5 (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y)))
  (tb2t4 (domain_substraction a1 a1 (t2tb1 s) (t2tb4 p))))
  (and (mem12 (tb2t5 (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y))) p) (not (mem1 x s))))))

;; mem_domain_substraction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set a)) (x a) (y uni))
  (= (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) y)
  (domain_substraction b2 a1 (t2tb1 s) p))
  (and (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) y) p) (not (mem1 x s)))))))

;; mem_domain_substraction
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((p uni) (s uni) (x uni) (y uni))
  (= (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) (domain_substraction b2 a2 s p))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) p) (not (mem a2 x s)))))))

(declare-fun range_substraction (ty ty uni uni) uni)

;; range_substraction_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (tuple2 a2 b2))
  (range_substraction b2 a2 x x1)))))

;; mem_range_substraction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (tuple21 (tuple21 a b) (tuple21 a c)))) (x uni)
  (y (tuple21 (tuple21 a b) (tuple21 a c))))
  (= (mem (tuple2 a2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)))
  (Tuple2 a2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) x (t2tb239 y))
  (range_substraction (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) a2 p
  (t2tb238 t)))
  (and (mem (tuple2 a2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)))
  (Tuple2 a2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) x (t2tb239 y)) p)
  (not (mem51 y t)))))))

;; mem_range_substraction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (tuple21 a c))) (x uni) (y (tuple21 a c)))
  (= (mem (tuple2 a2 (tuple2 a1 c1)) (Tuple2 a2 (tuple2 a1 c1) x (t2tb133 y))
  (range_substraction (tuple2 a1 c1) a2 p (t2tb129 t)))
  (and (mem (tuple2 a2 (tuple2 a1 c1))
  (Tuple2 a2 (tuple2 a1 c1) x (t2tb133 y)) p) (not (mem10 y t)))))))

;; mem_range_substraction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (set (tuple21 b c)))) (x uni) (y (set (tuple21 b
  c))))
  (= (mem (tuple2 a2 (set1 (tuple2 b1 c1)))
  (Tuple2 a2 (set1 (tuple2 b1 c1)) x (t2tb131 y))
  (range_substraction (set1 (tuple2 b1 c1)) a2 p (t2tb130 t)))
  (and (mem (tuple2 a2 (set1 (tuple2 b1 c1)))
  (Tuple2 a2 (set1 (tuple2 b1 c1)) x (t2tb131 y)) p) (not (mem9 y t)))))))

;; mem_range_substraction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (tuple21 b c))) (x uni) (y (tuple21 b c)))
  (= (mem (tuple2 a2 (tuple2 b1 c1)) (Tuple2 a2 (tuple2 b1 c1) x (t2tb134 y))
  (range_substraction (tuple2 b1 c1) a2 p (t2tb131 t)))
  (and (mem (tuple2 a2 (tuple2 b1 c1))
  (Tuple2 a2 (tuple2 b1 c1) x (t2tb134 y)) p) (not (mem8 y t)))))))

;; mem_range_substraction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set c)) (x uni) (y c))
  (= (mem (tuple2 a2 c1) (Tuple2 a2 c1 x (t2tb135 y))
  (range_substraction c1 a2 p (t2tb132 t)))
  (and (mem (tuple2 a2 c1) (Tuple2 a2 c1 x (t2tb135 y)) p) (not (mem7 y t)))))))

;; mem_range_substraction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (set (tuple21 a b)))) (x uni) (y (set (tuple21 a
  b))))
  (= (mem (tuple2 a2 (set1 (tuple2 a1 b1)))
  (Tuple2 a2 (set1 (tuple2 a1 b1)) x (t2tb11 y))
  (range_substraction (set1 (tuple2 a1 b1)) a2 p (t2tb10 t)))
  (and (mem (tuple2 a2 (set1 (tuple2 a1 b1)))
  (Tuple2 a2 (set1 (tuple2 a1 b1)) x (t2tb11 y)) p) (not (mem4 y t)))))))

;; mem_range_substraction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (tuple21 a b))) (x uni) (y (tuple21 a b)))
  (= (mem (tuple2 a2 (tuple2 a1 b1)) (Tuple2 a2 (tuple2 a1 b1) x (t2tb13 y))
  (range_substraction (tuple2 a1 b1) a2 p (t2tb11 t)))
  (and (mem (tuple2 a2 (tuple2 a1 b1))
  (Tuple2 a2 (tuple2 a1 b1) x (t2tb13 y)) p) (not (mem3 y t)))))))

;; mem_range_substraction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set b)) (x uni) (y b))
  (= (mem (tuple2 a2 b1) (Tuple2 a2 b1 x (t2tb14 y))
  (range_substraction b1 a2 p (t2tb12 t)))
  (and (mem (tuple2 a2 b1) (Tuple2 a2 b1 x (t2tb14 y)) p) (not (mem2 y t)))))))

;; mem_range_substraction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (tuple21 a a))) (x uni) (y (tuple21 a a)))
  (= (mem (tuple2 a2 (tuple2 a1 a1)) (Tuple2 a2 (tuple2 a1 a1) x (t2tb5 y))
  (range_substraction (tuple2 a1 a1) a2 p (t2tb4 t)))
  (and (mem (tuple2 a2 (tuple2 a1 a1)) (Tuple2 a2 (tuple2 a1 a1) x (t2tb5 y))
  p) (not (mem12 y t)))))))

;; mem_range_substraction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set a)) (x uni) (y a))
  (= (mem (tuple2 a2 a1) (Tuple2 a2 a1 x (t2tb2 y))
  (range_substraction a1 a2 p (t2tb1 t)))
  (and (mem (tuple2 a2 a1) (Tuple2 a2 a1 x (t2tb2 y)) p) (not (mem1 y t)))))))

;; mem_range_substraction
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) (tuple21 a c)))) (t (set (tuple21 a
  c))) (x (tuple21 a b)) (y (tuple21 a c)))
  (= (mem51
  (tb2t239 (Tuple2 (tuple2 a1 b1) (tuple2 a1 c1) (t2tb13 x) (t2tb133 y)))
  (tb2t238
  (range_substraction (tuple2 a1 c1) (tuple2 a1 b1) (t2tb238 p) (t2tb129 t))))
  (and (mem51
  (tb2t239 (Tuple2 (tuple2 a1 b1) (tuple2 a1 c1) (t2tb13 x) (t2tb133 y))) p)
  (not (mem10 y t))))))

;; mem_range_substraction
  (assert
  (forall ((p (set (tuple21 b c))) (t (set c)) (x b) (y c))
  (= (mem8 (tb2t134 (Tuple2 b1 c1 (t2tb14 x) (t2tb135 y)))
  (tb2t131 (range_substraction c1 b1 (t2tb131 p) (t2tb132 t))))
  (and (mem8 (tb2t134 (Tuple2 b1 c1 (t2tb14 x) (t2tb135 y))) p)
  (not (mem7 y t))))))

;; mem_range_substraction
  (assert
  (forall ((p (set (tuple21 a c))) (t (set c)) (x a) (y c))
  (= (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y)))
  (tb2t129 (range_substraction c1 a1 (t2tb129 p) (t2tb132 t))))
  (and (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y))) p)
  (not (mem7 y t))))))

;; mem_range_substraction
  (assert
  (forall ((p (set (tuple21 a b))) (t (set b)) (x a) (y b))
  (= (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y)))
  (tb2t11 (range_substraction b1 a1 (t2tb11 p) (t2tb12 t))))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y))) p)
  (not (mem2 y t))))))

;; mem_range_substraction
  (assert
  (forall ((p (set (tuple21 a a))) (t (set a)) (x a) (y a))
  (= (mem12 (tb2t5 (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y)))
  (tb2t4 (range_substraction a1 a1 (t2tb4 p) (t2tb1 t))))
  (and (mem12 (tb2t5 (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y))) p) (not (mem1 y t))))))

;; mem_range_substraction
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((p uni) (t uni) (x uni) (y uni))
  (= (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) (range_substraction b2 a2 p t))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) p) (not (mem b2 y t)))))))

(declare-fun image (ty ty uni uni) uni)

;; image_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 b2) (image b2 a2 x x1)))))

(declare-fun image7 ((set (tuple21 a a)) (set a)) (set a))

(declare-fun image1 ((set (tuple21 a b)) (set a)) (set b))

(declare-fun image3 ((set (tuple21 b c)) (set b)) (set c))

(declare-fun image4 ((set (tuple21 a c)) (set a)) (set c))

(declare-fun image12 ((set (tuple21 (tuple21 a b) (tuple21 a c)))
  (set (tuple21 a b))) (set (tuple21 a c)))

;; mem_image
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (w uni) (x (tuple21 (tuple21 a b) (tuple21 a c))))
  (and
  (=> (mem51 x
  (tb2t238 (image (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) a2 p w)))
  (exists ((a3 uni))
  (and (sort a2 a3)
  (and (mem a2 a3 w) (mem (tuple2 a2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)))
  (Tuple2 a2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) a3 (t2tb239 x)) p)))))
  (=>
  (exists ((a3 uni))
  (and (mem a2 a3 w) (mem (tuple2 a2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)))
  (Tuple2 a2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) a3 (t2tb239 x)) p)))
  (mem51 x (tb2t238 (image (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) a2 p w))))))))

;; mem_image
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (w uni) (x (tuple21 a c)))
  (and
  (=> (mem10 x (tb2t129 (image (tuple2 a1 c1) a2 p w)))
  (exists ((a3 uni))
  (and (sort a2 a3)
  (and (mem a2 a3 w) (mem (tuple2 a2 (tuple2 a1 c1))
  (Tuple2 a2 (tuple2 a1 c1) a3 (t2tb133 x)) p)))))
  (=>
  (exists ((a3 uni))
  (and (mem a2 a3 w) (mem (tuple2 a2 (tuple2 a1 c1))
  (Tuple2 a2 (tuple2 a1 c1) a3 (t2tb133 x)) p))) (mem10 x
  (tb2t129 (image (tuple2 a1 c1) a2 p w))))))))

;; mem_image
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (w uni) (x (set (tuple21 b c))))
  (and
  (=> (mem9 x (tb2t130 (image (set1 (tuple2 b1 c1)) a2 p w)))
  (exists ((a3 uni))
  (and (sort a2 a3)
  (and (mem a2 a3 w) (mem (tuple2 a2 (set1 (tuple2 b1 c1)))
  (Tuple2 a2 (set1 (tuple2 b1 c1)) a3 (t2tb131 x)) p)))))
  (=>
  (exists ((a3 uni))
  (and (mem a2 a3 w) (mem (tuple2 a2 (set1 (tuple2 b1 c1)))
  (Tuple2 a2 (set1 (tuple2 b1 c1)) a3 (t2tb131 x)) p))) (mem9 x
  (tb2t130 (image (set1 (tuple2 b1 c1)) a2 p w))))))))

;; mem_image
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (w uni) (x (tuple21 b c)))
  (and
  (=> (mem8 x (tb2t131 (image (tuple2 b1 c1) a2 p w)))
  (exists ((a3 uni))
  (and (sort a2 a3)
  (and (mem a2 a3 w) (mem (tuple2 a2 (tuple2 b1 c1))
  (Tuple2 a2 (tuple2 b1 c1) a3 (t2tb134 x)) p)))))
  (=>
  (exists ((a3 uni))
  (and (mem a2 a3 w) (mem (tuple2 a2 (tuple2 b1 c1))
  (Tuple2 a2 (tuple2 b1 c1) a3 (t2tb134 x)) p))) (mem8 x
  (tb2t131 (image (tuple2 b1 c1) a2 p w))))))))

;; mem_image
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (w uni) (x c))
  (and
  (=> (mem7 x (tb2t132 (image c1 a2 p w)))
  (exists ((a3 uni))
  (and (sort a2 a3)
  (and (mem a2 a3 w) (mem (tuple2 a2 c1) (Tuple2 a2 c1 a3 (t2tb135 x)) p)))))
  (=>
  (exists ((a3 uni))
  (and (mem a2 a3 w) (mem (tuple2 a2 c1) (Tuple2 a2 c1 a3 (t2tb135 x)) p)))
  (mem7 x (tb2t132 (image c1 a2 p w))))))))

;; mem_image
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (w uni) (x (set (tuple21 a b))))
  (and
  (=> (mem4 x (tb2t10 (image (set1 (tuple2 a1 b1)) a2 p w)))
  (exists ((a3 uni))
  (and (sort a2 a3)
  (and (mem a2 a3 w) (mem (tuple2 a2 (set1 (tuple2 a1 b1)))
  (Tuple2 a2 (set1 (tuple2 a1 b1)) a3 (t2tb11 x)) p)))))
  (=>
  (exists ((a3 uni))
  (and (mem a2 a3 w) (mem (tuple2 a2 (set1 (tuple2 a1 b1)))
  (Tuple2 a2 (set1 (tuple2 a1 b1)) a3 (t2tb11 x)) p))) (mem4 x
  (tb2t10 (image (set1 (tuple2 a1 b1)) a2 p w))))))))

;; mem_image
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (w uni) (x (tuple21 a b)))
  (and
  (=> (mem3 x (tb2t11 (image (tuple2 a1 b1) a2 p w)))
  (exists ((a3 uni))
  (and (sort a2 a3)
  (and (mem a2 a3 w) (mem (tuple2 a2 (tuple2 a1 b1))
  (Tuple2 a2 (tuple2 a1 b1) a3 (t2tb13 x)) p)))))
  (=>
  (exists ((a3 uni))
  (and (mem a2 a3 w) (mem (tuple2 a2 (tuple2 a1 b1))
  (Tuple2 a2 (tuple2 a1 b1) a3 (t2tb13 x)) p))) (mem3 x
  (tb2t11 (image (tuple2 a1 b1) a2 p w))))))))

;; mem_image
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (w uni) (x b))
  (and
  (=> (mem2 x (tb2t12 (image b1 a2 p w)))
  (exists ((a3 uni))
  (and (sort a2 a3)
  (and (mem a2 a3 w) (mem (tuple2 a2 b1) (Tuple2 a2 b1 a3 (t2tb14 x)) p)))))
  (=>
  (exists ((a3 uni))
  (and (mem a2 a3 w) (mem (tuple2 a2 b1) (Tuple2 a2 b1 a3 (t2tb14 x)) p)))
  (mem2 x (tb2t12 (image b1 a2 p w))))))))

;; mem_image
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (w uni) (x (tuple21 a a)))
  (and
  (=> (mem12 x (tb2t4 (image (tuple2 a1 a1) a2 p w)))
  (exists ((a3 uni))
  (and (sort a2 a3)
  (and (mem a2 a3 w) (mem (tuple2 a2 (tuple2 a1 a1))
  (Tuple2 a2 (tuple2 a1 a1) a3 (t2tb5 x)) p)))))
  (=>
  (exists ((a3 uni))
  (and (mem a2 a3 w) (mem (tuple2 a2 (tuple2 a1 a1))
  (Tuple2 a2 (tuple2 a1 a1) a3 (t2tb5 x)) p))) (mem12 x
  (tb2t4 (image (tuple2 a1 a1) a2 p w))))))))

;; mem_image
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (w uni) (x a))
  (and
  (=> (mem1 x (tb2t1 (image a1 a2 p w)))
  (exists ((a3 uni))
  (and (sort a2 a3)
  (and (mem a2 a3 w) (mem (tuple2 a2 a1) (Tuple2 a2 a1 a3 (t2tb2 x)) p)))))
  (=>
  (exists ((a3 uni))
  (and (mem a2 a3 w) (mem (tuple2 a2 a1) (Tuple2 a2 a1 a3 (t2tb2 x)) p)))
  (mem1 x (tb2t1 (image a1 a2 p w))))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 (tuple21 a b) (tuple21 a c))
  (tuple21 (tuple21 a b) (tuple21 a c))))) (w (set (tuple21 (tuple21 a b)
  (tuple21 a c)))) (x (tuple21 (tuple21 a b) (tuple21 a c))))
  (= (mem51 x
  (tb2t238
  (image (tuple2 (tuple2 a1 b1) (tuple2 a1 c1))
  (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) (t2tb5481 p) (t2tb238 w))))
  (exists ((a2 (tuple21 (tuple21 a b) (tuple21 a c))))
  (and (mem51 a2 w) (mem
  (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1))
  (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)))
  (Tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1))
  (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) (t2tb239 a2) (t2tb239 x))
  (t2tb5481 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 (tuple21 a b) (tuple21 a c)) (tuple21 a
  c)))) (w (set (tuple21 (tuple21 a b) (tuple21 a c)))) (x (tuple21 a c)))
  (= (mem10 x
  (tb2t129
  (image (tuple2 a1 c1) (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) (t2tb5483 p)
  (t2tb238 w))))
  (exists ((a2 (tuple21 (tuple21 a b) (tuple21 a c))))
  (and (mem51 a2 w) (mem
  (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) (tuple2 a1 c1))
  (Tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) (tuple2 a1 c1) (t2tb239 a2)
  (t2tb133 x)) (t2tb5483 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 (tuple21 a b) (tuple21 a c))
  (set (tuple21 b c))))) (w (set (tuple21 (tuple21 a b) (tuple21 a c))))
  (x (set (tuple21 b c))))
  (= (mem9 x
  (tb2t130
  (image (set1 (tuple2 b1 c1)) (tuple2 (tuple2 a1 b1) (tuple2 a1 c1))
  (t2tb5485 p) (t2tb238 w))))
  (exists ((a2 (tuple21 (tuple21 a b) (tuple21 a c))))
  (and (mem51 a2 w) (mem
  (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) (set1 (tuple2 b1 c1)))
  (Tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) (set1 (tuple2 b1 c1))
  (t2tb239 a2) (t2tb131 x)) (t2tb5485 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 (tuple21 a b) (tuple21 a c)) (tuple21 b
  c)))) (w (set (tuple21 (tuple21 a b) (tuple21 a c)))) (x (tuple21 b c)))
  (= (mem8 x
  (tb2t131
  (image (tuple2 b1 c1) (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) (t2tb5487 p)
  (t2tb238 w))))
  (exists ((a2 (tuple21 (tuple21 a b) (tuple21 a c))))
  (and (mem51 a2 w) (mem
  (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) (tuple2 b1 c1))
  (Tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) (tuple2 b1 c1) (t2tb239 a2)
  (t2tb134 x)) (t2tb5487 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 (tuple21 a b) (tuple21 a c)) c)))
  (w (set (tuple21 (tuple21 a b) (tuple21 a c)))) (x c))
  (= (mem7 x
  (tb2t132
  (image c1 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) (t2tb5489 p) (t2tb238 w))))
  (exists ((a2 (tuple21 (tuple21 a b) (tuple21 a c))))
  (and (mem51 a2 w) (mem (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) c1)
  (Tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) c1 (t2tb239 a2) (t2tb135 x))
  (t2tb5489 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 (tuple21 a b) (tuple21 a c))
  (set (tuple21 a b))))) (w (set (tuple21 (tuple21 a b) (tuple21 a c))))
  (x (set (tuple21 a b))))
  (= (mem4 x
  (tb2t10
  (image (set1 (tuple2 a1 b1)) (tuple2 (tuple2 a1 b1) (tuple2 a1 c1))
  (t2tb5491 p) (t2tb238 w))))
  (exists ((a2 (tuple21 (tuple21 a b) (tuple21 a c))))
  (and (mem51 a2 w) (mem
  (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) (set1 (tuple2 a1 b1)))
  (Tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) (set1 (tuple2 a1 b1))
  (t2tb239 a2) (t2tb11 x)) (t2tb5491 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 (tuple21 a b) (tuple21 a c)) (tuple21 a
  b)))) (w (set (tuple21 (tuple21 a b) (tuple21 a c)))) (x (tuple21 a b)))
  (= (mem3 x
  (tb2t11
  (image (tuple2 a1 b1) (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) (t2tb5493 p)
  (t2tb238 w))))
  (exists ((a2 (tuple21 (tuple21 a b) (tuple21 a c))))
  (and (mem51 a2 w) (mem
  (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) (tuple2 a1 b1))
  (Tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) (tuple2 a1 b1) (t2tb239 a2)
  (t2tb13 x)) (t2tb5493 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 (tuple21 a b) (tuple21 a c)) b)))
  (w (set (tuple21 (tuple21 a b) (tuple21 a c)))) (x b))
  (= (mem2 x
  (tb2t12
  (image b1 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) (t2tb5496 p) (t2tb238 w))))
  (exists ((a2 (tuple21 (tuple21 a b) (tuple21 a c))))
  (and (mem51 a2 w) (mem (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) b1)
  (Tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) b1 (t2tb239 a2) (t2tb14 x))
  (t2tb5496 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 (tuple21 a b) (tuple21 a c)) (tuple21 a
  a)))) (w (set (tuple21 (tuple21 a b) (tuple21 a c)))) (x (tuple21 a a)))
  (= (mem12 x
  (tb2t4
  (image (tuple2 a1 a1) (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) (t2tb5497 p)
  (t2tb238 w))))
  (exists ((a2 (tuple21 (tuple21 a b) (tuple21 a c))))
  (and (mem51 a2 w) (mem
  (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) (tuple2 a1 a1))
  (Tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) (tuple2 a1 a1) (t2tb239 a2)
  (t2tb5 x)) (t2tb5497 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 (tuple21 a b) (tuple21 a c)) a)))
  (w (set (tuple21 (tuple21 a b) (tuple21 a c)))) (x a))
  (= (mem1 x
  (tb2t1
  (image a1 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) (t2tb5499 p) (t2tb238 w))))
  (exists ((a2 (tuple21 (tuple21 a b) (tuple21 a c))))
  (and (mem51 a2 w) (mem (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) a1)
  (Tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) a1 (t2tb239 a2) (t2tb2 x))
  (t2tb5499 p)))))))

;; mem_image
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (w (set (tuple21 (tuple21 a b) (tuple21 a c)))) (x uni))
  (= (mem b2 x
  (image b2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) p (t2tb238 w)))
  (exists ((a2 (tuple21 (tuple21 a b) (tuple21 a c))))
  (and (mem51 a2 w) (mem (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) b2)
  (Tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) b2 (t2tb239 a2) x) p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a c) (tuple21 (tuple21 a b) (tuple21 a
  c))))) (w (set (tuple21 a c))) (x (tuple21 (tuple21 a b) (tuple21 a c))))
  (= (mem51 x
  (tb2t238
  (image (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) (tuple2 a1 c1) (t2tb5501 p)
  (t2tb129 w))))
  (exists ((a2 (tuple21 a c)))
  (and (mem10 a2 w) (mem
  (tuple2 (tuple2 a1 c1) (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)))
  (Tuple2 (tuple2 a1 c1) (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) (t2tb133 a2)
  (t2tb239 x)) (t2tb5501 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a c) (tuple21 a c)))) (w (set (tuple21 a
  c))) (x (tuple21 a c)))
  (= (mem10 x
  (tb2t129 (image (tuple2 a1 c1) (tuple2 a1 c1) (t2tb157 p) (t2tb129 w))))
  (exists ((a2 (tuple21 a c)))
  (and (mem10 a2 w) (mem (tuple2 (tuple2 a1 c1) (tuple2 a1 c1))
  (Tuple2 (tuple2 a1 c1) (tuple2 a1 c1) (t2tb133 a2) (t2tb133 x))
  (t2tb157 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a c) (set (tuple21 b c)))))
  (w (set (tuple21 a c))) (x (set (tuple21 b c))))
  (= (mem9 x
  (tb2t130
  (image (set1 (tuple2 b1 c1)) (tuple2 a1 c1) (t2tb1089 p) (t2tb129 w))))
  (exists ((a2 (tuple21 a c)))
  (and (mem10 a2 w) (mem (tuple2 (tuple2 a1 c1) (set1 (tuple2 b1 c1)))
  (Tuple2 (tuple2 a1 c1) (set1 (tuple2 b1 c1)) (t2tb133 a2) (t2tb131 x))
  (t2tb1089 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a c) (tuple21 b c)))) (w (set (tuple21 a
  c))) (x (tuple21 b c)))
  (= (mem8 x
  (tb2t131 (image (tuple2 b1 c1) (tuple2 a1 c1) (t2tb1091 p) (t2tb129 w))))
  (exists ((a2 (tuple21 a c)))
  (and (mem10 a2 w) (mem (tuple2 (tuple2 a1 c1) (tuple2 b1 c1))
  (Tuple2 (tuple2 a1 c1) (tuple2 b1 c1) (t2tb133 a2) (t2tb134 x))
  (t2tb1091 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a c) c))) (w (set (tuple21 a c))) (x c))
  (= (mem7 x (tb2t132 (image c1 (tuple2 a1 c1) (t2tb162 p) (t2tb129 w))))
  (exists ((a2 (tuple21 a c)))
  (and (mem10 a2 w) (mem (tuple2 (tuple2 a1 c1) c1)
  (Tuple2 (tuple2 a1 c1) c1 (t2tb133 a2) (t2tb135 x)) (t2tb162 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a c) (set (tuple21 a b)))))
  (w (set (tuple21 a c))) (x (set (tuple21 a b))))
  (= (mem4 x
  (tb2t10
  (image (set1 (tuple2 a1 b1)) (tuple2 a1 c1) (t2tb164 p) (t2tb129 w))))
  (exists ((a2 (tuple21 a c)))
  (and (mem10 a2 w) (mem (tuple2 (tuple2 a1 c1) (set1 (tuple2 a1 b1)))
  (Tuple2 (tuple2 a1 c1) (set1 (tuple2 a1 b1)) (t2tb133 a2) (t2tb11 x))
  (t2tb164 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a c) (tuple21 a b)))) (w (set (tuple21 a
  c))) (x (tuple21 a b)))
  (= (mem3 x
  (tb2t11 (image (tuple2 a1 b1) (tuple2 a1 c1) (t2tb166 p) (t2tb129 w))))
  (exists ((a2 (tuple21 a c)))
  (and (mem10 a2 w) (mem (tuple2 (tuple2 a1 c1) (tuple2 a1 b1))
  (Tuple2 (tuple2 a1 c1) (tuple2 a1 b1) (t2tb133 a2) (t2tb13 x))
  (t2tb166 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a c) b))) (w (set (tuple21 a c))) (x b))
  (= (mem2 x (tb2t12 (image b1 (tuple2 a1 c1) (t2tb168 p) (t2tb129 w))))
  (exists ((a2 (tuple21 a c)))
  (and (mem10 a2 w) (mem (tuple2 (tuple2 a1 c1) b1)
  (Tuple2 (tuple2 a1 c1) b1 (t2tb133 a2) (t2tb14 x)) (t2tb168 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a c) (tuple21 a a)))) (w (set (tuple21 a
  c))) (x (tuple21 a a)))
  (= (mem12 x
  (tb2t4 (image (tuple2 a1 a1) (tuple2 a1 c1) (t2tb5503 p) (t2tb129 w))))
  (exists ((a2 (tuple21 a c)))
  (and (mem10 a2 w) (mem (tuple2 (tuple2 a1 c1) (tuple2 a1 a1))
  (Tuple2 (tuple2 a1 c1) (tuple2 a1 a1) (t2tb133 a2) (t2tb5 x))
  (t2tb5503 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a c) a))) (w (set (tuple21 a c))) (x a))
  (= (mem1 x (tb2t1 (image a1 (tuple2 a1 c1) (t2tb170 p) (t2tb129 w))))
  (exists ((a2 (tuple21 a c)))
  (and (mem10 a2 w) (mem (tuple2 (tuple2 a1 c1) a1)
  (Tuple2 (tuple2 a1 c1) a1 (t2tb133 a2) (t2tb2 x)) (t2tb170 p)))))))

;; mem_image
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (w (set (tuple21 a c))) (x uni))
  (= (mem b2 x (image b2 (tuple2 a1 c1) p (t2tb129 w)))
  (exists ((a2 (tuple21 a c)))
  (and (mem10 a2 w) (mem (tuple2 (tuple2 a1 c1) b2)
  (Tuple2 (tuple2 a1 c1) b2 (t2tb133 a2) x) p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 b c)) (tuple21 (tuple21 a b)
  (tuple21 a c))))) (w (set (set (tuple21 b c)))) (x (tuple21 (tuple21 a b)
  (tuple21 a c))))
  (= (mem51 x
  (tb2t238
  (image (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) (set1 (tuple2 b1 c1))
  (t2tb5505 p) (t2tb130 w))))
  (exists ((a2 (set (tuple21 b c))))
  (and (mem9 a2 w) (mem
  (tuple2 (set1 (tuple2 b1 c1)) (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)))
  (Tuple2 (set1 (tuple2 b1 c1)) (tuple2 (tuple2 a1 b1) (tuple2 a1 c1))
  (t2tb131 a2) (t2tb239 x)) (t2tb5505 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 b c)) (tuple21 a c))))
  (w (set (set (tuple21 b c)))) (x (tuple21 a c)))
  (= (mem10 x
  (tb2t129
  (image (tuple2 a1 c1) (set1 (tuple2 b1 c1)) (t2tb1094 p) (t2tb130 w))))
  (exists ((a2 (set (tuple21 b c))))
  (and (mem9 a2 w) (mem (tuple2 (set1 (tuple2 b1 c1)) (tuple2 a1 c1))
  (Tuple2 (set1 (tuple2 b1 c1)) (tuple2 a1 c1) (t2tb131 a2) (t2tb133 x))
  (t2tb1094 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 b c)) (set (tuple21 b c)))))
  (w (set (set (tuple21 b c)))) (x (set (tuple21 b c))))
  (= (mem9 x
  (tb2t130
  (image (set1 (tuple2 b1 c1)) (set1 (tuple2 b1 c1)) (t2tb1095 p)
  (t2tb130 w))))
  (exists ((a2 (set (tuple21 b c))))
  (and (mem9 a2 w) (mem (tuple2 (set1 (tuple2 b1 c1)) (set1 (tuple2 b1 c1)))
  (Tuple2 (set1 (tuple2 b1 c1)) (set1 (tuple2 b1 c1)) (t2tb131 a2)
  (t2tb131 x)) (t2tb1095 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 b c)) (tuple21 b c))))
  (w (set (set (tuple21 b c)))) (x (tuple21 b c)))
  (= (mem8 x
  (tb2t131
  (image (tuple2 b1 c1) (set1 (tuple2 b1 c1)) (t2tb1097 p) (t2tb130 w))))
  (exists ((a2 (set (tuple21 b c))))
  (and (mem9 a2 w) (mem (tuple2 (set1 (tuple2 b1 c1)) (tuple2 b1 c1))
  (Tuple2 (set1 (tuple2 b1 c1)) (tuple2 b1 c1) (t2tb131 a2) (t2tb134 x))
  (t2tb1097 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 b c)) c))) (w (set (set (tuple21 b
  c)))) (x c))
  (= (mem7 x
  (tb2t132 (image c1 (set1 (tuple2 b1 c1)) (t2tb1099 p) (t2tb130 w))))
  (exists ((a2 (set (tuple21 b c))))
  (and (mem9 a2 w) (mem (tuple2 (set1 (tuple2 b1 c1)) c1)
  (Tuple2 (set1 (tuple2 b1 c1)) c1 (t2tb131 a2) (t2tb135 x)) (t2tb1099 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 b c)) (set (tuple21 a b)))))
  (w (set (set (tuple21 b c)))) (x (set (tuple21 a b))))
  (= (mem4 x
  (tb2t10
  (image (set1 (tuple2 a1 b1)) (set1 (tuple2 b1 c1)) (t2tb1101 p)
  (t2tb130 w))))
  (exists ((a2 (set (tuple21 b c))))
  (and (mem9 a2 w) (mem (tuple2 (set1 (tuple2 b1 c1)) (set1 (tuple2 a1 b1)))
  (Tuple2 (set1 (tuple2 b1 c1)) (set1 (tuple2 a1 b1)) (t2tb131 a2)
  (t2tb11 x)) (t2tb1101 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 b c)) (tuple21 a b))))
  (w (set (set (tuple21 b c)))) (x (tuple21 a b)))
  (= (mem3 x
  (tb2t11
  (image (tuple2 a1 b1) (set1 (tuple2 b1 c1)) (t2tb1103 p) (t2tb130 w))))
  (exists ((a2 (set (tuple21 b c))))
  (and (mem9 a2 w) (mem (tuple2 (set1 (tuple2 b1 c1)) (tuple2 a1 b1))
  (Tuple2 (set1 (tuple2 b1 c1)) (tuple2 a1 b1) (t2tb131 a2) (t2tb13 x))
  (t2tb1103 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 b c)) b))) (w (set (set (tuple21 b
  c)))) (x b))
  (= (mem2 x
  (tb2t12 (image b1 (set1 (tuple2 b1 c1)) (t2tb1105 p) (t2tb130 w))))
  (exists ((a2 (set (tuple21 b c))))
  (and (mem9 a2 w) (mem (tuple2 (set1 (tuple2 b1 c1)) b1)
  (Tuple2 (set1 (tuple2 b1 c1)) b1 (t2tb131 a2) (t2tb14 x)) (t2tb1105 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 b c)) (tuple21 a a))))
  (w (set (set (tuple21 b c)))) (x (tuple21 a a)))
  (= (mem12 x
  (tb2t4
  (image (tuple2 a1 a1) (set1 (tuple2 b1 c1)) (t2tb5507 p) (t2tb130 w))))
  (exists ((a2 (set (tuple21 b c))))
  (and (mem9 a2 w) (mem (tuple2 (set1 (tuple2 b1 c1)) (tuple2 a1 a1))
  (Tuple2 (set1 (tuple2 b1 c1)) (tuple2 a1 a1) (t2tb131 a2) (t2tb5 x))
  (t2tb5507 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 b c)) a))) (w (set (set (tuple21 b
  c)))) (x a))
  (= (mem1 x
  (tb2t1 (image a1 (set1 (tuple2 b1 c1)) (t2tb1107 p) (t2tb130 w))))
  (exists ((a2 (set (tuple21 b c))))
  (and (mem9 a2 w) (mem (tuple2 (set1 (tuple2 b1 c1)) a1)
  (Tuple2 (set1 (tuple2 b1 c1)) a1 (t2tb131 a2) (t2tb2 x)) (t2tb1107 p)))))))

;; mem_image
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (w (set (set (tuple21 b c)))) (x uni))
  (= (mem b2 x (image b2 (set1 (tuple2 b1 c1)) p (t2tb130 w)))
  (exists ((a2 (set (tuple21 b c))))
  (and (mem9 a2 w) (mem (tuple2 (set1 (tuple2 b1 c1)) b2)
  (Tuple2 (set1 (tuple2 b1 c1)) b2 (t2tb131 a2) x) p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 b c) (tuple21 (tuple21 a b) (tuple21 a
  c))))) (w (set (tuple21 b c))) (x (tuple21 (tuple21 a b) (tuple21 a c))))
  (= (mem51 x
  (tb2t238
  (image (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) (tuple2 b1 c1) (t2tb5510 p)
  (t2tb131 w))))
  (exists ((a2 (tuple21 b c)))
  (and (mem8 a2 w) (mem
  (tuple2 (tuple2 b1 c1) (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)))
  (Tuple2 (tuple2 b1 c1) (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) (t2tb134 a2)
  (t2tb239 x)) (t2tb5510 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 b c) (tuple21 a c)))) (w (set (tuple21 b
  c))) (x (tuple21 a c)))
  (= (mem10 x
  (tb2t129 (image (tuple2 a1 c1) (tuple2 b1 c1) (t2tb1109 p) (t2tb131 w))))
  (exists ((a2 (tuple21 b c)))
  (and (mem8 a2 w) (mem (tuple2 (tuple2 b1 c1) (tuple2 a1 c1))
  (Tuple2 (tuple2 b1 c1) (tuple2 a1 c1) (t2tb134 a2) (t2tb133 x))
  (t2tb1109 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 b c) (set (tuple21 b c)))))
  (w (set (tuple21 b c))) (x (set (tuple21 b c))))
  (= (mem9 x
  (tb2t130
  (image (set1 (tuple2 b1 c1)) (tuple2 b1 c1) (t2tb1111 p) (t2tb131 w))))
  (exists ((a2 (tuple21 b c)))
  (and (mem8 a2 w) (mem (tuple2 (tuple2 b1 c1) (set1 (tuple2 b1 c1)))
  (Tuple2 (tuple2 b1 c1) (set1 (tuple2 b1 c1)) (t2tb134 a2) (t2tb131 x))
  (t2tb1111 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 b c) (tuple21 b c)))) (w (set (tuple21 b
  c))) (x (tuple21 b c)))
  (= (mem8 x
  (tb2t131 (image (tuple2 b1 c1) (tuple2 b1 c1) (t2tb1113 p) (t2tb131 w))))
  (exists ((a2 (tuple21 b c)))
  (and (mem8 a2 w) (mem (tuple2 (tuple2 b1 c1) (tuple2 b1 c1))
  (Tuple2 (tuple2 b1 c1) (tuple2 b1 c1) (t2tb134 a2) (t2tb134 x))
  (t2tb1113 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 b c) c))) (w (set (tuple21 b c))) (x c))
  (= (mem7 x (tb2t132 (image c1 (tuple2 b1 c1) (t2tb1115 p) (t2tb131 w))))
  (exists ((a2 (tuple21 b c)))
  (and (mem8 a2 w) (mem (tuple2 (tuple2 b1 c1) c1)
  (Tuple2 (tuple2 b1 c1) c1 (t2tb134 a2) (t2tb135 x)) (t2tb1115 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 b c) (set (tuple21 a b)))))
  (w (set (tuple21 b c))) (x (set (tuple21 a b))))
  (= (mem4 x
  (tb2t10
  (image (set1 (tuple2 a1 b1)) (tuple2 b1 c1) (t2tb1117 p) (t2tb131 w))))
  (exists ((a2 (tuple21 b c)))
  (and (mem8 a2 w) (mem (tuple2 (tuple2 b1 c1) (set1 (tuple2 a1 b1)))
  (Tuple2 (tuple2 b1 c1) (set1 (tuple2 a1 b1)) (t2tb134 a2) (t2tb11 x))
  (t2tb1117 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 b c) (tuple21 a b)))) (w (set (tuple21 b
  c))) (x (tuple21 a b)))
  (= (mem3 x
  (tb2t11 (image (tuple2 a1 b1) (tuple2 b1 c1) (t2tb1119 p) (t2tb131 w))))
  (exists ((a2 (tuple21 b c)))
  (and (mem8 a2 w) (mem (tuple2 (tuple2 b1 c1) (tuple2 a1 b1))
  (Tuple2 (tuple2 b1 c1) (tuple2 a1 b1) (t2tb134 a2) (t2tb13 x))
  (t2tb1119 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 b c) b))) (w (set (tuple21 b c))) (x b))
  (= (mem2 x (tb2t12 (image b1 (tuple2 b1 c1) (t2tb1121 p) (t2tb131 w))))
  (exists ((a2 (tuple21 b c)))
  (and (mem8 a2 w) (mem (tuple2 (tuple2 b1 c1) b1)
  (Tuple2 (tuple2 b1 c1) b1 (t2tb134 a2) (t2tb14 x)) (t2tb1121 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 b c) (tuple21 a a)))) (w (set (tuple21 b
  c))) (x (tuple21 a a)))
  (= (mem12 x
  (tb2t4 (image (tuple2 a1 a1) (tuple2 b1 c1) (t2tb5511 p) (t2tb131 w))))
  (exists ((a2 (tuple21 b c)))
  (and (mem8 a2 w) (mem (tuple2 (tuple2 b1 c1) (tuple2 a1 a1))
  (Tuple2 (tuple2 b1 c1) (tuple2 a1 a1) (t2tb134 a2) (t2tb5 x))
  (t2tb5511 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 b c) a))) (w (set (tuple21 b c))) (x a))
  (= (mem1 x (tb2t1 (image a1 (tuple2 b1 c1) (t2tb1124 p) (t2tb131 w))))
  (exists ((a2 (tuple21 b c)))
  (and (mem8 a2 w) (mem (tuple2 (tuple2 b1 c1) a1)
  (Tuple2 (tuple2 b1 c1) a1 (t2tb134 a2) (t2tb2 x)) (t2tb1124 p)))))))

;; mem_image
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (w (set (tuple21 b c))) (x uni))
  (= (mem b2 x (image b2 (tuple2 b1 c1) p (t2tb131 w)))
  (exists ((a2 (tuple21 b c)))
  (and (mem8 a2 w) (mem (tuple2 (tuple2 b1 c1) b2)
  (Tuple2 (tuple2 b1 c1) b2 (t2tb134 a2) x) p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 c (tuple21 (tuple21 a b) (tuple21 a c)))))
  (w (set c)) (x (tuple21 (tuple21 a b) (tuple21 a c))))
  (= (mem51 x
  (tb2t238
  (image (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) c1 (t2tb5513 p) (t2tb132 w))))
  (exists ((a2 c))
  (and (mem7 a2 w) (mem (tuple2 c1 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)))
  (Tuple2 c1 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) (t2tb135 a2) (t2tb239 x))
  (t2tb5513 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 c (tuple21 a c)))) (w (set c)) (x (tuple21 a c)))
  (= (mem10 x (tb2t129 (image (tuple2 a1 c1) c1 (t2tb210 p) (t2tb132 w))))
  (exists ((a2 c))
  (and (mem7 a2 w) (mem (tuple2 c1 (tuple2 a1 c1))
  (Tuple2 c1 (tuple2 a1 c1) (t2tb135 a2) (t2tb133 x)) (t2tb210 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 c (set (tuple21 b c))))) (w (set c))
  (x (set (tuple21 b c))))
  (= (mem9 x
  (tb2t130 (image (set1 (tuple2 b1 c1)) c1 (t2tb1125 p) (t2tb132 w))))
  (exists ((a2 c))
  (and (mem7 a2 w) (mem (tuple2 c1 (set1 (tuple2 b1 c1)))
  (Tuple2 c1 (set1 (tuple2 b1 c1)) (t2tb135 a2) (t2tb131 x)) (t2tb1125 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 c (tuple21 b c)))) (w (set c)) (x (tuple21 b c)))
  (= (mem8 x (tb2t131 (image (tuple2 b1 c1) c1 (t2tb1127 p) (t2tb132 w))))
  (exists ((a2 c))
  (and (mem7 a2 w) (mem (tuple2 c1 (tuple2 b1 c1))
  (Tuple2 c1 (tuple2 b1 c1) (t2tb135 a2) (t2tb134 x)) (t2tb1127 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 c c))) (w (set c)) (x c))
  (= (mem7 x (tb2t132 (image c1 c1 (t2tb216 p) (t2tb132 w))))
  (exists ((a2 c))
  (and (mem7 a2 w) (mem (tuple2 c1 c1)
  (Tuple2 c1 c1 (t2tb135 a2) (t2tb135 x)) (t2tb216 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 c (set (tuple21 a b))))) (w (set c))
  (x (set (tuple21 a b))))
  (= (mem4 x
  (tb2t10 (image (set1 (tuple2 a1 b1)) c1 (t2tb218 p) (t2tb132 w))))
  (exists ((a2 c))
  (and (mem7 a2 w) (mem (tuple2 c1 (set1 (tuple2 a1 b1)))
  (Tuple2 c1 (set1 (tuple2 a1 b1)) (t2tb135 a2) (t2tb11 x)) (t2tb218 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 c (tuple21 a b)))) (w (set c)) (x (tuple21 a b)))
  (= (mem3 x (tb2t11 (image (tuple2 a1 b1) c1 (t2tb220 p) (t2tb132 w))))
  (exists ((a2 c))
  (and (mem7 a2 w) (mem (tuple2 c1 (tuple2 a1 b1))
  (Tuple2 c1 (tuple2 a1 b1) (t2tb135 a2) (t2tb13 x)) (t2tb220 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 c b))) (w (set c)) (x b))
  (= (mem2 x (tb2t12 (image b1 c1 (t2tb222 p) (t2tb132 w))))
  (exists ((a2 c))
  (and (mem7 a2 w) (mem (tuple2 c1 b1) (Tuple2 c1 b1 (t2tb135 a2) (t2tb14 x))
  (t2tb222 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 c (tuple21 a a)))) (w (set c)) (x (tuple21 a a)))
  (= (mem12 x (tb2t4 (image (tuple2 a1 a1) c1 (t2tb5515 p) (t2tb132 w))))
  (exists ((a2 c))
  (and (mem7 a2 w) (mem (tuple2 c1 (tuple2 a1 a1))
  (Tuple2 c1 (tuple2 a1 a1) (t2tb135 a2) (t2tb5 x)) (t2tb5515 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 c a))) (w (set c)) (x a))
  (= (mem1 x (tb2t1 (image a1 c1 (t2tb224 p) (t2tb132 w))))
  (exists ((a2 c))
  (and (mem7 a2 w) (mem (tuple2 c1 a1) (Tuple2 c1 a1 (t2tb135 a2) (t2tb2 x))
  (t2tb224 p)))))))

;; mem_image
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (w (set c)) (x uni))
  (= (mem b2 x (image b2 c1 p (t2tb132 w)))
  (exists ((a2 c))
  (and (mem7 a2 w) (mem (tuple2 c1 b2) (Tuple2 c1 b2 (t2tb135 a2) x) p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a b)) (tuple21 (tuple21 a b)
  (tuple21 a c))))) (w (set (set (tuple21 a b)))) (x (tuple21 (tuple21 a b)
  (tuple21 a c))))
  (= (mem51 x
  (tb2t238
  (image (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) (set1 (tuple2 a1 b1))
  (t2tb5517 p) (t2tb10 w))))
  (exists ((a2 (set (tuple21 a b))))
  (and (mem4 a2 w) (mem
  (tuple2 (set1 (tuple2 a1 b1)) (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)))
  (Tuple2 (set1 (tuple2 a1 b1)) (tuple2 (tuple2 a1 b1) (tuple2 a1 c1))
  (t2tb11 a2) (t2tb239 x)) (t2tb5517 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a b)) (tuple21 a c))))
  (w (set (set (tuple21 a b)))) (x (tuple21 a c)))
  (= (mem10 x
  (tb2t129
  (image (tuple2 a1 c1) (set1 (tuple2 a1 b1)) (t2tb229 p) (t2tb10 w))))
  (exists ((a2 (set (tuple21 a b))))
  (and (mem4 a2 w) (mem (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 c1))
  (Tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 c1) (t2tb11 a2) (t2tb133 x))
  (t2tb229 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a b)) (set (tuple21 b c)))))
  (w (set (set (tuple21 a b)))) (x (set (tuple21 b c))))
  (= (mem9 x
  (tb2t130
  (image (set1 (tuple2 b1 c1)) (set1 (tuple2 a1 b1)) (t2tb1129 p) (t2tb10 w))))
  (exists ((a2 (set (tuple21 a b))))
  (and (mem4 a2 w) (mem (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 b1 c1)))
  (Tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 b1 c1)) (t2tb11 a2)
  (t2tb131 x)) (t2tb1129 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a b)) (tuple21 b c))))
  (w (set (set (tuple21 a b)))) (x (tuple21 b c)))
  (= (mem8 x
  (tb2t131
  (image (tuple2 b1 c1) (set1 (tuple2 a1 b1)) (t2tb1131 p) (t2tb10 w))))
  (exists ((a2 (set (tuple21 a b))))
  (and (mem4 a2 w) (mem (tuple2 (set1 (tuple2 a1 b1)) (tuple2 b1 c1))
  (Tuple2 (set1 (tuple2 a1 b1)) (tuple2 b1 c1) (t2tb11 a2) (t2tb134 x))
  (t2tb1131 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a b)) c))) (w (set (set (tuple21 a
  b)))) (x c))
  (= (mem7 x
  (tb2t132 (image c1 (set1 (tuple2 a1 b1)) (t2tb234 p) (t2tb10 w))))
  (exists ((a2 (set (tuple21 a b))))
  (and (mem4 a2 w) (mem (tuple2 (set1 (tuple2 a1 b1)) c1)
  (Tuple2 (set1 (tuple2 a1 b1)) c1 (t2tb11 a2) (t2tb135 x)) (t2tb234 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a b)) (set (tuple21 a b)))))
  (w (set (set (tuple21 a b)))) (x (set (tuple21 a b))))
  (= (mem4 x
  (tb2t10
  (image (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1)) (t2tb15 p) (t2tb10 w))))
  (exists ((a2 (set (tuple21 a b))))
  (and (mem4 a2 w) (mem (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1)))
  (Tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1)) (t2tb11 a2) (t2tb11 x))
  (t2tb15 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a b)) (tuple21 a b))))
  (w (set (set (tuple21 a b)))) (x (tuple21 a b)))
  (= (mem3 x
  (tb2t11 (image (tuple2 a1 b1) (set1 (tuple2 a1 b1)) (t2tb17 p) (t2tb10 w))))
  (exists ((a2 (set (tuple21 a b))))
  (and (mem4 a2 w) (mem (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 b1))
  (Tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 b1) (t2tb11 a2) (t2tb13 x))
  (t2tb17 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a b)) b))) (w (set (set (tuple21 a
  b)))) (x b))
  (= (mem2 x (tb2t12 (image b1 (set1 (tuple2 a1 b1)) (t2tb19 p) (t2tb10 w))))
  (exists ((a2 (set (tuple21 a b))))
  (and (mem4 a2 w) (mem (tuple2 (set1 (tuple2 a1 b1)) b1)
  (Tuple2 (set1 (tuple2 a1 b1)) b1 (t2tb11 a2) (t2tb14 x)) (t2tb19 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a b)) (tuple21 a a))))
  (w (set (set (tuple21 a b)))) (x (tuple21 a a)))
  (= (mem12 x
  (tb2t4
  (image (tuple2 a1 a1) (set1 (tuple2 a1 b1)) (t2tb5062 p) (t2tb10 w))))
  (exists ((a2 (set (tuple21 a b))))
  (and (mem4 a2 w) (mem (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 a1))
  (Tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 a1) (t2tb11 a2) (t2tb5 x))
  (t2tb5062 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a b)) a))) (w (set (set (tuple21 a
  b)))) (x a))
  (= (mem1 x (tb2t1 (image a1 (set1 (tuple2 a1 b1)) (t2tb22 p) (t2tb10 w))))
  (exists ((a2 (set (tuple21 a b))))
  (and (mem4 a2 w) (mem (tuple2 (set1 (tuple2 a1 b1)) a1)
  (Tuple2 (set1 (tuple2 a1 b1)) a1 (t2tb11 a2) (t2tb2 x)) (t2tb22 p)))))))

;; mem_image
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (w (set (set (tuple21 a b)))) (x uni))
  (= (mem b2 x (image b2 (set1 (tuple2 a1 b1)) p (t2tb10 w)))
  (exists ((a2 (set (tuple21 a b))))
  (and (mem4 a2 w) (mem (tuple2 (set1 (tuple2 a1 b1)) b2)
  (Tuple2 (set1 (tuple2 a1 b1)) b2 (t2tb11 a2) x) p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) (tuple21 (tuple21 a b) (tuple21 a
  c))))) (w (set (tuple21 a b))) (x (tuple21 (tuple21 a b) (tuple21 a c))))
  (= (mem51 x
  (tb2t238
  (image (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) (tuple2 a1 b1) (t2tb5519 p)
  (t2tb11 w))))
  (exists ((a2 (tuple21 a b)))
  (and (mem3 a2 w) (mem
  (tuple2 (tuple2 a1 b1) (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)))
  (Tuple2 (tuple2 a1 b1) (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) (t2tb13 a2)
  (t2tb239 x)) (t2tb5519 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) (tuple21 a c)))) (w (set (tuple21 a
  b))) (x (tuple21 a c)))
  (= (mem10 x (image12 p w))
  (exists ((a2 (tuple21 a b)))
  (and (mem3 a2 w) (mem51
  (tb2t239 (Tuple2 (tuple2 a1 b1) (tuple2 a1 c1) (t2tb13 a2) (t2tb133 x)))
  p))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) (set (tuple21 b c)))))
  (w (set (tuple21 a b))) (x (set (tuple21 b c))))
  (= (mem9 x
  (tb2t130
  (image (set1 (tuple2 b1 c1)) (tuple2 a1 b1) (t2tb1133 p) (t2tb11 w))))
  (exists ((a2 (tuple21 a b)))
  (and (mem3 a2 w) (mem (tuple2 (tuple2 a1 b1) (set1 (tuple2 b1 c1)))
  (Tuple2 (tuple2 a1 b1) (set1 (tuple2 b1 c1)) (t2tb13 a2) (t2tb131 x))
  (t2tb1133 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) (tuple21 b c)))) (w (set (tuple21 a
  b))) (x (tuple21 b c)))
  (= (mem8 x
  (tb2t131 (image (tuple2 b1 c1) (tuple2 a1 b1) (t2tb1135 p) (t2tb11 w))))
  (exists ((a2 (tuple21 a b)))
  (and (mem3 a2 w) (mem (tuple2 (tuple2 a1 b1) (tuple2 b1 c1))
  (Tuple2 (tuple2 a1 b1) (tuple2 b1 c1) (t2tb13 a2) (t2tb134 x))
  (t2tb1135 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) c))) (w (set (tuple21 a b))) (x c))
  (= (mem7 x (tb2t132 (image c1 (tuple2 a1 b1) (t2tb245 p) (t2tb11 w))))
  (exists ((a2 (tuple21 a b)))
  (and (mem3 a2 w) (mem (tuple2 (tuple2 a1 b1) c1)
  (Tuple2 (tuple2 a1 b1) c1 (t2tb13 a2) (t2tb135 x)) (t2tb245 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) (set (tuple21 a b)))))
  (w (set (tuple21 a b))) (x (set (tuple21 a b))))
  (= (mem4 x
  (tb2t10 (image (set1 (tuple2 a1 b1)) (tuple2 a1 b1) (t2tb23 p) (t2tb11 w))))
  (exists ((a2 (tuple21 a b)))
  (and (mem3 a2 w) (mem (tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 b1)))
  (Tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 b1)) (t2tb13 a2) (t2tb11 x))
  (t2tb23 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) (tuple21 a b)))) (w (set (tuple21 a
  b))) (x (tuple21 a b)))
  (= (mem3 x
  (tb2t11 (image (tuple2 a1 b1) (tuple2 a1 b1) (t2tb25 p) (t2tb11 w))))
  (exists ((a2 (tuple21 a b)))
  (and (mem3 a2 w) (mem (tuple2 (tuple2 a1 b1) (tuple2 a1 b1))
  (Tuple2 (tuple2 a1 b1) (tuple2 a1 b1) (t2tb13 a2) (t2tb13 x)) (t2tb25 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) b))) (w (set (tuple21 a b))) (x b))
  (= (mem2 x (tb2t12 (image b1 (tuple2 a1 b1) (t2tb27 p) (t2tb11 w))))
  (exists ((a2 (tuple21 a b)))
  (and (mem3 a2 w) (mem (tuple2 (tuple2 a1 b1) b1)
  (Tuple2 (tuple2 a1 b1) b1 (t2tb13 a2) (t2tb14 x)) (t2tb27 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) (tuple21 a a)))) (w (set (tuple21 a
  b))) (x (tuple21 a a)))
  (= (mem12 x
  (tb2t4 (image (tuple2 a1 a1) (tuple2 a1 b1) (t2tb2716 p) (t2tb11 w))))
  (exists ((a2 (tuple21 a b)))
  (and (mem3 a2 w) (mem (tuple2 (tuple2 a1 b1) (tuple2 a1 a1))
  (Tuple2 (tuple2 a1 b1) (tuple2 a1 a1) (t2tb13 a2) (t2tb5 x)) (t2tb2716 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) a))) (w (set (tuple21 a b))) (x a))
  (= (mem1 x (tb2t1 (image a1 (tuple2 a1 b1) (t2tb29 p) (t2tb11 w))))
  (exists ((a2 (tuple21 a b)))
  (and (mem3 a2 w) (mem (tuple2 (tuple2 a1 b1) a1)
  (Tuple2 (tuple2 a1 b1) a1 (t2tb13 a2) (t2tb2 x)) (t2tb29 p)))))))

;; mem_image
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (w (set (tuple21 a b))) (x uni))
  (= (mem b2 x (image b2 (tuple2 a1 b1) p (t2tb11 w)))
  (exists ((a2 (tuple21 a b)))
  (and (mem3 a2 w) (mem (tuple2 (tuple2 a1 b1) b2)
  (Tuple2 (tuple2 a1 b1) b2 (t2tb13 a2) x) p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 b (tuple21 (tuple21 a b) (tuple21 a c)))))
  (w (set b)) (x (tuple21 (tuple21 a b) (tuple21 a c))))
  (= (mem51 x
  (tb2t238
  (image (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) b1 (t2tb5521 p) (t2tb12 w))))
  (exists ((a2 b))
  (and (mem2 a2 w) (mem (tuple2 b1 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)))
  (Tuple2 b1 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) (t2tb14 a2) (t2tb239 x))
  (t2tb5521 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 b (tuple21 a c)))) (w (set b)) (x (tuple21 a c)))
  (= (mem10 x (tb2t129 (image (tuple2 a1 c1) b1 (t2tb248 p) (t2tb12 w))))
  (exists ((a2 b))
  (and (mem2 a2 w) (mem (tuple2 b1 (tuple2 a1 c1))
  (Tuple2 b1 (tuple2 a1 c1) (t2tb14 a2) (t2tb133 x)) (t2tb248 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 b (set (tuple21 b c))))) (w (set b))
  (x (set (tuple21 b c))))
  (= (mem9 x
  (tb2t130 (image (set1 (tuple2 b1 c1)) b1 (t2tb1138 p) (t2tb12 w))))
  (exists ((a2 b))
  (and (mem2 a2 w) (mem (tuple2 b1 (set1 (tuple2 b1 c1)))
  (Tuple2 b1 (set1 (tuple2 b1 c1)) (t2tb14 a2) (t2tb131 x)) (t2tb1138 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 b (tuple21 b c)))) (w (set b)) (x (tuple21 b c)))
  (= (mem8 x (tb2t131 (image (tuple2 b1 c1) b1 (t2tb1139 p) (t2tb12 w))))
  (exists ((a2 b))
  (and (mem2 a2 w) (mem (tuple2 b1 (tuple2 b1 c1))
  (Tuple2 b1 (tuple2 b1 c1) (t2tb14 a2) (t2tb134 x)) (t2tb1139 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 b c))) (w (set b)) (x c))
  (= (mem7 x (image3 p w))
  (exists ((a2 b))
  (and (mem2 a2 w) (mem8 (tb2t134 (Tuple2 b1 c1 (t2tb14 a2) (t2tb135 x))) p))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 b (set (tuple21 a b))))) (w (set b))
  (x (set (tuple21 a b))))
  (= (mem4 x (tb2t10 (image (set1 (tuple2 a1 b1)) b1 (t2tb31 p) (t2tb12 w))))
  (exists ((a2 b))
  (and (mem2 a2 w) (mem (tuple2 b1 (set1 (tuple2 a1 b1)))
  (Tuple2 b1 (set1 (tuple2 a1 b1)) (t2tb14 a2) (t2tb11 x)) (t2tb31 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 b (tuple21 a b)))) (w (set b)) (x (tuple21 a b)))
  (= (mem3 x (tb2t11 (image (tuple2 a1 b1) b1 (t2tb34 p) (t2tb12 w))))
  (exists ((a2 b))
  (and (mem2 a2 w) (mem (tuple2 b1 (tuple2 a1 b1))
  (Tuple2 b1 (tuple2 a1 b1) (t2tb14 a2) (t2tb13 x)) (t2tb34 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 b b))) (w (set b)) (x b))
  (= (mem2 x (tb2t12 (image b1 b1 (t2tb35 p) (t2tb12 w))))
  (exists ((a2 b))
  (and (mem2 a2 w) (mem (tuple2 b1 b1) (Tuple2 b1 b1 (t2tb14 a2) (t2tb14 x))
  (t2tb35 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 b (tuple21 a a)))) (w (set b)) (x (tuple21 a a)))
  (= (mem12 x (tb2t4 (image (tuple2 a1 a1) b1 (t2tb1084 p) (t2tb12 w))))
  (exists ((a2 b))
  (and (mem2 a2 w) (mem (tuple2 b1 (tuple2 a1 a1))
  (Tuple2 b1 (tuple2 a1 a1) (t2tb14 a2) (t2tb5 x)) (t2tb1084 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 b a))) (w (set b)) (x a))
  (= (mem1 x (tb2t1 (image a1 b1 (t2tb37 p) (t2tb12 w))))
  (exists ((a2 b))
  (and (mem2 a2 w) (mem (tuple2 b1 a1) (Tuple2 b1 a1 (t2tb14 a2) (t2tb2 x))
  (t2tb37 p)))))))

;; mem_image
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (w (set b)) (x uni))
  (= (mem b2 x (image b2 b1 p (t2tb12 w)))
  (exists ((a2 b))
  (and (mem2 a2 w) (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 a2) x) p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a a) (tuple21 (tuple21 a b) (tuple21 a
  c))))) (w (set (tuple21 a a))) (x (tuple21 (tuple21 a b) (tuple21 a c))))
  (= (mem51 x
  (tb2t238
  (image (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) (tuple2 a1 a1) (t2tb5523 p)
  (t2tb4 w))))
  (exists ((a2 (tuple21 a a)))
  (and (mem12 a2 w) (mem
  (tuple2 (tuple2 a1 a1) (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)))
  (Tuple2 (tuple2 a1 a1) (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) (t2tb5 a2)
  (t2tb239 x)) (t2tb5523 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a a) (tuple21 a c)))) (w (set (tuple21 a
  a))) (x (tuple21 a c)))
  (= (mem10 x
  (tb2t129 (image (tuple2 a1 c1) (tuple2 a1 a1) (t2tb5526 p) (t2tb4 w))))
  (exists ((a2 (tuple21 a a)))
  (and (mem12 a2 w) (mem (tuple2 (tuple2 a1 a1) (tuple2 a1 c1))
  (Tuple2 (tuple2 a1 a1) (tuple2 a1 c1) (t2tb5 a2) (t2tb133 x))
  (t2tb5526 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a a) (set (tuple21 b c)))))
  (w (set (tuple21 a a))) (x (set (tuple21 b c))))
  (= (mem9 x
  (tb2t130
  (image (set1 (tuple2 b1 c1)) (tuple2 a1 a1) (t2tb5527 p) (t2tb4 w))))
  (exists ((a2 (tuple21 a a)))
  (and (mem12 a2 w) (mem (tuple2 (tuple2 a1 a1) (set1 (tuple2 b1 c1)))
  (Tuple2 (tuple2 a1 a1) (set1 (tuple2 b1 c1)) (t2tb5 a2) (t2tb131 x))
  (t2tb5527 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a a) (tuple21 b c)))) (w (set (tuple21 a
  a))) (x (tuple21 b c)))
  (= (mem8 x
  (tb2t131 (image (tuple2 b1 c1) (tuple2 a1 a1) (t2tb347 p) (t2tb4 w))))
  (exists ((a2 (tuple21 a a)))
  (and (mem12 a2 w) (mem (tuple2 (tuple2 a1 a1) (tuple2 b1 c1))
  (Tuple2 (tuple2 a1 a1) (tuple2 b1 c1) (t2tb5 a2) (t2tb134 x)) (t2tb347 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a a) c))) (w (set (tuple21 a a))) (x c))
  (= (mem7 x (tb2t132 (image c1 (tuple2 a1 a1) (t2tb5529 p) (t2tb4 w))))
  (exists ((a2 (tuple21 a a)))
  (and (mem12 a2 w) (mem (tuple2 (tuple2 a1 a1) c1)
  (Tuple2 (tuple2 a1 a1) c1 (t2tb5 a2) (t2tb135 x)) (t2tb5529 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a a) (set (tuple21 a b)))))
  (w (set (tuple21 a a))) (x (set (tuple21 a b))))
  (= (mem4 x
  (tb2t10
  (image (set1 (tuple2 a1 b1)) (tuple2 a1 a1) (t2tb5064 p) (t2tb4 w))))
  (exists ((a2 (tuple21 a a)))
  (and (mem12 a2 w) (mem (tuple2 (tuple2 a1 a1) (set1 (tuple2 a1 b1)))
  (Tuple2 (tuple2 a1 a1) (set1 (tuple2 a1 b1)) (t2tb5 a2) (t2tb11 x))
  (t2tb5064 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a a) (tuple21 a b)))) (w (set (tuple21 a
  a))) (x (tuple21 a b)))
  (= (mem3 x
  (tb2t11 (image (tuple2 a1 b1) (tuple2 a1 a1) (t2tb2720 p) (t2tb4 w))))
  (exists ((a2 (tuple21 a a)))
  (and (mem12 a2 w) (mem (tuple2 (tuple2 a1 a1) (tuple2 a1 b1))
  (Tuple2 (tuple2 a1 a1) (tuple2 a1 b1) (t2tb5 a2) (t2tb13 x)) (t2tb2720 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a a) b))) (w (set (tuple21 a a))) (x b))
  (= (mem2 x (tb2t12 (image b1 (tuple2 a1 a1) (t2tb2722 p) (t2tb4 w))))
  (exists ((a2 (tuple21 a a)))
  (and (mem12 a2 w) (mem (tuple2 (tuple2 a1 a1) b1)
  (Tuple2 (tuple2 a1 a1) b1 (t2tb5 a2) (t2tb14 x)) (t2tb2722 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a a) (tuple21 a a)))) (w (set (tuple21 a
  a))) (x (tuple21 a a)))
  (= (mem12 x
  (tb2t4 (image (tuple2 a1 a1) (tuple2 a1 a1) (t2tb2724 p) (t2tb4 w))))
  (exists ((a2 (tuple21 a a)))
  (and (mem12 a2 w) (mem (tuple2 (tuple2 a1 a1) (tuple2 a1 a1))
  (Tuple2 (tuple2 a1 a1) (tuple2 a1 a1) (t2tb5 a2) (t2tb5 x)) (t2tb2724 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a a) a))) (w (set (tuple21 a a))) (x a))
  (= (mem1 x (tb2t1 (image a1 (tuple2 a1 a1) (t2tb2727 p) (t2tb4 w))))
  (exists ((a2 (tuple21 a a)))
  (and (mem12 a2 w) (mem (tuple2 (tuple2 a1 a1) a1)
  (Tuple2 (tuple2 a1 a1) a1 (t2tb5 a2) (t2tb2 x)) (t2tb2727 p)))))))

;; mem_image
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (w (set (tuple21 a a))) (x uni))
  (= (mem b2 x (image b2 (tuple2 a1 a1) p (t2tb4 w)))
  (exists ((a2 (tuple21 a a)))
  (and (mem12 a2 w) (mem (tuple2 (tuple2 a1 a1) b2)
  (Tuple2 (tuple2 a1 a1) b2 (t2tb5 a2) x) p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 a (tuple21 (tuple21 a b) (tuple21 a c)))))
  (w (set a)) (x (tuple21 (tuple21 a b) (tuple21 a c))))
  (= (mem51 x
  (tb2t238
  (image (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) a1 (t2tb5531 p) (t2tb1 w))))
  (exists ((a2 a))
  (and (mem1 a2 w) (mem (tuple2 a1 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)))
  (Tuple2 a1 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) (t2tb2 a2) (t2tb239 x))
  (t2tb5531 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 a (tuple21 a c)))) (w (set a)) (x (tuple21 a c)))
  (= (mem10 x (tb2t129 (image (tuple2 a1 c1) a1 (t2tb256 p) (t2tb1 w))))
  (exists ((a2 a))
  (and (mem1 a2 w) (mem (tuple2 a1 (tuple2 a1 c1))
  (Tuple2 a1 (tuple2 a1 c1) (t2tb2 a2) (t2tb133 x)) (t2tb256 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 a (set (tuple21 b c))))) (w (set a))
  (x (set (tuple21 b c))))
  (= (mem9 x
  (tb2t130 (image (set1 (tuple2 b1 c1)) a1 (t2tb1141 p) (t2tb1 w))))
  (exists ((a2 a))
  (and (mem1 a2 w) (mem (tuple2 a1 (set1 (tuple2 b1 c1)))
  (Tuple2 a1 (set1 (tuple2 b1 c1)) (t2tb2 a2) (t2tb131 x)) (t2tb1141 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 a (tuple21 b c)))) (w (set a)) (x (tuple21 b c)))
  (= (mem8 x (tb2t131 (image (tuple2 b1 c1) a1 (t2tb261 p) (t2tb1 w))))
  (exists ((a2 a))
  (and (mem1 a2 w) (mem (tuple2 a1 (tuple2 b1 c1))
  (Tuple2 a1 (tuple2 b1 c1) (t2tb2 a2) (t2tb134 x)) (t2tb261 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 a c))) (w (set a)) (x c))
  (= (mem7 x (image4 p w))
  (exists ((a2 a))
  (and (mem1 a2 w) (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 a2) (t2tb135 x))) p))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 a (set (tuple21 a b))))) (w (set a))
  (x (set (tuple21 a b))))
  (= (mem4 x (tb2t10 (image (set1 (tuple2 a1 b1)) a1 (t2tb39 p) (t2tb1 w))))
  (exists ((a2 a))
  (and (mem1 a2 w) (mem (tuple2 a1 (set1 (tuple2 a1 b1)))
  (Tuple2 a1 (set1 (tuple2 a1 b1)) (t2tb2 a2) (t2tb11 x)) (t2tb39 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 a (tuple21 a b)))) (w (set a)) (x (tuple21 a b)))
  (= (mem3 x (tb2t11 (image (tuple2 a1 b1) a1 (t2tb41 p) (t2tb1 w))))
  (exists ((a2 a))
  (and (mem1 a2 w) (mem (tuple2 a1 (tuple2 a1 b1))
  (Tuple2 a1 (tuple2 a1 b1) (t2tb2 a2) (t2tb13 x)) (t2tb41 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 a b))) (w (set a)) (x b))
  (= (mem2 x (image1 p w))
  (exists ((a2 a))
  (and (mem1 a2 w) (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 a2) (t2tb14 x))) p))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 a (tuple21 a a)))) (w (set a)) (x (tuple21 a a)))
  (= (mem12 x (tb2t4 (image (tuple2 a1 a1) a1 (t2tb2728 p) (t2tb1 w))))
  (exists ((a2 a))
  (and (mem1 a2 w) (mem (tuple2 a1 (tuple2 a1 a1))
  (Tuple2 a1 (tuple2 a1 a1) (t2tb2 a2) (t2tb5 x)) (t2tb2728 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 a a))) (w (set a)) (x a))
  (= (mem1 x (image7 p w))
  (exists ((a2 a))
  (and (mem1 a2 w) (mem12 (tb2t5 (Tuple2 a1 a1 (t2tb2 a2) (t2tb2 x))) p))))))

;; mem_image
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (w (set a)) (x uni))
  (= (mem b2 x (image b2 a1 p (t2tb1 w)))
  (exists ((a2 a))
  (and (mem1 a2 w) (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 a2) x) p)))))))

;; mem_image
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((p uni) (w uni) (x uni))
  (and
  (=> (mem b2 x (image b2 a2 p w))
  (exists ((a3 uni))
  (and (sort a2 a3)
  (and (mem a2 a3 w) (mem (tuple2 a2 b2) (Tuple2 a2 b2 a3 x) p)))))
  (=>
  (exists ((a3 uni))
  (and (mem a2 a3 w) (mem (tuple2 a2 b2) (Tuple2 a2 b2 a3 x) p))) (mem b2 x
  (image b2 a2 p w)))))))

(declare-fun infix_lspl (ty ty uni uni) uni)

;; infix <+_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (tuple2 a2 b2))
  (infix_lspl b2 a2 x x1)))))

;; mem_overriding
  (assert
  (forall ((b2 ty))
  (forall ((q uni) (p uni) (x (tuple21 (tuple21 a b) (tuple21 a c))) (y uni))
  (= (mem (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) b2)
  (Tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) b2 (t2tb239 x) y)
  (infix_lspl b2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) q p))
  (or
  (and (mem (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) b2)
  (Tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) b2 (t2tb239 x) y) q)
  (not (mem51 x (tb2t238 (dom b2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) p)))))
  (mem (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) b2)
  (Tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) b2 (t2tb239 x) y) p))))))

;; mem_overriding
  (assert
  (forall ((b2 ty))
  (forall ((q uni) (p uni) (x (tuple21 a c)) (y uni))
  (= (mem (tuple2 (tuple2 a1 c1) b2) (Tuple2 (tuple2 a1 c1) b2 (t2tb133 x) y)
  (infix_lspl b2 (tuple2 a1 c1) q p))
  (or
  (and (mem (tuple2 (tuple2 a1 c1) b2)
  (Tuple2 (tuple2 a1 c1) b2 (t2tb133 x) y) q)
  (not (mem10 x (tb2t129 (dom b2 (tuple2 a1 c1) p))))) (mem
  (tuple2 (tuple2 a1 c1) b2) (Tuple2 (tuple2 a1 c1) b2 (t2tb133 x) y) p))))))

;; mem_overriding
  (assert
  (forall ((b2 ty))
  (forall ((q uni) (p uni) (x (set (tuple21 b c))) (y uni))
  (= (mem (tuple2 (set1 (tuple2 b1 c1)) b2)
  (Tuple2 (set1 (tuple2 b1 c1)) b2 (t2tb131 x) y)
  (infix_lspl b2 (set1 (tuple2 b1 c1)) q p))
  (or
  (and (mem (tuple2 (set1 (tuple2 b1 c1)) b2)
  (Tuple2 (set1 (tuple2 b1 c1)) b2 (t2tb131 x) y) q)
  (not (mem9 x (tb2t130 (dom b2 (set1 (tuple2 b1 c1)) p))))) (mem
  (tuple2 (set1 (tuple2 b1 c1)) b2)
  (Tuple2 (set1 (tuple2 b1 c1)) b2 (t2tb131 x) y) p))))))

;; mem_overriding
  (assert
  (forall ((b2 ty))
  (forall ((q uni) (p uni) (x (tuple21 b c)) (y uni))
  (= (mem (tuple2 (tuple2 b1 c1) b2) (Tuple2 (tuple2 b1 c1) b2 (t2tb134 x) y)
  (infix_lspl b2 (tuple2 b1 c1) q p))
  (or
  (and (mem (tuple2 (tuple2 b1 c1) b2)
  (Tuple2 (tuple2 b1 c1) b2 (t2tb134 x) y) q)
  (not (mem8 x (tb2t131 (dom b2 (tuple2 b1 c1) p))))) (mem
  (tuple2 (tuple2 b1 c1) b2) (Tuple2 (tuple2 b1 c1) b2 (t2tb134 x) y) p))))))

;; mem_overriding
  (assert
  (forall ((b2 ty))
  (forall ((q uni) (p uni) (x c) (y uni))
  (= (mem (tuple2 c1 b2) (Tuple2 c1 b2 (t2tb135 x) y) (infix_lspl b2 c1 q p))
  (or
  (and (mem (tuple2 c1 b2) (Tuple2 c1 b2 (t2tb135 x) y) q)
  (not (mem7 x (tb2t132 (dom b2 c1 p))))) (mem (tuple2 c1 b2)
  (Tuple2 c1 b2 (t2tb135 x) y) p))))))

;; mem_overriding
  (assert
  (forall ((b2 ty))
  (forall ((q uni) (p uni) (x (set (tuple21 a b))) (y uni))
  (= (mem (tuple2 (set1 (tuple2 a1 b1)) b2)
  (Tuple2 (set1 (tuple2 a1 b1)) b2 (t2tb11 x) y)
  (infix_lspl b2 (set1 (tuple2 a1 b1)) q p))
  (or
  (and (mem (tuple2 (set1 (tuple2 a1 b1)) b2)
  (Tuple2 (set1 (tuple2 a1 b1)) b2 (t2tb11 x) y) q)
  (not (mem4 x (tb2t10 (dom b2 (set1 (tuple2 a1 b1)) p))))) (mem
  (tuple2 (set1 (tuple2 a1 b1)) b2)
  (Tuple2 (set1 (tuple2 a1 b1)) b2 (t2tb11 x) y) p))))))

;; mem_overriding
  (assert
  (forall ((q (set (tuple21 (tuple21 a b) (tuple21 a c))))
  (p (set (tuple21 (tuple21 a b) (tuple21 a c)))) (x (tuple21 a b))
  (y (tuple21 a c)))
  (= (mem51
  (tb2t239 (Tuple2 (tuple2 a1 b1) (tuple2 a1 c1) (t2tb13 x) (t2tb133 y)))
  (tb2t238
  (infix_lspl (tuple2 a1 c1) (tuple2 a1 b1) (t2tb238 q) (t2tb238 p))))
  (or
  (and (mem51
  (tb2t239 (Tuple2 (tuple2 a1 b1) (tuple2 a1 c1) (t2tb13 x) (t2tb133 y))) q)
  (not (mem3 x (tb2t11 (dom (tuple2 a1 c1) (tuple2 a1 b1) (t2tb238 p))))))
  (mem51
  (tb2t239 (Tuple2 (tuple2 a1 b1) (tuple2 a1 c1) (t2tb13 x) (t2tb133 y))) p)))))

;; mem_overriding
  (assert
  (forall ((b2 ty))
  (forall ((q uni) (p uni) (x (tuple21 a b)) (y uni))
  (= (mem (tuple2 (tuple2 a1 b1) b2) (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) y)
  (infix_lspl b2 (tuple2 a1 b1) q p))
  (or
  (and (mem (tuple2 (tuple2 a1 b1) b2)
  (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) y) q)
  (not (mem3 x (tb2t11 (dom b2 (tuple2 a1 b1) p))))) (mem
  (tuple2 (tuple2 a1 b1) b2) (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) y) p))))))

;; mem_overriding
  (assert
  (forall ((q (set (tuple21 b c))) (p (set (tuple21 b c))) (x b) (y c))
  (= (mem8 (tb2t134 (Tuple2 b1 c1 (t2tb14 x) (t2tb135 y)))
  (tb2t131 (infix_lspl c1 b1 (t2tb131 q) (t2tb131 p))))
  (or
  (and (mem8 (tb2t134 (Tuple2 b1 c1 (t2tb14 x) (t2tb135 y))) q)
  (not (mem2 x (tb2t12 (dom c1 b1 (t2tb131 p)))))) (mem8
  (tb2t134 (Tuple2 b1 c1 (t2tb14 x) (t2tb135 y))) p)))))

;; mem_overriding
  (assert
  (forall ((b2 ty))
  (forall ((q uni) (p uni) (x b) (y uni))
  (= (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) y) (infix_lspl b2 b1 q p))
  (or
  (and (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) y) q)
  (not (mem2 x (tb2t12 (dom b2 b1 p))))) (mem (tuple2 b1 b2)
  (Tuple2 b1 b2 (t2tb14 x) y) p))))))

;; mem_overriding
  (assert
  (forall ((b2 ty))
  (forall ((q uni) (p uni) (x (tuple21 a a)) (y uni))
  (= (mem (tuple2 (tuple2 a1 a1) b2) (Tuple2 (tuple2 a1 a1) b2 (t2tb5 x) y)
  (infix_lspl b2 (tuple2 a1 a1) q p))
  (or
  (and (mem (tuple2 (tuple2 a1 a1) b2) (Tuple2 (tuple2 a1 a1) b2 (t2tb5 x) y)
  q) (not (mem12 x (tb2t4 (dom b2 (tuple2 a1 a1) p))))) (mem
  (tuple2 (tuple2 a1 a1) b2) (Tuple2 (tuple2 a1 a1) b2 (t2tb5 x) y) p))))))

;; mem_overriding
  (assert
  (forall ((q (set (tuple21 a c))) (p (set (tuple21 a c))) (x a) (y c))
  (= (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y)))
  (tb2t129 (infix_lspl c1 a1 (t2tb129 q) (t2tb129 p))))
  (or
  (and (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y))) q)
  (not (mem1 x (tb2t1 (dom c1 a1 (t2tb129 p)))))) (mem10
  (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y))) p)))))

;; mem_overriding
  (assert
  (forall ((q (set (tuple21 a b))) (p (set (tuple21 a b))) (x a) (y b))
  (= (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y)))
  (tb2t11 (infix_lspl b1 a1 (t2tb11 q) (t2tb11 p))))
  (or
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y))) q)
  (not (mem1 x (tb2t1 (dom b1 a1 (t2tb11 p)))))) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y))) p)))))

;; mem_overriding
  (assert
  (forall ((q (set (tuple21 a a))) (p (set (tuple21 a a))) (x a) (y a))
  (= (mem12 (tb2t5 (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y)))
  (tb2t4 (infix_lspl a1 a1 (t2tb4 q) (t2tb4 p))))
  (or
  (and (mem12 (tb2t5 (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y))) q)
  (not (mem1 x (tb2t1 (dom a1 a1 (t2tb4 p)))))) (mem12
  (tb2t5 (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y))) p)))))

;; mem_overriding
  (assert
  (forall ((b2 ty))
  (forall ((q uni) (p uni) (x a) (y uni))
  (= (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) y) (infix_lspl b2 a1 q p))
  (or
  (and (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) y) q)
  (not (mem1 x (tb2t1 (dom b2 a1 p))))) (mem (tuple2 a1 b2)
  (Tuple2 a1 b2 (t2tb2 x) y) p))))))

;; mem_overriding
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((q uni) (p uni) (x uni) (y uni))
  (= (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) (infix_lspl b2 a2 q p))
  (or
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) q)
  (not (mem a2 x (dom b2 a2 p)))) (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) p))))))

(declare-fun direct_product (ty ty ty uni uni) uni)

;; direct_product_sort
  (assert
  (forall ((a2 ty) (b2 ty) (c2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (tuple2 a2 (tuple2 b2 c2)))
  (direct_product c2 b2 a2 x x1)))))

;; mem_direct_product
  (assert
  (forall ((b2 ty))
  (forall ((f2 uni) (g (set (tuple21 (tuple21 a b) (tuple21 a c))))
  (x (tuple21 a b)) (y uni) (z (tuple21 a c)))
  (= (mem (tuple2 (tuple2 a1 b1) (tuple2 b2 (tuple2 a1 c1)))
  (Tuple2 (tuple2 a1 b1) (tuple2 b2 (tuple2 a1 c1)) (t2tb13 x)
  (Tuple2 b2 (tuple2 a1 c1) y (t2tb133 z)))
  (direct_product (tuple2 a1 c1) b2 (tuple2 a1 b1) f2 (t2tb238 g)))
  (and (mem (tuple2 (tuple2 a1 b1) b2)
  (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) y) f2) (mem51
  (tb2t239 (Tuple2 (tuple2 a1 b1) (tuple2 a1 c1) (t2tb13 x) (t2tb133 z))) g))))))

(declare-fun t2tb5560 ((set (tuple21 (tuple21 a b) (tuple21 (tuple21 a c)
  (tuple21 a c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) (tuple21 (tuple21 a c) (tuple21 a
  c)))))) (sort
  (set1 (tuple2 (tuple2 a1 b1) (tuple2 (tuple2 a1 c1) (tuple2 a1 c1))))
  (t2tb5560 x))))

(declare-fun tb2t5560 (uni) (set (tuple21 (tuple21 a b) (tuple21 (tuple21 a
  c) (tuple21 a c)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a b) (tuple21 (tuple21 a c) (tuple21 a
  c)))))) (! (= (tb2t5560 (t2tb5560 i)) i) :pattern ((t2tb5560 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 a1 b1) (tuple2 (tuple2 a1 c1) (tuple2 a1 c1)))) j)
     (= (t2tb5560 (tb2t5560 j)) j)) :pattern ((t2tb5560 (tb2t5560 j))) )))

(declare-fun t2tb5561 ((tuple21 (tuple21 a b) (tuple21 (tuple21 a c)
  (tuple21 a c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a b) (tuple21 (tuple21 a c) (tuple21 a c)))))
  (sort (tuple2 (tuple2 a1 b1) (tuple2 (tuple2 a1 c1) (tuple2 a1 c1)))
  (t2tb5561 x))))

(declare-fun tb2t5561 (uni) (tuple21 (tuple21 a b) (tuple21 (tuple21 a c)
  (tuple21 a c))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a b) (tuple21 (tuple21 a c) (tuple21 a c)))))
  (! (= (tb2t5561 (t2tb5561 i)) i) :pattern ((t2tb5561 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 b1) (tuple2 (tuple2 a1 c1) (tuple2 a1 c1)))
     j) (= (t2tb5561 (tb2t5561 j)) j)) :pattern ((t2tb5561 (tb2t5561 j))) )))

;; mem_direct_product
  (assert
  (forall ((f2 (set (tuple21 (tuple21 a b) (tuple21 a c))))
  (g (set (tuple21 (tuple21 a b) (tuple21 a c)))) (x (tuple21 a b))
  (y (tuple21 a c)) (z (tuple21 a c)))
  (= (mem (tuple2 (tuple2 a1 b1) (tuple2 (tuple2 a1 c1) (tuple2 a1 c1)))
  (Tuple2 (tuple2 a1 b1) (tuple2 (tuple2 a1 c1) (tuple2 a1 c1)) (t2tb13 x)
  (Tuple2 (tuple2 a1 c1) (tuple2 a1 c1) (t2tb133 y) (t2tb133 z)))
  (direct_product (tuple2 a1 c1) (tuple2 a1 c1) (tuple2 a1 b1) (t2tb238 f2)
  (t2tb238 g)))
  (and (mem51
  (tb2t239 (Tuple2 (tuple2 a1 b1) (tuple2 a1 c1) (t2tb13 x) (t2tb133 y))) f2)
  (mem51
  (tb2t239 (Tuple2 (tuple2 a1 b1) (tuple2 a1 c1) (t2tb13 x) (t2tb133 z))) g)))))

;; mem_direct_product
  (assert
  (forall ((c2 ty))
  (forall ((f2 (set (tuple21 (tuple21 a b) (tuple21 a c)))) (g uni)
  (x (tuple21 a b)) (y (tuple21 a c)) (z uni))
  (= (mem (tuple2 (tuple2 a1 b1) (tuple2 (tuple2 a1 c1) c2))
  (Tuple2 (tuple2 a1 b1) (tuple2 (tuple2 a1 c1) c2) (t2tb13 x)
  (Tuple2 (tuple2 a1 c1) c2 (t2tb133 y) z))
  (direct_product c2 (tuple2 a1 c1) (tuple2 a1 b1) (t2tb238 f2) g))
  (and (mem51
  (tb2t239 (Tuple2 (tuple2 a1 b1) (tuple2 a1 c1) (t2tb13 x) (t2tb133 y))) f2)
  (mem (tuple2 (tuple2 a1 b1) c2) (Tuple2 (tuple2 a1 b1) c2 (t2tb13 x) z) g))))))

;; mem_direct_product
  (assert
  (forall ((f2 (set (tuple21 (tuple21 a b) a))) (g (set (tuple21 (tuple21 a
  b) c))) (x (tuple21 a b)) (y a) (z c))
  (= (mem51
  (tb2t239
  (Tuple2 (tuple2 a1 b1) (tuple2 a1 c1) (t2tb13 x)
  (Tuple2 a1 c1 (t2tb2 y) (t2tb135 z))))
  (tb2t238 (direct_product c1 a1 (tuple2 a1 b1) (t2tb29 f2) (t2tb245 g))))
  (and (mem (tuple2 (tuple2 a1 b1) a1)
  (Tuple2 (tuple2 a1 b1) a1 (t2tb13 x) (t2tb2 y)) (t2tb29 f2)) (mem
  (tuple2 (tuple2 a1 b1) c1)
  (Tuple2 (tuple2 a1 b1) c1 (t2tb13 x) (t2tb135 z)) (t2tb245 g))))))

;; mem_direct_product
  (assert
  (forall ((b2 ty))
  (forall ((f2 uni) (g (set (tuple21 b c))) (x b) (y uni) (z c))
  (= (mem (tuple2 b1 (tuple2 b2 c1))
  (Tuple2 b1 (tuple2 b2 c1) (t2tb14 x) (Tuple2 b2 c1 y (t2tb135 z)))
  (direct_product c1 b2 b1 f2 (t2tb131 g)))
  (and (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) y) f2) (mem8
  (tb2t134 (Tuple2 b1 c1 (t2tb14 x) (t2tb135 z))) g))))))

(declare-fun t2tb1170 ((set (tuple21 b (tuple21 c c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 b (tuple21 c c))))) (sort
  (set1 (tuple2 b1 (tuple2 c1 c1))) (t2tb1170 x))))

(declare-fun tb2t1170 (uni) (set (tuple21 b (tuple21 c c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 b (tuple21 c c)))))
  (! (= (tb2t1170 (t2tb1170 i)) i) :pattern ((t2tb1170 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 b1 (tuple2 c1 c1))) j)
     (= (t2tb1170 (tb2t1170 j)) j)) :pattern ((t2tb1170 (tb2t1170 j))) )))

(declare-fun t2tb1171 ((tuple21 b (tuple21 c c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 b (tuple21 c c)))) (sort (tuple2 b1 (tuple2 c1 c1))
  (t2tb1171 x))))

(declare-fun tb2t1171 (uni) (tuple21 b (tuple21 c c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 b (tuple21 c c))))
  (! (= (tb2t1171 (t2tb1171 i)) i) :pattern ((t2tb1171 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 b1 (tuple2 c1 c1)) j) (= (t2tb1171 (tb2t1171 j)) j)) :pattern (
  (t2tb1171 (tb2t1171 j))) )))

;; mem_direct_product
  (assert
  (forall ((f2 (set (tuple21 b c))) (g (set (tuple21 b c))) (x b) (y c)
  (z c))
  (= (mem (tuple2 b1 (tuple2 c1 c1))
  (Tuple2 b1 (tuple2 c1 c1) (t2tb14 x)
  (Tuple2 c1 c1 (t2tb135 y) (t2tb135 z)))
  (direct_product c1 c1 b1 (t2tb131 f2) (t2tb131 g)))
  (and (mem8 (tb2t134 (Tuple2 b1 c1 (t2tb14 x) (t2tb135 y))) f2) (mem8
  (tb2t134 (Tuple2 b1 c1 (t2tb14 x) (t2tb135 z))) g)))))

;; mem_direct_product
  (assert
  (forall ((c2 ty))
  (forall ((f2 (set (tuple21 b c))) (g uni) (x b) (y c) (z uni))
  (= (mem (tuple2 b1 (tuple2 c1 c2))
  (Tuple2 b1 (tuple2 c1 c2) (t2tb14 x) (Tuple2 c1 c2 (t2tb135 y) z))
  (direct_product c2 c1 b1 (t2tb131 f2) g))
  (and (mem8 (tb2t134 (Tuple2 b1 c1 (t2tb14 x) (t2tb135 y))) f2) (mem
  (tuple2 b1 c2) (Tuple2 b1 c2 (t2tb14 x) z) g))))))

;; mem_direct_product
  (assert
  (forall ((b2 ty))
  (forall ((f2 uni) (g (set (tuple21 a c))) (x a) (y uni) (z c))
  (= (mem (tuple2 a1 (tuple2 b2 c1))
  (Tuple2 a1 (tuple2 b2 c1) (t2tb2 x) (Tuple2 b2 c1 y (t2tb135 z)))
  (direct_product c1 b2 a1 f2 (t2tb129 g)))
  (and (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) y) f2) (mem10
  (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 z))) g))))))

;; mem_direct_product
  (assert
  (forall ((b2 ty))
  (forall ((f2 uni) (g (set (tuple21 a b))) (x a) (y uni) (z b))
  (= (mem (tuple2 a1 (tuple2 b2 b1))
  (Tuple2 a1 (tuple2 b2 b1) (t2tb2 x) (Tuple2 b2 b1 y (t2tb14 z)))
  (direct_product b1 b2 a1 f2 (t2tb11 g)))
  (and (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) y) f2) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 z))) g))))))

;; mem_direct_product
  (assert
  (forall ((b2 ty))
  (forall ((f2 uni) (g (set (tuple21 a a))) (x a) (y uni) (z a))
  (= (mem (tuple2 a1 (tuple2 b2 a1))
  (Tuple2 a1 (tuple2 b2 a1) (t2tb2 x) (Tuple2 b2 a1 y (t2tb2 z)))
  (direct_product a1 b2 a1 f2 (t2tb4 g)))
  (and (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) y) f2) (mem12
  (tb2t5 (Tuple2 a1 a1 (t2tb2 x) (t2tb2 z))) g))))))

(declare-fun t2tb330 ((set (tuple21 a (tuple21 c c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (tuple21 c c))))) (sort
  (set1 (tuple2 a1 (tuple2 c1 c1))) (t2tb330 x))))

(declare-fun tb2t330 (uni) (set (tuple21 a (tuple21 c c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (tuple21 c c)))))
  (! (= (tb2t330 (t2tb330 i)) i) :pattern ((t2tb330 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (tuple2 c1 c1))) j)
     (= (t2tb330 (tb2t330 j)) j)) :pattern ((t2tb330 (tb2t330 j))) )))

(declare-fun t2tb331 ((tuple21 a (tuple21 c c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (tuple21 c c)))) (sort (tuple2 a1 (tuple2 c1 c1))
  (t2tb331 x))))

(declare-fun tb2t331 (uni) (tuple21 a (tuple21 c c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (tuple21 c c))))
  (! (= (tb2t331 (t2tb331 i)) i) :pattern ((t2tb331 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (tuple2 c1 c1)) j) (= (t2tb331 (tb2t331 j)) j)) :pattern (
  (t2tb331 (tb2t331 j))) )))

;; mem_direct_product
  (assert
  (forall ((f2 (set (tuple21 a c))) (g (set (tuple21 a c))) (x a) (y c)
  (z c))
  (= (mem (tuple2 a1 (tuple2 c1 c1))
  (Tuple2 a1 (tuple2 c1 c1) (t2tb2 x) (Tuple2 c1 c1 (t2tb135 y) (t2tb135 z)))
  (direct_product c1 c1 a1 (t2tb129 f2) (t2tb129 g)))
  (and (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y))) f2) (mem10
  (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 z))) g)))))

(declare-fun t2tb332 ((set (tuple21 a (tuple21 c b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (tuple21 c b))))) (sort
  (set1 (tuple2 a1 (tuple2 c1 b1))) (t2tb332 x))))

(declare-fun tb2t332 (uni) (set (tuple21 a (tuple21 c b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (tuple21 c b)))))
  (! (= (tb2t332 (t2tb332 i)) i) :pattern ((t2tb332 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (tuple2 c1 b1))) j)
     (= (t2tb332 (tb2t332 j)) j)) :pattern ((t2tb332 (tb2t332 j))) )))

(declare-fun t2tb333 ((tuple21 a (tuple21 c b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (tuple21 c b)))) (sort (tuple2 a1 (tuple2 c1 b1))
  (t2tb333 x))))

(declare-fun tb2t333 (uni) (tuple21 a (tuple21 c b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (tuple21 c b))))
  (! (= (tb2t333 (t2tb333 i)) i) :pattern ((t2tb333 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (tuple2 c1 b1)) j) (= (t2tb333 (tb2t333 j)) j)) :pattern (
  (t2tb333 (tb2t333 j))) )))

;; mem_direct_product
  (assert
  (forall ((f2 (set (tuple21 a c))) (g (set (tuple21 a b))) (x a) (y c)
  (z b))
  (= (mem (tuple2 a1 (tuple2 c1 b1))
  (Tuple2 a1 (tuple2 c1 b1) (t2tb2 x) (Tuple2 c1 b1 (t2tb135 y) (t2tb14 z)))
  (direct_product b1 c1 a1 (t2tb129 f2) (t2tb11 g)))
  (and (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y))) f2) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 z))) g)))))

(declare-fun t2tb5562 ((set (tuple21 a (tuple21 c a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (tuple21 c a))))) (sort
  (set1 (tuple2 a1 (tuple2 c1 a1))) (t2tb5562 x))))

(declare-fun tb2t5562 (uni) (set (tuple21 a (tuple21 c a))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (tuple21 c a)))))
  (! (= (tb2t5562 (t2tb5562 i)) i) :pattern ((t2tb5562 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (tuple2 c1 a1))) j)
     (= (t2tb5562 (tb2t5562 j)) j)) :pattern ((t2tb5562 (tb2t5562 j))) )))

(declare-fun t2tb5563 ((tuple21 a (tuple21 c a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (tuple21 c a)))) (sort (tuple2 a1 (tuple2 c1 a1))
  (t2tb5563 x))))

(declare-fun tb2t5563 (uni) (tuple21 a (tuple21 c a)))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (tuple21 c a))))
  (! (= (tb2t5563 (t2tb5563 i)) i) :pattern ((t2tb5563 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (tuple2 c1 a1)) j) (= (t2tb5563 (tb2t5563 j)) j)) :pattern (
  (t2tb5563 (tb2t5563 j))) )))

;; mem_direct_product
  (assert
  (forall ((f2 (set (tuple21 a c))) (g (set (tuple21 a a))) (x a) (y c)
  (z a))
  (= (mem (tuple2 a1 (tuple2 c1 a1))
  (Tuple2 a1 (tuple2 c1 a1) (t2tb2 x) (Tuple2 c1 a1 (t2tb135 y) (t2tb2 z)))
  (direct_product a1 c1 a1 (t2tb129 f2) (t2tb4 g)))
  (and (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y))) f2) (mem12
  (tb2t5 (Tuple2 a1 a1 (t2tb2 x) (t2tb2 z))) g)))))

;; mem_direct_product
  (assert
  (forall ((c2 ty))
  (forall ((f2 (set (tuple21 a c))) (g uni) (x a) (y c) (z uni))
  (= (mem (tuple2 a1 (tuple2 c1 c2))
  (Tuple2 a1 (tuple2 c1 c2) (t2tb2 x) (Tuple2 c1 c2 (t2tb135 y) z))
  (direct_product c2 c1 a1 (t2tb129 f2) g))
  (and (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y))) f2) (mem
  (tuple2 a1 c2) (Tuple2 a1 c2 (t2tb2 x) z) g))))))

;; mem_direct_product
  (assert
  (forall ((f2 (set (tuple21 a b))) (g (set (tuple21 a c))) (x a) (y b)
  (z c))
  (= (mem (tuple2 a1 (tuple2 b1 c1))
  (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (Tuple2 b1 c1 (t2tb14 y) (t2tb135 z)))
  (direct_product c1 b1 a1 (t2tb11 f2) (t2tb129 g)))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y))) f2) (mem10
  (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 z))) g)))))

(declare-fun t2tb59 ((set (tuple21 a (tuple21 b b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (tuple21 b b))))) (sort
  (set1 (tuple2 a1 (tuple2 b1 b1))) (t2tb59 x))))

(declare-fun tb2t59 (uni) (set (tuple21 a (tuple21 b b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (tuple21 b b)))))
  (! (= (tb2t59 (t2tb59 i)) i) :pattern ((t2tb59 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (tuple2 b1 b1))) j)
     (= (t2tb59 (tb2t59 j)) j)) :pattern ((t2tb59 (tb2t59 j))) )))

(declare-fun t2tb60 ((tuple21 a (tuple21 b b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (tuple21 b b)))) (sort (tuple2 a1 (tuple2 b1 b1))
  (t2tb60 x))))

(declare-fun tb2t60 (uni) (tuple21 a (tuple21 b b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (tuple21 b b))))
  (! (= (tb2t60 (t2tb60 i)) i) :pattern ((t2tb60 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (tuple2 b1 b1)) j) (= (t2tb60 (tb2t60 j)) j)) :pattern (
  (t2tb60 (tb2t60 j))) )))

;; mem_direct_product
  (assert
  (forall ((f2 (set (tuple21 a b))) (g (set (tuple21 a b))) (x a) (y b)
  (z b))
  (= (mem (tuple2 a1 (tuple2 b1 b1))
  (Tuple2 a1 (tuple2 b1 b1) (t2tb2 x) (Tuple2 b1 b1 (t2tb14 y) (t2tb14 z)))
  (direct_product b1 b1 a1 (t2tb11 f2) (t2tb11 g)))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y))) f2) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 z))) g)))))

(declare-fun t2tb1073 ((set (tuple21 a (tuple21 b a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (tuple21 b a))))) (sort
  (set1 (tuple2 a1 (tuple2 b1 a1))) (t2tb1073 x))))

(declare-fun tb2t1073 (uni) (set (tuple21 a (tuple21 b a))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (tuple21 b a)))))
  (! (= (tb2t1073 (t2tb1073 i)) i) :pattern ((t2tb1073 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (tuple2 b1 a1))) j)
     (= (t2tb1073 (tb2t1073 j)) j)) :pattern ((t2tb1073 (tb2t1073 j))) )))

(declare-fun t2tb1074 ((tuple21 a (tuple21 b a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (tuple21 b a)))) (sort (tuple2 a1 (tuple2 b1 a1))
  (t2tb1074 x))))

(declare-fun tb2t1074 (uni) (tuple21 a (tuple21 b a)))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (tuple21 b a))))
  (! (= (tb2t1074 (t2tb1074 i)) i) :pattern ((t2tb1074 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (tuple2 b1 a1)) j) (= (t2tb1074 (tb2t1074 j)) j)) :pattern (
  (t2tb1074 (tb2t1074 j))) )))

;; mem_direct_product
  (assert
  (forall ((f2 (set (tuple21 a b))) (g (set (tuple21 a a))) (x a) (y b)
  (z a))
  (= (mem (tuple2 a1 (tuple2 b1 a1))
  (Tuple2 a1 (tuple2 b1 a1) (t2tb2 x) (Tuple2 b1 a1 (t2tb14 y) (t2tb2 z)))
  (direct_product a1 b1 a1 (t2tb11 f2) (t2tb4 g)))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y))) f2) (mem12
  (tb2t5 (Tuple2 a1 a1 (t2tb2 x) (t2tb2 z))) g)))))

;; mem_direct_product
  (assert
  (forall ((c2 ty))
  (forall ((f2 (set (tuple21 a b))) (g uni) (x a) (y b) (z uni))
  (= (mem (tuple2 a1 (tuple2 b1 c2))
  (Tuple2 a1 (tuple2 b1 c2) (t2tb2 x) (Tuple2 b1 c2 (t2tb14 y) z))
  (direct_product c2 b1 a1 (t2tb11 f2) g))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y))) f2) (mem
  (tuple2 a1 c2) (Tuple2 a1 c2 (t2tb2 x) z) g))))))

;; mem_direct_product
  (assert
  (forall ((f2 (set (tuple21 a a))) (g (set (tuple21 a c))) (x a) (y a)
  (z c))
  (= (mem (tuple2 a1 (tuple2 a1 c1))
  (Tuple2 a1 (tuple2 a1 c1) (t2tb2 x) (Tuple2 a1 c1 (t2tb2 y) (t2tb135 z)))
  (direct_product c1 a1 a1 (t2tb4 f2) (t2tb129 g)))
  (and (mem12 (tb2t5 (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y))) f2) (mem10
  (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 z))) g)))))

;; mem_direct_product
  (assert
  (forall ((f2 (set (tuple21 a a))) (g (set (tuple21 a b))) (x a) (y a)
  (z b))
  (= (mem (tuple2 a1 (tuple2 a1 b1))
  (Tuple2 a1 (tuple2 a1 b1) (t2tb2 x) (Tuple2 a1 b1 (t2tb2 y) (t2tb14 z)))
  (direct_product b1 a1 a1 (t2tb4 f2) (t2tb11 g)))
  (and (mem12 (tb2t5 (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y))) f2) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 z))) g)))))

;; mem_direct_product
  (assert
  (forall ((f2 (set (tuple21 a a))) (g (set (tuple21 a a))) (x a) (y a)
  (z a))
  (= (mem (tuple2 a1 (tuple2 a1 a1))
  (Tuple2 a1 (tuple2 a1 a1) (t2tb2 x) (Tuple2 a1 a1 (t2tb2 y) (t2tb2 z)))
  (direct_product a1 a1 a1 (t2tb4 f2) (t2tb4 g)))
  (and (mem12 (tb2t5 (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y))) f2) (mem12
  (tb2t5 (Tuple2 a1 a1 (t2tb2 x) (t2tb2 z))) g)))))

;; mem_direct_product
  (assert
  (forall ((c2 ty))
  (forall ((f2 (set (tuple21 a a))) (g uni) (x a) (y a) (z uni))
  (= (mem (tuple2 a1 (tuple2 a1 c2))
  (Tuple2 a1 (tuple2 a1 c2) (t2tb2 x) (Tuple2 a1 c2 (t2tb2 y) z))
  (direct_product c2 a1 a1 (t2tb4 f2) g))
  (and (mem12 (tb2t5 (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y))) f2) (mem
  (tuple2 a1 c2) (Tuple2 a1 c2 (t2tb2 x) z) g))))))

;; mem_direct_product
  (assert
  (forall ((a2 ty) (b2 ty) (c2 ty))
  (forall ((f2 uni) (g uni) (x uni) (y uni) (z uni))
  (= (mem (tuple2 a2 (tuple2 b2 c2))
  (Tuple2 a2 (tuple2 b2 c2) x (Tuple2 b2 c2 y z))
  (direct_product c2 b2 a2 f2 g))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) f2) (mem (tuple2 a2 c2)
  (Tuple2 a2 c2 x z) g))))))

(declare-fun prj1 (ty ty uni) uni)

;; prj1_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni)) (sort (set1 (tuple2 (tuple2 a2 b2) a2)) (prj1 b2 a2 x)))))

;; mem_proj_op_1
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (x uni) (y uni) (z uni))
  (=> (sort a2 x)
  (=> (sort a2 z)
  (= (mem (tuple2 (tuple2 a2 b2) a2)
  (Tuple2 (tuple2 a2 b2) a2 (Tuple2 a2 b2 x y) z)
  (prj1 b2 a2 (Tuple2 (set1 a2) (set1 b2) s t)))
  (and (mem (tuple2 (tuple2 a2 b2) a2)
  (Tuple2 (tuple2 a2 b2) a2 (Tuple2 a2 b2 x y) z)
  (times a2 (tuple2 a2 b2) (times b2 a2 s t) s)) (= z x))))))))

(declare-fun prj2 (ty ty uni) uni)

;; prj2_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni)) (sort (set1 (tuple2 (tuple2 a2 b2) b2)) (prj2 b2 a2 x)))))

;; mem_proj_op_2
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (x uni) (y uni) (z uni))
  (=> (sort b2 y)
  (=> (sort b2 z)
  (= (mem (tuple2 (tuple2 a2 b2) b2)
  (Tuple2 (tuple2 a2 b2) b2 (Tuple2 a2 b2 x y) z)
  (prj2 b2 a2 (Tuple2 (set1 a2) (set1 b2) s t)))
  (and (mem (tuple2 (tuple2 a2 b2) b2)
  (Tuple2 (tuple2 a2 b2) b2 (Tuple2 a2 b2 x y) z)
  (times b2 (tuple2 a2 b2) (times b2 a2 s t) t)) (= z y))))))))

(declare-fun parallel_product (ty ty ty ty uni uni) uni)

;; parallel_product_sort
  (assert
  (forall ((a2 ty) (b2 ty) (c2 ty) (d2 ty))
  (forall ((x uni) (x1 uni)) (sort
  (set1 (tuple2 (tuple2 a2 c2) (tuple2 b2 d2)))
  (parallel_product d2 c2 b2 a2 x x1)))))

(declare-fun parallel_product7 ((set (tuple21 a a)) (set (tuple21 b
  c))) (set (tuple21 (tuple21 a b) (tuple21 a c))))

;; mem_parallel_product
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((h uni) (k (set (tuple21 (tuple21 a b) (tuple21 a c)))) (x uni)
  (y (tuple21 a b)) (z uni) (w (tuple21 a c)))
  (= (mem (tuple2 (tuple2 a2 (tuple2 a1 b1)) (tuple2 b2 (tuple2 a1 c1)))
  (Tuple2 (tuple2 a2 (tuple2 a1 b1)) (tuple2 b2 (tuple2 a1 c1))
  (Tuple2 a2 (tuple2 a1 b1) x (t2tb13 y))
  (Tuple2 b2 (tuple2 a1 c1) z (t2tb133 w)))
  (parallel_product (tuple2 a1 c1) (tuple2 a1 b1) b2 a2 h (t2tb238 k)))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x z) h) (mem51
  (tb2t239 (Tuple2 (tuple2 a1 b1) (tuple2 a1 c1) (t2tb13 y) (t2tb133 w))) k))))))

;; mem_parallel_product
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((h uni) (k (set (tuple21 b c))) (x uni) (y b) (z uni) (w c))
  (= (mem (tuple2 (tuple2 a2 b1) (tuple2 b2 c1))
  (Tuple2 (tuple2 a2 b1) (tuple2 b2 c1) (Tuple2 a2 b1 x (t2tb14 y))
  (Tuple2 b2 c1 z (t2tb135 w))) (parallel_product c1 b1 b2 a2 h (t2tb131 k)))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x z) h) (mem8
  (tb2t134 (Tuple2 b1 c1 (t2tb14 y) (t2tb135 w))) k))))))

;; mem_parallel_product
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((h uni) (k (set (tuple21 a c))) (x uni) (y a) (z uni) (w c))
  (= (mem (tuple2 (tuple2 a2 a1) (tuple2 b2 c1))
  (Tuple2 (tuple2 a2 a1) (tuple2 b2 c1) (Tuple2 a2 a1 x (t2tb2 y))
  (Tuple2 b2 c1 z (t2tb135 w))) (parallel_product c1 a1 b2 a2 h (t2tb129 k)))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x z) h) (mem10
  (tb2t133 (Tuple2 a1 c1 (t2tb2 y) (t2tb135 w))) k))))))

;; mem_parallel_product
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((h uni) (k (set (tuple21 a b))) (x uni) (y a) (z uni) (w b))
  (= (mem (tuple2 (tuple2 a2 a1) (tuple2 b2 b1))
  (Tuple2 (tuple2 a2 a1) (tuple2 b2 b1) (Tuple2 a2 a1 x (t2tb2 y))
  (Tuple2 b2 b1 z (t2tb14 w))) (parallel_product b1 a1 b2 a2 h (t2tb11 k)))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x z) h) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 y) (t2tb14 w))) k))))))

;; mem_parallel_product
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((h uni) (k (set (tuple21 a a))) (x uni) (y a) (z uni) (w a))
  (= (mem (tuple2 (tuple2 a2 a1) (tuple2 b2 a1))
  (Tuple2 (tuple2 a2 a1) (tuple2 b2 a1) (Tuple2 a2 a1 x (t2tb2 y))
  (Tuple2 b2 a1 z (t2tb2 w))) (parallel_product a1 a1 b2 a2 h (t2tb4 k)))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x z) h) (mem12
  (tb2t5 (Tuple2 a1 a1 (t2tb2 y) (t2tb2 w))) k))))))

(declare-fun t2tb5564 ((set (tuple21 (tuple21 (tuple21 a b) (tuple21 a b))
  (tuple21 (tuple21 a c) (tuple21 a c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 a b) (tuple21 a b))
  (tuple21 (tuple21 a c) (tuple21 a c)))))) (sort
  (set1
  (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 b1))
  (tuple2 (tuple2 a1 c1) (tuple2 a1 c1)))) (t2tb5564 x))))

(declare-fun tb2t5564 (uni) (set (tuple21 (tuple21 (tuple21 a b) (tuple21 a
  b)) (tuple21 (tuple21 a c) (tuple21 a c)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 a b) (tuple21 a b))
  (tuple21 (tuple21 a c) (tuple21 a c))))))
  (! (= (tb2t5564 (t2tb5564 i)) i) :pattern ((t2tb5564 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 b1))
     (tuple2 (tuple2 a1 c1) (tuple2 a1 c1)))) j)
     (= (t2tb5564 (tb2t5564 j)) j)) :pattern ((t2tb5564 (tb2t5564 j))) )))

(declare-fun t2tb5565 ((tuple21 (tuple21 (tuple21 a b) (tuple21 a b))
  (tuple21 (tuple21 a c) (tuple21 a c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 a b) (tuple21 a b))
  (tuple21 (tuple21 a c) (tuple21 a c))))) (sort
  (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 b1))
  (tuple2 (tuple2 a1 c1) (tuple2 a1 c1))) (t2tb5565 x))))

(declare-fun tb2t5565 (uni) (tuple21 (tuple21 (tuple21 a b) (tuple21 a b))
  (tuple21 (tuple21 a c) (tuple21 a c))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 a b) (tuple21 a b))
  (tuple21 (tuple21 a c) (tuple21 a c)))))
  (! (= (tb2t5565 (t2tb5565 i)) i) :pattern ((t2tb5565 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 b1))
     (tuple2 (tuple2 a1 c1) (tuple2 a1 c1))) j)
     (= (t2tb5565 (tb2t5565 j)) j)) :pattern ((t2tb5565 (tb2t5565 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 (tuple21 a b) (tuple21 a c))))
  (k (set (tuple21 (tuple21 a b) (tuple21 a c)))) (x (tuple21 a b))
  (y (tuple21 a b)) (z (tuple21 a c)) (w (tuple21 a c)))
  (= (mem
  (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 b1))
  (tuple2 (tuple2 a1 c1) (tuple2 a1 c1)))
  (Tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 b1))
  (tuple2 (tuple2 a1 c1) (tuple2 a1 c1))
  (Tuple2 (tuple2 a1 b1) (tuple2 a1 b1) (t2tb13 x) (t2tb13 y))
  (Tuple2 (tuple2 a1 c1) (tuple2 a1 c1) (t2tb133 z) (t2tb133 w)))
  (parallel_product (tuple2 a1 c1) (tuple2 a1 b1) (tuple2 a1 c1)
  (tuple2 a1 b1) (t2tb238 h) (t2tb238 k)))
  (and (mem51
  (tb2t239 (Tuple2 (tuple2 a1 b1) (tuple2 a1 c1) (t2tb13 x) (t2tb133 z))) h)
  (mem51
  (tb2t239 (Tuple2 (tuple2 a1 b1) (tuple2 a1 c1) (t2tb13 y) (t2tb133 w))) k)))))

(declare-fun t2tb5566 ((tuple21 (tuple21 (tuple21 a b) b) (tuple21 (tuple21 a
  c) c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 a b) b) (tuple21 (tuple21 a c) c))))
  (sort (tuple2 (tuple2 (tuple2 a1 b1) b1) (tuple2 (tuple2 a1 c1) c1))
  (t2tb5566 x))))

(declare-fun tb2t5566 (uni) (tuple21 (tuple21 (tuple21 a b) b)
  (tuple21 (tuple21 a c) c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 a b) b) (tuple21 (tuple21 a c) c))))
  (! (= (tb2t5566 (t2tb5566 i)) i) :pattern ((t2tb5566 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 (tuple2 a1 b1) b1) (tuple2 (tuple2 a1 c1) c1))
     j) (= (t2tb5566 (tb2t5566 j)) j)) :pattern ((t2tb5566 (tb2t5566 j))) )))

(declare-fun t2tb5567 ((set (tuple21 (tuple21 (tuple21 a b) b)
  (tuple21 (tuple21 a c) c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 a b) b) (tuple21 (tuple21 a c)
  c))))) (sort
  (set1 (tuple2 (tuple2 (tuple2 a1 b1) b1) (tuple2 (tuple2 a1 c1) c1)))
  (t2tb5567 x))))

(declare-fun tb2t5567 (uni) (set (tuple21 (tuple21 (tuple21 a b) b)
  (tuple21 (tuple21 a c) c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 a b) b) (tuple21 (tuple21 a c)
  c))))) (! (= (tb2t5567 (t2tb5567 i)) i) :pattern ((t2tb5567 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 (tuple2 a1 b1) b1) (tuple2 (tuple2 a1 c1) c1))) j)
     (= (t2tb5567 (tb2t5567 j)) j)) :pattern ((t2tb5567 (tb2t5567 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 (tuple21 a b) (tuple21 a c)))) (k (set (tuple21 b
  c))) (x (tuple21 a b)) (y b) (z (tuple21 a c)) (w c))
  (= (mem (tuple2 (tuple2 (tuple2 a1 b1) b1) (tuple2 (tuple2 a1 c1) c1))
  (Tuple2 (tuple2 (tuple2 a1 b1) b1) (tuple2 (tuple2 a1 c1) c1)
  (Tuple2 (tuple2 a1 b1) b1 (t2tb13 x) (t2tb14 y))
  (Tuple2 (tuple2 a1 c1) c1 (t2tb133 z) (t2tb135 w)))
  (parallel_product c1 b1 (tuple2 a1 c1) (tuple2 a1 b1) (t2tb238 h)
  (t2tb131 k)))
  (and (mem51
  (tb2t239 (Tuple2 (tuple2 a1 b1) (tuple2 a1 c1) (t2tb13 x) (t2tb133 z))) h)
  (mem8 (tb2t134 (Tuple2 b1 c1 (t2tb14 y) (t2tb135 w))) k)))))

(declare-fun t2tb5568 ((set (tuple21 (tuple21 (tuple21 a b) a)
  (tuple21 (tuple21 a c) c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 a b) a) (tuple21 (tuple21 a c)
  c))))) (sort
  (set1 (tuple2 (tuple2 (tuple2 a1 b1) a1) (tuple2 (tuple2 a1 c1) c1)))
  (t2tb5568 x))))

(declare-fun tb2t5568 (uni) (set (tuple21 (tuple21 (tuple21 a b) a)
  (tuple21 (tuple21 a c) c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 a b) a) (tuple21 (tuple21 a c)
  c))))) (! (= (tb2t5568 (t2tb5568 i)) i) :pattern ((t2tb5568 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 (tuple2 a1 b1) a1) (tuple2 (tuple2 a1 c1) c1))) j)
     (= (t2tb5568 (tb2t5568 j)) j)) :pattern ((t2tb5568 (tb2t5568 j))) )))

(declare-fun t2tb5569 ((tuple21 (tuple21 (tuple21 a b) a) (tuple21 (tuple21 a
  c) c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 a b) a) (tuple21 (tuple21 a c) c))))
  (sort (tuple2 (tuple2 (tuple2 a1 b1) a1) (tuple2 (tuple2 a1 c1) c1))
  (t2tb5569 x))))

(declare-fun tb2t5569 (uni) (tuple21 (tuple21 (tuple21 a b) a)
  (tuple21 (tuple21 a c) c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 a b) a) (tuple21 (tuple21 a c) c))))
  (! (= (tb2t5569 (t2tb5569 i)) i) :pattern ((t2tb5569 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 (tuple2 a1 b1) a1) (tuple2 (tuple2 a1 c1) c1))
     j) (= (t2tb5569 (tb2t5569 j)) j)) :pattern ((t2tb5569 (tb2t5569 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 (tuple21 a b) (tuple21 a c)))) (k (set (tuple21 a
  c))) (x (tuple21 a b)) (y a) (z (tuple21 a c)) (w c))
  (= (mem (tuple2 (tuple2 (tuple2 a1 b1) a1) (tuple2 (tuple2 a1 c1) c1))
  (Tuple2 (tuple2 (tuple2 a1 b1) a1) (tuple2 (tuple2 a1 c1) c1)
  (Tuple2 (tuple2 a1 b1) a1 (t2tb13 x) (t2tb2 y))
  (Tuple2 (tuple2 a1 c1) c1 (t2tb133 z) (t2tb135 w)))
  (parallel_product c1 a1 (tuple2 a1 c1) (tuple2 a1 b1) (t2tb238 h)
  (t2tb129 k)))
  (and (mem51
  (tb2t239 (Tuple2 (tuple2 a1 b1) (tuple2 a1 c1) (t2tb13 x) (t2tb133 z))) h)
  (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 y) (t2tb135 w))) k)))))

(declare-fun t2tb5570 ((set (tuple21 (tuple21 (tuple21 a b) a)
  (tuple21 (tuple21 a c) b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 a b) a) (tuple21 (tuple21 a c)
  b))))) (sort
  (set1 (tuple2 (tuple2 (tuple2 a1 b1) a1) (tuple2 (tuple2 a1 c1) b1)))
  (t2tb5570 x))))

(declare-fun tb2t5570 (uni) (set (tuple21 (tuple21 (tuple21 a b) a)
  (tuple21 (tuple21 a c) b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 a b) a) (tuple21 (tuple21 a c)
  b))))) (! (= (tb2t5570 (t2tb5570 i)) i) :pattern ((t2tb5570 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 (tuple2 a1 b1) a1) (tuple2 (tuple2 a1 c1) b1))) j)
     (= (t2tb5570 (tb2t5570 j)) j)) :pattern ((t2tb5570 (tb2t5570 j))) )))

(declare-fun t2tb5571 ((tuple21 (tuple21 (tuple21 a b) a) (tuple21 (tuple21 a
  c) b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 a b) a) (tuple21 (tuple21 a c) b))))
  (sort (tuple2 (tuple2 (tuple2 a1 b1) a1) (tuple2 (tuple2 a1 c1) b1))
  (t2tb5571 x))))

(declare-fun tb2t5571 (uni) (tuple21 (tuple21 (tuple21 a b) a)
  (tuple21 (tuple21 a c) b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 a b) a) (tuple21 (tuple21 a c) b))))
  (! (= (tb2t5571 (t2tb5571 i)) i) :pattern ((t2tb5571 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 (tuple2 a1 b1) a1) (tuple2 (tuple2 a1 c1) b1))
     j) (= (t2tb5571 (tb2t5571 j)) j)) :pattern ((t2tb5571 (tb2t5571 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 (tuple21 a b) (tuple21 a c)))) (k (set (tuple21 a
  b))) (x (tuple21 a b)) (y a) (z (tuple21 a c)) (w b))
  (= (mem (tuple2 (tuple2 (tuple2 a1 b1) a1) (tuple2 (tuple2 a1 c1) b1))
  (Tuple2 (tuple2 (tuple2 a1 b1) a1) (tuple2 (tuple2 a1 c1) b1)
  (Tuple2 (tuple2 a1 b1) a1 (t2tb13 x) (t2tb2 y))
  (Tuple2 (tuple2 a1 c1) b1 (t2tb133 z) (t2tb14 w)))
  (parallel_product b1 a1 (tuple2 a1 c1) (tuple2 a1 b1) (t2tb238 h)
  (t2tb11 k)))
  (and (mem51
  (tb2t239 (Tuple2 (tuple2 a1 b1) (tuple2 a1 c1) (t2tb13 x) (t2tb133 z))) h)
  (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 y) (t2tb14 w))) k)))))

(declare-fun t2tb5572 ((set (tuple21 (tuple21 (tuple21 a b) a)
  (tuple21 (tuple21 a c) a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 a b) a) (tuple21 (tuple21 a c)
  a))))) (sort
  (set1 (tuple2 (tuple2 (tuple2 a1 b1) a1) (tuple2 (tuple2 a1 c1) a1)))
  (t2tb5572 x))))

(declare-fun tb2t5572 (uni) (set (tuple21 (tuple21 (tuple21 a b) a)
  (tuple21 (tuple21 a c) a))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 a b) a) (tuple21 (tuple21 a c)
  a))))) (! (= (tb2t5572 (t2tb5572 i)) i) :pattern ((t2tb5572 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 (tuple2 a1 b1) a1) (tuple2 (tuple2 a1 c1) a1))) j)
     (= (t2tb5572 (tb2t5572 j)) j)) :pattern ((t2tb5572 (tb2t5572 j))) )))

(declare-fun t2tb5573 ((tuple21 (tuple21 (tuple21 a b) a) (tuple21 (tuple21 a
  c) a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 a b) a) (tuple21 (tuple21 a c) a))))
  (sort (tuple2 (tuple2 (tuple2 a1 b1) a1) (tuple2 (tuple2 a1 c1) a1))
  (t2tb5573 x))))

(declare-fun tb2t5573 (uni) (tuple21 (tuple21 (tuple21 a b) a)
  (tuple21 (tuple21 a c) a)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 a b) a) (tuple21 (tuple21 a c) a))))
  (! (= (tb2t5573 (t2tb5573 i)) i) :pattern ((t2tb5573 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 (tuple2 a1 b1) a1) (tuple2 (tuple2 a1 c1) a1))
     j) (= (t2tb5573 (tb2t5573 j)) j)) :pattern ((t2tb5573 (tb2t5573 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 (tuple21 a b) (tuple21 a c)))) (k (set (tuple21 a
  a))) (x (tuple21 a b)) (y a) (z (tuple21 a c)) (w a))
  (= (mem (tuple2 (tuple2 (tuple2 a1 b1) a1) (tuple2 (tuple2 a1 c1) a1))
  (Tuple2 (tuple2 (tuple2 a1 b1) a1) (tuple2 (tuple2 a1 c1) a1)
  (Tuple2 (tuple2 a1 b1) a1 (t2tb13 x) (t2tb2 y))
  (Tuple2 (tuple2 a1 c1) a1 (t2tb133 z) (t2tb2 w)))
  (parallel_product a1 a1 (tuple2 a1 c1) (tuple2 a1 b1) (t2tb238 h)
  (t2tb4 k)))
  (and (mem51
  (tb2t239 (Tuple2 (tuple2 a1 b1) (tuple2 a1 c1) (t2tb13 x) (t2tb133 z))) h)
  (mem12 (tb2t5 (Tuple2 a1 a1 (t2tb2 y) (t2tb2 w))) k)))))

;; mem_parallel_product
  (assert
  (forall ((c2 ty) (d2 ty))
  (forall ((h (set (tuple21 (tuple21 a b) (tuple21 a c)))) (k uni)
  (x (tuple21 a b)) (y uni) (z (tuple21 a c)) (w uni))
  (= (mem (tuple2 (tuple2 (tuple2 a1 b1) c2) (tuple2 (tuple2 a1 c1) d2))
  (Tuple2 (tuple2 (tuple2 a1 b1) c2) (tuple2 (tuple2 a1 c1) d2)
  (Tuple2 (tuple2 a1 b1) c2 (t2tb13 x) y)
  (Tuple2 (tuple2 a1 c1) d2 (t2tb133 z) w))
  (parallel_product d2 c2 (tuple2 a1 c1) (tuple2 a1 b1) (t2tb238 h) k))
  (and (mem51
  (tb2t239 (Tuple2 (tuple2 a1 b1) (tuple2 a1 c1) (t2tb13 x) (t2tb133 z))) h)
  (mem (tuple2 c2 d2) (Tuple2 c2 d2 y w) k))))))

(declare-fun t2tb5574 ((set (tuple21 (tuple21 b (tuple21 a b)) (tuple21 c
  (tuple21 a c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b (tuple21 a b)) (tuple21 c (tuple21 a
  c)))))) (sort
  (set1 (tuple2 (tuple2 b1 (tuple2 a1 b1)) (tuple2 c1 (tuple2 a1 c1))))
  (t2tb5574 x))))

(declare-fun tb2t5574 (uni) (set (tuple21 (tuple21 b (tuple21 a b))
  (tuple21 c (tuple21 a c)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b (tuple21 a b)) (tuple21 c (tuple21 a
  c)))))) (! (= (tb2t5574 (t2tb5574 i)) i) :pattern ((t2tb5574 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 b1 (tuple2 a1 b1)) (tuple2 c1 (tuple2 a1 c1)))) j)
     (= (t2tb5574 (tb2t5574 j)) j)) :pattern ((t2tb5574 (tb2t5574 j))) )))

(declare-fun t2tb5575 ((tuple21 (tuple21 b (tuple21 a b)) (tuple21 c
  (tuple21 a c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b (tuple21 a b)) (tuple21 c (tuple21 a c)))))
  (sort (tuple2 (tuple2 b1 (tuple2 a1 b1)) (tuple2 c1 (tuple2 a1 c1)))
  (t2tb5575 x))))

(declare-fun tb2t5575 (uni) (tuple21 (tuple21 b (tuple21 a b)) (tuple21 c
  (tuple21 a c))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b (tuple21 a b)) (tuple21 c (tuple21 a c)))))
  (! (= (tb2t5575 (t2tb5575 i)) i) :pattern ((t2tb5575 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 (tuple2 a1 b1)) (tuple2 c1 (tuple2 a1 c1)))
     j) (= (t2tb5575 (tb2t5575 j)) j)) :pattern ((t2tb5575 (tb2t5575 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 b c))) (k (set (tuple21 (tuple21 a b) (tuple21 a
  c)))) (x b) (y (tuple21 a b)) (z c) (w (tuple21 a c)))
  (= (mem (tuple2 (tuple2 b1 (tuple2 a1 b1)) (tuple2 c1 (tuple2 a1 c1)))
  (Tuple2 (tuple2 b1 (tuple2 a1 b1)) (tuple2 c1 (tuple2 a1 c1))
  (Tuple2 b1 (tuple2 a1 b1) (t2tb14 x) (t2tb13 y))
  (Tuple2 c1 (tuple2 a1 c1) (t2tb135 z) (t2tb133 w)))
  (parallel_product (tuple2 a1 c1) (tuple2 a1 b1) c1 b1 (t2tb131 h)
  (t2tb238 k)))
  (and (mem8 (tb2t134 (Tuple2 b1 c1 (t2tb14 x) (t2tb135 z))) h) (mem51
  (tb2t239 (Tuple2 (tuple2 a1 b1) (tuple2 a1 c1) (t2tb13 y) (t2tb133 w))) k)))))

(declare-fun t2tb1172 ((set (tuple21 (tuple21 b b) (tuple21 c c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b b) (tuple21 c c))))) (sort
  (set1 (tuple2 (tuple2 b1 b1) (tuple2 c1 c1))) (t2tb1172 x))))

(declare-fun tb2t1172 (uni) (set (tuple21 (tuple21 b b) (tuple21 c c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b b) (tuple21 c c)))))
  (! (= (tb2t1172 (t2tb1172 i)) i) :pattern ((t2tb1172 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 b1) (tuple2 c1 c1))) j)
     (= (t2tb1172 (tb2t1172 j)) j)) :pattern ((t2tb1172 (tb2t1172 j))) )))

(declare-fun t2tb1173 ((tuple21 (tuple21 b b) (tuple21 c c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b b) (tuple21 c c)))) (sort
  (tuple2 (tuple2 b1 b1) (tuple2 c1 c1)) (t2tb1173 x))))

(declare-fun tb2t1173 (uni) (tuple21 (tuple21 b b) (tuple21 c c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b b) (tuple21 c c))))
  (! (= (tb2t1173 (t2tb1173 i)) i) :pattern ((t2tb1173 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 b1) (tuple2 c1 c1)) j)
     (= (t2tb1173 (tb2t1173 j)) j)) :pattern ((t2tb1173 (tb2t1173 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 b c))) (k (set (tuple21 b c))) (x b) (y b) (z c)
  (w c))
  (= (mem (tuple2 (tuple2 b1 b1) (tuple2 c1 c1))
  (Tuple2 (tuple2 b1 b1) (tuple2 c1 c1) (Tuple2 b1 b1 (t2tb14 x) (t2tb14 y))
  (Tuple2 c1 c1 (t2tb135 z) (t2tb135 w)))
  (parallel_product c1 b1 c1 b1 (t2tb131 h) (t2tb131 k)))
  (and (mem8 (tb2t134 (Tuple2 b1 c1 (t2tb14 x) (t2tb135 z))) h) (mem8
  (tb2t134 (Tuple2 b1 c1 (t2tb14 y) (t2tb135 w))) k)))))

(declare-fun t2tb1174 ((set (tuple21 (tuple21 b a) (tuple21 c c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b a) (tuple21 c c))))) (sort
  (set1 (tuple2 (tuple2 b1 a1) (tuple2 c1 c1))) (t2tb1174 x))))

(declare-fun tb2t1174 (uni) (set (tuple21 (tuple21 b a) (tuple21 c c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b a) (tuple21 c c)))))
  (! (= (tb2t1174 (t2tb1174 i)) i) :pattern ((t2tb1174 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 a1) (tuple2 c1 c1))) j)
     (= (t2tb1174 (tb2t1174 j)) j)) :pattern ((t2tb1174 (tb2t1174 j))) )))

(declare-fun t2tb1175 ((tuple21 (tuple21 b a) (tuple21 c c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b a) (tuple21 c c)))) (sort
  (tuple2 (tuple2 b1 a1) (tuple2 c1 c1)) (t2tb1175 x))))

(declare-fun tb2t1175 (uni) (tuple21 (tuple21 b a) (tuple21 c c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b a) (tuple21 c c))))
  (! (= (tb2t1175 (t2tb1175 i)) i) :pattern ((t2tb1175 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 a1) (tuple2 c1 c1)) j)
     (= (t2tb1175 (tb2t1175 j)) j)) :pattern ((t2tb1175 (tb2t1175 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 b c))) (k (set (tuple21 a c))) (x b) (y a) (z c)
  (w c))
  (= (mem (tuple2 (tuple2 b1 a1) (tuple2 c1 c1))
  (Tuple2 (tuple2 b1 a1) (tuple2 c1 c1) (Tuple2 b1 a1 (t2tb14 x) (t2tb2 y))
  (Tuple2 c1 c1 (t2tb135 z) (t2tb135 w)))
  (parallel_product c1 a1 c1 b1 (t2tb131 h) (t2tb129 k)))
  (and (mem8 (tb2t134 (Tuple2 b1 c1 (t2tb14 x) (t2tb135 z))) h) (mem10
  (tb2t133 (Tuple2 a1 c1 (t2tb2 y) (t2tb135 w))) k)))))

(declare-fun t2tb1176 ((set (tuple21 (tuple21 b a) (tuple21 c b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b a) (tuple21 c b))))) (sort
  (set1 (tuple2 (tuple2 b1 a1) (tuple2 c1 b1))) (t2tb1176 x))))

(declare-fun tb2t1176 (uni) (set (tuple21 (tuple21 b a) (tuple21 c b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b a) (tuple21 c b)))))
  (! (= (tb2t1176 (t2tb1176 i)) i) :pattern ((t2tb1176 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 a1) (tuple2 c1 b1))) j)
     (= (t2tb1176 (tb2t1176 j)) j)) :pattern ((t2tb1176 (tb2t1176 j))) )))

(declare-fun t2tb1177 ((tuple21 (tuple21 b a) (tuple21 c b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b a) (tuple21 c b)))) (sort
  (tuple2 (tuple2 b1 a1) (tuple2 c1 b1)) (t2tb1177 x))))

(declare-fun tb2t1177 (uni) (tuple21 (tuple21 b a) (tuple21 c b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b a) (tuple21 c b))))
  (! (= (tb2t1177 (t2tb1177 i)) i) :pattern ((t2tb1177 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 a1) (tuple2 c1 b1)) j)
     (= (t2tb1177 (tb2t1177 j)) j)) :pattern ((t2tb1177 (tb2t1177 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 b c))) (k (set (tuple21 a b))) (x b) (y a) (z c)
  (w b))
  (= (mem (tuple2 (tuple2 b1 a1) (tuple2 c1 b1))
  (Tuple2 (tuple2 b1 a1) (tuple2 c1 b1) (Tuple2 b1 a1 (t2tb14 x) (t2tb2 y))
  (Tuple2 c1 b1 (t2tb135 z) (t2tb14 w)))
  (parallel_product b1 a1 c1 b1 (t2tb131 h) (t2tb11 k)))
  (and (mem8 (tb2t134 (Tuple2 b1 c1 (t2tb14 x) (t2tb135 z))) h) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 y) (t2tb14 w))) k)))))

(declare-fun t2tb5576 ((set (tuple21 (tuple21 b a) (tuple21 c a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b a) (tuple21 c a))))) (sort
  (set1 (tuple2 (tuple2 b1 a1) (tuple2 c1 a1))) (t2tb5576 x))))

(declare-fun tb2t5576 (uni) (set (tuple21 (tuple21 b a) (tuple21 c a))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b a) (tuple21 c a)))))
  (! (= (tb2t5576 (t2tb5576 i)) i) :pattern ((t2tb5576 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 a1) (tuple2 c1 a1))) j)
     (= (t2tb5576 (tb2t5576 j)) j)) :pattern ((t2tb5576 (tb2t5576 j))) )))

(declare-fun t2tb5577 ((tuple21 (tuple21 b a) (tuple21 c a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b a) (tuple21 c a)))) (sort
  (tuple2 (tuple2 b1 a1) (tuple2 c1 a1)) (t2tb5577 x))))

(declare-fun tb2t5577 (uni) (tuple21 (tuple21 b a) (tuple21 c a)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b a) (tuple21 c a))))
  (! (= (tb2t5577 (t2tb5577 i)) i) :pattern ((t2tb5577 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 a1) (tuple2 c1 a1)) j)
     (= (t2tb5577 (tb2t5577 j)) j)) :pattern ((t2tb5577 (tb2t5577 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 b c))) (k (set (tuple21 a a))) (x b) (y a) (z c)
  (w a))
  (= (mem (tuple2 (tuple2 b1 a1) (tuple2 c1 a1))
  (Tuple2 (tuple2 b1 a1) (tuple2 c1 a1) (Tuple2 b1 a1 (t2tb14 x) (t2tb2 y))
  (Tuple2 c1 a1 (t2tb135 z) (t2tb2 w)))
  (parallel_product a1 a1 c1 b1 (t2tb131 h) (t2tb4 k)))
  (and (mem8 (tb2t134 (Tuple2 b1 c1 (t2tb14 x) (t2tb135 z))) h) (mem12
  (tb2t5 (Tuple2 a1 a1 (t2tb2 y) (t2tb2 w))) k)))))

;; mem_parallel_product
  (assert
  (forall ((c2 ty) (d2 ty))
  (forall ((h (set (tuple21 b c))) (k uni) (x b) (y uni) (z c) (w uni))
  (= (mem (tuple2 (tuple2 b1 c2) (tuple2 c1 d2))
  (Tuple2 (tuple2 b1 c2) (tuple2 c1 d2) (Tuple2 b1 c2 (t2tb14 x) y)
  (Tuple2 c1 d2 (t2tb135 z) w)) (parallel_product d2 c2 c1 b1 (t2tb131 h) k))
  (and (mem8 (tb2t134 (Tuple2 b1 c1 (t2tb14 x) (t2tb135 z))) h) (mem
  (tuple2 c2 d2) (Tuple2 c2 d2 y w) k))))))

(declare-fun t2tb5578 ((set (tuple21 (tuple21 a (tuple21 a b)) (tuple21 c
  (tuple21 a c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a (tuple21 a b)) (tuple21 c (tuple21 a
  c)))))) (sort
  (set1 (tuple2 (tuple2 a1 (tuple2 a1 b1)) (tuple2 c1 (tuple2 a1 c1))))
  (t2tb5578 x))))

(declare-fun tb2t5578 (uni) (set (tuple21 (tuple21 a (tuple21 a b))
  (tuple21 c (tuple21 a c)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a (tuple21 a b)) (tuple21 c (tuple21 a
  c)))))) (! (= (tb2t5578 (t2tb5578 i)) i) :pattern ((t2tb5578 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 a1 (tuple2 a1 b1)) (tuple2 c1 (tuple2 a1 c1)))) j)
     (= (t2tb5578 (tb2t5578 j)) j)) :pattern ((t2tb5578 (tb2t5578 j))) )))

(declare-fun t2tb5579 ((tuple21 (tuple21 a (tuple21 a b)) (tuple21 c
  (tuple21 a c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a (tuple21 a b)) (tuple21 c (tuple21 a c)))))
  (sort (tuple2 (tuple2 a1 (tuple2 a1 b1)) (tuple2 c1 (tuple2 a1 c1)))
  (t2tb5579 x))))

(declare-fun tb2t5579 (uni) (tuple21 (tuple21 a (tuple21 a b)) (tuple21 c
  (tuple21 a c))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a (tuple21 a b)) (tuple21 c (tuple21 a c)))))
  (! (= (tb2t5579 (t2tb5579 i)) i) :pattern ((t2tb5579 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 (tuple2 a1 b1)) (tuple2 c1 (tuple2 a1 c1)))
     j) (= (t2tb5579 (tb2t5579 j)) j)) :pattern ((t2tb5579 (tb2t5579 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a c))) (k (set (tuple21 (tuple21 a b) (tuple21 a
  c)))) (x a) (y (tuple21 a b)) (z c) (w (tuple21 a c)))
  (= (mem (tuple2 (tuple2 a1 (tuple2 a1 b1)) (tuple2 c1 (tuple2 a1 c1)))
  (Tuple2 (tuple2 a1 (tuple2 a1 b1)) (tuple2 c1 (tuple2 a1 c1))
  (Tuple2 a1 (tuple2 a1 b1) (t2tb2 x) (t2tb13 y))
  (Tuple2 c1 (tuple2 a1 c1) (t2tb135 z) (t2tb133 w)))
  (parallel_product (tuple2 a1 c1) (tuple2 a1 b1) c1 a1 (t2tb129 h)
  (t2tb238 k)))
  (and (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 z))) h) (mem51
  (tb2t239 (Tuple2 (tuple2 a1 b1) (tuple2 a1 c1) (t2tb13 y) (t2tb133 w))) k)))))

(declare-fun t2tb1178 ((set (tuple21 (tuple21 a b) (tuple21 c c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) (tuple21 c c))))) (sort
  (set1 (tuple2 (tuple2 a1 b1) (tuple2 c1 c1))) (t2tb1178 x))))

(declare-fun tb2t1178 (uni) (set (tuple21 (tuple21 a b) (tuple21 c c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a b) (tuple21 c c)))))
  (! (= (tb2t1178 (t2tb1178 i)) i) :pattern ((t2tb1178 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 b1) (tuple2 c1 c1))) j)
     (= (t2tb1178 (tb2t1178 j)) j)) :pattern ((t2tb1178 (tb2t1178 j))) )))

(declare-fun t2tb1179 ((tuple21 (tuple21 a b) (tuple21 c c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a b) (tuple21 c c)))) (sort
  (tuple2 (tuple2 a1 b1) (tuple2 c1 c1)) (t2tb1179 x))))

(declare-fun tb2t1179 (uni) (tuple21 (tuple21 a b) (tuple21 c c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a b) (tuple21 c c))))
  (! (= (tb2t1179 (t2tb1179 i)) i) :pattern ((t2tb1179 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 b1) (tuple2 c1 c1)) j)
     (= (t2tb1179 (tb2t1179 j)) j)) :pattern ((t2tb1179 (tb2t1179 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a c))) (k (set (tuple21 b c))) (x a) (y b) (z c)
  (w c))
  (= (mem (tuple2 (tuple2 a1 b1) (tuple2 c1 c1))
  (Tuple2 (tuple2 a1 b1) (tuple2 c1 c1) (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y))
  (Tuple2 c1 c1 (t2tb135 z) (t2tb135 w)))
  (parallel_product c1 b1 c1 a1 (t2tb129 h) (t2tb131 k)))
  (and (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 z))) h) (mem8
  (tb2t134 (Tuple2 b1 c1 (t2tb14 y) (t2tb135 w))) k)))))

(declare-fun t2tb342 ((set (tuple21 (tuple21 a a) (tuple21 c c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a a) (tuple21 c c))))) (sort
  (set1 (tuple2 (tuple2 a1 a1) (tuple2 c1 c1))) (t2tb342 x))))

(declare-fun tb2t342 (uni) (set (tuple21 (tuple21 a a) (tuple21 c c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a a) (tuple21 c c)))))
  (! (= (tb2t342 (t2tb342 i)) i) :pattern ((t2tb342 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 a1) (tuple2 c1 c1))) j)
     (= (t2tb342 (tb2t342 j)) j)) :pattern ((t2tb342 (tb2t342 j))) )))

(declare-fun t2tb343 ((tuple21 (tuple21 a a) (tuple21 c c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a a) (tuple21 c c)))) (sort
  (tuple2 (tuple2 a1 a1) (tuple2 c1 c1)) (t2tb343 x))))

(declare-fun tb2t343 (uni) (tuple21 (tuple21 a a) (tuple21 c c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a a) (tuple21 c c))))
  (! (= (tb2t343 (t2tb343 i)) i) :pattern ((t2tb343 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 a1) (tuple2 c1 c1)) j)
     (= (t2tb343 (tb2t343 j)) j)) :pattern ((t2tb343 (tb2t343 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a c))) (k (set (tuple21 a c))) (x a) (y a) (z c)
  (w c))
  (= (mem (tuple2 (tuple2 a1 a1) (tuple2 c1 c1))
  (Tuple2 (tuple2 a1 a1) (tuple2 c1 c1) (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y))
  (Tuple2 c1 c1 (t2tb135 z) (t2tb135 w)))
  (parallel_product c1 a1 c1 a1 (t2tb129 h) (t2tb129 k)))
  (and (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 z))) h) (mem10
  (tb2t133 (Tuple2 a1 c1 (t2tb2 y) (t2tb135 w))) k)))))

(declare-fun t2tb344 ((set (tuple21 (tuple21 a a) (tuple21 c b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a a) (tuple21 c b))))) (sort
  (set1 (tuple2 (tuple2 a1 a1) (tuple2 c1 b1))) (t2tb344 x))))

(declare-fun tb2t344 (uni) (set (tuple21 (tuple21 a a) (tuple21 c b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a a) (tuple21 c b)))))
  (! (= (tb2t344 (t2tb344 i)) i) :pattern ((t2tb344 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 a1) (tuple2 c1 b1))) j)
     (= (t2tb344 (tb2t344 j)) j)) :pattern ((t2tb344 (tb2t344 j))) )))

(declare-fun t2tb345 ((tuple21 (tuple21 a a) (tuple21 c b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a a) (tuple21 c b)))) (sort
  (tuple2 (tuple2 a1 a1) (tuple2 c1 b1)) (t2tb345 x))))

(declare-fun tb2t345 (uni) (tuple21 (tuple21 a a) (tuple21 c b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a a) (tuple21 c b))))
  (! (= (tb2t345 (t2tb345 i)) i) :pattern ((t2tb345 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 a1) (tuple2 c1 b1)) j)
     (= (t2tb345 (tb2t345 j)) j)) :pattern ((t2tb345 (tb2t345 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a c))) (k (set (tuple21 a b))) (x a) (y a) (z c)
  (w b))
  (= (mem (tuple2 (tuple2 a1 a1) (tuple2 c1 b1))
  (Tuple2 (tuple2 a1 a1) (tuple2 c1 b1) (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y))
  (Tuple2 c1 b1 (t2tb135 z) (t2tb14 w)))
  (parallel_product b1 a1 c1 a1 (t2tb129 h) (t2tb11 k)))
  (and (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 z))) h) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 y) (t2tb14 w))) k)))))

(declare-fun t2tb5580 ((set (tuple21 (tuple21 a a) (tuple21 c a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a a) (tuple21 c a))))) (sort
  (set1 (tuple2 (tuple2 a1 a1) (tuple2 c1 a1))) (t2tb5580 x))))

(declare-fun tb2t5580 (uni) (set (tuple21 (tuple21 a a) (tuple21 c a))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a a) (tuple21 c a)))))
  (! (= (tb2t5580 (t2tb5580 i)) i) :pattern ((t2tb5580 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 a1) (tuple2 c1 a1))) j)
     (= (t2tb5580 (tb2t5580 j)) j)) :pattern ((t2tb5580 (tb2t5580 j))) )))

(declare-fun t2tb5581 ((tuple21 (tuple21 a a) (tuple21 c a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a a) (tuple21 c a)))) (sort
  (tuple2 (tuple2 a1 a1) (tuple2 c1 a1)) (t2tb5581 x))))

(declare-fun tb2t5581 (uni) (tuple21 (tuple21 a a) (tuple21 c a)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a a) (tuple21 c a))))
  (! (= (tb2t5581 (t2tb5581 i)) i) :pattern ((t2tb5581 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 a1) (tuple2 c1 a1)) j)
     (= (t2tb5581 (tb2t5581 j)) j)) :pattern ((t2tb5581 (tb2t5581 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a c))) (k (set (tuple21 a a))) (x a) (y a) (z c)
  (w a))
  (= (mem (tuple2 (tuple2 a1 a1) (tuple2 c1 a1))
  (Tuple2 (tuple2 a1 a1) (tuple2 c1 a1) (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y))
  (Tuple2 c1 a1 (t2tb135 z) (t2tb2 w)))
  (parallel_product a1 a1 c1 a1 (t2tb129 h) (t2tb4 k)))
  (and (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 z))) h) (mem12
  (tb2t5 (Tuple2 a1 a1 (t2tb2 y) (t2tb2 w))) k)))))

;; mem_parallel_product
  (assert
  (forall ((c2 ty) (d2 ty))
  (forall ((h (set (tuple21 a c))) (k uni) (x a) (y uni) (z c) (w uni))
  (= (mem (tuple2 (tuple2 a1 c2) (tuple2 c1 d2))
  (Tuple2 (tuple2 a1 c2) (tuple2 c1 d2) (Tuple2 a1 c2 (t2tb2 x) y)
  (Tuple2 c1 d2 (t2tb135 z) w)) (parallel_product d2 c2 c1 a1 (t2tb129 h) k))
  (and (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 z))) h) (mem
  (tuple2 c2 d2) (Tuple2 c2 d2 y w) k))))))

(declare-fun t2tb5582 ((set (tuple21 (tuple21 a (tuple21 a b)) (tuple21 b
  (tuple21 a c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a (tuple21 a b)) (tuple21 b (tuple21 a
  c)))))) (sort
  (set1 (tuple2 (tuple2 a1 (tuple2 a1 b1)) (tuple2 b1 (tuple2 a1 c1))))
  (t2tb5582 x))))

(declare-fun tb2t5582 (uni) (set (tuple21 (tuple21 a (tuple21 a b))
  (tuple21 b (tuple21 a c)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a (tuple21 a b)) (tuple21 b (tuple21 a
  c)))))) (! (= (tb2t5582 (t2tb5582 i)) i) :pattern ((t2tb5582 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 a1 (tuple2 a1 b1)) (tuple2 b1 (tuple2 a1 c1)))) j)
     (= (t2tb5582 (tb2t5582 j)) j)) :pattern ((t2tb5582 (tb2t5582 j))) )))

(declare-fun t2tb5583 ((tuple21 (tuple21 a (tuple21 a b)) (tuple21 b
  (tuple21 a c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a (tuple21 a b)) (tuple21 b (tuple21 a c)))))
  (sort (tuple2 (tuple2 a1 (tuple2 a1 b1)) (tuple2 b1 (tuple2 a1 c1)))
  (t2tb5583 x))))

(declare-fun tb2t5583 (uni) (tuple21 (tuple21 a (tuple21 a b)) (tuple21 b
  (tuple21 a c))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a (tuple21 a b)) (tuple21 b (tuple21 a c)))))
  (! (= (tb2t5583 (t2tb5583 i)) i) :pattern ((t2tb5583 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 (tuple2 a1 b1)) (tuple2 b1 (tuple2 a1 c1)))
     j) (= (t2tb5583 (tb2t5583 j)) j)) :pattern ((t2tb5583 (tb2t5583 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a b))) (k (set (tuple21 (tuple21 a b) (tuple21 a
  c)))) (x a) (y (tuple21 a b)) (z b) (w (tuple21 a c)))
  (= (mem (tuple2 (tuple2 a1 (tuple2 a1 b1)) (tuple2 b1 (tuple2 a1 c1)))
  (Tuple2 (tuple2 a1 (tuple2 a1 b1)) (tuple2 b1 (tuple2 a1 c1))
  (Tuple2 a1 (tuple2 a1 b1) (t2tb2 x) (t2tb13 y))
  (Tuple2 b1 (tuple2 a1 c1) (t2tb14 z) (t2tb133 w)))
  (parallel_product (tuple2 a1 c1) (tuple2 a1 b1) b1 a1 (t2tb11 h)
  (t2tb238 k)))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 z))) h) (mem51
  (tb2t239 (Tuple2 (tuple2 a1 b1) (tuple2 a1 c1) (t2tb13 y) (t2tb133 w))) k)))))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a b))) (k (set (tuple21 b c))) (x a) (y b) (z b)
  (w c))
  (= (mem (tuple2 (tuple2 a1 b1) (tuple2 b1 c1))
  (Tuple2 (tuple2 a1 b1) (tuple2 b1 c1) (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y))
  (Tuple2 b1 c1 (t2tb14 z) (t2tb135 w)))
  (parallel_product c1 b1 b1 a1 (t2tb11 h) (t2tb131 k)))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 z))) h) (mem8
  (tb2t134 (Tuple2 b1 c1 (t2tb14 y) (t2tb135 w))) k)))))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a b))) (k (set (tuple21 a c))) (x a) (y a) (z b)
  (w c))
  (= (mem (tuple2 (tuple2 a1 a1) (tuple2 b1 c1))
  (Tuple2 (tuple2 a1 a1) (tuple2 b1 c1) (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y))
  (Tuple2 b1 c1 (t2tb14 z) (t2tb135 w)))
  (parallel_product c1 a1 b1 a1 (t2tb11 h) (t2tb129 k)))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 z))) h) (mem10
  (tb2t133 (Tuple2 a1 c1 (t2tb2 y) (t2tb135 w))) k)))))

(declare-fun t2tb61 ((set (tuple21 (tuple21 a a) (tuple21 b b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a a) (tuple21 b b))))) (sort
  (set1 (tuple2 (tuple2 a1 a1) (tuple2 b1 b1))) (t2tb61 x))))

(declare-fun tb2t61 (uni) (set (tuple21 (tuple21 a a) (tuple21 b b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a a) (tuple21 b b)))))
  (! (= (tb2t61 (t2tb61 i)) i) :pattern ((t2tb61 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 a1) (tuple2 b1 b1))) j)
     (= (t2tb61 (tb2t61 j)) j)) :pattern ((t2tb61 (tb2t61 j))) )))

(declare-fun t2tb62 ((tuple21 (tuple21 a a) (tuple21 b b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a a) (tuple21 b b)))) (sort
  (tuple2 (tuple2 a1 a1) (tuple2 b1 b1)) (t2tb62 x))))

(declare-fun tb2t62 (uni) (tuple21 (tuple21 a a) (tuple21 b b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a a) (tuple21 b b))))
  (! (= (tb2t62 (t2tb62 i)) i) :pattern ((t2tb62 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 a1) (tuple2 b1 b1)) j)
     (= (t2tb62 (tb2t62 j)) j)) :pattern ((t2tb62 (tb2t62 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a b))) (k (set (tuple21 a b))) (x a) (y a) (z b)
  (w b))
  (= (mem (tuple2 (tuple2 a1 a1) (tuple2 b1 b1))
  (Tuple2 (tuple2 a1 a1) (tuple2 b1 b1) (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y))
  (Tuple2 b1 b1 (t2tb14 z) (t2tb14 w)))
  (parallel_product b1 a1 b1 a1 (t2tb11 h) (t2tb11 k)))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 z))) h) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 y) (t2tb14 w))) k)))))

(declare-fun t2tb2739 ((set (tuple21 (tuple21 a a) (tuple21 b a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a a) (tuple21 b a))))) (sort
  (set1 (tuple2 (tuple2 a1 a1) (tuple2 b1 a1))) (t2tb2739 x))))

(declare-fun tb2t2739 (uni) (set (tuple21 (tuple21 a a) (tuple21 b a))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a a) (tuple21 b a)))))
  (! (= (tb2t2739 (t2tb2739 i)) i) :pattern ((t2tb2739 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 a1) (tuple2 b1 a1))) j)
     (= (t2tb2739 (tb2t2739 j)) j)) :pattern ((t2tb2739 (tb2t2739 j))) )))

(declare-fun t2tb2740 ((tuple21 (tuple21 a a) (tuple21 b a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a a) (tuple21 b a)))) (sort
  (tuple2 (tuple2 a1 a1) (tuple2 b1 a1)) (t2tb2740 x))))

(declare-fun tb2t2740 (uni) (tuple21 (tuple21 a a) (tuple21 b a)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a a) (tuple21 b a))))
  (! (= (tb2t2740 (t2tb2740 i)) i) :pattern ((t2tb2740 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 a1) (tuple2 b1 a1)) j)
     (= (t2tb2740 (tb2t2740 j)) j)) :pattern ((t2tb2740 (tb2t2740 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a b))) (k (set (tuple21 a a))) (x a) (y a) (z b)
  (w a))
  (= (mem (tuple2 (tuple2 a1 a1) (tuple2 b1 a1))
  (Tuple2 (tuple2 a1 a1) (tuple2 b1 a1) (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y))
  (Tuple2 b1 a1 (t2tb14 z) (t2tb2 w)))
  (parallel_product a1 a1 b1 a1 (t2tb11 h) (t2tb4 k)))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 z))) h) (mem12
  (tb2t5 (Tuple2 a1 a1 (t2tb2 y) (t2tb2 w))) k)))))

;; mem_parallel_product
  (assert
  (forall ((c2 ty) (d2 ty))
  (forall ((h (set (tuple21 a b))) (k uni) (x a) (y uni) (z b) (w uni))
  (= (mem (tuple2 (tuple2 a1 c2) (tuple2 b1 d2))
  (Tuple2 (tuple2 a1 c2) (tuple2 b1 d2) (Tuple2 a1 c2 (t2tb2 x) y)
  (Tuple2 b1 d2 (t2tb14 z) w)) (parallel_product d2 c2 b1 a1 (t2tb11 h) k))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 z))) h) (mem
  (tuple2 c2 d2) (Tuple2 c2 d2 y w) k))))))

(declare-fun t2tb5584 ((set (tuple21 (tuple21 a (tuple21 a b)) (tuple21 a
  (tuple21 a c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a (tuple21 a b)) (tuple21 a (tuple21 a
  c)))))) (sort
  (set1 (tuple2 (tuple2 a1 (tuple2 a1 b1)) (tuple2 a1 (tuple2 a1 c1))))
  (t2tb5584 x))))

(declare-fun tb2t5584 (uni) (set (tuple21 (tuple21 a (tuple21 a b))
  (tuple21 a (tuple21 a c)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a (tuple21 a b)) (tuple21 a (tuple21 a
  c)))))) (! (= (tb2t5584 (t2tb5584 i)) i) :pattern ((t2tb5584 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 a1 (tuple2 a1 b1)) (tuple2 a1 (tuple2 a1 c1)))) j)
     (= (t2tb5584 (tb2t5584 j)) j)) :pattern ((t2tb5584 (tb2t5584 j))) )))

(declare-fun t2tb5585 ((tuple21 (tuple21 a (tuple21 a b)) (tuple21 a
  (tuple21 a c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a (tuple21 a b)) (tuple21 a (tuple21 a c)))))
  (sort (tuple2 (tuple2 a1 (tuple2 a1 b1)) (tuple2 a1 (tuple2 a1 c1)))
  (t2tb5585 x))))

(declare-fun tb2t5585 (uni) (tuple21 (tuple21 a (tuple21 a b)) (tuple21 a
  (tuple21 a c))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a (tuple21 a b)) (tuple21 a (tuple21 a c)))))
  (! (= (tb2t5585 (t2tb5585 i)) i) :pattern ((t2tb5585 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 (tuple2 a1 b1)) (tuple2 a1 (tuple2 a1 c1)))
     j) (= (t2tb5585 (tb2t5585 j)) j)) :pattern ((t2tb5585 (tb2t5585 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a a))) (k (set (tuple21 (tuple21 a b) (tuple21 a
  c)))) (x a) (y (tuple21 a b)) (z a) (w (tuple21 a c)))
  (= (mem (tuple2 (tuple2 a1 (tuple2 a1 b1)) (tuple2 a1 (tuple2 a1 c1)))
  (Tuple2 (tuple2 a1 (tuple2 a1 b1)) (tuple2 a1 (tuple2 a1 c1))
  (Tuple2 a1 (tuple2 a1 b1) (t2tb2 x) (t2tb13 y))
  (Tuple2 a1 (tuple2 a1 c1) (t2tb2 z) (t2tb133 w)))
  (parallel_product (tuple2 a1 c1) (tuple2 a1 b1) a1 a1 (t2tb4 h)
  (t2tb238 k)))
  (and (mem12 (tb2t5 (Tuple2 a1 a1 (t2tb2 x) (t2tb2 z))) h) (mem51
  (tb2t239 (Tuple2 (tuple2 a1 b1) (tuple2 a1 c1) (t2tb13 y) (t2tb133 w))) k)))))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a a))) (k (set (tuple21 b c))) (x a) (y b) (z a)
  (w c))
  (= (mem51
  (tb2t239
  (Tuple2 (tuple2 a1 b1) (tuple2 a1 c1) (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y))
  (Tuple2 a1 c1 (t2tb2 z) (t2tb135 w)))) (parallel_product7 h k))
  (and (mem12 (tb2t5 (Tuple2 a1 a1 (t2tb2 x) (t2tb2 z))) h) (mem8
  (tb2t134 (Tuple2 b1 c1 (t2tb14 y) (t2tb135 w))) k)))))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a a))) (k (set (tuple21 a c))) (x a) (y a) (z a)
  (w c))
  (= (mem (tuple2 (tuple2 a1 a1) (tuple2 a1 c1))
  (Tuple2 (tuple2 a1 a1) (tuple2 a1 c1) (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y))
  (Tuple2 a1 c1 (t2tb2 z) (t2tb135 w)))
  (parallel_product c1 a1 a1 a1 (t2tb4 h) (t2tb129 k)))
  (and (mem12 (tb2t5 (Tuple2 a1 a1 (t2tb2 x) (t2tb2 z))) h) (mem10
  (tb2t133 (Tuple2 a1 c1 (t2tb2 y) (t2tb135 w))) k)))))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a a))) (k (set (tuple21 a b))) (x a) (y a) (z a)
  (w b))
  (= (mem (tuple2 (tuple2 a1 a1) (tuple2 a1 b1))
  (Tuple2 (tuple2 a1 a1) (tuple2 a1 b1) (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y))
  (Tuple2 a1 b1 (t2tb2 z) (t2tb14 w)))
  (parallel_product b1 a1 a1 a1 (t2tb4 h) (t2tb11 k)))
  (and (mem12 (tb2t5 (Tuple2 a1 a1 (t2tb2 x) (t2tb2 z))) h) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 y) (t2tb14 w))) k)))))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a a))) (k (set (tuple21 a a))) (x a) (y a) (z a)
  (w a))
  (= (mem (tuple2 (tuple2 a1 a1) (tuple2 a1 a1))
  (Tuple2 (tuple2 a1 a1) (tuple2 a1 a1) (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y))
  (Tuple2 a1 a1 (t2tb2 z) (t2tb2 w)))
  (parallel_product a1 a1 a1 a1 (t2tb4 h) (t2tb4 k)))
  (and (mem12 (tb2t5 (Tuple2 a1 a1 (t2tb2 x) (t2tb2 z))) h) (mem12
  (tb2t5 (Tuple2 a1 a1 (t2tb2 y) (t2tb2 w))) k)))))

;; mem_parallel_product
  (assert
  (forall ((c2 ty) (d2 ty))
  (forall ((h (set (tuple21 a a))) (k uni) (x a) (y uni) (z a) (w uni))
  (= (mem (tuple2 (tuple2 a1 c2) (tuple2 a1 d2))
  (Tuple2 (tuple2 a1 c2) (tuple2 a1 d2) (Tuple2 a1 c2 (t2tb2 x) y)
  (Tuple2 a1 d2 (t2tb2 z) w)) (parallel_product d2 c2 a1 a1 (t2tb4 h) k))
  (and (mem12 (tb2t5 (Tuple2 a1 a1 (t2tb2 x) (t2tb2 z))) h) (mem
  (tuple2 c2 d2) (Tuple2 c2 d2 y w) k))))))

;; mem_parallel_product
  (assert
  (forall ((a2 ty) (b2 ty) (c2 ty) (d2 ty))
  (forall ((h uni) (k uni) (x uni) (y uni) (z uni) (w uni))
  (= (mem (tuple2 (tuple2 a2 c2) (tuple2 b2 d2))
  (Tuple2 (tuple2 a2 c2) (tuple2 b2 d2) (Tuple2 a2 c2 x y)
  (Tuple2 b2 d2 z w)) (parallel_product d2 c2 b2 a2 h k))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x z) h) (mem (tuple2 c2 d2)
  (Tuple2 c2 d2 y w) k))))))

(declare-fun infix_plmngt (ty ty uni uni) uni)

;; infix +->_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (set1 (tuple2 a2 b2)))
  (infix_plmngt b2 a2 x x1)))))

;; mem_partial_function_set
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (tuple21 a c)))
  (f2 (set (tuple21 (tuple21 a b) (tuple21 a c)))))
  (= (mem (set1 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1))) (t2tb238 f2)
  (infix_plmngt (tuple2 a1 c1) (tuple2 a1 b1) (t2tb11 s) (t2tb129 t)))
  (and (mem (set1 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1))) (t2tb238 f2)
  (relation (tuple2 a1 c1) (tuple2 a1 b1) (t2tb11 s) (t2tb129 t)))
  (forall ((x (tuple21 a b)) (y1 (tuple21 a c)) (y2 (tuple21 a c)))
  (=>
  (and (mem51
  (tb2t239 (Tuple2 (tuple2 a1 b1) (tuple2 a1 c1) (t2tb13 x) (t2tb133 y1)))
  f2) (mem51
  (tb2t239 (Tuple2 (tuple2 a1 b1) (tuple2 a1 c1) (t2tb13 x) (t2tb133 y2)))
  f2)) (= y1 y2)))))))

;; mem_partial_function_set
  (assert
  (forall ((s (set b)) (t (set c)) (f2 (set (tuple21 b c))))
  (= (mem9 f2 (tb2t130 (infix_plmngt c1 b1 (t2tb12 s) (t2tb132 t))))
  (and (mem9 f2 (relation4 s t))
  (forall ((x b) (y1 c) (y2 c))
  (=>
  (and (mem8 (tb2t134 (Tuple2 b1 c1 (t2tb14 x) (t2tb135 y1))) f2) (mem8
  (tb2t134 (Tuple2 b1 c1 (t2tb14 x) (t2tb135 y2))) f2)) (= y1 y2)))))))

;; mem_partial_function_set
  (assert
  (forall ((s (set a)) (t (set c)) (f2 (set (tuple21 a c))))
  (= (mem (set1 (tuple2 a1 c1)) (t2tb129 f2)
  (infix_plmngt c1 a1 (t2tb1 s) (t2tb132 t)))
  (and (mem (set1 (tuple2 a1 c1)) (t2tb129 f2)
  (relation c1 a1 (t2tb1 s) (t2tb132 t)))
  (forall ((x a) (y1 c) (y2 c))
  (=>
  (and (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y1))) f2) (mem10
  (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y2))) f2)) (= y1 y2)))))))

;; mem_partial_function_set
  (assert
  (forall ((s (set a)) (t (set b)) (f2 (set (tuple21 a b))))
  (= (mem4 f2 (tb2t10 (infix_plmngt b1 a1 (t2tb1 s) (t2tb12 t))))
  (and (mem4 f2 (relation1 s t))
  (forall ((x a) (y1 b) (y2 b))
  (=>
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y1))) f2) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y2))) f2)) (= y1 y2)))))))

;; mem_partial_function_set
  (assert
  (forall ((s (set a)) (t (set a)) (f2 (set (tuple21 a a))))
  (= (mem (set1 (tuple2 a1 a1)) (t2tb4 f2)
  (infix_plmngt a1 a1 (t2tb1 s) (t2tb1 t)))
  (and (mem (set1 (tuple2 a1 a1)) (t2tb4 f2)
  (relation a1 a1 (t2tb1 s) (t2tb1 t)))
  (forall ((x a) (y1 a) (y2 a))
  (=>
  (and (mem12 (tb2t5 (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y1))) f2) (mem12
  (tb2t5 (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y2))) f2)) (= y1 y2)))))))

;; mem_partial_function_set
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (f2 uni))
  (and
  (=> (mem (set1 (tuple2 a2 b2)) f2 (infix_plmngt b2 a2 s t))
  (and (mem (set1 (tuple2 a2 b2)) f2 (relation b2 a2 s t))
  (forall ((x uni) (y1 uni) (y2 uni))
  (=> (sort b2 y1)
  (=> (sort b2 y2)
  (=>
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y1) f2) (mem (tuple2 a2 b2)
  (Tuple2 a2 b2 x y2) f2)) (= y1 y2)))))))
  (=>
  (and (mem (set1 (tuple2 a2 b2)) f2 (relation b2 a2 s t))
  (forall ((x uni) (y1 uni) (y2 uni))
  (=> (sort a2 x)
  (=> (sort b2 y1)
  (=> (sort b2 y2)
  (=>
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y1) f2) (mem (tuple2 a2 b2)
  (Tuple2 a2 b2 x y2) f2)) (= y1 y2))))))) (mem (set1 (tuple2 a2 b2)) f2
  (infix_plmngt b2 a2 s t)))))))

(declare-fun infix_mnmngt (ty ty uni uni) uni)

;; infix -->_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (set1 (tuple2 a2 b2)))
  (infix_mnmngt b2 a2 x x1)))))

;; mem_total_function_set
  (assert
  (forall ((b2 ty))
  (forall ((s (set (tuple21 (tuple21 a b) (tuple21 a c)))) (t uni) (x uni))
  (= (mem (set1 (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) b2)) x
  (infix_mnmngt b2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) (t2tb238 s) t))
  (and (mem (set1 (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) b2)) x
  (infix_plmngt b2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) (t2tb238 s) t))
  (infix_eqeq44 (tb2t238 (dom b2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) x))
  s))))))

;; mem_total_function_set
  (assert
  (forall ((b2 ty))
  (forall ((s (set (tuple21 a c))) (t uni) (x uni))
  (= (mem (set1 (tuple2 (tuple2 a1 c1) b2)) x
  (infix_mnmngt b2 (tuple2 a1 c1) (t2tb129 s) t))
  (and (mem (set1 (tuple2 (tuple2 a1 c1) b2)) x
  (infix_plmngt b2 (tuple2 a1 c1) (t2tb129 s) t)) (infix_eqeq9
  (tb2t129 (dom b2 (tuple2 a1 c1) x)) s))))))

;; mem_total_function_set
  (assert
  (forall ((b2 ty))
  (forall ((s (set (set (tuple21 b c)))) (t uni) (x uni))
  (= (mem (set1 (tuple2 (set1 (tuple2 b1 c1)) b2)) x
  (infix_mnmngt b2 (set1 (tuple2 b1 c1)) (t2tb130 s) t))
  (and (mem (set1 (tuple2 (set1 (tuple2 b1 c1)) b2)) x
  (infix_plmngt b2 (set1 (tuple2 b1 c1)) (t2tb130 s) t)) (infix_eqeq10
  (tb2t130 (dom b2 (set1 (tuple2 b1 c1)) x)) s))))))

;; mem_total_function_set
  (assert
  (forall ((b2 ty))
  (forall ((s (set (tuple21 b c))) (t uni) (x uni))
  (= (mem (set1 (tuple2 (tuple2 b1 c1) b2)) x
  (infix_mnmngt b2 (tuple2 b1 c1) (t2tb131 s) t))
  (and (mem (set1 (tuple2 (tuple2 b1 c1) b2)) x
  (infix_plmngt b2 (tuple2 b1 c1) (t2tb131 s) t)) (infix_eqeq8
  (tb2t131 (dom b2 (tuple2 b1 c1) x)) s))))))

;; mem_total_function_set
  (assert
  (forall ((b2 ty))
  (forall ((s (set c)) (t uni) (x uni))
  (= (mem (set1 (tuple2 c1 b2)) x (infix_mnmngt b2 c1 (t2tb132 s) t))
  (and (mem (set1 (tuple2 c1 b2)) x (infix_plmngt b2 c1 (t2tb132 s) t))
  (infix_eqeq7 (tb2t132 (dom b2 c1 x)) s))))))

;; mem_total_function_set
  (assert
  (forall ((b2 ty))
  (forall ((s (set (set (tuple21 a b)))) (t uni) (x uni))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 b1)) b2)) x
  (infix_mnmngt b2 (set1 (tuple2 a1 b1)) (t2tb10 s) t))
  (and (mem (set1 (tuple2 (set1 (tuple2 a1 b1)) b2)) x
  (infix_plmngt b2 (set1 (tuple2 a1 b1)) (t2tb10 s) t)) (infix_eqeq5
  (tb2t10 (dom b2 (set1 (tuple2 a1 b1)) x)) s))))))

;; mem_total_function_set
  (assert
  (forall ((b2 ty))
  (forall ((s (set (tuple21 a b))) (t uni) (x uni))
  (= (mem (set1 (tuple2 (tuple2 a1 b1) b2)) x
  (infix_mnmngt b2 (tuple2 a1 b1) (t2tb11 s) t))
  (and (mem (set1 (tuple2 (tuple2 a1 b1) b2)) x
  (infix_plmngt b2 (tuple2 a1 b1) (t2tb11 s) t)) (infix_eqeq4
  (tb2t11 (dom b2 (tuple2 a1 b1) x)) s))))))

;; mem_total_function_set
  (assert
  (forall ((s (set b)) (t (set c)) (x (set (tuple21 b c))))
  (= (mem9 x (tb2t130 (infix_mnmngt c1 b1 (t2tb12 s) (t2tb132 t))))
  (and (mem9 x (tb2t130 (infix_plmngt c1 b1 (t2tb12 s) (t2tb132 t))))
  (infix_eqeq3 (tb2t12 (dom c1 b1 (t2tb131 x))) s)))))

;; mem_total_function_set
  (assert
  (forall ((b2 ty))
  (forall ((s (set b)) (t uni) (x uni))
  (= (mem (set1 (tuple2 b1 b2)) x (infix_mnmngt b2 b1 (t2tb12 s) t))
  (and (mem (set1 (tuple2 b1 b2)) x (infix_plmngt b2 b1 (t2tb12 s) t))
  (infix_eqeq3 (tb2t12 (dom b2 b1 x)) s))))))

;; mem_total_function_set
  (assert
  (forall ((b2 ty))
  (forall ((s (set (tuple21 a a))) (t uni) (x uni))
  (= (mem (set1 (tuple2 (tuple2 a1 a1) b2)) x
  (infix_mnmngt b2 (tuple2 a1 a1) (t2tb4 s) t))
  (and (mem (set1 (tuple2 (tuple2 a1 a1) b2)) x
  (infix_plmngt b2 (tuple2 a1 a1) (t2tb4 s) t)) (infix_eqeq2
  (tb2t4 (dom b2 (tuple2 a1 a1) x)) s))))))

;; mem_total_function_set
  (assert
  (forall ((s (set a)) (t (set b)) (x (set (tuple21 a b))))
  (= (mem4 x (tb2t10 (infix_mnmngt b1 a1 (t2tb1 s) (t2tb12 t))))
  (and (mem4 x (tb2t10 (infix_plmngt b1 a1 (t2tb1 s) (t2tb12 t))))
  (infix_eqeq1 (tb2t1 (dom b1 a1 (t2tb11 x))) s)))))

;; mem_total_function_set
  (assert
  (forall ((b2 ty))
  (forall ((s (set a)) (t uni) (x uni))
  (= (mem (set1 (tuple2 a1 b2)) x (infix_mnmngt b2 a1 (t2tb1 s) t))
  (and (mem (set1 (tuple2 a1 b2)) x (infix_plmngt b2 a1 (t2tb1 s) t))
  (infix_eqeq1 (tb2t1 (dom b2 a1 x)) s))))))

;; mem_total_function_set
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (x uni))
  (= (mem (set1 (tuple2 a2 b2)) x (infix_mnmngt b2 a2 s t))
  (and (mem (set1 (tuple2 a2 b2)) x (infix_plmngt b2 a2 s t)) (infix_eqeq a2
  (dom b2 a2 x) s))))))

(declare-fun infix_gtplgt (ty ty uni uni) uni)

;; infix >+>_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (set1 (tuple2 a2 b2)))
  (infix_gtplgt b2 a2 x x1)))))

;; mem_partial_injection_set
  (assert
  (forall ((s (set c)) (t (set b)) (x (set (tuple21 c b))))
  (= (mem (set1 (tuple2 c1 b1)) (t2tb222 x)
  (infix_gtplgt b1 c1 (t2tb132 s) (t2tb12 t)))
  (and (mem (set1 (tuple2 c1 b1)) (t2tb222 x)
  (infix_plmngt b1 c1 (t2tb132 s) (t2tb12 t))) (mem9
  (tb2t131 (inverse b1 c1 (t2tb222 x)))
  (tb2t130 (infix_plmngt c1 b1 (t2tb12 t) (t2tb132 s))))))))

;; mem_partial_injection_set
  (assert
  (forall ((s (set b)) (t (set c)) (x (set (tuple21 b c))))
  (= (mem9 x (tb2t130 (infix_gtplgt c1 b1 (t2tb12 s) (t2tb132 t))))
  (and (mem9 x (tb2t130 (infix_plmngt c1 b1 (t2tb12 s) (t2tb132 t)))) (mem
  (set1 (tuple2 c1 b1)) (inverse c1 b1 (t2tb131 x))
  (infix_plmngt b1 c1 (t2tb132 t) (t2tb12 s)))))))

;; mem_partial_injection_set
  (assert
  (forall ((s (set b)) (t (set a)) (x (set (tuple21 b a))))
  (= (mem (set1 (tuple2 b1 a1)) (t2tb37 x)
  (infix_gtplgt a1 b1 (t2tb12 s) (t2tb1 t)))
  (and (mem (set1 (tuple2 b1 a1)) (t2tb37 x)
  (infix_plmngt a1 b1 (t2tb12 s) (t2tb1 t))) (mem4
  (tb2t11 (inverse a1 b1 (t2tb37 x)))
  (tb2t10 (infix_plmngt b1 a1 (t2tb1 t) (t2tb12 s))))))))

;; mem_partial_injection_set
  (assert
  (forall ((s (set a)) (t (set b)) (x (set (tuple21 a b))))
  (= (mem4 x (tb2t10 (infix_gtplgt b1 a1 (t2tb1 s) (t2tb12 t))))
  (and (mem4 x (tb2t10 (infix_plmngt b1 a1 (t2tb1 s) (t2tb12 t)))) (mem
  (set1 (tuple2 b1 a1)) (inverse b1 a1 (t2tb11 x))
  (infix_plmngt a1 b1 (t2tb12 t) (t2tb1 s)))))))

;; mem_partial_injection_set
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (x uni))
  (= (mem (set1 (tuple2 a2 b2)) x (infix_gtplgt b2 a2 s t))
  (and (mem (set1 (tuple2 a2 b2)) x (infix_plmngt b2 a2 s t)) (mem
  (set1 (tuple2 b2 a2)) (inverse b2 a2 x) (infix_plmngt a2 b2 t s)))))))

(declare-fun infix_gtmngt (ty ty uni uni) uni)

;; infix >->_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (set1 (tuple2 a2 b2)))
  (infix_gtmngt b2 a2 x x1)))))

;; mem_total_injection_set
  (assert
  (forall ((s (set b)) (t (set c)) (x (set (tuple21 b c))))
  (= (mem9 x (tb2t130 (infix_gtmngt c1 b1 (t2tb12 s) (t2tb132 t))))
  (and (mem9 x (tb2t130 (infix_gtplgt c1 b1 (t2tb12 s) (t2tb132 t)))) (mem9 x
  (tb2t130 (infix_mnmngt c1 b1 (t2tb12 s) (t2tb132 t))))))))

;; mem_total_injection_set
  (assert
  (forall ((s (set a)) (t (set b)) (x (set (tuple21 a b))))
  (= (mem4 x (tb2t10 (infix_gtmngt b1 a1 (t2tb1 s) (t2tb12 t))))
  (and (mem4 x (tb2t10 (infix_gtplgt b1 a1 (t2tb1 s) (t2tb12 t)))) (mem4 x
  (tb2t10 (infix_mnmngt b1 a1 (t2tb1 s) (t2tb12 t))))))))

;; mem_total_injection_set
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (x uni))
  (= (mem (set1 (tuple2 a2 b2)) x (infix_gtmngt b2 a2 s t))
  (and (mem (set1 (tuple2 a2 b2)) x (infix_gtplgt b2 a2 s t)) (mem
  (set1 (tuple2 a2 b2)) x (infix_mnmngt b2 a2 s t)))))))

(declare-fun infix_plmngtgt (ty ty uni uni) uni)

;; infix +->>_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (set1 (tuple2 a2 b2)))
  (infix_plmngtgt b2 a2 x x1)))))

;; mem_partial_surjection_set
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set (tuple21 (tuple21 a b) (tuple21 a c)))) (x uni))
  (= (mem (set1 (tuple2 a2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)))) x
  (infix_plmngtgt (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) a2 s (t2tb238 t)))
  (and (mem (set1 (tuple2 a2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)))) x
  (infix_plmngt (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) a2 s (t2tb238 t)))
  (infix_eqeq44 (tb2t238 (ran (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) a2 x))
  t))))))

;; mem_partial_surjection_set
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set (tuple21 a c))) (x uni))
  (= (mem (set1 (tuple2 a2 (tuple2 a1 c1))) x
  (infix_plmngtgt (tuple2 a1 c1) a2 s (t2tb129 t)))
  (and (mem (set1 (tuple2 a2 (tuple2 a1 c1))) x
  (infix_plmngt (tuple2 a1 c1) a2 s (t2tb129 t))) (infix_eqeq9
  (tb2t129 (ran (tuple2 a1 c1) a2 x)) t))))))

;; mem_partial_surjection_set
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set (set (tuple21 b c)))) (x uni))
  (= (mem (set1 (tuple2 a2 (set1 (tuple2 b1 c1)))) x
  (infix_plmngtgt (set1 (tuple2 b1 c1)) a2 s (t2tb130 t)))
  (and (mem (set1 (tuple2 a2 (set1 (tuple2 b1 c1)))) x
  (infix_plmngt (set1 (tuple2 b1 c1)) a2 s (t2tb130 t))) (infix_eqeq10
  (tb2t130 (ran (set1 (tuple2 b1 c1)) a2 x)) t))))))

;; mem_partial_surjection_set
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set (tuple21 b c))) (x uni))
  (= (mem (set1 (tuple2 a2 (tuple2 b1 c1))) x
  (infix_plmngtgt (tuple2 b1 c1) a2 s (t2tb131 t)))
  (and (mem (set1 (tuple2 a2 (tuple2 b1 c1))) x
  (infix_plmngt (tuple2 b1 c1) a2 s (t2tb131 t))) (infix_eqeq8
  (tb2t131 (ran (tuple2 b1 c1) a2 x)) t))))))

;; mem_partial_surjection_set
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set c)) (x uni))
  (= (mem (set1 (tuple2 a2 c1)) x (infix_plmngtgt c1 a2 s (t2tb132 t)))
  (and (mem (set1 (tuple2 a2 c1)) x (infix_plmngt c1 a2 s (t2tb132 t)))
  (infix_eqeq7 (tb2t132 (ran c1 a2 x)) t))))))

;; mem_partial_surjection_set
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set (set (tuple21 a b)))) (x uni))
  (= (mem (set1 (tuple2 a2 (set1 (tuple2 a1 b1)))) x
  (infix_plmngtgt (set1 (tuple2 a1 b1)) a2 s (t2tb10 t)))
  (and (mem (set1 (tuple2 a2 (set1 (tuple2 a1 b1)))) x
  (infix_plmngt (set1 (tuple2 a1 b1)) a2 s (t2tb10 t))) (infix_eqeq5
  (tb2t10 (ran (set1 (tuple2 a1 b1)) a2 x)) t))))))

;; mem_partial_surjection_set
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set (tuple21 a b))) (x uni))
  (= (mem (set1 (tuple2 a2 (tuple2 a1 b1))) x
  (infix_plmngtgt (tuple2 a1 b1) a2 s (t2tb11 t)))
  (and (mem (set1 (tuple2 a2 (tuple2 a1 b1))) x
  (infix_plmngt (tuple2 a1 b1) a2 s (t2tb11 t))) (infix_eqeq4
  (tb2t11 (ran (tuple2 a1 b1) a2 x)) t))))))

;; mem_partial_surjection_set
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set b)) (x uni))
  (= (mem (set1 (tuple2 a2 b1)) x (infix_plmngtgt b1 a2 s (t2tb12 t)))
  (and (mem (set1 (tuple2 a2 b1)) x (infix_plmngt b1 a2 s (t2tb12 t)))
  (infix_eqeq3 (tb2t12 (ran b1 a2 x)) t))))))

;; mem_partial_surjection_set
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set (tuple21 a a))) (x uni))
  (= (mem (set1 (tuple2 a2 (tuple2 a1 a1))) x
  (infix_plmngtgt (tuple2 a1 a1) a2 s (t2tb4 t)))
  (and (mem (set1 (tuple2 a2 (tuple2 a1 a1))) x
  (infix_plmngt (tuple2 a1 a1) a2 s (t2tb4 t))) (infix_eqeq2
  (tb2t4 (ran (tuple2 a1 a1) a2 x)) t))))))

;; mem_partial_surjection_set
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set a)) (x uni))
  (= (mem (set1 (tuple2 a2 a1)) x (infix_plmngtgt a1 a2 s (t2tb1 t)))
  (and (mem (set1 (tuple2 a2 a1)) x (infix_plmngt a1 a2 s (t2tb1 t)))
  (infix_eqeq1 (tb2t1 (ran a1 a2 x)) t))))))

;; mem_partial_surjection_set
  (assert
  (forall ((s (set b)) (t (set c)) (x (set (tuple21 b c))))
  (= (mem9 x (tb2t130 (infix_plmngtgt c1 b1 (t2tb12 s) (t2tb132 t))))
  (and (mem9 x (tb2t130 (infix_plmngt c1 b1 (t2tb12 s) (t2tb132 t))))
  (infix_eqeq7 (tb2t132 (ran c1 b1 (t2tb131 x))) t)))))

;; mem_partial_surjection_set
  (assert
  (forall ((s (set a)) (t (set b)) (x (set (tuple21 a b))))
  (= (mem4 x (tb2t10 (infix_plmngtgt b1 a1 (t2tb1 s) (t2tb12 t))))
  (and (mem4 x (tb2t10 (infix_plmngt b1 a1 (t2tb1 s) (t2tb12 t))))
  (infix_eqeq3 (tb2t12 (ran b1 a1 (t2tb11 x))) t)))))

;; mem_partial_surjection_set
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (x uni))
  (= (mem (set1 (tuple2 a2 b2)) x (infix_plmngtgt b2 a2 s t))
  (and (mem (set1 (tuple2 a2 b2)) x (infix_plmngt b2 a2 s t)) (infix_eqeq b2
  (ran b2 a2 x) t))))))

(declare-fun infix_mnmngtgt (ty ty uni uni) uni)

;; infix -->>_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (set1 (tuple2 a2 b2)))
  (infix_mnmngtgt b2 a2 x x1)))))

;; mem_total_surjection_set
  (assert
  (forall ((s (set b)) (t (set c)) (x (set (tuple21 b c))))
  (= (mem9 x (tb2t130 (infix_mnmngtgt c1 b1 (t2tb12 s) (t2tb132 t))))
  (and (mem9 x (tb2t130 (infix_plmngtgt c1 b1 (t2tb12 s) (t2tb132 t)))) (mem9
  x (tb2t130 (infix_mnmngt c1 b1 (t2tb12 s) (t2tb132 t))))))))

;; mem_total_surjection_set
  (assert
  (forall ((s (set a)) (t (set b)) (x (set (tuple21 a b))))
  (= (mem4 x (tb2t10 (infix_mnmngtgt b1 a1 (t2tb1 s) (t2tb12 t))))
  (and (mem4 x (tb2t10 (infix_plmngtgt b1 a1 (t2tb1 s) (t2tb12 t)))) (mem4 x
  (tb2t10 (infix_mnmngt b1 a1 (t2tb1 s) (t2tb12 t))))))))

;; mem_total_surjection_set
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (x uni))
  (= (mem (set1 (tuple2 a2 b2)) x (infix_mnmngtgt b2 a2 s t))
  (and (mem (set1 (tuple2 a2 b2)) x (infix_plmngtgt b2 a2 s t)) (mem
  (set1 (tuple2 a2 b2)) x (infix_mnmngt b2 a2 s t)))))))

(declare-fun infix_gtplgtgt (ty ty uni uni) uni)

;; infix >+>>_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (set1 (tuple2 a2 b2)))
  (infix_gtplgtgt b2 a2 x x1)))))

;; mem_partial_bijection_set
  (assert
  (forall ((s (set b)) (t (set c)) (x (set (tuple21 b c))))
  (= (mem9 x (tb2t130 (infix_gtplgtgt c1 b1 (t2tb12 s) (t2tb132 t))))
  (and (mem9 x (tb2t130 (infix_gtplgt c1 b1 (t2tb12 s) (t2tb132 t)))) (mem9 x
  (tb2t130 (infix_plmngtgt c1 b1 (t2tb12 s) (t2tb132 t))))))))

;; mem_partial_bijection_set
  (assert
  (forall ((s (set a)) (t (set b)) (x (set (tuple21 a b))))
  (= (mem4 x (tb2t10 (infix_gtplgtgt b1 a1 (t2tb1 s) (t2tb12 t))))
  (and (mem4 x (tb2t10 (infix_gtplgt b1 a1 (t2tb1 s) (t2tb12 t)))) (mem4 x
  (tb2t10 (infix_plmngtgt b1 a1 (t2tb1 s) (t2tb12 t))))))))

;; mem_partial_bijection_set
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (x uni))
  (= (mem (set1 (tuple2 a2 b2)) x (infix_gtplgtgt b2 a2 s t))
  (and (mem (set1 (tuple2 a2 b2)) x (infix_gtplgt b2 a2 s t)) (mem
  (set1 (tuple2 a2 b2)) x (infix_plmngtgt b2 a2 s t)))))))

(declare-fun infix_gtmngtgt (ty ty uni uni) uni)

;; infix >->>_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (set1 (tuple2 a2 b2)))
  (infix_gtmngtgt b2 a2 x x1)))))

;; mem_total_bijection_set
  (assert
  (forall ((s (set b)) (t (set c)) (x (set (tuple21 b c))))
  (= (mem9 x (tb2t130 (infix_gtmngtgt c1 b1 (t2tb12 s) (t2tb132 t))))
  (and (mem9 x (tb2t130 (infix_gtmngt c1 b1 (t2tb12 s) (t2tb132 t)))) (mem9 x
  (tb2t130 (infix_mnmngtgt c1 b1 (t2tb12 s) (t2tb132 t))))))))

;; mem_total_bijection_set
  (assert
  (forall ((s (set a)) (t (set b)) (x (set (tuple21 a b))))
  (= (mem4 x (tb2t10 (infix_gtmngtgt b1 a1 (t2tb1 s) (t2tb12 t))))
  (and (mem4 x (tb2t10 (infix_gtmngt b1 a1 (t2tb1 s) (t2tb12 t)))) (mem4 x
  (tb2t10 (infix_mnmngtgt b1 a1 (t2tb1 s) (t2tb12 t))))))))

;; mem_total_bijection_set
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (x uni))
  (= (mem (set1 (tuple2 a2 b2)) x (infix_gtmngtgt b2 a2 s t))
  (and (mem (set1 (tuple2 a2 b2)) x (infix_gtmngt b2 a2 s t)) (mem
  (set1 (tuple2 a2 b2)) x (infix_mnmngtgt b2 a2 s t)))))))

(declare-fun apply (ty ty uni uni) uni)

;; apply_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort b2 (apply b2 a2 x x1)))))

;; apply_def0
  (assert
  (forall ((b2 ty))
  (forall ((f2 uni) (s (set (tuple21 (tuple21 a b) (tuple21 a c)))) (t uni)
  (a2 (tuple21 (tuple21 a b) (tuple21 a c))))
  (=>
  (and (mem (set1 (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) b2)) f2
  (infix_plmngt b2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) (t2tb238 s) t))
  (mem51 a2 (tb2t238 (dom b2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) f2))))
  (mem (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) b2)
  (Tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) b2 (t2tb239 a2)
  (apply b2 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) f2 (t2tb239 a2))) f2)))))

;; apply_def0
  (assert
  (forall ((b2 ty))
  (forall ((f2 uni) (s (set (tuple21 a c))) (t uni) (a2 (tuple21 a c)))
  (=>
  (and (mem (set1 (tuple2 (tuple2 a1 c1) b2)) f2
  (infix_plmngt b2 (tuple2 a1 c1) (t2tb129 s) t)) (mem10 a2
  (tb2t129 (dom b2 (tuple2 a1 c1) f2)))) (mem (tuple2 (tuple2 a1 c1) b2)
  (Tuple2 (tuple2 a1 c1) b2 (t2tb133 a2)
  (apply b2 (tuple2 a1 c1) f2 (t2tb133 a2))) f2)))))

;; apply_def0
  (assert
  (forall ((b2 ty))
  (forall ((f2 uni) (s (set (set (tuple21 b c)))) (t uni) (a2 (set (tuple21 b
  c))))
  (=>
  (and (mem (set1 (tuple2 (set1 (tuple2 b1 c1)) b2)) f2
  (infix_plmngt b2 (set1 (tuple2 b1 c1)) (t2tb130 s) t)) (mem9 a2
  (tb2t130 (dom b2 (set1 (tuple2 b1 c1)) f2)))) (mem
  (tuple2 (set1 (tuple2 b1 c1)) b2)
  (Tuple2 (set1 (tuple2 b1 c1)) b2 (t2tb131 a2)
  (apply b2 (set1 (tuple2 b1 c1)) f2 (t2tb131 a2))) f2)))))

;; apply_def0
  (assert
  (forall ((b2 ty))
  (forall ((f2 uni) (s (set (tuple21 b c))) (t uni) (a2 (tuple21 b c)))
  (=>
  (and (mem (set1 (tuple2 (tuple2 b1 c1) b2)) f2
  (infix_plmngt b2 (tuple2 b1 c1) (t2tb131 s) t)) (mem8 a2
  (tb2t131 (dom b2 (tuple2 b1 c1) f2)))) (mem (tuple2 (tuple2 b1 c1) b2)
  (Tuple2 (tuple2 b1 c1) b2 (t2tb134 a2)
  (apply b2 (tuple2 b1 c1) f2 (t2tb134 a2))) f2)))))

;; apply_def0
  (assert
  (forall ((b2 ty))
  (forall ((f2 uni) (s (set c)) (t uni) (a2 c))
  (=>
  (and (mem (set1 (tuple2 c1 b2)) f2 (infix_plmngt b2 c1 (t2tb132 s) t))
  (mem7 a2 (tb2t132 (dom b2 c1 f2)))) (mem (tuple2 c1 b2)
  (Tuple2 c1 b2 (t2tb135 a2) (apply b2 c1 f2 (t2tb135 a2))) f2)))))

;; apply_def0
  (assert
  (forall ((b2 ty))
  (forall ((f2 uni) (s (set (set (tuple21 a b)))) (t uni) (a2 (set (tuple21 a
  b))))
  (=>
  (and (mem (set1 (tuple2 (set1 (tuple2 a1 b1)) b2)) f2
  (infix_plmngt b2 (set1 (tuple2 a1 b1)) (t2tb10 s) t)) (mem4 a2
  (tb2t10 (dom b2 (set1 (tuple2 a1 b1)) f2)))) (mem
  (tuple2 (set1 (tuple2 a1 b1)) b2)
  (Tuple2 (set1 (tuple2 a1 b1)) b2 (t2tb11 a2)
  (apply b2 (set1 (tuple2 a1 b1)) f2 (t2tb11 a2))) f2)))))

;; apply_def0
  (assert
  (forall ((f2 (set (tuple21 (tuple21 a b) (tuple21 a c))))
  (s (set (tuple21 a b))) (t (set (tuple21 a c))) (a2 (tuple21 a b)))
  (=>
  (and (mem (set1 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1))) (t2tb238 f2)
  (infix_plmngt (tuple2 a1 c1) (tuple2 a1 b1) (t2tb11 s) (t2tb129 t))) (mem3
  a2 (tb2t11 (dom (tuple2 a1 c1) (tuple2 a1 b1) (t2tb238 f2))))) (mem51
  (tb2t239
  (Tuple2 (tuple2 a1 b1) (tuple2 a1 c1) (t2tb13 a2)
  (apply (tuple2 a1 c1) (tuple2 a1 b1) (t2tb238 f2) (t2tb13 a2)))) f2))))

;; apply_def0
  (assert
  (forall ((b2 ty))
  (forall ((f2 uni) (s (set (tuple21 a b))) (t uni) (a2 (tuple21 a b)))
  (=>
  (and (mem (set1 (tuple2 (tuple2 a1 b1) b2)) f2
  (infix_plmngt b2 (tuple2 a1 b1) (t2tb11 s) t)) (mem3 a2
  (tb2t11 (dom b2 (tuple2 a1 b1) f2)))) (mem (tuple2 (tuple2 a1 b1) b2)
  (Tuple2 (tuple2 a1 b1) b2 (t2tb13 a2)
  (apply b2 (tuple2 a1 b1) f2 (t2tb13 a2))) f2)))))

;; apply_def0
  (assert
  (forall ((f2 (set (tuple21 b c))) (s (set b)) (t (set c)) (a2 b))
  (=>
  (and (mem9 f2 (tb2t130 (infix_plmngt c1 b1 (t2tb12 s) (t2tb132 t)))) (mem2
  a2 (tb2t12 (dom c1 b1 (t2tb131 f2))))) (mem8
  (tb2t134 (Tuple2 b1 c1 (t2tb14 a2) (apply c1 b1 (t2tb131 f2) (t2tb14 a2))))
  f2))))

;; apply_def0
  (assert
  (forall ((b2 ty))
  (forall ((f2 uni) (s (set b)) (t uni) (a2 b))
  (=>
  (and (mem (set1 (tuple2 b1 b2)) f2 (infix_plmngt b2 b1 (t2tb12 s) t)) (mem2
  a2 (tb2t12 (dom b2 b1 f2)))) (mem (tuple2 b1 b2)
  (Tuple2 b1 b2 (t2tb14 a2) (apply b2 b1 f2 (t2tb14 a2))) f2)))))

;; apply_def0
  (assert
  (forall ((b2 ty))
  (forall ((f2 uni) (s (set (tuple21 a a))) (t uni) (a2 (tuple21 a a)))
  (=>
  (and (mem (set1 (tuple2 (tuple2 a1 a1) b2)) f2
  (infix_plmngt b2 (tuple2 a1 a1) (t2tb4 s) t)) (mem12 a2
  (tb2t4 (dom b2 (tuple2 a1 a1) f2)))) (mem (tuple2 (tuple2 a1 a1) b2)
  (Tuple2 (tuple2 a1 a1) b2 (t2tb5 a2)
  (apply b2 (tuple2 a1 a1) f2 (t2tb5 a2))) f2)))))

;; apply_def0
  (assert
  (forall ((f2 (set (tuple21 a c))) (s (set a)) (t (set c)) (a2 a))
  (=>
  (and (mem (set1 (tuple2 a1 c1)) (t2tb129 f2)
  (infix_plmngt c1 a1 (t2tb1 s) (t2tb132 t))) (mem1 a2
  (tb2t1 (dom c1 a1 (t2tb129 f2))))) (mem10
  (tb2t133 (Tuple2 a1 c1 (t2tb2 a2) (apply c1 a1 (t2tb129 f2) (t2tb2 a2))))
  f2))))

;; apply_def0
  (assert
  (forall ((f2 (set (tuple21 a b))) (s (set a)) (t (set b)) (a2 a))
  (=>
  (and (mem4 f2 (tb2t10 (infix_plmngt b1 a1 (t2tb1 s) (t2tb12 t)))) (mem1 a2
  (tb2t1 (dom b1 a1 (t2tb11 f2))))) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 a2) (apply b1 a1 (t2tb11 f2) (t2tb2 a2))))
  f2))))

;; apply_def0
  (assert
  (forall ((f2 (set (tuple21 a a))) (s (set a)) (t (set a)) (a2 a))
  (=>
  (and (mem (set1 (tuple2 a1 a1)) (t2tb4 f2)
  (infix_plmngt a1 a1 (t2tb1 s) (t2tb1 t))) (mem1 a2
  (tb2t1 (dom a1 a1 (t2tb4 f2))))) (mem12
  (tb2t5 (Tuple2 a1 a1 (t2tb2 a2) (apply a1 a1 (t2tb4 f2) (t2tb2 a2)))) f2))))

;; apply_def0
  (assert
  (forall ((b2 ty))
  (forall ((f2 uni) (s (set a)) (t uni) (a2 a))
  (=>
  (and (mem (set1 (tuple2 a1 b2)) f2 (infix_plmngt b2 a1 (t2tb1 s) t)) (mem1
  a2 (tb2t1 (dom b2 a1 f2)))) (mem (tuple2 a1 b2)
  (Tuple2 a1 b2 (t2tb2 a2) (apply b2 a1 f2 (t2tb2 a2))) f2)))))

;; apply_def0
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((f2 uni) (s uni) (t uni) (a3 uni))
  (=>
  (and (mem (set1 (tuple2 a2 b2)) f2 (infix_plmngt b2 a2 s t)) (mem a2 a3
  (dom b2 a2 f2))) (mem (tuple2 a2 b2) (Tuple2 a2 b2 a3 (apply b2 a2 f2 a3))
  f2)))))

(assert
;; equal_image_11
 ;; File "lemmes_bbook.why", line 2369, characters 7-21
  (not
  (forall ((s (set a)) (t (set b)) (u (set c)) (p (set (tuple21 a b)))
  (q (set (tuple21 b c))))
  (=> (and (mem4 p (relation1 s t)) (mem9 q (relation4 t u))) (infix_eqeq9
  (image12 (parallel_product7 (id1 s) q) p) (semicolon1 p q))))))
(check-sat)
