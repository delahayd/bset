(set-logic AUFBVDTLIRA)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
(declare-sort uni 0)

(declare-sort ty 0)

(declare-fun sort (ty uni) Bool)

(declare-fun witness (ty) uni)

;; witness_sort
  (assert (forall ((a2 ty)) (sort a2 (witness a2))))

(declare-fun int () ty)

(declare-fun real () ty)

(declare-sort set 1)

(declare-fun set1 (ty) ty)

(declare-sort c 0)

(declare-fun c1 () ty)

(declare-sort b 0)

(declare-fun b1 () ty)

(declare-sort a 0)

(declare-fun a1 () ty)

(declare-sort tuple21 2)

(declare-fun tuple2 (ty ty) ty)

(declare-fun mem (ty uni uni) Bool)

(declare-fun mem1 (a (set a)) Bool)

(declare-fun mem2 (b (set b)) Bool)

(declare-fun mem3 ((tuple21 a b) (set (tuple21 a b))) Bool)

(declare-fun mem4 ((set (tuple21 a b)) (set (set (tuple21 a b)))) Bool)

(declare-fun mem7 (c (set c)) Bool)

(declare-fun mem8 ((tuple21 b c) (set (tuple21 b c))) Bool)

(declare-fun mem10 ((tuple21 a c) (set (tuple21 a c))) Bool)

(declare-fun mem11 ((set (tuple21 a c)) (set (set (tuple21 a c)))) Bool)

(declare-fun mem14 ((tuple21 a (tuple21 b c)) (set (tuple21 a (tuple21 b
  c)))) Bool)

(declare-fun mem15 ((set (tuple21 a (tuple21 b c))) (set (set (tuple21 a
  (tuple21 b c))))) Bool)

(declare-fun infix_eqeq (ty uni uni) Bool)

(declare-fun t2tb327 ((set (set (tuple21 a (tuple21 b c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 a (tuple21 b c)))))) (sort
  (set1 (set1 (tuple2 a1 (tuple2 b1 c1)))) (t2tb327 x))))

(declare-fun tb2t327 (uni) (set (set (tuple21 a (tuple21 b c)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 a (tuple21 b c))))))
  (! (= (tb2t327 (t2tb327 i)) i) :pattern ((t2tb327 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 a1 (tuple2 b1 c1)))) j)
     (= (t2tb327 (tb2t327 j)) j)) :pattern ((t2tb327 (tb2t327 j))) )))

;; infix ==_def
  (assert
  (forall ((s (set (set (tuple21 a (tuple21 b c))))) (t (set (set (tuple21 a
  (tuple21 b c))))))
  (= (infix_eqeq (set1 (tuple2 a1 (tuple2 b1 c1))) (t2tb327 s) (t2tb327 t))
  (forall ((x (set (tuple21 a (tuple21 b c))))) (= (mem15 x s) (mem15 x t))))))

(declare-fun t2tb261 ((set (tuple21 a (tuple21 b c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (tuple21 b c))))) (sort
  (set1 (tuple2 a1 (tuple2 b1 c1))) (t2tb261 x))))

(declare-fun tb2t261 (uni) (set (tuple21 a (tuple21 b c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (tuple21 b c)))))
  (! (= (tb2t261 (t2tb261 i)) i) :pattern ((t2tb261 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (tuple2 b1 c1))) j)
     (= (t2tb261 (tb2t261 j)) j)) :pattern ((t2tb261 (tb2t261 j))) )))

;; infix ==_def
  (assert
  (forall ((s (set (tuple21 a (tuple21 b c)))) (t (set (tuple21 a (tuple21 b
  c)))))
  (= (infix_eqeq (tuple2 a1 (tuple2 b1 c1)) (t2tb261 s) (t2tb261 t))
  (forall ((x (tuple21 a (tuple21 b c)))) (= (mem14 x s) (mem14 x t))))))

(declare-fun t2tb128 ((set (set (tuple21 a c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 a c))))) (sort (set1 (set1 (tuple2 a1 c1)))
  (t2tb128 x))))

(declare-fun tb2t128 (uni) (set (set (tuple21 a c))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 a c)))))
  (! (= (tb2t128 (t2tb128 i)) i) :pattern ((t2tb128 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 a1 c1))) j) (= (t2tb128 (tb2t128 j)) j)) :pattern (
  (t2tb128 (tb2t128 j))) )))

;; infix ==_def
  (assert
  (forall ((s (set (set (tuple21 a c)))) (t (set (set (tuple21 a c)))))
  (= (infix_eqeq (set1 (tuple2 a1 c1)) (t2tb128 s) (t2tb128 t))
  (forall ((x (set (tuple21 a c)))) (= (mem11 x s) (mem11 x t))))))

(declare-fun t2tb129 ((set (tuple21 a c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a c)))) (sort (set1 (tuple2 a1 c1)) (t2tb129 x))))

(declare-fun tb2t129 (uni) (set (tuple21 a c)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a c))))
  (! (= (tb2t129 (t2tb129 i)) i) :pattern ((t2tb129 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 c1)) j) (= (t2tb129 (tb2t129 j)) j)) :pattern (
  (t2tb129 (tb2t129 j))) )))

;; infix ==_def
  (assert
  (forall ((s (set (tuple21 a c))) (t (set (tuple21 a c))))
  (= (infix_eqeq (tuple2 a1 c1) (t2tb129 s) (t2tb129 t))
  (forall ((x (tuple21 a c))) (= (mem10 x s) (mem10 x t))))))

(declare-fun t2tb131 ((set (tuple21 b c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 b c)))) (sort (set1 (tuple2 b1 c1)) (t2tb131 x))))

(declare-fun tb2t131 (uni) (set (tuple21 b c)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 b c))))
  (! (= (tb2t131 (t2tb131 i)) i) :pattern ((t2tb131 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 b1 c1)) j) (= (t2tb131 (tb2t131 j)) j)) :pattern (
  (t2tb131 (tb2t131 j))) )))

;; infix ==_def
  (assert
  (forall ((s (set (tuple21 b c))) (t (set (tuple21 b c))))
  (= (infix_eqeq (tuple2 b1 c1) (t2tb131 s) (t2tb131 t))
  (forall ((x (tuple21 b c))) (= (mem8 x s) (mem8 x t))))))

(declare-fun t2tb132 ((set c)) uni)

;; t2tb_sort
  (assert (forall ((x (set c))) (sort (set1 c1) (t2tb132 x))))

(declare-fun tb2t132 (uni) (set c))

;; BridgeL
  (assert
  (forall ((i (set c)))
  (! (= (tb2t132 (t2tb132 i)) i) :pattern ((t2tb132 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 c1) j) (= (t2tb132 (tb2t132 j)) j)) :pattern ((t2tb132
                                                                   (tb2t132
                                                                   j))) )))

;; infix ==_def
  (assert
  (forall ((s (set c)) (t (set c)))
  (= (infix_eqeq c1 (t2tb132 s) (t2tb132 t))
  (forall ((x c)) (= (mem7 x s) (mem7 x t))))))

(declare-fun t2tb10 ((set (set (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 a b))))) (sort (set1 (set1 (tuple2 a1 b1)))
  (t2tb10 x))))

(declare-fun tb2t10 (uni) (set (set (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 a b)))))
  (! (= (tb2t10 (t2tb10 i)) i) :pattern ((t2tb10 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 a1 b1))) j) (= (t2tb10 (tb2t10 j)) j)) :pattern (
  (t2tb10 (tb2t10 j))) )))

;; infix ==_def
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set (set (tuple21 a b)))))
  (= (infix_eqeq (set1 (tuple2 a1 b1)) (t2tb10 s) (t2tb10 t))
  (forall ((x (set (tuple21 a b)))) (= (mem4 x s) (mem4 x t))))))

(declare-fun t2tb11 ((set (tuple21 a b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a b)))) (sort (set1 (tuple2 a1 b1)) (t2tb11 x))))

(declare-fun tb2t11 (uni) (set (tuple21 a b)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a b))))
  (! (= (tb2t11 (t2tb11 i)) i) :pattern ((t2tb11 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 b1)) j) (= (t2tb11 (tb2t11 j)) j)) :pattern (
  (t2tb11 (tb2t11 j))) )))

;; infix ==_def
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (tuple21 a b))))
  (= (infix_eqeq (tuple2 a1 b1) (t2tb11 s) (t2tb11 t))
  (forall ((x (tuple21 a b))) (= (mem3 x s) (mem3 x t))))))

(declare-fun t2tb12 ((set b)) uni)

;; t2tb_sort
  (assert (forall ((x (set b))) (sort (set1 b1) (t2tb12 x))))

(declare-fun tb2t12 (uni) (set b))

;; BridgeL
  (assert
  (forall ((i (set b))) (! (= (tb2t12 (t2tb12 i)) i) :pattern ((t2tb12 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 b1) j) (= (t2tb12 (tb2t12 j)) j)) :pattern ((t2tb12
                                                                 (tb2t12 j))) )))

;; infix ==_def
  (assert
  (forall ((s (set b)) (t (set b)))
  (= (infix_eqeq b1 (t2tb12 s) (t2tb12 t))
  (forall ((x b)) (= (mem2 x s) (mem2 x t))))))

(declare-fun t2tb1 ((set a)) uni)

;; t2tb_sort
  (assert (forall ((x (set a))) (sort (set1 a1) (t2tb1 x))))

(declare-fun tb2t1 (uni) (set a))

;; BridgeL
  (assert
  (forall ((i (set a))) (! (= (tb2t1 (t2tb1 i)) i) :pattern ((t2tb1 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 a1) j) (= (t2tb1 (tb2t1 j)) j)) :pattern ((t2tb1
                                                               (tb2t1 j))) )))

;; infix ==_def
  (assert
  (forall ((s (set a)) (t (set a)))
  (= (infix_eqeq a1 (t2tb1 s) (t2tb1 t))
  (forall ((x a)) (= (mem1 x s) (mem1 x t))))))

;; infix ==_def
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t uni))
  (and
  (=> (infix_eqeq a2 s t) (forall ((x uni)) (= (mem a2 x s) (mem a2 x t))))
  (=> (forall ((x uni)) (=> (sort a2 x) (= (mem a2 x s) (mem a2 x t))))
  (infix_eqeq a2 s t))))))

(declare-fun power (ty uni) uni)

;; power_sort
  (assert
  (forall ((a2 ty)) (forall ((x uni)) (sort (set1 (set1 a2)) (power a2 x)))))

(declare-fun non_empty_power (ty uni) uni)

;; non_empty_power_sort
  (assert
  (forall ((a2 ty))
  (forall ((x uni)) (sort (set1 (set1 a2)) (non_empty_power a2 x)))))

(declare-fun subset1 (ty uni uni) Bool)

;; subset_def
  (assert
  (forall ((s (set (tuple21 a (tuple21 b c)))) (t (set (tuple21 a (tuple21 b
  c)))))
  (= (subset1 (tuple2 a1 (tuple2 b1 c1)) (t2tb261 s) (t2tb261 t)) (mem15 s
  (tb2t327 (power (tuple2 a1 (tuple2 b1 c1)) (t2tb261 t)))))))

;; subset_def
  (assert
  (forall ((s (set (tuple21 a c))) (t (set (tuple21 a c))))
  (= (subset1 (tuple2 a1 c1) (t2tb129 s) (t2tb129 t)) (mem11 s
  (tb2t128 (power (tuple2 a1 c1) (t2tb129 t)))))))

;; subset_def
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (tuple21 a b))))
  (= (subset1 (tuple2 a1 b1) (t2tb11 s) (t2tb11 t)) (mem4 s
  (tb2t10 (power (tuple2 a1 b1) (t2tb11 t)))))))

;; subset_def
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t uni))
  (= (subset1 a2 s t) (mem (set1 a2) s (power a2 t))))))

(declare-fun subsetnoteq (ty uni uni) Bool)

;; subsetnoteq_def
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t uni))
  (= (subsetnoteq a2 s t) (and (subset1 a2 s t) (not (infix_eqeq a2 s t)))))))

(declare-fun empty (ty) uni)

;; empty_sort
  (assert (forall ((a2 ty)) (sort (set1 a2) (empty a2))))

(declare-fun is_empty (ty uni) Bool)

;; is_empty_def
  (assert
  (forall ((s (set (set (tuple21 a (tuple21 b c))))))
  (= (is_empty (set1 (tuple2 a1 (tuple2 b1 c1))) (t2tb327 s))
  (forall ((x (set (tuple21 a (tuple21 b c))))) (not (mem15 x s))))))

;; is_empty_def
  (assert
  (forall ((s (set (tuple21 a (tuple21 b c)))))
  (= (is_empty (tuple2 a1 (tuple2 b1 c1)) (t2tb261 s))
  (forall ((x (tuple21 a (tuple21 b c)))) (not (mem14 x s))))))

;; is_empty_def
  (assert
  (forall ((s (set (set (tuple21 a c)))))
  (= (is_empty (set1 (tuple2 a1 c1)) (t2tb128 s))
  (forall ((x (set (tuple21 a c)))) (not (mem11 x s))))))

;; is_empty_def
  (assert
  (forall ((s (set (tuple21 a c))))
  (= (is_empty (tuple2 a1 c1) (t2tb129 s))
  (forall ((x (tuple21 a c))) (not (mem10 x s))))))

;; is_empty_def
  (assert
  (forall ((s (set (tuple21 b c))))
  (= (is_empty (tuple2 b1 c1) (t2tb131 s))
  (forall ((x (tuple21 b c))) (not (mem8 x s))))))

;; is_empty_def
  (assert
  (forall ((s (set c)))
  (= (is_empty c1 (t2tb132 s)) (forall ((x c)) (not (mem7 x s))))))

;; is_empty_def
  (assert
  (forall ((s (set (set (tuple21 a b)))))
  (= (is_empty (set1 (tuple2 a1 b1)) (t2tb10 s))
  (forall ((x (set (tuple21 a b)))) (not (mem4 x s))))))

;; is_empty_def
  (assert
  (forall ((s (set (tuple21 a b))))
  (= (is_empty (tuple2 a1 b1) (t2tb11 s))
  (forall ((x (tuple21 a b))) (not (mem3 x s))))))

;; is_empty_def
  (assert
  (forall ((s (set b)))
  (= (is_empty b1 (t2tb12 s)) (forall ((x b)) (not (mem2 x s))))))

;; is_empty_def
  (assert
  (forall ((s (set a)))
  (= (is_empty a1 (t2tb1 s)) (forall ((x a)) (not (mem1 x s))))))

;; is_empty_def
  (assert
  (forall ((a2 ty))
  (forall ((s uni))
  (and (=> (is_empty a2 s) (forall ((x uni)) (not (mem a2 x s))))
  (=> (forall ((x uni)) (=> (sort a2 x) (not (mem a2 x s)))) (is_empty a2 s))))))

;; empty_def1
  (assert (forall ((a2 ty)) (is_empty a2 (empty a2))))

;; empty
  (assert
  (forall ((x (set (tuple21 a (tuple21 b c)))))
  (not (mem15 x (tb2t327 (empty (set1 (tuple2 a1 (tuple2 b1 c1)))))))))

;; empty
  (assert
  (forall ((x (tuple21 a (tuple21 b c))))
  (not (mem14 x (tb2t261 (empty (tuple2 a1 (tuple2 b1 c1))))))))

;; empty
  (assert
  (forall ((x (set (tuple21 a c))))
  (not (mem11 x (tb2t128 (empty (set1 (tuple2 a1 c1))))))))

;; empty
  (assert
  (forall ((x (tuple21 a c)))
  (not (mem10 x (tb2t129 (empty (tuple2 a1 c1)))))))

;; empty
  (assert
  (forall ((x (tuple21 b c)))
  (not (mem8 x (tb2t131 (empty (tuple2 b1 c1)))))))

;; empty
  (assert (forall ((x c)) (not (mem7 x (tb2t132 (empty c1))))))

;; empty
  (assert
  (forall ((x (set (tuple21 a b))))
  (not (mem4 x (tb2t10 (empty (set1 (tuple2 a1 b1))))))))

;; empty
  (assert
  (forall ((x (tuple21 a b))) (not (mem3 x (tb2t11 (empty (tuple2 a1 b1)))))))

;; empty
  (assert (forall ((x b)) (not (mem2 x (tb2t12 (empty b1))))))

;; empty
  (assert (forall ((x a)) (not (mem1 x (tb2t1 (empty a1))))))

;; empty
  (assert (forall ((a2 ty)) (forall ((x uni)) (not (mem a2 x (empty a2))))))

(declare-fun add (ty uni uni) uni)

;; add_sort
  (assert
  (forall ((a2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 a2) (add a2 x x1)))))

;; add_def1
  (assert
  (forall ((x (set (tuple21 a (tuple21 b c)))) (y (set (tuple21 a (tuple21 b
  c)))))
  (forall ((s (set (set (tuple21 a (tuple21 b c))))))
  (= (mem15 x
  (tb2t327 (add (set1 (tuple2 a1 (tuple2 b1 c1))) (t2tb261 y) (t2tb327 s))))
  (or (= x y) (mem15 x s))))))

(declare-fun t2tb260 ((tuple21 a (tuple21 b c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (tuple21 b c)))) (sort (tuple2 a1 (tuple2 b1 c1))
  (t2tb260 x))))

(declare-fun tb2t260 (uni) (tuple21 a (tuple21 b c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (tuple21 b c))))
  (! (= (tb2t260 (t2tb260 i)) i) :pattern ((t2tb260 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (tuple2 b1 c1)) j) (= (t2tb260 (tb2t260 j)) j)) :pattern (
  (t2tb260 (tb2t260 j))) )))

;; add_def1
  (assert
  (forall ((x (tuple21 a (tuple21 b c))) (y (tuple21 a (tuple21 b c))))
  (forall ((s (set (tuple21 a (tuple21 b c)))))
  (= (mem14 x
  (tb2t261 (add (tuple2 a1 (tuple2 b1 c1)) (t2tb260 y) (t2tb261 s))))
  (or (= x y) (mem14 x s))))))

;; add_def1
  (assert
  (forall ((x (set (tuple21 a c))) (y (set (tuple21 a c))))
  (forall ((s (set (set (tuple21 a c)))))
  (= (mem11 x (tb2t128 (add (set1 (tuple2 a1 c1)) (t2tb129 y) (t2tb128 s))))
  (or (= x y) (mem11 x s))))))

(declare-fun t2tb133 ((tuple21 a c)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 a c))) (sort (tuple2 a1 c1) (t2tb133 x))))

(declare-fun tb2t133 (uni) (tuple21 a c))

;; BridgeL
  (assert
  (forall ((i (tuple21 a c)))
  (! (= (tb2t133 (t2tb133 i)) i) :pattern ((t2tb133 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 c1) j) (= (t2tb133 (tb2t133 j)) j)) :pattern (
  (t2tb133 (tb2t133 j))) )))

;; add_def1
  (assert
  (forall ((x (tuple21 a c)) (y (tuple21 a c)))
  (forall ((s (set (tuple21 a c))))
  (= (mem10 x (tb2t129 (add (tuple2 a1 c1) (t2tb133 y) (t2tb129 s))))
  (or (= x y) (mem10 x s))))))

(declare-fun t2tb134 ((tuple21 b c)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 b c))) (sort (tuple2 b1 c1) (t2tb134 x))))

(declare-fun tb2t134 (uni) (tuple21 b c))

;; BridgeL
  (assert
  (forall ((i (tuple21 b c)))
  (! (= (tb2t134 (t2tb134 i)) i) :pattern ((t2tb134 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 b1 c1) j) (= (t2tb134 (tb2t134 j)) j)) :pattern (
  (t2tb134 (tb2t134 j))) )))

;; add_def1
  (assert
  (forall ((x (tuple21 b c)) (y (tuple21 b c)))
  (forall ((s (set (tuple21 b c))))
  (= (mem8 x (tb2t131 (add (tuple2 b1 c1) (t2tb134 y) (t2tb131 s))))
  (or (= x y) (mem8 x s))))))

(declare-fun t2tb135 (c) uni)

;; t2tb_sort
  (assert (forall ((x c)) (sort c1 (t2tb135 x))))

(declare-fun tb2t135 (uni) c)

;; BridgeL
  (assert
  (forall ((i c)) (! (= (tb2t135 (t2tb135 i)) i) :pattern ((t2tb135 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort c1 j) (= (t2tb135 (tb2t135 j)) j)) :pattern ((t2tb135
                                                            (tb2t135 j))) )))

;; add_def1
  (assert
  (forall ((x c) (y c))
  (forall ((s (set c)))
  (= (mem7 x (tb2t132 (add c1 (t2tb135 y) (t2tb132 s))))
  (or (= x y) (mem7 x s))))))

;; add_def1
  (assert
  (forall ((x (set (tuple21 a b))) (y (set (tuple21 a b))))
  (forall ((s (set (set (tuple21 a b)))))
  (= (mem4 x (tb2t10 (add (set1 (tuple2 a1 b1)) (t2tb11 y) (t2tb10 s))))
  (or (= x y) (mem4 x s))))))

(declare-fun t2tb13 ((tuple21 a b)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 a b))) (sort (tuple2 a1 b1) (t2tb13 x))))

(declare-fun tb2t13 (uni) (tuple21 a b))

;; BridgeL
  (assert
  (forall ((i (tuple21 a b)))
  (! (= (tb2t13 (t2tb13 i)) i) :pattern ((t2tb13 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 b1) j) (= (t2tb13 (tb2t13 j)) j)) :pattern (
  (t2tb13 (tb2t13 j))) )))

;; add_def1
  (assert
  (forall ((x (tuple21 a b)) (y (tuple21 a b)))
  (forall ((s (set (tuple21 a b))))
  (= (mem3 x (tb2t11 (add (tuple2 a1 b1) (t2tb13 y) (t2tb11 s))))
  (or (= x y) (mem3 x s))))))

(declare-fun t2tb14 (b) uni)

;; t2tb_sort
  (assert (forall ((x b)) (sort b1 (t2tb14 x))))

(declare-fun tb2t14 (uni) b)

;; BridgeL
  (assert
  (forall ((i b)) (! (= (tb2t14 (t2tb14 i)) i) :pattern ((t2tb14 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort b1 j) (= (t2tb14 (tb2t14 j)) j)) :pattern ((t2tb14 (tb2t14 j))) )))

;; add_def1
  (assert
  (forall ((x b) (y b))
  (forall ((s (set b)))
  (= (mem2 x (tb2t12 (add b1 (t2tb14 y) (t2tb12 s))))
  (or (= x y) (mem2 x s))))))

(declare-fun t2tb2 (a) uni)

;; t2tb_sort
  (assert (forall ((x a)) (sort a1 (t2tb2 x))))

(declare-fun tb2t2 (uni) a)

;; BridgeL
  (assert (forall ((i a)) (! (= (tb2t2 (t2tb2 i)) i) :pattern ((t2tb2 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort a1 j) (= (t2tb2 (tb2t2 j)) j)) :pattern ((t2tb2 (tb2t2 j))) )))

;; add_def1
  (assert
  (forall ((x a) (y a))
  (forall ((s (set a)))
  (= (mem1 x (tb2t1 (add a1 (t2tb2 y) (t2tb1 s)))) (or (= x y) (mem1 x s))))))

;; add_def1
  (assert
  (forall ((a2 ty))
  (forall ((x uni) (y uni))
  (=> (sort a2 x)
  (=> (sort a2 y)
  (forall ((s uni)) (= (mem a2 x (add a2 y s)) (or (= x y) (mem a2 x s)))))))))

(declare-fun singleton (ty uni) uni)

;; singleton_sort
  (assert
  (forall ((a2 ty)) (forall ((x uni)) (sort (set1 a2) (singleton a2 x)))))

;; mem_singleton
  (assert
  (forall ((x (set (tuple21 a (tuple21 b c)))) (y (set (tuple21 a (tuple21 b
  c)))))
  (= (mem15 x
  (tb2t327 (singleton (set1 (tuple2 a1 (tuple2 b1 c1))) (t2tb261 y))))
  (= x y))))

;; mem_singleton
  (assert
  (forall ((x (tuple21 a (tuple21 b c))) (y (tuple21 a (tuple21 b c))))
  (= (mem14 x (tb2t261 (singleton (tuple2 a1 (tuple2 b1 c1)) (t2tb260 y))))
  (= x y))))

;; mem_singleton
  (assert
  (forall ((x (set (tuple21 a c))) (y (set (tuple21 a c))))
  (= (mem11 x (tb2t128 (singleton (set1 (tuple2 a1 c1)) (t2tb129 y))))
  (= x y))))

;; mem_singleton
  (assert
  (forall ((x (tuple21 a c)) (y (tuple21 a c)))
  (= (mem10 x (tb2t129 (singleton (tuple2 a1 c1) (t2tb133 y)))) (= x y))))

;; mem_singleton
  (assert
  (forall ((x (tuple21 b c)) (y (tuple21 b c)))
  (= (mem8 x (tb2t131 (singleton (tuple2 b1 c1) (t2tb134 y)))) (= x y))))

;; mem_singleton
  (assert
  (forall ((x c) (y c))
  (= (mem7 x (tb2t132 (singleton c1 (t2tb135 y)))) (= x y))))

;; mem_singleton
  (assert
  (forall ((x (set (tuple21 a b))) (y (set (tuple21 a b))))
  (= (mem4 x (tb2t10 (singleton (set1 (tuple2 a1 b1)) (t2tb11 y)))) (= x y))))

;; mem_singleton
  (assert
  (forall ((x (tuple21 a b)) (y (tuple21 a b)))
  (= (mem3 x (tb2t11 (singleton (tuple2 a1 b1) (t2tb13 y)))) (= x y))))

;; mem_singleton
  (assert
  (forall ((x b) (y b))
  (= (mem2 x (tb2t12 (singleton b1 (t2tb14 y)))) (= x y))))

;; mem_singleton
  (assert
  (forall ((x a) (y a))
  (= (mem1 x (tb2t1 (singleton a1 (t2tb2 y)))) (= x y))))

;; mem_singleton
  (assert
  (forall ((a2 ty))
  (forall ((x uni) (y uni))
  (=> (sort a2 x) (=> (sort a2 y) (= (mem a2 x (singleton a2 y)) (= x y)))))))

(declare-fun remove (ty uni uni) uni)

;; remove_sort
  (assert
  (forall ((a2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 a2) (remove a2 x x1)))))

;; remove_def1
  (assert
  (forall ((x (set (tuple21 a (tuple21 b c)))) (y (set (tuple21 a (tuple21 b
  c)))) (s (set (set (tuple21 a (tuple21 b c))))))
  (= (mem15 x
  (tb2t327
  (remove (set1 (tuple2 a1 (tuple2 b1 c1))) (t2tb261 y) (t2tb327 s))))
  (and (not (= x y)) (mem15 x s)))))

;; remove_def1
  (assert
  (forall ((x (tuple21 a (tuple21 b c))) (y (tuple21 a (tuple21 b c)))
  (s (set (tuple21 a (tuple21 b c)))))
  (= (mem14 x
  (tb2t261 (remove (tuple2 a1 (tuple2 b1 c1)) (t2tb260 y) (t2tb261 s))))
  (and (not (= x y)) (mem14 x s)))))

;; remove_def1
  (assert
  (forall ((x (set (tuple21 a c))) (y (set (tuple21 a c)))
  (s (set (set (tuple21 a c)))))
  (= (mem11 x
  (tb2t128 (remove (set1 (tuple2 a1 c1)) (t2tb129 y) (t2tb128 s))))
  (and (not (= x y)) (mem11 x s)))))

;; remove_def1
  (assert
  (forall ((x (tuple21 a c)) (y (tuple21 a c)) (s (set (tuple21 a c))))
  (= (mem10 x (tb2t129 (remove (tuple2 a1 c1) (t2tb133 y) (t2tb129 s))))
  (and (not (= x y)) (mem10 x s)))))

;; remove_def1
  (assert
  (forall ((x (tuple21 b c)) (y (tuple21 b c)) (s (set (tuple21 b c))))
  (= (mem8 x (tb2t131 (remove (tuple2 b1 c1) (t2tb134 y) (t2tb131 s))))
  (and (not (= x y)) (mem8 x s)))))

;; remove_def1
  (assert
  (forall ((x c) (y c) (s (set c)))
  (= (mem7 x (tb2t132 (remove c1 (t2tb135 y) (t2tb132 s))))
  (and (not (= x y)) (mem7 x s)))))

;; remove_def1
  (assert
  (forall ((x (set (tuple21 a b))) (y (set (tuple21 a b)))
  (s (set (set (tuple21 a b)))))
  (= (mem4 x (tb2t10 (remove (set1 (tuple2 a1 b1)) (t2tb11 y) (t2tb10 s))))
  (and (not (= x y)) (mem4 x s)))))

;; remove_def1
  (assert
  (forall ((x (tuple21 a b)) (y (tuple21 a b)) (s (set (tuple21 a b))))
  (= (mem3 x (tb2t11 (remove (tuple2 a1 b1) (t2tb13 y) (t2tb11 s))))
  (and (not (= x y)) (mem3 x s)))))

;; remove_def1
  (assert
  (forall ((x b) (y b) (s (set b)))
  (= (mem2 x (tb2t12 (remove b1 (t2tb14 y) (t2tb12 s))))
  (and (not (= x y)) (mem2 x s)))))

;; remove_def1
  (assert
  (forall ((x a) (y a) (s (set a)))
  (= (mem1 x (tb2t1 (remove a1 (t2tb2 y) (t2tb1 s))))
  (and (not (= x y)) (mem1 x s)))))

;; remove_def1
  (assert
  (forall ((a2 ty))
  (forall ((x uni) (y uni) (s uni))
  (=> (sort a2 x)
  (=> (sort a2 y)
  (= (mem a2 x (remove a2 y s)) (and (not (= x y)) (mem a2 x s))))))))

(declare-fun all (ty) uni)

;; all_sort
  (assert (forall ((a2 ty)) (sort (set1 a2) (all a2))))

;; all_def
  (assert
  (forall ((x (set (tuple21 a (tuple21 b c))))) (mem15 x
  (tb2t327 (all (set1 (tuple2 a1 (tuple2 b1 c1))))))))

;; all_def
  (assert
  (forall ((x (tuple21 a (tuple21 b c)))) (mem14 x
  (tb2t261 (all (tuple2 a1 (tuple2 b1 c1)))))))

;; all_def
  (assert
  (forall ((x (set (tuple21 a c)))) (mem11 x
  (tb2t128 (all (set1 (tuple2 a1 c1)))))))

;; all_def
  (assert
  (forall ((x (tuple21 a c))) (mem10 x (tb2t129 (all (tuple2 a1 c1))))))

;; all_def
  (assert
  (forall ((x (tuple21 b c))) (mem8 x (tb2t131 (all (tuple2 b1 c1))))))

;; all_def
  (assert (forall ((x c)) (mem7 x (tb2t132 (all c1)))))

;; all_def
  (assert
  (forall ((x (set (tuple21 a b)))) (mem4 x
  (tb2t10 (all (set1 (tuple2 a1 b1)))))))

;; all_def
  (assert
  (forall ((x (tuple21 a b))) (mem3 x (tb2t11 (all (tuple2 a1 b1))))))

;; all_def
  (assert (forall ((x b)) (mem2 x (tb2t12 (all b1)))))

;; all_def
  (assert (forall ((x a)) (mem1 x (tb2t1 (all a1)))))

;; all_def
  (assert (forall ((a2 ty)) (forall ((x uni)) (mem a2 x (all a2)))))

(declare-fun union1 (ty uni uni) uni)

;; union_sort
  (assert
  (forall ((a2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 a2) (union1 a2 x x1)))))

;; mem_union
  (assert
  (forall ((s (set (set (tuple21 a (tuple21 b c))))) (t (set (set (tuple21 a
  (tuple21 b c))))) (x (set (tuple21 a (tuple21 b c)))))
  (= (mem15 x
  (tb2t327
  (union1 (set1 (tuple2 a1 (tuple2 b1 c1))) (t2tb327 s) (t2tb327 t))))
  (or (mem15 x s) (mem15 x t)))))

;; mem_union
  (assert
  (forall ((s (set (tuple21 a (tuple21 b c)))) (t (set (tuple21 a (tuple21 b
  c)))) (x (tuple21 a (tuple21 b c))))
  (= (mem14 x
  (tb2t261 (union1 (tuple2 a1 (tuple2 b1 c1)) (t2tb261 s) (t2tb261 t))))
  (or (mem14 x s) (mem14 x t)))))

;; mem_union
  (assert
  (forall ((s (set (set (tuple21 a c)))) (t (set (set (tuple21 a c))))
  (x (set (tuple21 a c))))
  (= (mem11 x
  (tb2t128 (union1 (set1 (tuple2 a1 c1)) (t2tb128 s) (t2tb128 t))))
  (or (mem11 x s) (mem11 x t)))))

;; mem_union
  (assert
  (forall ((s (set (tuple21 a c))) (t (set (tuple21 a c))) (x (tuple21 a c)))
  (= (mem10 x (tb2t129 (union1 (tuple2 a1 c1) (t2tb129 s) (t2tb129 t))))
  (or (mem10 x s) (mem10 x t)))))

;; mem_union
  (assert
  (forall ((s (set (tuple21 b c))) (t (set (tuple21 b c))) (x (tuple21 b c)))
  (= (mem8 x (tb2t131 (union1 (tuple2 b1 c1) (t2tb131 s) (t2tb131 t))))
  (or (mem8 x s) (mem8 x t)))))

;; mem_union
  (assert
  (forall ((s (set c)) (t (set c)) (x c))
  (= (mem7 x (tb2t132 (union1 c1 (t2tb132 s) (t2tb132 t))))
  (or (mem7 x s) (mem7 x t)))))

;; mem_union
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set (set (tuple21 a b))))
  (x (set (tuple21 a b))))
  (= (mem4 x (tb2t10 (union1 (set1 (tuple2 a1 b1)) (t2tb10 s) (t2tb10 t))))
  (or (mem4 x s) (mem4 x t)))))

;; mem_union
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (tuple21 a b))) (x (tuple21 a b)))
  (= (mem3 x (tb2t11 (union1 (tuple2 a1 b1) (t2tb11 s) (t2tb11 t))))
  (or (mem3 x s) (mem3 x t)))))

;; mem_union
  (assert
  (forall ((s (set b)) (t (set b)) (x b))
  (= (mem2 x (tb2t12 (union1 b1 (t2tb12 s) (t2tb12 t))))
  (or (mem2 x s) (mem2 x t)))))

;; mem_union
  (assert
  (forall ((s (set a)) (t (set a)) (x a))
  (= (mem1 x (tb2t1 (union1 a1 (t2tb1 s) (t2tb1 t))))
  (or (mem1 x s) (mem1 x t)))))

;; mem_union
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t uni) (x uni))
  (= (mem a2 x (union1 a2 s t)) (or (mem a2 x s) (mem a2 x t))))))

(declare-fun inter (ty uni uni) uni)

;; inter_sort
  (assert
  (forall ((a2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 a2) (inter a2 x x1)))))

;; mem_inter
  (assert
  (forall ((s (set (set (tuple21 a (tuple21 b c))))) (t (set (set (tuple21 a
  (tuple21 b c))))) (x (set (tuple21 a (tuple21 b c)))))
  (= (mem15 x
  (tb2t327 (inter (set1 (tuple2 a1 (tuple2 b1 c1))) (t2tb327 s) (t2tb327 t))))
  (and (mem15 x s) (mem15 x t)))))

;; mem_inter
  (assert
  (forall ((s (set (tuple21 a (tuple21 b c)))) (t (set (tuple21 a (tuple21 b
  c)))) (x (tuple21 a (tuple21 b c))))
  (= (mem14 x
  (tb2t261 (inter (tuple2 a1 (tuple2 b1 c1)) (t2tb261 s) (t2tb261 t))))
  (and (mem14 x s) (mem14 x t)))))

;; mem_inter
  (assert
  (forall ((s (set (set (tuple21 a c)))) (t (set (set (tuple21 a c))))
  (x (set (tuple21 a c))))
  (= (mem11 x
  (tb2t128 (inter (set1 (tuple2 a1 c1)) (t2tb128 s) (t2tb128 t))))
  (and (mem11 x s) (mem11 x t)))))

;; mem_inter
  (assert
  (forall ((s (set (tuple21 a c))) (t (set (tuple21 a c))) (x (tuple21 a c)))
  (= (mem10 x (tb2t129 (inter (tuple2 a1 c1) (t2tb129 s) (t2tb129 t))))
  (and (mem10 x s) (mem10 x t)))))

;; mem_inter
  (assert
  (forall ((s (set (tuple21 b c))) (t (set (tuple21 b c))) (x (tuple21 b c)))
  (= (mem8 x (tb2t131 (inter (tuple2 b1 c1) (t2tb131 s) (t2tb131 t))))
  (and (mem8 x s) (mem8 x t)))))

;; mem_inter
  (assert
  (forall ((s (set c)) (t (set c)) (x c))
  (= (mem7 x (tb2t132 (inter c1 (t2tb132 s) (t2tb132 t))))
  (and (mem7 x s) (mem7 x t)))))

;; mem_inter
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set (set (tuple21 a b))))
  (x (set (tuple21 a b))))
  (= (mem4 x (tb2t10 (inter (set1 (tuple2 a1 b1)) (t2tb10 s) (t2tb10 t))))
  (and (mem4 x s) (mem4 x t)))))

;; mem_inter
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (tuple21 a b))) (x (tuple21 a b)))
  (= (mem3 x (tb2t11 (inter (tuple2 a1 b1) (t2tb11 s) (t2tb11 t))))
  (and (mem3 x s) (mem3 x t)))))

;; mem_inter
  (assert
  (forall ((s (set b)) (t (set b)) (x b))
  (= (mem2 x (tb2t12 (inter b1 (t2tb12 s) (t2tb12 t))))
  (and (mem2 x s) (mem2 x t)))))

;; mem_inter
  (assert
  (forall ((s (set a)) (t (set a)) (x a))
  (= (mem1 x (tb2t1 (inter a1 (t2tb1 s) (t2tb1 t))))
  (and (mem1 x s) (mem1 x t)))))

;; mem_inter
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t uni) (x uni))
  (= (mem a2 x (inter a2 s t)) (and (mem a2 x s) (mem a2 x t))))))

(declare-fun diff (ty uni uni) uni)

;; diff_sort
  (assert
  (forall ((a2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 a2) (diff a2 x x1)))))

;; mem_diff
  (assert
  (forall ((s (set (set (tuple21 a (tuple21 b c))))) (t (set (set (tuple21 a
  (tuple21 b c))))) (x (set (tuple21 a (tuple21 b c)))))
  (= (mem15 x
  (tb2t327 (diff (set1 (tuple2 a1 (tuple2 b1 c1))) (t2tb327 s) (t2tb327 t))))
  (and (mem15 x s) (not (mem15 x t))))))

;; mem_diff
  (assert
  (forall ((s (set (tuple21 a (tuple21 b c)))) (t (set (tuple21 a (tuple21 b
  c)))) (x (tuple21 a (tuple21 b c))))
  (= (mem14 x
  (tb2t261 (diff (tuple2 a1 (tuple2 b1 c1)) (t2tb261 s) (t2tb261 t))))
  (and (mem14 x s) (not (mem14 x t))))))

;; mem_diff
  (assert
  (forall ((s (set (set (tuple21 a c)))) (t (set (set (tuple21 a c))))
  (x (set (tuple21 a c))))
  (= (mem11 x (tb2t128 (diff (set1 (tuple2 a1 c1)) (t2tb128 s) (t2tb128 t))))
  (and (mem11 x s) (not (mem11 x t))))))

;; mem_diff
  (assert
  (forall ((s (set (tuple21 a c))) (t (set (tuple21 a c))) (x (tuple21 a c)))
  (= (mem10 x (tb2t129 (diff (tuple2 a1 c1) (t2tb129 s) (t2tb129 t))))
  (and (mem10 x s) (not (mem10 x t))))))

;; mem_diff
  (assert
  (forall ((s (set (tuple21 b c))) (t (set (tuple21 b c))) (x (tuple21 b c)))
  (= (mem8 x (tb2t131 (diff (tuple2 b1 c1) (t2tb131 s) (t2tb131 t))))
  (and (mem8 x s) (not (mem8 x t))))))

;; mem_diff
  (assert
  (forall ((s (set c)) (t (set c)) (x c))
  (= (mem7 x (tb2t132 (diff c1 (t2tb132 s) (t2tb132 t))))
  (and (mem7 x s) (not (mem7 x t))))))

;; mem_diff
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set (set (tuple21 a b))))
  (x (set (tuple21 a b))))
  (= (mem4 x (tb2t10 (diff (set1 (tuple2 a1 b1)) (t2tb10 s) (t2tb10 t))))
  (and (mem4 x s) (not (mem4 x t))))))

;; mem_diff
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (tuple21 a b))) (x (tuple21 a b)))
  (= (mem3 x (tb2t11 (diff (tuple2 a1 b1) (t2tb11 s) (t2tb11 t))))
  (and (mem3 x s) (not (mem3 x t))))))

;; mem_diff
  (assert
  (forall ((s (set b)) (t (set b)) (x b))
  (= (mem2 x (tb2t12 (diff b1 (t2tb12 s) (t2tb12 t))))
  (and (mem2 x s) (not (mem2 x t))))))

;; mem_diff
  (assert
  (forall ((s (set a)) (t (set a)) (x a))
  (= (mem1 x (tb2t1 (diff a1 (t2tb1 s) (t2tb1 t))))
  (and (mem1 x s) (not (mem1 x t))))))

;; mem_diff
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t uni) (x uni))
  (= (mem a2 x (diff a2 s t)) (and (mem a2 x s) (not (mem a2 x t)))))))

(declare-fun Tuple2 (ty ty uni uni) uni)

;; Tuple2_sort
  (assert
  (forall ((a2 ty) (a3 ty))
  (forall ((x uni) (x1 uni)) (sort (tuple2 a3 a2) (Tuple2 a3 a2 x x1)))))

(declare-fun Tuple2_proj_1 (ty ty uni) uni)

;; Tuple2_proj_1_sort
  (assert
  (forall ((a2 ty) (a3 ty))
  (forall ((x uni)) (sort a3 (Tuple2_proj_1 a3 a2 x)))))

;; Tuple2_proj_1_def
  (assert
  (forall ((a2 ty) (a3 ty))
  (forall ((u uni) (u1 uni))
  (=> (sort a3 u) (= (Tuple2_proj_1 a3 a2 (Tuple2 a3 a2 u u1)) u)))))

(declare-fun Tuple2_proj_2 (ty ty uni) uni)

;; Tuple2_proj_2_sort
  (assert
  (forall ((a2 ty) (a3 ty))
  (forall ((x uni)) (sort a2 (Tuple2_proj_2 a3 a2 x)))))

;; Tuple2_proj_2_def
  (assert
  (forall ((a2 ty) (a3 ty))
  (forall ((u uni) (u1 uni))
  (=> (sort a2 u1) (= (Tuple2_proj_2 a3 a2 (Tuple2 a3 a2 u u1)) u1)))))

;; tuple2_inversion
  (assert
  (forall ((a2 ty) (a3 ty))
  (forall ((u uni))
  (=> (sort (tuple2 a3 a2) u)
  (= u (Tuple2 a3 a2 (Tuple2_proj_1 a3 a2 u) (Tuple2_proj_2 a3 a2 u)))))))

(declare-fun times (ty ty uni uni) uni)

;; times_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (tuple2 a2 b2)) (times b2 a2 x x1)))))

(declare-fun times2 ((set a) (set b)) (set (tuple21 a b)))

(declare-fun times3 ((set b) (set c)) (set (tuple21 b c)))

(declare-fun times4 ((set a) (set c)) (set (tuple21 a c)))

(declare-fun times5 ((set a) (set (tuple21 b c))) (set (tuple21 a (tuple21 b
  c))))

;; mem_times
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set (set (tuple21 a (tuple21 b c))))) (x uni)
  (y (set (tuple21 a (tuple21 b c)))))
  (= (mem (tuple2 a2 (set1 (tuple2 a1 (tuple2 b1 c1))))
  (Tuple2 a2 (set1 (tuple2 a1 (tuple2 b1 c1))) x (t2tb261 y))
  (times (set1 (tuple2 a1 (tuple2 b1 c1))) a2 s (t2tb327 t)))
  (and (mem a2 x s) (mem15 y t))))))

;; mem_times
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set (tuple21 a (tuple21 b c)))) (x uni) (y (tuple21 a
  (tuple21 b c))))
  (= (mem (tuple2 a2 (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 a2 (tuple2 a1 (tuple2 b1 c1)) x (t2tb260 y))
  (times (tuple2 a1 (tuple2 b1 c1)) a2 s (t2tb261 t)))
  (and (mem a2 x s) (mem14 y t))))))

;; mem_times
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set (set (tuple21 a c)))) (x uni) (y (set (tuple21 a
  c))))
  (= (mem (tuple2 a2 (set1 (tuple2 a1 c1)))
  (Tuple2 a2 (set1 (tuple2 a1 c1)) x (t2tb129 y))
  (times (set1 (tuple2 a1 c1)) a2 s (t2tb128 t)))
  (and (mem a2 x s) (mem11 y t))))))

;; mem_times
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set (tuple21 a c))) (x uni) (y (tuple21 a c)))
  (= (mem (tuple2 a2 (tuple2 a1 c1)) (Tuple2 a2 (tuple2 a1 c1) x (t2tb133 y))
  (times (tuple2 a1 c1) a2 s (t2tb129 t))) (and (mem a2 x s) (mem10 y t))))))

;; mem_times
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set (tuple21 b c))) (x uni) (y (tuple21 b c)))
  (= (mem (tuple2 a2 (tuple2 b1 c1)) (Tuple2 a2 (tuple2 b1 c1) x (t2tb134 y))
  (times (tuple2 b1 c1) a2 s (t2tb131 t))) (and (mem a2 x s) (mem8 y t))))))

;; mem_times
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set c)) (x uni) (y c))
  (= (mem (tuple2 a2 c1) (Tuple2 a2 c1 x (t2tb135 y))
  (times c1 a2 s (t2tb132 t))) (and (mem a2 x s) (mem7 y t))))))

;; mem_times
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set (set (tuple21 a b)))) (x uni) (y (set (tuple21 a
  b))))
  (= (mem (tuple2 a2 (set1 (tuple2 a1 b1)))
  (Tuple2 a2 (set1 (tuple2 a1 b1)) x (t2tb11 y))
  (times (set1 (tuple2 a1 b1)) a2 s (t2tb10 t)))
  (and (mem a2 x s) (mem4 y t))))))

;; mem_times
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set (tuple21 a b))) (x uni) (y (tuple21 a b)))
  (= (mem (tuple2 a2 (tuple2 a1 b1)) (Tuple2 a2 (tuple2 a1 b1) x (t2tb13 y))
  (times (tuple2 a1 b1) a2 s (t2tb11 t))) (and (mem a2 x s) (mem3 y t))))))

;; mem_times
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set b)) (x uni) (y b))
  (= (mem (tuple2 a2 b1) (Tuple2 a2 b1 x (t2tb14 y))
  (times b1 a2 s (t2tb12 t))) (and (mem a2 x s) (mem2 y t))))))

;; mem_times
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set a)) (x uni) (y a))
  (= (mem (tuple2 a2 a1) (Tuple2 a2 a1 x (t2tb2 y))
  (times a1 a2 s (t2tb1 t))) (and (mem a2 x s) (mem1 y t))))))

(declare-fun t2tb373 ((set (tuple21 (set (tuple21 a (tuple21 b c)))
  (set (tuple21 a (tuple21 b c)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a (tuple21 b c))) (set (tuple21 a
  (tuple21 b c))))))) (sort
  (set1
  (tuple2 (set1 (tuple2 a1 (tuple2 b1 c1)))
  (set1 (tuple2 a1 (tuple2 b1 c1))))) (t2tb373 x))))

(declare-fun tb2t373 (uni) (set (tuple21 (set (tuple21 a (tuple21 b c)))
  (set (tuple21 a (tuple21 b c))))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a (tuple21 b c))) (set (tuple21 a
  (tuple21 b c)))))))
  (! (= (tb2t373 (t2tb373 i)) i) :pattern ((t2tb373 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (tuple2 (set1 (tuple2 a1 (tuple2 b1 c1)))
     (set1 (tuple2 a1 (tuple2 b1 c1))))) j) (= (t2tb373 (tb2t373 j)) j)) :pattern (
  (t2tb373 (tb2t373 j))) )))

(declare-fun t2tb374 ((tuple21 (set (tuple21 a (tuple21 b c)))
  (set (tuple21 a (tuple21 b c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a (tuple21 b c))) (set (tuple21 a
  (tuple21 b c)))))) (sort
  (tuple2 (set1 (tuple2 a1 (tuple2 b1 c1)))
  (set1 (tuple2 a1 (tuple2 b1 c1)))) (t2tb374 x))))

(declare-fun tb2t374 (uni) (tuple21 (set (tuple21 a (tuple21 b c)))
  (set (tuple21 a (tuple21 b c)))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a (tuple21 b c))) (set (tuple21 a
  (tuple21 b c)))))) (! (= (tb2t374 (t2tb374 i)) i) :pattern ((t2tb374 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (tuple2 (set1 (tuple2 a1 (tuple2 b1 c1)))
     (set1 (tuple2 a1 (tuple2 b1 c1)))) j) (= (t2tb374 (tb2t374 j)) j)) :pattern (
  (t2tb374 (tb2t374 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a (tuple21 b c))))) (t (set (set (tuple21 a
  (tuple21 b c))))) (x (set (tuple21 a (tuple21 b c)))) (y (set (tuple21 a
  (tuple21 b c)))))
  (= (mem
  (tuple2 (set1 (tuple2 a1 (tuple2 b1 c1)))
  (set1 (tuple2 a1 (tuple2 b1 c1))))
  (Tuple2 (set1 (tuple2 a1 (tuple2 b1 c1))) (set1 (tuple2 a1 (tuple2 b1 c1)))
  (t2tb261 x) (t2tb261 y))
  (times (set1 (tuple2 a1 (tuple2 b1 c1))) (set1 (tuple2 a1 (tuple2 b1 c1)))
  (t2tb327 s) (t2tb327 t))) (and (mem15 x s) (mem15 y t)))))

(declare-fun t2tb375 ((set (tuple21 (set (tuple21 a (tuple21 b c)))
  (tuple21 a (tuple21 b c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a (tuple21 b c))) (tuple21 a
  (tuple21 b c)))))) (sort
  (set1
  (tuple2 (set1 (tuple2 a1 (tuple2 b1 c1))) (tuple2 a1 (tuple2 b1 c1))))
  (t2tb375 x))))

(declare-fun tb2t375 (uni) (set (tuple21 (set (tuple21 a (tuple21 b c)))
  (tuple21 a (tuple21 b c)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a (tuple21 b c))) (tuple21 a
  (tuple21 b c)))))) (! (= (tb2t375 (t2tb375 i)) i) :pattern ((t2tb375 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (tuple2 (set1 (tuple2 a1 (tuple2 b1 c1))) (tuple2 a1 (tuple2 b1 c1))))
     j) (= (t2tb375 (tb2t375 j)) j)) :pattern ((t2tb375 (tb2t375 j))) )))

(declare-fun t2tb376 ((tuple21 (set (tuple21 a (tuple21 b c))) (tuple21 a
  (tuple21 b c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a (tuple21 b c))) (tuple21 a (tuple21 b
  c))))) (sort
  (tuple2 (set1 (tuple2 a1 (tuple2 b1 c1))) (tuple2 a1 (tuple2 b1 c1)))
  (t2tb376 x))))

(declare-fun tb2t376 (uni) (tuple21 (set (tuple21 a (tuple21 b c)))
  (tuple21 a (tuple21 b c))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a (tuple21 b c))) (tuple21 a (tuple21 b
  c))))) (! (= (tb2t376 (t2tb376 i)) i) :pattern ((t2tb376 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (tuple2 (set1 (tuple2 a1 (tuple2 b1 c1))) (tuple2 a1 (tuple2 b1 c1))) j)
     (= (t2tb376 (tb2t376 j)) j)) :pattern ((t2tb376 (tb2t376 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a (tuple21 b c))))) (t (set (tuple21 a
  (tuple21 b c)))) (x (set (tuple21 a (tuple21 b c)))) (y (tuple21 a
  (tuple21 b c))))
  (= (mem
  (tuple2 (set1 (tuple2 a1 (tuple2 b1 c1))) (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 (set1 (tuple2 a1 (tuple2 b1 c1))) (tuple2 a1 (tuple2 b1 c1))
  (t2tb261 x) (t2tb260 y))
  (times (tuple2 a1 (tuple2 b1 c1)) (set1 (tuple2 a1 (tuple2 b1 c1)))
  (t2tb327 s) (t2tb261 t))) (and (mem15 x s) (mem14 y t)))))

(declare-fun t2tb377 ((set (tuple21 (set (tuple21 a (tuple21 b c)))
  (set (tuple21 a c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a (tuple21 b c))) (set (tuple21 a
  c)))))) (sort
  (set1 (tuple2 (set1 (tuple2 a1 (tuple2 b1 c1))) (set1 (tuple2 a1 c1))))
  (t2tb377 x))))

(declare-fun tb2t377 (uni) (set (tuple21 (set (tuple21 a (tuple21 b c)))
  (set (tuple21 a c)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a (tuple21 b c))) (set (tuple21 a
  c)))))) (! (= (tb2t377 (t2tb377 i)) i) :pattern ((t2tb377 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (set1 (tuple2 a1 (tuple2 b1 c1))) (set1 (tuple2 a1 c1))))
     j) (= (t2tb377 (tb2t377 j)) j)) :pattern ((t2tb377 (tb2t377 j))) )))

(declare-fun t2tb378 ((tuple21 (set (tuple21 a (tuple21 b c)))
  (set (tuple21 a c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a (tuple21 b c))) (set (tuple21 a c)))))
  (sort (tuple2 (set1 (tuple2 a1 (tuple2 b1 c1))) (set1 (tuple2 a1 c1)))
  (t2tb378 x))))

(declare-fun tb2t378 (uni) (tuple21 (set (tuple21 a (tuple21 b c)))
  (set (tuple21 a c))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a (tuple21 b c))) (set (tuple21 a c)))))
  (! (= (tb2t378 (t2tb378 i)) i) :pattern ((t2tb378 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (tuple2 (set1 (tuple2 a1 (tuple2 b1 c1))) (set1 (tuple2 a1 c1))) j)
     (= (t2tb378 (tb2t378 j)) j)) :pattern ((t2tb378 (tb2t378 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a (tuple21 b c))))) (t (set (set (tuple21 a
  c)))) (x (set (tuple21 a (tuple21 b c)))) (y (set (tuple21 a c))))
  (= (mem (tuple2 (set1 (tuple2 a1 (tuple2 b1 c1))) (set1 (tuple2 a1 c1)))
  (Tuple2 (set1 (tuple2 a1 (tuple2 b1 c1))) (set1 (tuple2 a1 c1)) (t2tb261 x)
  (t2tb129 y))
  (times (set1 (tuple2 a1 c1)) (set1 (tuple2 a1 (tuple2 b1 c1))) (t2tb327 s)
  (t2tb128 t))) (and (mem15 x s) (mem11 y t)))))

(declare-fun t2tb379 ((set (tuple21 (set (tuple21 a (tuple21 b c)))
  (tuple21 a c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a (tuple21 b c))) (tuple21 a c)))))
  (sort (set1 (tuple2 (set1 (tuple2 a1 (tuple2 b1 c1))) (tuple2 a1 c1)))
  (t2tb379 x))))

(declare-fun tb2t379 (uni) (set (tuple21 (set (tuple21 a (tuple21 b c)))
  (tuple21 a c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a (tuple21 b c))) (tuple21 a c)))))
  (! (= (tb2t379 (t2tb379 i)) i) :pattern ((t2tb379 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (set1 (tuple2 a1 (tuple2 b1 c1))) (tuple2 a1 c1))) j)
     (= (t2tb379 (tb2t379 j)) j)) :pattern ((t2tb379 (tb2t379 j))) )))

(declare-fun t2tb380 ((tuple21 (set (tuple21 a (tuple21 b c))) (tuple21 a
  c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a (tuple21 b c))) (tuple21 a c)))) (sort
  (tuple2 (set1 (tuple2 a1 (tuple2 b1 c1))) (tuple2 a1 c1)) (t2tb380 x))))

(declare-fun tb2t380 (uni) (tuple21 (set (tuple21 a (tuple21 b c)))
  (tuple21 a c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a (tuple21 b c))) (tuple21 a c))))
  (! (= (tb2t380 (t2tb380 i)) i) :pattern ((t2tb380 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 a1 (tuple2 b1 c1))) (tuple2 a1 c1)) j)
     (= (t2tb380 (tb2t380 j)) j)) :pattern ((t2tb380 (tb2t380 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a (tuple21 b c))))) (t (set (tuple21 a c)))
  (x (set (tuple21 a (tuple21 b c)))) (y (tuple21 a c)))
  (= (mem (tuple2 (set1 (tuple2 a1 (tuple2 b1 c1))) (tuple2 a1 c1))
  (Tuple2 (set1 (tuple2 a1 (tuple2 b1 c1))) (tuple2 a1 c1) (t2tb261 x)
  (t2tb133 y))
  (times (tuple2 a1 c1) (set1 (tuple2 a1 (tuple2 b1 c1))) (t2tb327 s)
  (t2tb129 t))) (and (mem15 x s) (mem10 y t)))))

(declare-fun t2tb381 ((set (tuple21 (set (tuple21 a (tuple21 b c)))
  (tuple21 b c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a (tuple21 b c))) (tuple21 b c)))))
  (sort (set1 (tuple2 (set1 (tuple2 a1 (tuple2 b1 c1))) (tuple2 b1 c1)))
  (t2tb381 x))))

(declare-fun tb2t381 (uni) (set (tuple21 (set (tuple21 a (tuple21 b c)))
  (tuple21 b c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a (tuple21 b c))) (tuple21 b c)))))
  (! (= (tb2t381 (t2tb381 i)) i) :pattern ((t2tb381 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (set1 (tuple2 a1 (tuple2 b1 c1))) (tuple2 b1 c1))) j)
     (= (t2tb381 (tb2t381 j)) j)) :pattern ((t2tb381 (tb2t381 j))) )))

(declare-fun t2tb382 ((tuple21 (set (tuple21 a (tuple21 b c))) (tuple21 b
  c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a (tuple21 b c))) (tuple21 b c)))) (sort
  (tuple2 (set1 (tuple2 a1 (tuple2 b1 c1))) (tuple2 b1 c1)) (t2tb382 x))))

(declare-fun tb2t382 (uni) (tuple21 (set (tuple21 a (tuple21 b c)))
  (tuple21 b c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a (tuple21 b c))) (tuple21 b c))))
  (! (= (tb2t382 (t2tb382 i)) i) :pattern ((t2tb382 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 a1 (tuple2 b1 c1))) (tuple2 b1 c1)) j)
     (= (t2tb382 (tb2t382 j)) j)) :pattern ((t2tb382 (tb2t382 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a (tuple21 b c))))) (t (set (tuple21 b c)))
  (x (set (tuple21 a (tuple21 b c)))) (y (tuple21 b c)))
  (= (mem (tuple2 (set1 (tuple2 a1 (tuple2 b1 c1))) (tuple2 b1 c1))
  (Tuple2 (set1 (tuple2 a1 (tuple2 b1 c1))) (tuple2 b1 c1) (t2tb261 x)
  (t2tb134 y))
  (times (tuple2 b1 c1) (set1 (tuple2 a1 (tuple2 b1 c1))) (t2tb327 s)
  (t2tb131 t))) (and (mem15 x s) (mem8 y t)))))

(declare-fun t2tb383 ((set (tuple21 (set (tuple21 a (tuple21 b c))) c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a (tuple21 b c))) c)))) (sort
  (set1 (tuple2 (set1 (tuple2 a1 (tuple2 b1 c1))) c1)) (t2tb383 x))))

(declare-fun tb2t383 (uni) (set (tuple21 (set (tuple21 a (tuple21 b c))) c)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a (tuple21 b c))) c))))
  (! (= (tb2t383 (t2tb383 i)) i) :pattern ((t2tb383 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 a1 (tuple2 b1 c1))) c1)) j)
     (= (t2tb383 (tb2t383 j)) j)) :pattern ((t2tb383 (tb2t383 j))) )))

(declare-fun t2tb384 ((tuple21 (set (tuple21 a (tuple21 b c))) c)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a (tuple21 b c))) c))) (sort
  (tuple2 (set1 (tuple2 a1 (tuple2 b1 c1))) c1) (t2tb384 x))))

(declare-fun tb2t384 (uni) (tuple21 (set (tuple21 a (tuple21 b c))) c))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a (tuple21 b c))) c)))
  (! (= (tb2t384 (t2tb384 i)) i) :pattern ((t2tb384 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 a1 (tuple2 b1 c1))) c1) j)
     (= (t2tb384 (tb2t384 j)) j)) :pattern ((t2tb384 (tb2t384 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a (tuple21 b c))))) (t (set c))
  (x (set (tuple21 a (tuple21 b c)))) (y c))
  (= (mem (tuple2 (set1 (tuple2 a1 (tuple2 b1 c1))) c1)
  (Tuple2 (set1 (tuple2 a1 (tuple2 b1 c1))) c1 (t2tb261 x) (t2tb135 y))
  (times c1 (set1 (tuple2 a1 (tuple2 b1 c1))) (t2tb327 s) (t2tb132 t)))
  (and (mem15 x s) (mem7 y t)))))

(declare-fun t2tb385 ((set (tuple21 (set (tuple21 a (tuple21 b c)))
  (set (tuple21 a b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a (tuple21 b c))) (set (tuple21 a
  b)))))) (sort
  (set1 (tuple2 (set1 (tuple2 a1 (tuple2 b1 c1))) (set1 (tuple2 a1 b1))))
  (t2tb385 x))))

(declare-fun tb2t385 (uni) (set (tuple21 (set (tuple21 a (tuple21 b c)))
  (set (tuple21 a b)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a (tuple21 b c))) (set (tuple21 a
  b)))))) (! (= (tb2t385 (t2tb385 i)) i) :pattern ((t2tb385 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (set1 (tuple2 a1 (tuple2 b1 c1))) (set1 (tuple2 a1 b1))))
     j) (= (t2tb385 (tb2t385 j)) j)) :pattern ((t2tb385 (tb2t385 j))) )))

(declare-fun t2tb386 ((tuple21 (set (tuple21 a (tuple21 b c)))
  (set (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a (tuple21 b c))) (set (tuple21 a b)))))
  (sort (tuple2 (set1 (tuple2 a1 (tuple2 b1 c1))) (set1 (tuple2 a1 b1)))
  (t2tb386 x))))

(declare-fun tb2t386 (uni) (tuple21 (set (tuple21 a (tuple21 b c)))
  (set (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a (tuple21 b c))) (set (tuple21 a b)))))
  (! (= (tb2t386 (t2tb386 i)) i) :pattern ((t2tb386 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (tuple2 (set1 (tuple2 a1 (tuple2 b1 c1))) (set1 (tuple2 a1 b1))) j)
     (= (t2tb386 (tb2t386 j)) j)) :pattern ((t2tb386 (tb2t386 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a (tuple21 b c))))) (t (set (set (tuple21 a
  b)))) (x (set (tuple21 a (tuple21 b c)))) (y (set (tuple21 a b))))
  (= (mem (tuple2 (set1 (tuple2 a1 (tuple2 b1 c1))) (set1 (tuple2 a1 b1)))
  (Tuple2 (set1 (tuple2 a1 (tuple2 b1 c1))) (set1 (tuple2 a1 b1)) (t2tb261 x)
  (t2tb11 y))
  (times (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 (tuple2 b1 c1))) (t2tb327 s)
  (t2tb10 t))) (and (mem15 x s) (mem4 y t)))))

(declare-fun t2tb387 ((set (tuple21 (set (tuple21 a (tuple21 b c)))
  (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a (tuple21 b c))) (tuple21 a b)))))
  (sort (set1 (tuple2 (set1 (tuple2 a1 (tuple2 b1 c1))) (tuple2 a1 b1)))
  (t2tb387 x))))

(declare-fun tb2t387 (uni) (set (tuple21 (set (tuple21 a (tuple21 b c)))
  (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a (tuple21 b c))) (tuple21 a b)))))
  (! (= (tb2t387 (t2tb387 i)) i) :pattern ((t2tb387 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (set1 (tuple2 a1 (tuple2 b1 c1))) (tuple2 a1 b1))) j)
     (= (t2tb387 (tb2t387 j)) j)) :pattern ((t2tb387 (tb2t387 j))) )))

(declare-fun t2tb388 ((tuple21 (set (tuple21 a (tuple21 b c))) (tuple21 a
  b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a (tuple21 b c))) (tuple21 a b)))) (sort
  (tuple2 (set1 (tuple2 a1 (tuple2 b1 c1))) (tuple2 a1 b1)) (t2tb388 x))))

(declare-fun tb2t388 (uni) (tuple21 (set (tuple21 a (tuple21 b c)))
  (tuple21 a b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a (tuple21 b c))) (tuple21 a b))))
  (! (= (tb2t388 (t2tb388 i)) i) :pattern ((t2tb388 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 a1 (tuple2 b1 c1))) (tuple2 a1 b1)) j)
     (= (t2tb388 (tb2t388 j)) j)) :pattern ((t2tb388 (tb2t388 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a (tuple21 b c))))) (t (set (tuple21 a b)))
  (x (set (tuple21 a (tuple21 b c)))) (y (tuple21 a b)))
  (= (mem (tuple2 (set1 (tuple2 a1 (tuple2 b1 c1))) (tuple2 a1 b1))
  (Tuple2 (set1 (tuple2 a1 (tuple2 b1 c1))) (tuple2 a1 b1) (t2tb261 x)
  (t2tb13 y))
  (times (tuple2 a1 b1) (set1 (tuple2 a1 (tuple2 b1 c1))) (t2tb327 s)
  (t2tb11 t))) (and (mem15 x s) (mem3 y t)))))

(declare-fun t2tb389 ((set (tuple21 (set (tuple21 a (tuple21 b c))) b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a (tuple21 b c))) b)))) (sort
  (set1 (tuple2 (set1 (tuple2 a1 (tuple2 b1 c1))) b1)) (t2tb389 x))))

(declare-fun tb2t389 (uni) (set (tuple21 (set (tuple21 a (tuple21 b c))) b)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a (tuple21 b c))) b))))
  (! (= (tb2t389 (t2tb389 i)) i) :pattern ((t2tb389 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 a1 (tuple2 b1 c1))) b1)) j)
     (= (t2tb389 (tb2t389 j)) j)) :pattern ((t2tb389 (tb2t389 j))) )))

(declare-fun t2tb390 ((tuple21 (set (tuple21 a (tuple21 b c))) b)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a (tuple21 b c))) b))) (sort
  (tuple2 (set1 (tuple2 a1 (tuple2 b1 c1))) b1) (t2tb390 x))))

(declare-fun tb2t390 (uni) (tuple21 (set (tuple21 a (tuple21 b c))) b))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a (tuple21 b c))) b)))
  (! (= (tb2t390 (t2tb390 i)) i) :pattern ((t2tb390 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 a1 (tuple2 b1 c1))) b1) j)
     (= (t2tb390 (tb2t390 j)) j)) :pattern ((t2tb390 (tb2t390 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a (tuple21 b c))))) (t (set b))
  (x (set (tuple21 a (tuple21 b c)))) (y b))
  (= (mem (tuple2 (set1 (tuple2 a1 (tuple2 b1 c1))) b1)
  (Tuple2 (set1 (tuple2 a1 (tuple2 b1 c1))) b1 (t2tb261 x) (t2tb14 y))
  (times b1 (set1 (tuple2 a1 (tuple2 b1 c1))) (t2tb327 s) (t2tb12 t)))
  (and (mem15 x s) (mem2 y t)))))

(declare-fun t2tb391 ((set (tuple21 (set (tuple21 a (tuple21 b c))) a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a (tuple21 b c))) a)))) (sort
  (set1 (tuple2 (set1 (tuple2 a1 (tuple2 b1 c1))) a1)) (t2tb391 x))))

(declare-fun tb2t391 (uni) (set (tuple21 (set (tuple21 a (tuple21 b c))) a)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a (tuple21 b c))) a))))
  (! (= (tb2t391 (t2tb391 i)) i) :pattern ((t2tb391 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 a1 (tuple2 b1 c1))) a1)) j)
     (= (t2tb391 (tb2t391 j)) j)) :pattern ((t2tb391 (tb2t391 j))) )))

(declare-fun t2tb392 ((tuple21 (set (tuple21 a (tuple21 b c))) a)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a (tuple21 b c))) a))) (sort
  (tuple2 (set1 (tuple2 a1 (tuple2 b1 c1))) a1) (t2tb392 x))))

(declare-fun tb2t392 (uni) (tuple21 (set (tuple21 a (tuple21 b c))) a))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a (tuple21 b c))) a)))
  (! (= (tb2t392 (t2tb392 i)) i) :pattern ((t2tb392 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 a1 (tuple2 b1 c1))) a1) j)
     (= (t2tb392 (tb2t392 j)) j)) :pattern ((t2tb392 (tb2t392 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a (tuple21 b c))))) (t (set a))
  (x (set (tuple21 a (tuple21 b c)))) (y a))
  (= (mem (tuple2 (set1 (tuple2 a1 (tuple2 b1 c1))) a1)
  (Tuple2 (set1 (tuple2 a1 (tuple2 b1 c1))) a1 (t2tb261 x) (t2tb2 y))
  (times a1 (set1 (tuple2 a1 (tuple2 b1 c1))) (t2tb327 s) (t2tb1 t)))
  (and (mem15 x s) (mem1 y t)))))

;; mem_times
  (assert
  (forall ((b2 ty))
  (forall ((s (set (set (tuple21 a (tuple21 b c))))) (t uni)
  (x (set (tuple21 a (tuple21 b c)))) (y uni))
  (= (mem (tuple2 (set1 (tuple2 a1 (tuple2 b1 c1))) b2)
  (Tuple2 (set1 (tuple2 a1 (tuple2 b1 c1))) b2 (t2tb261 x) y)
  (times b2 (set1 (tuple2 a1 (tuple2 b1 c1))) (t2tb327 s) t))
  (and (mem15 x s) (mem b2 y t))))))

(declare-fun t2tb393 ((set (tuple21 (tuple21 a (tuple21 b c)) (set (tuple21 a
  (tuple21 b c)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a (tuple21 b c)) (set (tuple21 a
  (tuple21 b c))))))) (sort
  (set1
  (tuple2 (tuple2 a1 (tuple2 b1 c1)) (set1 (tuple2 a1 (tuple2 b1 c1)))))
  (t2tb393 x))))

(declare-fun tb2t393 (uni) (set (tuple21 (tuple21 a (tuple21 b c))
  (set (tuple21 a (tuple21 b c))))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a (tuple21 b c)) (set (tuple21 a
  (tuple21 b c)))))))
  (! (= (tb2t393 (t2tb393 i)) i) :pattern ((t2tb393 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (tuple2 (tuple2 a1 (tuple2 b1 c1)) (set1 (tuple2 a1 (tuple2 b1 c1)))))
     j) (= (t2tb393 (tb2t393 j)) j)) :pattern ((t2tb393 (tb2t393 j))) )))

(declare-fun t2tb394 ((tuple21 (tuple21 a (tuple21 b c)) (set (tuple21 a
  (tuple21 b c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a (tuple21 b c)) (set (tuple21 a (tuple21 b
  c)))))) (sort
  (tuple2 (tuple2 a1 (tuple2 b1 c1)) (set1 (tuple2 a1 (tuple2 b1 c1))))
  (t2tb394 x))))

(declare-fun tb2t394 (uni) (tuple21 (tuple21 a (tuple21 b c)) (set (tuple21 a
  (tuple21 b c)))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a (tuple21 b c)) (set (tuple21 a (tuple21 b
  c)))))) (! (= (tb2t394 (t2tb394 i)) i) :pattern ((t2tb394 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (tuple2 (tuple2 a1 (tuple2 b1 c1)) (set1 (tuple2 a1 (tuple2 b1 c1)))) j)
     (= (t2tb394 (tb2t394 j)) j)) :pattern ((t2tb394 (tb2t394 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a (tuple21 b c)))) (t (set (set (tuple21 a
  (tuple21 b c))))) (x (tuple21 a (tuple21 b c))) (y (set (tuple21 a
  (tuple21 b c)))))
  (= (mem
  (tuple2 (tuple2 a1 (tuple2 b1 c1)) (set1 (tuple2 a1 (tuple2 b1 c1))))
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) (set1 (tuple2 a1 (tuple2 b1 c1)))
  (t2tb260 x) (t2tb261 y))
  (times (set1 (tuple2 a1 (tuple2 b1 c1))) (tuple2 a1 (tuple2 b1 c1))
  (t2tb261 s) (t2tb327 t))) (and (mem14 x s) (mem15 y t)))))

(declare-fun t2tb395 ((set (tuple21 (tuple21 a (tuple21 b c)) (tuple21 a
  (tuple21 b c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a (tuple21 b c)) (tuple21 a (tuple21 b
  c)))))) (sort
  (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 (tuple2 b1 c1))))
  (t2tb395 x))))

(declare-fun tb2t395 (uni) (set (tuple21 (tuple21 a (tuple21 b c)) (tuple21 a
  (tuple21 b c)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a (tuple21 b c)) (tuple21 a (tuple21 b
  c)))))) (! (= (tb2t395 (t2tb395 i)) i) :pattern ((t2tb395 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 (tuple2 b1 c1)))) j)
     (= (t2tb395 (tb2t395 j)) j)) :pattern ((t2tb395 (tb2t395 j))) )))

(declare-fun t2tb396 ((tuple21 (tuple21 a (tuple21 b c)) (tuple21 a
  (tuple21 b c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a (tuple21 b c)) (tuple21 a (tuple21 b c)))))
  (sort (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 (tuple2 b1 c1)))
  (t2tb396 x))))

(declare-fun tb2t396 (uni) (tuple21 (tuple21 a (tuple21 b c)) (tuple21 a
  (tuple21 b c))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a (tuple21 b c)) (tuple21 a (tuple21 b c)))))
  (! (= (tb2t396 (t2tb396 i)) i) :pattern ((t2tb396 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 (tuple2 b1 c1)))
     j) (= (t2tb396 (tb2t396 j)) j)) :pattern ((t2tb396 (tb2t396 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a (tuple21 b c)))) (t (set (tuple21 a (tuple21 b
  c)))) (x (tuple21 a (tuple21 b c))) (y (tuple21 a (tuple21 b c))))
  (= (mem (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 (tuple2 b1 c1)) (t2tb260 x)
  (t2tb260 y))
  (times (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 (tuple2 b1 c1)) (t2tb261 s)
  (t2tb261 t))) (and (mem14 x s) (mem14 y t)))))

(declare-fun t2tb397 ((set (tuple21 (tuple21 a (tuple21 b c)) (set (tuple21 a
  c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a (tuple21 b c)) (set (tuple21 a c))))))
  (sort (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) (set1 (tuple2 a1 c1))))
  (t2tb397 x))))

(declare-fun tb2t397 (uni) (set (tuple21 (tuple21 a (tuple21 b c))
  (set (tuple21 a c)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a (tuple21 b c)) (set (tuple21 a c))))))
  (! (= (tb2t397 (t2tb397 i)) i) :pattern ((t2tb397 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) (set1 (tuple2 a1 c1)))) j)
     (= (t2tb397 (tb2t397 j)) j)) :pattern ((t2tb397 (tb2t397 j))) )))

(declare-fun t2tb398 ((tuple21 (tuple21 a (tuple21 b c)) (set (tuple21 a
  c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a (tuple21 b c)) (set (tuple21 a c))))) (sort
  (tuple2 (tuple2 a1 (tuple2 b1 c1)) (set1 (tuple2 a1 c1))) (t2tb398 x))))

(declare-fun tb2t398 (uni) (tuple21 (tuple21 a (tuple21 b c)) (set (tuple21 a
  c))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a (tuple21 b c)) (set (tuple21 a c)))))
  (! (= (tb2t398 (t2tb398 i)) i) :pattern ((t2tb398 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 (tuple2 b1 c1)) (set1 (tuple2 a1 c1))) j)
     (= (t2tb398 (tb2t398 j)) j)) :pattern ((t2tb398 (tb2t398 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a (tuple21 b c)))) (t (set (set (tuple21 a c))))
  (x (tuple21 a (tuple21 b c))) (y (set (tuple21 a c))))
  (= (mem (tuple2 (tuple2 a1 (tuple2 b1 c1)) (set1 (tuple2 a1 c1)))
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) (set1 (tuple2 a1 c1)) (t2tb260 x)
  (t2tb129 y))
  (times (set1 (tuple2 a1 c1)) (tuple2 a1 (tuple2 b1 c1)) (t2tb261 s)
  (t2tb128 t))) (and (mem14 x s) (mem11 y t)))))

(declare-fun t2tb399 ((set (tuple21 (tuple21 a (tuple21 b c)) (tuple21 a
  c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a (tuple21 b c)) (tuple21 a c))))) (sort
  (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 c1))) (t2tb399 x))))

(declare-fun tb2t399 (uni) (set (tuple21 (tuple21 a (tuple21 b c)) (tuple21 a
  c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a (tuple21 b c)) (tuple21 a c)))))
  (! (= (tb2t399 (t2tb399 i)) i) :pattern ((t2tb399 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 c1))) j)
     (= (t2tb399 (tb2t399 j)) j)) :pattern ((t2tb399 (tb2t399 j))) )))

(declare-fun t2tb400 ((tuple21 (tuple21 a (tuple21 b c)) (tuple21 a c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a (tuple21 b c)) (tuple21 a c)))) (sort
  (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 c1)) (t2tb400 x))))

(declare-fun tb2t400 (uni) (tuple21 (tuple21 a (tuple21 b c)) (tuple21 a c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a (tuple21 b c)) (tuple21 a c))))
  (! (= (tb2t400 (t2tb400 i)) i) :pattern ((t2tb400 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 c1)) j)
     (= (t2tb400 (tb2t400 j)) j)) :pattern ((t2tb400 (tb2t400 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a (tuple21 b c)))) (t (set (tuple21 a c)))
  (x (tuple21 a (tuple21 b c))) (y (tuple21 a c)))
  (= (mem (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 c1))
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 c1) (t2tb260 x) (t2tb133 y))
  (times (tuple2 a1 c1) (tuple2 a1 (tuple2 b1 c1)) (t2tb261 s) (t2tb129 t)))
  (and (mem14 x s) (mem10 y t)))))

(declare-fun t2tb401 ((set (tuple21 (tuple21 a (tuple21 b c)) (tuple21 b
  c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a (tuple21 b c)) (tuple21 b c))))) (sort
  (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 b1 c1))) (t2tb401 x))))

(declare-fun tb2t401 (uni) (set (tuple21 (tuple21 a (tuple21 b c)) (tuple21 b
  c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a (tuple21 b c)) (tuple21 b c)))))
  (! (= (tb2t401 (t2tb401 i)) i) :pattern ((t2tb401 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 b1 c1))) j)
     (= (t2tb401 (tb2t401 j)) j)) :pattern ((t2tb401 (tb2t401 j))) )))

(declare-fun t2tb402 ((tuple21 (tuple21 a (tuple21 b c)) (tuple21 b c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a (tuple21 b c)) (tuple21 b c)))) (sort
  (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 b1 c1)) (t2tb402 x))))

(declare-fun tb2t402 (uni) (tuple21 (tuple21 a (tuple21 b c)) (tuple21 b c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a (tuple21 b c)) (tuple21 b c))))
  (! (= (tb2t402 (t2tb402 i)) i) :pattern ((t2tb402 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 b1 c1)) j)
     (= (t2tb402 (tb2t402 j)) j)) :pattern ((t2tb402 (tb2t402 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a (tuple21 b c)))) (t (set (tuple21 b c)))
  (x (tuple21 a (tuple21 b c))) (y (tuple21 b c)))
  (= (mem (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 b1 c1))
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 b1 c1) (t2tb260 x) (t2tb134 y))
  (times (tuple2 b1 c1) (tuple2 a1 (tuple2 b1 c1)) (t2tb261 s) (t2tb131 t)))
  (and (mem14 x s) (mem8 y t)))))

(declare-fun t2tb403 ((set (tuple21 (tuple21 a (tuple21 b c)) c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a (tuple21 b c)) c)))) (sort
  (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) c1)) (t2tb403 x))))

(declare-fun tb2t403 (uni) (set (tuple21 (tuple21 a (tuple21 b c)) c)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a (tuple21 b c)) c))))
  (! (= (tb2t403 (t2tb403 i)) i) :pattern ((t2tb403 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) c1)) j)
     (= (t2tb403 (tb2t403 j)) j)) :pattern ((t2tb403 (tb2t403 j))) )))

(declare-fun t2tb404 ((tuple21 (tuple21 a (tuple21 b c)) c)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a (tuple21 b c)) c))) (sort
  (tuple2 (tuple2 a1 (tuple2 b1 c1)) c1) (t2tb404 x))))

(declare-fun tb2t404 (uni) (tuple21 (tuple21 a (tuple21 b c)) c))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a (tuple21 b c)) c)))
  (! (= (tb2t404 (t2tb404 i)) i) :pattern ((t2tb404 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 (tuple2 b1 c1)) c1) j)
     (= (t2tb404 (tb2t404 j)) j)) :pattern ((t2tb404 (tb2t404 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a (tuple21 b c)))) (t (set c)) (x (tuple21 a
  (tuple21 b c))) (y c))
  (= (mem (tuple2 (tuple2 a1 (tuple2 b1 c1)) c1)
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) c1 (t2tb260 x) (t2tb135 y))
  (times c1 (tuple2 a1 (tuple2 b1 c1)) (t2tb261 s) (t2tb132 t)))
  (and (mem14 x s) (mem7 y t)))))

(declare-fun t2tb405 ((set (tuple21 (tuple21 a (tuple21 b c)) (set (tuple21 a
  b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a (tuple21 b c)) (set (tuple21 a b))))))
  (sort (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) (set1 (tuple2 a1 b1))))
  (t2tb405 x))))

(declare-fun tb2t405 (uni) (set (tuple21 (tuple21 a (tuple21 b c))
  (set (tuple21 a b)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a (tuple21 b c)) (set (tuple21 a b))))))
  (! (= (tb2t405 (t2tb405 i)) i) :pattern ((t2tb405 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) (set1 (tuple2 a1 b1)))) j)
     (= (t2tb405 (tb2t405 j)) j)) :pattern ((t2tb405 (tb2t405 j))) )))

(declare-fun t2tb406 ((tuple21 (tuple21 a (tuple21 b c)) (set (tuple21 a
  b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a (tuple21 b c)) (set (tuple21 a b))))) (sort
  (tuple2 (tuple2 a1 (tuple2 b1 c1)) (set1 (tuple2 a1 b1))) (t2tb406 x))))

(declare-fun tb2t406 (uni) (tuple21 (tuple21 a (tuple21 b c)) (set (tuple21 a
  b))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a (tuple21 b c)) (set (tuple21 a b)))))
  (! (= (tb2t406 (t2tb406 i)) i) :pattern ((t2tb406 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 (tuple2 b1 c1)) (set1 (tuple2 a1 b1))) j)
     (= (t2tb406 (tb2t406 j)) j)) :pattern ((t2tb406 (tb2t406 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a (tuple21 b c)))) (t (set (set (tuple21 a b))))
  (x (tuple21 a (tuple21 b c))) (y (set (tuple21 a b))))
  (= (mem (tuple2 (tuple2 a1 (tuple2 b1 c1)) (set1 (tuple2 a1 b1)))
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) (set1 (tuple2 a1 b1)) (t2tb260 x)
  (t2tb11 y))
  (times (set1 (tuple2 a1 b1)) (tuple2 a1 (tuple2 b1 c1)) (t2tb261 s)
  (t2tb10 t))) (and (mem14 x s) (mem4 y t)))))

(declare-fun t2tb407 ((set (tuple21 (tuple21 a (tuple21 b c)) (tuple21 a
  b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a (tuple21 b c)) (tuple21 a b))))) (sort
  (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 b1))) (t2tb407 x))))

(declare-fun tb2t407 (uni) (set (tuple21 (tuple21 a (tuple21 b c)) (tuple21 a
  b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a (tuple21 b c)) (tuple21 a b)))))
  (! (= (tb2t407 (t2tb407 i)) i) :pattern ((t2tb407 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 b1))) j)
     (= (t2tb407 (tb2t407 j)) j)) :pattern ((t2tb407 (tb2t407 j))) )))

(declare-fun t2tb408 ((tuple21 (tuple21 a (tuple21 b c)) (tuple21 a b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a (tuple21 b c)) (tuple21 a b)))) (sort
  (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 b1)) (t2tb408 x))))

(declare-fun tb2t408 (uni) (tuple21 (tuple21 a (tuple21 b c)) (tuple21 a b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a (tuple21 b c)) (tuple21 a b))))
  (! (= (tb2t408 (t2tb408 i)) i) :pattern ((t2tb408 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 b1)) j)
     (= (t2tb408 (tb2t408 j)) j)) :pattern ((t2tb408 (tb2t408 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a (tuple21 b c)))) (t (set (tuple21 a b)))
  (x (tuple21 a (tuple21 b c))) (y (tuple21 a b)))
  (= (mem (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 b1))
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 b1) (t2tb260 x) (t2tb13 y))
  (times (tuple2 a1 b1) (tuple2 a1 (tuple2 b1 c1)) (t2tb261 s) (t2tb11 t)))
  (and (mem14 x s) (mem3 y t)))))

(declare-fun t2tb409 ((set (tuple21 (tuple21 a (tuple21 b c)) b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a (tuple21 b c)) b)))) (sort
  (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) b1)) (t2tb409 x))))

(declare-fun tb2t409 (uni) (set (tuple21 (tuple21 a (tuple21 b c)) b)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a (tuple21 b c)) b))))
  (! (= (tb2t409 (t2tb409 i)) i) :pattern ((t2tb409 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) b1)) j)
     (= (t2tb409 (tb2t409 j)) j)) :pattern ((t2tb409 (tb2t409 j))) )))

(declare-fun t2tb410 ((tuple21 (tuple21 a (tuple21 b c)) b)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a (tuple21 b c)) b))) (sort
  (tuple2 (tuple2 a1 (tuple2 b1 c1)) b1) (t2tb410 x))))

(declare-fun tb2t410 (uni) (tuple21 (tuple21 a (tuple21 b c)) b))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a (tuple21 b c)) b)))
  (! (= (tb2t410 (t2tb410 i)) i) :pattern ((t2tb410 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 (tuple2 b1 c1)) b1) j)
     (= (t2tb410 (tb2t410 j)) j)) :pattern ((t2tb410 (tb2t410 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a (tuple21 b c)))) (t (set b)) (x (tuple21 a
  (tuple21 b c))) (y b))
  (= (mem (tuple2 (tuple2 a1 (tuple2 b1 c1)) b1)
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) b1 (t2tb260 x) (t2tb14 y))
  (times b1 (tuple2 a1 (tuple2 b1 c1)) (t2tb261 s) (t2tb12 t)))
  (and (mem14 x s) (mem2 y t)))))

(declare-fun t2tb411 ((set (tuple21 (tuple21 a (tuple21 b c)) a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a (tuple21 b c)) a)))) (sort
  (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) a1)) (t2tb411 x))))

(declare-fun tb2t411 (uni) (set (tuple21 (tuple21 a (tuple21 b c)) a)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a (tuple21 b c)) a))))
  (! (= (tb2t411 (t2tb411 i)) i) :pattern ((t2tb411 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) a1)) j)
     (= (t2tb411 (tb2t411 j)) j)) :pattern ((t2tb411 (tb2t411 j))) )))

(declare-fun t2tb412 ((tuple21 (tuple21 a (tuple21 b c)) a)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a (tuple21 b c)) a))) (sort
  (tuple2 (tuple2 a1 (tuple2 b1 c1)) a1) (t2tb412 x))))

(declare-fun tb2t412 (uni) (tuple21 (tuple21 a (tuple21 b c)) a))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a (tuple21 b c)) a)))
  (! (= (tb2t412 (t2tb412 i)) i) :pattern ((t2tb412 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 (tuple2 b1 c1)) a1) j)
     (= (t2tb412 (tb2t412 j)) j)) :pattern ((t2tb412 (tb2t412 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a (tuple21 b c)))) (t (set a)) (x (tuple21 a
  (tuple21 b c))) (y a))
  (= (mem (tuple2 (tuple2 a1 (tuple2 b1 c1)) a1)
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) a1 (t2tb260 x) (t2tb2 y))
  (times a1 (tuple2 a1 (tuple2 b1 c1)) (t2tb261 s) (t2tb1 t)))
  (and (mem14 x s) (mem1 y t)))))

;; mem_times
  (assert
  (forall ((b2 ty))
  (forall ((s (set (tuple21 a (tuple21 b c)))) (t uni) (x (tuple21 a
  (tuple21 b c))) (y uni))
  (= (mem (tuple2 (tuple2 a1 (tuple2 b1 c1)) b2)
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) b2 (t2tb260 x) y)
  (times b2 (tuple2 a1 (tuple2 b1 c1)) (t2tb261 s) t))
  (and (mem14 x s) (mem b2 y t))))))

(declare-fun t2tb413 ((set (tuple21 (set (tuple21 a c)) (set (tuple21 a
  (tuple21 b c)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a c)) (set (tuple21 a (tuple21 b
  c))))))) (sort
  (set1 (tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 a1 (tuple2 b1 c1)))))
  (t2tb413 x))))

(declare-fun tb2t413 (uni) (set (tuple21 (set (tuple21 a c)) (set (tuple21 a
  (tuple21 b c))))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a c)) (set (tuple21 a (tuple21 b
  c))))))) (! (= (tb2t413 (t2tb413 i)) i) :pattern ((t2tb413 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 a1 (tuple2 b1 c1)))))
     j) (= (t2tb413 (tb2t413 j)) j)) :pattern ((t2tb413 (tb2t413 j))) )))

(declare-fun t2tb414 ((tuple21 (set (tuple21 a c)) (set (tuple21 a (tuple21 b
  c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a c)) (set (tuple21 a (tuple21 b c))))))
  (sort (tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 a1 (tuple2 b1 c1))))
  (t2tb414 x))))

(declare-fun tb2t414 (uni) (tuple21 (set (tuple21 a c)) (set (tuple21 a
  (tuple21 b c)))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a c)) (set (tuple21 a (tuple21 b c))))))
  (! (= (tb2t414 (t2tb414 i)) i) :pattern ((t2tb414 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 a1 (tuple2 b1 c1)))) j)
     (= (t2tb414 (tb2t414 j)) j)) :pattern ((t2tb414 (tb2t414 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a c)))) (t (set (set (tuple21 a (tuple21 b
  c))))) (x (set (tuple21 a c))) (y (set (tuple21 a (tuple21 b c)))))
  (= (mem (tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 a1 (tuple2 b1 c1))))
  (Tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 a1 (tuple2 b1 c1))) (t2tb129 x)
  (t2tb261 y))
  (times (set1 (tuple2 a1 (tuple2 b1 c1))) (set1 (tuple2 a1 c1)) (t2tb128 s)
  (t2tb327 t))) (and (mem11 x s) (mem15 y t)))))

(declare-fun t2tb415 ((set (tuple21 (set (tuple21 a c)) (tuple21 a (tuple21 b
  c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a c)) (tuple21 a (tuple21 b c))))))
  (sort (set1 (tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 (tuple2 b1 c1))))
  (t2tb415 x))))

(declare-fun tb2t415 (uni) (set (tuple21 (set (tuple21 a c)) (tuple21 a
  (tuple21 b c)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a c)) (tuple21 a (tuple21 b c))))))
  (! (= (tb2t415 (t2tb415 i)) i) :pattern ((t2tb415 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 (tuple2 b1 c1)))) j)
     (= (t2tb415 (tb2t415 j)) j)) :pattern ((t2tb415 (tb2t415 j))) )))

(declare-fun t2tb416 ((tuple21 (set (tuple21 a c)) (tuple21 a (tuple21 b
  c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a c)) (tuple21 a (tuple21 b c))))) (sort
  (tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 (tuple2 b1 c1))) (t2tb416 x))))

(declare-fun tb2t416 (uni) (tuple21 (set (tuple21 a c)) (tuple21 a (tuple21 b
  c))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a c)) (tuple21 a (tuple21 b c)))))
  (! (= (tb2t416 (t2tb416 i)) i) :pattern ((t2tb416 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 (tuple2 b1 c1))) j)
     (= (t2tb416 (tb2t416 j)) j)) :pattern ((t2tb416 (tb2t416 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a c)))) (t (set (tuple21 a (tuple21 b c))))
  (x (set (tuple21 a c))) (y (tuple21 a (tuple21 b c))))
  (= (mem (tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 (tuple2 b1 c1)) (t2tb129 x)
  (t2tb260 y))
  (times (tuple2 a1 (tuple2 b1 c1)) (set1 (tuple2 a1 c1)) (t2tb128 s)
  (t2tb261 t))) (and (mem11 x s) (mem14 y t)))))

(declare-fun t2tb136 ((set (tuple21 (set (tuple21 a c)) (set (tuple21 a
  c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a c)) (set (tuple21 a c)))))) (sort
  (set1 (tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 a1 c1)))) (t2tb136 x))))

(declare-fun tb2t136 (uni) (set (tuple21 (set (tuple21 a c)) (set (tuple21 a
  c)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a c)) (set (tuple21 a c))))))
  (! (= (tb2t136 (t2tb136 i)) i) :pattern ((t2tb136 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 a1 c1)))) j)
     (= (t2tb136 (tb2t136 j)) j)) :pattern ((t2tb136 (tb2t136 j))) )))

(declare-fun t2tb137 ((tuple21 (set (tuple21 a c)) (set (tuple21 a c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a c)) (set (tuple21 a c))))) (sort
  (tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 a1 c1))) (t2tb137 x))))

(declare-fun tb2t137 (uni) (tuple21 (set (tuple21 a c)) (set (tuple21 a c))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a c)) (set (tuple21 a c)))))
  (! (= (tb2t137 (t2tb137 i)) i) :pattern ((t2tb137 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 a1 c1))) j)
     (= (t2tb137 (tb2t137 j)) j)) :pattern ((t2tb137 (tb2t137 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a c)))) (t (set (set (tuple21 a c))))
  (x (set (tuple21 a c))) (y (set (tuple21 a c))))
  (= (mem (tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 a1 c1)))
  (Tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 a1 c1)) (t2tb129 x)
  (t2tb129 y))
  (times (set1 (tuple2 a1 c1)) (set1 (tuple2 a1 c1)) (t2tb128 s) (t2tb128 t)))
  (and (mem11 x s) (mem11 y t)))))

(declare-fun t2tb138 ((set (tuple21 (set (tuple21 a c)) (tuple21 a c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a c)) (tuple21 a c))))) (sort
  (set1 (tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 c1))) (t2tb138 x))))

(declare-fun tb2t138 (uni) (set (tuple21 (set (tuple21 a c)) (tuple21 a c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a c)) (tuple21 a c)))))
  (! (= (tb2t138 (t2tb138 i)) i) :pattern ((t2tb138 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 c1))) j)
     (= (t2tb138 (tb2t138 j)) j)) :pattern ((t2tb138 (tb2t138 j))) )))

(declare-fun t2tb139 ((tuple21 (set (tuple21 a c)) (tuple21 a c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a c)) (tuple21 a c)))) (sort
  (tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 c1)) (t2tb139 x))))

(declare-fun tb2t139 (uni) (tuple21 (set (tuple21 a c)) (tuple21 a c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a c)) (tuple21 a c))))
  (! (= (tb2t139 (t2tb139 i)) i) :pattern ((t2tb139 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 c1)) j)
     (= (t2tb139 (tb2t139 j)) j)) :pattern ((t2tb139 (tb2t139 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a c)))) (t (set (tuple21 a c)))
  (x (set (tuple21 a c))) (y (tuple21 a c)))
  (= (mem (tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 c1))
  (Tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 c1) (t2tb129 x) (t2tb133 y))
  (times (tuple2 a1 c1) (set1 (tuple2 a1 c1)) (t2tb128 s) (t2tb129 t)))
  (and (mem11 x s) (mem10 y t)))))

(declare-fun t2tb142 ((tuple21 (set (tuple21 a c)) (tuple21 b c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a c)) (tuple21 b c)))) (sort
  (tuple2 (set1 (tuple2 a1 c1)) (tuple2 b1 c1)) (t2tb142 x))))

(declare-fun tb2t142 (uni) (tuple21 (set (tuple21 a c)) (tuple21 b c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a c)) (tuple21 b c))))
  (! (= (tb2t142 (t2tb142 i)) i) :pattern ((t2tb142 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 a1 c1)) (tuple2 b1 c1)) j)
     (= (t2tb142 (tb2t142 j)) j)) :pattern ((t2tb142 (tb2t142 j))) )))

(declare-fun t2tb143 ((set (tuple21 (set (tuple21 a c)) (tuple21 b c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a c)) (tuple21 b c))))) (sort
  (set1 (tuple2 (set1 (tuple2 a1 c1)) (tuple2 b1 c1))) (t2tb143 x))))

(declare-fun tb2t143 (uni) (set (tuple21 (set (tuple21 a c)) (tuple21 b c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a c)) (tuple21 b c)))))
  (! (= (tb2t143 (t2tb143 i)) i) :pattern ((t2tb143 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 a1 c1)) (tuple2 b1 c1))) j)
     (= (t2tb143 (tb2t143 j)) j)) :pattern ((t2tb143 (tb2t143 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a c)))) (t (set (tuple21 b c)))
  (x (set (tuple21 a c))) (y (tuple21 b c)))
  (= (mem (tuple2 (set1 (tuple2 a1 c1)) (tuple2 b1 c1))
  (Tuple2 (set1 (tuple2 a1 c1)) (tuple2 b1 c1) (t2tb129 x) (t2tb134 y))
  (times (tuple2 b1 c1) (set1 (tuple2 a1 c1)) (t2tb128 s) (t2tb131 t)))
  (and (mem11 x s) (mem8 y t)))))

(declare-fun t2tb144 ((set (tuple21 (set (tuple21 a c)) c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a c)) c)))) (sort
  (set1 (tuple2 (set1 (tuple2 a1 c1)) c1)) (t2tb144 x))))

(declare-fun tb2t144 (uni) (set (tuple21 (set (tuple21 a c)) c)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a c)) c))))
  (! (= (tb2t144 (t2tb144 i)) i) :pattern ((t2tb144 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 a1 c1)) c1)) j)
     (= (t2tb144 (tb2t144 j)) j)) :pattern ((t2tb144 (tb2t144 j))) )))

(declare-fun t2tb145 ((tuple21 (set (tuple21 a c)) c)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a c)) c))) (sort
  (tuple2 (set1 (tuple2 a1 c1)) c1) (t2tb145 x))))

(declare-fun tb2t145 (uni) (tuple21 (set (tuple21 a c)) c))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a c)) c)))
  (! (= (tb2t145 (t2tb145 i)) i) :pattern ((t2tb145 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 a1 c1)) c1) j)
     (= (t2tb145 (tb2t145 j)) j)) :pattern ((t2tb145 (tb2t145 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a c)))) (t (set c)) (x (set (tuple21 a c)))
  (y c))
  (= (mem (tuple2 (set1 (tuple2 a1 c1)) c1)
  (Tuple2 (set1 (tuple2 a1 c1)) c1 (t2tb129 x) (t2tb135 y))
  (times c1 (set1 (tuple2 a1 c1)) (t2tb128 s) (t2tb132 t)))
  (and (mem11 x s) (mem7 y t)))))

(declare-fun t2tb146 ((set (tuple21 (set (tuple21 a c)) (set (tuple21 a
  b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a c)) (set (tuple21 a b)))))) (sort
  (set1 (tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 a1 b1)))) (t2tb146 x))))

(declare-fun tb2t146 (uni) (set (tuple21 (set (tuple21 a c)) (set (tuple21 a
  b)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a c)) (set (tuple21 a b))))))
  (! (= (tb2t146 (t2tb146 i)) i) :pattern ((t2tb146 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 a1 b1)))) j)
     (= (t2tb146 (tb2t146 j)) j)) :pattern ((t2tb146 (tb2t146 j))) )))

(declare-fun t2tb147 ((tuple21 (set (tuple21 a c)) (set (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a c)) (set (tuple21 a b))))) (sort
  (tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 a1 b1))) (t2tb147 x))))

(declare-fun tb2t147 (uni) (tuple21 (set (tuple21 a c)) (set (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a c)) (set (tuple21 a b)))))
  (! (= (tb2t147 (t2tb147 i)) i) :pattern ((t2tb147 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 a1 b1))) j)
     (= (t2tb147 (tb2t147 j)) j)) :pattern ((t2tb147 (tb2t147 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a c)))) (t (set (set (tuple21 a b))))
  (x (set (tuple21 a c))) (y (set (tuple21 a b))))
  (= (mem (tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 a1 b1)))
  (Tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 a1 b1)) (t2tb129 x) (t2tb11 y))
  (times (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 c1)) (t2tb128 s) (t2tb10 t)))
  (and (mem11 x s) (mem4 y t)))))

(declare-fun t2tb148 ((set (tuple21 (set (tuple21 a c)) (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a c)) (tuple21 a b))))) (sort
  (set1 (tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 b1))) (t2tb148 x))))

(declare-fun tb2t148 (uni) (set (tuple21 (set (tuple21 a c)) (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a c)) (tuple21 a b)))))
  (! (= (tb2t148 (t2tb148 i)) i) :pattern ((t2tb148 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 b1))) j)
     (= (t2tb148 (tb2t148 j)) j)) :pattern ((t2tb148 (tb2t148 j))) )))

(declare-fun t2tb149 ((tuple21 (set (tuple21 a c)) (tuple21 a b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a c)) (tuple21 a b)))) (sort
  (tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 b1)) (t2tb149 x))))

(declare-fun tb2t149 (uni) (tuple21 (set (tuple21 a c)) (tuple21 a b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a c)) (tuple21 a b))))
  (! (= (tb2t149 (t2tb149 i)) i) :pattern ((t2tb149 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 b1)) j)
     (= (t2tb149 (tb2t149 j)) j)) :pattern ((t2tb149 (tb2t149 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a c)))) (t (set (tuple21 a b)))
  (x (set (tuple21 a c))) (y (tuple21 a b)))
  (= (mem (tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 b1))
  (Tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 b1) (t2tb129 x) (t2tb13 y))
  (times (tuple2 a1 b1) (set1 (tuple2 a1 c1)) (t2tb128 s) (t2tb11 t)))
  (and (mem11 x s) (mem3 y t)))))

(declare-fun t2tb150 ((set (tuple21 (set (tuple21 a c)) b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a c)) b)))) (sort
  (set1 (tuple2 (set1 (tuple2 a1 c1)) b1)) (t2tb150 x))))

(declare-fun tb2t150 (uni) (set (tuple21 (set (tuple21 a c)) b)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a c)) b))))
  (! (= (tb2t150 (t2tb150 i)) i) :pattern ((t2tb150 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 a1 c1)) b1)) j)
     (= (t2tb150 (tb2t150 j)) j)) :pattern ((t2tb150 (tb2t150 j))) )))

(declare-fun t2tb151 ((tuple21 (set (tuple21 a c)) b)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a c)) b))) (sort
  (tuple2 (set1 (tuple2 a1 c1)) b1) (t2tb151 x))))

(declare-fun tb2t151 (uni) (tuple21 (set (tuple21 a c)) b))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a c)) b)))
  (! (= (tb2t151 (t2tb151 i)) i) :pattern ((t2tb151 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 a1 c1)) b1) j)
     (= (t2tb151 (tb2t151 j)) j)) :pattern ((t2tb151 (tb2t151 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a c)))) (t (set b)) (x (set (tuple21 a c)))
  (y b))
  (= (mem (tuple2 (set1 (tuple2 a1 c1)) b1)
  (Tuple2 (set1 (tuple2 a1 c1)) b1 (t2tb129 x) (t2tb14 y))
  (times b1 (set1 (tuple2 a1 c1)) (t2tb128 s) (t2tb12 t)))
  (and (mem11 x s) (mem2 y t)))))

(declare-fun t2tb152 ((set (tuple21 (set (tuple21 a c)) a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a c)) a)))) (sort
  (set1 (tuple2 (set1 (tuple2 a1 c1)) a1)) (t2tb152 x))))

(declare-fun tb2t152 (uni) (set (tuple21 (set (tuple21 a c)) a)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a c)) a))))
  (! (= (tb2t152 (t2tb152 i)) i) :pattern ((t2tb152 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 a1 c1)) a1)) j)
     (= (t2tb152 (tb2t152 j)) j)) :pattern ((t2tb152 (tb2t152 j))) )))

(declare-fun t2tb153 ((tuple21 (set (tuple21 a c)) a)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a c)) a))) (sort
  (tuple2 (set1 (tuple2 a1 c1)) a1) (t2tb153 x))))

(declare-fun tb2t153 (uni) (tuple21 (set (tuple21 a c)) a))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a c)) a)))
  (! (= (tb2t153 (t2tb153 i)) i) :pattern ((t2tb153 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 a1 c1)) a1) j)
     (= (t2tb153 (tb2t153 j)) j)) :pattern ((t2tb153 (tb2t153 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a c)))) (t (set a)) (x (set (tuple21 a c)))
  (y a))
  (= (mem (tuple2 (set1 (tuple2 a1 c1)) a1)
  (Tuple2 (set1 (tuple2 a1 c1)) a1 (t2tb129 x) (t2tb2 y))
  (times a1 (set1 (tuple2 a1 c1)) (t2tb128 s) (t2tb1 t)))
  (and (mem11 x s) (mem1 y t)))))

;; mem_times
  (assert
  (forall ((b2 ty))
  (forall ((s (set (set (tuple21 a c)))) (t uni) (x (set (tuple21 a c)))
  (y uni))
  (= (mem (tuple2 (set1 (tuple2 a1 c1)) b2)
  (Tuple2 (set1 (tuple2 a1 c1)) b2 (t2tb129 x) y)
  (times b2 (set1 (tuple2 a1 c1)) (t2tb128 s) t))
  (and (mem11 x s) (mem b2 y t))))))

(declare-fun t2tb417 ((set (tuple21 (tuple21 a c) (set (tuple21 a (tuple21 b
  c)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a c) (set (tuple21 a (tuple21 b c)))))))
  (sort (set1 (tuple2 (tuple2 a1 c1) (set1 (tuple2 a1 (tuple2 b1 c1)))))
  (t2tb417 x))))

(declare-fun tb2t417 (uni) (set (tuple21 (tuple21 a c) (set (tuple21 a
  (tuple21 b c))))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a c) (set (tuple21 a (tuple21 b c)))))))
  (! (= (tb2t417 (t2tb417 i)) i) :pattern ((t2tb417 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 a1 c1) (set1 (tuple2 a1 (tuple2 b1 c1))))) j)
     (= (t2tb417 (tb2t417 j)) j)) :pattern ((t2tb417 (tb2t417 j))) )))

(declare-fun t2tb418 ((tuple21 (tuple21 a c) (set (tuple21 a (tuple21 b
  c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a c) (set (tuple21 a (tuple21 b c)))))) (sort
  (tuple2 (tuple2 a1 c1) (set1 (tuple2 a1 (tuple2 b1 c1)))) (t2tb418 x))))

(declare-fun tb2t418 (uni) (tuple21 (tuple21 a c) (set (tuple21 a (tuple21 b
  c)))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a c) (set (tuple21 a (tuple21 b c))))))
  (! (= (tb2t418 (t2tb418 i)) i) :pattern ((t2tb418 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 c1) (set1 (tuple2 a1 (tuple2 b1 c1)))) j)
     (= (t2tb418 (tb2t418 j)) j)) :pattern ((t2tb418 (tb2t418 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a c))) (t (set (set (tuple21 a (tuple21 b c)))))
  (x (tuple21 a c)) (y (set (tuple21 a (tuple21 b c)))))
  (= (mem (tuple2 (tuple2 a1 c1) (set1 (tuple2 a1 (tuple2 b1 c1))))
  (Tuple2 (tuple2 a1 c1) (set1 (tuple2 a1 (tuple2 b1 c1))) (t2tb133 x)
  (t2tb261 y))
  (times (set1 (tuple2 a1 (tuple2 b1 c1))) (tuple2 a1 c1) (t2tb129 s)
  (t2tb327 t))) (and (mem10 x s) (mem15 y t)))))

(declare-fun t2tb419 ((set (tuple21 (tuple21 a c) (tuple21 a (tuple21 b
  c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a c) (tuple21 a (tuple21 b c)))))) (sort
  (set1 (tuple2 (tuple2 a1 c1) (tuple2 a1 (tuple2 b1 c1)))) (t2tb419 x))))

(declare-fun tb2t419 (uni) (set (tuple21 (tuple21 a c) (tuple21 a (tuple21 b
  c)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a c) (tuple21 a (tuple21 b c))))))
  (! (= (tb2t419 (t2tb419 i)) i) :pattern ((t2tb419 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 c1) (tuple2 a1 (tuple2 b1 c1)))) j)
     (= (t2tb419 (tb2t419 j)) j)) :pattern ((t2tb419 (tb2t419 j))) )))

(declare-fun t2tb420 ((tuple21 (tuple21 a c) (tuple21 a (tuple21 b c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a c) (tuple21 a (tuple21 b c))))) (sort
  (tuple2 (tuple2 a1 c1) (tuple2 a1 (tuple2 b1 c1))) (t2tb420 x))))

(declare-fun tb2t420 (uni) (tuple21 (tuple21 a c) (tuple21 a (tuple21 b c))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a c) (tuple21 a (tuple21 b c)))))
  (! (= (tb2t420 (t2tb420 i)) i) :pattern ((t2tb420 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 c1) (tuple2 a1 (tuple2 b1 c1))) j)
     (= (t2tb420 (tb2t420 j)) j)) :pattern ((t2tb420 (tb2t420 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a c))) (t (set (tuple21 a (tuple21 b c))))
  (x (tuple21 a c)) (y (tuple21 a (tuple21 b c))))
  (= (mem (tuple2 (tuple2 a1 c1) (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 (tuple2 a1 c1) (tuple2 a1 (tuple2 b1 c1)) (t2tb133 x) (t2tb260 y))
  (times (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 c1) (t2tb129 s) (t2tb261 t)))
  (and (mem10 x s) (mem14 y t)))))

(declare-fun t2tb154 ((set (tuple21 (tuple21 a c) (set (tuple21 a c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a c) (set (tuple21 a c)))))) (sort
  (set1 (tuple2 (tuple2 a1 c1) (set1 (tuple2 a1 c1)))) (t2tb154 x))))

(declare-fun tb2t154 (uni) (set (tuple21 (tuple21 a c) (set (tuple21 a c)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a c) (set (tuple21 a c))))))
  (! (= (tb2t154 (t2tb154 i)) i) :pattern ((t2tb154 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 c1) (set1 (tuple2 a1 c1)))) j)
     (= (t2tb154 (tb2t154 j)) j)) :pattern ((t2tb154 (tb2t154 j))) )))

(declare-fun t2tb155 ((tuple21 (tuple21 a c) (set (tuple21 a c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a c) (set (tuple21 a c))))) (sort
  (tuple2 (tuple2 a1 c1) (set1 (tuple2 a1 c1))) (t2tb155 x))))

(declare-fun tb2t155 (uni) (tuple21 (tuple21 a c) (set (tuple21 a c))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a c) (set (tuple21 a c)))))
  (! (= (tb2t155 (t2tb155 i)) i) :pattern ((t2tb155 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 c1) (set1 (tuple2 a1 c1))) j)
     (= (t2tb155 (tb2t155 j)) j)) :pattern ((t2tb155 (tb2t155 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a c))) (t (set (set (tuple21 a c))))
  (x (tuple21 a c)) (y (set (tuple21 a c))))
  (= (mem (tuple2 (tuple2 a1 c1) (set1 (tuple2 a1 c1)))
  (Tuple2 (tuple2 a1 c1) (set1 (tuple2 a1 c1)) (t2tb133 x) (t2tb129 y))
  (times (set1 (tuple2 a1 c1)) (tuple2 a1 c1) (t2tb129 s) (t2tb128 t)))
  (and (mem10 x s) (mem11 y t)))))

(declare-fun t2tb156 ((tuple21 (tuple21 a c) (tuple21 a c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a c) (tuple21 a c)))) (sort
  (tuple2 (tuple2 a1 c1) (tuple2 a1 c1)) (t2tb156 x))))

(declare-fun tb2t156 (uni) (tuple21 (tuple21 a c) (tuple21 a c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a c) (tuple21 a c))))
  (! (= (tb2t156 (t2tb156 i)) i) :pattern ((t2tb156 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 c1) (tuple2 a1 c1)) j)
     (= (t2tb156 (tb2t156 j)) j)) :pattern ((t2tb156 (tb2t156 j))) )))

(declare-fun t2tb157 ((set (tuple21 (tuple21 a c) (tuple21 a c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a c) (tuple21 a c))))) (sort
  (set1 (tuple2 (tuple2 a1 c1) (tuple2 a1 c1))) (t2tb157 x))))

(declare-fun tb2t157 (uni) (set (tuple21 (tuple21 a c) (tuple21 a c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a c) (tuple21 a c)))))
  (! (= (tb2t157 (t2tb157 i)) i) :pattern ((t2tb157 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 c1) (tuple2 a1 c1))) j)
     (= (t2tb157 (tb2t157 j)) j)) :pattern ((t2tb157 (tb2t157 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a c))) (t (set (tuple21 a c))) (x (tuple21 a c))
  (y (tuple21 a c)))
  (= (mem (tuple2 (tuple2 a1 c1) (tuple2 a1 c1))
  (Tuple2 (tuple2 a1 c1) (tuple2 a1 c1) (t2tb133 x) (t2tb133 y))
  (times (tuple2 a1 c1) (tuple2 a1 c1) (t2tb129 s) (t2tb129 t)))
  (and (mem10 x s) (mem10 y t)))))

(declare-fun t2tb160 ((set (tuple21 (tuple21 a c) (tuple21 b c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a c) (tuple21 b c))))) (sort
  (set1 (tuple2 (tuple2 a1 c1) (tuple2 b1 c1))) (t2tb160 x))))

(declare-fun tb2t160 (uni) (set (tuple21 (tuple21 a c) (tuple21 b c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a c) (tuple21 b c)))))
  (! (= (tb2t160 (t2tb160 i)) i) :pattern ((t2tb160 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 c1) (tuple2 b1 c1))) j)
     (= (t2tb160 (tb2t160 j)) j)) :pattern ((t2tb160 (tb2t160 j))) )))

(declare-fun t2tb161 ((tuple21 (tuple21 a c) (tuple21 b c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a c) (tuple21 b c)))) (sort
  (tuple2 (tuple2 a1 c1) (tuple2 b1 c1)) (t2tb161 x))))

(declare-fun tb2t161 (uni) (tuple21 (tuple21 a c) (tuple21 b c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a c) (tuple21 b c))))
  (! (= (tb2t161 (t2tb161 i)) i) :pattern ((t2tb161 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 c1) (tuple2 b1 c1)) j)
     (= (t2tb161 (tb2t161 j)) j)) :pattern ((t2tb161 (tb2t161 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a c))) (t (set (tuple21 b c))) (x (tuple21 a c))
  (y (tuple21 b c)))
  (= (mem (tuple2 (tuple2 a1 c1) (tuple2 b1 c1))
  (Tuple2 (tuple2 a1 c1) (tuple2 b1 c1) (t2tb133 x) (t2tb134 y))
  (times (tuple2 b1 c1) (tuple2 a1 c1) (t2tb129 s) (t2tb131 t)))
  (and (mem10 x s) (mem8 y t)))))

(declare-fun t2tb162 ((set (tuple21 (tuple21 a c) c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a c) c)))) (sort
  (set1 (tuple2 (tuple2 a1 c1) c1)) (t2tb162 x))))

(declare-fun tb2t162 (uni) (set (tuple21 (tuple21 a c) c)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a c) c))))
  (! (= (tb2t162 (t2tb162 i)) i) :pattern ((t2tb162 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 c1) c1)) j)
     (= (t2tb162 (tb2t162 j)) j)) :pattern ((t2tb162 (tb2t162 j))) )))

(declare-fun t2tb163 ((tuple21 (tuple21 a c) c)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a c) c))) (sort (tuple2 (tuple2 a1 c1) c1)
  (t2tb163 x))))

(declare-fun tb2t163 (uni) (tuple21 (tuple21 a c) c))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a c) c)))
  (! (= (tb2t163 (t2tb163 i)) i) :pattern ((t2tb163 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 c1) c1) j) (= (t2tb163 (tb2t163 j)) j)) :pattern (
  (t2tb163 (tb2t163 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a c))) (t (set c)) (x (tuple21 a c)) (y c))
  (= (mem (tuple2 (tuple2 a1 c1) c1)
  (Tuple2 (tuple2 a1 c1) c1 (t2tb133 x) (t2tb135 y))
  (times c1 (tuple2 a1 c1) (t2tb129 s) (t2tb132 t)))
  (and (mem10 x s) (mem7 y t)))))

(declare-fun t2tb164 ((set (tuple21 (tuple21 a c) (set (tuple21 a b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a c) (set (tuple21 a b)))))) (sort
  (set1 (tuple2 (tuple2 a1 c1) (set1 (tuple2 a1 b1)))) (t2tb164 x))))

(declare-fun tb2t164 (uni) (set (tuple21 (tuple21 a c) (set (tuple21 a b)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a c) (set (tuple21 a b))))))
  (! (= (tb2t164 (t2tb164 i)) i) :pattern ((t2tb164 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 c1) (set1 (tuple2 a1 b1)))) j)
     (= (t2tb164 (tb2t164 j)) j)) :pattern ((t2tb164 (tb2t164 j))) )))

(declare-fun t2tb165 ((tuple21 (tuple21 a c) (set (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a c) (set (tuple21 a b))))) (sort
  (tuple2 (tuple2 a1 c1) (set1 (tuple2 a1 b1))) (t2tb165 x))))

(declare-fun tb2t165 (uni) (tuple21 (tuple21 a c) (set (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a c) (set (tuple21 a b)))))
  (! (= (tb2t165 (t2tb165 i)) i) :pattern ((t2tb165 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 c1) (set1 (tuple2 a1 b1))) j)
     (= (t2tb165 (tb2t165 j)) j)) :pattern ((t2tb165 (tb2t165 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a c))) (t (set (set (tuple21 a b))))
  (x (tuple21 a c)) (y (set (tuple21 a b))))
  (= (mem (tuple2 (tuple2 a1 c1) (set1 (tuple2 a1 b1)))
  (Tuple2 (tuple2 a1 c1) (set1 (tuple2 a1 b1)) (t2tb133 x) (t2tb11 y))
  (times (set1 (tuple2 a1 b1)) (tuple2 a1 c1) (t2tb129 s) (t2tb10 t)))
  (and (mem10 x s) (mem4 y t)))))

(declare-fun t2tb166 ((set (tuple21 (tuple21 a c) (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a c) (tuple21 a b))))) (sort
  (set1 (tuple2 (tuple2 a1 c1) (tuple2 a1 b1))) (t2tb166 x))))

(declare-fun tb2t166 (uni) (set (tuple21 (tuple21 a c) (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a c) (tuple21 a b)))))
  (! (= (tb2t166 (t2tb166 i)) i) :pattern ((t2tb166 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 c1) (tuple2 a1 b1))) j)
     (= (t2tb166 (tb2t166 j)) j)) :pattern ((t2tb166 (tb2t166 j))) )))

(declare-fun t2tb167 ((tuple21 (tuple21 a c) (tuple21 a b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a c) (tuple21 a b)))) (sort
  (tuple2 (tuple2 a1 c1) (tuple2 a1 b1)) (t2tb167 x))))

(declare-fun tb2t167 (uni) (tuple21 (tuple21 a c) (tuple21 a b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a c) (tuple21 a b))))
  (! (= (tb2t167 (t2tb167 i)) i) :pattern ((t2tb167 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 c1) (tuple2 a1 b1)) j)
     (= (t2tb167 (tb2t167 j)) j)) :pattern ((t2tb167 (tb2t167 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a c))) (t (set (tuple21 a b))) (x (tuple21 a c))
  (y (tuple21 a b)))
  (= (mem (tuple2 (tuple2 a1 c1) (tuple2 a1 b1))
  (Tuple2 (tuple2 a1 c1) (tuple2 a1 b1) (t2tb133 x) (t2tb13 y))
  (times (tuple2 a1 b1) (tuple2 a1 c1) (t2tb129 s) (t2tb11 t)))
  (and (mem10 x s) (mem3 y t)))))

(declare-fun t2tb168 ((set (tuple21 (tuple21 a c) b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a c) b)))) (sort
  (set1 (tuple2 (tuple2 a1 c1) b1)) (t2tb168 x))))

(declare-fun tb2t168 (uni) (set (tuple21 (tuple21 a c) b)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a c) b))))
  (! (= (tb2t168 (t2tb168 i)) i) :pattern ((t2tb168 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 c1) b1)) j)
     (= (t2tb168 (tb2t168 j)) j)) :pattern ((t2tb168 (tb2t168 j))) )))

(declare-fun t2tb169 ((tuple21 (tuple21 a c) b)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a c) b))) (sort (tuple2 (tuple2 a1 c1) b1)
  (t2tb169 x))))

(declare-fun tb2t169 (uni) (tuple21 (tuple21 a c) b))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a c) b)))
  (! (= (tb2t169 (t2tb169 i)) i) :pattern ((t2tb169 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 c1) b1) j) (= (t2tb169 (tb2t169 j)) j)) :pattern (
  (t2tb169 (tb2t169 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a c))) (t (set b)) (x (tuple21 a c)) (y b))
  (= (mem (tuple2 (tuple2 a1 c1) b1)
  (Tuple2 (tuple2 a1 c1) b1 (t2tb133 x) (t2tb14 y))
  (times b1 (tuple2 a1 c1) (t2tb129 s) (t2tb12 t)))
  (and (mem10 x s) (mem2 y t)))))

(declare-fun t2tb170 ((set (tuple21 (tuple21 a c) a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a c) a)))) (sort
  (set1 (tuple2 (tuple2 a1 c1) a1)) (t2tb170 x))))

(declare-fun tb2t170 (uni) (set (tuple21 (tuple21 a c) a)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a c) a))))
  (! (= (tb2t170 (t2tb170 i)) i) :pattern ((t2tb170 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 c1) a1)) j)
     (= (t2tb170 (tb2t170 j)) j)) :pattern ((t2tb170 (tb2t170 j))) )))

(declare-fun t2tb171 ((tuple21 (tuple21 a c) a)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a c) a))) (sort (tuple2 (tuple2 a1 c1) a1)
  (t2tb171 x))))

(declare-fun tb2t171 (uni) (tuple21 (tuple21 a c) a))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a c) a)))
  (! (= (tb2t171 (t2tb171 i)) i) :pattern ((t2tb171 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 c1) a1) j) (= (t2tb171 (tb2t171 j)) j)) :pattern (
  (t2tb171 (tb2t171 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a c))) (t (set a)) (x (tuple21 a c)) (y a))
  (= (mem (tuple2 (tuple2 a1 c1) a1)
  (Tuple2 (tuple2 a1 c1) a1 (t2tb133 x) (t2tb2 y))
  (times a1 (tuple2 a1 c1) (t2tb129 s) (t2tb1 t)))
  (and (mem10 x s) (mem1 y t)))))

;; mem_times
  (assert
  (forall ((b2 ty))
  (forall ((s (set (tuple21 a c))) (t uni) (x (tuple21 a c)) (y uni))
  (= (mem (tuple2 (tuple2 a1 c1) b2) (Tuple2 (tuple2 a1 c1) b2 (t2tb133 x) y)
  (times b2 (tuple2 a1 c1) (t2tb129 s) t)) (and (mem10 x s) (mem b2 y t))))))

(declare-fun t2tb421 ((set (tuple21 (tuple21 b c) (set (tuple21 a (tuple21 b
  c)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b c) (set (tuple21 a (tuple21 b c)))))))
  (sort (set1 (tuple2 (tuple2 b1 c1) (set1 (tuple2 a1 (tuple2 b1 c1)))))
  (t2tb421 x))))

(declare-fun tb2t421 (uni) (set (tuple21 (tuple21 b c) (set (tuple21 a
  (tuple21 b c))))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b c) (set (tuple21 a (tuple21 b c)))))))
  (! (= (tb2t421 (t2tb421 i)) i) :pattern ((t2tb421 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 b1 c1) (set1 (tuple2 a1 (tuple2 b1 c1))))) j)
     (= (t2tb421 (tb2t421 j)) j)) :pattern ((t2tb421 (tb2t421 j))) )))

(declare-fun t2tb422 ((tuple21 (tuple21 b c) (set (tuple21 a (tuple21 b
  c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b c) (set (tuple21 a (tuple21 b c)))))) (sort
  (tuple2 (tuple2 b1 c1) (set1 (tuple2 a1 (tuple2 b1 c1)))) (t2tb422 x))))

(declare-fun tb2t422 (uni) (tuple21 (tuple21 b c) (set (tuple21 a (tuple21 b
  c)))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b c) (set (tuple21 a (tuple21 b c))))))
  (! (= (tb2t422 (t2tb422 i)) i) :pattern ((t2tb422 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 c1) (set1 (tuple2 a1 (tuple2 b1 c1)))) j)
     (= (t2tb422 (tb2t422 j)) j)) :pattern ((t2tb422 (tb2t422 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 b c))) (t (set (set (tuple21 a (tuple21 b c)))))
  (x (tuple21 b c)) (y (set (tuple21 a (tuple21 b c)))))
  (= (mem (tuple2 (tuple2 b1 c1) (set1 (tuple2 a1 (tuple2 b1 c1))))
  (Tuple2 (tuple2 b1 c1) (set1 (tuple2 a1 (tuple2 b1 c1))) (t2tb134 x)
  (t2tb261 y))
  (times (set1 (tuple2 a1 (tuple2 b1 c1))) (tuple2 b1 c1) (t2tb131 s)
  (t2tb327 t))) (and (mem8 x s) (mem15 y t)))))

(declare-fun t2tb423 ((set (tuple21 (tuple21 b c) (tuple21 a (tuple21 b
  c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b c) (tuple21 a (tuple21 b c)))))) (sort
  (set1 (tuple2 (tuple2 b1 c1) (tuple2 a1 (tuple2 b1 c1)))) (t2tb423 x))))

(declare-fun tb2t423 (uni) (set (tuple21 (tuple21 b c) (tuple21 a (tuple21 b
  c)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b c) (tuple21 a (tuple21 b c))))))
  (! (= (tb2t423 (t2tb423 i)) i) :pattern ((t2tb423 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 c1) (tuple2 a1 (tuple2 b1 c1)))) j)
     (= (t2tb423 (tb2t423 j)) j)) :pattern ((t2tb423 (tb2t423 j))) )))

(declare-fun t2tb424 ((tuple21 (tuple21 b c) (tuple21 a (tuple21 b c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b c) (tuple21 a (tuple21 b c))))) (sort
  (tuple2 (tuple2 b1 c1) (tuple2 a1 (tuple2 b1 c1))) (t2tb424 x))))

(declare-fun tb2t424 (uni) (tuple21 (tuple21 b c) (tuple21 a (tuple21 b c))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b c) (tuple21 a (tuple21 b c)))))
  (! (= (tb2t424 (t2tb424 i)) i) :pattern ((t2tb424 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 c1) (tuple2 a1 (tuple2 b1 c1))) j)
     (= (t2tb424 (tb2t424 j)) j)) :pattern ((t2tb424 (tb2t424 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 b c))) (t (set (tuple21 a (tuple21 b c))))
  (x (tuple21 b c)) (y (tuple21 a (tuple21 b c))))
  (= (mem (tuple2 (tuple2 b1 c1) (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 (tuple2 b1 c1) (tuple2 a1 (tuple2 b1 c1)) (t2tb134 x) (t2tb260 y))
  (times (tuple2 a1 (tuple2 b1 c1)) (tuple2 b1 c1) (t2tb131 s) (t2tb261 t)))
  (and (mem8 x s) (mem14 y t)))))

(declare-fun t2tb190 ((set (tuple21 (tuple21 b c) (set (tuple21 a c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b c) (set (tuple21 a c)))))) (sort
  (set1 (tuple2 (tuple2 b1 c1) (set1 (tuple2 a1 c1)))) (t2tb190 x))))

(declare-fun tb2t190 (uni) (set (tuple21 (tuple21 b c) (set (tuple21 a c)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b c) (set (tuple21 a c))))))
  (! (= (tb2t190 (t2tb190 i)) i) :pattern ((t2tb190 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 c1) (set1 (tuple2 a1 c1)))) j)
     (= (t2tb190 (tb2t190 j)) j)) :pattern ((t2tb190 (tb2t190 j))) )))

(declare-fun t2tb191 ((tuple21 (tuple21 b c) (set (tuple21 a c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b c) (set (tuple21 a c))))) (sort
  (tuple2 (tuple2 b1 c1) (set1 (tuple2 a1 c1))) (t2tb191 x))))

(declare-fun tb2t191 (uni) (tuple21 (tuple21 b c) (set (tuple21 a c))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b c) (set (tuple21 a c)))))
  (! (= (tb2t191 (t2tb191 i)) i) :pattern ((t2tb191 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 c1) (set1 (tuple2 a1 c1))) j)
     (= (t2tb191 (tb2t191 j)) j)) :pattern ((t2tb191 (tb2t191 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 b c))) (t (set (set (tuple21 a c))))
  (x (tuple21 b c)) (y (set (tuple21 a c))))
  (= (mem (tuple2 (tuple2 b1 c1) (set1 (tuple2 a1 c1)))
  (Tuple2 (tuple2 b1 c1) (set1 (tuple2 a1 c1)) (t2tb134 x) (t2tb129 y))
  (times (set1 (tuple2 a1 c1)) (tuple2 b1 c1) (t2tb131 s) (t2tb128 t)))
  (and (mem8 x s) (mem11 y t)))))

(declare-fun t2tb192 ((set (tuple21 (tuple21 b c) (tuple21 a c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b c) (tuple21 a c))))) (sort
  (set1 (tuple2 (tuple2 b1 c1) (tuple2 a1 c1))) (t2tb192 x))))

(declare-fun tb2t192 (uni) (set (tuple21 (tuple21 b c) (tuple21 a c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b c) (tuple21 a c)))))
  (! (= (tb2t192 (t2tb192 i)) i) :pattern ((t2tb192 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 c1) (tuple2 a1 c1))) j)
     (= (t2tb192 (tb2t192 j)) j)) :pattern ((t2tb192 (tb2t192 j))) )))

(declare-fun t2tb193 ((tuple21 (tuple21 b c) (tuple21 a c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b c) (tuple21 a c)))) (sort
  (tuple2 (tuple2 b1 c1) (tuple2 a1 c1)) (t2tb193 x))))

(declare-fun tb2t193 (uni) (tuple21 (tuple21 b c) (tuple21 a c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b c) (tuple21 a c))))
  (! (= (tb2t193 (t2tb193 i)) i) :pattern ((t2tb193 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 c1) (tuple2 a1 c1)) j)
     (= (t2tb193 (tb2t193 j)) j)) :pattern ((t2tb193 (tb2t193 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 b c))) (t (set (tuple21 a c))) (x (tuple21 b c))
  (y (tuple21 a c)))
  (= (mem (tuple2 (tuple2 b1 c1) (tuple2 a1 c1))
  (Tuple2 (tuple2 b1 c1) (tuple2 a1 c1) (t2tb134 x) (t2tb133 y))
  (times (tuple2 a1 c1) (tuple2 b1 c1) (t2tb131 s) (t2tb129 t)))
  (and (mem8 x s) (mem10 y t)))))

(declare-fun t2tb196 ((set (tuple21 (tuple21 b c) (tuple21 b c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b c) (tuple21 b c))))) (sort
  (set1 (tuple2 (tuple2 b1 c1) (tuple2 b1 c1))) (t2tb196 x))))

(declare-fun tb2t196 (uni) (set (tuple21 (tuple21 b c) (tuple21 b c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b c) (tuple21 b c)))))
  (! (= (tb2t196 (t2tb196 i)) i) :pattern ((t2tb196 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 c1) (tuple2 b1 c1))) j)
     (= (t2tb196 (tb2t196 j)) j)) :pattern ((t2tb196 (tb2t196 j))) )))

(declare-fun t2tb197 ((tuple21 (tuple21 b c) (tuple21 b c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b c) (tuple21 b c)))) (sort
  (tuple2 (tuple2 b1 c1) (tuple2 b1 c1)) (t2tb197 x))))

(declare-fun tb2t197 (uni) (tuple21 (tuple21 b c) (tuple21 b c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b c) (tuple21 b c))))
  (! (= (tb2t197 (t2tb197 i)) i) :pattern ((t2tb197 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 c1) (tuple2 b1 c1)) j)
     (= (t2tb197 (tb2t197 j)) j)) :pattern ((t2tb197 (tb2t197 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 b c))) (t (set (tuple21 b c))) (x (tuple21 b c))
  (y (tuple21 b c)))
  (= (mem (tuple2 (tuple2 b1 c1) (tuple2 b1 c1))
  (Tuple2 (tuple2 b1 c1) (tuple2 b1 c1) (t2tb134 x) (t2tb134 y))
  (times (tuple2 b1 c1) (tuple2 b1 c1) (t2tb131 s) (t2tb131 t)))
  (and (mem8 x s) (mem8 y t)))))

(declare-fun t2tb198 ((set (tuple21 (tuple21 b c) c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b c) c)))) (sort
  (set1 (tuple2 (tuple2 b1 c1) c1)) (t2tb198 x))))

(declare-fun tb2t198 (uni) (set (tuple21 (tuple21 b c) c)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b c) c))))
  (! (= (tb2t198 (t2tb198 i)) i) :pattern ((t2tb198 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 c1) c1)) j)
     (= (t2tb198 (tb2t198 j)) j)) :pattern ((t2tb198 (tb2t198 j))) )))

(declare-fun t2tb199 ((tuple21 (tuple21 b c) c)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b c) c))) (sort (tuple2 (tuple2 b1 c1) c1)
  (t2tb199 x))))

(declare-fun tb2t199 (uni) (tuple21 (tuple21 b c) c))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b c) c)))
  (! (= (tb2t199 (t2tb199 i)) i) :pattern ((t2tb199 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 c1) c1) j) (= (t2tb199 (tb2t199 j)) j)) :pattern (
  (t2tb199 (tb2t199 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 b c))) (t (set c)) (x (tuple21 b c)) (y c))
  (= (mem (tuple2 (tuple2 b1 c1) c1)
  (Tuple2 (tuple2 b1 c1) c1 (t2tb134 x) (t2tb135 y))
  (times c1 (tuple2 b1 c1) (t2tb131 s) (t2tb132 t)))
  (and (mem8 x s) (mem7 y t)))))

(declare-fun t2tb200 ((tuple21 (tuple21 b c) (set (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b c) (set (tuple21 a b))))) (sort
  (tuple2 (tuple2 b1 c1) (set1 (tuple2 a1 b1))) (t2tb200 x))))

(declare-fun tb2t200 (uni) (tuple21 (tuple21 b c) (set (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b c) (set (tuple21 a b)))))
  (! (= (tb2t200 (t2tb200 i)) i) :pattern ((t2tb200 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 c1) (set1 (tuple2 a1 b1))) j)
     (= (t2tb200 (tb2t200 j)) j)) :pattern ((t2tb200 (tb2t200 j))) )))

(declare-fun t2tb201 ((set (tuple21 (tuple21 b c) (set (tuple21 a b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b c) (set (tuple21 a b)))))) (sort
  (set1 (tuple2 (tuple2 b1 c1) (set1 (tuple2 a1 b1)))) (t2tb201 x))))

(declare-fun tb2t201 (uni) (set (tuple21 (tuple21 b c) (set (tuple21 a b)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b c) (set (tuple21 a b))))))
  (! (= (tb2t201 (t2tb201 i)) i) :pattern ((t2tb201 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 c1) (set1 (tuple2 a1 b1)))) j)
     (= (t2tb201 (tb2t201 j)) j)) :pattern ((t2tb201 (tb2t201 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 b c))) (t (set (set (tuple21 a b))))
  (x (tuple21 b c)) (y (set (tuple21 a b))))
  (= (mem (tuple2 (tuple2 b1 c1) (set1 (tuple2 a1 b1)))
  (Tuple2 (tuple2 b1 c1) (set1 (tuple2 a1 b1)) (t2tb134 x) (t2tb11 y))
  (times (set1 (tuple2 a1 b1)) (tuple2 b1 c1) (t2tb131 s) (t2tb10 t)))
  (and (mem8 x s) (mem4 y t)))))

(declare-fun t2tb202 ((set (tuple21 (tuple21 b c) (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b c) (tuple21 a b))))) (sort
  (set1 (tuple2 (tuple2 b1 c1) (tuple2 a1 b1))) (t2tb202 x))))

(declare-fun tb2t202 (uni) (set (tuple21 (tuple21 b c) (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b c) (tuple21 a b)))))
  (! (= (tb2t202 (t2tb202 i)) i) :pattern ((t2tb202 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 c1) (tuple2 a1 b1))) j)
     (= (t2tb202 (tb2t202 j)) j)) :pattern ((t2tb202 (tb2t202 j))) )))

(declare-fun t2tb203 ((tuple21 (tuple21 b c) (tuple21 a b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b c) (tuple21 a b)))) (sort
  (tuple2 (tuple2 b1 c1) (tuple2 a1 b1)) (t2tb203 x))))

(declare-fun tb2t203 (uni) (tuple21 (tuple21 b c) (tuple21 a b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b c) (tuple21 a b))))
  (! (= (tb2t203 (t2tb203 i)) i) :pattern ((t2tb203 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 c1) (tuple2 a1 b1)) j)
     (= (t2tb203 (tb2t203 j)) j)) :pattern ((t2tb203 (tb2t203 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 b c))) (t (set (tuple21 a b))) (x (tuple21 b c))
  (y (tuple21 a b)))
  (= (mem (tuple2 (tuple2 b1 c1) (tuple2 a1 b1))
  (Tuple2 (tuple2 b1 c1) (tuple2 a1 b1) (t2tb134 x) (t2tb13 y))
  (times (tuple2 a1 b1) (tuple2 b1 c1) (t2tb131 s) (t2tb11 t)))
  (and (mem8 x s) (mem3 y t)))))

(declare-fun t2tb204 ((set (tuple21 (tuple21 b c) b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b c) b)))) (sort
  (set1 (tuple2 (tuple2 b1 c1) b1)) (t2tb204 x))))

(declare-fun tb2t204 (uni) (set (tuple21 (tuple21 b c) b)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b c) b))))
  (! (= (tb2t204 (t2tb204 i)) i) :pattern ((t2tb204 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 c1) b1)) j)
     (= (t2tb204 (tb2t204 j)) j)) :pattern ((t2tb204 (tb2t204 j))) )))

(declare-fun t2tb205 ((tuple21 (tuple21 b c) b)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b c) b))) (sort (tuple2 (tuple2 b1 c1) b1)
  (t2tb205 x))))

(declare-fun tb2t205 (uni) (tuple21 (tuple21 b c) b))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b c) b)))
  (! (= (tb2t205 (t2tb205 i)) i) :pattern ((t2tb205 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 c1) b1) j) (= (t2tb205 (tb2t205 j)) j)) :pattern (
  (t2tb205 (tb2t205 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 b c))) (t (set b)) (x (tuple21 b c)) (y b))
  (= (mem (tuple2 (tuple2 b1 c1) b1)
  (Tuple2 (tuple2 b1 c1) b1 (t2tb134 x) (t2tb14 y))
  (times b1 (tuple2 b1 c1) (t2tb131 s) (t2tb12 t)))
  (and (mem8 x s) (mem2 y t)))))

(declare-fun t2tb206 ((set (tuple21 (tuple21 b c) a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b c) a)))) (sort
  (set1 (tuple2 (tuple2 b1 c1) a1)) (t2tb206 x))))

(declare-fun tb2t206 (uni) (set (tuple21 (tuple21 b c) a)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b c) a))))
  (! (= (tb2t206 (t2tb206 i)) i) :pattern ((t2tb206 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 c1) a1)) j)
     (= (t2tb206 (tb2t206 j)) j)) :pattern ((t2tb206 (tb2t206 j))) )))

(declare-fun t2tb207 ((tuple21 (tuple21 b c) a)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b c) a))) (sort (tuple2 (tuple2 b1 c1) a1)
  (t2tb207 x))))

(declare-fun tb2t207 (uni) (tuple21 (tuple21 b c) a))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b c) a)))
  (! (= (tb2t207 (t2tb207 i)) i) :pattern ((t2tb207 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 c1) a1) j) (= (t2tb207 (tb2t207 j)) j)) :pattern (
  (t2tb207 (tb2t207 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 b c))) (t (set a)) (x (tuple21 b c)) (y a))
  (= (mem (tuple2 (tuple2 b1 c1) a1)
  (Tuple2 (tuple2 b1 c1) a1 (t2tb134 x) (t2tb2 y))
  (times a1 (tuple2 b1 c1) (t2tb131 s) (t2tb1 t)))
  (and (mem8 x s) (mem1 y t)))))

;; mem_times
  (assert
  (forall ((b2 ty))
  (forall ((s (set (tuple21 b c))) (t uni) (x (tuple21 b c)) (y uni))
  (= (mem (tuple2 (tuple2 b1 c1) b2) (Tuple2 (tuple2 b1 c1) b2 (t2tb134 x) y)
  (times b2 (tuple2 b1 c1) (t2tb131 s) t)) (and (mem8 x s) (mem b2 y t))))))

(declare-fun t2tb425 ((set (tuple21 c (set (tuple21 a (tuple21 b c)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 c (set (tuple21 a (tuple21 b c))))))) (sort
  (set1 (tuple2 c1 (set1 (tuple2 a1 (tuple2 b1 c1))))) (t2tb425 x))))

(declare-fun tb2t425 (uni) (set (tuple21 c (set (tuple21 a (tuple21 b c))))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 c (set (tuple21 a (tuple21 b c)))))))
  (! (= (tb2t425 (t2tb425 i)) i) :pattern ((t2tb425 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 c1 (set1 (tuple2 a1 (tuple2 b1 c1))))) j)
     (= (t2tb425 (tb2t425 j)) j)) :pattern ((t2tb425 (tb2t425 j))) )))

(declare-fun t2tb426 ((tuple21 c (set (tuple21 a (tuple21 b c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 c (set (tuple21 a (tuple21 b c)))))) (sort
  (tuple2 c1 (set1 (tuple2 a1 (tuple2 b1 c1)))) (t2tb426 x))))

(declare-fun tb2t426 (uni) (tuple21 c (set (tuple21 a (tuple21 b c)))))

;; BridgeL
  (assert
  (forall ((i (tuple21 c (set (tuple21 a (tuple21 b c))))))
  (! (= (tb2t426 (t2tb426 i)) i) :pattern ((t2tb426 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 c1 (set1 (tuple2 a1 (tuple2 b1 c1)))) j)
     (= (t2tb426 (tb2t426 j)) j)) :pattern ((t2tb426 (tb2t426 j))) )))

;; mem_times
  (assert
  (forall ((s (set c)) (t (set (set (tuple21 a (tuple21 b c))))) (x c)
  (y (set (tuple21 a (tuple21 b c)))))
  (= (mem (tuple2 c1 (set1 (tuple2 a1 (tuple2 b1 c1))))
  (Tuple2 c1 (set1 (tuple2 a1 (tuple2 b1 c1))) (t2tb135 x) (t2tb261 y))
  (times (set1 (tuple2 a1 (tuple2 b1 c1))) c1 (t2tb132 s) (t2tb327 t)))
  (and (mem7 x s) (mem15 y t)))))

(declare-fun t2tb427 ((set (tuple21 c (tuple21 a (tuple21 b c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 c (tuple21 a (tuple21 b c)))))) (sort
  (set1 (tuple2 c1 (tuple2 a1 (tuple2 b1 c1)))) (t2tb427 x))))

(declare-fun tb2t427 (uni) (set (tuple21 c (tuple21 a (tuple21 b c)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 c (tuple21 a (tuple21 b c))))))
  (! (= (tb2t427 (t2tb427 i)) i) :pattern ((t2tb427 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 c1 (tuple2 a1 (tuple2 b1 c1)))) j)
     (= (t2tb427 (tb2t427 j)) j)) :pattern ((t2tb427 (tb2t427 j))) )))

(declare-fun t2tb428 ((tuple21 c (tuple21 a (tuple21 b c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 c (tuple21 a (tuple21 b c))))) (sort
  (tuple2 c1 (tuple2 a1 (tuple2 b1 c1))) (t2tb428 x))))

(declare-fun tb2t428 (uni) (tuple21 c (tuple21 a (tuple21 b c))))

;; BridgeL
  (assert
  (forall ((i (tuple21 c (tuple21 a (tuple21 b c)))))
  (! (= (tb2t428 (t2tb428 i)) i) :pattern ((t2tb428 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 c1 (tuple2 a1 (tuple2 b1 c1))) j)
     (= (t2tb428 (tb2t428 j)) j)) :pattern ((t2tb428 (tb2t428 j))) )))

;; mem_times
  (assert
  (forall ((s (set c)) (t (set (tuple21 a (tuple21 b c)))) (x c)
  (y (tuple21 a (tuple21 b c))))
  (= (mem (tuple2 c1 (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 c1 (tuple2 a1 (tuple2 b1 c1)) (t2tb135 x) (t2tb260 y))
  (times (tuple2 a1 (tuple2 b1 c1)) c1 (t2tb132 s) (t2tb261 t)))
  (and (mem7 x s) (mem14 y t)))))

(declare-fun t2tb208 ((set (tuple21 c (set (tuple21 a c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 c (set (tuple21 a c)))))) (sort
  (set1 (tuple2 c1 (set1 (tuple2 a1 c1)))) (t2tb208 x))))

(declare-fun tb2t208 (uni) (set (tuple21 c (set (tuple21 a c)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 c (set (tuple21 a c))))))
  (! (= (tb2t208 (t2tb208 i)) i) :pattern ((t2tb208 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 c1 (set1 (tuple2 a1 c1)))) j)
     (= (t2tb208 (tb2t208 j)) j)) :pattern ((t2tb208 (tb2t208 j))) )))

(declare-fun t2tb209 ((tuple21 c (set (tuple21 a c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 c (set (tuple21 a c))))) (sort
  (tuple2 c1 (set1 (tuple2 a1 c1))) (t2tb209 x))))

(declare-fun tb2t209 (uni) (tuple21 c (set (tuple21 a c))))

;; BridgeL
  (assert
  (forall ((i (tuple21 c (set (tuple21 a c)))))
  (! (= (tb2t209 (t2tb209 i)) i) :pattern ((t2tb209 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 c1 (set1 (tuple2 a1 c1))) j)
     (= (t2tb209 (tb2t209 j)) j)) :pattern ((t2tb209 (tb2t209 j))) )))

;; mem_times
  (assert
  (forall ((s (set c)) (t (set (set (tuple21 a c)))) (x c) (y (set (tuple21 a
  c))))
  (= (mem (tuple2 c1 (set1 (tuple2 a1 c1)))
  (Tuple2 c1 (set1 (tuple2 a1 c1)) (t2tb135 x) (t2tb129 y))
  (times (set1 (tuple2 a1 c1)) c1 (t2tb132 s) (t2tb128 t)))
  (and (mem7 x s) (mem11 y t)))))

(declare-fun t2tb210 ((set (tuple21 c (tuple21 a c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 c (tuple21 a c))))) (sort
  (set1 (tuple2 c1 (tuple2 a1 c1))) (t2tb210 x))))

(declare-fun tb2t210 (uni) (set (tuple21 c (tuple21 a c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 c (tuple21 a c)))))
  (! (= (tb2t210 (t2tb210 i)) i) :pattern ((t2tb210 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 c1 (tuple2 a1 c1))) j)
     (= (t2tb210 (tb2t210 j)) j)) :pattern ((t2tb210 (tb2t210 j))) )))

(declare-fun t2tb211 ((tuple21 c (tuple21 a c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 c (tuple21 a c)))) (sort (tuple2 c1 (tuple2 a1 c1))
  (t2tb211 x))))

(declare-fun tb2t211 (uni) (tuple21 c (tuple21 a c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 c (tuple21 a c))))
  (! (= (tb2t211 (t2tb211 i)) i) :pattern ((t2tb211 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 c1 (tuple2 a1 c1)) j) (= (t2tb211 (tb2t211 j)) j)) :pattern (
  (t2tb211 (tb2t211 j))) )))

;; mem_times
  (assert
  (forall ((s (set c)) (t (set (tuple21 a c))) (x c) (y (tuple21 a c)))
  (= (mem (tuple2 c1 (tuple2 a1 c1))
  (Tuple2 c1 (tuple2 a1 c1) (t2tb135 x) (t2tb133 y))
  (times (tuple2 a1 c1) c1 (t2tb132 s) (t2tb129 t)))
  (and (mem7 x s) (mem10 y t)))))

(declare-fun t2tb214 ((tuple21 c (tuple21 b c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 c (tuple21 b c)))) (sort (tuple2 c1 (tuple2 b1 c1))
  (t2tb214 x))))

(declare-fun tb2t214 (uni) (tuple21 c (tuple21 b c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 c (tuple21 b c))))
  (! (= (tb2t214 (t2tb214 i)) i) :pattern ((t2tb214 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 c1 (tuple2 b1 c1)) j) (= (t2tb214 (tb2t214 j)) j)) :pattern (
  (t2tb214 (tb2t214 j))) )))

(declare-fun t2tb215 ((set (tuple21 c (tuple21 b c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 c (tuple21 b c))))) (sort
  (set1 (tuple2 c1 (tuple2 b1 c1))) (t2tb215 x))))

(declare-fun tb2t215 (uni) (set (tuple21 c (tuple21 b c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 c (tuple21 b c)))))
  (! (= (tb2t215 (t2tb215 i)) i) :pattern ((t2tb215 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 c1 (tuple2 b1 c1))) j)
     (= (t2tb215 (tb2t215 j)) j)) :pattern ((t2tb215 (tb2t215 j))) )))

;; mem_times
  (assert
  (forall ((s (set c)) (t (set (tuple21 b c))) (x c) (y (tuple21 b c)))
  (= (mem (tuple2 c1 (tuple2 b1 c1))
  (Tuple2 c1 (tuple2 b1 c1) (t2tb135 x) (t2tb134 y))
  (times (tuple2 b1 c1) c1 (t2tb132 s) (t2tb131 t)))
  (and (mem7 x s) (mem8 y t)))))

(declare-fun t2tb216 ((set (tuple21 c c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 c c)))) (sort (set1 (tuple2 c1 c1)) (t2tb216 x))))

(declare-fun tb2t216 (uni) (set (tuple21 c c)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 c c))))
  (! (= (tb2t216 (t2tb216 i)) i) :pattern ((t2tb216 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 c1 c1)) j) (= (t2tb216 (tb2t216 j)) j)) :pattern (
  (t2tb216 (tb2t216 j))) )))

(declare-fun t2tb217 ((tuple21 c c)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 c c))) (sort (tuple2 c1 c1) (t2tb217 x))))

(declare-fun tb2t217 (uni) (tuple21 c c))

;; BridgeL
  (assert
  (forall ((i (tuple21 c c)))
  (! (= (tb2t217 (t2tb217 i)) i) :pattern ((t2tb217 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 c1 c1) j) (= (t2tb217 (tb2t217 j)) j)) :pattern (
  (t2tb217 (tb2t217 j))) )))

;; mem_times
  (assert
  (forall ((s (set c)) (t (set c)) (x c) (y c))
  (= (mem (tuple2 c1 c1) (Tuple2 c1 c1 (t2tb135 x) (t2tb135 y))
  (times c1 c1 (t2tb132 s) (t2tb132 t))) (and (mem7 x s) (mem7 y t)))))

(declare-fun t2tb218 ((set (tuple21 c (set (tuple21 a b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 c (set (tuple21 a b)))))) (sort
  (set1 (tuple2 c1 (set1 (tuple2 a1 b1)))) (t2tb218 x))))

(declare-fun tb2t218 (uni) (set (tuple21 c (set (tuple21 a b)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 c (set (tuple21 a b))))))
  (! (= (tb2t218 (t2tb218 i)) i) :pattern ((t2tb218 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 c1 (set1 (tuple2 a1 b1)))) j)
     (= (t2tb218 (tb2t218 j)) j)) :pattern ((t2tb218 (tb2t218 j))) )))

(declare-fun t2tb219 ((tuple21 c (set (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 c (set (tuple21 a b))))) (sort
  (tuple2 c1 (set1 (tuple2 a1 b1))) (t2tb219 x))))

(declare-fun tb2t219 (uni) (tuple21 c (set (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (tuple21 c (set (tuple21 a b)))))
  (! (= (tb2t219 (t2tb219 i)) i) :pattern ((t2tb219 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 c1 (set1 (tuple2 a1 b1))) j)
     (= (t2tb219 (tb2t219 j)) j)) :pattern ((t2tb219 (tb2t219 j))) )))

;; mem_times
  (assert
  (forall ((s (set c)) (t (set (set (tuple21 a b)))) (x c) (y (set (tuple21 a
  b))))
  (= (mem (tuple2 c1 (set1 (tuple2 a1 b1)))
  (Tuple2 c1 (set1 (tuple2 a1 b1)) (t2tb135 x) (t2tb11 y))
  (times (set1 (tuple2 a1 b1)) c1 (t2tb132 s) (t2tb10 t)))
  (and (mem7 x s) (mem4 y t)))))

(declare-fun t2tb220 ((set (tuple21 c (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 c (tuple21 a b))))) (sort
  (set1 (tuple2 c1 (tuple2 a1 b1))) (t2tb220 x))))

(declare-fun tb2t220 (uni) (set (tuple21 c (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 c (tuple21 a b)))))
  (! (= (tb2t220 (t2tb220 i)) i) :pattern ((t2tb220 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 c1 (tuple2 a1 b1))) j)
     (= (t2tb220 (tb2t220 j)) j)) :pattern ((t2tb220 (tb2t220 j))) )))

(declare-fun t2tb221 ((tuple21 c (tuple21 a b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 c (tuple21 a b)))) (sort (tuple2 c1 (tuple2 a1 b1))
  (t2tb221 x))))

(declare-fun tb2t221 (uni) (tuple21 c (tuple21 a b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 c (tuple21 a b))))
  (! (= (tb2t221 (t2tb221 i)) i) :pattern ((t2tb221 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 c1 (tuple2 a1 b1)) j) (= (t2tb221 (tb2t221 j)) j)) :pattern (
  (t2tb221 (tb2t221 j))) )))

;; mem_times
  (assert
  (forall ((s (set c)) (t (set (tuple21 a b))) (x c) (y (tuple21 a b)))
  (= (mem (tuple2 c1 (tuple2 a1 b1))
  (Tuple2 c1 (tuple2 a1 b1) (t2tb135 x) (t2tb13 y))
  (times (tuple2 a1 b1) c1 (t2tb132 s) (t2tb11 t)))
  (and (mem7 x s) (mem3 y t)))))

(declare-fun t2tb222 ((set (tuple21 c b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 c b)))) (sort (set1 (tuple2 c1 b1)) (t2tb222 x))))

(declare-fun tb2t222 (uni) (set (tuple21 c b)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 c b))))
  (! (= (tb2t222 (t2tb222 i)) i) :pattern ((t2tb222 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 c1 b1)) j) (= (t2tb222 (tb2t222 j)) j)) :pattern (
  (t2tb222 (tb2t222 j))) )))

(declare-fun t2tb223 ((tuple21 c b)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 c b))) (sort (tuple2 c1 b1) (t2tb223 x))))

(declare-fun tb2t223 (uni) (tuple21 c b))

;; BridgeL
  (assert
  (forall ((i (tuple21 c b)))
  (! (= (tb2t223 (t2tb223 i)) i) :pattern ((t2tb223 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 c1 b1) j) (= (t2tb223 (tb2t223 j)) j)) :pattern (
  (t2tb223 (tb2t223 j))) )))

;; mem_times
  (assert
  (forall ((s (set c)) (t (set b)) (x c) (y b))
  (= (mem (tuple2 c1 b1) (Tuple2 c1 b1 (t2tb135 x) (t2tb14 y))
  (times b1 c1 (t2tb132 s) (t2tb12 t))) (and (mem7 x s) (mem2 y t)))))

(declare-fun t2tb224 ((set (tuple21 c a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 c a)))) (sort (set1 (tuple2 c1 a1)) (t2tb224 x))))

(declare-fun tb2t224 (uni) (set (tuple21 c a)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 c a))))
  (! (= (tb2t224 (t2tb224 i)) i) :pattern ((t2tb224 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 c1 a1)) j) (= (t2tb224 (tb2t224 j)) j)) :pattern (
  (t2tb224 (tb2t224 j))) )))

(declare-fun t2tb225 ((tuple21 c a)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 c a))) (sort (tuple2 c1 a1) (t2tb225 x))))

(declare-fun tb2t225 (uni) (tuple21 c a))

;; BridgeL
  (assert
  (forall ((i (tuple21 c a)))
  (! (= (tb2t225 (t2tb225 i)) i) :pattern ((t2tb225 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 c1 a1) j) (= (t2tb225 (tb2t225 j)) j)) :pattern (
  (t2tb225 (tb2t225 j))) )))

;; mem_times
  (assert
  (forall ((s (set c)) (t (set a)) (x c) (y a))
  (= (mem (tuple2 c1 a1) (Tuple2 c1 a1 (t2tb135 x) (t2tb2 y))
  (times a1 c1 (t2tb132 s) (t2tb1 t))) (and (mem7 x s) (mem1 y t)))))

;; mem_times
  (assert
  (forall ((b2 ty))
  (forall ((s (set c)) (t uni) (x c) (y uni))
  (= (mem (tuple2 c1 b2) (Tuple2 c1 b2 (t2tb135 x) y)
  (times b2 c1 (t2tb132 s) t)) (and (mem7 x s) (mem b2 y t))))))

(declare-fun t2tb429 ((set (tuple21 (set (tuple21 a b)) (set (tuple21 a
  (tuple21 b c)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a b)) (set (tuple21 a (tuple21 b
  c))))))) (sort
  (set1 (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 (tuple2 b1 c1)))))
  (t2tb429 x))))

(declare-fun tb2t429 (uni) (set (tuple21 (set (tuple21 a b)) (set (tuple21 a
  (tuple21 b c))))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a b)) (set (tuple21 a (tuple21 b
  c))))))) (! (= (tb2t429 (t2tb429 i)) i) :pattern ((t2tb429 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 (tuple2 b1 c1)))))
     j) (= (t2tb429 (tb2t429 j)) j)) :pattern ((t2tb429 (tb2t429 j))) )))

(declare-fun t2tb430 ((tuple21 (set (tuple21 a b)) (set (tuple21 a (tuple21 b
  c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a b)) (set (tuple21 a (tuple21 b c))))))
  (sort (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 (tuple2 b1 c1))))
  (t2tb430 x))))

(declare-fun tb2t430 (uni) (tuple21 (set (tuple21 a b)) (set (tuple21 a
  (tuple21 b c)))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a b)) (set (tuple21 a (tuple21 b c))))))
  (! (= (tb2t430 (t2tb430 i)) i) :pattern ((t2tb430 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 (tuple2 b1 c1)))) j)
     (= (t2tb430 (tb2t430 j)) j)) :pattern ((t2tb430 (tb2t430 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set (set (tuple21 a (tuple21 b
  c))))) (x (set (tuple21 a b))) (y (set (tuple21 a (tuple21 b c)))))
  (= (mem (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 (tuple2 b1 c1))))
  (Tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 (tuple2 b1 c1))) (t2tb11 x)
  (t2tb261 y))
  (times (set1 (tuple2 a1 (tuple2 b1 c1))) (set1 (tuple2 a1 b1)) (t2tb10 s)
  (t2tb327 t))) (and (mem4 x s) (mem15 y t)))))

(declare-fun t2tb431 ((set (tuple21 (set (tuple21 a b)) (tuple21 a (tuple21 b
  c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a b)) (tuple21 a (tuple21 b c))))))
  (sort (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 (tuple2 b1 c1))))
  (t2tb431 x))))

(declare-fun tb2t431 (uni) (set (tuple21 (set (tuple21 a b)) (tuple21 a
  (tuple21 b c)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a b)) (tuple21 a (tuple21 b c))))))
  (! (= (tb2t431 (t2tb431 i)) i) :pattern ((t2tb431 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 (tuple2 b1 c1)))) j)
     (= (t2tb431 (tb2t431 j)) j)) :pattern ((t2tb431 (tb2t431 j))) )))

(declare-fun t2tb432 ((tuple21 (set (tuple21 a b)) (tuple21 a (tuple21 b
  c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a b)) (tuple21 a (tuple21 b c))))) (sort
  (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 (tuple2 b1 c1))) (t2tb432 x))))

(declare-fun tb2t432 (uni) (tuple21 (set (tuple21 a b)) (tuple21 a (tuple21 b
  c))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a b)) (tuple21 a (tuple21 b c)))))
  (! (= (tb2t432 (t2tb432 i)) i) :pattern ((t2tb432 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 (tuple2 b1 c1))) j)
     (= (t2tb432 (tb2t432 j)) j)) :pattern ((t2tb432 (tb2t432 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set (tuple21 a (tuple21 b c))))
  (x (set (tuple21 a b))) (y (tuple21 a (tuple21 b c))))
  (= (mem (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 (tuple2 b1 c1)) (t2tb11 x)
  (t2tb260 y))
  (times (tuple2 a1 (tuple2 b1 c1)) (set1 (tuple2 a1 b1)) (t2tb10 s)
  (t2tb261 t))) (and (mem4 x s) (mem14 y t)))))

(declare-fun t2tb226 ((set (tuple21 (set (tuple21 a b)) (set (tuple21 a
  c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a b)) (set (tuple21 a c)))))) (sort
  (set1 (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 c1)))) (t2tb226 x))))

(declare-fun tb2t226 (uni) (set (tuple21 (set (tuple21 a b)) (set (tuple21 a
  c)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a b)) (set (tuple21 a c))))))
  (! (= (tb2t226 (t2tb226 i)) i) :pattern ((t2tb226 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 c1)))) j)
     (= (t2tb226 (tb2t226 j)) j)) :pattern ((t2tb226 (tb2t226 j))) )))

(declare-fun t2tb227 ((tuple21 (set (tuple21 a b)) (set (tuple21 a c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a b)) (set (tuple21 a c))))) (sort
  (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 c1))) (t2tb227 x))))

(declare-fun tb2t227 (uni) (tuple21 (set (tuple21 a b)) (set (tuple21 a c))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a b)) (set (tuple21 a c)))))
  (! (= (tb2t227 (t2tb227 i)) i) :pattern ((t2tb227 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 c1))) j)
     (= (t2tb227 (tb2t227 j)) j)) :pattern ((t2tb227 (tb2t227 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set (set (tuple21 a c))))
  (x (set (tuple21 a b))) (y (set (tuple21 a c))))
  (= (mem (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 c1)))
  (Tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 c1)) (t2tb11 x) (t2tb129 y))
  (times (set1 (tuple2 a1 c1)) (set1 (tuple2 a1 b1)) (t2tb10 s) (t2tb128 t)))
  (and (mem4 x s) (mem11 y t)))))

(declare-fun t2tb228 ((tuple21 (set (tuple21 a b)) (tuple21 a c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a b)) (tuple21 a c)))) (sort
  (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 c1)) (t2tb228 x))))

(declare-fun tb2t228 (uni) (tuple21 (set (tuple21 a b)) (tuple21 a c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a b)) (tuple21 a c))))
  (! (= (tb2t228 (t2tb228 i)) i) :pattern ((t2tb228 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 c1)) j)
     (= (t2tb228 (tb2t228 j)) j)) :pattern ((t2tb228 (tb2t228 j))) )))

(declare-fun t2tb229 ((set (tuple21 (set (tuple21 a b)) (tuple21 a c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a b)) (tuple21 a c))))) (sort
  (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 c1))) (t2tb229 x))))

(declare-fun tb2t229 (uni) (set (tuple21 (set (tuple21 a b)) (tuple21 a c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a b)) (tuple21 a c)))))
  (! (= (tb2t229 (t2tb229 i)) i) :pattern ((t2tb229 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 c1))) j)
     (= (t2tb229 (tb2t229 j)) j)) :pattern ((t2tb229 (tb2t229 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set (tuple21 a c)))
  (x (set (tuple21 a b))) (y (tuple21 a c)))
  (= (mem (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 c1))
  (Tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 c1) (t2tb11 x) (t2tb133 y))
  (times (tuple2 a1 c1) (set1 (tuple2 a1 b1)) (t2tb10 s) (t2tb129 t)))
  (and (mem4 x s) (mem10 y t)))))

(declare-fun t2tb232 ((set (tuple21 (set (tuple21 a b)) (tuple21 b c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a b)) (tuple21 b c))))) (sort
  (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 b1 c1))) (t2tb232 x))))

(declare-fun tb2t232 (uni) (set (tuple21 (set (tuple21 a b)) (tuple21 b c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a b)) (tuple21 b c)))))
  (! (= (tb2t232 (t2tb232 i)) i) :pattern ((t2tb232 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 b1 c1))) j)
     (= (t2tb232 (tb2t232 j)) j)) :pattern ((t2tb232 (tb2t232 j))) )))

(declare-fun t2tb233 ((tuple21 (set (tuple21 a b)) (tuple21 b c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a b)) (tuple21 b c)))) (sort
  (tuple2 (set1 (tuple2 a1 b1)) (tuple2 b1 c1)) (t2tb233 x))))

(declare-fun tb2t233 (uni) (tuple21 (set (tuple21 a b)) (tuple21 b c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a b)) (tuple21 b c))))
  (! (= (tb2t233 (t2tb233 i)) i) :pattern ((t2tb233 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 a1 b1)) (tuple2 b1 c1)) j)
     (= (t2tb233 (tb2t233 j)) j)) :pattern ((t2tb233 (tb2t233 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set (tuple21 b c)))
  (x (set (tuple21 a b))) (y (tuple21 b c)))
  (= (mem (tuple2 (set1 (tuple2 a1 b1)) (tuple2 b1 c1))
  (Tuple2 (set1 (tuple2 a1 b1)) (tuple2 b1 c1) (t2tb11 x) (t2tb134 y))
  (times (tuple2 b1 c1) (set1 (tuple2 a1 b1)) (t2tb10 s) (t2tb131 t)))
  (and (mem4 x s) (mem8 y t)))))

(declare-fun t2tb234 ((set (tuple21 (set (tuple21 a b)) c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a b)) c)))) (sort
  (set1 (tuple2 (set1 (tuple2 a1 b1)) c1)) (t2tb234 x))))

(declare-fun tb2t234 (uni) (set (tuple21 (set (tuple21 a b)) c)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a b)) c))))
  (! (= (tb2t234 (t2tb234 i)) i) :pattern ((t2tb234 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 a1 b1)) c1)) j)
     (= (t2tb234 (tb2t234 j)) j)) :pattern ((t2tb234 (tb2t234 j))) )))

(declare-fun t2tb235 ((tuple21 (set (tuple21 a b)) c)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a b)) c))) (sort
  (tuple2 (set1 (tuple2 a1 b1)) c1) (t2tb235 x))))

(declare-fun tb2t235 (uni) (tuple21 (set (tuple21 a b)) c))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a b)) c)))
  (! (= (tb2t235 (t2tb235 i)) i) :pattern ((t2tb235 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 a1 b1)) c1) j)
     (= (t2tb235 (tb2t235 j)) j)) :pattern ((t2tb235 (tb2t235 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set c)) (x (set (tuple21 a b)))
  (y c))
  (= (mem (tuple2 (set1 (tuple2 a1 b1)) c1)
  (Tuple2 (set1 (tuple2 a1 b1)) c1 (t2tb11 x) (t2tb135 y))
  (times c1 (set1 (tuple2 a1 b1)) (t2tb10 s) (t2tb132 t)))
  (and (mem4 x s) (mem7 y t)))))

(declare-fun t2tb15 ((set (tuple21 (set (tuple21 a b)) (set (tuple21 a
  b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a b)) (set (tuple21 a b)))))) (sort
  (set1 (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1)))) (t2tb15 x))))

(declare-fun tb2t15 (uni) (set (tuple21 (set (tuple21 a b)) (set (tuple21 a
  b)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a b)) (set (tuple21 a b))))))
  (! (= (tb2t15 (t2tb15 i)) i) :pattern ((t2tb15 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1)))) j)
     (= (t2tb15 (tb2t15 j)) j)) :pattern ((t2tb15 (tb2t15 j))) )))

(declare-fun t2tb16 ((tuple21 (set (tuple21 a b)) (set (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a b)) (set (tuple21 a b))))) (sort
  (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1))) (t2tb16 x))))

(declare-fun tb2t16 (uni) (tuple21 (set (tuple21 a b)) (set (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a b)) (set (tuple21 a b)))))
  (! (= (tb2t16 (t2tb16 i)) i) :pattern ((t2tb16 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1))) j)
     (= (t2tb16 (tb2t16 j)) j)) :pattern ((t2tb16 (tb2t16 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set (set (tuple21 a b))))
  (x (set (tuple21 a b))) (y (set (tuple21 a b))))
  (= (mem (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1)))
  (Tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1)) (t2tb11 x) (t2tb11 y))
  (times (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1)) (t2tb10 s) (t2tb10 t)))
  (and (mem4 x s) (mem4 y t)))))

(declare-fun t2tb17 ((set (tuple21 (set (tuple21 a b)) (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a b)) (tuple21 a b))))) (sort
  (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 b1))) (t2tb17 x))))

(declare-fun tb2t17 (uni) (set (tuple21 (set (tuple21 a b)) (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a b)) (tuple21 a b)))))
  (! (= (tb2t17 (t2tb17 i)) i) :pattern ((t2tb17 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 b1))) j)
     (= (t2tb17 (tb2t17 j)) j)) :pattern ((t2tb17 (tb2t17 j))) )))

(declare-fun t2tb18 ((tuple21 (set (tuple21 a b)) (tuple21 a b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a b)) (tuple21 a b)))) (sort
  (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 b1)) (t2tb18 x))))

(declare-fun tb2t18 (uni) (tuple21 (set (tuple21 a b)) (tuple21 a b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a b)) (tuple21 a b))))
  (! (= (tb2t18 (t2tb18 i)) i) :pattern ((t2tb18 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 b1)) j)
     (= (t2tb18 (tb2t18 j)) j)) :pattern ((t2tb18 (tb2t18 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set (tuple21 a b)))
  (x (set (tuple21 a b))) (y (tuple21 a b)))
  (= (mem (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 b1))
  (Tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 b1) (t2tb11 x) (t2tb13 y))
  (times (tuple2 a1 b1) (set1 (tuple2 a1 b1)) (t2tb10 s) (t2tb11 t)))
  (and (mem4 x s) (mem3 y t)))))

(declare-fun t2tb19 ((set (tuple21 (set (tuple21 a b)) b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a b)) b)))) (sort
  (set1 (tuple2 (set1 (tuple2 a1 b1)) b1)) (t2tb19 x))))

(declare-fun tb2t19 (uni) (set (tuple21 (set (tuple21 a b)) b)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a b)) b))))
  (! (= (tb2t19 (t2tb19 i)) i) :pattern ((t2tb19 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 a1 b1)) b1)) j)
     (= (t2tb19 (tb2t19 j)) j)) :pattern ((t2tb19 (tb2t19 j))) )))

(declare-fun t2tb20 ((tuple21 (set (tuple21 a b)) b)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a b)) b))) (sort
  (tuple2 (set1 (tuple2 a1 b1)) b1) (t2tb20 x))))

(declare-fun tb2t20 (uni) (tuple21 (set (tuple21 a b)) b))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a b)) b)))
  (! (= (tb2t20 (t2tb20 i)) i) :pattern ((t2tb20 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 a1 b1)) b1) j)
     (= (t2tb20 (tb2t20 j)) j)) :pattern ((t2tb20 (tb2t20 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set b)) (x (set (tuple21 a b)))
  (y b))
  (= (mem (tuple2 (set1 (tuple2 a1 b1)) b1)
  (Tuple2 (set1 (tuple2 a1 b1)) b1 (t2tb11 x) (t2tb14 y))
  (times b1 (set1 (tuple2 a1 b1)) (t2tb10 s) (t2tb12 t)))
  (and (mem4 x s) (mem2 y t)))))

(declare-fun t2tb21 ((tuple21 (set (tuple21 a b)) a)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a b)) a))) (sort
  (tuple2 (set1 (tuple2 a1 b1)) a1) (t2tb21 x))))

(declare-fun tb2t21 (uni) (tuple21 (set (tuple21 a b)) a))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a b)) a)))
  (! (= (tb2t21 (t2tb21 i)) i) :pattern ((t2tb21 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 a1 b1)) a1) j)
     (= (t2tb21 (tb2t21 j)) j)) :pattern ((t2tb21 (tb2t21 j))) )))

(declare-fun t2tb22 ((set (tuple21 (set (tuple21 a b)) a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a b)) a)))) (sort
  (set1 (tuple2 (set1 (tuple2 a1 b1)) a1)) (t2tb22 x))))

(declare-fun tb2t22 (uni) (set (tuple21 (set (tuple21 a b)) a)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a b)) a))))
  (! (= (tb2t22 (t2tb22 i)) i) :pattern ((t2tb22 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 a1 b1)) a1)) j)
     (= (t2tb22 (tb2t22 j)) j)) :pattern ((t2tb22 (tb2t22 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set a)) (x (set (tuple21 a b)))
  (y a))
  (= (mem (tuple2 (set1 (tuple2 a1 b1)) a1)
  (Tuple2 (set1 (tuple2 a1 b1)) a1 (t2tb11 x) (t2tb2 y))
  (times a1 (set1 (tuple2 a1 b1)) (t2tb10 s) (t2tb1 t)))
  (and (mem4 x s) (mem1 y t)))))

;; mem_times
  (assert
  (forall ((b2 ty))
  (forall ((s (set (set (tuple21 a b)))) (t uni) (x (set (tuple21 a b)))
  (y uni))
  (= (mem (tuple2 (set1 (tuple2 a1 b1)) b2)
  (Tuple2 (set1 (tuple2 a1 b1)) b2 (t2tb11 x) y)
  (times b2 (set1 (tuple2 a1 b1)) (t2tb10 s) t))
  (and (mem4 x s) (mem b2 y t))))))

(declare-fun t2tb433 ((set (tuple21 (tuple21 a b) (set (tuple21 a (tuple21 b
  c)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) (set (tuple21 a (tuple21 b c)))))))
  (sort (set1 (tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 (tuple2 b1 c1)))))
  (t2tb433 x))))

(declare-fun tb2t433 (uni) (set (tuple21 (tuple21 a b) (set (tuple21 a
  (tuple21 b c))))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a b) (set (tuple21 a (tuple21 b c)))))))
  (! (= (tb2t433 (t2tb433 i)) i) :pattern ((t2tb433 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 (tuple2 b1 c1))))) j)
     (= (t2tb433 (tb2t433 j)) j)) :pattern ((t2tb433 (tb2t433 j))) )))

(declare-fun t2tb434 ((tuple21 (tuple21 a b) (set (tuple21 a (tuple21 b
  c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a b) (set (tuple21 a (tuple21 b c)))))) (sort
  (tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 (tuple2 b1 c1)))) (t2tb434 x))))

(declare-fun tb2t434 (uni) (tuple21 (tuple21 a b) (set (tuple21 a (tuple21 b
  c)))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a b) (set (tuple21 a (tuple21 b c))))))
  (! (= (tb2t434 (t2tb434 i)) i) :pattern ((t2tb434 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 (tuple2 b1 c1)))) j)
     (= (t2tb434 (tb2t434 j)) j)) :pattern ((t2tb434 (tb2t434 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (set (tuple21 a (tuple21 b c)))))
  (x (tuple21 a b)) (y (set (tuple21 a (tuple21 b c)))))
  (= (mem (tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 (tuple2 b1 c1))))
  (Tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 (tuple2 b1 c1))) (t2tb13 x)
  (t2tb261 y))
  (times (set1 (tuple2 a1 (tuple2 b1 c1))) (tuple2 a1 b1) (t2tb11 s)
  (t2tb327 t))) (and (mem3 x s) (mem15 y t)))))

(declare-fun t2tb435 ((set (tuple21 (tuple21 a b) (tuple21 a (tuple21 b
  c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) (tuple21 a (tuple21 b c)))))) (sort
  (set1 (tuple2 (tuple2 a1 b1) (tuple2 a1 (tuple2 b1 c1)))) (t2tb435 x))))

(declare-fun tb2t435 (uni) (set (tuple21 (tuple21 a b) (tuple21 a (tuple21 b
  c)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a b) (tuple21 a (tuple21 b c))))))
  (! (= (tb2t435 (t2tb435 i)) i) :pattern ((t2tb435 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 b1) (tuple2 a1 (tuple2 b1 c1)))) j)
     (= (t2tb435 (tb2t435 j)) j)) :pattern ((t2tb435 (tb2t435 j))) )))

(declare-fun t2tb436 ((tuple21 (tuple21 a b) (tuple21 a (tuple21 b c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a b) (tuple21 a (tuple21 b c))))) (sort
  (tuple2 (tuple2 a1 b1) (tuple2 a1 (tuple2 b1 c1))) (t2tb436 x))))

(declare-fun tb2t436 (uni) (tuple21 (tuple21 a b) (tuple21 a (tuple21 b c))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a b) (tuple21 a (tuple21 b c)))))
  (! (= (tb2t436 (t2tb436 i)) i) :pattern ((t2tb436 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 b1) (tuple2 a1 (tuple2 b1 c1))) j)
     (= (t2tb436 (tb2t436 j)) j)) :pattern ((t2tb436 (tb2t436 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (tuple21 a (tuple21 b c))))
  (x (tuple21 a b)) (y (tuple21 a (tuple21 b c))))
  (= (mem (tuple2 (tuple2 a1 b1) (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 (tuple2 a1 b1) (tuple2 a1 (tuple2 b1 c1)) (t2tb13 x) (t2tb260 y))
  (times (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 b1) (t2tb11 s) (t2tb261 t)))
  (and (mem3 x s) (mem14 y t)))))

(declare-fun t2tb236 ((set (tuple21 (tuple21 a b) (set (tuple21 a c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) (set (tuple21 a c)))))) (sort
  (set1 (tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 c1)))) (t2tb236 x))))

(declare-fun tb2t236 (uni) (set (tuple21 (tuple21 a b) (set (tuple21 a c)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a b) (set (tuple21 a c))))))
  (! (= (tb2t236 (t2tb236 i)) i) :pattern ((t2tb236 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 c1)))) j)
     (= (t2tb236 (tb2t236 j)) j)) :pattern ((t2tb236 (tb2t236 j))) )))

(declare-fun t2tb237 ((tuple21 (tuple21 a b) (set (tuple21 a c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a b) (set (tuple21 a c))))) (sort
  (tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 c1))) (t2tb237 x))))

(declare-fun tb2t237 (uni) (tuple21 (tuple21 a b) (set (tuple21 a c))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a b) (set (tuple21 a c)))))
  (! (= (tb2t237 (t2tb237 i)) i) :pattern ((t2tb237 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 c1))) j)
     (= (t2tb237 (tb2t237 j)) j)) :pattern ((t2tb237 (tb2t237 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (set (tuple21 a c))))
  (x (tuple21 a b)) (y (set (tuple21 a c))))
  (= (mem (tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 c1)))
  (Tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 c1)) (t2tb13 x) (t2tb129 y))
  (times (set1 (tuple2 a1 c1)) (tuple2 a1 b1) (t2tb11 s) (t2tb128 t)))
  (and (mem3 x s) (mem11 y t)))))

(declare-fun t2tb238 ((set (tuple21 (tuple21 a b) (tuple21 a c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) (tuple21 a c))))) (sort
  (set1 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1))) (t2tb238 x))))

(declare-fun tb2t238 (uni) (set (tuple21 (tuple21 a b) (tuple21 a c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a b) (tuple21 a c)))))
  (! (= (tb2t238 (t2tb238 i)) i) :pattern ((t2tb238 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1))) j)
     (= (t2tb238 (tb2t238 j)) j)) :pattern ((t2tb238 (tb2t238 j))) )))

(declare-fun t2tb239 ((tuple21 (tuple21 a b) (tuple21 a c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a b) (tuple21 a c)))) (sort
  (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) (t2tb239 x))))

(declare-fun tb2t239 (uni) (tuple21 (tuple21 a b) (tuple21 a c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a b) (tuple21 a c))))
  (! (= (tb2t239 (t2tb239 i)) i) :pattern ((t2tb239 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) j)
     (= (t2tb239 (tb2t239 j)) j)) :pattern ((t2tb239 (tb2t239 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (tuple21 a c))) (x (tuple21 a b))
  (y (tuple21 a c)))
  (= (mem (tuple2 (tuple2 a1 b1) (tuple2 a1 c1))
  (Tuple2 (tuple2 a1 b1) (tuple2 a1 c1) (t2tb13 x) (t2tb133 y))
  (times (tuple2 a1 c1) (tuple2 a1 b1) (t2tb11 s) (t2tb129 t)))
  (and (mem3 x s) (mem10 y t)))))

(declare-fun t2tb242 ((set (tuple21 (tuple21 a b) (tuple21 b c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) (tuple21 b c))))) (sort
  (set1 (tuple2 (tuple2 a1 b1) (tuple2 b1 c1))) (t2tb242 x))))

(declare-fun tb2t242 (uni) (set (tuple21 (tuple21 a b) (tuple21 b c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a b) (tuple21 b c)))))
  (! (= (tb2t242 (t2tb242 i)) i) :pattern ((t2tb242 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 b1) (tuple2 b1 c1))) j)
     (= (t2tb242 (tb2t242 j)) j)) :pattern ((t2tb242 (tb2t242 j))) )))

(declare-fun t2tb243 ((tuple21 (tuple21 a b) (tuple21 b c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a b) (tuple21 b c)))) (sort
  (tuple2 (tuple2 a1 b1) (tuple2 b1 c1)) (t2tb243 x))))

(declare-fun tb2t243 (uni) (tuple21 (tuple21 a b) (tuple21 b c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a b) (tuple21 b c))))
  (! (= (tb2t243 (t2tb243 i)) i) :pattern ((t2tb243 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 b1) (tuple2 b1 c1)) j)
     (= (t2tb243 (tb2t243 j)) j)) :pattern ((t2tb243 (tb2t243 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (tuple21 b c))) (x (tuple21 a b))
  (y (tuple21 b c)))
  (= (mem (tuple2 (tuple2 a1 b1) (tuple2 b1 c1))
  (Tuple2 (tuple2 a1 b1) (tuple2 b1 c1) (t2tb13 x) (t2tb134 y))
  (times (tuple2 b1 c1) (tuple2 a1 b1) (t2tb11 s) (t2tb131 t)))
  (and (mem3 x s) (mem8 y t)))))

(declare-fun t2tb244 ((tuple21 (tuple21 a b) c)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a b) c))) (sort (tuple2 (tuple2 a1 b1) c1)
  (t2tb244 x))))

(declare-fun tb2t244 (uni) (tuple21 (tuple21 a b) c))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a b) c)))
  (! (= (tb2t244 (t2tb244 i)) i) :pattern ((t2tb244 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 b1) c1) j) (= (t2tb244 (tb2t244 j)) j)) :pattern (
  (t2tb244 (tb2t244 j))) )))

(declare-fun t2tb245 ((set (tuple21 (tuple21 a b) c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) c)))) (sort
  (set1 (tuple2 (tuple2 a1 b1) c1)) (t2tb245 x))))

(declare-fun tb2t245 (uni) (set (tuple21 (tuple21 a b) c)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a b) c))))
  (! (= (tb2t245 (t2tb245 i)) i) :pattern ((t2tb245 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 b1) c1)) j)
     (= (t2tb245 (tb2t245 j)) j)) :pattern ((t2tb245 (tb2t245 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a b))) (t (set c)) (x (tuple21 a b)) (y c))
  (= (mem (tuple2 (tuple2 a1 b1) c1)
  (Tuple2 (tuple2 a1 b1) c1 (t2tb13 x) (t2tb135 y))
  (times c1 (tuple2 a1 b1) (t2tb11 s) (t2tb132 t)))
  (and (mem3 x s) (mem7 y t)))))

(declare-fun t2tb23 ((set (tuple21 (tuple21 a b) (set (tuple21 a b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) (set (tuple21 a b)))))) (sort
  (set1 (tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 b1)))) (t2tb23 x))))

(declare-fun tb2t23 (uni) (set (tuple21 (tuple21 a b) (set (tuple21 a b)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a b) (set (tuple21 a b))))))
  (! (= (tb2t23 (t2tb23 i)) i) :pattern ((t2tb23 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 b1)))) j)
     (= (t2tb23 (tb2t23 j)) j)) :pattern ((t2tb23 (tb2t23 j))) )))

(declare-fun t2tb24 ((tuple21 (tuple21 a b) (set (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a b) (set (tuple21 a b))))) (sort
  (tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 b1))) (t2tb24 x))))

(declare-fun tb2t24 (uni) (tuple21 (tuple21 a b) (set (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a b) (set (tuple21 a b)))))
  (! (= (tb2t24 (t2tb24 i)) i) :pattern ((t2tb24 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 b1))) j)
     (= (t2tb24 (tb2t24 j)) j)) :pattern ((t2tb24 (tb2t24 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (set (tuple21 a b))))
  (x (tuple21 a b)) (y (set (tuple21 a b))))
  (= (mem (tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 b1)))
  (Tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 b1)) (t2tb13 x) (t2tb11 y))
  (times (set1 (tuple2 a1 b1)) (tuple2 a1 b1) (t2tb11 s) (t2tb10 t)))
  (and (mem3 x s) (mem4 y t)))))

(declare-fun t2tb25 ((set (tuple21 (tuple21 a b) (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) (tuple21 a b))))) (sort
  (set1 (tuple2 (tuple2 a1 b1) (tuple2 a1 b1))) (t2tb25 x))))

(declare-fun tb2t25 (uni) (set (tuple21 (tuple21 a b) (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a b) (tuple21 a b)))))
  (! (= (tb2t25 (t2tb25 i)) i) :pattern ((t2tb25 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 b1) (tuple2 a1 b1))) j)
     (= (t2tb25 (tb2t25 j)) j)) :pattern ((t2tb25 (tb2t25 j))) )))

(declare-fun t2tb26 ((tuple21 (tuple21 a b) (tuple21 a b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a b) (tuple21 a b)))) (sort
  (tuple2 (tuple2 a1 b1) (tuple2 a1 b1)) (t2tb26 x))))

(declare-fun tb2t26 (uni) (tuple21 (tuple21 a b) (tuple21 a b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a b) (tuple21 a b))))
  (! (= (tb2t26 (t2tb26 i)) i) :pattern ((t2tb26 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 b1) (tuple2 a1 b1)) j)
     (= (t2tb26 (tb2t26 j)) j)) :pattern ((t2tb26 (tb2t26 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (tuple21 a b))) (x (tuple21 a b))
  (y (tuple21 a b)))
  (= (mem (tuple2 (tuple2 a1 b1) (tuple2 a1 b1))
  (Tuple2 (tuple2 a1 b1) (tuple2 a1 b1) (t2tb13 x) (t2tb13 y))
  (times (tuple2 a1 b1) (tuple2 a1 b1) (t2tb11 s) (t2tb11 t)))
  (and (mem3 x s) (mem3 y t)))))

(declare-fun t2tb27 ((set (tuple21 (tuple21 a b) b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) b)))) (sort
  (set1 (tuple2 (tuple2 a1 b1) b1)) (t2tb27 x))))

(declare-fun tb2t27 (uni) (set (tuple21 (tuple21 a b) b)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a b) b))))
  (! (= (tb2t27 (t2tb27 i)) i) :pattern ((t2tb27 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 b1) b1)) j)
     (= (t2tb27 (tb2t27 j)) j)) :pattern ((t2tb27 (tb2t27 j))) )))

(declare-fun t2tb28 ((tuple21 (tuple21 a b) b)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a b) b))) (sort (tuple2 (tuple2 a1 b1) b1)
  (t2tb28 x))))

(declare-fun tb2t28 (uni) (tuple21 (tuple21 a b) b))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a b) b)))
  (! (= (tb2t28 (t2tb28 i)) i) :pattern ((t2tb28 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 b1) b1) j) (= (t2tb28 (tb2t28 j)) j)) :pattern (
  (t2tb28 (tb2t28 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a b))) (t (set b)) (x (tuple21 a b)) (y b))
  (= (mem (tuple2 (tuple2 a1 b1) b1)
  (Tuple2 (tuple2 a1 b1) b1 (t2tb13 x) (t2tb14 y))
  (times b1 (tuple2 a1 b1) (t2tb11 s) (t2tb12 t)))
  (and (mem3 x s) (mem2 y t)))))

(declare-fun t2tb29 ((set (tuple21 (tuple21 a b) a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) a)))) (sort
  (set1 (tuple2 (tuple2 a1 b1) a1)) (t2tb29 x))))

(declare-fun tb2t29 (uni) (set (tuple21 (tuple21 a b) a)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a b) a))))
  (! (= (tb2t29 (t2tb29 i)) i) :pattern ((t2tb29 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 b1) a1)) j)
     (= (t2tb29 (tb2t29 j)) j)) :pattern ((t2tb29 (tb2t29 j))) )))

(declare-fun t2tb30 ((tuple21 (tuple21 a b) a)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a b) a))) (sort (tuple2 (tuple2 a1 b1) a1)
  (t2tb30 x))))

(declare-fun tb2t30 (uni) (tuple21 (tuple21 a b) a))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a b) a)))
  (! (= (tb2t30 (t2tb30 i)) i) :pattern ((t2tb30 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 b1) a1) j) (= (t2tb30 (tb2t30 j)) j)) :pattern (
  (t2tb30 (tb2t30 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a b))) (t (set a)) (x (tuple21 a b)) (y a))
  (= (mem (tuple2 (tuple2 a1 b1) a1)
  (Tuple2 (tuple2 a1 b1) a1 (t2tb13 x) (t2tb2 y))
  (times a1 (tuple2 a1 b1) (t2tb11 s) (t2tb1 t)))
  (and (mem3 x s) (mem1 y t)))))

;; mem_times
  (assert
  (forall ((b2 ty))
  (forall ((s (set (tuple21 a b))) (t uni) (x (tuple21 a b)) (y uni))
  (= (mem (tuple2 (tuple2 a1 b1) b2) (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) y)
  (times b2 (tuple2 a1 b1) (t2tb11 s) t)) (and (mem3 x s) (mem b2 y t))))))

(declare-fun t2tb437 ((set (tuple21 b (set (tuple21 a (tuple21 b c)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 b (set (tuple21 a (tuple21 b c))))))) (sort
  (set1 (tuple2 b1 (set1 (tuple2 a1 (tuple2 b1 c1))))) (t2tb437 x))))

(declare-fun tb2t437 (uni) (set (tuple21 b (set (tuple21 a (tuple21 b c))))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 b (set (tuple21 a (tuple21 b c)))))))
  (! (= (tb2t437 (t2tb437 i)) i) :pattern ((t2tb437 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 b1 (set1 (tuple2 a1 (tuple2 b1 c1))))) j)
     (= (t2tb437 (tb2t437 j)) j)) :pattern ((t2tb437 (tb2t437 j))) )))

(declare-fun t2tb438 ((tuple21 b (set (tuple21 a (tuple21 b c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 b (set (tuple21 a (tuple21 b c)))))) (sort
  (tuple2 b1 (set1 (tuple2 a1 (tuple2 b1 c1)))) (t2tb438 x))))

(declare-fun tb2t438 (uni) (tuple21 b (set (tuple21 a (tuple21 b c)))))

;; BridgeL
  (assert
  (forall ((i (tuple21 b (set (tuple21 a (tuple21 b c))))))
  (! (= (tb2t438 (t2tb438 i)) i) :pattern ((t2tb438 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 b1 (set1 (tuple2 a1 (tuple2 b1 c1)))) j)
     (= (t2tb438 (tb2t438 j)) j)) :pattern ((t2tb438 (tb2t438 j))) )))

;; mem_times
  (assert
  (forall ((s (set b)) (t (set (set (tuple21 a (tuple21 b c))))) (x b)
  (y (set (tuple21 a (tuple21 b c)))))
  (= (mem (tuple2 b1 (set1 (tuple2 a1 (tuple2 b1 c1))))
  (Tuple2 b1 (set1 (tuple2 a1 (tuple2 b1 c1))) (t2tb14 x) (t2tb261 y))
  (times (set1 (tuple2 a1 (tuple2 b1 c1))) b1 (t2tb12 s) (t2tb327 t)))
  (and (mem2 x s) (mem15 y t)))))

(declare-fun t2tb439 ((set (tuple21 b (tuple21 a (tuple21 b c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 b (tuple21 a (tuple21 b c)))))) (sort
  (set1 (tuple2 b1 (tuple2 a1 (tuple2 b1 c1)))) (t2tb439 x))))

(declare-fun tb2t439 (uni) (set (tuple21 b (tuple21 a (tuple21 b c)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 b (tuple21 a (tuple21 b c))))))
  (! (= (tb2t439 (t2tb439 i)) i) :pattern ((t2tb439 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 b1 (tuple2 a1 (tuple2 b1 c1)))) j)
     (= (t2tb439 (tb2t439 j)) j)) :pattern ((t2tb439 (tb2t439 j))) )))

(declare-fun t2tb440 ((tuple21 b (tuple21 a (tuple21 b c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 b (tuple21 a (tuple21 b c))))) (sort
  (tuple2 b1 (tuple2 a1 (tuple2 b1 c1))) (t2tb440 x))))

(declare-fun tb2t440 (uni) (tuple21 b (tuple21 a (tuple21 b c))))

;; BridgeL
  (assert
  (forall ((i (tuple21 b (tuple21 a (tuple21 b c)))))
  (! (= (tb2t440 (t2tb440 i)) i) :pattern ((t2tb440 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 b1 (tuple2 a1 (tuple2 b1 c1))) j)
     (= (t2tb440 (tb2t440 j)) j)) :pattern ((t2tb440 (tb2t440 j))) )))

;; mem_times
  (assert
  (forall ((s (set b)) (t (set (tuple21 a (tuple21 b c)))) (x b)
  (y (tuple21 a (tuple21 b c))))
  (= (mem (tuple2 b1 (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 b1 (tuple2 a1 (tuple2 b1 c1)) (t2tb14 x) (t2tb260 y))
  (times (tuple2 a1 (tuple2 b1 c1)) b1 (t2tb12 s) (t2tb261 t)))
  (and (mem2 x s) (mem14 y t)))))

(declare-fun t2tb246 ((set (tuple21 b (set (tuple21 a c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 b (set (tuple21 a c)))))) (sort
  (set1 (tuple2 b1 (set1 (tuple2 a1 c1)))) (t2tb246 x))))

(declare-fun tb2t246 (uni) (set (tuple21 b (set (tuple21 a c)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 b (set (tuple21 a c))))))
  (! (= (tb2t246 (t2tb246 i)) i) :pattern ((t2tb246 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 b1 (set1 (tuple2 a1 c1)))) j)
     (= (t2tb246 (tb2t246 j)) j)) :pattern ((t2tb246 (tb2t246 j))) )))

(declare-fun t2tb247 ((tuple21 b (set (tuple21 a c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 b (set (tuple21 a c))))) (sort
  (tuple2 b1 (set1 (tuple2 a1 c1))) (t2tb247 x))))

(declare-fun tb2t247 (uni) (tuple21 b (set (tuple21 a c))))

;; BridgeL
  (assert
  (forall ((i (tuple21 b (set (tuple21 a c)))))
  (! (= (tb2t247 (t2tb247 i)) i) :pattern ((t2tb247 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 b1 (set1 (tuple2 a1 c1))) j)
     (= (t2tb247 (tb2t247 j)) j)) :pattern ((t2tb247 (tb2t247 j))) )))

;; mem_times
  (assert
  (forall ((s (set b)) (t (set (set (tuple21 a c)))) (x b) (y (set (tuple21 a
  c))))
  (= (mem (tuple2 b1 (set1 (tuple2 a1 c1)))
  (Tuple2 b1 (set1 (tuple2 a1 c1)) (t2tb14 x) (t2tb129 y))
  (times (set1 (tuple2 a1 c1)) b1 (t2tb12 s) (t2tb128 t)))
  (and (mem2 x s) (mem11 y t)))))

(declare-fun t2tb248 ((set (tuple21 b (tuple21 a c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 b (tuple21 a c))))) (sort
  (set1 (tuple2 b1 (tuple2 a1 c1))) (t2tb248 x))))

(declare-fun tb2t248 (uni) (set (tuple21 b (tuple21 a c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 b (tuple21 a c)))))
  (! (= (tb2t248 (t2tb248 i)) i) :pattern ((t2tb248 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 b1 (tuple2 a1 c1))) j)
     (= (t2tb248 (tb2t248 j)) j)) :pattern ((t2tb248 (tb2t248 j))) )))

(declare-fun t2tb249 ((tuple21 b (tuple21 a c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 b (tuple21 a c)))) (sort (tuple2 b1 (tuple2 a1 c1))
  (t2tb249 x))))

(declare-fun tb2t249 (uni) (tuple21 b (tuple21 a c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 b (tuple21 a c))))
  (! (= (tb2t249 (t2tb249 i)) i) :pattern ((t2tb249 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 b1 (tuple2 a1 c1)) j) (= (t2tb249 (tb2t249 j)) j)) :pattern (
  (t2tb249 (tb2t249 j))) )))

;; mem_times
  (assert
  (forall ((s (set b)) (t (set (tuple21 a c))) (x b) (y (tuple21 a c)))
  (= (mem (tuple2 b1 (tuple2 a1 c1))
  (Tuple2 b1 (tuple2 a1 c1) (t2tb14 x) (t2tb133 y))
  (times (tuple2 a1 c1) b1 (t2tb12 s) (t2tb129 t)))
  (and (mem2 x s) (mem10 y t)))))

(declare-fun t2tb252 ((set (tuple21 b (tuple21 b c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 b (tuple21 b c))))) (sort
  (set1 (tuple2 b1 (tuple2 b1 c1))) (t2tb252 x))))

(declare-fun tb2t252 (uni) (set (tuple21 b (tuple21 b c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 b (tuple21 b c)))))
  (! (= (tb2t252 (t2tb252 i)) i) :pattern ((t2tb252 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 b1 (tuple2 b1 c1))) j)
     (= (t2tb252 (tb2t252 j)) j)) :pattern ((t2tb252 (tb2t252 j))) )))

(declare-fun t2tb253 ((tuple21 b (tuple21 b c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 b (tuple21 b c)))) (sort (tuple2 b1 (tuple2 b1 c1))
  (t2tb253 x))))

(declare-fun tb2t253 (uni) (tuple21 b (tuple21 b c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 b (tuple21 b c))))
  (! (= (tb2t253 (t2tb253 i)) i) :pattern ((t2tb253 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 b1 (tuple2 b1 c1)) j) (= (t2tb253 (tb2t253 j)) j)) :pattern (
  (t2tb253 (tb2t253 j))) )))

;; mem_times
  (assert
  (forall ((s (set b)) (t (set (tuple21 b c))) (x b) (y (tuple21 b c)))
  (= (mem (tuple2 b1 (tuple2 b1 c1))
  (Tuple2 b1 (tuple2 b1 c1) (t2tb14 x) (t2tb134 y))
  (times (tuple2 b1 c1) b1 (t2tb12 s) (t2tb131 t)))
  (and (mem2 x s) (mem8 y t)))))

;; mem_times
  (assert
  (forall ((s (set b)) (t (set c)) (x b) (y c))
  (= (mem8 (tb2t134 (Tuple2 b1 c1 (t2tb14 x) (t2tb135 y))) (times3 s t))
  (and (mem2 x s) (mem7 y t)))))

(declare-fun t2tb31 ((set (tuple21 b (set (tuple21 a b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 b (set (tuple21 a b)))))) (sort
  (set1 (tuple2 b1 (set1 (tuple2 a1 b1)))) (t2tb31 x))))

(declare-fun tb2t31 (uni) (set (tuple21 b (set (tuple21 a b)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 b (set (tuple21 a b))))))
  (! (= (tb2t31 (t2tb31 i)) i) :pattern ((t2tb31 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 b1 (set1 (tuple2 a1 b1)))) j)
     (= (t2tb31 (tb2t31 j)) j)) :pattern ((t2tb31 (tb2t31 j))) )))

(declare-fun t2tb32 ((tuple21 b (set (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 b (set (tuple21 a b))))) (sort
  (tuple2 b1 (set1 (tuple2 a1 b1))) (t2tb32 x))))

(declare-fun tb2t32 (uni) (tuple21 b (set (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (tuple21 b (set (tuple21 a b)))))
  (! (= (tb2t32 (t2tb32 i)) i) :pattern ((t2tb32 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 b1 (set1 (tuple2 a1 b1))) j)
     (= (t2tb32 (tb2t32 j)) j)) :pattern ((t2tb32 (tb2t32 j))) )))

;; mem_times
  (assert
  (forall ((s (set b)) (t (set (set (tuple21 a b)))) (x b) (y (set (tuple21 a
  b))))
  (= (mem (tuple2 b1 (set1 (tuple2 a1 b1)))
  (Tuple2 b1 (set1 (tuple2 a1 b1)) (t2tb14 x) (t2tb11 y))
  (times (set1 (tuple2 a1 b1)) b1 (t2tb12 s) (t2tb10 t)))
  (and (mem2 x s) (mem4 y t)))))

(declare-fun t2tb33 ((tuple21 b (tuple21 a b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 b (tuple21 a b)))) (sort (tuple2 b1 (tuple2 a1 b1))
  (t2tb33 x))))

(declare-fun tb2t33 (uni) (tuple21 b (tuple21 a b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 b (tuple21 a b))))
  (! (= (tb2t33 (t2tb33 i)) i) :pattern ((t2tb33 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 b1 (tuple2 a1 b1)) j) (= (t2tb33 (tb2t33 j)) j)) :pattern (
  (t2tb33 (tb2t33 j))) )))

(declare-fun t2tb34 ((set (tuple21 b (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 b (tuple21 a b))))) (sort
  (set1 (tuple2 b1 (tuple2 a1 b1))) (t2tb34 x))))

(declare-fun tb2t34 (uni) (set (tuple21 b (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 b (tuple21 a b)))))
  (! (= (tb2t34 (t2tb34 i)) i) :pattern ((t2tb34 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 b1 (tuple2 a1 b1))) j)
     (= (t2tb34 (tb2t34 j)) j)) :pattern ((t2tb34 (tb2t34 j))) )))

;; mem_times
  (assert
  (forall ((s (set b)) (t (set (tuple21 a b))) (x b) (y (tuple21 a b)))
  (= (mem (tuple2 b1 (tuple2 a1 b1))
  (Tuple2 b1 (tuple2 a1 b1) (t2tb14 x) (t2tb13 y))
  (times (tuple2 a1 b1) b1 (t2tb12 s) (t2tb11 t)))
  (and (mem2 x s) (mem3 y t)))))

(declare-fun t2tb35 ((set (tuple21 b b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 b b)))) (sort (set1 (tuple2 b1 b1)) (t2tb35 x))))

(declare-fun tb2t35 (uni) (set (tuple21 b b)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 b b))))
  (! (= (tb2t35 (t2tb35 i)) i) :pattern ((t2tb35 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 b1 b1)) j) (= (t2tb35 (tb2t35 j)) j)) :pattern (
  (t2tb35 (tb2t35 j))) )))

(declare-fun t2tb36 ((tuple21 b b)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 b b))) (sort (tuple2 b1 b1) (t2tb36 x))))

(declare-fun tb2t36 (uni) (tuple21 b b))

;; BridgeL
  (assert
  (forall ((i (tuple21 b b)))
  (! (= (tb2t36 (t2tb36 i)) i) :pattern ((t2tb36 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 b1 b1) j) (= (t2tb36 (tb2t36 j)) j)) :pattern (
  (t2tb36 (tb2t36 j))) )))

;; mem_times
  (assert
  (forall ((s (set b)) (t (set b)) (x b) (y b))
  (= (mem (tuple2 b1 b1) (Tuple2 b1 b1 (t2tb14 x) (t2tb14 y))
  (times b1 b1 (t2tb12 s) (t2tb12 t))) (and (mem2 x s) (mem2 y t)))))

(declare-fun t2tb37 ((set (tuple21 b a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 b a)))) (sort (set1 (tuple2 b1 a1)) (t2tb37 x))))

(declare-fun tb2t37 (uni) (set (tuple21 b a)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 b a))))
  (! (= (tb2t37 (t2tb37 i)) i) :pattern ((t2tb37 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 b1 a1)) j) (= (t2tb37 (tb2t37 j)) j)) :pattern (
  (t2tb37 (tb2t37 j))) )))

(declare-fun t2tb38 ((tuple21 b a)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 b a))) (sort (tuple2 b1 a1) (t2tb38 x))))

(declare-fun tb2t38 (uni) (tuple21 b a))

;; BridgeL
  (assert
  (forall ((i (tuple21 b a)))
  (! (= (tb2t38 (t2tb38 i)) i) :pattern ((t2tb38 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 b1 a1) j) (= (t2tb38 (tb2t38 j)) j)) :pattern (
  (t2tb38 (tb2t38 j))) )))

;; mem_times
  (assert
  (forall ((s (set b)) (t (set a)) (x b) (y a))
  (= (mem (tuple2 b1 a1) (Tuple2 b1 a1 (t2tb14 x) (t2tb2 y))
  (times a1 b1 (t2tb12 s) (t2tb1 t))) (and (mem2 x s) (mem1 y t)))))

;; mem_times
  (assert
  (forall ((b2 ty))
  (forall ((s (set b)) (t uni) (x b) (y uni))
  (= (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) y)
  (times b2 b1 (t2tb12 s) t)) (and (mem2 x s) (mem b2 y t))))))

(declare-fun t2tb441 ((set (tuple21 a (set (tuple21 a (tuple21 b c)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (set (tuple21 a (tuple21 b c))))))) (sort
  (set1 (tuple2 a1 (set1 (tuple2 a1 (tuple2 b1 c1))))) (t2tb441 x))))

(declare-fun tb2t441 (uni) (set (tuple21 a (set (tuple21 a (tuple21 b c))))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (set (tuple21 a (tuple21 b c)))))))
  (! (= (tb2t441 (t2tb441 i)) i) :pattern ((t2tb441 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (set1 (tuple2 a1 (tuple2 b1 c1))))) j)
     (= (t2tb441 (tb2t441 j)) j)) :pattern ((t2tb441 (tb2t441 j))) )))

(declare-fun t2tb442 ((tuple21 a (set (tuple21 a (tuple21 b c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (set (tuple21 a (tuple21 b c)))))) (sort
  (tuple2 a1 (set1 (tuple2 a1 (tuple2 b1 c1)))) (t2tb442 x))))

(declare-fun tb2t442 (uni) (tuple21 a (set (tuple21 a (tuple21 b c)))))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (set (tuple21 a (tuple21 b c))))))
  (! (= (tb2t442 (t2tb442 i)) i) :pattern ((t2tb442 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (set1 (tuple2 a1 (tuple2 b1 c1)))) j)
     (= (t2tb442 (tb2t442 j)) j)) :pattern ((t2tb442 (tb2t442 j))) )))

;; mem_times
  (assert
  (forall ((s (set a)) (t (set (set (tuple21 a (tuple21 b c))))) (x a)
  (y (set (tuple21 a (tuple21 b c)))))
  (= (mem (tuple2 a1 (set1 (tuple2 a1 (tuple2 b1 c1))))
  (Tuple2 a1 (set1 (tuple2 a1 (tuple2 b1 c1))) (t2tb2 x) (t2tb261 y))
  (times (set1 (tuple2 a1 (tuple2 b1 c1))) a1 (t2tb1 s) (t2tb327 t)))
  (and (mem1 x s) (mem15 y t)))))

(declare-fun t2tb443 ((set (tuple21 a (tuple21 a (tuple21 b c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (tuple21 a (tuple21 b c)))))) (sort
  (set1 (tuple2 a1 (tuple2 a1 (tuple2 b1 c1)))) (t2tb443 x))))

(declare-fun tb2t443 (uni) (set (tuple21 a (tuple21 a (tuple21 b c)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (tuple21 a (tuple21 b c))))))
  (! (= (tb2t443 (t2tb443 i)) i) :pattern ((t2tb443 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (tuple2 a1 (tuple2 b1 c1)))) j)
     (= (t2tb443 (tb2t443 j)) j)) :pattern ((t2tb443 (tb2t443 j))) )))

(declare-fun t2tb444 ((tuple21 a (tuple21 a (tuple21 b c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (tuple21 a (tuple21 b c))))) (sort
  (tuple2 a1 (tuple2 a1 (tuple2 b1 c1))) (t2tb444 x))))

(declare-fun tb2t444 (uni) (tuple21 a (tuple21 a (tuple21 b c))))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (tuple21 a (tuple21 b c)))))
  (! (= (tb2t444 (t2tb444 i)) i) :pattern ((t2tb444 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (tuple2 a1 (tuple2 b1 c1))) j)
     (= (t2tb444 (tb2t444 j)) j)) :pattern ((t2tb444 (tb2t444 j))) )))

;; mem_times
  (assert
  (forall ((s (set a)) (t (set (tuple21 a (tuple21 b c)))) (x a)
  (y (tuple21 a (tuple21 b c))))
  (= (mem (tuple2 a1 (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 a1 (tuple2 a1 (tuple2 b1 c1)) (t2tb2 x) (t2tb260 y))
  (times (tuple2 a1 (tuple2 b1 c1)) a1 (t2tb1 s) (t2tb261 t)))
  (and (mem1 x s) (mem14 y t)))))

(declare-fun t2tb254 ((set (tuple21 a (set (tuple21 a c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (set (tuple21 a c)))))) (sort
  (set1 (tuple2 a1 (set1 (tuple2 a1 c1)))) (t2tb254 x))))

(declare-fun tb2t254 (uni) (set (tuple21 a (set (tuple21 a c)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (set (tuple21 a c))))))
  (! (= (tb2t254 (t2tb254 i)) i) :pattern ((t2tb254 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (set1 (tuple2 a1 c1)))) j)
     (= (t2tb254 (tb2t254 j)) j)) :pattern ((t2tb254 (tb2t254 j))) )))

(declare-fun t2tb255 ((tuple21 a (set (tuple21 a c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (set (tuple21 a c))))) (sort
  (tuple2 a1 (set1 (tuple2 a1 c1))) (t2tb255 x))))

(declare-fun tb2t255 (uni) (tuple21 a (set (tuple21 a c))))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (set (tuple21 a c)))))
  (! (= (tb2t255 (t2tb255 i)) i) :pattern ((t2tb255 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (set1 (tuple2 a1 c1))) j)
     (= (t2tb255 (tb2t255 j)) j)) :pattern ((t2tb255 (tb2t255 j))) )))

;; mem_times
  (assert
  (forall ((s (set a)) (t (set (set (tuple21 a c)))) (x a) (y (set (tuple21 a
  c))))
  (= (mem (tuple2 a1 (set1 (tuple2 a1 c1)))
  (Tuple2 a1 (set1 (tuple2 a1 c1)) (t2tb2 x) (t2tb129 y))
  (times (set1 (tuple2 a1 c1)) a1 (t2tb1 s) (t2tb128 t)))
  (and (mem1 x s) (mem11 y t)))))

(declare-fun t2tb256 ((set (tuple21 a (tuple21 a c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (tuple21 a c))))) (sort
  (set1 (tuple2 a1 (tuple2 a1 c1))) (t2tb256 x))))

(declare-fun tb2t256 (uni) (set (tuple21 a (tuple21 a c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (tuple21 a c)))))
  (! (= (tb2t256 (t2tb256 i)) i) :pattern ((t2tb256 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (tuple2 a1 c1))) j)
     (= (t2tb256 (tb2t256 j)) j)) :pattern ((t2tb256 (tb2t256 j))) )))

(declare-fun t2tb257 ((tuple21 a (tuple21 a c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (tuple21 a c)))) (sort (tuple2 a1 (tuple2 a1 c1))
  (t2tb257 x))))

(declare-fun tb2t257 (uni) (tuple21 a (tuple21 a c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (tuple21 a c))))
  (! (= (tb2t257 (t2tb257 i)) i) :pattern ((t2tb257 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (tuple2 a1 c1)) j) (= (t2tb257 (tb2t257 j)) j)) :pattern (
  (t2tb257 (tb2t257 j))) )))

;; mem_times
  (assert
  (forall ((s (set a)) (t (set (tuple21 a c))) (x a) (y (tuple21 a c)))
  (= (mem (tuple2 a1 (tuple2 a1 c1))
  (Tuple2 a1 (tuple2 a1 c1) (t2tb2 x) (t2tb133 y))
  (times (tuple2 a1 c1) a1 (t2tb1 s) (t2tb129 t)))
  (and (mem1 x s) (mem10 y t)))))

;; mem_times
  (assert
  (forall ((s (set a)) (t (set (tuple21 b c))) (x a) (y (tuple21 b c)))
  (= (mem14 (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 y)))
  (times5 s t)) (and (mem1 x s) (mem8 y t)))))

;; mem_times
  (assert
  (forall ((s (set a)) (t (set c)) (x a) (y c))
  (= (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y))) (times4 s t))
  (and (mem1 x s) (mem7 y t)))))

(declare-fun t2tb39 ((set (tuple21 a (set (tuple21 a b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (set (tuple21 a b)))))) (sort
  (set1 (tuple2 a1 (set1 (tuple2 a1 b1)))) (t2tb39 x))))

(declare-fun tb2t39 (uni) (set (tuple21 a (set (tuple21 a b)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (set (tuple21 a b))))))
  (! (= (tb2t39 (t2tb39 i)) i) :pattern ((t2tb39 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (set1 (tuple2 a1 b1)))) j)
     (= (t2tb39 (tb2t39 j)) j)) :pattern ((t2tb39 (tb2t39 j))) )))

(declare-fun t2tb40 ((tuple21 a (set (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (set (tuple21 a b))))) (sort
  (tuple2 a1 (set1 (tuple2 a1 b1))) (t2tb40 x))))

(declare-fun tb2t40 (uni) (tuple21 a (set (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (set (tuple21 a b)))))
  (! (= (tb2t40 (t2tb40 i)) i) :pattern ((t2tb40 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (set1 (tuple2 a1 b1))) j)
     (= (t2tb40 (tb2t40 j)) j)) :pattern ((t2tb40 (tb2t40 j))) )))

;; mem_times
  (assert
  (forall ((s (set a)) (t (set (set (tuple21 a b)))) (x a) (y (set (tuple21 a
  b))))
  (= (mem (tuple2 a1 (set1 (tuple2 a1 b1)))
  (Tuple2 a1 (set1 (tuple2 a1 b1)) (t2tb2 x) (t2tb11 y))
  (times (set1 (tuple2 a1 b1)) a1 (t2tb1 s) (t2tb10 t)))
  (and (mem1 x s) (mem4 y t)))))

(declare-fun t2tb41 ((set (tuple21 a (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (tuple21 a b))))) (sort
  (set1 (tuple2 a1 (tuple2 a1 b1))) (t2tb41 x))))

(declare-fun tb2t41 (uni) (set (tuple21 a (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (tuple21 a b)))))
  (! (= (tb2t41 (t2tb41 i)) i) :pattern ((t2tb41 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (tuple2 a1 b1))) j)
     (= (t2tb41 (tb2t41 j)) j)) :pattern ((t2tb41 (tb2t41 j))) )))

(declare-fun t2tb42 ((tuple21 a (tuple21 a b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (tuple21 a b)))) (sort (tuple2 a1 (tuple2 a1 b1))
  (t2tb42 x))))

(declare-fun tb2t42 (uni) (tuple21 a (tuple21 a b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (tuple21 a b))))
  (! (= (tb2t42 (t2tb42 i)) i) :pattern ((t2tb42 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (tuple2 a1 b1)) j) (= (t2tb42 (tb2t42 j)) j)) :pattern (
  (t2tb42 (tb2t42 j))) )))

;; mem_times
  (assert
  (forall ((s (set a)) (t (set (tuple21 a b))) (x a) (y (tuple21 a b)))
  (= (mem (tuple2 a1 (tuple2 a1 b1))
  (Tuple2 a1 (tuple2 a1 b1) (t2tb2 x) (t2tb13 y))
  (times (tuple2 a1 b1) a1 (t2tb1 s) (t2tb11 t)))
  (and (mem1 x s) (mem3 y t)))))

;; mem_times
  (assert
  (forall ((s (set a)) (t (set b)) (x a) (y b))
  (= (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y))) (times2 s t))
  (and (mem1 x s) (mem2 y t)))))

(declare-fun t2tb4 ((set (tuple21 a a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a a)))) (sort (set1 (tuple2 a1 a1)) (t2tb4 x))))

(declare-fun tb2t4 (uni) (set (tuple21 a a)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a a))))
  (! (= (tb2t4 (t2tb4 i)) i) :pattern ((t2tb4 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 a1)) j) (= (t2tb4 (tb2t4 j)) j)) :pattern (
  (t2tb4 (tb2t4 j))) )))

(declare-fun t2tb5 ((tuple21 a a)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 a a))) (sort (tuple2 a1 a1) (t2tb5 x))))

(declare-fun tb2t5 (uni) (tuple21 a a))

;; BridgeL
  (assert
  (forall ((i (tuple21 a a)))
  (! (= (tb2t5 (t2tb5 i)) i) :pattern ((t2tb5 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 a1) j) (= (t2tb5 (tb2t5 j)) j)) :pattern ((t2tb5
                                                                    (tb2t5 j))) )))

;; mem_times
  (assert
  (forall ((s (set a)) (t (set a)) (x a) (y a))
  (= (mem (tuple2 a1 a1) (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y))
  (times a1 a1 (t2tb1 s) (t2tb1 t))) (and (mem1 x s) (mem1 y t)))))

;; mem_times
  (assert
  (forall ((b2 ty))
  (forall ((s (set a)) (t uni) (x a) (y uni))
  (= (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) y)
  (times b2 a1 (t2tb1 s) t)) (and (mem1 x s) (mem b2 y t))))))

;; mem_times
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (x uni) (y uni))
  (= (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) (times b2 a2 s t))
  (and (mem a2 x s) (mem b2 y t))))))

(declare-fun t2tb445 ((set (set (set (tuple21 a (tuple21 b c)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (set (tuple21 a (tuple21 b c))))))) (sort
  (set1 (set1 (set1 (tuple2 a1 (tuple2 b1 c1))))) (t2tb445 x))))

(declare-fun tb2t445 (uni) (set (set (set (tuple21 a (tuple21 b c))))))

;; BridgeL
  (assert
  (forall ((i (set (set (set (tuple21 a (tuple21 b c)))))))
  (! (= (tb2t445 (t2tb445 i)) i) :pattern ((t2tb445 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (set1 (tuple2 a1 (tuple2 b1 c1))))) j)
     (= (t2tb445 (tb2t445 j)) j)) :pattern ((t2tb445 (tb2t445 j))) )))

;; mem_power
  (assert
  (forall ((s (set (set (tuple21 a (tuple21 b c))))) (t (set (set (tuple21 a
  (tuple21 b c))))))
  (= (mem (set1 (set1 (tuple2 a1 (tuple2 b1 c1)))) (t2tb327 s)
  (power (set1 (tuple2 a1 (tuple2 b1 c1))) (t2tb327 t)))
  (forall ((x (set (tuple21 a (tuple21 b c))))) (=> (mem15 x s) (mem15 x t))))))

;; mem_power
  (assert
  (forall ((s (set (tuple21 a (tuple21 b c)))) (t (set (tuple21 a (tuple21 b
  c)))))
  (= (mem15 s (tb2t327 (power (tuple2 a1 (tuple2 b1 c1)) (t2tb261 t))))
  (forall ((x (tuple21 a (tuple21 b c)))) (=> (mem14 x s) (mem14 x t))))))

(declare-fun t2tb262 ((set (set (set (tuple21 a c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (set (tuple21 a c)))))) (sort
  (set1 (set1 (set1 (tuple2 a1 c1)))) (t2tb262 x))))

(declare-fun tb2t262 (uni) (set (set (set (tuple21 a c)))))

;; BridgeL
  (assert
  (forall ((i (set (set (set (tuple21 a c))))))
  (! (= (tb2t262 (t2tb262 i)) i) :pattern ((t2tb262 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (set1 (tuple2 a1 c1)))) j)
     (= (t2tb262 (tb2t262 j)) j)) :pattern ((t2tb262 (tb2t262 j))) )))

;; mem_power
  (assert
  (forall ((s (set (set (tuple21 a c)))) (t (set (set (tuple21 a c)))))
  (= (mem (set1 (set1 (tuple2 a1 c1))) (t2tb128 s)
  (power (set1 (tuple2 a1 c1)) (t2tb128 t)))
  (forall ((x (set (tuple21 a c)))) (=> (mem11 x s) (mem11 x t))))))

;; mem_power
  (assert
  (forall ((s (set (tuple21 a c))) (t (set (tuple21 a c))))
  (= (mem11 s (tb2t128 (power (tuple2 a1 c1) (t2tb129 t))))
  (forall ((x (tuple21 a c))) (=> (mem10 x s) (mem10 x t))))))

(declare-fun t2tb130 ((set (set (tuple21 b c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 b c))))) (sort (set1 (set1 (tuple2 b1 c1)))
  (t2tb130 x))))

(declare-fun tb2t130 (uni) (set (set (tuple21 b c))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 b c)))))
  (! (= (tb2t130 (t2tb130 i)) i) :pattern ((t2tb130 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 b1 c1))) j) (= (t2tb130 (tb2t130 j)) j)) :pattern (
  (t2tb130 (tb2t130 j))) )))

;; mem_power
  (assert
  (forall ((s (set (tuple21 b c))) (t (set (tuple21 b c))))
  (= (mem (set1 (tuple2 b1 c1)) (t2tb131 s)
  (power (tuple2 b1 c1) (t2tb131 t)))
  (forall ((x (tuple21 b c))) (=> (mem8 x s) (mem8 x t))))))

(declare-fun t2tb264 ((set (set c))) uni)

;; t2tb_sort
  (assert (forall ((x (set (set c)))) (sort (set1 (set1 c1)) (t2tb264 x))))

(declare-fun tb2t264 (uni) (set (set c)))

;; BridgeL
  (assert
  (forall ((i (set (set c))))
  (! (= (tb2t264 (t2tb264 i)) i) :pattern ((t2tb264 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 c1)) j) (= (t2tb264 (tb2t264 j)) j)) :pattern (
  (t2tb264 (tb2t264 j))) )))

;; mem_power
  (assert
  (forall ((s (set c)) (t (set c)))
  (= (mem (set1 c1) (t2tb132 s) (power c1 (t2tb132 t)))
  (forall ((x c)) (=> (mem7 x s) (mem7 x t))))))

(declare-fun t2tb43 ((set (set (set (tuple21 a b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (set (tuple21 a b)))))) (sort
  (set1 (set1 (set1 (tuple2 a1 b1)))) (t2tb43 x))))

(declare-fun tb2t43 (uni) (set (set (set (tuple21 a b)))))

;; BridgeL
  (assert
  (forall ((i (set (set (set (tuple21 a b))))))
  (! (= (tb2t43 (t2tb43 i)) i) :pattern ((t2tb43 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (set1 (tuple2 a1 b1)))) j)
     (= (t2tb43 (tb2t43 j)) j)) :pattern ((t2tb43 (tb2t43 j))) )))

;; mem_power
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set (set (tuple21 a b)))))
  (= (mem (set1 (set1 (tuple2 a1 b1))) (t2tb10 s)
  (power (set1 (tuple2 a1 b1)) (t2tb10 t)))
  (forall ((x (set (tuple21 a b)))) (=> (mem4 x s) (mem4 x t))))))

;; mem_power
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (tuple21 a b))))
  (= (mem4 s (tb2t10 (power (tuple2 a1 b1) (t2tb11 t))))
  (forall ((x (tuple21 a b))) (=> (mem3 x s) (mem3 x t))))))

(declare-fun t2tb44 ((set (set b))) uni)

;; t2tb_sort
  (assert (forall ((x (set (set b)))) (sort (set1 (set1 b1)) (t2tb44 x))))

(declare-fun tb2t44 (uni) (set (set b)))

;; BridgeL
  (assert
  (forall ((i (set (set b))))
  (! (= (tb2t44 (t2tb44 i)) i) :pattern ((t2tb44 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 b1)) j) (= (t2tb44 (tb2t44 j)) j)) :pattern (
  (t2tb44 (tb2t44 j))) )))

;; mem_power
  (assert
  (forall ((s (set b)) (t (set b)))
  (= (mem (set1 b1) (t2tb12 s) (power b1 (t2tb12 t)))
  (forall ((x b)) (=> (mem2 x s) (mem2 x t))))))

(declare-fun t2tb ((set (set a))) uni)

;; t2tb_sort
  (assert (forall ((x (set (set a)))) (sort (set1 (set1 a1)) (t2tb x))))

(declare-fun tb2t (uni) (set (set a)))

;; BridgeL
  (assert
  (forall ((i (set (set a)))) (! (= (tb2t (t2tb i)) i) :pattern ((t2tb i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 a1)) j) (= (t2tb (tb2t j)) j)) :pattern ((t2tb
                                                                    (tb2t j))) )))

;; mem_power
  (assert
  (forall ((s (set a)) (t (set a)))
  (= (mem (set1 a1) (t2tb1 s) (power a1 (t2tb1 t)))
  (forall ((x a)) (=> (mem1 x s) (mem1 x t))))))

;; mem_power
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t uni))
  (and
  (=> (mem (set1 a2) s (power a2 t))
  (forall ((x uni)) (=> (mem a2 x s) (mem a2 x t))))
  (=> (forall ((x uni)) (=> (sort a2 x) (=> (mem a2 x s) (mem a2 x t)))) (mem
  (set1 a2) s (power a2 t)))))))

;; mem_non_empty_power
  (assert
  (forall ((s (set (set (tuple21 a (tuple21 b c))))) (t (set (set (tuple21 a
  (tuple21 b c))))))
  (= (mem (set1 (set1 (tuple2 a1 (tuple2 b1 c1)))) (t2tb327 s)
  (non_empty_power (set1 (tuple2 a1 (tuple2 b1 c1))) (t2tb327 t)))
  (and
  (forall ((x (set (tuple21 a (tuple21 b c))))) (=> (mem15 x s) (mem15 x t)))
  (not (infix_eqeq (set1 (tuple2 a1 (tuple2 b1 c1))) (t2tb327 s)
  (empty (set1 (tuple2 a1 (tuple2 b1 c1))))))))))

;; mem_non_empty_power
  (assert
  (forall ((s (set (tuple21 a (tuple21 b c)))) (t (set (tuple21 a (tuple21 b
  c)))))
  (= (mem15 s
  (tb2t327 (non_empty_power (tuple2 a1 (tuple2 b1 c1)) (t2tb261 t))))
  (and (forall ((x (tuple21 a (tuple21 b c)))) (=> (mem14 x s) (mem14 x t)))
  (not (infix_eqeq (tuple2 a1 (tuple2 b1 c1)) (t2tb261 s)
  (empty (tuple2 a1 (tuple2 b1 c1)))))))))

;; mem_non_empty_power
  (assert
  (forall ((s (set (set (tuple21 a c)))) (t (set (set (tuple21 a c)))))
  (= (mem (set1 (set1 (tuple2 a1 c1))) (t2tb128 s)
  (non_empty_power (set1 (tuple2 a1 c1)) (t2tb128 t)))
  (and (forall ((x (set (tuple21 a c)))) (=> (mem11 x s) (mem11 x t)))
  (not (infix_eqeq (set1 (tuple2 a1 c1)) (t2tb128 s)
  (empty (set1 (tuple2 a1 c1)))))))))

;; mem_non_empty_power
  (assert
  (forall ((s (set (tuple21 a c))) (t (set (tuple21 a c))))
  (= (mem11 s (tb2t128 (non_empty_power (tuple2 a1 c1) (t2tb129 t))))
  (and (forall ((x (tuple21 a c))) (=> (mem10 x s) (mem10 x t)))
  (not (infix_eqeq (tuple2 a1 c1) (t2tb129 s) (empty (tuple2 a1 c1))))))))

;; mem_non_empty_power
  (assert
  (forall ((s (set (tuple21 b c))) (t (set (tuple21 b c))))
  (= (mem (set1 (tuple2 b1 c1)) (t2tb131 s)
  (non_empty_power (tuple2 b1 c1) (t2tb131 t)))
  (and (forall ((x (tuple21 b c))) (=> (mem8 x s) (mem8 x t)))
  (not (infix_eqeq (tuple2 b1 c1) (t2tb131 s) (empty (tuple2 b1 c1))))))))

;; mem_non_empty_power
  (assert
  (forall ((s (set c)) (t (set c)))
  (= (mem (set1 c1) (t2tb132 s) (non_empty_power c1 (t2tb132 t)))
  (and (forall ((x c)) (=> (mem7 x s) (mem7 x t)))
  (not (infix_eqeq c1 (t2tb132 s) (empty c1)))))))

;; mem_non_empty_power
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set (set (tuple21 a b)))))
  (= (mem (set1 (set1 (tuple2 a1 b1))) (t2tb10 s)
  (non_empty_power (set1 (tuple2 a1 b1)) (t2tb10 t)))
  (and (forall ((x (set (tuple21 a b)))) (=> (mem4 x s) (mem4 x t)))
  (not (infix_eqeq (set1 (tuple2 a1 b1)) (t2tb10 s)
  (empty (set1 (tuple2 a1 b1)))))))))

;; mem_non_empty_power
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (tuple21 a b))))
  (= (mem4 s (tb2t10 (non_empty_power (tuple2 a1 b1) (t2tb11 t))))
  (and (forall ((x (tuple21 a b))) (=> (mem3 x s) (mem3 x t)))
  (not (infix_eqeq (tuple2 a1 b1) (t2tb11 s) (empty (tuple2 a1 b1))))))))

;; mem_non_empty_power
  (assert
  (forall ((s (set b)) (t (set b)))
  (= (mem (set1 b1) (t2tb12 s) (non_empty_power b1 (t2tb12 t)))
  (and (forall ((x b)) (=> (mem2 x s) (mem2 x t)))
  (not (infix_eqeq b1 (t2tb12 s) (empty b1)))))))

;; mem_non_empty_power
  (assert
  (forall ((s (set a)) (t (set a)))
  (= (mem (set1 a1) (t2tb1 s) (non_empty_power a1 (t2tb1 t)))
  (and (forall ((x a)) (=> (mem1 x s) (mem1 x t)))
  (not (infix_eqeq a1 (t2tb1 s) (empty a1)))))))

;; mem_non_empty_power
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t uni))
  (and
  (=> (mem (set1 a2) s (non_empty_power a2 t))
  (and (forall ((x uni)) (=> (mem a2 x s) (mem a2 x t)))
  (not (infix_eqeq a2 s (empty a2)))))
  (=>
  (and (forall ((x uni)) (=> (sort a2 x) (=> (mem a2 x s) (mem a2 x t))))
  (not (infix_eqeq a2 s (empty a2)))) (mem (set1 a2) s
  (non_empty_power a2 t)))))))

(declare-fun choose (ty uni) uni)

;; choose_sort
  (assert (forall ((a2 ty)) (forall ((x uni)) (sort a2 (choose a2 x)))))

(declare-fun relation (ty ty uni uni) uni)

;; relation_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (set1 (tuple2 a2 b2)))
  (relation b2 a2 x x1)))))

;; mem_relation
  (assert
  (forall ((a2 ty))
  (forall ((u uni) (v (set (set (tuple21 a (tuple21 b c))))) (r uni))
  (and
  (=> (mem (set1 (tuple2 a2 (set1 (tuple2 a1 (tuple2 b1 c1))))) r
  (relation (set1 (tuple2 a1 (tuple2 b1 c1))) a2 u (t2tb327 v)))
  (forall ((x uni) (y (set (tuple21 a (tuple21 b c)))))
  (=> (mem (tuple2 a2 (set1 (tuple2 a1 (tuple2 b1 c1))))
  (Tuple2 a2 (set1 (tuple2 a1 (tuple2 b1 c1))) x (t2tb261 y)) r)
  (and (mem a2 x u) (mem15 y v)))))
  (=>
  (forall ((x uni) (y (set (tuple21 a (tuple21 b c)))))
  (=> (sort a2 x)
  (=> (mem (tuple2 a2 (set1 (tuple2 a1 (tuple2 b1 c1))))
  (Tuple2 a2 (set1 (tuple2 a1 (tuple2 b1 c1))) x (t2tb261 y)) r)
  (and (mem a2 x u) (mem15 y v))))) (mem
  (set1 (tuple2 a2 (set1 (tuple2 a1 (tuple2 b1 c1))))) r
  (relation (set1 (tuple2 a1 (tuple2 b1 c1))) a2 u (t2tb327 v))))))))

;; mem_relation
  (assert
  (forall ((a2 ty))
  (forall ((u uni) (v (set (tuple21 a (tuple21 b c)))) (r uni))
  (and
  (=> (mem (set1 (tuple2 a2 (tuple2 a1 (tuple2 b1 c1)))) r
  (relation (tuple2 a1 (tuple2 b1 c1)) a2 u (t2tb261 v)))
  (forall ((x uni) (y (tuple21 a (tuple21 b c))))
  (=> (mem (tuple2 a2 (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 a2 (tuple2 a1 (tuple2 b1 c1)) x (t2tb260 y)) r)
  (and (mem a2 x u) (mem14 y v)))))
  (=>
  (forall ((x uni) (y (tuple21 a (tuple21 b c))))
  (=> (sort a2 x)
  (=> (mem (tuple2 a2 (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 a2 (tuple2 a1 (tuple2 b1 c1)) x (t2tb260 y)) r)
  (and (mem a2 x u) (mem14 y v))))) (mem
  (set1 (tuple2 a2 (tuple2 a1 (tuple2 b1 c1)))) r
  (relation (tuple2 a1 (tuple2 b1 c1)) a2 u (t2tb261 v))))))))

;; mem_relation
  (assert
  (forall ((a2 ty))
  (forall ((u uni) (v (set (set (tuple21 a c)))) (r uni))
  (and
  (=> (mem (set1 (tuple2 a2 (set1 (tuple2 a1 c1)))) r
  (relation (set1 (tuple2 a1 c1)) a2 u (t2tb128 v)))
  (forall ((x uni) (y (set (tuple21 a c))))
  (=> (mem (tuple2 a2 (set1 (tuple2 a1 c1)))
  (Tuple2 a2 (set1 (tuple2 a1 c1)) x (t2tb129 y)) r)
  (and (mem a2 x u) (mem11 y v)))))
  (=>
  (forall ((x uni) (y (set (tuple21 a c))))
  (=> (sort a2 x)
  (=> (mem (tuple2 a2 (set1 (tuple2 a1 c1)))
  (Tuple2 a2 (set1 (tuple2 a1 c1)) x (t2tb129 y)) r)
  (and (mem a2 x u) (mem11 y v))))) (mem
  (set1 (tuple2 a2 (set1 (tuple2 a1 c1)))) r
  (relation (set1 (tuple2 a1 c1)) a2 u (t2tb128 v))))))))

;; mem_relation
  (assert
  (forall ((a2 ty))
  (forall ((u uni) (v (set (tuple21 a c))) (r uni))
  (and
  (=> (mem (set1 (tuple2 a2 (tuple2 a1 c1))) r
  (relation (tuple2 a1 c1) a2 u (t2tb129 v)))
  (forall ((x uni) (y (tuple21 a c)))
  (=> (mem (tuple2 a2 (tuple2 a1 c1))
  (Tuple2 a2 (tuple2 a1 c1) x (t2tb133 y)) r) (and (mem a2 x u) (mem10 y v)))))
  (=>
  (forall ((x uni) (y (tuple21 a c)))
  (=> (sort a2 x)
  (=> (mem (tuple2 a2 (tuple2 a1 c1))
  (Tuple2 a2 (tuple2 a1 c1) x (t2tb133 y)) r) (and (mem a2 x u) (mem10 y v)))))
  (mem (set1 (tuple2 a2 (tuple2 a1 c1))) r
  (relation (tuple2 a1 c1) a2 u (t2tb129 v))))))))

;; mem_relation
  (assert
  (forall ((a2 ty))
  (forall ((u uni) (v (set (tuple21 b c))) (r uni))
  (and
  (=> (mem (set1 (tuple2 a2 (tuple2 b1 c1))) r
  (relation (tuple2 b1 c1) a2 u (t2tb131 v)))
  (forall ((x uni) (y (tuple21 b c)))
  (=> (mem (tuple2 a2 (tuple2 b1 c1))
  (Tuple2 a2 (tuple2 b1 c1) x (t2tb134 y)) r) (and (mem a2 x u) (mem8 y v)))))
  (=>
  (forall ((x uni) (y (tuple21 b c)))
  (=> (sort a2 x)
  (=> (mem (tuple2 a2 (tuple2 b1 c1))
  (Tuple2 a2 (tuple2 b1 c1) x (t2tb134 y)) r) (and (mem a2 x u) (mem8 y v)))))
  (mem (set1 (tuple2 a2 (tuple2 b1 c1))) r
  (relation (tuple2 b1 c1) a2 u (t2tb131 v))))))))

;; mem_relation
  (assert
  (forall ((a2 ty))
  (forall ((u uni) (v (set c)) (r uni))
  (and
  (=> (mem (set1 (tuple2 a2 c1)) r (relation c1 a2 u (t2tb132 v)))
  (forall ((x uni) (y c))
  (=> (mem (tuple2 a2 c1) (Tuple2 a2 c1 x (t2tb135 y)) r)
  (and (mem a2 x u) (mem7 y v)))))
  (=>
  (forall ((x uni) (y c))
  (=> (sort a2 x)
  (=> (mem (tuple2 a2 c1) (Tuple2 a2 c1 x (t2tb135 y)) r)
  (and (mem a2 x u) (mem7 y v))))) (mem (set1 (tuple2 a2 c1)) r
  (relation c1 a2 u (t2tb132 v))))))))

;; mem_relation
  (assert
  (forall ((a2 ty))
  (forall ((u uni) (v (set (set (tuple21 a b)))) (r uni))
  (and
  (=> (mem (set1 (tuple2 a2 (set1 (tuple2 a1 b1)))) r
  (relation (set1 (tuple2 a1 b1)) a2 u (t2tb10 v)))
  (forall ((x uni) (y (set (tuple21 a b))))
  (=> (mem (tuple2 a2 (set1 (tuple2 a1 b1)))
  (Tuple2 a2 (set1 (tuple2 a1 b1)) x (t2tb11 y)) r)
  (and (mem a2 x u) (mem4 y v)))))
  (=>
  (forall ((x uni) (y (set (tuple21 a b))))
  (=> (sort a2 x)
  (=> (mem (tuple2 a2 (set1 (tuple2 a1 b1)))
  (Tuple2 a2 (set1 (tuple2 a1 b1)) x (t2tb11 y)) r)
  (and (mem a2 x u) (mem4 y v))))) (mem
  (set1 (tuple2 a2 (set1 (tuple2 a1 b1)))) r
  (relation (set1 (tuple2 a1 b1)) a2 u (t2tb10 v))))))))

;; mem_relation
  (assert
  (forall ((a2 ty))
  (forall ((u uni) (v (set (tuple21 a b))) (r uni))
  (and
  (=> (mem (set1 (tuple2 a2 (tuple2 a1 b1))) r
  (relation (tuple2 a1 b1) a2 u (t2tb11 v)))
  (forall ((x uni) (y (tuple21 a b)))
  (=> (mem (tuple2 a2 (tuple2 a1 b1)) (Tuple2 a2 (tuple2 a1 b1) x (t2tb13 y))
  r) (and (mem a2 x u) (mem3 y v)))))
  (=>
  (forall ((x uni) (y (tuple21 a b)))
  (=> (sort a2 x)
  (=> (mem (tuple2 a2 (tuple2 a1 b1)) (Tuple2 a2 (tuple2 a1 b1) x (t2tb13 y))
  r) (and (mem a2 x u) (mem3 y v))))) (mem (set1 (tuple2 a2 (tuple2 a1 b1)))
  r (relation (tuple2 a1 b1) a2 u (t2tb11 v))))))))

;; mem_relation
  (assert
  (forall ((a2 ty))
  (forall ((u uni) (v (set b)) (r uni))
  (and
  (=> (mem (set1 (tuple2 a2 b1)) r (relation b1 a2 u (t2tb12 v)))
  (forall ((x uni) (y b))
  (=> (mem (tuple2 a2 b1) (Tuple2 a2 b1 x (t2tb14 y)) r)
  (and (mem a2 x u) (mem2 y v)))))
  (=>
  (forall ((x uni) (y b))
  (=> (sort a2 x)
  (=> (mem (tuple2 a2 b1) (Tuple2 a2 b1 x (t2tb14 y)) r)
  (and (mem a2 x u) (mem2 y v))))) (mem (set1 (tuple2 a2 b1)) r
  (relation b1 a2 u (t2tb12 v))))))))

;; mem_relation
  (assert
  (forall ((a2 ty))
  (forall ((u uni) (v (set a)) (r uni))
  (and
  (=> (mem (set1 (tuple2 a2 a1)) r (relation a1 a2 u (t2tb1 v)))
  (forall ((x uni) (y a))
  (=> (mem (tuple2 a2 a1) (Tuple2 a2 a1 x (t2tb2 y)) r)
  (and (mem a2 x u) (mem1 y v)))))
  (=>
  (forall ((x uni) (y a))
  (=> (sort a2 x)
  (=> (mem (tuple2 a2 a1) (Tuple2 a2 a1 x (t2tb2 y)) r)
  (and (mem a2 x u) (mem1 y v))))) (mem (set1 (tuple2 a2 a1)) r
  (relation a1 a2 u (t2tb1 v))))))))

(declare-fun t2tb446 ((set (set (tuple21 (set (tuple21 a (tuple21 b c)))
  (set (tuple21 a (tuple21 b c))))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a (tuple21 b c)))
  (set (tuple21 a (tuple21 b c)))))))) (sort
  (set1
  (set1
  (tuple2 (set1 (tuple2 a1 (tuple2 b1 c1)))
  (set1 (tuple2 a1 (tuple2 b1 c1)))))) (t2tb446 x))))

(declare-fun tb2t446 (uni) (set (set (tuple21 (set (tuple21 a (tuple21 b c)))
  (set (tuple21 a (tuple21 b c)))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a (tuple21 b c)))
  (set (tuple21 a (tuple21 b c))))))))
  (! (= (tb2t446 (t2tb446 i)) i) :pattern ((t2tb446 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (set1
     (tuple2 (set1 (tuple2 a1 (tuple2 b1 c1)))
     (set1 (tuple2 a1 (tuple2 b1 c1)))))) j) (= (t2tb446 (tb2t446 j)) j)) :pattern (
  (t2tb446 (tb2t446 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a (tuple21 b c))))) (v (set (set (tuple21 a
  (tuple21 b c))))) (r (set (tuple21 (set (tuple21 a (tuple21 b c)))
  (set (tuple21 a (tuple21 b c)))))))
  (= (mem
  (set1
  (tuple2 (set1 (tuple2 a1 (tuple2 b1 c1)))
  (set1 (tuple2 a1 (tuple2 b1 c1))))) (t2tb373 r)
  (relation (set1 (tuple2 a1 (tuple2 b1 c1)))
  (set1 (tuple2 a1 (tuple2 b1 c1))) (t2tb327 u) (t2tb327 v)))
  (forall ((x (set (tuple21 a (tuple21 b c)))) (y (set (tuple21 a (tuple21 b
  c)))))
  (=> (mem
  (tuple2 (set1 (tuple2 a1 (tuple2 b1 c1)))
  (set1 (tuple2 a1 (tuple2 b1 c1))))
  (Tuple2 (set1 (tuple2 a1 (tuple2 b1 c1))) (set1 (tuple2 a1 (tuple2 b1 c1)))
  (t2tb261 x) (t2tb261 y)) (t2tb373 r)) (and (mem15 x u) (mem15 y v)))))))

(declare-fun t2tb447 ((set (set (tuple21 (set (tuple21 a (tuple21 b c)))
  (tuple21 a (tuple21 b c)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a (tuple21 b c))) (tuple21 a
  (tuple21 b c))))))) (sort
  (set1
  (set1
  (tuple2 (set1 (tuple2 a1 (tuple2 b1 c1))) (tuple2 a1 (tuple2 b1 c1)))))
  (t2tb447 x))))

(declare-fun tb2t447 (uni) (set (set (tuple21 (set (tuple21 a (tuple21 b c)))
  (tuple21 a (tuple21 b c))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a (tuple21 b c))) (tuple21 a
  (tuple21 b c)))))))
  (! (= (tb2t447 (t2tb447 i)) i) :pattern ((t2tb447 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (set1
     (tuple2 (set1 (tuple2 a1 (tuple2 b1 c1))) (tuple2 a1 (tuple2 b1 c1)))))
     j) (= (t2tb447 (tb2t447 j)) j)) :pattern ((t2tb447 (tb2t447 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a (tuple21 b c))))) (v (set (tuple21 a
  (tuple21 b c)))) (r (set (tuple21 (set (tuple21 a (tuple21 b c)))
  (tuple21 a (tuple21 b c))))))
  (= (mem
  (set1
  (tuple2 (set1 (tuple2 a1 (tuple2 b1 c1))) (tuple2 a1 (tuple2 b1 c1))))
  (t2tb375 r)
  (relation (tuple2 a1 (tuple2 b1 c1)) (set1 (tuple2 a1 (tuple2 b1 c1)))
  (t2tb327 u) (t2tb261 v)))
  (forall ((x (set (tuple21 a (tuple21 b c)))) (y (tuple21 a (tuple21 b c))))
  (=> (mem
  (tuple2 (set1 (tuple2 a1 (tuple2 b1 c1))) (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 (set1 (tuple2 a1 (tuple2 b1 c1))) (tuple2 a1 (tuple2 b1 c1))
  (t2tb261 x) (t2tb260 y)) (t2tb375 r)) (and (mem15 x u) (mem14 y v)))))))

(declare-fun t2tb448 ((set (set (tuple21 (set (tuple21 a (tuple21 b c)))
  (set (tuple21 a c)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a (tuple21 b c)))
  (set (tuple21 a c))))))) (sort
  (set1
  (set1 (tuple2 (set1 (tuple2 a1 (tuple2 b1 c1))) (set1 (tuple2 a1 c1)))))
  (t2tb448 x))))

(declare-fun tb2t448 (uni) (set (set (tuple21 (set (tuple21 a (tuple21 b c)))
  (set (tuple21 a c))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a (tuple21 b c)))
  (set (tuple21 a c)))))))
  (! (= (tb2t448 (t2tb448 i)) i) :pattern ((t2tb448 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (set1 (tuple2 (set1 (tuple2 a1 (tuple2 b1 c1))) (set1 (tuple2 a1 c1)))))
     j) (= (t2tb448 (tb2t448 j)) j)) :pattern ((t2tb448 (tb2t448 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a (tuple21 b c))))) (v (set (set (tuple21 a
  c)))) (r (set (tuple21 (set (tuple21 a (tuple21 b c))) (set (tuple21 a
  c))))))
  (= (mem
  (set1 (tuple2 (set1 (tuple2 a1 (tuple2 b1 c1))) (set1 (tuple2 a1 c1))))
  (t2tb377 r)
  (relation (set1 (tuple2 a1 c1)) (set1 (tuple2 a1 (tuple2 b1 c1)))
  (t2tb327 u) (t2tb128 v)))
  (forall ((x (set (tuple21 a (tuple21 b c)))) (y (set (tuple21 a c))))
  (=> (mem (tuple2 (set1 (tuple2 a1 (tuple2 b1 c1))) (set1 (tuple2 a1 c1)))
  (Tuple2 (set1 (tuple2 a1 (tuple2 b1 c1))) (set1 (tuple2 a1 c1)) (t2tb261 x)
  (t2tb129 y)) (t2tb377 r)) (and (mem15 x u) (mem11 y v)))))))

(declare-fun t2tb449 ((set (set (tuple21 (set (tuple21 a (tuple21 b c)))
  (tuple21 a c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a (tuple21 b c))) (tuple21 a
  c)))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 a1 (tuple2 b1 c1))) (tuple2 a1 c1))))
  (t2tb449 x))))

(declare-fun tb2t449 (uni) (set (set (tuple21 (set (tuple21 a (tuple21 b c)))
  (tuple21 a c)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a (tuple21 b c))) (tuple21 a
  c)))))) (! (= (tb2t449 (t2tb449 i)) i) :pattern ((t2tb449 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (set1 (tuple2 a1 (tuple2 b1 c1))) (tuple2 a1 c1))))
     j) (= (t2tb449 (tb2t449 j)) j)) :pattern ((t2tb449 (tb2t449 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a (tuple21 b c))))) (v (set (tuple21 a c)))
  (r (set (tuple21 (set (tuple21 a (tuple21 b c))) (tuple21 a c)))))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 (tuple2 b1 c1))) (tuple2 a1 c1)))
  (t2tb379 r)
  (relation (tuple2 a1 c1) (set1 (tuple2 a1 (tuple2 b1 c1))) (t2tb327 u)
  (t2tb129 v)))
  (forall ((x (set (tuple21 a (tuple21 b c)))) (y (tuple21 a c)))
  (=> (mem (tuple2 (set1 (tuple2 a1 (tuple2 b1 c1))) (tuple2 a1 c1))
  (Tuple2 (set1 (tuple2 a1 (tuple2 b1 c1))) (tuple2 a1 c1) (t2tb261 x)
  (t2tb133 y)) (t2tb379 r)) (and (mem15 x u) (mem10 y v)))))))

(declare-fun t2tb450 ((set (set (tuple21 (set (tuple21 a (tuple21 b c)))
  (tuple21 b c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a (tuple21 b c))) (tuple21 b
  c)))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 a1 (tuple2 b1 c1))) (tuple2 b1 c1))))
  (t2tb450 x))))

(declare-fun tb2t450 (uni) (set (set (tuple21 (set (tuple21 a (tuple21 b c)))
  (tuple21 b c)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a (tuple21 b c))) (tuple21 b
  c)))))) (! (= (tb2t450 (t2tb450 i)) i) :pattern ((t2tb450 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (set1 (tuple2 a1 (tuple2 b1 c1))) (tuple2 b1 c1))))
     j) (= (t2tb450 (tb2t450 j)) j)) :pattern ((t2tb450 (tb2t450 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a (tuple21 b c))))) (v (set (tuple21 b c)))
  (r (set (tuple21 (set (tuple21 a (tuple21 b c))) (tuple21 b c)))))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 (tuple2 b1 c1))) (tuple2 b1 c1)))
  (t2tb381 r)
  (relation (tuple2 b1 c1) (set1 (tuple2 a1 (tuple2 b1 c1))) (t2tb327 u)
  (t2tb131 v)))
  (forall ((x (set (tuple21 a (tuple21 b c)))) (y (tuple21 b c)))
  (=> (mem (tuple2 (set1 (tuple2 a1 (tuple2 b1 c1))) (tuple2 b1 c1))
  (Tuple2 (set1 (tuple2 a1 (tuple2 b1 c1))) (tuple2 b1 c1) (t2tb261 x)
  (t2tb134 y)) (t2tb381 r)) (and (mem15 x u) (mem8 y v)))))))

(declare-fun t2tb451 ((set (set (tuple21 (set (tuple21 a (tuple21 b c)))
  c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a (tuple21 b c))) c))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 a1 (tuple2 b1 c1))) c1))) (t2tb451 x))))

(declare-fun tb2t451 (uni) (set (set (tuple21 (set (tuple21 a (tuple21 b c)))
  c))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a (tuple21 b c))) c)))))
  (! (= (tb2t451 (t2tb451 i)) i) :pattern ((t2tb451 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 a1 (tuple2 b1 c1))) c1))) j)
     (= (t2tb451 (tb2t451 j)) j)) :pattern ((t2tb451 (tb2t451 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a (tuple21 b c))))) (v (set c))
  (r (set (tuple21 (set (tuple21 a (tuple21 b c))) c))))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 (tuple2 b1 c1))) c1)) (t2tb383 r)
  (relation c1 (set1 (tuple2 a1 (tuple2 b1 c1))) (t2tb327 u) (t2tb132 v)))
  (forall ((x (set (tuple21 a (tuple21 b c)))) (y c))
  (=> (mem (tuple2 (set1 (tuple2 a1 (tuple2 b1 c1))) c1)
  (Tuple2 (set1 (tuple2 a1 (tuple2 b1 c1))) c1 (t2tb261 x) (t2tb135 y))
  (t2tb383 r)) (and (mem15 x u) (mem7 y v)))))))

(declare-fun t2tb452 ((set (set (tuple21 (set (tuple21 a (tuple21 b c)))
  (set (tuple21 a b)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a (tuple21 b c)))
  (set (tuple21 a b))))))) (sort
  (set1
  (set1 (tuple2 (set1 (tuple2 a1 (tuple2 b1 c1))) (set1 (tuple2 a1 b1)))))
  (t2tb452 x))))

(declare-fun tb2t452 (uni) (set (set (tuple21 (set (tuple21 a (tuple21 b c)))
  (set (tuple21 a b))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a (tuple21 b c)))
  (set (tuple21 a b)))))))
  (! (= (tb2t452 (t2tb452 i)) i) :pattern ((t2tb452 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (set1 (tuple2 (set1 (tuple2 a1 (tuple2 b1 c1))) (set1 (tuple2 a1 b1)))))
     j) (= (t2tb452 (tb2t452 j)) j)) :pattern ((t2tb452 (tb2t452 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a (tuple21 b c))))) (v (set (set (tuple21 a
  b)))) (r (set (tuple21 (set (tuple21 a (tuple21 b c))) (set (tuple21 a
  b))))))
  (= (mem
  (set1 (tuple2 (set1 (tuple2 a1 (tuple2 b1 c1))) (set1 (tuple2 a1 b1))))
  (t2tb385 r)
  (relation (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 (tuple2 b1 c1)))
  (t2tb327 u) (t2tb10 v)))
  (forall ((x (set (tuple21 a (tuple21 b c)))) (y (set (tuple21 a b))))
  (=> (mem (tuple2 (set1 (tuple2 a1 (tuple2 b1 c1))) (set1 (tuple2 a1 b1)))
  (Tuple2 (set1 (tuple2 a1 (tuple2 b1 c1))) (set1 (tuple2 a1 b1)) (t2tb261 x)
  (t2tb11 y)) (t2tb385 r)) (and (mem15 x u) (mem4 y v)))))))

(declare-fun t2tb453 ((set (set (tuple21 (set (tuple21 a (tuple21 b c)))
  (tuple21 a b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a (tuple21 b c))) (tuple21 a
  b)))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 a1 (tuple2 b1 c1))) (tuple2 a1 b1))))
  (t2tb453 x))))

(declare-fun tb2t453 (uni) (set (set (tuple21 (set (tuple21 a (tuple21 b c)))
  (tuple21 a b)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a (tuple21 b c))) (tuple21 a
  b)))))) (! (= (tb2t453 (t2tb453 i)) i) :pattern ((t2tb453 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (set1 (tuple2 a1 (tuple2 b1 c1))) (tuple2 a1 b1))))
     j) (= (t2tb453 (tb2t453 j)) j)) :pattern ((t2tb453 (tb2t453 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a (tuple21 b c))))) (v (set (tuple21 a b)))
  (r (set (tuple21 (set (tuple21 a (tuple21 b c))) (tuple21 a b)))))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 (tuple2 b1 c1))) (tuple2 a1 b1)))
  (t2tb387 r)
  (relation (tuple2 a1 b1) (set1 (tuple2 a1 (tuple2 b1 c1))) (t2tb327 u)
  (t2tb11 v)))
  (forall ((x (set (tuple21 a (tuple21 b c)))) (y (tuple21 a b)))
  (=> (mem (tuple2 (set1 (tuple2 a1 (tuple2 b1 c1))) (tuple2 a1 b1))
  (Tuple2 (set1 (tuple2 a1 (tuple2 b1 c1))) (tuple2 a1 b1) (t2tb261 x)
  (t2tb13 y)) (t2tb387 r)) (and (mem15 x u) (mem3 y v)))))))

(declare-fun t2tb454 ((set (set (tuple21 (set (tuple21 a (tuple21 b c)))
  b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a (tuple21 b c))) b))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 a1 (tuple2 b1 c1))) b1))) (t2tb454 x))))

(declare-fun tb2t454 (uni) (set (set (tuple21 (set (tuple21 a (tuple21 b c)))
  b))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a (tuple21 b c))) b)))))
  (! (= (tb2t454 (t2tb454 i)) i) :pattern ((t2tb454 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 a1 (tuple2 b1 c1))) b1))) j)
     (= (t2tb454 (tb2t454 j)) j)) :pattern ((t2tb454 (tb2t454 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a (tuple21 b c))))) (v (set b))
  (r (set (tuple21 (set (tuple21 a (tuple21 b c))) b))))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 (tuple2 b1 c1))) b1)) (t2tb389 r)
  (relation b1 (set1 (tuple2 a1 (tuple2 b1 c1))) (t2tb327 u) (t2tb12 v)))
  (forall ((x (set (tuple21 a (tuple21 b c)))) (y b))
  (=> (mem (tuple2 (set1 (tuple2 a1 (tuple2 b1 c1))) b1)
  (Tuple2 (set1 (tuple2 a1 (tuple2 b1 c1))) b1 (t2tb261 x) (t2tb14 y))
  (t2tb389 r)) (and (mem15 x u) (mem2 y v)))))))

(declare-fun t2tb455 ((set (set (tuple21 (set (tuple21 a (tuple21 b c)))
  a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a (tuple21 b c))) a))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 a1 (tuple2 b1 c1))) a1))) (t2tb455 x))))

(declare-fun tb2t455 (uni) (set (set (tuple21 (set (tuple21 a (tuple21 b c)))
  a))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a (tuple21 b c))) a)))))
  (! (= (tb2t455 (t2tb455 i)) i) :pattern ((t2tb455 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 a1 (tuple2 b1 c1))) a1))) j)
     (= (t2tb455 (tb2t455 j)) j)) :pattern ((t2tb455 (tb2t455 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a (tuple21 b c))))) (v (set a))
  (r (set (tuple21 (set (tuple21 a (tuple21 b c))) a))))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 (tuple2 b1 c1))) a1)) (t2tb391 r)
  (relation a1 (set1 (tuple2 a1 (tuple2 b1 c1))) (t2tb327 u) (t2tb1 v)))
  (forall ((x (set (tuple21 a (tuple21 b c)))) (y a))
  (=> (mem (tuple2 (set1 (tuple2 a1 (tuple2 b1 c1))) a1)
  (Tuple2 (set1 (tuple2 a1 (tuple2 b1 c1))) a1 (t2tb261 x) (t2tb2 y))
  (t2tb391 r)) (and (mem15 x u) (mem1 y v)))))))

;; mem_relation
  (assert
  (forall ((b2 ty))
  (forall ((u (set (set (tuple21 a (tuple21 b c))))) (v uni) (r uni))
  (and
  (=> (mem (set1 (tuple2 (set1 (tuple2 a1 (tuple2 b1 c1))) b2)) r
  (relation b2 (set1 (tuple2 a1 (tuple2 b1 c1))) (t2tb327 u) v))
  (forall ((x (set (tuple21 a (tuple21 b c)))) (y uni))
  (=> (mem (tuple2 (set1 (tuple2 a1 (tuple2 b1 c1))) b2)
  (Tuple2 (set1 (tuple2 a1 (tuple2 b1 c1))) b2 (t2tb261 x) y) r)
  (and (mem15 x u) (mem b2 y v)))))
  (=>
  (forall ((x (set (tuple21 a (tuple21 b c)))) (y uni))
  (=> (sort b2 y)
  (=> (mem (tuple2 (set1 (tuple2 a1 (tuple2 b1 c1))) b2)
  (Tuple2 (set1 (tuple2 a1 (tuple2 b1 c1))) b2 (t2tb261 x) y) r)
  (and (mem15 x u) (mem b2 y v))))) (mem
  (set1 (tuple2 (set1 (tuple2 a1 (tuple2 b1 c1))) b2)) r
  (relation b2 (set1 (tuple2 a1 (tuple2 b1 c1))) (t2tb327 u) v)))))))

(declare-fun t2tb456 ((set (set (tuple21 (tuple21 a (tuple21 b c))
  (set (tuple21 a (tuple21 b c))))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a (tuple21 b c)) (set (tuple21 a
  (tuple21 b c)))))))) (sort
  (set1
  (set1
  (tuple2 (tuple2 a1 (tuple2 b1 c1)) (set1 (tuple2 a1 (tuple2 b1 c1))))))
  (t2tb456 x))))

(declare-fun tb2t456 (uni) (set (set (tuple21 (tuple21 a (tuple21 b c))
  (set (tuple21 a (tuple21 b c)))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a (tuple21 b c)) (set (tuple21 a
  (tuple21 b c))))))))
  (! (= (tb2t456 (t2tb456 i)) i) :pattern ((t2tb456 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (set1
     (tuple2 (tuple2 a1 (tuple2 b1 c1)) (set1 (tuple2 a1 (tuple2 b1 c1))))))
     j) (= (t2tb456 (tb2t456 j)) j)) :pattern ((t2tb456 (tb2t456 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a (tuple21 b c)))) (v (set (set (tuple21 a
  (tuple21 b c))))) (r (set (tuple21 (tuple21 a (tuple21 b c))
  (set (tuple21 a (tuple21 b c)))))))
  (= (mem
  (set1
  (tuple2 (tuple2 a1 (tuple2 b1 c1)) (set1 (tuple2 a1 (tuple2 b1 c1)))))
  (t2tb393 r)
  (relation (set1 (tuple2 a1 (tuple2 b1 c1))) (tuple2 a1 (tuple2 b1 c1))
  (t2tb261 u) (t2tb327 v)))
  (forall ((x (tuple21 a (tuple21 b c))) (y (set (tuple21 a (tuple21 b c)))))
  (=> (mem
  (tuple2 (tuple2 a1 (tuple2 b1 c1)) (set1 (tuple2 a1 (tuple2 b1 c1))))
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) (set1 (tuple2 a1 (tuple2 b1 c1)))
  (t2tb260 x) (t2tb261 y)) (t2tb393 r)) (and (mem14 x u) (mem15 y v)))))))

(declare-fun t2tb457 ((set (set (tuple21 (tuple21 a (tuple21 b c)) (tuple21 a
  (tuple21 b c)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a (tuple21 b c)) (tuple21 a
  (tuple21 b c))))))) (sort
  (set1
  (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 (tuple2 b1 c1)))))
  (t2tb457 x))))

(declare-fun tb2t457 (uni) (set (set (tuple21 (tuple21 a (tuple21 b c))
  (tuple21 a (tuple21 b c))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a (tuple21 b c)) (tuple21 a
  (tuple21 b c)))))))
  (! (= (tb2t457 (t2tb457 i)) i) :pattern ((t2tb457 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 (tuple2 b1 c1)))))
     j) (= (t2tb457 (tb2t457 j)) j)) :pattern ((t2tb457 (tb2t457 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a (tuple21 b c)))) (v (set (tuple21 a (tuple21 b
  c)))) (r (set (tuple21 (tuple21 a (tuple21 b c)) (tuple21 a (tuple21 b
  c))))))
  (= (mem
  (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 (tuple2 b1 c1))))
  (t2tb395 r)
  (relation (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 (tuple2 b1 c1)) (t2tb261 u)
  (t2tb261 v)))
  (forall ((x (tuple21 a (tuple21 b c))) (y (tuple21 a (tuple21 b c))))
  (=> (mem (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 (tuple2 b1 c1)) (t2tb260 x)
  (t2tb260 y)) (t2tb395 r)) (and (mem14 x u) (mem14 y v)))))))

(declare-fun t2tb458 ((set (set (tuple21 (tuple21 a (tuple21 b c))
  (set (tuple21 a c)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a (tuple21 b c)) (set (tuple21 a
  c))))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) (set1 (tuple2 a1 c1)))))
  (t2tb458 x))))

(declare-fun tb2t458 (uni) (set (set (tuple21 (tuple21 a (tuple21 b c))
  (set (tuple21 a c))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a (tuple21 b c)) (set (tuple21 a
  c))))))) (! (= (tb2t458 (t2tb458 i)) i) :pattern ((t2tb458 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) (set1 (tuple2 a1 c1)))))
     j) (= (t2tb458 (tb2t458 j)) j)) :pattern ((t2tb458 (tb2t458 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a (tuple21 b c)))) (v (set (set (tuple21 a c))))
  (r (set (tuple21 (tuple21 a (tuple21 b c)) (set (tuple21 a c))))))
  (= (mem (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) (set1 (tuple2 a1 c1))))
  (t2tb397 r)
  (relation (set1 (tuple2 a1 c1)) (tuple2 a1 (tuple2 b1 c1)) (t2tb261 u)
  (t2tb128 v)))
  (forall ((x (tuple21 a (tuple21 b c))) (y (set (tuple21 a c))))
  (=> (mem (tuple2 (tuple2 a1 (tuple2 b1 c1)) (set1 (tuple2 a1 c1)))
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) (set1 (tuple2 a1 c1)) (t2tb260 x)
  (t2tb129 y)) (t2tb397 r)) (and (mem14 x u) (mem11 y v)))))))

(declare-fun t2tb459 ((set (set (tuple21 (tuple21 a (tuple21 b c)) (tuple21 a
  c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a (tuple21 b c)) (tuple21 a c))))))
  (sort (set1 (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 c1))))
  (t2tb459 x))))

(declare-fun tb2t459 (uni) (set (set (tuple21 (tuple21 a (tuple21 b c))
  (tuple21 a c)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a (tuple21 b c)) (tuple21 a c))))))
  (! (= (tb2t459 (t2tb459 i)) i) :pattern ((t2tb459 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 c1)))) j)
     (= (t2tb459 (tb2t459 j)) j)) :pattern ((t2tb459 (tb2t459 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a (tuple21 b c)))) (v (set (tuple21 a c)))
  (r (set (tuple21 (tuple21 a (tuple21 b c)) (tuple21 a c)))))
  (= (mem (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 c1)))
  (t2tb399 r)
  (relation (tuple2 a1 c1) (tuple2 a1 (tuple2 b1 c1)) (t2tb261 u)
  (t2tb129 v)))
  (forall ((x (tuple21 a (tuple21 b c))) (y (tuple21 a c)))
  (=> (mem (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 c1))
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 c1) (t2tb260 x) (t2tb133 y))
  (t2tb399 r)) (and (mem14 x u) (mem10 y v)))))))

(declare-fun t2tb460 ((set (set (tuple21 (tuple21 a (tuple21 b c)) (tuple21 b
  c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a (tuple21 b c)) (tuple21 b c))))))
  (sort (set1 (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 b1 c1))))
  (t2tb460 x))))

(declare-fun tb2t460 (uni) (set (set (tuple21 (tuple21 a (tuple21 b c))
  (tuple21 b c)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a (tuple21 b c)) (tuple21 b c))))))
  (! (= (tb2t460 (t2tb460 i)) i) :pattern ((t2tb460 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 b1 c1)))) j)
     (= (t2tb460 (tb2t460 j)) j)) :pattern ((t2tb460 (tb2t460 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a (tuple21 b c)))) (v (set (tuple21 b c)))
  (r (set (tuple21 (tuple21 a (tuple21 b c)) (tuple21 b c)))))
  (= (mem (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 b1 c1)))
  (t2tb401 r)
  (relation (tuple2 b1 c1) (tuple2 a1 (tuple2 b1 c1)) (t2tb261 u)
  (t2tb131 v)))
  (forall ((x (tuple21 a (tuple21 b c))) (y (tuple21 b c)))
  (=> (mem (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 b1 c1))
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 b1 c1) (t2tb260 x) (t2tb134 y))
  (t2tb401 r)) (and (mem14 x u) (mem8 y v)))))))

(declare-fun t2tb461 ((set (set (tuple21 (tuple21 a (tuple21 b c)) c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a (tuple21 b c)) c))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) c1))) (t2tb461 x))))

(declare-fun tb2t461 (uni) (set (set (tuple21 (tuple21 a (tuple21 b c)) c))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a (tuple21 b c)) c)))))
  (! (= (tb2t461 (t2tb461 i)) i) :pattern ((t2tb461 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) c1))) j)
     (= (t2tb461 (tb2t461 j)) j)) :pattern ((t2tb461 (tb2t461 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a (tuple21 b c)))) (v (set c))
  (r (set (tuple21 (tuple21 a (tuple21 b c)) c))))
  (= (mem (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) c1)) (t2tb403 r)
  (relation c1 (tuple2 a1 (tuple2 b1 c1)) (t2tb261 u) (t2tb132 v)))
  (forall ((x (tuple21 a (tuple21 b c))) (y c))
  (=> (mem (tuple2 (tuple2 a1 (tuple2 b1 c1)) c1)
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) c1 (t2tb260 x) (t2tb135 y)) (t2tb403 r))
  (and (mem14 x u) (mem7 y v)))))))

(declare-fun t2tb462 ((set (set (tuple21 (tuple21 a (tuple21 b c))
  (set (tuple21 a b)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a (tuple21 b c)) (set (tuple21 a
  b))))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) (set1 (tuple2 a1 b1)))))
  (t2tb462 x))))

(declare-fun tb2t462 (uni) (set (set (tuple21 (tuple21 a (tuple21 b c))
  (set (tuple21 a b))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a (tuple21 b c)) (set (tuple21 a
  b))))))) (! (= (tb2t462 (t2tb462 i)) i) :pattern ((t2tb462 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) (set1 (tuple2 a1 b1)))))
     j) (= (t2tb462 (tb2t462 j)) j)) :pattern ((t2tb462 (tb2t462 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a (tuple21 b c)))) (v (set (set (tuple21 a b))))
  (r (set (tuple21 (tuple21 a (tuple21 b c)) (set (tuple21 a b))))))
  (= (mem (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) (set1 (tuple2 a1 b1))))
  (t2tb405 r)
  (relation (set1 (tuple2 a1 b1)) (tuple2 a1 (tuple2 b1 c1)) (t2tb261 u)
  (t2tb10 v)))
  (forall ((x (tuple21 a (tuple21 b c))) (y (set (tuple21 a b))))
  (=> (mem (tuple2 (tuple2 a1 (tuple2 b1 c1)) (set1 (tuple2 a1 b1)))
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) (set1 (tuple2 a1 b1)) (t2tb260 x)
  (t2tb11 y)) (t2tb405 r)) (and (mem14 x u) (mem4 y v)))))))

(declare-fun t2tb463 ((set (set (tuple21 (tuple21 a (tuple21 b c)) (tuple21 a
  b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a (tuple21 b c)) (tuple21 a b))))))
  (sort (set1 (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 b1))))
  (t2tb463 x))))

(declare-fun tb2t463 (uni) (set (set (tuple21 (tuple21 a (tuple21 b c))
  (tuple21 a b)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a (tuple21 b c)) (tuple21 a b))))))
  (! (= (tb2t463 (t2tb463 i)) i) :pattern ((t2tb463 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 b1)))) j)
     (= (t2tb463 (tb2t463 j)) j)) :pattern ((t2tb463 (tb2t463 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a (tuple21 b c)))) (v (set (tuple21 a b)))
  (r (set (tuple21 (tuple21 a (tuple21 b c)) (tuple21 a b)))))
  (= (mem (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 b1)))
  (t2tb407 r)
  (relation (tuple2 a1 b1) (tuple2 a1 (tuple2 b1 c1)) (t2tb261 u) (t2tb11 v)))
  (forall ((x (tuple21 a (tuple21 b c))) (y (tuple21 a b)))
  (=> (mem (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 b1))
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 b1) (t2tb260 x) (t2tb13 y))
  (t2tb407 r)) (and (mem14 x u) (mem3 y v)))))))

(declare-fun t2tb464 ((set (set (tuple21 (tuple21 a (tuple21 b c)) b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a (tuple21 b c)) b))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) b1))) (t2tb464 x))))

(declare-fun tb2t464 (uni) (set (set (tuple21 (tuple21 a (tuple21 b c)) b))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a (tuple21 b c)) b)))))
  (! (= (tb2t464 (t2tb464 i)) i) :pattern ((t2tb464 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) b1))) j)
     (= (t2tb464 (tb2t464 j)) j)) :pattern ((t2tb464 (tb2t464 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a (tuple21 b c)))) (v (set b))
  (r (set (tuple21 (tuple21 a (tuple21 b c)) b))))
  (= (mem (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) b1)) (t2tb409 r)
  (relation b1 (tuple2 a1 (tuple2 b1 c1)) (t2tb261 u) (t2tb12 v)))
  (forall ((x (tuple21 a (tuple21 b c))) (y b))
  (=> (mem (tuple2 (tuple2 a1 (tuple2 b1 c1)) b1)
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) b1 (t2tb260 x) (t2tb14 y)) (t2tb409 r))
  (and (mem14 x u) (mem2 y v)))))))

(declare-fun t2tb465 ((set (set (tuple21 (tuple21 a (tuple21 b c)) a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a (tuple21 b c)) a))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) a1))) (t2tb465 x))))

(declare-fun tb2t465 (uni) (set (set (tuple21 (tuple21 a (tuple21 b c)) a))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a (tuple21 b c)) a)))))
  (! (= (tb2t465 (t2tb465 i)) i) :pattern ((t2tb465 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) a1))) j)
     (= (t2tb465 (tb2t465 j)) j)) :pattern ((t2tb465 (tb2t465 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a (tuple21 b c)))) (v (set a))
  (r (set (tuple21 (tuple21 a (tuple21 b c)) a))))
  (= (mem (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) a1)) (t2tb411 r)
  (relation a1 (tuple2 a1 (tuple2 b1 c1)) (t2tb261 u) (t2tb1 v)))
  (forall ((x (tuple21 a (tuple21 b c))) (y a))
  (=> (mem (tuple2 (tuple2 a1 (tuple2 b1 c1)) a1)
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) a1 (t2tb260 x) (t2tb2 y)) (t2tb411 r))
  (and (mem14 x u) (mem1 y v)))))))

;; mem_relation
  (assert
  (forall ((b2 ty))
  (forall ((u (set (tuple21 a (tuple21 b c)))) (v uni) (r uni))
  (and
  (=> (mem (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) b2)) r
  (relation b2 (tuple2 a1 (tuple2 b1 c1)) (t2tb261 u) v))
  (forall ((x (tuple21 a (tuple21 b c))) (y uni))
  (=> (mem (tuple2 (tuple2 a1 (tuple2 b1 c1)) b2)
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) b2 (t2tb260 x) y) r)
  (and (mem14 x u) (mem b2 y v)))))
  (=>
  (forall ((x (tuple21 a (tuple21 b c))) (y uni))
  (=> (sort b2 y)
  (=> (mem (tuple2 (tuple2 a1 (tuple2 b1 c1)) b2)
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) b2 (t2tb260 x) y) r)
  (and (mem14 x u) (mem b2 y v))))) (mem
  (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) b2)) r
  (relation b2 (tuple2 a1 (tuple2 b1 c1)) (t2tb261 u) v)))))))

(declare-fun t2tb466 ((set (set (tuple21 (set (tuple21 a c)) (set (tuple21 a
  (tuple21 b c))))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a c)) (set (tuple21 a
  (tuple21 b c)))))))) (sort
  (set1
  (set1 (tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 a1 (tuple2 b1 c1))))))
  (t2tb466 x))))

(declare-fun tb2t466 (uni) (set (set (tuple21 (set (tuple21 a c))
  (set (tuple21 a (tuple21 b c)))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a c)) (set (tuple21 a
  (tuple21 b c))))))))
  (! (= (tb2t466 (t2tb466 i)) i) :pattern ((t2tb466 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (set1 (tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 a1 (tuple2 b1 c1))))))
     j) (= (t2tb466 (tb2t466 j)) j)) :pattern ((t2tb466 (tb2t466 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a c)))) (v (set (set (tuple21 a (tuple21 b
  c))))) (r (set (tuple21 (set (tuple21 a c)) (set (tuple21 a (tuple21 b
  c)))))))
  (= (mem
  (set1 (tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 a1 (tuple2 b1 c1)))))
  (t2tb413 r)
  (relation (set1 (tuple2 a1 (tuple2 b1 c1))) (set1 (tuple2 a1 c1))
  (t2tb128 u) (t2tb327 v)))
  (forall ((x (set (tuple21 a c))) (y (set (tuple21 a (tuple21 b c)))))
  (=> (mem (tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 a1 (tuple2 b1 c1))))
  (Tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 a1 (tuple2 b1 c1))) (t2tb129 x)
  (t2tb261 y)) (t2tb413 r)) (and (mem11 x u) (mem15 y v)))))))

(declare-fun t2tb467 ((set (set (tuple21 (set (tuple21 a c)) (tuple21 a
  (tuple21 b c)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a c)) (tuple21 a (tuple21 b
  c))))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 (tuple2 b1 c1)))))
  (t2tb467 x))))

(declare-fun tb2t467 (uni) (set (set (tuple21 (set (tuple21 a c)) (tuple21 a
  (tuple21 b c))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a c)) (tuple21 a (tuple21 b
  c))))))) (! (= (tb2t467 (t2tb467 i)) i) :pattern ((t2tb467 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 (tuple2 b1 c1)))))
     j) (= (t2tb467 (tb2t467 j)) j)) :pattern ((t2tb467 (tb2t467 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a c)))) (v (set (tuple21 a (tuple21 b c))))
  (r (set (tuple21 (set (tuple21 a c)) (tuple21 a (tuple21 b c))))))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 (tuple2 b1 c1))))
  (t2tb415 r)
  (relation (tuple2 a1 (tuple2 b1 c1)) (set1 (tuple2 a1 c1)) (t2tb128 u)
  (t2tb261 v)))
  (forall ((x (set (tuple21 a c))) (y (tuple21 a (tuple21 b c))))
  (=> (mem (tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 (tuple2 b1 c1)) (t2tb129 x)
  (t2tb260 y)) (t2tb415 r)) (and (mem11 x u) (mem14 y v)))))))

(declare-fun t2tb265 ((set (set (tuple21 (set (tuple21 a c)) (set (tuple21 a
  c)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a c)) (set (tuple21 a c)))))))
  (sort (set1 (set1 (tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 a1 c1)))))
  (t2tb265 x))))

(declare-fun tb2t265 (uni) (set (set (tuple21 (set (tuple21 a c))
  (set (tuple21 a c))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a c)) (set (tuple21 a c)))))))
  (! (= (tb2t265 (t2tb265 i)) i) :pattern ((t2tb265 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 a1 c1))))) j)
     (= (t2tb265 (tb2t265 j)) j)) :pattern ((t2tb265 (tb2t265 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a c)))) (v (set (set (tuple21 a c))))
  (r (set (tuple21 (set (tuple21 a c)) (set (tuple21 a c))))))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 a1 c1))))
  (t2tb136 r)
  (relation (set1 (tuple2 a1 c1)) (set1 (tuple2 a1 c1)) (t2tb128 u)
  (t2tb128 v)))
  (forall ((x (set (tuple21 a c))) (y (set (tuple21 a c))))
  (=> (mem (tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 a1 c1)))
  (Tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 a1 c1)) (t2tb129 x)
  (t2tb129 y)) (t2tb136 r)) (and (mem11 x u) (mem11 y v)))))))

(declare-fun t2tb266 ((set (set (tuple21 (set (tuple21 a c)) (tuple21 a
  c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a c)) (tuple21 a c)))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 c1)))) (t2tb266 x))))

(declare-fun tb2t266 (uni) (set (set (tuple21 (set (tuple21 a c)) (tuple21 a
  c)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a c)) (tuple21 a c))))))
  (! (= (tb2t266 (t2tb266 i)) i) :pattern ((t2tb266 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 c1)))) j)
     (= (t2tb266 (tb2t266 j)) j)) :pattern ((t2tb266 (tb2t266 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a c)))) (v (set (tuple21 a c)))
  (r (set (tuple21 (set (tuple21 a c)) (tuple21 a c)))))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 c1))) (t2tb138 r)
  (relation (tuple2 a1 c1) (set1 (tuple2 a1 c1)) (t2tb128 u) (t2tb129 v)))
  (forall ((x (set (tuple21 a c))) (y (tuple21 a c)))
  (=> (mem (tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 c1))
  (Tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 c1) (t2tb129 x) (t2tb133 y))
  (t2tb138 r)) (and (mem11 x u) (mem10 y v)))))))

(declare-fun t2tb268 ((set (set (tuple21 (set (tuple21 a c)) (tuple21 b
  c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a c)) (tuple21 b c)))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 a1 c1)) (tuple2 b1 c1)))) (t2tb268 x))))

(declare-fun tb2t268 (uni) (set (set (tuple21 (set (tuple21 a c)) (tuple21 b
  c)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a c)) (tuple21 b c))))))
  (! (= (tb2t268 (t2tb268 i)) i) :pattern ((t2tb268 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 a1 c1)) (tuple2 b1 c1)))) j)
     (= (t2tb268 (tb2t268 j)) j)) :pattern ((t2tb268 (tb2t268 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a c)))) (v (set (tuple21 b c)))
  (r (set (tuple21 (set (tuple21 a c)) (tuple21 b c)))))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 c1)) (tuple2 b1 c1))) (t2tb143 r)
  (relation (tuple2 b1 c1) (set1 (tuple2 a1 c1)) (t2tb128 u) (t2tb131 v)))
  (forall ((x (set (tuple21 a c))) (y (tuple21 b c)))
  (=> (mem (tuple2 (set1 (tuple2 a1 c1)) (tuple2 b1 c1))
  (Tuple2 (set1 (tuple2 a1 c1)) (tuple2 b1 c1) (t2tb129 x) (t2tb134 y))
  (t2tb143 r)) (and (mem11 x u) (mem8 y v)))))))

(declare-fun t2tb269 ((set (set (tuple21 (set (tuple21 a c)) c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a c)) c))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 a1 c1)) c1))) (t2tb269 x))))

(declare-fun tb2t269 (uni) (set (set (tuple21 (set (tuple21 a c)) c))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a c)) c)))))
  (! (= (tb2t269 (t2tb269 i)) i) :pattern ((t2tb269 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 a1 c1)) c1))) j)
     (= (t2tb269 (tb2t269 j)) j)) :pattern ((t2tb269 (tb2t269 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a c)))) (v (set c))
  (r (set (tuple21 (set (tuple21 a c)) c))))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 c1)) c1)) (t2tb144 r)
  (relation c1 (set1 (tuple2 a1 c1)) (t2tb128 u) (t2tb132 v)))
  (forall ((x (set (tuple21 a c))) (y c))
  (=> (mem (tuple2 (set1 (tuple2 a1 c1)) c1)
  (Tuple2 (set1 (tuple2 a1 c1)) c1 (t2tb129 x) (t2tb135 y)) (t2tb144 r))
  (and (mem11 x u) (mem7 y v)))))))

(declare-fun t2tb270 ((set (set (tuple21 (set (tuple21 a c)) (set (tuple21 a
  b)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a c)) (set (tuple21 a b)))))))
  (sort (set1 (set1 (tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 a1 b1)))))
  (t2tb270 x))))

(declare-fun tb2t270 (uni) (set (set (tuple21 (set (tuple21 a c))
  (set (tuple21 a b))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a c)) (set (tuple21 a b)))))))
  (! (= (tb2t270 (t2tb270 i)) i) :pattern ((t2tb270 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 a1 b1))))) j)
     (= (t2tb270 (tb2t270 j)) j)) :pattern ((t2tb270 (tb2t270 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a c)))) (v (set (set (tuple21 a b))))
  (r (set (tuple21 (set (tuple21 a c)) (set (tuple21 a b))))))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 a1 b1))))
  (t2tb146 r)
  (relation (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 c1)) (t2tb128 u)
  (t2tb10 v)))
  (forall ((x (set (tuple21 a c))) (y (set (tuple21 a b))))
  (=> (mem (tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 a1 b1)))
  (Tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 a1 b1)) (t2tb129 x) (t2tb11 y))
  (t2tb146 r)) (and (mem11 x u) (mem4 y v)))))))

(declare-fun t2tb271 ((set (set (tuple21 (set (tuple21 a c)) (tuple21 a
  b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a c)) (tuple21 a b)))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 b1)))) (t2tb271 x))))

(declare-fun tb2t271 (uni) (set (set (tuple21 (set (tuple21 a c)) (tuple21 a
  b)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a c)) (tuple21 a b))))))
  (! (= (tb2t271 (t2tb271 i)) i) :pattern ((t2tb271 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 b1)))) j)
     (= (t2tb271 (tb2t271 j)) j)) :pattern ((t2tb271 (tb2t271 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a c)))) (v (set (tuple21 a b)))
  (r (set (tuple21 (set (tuple21 a c)) (tuple21 a b)))))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 b1))) (t2tb148 r)
  (relation (tuple2 a1 b1) (set1 (tuple2 a1 c1)) (t2tb128 u) (t2tb11 v)))
  (forall ((x (set (tuple21 a c))) (y (tuple21 a b)))
  (=> (mem (tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 b1))
  (Tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 b1) (t2tb129 x) (t2tb13 y))
  (t2tb148 r)) (and (mem11 x u) (mem3 y v)))))))

(declare-fun t2tb272 ((set (set (tuple21 (set (tuple21 a c)) b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a c)) b))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 a1 c1)) b1))) (t2tb272 x))))

(declare-fun tb2t272 (uni) (set (set (tuple21 (set (tuple21 a c)) b))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a c)) b)))))
  (! (= (tb2t272 (t2tb272 i)) i) :pattern ((t2tb272 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 a1 c1)) b1))) j)
     (= (t2tb272 (tb2t272 j)) j)) :pattern ((t2tb272 (tb2t272 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a c)))) (v (set b))
  (r (set (tuple21 (set (tuple21 a c)) b))))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 c1)) b1)) (t2tb150 r)
  (relation b1 (set1 (tuple2 a1 c1)) (t2tb128 u) (t2tb12 v)))
  (forall ((x (set (tuple21 a c))) (y b))
  (=> (mem (tuple2 (set1 (tuple2 a1 c1)) b1)
  (Tuple2 (set1 (tuple2 a1 c1)) b1 (t2tb129 x) (t2tb14 y)) (t2tb150 r))
  (and (mem11 x u) (mem2 y v)))))))

(declare-fun t2tb273 ((set (set (tuple21 (set (tuple21 a c)) a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a c)) a))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 a1 c1)) a1))) (t2tb273 x))))

(declare-fun tb2t273 (uni) (set (set (tuple21 (set (tuple21 a c)) a))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a c)) a)))))
  (! (= (tb2t273 (t2tb273 i)) i) :pattern ((t2tb273 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 a1 c1)) a1))) j)
     (= (t2tb273 (tb2t273 j)) j)) :pattern ((t2tb273 (tb2t273 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a c)))) (v (set a))
  (r (set (tuple21 (set (tuple21 a c)) a))))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 c1)) a1)) (t2tb152 r)
  (relation a1 (set1 (tuple2 a1 c1)) (t2tb128 u) (t2tb1 v)))
  (forall ((x (set (tuple21 a c))) (y a))
  (=> (mem (tuple2 (set1 (tuple2 a1 c1)) a1)
  (Tuple2 (set1 (tuple2 a1 c1)) a1 (t2tb129 x) (t2tb2 y)) (t2tb152 r))
  (and (mem11 x u) (mem1 y v)))))))

;; mem_relation
  (assert
  (forall ((b2 ty))
  (forall ((u (set (set (tuple21 a c)))) (v uni) (r uni))
  (and
  (=> (mem (set1 (tuple2 (set1 (tuple2 a1 c1)) b2)) r
  (relation b2 (set1 (tuple2 a1 c1)) (t2tb128 u) v))
  (forall ((x (set (tuple21 a c))) (y uni))
  (=> (mem (tuple2 (set1 (tuple2 a1 c1)) b2)
  (Tuple2 (set1 (tuple2 a1 c1)) b2 (t2tb129 x) y) r)
  (and (mem11 x u) (mem b2 y v)))))
  (=>
  (forall ((x (set (tuple21 a c))) (y uni))
  (=> (sort b2 y)
  (=> (mem (tuple2 (set1 (tuple2 a1 c1)) b2)
  (Tuple2 (set1 (tuple2 a1 c1)) b2 (t2tb129 x) y) r)
  (and (mem11 x u) (mem b2 y v))))) (mem
  (set1 (tuple2 (set1 (tuple2 a1 c1)) b2)) r
  (relation b2 (set1 (tuple2 a1 c1)) (t2tb128 u) v)))))))

(declare-fun t2tb468 ((set (set (tuple21 (tuple21 a c) (set (tuple21 a
  (tuple21 b c))))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a c) (set (tuple21 a (tuple21 b
  c)))))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 c1) (set1 (tuple2 a1 (tuple2 b1 c1))))))
  (t2tb468 x))))

(declare-fun tb2t468 (uni) (set (set (tuple21 (tuple21 a c) (set (tuple21 a
  (tuple21 b c)))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a c) (set (tuple21 a (tuple21 b
  c)))))))) (! (= (tb2t468 (t2tb468 i)) i) :pattern ((t2tb468 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (tuple2 a1 c1) (set1 (tuple2 a1 (tuple2 b1 c1))))))
     j) (= (t2tb468 (tb2t468 j)) j)) :pattern ((t2tb468 (tb2t468 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a c))) (v (set (set (tuple21 a (tuple21 b c)))))
  (r (set (tuple21 (tuple21 a c) (set (tuple21 a (tuple21 b c)))))))
  (= (mem (set1 (tuple2 (tuple2 a1 c1) (set1 (tuple2 a1 (tuple2 b1 c1)))))
  (t2tb417 r)
  (relation (set1 (tuple2 a1 (tuple2 b1 c1))) (tuple2 a1 c1) (t2tb129 u)
  (t2tb327 v)))
  (forall ((x (tuple21 a c)) (y (set (tuple21 a (tuple21 b c)))))
  (=> (mem (tuple2 (tuple2 a1 c1) (set1 (tuple2 a1 (tuple2 b1 c1))))
  (Tuple2 (tuple2 a1 c1) (set1 (tuple2 a1 (tuple2 b1 c1))) (t2tb133 x)
  (t2tb261 y)) (t2tb417 r)) (and (mem10 x u) (mem15 y v)))))))

(declare-fun t2tb469 ((set (set (tuple21 (tuple21 a c) (tuple21 a (tuple21 b
  c)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a c) (tuple21 a (tuple21 b c)))))))
  (sort (set1 (set1 (tuple2 (tuple2 a1 c1) (tuple2 a1 (tuple2 b1 c1)))))
  (t2tb469 x))))

(declare-fun tb2t469 (uni) (set (set (tuple21 (tuple21 a c) (tuple21 a
  (tuple21 b c))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a c) (tuple21 a (tuple21 b c)))))))
  (! (= (tb2t469 (t2tb469 i)) i) :pattern ((t2tb469 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (tuple2 a1 c1) (tuple2 a1 (tuple2 b1 c1))))) j)
     (= (t2tb469 (tb2t469 j)) j)) :pattern ((t2tb469 (tb2t469 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a c))) (v (set (tuple21 a (tuple21 b c))))
  (r (set (tuple21 (tuple21 a c) (tuple21 a (tuple21 b c))))))
  (= (mem (set1 (tuple2 (tuple2 a1 c1) (tuple2 a1 (tuple2 b1 c1))))
  (t2tb419 r)
  (relation (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 c1) (t2tb129 u)
  (t2tb261 v)))
  (forall ((x (tuple21 a c)) (y (tuple21 a (tuple21 b c))))
  (=> (mem (tuple2 (tuple2 a1 c1) (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 (tuple2 a1 c1) (tuple2 a1 (tuple2 b1 c1)) (t2tb133 x) (t2tb260 y))
  (t2tb419 r)) (and (mem10 x u) (mem14 y v)))))))

(declare-fun t2tb274 ((set (set (tuple21 (tuple21 a c) (set (tuple21 a
  c)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a c) (set (tuple21 a c))))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 c1) (set1 (tuple2 a1 c1))))) (t2tb274 x))))

(declare-fun tb2t274 (uni) (set (set (tuple21 (tuple21 a c) (set (tuple21 a
  c))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a c) (set (tuple21 a c)))))))
  (! (= (tb2t274 (t2tb274 i)) i) :pattern ((t2tb274 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 c1) (set1 (tuple2 a1 c1))))) j)
     (= (t2tb274 (tb2t274 j)) j)) :pattern ((t2tb274 (tb2t274 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a c))) (v (set (set (tuple21 a c))))
  (r (set (tuple21 (tuple21 a c) (set (tuple21 a c))))))
  (= (mem (set1 (tuple2 (tuple2 a1 c1) (set1 (tuple2 a1 c1)))) (t2tb154 r)
  (relation (set1 (tuple2 a1 c1)) (tuple2 a1 c1) (t2tb129 u) (t2tb128 v)))
  (forall ((x (tuple21 a c)) (y (set (tuple21 a c))))
  (=> (mem (tuple2 (tuple2 a1 c1) (set1 (tuple2 a1 c1)))
  (Tuple2 (tuple2 a1 c1) (set1 (tuple2 a1 c1)) (t2tb133 x) (t2tb129 y))
  (t2tb154 r)) (and (mem10 x u) (mem11 y v)))))))

(declare-fun t2tb275 ((set (set (tuple21 (tuple21 a c) (tuple21 a c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a c) (tuple21 a c)))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 c1) (tuple2 a1 c1)))) (t2tb275 x))))

(declare-fun tb2t275 (uni) (set (set (tuple21 (tuple21 a c) (tuple21 a c)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a c) (tuple21 a c))))))
  (! (= (tb2t275 (t2tb275 i)) i) :pattern ((t2tb275 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 c1) (tuple2 a1 c1)))) j)
     (= (t2tb275 (tb2t275 j)) j)) :pattern ((t2tb275 (tb2t275 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a c))) (v (set (tuple21 a c)))
  (r (set (tuple21 (tuple21 a c) (tuple21 a c)))))
  (= (mem (set1 (tuple2 (tuple2 a1 c1) (tuple2 a1 c1))) (t2tb157 r)
  (relation (tuple2 a1 c1) (tuple2 a1 c1) (t2tb129 u) (t2tb129 v)))
  (forall ((x (tuple21 a c)) (y (tuple21 a c)))
  (=> (mem (tuple2 (tuple2 a1 c1) (tuple2 a1 c1))
  (Tuple2 (tuple2 a1 c1) (tuple2 a1 c1) (t2tb133 x) (t2tb133 y)) (t2tb157 r))
  (and (mem10 x u) (mem10 y v)))))))

(declare-fun t2tb277 ((set (set (tuple21 (tuple21 a c) (tuple21 b c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a c) (tuple21 b c)))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 c1) (tuple2 b1 c1)))) (t2tb277 x))))

(declare-fun tb2t277 (uni) (set (set (tuple21 (tuple21 a c) (tuple21 b c)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a c) (tuple21 b c))))))
  (! (= (tb2t277 (t2tb277 i)) i) :pattern ((t2tb277 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 c1) (tuple2 b1 c1)))) j)
     (= (t2tb277 (tb2t277 j)) j)) :pattern ((t2tb277 (tb2t277 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a c))) (v (set (tuple21 b c)))
  (r (set (tuple21 (tuple21 a c) (tuple21 b c)))))
  (= (mem (set1 (tuple2 (tuple2 a1 c1) (tuple2 b1 c1))) (t2tb160 r)
  (relation (tuple2 b1 c1) (tuple2 a1 c1) (t2tb129 u) (t2tb131 v)))
  (forall ((x (tuple21 a c)) (y (tuple21 b c)))
  (=> (mem (tuple2 (tuple2 a1 c1) (tuple2 b1 c1))
  (Tuple2 (tuple2 a1 c1) (tuple2 b1 c1) (t2tb133 x) (t2tb134 y)) (t2tb160 r))
  (and (mem10 x u) (mem8 y v)))))))

(declare-fun t2tb278 ((set (set (tuple21 (tuple21 a c) c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a c) c))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 c1) c1))) (t2tb278 x))))

(declare-fun tb2t278 (uni) (set (set (tuple21 (tuple21 a c) c))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a c) c)))))
  (! (= (tb2t278 (t2tb278 i)) i) :pattern ((t2tb278 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 c1) c1))) j)
     (= (t2tb278 (tb2t278 j)) j)) :pattern ((t2tb278 (tb2t278 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a c))) (v (set c)) (r (set (tuple21 (tuple21 a c)
  c))))
  (= (mem (set1 (tuple2 (tuple2 a1 c1) c1)) (t2tb162 r)
  (relation c1 (tuple2 a1 c1) (t2tb129 u) (t2tb132 v)))
  (forall ((x (tuple21 a c)) (y c))
  (=> (mem (tuple2 (tuple2 a1 c1) c1)
  (Tuple2 (tuple2 a1 c1) c1 (t2tb133 x) (t2tb135 y)) (t2tb162 r))
  (and (mem10 x u) (mem7 y v)))))))

(declare-fun t2tb279 ((set (set (tuple21 (tuple21 a c) (set (tuple21 a
  b)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a c) (set (tuple21 a b))))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 c1) (set1 (tuple2 a1 b1))))) (t2tb279 x))))

(declare-fun tb2t279 (uni) (set (set (tuple21 (tuple21 a c) (set (tuple21 a
  b))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a c) (set (tuple21 a b)))))))
  (! (= (tb2t279 (t2tb279 i)) i) :pattern ((t2tb279 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 c1) (set1 (tuple2 a1 b1))))) j)
     (= (t2tb279 (tb2t279 j)) j)) :pattern ((t2tb279 (tb2t279 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a c))) (v (set (set (tuple21 a b))))
  (r (set (tuple21 (tuple21 a c) (set (tuple21 a b))))))
  (= (mem (set1 (tuple2 (tuple2 a1 c1) (set1 (tuple2 a1 b1)))) (t2tb164 r)
  (relation (set1 (tuple2 a1 b1)) (tuple2 a1 c1) (t2tb129 u) (t2tb10 v)))
  (forall ((x (tuple21 a c)) (y (set (tuple21 a b))))
  (=> (mem (tuple2 (tuple2 a1 c1) (set1 (tuple2 a1 b1)))
  (Tuple2 (tuple2 a1 c1) (set1 (tuple2 a1 b1)) (t2tb133 x) (t2tb11 y))
  (t2tb164 r)) (and (mem10 x u) (mem4 y v)))))))

(declare-fun t2tb280 ((set (set (tuple21 (tuple21 a c) (tuple21 a b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a c) (tuple21 a b)))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 c1) (tuple2 a1 b1)))) (t2tb280 x))))

(declare-fun tb2t280 (uni) (set (set (tuple21 (tuple21 a c) (tuple21 a b)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a c) (tuple21 a b))))))
  (! (= (tb2t280 (t2tb280 i)) i) :pattern ((t2tb280 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 c1) (tuple2 a1 b1)))) j)
     (= (t2tb280 (tb2t280 j)) j)) :pattern ((t2tb280 (tb2t280 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a c))) (v (set (tuple21 a b)))
  (r (set (tuple21 (tuple21 a c) (tuple21 a b)))))
  (= (mem (set1 (tuple2 (tuple2 a1 c1) (tuple2 a1 b1))) (t2tb166 r)
  (relation (tuple2 a1 b1) (tuple2 a1 c1) (t2tb129 u) (t2tb11 v)))
  (forall ((x (tuple21 a c)) (y (tuple21 a b)))
  (=> (mem (tuple2 (tuple2 a1 c1) (tuple2 a1 b1))
  (Tuple2 (tuple2 a1 c1) (tuple2 a1 b1) (t2tb133 x) (t2tb13 y)) (t2tb166 r))
  (and (mem10 x u) (mem3 y v)))))))

(declare-fun t2tb281 ((set (set (tuple21 (tuple21 a c) b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a c) b))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 c1) b1))) (t2tb281 x))))

(declare-fun tb2t281 (uni) (set (set (tuple21 (tuple21 a c) b))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a c) b)))))
  (! (= (tb2t281 (t2tb281 i)) i) :pattern ((t2tb281 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 c1) b1))) j)
     (= (t2tb281 (tb2t281 j)) j)) :pattern ((t2tb281 (tb2t281 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a c))) (v (set b)) (r (set (tuple21 (tuple21 a c)
  b))))
  (= (mem (set1 (tuple2 (tuple2 a1 c1) b1)) (t2tb168 r)
  (relation b1 (tuple2 a1 c1) (t2tb129 u) (t2tb12 v)))
  (forall ((x (tuple21 a c)) (y b))
  (=> (mem (tuple2 (tuple2 a1 c1) b1)
  (Tuple2 (tuple2 a1 c1) b1 (t2tb133 x) (t2tb14 y)) (t2tb168 r))
  (and (mem10 x u) (mem2 y v)))))))

(declare-fun t2tb282 ((set (set (tuple21 (tuple21 a c) a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a c) a))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 c1) a1))) (t2tb282 x))))

(declare-fun tb2t282 (uni) (set (set (tuple21 (tuple21 a c) a))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a c) a)))))
  (! (= (tb2t282 (t2tb282 i)) i) :pattern ((t2tb282 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 c1) a1))) j)
     (= (t2tb282 (tb2t282 j)) j)) :pattern ((t2tb282 (tb2t282 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a c))) (v (set a)) (r (set (tuple21 (tuple21 a c)
  a))))
  (= (mem (set1 (tuple2 (tuple2 a1 c1) a1)) (t2tb170 r)
  (relation a1 (tuple2 a1 c1) (t2tb129 u) (t2tb1 v)))
  (forall ((x (tuple21 a c)) (y a))
  (=> (mem (tuple2 (tuple2 a1 c1) a1)
  (Tuple2 (tuple2 a1 c1) a1 (t2tb133 x) (t2tb2 y)) (t2tb170 r))
  (and (mem10 x u) (mem1 y v)))))))

;; mem_relation
  (assert
  (forall ((b2 ty))
  (forall ((u (set (tuple21 a c))) (v uni) (r uni))
  (and
  (=> (mem (set1 (tuple2 (tuple2 a1 c1) b2)) r
  (relation b2 (tuple2 a1 c1) (t2tb129 u) v))
  (forall ((x (tuple21 a c)) (y uni))
  (=> (mem (tuple2 (tuple2 a1 c1) b2)
  (Tuple2 (tuple2 a1 c1) b2 (t2tb133 x) y) r) (and (mem10 x u) (mem b2 y v)))))
  (=>
  (forall ((x (tuple21 a c)) (y uni))
  (=> (sort b2 y)
  (=> (mem (tuple2 (tuple2 a1 c1) b2)
  (Tuple2 (tuple2 a1 c1) b2 (t2tb133 x) y) r) (and (mem10 x u) (mem b2 y v)))))
  (mem (set1 (tuple2 (tuple2 a1 c1) b2)) r
  (relation b2 (tuple2 a1 c1) (t2tb129 u) v)))))))

(declare-fun t2tb470 ((set (set (tuple21 (tuple21 b c) (set (tuple21 a
  (tuple21 b c))))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 b c) (set (tuple21 a (tuple21 b
  c)))))))) (sort
  (set1 (set1 (tuple2 (tuple2 b1 c1) (set1 (tuple2 a1 (tuple2 b1 c1))))))
  (t2tb470 x))))

(declare-fun tb2t470 (uni) (set (set (tuple21 (tuple21 b c) (set (tuple21 a
  (tuple21 b c)))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 b c) (set (tuple21 a (tuple21 b
  c)))))))) (! (= (tb2t470 (t2tb470 i)) i) :pattern ((t2tb470 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (tuple2 b1 c1) (set1 (tuple2 a1 (tuple2 b1 c1))))))
     j) (= (t2tb470 (tb2t470 j)) j)) :pattern ((t2tb470 (tb2t470 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 b c))) (v (set (set (tuple21 a (tuple21 b c)))))
  (r (set (tuple21 (tuple21 b c) (set (tuple21 a (tuple21 b c)))))))
  (= (mem (set1 (tuple2 (tuple2 b1 c1) (set1 (tuple2 a1 (tuple2 b1 c1)))))
  (t2tb421 r)
  (relation (set1 (tuple2 a1 (tuple2 b1 c1))) (tuple2 b1 c1) (t2tb131 u)
  (t2tb327 v)))
  (forall ((x (tuple21 b c)) (y (set (tuple21 a (tuple21 b c)))))
  (=> (mem (tuple2 (tuple2 b1 c1) (set1 (tuple2 a1 (tuple2 b1 c1))))
  (Tuple2 (tuple2 b1 c1) (set1 (tuple2 a1 (tuple2 b1 c1))) (t2tb134 x)
  (t2tb261 y)) (t2tb421 r)) (and (mem8 x u) (mem15 y v)))))))

(declare-fun t2tb471 ((set (set (tuple21 (tuple21 b c) (tuple21 a (tuple21 b
  c)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 b c) (tuple21 a (tuple21 b c)))))))
  (sort (set1 (set1 (tuple2 (tuple2 b1 c1) (tuple2 a1 (tuple2 b1 c1)))))
  (t2tb471 x))))

(declare-fun tb2t471 (uni) (set (set (tuple21 (tuple21 b c) (tuple21 a
  (tuple21 b c))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 b c) (tuple21 a (tuple21 b c)))))))
  (! (= (tb2t471 (t2tb471 i)) i) :pattern ((t2tb471 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (tuple2 b1 c1) (tuple2 a1 (tuple2 b1 c1))))) j)
     (= (t2tb471 (tb2t471 j)) j)) :pattern ((t2tb471 (tb2t471 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 b c))) (v (set (tuple21 a (tuple21 b c))))
  (r (set (tuple21 (tuple21 b c) (tuple21 a (tuple21 b c))))))
  (= (mem (set1 (tuple2 (tuple2 b1 c1) (tuple2 a1 (tuple2 b1 c1))))
  (t2tb423 r)
  (relation (tuple2 a1 (tuple2 b1 c1)) (tuple2 b1 c1) (t2tb131 u)
  (t2tb261 v)))
  (forall ((x (tuple21 b c)) (y (tuple21 a (tuple21 b c))))
  (=> (mem (tuple2 (tuple2 b1 c1) (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 (tuple2 b1 c1) (tuple2 a1 (tuple2 b1 c1)) (t2tb134 x) (t2tb260 y))
  (t2tb423 r)) (and (mem8 x u) (mem14 y v)))))))

(declare-fun t2tb292 ((set (set (tuple21 (tuple21 b c) (set (tuple21 a
  c)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 b c) (set (tuple21 a c))))))) (sort
  (set1 (set1 (tuple2 (tuple2 b1 c1) (set1 (tuple2 a1 c1))))) (t2tb292 x))))

(declare-fun tb2t292 (uni) (set (set (tuple21 (tuple21 b c) (set (tuple21 a
  c))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 b c) (set (tuple21 a c)))))))
  (! (= (tb2t292 (t2tb292 i)) i) :pattern ((t2tb292 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 b1 c1) (set1 (tuple2 a1 c1))))) j)
     (= (t2tb292 (tb2t292 j)) j)) :pattern ((t2tb292 (tb2t292 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 b c))) (v (set (set (tuple21 a c))))
  (r (set (tuple21 (tuple21 b c) (set (tuple21 a c))))))
  (= (mem (set1 (tuple2 (tuple2 b1 c1) (set1 (tuple2 a1 c1)))) (t2tb190 r)
  (relation (set1 (tuple2 a1 c1)) (tuple2 b1 c1) (t2tb131 u) (t2tb128 v)))
  (forall ((x (tuple21 b c)) (y (set (tuple21 a c))))
  (=> (mem (tuple2 (tuple2 b1 c1) (set1 (tuple2 a1 c1)))
  (Tuple2 (tuple2 b1 c1) (set1 (tuple2 a1 c1)) (t2tb134 x) (t2tb129 y))
  (t2tb190 r)) (and (mem8 x u) (mem11 y v)))))))

(declare-fun t2tb293 ((set (set (tuple21 (tuple21 b c) (tuple21 a c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 b c) (tuple21 a c)))))) (sort
  (set1 (set1 (tuple2 (tuple2 b1 c1) (tuple2 a1 c1)))) (t2tb293 x))))

(declare-fun tb2t293 (uni) (set (set (tuple21 (tuple21 b c) (tuple21 a c)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 b c) (tuple21 a c))))))
  (! (= (tb2t293 (t2tb293 i)) i) :pattern ((t2tb293 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 b1 c1) (tuple2 a1 c1)))) j)
     (= (t2tb293 (tb2t293 j)) j)) :pattern ((t2tb293 (tb2t293 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 b c))) (v (set (tuple21 a c)))
  (r (set (tuple21 (tuple21 b c) (tuple21 a c)))))
  (= (mem (set1 (tuple2 (tuple2 b1 c1) (tuple2 a1 c1))) (t2tb192 r)
  (relation (tuple2 a1 c1) (tuple2 b1 c1) (t2tb131 u) (t2tb129 v)))
  (forall ((x (tuple21 b c)) (y (tuple21 a c)))
  (=> (mem (tuple2 (tuple2 b1 c1) (tuple2 a1 c1))
  (Tuple2 (tuple2 b1 c1) (tuple2 a1 c1) (t2tb134 x) (t2tb133 y)) (t2tb192 r))
  (and (mem8 x u) (mem10 y v)))))))

(declare-fun t2tb295 ((set (set (tuple21 (tuple21 b c) (tuple21 b c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 b c) (tuple21 b c)))))) (sort
  (set1 (set1 (tuple2 (tuple2 b1 c1) (tuple2 b1 c1)))) (t2tb295 x))))

(declare-fun tb2t295 (uni) (set (set (tuple21 (tuple21 b c) (tuple21 b c)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 b c) (tuple21 b c))))))
  (! (= (tb2t295 (t2tb295 i)) i) :pattern ((t2tb295 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 b1 c1) (tuple2 b1 c1)))) j)
     (= (t2tb295 (tb2t295 j)) j)) :pattern ((t2tb295 (tb2t295 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 b c))) (v (set (tuple21 b c)))
  (r (set (tuple21 (tuple21 b c) (tuple21 b c)))))
  (= (mem (set1 (tuple2 (tuple2 b1 c1) (tuple2 b1 c1))) (t2tb196 r)
  (relation (tuple2 b1 c1) (tuple2 b1 c1) (t2tb131 u) (t2tb131 v)))
  (forall ((x (tuple21 b c)) (y (tuple21 b c)))
  (=> (mem (tuple2 (tuple2 b1 c1) (tuple2 b1 c1))
  (Tuple2 (tuple2 b1 c1) (tuple2 b1 c1) (t2tb134 x) (t2tb134 y)) (t2tb196 r))
  (and (mem8 x u) (mem8 y v)))))))

(declare-fun t2tb296 ((set (set (tuple21 (tuple21 b c) c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 b c) c))))) (sort
  (set1 (set1 (tuple2 (tuple2 b1 c1) c1))) (t2tb296 x))))

(declare-fun tb2t296 (uni) (set (set (tuple21 (tuple21 b c) c))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 b c) c)))))
  (! (= (tb2t296 (t2tb296 i)) i) :pattern ((t2tb296 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 b1 c1) c1))) j)
     (= (t2tb296 (tb2t296 j)) j)) :pattern ((t2tb296 (tb2t296 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 b c))) (v (set c)) (r (set (tuple21 (tuple21 b c)
  c))))
  (= (mem (set1 (tuple2 (tuple2 b1 c1) c1)) (t2tb198 r)
  (relation c1 (tuple2 b1 c1) (t2tb131 u) (t2tb132 v)))
  (forall ((x (tuple21 b c)) (y c))
  (=> (mem (tuple2 (tuple2 b1 c1) c1)
  (Tuple2 (tuple2 b1 c1) c1 (t2tb134 x) (t2tb135 y)) (t2tb198 r))
  (and (mem8 x u) (mem7 y v)))))))

(declare-fun t2tb297 ((set (set (tuple21 (tuple21 b c) (set (tuple21 a
  b)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 b c) (set (tuple21 a b))))))) (sort
  (set1 (set1 (tuple2 (tuple2 b1 c1) (set1 (tuple2 a1 b1))))) (t2tb297 x))))

(declare-fun tb2t297 (uni) (set (set (tuple21 (tuple21 b c) (set (tuple21 a
  b))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 b c) (set (tuple21 a b)))))))
  (! (= (tb2t297 (t2tb297 i)) i) :pattern ((t2tb297 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 b1 c1) (set1 (tuple2 a1 b1))))) j)
     (= (t2tb297 (tb2t297 j)) j)) :pattern ((t2tb297 (tb2t297 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 b c))) (v (set (set (tuple21 a b))))
  (r (set (tuple21 (tuple21 b c) (set (tuple21 a b))))))
  (= (mem (set1 (tuple2 (tuple2 b1 c1) (set1 (tuple2 a1 b1)))) (t2tb201 r)
  (relation (set1 (tuple2 a1 b1)) (tuple2 b1 c1) (t2tb131 u) (t2tb10 v)))
  (forall ((x (tuple21 b c)) (y (set (tuple21 a b))))
  (=> (mem (tuple2 (tuple2 b1 c1) (set1 (tuple2 a1 b1)))
  (Tuple2 (tuple2 b1 c1) (set1 (tuple2 a1 b1)) (t2tb134 x) (t2tb11 y))
  (t2tb201 r)) (and (mem8 x u) (mem4 y v)))))))

(declare-fun t2tb298 ((set (set (tuple21 (tuple21 b c) (tuple21 a b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 b c) (tuple21 a b)))))) (sort
  (set1 (set1 (tuple2 (tuple2 b1 c1) (tuple2 a1 b1)))) (t2tb298 x))))

(declare-fun tb2t298 (uni) (set (set (tuple21 (tuple21 b c) (tuple21 a b)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 b c) (tuple21 a b))))))
  (! (= (tb2t298 (t2tb298 i)) i) :pattern ((t2tb298 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 b1 c1) (tuple2 a1 b1)))) j)
     (= (t2tb298 (tb2t298 j)) j)) :pattern ((t2tb298 (tb2t298 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 b c))) (v (set (tuple21 a b)))
  (r (set (tuple21 (tuple21 b c) (tuple21 a b)))))
  (= (mem (set1 (tuple2 (tuple2 b1 c1) (tuple2 a1 b1))) (t2tb202 r)
  (relation (tuple2 a1 b1) (tuple2 b1 c1) (t2tb131 u) (t2tb11 v)))
  (forall ((x (tuple21 b c)) (y (tuple21 a b)))
  (=> (mem (tuple2 (tuple2 b1 c1) (tuple2 a1 b1))
  (Tuple2 (tuple2 b1 c1) (tuple2 a1 b1) (t2tb134 x) (t2tb13 y)) (t2tb202 r))
  (and (mem8 x u) (mem3 y v)))))))

(declare-fun t2tb299 ((set (set (tuple21 (tuple21 b c) b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 b c) b))))) (sort
  (set1 (set1 (tuple2 (tuple2 b1 c1) b1))) (t2tb299 x))))

(declare-fun tb2t299 (uni) (set (set (tuple21 (tuple21 b c) b))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 b c) b)))))
  (! (= (tb2t299 (t2tb299 i)) i) :pattern ((t2tb299 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 b1 c1) b1))) j)
     (= (t2tb299 (tb2t299 j)) j)) :pattern ((t2tb299 (tb2t299 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 b c))) (v (set b)) (r (set (tuple21 (tuple21 b c)
  b))))
  (= (mem (set1 (tuple2 (tuple2 b1 c1) b1)) (t2tb204 r)
  (relation b1 (tuple2 b1 c1) (t2tb131 u) (t2tb12 v)))
  (forall ((x (tuple21 b c)) (y b))
  (=> (mem (tuple2 (tuple2 b1 c1) b1)
  (Tuple2 (tuple2 b1 c1) b1 (t2tb134 x) (t2tb14 y)) (t2tb204 r))
  (and (mem8 x u) (mem2 y v)))))))

(declare-fun t2tb300 ((set (set (tuple21 (tuple21 b c) a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 b c) a))))) (sort
  (set1 (set1 (tuple2 (tuple2 b1 c1) a1))) (t2tb300 x))))

(declare-fun tb2t300 (uni) (set (set (tuple21 (tuple21 b c) a))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 b c) a)))))
  (! (= (tb2t300 (t2tb300 i)) i) :pattern ((t2tb300 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 b1 c1) a1))) j)
     (= (t2tb300 (tb2t300 j)) j)) :pattern ((t2tb300 (tb2t300 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 b c))) (v (set a)) (r (set (tuple21 (tuple21 b c)
  a))))
  (= (mem (set1 (tuple2 (tuple2 b1 c1) a1)) (t2tb206 r)
  (relation a1 (tuple2 b1 c1) (t2tb131 u) (t2tb1 v)))
  (forall ((x (tuple21 b c)) (y a))
  (=> (mem (tuple2 (tuple2 b1 c1) a1)
  (Tuple2 (tuple2 b1 c1) a1 (t2tb134 x) (t2tb2 y)) (t2tb206 r))
  (and (mem8 x u) (mem1 y v)))))))

;; mem_relation
  (assert
  (forall ((b2 ty))
  (forall ((u (set (tuple21 b c))) (v uni) (r uni))
  (and
  (=> (mem (set1 (tuple2 (tuple2 b1 c1) b2)) r
  (relation b2 (tuple2 b1 c1) (t2tb131 u) v))
  (forall ((x (tuple21 b c)) (y uni))
  (=> (mem (tuple2 (tuple2 b1 c1) b2)
  (Tuple2 (tuple2 b1 c1) b2 (t2tb134 x) y) r) (and (mem8 x u) (mem b2 y v)))))
  (=>
  (forall ((x (tuple21 b c)) (y uni))
  (=> (sort b2 y)
  (=> (mem (tuple2 (tuple2 b1 c1) b2)
  (Tuple2 (tuple2 b1 c1) b2 (t2tb134 x) y) r) (and (mem8 x u) (mem b2 y v)))))
  (mem (set1 (tuple2 (tuple2 b1 c1) b2)) r
  (relation b2 (tuple2 b1 c1) (t2tb131 u) v)))))))

(declare-fun t2tb472 ((set (set (tuple21 c (set (tuple21 a (tuple21 b
  c))))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 c (set (tuple21 a (tuple21 b c)))))))) (sort
  (set1 (set1 (tuple2 c1 (set1 (tuple2 a1 (tuple2 b1 c1)))))) (t2tb472 x))))

(declare-fun tb2t472 (uni) (set (set (tuple21 c (set (tuple21 a (tuple21 b
  c)))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 c (set (tuple21 a (tuple21 b c))))))))
  (! (= (tb2t472 (t2tb472 i)) i) :pattern ((t2tb472 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 c1 (set1 (tuple2 a1 (tuple2 b1 c1)))))) j)
     (= (t2tb472 (tb2t472 j)) j)) :pattern ((t2tb472 (tb2t472 j))) )))

;; mem_relation
  (assert
  (forall ((u (set c)) (v (set (set (tuple21 a (tuple21 b c)))))
  (r (set (tuple21 c (set (tuple21 a (tuple21 b c)))))))
  (= (mem (set1 (tuple2 c1 (set1 (tuple2 a1 (tuple2 b1 c1))))) (t2tb425 r)
  (relation (set1 (tuple2 a1 (tuple2 b1 c1))) c1 (t2tb132 u) (t2tb327 v)))
  (forall ((x c) (y (set (tuple21 a (tuple21 b c)))))
  (=> (mem (tuple2 c1 (set1 (tuple2 a1 (tuple2 b1 c1))))
  (Tuple2 c1 (set1 (tuple2 a1 (tuple2 b1 c1))) (t2tb135 x) (t2tb261 y))
  (t2tb425 r)) (and (mem7 x u) (mem15 y v)))))))

(declare-fun t2tb473 ((set (set (tuple21 c (tuple21 a (tuple21 b c)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 c (tuple21 a (tuple21 b c))))))) (sort
  (set1 (set1 (tuple2 c1 (tuple2 a1 (tuple2 b1 c1))))) (t2tb473 x))))

(declare-fun tb2t473 (uni) (set (set (tuple21 c (tuple21 a (tuple21 b c))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 c (tuple21 a (tuple21 b c)))))))
  (! (= (tb2t473 (t2tb473 i)) i) :pattern ((t2tb473 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 c1 (tuple2 a1 (tuple2 b1 c1))))) j)
     (= (t2tb473 (tb2t473 j)) j)) :pattern ((t2tb473 (tb2t473 j))) )))

;; mem_relation
  (assert
  (forall ((u (set c)) (v (set (tuple21 a (tuple21 b c)))) (r (set (tuple21 c
  (tuple21 a (tuple21 b c))))))
  (= (mem (set1 (tuple2 c1 (tuple2 a1 (tuple2 b1 c1)))) (t2tb427 r)
  (relation (tuple2 a1 (tuple2 b1 c1)) c1 (t2tb132 u) (t2tb261 v)))
  (forall ((x c) (y (tuple21 a (tuple21 b c))))
  (=> (mem (tuple2 c1 (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 c1 (tuple2 a1 (tuple2 b1 c1)) (t2tb135 x) (t2tb260 y)) (t2tb427 r))
  (and (mem7 x u) (mem14 y v)))))))

(declare-fun t2tb301 ((set (set (tuple21 c (set (tuple21 a c)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 c (set (tuple21 a c))))))) (sort
  (set1 (set1 (tuple2 c1 (set1 (tuple2 a1 c1))))) (t2tb301 x))))

(declare-fun tb2t301 (uni) (set (set (tuple21 c (set (tuple21 a c))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 c (set (tuple21 a c)))))))
  (! (= (tb2t301 (t2tb301 i)) i) :pattern ((t2tb301 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 c1 (set1 (tuple2 a1 c1))))) j)
     (= (t2tb301 (tb2t301 j)) j)) :pattern ((t2tb301 (tb2t301 j))) )))

;; mem_relation
  (assert
  (forall ((u (set c)) (v (set (set (tuple21 a c)))) (r (set (tuple21 c
  (set (tuple21 a c))))))
  (= (mem (set1 (tuple2 c1 (set1 (tuple2 a1 c1)))) (t2tb208 r)
  (relation (set1 (tuple2 a1 c1)) c1 (t2tb132 u) (t2tb128 v)))
  (forall ((x c) (y (set (tuple21 a c))))
  (=> (mem (tuple2 c1 (set1 (tuple2 a1 c1)))
  (Tuple2 c1 (set1 (tuple2 a1 c1)) (t2tb135 x) (t2tb129 y)) (t2tb208 r))
  (and (mem7 x u) (mem11 y v)))))))

(declare-fun t2tb302 ((set (set (tuple21 c (tuple21 a c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 c (tuple21 a c)))))) (sort
  (set1 (set1 (tuple2 c1 (tuple2 a1 c1)))) (t2tb302 x))))

(declare-fun tb2t302 (uni) (set (set (tuple21 c (tuple21 a c)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 c (tuple21 a c))))))
  (! (= (tb2t302 (t2tb302 i)) i) :pattern ((t2tb302 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 c1 (tuple2 a1 c1)))) j)
     (= (t2tb302 (tb2t302 j)) j)) :pattern ((t2tb302 (tb2t302 j))) )))

;; mem_relation
  (assert
  (forall ((u (set c)) (v (set (tuple21 a c))) (r (set (tuple21 c (tuple21 a
  c)))))
  (= (mem (set1 (tuple2 c1 (tuple2 a1 c1))) (t2tb210 r)
  (relation (tuple2 a1 c1) c1 (t2tb132 u) (t2tb129 v)))
  (forall ((x c) (y (tuple21 a c)))
  (=> (mem (tuple2 c1 (tuple2 a1 c1))
  (Tuple2 c1 (tuple2 a1 c1) (t2tb135 x) (t2tb133 y)) (t2tb210 r))
  (and (mem7 x u) (mem10 y v)))))))

(declare-fun t2tb304 ((set (set (tuple21 c (tuple21 b c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 c (tuple21 b c)))))) (sort
  (set1 (set1 (tuple2 c1 (tuple2 b1 c1)))) (t2tb304 x))))

(declare-fun tb2t304 (uni) (set (set (tuple21 c (tuple21 b c)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 c (tuple21 b c))))))
  (! (= (tb2t304 (t2tb304 i)) i) :pattern ((t2tb304 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 c1 (tuple2 b1 c1)))) j)
     (= (t2tb304 (tb2t304 j)) j)) :pattern ((t2tb304 (tb2t304 j))) )))

;; mem_relation
  (assert
  (forall ((u (set c)) (v (set (tuple21 b c))) (r (set (tuple21 c (tuple21 b
  c)))))
  (= (mem (set1 (tuple2 c1 (tuple2 b1 c1))) (t2tb215 r)
  (relation (tuple2 b1 c1) c1 (t2tb132 u) (t2tb131 v)))
  (forall ((x c) (y (tuple21 b c)))
  (=> (mem (tuple2 c1 (tuple2 b1 c1))
  (Tuple2 c1 (tuple2 b1 c1) (t2tb135 x) (t2tb134 y)) (t2tb215 r))
  (and (mem7 x u) (mem8 y v)))))))

(declare-fun t2tb305 ((set (set (tuple21 c c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 c c))))) (sort (set1 (set1 (tuple2 c1 c1)))
  (t2tb305 x))))

(declare-fun tb2t305 (uni) (set (set (tuple21 c c))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 c c)))))
  (! (= (tb2t305 (t2tb305 i)) i) :pattern ((t2tb305 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 c1 c1))) j) (= (t2tb305 (tb2t305 j)) j)) :pattern (
  (t2tb305 (tb2t305 j))) )))

;; mem_relation
  (assert
  (forall ((u (set c)) (v (set c)) (r (set (tuple21 c c))))
  (= (mem (set1 (tuple2 c1 c1)) (t2tb216 r)
  (relation c1 c1 (t2tb132 u) (t2tb132 v)))
  (forall ((x c) (y c))
  (=> (mem (tuple2 c1 c1) (Tuple2 c1 c1 (t2tb135 x) (t2tb135 y)) (t2tb216 r))
  (and (mem7 x u) (mem7 y v)))))))

(declare-fun t2tb306 ((set (set (tuple21 c (set (tuple21 a b)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 c (set (tuple21 a b))))))) (sort
  (set1 (set1 (tuple2 c1 (set1 (tuple2 a1 b1))))) (t2tb306 x))))

(declare-fun tb2t306 (uni) (set (set (tuple21 c (set (tuple21 a b))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 c (set (tuple21 a b)))))))
  (! (= (tb2t306 (t2tb306 i)) i) :pattern ((t2tb306 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 c1 (set1 (tuple2 a1 b1))))) j)
     (= (t2tb306 (tb2t306 j)) j)) :pattern ((t2tb306 (tb2t306 j))) )))

;; mem_relation
  (assert
  (forall ((u (set c)) (v (set (set (tuple21 a b)))) (r (set (tuple21 c
  (set (tuple21 a b))))))
  (= (mem (set1 (tuple2 c1 (set1 (tuple2 a1 b1)))) (t2tb218 r)
  (relation (set1 (tuple2 a1 b1)) c1 (t2tb132 u) (t2tb10 v)))
  (forall ((x c) (y (set (tuple21 a b))))
  (=> (mem (tuple2 c1 (set1 (tuple2 a1 b1)))
  (Tuple2 c1 (set1 (tuple2 a1 b1)) (t2tb135 x) (t2tb11 y)) (t2tb218 r))
  (and (mem7 x u) (mem4 y v)))))))

(declare-fun t2tb307 ((set (set (tuple21 c (tuple21 a b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 c (tuple21 a b)))))) (sort
  (set1 (set1 (tuple2 c1 (tuple2 a1 b1)))) (t2tb307 x))))

(declare-fun tb2t307 (uni) (set (set (tuple21 c (tuple21 a b)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 c (tuple21 a b))))))
  (! (= (tb2t307 (t2tb307 i)) i) :pattern ((t2tb307 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 c1 (tuple2 a1 b1)))) j)
     (= (t2tb307 (tb2t307 j)) j)) :pattern ((t2tb307 (tb2t307 j))) )))

;; mem_relation
  (assert
  (forall ((u (set c)) (v (set (tuple21 a b))) (r (set (tuple21 c (tuple21 a
  b)))))
  (= (mem (set1 (tuple2 c1 (tuple2 a1 b1))) (t2tb220 r)
  (relation (tuple2 a1 b1) c1 (t2tb132 u) (t2tb11 v)))
  (forall ((x c) (y (tuple21 a b)))
  (=> (mem (tuple2 c1 (tuple2 a1 b1))
  (Tuple2 c1 (tuple2 a1 b1) (t2tb135 x) (t2tb13 y)) (t2tb220 r))
  (and (mem7 x u) (mem3 y v)))))))

(declare-fun t2tb308 ((set (set (tuple21 c b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 c b))))) (sort (set1 (set1 (tuple2 c1 b1)))
  (t2tb308 x))))

(declare-fun tb2t308 (uni) (set (set (tuple21 c b))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 c b)))))
  (! (= (tb2t308 (t2tb308 i)) i) :pattern ((t2tb308 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 c1 b1))) j) (= (t2tb308 (tb2t308 j)) j)) :pattern (
  (t2tb308 (tb2t308 j))) )))

;; mem_relation
  (assert
  (forall ((u (set c)) (v (set b)) (r (set (tuple21 c b))))
  (= (mem (set1 (tuple2 c1 b1)) (t2tb222 r)
  (relation b1 c1 (t2tb132 u) (t2tb12 v)))
  (forall ((x c) (y b))
  (=> (mem (tuple2 c1 b1) (Tuple2 c1 b1 (t2tb135 x) (t2tb14 y)) (t2tb222 r))
  (and (mem7 x u) (mem2 y v)))))))

(declare-fun t2tb309 ((set (set (tuple21 c a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 c a))))) (sort (set1 (set1 (tuple2 c1 a1)))
  (t2tb309 x))))

(declare-fun tb2t309 (uni) (set (set (tuple21 c a))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 c a)))))
  (! (= (tb2t309 (t2tb309 i)) i) :pattern ((t2tb309 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 c1 a1))) j) (= (t2tb309 (tb2t309 j)) j)) :pattern (
  (t2tb309 (tb2t309 j))) )))

;; mem_relation
  (assert
  (forall ((u (set c)) (v (set a)) (r (set (tuple21 c a))))
  (= (mem (set1 (tuple2 c1 a1)) (t2tb224 r)
  (relation a1 c1 (t2tb132 u) (t2tb1 v)))
  (forall ((x c) (y a))
  (=> (mem (tuple2 c1 a1) (Tuple2 c1 a1 (t2tb135 x) (t2tb2 y)) (t2tb224 r))
  (and (mem7 x u) (mem1 y v)))))))

;; mem_relation
  (assert
  (forall ((b2 ty))
  (forall ((u (set c)) (v uni) (r uni))
  (and
  (=> (mem (set1 (tuple2 c1 b2)) r (relation b2 c1 (t2tb132 u) v))
  (forall ((x c) (y uni))
  (=> (mem (tuple2 c1 b2) (Tuple2 c1 b2 (t2tb135 x) y) r)
  (and (mem7 x u) (mem b2 y v)))))
  (=>
  (forall ((x c) (y uni))
  (=> (sort b2 y)
  (=> (mem (tuple2 c1 b2) (Tuple2 c1 b2 (t2tb135 x) y) r)
  (and (mem7 x u) (mem b2 y v))))) (mem (set1 (tuple2 c1 b2)) r
  (relation b2 c1 (t2tb132 u) v)))))))

(declare-fun t2tb474 ((set (set (tuple21 (set (tuple21 a b)) (set (tuple21 a
  (tuple21 b c))))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a b)) (set (tuple21 a
  (tuple21 b c)))))))) (sort
  (set1
  (set1 (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 (tuple2 b1 c1))))))
  (t2tb474 x))))

(declare-fun tb2t474 (uni) (set (set (tuple21 (set (tuple21 a b))
  (set (tuple21 a (tuple21 b c)))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a b)) (set (tuple21 a
  (tuple21 b c))))))))
  (! (= (tb2t474 (t2tb474 i)) i) :pattern ((t2tb474 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (set1 (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 (tuple2 b1 c1))))))
     j) (= (t2tb474 (tb2t474 j)) j)) :pattern ((t2tb474 (tb2t474 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a b)))) (v (set (set (tuple21 a (tuple21 b
  c))))) (r (set (tuple21 (set (tuple21 a b)) (set (tuple21 a (tuple21 b
  c)))))))
  (= (mem
  (set1 (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 (tuple2 b1 c1)))))
  (t2tb429 r)
  (relation (set1 (tuple2 a1 (tuple2 b1 c1))) (set1 (tuple2 a1 b1))
  (t2tb10 u) (t2tb327 v)))
  (forall ((x (set (tuple21 a b))) (y (set (tuple21 a (tuple21 b c)))))
  (=> (mem (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 (tuple2 b1 c1))))
  (Tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 (tuple2 b1 c1))) (t2tb11 x)
  (t2tb261 y)) (t2tb429 r)) (and (mem4 x u) (mem15 y v)))))))

(declare-fun t2tb475 ((set (set (tuple21 (set (tuple21 a b)) (tuple21 a
  (tuple21 b c)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a b)) (tuple21 a (tuple21 b
  c))))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 (tuple2 b1 c1)))))
  (t2tb475 x))))

(declare-fun tb2t475 (uni) (set (set (tuple21 (set (tuple21 a b)) (tuple21 a
  (tuple21 b c))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a b)) (tuple21 a (tuple21 b
  c))))))) (! (= (tb2t475 (t2tb475 i)) i) :pattern ((t2tb475 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 (tuple2 b1 c1)))))
     j) (= (t2tb475 (tb2t475 j)) j)) :pattern ((t2tb475 (tb2t475 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a b)))) (v (set (tuple21 a (tuple21 b c))))
  (r (set (tuple21 (set (tuple21 a b)) (tuple21 a (tuple21 b c))))))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 (tuple2 b1 c1))))
  (t2tb431 r)
  (relation (tuple2 a1 (tuple2 b1 c1)) (set1 (tuple2 a1 b1)) (t2tb10 u)
  (t2tb261 v)))
  (forall ((x (set (tuple21 a b))) (y (tuple21 a (tuple21 b c))))
  (=> (mem (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 (tuple2 b1 c1)) (t2tb11 x)
  (t2tb260 y)) (t2tb431 r)) (and (mem4 x u) (mem14 y v)))))))

(declare-fun t2tb310 ((set (set (tuple21 (set (tuple21 a b)) (set (tuple21 a
  c)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a b)) (set (tuple21 a c)))))))
  (sort (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 c1)))))
  (t2tb310 x))))

(declare-fun tb2t310 (uni) (set (set (tuple21 (set (tuple21 a b))
  (set (tuple21 a c))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a b)) (set (tuple21 a c)))))))
  (! (= (tb2t310 (t2tb310 i)) i) :pattern ((t2tb310 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 c1))))) j)
     (= (t2tb310 (tb2t310 j)) j)) :pattern ((t2tb310 (tb2t310 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a b)))) (v (set (set (tuple21 a c))))
  (r (set (tuple21 (set (tuple21 a b)) (set (tuple21 a c))))))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 c1))))
  (t2tb226 r)
  (relation (set1 (tuple2 a1 c1)) (set1 (tuple2 a1 b1)) (t2tb10 u)
  (t2tb128 v)))
  (forall ((x (set (tuple21 a b))) (y (set (tuple21 a c))))
  (=> (mem (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 c1)))
  (Tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 c1)) (t2tb11 x) (t2tb129 y))
  (t2tb226 r)) (and (mem4 x u) (mem11 y v)))))))

(declare-fun t2tb311 ((set (set (tuple21 (set (tuple21 a b)) (tuple21 a
  c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a b)) (tuple21 a c)))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 c1)))) (t2tb311 x))))

(declare-fun tb2t311 (uni) (set (set (tuple21 (set (tuple21 a b)) (tuple21 a
  c)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a b)) (tuple21 a c))))))
  (! (= (tb2t311 (t2tb311 i)) i) :pattern ((t2tb311 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 c1)))) j)
     (= (t2tb311 (tb2t311 j)) j)) :pattern ((t2tb311 (tb2t311 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a b)))) (v (set (tuple21 a c)))
  (r (set (tuple21 (set (tuple21 a b)) (tuple21 a c)))))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 c1))) (t2tb229 r)
  (relation (tuple2 a1 c1) (set1 (tuple2 a1 b1)) (t2tb10 u) (t2tb129 v)))
  (forall ((x (set (tuple21 a b))) (y (tuple21 a c)))
  (=> (mem (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 c1))
  (Tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 c1) (t2tb11 x) (t2tb133 y))
  (t2tb229 r)) (and (mem4 x u) (mem10 y v)))))))

(declare-fun t2tb313 ((set (set (tuple21 (set (tuple21 a b)) (tuple21 b
  c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a b)) (tuple21 b c)))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 b1 c1)))) (t2tb313 x))))

(declare-fun tb2t313 (uni) (set (set (tuple21 (set (tuple21 a b)) (tuple21 b
  c)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a b)) (tuple21 b c))))))
  (! (= (tb2t313 (t2tb313 i)) i) :pattern ((t2tb313 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 b1 c1)))) j)
     (= (t2tb313 (tb2t313 j)) j)) :pattern ((t2tb313 (tb2t313 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a b)))) (v (set (tuple21 b c)))
  (r (set (tuple21 (set (tuple21 a b)) (tuple21 b c)))))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 b1 c1))) (t2tb232 r)
  (relation (tuple2 b1 c1) (set1 (tuple2 a1 b1)) (t2tb10 u) (t2tb131 v)))
  (forall ((x (set (tuple21 a b))) (y (tuple21 b c)))
  (=> (mem (tuple2 (set1 (tuple2 a1 b1)) (tuple2 b1 c1))
  (Tuple2 (set1 (tuple2 a1 b1)) (tuple2 b1 c1) (t2tb11 x) (t2tb134 y))
  (t2tb232 r)) (and (mem4 x u) (mem8 y v)))))))

(declare-fun t2tb314 ((set (set (tuple21 (set (tuple21 a b)) c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a b)) c))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) c1))) (t2tb314 x))))

(declare-fun tb2t314 (uni) (set (set (tuple21 (set (tuple21 a b)) c))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a b)) c)))))
  (! (= (tb2t314 (t2tb314 i)) i) :pattern ((t2tb314 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) c1))) j)
     (= (t2tb314 (tb2t314 j)) j)) :pattern ((t2tb314 (tb2t314 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a b)))) (v (set c))
  (r (set (tuple21 (set (tuple21 a b)) c))))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 b1)) c1)) (t2tb234 r)
  (relation c1 (set1 (tuple2 a1 b1)) (t2tb10 u) (t2tb132 v)))
  (forall ((x (set (tuple21 a b))) (y c))
  (=> (mem (tuple2 (set1 (tuple2 a1 b1)) c1)
  (Tuple2 (set1 (tuple2 a1 b1)) c1 (t2tb11 x) (t2tb135 y)) (t2tb234 r))
  (and (mem4 x u) (mem7 y v)))))))

(declare-fun t2tb45 ((set (set (tuple21 (set (tuple21 a b)) (set (tuple21 a
  b)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a b)) (set (tuple21 a b)))))))
  (sort (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1)))))
  (t2tb45 x))))

(declare-fun tb2t45 (uni) (set (set (tuple21 (set (tuple21 a b))
  (set (tuple21 a b))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a b)) (set (tuple21 a b)))))))
  (! (= (tb2t45 (t2tb45 i)) i) :pattern ((t2tb45 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1))))) j)
     (= (t2tb45 (tb2t45 j)) j)) :pattern ((t2tb45 (tb2t45 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a b)))) (v (set (set (tuple21 a b))))
  (r (set (tuple21 (set (tuple21 a b)) (set (tuple21 a b))))))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1))))
  (t2tb15 r)
  (relation (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1)) (t2tb10 u)
  (t2tb10 v)))
  (forall ((x (set (tuple21 a b))) (y (set (tuple21 a b))))
  (=> (mem (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1)))
  (Tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1)) (t2tb11 x) (t2tb11 y))
  (t2tb15 r)) (and (mem4 x u) (mem4 y v)))))))

(declare-fun t2tb46 ((set (set (tuple21 (set (tuple21 a b)) (tuple21 a
  b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a b)) (tuple21 a b)))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 b1)))) (t2tb46 x))))

(declare-fun tb2t46 (uni) (set (set (tuple21 (set (tuple21 a b)) (tuple21 a
  b)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a b)) (tuple21 a b))))))
  (! (= (tb2t46 (t2tb46 i)) i) :pattern ((t2tb46 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 b1)))) j)
     (= (t2tb46 (tb2t46 j)) j)) :pattern ((t2tb46 (tb2t46 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a b)))) (v (set (tuple21 a b)))
  (r (set (tuple21 (set (tuple21 a b)) (tuple21 a b)))))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 b1))) (t2tb17 r)
  (relation (tuple2 a1 b1) (set1 (tuple2 a1 b1)) (t2tb10 u) (t2tb11 v)))
  (forall ((x (set (tuple21 a b))) (y (tuple21 a b)))
  (=> (mem (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 b1))
  (Tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 b1) (t2tb11 x) (t2tb13 y))
  (t2tb17 r)) (and (mem4 x u) (mem3 y v)))))))

(declare-fun t2tb47 ((set (set (tuple21 (set (tuple21 a b)) b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a b)) b))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) b1))) (t2tb47 x))))

(declare-fun tb2t47 (uni) (set (set (tuple21 (set (tuple21 a b)) b))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a b)) b)))))
  (! (= (tb2t47 (t2tb47 i)) i) :pattern ((t2tb47 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) b1))) j)
     (= (t2tb47 (tb2t47 j)) j)) :pattern ((t2tb47 (tb2t47 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a b)))) (v (set b))
  (r (set (tuple21 (set (tuple21 a b)) b))))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 b1)) b1)) (t2tb19 r)
  (relation b1 (set1 (tuple2 a1 b1)) (t2tb10 u) (t2tb12 v)))
  (forall ((x (set (tuple21 a b))) (y b))
  (=> (mem (tuple2 (set1 (tuple2 a1 b1)) b1)
  (Tuple2 (set1 (tuple2 a1 b1)) b1 (t2tb11 x) (t2tb14 y)) (t2tb19 r))
  (and (mem4 x u) (mem2 y v)))))))

(declare-fun t2tb48 ((set (set (tuple21 (set (tuple21 a b)) a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a b)) a))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) a1))) (t2tb48 x))))

(declare-fun tb2t48 (uni) (set (set (tuple21 (set (tuple21 a b)) a))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a b)) a)))))
  (! (= (tb2t48 (t2tb48 i)) i) :pattern ((t2tb48 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) a1))) j)
     (= (t2tb48 (tb2t48 j)) j)) :pattern ((t2tb48 (tb2t48 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a b)))) (v (set a))
  (r (set (tuple21 (set (tuple21 a b)) a))))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 b1)) a1)) (t2tb22 r)
  (relation a1 (set1 (tuple2 a1 b1)) (t2tb10 u) (t2tb1 v)))
  (forall ((x (set (tuple21 a b))) (y a))
  (=> (mem (tuple2 (set1 (tuple2 a1 b1)) a1)
  (Tuple2 (set1 (tuple2 a1 b1)) a1 (t2tb11 x) (t2tb2 y)) (t2tb22 r))
  (and (mem4 x u) (mem1 y v)))))))

;; mem_relation
  (assert
  (forall ((b2 ty))
  (forall ((u (set (set (tuple21 a b)))) (v uni) (r uni))
  (and
  (=> (mem (set1 (tuple2 (set1 (tuple2 a1 b1)) b2)) r
  (relation b2 (set1 (tuple2 a1 b1)) (t2tb10 u) v))
  (forall ((x (set (tuple21 a b))) (y uni))
  (=> (mem (tuple2 (set1 (tuple2 a1 b1)) b2)
  (Tuple2 (set1 (tuple2 a1 b1)) b2 (t2tb11 x) y) r)
  (and (mem4 x u) (mem b2 y v)))))
  (=>
  (forall ((x (set (tuple21 a b))) (y uni))
  (=> (sort b2 y)
  (=> (mem (tuple2 (set1 (tuple2 a1 b1)) b2)
  (Tuple2 (set1 (tuple2 a1 b1)) b2 (t2tb11 x) y) r)
  (and (mem4 x u) (mem b2 y v))))) (mem
  (set1 (tuple2 (set1 (tuple2 a1 b1)) b2)) r
  (relation b2 (set1 (tuple2 a1 b1)) (t2tb10 u) v)))))))

(declare-fun t2tb476 ((set (set (tuple21 (tuple21 a b) (set (tuple21 a
  (tuple21 b c))))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a b) (set (tuple21 a (tuple21 b
  c)))))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 (tuple2 b1 c1))))))
  (t2tb476 x))))

(declare-fun tb2t476 (uni) (set (set (tuple21 (tuple21 a b) (set (tuple21 a
  (tuple21 b c)))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a b) (set (tuple21 a (tuple21 b
  c)))))))) (! (= (tb2t476 (t2tb476 i)) i) :pattern ((t2tb476 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 (tuple2 b1 c1))))))
     j) (= (t2tb476 (tb2t476 j)) j)) :pattern ((t2tb476 (tb2t476 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a b))) (v (set (set (tuple21 a (tuple21 b c)))))
  (r (set (tuple21 (tuple21 a b) (set (tuple21 a (tuple21 b c)))))))
  (= (mem (set1 (tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 (tuple2 b1 c1)))))
  (t2tb433 r)
  (relation (set1 (tuple2 a1 (tuple2 b1 c1))) (tuple2 a1 b1) (t2tb11 u)
  (t2tb327 v)))
  (forall ((x (tuple21 a b)) (y (set (tuple21 a (tuple21 b c)))))
  (=> (mem (tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 (tuple2 b1 c1))))
  (Tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 (tuple2 b1 c1))) (t2tb13 x)
  (t2tb261 y)) (t2tb433 r)) (and (mem3 x u) (mem15 y v)))))))

(declare-fun t2tb477 ((set (set (tuple21 (tuple21 a b) (tuple21 a (tuple21 b
  c)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a b) (tuple21 a (tuple21 b c)))))))
  (sort (set1 (set1 (tuple2 (tuple2 a1 b1) (tuple2 a1 (tuple2 b1 c1)))))
  (t2tb477 x))))

(declare-fun tb2t477 (uni) (set (set (tuple21 (tuple21 a b) (tuple21 a
  (tuple21 b c))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a b) (tuple21 a (tuple21 b c)))))))
  (! (= (tb2t477 (t2tb477 i)) i) :pattern ((t2tb477 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (tuple2 a1 b1) (tuple2 a1 (tuple2 b1 c1))))) j)
     (= (t2tb477 (tb2t477 j)) j)) :pattern ((t2tb477 (tb2t477 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a b))) (v (set (tuple21 a (tuple21 b c))))
  (r (set (tuple21 (tuple21 a b) (tuple21 a (tuple21 b c))))))
  (= (mem (set1 (tuple2 (tuple2 a1 b1) (tuple2 a1 (tuple2 b1 c1))))
  (t2tb435 r)
  (relation (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 b1) (t2tb11 u) (t2tb261 v)))
  (forall ((x (tuple21 a b)) (y (tuple21 a (tuple21 b c))))
  (=> (mem (tuple2 (tuple2 a1 b1) (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 (tuple2 a1 b1) (tuple2 a1 (tuple2 b1 c1)) (t2tb13 x) (t2tb260 y))
  (t2tb435 r)) (and (mem3 x u) (mem14 y v)))))))

(declare-fun t2tb315 ((set (set (tuple21 (tuple21 a b) (set (tuple21 a
  c)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a b) (set (tuple21 a c))))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 c1))))) (t2tb315 x))))

(declare-fun tb2t315 (uni) (set (set (tuple21 (tuple21 a b) (set (tuple21 a
  c))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a b) (set (tuple21 a c)))))))
  (! (= (tb2t315 (t2tb315 i)) i) :pattern ((t2tb315 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 c1))))) j)
     (= (t2tb315 (tb2t315 j)) j)) :pattern ((t2tb315 (tb2t315 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a b))) (v (set (set (tuple21 a c))))
  (r (set (tuple21 (tuple21 a b) (set (tuple21 a c))))))
  (= (mem (set1 (tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 c1)))) (t2tb236 r)
  (relation (set1 (tuple2 a1 c1)) (tuple2 a1 b1) (t2tb11 u) (t2tb128 v)))
  (forall ((x (tuple21 a b)) (y (set (tuple21 a c))))
  (=> (mem (tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 c1)))
  (Tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 c1)) (t2tb13 x) (t2tb129 y))
  (t2tb236 r)) (and (mem3 x u) (mem11 y v)))))))

(declare-fun t2tb316 ((set (set (tuple21 (tuple21 a b) (tuple21 a c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a b) (tuple21 a c)))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)))) (t2tb316 x))))

(declare-fun tb2t316 (uni) (set (set (tuple21 (tuple21 a b) (tuple21 a c)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a b) (tuple21 a c))))))
  (! (= (tb2t316 (t2tb316 i)) i) :pattern ((t2tb316 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)))) j)
     (= (t2tb316 (tb2t316 j)) j)) :pattern ((t2tb316 (tb2t316 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a b))) (v (set (tuple21 a c)))
  (r (set (tuple21 (tuple21 a b) (tuple21 a c)))))
  (= (mem (set1 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1))) (t2tb238 r)
  (relation (tuple2 a1 c1) (tuple2 a1 b1) (t2tb11 u) (t2tb129 v)))
  (forall ((x (tuple21 a b)) (y (tuple21 a c)))
  (=> (mem (tuple2 (tuple2 a1 b1) (tuple2 a1 c1))
  (Tuple2 (tuple2 a1 b1) (tuple2 a1 c1) (t2tb13 x) (t2tb133 y)) (t2tb238 r))
  (and (mem3 x u) (mem10 y v)))))))

(declare-fun t2tb318 ((set (set (tuple21 (tuple21 a b) (tuple21 b c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a b) (tuple21 b c)))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 b1) (tuple2 b1 c1)))) (t2tb318 x))))

(declare-fun tb2t318 (uni) (set (set (tuple21 (tuple21 a b) (tuple21 b c)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a b) (tuple21 b c))))))
  (! (= (tb2t318 (t2tb318 i)) i) :pattern ((t2tb318 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 b1) (tuple2 b1 c1)))) j)
     (= (t2tb318 (tb2t318 j)) j)) :pattern ((t2tb318 (tb2t318 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a b))) (v (set (tuple21 b c)))
  (r (set (tuple21 (tuple21 a b) (tuple21 b c)))))
  (= (mem (set1 (tuple2 (tuple2 a1 b1) (tuple2 b1 c1))) (t2tb242 r)
  (relation (tuple2 b1 c1) (tuple2 a1 b1) (t2tb11 u) (t2tb131 v)))
  (forall ((x (tuple21 a b)) (y (tuple21 b c)))
  (=> (mem (tuple2 (tuple2 a1 b1) (tuple2 b1 c1))
  (Tuple2 (tuple2 a1 b1) (tuple2 b1 c1) (t2tb13 x) (t2tb134 y)) (t2tb242 r))
  (and (mem3 x u) (mem8 y v)))))))

(declare-fun t2tb319 ((set (set (tuple21 (tuple21 a b) c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a b) c))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 b1) c1))) (t2tb319 x))))

(declare-fun tb2t319 (uni) (set (set (tuple21 (tuple21 a b) c))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a b) c)))))
  (! (= (tb2t319 (t2tb319 i)) i) :pattern ((t2tb319 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 b1) c1))) j)
     (= (t2tb319 (tb2t319 j)) j)) :pattern ((t2tb319 (tb2t319 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a b))) (v (set c)) (r (set (tuple21 (tuple21 a b)
  c))))
  (= (mem (set1 (tuple2 (tuple2 a1 b1) c1)) (t2tb245 r)
  (relation c1 (tuple2 a1 b1) (t2tb11 u) (t2tb132 v)))
  (forall ((x (tuple21 a b)) (y c))
  (=> (mem (tuple2 (tuple2 a1 b1) c1)
  (Tuple2 (tuple2 a1 b1) c1 (t2tb13 x) (t2tb135 y)) (t2tb245 r))
  (and (mem3 x u) (mem7 y v)))))))

(declare-fun t2tb49 ((set (set (tuple21 (tuple21 a b) (set (tuple21 a
  b)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a b) (set (tuple21 a b))))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 b1))))) (t2tb49 x))))

(declare-fun tb2t49 (uni) (set (set (tuple21 (tuple21 a b) (set (tuple21 a
  b))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a b) (set (tuple21 a b)))))))
  (! (= (tb2t49 (t2tb49 i)) i) :pattern ((t2tb49 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 b1))))) j)
     (= (t2tb49 (tb2t49 j)) j)) :pattern ((t2tb49 (tb2t49 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a b))) (v (set (set (tuple21 a b))))
  (r (set (tuple21 (tuple21 a b) (set (tuple21 a b))))))
  (= (mem (set1 (tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 b1)))) (t2tb23 r)
  (relation (set1 (tuple2 a1 b1)) (tuple2 a1 b1) (t2tb11 u) (t2tb10 v)))
  (forall ((x (tuple21 a b)) (y (set (tuple21 a b))))
  (=> (mem (tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 b1)))
  (Tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 b1)) (t2tb13 x) (t2tb11 y))
  (t2tb23 r)) (and (mem3 x u) (mem4 y v)))))))

(declare-fun t2tb50 ((set (set (tuple21 (tuple21 a b) (tuple21 a b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a b) (tuple21 a b)))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 b1) (tuple2 a1 b1)))) (t2tb50 x))))

(declare-fun tb2t50 (uni) (set (set (tuple21 (tuple21 a b) (tuple21 a b)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a b) (tuple21 a b))))))
  (! (= (tb2t50 (t2tb50 i)) i) :pattern ((t2tb50 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 b1) (tuple2 a1 b1)))) j)
     (= (t2tb50 (tb2t50 j)) j)) :pattern ((t2tb50 (tb2t50 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a b))) (v (set (tuple21 a b)))
  (r (set (tuple21 (tuple21 a b) (tuple21 a b)))))
  (= (mem (set1 (tuple2 (tuple2 a1 b1) (tuple2 a1 b1))) (t2tb25 r)
  (relation (tuple2 a1 b1) (tuple2 a1 b1) (t2tb11 u) (t2tb11 v)))
  (forall ((x (tuple21 a b)) (y (tuple21 a b)))
  (=> (mem (tuple2 (tuple2 a1 b1) (tuple2 a1 b1))
  (Tuple2 (tuple2 a1 b1) (tuple2 a1 b1) (t2tb13 x) (t2tb13 y)) (t2tb25 r))
  (and (mem3 x u) (mem3 y v)))))))

(declare-fun t2tb51 ((set (set (tuple21 (tuple21 a b) b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a b) b))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 b1) b1))) (t2tb51 x))))

(declare-fun tb2t51 (uni) (set (set (tuple21 (tuple21 a b) b))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a b) b)))))
  (! (= (tb2t51 (t2tb51 i)) i) :pattern ((t2tb51 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 b1) b1))) j)
     (= (t2tb51 (tb2t51 j)) j)) :pattern ((t2tb51 (tb2t51 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a b))) (v (set b)) (r (set (tuple21 (tuple21 a b)
  b))))
  (= (mem (set1 (tuple2 (tuple2 a1 b1) b1)) (t2tb27 r)
  (relation b1 (tuple2 a1 b1) (t2tb11 u) (t2tb12 v)))
  (forall ((x (tuple21 a b)) (y b))
  (=> (mem (tuple2 (tuple2 a1 b1) b1)
  (Tuple2 (tuple2 a1 b1) b1 (t2tb13 x) (t2tb14 y)) (t2tb27 r))
  (and (mem3 x u) (mem2 y v)))))))

(declare-fun t2tb52 ((set (set (tuple21 (tuple21 a b) a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a b) a))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 b1) a1))) (t2tb52 x))))

(declare-fun tb2t52 (uni) (set (set (tuple21 (tuple21 a b) a))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a b) a)))))
  (! (= (tb2t52 (t2tb52 i)) i) :pattern ((t2tb52 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 b1) a1))) j)
     (= (t2tb52 (tb2t52 j)) j)) :pattern ((t2tb52 (tb2t52 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a b))) (v (set a)) (r (set (tuple21 (tuple21 a b)
  a))))
  (= (mem (set1 (tuple2 (tuple2 a1 b1) a1)) (t2tb29 r)
  (relation a1 (tuple2 a1 b1) (t2tb11 u) (t2tb1 v)))
  (forall ((x (tuple21 a b)) (y a))
  (=> (mem (tuple2 (tuple2 a1 b1) a1)
  (Tuple2 (tuple2 a1 b1) a1 (t2tb13 x) (t2tb2 y)) (t2tb29 r))
  (and (mem3 x u) (mem1 y v)))))))

;; mem_relation
  (assert
  (forall ((b2 ty))
  (forall ((u (set (tuple21 a b))) (v uni) (r uni))
  (and
  (=> (mem (set1 (tuple2 (tuple2 a1 b1) b2)) r
  (relation b2 (tuple2 a1 b1) (t2tb11 u) v))
  (forall ((x (tuple21 a b)) (y uni))
  (=> (mem (tuple2 (tuple2 a1 b1) b2) (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) y)
  r) (and (mem3 x u) (mem b2 y v)))))
  (=>
  (forall ((x (tuple21 a b)) (y uni))
  (=> (sort b2 y)
  (=> (mem (tuple2 (tuple2 a1 b1) b2) (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) y)
  r) (and (mem3 x u) (mem b2 y v))))) (mem (set1 (tuple2 (tuple2 a1 b1) b2))
  r (relation b2 (tuple2 a1 b1) (t2tb11 u) v)))))))

(declare-fun t2tb478 ((set (set (tuple21 b (set (tuple21 a (tuple21 b
  c))))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 b (set (tuple21 a (tuple21 b c)))))))) (sort
  (set1 (set1 (tuple2 b1 (set1 (tuple2 a1 (tuple2 b1 c1)))))) (t2tb478 x))))

(declare-fun tb2t478 (uni) (set (set (tuple21 b (set (tuple21 a (tuple21 b
  c)))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 b (set (tuple21 a (tuple21 b c))))))))
  (! (= (tb2t478 (t2tb478 i)) i) :pattern ((t2tb478 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 b1 (set1 (tuple2 a1 (tuple2 b1 c1)))))) j)
     (= (t2tb478 (tb2t478 j)) j)) :pattern ((t2tb478 (tb2t478 j))) )))

;; mem_relation
  (assert
  (forall ((u (set b)) (v (set (set (tuple21 a (tuple21 b c)))))
  (r (set (tuple21 b (set (tuple21 a (tuple21 b c)))))))
  (= (mem (set1 (tuple2 b1 (set1 (tuple2 a1 (tuple2 b1 c1))))) (t2tb437 r)
  (relation (set1 (tuple2 a1 (tuple2 b1 c1))) b1 (t2tb12 u) (t2tb327 v)))
  (forall ((x b) (y (set (tuple21 a (tuple21 b c)))))
  (=> (mem (tuple2 b1 (set1 (tuple2 a1 (tuple2 b1 c1))))
  (Tuple2 b1 (set1 (tuple2 a1 (tuple2 b1 c1))) (t2tb14 x) (t2tb261 y))
  (t2tb437 r)) (and (mem2 x u) (mem15 y v)))))))

(declare-fun t2tb479 ((set (set (tuple21 b (tuple21 a (tuple21 b c)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 b (tuple21 a (tuple21 b c))))))) (sort
  (set1 (set1 (tuple2 b1 (tuple2 a1 (tuple2 b1 c1))))) (t2tb479 x))))

(declare-fun tb2t479 (uni) (set (set (tuple21 b (tuple21 a (tuple21 b c))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 b (tuple21 a (tuple21 b c)))))))
  (! (= (tb2t479 (t2tb479 i)) i) :pattern ((t2tb479 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 b1 (tuple2 a1 (tuple2 b1 c1))))) j)
     (= (t2tb479 (tb2t479 j)) j)) :pattern ((t2tb479 (tb2t479 j))) )))

;; mem_relation
  (assert
  (forall ((u (set b)) (v (set (tuple21 a (tuple21 b c)))) (r (set (tuple21 b
  (tuple21 a (tuple21 b c))))))
  (= (mem (set1 (tuple2 b1 (tuple2 a1 (tuple2 b1 c1)))) (t2tb439 r)
  (relation (tuple2 a1 (tuple2 b1 c1)) b1 (t2tb12 u) (t2tb261 v)))
  (forall ((x b) (y (tuple21 a (tuple21 b c))))
  (=> (mem (tuple2 b1 (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 b1 (tuple2 a1 (tuple2 b1 c1)) (t2tb14 x) (t2tb260 y)) (t2tb439 r))
  (and (mem2 x u) (mem14 y v)))))))

(declare-fun t2tb320 ((set (set (tuple21 b (set (tuple21 a c)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 b (set (tuple21 a c))))))) (sort
  (set1 (set1 (tuple2 b1 (set1 (tuple2 a1 c1))))) (t2tb320 x))))

(declare-fun tb2t320 (uni) (set (set (tuple21 b (set (tuple21 a c))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 b (set (tuple21 a c)))))))
  (! (= (tb2t320 (t2tb320 i)) i) :pattern ((t2tb320 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 b1 (set1 (tuple2 a1 c1))))) j)
     (= (t2tb320 (tb2t320 j)) j)) :pattern ((t2tb320 (tb2t320 j))) )))

;; mem_relation
  (assert
  (forall ((u (set b)) (v (set (set (tuple21 a c)))) (r (set (tuple21 b
  (set (tuple21 a c))))))
  (= (mem (set1 (tuple2 b1 (set1 (tuple2 a1 c1)))) (t2tb246 r)
  (relation (set1 (tuple2 a1 c1)) b1 (t2tb12 u) (t2tb128 v)))
  (forall ((x b) (y (set (tuple21 a c))))
  (=> (mem (tuple2 b1 (set1 (tuple2 a1 c1)))
  (Tuple2 b1 (set1 (tuple2 a1 c1)) (t2tb14 x) (t2tb129 y)) (t2tb246 r))
  (and (mem2 x u) (mem11 y v)))))))

(declare-fun t2tb321 ((set (set (tuple21 b (tuple21 a c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 b (tuple21 a c)))))) (sort
  (set1 (set1 (tuple2 b1 (tuple2 a1 c1)))) (t2tb321 x))))

(declare-fun tb2t321 (uni) (set (set (tuple21 b (tuple21 a c)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 b (tuple21 a c))))))
  (! (= (tb2t321 (t2tb321 i)) i) :pattern ((t2tb321 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 b1 (tuple2 a1 c1)))) j)
     (= (t2tb321 (tb2t321 j)) j)) :pattern ((t2tb321 (tb2t321 j))) )))

;; mem_relation
  (assert
  (forall ((u (set b)) (v (set (tuple21 a c))) (r (set (tuple21 b (tuple21 a
  c)))))
  (= (mem (set1 (tuple2 b1 (tuple2 a1 c1))) (t2tb248 r)
  (relation (tuple2 a1 c1) b1 (t2tb12 u) (t2tb129 v)))
  (forall ((x b) (y (tuple21 a c)))
  (=> (mem (tuple2 b1 (tuple2 a1 c1))
  (Tuple2 b1 (tuple2 a1 c1) (t2tb14 x) (t2tb133 y)) (t2tb248 r))
  (and (mem2 x u) (mem10 y v)))))))

(declare-fun t2tb323 ((set (set (tuple21 b (tuple21 b c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 b (tuple21 b c)))))) (sort
  (set1 (set1 (tuple2 b1 (tuple2 b1 c1)))) (t2tb323 x))))

(declare-fun tb2t323 (uni) (set (set (tuple21 b (tuple21 b c)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 b (tuple21 b c))))))
  (! (= (tb2t323 (t2tb323 i)) i) :pattern ((t2tb323 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 b1 (tuple2 b1 c1)))) j)
     (= (t2tb323 (tb2t323 j)) j)) :pattern ((t2tb323 (tb2t323 j))) )))

;; mem_relation
  (assert
  (forall ((u (set b)) (v (set (tuple21 b c))) (r (set (tuple21 b (tuple21 b
  c)))))
  (= (mem (set1 (tuple2 b1 (tuple2 b1 c1))) (t2tb252 r)
  (relation (tuple2 b1 c1) b1 (t2tb12 u) (t2tb131 v)))
  (forall ((x b) (y (tuple21 b c)))
  (=> (mem (tuple2 b1 (tuple2 b1 c1))
  (Tuple2 b1 (tuple2 b1 c1) (t2tb14 x) (t2tb134 y)) (t2tb252 r))
  (and (mem2 x u) (mem8 y v)))))))

;; mem_relation
  (assert
  (forall ((u (set b)) (v (set c)) (r (set (tuple21 b c))))
  (= (mem (set1 (tuple2 b1 c1)) (t2tb131 r)
  (relation c1 b1 (t2tb12 u) (t2tb132 v)))
  (forall ((x b) (y c))
  (=> (mem8 (tb2t134 (Tuple2 b1 c1 (t2tb14 x) (t2tb135 y))) r)
  (and (mem2 x u) (mem7 y v)))))))

(declare-fun t2tb53 ((set (set (tuple21 b (set (tuple21 a b)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 b (set (tuple21 a b))))))) (sort
  (set1 (set1 (tuple2 b1 (set1 (tuple2 a1 b1))))) (t2tb53 x))))

(declare-fun tb2t53 (uni) (set (set (tuple21 b (set (tuple21 a b))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 b (set (tuple21 a b)))))))
  (! (= (tb2t53 (t2tb53 i)) i) :pattern ((t2tb53 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 b1 (set1 (tuple2 a1 b1))))) j)
     (= (t2tb53 (tb2t53 j)) j)) :pattern ((t2tb53 (tb2t53 j))) )))

;; mem_relation
  (assert
  (forall ((u (set b)) (v (set (set (tuple21 a b)))) (r (set (tuple21 b
  (set (tuple21 a b))))))
  (= (mem (set1 (tuple2 b1 (set1 (tuple2 a1 b1)))) (t2tb31 r)
  (relation (set1 (tuple2 a1 b1)) b1 (t2tb12 u) (t2tb10 v)))
  (forall ((x b) (y (set (tuple21 a b))))
  (=> (mem (tuple2 b1 (set1 (tuple2 a1 b1)))
  (Tuple2 b1 (set1 (tuple2 a1 b1)) (t2tb14 x) (t2tb11 y)) (t2tb31 r))
  (and (mem2 x u) (mem4 y v)))))))

(declare-fun t2tb54 ((set (set (tuple21 b (tuple21 a b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 b (tuple21 a b)))))) (sort
  (set1 (set1 (tuple2 b1 (tuple2 a1 b1)))) (t2tb54 x))))

(declare-fun tb2t54 (uni) (set (set (tuple21 b (tuple21 a b)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 b (tuple21 a b))))))
  (! (= (tb2t54 (t2tb54 i)) i) :pattern ((t2tb54 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 b1 (tuple2 a1 b1)))) j)
     (= (t2tb54 (tb2t54 j)) j)) :pattern ((t2tb54 (tb2t54 j))) )))

;; mem_relation
  (assert
  (forall ((u (set b)) (v (set (tuple21 a b))) (r (set (tuple21 b (tuple21 a
  b)))))
  (= (mem (set1 (tuple2 b1 (tuple2 a1 b1))) (t2tb34 r)
  (relation (tuple2 a1 b1) b1 (t2tb12 u) (t2tb11 v)))
  (forall ((x b) (y (tuple21 a b)))
  (=> (mem (tuple2 b1 (tuple2 a1 b1))
  (Tuple2 b1 (tuple2 a1 b1) (t2tb14 x) (t2tb13 y)) (t2tb34 r))
  (and (mem2 x u) (mem3 y v)))))))

(declare-fun t2tb55 ((set (set (tuple21 b b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 b b))))) (sort (set1 (set1 (tuple2 b1 b1)))
  (t2tb55 x))))

(declare-fun tb2t55 (uni) (set (set (tuple21 b b))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 b b)))))
  (! (= (tb2t55 (t2tb55 i)) i) :pattern ((t2tb55 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 b1 b1))) j) (= (t2tb55 (tb2t55 j)) j)) :pattern (
  (t2tb55 (tb2t55 j))) )))

;; mem_relation
  (assert
  (forall ((u (set b)) (v (set b)) (r (set (tuple21 b b))))
  (= (mem (set1 (tuple2 b1 b1)) (t2tb35 r)
  (relation b1 b1 (t2tb12 u) (t2tb12 v)))
  (forall ((x b) (y b))
  (=> (mem (tuple2 b1 b1) (Tuple2 b1 b1 (t2tb14 x) (t2tb14 y)) (t2tb35 r))
  (and (mem2 x u) (mem2 y v)))))))

(declare-fun t2tb56 ((set (set (tuple21 b a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 b a))))) (sort (set1 (set1 (tuple2 b1 a1)))
  (t2tb56 x))))

(declare-fun tb2t56 (uni) (set (set (tuple21 b a))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 b a)))))
  (! (= (tb2t56 (t2tb56 i)) i) :pattern ((t2tb56 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 b1 a1))) j) (= (t2tb56 (tb2t56 j)) j)) :pattern (
  (t2tb56 (tb2t56 j))) )))

;; mem_relation
  (assert
  (forall ((u (set b)) (v (set a)) (r (set (tuple21 b a))))
  (= (mem (set1 (tuple2 b1 a1)) (t2tb37 r)
  (relation a1 b1 (t2tb12 u) (t2tb1 v)))
  (forall ((x b) (y a))
  (=> (mem (tuple2 b1 a1) (Tuple2 b1 a1 (t2tb14 x) (t2tb2 y)) (t2tb37 r))
  (and (mem2 x u) (mem1 y v)))))))

;; mem_relation
  (assert
  (forall ((b2 ty))
  (forall ((u (set b)) (v uni) (r uni))
  (and
  (=> (mem (set1 (tuple2 b1 b2)) r (relation b2 b1 (t2tb12 u) v))
  (forall ((x b) (y uni))
  (=> (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) y) r)
  (and (mem2 x u) (mem b2 y v)))))
  (=>
  (forall ((x b) (y uni))
  (=> (sort b2 y)
  (=> (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) y) r)
  (and (mem2 x u) (mem b2 y v))))) (mem (set1 (tuple2 b1 b2)) r
  (relation b2 b1 (t2tb12 u) v)))))))

(declare-fun t2tb480 ((set (set (tuple21 a (set (tuple21 a (tuple21 b
  c))))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 a (set (tuple21 a (tuple21 b c)))))))) (sort
  (set1 (set1 (tuple2 a1 (set1 (tuple2 a1 (tuple2 b1 c1)))))) (t2tb480 x))))

(declare-fun tb2t480 (uni) (set (set (tuple21 a (set (tuple21 a (tuple21 b
  c)))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 a (set (tuple21 a (tuple21 b c))))))))
  (! (= (tb2t480 (t2tb480 i)) i) :pattern ((t2tb480 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 a1 (set1 (tuple2 a1 (tuple2 b1 c1)))))) j)
     (= (t2tb480 (tb2t480 j)) j)) :pattern ((t2tb480 (tb2t480 j))) )))

;; mem_relation
  (assert
  (forall ((u (set a)) (v (set (set (tuple21 a (tuple21 b c)))))
  (r (set (tuple21 a (set (tuple21 a (tuple21 b c)))))))
  (= (mem (set1 (tuple2 a1 (set1 (tuple2 a1 (tuple2 b1 c1))))) (t2tb441 r)
  (relation (set1 (tuple2 a1 (tuple2 b1 c1))) a1 (t2tb1 u) (t2tb327 v)))
  (forall ((x a) (y (set (tuple21 a (tuple21 b c)))))
  (=> (mem (tuple2 a1 (set1 (tuple2 a1 (tuple2 b1 c1))))
  (Tuple2 a1 (set1 (tuple2 a1 (tuple2 b1 c1))) (t2tb2 x) (t2tb261 y))
  (t2tb441 r)) (and (mem1 x u) (mem15 y v)))))))

(declare-fun t2tb481 ((set (set (tuple21 a (tuple21 a (tuple21 b c)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 a (tuple21 a (tuple21 b c))))))) (sort
  (set1 (set1 (tuple2 a1 (tuple2 a1 (tuple2 b1 c1))))) (t2tb481 x))))

(declare-fun tb2t481 (uni) (set (set (tuple21 a (tuple21 a (tuple21 b c))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 a (tuple21 a (tuple21 b c)))))))
  (! (= (tb2t481 (t2tb481 i)) i) :pattern ((t2tb481 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 a1 (tuple2 a1 (tuple2 b1 c1))))) j)
     (= (t2tb481 (tb2t481 j)) j)) :pattern ((t2tb481 (tb2t481 j))) )))

;; mem_relation
  (assert
  (forall ((u (set a)) (v (set (tuple21 a (tuple21 b c)))) (r (set (tuple21 a
  (tuple21 a (tuple21 b c))))))
  (= (mem (set1 (tuple2 a1 (tuple2 a1 (tuple2 b1 c1)))) (t2tb443 r)
  (relation (tuple2 a1 (tuple2 b1 c1)) a1 (t2tb1 u) (t2tb261 v)))
  (forall ((x a) (y (tuple21 a (tuple21 b c))))
  (=> (mem (tuple2 a1 (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 a1 (tuple2 a1 (tuple2 b1 c1)) (t2tb2 x) (t2tb260 y)) (t2tb443 r))
  (and (mem1 x u) (mem14 y v)))))))

(declare-fun t2tb324 ((set (set (tuple21 a (set (tuple21 a c)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 a (set (tuple21 a c))))))) (sort
  (set1 (set1 (tuple2 a1 (set1 (tuple2 a1 c1))))) (t2tb324 x))))

(declare-fun tb2t324 (uni) (set (set (tuple21 a (set (tuple21 a c))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 a (set (tuple21 a c)))))))
  (! (= (tb2t324 (t2tb324 i)) i) :pattern ((t2tb324 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 a1 (set1 (tuple2 a1 c1))))) j)
     (= (t2tb324 (tb2t324 j)) j)) :pattern ((t2tb324 (tb2t324 j))) )))

;; mem_relation
  (assert
  (forall ((u (set a)) (v (set (set (tuple21 a c)))) (r (set (tuple21 a
  (set (tuple21 a c))))))
  (= (mem (set1 (tuple2 a1 (set1 (tuple2 a1 c1)))) (t2tb254 r)
  (relation (set1 (tuple2 a1 c1)) a1 (t2tb1 u) (t2tb128 v)))
  (forall ((x a) (y (set (tuple21 a c))))
  (=> (mem (tuple2 a1 (set1 (tuple2 a1 c1)))
  (Tuple2 a1 (set1 (tuple2 a1 c1)) (t2tb2 x) (t2tb129 y)) (t2tb254 r))
  (and (mem1 x u) (mem11 y v)))))))

(declare-fun t2tb325 ((set (set (tuple21 a (tuple21 a c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 a (tuple21 a c)))))) (sort
  (set1 (set1 (tuple2 a1 (tuple2 a1 c1)))) (t2tb325 x))))

(declare-fun tb2t325 (uni) (set (set (tuple21 a (tuple21 a c)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 a (tuple21 a c))))))
  (! (= (tb2t325 (t2tb325 i)) i) :pattern ((t2tb325 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 a1 (tuple2 a1 c1)))) j)
     (= (t2tb325 (tb2t325 j)) j)) :pattern ((t2tb325 (tb2t325 j))) )))

;; mem_relation
  (assert
  (forall ((u (set a)) (v (set (tuple21 a c))) (r (set (tuple21 a (tuple21 a
  c)))))
  (= (mem (set1 (tuple2 a1 (tuple2 a1 c1))) (t2tb256 r)
  (relation (tuple2 a1 c1) a1 (t2tb1 u) (t2tb129 v)))
  (forall ((x a) (y (tuple21 a c)))
  (=> (mem (tuple2 a1 (tuple2 a1 c1))
  (Tuple2 a1 (tuple2 a1 c1) (t2tb2 x) (t2tb133 y)) (t2tb256 r))
  (and (mem1 x u) (mem10 y v)))))))

;; mem_relation
  (assert
  (forall ((u (set a)) (v (set (tuple21 b c))) (r (set (tuple21 a (tuple21 b
  c)))))
  (= (mem15 r (tb2t327 (relation (tuple2 b1 c1) a1 (t2tb1 u) (t2tb131 v))))
  (forall ((x a) (y (tuple21 b c)))
  (=> (mem14 (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 y))) r)
  (and (mem1 x u) (mem8 y v)))))))

;; mem_relation
  (assert
  (forall ((u (set a)) (v (set c)) (r (set (tuple21 a c))))
  (= (mem11 r (tb2t128 (relation c1 a1 (t2tb1 u) (t2tb132 v))))
  (forall ((x a) (y c))
  (=> (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y))) r)
  (and (mem1 x u) (mem7 y v)))))))

(declare-fun t2tb57 ((set (set (tuple21 a (set (tuple21 a b)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 a (set (tuple21 a b))))))) (sort
  (set1 (set1 (tuple2 a1 (set1 (tuple2 a1 b1))))) (t2tb57 x))))

(declare-fun tb2t57 (uni) (set (set (tuple21 a (set (tuple21 a b))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 a (set (tuple21 a b)))))))
  (! (= (tb2t57 (t2tb57 i)) i) :pattern ((t2tb57 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 a1 (set1 (tuple2 a1 b1))))) j)
     (= (t2tb57 (tb2t57 j)) j)) :pattern ((t2tb57 (tb2t57 j))) )))

;; mem_relation
  (assert
  (forall ((u (set a)) (v (set (set (tuple21 a b)))) (r (set (tuple21 a
  (set (tuple21 a b))))))
  (= (mem (set1 (tuple2 a1 (set1 (tuple2 a1 b1)))) (t2tb39 r)
  (relation (set1 (tuple2 a1 b1)) a1 (t2tb1 u) (t2tb10 v)))
  (forall ((x a) (y (set (tuple21 a b))))
  (=> (mem (tuple2 a1 (set1 (tuple2 a1 b1)))
  (Tuple2 a1 (set1 (tuple2 a1 b1)) (t2tb2 x) (t2tb11 y)) (t2tb39 r))
  (and (mem1 x u) (mem4 y v)))))))

(declare-fun t2tb58 ((set (set (tuple21 a (tuple21 a b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 a (tuple21 a b)))))) (sort
  (set1 (set1 (tuple2 a1 (tuple2 a1 b1)))) (t2tb58 x))))

(declare-fun tb2t58 (uni) (set (set (tuple21 a (tuple21 a b)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 a (tuple21 a b))))))
  (! (= (tb2t58 (t2tb58 i)) i) :pattern ((t2tb58 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 a1 (tuple2 a1 b1)))) j)
     (= (t2tb58 (tb2t58 j)) j)) :pattern ((t2tb58 (tb2t58 j))) )))

;; mem_relation
  (assert
  (forall ((u (set a)) (v (set (tuple21 a b))) (r (set (tuple21 a (tuple21 a
  b)))))
  (= (mem (set1 (tuple2 a1 (tuple2 a1 b1))) (t2tb41 r)
  (relation (tuple2 a1 b1) a1 (t2tb1 u) (t2tb11 v)))
  (forall ((x a) (y (tuple21 a b)))
  (=> (mem (tuple2 a1 (tuple2 a1 b1))
  (Tuple2 a1 (tuple2 a1 b1) (t2tb2 x) (t2tb13 y)) (t2tb41 r))
  (and (mem1 x u) (mem3 y v)))))))

;; mem_relation
  (assert
  (forall ((u (set a)) (v (set b)) (r (set (tuple21 a b))))
  (= (mem4 r (tb2t10 (relation b1 a1 (t2tb1 u) (t2tb12 v))))
  (forall ((x a) (y b))
  (=> (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y))) r)
  (and (mem1 x u) (mem2 y v)))))))

(declare-fun t2tb3 ((set (set (tuple21 a a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 a a))))) (sort (set1 (set1 (tuple2 a1 a1)))
  (t2tb3 x))))

(declare-fun tb2t3 (uni) (set (set (tuple21 a a))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 a a)))))
  (! (= (tb2t3 (t2tb3 i)) i) :pattern ((t2tb3 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 a1 a1))) j) (= (t2tb3 (tb2t3 j)) j)) :pattern (
  (t2tb3 (tb2t3 j))) )))

;; mem_relation
  (assert
  (forall ((u (set a)) (v (set a)) (r (set (tuple21 a a))))
  (= (mem (set1 (tuple2 a1 a1)) (t2tb4 r)
  (relation a1 a1 (t2tb1 u) (t2tb1 v)))
  (forall ((x a) (y a))
  (=> (mem (tuple2 a1 a1) (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y)) (t2tb4 r))
  (and (mem1 x u) (mem1 y v)))))))

;; mem_relation
  (assert
  (forall ((b2 ty))
  (forall ((u (set a)) (v uni) (r uni))
  (and
  (=> (mem (set1 (tuple2 a1 b2)) r (relation b2 a1 (t2tb1 u) v))
  (forall ((x a) (y uni))
  (=> (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) y) r)
  (and (mem1 x u) (mem b2 y v)))))
  (=>
  (forall ((x a) (y uni))
  (=> (sort b2 y)
  (=> (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) y) r)
  (and (mem1 x u) (mem b2 y v))))) (mem (set1 (tuple2 a1 b2)) r
  (relation b2 a1 (t2tb1 u) v)))))))

;; mem_relation
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((u uni) (v uni) (r uni))
  (and
  (=> (mem (set1 (tuple2 a2 b2)) r (relation b2 a2 u v))
  (forall ((x uni) (y uni))
  (=> (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) r)
  (and (mem a2 x u) (mem b2 y v)))))
  (=>
  (forall ((x uni) (y uni))
  (=> (sort a2 x)
  (=> (sort b2 y)
  (=> (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) r)
  (and (mem a2 x u) (mem b2 y v)))))) (mem (set1 (tuple2 a2 b2)) r
  (relation b2 a2 u v)))))))

(declare-fun inverse (ty ty uni) uni)

;; inverse_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni)) (sort (set1 (tuple2 b2 a2)) (inverse b2 a2 x)))))

;; mem_inverse
  (assert
  (forall ((p (set (tuple21 (tuple21 b c) a))) (x a) (y (tuple21 b c)))
  (= (mem14 (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 y)))
  (tb2t261 (inverse a1 (tuple2 b1 c1) (t2tb206 p)))) (mem
  (tuple2 (tuple2 b1 c1) a1) (Tuple2 (tuple2 b1 c1) a1 (t2tb134 y) (t2tb2 x))
  (t2tb206 p)))))

;; mem_inverse
  (assert
  (forall ((p (set (tuple21 c b))) (x b) (y c))
  (= (mem8 (tb2t134 (Tuple2 b1 c1 (t2tb14 x) (t2tb135 y)))
  (tb2t131 (inverse b1 c1 (t2tb222 p)))) (mem (tuple2 c1 b1)
  (Tuple2 c1 b1 (t2tb135 y) (t2tb14 x)) (t2tb222 p)))))

;; mem_inverse
  (assert
  (forall ((p (set (tuple21 c a))) (x a) (y c))
  (= (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y)))
  (tb2t129 (inverse a1 c1 (t2tb224 p)))) (mem (tuple2 c1 a1)
  (Tuple2 c1 a1 (t2tb135 y) (t2tb2 x)) (t2tb224 p)))))

;; mem_inverse
  (assert
  (forall ((p (set (tuple21 b c))) (x c) (y b))
  (= (mem (tuple2 c1 b1) (Tuple2 c1 b1 (t2tb135 x) (t2tb14 y))
  (inverse c1 b1 (t2tb131 p))) (mem8
  (tb2t134 (Tuple2 b1 c1 (t2tb14 y) (t2tb135 x))) p))))

;; mem_inverse
  (assert
  (forall ((p (set (tuple21 b a))) (x a) (y b))
  (= (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y)))
  (tb2t11 (inverse a1 b1 (t2tb37 p)))) (mem (tuple2 b1 a1)
  (Tuple2 b1 a1 (t2tb14 y) (t2tb2 x)) (t2tb37 p)))))

;; mem_inverse
  (assert
  (forall ((p (set (tuple21 a (tuple21 b c)))) (x (tuple21 b c)) (y a))
  (= (mem (tuple2 (tuple2 b1 c1) a1)
  (Tuple2 (tuple2 b1 c1) a1 (t2tb134 x) (t2tb2 y))
  (inverse (tuple2 b1 c1) a1 (t2tb261 p))) (mem14
  (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 y) (t2tb134 x))) p))))

;; mem_inverse
  (assert
  (forall ((p (set (tuple21 a c))) (x c) (y a))
  (= (mem (tuple2 c1 a1) (Tuple2 c1 a1 (t2tb135 x) (t2tb2 y))
  (inverse c1 a1 (t2tb129 p))) (mem10
  (tb2t133 (Tuple2 a1 c1 (t2tb2 y) (t2tb135 x))) p))))

;; mem_inverse
  (assert
  (forall ((p (set (tuple21 a b))) (x b) (y a))
  (= (mem (tuple2 b1 a1) (Tuple2 b1 a1 (t2tb14 x) (t2tb2 y))
  (inverse b1 a1 (t2tb11 p))) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 y) (t2tb14 x))) p))))

;; mem_inverse
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((p uni) (x uni) (y uni))
  (= (mem (tuple2 b2 a2) (Tuple2 b2 a2 x y) (inverse b2 a2 p)) (mem
  (tuple2 a2 b2) (Tuple2 a2 b2 y x) p)))))

(declare-fun dom (ty ty uni) uni)

;; dom_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni)) (sort (set1 a2) (dom b2 a2 x)))))

;; mem_dom
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (x (set (tuple21 a (tuple21 b c)))))
  (and
  (=> (mem15 x (tb2t327 (dom b2 (set1 (tuple2 a1 (tuple2 b1 c1))) p)))
  (exists ((b3 uni))
  (and (sort b2 b3) (mem (tuple2 (set1 (tuple2 a1 (tuple2 b1 c1))) b2)
  (Tuple2 (set1 (tuple2 a1 (tuple2 b1 c1))) b2 (t2tb261 x) b3) p))))
  (=>
  (exists ((b3 uni)) (mem (tuple2 (set1 (tuple2 a1 (tuple2 b1 c1))) b2)
  (Tuple2 (set1 (tuple2 a1 (tuple2 b1 c1))) b2 (t2tb261 x) b3) p)) (mem15 x
  (tb2t327 (dom b2 (set1 (tuple2 a1 (tuple2 b1 c1))) p))))))))

;; mem_dom
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (x (tuple21 a (tuple21 b c))))
  (and
  (=> (mem14 x (tb2t261 (dom b2 (tuple2 a1 (tuple2 b1 c1)) p)))
  (exists ((b3 uni))
  (and (sort b2 b3) (mem (tuple2 (tuple2 a1 (tuple2 b1 c1)) b2)
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) b2 (t2tb260 x) b3) p))))
  (=>
  (exists ((b3 uni)) (mem (tuple2 (tuple2 a1 (tuple2 b1 c1)) b2)
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) b2 (t2tb260 x) b3) p)) (mem14 x
  (tb2t261 (dom b2 (tuple2 a1 (tuple2 b1 c1)) p))))))))

;; mem_dom
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (x (set (tuple21 a c))))
  (and
  (=> (mem11 x (tb2t128 (dom b2 (set1 (tuple2 a1 c1)) p)))
  (exists ((b3 uni))
  (and (sort b2 b3) (mem (tuple2 (set1 (tuple2 a1 c1)) b2)
  (Tuple2 (set1 (tuple2 a1 c1)) b2 (t2tb129 x) b3) p))))
  (=>
  (exists ((b3 uni)) (mem (tuple2 (set1 (tuple2 a1 c1)) b2)
  (Tuple2 (set1 (tuple2 a1 c1)) b2 (t2tb129 x) b3) p)) (mem11 x
  (tb2t128 (dom b2 (set1 (tuple2 a1 c1)) p))))))))

;; mem_dom
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (x (tuple21 a c)))
  (and
  (=> (mem10 x (tb2t129 (dom b2 (tuple2 a1 c1) p)))
  (exists ((b3 uni))
  (and (sort b2 b3) (mem (tuple2 (tuple2 a1 c1) b2)
  (Tuple2 (tuple2 a1 c1) b2 (t2tb133 x) b3) p))))
  (=>
  (exists ((b3 uni)) (mem (tuple2 (tuple2 a1 c1) b2)
  (Tuple2 (tuple2 a1 c1) b2 (t2tb133 x) b3) p)) (mem10 x
  (tb2t129 (dom b2 (tuple2 a1 c1) p))))))))

;; mem_dom
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (x (tuple21 b c)))
  (and
  (=> (mem8 x (tb2t131 (dom b2 (tuple2 b1 c1) p)))
  (exists ((b3 uni))
  (and (sort b2 b3) (mem (tuple2 (tuple2 b1 c1) b2)
  (Tuple2 (tuple2 b1 c1) b2 (t2tb134 x) b3) p))))
  (=>
  (exists ((b3 uni)) (mem (tuple2 (tuple2 b1 c1) b2)
  (Tuple2 (tuple2 b1 c1) b2 (t2tb134 x) b3) p)) (mem8 x
  (tb2t131 (dom b2 (tuple2 b1 c1) p))))))))

;; mem_dom
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (x c))
  (and
  (=> (mem7 x (tb2t132 (dom b2 c1 p)))
  (exists ((b3 uni))
  (and (sort b2 b3) (mem (tuple2 c1 b2) (Tuple2 c1 b2 (t2tb135 x) b3) p))))
  (=>
  (exists ((b3 uni)) (mem (tuple2 c1 b2) (Tuple2 c1 b2 (t2tb135 x) b3) p))
  (mem7 x (tb2t132 (dom b2 c1 p))))))))

;; mem_dom
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (x (set (tuple21 a b))))
  (and
  (=> (mem4 x (tb2t10 (dom b2 (set1 (tuple2 a1 b1)) p)))
  (exists ((b3 uni))
  (and (sort b2 b3) (mem (tuple2 (set1 (tuple2 a1 b1)) b2)
  (Tuple2 (set1 (tuple2 a1 b1)) b2 (t2tb11 x) b3) p))))
  (=>
  (exists ((b3 uni)) (mem (tuple2 (set1 (tuple2 a1 b1)) b2)
  (Tuple2 (set1 (tuple2 a1 b1)) b2 (t2tb11 x) b3) p)) (mem4 x
  (tb2t10 (dom b2 (set1 (tuple2 a1 b1)) p))))))))

;; mem_dom
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (x (tuple21 a b)))
  (and
  (=> (mem3 x (tb2t11 (dom b2 (tuple2 a1 b1) p)))
  (exists ((b3 uni))
  (and (sort b2 b3) (mem (tuple2 (tuple2 a1 b1) b2)
  (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) b3) p))))
  (=>
  (exists ((b3 uni)) (mem (tuple2 (tuple2 a1 b1) b2)
  (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) b3) p)) (mem3 x
  (tb2t11 (dom b2 (tuple2 a1 b1) p))))))))

;; mem_dom
  (assert
  (forall ((p (set (tuple21 b c))) (x b))
  (= (mem2 x (tb2t12 (dom c1 b1 (t2tb131 p))))
  (exists ((b2 c)) (mem8 (tb2t134 (Tuple2 b1 c1 (t2tb14 x) (t2tb135 b2))) p)))))

;; mem_dom
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (x b))
  (and
  (=> (mem2 x (tb2t12 (dom b2 b1 p)))
  (exists ((b3 uni))
  (and (sort b2 b3) (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) b3) p))))
  (=> (exists ((b3 uni)) (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) b3) p))
  (mem2 x (tb2t12 (dom b2 b1 p))))))))

;; mem_dom
  (assert
  (forall ((p (set (tuple21 a (tuple21 b c)))) (x a))
  (= (mem1 x (tb2t1 (dom (tuple2 b1 c1) a1 (t2tb261 p))))
  (exists ((b2 (tuple21 b c))) (mem14
  (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 b2))) p)))))

;; mem_dom
  (assert
  (forall ((p (set (tuple21 a c))) (x a))
  (= (mem1 x (tb2t1 (dom c1 a1 (t2tb129 p))))
  (exists ((b2 c)) (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 b2))) p)))))

;; mem_dom
  (assert
  (forall ((p (set (tuple21 a b))) (x a))
  (= (mem1 x (tb2t1 (dom b1 a1 (t2tb11 p))))
  (exists ((b2 b)) (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 b2))) p)))))

;; mem_dom
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (x a))
  (and
  (=> (mem1 x (tb2t1 (dom b2 a1 p)))
  (exists ((b3 uni))
  (and (sort b2 b3) (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) b3) p))))
  (=> (exists ((b3 uni)) (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) b3) p))
  (mem1 x (tb2t1 (dom b2 a1 p))))))))

;; mem_dom
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((p uni) (x uni))
  (and
  (=> (mem a2 x (dom b2 a2 p))
  (exists ((b3 uni))
  (and (sort b2 b3) (mem (tuple2 a2 b2) (Tuple2 a2 b2 x b3) p))))
  (=> (exists ((b3 uni)) (mem (tuple2 a2 b2) (Tuple2 a2 b2 x b3) p)) (mem a2
  x (dom b2 a2 p)))))))

(declare-fun ran (ty ty uni) uni)

;; ran_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni)) (sort (set1 b2) (ran b2 a2 x)))))

;; mem_ran
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (x (set (tuple21 a (tuple21 b c)))))
  (and
  (=> (mem15 x (tb2t327 (ran (set1 (tuple2 a1 (tuple2 b1 c1))) a2 p)))
  (exists ((a3 uni))
  (and (sort a2 a3) (mem (tuple2 a2 (set1 (tuple2 a1 (tuple2 b1 c1))))
  (Tuple2 a2 (set1 (tuple2 a1 (tuple2 b1 c1))) a3 (t2tb261 x)) p))))
  (=>
  (exists ((a3 uni)) (mem (tuple2 a2 (set1 (tuple2 a1 (tuple2 b1 c1))))
  (Tuple2 a2 (set1 (tuple2 a1 (tuple2 b1 c1))) a3 (t2tb261 x)) p)) (mem15 x
  (tb2t327 (ran (set1 (tuple2 a1 (tuple2 b1 c1))) a2 p))))))))

;; mem_ran
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (x (tuple21 a (tuple21 b c))))
  (and
  (=> (mem14 x (tb2t261 (ran (tuple2 a1 (tuple2 b1 c1)) a2 p)))
  (exists ((a3 uni))
  (and (sort a2 a3) (mem (tuple2 a2 (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 a2 (tuple2 a1 (tuple2 b1 c1)) a3 (t2tb260 x)) p))))
  (=>
  (exists ((a3 uni)) (mem (tuple2 a2 (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 a2 (tuple2 a1 (tuple2 b1 c1)) a3 (t2tb260 x)) p)) (mem14 x
  (tb2t261 (ran (tuple2 a1 (tuple2 b1 c1)) a2 p))))))))

;; mem_ran
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (x (set (tuple21 a c))))
  (and
  (=> (mem11 x (tb2t128 (ran (set1 (tuple2 a1 c1)) a2 p)))
  (exists ((a3 uni))
  (and (sort a2 a3) (mem (tuple2 a2 (set1 (tuple2 a1 c1)))
  (Tuple2 a2 (set1 (tuple2 a1 c1)) a3 (t2tb129 x)) p))))
  (=>
  (exists ((a3 uni)) (mem (tuple2 a2 (set1 (tuple2 a1 c1)))
  (Tuple2 a2 (set1 (tuple2 a1 c1)) a3 (t2tb129 x)) p)) (mem11 x
  (tb2t128 (ran (set1 (tuple2 a1 c1)) a2 p))))))))

;; mem_ran
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (x (tuple21 a c)))
  (and
  (=> (mem10 x (tb2t129 (ran (tuple2 a1 c1) a2 p)))
  (exists ((a3 uni))
  (and (sort a2 a3) (mem (tuple2 a2 (tuple2 a1 c1))
  (Tuple2 a2 (tuple2 a1 c1) a3 (t2tb133 x)) p))))
  (=>
  (exists ((a3 uni)) (mem (tuple2 a2 (tuple2 a1 c1))
  (Tuple2 a2 (tuple2 a1 c1) a3 (t2tb133 x)) p)) (mem10 x
  (tb2t129 (ran (tuple2 a1 c1) a2 p))))))))

;; mem_ran
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (x (tuple21 b c)))
  (and
  (=> (mem8 x (tb2t131 (ran (tuple2 b1 c1) a2 p)))
  (exists ((a3 uni))
  (and (sort a2 a3) (mem (tuple2 a2 (tuple2 b1 c1))
  (Tuple2 a2 (tuple2 b1 c1) a3 (t2tb134 x)) p))))
  (=>
  (exists ((a3 uni)) (mem (tuple2 a2 (tuple2 b1 c1))
  (Tuple2 a2 (tuple2 b1 c1) a3 (t2tb134 x)) p)) (mem8 x
  (tb2t131 (ran (tuple2 b1 c1) a2 p))))))))

;; mem_ran
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (x c))
  (and
  (=> (mem7 x (tb2t132 (ran c1 a2 p)))
  (exists ((a3 uni))
  (and (sort a2 a3) (mem (tuple2 a2 c1) (Tuple2 a2 c1 a3 (t2tb135 x)) p))))
  (=>
  (exists ((a3 uni)) (mem (tuple2 a2 c1) (Tuple2 a2 c1 a3 (t2tb135 x)) p))
  (mem7 x (tb2t132 (ran c1 a2 p))))))))

;; mem_ran
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (x (set (tuple21 a b))))
  (and
  (=> (mem4 x (tb2t10 (ran (set1 (tuple2 a1 b1)) a2 p)))
  (exists ((a3 uni))
  (and (sort a2 a3) (mem (tuple2 a2 (set1 (tuple2 a1 b1)))
  (Tuple2 a2 (set1 (tuple2 a1 b1)) a3 (t2tb11 x)) p))))
  (=>
  (exists ((a3 uni)) (mem (tuple2 a2 (set1 (tuple2 a1 b1)))
  (Tuple2 a2 (set1 (tuple2 a1 b1)) a3 (t2tb11 x)) p)) (mem4 x
  (tb2t10 (ran (set1 (tuple2 a1 b1)) a2 p))))))))

;; mem_ran
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (x (tuple21 a b)))
  (and
  (=> (mem3 x (tb2t11 (ran (tuple2 a1 b1) a2 p)))
  (exists ((a3 uni))
  (and (sort a2 a3) (mem (tuple2 a2 (tuple2 a1 b1))
  (Tuple2 a2 (tuple2 a1 b1) a3 (t2tb13 x)) p))))
  (=>
  (exists ((a3 uni)) (mem (tuple2 a2 (tuple2 a1 b1))
  (Tuple2 a2 (tuple2 a1 b1) a3 (t2tb13 x)) p)) (mem3 x
  (tb2t11 (ran (tuple2 a1 b1) a2 p))))))))

;; mem_ran
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (x b))
  (and
  (=> (mem2 x (tb2t12 (ran b1 a2 p)))
  (exists ((a3 uni))
  (and (sort a2 a3) (mem (tuple2 a2 b1) (Tuple2 a2 b1 a3 (t2tb14 x)) p))))
  (=> (exists ((a3 uni)) (mem (tuple2 a2 b1) (Tuple2 a2 b1 a3 (t2tb14 x)) p))
  (mem2 x (tb2t12 (ran b1 a2 p))))))))

;; mem_ran
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (x a))
  (and
  (=> (mem1 x (tb2t1 (ran a1 a2 p)))
  (exists ((a3 uni))
  (and (sort a2 a3) (mem (tuple2 a2 a1) (Tuple2 a2 a1 a3 (t2tb2 x)) p))))
  (=> (exists ((a3 uni)) (mem (tuple2 a2 a1) (Tuple2 a2 a1 a3 (t2tb2 x)) p))
  (mem1 x (tb2t1 (ran a1 a2 p))))))))

;; mem_ran
  (assert
  (forall ((p (set (tuple21 b c))) (x c))
  (= (mem7 x (tb2t132 (ran c1 b1 (t2tb131 p))))
  (exists ((a2 b)) (mem8 (tb2t134 (Tuple2 b1 c1 (t2tb14 a2) (t2tb135 x))) p)))))

;; mem_ran
  (assert
  (forall ((p (set (tuple21 a (tuple21 b c)))) (x (tuple21 b c)))
  (= (mem8 x (tb2t131 (ran (tuple2 b1 c1) a1 (t2tb261 p))))
  (exists ((a2 a)) (mem14
  (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 a2) (t2tb134 x))) p)))))

;; mem_ran
  (assert
  (forall ((p (set (tuple21 a c))) (x c))
  (= (mem7 x (tb2t132 (ran c1 a1 (t2tb129 p))))
  (exists ((a2 a)) (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 a2) (t2tb135 x))) p)))))

;; mem_ran
  (assert
  (forall ((p (set (tuple21 a b))) (x b))
  (= (mem2 x (tb2t12 (ran b1 a1 (t2tb11 p))))
  (exists ((a2 a)) (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 a2) (t2tb14 x))) p)))))

;; mem_ran
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((p uni) (x uni))
  (and
  (=> (mem b2 x (ran b2 a2 p))
  (exists ((a3 uni))
  (and (sort a2 a3) (mem (tuple2 a2 b2) (Tuple2 a2 b2 a3 x) p))))
  (=> (exists ((a3 uni)) (mem (tuple2 a2 b2) (Tuple2 a2 b2 a3 x) p)) (mem b2
  x (ran b2 a2 p)))))))

(declare-fun semicolon (ty ty ty uni uni) uni)

;; semicolon_sort
  (assert
  (forall ((a2 ty) (b2 ty) (c2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (tuple2 a2 c2))
  (semicolon c2 b2 a2 x x1)))))

;; mem_semicolon
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (q (set (tuple21 b c))) (x uni) (y c))
  (= (mem (tuple2 a2 c1) (Tuple2 a2 c1 x (t2tb135 y))
  (semicolon c1 b1 a2 p (t2tb131 q)))
  (exists ((b2 b))
  (and (mem (tuple2 a2 b1) (Tuple2 a2 b1 x (t2tb14 b2)) p) (mem8
  (tb2t134 (Tuple2 b1 c1 (t2tb14 b2) (t2tb135 y))) q)))))))

;; mem_semicolon
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (q (set (tuple21 a (tuple21 b c)))) (x uni) (y (tuple21 b
  c)))
  (= (mem (tuple2 a2 (tuple2 b1 c1)) (Tuple2 a2 (tuple2 b1 c1) x (t2tb134 y))
  (semicolon (tuple2 b1 c1) a1 a2 p (t2tb261 q)))
  (exists ((b2 a))
  (and (mem (tuple2 a2 a1) (Tuple2 a2 a1 x (t2tb2 b2)) p) (mem14
  (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 b2) (t2tb134 y))) q)))))))

;; mem_semicolon
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (q (set (tuple21 a c))) (x uni) (y c))
  (= (mem (tuple2 a2 c1) (Tuple2 a2 c1 x (t2tb135 y))
  (semicolon c1 a1 a2 p (t2tb129 q)))
  (exists ((b2 a))
  (and (mem (tuple2 a2 a1) (Tuple2 a2 a1 x (t2tb2 b2)) p) (mem10
  (tb2t133 (Tuple2 a1 c1 (t2tb2 b2) (t2tb135 y))) q)))))))

;; mem_semicolon
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (q (set (tuple21 a b))) (x uni) (y b))
  (= (mem (tuple2 a2 b1) (Tuple2 a2 b1 x (t2tb14 y))
  (semicolon b1 a1 a2 p (t2tb11 q)))
  (exists ((b2 a))
  (and (mem (tuple2 a2 a1) (Tuple2 a2 a1 x (t2tb2 b2)) p) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 b2) (t2tb14 y))) q)))))))

;; mem_semicolon
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (q uni) (x b) (y c))
  (and
  (=> (mem8 (tb2t134 (Tuple2 b1 c1 (t2tb14 x) (t2tb135 y)))
  (tb2t131 (semicolon c1 b2 b1 p q)))
  (exists ((b3 uni))
  (and (sort b2 b3)
  (and (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) b3) p) (mem
  (tuple2 b2 c1) (Tuple2 b2 c1 b3 (t2tb135 y)) q)))))
  (=>
  (exists ((b3 uni))
  (and (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) b3) p) (mem
  (tuple2 b2 c1) (Tuple2 b2 c1 b3 (t2tb135 y)) q))) (mem8
  (tb2t134 (Tuple2 b1 c1 (t2tb14 x) (t2tb135 y)))
  (tb2t131 (semicolon c1 b2 b1 p q))))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 b c))) (q (set (tuple21 c c))) (x b) (y c))
  (= (mem8 (tb2t134 (Tuple2 b1 c1 (t2tb14 x) (t2tb135 y)))
  (tb2t131 (semicolon c1 c1 b1 (t2tb131 p) (t2tb216 q))))
  (exists ((b2 c))
  (and (mem8 (tb2t134 (Tuple2 b1 c1 (t2tb14 x) (t2tb135 b2))) p) (mem
  (tuple2 c1 c1) (Tuple2 c1 c1 (t2tb135 b2) (t2tb135 y)) (t2tb216 q)))))))

;; mem_semicolon
  (assert
  (forall ((c2 ty))
  (forall ((p (set (tuple21 b c))) (q uni) (x b) (y uni))
  (= (mem (tuple2 b1 c2) (Tuple2 b1 c2 (t2tb14 x) y)
  (semicolon c2 c1 b1 (t2tb131 p) q))
  (exists ((b2 c))
  (and (mem8 (tb2t134 (Tuple2 b1 c1 (t2tb14 x) (t2tb135 b2))) p) (mem
  (tuple2 c1 c2) (Tuple2 c1 c2 (t2tb135 b2) y) q)))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 b b))) (q (set (tuple21 b c))) (x b) (y c))
  (= (mem8 (tb2t134 (Tuple2 b1 c1 (t2tb14 x) (t2tb135 y)))
  (tb2t131 (semicolon c1 b1 b1 (t2tb35 p) (t2tb131 q))))
  (exists ((b2 b))
  (and (mem (tuple2 b1 b1) (Tuple2 b1 b1 (t2tb14 x) (t2tb14 b2)) (t2tb35 p))
  (mem8 (tb2t134 (Tuple2 b1 c1 (t2tb14 b2) (t2tb135 y))) q))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 b a))) (q (set (tuple21 a c))) (x b) (y c))
  (= (mem8 (tb2t134 (Tuple2 b1 c1 (t2tb14 x) (t2tb135 y)))
  (tb2t131 (semicolon c1 a1 b1 (t2tb37 p) (t2tb129 q))))
  (exists ((b2 a))
  (and (mem (tuple2 b1 a1) (Tuple2 b1 a1 (t2tb14 x) (t2tb2 b2)) (t2tb37 p))
  (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 b2) (t2tb135 y))) q))))))

;; mem_semicolon
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (q uni) (x a) (y (tuple21 b c)))
  (and
  (=> (mem14 (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 y)))
  (tb2t261 (semicolon (tuple2 b1 c1) b2 a1 p q)))
  (exists ((b3 uni))
  (and (sort b2 b3)
  (and (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) b3) p) (mem
  (tuple2 b2 (tuple2 b1 c1)) (Tuple2 b2 (tuple2 b1 c1) b3 (t2tb134 y)) q)))))
  (=>
  (exists ((b3 uni))
  (and (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) b3) p) (mem
  (tuple2 b2 (tuple2 b1 c1)) (Tuple2 b2 (tuple2 b1 c1) b3 (t2tb134 y)) q)))
  (mem14 (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 y)))
  (tb2t261 (semicolon (tuple2 b1 c1) b2 a1 p q))))))))

;; mem_semicolon
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (q uni) (x a) (y c))
  (and
  (=> (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y)))
  (tb2t129 (semicolon c1 b2 a1 p q)))
  (exists ((b3 uni))
  (and (sort b2 b3)
  (and (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) b3) p) (mem (tuple2 b2 c1)
  (Tuple2 b2 c1 b3 (t2tb135 y)) q)))))
  (=>
  (exists ((b3 uni))
  (and (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) b3) p) (mem (tuple2 b2 c1)
  (Tuple2 b2 c1 b3 (t2tb135 y)) q))) (mem10
  (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y)))
  (tb2t129 (semicolon c1 b2 a1 p q))))))))

;; mem_semicolon
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (q uni) (x a) (y b))
  (and
  (=> (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y)))
  (tb2t11 (semicolon b1 b2 a1 p q)))
  (exists ((b3 uni))
  (and (sort b2 b3)
  (and (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) b3) p) (mem (tuple2 b2 b1)
  (Tuple2 b2 b1 b3 (t2tb14 y)) q)))))
  (=>
  (exists ((b3 uni))
  (and (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) b3) p) (mem (tuple2 b2 b1)
  (Tuple2 b2 b1 b3 (t2tb14 y)) q))) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y)))
  (tb2t11 (semicolon b1 b2 a1 p q))))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 a (tuple21 b c)))) (q (set (tuple21 (tuple21 b c)
  (tuple21 b c)))) (x a) (y (tuple21 b c)))
  (= (mem14 (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 y)))
  (tb2t261
  (semicolon (tuple2 b1 c1) (tuple2 b1 c1) a1 (t2tb261 p) (t2tb196 q))))
  (exists ((b2 (tuple21 b c)))
  (and (mem14 (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 b2))) p)
  (mem (tuple2 (tuple2 b1 c1) (tuple2 b1 c1))
  (Tuple2 (tuple2 b1 c1) (tuple2 b1 c1) (t2tb134 b2) (t2tb134 y))
  (t2tb196 q)))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 a (tuple21 b c)))) (q (set (tuple21 (tuple21 b c)
  c))) (x a) (y c))
  (= (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y)))
  (tb2t129 (semicolon c1 (tuple2 b1 c1) a1 (t2tb261 p) (t2tb198 q))))
  (exists ((b2 (tuple21 b c)))
  (and (mem14 (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 b2))) p)
  (mem (tuple2 (tuple2 b1 c1) c1)
  (Tuple2 (tuple2 b1 c1) c1 (t2tb134 b2) (t2tb135 y)) (t2tb198 q)))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 a (tuple21 b c)))) (q (set (tuple21 (tuple21 b c)
  b))) (x a) (y b))
  (= (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y)))
  (tb2t11 (semicolon b1 (tuple2 b1 c1) a1 (t2tb261 p) (t2tb204 q))))
  (exists ((b2 (tuple21 b c)))
  (and (mem14 (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 b2))) p)
  (mem (tuple2 (tuple2 b1 c1) b1)
  (Tuple2 (tuple2 b1 c1) b1 (t2tb134 b2) (t2tb14 y)) (t2tb204 q)))))))

;; mem_semicolon
  (assert
  (forall ((c2 ty))
  (forall ((p (set (tuple21 a (tuple21 b c)))) (q uni) (x a) (y uni))
  (= (mem (tuple2 a1 c2) (Tuple2 a1 c2 (t2tb2 x) y)
  (semicolon c2 (tuple2 b1 c1) a1 (t2tb261 p) q))
  (exists ((b2 (tuple21 b c)))
  (and (mem14 (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 b2))) p)
  (mem (tuple2 (tuple2 b1 c1) c2) (Tuple2 (tuple2 b1 c1) c2 (t2tb134 b2) y)
  q)))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 a c))) (q (set (tuple21 c (tuple21 b c)))) (x a)
  (y (tuple21 b c)))
  (= (mem14 (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 y)))
  (tb2t261 (semicolon (tuple2 b1 c1) c1 a1 (t2tb129 p) (t2tb215 q))))
  (exists ((b2 c))
  (and (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 b2))) p) (mem
  (tuple2 c1 (tuple2 b1 c1))
  (Tuple2 c1 (tuple2 b1 c1) (t2tb135 b2) (t2tb134 y)) (t2tb215 q)))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 a c))) (q (set (tuple21 c c))) (x a) (y c))
  (= (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y)))
  (tb2t129 (semicolon c1 c1 a1 (t2tb129 p) (t2tb216 q))))
  (exists ((b2 c))
  (and (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 b2))) p) (mem
  (tuple2 c1 c1) (Tuple2 c1 c1 (t2tb135 b2) (t2tb135 y)) (t2tb216 q)))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 a c))) (q (set (tuple21 c b))) (x a) (y b))
  (= (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y)))
  (tb2t11 (semicolon b1 c1 a1 (t2tb129 p) (t2tb222 q))))
  (exists ((b2 c))
  (and (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 b2))) p) (mem
  (tuple2 c1 b1) (Tuple2 c1 b1 (t2tb135 b2) (t2tb14 y)) (t2tb222 q)))))))

;; mem_semicolon
  (assert
  (forall ((c2 ty))
  (forall ((p (set (tuple21 a c))) (q uni) (x a) (y uni))
  (= (mem (tuple2 a1 c2) (Tuple2 a1 c2 (t2tb2 x) y)
  (semicolon c2 c1 a1 (t2tb129 p) q))
  (exists ((b2 c))
  (and (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 b2))) p) (mem
  (tuple2 c1 c2) (Tuple2 c1 c2 (t2tb135 b2) y) q)))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 a b))) (q (set (tuple21 b (tuple21 b c)))) (x a)
  (y (tuple21 b c)))
  (= (mem14 (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 y)))
  (tb2t261 (semicolon (tuple2 b1 c1) b1 a1 (t2tb11 p) (t2tb252 q))))
  (exists ((b2 b))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 b2))) p) (mem
  (tuple2 b1 (tuple2 b1 c1))
  (Tuple2 b1 (tuple2 b1 c1) (t2tb14 b2) (t2tb134 y)) (t2tb252 q)))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 a b))) (q (set (tuple21 b c))) (x a) (y c))
  (= (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y)))
  (tb2t129 (semicolon c1 b1 a1 (t2tb11 p) (t2tb131 q))))
  (exists ((b2 b))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 b2))) p) (mem8
  (tb2t134 (Tuple2 b1 c1 (t2tb14 b2) (t2tb135 y))) q))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 a b))) (q (set (tuple21 b b))) (x a) (y b))
  (= (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y)))
  (tb2t11 (semicolon b1 b1 a1 (t2tb11 p) (t2tb35 q))))
  (exists ((b2 b))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 b2))) p) (mem
  (tuple2 b1 b1) (Tuple2 b1 b1 (t2tb14 b2) (t2tb14 y)) (t2tb35 q)))))))

;; mem_semicolon
  (assert
  (forall ((c2 ty))
  (forall ((p (set (tuple21 a b))) (q uni) (x a) (y uni))
  (= (mem (tuple2 a1 c2) (Tuple2 a1 c2 (t2tb2 x) y)
  (semicolon c2 b1 a1 (t2tb11 p) q))
  (exists ((b2 b))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 b2))) p) (mem
  (tuple2 b1 c2) (Tuple2 b1 c2 (t2tb14 b2) y) q)))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 a a))) (q (set (tuple21 a (tuple21 b c)))) (x a)
  (y (tuple21 b c)))
  (= (mem14 (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 y)))
  (tb2t261 (semicolon (tuple2 b1 c1) a1 a1 (t2tb4 p) (t2tb261 q))))
  (exists ((b2 a))
  (and (mem (tuple2 a1 a1) (Tuple2 a1 a1 (t2tb2 x) (t2tb2 b2)) (t2tb4 p))
  (mem14 (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 b2) (t2tb134 y))) q))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 a a))) (q (set (tuple21 a c))) (x a) (y c))
  (= (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y)))
  (tb2t129 (semicolon c1 a1 a1 (t2tb4 p) (t2tb129 q))))
  (exists ((b2 a))
  (and (mem (tuple2 a1 a1) (Tuple2 a1 a1 (t2tb2 x) (t2tb2 b2)) (t2tb4 p))
  (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 b2) (t2tb135 y))) q))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 a a))) (q (set (tuple21 a b))) (x a) (y b))
  (= (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y)))
  (tb2t11 (semicolon b1 a1 a1 (t2tb4 p) (t2tb11 q))))
  (exists ((b2 a))
  (and (mem (tuple2 a1 a1) (Tuple2 a1 a1 (t2tb2 x) (t2tb2 b2)) (t2tb4 p))
  (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 b2) (t2tb14 y))) q))))))

;; mem_semicolon
  (assert
  (forall ((a2 ty) (b2 ty) (c2 ty))
  (forall ((p uni) (q uni) (x uni) (y uni))
  (and
  (=> (mem (tuple2 a2 c2) (Tuple2 a2 c2 x y) (semicolon c2 b2 a2 p q))
  (exists ((b3 uni))
  (and (sort b2 b3)
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x b3) p) (mem (tuple2 b2 c2)
  (Tuple2 b2 c2 b3 y) q)))))
  (=>
  (exists ((b3 uni))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x b3) p) (mem (tuple2 b2 c2)
  (Tuple2 b2 c2 b3 y) q))) (mem (tuple2 a2 c2) (Tuple2 a2 c2 x y)
  (semicolon c2 b2 a2 p q)))))))

(declare-fun semicolon_back (ty ty ty uni uni) uni)

;; semicolon_back_sort
  (assert
  (forall ((a2 ty) (b2 ty) (c2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (tuple2 a2 c2))
  (semicolon_back c2 b2 a2 x x1)))))

;; semicolon_back
  (assert
  (forall ((a2 ty) (b2 ty) (c2 ty))
  (forall ((p uni) (q uni))
  (= (semicolon_back c2 b2 a2 q p) (semicolon c2 b2 a2 p q)))))

(declare-fun id (ty uni) uni)

;; id_sort
  (assert
  (forall ((a2 ty))
  (forall ((x uni)) (sort (set1 (tuple2 a2 a2)) (id a2 x)))))

;; mem_id
  (assert
  (forall ((u (set (set (tuple21 a (tuple21 b c))))) (x (set (tuple21 a
  (tuple21 b c)))) (y (set (tuple21 a (tuple21 b c)))))
  (= (mem
  (tuple2 (set1 (tuple2 a1 (tuple2 b1 c1)))
  (set1 (tuple2 a1 (tuple2 b1 c1))))
  (Tuple2 (set1 (tuple2 a1 (tuple2 b1 c1))) (set1 (tuple2 a1 (tuple2 b1 c1)))
  (t2tb261 x) (t2tb261 y))
  (id (set1 (tuple2 a1 (tuple2 b1 c1))) (t2tb327 u)))
  (and (mem15 x u) (= x y)))))

;; mem_id
  (assert
  (forall ((u (set (tuple21 a (tuple21 b c)))) (x (tuple21 a (tuple21 b c)))
  (y (tuple21 a (tuple21 b c))))
  (= (mem (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 (tuple2 b1 c1)) (t2tb260 x)
  (t2tb260 y)) (id (tuple2 a1 (tuple2 b1 c1)) (t2tb261 u)))
  (and (mem14 x u) (= x y)))))

;; mem_id
  (assert
  (forall ((u (set (set (tuple21 a c)))) (x (set (tuple21 a c)))
  (y (set (tuple21 a c))))
  (= (mem (tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 a1 c1)))
  (Tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 a1 c1)) (t2tb129 x)
  (t2tb129 y)) (id (set1 (tuple2 a1 c1)) (t2tb128 u)))
  (and (mem11 x u) (= x y)))))

;; mem_id
  (assert
  (forall ((u (set (tuple21 a c))) (x (tuple21 a c)) (y (tuple21 a c)))
  (= (mem (tuple2 (tuple2 a1 c1) (tuple2 a1 c1))
  (Tuple2 (tuple2 a1 c1) (tuple2 a1 c1) (t2tb133 x) (t2tb133 y))
  (id (tuple2 a1 c1) (t2tb129 u))) (and (mem10 x u) (= x y)))))

;; mem_id
  (assert
  (forall ((u (set (tuple21 b c))) (x (tuple21 b c)) (y (tuple21 b c)))
  (= (mem (tuple2 (tuple2 b1 c1) (tuple2 b1 c1))
  (Tuple2 (tuple2 b1 c1) (tuple2 b1 c1) (t2tb134 x) (t2tb134 y))
  (id (tuple2 b1 c1) (t2tb131 u))) (and (mem8 x u) (= x y)))))

;; mem_id
  (assert
  (forall ((u (set c)) (x c) (y c))
  (= (mem (tuple2 c1 c1) (Tuple2 c1 c1 (t2tb135 x) (t2tb135 y))
  (id c1 (t2tb132 u))) (and (mem7 x u) (= x y)))))

;; mem_id
  (assert
  (forall ((u (set (set (tuple21 a b)))) (x (set (tuple21 a b)))
  (y (set (tuple21 a b))))
  (= (mem (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1)))
  (Tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1)) (t2tb11 x) (t2tb11 y))
  (id (set1 (tuple2 a1 b1)) (t2tb10 u))) (and (mem4 x u) (= x y)))))

;; mem_id
  (assert
  (forall ((u (set (tuple21 a b))) (x (tuple21 a b)) (y (tuple21 a b)))
  (= (mem (tuple2 (tuple2 a1 b1) (tuple2 a1 b1))
  (Tuple2 (tuple2 a1 b1) (tuple2 a1 b1) (t2tb13 x) (t2tb13 y))
  (id (tuple2 a1 b1) (t2tb11 u))) (and (mem3 x u) (= x y)))))

;; mem_id
  (assert
  (forall ((u (set b)) (x b) (y b))
  (= (mem (tuple2 b1 b1) (Tuple2 b1 b1 (t2tb14 x) (t2tb14 y))
  (id b1 (t2tb12 u))) (and (mem2 x u) (= x y)))))

;; mem_id
  (assert
  (forall ((u (set a)) (x a) (y a))
  (= (mem (tuple2 a1 a1) (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y))
  (id a1 (t2tb1 u))) (and (mem1 x u) (= x y)))))

;; mem_id
  (assert
  (forall ((a2 ty))
  (forall ((u uni) (x uni) (y uni))
  (=> (sort a2 x)
  (=> (sort a2 y)
  (= (mem (tuple2 a2 a2) (Tuple2 a2 a2 x y) (id a2 u))
  (and (mem a2 x u) (= x y))))))))

(declare-fun domain_restriction (ty ty uni uni) uni)

;; domain_restriction_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (tuple2 a2 b2))
  (domain_restriction b2 a2 x x1)))))

;; mem_domain_restriction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (set (tuple21 a (tuple21 b c)))))
  (x (set (tuple21 a (tuple21 b c)))) (y uni))
  (= (mem (tuple2 (set1 (tuple2 a1 (tuple2 b1 c1))) b2)
  (Tuple2 (set1 (tuple2 a1 (tuple2 b1 c1))) b2 (t2tb261 x) y)
  (domain_restriction b2 (set1 (tuple2 a1 (tuple2 b1 c1))) (t2tb327 s) p))
  (and (mem (tuple2 (set1 (tuple2 a1 (tuple2 b1 c1))) b2)
  (Tuple2 (set1 (tuple2 a1 (tuple2 b1 c1))) b2 (t2tb261 x) y) p) (mem15 x s))))))

;; mem_domain_restriction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (tuple21 a (tuple21 b c)))) (x (tuple21 a
  (tuple21 b c))) (y uni))
  (= (mem (tuple2 (tuple2 a1 (tuple2 b1 c1)) b2)
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) b2 (t2tb260 x) y)
  (domain_restriction b2 (tuple2 a1 (tuple2 b1 c1)) (t2tb261 s) p))
  (and (mem (tuple2 (tuple2 a1 (tuple2 b1 c1)) b2)
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) b2 (t2tb260 x) y) p) (mem14 x s))))))

;; mem_domain_restriction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (set (tuple21 a c)))) (x (set (tuple21 a c)))
  (y uni))
  (= (mem (tuple2 (set1 (tuple2 a1 c1)) b2)
  (Tuple2 (set1 (tuple2 a1 c1)) b2 (t2tb129 x) y)
  (domain_restriction b2 (set1 (tuple2 a1 c1)) (t2tb128 s) p))
  (and (mem (tuple2 (set1 (tuple2 a1 c1)) b2)
  (Tuple2 (set1 (tuple2 a1 c1)) b2 (t2tb129 x) y) p) (mem11 x s))))))

;; mem_domain_restriction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (tuple21 a c))) (x (tuple21 a c)) (y uni))
  (= (mem (tuple2 (tuple2 a1 c1) b2) (Tuple2 (tuple2 a1 c1) b2 (t2tb133 x) y)
  (domain_restriction b2 (tuple2 a1 c1) (t2tb129 s) p))
  (and (mem (tuple2 (tuple2 a1 c1) b2)
  (Tuple2 (tuple2 a1 c1) b2 (t2tb133 x) y) p) (mem10 x s))))))

;; mem_domain_restriction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (tuple21 b c))) (x (tuple21 b c)) (y uni))
  (= (mem (tuple2 (tuple2 b1 c1) b2) (Tuple2 (tuple2 b1 c1) b2 (t2tb134 x) y)
  (domain_restriction b2 (tuple2 b1 c1) (t2tb131 s) p))
  (and (mem (tuple2 (tuple2 b1 c1) b2)
  (Tuple2 (tuple2 b1 c1) b2 (t2tb134 x) y) p) (mem8 x s))))))

;; mem_domain_restriction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set c)) (x c) (y uni))
  (= (mem (tuple2 c1 b2) (Tuple2 c1 b2 (t2tb135 x) y)
  (domain_restriction b2 c1 (t2tb132 s) p))
  (and (mem (tuple2 c1 b2) (Tuple2 c1 b2 (t2tb135 x) y) p) (mem7 x s))))))

;; mem_domain_restriction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (set (tuple21 a b)))) (x (set (tuple21 a b)))
  (y uni))
  (= (mem (tuple2 (set1 (tuple2 a1 b1)) b2)
  (Tuple2 (set1 (tuple2 a1 b1)) b2 (t2tb11 x) y)
  (domain_restriction b2 (set1 (tuple2 a1 b1)) (t2tb10 s) p))
  (and (mem (tuple2 (set1 (tuple2 a1 b1)) b2)
  (Tuple2 (set1 (tuple2 a1 b1)) b2 (t2tb11 x) y) p) (mem4 x s))))))

;; mem_domain_restriction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (tuple21 a b))) (x (tuple21 a b)) (y uni))
  (= (mem (tuple2 (tuple2 a1 b1) b2) (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) y)
  (domain_restriction b2 (tuple2 a1 b1) (t2tb11 s) p))
  (and (mem (tuple2 (tuple2 a1 b1) b2)
  (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) y) p) (mem3 x s))))))

;; mem_domain_restriction
  (assert
  (forall ((p (set (tuple21 b c))) (s (set b)) (x b) (y c))
  (= (mem8 (tb2t134 (Tuple2 b1 c1 (t2tb14 x) (t2tb135 y)))
  (tb2t131 (domain_restriction c1 b1 (t2tb12 s) (t2tb131 p))))
  (and (mem8 (tb2t134 (Tuple2 b1 c1 (t2tb14 x) (t2tb135 y))) p) (mem2 x s)))))

;; mem_domain_restriction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set b)) (x b) (y uni))
  (= (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) y)
  (domain_restriction b2 b1 (t2tb12 s) p))
  (and (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) y) p) (mem2 x s))))))

;; mem_domain_restriction
  (assert
  (forall ((p (set (tuple21 a (tuple21 b c)))) (s (set a)) (x a)
  (y (tuple21 b c)))
  (= (mem14 (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 y)))
  (tb2t261 (domain_restriction (tuple2 b1 c1) a1 (t2tb1 s) (t2tb261 p))))
  (and (mem14 (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 y))) p)
  (mem1 x s)))))

;; mem_domain_restriction
  (assert
  (forall ((p (set (tuple21 a c))) (s (set a)) (x a) (y c))
  (= (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y)))
  (tb2t129 (domain_restriction c1 a1 (t2tb1 s) (t2tb129 p))))
  (and (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y))) p) (mem1 x s)))))

;; mem_domain_restriction
  (assert
  (forall ((p (set (tuple21 a b))) (s (set a)) (x a) (y b))
  (= (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y)))
  (tb2t11 (domain_restriction b1 a1 (t2tb1 s) (t2tb11 p))))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y))) p) (mem1 x s)))))

;; mem_domain_restriction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set a)) (x a) (y uni))
  (= (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) y)
  (domain_restriction b2 a1 (t2tb1 s) p))
  (and (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) y) p) (mem1 x s))))))

;; mem_domain_restriction
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((p uni) (s uni) (x uni) (y uni))
  (= (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) (domain_restriction b2 a2 s p))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) p) (mem a2 x s))))))

(declare-fun range_restriction (ty ty uni uni) uni)

;; range_restriction_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (tuple2 a2 b2))
  (range_restriction b2 a2 x x1)))))

;; mem_range_restriction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (set (tuple21 a (tuple21 b c))))) (x uni)
  (y (set (tuple21 a (tuple21 b c)))))
  (= (mem (tuple2 a2 (set1 (tuple2 a1 (tuple2 b1 c1))))
  (Tuple2 a2 (set1 (tuple2 a1 (tuple2 b1 c1))) x (t2tb261 y))
  (range_restriction (set1 (tuple2 a1 (tuple2 b1 c1))) a2 p (t2tb327 t)))
  (and (mem (tuple2 a2 (set1 (tuple2 a1 (tuple2 b1 c1))))
  (Tuple2 a2 (set1 (tuple2 a1 (tuple2 b1 c1))) x (t2tb261 y)) p) (mem15 y t))))))

;; mem_range_restriction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (tuple21 a (tuple21 b c)))) (x uni) (y (tuple21 a
  (tuple21 b c))))
  (= (mem (tuple2 a2 (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 a2 (tuple2 a1 (tuple2 b1 c1)) x (t2tb260 y))
  (range_restriction (tuple2 a1 (tuple2 b1 c1)) a2 p (t2tb261 t)))
  (and (mem (tuple2 a2 (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 a2 (tuple2 a1 (tuple2 b1 c1)) x (t2tb260 y)) p) (mem14 y t))))))

;; mem_range_restriction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (set (tuple21 a c)))) (x uni) (y (set (tuple21 a
  c))))
  (= (mem (tuple2 a2 (set1 (tuple2 a1 c1)))
  (Tuple2 a2 (set1 (tuple2 a1 c1)) x (t2tb129 y))
  (range_restriction (set1 (tuple2 a1 c1)) a2 p (t2tb128 t)))
  (and (mem (tuple2 a2 (set1 (tuple2 a1 c1)))
  (Tuple2 a2 (set1 (tuple2 a1 c1)) x (t2tb129 y)) p) (mem11 y t))))))

;; mem_range_restriction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (tuple21 a c))) (x uni) (y (tuple21 a c)))
  (= (mem (tuple2 a2 (tuple2 a1 c1)) (Tuple2 a2 (tuple2 a1 c1) x (t2tb133 y))
  (range_restriction (tuple2 a1 c1) a2 p (t2tb129 t)))
  (and (mem (tuple2 a2 (tuple2 a1 c1))
  (Tuple2 a2 (tuple2 a1 c1) x (t2tb133 y)) p) (mem10 y t))))))

;; mem_range_restriction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (tuple21 b c))) (x uni) (y (tuple21 b c)))
  (= (mem (tuple2 a2 (tuple2 b1 c1)) (Tuple2 a2 (tuple2 b1 c1) x (t2tb134 y))
  (range_restriction (tuple2 b1 c1) a2 p (t2tb131 t)))
  (and (mem (tuple2 a2 (tuple2 b1 c1))
  (Tuple2 a2 (tuple2 b1 c1) x (t2tb134 y)) p) (mem8 y t))))))

;; mem_range_restriction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set c)) (x uni) (y c))
  (= (mem (tuple2 a2 c1) (Tuple2 a2 c1 x (t2tb135 y))
  (range_restriction c1 a2 p (t2tb132 t)))
  (and (mem (tuple2 a2 c1) (Tuple2 a2 c1 x (t2tb135 y)) p) (mem7 y t))))))

;; mem_range_restriction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (set (tuple21 a b)))) (x uni) (y (set (tuple21 a
  b))))
  (= (mem (tuple2 a2 (set1 (tuple2 a1 b1)))
  (Tuple2 a2 (set1 (tuple2 a1 b1)) x (t2tb11 y))
  (range_restriction (set1 (tuple2 a1 b1)) a2 p (t2tb10 t)))
  (and (mem (tuple2 a2 (set1 (tuple2 a1 b1)))
  (Tuple2 a2 (set1 (tuple2 a1 b1)) x (t2tb11 y)) p) (mem4 y t))))))

;; mem_range_restriction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (tuple21 a b))) (x uni) (y (tuple21 a b)))
  (= (mem (tuple2 a2 (tuple2 a1 b1)) (Tuple2 a2 (tuple2 a1 b1) x (t2tb13 y))
  (range_restriction (tuple2 a1 b1) a2 p (t2tb11 t)))
  (and (mem (tuple2 a2 (tuple2 a1 b1))
  (Tuple2 a2 (tuple2 a1 b1) x (t2tb13 y)) p) (mem3 y t))))))

;; mem_range_restriction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set b)) (x uni) (y b))
  (= (mem (tuple2 a2 b1) (Tuple2 a2 b1 x (t2tb14 y))
  (range_restriction b1 a2 p (t2tb12 t)))
  (and (mem (tuple2 a2 b1) (Tuple2 a2 b1 x (t2tb14 y)) p) (mem2 y t))))))

;; mem_range_restriction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set a)) (x uni) (y a))
  (= (mem (tuple2 a2 a1) (Tuple2 a2 a1 x (t2tb2 y))
  (range_restriction a1 a2 p (t2tb1 t)))
  (and (mem (tuple2 a2 a1) (Tuple2 a2 a1 x (t2tb2 y)) p) (mem1 y t))))))

;; mem_range_restriction
  (assert
  (forall ((p (set (tuple21 b c))) (t (set c)) (x b) (y c))
  (= (mem8 (tb2t134 (Tuple2 b1 c1 (t2tb14 x) (t2tb135 y)))
  (tb2t131 (range_restriction c1 b1 (t2tb131 p) (t2tb132 t))))
  (and (mem8 (tb2t134 (Tuple2 b1 c1 (t2tb14 x) (t2tb135 y))) p) (mem7 y t)))))

;; mem_range_restriction
  (assert
  (forall ((p (set (tuple21 a (tuple21 b c)))) (t (set (tuple21 b c))) (x a)
  (y (tuple21 b c)))
  (= (mem14 (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 y)))
  (tb2t261 (range_restriction (tuple2 b1 c1) a1 (t2tb261 p) (t2tb131 t))))
  (and (mem14 (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 y))) p)
  (mem8 y t)))))

;; mem_range_restriction
  (assert
  (forall ((p (set (tuple21 a c))) (t (set c)) (x a) (y c))
  (= (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y)))
  (tb2t129 (range_restriction c1 a1 (t2tb129 p) (t2tb132 t))))
  (and (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y))) p) (mem7 y t)))))

;; mem_range_restriction
  (assert
  (forall ((p (set (tuple21 a b))) (t (set b)) (x a) (y b))
  (= (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y)))
  (tb2t11 (range_restriction b1 a1 (t2tb11 p) (t2tb12 t))))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y))) p) (mem2 y t)))))

;; mem_range_restriction
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((p uni) (t uni) (x uni) (y uni))
  (= (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) (range_restriction b2 a2 p t))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) p) (mem b2 y t))))))

(declare-fun domain_substraction (ty ty uni uni) uni)

;; domain_substraction_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (tuple2 a2 b2))
  (domain_substraction b2 a2 x x1)))))

;; mem_domain_substraction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (set (tuple21 a (tuple21 b c)))))
  (x (set (tuple21 a (tuple21 b c)))) (y uni))
  (= (mem (tuple2 (set1 (tuple2 a1 (tuple2 b1 c1))) b2)
  (Tuple2 (set1 (tuple2 a1 (tuple2 b1 c1))) b2 (t2tb261 x) y)
  (domain_substraction b2 (set1 (tuple2 a1 (tuple2 b1 c1))) (t2tb327 s) p))
  (and (mem (tuple2 (set1 (tuple2 a1 (tuple2 b1 c1))) b2)
  (Tuple2 (set1 (tuple2 a1 (tuple2 b1 c1))) b2 (t2tb261 x) y) p)
  (not (mem15 x s)))))))

;; mem_domain_substraction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (tuple21 a (tuple21 b c)))) (x (tuple21 a
  (tuple21 b c))) (y uni))
  (= (mem (tuple2 (tuple2 a1 (tuple2 b1 c1)) b2)
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) b2 (t2tb260 x) y)
  (domain_substraction b2 (tuple2 a1 (tuple2 b1 c1)) (t2tb261 s) p))
  (and (mem (tuple2 (tuple2 a1 (tuple2 b1 c1)) b2)
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) b2 (t2tb260 x) y) p) (not (mem14 x s)))))))

;; mem_domain_substraction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (set (tuple21 a c)))) (x (set (tuple21 a c)))
  (y uni))
  (= (mem (tuple2 (set1 (tuple2 a1 c1)) b2)
  (Tuple2 (set1 (tuple2 a1 c1)) b2 (t2tb129 x) y)
  (domain_substraction b2 (set1 (tuple2 a1 c1)) (t2tb128 s) p))
  (and (mem (tuple2 (set1 (tuple2 a1 c1)) b2)
  (Tuple2 (set1 (tuple2 a1 c1)) b2 (t2tb129 x) y) p) (not (mem11 x s)))))))

;; mem_domain_substraction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (tuple21 a c))) (x (tuple21 a c)) (y uni))
  (= (mem (tuple2 (tuple2 a1 c1) b2) (Tuple2 (tuple2 a1 c1) b2 (t2tb133 x) y)
  (domain_substraction b2 (tuple2 a1 c1) (t2tb129 s) p))
  (and (mem (tuple2 (tuple2 a1 c1) b2)
  (Tuple2 (tuple2 a1 c1) b2 (t2tb133 x) y) p) (not (mem10 x s)))))))

;; mem_domain_substraction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (tuple21 b c))) (x (tuple21 b c)) (y uni))
  (= (mem (tuple2 (tuple2 b1 c1) b2) (Tuple2 (tuple2 b1 c1) b2 (t2tb134 x) y)
  (domain_substraction b2 (tuple2 b1 c1) (t2tb131 s) p))
  (and (mem (tuple2 (tuple2 b1 c1) b2)
  (Tuple2 (tuple2 b1 c1) b2 (t2tb134 x) y) p) (not (mem8 x s)))))))

;; mem_domain_substraction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set c)) (x c) (y uni))
  (= (mem (tuple2 c1 b2) (Tuple2 c1 b2 (t2tb135 x) y)
  (domain_substraction b2 c1 (t2tb132 s) p))
  (and (mem (tuple2 c1 b2) (Tuple2 c1 b2 (t2tb135 x) y) p) (not (mem7 x s)))))))

;; mem_domain_substraction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (set (tuple21 a b)))) (x (set (tuple21 a b)))
  (y uni))
  (= (mem (tuple2 (set1 (tuple2 a1 b1)) b2)
  (Tuple2 (set1 (tuple2 a1 b1)) b2 (t2tb11 x) y)
  (domain_substraction b2 (set1 (tuple2 a1 b1)) (t2tb10 s) p))
  (and (mem (tuple2 (set1 (tuple2 a1 b1)) b2)
  (Tuple2 (set1 (tuple2 a1 b1)) b2 (t2tb11 x) y) p) (not (mem4 x s)))))))

;; mem_domain_substraction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (tuple21 a b))) (x (tuple21 a b)) (y uni))
  (= (mem (tuple2 (tuple2 a1 b1) b2) (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) y)
  (domain_substraction b2 (tuple2 a1 b1) (t2tb11 s) p))
  (and (mem (tuple2 (tuple2 a1 b1) b2)
  (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) y) p) (not (mem3 x s)))))))

;; mem_domain_substraction
  (assert
  (forall ((p (set (tuple21 b c))) (s (set b)) (x b) (y c))
  (= (mem8 (tb2t134 (Tuple2 b1 c1 (t2tb14 x) (t2tb135 y)))
  (tb2t131 (domain_substraction c1 b1 (t2tb12 s) (t2tb131 p))))
  (and (mem8 (tb2t134 (Tuple2 b1 c1 (t2tb14 x) (t2tb135 y))) p)
  (not (mem2 x s))))))

;; mem_domain_substraction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set b)) (x b) (y uni))
  (= (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) y)
  (domain_substraction b2 b1 (t2tb12 s) p))
  (and (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) y) p) (not (mem2 x s)))))))

;; mem_domain_substraction
  (assert
  (forall ((p (set (tuple21 a (tuple21 b c)))) (s (set a)) (x a)
  (y (tuple21 b c)))
  (= (mem14 (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 y)))
  (tb2t261 (domain_substraction (tuple2 b1 c1) a1 (t2tb1 s) (t2tb261 p))))
  (and (mem14 (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 y))) p)
  (not (mem1 x s))))))

;; mem_domain_substraction
  (assert
  (forall ((p (set (tuple21 a c))) (s (set a)) (x a) (y c))
  (= (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y)))
  (tb2t129 (domain_substraction c1 a1 (t2tb1 s) (t2tb129 p))))
  (and (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y))) p)
  (not (mem1 x s))))))

;; mem_domain_substraction
  (assert
  (forall ((p (set (tuple21 a b))) (s (set a)) (x a) (y b))
  (= (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y)))
  (tb2t11 (domain_substraction b1 a1 (t2tb1 s) (t2tb11 p))))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y))) p)
  (not (mem1 x s))))))

;; mem_domain_substraction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set a)) (x a) (y uni))
  (= (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) y)
  (domain_substraction b2 a1 (t2tb1 s) p))
  (and (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) y) p) (not (mem1 x s)))))))

;; mem_domain_substraction
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((p uni) (s uni) (x uni) (y uni))
  (= (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) (domain_substraction b2 a2 s p))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) p) (not (mem a2 x s)))))))

(declare-fun range_substraction (ty ty uni uni) uni)

;; range_substraction_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (tuple2 a2 b2))
  (range_substraction b2 a2 x x1)))))

;; mem_range_substraction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (set (tuple21 a (tuple21 b c))))) (x uni)
  (y (set (tuple21 a (tuple21 b c)))))
  (= (mem (tuple2 a2 (set1 (tuple2 a1 (tuple2 b1 c1))))
  (Tuple2 a2 (set1 (tuple2 a1 (tuple2 b1 c1))) x (t2tb261 y))
  (range_substraction (set1 (tuple2 a1 (tuple2 b1 c1))) a2 p (t2tb327 t)))
  (and (mem (tuple2 a2 (set1 (tuple2 a1 (tuple2 b1 c1))))
  (Tuple2 a2 (set1 (tuple2 a1 (tuple2 b1 c1))) x (t2tb261 y)) p)
  (not (mem15 y t)))))))

;; mem_range_substraction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (tuple21 a (tuple21 b c)))) (x uni) (y (tuple21 a
  (tuple21 b c))))
  (= (mem (tuple2 a2 (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 a2 (tuple2 a1 (tuple2 b1 c1)) x (t2tb260 y))
  (range_substraction (tuple2 a1 (tuple2 b1 c1)) a2 p (t2tb261 t)))
  (and (mem (tuple2 a2 (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 a2 (tuple2 a1 (tuple2 b1 c1)) x (t2tb260 y)) p) (not (mem14 y t)))))))

;; mem_range_substraction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (set (tuple21 a c)))) (x uni) (y (set (tuple21 a
  c))))
  (= (mem (tuple2 a2 (set1 (tuple2 a1 c1)))
  (Tuple2 a2 (set1 (tuple2 a1 c1)) x (t2tb129 y))
  (range_substraction (set1 (tuple2 a1 c1)) a2 p (t2tb128 t)))
  (and (mem (tuple2 a2 (set1 (tuple2 a1 c1)))
  (Tuple2 a2 (set1 (tuple2 a1 c1)) x (t2tb129 y)) p) (not (mem11 y t)))))))

;; mem_range_substraction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (tuple21 a c))) (x uni) (y (tuple21 a c)))
  (= (mem (tuple2 a2 (tuple2 a1 c1)) (Tuple2 a2 (tuple2 a1 c1) x (t2tb133 y))
  (range_substraction (tuple2 a1 c1) a2 p (t2tb129 t)))
  (and (mem (tuple2 a2 (tuple2 a1 c1))
  (Tuple2 a2 (tuple2 a1 c1) x (t2tb133 y)) p) (not (mem10 y t)))))))

;; mem_range_substraction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (tuple21 b c))) (x uni) (y (tuple21 b c)))
  (= (mem (tuple2 a2 (tuple2 b1 c1)) (Tuple2 a2 (tuple2 b1 c1) x (t2tb134 y))
  (range_substraction (tuple2 b1 c1) a2 p (t2tb131 t)))
  (and (mem (tuple2 a2 (tuple2 b1 c1))
  (Tuple2 a2 (tuple2 b1 c1) x (t2tb134 y)) p) (not (mem8 y t)))))))

;; mem_range_substraction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set c)) (x uni) (y c))
  (= (mem (tuple2 a2 c1) (Tuple2 a2 c1 x (t2tb135 y))
  (range_substraction c1 a2 p (t2tb132 t)))
  (and (mem (tuple2 a2 c1) (Tuple2 a2 c1 x (t2tb135 y)) p) (not (mem7 y t)))))))

;; mem_range_substraction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (set (tuple21 a b)))) (x uni) (y (set (tuple21 a
  b))))
  (= (mem (tuple2 a2 (set1 (tuple2 a1 b1)))
  (Tuple2 a2 (set1 (tuple2 a1 b1)) x (t2tb11 y))
  (range_substraction (set1 (tuple2 a1 b1)) a2 p (t2tb10 t)))
  (and (mem (tuple2 a2 (set1 (tuple2 a1 b1)))
  (Tuple2 a2 (set1 (tuple2 a1 b1)) x (t2tb11 y)) p) (not (mem4 y t)))))))

;; mem_range_substraction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (tuple21 a b))) (x uni) (y (tuple21 a b)))
  (= (mem (tuple2 a2 (tuple2 a1 b1)) (Tuple2 a2 (tuple2 a1 b1) x (t2tb13 y))
  (range_substraction (tuple2 a1 b1) a2 p (t2tb11 t)))
  (and (mem (tuple2 a2 (tuple2 a1 b1))
  (Tuple2 a2 (tuple2 a1 b1) x (t2tb13 y)) p) (not (mem3 y t)))))))

;; mem_range_substraction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set b)) (x uni) (y b))
  (= (mem (tuple2 a2 b1) (Tuple2 a2 b1 x (t2tb14 y))
  (range_substraction b1 a2 p (t2tb12 t)))
  (and (mem (tuple2 a2 b1) (Tuple2 a2 b1 x (t2tb14 y)) p) (not (mem2 y t)))))))

;; mem_range_substraction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set a)) (x uni) (y a))
  (= (mem (tuple2 a2 a1) (Tuple2 a2 a1 x (t2tb2 y))
  (range_substraction a1 a2 p (t2tb1 t)))
  (and (mem (tuple2 a2 a1) (Tuple2 a2 a1 x (t2tb2 y)) p) (not (mem1 y t)))))))

;; mem_range_substraction
  (assert
  (forall ((p (set (tuple21 b c))) (t (set c)) (x b) (y c))
  (= (mem8 (tb2t134 (Tuple2 b1 c1 (t2tb14 x) (t2tb135 y)))
  (tb2t131 (range_substraction c1 b1 (t2tb131 p) (t2tb132 t))))
  (and (mem8 (tb2t134 (Tuple2 b1 c1 (t2tb14 x) (t2tb135 y))) p)
  (not (mem7 y t))))))

;; mem_range_substraction
  (assert
  (forall ((p (set (tuple21 a (tuple21 b c)))) (t (set (tuple21 b c))) (x a)
  (y (tuple21 b c)))
  (= (mem14 (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 y)))
  (tb2t261 (range_substraction (tuple2 b1 c1) a1 (t2tb261 p) (t2tb131 t))))
  (and (mem14 (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 y))) p)
  (not (mem8 y t))))))

;; mem_range_substraction
  (assert
  (forall ((p (set (tuple21 a c))) (t (set c)) (x a) (y c))
  (= (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y)))
  (tb2t129 (range_substraction c1 a1 (t2tb129 p) (t2tb132 t))))
  (and (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y))) p)
  (not (mem7 y t))))))

;; mem_range_substraction
  (assert
  (forall ((p (set (tuple21 a b))) (t (set b)) (x a) (y b))
  (= (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y)))
  (tb2t11 (range_substraction b1 a1 (t2tb11 p) (t2tb12 t))))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y))) p)
  (not (mem2 y t))))))

;; mem_range_substraction
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((p uni) (t uni) (x uni) (y uni))
  (= (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) (range_substraction b2 a2 p t))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) p) (not (mem b2 y t)))))))

(declare-fun image (ty ty uni uni) uni)

;; image_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 b2) (image b2 a2 x x1)))))

;; mem_image
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (w uni) (x (set (tuple21 a (tuple21 b c)))))
  (and
  (=> (mem15 x (tb2t327 (image (set1 (tuple2 a1 (tuple2 b1 c1))) a2 p w)))
  (exists ((a3 uni))
  (and (sort a2 a3)
  (and (mem a2 a3 w) (mem (tuple2 a2 (set1 (tuple2 a1 (tuple2 b1 c1))))
  (Tuple2 a2 (set1 (tuple2 a1 (tuple2 b1 c1))) a3 (t2tb261 x)) p)))))
  (=>
  (exists ((a3 uni))
  (and (mem a2 a3 w) (mem (tuple2 a2 (set1 (tuple2 a1 (tuple2 b1 c1))))
  (Tuple2 a2 (set1 (tuple2 a1 (tuple2 b1 c1))) a3 (t2tb261 x)) p))) (mem15 x
  (tb2t327 (image (set1 (tuple2 a1 (tuple2 b1 c1))) a2 p w))))))))

;; mem_image
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (w uni) (x (tuple21 a (tuple21 b c))))
  (and
  (=> (mem14 x (tb2t261 (image (tuple2 a1 (tuple2 b1 c1)) a2 p w)))
  (exists ((a3 uni))
  (and (sort a2 a3)
  (and (mem a2 a3 w) (mem (tuple2 a2 (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 a2 (tuple2 a1 (tuple2 b1 c1)) a3 (t2tb260 x)) p)))))
  (=>
  (exists ((a3 uni))
  (and (mem a2 a3 w) (mem (tuple2 a2 (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 a2 (tuple2 a1 (tuple2 b1 c1)) a3 (t2tb260 x)) p))) (mem14 x
  (tb2t261 (image (tuple2 a1 (tuple2 b1 c1)) a2 p w))))))))

;; mem_image
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (w uni) (x (set (tuple21 a c))))
  (and
  (=> (mem11 x (tb2t128 (image (set1 (tuple2 a1 c1)) a2 p w)))
  (exists ((a3 uni))
  (and (sort a2 a3)
  (and (mem a2 a3 w) (mem (tuple2 a2 (set1 (tuple2 a1 c1)))
  (Tuple2 a2 (set1 (tuple2 a1 c1)) a3 (t2tb129 x)) p)))))
  (=>
  (exists ((a3 uni))
  (and (mem a2 a3 w) (mem (tuple2 a2 (set1 (tuple2 a1 c1)))
  (Tuple2 a2 (set1 (tuple2 a1 c1)) a3 (t2tb129 x)) p))) (mem11 x
  (tb2t128 (image (set1 (tuple2 a1 c1)) a2 p w))))))))

;; mem_image
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (w uni) (x (tuple21 a c)))
  (and
  (=> (mem10 x (tb2t129 (image (tuple2 a1 c1) a2 p w)))
  (exists ((a3 uni))
  (and (sort a2 a3)
  (and (mem a2 a3 w) (mem (tuple2 a2 (tuple2 a1 c1))
  (Tuple2 a2 (tuple2 a1 c1) a3 (t2tb133 x)) p)))))
  (=>
  (exists ((a3 uni))
  (and (mem a2 a3 w) (mem (tuple2 a2 (tuple2 a1 c1))
  (Tuple2 a2 (tuple2 a1 c1) a3 (t2tb133 x)) p))) (mem10 x
  (tb2t129 (image (tuple2 a1 c1) a2 p w))))))))

;; mem_image
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (w uni) (x (tuple21 b c)))
  (and
  (=> (mem8 x (tb2t131 (image (tuple2 b1 c1) a2 p w)))
  (exists ((a3 uni))
  (and (sort a2 a3)
  (and (mem a2 a3 w) (mem (tuple2 a2 (tuple2 b1 c1))
  (Tuple2 a2 (tuple2 b1 c1) a3 (t2tb134 x)) p)))))
  (=>
  (exists ((a3 uni))
  (and (mem a2 a3 w) (mem (tuple2 a2 (tuple2 b1 c1))
  (Tuple2 a2 (tuple2 b1 c1) a3 (t2tb134 x)) p))) (mem8 x
  (tb2t131 (image (tuple2 b1 c1) a2 p w))))))))

;; mem_image
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (w uni) (x c))
  (and
  (=> (mem7 x (tb2t132 (image c1 a2 p w)))
  (exists ((a3 uni))
  (and (sort a2 a3)
  (and (mem a2 a3 w) (mem (tuple2 a2 c1) (Tuple2 a2 c1 a3 (t2tb135 x)) p)))))
  (=>
  (exists ((a3 uni))
  (and (mem a2 a3 w) (mem (tuple2 a2 c1) (Tuple2 a2 c1 a3 (t2tb135 x)) p)))
  (mem7 x (tb2t132 (image c1 a2 p w))))))))

;; mem_image
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (w uni) (x (set (tuple21 a b))))
  (and
  (=> (mem4 x (tb2t10 (image (set1 (tuple2 a1 b1)) a2 p w)))
  (exists ((a3 uni))
  (and (sort a2 a3)
  (and (mem a2 a3 w) (mem (tuple2 a2 (set1 (tuple2 a1 b1)))
  (Tuple2 a2 (set1 (tuple2 a1 b1)) a3 (t2tb11 x)) p)))))
  (=>
  (exists ((a3 uni))
  (and (mem a2 a3 w) (mem (tuple2 a2 (set1 (tuple2 a1 b1)))
  (Tuple2 a2 (set1 (tuple2 a1 b1)) a3 (t2tb11 x)) p))) (mem4 x
  (tb2t10 (image (set1 (tuple2 a1 b1)) a2 p w))))))))

;; mem_image
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (w uni) (x (tuple21 a b)))
  (and
  (=> (mem3 x (tb2t11 (image (tuple2 a1 b1) a2 p w)))
  (exists ((a3 uni))
  (and (sort a2 a3)
  (and (mem a2 a3 w) (mem (tuple2 a2 (tuple2 a1 b1))
  (Tuple2 a2 (tuple2 a1 b1) a3 (t2tb13 x)) p)))))
  (=>
  (exists ((a3 uni))
  (and (mem a2 a3 w) (mem (tuple2 a2 (tuple2 a1 b1))
  (Tuple2 a2 (tuple2 a1 b1) a3 (t2tb13 x)) p))) (mem3 x
  (tb2t11 (image (tuple2 a1 b1) a2 p w))))))))

;; mem_image
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (w uni) (x b))
  (and
  (=> (mem2 x (tb2t12 (image b1 a2 p w)))
  (exists ((a3 uni))
  (and (sort a2 a3)
  (and (mem a2 a3 w) (mem (tuple2 a2 b1) (Tuple2 a2 b1 a3 (t2tb14 x)) p)))))
  (=>
  (exists ((a3 uni))
  (and (mem a2 a3 w) (mem (tuple2 a2 b1) (Tuple2 a2 b1 a3 (t2tb14 x)) p)))
  (mem2 x (tb2t12 (image b1 a2 p w))))))))

;; mem_image
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (w uni) (x a))
  (and
  (=> (mem1 x (tb2t1 (image a1 a2 p w)))
  (exists ((a3 uni))
  (and (sort a2 a3)
  (and (mem a2 a3 w) (mem (tuple2 a2 a1) (Tuple2 a2 a1 a3 (t2tb2 x)) p)))))
  (=>
  (exists ((a3 uni))
  (and (mem a2 a3 w) (mem (tuple2 a2 a1) (Tuple2 a2 a1 a3 (t2tb2 x)) p)))
  (mem1 x (tb2t1 (image a1 a2 p w))))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a (tuple21 b c))) (set (tuple21 a
  (tuple21 b c)))))) (w (set (set (tuple21 a (tuple21 b c)))))
  (x (set (tuple21 a (tuple21 b c)))))
  (= (mem15 x
  (tb2t327
  (image (set1 (tuple2 a1 (tuple2 b1 c1))) (set1 (tuple2 a1 (tuple2 b1 c1)))
  (t2tb373 p) (t2tb327 w))))
  (exists ((a2 (set (tuple21 a (tuple21 b c)))))
  (and (mem15 a2 w) (mem
  (tuple2 (set1 (tuple2 a1 (tuple2 b1 c1)))
  (set1 (tuple2 a1 (tuple2 b1 c1))))
  (Tuple2 (set1 (tuple2 a1 (tuple2 b1 c1))) (set1 (tuple2 a1 (tuple2 b1 c1)))
  (t2tb261 a2) (t2tb261 x)) (t2tb373 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a (tuple21 b c))) (tuple21 a
  (tuple21 b c))))) (w (set (set (tuple21 a (tuple21 b c))))) (x (tuple21 a
  (tuple21 b c))))
  (= (mem14 x
  (tb2t261
  (image (tuple2 a1 (tuple2 b1 c1)) (set1 (tuple2 a1 (tuple2 b1 c1)))
  (t2tb375 p) (t2tb327 w))))
  (exists ((a2 (set (tuple21 a (tuple21 b c)))))
  (and (mem15 a2 w) (mem
  (tuple2 (set1 (tuple2 a1 (tuple2 b1 c1))) (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 (set1 (tuple2 a1 (tuple2 b1 c1))) (tuple2 a1 (tuple2 b1 c1))
  (t2tb261 a2) (t2tb260 x)) (t2tb375 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a (tuple21 b c))) (set (tuple21 a
  c))))) (w (set (set (tuple21 a (tuple21 b c))))) (x (set (tuple21 a c))))
  (= (mem11 x
  (tb2t128
  (image (set1 (tuple2 a1 c1)) (set1 (tuple2 a1 (tuple2 b1 c1))) (t2tb377 p)
  (t2tb327 w))))
  (exists ((a2 (set (tuple21 a (tuple21 b c)))))
  (and (mem15 a2 w) (mem
  (tuple2 (set1 (tuple2 a1 (tuple2 b1 c1))) (set1 (tuple2 a1 c1)))
  (Tuple2 (set1 (tuple2 a1 (tuple2 b1 c1))) (set1 (tuple2 a1 c1))
  (t2tb261 a2) (t2tb129 x)) (t2tb377 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a (tuple21 b c))) (tuple21 a c))))
  (w (set (set (tuple21 a (tuple21 b c))))) (x (tuple21 a c)))
  (= (mem10 x
  (tb2t129
  (image (tuple2 a1 c1) (set1 (tuple2 a1 (tuple2 b1 c1))) (t2tb379 p)
  (t2tb327 w))))
  (exists ((a2 (set (tuple21 a (tuple21 b c)))))
  (and (mem15 a2 w) (mem
  (tuple2 (set1 (tuple2 a1 (tuple2 b1 c1))) (tuple2 a1 c1))
  (Tuple2 (set1 (tuple2 a1 (tuple2 b1 c1))) (tuple2 a1 c1) (t2tb261 a2)
  (t2tb133 x)) (t2tb379 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a (tuple21 b c))) (tuple21 b c))))
  (w (set (set (tuple21 a (tuple21 b c))))) (x (tuple21 b c)))
  (= (mem8 x
  (tb2t131
  (image (tuple2 b1 c1) (set1 (tuple2 a1 (tuple2 b1 c1))) (t2tb381 p)
  (t2tb327 w))))
  (exists ((a2 (set (tuple21 a (tuple21 b c)))))
  (and (mem15 a2 w) (mem
  (tuple2 (set1 (tuple2 a1 (tuple2 b1 c1))) (tuple2 b1 c1))
  (Tuple2 (set1 (tuple2 a1 (tuple2 b1 c1))) (tuple2 b1 c1) (t2tb261 a2)
  (t2tb134 x)) (t2tb381 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a (tuple21 b c))) c)))
  (w (set (set (tuple21 a (tuple21 b c))))) (x c))
  (= (mem7 x
  (tb2t132
  (image c1 (set1 (tuple2 a1 (tuple2 b1 c1))) (t2tb383 p) (t2tb327 w))))
  (exists ((a2 (set (tuple21 a (tuple21 b c)))))
  (and (mem15 a2 w) (mem (tuple2 (set1 (tuple2 a1 (tuple2 b1 c1))) c1)
  (Tuple2 (set1 (tuple2 a1 (tuple2 b1 c1))) c1 (t2tb261 a2) (t2tb135 x))
  (t2tb383 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a (tuple21 b c))) (set (tuple21 a
  b))))) (w (set (set (tuple21 a (tuple21 b c))))) (x (set (tuple21 a b))))
  (= (mem4 x
  (tb2t10
  (image (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 (tuple2 b1 c1))) (t2tb385 p)
  (t2tb327 w))))
  (exists ((a2 (set (tuple21 a (tuple21 b c)))))
  (and (mem15 a2 w) (mem
  (tuple2 (set1 (tuple2 a1 (tuple2 b1 c1))) (set1 (tuple2 a1 b1)))
  (Tuple2 (set1 (tuple2 a1 (tuple2 b1 c1))) (set1 (tuple2 a1 b1))
  (t2tb261 a2) (t2tb11 x)) (t2tb385 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a (tuple21 b c))) (tuple21 a b))))
  (w (set (set (tuple21 a (tuple21 b c))))) (x (tuple21 a b)))
  (= (mem3 x
  (tb2t11
  (image (tuple2 a1 b1) (set1 (tuple2 a1 (tuple2 b1 c1))) (t2tb387 p)
  (t2tb327 w))))
  (exists ((a2 (set (tuple21 a (tuple21 b c)))))
  (and (mem15 a2 w) (mem
  (tuple2 (set1 (tuple2 a1 (tuple2 b1 c1))) (tuple2 a1 b1))
  (Tuple2 (set1 (tuple2 a1 (tuple2 b1 c1))) (tuple2 a1 b1) (t2tb261 a2)
  (t2tb13 x)) (t2tb387 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a (tuple21 b c))) b)))
  (w (set (set (tuple21 a (tuple21 b c))))) (x b))
  (= (mem2 x
  (tb2t12
  (image b1 (set1 (tuple2 a1 (tuple2 b1 c1))) (t2tb389 p) (t2tb327 w))))
  (exists ((a2 (set (tuple21 a (tuple21 b c)))))
  (and (mem15 a2 w) (mem (tuple2 (set1 (tuple2 a1 (tuple2 b1 c1))) b1)
  (Tuple2 (set1 (tuple2 a1 (tuple2 b1 c1))) b1 (t2tb261 a2) (t2tb14 x))
  (t2tb389 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a (tuple21 b c))) a)))
  (w (set (set (tuple21 a (tuple21 b c))))) (x a))
  (= (mem1 x
  (tb2t1
  (image a1 (set1 (tuple2 a1 (tuple2 b1 c1))) (t2tb391 p) (t2tb327 w))))
  (exists ((a2 (set (tuple21 a (tuple21 b c)))))
  (and (mem15 a2 w) (mem (tuple2 (set1 (tuple2 a1 (tuple2 b1 c1))) a1)
  (Tuple2 (set1 (tuple2 a1 (tuple2 b1 c1))) a1 (t2tb261 a2) (t2tb2 x))
  (t2tb391 p)))))))

;; mem_image
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (w (set (set (tuple21 a (tuple21 b c))))) (x uni))
  (= (mem b2 x (image b2 (set1 (tuple2 a1 (tuple2 b1 c1))) p (t2tb327 w)))
  (exists ((a2 (set (tuple21 a (tuple21 b c)))))
  (and (mem15 a2 w) (mem (tuple2 (set1 (tuple2 a1 (tuple2 b1 c1))) b2)
  (Tuple2 (set1 (tuple2 a1 (tuple2 b1 c1))) b2 (t2tb261 a2) x) p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a (tuple21 b c)) (set (tuple21 a
  (tuple21 b c)))))) (w (set (tuple21 a (tuple21 b c)))) (x (set (tuple21 a
  (tuple21 b c)))))
  (= (mem15 x
  (tb2t327
  (image (set1 (tuple2 a1 (tuple2 b1 c1))) (tuple2 a1 (tuple2 b1 c1))
  (t2tb393 p) (t2tb261 w))))
  (exists ((a2 (tuple21 a (tuple21 b c))))
  (and (mem14 a2 w) (mem
  (tuple2 (tuple2 a1 (tuple2 b1 c1)) (set1 (tuple2 a1 (tuple2 b1 c1))))
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) (set1 (tuple2 a1 (tuple2 b1 c1)))
  (t2tb260 a2) (t2tb261 x)) (t2tb393 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a (tuple21 b c)) (tuple21 a (tuple21 b
  c))))) (w (set (tuple21 a (tuple21 b c)))) (x (tuple21 a (tuple21 b c))))
  (= (mem14 x
  (tb2t261
  (image (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 (tuple2 b1 c1)) (t2tb395 p)
  (t2tb261 w))))
  (exists ((a2 (tuple21 a (tuple21 b c))))
  (and (mem14 a2 w) (mem
  (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 (tuple2 b1 c1)) (t2tb260 a2)
  (t2tb260 x)) (t2tb395 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a (tuple21 b c)) (set (tuple21 a c)))))
  (w (set (tuple21 a (tuple21 b c)))) (x (set (tuple21 a c))))
  (= (mem11 x
  (tb2t128
  (image (set1 (tuple2 a1 c1)) (tuple2 a1 (tuple2 b1 c1)) (t2tb397 p)
  (t2tb261 w))))
  (exists ((a2 (tuple21 a (tuple21 b c))))
  (and (mem14 a2 w) (mem
  (tuple2 (tuple2 a1 (tuple2 b1 c1)) (set1 (tuple2 a1 c1)))
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) (set1 (tuple2 a1 c1)) (t2tb260 a2)
  (t2tb129 x)) (t2tb397 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a (tuple21 b c)) (tuple21 a c))))
  (w (set (tuple21 a (tuple21 b c)))) (x (tuple21 a c)))
  (= (mem10 x
  (tb2t129
  (image (tuple2 a1 c1) (tuple2 a1 (tuple2 b1 c1)) (t2tb399 p) (t2tb261 w))))
  (exists ((a2 (tuple21 a (tuple21 b c))))
  (and (mem14 a2 w) (mem (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 c1))
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 c1) (t2tb260 a2) (t2tb133 x))
  (t2tb399 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a (tuple21 b c)) (tuple21 b c))))
  (w (set (tuple21 a (tuple21 b c)))) (x (tuple21 b c)))
  (= (mem8 x
  (tb2t131
  (image (tuple2 b1 c1) (tuple2 a1 (tuple2 b1 c1)) (t2tb401 p) (t2tb261 w))))
  (exists ((a2 (tuple21 a (tuple21 b c))))
  (and (mem14 a2 w) (mem (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 b1 c1))
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 b1 c1) (t2tb260 a2) (t2tb134 x))
  (t2tb401 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a (tuple21 b c)) c))) (w (set (tuple21 a
  (tuple21 b c)))) (x c))
  (= (mem7 x
  (tb2t132 (image c1 (tuple2 a1 (tuple2 b1 c1)) (t2tb403 p) (t2tb261 w))))
  (exists ((a2 (tuple21 a (tuple21 b c))))
  (and (mem14 a2 w) (mem (tuple2 (tuple2 a1 (tuple2 b1 c1)) c1)
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) c1 (t2tb260 a2) (t2tb135 x))
  (t2tb403 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a (tuple21 b c)) (set (tuple21 a b)))))
  (w (set (tuple21 a (tuple21 b c)))) (x (set (tuple21 a b))))
  (= (mem4 x
  (tb2t10
  (image (set1 (tuple2 a1 b1)) (tuple2 a1 (tuple2 b1 c1)) (t2tb405 p)
  (t2tb261 w))))
  (exists ((a2 (tuple21 a (tuple21 b c))))
  (and (mem14 a2 w) (mem
  (tuple2 (tuple2 a1 (tuple2 b1 c1)) (set1 (tuple2 a1 b1)))
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) (set1 (tuple2 a1 b1)) (t2tb260 a2)
  (t2tb11 x)) (t2tb405 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a (tuple21 b c)) (tuple21 a b))))
  (w (set (tuple21 a (tuple21 b c)))) (x (tuple21 a b)))
  (= (mem3 x
  (tb2t11
  (image (tuple2 a1 b1) (tuple2 a1 (tuple2 b1 c1)) (t2tb407 p) (t2tb261 w))))
  (exists ((a2 (tuple21 a (tuple21 b c))))
  (and (mem14 a2 w) (mem (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 b1))
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 b1) (t2tb260 a2) (t2tb13 x))
  (t2tb407 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a (tuple21 b c)) b))) (w (set (tuple21 a
  (tuple21 b c)))) (x b))
  (= (mem2 x
  (tb2t12 (image b1 (tuple2 a1 (tuple2 b1 c1)) (t2tb409 p) (t2tb261 w))))
  (exists ((a2 (tuple21 a (tuple21 b c))))
  (and (mem14 a2 w) (mem (tuple2 (tuple2 a1 (tuple2 b1 c1)) b1)
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) b1 (t2tb260 a2) (t2tb14 x))
  (t2tb409 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a (tuple21 b c)) a))) (w (set (tuple21 a
  (tuple21 b c)))) (x a))
  (= (mem1 x
  (tb2t1 (image a1 (tuple2 a1 (tuple2 b1 c1)) (t2tb411 p) (t2tb261 w))))
  (exists ((a2 (tuple21 a (tuple21 b c))))
  (and (mem14 a2 w) (mem (tuple2 (tuple2 a1 (tuple2 b1 c1)) a1)
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) a1 (t2tb260 a2) (t2tb2 x)) (t2tb411 p)))))))

;; mem_image
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (w (set (tuple21 a (tuple21 b c)))) (x uni))
  (= (mem b2 x (image b2 (tuple2 a1 (tuple2 b1 c1)) p (t2tb261 w)))
  (exists ((a2 (tuple21 a (tuple21 b c))))
  (and (mem14 a2 w) (mem (tuple2 (tuple2 a1 (tuple2 b1 c1)) b2)
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) b2 (t2tb260 a2) x) p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a c)) (set (tuple21 a (tuple21 b
  c)))))) (w (set (set (tuple21 a c)))) (x (set (tuple21 a (tuple21 b c)))))
  (= (mem15 x
  (tb2t327
  (image (set1 (tuple2 a1 (tuple2 b1 c1))) (set1 (tuple2 a1 c1)) (t2tb413 p)
  (t2tb128 w))))
  (exists ((a2 (set (tuple21 a c))))
  (and (mem11 a2 w) (mem
  (tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 a1 (tuple2 b1 c1))))
  (Tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 a1 (tuple2 b1 c1)))
  (t2tb129 a2) (t2tb261 x)) (t2tb413 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a c)) (tuple21 a (tuple21 b c)))))
  (w (set (set (tuple21 a c)))) (x (tuple21 a (tuple21 b c))))
  (= (mem14 x
  (tb2t261
  (image (tuple2 a1 (tuple2 b1 c1)) (set1 (tuple2 a1 c1)) (t2tb415 p)
  (t2tb128 w))))
  (exists ((a2 (set (tuple21 a c))))
  (and (mem11 a2 w) (mem
  (tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 (tuple2 b1 c1)) (t2tb129 a2)
  (t2tb260 x)) (t2tb415 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a c)) (set (tuple21 a c)))))
  (w (set (set (tuple21 a c)))) (x (set (tuple21 a c))))
  (= (mem11 x
  (tb2t128
  (image (set1 (tuple2 a1 c1)) (set1 (tuple2 a1 c1)) (t2tb136 p) (t2tb128 w))))
  (exists ((a2 (set (tuple21 a c))))
  (and (mem11 a2 w) (mem (tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 a1 c1)))
  (Tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 a1 c1)) (t2tb129 a2)
  (t2tb129 x)) (t2tb136 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a c)) (tuple21 a c))))
  (w (set (set (tuple21 a c)))) (x (tuple21 a c)))
  (= (mem10 x
  (tb2t129
  (image (tuple2 a1 c1) (set1 (tuple2 a1 c1)) (t2tb138 p) (t2tb128 w))))
  (exists ((a2 (set (tuple21 a c))))
  (and (mem11 a2 w) (mem (tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 c1))
  (Tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 c1) (t2tb129 a2) (t2tb133 x))
  (t2tb138 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a c)) (tuple21 b c))))
  (w (set (set (tuple21 a c)))) (x (tuple21 b c)))
  (= (mem8 x
  (tb2t131
  (image (tuple2 b1 c1) (set1 (tuple2 a1 c1)) (t2tb143 p) (t2tb128 w))))
  (exists ((a2 (set (tuple21 a c))))
  (and (mem11 a2 w) (mem (tuple2 (set1 (tuple2 a1 c1)) (tuple2 b1 c1))
  (Tuple2 (set1 (tuple2 a1 c1)) (tuple2 b1 c1) (t2tb129 a2) (t2tb134 x))
  (t2tb143 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a c)) c))) (w (set (set (tuple21 a
  c)))) (x c))
  (= (mem7 x
  (tb2t132 (image c1 (set1 (tuple2 a1 c1)) (t2tb144 p) (t2tb128 w))))
  (exists ((a2 (set (tuple21 a c))))
  (and (mem11 a2 w) (mem (tuple2 (set1 (tuple2 a1 c1)) c1)
  (Tuple2 (set1 (tuple2 a1 c1)) c1 (t2tb129 a2) (t2tb135 x)) (t2tb144 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a c)) (set (tuple21 a b)))))
  (w (set (set (tuple21 a c)))) (x (set (tuple21 a b))))
  (= (mem4 x
  (tb2t10
  (image (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 c1)) (t2tb146 p) (t2tb128 w))))
  (exists ((a2 (set (tuple21 a c))))
  (and (mem11 a2 w) (mem (tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 a1 b1)))
  (Tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 a1 b1)) (t2tb129 a2)
  (t2tb11 x)) (t2tb146 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a c)) (tuple21 a b))))
  (w (set (set (tuple21 a c)))) (x (tuple21 a b)))
  (= (mem3 x
  (tb2t11
  (image (tuple2 a1 b1) (set1 (tuple2 a1 c1)) (t2tb148 p) (t2tb128 w))))
  (exists ((a2 (set (tuple21 a c))))
  (and (mem11 a2 w) (mem (tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 b1))
  (Tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 b1) (t2tb129 a2) (t2tb13 x))
  (t2tb148 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a c)) b))) (w (set (set (tuple21 a
  c)))) (x b))
  (= (mem2 x
  (tb2t12 (image b1 (set1 (tuple2 a1 c1)) (t2tb150 p) (t2tb128 w))))
  (exists ((a2 (set (tuple21 a c))))
  (and (mem11 a2 w) (mem (tuple2 (set1 (tuple2 a1 c1)) b1)
  (Tuple2 (set1 (tuple2 a1 c1)) b1 (t2tb129 a2) (t2tb14 x)) (t2tb150 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a c)) a))) (w (set (set (tuple21 a
  c)))) (x a))
  (= (mem1 x
  (tb2t1 (image a1 (set1 (tuple2 a1 c1)) (t2tb152 p) (t2tb128 w))))
  (exists ((a2 (set (tuple21 a c))))
  (and (mem11 a2 w) (mem (tuple2 (set1 (tuple2 a1 c1)) a1)
  (Tuple2 (set1 (tuple2 a1 c1)) a1 (t2tb129 a2) (t2tb2 x)) (t2tb152 p)))))))

;; mem_image
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (w (set (set (tuple21 a c)))) (x uni))
  (= (mem b2 x (image b2 (set1 (tuple2 a1 c1)) p (t2tb128 w)))
  (exists ((a2 (set (tuple21 a c))))
  (and (mem11 a2 w) (mem (tuple2 (set1 (tuple2 a1 c1)) b2)
  (Tuple2 (set1 (tuple2 a1 c1)) b2 (t2tb129 a2) x) p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a c) (set (tuple21 a (tuple21 b c))))))
  (w (set (tuple21 a c))) (x (set (tuple21 a (tuple21 b c)))))
  (= (mem15 x
  (tb2t327
  (image (set1 (tuple2 a1 (tuple2 b1 c1))) (tuple2 a1 c1) (t2tb417 p)
  (t2tb129 w))))
  (exists ((a2 (tuple21 a c)))
  (and (mem10 a2 w) (mem
  (tuple2 (tuple2 a1 c1) (set1 (tuple2 a1 (tuple2 b1 c1))))
  (Tuple2 (tuple2 a1 c1) (set1 (tuple2 a1 (tuple2 b1 c1))) (t2tb133 a2)
  (t2tb261 x)) (t2tb417 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a c) (tuple21 a (tuple21 b c)))))
  (w (set (tuple21 a c))) (x (tuple21 a (tuple21 b c))))
  (= (mem14 x
  (tb2t261
  (image (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 c1) (t2tb419 p) (t2tb129 w))))
  (exists ((a2 (tuple21 a c)))
  (and (mem10 a2 w) (mem (tuple2 (tuple2 a1 c1) (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 (tuple2 a1 c1) (tuple2 a1 (tuple2 b1 c1)) (t2tb133 a2) (t2tb260 x))
  (t2tb419 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a c) (set (tuple21 a c)))))
  (w (set (tuple21 a c))) (x (set (tuple21 a c))))
  (= (mem11 x
  (tb2t128
  (image (set1 (tuple2 a1 c1)) (tuple2 a1 c1) (t2tb154 p) (t2tb129 w))))
  (exists ((a2 (tuple21 a c)))
  (and (mem10 a2 w) (mem (tuple2 (tuple2 a1 c1) (set1 (tuple2 a1 c1)))
  (Tuple2 (tuple2 a1 c1) (set1 (tuple2 a1 c1)) (t2tb133 a2) (t2tb129 x))
  (t2tb154 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a c) (tuple21 a c)))) (w (set (tuple21 a
  c))) (x (tuple21 a c)))
  (= (mem10 x
  (tb2t129 (image (tuple2 a1 c1) (tuple2 a1 c1) (t2tb157 p) (t2tb129 w))))
  (exists ((a2 (tuple21 a c)))
  (and (mem10 a2 w) (mem (tuple2 (tuple2 a1 c1) (tuple2 a1 c1))
  (Tuple2 (tuple2 a1 c1) (tuple2 a1 c1) (t2tb133 a2) (t2tb133 x))
  (t2tb157 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a c) (tuple21 b c)))) (w (set (tuple21 a
  c))) (x (tuple21 b c)))
  (= (mem8 x
  (tb2t131 (image (tuple2 b1 c1) (tuple2 a1 c1) (t2tb160 p) (t2tb129 w))))
  (exists ((a2 (tuple21 a c)))
  (and (mem10 a2 w) (mem (tuple2 (tuple2 a1 c1) (tuple2 b1 c1))
  (Tuple2 (tuple2 a1 c1) (tuple2 b1 c1) (t2tb133 a2) (t2tb134 x))
  (t2tb160 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a c) c))) (w (set (tuple21 a c))) (x c))
  (= (mem7 x (tb2t132 (image c1 (tuple2 a1 c1) (t2tb162 p) (t2tb129 w))))
  (exists ((a2 (tuple21 a c)))
  (and (mem10 a2 w) (mem (tuple2 (tuple2 a1 c1) c1)
  (Tuple2 (tuple2 a1 c1) c1 (t2tb133 a2) (t2tb135 x)) (t2tb162 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a c) (set (tuple21 a b)))))
  (w (set (tuple21 a c))) (x (set (tuple21 a b))))
  (= (mem4 x
  (tb2t10
  (image (set1 (tuple2 a1 b1)) (tuple2 a1 c1) (t2tb164 p) (t2tb129 w))))
  (exists ((a2 (tuple21 a c)))
  (and (mem10 a2 w) (mem (tuple2 (tuple2 a1 c1) (set1 (tuple2 a1 b1)))
  (Tuple2 (tuple2 a1 c1) (set1 (tuple2 a1 b1)) (t2tb133 a2) (t2tb11 x))
  (t2tb164 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a c) (tuple21 a b)))) (w (set (tuple21 a
  c))) (x (tuple21 a b)))
  (= (mem3 x
  (tb2t11 (image (tuple2 a1 b1) (tuple2 a1 c1) (t2tb166 p) (t2tb129 w))))
  (exists ((a2 (tuple21 a c)))
  (and (mem10 a2 w) (mem (tuple2 (tuple2 a1 c1) (tuple2 a1 b1))
  (Tuple2 (tuple2 a1 c1) (tuple2 a1 b1) (t2tb133 a2) (t2tb13 x))
  (t2tb166 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a c) b))) (w (set (tuple21 a c))) (x b))
  (= (mem2 x (tb2t12 (image b1 (tuple2 a1 c1) (t2tb168 p) (t2tb129 w))))
  (exists ((a2 (tuple21 a c)))
  (and (mem10 a2 w) (mem (tuple2 (tuple2 a1 c1) b1)
  (Tuple2 (tuple2 a1 c1) b1 (t2tb133 a2) (t2tb14 x)) (t2tb168 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a c) a))) (w (set (tuple21 a c))) (x a))
  (= (mem1 x (tb2t1 (image a1 (tuple2 a1 c1) (t2tb170 p) (t2tb129 w))))
  (exists ((a2 (tuple21 a c)))
  (and (mem10 a2 w) (mem (tuple2 (tuple2 a1 c1) a1)
  (Tuple2 (tuple2 a1 c1) a1 (t2tb133 a2) (t2tb2 x)) (t2tb170 p)))))))

;; mem_image
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (w (set (tuple21 a c))) (x uni))
  (= (mem b2 x (image b2 (tuple2 a1 c1) p (t2tb129 w)))
  (exists ((a2 (tuple21 a c)))
  (and (mem10 a2 w) (mem (tuple2 (tuple2 a1 c1) b2)
  (Tuple2 (tuple2 a1 c1) b2 (t2tb133 a2) x) p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 b c) (set (tuple21 a (tuple21 b c))))))
  (w (set (tuple21 b c))) (x (set (tuple21 a (tuple21 b c)))))
  (= (mem15 x
  (tb2t327
  (image (set1 (tuple2 a1 (tuple2 b1 c1))) (tuple2 b1 c1) (t2tb421 p)
  (t2tb131 w))))
  (exists ((a2 (tuple21 b c)))
  (and (mem8 a2 w) (mem
  (tuple2 (tuple2 b1 c1) (set1 (tuple2 a1 (tuple2 b1 c1))))
  (Tuple2 (tuple2 b1 c1) (set1 (tuple2 a1 (tuple2 b1 c1))) (t2tb134 a2)
  (t2tb261 x)) (t2tb421 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 b c) (tuple21 a (tuple21 b c)))))
  (w (set (tuple21 b c))) (x (tuple21 a (tuple21 b c))))
  (= (mem14 x
  (tb2t261
  (image (tuple2 a1 (tuple2 b1 c1)) (tuple2 b1 c1) (t2tb423 p) (t2tb131 w))))
  (exists ((a2 (tuple21 b c)))
  (and (mem8 a2 w) (mem (tuple2 (tuple2 b1 c1) (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 (tuple2 b1 c1) (tuple2 a1 (tuple2 b1 c1)) (t2tb134 a2) (t2tb260 x))
  (t2tb423 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 b c) (set (tuple21 a c)))))
  (w (set (tuple21 b c))) (x (set (tuple21 a c))))
  (= (mem11 x
  (tb2t128
  (image (set1 (tuple2 a1 c1)) (tuple2 b1 c1) (t2tb190 p) (t2tb131 w))))
  (exists ((a2 (tuple21 b c)))
  (and (mem8 a2 w) (mem (tuple2 (tuple2 b1 c1) (set1 (tuple2 a1 c1)))
  (Tuple2 (tuple2 b1 c1) (set1 (tuple2 a1 c1)) (t2tb134 a2) (t2tb129 x))
  (t2tb190 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 b c) (tuple21 a c)))) (w (set (tuple21 b
  c))) (x (tuple21 a c)))
  (= (mem10 x
  (tb2t129 (image (tuple2 a1 c1) (tuple2 b1 c1) (t2tb192 p) (t2tb131 w))))
  (exists ((a2 (tuple21 b c)))
  (and (mem8 a2 w) (mem (tuple2 (tuple2 b1 c1) (tuple2 a1 c1))
  (Tuple2 (tuple2 b1 c1) (tuple2 a1 c1) (t2tb134 a2) (t2tb133 x))
  (t2tb192 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 b c) (tuple21 b c)))) (w (set (tuple21 b
  c))) (x (tuple21 b c)))
  (= (mem8 x
  (tb2t131 (image (tuple2 b1 c1) (tuple2 b1 c1) (t2tb196 p) (t2tb131 w))))
  (exists ((a2 (tuple21 b c)))
  (and (mem8 a2 w) (mem (tuple2 (tuple2 b1 c1) (tuple2 b1 c1))
  (Tuple2 (tuple2 b1 c1) (tuple2 b1 c1) (t2tb134 a2) (t2tb134 x))
  (t2tb196 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 b c) c))) (w (set (tuple21 b c))) (x c))
  (= (mem7 x (tb2t132 (image c1 (tuple2 b1 c1) (t2tb198 p) (t2tb131 w))))
  (exists ((a2 (tuple21 b c)))
  (and (mem8 a2 w) (mem (tuple2 (tuple2 b1 c1) c1)
  (Tuple2 (tuple2 b1 c1) c1 (t2tb134 a2) (t2tb135 x)) (t2tb198 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 b c) (set (tuple21 a b)))))
  (w (set (tuple21 b c))) (x (set (tuple21 a b))))
  (= (mem4 x
  (tb2t10
  (image (set1 (tuple2 a1 b1)) (tuple2 b1 c1) (t2tb201 p) (t2tb131 w))))
  (exists ((a2 (tuple21 b c)))
  (and (mem8 a2 w) (mem (tuple2 (tuple2 b1 c1) (set1 (tuple2 a1 b1)))
  (Tuple2 (tuple2 b1 c1) (set1 (tuple2 a1 b1)) (t2tb134 a2) (t2tb11 x))
  (t2tb201 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 b c) (tuple21 a b)))) (w (set (tuple21 b
  c))) (x (tuple21 a b)))
  (= (mem3 x
  (tb2t11 (image (tuple2 a1 b1) (tuple2 b1 c1) (t2tb202 p) (t2tb131 w))))
  (exists ((a2 (tuple21 b c)))
  (and (mem8 a2 w) (mem (tuple2 (tuple2 b1 c1) (tuple2 a1 b1))
  (Tuple2 (tuple2 b1 c1) (tuple2 a1 b1) (t2tb134 a2) (t2tb13 x))
  (t2tb202 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 b c) b))) (w (set (tuple21 b c))) (x b))
  (= (mem2 x (tb2t12 (image b1 (tuple2 b1 c1) (t2tb204 p) (t2tb131 w))))
  (exists ((a2 (tuple21 b c)))
  (and (mem8 a2 w) (mem (tuple2 (tuple2 b1 c1) b1)
  (Tuple2 (tuple2 b1 c1) b1 (t2tb134 a2) (t2tb14 x)) (t2tb204 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 b c) a))) (w (set (tuple21 b c))) (x a))
  (= (mem1 x (tb2t1 (image a1 (tuple2 b1 c1) (t2tb206 p) (t2tb131 w))))
  (exists ((a2 (tuple21 b c)))
  (and (mem8 a2 w) (mem (tuple2 (tuple2 b1 c1) a1)
  (Tuple2 (tuple2 b1 c1) a1 (t2tb134 a2) (t2tb2 x)) (t2tb206 p)))))))

;; mem_image
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (w (set (tuple21 b c))) (x uni))
  (= (mem b2 x (image b2 (tuple2 b1 c1) p (t2tb131 w)))
  (exists ((a2 (tuple21 b c)))
  (and (mem8 a2 w) (mem (tuple2 (tuple2 b1 c1) b2)
  (Tuple2 (tuple2 b1 c1) b2 (t2tb134 a2) x) p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 c (set (tuple21 a (tuple21 b c)))))) (w (set c))
  (x (set (tuple21 a (tuple21 b c)))))
  (= (mem15 x
  (tb2t327
  (image (set1 (tuple2 a1 (tuple2 b1 c1))) c1 (t2tb425 p) (t2tb132 w))))
  (exists ((a2 c))
  (and (mem7 a2 w) (mem (tuple2 c1 (set1 (tuple2 a1 (tuple2 b1 c1))))
  (Tuple2 c1 (set1 (tuple2 a1 (tuple2 b1 c1))) (t2tb135 a2) (t2tb261 x))
  (t2tb425 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 c (tuple21 a (tuple21 b c))))) (w (set c))
  (x (tuple21 a (tuple21 b c))))
  (= (mem14 x
  (tb2t261 (image (tuple2 a1 (tuple2 b1 c1)) c1 (t2tb427 p) (t2tb132 w))))
  (exists ((a2 c))
  (and (mem7 a2 w) (mem (tuple2 c1 (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 c1 (tuple2 a1 (tuple2 b1 c1)) (t2tb135 a2) (t2tb260 x))
  (t2tb427 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 c (set (tuple21 a c))))) (w (set c))
  (x (set (tuple21 a c))))
  (= (mem11 x
  (tb2t128 (image (set1 (tuple2 a1 c1)) c1 (t2tb208 p) (t2tb132 w))))
  (exists ((a2 c))
  (and (mem7 a2 w) (mem (tuple2 c1 (set1 (tuple2 a1 c1)))
  (Tuple2 c1 (set1 (tuple2 a1 c1)) (t2tb135 a2) (t2tb129 x)) (t2tb208 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 c (tuple21 a c)))) (w (set c)) (x (tuple21 a c)))
  (= (mem10 x (tb2t129 (image (tuple2 a1 c1) c1 (t2tb210 p) (t2tb132 w))))
  (exists ((a2 c))
  (and (mem7 a2 w) (mem (tuple2 c1 (tuple2 a1 c1))
  (Tuple2 c1 (tuple2 a1 c1) (t2tb135 a2) (t2tb133 x)) (t2tb210 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 c (tuple21 b c)))) (w (set c)) (x (tuple21 b c)))
  (= (mem8 x (tb2t131 (image (tuple2 b1 c1) c1 (t2tb215 p) (t2tb132 w))))
  (exists ((a2 c))
  (and (mem7 a2 w) (mem (tuple2 c1 (tuple2 b1 c1))
  (Tuple2 c1 (tuple2 b1 c1) (t2tb135 a2) (t2tb134 x)) (t2tb215 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 c c))) (w (set c)) (x c))
  (= (mem7 x (tb2t132 (image c1 c1 (t2tb216 p) (t2tb132 w))))
  (exists ((a2 c))
  (and (mem7 a2 w) (mem (tuple2 c1 c1)
  (Tuple2 c1 c1 (t2tb135 a2) (t2tb135 x)) (t2tb216 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 c (set (tuple21 a b))))) (w (set c))
  (x (set (tuple21 a b))))
  (= (mem4 x
  (tb2t10 (image (set1 (tuple2 a1 b1)) c1 (t2tb218 p) (t2tb132 w))))
  (exists ((a2 c))
  (and (mem7 a2 w) (mem (tuple2 c1 (set1 (tuple2 a1 b1)))
  (Tuple2 c1 (set1 (tuple2 a1 b1)) (t2tb135 a2) (t2tb11 x)) (t2tb218 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 c (tuple21 a b)))) (w (set c)) (x (tuple21 a b)))
  (= (mem3 x (tb2t11 (image (tuple2 a1 b1) c1 (t2tb220 p) (t2tb132 w))))
  (exists ((a2 c))
  (and (mem7 a2 w) (mem (tuple2 c1 (tuple2 a1 b1))
  (Tuple2 c1 (tuple2 a1 b1) (t2tb135 a2) (t2tb13 x)) (t2tb220 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 c b))) (w (set c)) (x b))
  (= (mem2 x (tb2t12 (image b1 c1 (t2tb222 p) (t2tb132 w))))
  (exists ((a2 c))
  (and (mem7 a2 w) (mem (tuple2 c1 b1) (Tuple2 c1 b1 (t2tb135 a2) (t2tb14 x))
  (t2tb222 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 c a))) (w (set c)) (x a))
  (= (mem1 x (tb2t1 (image a1 c1 (t2tb224 p) (t2tb132 w))))
  (exists ((a2 c))
  (and (mem7 a2 w) (mem (tuple2 c1 a1) (Tuple2 c1 a1 (t2tb135 a2) (t2tb2 x))
  (t2tb224 p)))))))

;; mem_image
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (w (set c)) (x uni))
  (= (mem b2 x (image b2 c1 p (t2tb132 w)))
  (exists ((a2 c))
  (and (mem7 a2 w) (mem (tuple2 c1 b2) (Tuple2 c1 b2 (t2tb135 a2) x) p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a b)) (set (tuple21 a (tuple21 b
  c)))))) (w (set (set (tuple21 a b)))) (x (set (tuple21 a (tuple21 b c)))))
  (= (mem15 x
  (tb2t327
  (image (set1 (tuple2 a1 (tuple2 b1 c1))) (set1 (tuple2 a1 b1)) (t2tb429 p)
  (t2tb10 w))))
  (exists ((a2 (set (tuple21 a b))))
  (and (mem4 a2 w) (mem
  (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 (tuple2 b1 c1))))
  (Tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 (tuple2 b1 c1))) (t2tb11 a2)
  (t2tb261 x)) (t2tb429 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a b)) (tuple21 a (tuple21 b c)))))
  (w (set (set (tuple21 a b)))) (x (tuple21 a (tuple21 b c))))
  (= (mem14 x
  (tb2t261
  (image (tuple2 a1 (tuple2 b1 c1)) (set1 (tuple2 a1 b1)) (t2tb431 p)
  (t2tb10 w))))
  (exists ((a2 (set (tuple21 a b))))
  (and (mem4 a2 w) (mem
  (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 (tuple2 b1 c1)) (t2tb11 a2)
  (t2tb260 x)) (t2tb431 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a b)) (set (tuple21 a c)))))
  (w (set (set (tuple21 a b)))) (x (set (tuple21 a c))))
  (= (mem11 x
  (tb2t128
  (image (set1 (tuple2 a1 c1)) (set1 (tuple2 a1 b1)) (t2tb226 p) (t2tb10 w))))
  (exists ((a2 (set (tuple21 a b))))
  (and (mem4 a2 w) (mem (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 c1)))
  (Tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 c1)) (t2tb11 a2)
  (t2tb129 x)) (t2tb226 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a b)) (tuple21 a c))))
  (w (set (set (tuple21 a b)))) (x (tuple21 a c)))
  (= (mem10 x
  (tb2t129
  (image (tuple2 a1 c1) (set1 (tuple2 a1 b1)) (t2tb229 p) (t2tb10 w))))
  (exists ((a2 (set (tuple21 a b))))
  (and (mem4 a2 w) (mem (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 c1))
  (Tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 c1) (t2tb11 a2) (t2tb133 x))
  (t2tb229 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a b)) (tuple21 b c))))
  (w (set (set (tuple21 a b)))) (x (tuple21 b c)))
  (= (mem8 x
  (tb2t131
  (image (tuple2 b1 c1) (set1 (tuple2 a1 b1)) (t2tb232 p) (t2tb10 w))))
  (exists ((a2 (set (tuple21 a b))))
  (and (mem4 a2 w) (mem (tuple2 (set1 (tuple2 a1 b1)) (tuple2 b1 c1))
  (Tuple2 (set1 (tuple2 a1 b1)) (tuple2 b1 c1) (t2tb11 a2) (t2tb134 x))
  (t2tb232 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a b)) c))) (w (set (set (tuple21 a
  b)))) (x c))
  (= (mem7 x
  (tb2t132 (image c1 (set1 (tuple2 a1 b1)) (t2tb234 p) (t2tb10 w))))
  (exists ((a2 (set (tuple21 a b))))
  (and (mem4 a2 w) (mem (tuple2 (set1 (tuple2 a1 b1)) c1)
  (Tuple2 (set1 (tuple2 a1 b1)) c1 (t2tb11 a2) (t2tb135 x)) (t2tb234 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a b)) (set (tuple21 a b)))))
  (w (set (set (tuple21 a b)))) (x (set (tuple21 a b))))
  (= (mem4 x
  (tb2t10
  (image (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1)) (t2tb15 p) (t2tb10 w))))
  (exists ((a2 (set (tuple21 a b))))
  (and (mem4 a2 w) (mem (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1)))
  (Tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1)) (t2tb11 a2) (t2tb11 x))
  (t2tb15 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a b)) (tuple21 a b))))
  (w (set (set (tuple21 a b)))) (x (tuple21 a b)))
  (= (mem3 x
  (tb2t11 (image (tuple2 a1 b1) (set1 (tuple2 a1 b1)) (t2tb17 p) (t2tb10 w))))
  (exists ((a2 (set (tuple21 a b))))
  (and (mem4 a2 w) (mem (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 b1))
  (Tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 b1) (t2tb11 a2) (t2tb13 x))
  (t2tb17 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a b)) b))) (w (set (set (tuple21 a
  b)))) (x b))
  (= (mem2 x (tb2t12 (image b1 (set1 (tuple2 a1 b1)) (t2tb19 p) (t2tb10 w))))
  (exists ((a2 (set (tuple21 a b))))
  (and (mem4 a2 w) (mem (tuple2 (set1 (tuple2 a1 b1)) b1)
  (Tuple2 (set1 (tuple2 a1 b1)) b1 (t2tb11 a2) (t2tb14 x)) (t2tb19 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a b)) a))) (w (set (set (tuple21 a
  b)))) (x a))
  (= (mem1 x (tb2t1 (image a1 (set1 (tuple2 a1 b1)) (t2tb22 p) (t2tb10 w))))
  (exists ((a2 (set (tuple21 a b))))
  (and (mem4 a2 w) (mem (tuple2 (set1 (tuple2 a1 b1)) a1)
  (Tuple2 (set1 (tuple2 a1 b1)) a1 (t2tb11 a2) (t2tb2 x)) (t2tb22 p)))))))

;; mem_image
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (w (set (set (tuple21 a b)))) (x uni))
  (= (mem b2 x (image b2 (set1 (tuple2 a1 b1)) p (t2tb10 w)))
  (exists ((a2 (set (tuple21 a b))))
  (and (mem4 a2 w) (mem (tuple2 (set1 (tuple2 a1 b1)) b2)
  (Tuple2 (set1 (tuple2 a1 b1)) b2 (t2tb11 a2) x) p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) (set (tuple21 a (tuple21 b c))))))
  (w (set (tuple21 a b))) (x (set (tuple21 a (tuple21 b c)))))
  (= (mem15 x
  (tb2t327
  (image (set1 (tuple2 a1 (tuple2 b1 c1))) (tuple2 a1 b1) (t2tb433 p)
  (t2tb11 w))))
  (exists ((a2 (tuple21 a b)))
  (and (mem3 a2 w) (mem
  (tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 (tuple2 b1 c1))))
  (Tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 (tuple2 b1 c1))) (t2tb13 a2)
  (t2tb261 x)) (t2tb433 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) (tuple21 a (tuple21 b c)))))
  (w (set (tuple21 a b))) (x (tuple21 a (tuple21 b c))))
  (= (mem14 x
  (tb2t261
  (image (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 b1) (t2tb435 p) (t2tb11 w))))
  (exists ((a2 (tuple21 a b)))
  (and (mem3 a2 w) (mem (tuple2 (tuple2 a1 b1) (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 (tuple2 a1 b1) (tuple2 a1 (tuple2 b1 c1)) (t2tb13 a2) (t2tb260 x))
  (t2tb435 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) (set (tuple21 a c)))))
  (w (set (tuple21 a b))) (x (set (tuple21 a c))))
  (= (mem11 x
  (tb2t128
  (image (set1 (tuple2 a1 c1)) (tuple2 a1 b1) (t2tb236 p) (t2tb11 w))))
  (exists ((a2 (tuple21 a b)))
  (and (mem3 a2 w) (mem (tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 c1)))
  (Tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 c1)) (t2tb13 a2) (t2tb129 x))
  (t2tb236 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) (tuple21 a c)))) (w (set (tuple21 a
  b))) (x (tuple21 a c)))
  (= (mem10 x
  (tb2t129 (image (tuple2 a1 c1) (tuple2 a1 b1) (t2tb238 p) (t2tb11 w))))
  (exists ((a2 (tuple21 a b)))
  (and (mem3 a2 w) (mem (tuple2 (tuple2 a1 b1) (tuple2 a1 c1))
  (Tuple2 (tuple2 a1 b1) (tuple2 a1 c1) (t2tb13 a2) (t2tb133 x))
  (t2tb238 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) (tuple21 b c)))) (w (set (tuple21 a
  b))) (x (tuple21 b c)))
  (= (mem8 x
  (tb2t131 (image (tuple2 b1 c1) (tuple2 a1 b1) (t2tb242 p) (t2tb11 w))))
  (exists ((a2 (tuple21 a b)))
  (and (mem3 a2 w) (mem (tuple2 (tuple2 a1 b1) (tuple2 b1 c1))
  (Tuple2 (tuple2 a1 b1) (tuple2 b1 c1) (t2tb13 a2) (t2tb134 x))
  (t2tb242 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) c))) (w (set (tuple21 a b))) (x c))
  (= (mem7 x (tb2t132 (image c1 (tuple2 a1 b1) (t2tb245 p) (t2tb11 w))))
  (exists ((a2 (tuple21 a b)))
  (and (mem3 a2 w) (mem (tuple2 (tuple2 a1 b1) c1)
  (Tuple2 (tuple2 a1 b1) c1 (t2tb13 a2) (t2tb135 x)) (t2tb245 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) (set (tuple21 a b)))))
  (w (set (tuple21 a b))) (x (set (tuple21 a b))))
  (= (mem4 x
  (tb2t10 (image (set1 (tuple2 a1 b1)) (tuple2 a1 b1) (t2tb23 p) (t2tb11 w))))
  (exists ((a2 (tuple21 a b)))
  (and (mem3 a2 w) (mem (tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 b1)))
  (Tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 b1)) (t2tb13 a2) (t2tb11 x))
  (t2tb23 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) (tuple21 a b)))) (w (set (tuple21 a
  b))) (x (tuple21 a b)))
  (= (mem3 x
  (tb2t11 (image (tuple2 a1 b1) (tuple2 a1 b1) (t2tb25 p) (t2tb11 w))))
  (exists ((a2 (tuple21 a b)))
  (and (mem3 a2 w) (mem (tuple2 (tuple2 a1 b1) (tuple2 a1 b1))
  (Tuple2 (tuple2 a1 b1) (tuple2 a1 b1) (t2tb13 a2) (t2tb13 x)) (t2tb25 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) b))) (w (set (tuple21 a b))) (x b))
  (= (mem2 x (tb2t12 (image b1 (tuple2 a1 b1) (t2tb27 p) (t2tb11 w))))
  (exists ((a2 (tuple21 a b)))
  (and (mem3 a2 w) (mem (tuple2 (tuple2 a1 b1) b1)
  (Tuple2 (tuple2 a1 b1) b1 (t2tb13 a2) (t2tb14 x)) (t2tb27 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) a))) (w (set (tuple21 a b))) (x a))
  (= (mem1 x (tb2t1 (image a1 (tuple2 a1 b1) (t2tb29 p) (t2tb11 w))))
  (exists ((a2 (tuple21 a b)))
  (and (mem3 a2 w) (mem (tuple2 (tuple2 a1 b1) a1)
  (Tuple2 (tuple2 a1 b1) a1 (t2tb13 a2) (t2tb2 x)) (t2tb29 p)))))))

;; mem_image
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (w (set (tuple21 a b))) (x uni))
  (= (mem b2 x (image b2 (tuple2 a1 b1) p (t2tb11 w)))
  (exists ((a2 (tuple21 a b)))
  (and (mem3 a2 w) (mem (tuple2 (tuple2 a1 b1) b2)
  (Tuple2 (tuple2 a1 b1) b2 (t2tb13 a2) x) p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 b (set (tuple21 a (tuple21 b c)))))) (w (set b))
  (x (set (tuple21 a (tuple21 b c)))))
  (= (mem15 x
  (tb2t327
  (image (set1 (tuple2 a1 (tuple2 b1 c1))) b1 (t2tb437 p) (t2tb12 w))))
  (exists ((a2 b))
  (and (mem2 a2 w) (mem (tuple2 b1 (set1 (tuple2 a1 (tuple2 b1 c1))))
  (Tuple2 b1 (set1 (tuple2 a1 (tuple2 b1 c1))) (t2tb14 a2) (t2tb261 x))
  (t2tb437 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 b (tuple21 a (tuple21 b c))))) (w (set b))
  (x (tuple21 a (tuple21 b c))))
  (= (mem14 x
  (tb2t261 (image (tuple2 a1 (tuple2 b1 c1)) b1 (t2tb439 p) (t2tb12 w))))
  (exists ((a2 b))
  (and (mem2 a2 w) (mem (tuple2 b1 (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 b1 (tuple2 a1 (tuple2 b1 c1)) (t2tb14 a2) (t2tb260 x))
  (t2tb439 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 b (set (tuple21 a c))))) (w (set b))
  (x (set (tuple21 a c))))
  (= (mem11 x
  (tb2t128 (image (set1 (tuple2 a1 c1)) b1 (t2tb246 p) (t2tb12 w))))
  (exists ((a2 b))
  (and (mem2 a2 w) (mem (tuple2 b1 (set1 (tuple2 a1 c1)))
  (Tuple2 b1 (set1 (tuple2 a1 c1)) (t2tb14 a2) (t2tb129 x)) (t2tb246 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 b (tuple21 a c)))) (w (set b)) (x (tuple21 a c)))
  (= (mem10 x (tb2t129 (image (tuple2 a1 c1) b1 (t2tb248 p) (t2tb12 w))))
  (exists ((a2 b))
  (and (mem2 a2 w) (mem (tuple2 b1 (tuple2 a1 c1))
  (Tuple2 b1 (tuple2 a1 c1) (t2tb14 a2) (t2tb133 x)) (t2tb248 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 b (tuple21 b c)))) (w (set b)) (x (tuple21 b c)))
  (= (mem8 x (tb2t131 (image (tuple2 b1 c1) b1 (t2tb252 p) (t2tb12 w))))
  (exists ((a2 b))
  (and (mem2 a2 w) (mem (tuple2 b1 (tuple2 b1 c1))
  (Tuple2 b1 (tuple2 b1 c1) (t2tb14 a2) (t2tb134 x)) (t2tb252 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 b c))) (w (set b)) (x c))
  (= (mem7 x (tb2t132 (image c1 b1 (t2tb131 p) (t2tb12 w))))
  (exists ((a2 b))
  (and (mem2 a2 w) (mem8 (tb2t134 (Tuple2 b1 c1 (t2tb14 a2) (t2tb135 x))) p))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 b (set (tuple21 a b))))) (w (set b))
  (x (set (tuple21 a b))))
  (= (mem4 x (tb2t10 (image (set1 (tuple2 a1 b1)) b1 (t2tb31 p) (t2tb12 w))))
  (exists ((a2 b))
  (and (mem2 a2 w) (mem (tuple2 b1 (set1 (tuple2 a1 b1)))
  (Tuple2 b1 (set1 (tuple2 a1 b1)) (t2tb14 a2) (t2tb11 x)) (t2tb31 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 b (tuple21 a b)))) (w (set b)) (x (tuple21 a b)))
  (= (mem3 x (tb2t11 (image (tuple2 a1 b1) b1 (t2tb34 p) (t2tb12 w))))
  (exists ((a2 b))
  (and (mem2 a2 w) (mem (tuple2 b1 (tuple2 a1 b1))
  (Tuple2 b1 (tuple2 a1 b1) (t2tb14 a2) (t2tb13 x)) (t2tb34 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 b b))) (w (set b)) (x b))
  (= (mem2 x (tb2t12 (image b1 b1 (t2tb35 p) (t2tb12 w))))
  (exists ((a2 b))
  (and (mem2 a2 w) (mem (tuple2 b1 b1) (Tuple2 b1 b1 (t2tb14 a2) (t2tb14 x))
  (t2tb35 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 b a))) (w (set b)) (x a))
  (= (mem1 x (tb2t1 (image a1 b1 (t2tb37 p) (t2tb12 w))))
  (exists ((a2 b))
  (and (mem2 a2 w) (mem (tuple2 b1 a1) (Tuple2 b1 a1 (t2tb14 a2) (t2tb2 x))
  (t2tb37 p)))))))

;; mem_image
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (w (set b)) (x uni))
  (= (mem b2 x (image b2 b1 p (t2tb12 w)))
  (exists ((a2 b))
  (and (mem2 a2 w) (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 a2) x) p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 a (set (tuple21 a (tuple21 b c)))))) (w (set a))
  (x (set (tuple21 a (tuple21 b c)))))
  (= (mem15 x
  (tb2t327
  (image (set1 (tuple2 a1 (tuple2 b1 c1))) a1 (t2tb441 p) (t2tb1 w))))
  (exists ((a2 a))
  (and (mem1 a2 w) (mem (tuple2 a1 (set1 (tuple2 a1 (tuple2 b1 c1))))
  (Tuple2 a1 (set1 (tuple2 a1 (tuple2 b1 c1))) (t2tb2 a2) (t2tb261 x))
  (t2tb441 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 a (tuple21 a (tuple21 b c))))) (w (set a))
  (x (tuple21 a (tuple21 b c))))
  (= (mem14 x
  (tb2t261 (image (tuple2 a1 (tuple2 b1 c1)) a1 (t2tb443 p) (t2tb1 w))))
  (exists ((a2 a))
  (and (mem1 a2 w) (mem (tuple2 a1 (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 a1 (tuple2 a1 (tuple2 b1 c1)) (t2tb2 a2) (t2tb260 x)) (t2tb443 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 a (set (tuple21 a c))))) (w (set a))
  (x (set (tuple21 a c))))
  (= (mem11 x
  (tb2t128 (image (set1 (tuple2 a1 c1)) a1 (t2tb254 p) (t2tb1 w))))
  (exists ((a2 a))
  (and (mem1 a2 w) (mem (tuple2 a1 (set1 (tuple2 a1 c1)))
  (Tuple2 a1 (set1 (tuple2 a1 c1)) (t2tb2 a2) (t2tb129 x)) (t2tb254 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 a (tuple21 a c)))) (w (set a)) (x (tuple21 a c)))
  (= (mem10 x (tb2t129 (image (tuple2 a1 c1) a1 (t2tb256 p) (t2tb1 w))))
  (exists ((a2 a))
  (and (mem1 a2 w) (mem (tuple2 a1 (tuple2 a1 c1))
  (Tuple2 a1 (tuple2 a1 c1) (t2tb2 a2) (t2tb133 x)) (t2tb256 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 a (tuple21 b c)))) (w (set a)) (x (tuple21 b c)))
  (= (mem8 x (tb2t131 (image (tuple2 b1 c1) a1 (t2tb261 p) (t2tb1 w))))
  (exists ((a2 a))
  (and (mem1 a2 w) (mem14
  (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 a2) (t2tb134 x))) p))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 a c))) (w (set a)) (x c))
  (= (mem7 x (tb2t132 (image c1 a1 (t2tb129 p) (t2tb1 w))))
  (exists ((a2 a))
  (and (mem1 a2 w) (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 a2) (t2tb135 x))) p))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 a (set (tuple21 a b))))) (w (set a))
  (x (set (tuple21 a b))))
  (= (mem4 x (tb2t10 (image (set1 (tuple2 a1 b1)) a1 (t2tb39 p) (t2tb1 w))))
  (exists ((a2 a))
  (and (mem1 a2 w) (mem (tuple2 a1 (set1 (tuple2 a1 b1)))
  (Tuple2 a1 (set1 (tuple2 a1 b1)) (t2tb2 a2) (t2tb11 x)) (t2tb39 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 a (tuple21 a b)))) (w (set a)) (x (tuple21 a b)))
  (= (mem3 x (tb2t11 (image (tuple2 a1 b1) a1 (t2tb41 p) (t2tb1 w))))
  (exists ((a2 a))
  (and (mem1 a2 w) (mem (tuple2 a1 (tuple2 a1 b1))
  (Tuple2 a1 (tuple2 a1 b1) (t2tb2 a2) (t2tb13 x)) (t2tb41 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 a b))) (w (set a)) (x b))
  (= (mem2 x (tb2t12 (image b1 a1 (t2tb11 p) (t2tb1 w))))
  (exists ((a2 a))
  (and (mem1 a2 w) (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 a2) (t2tb14 x))) p))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 a a))) (w (set a)) (x a))
  (= (mem1 x (tb2t1 (image a1 a1 (t2tb4 p) (t2tb1 w))))
  (exists ((a2 a))
  (and (mem1 a2 w) (mem (tuple2 a1 a1) (Tuple2 a1 a1 (t2tb2 a2) (t2tb2 x))
  (t2tb4 p)))))))

;; mem_image
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (w (set a)) (x uni))
  (= (mem b2 x (image b2 a1 p (t2tb1 w)))
  (exists ((a2 a))
  (and (mem1 a2 w) (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 a2) x) p)))))))

;; mem_image
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((p uni) (w uni) (x uni))
  (and
  (=> (mem b2 x (image b2 a2 p w))
  (exists ((a3 uni))
  (and (sort a2 a3)
  (and (mem a2 a3 w) (mem (tuple2 a2 b2) (Tuple2 a2 b2 a3 x) p)))))
  (=>
  (exists ((a3 uni))
  (and (mem a2 a3 w) (mem (tuple2 a2 b2) (Tuple2 a2 b2 a3 x) p))) (mem b2 x
  (image b2 a2 p w)))))))

(declare-fun infix_lspl (ty ty uni uni) uni)

;; infix <+_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (tuple2 a2 b2))
  (infix_lspl b2 a2 x x1)))))

;; mem_overriding
  (assert
  (forall ((b2 ty))
  (forall ((q uni) (p uni) (x (set (tuple21 a (tuple21 b c)))) (y uni))
  (= (mem (tuple2 (set1 (tuple2 a1 (tuple2 b1 c1))) b2)
  (Tuple2 (set1 (tuple2 a1 (tuple2 b1 c1))) b2 (t2tb261 x) y)
  (infix_lspl b2 (set1 (tuple2 a1 (tuple2 b1 c1))) q p))
  (or
  (and (mem (tuple2 (set1 (tuple2 a1 (tuple2 b1 c1))) b2)
  (Tuple2 (set1 (tuple2 a1 (tuple2 b1 c1))) b2 (t2tb261 x) y) q)
  (not (mem15 x (tb2t327 (dom b2 (set1 (tuple2 a1 (tuple2 b1 c1))) p)))))
  (mem (tuple2 (set1 (tuple2 a1 (tuple2 b1 c1))) b2)
  (Tuple2 (set1 (tuple2 a1 (tuple2 b1 c1))) b2 (t2tb261 x) y) p))))))

;; mem_overriding
  (assert
  (forall ((b2 ty))
  (forall ((q uni) (p uni) (x (tuple21 a (tuple21 b c))) (y uni))
  (= (mem (tuple2 (tuple2 a1 (tuple2 b1 c1)) b2)
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) b2 (t2tb260 x) y)
  (infix_lspl b2 (tuple2 a1 (tuple2 b1 c1)) q p))
  (or
  (and (mem (tuple2 (tuple2 a1 (tuple2 b1 c1)) b2)
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) b2 (t2tb260 x) y) q)
  (not (mem14 x (tb2t261 (dom b2 (tuple2 a1 (tuple2 b1 c1)) p))))) (mem
  (tuple2 (tuple2 a1 (tuple2 b1 c1)) b2)
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) b2 (t2tb260 x) y) p))))))

;; mem_overriding
  (assert
  (forall ((b2 ty))
  (forall ((q uni) (p uni) (x (set (tuple21 a c))) (y uni))
  (= (mem (tuple2 (set1 (tuple2 a1 c1)) b2)
  (Tuple2 (set1 (tuple2 a1 c1)) b2 (t2tb129 x) y)
  (infix_lspl b2 (set1 (tuple2 a1 c1)) q p))
  (or
  (and (mem (tuple2 (set1 (tuple2 a1 c1)) b2)
  (Tuple2 (set1 (tuple2 a1 c1)) b2 (t2tb129 x) y) q)
  (not (mem11 x (tb2t128 (dom b2 (set1 (tuple2 a1 c1)) p))))) (mem
  (tuple2 (set1 (tuple2 a1 c1)) b2)
  (Tuple2 (set1 (tuple2 a1 c1)) b2 (t2tb129 x) y) p))))))

;; mem_overriding
  (assert
  (forall ((b2 ty))
  (forall ((q uni) (p uni) (x (tuple21 a c)) (y uni))
  (= (mem (tuple2 (tuple2 a1 c1) b2) (Tuple2 (tuple2 a1 c1) b2 (t2tb133 x) y)
  (infix_lspl b2 (tuple2 a1 c1) q p))
  (or
  (and (mem (tuple2 (tuple2 a1 c1) b2)
  (Tuple2 (tuple2 a1 c1) b2 (t2tb133 x) y) q)
  (not (mem10 x (tb2t129 (dom b2 (tuple2 a1 c1) p))))) (mem
  (tuple2 (tuple2 a1 c1) b2) (Tuple2 (tuple2 a1 c1) b2 (t2tb133 x) y) p))))))

;; mem_overriding
  (assert
  (forall ((b2 ty))
  (forall ((q uni) (p uni) (x (tuple21 b c)) (y uni))
  (= (mem (tuple2 (tuple2 b1 c1) b2) (Tuple2 (tuple2 b1 c1) b2 (t2tb134 x) y)
  (infix_lspl b2 (tuple2 b1 c1) q p))
  (or
  (and (mem (tuple2 (tuple2 b1 c1) b2)
  (Tuple2 (tuple2 b1 c1) b2 (t2tb134 x) y) q)
  (not (mem8 x (tb2t131 (dom b2 (tuple2 b1 c1) p))))) (mem
  (tuple2 (tuple2 b1 c1) b2) (Tuple2 (tuple2 b1 c1) b2 (t2tb134 x) y) p))))))

;; mem_overriding
  (assert
  (forall ((b2 ty))
  (forall ((q uni) (p uni) (x c) (y uni))
  (= (mem (tuple2 c1 b2) (Tuple2 c1 b2 (t2tb135 x) y) (infix_lspl b2 c1 q p))
  (or
  (and (mem (tuple2 c1 b2) (Tuple2 c1 b2 (t2tb135 x) y) q)
  (not (mem7 x (tb2t132 (dom b2 c1 p))))) (mem (tuple2 c1 b2)
  (Tuple2 c1 b2 (t2tb135 x) y) p))))))

;; mem_overriding
  (assert
  (forall ((b2 ty))
  (forall ((q uni) (p uni) (x (set (tuple21 a b))) (y uni))
  (= (mem (tuple2 (set1 (tuple2 a1 b1)) b2)
  (Tuple2 (set1 (tuple2 a1 b1)) b2 (t2tb11 x) y)
  (infix_lspl b2 (set1 (tuple2 a1 b1)) q p))
  (or
  (and (mem (tuple2 (set1 (tuple2 a1 b1)) b2)
  (Tuple2 (set1 (tuple2 a1 b1)) b2 (t2tb11 x) y) q)
  (not (mem4 x (tb2t10 (dom b2 (set1 (tuple2 a1 b1)) p))))) (mem
  (tuple2 (set1 (tuple2 a1 b1)) b2)
  (Tuple2 (set1 (tuple2 a1 b1)) b2 (t2tb11 x) y) p))))))

;; mem_overriding
  (assert
  (forall ((b2 ty))
  (forall ((q uni) (p uni) (x (tuple21 a b)) (y uni))
  (= (mem (tuple2 (tuple2 a1 b1) b2) (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) y)
  (infix_lspl b2 (tuple2 a1 b1) q p))
  (or
  (and (mem (tuple2 (tuple2 a1 b1) b2)
  (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) y) q)
  (not (mem3 x (tb2t11 (dom b2 (tuple2 a1 b1) p))))) (mem
  (tuple2 (tuple2 a1 b1) b2) (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) y) p))))))

;; mem_overriding
  (assert
  (forall ((q (set (tuple21 b c))) (p (set (tuple21 b c))) (x b) (y c))
  (= (mem8 (tb2t134 (Tuple2 b1 c1 (t2tb14 x) (t2tb135 y)))
  (tb2t131 (infix_lspl c1 b1 (t2tb131 q) (t2tb131 p))))
  (or
  (and (mem8 (tb2t134 (Tuple2 b1 c1 (t2tb14 x) (t2tb135 y))) q)
  (not (mem2 x (tb2t12 (dom c1 b1 (t2tb131 p)))))) (mem8
  (tb2t134 (Tuple2 b1 c1 (t2tb14 x) (t2tb135 y))) p)))))

;; mem_overriding
  (assert
  (forall ((b2 ty))
  (forall ((q uni) (p uni) (x b) (y uni))
  (= (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) y) (infix_lspl b2 b1 q p))
  (or
  (and (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) y) q)
  (not (mem2 x (tb2t12 (dom b2 b1 p))))) (mem (tuple2 b1 b2)
  (Tuple2 b1 b2 (t2tb14 x) y) p))))))

;; mem_overriding
  (assert
  (forall ((q (set (tuple21 a (tuple21 b c)))) (p (set (tuple21 a (tuple21 b
  c)))) (x a) (y (tuple21 b c)))
  (= (mem14 (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 y)))
  (tb2t261 (infix_lspl (tuple2 b1 c1) a1 (t2tb261 q) (t2tb261 p))))
  (or
  (and (mem14 (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 y))) q)
  (not (mem1 x (tb2t1 (dom (tuple2 b1 c1) a1 (t2tb261 p)))))) (mem14
  (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 y))) p)))))

;; mem_overriding
  (assert
  (forall ((q (set (tuple21 a c))) (p (set (tuple21 a c))) (x a) (y c))
  (= (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y)))
  (tb2t129 (infix_lspl c1 a1 (t2tb129 q) (t2tb129 p))))
  (or
  (and (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y))) q)
  (not (mem1 x (tb2t1 (dom c1 a1 (t2tb129 p)))))) (mem10
  (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y))) p)))))

;; mem_overriding
  (assert
  (forall ((q (set (tuple21 a b))) (p (set (tuple21 a b))) (x a) (y b))
  (= (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y)))
  (tb2t11 (infix_lspl b1 a1 (t2tb11 q) (t2tb11 p))))
  (or
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y))) q)
  (not (mem1 x (tb2t1 (dom b1 a1 (t2tb11 p)))))) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y))) p)))))

;; mem_overriding
  (assert
  (forall ((b2 ty))
  (forall ((q uni) (p uni) (x a) (y uni))
  (= (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) y) (infix_lspl b2 a1 q p))
  (or
  (and (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) y) q)
  (not (mem1 x (tb2t1 (dom b2 a1 p))))) (mem (tuple2 a1 b2)
  (Tuple2 a1 b2 (t2tb2 x) y) p))))))

;; mem_overriding
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((q uni) (p uni) (x uni) (y uni))
  (= (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) (infix_lspl b2 a2 q p))
  (or
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) q)
  (not (mem a2 x (dom b2 a2 p)))) (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) p))))))

(declare-fun direct_product (ty ty ty uni uni) uni)

;; direct_product_sort
  (assert
  (forall ((a2 ty) (b2 ty) (c2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (tuple2 a2 (tuple2 b2 c2)))
  (direct_product c2 b2 a2 x x1)))))

(declare-fun direct_product1 ((set (tuple21 a b)) (set (tuple21 a
  c))) (set (tuple21 a (tuple21 b c))))

;; mem_direct_product
  (assert
  (forall ((b2 ty))
  (forall ((f uni) (g (set (tuple21 b c))) (x b) (y uni) (z c))
  (= (mem (tuple2 b1 (tuple2 b2 c1))
  (Tuple2 b1 (tuple2 b2 c1) (t2tb14 x) (Tuple2 b2 c1 y (t2tb135 z)))
  (direct_product c1 b2 b1 f (t2tb131 g)))
  (and (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) y) f) (mem8
  (tb2t134 (Tuple2 b1 c1 (t2tb14 x) (t2tb135 z))) g))))))

(declare-fun t2tb328 ((set (tuple21 b (tuple21 c c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 b (tuple21 c c))))) (sort
  (set1 (tuple2 b1 (tuple2 c1 c1))) (t2tb328 x))))

(declare-fun tb2t328 (uni) (set (tuple21 b (tuple21 c c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 b (tuple21 c c)))))
  (! (= (tb2t328 (t2tb328 i)) i) :pattern ((t2tb328 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 b1 (tuple2 c1 c1))) j)
     (= (t2tb328 (tb2t328 j)) j)) :pattern ((t2tb328 (tb2t328 j))) )))

(declare-fun t2tb329 ((tuple21 b (tuple21 c c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 b (tuple21 c c)))) (sort (tuple2 b1 (tuple2 c1 c1))
  (t2tb329 x))))

(declare-fun tb2t329 (uni) (tuple21 b (tuple21 c c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 b (tuple21 c c))))
  (! (= (tb2t329 (t2tb329 i)) i) :pattern ((t2tb329 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 b1 (tuple2 c1 c1)) j) (= (t2tb329 (tb2t329 j)) j)) :pattern (
  (t2tb329 (tb2t329 j))) )))

;; mem_direct_product
  (assert
  (forall ((f (set (tuple21 b c))) (g (set (tuple21 b c))) (x b) (y c) (z c))
  (= (mem (tuple2 b1 (tuple2 c1 c1))
  (Tuple2 b1 (tuple2 c1 c1) (t2tb14 x)
  (Tuple2 c1 c1 (t2tb135 y) (t2tb135 z)))
  (direct_product c1 c1 b1 (t2tb131 f) (t2tb131 g)))
  (and (mem8 (tb2t134 (Tuple2 b1 c1 (t2tb14 x) (t2tb135 y))) f) (mem8
  (tb2t134 (Tuple2 b1 c1 (t2tb14 x) (t2tb135 z))) g)))))

;; mem_direct_product
  (assert
  (forall ((c2 ty))
  (forall ((f (set (tuple21 b c))) (g uni) (x b) (y c) (z uni))
  (= (mem (tuple2 b1 (tuple2 c1 c2))
  (Tuple2 b1 (tuple2 c1 c2) (t2tb14 x) (Tuple2 c1 c2 (t2tb135 y) z))
  (direct_product c2 c1 b1 (t2tb131 f) g))
  (and (mem8 (tb2t134 (Tuple2 b1 c1 (t2tb14 x) (t2tb135 y))) f) (mem
  (tuple2 b1 c2) (Tuple2 b1 c2 (t2tb14 x) z) g))))))

;; mem_direct_product
  (assert
  (forall ((b2 ty))
  (forall ((f uni) (g (set (tuple21 a (tuple21 b c)))) (x a) (y uni)
  (z (tuple21 b c)))
  (= (mem (tuple2 a1 (tuple2 b2 (tuple2 b1 c1)))
  (Tuple2 a1 (tuple2 b2 (tuple2 b1 c1)) (t2tb2 x)
  (Tuple2 b2 (tuple2 b1 c1) y (t2tb134 z)))
  (direct_product (tuple2 b1 c1) b2 a1 f (t2tb261 g)))
  (and (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) y) f) (mem14
  (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 z))) g))))))

;; mem_direct_product
  (assert
  (forall ((b2 ty))
  (forall ((f uni) (g (set (tuple21 a c))) (x a) (y uni) (z c))
  (= (mem (tuple2 a1 (tuple2 b2 c1))
  (Tuple2 a1 (tuple2 b2 c1) (t2tb2 x) (Tuple2 b2 c1 y (t2tb135 z)))
  (direct_product c1 b2 a1 f (t2tb129 g)))
  (and (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) y) f) (mem10
  (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 z))) g))))))

;; mem_direct_product
  (assert
  (forall ((b2 ty))
  (forall ((f uni) (g (set (tuple21 a b))) (x a) (y uni) (z b))
  (= (mem (tuple2 a1 (tuple2 b2 b1))
  (Tuple2 a1 (tuple2 b2 b1) (t2tb2 x) (Tuple2 b2 b1 y (t2tb14 z)))
  (direct_product b1 b2 a1 f (t2tb11 g)))
  (and (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) y) f) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 z))) g))))))

(declare-fun t2tb482 ((tuple21 a (tuple21 (tuple21 b c) (tuple21 b c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (tuple21 (tuple21 b c) (tuple21 b c))))) (sort
  (tuple2 a1 (tuple2 (tuple2 b1 c1) (tuple2 b1 c1))) (t2tb482 x))))

(declare-fun tb2t482 (uni) (tuple21 a (tuple21 (tuple21 b c) (tuple21 b c))))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (tuple21 (tuple21 b c) (tuple21 b c)))))
  (! (= (tb2t482 (t2tb482 i)) i) :pattern ((t2tb482 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (tuple2 (tuple2 b1 c1) (tuple2 b1 c1))) j)
     (= (t2tb482 (tb2t482 j)) j)) :pattern ((t2tb482 (tb2t482 j))) )))

(declare-fun t2tb483 ((set (tuple21 a (tuple21 (tuple21 b c) (tuple21 b
  c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (tuple21 (tuple21 b c) (tuple21 b c)))))) (sort
  (set1 (tuple2 a1 (tuple2 (tuple2 b1 c1) (tuple2 b1 c1)))) (t2tb483 x))))

(declare-fun tb2t483 (uni) (set (tuple21 a (tuple21 (tuple21 b c) (tuple21 b
  c)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (tuple21 (tuple21 b c) (tuple21 b c))))))
  (! (= (tb2t483 (t2tb483 i)) i) :pattern ((t2tb483 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (tuple2 (tuple2 b1 c1) (tuple2 b1 c1)))) j)
     (= (t2tb483 (tb2t483 j)) j)) :pattern ((t2tb483 (tb2t483 j))) )))

;; mem_direct_product
  (assert
  (forall ((f (set (tuple21 a (tuple21 b c)))) (g (set (tuple21 a (tuple21 b
  c)))) (x a) (y (tuple21 b c)) (z (tuple21 b c)))
  (= (mem (tuple2 a1 (tuple2 (tuple2 b1 c1) (tuple2 b1 c1)))
  (Tuple2 a1 (tuple2 (tuple2 b1 c1) (tuple2 b1 c1)) (t2tb2 x)
  (Tuple2 (tuple2 b1 c1) (tuple2 b1 c1) (t2tb134 y) (t2tb134 z)))
  (direct_product (tuple2 b1 c1) (tuple2 b1 c1) a1 (t2tb261 f) (t2tb261 g)))
  (and (mem14 (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 y))) f)
  (mem14 (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 z))) g)))))

(declare-fun t2tb484 ((set (tuple21 a (tuple21 (tuple21 b c) c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (tuple21 (tuple21 b c) c))))) (sort
  (set1 (tuple2 a1 (tuple2 (tuple2 b1 c1) c1))) (t2tb484 x))))

(declare-fun tb2t484 (uni) (set (tuple21 a (tuple21 (tuple21 b c) c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (tuple21 (tuple21 b c) c)))))
  (! (= (tb2t484 (t2tb484 i)) i) :pattern ((t2tb484 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (tuple2 (tuple2 b1 c1) c1))) j)
     (= (t2tb484 (tb2t484 j)) j)) :pattern ((t2tb484 (tb2t484 j))) )))

(declare-fun t2tb485 ((tuple21 a (tuple21 (tuple21 b c) c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (tuple21 (tuple21 b c) c)))) (sort
  (tuple2 a1 (tuple2 (tuple2 b1 c1) c1)) (t2tb485 x))))

(declare-fun tb2t485 (uni) (tuple21 a (tuple21 (tuple21 b c) c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (tuple21 (tuple21 b c) c))))
  (! (= (tb2t485 (t2tb485 i)) i) :pattern ((t2tb485 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (tuple2 (tuple2 b1 c1) c1)) j)
     (= (t2tb485 (tb2t485 j)) j)) :pattern ((t2tb485 (tb2t485 j))) )))

;; mem_direct_product
  (assert
  (forall ((f (set (tuple21 a (tuple21 b c)))) (g (set (tuple21 a c))) (x a)
  (y (tuple21 b c)) (z c))
  (= (mem (tuple2 a1 (tuple2 (tuple2 b1 c1) c1))
  (Tuple2 a1 (tuple2 (tuple2 b1 c1) c1) (t2tb2 x)
  (Tuple2 (tuple2 b1 c1) c1 (t2tb134 y) (t2tb135 z)))
  (direct_product c1 (tuple2 b1 c1) a1 (t2tb261 f) (t2tb129 g)))
  (and (mem14 (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 y))) f)
  (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 z))) g)))))

(declare-fun t2tb486 ((set (tuple21 a (tuple21 (tuple21 b c) b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (tuple21 (tuple21 b c) b))))) (sort
  (set1 (tuple2 a1 (tuple2 (tuple2 b1 c1) b1))) (t2tb486 x))))

(declare-fun tb2t486 (uni) (set (tuple21 a (tuple21 (tuple21 b c) b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (tuple21 (tuple21 b c) b)))))
  (! (= (tb2t486 (t2tb486 i)) i) :pattern ((t2tb486 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (tuple2 (tuple2 b1 c1) b1))) j)
     (= (t2tb486 (tb2t486 j)) j)) :pattern ((t2tb486 (tb2t486 j))) )))

(declare-fun t2tb487 ((tuple21 a (tuple21 (tuple21 b c) b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (tuple21 (tuple21 b c) b)))) (sort
  (tuple2 a1 (tuple2 (tuple2 b1 c1) b1)) (t2tb487 x))))

(declare-fun tb2t487 (uni) (tuple21 a (tuple21 (tuple21 b c) b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (tuple21 (tuple21 b c) b))))
  (! (= (tb2t487 (t2tb487 i)) i) :pattern ((t2tb487 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (tuple2 (tuple2 b1 c1) b1)) j)
     (= (t2tb487 (tb2t487 j)) j)) :pattern ((t2tb487 (tb2t487 j))) )))

;; mem_direct_product
  (assert
  (forall ((f (set (tuple21 a (tuple21 b c)))) (g (set (tuple21 a b))) (x a)
  (y (tuple21 b c)) (z b))
  (= (mem (tuple2 a1 (tuple2 (tuple2 b1 c1) b1))
  (Tuple2 a1 (tuple2 (tuple2 b1 c1) b1) (t2tb2 x)
  (Tuple2 (tuple2 b1 c1) b1 (t2tb134 y) (t2tb14 z)))
  (direct_product b1 (tuple2 b1 c1) a1 (t2tb261 f) (t2tb11 g)))
  (and (mem14 (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 y))) f)
  (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 z))) g)))))

;; mem_direct_product
  (assert
  (forall ((c2 ty))
  (forall ((f (set (tuple21 a (tuple21 b c)))) (g uni) (x a) (y (tuple21 b
  c)) (z uni))
  (= (mem (tuple2 a1 (tuple2 (tuple2 b1 c1) c2))
  (Tuple2 a1 (tuple2 (tuple2 b1 c1) c2) (t2tb2 x)
  (Tuple2 (tuple2 b1 c1) c2 (t2tb134 y) z))
  (direct_product c2 (tuple2 b1 c1) a1 (t2tb261 f) g))
  (and (mem14 (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 y))) f)
  (mem (tuple2 a1 c2) (Tuple2 a1 c2 (t2tb2 x) z) g))))))

(declare-fun t2tb488 ((set (tuple21 a (tuple21 c (tuple21 b c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (tuple21 c (tuple21 b c)))))) (sort
  (set1 (tuple2 a1 (tuple2 c1 (tuple2 b1 c1)))) (t2tb488 x))))

(declare-fun tb2t488 (uni) (set (tuple21 a (tuple21 c (tuple21 b c)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (tuple21 c (tuple21 b c))))))
  (! (= (tb2t488 (t2tb488 i)) i) :pattern ((t2tb488 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (tuple2 c1 (tuple2 b1 c1)))) j)
     (= (t2tb488 (tb2t488 j)) j)) :pattern ((t2tb488 (tb2t488 j))) )))

(declare-fun t2tb489 ((tuple21 a (tuple21 c (tuple21 b c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (tuple21 c (tuple21 b c))))) (sort
  (tuple2 a1 (tuple2 c1 (tuple2 b1 c1))) (t2tb489 x))))

(declare-fun tb2t489 (uni) (tuple21 a (tuple21 c (tuple21 b c))))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (tuple21 c (tuple21 b c)))))
  (! (= (tb2t489 (t2tb489 i)) i) :pattern ((t2tb489 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (tuple2 c1 (tuple2 b1 c1))) j)
     (= (t2tb489 (tb2t489 j)) j)) :pattern ((t2tb489 (tb2t489 j))) )))

;; mem_direct_product
  (assert
  (forall ((f (set (tuple21 a c))) (g (set (tuple21 a (tuple21 b c)))) (x a)
  (y c) (z (tuple21 b c)))
  (= (mem (tuple2 a1 (tuple2 c1 (tuple2 b1 c1)))
  (Tuple2 a1 (tuple2 c1 (tuple2 b1 c1)) (t2tb2 x)
  (Tuple2 c1 (tuple2 b1 c1) (t2tb135 y) (t2tb134 z)))
  (direct_product (tuple2 b1 c1) c1 a1 (t2tb129 f) (t2tb261 g)))
  (and (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y))) f) (mem14
  (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 z))) g)))))

(declare-fun t2tb330 ((set (tuple21 a (tuple21 c c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (tuple21 c c))))) (sort
  (set1 (tuple2 a1 (tuple2 c1 c1))) (t2tb330 x))))

(declare-fun tb2t330 (uni) (set (tuple21 a (tuple21 c c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (tuple21 c c)))))
  (! (= (tb2t330 (t2tb330 i)) i) :pattern ((t2tb330 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (tuple2 c1 c1))) j)
     (= (t2tb330 (tb2t330 j)) j)) :pattern ((t2tb330 (tb2t330 j))) )))

(declare-fun t2tb331 ((tuple21 a (tuple21 c c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (tuple21 c c)))) (sort (tuple2 a1 (tuple2 c1 c1))
  (t2tb331 x))))

(declare-fun tb2t331 (uni) (tuple21 a (tuple21 c c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (tuple21 c c))))
  (! (= (tb2t331 (t2tb331 i)) i) :pattern ((t2tb331 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (tuple2 c1 c1)) j) (= (t2tb331 (tb2t331 j)) j)) :pattern (
  (t2tb331 (tb2t331 j))) )))

;; mem_direct_product
  (assert
  (forall ((f (set (tuple21 a c))) (g (set (tuple21 a c))) (x a) (y c) (z c))
  (= (mem (tuple2 a1 (tuple2 c1 c1))
  (Tuple2 a1 (tuple2 c1 c1) (t2tb2 x) (Tuple2 c1 c1 (t2tb135 y) (t2tb135 z)))
  (direct_product c1 c1 a1 (t2tb129 f) (t2tb129 g)))
  (and (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y))) f) (mem10
  (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 z))) g)))))

(declare-fun t2tb332 ((set (tuple21 a (tuple21 c b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (tuple21 c b))))) (sort
  (set1 (tuple2 a1 (tuple2 c1 b1))) (t2tb332 x))))

(declare-fun tb2t332 (uni) (set (tuple21 a (tuple21 c b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (tuple21 c b)))))
  (! (= (tb2t332 (t2tb332 i)) i) :pattern ((t2tb332 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (tuple2 c1 b1))) j)
     (= (t2tb332 (tb2t332 j)) j)) :pattern ((t2tb332 (tb2t332 j))) )))

(declare-fun t2tb333 ((tuple21 a (tuple21 c b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (tuple21 c b)))) (sort (tuple2 a1 (tuple2 c1 b1))
  (t2tb333 x))))

(declare-fun tb2t333 (uni) (tuple21 a (tuple21 c b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (tuple21 c b))))
  (! (= (tb2t333 (t2tb333 i)) i) :pattern ((t2tb333 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (tuple2 c1 b1)) j) (= (t2tb333 (tb2t333 j)) j)) :pattern (
  (t2tb333 (tb2t333 j))) )))

;; mem_direct_product
  (assert
  (forall ((f (set (tuple21 a c))) (g (set (tuple21 a b))) (x a) (y c) (z b))
  (= (mem (tuple2 a1 (tuple2 c1 b1))
  (Tuple2 a1 (tuple2 c1 b1) (t2tb2 x) (Tuple2 c1 b1 (t2tb135 y) (t2tb14 z)))
  (direct_product b1 c1 a1 (t2tb129 f) (t2tb11 g)))
  (and (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y))) f) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 z))) g)))))

;; mem_direct_product
  (assert
  (forall ((c2 ty))
  (forall ((f (set (tuple21 a c))) (g uni) (x a) (y c) (z uni))
  (= (mem (tuple2 a1 (tuple2 c1 c2))
  (Tuple2 a1 (tuple2 c1 c2) (t2tb2 x) (Tuple2 c1 c2 (t2tb135 y) z))
  (direct_product c2 c1 a1 (t2tb129 f) g))
  (and (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y))) f) (mem
  (tuple2 a1 c2) (Tuple2 a1 c2 (t2tb2 x) z) g))))))

(declare-fun t2tb490 ((set (tuple21 a (tuple21 b (tuple21 b c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (tuple21 b (tuple21 b c)))))) (sort
  (set1 (tuple2 a1 (tuple2 b1 (tuple2 b1 c1)))) (t2tb490 x))))

(declare-fun tb2t490 (uni) (set (tuple21 a (tuple21 b (tuple21 b c)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (tuple21 b (tuple21 b c))))))
  (! (= (tb2t490 (t2tb490 i)) i) :pattern ((t2tb490 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (tuple2 b1 (tuple2 b1 c1)))) j)
     (= (t2tb490 (tb2t490 j)) j)) :pattern ((t2tb490 (tb2t490 j))) )))

(declare-fun t2tb491 ((tuple21 a (tuple21 b (tuple21 b c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (tuple21 b (tuple21 b c))))) (sort
  (tuple2 a1 (tuple2 b1 (tuple2 b1 c1))) (t2tb491 x))))

(declare-fun tb2t491 (uni) (tuple21 a (tuple21 b (tuple21 b c))))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (tuple21 b (tuple21 b c)))))
  (! (= (tb2t491 (t2tb491 i)) i) :pattern ((t2tb491 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (tuple2 b1 (tuple2 b1 c1))) j)
     (= (t2tb491 (tb2t491 j)) j)) :pattern ((t2tb491 (tb2t491 j))) )))

;; mem_direct_product
  (assert
  (forall ((f (set (tuple21 a b))) (g (set (tuple21 a (tuple21 b c)))) (x a)
  (y b) (z (tuple21 b c)))
  (= (mem (tuple2 a1 (tuple2 b1 (tuple2 b1 c1)))
  (Tuple2 a1 (tuple2 b1 (tuple2 b1 c1)) (t2tb2 x)
  (Tuple2 b1 (tuple2 b1 c1) (t2tb14 y) (t2tb134 z)))
  (direct_product (tuple2 b1 c1) b1 a1 (t2tb11 f) (t2tb261 g)))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y))) f) (mem14
  (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 z))) g)))))

;; mem_direct_product
  (assert
  (forall ((f (set (tuple21 a b))) (g (set (tuple21 a c))) (x a) (y b) (z c))
  (= (mem14
  (tb2t260
  (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (Tuple2 b1 c1 (t2tb14 y) (t2tb135 z))))
  (direct_product1 f g))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y))) f) (mem10
  (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 z))) g)))))

(declare-fun t2tb59 ((set (tuple21 a (tuple21 b b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (tuple21 b b))))) (sort
  (set1 (tuple2 a1 (tuple2 b1 b1))) (t2tb59 x))))

(declare-fun tb2t59 (uni) (set (tuple21 a (tuple21 b b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (tuple21 b b)))))
  (! (= (tb2t59 (t2tb59 i)) i) :pattern ((t2tb59 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (tuple2 b1 b1))) j)
     (= (t2tb59 (tb2t59 j)) j)) :pattern ((t2tb59 (tb2t59 j))) )))

(declare-fun t2tb60 ((tuple21 a (tuple21 b b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (tuple21 b b)))) (sort (tuple2 a1 (tuple2 b1 b1))
  (t2tb60 x))))

(declare-fun tb2t60 (uni) (tuple21 a (tuple21 b b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (tuple21 b b))))
  (! (= (tb2t60 (t2tb60 i)) i) :pattern ((t2tb60 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (tuple2 b1 b1)) j) (= (t2tb60 (tb2t60 j)) j)) :pattern (
  (t2tb60 (tb2t60 j))) )))

;; mem_direct_product
  (assert
  (forall ((f (set (tuple21 a b))) (g (set (tuple21 a b))) (x a) (y b) (z b))
  (= (mem (tuple2 a1 (tuple2 b1 b1))
  (Tuple2 a1 (tuple2 b1 b1) (t2tb2 x) (Tuple2 b1 b1 (t2tb14 y) (t2tb14 z)))
  (direct_product b1 b1 a1 (t2tb11 f) (t2tb11 g)))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y))) f) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 z))) g)))))

;; mem_direct_product
  (assert
  (forall ((c2 ty))
  (forall ((f (set (tuple21 a b))) (g uni) (x a) (y b) (z uni))
  (= (mem (tuple2 a1 (tuple2 b1 c2))
  (Tuple2 a1 (tuple2 b1 c2) (t2tb2 x) (Tuple2 b1 c2 (t2tb14 y) z))
  (direct_product c2 b1 a1 (t2tb11 f) g))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y))) f) (mem
  (tuple2 a1 c2) (Tuple2 a1 c2 (t2tb2 x) z) g))))))

;; mem_direct_product
  (assert
  (forall ((a2 ty) (b2 ty) (c2 ty))
  (forall ((f uni) (g uni) (x uni) (y uni) (z uni))
  (= (mem (tuple2 a2 (tuple2 b2 c2))
  (Tuple2 a2 (tuple2 b2 c2) x (Tuple2 b2 c2 y z))
  (direct_product c2 b2 a2 f g))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) f) (mem (tuple2 a2 c2)
  (Tuple2 a2 c2 x z) g))))))

(declare-fun prj1 (ty ty uni) uni)

;; prj1_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni)) (sort (set1 (tuple2 (tuple2 a2 b2) a2)) (prj1 b2 a2 x)))))

(declare-fun t2tb492 ((tuple21 (set b) (set c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set b) (set c)))) (sort (tuple2 (set1 b1) (set1 c1))
  (t2tb492 x))))

(declare-fun tb2t492 (uni) (tuple21 (set b) (set c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set b) (set c))))
  (! (= (tb2t492 (t2tb492 i)) i) :pattern ((t2tb492 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 b1) (set1 c1)) j) (= (t2tb492 (tb2t492 j)) j)) :pattern (
  (t2tb492 (tb2t492 j))) )))

;; mem_proj_op_1
  (assert
  (forall ((s (set b)) (t (set c)) (x b) (y c) (z b))
  (= (mem (tuple2 (tuple2 b1 c1) b1)
  (Tuple2 (tuple2 b1 c1) b1 (Tuple2 b1 c1 (t2tb14 x) (t2tb135 y)) (t2tb14 z))
  (prj1 c1 b1 (Tuple2 (set1 b1) (set1 c1) (t2tb12 s) (t2tb132 t))))
  (and (mem (tuple2 (tuple2 b1 c1) b1)
  (Tuple2 (tuple2 b1 c1) b1 (Tuple2 b1 c1 (t2tb14 x) (t2tb135 y)) (t2tb14 z))
  (times b1 (tuple2 b1 c1) (t2tb131 (times3 s t)) (t2tb12 s))) (= z x)))))

(declare-fun t2tb493 ((tuple21 (set a) (set (tuple21 b c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set a) (set (tuple21 b c))))) (sort
  (tuple2 (set1 a1) (set1 (tuple2 b1 c1))) (t2tb493 x))))

(declare-fun tb2t493 (uni) (tuple21 (set a) (set (tuple21 b c))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set a) (set (tuple21 b c)))))
  (! (= (tb2t493 (t2tb493 i)) i) :pattern ((t2tb493 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 a1) (set1 (tuple2 b1 c1))) j)
     (= (t2tb493 (tb2t493 j)) j)) :pattern ((t2tb493 (tb2t493 j))) )))

;; mem_proj_op_1
  (assert
  (forall ((s (set a)) (t (set (tuple21 b c))) (x a) (y (tuple21 b c)) (z a))
  (= (mem (tuple2 (tuple2 a1 (tuple2 b1 c1)) a1)
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) a1
  (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 y)) (t2tb2 z))
  (prj1 (tuple2 b1 c1) a1
  (Tuple2 (set1 a1) (set1 (tuple2 b1 c1)) (t2tb1 s) (t2tb131 t))))
  (and (mem (tuple2 (tuple2 a1 (tuple2 b1 c1)) a1)
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) a1
  (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 y)) (t2tb2 z))
  (times a1 (tuple2 a1 (tuple2 b1 c1)) (t2tb261 (times5 s t)) (t2tb1 s)))
  (= z x)))))

(declare-fun t2tb494 ((tuple21 (set a) (set c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set a) (set c)))) (sort (tuple2 (set1 a1) (set1 c1))
  (t2tb494 x))))

(declare-fun tb2t494 (uni) (tuple21 (set a) (set c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set a) (set c))))
  (! (= (tb2t494 (t2tb494 i)) i) :pattern ((t2tb494 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 a1) (set1 c1)) j) (= (t2tb494 (tb2t494 j)) j)) :pattern (
  (t2tb494 (tb2t494 j))) )))

;; mem_proj_op_1
  (assert
  (forall ((s (set a)) (t (set c)) (x a) (y c) (z a))
  (= (mem (tuple2 (tuple2 a1 c1) a1)
  (Tuple2 (tuple2 a1 c1) a1 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y)) (t2tb2 z))
  (prj1 c1 a1 (Tuple2 (set1 a1) (set1 c1) (t2tb1 s) (t2tb132 t))))
  (and (mem (tuple2 (tuple2 a1 c1) a1)
  (Tuple2 (tuple2 a1 c1) a1 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y)) (t2tb2 z))
  (times a1 (tuple2 a1 c1) (t2tb129 (times4 s t)) (t2tb1 s))) (= z x)))))

(declare-fun t2tb495 ((tuple21 (set a) (set b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set a) (set b)))) (sort (tuple2 (set1 a1) (set1 b1))
  (t2tb495 x))))

(declare-fun tb2t495 (uni) (tuple21 (set a) (set b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set a) (set b))))
  (! (= (tb2t495 (t2tb495 i)) i) :pattern ((t2tb495 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 a1) (set1 b1)) j) (= (t2tb495 (tb2t495 j)) j)) :pattern (
  (t2tb495 (tb2t495 j))) )))

;; mem_proj_op_1
  (assert
  (forall ((s (set a)) (t (set b)) (x a) (y b) (z a))
  (= (mem (tuple2 (tuple2 a1 b1) a1)
  (Tuple2 (tuple2 a1 b1) a1 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y)) (t2tb2 z))
  (prj1 b1 a1 (Tuple2 (set1 a1) (set1 b1) (t2tb1 s) (t2tb12 t))))
  (and (mem (tuple2 (tuple2 a1 b1) a1)
  (Tuple2 (tuple2 a1 b1) a1 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y)) (t2tb2 z))
  (times a1 (tuple2 a1 b1) (t2tb11 (times2 s t)) (t2tb1 s))) (= z x)))))

;; mem_proj_op_1
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (x uni) (y uni) (z uni))
  (=> (sort a2 x)
  (=> (sort a2 z)
  (= (mem (tuple2 (tuple2 a2 b2) a2)
  (Tuple2 (tuple2 a2 b2) a2 (Tuple2 a2 b2 x y) z)
  (prj1 b2 a2 (Tuple2 (set1 a2) (set1 b2) s t)))
  (and (mem (tuple2 (tuple2 a2 b2) a2)
  (Tuple2 (tuple2 a2 b2) a2 (Tuple2 a2 b2 x y) z)
  (times a2 (tuple2 a2 b2) (times b2 a2 s t) s)) (= z x))))))))

(declare-fun prj2 (ty ty uni) uni)

;; prj2_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni)) (sort (set1 (tuple2 (tuple2 a2 b2) b2)) (prj2 b2 a2 x)))))

;; mem_proj_op_2
  (assert
  (forall ((s (set b)) (t (set c)) (x b) (y c) (z c))
  (= (mem (tuple2 (tuple2 b1 c1) c1)
  (Tuple2 (tuple2 b1 c1) c1 (Tuple2 b1 c1 (t2tb14 x) (t2tb135 y))
  (t2tb135 z))
  (prj2 c1 b1 (Tuple2 (set1 b1) (set1 c1) (t2tb12 s) (t2tb132 t))))
  (and (mem (tuple2 (tuple2 b1 c1) c1)
  (Tuple2 (tuple2 b1 c1) c1 (Tuple2 b1 c1 (t2tb14 x) (t2tb135 y))
  (t2tb135 z)) (times c1 (tuple2 b1 c1) (t2tb131 (times3 s t)) (t2tb132 t)))
  (= z y)))))

;; mem_proj_op_2
  (assert
  (forall ((s (set a)) (t (set (tuple21 b c))) (x a) (y (tuple21 b c))
  (z (tuple21 b c)))
  (= (mem (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 b1 c1))
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 b1 c1)
  (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 y)) (t2tb134 z))
  (prj2 (tuple2 b1 c1) a1
  (Tuple2 (set1 a1) (set1 (tuple2 b1 c1)) (t2tb1 s) (t2tb131 t))))
  (and (mem (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 b1 c1))
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 b1 c1)
  (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 y)) (t2tb134 z))
  (times (tuple2 b1 c1) (tuple2 a1 (tuple2 b1 c1)) (t2tb261 (times5 s t))
  (t2tb131 t))) (= z y)))))

;; mem_proj_op_2
  (assert
  (forall ((s (set a)) (t (set c)) (x a) (y c) (z c))
  (= (mem (tuple2 (tuple2 a1 c1) c1)
  (Tuple2 (tuple2 a1 c1) c1 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y)) (t2tb135 z))
  (prj2 c1 a1 (Tuple2 (set1 a1) (set1 c1) (t2tb1 s) (t2tb132 t))))
  (and (mem (tuple2 (tuple2 a1 c1) c1)
  (Tuple2 (tuple2 a1 c1) c1 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y)) (t2tb135 z))
  (times c1 (tuple2 a1 c1) (t2tb129 (times4 s t)) (t2tb132 t))) (= z y)))))

;; mem_proj_op_2
  (assert
  (forall ((s (set a)) (t (set b)) (x a) (y b) (z b))
  (= (mem (tuple2 (tuple2 a1 b1) b1)
  (Tuple2 (tuple2 a1 b1) b1 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y)) (t2tb14 z))
  (prj2 b1 a1 (Tuple2 (set1 a1) (set1 b1) (t2tb1 s) (t2tb12 t))))
  (and (mem (tuple2 (tuple2 a1 b1) b1)
  (Tuple2 (tuple2 a1 b1) b1 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y)) (t2tb14 z))
  (times b1 (tuple2 a1 b1) (t2tb11 (times2 s t)) (t2tb12 t))) (= z y)))))

;; mem_proj_op_2
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (x uni) (y uni) (z uni))
  (=> (sort b2 y)
  (=> (sort b2 z)
  (= (mem (tuple2 (tuple2 a2 b2) b2)
  (Tuple2 (tuple2 a2 b2) b2 (Tuple2 a2 b2 x y) z)
  (prj2 b2 a2 (Tuple2 (set1 a2) (set1 b2) s t)))
  (and (mem (tuple2 (tuple2 a2 b2) b2)
  (Tuple2 (tuple2 a2 b2) b2 (Tuple2 a2 b2 x y) z)
  (times b2 (tuple2 a2 b2) (times b2 a2 s t) t)) (= z y))))))))

(declare-fun parallel_product (ty ty ty ty uni uni) uni)

;; parallel_product_sort
  (assert
  (forall ((a2 ty) (b2 ty) (c2 ty) (d ty))
  (forall ((x uni) (x1 uni)) (sort
  (set1 (tuple2 (tuple2 a2 c2) (tuple2 b2 d)))
  (parallel_product d c2 b2 a2 x x1)))))

;; mem_parallel_product
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((h uni) (k (set (tuple21 b c))) (x uni) (y b) (z uni) (w c))
  (= (mem (tuple2 (tuple2 a2 b1) (tuple2 b2 c1))
  (Tuple2 (tuple2 a2 b1) (tuple2 b2 c1) (Tuple2 a2 b1 x (t2tb14 y))
  (Tuple2 b2 c1 z (t2tb135 w))) (parallel_product c1 b1 b2 a2 h (t2tb131 k)))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x z) h) (mem8
  (tb2t134 (Tuple2 b1 c1 (t2tb14 y) (t2tb135 w))) k))))))

;; mem_parallel_product
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((h uni) (k (set (tuple21 a (tuple21 b c)))) (x uni) (y a) (z uni)
  (w (tuple21 b c)))
  (= (mem (tuple2 (tuple2 a2 a1) (tuple2 b2 (tuple2 b1 c1)))
  (Tuple2 (tuple2 a2 a1) (tuple2 b2 (tuple2 b1 c1))
  (Tuple2 a2 a1 x (t2tb2 y)) (Tuple2 b2 (tuple2 b1 c1) z (t2tb134 w)))
  (parallel_product (tuple2 b1 c1) a1 b2 a2 h (t2tb261 k)))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x z) h) (mem14
  (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 y) (t2tb134 w))) k))))))

;; mem_parallel_product
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((h uni) (k (set (tuple21 a c))) (x uni) (y a) (z uni) (w c))
  (= (mem (tuple2 (tuple2 a2 a1) (tuple2 b2 c1))
  (Tuple2 (tuple2 a2 a1) (tuple2 b2 c1) (Tuple2 a2 a1 x (t2tb2 y))
  (Tuple2 b2 c1 z (t2tb135 w))) (parallel_product c1 a1 b2 a2 h (t2tb129 k)))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x z) h) (mem10
  (tb2t133 (Tuple2 a1 c1 (t2tb2 y) (t2tb135 w))) k))))))

;; mem_parallel_product
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((h uni) (k (set (tuple21 a b))) (x uni) (y a) (z uni) (w b))
  (= (mem (tuple2 (tuple2 a2 a1) (tuple2 b2 b1))
  (Tuple2 (tuple2 a2 a1) (tuple2 b2 b1) (Tuple2 a2 a1 x (t2tb2 y))
  (Tuple2 b2 b1 z (t2tb14 w))) (parallel_product b1 a1 b2 a2 h (t2tb11 k)))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x z) h) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 y) (t2tb14 w))) k))))))

(declare-fun t2tb334 ((set (tuple21 (tuple21 b b) (tuple21 c c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b b) (tuple21 c c))))) (sort
  (set1 (tuple2 (tuple2 b1 b1) (tuple2 c1 c1))) (t2tb334 x))))

(declare-fun tb2t334 (uni) (set (tuple21 (tuple21 b b) (tuple21 c c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b b) (tuple21 c c)))))
  (! (= (tb2t334 (t2tb334 i)) i) :pattern ((t2tb334 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 b1) (tuple2 c1 c1))) j)
     (= (t2tb334 (tb2t334 j)) j)) :pattern ((t2tb334 (tb2t334 j))) )))

(declare-fun t2tb335 ((tuple21 (tuple21 b b) (tuple21 c c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b b) (tuple21 c c)))) (sort
  (tuple2 (tuple2 b1 b1) (tuple2 c1 c1)) (t2tb335 x))))

(declare-fun tb2t335 (uni) (tuple21 (tuple21 b b) (tuple21 c c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b b) (tuple21 c c))))
  (! (= (tb2t335 (t2tb335 i)) i) :pattern ((t2tb335 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 b1) (tuple2 c1 c1)) j)
     (= (t2tb335 (tb2t335 j)) j)) :pattern ((t2tb335 (tb2t335 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 b c))) (k (set (tuple21 b c))) (x b) (y b) (z c)
  (w c))
  (= (mem (tuple2 (tuple2 b1 b1) (tuple2 c1 c1))
  (Tuple2 (tuple2 b1 b1) (tuple2 c1 c1) (Tuple2 b1 b1 (t2tb14 x) (t2tb14 y))
  (Tuple2 c1 c1 (t2tb135 z) (t2tb135 w)))
  (parallel_product c1 b1 c1 b1 (t2tb131 h) (t2tb131 k)))
  (and (mem8 (tb2t134 (Tuple2 b1 c1 (t2tb14 x) (t2tb135 z))) h) (mem8
  (tb2t134 (Tuple2 b1 c1 (t2tb14 y) (t2tb135 w))) k)))))

(declare-fun t2tb496 ((set (tuple21 (tuple21 b a) (tuple21 c (tuple21 b
  c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b a) (tuple21 c (tuple21 b c)))))) (sort
  (set1 (tuple2 (tuple2 b1 a1) (tuple2 c1 (tuple2 b1 c1)))) (t2tb496 x))))

(declare-fun tb2t496 (uni) (set (tuple21 (tuple21 b a) (tuple21 c (tuple21 b
  c)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b a) (tuple21 c (tuple21 b c))))))
  (! (= (tb2t496 (t2tb496 i)) i) :pattern ((t2tb496 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 a1) (tuple2 c1 (tuple2 b1 c1)))) j)
     (= (t2tb496 (tb2t496 j)) j)) :pattern ((t2tb496 (tb2t496 j))) )))

(declare-fun t2tb497 ((tuple21 (tuple21 b a) (tuple21 c (tuple21 b c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b a) (tuple21 c (tuple21 b c))))) (sort
  (tuple2 (tuple2 b1 a1) (tuple2 c1 (tuple2 b1 c1))) (t2tb497 x))))

(declare-fun tb2t497 (uni) (tuple21 (tuple21 b a) (tuple21 c (tuple21 b c))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b a) (tuple21 c (tuple21 b c)))))
  (! (= (tb2t497 (t2tb497 i)) i) :pattern ((t2tb497 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 a1) (tuple2 c1 (tuple2 b1 c1))) j)
     (= (t2tb497 (tb2t497 j)) j)) :pattern ((t2tb497 (tb2t497 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 b c))) (k (set (tuple21 a (tuple21 b c)))) (x b)
  (y a) (z c) (w (tuple21 b c)))
  (= (mem (tuple2 (tuple2 b1 a1) (tuple2 c1 (tuple2 b1 c1)))
  (Tuple2 (tuple2 b1 a1) (tuple2 c1 (tuple2 b1 c1))
  (Tuple2 b1 a1 (t2tb14 x) (t2tb2 y))
  (Tuple2 c1 (tuple2 b1 c1) (t2tb135 z) (t2tb134 w)))
  (parallel_product (tuple2 b1 c1) a1 c1 b1 (t2tb131 h) (t2tb261 k)))
  (and (mem8 (tb2t134 (Tuple2 b1 c1 (t2tb14 x) (t2tb135 z))) h) (mem14
  (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 y) (t2tb134 w))) k)))))

(declare-fun t2tb336 ((set (tuple21 (tuple21 b a) (tuple21 c c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b a) (tuple21 c c))))) (sort
  (set1 (tuple2 (tuple2 b1 a1) (tuple2 c1 c1))) (t2tb336 x))))

(declare-fun tb2t336 (uni) (set (tuple21 (tuple21 b a) (tuple21 c c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b a) (tuple21 c c)))))
  (! (= (tb2t336 (t2tb336 i)) i) :pattern ((t2tb336 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 a1) (tuple2 c1 c1))) j)
     (= (t2tb336 (tb2t336 j)) j)) :pattern ((t2tb336 (tb2t336 j))) )))

(declare-fun t2tb337 ((tuple21 (tuple21 b a) (tuple21 c c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b a) (tuple21 c c)))) (sort
  (tuple2 (tuple2 b1 a1) (tuple2 c1 c1)) (t2tb337 x))))

(declare-fun tb2t337 (uni) (tuple21 (tuple21 b a) (tuple21 c c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b a) (tuple21 c c))))
  (! (= (tb2t337 (t2tb337 i)) i) :pattern ((t2tb337 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 a1) (tuple2 c1 c1)) j)
     (= (t2tb337 (tb2t337 j)) j)) :pattern ((t2tb337 (tb2t337 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 b c))) (k (set (tuple21 a c))) (x b) (y a) (z c)
  (w c))
  (= (mem (tuple2 (tuple2 b1 a1) (tuple2 c1 c1))
  (Tuple2 (tuple2 b1 a1) (tuple2 c1 c1) (Tuple2 b1 a1 (t2tb14 x) (t2tb2 y))
  (Tuple2 c1 c1 (t2tb135 z) (t2tb135 w)))
  (parallel_product c1 a1 c1 b1 (t2tb131 h) (t2tb129 k)))
  (and (mem8 (tb2t134 (Tuple2 b1 c1 (t2tb14 x) (t2tb135 z))) h) (mem10
  (tb2t133 (Tuple2 a1 c1 (t2tb2 y) (t2tb135 w))) k)))))

(declare-fun t2tb338 ((set (tuple21 (tuple21 b a) (tuple21 c b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b a) (tuple21 c b))))) (sort
  (set1 (tuple2 (tuple2 b1 a1) (tuple2 c1 b1))) (t2tb338 x))))

(declare-fun tb2t338 (uni) (set (tuple21 (tuple21 b a) (tuple21 c b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b a) (tuple21 c b)))))
  (! (= (tb2t338 (t2tb338 i)) i) :pattern ((t2tb338 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 a1) (tuple2 c1 b1))) j)
     (= (t2tb338 (tb2t338 j)) j)) :pattern ((t2tb338 (tb2t338 j))) )))

(declare-fun t2tb339 ((tuple21 (tuple21 b a) (tuple21 c b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b a) (tuple21 c b)))) (sort
  (tuple2 (tuple2 b1 a1) (tuple2 c1 b1)) (t2tb339 x))))

(declare-fun tb2t339 (uni) (tuple21 (tuple21 b a) (tuple21 c b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b a) (tuple21 c b))))
  (! (= (tb2t339 (t2tb339 i)) i) :pattern ((t2tb339 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 a1) (tuple2 c1 b1)) j)
     (= (t2tb339 (tb2t339 j)) j)) :pattern ((t2tb339 (tb2t339 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 b c))) (k (set (tuple21 a b))) (x b) (y a) (z c)
  (w b))
  (= (mem (tuple2 (tuple2 b1 a1) (tuple2 c1 b1))
  (Tuple2 (tuple2 b1 a1) (tuple2 c1 b1) (Tuple2 b1 a1 (t2tb14 x) (t2tb2 y))
  (Tuple2 c1 b1 (t2tb135 z) (t2tb14 w)))
  (parallel_product b1 a1 c1 b1 (t2tb131 h) (t2tb11 k)))
  (and (mem8 (tb2t134 (Tuple2 b1 c1 (t2tb14 x) (t2tb135 z))) h) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 y) (t2tb14 w))) k)))))

;; mem_parallel_product
  (assert
  (forall ((c2 ty) (d ty))
  (forall ((h (set (tuple21 b c))) (k uni) (x b) (y uni) (z c) (w uni))
  (= (mem (tuple2 (tuple2 b1 c2) (tuple2 c1 d))
  (Tuple2 (tuple2 b1 c2) (tuple2 c1 d) (Tuple2 b1 c2 (t2tb14 x) y)
  (Tuple2 c1 d (t2tb135 z) w)) (parallel_product d c2 c1 b1 (t2tb131 h) k))
  (and (mem8 (tb2t134 (Tuple2 b1 c1 (t2tb14 x) (t2tb135 z))) h) (mem
  (tuple2 c2 d) (Tuple2 c2 d y w) k))))))

(declare-fun t2tb498 ((set (tuple21 (tuple21 a b) (tuple21 (tuple21 b c)
  c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) (tuple21 (tuple21 b c) c))))) (sort
  (set1 (tuple2 (tuple2 a1 b1) (tuple2 (tuple2 b1 c1) c1))) (t2tb498 x))))

(declare-fun tb2t498 (uni) (set (tuple21 (tuple21 a b) (tuple21 (tuple21 b c)
  c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a b) (tuple21 (tuple21 b c) c)))))
  (! (= (tb2t498 (t2tb498 i)) i) :pattern ((t2tb498 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 b1) (tuple2 (tuple2 b1 c1) c1))) j)
     (= (t2tb498 (tb2t498 j)) j)) :pattern ((t2tb498 (tb2t498 j))) )))

(declare-fun t2tb499 ((tuple21 (tuple21 a b) (tuple21 (tuple21 b c) c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a b) (tuple21 (tuple21 b c) c)))) (sort
  (tuple2 (tuple2 a1 b1) (tuple2 (tuple2 b1 c1) c1)) (t2tb499 x))))

(declare-fun tb2t499 (uni) (tuple21 (tuple21 a b) (tuple21 (tuple21 b c) c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a b) (tuple21 (tuple21 b c) c))))
  (! (= (tb2t499 (t2tb499 i)) i) :pattern ((t2tb499 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 b1) (tuple2 (tuple2 b1 c1) c1)) j)
     (= (t2tb499 (tb2t499 j)) j)) :pattern ((t2tb499 (tb2t499 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a (tuple21 b c)))) (k (set (tuple21 b c))) (x a)
  (y b) (z (tuple21 b c)) (w c))
  (= (mem (tuple2 (tuple2 a1 b1) (tuple2 (tuple2 b1 c1) c1))
  (Tuple2 (tuple2 a1 b1) (tuple2 (tuple2 b1 c1) c1)
  (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y))
  (Tuple2 (tuple2 b1 c1) c1 (t2tb134 z) (t2tb135 w)))
  (parallel_product c1 b1 (tuple2 b1 c1) a1 (t2tb261 h) (t2tb131 k)))
  (and (mem14 (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 z))) h)
  (mem8 (tb2t134 (Tuple2 b1 c1 (t2tb14 y) (t2tb135 w))) k)))))

(declare-fun t2tb500 ((set (tuple21 (tuple21 a a) (tuple21 (tuple21 b c)
  (tuple21 b c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a a) (tuple21 (tuple21 b c) (tuple21 b
  c)))))) (sort
  (set1 (tuple2 (tuple2 a1 a1) (tuple2 (tuple2 b1 c1) (tuple2 b1 c1))))
  (t2tb500 x))))

(declare-fun tb2t500 (uni) (set (tuple21 (tuple21 a a) (tuple21 (tuple21 b c)
  (tuple21 b c)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a a) (tuple21 (tuple21 b c) (tuple21 b
  c)))))) (! (= (tb2t500 (t2tb500 i)) i) :pattern ((t2tb500 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 a1 a1) (tuple2 (tuple2 b1 c1) (tuple2 b1 c1)))) j)
     (= (t2tb500 (tb2t500 j)) j)) :pattern ((t2tb500 (tb2t500 j))) )))

(declare-fun t2tb501 ((tuple21 (tuple21 a a) (tuple21 (tuple21 b c)
  (tuple21 b c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a a) (tuple21 (tuple21 b c) (tuple21 b c)))))
  (sort (tuple2 (tuple2 a1 a1) (tuple2 (tuple2 b1 c1) (tuple2 b1 c1)))
  (t2tb501 x))))

(declare-fun tb2t501 (uni) (tuple21 (tuple21 a a) (tuple21 (tuple21 b c)
  (tuple21 b c))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a a) (tuple21 (tuple21 b c) (tuple21 b c)))))
  (! (= (tb2t501 (t2tb501 i)) i) :pattern ((t2tb501 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 a1) (tuple2 (tuple2 b1 c1) (tuple2 b1 c1)))
     j) (= (t2tb501 (tb2t501 j)) j)) :pattern ((t2tb501 (tb2t501 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a (tuple21 b c)))) (k (set (tuple21 a (tuple21 b
  c)))) (x a) (y a) (z (tuple21 b c)) (w (tuple21 b c)))
  (= (mem (tuple2 (tuple2 a1 a1) (tuple2 (tuple2 b1 c1) (tuple2 b1 c1)))
  (Tuple2 (tuple2 a1 a1) (tuple2 (tuple2 b1 c1) (tuple2 b1 c1))
  (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y))
  (Tuple2 (tuple2 b1 c1) (tuple2 b1 c1) (t2tb134 z) (t2tb134 w)))
  (parallel_product (tuple2 b1 c1) a1 (tuple2 b1 c1) a1 (t2tb261 h)
  (t2tb261 k)))
  (and (mem14 (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 z))) h)
  (mem14 (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 y) (t2tb134 w))) k)))))

(declare-fun t2tb502 ((set (tuple21 (tuple21 a a) (tuple21 (tuple21 b c)
  c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a a) (tuple21 (tuple21 b c) c))))) (sort
  (set1 (tuple2 (tuple2 a1 a1) (tuple2 (tuple2 b1 c1) c1))) (t2tb502 x))))

(declare-fun tb2t502 (uni) (set (tuple21 (tuple21 a a) (tuple21 (tuple21 b c)
  c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a a) (tuple21 (tuple21 b c) c)))))
  (! (= (tb2t502 (t2tb502 i)) i) :pattern ((t2tb502 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 a1) (tuple2 (tuple2 b1 c1) c1))) j)
     (= (t2tb502 (tb2t502 j)) j)) :pattern ((t2tb502 (tb2t502 j))) )))

(declare-fun t2tb503 ((tuple21 (tuple21 a a) (tuple21 (tuple21 b c) c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a a) (tuple21 (tuple21 b c) c)))) (sort
  (tuple2 (tuple2 a1 a1) (tuple2 (tuple2 b1 c1) c1)) (t2tb503 x))))

(declare-fun tb2t503 (uni) (tuple21 (tuple21 a a) (tuple21 (tuple21 b c) c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a a) (tuple21 (tuple21 b c) c))))
  (! (= (tb2t503 (t2tb503 i)) i) :pattern ((t2tb503 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 a1) (tuple2 (tuple2 b1 c1) c1)) j)
     (= (t2tb503 (tb2t503 j)) j)) :pattern ((t2tb503 (tb2t503 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a (tuple21 b c)))) (k (set (tuple21 a c))) (x a)
  (y a) (z (tuple21 b c)) (w c))
  (= (mem (tuple2 (tuple2 a1 a1) (tuple2 (tuple2 b1 c1) c1))
  (Tuple2 (tuple2 a1 a1) (tuple2 (tuple2 b1 c1) c1)
  (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y))
  (Tuple2 (tuple2 b1 c1) c1 (t2tb134 z) (t2tb135 w)))
  (parallel_product c1 a1 (tuple2 b1 c1) a1 (t2tb261 h) (t2tb129 k)))
  (and (mem14 (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 z))) h)
  (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 y) (t2tb135 w))) k)))))

(declare-fun t2tb504 ((set (tuple21 (tuple21 a a) (tuple21 (tuple21 b c)
  b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a a) (tuple21 (tuple21 b c) b))))) (sort
  (set1 (tuple2 (tuple2 a1 a1) (tuple2 (tuple2 b1 c1) b1))) (t2tb504 x))))

(declare-fun tb2t504 (uni) (set (tuple21 (tuple21 a a) (tuple21 (tuple21 b c)
  b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a a) (tuple21 (tuple21 b c) b)))))
  (! (= (tb2t504 (t2tb504 i)) i) :pattern ((t2tb504 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 a1) (tuple2 (tuple2 b1 c1) b1))) j)
     (= (t2tb504 (tb2t504 j)) j)) :pattern ((t2tb504 (tb2t504 j))) )))

(declare-fun t2tb505 ((tuple21 (tuple21 a a) (tuple21 (tuple21 b c) b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a a) (tuple21 (tuple21 b c) b)))) (sort
  (tuple2 (tuple2 a1 a1) (tuple2 (tuple2 b1 c1) b1)) (t2tb505 x))))

(declare-fun tb2t505 (uni) (tuple21 (tuple21 a a) (tuple21 (tuple21 b c) b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a a) (tuple21 (tuple21 b c) b))))
  (! (= (tb2t505 (t2tb505 i)) i) :pattern ((t2tb505 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 a1) (tuple2 (tuple2 b1 c1) b1)) j)
     (= (t2tb505 (tb2t505 j)) j)) :pattern ((t2tb505 (tb2t505 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a (tuple21 b c)))) (k (set (tuple21 a b))) (x a)
  (y a) (z (tuple21 b c)) (w b))
  (= (mem (tuple2 (tuple2 a1 a1) (tuple2 (tuple2 b1 c1) b1))
  (Tuple2 (tuple2 a1 a1) (tuple2 (tuple2 b1 c1) b1)
  (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y))
  (Tuple2 (tuple2 b1 c1) b1 (t2tb134 z) (t2tb14 w)))
  (parallel_product b1 a1 (tuple2 b1 c1) a1 (t2tb261 h) (t2tb11 k)))
  (and (mem14 (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 z))) h)
  (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 y) (t2tb14 w))) k)))))

;; mem_parallel_product
  (assert
  (forall ((c2 ty) (d ty))
  (forall ((h (set (tuple21 a (tuple21 b c)))) (k uni) (x a) (y uni)
  (z (tuple21 b c)) (w uni))
  (= (mem (tuple2 (tuple2 a1 c2) (tuple2 (tuple2 b1 c1) d))
  (Tuple2 (tuple2 a1 c2) (tuple2 (tuple2 b1 c1) d) (Tuple2 a1 c2 (t2tb2 x) y)
  (Tuple2 (tuple2 b1 c1) d (t2tb134 z) w))
  (parallel_product d c2 (tuple2 b1 c1) a1 (t2tb261 h) k))
  (and (mem14 (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 z))) h)
  (mem (tuple2 c2 d) (Tuple2 c2 d y w) k))))))

(declare-fun t2tb340 ((set (tuple21 (tuple21 a b) (tuple21 c c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) (tuple21 c c))))) (sort
  (set1 (tuple2 (tuple2 a1 b1) (tuple2 c1 c1))) (t2tb340 x))))

(declare-fun tb2t340 (uni) (set (tuple21 (tuple21 a b) (tuple21 c c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a b) (tuple21 c c)))))
  (! (= (tb2t340 (t2tb340 i)) i) :pattern ((t2tb340 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 b1) (tuple2 c1 c1))) j)
     (= (t2tb340 (tb2t340 j)) j)) :pattern ((t2tb340 (tb2t340 j))) )))

(declare-fun t2tb341 ((tuple21 (tuple21 a b) (tuple21 c c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a b) (tuple21 c c)))) (sort
  (tuple2 (tuple2 a1 b1) (tuple2 c1 c1)) (t2tb341 x))))

(declare-fun tb2t341 (uni) (tuple21 (tuple21 a b) (tuple21 c c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a b) (tuple21 c c))))
  (! (= (tb2t341 (t2tb341 i)) i) :pattern ((t2tb341 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 b1) (tuple2 c1 c1)) j)
     (= (t2tb341 (tb2t341 j)) j)) :pattern ((t2tb341 (tb2t341 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a c))) (k (set (tuple21 b c))) (x a) (y b) (z c)
  (w c))
  (= (mem (tuple2 (tuple2 a1 b1) (tuple2 c1 c1))
  (Tuple2 (tuple2 a1 b1) (tuple2 c1 c1) (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y))
  (Tuple2 c1 c1 (t2tb135 z) (t2tb135 w)))
  (parallel_product c1 b1 c1 a1 (t2tb129 h) (t2tb131 k)))
  (and (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 z))) h) (mem8
  (tb2t134 (Tuple2 b1 c1 (t2tb14 y) (t2tb135 w))) k)))))

(declare-fun t2tb506 ((set (tuple21 (tuple21 a a) (tuple21 c (tuple21 b
  c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a a) (tuple21 c (tuple21 b c)))))) (sort
  (set1 (tuple2 (tuple2 a1 a1) (tuple2 c1 (tuple2 b1 c1)))) (t2tb506 x))))

(declare-fun tb2t506 (uni) (set (tuple21 (tuple21 a a) (tuple21 c (tuple21 b
  c)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a a) (tuple21 c (tuple21 b c))))))
  (! (= (tb2t506 (t2tb506 i)) i) :pattern ((t2tb506 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 a1) (tuple2 c1 (tuple2 b1 c1)))) j)
     (= (t2tb506 (tb2t506 j)) j)) :pattern ((t2tb506 (tb2t506 j))) )))

(declare-fun t2tb507 ((tuple21 (tuple21 a a) (tuple21 c (tuple21 b c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a a) (tuple21 c (tuple21 b c))))) (sort
  (tuple2 (tuple2 a1 a1) (tuple2 c1 (tuple2 b1 c1))) (t2tb507 x))))

(declare-fun tb2t507 (uni) (tuple21 (tuple21 a a) (tuple21 c (tuple21 b c))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a a) (tuple21 c (tuple21 b c)))))
  (! (= (tb2t507 (t2tb507 i)) i) :pattern ((t2tb507 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 a1) (tuple2 c1 (tuple2 b1 c1))) j)
     (= (t2tb507 (tb2t507 j)) j)) :pattern ((t2tb507 (tb2t507 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a c))) (k (set (tuple21 a (tuple21 b c)))) (x a)
  (y a) (z c) (w (tuple21 b c)))
  (= (mem (tuple2 (tuple2 a1 a1) (tuple2 c1 (tuple2 b1 c1)))
  (Tuple2 (tuple2 a1 a1) (tuple2 c1 (tuple2 b1 c1))
  (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y))
  (Tuple2 c1 (tuple2 b1 c1) (t2tb135 z) (t2tb134 w)))
  (parallel_product (tuple2 b1 c1) a1 c1 a1 (t2tb129 h) (t2tb261 k)))
  (and (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 z))) h) (mem14
  (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 y) (t2tb134 w))) k)))))

(declare-fun t2tb342 ((set (tuple21 (tuple21 a a) (tuple21 c c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a a) (tuple21 c c))))) (sort
  (set1 (tuple2 (tuple2 a1 a1) (tuple2 c1 c1))) (t2tb342 x))))

(declare-fun tb2t342 (uni) (set (tuple21 (tuple21 a a) (tuple21 c c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a a) (tuple21 c c)))))
  (! (= (tb2t342 (t2tb342 i)) i) :pattern ((t2tb342 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 a1) (tuple2 c1 c1))) j)
     (= (t2tb342 (tb2t342 j)) j)) :pattern ((t2tb342 (tb2t342 j))) )))

(declare-fun t2tb343 ((tuple21 (tuple21 a a) (tuple21 c c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a a) (tuple21 c c)))) (sort
  (tuple2 (tuple2 a1 a1) (tuple2 c1 c1)) (t2tb343 x))))

(declare-fun tb2t343 (uni) (tuple21 (tuple21 a a) (tuple21 c c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a a) (tuple21 c c))))
  (! (= (tb2t343 (t2tb343 i)) i) :pattern ((t2tb343 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 a1) (tuple2 c1 c1)) j)
     (= (t2tb343 (tb2t343 j)) j)) :pattern ((t2tb343 (tb2t343 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a c))) (k (set (tuple21 a c))) (x a) (y a) (z c)
  (w c))
  (= (mem (tuple2 (tuple2 a1 a1) (tuple2 c1 c1))
  (Tuple2 (tuple2 a1 a1) (tuple2 c1 c1) (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y))
  (Tuple2 c1 c1 (t2tb135 z) (t2tb135 w)))
  (parallel_product c1 a1 c1 a1 (t2tb129 h) (t2tb129 k)))
  (and (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 z))) h) (mem10
  (tb2t133 (Tuple2 a1 c1 (t2tb2 y) (t2tb135 w))) k)))))

(declare-fun t2tb344 ((set (tuple21 (tuple21 a a) (tuple21 c b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a a) (tuple21 c b))))) (sort
  (set1 (tuple2 (tuple2 a1 a1) (tuple2 c1 b1))) (t2tb344 x))))

(declare-fun tb2t344 (uni) (set (tuple21 (tuple21 a a) (tuple21 c b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a a) (tuple21 c b)))))
  (! (= (tb2t344 (t2tb344 i)) i) :pattern ((t2tb344 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 a1) (tuple2 c1 b1))) j)
     (= (t2tb344 (tb2t344 j)) j)) :pattern ((t2tb344 (tb2t344 j))) )))

(declare-fun t2tb345 ((tuple21 (tuple21 a a) (tuple21 c b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a a) (tuple21 c b)))) (sort
  (tuple2 (tuple2 a1 a1) (tuple2 c1 b1)) (t2tb345 x))))

(declare-fun tb2t345 (uni) (tuple21 (tuple21 a a) (tuple21 c b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a a) (tuple21 c b))))
  (! (= (tb2t345 (t2tb345 i)) i) :pattern ((t2tb345 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 a1) (tuple2 c1 b1)) j)
     (= (t2tb345 (tb2t345 j)) j)) :pattern ((t2tb345 (tb2t345 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a c))) (k (set (tuple21 a b))) (x a) (y a) (z c)
  (w b))
  (= (mem (tuple2 (tuple2 a1 a1) (tuple2 c1 b1))
  (Tuple2 (tuple2 a1 a1) (tuple2 c1 b1) (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y))
  (Tuple2 c1 b1 (t2tb135 z) (t2tb14 w)))
  (parallel_product b1 a1 c1 a1 (t2tb129 h) (t2tb11 k)))
  (and (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 z))) h) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 y) (t2tb14 w))) k)))))

;; mem_parallel_product
  (assert
  (forall ((c2 ty) (d ty))
  (forall ((h (set (tuple21 a c))) (k uni) (x a) (y uni) (z c) (w uni))
  (= (mem (tuple2 (tuple2 a1 c2) (tuple2 c1 d))
  (Tuple2 (tuple2 a1 c2) (tuple2 c1 d) (Tuple2 a1 c2 (t2tb2 x) y)
  (Tuple2 c1 d (t2tb135 z) w)) (parallel_product d c2 c1 a1 (t2tb129 h) k))
  (and (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 z))) h) (mem
  (tuple2 c2 d) (Tuple2 c2 d y w) k))))))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a b))) (k (set (tuple21 b c))) (x a) (y b) (z b)
  (w c))
  (= (mem (tuple2 (tuple2 a1 b1) (tuple2 b1 c1))
  (Tuple2 (tuple2 a1 b1) (tuple2 b1 c1) (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y))
  (Tuple2 b1 c1 (t2tb14 z) (t2tb135 w)))
  (parallel_product c1 b1 b1 a1 (t2tb11 h) (t2tb131 k)))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 z))) h) (mem8
  (tb2t134 (Tuple2 b1 c1 (t2tb14 y) (t2tb135 w))) k)))))

(declare-fun t2tb508 ((set (tuple21 (tuple21 a a) (tuple21 b (tuple21 b
  c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a a) (tuple21 b (tuple21 b c)))))) (sort
  (set1 (tuple2 (tuple2 a1 a1) (tuple2 b1 (tuple2 b1 c1)))) (t2tb508 x))))

(declare-fun tb2t508 (uni) (set (tuple21 (tuple21 a a) (tuple21 b (tuple21 b
  c)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a a) (tuple21 b (tuple21 b c))))))
  (! (= (tb2t508 (t2tb508 i)) i) :pattern ((t2tb508 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 a1) (tuple2 b1 (tuple2 b1 c1)))) j)
     (= (t2tb508 (tb2t508 j)) j)) :pattern ((t2tb508 (tb2t508 j))) )))

(declare-fun t2tb509 ((tuple21 (tuple21 a a) (tuple21 b (tuple21 b c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a a) (tuple21 b (tuple21 b c))))) (sort
  (tuple2 (tuple2 a1 a1) (tuple2 b1 (tuple2 b1 c1))) (t2tb509 x))))

(declare-fun tb2t509 (uni) (tuple21 (tuple21 a a) (tuple21 b (tuple21 b c))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a a) (tuple21 b (tuple21 b c)))))
  (! (= (tb2t509 (t2tb509 i)) i) :pattern ((t2tb509 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 a1) (tuple2 b1 (tuple2 b1 c1))) j)
     (= (t2tb509 (tb2t509 j)) j)) :pattern ((t2tb509 (tb2t509 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a b))) (k (set (tuple21 a (tuple21 b c)))) (x a)
  (y a) (z b) (w (tuple21 b c)))
  (= (mem (tuple2 (tuple2 a1 a1) (tuple2 b1 (tuple2 b1 c1)))
  (Tuple2 (tuple2 a1 a1) (tuple2 b1 (tuple2 b1 c1))
  (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y))
  (Tuple2 b1 (tuple2 b1 c1) (t2tb14 z) (t2tb134 w)))
  (parallel_product (tuple2 b1 c1) a1 b1 a1 (t2tb11 h) (t2tb261 k)))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 z))) h) (mem14
  (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 y) (t2tb134 w))) k)))))

(declare-fun t2tb346 ((tuple21 (tuple21 a a) (tuple21 b c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a a) (tuple21 b c)))) (sort
  (tuple2 (tuple2 a1 a1) (tuple2 b1 c1)) (t2tb346 x))))

(declare-fun tb2t346 (uni) (tuple21 (tuple21 a a) (tuple21 b c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a a) (tuple21 b c))))
  (! (= (tb2t346 (t2tb346 i)) i) :pattern ((t2tb346 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 a1) (tuple2 b1 c1)) j)
     (= (t2tb346 (tb2t346 j)) j)) :pattern ((t2tb346 (tb2t346 j))) )))

(declare-fun t2tb347 ((set (tuple21 (tuple21 a a) (tuple21 b c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a a) (tuple21 b c))))) (sort
  (set1 (tuple2 (tuple2 a1 a1) (tuple2 b1 c1))) (t2tb347 x))))

(declare-fun tb2t347 (uni) (set (tuple21 (tuple21 a a) (tuple21 b c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a a) (tuple21 b c)))))
  (! (= (tb2t347 (t2tb347 i)) i) :pattern ((t2tb347 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 a1) (tuple2 b1 c1))) j)
     (= (t2tb347 (tb2t347 j)) j)) :pattern ((t2tb347 (tb2t347 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a b))) (k (set (tuple21 a c))) (x a) (y a) (z b)
  (w c))
  (= (mem (tuple2 (tuple2 a1 a1) (tuple2 b1 c1))
  (Tuple2 (tuple2 a1 a1) (tuple2 b1 c1) (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y))
  (Tuple2 b1 c1 (t2tb14 z) (t2tb135 w)))
  (parallel_product c1 a1 b1 a1 (t2tb11 h) (t2tb129 k)))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 z))) h) (mem10
  (tb2t133 (Tuple2 a1 c1 (t2tb2 y) (t2tb135 w))) k)))))

(declare-fun t2tb61 ((set (tuple21 (tuple21 a a) (tuple21 b b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a a) (tuple21 b b))))) (sort
  (set1 (tuple2 (tuple2 a1 a1) (tuple2 b1 b1))) (t2tb61 x))))

(declare-fun tb2t61 (uni) (set (tuple21 (tuple21 a a) (tuple21 b b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a a) (tuple21 b b)))))
  (! (= (tb2t61 (t2tb61 i)) i) :pattern ((t2tb61 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 a1) (tuple2 b1 b1))) j)
     (= (t2tb61 (tb2t61 j)) j)) :pattern ((t2tb61 (tb2t61 j))) )))

(declare-fun t2tb62 ((tuple21 (tuple21 a a) (tuple21 b b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a a) (tuple21 b b)))) (sort
  (tuple2 (tuple2 a1 a1) (tuple2 b1 b1)) (t2tb62 x))))

(declare-fun tb2t62 (uni) (tuple21 (tuple21 a a) (tuple21 b b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a a) (tuple21 b b))))
  (! (= (tb2t62 (t2tb62 i)) i) :pattern ((t2tb62 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 a1) (tuple2 b1 b1)) j)
     (= (t2tb62 (tb2t62 j)) j)) :pattern ((t2tb62 (tb2t62 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a b))) (k (set (tuple21 a b))) (x a) (y a) (z b)
  (w b))
  (= (mem (tuple2 (tuple2 a1 a1) (tuple2 b1 b1))
  (Tuple2 (tuple2 a1 a1) (tuple2 b1 b1) (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y))
  (Tuple2 b1 b1 (t2tb14 z) (t2tb14 w)))
  (parallel_product b1 a1 b1 a1 (t2tb11 h) (t2tb11 k)))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 z))) h) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 y) (t2tb14 w))) k)))))

;; mem_parallel_product
  (assert
  (forall ((c2 ty) (d ty))
  (forall ((h (set (tuple21 a b))) (k uni) (x a) (y uni) (z b) (w uni))
  (= (mem (tuple2 (tuple2 a1 c2) (tuple2 b1 d))
  (Tuple2 (tuple2 a1 c2) (tuple2 b1 d) (Tuple2 a1 c2 (t2tb2 x) y)
  (Tuple2 b1 d (t2tb14 z) w)) (parallel_product d c2 b1 a1 (t2tb11 h) k))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 z))) h) (mem
  (tuple2 c2 d) (Tuple2 c2 d y w) k))))))

;; mem_parallel_product
  (assert
  (forall ((a2 ty) (b2 ty) (c2 ty) (d ty))
  (forall ((h uni) (k uni) (x uni) (y uni) (z uni) (w uni))
  (= (mem (tuple2 (tuple2 a2 c2) (tuple2 b2 d))
  (Tuple2 (tuple2 a2 c2) (tuple2 b2 d) (Tuple2 a2 c2 x y) (Tuple2 b2 d z w))
  (parallel_product d c2 b2 a2 h k))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x z) h) (mem (tuple2 c2 d)
  (Tuple2 c2 d y w) k))))))

(declare-fun infix_plmngt (ty ty uni uni) uni)

;; infix +->_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (set1 (tuple2 a2 b2)))
  (infix_plmngt b2 a2 x x1)))))

;; mem_partial_function_set
  (assert
  (forall ((s (set b)) (t (set c)) (f (set (tuple21 b c))))
  (= (mem (set1 (tuple2 b1 c1)) (t2tb131 f)
  (infix_plmngt c1 b1 (t2tb12 s) (t2tb132 t)))
  (and (mem (set1 (tuple2 b1 c1)) (t2tb131 f)
  (relation c1 b1 (t2tb12 s) (t2tb132 t)))
  (forall ((x b) (y1 c) (y2 c))
  (=>
  (and (mem8 (tb2t134 (Tuple2 b1 c1 (t2tb14 x) (t2tb135 y1))) f) (mem8
  (tb2t134 (Tuple2 b1 c1 (t2tb14 x) (t2tb135 y2))) f)) (= y1 y2)))))))

;; mem_partial_function_set
  (assert
  (forall ((s (set a)) (t (set (tuple21 b c))) (f (set (tuple21 a (tuple21 b
  c)))))
  (= (mem15 f
  (tb2t327 (infix_plmngt (tuple2 b1 c1) a1 (t2tb1 s) (t2tb131 t))))
  (and (mem15 f (tb2t327 (relation (tuple2 b1 c1) a1 (t2tb1 s) (t2tb131 t))))
  (forall ((x a) (y1 (tuple21 b c)) (y2 (tuple21 b c)))
  (=>
  (and (mem14 (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 y1))) f)
  (mem14 (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 y2))) f))
  (= y1 y2)))))))

;; mem_partial_function_set
  (assert
  (forall ((s (set a)) (t (set c)) (f (set (tuple21 a c))))
  (= (mem11 f (tb2t128 (infix_plmngt c1 a1 (t2tb1 s) (t2tb132 t))))
  (and (mem11 f (tb2t128 (relation c1 a1 (t2tb1 s) (t2tb132 t))))
  (forall ((x a) (y1 c) (y2 c))
  (=>
  (and (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y1))) f) (mem10
  (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y2))) f)) (= y1 y2)))))))

;; mem_partial_function_set
  (assert
  (forall ((s (set a)) (t (set b)) (f (set (tuple21 a b))))
  (= (mem4 f (tb2t10 (infix_plmngt b1 a1 (t2tb1 s) (t2tb12 t))))
  (and (mem4 f (tb2t10 (relation b1 a1 (t2tb1 s) (t2tb12 t))))
  (forall ((x a) (y1 b) (y2 b))
  (=>
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y1))) f) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y2))) f)) (= y1 y2)))))))

;; mem_partial_function_set
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (f uni))
  (and
  (=> (mem (set1 (tuple2 a2 b2)) f (infix_plmngt b2 a2 s t))
  (and (mem (set1 (tuple2 a2 b2)) f (relation b2 a2 s t))
  (forall ((x uni) (y1 uni) (y2 uni))
  (=> (sort b2 y1)
  (=> (sort b2 y2)
  (=>
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y1) f) (mem (tuple2 a2 b2)
  (Tuple2 a2 b2 x y2) f)) (= y1 y2)))))))
  (=>
  (and (mem (set1 (tuple2 a2 b2)) f (relation b2 a2 s t))
  (forall ((x uni) (y1 uni) (y2 uni))
  (=> (sort a2 x)
  (=> (sort b2 y1)
  (=> (sort b2 y2)
  (=>
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y1) f) (mem (tuple2 a2 b2)
  (Tuple2 a2 b2 x y2) f)) (= y1 y2))))))) (mem (set1 (tuple2 a2 b2)) f
  (infix_plmngt b2 a2 s t)))))))

(declare-fun infix_mnmngt (ty ty uni uni) uni)

;; infix -->_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (set1 (tuple2 a2 b2)))
  (infix_mnmngt b2 a2 x x1)))))

(declare-fun infix_mnmngt1 ((set a) (set b)) (set (set (tuple21 a b))))

(declare-fun infix_mnmngt2 ((set a) (set c)) (set (set (tuple21 a c))))

(declare-fun infix_mnmngt4 ((set a) (set (tuple21 b c))) (set (set (tuple21 a
  (tuple21 b c)))))

;; mem_total_function_set
  (assert
  (forall ((s (set a)) (t (set (tuple21 b c))) (x (set (tuple21 a (tuple21 b
  c)))))
  (= (mem15 x (infix_mnmngt4 s t))
  (and (mem15 x
  (tb2t327 (infix_plmngt (tuple2 b1 c1) a1 (t2tb1 s) (t2tb131 t))))
  (infix_eqeq a1 (dom (tuple2 b1 c1) a1 (t2tb261 x)) (t2tb1 s))))))

;; mem_total_function_set
  (assert
  (forall ((s (set a)) (t (set c)) (x (set (tuple21 a c))))
  (= (mem11 x (infix_mnmngt2 s t))
  (and (mem11 x (tb2t128 (infix_plmngt c1 a1 (t2tb1 s) (t2tb132 t))))
  (infix_eqeq a1 (dom c1 a1 (t2tb129 x)) (t2tb1 s))))))

;; mem_total_function_set
  (assert
  (forall ((s (set a)) (t (set b)) (x (set (tuple21 a b))))
  (= (mem4 x (infix_mnmngt1 s t))
  (and (mem4 x (tb2t10 (infix_plmngt b1 a1 (t2tb1 s) (t2tb12 t))))
  (infix_eqeq a1 (dom b1 a1 (t2tb11 x)) (t2tb1 s))))))

;; mem_total_function_set
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (x uni))
  (= (mem (set1 (tuple2 a2 b2)) x (infix_mnmngt b2 a2 s t))
  (and (mem (set1 (tuple2 a2 b2)) x (infix_plmngt b2 a2 s t)) (infix_eqeq a2
  (dom b2 a2 x) s))))))

(declare-fun infix_gtplgt (ty ty uni uni) uni)

;; infix >+>_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (set1 (tuple2 a2 b2)))
  (infix_gtplgt b2 a2 x x1)))))

;; mem_partial_injection_set
  (assert
  (forall ((s (set (tuple21 b c))) (t (set a)) (x (set (tuple21 (tuple21 b c)
  a))))
  (= (mem (set1 (tuple2 (tuple2 b1 c1) a1)) (t2tb206 x)
  (infix_gtplgt a1 (tuple2 b1 c1) (t2tb131 s) (t2tb1 t)))
  (and (mem (set1 (tuple2 (tuple2 b1 c1) a1)) (t2tb206 x)
  (infix_plmngt a1 (tuple2 b1 c1) (t2tb131 s) (t2tb1 t))) (mem15
  (tb2t261 (inverse a1 (tuple2 b1 c1) (t2tb206 x)))
  (tb2t327 (infix_plmngt (tuple2 b1 c1) a1 (t2tb1 t) (t2tb131 s))))))))

;; mem_partial_injection_set
  (assert
  (forall ((s (set c)) (t (set a)) (x (set (tuple21 c a))))
  (= (mem (set1 (tuple2 c1 a1)) (t2tb224 x)
  (infix_gtplgt a1 c1 (t2tb132 s) (t2tb1 t)))
  (and (mem (set1 (tuple2 c1 a1)) (t2tb224 x)
  (infix_plmngt a1 c1 (t2tb132 s) (t2tb1 t))) (mem11
  (tb2t129 (inverse a1 c1 (t2tb224 x)))
  (tb2t128 (infix_plmngt c1 a1 (t2tb1 t) (t2tb132 s))))))))

;; mem_partial_injection_set
  (assert
  (forall ((s (set b)) (t (set a)) (x (set (tuple21 b a))))
  (= (mem (set1 (tuple2 b1 a1)) (t2tb37 x)
  (infix_gtplgt a1 b1 (t2tb12 s) (t2tb1 t)))
  (and (mem (set1 (tuple2 b1 a1)) (t2tb37 x)
  (infix_plmngt a1 b1 (t2tb12 s) (t2tb1 t))) (mem4
  (tb2t11 (inverse a1 b1 (t2tb37 x)))
  (tb2t10 (infix_plmngt b1 a1 (t2tb1 t) (t2tb12 s))))))))

;; mem_partial_injection_set
  (assert
  (forall ((s (set a)) (t (set (tuple21 b c))) (x (set (tuple21 a (tuple21 b
  c)))))
  (= (mem15 x
  (tb2t327 (infix_gtplgt (tuple2 b1 c1) a1 (t2tb1 s) (t2tb131 t))))
  (and (mem15 x
  (tb2t327 (infix_plmngt (tuple2 b1 c1) a1 (t2tb1 s) (t2tb131 t)))) (mem
  (set1 (tuple2 (tuple2 b1 c1) a1)) (inverse (tuple2 b1 c1) a1 (t2tb261 x))
  (infix_plmngt a1 (tuple2 b1 c1) (t2tb131 t) (t2tb1 s)))))))

;; mem_partial_injection_set
  (assert
  (forall ((s (set a)) (t (set c)) (x (set (tuple21 a c))))
  (= (mem11 x (tb2t128 (infix_gtplgt c1 a1 (t2tb1 s) (t2tb132 t))))
  (and (mem11 x (tb2t128 (infix_plmngt c1 a1 (t2tb1 s) (t2tb132 t)))) (mem
  (set1 (tuple2 c1 a1)) (inverse c1 a1 (t2tb129 x))
  (infix_plmngt a1 c1 (t2tb132 t) (t2tb1 s)))))))

;; mem_partial_injection_set
  (assert
  (forall ((s (set a)) (t (set b)) (x (set (tuple21 a b))))
  (= (mem4 x (tb2t10 (infix_gtplgt b1 a1 (t2tb1 s) (t2tb12 t))))
  (and (mem4 x (tb2t10 (infix_plmngt b1 a1 (t2tb1 s) (t2tb12 t)))) (mem
  (set1 (tuple2 b1 a1)) (inverse b1 a1 (t2tb11 x))
  (infix_plmngt a1 b1 (t2tb12 t) (t2tb1 s)))))))

;; mem_partial_injection_set
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (x uni))
  (= (mem (set1 (tuple2 a2 b2)) x (infix_gtplgt b2 a2 s t))
  (and (mem (set1 (tuple2 a2 b2)) x (infix_plmngt b2 a2 s t)) (mem
  (set1 (tuple2 b2 a2)) (inverse b2 a2 x) (infix_plmngt a2 b2 t s)))))))

(declare-fun infix_gtmngt (ty ty uni uni) uni)

;; infix >->_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (set1 (tuple2 a2 b2)))
  (infix_gtmngt b2 a2 x x1)))))

;; mem_total_injection_set
  (assert
  (forall ((s (set a)) (t (set (tuple21 b c))) (x (set (tuple21 a (tuple21 b
  c)))))
  (= (mem15 x
  (tb2t327 (infix_gtmngt (tuple2 b1 c1) a1 (t2tb1 s) (t2tb131 t))))
  (and (mem15 x
  (tb2t327 (infix_gtplgt (tuple2 b1 c1) a1 (t2tb1 s) (t2tb131 t)))) (mem15 x
  (infix_mnmngt4 s t))))))

;; mem_total_injection_set
  (assert
  (forall ((s (set a)) (t (set c)) (x (set (tuple21 a c))))
  (= (mem11 x (tb2t128 (infix_gtmngt c1 a1 (t2tb1 s) (t2tb132 t))))
  (and (mem11 x (tb2t128 (infix_gtplgt c1 a1 (t2tb1 s) (t2tb132 t)))) (mem11
  x (infix_mnmngt2 s t))))))

;; mem_total_injection_set
  (assert
  (forall ((s (set a)) (t (set b)) (x (set (tuple21 a b))))
  (= (mem4 x (tb2t10 (infix_gtmngt b1 a1 (t2tb1 s) (t2tb12 t))))
  (and (mem4 x (tb2t10 (infix_gtplgt b1 a1 (t2tb1 s) (t2tb12 t)))) (mem4 x
  (infix_mnmngt1 s t))))))

;; mem_total_injection_set
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (x uni))
  (= (mem (set1 (tuple2 a2 b2)) x (infix_gtmngt b2 a2 s t))
  (and (mem (set1 (tuple2 a2 b2)) x (infix_gtplgt b2 a2 s t)) (mem
  (set1 (tuple2 a2 b2)) x (infix_mnmngt b2 a2 s t)))))))

(declare-fun infix_plmngtgt (ty ty uni uni) uni)

;; infix +->>_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (set1 (tuple2 a2 b2)))
  (infix_plmngtgt b2 a2 x x1)))))

;; mem_partial_surjection_set
  (assert
  (forall ((s (set a)) (t (set (tuple21 b c))) (x (set (tuple21 a (tuple21 b
  c)))))
  (= (mem15 x
  (tb2t327 (infix_plmngtgt (tuple2 b1 c1) a1 (t2tb1 s) (t2tb131 t))))
  (and (mem15 x
  (tb2t327 (infix_plmngt (tuple2 b1 c1) a1 (t2tb1 s) (t2tb131 t))))
  (infix_eqeq (tuple2 b1 c1) (ran (tuple2 b1 c1) a1 (t2tb261 x))
  (t2tb131 t))))))

;; mem_partial_surjection_set
  (assert
  (forall ((s (set a)) (t (set c)) (x (set (tuple21 a c))))
  (= (mem11 x (tb2t128 (infix_plmngtgt c1 a1 (t2tb1 s) (t2tb132 t))))
  (and (mem11 x (tb2t128 (infix_plmngt c1 a1 (t2tb1 s) (t2tb132 t))))
  (infix_eqeq c1 (ran c1 a1 (t2tb129 x)) (t2tb132 t))))))

;; mem_partial_surjection_set
  (assert
  (forall ((s (set a)) (t (set b)) (x (set (tuple21 a b))))
  (= (mem4 x (tb2t10 (infix_plmngtgt b1 a1 (t2tb1 s) (t2tb12 t))))
  (and (mem4 x (tb2t10 (infix_plmngt b1 a1 (t2tb1 s) (t2tb12 t))))
  (infix_eqeq b1 (ran b1 a1 (t2tb11 x)) (t2tb12 t))))))

;; mem_partial_surjection_set
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (x uni))
  (= (mem (set1 (tuple2 a2 b2)) x (infix_plmngtgt b2 a2 s t))
  (and (mem (set1 (tuple2 a2 b2)) x (infix_plmngt b2 a2 s t)) (infix_eqeq b2
  (ran b2 a2 x) t))))))

(declare-fun infix_mnmngtgt (ty ty uni uni) uni)

;; infix -->>_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (set1 (tuple2 a2 b2)))
  (infix_mnmngtgt b2 a2 x x1)))))

;; mem_total_surjection_set
  (assert
  (forall ((s (set a)) (t (set (tuple21 b c))) (x (set (tuple21 a (tuple21 b
  c)))))
  (= (mem15 x
  (tb2t327 (infix_mnmngtgt (tuple2 b1 c1) a1 (t2tb1 s) (t2tb131 t))))
  (and (mem15 x
  (tb2t327 (infix_plmngtgt (tuple2 b1 c1) a1 (t2tb1 s) (t2tb131 t)))) (mem15
  x (infix_mnmngt4 s t))))))

;; mem_total_surjection_set
  (assert
  (forall ((s (set a)) (t (set c)) (x (set (tuple21 a c))))
  (= (mem11 x (tb2t128 (infix_mnmngtgt c1 a1 (t2tb1 s) (t2tb132 t))))
  (and (mem11 x (tb2t128 (infix_plmngtgt c1 a1 (t2tb1 s) (t2tb132 t))))
  (mem11 x (infix_mnmngt2 s t))))))

;; mem_total_surjection_set
  (assert
  (forall ((s (set a)) (t (set b)) (x (set (tuple21 a b))))
  (= (mem4 x (tb2t10 (infix_mnmngtgt b1 a1 (t2tb1 s) (t2tb12 t))))
  (and (mem4 x (tb2t10 (infix_plmngtgt b1 a1 (t2tb1 s) (t2tb12 t)))) (mem4 x
  (infix_mnmngt1 s t))))))

;; mem_total_surjection_set
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (x uni))
  (= (mem (set1 (tuple2 a2 b2)) x (infix_mnmngtgt b2 a2 s t))
  (and (mem (set1 (tuple2 a2 b2)) x (infix_plmngtgt b2 a2 s t)) (mem
  (set1 (tuple2 a2 b2)) x (infix_mnmngt b2 a2 s t)))))))

(declare-fun infix_gtplgtgt (ty ty uni uni) uni)

;; infix >+>>_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (set1 (tuple2 a2 b2)))
  (infix_gtplgtgt b2 a2 x x1)))))

;; mem_partial_bijection_set
  (assert
  (forall ((s (set a)) (t (set (tuple21 b c))) (x (set (tuple21 a (tuple21 b
  c)))))
  (= (mem15 x
  (tb2t327 (infix_gtplgtgt (tuple2 b1 c1) a1 (t2tb1 s) (t2tb131 t))))
  (and (mem15 x
  (tb2t327 (infix_gtplgt (tuple2 b1 c1) a1 (t2tb1 s) (t2tb131 t)))) (mem15 x
  (tb2t327 (infix_plmngtgt (tuple2 b1 c1) a1 (t2tb1 s) (t2tb131 t))))))))

;; mem_partial_bijection_set
  (assert
  (forall ((s (set a)) (t (set c)) (x (set (tuple21 a c))))
  (= (mem11 x (tb2t128 (infix_gtplgtgt c1 a1 (t2tb1 s) (t2tb132 t))))
  (and (mem11 x (tb2t128 (infix_gtplgt c1 a1 (t2tb1 s) (t2tb132 t)))) (mem11
  x (tb2t128 (infix_plmngtgt c1 a1 (t2tb1 s) (t2tb132 t))))))))

;; mem_partial_bijection_set
  (assert
  (forall ((s (set a)) (t (set b)) (x (set (tuple21 a b))))
  (= (mem4 x (tb2t10 (infix_gtplgtgt b1 a1 (t2tb1 s) (t2tb12 t))))
  (and (mem4 x (tb2t10 (infix_gtplgt b1 a1 (t2tb1 s) (t2tb12 t)))) (mem4 x
  (tb2t10 (infix_plmngtgt b1 a1 (t2tb1 s) (t2tb12 t))))))))

;; mem_partial_bijection_set
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (x uni))
  (= (mem (set1 (tuple2 a2 b2)) x (infix_gtplgtgt b2 a2 s t))
  (and (mem (set1 (tuple2 a2 b2)) x (infix_gtplgt b2 a2 s t)) (mem
  (set1 (tuple2 a2 b2)) x (infix_plmngtgt b2 a2 s t)))))))

(declare-fun infix_gtmngtgt (ty ty uni uni) uni)

;; infix >->>_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (set1 (tuple2 a2 b2)))
  (infix_gtmngtgt b2 a2 x x1)))))

;; mem_total_bijection_set
  (assert
  (forall ((s (set a)) (t (set (tuple21 b c))) (x (set (tuple21 a (tuple21 b
  c)))))
  (= (mem15 x
  (tb2t327 (infix_gtmngtgt (tuple2 b1 c1) a1 (t2tb1 s) (t2tb131 t))))
  (and (mem15 x
  (tb2t327 (infix_gtmngt (tuple2 b1 c1) a1 (t2tb1 s) (t2tb131 t)))) (mem15 x
  (tb2t327 (infix_mnmngtgt (tuple2 b1 c1) a1 (t2tb1 s) (t2tb131 t))))))))

;; mem_total_bijection_set
  (assert
  (forall ((s (set a)) (t (set c)) (x (set (tuple21 a c))))
  (= (mem11 x (tb2t128 (infix_gtmngtgt c1 a1 (t2tb1 s) (t2tb132 t))))
  (and (mem11 x (tb2t128 (infix_gtmngt c1 a1 (t2tb1 s) (t2tb132 t)))) (mem11
  x (tb2t128 (infix_mnmngtgt c1 a1 (t2tb1 s) (t2tb132 t))))))))

;; mem_total_bijection_set
  (assert
  (forall ((s (set a)) (t (set b)) (x (set (tuple21 a b))))
  (= (mem4 x (tb2t10 (infix_gtmngtgt b1 a1 (t2tb1 s) (t2tb12 t))))
  (and (mem4 x (tb2t10 (infix_gtmngt b1 a1 (t2tb1 s) (t2tb12 t)))) (mem4 x
  (tb2t10 (infix_mnmngtgt b1 a1 (t2tb1 s) (t2tb12 t))))))))

;; mem_total_bijection_set
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (x uni))
  (= (mem (set1 (tuple2 a2 b2)) x (infix_gtmngtgt b2 a2 s t))
  (and (mem (set1 (tuple2 a2 b2)) x (infix_gtmngt b2 a2 s t)) (mem
  (set1 (tuple2 a2 b2)) x (infix_mnmngtgt b2 a2 s t)))))))

(declare-fun apply (ty ty uni uni) uni)

;; apply_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort b2 (apply b2 a2 x x1)))))

;; apply_def0
  (assert
  (forall ((b2 ty))
  (forall ((f uni) (s (set (set (tuple21 a (tuple21 b c))))) (t uni)
  (a2 (set (tuple21 a (tuple21 b c)))))
  (=>
  (and (mem (set1 (tuple2 (set1 (tuple2 a1 (tuple2 b1 c1))) b2)) f
  (infix_plmngt b2 (set1 (tuple2 a1 (tuple2 b1 c1))) (t2tb327 s) t)) (mem15
  a2 (tb2t327 (dom b2 (set1 (tuple2 a1 (tuple2 b1 c1))) f)))) (mem
  (tuple2 (set1 (tuple2 a1 (tuple2 b1 c1))) b2)
  (Tuple2 (set1 (tuple2 a1 (tuple2 b1 c1))) b2 (t2tb261 a2)
  (apply b2 (set1 (tuple2 a1 (tuple2 b1 c1))) f (t2tb261 a2))) f)))))

;; apply_def0
  (assert
  (forall ((b2 ty))
  (forall ((f uni) (s (set (tuple21 a (tuple21 b c)))) (t uni) (a2 (tuple21 a
  (tuple21 b c))))
  (=>
  (and (mem (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) b2)) f
  (infix_plmngt b2 (tuple2 a1 (tuple2 b1 c1)) (t2tb261 s) t)) (mem14 a2
  (tb2t261 (dom b2 (tuple2 a1 (tuple2 b1 c1)) f)))) (mem
  (tuple2 (tuple2 a1 (tuple2 b1 c1)) b2)
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) b2 (t2tb260 a2)
  (apply b2 (tuple2 a1 (tuple2 b1 c1)) f (t2tb260 a2))) f)))))

;; apply_def0
  (assert
  (forall ((b2 ty))
  (forall ((f uni) (s (set (set (tuple21 a c)))) (t uni) (a2 (set (tuple21 a
  c))))
  (=>
  (and (mem (set1 (tuple2 (set1 (tuple2 a1 c1)) b2)) f
  (infix_plmngt b2 (set1 (tuple2 a1 c1)) (t2tb128 s) t)) (mem11 a2
  (tb2t128 (dom b2 (set1 (tuple2 a1 c1)) f)))) (mem
  (tuple2 (set1 (tuple2 a1 c1)) b2)
  (Tuple2 (set1 (tuple2 a1 c1)) b2 (t2tb129 a2)
  (apply b2 (set1 (tuple2 a1 c1)) f (t2tb129 a2))) f)))))

;; apply_def0
  (assert
  (forall ((b2 ty))
  (forall ((f uni) (s (set (tuple21 a c))) (t uni) (a2 (tuple21 a c)))
  (=>
  (and (mem (set1 (tuple2 (tuple2 a1 c1) b2)) f
  (infix_plmngt b2 (tuple2 a1 c1) (t2tb129 s) t)) (mem10 a2
  (tb2t129 (dom b2 (tuple2 a1 c1) f)))) (mem (tuple2 (tuple2 a1 c1) b2)
  (Tuple2 (tuple2 a1 c1) b2 (t2tb133 a2)
  (apply b2 (tuple2 a1 c1) f (t2tb133 a2))) f)))))

;; apply_def0
  (assert
  (forall ((b2 ty))
  (forall ((f uni) (s (set (tuple21 b c))) (t uni) (a2 (tuple21 b c)))
  (=>
  (and (mem (set1 (tuple2 (tuple2 b1 c1) b2)) f
  (infix_plmngt b2 (tuple2 b1 c1) (t2tb131 s) t)) (mem8 a2
  (tb2t131 (dom b2 (tuple2 b1 c1) f)))) (mem (tuple2 (tuple2 b1 c1) b2)
  (Tuple2 (tuple2 b1 c1) b2 (t2tb134 a2)
  (apply b2 (tuple2 b1 c1) f (t2tb134 a2))) f)))))

;; apply_def0
  (assert
  (forall ((b2 ty))
  (forall ((f uni) (s (set c)) (t uni) (a2 c))
  (=>
  (and (mem (set1 (tuple2 c1 b2)) f (infix_plmngt b2 c1 (t2tb132 s) t)) (mem7
  a2 (tb2t132 (dom b2 c1 f)))) (mem (tuple2 c1 b2)
  (Tuple2 c1 b2 (t2tb135 a2) (apply b2 c1 f (t2tb135 a2))) f)))))

;; apply_def0
  (assert
  (forall ((b2 ty))
  (forall ((f uni) (s (set (set (tuple21 a b)))) (t uni) (a2 (set (tuple21 a
  b))))
  (=>
  (and (mem (set1 (tuple2 (set1 (tuple2 a1 b1)) b2)) f
  (infix_plmngt b2 (set1 (tuple2 a1 b1)) (t2tb10 s) t)) (mem4 a2
  (tb2t10 (dom b2 (set1 (tuple2 a1 b1)) f)))) (mem
  (tuple2 (set1 (tuple2 a1 b1)) b2)
  (Tuple2 (set1 (tuple2 a1 b1)) b2 (t2tb11 a2)
  (apply b2 (set1 (tuple2 a1 b1)) f (t2tb11 a2))) f)))))

;; apply_def0
  (assert
  (forall ((b2 ty))
  (forall ((f uni) (s (set (tuple21 a b))) (t uni) (a2 (tuple21 a b)))
  (=>
  (and (mem (set1 (tuple2 (tuple2 a1 b1) b2)) f
  (infix_plmngt b2 (tuple2 a1 b1) (t2tb11 s) t)) (mem3 a2
  (tb2t11 (dom b2 (tuple2 a1 b1) f)))) (mem (tuple2 (tuple2 a1 b1) b2)
  (Tuple2 (tuple2 a1 b1) b2 (t2tb13 a2)
  (apply b2 (tuple2 a1 b1) f (t2tb13 a2))) f)))))

;; apply_def0
  (assert
  (forall ((f (set (tuple21 b c))) (s (set b)) (t (set c)) (a2 b))
  (=>
  (and (mem (set1 (tuple2 b1 c1)) (t2tb131 f)
  (infix_plmngt c1 b1 (t2tb12 s) (t2tb132 t))) (mem2 a2
  (tb2t12 (dom c1 b1 (t2tb131 f))))) (mem8
  (tb2t134 (Tuple2 b1 c1 (t2tb14 a2) (apply c1 b1 (t2tb131 f) (t2tb14 a2))))
  f))))

;; apply_def0
  (assert
  (forall ((b2 ty))
  (forall ((f uni) (s (set b)) (t uni) (a2 b))
  (=>
  (and (mem (set1 (tuple2 b1 b2)) f (infix_plmngt b2 b1 (t2tb12 s) t)) (mem2
  a2 (tb2t12 (dom b2 b1 f)))) (mem (tuple2 b1 b2)
  (Tuple2 b1 b2 (t2tb14 a2) (apply b2 b1 f (t2tb14 a2))) f)))))

;; apply_def0
  (assert
  (forall ((f (set (tuple21 a (tuple21 b c)))) (s (set a)) (t (set (tuple21 b
  c))) (a2 a))
  (=>
  (and (mem15 f
  (tb2t327 (infix_plmngt (tuple2 b1 c1) a1 (t2tb1 s) (t2tb131 t)))) (mem1 a2
  (tb2t1 (dom (tuple2 b1 c1) a1 (t2tb261 f))))) (mem14
  (tb2t260
  (Tuple2 a1 (tuple2 b1 c1) (t2tb2 a2)
  (apply (tuple2 b1 c1) a1 (t2tb261 f) (t2tb2 a2)))) f))))

;; apply_def0
  (assert
  (forall ((f (set (tuple21 a c))) (s (set a)) (t (set c)) (a2 a))
  (=>
  (and (mem11 f (tb2t128 (infix_plmngt c1 a1 (t2tb1 s) (t2tb132 t)))) (mem1
  a2 (tb2t1 (dom c1 a1 (t2tb129 f))))) (mem10
  (tb2t133 (Tuple2 a1 c1 (t2tb2 a2) (apply c1 a1 (t2tb129 f) (t2tb2 a2))))
  f))))

;; apply_def0
  (assert
  (forall ((f (set (tuple21 a b))) (s (set a)) (t (set b)) (a2 a))
  (=>
  (and (mem4 f (tb2t10 (infix_plmngt b1 a1 (t2tb1 s) (t2tb12 t)))) (mem1 a2
  (tb2t1 (dom b1 a1 (t2tb11 f))))) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 a2) (apply b1 a1 (t2tb11 f) (t2tb2 a2)))) f))))

;; apply_def0
  (assert
  (forall ((b2 ty))
  (forall ((f uni) (s (set a)) (t uni) (a2 a))
  (=>
  (and (mem (set1 (tuple2 a1 b2)) f (infix_plmngt b2 a1 (t2tb1 s) t)) (mem1
  a2 (tb2t1 (dom b2 a1 f)))) (mem (tuple2 a1 b2)
  (Tuple2 a1 b2 (t2tb2 a2) (apply b2 a1 f (t2tb2 a2))) f)))))

;; apply_def0
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((f uni) (s uni) (t uni) (a3 uni))
  (=>
  (and (mem (set1 (tuple2 a2 b2)) f (infix_plmngt b2 a2 s t)) (mem a2 a3
  (dom b2 a2 f))) (mem (tuple2 a2 b2) (Tuple2 a2 b2 a3 (apply b2 a2 f a3))
  f)))))

(assert
;; mem_direct_product_4
 ;; File "lemmes_bbook.why", line 537, characters 7-27
  (not
  (forall ((s (set a)) (t (set b)) (u (set c)) (f (set (tuple21 a b)))
  (g (set (tuple21 a c))))
  (=> (and (mem4 f (infix_mnmngt1 s t)) (mem11 g (infix_mnmngt2 s u))) (mem15
  (direct_product1 f g) (infix_mnmngt4 s (times3 t u)))))))
(check-sat)
