(set-logic AUFBVDTLIRA)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
(declare-sort uni 0)

(declare-sort ty 0)

(declare-fun sort (ty uni) Bool)

(declare-fun witness (ty) uni)

;; witness_sort
  (assert (forall ((a2 ty)) (sort a2 (witness a2))))

(declare-fun int () ty)

(declare-fun real () ty)

(declare-sort set 1)

(declare-fun set1 (ty) ty)

(declare-sort a 0)

(declare-fun a1 () ty)

(declare-sort tuple21 2)

(declare-fun tuple2 (ty ty) ty)

(declare-fun mem (ty uni uni) Bool)

(declare-fun mem1 (a (set a)) Bool)

(declare-fun mem12 ((tuple21 a a) (set (tuple21 a a))) Bool)

(declare-fun mem13 ((set (tuple21 a a)) (set (set (tuple21 a a)))) Bool)

(declare-fun infix_eqeq (ty uni uni) Bool)

(declare-fun t2tb3 ((set (set (tuple21 a a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 a a))))) (sort (set1 (set1 (tuple2 a1 a1)))
  (t2tb3 x))))

(declare-fun tb2t3 (uni) (set (set (tuple21 a a))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 a a)))))
  (! (= (tb2t3 (t2tb3 i)) i) :pattern ((t2tb3 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 a1 a1))) j) (= (t2tb3 (tb2t3 j)) j)) :pattern (
  (t2tb3 (tb2t3 j))) )))

;; infix ==_def
  (assert
  (forall ((s (set (set (tuple21 a a)))) (t (set (set (tuple21 a a)))))
  (= (infix_eqeq (set1 (tuple2 a1 a1)) (t2tb3 s) (t2tb3 t))
  (forall ((x (set (tuple21 a a)))) (= (mem13 x s) (mem13 x t))))))

(declare-fun t2tb4 ((set (tuple21 a a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a a)))) (sort (set1 (tuple2 a1 a1)) (t2tb4 x))))

(declare-fun tb2t4 (uni) (set (tuple21 a a)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a a))))
  (! (= (tb2t4 (t2tb4 i)) i) :pattern ((t2tb4 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 a1)) j) (= (t2tb4 (tb2t4 j)) j)) :pattern (
  (t2tb4 (tb2t4 j))) )))

;; infix ==_def
  (assert
  (forall ((s (set (tuple21 a a))) (t (set (tuple21 a a))))
  (= (infix_eqeq (tuple2 a1 a1) (t2tb4 s) (t2tb4 t))
  (forall ((x (tuple21 a a))) (= (mem12 x s) (mem12 x t))))))

(declare-fun t2tb1 ((set a)) uni)

;; t2tb_sort
  (assert (forall ((x (set a))) (sort (set1 a1) (t2tb1 x))))

(declare-fun tb2t1 (uni) (set a))

;; BridgeL
  (assert
  (forall ((i (set a))) (! (= (tb2t1 (t2tb1 i)) i) :pattern ((t2tb1 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 a1) j) (= (t2tb1 (tb2t1 j)) j)) :pattern ((t2tb1
                                                               (tb2t1 j))) )))

;; infix ==_def
  (assert
  (forall ((s (set a)) (t (set a)))
  (= (infix_eqeq a1 (t2tb1 s) (t2tb1 t))
  (forall ((x a)) (= (mem1 x s) (mem1 x t))))))

;; infix ==_def
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t uni))
  (and
  (=> (infix_eqeq a2 s t) (forall ((x uni)) (= (mem a2 x s) (mem a2 x t))))
  (=> (forall ((x uni)) (=> (sort a2 x) (= (mem a2 x s) (mem a2 x t))))
  (infix_eqeq a2 s t))))))

(declare-fun power (ty uni) uni)

;; power_sort
  (assert
  (forall ((a2 ty)) (forall ((x uni)) (sort (set1 (set1 a2)) (power a2 x)))))

(declare-fun non_empty_power (ty uni) uni)

;; non_empty_power_sort
  (assert
  (forall ((a2 ty))
  (forall ((x uni)) (sort (set1 (set1 a2)) (non_empty_power a2 x)))))

(declare-fun subset1 (ty uni uni) Bool)

;; subset_def
  (assert
  (forall ((s (set (tuple21 a a))) (t (set (tuple21 a a))))
  (= (subset1 (tuple2 a1 a1) (t2tb4 s) (t2tb4 t)) (mem13 s
  (tb2t3 (power (tuple2 a1 a1) (t2tb4 t)))))))

;; subset_def
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t uni))
  (= (subset1 a2 s t) (mem (set1 a2) s (power a2 t))))))

(declare-fun subsetnoteq (ty uni uni) Bool)

;; subsetnoteq_def
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t uni))
  (= (subsetnoteq a2 s t) (and (subset1 a2 s t) (not (infix_eqeq a2 s t)))))))

(declare-fun empty (ty) uni)

;; empty_sort
  (assert (forall ((a2 ty)) (sort (set1 a2) (empty a2))))

(declare-fun is_empty (ty uni) Bool)

;; is_empty_def
  (assert
  (forall ((s (set (set (tuple21 a a)))))
  (= (is_empty (set1 (tuple2 a1 a1)) (t2tb3 s))
  (forall ((x (set (tuple21 a a)))) (not (mem13 x s))))))

;; is_empty_def
  (assert
  (forall ((s (set (tuple21 a a))))
  (= (is_empty (tuple2 a1 a1) (t2tb4 s))
  (forall ((x (tuple21 a a))) (not (mem12 x s))))))

;; is_empty_def
  (assert
  (forall ((s (set a)))
  (= (is_empty a1 (t2tb1 s)) (forall ((x a)) (not (mem1 x s))))))

;; is_empty_def
  (assert
  (forall ((a2 ty))
  (forall ((s uni))
  (and (=> (is_empty a2 s) (forall ((x uni)) (not (mem a2 x s))))
  (=> (forall ((x uni)) (=> (sort a2 x) (not (mem a2 x s)))) (is_empty a2 s))))))

;; empty_def1
  (assert (forall ((a2 ty)) (is_empty a2 (empty a2))))

;; empty
  (assert
  (forall ((x (set (tuple21 a a))))
  (not (mem13 x (tb2t3 (empty (set1 (tuple2 a1 a1))))))))

;; empty
  (assert
  (forall ((x (tuple21 a a))) (not (mem12 x (tb2t4 (empty (tuple2 a1 a1)))))))

;; empty
  (assert (forall ((x a)) (not (mem1 x (tb2t1 (empty a1))))))

;; empty
  (assert (forall ((a2 ty)) (forall ((x uni)) (not (mem a2 x (empty a2))))))

(declare-fun add (ty uni uni) uni)

;; add_sort
  (assert
  (forall ((a2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 a2) (add a2 x x1)))))

;; add_def1
  (assert
  (forall ((x (set (tuple21 a a))) (y (set (tuple21 a a))))
  (forall ((s (set (set (tuple21 a a)))))
  (= (mem13 x (tb2t3 (add (set1 (tuple2 a1 a1)) (t2tb4 y) (t2tb3 s))))
  (or (= x y) (mem13 x s))))))

(declare-fun t2tb5 ((tuple21 a a)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 a a))) (sort (tuple2 a1 a1) (t2tb5 x))))

(declare-fun tb2t5 (uni) (tuple21 a a))

;; BridgeL
  (assert
  (forall ((i (tuple21 a a)))
  (! (= (tb2t5 (t2tb5 i)) i) :pattern ((t2tb5 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 a1) j) (= (t2tb5 (tb2t5 j)) j)) :pattern ((t2tb5
                                                                    (tb2t5 j))) )))

;; add_def1
  (assert
  (forall ((x (tuple21 a a)) (y (tuple21 a a)))
  (forall ((s (set (tuple21 a a))))
  (= (mem12 x (tb2t4 (add (tuple2 a1 a1) (t2tb5 y) (t2tb4 s))))
  (or (= x y) (mem12 x s))))))

(declare-fun t2tb2 (a) uni)

;; t2tb_sort
  (assert (forall ((x a)) (sort a1 (t2tb2 x))))

(declare-fun tb2t2 (uni) a)

;; BridgeL
  (assert (forall ((i a)) (! (= (tb2t2 (t2tb2 i)) i) :pattern ((t2tb2 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort a1 j) (= (t2tb2 (tb2t2 j)) j)) :pattern ((t2tb2 (tb2t2 j))) )))

;; add_def1
  (assert
  (forall ((x a) (y a))
  (forall ((s (set a)))
  (= (mem1 x (tb2t1 (add a1 (t2tb2 y) (t2tb1 s)))) (or (= x y) (mem1 x s))))))

;; add_def1
  (assert
  (forall ((a2 ty))
  (forall ((x uni) (y uni))
  (=> (sort a2 x)
  (=> (sort a2 y)
  (forall ((s uni)) (= (mem a2 x (add a2 y s)) (or (= x y) (mem a2 x s)))))))))

(declare-fun singleton (ty uni) uni)

;; singleton_sort
  (assert
  (forall ((a2 ty)) (forall ((x uni)) (sort (set1 a2) (singleton a2 x)))))

;; mem_singleton
  (assert
  (forall ((x (set (tuple21 a a))) (y (set (tuple21 a a))))
  (= (mem13 x (tb2t3 (singleton (set1 (tuple2 a1 a1)) (t2tb4 y)))) (= x y))))

;; mem_singleton
  (assert
  (forall ((x (tuple21 a a)) (y (tuple21 a a)))
  (= (mem12 x (tb2t4 (singleton (tuple2 a1 a1) (t2tb5 y)))) (= x y))))

;; mem_singleton
  (assert
  (forall ((x a) (y a))
  (= (mem1 x (tb2t1 (singleton a1 (t2tb2 y)))) (= x y))))

;; mem_singleton
  (assert
  (forall ((a2 ty))
  (forall ((x uni) (y uni))
  (=> (sort a2 x) (=> (sort a2 y) (= (mem a2 x (singleton a2 y)) (= x y)))))))

(declare-fun remove (ty uni uni) uni)

;; remove_sort
  (assert
  (forall ((a2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 a2) (remove a2 x x1)))))

;; remove_def1
  (assert
  (forall ((x (set (tuple21 a a))) (y (set (tuple21 a a)))
  (s (set (set (tuple21 a a)))))
  (= (mem13 x (tb2t3 (remove (set1 (tuple2 a1 a1)) (t2tb4 y) (t2tb3 s))))
  (and (not (= x y)) (mem13 x s)))))

;; remove_def1
  (assert
  (forall ((x (tuple21 a a)) (y (tuple21 a a)) (s (set (tuple21 a a))))
  (= (mem12 x (tb2t4 (remove (tuple2 a1 a1) (t2tb5 y) (t2tb4 s))))
  (and (not (= x y)) (mem12 x s)))))

;; remove_def1
  (assert
  (forall ((x a) (y a) (s (set a)))
  (= (mem1 x (tb2t1 (remove a1 (t2tb2 y) (t2tb1 s))))
  (and (not (= x y)) (mem1 x s)))))

;; remove_def1
  (assert
  (forall ((a2 ty))
  (forall ((x uni) (y uni) (s uni))
  (=> (sort a2 x)
  (=> (sort a2 y)
  (= (mem a2 x (remove a2 y s)) (and (not (= x y)) (mem a2 x s))))))))

(declare-fun all (ty) uni)

;; all_sort
  (assert (forall ((a2 ty)) (sort (set1 a2) (all a2))))

;; all_def
  (assert
  (forall ((x (set (tuple21 a a)))) (mem13 x
  (tb2t3 (all (set1 (tuple2 a1 a1)))))))

;; all_def
  (assert
  (forall ((x (tuple21 a a))) (mem12 x (tb2t4 (all (tuple2 a1 a1))))))

;; all_def
  (assert (forall ((x a)) (mem1 x (tb2t1 (all a1)))))

;; all_def
  (assert (forall ((a2 ty)) (forall ((x uni)) (mem a2 x (all a2)))))

(declare-fun union1 (ty uni uni) uni)

;; union_sort
  (assert
  (forall ((a2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 a2) (union1 a2 x x1)))))

;; mem_union
  (assert
  (forall ((s (set (set (tuple21 a a)))) (t (set (set (tuple21 a a))))
  (x (set (tuple21 a a))))
  (= (mem13 x (tb2t3 (union1 (set1 (tuple2 a1 a1)) (t2tb3 s) (t2tb3 t))))
  (or (mem13 x s) (mem13 x t)))))

;; mem_union
  (assert
  (forall ((s (set (tuple21 a a))) (t (set (tuple21 a a))) (x (tuple21 a a)))
  (= (mem12 x (tb2t4 (union1 (tuple2 a1 a1) (t2tb4 s) (t2tb4 t))))
  (or (mem12 x s) (mem12 x t)))))

;; mem_union
  (assert
  (forall ((s (set a)) (t (set a)) (x a))
  (= (mem1 x (tb2t1 (union1 a1 (t2tb1 s) (t2tb1 t))))
  (or (mem1 x s) (mem1 x t)))))

;; mem_union
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t uni) (x uni))
  (= (mem a2 x (union1 a2 s t)) (or (mem a2 x s) (mem a2 x t))))))

(declare-fun inter (ty uni uni) uni)

;; inter_sort
  (assert
  (forall ((a2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 a2) (inter a2 x x1)))))

;; mem_inter
  (assert
  (forall ((s (set (set (tuple21 a a)))) (t (set (set (tuple21 a a))))
  (x (set (tuple21 a a))))
  (= (mem13 x (tb2t3 (inter (set1 (tuple2 a1 a1)) (t2tb3 s) (t2tb3 t))))
  (and (mem13 x s) (mem13 x t)))))

;; mem_inter
  (assert
  (forall ((s (set (tuple21 a a))) (t (set (tuple21 a a))) (x (tuple21 a a)))
  (= (mem12 x (tb2t4 (inter (tuple2 a1 a1) (t2tb4 s) (t2tb4 t))))
  (and (mem12 x s) (mem12 x t)))))

;; mem_inter
  (assert
  (forall ((s (set a)) (t (set a)) (x a))
  (= (mem1 x (tb2t1 (inter a1 (t2tb1 s) (t2tb1 t))))
  (and (mem1 x s) (mem1 x t)))))

;; mem_inter
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t uni) (x uni))
  (= (mem a2 x (inter a2 s t)) (and (mem a2 x s) (mem a2 x t))))))

(declare-fun diff (ty uni uni) uni)

;; diff_sort
  (assert
  (forall ((a2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 a2) (diff a2 x x1)))))

;; mem_diff
  (assert
  (forall ((s (set (set (tuple21 a a)))) (t (set (set (tuple21 a a))))
  (x (set (tuple21 a a))))
  (= (mem13 x (tb2t3 (diff (set1 (tuple2 a1 a1)) (t2tb3 s) (t2tb3 t))))
  (and (mem13 x s) (not (mem13 x t))))))

;; mem_diff
  (assert
  (forall ((s (set (tuple21 a a))) (t (set (tuple21 a a))) (x (tuple21 a a)))
  (= (mem12 x (tb2t4 (diff (tuple2 a1 a1) (t2tb4 s) (t2tb4 t))))
  (and (mem12 x s) (not (mem12 x t))))))

;; mem_diff
  (assert
  (forall ((s (set a)) (t (set a)) (x a))
  (= (mem1 x (tb2t1 (diff a1 (t2tb1 s) (t2tb1 t))))
  (and (mem1 x s) (not (mem1 x t))))))

;; mem_diff
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t uni) (x uni))
  (= (mem a2 x (diff a2 s t)) (and (mem a2 x s) (not (mem a2 x t)))))))

(declare-fun Tuple2 (ty ty uni uni) uni)

;; Tuple2_sort
  (assert
  (forall ((a2 ty) (a3 ty))
  (forall ((x uni) (x1 uni)) (sort (tuple2 a3 a2) (Tuple2 a3 a2 x x1)))))

(declare-fun Tuple2_proj_1 (ty ty uni) uni)

;; Tuple2_proj_1_sort
  (assert
  (forall ((a2 ty) (a3 ty))
  (forall ((x uni)) (sort a3 (Tuple2_proj_1 a3 a2 x)))))

;; Tuple2_proj_1_def
  (assert
  (forall ((a2 ty) (a3 ty))
  (forall ((u uni) (u1 uni))
  (=> (sort a3 u) (= (Tuple2_proj_1 a3 a2 (Tuple2 a3 a2 u u1)) u)))))

(declare-fun Tuple2_proj_2 (ty ty uni) uni)

;; Tuple2_proj_2_sort
  (assert
  (forall ((a2 ty) (a3 ty))
  (forall ((x uni)) (sort a2 (Tuple2_proj_2 a3 a2 x)))))

;; Tuple2_proj_2_def
  (assert
  (forall ((a2 ty) (a3 ty))
  (forall ((u uni) (u1 uni))
  (=> (sort a2 u1) (= (Tuple2_proj_2 a3 a2 (Tuple2 a3 a2 u u1)) u1)))))

;; tuple2_inversion
  (assert
  (forall ((a2 ty) (a3 ty))
  (forall ((u uni))
  (=> (sort (tuple2 a3 a2) u)
  (= u (Tuple2 a3 a2 (Tuple2_proj_1 a3 a2 u) (Tuple2_proj_2 a3 a2 u)))))))

(declare-fun times (ty ty uni uni) uni)

;; times_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (tuple2 a2 b2)) (times b2 a2 x x1)))))

;; mem_times
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set (set (tuple21 a a)))) (x uni) (y (set (tuple21 a
  a))))
  (= (mem (tuple2 a2 (set1 (tuple2 a1 a1)))
  (Tuple2 a2 (set1 (tuple2 a1 a1)) x (t2tb4 y))
  (times (set1 (tuple2 a1 a1)) a2 s (t2tb3 t)))
  (and (mem a2 x s) (mem13 y t))))))

;; mem_times
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set (tuple21 a a))) (x uni) (y (tuple21 a a)))
  (= (mem (tuple2 a2 (tuple2 a1 a1)) (Tuple2 a2 (tuple2 a1 a1) x (t2tb5 y))
  (times (tuple2 a1 a1) a2 s (t2tb4 t))) (and (mem a2 x s) (mem12 y t))))))

;; mem_times
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set a)) (x uni) (y a))
  (= (mem (tuple2 a2 a1) (Tuple2 a2 a1 x (t2tb2 y))
  (times a1 a2 s (t2tb1 t))) (and (mem a2 x s) (mem1 y t))))))

(declare-fun t2tb348 ((set (tuple21 (set (tuple21 a a)) (set (tuple21 a
  a))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a a)) (set (tuple21 a a)))))) (sort
  (set1 (tuple2 (set1 (tuple2 a1 a1)) (set1 (tuple2 a1 a1)))) (t2tb348 x))))

(declare-fun tb2t348 (uni) (set (tuple21 (set (tuple21 a a)) (set (tuple21 a
  a)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a a)) (set (tuple21 a a))))))
  (! (= (tb2t348 (t2tb348 i)) i) :pattern ((t2tb348 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 a1 a1)) (set1 (tuple2 a1 a1)))) j)
     (= (t2tb348 (tb2t348 j)) j)) :pattern ((t2tb348 (tb2t348 j))) )))

(declare-fun t2tb349 ((tuple21 (set (tuple21 a a)) (set (tuple21 a a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a a)) (set (tuple21 a a))))) (sort
  (tuple2 (set1 (tuple2 a1 a1)) (set1 (tuple2 a1 a1))) (t2tb349 x))))

(declare-fun tb2t349 (uni) (tuple21 (set (tuple21 a a)) (set (tuple21 a a))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a a)) (set (tuple21 a a)))))
  (! (= (tb2t349 (t2tb349 i)) i) :pattern ((t2tb349 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 a1 a1)) (set1 (tuple2 a1 a1))) j)
     (= (t2tb349 (tb2t349 j)) j)) :pattern ((t2tb349 (tb2t349 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a a)))) (t (set (set (tuple21 a a))))
  (x (set (tuple21 a a))) (y (set (tuple21 a a))))
  (= (mem (tuple2 (set1 (tuple2 a1 a1)) (set1 (tuple2 a1 a1)))
  (Tuple2 (set1 (tuple2 a1 a1)) (set1 (tuple2 a1 a1)) (t2tb4 x) (t2tb4 y))
  (times (set1 (tuple2 a1 a1)) (set1 (tuple2 a1 a1)) (t2tb3 s) (t2tb3 t)))
  (and (mem13 x s) (mem13 y t)))))

(declare-fun t2tb350 ((set (tuple21 (set (tuple21 a a)) (tuple21 a a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a a)) (tuple21 a a))))) (sort
  (set1 (tuple2 (set1 (tuple2 a1 a1)) (tuple2 a1 a1))) (t2tb350 x))))

(declare-fun tb2t350 (uni) (set (tuple21 (set (tuple21 a a)) (tuple21 a a))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a a)) (tuple21 a a)))))
  (! (= (tb2t350 (t2tb350 i)) i) :pattern ((t2tb350 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 a1 a1)) (tuple2 a1 a1))) j)
     (= (t2tb350 (tb2t350 j)) j)) :pattern ((t2tb350 (tb2t350 j))) )))

(declare-fun t2tb351 ((tuple21 (set (tuple21 a a)) (tuple21 a a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a a)) (tuple21 a a)))) (sort
  (tuple2 (set1 (tuple2 a1 a1)) (tuple2 a1 a1)) (t2tb351 x))))

(declare-fun tb2t351 (uni) (tuple21 (set (tuple21 a a)) (tuple21 a a)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a a)) (tuple21 a a))))
  (! (= (tb2t351 (t2tb351 i)) i) :pattern ((t2tb351 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 a1 a1)) (tuple2 a1 a1)) j)
     (= (t2tb351 (tb2t351 j)) j)) :pattern ((t2tb351 (tb2t351 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a a)))) (t (set (tuple21 a a)))
  (x (set (tuple21 a a))) (y (tuple21 a a)))
  (= (mem (tuple2 (set1 (tuple2 a1 a1)) (tuple2 a1 a1))
  (Tuple2 (set1 (tuple2 a1 a1)) (tuple2 a1 a1) (t2tb4 x) (t2tb5 y))
  (times (tuple2 a1 a1) (set1 (tuple2 a1 a1)) (t2tb3 s) (t2tb4 t)))
  (and (mem13 x s) (mem12 y t)))))

(declare-fun t2tb352 ((set (tuple21 (set (tuple21 a a)) a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a a)) a)))) (sort
  (set1 (tuple2 (set1 (tuple2 a1 a1)) a1)) (t2tb352 x))))

(declare-fun tb2t352 (uni) (set (tuple21 (set (tuple21 a a)) a)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a a)) a))))
  (! (= (tb2t352 (t2tb352 i)) i) :pattern ((t2tb352 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 a1 a1)) a1)) j)
     (= (t2tb352 (tb2t352 j)) j)) :pattern ((t2tb352 (tb2t352 j))) )))

(declare-fun t2tb353 ((tuple21 (set (tuple21 a a)) a)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a a)) a))) (sort
  (tuple2 (set1 (tuple2 a1 a1)) a1) (t2tb353 x))))

(declare-fun tb2t353 (uni) (tuple21 (set (tuple21 a a)) a))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a a)) a)))
  (! (= (tb2t353 (t2tb353 i)) i) :pattern ((t2tb353 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 a1 a1)) a1) j)
     (= (t2tb353 (tb2t353 j)) j)) :pattern ((t2tb353 (tb2t353 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a a)))) (t (set a)) (x (set (tuple21 a a)))
  (y a))
  (= (mem (tuple2 (set1 (tuple2 a1 a1)) a1)
  (Tuple2 (set1 (tuple2 a1 a1)) a1 (t2tb4 x) (t2tb2 y))
  (times a1 (set1 (tuple2 a1 a1)) (t2tb3 s) (t2tb1 t)))
  (and (mem13 x s) (mem1 y t)))))

;; mem_times
  (assert
  (forall ((b2 ty))
  (forall ((s (set (set (tuple21 a a)))) (t uni) (x (set (tuple21 a a)))
  (y uni))
  (= (mem (tuple2 (set1 (tuple2 a1 a1)) b2)
  (Tuple2 (set1 (tuple2 a1 a1)) b2 (t2tb4 x) y)
  (times b2 (set1 (tuple2 a1 a1)) (t2tb3 s) t))
  (and (mem13 x s) (mem b2 y t))))))

(declare-fun t2tb354 ((set (tuple21 (tuple21 a a) (set (tuple21 a a))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a a) (set (tuple21 a a)))))) (sort
  (set1 (tuple2 (tuple2 a1 a1) (set1 (tuple2 a1 a1)))) (t2tb354 x))))

(declare-fun tb2t354 (uni) (set (tuple21 (tuple21 a a) (set (tuple21 a a)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a a) (set (tuple21 a a))))))
  (! (= (tb2t354 (t2tb354 i)) i) :pattern ((t2tb354 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 a1) (set1 (tuple2 a1 a1)))) j)
     (= (t2tb354 (tb2t354 j)) j)) :pattern ((t2tb354 (tb2t354 j))) )))

(declare-fun t2tb355 ((tuple21 (tuple21 a a) (set (tuple21 a a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a a) (set (tuple21 a a))))) (sort
  (tuple2 (tuple2 a1 a1) (set1 (tuple2 a1 a1))) (t2tb355 x))))

(declare-fun tb2t355 (uni) (tuple21 (tuple21 a a) (set (tuple21 a a))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a a) (set (tuple21 a a)))))
  (! (= (tb2t355 (t2tb355 i)) i) :pattern ((t2tb355 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 a1) (set1 (tuple2 a1 a1))) j)
     (= (t2tb355 (tb2t355 j)) j)) :pattern ((t2tb355 (tb2t355 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a a))) (t (set (set (tuple21 a a))))
  (x (tuple21 a a)) (y (set (tuple21 a a))))
  (= (mem (tuple2 (tuple2 a1 a1) (set1 (tuple2 a1 a1)))
  (Tuple2 (tuple2 a1 a1) (set1 (tuple2 a1 a1)) (t2tb5 x) (t2tb4 y))
  (times (set1 (tuple2 a1 a1)) (tuple2 a1 a1) (t2tb4 s) (t2tb3 t)))
  (and (mem12 x s) (mem13 y t)))))

(declare-fun t2tb356 ((tuple21 (tuple21 a a) (tuple21 a a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a a) (tuple21 a a)))) (sort
  (tuple2 (tuple2 a1 a1) (tuple2 a1 a1)) (t2tb356 x))))

(declare-fun tb2t356 (uni) (tuple21 (tuple21 a a) (tuple21 a a)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a a) (tuple21 a a))))
  (! (= (tb2t356 (t2tb356 i)) i) :pattern ((t2tb356 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 a1) (tuple2 a1 a1)) j)
     (= (t2tb356 (tb2t356 j)) j)) :pattern ((t2tb356 (tb2t356 j))) )))

(declare-fun t2tb357 ((set (tuple21 (tuple21 a a) (tuple21 a a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a a) (tuple21 a a))))) (sort
  (set1 (tuple2 (tuple2 a1 a1) (tuple2 a1 a1))) (t2tb357 x))))

(declare-fun tb2t357 (uni) (set (tuple21 (tuple21 a a) (tuple21 a a))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a a) (tuple21 a a)))))
  (! (= (tb2t357 (t2tb357 i)) i) :pattern ((t2tb357 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 a1) (tuple2 a1 a1))) j)
     (= (t2tb357 (tb2t357 j)) j)) :pattern ((t2tb357 (tb2t357 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a a))) (t (set (tuple21 a a))) (x (tuple21 a a))
  (y (tuple21 a a)))
  (= (mem (tuple2 (tuple2 a1 a1) (tuple2 a1 a1))
  (Tuple2 (tuple2 a1 a1) (tuple2 a1 a1) (t2tb5 x) (t2tb5 y))
  (times (tuple2 a1 a1) (tuple2 a1 a1) (t2tb4 s) (t2tb4 t)))
  (and (mem12 x s) (mem12 y t)))))

(declare-fun t2tb358 ((set (tuple21 (tuple21 a a) a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a a) a)))) (sort
  (set1 (tuple2 (tuple2 a1 a1) a1)) (t2tb358 x))))

(declare-fun tb2t358 (uni) (set (tuple21 (tuple21 a a) a)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a a) a))))
  (! (= (tb2t358 (t2tb358 i)) i) :pattern ((t2tb358 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 a1) a1)) j)
     (= (t2tb358 (tb2t358 j)) j)) :pattern ((t2tb358 (tb2t358 j))) )))

(declare-fun t2tb359 ((tuple21 (tuple21 a a) a)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a a) a))) (sort (tuple2 (tuple2 a1 a1) a1)
  (t2tb359 x))))

(declare-fun tb2t359 (uni) (tuple21 (tuple21 a a) a))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a a) a)))
  (! (= (tb2t359 (t2tb359 i)) i) :pattern ((t2tb359 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 a1) a1) j) (= (t2tb359 (tb2t359 j)) j)) :pattern (
  (t2tb359 (tb2t359 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a a))) (t (set a)) (x (tuple21 a a)) (y a))
  (= (mem (tuple2 (tuple2 a1 a1) a1)
  (Tuple2 (tuple2 a1 a1) a1 (t2tb5 x) (t2tb2 y))
  (times a1 (tuple2 a1 a1) (t2tb4 s) (t2tb1 t)))
  (and (mem12 x s) (mem1 y t)))))

;; mem_times
  (assert
  (forall ((b2 ty))
  (forall ((s (set (tuple21 a a))) (t uni) (x (tuple21 a a)) (y uni))
  (= (mem (tuple2 (tuple2 a1 a1) b2) (Tuple2 (tuple2 a1 a1) b2 (t2tb5 x) y)
  (times b2 (tuple2 a1 a1) (t2tb4 s) t)) (and (mem12 x s) (mem b2 y t))))))

(declare-fun t2tb360 ((set (tuple21 a (set (tuple21 a a))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (set (tuple21 a a)))))) (sort
  (set1 (tuple2 a1 (set1 (tuple2 a1 a1)))) (t2tb360 x))))

(declare-fun tb2t360 (uni) (set (tuple21 a (set (tuple21 a a)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (set (tuple21 a a))))))
  (! (= (tb2t360 (t2tb360 i)) i) :pattern ((t2tb360 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (set1 (tuple2 a1 a1)))) j)
     (= (t2tb360 (tb2t360 j)) j)) :pattern ((t2tb360 (tb2t360 j))) )))

(declare-fun t2tb361 ((tuple21 a (set (tuple21 a a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (set (tuple21 a a))))) (sort
  (tuple2 a1 (set1 (tuple2 a1 a1))) (t2tb361 x))))

(declare-fun tb2t361 (uni) (tuple21 a (set (tuple21 a a))))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (set (tuple21 a a)))))
  (! (= (tb2t361 (t2tb361 i)) i) :pattern ((t2tb361 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (set1 (tuple2 a1 a1))) j)
     (= (t2tb361 (tb2t361 j)) j)) :pattern ((t2tb361 (tb2t361 j))) )))

;; mem_times
  (assert
  (forall ((s (set a)) (t (set (set (tuple21 a a)))) (x a) (y (set (tuple21 a
  a))))
  (= (mem (tuple2 a1 (set1 (tuple2 a1 a1)))
  (Tuple2 a1 (set1 (tuple2 a1 a1)) (t2tb2 x) (t2tb4 y))
  (times (set1 (tuple2 a1 a1)) a1 (t2tb1 s) (t2tb3 t)))
  (and (mem1 x s) (mem13 y t)))))

(declare-fun t2tb362 ((set (tuple21 a (tuple21 a a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (tuple21 a a))))) (sort
  (set1 (tuple2 a1 (tuple2 a1 a1))) (t2tb362 x))))

(declare-fun tb2t362 (uni) (set (tuple21 a (tuple21 a a))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (tuple21 a a)))))
  (! (= (tb2t362 (t2tb362 i)) i) :pattern ((t2tb362 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (tuple2 a1 a1))) j)
     (= (t2tb362 (tb2t362 j)) j)) :pattern ((t2tb362 (tb2t362 j))) )))

(declare-fun t2tb363 ((tuple21 a (tuple21 a a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (tuple21 a a)))) (sort (tuple2 a1 (tuple2 a1 a1))
  (t2tb363 x))))

(declare-fun tb2t363 (uni) (tuple21 a (tuple21 a a)))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (tuple21 a a))))
  (! (= (tb2t363 (t2tb363 i)) i) :pattern ((t2tb363 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (tuple2 a1 a1)) j) (= (t2tb363 (tb2t363 j)) j)) :pattern (
  (t2tb363 (tb2t363 j))) )))

;; mem_times
  (assert
  (forall ((s (set a)) (t (set (tuple21 a a))) (x a) (y (tuple21 a a)))
  (= (mem (tuple2 a1 (tuple2 a1 a1))
  (Tuple2 a1 (tuple2 a1 a1) (t2tb2 x) (t2tb5 y))
  (times (tuple2 a1 a1) a1 (t2tb1 s) (t2tb4 t)))
  (and (mem1 x s) (mem12 y t)))))

;; mem_times
  (assert
  (forall ((s (set a)) (t (set a)) (x a) (y a))
  (= (mem12 (tb2t5 (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y)))
  (tb2t4 (times a1 a1 (t2tb1 s) (t2tb1 t)))) (and (mem1 x s) (mem1 y t)))))

;; mem_times
  (assert
  (forall ((b2 ty))
  (forall ((s (set a)) (t uni) (x a) (y uni))
  (= (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) y)
  (times b2 a1 (t2tb1 s) t)) (and (mem1 x s) (mem b2 y t))))))

;; mem_times
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (x uni) (y uni))
  (= (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) (times b2 a2 s t))
  (and (mem a2 x s) (mem b2 y t))))))

(declare-fun t2tb364 ((set (set (set (tuple21 a a))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (set (tuple21 a a)))))) (sort
  (set1 (set1 (set1 (tuple2 a1 a1)))) (t2tb364 x))))

(declare-fun tb2t364 (uni) (set (set (set (tuple21 a a)))))

;; BridgeL
  (assert
  (forall ((i (set (set (set (tuple21 a a))))))
  (! (= (tb2t364 (t2tb364 i)) i) :pattern ((t2tb364 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (set1 (tuple2 a1 a1)))) j)
     (= (t2tb364 (tb2t364 j)) j)) :pattern ((t2tb364 (tb2t364 j))) )))

;; mem_power
  (assert
  (forall ((s (set (set (tuple21 a a)))) (t (set (set (tuple21 a a)))))
  (= (mem (set1 (set1 (tuple2 a1 a1))) (t2tb3 s)
  (power (set1 (tuple2 a1 a1)) (t2tb3 t)))
  (forall ((x (set (tuple21 a a)))) (=> (mem13 x s) (mem13 x t))))))

;; mem_power
  (assert
  (forall ((s (set (tuple21 a a))) (t (set (tuple21 a a))))
  (= (mem13 s (tb2t3 (power (tuple2 a1 a1) (t2tb4 t))))
  (forall ((x (tuple21 a a))) (=> (mem12 x s) (mem12 x t))))))

(declare-fun t2tb ((set (set a))) uni)

;; t2tb_sort
  (assert (forall ((x (set (set a)))) (sort (set1 (set1 a1)) (t2tb x))))

(declare-fun tb2t (uni) (set (set a)))

;; BridgeL
  (assert
  (forall ((i (set (set a)))) (! (= (tb2t (t2tb i)) i) :pattern ((t2tb i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 a1)) j) (= (t2tb (tb2t j)) j)) :pattern ((t2tb
                                                                    (tb2t j))) )))

;; mem_power
  (assert
  (forall ((s (set a)) (t (set a)))
  (= (mem (set1 a1) (t2tb1 s) (power a1 (t2tb1 t)))
  (forall ((x a)) (=> (mem1 x s) (mem1 x t))))))

;; mem_power
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t uni))
  (and
  (=> (mem (set1 a2) s (power a2 t))
  (forall ((x uni)) (=> (mem a2 x s) (mem a2 x t))))
  (=> (forall ((x uni)) (=> (sort a2 x) (=> (mem a2 x s) (mem a2 x t)))) (mem
  (set1 a2) s (power a2 t)))))))

;; mem_non_empty_power
  (assert
  (forall ((s (set (set (tuple21 a a)))) (t (set (set (tuple21 a a)))))
  (= (mem (set1 (set1 (tuple2 a1 a1))) (t2tb3 s)
  (non_empty_power (set1 (tuple2 a1 a1)) (t2tb3 t)))
  (and (forall ((x (set (tuple21 a a)))) (=> (mem13 x s) (mem13 x t)))
  (not (infix_eqeq (set1 (tuple2 a1 a1)) (t2tb3 s)
  (empty (set1 (tuple2 a1 a1)))))))))

;; mem_non_empty_power
  (assert
  (forall ((s (set (tuple21 a a))) (t (set (tuple21 a a))))
  (= (mem13 s (tb2t3 (non_empty_power (tuple2 a1 a1) (t2tb4 t))))
  (and (forall ((x (tuple21 a a))) (=> (mem12 x s) (mem12 x t)))
  (not (infix_eqeq (tuple2 a1 a1) (t2tb4 s) (empty (tuple2 a1 a1))))))))

;; mem_non_empty_power
  (assert
  (forall ((s (set a)) (t (set a)))
  (= (mem (set1 a1) (t2tb1 s) (non_empty_power a1 (t2tb1 t)))
  (and (forall ((x a)) (=> (mem1 x s) (mem1 x t)))
  (not (infix_eqeq a1 (t2tb1 s) (empty a1)))))))

;; mem_non_empty_power
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t uni))
  (and
  (=> (mem (set1 a2) s (non_empty_power a2 t))
  (and (forall ((x uni)) (=> (mem a2 x s) (mem a2 x t)))
  (not (infix_eqeq a2 s (empty a2)))))
  (=>
  (and (forall ((x uni)) (=> (sort a2 x) (=> (mem a2 x s) (mem a2 x t))))
  (not (infix_eqeq a2 s (empty a2)))) (mem (set1 a2) s
  (non_empty_power a2 t)))))))

(declare-fun choose (ty uni) uni)

;; choose_sort
  (assert (forall ((a2 ty)) (forall ((x uni)) (sort a2 (choose a2 x)))))

(declare-fun relation (ty ty uni uni) uni)

;; relation_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (set1 (tuple2 a2 b2)))
  (relation b2 a2 x x1)))))

;; mem_relation
  (assert
  (forall ((a2 ty))
  (forall ((u uni) (v (set (set (tuple21 a a)))) (r uni))
  (and
  (=> (mem (set1 (tuple2 a2 (set1 (tuple2 a1 a1)))) r
  (relation (set1 (tuple2 a1 a1)) a2 u (t2tb3 v)))
  (forall ((x uni) (y (set (tuple21 a a))))
  (=> (mem (tuple2 a2 (set1 (tuple2 a1 a1)))
  (Tuple2 a2 (set1 (tuple2 a1 a1)) x (t2tb4 y)) r)
  (and (mem a2 x u) (mem13 y v)))))
  (=>
  (forall ((x uni) (y (set (tuple21 a a))))
  (=> (sort a2 x)
  (=> (mem (tuple2 a2 (set1 (tuple2 a1 a1)))
  (Tuple2 a2 (set1 (tuple2 a1 a1)) x (t2tb4 y)) r)
  (and (mem a2 x u) (mem13 y v))))) (mem
  (set1 (tuple2 a2 (set1 (tuple2 a1 a1)))) r
  (relation (set1 (tuple2 a1 a1)) a2 u (t2tb3 v))))))))

;; mem_relation
  (assert
  (forall ((a2 ty))
  (forall ((u uni) (v (set (tuple21 a a))) (r uni))
  (and
  (=> (mem (set1 (tuple2 a2 (tuple2 a1 a1))) r
  (relation (tuple2 a1 a1) a2 u (t2tb4 v)))
  (forall ((x uni) (y (tuple21 a a)))
  (=> (mem (tuple2 a2 (tuple2 a1 a1)) (Tuple2 a2 (tuple2 a1 a1) x (t2tb5 y))
  r) (and (mem a2 x u) (mem12 y v)))))
  (=>
  (forall ((x uni) (y (tuple21 a a)))
  (=> (sort a2 x)
  (=> (mem (tuple2 a2 (tuple2 a1 a1)) (Tuple2 a2 (tuple2 a1 a1) x (t2tb5 y))
  r) (and (mem a2 x u) (mem12 y v))))) (mem (set1 (tuple2 a2 (tuple2 a1 a1)))
  r (relation (tuple2 a1 a1) a2 u (t2tb4 v))))))))

;; mem_relation
  (assert
  (forall ((a2 ty))
  (forall ((u uni) (v (set a)) (r uni))
  (and
  (=> (mem (set1 (tuple2 a2 a1)) r (relation a1 a2 u (t2tb1 v)))
  (forall ((x uni) (y a))
  (=> (mem (tuple2 a2 a1) (Tuple2 a2 a1 x (t2tb2 y)) r)
  (and (mem a2 x u) (mem1 y v)))))
  (=>
  (forall ((x uni) (y a))
  (=> (sort a2 x)
  (=> (mem (tuple2 a2 a1) (Tuple2 a2 a1 x (t2tb2 y)) r)
  (and (mem a2 x u) (mem1 y v))))) (mem (set1 (tuple2 a2 a1)) r
  (relation a1 a2 u (t2tb1 v))))))))

(declare-fun t2tb365 ((set (set (tuple21 (set (tuple21 a a)) (set (tuple21 a
  a)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a a)) (set (tuple21 a a)))))))
  (sort (set1 (set1 (tuple2 (set1 (tuple2 a1 a1)) (set1 (tuple2 a1 a1)))))
  (t2tb365 x))))

(declare-fun tb2t365 (uni) (set (set (tuple21 (set (tuple21 a a))
  (set (tuple21 a a))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a a)) (set (tuple21 a a)))))))
  (! (= (tb2t365 (t2tb365 i)) i) :pattern ((t2tb365 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (set1 (tuple2 a1 a1)) (set1 (tuple2 a1 a1))))) j)
     (= (t2tb365 (tb2t365 j)) j)) :pattern ((t2tb365 (tb2t365 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a a)))) (v (set (set (tuple21 a a))))
  (r (set (tuple21 (set (tuple21 a a)) (set (tuple21 a a))))))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 a1)) (set1 (tuple2 a1 a1))))
  (t2tb348 r)
  (relation (set1 (tuple2 a1 a1)) (set1 (tuple2 a1 a1)) (t2tb3 u) (t2tb3 v)))
  (forall ((x (set (tuple21 a a))) (y (set (tuple21 a a))))
  (=> (mem (tuple2 (set1 (tuple2 a1 a1)) (set1 (tuple2 a1 a1)))
  (Tuple2 (set1 (tuple2 a1 a1)) (set1 (tuple2 a1 a1)) (t2tb4 x) (t2tb4 y))
  (t2tb348 r)) (and (mem13 x u) (mem13 y v)))))))

(declare-fun t2tb366 ((set (set (tuple21 (set (tuple21 a a)) (tuple21 a
  a))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a a)) (tuple21 a a)))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 a1 a1)) (tuple2 a1 a1)))) (t2tb366 x))))

(declare-fun tb2t366 (uni) (set (set (tuple21 (set (tuple21 a a)) (tuple21 a
  a)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a a)) (tuple21 a a))))))
  (! (= (tb2t366 (t2tb366 i)) i) :pattern ((t2tb366 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 a1 a1)) (tuple2 a1 a1)))) j)
     (= (t2tb366 (tb2t366 j)) j)) :pattern ((t2tb366 (tb2t366 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a a)))) (v (set (tuple21 a a)))
  (r (set (tuple21 (set (tuple21 a a)) (tuple21 a a)))))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 a1)) (tuple2 a1 a1))) (t2tb350 r)
  (relation (tuple2 a1 a1) (set1 (tuple2 a1 a1)) (t2tb3 u) (t2tb4 v)))
  (forall ((x (set (tuple21 a a))) (y (tuple21 a a)))
  (=> (mem (tuple2 (set1 (tuple2 a1 a1)) (tuple2 a1 a1))
  (Tuple2 (set1 (tuple2 a1 a1)) (tuple2 a1 a1) (t2tb4 x) (t2tb5 y))
  (t2tb350 r)) (and (mem13 x u) (mem12 y v)))))))

(declare-fun t2tb367 ((set (set (tuple21 (set (tuple21 a a)) a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a a)) a))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 a1 a1)) a1))) (t2tb367 x))))

(declare-fun tb2t367 (uni) (set (set (tuple21 (set (tuple21 a a)) a))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a a)) a)))))
  (! (= (tb2t367 (t2tb367 i)) i) :pattern ((t2tb367 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 a1 a1)) a1))) j)
     (= (t2tb367 (tb2t367 j)) j)) :pattern ((t2tb367 (tb2t367 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a a)))) (v (set a))
  (r (set (tuple21 (set (tuple21 a a)) a))))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 a1)) a1)) (t2tb352 r)
  (relation a1 (set1 (tuple2 a1 a1)) (t2tb3 u) (t2tb1 v)))
  (forall ((x (set (tuple21 a a))) (y a))
  (=> (mem (tuple2 (set1 (tuple2 a1 a1)) a1)
  (Tuple2 (set1 (tuple2 a1 a1)) a1 (t2tb4 x) (t2tb2 y)) (t2tb352 r))
  (and (mem13 x u) (mem1 y v)))))))

;; mem_relation
  (assert
  (forall ((b2 ty))
  (forall ((u (set (set (tuple21 a a)))) (v uni) (r uni))
  (and
  (=> (mem (set1 (tuple2 (set1 (tuple2 a1 a1)) b2)) r
  (relation b2 (set1 (tuple2 a1 a1)) (t2tb3 u) v))
  (forall ((x (set (tuple21 a a))) (y uni))
  (=> (mem (tuple2 (set1 (tuple2 a1 a1)) b2)
  (Tuple2 (set1 (tuple2 a1 a1)) b2 (t2tb4 x) y) r)
  (and (mem13 x u) (mem b2 y v)))))
  (=>
  (forall ((x (set (tuple21 a a))) (y uni))
  (=> (sort b2 y)
  (=> (mem (tuple2 (set1 (tuple2 a1 a1)) b2)
  (Tuple2 (set1 (tuple2 a1 a1)) b2 (t2tb4 x) y) r)
  (and (mem13 x u) (mem b2 y v))))) (mem
  (set1 (tuple2 (set1 (tuple2 a1 a1)) b2)) r
  (relation b2 (set1 (tuple2 a1 a1)) (t2tb3 u) v)))))))

(declare-fun t2tb368 ((set (set (tuple21 (tuple21 a a) (set (tuple21 a
  a)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a a) (set (tuple21 a a))))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 a1) (set1 (tuple2 a1 a1))))) (t2tb368 x))))

(declare-fun tb2t368 (uni) (set (set (tuple21 (tuple21 a a) (set (tuple21 a
  a))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a a) (set (tuple21 a a)))))))
  (! (= (tb2t368 (t2tb368 i)) i) :pattern ((t2tb368 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 a1) (set1 (tuple2 a1 a1))))) j)
     (= (t2tb368 (tb2t368 j)) j)) :pattern ((t2tb368 (tb2t368 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a a))) (v (set (set (tuple21 a a))))
  (r (set (tuple21 (tuple21 a a) (set (tuple21 a a))))))
  (= (mem (set1 (tuple2 (tuple2 a1 a1) (set1 (tuple2 a1 a1)))) (t2tb354 r)
  (relation (set1 (tuple2 a1 a1)) (tuple2 a1 a1) (t2tb4 u) (t2tb3 v)))
  (forall ((x (tuple21 a a)) (y (set (tuple21 a a))))
  (=> (mem (tuple2 (tuple2 a1 a1) (set1 (tuple2 a1 a1)))
  (Tuple2 (tuple2 a1 a1) (set1 (tuple2 a1 a1)) (t2tb5 x) (t2tb4 y))
  (t2tb354 r)) (and (mem12 x u) (mem13 y v)))))))

(declare-fun t2tb369 ((set (set (tuple21 (tuple21 a a) (tuple21 a a))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a a) (tuple21 a a)))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 a1) (tuple2 a1 a1)))) (t2tb369 x))))

(declare-fun tb2t369 (uni) (set (set (tuple21 (tuple21 a a) (tuple21 a a)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a a) (tuple21 a a))))))
  (! (= (tb2t369 (t2tb369 i)) i) :pattern ((t2tb369 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 a1) (tuple2 a1 a1)))) j)
     (= (t2tb369 (tb2t369 j)) j)) :pattern ((t2tb369 (tb2t369 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a a))) (v (set (tuple21 a a)))
  (r (set (tuple21 (tuple21 a a) (tuple21 a a)))))
  (= (mem (set1 (tuple2 (tuple2 a1 a1) (tuple2 a1 a1))) (t2tb357 r)
  (relation (tuple2 a1 a1) (tuple2 a1 a1) (t2tb4 u) (t2tb4 v)))
  (forall ((x (tuple21 a a)) (y (tuple21 a a)))
  (=> (mem (tuple2 (tuple2 a1 a1) (tuple2 a1 a1))
  (Tuple2 (tuple2 a1 a1) (tuple2 a1 a1) (t2tb5 x) (t2tb5 y)) (t2tb357 r))
  (and (mem12 x u) (mem12 y v)))))))

(declare-fun t2tb370 ((set (set (tuple21 (tuple21 a a) a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a a) a))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 a1) a1))) (t2tb370 x))))

(declare-fun tb2t370 (uni) (set (set (tuple21 (tuple21 a a) a))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a a) a)))))
  (! (= (tb2t370 (t2tb370 i)) i) :pattern ((t2tb370 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 a1) a1))) j)
     (= (t2tb370 (tb2t370 j)) j)) :pattern ((t2tb370 (tb2t370 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a a))) (v (set a)) (r (set (tuple21 (tuple21 a a)
  a))))
  (= (mem (set1 (tuple2 (tuple2 a1 a1) a1)) (t2tb358 r)
  (relation a1 (tuple2 a1 a1) (t2tb4 u) (t2tb1 v)))
  (forall ((x (tuple21 a a)) (y a))
  (=> (mem (tuple2 (tuple2 a1 a1) a1)
  (Tuple2 (tuple2 a1 a1) a1 (t2tb5 x) (t2tb2 y)) (t2tb358 r))
  (and (mem12 x u) (mem1 y v)))))))

;; mem_relation
  (assert
  (forall ((b2 ty))
  (forall ((u (set (tuple21 a a))) (v uni) (r uni))
  (and
  (=> (mem (set1 (tuple2 (tuple2 a1 a1) b2)) r
  (relation b2 (tuple2 a1 a1) (t2tb4 u) v))
  (forall ((x (tuple21 a a)) (y uni))
  (=> (mem (tuple2 (tuple2 a1 a1) b2) (Tuple2 (tuple2 a1 a1) b2 (t2tb5 x) y)
  r) (and (mem12 x u) (mem b2 y v)))))
  (=>
  (forall ((x (tuple21 a a)) (y uni))
  (=> (sort b2 y)
  (=> (mem (tuple2 (tuple2 a1 a1) b2) (Tuple2 (tuple2 a1 a1) b2 (t2tb5 x) y)
  r) (and (mem12 x u) (mem b2 y v))))) (mem (set1 (tuple2 (tuple2 a1 a1) b2))
  r (relation b2 (tuple2 a1 a1) (t2tb4 u) v)))))))

(declare-fun t2tb371 ((set (set (tuple21 a (set (tuple21 a a)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 a (set (tuple21 a a))))))) (sort
  (set1 (set1 (tuple2 a1 (set1 (tuple2 a1 a1))))) (t2tb371 x))))

(declare-fun tb2t371 (uni) (set (set (tuple21 a (set (tuple21 a a))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 a (set (tuple21 a a)))))))
  (! (= (tb2t371 (t2tb371 i)) i) :pattern ((t2tb371 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 a1 (set1 (tuple2 a1 a1))))) j)
     (= (t2tb371 (tb2t371 j)) j)) :pattern ((t2tb371 (tb2t371 j))) )))

;; mem_relation
  (assert
  (forall ((u (set a)) (v (set (set (tuple21 a a)))) (r (set (tuple21 a
  (set (tuple21 a a))))))
  (= (mem (set1 (tuple2 a1 (set1 (tuple2 a1 a1)))) (t2tb360 r)
  (relation (set1 (tuple2 a1 a1)) a1 (t2tb1 u) (t2tb3 v)))
  (forall ((x a) (y (set (tuple21 a a))))
  (=> (mem (tuple2 a1 (set1 (tuple2 a1 a1)))
  (Tuple2 a1 (set1 (tuple2 a1 a1)) (t2tb2 x) (t2tb4 y)) (t2tb360 r))
  (and (mem1 x u) (mem13 y v)))))))

(declare-fun t2tb372 ((set (set (tuple21 a (tuple21 a a))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 a (tuple21 a a)))))) (sort
  (set1 (set1 (tuple2 a1 (tuple2 a1 a1)))) (t2tb372 x))))

(declare-fun tb2t372 (uni) (set (set (tuple21 a (tuple21 a a)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 a (tuple21 a a))))))
  (! (= (tb2t372 (t2tb372 i)) i) :pattern ((t2tb372 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 a1 (tuple2 a1 a1)))) j)
     (= (t2tb372 (tb2t372 j)) j)) :pattern ((t2tb372 (tb2t372 j))) )))

;; mem_relation
  (assert
  (forall ((u (set a)) (v (set (tuple21 a a))) (r (set (tuple21 a (tuple21 a
  a)))))
  (= (mem (set1 (tuple2 a1 (tuple2 a1 a1))) (t2tb362 r)
  (relation (tuple2 a1 a1) a1 (t2tb1 u) (t2tb4 v)))
  (forall ((x a) (y (tuple21 a a)))
  (=> (mem (tuple2 a1 (tuple2 a1 a1))
  (Tuple2 a1 (tuple2 a1 a1) (t2tb2 x) (t2tb5 y)) (t2tb362 r))
  (and (mem1 x u) (mem12 y v)))))))

;; mem_relation
  (assert
  (forall ((u (set a)) (v (set a)) (r (set (tuple21 a a))))
  (= (mem13 r (tb2t3 (relation a1 a1 (t2tb1 u) (t2tb1 v))))
  (forall ((x a) (y a))
  (=> (mem12 (tb2t5 (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y))) r)
  (and (mem1 x u) (mem1 y v)))))))

;; mem_relation
  (assert
  (forall ((b2 ty))
  (forall ((u (set a)) (v uni) (r uni))
  (and
  (=> (mem (set1 (tuple2 a1 b2)) r (relation b2 a1 (t2tb1 u) v))
  (forall ((x a) (y uni))
  (=> (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) y) r)
  (and (mem1 x u) (mem b2 y v)))))
  (=>
  (forall ((x a) (y uni))
  (=> (sort b2 y)
  (=> (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) y) r)
  (and (mem1 x u) (mem b2 y v))))) (mem (set1 (tuple2 a1 b2)) r
  (relation b2 a1 (t2tb1 u) v)))))))

;; mem_relation
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((u uni) (v uni) (r uni))
  (and
  (=> (mem (set1 (tuple2 a2 b2)) r (relation b2 a2 u v))
  (forall ((x uni) (y uni))
  (=> (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) r)
  (and (mem a2 x u) (mem b2 y v)))))
  (=>
  (forall ((x uni) (y uni))
  (=> (sort a2 x)
  (=> (sort b2 y)
  (=> (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) r)
  (and (mem a2 x u) (mem b2 y v)))))) (mem (set1 (tuple2 a2 b2)) r
  (relation b2 a2 u v)))))))

(declare-fun inverse (ty ty uni) uni)

;; inverse_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni)) (sort (set1 (tuple2 b2 a2)) (inverse b2 a2 x)))))

;; mem_inverse
  (assert
  (forall ((p (set (tuple21 a a))) (x a) (y a))
  (= (mem12 (tb2t5 (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y)))
  (tb2t4 (inverse a1 a1 (t2tb4 p)))) (mem12
  (tb2t5 (Tuple2 a1 a1 (t2tb2 y) (t2tb2 x))) p))))

;; mem_inverse
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((p uni) (x uni) (y uni))
  (= (mem (tuple2 b2 a2) (Tuple2 b2 a2 x y) (inverse b2 a2 p)) (mem
  (tuple2 a2 b2) (Tuple2 a2 b2 y x) p)))))

(declare-fun dom (ty ty uni) uni)

;; dom_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni)) (sort (set1 a2) (dom b2 a2 x)))))

;; mem_dom
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (x (set (tuple21 a a))))
  (and
  (=> (mem13 x (tb2t3 (dom b2 (set1 (tuple2 a1 a1)) p)))
  (exists ((b3 uni))
  (and (sort b2 b3) (mem (tuple2 (set1 (tuple2 a1 a1)) b2)
  (Tuple2 (set1 (tuple2 a1 a1)) b2 (t2tb4 x) b3) p))))
  (=>
  (exists ((b3 uni)) (mem (tuple2 (set1 (tuple2 a1 a1)) b2)
  (Tuple2 (set1 (tuple2 a1 a1)) b2 (t2tb4 x) b3) p)) (mem13 x
  (tb2t3 (dom b2 (set1 (tuple2 a1 a1)) p))))))))

;; mem_dom
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (x (tuple21 a a)))
  (and
  (=> (mem12 x (tb2t4 (dom b2 (tuple2 a1 a1) p)))
  (exists ((b3 uni))
  (and (sort b2 b3) (mem (tuple2 (tuple2 a1 a1) b2)
  (Tuple2 (tuple2 a1 a1) b2 (t2tb5 x) b3) p))))
  (=>
  (exists ((b3 uni)) (mem (tuple2 (tuple2 a1 a1) b2)
  (Tuple2 (tuple2 a1 a1) b2 (t2tb5 x) b3) p)) (mem12 x
  (tb2t4 (dom b2 (tuple2 a1 a1) p))))))))

;; mem_dom
  (assert
  (forall ((p (set (tuple21 a a))) (x a))
  (= (mem1 x (tb2t1 (dom a1 a1 (t2tb4 p))))
  (exists ((b2 a)) (mem12 (tb2t5 (Tuple2 a1 a1 (t2tb2 x) (t2tb2 b2))) p)))))

;; mem_dom
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (x a))
  (and
  (=> (mem1 x (tb2t1 (dom b2 a1 p)))
  (exists ((b3 uni))
  (and (sort b2 b3) (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) b3) p))))
  (=> (exists ((b3 uni)) (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) b3) p))
  (mem1 x (tb2t1 (dom b2 a1 p))))))))

;; mem_dom
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((p uni) (x uni))
  (and
  (=> (mem a2 x (dom b2 a2 p))
  (exists ((b3 uni))
  (and (sort b2 b3) (mem (tuple2 a2 b2) (Tuple2 a2 b2 x b3) p))))
  (=> (exists ((b3 uni)) (mem (tuple2 a2 b2) (Tuple2 a2 b2 x b3) p)) (mem a2
  x (dom b2 a2 p)))))))

(declare-fun ran (ty ty uni) uni)

;; ran_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni)) (sort (set1 b2) (ran b2 a2 x)))))

;; mem_ran
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (x (set (tuple21 a a))))
  (and
  (=> (mem13 x (tb2t3 (ran (set1 (tuple2 a1 a1)) a2 p)))
  (exists ((a3 uni))
  (and (sort a2 a3) (mem (tuple2 a2 (set1 (tuple2 a1 a1)))
  (Tuple2 a2 (set1 (tuple2 a1 a1)) a3 (t2tb4 x)) p))))
  (=>
  (exists ((a3 uni)) (mem (tuple2 a2 (set1 (tuple2 a1 a1)))
  (Tuple2 a2 (set1 (tuple2 a1 a1)) a3 (t2tb4 x)) p)) (mem13 x
  (tb2t3 (ran (set1 (tuple2 a1 a1)) a2 p))))))))

;; mem_ran
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (x (tuple21 a a)))
  (and
  (=> (mem12 x (tb2t4 (ran (tuple2 a1 a1) a2 p)))
  (exists ((a3 uni))
  (and (sort a2 a3) (mem (tuple2 a2 (tuple2 a1 a1))
  (Tuple2 a2 (tuple2 a1 a1) a3 (t2tb5 x)) p))))
  (=>
  (exists ((a3 uni)) (mem (tuple2 a2 (tuple2 a1 a1))
  (Tuple2 a2 (tuple2 a1 a1) a3 (t2tb5 x)) p)) (mem12 x
  (tb2t4 (ran (tuple2 a1 a1) a2 p))))))))

;; mem_ran
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (x a))
  (and
  (=> (mem1 x (tb2t1 (ran a1 a2 p)))
  (exists ((a3 uni))
  (and (sort a2 a3) (mem (tuple2 a2 a1) (Tuple2 a2 a1 a3 (t2tb2 x)) p))))
  (=> (exists ((a3 uni)) (mem (tuple2 a2 a1) (Tuple2 a2 a1 a3 (t2tb2 x)) p))
  (mem1 x (tb2t1 (ran a1 a2 p))))))))

;; mem_ran
  (assert
  (forall ((p (set (tuple21 a a))) (x a))
  (= (mem1 x (tb2t1 (ran a1 a1 (t2tb4 p))))
  (exists ((a2 a)) (mem12 (tb2t5 (Tuple2 a1 a1 (t2tb2 a2) (t2tb2 x))) p)))))

;; mem_ran
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((p uni) (x uni))
  (and
  (=> (mem b2 x (ran b2 a2 p))
  (exists ((a3 uni))
  (and (sort a2 a3) (mem (tuple2 a2 b2) (Tuple2 a2 b2 a3 x) p))))
  (=> (exists ((a3 uni)) (mem (tuple2 a2 b2) (Tuple2 a2 b2 a3 x) p)) (mem b2
  x (ran b2 a2 p)))))))

(declare-fun semicolon (ty ty ty uni uni) uni)

;; semicolon_sort
  (assert
  (forall ((a2 ty) (b2 ty) (c2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (tuple2 a2 c2))
  (semicolon c2 b2 a2 x x1)))))

;; mem_semicolon
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (q (set (tuple21 a a))) (x uni) (y a))
  (= (mem (tuple2 a2 a1) (Tuple2 a2 a1 x (t2tb2 y))
  (semicolon a1 a1 a2 p (t2tb4 q)))
  (exists ((b2 a))
  (and (mem (tuple2 a2 a1) (Tuple2 a2 a1 x (t2tb2 b2)) p) (mem12
  (tb2t5 (Tuple2 a1 a1 (t2tb2 b2) (t2tb2 y))) q)))))))

;; mem_semicolon
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (q uni) (x a) (y a))
  (and
  (=> (mem12 (tb2t5 (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y)))
  (tb2t4 (semicolon a1 b2 a1 p q)))
  (exists ((b3 uni))
  (and (sort b2 b3)
  (and (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) b3) p) (mem (tuple2 b2 a1)
  (Tuple2 b2 a1 b3 (t2tb2 y)) q)))))
  (=>
  (exists ((b3 uni))
  (and (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) b3) p) (mem (tuple2 b2 a1)
  (Tuple2 b2 a1 b3 (t2tb2 y)) q))) (mem12
  (tb2t5 (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y)))
  (tb2t4 (semicolon a1 b2 a1 p q))))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 a a))) (q (set (tuple21 a a))) (x a) (y a))
  (= (mem12 (tb2t5 (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y)))
  (tb2t4 (semicolon a1 a1 a1 (t2tb4 p) (t2tb4 q))))
  (exists ((b2 a))
  (and (mem12 (tb2t5 (Tuple2 a1 a1 (t2tb2 x) (t2tb2 b2))) p) (mem12
  (tb2t5 (Tuple2 a1 a1 (t2tb2 b2) (t2tb2 y))) q))))))

;; mem_semicolon
  (assert
  (forall ((c2 ty))
  (forall ((p (set (tuple21 a a))) (q uni) (x a) (y uni))
  (= (mem (tuple2 a1 c2) (Tuple2 a1 c2 (t2tb2 x) y)
  (semicolon c2 a1 a1 (t2tb4 p) q))
  (exists ((b2 a))
  (and (mem12 (tb2t5 (Tuple2 a1 a1 (t2tb2 x) (t2tb2 b2))) p) (mem
  (tuple2 a1 c2) (Tuple2 a1 c2 (t2tb2 b2) y) q)))))))

;; mem_semicolon
  (assert
  (forall ((a2 ty) (b2 ty) (c2 ty))
  (forall ((p uni) (q uni) (x uni) (y uni))
  (and
  (=> (mem (tuple2 a2 c2) (Tuple2 a2 c2 x y) (semicolon c2 b2 a2 p q))
  (exists ((b3 uni))
  (and (sort b2 b3)
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x b3) p) (mem (tuple2 b2 c2)
  (Tuple2 b2 c2 b3 y) q)))))
  (=>
  (exists ((b3 uni))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x b3) p) (mem (tuple2 b2 c2)
  (Tuple2 b2 c2 b3 y) q))) (mem (tuple2 a2 c2) (Tuple2 a2 c2 x y)
  (semicolon c2 b2 a2 p q)))))))

(declare-fun semicolon_back (ty ty ty uni uni) uni)

;; semicolon_back_sort
  (assert
  (forall ((a2 ty) (b2 ty) (c2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (tuple2 a2 c2))
  (semicolon_back c2 b2 a2 x x1)))))

;; semicolon_back
  (assert
  (forall ((a2 ty) (b2 ty) (c2 ty))
  (forall ((p uni) (q uni))
  (= (semicolon_back c2 b2 a2 q p) (semicolon c2 b2 a2 p q)))))

(declare-fun id (ty uni) uni)

;; id_sort
  (assert
  (forall ((a2 ty))
  (forall ((x uni)) (sort (set1 (tuple2 a2 a2)) (id a2 x)))))

(declare-fun id1 ((set a)) (set (tuple21 a a)))

;; mem_id
  (assert
  (forall ((u (set (set (tuple21 a a)))) (x (set (tuple21 a a)))
  (y (set (tuple21 a a))))
  (= (mem (tuple2 (set1 (tuple2 a1 a1)) (set1 (tuple2 a1 a1)))
  (Tuple2 (set1 (tuple2 a1 a1)) (set1 (tuple2 a1 a1)) (t2tb4 x) (t2tb4 y))
  (id (set1 (tuple2 a1 a1)) (t2tb3 u))) (and (mem13 x u) (= x y)))))

;; mem_id
  (assert
  (forall ((u (set (tuple21 a a))) (x (tuple21 a a)) (y (tuple21 a a)))
  (= (mem (tuple2 (tuple2 a1 a1) (tuple2 a1 a1))
  (Tuple2 (tuple2 a1 a1) (tuple2 a1 a1) (t2tb5 x) (t2tb5 y))
  (id (tuple2 a1 a1) (t2tb4 u))) (and (mem12 x u) (= x y)))))

;; mem_id
  (assert
  (forall ((u (set a)) (x a) (y a))
  (= (mem12 (tb2t5 (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y))) (id1 u))
  (and (mem1 x u) (= x y)))))

;; mem_id
  (assert
  (forall ((a2 ty))
  (forall ((u uni) (x uni) (y uni))
  (=> (sort a2 x)
  (=> (sort a2 y)
  (= (mem (tuple2 a2 a2) (Tuple2 a2 a2 x y) (id a2 u))
  (and (mem a2 x u) (= x y))))))))

(declare-fun domain_restriction (ty ty uni uni) uni)

;; domain_restriction_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (tuple2 a2 b2))
  (domain_restriction b2 a2 x x1)))))

;; mem_domain_restriction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (set (tuple21 a a)))) (x (set (tuple21 a a)))
  (y uni))
  (= (mem (tuple2 (set1 (tuple2 a1 a1)) b2)
  (Tuple2 (set1 (tuple2 a1 a1)) b2 (t2tb4 x) y)
  (domain_restriction b2 (set1 (tuple2 a1 a1)) (t2tb3 s) p))
  (and (mem (tuple2 (set1 (tuple2 a1 a1)) b2)
  (Tuple2 (set1 (tuple2 a1 a1)) b2 (t2tb4 x) y) p) (mem13 x s))))))

;; mem_domain_restriction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (tuple21 a a))) (x (tuple21 a a)) (y uni))
  (= (mem (tuple2 (tuple2 a1 a1) b2) (Tuple2 (tuple2 a1 a1) b2 (t2tb5 x) y)
  (domain_restriction b2 (tuple2 a1 a1) (t2tb4 s) p))
  (and (mem (tuple2 (tuple2 a1 a1) b2) (Tuple2 (tuple2 a1 a1) b2 (t2tb5 x) y)
  p) (mem12 x s))))))

;; mem_domain_restriction
  (assert
  (forall ((p (set (tuple21 a a))) (s (set a)) (x a) (y a))
  (= (mem12 (tb2t5 (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y)))
  (tb2t4 (domain_restriction a1 a1 (t2tb1 s) (t2tb4 p))))
  (and (mem12 (tb2t5 (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y))) p) (mem1 x s)))))

;; mem_domain_restriction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set a)) (x a) (y uni))
  (= (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) y)
  (domain_restriction b2 a1 (t2tb1 s) p))
  (and (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) y) p) (mem1 x s))))))

;; mem_domain_restriction
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((p uni) (s uni) (x uni) (y uni))
  (= (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) (domain_restriction b2 a2 s p))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) p) (mem a2 x s))))))

(declare-fun range_restriction (ty ty uni uni) uni)

;; range_restriction_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (tuple2 a2 b2))
  (range_restriction b2 a2 x x1)))))

;; mem_range_restriction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (set (tuple21 a a)))) (x uni) (y (set (tuple21 a
  a))))
  (= (mem (tuple2 a2 (set1 (tuple2 a1 a1)))
  (Tuple2 a2 (set1 (tuple2 a1 a1)) x (t2tb4 y))
  (range_restriction (set1 (tuple2 a1 a1)) a2 p (t2tb3 t)))
  (and (mem (tuple2 a2 (set1 (tuple2 a1 a1)))
  (Tuple2 a2 (set1 (tuple2 a1 a1)) x (t2tb4 y)) p) (mem13 y t))))))

;; mem_range_restriction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (tuple21 a a))) (x uni) (y (tuple21 a a)))
  (= (mem (tuple2 a2 (tuple2 a1 a1)) (Tuple2 a2 (tuple2 a1 a1) x (t2tb5 y))
  (range_restriction (tuple2 a1 a1) a2 p (t2tb4 t)))
  (and (mem (tuple2 a2 (tuple2 a1 a1)) (Tuple2 a2 (tuple2 a1 a1) x (t2tb5 y))
  p) (mem12 y t))))))

;; mem_range_restriction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set a)) (x uni) (y a))
  (= (mem (tuple2 a2 a1) (Tuple2 a2 a1 x (t2tb2 y))
  (range_restriction a1 a2 p (t2tb1 t)))
  (and (mem (tuple2 a2 a1) (Tuple2 a2 a1 x (t2tb2 y)) p) (mem1 y t))))))

;; mem_range_restriction
  (assert
  (forall ((p (set (tuple21 a a))) (t (set a)) (x a) (y a))
  (= (mem12 (tb2t5 (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y)))
  (tb2t4 (range_restriction a1 a1 (t2tb4 p) (t2tb1 t))))
  (and (mem12 (tb2t5 (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y))) p) (mem1 y t)))))

;; mem_range_restriction
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((p uni) (t uni) (x uni) (y uni))
  (= (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) (range_restriction b2 a2 p t))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) p) (mem b2 y t))))))

(declare-fun domain_substraction (ty ty uni uni) uni)

;; domain_substraction_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (tuple2 a2 b2))
  (domain_substraction b2 a2 x x1)))))

;; mem_domain_substraction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (set (tuple21 a a)))) (x (set (tuple21 a a)))
  (y uni))
  (= (mem (tuple2 (set1 (tuple2 a1 a1)) b2)
  (Tuple2 (set1 (tuple2 a1 a1)) b2 (t2tb4 x) y)
  (domain_substraction b2 (set1 (tuple2 a1 a1)) (t2tb3 s) p))
  (and (mem (tuple2 (set1 (tuple2 a1 a1)) b2)
  (Tuple2 (set1 (tuple2 a1 a1)) b2 (t2tb4 x) y) p) (not (mem13 x s)))))))

;; mem_domain_substraction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (tuple21 a a))) (x (tuple21 a a)) (y uni))
  (= (mem (tuple2 (tuple2 a1 a1) b2) (Tuple2 (tuple2 a1 a1) b2 (t2tb5 x) y)
  (domain_substraction b2 (tuple2 a1 a1) (t2tb4 s) p))
  (and (mem (tuple2 (tuple2 a1 a1) b2) (Tuple2 (tuple2 a1 a1) b2 (t2tb5 x) y)
  p) (not (mem12 x s)))))))

;; mem_domain_substraction
  (assert
  (forall ((p (set (tuple21 a a))) (s (set a)) (x a) (y a))
  (= (mem12 (tb2t5 (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y)))
  (tb2t4 (domain_substraction a1 a1 (t2tb1 s) (t2tb4 p))))
  (and (mem12 (tb2t5 (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y))) p) (not (mem1 x s))))))

;; mem_domain_substraction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set a)) (x a) (y uni))
  (= (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) y)
  (domain_substraction b2 a1 (t2tb1 s) p))
  (and (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) y) p) (not (mem1 x s)))))))

;; mem_domain_substraction
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((p uni) (s uni) (x uni) (y uni))
  (= (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) (domain_substraction b2 a2 s p))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) p) (not (mem a2 x s)))))))

(declare-fun range_substraction (ty ty uni uni) uni)

;; range_substraction_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (tuple2 a2 b2))
  (range_substraction b2 a2 x x1)))))

;; mem_range_substraction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (set (tuple21 a a)))) (x uni) (y (set (tuple21 a
  a))))
  (= (mem (tuple2 a2 (set1 (tuple2 a1 a1)))
  (Tuple2 a2 (set1 (tuple2 a1 a1)) x (t2tb4 y))
  (range_substraction (set1 (tuple2 a1 a1)) a2 p (t2tb3 t)))
  (and (mem (tuple2 a2 (set1 (tuple2 a1 a1)))
  (Tuple2 a2 (set1 (tuple2 a1 a1)) x (t2tb4 y)) p) (not (mem13 y t)))))))

;; mem_range_substraction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (tuple21 a a))) (x uni) (y (tuple21 a a)))
  (= (mem (tuple2 a2 (tuple2 a1 a1)) (Tuple2 a2 (tuple2 a1 a1) x (t2tb5 y))
  (range_substraction (tuple2 a1 a1) a2 p (t2tb4 t)))
  (and (mem (tuple2 a2 (tuple2 a1 a1)) (Tuple2 a2 (tuple2 a1 a1) x (t2tb5 y))
  p) (not (mem12 y t)))))))

;; mem_range_substraction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set a)) (x uni) (y a))
  (= (mem (tuple2 a2 a1) (Tuple2 a2 a1 x (t2tb2 y))
  (range_substraction a1 a2 p (t2tb1 t)))
  (and (mem (tuple2 a2 a1) (Tuple2 a2 a1 x (t2tb2 y)) p) (not (mem1 y t)))))))

;; mem_range_substraction
  (assert
  (forall ((p (set (tuple21 a a))) (t (set a)) (x a) (y a))
  (= (mem12 (tb2t5 (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y)))
  (tb2t4 (range_substraction a1 a1 (t2tb4 p) (t2tb1 t))))
  (and (mem12 (tb2t5 (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y))) p) (not (mem1 y t))))))

;; mem_range_substraction
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((p uni) (t uni) (x uni) (y uni))
  (= (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) (range_substraction b2 a2 p t))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) p) (not (mem b2 y t)))))))

(declare-fun image (ty ty uni uni) uni)

;; image_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 b2) (image b2 a2 x x1)))))

;; mem_image
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (w uni) (x (set (tuple21 a a))))
  (and
  (=> (mem13 x (tb2t3 (image (set1 (tuple2 a1 a1)) a2 p w)))
  (exists ((a3 uni))
  (and (sort a2 a3)
  (and (mem a2 a3 w) (mem (tuple2 a2 (set1 (tuple2 a1 a1)))
  (Tuple2 a2 (set1 (tuple2 a1 a1)) a3 (t2tb4 x)) p)))))
  (=>
  (exists ((a3 uni))
  (and (mem a2 a3 w) (mem (tuple2 a2 (set1 (tuple2 a1 a1)))
  (Tuple2 a2 (set1 (tuple2 a1 a1)) a3 (t2tb4 x)) p))) (mem13 x
  (tb2t3 (image (set1 (tuple2 a1 a1)) a2 p w))))))))

;; mem_image
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (w uni) (x (tuple21 a a)))
  (and
  (=> (mem12 x (tb2t4 (image (tuple2 a1 a1) a2 p w)))
  (exists ((a3 uni))
  (and (sort a2 a3)
  (and (mem a2 a3 w) (mem (tuple2 a2 (tuple2 a1 a1))
  (Tuple2 a2 (tuple2 a1 a1) a3 (t2tb5 x)) p)))))
  (=>
  (exists ((a3 uni))
  (and (mem a2 a3 w) (mem (tuple2 a2 (tuple2 a1 a1))
  (Tuple2 a2 (tuple2 a1 a1) a3 (t2tb5 x)) p))) (mem12 x
  (tb2t4 (image (tuple2 a1 a1) a2 p w))))))))

;; mem_image
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (w uni) (x a))
  (and
  (=> (mem1 x (tb2t1 (image a1 a2 p w)))
  (exists ((a3 uni))
  (and (sort a2 a3)
  (and (mem a2 a3 w) (mem (tuple2 a2 a1) (Tuple2 a2 a1 a3 (t2tb2 x)) p)))))
  (=>
  (exists ((a3 uni))
  (and (mem a2 a3 w) (mem (tuple2 a2 a1) (Tuple2 a2 a1 a3 (t2tb2 x)) p)))
  (mem1 x (tb2t1 (image a1 a2 p w))))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a a)) (set (tuple21 a a)))))
  (w (set (set (tuple21 a a)))) (x (set (tuple21 a a))))
  (= (mem13 x
  (tb2t3
  (image (set1 (tuple2 a1 a1)) (set1 (tuple2 a1 a1)) (t2tb348 p) (t2tb3 w))))
  (exists ((a2 (set (tuple21 a a))))
  (and (mem13 a2 w) (mem (tuple2 (set1 (tuple2 a1 a1)) (set1 (tuple2 a1 a1)))
  (Tuple2 (set1 (tuple2 a1 a1)) (set1 (tuple2 a1 a1)) (t2tb4 a2) (t2tb4 x))
  (t2tb348 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a a)) (tuple21 a a))))
  (w (set (set (tuple21 a a)))) (x (tuple21 a a)))
  (= (mem12 x
  (tb2t4 (image (tuple2 a1 a1) (set1 (tuple2 a1 a1)) (t2tb350 p) (t2tb3 w))))
  (exists ((a2 (set (tuple21 a a))))
  (and (mem13 a2 w) (mem (tuple2 (set1 (tuple2 a1 a1)) (tuple2 a1 a1))
  (Tuple2 (set1 (tuple2 a1 a1)) (tuple2 a1 a1) (t2tb4 a2) (t2tb5 x))
  (t2tb350 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a a)) a))) (w (set (set (tuple21 a
  a)))) (x a))
  (= (mem1 x (tb2t1 (image a1 (set1 (tuple2 a1 a1)) (t2tb352 p) (t2tb3 w))))
  (exists ((a2 (set (tuple21 a a))))
  (and (mem13 a2 w) (mem (tuple2 (set1 (tuple2 a1 a1)) a1)
  (Tuple2 (set1 (tuple2 a1 a1)) a1 (t2tb4 a2) (t2tb2 x)) (t2tb352 p)))))))

;; mem_image
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (w (set (set (tuple21 a a)))) (x uni))
  (= (mem b2 x (image b2 (set1 (tuple2 a1 a1)) p (t2tb3 w)))
  (exists ((a2 (set (tuple21 a a))))
  (and (mem13 a2 w) (mem (tuple2 (set1 (tuple2 a1 a1)) b2)
  (Tuple2 (set1 (tuple2 a1 a1)) b2 (t2tb4 a2) x) p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a a) (set (tuple21 a a)))))
  (w (set (tuple21 a a))) (x (set (tuple21 a a))))
  (= (mem13 x
  (tb2t3 (image (set1 (tuple2 a1 a1)) (tuple2 a1 a1) (t2tb354 p) (t2tb4 w))))
  (exists ((a2 (tuple21 a a)))
  (and (mem12 a2 w) (mem (tuple2 (tuple2 a1 a1) (set1 (tuple2 a1 a1)))
  (Tuple2 (tuple2 a1 a1) (set1 (tuple2 a1 a1)) (t2tb5 a2) (t2tb4 x))
  (t2tb354 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a a) (tuple21 a a)))) (w (set (tuple21 a
  a))) (x (tuple21 a a)))
  (= (mem12 x
  (tb2t4 (image (tuple2 a1 a1) (tuple2 a1 a1) (t2tb357 p) (t2tb4 w))))
  (exists ((a2 (tuple21 a a)))
  (and (mem12 a2 w) (mem (tuple2 (tuple2 a1 a1) (tuple2 a1 a1))
  (Tuple2 (tuple2 a1 a1) (tuple2 a1 a1) (t2tb5 a2) (t2tb5 x)) (t2tb357 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a a) a))) (w (set (tuple21 a a))) (x a))
  (= (mem1 x (tb2t1 (image a1 (tuple2 a1 a1) (t2tb358 p) (t2tb4 w))))
  (exists ((a2 (tuple21 a a)))
  (and (mem12 a2 w) (mem (tuple2 (tuple2 a1 a1) a1)
  (Tuple2 (tuple2 a1 a1) a1 (t2tb5 a2) (t2tb2 x)) (t2tb358 p)))))))

;; mem_image
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (w (set (tuple21 a a))) (x uni))
  (= (mem b2 x (image b2 (tuple2 a1 a1) p (t2tb4 w)))
  (exists ((a2 (tuple21 a a)))
  (and (mem12 a2 w) (mem (tuple2 (tuple2 a1 a1) b2)
  (Tuple2 (tuple2 a1 a1) b2 (t2tb5 a2) x) p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 a (set (tuple21 a a))))) (w (set a))
  (x (set (tuple21 a a))))
  (= (mem13 x (tb2t3 (image (set1 (tuple2 a1 a1)) a1 (t2tb360 p) (t2tb1 w))))
  (exists ((a2 a))
  (and (mem1 a2 w) (mem (tuple2 a1 (set1 (tuple2 a1 a1)))
  (Tuple2 a1 (set1 (tuple2 a1 a1)) (t2tb2 a2) (t2tb4 x)) (t2tb360 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 a (tuple21 a a)))) (w (set a)) (x (tuple21 a a)))
  (= (mem12 x (tb2t4 (image (tuple2 a1 a1) a1 (t2tb362 p) (t2tb1 w))))
  (exists ((a2 a))
  (and (mem1 a2 w) (mem (tuple2 a1 (tuple2 a1 a1))
  (Tuple2 a1 (tuple2 a1 a1) (t2tb2 a2) (t2tb5 x)) (t2tb362 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 a a))) (w (set a)) (x a))
  (= (mem1 x (tb2t1 (image a1 a1 (t2tb4 p) (t2tb1 w))))
  (exists ((a2 a))
  (and (mem1 a2 w) (mem12 (tb2t5 (Tuple2 a1 a1 (t2tb2 a2) (t2tb2 x))) p))))))

;; mem_image
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (w (set a)) (x uni))
  (= (mem b2 x (image b2 a1 p (t2tb1 w)))
  (exists ((a2 a))
  (and (mem1 a2 w) (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 a2) x) p)))))))

;; mem_image
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((p uni) (w uni) (x uni))
  (and
  (=> (mem b2 x (image b2 a2 p w))
  (exists ((a3 uni))
  (and (sort a2 a3)
  (and (mem a2 a3 w) (mem (tuple2 a2 b2) (Tuple2 a2 b2 a3 x) p)))))
  (=>
  (exists ((a3 uni))
  (and (mem a2 a3 w) (mem (tuple2 a2 b2) (Tuple2 a2 b2 a3 x) p))) (mem b2 x
  (image b2 a2 p w)))))))

(declare-fun infix_lspl (ty ty uni uni) uni)

;; infix <+_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (tuple2 a2 b2))
  (infix_lspl b2 a2 x x1)))))

;; mem_overriding
  (assert
  (forall ((b2 ty))
  (forall ((q uni) (p uni) (x (set (tuple21 a a))) (y uni))
  (= (mem (tuple2 (set1 (tuple2 a1 a1)) b2)
  (Tuple2 (set1 (tuple2 a1 a1)) b2 (t2tb4 x) y)
  (infix_lspl b2 (set1 (tuple2 a1 a1)) q p))
  (or
  (and (mem (tuple2 (set1 (tuple2 a1 a1)) b2)
  (Tuple2 (set1 (tuple2 a1 a1)) b2 (t2tb4 x) y) q)
  (not (mem13 x (tb2t3 (dom b2 (set1 (tuple2 a1 a1)) p))))) (mem
  (tuple2 (set1 (tuple2 a1 a1)) b2)
  (Tuple2 (set1 (tuple2 a1 a1)) b2 (t2tb4 x) y) p))))))

;; mem_overriding
  (assert
  (forall ((b2 ty))
  (forall ((q uni) (p uni) (x (tuple21 a a)) (y uni))
  (= (mem (tuple2 (tuple2 a1 a1) b2) (Tuple2 (tuple2 a1 a1) b2 (t2tb5 x) y)
  (infix_lspl b2 (tuple2 a1 a1) q p))
  (or
  (and (mem (tuple2 (tuple2 a1 a1) b2) (Tuple2 (tuple2 a1 a1) b2 (t2tb5 x) y)
  q) (not (mem12 x (tb2t4 (dom b2 (tuple2 a1 a1) p))))) (mem
  (tuple2 (tuple2 a1 a1) b2) (Tuple2 (tuple2 a1 a1) b2 (t2tb5 x) y) p))))))

;; mem_overriding
  (assert
  (forall ((q (set (tuple21 a a))) (p (set (tuple21 a a))) (x a) (y a))
  (= (mem12 (tb2t5 (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y)))
  (tb2t4 (infix_lspl a1 a1 (t2tb4 q) (t2tb4 p))))
  (or
  (and (mem12 (tb2t5 (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y))) q)
  (not (mem1 x (tb2t1 (dom a1 a1 (t2tb4 p)))))) (mem12
  (tb2t5 (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y))) p)))))

;; mem_overriding
  (assert
  (forall ((b2 ty))
  (forall ((q uni) (p uni) (x a) (y uni))
  (= (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) y) (infix_lspl b2 a1 q p))
  (or
  (and (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) y) q)
  (not (mem1 x (tb2t1 (dom b2 a1 p))))) (mem (tuple2 a1 b2)
  (Tuple2 a1 b2 (t2tb2 x) y) p))))))

;; mem_overriding
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((q uni) (p uni) (x uni) (y uni))
  (= (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) (infix_lspl b2 a2 q p))
  (or
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) q)
  (not (mem a2 x (dom b2 a2 p)))) (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) p))))))

(declare-fun direct_product (ty ty ty uni uni) uni)

;; direct_product_sort
  (assert
  (forall ((a2 ty) (b2 ty) (c2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (tuple2 a2 (tuple2 b2 c2)))
  (direct_product c2 b2 a2 x x1)))))

;; mem_direct_product
  (assert
  (forall ((b2 ty))
  (forall ((f uni) (g (set (tuple21 a a))) (x a) (y uni) (z a))
  (= (mem (tuple2 a1 (tuple2 b2 a1))
  (Tuple2 a1 (tuple2 b2 a1) (t2tb2 x) (Tuple2 b2 a1 y (t2tb2 z)))
  (direct_product a1 b2 a1 f (t2tb4 g)))
  (and (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) y) f) (mem12
  (tb2t5 (Tuple2 a1 a1 (t2tb2 x) (t2tb2 z))) g))))))

;; mem_direct_product
  (assert
  (forall ((f (set (tuple21 a a))) (g (set (tuple21 a a))) (x a) (y a) (z a))
  (= (mem (tuple2 a1 (tuple2 a1 a1))
  (Tuple2 a1 (tuple2 a1 a1) (t2tb2 x) (Tuple2 a1 a1 (t2tb2 y) (t2tb2 z)))
  (direct_product a1 a1 a1 (t2tb4 f) (t2tb4 g)))
  (and (mem12 (tb2t5 (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y))) f) (mem12
  (tb2t5 (Tuple2 a1 a1 (t2tb2 x) (t2tb2 z))) g)))))

;; mem_direct_product
  (assert
  (forall ((c2 ty))
  (forall ((f (set (tuple21 a a))) (g uni) (x a) (y a) (z uni))
  (= (mem (tuple2 a1 (tuple2 a1 c2))
  (Tuple2 a1 (tuple2 a1 c2) (t2tb2 x) (Tuple2 a1 c2 (t2tb2 y) z))
  (direct_product c2 a1 a1 (t2tb4 f) g))
  (and (mem12 (tb2t5 (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y))) f) (mem
  (tuple2 a1 c2) (Tuple2 a1 c2 (t2tb2 x) z) g))))))

;; mem_direct_product
  (assert
  (forall ((a2 ty) (b2 ty) (c2 ty))
  (forall ((f uni) (g uni) (x uni) (y uni) (z uni))
  (= (mem (tuple2 a2 (tuple2 b2 c2))
  (Tuple2 a2 (tuple2 b2 c2) x (Tuple2 b2 c2 y z))
  (direct_product c2 b2 a2 f g))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) f) (mem (tuple2 a2 c2)
  (Tuple2 a2 c2 x z) g))))))

(declare-fun prj1 (ty ty uni) uni)

;; prj1_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni)) (sort (set1 (tuple2 (tuple2 a2 b2) a2)) (prj1 b2 a2 x)))))

;; mem_proj_op_1
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (x uni) (y uni) (z uni))
  (=> (sort a2 x)
  (=> (sort a2 z)
  (= (mem (tuple2 (tuple2 a2 b2) a2)
  (Tuple2 (tuple2 a2 b2) a2 (Tuple2 a2 b2 x y) z)
  (prj1 b2 a2 (Tuple2 (set1 a2) (set1 b2) s t)))
  (and (mem (tuple2 (tuple2 a2 b2) a2)
  (Tuple2 (tuple2 a2 b2) a2 (Tuple2 a2 b2 x y) z)
  (times a2 (tuple2 a2 b2) (times b2 a2 s t) s)) (= z x))))))))

(declare-fun prj2 (ty ty uni) uni)

;; prj2_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni)) (sort (set1 (tuple2 (tuple2 a2 b2) b2)) (prj2 b2 a2 x)))))

;; mem_proj_op_2
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (x uni) (y uni) (z uni))
  (=> (sort b2 y)
  (=> (sort b2 z)
  (= (mem (tuple2 (tuple2 a2 b2) b2)
  (Tuple2 (tuple2 a2 b2) b2 (Tuple2 a2 b2 x y) z)
  (prj2 b2 a2 (Tuple2 (set1 a2) (set1 b2) s t)))
  (and (mem (tuple2 (tuple2 a2 b2) b2)
  (Tuple2 (tuple2 a2 b2) b2 (Tuple2 a2 b2 x y) z)
  (times b2 (tuple2 a2 b2) (times b2 a2 s t) t)) (= z y))))))))

(declare-fun parallel_product (ty ty ty ty uni uni) uni)

;; parallel_product_sort
  (assert
  (forall ((a2 ty) (b2 ty) (c2 ty) (d ty))
  (forall ((x uni) (x1 uni)) (sort
  (set1 (tuple2 (tuple2 a2 c2) (tuple2 b2 d)))
  (parallel_product d c2 b2 a2 x x1)))))

;; mem_parallel_product
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((h uni) (k (set (tuple21 a a))) (x uni) (y a) (z uni) (w a))
  (= (mem (tuple2 (tuple2 a2 a1) (tuple2 b2 a1))
  (Tuple2 (tuple2 a2 a1) (tuple2 b2 a1) (Tuple2 a2 a1 x (t2tb2 y))
  (Tuple2 b2 a1 z (t2tb2 w))) (parallel_product a1 a1 b2 a2 h (t2tb4 k)))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x z) h) (mem12
  (tb2t5 (Tuple2 a1 a1 (t2tb2 y) (t2tb2 w))) k))))))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a a))) (k (set (tuple21 a a))) (x a) (y a) (z a)
  (w a))
  (= (mem (tuple2 (tuple2 a1 a1) (tuple2 a1 a1))
  (Tuple2 (tuple2 a1 a1) (tuple2 a1 a1) (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y))
  (Tuple2 a1 a1 (t2tb2 z) (t2tb2 w)))
  (parallel_product a1 a1 a1 a1 (t2tb4 h) (t2tb4 k)))
  (and (mem12 (tb2t5 (Tuple2 a1 a1 (t2tb2 x) (t2tb2 z))) h) (mem12
  (tb2t5 (Tuple2 a1 a1 (t2tb2 y) (t2tb2 w))) k)))))

;; mem_parallel_product
  (assert
  (forall ((c2 ty) (d ty))
  (forall ((h (set (tuple21 a a))) (k uni) (x a) (y uni) (z a) (w uni))
  (= (mem (tuple2 (tuple2 a1 c2) (tuple2 a1 d))
  (Tuple2 (tuple2 a1 c2) (tuple2 a1 d) (Tuple2 a1 c2 (t2tb2 x) y)
  (Tuple2 a1 d (t2tb2 z) w)) (parallel_product d c2 a1 a1 (t2tb4 h) k))
  (and (mem12 (tb2t5 (Tuple2 a1 a1 (t2tb2 x) (t2tb2 z))) h) (mem
  (tuple2 c2 d) (Tuple2 c2 d y w) k))))))

;; mem_parallel_product
  (assert
  (forall ((a2 ty) (b2 ty) (c2 ty) (d ty))
  (forall ((h uni) (k uni) (x uni) (y uni) (z uni) (w uni))
  (= (mem (tuple2 (tuple2 a2 c2) (tuple2 b2 d))
  (Tuple2 (tuple2 a2 c2) (tuple2 b2 d) (Tuple2 a2 c2 x y) (Tuple2 b2 d z w))
  (parallel_product d c2 b2 a2 h k))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x z) h) (mem (tuple2 c2 d)
  (Tuple2 c2 d y w) k))))))

(declare-fun infix_plmngt (ty ty uni uni) uni)

;; infix +->_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (set1 (tuple2 a2 b2)))
  (infix_plmngt b2 a2 x x1)))))

;; mem_partial_function_set
  (assert
  (forall ((s (set a)) (t (set a)) (f (set (tuple21 a a))))
  (= (mem13 f (tb2t3 (infix_plmngt a1 a1 (t2tb1 s) (t2tb1 t))))
  (and (mem13 f (tb2t3 (relation a1 a1 (t2tb1 s) (t2tb1 t))))
  (forall ((x a) (y1 a) (y2 a))
  (=>
  (and (mem12 (tb2t5 (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y1))) f) (mem12
  (tb2t5 (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y2))) f)) (= y1 y2)))))))

;; mem_partial_function_set
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (f uni))
  (and
  (=> (mem (set1 (tuple2 a2 b2)) f (infix_plmngt b2 a2 s t))
  (and (mem (set1 (tuple2 a2 b2)) f (relation b2 a2 s t))
  (forall ((x uni) (y1 uni) (y2 uni))
  (=> (sort b2 y1)
  (=> (sort b2 y2)
  (=>
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y1) f) (mem (tuple2 a2 b2)
  (Tuple2 a2 b2 x y2) f)) (= y1 y2)))))))
  (=>
  (and (mem (set1 (tuple2 a2 b2)) f (relation b2 a2 s t))
  (forall ((x uni) (y1 uni) (y2 uni))
  (=> (sort a2 x)
  (=> (sort b2 y1)
  (=> (sort b2 y2)
  (=>
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y1) f) (mem (tuple2 a2 b2)
  (Tuple2 a2 b2 x y2) f)) (= y1 y2))))))) (mem (set1 (tuple2 a2 b2)) f
  (infix_plmngt b2 a2 s t)))))))

(declare-fun infix_mnmngt (ty ty uni uni) uni)

;; infix -->_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (set1 (tuple2 a2 b2)))
  (infix_mnmngt b2 a2 x x1)))))

;; mem_total_function_set
  (assert
  (forall ((s (set a)) (t (set a)) (x (set (tuple21 a a))))
  (= (mem13 x (tb2t3 (infix_mnmngt a1 a1 (t2tb1 s) (t2tb1 t))))
  (and (mem13 x (tb2t3 (infix_plmngt a1 a1 (t2tb1 s) (t2tb1 t)))) (infix_eqeq
  a1 (dom a1 a1 (t2tb4 x)) (t2tb1 s))))))

;; mem_total_function_set
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (x uni))
  (= (mem (set1 (tuple2 a2 b2)) x (infix_mnmngt b2 a2 s t))
  (and (mem (set1 (tuple2 a2 b2)) x (infix_plmngt b2 a2 s t)) (infix_eqeq a2
  (dom b2 a2 x) s))))))

(declare-fun infix_gtplgt (ty ty uni uni) uni)

;; infix >+>_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (set1 (tuple2 a2 b2)))
  (infix_gtplgt b2 a2 x x1)))))

;; mem_partial_injection_set
  (assert
  (forall ((s (set a)) (t (set a)) (x (set (tuple21 a a))))
  (= (mem13 x (tb2t3 (infix_gtplgt a1 a1 (t2tb1 s) (t2tb1 t))))
  (and (mem13 x (tb2t3 (infix_plmngt a1 a1 (t2tb1 s) (t2tb1 t)))) (mem13
  (tb2t4 (inverse a1 a1 (t2tb4 x)))
  (tb2t3 (infix_plmngt a1 a1 (t2tb1 t) (t2tb1 s))))))))

;; mem_partial_injection_set
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (x uni))
  (= (mem (set1 (tuple2 a2 b2)) x (infix_gtplgt b2 a2 s t))
  (and (mem (set1 (tuple2 a2 b2)) x (infix_plmngt b2 a2 s t)) (mem
  (set1 (tuple2 b2 a2)) (inverse b2 a2 x) (infix_plmngt a2 b2 t s)))))))

(declare-fun infix_gtmngt (ty ty uni uni) uni)

;; infix >->_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (set1 (tuple2 a2 b2)))
  (infix_gtmngt b2 a2 x x1)))))

;; mem_total_injection_set
  (assert
  (forall ((s (set a)) (t (set a)) (x (set (tuple21 a a))))
  (= (mem13 x (tb2t3 (infix_gtmngt a1 a1 (t2tb1 s) (t2tb1 t))))
  (and (mem13 x (tb2t3 (infix_gtplgt a1 a1 (t2tb1 s) (t2tb1 t)))) (mem13 x
  (tb2t3 (infix_mnmngt a1 a1 (t2tb1 s) (t2tb1 t))))))))

;; mem_total_injection_set
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (x uni))
  (= (mem (set1 (tuple2 a2 b2)) x (infix_gtmngt b2 a2 s t))
  (and (mem (set1 (tuple2 a2 b2)) x (infix_gtplgt b2 a2 s t)) (mem
  (set1 (tuple2 a2 b2)) x (infix_mnmngt b2 a2 s t)))))))

(declare-fun infix_plmngtgt (ty ty uni uni) uni)

;; infix +->>_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (set1 (tuple2 a2 b2)))
  (infix_plmngtgt b2 a2 x x1)))))

;; mem_partial_surjection_set
  (assert
  (forall ((s (set a)) (t (set a)) (x (set (tuple21 a a))))
  (= (mem13 x (tb2t3 (infix_plmngtgt a1 a1 (t2tb1 s) (t2tb1 t))))
  (and (mem13 x (tb2t3 (infix_plmngt a1 a1 (t2tb1 s) (t2tb1 t)))) (infix_eqeq
  a1 (ran a1 a1 (t2tb4 x)) (t2tb1 t))))))

;; mem_partial_surjection_set
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (x uni))
  (= (mem (set1 (tuple2 a2 b2)) x (infix_plmngtgt b2 a2 s t))
  (and (mem (set1 (tuple2 a2 b2)) x (infix_plmngt b2 a2 s t)) (infix_eqeq b2
  (ran b2 a2 x) t))))))

(declare-fun infix_mnmngtgt (ty ty uni uni) uni)

;; infix -->>_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (set1 (tuple2 a2 b2)))
  (infix_mnmngtgt b2 a2 x x1)))))

;; mem_total_surjection_set
  (assert
  (forall ((s (set a)) (t (set a)) (x (set (tuple21 a a))))
  (= (mem13 x (tb2t3 (infix_mnmngtgt a1 a1 (t2tb1 s) (t2tb1 t))))
  (and (mem13 x (tb2t3 (infix_plmngtgt a1 a1 (t2tb1 s) (t2tb1 t)))) (mem13 x
  (tb2t3 (infix_mnmngt a1 a1 (t2tb1 s) (t2tb1 t))))))))

;; mem_total_surjection_set
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (x uni))
  (= (mem (set1 (tuple2 a2 b2)) x (infix_mnmngtgt b2 a2 s t))
  (and (mem (set1 (tuple2 a2 b2)) x (infix_plmngtgt b2 a2 s t)) (mem
  (set1 (tuple2 a2 b2)) x (infix_mnmngt b2 a2 s t)))))))

(declare-fun infix_gtplgtgt (ty ty uni uni) uni)

;; infix >+>>_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (set1 (tuple2 a2 b2)))
  (infix_gtplgtgt b2 a2 x x1)))))

;; mem_partial_bijection_set
  (assert
  (forall ((s (set a)) (t (set a)) (x (set (tuple21 a a))))
  (= (mem13 x (tb2t3 (infix_gtplgtgt a1 a1 (t2tb1 s) (t2tb1 t))))
  (and (mem13 x (tb2t3 (infix_gtplgt a1 a1 (t2tb1 s) (t2tb1 t)))) (mem13 x
  (tb2t3 (infix_plmngtgt a1 a1 (t2tb1 s) (t2tb1 t))))))))

;; mem_partial_bijection_set
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (x uni))
  (= (mem (set1 (tuple2 a2 b2)) x (infix_gtplgtgt b2 a2 s t))
  (and (mem (set1 (tuple2 a2 b2)) x (infix_gtplgt b2 a2 s t)) (mem
  (set1 (tuple2 a2 b2)) x (infix_plmngtgt b2 a2 s t)))))))

(declare-fun infix_gtmngtgt (ty ty uni uni) uni)

;; infix >->>_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (set1 (tuple2 a2 b2)))
  (infix_gtmngtgt b2 a2 x x1)))))

(declare-fun infix_gtmngtgt5 ((set a) (set a)) (set (set (tuple21 a a))))

;; mem_total_bijection_set
  (assert
  (forall ((s (set a)) (t (set a)) (x (set (tuple21 a a))))
  (= (mem13 x (infix_gtmngtgt5 s t))
  (and (mem13 x (tb2t3 (infix_gtmngt a1 a1 (t2tb1 s) (t2tb1 t)))) (mem13 x
  (tb2t3 (infix_mnmngtgt a1 a1 (t2tb1 s) (t2tb1 t))))))))

;; mem_total_bijection_set
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (x uni))
  (= (mem (set1 (tuple2 a2 b2)) x (infix_gtmngtgt b2 a2 s t))
  (and (mem (set1 (tuple2 a2 b2)) x (infix_gtmngt b2 a2 s t)) (mem
  (set1 (tuple2 a2 b2)) x (infix_mnmngtgt b2 a2 s t)))))))

(declare-fun apply (ty ty uni uni) uni)

;; apply_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort b2 (apply b2 a2 x x1)))))

;; apply_def0
  (assert
  (forall ((b2 ty))
  (forall ((f uni) (s (set (set (tuple21 a a)))) (t uni) (a2 (set (tuple21 a
  a))))
  (=>
  (and (mem (set1 (tuple2 (set1 (tuple2 a1 a1)) b2)) f
  (infix_plmngt b2 (set1 (tuple2 a1 a1)) (t2tb3 s) t)) (mem13 a2
  (tb2t3 (dom b2 (set1 (tuple2 a1 a1)) f)))) (mem
  (tuple2 (set1 (tuple2 a1 a1)) b2)
  (Tuple2 (set1 (tuple2 a1 a1)) b2 (t2tb4 a2)
  (apply b2 (set1 (tuple2 a1 a1)) f (t2tb4 a2))) f)))))

;; apply_def0
  (assert
  (forall ((b2 ty))
  (forall ((f uni) (s (set (tuple21 a a))) (t uni) (a2 (tuple21 a a)))
  (=>
  (and (mem (set1 (tuple2 (tuple2 a1 a1) b2)) f
  (infix_plmngt b2 (tuple2 a1 a1) (t2tb4 s) t)) (mem12 a2
  (tb2t4 (dom b2 (tuple2 a1 a1) f)))) (mem (tuple2 (tuple2 a1 a1) b2)
  (Tuple2 (tuple2 a1 a1) b2 (t2tb5 a2)
  (apply b2 (tuple2 a1 a1) f (t2tb5 a2))) f)))))

;; apply_def0
  (assert
  (forall ((f (set (tuple21 a a))) (s (set a)) (t (set a)) (a2 a))
  (=>
  (and (mem13 f (tb2t3 (infix_plmngt a1 a1 (t2tb1 s) (t2tb1 t)))) (mem1 a2
  (tb2t1 (dom a1 a1 (t2tb4 f))))) (mem12
  (tb2t5 (Tuple2 a1 a1 (t2tb2 a2) (apply a1 a1 (t2tb4 f) (t2tb2 a2)))) f))))

;; apply_def0
  (assert
  (forall ((b2 ty))
  (forall ((f uni) (s (set a)) (t uni) (a2 a))
  (=>
  (and (mem (set1 (tuple2 a1 b2)) f (infix_plmngt b2 a1 (t2tb1 s) t)) (mem1
  a2 (tb2t1 (dom b2 a1 f)))) (mem (tuple2 a1 b2)
  (Tuple2 a1 b2 (t2tb2 a2) (apply b2 a1 f (t2tb2 a2))) f)))))

;; apply_def0
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((f uni) (s uni) (t uni) (a3 uni))
  (=>
  (and (mem (set1 (tuple2 a2 b2)) f (infix_plmngt b2 a2 s t)) (mem a2 a3
  (dom b2 a2 f))) (mem (tuple2 a2 b2) (Tuple2 a2 b2 a3 (apply b2 a2 f a3))
  f)))))

(assert
;; mem_id_1
 ;; File "lemmes_bbook.why", line 410, characters 7-15
  (not (forall ((s (set a))) (mem13 (id1 s) (infix_gtmngtgt5 s s)))))
(check-sat)
