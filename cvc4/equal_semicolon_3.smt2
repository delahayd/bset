(set-logic AUFBVDTLIRA)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
(declare-sort uni 0)

(declare-sort ty 0)

(declare-fun sort (ty uni) Bool)

(declare-fun witness (ty) uni)

;; witness_sort
  (assert (forall ((a2 ty)) (sort a2 (witness a2))))

(declare-fun int () ty)

(declare-fun real () ty)

(declare-sort set 1)

(declare-fun set1 (ty) ty)

(declare-sort d 0)

(declare-fun d1 () ty)

(declare-sort c 0)

(declare-fun c1 () ty)

(declare-sort b 0)

(declare-fun b1 () ty)

(declare-sort a 0)

(declare-fun a1 () ty)

(declare-sort tuple21 2)

(declare-fun tuple2 (ty ty) ty)

(declare-fun mem (ty uni uni) Bool)

(declare-fun mem1 (a (set a)) Bool)

(declare-fun mem2 (b (set b)) Bool)

(declare-fun mem3 ((tuple21 a b) (set (tuple21 a b))) Bool)

(declare-fun mem4 ((set (tuple21 a b)) (set (set (tuple21 a b)))) Bool)

(declare-fun mem7 (c (set c)) Bool)

(declare-fun mem8 ((tuple21 b c) (set (tuple21 b c))) Bool)

(declare-fun mem9 ((set (tuple21 b c)) (set (set (tuple21 b c)))) Bool)

(declare-fun mem10 ((tuple21 a c) (set (tuple21 a c))) Bool)

(declare-fun mem20 (d (set d)) Bool)

(declare-fun mem21 ((tuple21 c d) (set (tuple21 c d))) Bool)

(declare-fun mem22 ((set (tuple21 c d)) (set (set (tuple21 c d)))) Bool)

(declare-fun mem23 ((tuple21 b d) (set (tuple21 b d))) Bool)

(declare-fun mem32 ((tuple21 a d) (set (tuple21 a d))) Bool)

(declare-fun infix_eqeq (ty uni uni) Bool)

(declare-fun infix_eqeq1 ((set a) (set a)) Bool)

(declare-fun infix_eqeq3 ((set b) (set b)) Bool)

(declare-fun infix_eqeq4 ((set (tuple21 a b)) (set (tuple21 a b))) Bool)

(declare-fun infix_eqeq5 ((set (set (tuple21 a b))) (set (set (tuple21 a
  b)))) Bool)

(declare-fun infix_eqeq7 ((set c) (set c)) Bool)

(declare-fun infix_eqeq8 ((set (tuple21 b c)) (set (tuple21 b c))) Bool)

(declare-fun infix_eqeq9 ((set (tuple21 a c)) (set (tuple21 a c))) Bool)

(declare-fun infix_eqeq10 ((set (set (tuple21 b c))) (set (set (tuple21 b
  c)))) Bool)

(declare-fun infix_eqeq13 ((set d) (set d)) Bool)

(declare-fun infix_eqeq14 ((set (tuple21 c d)) (set (tuple21 c d))) Bool)

(declare-fun infix_eqeq22 ((set (tuple21 b d)) (set (tuple21 b d))) Bool)

(declare-fun infix_eqeq16 ((set (set (tuple21 c d))) (set (set (tuple21 c
  d)))) Bool)

(declare-fun infix_eqeq24 ((set (tuple21 a d)) (set (tuple21 a d))) Bool)

;; infix ==_def
  (assert
  (forall ((s (set (tuple21 a d))) (t (set (tuple21 a d))))
  (= (infix_eqeq24 s t)
  (forall ((x (tuple21 a d))) (= (mem32 x s) (mem32 x t))))))

;; infix ==_def
  (assert
  (forall ((s (set (tuple21 b d))) (t (set (tuple21 b d))))
  (= (infix_eqeq22 s t)
  (forall ((x (tuple21 b d))) (= (mem23 x s) (mem23 x t))))))

;; infix ==_def
  (assert
  (forall ((s (set (set (tuple21 c d)))) (t (set (set (tuple21 c d)))))
  (= (infix_eqeq16 s t)
  (forall ((x (set (tuple21 c d)))) (= (mem22 x s) (mem22 x t))))))

;; infix ==_def
  (assert
  (forall ((s (set (tuple21 c d))) (t (set (tuple21 c d))))
  (= (infix_eqeq14 s t)
  (forall ((x (tuple21 c d))) (= (mem21 x s) (mem21 x t))))))

;; infix ==_def
  (assert
  (forall ((s (set d)) (t (set d)))
  (= (infix_eqeq13 s t) (forall ((x d)) (= (mem20 x s) (mem20 x t))))))

;; infix ==_def
  (assert
  (forall ((s (set (tuple21 a c))) (t (set (tuple21 a c))))
  (= (infix_eqeq9 s t)
  (forall ((x (tuple21 a c))) (= (mem10 x s) (mem10 x t))))))

;; infix ==_def
  (assert
  (forall ((s (set (set (tuple21 b c)))) (t (set (set (tuple21 b c)))))
  (= (infix_eqeq10 s t)
  (forall ((x (set (tuple21 b c)))) (= (mem9 x s) (mem9 x t))))))

;; infix ==_def
  (assert
  (forall ((s (set (tuple21 b c))) (t (set (tuple21 b c))))
  (= (infix_eqeq8 s t)
  (forall ((x (tuple21 b c))) (= (mem8 x s) (mem8 x t))))))

;; infix ==_def
  (assert
  (forall ((s (set c)) (t (set c)))
  (= (infix_eqeq7 s t) (forall ((x c)) (= (mem7 x s) (mem7 x t))))))

;; infix ==_def
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set (set (tuple21 a b)))))
  (= (infix_eqeq5 s t)
  (forall ((x (set (tuple21 a b)))) (= (mem4 x s) (mem4 x t))))))

;; infix ==_def
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (tuple21 a b))))
  (= (infix_eqeq4 s t)
  (forall ((x (tuple21 a b))) (= (mem3 x s) (mem3 x t))))))

;; infix ==_def
  (assert
  (forall ((s (set b)) (t (set b)))
  (= (infix_eqeq3 s t) (forall ((x b)) (= (mem2 x s) (mem2 x t))))))

;; infix ==_def
  (assert
  (forall ((s (set a)) (t (set a)))
  (= (infix_eqeq1 s t) (forall ((x a)) (= (mem1 x s) (mem1 x t))))))

;; infix ==_def
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t uni))
  (and
  (=> (infix_eqeq a2 s t) (forall ((x uni)) (= (mem a2 x s) (mem a2 x t))))
  (=> (forall ((x uni)) (=> (sort a2 x) (= (mem a2 x s) (mem a2 x t))))
  (infix_eqeq a2 s t))))))

(declare-fun power (ty uni) uni)

;; power_sort
  (assert
  (forall ((a2 ty)) (forall ((x uni)) (sort (set1 (set1 a2)) (power a2 x)))))

(declare-fun non_empty_power (ty uni) uni)

;; non_empty_power_sort
  (assert
  (forall ((a2 ty))
  (forall ((x uni)) (sort (set1 (set1 a2)) (non_empty_power a2 x)))))

(declare-fun subset1 (ty uni uni) Bool)

(declare-fun t2tb689 ((set (tuple21 c d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 c d)))) (sort (set1 (tuple2 c1 d1)) (t2tb689 x))))

(declare-fun tb2t689 (uni) (set (tuple21 c d)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 c d))))
  (! (= (tb2t689 (t2tb689 i)) i) :pattern ((t2tb689 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 c1 d1)) j) (= (t2tb689 (tb2t689 j)) j)) :pattern (
  (t2tb689 (tb2t689 j))) )))

(declare-fun t2tb688 ((set (set (tuple21 c d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 c d))))) (sort (set1 (set1 (tuple2 c1 d1)))
  (t2tb688 x))))

(declare-fun tb2t688 (uni) (set (set (tuple21 c d))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 c d)))))
  (! (= (tb2t688 (t2tb688 i)) i) :pattern ((t2tb688 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 c1 d1))) j) (= (t2tb688 (tb2t688 j)) j)) :pattern (
  (t2tb688 (tb2t688 j))) )))

;; subset_def
  (assert
  (forall ((s (set (tuple21 c d))) (t (set (tuple21 c d))))
  (= (subset1 (tuple2 c1 d1) (t2tb689 s) (t2tb689 t)) (mem22 s
  (tb2t688 (power (tuple2 c1 d1) (t2tb689 t)))))))

(declare-fun t2tb130 ((set (set (tuple21 b c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 b c))))) (sort (set1 (set1 (tuple2 b1 c1)))
  (t2tb130 x))))

(declare-fun tb2t130 (uni) (set (set (tuple21 b c))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 b c)))))
  (! (= (tb2t130 (t2tb130 i)) i) :pattern ((t2tb130 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 b1 c1))) j) (= (t2tb130 (tb2t130 j)) j)) :pattern (
  (t2tb130 (tb2t130 j))) )))

(declare-fun t2tb131 ((set (tuple21 b c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 b c)))) (sort (set1 (tuple2 b1 c1)) (t2tb131 x))))

(declare-fun tb2t131 (uni) (set (tuple21 b c)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 b c))))
  (! (= (tb2t131 (t2tb131 i)) i) :pattern ((t2tb131 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 b1 c1)) j) (= (t2tb131 (tb2t131 j)) j)) :pattern (
  (t2tb131 (tb2t131 j))) )))

;; subset_def
  (assert
  (forall ((s (set (tuple21 b c))) (t (set (tuple21 b c))))
  (= (subset1 (tuple2 b1 c1) (t2tb131 s) (t2tb131 t)) (mem9 s
  (tb2t130 (power (tuple2 b1 c1) (t2tb131 t)))))))

(declare-fun t2tb10 ((set (set (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 a b))))) (sort (set1 (set1 (tuple2 a1 b1)))
  (t2tb10 x))))

(declare-fun tb2t10 (uni) (set (set (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 a b)))))
  (! (= (tb2t10 (t2tb10 i)) i) :pattern ((t2tb10 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 a1 b1))) j) (= (t2tb10 (tb2t10 j)) j)) :pattern (
  (t2tb10 (tb2t10 j))) )))

(declare-fun t2tb11 ((set (tuple21 a b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a b)))) (sort (set1 (tuple2 a1 b1)) (t2tb11 x))))

(declare-fun tb2t11 (uni) (set (tuple21 a b)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a b))))
  (! (= (tb2t11 (t2tb11 i)) i) :pattern ((t2tb11 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 b1)) j) (= (t2tb11 (tb2t11 j)) j)) :pattern (
  (t2tb11 (tb2t11 j))) )))

;; subset_def
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (tuple21 a b))))
  (= (subset1 (tuple2 a1 b1) (t2tb11 s) (t2tb11 t)) (mem4 s
  (tb2t10 (power (tuple2 a1 b1) (t2tb11 t)))))))

;; subset_def
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t uni))
  (= (subset1 a2 s t) (mem (set1 a2) s (power a2 t))))))

(declare-fun subsetnoteq (ty uni uni) Bool)

(declare-fun t2tb903 ((set (tuple21 a d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a d)))) (sort (set1 (tuple2 a1 d1)) (t2tb903 x))))

(declare-fun tb2t903 (uni) (set (tuple21 a d)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a d))))
  (! (= (tb2t903 (t2tb903 i)) i) :pattern ((t2tb903 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 d1)) j) (= (t2tb903 (tb2t903 j)) j)) :pattern (
  (t2tb903 (tb2t903 j))) )))

;; subsetnoteq_def
  (assert
  (forall ((s (set (tuple21 a d))) (t (set (tuple21 a d))))
  (= (subsetnoteq (tuple2 a1 d1) (t2tb903 s) (t2tb903 t))
  (and (subset1 (tuple2 a1 d1) (t2tb903 s) (t2tb903 t))
  (not (infix_eqeq24 s t))))))

(declare-fun t2tb687 ((set (tuple21 b d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 b d)))) (sort (set1 (tuple2 b1 d1)) (t2tb687 x))))

(declare-fun tb2t687 (uni) (set (tuple21 b d)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 b d))))
  (! (= (tb2t687 (t2tb687 i)) i) :pattern ((t2tb687 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 b1 d1)) j) (= (t2tb687 (tb2t687 j)) j)) :pattern (
  (t2tb687 (tb2t687 j))) )))

;; subsetnoteq_def
  (assert
  (forall ((s (set (tuple21 b d))) (t (set (tuple21 b d))))
  (= (subsetnoteq (tuple2 b1 d1) (t2tb687 s) (t2tb687 t))
  (and (subset1 (tuple2 b1 d1) (t2tb687 s) (t2tb687 t))
  (not (infix_eqeq22 s t))))))

;; subsetnoteq_def
  (assert
  (forall ((s (set (set (tuple21 c d)))) (t (set (set (tuple21 c d)))))
  (= (subsetnoteq (set1 (tuple2 c1 d1)) (t2tb688 s) (t2tb688 t))
  (and (subset1 (set1 (tuple2 c1 d1)) (t2tb688 s) (t2tb688 t))
  (not (infix_eqeq16 s t))))))

;; subsetnoteq_def
  (assert
  (forall ((s (set (tuple21 c d))) (t (set (tuple21 c d))))
  (= (subsetnoteq (tuple2 c1 d1) (t2tb689 s) (t2tb689 t))
  (and (subset1 (tuple2 c1 d1) (t2tb689 s) (t2tb689 t))
  (not (infix_eqeq14 s t))))))

(declare-fun t2tb690 ((set d)) uni)

;; t2tb_sort
  (assert (forall ((x (set d))) (sort (set1 d1) (t2tb690 x))))

(declare-fun tb2t690 (uni) (set d))

;; BridgeL
  (assert
  (forall ((i (set d)))
  (! (= (tb2t690 (t2tb690 i)) i) :pattern ((t2tb690 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 d1) j) (= (t2tb690 (tb2t690 j)) j)) :pattern ((t2tb690
                                                                   (tb2t690
                                                                   j))) )))

;; subsetnoteq_def
  (assert
  (forall ((s (set d)) (t (set d)))
  (= (subsetnoteq d1 (t2tb690 s) (t2tb690 t))
  (and (subset1 d1 (t2tb690 s) (t2tb690 t)) (not (infix_eqeq13 s t))))))

(declare-fun t2tb129 ((set (tuple21 a c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a c)))) (sort (set1 (tuple2 a1 c1)) (t2tb129 x))))

(declare-fun tb2t129 (uni) (set (tuple21 a c)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a c))))
  (! (= (tb2t129 (t2tb129 i)) i) :pattern ((t2tb129 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 c1)) j) (= (t2tb129 (tb2t129 j)) j)) :pattern (
  (t2tb129 (tb2t129 j))) )))

;; subsetnoteq_def
  (assert
  (forall ((s (set (tuple21 a c))) (t (set (tuple21 a c))))
  (= (subsetnoteq (tuple2 a1 c1) (t2tb129 s) (t2tb129 t))
  (and (subset1 (tuple2 a1 c1) (t2tb129 s) (t2tb129 t))
  (not (infix_eqeq9 s t))))))

;; subsetnoteq_def
  (assert
  (forall ((s (set (set (tuple21 b c)))) (t (set (set (tuple21 b c)))))
  (= (subsetnoteq (set1 (tuple2 b1 c1)) (t2tb130 s) (t2tb130 t))
  (and (subset1 (set1 (tuple2 b1 c1)) (t2tb130 s) (t2tb130 t))
  (not (infix_eqeq10 s t))))))

;; subsetnoteq_def
  (assert
  (forall ((s (set (tuple21 b c))) (t (set (tuple21 b c))))
  (= (subsetnoteq (tuple2 b1 c1) (t2tb131 s) (t2tb131 t))
  (and (subset1 (tuple2 b1 c1) (t2tb131 s) (t2tb131 t))
  (not (infix_eqeq8 s t))))))

(declare-fun t2tb132 ((set c)) uni)

;; t2tb_sort
  (assert (forall ((x (set c))) (sort (set1 c1) (t2tb132 x))))

(declare-fun tb2t132 (uni) (set c))

;; BridgeL
  (assert
  (forall ((i (set c)))
  (! (= (tb2t132 (t2tb132 i)) i) :pattern ((t2tb132 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 c1) j) (= (t2tb132 (tb2t132 j)) j)) :pattern ((t2tb132
                                                                   (tb2t132
                                                                   j))) )))

;; subsetnoteq_def
  (assert
  (forall ((s (set c)) (t (set c)))
  (= (subsetnoteq c1 (t2tb132 s) (t2tb132 t))
  (and (subset1 c1 (t2tb132 s) (t2tb132 t)) (not (infix_eqeq7 s t))))))

;; subsetnoteq_def
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set (set (tuple21 a b)))))
  (= (subsetnoteq (set1 (tuple2 a1 b1)) (t2tb10 s) (t2tb10 t))
  (and (subset1 (set1 (tuple2 a1 b1)) (t2tb10 s) (t2tb10 t))
  (not (infix_eqeq5 s t))))))

;; subsetnoteq_def
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (tuple21 a b))))
  (= (subsetnoteq (tuple2 a1 b1) (t2tb11 s) (t2tb11 t))
  (and (subset1 (tuple2 a1 b1) (t2tb11 s) (t2tb11 t))
  (not (infix_eqeq4 s t))))))

(declare-fun t2tb12 ((set b)) uni)

;; t2tb_sort
  (assert (forall ((x (set b))) (sort (set1 b1) (t2tb12 x))))

(declare-fun tb2t12 (uni) (set b))

;; BridgeL
  (assert
  (forall ((i (set b))) (! (= (tb2t12 (t2tb12 i)) i) :pattern ((t2tb12 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 b1) j) (= (t2tb12 (tb2t12 j)) j)) :pattern ((t2tb12
                                                                 (tb2t12 j))) )))

;; subsetnoteq_def
  (assert
  (forall ((s (set b)) (t (set b)))
  (= (subsetnoteq b1 (t2tb12 s) (t2tb12 t))
  (and (subset1 b1 (t2tb12 s) (t2tb12 t)) (not (infix_eqeq3 s t))))))

(declare-fun t2tb1 ((set a)) uni)

;; t2tb_sort
  (assert (forall ((x (set a))) (sort (set1 a1) (t2tb1 x))))

(declare-fun tb2t1 (uni) (set a))

;; BridgeL
  (assert
  (forall ((i (set a))) (! (= (tb2t1 (t2tb1 i)) i) :pattern ((t2tb1 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 a1) j) (= (t2tb1 (tb2t1 j)) j)) :pattern ((t2tb1
                                                               (tb2t1 j))) )))

;; subsetnoteq_def
  (assert
  (forall ((s (set a)) (t (set a)))
  (= (subsetnoteq a1 (t2tb1 s) (t2tb1 t))
  (and (subset1 a1 (t2tb1 s) (t2tb1 t)) (not (infix_eqeq1 s t))))))

;; subsetnoteq_def
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t uni))
  (= (subsetnoteq a2 s t) (and (subset1 a2 s t) (not (infix_eqeq a2 s t)))))))

(declare-fun empty (ty) uni)

;; empty_sort
  (assert (forall ((a2 ty)) (sort (set1 a2) (empty a2))))

(declare-fun is_empty (ty uni) Bool)

;; is_empty_def
  (assert
  (forall ((s (set (tuple21 a d))))
  (= (is_empty (tuple2 a1 d1) (t2tb903 s))
  (forall ((x (tuple21 a d))) (not (mem32 x s))))))

;; is_empty_def
  (assert
  (forall ((s (set (tuple21 b d))))
  (= (is_empty (tuple2 b1 d1) (t2tb687 s))
  (forall ((x (tuple21 b d))) (not (mem23 x s))))))

;; is_empty_def
  (assert
  (forall ((s (set (set (tuple21 c d)))))
  (= (is_empty (set1 (tuple2 c1 d1)) (t2tb688 s))
  (forall ((x (set (tuple21 c d)))) (not (mem22 x s))))))

;; is_empty_def
  (assert
  (forall ((s (set (tuple21 c d))))
  (= (is_empty (tuple2 c1 d1) (t2tb689 s))
  (forall ((x (tuple21 c d))) (not (mem21 x s))))))

;; is_empty_def
  (assert
  (forall ((s (set d)))
  (= (is_empty d1 (t2tb690 s)) (forall ((x d)) (not (mem20 x s))))))

;; is_empty_def
  (assert
  (forall ((s (set (tuple21 a c))))
  (= (is_empty (tuple2 a1 c1) (t2tb129 s))
  (forall ((x (tuple21 a c))) (not (mem10 x s))))))

;; is_empty_def
  (assert
  (forall ((s (set (set (tuple21 b c)))))
  (= (is_empty (set1 (tuple2 b1 c1)) (t2tb130 s))
  (forall ((x (set (tuple21 b c)))) (not (mem9 x s))))))

;; is_empty_def
  (assert
  (forall ((s (set (tuple21 b c))))
  (= (is_empty (tuple2 b1 c1) (t2tb131 s))
  (forall ((x (tuple21 b c))) (not (mem8 x s))))))

;; is_empty_def
  (assert
  (forall ((s (set c)))
  (= (is_empty c1 (t2tb132 s)) (forall ((x c)) (not (mem7 x s))))))

;; is_empty_def
  (assert
  (forall ((s (set (set (tuple21 a b)))))
  (= (is_empty (set1 (tuple2 a1 b1)) (t2tb10 s))
  (forall ((x (set (tuple21 a b)))) (not (mem4 x s))))))

;; is_empty_def
  (assert
  (forall ((s (set (tuple21 a b))))
  (= (is_empty (tuple2 a1 b1) (t2tb11 s))
  (forall ((x (tuple21 a b))) (not (mem3 x s))))))

;; is_empty_def
  (assert
  (forall ((s (set b)))
  (= (is_empty b1 (t2tb12 s)) (forall ((x b)) (not (mem2 x s))))))

;; is_empty_def
  (assert
  (forall ((s (set a)))
  (= (is_empty a1 (t2tb1 s)) (forall ((x a)) (not (mem1 x s))))))

;; is_empty_def
  (assert
  (forall ((a2 ty))
  (forall ((s uni))
  (and (=> (is_empty a2 s) (forall ((x uni)) (not (mem a2 x s))))
  (=> (forall ((x uni)) (=> (sort a2 x) (not (mem a2 x s)))) (is_empty a2 s))))))

;; empty_def1
  (assert (forall ((a2 ty)) (is_empty a2 (empty a2))))

;; empty
  (assert
  (forall ((x (tuple21 a d)))
  (not (mem32 x (tb2t903 (empty (tuple2 a1 d1)))))))

;; empty
  (assert
  (forall ((x (tuple21 b d)))
  (not (mem23 x (tb2t687 (empty (tuple2 b1 d1)))))))

;; empty
  (assert
  (forall ((x (set (tuple21 c d))))
  (not (mem22 x (tb2t688 (empty (set1 (tuple2 c1 d1))))))))

;; empty
  (assert
  (forall ((x (tuple21 c d)))
  (not (mem21 x (tb2t689 (empty (tuple2 c1 d1)))))))

;; empty
  (assert (forall ((x d)) (not (mem20 x (tb2t690 (empty d1))))))

;; empty
  (assert
  (forall ((x (tuple21 a c)))
  (not (mem10 x (tb2t129 (empty (tuple2 a1 c1)))))))

;; empty
  (assert
  (forall ((x (set (tuple21 b c))))
  (not (mem9 x (tb2t130 (empty (set1 (tuple2 b1 c1))))))))

;; empty
  (assert
  (forall ((x (tuple21 b c)))
  (not (mem8 x (tb2t131 (empty (tuple2 b1 c1)))))))

;; empty
  (assert (forall ((x c)) (not (mem7 x (tb2t132 (empty c1))))))

;; empty
  (assert
  (forall ((x (set (tuple21 a b))))
  (not (mem4 x (tb2t10 (empty (set1 (tuple2 a1 b1))))))))

;; empty
  (assert
  (forall ((x (tuple21 a b))) (not (mem3 x (tb2t11 (empty (tuple2 a1 b1)))))))

;; empty
  (assert (forall ((x b)) (not (mem2 x (tb2t12 (empty b1))))))

;; empty
  (assert (forall ((x a)) (not (mem1 x (tb2t1 (empty a1))))))

;; empty
  (assert (forall ((a2 ty)) (forall ((x uni)) (not (mem a2 x (empty a2))))))

(declare-fun add (ty uni uni) uni)

;; add_sort
  (assert
  (forall ((a2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 a2) (add a2 x x1)))))

(declare-fun t2tb904 ((tuple21 a d)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 a d))) (sort (tuple2 a1 d1) (t2tb904 x))))

(declare-fun tb2t904 (uni) (tuple21 a d))

;; BridgeL
  (assert
  (forall ((i (tuple21 a d)))
  (! (= (tb2t904 (t2tb904 i)) i) :pattern ((t2tb904 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 d1) j) (= (t2tb904 (tb2t904 j)) j)) :pattern (
  (t2tb904 (tb2t904 j))) )))

;; add_def1
  (assert
  (forall ((x (tuple21 a d)) (y (tuple21 a d)))
  (forall ((s (set (tuple21 a d))))
  (= (mem32 x (tb2t903 (add (tuple2 a1 d1) (t2tb904 y) (t2tb903 s))))
  (or (= x y) (mem32 x s))))))

(declare-fun t2tb692 ((tuple21 b d)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 b d))) (sort (tuple2 b1 d1) (t2tb692 x))))

(declare-fun tb2t692 (uni) (tuple21 b d))

;; BridgeL
  (assert
  (forall ((i (tuple21 b d)))
  (! (= (tb2t692 (t2tb692 i)) i) :pattern ((t2tb692 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 b1 d1) j) (= (t2tb692 (tb2t692 j)) j)) :pattern (
  (t2tb692 (tb2t692 j))) )))

;; add_def1
  (assert
  (forall ((x (tuple21 b d)) (y (tuple21 b d)))
  (forall ((s (set (tuple21 b d))))
  (= (mem23 x (tb2t687 (add (tuple2 b1 d1) (t2tb692 y) (t2tb687 s))))
  (or (= x y) (mem23 x s))))))

;; add_def1
  (assert
  (forall ((x (set (tuple21 c d))) (y (set (tuple21 c d))))
  (forall ((s (set (set (tuple21 c d)))))
  (= (mem22 x (tb2t688 (add (set1 (tuple2 c1 d1)) (t2tb689 y) (t2tb688 s))))
  (or (= x y) (mem22 x s))))))

(declare-fun t2tb693 ((tuple21 c d)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 c d))) (sort (tuple2 c1 d1) (t2tb693 x))))

(declare-fun tb2t693 (uni) (tuple21 c d))

;; BridgeL
  (assert
  (forall ((i (tuple21 c d)))
  (! (= (tb2t693 (t2tb693 i)) i) :pattern ((t2tb693 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 c1 d1) j) (= (t2tb693 (tb2t693 j)) j)) :pattern (
  (t2tb693 (tb2t693 j))) )))

;; add_def1
  (assert
  (forall ((x (tuple21 c d)) (y (tuple21 c d)))
  (forall ((s (set (tuple21 c d))))
  (= (mem21 x (tb2t689 (add (tuple2 c1 d1) (t2tb693 y) (t2tb689 s))))
  (or (= x y) (mem21 x s))))))

(declare-fun t2tb694 (d) uni)

;; t2tb_sort
  (assert (forall ((x d)) (sort d1 (t2tb694 x))))

(declare-fun tb2t694 (uni) d)

;; BridgeL
  (assert
  (forall ((i d)) (! (= (tb2t694 (t2tb694 i)) i) :pattern ((t2tb694 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort d1 j) (= (t2tb694 (tb2t694 j)) j)) :pattern ((t2tb694
                                                            (tb2t694 j))) )))

;; add_def1
  (assert
  (forall ((x d) (y d))
  (forall ((s (set d)))
  (= (mem20 x (tb2t690 (add d1 (t2tb694 y) (t2tb690 s))))
  (or (= x y) (mem20 x s))))))

(declare-fun t2tb133 ((tuple21 a c)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 a c))) (sort (tuple2 a1 c1) (t2tb133 x))))

(declare-fun tb2t133 (uni) (tuple21 a c))

;; BridgeL
  (assert
  (forall ((i (tuple21 a c)))
  (! (= (tb2t133 (t2tb133 i)) i) :pattern ((t2tb133 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 c1) j) (= (t2tb133 (tb2t133 j)) j)) :pattern (
  (t2tb133 (tb2t133 j))) )))

;; add_def1
  (assert
  (forall ((x (tuple21 a c)) (y (tuple21 a c)))
  (forall ((s (set (tuple21 a c))))
  (= (mem10 x (tb2t129 (add (tuple2 a1 c1) (t2tb133 y) (t2tb129 s))))
  (or (= x y) (mem10 x s))))))

;; add_def1
  (assert
  (forall ((x (set (tuple21 b c))) (y (set (tuple21 b c))))
  (forall ((s (set (set (tuple21 b c)))))
  (= (mem9 x (tb2t130 (add (set1 (tuple2 b1 c1)) (t2tb131 y) (t2tb130 s))))
  (or (= x y) (mem9 x s))))))

(declare-fun t2tb134 ((tuple21 b c)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 b c))) (sort (tuple2 b1 c1) (t2tb134 x))))

(declare-fun tb2t134 (uni) (tuple21 b c))

;; BridgeL
  (assert
  (forall ((i (tuple21 b c)))
  (! (= (tb2t134 (t2tb134 i)) i) :pattern ((t2tb134 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 b1 c1) j) (= (t2tb134 (tb2t134 j)) j)) :pattern (
  (t2tb134 (tb2t134 j))) )))

;; add_def1
  (assert
  (forall ((x (tuple21 b c)) (y (tuple21 b c)))
  (forall ((s (set (tuple21 b c))))
  (= (mem8 x (tb2t131 (add (tuple2 b1 c1) (t2tb134 y) (t2tb131 s))))
  (or (= x y) (mem8 x s))))))

(declare-fun t2tb135 (c) uni)

;; t2tb_sort
  (assert (forall ((x c)) (sort c1 (t2tb135 x))))

(declare-fun tb2t135 (uni) c)

;; BridgeL
  (assert
  (forall ((i c)) (! (= (tb2t135 (t2tb135 i)) i) :pattern ((t2tb135 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort c1 j) (= (t2tb135 (tb2t135 j)) j)) :pattern ((t2tb135
                                                            (tb2t135 j))) )))

;; add_def1
  (assert
  (forall ((x c) (y c))
  (forall ((s (set c)))
  (= (mem7 x (tb2t132 (add c1 (t2tb135 y) (t2tb132 s))))
  (or (= x y) (mem7 x s))))))

;; add_def1
  (assert
  (forall ((x (set (tuple21 a b))) (y (set (tuple21 a b))))
  (forall ((s (set (set (tuple21 a b)))))
  (= (mem4 x (tb2t10 (add (set1 (tuple2 a1 b1)) (t2tb11 y) (t2tb10 s))))
  (or (= x y) (mem4 x s))))))

(declare-fun t2tb13 ((tuple21 a b)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 a b))) (sort (tuple2 a1 b1) (t2tb13 x))))

(declare-fun tb2t13 (uni) (tuple21 a b))

;; BridgeL
  (assert
  (forall ((i (tuple21 a b)))
  (! (= (tb2t13 (t2tb13 i)) i) :pattern ((t2tb13 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 b1) j) (= (t2tb13 (tb2t13 j)) j)) :pattern (
  (t2tb13 (tb2t13 j))) )))

;; add_def1
  (assert
  (forall ((x (tuple21 a b)) (y (tuple21 a b)))
  (forall ((s (set (tuple21 a b))))
  (= (mem3 x (tb2t11 (add (tuple2 a1 b1) (t2tb13 y) (t2tb11 s))))
  (or (= x y) (mem3 x s))))))

(declare-fun t2tb14 (b) uni)

;; t2tb_sort
  (assert (forall ((x b)) (sort b1 (t2tb14 x))))

(declare-fun tb2t14 (uni) b)

;; BridgeL
  (assert
  (forall ((i b)) (! (= (tb2t14 (t2tb14 i)) i) :pattern ((t2tb14 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort b1 j) (= (t2tb14 (tb2t14 j)) j)) :pattern ((t2tb14 (tb2t14 j))) )))

;; add_def1
  (assert
  (forall ((x b) (y b))
  (forall ((s (set b)))
  (= (mem2 x (tb2t12 (add b1 (t2tb14 y) (t2tb12 s))))
  (or (= x y) (mem2 x s))))))

(declare-fun t2tb2 (a) uni)

;; t2tb_sort
  (assert (forall ((x a)) (sort a1 (t2tb2 x))))

(declare-fun tb2t2 (uni) a)

;; BridgeL
  (assert (forall ((i a)) (! (= (tb2t2 (t2tb2 i)) i) :pattern ((t2tb2 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort a1 j) (= (t2tb2 (tb2t2 j)) j)) :pattern ((t2tb2 (tb2t2 j))) )))

;; add_def1
  (assert
  (forall ((x a) (y a))
  (forall ((s (set a)))
  (= (mem1 x (tb2t1 (add a1 (t2tb2 y) (t2tb1 s)))) (or (= x y) (mem1 x s))))))

;; add_def1
  (assert
  (forall ((a2 ty))
  (forall ((x uni) (y uni))
  (=> (sort a2 x)
  (=> (sort a2 y)
  (forall ((s uni)) (= (mem a2 x (add a2 y s)) (or (= x y) (mem a2 x s)))))))))

(declare-fun singleton (ty uni) uni)

;; singleton_sort
  (assert
  (forall ((a2 ty)) (forall ((x uni)) (sort (set1 a2) (singleton a2 x)))))

;; mem_singleton
  (assert
  (forall ((x (tuple21 a d)) (y (tuple21 a d)))
  (= (mem32 x (tb2t903 (singleton (tuple2 a1 d1) (t2tb904 y)))) (= x y))))

;; mem_singleton
  (assert
  (forall ((x (tuple21 b d)) (y (tuple21 b d)))
  (= (mem23 x (tb2t687 (singleton (tuple2 b1 d1) (t2tb692 y)))) (= x y))))

;; mem_singleton
  (assert
  (forall ((x (set (tuple21 c d))) (y (set (tuple21 c d))))
  (= (mem22 x (tb2t688 (singleton (set1 (tuple2 c1 d1)) (t2tb689 y))))
  (= x y))))

;; mem_singleton
  (assert
  (forall ((x (tuple21 c d)) (y (tuple21 c d)))
  (= (mem21 x (tb2t689 (singleton (tuple2 c1 d1) (t2tb693 y)))) (= x y))))

;; mem_singleton
  (assert
  (forall ((x d) (y d))
  (= (mem20 x (tb2t690 (singleton d1 (t2tb694 y)))) (= x y))))

;; mem_singleton
  (assert
  (forall ((x (tuple21 a c)) (y (tuple21 a c)))
  (= (mem10 x (tb2t129 (singleton (tuple2 a1 c1) (t2tb133 y)))) (= x y))))

;; mem_singleton
  (assert
  (forall ((x (set (tuple21 b c))) (y (set (tuple21 b c))))
  (= (mem9 x (tb2t130 (singleton (set1 (tuple2 b1 c1)) (t2tb131 y))))
  (= x y))))

;; mem_singleton
  (assert
  (forall ((x (tuple21 b c)) (y (tuple21 b c)))
  (= (mem8 x (tb2t131 (singleton (tuple2 b1 c1) (t2tb134 y)))) (= x y))))

;; mem_singleton
  (assert
  (forall ((x c) (y c))
  (= (mem7 x (tb2t132 (singleton c1 (t2tb135 y)))) (= x y))))

;; mem_singleton
  (assert
  (forall ((x (set (tuple21 a b))) (y (set (tuple21 a b))))
  (= (mem4 x (tb2t10 (singleton (set1 (tuple2 a1 b1)) (t2tb11 y)))) (= x y))))

;; mem_singleton
  (assert
  (forall ((x (tuple21 a b)) (y (tuple21 a b)))
  (= (mem3 x (tb2t11 (singleton (tuple2 a1 b1) (t2tb13 y)))) (= x y))))

;; mem_singleton
  (assert
  (forall ((x b) (y b))
  (= (mem2 x (tb2t12 (singleton b1 (t2tb14 y)))) (= x y))))

;; mem_singleton
  (assert
  (forall ((x a) (y a))
  (= (mem1 x (tb2t1 (singleton a1 (t2tb2 y)))) (= x y))))

;; mem_singleton
  (assert
  (forall ((a2 ty))
  (forall ((x uni) (y uni))
  (=> (sort a2 x) (=> (sort a2 y) (= (mem a2 x (singleton a2 y)) (= x y)))))))

(declare-fun remove (ty uni uni) uni)

;; remove_sort
  (assert
  (forall ((a2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 a2) (remove a2 x x1)))))

;; remove_def1
  (assert
  (forall ((x (tuple21 a d)) (y (tuple21 a d)) (s (set (tuple21 a d))))
  (= (mem32 x (tb2t903 (remove (tuple2 a1 d1) (t2tb904 y) (t2tb903 s))))
  (and (not (= x y)) (mem32 x s)))))

;; remove_def1
  (assert
  (forall ((x (tuple21 b d)) (y (tuple21 b d)) (s (set (tuple21 b d))))
  (= (mem23 x (tb2t687 (remove (tuple2 b1 d1) (t2tb692 y) (t2tb687 s))))
  (and (not (= x y)) (mem23 x s)))))

;; remove_def1
  (assert
  (forall ((x (set (tuple21 c d))) (y (set (tuple21 c d)))
  (s (set (set (tuple21 c d)))))
  (= (mem22 x
  (tb2t688 (remove (set1 (tuple2 c1 d1)) (t2tb689 y) (t2tb688 s))))
  (and (not (= x y)) (mem22 x s)))))

;; remove_def1
  (assert
  (forall ((x (tuple21 c d)) (y (tuple21 c d)) (s (set (tuple21 c d))))
  (= (mem21 x (tb2t689 (remove (tuple2 c1 d1) (t2tb693 y) (t2tb689 s))))
  (and (not (= x y)) (mem21 x s)))))

;; remove_def1
  (assert
  (forall ((x d) (y d) (s (set d)))
  (= (mem20 x (tb2t690 (remove d1 (t2tb694 y) (t2tb690 s))))
  (and (not (= x y)) (mem20 x s)))))

;; remove_def1
  (assert
  (forall ((x (tuple21 a c)) (y (tuple21 a c)) (s (set (tuple21 a c))))
  (= (mem10 x (tb2t129 (remove (tuple2 a1 c1) (t2tb133 y) (t2tb129 s))))
  (and (not (= x y)) (mem10 x s)))))

;; remove_def1
  (assert
  (forall ((x (set (tuple21 b c))) (y (set (tuple21 b c)))
  (s (set (set (tuple21 b c)))))
  (= (mem9 x
  (tb2t130 (remove (set1 (tuple2 b1 c1)) (t2tb131 y) (t2tb130 s))))
  (and (not (= x y)) (mem9 x s)))))

;; remove_def1
  (assert
  (forall ((x (tuple21 b c)) (y (tuple21 b c)) (s (set (tuple21 b c))))
  (= (mem8 x (tb2t131 (remove (tuple2 b1 c1) (t2tb134 y) (t2tb131 s))))
  (and (not (= x y)) (mem8 x s)))))

;; remove_def1
  (assert
  (forall ((x c) (y c) (s (set c)))
  (= (mem7 x (tb2t132 (remove c1 (t2tb135 y) (t2tb132 s))))
  (and (not (= x y)) (mem7 x s)))))

;; remove_def1
  (assert
  (forall ((x (set (tuple21 a b))) (y (set (tuple21 a b)))
  (s (set (set (tuple21 a b)))))
  (= (mem4 x (tb2t10 (remove (set1 (tuple2 a1 b1)) (t2tb11 y) (t2tb10 s))))
  (and (not (= x y)) (mem4 x s)))))

;; remove_def1
  (assert
  (forall ((x (tuple21 a b)) (y (tuple21 a b)) (s (set (tuple21 a b))))
  (= (mem3 x (tb2t11 (remove (tuple2 a1 b1) (t2tb13 y) (t2tb11 s))))
  (and (not (= x y)) (mem3 x s)))))

;; remove_def1
  (assert
  (forall ((x b) (y b) (s (set b)))
  (= (mem2 x (tb2t12 (remove b1 (t2tb14 y) (t2tb12 s))))
  (and (not (= x y)) (mem2 x s)))))

;; remove_def1
  (assert
  (forall ((x a) (y a) (s (set a)))
  (= (mem1 x (tb2t1 (remove a1 (t2tb2 y) (t2tb1 s))))
  (and (not (= x y)) (mem1 x s)))))

;; remove_def1
  (assert
  (forall ((a2 ty))
  (forall ((x uni) (y uni) (s uni))
  (=> (sort a2 x)
  (=> (sort a2 y)
  (= (mem a2 x (remove a2 y s)) (and (not (= x y)) (mem a2 x s))))))))

(declare-fun all (ty) uni)

;; all_sort
  (assert (forall ((a2 ty)) (sort (set1 a2) (all a2))))

;; all_def
  (assert
  (forall ((x (tuple21 a d))) (mem32 x (tb2t903 (all (tuple2 a1 d1))))))

;; all_def
  (assert
  (forall ((x (tuple21 b d))) (mem23 x (tb2t687 (all (tuple2 b1 d1))))))

;; all_def
  (assert
  (forall ((x (set (tuple21 c d)))) (mem22 x
  (tb2t688 (all (set1 (tuple2 c1 d1)))))))

;; all_def
  (assert
  (forall ((x (tuple21 c d))) (mem21 x (tb2t689 (all (tuple2 c1 d1))))))

;; all_def
  (assert (forall ((x d)) (mem20 x (tb2t690 (all d1)))))

;; all_def
  (assert
  (forall ((x (tuple21 a c))) (mem10 x (tb2t129 (all (tuple2 a1 c1))))))

;; all_def
  (assert
  (forall ((x (set (tuple21 b c)))) (mem9 x
  (tb2t130 (all (set1 (tuple2 b1 c1)))))))

;; all_def
  (assert
  (forall ((x (tuple21 b c))) (mem8 x (tb2t131 (all (tuple2 b1 c1))))))

;; all_def
  (assert (forall ((x c)) (mem7 x (tb2t132 (all c1)))))

;; all_def
  (assert
  (forall ((x (set (tuple21 a b)))) (mem4 x
  (tb2t10 (all (set1 (tuple2 a1 b1)))))))

;; all_def
  (assert
  (forall ((x (tuple21 a b))) (mem3 x (tb2t11 (all (tuple2 a1 b1))))))

;; all_def
  (assert (forall ((x b)) (mem2 x (tb2t12 (all b1)))))

;; all_def
  (assert (forall ((x a)) (mem1 x (tb2t1 (all a1)))))

;; all_def
  (assert (forall ((a2 ty)) (forall ((x uni)) (mem a2 x (all a2)))))

(declare-fun union1 (ty uni uni) uni)

;; union_sort
  (assert
  (forall ((a2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 a2) (union1 a2 x x1)))))

;; mem_union
  (assert
  (forall ((s (set (tuple21 a d))) (t (set (tuple21 a d))) (x (tuple21 a d)))
  (= (mem32 x (tb2t903 (union1 (tuple2 a1 d1) (t2tb903 s) (t2tb903 t))))
  (or (mem32 x s) (mem32 x t)))))

;; mem_union
  (assert
  (forall ((s (set (tuple21 b d))) (t (set (tuple21 b d))) (x (tuple21 b d)))
  (= (mem23 x (tb2t687 (union1 (tuple2 b1 d1) (t2tb687 s) (t2tb687 t))))
  (or (mem23 x s) (mem23 x t)))))

;; mem_union
  (assert
  (forall ((s (set (set (tuple21 c d)))) (t (set (set (tuple21 c d))))
  (x (set (tuple21 c d))))
  (= (mem22 x
  (tb2t688 (union1 (set1 (tuple2 c1 d1)) (t2tb688 s) (t2tb688 t))))
  (or (mem22 x s) (mem22 x t)))))

;; mem_union
  (assert
  (forall ((s (set (tuple21 c d))) (t (set (tuple21 c d))) (x (tuple21 c d)))
  (= (mem21 x (tb2t689 (union1 (tuple2 c1 d1) (t2tb689 s) (t2tb689 t))))
  (or (mem21 x s) (mem21 x t)))))

;; mem_union
  (assert
  (forall ((s (set d)) (t (set d)) (x d))
  (= (mem20 x (tb2t690 (union1 d1 (t2tb690 s) (t2tb690 t))))
  (or (mem20 x s) (mem20 x t)))))

;; mem_union
  (assert
  (forall ((s (set (tuple21 a c))) (t (set (tuple21 a c))) (x (tuple21 a c)))
  (= (mem10 x (tb2t129 (union1 (tuple2 a1 c1) (t2tb129 s) (t2tb129 t))))
  (or (mem10 x s) (mem10 x t)))))

;; mem_union
  (assert
  (forall ((s (set (set (tuple21 b c)))) (t (set (set (tuple21 b c))))
  (x (set (tuple21 b c))))
  (= (mem9 x
  (tb2t130 (union1 (set1 (tuple2 b1 c1)) (t2tb130 s) (t2tb130 t))))
  (or (mem9 x s) (mem9 x t)))))

;; mem_union
  (assert
  (forall ((s (set (tuple21 b c))) (t (set (tuple21 b c))) (x (tuple21 b c)))
  (= (mem8 x (tb2t131 (union1 (tuple2 b1 c1) (t2tb131 s) (t2tb131 t))))
  (or (mem8 x s) (mem8 x t)))))

;; mem_union
  (assert
  (forall ((s (set c)) (t (set c)) (x c))
  (= (mem7 x (tb2t132 (union1 c1 (t2tb132 s) (t2tb132 t))))
  (or (mem7 x s) (mem7 x t)))))

;; mem_union
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set (set (tuple21 a b))))
  (x (set (tuple21 a b))))
  (= (mem4 x (tb2t10 (union1 (set1 (tuple2 a1 b1)) (t2tb10 s) (t2tb10 t))))
  (or (mem4 x s) (mem4 x t)))))

;; mem_union
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (tuple21 a b))) (x (tuple21 a b)))
  (= (mem3 x (tb2t11 (union1 (tuple2 a1 b1) (t2tb11 s) (t2tb11 t))))
  (or (mem3 x s) (mem3 x t)))))

;; mem_union
  (assert
  (forall ((s (set b)) (t (set b)) (x b))
  (= (mem2 x (tb2t12 (union1 b1 (t2tb12 s) (t2tb12 t))))
  (or (mem2 x s) (mem2 x t)))))

;; mem_union
  (assert
  (forall ((s (set a)) (t (set a)) (x a))
  (= (mem1 x (tb2t1 (union1 a1 (t2tb1 s) (t2tb1 t))))
  (or (mem1 x s) (mem1 x t)))))

;; mem_union
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t uni) (x uni))
  (= (mem a2 x (union1 a2 s t)) (or (mem a2 x s) (mem a2 x t))))))

(declare-fun inter (ty uni uni) uni)

;; inter_sort
  (assert
  (forall ((a2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 a2) (inter a2 x x1)))))

;; mem_inter
  (assert
  (forall ((s (set (tuple21 a d))) (t (set (tuple21 a d))) (x (tuple21 a d)))
  (= (mem32 x (tb2t903 (inter (tuple2 a1 d1) (t2tb903 s) (t2tb903 t))))
  (and (mem32 x s) (mem32 x t)))))

;; mem_inter
  (assert
  (forall ((s (set (tuple21 b d))) (t (set (tuple21 b d))) (x (tuple21 b d)))
  (= (mem23 x (tb2t687 (inter (tuple2 b1 d1) (t2tb687 s) (t2tb687 t))))
  (and (mem23 x s) (mem23 x t)))))

;; mem_inter
  (assert
  (forall ((s (set (set (tuple21 c d)))) (t (set (set (tuple21 c d))))
  (x (set (tuple21 c d))))
  (= (mem22 x
  (tb2t688 (inter (set1 (tuple2 c1 d1)) (t2tb688 s) (t2tb688 t))))
  (and (mem22 x s) (mem22 x t)))))

;; mem_inter
  (assert
  (forall ((s (set (tuple21 c d))) (t (set (tuple21 c d))) (x (tuple21 c d)))
  (= (mem21 x (tb2t689 (inter (tuple2 c1 d1) (t2tb689 s) (t2tb689 t))))
  (and (mem21 x s) (mem21 x t)))))

;; mem_inter
  (assert
  (forall ((s (set d)) (t (set d)) (x d))
  (= (mem20 x (tb2t690 (inter d1 (t2tb690 s) (t2tb690 t))))
  (and (mem20 x s) (mem20 x t)))))

;; mem_inter
  (assert
  (forall ((s (set (tuple21 a c))) (t (set (tuple21 a c))) (x (tuple21 a c)))
  (= (mem10 x (tb2t129 (inter (tuple2 a1 c1) (t2tb129 s) (t2tb129 t))))
  (and (mem10 x s) (mem10 x t)))))

;; mem_inter
  (assert
  (forall ((s (set (set (tuple21 b c)))) (t (set (set (tuple21 b c))))
  (x (set (tuple21 b c))))
  (= (mem9 x (tb2t130 (inter (set1 (tuple2 b1 c1)) (t2tb130 s) (t2tb130 t))))
  (and (mem9 x s) (mem9 x t)))))

;; mem_inter
  (assert
  (forall ((s (set (tuple21 b c))) (t (set (tuple21 b c))) (x (tuple21 b c)))
  (= (mem8 x (tb2t131 (inter (tuple2 b1 c1) (t2tb131 s) (t2tb131 t))))
  (and (mem8 x s) (mem8 x t)))))

;; mem_inter
  (assert
  (forall ((s (set c)) (t (set c)) (x c))
  (= (mem7 x (tb2t132 (inter c1 (t2tb132 s) (t2tb132 t))))
  (and (mem7 x s) (mem7 x t)))))

;; mem_inter
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set (set (tuple21 a b))))
  (x (set (tuple21 a b))))
  (= (mem4 x (tb2t10 (inter (set1 (tuple2 a1 b1)) (t2tb10 s) (t2tb10 t))))
  (and (mem4 x s) (mem4 x t)))))

;; mem_inter
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (tuple21 a b))) (x (tuple21 a b)))
  (= (mem3 x (tb2t11 (inter (tuple2 a1 b1) (t2tb11 s) (t2tb11 t))))
  (and (mem3 x s) (mem3 x t)))))

;; mem_inter
  (assert
  (forall ((s (set b)) (t (set b)) (x b))
  (= (mem2 x (tb2t12 (inter b1 (t2tb12 s) (t2tb12 t))))
  (and (mem2 x s) (mem2 x t)))))

;; mem_inter
  (assert
  (forall ((s (set a)) (t (set a)) (x a))
  (= (mem1 x (tb2t1 (inter a1 (t2tb1 s) (t2tb1 t))))
  (and (mem1 x s) (mem1 x t)))))

;; mem_inter
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t uni) (x uni))
  (= (mem a2 x (inter a2 s t)) (and (mem a2 x s) (mem a2 x t))))))

(declare-fun diff (ty uni uni) uni)

;; diff_sort
  (assert
  (forall ((a2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 a2) (diff a2 x x1)))))

;; mem_diff
  (assert
  (forall ((s (set (tuple21 a d))) (t (set (tuple21 a d))) (x (tuple21 a d)))
  (= (mem32 x (tb2t903 (diff (tuple2 a1 d1) (t2tb903 s) (t2tb903 t))))
  (and (mem32 x s) (not (mem32 x t))))))

;; mem_diff
  (assert
  (forall ((s (set (tuple21 b d))) (t (set (tuple21 b d))) (x (tuple21 b d)))
  (= (mem23 x (tb2t687 (diff (tuple2 b1 d1) (t2tb687 s) (t2tb687 t))))
  (and (mem23 x s) (not (mem23 x t))))))

;; mem_diff
  (assert
  (forall ((s (set (set (tuple21 c d)))) (t (set (set (tuple21 c d))))
  (x (set (tuple21 c d))))
  (= (mem22 x (tb2t688 (diff (set1 (tuple2 c1 d1)) (t2tb688 s) (t2tb688 t))))
  (and (mem22 x s) (not (mem22 x t))))))

;; mem_diff
  (assert
  (forall ((s (set (tuple21 c d))) (t (set (tuple21 c d))) (x (tuple21 c d)))
  (= (mem21 x (tb2t689 (diff (tuple2 c1 d1) (t2tb689 s) (t2tb689 t))))
  (and (mem21 x s) (not (mem21 x t))))))

;; mem_diff
  (assert
  (forall ((s (set d)) (t (set d)) (x d))
  (= (mem20 x (tb2t690 (diff d1 (t2tb690 s) (t2tb690 t))))
  (and (mem20 x s) (not (mem20 x t))))))

;; mem_diff
  (assert
  (forall ((s (set (tuple21 a c))) (t (set (tuple21 a c))) (x (tuple21 a c)))
  (= (mem10 x (tb2t129 (diff (tuple2 a1 c1) (t2tb129 s) (t2tb129 t))))
  (and (mem10 x s) (not (mem10 x t))))))

;; mem_diff
  (assert
  (forall ((s (set (set (tuple21 b c)))) (t (set (set (tuple21 b c))))
  (x (set (tuple21 b c))))
  (= (mem9 x (tb2t130 (diff (set1 (tuple2 b1 c1)) (t2tb130 s) (t2tb130 t))))
  (and (mem9 x s) (not (mem9 x t))))))

;; mem_diff
  (assert
  (forall ((s (set (tuple21 b c))) (t (set (tuple21 b c))) (x (tuple21 b c)))
  (= (mem8 x (tb2t131 (diff (tuple2 b1 c1) (t2tb131 s) (t2tb131 t))))
  (and (mem8 x s) (not (mem8 x t))))))

;; mem_diff
  (assert
  (forall ((s (set c)) (t (set c)) (x c))
  (= (mem7 x (tb2t132 (diff c1 (t2tb132 s) (t2tb132 t))))
  (and (mem7 x s) (not (mem7 x t))))))

;; mem_diff
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set (set (tuple21 a b))))
  (x (set (tuple21 a b))))
  (= (mem4 x (tb2t10 (diff (set1 (tuple2 a1 b1)) (t2tb10 s) (t2tb10 t))))
  (and (mem4 x s) (not (mem4 x t))))))

;; mem_diff
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (tuple21 a b))) (x (tuple21 a b)))
  (= (mem3 x (tb2t11 (diff (tuple2 a1 b1) (t2tb11 s) (t2tb11 t))))
  (and (mem3 x s) (not (mem3 x t))))))

;; mem_diff
  (assert
  (forall ((s (set b)) (t (set b)) (x b))
  (= (mem2 x (tb2t12 (diff b1 (t2tb12 s) (t2tb12 t))))
  (and (mem2 x s) (not (mem2 x t))))))

;; mem_diff
  (assert
  (forall ((s (set a)) (t (set a)) (x a))
  (= (mem1 x (tb2t1 (diff a1 (t2tb1 s) (t2tb1 t))))
  (and (mem1 x s) (not (mem1 x t))))))

;; mem_diff
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t uni) (x uni))
  (= (mem a2 x (diff a2 s t)) (and (mem a2 x s) (not (mem a2 x t)))))))

(declare-fun Tuple2 (ty ty uni uni) uni)

;; Tuple2_sort
  (assert
  (forall ((a2 ty) (a3 ty))
  (forall ((x uni) (x1 uni)) (sort (tuple2 a3 a2) (Tuple2 a3 a2 x x1)))))

(declare-fun Tuple2_proj_1 (ty ty uni) uni)

;; Tuple2_proj_1_sort
  (assert
  (forall ((a2 ty) (a3 ty))
  (forall ((x uni)) (sort a3 (Tuple2_proj_1 a3 a2 x)))))

;; Tuple2_proj_1_def
  (assert
  (forall ((a2 ty) (a3 ty))
  (forall ((u uni) (u1 uni))
  (=> (sort a3 u) (= (Tuple2_proj_1 a3 a2 (Tuple2 a3 a2 u u1)) u)))))

(declare-fun Tuple2_proj_2 (ty ty uni) uni)

;; Tuple2_proj_2_sort
  (assert
  (forall ((a2 ty) (a3 ty))
  (forall ((x uni)) (sort a2 (Tuple2_proj_2 a3 a2 x)))))

;; Tuple2_proj_2_def
  (assert
  (forall ((a2 ty) (a3 ty))
  (forall ((u uni) (u1 uni))
  (=> (sort a2 u1) (= (Tuple2_proj_2 a3 a2 (Tuple2 a3 a2 u u1)) u1)))))

;; tuple2_inversion
  (assert
  (forall ((a2 ty) (a3 ty))
  (forall ((u uni))
  (=> (sort (tuple2 a3 a2) u)
  (= u (Tuple2 a3 a2 (Tuple2_proj_1 a3 a2 u) (Tuple2_proj_2 a3 a2 u)))))))

(declare-fun times (ty ty uni uni) uni)

;; times_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (tuple2 a2 b2)) (times b2 a2 x x1)))))

;; mem_times
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set (tuple21 a d))) (x uni) (y (tuple21 a d)))
  (= (mem (tuple2 a2 (tuple2 a1 d1)) (Tuple2 a2 (tuple2 a1 d1) x (t2tb904 y))
  (times (tuple2 a1 d1) a2 s (t2tb903 t))) (and (mem a2 x s) (mem32 y t))))))

;; mem_times
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set (tuple21 b d))) (x uni) (y (tuple21 b d)))
  (= (mem (tuple2 a2 (tuple2 b1 d1)) (Tuple2 a2 (tuple2 b1 d1) x (t2tb692 y))
  (times (tuple2 b1 d1) a2 s (t2tb687 t))) (and (mem a2 x s) (mem23 y t))))))

;; mem_times
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set (set (tuple21 c d)))) (x uni) (y (set (tuple21 c
  d))))
  (= (mem (tuple2 a2 (set1 (tuple2 c1 d1)))
  (Tuple2 a2 (set1 (tuple2 c1 d1)) x (t2tb689 y))
  (times (set1 (tuple2 c1 d1)) a2 s (t2tb688 t)))
  (and (mem a2 x s) (mem22 y t))))))

;; mem_times
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set (tuple21 c d))) (x uni) (y (tuple21 c d)))
  (= (mem (tuple2 a2 (tuple2 c1 d1)) (Tuple2 a2 (tuple2 c1 d1) x (t2tb693 y))
  (times (tuple2 c1 d1) a2 s (t2tb689 t))) (and (mem a2 x s) (mem21 y t))))))

;; mem_times
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set d)) (x uni) (y d))
  (= (mem (tuple2 a2 d1) (Tuple2 a2 d1 x (t2tb694 y))
  (times d1 a2 s (t2tb690 t))) (and (mem a2 x s) (mem20 y t))))))

;; mem_times
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set (tuple21 a c))) (x uni) (y (tuple21 a c)))
  (= (mem (tuple2 a2 (tuple2 a1 c1)) (Tuple2 a2 (tuple2 a1 c1) x (t2tb133 y))
  (times (tuple2 a1 c1) a2 s (t2tb129 t))) (and (mem a2 x s) (mem10 y t))))))

;; mem_times
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set (set (tuple21 b c)))) (x uni) (y (set (tuple21 b
  c))))
  (= (mem (tuple2 a2 (set1 (tuple2 b1 c1)))
  (Tuple2 a2 (set1 (tuple2 b1 c1)) x (t2tb131 y))
  (times (set1 (tuple2 b1 c1)) a2 s (t2tb130 t)))
  (and (mem a2 x s) (mem9 y t))))))

;; mem_times
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set (tuple21 b c))) (x uni) (y (tuple21 b c)))
  (= (mem (tuple2 a2 (tuple2 b1 c1)) (Tuple2 a2 (tuple2 b1 c1) x (t2tb134 y))
  (times (tuple2 b1 c1) a2 s (t2tb131 t))) (and (mem a2 x s) (mem8 y t))))))

;; mem_times
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set c)) (x uni) (y c))
  (= (mem (tuple2 a2 c1) (Tuple2 a2 c1 x (t2tb135 y))
  (times c1 a2 s (t2tb132 t))) (and (mem a2 x s) (mem7 y t))))))

;; mem_times
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set (set (tuple21 a b)))) (x uni) (y (set (tuple21 a
  b))))
  (= (mem (tuple2 a2 (set1 (tuple2 a1 b1)))
  (Tuple2 a2 (set1 (tuple2 a1 b1)) x (t2tb11 y))
  (times (set1 (tuple2 a1 b1)) a2 s (t2tb10 t)))
  (and (mem a2 x s) (mem4 y t))))))

;; mem_times
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set (tuple21 a b))) (x uni) (y (tuple21 a b)))
  (= (mem (tuple2 a2 (tuple2 a1 b1)) (Tuple2 a2 (tuple2 a1 b1) x (t2tb13 y))
  (times (tuple2 a1 b1) a2 s (t2tb11 t))) (and (mem a2 x s) (mem3 y t))))))

;; mem_times
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set b)) (x uni) (y b))
  (= (mem (tuple2 a2 b1) (Tuple2 a2 b1 x (t2tb14 y))
  (times b1 a2 s (t2tb12 t))) (and (mem a2 x s) (mem2 y t))))))

;; mem_times
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set a)) (x uni) (y a))
  (= (mem (tuple2 a2 a1) (Tuple2 a2 a1 x (t2tb2 y))
  (times a1 a2 s (t2tb1 t))) (and (mem a2 x s) (mem1 y t))))))

(declare-fun t2tb2196 ((set (tuple21 (tuple21 a d) (tuple21 a d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a d) (tuple21 a d))))) (sort
  (set1 (tuple2 (tuple2 a1 d1) (tuple2 a1 d1))) (t2tb2196 x))))

(declare-fun tb2t2196 (uni) (set (tuple21 (tuple21 a d) (tuple21 a d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a d) (tuple21 a d)))))
  (! (= (tb2t2196 (t2tb2196 i)) i) :pattern ((t2tb2196 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 d1) (tuple2 a1 d1))) j)
     (= (t2tb2196 (tb2t2196 j)) j)) :pattern ((t2tb2196 (tb2t2196 j))) )))

(declare-fun t2tb2197 ((tuple21 (tuple21 a d) (tuple21 a d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a d) (tuple21 a d)))) (sort
  (tuple2 (tuple2 a1 d1) (tuple2 a1 d1)) (t2tb2197 x))))

(declare-fun tb2t2197 (uni) (tuple21 (tuple21 a d) (tuple21 a d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a d) (tuple21 a d))))
  (! (= (tb2t2197 (t2tb2197 i)) i) :pattern ((t2tb2197 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 d1) (tuple2 a1 d1)) j)
     (= (t2tb2197 (tb2t2197 j)) j)) :pattern ((t2tb2197 (tb2t2197 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a d))) (t (set (tuple21 a d))) (x (tuple21 a d))
  (y (tuple21 a d)))
  (= (mem (tuple2 (tuple2 a1 d1) (tuple2 a1 d1))
  (Tuple2 (tuple2 a1 d1) (tuple2 a1 d1) (t2tb904 x) (t2tb904 y))
  (times (tuple2 a1 d1) (tuple2 a1 d1) (t2tb903 s) (t2tb903 t)))
  (and (mem32 x s) (mem32 y t)))))

(declare-fun t2tb2198 ((set (tuple21 (tuple21 a d) (tuple21 b d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a d) (tuple21 b d))))) (sort
  (set1 (tuple2 (tuple2 a1 d1) (tuple2 b1 d1))) (t2tb2198 x))))

(declare-fun tb2t2198 (uni) (set (tuple21 (tuple21 a d) (tuple21 b d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a d) (tuple21 b d)))))
  (! (= (tb2t2198 (t2tb2198 i)) i) :pattern ((t2tb2198 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 d1) (tuple2 b1 d1))) j)
     (= (t2tb2198 (tb2t2198 j)) j)) :pattern ((t2tb2198 (tb2t2198 j))) )))

(declare-fun t2tb2199 ((tuple21 (tuple21 a d) (tuple21 b d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a d) (tuple21 b d)))) (sort
  (tuple2 (tuple2 a1 d1) (tuple2 b1 d1)) (t2tb2199 x))))

(declare-fun tb2t2199 (uni) (tuple21 (tuple21 a d) (tuple21 b d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a d) (tuple21 b d))))
  (! (= (tb2t2199 (t2tb2199 i)) i) :pattern ((t2tb2199 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 d1) (tuple2 b1 d1)) j)
     (= (t2tb2199 (tb2t2199 j)) j)) :pattern ((t2tb2199 (tb2t2199 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a d))) (t (set (tuple21 b d))) (x (tuple21 a d))
  (y (tuple21 b d)))
  (= (mem (tuple2 (tuple2 a1 d1) (tuple2 b1 d1))
  (Tuple2 (tuple2 a1 d1) (tuple2 b1 d1) (t2tb904 x) (t2tb692 y))
  (times (tuple2 b1 d1) (tuple2 a1 d1) (t2tb903 s) (t2tb687 t)))
  (and (mem32 x s) (mem23 y t)))))

(declare-fun t2tb2200 ((set (tuple21 (tuple21 a d) (set (tuple21 c
  d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a d) (set (tuple21 c d)))))) (sort
  (set1 (tuple2 (tuple2 a1 d1) (set1 (tuple2 c1 d1)))) (t2tb2200 x))))

(declare-fun tb2t2200 (uni) (set (tuple21 (tuple21 a d) (set (tuple21 c
  d)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a d) (set (tuple21 c d))))))
  (! (= (tb2t2200 (t2tb2200 i)) i) :pattern ((t2tb2200 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 d1) (set1 (tuple2 c1 d1)))) j)
     (= (t2tb2200 (tb2t2200 j)) j)) :pattern ((t2tb2200 (tb2t2200 j))) )))

(declare-fun t2tb2201 ((tuple21 (tuple21 a d) (set (tuple21 c d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a d) (set (tuple21 c d))))) (sort
  (tuple2 (tuple2 a1 d1) (set1 (tuple2 c1 d1))) (t2tb2201 x))))

(declare-fun tb2t2201 (uni) (tuple21 (tuple21 a d) (set (tuple21 c d))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a d) (set (tuple21 c d)))))
  (! (= (tb2t2201 (t2tb2201 i)) i) :pattern ((t2tb2201 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 d1) (set1 (tuple2 c1 d1))) j)
     (= (t2tb2201 (tb2t2201 j)) j)) :pattern ((t2tb2201 (tb2t2201 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a d))) (t (set (set (tuple21 c d))))
  (x (tuple21 a d)) (y (set (tuple21 c d))))
  (= (mem (tuple2 (tuple2 a1 d1) (set1 (tuple2 c1 d1)))
  (Tuple2 (tuple2 a1 d1) (set1 (tuple2 c1 d1)) (t2tb904 x) (t2tb689 y))
  (times (set1 (tuple2 c1 d1)) (tuple2 a1 d1) (t2tb903 s) (t2tb688 t)))
  (and (mem32 x s) (mem22 y t)))))

(declare-fun t2tb2202 ((set (tuple21 (tuple21 a d) (tuple21 c d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a d) (tuple21 c d))))) (sort
  (set1 (tuple2 (tuple2 a1 d1) (tuple2 c1 d1))) (t2tb2202 x))))

(declare-fun tb2t2202 (uni) (set (tuple21 (tuple21 a d) (tuple21 c d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a d) (tuple21 c d)))))
  (! (= (tb2t2202 (t2tb2202 i)) i) :pattern ((t2tb2202 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 d1) (tuple2 c1 d1))) j)
     (= (t2tb2202 (tb2t2202 j)) j)) :pattern ((t2tb2202 (tb2t2202 j))) )))

(declare-fun t2tb2203 ((tuple21 (tuple21 a d) (tuple21 c d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a d) (tuple21 c d)))) (sort
  (tuple2 (tuple2 a1 d1) (tuple2 c1 d1)) (t2tb2203 x))))

(declare-fun tb2t2203 (uni) (tuple21 (tuple21 a d) (tuple21 c d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a d) (tuple21 c d))))
  (! (= (tb2t2203 (t2tb2203 i)) i) :pattern ((t2tb2203 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 d1) (tuple2 c1 d1)) j)
     (= (t2tb2203 (tb2t2203 j)) j)) :pattern ((t2tb2203 (tb2t2203 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a d))) (t (set (tuple21 c d))) (x (tuple21 a d))
  (y (tuple21 c d)))
  (= (mem (tuple2 (tuple2 a1 d1) (tuple2 c1 d1))
  (Tuple2 (tuple2 a1 d1) (tuple2 c1 d1) (t2tb904 x) (t2tb693 y))
  (times (tuple2 c1 d1) (tuple2 a1 d1) (t2tb903 s) (t2tb689 t)))
  (and (mem32 x s) (mem21 y t)))))

(declare-fun t2tb2204 ((set (tuple21 (tuple21 a d) d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a d) d)))) (sort
  (set1 (tuple2 (tuple2 a1 d1) d1)) (t2tb2204 x))))

(declare-fun tb2t2204 (uni) (set (tuple21 (tuple21 a d) d)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a d) d))))
  (! (= (tb2t2204 (t2tb2204 i)) i) :pattern ((t2tb2204 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 d1) d1)) j)
     (= (t2tb2204 (tb2t2204 j)) j)) :pattern ((t2tb2204 (tb2t2204 j))) )))

(declare-fun t2tb2205 ((tuple21 (tuple21 a d) d)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a d) d))) (sort (tuple2 (tuple2 a1 d1) d1)
  (t2tb2205 x))))

(declare-fun tb2t2205 (uni) (tuple21 (tuple21 a d) d))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a d) d)))
  (! (= (tb2t2205 (t2tb2205 i)) i) :pattern ((t2tb2205 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 d1) d1) j) (= (t2tb2205 (tb2t2205 j)) j)) :pattern (
  (t2tb2205 (tb2t2205 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a d))) (t (set d)) (x (tuple21 a d)) (y d))
  (= (mem (tuple2 (tuple2 a1 d1) d1)
  (Tuple2 (tuple2 a1 d1) d1 (t2tb904 x) (t2tb694 y))
  (times d1 (tuple2 a1 d1) (t2tb903 s) (t2tb690 t)))
  (and (mem32 x s) (mem20 y t)))))

(declare-fun t2tb2206 ((set (tuple21 (tuple21 a d) (tuple21 a c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a d) (tuple21 a c))))) (sort
  (set1 (tuple2 (tuple2 a1 d1) (tuple2 a1 c1))) (t2tb2206 x))))

(declare-fun tb2t2206 (uni) (set (tuple21 (tuple21 a d) (tuple21 a c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a d) (tuple21 a c)))))
  (! (= (tb2t2206 (t2tb2206 i)) i) :pattern ((t2tb2206 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 d1) (tuple2 a1 c1))) j)
     (= (t2tb2206 (tb2t2206 j)) j)) :pattern ((t2tb2206 (tb2t2206 j))) )))

(declare-fun t2tb2207 ((tuple21 (tuple21 a d) (tuple21 a c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a d) (tuple21 a c)))) (sort
  (tuple2 (tuple2 a1 d1) (tuple2 a1 c1)) (t2tb2207 x))))

(declare-fun tb2t2207 (uni) (tuple21 (tuple21 a d) (tuple21 a c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a d) (tuple21 a c))))
  (! (= (tb2t2207 (t2tb2207 i)) i) :pattern ((t2tb2207 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 d1) (tuple2 a1 c1)) j)
     (= (t2tb2207 (tb2t2207 j)) j)) :pattern ((t2tb2207 (tb2t2207 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a d))) (t (set (tuple21 a c))) (x (tuple21 a d))
  (y (tuple21 a c)))
  (= (mem (tuple2 (tuple2 a1 d1) (tuple2 a1 c1))
  (Tuple2 (tuple2 a1 d1) (tuple2 a1 c1) (t2tb904 x) (t2tb133 y))
  (times (tuple2 a1 c1) (tuple2 a1 d1) (t2tb903 s) (t2tb129 t)))
  (and (mem32 x s) (mem10 y t)))))

(declare-fun t2tb2208 ((tuple21 (tuple21 a d) (set (tuple21 b c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a d) (set (tuple21 b c))))) (sort
  (tuple2 (tuple2 a1 d1) (set1 (tuple2 b1 c1))) (t2tb2208 x))))

(declare-fun tb2t2208 (uni) (tuple21 (tuple21 a d) (set (tuple21 b c))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a d) (set (tuple21 b c)))))
  (! (= (tb2t2208 (t2tb2208 i)) i) :pattern ((t2tb2208 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 d1) (set1 (tuple2 b1 c1))) j)
     (= (t2tb2208 (tb2t2208 j)) j)) :pattern ((t2tb2208 (tb2t2208 j))) )))

(declare-fun t2tb2209 ((set (tuple21 (tuple21 a d) (set (tuple21 b
  c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a d) (set (tuple21 b c)))))) (sort
  (set1 (tuple2 (tuple2 a1 d1) (set1 (tuple2 b1 c1)))) (t2tb2209 x))))

(declare-fun tb2t2209 (uni) (set (tuple21 (tuple21 a d) (set (tuple21 b
  c)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a d) (set (tuple21 b c))))))
  (! (= (tb2t2209 (t2tb2209 i)) i) :pattern ((t2tb2209 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 d1) (set1 (tuple2 b1 c1)))) j)
     (= (t2tb2209 (tb2t2209 j)) j)) :pattern ((t2tb2209 (tb2t2209 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a d))) (t (set (set (tuple21 b c))))
  (x (tuple21 a d)) (y (set (tuple21 b c))))
  (= (mem (tuple2 (tuple2 a1 d1) (set1 (tuple2 b1 c1)))
  (Tuple2 (tuple2 a1 d1) (set1 (tuple2 b1 c1)) (t2tb904 x) (t2tb131 y))
  (times (set1 (tuple2 b1 c1)) (tuple2 a1 d1) (t2tb903 s) (t2tb130 t)))
  (and (mem32 x s) (mem9 y t)))))

(declare-fun t2tb2210 ((set (tuple21 (tuple21 a d) (tuple21 b c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a d) (tuple21 b c))))) (sort
  (set1 (tuple2 (tuple2 a1 d1) (tuple2 b1 c1))) (t2tb2210 x))))

(declare-fun tb2t2210 (uni) (set (tuple21 (tuple21 a d) (tuple21 b c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a d) (tuple21 b c)))))
  (! (= (tb2t2210 (t2tb2210 i)) i) :pattern ((t2tb2210 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 d1) (tuple2 b1 c1))) j)
     (= (t2tb2210 (tb2t2210 j)) j)) :pattern ((t2tb2210 (tb2t2210 j))) )))

(declare-fun t2tb2211 ((tuple21 (tuple21 a d) (tuple21 b c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a d) (tuple21 b c)))) (sort
  (tuple2 (tuple2 a1 d1) (tuple2 b1 c1)) (t2tb2211 x))))

(declare-fun tb2t2211 (uni) (tuple21 (tuple21 a d) (tuple21 b c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a d) (tuple21 b c))))
  (! (= (tb2t2211 (t2tb2211 i)) i) :pattern ((t2tb2211 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 d1) (tuple2 b1 c1)) j)
     (= (t2tb2211 (tb2t2211 j)) j)) :pattern ((t2tb2211 (tb2t2211 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a d))) (t (set (tuple21 b c))) (x (tuple21 a d))
  (y (tuple21 b c)))
  (= (mem (tuple2 (tuple2 a1 d1) (tuple2 b1 c1))
  (Tuple2 (tuple2 a1 d1) (tuple2 b1 c1) (t2tb904 x) (t2tb134 y))
  (times (tuple2 b1 c1) (tuple2 a1 d1) (t2tb903 s) (t2tb131 t)))
  (and (mem32 x s) (mem8 y t)))))

(declare-fun t2tb2212 ((set (tuple21 (tuple21 a d) c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a d) c)))) (sort
  (set1 (tuple2 (tuple2 a1 d1) c1)) (t2tb2212 x))))

(declare-fun tb2t2212 (uni) (set (tuple21 (tuple21 a d) c)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a d) c))))
  (! (= (tb2t2212 (t2tb2212 i)) i) :pattern ((t2tb2212 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 d1) c1)) j)
     (= (t2tb2212 (tb2t2212 j)) j)) :pattern ((t2tb2212 (tb2t2212 j))) )))

(declare-fun t2tb2213 ((tuple21 (tuple21 a d) c)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a d) c))) (sort (tuple2 (tuple2 a1 d1) c1)
  (t2tb2213 x))))

(declare-fun tb2t2213 (uni) (tuple21 (tuple21 a d) c))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a d) c)))
  (! (= (tb2t2213 (t2tb2213 i)) i) :pattern ((t2tb2213 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 d1) c1) j) (= (t2tb2213 (tb2t2213 j)) j)) :pattern (
  (t2tb2213 (tb2t2213 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a d))) (t (set c)) (x (tuple21 a d)) (y c))
  (= (mem (tuple2 (tuple2 a1 d1) c1)
  (Tuple2 (tuple2 a1 d1) c1 (t2tb904 x) (t2tb135 y))
  (times c1 (tuple2 a1 d1) (t2tb903 s) (t2tb132 t)))
  (and (mem32 x s) (mem7 y t)))))

(declare-fun t2tb2214 ((set (tuple21 (tuple21 a d) (set (tuple21 a
  b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a d) (set (tuple21 a b)))))) (sort
  (set1 (tuple2 (tuple2 a1 d1) (set1 (tuple2 a1 b1)))) (t2tb2214 x))))

(declare-fun tb2t2214 (uni) (set (tuple21 (tuple21 a d) (set (tuple21 a
  b)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a d) (set (tuple21 a b))))))
  (! (= (tb2t2214 (t2tb2214 i)) i) :pattern ((t2tb2214 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 d1) (set1 (tuple2 a1 b1)))) j)
     (= (t2tb2214 (tb2t2214 j)) j)) :pattern ((t2tb2214 (tb2t2214 j))) )))

(declare-fun t2tb2215 ((tuple21 (tuple21 a d) (set (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a d) (set (tuple21 a b))))) (sort
  (tuple2 (tuple2 a1 d1) (set1 (tuple2 a1 b1))) (t2tb2215 x))))

(declare-fun tb2t2215 (uni) (tuple21 (tuple21 a d) (set (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a d) (set (tuple21 a b)))))
  (! (= (tb2t2215 (t2tb2215 i)) i) :pattern ((t2tb2215 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 d1) (set1 (tuple2 a1 b1))) j)
     (= (t2tb2215 (tb2t2215 j)) j)) :pattern ((t2tb2215 (tb2t2215 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a d))) (t (set (set (tuple21 a b))))
  (x (tuple21 a d)) (y (set (tuple21 a b))))
  (= (mem (tuple2 (tuple2 a1 d1) (set1 (tuple2 a1 b1)))
  (Tuple2 (tuple2 a1 d1) (set1 (tuple2 a1 b1)) (t2tb904 x) (t2tb11 y))
  (times (set1 (tuple2 a1 b1)) (tuple2 a1 d1) (t2tb903 s) (t2tb10 t)))
  (and (mem32 x s) (mem4 y t)))))

(declare-fun t2tb2216 ((set (tuple21 (tuple21 a d) (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a d) (tuple21 a b))))) (sort
  (set1 (tuple2 (tuple2 a1 d1) (tuple2 a1 b1))) (t2tb2216 x))))

(declare-fun tb2t2216 (uni) (set (tuple21 (tuple21 a d) (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a d) (tuple21 a b)))))
  (! (= (tb2t2216 (t2tb2216 i)) i) :pattern ((t2tb2216 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 d1) (tuple2 a1 b1))) j)
     (= (t2tb2216 (tb2t2216 j)) j)) :pattern ((t2tb2216 (tb2t2216 j))) )))

(declare-fun t2tb2217 ((tuple21 (tuple21 a d) (tuple21 a b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a d) (tuple21 a b)))) (sort
  (tuple2 (tuple2 a1 d1) (tuple2 a1 b1)) (t2tb2217 x))))

(declare-fun tb2t2217 (uni) (tuple21 (tuple21 a d) (tuple21 a b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a d) (tuple21 a b))))
  (! (= (tb2t2217 (t2tb2217 i)) i) :pattern ((t2tb2217 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 d1) (tuple2 a1 b1)) j)
     (= (t2tb2217 (tb2t2217 j)) j)) :pattern ((t2tb2217 (tb2t2217 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a d))) (t (set (tuple21 a b))) (x (tuple21 a d))
  (y (tuple21 a b)))
  (= (mem (tuple2 (tuple2 a1 d1) (tuple2 a1 b1))
  (Tuple2 (tuple2 a1 d1) (tuple2 a1 b1) (t2tb904 x) (t2tb13 y))
  (times (tuple2 a1 b1) (tuple2 a1 d1) (t2tb903 s) (t2tb11 t)))
  (and (mem32 x s) (mem3 y t)))))

(declare-fun t2tb2218 ((set (tuple21 (tuple21 a d) b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a d) b)))) (sort
  (set1 (tuple2 (tuple2 a1 d1) b1)) (t2tb2218 x))))

(declare-fun tb2t2218 (uni) (set (tuple21 (tuple21 a d) b)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a d) b))))
  (! (= (tb2t2218 (t2tb2218 i)) i) :pattern ((t2tb2218 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 d1) b1)) j)
     (= (t2tb2218 (tb2t2218 j)) j)) :pattern ((t2tb2218 (tb2t2218 j))) )))

(declare-fun t2tb2219 ((tuple21 (tuple21 a d) b)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a d) b))) (sort (tuple2 (tuple2 a1 d1) b1)
  (t2tb2219 x))))

(declare-fun tb2t2219 (uni) (tuple21 (tuple21 a d) b))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a d) b)))
  (! (= (tb2t2219 (t2tb2219 i)) i) :pattern ((t2tb2219 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 d1) b1) j) (= (t2tb2219 (tb2t2219 j)) j)) :pattern (
  (t2tb2219 (tb2t2219 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a d))) (t (set b)) (x (tuple21 a d)) (y b))
  (= (mem (tuple2 (tuple2 a1 d1) b1)
  (Tuple2 (tuple2 a1 d1) b1 (t2tb904 x) (t2tb14 y))
  (times b1 (tuple2 a1 d1) (t2tb903 s) (t2tb12 t)))
  (and (mem32 x s) (mem2 y t)))))

(declare-fun t2tb2220 ((set (tuple21 (tuple21 a d) a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a d) a)))) (sort
  (set1 (tuple2 (tuple2 a1 d1) a1)) (t2tb2220 x))))

(declare-fun tb2t2220 (uni) (set (tuple21 (tuple21 a d) a)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a d) a))))
  (! (= (tb2t2220 (t2tb2220 i)) i) :pattern ((t2tb2220 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 d1) a1)) j)
     (= (t2tb2220 (tb2t2220 j)) j)) :pattern ((t2tb2220 (tb2t2220 j))) )))

(declare-fun t2tb2221 ((tuple21 (tuple21 a d) a)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a d) a))) (sort (tuple2 (tuple2 a1 d1) a1)
  (t2tb2221 x))))

(declare-fun tb2t2221 (uni) (tuple21 (tuple21 a d) a))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a d) a)))
  (! (= (tb2t2221 (t2tb2221 i)) i) :pattern ((t2tb2221 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 d1) a1) j) (= (t2tb2221 (tb2t2221 j)) j)) :pattern (
  (t2tb2221 (tb2t2221 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a d))) (t (set a)) (x (tuple21 a d)) (y a))
  (= (mem (tuple2 (tuple2 a1 d1) a1)
  (Tuple2 (tuple2 a1 d1) a1 (t2tb904 x) (t2tb2 y))
  (times a1 (tuple2 a1 d1) (t2tb903 s) (t2tb1 t)))
  (and (mem32 x s) (mem1 y t)))))

;; mem_times
  (assert
  (forall ((b2 ty))
  (forall ((s (set (tuple21 a d))) (t uni) (x (tuple21 a d)) (y uni))
  (= (mem (tuple2 (tuple2 a1 d1) b2) (Tuple2 (tuple2 a1 d1) b2 (t2tb904 x) y)
  (times b2 (tuple2 a1 d1) (t2tb903 s) t)) (and (mem32 x s) (mem b2 y t))))))

(declare-fun t2tb2222 ((tuple21 (tuple21 b d) (tuple21 a d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b d) (tuple21 a d)))) (sort
  (tuple2 (tuple2 b1 d1) (tuple2 a1 d1)) (t2tb2222 x))))

(declare-fun tb2t2222 (uni) (tuple21 (tuple21 b d) (tuple21 a d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b d) (tuple21 a d))))
  (! (= (tb2t2222 (t2tb2222 i)) i) :pattern ((t2tb2222 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 d1) (tuple2 a1 d1)) j)
     (= (t2tb2222 (tb2t2222 j)) j)) :pattern ((t2tb2222 (tb2t2222 j))) )))

(declare-fun t2tb2223 ((set (tuple21 (tuple21 b d) (tuple21 a d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b d) (tuple21 a d))))) (sort
  (set1 (tuple2 (tuple2 b1 d1) (tuple2 a1 d1))) (t2tb2223 x))))

(declare-fun tb2t2223 (uni) (set (tuple21 (tuple21 b d) (tuple21 a d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b d) (tuple21 a d)))))
  (! (= (tb2t2223 (t2tb2223 i)) i) :pattern ((t2tb2223 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 d1) (tuple2 a1 d1))) j)
     (= (t2tb2223 (tb2t2223 j)) j)) :pattern ((t2tb2223 (tb2t2223 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 b d))) (t (set (tuple21 a d))) (x (tuple21 b d))
  (y (tuple21 a d)))
  (= (mem (tuple2 (tuple2 b1 d1) (tuple2 a1 d1))
  (Tuple2 (tuple2 b1 d1) (tuple2 a1 d1) (t2tb692 x) (t2tb904 y))
  (times (tuple2 a1 d1) (tuple2 b1 d1) (t2tb687 s) (t2tb903 t)))
  (and (mem23 x s) (mem32 y t)))))

(declare-fun t2tb747 ((set (tuple21 (tuple21 b d) (tuple21 b d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b d) (tuple21 b d))))) (sort
  (set1 (tuple2 (tuple2 b1 d1) (tuple2 b1 d1))) (t2tb747 x))))

(declare-fun tb2t747 (uni) (set (tuple21 (tuple21 b d) (tuple21 b d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b d) (tuple21 b d)))))
  (! (= (tb2t747 (t2tb747 i)) i) :pattern ((t2tb747 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 d1) (tuple2 b1 d1))) j)
     (= (t2tb747 (tb2t747 j)) j)) :pattern ((t2tb747 (tb2t747 j))) )))

(declare-fun t2tb748 ((tuple21 (tuple21 b d) (tuple21 b d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b d) (tuple21 b d)))) (sort
  (tuple2 (tuple2 b1 d1) (tuple2 b1 d1)) (t2tb748 x))))

(declare-fun tb2t748 (uni) (tuple21 (tuple21 b d) (tuple21 b d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b d) (tuple21 b d))))
  (! (= (tb2t748 (t2tb748 i)) i) :pattern ((t2tb748 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 d1) (tuple2 b1 d1)) j)
     (= (t2tb748 (tb2t748 j)) j)) :pattern ((t2tb748 (tb2t748 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 b d))) (t (set (tuple21 b d))) (x (tuple21 b d))
  (y (tuple21 b d)))
  (= (mem (tuple2 (tuple2 b1 d1) (tuple2 b1 d1))
  (Tuple2 (tuple2 b1 d1) (tuple2 b1 d1) (t2tb692 x) (t2tb692 y))
  (times (tuple2 b1 d1) (tuple2 b1 d1) (t2tb687 s) (t2tb687 t)))
  (and (mem23 x s) (mem23 y t)))))

(declare-fun t2tb2031 ((set (tuple21 (tuple21 b d) (set (tuple21 c
  d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b d) (set (tuple21 c d)))))) (sort
  (set1 (tuple2 (tuple2 b1 d1) (set1 (tuple2 c1 d1)))) (t2tb2031 x))))

(declare-fun tb2t2031 (uni) (set (tuple21 (tuple21 b d) (set (tuple21 c
  d)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b d) (set (tuple21 c d))))))
  (! (= (tb2t2031 (t2tb2031 i)) i) :pattern ((t2tb2031 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 d1) (set1 (tuple2 c1 d1)))) j)
     (= (t2tb2031 (tb2t2031 j)) j)) :pattern ((t2tb2031 (tb2t2031 j))) )))

(declare-fun t2tb2032 ((tuple21 (tuple21 b d) (set (tuple21 c d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b d) (set (tuple21 c d))))) (sort
  (tuple2 (tuple2 b1 d1) (set1 (tuple2 c1 d1))) (t2tb2032 x))))

(declare-fun tb2t2032 (uni) (tuple21 (tuple21 b d) (set (tuple21 c d))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b d) (set (tuple21 c d)))))
  (! (= (tb2t2032 (t2tb2032 i)) i) :pattern ((t2tb2032 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 d1) (set1 (tuple2 c1 d1))) j)
     (= (t2tb2032 (tb2t2032 j)) j)) :pattern ((t2tb2032 (tb2t2032 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 b d))) (t (set (set (tuple21 c d))))
  (x (tuple21 b d)) (y (set (tuple21 c d))))
  (= (mem (tuple2 (tuple2 b1 d1) (set1 (tuple2 c1 d1)))
  (Tuple2 (tuple2 b1 d1) (set1 (tuple2 c1 d1)) (t2tb692 x) (t2tb689 y))
  (times (set1 (tuple2 c1 d1)) (tuple2 b1 d1) (t2tb687 s) (t2tb688 t)))
  (and (mem23 x s) (mem22 y t)))))

(declare-fun t2tb2033 ((set (tuple21 (tuple21 b d) (tuple21 c d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b d) (tuple21 c d))))) (sort
  (set1 (tuple2 (tuple2 b1 d1) (tuple2 c1 d1))) (t2tb2033 x))))

(declare-fun tb2t2033 (uni) (set (tuple21 (tuple21 b d) (tuple21 c d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b d) (tuple21 c d)))))
  (! (= (tb2t2033 (t2tb2033 i)) i) :pattern ((t2tb2033 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 d1) (tuple2 c1 d1))) j)
     (= (t2tb2033 (tb2t2033 j)) j)) :pattern ((t2tb2033 (tb2t2033 j))) )))

(declare-fun t2tb2034 ((tuple21 (tuple21 b d) (tuple21 c d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b d) (tuple21 c d)))) (sort
  (tuple2 (tuple2 b1 d1) (tuple2 c1 d1)) (t2tb2034 x))))

(declare-fun tb2t2034 (uni) (tuple21 (tuple21 b d) (tuple21 c d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b d) (tuple21 c d))))
  (! (= (tb2t2034 (t2tb2034 i)) i) :pattern ((t2tb2034 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 d1) (tuple2 c1 d1)) j)
     (= (t2tb2034 (tb2t2034 j)) j)) :pattern ((t2tb2034 (tb2t2034 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 b d))) (t (set (tuple21 c d))) (x (tuple21 b d))
  (y (tuple21 c d)))
  (= (mem (tuple2 (tuple2 b1 d1) (tuple2 c1 d1))
  (Tuple2 (tuple2 b1 d1) (tuple2 c1 d1) (t2tb692 x) (t2tb693 y))
  (times (tuple2 c1 d1) (tuple2 b1 d1) (t2tb687 s) (t2tb689 t)))
  (and (mem23 x s) (mem21 y t)))))

(declare-fun t2tb754 ((tuple21 (tuple21 b d) d)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b d) d))) (sort (tuple2 (tuple2 b1 d1) d1)
  (t2tb754 x))))

(declare-fun tb2t754 (uni) (tuple21 (tuple21 b d) d))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b d) d)))
  (! (= (tb2t754 (t2tb754 i)) i) :pattern ((t2tb754 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 d1) d1) j) (= (t2tb754 (tb2t754 j)) j)) :pattern (
  (t2tb754 (tb2t754 j))) )))

(declare-fun t2tb2035 ((set (tuple21 (tuple21 b d) d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b d) d)))) (sort
  (set1 (tuple2 (tuple2 b1 d1) d1)) (t2tb2035 x))))

(declare-fun tb2t2035 (uni) (set (tuple21 (tuple21 b d) d)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b d) d))))
  (! (= (tb2t2035 (t2tb2035 i)) i) :pattern ((t2tb2035 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 d1) d1)) j)
     (= (t2tb2035 (tb2t2035 j)) j)) :pattern ((t2tb2035 (tb2t2035 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 b d))) (t (set d)) (x (tuple21 b d)) (y d))
  (= (mem (tuple2 (tuple2 b1 d1) d1)
  (Tuple2 (tuple2 b1 d1) d1 (t2tb692 x) (t2tb694 y))
  (times d1 (tuple2 b1 d1) (t2tb687 s) (t2tb690 t)))
  (and (mem23 x s) (mem20 y t)))))

(declare-fun t2tb755 ((set (tuple21 (tuple21 b d) (tuple21 a c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b d) (tuple21 a c))))) (sort
  (set1 (tuple2 (tuple2 b1 d1) (tuple2 a1 c1))) (t2tb755 x))))

(declare-fun tb2t755 (uni) (set (tuple21 (tuple21 b d) (tuple21 a c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b d) (tuple21 a c)))))
  (! (= (tb2t755 (t2tb755 i)) i) :pattern ((t2tb755 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 d1) (tuple2 a1 c1))) j)
     (= (t2tb755 (tb2t755 j)) j)) :pattern ((t2tb755 (tb2t755 j))) )))

(declare-fun t2tb756 ((tuple21 (tuple21 b d) (tuple21 a c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b d) (tuple21 a c)))) (sort
  (tuple2 (tuple2 b1 d1) (tuple2 a1 c1)) (t2tb756 x))))

(declare-fun tb2t756 (uni) (tuple21 (tuple21 b d) (tuple21 a c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b d) (tuple21 a c))))
  (! (= (tb2t756 (t2tb756 i)) i) :pattern ((t2tb756 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 d1) (tuple2 a1 c1)) j)
     (= (t2tb756 (tb2t756 j)) j)) :pattern ((t2tb756 (tb2t756 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 b d))) (t (set (tuple21 a c))) (x (tuple21 b d))
  (y (tuple21 a c)))
  (= (mem (tuple2 (tuple2 b1 d1) (tuple2 a1 c1))
  (Tuple2 (tuple2 b1 d1) (tuple2 a1 c1) (t2tb692 x) (t2tb133 y))
  (times (tuple2 a1 c1) (tuple2 b1 d1) (t2tb687 s) (t2tb129 t)))
  (and (mem23 x s) (mem10 y t)))))

(declare-fun t2tb2224 ((set (tuple21 (tuple21 b d) (set (tuple21 b
  c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b d) (set (tuple21 b c)))))) (sort
  (set1 (tuple2 (tuple2 b1 d1) (set1 (tuple2 b1 c1)))) (t2tb2224 x))))

(declare-fun tb2t2224 (uni) (set (tuple21 (tuple21 b d) (set (tuple21 b
  c)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b d) (set (tuple21 b c))))))
  (! (= (tb2t2224 (t2tb2224 i)) i) :pattern ((t2tb2224 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 d1) (set1 (tuple2 b1 c1)))) j)
     (= (t2tb2224 (tb2t2224 j)) j)) :pattern ((t2tb2224 (tb2t2224 j))) )))

(declare-fun t2tb2225 ((tuple21 (tuple21 b d) (set (tuple21 b c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b d) (set (tuple21 b c))))) (sort
  (tuple2 (tuple2 b1 d1) (set1 (tuple2 b1 c1))) (t2tb2225 x))))

(declare-fun tb2t2225 (uni) (tuple21 (tuple21 b d) (set (tuple21 b c))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b d) (set (tuple21 b c)))))
  (! (= (tb2t2225 (t2tb2225 i)) i) :pattern ((t2tb2225 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 d1) (set1 (tuple2 b1 c1))) j)
     (= (t2tb2225 (tb2t2225 j)) j)) :pattern ((t2tb2225 (tb2t2225 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 b d))) (t (set (set (tuple21 b c))))
  (x (tuple21 b d)) (y (set (tuple21 b c))))
  (= (mem (tuple2 (tuple2 b1 d1) (set1 (tuple2 b1 c1)))
  (Tuple2 (tuple2 b1 d1) (set1 (tuple2 b1 c1)) (t2tb692 x) (t2tb131 y))
  (times (set1 (tuple2 b1 c1)) (tuple2 b1 d1) (t2tb687 s) (t2tb130 t)))
  (and (mem23 x s) (mem9 y t)))))

(declare-fun t2tb2226 ((set (tuple21 (tuple21 b d) (tuple21 b c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b d) (tuple21 b c))))) (sort
  (set1 (tuple2 (tuple2 b1 d1) (tuple2 b1 c1))) (t2tb2226 x))))

(declare-fun tb2t2226 (uni) (set (tuple21 (tuple21 b d) (tuple21 b c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b d) (tuple21 b c)))))
  (! (= (tb2t2226 (t2tb2226 i)) i) :pattern ((t2tb2226 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 d1) (tuple2 b1 c1))) j)
     (= (t2tb2226 (tb2t2226 j)) j)) :pattern ((t2tb2226 (tb2t2226 j))) )))

(declare-fun t2tb2227 ((tuple21 (tuple21 b d) (tuple21 b c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b d) (tuple21 b c)))) (sort
  (tuple2 (tuple2 b1 d1) (tuple2 b1 c1)) (t2tb2227 x))))

(declare-fun tb2t2227 (uni) (tuple21 (tuple21 b d) (tuple21 b c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b d) (tuple21 b c))))
  (! (= (tb2t2227 (t2tb2227 i)) i) :pattern ((t2tb2227 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 d1) (tuple2 b1 c1)) j)
     (= (t2tb2227 (tb2t2227 j)) j)) :pattern ((t2tb2227 (tb2t2227 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 b d))) (t (set (tuple21 b c))) (x (tuple21 b d))
  (y (tuple21 b c)))
  (= (mem (tuple2 (tuple2 b1 d1) (tuple2 b1 c1))
  (Tuple2 (tuple2 b1 d1) (tuple2 b1 c1) (t2tb692 x) (t2tb134 y))
  (times (tuple2 b1 c1) (tuple2 b1 d1) (t2tb687 s) (t2tb131 t)))
  (and (mem23 x s) (mem8 y t)))))

(declare-fun t2tb1761 ((tuple21 (tuple21 b d) c)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b d) c))) (sort (tuple2 (tuple2 b1 d1) c1)
  (t2tb1761 x))))

(declare-fun tb2t1761 (uni) (tuple21 (tuple21 b d) c))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b d) c)))
  (! (= (tb2t1761 (t2tb1761 i)) i) :pattern ((t2tb1761 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 d1) c1) j) (= (t2tb1761 (tb2t1761 j)) j)) :pattern (
  (t2tb1761 (tb2t1761 j))) )))

(declare-fun t2tb2036 ((set (tuple21 (tuple21 b d) c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b d) c)))) (sort
  (set1 (tuple2 (tuple2 b1 d1) c1)) (t2tb2036 x))))

(declare-fun tb2t2036 (uni) (set (tuple21 (tuple21 b d) c)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b d) c))))
  (! (= (tb2t2036 (t2tb2036 i)) i) :pattern ((t2tb2036 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 d1) c1)) j)
     (= (t2tb2036 (tb2t2036 j)) j)) :pattern ((t2tb2036 (tb2t2036 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 b d))) (t (set c)) (x (tuple21 b d)) (y c))
  (= (mem (tuple2 (tuple2 b1 d1) c1)
  (Tuple2 (tuple2 b1 d1) c1 (t2tb692 x) (t2tb135 y))
  (times c1 (tuple2 b1 d1) (t2tb687 s) (t2tb132 t)))
  (and (mem23 x s) (mem7 y t)))))

(declare-fun t2tb2037 ((set (tuple21 (tuple21 b d) (set (tuple21 a
  b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b d) (set (tuple21 a b)))))) (sort
  (set1 (tuple2 (tuple2 b1 d1) (set1 (tuple2 a1 b1)))) (t2tb2037 x))))

(declare-fun tb2t2037 (uni) (set (tuple21 (tuple21 b d) (set (tuple21 a
  b)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b d) (set (tuple21 a b))))))
  (! (= (tb2t2037 (t2tb2037 i)) i) :pattern ((t2tb2037 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 d1) (set1 (tuple2 a1 b1)))) j)
     (= (t2tb2037 (tb2t2037 j)) j)) :pattern ((t2tb2037 (tb2t2037 j))) )))

(declare-fun t2tb2038 ((tuple21 (tuple21 b d) (set (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b d) (set (tuple21 a b))))) (sort
  (tuple2 (tuple2 b1 d1) (set1 (tuple2 a1 b1))) (t2tb2038 x))))

(declare-fun tb2t2038 (uni) (tuple21 (tuple21 b d) (set (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b d) (set (tuple21 a b)))))
  (! (= (tb2t2038 (t2tb2038 i)) i) :pattern ((t2tb2038 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 d1) (set1 (tuple2 a1 b1))) j)
     (= (t2tb2038 (tb2t2038 j)) j)) :pattern ((t2tb2038 (tb2t2038 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 b d))) (t (set (set (tuple21 a b))))
  (x (tuple21 b d)) (y (set (tuple21 a b))))
  (= (mem (tuple2 (tuple2 b1 d1) (set1 (tuple2 a1 b1)))
  (Tuple2 (tuple2 b1 d1) (set1 (tuple2 a1 b1)) (t2tb692 x) (t2tb11 y))
  (times (set1 (tuple2 a1 b1)) (tuple2 b1 d1) (t2tb687 s) (t2tb10 t)))
  (and (mem23 x s) (mem4 y t)))))

(declare-fun t2tb2039 ((set (tuple21 (tuple21 b d) (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b d) (tuple21 a b))))) (sort
  (set1 (tuple2 (tuple2 b1 d1) (tuple2 a1 b1))) (t2tb2039 x))))

(declare-fun tb2t2039 (uni) (set (tuple21 (tuple21 b d) (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b d) (tuple21 a b)))))
  (! (= (tb2t2039 (t2tb2039 i)) i) :pattern ((t2tb2039 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 d1) (tuple2 a1 b1))) j)
     (= (t2tb2039 (tb2t2039 j)) j)) :pattern ((t2tb2039 (tb2t2039 j))) )))

(declare-fun t2tb2040 ((tuple21 (tuple21 b d) (tuple21 a b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b d) (tuple21 a b)))) (sort
  (tuple2 (tuple2 b1 d1) (tuple2 a1 b1)) (t2tb2040 x))))

(declare-fun tb2t2040 (uni) (tuple21 (tuple21 b d) (tuple21 a b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b d) (tuple21 a b))))
  (! (= (tb2t2040 (t2tb2040 i)) i) :pattern ((t2tb2040 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 d1) (tuple2 a1 b1)) j)
     (= (t2tb2040 (tb2t2040 j)) j)) :pattern ((t2tb2040 (tb2t2040 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 b d))) (t (set (tuple21 a b))) (x (tuple21 b d))
  (y (tuple21 a b)))
  (= (mem (tuple2 (tuple2 b1 d1) (tuple2 a1 b1))
  (Tuple2 (tuple2 b1 d1) (tuple2 a1 b1) (t2tb692 x) (t2tb13 y))
  (times (tuple2 a1 b1) (tuple2 b1 d1) (t2tb687 s) (t2tb11 t)))
  (and (mem23 x s) (mem3 y t)))))

(declare-fun t2tb764 ((tuple21 (tuple21 b d) b)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b d) b))) (sort (tuple2 (tuple2 b1 d1) b1)
  (t2tb764 x))))

(declare-fun tb2t764 (uni) (tuple21 (tuple21 b d) b))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b d) b)))
  (! (= (tb2t764 (t2tb764 i)) i) :pattern ((t2tb764 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 d1) b1) j) (= (t2tb764 (tb2t764 j)) j)) :pattern (
  (t2tb764 (tb2t764 j))) )))

(declare-fun t2tb2041 ((set (tuple21 (tuple21 b d) b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b d) b)))) (sort
  (set1 (tuple2 (tuple2 b1 d1) b1)) (t2tb2041 x))))

(declare-fun tb2t2041 (uni) (set (tuple21 (tuple21 b d) b)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b d) b))))
  (! (= (tb2t2041 (t2tb2041 i)) i) :pattern ((t2tb2041 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 d1) b1)) j)
     (= (t2tb2041 (tb2t2041 j)) j)) :pattern ((t2tb2041 (tb2t2041 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 b d))) (t (set b)) (x (tuple21 b d)) (y b))
  (= (mem (tuple2 (tuple2 b1 d1) b1)
  (Tuple2 (tuple2 b1 d1) b1 (t2tb692 x) (t2tb14 y))
  (times b1 (tuple2 b1 d1) (t2tb687 s) (t2tb12 t)))
  (and (mem23 x s) (mem2 y t)))))

(declare-fun t2tb2042 ((set (tuple21 (tuple21 b d) a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b d) a)))) (sort
  (set1 (tuple2 (tuple2 b1 d1) a1)) (t2tb2042 x))))

(declare-fun tb2t2042 (uni) (set (tuple21 (tuple21 b d) a)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b d) a))))
  (! (= (tb2t2042 (t2tb2042 i)) i) :pattern ((t2tb2042 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 d1) a1)) j)
     (= (t2tb2042 (tb2t2042 j)) j)) :pattern ((t2tb2042 (tb2t2042 j))) )))

(declare-fun t2tb2043 ((tuple21 (tuple21 b d) a)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b d) a))) (sort (tuple2 (tuple2 b1 d1) a1)
  (t2tb2043 x))))

(declare-fun tb2t2043 (uni) (tuple21 (tuple21 b d) a))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b d) a)))
  (! (= (tb2t2043 (t2tb2043 i)) i) :pattern ((t2tb2043 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 d1) a1) j) (= (t2tb2043 (tb2t2043 j)) j)) :pattern (
  (t2tb2043 (tb2t2043 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 b d))) (t (set a)) (x (tuple21 b d)) (y a))
  (= (mem (tuple2 (tuple2 b1 d1) a1)
  (Tuple2 (tuple2 b1 d1) a1 (t2tb692 x) (t2tb2 y))
  (times a1 (tuple2 b1 d1) (t2tb687 s) (t2tb1 t)))
  (and (mem23 x s) (mem1 y t)))))

;; mem_times
  (assert
  (forall ((b2 ty))
  (forall ((s (set (tuple21 b d))) (t uni) (x (tuple21 b d)) (y uni))
  (= (mem (tuple2 (tuple2 b1 d1) b2) (Tuple2 (tuple2 b1 d1) b2 (t2tb692 x) y)
  (times b2 (tuple2 b1 d1) (t2tb687 s) t)) (and (mem23 x s) (mem b2 y t))))))

(declare-fun t2tb2228 ((set (tuple21 (set (tuple21 c d)) (tuple21 a
  d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 c d)) (tuple21 a d))))) (sort
  (set1 (tuple2 (set1 (tuple2 c1 d1)) (tuple2 a1 d1))) (t2tb2228 x))))

(declare-fun tb2t2228 (uni) (set (tuple21 (set (tuple21 c d)) (tuple21 a
  d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 c d)) (tuple21 a d)))))
  (! (= (tb2t2228 (t2tb2228 i)) i) :pattern ((t2tb2228 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 c1 d1)) (tuple2 a1 d1))) j)
     (= (t2tb2228 (tb2t2228 j)) j)) :pattern ((t2tb2228 (tb2t2228 j))) )))

(declare-fun t2tb2229 ((tuple21 (set (tuple21 c d)) (tuple21 a d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 c d)) (tuple21 a d)))) (sort
  (tuple2 (set1 (tuple2 c1 d1)) (tuple2 a1 d1)) (t2tb2229 x))))

(declare-fun tb2t2229 (uni) (tuple21 (set (tuple21 c d)) (tuple21 a d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 c d)) (tuple21 a d))))
  (! (= (tb2t2229 (t2tb2229 i)) i) :pattern ((t2tb2229 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 c1 d1)) (tuple2 a1 d1)) j)
     (= (t2tb2229 (tb2t2229 j)) j)) :pattern ((t2tb2229 (tb2t2229 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 c d)))) (t (set (tuple21 a d)))
  (x (set (tuple21 c d))) (y (tuple21 a d)))
  (= (mem (tuple2 (set1 (tuple2 c1 d1)) (tuple2 a1 d1))
  (Tuple2 (set1 (tuple2 c1 d1)) (tuple2 a1 d1) (t2tb689 x) (t2tb904 y))
  (times (tuple2 a1 d1) (set1 (tuple2 c1 d1)) (t2tb688 s) (t2tb903 t)))
  (and (mem22 x s) (mem32 y t)))))

(declare-fun t2tb2044 ((set (tuple21 (set (tuple21 c d)) (tuple21 b
  d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 c d)) (tuple21 b d))))) (sort
  (set1 (tuple2 (set1 (tuple2 c1 d1)) (tuple2 b1 d1))) (t2tb2044 x))))

(declare-fun tb2t2044 (uni) (set (tuple21 (set (tuple21 c d)) (tuple21 b
  d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 c d)) (tuple21 b d)))))
  (! (= (tb2t2044 (t2tb2044 i)) i) :pattern ((t2tb2044 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 c1 d1)) (tuple2 b1 d1))) j)
     (= (t2tb2044 (tb2t2044 j)) j)) :pattern ((t2tb2044 (tb2t2044 j))) )))

(declare-fun t2tb2045 ((tuple21 (set (tuple21 c d)) (tuple21 b d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 c d)) (tuple21 b d)))) (sort
  (tuple2 (set1 (tuple2 c1 d1)) (tuple2 b1 d1)) (t2tb2045 x))))

(declare-fun tb2t2045 (uni) (tuple21 (set (tuple21 c d)) (tuple21 b d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 c d)) (tuple21 b d))))
  (! (= (tb2t2045 (t2tb2045 i)) i) :pattern ((t2tb2045 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 c1 d1)) (tuple2 b1 d1)) j)
     (= (t2tb2045 (tb2t2045 j)) j)) :pattern ((t2tb2045 (tb2t2045 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 c d)))) (t (set (tuple21 b d)))
  (x (set (tuple21 c d))) (y (tuple21 b d)))
  (= (mem (tuple2 (set1 (tuple2 c1 d1)) (tuple2 b1 d1))
  (Tuple2 (set1 (tuple2 c1 d1)) (tuple2 b1 d1) (t2tb689 x) (t2tb692 y))
  (times (tuple2 b1 d1) (set1 (tuple2 c1 d1)) (t2tb688 s) (t2tb687 t)))
  (and (mem22 x s) (mem23 y t)))))

(declare-fun t2tb773 ((set (tuple21 (set (tuple21 c d)) (set (tuple21 c
  d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 c d)) (set (tuple21 c d)))))) (sort
  (set1 (tuple2 (set1 (tuple2 c1 d1)) (set1 (tuple2 c1 d1)))) (t2tb773 x))))

(declare-fun tb2t773 (uni) (set (tuple21 (set (tuple21 c d)) (set (tuple21 c
  d)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 c d)) (set (tuple21 c d))))))
  (! (= (tb2t773 (t2tb773 i)) i) :pattern ((t2tb773 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 c1 d1)) (set1 (tuple2 c1 d1)))) j)
     (= (t2tb773 (tb2t773 j)) j)) :pattern ((t2tb773 (tb2t773 j))) )))

(declare-fun t2tb774 ((tuple21 (set (tuple21 c d)) (set (tuple21 c d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 c d)) (set (tuple21 c d))))) (sort
  (tuple2 (set1 (tuple2 c1 d1)) (set1 (tuple2 c1 d1))) (t2tb774 x))))

(declare-fun tb2t774 (uni) (tuple21 (set (tuple21 c d)) (set (tuple21 c d))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 c d)) (set (tuple21 c d)))))
  (! (= (tb2t774 (t2tb774 i)) i) :pattern ((t2tb774 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 c1 d1)) (set1 (tuple2 c1 d1))) j)
     (= (t2tb774 (tb2t774 j)) j)) :pattern ((t2tb774 (tb2t774 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 c d)))) (t (set (set (tuple21 c d))))
  (x (set (tuple21 c d))) (y (set (tuple21 c d))))
  (= (mem (tuple2 (set1 (tuple2 c1 d1)) (set1 (tuple2 c1 d1)))
  (Tuple2 (set1 (tuple2 c1 d1)) (set1 (tuple2 c1 d1)) (t2tb689 x)
  (t2tb689 y))
  (times (set1 (tuple2 c1 d1)) (set1 (tuple2 c1 d1)) (t2tb688 s) (t2tb688 t)))
  (and (mem22 x s) (mem22 y t)))))

(declare-fun t2tb775 ((set (tuple21 (set (tuple21 c d)) (tuple21 c d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 c d)) (tuple21 c d))))) (sort
  (set1 (tuple2 (set1 (tuple2 c1 d1)) (tuple2 c1 d1))) (t2tb775 x))))

(declare-fun tb2t775 (uni) (set (tuple21 (set (tuple21 c d)) (tuple21 c d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 c d)) (tuple21 c d)))))
  (! (= (tb2t775 (t2tb775 i)) i) :pattern ((t2tb775 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 c1 d1)) (tuple2 c1 d1))) j)
     (= (t2tb775 (tb2t775 j)) j)) :pattern ((t2tb775 (tb2t775 j))) )))

(declare-fun t2tb776 ((tuple21 (set (tuple21 c d)) (tuple21 c d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 c d)) (tuple21 c d)))) (sort
  (tuple2 (set1 (tuple2 c1 d1)) (tuple2 c1 d1)) (t2tb776 x))))

(declare-fun tb2t776 (uni) (tuple21 (set (tuple21 c d)) (tuple21 c d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 c d)) (tuple21 c d))))
  (! (= (tb2t776 (t2tb776 i)) i) :pattern ((t2tb776 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 c1 d1)) (tuple2 c1 d1)) j)
     (= (t2tb776 (tb2t776 j)) j)) :pattern ((t2tb776 (tb2t776 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 c d)))) (t (set (tuple21 c d)))
  (x (set (tuple21 c d))) (y (tuple21 c d)))
  (= (mem (tuple2 (set1 (tuple2 c1 d1)) (tuple2 c1 d1))
  (Tuple2 (set1 (tuple2 c1 d1)) (tuple2 c1 d1) (t2tb689 x) (t2tb693 y))
  (times (tuple2 c1 d1) (set1 (tuple2 c1 d1)) (t2tb688 s) (t2tb689 t)))
  (and (mem22 x s) (mem21 y t)))))

(declare-fun t2tb777 ((set (tuple21 (set (tuple21 c d)) d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 c d)) d)))) (sort
  (set1 (tuple2 (set1 (tuple2 c1 d1)) d1)) (t2tb777 x))))

(declare-fun tb2t777 (uni) (set (tuple21 (set (tuple21 c d)) d)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 c d)) d))))
  (! (= (tb2t777 (t2tb777 i)) i) :pattern ((t2tb777 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 c1 d1)) d1)) j)
     (= (t2tb777 (tb2t777 j)) j)) :pattern ((t2tb777 (tb2t777 j))) )))

(declare-fun t2tb778 ((tuple21 (set (tuple21 c d)) d)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 c d)) d))) (sort
  (tuple2 (set1 (tuple2 c1 d1)) d1) (t2tb778 x))))

(declare-fun tb2t778 (uni) (tuple21 (set (tuple21 c d)) d))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 c d)) d)))
  (! (= (tb2t778 (t2tb778 i)) i) :pattern ((t2tb778 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 c1 d1)) d1) j)
     (= (t2tb778 (tb2t778 j)) j)) :pattern ((t2tb778 (tb2t778 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 c d)))) (t (set d)) (x (set (tuple21 c d)))
  (y d))
  (= (mem (tuple2 (set1 (tuple2 c1 d1)) d1)
  (Tuple2 (set1 (tuple2 c1 d1)) d1 (t2tb689 x) (t2tb694 y))
  (times d1 (set1 (tuple2 c1 d1)) (t2tb688 s) (t2tb690 t)))
  (and (mem22 x s) (mem20 y t)))))

(declare-fun t2tb1916 ((set (tuple21 (set (tuple21 c d)) (tuple21 a
  c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 c d)) (tuple21 a c))))) (sort
  (set1 (tuple2 (set1 (tuple2 c1 d1)) (tuple2 a1 c1))) (t2tb1916 x))))

(declare-fun tb2t1916 (uni) (set (tuple21 (set (tuple21 c d)) (tuple21 a
  c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 c d)) (tuple21 a c)))))
  (! (= (tb2t1916 (t2tb1916 i)) i) :pattern ((t2tb1916 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 c1 d1)) (tuple2 a1 c1))) j)
     (= (t2tb1916 (tb2t1916 j)) j)) :pattern ((t2tb1916 (tb2t1916 j))) )))

(declare-fun t2tb1917 ((tuple21 (set (tuple21 c d)) (tuple21 a c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 c d)) (tuple21 a c)))) (sort
  (tuple2 (set1 (tuple2 c1 d1)) (tuple2 a1 c1)) (t2tb1917 x))))

(declare-fun tb2t1917 (uni) (tuple21 (set (tuple21 c d)) (tuple21 a c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 c d)) (tuple21 a c))))
  (! (= (tb2t1917 (t2tb1917 i)) i) :pattern ((t2tb1917 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 c1 d1)) (tuple2 a1 c1)) j)
     (= (t2tb1917 (tb2t1917 j)) j)) :pattern ((t2tb1917 (tb2t1917 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 c d)))) (t (set (tuple21 a c)))
  (x (set (tuple21 c d))) (y (tuple21 a c)))
  (= (mem (tuple2 (set1 (tuple2 c1 d1)) (tuple2 a1 c1))
  (Tuple2 (set1 (tuple2 c1 d1)) (tuple2 a1 c1) (t2tb689 x) (t2tb133 y))
  (times (tuple2 a1 c1) (set1 (tuple2 c1 d1)) (t2tb688 s) (t2tb129 t)))
  (and (mem22 x s) (mem10 y t)))))

(declare-fun t2tb2230 ((set (tuple21 (set (tuple21 c d)) (set (tuple21 b
  c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 c d)) (set (tuple21 b c)))))) (sort
  (set1 (tuple2 (set1 (tuple2 c1 d1)) (set1 (tuple2 b1 c1)))) (t2tb2230 x))))

(declare-fun tb2t2230 (uni) (set (tuple21 (set (tuple21 c d)) (set (tuple21 b
  c)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 c d)) (set (tuple21 b c))))))
  (! (= (tb2t2230 (t2tb2230 i)) i) :pattern ((t2tb2230 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 c1 d1)) (set1 (tuple2 b1 c1)))) j)
     (= (t2tb2230 (tb2t2230 j)) j)) :pattern ((t2tb2230 (tb2t2230 j))) )))

(declare-fun t2tb2231 ((tuple21 (set (tuple21 c d)) (set (tuple21 b
  c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 c d)) (set (tuple21 b c))))) (sort
  (tuple2 (set1 (tuple2 c1 d1)) (set1 (tuple2 b1 c1))) (t2tb2231 x))))

(declare-fun tb2t2231 (uni) (tuple21 (set (tuple21 c d)) (set (tuple21 b
  c))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 c d)) (set (tuple21 b c)))))
  (! (= (tb2t2231 (t2tb2231 i)) i) :pattern ((t2tb2231 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 c1 d1)) (set1 (tuple2 b1 c1))) j)
     (= (t2tb2231 (tb2t2231 j)) j)) :pattern ((t2tb2231 (tb2t2231 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 c d)))) (t (set (set (tuple21 b c))))
  (x (set (tuple21 c d))) (y (set (tuple21 b c))))
  (= (mem (tuple2 (set1 (tuple2 c1 d1)) (set1 (tuple2 b1 c1)))
  (Tuple2 (set1 (tuple2 c1 d1)) (set1 (tuple2 b1 c1)) (t2tb689 x)
  (t2tb131 y))
  (times (set1 (tuple2 b1 c1)) (set1 (tuple2 c1 d1)) (t2tb688 s) (t2tb130 t)))
  (and (mem22 x s) (mem9 y t)))))

(declare-fun t2tb2232 ((set (tuple21 (set (tuple21 c d)) (tuple21 b
  c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 c d)) (tuple21 b c))))) (sort
  (set1 (tuple2 (set1 (tuple2 c1 d1)) (tuple2 b1 c1))) (t2tb2232 x))))

(declare-fun tb2t2232 (uni) (set (tuple21 (set (tuple21 c d)) (tuple21 b
  c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 c d)) (tuple21 b c)))))
  (! (= (tb2t2232 (t2tb2232 i)) i) :pattern ((t2tb2232 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 c1 d1)) (tuple2 b1 c1))) j)
     (= (t2tb2232 (tb2t2232 j)) j)) :pattern ((t2tb2232 (tb2t2232 j))) )))

(declare-fun t2tb2233 ((tuple21 (set (tuple21 c d)) (tuple21 b c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 c d)) (tuple21 b c)))) (sort
  (tuple2 (set1 (tuple2 c1 d1)) (tuple2 b1 c1)) (t2tb2233 x))))

(declare-fun tb2t2233 (uni) (tuple21 (set (tuple21 c d)) (tuple21 b c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 c d)) (tuple21 b c))))
  (! (= (tb2t2233 (t2tb2233 i)) i) :pattern ((t2tb2233 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 c1 d1)) (tuple2 b1 c1)) j)
     (= (t2tb2233 (tb2t2233 j)) j)) :pattern ((t2tb2233 (tb2t2233 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 c d)))) (t (set (tuple21 b c)))
  (x (set (tuple21 c d))) (y (tuple21 b c)))
  (= (mem (tuple2 (set1 (tuple2 c1 d1)) (tuple2 b1 c1))
  (Tuple2 (set1 (tuple2 c1 d1)) (tuple2 b1 c1) (t2tb689 x) (t2tb134 y))
  (times (tuple2 b1 c1) (set1 (tuple2 c1 d1)) (t2tb688 s) (t2tb131 t)))
  (and (mem22 x s) (mem8 y t)))))

(declare-fun t2tb781 ((set (tuple21 (set (tuple21 c d)) c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 c d)) c)))) (sort
  (set1 (tuple2 (set1 (tuple2 c1 d1)) c1)) (t2tb781 x))))

(declare-fun tb2t781 (uni) (set (tuple21 (set (tuple21 c d)) c)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 c d)) c))))
  (! (= (tb2t781 (t2tb781 i)) i) :pattern ((t2tb781 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 c1 d1)) c1)) j)
     (= (t2tb781 (tb2t781 j)) j)) :pattern ((t2tb781 (tb2t781 j))) )))

(declare-fun t2tb782 ((tuple21 (set (tuple21 c d)) c)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 c d)) c))) (sort
  (tuple2 (set1 (tuple2 c1 d1)) c1) (t2tb782 x))))

(declare-fun tb2t782 (uni) (tuple21 (set (tuple21 c d)) c))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 c d)) c)))
  (! (= (tb2t782 (t2tb782 i)) i) :pattern ((t2tb782 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 c1 d1)) c1) j)
     (= (t2tb782 (tb2t782 j)) j)) :pattern ((t2tb782 (tb2t782 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 c d)))) (t (set c)) (x (set (tuple21 c d)))
  (y c))
  (= (mem (tuple2 (set1 (tuple2 c1 d1)) c1)
  (Tuple2 (set1 (tuple2 c1 d1)) c1 (t2tb689 x) (t2tb135 y))
  (times c1 (set1 (tuple2 c1 d1)) (t2tb688 s) (t2tb132 t)))
  (and (mem22 x s) (mem7 y t)))))

(declare-fun t2tb783 ((set (tuple21 (set (tuple21 c d)) (set (tuple21 a
  b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 c d)) (set (tuple21 a b)))))) (sort
  (set1 (tuple2 (set1 (tuple2 c1 d1)) (set1 (tuple2 a1 b1)))) (t2tb783 x))))

(declare-fun tb2t783 (uni) (set (tuple21 (set (tuple21 c d)) (set (tuple21 a
  b)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 c d)) (set (tuple21 a b))))))
  (! (= (tb2t783 (t2tb783 i)) i) :pattern ((t2tb783 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 c1 d1)) (set1 (tuple2 a1 b1)))) j)
     (= (t2tb783 (tb2t783 j)) j)) :pattern ((t2tb783 (tb2t783 j))) )))

(declare-fun t2tb784 ((tuple21 (set (tuple21 c d)) (set (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 c d)) (set (tuple21 a b))))) (sort
  (tuple2 (set1 (tuple2 c1 d1)) (set1 (tuple2 a1 b1))) (t2tb784 x))))

(declare-fun tb2t784 (uni) (tuple21 (set (tuple21 c d)) (set (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 c d)) (set (tuple21 a b)))))
  (! (= (tb2t784 (t2tb784 i)) i) :pattern ((t2tb784 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 c1 d1)) (set1 (tuple2 a1 b1))) j)
     (= (t2tb784 (tb2t784 j)) j)) :pattern ((t2tb784 (tb2t784 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 c d)))) (t (set (set (tuple21 a b))))
  (x (set (tuple21 c d))) (y (set (tuple21 a b))))
  (= (mem (tuple2 (set1 (tuple2 c1 d1)) (set1 (tuple2 a1 b1)))
  (Tuple2 (set1 (tuple2 c1 d1)) (set1 (tuple2 a1 b1)) (t2tb689 x) (t2tb11 y))
  (times (set1 (tuple2 a1 b1)) (set1 (tuple2 c1 d1)) (t2tb688 s) (t2tb10 t)))
  (and (mem22 x s) (mem4 y t)))))

(declare-fun t2tb785 ((set (tuple21 (set (tuple21 c d)) (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 c d)) (tuple21 a b))))) (sort
  (set1 (tuple2 (set1 (tuple2 c1 d1)) (tuple2 a1 b1))) (t2tb785 x))))

(declare-fun tb2t785 (uni) (set (tuple21 (set (tuple21 c d)) (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 c d)) (tuple21 a b)))))
  (! (= (tb2t785 (t2tb785 i)) i) :pattern ((t2tb785 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 c1 d1)) (tuple2 a1 b1))) j)
     (= (t2tb785 (tb2t785 j)) j)) :pattern ((t2tb785 (tb2t785 j))) )))

(declare-fun t2tb786 ((tuple21 (set (tuple21 c d)) (tuple21 a b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 c d)) (tuple21 a b)))) (sort
  (tuple2 (set1 (tuple2 c1 d1)) (tuple2 a1 b1)) (t2tb786 x))))

(declare-fun tb2t786 (uni) (tuple21 (set (tuple21 c d)) (tuple21 a b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 c d)) (tuple21 a b))))
  (! (= (tb2t786 (t2tb786 i)) i) :pattern ((t2tb786 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 c1 d1)) (tuple2 a1 b1)) j)
     (= (t2tb786 (tb2t786 j)) j)) :pattern ((t2tb786 (tb2t786 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 c d)))) (t (set (tuple21 a b)))
  (x (set (tuple21 c d))) (y (tuple21 a b)))
  (= (mem (tuple2 (set1 (tuple2 c1 d1)) (tuple2 a1 b1))
  (Tuple2 (set1 (tuple2 c1 d1)) (tuple2 a1 b1) (t2tb689 x) (t2tb13 y))
  (times (tuple2 a1 b1) (set1 (tuple2 c1 d1)) (t2tb688 s) (t2tb11 t)))
  (and (mem22 x s) (mem3 y t)))))

(declare-fun t2tb787 ((set (tuple21 (set (tuple21 c d)) b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 c d)) b)))) (sort
  (set1 (tuple2 (set1 (tuple2 c1 d1)) b1)) (t2tb787 x))))

(declare-fun tb2t787 (uni) (set (tuple21 (set (tuple21 c d)) b)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 c d)) b))))
  (! (= (tb2t787 (t2tb787 i)) i) :pattern ((t2tb787 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 c1 d1)) b1)) j)
     (= (t2tb787 (tb2t787 j)) j)) :pattern ((t2tb787 (tb2t787 j))) )))

(declare-fun t2tb788 ((tuple21 (set (tuple21 c d)) b)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 c d)) b))) (sort
  (tuple2 (set1 (tuple2 c1 d1)) b1) (t2tb788 x))))

(declare-fun tb2t788 (uni) (tuple21 (set (tuple21 c d)) b))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 c d)) b)))
  (! (= (tb2t788 (t2tb788 i)) i) :pattern ((t2tb788 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 c1 d1)) b1) j)
     (= (t2tb788 (tb2t788 j)) j)) :pattern ((t2tb788 (tb2t788 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 c d)))) (t (set b)) (x (set (tuple21 c d)))
  (y b))
  (= (mem (tuple2 (set1 (tuple2 c1 d1)) b1)
  (Tuple2 (set1 (tuple2 c1 d1)) b1 (t2tb689 x) (t2tb14 y))
  (times b1 (set1 (tuple2 c1 d1)) (t2tb688 s) (t2tb12 t)))
  (and (mem22 x s) (mem2 y t)))))

(declare-fun t2tb789 ((set (tuple21 (set (tuple21 c d)) a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 c d)) a)))) (sort
  (set1 (tuple2 (set1 (tuple2 c1 d1)) a1)) (t2tb789 x))))

(declare-fun tb2t789 (uni) (set (tuple21 (set (tuple21 c d)) a)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 c d)) a))))
  (! (= (tb2t789 (t2tb789 i)) i) :pattern ((t2tb789 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 c1 d1)) a1)) j)
     (= (t2tb789 (tb2t789 j)) j)) :pattern ((t2tb789 (tb2t789 j))) )))

(declare-fun t2tb790 ((tuple21 (set (tuple21 c d)) a)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 c d)) a))) (sort
  (tuple2 (set1 (tuple2 c1 d1)) a1) (t2tb790 x))))

(declare-fun tb2t790 (uni) (tuple21 (set (tuple21 c d)) a))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 c d)) a)))
  (! (= (tb2t790 (t2tb790 i)) i) :pattern ((t2tb790 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 c1 d1)) a1) j)
     (= (t2tb790 (tb2t790 j)) j)) :pattern ((t2tb790 (tb2t790 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 c d)))) (t (set a)) (x (set (tuple21 c d)))
  (y a))
  (= (mem (tuple2 (set1 (tuple2 c1 d1)) a1)
  (Tuple2 (set1 (tuple2 c1 d1)) a1 (t2tb689 x) (t2tb2 y))
  (times a1 (set1 (tuple2 c1 d1)) (t2tb688 s) (t2tb1 t)))
  (and (mem22 x s) (mem1 y t)))))

;; mem_times
  (assert
  (forall ((b2 ty))
  (forall ((s (set (set (tuple21 c d)))) (t uni) (x (set (tuple21 c d)))
  (y uni))
  (= (mem (tuple2 (set1 (tuple2 c1 d1)) b2)
  (Tuple2 (set1 (tuple2 c1 d1)) b2 (t2tb689 x) y)
  (times b2 (set1 (tuple2 c1 d1)) (t2tb688 s) t))
  (and (mem22 x s) (mem b2 y t))))))

(declare-fun t2tb2234 ((set (tuple21 (tuple21 c d) (tuple21 a d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 c d) (tuple21 a d))))) (sort
  (set1 (tuple2 (tuple2 c1 d1) (tuple2 a1 d1))) (t2tb2234 x))))

(declare-fun tb2t2234 (uni) (set (tuple21 (tuple21 c d) (tuple21 a d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 c d) (tuple21 a d)))))
  (! (= (tb2t2234 (t2tb2234 i)) i) :pattern ((t2tb2234 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 c1 d1) (tuple2 a1 d1))) j)
     (= (t2tb2234 (tb2t2234 j)) j)) :pattern ((t2tb2234 (tb2t2234 j))) )))

(declare-fun t2tb2235 ((tuple21 (tuple21 c d) (tuple21 a d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 c d) (tuple21 a d)))) (sort
  (tuple2 (tuple2 c1 d1) (tuple2 a1 d1)) (t2tb2235 x))))

(declare-fun tb2t2235 (uni) (tuple21 (tuple21 c d) (tuple21 a d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 c d) (tuple21 a d))))
  (! (= (tb2t2235 (t2tb2235 i)) i) :pattern ((t2tb2235 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 c1 d1) (tuple2 a1 d1)) j)
     (= (t2tb2235 (tb2t2235 j)) j)) :pattern ((t2tb2235 (tb2t2235 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 c d))) (t (set (tuple21 a d))) (x (tuple21 c d))
  (y (tuple21 a d)))
  (= (mem (tuple2 (tuple2 c1 d1) (tuple2 a1 d1))
  (Tuple2 (tuple2 c1 d1) (tuple2 a1 d1) (t2tb693 x) (t2tb904 y))
  (times (tuple2 a1 d1) (tuple2 c1 d1) (t2tb689 s) (t2tb903 t)))
  (and (mem21 x s) (mem32 y t)))))

(declare-fun t2tb2046 ((set (tuple21 (tuple21 c d) (tuple21 b d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 c d) (tuple21 b d))))) (sort
  (set1 (tuple2 (tuple2 c1 d1) (tuple2 b1 d1))) (t2tb2046 x))))

(declare-fun tb2t2046 (uni) (set (tuple21 (tuple21 c d) (tuple21 b d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 c d) (tuple21 b d)))))
  (! (= (tb2t2046 (t2tb2046 i)) i) :pattern ((t2tb2046 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 c1 d1) (tuple2 b1 d1))) j)
     (= (t2tb2046 (tb2t2046 j)) j)) :pattern ((t2tb2046 (tb2t2046 j))) )))

(declare-fun t2tb2047 ((tuple21 (tuple21 c d) (tuple21 b d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 c d) (tuple21 b d)))) (sort
  (tuple2 (tuple2 c1 d1) (tuple2 b1 d1)) (t2tb2047 x))))

(declare-fun tb2t2047 (uni) (tuple21 (tuple21 c d) (tuple21 b d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 c d) (tuple21 b d))))
  (! (= (tb2t2047 (t2tb2047 i)) i) :pattern ((t2tb2047 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 c1 d1) (tuple2 b1 d1)) j)
     (= (t2tb2047 (tb2t2047 j)) j)) :pattern ((t2tb2047 (tb2t2047 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 c d))) (t (set (tuple21 b d))) (x (tuple21 c d))
  (y (tuple21 b d)))
  (= (mem (tuple2 (tuple2 c1 d1) (tuple2 b1 d1))
  (Tuple2 (tuple2 c1 d1) (tuple2 b1 d1) (t2tb693 x) (t2tb692 y))
  (times (tuple2 b1 d1) (tuple2 c1 d1) (t2tb689 s) (t2tb687 t)))
  (and (mem21 x s) (mem23 y t)))))

(declare-fun t2tb797 ((set (tuple21 (tuple21 c d) (set (tuple21 c d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 c d) (set (tuple21 c d)))))) (sort
  (set1 (tuple2 (tuple2 c1 d1) (set1 (tuple2 c1 d1)))) (t2tb797 x))))

(declare-fun tb2t797 (uni) (set (tuple21 (tuple21 c d) (set (tuple21 c d)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 c d) (set (tuple21 c d))))))
  (! (= (tb2t797 (t2tb797 i)) i) :pattern ((t2tb797 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 c1 d1) (set1 (tuple2 c1 d1)))) j)
     (= (t2tb797 (tb2t797 j)) j)) :pattern ((t2tb797 (tb2t797 j))) )))

(declare-fun t2tb798 ((tuple21 (tuple21 c d) (set (tuple21 c d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 c d) (set (tuple21 c d))))) (sort
  (tuple2 (tuple2 c1 d1) (set1 (tuple2 c1 d1))) (t2tb798 x))))

(declare-fun tb2t798 (uni) (tuple21 (tuple21 c d) (set (tuple21 c d))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 c d) (set (tuple21 c d)))))
  (! (= (tb2t798 (t2tb798 i)) i) :pattern ((t2tb798 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 c1 d1) (set1 (tuple2 c1 d1))) j)
     (= (t2tb798 (tb2t798 j)) j)) :pattern ((t2tb798 (tb2t798 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 c d))) (t (set (set (tuple21 c d))))
  (x (tuple21 c d)) (y (set (tuple21 c d))))
  (= (mem (tuple2 (tuple2 c1 d1) (set1 (tuple2 c1 d1)))
  (Tuple2 (tuple2 c1 d1) (set1 (tuple2 c1 d1)) (t2tb693 x) (t2tb689 y))
  (times (set1 (tuple2 c1 d1)) (tuple2 c1 d1) (t2tb689 s) (t2tb688 t)))
  (and (mem21 x s) (mem22 y t)))))

(declare-fun t2tb799 ((set (tuple21 (tuple21 c d) (tuple21 c d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 c d) (tuple21 c d))))) (sort
  (set1 (tuple2 (tuple2 c1 d1) (tuple2 c1 d1))) (t2tb799 x))))

(declare-fun tb2t799 (uni) (set (tuple21 (tuple21 c d) (tuple21 c d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 c d) (tuple21 c d)))))
  (! (= (tb2t799 (t2tb799 i)) i) :pattern ((t2tb799 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 c1 d1) (tuple2 c1 d1))) j)
     (= (t2tb799 (tb2t799 j)) j)) :pattern ((t2tb799 (tb2t799 j))) )))

(declare-fun t2tb800 ((tuple21 (tuple21 c d) (tuple21 c d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 c d) (tuple21 c d)))) (sort
  (tuple2 (tuple2 c1 d1) (tuple2 c1 d1)) (t2tb800 x))))

(declare-fun tb2t800 (uni) (tuple21 (tuple21 c d) (tuple21 c d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 c d) (tuple21 c d))))
  (! (= (tb2t800 (t2tb800 i)) i) :pattern ((t2tb800 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 c1 d1) (tuple2 c1 d1)) j)
     (= (t2tb800 (tb2t800 j)) j)) :pattern ((t2tb800 (tb2t800 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 c d))) (t (set (tuple21 c d))) (x (tuple21 c d))
  (y (tuple21 c d)))
  (= (mem (tuple2 (tuple2 c1 d1) (tuple2 c1 d1))
  (Tuple2 (tuple2 c1 d1) (tuple2 c1 d1) (t2tb693 x) (t2tb693 y))
  (times (tuple2 c1 d1) (tuple2 c1 d1) (t2tb689 s) (t2tb689 t)))
  (and (mem21 x s) (mem21 y t)))))

(declare-fun t2tb801 ((set (tuple21 (tuple21 c d) d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 c d) d)))) (sort
  (set1 (tuple2 (tuple2 c1 d1) d1)) (t2tb801 x))))

(declare-fun tb2t801 (uni) (set (tuple21 (tuple21 c d) d)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 c d) d))))
  (! (= (tb2t801 (t2tb801 i)) i) :pattern ((t2tb801 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 c1 d1) d1)) j)
     (= (t2tb801 (tb2t801 j)) j)) :pattern ((t2tb801 (tb2t801 j))) )))

(declare-fun t2tb802 ((tuple21 (tuple21 c d) d)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 c d) d))) (sort (tuple2 (tuple2 c1 d1) d1)
  (t2tb802 x))))

(declare-fun tb2t802 (uni) (tuple21 (tuple21 c d) d))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 c d) d)))
  (! (= (tb2t802 (t2tb802 i)) i) :pattern ((t2tb802 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 c1 d1) d1) j) (= (t2tb802 (tb2t802 j)) j)) :pattern (
  (t2tb802 (tb2t802 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 c d))) (t (set d)) (x (tuple21 c d)) (y d))
  (= (mem (tuple2 (tuple2 c1 d1) d1)
  (Tuple2 (tuple2 c1 d1) d1 (t2tb693 x) (t2tb694 y))
  (times d1 (tuple2 c1 d1) (t2tb689 s) (t2tb690 t)))
  (and (mem21 x s) (mem20 y t)))))

(declare-fun t2tb1918 ((set (tuple21 (tuple21 c d) (tuple21 a c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 c d) (tuple21 a c))))) (sort
  (set1 (tuple2 (tuple2 c1 d1) (tuple2 a1 c1))) (t2tb1918 x))))

(declare-fun tb2t1918 (uni) (set (tuple21 (tuple21 c d) (tuple21 a c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 c d) (tuple21 a c)))))
  (! (= (tb2t1918 (t2tb1918 i)) i) :pattern ((t2tb1918 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 c1 d1) (tuple2 a1 c1))) j)
     (= (t2tb1918 (tb2t1918 j)) j)) :pattern ((t2tb1918 (tb2t1918 j))) )))

(declare-fun t2tb1919 ((tuple21 (tuple21 c d) (tuple21 a c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 c d) (tuple21 a c)))) (sort
  (tuple2 (tuple2 c1 d1) (tuple2 a1 c1)) (t2tb1919 x))))

(declare-fun tb2t1919 (uni) (tuple21 (tuple21 c d) (tuple21 a c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 c d) (tuple21 a c))))
  (! (= (tb2t1919 (t2tb1919 i)) i) :pattern ((t2tb1919 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 c1 d1) (tuple2 a1 c1)) j)
     (= (t2tb1919 (tb2t1919 j)) j)) :pattern ((t2tb1919 (tb2t1919 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 c d))) (t (set (tuple21 a c))) (x (tuple21 c d))
  (y (tuple21 a c)))
  (= (mem (tuple2 (tuple2 c1 d1) (tuple2 a1 c1))
  (Tuple2 (tuple2 c1 d1) (tuple2 a1 c1) (t2tb693 x) (t2tb133 y))
  (times (tuple2 a1 c1) (tuple2 c1 d1) (t2tb689 s) (t2tb129 t)))
  (and (mem21 x s) (mem10 y t)))))

(declare-fun t2tb2236 ((set (tuple21 (tuple21 c d) (set (tuple21 b
  c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 c d) (set (tuple21 b c)))))) (sort
  (set1 (tuple2 (tuple2 c1 d1) (set1 (tuple2 b1 c1)))) (t2tb2236 x))))

(declare-fun tb2t2236 (uni) (set (tuple21 (tuple21 c d) (set (tuple21 b
  c)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 c d) (set (tuple21 b c))))))
  (! (= (tb2t2236 (t2tb2236 i)) i) :pattern ((t2tb2236 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 c1 d1) (set1 (tuple2 b1 c1)))) j)
     (= (t2tb2236 (tb2t2236 j)) j)) :pattern ((t2tb2236 (tb2t2236 j))) )))

(declare-fun t2tb2237 ((tuple21 (tuple21 c d) (set (tuple21 b c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 c d) (set (tuple21 b c))))) (sort
  (tuple2 (tuple2 c1 d1) (set1 (tuple2 b1 c1))) (t2tb2237 x))))

(declare-fun tb2t2237 (uni) (tuple21 (tuple21 c d) (set (tuple21 b c))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 c d) (set (tuple21 b c)))))
  (! (= (tb2t2237 (t2tb2237 i)) i) :pattern ((t2tb2237 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 c1 d1) (set1 (tuple2 b1 c1))) j)
     (= (t2tb2237 (tb2t2237 j)) j)) :pattern ((t2tb2237 (tb2t2237 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 c d))) (t (set (set (tuple21 b c))))
  (x (tuple21 c d)) (y (set (tuple21 b c))))
  (= (mem (tuple2 (tuple2 c1 d1) (set1 (tuple2 b1 c1)))
  (Tuple2 (tuple2 c1 d1) (set1 (tuple2 b1 c1)) (t2tb693 x) (t2tb131 y))
  (times (set1 (tuple2 b1 c1)) (tuple2 c1 d1) (t2tb689 s) (t2tb130 t)))
  (and (mem21 x s) (mem9 y t)))))

(declare-fun t2tb2238 ((tuple21 (tuple21 c d) (tuple21 b c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 c d) (tuple21 b c)))) (sort
  (tuple2 (tuple2 c1 d1) (tuple2 b1 c1)) (t2tb2238 x))))

(declare-fun tb2t2238 (uni) (tuple21 (tuple21 c d) (tuple21 b c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 c d) (tuple21 b c))))
  (! (= (tb2t2238 (t2tb2238 i)) i) :pattern ((t2tb2238 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 c1 d1) (tuple2 b1 c1)) j)
     (= (t2tb2238 (tb2t2238 j)) j)) :pattern ((t2tb2238 (tb2t2238 j))) )))

(declare-fun t2tb2239 ((set (tuple21 (tuple21 c d) (tuple21 b c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 c d) (tuple21 b c))))) (sort
  (set1 (tuple2 (tuple2 c1 d1) (tuple2 b1 c1))) (t2tb2239 x))))

(declare-fun tb2t2239 (uni) (set (tuple21 (tuple21 c d) (tuple21 b c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 c d) (tuple21 b c)))))
  (! (= (tb2t2239 (t2tb2239 i)) i) :pattern ((t2tb2239 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 c1 d1) (tuple2 b1 c1))) j)
     (= (t2tb2239 (tb2t2239 j)) j)) :pattern ((t2tb2239 (tb2t2239 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 c d))) (t (set (tuple21 b c))) (x (tuple21 c d))
  (y (tuple21 b c)))
  (= (mem (tuple2 (tuple2 c1 d1) (tuple2 b1 c1))
  (Tuple2 (tuple2 c1 d1) (tuple2 b1 c1) (t2tb693 x) (t2tb134 y))
  (times (tuple2 b1 c1) (tuple2 c1 d1) (t2tb689 s) (t2tb131 t)))
  (and (mem21 x s) (mem8 y t)))))

(declare-fun t2tb805 ((set (tuple21 (tuple21 c d) c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 c d) c)))) (sort
  (set1 (tuple2 (tuple2 c1 d1) c1)) (t2tb805 x))))

(declare-fun tb2t805 (uni) (set (tuple21 (tuple21 c d) c)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 c d) c))))
  (! (= (tb2t805 (t2tb805 i)) i) :pattern ((t2tb805 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 c1 d1) c1)) j)
     (= (t2tb805 (tb2t805 j)) j)) :pattern ((t2tb805 (tb2t805 j))) )))

(declare-fun t2tb806 ((tuple21 (tuple21 c d) c)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 c d) c))) (sort (tuple2 (tuple2 c1 d1) c1)
  (t2tb806 x))))

(declare-fun tb2t806 (uni) (tuple21 (tuple21 c d) c))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 c d) c)))
  (! (= (tb2t806 (t2tb806 i)) i) :pattern ((t2tb806 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 c1 d1) c1) j) (= (t2tb806 (tb2t806 j)) j)) :pattern (
  (t2tb806 (tb2t806 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 c d))) (t (set c)) (x (tuple21 c d)) (y c))
  (= (mem (tuple2 (tuple2 c1 d1) c1)
  (Tuple2 (tuple2 c1 d1) c1 (t2tb693 x) (t2tb135 y))
  (times c1 (tuple2 c1 d1) (t2tb689 s) (t2tb132 t)))
  (and (mem21 x s) (mem7 y t)))))

(declare-fun t2tb807 ((set (tuple21 (tuple21 c d) (set (tuple21 a b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 c d) (set (tuple21 a b)))))) (sort
  (set1 (tuple2 (tuple2 c1 d1) (set1 (tuple2 a1 b1)))) (t2tb807 x))))

(declare-fun tb2t807 (uni) (set (tuple21 (tuple21 c d) (set (tuple21 a b)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 c d) (set (tuple21 a b))))))
  (! (= (tb2t807 (t2tb807 i)) i) :pattern ((t2tb807 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 c1 d1) (set1 (tuple2 a1 b1)))) j)
     (= (t2tb807 (tb2t807 j)) j)) :pattern ((t2tb807 (tb2t807 j))) )))

(declare-fun t2tb808 ((tuple21 (tuple21 c d) (set (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 c d) (set (tuple21 a b))))) (sort
  (tuple2 (tuple2 c1 d1) (set1 (tuple2 a1 b1))) (t2tb808 x))))

(declare-fun tb2t808 (uni) (tuple21 (tuple21 c d) (set (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 c d) (set (tuple21 a b)))))
  (! (= (tb2t808 (t2tb808 i)) i) :pattern ((t2tb808 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 c1 d1) (set1 (tuple2 a1 b1))) j)
     (= (t2tb808 (tb2t808 j)) j)) :pattern ((t2tb808 (tb2t808 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 c d))) (t (set (set (tuple21 a b))))
  (x (tuple21 c d)) (y (set (tuple21 a b))))
  (= (mem (tuple2 (tuple2 c1 d1) (set1 (tuple2 a1 b1)))
  (Tuple2 (tuple2 c1 d1) (set1 (tuple2 a1 b1)) (t2tb693 x) (t2tb11 y))
  (times (set1 (tuple2 a1 b1)) (tuple2 c1 d1) (t2tb689 s) (t2tb10 t)))
  (and (mem21 x s) (mem4 y t)))))

(declare-fun t2tb809 ((set (tuple21 (tuple21 c d) (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 c d) (tuple21 a b))))) (sort
  (set1 (tuple2 (tuple2 c1 d1) (tuple2 a1 b1))) (t2tb809 x))))

(declare-fun tb2t809 (uni) (set (tuple21 (tuple21 c d) (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 c d) (tuple21 a b)))))
  (! (= (tb2t809 (t2tb809 i)) i) :pattern ((t2tb809 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 c1 d1) (tuple2 a1 b1))) j)
     (= (t2tb809 (tb2t809 j)) j)) :pattern ((t2tb809 (tb2t809 j))) )))

(declare-fun t2tb810 ((tuple21 (tuple21 c d) (tuple21 a b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 c d) (tuple21 a b)))) (sort
  (tuple2 (tuple2 c1 d1) (tuple2 a1 b1)) (t2tb810 x))))

(declare-fun tb2t810 (uni) (tuple21 (tuple21 c d) (tuple21 a b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 c d) (tuple21 a b))))
  (! (= (tb2t810 (t2tb810 i)) i) :pattern ((t2tb810 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 c1 d1) (tuple2 a1 b1)) j)
     (= (t2tb810 (tb2t810 j)) j)) :pattern ((t2tb810 (tb2t810 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 c d))) (t (set (tuple21 a b))) (x (tuple21 c d))
  (y (tuple21 a b)))
  (= (mem (tuple2 (tuple2 c1 d1) (tuple2 a1 b1))
  (Tuple2 (tuple2 c1 d1) (tuple2 a1 b1) (t2tb693 x) (t2tb13 y))
  (times (tuple2 a1 b1) (tuple2 c1 d1) (t2tb689 s) (t2tb11 t)))
  (and (mem21 x s) (mem3 y t)))))

(declare-fun t2tb811 ((set (tuple21 (tuple21 c d) b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 c d) b)))) (sort
  (set1 (tuple2 (tuple2 c1 d1) b1)) (t2tb811 x))))

(declare-fun tb2t811 (uni) (set (tuple21 (tuple21 c d) b)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 c d) b))))
  (! (= (tb2t811 (t2tb811 i)) i) :pattern ((t2tb811 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 c1 d1) b1)) j)
     (= (t2tb811 (tb2t811 j)) j)) :pattern ((t2tb811 (tb2t811 j))) )))

(declare-fun t2tb812 ((tuple21 (tuple21 c d) b)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 c d) b))) (sort (tuple2 (tuple2 c1 d1) b1)
  (t2tb812 x))))

(declare-fun tb2t812 (uni) (tuple21 (tuple21 c d) b))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 c d) b)))
  (! (= (tb2t812 (t2tb812 i)) i) :pattern ((t2tb812 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 c1 d1) b1) j) (= (t2tb812 (tb2t812 j)) j)) :pattern (
  (t2tb812 (tb2t812 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 c d))) (t (set b)) (x (tuple21 c d)) (y b))
  (= (mem (tuple2 (tuple2 c1 d1) b1)
  (Tuple2 (tuple2 c1 d1) b1 (t2tb693 x) (t2tb14 y))
  (times b1 (tuple2 c1 d1) (t2tb689 s) (t2tb12 t)))
  (and (mem21 x s) (mem2 y t)))))

(declare-fun t2tb813 ((set (tuple21 (tuple21 c d) a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 c d) a)))) (sort
  (set1 (tuple2 (tuple2 c1 d1) a1)) (t2tb813 x))))

(declare-fun tb2t813 (uni) (set (tuple21 (tuple21 c d) a)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 c d) a))))
  (! (= (tb2t813 (t2tb813 i)) i) :pattern ((t2tb813 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 c1 d1) a1)) j)
     (= (t2tb813 (tb2t813 j)) j)) :pattern ((t2tb813 (tb2t813 j))) )))

(declare-fun t2tb814 ((tuple21 (tuple21 c d) a)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 c d) a))) (sort (tuple2 (tuple2 c1 d1) a1)
  (t2tb814 x))))

(declare-fun tb2t814 (uni) (tuple21 (tuple21 c d) a))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 c d) a)))
  (! (= (tb2t814 (t2tb814 i)) i) :pattern ((t2tb814 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 c1 d1) a1) j) (= (t2tb814 (tb2t814 j)) j)) :pattern (
  (t2tb814 (tb2t814 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 c d))) (t (set a)) (x (tuple21 c d)) (y a))
  (= (mem (tuple2 (tuple2 c1 d1) a1)
  (Tuple2 (tuple2 c1 d1) a1 (t2tb693 x) (t2tb2 y))
  (times a1 (tuple2 c1 d1) (t2tb689 s) (t2tb1 t)))
  (and (mem21 x s) (mem1 y t)))))

;; mem_times
  (assert
  (forall ((b2 ty))
  (forall ((s (set (tuple21 c d))) (t uni) (x (tuple21 c d)) (y uni))
  (= (mem (tuple2 (tuple2 c1 d1) b2) (Tuple2 (tuple2 c1 d1) b2 (t2tb693 x) y)
  (times b2 (tuple2 c1 d1) (t2tb689 s) t)) (and (mem21 x s) (mem b2 y t))))))

(declare-fun t2tb2240 ((set (tuple21 d (tuple21 a d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 d (tuple21 a d))))) (sort
  (set1 (tuple2 d1 (tuple2 a1 d1))) (t2tb2240 x))))

(declare-fun tb2t2240 (uni) (set (tuple21 d (tuple21 a d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 d (tuple21 a d)))))
  (! (= (tb2t2240 (t2tb2240 i)) i) :pattern ((t2tb2240 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 d1 (tuple2 a1 d1))) j)
     (= (t2tb2240 (tb2t2240 j)) j)) :pattern ((t2tb2240 (tb2t2240 j))) )))

(declare-fun t2tb2241 ((tuple21 d (tuple21 a d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 d (tuple21 a d)))) (sort (tuple2 d1 (tuple2 a1 d1))
  (t2tb2241 x))))

(declare-fun tb2t2241 (uni) (tuple21 d (tuple21 a d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 d (tuple21 a d))))
  (! (= (tb2t2241 (t2tb2241 i)) i) :pattern ((t2tb2241 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 d1 (tuple2 a1 d1)) j) (= (t2tb2241 (tb2t2241 j)) j)) :pattern (
  (t2tb2241 (tb2t2241 j))) )))

;; mem_times
  (assert
  (forall ((s (set d)) (t (set (tuple21 a d))) (x d) (y (tuple21 a d)))
  (= (mem (tuple2 d1 (tuple2 a1 d1))
  (Tuple2 d1 (tuple2 a1 d1) (t2tb694 x) (t2tb904 y))
  (times (tuple2 a1 d1) d1 (t2tb690 s) (t2tb903 t)))
  (and (mem20 x s) (mem32 y t)))))

(declare-fun t2tb2048 ((set (tuple21 d (tuple21 b d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 d (tuple21 b d))))) (sort
  (set1 (tuple2 d1 (tuple2 b1 d1))) (t2tb2048 x))))

(declare-fun tb2t2048 (uni) (set (tuple21 d (tuple21 b d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 d (tuple21 b d)))))
  (! (= (tb2t2048 (t2tb2048 i)) i) :pattern ((t2tb2048 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 d1 (tuple2 b1 d1))) j)
     (= (t2tb2048 (tb2t2048 j)) j)) :pattern ((t2tb2048 (tb2t2048 j))) )))

(declare-fun t2tb820 ((tuple21 d (tuple21 b d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 d (tuple21 b d)))) (sort (tuple2 d1 (tuple2 b1 d1))
  (t2tb820 x))))

(declare-fun tb2t820 (uni) (tuple21 d (tuple21 b d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 d (tuple21 b d))))
  (! (= (tb2t820 (t2tb820 i)) i) :pattern ((t2tb820 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 d1 (tuple2 b1 d1)) j) (= (t2tb820 (tb2t820 j)) j)) :pattern (
  (t2tb820 (tb2t820 j))) )))

;; mem_times
  (assert
  (forall ((s (set d)) (t (set (tuple21 b d))) (x d) (y (tuple21 b d)))
  (= (mem (tuple2 d1 (tuple2 b1 d1))
  (Tuple2 d1 (tuple2 b1 d1) (t2tb694 x) (t2tb692 y))
  (times (tuple2 b1 d1) d1 (t2tb690 s) (t2tb687 t)))
  (and (mem20 x s) (mem23 y t)))))

(declare-fun t2tb821 ((set (tuple21 d (set (tuple21 c d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 d (set (tuple21 c d)))))) (sort
  (set1 (tuple2 d1 (set1 (tuple2 c1 d1)))) (t2tb821 x))))

(declare-fun tb2t821 (uni) (set (tuple21 d (set (tuple21 c d)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 d (set (tuple21 c d))))))
  (! (= (tb2t821 (t2tb821 i)) i) :pattern ((t2tb821 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 d1 (set1 (tuple2 c1 d1)))) j)
     (= (t2tb821 (tb2t821 j)) j)) :pattern ((t2tb821 (tb2t821 j))) )))

(declare-fun t2tb822 ((tuple21 d (set (tuple21 c d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 d (set (tuple21 c d))))) (sort
  (tuple2 d1 (set1 (tuple2 c1 d1))) (t2tb822 x))))

(declare-fun tb2t822 (uni) (tuple21 d (set (tuple21 c d))))

;; BridgeL
  (assert
  (forall ((i (tuple21 d (set (tuple21 c d)))))
  (! (= (tb2t822 (t2tb822 i)) i) :pattern ((t2tb822 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 d1 (set1 (tuple2 c1 d1))) j)
     (= (t2tb822 (tb2t822 j)) j)) :pattern ((t2tb822 (tb2t822 j))) )))

;; mem_times
  (assert
  (forall ((s (set d)) (t (set (set (tuple21 c d)))) (x d) (y (set (tuple21 c
  d))))
  (= (mem (tuple2 d1 (set1 (tuple2 c1 d1)))
  (Tuple2 d1 (set1 (tuple2 c1 d1)) (t2tb694 x) (t2tb689 y))
  (times (set1 (tuple2 c1 d1)) d1 (t2tb690 s) (t2tb688 t)))
  (and (mem20 x s) (mem22 y t)))))

(declare-fun t2tb823 ((set (tuple21 d (tuple21 c d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 d (tuple21 c d))))) (sort
  (set1 (tuple2 d1 (tuple2 c1 d1))) (t2tb823 x))))

(declare-fun tb2t823 (uni) (set (tuple21 d (tuple21 c d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 d (tuple21 c d)))))
  (! (= (tb2t823 (t2tb823 i)) i) :pattern ((t2tb823 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 d1 (tuple2 c1 d1))) j)
     (= (t2tb823 (tb2t823 j)) j)) :pattern ((t2tb823 (tb2t823 j))) )))

(declare-fun t2tb824 ((tuple21 d (tuple21 c d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 d (tuple21 c d)))) (sort (tuple2 d1 (tuple2 c1 d1))
  (t2tb824 x))))

(declare-fun tb2t824 (uni) (tuple21 d (tuple21 c d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 d (tuple21 c d))))
  (! (= (tb2t824 (t2tb824 i)) i) :pattern ((t2tb824 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 d1 (tuple2 c1 d1)) j) (= (t2tb824 (tb2t824 j)) j)) :pattern (
  (t2tb824 (tb2t824 j))) )))

;; mem_times
  (assert
  (forall ((s (set d)) (t (set (tuple21 c d))) (x d) (y (tuple21 c d)))
  (= (mem (tuple2 d1 (tuple2 c1 d1))
  (Tuple2 d1 (tuple2 c1 d1) (t2tb694 x) (t2tb693 y))
  (times (tuple2 c1 d1) d1 (t2tb690 s) (t2tb689 t)))
  (and (mem20 x s) (mem21 y t)))))

(declare-fun t2tb825 ((set (tuple21 d d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 d d)))) (sort (set1 (tuple2 d1 d1)) (t2tb825 x))))

(declare-fun tb2t825 (uni) (set (tuple21 d d)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 d d))))
  (! (= (tb2t825 (t2tb825 i)) i) :pattern ((t2tb825 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 d1 d1)) j) (= (t2tb825 (tb2t825 j)) j)) :pattern (
  (t2tb825 (tb2t825 j))) )))

(declare-fun t2tb826 ((tuple21 d d)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 d d))) (sort (tuple2 d1 d1) (t2tb826 x))))

(declare-fun tb2t826 (uni) (tuple21 d d))

;; BridgeL
  (assert
  (forall ((i (tuple21 d d)))
  (! (= (tb2t826 (t2tb826 i)) i) :pattern ((t2tb826 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 d1 d1) j) (= (t2tb826 (tb2t826 j)) j)) :pattern (
  (t2tb826 (tb2t826 j))) )))

;; mem_times
  (assert
  (forall ((s (set d)) (t (set d)) (x d) (y d))
  (= (mem (tuple2 d1 d1) (Tuple2 d1 d1 (t2tb694 x) (t2tb694 y))
  (times d1 d1 (t2tb690 s) (t2tb690 t))) (and (mem20 x s) (mem20 y t)))))

(declare-fun t2tb1781 ((tuple21 d (tuple21 a c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 d (tuple21 a c)))) (sort (tuple2 d1 (tuple2 a1 c1))
  (t2tb1781 x))))

(declare-fun tb2t1781 (uni) (tuple21 d (tuple21 a c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 d (tuple21 a c))))
  (! (= (tb2t1781 (t2tb1781 i)) i) :pattern ((t2tb1781 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 d1 (tuple2 a1 c1)) j) (= (t2tb1781 (tb2t1781 j)) j)) :pattern (
  (t2tb1781 (tb2t1781 j))) )))

(declare-fun t2tb1920 ((set (tuple21 d (tuple21 a c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 d (tuple21 a c))))) (sort
  (set1 (tuple2 d1 (tuple2 a1 c1))) (t2tb1920 x))))

(declare-fun tb2t1920 (uni) (set (tuple21 d (tuple21 a c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 d (tuple21 a c)))))
  (! (= (tb2t1920 (t2tb1920 i)) i) :pattern ((t2tb1920 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 d1 (tuple2 a1 c1))) j)
     (= (t2tb1920 (tb2t1920 j)) j)) :pattern ((t2tb1920 (tb2t1920 j))) )))

;; mem_times
  (assert
  (forall ((s (set d)) (t (set (tuple21 a c))) (x d) (y (tuple21 a c)))
  (= (mem (tuple2 d1 (tuple2 a1 c1))
  (Tuple2 d1 (tuple2 a1 c1) (t2tb694 x) (t2tb133 y))
  (times (tuple2 a1 c1) d1 (t2tb690 s) (t2tb129 t)))
  (and (mem20 x s) (mem10 y t)))))

(declare-fun t2tb2242 ((set (tuple21 d (set (tuple21 b c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 d (set (tuple21 b c)))))) (sort
  (set1 (tuple2 d1 (set1 (tuple2 b1 c1)))) (t2tb2242 x))))

(declare-fun tb2t2242 (uni) (set (tuple21 d (set (tuple21 b c)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 d (set (tuple21 b c))))))
  (! (= (tb2t2242 (t2tb2242 i)) i) :pattern ((t2tb2242 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 d1 (set1 (tuple2 b1 c1)))) j)
     (= (t2tb2242 (tb2t2242 j)) j)) :pattern ((t2tb2242 (tb2t2242 j))) )))

(declare-fun t2tb2243 ((tuple21 d (set (tuple21 b c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 d (set (tuple21 b c))))) (sort
  (tuple2 d1 (set1 (tuple2 b1 c1))) (t2tb2243 x))))

(declare-fun tb2t2243 (uni) (tuple21 d (set (tuple21 b c))))

;; BridgeL
  (assert
  (forall ((i (tuple21 d (set (tuple21 b c)))))
  (! (= (tb2t2243 (t2tb2243 i)) i) :pattern ((t2tb2243 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 d1 (set1 (tuple2 b1 c1))) j)
     (= (t2tb2243 (tb2t2243 j)) j)) :pattern ((t2tb2243 (tb2t2243 j))) )))

;; mem_times
  (assert
  (forall ((s (set d)) (t (set (set (tuple21 b c)))) (x d) (y (set (tuple21 b
  c))))
  (= (mem (tuple2 d1 (set1 (tuple2 b1 c1)))
  (Tuple2 d1 (set1 (tuple2 b1 c1)) (t2tb694 x) (t2tb131 y))
  (times (set1 (tuple2 b1 c1)) d1 (t2tb690 s) (t2tb130 t)))
  (and (mem20 x s) (mem9 y t)))))

(declare-fun t2tb2244 ((set (tuple21 d (tuple21 b c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 d (tuple21 b c))))) (sort
  (set1 (tuple2 d1 (tuple2 b1 c1))) (t2tb2244 x))))

(declare-fun tb2t2244 (uni) (set (tuple21 d (tuple21 b c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 d (tuple21 b c)))))
  (! (= (tb2t2244 (t2tb2244 i)) i) :pattern ((t2tb2244 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 d1 (tuple2 b1 c1))) j)
     (= (t2tb2244 (tb2t2244 j)) j)) :pattern ((t2tb2244 (tb2t2244 j))) )))

(declare-fun t2tb2245 ((tuple21 d (tuple21 b c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 d (tuple21 b c)))) (sort (tuple2 d1 (tuple2 b1 c1))
  (t2tb2245 x))))

(declare-fun tb2t2245 (uni) (tuple21 d (tuple21 b c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 d (tuple21 b c))))
  (! (= (tb2t2245 (t2tb2245 i)) i) :pattern ((t2tb2245 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 d1 (tuple2 b1 c1)) j) (= (t2tb2245 (tb2t2245 j)) j)) :pattern (
  (t2tb2245 (tb2t2245 j))) )))

;; mem_times
  (assert
  (forall ((s (set d)) (t (set (tuple21 b c))) (x d) (y (tuple21 b c)))
  (= (mem (tuple2 d1 (tuple2 b1 c1))
  (Tuple2 d1 (tuple2 b1 c1) (t2tb694 x) (t2tb134 y))
  (times (tuple2 b1 c1) d1 (t2tb690 s) (t2tb131 t)))
  (and (mem20 x s) (mem8 y t)))))

(declare-fun t2tb829 ((set (tuple21 d c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 d c)))) (sort (set1 (tuple2 d1 c1)) (t2tb829 x))))

(declare-fun tb2t829 (uni) (set (tuple21 d c)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 d c))))
  (! (= (tb2t829 (t2tb829 i)) i) :pattern ((t2tb829 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 d1 c1)) j) (= (t2tb829 (tb2t829 j)) j)) :pattern (
  (t2tb829 (tb2t829 j))) )))

(declare-fun t2tb830 ((tuple21 d c)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 d c))) (sort (tuple2 d1 c1) (t2tb830 x))))

(declare-fun tb2t830 (uni) (tuple21 d c))

;; BridgeL
  (assert
  (forall ((i (tuple21 d c)))
  (! (= (tb2t830 (t2tb830 i)) i) :pattern ((t2tb830 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 d1 c1) j) (= (t2tb830 (tb2t830 j)) j)) :pattern (
  (t2tb830 (tb2t830 j))) )))

;; mem_times
  (assert
  (forall ((s (set d)) (t (set c)) (x d) (y c))
  (= (mem (tuple2 d1 c1) (Tuple2 d1 c1 (t2tb694 x) (t2tb135 y))
  (times c1 d1 (t2tb690 s) (t2tb132 t))) (and (mem20 x s) (mem7 y t)))))

(declare-fun t2tb831 ((set (tuple21 d (set (tuple21 a b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 d (set (tuple21 a b)))))) (sort
  (set1 (tuple2 d1 (set1 (tuple2 a1 b1)))) (t2tb831 x))))

(declare-fun tb2t831 (uni) (set (tuple21 d (set (tuple21 a b)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 d (set (tuple21 a b))))))
  (! (= (tb2t831 (t2tb831 i)) i) :pattern ((t2tb831 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 d1 (set1 (tuple2 a1 b1)))) j)
     (= (t2tb831 (tb2t831 j)) j)) :pattern ((t2tb831 (tb2t831 j))) )))

(declare-fun t2tb832 ((tuple21 d (set (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 d (set (tuple21 a b))))) (sort
  (tuple2 d1 (set1 (tuple2 a1 b1))) (t2tb832 x))))

(declare-fun tb2t832 (uni) (tuple21 d (set (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (tuple21 d (set (tuple21 a b)))))
  (! (= (tb2t832 (t2tb832 i)) i) :pattern ((t2tb832 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 d1 (set1 (tuple2 a1 b1))) j)
     (= (t2tb832 (tb2t832 j)) j)) :pattern ((t2tb832 (tb2t832 j))) )))

;; mem_times
  (assert
  (forall ((s (set d)) (t (set (set (tuple21 a b)))) (x d) (y (set (tuple21 a
  b))))
  (= (mem (tuple2 d1 (set1 (tuple2 a1 b1)))
  (Tuple2 d1 (set1 (tuple2 a1 b1)) (t2tb694 x) (t2tb11 y))
  (times (set1 (tuple2 a1 b1)) d1 (t2tb690 s) (t2tb10 t)))
  (and (mem20 x s) (mem4 y t)))))

(declare-fun t2tb833 ((set (tuple21 d (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 d (tuple21 a b))))) (sort
  (set1 (tuple2 d1 (tuple2 a1 b1))) (t2tb833 x))))

(declare-fun tb2t833 (uni) (set (tuple21 d (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 d (tuple21 a b)))))
  (! (= (tb2t833 (t2tb833 i)) i) :pattern ((t2tb833 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 d1 (tuple2 a1 b1))) j)
     (= (t2tb833 (tb2t833 j)) j)) :pattern ((t2tb833 (tb2t833 j))) )))

(declare-fun t2tb834 ((tuple21 d (tuple21 a b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 d (tuple21 a b)))) (sort (tuple2 d1 (tuple2 a1 b1))
  (t2tb834 x))))

(declare-fun tb2t834 (uni) (tuple21 d (tuple21 a b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 d (tuple21 a b))))
  (! (= (tb2t834 (t2tb834 i)) i) :pattern ((t2tb834 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 d1 (tuple2 a1 b1)) j) (= (t2tb834 (tb2t834 j)) j)) :pattern (
  (t2tb834 (tb2t834 j))) )))

;; mem_times
  (assert
  (forall ((s (set d)) (t (set (tuple21 a b))) (x d) (y (tuple21 a b)))
  (= (mem (tuple2 d1 (tuple2 a1 b1))
  (Tuple2 d1 (tuple2 a1 b1) (t2tb694 x) (t2tb13 y))
  (times (tuple2 a1 b1) d1 (t2tb690 s) (t2tb11 t)))
  (and (mem20 x s) (mem3 y t)))))

(declare-fun t2tb835 ((set (tuple21 d b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 d b)))) (sort (set1 (tuple2 d1 b1)) (t2tb835 x))))

(declare-fun tb2t835 (uni) (set (tuple21 d b)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 d b))))
  (! (= (tb2t835 (t2tb835 i)) i) :pattern ((t2tb835 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 d1 b1)) j) (= (t2tb835 (tb2t835 j)) j)) :pattern (
  (t2tb835 (tb2t835 j))) )))

(declare-fun t2tb836 ((tuple21 d b)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 d b))) (sort (tuple2 d1 b1) (t2tb836 x))))

(declare-fun tb2t836 (uni) (tuple21 d b))

;; BridgeL
  (assert
  (forall ((i (tuple21 d b)))
  (! (= (tb2t836 (t2tb836 i)) i) :pattern ((t2tb836 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 d1 b1) j) (= (t2tb836 (tb2t836 j)) j)) :pattern (
  (t2tb836 (tb2t836 j))) )))

;; mem_times
  (assert
  (forall ((s (set d)) (t (set b)) (x d) (y b))
  (= (mem (tuple2 d1 b1) (Tuple2 d1 b1 (t2tb694 x) (t2tb14 y))
  (times b1 d1 (t2tb690 s) (t2tb12 t))) (and (mem20 x s) (mem2 y t)))))

(declare-fun t2tb837 ((set (tuple21 d a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 d a)))) (sort (set1 (tuple2 d1 a1)) (t2tb837 x))))

(declare-fun tb2t837 (uni) (set (tuple21 d a)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 d a))))
  (! (= (tb2t837 (t2tb837 i)) i) :pattern ((t2tb837 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 d1 a1)) j) (= (t2tb837 (tb2t837 j)) j)) :pattern (
  (t2tb837 (tb2t837 j))) )))

(declare-fun t2tb838 ((tuple21 d a)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 d a))) (sort (tuple2 d1 a1) (t2tb838 x))))

(declare-fun tb2t838 (uni) (tuple21 d a))

;; BridgeL
  (assert
  (forall ((i (tuple21 d a)))
  (! (= (tb2t838 (t2tb838 i)) i) :pattern ((t2tb838 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 d1 a1) j) (= (t2tb838 (tb2t838 j)) j)) :pattern (
  (t2tb838 (tb2t838 j))) )))

;; mem_times
  (assert
  (forall ((s (set d)) (t (set a)) (x d) (y a))
  (= (mem (tuple2 d1 a1) (Tuple2 d1 a1 (t2tb694 x) (t2tb2 y))
  (times a1 d1 (t2tb690 s) (t2tb1 t))) (and (mem20 x s) (mem1 y t)))))

;; mem_times
  (assert
  (forall ((b2 ty))
  (forall ((s (set d)) (t uni) (x d) (y uni))
  (= (mem (tuple2 d1 b2) (Tuple2 d1 b2 (t2tb694 x) y)
  (times b2 d1 (t2tb690 s) t)) (and (mem20 x s) (mem b2 y t))))))

(declare-fun t2tb2246 ((set (tuple21 (tuple21 a c) (tuple21 a d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a c) (tuple21 a d))))) (sort
  (set1 (tuple2 (tuple2 a1 c1) (tuple2 a1 d1))) (t2tb2246 x))))

(declare-fun tb2t2246 (uni) (set (tuple21 (tuple21 a c) (tuple21 a d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a c) (tuple21 a d)))))
  (! (= (tb2t2246 (t2tb2246 i)) i) :pattern ((t2tb2246 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 c1) (tuple2 a1 d1))) j)
     (= (t2tb2246 (tb2t2246 j)) j)) :pattern ((t2tb2246 (tb2t2246 j))) )))

(declare-fun t2tb2247 ((tuple21 (tuple21 a c) (tuple21 a d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a c) (tuple21 a d)))) (sort
  (tuple2 (tuple2 a1 c1) (tuple2 a1 d1)) (t2tb2247 x))))

(declare-fun tb2t2247 (uni) (tuple21 (tuple21 a c) (tuple21 a d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a c) (tuple21 a d))))
  (! (= (tb2t2247 (t2tb2247 i)) i) :pattern ((t2tb2247 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 c1) (tuple2 a1 d1)) j)
     (= (t2tb2247 (tb2t2247 j)) j)) :pattern ((t2tb2247 (tb2t2247 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a c))) (t (set (tuple21 a d))) (x (tuple21 a c))
  (y (tuple21 a d)))
  (= (mem (tuple2 (tuple2 a1 c1) (tuple2 a1 d1))
  (Tuple2 (tuple2 a1 c1) (tuple2 a1 d1) (t2tb133 x) (t2tb904 y))
  (times (tuple2 a1 d1) (tuple2 a1 c1) (t2tb129 s) (t2tb903 t)))
  (and (mem10 x s) (mem32 y t)))))

(declare-fun t2tb686 ((set (tuple21 (tuple21 a c) (tuple21 b d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a c) (tuple21 b d))))) (sort
  (set1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))) (t2tb686 x))))

(declare-fun tb2t686 (uni) (set (tuple21 (tuple21 a c) (tuple21 b d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a c) (tuple21 b d)))))
  (! (= (tb2t686 (t2tb686 i)) i) :pattern ((t2tb686 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))) j)
     (= (t2tb686 (tb2t686 j)) j)) :pattern ((t2tb686 (tb2t686 j))) )))

(declare-fun t2tb691 ((tuple21 (tuple21 a c) (tuple21 b d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a c) (tuple21 b d)))) (sort
  (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb691 x))))

(declare-fun tb2t691 (uni) (tuple21 (tuple21 a c) (tuple21 b d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a c) (tuple21 b d))))
  (! (= (tb2t691 (t2tb691 i)) i) :pattern ((t2tb691 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) j)
     (= (t2tb691 (tb2t691 j)) j)) :pattern ((t2tb691 (tb2t691 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a c))) (t (set (tuple21 b d))) (x (tuple21 a c))
  (y (tuple21 b d)))
  (= (mem (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))
  (Tuple2 (tuple2 a1 c1) (tuple2 b1 d1) (t2tb133 x) (t2tb692 y))
  (times (tuple2 b1 d1) (tuple2 a1 c1) (t2tb129 s) (t2tb687 t)))
  (and (mem10 x s) (mem23 y t)))))

(declare-fun t2tb1923 ((set (tuple21 (tuple21 a c) (set (tuple21 c
  d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a c) (set (tuple21 c d)))))) (sort
  (set1 (tuple2 (tuple2 a1 c1) (set1 (tuple2 c1 d1)))) (t2tb1923 x))))

(declare-fun tb2t1923 (uni) (set (tuple21 (tuple21 a c) (set (tuple21 c
  d)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a c) (set (tuple21 c d))))))
  (! (= (tb2t1923 (t2tb1923 i)) i) :pattern ((t2tb1923 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 c1) (set1 (tuple2 c1 d1)))) j)
     (= (t2tb1923 (tb2t1923 j)) j)) :pattern ((t2tb1923 (tb2t1923 j))) )))

(declare-fun t2tb1924 ((tuple21 (tuple21 a c) (set (tuple21 c d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a c) (set (tuple21 c d))))) (sort
  (tuple2 (tuple2 a1 c1) (set1 (tuple2 c1 d1))) (t2tb1924 x))))

(declare-fun tb2t1924 (uni) (tuple21 (tuple21 a c) (set (tuple21 c d))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a c) (set (tuple21 c d)))))
  (! (= (tb2t1924 (t2tb1924 i)) i) :pattern ((t2tb1924 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 c1) (set1 (tuple2 c1 d1))) j)
     (= (t2tb1924 (tb2t1924 j)) j)) :pattern ((t2tb1924 (tb2t1924 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a c))) (t (set (set (tuple21 c d))))
  (x (tuple21 a c)) (y (set (tuple21 c d))))
  (= (mem (tuple2 (tuple2 a1 c1) (set1 (tuple2 c1 d1)))
  (Tuple2 (tuple2 a1 c1) (set1 (tuple2 c1 d1)) (t2tb133 x) (t2tb689 y))
  (times (set1 (tuple2 c1 d1)) (tuple2 a1 c1) (t2tb129 s) (t2tb688 t)))
  (and (mem10 x s) (mem22 y t)))))

(declare-fun t2tb1925 ((set (tuple21 (tuple21 a c) (tuple21 c d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a c) (tuple21 c d))))) (sort
  (set1 (tuple2 (tuple2 a1 c1) (tuple2 c1 d1))) (t2tb1925 x))))

(declare-fun tb2t1925 (uni) (set (tuple21 (tuple21 a c) (tuple21 c d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a c) (tuple21 c d)))))
  (! (= (tb2t1925 (t2tb1925 i)) i) :pattern ((t2tb1925 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 c1) (tuple2 c1 d1))) j)
     (= (t2tb1925 (tb2t1925 j)) j)) :pattern ((t2tb1925 (tb2t1925 j))) )))

(declare-fun t2tb1926 ((tuple21 (tuple21 a c) (tuple21 c d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a c) (tuple21 c d)))) (sort
  (tuple2 (tuple2 a1 c1) (tuple2 c1 d1)) (t2tb1926 x))))

(declare-fun tb2t1926 (uni) (tuple21 (tuple21 a c) (tuple21 c d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a c) (tuple21 c d))))
  (! (= (tb2t1926 (t2tb1926 i)) i) :pattern ((t2tb1926 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 c1) (tuple2 c1 d1)) j)
     (= (t2tb1926 (tb2t1926 j)) j)) :pattern ((t2tb1926 (tb2t1926 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a c))) (t (set (tuple21 c d))) (x (tuple21 a c))
  (y (tuple21 c d)))
  (= (mem (tuple2 (tuple2 a1 c1) (tuple2 c1 d1))
  (Tuple2 (tuple2 a1 c1) (tuple2 c1 d1) (t2tb133 x) (t2tb693 y))
  (times (tuple2 c1 d1) (tuple2 a1 c1) (t2tb129 s) (t2tb689 t)))
  (and (mem10 x s) (mem21 y t)))))

(declare-fun t2tb847 ((set (tuple21 (tuple21 a c) d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a c) d)))) (sort
  (set1 (tuple2 (tuple2 a1 c1) d1)) (t2tb847 x))))

(declare-fun tb2t847 (uni) (set (tuple21 (tuple21 a c) d)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a c) d))))
  (! (= (tb2t847 (t2tb847 i)) i) :pattern ((t2tb847 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 c1) d1)) j)
     (= (t2tb847 (tb2t847 j)) j)) :pattern ((t2tb847 (tb2t847 j))) )))

(declare-fun t2tb848 ((tuple21 (tuple21 a c) d)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a c) d))) (sort (tuple2 (tuple2 a1 c1) d1)
  (t2tb848 x))))

(declare-fun tb2t848 (uni) (tuple21 (tuple21 a c) d))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a c) d)))
  (! (= (tb2t848 (t2tb848 i)) i) :pattern ((t2tb848 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 c1) d1) j) (= (t2tb848 (tb2t848 j)) j)) :pattern (
  (t2tb848 (tb2t848 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a c))) (t (set d)) (x (tuple21 a c)) (y d))
  (= (mem (tuple2 (tuple2 a1 c1) d1)
  (Tuple2 (tuple2 a1 c1) d1 (t2tb133 x) (t2tb694 y))
  (times d1 (tuple2 a1 c1) (t2tb129 s) (t2tb690 t)))
  (and (mem10 x s) (mem20 y t)))))

(declare-fun t2tb156 ((tuple21 (tuple21 a c) (tuple21 a c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a c) (tuple21 a c)))) (sort
  (tuple2 (tuple2 a1 c1) (tuple2 a1 c1)) (t2tb156 x))))

(declare-fun tb2t156 (uni) (tuple21 (tuple21 a c) (tuple21 a c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a c) (tuple21 a c))))
  (! (= (tb2t156 (t2tb156 i)) i) :pattern ((t2tb156 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 c1) (tuple2 a1 c1)) j)
     (= (t2tb156 (tb2t156 j)) j)) :pattern ((t2tb156 (tb2t156 j))) )))

(declare-fun t2tb157 ((set (tuple21 (tuple21 a c) (tuple21 a c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a c) (tuple21 a c))))) (sort
  (set1 (tuple2 (tuple2 a1 c1) (tuple2 a1 c1))) (t2tb157 x))))

(declare-fun tb2t157 (uni) (set (tuple21 (tuple21 a c) (tuple21 a c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a c) (tuple21 a c)))))
  (! (= (tb2t157 (t2tb157 i)) i) :pattern ((t2tb157 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 c1) (tuple2 a1 c1))) j)
     (= (t2tb157 (tb2t157 j)) j)) :pattern ((t2tb157 (tb2t157 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a c))) (t (set (tuple21 a c))) (x (tuple21 a c))
  (y (tuple21 a c)))
  (= (mem (tuple2 (tuple2 a1 c1) (tuple2 a1 c1))
  (Tuple2 (tuple2 a1 c1) (tuple2 a1 c1) (t2tb133 x) (t2tb133 y))
  (times (tuple2 a1 c1) (tuple2 a1 c1) (t2tb129 s) (t2tb129 t)))
  (and (mem10 x s) (mem10 y t)))))

(declare-fun t2tb1089 ((set (tuple21 (tuple21 a c) (set (tuple21 b
  c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a c) (set (tuple21 b c)))))) (sort
  (set1 (tuple2 (tuple2 a1 c1) (set1 (tuple2 b1 c1)))) (t2tb1089 x))))

(declare-fun tb2t1089 (uni) (set (tuple21 (tuple21 a c) (set (tuple21 b
  c)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a c) (set (tuple21 b c))))))
  (! (= (tb2t1089 (t2tb1089 i)) i) :pattern ((t2tb1089 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 c1) (set1 (tuple2 b1 c1)))) j)
     (= (t2tb1089 (tb2t1089 j)) j)) :pattern ((t2tb1089 (tb2t1089 j))) )))

(declare-fun t2tb1090 ((tuple21 (tuple21 a c) (set (tuple21 b c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a c) (set (tuple21 b c))))) (sort
  (tuple2 (tuple2 a1 c1) (set1 (tuple2 b1 c1))) (t2tb1090 x))))

(declare-fun tb2t1090 (uni) (tuple21 (tuple21 a c) (set (tuple21 b c))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a c) (set (tuple21 b c)))))
  (! (= (tb2t1090 (t2tb1090 i)) i) :pattern ((t2tb1090 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 c1) (set1 (tuple2 b1 c1))) j)
     (= (t2tb1090 (tb2t1090 j)) j)) :pattern ((t2tb1090 (tb2t1090 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a c))) (t (set (set (tuple21 b c))))
  (x (tuple21 a c)) (y (set (tuple21 b c))))
  (= (mem (tuple2 (tuple2 a1 c1) (set1 (tuple2 b1 c1)))
  (Tuple2 (tuple2 a1 c1) (set1 (tuple2 b1 c1)) (t2tb133 x) (t2tb131 y))
  (times (set1 (tuple2 b1 c1)) (tuple2 a1 c1) (t2tb129 s) (t2tb130 t)))
  (and (mem10 x s) (mem9 y t)))))

(declare-fun t2tb1091 ((set (tuple21 (tuple21 a c) (tuple21 b c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a c) (tuple21 b c))))) (sort
  (set1 (tuple2 (tuple2 a1 c1) (tuple2 b1 c1))) (t2tb1091 x))))

(declare-fun tb2t1091 (uni) (set (tuple21 (tuple21 a c) (tuple21 b c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a c) (tuple21 b c)))))
  (! (= (tb2t1091 (t2tb1091 i)) i) :pattern ((t2tb1091 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 c1) (tuple2 b1 c1))) j)
     (= (t2tb1091 (tb2t1091 j)) j)) :pattern ((t2tb1091 (tb2t1091 j))) )))

(declare-fun t2tb1092 ((tuple21 (tuple21 a c) (tuple21 b c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a c) (tuple21 b c)))) (sort
  (tuple2 (tuple2 a1 c1) (tuple2 b1 c1)) (t2tb1092 x))))

(declare-fun tb2t1092 (uni) (tuple21 (tuple21 a c) (tuple21 b c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a c) (tuple21 b c))))
  (! (= (tb2t1092 (t2tb1092 i)) i) :pattern ((t2tb1092 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 c1) (tuple2 b1 c1)) j)
     (= (t2tb1092 (tb2t1092 j)) j)) :pattern ((t2tb1092 (tb2t1092 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a c))) (t (set (tuple21 b c))) (x (tuple21 a c))
  (y (tuple21 b c)))
  (= (mem (tuple2 (tuple2 a1 c1) (tuple2 b1 c1))
  (Tuple2 (tuple2 a1 c1) (tuple2 b1 c1) (t2tb133 x) (t2tb134 y))
  (times (tuple2 b1 c1) (tuple2 a1 c1) (t2tb129 s) (t2tb131 t)))
  (and (mem10 x s) (mem8 y t)))))

(declare-fun t2tb162 ((set (tuple21 (tuple21 a c) c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a c) c)))) (sort
  (set1 (tuple2 (tuple2 a1 c1) c1)) (t2tb162 x))))

(declare-fun tb2t162 (uni) (set (tuple21 (tuple21 a c) c)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a c) c))))
  (! (= (tb2t162 (t2tb162 i)) i) :pattern ((t2tb162 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 c1) c1)) j)
     (= (t2tb162 (tb2t162 j)) j)) :pattern ((t2tb162 (tb2t162 j))) )))

(declare-fun t2tb163 ((tuple21 (tuple21 a c) c)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a c) c))) (sort (tuple2 (tuple2 a1 c1) c1)
  (t2tb163 x))))

(declare-fun tb2t163 (uni) (tuple21 (tuple21 a c) c))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a c) c)))
  (! (= (tb2t163 (t2tb163 i)) i) :pattern ((t2tb163 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 c1) c1) j) (= (t2tb163 (tb2t163 j)) j)) :pattern (
  (t2tb163 (tb2t163 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a c))) (t (set c)) (x (tuple21 a c)) (y c))
  (= (mem (tuple2 (tuple2 a1 c1) c1)
  (Tuple2 (tuple2 a1 c1) c1 (t2tb133 x) (t2tb135 y))
  (times c1 (tuple2 a1 c1) (t2tb129 s) (t2tb132 t)))
  (and (mem10 x s) (mem7 y t)))))

(declare-fun t2tb164 ((set (tuple21 (tuple21 a c) (set (tuple21 a b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a c) (set (tuple21 a b)))))) (sort
  (set1 (tuple2 (tuple2 a1 c1) (set1 (tuple2 a1 b1)))) (t2tb164 x))))

(declare-fun tb2t164 (uni) (set (tuple21 (tuple21 a c) (set (tuple21 a b)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a c) (set (tuple21 a b))))))
  (! (= (tb2t164 (t2tb164 i)) i) :pattern ((t2tb164 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 c1) (set1 (tuple2 a1 b1)))) j)
     (= (t2tb164 (tb2t164 j)) j)) :pattern ((t2tb164 (tb2t164 j))) )))

(declare-fun t2tb165 ((tuple21 (tuple21 a c) (set (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a c) (set (tuple21 a b))))) (sort
  (tuple2 (tuple2 a1 c1) (set1 (tuple2 a1 b1))) (t2tb165 x))))

(declare-fun tb2t165 (uni) (tuple21 (tuple21 a c) (set (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a c) (set (tuple21 a b)))))
  (! (= (tb2t165 (t2tb165 i)) i) :pattern ((t2tb165 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 c1) (set1 (tuple2 a1 b1))) j)
     (= (t2tb165 (tb2t165 j)) j)) :pattern ((t2tb165 (tb2t165 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a c))) (t (set (set (tuple21 a b))))
  (x (tuple21 a c)) (y (set (tuple21 a b))))
  (= (mem (tuple2 (tuple2 a1 c1) (set1 (tuple2 a1 b1)))
  (Tuple2 (tuple2 a1 c1) (set1 (tuple2 a1 b1)) (t2tb133 x) (t2tb11 y))
  (times (set1 (tuple2 a1 b1)) (tuple2 a1 c1) (t2tb129 s) (t2tb10 t)))
  (and (mem10 x s) (mem4 y t)))))

(declare-fun t2tb166 ((set (tuple21 (tuple21 a c) (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a c) (tuple21 a b))))) (sort
  (set1 (tuple2 (tuple2 a1 c1) (tuple2 a1 b1))) (t2tb166 x))))

(declare-fun tb2t166 (uni) (set (tuple21 (tuple21 a c) (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a c) (tuple21 a b)))))
  (! (= (tb2t166 (t2tb166 i)) i) :pattern ((t2tb166 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 c1) (tuple2 a1 b1))) j)
     (= (t2tb166 (tb2t166 j)) j)) :pattern ((t2tb166 (tb2t166 j))) )))

(declare-fun t2tb167 ((tuple21 (tuple21 a c) (tuple21 a b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a c) (tuple21 a b)))) (sort
  (tuple2 (tuple2 a1 c1) (tuple2 a1 b1)) (t2tb167 x))))

(declare-fun tb2t167 (uni) (tuple21 (tuple21 a c) (tuple21 a b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a c) (tuple21 a b))))
  (! (= (tb2t167 (t2tb167 i)) i) :pattern ((t2tb167 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 c1) (tuple2 a1 b1)) j)
     (= (t2tb167 (tb2t167 j)) j)) :pattern ((t2tb167 (tb2t167 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a c))) (t (set (tuple21 a b))) (x (tuple21 a c))
  (y (tuple21 a b)))
  (= (mem (tuple2 (tuple2 a1 c1) (tuple2 a1 b1))
  (Tuple2 (tuple2 a1 c1) (tuple2 a1 b1) (t2tb133 x) (t2tb13 y))
  (times (tuple2 a1 b1) (tuple2 a1 c1) (t2tb129 s) (t2tb11 t)))
  (and (mem10 x s) (mem3 y t)))))

(declare-fun t2tb168 ((set (tuple21 (tuple21 a c) b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a c) b)))) (sort
  (set1 (tuple2 (tuple2 a1 c1) b1)) (t2tb168 x))))

(declare-fun tb2t168 (uni) (set (tuple21 (tuple21 a c) b)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a c) b))))
  (! (= (tb2t168 (t2tb168 i)) i) :pattern ((t2tb168 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 c1) b1)) j)
     (= (t2tb168 (tb2t168 j)) j)) :pattern ((t2tb168 (tb2t168 j))) )))

(declare-fun t2tb169 ((tuple21 (tuple21 a c) b)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a c) b))) (sort (tuple2 (tuple2 a1 c1) b1)
  (t2tb169 x))))

(declare-fun tb2t169 (uni) (tuple21 (tuple21 a c) b))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a c) b)))
  (! (= (tb2t169 (t2tb169 i)) i) :pattern ((t2tb169 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 c1) b1) j) (= (t2tb169 (tb2t169 j)) j)) :pattern (
  (t2tb169 (tb2t169 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a c))) (t (set b)) (x (tuple21 a c)) (y b))
  (= (mem (tuple2 (tuple2 a1 c1) b1)
  (Tuple2 (tuple2 a1 c1) b1 (t2tb133 x) (t2tb14 y))
  (times b1 (tuple2 a1 c1) (t2tb129 s) (t2tb12 t)))
  (and (mem10 x s) (mem2 y t)))))

(declare-fun t2tb170 ((set (tuple21 (tuple21 a c) a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a c) a)))) (sort
  (set1 (tuple2 (tuple2 a1 c1) a1)) (t2tb170 x))))

(declare-fun tb2t170 (uni) (set (tuple21 (tuple21 a c) a)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a c) a))))
  (! (= (tb2t170 (t2tb170 i)) i) :pattern ((t2tb170 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 c1) a1)) j)
     (= (t2tb170 (tb2t170 j)) j)) :pattern ((t2tb170 (tb2t170 j))) )))

(declare-fun t2tb171 ((tuple21 (tuple21 a c) a)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a c) a))) (sort (tuple2 (tuple2 a1 c1) a1)
  (t2tb171 x))))

(declare-fun tb2t171 (uni) (tuple21 (tuple21 a c) a))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a c) a)))
  (! (= (tb2t171 (t2tb171 i)) i) :pattern ((t2tb171 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 c1) a1) j) (= (t2tb171 (tb2t171 j)) j)) :pattern (
  (t2tb171 (tb2t171 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a c))) (t (set a)) (x (tuple21 a c)) (y a))
  (= (mem (tuple2 (tuple2 a1 c1) a1)
  (Tuple2 (tuple2 a1 c1) a1 (t2tb133 x) (t2tb2 y))
  (times a1 (tuple2 a1 c1) (t2tb129 s) (t2tb1 t)))
  (and (mem10 x s) (mem1 y t)))))

;; mem_times
  (assert
  (forall ((b2 ty))
  (forall ((s (set (tuple21 a c))) (t uni) (x (tuple21 a c)) (y uni))
  (= (mem (tuple2 (tuple2 a1 c1) b2) (Tuple2 (tuple2 a1 c1) b2 (t2tb133 x) y)
  (times b2 (tuple2 a1 c1) (t2tb129 s) t)) (and (mem10 x s) (mem b2 y t))))))

(declare-fun t2tb2248 ((set (tuple21 (set (tuple21 b c)) (tuple21 a
  d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 b c)) (tuple21 a d))))) (sort
  (set1 (tuple2 (set1 (tuple2 b1 c1)) (tuple2 a1 d1))) (t2tb2248 x))))

(declare-fun tb2t2248 (uni) (set (tuple21 (set (tuple21 b c)) (tuple21 a
  d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 b c)) (tuple21 a d)))))
  (! (= (tb2t2248 (t2tb2248 i)) i) :pattern ((t2tb2248 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 b1 c1)) (tuple2 a1 d1))) j)
     (= (t2tb2248 (tb2t2248 j)) j)) :pattern ((t2tb2248 (tb2t2248 j))) )))

(declare-fun t2tb2249 ((tuple21 (set (tuple21 b c)) (tuple21 a d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 b c)) (tuple21 a d)))) (sort
  (tuple2 (set1 (tuple2 b1 c1)) (tuple2 a1 d1)) (t2tb2249 x))))

(declare-fun tb2t2249 (uni) (tuple21 (set (tuple21 b c)) (tuple21 a d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 b c)) (tuple21 a d))))
  (! (= (tb2t2249 (t2tb2249 i)) i) :pattern ((t2tb2249 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 b1 c1)) (tuple2 a1 d1)) j)
     (= (t2tb2249 (tb2t2249 j)) j)) :pattern ((t2tb2249 (tb2t2249 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 b c)))) (t (set (tuple21 a d)))
  (x (set (tuple21 b c))) (y (tuple21 a d)))
  (= (mem (tuple2 (set1 (tuple2 b1 c1)) (tuple2 a1 d1))
  (Tuple2 (set1 (tuple2 b1 c1)) (tuple2 a1 d1) (t2tb131 x) (t2tb904 y))
  (times (tuple2 a1 d1) (set1 (tuple2 b1 c1)) (t2tb130 s) (t2tb903 t)))
  (and (mem9 x s) (mem32 y t)))))

(declare-fun t2tb2250 ((set (tuple21 (set (tuple21 b c)) (tuple21 b
  d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 b c)) (tuple21 b d))))) (sort
  (set1 (tuple2 (set1 (tuple2 b1 c1)) (tuple2 b1 d1))) (t2tb2250 x))))

(declare-fun tb2t2250 (uni) (set (tuple21 (set (tuple21 b c)) (tuple21 b
  d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 b c)) (tuple21 b d)))))
  (! (= (tb2t2250 (t2tb2250 i)) i) :pattern ((t2tb2250 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 b1 c1)) (tuple2 b1 d1))) j)
     (= (t2tb2250 (tb2t2250 j)) j)) :pattern ((t2tb2250 (tb2t2250 j))) )))

(declare-fun t2tb2251 ((tuple21 (set (tuple21 b c)) (tuple21 b d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 b c)) (tuple21 b d)))) (sort
  (tuple2 (set1 (tuple2 b1 c1)) (tuple2 b1 d1)) (t2tb2251 x))))

(declare-fun tb2t2251 (uni) (tuple21 (set (tuple21 b c)) (tuple21 b d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 b c)) (tuple21 b d))))
  (! (= (tb2t2251 (t2tb2251 i)) i) :pattern ((t2tb2251 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 b1 c1)) (tuple2 b1 d1)) j)
     (= (t2tb2251 (tb2t2251 j)) j)) :pattern ((t2tb2251 (tb2t2251 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 b c)))) (t (set (tuple21 b d)))
  (x (set (tuple21 b c))) (y (tuple21 b d)))
  (= (mem (tuple2 (set1 (tuple2 b1 c1)) (tuple2 b1 d1))
  (Tuple2 (set1 (tuple2 b1 c1)) (tuple2 b1 d1) (t2tb131 x) (t2tb692 y))
  (times (tuple2 b1 d1) (set1 (tuple2 b1 c1)) (t2tb130 s) (t2tb687 t)))
  (and (mem9 x s) (mem23 y t)))))

(declare-fun t2tb2252 ((set (tuple21 (set (tuple21 b c)) (set (tuple21 c
  d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 b c)) (set (tuple21 c d)))))) (sort
  (set1 (tuple2 (set1 (tuple2 b1 c1)) (set1 (tuple2 c1 d1)))) (t2tb2252 x))))

(declare-fun tb2t2252 (uni) (set (tuple21 (set (tuple21 b c)) (set (tuple21 c
  d)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 b c)) (set (tuple21 c d))))))
  (! (= (tb2t2252 (t2tb2252 i)) i) :pattern ((t2tb2252 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 b1 c1)) (set1 (tuple2 c1 d1)))) j)
     (= (t2tb2252 (tb2t2252 j)) j)) :pattern ((t2tb2252 (tb2t2252 j))) )))

(declare-fun t2tb2253 ((tuple21 (set (tuple21 b c)) (set (tuple21 c
  d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 b c)) (set (tuple21 c d))))) (sort
  (tuple2 (set1 (tuple2 b1 c1)) (set1 (tuple2 c1 d1))) (t2tb2253 x))))

(declare-fun tb2t2253 (uni) (tuple21 (set (tuple21 b c)) (set (tuple21 c
  d))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 b c)) (set (tuple21 c d)))))
  (! (= (tb2t2253 (t2tb2253 i)) i) :pattern ((t2tb2253 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 b1 c1)) (set1 (tuple2 c1 d1))) j)
     (= (t2tb2253 (tb2t2253 j)) j)) :pattern ((t2tb2253 (tb2t2253 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 b c)))) (t (set (set (tuple21 c d))))
  (x (set (tuple21 b c))) (y (set (tuple21 c d))))
  (= (mem (tuple2 (set1 (tuple2 b1 c1)) (set1 (tuple2 c1 d1)))
  (Tuple2 (set1 (tuple2 b1 c1)) (set1 (tuple2 c1 d1)) (t2tb131 x)
  (t2tb689 y))
  (times (set1 (tuple2 c1 d1)) (set1 (tuple2 b1 c1)) (t2tb130 s) (t2tb688 t)))
  (and (mem9 x s) (mem22 y t)))))

(declare-fun t2tb2254 ((tuple21 (set (tuple21 b c)) (tuple21 c d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 b c)) (tuple21 c d)))) (sort
  (tuple2 (set1 (tuple2 b1 c1)) (tuple2 c1 d1)) (t2tb2254 x))))

(declare-fun tb2t2254 (uni) (tuple21 (set (tuple21 b c)) (tuple21 c d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 b c)) (tuple21 c d))))
  (! (= (tb2t2254 (t2tb2254 i)) i) :pattern ((t2tb2254 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 b1 c1)) (tuple2 c1 d1)) j)
     (= (t2tb2254 (tb2t2254 j)) j)) :pattern ((t2tb2254 (tb2t2254 j))) )))

(declare-fun t2tb2255 ((set (tuple21 (set (tuple21 b c)) (tuple21 c
  d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 b c)) (tuple21 c d))))) (sort
  (set1 (tuple2 (set1 (tuple2 b1 c1)) (tuple2 c1 d1))) (t2tb2255 x))))

(declare-fun tb2t2255 (uni) (set (tuple21 (set (tuple21 b c)) (tuple21 c
  d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 b c)) (tuple21 c d)))))
  (! (= (tb2t2255 (t2tb2255 i)) i) :pattern ((t2tb2255 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 b1 c1)) (tuple2 c1 d1))) j)
     (= (t2tb2255 (tb2t2255 j)) j)) :pattern ((t2tb2255 (tb2t2255 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 b c)))) (t (set (tuple21 c d)))
  (x (set (tuple21 b c))) (y (tuple21 c d)))
  (= (mem (tuple2 (set1 (tuple2 b1 c1)) (tuple2 c1 d1))
  (Tuple2 (set1 (tuple2 b1 c1)) (tuple2 c1 d1) (t2tb131 x) (t2tb693 y))
  (times (tuple2 c1 d1) (set1 (tuple2 b1 c1)) (t2tb130 s) (t2tb689 t)))
  (and (mem9 x s) (mem21 y t)))))

(declare-fun t2tb2256 ((set (tuple21 (set (tuple21 b c)) d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 b c)) d)))) (sort
  (set1 (tuple2 (set1 (tuple2 b1 c1)) d1)) (t2tb2256 x))))

(declare-fun tb2t2256 (uni) (set (tuple21 (set (tuple21 b c)) d)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 b c)) d))))
  (! (= (tb2t2256 (t2tb2256 i)) i) :pattern ((t2tb2256 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 b1 c1)) d1)) j)
     (= (t2tb2256 (tb2t2256 j)) j)) :pattern ((t2tb2256 (tb2t2256 j))) )))

(declare-fun t2tb2257 ((tuple21 (set (tuple21 b c)) d)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 b c)) d))) (sort
  (tuple2 (set1 (tuple2 b1 c1)) d1) (t2tb2257 x))))

(declare-fun tb2t2257 (uni) (tuple21 (set (tuple21 b c)) d))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 b c)) d)))
  (! (= (tb2t2257 (t2tb2257 i)) i) :pattern ((t2tb2257 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 b1 c1)) d1) j)
     (= (t2tb2257 (tb2t2257 j)) j)) :pattern ((t2tb2257 (tb2t2257 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 b c)))) (t (set d)) (x (set (tuple21 b c)))
  (y d))
  (= (mem (tuple2 (set1 (tuple2 b1 c1)) d1)
  (Tuple2 (set1 (tuple2 b1 c1)) d1 (t2tb131 x) (t2tb694 y))
  (times d1 (set1 (tuple2 b1 c1)) (t2tb130 s) (t2tb690 t)))
  (and (mem9 x s) (mem20 y t)))))

(declare-fun t2tb1093 ((tuple21 (set (tuple21 b c)) (tuple21 a c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 b c)) (tuple21 a c)))) (sort
  (tuple2 (set1 (tuple2 b1 c1)) (tuple2 a1 c1)) (t2tb1093 x))))

(declare-fun tb2t1093 (uni) (tuple21 (set (tuple21 b c)) (tuple21 a c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 b c)) (tuple21 a c))))
  (! (= (tb2t1093 (t2tb1093 i)) i) :pattern ((t2tb1093 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 b1 c1)) (tuple2 a1 c1)) j)
     (= (t2tb1093 (tb2t1093 j)) j)) :pattern ((t2tb1093 (tb2t1093 j))) )))

(declare-fun t2tb1094 ((set (tuple21 (set (tuple21 b c)) (tuple21 a
  c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 b c)) (tuple21 a c))))) (sort
  (set1 (tuple2 (set1 (tuple2 b1 c1)) (tuple2 a1 c1))) (t2tb1094 x))))

(declare-fun tb2t1094 (uni) (set (tuple21 (set (tuple21 b c)) (tuple21 a
  c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 b c)) (tuple21 a c)))))
  (! (= (tb2t1094 (t2tb1094 i)) i) :pattern ((t2tb1094 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 b1 c1)) (tuple2 a1 c1))) j)
     (= (t2tb1094 (tb2t1094 j)) j)) :pattern ((t2tb1094 (tb2t1094 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 b c)))) (t (set (tuple21 a c)))
  (x (set (tuple21 b c))) (y (tuple21 a c)))
  (= (mem (tuple2 (set1 (tuple2 b1 c1)) (tuple2 a1 c1))
  (Tuple2 (set1 (tuple2 b1 c1)) (tuple2 a1 c1) (t2tb131 x) (t2tb133 y))
  (times (tuple2 a1 c1) (set1 (tuple2 b1 c1)) (t2tb130 s) (t2tb129 t)))
  (and (mem9 x s) (mem10 y t)))))

(declare-fun t2tb1095 ((set (tuple21 (set (tuple21 b c)) (set (tuple21 b
  c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 b c)) (set (tuple21 b c)))))) (sort
  (set1 (tuple2 (set1 (tuple2 b1 c1)) (set1 (tuple2 b1 c1)))) (t2tb1095 x))))

(declare-fun tb2t1095 (uni) (set (tuple21 (set (tuple21 b c)) (set (tuple21 b
  c)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 b c)) (set (tuple21 b c))))))
  (! (= (tb2t1095 (t2tb1095 i)) i) :pattern ((t2tb1095 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 b1 c1)) (set1 (tuple2 b1 c1)))) j)
     (= (t2tb1095 (tb2t1095 j)) j)) :pattern ((t2tb1095 (tb2t1095 j))) )))

(declare-fun t2tb1096 ((tuple21 (set (tuple21 b c)) (set (tuple21 b
  c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 b c)) (set (tuple21 b c))))) (sort
  (tuple2 (set1 (tuple2 b1 c1)) (set1 (tuple2 b1 c1))) (t2tb1096 x))))

(declare-fun tb2t1096 (uni) (tuple21 (set (tuple21 b c)) (set (tuple21 b
  c))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 b c)) (set (tuple21 b c)))))
  (! (= (tb2t1096 (t2tb1096 i)) i) :pattern ((t2tb1096 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 b1 c1)) (set1 (tuple2 b1 c1))) j)
     (= (t2tb1096 (tb2t1096 j)) j)) :pattern ((t2tb1096 (tb2t1096 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 b c)))) (t (set (set (tuple21 b c))))
  (x (set (tuple21 b c))) (y (set (tuple21 b c))))
  (= (mem (tuple2 (set1 (tuple2 b1 c1)) (set1 (tuple2 b1 c1)))
  (Tuple2 (set1 (tuple2 b1 c1)) (set1 (tuple2 b1 c1)) (t2tb131 x)
  (t2tb131 y))
  (times (set1 (tuple2 b1 c1)) (set1 (tuple2 b1 c1)) (t2tb130 s) (t2tb130 t)))
  (and (mem9 x s) (mem9 y t)))))

(declare-fun t2tb1097 ((set (tuple21 (set (tuple21 b c)) (tuple21 b
  c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 b c)) (tuple21 b c))))) (sort
  (set1 (tuple2 (set1 (tuple2 b1 c1)) (tuple2 b1 c1))) (t2tb1097 x))))

(declare-fun tb2t1097 (uni) (set (tuple21 (set (tuple21 b c)) (tuple21 b
  c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 b c)) (tuple21 b c)))))
  (! (= (tb2t1097 (t2tb1097 i)) i) :pattern ((t2tb1097 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 b1 c1)) (tuple2 b1 c1))) j)
     (= (t2tb1097 (tb2t1097 j)) j)) :pattern ((t2tb1097 (tb2t1097 j))) )))

(declare-fun t2tb1098 ((tuple21 (set (tuple21 b c)) (tuple21 b c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 b c)) (tuple21 b c)))) (sort
  (tuple2 (set1 (tuple2 b1 c1)) (tuple2 b1 c1)) (t2tb1098 x))))

(declare-fun tb2t1098 (uni) (tuple21 (set (tuple21 b c)) (tuple21 b c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 b c)) (tuple21 b c))))
  (! (= (tb2t1098 (t2tb1098 i)) i) :pattern ((t2tb1098 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 b1 c1)) (tuple2 b1 c1)) j)
     (= (t2tb1098 (tb2t1098 j)) j)) :pattern ((t2tb1098 (tb2t1098 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 b c)))) (t (set (tuple21 b c)))
  (x (set (tuple21 b c))) (y (tuple21 b c)))
  (= (mem (tuple2 (set1 (tuple2 b1 c1)) (tuple2 b1 c1))
  (Tuple2 (set1 (tuple2 b1 c1)) (tuple2 b1 c1) (t2tb131 x) (t2tb134 y))
  (times (tuple2 b1 c1) (set1 (tuple2 b1 c1)) (t2tb130 s) (t2tb131 t)))
  (and (mem9 x s) (mem8 y t)))))

(declare-fun t2tb1099 ((set (tuple21 (set (tuple21 b c)) c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 b c)) c)))) (sort
  (set1 (tuple2 (set1 (tuple2 b1 c1)) c1)) (t2tb1099 x))))

(declare-fun tb2t1099 (uni) (set (tuple21 (set (tuple21 b c)) c)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 b c)) c))))
  (! (= (tb2t1099 (t2tb1099 i)) i) :pattern ((t2tb1099 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 b1 c1)) c1)) j)
     (= (t2tb1099 (tb2t1099 j)) j)) :pattern ((t2tb1099 (tb2t1099 j))) )))

(declare-fun t2tb1100 ((tuple21 (set (tuple21 b c)) c)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 b c)) c))) (sort
  (tuple2 (set1 (tuple2 b1 c1)) c1) (t2tb1100 x))))

(declare-fun tb2t1100 (uni) (tuple21 (set (tuple21 b c)) c))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 b c)) c)))
  (! (= (tb2t1100 (t2tb1100 i)) i) :pattern ((t2tb1100 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 b1 c1)) c1) j)
     (= (t2tb1100 (tb2t1100 j)) j)) :pattern ((t2tb1100 (tb2t1100 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 b c)))) (t (set c)) (x (set (tuple21 b c)))
  (y c))
  (= (mem (tuple2 (set1 (tuple2 b1 c1)) c1)
  (Tuple2 (set1 (tuple2 b1 c1)) c1 (t2tb131 x) (t2tb135 y))
  (times c1 (set1 (tuple2 b1 c1)) (t2tb130 s) (t2tb132 t)))
  (and (mem9 x s) (mem7 y t)))))

(declare-fun t2tb1101 ((set (tuple21 (set (tuple21 b c)) (set (tuple21 a
  b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 b c)) (set (tuple21 a b)))))) (sort
  (set1 (tuple2 (set1 (tuple2 b1 c1)) (set1 (tuple2 a1 b1)))) (t2tb1101 x))))

(declare-fun tb2t1101 (uni) (set (tuple21 (set (tuple21 b c)) (set (tuple21 a
  b)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 b c)) (set (tuple21 a b))))))
  (! (= (tb2t1101 (t2tb1101 i)) i) :pattern ((t2tb1101 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 b1 c1)) (set1 (tuple2 a1 b1)))) j)
     (= (t2tb1101 (tb2t1101 j)) j)) :pattern ((t2tb1101 (tb2t1101 j))) )))

(declare-fun t2tb1102 ((tuple21 (set (tuple21 b c)) (set (tuple21 a
  b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 b c)) (set (tuple21 a b))))) (sort
  (tuple2 (set1 (tuple2 b1 c1)) (set1 (tuple2 a1 b1))) (t2tb1102 x))))

(declare-fun tb2t1102 (uni) (tuple21 (set (tuple21 b c)) (set (tuple21 a
  b))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 b c)) (set (tuple21 a b)))))
  (! (= (tb2t1102 (t2tb1102 i)) i) :pattern ((t2tb1102 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 b1 c1)) (set1 (tuple2 a1 b1))) j)
     (= (t2tb1102 (tb2t1102 j)) j)) :pattern ((t2tb1102 (tb2t1102 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 b c)))) (t (set (set (tuple21 a b))))
  (x (set (tuple21 b c))) (y (set (tuple21 a b))))
  (= (mem (tuple2 (set1 (tuple2 b1 c1)) (set1 (tuple2 a1 b1)))
  (Tuple2 (set1 (tuple2 b1 c1)) (set1 (tuple2 a1 b1)) (t2tb131 x) (t2tb11 y))
  (times (set1 (tuple2 a1 b1)) (set1 (tuple2 b1 c1)) (t2tb130 s) (t2tb10 t)))
  (and (mem9 x s) (mem4 y t)))))

(declare-fun t2tb1103 ((set (tuple21 (set (tuple21 b c)) (tuple21 a
  b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 b c)) (tuple21 a b))))) (sort
  (set1 (tuple2 (set1 (tuple2 b1 c1)) (tuple2 a1 b1))) (t2tb1103 x))))

(declare-fun tb2t1103 (uni) (set (tuple21 (set (tuple21 b c)) (tuple21 a
  b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 b c)) (tuple21 a b)))))
  (! (= (tb2t1103 (t2tb1103 i)) i) :pattern ((t2tb1103 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 b1 c1)) (tuple2 a1 b1))) j)
     (= (t2tb1103 (tb2t1103 j)) j)) :pattern ((t2tb1103 (tb2t1103 j))) )))

(declare-fun t2tb1104 ((tuple21 (set (tuple21 b c)) (tuple21 a b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 b c)) (tuple21 a b)))) (sort
  (tuple2 (set1 (tuple2 b1 c1)) (tuple2 a1 b1)) (t2tb1104 x))))

(declare-fun tb2t1104 (uni) (tuple21 (set (tuple21 b c)) (tuple21 a b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 b c)) (tuple21 a b))))
  (! (= (tb2t1104 (t2tb1104 i)) i) :pattern ((t2tb1104 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 b1 c1)) (tuple2 a1 b1)) j)
     (= (t2tb1104 (tb2t1104 j)) j)) :pattern ((t2tb1104 (tb2t1104 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 b c)))) (t (set (tuple21 a b)))
  (x (set (tuple21 b c))) (y (tuple21 a b)))
  (= (mem (tuple2 (set1 (tuple2 b1 c1)) (tuple2 a1 b1))
  (Tuple2 (set1 (tuple2 b1 c1)) (tuple2 a1 b1) (t2tb131 x) (t2tb13 y))
  (times (tuple2 a1 b1) (set1 (tuple2 b1 c1)) (t2tb130 s) (t2tb11 t)))
  (and (mem9 x s) (mem3 y t)))))

(declare-fun t2tb1105 ((set (tuple21 (set (tuple21 b c)) b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 b c)) b)))) (sort
  (set1 (tuple2 (set1 (tuple2 b1 c1)) b1)) (t2tb1105 x))))

(declare-fun tb2t1105 (uni) (set (tuple21 (set (tuple21 b c)) b)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 b c)) b))))
  (! (= (tb2t1105 (t2tb1105 i)) i) :pattern ((t2tb1105 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 b1 c1)) b1)) j)
     (= (t2tb1105 (tb2t1105 j)) j)) :pattern ((t2tb1105 (tb2t1105 j))) )))

(declare-fun t2tb1106 ((tuple21 (set (tuple21 b c)) b)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 b c)) b))) (sort
  (tuple2 (set1 (tuple2 b1 c1)) b1) (t2tb1106 x))))

(declare-fun tb2t1106 (uni) (tuple21 (set (tuple21 b c)) b))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 b c)) b)))
  (! (= (tb2t1106 (t2tb1106 i)) i) :pattern ((t2tb1106 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 b1 c1)) b1) j)
     (= (t2tb1106 (tb2t1106 j)) j)) :pattern ((t2tb1106 (tb2t1106 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 b c)))) (t (set b)) (x (set (tuple21 b c)))
  (y b))
  (= (mem (tuple2 (set1 (tuple2 b1 c1)) b1)
  (Tuple2 (set1 (tuple2 b1 c1)) b1 (t2tb131 x) (t2tb14 y))
  (times b1 (set1 (tuple2 b1 c1)) (t2tb130 s) (t2tb12 t)))
  (and (mem9 x s) (mem2 y t)))))

(declare-fun t2tb1107 ((set (tuple21 (set (tuple21 b c)) a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 b c)) a)))) (sort
  (set1 (tuple2 (set1 (tuple2 b1 c1)) a1)) (t2tb1107 x))))

(declare-fun tb2t1107 (uni) (set (tuple21 (set (tuple21 b c)) a)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 b c)) a))))
  (! (= (tb2t1107 (t2tb1107 i)) i) :pattern ((t2tb1107 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 b1 c1)) a1)) j)
     (= (t2tb1107 (tb2t1107 j)) j)) :pattern ((t2tb1107 (tb2t1107 j))) )))

(declare-fun t2tb1108 ((tuple21 (set (tuple21 b c)) a)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 b c)) a))) (sort
  (tuple2 (set1 (tuple2 b1 c1)) a1) (t2tb1108 x))))

(declare-fun tb2t1108 (uni) (tuple21 (set (tuple21 b c)) a))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 b c)) a)))
  (! (= (tb2t1108 (t2tb1108 i)) i) :pattern ((t2tb1108 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 b1 c1)) a1) j)
     (= (t2tb1108 (tb2t1108 j)) j)) :pattern ((t2tb1108 (tb2t1108 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 b c)))) (t (set a)) (x (set (tuple21 b c)))
  (y a))
  (= (mem (tuple2 (set1 (tuple2 b1 c1)) a1)
  (Tuple2 (set1 (tuple2 b1 c1)) a1 (t2tb131 x) (t2tb2 y))
  (times a1 (set1 (tuple2 b1 c1)) (t2tb130 s) (t2tb1 t)))
  (and (mem9 x s) (mem1 y t)))))

;; mem_times
  (assert
  (forall ((b2 ty))
  (forall ((s (set (set (tuple21 b c)))) (t uni) (x (set (tuple21 b c)))
  (y uni))
  (= (mem (tuple2 (set1 (tuple2 b1 c1)) b2)
  (Tuple2 (set1 (tuple2 b1 c1)) b2 (t2tb131 x) y)
  (times b2 (set1 (tuple2 b1 c1)) (t2tb130 s) t))
  (and (mem9 x s) (mem b2 y t))))))

(declare-fun t2tb2258 ((set (tuple21 (tuple21 b c) (tuple21 a d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b c) (tuple21 a d))))) (sort
  (set1 (tuple2 (tuple2 b1 c1) (tuple2 a1 d1))) (t2tb2258 x))))

(declare-fun tb2t2258 (uni) (set (tuple21 (tuple21 b c) (tuple21 a d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b c) (tuple21 a d)))))
  (! (= (tb2t2258 (t2tb2258 i)) i) :pattern ((t2tb2258 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 c1) (tuple2 a1 d1))) j)
     (= (t2tb2258 (tb2t2258 j)) j)) :pattern ((t2tb2258 (tb2t2258 j))) )))

(declare-fun t2tb2259 ((tuple21 (tuple21 b c) (tuple21 a d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b c) (tuple21 a d)))) (sort
  (tuple2 (tuple2 b1 c1) (tuple2 a1 d1)) (t2tb2259 x))))

(declare-fun tb2t2259 (uni) (tuple21 (tuple21 b c) (tuple21 a d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b c) (tuple21 a d))))
  (! (= (tb2t2259 (t2tb2259 i)) i) :pattern ((t2tb2259 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 c1) (tuple2 a1 d1)) j)
     (= (t2tb2259 (tb2t2259 j)) j)) :pattern ((t2tb2259 (tb2t2259 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 b c))) (t (set (tuple21 a d))) (x (tuple21 b c))
  (y (tuple21 a d)))
  (= (mem (tuple2 (tuple2 b1 c1) (tuple2 a1 d1))
  (Tuple2 (tuple2 b1 c1) (tuple2 a1 d1) (t2tb134 x) (t2tb904 y))
  (times (tuple2 a1 d1) (tuple2 b1 c1) (t2tb131 s) (t2tb903 t)))
  (and (mem8 x s) (mem32 y t)))))

(declare-fun t2tb2260 ((set (tuple21 (tuple21 b c) (tuple21 b d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b c) (tuple21 b d))))) (sort
  (set1 (tuple2 (tuple2 b1 c1) (tuple2 b1 d1))) (t2tb2260 x))))

(declare-fun tb2t2260 (uni) (set (tuple21 (tuple21 b c) (tuple21 b d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b c) (tuple21 b d)))))
  (! (= (tb2t2260 (t2tb2260 i)) i) :pattern ((t2tb2260 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 c1) (tuple2 b1 d1))) j)
     (= (t2tb2260 (tb2t2260 j)) j)) :pattern ((t2tb2260 (tb2t2260 j))) )))

(declare-fun t2tb2261 ((tuple21 (tuple21 b c) (tuple21 b d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b c) (tuple21 b d)))) (sort
  (tuple2 (tuple2 b1 c1) (tuple2 b1 d1)) (t2tb2261 x))))

(declare-fun tb2t2261 (uni) (tuple21 (tuple21 b c) (tuple21 b d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b c) (tuple21 b d))))
  (! (= (tb2t2261 (t2tb2261 i)) i) :pattern ((t2tb2261 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 c1) (tuple2 b1 d1)) j)
     (= (t2tb2261 (tb2t2261 j)) j)) :pattern ((t2tb2261 (tb2t2261 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 b c))) (t (set (tuple21 b d))) (x (tuple21 b c))
  (y (tuple21 b d)))
  (= (mem (tuple2 (tuple2 b1 c1) (tuple2 b1 d1))
  (Tuple2 (tuple2 b1 c1) (tuple2 b1 d1) (t2tb134 x) (t2tb692 y))
  (times (tuple2 b1 d1) (tuple2 b1 c1) (t2tb131 s) (t2tb687 t)))
  (and (mem8 x s) (mem23 y t)))))

(declare-fun t2tb2262 ((set (tuple21 (tuple21 b c) (set (tuple21 c
  d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b c) (set (tuple21 c d)))))) (sort
  (set1 (tuple2 (tuple2 b1 c1) (set1 (tuple2 c1 d1)))) (t2tb2262 x))))

(declare-fun tb2t2262 (uni) (set (tuple21 (tuple21 b c) (set (tuple21 c
  d)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b c) (set (tuple21 c d))))))
  (! (= (tb2t2262 (t2tb2262 i)) i) :pattern ((t2tb2262 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 c1) (set1 (tuple2 c1 d1)))) j)
     (= (t2tb2262 (tb2t2262 j)) j)) :pattern ((t2tb2262 (tb2t2262 j))) )))

(declare-fun t2tb2263 ((tuple21 (tuple21 b c) (set (tuple21 c d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b c) (set (tuple21 c d))))) (sort
  (tuple2 (tuple2 b1 c1) (set1 (tuple2 c1 d1))) (t2tb2263 x))))

(declare-fun tb2t2263 (uni) (tuple21 (tuple21 b c) (set (tuple21 c d))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b c) (set (tuple21 c d)))))
  (! (= (tb2t2263 (t2tb2263 i)) i) :pattern ((t2tb2263 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 c1) (set1 (tuple2 c1 d1))) j)
     (= (t2tb2263 (tb2t2263 j)) j)) :pattern ((t2tb2263 (tb2t2263 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 b c))) (t (set (set (tuple21 c d))))
  (x (tuple21 b c)) (y (set (tuple21 c d))))
  (= (mem (tuple2 (tuple2 b1 c1) (set1 (tuple2 c1 d1)))
  (Tuple2 (tuple2 b1 c1) (set1 (tuple2 c1 d1)) (t2tb134 x) (t2tb689 y))
  (times (set1 (tuple2 c1 d1)) (tuple2 b1 c1) (t2tb131 s) (t2tb688 t)))
  (and (mem8 x s) (mem22 y t)))))

(declare-fun t2tb2264 ((set (tuple21 (tuple21 b c) (tuple21 c d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b c) (tuple21 c d))))) (sort
  (set1 (tuple2 (tuple2 b1 c1) (tuple2 c1 d1))) (t2tb2264 x))))

(declare-fun tb2t2264 (uni) (set (tuple21 (tuple21 b c) (tuple21 c d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b c) (tuple21 c d)))))
  (! (= (tb2t2264 (t2tb2264 i)) i) :pattern ((t2tb2264 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 c1) (tuple2 c1 d1))) j)
     (= (t2tb2264 (tb2t2264 j)) j)) :pattern ((t2tb2264 (tb2t2264 j))) )))

(declare-fun t2tb2265 ((tuple21 (tuple21 b c) (tuple21 c d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b c) (tuple21 c d)))) (sort
  (tuple2 (tuple2 b1 c1) (tuple2 c1 d1)) (t2tb2265 x))))

(declare-fun tb2t2265 (uni) (tuple21 (tuple21 b c) (tuple21 c d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b c) (tuple21 c d))))
  (! (= (tb2t2265 (t2tb2265 i)) i) :pattern ((t2tb2265 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 c1) (tuple2 c1 d1)) j)
     (= (t2tb2265 (tb2t2265 j)) j)) :pattern ((t2tb2265 (tb2t2265 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 b c))) (t (set (tuple21 c d))) (x (tuple21 b c))
  (y (tuple21 c d)))
  (= (mem (tuple2 (tuple2 b1 c1) (tuple2 c1 d1))
  (Tuple2 (tuple2 b1 c1) (tuple2 c1 d1) (t2tb134 x) (t2tb693 y))
  (times (tuple2 c1 d1) (tuple2 b1 c1) (t2tb131 s) (t2tb689 t)))
  (and (mem8 x s) (mem21 y t)))))

(declare-fun t2tb2266 ((set (tuple21 (tuple21 b c) d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b c) d)))) (sort
  (set1 (tuple2 (tuple2 b1 c1) d1)) (t2tb2266 x))))

(declare-fun tb2t2266 (uni) (set (tuple21 (tuple21 b c) d)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b c) d))))
  (! (= (tb2t2266 (t2tb2266 i)) i) :pattern ((t2tb2266 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 c1) d1)) j)
     (= (t2tb2266 (tb2t2266 j)) j)) :pattern ((t2tb2266 (tb2t2266 j))) )))

(declare-fun t2tb2267 ((tuple21 (tuple21 b c) d)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b c) d))) (sort (tuple2 (tuple2 b1 c1) d1)
  (t2tb2267 x))))

(declare-fun tb2t2267 (uni) (tuple21 (tuple21 b c) d))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b c) d)))
  (! (= (tb2t2267 (t2tb2267 i)) i) :pattern ((t2tb2267 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 c1) d1) j) (= (t2tb2267 (tb2t2267 j)) j)) :pattern (
  (t2tb2267 (tb2t2267 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 b c))) (t (set d)) (x (tuple21 b c)) (y d))
  (= (mem (tuple2 (tuple2 b1 c1) d1)
  (Tuple2 (tuple2 b1 c1) d1 (t2tb134 x) (t2tb694 y))
  (times d1 (tuple2 b1 c1) (t2tb131 s) (t2tb690 t)))
  (and (mem8 x s) (mem20 y t)))))

(declare-fun t2tb1109 ((set (tuple21 (tuple21 b c) (tuple21 a c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b c) (tuple21 a c))))) (sort
  (set1 (tuple2 (tuple2 b1 c1) (tuple2 a1 c1))) (t2tb1109 x))))

(declare-fun tb2t1109 (uni) (set (tuple21 (tuple21 b c) (tuple21 a c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b c) (tuple21 a c)))))
  (! (= (tb2t1109 (t2tb1109 i)) i) :pattern ((t2tb1109 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 c1) (tuple2 a1 c1))) j)
     (= (t2tb1109 (tb2t1109 j)) j)) :pattern ((t2tb1109 (tb2t1109 j))) )))

(declare-fun t2tb1110 ((tuple21 (tuple21 b c) (tuple21 a c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b c) (tuple21 a c)))) (sort
  (tuple2 (tuple2 b1 c1) (tuple2 a1 c1)) (t2tb1110 x))))

(declare-fun tb2t1110 (uni) (tuple21 (tuple21 b c) (tuple21 a c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b c) (tuple21 a c))))
  (! (= (tb2t1110 (t2tb1110 i)) i) :pattern ((t2tb1110 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 c1) (tuple2 a1 c1)) j)
     (= (t2tb1110 (tb2t1110 j)) j)) :pattern ((t2tb1110 (tb2t1110 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 b c))) (t (set (tuple21 a c))) (x (tuple21 b c))
  (y (tuple21 a c)))
  (= (mem (tuple2 (tuple2 b1 c1) (tuple2 a1 c1))
  (Tuple2 (tuple2 b1 c1) (tuple2 a1 c1) (t2tb134 x) (t2tb133 y))
  (times (tuple2 a1 c1) (tuple2 b1 c1) (t2tb131 s) (t2tb129 t)))
  (and (mem8 x s) (mem10 y t)))))

(declare-fun t2tb1111 ((set (tuple21 (tuple21 b c) (set (tuple21 b
  c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b c) (set (tuple21 b c)))))) (sort
  (set1 (tuple2 (tuple2 b1 c1) (set1 (tuple2 b1 c1)))) (t2tb1111 x))))

(declare-fun tb2t1111 (uni) (set (tuple21 (tuple21 b c) (set (tuple21 b
  c)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b c) (set (tuple21 b c))))))
  (! (= (tb2t1111 (t2tb1111 i)) i) :pattern ((t2tb1111 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 c1) (set1 (tuple2 b1 c1)))) j)
     (= (t2tb1111 (tb2t1111 j)) j)) :pattern ((t2tb1111 (tb2t1111 j))) )))

(declare-fun t2tb1112 ((tuple21 (tuple21 b c) (set (tuple21 b c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b c) (set (tuple21 b c))))) (sort
  (tuple2 (tuple2 b1 c1) (set1 (tuple2 b1 c1))) (t2tb1112 x))))

(declare-fun tb2t1112 (uni) (tuple21 (tuple21 b c) (set (tuple21 b c))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b c) (set (tuple21 b c)))))
  (! (= (tb2t1112 (t2tb1112 i)) i) :pattern ((t2tb1112 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 c1) (set1 (tuple2 b1 c1))) j)
     (= (t2tb1112 (tb2t1112 j)) j)) :pattern ((t2tb1112 (tb2t1112 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 b c))) (t (set (set (tuple21 b c))))
  (x (tuple21 b c)) (y (set (tuple21 b c))))
  (= (mem (tuple2 (tuple2 b1 c1) (set1 (tuple2 b1 c1)))
  (Tuple2 (tuple2 b1 c1) (set1 (tuple2 b1 c1)) (t2tb134 x) (t2tb131 y))
  (times (set1 (tuple2 b1 c1)) (tuple2 b1 c1) (t2tb131 s) (t2tb130 t)))
  (and (mem8 x s) (mem9 y t)))))

(declare-fun t2tb1113 ((set (tuple21 (tuple21 b c) (tuple21 b c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b c) (tuple21 b c))))) (sort
  (set1 (tuple2 (tuple2 b1 c1) (tuple2 b1 c1))) (t2tb1113 x))))

(declare-fun tb2t1113 (uni) (set (tuple21 (tuple21 b c) (tuple21 b c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b c) (tuple21 b c)))))
  (! (= (tb2t1113 (t2tb1113 i)) i) :pattern ((t2tb1113 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 c1) (tuple2 b1 c1))) j)
     (= (t2tb1113 (tb2t1113 j)) j)) :pattern ((t2tb1113 (tb2t1113 j))) )))

(declare-fun t2tb1114 ((tuple21 (tuple21 b c) (tuple21 b c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b c) (tuple21 b c)))) (sort
  (tuple2 (tuple2 b1 c1) (tuple2 b1 c1)) (t2tb1114 x))))

(declare-fun tb2t1114 (uni) (tuple21 (tuple21 b c) (tuple21 b c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b c) (tuple21 b c))))
  (! (= (tb2t1114 (t2tb1114 i)) i) :pattern ((t2tb1114 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 c1) (tuple2 b1 c1)) j)
     (= (t2tb1114 (tb2t1114 j)) j)) :pattern ((t2tb1114 (tb2t1114 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 b c))) (t (set (tuple21 b c))) (x (tuple21 b c))
  (y (tuple21 b c)))
  (= (mem (tuple2 (tuple2 b1 c1) (tuple2 b1 c1))
  (Tuple2 (tuple2 b1 c1) (tuple2 b1 c1) (t2tb134 x) (t2tb134 y))
  (times (tuple2 b1 c1) (tuple2 b1 c1) (t2tb131 s) (t2tb131 t)))
  (and (mem8 x s) (mem8 y t)))))

(declare-fun t2tb1115 ((set (tuple21 (tuple21 b c) c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b c) c)))) (sort
  (set1 (tuple2 (tuple2 b1 c1) c1)) (t2tb1115 x))))

(declare-fun tb2t1115 (uni) (set (tuple21 (tuple21 b c) c)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b c) c))))
  (! (= (tb2t1115 (t2tb1115 i)) i) :pattern ((t2tb1115 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 c1) c1)) j)
     (= (t2tb1115 (tb2t1115 j)) j)) :pattern ((t2tb1115 (tb2t1115 j))) )))

(declare-fun t2tb1116 ((tuple21 (tuple21 b c) c)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b c) c))) (sort (tuple2 (tuple2 b1 c1) c1)
  (t2tb1116 x))))

(declare-fun tb2t1116 (uni) (tuple21 (tuple21 b c) c))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b c) c)))
  (! (= (tb2t1116 (t2tb1116 i)) i) :pattern ((t2tb1116 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 c1) c1) j) (= (t2tb1116 (tb2t1116 j)) j)) :pattern (
  (t2tb1116 (tb2t1116 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 b c))) (t (set c)) (x (tuple21 b c)) (y c))
  (= (mem (tuple2 (tuple2 b1 c1) c1)
  (Tuple2 (tuple2 b1 c1) c1 (t2tb134 x) (t2tb135 y))
  (times c1 (tuple2 b1 c1) (t2tb131 s) (t2tb132 t)))
  (and (mem8 x s) (mem7 y t)))))

(declare-fun t2tb1117 ((set (tuple21 (tuple21 b c) (set (tuple21 a
  b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b c) (set (tuple21 a b)))))) (sort
  (set1 (tuple2 (tuple2 b1 c1) (set1 (tuple2 a1 b1)))) (t2tb1117 x))))

(declare-fun tb2t1117 (uni) (set (tuple21 (tuple21 b c) (set (tuple21 a
  b)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b c) (set (tuple21 a b))))))
  (! (= (tb2t1117 (t2tb1117 i)) i) :pattern ((t2tb1117 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 c1) (set1 (tuple2 a1 b1)))) j)
     (= (t2tb1117 (tb2t1117 j)) j)) :pattern ((t2tb1117 (tb2t1117 j))) )))

(declare-fun t2tb1118 ((tuple21 (tuple21 b c) (set (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b c) (set (tuple21 a b))))) (sort
  (tuple2 (tuple2 b1 c1) (set1 (tuple2 a1 b1))) (t2tb1118 x))))

(declare-fun tb2t1118 (uni) (tuple21 (tuple21 b c) (set (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b c) (set (tuple21 a b)))))
  (! (= (tb2t1118 (t2tb1118 i)) i) :pattern ((t2tb1118 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 c1) (set1 (tuple2 a1 b1))) j)
     (= (t2tb1118 (tb2t1118 j)) j)) :pattern ((t2tb1118 (tb2t1118 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 b c))) (t (set (set (tuple21 a b))))
  (x (tuple21 b c)) (y (set (tuple21 a b))))
  (= (mem (tuple2 (tuple2 b1 c1) (set1 (tuple2 a1 b1)))
  (Tuple2 (tuple2 b1 c1) (set1 (tuple2 a1 b1)) (t2tb134 x) (t2tb11 y))
  (times (set1 (tuple2 a1 b1)) (tuple2 b1 c1) (t2tb131 s) (t2tb10 t)))
  (and (mem8 x s) (mem4 y t)))))

(declare-fun t2tb1119 ((set (tuple21 (tuple21 b c) (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b c) (tuple21 a b))))) (sort
  (set1 (tuple2 (tuple2 b1 c1) (tuple2 a1 b1))) (t2tb1119 x))))

(declare-fun tb2t1119 (uni) (set (tuple21 (tuple21 b c) (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b c) (tuple21 a b)))))
  (! (= (tb2t1119 (t2tb1119 i)) i) :pattern ((t2tb1119 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 c1) (tuple2 a1 b1))) j)
     (= (t2tb1119 (tb2t1119 j)) j)) :pattern ((t2tb1119 (tb2t1119 j))) )))

(declare-fun t2tb1120 ((tuple21 (tuple21 b c) (tuple21 a b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b c) (tuple21 a b)))) (sort
  (tuple2 (tuple2 b1 c1) (tuple2 a1 b1)) (t2tb1120 x))))

(declare-fun tb2t1120 (uni) (tuple21 (tuple21 b c) (tuple21 a b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b c) (tuple21 a b))))
  (! (= (tb2t1120 (t2tb1120 i)) i) :pattern ((t2tb1120 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 c1) (tuple2 a1 b1)) j)
     (= (t2tb1120 (tb2t1120 j)) j)) :pattern ((t2tb1120 (tb2t1120 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 b c))) (t (set (tuple21 a b))) (x (tuple21 b c))
  (y (tuple21 a b)))
  (= (mem (tuple2 (tuple2 b1 c1) (tuple2 a1 b1))
  (Tuple2 (tuple2 b1 c1) (tuple2 a1 b1) (t2tb134 x) (t2tb13 y))
  (times (tuple2 a1 b1) (tuple2 b1 c1) (t2tb131 s) (t2tb11 t)))
  (and (mem8 x s) (mem3 y t)))))

(declare-fun t2tb1121 ((set (tuple21 (tuple21 b c) b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b c) b)))) (sort
  (set1 (tuple2 (tuple2 b1 c1) b1)) (t2tb1121 x))))

(declare-fun tb2t1121 (uni) (set (tuple21 (tuple21 b c) b)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b c) b))))
  (! (= (tb2t1121 (t2tb1121 i)) i) :pattern ((t2tb1121 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 c1) b1)) j)
     (= (t2tb1121 (tb2t1121 j)) j)) :pattern ((t2tb1121 (tb2t1121 j))) )))

(declare-fun t2tb1122 ((tuple21 (tuple21 b c) b)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b c) b))) (sort (tuple2 (tuple2 b1 c1) b1)
  (t2tb1122 x))))

(declare-fun tb2t1122 (uni) (tuple21 (tuple21 b c) b))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b c) b)))
  (! (= (tb2t1122 (t2tb1122 i)) i) :pattern ((t2tb1122 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 c1) b1) j) (= (t2tb1122 (tb2t1122 j)) j)) :pattern (
  (t2tb1122 (tb2t1122 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 b c))) (t (set b)) (x (tuple21 b c)) (y b))
  (= (mem (tuple2 (tuple2 b1 c1) b1)
  (Tuple2 (tuple2 b1 c1) b1 (t2tb134 x) (t2tb14 y))
  (times b1 (tuple2 b1 c1) (t2tb131 s) (t2tb12 t)))
  (and (mem8 x s) (mem2 y t)))))

(declare-fun t2tb1123 ((tuple21 (tuple21 b c) a)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b c) a))) (sort (tuple2 (tuple2 b1 c1) a1)
  (t2tb1123 x))))

(declare-fun tb2t1123 (uni) (tuple21 (tuple21 b c) a))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b c) a)))
  (! (= (tb2t1123 (t2tb1123 i)) i) :pattern ((t2tb1123 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 c1) a1) j) (= (t2tb1123 (tb2t1123 j)) j)) :pattern (
  (t2tb1123 (tb2t1123 j))) )))

(declare-fun t2tb1124 ((set (tuple21 (tuple21 b c) a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b c) a)))) (sort
  (set1 (tuple2 (tuple2 b1 c1) a1)) (t2tb1124 x))))

(declare-fun tb2t1124 (uni) (set (tuple21 (tuple21 b c) a)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b c) a))))
  (! (= (tb2t1124 (t2tb1124 i)) i) :pattern ((t2tb1124 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 c1) a1)) j)
     (= (t2tb1124 (tb2t1124 j)) j)) :pattern ((t2tb1124 (tb2t1124 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 b c))) (t (set a)) (x (tuple21 b c)) (y a))
  (= (mem (tuple2 (tuple2 b1 c1) a1)
  (Tuple2 (tuple2 b1 c1) a1 (t2tb134 x) (t2tb2 y))
  (times a1 (tuple2 b1 c1) (t2tb131 s) (t2tb1 t)))
  (and (mem8 x s) (mem1 y t)))))

;; mem_times
  (assert
  (forall ((b2 ty))
  (forall ((s (set (tuple21 b c))) (t uni) (x (tuple21 b c)) (y uni))
  (= (mem (tuple2 (tuple2 b1 c1) b2) (Tuple2 (tuple2 b1 c1) b2 (t2tb134 x) y)
  (times b2 (tuple2 b1 c1) (t2tb131 s) t)) (and (mem8 x s) (mem b2 y t))))))

(declare-fun t2tb2268 ((set (tuple21 c (tuple21 a d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 c (tuple21 a d))))) (sort
  (set1 (tuple2 c1 (tuple2 a1 d1))) (t2tb2268 x))))

(declare-fun tb2t2268 (uni) (set (tuple21 c (tuple21 a d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 c (tuple21 a d)))))
  (! (= (tb2t2268 (t2tb2268 i)) i) :pattern ((t2tb2268 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 c1 (tuple2 a1 d1))) j)
     (= (t2tb2268 (tb2t2268 j)) j)) :pattern ((t2tb2268 (tb2t2268 j))) )))

(declare-fun t2tb2269 ((tuple21 c (tuple21 a d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 c (tuple21 a d)))) (sort (tuple2 c1 (tuple2 a1 d1))
  (t2tb2269 x))))

(declare-fun tb2t2269 (uni) (tuple21 c (tuple21 a d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 c (tuple21 a d))))
  (! (= (tb2t2269 (t2tb2269 i)) i) :pattern ((t2tb2269 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 c1 (tuple2 a1 d1)) j) (= (t2tb2269 (tb2t2269 j)) j)) :pattern (
  (t2tb2269 (tb2t2269 j))) )))

;; mem_times
  (assert
  (forall ((s (set c)) (t (set (tuple21 a d))) (x c) (y (tuple21 a d)))
  (= (mem (tuple2 c1 (tuple2 a1 d1))
  (Tuple2 c1 (tuple2 a1 d1) (t2tb135 x) (t2tb904 y))
  (times (tuple2 a1 d1) c1 (t2tb132 s) (t2tb903 t)))
  (and (mem7 x s) (mem32 y t)))))

(declare-fun t2tb1782 ((tuple21 c (tuple21 b d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 c (tuple21 b d)))) (sort (tuple2 c1 (tuple2 b1 d1))
  (t2tb1782 x))))

(declare-fun tb2t1782 (uni) (tuple21 c (tuple21 b d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 c (tuple21 b d))))
  (! (= (tb2t1782 (t2tb1782 i)) i) :pattern ((t2tb1782 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 c1 (tuple2 b1 d1)) j) (= (t2tb1782 (tb2t1782 j)) j)) :pattern (
  (t2tb1782 (tb2t1782 j))) )))

(declare-fun t2tb2049 ((set (tuple21 c (tuple21 b d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 c (tuple21 b d))))) (sort
  (set1 (tuple2 c1 (tuple2 b1 d1))) (t2tb2049 x))))

(declare-fun tb2t2049 (uni) (set (tuple21 c (tuple21 b d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 c (tuple21 b d)))))
  (! (= (tb2t2049 (t2tb2049 i)) i) :pattern ((t2tb2049 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 c1 (tuple2 b1 d1))) j)
     (= (t2tb2049 (tb2t2049 j)) j)) :pattern ((t2tb2049 (tb2t2049 j))) )))

;; mem_times
  (assert
  (forall ((s (set c)) (t (set (tuple21 b d))) (x c) (y (tuple21 b d)))
  (= (mem (tuple2 c1 (tuple2 b1 d1))
  (Tuple2 c1 (tuple2 b1 d1) (t2tb135 x) (t2tb692 y))
  (times (tuple2 b1 d1) c1 (t2tb132 s) (t2tb687 t)))
  (and (mem7 x s) (mem23 y t)))))

(declare-fun t2tb855 ((set (tuple21 c (set (tuple21 c d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 c (set (tuple21 c d)))))) (sort
  (set1 (tuple2 c1 (set1 (tuple2 c1 d1)))) (t2tb855 x))))

(declare-fun tb2t855 (uni) (set (tuple21 c (set (tuple21 c d)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 c (set (tuple21 c d))))))
  (! (= (tb2t855 (t2tb855 i)) i) :pattern ((t2tb855 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 c1 (set1 (tuple2 c1 d1)))) j)
     (= (t2tb855 (tb2t855 j)) j)) :pattern ((t2tb855 (tb2t855 j))) )))

(declare-fun t2tb856 ((tuple21 c (set (tuple21 c d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 c (set (tuple21 c d))))) (sort
  (tuple2 c1 (set1 (tuple2 c1 d1))) (t2tb856 x))))

(declare-fun tb2t856 (uni) (tuple21 c (set (tuple21 c d))))

;; BridgeL
  (assert
  (forall ((i (tuple21 c (set (tuple21 c d)))))
  (! (= (tb2t856 (t2tb856 i)) i) :pattern ((t2tb856 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 c1 (set1 (tuple2 c1 d1))) j)
     (= (t2tb856 (tb2t856 j)) j)) :pattern ((t2tb856 (tb2t856 j))) )))

;; mem_times
  (assert
  (forall ((s (set c)) (t (set (set (tuple21 c d)))) (x c) (y (set (tuple21 c
  d))))
  (= (mem (tuple2 c1 (set1 (tuple2 c1 d1)))
  (Tuple2 c1 (set1 (tuple2 c1 d1)) (t2tb135 x) (t2tb689 y))
  (times (set1 (tuple2 c1 d1)) c1 (t2tb132 s) (t2tb688 t)))
  (and (mem7 x s) (mem22 y t)))))

(declare-fun t2tb857 ((set (tuple21 c (tuple21 c d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 c (tuple21 c d))))) (sort
  (set1 (tuple2 c1 (tuple2 c1 d1))) (t2tb857 x))))

(declare-fun tb2t857 (uni) (set (tuple21 c (tuple21 c d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 c (tuple21 c d)))))
  (! (= (tb2t857 (t2tb857 i)) i) :pattern ((t2tb857 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 c1 (tuple2 c1 d1))) j)
     (= (t2tb857 (tb2t857 j)) j)) :pattern ((t2tb857 (tb2t857 j))) )))

(declare-fun t2tb858 ((tuple21 c (tuple21 c d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 c (tuple21 c d)))) (sort (tuple2 c1 (tuple2 c1 d1))
  (t2tb858 x))))

(declare-fun tb2t858 (uni) (tuple21 c (tuple21 c d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 c (tuple21 c d))))
  (! (= (tb2t858 (t2tb858 i)) i) :pattern ((t2tb858 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 c1 (tuple2 c1 d1)) j) (= (t2tb858 (tb2t858 j)) j)) :pattern (
  (t2tb858 (tb2t858 j))) )))

;; mem_times
  (assert
  (forall ((s (set c)) (t (set (tuple21 c d))) (x c) (y (tuple21 c d)))
  (= (mem (tuple2 c1 (tuple2 c1 d1))
  (Tuple2 c1 (tuple2 c1 d1) (t2tb135 x) (t2tb693 y))
  (times (tuple2 c1 d1) c1 (t2tb132 s) (t2tb689 t)))
  (and (mem7 x s) (mem21 y t)))))

;; mem_times
  (assert
  (forall ((s (set c)) (t (set d)) (x c) (y d))
  (= (mem21 (tb2t693 (Tuple2 c1 d1 (t2tb135 x) (t2tb694 y)))
  (tb2t689 (times d1 c1 (t2tb132 s) (t2tb690 t))))
  (and (mem7 x s) (mem20 y t)))))

(declare-fun t2tb210 ((set (tuple21 c (tuple21 a c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 c (tuple21 a c))))) (sort
  (set1 (tuple2 c1 (tuple2 a1 c1))) (t2tb210 x))))

(declare-fun tb2t210 (uni) (set (tuple21 c (tuple21 a c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 c (tuple21 a c)))))
  (! (= (tb2t210 (t2tb210 i)) i) :pattern ((t2tb210 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 c1 (tuple2 a1 c1))) j)
     (= (t2tb210 (tb2t210 j)) j)) :pattern ((t2tb210 (tb2t210 j))) )))

(declare-fun t2tb211 ((tuple21 c (tuple21 a c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 c (tuple21 a c)))) (sort (tuple2 c1 (tuple2 a1 c1))
  (t2tb211 x))))

(declare-fun tb2t211 (uni) (tuple21 c (tuple21 a c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 c (tuple21 a c))))
  (! (= (tb2t211 (t2tb211 i)) i) :pattern ((t2tb211 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 c1 (tuple2 a1 c1)) j) (= (t2tb211 (tb2t211 j)) j)) :pattern (
  (t2tb211 (tb2t211 j))) )))

;; mem_times
  (assert
  (forall ((s (set c)) (t (set (tuple21 a c))) (x c) (y (tuple21 a c)))
  (= (mem (tuple2 c1 (tuple2 a1 c1))
  (Tuple2 c1 (tuple2 a1 c1) (t2tb135 x) (t2tb133 y))
  (times (tuple2 a1 c1) c1 (t2tb132 s) (t2tb129 t)))
  (and (mem7 x s) (mem10 y t)))))

(declare-fun t2tb1125 ((set (tuple21 c (set (tuple21 b c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 c (set (tuple21 b c)))))) (sort
  (set1 (tuple2 c1 (set1 (tuple2 b1 c1)))) (t2tb1125 x))))

(declare-fun tb2t1125 (uni) (set (tuple21 c (set (tuple21 b c)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 c (set (tuple21 b c))))))
  (! (= (tb2t1125 (t2tb1125 i)) i) :pattern ((t2tb1125 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 c1 (set1 (tuple2 b1 c1)))) j)
     (= (t2tb1125 (tb2t1125 j)) j)) :pattern ((t2tb1125 (tb2t1125 j))) )))

(declare-fun t2tb1126 ((tuple21 c (set (tuple21 b c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 c (set (tuple21 b c))))) (sort
  (tuple2 c1 (set1 (tuple2 b1 c1))) (t2tb1126 x))))

(declare-fun tb2t1126 (uni) (tuple21 c (set (tuple21 b c))))

;; BridgeL
  (assert
  (forall ((i (tuple21 c (set (tuple21 b c)))))
  (! (= (tb2t1126 (t2tb1126 i)) i) :pattern ((t2tb1126 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 c1 (set1 (tuple2 b1 c1))) j)
     (= (t2tb1126 (tb2t1126 j)) j)) :pattern ((t2tb1126 (tb2t1126 j))) )))

;; mem_times
  (assert
  (forall ((s (set c)) (t (set (set (tuple21 b c)))) (x c) (y (set (tuple21 b
  c))))
  (= (mem (tuple2 c1 (set1 (tuple2 b1 c1)))
  (Tuple2 c1 (set1 (tuple2 b1 c1)) (t2tb135 x) (t2tb131 y))
  (times (set1 (tuple2 b1 c1)) c1 (t2tb132 s) (t2tb130 t)))
  (and (mem7 x s) (mem9 y t)))))

(declare-fun t2tb1127 ((set (tuple21 c (tuple21 b c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 c (tuple21 b c))))) (sort
  (set1 (tuple2 c1 (tuple2 b1 c1))) (t2tb1127 x))))

(declare-fun tb2t1127 (uni) (set (tuple21 c (tuple21 b c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 c (tuple21 b c)))))
  (! (= (tb2t1127 (t2tb1127 i)) i) :pattern ((t2tb1127 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 c1 (tuple2 b1 c1))) j)
     (= (t2tb1127 (tb2t1127 j)) j)) :pattern ((t2tb1127 (tb2t1127 j))) )))

(declare-fun t2tb1128 ((tuple21 c (tuple21 b c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 c (tuple21 b c)))) (sort (tuple2 c1 (tuple2 b1 c1))
  (t2tb1128 x))))

(declare-fun tb2t1128 (uni) (tuple21 c (tuple21 b c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 c (tuple21 b c))))
  (! (= (tb2t1128 (t2tb1128 i)) i) :pattern ((t2tb1128 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 c1 (tuple2 b1 c1)) j) (= (t2tb1128 (tb2t1128 j)) j)) :pattern (
  (t2tb1128 (tb2t1128 j))) )))

;; mem_times
  (assert
  (forall ((s (set c)) (t (set (tuple21 b c))) (x c) (y (tuple21 b c)))
  (= (mem (tuple2 c1 (tuple2 b1 c1))
  (Tuple2 c1 (tuple2 b1 c1) (t2tb135 x) (t2tb134 y))
  (times (tuple2 b1 c1) c1 (t2tb132 s) (t2tb131 t)))
  (and (mem7 x s) (mem8 y t)))))

(declare-fun t2tb216 ((set (tuple21 c c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 c c)))) (sort (set1 (tuple2 c1 c1)) (t2tb216 x))))

(declare-fun tb2t216 (uni) (set (tuple21 c c)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 c c))))
  (! (= (tb2t216 (t2tb216 i)) i) :pattern ((t2tb216 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 c1 c1)) j) (= (t2tb216 (tb2t216 j)) j)) :pattern (
  (t2tb216 (tb2t216 j))) )))

(declare-fun t2tb217 ((tuple21 c c)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 c c))) (sort (tuple2 c1 c1) (t2tb217 x))))

(declare-fun tb2t217 (uni) (tuple21 c c))

;; BridgeL
  (assert
  (forall ((i (tuple21 c c)))
  (! (= (tb2t217 (t2tb217 i)) i) :pattern ((t2tb217 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 c1 c1) j) (= (t2tb217 (tb2t217 j)) j)) :pattern (
  (t2tb217 (tb2t217 j))) )))

;; mem_times
  (assert
  (forall ((s (set c)) (t (set c)) (x c) (y c))
  (= (mem (tuple2 c1 c1) (Tuple2 c1 c1 (t2tb135 x) (t2tb135 y))
  (times c1 c1 (t2tb132 s) (t2tb132 t))) (and (mem7 x s) (mem7 y t)))))

(declare-fun t2tb218 ((set (tuple21 c (set (tuple21 a b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 c (set (tuple21 a b)))))) (sort
  (set1 (tuple2 c1 (set1 (tuple2 a1 b1)))) (t2tb218 x))))

(declare-fun tb2t218 (uni) (set (tuple21 c (set (tuple21 a b)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 c (set (tuple21 a b))))))
  (! (= (tb2t218 (t2tb218 i)) i) :pattern ((t2tb218 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 c1 (set1 (tuple2 a1 b1)))) j)
     (= (t2tb218 (tb2t218 j)) j)) :pattern ((t2tb218 (tb2t218 j))) )))

(declare-fun t2tb219 ((tuple21 c (set (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 c (set (tuple21 a b))))) (sort
  (tuple2 c1 (set1 (tuple2 a1 b1))) (t2tb219 x))))

(declare-fun tb2t219 (uni) (tuple21 c (set (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (tuple21 c (set (tuple21 a b)))))
  (! (= (tb2t219 (t2tb219 i)) i) :pattern ((t2tb219 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 c1 (set1 (tuple2 a1 b1))) j)
     (= (t2tb219 (tb2t219 j)) j)) :pattern ((t2tb219 (tb2t219 j))) )))

;; mem_times
  (assert
  (forall ((s (set c)) (t (set (set (tuple21 a b)))) (x c) (y (set (tuple21 a
  b))))
  (= (mem (tuple2 c1 (set1 (tuple2 a1 b1)))
  (Tuple2 c1 (set1 (tuple2 a1 b1)) (t2tb135 x) (t2tb11 y))
  (times (set1 (tuple2 a1 b1)) c1 (t2tb132 s) (t2tb10 t)))
  (and (mem7 x s) (mem4 y t)))))

(declare-fun t2tb220 ((set (tuple21 c (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 c (tuple21 a b))))) (sort
  (set1 (tuple2 c1 (tuple2 a1 b1))) (t2tb220 x))))

(declare-fun tb2t220 (uni) (set (tuple21 c (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 c (tuple21 a b)))))
  (! (= (tb2t220 (t2tb220 i)) i) :pattern ((t2tb220 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 c1 (tuple2 a1 b1))) j)
     (= (t2tb220 (tb2t220 j)) j)) :pattern ((t2tb220 (tb2t220 j))) )))

(declare-fun t2tb221 ((tuple21 c (tuple21 a b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 c (tuple21 a b)))) (sort (tuple2 c1 (tuple2 a1 b1))
  (t2tb221 x))))

(declare-fun tb2t221 (uni) (tuple21 c (tuple21 a b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 c (tuple21 a b))))
  (! (= (tb2t221 (t2tb221 i)) i) :pattern ((t2tb221 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 c1 (tuple2 a1 b1)) j) (= (t2tb221 (tb2t221 j)) j)) :pattern (
  (t2tb221 (tb2t221 j))) )))

;; mem_times
  (assert
  (forall ((s (set c)) (t (set (tuple21 a b))) (x c) (y (tuple21 a b)))
  (= (mem (tuple2 c1 (tuple2 a1 b1))
  (Tuple2 c1 (tuple2 a1 b1) (t2tb135 x) (t2tb13 y))
  (times (tuple2 a1 b1) c1 (t2tb132 s) (t2tb11 t)))
  (and (mem7 x s) (mem3 y t)))))

(declare-fun t2tb222 ((set (tuple21 c b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 c b)))) (sort (set1 (tuple2 c1 b1)) (t2tb222 x))))

(declare-fun tb2t222 (uni) (set (tuple21 c b)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 c b))))
  (! (= (tb2t222 (t2tb222 i)) i) :pattern ((t2tb222 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 c1 b1)) j) (= (t2tb222 (tb2t222 j)) j)) :pattern (
  (t2tb222 (tb2t222 j))) )))

(declare-fun t2tb223 ((tuple21 c b)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 c b))) (sort (tuple2 c1 b1) (t2tb223 x))))

(declare-fun tb2t223 (uni) (tuple21 c b))

;; BridgeL
  (assert
  (forall ((i (tuple21 c b)))
  (! (= (tb2t223 (t2tb223 i)) i) :pattern ((t2tb223 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 c1 b1) j) (= (t2tb223 (tb2t223 j)) j)) :pattern (
  (t2tb223 (tb2t223 j))) )))

;; mem_times
  (assert
  (forall ((s (set c)) (t (set b)) (x c) (y b))
  (= (mem (tuple2 c1 b1) (Tuple2 c1 b1 (t2tb135 x) (t2tb14 y))
  (times b1 c1 (t2tb132 s) (t2tb12 t))) (and (mem7 x s) (mem2 y t)))))

(declare-fun t2tb224 ((set (tuple21 c a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 c a)))) (sort (set1 (tuple2 c1 a1)) (t2tb224 x))))

(declare-fun tb2t224 (uni) (set (tuple21 c a)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 c a))))
  (! (= (tb2t224 (t2tb224 i)) i) :pattern ((t2tb224 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 c1 a1)) j) (= (t2tb224 (tb2t224 j)) j)) :pattern (
  (t2tb224 (tb2t224 j))) )))

(declare-fun t2tb225 ((tuple21 c a)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 c a))) (sort (tuple2 c1 a1) (t2tb225 x))))

(declare-fun tb2t225 (uni) (tuple21 c a))

;; BridgeL
  (assert
  (forall ((i (tuple21 c a)))
  (! (= (tb2t225 (t2tb225 i)) i) :pattern ((t2tb225 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 c1 a1) j) (= (t2tb225 (tb2t225 j)) j)) :pattern (
  (t2tb225 (tb2t225 j))) )))

;; mem_times
  (assert
  (forall ((s (set c)) (t (set a)) (x c) (y a))
  (= (mem (tuple2 c1 a1) (Tuple2 c1 a1 (t2tb135 x) (t2tb2 y))
  (times a1 c1 (t2tb132 s) (t2tb1 t))) (and (mem7 x s) (mem1 y t)))))

;; mem_times
  (assert
  (forall ((b2 ty))
  (forall ((s (set c)) (t uni) (x c) (y uni))
  (= (mem (tuple2 c1 b2) (Tuple2 c1 b2 (t2tb135 x) y)
  (times b2 c1 (t2tb132 s) t)) (and (mem7 x s) (mem b2 y t))))))

(declare-fun t2tb2270 ((tuple21 (set (tuple21 a b)) (tuple21 a d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a b)) (tuple21 a d)))) (sort
  (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 d1)) (t2tb2270 x))))

(declare-fun tb2t2270 (uni) (tuple21 (set (tuple21 a b)) (tuple21 a d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a b)) (tuple21 a d))))
  (! (= (tb2t2270 (t2tb2270 i)) i) :pattern ((t2tb2270 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 d1)) j)
     (= (t2tb2270 (tb2t2270 j)) j)) :pattern ((t2tb2270 (tb2t2270 j))) )))

(declare-fun t2tb2271 ((set (tuple21 (set (tuple21 a b)) (tuple21 a
  d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a b)) (tuple21 a d))))) (sort
  (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 d1))) (t2tb2271 x))))

(declare-fun tb2t2271 (uni) (set (tuple21 (set (tuple21 a b)) (tuple21 a
  d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a b)) (tuple21 a d)))))
  (! (= (tb2t2271 (t2tb2271 i)) i) :pattern ((t2tb2271 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 d1))) j)
     (= (t2tb2271 (tb2t2271 j)) j)) :pattern ((t2tb2271 (tb2t2271 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set (tuple21 a d)))
  (x (set (tuple21 a b))) (y (tuple21 a d)))
  (= (mem (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 d1))
  (Tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 d1) (t2tb11 x) (t2tb904 y))
  (times (tuple2 a1 d1) (set1 (tuple2 a1 b1)) (t2tb10 s) (t2tb903 t)))
  (and (mem4 x s) (mem32 y t)))))

(declare-fun t2tb2050 ((set (tuple21 (set (tuple21 a b)) (tuple21 b
  d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a b)) (tuple21 b d))))) (sort
  (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 b1 d1))) (t2tb2050 x))))

(declare-fun tb2t2050 (uni) (set (tuple21 (set (tuple21 a b)) (tuple21 b
  d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a b)) (tuple21 b d)))))
  (! (= (tb2t2050 (t2tb2050 i)) i) :pattern ((t2tb2050 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 b1 d1))) j)
     (= (t2tb2050 (tb2t2050 j)) j)) :pattern ((t2tb2050 (tb2t2050 j))) )))

(declare-fun t2tb2051 ((tuple21 (set (tuple21 a b)) (tuple21 b d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a b)) (tuple21 b d)))) (sort
  (tuple2 (set1 (tuple2 a1 b1)) (tuple2 b1 d1)) (t2tb2051 x))))

(declare-fun tb2t2051 (uni) (tuple21 (set (tuple21 a b)) (tuple21 b d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a b)) (tuple21 b d))))
  (! (= (tb2t2051 (t2tb2051 i)) i) :pattern ((t2tb2051 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 a1 b1)) (tuple2 b1 d1)) j)
     (= (t2tb2051 (tb2t2051 j)) j)) :pattern ((t2tb2051 (tb2t2051 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set (tuple21 b d)))
  (x (set (tuple21 a b))) (y (tuple21 b d)))
  (= (mem (tuple2 (set1 (tuple2 a1 b1)) (tuple2 b1 d1))
  (Tuple2 (set1 (tuple2 a1 b1)) (tuple2 b1 d1) (t2tb11 x) (t2tb692 y))
  (times (tuple2 b1 d1) (set1 (tuple2 a1 b1)) (t2tb10 s) (t2tb687 t)))
  (and (mem4 x s) (mem23 y t)))))

(declare-fun t2tb865 ((set (tuple21 (set (tuple21 a b)) (set (tuple21 c
  d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a b)) (set (tuple21 c d)))))) (sort
  (set1 (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 c1 d1)))) (t2tb865 x))))

(declare-fun tb2t865 (uni) (set (tuple21 (set (tuple21 a b)) (set (tuple21 c
  d)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a b)) (set (tuple21 c d))))))
  (! (= (tb2t865 (t2tb865 i)) i) :pattern ((t2tb865 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 c1 d1)))) j)
     (= (t2tb865 (tb2t865 j)) j)) :pattern ((t2tb865 (tb2t865 j))) )))

(declare-fun t2tb866 ((tuple21 (set (tuple21 a b)) (set (tuple21 c d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a b)) (set (tuple21 c d))))) (sort
  (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 c1 d1))) (t2tb866 x))))

(declare-fun tb2t866 (uni) (tuple21 (set (tuple21 a b)) (set (tuple21 c d))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a b)) (set (tuple21 c d)))))
  (! (= (tb2t866 (t2tb866 i)) i) :pattern ((t2tb866 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 c1 d1))) j)
     (= (t2tb866 (tb2t866 j)) j)) :pattern ((t2tb866 (tb2t866 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set (set (tuple21 c d))))
  (x (set (tuple21 a b))) (y (set (tuple21 c d))))
  (= (mem (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 c1 d1)))
  (Tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 c1 d1)) (t2tb11 x) (t2tb689 y))
  (times (set1 (tuple2 c1 d1)) (set1 (tuple2 a1 b1)) (t2tb10 s) (t2tb688 t)))
  (and (mem4 x s) (mem22 y t)))))

(declare-fun t2tb867 ((set (tuple21 (set (tuple21 a b)) (tuple21 c d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a b)) (tuple21 c d))))) (sort
  (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 c1 d1))) (t2tb867 x))))

(declare-fun tb2t867 (uni) (set (tuple21 (set (tuple21 a b)) (tuple21 c d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a b)) (tuple21 c d)))))
  (! (= (tb2t867 (t2tb867 i)) i) :pattern ((t2tb867 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 c1 d1))) j)
     (= (t2tb867 (tb2t867 j)) j)) :pattern ((t2tb867 (tb2t867 j))) )))

(declare-fun t2tb868 ((tuple21 (set (tuple21 a b)) (tuple21 c d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a b)) (tuple21 c d)))) (sort
  (tuple2 (set1 (tuple2 a1 b1)) (tuple2 c1 d1)) (t2tb868 x))))

(declare-fun tb2t868 (uni) (tuple21 (set (tuple21 a b)) (tuple21 c d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a b)) (tuple21 c d))))
  (! (= (tb2t868 (t2tb868 i)) i) :pattern ((t2tb868 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 a1 b1)) (tuple2 c1 d1)) j)
     (= (t2tb868 (tb2t868 j)) j)) :pattern ((t2tb868 (tb2t868 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set (tuple21 c d)))
  (x (set (tuple21 a b))) (y (tuple21 c d)))
  (= (mem (tuple2 (set1 (tuple2 a1 b1)) (tuple2 c1 d1))
  (Tuple2 (set1 (tuple2 a1 b1)) (tuple2 c1 d1) (t2tb11 x) (t2tb693 y))
  (times (tuple2 c1 d1) (set1 (tuple2 a1 b1)) (t2tb10 s) (t2tb689 t)))
  (and (mem4 x s) (mem21 y t)))))

(declare-fun t2tb869 ((set (tuple21 (set (tuple21 a b)) d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a b)) d)))) (sort
  (set1 (tuple2 (set1 (tuple2 a1 b1)) d1)) (t2tb869 x))))

(declare-fun tb2t869 (uni) (set (tuple21 (set (tuple21 a b)) d)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a b)) d))))
  (! (= (tb2t869 (t2tb869 i)) i) :pattern ((t2tb869 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 a1 b1)) d1)) j)
     (= (t2tb869 (tb2t869 j)) j)) :pattern ((t2tb869 (tb2t869 j))) )))

(declare-fun t2tb870 ((tuple21 (set (tuple21 a b)) d)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a b)) d))) (sort
  (tuple2 (set1 (tuple2 a1 b1)) d1) (t2tb870 x))))

(declare-fun tb2t870 (uni) (tuple21 (set (tuple21 a b)) d))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a b)) d)))
  (! (= (tb2t870 (t2tb870 i)) i) :pattern ((t2tb870 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 a1 b1)) d1) j)
     (= (t2tb870 (tb2t870 j)) j)) :pattern ((t2tb870 (tb2t870 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set d)) (x (set (tuple21 a b)))
  (y d))
  (= (mem (tuple2 (set1 (tuple2 a1 b1)) d1)
  (Tuple2 (set1 (tuple2 a1 b1)) d1 (t2tb11 x) (t2tb694 y))
  (times d1 (set1 (tuple2 a1 b1)) (t2tb10 s) (t2tb690 t)))
  (and (mem4 x s) (mem20 y t)))))

(declare-fun t2tb228 ((tuple21 (set (tuple21 a b)) (tuple21 a c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a b)) (tuple21 a c)))) (sort
  (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 c1)) (t2tb228 x))))

(declare-fun tb2t228 (uni) (tuple21 (set (tuple21 a b)) (tuple21 a c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a b)) (tuple21 a c))))
  (! (= (tb2t228 (t2tb228 i)) i) :pattern ((t2tb228 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 c1)) j)
     (= (t2tb228 (tb2t228 j)) j)) :pattern ((t2tb228 (tb2t228 j))) )))

(declare-fun t2tb229 ((set (tuple21 (set (tuple21 a b)) (tuple21 a c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a b)) (tuple21 a c))))) (sort
  (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 c1))) (t2tb229 x))))

(declare-fun tb2t229 (uni) (set (tuple21 (set (tuple21 a b)) (tuple21 a c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a b)) (tuple21 a c)))))
  (! (= (tb2t229 (t2tb229 i)) i) :pattern ((t2tb229 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 c1))) j)
     (= (t2tb229 (tb2t229 j)) j)) :pattern ((t2tb229 (tb2t229 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set (tuple21 a c)))
  (x (set (tuple21 a b))) (y (tuple21 a c)))
  (= (mem (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 c1))
  (Tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 c1) (t2tb11 x) (t2tb133 y))
  (times (tuple2 a1 c1) (set1 (tuple2 a1 b1)) (t2tb10 s) (t2tb129 t)))
  (and (mem4 x s) (mem10 y t)))))

(declare-fun t2tb1129 ((set (tuple21 (set (tuple21 a b)) (set (tuple21 b
  c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a b)) (set (tuple21 b c)))))) (sort
  (set1 (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 b1 c1)))) (t2tb1129 x))))

(declare-fun tb2t1129 (uni) (set (tuple21 (set (tuple21 a b)) (set (tuple21 b
  c)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a b)) (set (tuple21 b c))))))
  (! (= (tb2t1129 (t2tb1129 i)) i) :pattern ((t2tb1129 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 b1 c1)))) j)
     (= (t2tb1129 (tb2t1129 j)) j)) :pattern ((t2tb1129 (tb2t1129 j))) )))

(declare-fun t2tb1130 ((tuple21 (set (tuple21 a b)) (set (tuple21 b
  c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a b)) (set (tuple21 b c))))) (sort
  (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 b1 c1))) (t2tb1130 x))))

(declare-fun tb2t1130 (uni) (tuple21 (set (tuple21 a b)) (set (tuple21 b
  c))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a b)) (set (tuple21 b c)))))
  (! (= (tb2t1130 (t2tb1130 i)) i) :pattern ((t2tb1130 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 b1 c1))) j)
     (= (t2tb1130 (tb2t1130 j)) j)) :pattern ((t2tb1130 (tb2t1130 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set (set (tuple21 b c))))
  (x (set (tuple21 a b))) (y (set (tuple21 b c))))
  (= (mem (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 b1 c1)))
  (Tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 b1 c1)) (t2tb11 x) (t2tb131 y))
  (times (set1 (tuple2 b1 c1)) (set1 (tuple2 a1 b1)) (t2tb10 s) (t2tb130 t)))
  (and (mem4 x s) (mem9 y t)))))

(declare-fun t2tb1131 ((set (tuple21 (set (tuple21 a b)) (tuple21 b
  c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a b)) (tuple21 b c))))) (sort
  (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 b1 c1))) (t2tb1131 x))))

(declare-fun tb2t1131 (uni) (set (tuple21 (set (tuple21 a b)) (tuple21 b
  c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a b)) (tuple21 b c)))))
  (! (= (tb2t1131 (t2tb1131 i)) i) :pattern ((t2tb1131 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 b1 c1))) j)
     (= (t2tb1131 (tb2t1131 j)) j)) :pattern ((t2tb1131 (tb2t1131 j))) )))

(declare-fun t2tb1132 ((tuple21 (set (tuple21 a b)) (tuple21 b c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a b)) (tuple21 b c)))) (sort
  (tuple2 (set1 (tuple2 a1 b1)) (tuple2 b1 c1)) (t2tb1132 x))))

(declare-fun tb2t1132 (uni) (tuple21 (set (tuple21 a b)) (tuple21 b c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a b)) (tuple21 b c))))
  (! (= (tb2t1132 (t2tb1132 i)) i) :pattern ((t2tb1132 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 a1 b1)) (tuple2 b1 c1)) j)
     (= (t2tb1132 (tb2t1132 j)) j)) :pattern ((t2tb1132 (tb2t1132 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set (tuple21 b c)))
  (x (set (tuple21 a b))) (y (tuple21 b c)))
  (= (mem (tuple2 (set1 (tuple2 a1 b1)) (tuple2 b1 c1))
  (Tuple2 (set1 (tuple2 a1 b1)) (tuple2 b1 c1) (t2tb11 x) (t2tb134 y))
  (times (tuple2 b1 c1) (set1 (tuple2 a1 b1)) (t2tb10 s) (t2tb131 t)))
  (and (mem4 x s) (mem8 y t)))))

(declare-fun t2tb234 ((set (tuple21 (set (tuple21 a b)) c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a b)) c)))) (sort
  (set1 (tuple2 (set1 (tuple2 a1 b1)) c1)) (t2tb234 x))))

(declare-fun tb2t234 (uni) (set (tuple21 (set (tuple21 a b)) c)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a b)) c))))
  (! (= (tb2t234 (t2tb234 i)) i) :pattern ((t2tb234 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 a1 b1)) c1)) j)
     (= (t2tb234 (tb2t234 j)) j)) :pattern ((t2tb234 (tb2t234 j))) )))

(declare-fun t2tb235 ((tuple21 (set (tuple21 a b)) c)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a b)) c))) (sort
  (tuple2 (set1 (tuple2 a1 b1)) c1) (t2tb235 x))))

(declare-fun tb2t235 (uni) (tuple21 (set (tuple21 a b)) c))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a b)) c)))
  (! (= (tb2t235 (t2tb235 i)) i) :pattern ((t2tb235 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 a1 b1)) c1) j)
     (= (t2tb235 (tb2t235 j)) j)) :pattern ((t2tb235 (tb2t235 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set c)) (x (set (tuple21 a b)))
  (y c))
  (= (mem (tuple2 (set1 (tuple2 a1 b1)) c1)
  (Tuple2 (set1 (tuple2 a1 b1)) c1 (t2tb11 x) (t2tb135 y))
  (times c1 (set1 (tuple2 a1 b1)) (t2tb10 s) (t2tb132 t)))
  (and (mem4 x s) (mem7 y t)))))

(declare-fun t2tb15 ((set (tuple21 (set (tuple21 a b)) (set (tuple21 a
  b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a b)) (set (tuple21 a b)))))) (sort
  (set1 (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1)))) (t2tb15 x))))

(declare-fun tb2t15 (uni) (set (tuple21 (set (tuple21 a b)) (set (tuple21 a
  b)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a b)) (set (tuple21 a b))))))
  (! (= (tb2t15 (t2tb15 i)) i) :pattern ((t2tb15 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1)))) j)
     (= (t2tb15 (tb2t15 j)) j)) :pattern ((t2tb15 (tb2t15 j))) )))

(declare-fun t2tb16 ((tuple21 (set (tuple21 a b)) (set (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a b)) (set (tuple21 a b))))) (sort
  (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1))) (t2tb16 x))))

(declare-fun tb2t16 (uni) (tuple21 (set (tuple21 a b)) (set (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a b)) (set (tuple21 a b)))))
  (! (= (tb2t16 (t2tb16 i)) i) :pattern ((t2tb16 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1))) j)
     (= (t2tb16 (tb2t16 j)) j)) :pattern ((t2tb16 (tb2t16 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set (set (tuple21 a b))))
  (x (set (tuple21 a b))) (y (set (tuple21 a b))))
  (= (mem (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1)))
  (Tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1)) (t2tb11 x) (t2tb11 y))
  (times (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1)) (t2tb10 s) (t2tb10 t)))
  (and (mem4 x s) (mem4 y t)))))

(declare-fun t2tb17 ((set (tuple21 (set (tuple21 a b)) (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a b)) (tuple21 a b))))) (sort
  (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 b1))) (t2tb17 x))))

(declare-fun tb2t17 (uni) (set (tuple21 (set (tuple21 a b)) (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a b)) (tuple21 a b)))))
  (! (= (tb2t17 (t2tb17 i)) i) :pattern ((t2tb17 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 b1))) j)
     (= (t2tb17 (tb2t17 j)) j)) :pattern ((t2tb17 (tb2t17 j))) )))

(declare-fun t2tb18 ((tuple21 (set (tuple21 a b)) (tuple21 a b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a b)) (tuple21 a b)))) (sort
  (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 b1)) (t2tb18 x))))

(declare-fun tb2t18 (uni) (tuple21 (set (tuple21 a b)) (tuple21 a b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a b)) (tuple21 a b))))
  (! (= (tb2t18 (t2tb18 i)) i) :pattern ((t2tb18 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 b1)) j)
     (= (t2tb18 (tb2t18 j)) j)) :pattern ((t2tb18 (tb2t18 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set (tuple21 a b)))
  (x (set (tuple21 a b))) (y (tuple21 a b)))
  (= (mem (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 b1))
  (Tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 b1) (t2tb11 x) (t2tb13 y))
  (times (tuple2 a1 b1) (set1 (tuple2 a1 b1)) (t2tb10 s) (t2tb11 t)))
  (and (mem4 x s) (mem3 y t)))))

(declare-fun t2tb19 ((set (tuple21 (set (tuple21 a b)) b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a b)) b)))) (sort
  (set1 (tuple2 (set1 (tuple2 a1 b1)) b1)) (t2tb19 x))))

(declare-fun tb2t19 (uni) (set (tuple21 (set (tuple21 a b)) b)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a b)) b))))
  (! (= (tb2t19 (t2tb19 i)) i) :pattern ((t2tb19 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 a1 b1)) b1)) j)
     (= (t2tb19 (tb2t19 j)) j)) :pattern ((t2tb19 (tb2t19 j))) )))

(declare-fun t2tb20 ((tuple21 (set (tuple21 a b)) b)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a b)) b))) (sort
  (tuple2 (set1 (tuple2 a1 b1)) b1) (t2tb20 x))))

(declare-fun tb2t20 (uni) (tuple21 (set (tuple21 a b)) b))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a b)) b)))
  (! (= (tb2t20 (t2tb20 i)) i) :pattern ((t2tb20 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 a1 b1)) b1) j)
     (= (t2tb20 (tb2t20 j)) j)) :pattern ((t2tb20 (tb2t20 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set b)) (x (set (tuple21 a b)))
  (y b))
  (= (mem (tuple2 (set1 (tuple2 a1 b1)) b1)
  (Tuple2 (set1 (tuple2 a1 b1)) b1 (t2tb11 x) (t2tb14 y))
  (times b1 (set1 (tuple2 a1 b1)) (t2tb10 s) (t2tb12 t)))
  (and (mem4 x s) (mem2 y t)))))

(declare-fun t2tb21 ((tuple21 (set (tuple21 a b)) a)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a b)) a))) (sort
  (tuple2 (set1 (tuple2 a1 b1)) a1) (t2tb21 x))))

(declare-fun tb2t21 (uni) (tuple21 (set (tuple21 a b)) a))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a b)) a)))
  (! (= (tb2t21 (t2tb21 i)) i) :pattern ((t2tb21 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 a1 b1)) a1) j)
     (= (t2tb21 (tb2t21 j)) j)) :pattern ((t2tb21 (tb2t21 j))) )))

(declare-fun t2tb22 ((set (tuple21 (set (tuple21 a b)) a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a b)) a)))) (sort
  (set1 (tuple2 (set1 (tuple2 a1 b1)) a1)) (t2tb22 x))))

(declare-fun tb2t22 (uni) (set (tuple21 (set (tuple21 a b)) a)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a b)) a))))
  (! (= (tb2t22 (t2tb22 i)) i) :pattern ((t2tb22 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 a1 b1)) a1)) j)
     (= (t2tb22 (tb2t22 j)) j)) :pattern ((t2tb22 (tb2t22 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set a)) (x (set (tuple21 a b)))
  (y a))
  (= (mem (tuple2 (set1 (tuple2 a1 b1)) a1)
  (Tuple2 (set1 (tuple2 a1 b1)) a1 (t2tb11 x) (t2tb2 y))
  (times a1 (set1 (tuple2 a1 b1)) (t2tb10 s) (t2tb1 t)))
  (and (mem4 x s) (mem1 y t)))))

;; mem_times
  (assert
  (forall ((b2 ty))
  (forall ((s (set (set (tuple21 a b)))) (t uni) (x (set (tuple21 a b)))
  (y uni))
  (= (mem (tuple2 (set1 (tuple2 a1 b1)) b2)
  (Tuple2 (set1 (tuple2 a1 b1)) b2 (t2tb11 x) y)
  (times b2 (set1 (tuple2 a1 b1)) (t2tb10 s) t))
  (and (mem4 x s) (mem b2 y t))))))

(declare-fun t2tb2272 ((set (tuple21 (tuple21 a b) (tuple21 a d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) (tuple21 a d))))) (sort
  (set1 (tuple2 (tuple2 a1 b1) (tuple2 a1 d1))) (t2tb2272 x))))

(declare-fun tb2t2272 (uni) (set (tuple21 (tuple21 a b) (tuple21 a d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a b) (tuple21 a d)))))
  (! (= (tb2t2272 (t2tb2272 i)) i) :pattern ((t2tb2272 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 b1) (tuple2 a1 d1))) j)
     (= (t2tb2272 (tb2t2272 j)) j)) :pattern ((t2tb2272 (tb2t2272 j))) )))

(declare-fun t2tb2273 ((tuple21 (tuple21 a b) (tuple21 a d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a b) (tuple21 a d)))) (sort
  (tuple2 (tuple2 a1 b1) (tuple2 a1 d1)) (t2tb2273 x))))

(declare-fun tb2t2273 (uni) (tuple21 (tuple21 a b) (tuple21 a d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a b) (tuple21 a d))))
  (! (= (tb2t2273 (t2tb2273 i)) i) :pattern ((t2tb2273 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 b1) (tuple2 a1 d1)) j)
     (= (t2tb2273 (tb2t2273 j)) j)) :pattern ((t2tb2273 (tb2t2273 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (tuple21 a d))) (x (tuple21 a b))
  (y (tuple21 a d)))
  (= (mem (tuple2 (tuple2 a1 b1) (tuple2 a1 d1))
  (Tuple2 (tuple2 a1 b1) (tuple2 a1 d1) (t2tb13 x) (t2tb904 y))
  (times (tuple2 a1 d1) (tuple2 a1 b1) (t2tb11 s) (t2tb903 t)))
  (and (mem3 x s) (mem32 y t)))))

(declare-fun t2tb2052 ((set (tuple21 (tuple21 a b) (tuple21 b d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) (tuple21 b d))))) (sort
  (set1 (tuple2 (tuple2 a1 b1) (tuple2 b1 d1))) (t2tb2052 x))))

(declare-fun tb2t2052 (uni) (set (tuple21 (tuple21 a b) (tuple21 b d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a b) (tuple21 b d)))))
  (! (= (tb2t2052 (t2tb2052 i)) i) :pattern ((t2tb2052 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 b1) (tuple2 b1 d1))) j)
     (= (t2tb2052 (tb2t2052 j)) j)) :pattern ((t2tb2052 (tb2t2052 j))) )))

(declare-fun t2tb2053 ((tuple21 (tuple21 a b) (tuple21 b d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a b) (tuple21 b d)))) (sort
  (tuple2 (tuple2 a1 b1) (tuple2 b1 d1)) (t2tb2053 x))))

(declare-fun tb2t2053 (uni) (tuple21 (tuple21 a b) (tuple21 b d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a b) (tuple21 b d))))
  (! (= (tb2t2053 (t2tb2053 i)) i) :pattern ((t2tb2053 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 b1) (tuple2 b1 d1)) j)
     (= (t2tb2053 (tb2t2053 j)) j)) :pattern ((t2tb2053 (tb2t2053 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (tuple21 b d))) (x (tuple21 a b))
  (y (tuple21 b d)))
  (= (mem (tuple2 (tuple2 a1 b1) (tuple2 b1 d1))
  (Tuple2 (tuple2 a1 b1) (tuple2 b1 d1) (t2tb13 x) (t2tb692 y))
  (times (tuple2 b1 d1) (tuple2 a1 b1) (t2tb11 s) (t2tb687 t)))
  (and (mem3 x s) (mem23 y t)))))

(declare-fun t2tb877 ((set (tuple21 (tuple21 a b) (set (tuple21 c d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) (set (tuple21 c d)))))) (sort
  (set1 (tuple2 (tuple2 a1 b1) (set1 (tuple2 c1 d1)))) (t2tb877 x))))

(declare-fun tb2t877 (uni) (set (tuple21 (tuple21 a b) (set (tuple21 c d)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a b) (set (tuple21 c d))))))
  (! (= (tb2t877 (t2tb877 i)) i) :pattern ((t2tb877 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 b1) (set1 (tuple2 c1 d1)))) j)
     (= (t2tb877 (tb2t877 j)) j)) :pattern ((t2tb877 (tb2t877 j))) )))

(declare-fun t2tb878 ((tuple21 (tuple21 a b) (set (tuple21 c d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a b) (set (tuple21 c d))))) (sort
  (tuple2 (tuple2 a1 b1) (set1 (tuple2 c1 d1))) (t2tb878 x))))

(declare-fun tb2t878 (uni) (tuple21 (tuple21 a b) (set (tuple21 c d))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a b) (set (tuple21 c d)))))
  (! (= (tb2t878 (t2tb878 i)) i) :pattern ((t2tb878 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 b1) (set1 (tuple2 c1 d1))) j)
     (= (t2tb878 (tb2t878 j)) j)) :pattern ((t2tb878 (tb2t878 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (set (tuple21 c d))))
  (x (tuple21 a b)) (y (set (tuple21 c d))))
  (= (mem (tuple2 (tuple2 a1 b1) (set1 (tuple2 c1 d1)))
  (Tuple2 (tuple2 a1 b1) (set1 (tuple2 c1 d1)) (t2tb13 x) (t2tb689 y))
  (times (set1 (tuple2 c1 d1)) (tuple2 a1 b1) (t2tb11 s) (t2tb688 t)))
  (and (mem3 x s) (mem22 y t)))))

(declare-fun t2tb879 ((set (tuple21 (tuple21 a b) (tuple21 c d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) (tuple21 c d))))) (sort
  (set1 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1))) (t2tb879 x))))

(declare-fun tb2t879 (uni) (set (tuple21 (tuple21 a b) (tuple21 c d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a b) (tuple21 c d)))))
  (! (= (tb2t879 (t2tb879 i)) i) :pattern ((t2tb879 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1))) j)
     (= (t2tb879 (tb2t879 j)) j)) :pattern ((t2tb879 (tb2t879 j))) )))

(declare-fun t2tb880 ((tuple21 (tuple21 a b) (tuple21 c d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a b) (tuple21 c d)))) (sort
  (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) (t2tb880 x))))

(declare-fun tb2t880 (uni) (tuple21 (tuple21 a b) (tuple21 c d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a b) (tuple21 c d))))
  (! (= (tb2t880 (t2tb880 i)) i) :pattern ((t2tb880 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) j)
     (= (t2tb880 (tb2t880 j)) j)) :pattern ((t2tb880 (tb2t880 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (tuple21 c d))) (x (tuple21 a b))
  (y (tuple21 c d)))
  (= (mem (tuple2 (tuple2 a1 b1) (tuple2 c1 d1))
  (Tuple2 (tuple2 a1 b1) (tuple2 c1 d1) (t2tb13 x) (t2tb693 y))
  (times (tuple2 c1 d1) (tuple2 a1 b1) (t2tb11 s) (t2tb689 t)))
  (and (mem3 x s) (mem21 y t)))))

(declare-fun t2tb881 ((set (tuple21 (tuple21 a b) d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) d)))) (sort
  (set1 (tuple2 (tuple2 a1 b1) d1)) (t2tb881 x))))

(declare-fun tb2t881 (uni) (set (tuple21 (tuple21 a b) d)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a b) d))))
  (! (= (tb2t881 (t2tb881 i)) i) :pattern ((t2tb881 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 b1) d1)) j)
     (= (t2tb881 (tb2t881 j)) j)) :pattern ((t2tb881 (tb2t881 j))) )))

(declare-fun t2tb882 ((tuple21 (tuple21 a b) d)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a b) d))) (sort (tuple2 (tuple2 a1 b1) d1)
  (t2tb882 x))))

(declare-fun tb2t882 (uni) (tuple21 (tuple21 a b) d))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a b) d)))
  (! (= (tb2t882 (t2tb882 i)) i) :pattern ((t2tb882 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 b1) d1) j) (= (t2tb882 (tb2t882 j)) j)) :pattern (
  (t2tb882 (tb2t882 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a b))) (t (set d)) (x (tuple21 a b)) (y d))
  (= (mem (tuple2 (tuple2 a1 b1) d1)
  (Tuple2 (tuple2 a1 b1) d1 (t2tb13 x) (t2tb694 y))
  (times d1 (tuple2 a1 b1) (t2tb11 s) (t2tb690 t)))
  (and (mem3 x s) (mem20 y t)))))

(declare-fun t2tb238 ((set (tuple21 (tuple21 a b) (tuple21 a c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) (tuple21 a c))))) (sort
  (set1 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1))) (t2tb238 x))))

(declare-fun tb2t238 (uni) (set (tuple21 (tuple21 a b) (tuple21 a c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a b) (tuple21 a c)))))
  (! (= (tb2t238 (t2tb238 i)) i) :pattern ((t2tb238 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1))) j)
     (= (t2tb238 (tb2t238 j)) j)) :pattern ((t2tb238 (tb2t238 j))) )))

(declare-fun t2tb239 ((tuple21 (tuple21 a b) (tuple21 a c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a b) (tuple21 a c)))) (sort
  (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) (t2tb239 x))))

(declare-fun tb2t239 (uni) (tuple21 (tuple21 a b) (tuple21 a c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a b) (tuple21 a c))))
  (! (= (tb2t239 (t2tb239 i)) i) :pattern ((t2tb239 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) j)
     (= (t2tb239 (tb2t239 j)) j)) :pattern ((t2tb239 (tb2t239 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (tuple21 a c))) (x (tuple21 a b))
  (y (tuple21 a c)))
  (= (mem (tuple2 (tuple2 a1 b1) (tuple2 a1 c1))
  (Tuple2 (tuple2 a1 b1) (tuple2 a1 c1) (t2tb13 x) (t2tb133 y))
  (times (tuple2 a1 c1) (tuple2 a1 b1) (t2tb11 s) (t2tb129 t)))
  (and (mem3 x s) (mem10 y t)))))

(declare-fun t2tb1133 ((set (tuple21 (tuple21 a b) (set (tuple21 b
  c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) (set (tuple21 b c)))))) (sort
  (set1 (tuple2 (tuple2 a1 b1) (set1 (tuple2 b1 c1)))) (t2tb1133 x))))

(declare-fun tb2t1133 (uni) (set (tuple21 (tuple21 a b) (set (tuple21 b
  c)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a b) (set (tuple21 b c))))))
  (! (= (tb2t1133 (t2tb1133 i)) i) :pattern ((t2tb1133 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 b1) (set1 (tuple2 b1 c1)))) j)
     (= (t2tb1133 (tb2t1133 j)) j)) :pattern ((t2tb1133 (tb2t1133 j))) )))

(declare-fun t2tb1134 ((tuple21 (tuple21 a b) (set (tuple21 b c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a b) (set (tuple21 b c))))) (sort
  (tuple2 (tuple2 a1 b1) (set1 (tuple2 b1 c1))) (t2tb1134 x))))

(declare-fun tb2t1134 (uni) (tuple21 (tuple21 a b) (set (tuple21 b c))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a b) (set (tuple21 b c)))))
  (! (= (tb2t1134 (t2tb1134 i)) i) :pattern ((t2tb1134 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 b1) (set1 (tuple2 b1 c1))) j)
     (= (t2tb1134 (tb2t1134 j)) j)) :pattern ((t2tb1134 (tb2t1134 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (set (tuple21 b c))))
  (x (tuple21 a b)) (y (set (tuple21 b c))))
  (= (mem (tuple2 (tuple2 a1 b1) (set1 (tuple2 b1 c1)))
  (Tuple2 (tuple2 a1 b1) (set1 (tuple2 b1 c1)) (t2tb13 x) (t2tb131 y))
  (times (set1 (tuple2 b1 c1)) (tuple2 a1 b1) (t2tb11 s) (t2tb130 t)))
  (and (mem3 x s) (mem9 y t)))))

(declare-fun t2tb1135 ((set (tuple21 (tuple21 a b) (tuple21 b c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) (tuple21 b c))))) (sort
  (set1 (tuple2 (tuple2 a1 b1) (tuple2 b1 c1))) (t2tb1135 x))))

(declare-fun tb2t1135 (uni) (set (tuple21 (tuple21 a b) (tuple21 b c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a b) (tuple21 b c)))))
  (! (= (tb2t1135 (t2tb1135 i)) i) :pattern ((t2tb1135 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 b1) (tuple2 b1 c1))) j)
     (= (t2tb1135 (tb2t1135 j)) j)) :pattern ((t2tb1135 (tb2t1135 j))) )))

(declare-fun t2tb1136 ((tuple21 (tuple21 a b) (tuple21 b c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a b) (tuple21 b c)))) (sort
  (tuple2 (tuple2 a1 b1) (tuple2 b1 c1)) (t2tb1136 x))))

(declare-fun tb2t1136 (uni) (tuple21 (tuple21 a b) (tuple21 b c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a b) (tuple21 b c))))
  (! (= (tb2t1136 (t2tb1136 i)) i) :pattern ((t2tb1136 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 b1) (tuple2 b1 c1)) j)
     (= (t2tb1136 (tb2t1136 j)) j)) :pattern ((t2tb1136 (tb2t1136 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (tuple21 b c))) (x (tuple21 a b))
  (y (tuple21 b c)))
  (= (mem (tuple2 (tuple2 a1 b1) (tuple2 b1 c1))
  (Tuple2 (tuple2 a1 b1) (tuple2 b1 c1) (t2tb13 x) (t2tb134 y))
  (times (tuple2 b1 c1) (tuple2 a1 b1) (t2tb11 s) (t2tb131 t)))
  (and (mem3 x s) (mem8 y t)))))

(declare-fun t2tb244 ((tuple21 (tuple21 a b) c)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a b) c))) (sort (tuple2 (tuple2 a1 b1) c1)
  (t2tb244 x))))

(declare-fun tb2t244 (uni) (tuple21 (tuple21 a b) c))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a b) c)))
  (! (= (tb2t244 (t2tb244 i)) i) :pattern ((t2tb244 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 b1) c1) j) (= (t2tb244 (tb2t244 j)) j)) :pattern (
  (t2tb244 (tb2t244 j))) )))

(declare-fun t2tb245 ((set (tuple21 (tuple21 a b) c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) c)))) (sort
  (set1 (tuple2 (tuple2 a1 b1) c1)) (t2tb245 x))))

(declare-fun tb2t245 (uni) (set (tuple21 (tuple21 a b) c)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a b) c))))
  (! (= (tb2t245 (t2tb245 i)) i) :pattern ((t2tb245 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 b1) c1)) j)
     (= (t2tb245 (tb2t245 j)) j)) :pattern ((t2tb245 (tb2t245 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a b))) (t (set c)) (x (tuple21 a b)) (y c))
  (= (mem (tuple2 (tuple2 a1 b1) c1)
  (Tuple2 (tuple2 a1 b1) c1 (t2tb13 x) (t2tb135 y))
  (times c1 (tuple2 a1 b1) (t2tb11 s) (t2tb132 t)))
  (and (mem3 x s) (mem7 y t)))))

(declare-fun t2tb23 ((set (tuple21 (tuple21 a b) (set (tuple21 a b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) (set (tuple21 a b)))))) (sort
  (set1 (tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 b1)))) (t2tb23 x))))

(declare-fun tb2t23 (uni) (set (tuple21 (tuple21 a b) (set (tuple21 a b)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a b) (set (tuple21 a b))))))
  (! (= (tb2t23 (t2tb23 i)) i) :pattern ((t2tb23 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 b1)))) j)
     (= (t2tb23 (tb2t23 j)) j)) :pattern ((t2tb23 (tb2t23 j))) )))

(declare-fun t2tb24 ((tuple21 (tuple21 a b) (set (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a b) (set (tuple21 a b))))) (sort
  (tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 b1))) (t2tb24 x))))

(declare-fun tb2t24 (uni) (tuple21 (tuple21 a b) (set (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a b) (set (tuple21 a b)))))
  (! (= (tb2t24 (t2tb24 i)) i) :pattern ((t2tb24 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 b1))) j)
     (= (t2tb24 (tb2t24 j)) j)) :pattern ((t2tb24 (tb2t24 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (set (tuple21 a b))))
  (x (tuple21 a b)) (y (set (tuple21 a b))))
  (= (mem (tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 b1)))
  (Tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 b1)) (t2tb13 x) (t2tb11 y))
  (times (set1 (tuple2 a1 b1)) (tuple2 a1 b1) (t2tb11 s) (t2tb10 t)))
  (and (mem3 x s) (mem4 y t)))))

(declare-fun t2tb25 ((set (tuple21 (tuple21 a b) (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) (tuple21 a b))))) (sort
  (set1 (tuple2 (tuple2 a1 b1) (tuple2 a1 b1))) (t2tb25 x))))

(declare-fun tb2t25 (uni) (set (tuple21 (tuple21 a b) (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a b) (tuple21 a b)))))
  (! (= (tb2t25 (t2tb25 i)) i) :pattern ((t2tb25 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 b1) (tuple2 a1 b1))) j)
     (= (t2tb25 (tb2t25 j)) j)) :pattern ((t2tb25 (tb2t25 j))) )))

(declare-fun t2tb26 ((tuple21 (tuple21 a b) (tuple21 a b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a b) (tuple21 a b)))) (sort
  (tuple2 (tuple2 a1 b1) (tuple2 a1 b1)) (t2tb26 x))))

(declare-fun tb2t26 (uni) (tuple21 (tuple21 a b) (tuple21 a b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a b) (tuple21 a b))))
  (! (= (tb2t26 (t2tb26 i)) i) :pattern ((t2tb26 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 b1) (tuple2 a1 b1)) j)
     (= (t2tb26 (tb2t26 j)) j)) :pattern ((t2tb26 (tb2t26 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (tuple21 a b))) (x (tuple21 a b))
  (y (tuple21 a b)))
  (= (mem (tuple2 (tuple2 a1 b1) (tuple2 a1 b1))
  (Tuple2 (tuple2 a1 b1) (tuple2 a1 b1) (t2tb13 x) (t2tb13 y))
  (times (tuple2 a1 b1) (tuple2 a1 b1) (t2tb11 s) (t2tb11 t)))
  (and (mem3 x s) (mem3 y t)))))

(declare-fun t2tb27 ((set (tuple21 (tuple21 a b) b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) b)))) (sort
  (set1 (tuple2 (tuple2 a1 b1) b1)) (t2tb27 x))))

(declare-fun tb2t27 (uni) (set (tuple21 (tuple21 a b) b)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a b) b))))
  (! (= (tb2t27 (t2tb27 i)) i) :pattern ((t2tb27 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 b1) b1)) j)
     (= (t2tb27 (tb2t27 j)) j)) :pattern ((t2tb27 (tb2t27 j))) )))

(declare-fun t2tb28 ((tuple21 (tuple21 a b) b)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a b) b))) (sort (tuple2 (tuple2 a1 b1) b1)
  (t2tb28 x))))

(declare-fun tb2t28 (uni) (tuple21 (tuple21 a b) b))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a b) b)))
  (! (= (tb2t28 (t2tb28 i)) i) :pattern ((t2tb28 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 b1) b1) j) (= (t2tb28 (tb2t28 j)) j)) :pattern (
  (t2tb28 (tb2t28 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a b))) (t (set b)) (x (tuple21 a b)) (y b))
  (= (mem (tuple2 (tuple2 a1 b1) b1)
  (Tuple2 (tuple2 a1 b1) b1 (t2tb13 x) (t2tb14 y))
  (times b1 (tuple2 a1 b1) (t2tb11 s) (t2tb12 t)))
  (and (mem3 x s) (mem2 y t)))))

(declare-fun t2tb29 ((set (tuple21 (tuple21 a b) a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) a)))) (sort
  (set1 (tuple2 (tuple2 a1 b1) a1)) (t2tb29 x))))

(declare-fun tb2t29 (uni) (set (tuple21 (tuple21 a b) a)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a b) a))))
  (! (= (tb2t29 (t2tb29 i)) i) :pattern ((t2tb29 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 b1) a1)) j)
     (= (t2tb29 (tb2t29 j)) j)) :pattern ((t2tb29 (tb2t29 j))) )))

(declare-fun t2tb30 ((tuple21 (tuple21 a b) a)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a b) a))) (sort (tuple2 (tuple2 a1 b1) a1)
  (t2tb30 x))))

(declare-fun tb2t30 (uni) (tuple21 (tuple21 a b) a))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a b) a)))
  (! (= (tb2t30 (t2tb30 i)) i) :pattern ((t2tb30 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 b1) a1) j) (= (t2tb30 (tb2t30 j)) j)) :pattern (
  (t2tb30 (tb2t30 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a b))) (t (set a)) (x (tuple21 a b)) (y a))
  (= (mem (tuple2 (tuple2 a1 b1) a1)
  (Tuple2 (tuple2 a1 b1) a1 (t2tb13 x) (t2tb2 y))
  (times a1 (tuple2 a1 b1) (t2tb11 s) (t2tb1 t)))
  (and (mem3 x s) (mem1 y t)))))

;; mem_times
  (assert
  (forall ((b2 ty))
  (forall ((s (set (tuple21 a b))) (t uni) (x (tuple21 a b)) (y uni))
  (= (mem (tuple2 (tuple2 a1 b1) b2) (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) y)
  (times b2 (tuple2 a1 b1) (t2tb11 s) t)) (and (mem3 x s) (mem b2 y t))))))

(declare-fun t2tb2274 ((set (tuple21 b (tuple21 a d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 b (tuple21 a d))))) (sort
  (set1 (tuple2 b1 (tuple2 a1 d1))) (t2tb2274 x))))

(declare-fun tb2t2274 (uni) (set (tuple21 b (tuple21 a d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 b (tuple21 a d)))))
  (! (= (tb2t2274 (t2tb2274 i)) i) :pattern ((t2tb2274 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 b1 (tuple2 a1 d1))) j)
     (= (t2tb2274 (tb2t2274 j)) j)) :pattern ((t2tb2274 (tb2t2274 j))) )))

(declare-fun t2tb2275 ((tuple21 b (tuple21 a d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 b (tuple21 a d)))) (sort (tuple2 b1 (tuple2 a1 d1))
  (t2tb2275 x))))

(declare-fun tb2t2275 (uni) (tuple21 b (tuple21 a d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 b (tuple21 a d))))
  (! (= (tb2t2275 (t2tb2275 i)) i) :pattern ((t2tb2275 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 b1 (tuple2 a1 d1)) j) (= (t2tb2275 (tb2t2275 j)) j)) :pattern (
  (t2tb2275 (tb2t2275 j))) )))

;; mem_times
  (assert
  (forall ((s (set b)) (t (set (tuple21 a d))) (x b) (y (tuple21 a d)))
  (= (mem (tuple2 b1 (tuple2 a1 d1))
  (Tuple2 b1 (tuple2 a1 d1) (t2tb14 x) (t2tb904 y))
  (times (tuple2 a1 d1) b1 (t2tb12 s) (t2tb903 t)))
  (and (mem2 x s) (mem32 y t)))))

(declare-fun t2tb888 ((tuple21 b (tuple21 b d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 b (tuple21 b d)))) (sort (tuple2 b1 (tuple2 b1 d1))
  (t2tb888 x))))

(declare-fun tb2t888 (uni) (tuple21 b (tuple21 b d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 b (tuple21 b d))))
  (! (= (tb2t888 (t2tb888 i)) i) :pattern ((t2tb888 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 b1 (tuple2 b1 d1)) j) (= (t2tb888 (tb2t888 j)) j)) :pattern (
  (t2tb888 (tb2t888 j))) )))

(declare-fun t2tb2054 ((set (tuple21 b (tuple21 b d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 b (tuple21 b d))))) (sort
  (set1 (tuple2 b1 (tuple2 b1 d1))) (t2tb2054 x))))

(declare-fun tb2t2054 (uni) (set (tuple21 b (tuple21 b d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 b (tuple21 b d)))))
  (! (= (tb2t2054 (t2tb2054 i)) i) :pattern ((t2tb2054 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 b1 (tuple2 b1 d1))) j)
     (= (t2tb2054 (tb2t2054 j)) j)) :pattern ((t2tb2054 (tb2t2054 j))) )))

;; mem_times
  (assert
  (forall ((s (set b)) (t (set (tuple21 b d))) (x b) (y (tuple21 b d)))
  (= (mem (tuple2 b1 (tuple2 b1 d1))
  (Tuple2 b1 (tuple2 b1 d1) (t2tb14 x) (t2tb692 y))
  (times (tuple2 b1 d1) b1 (t2tb12 s) (t2tb687 t)))
  (and (mem2 x s) (mem23 y t)))))

(declare-fun t2tb889 ((set (tuple21 b (set (tuple21 c d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 b (set (tuple21 c d)))))) (sort
  (set1 (tuple2 b1 (set1 (tuple2 c1 d1)))) (t2tb889 x))))

(declare-fun tb2t889 (uni) (set (tuple21 b (set (tuple21 c d)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 b (set (tuple21 c d))))))
  (! (= (tb2t889 (t2tb889 i)) i) :pattern ((t2tb889 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 b1 (set1 (tuple2 c1 d1)))) j)
     (= (t2tb889 (tb2t889 j)) j)) :pattern ((t2tb889 (tb2t889 j))) )))

(declare-fun t2tb890 ((tuple21 b (set (tuple21 c d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 b (set (tuple21 c d))))) (sort
  (tuple2 b1 (set1 (tuple2 c1 d1))) (t2tb890 x))))

(declare-fun tb2t890 (uni) (tuple21 b (set (tuple21 c d))))

;; BridgeL
  (assert
  (forall ((i (tuple21 b (set (tuple21 c d)))))
  (! (= (tb2t890 (t2tb890 i)) i) :pattern ((t2tb890 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 b1 (set1 (tuple2 c1 d1))) j)
     (= (t2tb890 (tb2t890 j)) j)) :pattern ((t2tb890 (tb2t890 j))) )))

;; mem_times
  (assert
  (forall ((s (set b)) (t (set (set (tuple21 c d)))) (x b) (y (set (tuple21 c
  d))))
  (= (mem (tuple2 b1 (set1 (tuple2 c1 d1)))
  (Tuple2 b1 (set1 (tuple2 c1 d1)) (t2tb14 x) (t2tb689 y))
  (times (set1 (tuple2 c1 d1)) b1 (t2tb12 s) (t2tb688 t)))
  (and (mem2 x s) (mem22 y t)))))

(declare-fun t2tb891 ((set (tuple21 b (tuple21 c d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 b (tuple21 c d))))) (sort
  (set1 (tuple2 b1 (tuple2 c1 d1))) (t2tb891 x))))

(declare-fun tb2t891 (uni) (set (tuple21 b (tuple21 c d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 b (tuple21 c d)))))
  (! (= (tb2t891 (t2tb891 i)) i) :pattern ((t2tb891 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 b1 (tuple2 c1 d1))) j)
     (= (t2tb891 (tb2t891 j)) j)) :pattern ((t2tb891 (tb2t891 j))) )))

(declare-fun t2tb892 ((tuple21 b (tuple21 c d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 b (tuple21 c d)))) (sort (tuple2 b1 (tuple2 c1 d1))
  (t2tb892 x))))

(declare-fun tb2t892 (uni) (tuple21 b (tuple21 c d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 b (tuple21 c d))))
  (! (= (tb2t892 (t2tb892 i)) i) :pattern ((t2tb892 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 b1 (tuple2 c1 d1)) j) (= (t2tb892 (tb2t892 j)) j)) :pattern (
  (t2tb892 (tb2t892 j))) )))

;; mem_times
  (assert
  (forall ((s (set b)) (t (set (tuple21 c d))) (x b) (y (tuple21 c d)))
  (= (mem (tuple2 b1 (tuple2 c1 d1))
  (Tuple2 b1 (tuple2 c1 d1) (t2tb14 x) (t2tb693 y))
  (times (tuple2 c1 d1) b1 (t2tb12 s) (t2tb689 t)))
  (and (mem2 x s) (mem21 y t)))))

;; mem_times
  (assert
  (forall ((s (set b)) (t (set d)) (x b) (y d))
  (= (mem23 (tb2t692 (Tuple2 b1 d1 (t2tb14 x) (t2tb694 y)))
  (tb2t687 (times d1 b1 (t2tb12 s) (t2tb690 t))))
  (and (mem2 x s) (mem20 y t)))))

(declare-fun t2tb248 ((set (tuple21 b (tuple21 a c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 b (tuple21 a c))))) (sort
  (set1 (tuple2 b1 (tuple2 a1 c1))) (t2tb248 x))))

(declare-fun tb2t248 (uni) (set (tuple21 b (tuple21 a c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 b (tuple21 a c)))))
  (! (= (tb2t248 (t2tb248 i)) i) :pattern ((t2tb248 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 b1 (tuple2 a1 c1))) j)
     (= (t2tb248 (tb2t248 j)) j)) :pattern ((t2tb248 (tb2t248 j))) )))

(declare-fun t2tb249 ((tuple21 b (tuple21 a c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 b (tuple21 a c)))) (sort (tuple2 b1 (tuple2 a1 c1))
  (t2tb249 x))))

(declare-fun tb2t249 (uni) (tuple21 b (tuple21 a c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 b (tuple21 a c))))
  (! (= (tb2t249 (t2tb249 i)) i) :pattern ((t2tb249 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 b1 (tuple2 a1 c1)) j) (= (t2tb249 (tb2t249 j)) j)) :pattern (
  (t2tb249 (tb2t249 j))) )))

;; mem_times
  (assert
  (forall ((s (set b)) (t (set (tuple21 a c))) (x b) (y (tuple21 a c)))
  (= (mem (tuple2 b1 (tuple2 a1 c1))
  (Tuple2 b1 (tuple2 a1 c1) (t2tb14 x) (t2tb133 y))
  (times (tuple2 a1 c1) b1 (t2tb12 s) (t2tb129 t)))
  (and (mem2 x s) (mem10 y t)))))

(declare-fun t2tb1137 ((tuple21 b (set (tuple21 b c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 b (set (tuple21 b c))))) (sort
  (tuple2 b1 (set1 (tuple2 b1 c1))) (t2tb1137 x))))

(declare-fun tb2t1137 (uni) (tuple21 b (set (tuple21 b c))))

;; BridgeL
  (assert
  (forall ((i (tuple21 b (set (tuple21 b c)))))
  (! (= (tb2t1137 (t2tb1137 i)) i) :pattern ((t2tb1137 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 b1 (set1 (tuple2 b1 c1))) j)
     (= (t2tb1137 (tb2t1137 j)) j)) :pattern ((t2tb1137 (tb2t1137 j))) )))

(declare-fun t2tb1138 ((set (tuple21 b (set (tuple21 b c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 b (set (tuple21 b c)))))) (sort
  (set1 (tuple2 b1 (set1 (tuple2 b1 c1)))) (t2tb1138 x))))

(declare-fun tb2t1138 (uni) (set (tuple21 b (set (tuple21 b c)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 b (set (tuple21 b c))))))
  (! (= (tb2t1138 (t2tb1138 i)) i) :pattern ((t2tb1138 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 b1 (set1 (tuple2 b1 c1)))) j)
     (= (t2tb1138 (tb2t1138 j)) j)) :pattern ((t2tb1138 (tb2t1138 j))) )))

;; mem_times
  (assert
  (forall ((s (set b)) (t (set (set (tuple21 b c)))) (x b) (y (set (tuple21 b
  c))))
  (= (mem (tuple2 b1 (set1 (tuple2 b1 c1)))
  (Tuple2 b1 (set1 (tuple2 b1 c1)) (t2tb14 x) (t2tb131 y))
  (times (set1 (tuple2 b1 c1)) b1 (t2tb12 s) (t2tb130 t)))
  (and (mem2 x s) (mem9 y t)))))

(declare-fun t2tb1139 ((set (tuple21 b (tuple21 b c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 b (tuple21 b c))))) (sort
  (set1 (tuple2 b1 (tuple2 b1 c1))) (t2tb1139 x))))

(declare-fun tb2t1139 (uni) (set (tuple21 b (tuple21 b c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 b (tuple21 b c)))))
  (! (= (tb2t1139 (t2tb1139 i)) i) :pattern ((t2tb1139 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 b1 (tuple2 b1 c1))) j)
     (= (t2tb1139 (tb2t1139 j)) j)) :pattern ((t2tb1139 (tb2t1139 j))) )))

(declare-fun t2tb1140 ((tuple21 b (tuple21 b c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 b (tuple21 b c)))) (sort (tuple2 b1 (tuple2 b1 c1))
  (t2tb1140 x))))

(declare-fun tb2t1140 (uni) (tuple21 b (tuple21 b c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 b (tuple21 b c))))
  (! (= (tb2t1140 (t2tb1140 i)) i) :pattern ((t2tb1140 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 b1 (tuple2 b1 c1)) j) (= (t2tb1140 (tb2t1140 j)) j)) :pattern (
  (t2tb1140 (tb2t1140 j))) )))

;; mem_times
  (assert
  (forall ((s (set b)) (t (set (tuple21 b c))) (x b) (y (tuple21 b c)))
  (= (mem (tuple2 b1 (tuple2 b1 c1))
  (Tuple2 b1 (tuple2 b1 c1) (t2tb14 x) (t2tb134 y))
  (times (tuple2 b1 c1) b1 (t2tb12 s) (t2tb131 t)))
  (and (mem2 x s) (mem8 y t)))))

;; mem_times
  (assert
  (forall ((s (set b)) (t (set c)) (x b) (y c))
  (= (mem8 (tb2t134 (Tuple2 b1 c1 (t2tb14 x) (t2tb135 y)))
  (tb2t131 (times c1 b1 (t2tb12 s) (t2tb132 t))))
  (and (mem2 x s) (mem7 y t)))))

(declare-fun t2tb31 ((set (tuple21 b (set (tuple21 a b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 b (set (tuple21 a b)))))) (sort
  (set1 (tuple2 b1 (set1 (tuple2 a1 b1)))) (t2tb31 x))))

(declare-fun tb2t31 (uni) (set (tuple21 b (set (tuple21 a b)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 b (set (tuple21 a b))))))
  (! (= (tb2t31 (t2tb31 i)) i) :pattern ((t2tb31 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 b1 (set1 (tuple2 a1 b1)))) j)
     (= (t2tb31 (tb2t31 j)) j)) :pattern ((t2tb31 (tb2t31 j))) )))

(declare-fun t2tb32 ((tuple21 b (set (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 b (set (tuple21 a b))))) (sort
  (tuple2 b1 (set1 (tuple2 a1 b1))) (t2tb32 x))))

(declare-fun tb2t32 (uni) (tuple21 b (set (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (tuple21 b (set (tuple21 a b)))))
  (! (= (tb2t32 (t2tb32 i)) i) :pattern ((t2tb32 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 b1 (set1 (tuple2 a1 b1))) j)
     (= (t2tb32 (tb2t32 j)) j)) :pattern ((t2tb32 (tb2t32 j))) )))

;; mem_times
  (assert
  (forall ((s (set b)) (t (set (set (tuple21 a b)))) (x b) (y (set (tuple21 a
  b))))
  (= (mem (tuple2 b1 (set1 (tuple2 a1 b1)))
  (Tuple2 b1 (set1 (tuple2 a1 b1)) (t2tb14 x) (t2tb11 y))
  (times (set1 (tuple2 a1 b1)) b1 (t2tb12 s) (t2tb10 t)))
  (and (mem2 x s) (mem4 y t)))))

(declare-fun t2tb33 ((tuple21 b (tuple21 a b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 b (tuple21 a b)))) (sort (tuple2 b1 (tuple2 a1 b1))
  (t2tb33 x))))

(declare-fun tb2t33 (uni) (tuple21 b (tuple21 a b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 b (tuple21 a b))))
  (! (= (tb2t33 (t2tb33 i)) i) :pattern ((t2tb33 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 b1 (tuple2 a1 b1)) j) (= (t2tb33 (tb2t33 j)) j)) :pattern (
  (t2tb33 (tb2t33 j))) )))

(declare-fun t2tb34 ((set (tuple21 b (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 b (tuple21 a b))))) (sort
  (set1 (tuple2 b1 (tuple2 a1 b1))) (t2tb34 x))))

(declare-fun tb2t34 (uni) (set (tuple21 b (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 b (tuple21 a b)))))
  (! (= (tb2t34 (t2tb34 i)) i) :pattern ((t2tb34 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 b1 (tuple2 a1 b1))) j)
     (= (t2tb34 (tb2t34 j)) j)) :pattern ((t2tb34 (tb2t34 j))) )))

;; mem_times
  (assert
  (forall ((s (set b)) (t (set (tuple21 a b))) (x b) (y (tuple21 a b)))
  (= (mem (tuple2 b1 (tuple2 a1 b1))
  (Tuple2 b1 (tuple2 a1 b1) (t2tb14 x) (t2tb13 y))
  (times (tuple2 a1 b1) b1 (t2tb12 s) (t2tb11 t)))
  (and (mem2 x s) (mem3 y t)))))

(declare-fun t2tb35 ((set (tuple21 b b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 b b)))) (sort (set1 (tuple2 b1 b1)) (t2tb35 x))))

(declare-fun tb2t35 (uni) (set (tuple21 b b)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 b b))))
  (! (= (tb2t35 (t2tb35 i)) i) :pattern ((t2tb35 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 b1 b1)) j) (= (t2tb35 (tb2t35 j)) j)) :pattern (
  (t2tb35 (tb2t35 j))) )))

(declare-fun t2tb36 ((tuple21 b b)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 b b))) (sort (tuple2 b1 b1) (t2tb36 x))))

(declare-fun tb2t36 (uni) (tuple21 b b))

;; BridgeL
  (assert
  (forall ((i (tuple21 b b)))
  (! (= (tb2t36 (t2tb36 i)) i) :pattern ((t2tb36 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 b1 b1) j) (= (t2tb36 (tb2t36 j)) j)) :pattern (
  (t2tb36 (tb2t36 j))) )))

;; mem_times
  (assert
  (forall ((s (set b)) (t (set b)) (x b) (y b))
  (= (mem (tuple2 b1 b1) (Tuple2 b1 b1 (t2tb14 x) (t2tb14 y))
  (times b1 b1 (t2tb12 s) (t2tb12 t))) (and (mem2 x s) (mem2 y t)))))

(declare-fun t2tb37 ((set (tuple21 b a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 b a)))) (sort (set1 (tuple2 b1 a1)) (t2tb37 x))))

(declare-fun tb2t37 (uni) (set (tuple21 b a)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 b a))))
  (! (= (tb2t37 (t2tb37 i)) i) :pattern ((t2tb37 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 b1 a1)) j) (= (t2tb37 (tb2t37 j)) j)) :pattern (
  (t2tb37 (tb2t37 j))) )))

(declare-fun t2tb38 ((tuple21 b a)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 b a))) (sort (tuple2 b1 a1) (t2tb38 x))))

(declare-fun tb2t38 (uni) (tuple21 b a))

;; BridgeL
  (assert
  (forall ((i (tuple21 b a)))
  (! (= (tb2t38 (t2tb38 i)) i) :pattern ((t2tb38 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 b1 a1) j) (= (t2tb38 (tb2t38 j)) j)) :pattern (
  (t2tb38 (tb2t38 j))) )))

;; mem_times
  (assert
  (forall ((s (set b)) (t (set a)) (x b) (y a))
  (= (mem (tuple2 b1 a1) (Tuple2 b1 a1 (t2tb14 x) (t2tb2 y))
  (times a1 b1 (t2tb12 s) (t2tb1 t))) (and (mem2 x s) (mem1 y t)))))

;; mem_times
  (assert
  (forall ((b2 ty))
  (forall ((s (set b)) (t uni) (x b) (y uni))
  (= (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) y)
  (times b2 b1 (t2tb12 s) t)) (and (mem2 x s) (mem b2 y t))))))

(declare-fun t2tb2276 ((set (tuple21 a (tuple21 a d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (tuple21 a d))))) (sort
  (set1 (tuple2 a1 (tuple2 a1 d1))) (t2tb2276 x))))

(declare-fun tb2t2276 (uni) (set (tuple21 a (tuple21 a d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (tuple21 a d)))))
  (! (= (tb2t2276 (t2tb2276 i)) i) :pattern ((t2tb2276 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (tuple2 a1 d1))) j)
     (= (t2tb2276 (tb2t2276 j)) j)) :pattern ((t2tb2276 (tb2t2276 j))) )))

(declare-fun t2tb2277 ((tuple21 a (tuple21 a d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (tuple21 a d)))) (sort (tuple2 a1 (tuple2 a1 d1))
  (t2tb2277 x))))

(declare-fun tb2t2277 (uni) (tuple21 a (tuple21 a d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (tuple21 a d))))
  (! (= (tb2t2277 (t2tb2277 i)) i) :pattern ((t2tb2277 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (tuple2 a1 d1)) j) (= (t2tb2277 (tb2t2277 j)) j)) :pattern (
  (t2tb2277 (tb2t2277 j))) )))

;; mem_times
  (assert
  (forall ((s (set a)) (t (set (tuple21 a d))) (x a) (y (tuple21 a d)))
  (= (mem (tuple2 a1 (tuple2 a1 d1))
  (Tuple2 a1 (tuple2 a1 d1) (t2tb2 x) (t2tb904 y))
  (times (tuple2 a1 d1) a1 (t2tb1 s) (t2tb903 t)))
  (and (mem1 x s) (mem32 y t)))))

(declare-fun t2tb2055 ((tuple21 a (tuple21 b d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (tuple21 b d)))) (sort (tuple2 a1 (tuple2 b1 d1))
  (t2tb2055 x))))

(declare-fun tb2t2055 (uni) (tuple21 a (tuple21 b d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (tuple21 b d))))
  (! (= (tb2t2055 (t2tb2055 i)) i) :pattern ((t2tb2055 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (tuple2 b1 d1)) j) (= (t2tb2055 (tb2t2055 j)) j)) :pattern (
  (t2tb2055 (tb2t2055 j))) )))

(declare-fun t2tb2056 ((set (tuple21 a (tuple21 b d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (tuple21 b d))))) (sort
  (set1 (tuple2 a1 (tuple2 b1 d1))) (t2tb2056 x))))

(declare-fun tb2t2056 (uni) (set (tuple21 a (tuple21 b d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (tuple21 b d)))))
  (! (= (tb2t2056 (t2tb2056 i)) i) :pattern ((t2tb2056 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (tuple2 b1 d1))) j)
     (= (t2tb2056 (tb2t2056 j)) j)) :pattern ((t2tb2056 (tb2t2056 j))) )))

;; mem_times
  (assert
  (forall ((s (set a)) (t (set (tuple21 b d))) (x a) (y (tuple21 b d)))
  (= (mem (tuple2 a1 (tuple2 b1 d1))
  (Tuple2 a1 (tuple2 b1 d1) (t2tb2 x) (t2tb692 y))
  (times (tuple2 b1 d1) a1 (t2tb1 s) (t2tb687 t)))
  (and (mem1 x s) (mem23 y t)))))

(declare-fun t2tb899 ((set (tuple21 a (set (tuple21 c d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (set (tuple21 c d)))))) (sort
  (set1 (tuple2 a1 (set1 (tuple2 c1 d1)))) (t2tb899 x))))

(declare-fun tb2t899 (uni) (set (tuple21 a (set (tuple21 c d)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (set (tuple21 c d))))))
  (! (= (tb2t899 (t2tb899 i)) i) :pattern ((t2tb899 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (set1 (tuple2 c1 d1)))) j)
     (= (t2tb899 (tb2t899 j)) j)) :pattern ((t2tb899 (tb2t899 j))) )))

(declare-fun t2tb900 ((tuple21 a (set (tuple21 c d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (set (tuple21 c d))))) (sort
  (tuple2 a1 (set1 (tuple2 c1 d1))) (t2tb900 x))))

(declare-fun tb2t900 (uni) (tuple21 a (set (tuple21 c d))))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (set (tuple21 c d)))))
  (! (= (tb2t900 (t2tb900 i)) i) :pattern ((t2tb900 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (set1 (tuple2 c1 d1))) j)
     (= (t2tb900 (tb2t900 j)) j)) :pattern ((t2tb900 (tb2t900 j))) )))

;; mem_times
  (assert
  (forall ((s (set a)) (t (set (set (tuple21 c d)))) (x a) (y (set (tuple21 c
  d))))
  (= (mem (tuple2 a1 (set1 (tuple2 c1 d1)))
  (Tuple2 a1 (set1 (tuple2 c1 d1)) (t2tb2 x) (t2tb689 y))
  (times (set1 (tuple2 c1 d1)) a1 (t2tb1 s) (t2tb688 t)))
  (and (mem1 x s) (mem22 y t)))))

(declare-fun t2tb901 ((set (tuple21 a (tuple21 c d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (tuple21 c d))))) (sort
  (set1 (tuple2 a1 (tuple2 c1 d1))) (t2tb901 x))))

(declare-fun tb2t901 (uni) (set (tuple21 a (tuple21 c d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (tuple21 c d)))))
  (! (= (tb2t901 (t2tb901 i)) i) :pattern ((t2tb901 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (tuple2 c1 d1))) j)
     (= (t2tb901 (tb2t901 j)) j)) :pattern ((t2tb901 (tb2t901 j))) )))

(declare-fun t2tb902 ((tuple21 a (tuple21 c d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (tuple21 c d)))) (sort (tuple2 a1 (tuple2 c1 d1))
  (t2tb902 x))))

(declare-fun tb2t902 (uni) (tuple21 a (tuple21 c d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (tuple21 c d))))
  (! (= (tb2t902 (t2tb902 i)) i) :pattern ((t2tb902 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (tuple2 c1 d1)) j) (= (t2tb902 (tb2t902 j)) j)) :pattern (
  (t2tb902 (tb2t902 j))) )))

;; mem_times
  (assert
  (forall ((s (set a)) (t (set (tuple21 c d))) (x a) (y (tuple21 c d)))
  (= (mem (tuple2 a1 (tuple2 c1 d1))
  (Tuple2 a1 (tuple2 c1 d1) (t2tb2 x) (t2tb693 y))
  (times (tuple2 c1 d1) a1 (t2tb1 s) (t2tb689 t)))
  (and (mem1 x s) (mem21 y t)))))

;; mem_times
  (assert
  (forall ((s (set a)) (t (set d)) (x a) (y d))
  (= (mem32 (tb2t904 (Tuple2 a1 d1 (t2tb2 x) (t2tb694 y)))
  (tb2t903 (times d1 a1 (t2tb1 s) (t2tb690 t))))
  (and (mem1 x s) (mem20 y t)))))

(declare-fun t2tb256 ((set (tuple21 a (tuple21 a c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (tuple21 a c))))) (sort
  (set1 (tuple2 a1 (tuple2 a1 c1))) (t2tb256 x))))

(declare-fun tb2t256 (uni) (set (tuple21 a (tuple21 a c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (tuple21 a c)))))
  (! (= (tb2t256 (t2tb256 i)) i) :pattern ((t2tb256 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (tuple2 a1 c1))) j)
     (= (t2tb256 (tb2t256 j)) j)) :pattern ((t2tb256 (tb2t256 j))) )))

(declare-fun t2tb257 ((tuple21 a (tuple21 a c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (tuple21 a c)))) (sort (tuple2 a1 (tuple2 a1 c1))
  (t2tb257 x))))

(declare-fun tb2t257 (uni) (tuple21 a (tuple21 a c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (tuple21 a c))))
  (! (= (tb2t257 (t2tb257 i)) i) :pattern ((t2tb257 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (tuple2 a1 c1)) j) (= (t2tb257 (tb2t257 j)) j)) :pattern (
  (t2tb257 (tb2t257 j))) )))

;; mem_times
  (assert
  (forall ((s (set a)) (t (set (tuple21 a c))) (x a) (y (tuple21 a c)))
  (= (mem (tuple2 a1 (tuple2 a1 c1))
  (Tuple2 a1 (tuple2 a1 c1) (t2tb2 x) (t2tb133 y))
  (times (tuple2 a1 c1) a1 (t2tb1 s) (t2tb129 t)))
  (and (mem1 x s) (mem10 y t)))))

(declare-fun t2tb1141 ((set (tuple21 a (set (tuple21 b c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (set (tuple21 b c)))))) (sort
  (set1 (tuple2 a1 (set1 (tuple2 b1 c1)))) (t2tb1141 x))))

(declare-fun tb2t1141 (uni) (set (tuple21 a (set (tuple21 b c)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (set (tuple21 b c))))))
  (! (= (tb2t1141 (t2tb1141 i)) i) :pattern ((t2tb1141 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (set1 (tuple2 b1 c1)))) j)
     (= (t2tb1141 (tb2t1141 j)) j)) :pattern ((t2tb1141 (tb2t1141 j))) )))

(declare-fun t2tb1142 ((tuple21 a (set (tuple21 b c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (set (tuple21 b c))))) (sort
  (tuple2 a1 (set1 (tuple2 b1 c1))) (t2tb1142 x))))

(declare-fun tb2t1142 (uni) (tuple21 a (set (tuple21 b c))))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (set (tuple21 b c)))))
  (! (= (tb2t1142 (t2tb1142 i)) i) :pattern ((t2tb1142 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (set1 (tuple2 b1 c1))) j)
     (= (t2tb1142 (tb2t1142 j)) j)) :pattern ((t2tb1142 (tb2t1142 j))) )))

;; mem_times
  (assert
  (forall ((s (set a)) (t (set (set (tuple21 b c)))) (x a) (y (set (tuple21 b
  c))))
  (= (mem (tuple2 a1 (set1 (tuple2 b1 c1)))
  (Tuple2 a1 (set1 (tuple2 b1 c1)) (t2tb2 x) (t2tb131 y))
  (times (set1 (tuple2 b1 c1)) a1 (t2tb1 s) (t2tb130 t)))
  (and (mem1 x s) (mem9 y t)))))

(declare-fun t2tb260 ((tuple21 a (tuple21 b c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (tuple21 b c)))) (sort (tuple2 a1 (tuple2 b1 c1))
  (t2tb260 x))))

(declare-fun tb2t260 (uni) (tuple21 a (tuple21 b c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (tuple21 b c))))
  (! (= (tb2t260 (t2tb260 i)) i) :pattern ((t2tb260 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (tuple2 b1 c1)) j) (= (t2tb260 (tb2t260 j)) j)) :pattern (
  (t2tb260 (tb2t260 j))) )))

(declare-fun t2tb261 ((set (tuple21 a (tuple21 b c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (tuple21 b c))))) (sort
  (set1 (tuple2 a1 (tuple2 b1 c1))) (t2tb261 x))))

(declare-fun tb2t261 (uni) (set (tuple21 a (tuple21 b c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (tuple21 b c)))))
  (! (= (tb2t261 (t2tb261 i)) i) :pattern ((t2tb261 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (tuple2 b1 c1))) j)
     (= (t2tb261 (tb2t261 j)) j)) :pattern ((t2tb261 (tb2t261 j))) )))

;; mem_times
  (assert
  (forall ((s (set a)) (t (set (tuple21 b c))) (x a) (y (tuple21 b c)))
  (= (mem (tuple2 a1 (tuple2 b1 c1))
  (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 y))
  (times (tuple2 b1 c1) a1 (t2tb1 s) (t2tb131 t)))
  (and (mem1 x s) (mem8 y t)))))

;; mem_times
  (assert
  (forall ((s (set a)) (t (set c)) (x a) (y c))
  (= (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y)))
  (tb2t129 (times c1 a1 (t2tb1 s) (t2tb132 t)))) (and (mem1 x s) (mem7 y t)))))

(declare-fun t2tb39 ((set (tuple21 a (set (tuple21 a b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (set (tuple21 a b)))))) (sort
  (set1 (tuple2 a1 (set1 (tuple2 a1 b1)))) (t2tb39 x))))

(declare-fun tb2t39 (uni) (set (tuple21 a (set (tuple21 a b)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (set (tuple21 a b))))))
  (! (= (tb2t39 (t2tb39 i)) i) :pattern ((t2tb39 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (set1 (tuple2 a1 b1)))) j)
     (= (t2tb39 (tb2t39 j)) j)) :pattern ((t2tb39 (tb2t39 j))) )))

(declare-fun t2tb40 ((tuple21 a (set (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (set (tuple21 a b))))) (sort
  (tuple2 a1 (set1 (tuple2 a1 b1))) (t2tb40 x))))

(declare-fun tb2t40 (uni) (tuple21 a (set (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (set (tuple21 a b)))))
  (! (= (tb2t40 (t2tb40 i)) i) :pattern ((t2tb40 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (set1 (tuple2 a1 b1))) j)
     (= (t2tb40 (tb2t40 j)) j)) :pattern ((t2tb40 (tb2t40 j))) )))

;; mem_times
  (assert
  (forall ((s (set a)) (t (set (set (tuple21 a b)))) (x a) (y (set (tuple21 a
  b))))
  (= (mem (tuple2 a1 (set1 (tuple2 a1 b1)))
  (Tuple2 a1 (set1 (tuple2 a1 b1)) (t2tb2 x) (t2tb11 y))
  (times (set1 (tuple2 a1 b1)) a1 (t2tb1 s) (t2tb10 t)))
  (and (mem1 x s) (mem4 y t)))))

(declare-fun t2tb41 ((set (tuple21 a (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (tuple21 a b))))) (sort
  (set1 (tuple2 a1 (tuple2 a1 b1))) (t2tb41 x))))

(declare-fun tb2t41 (uni) (set (tuple21 a (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (tuple21 a b)))))
  (! (= (tb2t41 (t2tb41 i)) i) :pattern ((t2tb41 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (tuple2 a1 b1))) j)
     (= (t2tb41 (tb2t41 j)) j)) :pattern ((t2tb41 (tb2t41 j))) )))

(declare-fun t2tb42 ((tuple21 a (tuple21 a b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (tuple21 a b)))) (sort (tuple2 a1 (tuple2 a1 b1))
  (t2tb42 x))))

(declare-fun tb2t42 (uni) (tuple21 a (tuple21 a b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (tuple21 a b))))
  (! (= (tb2t42 (t2tb42 i)) i) :pattern ((t2tb42 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (tuple2 a1 b1)) j) (= (t2tb42 (tb2t42 j)) j)) :pattern (
  (t2tb42 (tb2t42 j))) )))

;; mem_times
  (assert
  (forall ((s (set a)) (t (set (tuple21 a b))) (x a) (y (tuple21 a b)))
  (= (mem (tuple2 a1 (tuple2 a1 b1))
  (Tuple2 a1 (tuple2 a1 b1) (t2tb2 x) (t2tb13 y))
  (times (tuple2 a1 b1) a1 (t2tb1 s) (t2tb11 t)))
  (and (mem1 x s) (mem3 y t)))))

;; mem_times
  (assert
  (forall ((s (set a)) (t (set b)) (x a) (y b))
  (= (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y)))
  (tb2t11 (times b1 a1 (t2tb1 s) (t2tb12 t)))) (and (mem1 x s) (mem2 y t)))))

(declare-fun t2tb4 ((set (tuple21 a a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a a)))) (sort (set1 (tuple2 a1 a1)) (t2tb4 x))))

(declare-fun tb2t4 (uni) (set (tuple21 a a)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a a))))
  (! (= (tb2t4 (t2tb4 i)) i) :pattern ((t2tb4 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 a1)) j) (= (t2tb4 (tb2t4 j)) j)) :pattern (
  (t2tb4 (tb2t4 j))) )))

(declare-fun t2tb5 ((tuple21 a a)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 a a))) (sort (tuple2 a1 a1) (t2tb5 x))))

(declare-fun tb2t5 (uni) (tuple21 a a))

;; BridgeL
  (assert
  (forall ((i (tuple21 a a)))
  (! (= (tb2t5 (t2tb5 i)) i) :pattern ((t2tb5 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 a1) j) (= (t2tb5 (tb2t5 j)) j)) :pattern ((t2tb5
                                                                    (tb2t5 j))) )))

;; mem_times
  (assert
  (forall ((s (set a)) (t (set a)) (x a) (y a))
  (= (mem (tuple2 a1 a1) (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y))
  (times a1 a1 (t2tb1 s) (t2tb1 t))) (and (mem1 x s) (mem1 y t)))))

;; mem_times
  (assert
  (forall ((b2 ty))
  (forall ((s (set a)) (t uni) (x a) (y uni))
  (= (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) y)
  (times b2 a1 (t2tb1 s) t)) (and (mem1 x s) (mem b2 y t))))))

;; mem_times
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (x uni) (y uni))
  (= (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) (times b2 a2 s t))
  (and (mem a2 x s) (mem b2 y t))))))

(declare-fun t2tb1013 ((set (set (tuple21 a d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 a d))))) (sort (set1 (set1 (tuple2 a1 d1)))
  (t2tb1013 x))))

(declare-fun tb2t1013 (uni) (set (set (tuple21 a d))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 a d)))))
  (! (= (tb2t1013 (t2tb1013 i)) i) :pattern ((t2tb1013 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 a1 d1))) j) (= (t2tb1013 (tb2t1013 j)) j)) :pattern (
  (t2tb1013 (tb2t1013 j))) )))

;; mem_power
  (assert
  (forall ((s (set (tuple21 a d))) (t (set (tuple21 a d))))
  (= (mem (set1 (tuple2 a1 d1)) (t2tb903 s)
  (power (tuple2 a1 d1) (t2tb903 t)))
  (forall ((x (tuple21 a d))) (=> (mem32 x s) (mem32 x t))))))

(declare-fun t2tb906 ((set (set (tuple21 b d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 b d))))) (sort (set1 (set1 (tuple2 b1 d1)))
  (t2tb906 x))))

(declare-fun tb2t906 (uni) (set (set (tuple21 b d))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 b d)))))
  (! (= (tb2t906 (t2tb906 i)) i) :pattern ((t2tb906 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 b1 d1))) j) (= (t2tb906 (tb2t906 j)) j)) :pattern (
  (t2tb906 (tb2t906 j))) )))

;; mem_power
  (assert
  (forall ((s (set (tuple21 b d))) (t (set (tuple21 b d))))
  (= (mem (set1 (tuple2 b1 d1)) (t2tb687 s)
  (power (tuple2 b1 d1) (t2tb687 t)))
  (forall ((x (tuple21 b d))) (=> (mem23 x s) (mem23 x t))))))

(declare-fun t2tb907 ((set (set (set (tuple21 c d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (set (tuple21 c d)))))) (sort
  (set1 (set1 (set1 (tuple2 c1 d1)))) (t2tb907 x))))

(declare-fun tb2t907 (uni) (set (set (set (tuple21 c d)))))

;; BridgeL
  (assert
  (forall ((i (set (set (set (tuple21 c d))))))
  (! (= (tb2t907 (t2tb907 i)) i) :pattern ((t2tb907 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (set1 (tuple2 c1 d1)))) j)
     (= (t2tb907 (tb2t907 j)) j)) :pattern ((t2tb907 (tb2t907 j))) )))

;; mem_power
  (assert
  (forall ((s (set (set (tuple21 c d)))) (t (set (set (tuple21 c d)))))
  (= (mem (set1 (set1 (tuple2 c1 d1))) (t2tb688 s)
  (power (set1 (tuple2 c1 d1)) (t2tb688 t)))
  (forall ((x (set (tuple21 c d)))) (=> (mem22 x s) (mem22 x t))))))

;; mem_power
  (assert
  (forall ((s (set (tuple21 c d))) (t (set (tuple21 c d))))
  (= (mem22 s (tb2t688 (power (tuple2 c1 d1) (t2tb689 t))))
  (forall ((x (tuple21 c d))) (=> (mem21 x s) (mem21 x t))))))

(declare-fun t2tb908 ((set (set d))) uni)

;; t2tb_sort
  (assert (forall ((x (set (set d)))) (sort (set1 (set1 d1)) (t2tb908 x))))

(declare-fun tb2t908 (uni) (set (set d)))

;; BridgeL
  (assert
  (forall ((i (set (set d))))
  (! (= (tb2t908 (t2tb908 i)) i) :pattern ((t2tb908 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 d1)) j) (= (t2tb908 (tb2t908 j)) j)) :pattern (
  (t2tb908 (tb2t908 j))) )))

;; mem_power
  (assert
  (forall ((s (set d)) (t (set d)))
  (= (mem (set1 d1) (t2tb690 s) (power d1 (t2tb690 t)))
  (forall ((x d)) (=> (mem20 x s) (mem20 x t))))))

(declare-fun t2tb128 ((set (set (tuple21 a c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 a c))))) (sort (set1 (set1 (tuple2 a1 c1)))
  (t2tb128 x))))

(declare-fun tb2t128 (uni) (set (set (tuple21 a c))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 a c)))))
  (! (= (tb2t128 (t2tb128 i)) i) :pattern ((t2tb128 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 a1 c1))) j) (= (t2tb128 (tb2t128 j)) j)) :pattern (
  (t2tb128 (tb2t128 j))) )))

;; mem_power
  (assert
  (forall ((s (set (tuple21 a c))) (t (set (tuple21 a c))))
  (= (mem (set1 (tuple2 a1 c1)) (t2tb129 s)
  (power (tuple2 a1 c1) (t2tb129 t)))
  (forall ((x (tuple21 a c))) (=> (mem10 x s) (mem10 x t))))))

(declare-fun t2tb1088 ((set (set (set (tuple21 b c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (set (tuple21 b c)))))) (sort
  (set1 (set1 (set1 (tuple2 b1 c1)))) (t2tb1088 x))))

(declare-fun tb2t1088 (uni) (set (set (set (tuple21 b c)))))

;; BridgeL
  (assert
  (forall ((i (set (set (set (tuple21 b c))))))
  (! (= (tb2t1088 (t2tb1088 i)) i) :pattern ((t2tb1088 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (set1 (tuple2 b1 c1)))) j)
     (= (t2tb1088 (tb2t1088 j)) j)) :pattern ((t2tb1088 (tb2t1088 j))) )))

;; mem_power
  (assert
  (forall ((s (set (set (tuple21 b c)))) (t (set (set (tuple21 b c)))))
  (= (mem (set1 (set1 (tuple2 b1 c1))) (t2tb130 s)
  (power (set1 (tuple2 b1 c1)) (t2tb130 t)))
  (forall ((x (set (tuple21 b c)))) (=> (mem9 x s) (mem9 x t))))))

;; mem_power
  (assert
  (forall ((s (set (tuple21 b c))) (t (set (tuple21 b c))))
  (= (mem9 s (tb2t130 (power (tuple2 b1 c1) (t2tb131 t))))
  (forall ((x (tuple21 b c))) (=> (mem8 x s) (mem8 x t))))))

(declare-fun t2tb264 ((set (set c))) uni)

;; t2tb_sort
  (assert (forall ((x (set (set c)))) (sort (set1 (set1 c1)) (t2tb264 x))))

(declare-fun tb2t264 (uni) (set (set c)))

;; BridgeL
  (assert
  (forall ((i (set (set c))))
  (! (= (tb2t264 (t2tb264 i)) i) :pattern ((t2tb264 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 c1)) j) (= (t2tb264 (tb2t264 j)) j)) :pattern (
  (t2tb264 (tb2t264 j))) )))

;; mem_power
  (assert
  (forall ((s (set c)) (t (set c)))
  (= (mem (set1 c1) (t2tb132 s) (power c1 (t2tb132 t)))
  (forall ((x c)) (=> (mem7 x s) (mem7 x t))))))

(declare-fun t2tb43 ((set (set (set (tuple21 a b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (set (tuple21 a b)))))) (sort
  (set1 (set1 (set1 (tuple2 a1 b1)))) (t2tb43 x))))

(declare-fun tb2t43 (uni) (set (set (set (tuple21 a b)))))

;; BridgeL
  (assert
  (forall ((i (set (set (set (tuple21 a b))))))
  (! (= (tb2t43 (t2tb43 i)) i) :pattern ((t2tb43 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (set1 (tuple2 a1 b1)))) j)
     (= (t2tb43 (tb2t43 j)) j)) :pattern ((t2tb43 (tb2t43 j))) )))

;; mem_power
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set (set (tuple21 a b)))))
  (= (mem (set1 (set1 (tuple2 a1 b1))) (t2tb10 s)
  (power (set1 (tuple2 a1 b1)) (t2tb10 t)))
  (forall ((x (set (tuple21 a b)))) (=> (mem4 x s) (mem4 x t))))))

;; mem_power
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (tuple21 a b))))
  (= (mem4 s (tb2t10 (power (tuple2 a1 b1) (t2tb11 t))))
  (forall ((x (tuple21 a b))) (=> (mem3 x s) (mem3 x t))))))

(declare-fun t2tb44 ((set (set b))) uni)

;; t2tb_sort
  (assert (forall ((x (set (set b)))) (sort (set1 (set1 b1)) (t2tb44 x))))

(declare-fun tb2t44 (uni) (set (set b)))

;; BridgeL
  (assert
  (forall ((i (set (set b))))
  (! (= (tb2t44 (t2tb44 i)) i) :pattern ((t2tb44 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 b1)) j) (= (t2tb44 (tb2t44 j)) j)) :pattern (
  (t2tb44 (tb2t44 j))) )))

;; mem_power
  (assert
  (forall ((s (set b)) (t (set b)))
  (= (mem (set1 b1) (t2tb12 s) (power b1 (t2tb12 t)))
  (forall ((x b)) (=> (mem2 x s) (mem2 x t))))))

(declare-fun t2tb ((set (set a))) uni)

;; t2tb_sort
  (assert (forall ((x (set (set a)))) (sort (set1 (set1 a1)) (t2tb x))))

(declare-fun tb2t (uni) (set (set a)))

;; BridgeL
  (assert
  (forall ((i (set (set a)))) (! (= (tb2t (t2tb i)) i) :pattern ((t2tb i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 a1)) j) (= (t2tb (tb2t j)) j)) :pattern ((t2tb
                                                                    (tb2t j))) )))

;; mem_power
  (assert
  (forall ((s (set a)) (t (set a)))
  (= (mem (set1 a1) (t2tb1 s) (power a1 (t2tb1 t)))
  (forall ((x a)) (=> (mem1 x s) (mem1 x t))))))

;; mem_power
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t uni))
  (and
  (=> (mem (set1 a2) s (power a2 t))
  (forall ((x uni)) (=> (mem a2 x s) (mem a2 x t))))
  (=> (forall ((x uni)) (=> (sort a2 x) (=> (mem a2 x s) (mem a2 x t)))) (mem
  (set1 a2) s (power a2 t)))))))

;; mem_non_empty_power
  (assert
  (forall ((s (set (tuple21 a d))) (t (set (tuple21 a d))))
  (= (mem (set1 (tuple2 a1 d1)) (t2tb903 s)
  (non_empty_power (tuple2 a1 d1) (t2tb903 t)))
  (and (forall ((x (tuple21 a d))) (=> (mem32 x s) (mem32 x t)))
  (not (infix_eqeq24 s (tb2t903 (empty (tuple2 a1 d1)))))))))

;; mem_non_empty_power
  (assert
  (forall ((s (set (tuple21 b d))) (t (set (tuple21 b d))))
  (= (mem (set1 (tuple2 b1 d1)) (t2tb687 s)
  (non_empty_power (tuple2 b1 d1) (t2tb687 t)))
  (and (forall ((x (tuple21 b d))) (=> (mem23 x s) (mem23 x t)))
  (not (infix_eqeq22 s (tb2t687 (empty (tuple2 b1 d1)))))))))

;; mem_non_empty_power
  (assert
  (forall ((s (set (set (tuple21 c d)))) (t (set (set (tuple21 c d)))))
  (= (mem (set1 (set1 (tuple2 c1 d1))) (t2tb688 s)
  (non_empty_power (set1 (tuple2 c1 d1)) (t2tb688 t)))
  (and (forall ((x (set (tuple21 c d)))) (=> (mem22 x s) (mem22 x t)))
  (not (infix_eqeq16 s (tb2t688 (empty (set1 (tuple2 c1 d1))))))))))

;; mem_non_empty_power
  (assert
  (forall ((s (set (tuple21 c d))) (t (set (tuple21 c d))))
  (= (mem22 s (tb2t688 (non_empty_power (tuple2 c1 d1) (t2tb689 t))))
  (and (forall ((x (tuple21 c d))) (=> (mem21 x s) (mem21 x t)))
  (not (infix_eqeq14 s (tb2t689 (empty (tuple2 c1 d1)))))))))

;; mem_non_empty_power
  (assert
  (forall ((s (set d)) (t (set d)))
  (= (mem (set1 d1) (t2tb690 s) (non_empty_power d1 (t2tb690 t)))
  (and (forall ((x d)) (=> (mem20 x s) (mem20 x t)))
  (not (infix_eqeq13 s (tb2t690 (empty d1))))))))

;; mem_non_empty_power
  (assert
  (forall ((s (set (tuple21 a c))) (t (set (tuple21 a c))))
  (= (mem (set1 (tuple2 a1 c1)) (t2tb129 s)
  (non_empty_power (tuple2 a1 c1) (t2tb129 t)))
  (and (forall ((x (tuple21 a c))) (=> (mem10 x s) (mem10 x t)))
  (not (infix_eqeq9 s (tb2t129 (empty (tuple2 a1 c1)))))))))

;; mem_non_empty_power
  (assert
  (forall ((s (set (set (tuple21 b c)))) (t (set (set (tuple21 b c)))))
  (= (mem (set1 (set1 (tuple2 b1 c1))) (t2tb130 s)
  (non_empty_power (set1 (tuple2 b1 c1)) (t2tb130 t)))
  (and (forall ((x (set (tuple21 b c)))) (=> (mem9 x s) (mem9 x t)))
  (not (infix_eqeq10 s (tb2t130 (empty (set1 (tuple2 b1 c1))))))))))

;; mem_non_empty_power
  (assert
  (forall ((s (set (tuple21 b c))) (t (set (tuple21 b c))))
  (= (mem9 s (tb2t130 (non_empty_power (tuple2 b1 c1) (t2tb131 t))))
  (and (forall ((x (tuple21 b c))) (=> (mem8 x s) (mem8 x t)))
  (not (infix_eqeq8 s (tb2t131 (empty (tuple2 b1 c1)))))))))

;; mem_non_empty_power
  (assert
  (forall ((s (set c)) (t (set c)))
  (= (mem (set1 c1) (t2tb132 s) (non_empty_power c1 (t2tb132 t)))
  (and (forall ((x c)) (=> (mem7 x s) (mem7 x t)))
  (not (infix_eqeq7 s (tb2t132 (empty c1))))))))

;; mem_non_empty_power
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set (set (tuple21 a b)))))
  (= (mem (set1 (set1 (tuple2 a1 b1))) (t2tb10 s)
  (non_empty_power (set1 (tuple2 a1 b1)) (t2tb10 t)))
  (and (forall ((x (set (tuple21 a b)))) (=> (mem4 x s) (mem4 x t)))
  (not (infix_eqeq5 s (tb2t10 (empty (set1 (tuple2 a1 b1))))))))))

;; mem_non_empty_power
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (tuple21 a b))))
  (= (mem4 s (tb2t10 (non_empty_power (tuple2 a1 b1) (t2tb11 t))))
  (and (forall ((x (tuple21 a b))) (=> (mem3 x s) (mem3 x t)))
  (not (infix_eqeq4 s (tb2t11 (empty (tuple2 a1 b1)))))))))

;; mem_non_empty_power
  (assert
  (forall ((s (set b)) (t (set b)))
  (= (mem (set1 b1) (t2tb12 s) (non_empty_power b1 (t2tb12 t)))
  (and (forall ((x b)) (=> (mem2 x s) (mem2 x t)))
  (not (infix_eqeq3 s (tb2t12 (empty b1))))))))

;; mem_non_empty_power
  (assert
  (forall ((s (set a)) (t (set a)))
  (= (mem (set1 a1) (t2tb1 s) (non_empty_power a1 (t2tb1 t)))
  (and (forall ((x a)) (=> (mem1 x s) (mem1 x t)))
  (not (infix_eqeq1 s (tb2t1 (empty a1))))))))

;; mem_non_empty_power
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t uni))
  (and
  (=> (mem (set1 a2) s (non_empty_power a2 t))
  (and (forall ((x uni)) (=> (mem a2 x s) (mem a2 x t)))
  (not (infix_eqeq a2 s (empty a2)))))
  (=>
  (and (forall ((x uni)) (=> (sort a2 x) (=> (mem a2 x s) (mem a2 x t))))
  (not (infix_eqeq a2 s (empty a2)))) (mem (set1 a2) s
  (non_empty_power a2 t)))))))

(declare-fun choose (ty uni) uni)

;; choose_sort
  (assert (forall ((a2 ty)) (forall ((x uni)) (sort a2 (choose a2 x)))))

(declare-fun relation (ty ty uni uni) uni)

;; relation_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (set1 (tuple2 a2 b2)))
  (relation b2 a2 x x1)))))

(declare-fun relation1 ((set a) (set b)) (set (set (tuple21 a b))))

(declare-fun relation4 ((set b) (set c)) (set (set (tuple21 b c))))

(declare-fun relation7 ((set c) (set d)) (set (set (tuple21 c d))))

;; mem_relation
  (assert
  (forall ((a2 ty))
  (forall ((u uni) (v (set (tuple21 a d))) (r uni))
  (and
  (=> (mem (set1 (tuple2 a2 (tuple2 a1 d1))) r
  (relation (tuple2 a1 d1) a2 u (t2tb903 v)))
  (forall ((x uni) (y (tuple21 a d)))
  (=> (mem (tuple2 a2 (tuple2 a1 d1))
  (Tuple2 a2 (tuple2 a1 d1) x (t2tb904 y)) r) (and (mem a2 x u) (mem32 y v)))))
  (=>
  (forall ((x uni) (y (tuple21 a d)))
  (=> (sort a2 x)
  (=> (mem (tuple2 a2 (tuple2 a1 d1))
  (Tuple2 a2 (tuple2 a1 d1) x (t2tb904 y)) r) (and (mem a2 x u) (mem32 y v)))))
  (mem (set1 (tuple2 a2 (tuple2 a1 d1))) r
  (relation (tuple2 a1 d1) a2 u (t2tb903 v))))))))

;; mem_relation
  (assert
  (forall ((a2 ty))
  (forall ((u uni) (v (set (tuple21 b d))) (r uni))
  (and
  (=> (mem (set1 (tuple2 a2 (tuple2 b1 d1))) r
  (relation (tuple2 b1 d1) a2 u (t2tb687 v)))
  (forall ((x uni) (y (tuple21 b d)))
  (=> (mem (tuple2 a2 (tuple2 b1 d1))
  (Tuple2 a2 (tuple2 b1 d1) x (t2tb692 y)) r) (and (mem a2 x u) (mem23 y v)))))
  (=>
  (forall ((x uni) (y (tuple21 b d)))
  (=> (sort a2 x)
  (=> (mem (tuple2 a2 (tuple2 b1 d1))
  (Tuple2 a2 (tuple2 b1 d1) x (t2tb692 y)) r) (and (mem a2 x u) (mem23 y v)))))
  (mem (set1 (tuple2 a2 (tuple2 b1 d1))) r
  (relation (tuple2 b1 d1) a2 u (t2tb687 v))))))))

;; mem_relation
  (assert
  (forall ((a2 ty))
  (forall ((u uni) (v (set (set (tuple21 c d)))) (r uni))
  (and
  (=> (mem (set1 (tuple2 a2 (set1 (tuple2 c1 d1)))) r
  (relation (set1 (tuple2 c1 d1)) a2 u (t2tb688 v)))
  (forall ((x uni) (y (set (tuple21 c d))))
  (=> (mem (tuple2 a2 (set1 (tuple2 c1 d1)))
  (Tuple2 a2 (set1 (tuple2 c1 d1)) x (t2tb689 y)) r)
  (and (mem a2 x u) (mem22 y v)))))
  (=>
  (forall ((x uni) (y (set (tuple21 c d))))
  (=> (sort a2 x)
  (=> (mem (tuple2 a2 (set1 (tuple2 c1 d1)))
  (Tuple2 a2 (set1 (tuple2 c1 d1)) x (t2tb689 y)) r)
  (and (mem a2 x u) (mem22 y v))))) (mem
  (set1 (tuple2 a2 (set1 (tuple2 c1 d1)))) r
  (relation (set1 (tuple2 c1 d1)) a2 u (t2tb688 v))))))))

;; mem_relation
  (assert
  (forall ((a2 ty))
  (forall ((u uni) (v (set (tuple21 c d))) (r uni))
  (and
  (=> (mem (set1 (tuple2 a2 (tuple2 c1 d1))) r
  (relation (tuple2 c1 d1) a2 u (t2tb689 v)))
  (forall ((x uni) (y (tuple21 c d)))
  (=> (mem (tuple2 a2 (tuple2 c1 d1))
  (Tuple2 a2 (tuple2 c1 d1) x (t2tb693 y)) r) (and (mem a2 x u) (mem21 y v)))))
  (=>
  (forall ((x uni) (y (tuple21 c d)))
  (=> (sort a2 x)
  (=> (mem (tuple2 a2 (tuple2 c1 d1))
  (Tuple2 a2 (tuple2 c1 d1) x (t2tb693 y)) r) (and (mem a2 x u) (mem21 y v)))))
  (mem (set1 (tuple2 a2 (tuple2 c1 d1))) r
  (relation (tuple2 c1 d1) a2 u (t2tb689 v))))))))

;; mem_relation
  (assert
  (forall ((a2 ty))
  (forall ((u uni) (v (set d)) (r uni))
  (and
  (=> (mem (set1 (tuple2 a2 d1)) r (relation d1 a2 u (t2tb690 v)))
  (forall ((x uni) (y d))
  (=> (mem (tuple2 a2 d1) (Tuple2 a2 d1 x (t2tb694 y)) r)
  (and (mem a2 x u) (mem20 y v)))))
  (=>
  (forall ((x uni) (y d))
  (=> (sort a2 x)
  (=> (mem (tuple2 a2 d1) (Tuple2 a2 d1 x (t2tb694 y)) r)
  (and (mem a2 x u) (mem20 y v))))) (mem (set1 (tuple2 a2 d1)) r
  (relation d1 a2 u (t2tb690 v))))))))

;; mem_relation
  (assert
  (forall ((a2 ty))
  (forall ((u uni) (v (set (tuple21 a c))) (r uni))
  (and
  (=> (mem (set1 (tuple2 a2 (tuple2 a1 c1))) r
  (relation (tuple2 a1 c1) a2 u (t2tb129 v)))
  (forall ((x uni) (y (tuple21 a c)))
  (=> (mem (tuple2 a2 (tuple2 a1 c1))
  (Tuple2 a2 (tuple2 a1 c1) x (t2tb133 y)) r) (and (mem a2 x u) (mem10 y v)))))
  (=>
  (forall ((x uni) (y (tuple21 a c)))
  (=> (sort a2 x)
  (=> (mem (tuple2 a2 (tuple2 a1 c1))
  (Tuple2 a2 (tuple2 a1 c1) x (t2tb133 y)) r) (and (mem a2 x u) (mem10 y v)))))
  (mem (set1 (tuple2 a2 (tuple2 a1 c1))) r
  (relation (tuple2 a1 c1) a2 u (t2tb129 v))))))))

;; mem_relation
  (assert
  (forall ((a2 ty))
  (forall ((u uni) (v (set (set (tuple21 b c)))) (r uni))
  (and
  (=> (mem (set1 (tuple2 a2 (set1 (tuple2 b1 c1)))) r
  (relation (set1 (tuple2 b1 c1)) a2 u (t2tb130 v)))
  (forall ((x uni) (y (set (tuple21 b c))))
  (=> (mem (tuple2 a2 (set1 (tuple2 b1 c1)))
  (Tuple2 a2 (set1 (tuple2 b1 c1)) x (t2tb131 y)) r)
  (and (mem a2 x u) (mem9 y v)))))
  (=>
  (forall ((x uni) (y (set (tuple21 b c))))
  (=> (sort a2 x)
  (=> (mem (tuple2 a2 (set1 (tuple2 b1 c1)))
  (Tuple2 a2 (set1 (tuple2 b1 c1)) x (t2tb131 y)) r)
  (and (mem a2 x u) (mem9 y v))))) (mem
  (set1 (tuple2 a2 (set1 (tuple2 b1 c1)))) r
  (relation (set1 (tuple2 b1 c1)) a2 u (t2tb130 v))))))))

;; mem_relation
  (assert
  (forall ((a2 ty))
  (forall ((u uni) (v (set (tuple21 b c))) (r uni))
  (and
  (=> (mem (set1 (tuple2 a2 (tuple2 b1 c1))) r
  (relation (tuple2 b1 c1) a2 u (t2tb131 v)))
  (forall ((x uni) (y (tuple21 b c)))
  (=> (mem (tuple2 a2 (tuple2 b1 c1))
  (Tuple2 a2 (tuple2 b1 c1) x (t2tb134 y)) r) (and (mem a2 x u) (mem8 y v)))))
  (=>
  (forall ((x uni) (y (tuple21 b c)))
  (=> (sort a2 x)
  (=> (mem (tuple2 a2 (tuple2 b1 c1))
  (Tuple2 a2 (tuple2 b1 c1) x (t2tb134 y)) r) (and (mem a2 x u) (mem8 y v)))))
  (mem (set1 (tuple2 a2 (tuple2 b1 c1))) r
  (relation (tuple2 b1 c1) a2 u (t2tb131 v))))))))

;; mem_relation
  (assert
  (forall ((a2 ty))
  (forall ((u uni) (v (set c)) (r uni))
  (and
  (=> (mem (set1 (tuple2 a2 c1)) r (relation c1 a2 u (t2tb132 v)))
  (forall ((x uni) (y c))
  (=> (mem (tuple2 a2 c1) (Tuple2 a2 c1 x (t2tb135 y)) r)
  (and (mem a2 x u) (mem7 y v)))))
  (=>
  (forall ((x uni) (y c))
  (=> (sort a2 x)
  (=> (mem (tuple2 a2 c1) (Tuple2 a2 c1 x (t2tb135 y)) r)
  (and (mem a2 x u) (mem7 y v))))) (mem (set1 (tuple2 a2 c1)) r
  (relation c1 a2 u (t2tb132 v))))))))

;; mem_relation
  (assert
  (forall ((a2 ty))
  (forall ((u uni) (v (set (set (tuple21 a b)))) (r uni))
  (and
  (=> (mem (set1 (tuple2 a2 (set1 (tuple2 a1 b1)))) r
  (relation (set1 (tuple2 a1 b1)) a2 u (t2tb10 v)))
  (forall ((x uni) (y (set (tuple21 a b))))
  (=> (mem (tuple2 a2 (set1 (tuple2 a1 b1)))
  (Tuple2 a2 (set1 (tuple2 a1 b1)) x (t2tb11 y)) r)
  (and (mem a2 x u) (mem4 y v)))))
  (=>
  (forall ((x uni) (y (set (tuple21 a b))))
  (=> (sort a2 x)
  (=> (mem (tuple2 a2 (set1 (tuple2 a1 b1)))
  (Tuple2 a2 (set1 (tuple2 a1 b1)) x (t2tb11 y)) r)
  (and (mem a2 x u) (mem4 y v))))) (mem
  (set1 (tuple2 a2 (set1 (tuple2 a1 b1)))) r
  (relation (set1 (tuple2 a1 b1)) a2 u (t2tb10 v))))))))

;; mem_relation
  (assert
  (forall ((a2 ty))
  (forall ((u uni) (v (set (tuple21 a b))) (r uni))
  (and
  (=> (mem (set1 (tuple2 a2 (tuple2 a1 b1))) r
  (relation (tuple2 a1 b1) a2 u (t2tb11 v)))
  (forall ((x uni) (y (tuple21 a b)))
  (=> (mem (tuple2 a2 (tuple2 a1 b1)) (Tuple2 a2 (tuple2 a1 b1) x (t2tb13 y))
  r) (and (mem a2 x u) (mem3 y v)))))
  (=>
  (forall ((x uni) (y (tuple21 a b)))
  (=> (sort a2 x)
  (=> (mem (tuple2 a2 (tuple2 a1 b1)) (Tuple2 a2 (tuple2 a1 b1) x (t2tb13 y))
  r) (and (mem a2 x u) (mem3 y v))))) (mem (set1 (tuple2 a2 (tuple2 a1 b1)))
  r (relation (tuple2 a1 b1) a2 u (t2tb11 v))))))))

;; mem_relation
  (assert
  (forall ((a2 ty))
  (forall ((u uni) (v (set b)) (r uni))
  (and
  (=> (mem (set1 (tuple2 a2 b1)) r (relation b1 a2 u (t2tb12 v)))
  (forall ((x uni) (y b))
  (=> (mem (tuple2 a2 b1) (Tuple2 a2 b1 x (t2tb14 y)) r)
  (and (mem a2 x u) (mem2 y v)))))
  (=>
  (forall ((x uni) (y b))
  (=> (sort a2 x)
  (=> (mem (tuple2 a2 b1) (Tuple2 a2 b1 x (t2tb14 y)) r)
  (and (mem a2 x u) (mem2 y v))))) (mem (set1 (tuple2 a2 b1)) r
  (relation b1 a2 u (t2tb12 v))))))))

;; mem_relation
  (assert
  (forall ((a2 ty))
  (forall ((u uni) (v (set a)) (r uni))
  (and
  (=> (mem (set1 (tuple2 a2 a1)) r (relation a1 a2 u (t2tb1 v)))
  (forall ((x uni) (y a))
  (=> (mem (tuple2 a2 a1) (Tuple2 a2 a1 x (t2tb2 y)) r)
  (and (mem a2 x u) (mem1 y v)))))
  (=>
  (forall ((x uni) (y a))
  (=> (sort a2 x)
  (=> (mem (tuple2 a2 a1) (Tuple2 a2 a1 x (t2tb2 y)) r)
  (and (mem a2 x u) (mem1 y v))))) (mem (set1 (tuple2 a2 a1)) r
  (relation a1 a2 u (t2tb1 v))))))))

(declare-fun t2tb2278 ((set (set (tuple21 (tuple21 a d) (tuple21 a
  d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a d) (tuple21 a d)))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 d1) (tuple2 a1 d1)))) (t2tb2278 x))))

(declare-fun tb2t2278 (uni) (set (set (tuple21 (tuple21 a d) (tuple21 a
  d)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a d) (tuple21 a d))))))
  (! (= (tb2t2278 (t2tb2278 i)) i) :pattern ((t2tb2278 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 d1) (tuple2 a1 d1)))) j)
     (= (t2tb2278 (tb2t2278 j)) j)) :pattern ((t2tb2278 (tb2t2278 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a d))) (v (set (tuple21 a d)))
  (r (set (tuple21 (tuple21 a d) (tuple21 a d)))))
  (= (mem (set1 (tuple2 (tuple2 a1 d1) (tuple2 a1 d1))) (t2tb2196 r)
  (relation (tuple2 a1 d1) (tuple2 a1 d1) (t2tb903 u) (t2tb903 v)))
  (forall ((x (tuple21 a d)) (y (tuple21 a d)))
  (=> (mem (tuple2 (tuple2 a1 d1) (tuple2 a1 d1))
  (Tuple2 (tuple2 a1 d1) (tuple2 a1 d1) (t2tb904 x) (t2tb904 y))
  (t2tb2196 r)) (and (mem32 x u) (mem32 y v)))))))

(declare-fun t2tb2279 ((set (set (tuple21 (tuple21 a d) (tuple21 b
  d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a d) (tuple21 b d)))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 d1) (tuple2 b1 d1)))) (t2tb2279 x))))

(declare-fun tb2t2279 (uni) (set (set (tuple21 (tuple21 a d) (tuple21 b
  d)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a d) (tuple21 b d))))))
  (! (= (tb2t2279 (t2tb2279 i)) i) :pattern ((t2tb2279 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 d1) (tuple2 b1 d1)))) j)
     (= (t2tb2279 (tb2t2279 j)) j)) :pattern ((t2tb2279 (tb2t2279 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a d))) (v (set (tuple21 b d)))
  (r (set (tuple21 (tuple21 a d) (tuple21 b d)))))
  (= (mem (set1 (tuple2 (tuple2 a1 d1) (tuple2 b1 d1))) (t2tb2198 r)
  (relation (tuple2 b1 d1) (tuple2 a1 d1) (t2tb903 u) (t2tb687 v)))
  (forall ((x (tuple21 a d)) (y (tuple21 b d)))
  (=> (mem (tuple2 (tuple2 a1 d1) (tuple2 b1 d1))
  (Tuple2 (tuple2 a1 d1) (tuple2 b1 d1) (t2tb904 x) (t2tb692 y))
  (t2tb2198 r)) (and (mem32 x u) (mem23 y v)))))))

(declare-fun t2tb2280 ((set (set (tuple21 (tuple21 a d) (set (tuple21 c
  d)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a d) (set (tuple21 c d))))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 d1) (set1 (tuple2 c1 d1))))) (t2tb2280 x))))

(declare-fun tb2t2280 (uni) (set (set (tuple21 (tuple21 a d) (set (tuple21 c
  d))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a d) (set (tuple21 c d)))))))
  (! (= (tb2t2280 (t2tb2280 i)) i) :pattern ((t2tb2280 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 d1) (set1 (tuple2 c1 d1))))) j)
     (= (t2tb2280 (tb2t2280 j)) j)) :pattern ((t2tb2280 (tb2t2280 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a d))) (v (set (set (tuple21 c d))))
  (r (set (tuple21 (tuple21 a d) (set (tuple21 c d))))))
  (= (mem (set1 (tuple2 (tuple2 a1 d1) (set1 (tuple2 c1 d1)))) (t2tb2200 r)
  (relation (set1 (tuple2 c1 d1)) (tuple2 a1 d1) (t2tb903 u) (t2tb688 v)))
  (forall ((x (tuple21 a d)) (y (set (tuple21 c d))))
  (=> (mem (tuple2 (tuple2 a1 d1) (set1 (tuple2 c1 d1)))
  (Tuple2 (tuple2 a1 d1) (set1 (tuple2 c1 d1)) (t2tb904 x) (t2tb689 y))
  (t2tb2200 r)) (and (mem32 x u) (mem22 y v)))))))

(declare-fun t2tb2281 ((set (set (tuple21 (tuple21 a d) (tuple21 c
  d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a d) (tuple21 c d)))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 d1) (tuple2 c1 d1)))) (t2tb2281 x))))

(declare-fun tb2t2281 (uni) (set (set (tuple21 (tuple21 a d) (tuple21 c
  d)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a d) (tuple21 c d))))))
  (! (= (tb2t2281 (t2tb2281 i)) i) :pattern ((t2tb2281 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 d1) (tuple2 c1 d1)))) j)
     (= (t2tb2281 (tb2t2281 j)) j)) :pattern ((t2tb2281 (tb2t2281 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a d))) (v (set (tuple21 c d)))
  (r (set (tuple21 (tuple21 a d) (tuple21 c d)))))
  (= (mem (set1 (tuple2 (tuple2 a1 d1) (tuple2 c1 d1))) (t2tb2202 r)
  (relation (tuple2 c1 d1) (tuple2 a1 d1) (t2tb903 u) (t2tb689 v)))
  (forall ((x (tuple21 a d)) (y (tuple21 c d)))
  (=> (mem (tuple2 (tuple2 a1 d1) (tuple2 c1 d1))
  (Tuple2 (tuple2 a1 d1) (tuple2 c1 d1) (t2tb904 x) (t2tb693 y))
  (t2tb2202 r)) (and (mem32 x u) (mem21 y v)))))))

(declare-fun t2tb2282 ((set (set (tuple21 (tuple21 a d) d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a d) d))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 d1) d1))) (t2tb2282 x))))

(declare-fun tb2t2282 (uni) (set (set (tuple21 (tuple21 a d) d))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a d) d)))))
  (! (= (tb2t2282 (t2tb2282 i)) i) :pattern ((t2tb2282 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 d1) d1))) j)
     (= (t2tb2282 (tb2t2282 j)) j)) :pattern ((t2tb2282 (tb2t2282 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a d))) (v (set d)) (r (set (tuple21 (tuple21 a d)
  d))))
  (= (mem (set1 (tuple2 (tuple2 a1 d1) d1)) (t2tb2204 r)
  (relation d1 (tuple2 a1 d1) (t2tb903 u) (t2tb690 v)))
  (forall ((x (tuple21 a d)) (y d))
  (=> (mem (tuple2 (tuple2 a1 d1) d1)
  (Tuple2 (tuple2 a1 d1) d1 (t2tb904 x) (t2tb694 y)) (t2tb2204 r))
  (and (mem32 x u) (mem20 y v)))))))

(declare-fun t2tb2283 ((set (set (tuple21 (tuple21 a d) (tuple21 a
  c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a d) (tuple21 a c)))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 d1) (tuple2 a1 c1)))) (t2tb2283 x))))

(declare-fun tb2t2283 (uni) (set (set (tuple21 (tuple21 a d) (tuple21 a
  c)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a d) (tuple21 a c))))))
  (! (= (tb2t2283 (t2tb2283 i)) i) :pattern ((t2tb2283 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 d1) (tuple2 a1 c1)))) j)
     (= (t2tb2283 (tb2t2283 j)) j)) :pattern ((t2tb2283 (tb2t2283 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a d))) (v (set (tuple21 a c)))
  (r (set (tuple21 (tuple21 a d) (tuple21 a c)))))
  (= (mem (set1 (tuple2 (tuple2 a1 d1) (tuple2 a1 c1))) (t2tb2206 r)
  (relation (tuple2 a1 c1) (tuple2 a1 d1) (t2tb903 u) (t2tb129 v)))
  (forall ((x (tuple21 a d)) (y (tuple21 a c)))
  (=> (mem (tuple2 (tuple2 a1 d1) (tuple2 a1 c1))
  (Tuple2 (tuple2 a1 d1) (tuple2 a1 c1) (t2tb904 x) (t2tb133 y))
  (t2tb2206 r)) (and (mem32 x u) (mem10 y v)))))))

(declare-fun t2tb2284 ((set (set (tuple21 (tuple21 a d) (set (tuple21 b
  c)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a d) (set (tuple21 b c))))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 d1) (set1 (tuple2 b1 c1))))) (t2tb2284 x))))

(declare-fun tb2t2284 (uni) (set (set (tuple21 (tuple21 a d) (set (tuple21 b
  c))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a d) (set (tuple21 b c)))))))
  (! (= (tb2t2284 (t2tb2284 i)) i) :pattern ((t2tb2284 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 d1) (set1 (tuple2 b1 c1))))) j)
     (= (t2tb2284 (tb2t2284 j)) j)) :pattern ((t2tb2284 (tb2t2284 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a d))) (v (set (set (tuple21 b c))))
  (r (set (tuple21 (tuple21 a d) (set (tuple21 b c))))))
  (= (mem (set1 (tuple2 (tuple2 a1 d1) (set1 (tuple2 b1 c1)))) (t2tb2209 r)
  (relation (set1 (tuple2 b1 c1)) (tuple2 a1 d1) (t2tb903 u) (t2tb130 v)))
  (forall ((x (tuple21 a d)) (y (set (tuple21 b c))))
  (=> (mem (tuple2 (tuple2 a1 d1) (set1 (tuple2 b1 c1)))
  (Tuple2 (tuple2 a1 d1) (set1 (tuple2 b1 c1)) (t2tb904 x) (t2tb131 y))
  (t2tb2209 r)) (and (mem32 x u) (mem9 y v)))))))

(declare-fun t2tb2285 ((set (set (tuple21 (tuple21 a d) (tuple21 b
  c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a d) (tuple21 b c)))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 d1) (tuple2 b1 c1)))) (t2tb2285 x))))

(declare-fun tb2t2285 (uni) (set (set (tuple21 (tuple21 a d) (tuple21 b
  c)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a d) (tuple21 b c))))))
  (! (= (tb2t2285 (t2tb2285 i)) i) :pattern ((t2tb2285 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 d1) (tuple2 b1 c1)))) j)
     (= (t2tb2285 (tb2t2285 j)) j)) :pattern ((t2tb2285 (tb2t2285 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a d))) (v (set (tuple21 b c)))
  (r (set (tuple21 (tuple21 a d) (tuple21 b c)))))
  (= (mem (set1 (tuple2 (tuple2 a1 d1) (tuple2 b1 c1))) (t2tb2210 r)
  (relation (tuple2 b1 c1) (tuple2 a1 d1) (t2tb903 u) (t2tb131 v)))
  (forall ((x (tuple21 a d)) (y (tuple21 b c)))
  (=> (mem (tuple2 (tuple2 a1 d1) (tuple2 b1 c1))
  (Tuple2 (tuple2 a1 d1) (tuple2 b1 c1) (t2tb904 x) (t2tb134 y))
  (t2tb2210 r)) (and (mem32 x u) (mem8 y v)))))))

(declare-fun t2tb2286 ((set (set (tuple21 (tuple21 a d) c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a d) c))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 d1) c1))) (t2tb2286 x))))

(declare-fun tb2t2286 (uni) (set (set (tuple21 (tuple21 a d) c))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a d) c)))))
  (! (= (tb2t2286 (t2tb2286 i)) i) :pattern ((t2tb2286 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 d1) c1))) j)
     (= (t2tb2286 (tb2t2286 j)) j)) :pattern ((t2tb2286 (tb2t2286 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a d))) (v (set c)) (r (set (tuple21 (tuple21 a d)
  c))))
  (= (mem (set1 (tuple2 (tuple2 a1 d1) c1)) (t2tb2212 r)
  (relation c1 (tuple2 a1 d1) (t2tb903 u) (t2tb132 v)))
  (forall ((x (tuple21 a d)) (y c))
  (=> (mem (tuple2 (tuple2 a1 d1) c1)
  (Tuple2 (tuple2 a1 d1) c1 (t2tb904 x) (t2tb135 y)) (t2tb2212 r))
  (and (mem32 x u) (mem7 y v)))))))

(declare-fun t2tb2287 ((set (set (tuple21 (tuple21 a d) (set (tuple21 a
  b)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a d) (set (tuple21 a b))))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 d1) (set1 (tuple2 a1 b1))))) (t2tb2287 x))))

(declare-fun tb2t2287 (uni) (set (set (tuple21 (tuple21 a d) (set (tuple21 a
  b))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a d) (set (tuple21 a b)))))))
  (! (= (tb2t2287 (t2tb2287 i)) i) :pattern ((t2tb2287 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 d1) (set1 (tuple2 a1 b1))))) j)
     (= (t2tb2287 (tb2t2287 j)) j)) :pattern ((t2tb2287 (tb2t2287 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a d))) (v (set (set (tuple21 a b))))
  (r (set (tuple21 (tuple21 a d) (set (tuple21 a b))))))
  (= (mem (set1 (tuple2 (tuple2 a1 d1) (set1 (tuple2 a1 b1)))) (t2tb2214 r)
  (relation (set1 (tuple2 a1 b1)) (tuple2 a1 d1) (t2tb903 u) (t2tb10 v)))
  (forall ((x (tuple21 a d)) (y (set (tuple21 a b))))
  (=> (mem (tuple2 (tuple2 a1 d1) (set1 (tuple2 a1 b1)))
  (Tuple2 (tuple2 a1 d1) (set1 (tuple2 a1 b1)) (t2tb904 x) (t2tb11 y))
  (t2tb2214 r)) (and (mem32 x u) (mem4 y v)))))))

(declare-fun t2tb2288 ((set (set (tuple21 (tuple21 a d) (tuple21 a
  b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a d) (tuple21 a b)))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 d1) (tuple2 a1 b1)))) (t2tb2288 x))))

(declare-fun tb2t2288 (uni) (set (set (tuple21 (tuple21 a d) (tuple21 a
  b)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a d) (tuple21 a b))))))
  (! (= (tb2t2288 (t2tb2288 i)) i) :pattern ((t2tb2288 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 d1) (tuple2 a1 b1)))) j)
     (= (t2tb2288 (tb2t2288 j)) j)) :pattern ((t2tb2288 (tb2t2288 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a d))) (v (set (tuple21 a b)))
  (r (set (tuple21 (tuple21 a d) (tuple21 a b)))))
  (= (mem (set1 (tuple2 (tuple2 a1 d1) (tuple2 a1 b1))) (t2tb2216 r)
  (relation (tuple2 a1 b1) (tuple2 a1 d1) (t2tb903 u) (t2tb11 v)))
  (forall ((x (tuple21 a d)) (y (tuple21 a b)))
  (=> (mem (tuple2 (tuple2 a1 d1) (tuple2 a1 b1))
  (Tuple2 (tuple2 a1 d1) (tuple2 a1 b1) (t2tb904 x) (t2tb13 y)) (t2tb2216 r))
  (and (mem32 x u) (mem3 y v)))))))

(declare-fun t2tb2289 ((set (set (tuple21 (tuple21 a d) b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a d) b))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 d1) b1))) (t2tb2289 x))))

(declare-fun tb2t2289 (uni) (set (set (tuple21 (tuple21 a d) b))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a d) b)))))
  (! (= (tb2t2289 (t2tb2289 i)) i) :pattern ((t2tb2289 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 d1) b1))) j)
     (= (t2tb2289 (tb2t2289 j)) j)) :pattern ((t2tb2289 (tb2t2289 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a d))) (v (set b)) (r (set (tuple21 (tuple21 a d)
  b))))
  (= (mem (set1 (tuple2 (tuple2 a1 d1) b1)) (t2tb2218 r)
  (relation b1 (tuple2 a1 d1) (t2tb903 u) (t2tb12 v)))
  (forall ((x (tuple21 a d)) (y b))
  (=> (mem (tuple2 (tuple2 a1 d1) b1)
  (Tuple2 (tuple2 a1 d1) b1 (t2tb904 x) (t2tb14 y)) (t2tb2218 r))
  (and (mem32 x u) (mem2 y v)))))))

(declare-fun t2tb2290 ((set (set (tuple21 (tuple21 a d) a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a d) a))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 d1) a1))) (t2tb2290 x))))

(declare-fun tb2t2290 (uni) (set (set (tuple21 (tuple21 a d) a))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a d) a)))))
  (! (= (tb2t2290 (t2tb2290 i)) i) :pattern ((t2tb2290 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 d1) a1))) j)
     (= (t2tb2290 (tb2t2290 j)) j)) :pattern ((t2tb2290 (tb2t2290 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a d))) (v (set a)) (r (set (tuple21 (tuple21 a d)
  a))))
  (= (mem (set1 (tuple2 (tuple2 a1 d1) a1)) (t2tb2220 r)
  (relation a1 (tuple2 a1 d1) (t2tb903 u) (t2tb1 v)))
  (forall ((x (tuple21 a d)) (y a))
  (=> (mem (tuple2 (tuple2 a1 d1) a1)
  (Tuple2 (tuple2 a1 d1) a1 (t2tb904 x) (t2tb2 y)) (t2tb2220 r))
  (and (mem32 x u) (mem1 y v)))))))

;; mem_relation
  (assert
  (forall ((b2 ty))
  (forall ((u (set (tuple21 a d))) (v uni) (r uni))
  (and
  (=> (mem (set1 (tuple2 (tuple2 a1 d1) b2)) r
  (relation b2 (tuple2 a1 d1) (t2tb903 u) v))
  (forall ((x (tuple21 a d)) (y uni))
  (=> (mem (tuple2 (tuple2 a1 d1) b2)
  (Tuple2 (tuple2 a1 d1) b2 (t2tb904 x) y) r) (and (mem32 x u) (mem b2 y v)))))
  (=>
  (forall ((x (tuple21 a d)) (y uni))
  (=> (sort b2 y)
  (=> (mem (tuple2 (tuple2 a1 d1) b2)
  (Tuple2 (tuple2 a1 d1) b2 (t2tb904 x) y) r) (and (mem32 x u) (mem b2 y v)))))
  (mem (set1 (tuple2 (tuple2 a1 d1) b2)) r
  (relation b2 (tuple2 a1 d1) (t2tb903 u) v)))))))

(declare-fun t2tb2291 ((set (set (tuple21 (tuple21 b d) (tuple21 a
  d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 b d) (tuple21 a d)))))) (sort
  (set1 (set1 (tuple2 (tuple2 b1 d1) (tuple2 a1 d1)))) (t2tb2291 x))))

(declare-fun tb2t2291 (uni) (set (set (tuple21 (tuple21 b d) (tuple21 a
  d)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 b d) (tuple21 a d))))))
  (! (= (tb2t2291 (t2tb2291 i)) i) :pattern ((t2tb2291 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 b1 d1) (tuple2 a1 d1)))) j)
     (= (t2tb2291 (tb2t2291 j)) j)) :pattern ((t2tb2291 (tb2t2291 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 b d))) (v (set (tuple21 a d)))
  (r (set (tuple21 (tuple21 b d) (tuple21 a d)))))
  (= (mem (set1 (tuple2 (tuple2 b1 d1) (tuple2 a1 d1))) (t2tb2223 r)
  (relation (tuple2 a1 d1) (tuple2 b1 d1) (t2tb687 u) (t2tb903 v)))
  (forall ((x (tuple21 b d)) (y (tuple21 a d)))
  (=> (mem (tuple2 (tuple2 b1 d1) (tuple2 a1 d1))
  (Tuple2 (tuple2 b1 d1) (tuple2 a1 d1) (t2tb692 x) (t2tb904 y))
  (t2tb2223 r)) (and (mem23 x u) (mem32 y v)))))))

(declare-fun t2tb2059 ((set (set (tuple21 (tuple21 b d) (tuple21 b
  d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 b d) (tuple21 b d)))))) (sort
  (set1 (set1 (tuple2 (tuple2 b1 d1) (tuple2 b1 d1)))) (t2tb2059 x))))

(declare-fun tb2t2059 (uni) (set (set (tuple21 (tuple21 b d) (tuple21 b
  d)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 b d) (tuple21 b d))))))
  (! (= (tb2t2059 (t2tb2059 i)) i) :pattern ((t2tb2059 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 b1 d1) (tuple2 b1 d1)))) j)
     (= (t2tb2059 (tb2t2059 j)) j)) :pattern ((t2tb2059 (tb2t2059 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 b d))) (v (set (tuple21 b d)))
  (r (set (tuple21 (tuple21 b d) (tuple21 b d)))))
  (= (mem (set1 (tuple2 (tuple2 b1 d1) (tuple2 b1 d1))) (t2tb747 r)
  (relation (tuple2 b1 d1) (tuple2 b1 d1) (t2tb687 u) (t2tb687 v)))
  (forall ((x (tuple21 b d)) (y (tuple21 b d)))
  (=> (mem (tuple2 (tuple2 b1 d1) (tuple2 b1 d1))
  (Tuple2 (tuple2 b1 d1) (tuple2 b1 d1) (t2tb692 x) (t2tb692 y)) (t2tb747 r))
  (and (mem23 x u) (mem23 y v)))))))

(declare-fun t2tb2060 ((set (set (tuple21 (tuple21 b d) (set (tuple21 c
  d)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 b d) (set (tuple21 c d))))))) (sort
  (set1 (set1 (tuple2 (tuple2 b1 d1) (set1 (tuple2 c1 d1))))) (t2tb2060 x))))

(declare-fun tb2t2060 (uni) (set (set (tuple21 (tuple21 b d) (set (tuple21 c
  d))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 b d) (set (tuple21 c d)))))))
  (! (= (tb2t2060 (t2tb2060 i)) i) :pattern ((t2tb2060 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 b1 d1) (set1 (tuple2 c1 d1))))) j)
     (= (t2tb2060 (tb2t2060 j)) j)) :pattern ((t2tb2060 (tb2t2060 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 b d))) (v (set (set (tuple21 c d))))
  (r (set (tuple21 (tuple21 b d) (set (tuple21 c d))))))
  (= (mem (set1 (tuple2 (tuple2 b1 d1) (set1 (tuple2 c1 d1)))) (t2tb2031 r)
  (relation (set1 (tuple2 c1 d1)) (tuple2 b1 d1) (t2tb687 u) (t2tb688 v)))
  (forall ((x (tuple21 b d)) (y (set (tuple21 c d))))
  (=> (mem (tuple2 (tuple2 b1 d1) (set1 (tuple2 c1 d1)))
  (Tuple2 (tuple2 b1 d1) (set1 (tuple2 c1 d1)) (t2tb692 x) (t2tb689 y))
  (t2tb2031 r)) (and (mem23 x u) (mem22 y v)))))))

(declare-fun t2tb2061 ((set (set (tuple21 (tuple21 b d) (tuple21 c
  d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 b d) (tuple21 c d)))))) (sort
  (set1 (set1 (tuple2 (tuple2 b1 d1) (tuple2 c1 d1)))) (t2tb2061 x))))

(declare-fun tb2t2061 (uni) (set (set (tuple21 (tuple21 b d) (tuple21 c
  d)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 b d) (tuple21 c d))))))
  (! (= (tb2t2061 (t2tb2061 i)) i) :pattern ((t2tb2061 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 b1 d1) (tuple2 c1 d1)))) j)
     (= (t2tb2061 (tb2t2061 j)) j)) :pattern ((t2tb2061 (tb2t2061 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 b d))) (v (set (tuple21 c d)))
  (r (set (tuple21 (tuple21 b d) (tuple21 c d)))))
  (= (mem (set1 (tuple2 (tuple2 b1 d1) (tuple2 c1 d1))) (t2tb2033 r)
  (relation (tuple2 c1 d1) (tuple2 b1 d1) (t2tb687 u) (t2tb689 v)))
  (forall ((x (tuple21 b d)) (y (tuple21 c d)))
  (=> (mem (tuple2 (tuple2 b1 d1) (tuple2 c1 d1))
  (Tuple2 (tuple2 b1 d1) (tuple2 c1 d1) (t2tb692 x) (t2tb693 y))
  (t2tb2033 r)) (and (mem23 x u) (mem21 y v)))))))

(declare-fun t2tb2062 ((set (set (tuple21 (tuple21 b d) d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 b d) d))))) (sort
  (set1 (set1 (tuple2 (tuple2 b1 d1) d1))) (t2tb2062 x))))

(declare-fun tb2t2062 (uni) (set (set (tuple21 (tuple21 b d) d))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 b d) d)))))
  (! (= (tb2t2062 (t2tb2062 i)) i) :pattern ((t2tb2062 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 b1 d1) d1))) j)
     (= (t2tb2062 (tb2t2062 j)) j)) :pattern ((t2tb2062 (tb2t2062 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 b d))) (v (set d)) (r (set (tuple21 (tuple21 b d)
  d))))
  (= (mem (set1 (tuple2 (tuple2 b1 d1) d1)) (t2tb2035 r)
  (relation d1 (tuple2 b1 d1) (t2tb687 u) (t2tb690 v)))
  (forall ((x (tuple21 b d)) (y d))
  (=> (mem (tuple2 (tuple2 b1 d1) d1)
  (Tuple2 (tuple2 b1 d1) d1 (t2tb692 x) (t2tb694 y)) (t2tb2035 r))
  (and (mem23 x u) (mem20 y v)))))))

(declare-fun t2tb2292 ((set (set (tuple21 (tuple21 b d) (tuple21 a
  c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 b d) (tuple21 a c)))))) (sort
  (set1 (set1 (tuple2 (tuple2 b1 d1) (tuple2 a1 c1)))) (t2tb2292 x))))

(declare-fun tb2t2292 (uni) (set (set (tuple21 (tuple21 b d) (tuple21 a
  c)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 b d) (tuple21 a c))))))
  (! (= (tb2t2292 (t2tb2292 i)) i) :pattern ((t2tb2292 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 b1 d1) (tuple2 a1 c1)))) j)
     (= (t2tb2292 (tb2t2292 j)) j)) :pattern ((t2tb2292 (tb2t2292 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 b d))) (v (set (tuple21 a c)))
  (r (set (tuple21 (tuple21 b d) (tuple21 a c)))))
  (= (mem (set1 (tuple2 (tuple2 b1 d1) (tuple2 a1 c1))) (t2tb755 r)
  (relation (tuple2 a1 c1) (tuple2 b1 d1) (t2tb687 u) (t2tb129 v)))
  (forall ((x (tuple21 b d)) (y (tuple21 a c)))
  (=> (mem (tuple2 (tuple2 b1 d1) (tuple2 a1 c1))
  (Tuple2 (tuple2 b1 d1) (tuple2 a1 c1) (t2tb692 x) (t2tb133 y)) (t2tb755 r))
  (and (mem23 x u) (mem10 y v)))))))

(declare-fun t2tb2293 ((set (set (tuple21 (tuple21 b d) (set (tuple21 b
  c)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 b d) (set (tuple21 b c))))))) (sort
  (set1 (set1 (tuple2 (tuple2 b1 d1) (set1 (tuple2 b1 c1))))) (t2tb2293 x))))

(declare-fun tb2t2293 (uni) (set (set (tuple21 (tuple21 b d) (set (tuple21 b
  c))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 b d) (set (tuple21 b c)))))))
  (! (= (tb2t2293 (t2tb2293 i)) i) :pattern ((t2tb2293 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 b1 d1) (set1 (tuple2 b1 c1))))) j)
     (= (t2tb2293 (tb2t2293 j)) j)) :pattern ((t2tb2293 (tb2t2293 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 b d))) (v (set (set (tuple21 b c))))
  (r (set (tuple21 (tuple21 b d) (set (tuple21 b c))))))
  (= (mem (set1 (tuple2 (tuple2 b1 d1) (set1 (tuple2 b1 c1)))) (t2tb2224 r)
  (relation (set1 (tuple2 b1 c1)) (tuple2 b1 d1) (t2tb687 u) (t2tb130 v)))
  (forall ((x (tuple21 b d)) (y (set (tuple21 b c))))
  (=> (mem (tuple2 (tuple2 b1 d1) (set1 (tuple2 b1 c1)))
  (Tuple2 (tuple2 b1 d1) (set1 (tuple2 b1 c1)) (t2tb692 x) (t2tb131 y))
  (t2tb2224 r)) (and (mem23 x u) (mem9 y v)))))))

(declare-fun t2tb2294 ((set (set (tuple21 (tuple21 b d) (tuple21 b
  c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 b d) (tuple21 b c)))))) (sort
  (set1 (set1 (tuple2 (tuple2 b1 d1) (tuple2 b1 c1)))) (t2tb2294 x))))

(declare-fun tb2t2294 (uni) (set (set (tuple21 (tuple21 b d) (tuple21 b
  c)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 b d) (tuple21 b c))))))
  (! (= (tb2t2294 (t2tb2294 i)) i) :pattern ((t2tb2294 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 b1 d1) (tuple2 b1 c1)))) j)
     (= (t2tb2294 (tb2t2294 j)) j)) :pattern ((t2tb2294 (tb2t2294 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 b d))) (v (set (tuple21 b c)))
  (r (set (tuple21 (tuple21 b d) (tuple21 b c)))))
  (= (mem (set1 (tuple2 (tuple2 b1 d1) (tuple2 b1 c1))) (t2tb2226 r)
  (relation (tuple2 b1 c1) (tuple2 b1 d1) (t2tb687 u) (t2tb131 v)))
  (forall ((x (tuple21 b d)) (y (tuple21 b c)))
  (=> (mem (tuple2 (tuple2 b1 d1) (tuple2 b1 c1))
  (Tuple2 (tuple2 b1 d1) (tuple2 b1 c1) (t2tb692 x) (t2tb134 y))
  (t2tb2226 r)) (and (mem23 x u) (mem8 y v)))))))

(declare-fun t2tb2063 ((set (set (tuple21 (tuple21 b d) c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 b d) c))))) (sort
  (set1 (set1 (tuple2 (tuple2 b1 d1) c1))) (t2tb2063 x))))

(declare-fun tb2t2063 (uni) (set (set (tuple21 (tuple21 b d) c))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 b d) c)))))
  (! (= (tb2t2063 (t2tb2063 i)) i) :pattern ((t2tb2063 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 b1 d1) c1))) j)
     (= (t2tb2063 (tb2t2063 j)) j)) :pattern ((t2tb2063 (tb2t2063 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 b d))) (v (set c)) (r (set (tuple21 (tuple21 b d)
  c))))
  (= (mem (set1 (tuple2 (tuple2 b1 d1) c1)) (t2tb2036 r)
  (relation c1 (tuple2 b1 d1) (t2tb687 u) (t2tb132 v)))
  (forall ((x (tuple21 b d)) (y c))
  (=> (mem (tuple2 (tuple2 b1 d1) c1)
  (Tuple2 (tuple2 b1 d1) c1 (t2tb692 x) (t2tb135 y)) (t2tb2036 r))
  (and (mem23 x u) (mem7 y v)))))))

(declare-fun t2tb2064 ((set (set (tuple21 (tuple21 b d) (set (tuple21 a
  b)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 b d) (set (tuple21 a b))))))) (sort
  (set1 (set1 (tuple2 (tuple2 b1 d1) (set1 (tuple2 a1 b1))))) (t2tb2064 x))))

(declare-fun tb2t2064 (uni) (set (set (tuple21 (tuple21 b d) (set (tuple21 a
  b))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 b d) (set (tuple21 a b)))))))
  (! (= (tb2t2064 (t2tb2064 i)) i) :pattern ((t2tb2064 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 b1 d1) (set1 (tuple2 a1 b1))))) j)
     (= (t2tb2064 (tb2t2064 j)) j)) :pattern ((t2tb2064 (tb2t2064 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 b d))) (v (set (set (tuple21 a b))))
  (r (set (tuple21 (tuple21 b d) (set (tuple21 a b))))))
  (= (mem (set1 (tuple2 (tuple2 b1 d1) (set1 (tuple2 a1 b1)))) (t2tb2037 r)
  (relation (set1 (tuple2 a1 b1)) (tuple2 b1 d1) (t2tb687 u) (t2tb10 v)))
  (forall ((x (tuple21 b d)) (y (set (tuple21 a b))))
  (=> (mem (tuple2 (tuple2 b1 d1) (set1 (tuple2 a1 b1)))
  (Tuple2 (tuple2 b1 d1) (set1 (tuple2 a1 b1)) (t2tb692 x) (t2tb11 y))
  (t2tb2037 r)) (and (mem23 x u) (mem4 y v)))))))

(declare-fun t2tb2065 ((set (set (tuple21 (tuple21 b d) (tuple21 a
  b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 b d) (tuple21 a b)))))) (sort
  (set1 (set1 (tuple2 (tuple2 b1 d1) (tuple2 a1 b1)))) (t2tb2065 x))))

(declare-fun tb2t2065 (uni) (set (set (tuple21 (tuple21 b d) (tuple21 a
  b)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 b d) (tuple21 a b))))))
  (! (= (tb2t2065 (t2tb2065 i)) i) :pattern ((t2tb2065 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 b1 d1) (tuple2 a1 b1)))) j)
     (= (t2tb2065 (tb2t2065 j)) j)) :pattern ((t2tb2065 (tb2t2065 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 b d))) (v (set (tuple21 a b)))
  (r (set (tuple21 (tuple21 b d) (tuple21 a b)))))
  (= (mem (set1 (tuple2 (tuple2 b1 d1) (tuple2 a1 b1))) (t2tb2039 r)
  (relation (tuple2 a1 b1) (tuple2 b1 d1) (t2tb687 u) (t2tb11 v)))
  (forall ((x (tuple21 b d)) (y (tuple21 a b)))
  (=> (mem (tuple2 (tuple2 b1 d1) (tuple2 a1 b1))
  (Tuple2 (tuple2 b1 d1) (tuple2 a1 b1) (t2tb692 x) (t2tb13 y)) (t2tb2039 r))
  (and (mem23 x u) (mem3 y v)))))))

(declare-fun t2tb2066 ((set (set (tuple21 (tuple21 b d) b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 b d) b))))) (sort
  (set1 (set1 (tuple2 (tuple2 b1 d1) b1))) (t2tb2066 x))))

(declare-fun tb2t2066 (uni) (set (set (tuple21 (tuple21 b d) b))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 b d) b)))))
  (! (= (tb2t2066 (t2tb2066 i)) i) :pattern ((t2tb2066 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 b1 d1) b1))) j)
     (= (t2tb2066 (tb2t2066 j)) j)) :pattern ((t2tb2066 (tb2t2066 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 b d))) (v (set b)) (r (set (tuple21 (tuple21 b d)
  b))))
  (= (mem (set1 (tuple2 (tuple2 b1 d1) b1)) (t2tb2041 r)
  (relation b1 (tuple2 b1 d1) (t2tb687 u) (t2tb12 v)))
  (forall ((x (tuple21 b d)) (y b))
  (=> (mem (tuple2 (tuple2 b1 d1) b1)
  (Tuple2 (tuple2 b1 d1) b1 (t2tb692 x) (t2tb14 y)) (t2tb2041 r))
  (and (mem23 x u) (mem2 y v)))))))

(declare-fun t2tb2067 ((set (set (tuple21 (tuple21 b d) a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 b d) a))))) (sort
  (set1 (set1 (tuple2 (tuple2 b1 d1) a1))) (t2tb2067 x))))

(declare-fun tb2t2067 (uni) (set (set (tuple21 (tuple21 b d) a))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 b d) a)))))
  (! (= (tb2t2067 (t2tb2067 i)) i) :pattern ((t2tb2067 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 b1 d1) a1))) j)
     (= (t2tb2067 (tb2t2067 j)) j)) :pattern ((t2tb2067 (tb2t2067 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 b d))) (v (set a)) (r (set (tuple21 (tuple21 b d)
  a))))
  (= (mem (set1 (tuple2 (tuple2 b1 d1) a1)) (t2tb2042 r)
  (relation a1 (tuple2 b1 d1) (t2tb687 u) (t2tb1 v)))
  (forall ((x (tuple21 b d)) (y a))
  (=> (mem (tuple2 (tuple2 b1 d1) a1)
  (Tuple2 (tuple2 b1 d1) a1 (t2tb692 x) (t2tb2 y)) (t2tb2042 r))
  (and (mem23 x u) (mem1 y v)))))))

;; mem_relation
  (assert
  (forall ((b2 ty))
  (forall ((u (set (tuple21 b d))) (v uni) (r uni))
  (and
  (=> (mem (set1 (tuple2 (tuple2 b1 d1) b2)) r
  (relation b2 (tuple2 b1 d1) (t2tb687 u) v))
  (forall ((x (tuple21 b d)) (y uni))
  (=> (mem (tuple2 (tuple2 b1 d1) b2)
  (Tuple2 (tuple2 b1 d1) b2 (t2tb692 x) y) r) (and (mem23 x u) (mem b2 y v)))))
  (=>
  (forall ((x (tuple21 b d)) (y uni))
  (=> (sort b2 y)
  (=> (mem (tuple2 (tuple2 b1 d1) b2)
  (Tuple2 (tuple2 b1 d1) b2 (t2tb692 x) y) r) (and (mem23 x u) (mem b2 y v)))))
  (mem (set1 (tuple2 (tuple2 b1 d1) b2)) r
  (relation b2 (tuple2 b1 d1) (t2tb687 u) v)))))))

(declare-fun t2tb2295 ((set (set (tuple21 (set (tuple21 c d)) (tuple21 a
  d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 c d)) (tuple21 a d)))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 c1 d1)) (tuple2 a1 d1)))) (t2tb2295 x))))

(declare-fun tb2t2295 (uni) (set (set (tuple21 (set (tuple21 c d)) (tuple21 a
  d)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 c d)) (tuple21 a d))))))
  (! (= (tb2t2295 (t2tb2295 i)) i) :pattern ((t2tb2295 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 c1 d1)) (tuple2 a1 d1)))) j)
     (= (t2tb2295 (tb2t2295 j)) j)) :pattern ((t2tb2295 (tb2t2295 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 c d)))) (v (set (tuple21 a d)))
  (r (set (tuple21 (set (tuple21 c d)) (tuple21 a d)))))
  (= (mem (set1 (tuple2 (set1 (tuple2 c1 d1)) (tuple2 a1 d1))) (t2tb2228 r)
  (relation (tuple2 a1 d1) (set1 (tuple2 c1 d1)) (t2tb688 u) (t2tb903 v)))
  (forall ((x (set (tuple21 c d))) (y (tuple21 a d)))
  (=> (mem (tuple2 (set1 (tuple2 c1 d1)) (tuple2 a1 d1))
  (Tuple2 (set1 (tuple2 c1 d1)) (tuple2 a1 d1) (t2tb689 x) (t2tb904 y))
  (t2tb2228 r)) (and (mem22 x u) (mem32 y v)))))))

(declare-fun t2tb2068 ((set (set (tuple21 (set (tuple21 c d)) (tuple21 b
  d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 c d)) (tuple21 b d)))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 c1 d1)) (tuple2 b1 d1)))) (t2tb2068 x))))

(declare-fun tb2t2068 (uni) (set (set (tuple21 (set (tuple21 c d)) (tuple21 b
  d)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 c d)) (tuple21 b d))))))
  (! (= (tb2t2068 (t2tb2068 i)) i) :pattern ((t2tb2068 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 c1 d1)) (tuple2 b1 d1)))) j)
     (= (t2tb2068 (tb2t2068 j)) j)) :pattern ((t2tb2068 (tb2t2068 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 c d)))) (v (set (tuple21 b d)))
  (r (set (tuple21 (set (tuple21 c d)) (tuple21 b d)))))
  (= (mem (set1 (tuple2 (set1 (tuple2 c1 d1)) (tuple2 b1 d1))) (t2tb2044 r)
  (relation (tuple2 b1 d1) (set1 (tuple2 c1 d1)) (t2tb688 u) (t2tb687 v)))
  (forall ((x (set (tuple21 c d))) (y (tuple21 b d)))
  (=> (mem (tuple2 (set1 (tuple2 c1 d1)) (tuple2 b1 d1))
  (Tuple2 (set1 (tuple2 c1 d1)) (tuple2 b1 d1) (t2tb689 x) (t2tb692 y))
  (t2tb2044 r)) (and (mem22 x u) (mem23 y v)))))))

(declare-fun t2tb948 ((set (set (tuple21 (set (tuple21 c d)) (set (tuple21 c
  d)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 c d)) (set (tuple21 c d)))))))
  (sort (set1 (set1 (tuple2 (set1 (tuple2 c1 d1)) (set1 (tuple2 c1 d1)))))
  (t2tb948 x))))

(declare-fun tb2t948 (uni) (set (set (tuple21 (set (tuple21 c d))
  (set (tuple21 c d))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 c d)) (set (tuple21 c d)))))))
  (! (= (tb2t948 (t2tb948 i)) i) :pattern ((t2tb948 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (set1 (tuple2 c1 d1)) (set1 (tuple2 c1 d1))))) j)
     (= (t2tb948 (tb2t948 j)) j)) :pattern ((t2tb948 (tb2t948 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 c d)))) (v (set (set (tuple21 c d))))
  (r (set (tuple21 (set (tuple21 c d)) (set (tuple21 c d))))))
  (= (mem (set1 (tuple2 (set1 (tuple2 c1 d1)) (set1 (tuple2 c1 d1))))
  (t2tb773 r)
  (relation (set1 (tuple2 c1 d1)) (set1 (tuple2 c1 d1)) (t2tb688 u)
  (t2tb688 v)))
  (forall ((x (set (tuple21 c d))) (y (set (tuple21 c d))))
  (=> (mem (tuple2 (set1 (tuple2 c1 d1)) (set1 (tuple2 c1 d1)))
  (Tuple2 (set1 (tuple2 c1 d1)) (set1 (tuple2 c1 d1)) (t2tb689 x)
  (t2tb689 y)) (t2tb773 r)) (and (mem22 x u) (mem22 y v)))))))

(declare-fun t2tb949 ((set (set (tuple21 (set (tuple21 c d)) (tuple21 c
  d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 c d)) (tuple21 c d)))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 c1 d1)) (tuple2 c1 d1)))) (t2tb949 x))))

(declare-fun tb2t949 (uni) (set (set (tuple21 (set (tuple21 c d)) (tuple21 c
  d)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 c d)) (tuple21 c d))))))
  (! (= (tb2t949 (t2tb949 i)) i) :pattern ((t2tb949 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 c1 d1)) (tuple2 c1 d1)))) j)
     (= (t2tb949 (tb2t949 j)) j)) :pattern ((t2tb949 (tb2t949 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 c d)))) (v (set (tuple21 c d)))
  (r (set (tuple21 (set (tuple21 c d)) (tuple21 c d)))))
  (= (mem (set1 (tuple2 (set1 (tuple2 c1 d1)) (tuple2 c1 d1))) (t2tb775 r)
  (relation (tuple2 c1 d1) (set1 (tuple2 c1 d1)) (t2tb688 u) (t2tb689 v)))
  (forall ((x (set (tuple21 c d))) (y (tuple21 c d)))
  (=> (mem (tuple2 (set1 (tuple2 c1 d1)) (tuple2 c1 d1))
  (Tuple2 (set1 (tuple2 c1 d1)) (tuple2 c1 d1) (t2tb689 x) (t2tb693 y))
  (t2tb775 r)) (and (mem22 x u) (mem21 y v)))))))

(declare-fun t2tb950 ((set (set (tuple21 (set (tuple21 c d)) d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 c d)) d))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 c1 d1)) d1))) (t2tb950 x))))

(declare-fun tb2t950 (uni) (set (set (tuple21 (set (tuple21 c d)) d))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 c d)) d)))))
  (! (= (tb2t950 (t2tb950 i)) i) :pattern ((t2tb950 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 c1 d1)) d1))) j)
     (= (t2tb950 (tb2t950 j)) j)) :pattern ((t2tb950 (tb2t950 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 c d)))) (v (set d))
  (r (set (tuple21 (set (tuple21 c d)) d))))
  (= (mem (set1 (tuple2 (set1 (tuple2 c1 d1)) d1)) (t2tb777 r)
  (relation d1 (set1 (tuple2 c1 d1)) (t2tb688 u) (t2tb690 v)))
  (forall ((x (set (tuple21 c d))) (y d))
  (=> (mem (tuple2 (set1 (tuple2 c1 d1)) d1)
  (Tuple2 (set1 (tuple2 c1 d1)) d1 (t2tb689 x) (t2tb694 y)) (t2tb777 r))
  (and (mem22 x u) (mem20 y v)))))))

(declare-fun t2tb1928 ((set (set (tuple21 (set (tuple21 c d)) (tuple21 a
  c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 c d)) (tuple21 a c)))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 c1 d1)) (tuple2 a1 c1)))) (t2tb1928 x))))

(declare-fun tb2t1928 (uni) (set (set (tuple21 (set (tuple21 c d)) (tuple21 a
  c)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 c d)) (tuple21 a c))))))
  (! (= (tb2t1928 (t2tb1928 i)) i) :pattern ((t2tb1928 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 c1 d1)) (tuple2 a1 c1)))) j)
     (= (t2tb1928 (tb2t1928 j)) j)) :pattern ((t2tb1928 (tb2t1928 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 c d)))) (v (set (tuple21 a c)))
  (r (set (tuple21 (set (tuple21 c d)) (tuple21 a c)))))
  (= (mem (set1 (tuple2 (set1 (tuple2 c1 d1)) (tuple2 a1 c1))) (t2tb1916 r)
  (relation (tuple2 a1 c1) (set1 (tuple2 c1 d1)) (t2tb688 u) (t2tb129 v)))
  (forall ((x (set (tuple21 c d))) (y (tuple21 a c)))
  (=> (mem (tuple2 (set1 (tuple2 c1 d1)) (tuple2 a1 c1))
  (Tuple2 (set1 (tuple2 c1 d1)) (tuple2 a1 c1) (t2tb689 x) (t2tb133 y))
  (t2tb1916 r)) (and (mem22 x u) (mem10 y v)))))))

(declare-fun t2tb2296 ((set (set (tuple21 (set (tuple21 c d)) (set (tuple21 b
  c)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 c d)) (set (tuple21 b c)))))))
  (sort (set1 (set1 (tuple2 (set1 (tuple2 c1 d1)) (set1 (tuple2 b1 c1)))))
  (t2tb2296 x))))

(declare-fun tb2t2296 (uni) (set (set (tuple21 (set (tuple21 c d))
  (set (tuple21 b c))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 c d)) (set (tuple21 b c)))))))
  (! (= (tb2t2296 (t2tb2296 i)) i) :pattern ((t2tb2296 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (set1 (tuple2 c1 d1)) (set1 (tuple2 b1 c1))))) j)
     (= (t2tb2296 (tb2t2296 j)) j)) :pattern ((t2tb2296 (tb2t2296 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 c d)))) (v (set (set (tuple21 b c))))
  (r (set (tuple21 (set (tuple21 c d)) (set (tuple21 b c))))))
  (= (mem (set1 (tuple2 (set1 (tuple2 c1 d1)) (set1 (tuple2 b1 c1))))
  (t2tb2230 r)
  (relation (set1 (tuple2 b1 c1)) (set1 (tuple2 c1 d1)) (t2tb688 u)
  (t2tb130 v)))
  (forall ((x (set (tuple21 c d))) (y (set (tuple21 b c))))
  (=> (mem (tuple2 (set1 (tuple2 c1 d1)) (set1 (tuple2 b1 c1)))
  (Tuple2 (set1 (tuple2 c1 d1)) (set1 (tuple2 b1 c1)) (t2tb689 x)
  (t2tb131 y)) (t2tb2230 r)) (and (mem22 x u) (mem9 y v)))))))

(declare-fun t2tb2297 ((set (set (tuple21 (set (tuple21 c d)) (tuple21 b
  c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 c d)) (tuple21 b c)))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 c1 d1)) (tuple2 b1 c1)))) (t2tb2297 x))))

(declare-fun tb2t2297 (uni) (set (set (tuple21 (set (tuple21 c d)) (tuple21 b
  c)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 c d)) (tuple21 b c))))))
  (! (= (tb2t2297 (t2tb2297 i)) i) :pattern ((t2tb2297 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 c1 d1)) (tuple2 b1 c1)))) j)
     (= (t2tb2297 (tb2t2297 j)) j)) :pattern ((t2tb2297 (tb2t2297 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 c d)))) (v (set (tuple21 b c)))
  (r (set (tuple21 (set (tuple21 c d)) (tuple21 b c)))))
  (= (mem (set1 (tuple2 (set1 (tuple2 c1 d1)) (tuple2 b1 c1))) (t2tb2232 r)
  (relation (tuple2 b1 c1) (set1 (tuple2 c1 d1)) (t2tb688 u) (t2tb131 v)))
  (forall ((x (set (tuple21 c d))) (y (tuple21 b c)))
  (=> (mem (tuple2 (set1 (tuple2 c1 d1)) (tuple2 b1 c1))
  (Tuple2 (set1 (tuple2 c1 d1)) (tuple2 b1 c1) (t2tb689 x) (t2tb134 y))
  (t2tb2232 r)) (and (mem22 x u) (mem8 y v)))))))

(declare-fun t2tb952 ((set (set (tuple21 (set (tuple21 c d)) c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 c d)) c))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 c1 d1)) c1))) (t2tb952 x))))

(declare-fun tb2t952 (uni) (set (set (tuple21 (set (tuple21 c d)) c))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 c d)) c)))))
  (! (= (tb2t952 (t2tb952 i)) i) :pattern ((t2tb952 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 c1 d1)) c1))) j)
     (= (t2tb952 (tb2t952 j)) j)) :pattern ((t2tb952 (tb2t952 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 c d)))) (v (set c))
  (r (set (tuple21 (set (tuple21 c d)) c))))
  (= (mem (set1 (tuple2 (set1 (tuple2 c1 d1)) c1)) (t2tb781 r)
  (relation c1 (set1 (tuple2 c1 d1)) (t2tb688 u) (t2tb132 v)))
  (forall ((x (set (tuple21 c d))) (y c))
  (=> (mem (tuple2 (set1 (tuple2 c1 d1)) c1)
  (Tuple2 (set1 (tuple2 c1 d1)) c1 (t2tb689 x) (t2tb135 y)) (t2tb781 r))
  (and (mem22 x u) (mem7 y v)))))))

(declare-fun t2tb953 ((set (set (tuple21 (set (tuple21 c d)) (set (tuple21 a
  b)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 c d)) (set (tuple21 a b)))))))
  (sort (set1 (set1 (tuple2 (set1 (tuple2 c1 d1)) (set1 (tuple2 a1 b1)))))
  (t2tb953 x))))

(declare-fun tb2t953 (uni) (set (set (tuple21 (set (tuple21 c d))
  (set (tuple21 a b))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 c d)) (set (tuple21 a b)))))))
  (! (= (tb2t953 (t2tb953 i)) i) :pattern ((t2tb953 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (set1 (tuple2 c1 d1)) (set1 (tuple2 a1 b1))))) j)
     (= (t2tb953 (tb2t953 j)) j)) :pattern ((t2tb953 (tb2t953 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 c d)))) (v (set (set (tuple21 a b))))
  (r (set (tuple21 (set (tuple21 c d)) (set (tuple21 a b))))))
  (= (mem (set1 (tuple2 (set1 (tuple2 c1 d1)) (set1 (tuple2 a1 b1))))
  (t2tb783 r)
  (relation (set1 (tuple2 a1 b1)) (set1 (tuple2 c1 d1)) (t2tb688 u)
  (t2tb10 v)))
  (forall ((x (set (tuple21 c d))) (y (set (tuple21 a b))))
  (=> (mem (tuple2 (set1 (tuple2 c1 d1)) (set1 (tuple2 a1 b1)))
  (Tuple2 (set1 (tuple2 c1 d1)) (set1 (tuple2 a1 b1)) (t2tb689 x) (t2tb11 y))
  (t2tb783 r)) (and (mem22 x u) (mem4 y v)))))))

(declare-fun t2tb954 ((set (set (tuple21 (set (tuple21 c d)) (tuple21 a
  b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 c d)) (tuple21 a b)))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 c1 d1)) (tuple2 a1 b1)))) (t2tb954 x))))

(declare-fun tb2t954 (uni) (set (set (tuple21 (set (tuple21 c d)) (tuple21 a
  b)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 c d)) (tuple21 a b))))))
  (! (= (tb2t954 (t2tb954 i)) i) :pattern ((t2tb954 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 c1 d1)) (tuple2 a1 b1)))) j)
     (= (t2tb954 (tb2t954 j)) j)) :pattern ((t2tb954 (tb2t954 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 c d)))) (v (set (tuple21 a b)))
  (r (set (tuple21 (set (tuple21 c d)) (tuple21 a b)))))
  (= (mem (set1 (tuple2 (set1 (tuple2 c1 d1)) (tuple2 a1 b1))) (t2tb785 r)
  (relation (tuple2 a1 b1) (set1 (tuple2 c1 d1)) (t2tb688 u) (t2tb11 v)))
  (forall ((x (set (tuple21 c d))) (y (tuple21 a b)))
  (=> (mem (tuple2 (set1 (tuple2 c1 d1)) (tuple2 a1 b1))
  (Tuple2 (set1 (tuple2 c1 d1)) (tuple2 a1 b1) (t2tb689 x) (t2tb13 y))
  (t2tb785 r)) (and (mem22 x u) (mem3 y v)))))))

(declare-fun t2tb955 ((set (set (tuple21 (set (tuple21 c d)) b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 c d)) b))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 c1 d1)) b1))) (t2tb955 x))))

(declare-fun tb2t955 (uni) (set (set (tuple21 (set (tuple21 c d)) b))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 c d)) b)))))
  (! (= (tb2t955 (t2tb955 i)) i) :pattern ((t2tb955 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 c1 d1)) b1))) j)
     (= (t2tb955 (tb2t955 j)) j)) :pattern ((t2tb955 (tb2t955 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 c d)))) (v (set b))
  (r (set (tuple21 (set (tuple21 c d)) b))))
  (= (mem (set1 (tuple2 (set1 (tuple2 c1 d1)) b1)) (t2tb787 r)
  (relation b1 (set1 (tuple2 c1 d1)) (t2tb688 u) (t2tb12 v)))
  (forall ((x (set (tuple21 c d))) (y b))
  (=> (mem (tuple2 (set1 (tuple2 c1 d1)) b1)
  (Tuple2 (set1 (tuple2 c1 d1)) b1 (t2tb689 x) (t2tb14 y)) (t2tb787 r))
  (and (mem22 x u) (mem2 y v)))))))

(declare-fun t2tb956 ((set (set (tuple21 (set (tuple21 c d)) a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 c d)) a))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 c1 d1)) a1))) (t2tb956 x))))

(declare-fun tb2t956 (uni) (set (set (tuple21 (set (tuple21 c d)) a))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 c d)) a)))))
  (! (= (tb2t956 (t2tb956 i)) i) :pattern ((t2tb956 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 c1 d1)) a1))) j)
     (= (t2tb956 (tb2t956 j)) j)) :pattern ((t2tb956 (tb2t956 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 c d)))) (v (set a))
  (r (set (tuple21 (set (tuple21 c d)) a))))
  (= (mem (set1 (tuple2 (set1 (tuple2 c1 d1)) a1)) (t2tb789 r)
  (relation a1 (set1 (tuple2 c1 d1)) (t2tb688 u) (t2tb1 v)))
  (forall ((x (set (tuple21 c d))) (y a))
  (=> (mem (tuple2 (set1 (tuple2 c1 d1)) a1)
  (Tuple2 (set1 (tuple2 c1 d1)) a1 (t2tb689 x) (t2tb2 y)) (t2tb789 r))
  (and (mem22 x u) (mem1 y v)))))))

;; mem_relation
  (assert
  (forall ((b2 ty))
  (forall ((u (set (set (tuple21 c d)))) (v uni) (r uni))
  (and
  (=> (mem (set1 (tuple2 (set1 (tuple2 c1 d1)) b2)) r
  (relation b2 (set1 (tuple2 c1 d1)) (t2tb688 u) v))
  (forall ((x (set (tuple21 c d))) (y uni))
  (=> (mem (tuple2 (set1 (tuple2 c1 d1)) b2)
  (Tuple2 (set1 (tuple2 c1 d1)) b2 (t2tb689 x) y) r)
  (and (mem22 x u) (mem b2 y v)))))
  (=>
  (forall ((x (set (tuple21 c d))) (y uni))
  (=> (sort b2 y)
  (=> (mem (tuple2 (set1 (tuple2 c1 d1)) b2)
  (Tuple2 (set1 (tuple2 c1 d1)) b2 (t2tb689 x) y) r)
  (and (mem22 x u) (mem b2 y v))))) (mem
  (set1 (tuple2 (set1 (tuple2 c1 d1)) b2)) r
  (relation b2 (set1 (tuple2 c1 d1)) (t2tb688 u) v)))))))

(declare-fun t2tb2298 ((set (set (tuple21 (tuple21 c d) (tuple21 a
  d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 c d) (tuple21 a d)))))) (sort
  (set1 (set1 (tuple2 (tuple2 c1 d1) (tuple2 a1 d1)))) (t2tb2298 x))))

(declare-fun tb2t2298 (uni) (set (set (tuple21 (tuple21 c d) (tuple21 a
  d)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 c d) (tuple21 a d))))))
  (! (= (tb2t2298 (t2tb2298 i)) i) :pattern ((t2tb2298 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 c1 d1) (tuple2 a1 d1)))) j)
     (= (t2tb2298 (tb2t2298 j)) j)) :pattern ((t2tb2298 (tb2t2298 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 c d))) (v (set (tuple21 a d)))
  (r (set (tuple21 (tuple21 c d) (tuple21 a d)))))
  (= (mem (set1 (tuple2 (tuple2 c1 d1) (tuple2 a1 d1))) (t2tb2234 r)
  (relation (tuple2 a1 d1) (tuple2 c1 d1) (t2tb689 u) (t2tb903 v)))
  (forall ((x (tuple21 c d)) (y (tuple21 a d)))
  (=> (mem (tuple2 (tuple2 c1 d1) (tuple2 a1 d1))
  (Tuple2 (tuple2 c1 d1) (tuple2 a1 d1) (t2tb693 x) (t2tb904 y))
  (t2tb2234 r)) (and (mem21 x u) (mem32 y v)))))))

(declare-fun t2tb2069 ((set (set (tuple21 (tuple21 c d) (tuple21 b
  d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 c d) (tuple21 b d)))))) (sort
  (set1 (set1 (tuple2 (tuple2 c1 d1) (tuple2 b1 d1)))) (t2tb2069 x))))

(declare-fun tb2t2069 (uni) (set (set (tuple21 (tuple21 c d) (tuple21 b
  d)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 c d) (tuple21 b d))))))
  (! (= (tb2t2069 (t2tb2069 i)) i) :pattern ((t2tb2069 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 c1 d1) (tuple2 b1 d1)))) j)
     (= (t2tb2069 (tb2t2069 j)) j)) :pattern ((t2tb2069 (tb2t2069 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 c d))) (v (set (tuple21 b d)))
  (r (set (tuple21 (tuple21 c d) (tuple21 b d)))))
  (= (mem (set1 (tuple2 (tuple2 c1 d1) (tuple2 b1 d1))) (t2tb2046 r)
  (relation (tuple2 b1 d1) (tuple2 c1 d1) (t2tb689 u) (t2tb687 v)))
  (forall ((x (tuple21 c d)) (y (tuple21 b d)))
  (=> (mem (tuple2 (tuple2 c1 d1) (tuple2 b1 d1))
  (Tuple2 (tuple2 c1 d1) (tuple2 b1 d1) (t2tb693 x) (t2tb692 y))
  (t2tb2046 r)) (and (mem21 x u) (mem23 y v)))))))

(declare-fun t2tb960 ((set (set (tuple21 (tuple21 c d) (set (tuple21 c
  d)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 c d) (set (tuple21 c d))))))) (sort
  (set1 (set1 (tuple2 (tuple2 c1 d1) (set1 (tuple2 c1 d1))))) (t2tb960 x))))

(declare-fun tb2t960 (uni) (set (set (tuple21 (tuple21 c d) (set (tuple21 c
  d))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 c d) (set (tuple21 c d)))))))
  (! (= (tb2t960 (t2tb960 i)) i) :pattern ((t2tb960 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 c1 d1) (set1 (tuple2 c1 d1))))) j)
     (= (t2tb960 (tb2t960 j)) j)) :pattern ((t2tb960 (tb2t960 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 c d))) (v (set (set (tuple21 c d))))
  (r (set (tuple21 (tuple21 c d) (set (tuple21 c d))))))
  (= (mem (set1 (tuple2 (tuple2 c1 d1) (set1 (tuple2 c1 d1)))) (t2tb797 r)
  (relation (set1 (tuple2 c1 d1)) (tuple2 c1 d1) (t2tb689 u) (t2tb688 v)))
  (forall ((x (tuple21 c d)) (y (set (tuple21 c d))))
  (=> (mem (tuple2 (tuple2 c1 d1) (set1 (tuple2 c1 d1)))
  (Tuple2 (tuple2 c1 d1) (set1 (tuple2 c1 d1)) (t2tb693 x) (t2tb689 y))
  (t2tb797 r)) (and (mem21 x u) (mem22 y v)))))))

(declare-fun t2tb961 ((set (set (tuple21 (tuple21 c d) (tuple21 c d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 c d) (tuple21 c d)))))) (sort
  (set1 (set1 (tuple2 (tuple2 c1 d1) (tuple2 c1 d1)))) (t2tb961 x))))

(declare-fun tb2t961 (uni) (set (set (tuple21 (tuple21 c d) (tuple21 c d)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 c d) (tuple21 c d))))))
  (! (= (tb2t961 (t2tb961 i)) i) :pattern ((t2tb961 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 c1 d1) (tuple2 c1 d1)))) j)
     (= (t2tb961 (tb2t961 j)) j)) :pattern ((t2tb961 (tb2t961 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 c d))) (v (set (tuple21 c d)))
  (r (set (tuple21 (tuple21 c d) (tuple21 c d)))))
  (= (mem (set1 (tuple2 (tuple2 c1 d1) (tuple2 c1 d1))) (t2tb799 r)
  (relation (tuple2 c1 d1) (tuple2 c1 d1) (t2tb689 u) (t2tb689 v)))
  (forall ((x (tuple21 c d)) (y (tuple21 c d)))
  (=> (mem (tuple2 (tuple2 c1 d1) (tuple2 c1 d1))
  (Tuple2 (tuple2 c1 d1) (tuple2 c1 d1) (t2tb693 x) (t2tb693 y)) (t2tb799 r))
  (and (mem21 x u) (mem21 y v)))))))

(declare-fun t2tb962 ((set (set (tuple21 (tuple21 c d) d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 c d) d))))) (sort
  (set1 (set1 (tuple2 (tuple2 c1 d1) d1))) (t2tb962 x))))

(declare-fun tb2t962 (uni) (set (set (tuple21 (tuple21 c d) d))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 c d) d)))))
  (! (= (tb2t962 (t2tb962 i)) i) :pattern ((t2tb962 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 c1 d1) d1))) j)
     (= (t2tb962 (tb2t962 j)) j)) :pattern ((t2tb962 (tb2t962 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 c d))) (v (set d)) (r (set (tuple21 (tuple21 c d)
  d))))
  (= (mem (set1 (tuple2 (tuple2 c1 d1) d1)) (t2tb801 r)
  (relation d1 (tuple2 c1 d1) (t2tb689 u) (t2tb690 v)))
  (forall ((x (tuple21 c d)) (y d))
  (=> (mem (tuple2 (tuple2 c1 d1) d1)
  (Tuple2 (tuple2 c1 d1) d1 (t2tb693 x) (t2tb694 y)) (t2tb801 r))
  (and (mem21 x u) (mem20 y v)))))))

(declare-fun t2tb1929 ((set (set (tuple21 (tuple21 c d) (tuple21 a
  c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 c d) (tuple21 a c)))))) (sort
  (set1 (set1 (tuple2 (tuple2 c1 d1) (tuple2 a1 c1)))) (t2tb1929 x))))

(declare-fun tb2t1929 (uni) (set (set (tuple21 (tuple21 c d) (tuple21 a
  c)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 c d) (tuple21 a c))))))
  (! (= (tb2t1929 (t2tb1929 i)) i) :pattern ((t2tb1929 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 c1 d1) (tuple2 a1 c1)))) j)
     (= (t2tb1929 (tb2t1929 j)) j)) :pattern ((t2tb1929 (tb2t1929 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 c d))) (v (set (tuple21 a c)))
  (r (set (tuple21 (tuple21 c d) (tuple21 a c)))))
  (= (mem (set1 (tuple2 (tuple2 c1 d1) (tuple2 a1 c1))) (t2tb1918 r)
  (relation (tuple2 a1 c1) (tuple2 c1 d1) (t2tb689 u) (t2tb129 v)))
  (forall ((x (tuple21 c d)) (y (tuple21 a c)))
  (=> (mem (tuple2 (tuple2 c1 d1) (tuple2 a1 c1))
  (Tuple2 (tuple2 c1 d1) (tuple2 a1 c1) (t2tb693 x) (t2tb133 y))
  (t2tb1918 r)) (and (mem21 x u) (mem10 y v)))))))

(declare-fun t2tb2299 ((set (set (tuple21 (tuple21 c d) (set (tuple21 b
  c)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 c d) (set (tuple21 b c))))))) (sort
  (set1 (set1 (tuple2 (tuple2 c1 d1) (set1 (tuple2 b1 c1))))) (t2tb2299 x))))

(declare-fun tb2t2299 (uni) (set (set (tuple21 (tuple21 c d) (set (tuple21 b
  c))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 c d) (set (tuple21 b c)))))))
  (! (= (tb2t2299 (t2tb2299 i)) i) :pattern ((t2tb2299 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 c1 d1) (set1 (tuple2 b1 c1))))) j)
     (= (t2tb2299 (tb2t2299 j)) j)) :pattern ((t2tb2299 (tb2t2299 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 c d))) (v (set (set (tuple21 b c))))
  (r (set (tuple21 (tuple21 c d) (set (tuple21 b c))))))
  (= (mem (set1 (tuple2 (tuple2 c1 d1) (set1 (tuple2 b1 c1)))) (t2tb2236 r)
  (relation (set1 (tuple2 b1 c1)) (tuple2 c1 d1) (t2tb689 u) (t2tb130 v)))
  (forall ((x (tuple21 c d)) (y (set (tuple21 b c))))
  (=> (mem (tuple2 (tuple2 c1 d1) (set1 (tuple2 b1 c1)))
  (Tuple2 (tuple2 c1 d1) (set1 (tuple2 b1 c1)) (t2tb693 x) (t2tb131 y))
  (t2tb2236 r)) (and (mem21 x u) (mem9 y v)))))))

(declare-fun t2tb2300 ((set (set (tuple21 (tuple21 c d) (tuple21 b
  c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 c d) (tuple21 b c)))))) (sort
  (set1 (set1 (tuple2 (tuple2 c1 d1) (tuple2 b1 c1)))) (t2tb2300 x))))

(declare-fun tb2t2300 (uni) (set (set (tuple21 (tuple21 c d) (tuple21 b
  c)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 c d) (tuple21 b c))))))
  (! (= (tb2t2300 (t2tb2300 i)) i) :pattern ((t2tb2300 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 c1 d1) (tuple2 b1 c1)))) j)
     (= (t2tb2300 (tb2t2300 j)) j)) :pattern ((t2tb2300 (tb2t2300 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 c d))) (v (set (tuple21 b c)))
  (r (set (tuple21 (tuple21 c d) (tuple21 b c)))))
  (= (mem (set1 (tuple2 (tuple2 c1 d1) (tuple2 b1 c1))) (t2tb2239 r)
  (relation (tuple2 b1 c1) (tuple2 c1 d1) (t2tb689 u) (t2tb131 v)))
  (forall ((x (tuple21 c d)) (y (tuple21 b c)))
  (=> (mem (tuple2 (tuple2 c1 d1) (tuple2 b1 c1))
  (Tuple2 (tuple2 c1 d1) (tuple2 b1 c1) (t2tb693 x) (t2tb134 y))
  (t2tb2239 r)) (and (mem21 x u) (mem8 y v)))))))

(declare-fun t2tb964 ((set (set (tuple21 (tuple21 c d) c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 c d) c))))) (sort
  (set1 (set1 (tuple2 (tuple2 c1 d1) c1))) (t2tb964 x))))

(declare-fun tb2t964 (uni) (set (set (tuple21 (tuple21 c d) c))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 c d) c)))))
  (! (= (tb2t964 (t2tb964 i)) i) :pattern ((t2tb964 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 c1 d1) c1))) j)
     (= (t2tb964 (tb2t964 j)) j)) :pattern ((t2tb964 (tb2t964 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 c d))) (v (set c)) (r (set (tuple21 (tuple21 c d)
  c))))
  (= (mem (set1 (tuple2 (tuple2 c1 d1) c1)) (t2tb805 r)
  (relation c1 (tuple2 c1 d1) (t2tb689 u) (t2tb132 v)))
  (forall ((x (tuple21 c d)) (y c))
  (=> (mem (tuple2 (tuple2 c1 d1) c1)
  (Tuple2 (tuple2 c1 d1) c1 (t2tb693 x) (t2tb135 y)) (t2tb805 r))
  (and (mem21 x u) (mem7 y v)))))))

(declare-fun t2tb965 ((set (set (tuple21 (tuple21 c d) (set (tuple21 a
  b)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 c d) (set (tuple21 a b))))))) (sort
  (set1 (set1 (tuple2 (tuple2 c1 d1) (set1 (tuple2 a1 b1))))) (t2tb965 x))))

(declare-fun tb2t965 (uni) (set (set (tuple21 (tuple21 c d) (set (tuple21 a
  b))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 c d) (set (tuple21 a b)))))))
  (! (= (tb2t965 (t2tb965 i)) i) :pattern ((t2tb965 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 c1 d1) (set1 (tuple2 a1 b1))))) j)
     (= (t2tb965 (tb2t965 j)) j)) :pattern ((t2tb965 (tb2t965 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 c d))) (v (set (set (tuple21 a b))))
  (r (set (tuple21 (tuple21 c d) (set (tuple21 a b))))))
  (= (mem (set1 (tuple2 (tuple2 c1 d1) (set1 (tuple2 a1 b1)))) (t2tb807 r)
  (relation (set1 (tuple2 a1 b1)) (tuple2 c1 d1) (t2tb689 u) (t2tb10 v)))
  (forall ((x (tuple21 c d)) (y (set (tuple21 a b))))
  (=> (mem (tuple2 (tuple2 c1 d1) (set1 (tuple2 a1 b1)))
  (Tuple2 (tuple2 c1 d1) (set1 (tuple2 a1 b1)) (t2tb693 x) (t2tb11 y))
  (t2tb807 r)) (and (mem21 x u) (mem4 y v)))))))

(declare-fun t2tb966 ((set (set (tuple21 (tuple21 c d) (tuple21 a b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 c d) (tuple21 a b)))))) (sort
  (set1 (set1 (tuple2 (tuple2 c1 d1) (tuple2 a1 b1)))) (t2tb966 x))))

(declare-fun tb2t966 (uni) (set (set (tuple21 (tuple21 c d) (tuple21 a b)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 c d) (tuple21 a b))))))
  (! (= (tb2t966 (t2tb966 i)) i) :pattern ((t2tb966 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 c1 d1) (tuple2 a1 b1)))) j)
     (= (t2tb966 (tb2t966 j)) j)) :pattern ((t2tb966 (tb2t966 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 c d))) (v (set (tuple21 a b)))
  (r (set (tuple21 (tuple21 c d) (tuple21 a b)))))
  (= (mem (set1 (tuple2 (tuple2 c1 d1) (tuple2 a1 b1))) (t2tb809 r)
  (relation (tuple2 a1 b1) (tuple2 c1 d1) (t2tb689 u) (t2tb11 v)))
  (forall ((x (tuple21 c d)) (y (tuple21 a b)))
  (=> (mem (tuple2 (tuple2 c1 d1) (tuple2 a1 b1))
  (Tuple2 (tuple2 c1 d1) (tuple2 a1 b1) (t2tb693 x) (t2tb13 y)) (t2tb809 r))
  (and (mem21 x u) (mem3 y v)))))))

(declare-fun t2tb967 ((set (set (tuple21 (tuple21 c d) b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 c d) b))))) (sort
  (set1 (set1 (tuple2 (tuple2 c1 d1) b1))) (t2tb967 x))))

(declare-fun tb2t967 (uni) (set (set (tuple21 (tuple21 c d) b))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 c d) b)))))
  (! (= (tb2t967 (t2tb967 i)) i) :pattern ((t2tb967 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 c1 d1) b1))) j)
     (= (t2tb967 (tb2t967 j)) j)) :pattern ((t2tb967 (tb2t967 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 c d))) (v (set b)) (r (set (tuple21 (tuple21 c d)
  b))))
  (= (mem (set1 (tuple2 (tuple2 c1 d1) b1)) (t2tb811 r)
  (relation b1 (tuple2 c1 d1) (t2tb689 u) (t2tb12 v)))
  (forall ((x (tuple21 c d)) (y b))
  (=> (mem (tuple2 (tuple2 c1 d1) b1)
  (Tuple2 (tuple2 c1 d1) b1 (t2tb693 x) (t2tb14 y)) (t2tb811 r))
  (and (mem21 x u) (mem2 y v)))))))

(declare-fun t2tb968 ((set (set (tuple21 (tuple21 c d) a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 c d) a))))) (sort
  (set1 (set1 (tuple2 (tuple2 c1 d1) a1))) (t2tb968 x))))

(declare-fun tb2t968 (uni) (set (set (tuple21 (tuple21 c d) a))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 c d) a)))))
  (! (= (tb2t968 (t2tb968 i)) i) :pattern ((t2tb968 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 c1 d1) a1))) j)
     (= (t2tb968 (tb2t968 j)) j)) :pattern ((t2tb968 (tb2t968 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 c d))) (v (set a)) (r (set (tuple21 (tuple21 c d)
  a))))
  (= (mem (set1 (tuple2 (tuple2 c1 d1) a1)) (t2tb813 r)
  (relation a1 (tuple2 c1 d1) (t2tb689 u) (t2tb1 v)))
  (forall ((x (tuple21 c d)) (y a))
  (=> (mem (tuple2 (tuple2 c1 d1) a1)
  (Tuple2 (tuple2 c1 d1) a1 (t2tb693 x) (t2tb2 y)) (t2tb813 r))
  (and (mem21 x u) (mem1 y v)))))))

;; mem_relation
  (assert
  (forall ((b2 ty))
  (forall ((u (set (tuple21 c d))) (v uni) (r uni))
  (and
  (=> (mem (set1 (tuple2 (tuple2 c1 d1) b2)) r
  (relation b2 (tuple2 c1 d1) (t2tb689 u) v))
  (forall ((x (tuple21 c d)) (y uni))
  (=> (mem (tuple2 (tuple2 c1 d1) b2)
  (Tuple2 (tuple2 c1 d1) b2 (t2tb693 x) y) r) (and (mem21 x u) (mem b2 y v)))))
  (=>
  (forall ((x (tuple21 c d)) (y uni))
  (=> (sort b2 y)
  (=> (mem (tuple2 (tuple2 c1 d1) b2)
  (Tuple2 (tuple2 c1 d1) b2 (t2tb693 x) y) r) (and (mem21 x u) (mem b2 y v)))))
  (mem (set1 (tuple2 (tuple2 c1 d1) b2)) r
  (relation b2 (tuple2 c1 d1) (t2tb689 u) v)))))))

(declare-fun t2tb2301 ((set (set (tuple21 d (tuple21 a d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 d (tuple21 a d)))))) (sort
  (set1 (set1 (tuple2 d1 (tuple2 a1 d1)))) (t2tb2301 x))))

(declare-fun tb2t2301 (uni) (set (set (tuple21 d (tuple21 a d)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 d (tuple21 a d))))))
  (! (= (tb2t2301 (t2tb2301 i)) i) :pattern ((t2tb2301 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 d1 (tuple2 a1 d1)))) j)
     (= (t2tb2301 (tb2t2301 j)) j)) :pattern ((t2tb2301 (tb2t2301 j))) )))

;; mem_relation
  (assert
  (forall ((u (set d)) (v (set (tuple21 a d))) (r (set (tuple21 d (tuple21 a
  d)))))
  (= (mem (set1 (tuple2 d1 (tuple2 a1 d1))) (t2tb2240 r)
  (relation (tuple2 a1 d1) d1 (t2tb690 u) (t2tb903 v)))
  (forall ((x d) (y (tuple21 a d)))
  (=> (mem (tuple2 d1 (tuple2 a1 d1))
  (Tuple2 d1 (tuple2 a1 d1) (t2tb694 x) (t2tb904 y)) (t2tb2240 r))
  (and (mem20 x u) (mem32 y v)))))))

(declare-fun t2tb2070 ((set (set (tuple21 d (tuple21 b d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 d (tuple21 b d)))))) (sort
  (set1 (set1 (tuple2 d1 (tuple2 b1 d1)))) (t2tb2070 x))))

(declare-fun tb2t2070 (uni) (set (set (tuple21 d (tuple21 b d)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 d (tuple21 b d))))))
  (! (= (tb2t2070 (t2tb2070 i)) i) :pattern ((t2tb2070 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 d1 (tuple2 b1 d1)))) j)
     (= (t2tb2070 (tb2t2070 j)) j)) :pattern ((t2tb2070 (tb2t2070 j))) )))

;; mem_relation
  (assert
  (forall ((u (set d)) (v (set (tuple21 b d))) (r (set (tuple21 d (tuple21 b
  d)))))
  (= (mem (set1 (tuple2 d1 (tuple2 b1 d1))) (t2tb2048 r)
  (relation (tuple2 b1 d1) d1 (t2tb690 u) (t2tb687 v)))
  (forall ((x d) (y (tuple21 b d)))
  (=> (mem (tuple2 d1 (tuple2 b1 d1))
  (Tuple2 d1 (tuple2 b1 d1) (t2tb694 x) (t2tb692 y)) (t2tb2048 r))
  (and (mem20 x u) (mem23 y v)))))))

(declare-fun t2tb972 ((set (set (tuple21 d (set (tuple21 c d)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 d (set (tuple21 c d))))))) (sort
  (set1 (set1 (tuple2 d1 (set1 (tuple2 c1 d1))))) (t2tb972 x))))

(declare-fun tb2t972 (uni) (set (set (tuple21 d (set (tuple21 c d))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 d (set (tuple21 c d)))))))
  (! (= (tb2t972 (t2tb972 i)) i) :pattern ((t2tb972 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 d1 (set1 (tuple2 c1 d1))))) j)
     (= (t2tb972 (tb2t972 j)) j)) :pattern ((t2tb972 (tb2t972 j))) )))

;; mem_relation
  (assert
  (forall ((u (set d)) (v (set (set (tuple21 c d)))) (r (set (tuple21 d
  (set (tuple21 c d))))))
  (= (mem (set1 (tuple2 d1 (set1 (tuple2 c1 d1)))) (t2tb821 r)
  (relation (set1 (tuple2 c1 d1)) d1 (t2tb690 u) (t2tb688 v)))
  (forall ((x d) (y (set (tuple21 c d))))
  (=> (mem (tuple2 d1 (set1 (tuple2 c1 d1)))
  (Tuple2 d1 (set1 (tuple2 c1 d1)) (t2tb694 x) (t2tb689 y)) (t2tb821 r))
  (and (mem20 x u) (mem22 y v)))))))

(declare-fun t2tb973 ((set (set (tuple21 d (tuple21 c d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 d (tuple21 c d)))))) (sort
  (set1 (set1 (tuple2 d1 (tuple2 c1 d1)))) (t2tb973 x))))

(declare-fun tb2t973 (uni) (set (set (tuple21 d (tuple21 c d)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 d (tuple21 c d))))))
  (! (= (tb2t973 (t2tb973 i)) i) :pattern ((t2tb973 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 d1 (tuple2 c1 d1)))) j)
     (= (t2tb973 (tb2t973 j)) j)) :pattern ((t2tb973 (tb2t973 j))) )))

;; mem_relation
  (assert
  (forall ((u (set d)) (v (set (tuple21 c d))) (r (set (tuple21 d (tuple21 c
  d)))))
  (= (mem (set1 (tuple2 d1 (tuple2 c1 d1))) (t2tb823 r)
  (relation (tuple2 c1 d1) d1 (t2tb690 u) (t2tb689 v)))
  (forall ((x d) (y (tuple21 c d)))
  (=> (mem (tuple2 d1 (tuple2 c1 d1))
  (Tuple2 d1 (tuple2 c1 d1) (t2tb694 x) (t2tb693 y)) (t2tb823 r))
  (and (mem20 x u) (mem21 y v)))))))

(declare-fun t2tb974 ((set (set (tuple21 d d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 d d))))) (sort (set1 (set1 (tuple2 d1 d1)))
  (t2tb974 x))))

(declare-fun tb2t974 (uni) (set (set (tuple21 d d))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 d d)))))
  (! (= (tb2t974 (t2tb974 i)) i) :pattern ((t2tb974 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 d1 d1))) j) (= (t2tb974 (tb2t974 j)) j)) :pattern (
  (t2tb974 (tb2t974 j))) )))

;; mem_relation
  (assert
  (forall ((u (set d)) (v (set d)) (r (set (tuple21 d d))))
  (= (mem (set1 (tuple2 d1 d1)) (t2tb825 r)
  (relation d1 d1 (t2tb690 u) (t2tb690 v)))
  (forall ((x d) (y d))
  (=> (mem (tuple2 d1 d1) (Tuple2 d1 d1 (t2tb694 x) (t2tb694 y)) (t2tb825 r))
  (and (mem20 x u) (mem20 y v)))))))

(declare-fun t2tb1930 ((set (set (tuple21 d (tuple21 a c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 d (tuple21 a c)))))) (sort
  (set1 (set1 (tuple2 d1 (tuple2 a1 c1)))) (t2tb1930 x))))

(declare-fun tb2t1930 (uni) (set (set (tuple21 d (tuple21 a c)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 d (tuple21 a c))))))
  (! (= (tb2t1930 (t2tb1930 i)) i) :pattern ((t2tb1930 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 d1 (tuple2 a1 c1)))) j)
     (= (t2tb1930 (tb2t1930 j)) j)) :pattern ((t2tb1930 (tb2t1930 j))) )))

;; mem_relation
  (assert
  (forall ((u (set d)) (v (set (tuple21 a c))) (r (set (tuple21 d (tuple21 a
  c)))))
  (= (mem (set1 (tuple2 d1 (tuple2 a1 c1))) (t2tb1920 r)
  (relation (tuple2 a1 c1) d1 (t2tb690 u) (t2tb129 v)))
  (forall ((x d) (y (tuple21 a c)))
  (=> (mem (tuple2 d1 (tuple2 a1 c1))
  (Tuple2 d1 (tuple2 a1 c1) (t2tb694 x) (t2tb133 y)) (t2tb1920 r))
  (and (mem20 x u) (mem10 y v)))))))

(declare-fun t2tb2302 ((set (set (tuple21 d (set (tuple21 b c)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 d (set (tuple21 b c))))))) (sort
  (set1 (set1 (tuple2 d1 (set1 (tuple2 b1 c1))))) (t2tb2302 x))))

(declare-fun tb2t2302 (uni) (set (set (tuple21 d (set (tuple21 b c))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 d (set (tuple21 b c)))))))
  (! (= (tb2t2302 (t2tb2302 i)) i) :pattern ((t2tb2302 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 d1 (set1 (tuple2 b1 c1))))) j)
     (= (t2tb2302 (tb2t2302 j)) j)) :pattern ((t2tb2302 (tb2t2302 j))) )))

;; mem_relation
  (assert
  (forall ((u (set d)) (v (set (set (tuple21 b c)))) (r (set (tuple21 d
  (set (tuple21 b c))))))
  (= (mem (set1 (tuple2 d1 (set1 (tuple2 b1 c1)))) (t2tb2242 r)
  (relation (set1 (tuple2 b1 c1)) d1 (t2tb690 u) (t2tb130 v)))
  (forall ((x d) (y (set (tuple21 b c))))
  (=> (mem (tuple2 d1 (set1 (tuple2 b1 c1)))
  (Tuple2 d1 (set1 (tuple2 b1 c1)) (t2tb694 x) (t2tb131 y)) (t2tb2242 r))
  (and (mem20 x u) (mem9 y v)))))))

(declare-fun t2tb2303 ((set (set (tuple21 d (tuple21 b c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 d (tuple21 b c)))))) (sort
  (set1 (set1 (tuple2 d1 (tuple2 b1 c1)))) (t2tb2303 x))))

(declare-fun tb2t2303 (uni) (set (set (tuple21 d (tuple21 b c)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 d (tuple21 b c))))))
  (! (= (tb2t2303 (t2tb2303 i)) i) :pattern ((t2tb2303 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 d1 (tuple2 b1 c1)))) j)
     (= (t2tb2303 (tb2t2303 j)) j)) :pattern ((t2tb2303 (tb2t2303 j))) )))

;; mem_relation
  (assert
  (forall ((u (set d)) (v (set (tuple21 b c))) (r (set (tuple21 d (tuple21 b
  c)))))
  (= (mem (set1 (tuple2 d1 (tuple2 b1 c1))) (t2tb2244 r)
  (relation (tuple2 b1 c1) d1 (t2tb690 u) (t2tb131 v)))
  (forall ((x d) (y (tuple21 b c)))
  (=> (mem (tuple2 d1 (tuple2 b1 c1))
  (Tuple2 d1 (tuple2 b1 c1) (t2tb694 x) (t2tb134 y)) (t2tb2244 r))
  (and (mem20 x u) (mem8 y v)))))))

(declare-fun t2tb976 ((set (set (tuple21 d c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 d c))))) (sort (set1 (set1 (tuple2 d1 c1)))
  (t2tb976 x))))

(declare-fun tb2t976 (uni) (set (set (tuple21 d c))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 d c)))))
  (! (= (tb2t976 (t2tb976 i)) i) :pattern ((t2tb976 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 d1 c1))) j) (= (t2tb976 (tb2t976 j)) j)) :pattern (
  (t2tb976 (tb2t976 j))) )))

;; mem_relation
  (assert
  (forall ((u (set d)) (v (set c)) (r (set (tuple21 d c))))
  (= (mem (set1 (tuple2 d1 c1)) (t2tb829 r)
  (relation c1 d1 (t2tb690 u) (t2tb132 v)))
  (forall ((x d) (y c))
  (=> (mem (tuple2 d1 c1) (Tuple2 d1 c1 (t2tb694 x) (t2tb135 y)) (t2tb829 r))
  (and (mem20 x u) (mem7 y v)))))))

(declare-fun t2tb977 ((set (set (tuple21 d (set (tuple21 a b)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 d (set (tuple21 a b))))))) (sort
  (set1 (set1 (tuple2 d1 (set1 (tuple2 a1 b1))))) (t2tb977 x))))

(declare-fun tb2t977 (uni) (set (set (tuple21 d (set (tuple21 a b))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 d (set (tuple21 a b)))))))
  (! (= (tb2t977 (t2tb977 i)) i) :pattern ((t2tb977 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 d1 (set1 (tuple2 a1 b1))))) j)
     (= (t2tb977 (tb2t977 j)) j)) :pattern ((t2tb977 (tb2t977 j))) )))

;; mem_relation
  (assert
  (forall ((u (set d)) (v (set (set (tuple21 a b)))) (r (set (tuple21 d
  (set (tuple21 a b))))))
  (= (mem (set1 (tuple2 d1 (set1 (tuple2 a1 b1)))) (t2tb831 r)
  (relation (set1 (tuple2 a1 b1)) d1 (t2tb690 u) (t2tb10 v)))
  (forall ((x d) (y (set (tuple21 a b))))
  (=> (mem (tuple2 d1 (set1 (tuple2 a1 b1)))
  (Tuple2 d1 (set1 (tuple2 a1 b1)) (t2tb694 x) (t2tb11 y)) (t2tb831 r))
  (and (mem20 x u) (mem4 y v)))))))

(declare-fun t2tb978 ((set (set (tuple21 d (tuple21 a b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 d (tuple21 a b)))))) (sort
  (set1 (set1 (tuple2 d1 (tuple2 a1 b1)))) (t2tb978 x))))

(declare-fun tb2t978 (uni) (set (set (tuple21 d (tuple21 a b)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 d (tuple21 a b))))))
  (! (= (tb2t978 (t2tb978 i)) i) :pattern ((t2tb978 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 d1 (tuple2 a1 b1)))) j)
     (= (t2tb978 (tb2t978 j)) j)) :pattern ((t2tb978 (tb2t978 j))) )))

;; mem_relation
  (assert
  (forall ((u (set d)) (v (set (tuple21 a b))) (r (set (tuple21 d (tuple21 a
  b)))))
  (= (mem (set1 (tuple2 d1 (tuple2 a1 b1))) (t2tb833 r)
  (relation (tuple2 a1 b1) d1 (t2tb690 u) (t2tb11 v)))
  (forall ((x d) (y (tuple21 a b)))
  (=> (mem (tuple2 d1 (tuple2 a1 b1))
  (Tuple2 d1 (tuple2 a1 b1) (t2tb694 x) (t2tb13 y)) (t2tb833 r))
  (and (mem20 x u) (mem3 y v)))))))

(declare-fun t2tb979 ((set (set (tuple21 d b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 d b))))) (sort (set1 (set1 (tuple2 d1 b1)))
  (t2tb979 x))))

(declare-fun tb2t979 (uni) (set (set (tuple21 d b))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 d b)))))
  (! (= (tb2t979 (t2tb979 i)) i) :pattern ((t2tb979 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 d1 b1))) j) (= (t2tb979 (tb2t979 j)) j)) :pattern (
  (t2tb979 (tb2t979 j))) )))

;; mem_relation
  (assert
  (forall ((u (set d)) (v (set b)) (r (set (tuple21 d b))))
  (= (mem (set1 (tuple2 d1 b1)) (t2tb835 r)
  (relation b1 d1 (t2tb690 u) (t2tb12 v)))
  (forall ((x d) (y b))
  (=> (mem (tuple2 d1 b1) (Tuple2 d1 b1 (t2tb694 x) (t2tb14 y)) (t2tb835 r))
  (and (mem20 x u) (mem2 y v)))))))

(declare-fun t2tb980 ((set (set (tuple21 d a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 d a))))) (sort (set1 (set1 (tuple2 d1 a1)))
  (t2tb980 x))))

(declare-fun tb2t980 (uni) (set (set (tuple21 d a))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 d a)))))
  (! (= (tb2t980 (t2tb980 i)) i) :pattern ((t2tb980 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 d1 a1))) j) (= (t2tb980 (tb2t980 j)) j)) :pattern (
  (t2tb980 (tb2t980 j))) )))

;; mem_relation
  (assert
  (forall ((u (set d)) (v (set a)) (r (set (tuple21 d a))))
  (= (mem (set1 (tuple2 d1 a1)) (t2tb837 r)
  (relation a1 d1 (t2tb690 u) (t2tb1 v)))
  (forall ((x d) (y a))
  (=> (mem (tuple2 d1 a1) (Tuple2 d1 a1 (t2tb694 x) (t2tb2 y)) (t2tb837 r))
  (and (mem20 x u) (mem1 y v)))))))

;; mem_relation
  (assert
  (forall ((b2 ty))
  (forall ((u (set d)) (v uni) (r uni))
  (and
  (=> (mem (set1 (tuple2 d1 b2)) r (relation b2 d1 (t2tb690 u) v))
  (forall ((x d) (y uni))
  (=> (mem (tuple2 d1 b2) (Tuple2 d1 b2 (t2tb694 x) y) r)
  (and (mem20 x u) (mem b2 y v)))))
  (=>
  (forall ((x d) (y uni))
  (=> (sort b2 y)
  (=> (mem (tuple2 d1 b2) (Tuple2 d1 b2 (t2tb694 x) y) r)
  (and (mem20 x u) (mem b2 y v))))) (mem (set1 (tuple2 d1 b2)) r
  (relation b2 d1 (t2tb690 u) v)))))))

(declare-fun t2tb2304 ((set (set (tuple21 (tuple21 a c) (tuple21 a
  d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a c) (tuple21 a d)))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 c1) (tuple2 a1 d1)))) (t2tb2304 x))))

(declare-fun tb2t2304 (uni) (set (set (tuple21 (tuple21 a c) (tuple21 a
  d)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a c) (tuple21 a d))))))
  (! (= (tb2t2304 (t2tb2304 i)) i) :pattern ((t2tb2304 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 c1) (tuple2 a1 d1)))) j)
     (= (t2tb2304 (tb2t2304 j)) j)) :pattern ((t2tb2304 (tb2t2304 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a c))) (v (set (tuple21 a d)))
  (r (set (tuple21 (tuple21 a c) (tuple21 a d)))))
  (= (mem (set1 (tuple2 (tuple2 a1 c1) (tuple2 a1 d1))) (t2tb2246 r)
  (relation (tuple2 a1 d1) (tuple2 a1 c1) (t2tb129 u) (t2tb903 v)))
  (forall ((x (tuple21 a c)) (y (tuple21 a d)))
  (=> (mem (tuple2 (tuple2 a1 c1) (tuple2 a1 d1))
  (Tuple2 (tuple2 a1 c1) (tuple2 a1 d1) (t2tb133 x) (t2tb904 y))
  (t2tb2246 r)) (and (mem10 x u) (mem32 y v)))))))

(declare-fun t2tb685 ((set (set (tuple21 (tuple21 a c) (tuple21 b d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a c) (tuple21 b d)))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))) (t2tb685 x))))

(declare-fun tb2t685 (uni) (set (set (tuple21 (tuple21 a c) (tuple21 b d)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a c) (tuple21 b d))))))
  (! (= (tb2t685 (t2tb685 i)) i) :pattern ((t2tb685 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))) j)
     (= (t2tb685 (tb2t685 j)) j)) :pattern ((t2tb685 (tb2t685 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a c))) (v (set (tuple21 b d)))
  (r (set (tuple21 (tuple21 a c) (tuple21 b d)))))
  (= (mem (set1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))) (t2tb686 r)
  (relation (tuple2 b1 d1) (tuple2 a1 c1) (t2tb129 u) (t2tb687 v)))
  (forall ((x (tuple21 a c)) (y (tuple21 b d)))
  (=> (mem (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))
  (Tuple2 (tuple2 a1 c1) (tuple2 b1 d1) (t2tb133 x) (t2tb692 y)) (t2tb686 r))
  (and (mem10 x u) (mem23 y v)))))))

(declare-fun t2tb1932 ((set (set (tuple21 (tuple21 a c) (set (tuple21 c
  d)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a c) (set (tuple21 c d))))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 c1) (set1 (tuple2 c1 d1))))) (t2tb1932 x))))

(declare-fun tb2t1932 (uni) (set (set (tuple21 (tuple21 a c) (set (tuple21 c
  d))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a c) (set (tuple21 c d)))))))
  (! (= (tb2t1932 (t2tb1932 i)) i) :pattern ((t2tb1932 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 c1) (set1 (tuple2 c1 d1))))) j)
     (= (t2tb1932 (tb2t1932 j)) j)) :pattern ((t2tb1932 (tb2t1932 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a c))) (v (set (set (tuple21 c d))))
  (r (set (tuple21 (tuple21 a c) (set (tuple21 c d))))))
  (= (mem (set1 (tuple2 (tuple2 a1 c1) (set1 (tuple2 c1 d1)))) (t2tb1923 r)
  (relation (set1 (tuple2 c1 d1)) (tuple2 a1 c1) (t2tb129 u) (t2tb688 v)))
  (forall ((x (tuple21 a c)) (y (set (tuple21 c d))))
  (=> (mem (tuple2 (tuple2 a1 c1) (set1 (tuple2 c1 d1)))
  (Tuple2 (tuple2 a1 c1) (set1 (tuple2 c1 d1)) (t2tb133 x) (t2tb689 y))
  (t2tb1923 r)) (and (mem10 x u) (mem22 y v)))))))

(declare-fun t2tb1933 ((set (set (tuple21 (tuple21 a c) (tuple21 c
  d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a c) (tuple21 c d)))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 c1) (tuple2 c1 d1)))) (t2tb1933 x))))

(declare-fun tb2t1933 (uni) (set (set (tuple21 (tuple21 a c) (tuple21 c
  d)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a c) (tuple21 c d))))))
  (! (= (tb2t1933 (t2tb1933 i)) i) :pattern ((t2tb1933 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 c1) (tuple2 c1 d1)))) j)
     (= (t2tb1933 (tb2t1933 j)) j)) :pattern ((t2tb1933 (tb2t1933 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a c))) (v (set (tuple21 c d)))
  (r (set (tuple21 (tuple21 a c) (tuple21 c d)))))
  (= (mem (set1 (tuple2 (tuple2 a1 c1) (tuple2 c1 d1))) (t2tb1925 r)
  (relation (tuple2 c1 d1) (tuple2 a1 c1) (t2tb129 u) (t2tb689 v)))
  (forall ((x (tuple21 a c)) (y (tuple21 c d)))
  (=> (mem (tuple2 (tuple2 a1 c1) (tuple2 c1 d1))
  (Tuple2 (tuple2 a1 c1) (tuple2 c1 d1) (t2tb133 x) (t2tb693 y))
  (t2tb1925 r)) (and (mem10 x u) (mem21 y v)))))))

(declare-fun t2tb1934 ((set (set (tuple21 (tuple21 a c) d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a c) d))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 c1) d1))) (t2tb1934 x))))

(declare-fun tb2t1934 (uni) (set (set (tuple21 (tuple21 a c) d))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a c) d)))))
  (! (= (tb2t1934 (t2tb1934 i)) i) :pattern ((t2tb1934 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 c1) d1))) j)
     (= (t2tb1934 (tb2t1934 j)) j)) :pattern ((t2tb1934 (tb2t1934 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a c))) (v (set d)) (r (set (tuple21 (tuple21 a c)
  d))))
  (= (mem (set1 (tuple2 (tuple2 a1 c1) d1)) (t2tb847 r)
  (relation d1 (tuple2 a1 c1) (t2tb129 u) (t2tb690 v)))
  (forall ((x (tuple21 a c)) (y d))
  (=> (mem (tuple2 (tuple2 a1 c1) d1)
  (Tuple2 (tuple2 a1 c1) d1 (t2tb133 x) (t2tb694 y)) (t2tb847 r))
  (and (mem10 x u) (mem20 y v)))))))

(declare-fun t2tb275 ((set (set (tuple21 (tuple21 a c) (tuple21 a c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a c) (tuple21 a c)))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 c1) (tuple2 a1 c1)))) (t2tb275 x))))

(declare-fun tb2t275 (uni) (set (set (tuple21 (tuple21 a c) (tuple21 a c)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a c) (tuple21 a c))))))
  (! (= (tb2t275 (t2tb275 i)) i) :pattern ((t2tb275 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 c1) (tuple2 a1 c1)))) j)
     (= (t2tb275 (tb2t275 j)) j)) :pattern ((t2tb275 (tb2t275 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a c))) (v (set (tuple21 a c)))
  (r (set (tuple21 (tuple21 a c) (tuple21 a c)))))
  (= (mem (set1 (tuple2 (tuple2 a1 c1) (tuple2 a1 c1))) (t2tb157 r)
  (relation (tuple2 a1 c1) (tuple2 a1 c1) (t2tb129 u) (t2tb129 v)))
  (forall ((x (tuple21 a c)) (y (tuple21 a c)))
  (=> (mem (tuple2 (tuple2 a1 c1) (tuple2 a1 c1))
  (Tuple2 (tuple2 a1 c1) (tuple2 a1 c1) (t2tb133 x) (t2tb133 y)) (t2tb157 r))
  (and (mem10 x u) (mem10 y v)))))))

(declare-fun t2tb1143 ((set (set (tuple21 (tuple21 a c) (set (tuple21 b
  c)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a c) (set (tuple21 b c))))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 c1) (set1 (tuple2 b1 c1))))) (t2tb1143 x))))

(declare-fun tb2t1143 (uni) (set (set (tuple21 (tuple21 a c) (set (tuple21 b
  c))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a c) (set (tuple21 b c)))))))
  (! (= (tb2t1143 (t2tb1143 i)) i) :pattern ((t2tb1143 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 c1) (set1 (tuple2 b1 c1))))) j)
     (= (t2tb1143 (tb2t1143 j)) j)) :pattern ((t2tb1143 (tb2t1143 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a c))) (v (set (set (tuple21 b c))))
  (r (set (tuple21 (tuple21 a c) (set (tuple21 b c))))))
  (= (mem (set1 (tuple2 (tuple2 a1 c1) (set1 (tuple2 b1 c1)))) (t2tb1089 r)
  (relation (set1 (tuple2 b1 c1)) (tuple2 a1 c1) (t2tb129 u) (t2tb130 v)))
  (forall ((x (tuple21 a c)) (y (set (tuple21 b c))))
  (=> (mem (tuple2 (tuple2 a1 c1) (set1 (tuple2 b1 c1)))
  (Tuple2 (tuple2 a1 c1) (set1 (tuple2 b1 c1)) (t2tb133 x) (t2tb131 y))
  (t2tb1089 r)) (and (mem10 x u) (mem9 y v)))))))

(declare-fun t2tb1144 ((set (set (tuple21 (tuple21 a c) (tuple21 b
  c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a c) (tuple21 b c)))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 c1) (tuple2 b1 c1)))) (t2tb1144 x))))

(declare-fun tb2t1144 (uni) (set (set (tuple21 (tuple21 a c) (tuple21 b
  c)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a c) (tuple21 b c))))))
  (! (= (tb2t1144 (t2tb1144 i)) i) :pattern ((t2tb1144 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 c1) (tuple2 b1 c1)))) j)
     (= (t2tb1144 (tb2t1144 j)) j)) :pattern ((t2tb1144 (tb2t1144 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a c))) (v (set (tuple21 b c)))
  (r (set (tuple21 (tuple21 a c) (tuple21 b c)))))
  (= (mem (set1 (tuple2 (tuple2 a1 c1) (tuple2 b1 c1))) (t2tb1091 r)
  (relation (tuple2 b1 c1) (tuple2 a1 c1) (t2tb129 u) (t2tb131 v)))
  (forall ((x (tuple21 a c)) (y (tuple21 b c)))
  (=> (mem (tuple2 (tuple2 a1 c1) (tuple2 b1 c1))
  (Tuple2 (tuple2 a1 c1) (tuple2 b1 c1) (t2tb133 x) (t2tb134 y))
  (t2tb1091 r)) (and (mem10 x u) (mem8 y v)))))))

(declare-fun t2tb278 ((set (set (tuple21 (tuple21 a c) c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a c) c))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 c1) c1))) (t2tb278 x))))

(declare-fun tb2t278 (uni) (set (set (tuple21 (tuple21 a c) c))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a c) c)))))
  (! (= (tb2t278 (t2tb278 i)) i) :pattern ((t2tb278 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 c1) c1))) j)
     (= (t2tb278 (tb2t278 j)) j)) :pattern ((t2tb278 (tb2t278 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a c))) (v (set c)) (r (set (tuple21 (tuple21 a c)
  c))))
  (= (mem (set1 (tuple2 (tuple2 a1 c1) c1)) (t2tb162 r)
  (relation c1 (tuple2 a1 c1) (t2tb129 u) (t2tb132 v)))
  (forall ((x (tuple21 a c)) (y c))
  (=> (mem (tuple2 (tuple2 a1 c1) c1)
  (Tuple2 (tuple2 a1 c1) c1 (t2tb133 x) (t2tb135 y)) (t2tb162 r))
  (and (mem10 x u) (mem7 y v)))))))

(declare-fun t2tb279 ((set (set (tuple21 (tuple21 a c) (set (tuple21 a
  b)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a c) (set (tuple21 a b))))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 c1) (set1 (tuple2 a1 b1))))) (t2tb279 x))))

(declare-fun tb2t279 (uni) (set (set (tuple21 (tuple21 a c) (set (tuple21 a
  b))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a c) (set (tuple21 a b)))))))
  (! (= (tb2t279 (t2tb279 i)) i) :pattern ((t2tb279 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 c1) (set1 (tuple2 a1 b1))))) j)
     (= (t2tb279 (tb2t279 j)) j)) :pattern ((t2tb279 (tb2t279 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a c))) (v (set (set (tuple21 a b))))
  (r (set (tuple21 (tuple21 a c) (set (tuple21 a b))))))
  (= (mem (set1 (tuple2 (tuple2 a1 c1) (set1 (tuple2 a1 b1)))) (t2tb164 r)
  (relation (set1 (tuple2 a1 b1)) (tuple2 a1 c1) (t2tb129 u) (t2tb10 v)))
  (forall ((x (tuple21 a c)) (y (set (tuple21 a b))))
  (=> (mem (tuple2 (tuple2 a1 c1) (set1 (tuple2 a1 b1)))
  (Tuple2 (tuple2 a1 c1) (set1 (tuple2 a1 b1)) (t2tb133 x) (t2tb11 y))
  (t2tb164 r)) (and (mem10 x u) (mem4 y v)))))))

(declare-fun t2tb280 ((set (set (tuple21 (tuple21 a c) (tuple21 a b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a c) (tuple21 a b)))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 c1) (tuple2 a1 b1)))) (t2tb280 x))))

(declare-fun tb2t280 (uni) (set (set (tuple21 (tuple21 a c) (tuple21 a b)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a c) (tuple21 a b))))))
  (! (= (tb2t280 (t2tb280 i)) i) :pattern ((t2tb280 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 c1) (tuple2 a1 b1)))) j)
     (= (t2tb280 (tb2t280 j)) j)) :pattern ((t2tb280 (tb2t280 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a c))) (v (set (tuple21 a b)))
  (r (set (tuple21 (tuple21 a c) (tuple21 a b)))))
  (= (mem (set1 (tuple2 (tuple2 a1 c1) (tuple2 a1 b1))) (t2tb166 r)
  (relation (tuple2 a1 b1) (tuple2 a1 c1) (t2tb129 u) (t2tb11 v)))
  (forall ((x (tuple21 a c)) (y (tuple21 a b)))
  (=> (mem (tuple2 (tuple2 a1 c1) (tuple2 a1 b1))
  (Tuple2 (tuple2 a1 c1) (tuple2 a1 b1) (t2tb133 x) (t2tb13 y)) (t2tb166 r))
  (and (mem10 x u) (mem3 y v)))))))

(declare-fun t2tb281 ((set (set (tuple21 (tuple21 a c) b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a c) b))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 c1) b1))) (t2tb281 x))))

(declare-fun tb2t281 (uni) (set (set (tuple21 (tuple21 a c) b))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a c) b)))))
  (! (= (tb2t281 (t2tb281 i)) i) :pattern ((t2tb281 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 c1) b1))) j)
     (= (t2tb281 (tb2t281 j)) j)) :pattern ((t2tb281 (tb2t281 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a c))) (v (set b)) (r (set (tuple21 (tuple21 a c)
  b))))
  (= (mem (set1 (tuple2 (tuple2 a1 c1) b1)) (t2tb168 r)
  (relation b1 (tuple2 a1 c1) (t2tb129 u) (t2tb12 v)))
  (forall ((x (tuple21 a c)) (y b))
  (=> (mem (tuple2 (tuple2 a1 c1) b1)
  (Tuple2 (tuple2 a1 c1) b1 (t2tb133 x) (t2tb14 y)) (t2tb168 r))
  (and (mem10 x u) (mem2 y v)))))))

(declare-fun t2tb282 ((set (set (tuple21 (tuple21 a c) a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a c) a))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 c1) a1))) (t2tb282 x))))

(declare-fun tb2t282 (uni) (set (set (tuple21 (tuple21 a c) a))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a c) a)))))
  (! (= (tb2t282 (t2tb282 i)) i) :pattern ((t2tb282 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 c1) a1))) j)
     (= (t2tb282 (tb2t282 j)) j)) :pattern ((t2tb282 (tb2t282 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a c))) (v (set a)) (r (set (tuple21 (tuple21 a c)
  a))))
  (= (mem (set1 (tuple2 (tuple2 a1 c1) a1)) (t2tb170 r)
  (relation a1 (tuple2 a1 c1) (t2tb129 u) (t2tb1 v)))
  (forall ((x (tuple21 a c)) (y a))
  (=> (mem (tuple2 (tuple2 a1 c1) a1)
  (Tuple2 (tuple2 a1 c1) a1 (t2tb133 x) (t2tb2 y)) (t2tb170 r))
  (and (mem10 x u) (mem1 y v)))))))

;; mem_relation
  (assert
  (forall ((b2 ty))
  (forall ((u (set (tuple21 a c))) (v uni) (r uni))
  (and
  (=> (mem (set1 (tuple2 (tuple2 a1 c1) b2)) r
  (relation b2 (tuple2 a1 c1) (t2tb129 u) v))
  (forall ((x (tuple21 a c)) (y uni))
  (=> (mem (tuple2 (tuple2 a1 c1) b2)
  (Tuple2 (tuple2 a1 c1) b2 (t2tb133 x) y) r) (and (mem10 x u) (mem b2 y v)))))
  (=>
  (forall ((x (tuple21 a c)) (y uni))
  (=> (sort b2 y)
  (=> (mem (tuple2 (tuple2 a1 c1) b2)
  (Tuple2 (tuple2 a1 c1) b2 (t2tb133 x) y) r) (and (mem10 x u) (mem b2 y v)))))
  (mem (set1 (tuple2 (tuple2 a1 c1) b2)) r
  (relation b2 (tuple2 a1 c1) (t2tb129 u) v)))))))

(declare-fun t2tb2305 ((set (set (tuple21 (set (tuple21 b c)) (tuple21 a
  d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 b c)) (tuple21 a d)))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 b1 c1)) (tuple2 a1 d1)))) (t2tb2305 x))))

(declare-fun tb2t2305 (uni) (set (set (tuple21 (set (tuple21 b c)) (tuple21 a
  d)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 b c)) (tuple21 a d))))))
  (! (= (tb2t2305 (t2tb2305 i)) i) :pattern ((t2tb2305 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 b1 c1)) (tuple2 a1 d1)))) j)
     (= (t2tb2305 (tb2t2305 j)) j)) :pattern ((t2tb2305 (tb2t2305 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 b c)))) (v (set (tuple21 a d)))
  (r (set (tuple21 (set (tuple21 b c)) (tuple21 a d)))))
  (= (mem (set1 (tuple2 (set1 (tuple2 b1 c1)) (tuple2 a1 d1))) (t2tb2248 r)
  (relation (tuple2 a1 d1) (set1 (tuple2 b1 c1)) (t2tb130 u) (t2tb903 v)))
  (forall ((x (set (tuple21 b c))) (y (tuple21 a d)))
  (=> (mem (tuple2 (set1 (tuple2 b1 c1)) (tuple2 a1 d1))
  (Tuple2 (set1 (tuple2 b1 c1)) (tuple2 a1 d1) (t2tb131 x) (t2tb904 y))
  (t2tb2248 r)) (and (mem9 x u) (mem32 y v)))))))

(declare-fun t2tb2306 ((set (set (tuple21 (set (tuple21 b c)) (tuple21 b
  d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 b c)) (tuple21 b d)))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 b1 c1)) (tuple2 b1 d1)))) (t2tb2306 x))))

(declare-fun tb2t2306 (uni) (set (set (tuple21 (set (tuple21 b c)) (tuple21 b
  d)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 b c)) (tuple21 b d))))))
  (! (= (tb2t2306 (t2tb2306 i)) i) :pattern ((t2tb2306 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 b1 c1)) (tuple2 b1 d1)))) j)
     (= (t2tb2306 (tb2t2306 j)) j)) :pattern ((t2tb2306 (tb2t2306 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 b c)))) (v (set (tuple21 b d)))
  (r (set (tuple21 (set (tuple21 b c)) (tuple21 b d)))))
  (= (mem (set1 (tuple2 (set1 (tuple2 b1 c1)) (tuple2 b1 d1))) (t2tb2250 r)
  (relation (tuple2 b1 d1) (set1 (tuple2 b1 c1)) (t2tb130 u) (t2tb687 v)))
  (forall ((x (set (tuple21 b c))) (y (tuple21 b d)))
  (=> (mem (tuple2 (set1 (tuple2 b1 c1)) (tuple2 b1 d1))
  (Tuple2 (set1 (tuple2 b1 c1)) (tuple2 b1 d1) (t2tb131 x) (t2tb692 y))
  (t2tb2250 r)) (and (mem9 x u) (mem23 y v)))))))

(declare-fun t2tb2307 ((set (set (tuple21 (set (tuple21 b c)) (set (tuple21 c
  d)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 b c)) (set (tuple21 c d)))))))
  (sort (set1 (set1 (tuple2 (set1 (tuple2 b1 c1)) (set1 (tuple2 c1 d1)))))
  (t2tb2307 x))))

(declare-fun tb2t2307 (uni) (set (set (tuple21 (set (tuple21 b c))
  (set (tuple21 c d))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 b c)) (set (tuple21 c d)))))))
  (! (= (tb2t2307 (t2tb2307 i)) i) :pattern ((t2tb2307 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (set1 (tuple2 b1 c1)) (set1 (tuple2 c1 d1))))) j)
     (= (t2tb2307 (tb2t2307 j)) j)) :pattern ((t2tb2307 (tb2t2307 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 b c)))) (v (set (set (tuple21 c d))))
  (r (set (tuple21 (set (tuple21 b c)) (set (tuple21 c d))))))
  (= (mem (set1 (tuple2 (set1 (tuple2 b1 c1)) (set1 (tuple2 c1 d1))))
  (t2tb2252 r)
  (relation (set1 (tuple2 c1 d1)) (set1 (tuple2 b1 c1)) (t2tb130 u)
  (t2tb688 v)))
  (forall ((x (set (tuple21 b c))) (y (set (tuple21 c d))))
  (=> (mem (tuple2 (set1 (tuple2 b1 c1)) (set1 (tuple2 c1 d1)))
  (Tuple2 (set1 (tuple2 b1 c1)) (set1 (tuple2 c1 d1)) (t2tb131 x)
  (t2tb689 y)) (t2tb2252 r)) (and (mem9 x u) (mem22 y v)))))))

(declare-fun t2tb2308 ((set (set (tuple21 (set (tuple21 b c)) (tuple21 c
  d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 b c)) (tuple21 c d)))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 b1 c1)) (tuple2 c1 d1)))) (t2tb2308 x))))

(declare-fun tb2t2308 (uni) (set (set (tuple21 (set (tuple21 b c)) (tuple21 c
  d)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 b c)) (tuple21 c d))))))
  (! (= (tb2t2308 (t2tb2308 i)) i) :pattern ((t2tb2308 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 b1 c1)) (tuple2 c1 d1)))) j)
     (= (t2tb2308 (tb2t2308 j)) j)) :pattern ((t2tb2308 (tb2t2308 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 b c)))) (v (set (tuple21 c d)))
  (r (set (tuple21 (set (tuple21 b c)) (tuple21 c d)))))
  (= (mem (set1 (tuple2 (set1 (tuple2 b1 c1)) (tuple2 c1 d1))) (t2tb2255 r)
  (relation (tuple2 c1 d1) (set1 (tuple2 b1 c1)) (t2tb130 u) (t2tb689 v)))
  (forall ((x (set (tuple21 b c))) (y (tuple21 c d)))
  (=> (mem (tuple2 (set1 (tuple2 b1 c1)) (tuple2 c1 d1))
  (Tuple2 (set1 (tuple2 b1 c1)) (tuple2 c1 d1) (t2tb131 x) (t2tb693 y))
  (t2tb2255 r)) (and (mem9 x u) (mem21 y v)))))))

(declare-fun t2tb2309 ((set (set (tuple21 (set (tuple21 b c)) d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 b c)) d))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 b1 c1)) d1))) (t2tb2309 x))))

(declare-fun tb2t2309 (uni) (set (set (tuple21 (set (tuple21 b c)) d))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 b c)) d)))))
  (! (= (tb2t2309 (t2tb2309 i)) i) :pattern ((t2tb2309 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 b1 c1)) d1))) j)
     (= (t2tb2309 (tb2t2309 j)) j)) :pattern ((t2tb2309 (tb2t2309 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 b c)))) (v (set d))
  (r (set (tuple21 (set (tuple21 b c)) d))))
  (= (mem (set1 (tuple2 (set1 (tuple2 b1 c1)) d1)) (t2tb2256 r)
  (relation d1 (set1 (tuple2 b1 c1)) (t2tb130 u) (t2tb690 v)))
  (forall ((x (set (tuple21 b c))) (y d))
  (=> (mem (tuple2 (set1 (tuple2 b1 c1)) d1)
  (Tuple2 (set1 (tuple2 b1 c1)) d1 (t2tb131 x) (t2tb694 y)) (t2tb2256 r))
  (and (mem9 x u) (mem20 y v)))))))

(declare-fun t2tb1145 ((set (set (tuple21 (set (tuple21 b c)) (tuple21 a
  c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 b c)) (tuple21 a c)))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 b1 c1)) (tuple2 a1 c1)))) (t2tb1145 x))))

(declare-fun tb2t1145 (uni) (set (set (tuple21 (set (tuple21 b c)) (tuple21 a
  c)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 b c)) (tuple21 a c))))))
  (! (= (tb2t1145 (t2tb1145 i)) i) :pattern ((t2tb1145 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 b1 c1)) (tuple2 a1 c1)))) j)
     (= (t2tb1145 (tb2t1145 j)) j)) :pattern ((t2tb1145 (tb2t1145 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 b c)))) (v (set (tuple21 a c)))
  (r (set (tuple21 (set (tuple21 b c)) (tuple21 a c)))))
  (= (mem (set1 (tuple2 (set1 (tuple2 b1 c1)) (tuple2 a1 c1))) (t2tb1094 r)
  (relation (tuple2 a1 c1) (set1 (tuple2 b1 c1)) (t2tb130 u) (t2tb129 v)))
  (forall ((x (set (tuple21 b c))) (y (tuple21 a c)))
  (=> (mem (tuple2 (set1 (tuple2 b1 c1)) (tuple2 a1 c1))
  (Tuple2 (set1 (tuple2 b1 c1)) (tuple2 a1 c1) (t2tb131 x) (t2tb133 y))
  (t2tb1094 r)) (and (mem9 x u) (mem10 y v)))))))

(declare-fun t2tb1146 ((set (set (tuple21 (set (tuple21 b c)) (set (tuple21 b
  c)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 b c)) (set (tuple21 b c)))))))
  (sort (set1 (set1 (tuple2 (set1 (tuple2 b1 c1)) (set1 (tuple2 b1 c1)))))
  (t2tb1146 x))))

(declare-fun tb2t1146 (uni) (set (set (tuple21 (set (tuple21 b c))
  (set (tuple21 b c))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 b c)) (set (tuple21 b c)))))))
  (! (= (tb2t1146 (t2tb1146 i)) i) :pattern ((t2tb1146 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (set1 (tuple2 b1 c1)) (set1 (tuple2 b1 c1))))) j)
     (= (t2tb1146 (tb2t1146 j)) j)) :pattern ((t2tb1146 (tb2t1146 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 b c)))) (v (set (set (tuple21 b c))))
  (r (set (tuple21 (set (tuple21 b c)) (set (tuple21 b c))))))
  (= (mem (set1 (tuple2 (set1 (tuple2 b1 c1)) (set1 (tuple2 b1 c1))))
  (t2tb1095 r)
  (relation (set1 (tuple2 b1 c1)) (set1 (tuple2 b1 c1)) (t2tb130 u)
  (t2tb130 v)))
  (forall ((x (set (tuple21 b c))) (y (set (tuple21 b c))))
  (=> (mem (tuple2 (set1 (tuple2 b1 c1)) (set1 (tuple2 b1 c1)))
  (Tuple2 (set1 (tuple2 b1 c1)) (set1 (tuple2 b1 c1)) (t2tb131 x)
  (t2tb131 y)) (t2tb1095 r)) (and (mem9 x u) (mem9 y v)))))))

(declare-fun t2tb1147 ((set (set (tuple21 (set (tuple21 b c)) (tuple21 b
  c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 b c)) (tuple21 b c)))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 b1 c1)) (tuple2 b1 c1)))) (t2tb1147 x))))

(declare-fun tb2t1147 (uni) (set (set (tuple21 (set (tuple21 b c)) (tuple21 b
  c)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 b c)) (tuple21 b c))))))
  (! (= (tb2t1147 (t2tb1147 i)) i) :pattern ((t2tb1147 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 b1 c1)) (tuple2 b1 c1)))) j)
     (= (t2tb1147 (tb2t1147 j)) j)) :pattern ((t2tb1147 (tb2t1147 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 b c)))) (v (set (tuple21 b c)))
  (r (set (tuple21 (set (tuple21 b c)) (tuple21 b c)))))
  (= (mem (set1 (tuple2 (set1 (tuple2 b1 c1)) (tuple2 b1 c1))) (t2tb1097 r)
  (relation (tuple2 b1 c1) (set1 (tuple2 b1 c1)) (t2tb130 u) (t2tb131 v)))
  (forall ((x (set (tuple21 b c))) (y (tuple21 b c)))
  (=> (mem (tuple2 (set1 (tuple2 b1 c1)) (tuple2 b1 c1))
  (Tuple2 (set1 (tuple2 b1 c1)) (tuple2 b1 c1) (t2tb131 x) (t2tb134 y))
  (t2tb1097 r)) (and (mem9 x u) (mem8 y v)))))))

(declare-fun t2tb1148 ((set (set (tuple21 (set (tuple21 b c)) c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 b c)) c))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 b1 c1)) c1))) (t2tb1148 x))))

(declare-fun tb2t1148 (uni) (set (set (tuple21 (set (tuple21 b c)) c))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 b c)) c)))))
  (! (= (tb2t1148 (t2tb1148 i)) i) :pattern ((t2tb1148 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 b1 c1)) c1))) j)
     (= (t2tb1148 (tb2t1148 j)) j)) :pattern ((t2tb1148 (tb2t1148 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 b c)))) (v (set c))
  (r (set (tuple21 (set (tuple21 b c)) c))))
  (= (mem (set1 (tuple2 (set1 (tuple2 b1 c1)) c1)) (t2tb1099 r)
  (relation c1 (set1 (tuple2 b1 c1)) (t2tb130 u) (t2tb132 v)))
  (forall ((x (set (tuple21 b c))) (y c))
  (=> (mem (tuple2 (set1 (tuple2 b1 c1)) c1)
  (Tuple2 (set1 (tuple2 b1 c1)) c1 (t2tb131 x) (t2tb135 y)) (t2tb1099 r))
  (and (mem9 x u) (mem7 y v)))))))

(declare-fun t2tb1149 ((set (set (tuple21 (set (tuple21 b c)) (set (tuple21 a
  b)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 b c)) (set (tuple21 a b)))))))
  (sort (set1 (set1 (tuple2 (set1 (tuple2 b1 c1)) (set1 (tuple2 a1 b1)))))
  (t2tb1149 x))))

(declare-fun tb2t1149 (uni) (set (set (tuple21 (set (tuple21 b c))
  (set (tuple21 a b))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 b c)) (set (tuple21 a b)))))))
  (! (= (tb2t1149 (t2tb1149 i)) i) :pattern ((t2tb1149 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (set1 (tuple2 b1 c1)) (set1 (tuple2 a1 b1))))) j)
     (= (t2tb1149 (tb2t1149 j)) j)) :pattern ((t2tb1149 (tb2t1149 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 b c)))) (v (set (set (tuple21 a b))))
  (r (set (tuple21 (set (tuple21 b c)) (set (tuple21 a b))))))
  (= (mem (set1 (tuple2 (set1 (tuple2 b1 c1)) (set1 (tuple2 a1 b1))))
  (t2tb1101 r)
  (relation (set1 (tuple2 a1 b1)) (set1 (tuple2 b1 c1)) (t2tb130 u)
  (t2tb10 v)))
  (forall ((x (set (tuple21 b c))) (y (set (tuple21 a b))))
  (=> (mem (tuple2 (set1 (tuple2 b1 c1)) (set1 (tuple2 a1 b1)))
  (Tuple2 (set1 (tuple2 b1 c1)) (set1 (tuple2 a1 b1)) (t2tb131 x) (t2tb11 y))
  (t2tb1101 r)) (and (mem9 x u) (mem4 y v)))))))

(declare-fun t2tb1150 ((set (set (tuple21 (set (tuple21 b c)) (tuple21 a
  b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 b c)) (tuple21 a b)))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 b1 c1)) (tuple2 a1 b1)))) (t2tb1150 x))))

(declare-fun tb2t1150 (uni) (set (set (tuple21 (set (tuple21 b c)) (tuple21 a
  b)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 b c)) (tuple21 a b))))))
  (! (= (tb2t1150 (t2tb1150 i)) i) :pattern ((t2tb1150 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 b1 c1)) (tuple2 a1 b1)))) j)
     (= (t2tb1150 (tb2t1150 j)) j)) :pattern ((t2tb1150 (tb2t1150 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 b c)))) (v (set (tuple21 a b)))
  (r (set (tuple21 (set (tuple21 b c)) (tuple21 a b)))))
  (= (mem (set1 (tuple2 (set1 (tuple2 b1 c1)) (tuple2 a1 b1))) (t2tb1103 r)
  (relation (tuple2 a1 b1) (set1 (tuple2 b1 c1)) (t2tb130 u) (t2tb11 v)))
  (forall ((x (set (tuple21 b c))) (y (tuple21 a b)))
  (=> (mem (tuple2 (set1 (tuple2 b1 c1)) (tuple2 a1 b1))
  (Tuple2 (set1 (tuple2 b1 c1)) (tuple2 a1 b1) (t2tb131 x) (t2tb13 y))
  (t2tb1103 r)) (and (mem9 x u) (mem3 y v)))))))

(declare-fun t2tb1151 ((set (set (tuple21 (set (tuple21 b c)) b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 b c)) b))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 b1 c1)) b1))) (t2tb1151 x))))

(declare-fun tb2t1151 (uni) (set (set (tuple21 (set (tuple21 b c)) b))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 b c)) b)))))
  (! (= (tb2t1151 (t2tb1151 i)) i) :pattern ((t2tb1151 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 b1 c1)) b1))) j)
     (= (t2tb1151 (tb2t1151 j)) j)) :pattern ((t2tb1151 (tb2t1151 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 b c)))) (v (set b))
  (r (set (tuple21 (set (tuple21 b c)) b))))
  (= (mem (set1 (tuple2 (set1 (tuple2 b1 c1)) b1)) (t2tb1105 r)
  (relation b1 (set1 (tuple2 b1 c1)) (t2tb130 u) (t2tb12 v)))
  (forall ((x (set (tuple21 b c))) (y b))
  (=> (mem (tuple2 (set1 (tuple2 b1 c1)) b1)
  (Tuple2 (set1 (tuple2 b1 c1)) b1 (t2tb131 x) (t2tb14 y)) (t2tb1105 r))
  (and (mem9 x u) (mem2 y v)))))))

(declare-fun t2tb1152 ((set (set (tuple21 (set (tuple21 b c)) a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 b c)) a))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 b1 c1)) a1))) (t2tb1152 x))))

(declare-fun tb2t1152 (uni) (set (set (tuple21 (set (tuple21 b c)) a))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 b c)) a)))))
  (! (= (tb2t1152 (t2tb1152 i)) i) :pattern ((t2tb1152 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 b1 c1)) a1))) j)
     (= (t2tb1152 (tb2t1152 j)) j)) :pattern ((t2tb1152 (tb2t1152 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 b c)))) (v (set a))
  (r (set (tuple21 (set (tuple21 b c)) a))))
  (= (mem (set1 (tuple2 (set1 (tuple2 b1 c1)) a1)) (t2tb1107 r)
  (relation a1 (set1 (tuple2 b1 c1)) (t2tb130 u) (t2tb1 v)))
  (forall ((x (set (tuple21 b c))) (y a))
  (=> (mem (tuple2 (set1 (tuple2 b1 c1)) a1)
  (Tuple2 (set1 (tuple2 b1 c1)) a1 (t2tb131 x) (t2tb2 y)) (t2tb1107 r))
  (and (mem9 x u) (mem1 y v)))))))

;; mem_relation
  (assert
  (forall ((b2 ty))
  (forall ((u (set (set (tuple21 b c)))) (v uni) (r uni))
  (and
  (=> (mem (set1 (tuple2 (set1 (tuple2 b1 c1)) b2)) r
  (relation b2 (set1 (tuple2 b1 c1)) (t2tb130 u) v))
  (forall ((x (set (tuple21 b c))) (y uni))
  (=> (mem (tuple2 (set1 (tuple2 b1 c1)) b2)
  (Tuple2 (set1 (tuple2 b1 c1)) b2 (t2tb131 x) y) r)
  (and (mem9 x u) (mem b2 y v)))))
  (=>
  (forall ((x (set (tuple21 b c))) (y uni))
  (=> (sort b2 y)
  (=> (mem (tuple2 (set1 (tuple2 b1 c1)) b2)
  (Tuple2 (set1 (tuple2 b1 c1)) b2 (t2tb131 x) y) r)
  (and (mem9 x u) (mem b2 y v))))) (mem
  (set1 (tuple2 (set1 (tuple2 b1 c1)) b2)) r
  (relation b2 (set1 (tuple2 b1 c1)) (t2tb130 u) v)))))))

(declare-fun t2tb2310 ((set (set (tuple21 (tuple21 b c) (tuple21 a
  d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 b c) (tuple21 a d)))))) (sort
  (set1 (set1 (tuple2 (tuple2 b1 c1) (tuple2 a1 d1)))) (t2tb2310 x))))

(declare-fun tb2t2310 (uni) (set (set (tuple21 (tuple21 b c) (tuple21 a
  d)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 b c) (tuple21 a d))))))
  (! (= (tb2t2310 (t2tb2310 i)) i) :pattern ((t2tb2310 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 b1 c1) (tuple2 a1 d1)))) j)
     (= (t2tb2310 (tb2t2310 j)) j)) :pattern ((t2tb2310 (tb2t2310 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 b c))) (v (set (tuple21 a d)))
  (r (set (tuple21 (tuple21 b c) (tuple21 a d)))))
  (= (mem (set1 (tuple2 (tuple2 b1 c1) (tuple2 a1 d1))) (t2tb2258 r)
  (relation (tuple2 a1 d1) (tuple2 b1 c1) (t2tb131 u) (t2tb903 v)))
  (forall ((x (tuple21 b c)) (y (tuple21 a d)))
  (=> (mem (tuple2 (tuple2 b1 c1) (tuple2 a1 d1))
  (Tuple2 (tuple2 b1 c1) (tuple2 a1 d1) (t2tb134 x) (t2tb904 y))
  (t2tb2258 r)) (and (mem8 x u) (mem32 y v)))))))

(declare-fun t2tb2311 ((set (set (tuple21 (tuple21 b c) (tuple21 b
  d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 b c) (tuple21 b d)))))) (sort
  (set1 (set1 (tuple2 (tuple2 b1 c1) (tuple2 b1 d1)))) (t2tb2311 x))))

(declare-fun tb2t2311 (uni) (set (set (tuple21 (tuple21 b c) (tuple21 b
  d)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 b c) (tuple21 b d))))))
  (! (= (tb2t2311 (t2tb2311 i)) i) :pattern ((t2tb2311 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 b1 c1) (tuple2 b1 d1)))) j)
     (= (t2tb2311 (tb2t2311 j)) j)) :pattern ((t2tb2311 (tb2t2311 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 b c))) (v (set (tuple21 b d)))
  (r (set (tuple21 (tuple21 b c) (tuple21 b d)))))
  (= (mem (set1 (tuple2 (tuple2 b1 c1) (tuple2 b1 d1))) (t2tb2260 r)
  (relation (tuple2 b1 d1) (tuple2 b1 c1) (t2tb131 u) (t2tb687 v)))
  (forall ((x (tuple21 b c)) (y (tuple21 b d)))
  (=> (mem (tuple2 (tuple2 b1 c1) (tuple2 b1 d1))
  (Tuple2 (tuple2 b1 c1) (tuple2 b1 d1) (t2tb134 x) (t2tb692 y))
  (t2tb2260 r)) (and (mem8 x u) (mem23 y v)))))))

(declare-fun t2tb2312 ((set (set (tuple21 (tuple21 b c) (set (tuple21 c
  d)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 b c) (set (tuple21 c d))))))) (sort
  (set1 (set1 (tuple2 (tuple2 b1 c1) (set1 (tuple2 c1 d1))))) (t2tb2312 x))))

(declare-fun tb2t2312 (uni) (set (set (tuple21 (tuple21 b c) (set (tuple21 c
  d))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 b c) (set (tuple21 c d)))))))
  (! (= (tb2t2312 (t2tb2312 i)) i) :pattern ((t2tb2312 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 b1 c1) (set1 (tuple2 c1 d1))))) j)
     (= (t2tb2312 (tb2t2312 j)) j)) :pattern ((t2tb2312 (tb2t2312 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 b c))) (v (set (set (tuple21 c d))))
  (r (set (tuple21 (tuple21 b c) (set (tuple21 c d))))))
  (= (mem (set1 (tuple2 (tuple2 b1 c1) (set1 (tuple2 c1 d1)))) (t2tb2262 r)
  (relation (set1 (tuple2 c1 d1)) (tuple2 b1 c1) (t2tb131 u) (t2tb688 v)))
  (forall ((x (tuple21 b c)) (y (set (tuple21 c d))))
  (=> (mem (tuple2 (tuple2 b1 c1) (set1 (tuple2 c1 d1)))
  (Tuple2 (tuple2 b1 c1) (set1 (tuple2 c1 d1)) (t2tb134 x) (t2tb689 y))
  (t2tb2262 r)) (and (mem8 x u) (mem22 y v)))))))

(declare-fun t2tb2313 ((set (set (tuple21 (tuple21 b c) (tuple21 c
  d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 b c) (tuple21 c d)))))) (sort
  (set1 (set1 (tuple2 (tuple2 b1 c1) (tuple2 c1 d1)))) (t2tb2313 x))))

(declare-fun tb2t2313 (uni) (set (set (tuple21 (tuple21 b c) (tuple21 c
  d)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 b c) (tuple21 c d))))))
  (! (= (tb2t2313 (t2tb2313 i)) i) :pattern ((t2tb2313 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 b1 c1) (tuple2 c1 d1)))) j)
     (= (t2tb2313 (tb2t2313 j)) j)) :pattern ((t2tb2313 (tb2t2313 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 b c))) (v (set (tuple21 c d)))
  (r (set (tuple21 (tuple21 b c) (tuple21 c d)))))
  (= (mem (set1 (tuple2 (tuple2 b1 c1) (tuple2 c1 d1))) (t2tb2264 r)
  (relation (tuple2 c1 d1) (tuple2 b1 c1) (t2tb131 u) (t2tb689 v)))
  (forall ((x (tuple21 b c)) (y (tuple21 c d)))
  (=> (mem (tuple2 (tuple2 b1 c1) (tuple2 c1 d1))
  (Tuple2 (tuple2 b1 c1) (tuple2 c1 d1) (t2tb134 x) (t2tb693 y))
  (t2tb2264 r)) (and (mem8 x u) (mem21 y v)))))))

(declare-fun t2tb2314 ((set (set (tuple21 (tuple21 b c) d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 b c) d))))) (sort
  (set1 (set1 (tuple2 (tuple2 b1 c1) d1))) (t2tb2314 x))))

(declare-fun tb2t2314 (uni) (set (set (tuple21 (tuple21 b c) d))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 b c) d)))))
  (! (= (tb2t2314 (t2tb2314 i)) i) :pattern ((t2tb2314 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 b1 c1) d1))) j)
     (= (t2tb2314 (tb2t2314 j)) j)) :pattern ((t2tb2314 (tb2t2314 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 b c))) (v (set d)) (r (set (tuple21 (tuple21 b c)
  d))))
  (= (mem (set1 (tuple2 (tuple2 b1 c1) d1)) (t2tb2266 r)
  (relation d1 (tuple2 b1 c1) (t2tb131 u) (t2tb690 v)))
  (forall ((x (tuple21 b c)) (y d))
  (=> (mem (tuple2 (tuple2 b1 c1) d1)
  (Tuple2 (tuple2 b1 c1) d1 (t2tb134 x) (t2tb694 y)) (t2tb2266 r))
  (and (mem8 x u) (mem20 y v)))))))

(declare-fun t2tb1153 ((set (set (tuple21 (tuple21 b c) (tuple21 a
  c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 b c) (tuple21 a c)))))) (sort
  (set1 (set1 (tuple2 (tuple2 b1 c1) (tuple2 a1 c1)))) (t2tb1153 x))))

(declare-fun tb2t1153 (uni) (set (set (tuple21 (tuple21 b c) (tuple21 a
  c)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 b c) (tuple21 a c))))))
  (! (= (tb2t1153 (t2tb1153 i)) i) :pattern ((t2tb1153 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 b1 c1) (tuple2 a1 c1)))) j)
     (= (t2tb1153 (tb2t1153 j)) j)) :pattern ((t2tb1153 (tb2t1153 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 b c))) (v (set (tuple21 a c)))
  (r (set (tuple21 (tuple21 b c) (tuple21 a c)))))
  (= (mem (set1 (tuple2 (tuple2 b1 c1) (tuple2 a1 c1))) (t2tb1109 r)
  (relation (tuple2 a1 c1) (tuple2 b1 c1) (t2tb131 u) (t2tb129 v)))
  (forall ((x (tuple21 b c)) (y (tuple21 a c)))
  (=> (mem (tuple2 (tuple2 b1 c1) (tuple2 a1 c1))
  (Tuple2 (tuple2 b1 c1) (tuple2 a1 c1) (t2tb134 x) (t2tb133 y))
  (t2tb1109 r)) (and (mem8 x u) (mem10 y v)))))))

(declare-fun t2tb1154 ((set (set (tuple21 (tuple21 b c) (set (tuple21 b
  c)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 b c) (set (tuple21 b c))))))) (sort
  (set1 (set1 (tuple2 (tuple2 b1 c1) (set1 (tuple2 b1 c1))))) (t2tb1154 x))))

(declare-fun tb2t1154 (uni) (set (set (tuple21 (tuple21 b c) (set (tuple21 b
  c))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 b c) (set (tuple21 b c)))))))
  (! (= (tb2t1154 (t2tb1154 i)) i) :pattern ((t2tb1154 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 b1 c1) (set1 (tuple2 b1 c1))))) j)
     (= (t2tb1154 (tb2t1154 j)) j)) :pattern ((t2tb1154 (tb2t1154 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 b c))) (v (set (set (tuple21 b c))))
  (r (set (tuple21 (tuple21 b c) (set (tuple21 b c))))))
  (= (mem (set1 (tuple2 (tuple2 b1 c1) (set1 (tuple2 b1 c1)))) (t2tb1111 r)
  (relation (set1 (tuple2 b1 c1)) (tuple2 b1 c1) (t2tb131 u) (t2tb130 v)))
  (forall ((x (tuple21 b c)) (y (set (tuple21 b c))))
  (=> (mem (tuple2 (tuple2 b1 c1) (set1 (tuple2 b1 c1)))
  (Tuple2 (tuple2 b1 c1) (set1 (tuple2 b1 c1)) (t2tb134 x) (t2tb131 y))
  (t2tb1111 r)) (and (mem8 x u) (mem9 y v)))))))

(declare-fun t2tb1155 ((set (set (tuple21 (tuple21 b c) (tuple21 b
  c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 b c) (tuple21 b c)))))) (sort
  (set1 (set1 (tuple2 (tuple2 b1 c1) (tuple2 b1 c1)))) (t2tb1155 x))))

(declare-fun tb2t1155 (uni) (set (set (tuple21 (tuple21 b c) (tuple21 b
  c)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 b c) (tuple21 b c))))))
  (! (= (tb2t1155 (t2tb1155 i)) i) :pattern ((t2tb1155 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 b1 c1) (tuple2 b1 c1)))) j)
     (= (t2tb1155 (tb2t1155 j)) j)) :pattern ((t2tb1155 (tb2t1155 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 b c))) (v (set (tuple21 b c)))
  (r (set (tuple21 (tuple21 b c) (tuple21 b c)))))
  (= (mem (set1 (tuple2 (tuple2 b1 c1) (tuple2 b1 c1))) (t2tb1113 r)
  (relation (tuple2 b1 c1) (tuple2 b1 c1) (t2tb131 u) (t2tb131 v)))
  (forall ((x (tuple21 b c)) (y (tuple21 b c)))
  (=> (mem (tuple2 (tuple2 b1 c1) (tuple2 b1 c1))
  (Tuple2 (tuple2 b1 c1) (tuple2 b1 c1) (t2tb134 x) (t2tb134 y))
  (t2tb1113 r)) (and (mem8 x u) (mem8 y v)))))))

(declare-fun t2tb1156 ((set (set (tuple21 (tuple21 b c) c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 b c) c))))) (sort
  (set1 (set1 (tuple2 (tuple2 b1 c1) c1))) (t2tb1156 x))))

(declare-fun tb2t1156 (uni) (set (set (tuple21 (tuple21 b c) c))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 b c) c)))))
  (! (= (tb2t1156 (t2tb1156 i)) i) :pattern ((t2tb1156 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 b1 c1) c1))) j)
     (= (t2tb1156 (tb2t1156 j)) j)) :pattern ((t2tb1156 (tb2t1156 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 b c))) (v (set c)) (r (set (tuple21 (tuple21 b c)
  c))))
  (= (mem (set1 (tuple2 (tuple2 b1 c1) c1)) (t2tb1115 r)
  (relation c1 (tuple2 b1 c1) (t2tb131 u) (t2tb132 v)))
  (forall ((x (tuple21 b c)) (y c))
  (=> (mem (tuple2 (tuple2 b1 c1) c1)
  (Tuple2 (tuple2 b1 c1) c1 (t2tb134 x) (t2tb135 y)) (t2tb1115 r))
  (and (mem8 x u) (mem7 y v)))))))

(declare-fun t2tb1157 ((set (set (tuple21 (tuple21 b c) (set (tuple21 a
  b)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 b c) (set (tuple21 a b))))))) (sort
  (set1 (set1 (tuple2 (tuple2 b1 c1) (set1 (tuple2 a1 b1))))) (t2tb1157 x))))

(declare-fun tb2t1157 (uni) (set (set (tuple21 (tuple21 b c) (set (tuple21 a
  b))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 b c) (set (tuple21 a b)))))))
  (! (= (tb2t1157 (t2tb1157 i)) i) :pattern ((t2tb1157 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 b1 c1) (set1 (tuple2 a1 b1))))) j)
     (= (t2tb1157 (tb2t1157 j)) j)) :pattern ((t2tb1157 (tb2t1157 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 b c))) (v (set (set (tuple21 a b))))
  (r (set (tuple21 (tuple21 b c) (set (tuple21 a b))))))
  (= (mem (set1 (tuple2 (tuple2 b1 c1) (set1 (tuple2 a1 b1)))) (t2tb1117 r)
  (relation (set1 (tuple2 a1 b1)) (tuple2 b1 c1) (t2tb131 u) (t2tb10 v)))
  (forall ((x (tuple21 b c)) (y (set (tuple21 a b))))
  (=> (mem (tuple2 (tuple2 b1 c1) (set1 (tuple2 a1 b1)))
  (Tuple2 (tuple2 b1 c1) (set1 (tuple2 a1 b1)) (t2tb134 x) (t2tb11 y))
  (t2tb1117 r)) (and (mem8 x u) (mem4 y v)))))))

(declare-fun t2tb1158 ((set (set (tuple21 (tuple21 b c) (tuple21 a
  b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 b c) (tuple21 a b)))))) (sort
  (set1 (set1 (tuple2 (tuple2 b1 c1) (tuple2 a1 b1)))) (t2tb1158 x))))

(declare-fun tb2t1158 (uni) (set (set (tuple21 (tuple21 b c) (tuple21 a
  b)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 b c) (tuple21 a b))))))
  (! (= (tb2t1158 (t2tb1158 i)) i) :pattern ((t2tb1158 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 b1 c1) (tuple2 a1 b1)))) j)
     (= (t2tb1158 (tb2t1158 j)) j)) :pattern ((t2tb1158 (tb2t1158 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 b c))) (v (set (tuple21 a b)))
  (r (set (tuple21 (tuple21 b c) (tuple21 a b)))))
  (= (mem (set1 (tuple2 (tuple2 b1 c1) (tuple2 a1 b1))) (t2tb1119 r)
  (relation (tuple2 a1 b1) (tuple2 b1 c1) (t2tb131 u) (t2tb11 v)))
  (forall ((x (tuple21 b c)) (y (tuple21 a b)))
  (=> (mem (tuple2 (tuple2 b1 c1) (tuple2 a1 b1))
  (Tuple2 (tuple2 b1 c1) (tuple2 a1 b1) (t2tb134 x) (t2tb13 y)) (t2tb1119 r))
  (and (mem8 x u) (mem3 y v)))))))

(declare-fun t2tb1159 ((set (set (tuple21 (tuple21 b c) b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 b c) b))))) (sort
  (set1 (set1 (tuple2 (tuple2 b1 c1) b1))) (t2tb1159 x))))

(declare-fun tb2t1159 (uni) (set (set (tuple21 (tuple21 b c) b))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 b c) b)))))
  (! (= (tb2t1159 (t2tb1159 i)) i) :pattern ((t2tb1159 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 b1 c1) b1))) j)
     (= (t2tb1159 (tb2t1159 j)) j)) :pattern ((t2tb1159 (tb2t1159 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 b c))) (v (set b)) (r (set (tuple21 (tuple21 b c)
  b))))
  (= (mem (set1 (tuple2 (tuple2 b1 c1) b1)) (t2tb1121 r)
  (relation b1 (tuple2 b1 c1) (t2tb131 u) (t2tb12 v)))
  (forall ((x (tuple21 b c)) (y b))
  (=> (mem (tuple2 (tuple2 b1 c1) b1)
  (Tuple2 (tuple2 b1 c1) b1 (t2tb134 x) (t2tb14 y)) (t2tb1121 r))
  (and (mem8 x u) (mem2 y v)))))))

(declare-fun t2tb1160 ((set (set (tuple21 (tuple21 b c) a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 b c) a))))) (sort
  (set1 (set1 (tuple2 (tuple2 b1 c1) a1))) (t2tb1160 x))))

(declare-fun tb2t1160 (uni) (set (set (tuple21 (tuple21 b c) a))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 b c) a)))))
  (! (= (tb2t1160 (t2tb1160 i)) i) :pattern ((t2tb1160 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 b1 c1) a1))) j)
     (= (t2tb1160 (tb2t1160 j)) j)) :pattern ((t2tb1160 (tb2t1160 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 b c))) (v (set a)) (r (set (tuple21 (tuple21 b c)
  a))))
  (= (mem (set1 (tuple2 (tuple2 b1 c1) a1)) (t2tb1124 r)
  (relation a1 (tuple2 b1 c1) (t2tb131 u) (t2tb1 v)))
  (forall ((x (tuple21 b c)) (y a))
  (=> (mem (tuple2 (tuple2 b1 c1) a1)
  (Tuple2 (tuple2 b1 c1) a1 (t2tb134 x) (t2tb2 y)) (t2tb1124 r))
  (and (mem8 x u) (mem1 y v)))))))

;; mem_relation
  (assert
  (forall ((b2 ty))
  (forall ((u (set (tuple21 b c))) (v uni) (r uni))
  (and
  (=> (mem (set1 (tuple2 (tuple2 b1 c1) b2)) r
  (relation b2 (tuple2 b1 c1) (t2tb131 u) v))
  (forall ((x (tuple21 b c)) (y uni))
  (=> (mem (tuple2 (tuple2 b1 c1) b2)
  (Tuple2 (tuple2 b1 c1) b2 (t2tb134 x) y) r) (and (mem8 x u) (mem b2 y v)))))
  (=>
  (forall ((x (tuple21 b c)) (y uni))
  (=> (sort b2 y)
  (=> (mem (tuple2 (tuple2 b1 c1) b2)
  (Tuple2 (tuple2 b1 c1) b2 (t2tb134 x) y) r) (and (mem8 x u) (mem b2 y v)))))
  (mem (set1 (tuple2 (tuple2 b1 c1) b2)) r
  (relation b2 (tuple2 b1 c1) (t2tb131 u) v)))))))

(declare-fun t2tb2315 ((set (set (tuple21 c (tuple21 a d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 c (tuple21 a d)))))) (sort
  (set1 (set1 (tuple2 c1 (tuple2 a1 d1)))) (t2tb2315 x))))

(declare-fun tb2t2315 (uni) (set (set (tuple21 c (tuple21 a d)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 c (tuple21 a d))))))
  (! (= (tb2t2315 (t2tb2315 i)) i) :pattern ((t2tb2315 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 c1 (tuple2 a1 d1)))) j)
     (= (t2tb2315 (tb2t2315 j)) j)) :pattern ((t2tb2315 (tb2t2315 j))) )))

;; mem_relation
  (assert
  (forall ((u (set c)) (v (set (tuple21 a d))) (r (set (tuple21 c (tuple21 a
  d)))))
  (= (mem (set1 (tuple2 c1 (tuple2 a1 d1))) (t2tb2268 r)
  (relation (tuple2 a1 d1) c1 (t2tb132 u) (t2tb903 v)))
  (forall ((x c) (y (tuple21 a d)))
  (=> (mem (tuple2 c1 (tuple2 a1 d1))
  (Tuple2 c1 (tuple2 a1 d1) (t2tb135 x) (t2tb904 y)) (t2tb2268 r))
  (and (mem7 x u) (mem32 y v)))))))

(declare-fun t2tb2071 ((set (set (tuple21 c (tuple21 b d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 c (tuple21 b d)))))) (sort
  (set1 (set1 (tuple2 c1 (tuple2 b1 d1)))) (t2tb2071 x))))

(declare-fun tb2t2071 (uni) (set (set (tuple21 c (tuple21 b d)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 c (tuple21 b d))))))
  (! (= (tb2t2071 (t2tb2071 i)) i) :pattern ((t2tb2071 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 c1 (tuple2 b1 d1)))) j)
     (= (t2tb2071 (tb2t2071 j)) j)) :pattern ((t2tb2071 (tb2t2071 j))) )))

;; mem_relation
  (assert
  (forall ((u (set c)) (v (set (tuple21 b d))) (r (set (tuple21 c (tuple21 b
  d)))))
  (= (mem (set1 (tuple2 c1 (tuple2 b1 d1))) (t2tb2049 r)
  (relation (tuple2 b1 d1) c1 (t2tb132 u) (t2tb687 v)))
  (forall ((x c) (y (tuple21 b d)))
  (=> (mem (tuple2 c1 (tuple2 b1 d1))
  (Tuple2 c1 (tuple2 b1 d1) (t2tb135 x) (t2tb692 y)) (t2tb2049 r))
  (and (mem7 x u) (mem23 y v)))))))

(declare-fun t2tb989 ((set (set (tuple21 c (set (tuple21 c d)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 c (set (tuple21 c d))))))) (sort
  (set1 (set1 (tuple2 c1 (set1 (tuple2 c1 d1))))) (t2tb989 x))))

(declare-fun tb2t989 (uni) (set (set (tuple21 c (set (tuple21 c d))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 c (set (tuple21 c d)))))))
  (! (= (tb2t989 (t2tb989 i)) i) :pattern ((t2tb989 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 c1 (set1 (tuple2 c1 d1))))) j)
     (= (t2tb989 (tb2t989 j)) j)) :pattern ((t2tb989 (tb2t989 j))) )))

;; mem_relation
  (assert
  (forall ((u (set c)) (v (set (set (tuple21 c d)))) (r (set (tuple21 c
  (set (tuple21 c d))))))
  (= (mem (set1 (tuple2 c1 (set1 (tuple2 c1 d1)))) (t2tb855 r)
  (relation (set1 (tuple2 c1 d1)) c1 (t2tb132 u) (t2tb688 v)))
  (forall ((x c) (y (set (tuple21 c d))))
  (=> (mem (tuple2 c1 (set1 (tuple2 c1 d1)))
  (Tuple2 c1 (set1 (tuple2 c1 d1)) (t2tb135 x) (t2tb689 y)) (t2tb855 r))
  (and (mem7 x u) (mem22 y v)))))))

(declare-fun t2tb990 ((set (set (tuple21 c (tuple21 c d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 c (tuple21 c d)))))) (sort
  (set1 (set1 (tuple2 c1 (tuple2 c1 d1)))) (t2tb990 x))))

(declare-fun tb2t990 (uni) (set (set (tuple21 c (tuple21 c d)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 c (tuple21 c d))))))
  (! (= (tb2t990 (t2tb990 i)) i) :pattern ((t2tb990 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 c1 (tuple2 c1 d1)))) j)
     (= (t2tb990 (tb2t990 j)) j)) :pattern ((t2tb990 (tb2t990 j))) )))

;; mem_relation
  (assert
  (forall ((u (set c)) (v (set (tuple21 c d))) (r (set (tuple21 c (tuple21 c
  d)))))
  (= (mem (set1 (tuple2 c1 (tuple2 c1 d1))) (t2tb857 r)
  (relation (tuple2 c1 d1) c1 (t2tb132 u) (t2tb689 v)))
  (forall ((x c) (y (tuple21 c d)))
  (=> (mem (tuple2 c1 (tuple2 c1 d1))
  (Tuple2 c1 (tuple2 c1 d1) (t2tb135 x) (t2tb693 y)) (t2tb857 r))
  (and (mem7 x u) (mem21 y v)))))))

;; mem_relation
  (assert
  (forall ((u (set c)) (v (set d)) (r (set (tuple21 c d))))
  (= (mem22 r (relation7 u v))
  (forall ((x c) (y d))
  (=> (mem21 (tb2t693 (Tuple2 c1 d1 (t2tb135 x) (t2tb694 y))) r)
  (and (mem7 x u) (mem20 y v)))))))

(declare-fun t2tb302 ((set (set (tuple21 c (tuple21 a c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 c (tuple21 a c)))))) (sort
  (set1 (set1 (tuple2 c1 (tuple2 a1 c1)))) (t2tb302 x))))

(declare-fun tb2t302 (uni) (set (set (tuple21 c (tuple21 a c)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 c (tuple21 a c))))))
  (! (= (tb2t302 (t2tb302 i)) i) :pattern ((t2tb302 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 c1 (tuple2 a1 c1)))) j)
     (= (t2tb302 (tb2t302 j)) j)) :pattern ((t2tb302 (tb2t302 j))) )))

;; mem_relation
  (assert
  (forall ((u (set c)) (v (set (tuple21 a c))) (r (set (tuple21 c (tuple21 a
  c)))))
  (= (mem (set1 (tuple2 c1 (tuple2 a1 c1))) (t2tb210 r)
  (relation (tuple2 a1 c1) c1 (t2tb132 u) (t2tb129 v)))
  (forall ((x c) (y (tuple21 a c)))
  (=> (mem (tuple2 c1 (tuple2 a1 c1))
  (Tuple2 c1 (tuple2 a1 c1) (t2tb135 x) (t2tb133 y)) (t2tb210 r))
  (and (mem7 x u) (mem10 y v)))))))

(declare-fun t2tb1161 ((set (set (tuple21 c (set (tuple21 b c)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 c (set (tuple21 b c))))))) (sort
  (set1 (set1 (tuple2 c1 (set1 (tuple2 b1 c1))))) (t2tb1161 x))))

(declare-fun tb2t1161 (uni) (set (set (tuple21 c (set (tuple21 b c))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 c (set (tuple21 b c)))))))
  (! (= (tb2t1161 (t2tb1161 i)) i) :pattern ((t2tb1161 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 c1 (set1 (tuple2 b1 c1))))) j)
     (= (t2tb1161 (tb2t1161 j)) j)) :pattern ((t2tb1161 (tb2t1161 j))) )))

;; mem_relation
  (assert
  (forall ((u (set c)) (v (set (set (tuple21 b c)))) (r (set (tuple21 c
  (set (tuple21 b c))))))
  (= (mem (set1 (tuple2 c1 (set1 (tuple2 b1 c1)))) (t2tb1125 r)
  (relation (set1 (tuple2 b1 c1)) c1 (t2tb132 u) (t2tb130 v)))
  (forall ((x c) (y (set (tuple21 b c))))
  (=> (mem (tuple2 c1 (set1 (tuple2 b1 c1)))
  (Tuple2 c1 (set1 (tuple2 b1 c1)) (t2tb135 x) (t2tb131 y)) (t2tb1125 r))
  (and (mem7 x u) (mem9 y v)))))))

(declare-fun t2tb1162 ((set (set (tuple21 c (tuple21 b c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 c (tuple21 b c)))))) (sort
  (set1 (set1 (tuple2 c1 (tuple2 b1 c1)))) (t2tb1162 x))))

(declare-fun tb2t1162 (uni) (set (set (tuple21 c (tuple21 b c)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 c (tuple21 b c))))))
  (! (= (tb2t1162 (t2tb1162 i)) i) :pattern ((t2tb1162 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 c1 (tuple2 b1 c1)))) j)
     (= (t2tb1162 (tb2t1162 j)) j)) :pattern ((t2tb1162 (tb2t1162 j))) )))

;; mem_relation
  (assert
  (forall ((u (set c)) (v (set (tuple21 b c))) (r (set (tuple21 c (tuple21 b
  c)))))
  (= (mem (set1 (tuple2 c1 (tuple2 b1 c1))) (t2tb1127 r)
  (relation (tuple2 b1 c1) c1 (t2tb132 u) (t2tb131 v)))
  (forall ((x c) (y (tuple21 b c)))
  (=> (mem (tuple2 c1 (tuple2 b1 c1))
  (Tuple2 c1 (tuple2 b1 c1) (t2tb135 x) (t2tb134 y)) (t2tb1127 r))
  (and (mem7 x u) (mem8 y v)))))))

(declare-fun t2tb305 ((set (set (tuple21 c c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 c c))))) (sort (set1 (set1 (tuple2 c1 c1)))
  (t2tb305 x))))

(declare-fun tb2t305 (uni) (set (set (tuple21 c c))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 c c)))))
  (! (= (tb2t305 (t2tb305 i)) i) :pattern ((t2tb305 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 c1 c1))) j) (= (t2tb305 (tb2t305 j)) j)) :pattern (
  (t2tb305 (tb2t305 j))) )))

;; mem_relation
  (assert
  (forall ((u (set c)) (v (set c)) (r (set (tuple21 c c))))
  (= (mem (set1 (tuple2 c1 c1)) (t2tb216 r)
  (relation c1 c1 (t2tb132 u) (t2tb132 v)))
  (forall ((x c) (y c))
  (=> (mem (tuple2 c1 c1) (Tuple2 c1 c1 (t2tb135 x) (t2tb135 y)) (t2tb216 r))
  (and (mem7 x u) (mem7 y v)))))))

(declare-fun t2tb306 ((set (set (tuple21 c (set (tuple21 a b)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 c (set (tuple21 a b))))))) (sort
  (set1 (set1 (tuple2 c1 (set1 (tuple2 a1 b1))))) (t2tb306 x))))

(declare-fun tb2t306 (uni) (set (set (tuple21 c (set (tuple21 a b))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 c (set (tuple21 a b)))))))
  (! (= (tb2t306 (t2tb306 i)) i) :pattern ((t2tb306 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 c1 (set1 (tuple2 a1 b1))))) j)
     (= (t2tb306 (tb2t306 j)) j)) :pattern ((t2tb306 (tb2t306 j))) )))

;; mem_relation
  (assert
  (forall ((u (set c)) (v (set (set (tuple21 a b)))) (r (set (tuple21 c
  (set (tuple21 a b))))))
  (= (mem (set1 (tuple2 c1 (set1 (tuple2 a1 b1)))) (t2tb218 r)
  (relation (set1 (tuple2 a1 b1)) c1 (t2tb132 u) (t2tb10 v)))
  (forall ((x c) (y (set (tuple21 a b))))
  (=> (mem (tuple2 c1 (set1 (tuple2 a1 b1)))
  (Tuple2 c1 (set1 (tuple2 a1 b1)) (t2tb135 x) (t2tb11 y)) (t2tb218 r))
  (and (mem7 x u) (mem4 y v)))))))

(declare-fun t2tb307 ((set (set (tuple21 c (tuple21 a b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 c (tuple21 a b)))))) (sort
  (set1 (set1 (tuple2 c1 (tuple2 a1 b1)))) (t2tb307 x))))

(declare-fun tb2t307 (uni) (set (set (tuple21 c (tuple21 a b)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 c (tuple21 a b))))))
  (! (= (tb2t307 (t2tb307 i)) i) :pattern ((t2tb307 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 c1 (tuple2 a1 b1)))) j)
     (= (t2tb307 (tb2t307 j)) j)) :pattern ((t2tb307 (tb2t307 j))) )))

;; mem_relation
  (assert
  (forall ((u (set c)) (v (set (tuple21 a b))) (r (set (tuple21 c (tuple21 a
  b)))))
  (= (mem (set1 (tuple2 c1 (tuple2 a1 b1))) (t2tb220 r)
  (relation (tuple2 a1 b1) c1 (t2tb132 u) (t2tb11 v)))
  (forall ((x c) (y (tuple21 a b)))
  (=> (mem (tuple2 c1 (tuple2 a1 b1))
  (Tuple2 c1 (tuple2 a1 b1) (t2tb135 x) (t2tb13 y)) (t2tb220 r))
  (and (mem7 x u) (mem3 y v)))))))

(declare-fun t2tb308 ((set (set (tuple21 c b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 c b))))) (sort (set1 (set1 (tuple2 c1 b1)))
  (t2tb308 x))))

(declare-fun tb2t308 (uni) (set (set (tuple21 c b))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 c b)))))
  (! (= (tb2t308 (t2tb308 i)) i) :pattern ((t2tb308 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 c1 b1))) j) (= (t2tb308 (tb2t308 j)) j)) :pattern (
  (t2tb308 (tb2t308 j))) )))

;; mem_relation
  (assert
  (forall ((u (set c)) (v (set b)) (r (set (tuple21 c b))))
  (= (mem (set1 (tuple2 c1 b1)) (t2tb222 r)
  (relation b1 c1 (t2tb132 u) (t2tb12 v)))
  (forall ((x c) (y b))
  (=> (mem (tuple2 c1 b1) (Tuple2 c1 b1 (t2tb135 x) (t2tb14 y)) (t2tb222 r))
  (and (mem7 x u) (mem2 y v)))))))

(declare-fun t2tb309 ((set (set (tuple21 c a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 c a))))) (sort (set1 (set1 (tuple2 c1 a1)))
  (t2tb309 x))))

(declare-fun tb2t309 (uni) (set (set (tuple21 c a))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 c a)))))
  (! (= (tb2t309 (t2tb309 i)) i) :pattern ((t2tb309 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 c1 a1))) j) (= (t2tb309 (tb2t309 j)) j)) :pattern (
  (t2tb309 (tb2t309 j))) )))

;; mem_relation
  (assert
  (forall ((u (set c)) (v (set a)) (r (set (tuple21 c a))))
  (= (mem (set1 (tuple2 c1 a1)) (t2tb224 r)
  (relation a1 c1 (t2tb132 u) (t2tb1 v)))
  (forall ((x c) (y a))
  (=> (mem (tuple2 c1 a1) (Tuple2 c1 a1 (t2tb135 x) (t2tb2 y)) (t2tb224 r))
  (and (mem7 x u) (mem1 y v)))))))

;; mem_relation
  (assert
  (forall ((b2 ty))
  (forall ((u (set c)) (v uni) (r uni))
  (and
  (=> (mem (set1 (tuple2 c1 b2)) r (relation b2 c1 (t2tb132 u) v))
  (forall ((x c) (y uni))
  (=> (mem (tuple2 c1 b2) (Tuple2 c1 b2 (t2tb135 x) y) r)
  (and (mem7 x u) (mem b2 y v)))))
  (=>
  (forall ((x c) (y uni))
  (=> (sort b2 y)
  (=> (mem (tuple2 c1 b2) (Tuple2 c1 b2 (t2tb135 x) y) r)
  (and (mem7 x u) (mem b2 y v))))) (mem (set1 (tuple2 c1 b2)) r
  (relation b2 c1 (t2tb132 u) v)))))))

(declare-fun t2tb2316 ((set (set (tuple21 (set (tuple21 a b)) (tuple21 a
  d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a b)) (tuple21 a d)))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 d1)))) (t2tb2316 x))))

(declare-fun tb2t2316 (uni) (set (set (tuple21 (set (tuple21 a b)) (tuple21 a
  d)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a b)) (tuple21 a d))))))
  (! (= (tb2t2316 (t2tb2316 i)) i) :pattern ((t2tb2316 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 d1)))) j)
     (= (t2tb2316 (tb2t2316 j)) j)) :pattern ((t2tb2316 (tb2t2316 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a b)))) (v (set (tuple21 a d)))
  (r (set (tuple21 (set (tuple21 a b)) (tuple21 a d)))))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 d1))) (t2tb2271 r)
  (relation (tuple2 a1 d1) (set1 (tuple2 a1 b1)) (t2tb10 u) (t2tb903 v)))
  (forall ((x (set (tuple21 a b))) (y (tuple21 a d)))
  (=> (mem (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 d1))
  (Tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 d1) (t2tb11 x) (t2tb904 y))
  (t2tb2271 r)) (and (mem4 x u) (mem32 y v)))))))

(declare-fun t2tb2072 ((set (set (tuple21 (set (tuple21 a b)) (tuple21 b
  d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a b)) (tuple21 b d)))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 b1 d1)))) (t2tb2072 x))))

(declare-fun tb2t2072 (uni) (set (set (tuple21 (set (tuple21 a b)) (tuple21 b
  d)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a b)) (tuple21 b d))))))
  (! (= (tb2t2072 (t2tb2072 i)) i) :pattern ((t2tb2072 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 b1 d1)))) j)
     (= (t2tb2072 (tb2t2072 j)) j)) :pattern ((t2tb2072 (tb2t2072 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a b)))) (v (set (tuple21 b d)))
  (r (set (tuple21 (set (tuple21 a b)) (tuple21 b d)))))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 b1 d1))) (t2tb2050 r)
  (relation (tuple2 b1 d1) (set1 (tuple2 a1 b1)) (t2tb10 u) (t2tb687 v)))
  (forall ((x (set (tuple21 a b))) (y (tuple21 b d)))
  (=> (mem (tuple2 (set1 (tuple2 a1 b1)) (tuple2 b1 d1))
  (Tuple2 (set1 (tuple2 a1 b1)) (tuple2 b1 d1) (t2tb11 x) (t2tb692 y))
  (t2tb2050 r)) (and (mem4 x u) (mem23 y v)))))))

(declare-fun t2tb994 ((set (set (tuple21 (set (tuple21 a b)) (set (tuple21 c
  d)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a b)) (set (tuple21 c d)))))))
  (sort (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 c1 d1)))))
  (t2tb994 x))))

(declare-fun tb2t994 (uni) (set (set (tuple21 (set (tuple21 a b))
  (set (tuple21 c d))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a b)) (set (tuple21 c d)))))))
  (! (= (tb2t994 (t2tb994 i)) i) :pattern ((t2tb994 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 c1 d1))))) j)
     (= (t2tb994 (tb2t994 j)) j)) :pattern ((t2tb994 (tb2t994 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a b)))) (v (set (set (tuple21 c d))))
  (r (set (tuple21 (set (tuple21 a b)) (set (tuple21 c d))))))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 c1 d1))))
  (t2tb865 r)
  (relation (set1 (tuple2 c1 d1)) (set1 (tuple2 a1 b1)) (t2tb10 u)
  (t2tb688 v)))
  (forall ((x (set (tuple21 a b))) (y (set (tuple21 c d))))
  (=> (mem (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 c1 d1)))
  (Tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 c1 d1)) (t2tb11 x) (t2tb689 y))
  (t2tb865 r)) (and (mem4 x u) (mem22 y v)))))))

(declare-fun t2tb995 ((set (set (tuple21 (set (tuple21 a b)) (tuple21 c
  d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a b)) (tuple21 c d)))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 c1 d1)))) (t2tb995 x))))

(declare-fun tb2t995 (uni) (set (set (tuple21 (set (tuple21 a b)) (tuple21 c
  d)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a b)) (tuple21 c d))))))
  (! (= (tb2t995 (t2tb995 i)) i) :pattern ((t2tb995 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 c1 d1)))) j)
     (= (t2tb995 (tb2t995 j)) j)) :pattern ((t2tb995 (tb2t995 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a b)))) (v (set (tuple21 c d)))
  (r (set (tuple21 (set (tuple21 a b)) (tuple21 c d)))))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 c1 d1))) (t2tb867 r)
  (relation (tuple2 c1 d1) (set1 (tuple2 a1 b1)) (t2tb10 u) (t2tb689 v)))
  (forall ((x (set (tuple21 a b))) (y (tuple21 c d)))
  (=> (mem (tuple2 (set1 (tuple2 a1 b1)) (tuple2 c1 d1))
  (Tuple2 (set1 (tuple2 a1 b1)) (tuple2 c1 d1) (t2tb11 x) (t2tb693 y))
  (t2tb867 r)) (and (mem4 x u) (mem21 y v)))))))

(declare-fun t2tb996 ((set (set (tuple21 (set (tuple21 a b)) d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a b)) d))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) d1))) (t2tb996 x))))

(declare-fun tb2t996 (uni) (set (set (tuple21 (set (tuple21 a b)) d))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a b)) d)))))
  (! (= (tb2t996 (t2tb996 i)) i) :pattern ((t2tb996 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) d1))) j)
     (= (t2tb996 (tb2t996 j)) j)) :pattern ((t2tb996 (tb2t996 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a b)))) (v (set d))
  (r (set (tuple21 (set (tuple21 a b)) d))))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 b1)) d1)) (t2tb869 r)
  (relation d1 (set1 (tuple2 a1 b1)) (t2tb10 u) (t2tb690 v)))
  (forall ((x (set (tuple21 a b))) (y d))
  (=> (mem (tuple2 (set1 (tuple2 a1 b1)) d1)
  (Tuple2 (set1 (tuple2 a1 b1)) d1 (t2tb11 x) (t2tb694 y)) (t2tb869 r))
  (and (mem4 x u) (mem20 y v)))))))

(declare-fun t2tb311 ((set (set (tuple21 (set (tuple21 a b)) (tuple21 a
  c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a b)) (tuple21 a c)))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 c1)))) (t2tb311 x))))

(declare-fun tb2t311 (uni) (set (set (tuple21 (set (tuple21 a b)) (tuple21 a
  c)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a b)) (tuple21 a c))))))
  (! (= (tb2t311 (t2tb311 i)) i) :pattern ((t2tb311 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 c1)))) j)
     (= (t2tb311 (tb2t311 j)) j)) :pattern ((t2tb311 (tb2t311 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a b)))) (v (set (tuple21 a c)))
  (r (set (tuple21 (set (tuple21 a b)) (tuple21 a c)))))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 c1))) (t2tb229 r)
  (relation (tuple2 a1 c1) (set1 (tuple2 a1 b1)) (t2tb10 u) (t2tb129 v)))
  (forall ((x (set (tuple21 a b))) (y (tuple21 a c)))
  (=> (mem (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 c1))
  (Tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 c1) (t2tb11 x) (t2tb133 y))
  (t2tb229 r)) (and (mem4 x u) (mem10 y v)))))))

(declare-fun t2tb1163 ((set (set (tuple21 (set (tuple21 a b)) (set (tuple21 b
  c)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a b)) (set (tuple21 b c)))))))
  (sort (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 b1 c1)))))
  (t2tb1163 x))))

(declare-fun tb2t1163 (uni) (set (set (tuple21 (set (tuple21 a b))
  (set (tuple21 b c))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a b)) (set (tuple21 b c)))))))
  (! (= (tb2t1163 (t2tb1163 i)) i) :pattern ((t2tb1163 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 b1 c1))))) j)
     (= (t2tb1163 (tb2t1163 j)) j)) :pattern ((t2tb1163 (tb2t1163 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a b)))) (v (set (set (tuple21 b c))))
  (r (set (tuple21 (set (tuple21 a b)) (set (tuple21 b c))))))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 b1 c1))))
  (t2tb1129 r)
  (relation (set1 (tuple2 b1 c1)) (set1 (tuple2 a1 b1)) (t2tb10 u)
  (t2tb130 v)))
  (forall ((x (set (tuple21 a b))) (y (set (tuple21 b c))))
  (=> (mem (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 b1 c1)))
  (Tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 b1 c1)) (t2tb11 x) (t2tb131 y))
  (t2tb1129 r)) (and (mem4 x u) (mem9 y v)))))))

(declare-fun t2tb1164 ((set (set (tuple21 (set (tuple21 a b)) (tuple21 b
  c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a b)) (tuple21 b c)))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 b1 c1)))) (t2tb1164 x))))

(declare-fun tb2t1164 (uni) (set (set (tuple21 (set (tuple21 a b)) (tuple21 b
  c)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a b)) (tuple21 b c))))))
  (! (= (tb2t1164 (t2tb1164 i)) i) :pattern ((t2tb1164 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 b1 c1)))) j)
     (= (t2tb1164 (tb2t1164 j)) j)) :pattern ((t2tb1164 (tb2t1164 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a b)))) (v (set (tuple21 b c)))
  (r (set (tuple21 (set (tuple21 a b)) (tuple21 b c)))))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 b1 c1))) (t2tb1131 r)
  (relation (tuple2 b1 c1) (set1 (tuple2 a1 b1)) (t2tb10 u) (t2tb131 v)))
  (forall ((x (set (tuple21 a b))) (y (tuple21 b c)))
  (=> (mem (tuple2 (set1 (tuple2 a1 b1)) (tuple2 b1 c1))
  (Tuple2 (set1 (tuple2 a1 b1)) (tuple2 b1 c1) (t2tb11 x) (t2tb134 y))
  (t2tb1131 r)) (and (mem4 x u) (mem8 y v)))))))

(declare-fun t2tb314 ((set (set (tuple21 (set (tuple21 a b)) c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a b)) c))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) c1))) (t2tb314 x))))

(declare-fun tb2t314 (uni) (set (set (tuple21 (set (tuple21 a b)) c))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a b)) c)))))
  (! (= (tb2t314 (t2tb314 i)) i) :pattern ((t2tb314 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) c1))) j)
     (= (t2tb314 (tb2t314 j)) j)) :pattern ((t2tb314 (tb2t314 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a b)))) (v (set c))
  (r (set (tuple21 (set (tuple21 a b)) c))))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 b1)) c1)) (t2tb234 r)
  (relation c1 (set1 (tuple2 a1 b1)) (t2tb10 u) (t2tb132 v)))
  (forall ((x (set (tuple21 a b))) (y c))
  (=> (mem (tuple2 (set1 (tuple2 a1 b1)) c1)
  (Tuple2 (set1 (tuple2 a1 b1)) c1 (t2tb11 x) (t2tb135 y)) (t2tb234 r))
  (and (mem4 x u) (mem7 y v)))))))

(declare-fun t2tb45 ((set (set (tuple21 (set (tuple21 a b)) (set (tuple21 a
  b)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a b)) (set (tuple21 a b)))))))
  (sort (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1)))))
  (t2tb45 x))))

(declare-fun tb2t45 (uni) (set (set (tuple21 (set (tuple21 a b))
  (set (tuple21 a b))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a b)) (set (tuple21 a b)))))))
  (! (= (tb2t45 (t2tb45 i)) i) :pattern ((t2tb45 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1))))) j)
     (= (t2tb45 (tb2t45 j)) j)) :pattern ((t2tb45 (tb2t45 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a b)))) (v (set (set (tuple21 a b))))
  (r (set (tuple21 (set (tuple21 a b)) (set (tuple21 a b))))))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1))))
  (t2tb15 r)
  (relation (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1)) (t2tb10 u)
  (t2tb10 v)))
  (forall ((x (set (tuple21 a b))) (y (set (tuple21 a b))))
  (=> (mem (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1)))
  (Tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1)) (t2tb11 x) (t2tb11 y))
  (t2tb15 r)) (and (mem4 x u) (mem4 y v)))))))

(declare-fun t2tb46 ((set (set (tuple21 (set (tuple21 a b)) (tuple21 a
  b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a b)) (tuple21 a b)))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 b1)))) (t2tb46 x))))

(declare-fun tb2t46 (uni) (set (set (tuple21 (set (tuple21 a b)) (tuple21 a
  b)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a b)) (tuple21 a b))))))
  (! (= (tb2t46 (t2tb46 i)) i) :pattern ((t2tb46 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 b1)))) j)
     (= (t2tb46 (tb2t46 j)) j)) :pattern ((t2tb46 (tb2t46 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a b)))) (v (set (tuple21 a b)))
  (r (set (tuple21 (set (tuple21 a b)) (tuple21 a b)))))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 b1))) (t2tb17 r)
  (relation (tuple2 a1 b1) (set1 (tuple2 a1 b1)) (t2tb10 u) (t2tb11 v)))
  (forall ((x (set (tuple21 a b))) (y (tuple21 a b)))
  (=> (mem (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 b1))
  (Tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 b1) (t2tb11 x) (t2tb13 y))
  (t2tb17 r)) (and (mem4 x u) (mem3 y v)))))))

(declare-fun t2tb47 ((set (set (tuple21 (set (tuple21 a b)) b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a b)) b))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) b1))) (t2tb47 x))))

(declare-fun tb2t47 (uni) (set (set (tuple21 (set (tuple21 a b)) b))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a b)) b)))))
  (! (= (tb2t47 (t2tb47 i)) i) :pattern ((t2tb47 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) b1))) j)
     (= (t2tb47 (tb2t47 j)) j)) :pattern ((t2tb47 (tb2t47 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a b)))) (v (set b))
  (r (set (tuple21 (set (tuple21 a b)) b))))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 b1)) b1)) (t2tb19 r)
  (relation b1 (set1 (tuple2 a1 b1)) (t2tb10 u) (t2tb12 v)))
  (forall ((x (set (tuple21 a b))) (y b))
  (=> (mem (tuple2 (set1 (tuple2 a1 b1)) b1)
  (Tuple2 (set1 (tuple2 a1 b1)) b1 (t2tb11 x) (t2tb14 y)) (t2tb19 r))
  (and (mem4 x u) (mem2 y v)))))))

(declare-fun t2tb48 ((set (set (tuple21 (set (tuple21 a b)) a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a b)) a))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) a1))) (t2tb48 x))))

(declare-fun tb2t48 (uni) (set (set (tuple21 (set (tuple21 a b)) a))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a b)) a)))))
  (! (= (tb2t48 (t2tb48 i)) i) :pattern ((t2tb48 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) a1))) j)
     (= (t2tb48 (tb2t48 j)) j)) :pattern ((t2tb48 (tb2t48 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a b)))) (v (set a))
  (r (set (tuple21 (set (tuple21 a b)) a))))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 b1)) a1)) (t2tb22 r)
  (relation a1 (set1 (tuple2 a1 b1)) (t2tb10 u) (t2tb1 v)))
  (forall ((x (set (tuple21 a b))) (y a))
  (=> (mem (tuple2 (set1 (tuple2 a1 b1)) a1)
  (Tuple2 (set1 (tuple2 a1 b1)) a1 (t2tb11 x) (t2tb2 y)) (t2tb22 r))
  (and (mem4 x u) (mem1 y v)))))))

;; mem_relation
  (assert
  (forall ((b2 ty))
  (forall ((u (set (set (tuple21 a b)))) (v uni) (r uni))
  (and
  (=> (mem (set1 (tuple2 (set1 (tuple2 a1 b1)) b2)) r
  (relation b2 (set1 (tuple2 a1 b1)) (t2tb10 u) v))
  (forall ((x (set (tuple21 a b))) (y uni))
  (=> (mem (tuple2 (set1 (tuple2 a1 b1)) b2)
  (Tuple2 (set1 (tuple2 a1 b1)) b2 (t2tb11 x) y) r)
  (and (mem4 x u) (mem b2 y v)))))
  (=>
  (forall ((x (set (tuple21 a b))) (y uni))
  (=> (sort b2 y)
  (=> (mem (tuple2 (set1 (tuple2 a1 b1)) b2)
  (Tuple2 (set1 (tuple2 a1 b1)) b2 (t2tb11 x) y) r)
  (and (mem4 x u) (mem b2 y v))))) (mem
  (set1 (tuple2 (set1 (tuple2 a1 b1)) b2)) r
  (relation b2 (set1 (tuple2 a1 b1)) (t2tb10 u) v)))))))

(declare-fun t2tb2317 ((set (set (tuple21 (tuple21 a b) (tuple21 a
  d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a b) (tuple21 a d)))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 b1) (tuple2 a1 d1)))) (t2tb2317 x))))

(declare-fun tb2t2317 (uni) (set (set (tuple21 (tuple21 a b) (tuple21 a
  d)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a b) (tuple21 a d))))))
  (! (= (tb2t2317 (t2tb2317 i)) i) :pattern ((t2tb2317 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 b1) (tuple2 a1 d1)))) j)
     (= (t2tb2317 (tb2t2317 j)) j)) :pattern ((t2tb2317 (tb2t2317 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a b))) (v (set (tuple21 a d)))
  (r (set (tuple21 (tuple21 a b) (tuple21 a d)))))
  (= (mem (set1 (tuple2 (tuple2 a1 b1) (tuple2 a1 d1))) (t2tb2272 r)
  (relation (tuple2 a1 d1) (tuple2 a1 b1) (t2tb11 u) (t2tb903 v)))
  (forall ((x (tuple21 a b)) (y (tuple21 a d)))
  (=> (mem (tuple2 (tuple2 a1 b1) (tuple2 a1 d1))
  (Tuple2 (tuple2 a1 b1) (tuple2 a1 d1) (t2tb13 x) (t2tb904 y)) (t2tb2272 r))
  (and (mem3 x u) (mem32 y v)))))))

(declare-fun t2tb2073 ((set (set (tuple21 (tuple21 a b) (tuple21 b
  d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a b) (tuple21 b d)))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 b1) (tuple2 b1 d1)))) (t2tb2073 x))))

(declare-fun tb2t2073 (uni) (set (set (tuple21 (tuple21 a b) (tuple21 b
  d)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a b) (tuple21 b d))))))
  (! (= (tb2t2073 (t2tb2073 i)) i) :pattern ((t2tb2073 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 b1) (tuple2 b1 d1)))) j)
     (= (t2tb2073 (tb2t2073 j)) j)) :pattern ((t2tb2073 (tb2t2073 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a b))) (v (set (tuple21 b d)))
  (r (set (tuple21 (tuple21 a b) (tuple21 b d)))))
  (= (mem (set1 (tuple2 (tuple2 a1 b1) (tuple2 b1 d1))) (t2tb2052 r)
  (relation (tuple2 b1 d1) (tuple2 a1 b1) (t2tb11 u) (t2tb687 v)))
  (forall ((x (tuple21 a b)) (y (tuple21 b d)))
  (=> (mem (tuple2 (tuple2 a1 b1) (tuple2 b1 d1))
  (Tuple2 (tuple2 a1 b1) (tuple2 b1 d1) (t2tb13 x) (t2tb692 y)) (t2tb2052 r))
  (and (mem3 x u) (mem23 y v)))))))

(declare-fun t2tb1000 ((set (set (tuple21 (tuple21 a b) (set (tuple21 c
  d)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a b) (set (tuple21 c d))))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 b1) (set1 (tuple2 c1 d1))))) (t2tb1000 x))))

(declare-fun tb2t1000 (uni) (set (set (tuple21 (tuple21 a b) (set (tuple21 c
  d))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a b) (set (tuple21 c d)))))))
  (! (= (tb2t1000 (t2tb1000 i)) i) :pattern ((t2tb1000 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 b1) (set1 (tuple2 c1 d1))))) j)
     (= (t2tb1000 (tb2t1000 j)) j)) :pattern ((t2tb1000 (tb2t1000 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a b))) (v (set (set (tuple21 c d))))
  (r (set (tuple21 (tuple21 a b) (set (tuple21 c d))))))
  (= (mem (set1 (tuple2 (tuple2 a1 b1) (set1 (tuple2 c1 d1)))) (t2tb877 r)
  (relation (set1 (tuple2 c1 d1)) (tuple2 a1 b1) (t2tb11 u) (t2tb688 v)))
  (forall ((x (tuple21 a b)) (y (set (tuple21 c d))))
  (=> (mem (tuple2 (tuple2 a1 b1) (set1 (tuple2 c1 d1)))
  (Tuple2 (tuple2 a1 b1) (set1 (tuple2 c1 d1)) (t2tb13 x) (t2tb689 y))
  (t2tb877 r)) (and (mem3 x u) (mem22 y v)))))))

(declare-fun t2tb1001 ((set (set (tuple21 (tuple21 a b) (tuple21 c
  d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a b) (tuple21 c d)))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)))) (t2tb1001 x))))

(declare-fun tb2t1001 (uni) (set (set (tuple21 (tuple21 a b) (tuple21 c
  d)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a b) (tuple21 c d))))))
  (! (= (tb2t1001 (t2tb1001 i)) i) :pattern ((t2tb1001 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)))) j)
     (= (t2tb1001 (tb2t1001 j)) j)) :pattern ((t2tb1001 (tb2t1001 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a b))) (v (set (tuple21 c d)))
  (r (set (tuple21 (tuple21 a b) (tuple21 c d)))))
  (= (mem (set1 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1))) (t2tb879 r)
  (relation (tuple2 c1 d1) (tuple2 a1 b1) (t2tb11 u) (t2tb689 v)))
  (forall ((x (tuple21 a b)) (y (tuple21 c d)))
  (=> (mem (tuple2 (tuple2 a1 b1) (tuple2 c1 d1))
  (Tuple2 (tuple2 a1 b1) (tuple2 c1 d1) (t2tb13 x) (t2tb693 y)) (t2tb879 r))
  (and (mem3 x u) (mem21 y v)))))))

(declare-fun t2tb1002 ((set (set (tuple21 (tuple21 a b) d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a b) d))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 b1) d1))) (t2tb1002 x))))

(declare-fun tb2t1002 (uni) (set (set (tuple21 (tuple21 a b) d))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a b) d)))))
  (! (= (tb2t1002 (t2tb1002 i)) i) :pattern ((t2tb1002 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 b1) d1))) j)
     (= (t2tb1002 (tb2t1002 j)) j)) :pattern ((t2tb1002 (tb2t1002 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a b))) (v (set d)) (r (set (tuple21 (tuple21 a b)
  d))))
  (= (mem (set1 (tuple2 (tuple2 a1 b1) d1)) (t2tb881 r)
  (relation d1 (tuple2 a1 b1) (t2tb11 u) (t2tb690 v)))
  (forall ((x (tuple21 a b)) (y d))
  (=> (mem (tuple2 (tuple2 a1 b1) d1)
  (Tuple2 (tuple2 a1 b1) d1 (t2tb13 x) (t2tb694 y)) (t2tb881 r))
  (and (mem3 x u) (mem20 y v)))))))

(declare-fun t2tb316 ((set (set (tuple21 (tuple21 a b) (tuple21 a c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a b) (tuple21 a c)))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)))) (t2tb316 x))))

(declare-fun tb2t316 (uni) (set (set (tuple21 (tuple21 a b) (tuple21 a c)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a b) (tuple21 a c))))))
  (! (= (tb2t316 (t2tb316 i)) i) :pattern ((t2tb316 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)))) j)
     (= (t2tb316 (tb2t316 j)) j)) :pattern ((t2tb316 (tb2t316 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a b))) (v (set (tuple21 a c)))
  (r (set (tuple21 (tuple21 a b) (tuple21 a c)))))
  (= (mem (set1 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1))) (t2tb238 r)
  (relation (tuple2 a1 c1) (tuple2 a1 b1) (t2tb11 u) (t2tb129 v)))
  (forall ((x (tuple21 a b)) (y (tuple21 a c)))
  (=> (mem (tuple2 (tuple2 a1 b1) (tuple2 a1 c1))
  (Tuple2 (tuple2 a1 b1) (tuple2 a1 c1) (t2tb13 x) (t2tb133 y)) (t2tb238 r))
  (and (mem3 x u) (mem10 y v)))))))

(declare-fun t2tb1165 ((set (set (tuple21 (tuple21 a b) (set (tuple21 b
  c)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a b) (set (tuple21 b c))))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 b1) (set1 (tuple2 b1 c1))))) (t2tb1165 x))))

(declare-fun tb2t1165 (uni) (set (set (tuple21 (tuple21 a b) (set (tuple21 b
  c))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a b) (set (tuple21 b c)))))))
  (! (= (tb2t1165 (t2tb1165 i)) i) :pattern ((t2tb1165 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 b1) (set1 (tuple2 b1 c1))))) j)
     (= (t2tb1165 (tb2t1165 j)) j)) :pattern ((t2tb1165 (tb2t1165 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a b))) (v (set (set (tuple21 b c))))
  (r (set (tuple21 (tuple21 a b) (set (tuple21 b c))))))
  (= (mem (set1 (tuple2 (tuple2 a1 b1) (set1 (tuple2 b1 c1)))) (t2tb1133 r)
  (relation (set1 (tuple2 b1 c1)) (tuple2 a1 b1) (t2tb11 u) (t2tb130 v)))
  (forall ((x (tuple21 a b)) (y (set (tuple21 b c))))
  (=> (mem (tuple2 (tuple2 a1 b1) (set1 (tuple2 b1 c1)))
  (Tuple2 (tuple2 a1 b1) (set1 (tuple2 b1 c1)) (t2tb13 x) (t2tb131 y))
  (t2tb1133 r)) (and (mem3 x u) (mem9 y v)))))))

(declare-fun t2tb1166 ((set (set (tuple21 (tuple21 a b) (tuple21 b
  c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a b) (tuple21 b c)))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 b1) (tuple2 b1 c1)))) (t2tb1166 x))))

(declare-fun tb2t1166 (uni) (set (set (tuple21 (tuple21 a b) (tuple21 b
  c)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a b) (tuple21 b c))))))
  (! (= (tb2t1166 (t2tb1166 i)) i) :pattern ((t2tb1166 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 b1) (tuple2 b1 c1)))) j)
     (= (t2tb1166 (tb2t1166 j)) j)) :pattern ((t2tb1166 (tb2t1166 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a b))) (v (set (tuple21 b c)))
  (r (set (tuple21 (tuple21 a b) (tuple21 b c)))))
  (= (mem (set1 (tuple2 (tuple2 a1 b1) (tuple2 b1 c1))) (t2tb1135 r)
  (relation (tuple2 b1 c1) (tuple2 a1 b1) (t2tb11 u) (t2tb131 v)))
  (forall ((x (tuple21 a b)) (y (tuple21 b c)))
  (=> (mem (tuple2 (tuple2 a1 b1) (tuple2 b1 c1))
  (Tuple2 (tuple2 a1 b1) (tuple2 b1 c1) (t2tb13 x) (t2tb134 y)) (t2tb1135 r))
  (and (mem3 x u) (mem8 y v)))))))

(declare-fun t2tb319 ((set (set (tuple21 (tuple21 a b) c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a b) c))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 b1) c1))) (t2tb319 x))))

(declare-fun tb2t319 (uni) (set (set (tuple21 (tuple21 a b) c))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a b) c)))))
  (! (= (tb2t319 (t2tb319 i)) i) :pattern ((t2tb319 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 b1) c1))) j)
     (= (t2tb319 (tb2t319 j)) j)) :pattern ((t2tb319 (tb2t319 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a b))) (v (set c)) (r (set (tuple21 (tuple21 a b)
  c))))
  (= (mem (set1 (tuple2 (tuple2 a1 b1) c1)) (t2tb245 r)
  (relation c1 (tuple2 a1 b1) (t2tb11 u) (t2tb132 v)))
  (forall ((x (tuple21 a b)) (y c))
  (=> (mem (tuple2 (tuple2 a1 b1) c1)
  (Tuple2 (tuple2 a1 b1) c1 (t2tb13 x) (t2tb135 y)) (t2tb245 r))
  (and (mem3 x u) (mem7 y v)))))))

(declare-fun t2tb49 ((set (set (tuple21 (tuple21 a b) (set (tuple21 a
  b)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a b) (set (tuple21 a b))))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 b1))))) (t2tb49 x))))

(declare-fun tb2t49 (uni) (set (set (tuple21 (tuple21 a b) (set (tuple21 a
  b))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a b) (set (tuple21 a b)))))))
  (! (= (tb2t49 (t2tb49 i)) i) :pattern ((t2tb49 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 b1))))) j)
     (= (t2tb49 (tb2t49 j)) j)) :pattern ((t2tb49 (tb2t49 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a b))) (v (set (set (tuple21 a b))))
  (r (set (tuple21 (tuple21 a b) (set (tuple21 a b))))))
  (= (mem (set1 (tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 b1)))) (t2tb23 r)
  (relation (set1 (tuple2 a1 b1)) (tuple2 a1 b1) (t2tb11 u) (t2tb10 v)))
  (forall ((x (tuple21 a b)) (y (set (tuple21 a b))))
  (=> (mem (tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 b1)))
  (Tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 b1)) (t2tb13 x) (t2tb11 y))
  (t2tb23 r)) (and (mem3 x u) (mem4 y v)))))))

(declare-fun t2tb50 ((set (set (tuple21 (tuple21 a b) (tuple21 a b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a b) (tuple21 a b)))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 b1) (tuple2 a1 b1)))) (t2tb50 x))))

(declare-fun tb2t50 (uni) (set (set (tuple21 (tuple21 a b) (tuple21 a b)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a b) (tuple21 a b))))))
  (! (= (tb2t50 (t2tb50 i)) i) :pattern ((t2tb50 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 b1) (tuple2 a1 b1)))) j)
     (= (t2tb50 (tb2t50 j)) j)) :pattern ((t2tb50 (tb2t50 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a b))) (v (set (tuple21 a b)))
  (r (set (tuple21 (tuple21 a b) (tuple21 a b)))))
  (= (mem (set1 (tuple2 (tuple2 a1 b1) (tuple2 a1 b1))) (t2tb25 r)
  (relation (tuple2 a1 b1) (tuple2 a1 b1) (t2tb11 u) (t2tb11 v)))
  (forall ((x (tuple21 a b)) (y (tuple21 a b)))
  (=> (mem (tuple2 (tuple2 a1 b1) (tuple2 a1 b1))
  (Tuple2 (tuple2 a1 b1) (tuple2 a1 b1) (t2tb13 x) (t2tb13 y)) (t2tb25 r))
  (and (mem3 x u) (mem3 y v)))))))

(declare-fun t2tb51 ((set (set (tuple21 (tuple21 a b) b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a b) b))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 b1) b1))) (t2tb51 x))))

(declare-fun tb2t51 (uni) (set (set (tuple21 (tuple21 a b) b))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a b) b)))))
  (! (= (tb2t51 (t2tb51 i)) i) :pattern ((t2tb51 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 b1) b1))) j)
     (= (t2tb51 (tb2t51 j)) j)) :pattern ((t2tb51 (tb2t51 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a b))) (v (set b)) (r (set (tuple21 (tuple21 a b)
  b))))
  (= (mem (set1 (tuple2 (tuple2 a1 b1) b1)) (t2tb27 r)
  (relation b1 (tuple2 a1 b1) (t2tb11 u) (t2tb12 v)))
  (forall ((x (tuple21 a b)) (y b))
  (=> (mem (tuple2 (tuple2 a1 b1) b1)
  (Tuple2 (tuple2 a1 b1) b1 (t2tb13 x) (t2tb14 y)) (t2tb27 r))
  (and (mem3 x u) (mem2 y v)))))))

(declare-fun t2tb52 ((set (set (tuple21 (tuple21 a b) a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a b) a))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 b1) a1))) (t2tb52 x))))

(declare-fun tb2t52 (uni) (set (set (tuple21 (tuple21 a b) a))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a b) a)))))
  (! (= (tb2t52 (t2tb52 i)) i) :pattern ((t2tb52 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 b1) a1))) j)
     (= (t2tb52 (tb2t52 j)) j)) :pattern ((t2tb52 (tb2t52 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a b))) (v (set a)) (r (set (tuple21 (tuple21 a b)
  a))))
  (= (mem (set1 (tuple2 (tuple2 a1 b1) a1)) (t2tb29 r)
  (relation a1 (tuple2 a1 b1) (t2tb11 u) (t2tb1 v)))
  (forall ((x (tuple21 a b)) (y a))
  (=> (mem (tuple2 (tuple2 a1 b1) a1)
  (Tuple2 (tuple2 a1 b1) a1 (t2tb13 x) (t2tb2 y)) (t2tb29 r))
  (and (mem3 x u) (mem1 y v)))))))

;; mem_relation
  (assert
  (forall ((b2 ty))
  (forall ((u (set (tuple21 a b))) (v uni) (r uni))
  (and
  (=> (mem (set1 (tuple2 (tuple2 a1 b1) b2)) r
  (relation b2 (tuple2 a1 b1) (t2tb11 u) v))
  (forall ((x (tuple21 a b)) (y uni))
  (=> (mem (tuple2 (tuple2 a1 b1) b2) (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) y)
  r) (and (mem3 x u) (mem b2 y v)))))
  (=>
  (forall ((x (tuple21 a b)) (y uni))
  (=> (sort b2 y)
  (=> (mem (tuple2 (tuple2 a1 b1) b2) (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) y)
  r) (and (mem3 x u) (mem b2 y v))))) (mem (set1 (tuple2 (tuple2 a1 b1) b2))
  r (relation b2 (tuple2 a1 b1) (t2tb11 u) v)))))))

(declare-fun t2tb2318 ((set (set (tuple21 b (tuple21 a d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 b (tuple21 a d)))))) (sort
  (set1 (set1 (tuple2 b1 (tuple2 a1 d1)))) (t2tb2318 x))))

(declare-fun tb2t2318 (uni) (set (set (tuple21 b (tuple21 a d)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 b (tuple21 a d))))))
  (! (= (tb2t2318 (t2tb2318 i)) i) :pattern ((t2tb2318 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 b1 (tuple2 a1 d1)))) j)
     (= (t2tb2318 (tb2t2318 j)) j)) :pattern ((t2tb2318 (tb2t2318 j))) )))

;; mem_relation
  (assert
  (forall ((u (set b)) (v (set (tuple21 a d))) (r (set (tuple21 b (tuple21 a
  d)))))
  (= (mem (set1 (tuple2 b1 (tuple2 a1 d1))) (t2tb2274 r)
  (relation (tuple2 a1 d1) b1 (t2tb12 u) (t2tb903 v)))
  (forall ((x b) (y (tuple21 a d)))
  (=> (mem (tuple2 b1 (tuple2 a1 d1))
  (Tuple2 b1 (tuple2 a1 d1) (t2tb14 x) (t2tb904 y)) (t2tb2274 r))
  (and (mem2 x u) (mem32 y v)))))))

(declare-fun t2tb2074 ((set (set (tuple21 b (tuple21 b d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 b (tuple21 b d)))))) (sort
  (set1 (set1 (tuple2 b1 (tuple2 b1 d1)))) (t2tb2074 x))))

(declare-fun tb2t2074 (uni) (set (set (tuple21 b (tuple21 b d)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 b (tuple21 b d))))))
  (! (= (tb2t2074 (t2tb2074 i)) i) :pattern ((t2tb2074 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 b1 (tuple2 b1 d1)))) j)
     (= (t2tb2074 (tb2t2074 j)) j)) :pattern ((t2tb2074 (tb2t2074 j))) )))

;; mem_relation
  (assert
  (forall ((u (set b)) (v (set (tuple21 b d))) (r (set (tuple21 b (tuple21 b
  d)))))
  (= (mem (set1 (tuple2 b1 (tuple2 b1 d1))) (t2tb2054 r)
  (relation (tuple2 b1 d1) b1 (t2tb12 u) (t2tb687 v)))
  (forall ((x b) (y (tuple21 b d)))
  (=> (mem (tuple2 b1 (tuple2 b1 d1))
  (Tuple2 b1 (tuple2 b1 d1) (t2tb14 x) (t2tb692 y)) (t2tb2054 r))
  (and (mem2 x u) (mem23 y v)))))))

(declare-fun t2tb1006 ((set (set (tuple21 b (set (tuple21 c d)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 b (set (tuple21 c d))))))) (sort
  (set1 (set1 (tuple2 b1 (set1 (tuple2 c1 d1))))) (t2tb1006 x))))

(declare-fun tb2t1006 (uni) (set (set (tuple21 b (set (tuple21 c d))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 b (set (tuple21 c d)))))))
  (! (= (tb2t1006 (t2tb1006 i)) i) :pattern ((t2tb1006 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 b1 (set1 (tuple2 c1 d1))))) j)
     (= (t2tb1006 (tb2t1006 j)) j)) :pattern ((t2tb1006 (tb2t1006 j))) )))

;; mem_relation
  (assert
  (forall ((u (set b)) (v (set (set (tuple21 c d)))) (r (set (tuple21 b
  (set (tuple21 c d))))))
  (= (mem (set1 (tuple2 b1 (set1 (tuple2 c1 d1)))) (t2tb889 r)
  (relation (set1 (tuple2 c1 d1)) b1 (t2tb12 u) (t2tb688 v)))
  (forall ((x b) (y (set (tuple21 c d))))
  (=> (mem (tuple2 b1 (set1 (tuple2 c1 d1)))
  (Tuple2 b1 (set1 (tuple2 c1 d1)) (t2tb14 x) (t2tb689 y)) (t2tb889 r))
  (and (mem2 x u) (mem22 y v)))))))

(declare-fun t2tb1007 ((set (set (tuple21 b (tuple21 c d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 b (tuple21 c d)))))) (sort
  (set1 (set1 (tuple2 b1 (tuple2 c1 d1)))) (t2tb1007 x))))

(declare-fun tb2t1007 (uni) (set (set (tuple21 b (tuple21 c d)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 b (tuple21 c d))))))
  (! (= (tb2t1007 (t2tb1007 i)) i) :pattern ((t2tb1007 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 b1 (tuple2 c1 d1)))) j)
     (= (t2tb1007 (tb2t1007 j)) j)) :pattern ((t2tb1007 (tb2t1007 j))) )))

;; mem_relation
  (assert
  (forall ((u (set b)) (v (set (tuple21 c d))) (r (set (tuple21 b (tuple21 c
  d)))))
  (= (mem (set1 (tuple2 b1 (tuple2 c1 d1))) (t2tb891 r)
  (relation (tuple2 c1 d1) b1 (t2tb12 u) (t2tb689 v)))
  (forall ((x b) (y (tuple21 c d)))
  (=> (mem (tuple2 b1 (tuple2 c1 d1))
  (Tuple2 b1 (tuple2 c1 d1) (t2tb14 x) (t2tb693 y)) (t2tb891 r))
  (and (mem2 x u) (mem21 y v)))))))

;; mem_relation
  (assert
  (forall ((u (set b)) (v (set d)) (r (set (tuple21 b d))))
  (= (mem (set1 (tuple2 b1 d1)) (t2tb687 r)
  (relation d1 b1 (t2tb12 u) (t2tb690 v)))
  (forall ((x b) (y d))
  (=> (mem23 (tb2t692 (Tuple2 b1 d1 (t2tb14 x) (t2tb694 y))) r)
  (and (mem2 x u) (mem20 y v)))))))

(declare-fun t2tb321 ((set (set (tuple21 b (tuple21 a c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 b (tuple21 a c)))))) (sort
  (set1 (set1 (tuple2 b1 (tuple2 a1 c1)))) (t2tb321 x))))

(declare-fun tb2t321 (uni) (set (set (tuple21 b (tuple21 a c)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 b (tuple21 a c))))))
  (! (= (tb2t321 (t2tb321 i)) i) :pattern ((t2tb321 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 b1 (tuple2 a1 c1)))) j)
     (= (t2tb321 (tb2t321 j)) j)) :pattern ((t2tb321 (tb2t321 j))) )))

;; mem_relation
  (assert
  (forall ((u (set b)) (v (set (tuple21 a c))) (r (set (tuple21 b (tuple21 a
  c)))))
  (= (mem (set1 (tuple2 b1 (tuple2 a1 c1))) (t2tb248 r)
  (relation (tuple2 a1 c1) b1 (t2tb12 u) (t2tb129 v)))
  (forall ((x b) (y (tuple21 a c)))
  (=> (mem (tuple2 b1 (tuple2 a1 c1))
  (Tuple2 b1 (tuple2 a1 c1) (t2tb14 x) (t2tb133 y)) (t2tb248 r))
  (and (mem2 x u) (mem10 y v)))))))

(declare-fun t2tb1167 ((set (set (tuple21 b (set (tuple21 b c)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 b (set (tuple21 b c))))))) (sort
  (set1 (set1 (tuple2 b1 (set1 (tuple2 b1 c1))))) (t2tb1167 x))))

(declare-fun tb2t1167 (uni) (set (set (tuple21 b (set (tuple21 b c))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 b (set (tuple21 b c)))))))
  (! (= (tb2t1167 (t2tb1167 i)) i) :pattern ((t2tb1167 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 b1 (set1 (tuple2 b1 c1))))) j)
     (= (t2tb1167 (tb2t1167 j)) j)) :pattern ((t2tb1167 (tb2t1167 j))) )))

;; mem_relation
  (assert
  (forall ((u (set b)) (v (set (set (tuple21 b c)))) (r (set (tuple21 b
  (set (tuple21 b c))))))
  (= (mem (set1 (tuple2 b1 (set1 (tuple2 b1 c1)))) (t2tb1138 r)
  (relation (set1 (tuple2 b1 c1)) b1 (t2tb12 u) (t2tb130 v)))
  (forall ((x b) (y (set (tuple21 b c))))
  (=> (mem (tuple2 b1 (set1 (tuple2 b1 c1)))
  (Tuple2 b1 (set1 (tuple2 b1 c1)) (t2tb14 x) (t2tb131 y)) (t2tb1138 r))
  (and (mem2 x u) (mem9 y v)))))))

(declare-fun t2tb1168 ((set (set (tuple21 b (tuple21 b c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 b (tuple21 b c)))))) (sort
  (set1 (set1 (tuple2 b1 (tuple2 b1 c1)))) (t2tb1168 x))))

(declare-fun tb2t1168 (uni) (set (set (tuple21 b (tuple21 b c)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 b (tuple21 b c))))))
  (! (= (tb2t1168 (t2tb1168 i)) i) :pattern ((t2tb1168 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 b1 (tuple2 b1 c1)))) j)
     (= (t2tb1168 (tb2t1168 j)) j)) :pattern ((t2tb1168 (tb2t1168 j))) )))

;; mem_relation
  (assert
  (forall ((u (set b)) (v (set (tuple21 b c))) (r (set (tuple21 b (tuple21 b
  c)))))
  (= (mem (set1 (tuple2 b1 (tuple2 b1 c1))) (t2tb1139 r)
  (relation (tuple2 b1 c1) b1 (t2tb12 u) (t2tb131 v)))
  (forall ((x b) (y (tuple21 b c)))
  (=> (mem (tuple2 b1 (tuple2 b1 c1))
  (Tuple2 b1 (tuple2 b1 c1) (t2tb14 x) (t2tb134 y)) (t2tb1139 r))
  (and (mem2 x u) (mem8 y v)))))))

;; mem_relation
  (assert
  (forall ((u (set b)) (v (set c)) (r (set (tuple21 b c))))
  (= (mem9 r (relation4 u v))
  (forall ((x b) (y c))
  (=> (mem8 (tb2t134 (Tuple2 b1 c1 (t2tb14 x) (t2tb135 y))) r)
  (and (mem2 x u) (mem7 y v)))))))

(declare-fun t2tb53 ((set (set (tuple21 b (set (tuple21 a b)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 b (set (tuple21 a b))))))) (sort
  (set1 (set1 (tuple2 b1 (set1 (tuple2 a1 b1))))) (t2tb53 x))))

(declare-fun tb2t53 (uni) (set (set (tuple21 b (set (tuple21 a b))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 b (set (tuple21 a b)))))))
  (! (= (tb2t53 (t2tb53 i)) i) :pattern ((t2tb53 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 b1 (set1 (tuple2 a1 b1))))) j)
     (= (t2tb53 (tb2t53 j)) j)) :pattern ((t2tb53 (tb2t53 j))) )))

;; mem_relation
  (assert
  (forall ((u (set b)) (v (set (set (tuple21 a b)))) (r (set (tuple21 b
  (set (tuple21 a b))))))
  (= (mem (set1 (tuple2 b1 (set1 (tuple2 a1 b1)))) (t2tb31 r)
  (relation (set1 (tuple2 a1 b1)) b1 (t2tb12 u) (t2tb10 v)))
  (forall ((x b) (y (set (tuple21 a b))))
  (=> (mem (tuple2 b1 (set1 (tuple2 a1 b1)))
  (Tuple2 b1 (set1 (tuple2 a1 b1)) (t2tb14 x) (t2tb11 y)) (t2tb31 r))
  (and (mem2 x u) (mem4 y v)))))))

(declare-fun t2tb54 ((set (set (tuple21 b (tuple21 a b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 b (tuple21 a b)))))) (sort
  (set1 (set1 (tuple2 b1 (tuple2 a1 b1)))) (t2tb54 x))))

(declare-fun tb2t54 (uni) (set (set (tuple21 b (tuple21 a b)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 b (tuple21 a b))))))
  (! (= (tb2t54 (t2tb54 i)) i) :pattern ((t2tb54 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 b1 (tuple2 a1 b1)))) j)
     (= (t2tb54 (tb2t54 j)) j)) :pattern ((t2tb54 (tb2t54 j))) )))

;; mem_relation
  (assert
  (forall ((u (set b)) (v (set (tuple21 a b))) (r (set (tuple21 b (tuple21 a
  b)))))
  (= (mem (set1 (tuple2 b1 (tuple2 a1 b1))) (t2tb34 r)
  (relation (tuple2 a1 b1) b1 (t2tb12 u) (t2tb11 v)))
  (forall ((x b) (y (tuple21 a b)))
  (=> (mem (tuple2 b1 (tuple2 a1 b1))
  (Tuple2 b1 (tuple2 a1 b1) (t2tb14 x) (t2tb13 y)) (t2tb34 r))
  (and (mem2 x u) (mem3 y v)))))))

(declare-fun t2tb55 ((set (set (tuple21 b b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 b b))))) (sort (set1 (set1 (tuple2 b1 b1)))
  (t2tb55 x))))

(declare-fun tb2t55 (uni) (set (set (tuple21 b b))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 b b)))))
  (! (= (tb2t55 (t2tb55 i)) i) :pattern ((t2tb55 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 b1 b1))) j) (= (t2tb55 (tb2t55 j)) j)) :pattern (
  (t2tb55 (tb2t55 j))) )))

;; mem_relation
  (assert
  (forall ((u (set b)) (v (set b)) (r (set (tuple21 b b))))
  (= (mem (set1 (tuple2 b1 b1)) (t2tb35 r)
  (relation b1 b1 (t2tb12 u) (t2tb12 v)))
  (forall ((x b) (y b))
  (=> (mem (tuple2 b1 b1) (Tuple2 b1 b1 (t2tb14 x) (t2tb14 y)) (t2tb35 r))
  (and (mem2 x u) (mem2 y v)))))))

(declare-fun t2tb56 ((set (set (tuple21 b a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 b a))))) (sort (set1 (set1 (tuple2 b1 a1)))
  (t2tb56 x))))

(declare-fun tb2t56 (uni) (set (set (tuple21 b a))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 b a)))))
  (! (= (tb2t56 (t2tb56 i)) i) :pattern ((t2tb56 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 b1 a1))) j) (= (t2tb56 (tb2t56 j)) j)) :pattern (
  (t2tb56 (tb2t56 j))) )))

;; mem_relation
  (assert
  (forall ((u (set b)) (v (set a)) (r (set (tuple21 b a))))
  (= (mem (set1 (tuple2 b1 a1)) (t2tb37 r)
  (relation a1 b1 (t2tb12 u) (t2tb1 v)))
  (forall ((x b) (y a))
  (=> (mem (tuple2 b1 a1) (Tuple2 b1 a1 (t2tb14 x) (t2tb2 y)) (t2tb37 r))
  (and (mem2 x u) (mem1 y v)))))))

;; mem_relation
  (assert
  (forall ((b2 ty))
  (forall ((u (set b)) (v uni) (r uni))
  (and
  (=> (mem (set1 (tuple2 b1 b2)) r (relation b2 b1 (t2tb12 u) v))
  (forall ((x b) (y uni))
  (=> (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) y) r)
  (and (mem2 x u) (mem b2 y v)))))
  (=>
  (forall ((x b) (y uni))
  (=> (sort b2 y)
  (=> (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) y) r)
  (and (mem2 x u) (mem b2 y v))))) (mem (set1 (tuple2 b1 b2)) r
  (relation b2 b1 (t2tb12 u) v)))))))

(declare-fun t2tb2319 ((set (set (tuple21 a (tuple21 a d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 a (tuple21 a d)))))) (sort
  (set1 (set1 (tuple2 a1 (tuple2 a1 d1)))) (t2tb2319 x))))

(declare-fun tb2t2319 (uni) (set (set (tuple21 a (tuple21 a d)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 a (tuple21 a d))))))
  (! (= (tb2t2319 (t2tb2319 i)) i) :pattern ((t2tb2319 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 a1 (tuple2 a1 d1)))) j)
     (= (t2tb2319 (tb2t2319 j)) j)) :pattern ((t2tb2319 (tb2t2319 j))) )))

;; mem_relation
  (assert
  (forall ((u (set a)) (v (set (tuple21 a d))) (r (set (tuple21 a (tuple21 a
  d)))))
  (= (mem (set1 (tuple2 a1 (tuple2 a1 d1))) (t2tb2276 r)
  (relation (tuple2 a1 d1) a1 (t2tb1 u) (t2tb903 v)))
  (forall ((x a) (y (tuple21 a d)))
  (=> (mem (tuple2 a1 (tuple2 a1 d1))
  (Tuple2 a1 (tuple2 a1 d1) (t2tb2 x) (t2tb904 y)) (t2tb2276 r))
  (and (mem1 x u) (mem32 y v)))))))

(declare-fun t2tb2075 ((set (set (tuple21 a (tuple21 b d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 a (tuple21 b d)))))) (sort
  (set1 (set1 (tuple2 a1 (tuple2 b1 d1)))) (t2tb2075 x))))

(declare-fun tb2t2075 (uni) (set (set (tuple21 a (tuple21 b d)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 a (tuple21 b d))))))
  (! (= (tb2t2075 (t2tb2075 i)) i) :pattern ((t2tb2075 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 a1 (tuple2 b1 d1)))) j)
     (= (t2tb2075 (tb2t2075 j)) j)) :pattern ((t2tb2075 (tb2t2075 j))) )))

;; mem_relation
  (assert
  (forall ((u (set a)) (v (set (tuple21 b d))) (r (set (tuple21 a (tuple21 b
  d)))))
  (= (mem (set1 (tuple2 a1 (tuple2 b1 d1))) (t2tb2056 r)
  (relation (tuple2 b1 d1) a1 (t2tb1 u) (t2tb687 v)))
  (forall ((x a) (y (tuple21 b d)))
  (=> (mem (tuple2 a1 (tuple2 b1 d1))
  (Tuple2 a1 (tuple2 b1 d1) (t2tb2 x) (t2tb692 y)) (t2tb2056 r))
  (and (mem1 x u) (mem23 y v)))))))

(declare-fun t2tb1011 ((set (set (tuple21 a (set (tuple21 c d)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 a (set (tuple21 c d))))))) (sort
  (set1 (set1 (tuple2 a1 (set1 (tuple2 c1 d1))))) (t2tb1011 x))))

(declare-fun tb2t1011 (uni) (set (set (tuple21 a (set (tuple21 c d))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 a (set (tuple21 c d)))))))
  (! (= (tb2t1011 (t2tb1011 i)) i) :pattern ((t2tb1011 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 a1 (set1 (tuple2 c1 d1))))) j)
     (= (t2tb1011 (tb2t1011 j)) j)) :pattern ((t2tb1011 (tb2t1011 j))) )))

;; mem_relation
  (assert
  (forall ((u (set a)) (v (set (set (tuple21 c d)))) (r (set (tuple21 a
  (set (tuple21 c d))))))
  (= (mem (set1 (tuple2 a1 (set1 (tuple2 c1 d1)))) (t2tb899 r)
  (relation (set1 (tuple2 c1 d1)) a1 (t2tb1 u) (t2tb688 v)))
  (forall ((x a) (y (set (tuple21 c d))))
  (=> (mem (tuple2 a1 (set1 (tuple2 c1 d1)))
  (Tuple2 a1 (set1 (tuple2 c1 d1)) (t2tb2 x) (t2tb689 y)) (t2tb899 r))
  (and (mem1 x u) (mem22 y v)))))))

(declare-fun t2tb1012 ((set (set (tuple21 a (tuple21 c d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 a (tuple21 c d)))))) (sort
  (set1 (set1 (tuple2 a1 (tuple2 c1 d1)))) (t2tb1012 x))))

(declare-fun tb2t1012 (uni) (set (set (tuple21 a (tuple21 c d)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 a (tuple21 c d))))))
  (! (= (tb2t1012 (t2tb1012 i)) i) :pattern ((t2tb1012 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 a1 (tuple2 c1 d1)))) j)
     (= (t2tb1012 (tb2t1012 j)) j)) :pattern ((t2tb1012 (tb2t1012 j))) )))

;; mem_relation
  (assert
  (forall ((u (set a)) (v (set (tuple21 c d))) (r (set (tuple21 a (tuple21 c
  d)))))
  (= (mem (set1 (tuple2 a1 (tuple2 c1 d1))) (t2tb901 r)
  (relation (tuple2 c1 d1) a1 (t2tb1 u) (t2tb689 v)))
  (forall ((x a) (y (tuple21 c d)))
  (=> (mem (tuple2 a1 (tuple2 c1 d1))
  (Tuple2 a1 (tuple2 c1 d1) (t2tb2 x) (t2tb693 y)) (t2tb901 r))
  (and (mem1 x u) (mem21 y v)))))))

;; mem_relation
  (assert
  (forall ((u (set a)) (v (set d)) (r (set (tuple21 a d))))
  (= (mem (set1 (tuple2 a1 d1)) (t2tb903 r)
  (relation d1 a1 (t2tb1 u) (t2tb690 v)))
  (forall ((x a) (y d))
  (=> (mem32 (tb2t904 (Tuple2 a1 d1 (t2tb2 x) (t2tb694 y))) r)
  (and (mem1 x u) (mem20 y v)))))))

(declare-fun t2tb325 ((set (set (tuple21 a (tuple21 a c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 a (tuple21 a c)))))) (sort
  (set1 (set1 (tuple2 a1 (tuple2 a1 c1)))) (t2tb325 x))))

(declare-fun tb2t325 (uni) (set (set (tuple21 a (tuple21 a c)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 a (tuple21 a c))))))
  (! (= (tb2t325 (t2tb325 i)) i) :pattern ((t2tb325 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 a1 (tuple2 a1 c1)))) j)
     (= (t2tb325 (tb2t325 j)) j)) :pattern ((t2tb325 (tb2t325 j))) )))

;; mem_relation
  (assert
  (forall ((u (set a)) (v (set (tuple21 a c))) (r (set (tuple21 a (tuple21 a
  c)))))
  (= (mem (set1 (tuple2 a1 (tuple2 a1 c1))) (t2tb256 r)
  (relation (tuple2 a1 c1) a1 (t2tb1 u) (t2tb129 v)))
  (forall ((x a) (y (tuple21 a c)))
  (=> (mem (tuple2 a1 (tuple2 a1 c1))
  (Tuple2 a1 (tuple2 a1 c1) (t2tb2 x) (t2tb133 y)) (t2tb256 r))
  (and (mem1 x u) (mem10 y v)))))))

(declare-fun t2tb1169 ((set (set (tuple21 a (set (tuple21 b c)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 a (set (tuple21 b c))))))) (sort
  (set1 (set1 (tuple2 a1 (set1 (tuple2 b1 c1))))) (t2tb1169 x))))

(declare-fun tb2t1169 (uni) (set (set (tuple21 a (set (tuple21 b c))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 a (set (tuple21 b c)))))))
  (! (= (tb2t1169 (t2tb1169 i)) i) :pattern ((t2tb1169 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 a1 (set1 (tuple2 b1 c1))))) j)
     (= (t2tb1169 (tb2t1169 j)) j)) :pattern ((t2tb1169 (tb2t1169 j))) )))

;; mem_relation
  (assert
  (forall ((u (set a)) (v (set (set (tuple21 b c)))) (r (set (tuple21 a
  (set (tuple21 b c))))))
  (= (mem (set1 (tuple2 a1 (set1 (tuple2 b1 c1)))) (t2tb1141 r)
  (relation (set1 (tuple2 b1 c1)) a1 (t2tb1 u) (t2tb130 v)))
  (forall ((x a) (y (set (tuple21 b c))))
  (=> (mem (tuple2 a1 (set1 (tuple2 b1 c1)))
  (Tuple2 a1 (set1 (tuple2 b1 c1)) (t2tb2 x) (t2tb131 y)) (t2tb1141 r))
  (and (mem1 x u) (mem9 y v)))))))

(declare-fun t2tb327 ((set (set (tuple21 a (tuple21 b c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 a (tuple21 b c)))))) (sort
  (set1 (set1 (tuple2 a1 (tuple2 b1 c1)))) (t2tb327 x))))

(declare-fun tb2t327 (uni) (set (set (tuple21 a (tuple21 b c)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 a (tuple21 b c))))))
  (! (= (tb2t327 (t2tb327 i)) i) :pattern ((t2tb327 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 a1 (tuple2 b1 c1)))) j)
     (= (t2tb327 (tb2t327 j)) j)) :pattern ((t2tb327 (tb2t327 j))) )))

;; mem_relation
  (assert
  (forall ((u (set a)) (v (set (tuple21 b c))) (r (set (tuple21 a (tuple21 b
  c)))))
  (= (mem (set1 (tuple2 a1 (tuple2 b1 c1))) (t2tb261 r)
  (relation (tuple2 b1 c1) a1 (t2tb1 u) (t2tb131 v)))
  (forall ((x a) (y (tuple21 b c)))
  (=> (mem (tuple2 a1 (tuple2 b1 c1))
  (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 y)) (t2tb261 r))
  (and (mem1 x u) (mem8 y v)))))))

;; mem_relation
  (assert
  (forall ((u (set a)) (v (set c)) (r (set (tuple21 a c))))
  (= (mem (set1 (tuple2 a1 c1)) (t2tb129 r)
  (relation c1 a1 (t2tb1 u) (t2tb132 v)))
  (forall ((x a) (y c))
  (=> (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y))) r)
  (and (mem1 x u) (mem7 y v)))))))

(declare-fun t2tb57 ((set (set (tuple21 a (set (tuple21 a b)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 a (set (tuple21 a b))))))) (sort
  (set1 (set1 (tuple2 a1 (set1 (tuple2 a1 b1))))) (t2tb57 x))))

(declare-fun tb2t57 (uni) (set (set (tuple21 a (set (tuple21 a b))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 a (set (tuple21 a b)))))))
  (! (= (tb2t57 (t2tb57 i)) i) :pattern ((t2tb57 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 a1 (set1 (tuple2 a1 b1))))) j)
     (= (t2tb57 (tb2t57 j)) j)) :pattern ((t2tb57 (tb2t57 j))) )))

;; mem_relation
  (assert
  (forall ((u (set a)) (v (set (set (tuple21 a b)))) (r (set (tuple21 a
  (set (tuple21 a b))))))
  (= (mem (set1 (tuple2 a1 (set1 (tuple2 a1 b1)))) (t2tb39 r)
  (relation (set1 (tuple2 a1 b1)) a1 (t2tb1 u) (t2tb10 v)))
  (forall ((x a) (y (set (tuple21 a b))))
  (=> (mem (tuple2 a1 (set1 (tuple2 a1 b1)))
  (Tuple2 a1 (set1 (tuple2 a1 b1)) (t2tb2 x) (t2tb11 y)) (t2tb39 r))
  (and (mem1 x u) (mem4 y v)))))))

(declare-fun t2tb58 ((set (set (tuple21 a (tuple21 a b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 a (tuple21 a b)))))) (sort
  (set1 (set1 (tuple2 a1 (tuple2 a1 b1)))) (t2tb58 x))))

(declare-fun tb2t58 (uni) (set (set (tuple21 a (tuple21 a b)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 a (tuple21 a b))))))
  (! (= (tb2t58 (t2tb58 i)) i) :pattern ((t2tb58 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 a1 (tuple2 a1 b1)))) j)
     (= (t2tb58 (tb2t58 j)) j)) :pattern ((t2tb58 (tb2t58 j))) )))

;; mem_relation
  (assert
  (forall ((u (set a)) (v (set (tuple21 a b))) (r (set (tuple21 a (tuple21 a
  b)))))
  (= (mem (set1 (tuple2 a1 (tuple2 a1 b1))) (t2tb41 r)
  (relation (tuple2 a1 b1) a1 (t2tb1 u) (t2tb11 v)))
  (forall ((x a) (y (tuple21 a b)))
  (=> (mem (tuple2 a1 (tuple2 a1 b1))
  (Tuple2 a1 (tuple2 a1 b1) (t2tb2 x) (t2tb13 y)) (t2tb41 r))
  (and (mem1 x u) (mem3 y v)))))))

;; mem_relation
  (assert
  (forall ((u (set a)) (v (set b)) (r (set (tuple21 a b))))
  (= (mem4 r (relation1 u v))
  (forall ((x a) (y b))
  (=> (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y))) r)
  (and (mem1 x u) (mem2 y v)))))))

(declare-fun t2tb3 ((set (set (tuple21 a a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 a a))))) (sort (set1 (set1 (tuple2 a1 a1)))
  (t2tb3 x))))

(declare-fun tb2t3 (uni) (set (set (tuple21 a a))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 a a)))))
  (! (= (tb2t3 (t2tb3 i)) i) :pattern ((t2tb3 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 a1 a1))) j) (= (t2tb3 (tb2t3 j)) j)) :pattern (
  (t2tb3 (tb2t3 j))) )))

;; mem_relation
  (assert
  (forall ((u (set a)) (v (set a)) (r (set (tuple21 a a))))
  (= (mem (set1 (tuple2 a1 a1)) (t2tb4 r)
  (relation a1 a1 (t2tb1 u) (t2tb1 v)))
  (forall ((x a) (y a))
  (=> (mem (tuple2 a1 a1) (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y)) (t2tb4 r))
  (and (mem1 x u) (mem1 y v)))))))

;; mem_relation
  (assert
  (forall ((b2 ty))
  (forall ((u (set a)) (v uni) (r uni))
  (and
  (=> (mem (set1 (tuple2 a1 b2)) r (relation b2 a1 (t2tb1 u) v))
  (forall ((x a) (y uni))
  (=> (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) y) r)
  (and (mem1 x u) (mem b2 y v)))))
  (=>
  (forall ((x a) (y uni))
  (=> (sort b2 y)
  (=> (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) y) r)
  (and (mem1 x u) (mem b2 y v))))) (mem (set1 (tuple2 a1 b2)) r
  (relation b2 a1 (t2tb1 u) v)))))))

;; mem_relation
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((u uni) (v uni) (r uni))
  (and
  (=> (mem (set1 (tuple2 a2 b2)) r (relation b2 a2 u v))
  (forall ((x uni) (y uni))
  (=> (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) r)
  (and (mem a2 x u) (mem b2 y v)))))
  (=>
  (forall ((x uni) (y uni))
  (=> (sort a2 x)
  (=> (sort b2 y)
  (=> (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) r)
  (and (mem a2 x u) (mem b2 y v)))))) (mem (set1 (tuple2 a2 b2)) r
  (relation b2 a2 u v)))))))

(declare-fun inverse (ty ty uni) uni)

;; inverse_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni)) (sort (set1 (tuple2 b2 a2)) (inverse b2 a2 x)))))

;; mem_inverse
  (assert
  (forall ((p (set (tuple21 d c))) (x c) (y d))
  (= (mem21 (tb2t693 (Tuple2 c1 d1 (t2tb135 x) (t2tb694 y)))
  (tb2t689 (inverse c1 d1 (t2tb829 p)))) (mem (tuple2 d1 c1)
  (Tuple2 d1 c1 (t2tb694 y) (t2tb135 x)) (t2tb829 p)))))

;; mem_inverse
  (assert
  (forall ((p (set (tuple21 d b))) (x b) (y d))
  (= (mem23 (tb2t692 (Tuple2 b1 d1 (t2tb14 x) (t2tb694 y)))
  (tb2t687 (inverse b1 d1 (t2tb835 p)))) (mem (tuple2 d1 b1)
  (Tuple2 d1 b1 (t2tb694 y) (t2tb14 x)) (t2tb835 p)))))

;; mem_inverse
  (assert
  (forall ((p (set (tuple21 d a))) (x a) (y d))
  (= (mem32 (tb2t904 (Tuple2 a1 d1 (t2tb2 x) (t2tb694 y)))
  (tb2t903 (inverse a1 d1 (t2tb837 p)))) (mem (tuple2 d1 a1)
  (Tuple2 d1 a1 (t2tb694 y) (t2tb2 x)) (t2tb837 p)))))

;; mem_inverse
  (assert
  (forall ((p (set (tuple21 c d))) (x d) (y c))
  (= (mem (tuple2 d1 c1) (Tuple2 d1 c1 (t2tb694 x) (t2tb135 y))
  (inverse d1 c1 (t2tb689 p))) (mem21
  (tb2t693 (Tuple2 c1 d1 (t2tb135 y) (t2tb694 x))) p))))

;; mem_inverse
  (assert
  (forall ((p (set (tuple21 c b))) (x b) (y c))
  (= (mem8 (tb2t134 (Tuple2 b1 c1 (t2tb14 x) (t2tb135 y)))
  (tb2t131 (inverse b1 c1 (t2tb222 p)))) (mem (tuple2 c1 b1)
  (Tuple2 c1 b1 (t2tb135 y) (t2tb14 x)) (t2tb222 p)))))

;; mem_inverse
  (assert
  (forall ((p (set (tuple21 c a))) (x a) (y c))
  (= (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y)))
  (tb2t129 (inverse a1 c1 (t2tb224 p)))) (mem (tuple2 c1 a1)
  (Tuple2 c1 a1 (t2tb135 y) (t2tb2 x)) (t2tb224 p)))))

;; mem_inverse
  (assert
  (forall ((p (set (tuple21 b d))) (x d) (y b))
  (= (mem (tuple2 d1 b1) (Tuple2 d1 b1 (t2tb694 x) (t2tb14 y))
  (inverse d1 b1 (t2tb687 p))) (mem23
  (tb2t692 (Tuple2 b1 d1 (t2tb14 y) (t2tb694 x))) p))))

;; mem_inverse
  (assert
  (forall ((p (set (tuple21 b c))) (x c) (y b))
  (= (mem (tuple2 c1 b1) (Tuple2 c1 b1 (t2tb135 x) (t2tb14 y))
  (inverse c1 b1 (t2tb131 p))) (mem8
  (tb2t134 (Tuple2 b1 c1 (t2tb14 y) (t2tb135 x))) p))))

;; mem_inverse
  (assert
  (forall ((p (set (tuple21 b a))) (x a) (y b))
  (= (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y)))
  (tb2t11 (inverse a1 b1 (t2tb37 p)))) (mem (tuple2 b1 a1)
  (Tuple2 b1 a1 (t2tb14 y) (t2tb2 x)) (t2tb37 p)))))

;; mem_inverse
  (assert
  (forall ((p (set (tuple21 a d))) (x d) (y a))
  (= (mem (tuple2 d1 a1) (Tuple2 d1 a1 (t2tb694 x) (t2tb2 y))
  (inverse d1 a1 (t2tb903 p))) (mem32
  (tb2t904 (Tuple2 a1 d1 (t2tb2 y) (t2tb694 x))) p))))

;; mem_inverse
  (assert
  (forall ((p (set (tuple21 a c))) (x c) (y a))
  (= (mem (tuple2 c1 a1) (Tuple2 c1 a1 (t2tb135 x) (t2tb2 y))
  (inverse c1 a1 (t2tb129 p))) (mem10
  (tb2t133 (Tuple2 a1 c1 (t2tb2 y) (t2tb135 x))) p))))

;; mem_inverse
  (assert
  (forall ((p (set (tuple21 a b))) (x b) (y a))
  (= (mem (tuple2 b1 a1) (Tuple2 b1 a1 (t2tb14 x) (t2tb2 y))
  (inverse b1 a1 (t2tb11 p))) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 y) (t2tb14 x))) p))))

;; mem_inverse
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((p uni) (x uni) (y uni))
  (= (mem (tuple2 b2 a2) (Tuple2 b2 a2 x y) (inverse b2 a2 p)) (mem
  (tuple2 a2 b2) (Tuple2 a2 b2 y x) p)))))

(declare-fun dom (ty ty uni) uni)

;; dom_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni)) (sort (set1 a2) (dom b2 a2 x)))))

;; mem_dom
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (x (tuple21 a d)))
  (and
  (=> (mem32 x (tb2t903 (dom b2 (tuple2 a1 d1) p)))
  (exists ((b3 uni))
  (and (sort b2 b3) (mem (tuple2 (tuple2 a1 d1) b2)
  (Tuple2 (tuple2 a1 d1) b2 (t2tb904 x) b3) p))))
  (=>
  (exists ((b3 uni)) (mem (tuple2 (tuple2 a1 d1) b2)
  (Tuple2 (tuple2 a1 d1) b2 (t2tb904 x) b3) p)) (mem32 x
  (tb2t903 (dom b2 (tuple2 a1 d1) p))))))))

;; mem_dom
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (x (tuple21 b d)))
  (and
  (=> (mem23 x (tb2t687 (dom b2 (tuple2 b1 d1) p)))
  (exists ((b3 uni))
  (and (sort b2 b3) (mem (tuple2 (tuple2 b1 d1) b2)
  (Tuple2 (tuple2 b1 d1) b2 (t2tb692 x) b3) p))))
  (=>
  (exists ((b3 uni)) (mem (tuple2 (tuple2 b1 d1) b2)
  (Tuple2 (tuple2 b1 d1) b2 (t2tb692 x) b3) p)) (mem23 x
  (tb2t687 (dom b2 (tuple2 b1 d1) p))))))))

;; mem_dom
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (x (set (tuple21 c d))))
  (and
  (=> (mem22 x (tb2t688 (dom b2 (set1 (tuple2 c1 d1)) p)))
  (exists ((b3 uni))
  (and (sort b2 b3) (mem (tuple2 (set1 (tuple2 c1 d1)) b2)
  (Tuple2 (set1 (tuple2 c1 d1)) b2 (t2tb689 x) b3) p))))
  (=>
  (exists ((b3 uni)) (mem (tuple2 (set1 (tuple2 c1 d1)) b2)
  (Tuple2 (set1 (tuple2 c1 d1)) b2 (t2tb689 x) b3) p)) (mem22 x
  (tb2t688 (dom b2 (set1 (tuple2 c1 d1)) p))))))))

;; mem_dom
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (x (tuple21 c d)))
  (and
  (=> (mem21 x (tb2t689 (dom b2 (tuple2 c1 d1) p)))
  (exists ((b3 uni))
  (and (sort b2 b3) (mem (tuple2 (tuple2 c1 d1) b2)
  (Tuple2 (tuple2 c1 d1) b2 (t2tb693 x) b3) p))))
  (=>
  (exists ((b3 uni)) (mem (tuple2 (tuple2 c1 d1) b2)
  (Tuple2 (tuple2 c1 d1) b2 (t2tb693 x) b3) p)) (mem21 x
  (tb2t689 (dom b2 (tuple2 c1 d1) p))))))))

;; mem_dom
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (x d))
  (and
  (=> (mem20 x (tb2t690 (dom b2 d1 p)))
  (exists ((b3 uni))
  (and (sort b2 b3) (mem (tuple2 d1 b2) (Tuple2 d1 b2 (t2tb694 x) b3) p))))
  (=>
  (exists ((b3 uni)) (mem (tuple2 d1 b2) (Tuple2 d1 b2 (t2tb694 x) b3) p))
  (mem20 x (tb2t690 (dom b2 d1 p))))))))

;; mem_dom
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (x (tuple21 a c)))
  (and
  (=> (mem10 x (tb2t129 (dom b2 (tuple2 a1 c1) p)))
  (exists ((b3 uni))
  (and (sort b2 b3) (mem (tuple2 (tuple2 a1 c1) b2)
  (Tuple2 (tuple2 a1 c1) b2 (t2tb133 x) b3) p))))
  (=>
  (exists ((b3 uni)) (mem (tuple2 (tuple2 a1 c1) b2)
  (Tuple2 (tuple2 a1 c1) b2 (t2tb133 x) b3) p)) (mem10 x
  (tb2t129 (dom b2 (tuple2 a1 c1) p))))))))

;; mem_dom
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (x (set (tuple21 b c))))
  (and
  (=> (mem9 x (tb2t130 (dom b2 (set1 (tuple2 b1 c1)) p)))
  (exists ((b3 uni))
  (and (sort b2 b3) (mem (tuple2 (set1 (tuple2 b1 c1)) b2)
  (Tuple2 (set1 (tuple2 b1 c1)) b2 (t2tb131 x) b3) p))))
  (=>
  (exists ((b3 uni)) (mem (tuple2 (set1 (tuple2 b1 c1)) b2)
  (Tuple2 (set1 (tuple2 b1 c1)) b2 (t2tb131 x) b3) p)) (mem9 x
  (tb2t130 (dom b2 (set1 (tuple2 b1 c1)) p))))))))

;; mem_dom
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (x (tuple21 b c)))
  (and
  (=> (mem8 x (tb2t131 (dom b2 (tuple2 b1 c1) p)))
  (exists ((b3 uni))
  (and (sort b2 b3) (mem (tuple2 (tuple2 b1 c1) b2)
  (Tuple2 (tuple2 b1 c1) b2 (t2tb134 x) b3) p))))
  (=>
  (exists ((b3 uni)) (mem (tuple2 (tuple2 b1 c1) b2)
  (Tuple2 (tuple2 b1 c1) b2 (t2tb134 x) b3) p)) (mem8 x
  (tb2t131 (dom b2 (tuple2 b1 c1) p))))))))

;; mem_dom
  (assert
  (forall ((p (set (tuple21 c d))) (x c))
  (= (mem7 x (tb2t132 (dom d1 c1 (t2tb689 p))))
  (exists ((b2 d)) (mem21 (tb2t693 (Tuple2 c1 d1 (t2tb135 x) (t2tb694 b2)))
  p)))))

;; mem_dom
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (x c))
  (and
  (=> (mem7 x (tb2t132 (dom b2 c1 p)))
  (exists ((b3 uni))
  (and (sort b2 b3) (mem (tuple2 c1 b2) (Tuple2 c1 b2 (t2tb135 x) b3) p))))
  (=>
  (exists ((b3 uni)) (mem (tuple2 c1 b2) (Tuple2 c1 b2 (t2tb135 x) b3) p))
  (mem7 x (tb2t132 (dom b2 c1 p))))))))

;; mem_dom
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (x (set (tuple21 a b))))
  (and
  (=> (mem4 x (tb2t10 (dom b2 (set1 (tuple2 a1 b1)) p)))
  (exists ((b3 uni))
  (and (sort b2 b3) (mem (tuple2 (set1 (tuple2 a1 b1)) b2)
  (Tuple2 (set1 (tuple2 a1 b1)) b2 (t2tb11 x) b3) p))))
  (=>
  (exists ((b3 uni)) (mem (tuple2 (set1 (tuple2 a1 b1)) b2)
  (Tuple2 (set1 (tuple2 a1 b1)) b2 (t2tb11 x) b3) p)) (mem4 x
  (tb2t10 (dom b2 (set1 (tuple2 a1 b1)) p))))))))

;; mem_dom
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (x (tuple21 a b)))
  (and
  (=> (mem3 x (tb2t11 (dom b2 (tuple2 a1 b1) p)))
  (exists ((b3 uni))
  (and (sort b2 b3) (mem (tuple2 (tuple2 a1 b1) b2)
  (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) b3) p))))
  (=>
  (exists ((b3 uni)) (mem (tuple2 (tuple2 a1 b1) b2)
  (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) b3) p)) (mem3 x
  (tb2t11 (dom b2 (tuple2 a1 b1) p))))))))

;; mem_dom
  (assert
  (forall ((p (set (tuple21 b d))) (x b))
  (= (mem2 x (tb2t12 (dom d1 b1 (t2tb687 p))))
  (exists ((b2 d)) (mem23 (tb2t692 (Tuple2 b1 d1 (t2tb14 x) (t2tb694 b2)))
  p)))))

;; mem_dom
  (assert
  (forall ((p (set (tuple21 b c))) (x b))
  (= (mem2 x (tb2t12 (dom c1 b1 (t2tb131 p))))
  (exists ((b2 c)) (mem8 (tb2t134 (Tuple2 b1 c1 (t2tb14 x) (t2tb135 b2))) p)))))

;; mem_dom
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (x b))
  (and
  (=> (mem2 x (tb2t12 (dom b2 b1 p)))
  (exists ((b3 uni))
  (and (sort b2 b3) (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) b3) p))))
  (=> (exists ((b3 uni)) (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) b3) p))
  (mem2 x (tb2t12 (dom b2 b1 p))))))))

;; mem_dom
  (assert
  (forall ((p (set (tuple21 a d))) (x a))
  (= (mem1 x (tb2t1 (dom d1 a1 (t2tb903 p))))
  (exists ((b2 d)) (mem32 (tb2t904 (Tuple2 a1 d1 (t2tb2 x) (t2tb694 b2))) p)))))

;; mem_dom
  (assert
  (forall ((p (set (tuple21 a c))) (x a))
  (= (mem1 x (tb2t1 (dom c1 a1 (t2tb129 p))))
  (exists ((b2 c)) (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 b2))) p)))))

;; mem_dom
  (assert
  (forall ((p (set (tuple21 a b))) (x a))
  (= (mem1 x (tb2t1 (dom b1 a1 (t2tb11 p))))
  (exists ((b2 b)) (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 b2))) p)))))

;; mem_dom
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (x a))
  (and
  (=> (mem1 x (tb2t1 (dom b2 a1 p)))
  (exists ((b3 uni))
  (and (sort b2 b3) (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) b3) p))))
  (=> (exists ((b3 uni)) (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) b3) p))
  (mem1 x (tb2t1 (dom b2 a1 p))))))))

;; mem_dom
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((p uni) (x uni))
  (and
  (=> (mem a2 x (dom b2 a2 p))
  (exists ((b3 uni))
  (and (sort b2 b3) (mem (tuple2 a2 b2) (Tuple2 a2 b2 x b3) p))))
  (=> (exists ((b3 uni)) (mem (tuple2 a2 b2) (Tuple2 a2 b2 x b3) p)) (mem a2
  x (dom b2 a2 p)))))))

(declare-fun ran (ty ty uni) uni)

;; ran_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni)) (sort (set1 b2) (ran b2 a2 x)))))

;; mem_ran
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (x (tuple21 a d)))
  (and
  (=> (mem32 x (tb2t903 (ran (tuple2 a1 d1) a2 p)))
  (exists ((a3 uni))
  (and (sort a2 a3) (mem (tuple2 a2 (tuple2 a1 d1))
  (Tuple2 a2 (tuple2 a1 d1) a3 (t2tb904 x)) p))))
  (=>
  (exists ((a3 uni)) (mem (tuple2 a2 (tuple2 a1 d1))
  (Tuple2 a2 (tuple2 a1 d1) a3 (t2tb904 x)) p)) (mem32 x
  (tb2t903 (ran (tuple2 a1 d1) a2 p))))))))

;; mem_ran
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (x (tuple21 b d)))
  (and
  (=> (mem23 x (tb2t687 (ran (tuple2 b1 d1) a2 p)))
  (exists ((a3 uni))
  (and (sort a2 a3) (mem (tuple2 a2 (tuple2 b1 d1))
  (Tuple2 a2 (tuple2 b1 d1) a3 (t2tb692 x)) p))))
  (=>
  (exists ((a3 uni)) (mem (tuple2 a2 (tuple2 b1 d1))
  (Tuple2 a2 (tuple2 b1 d1) a3 (t2tb692 x)) p)) (mem23 x
  (tb2t687 (ran (tuple2 b1 d1) a2 p))))))))

;; mem_ran
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (x (set (tuple21 c d))))
  (and
  (=> (mem22 x (tb2t688 (ran (set1 (tuple2 c1 d1)) a2 p)))
  (exists ((a3 uni))
  (and (sort a2 a3) (mem (tuple2 a2 (set1 (tuple2 c1 d1)))
  (Tuple2 a2 (set1 (tuple2 c1 d1)) a3 (t2tb689 x)) p))))
  (=>
  (exists ((a3 uni)) (mem (tuple2 a2 (set1 (tuple2 c1 d1)))
  (Tuple2 a2 (set1 (tuple2 c1 d1)) a3 (t2tb689 x)) p)) (mem22 x
  (tb2t688 (ran (set1 (tuple2 c1 d1)) a2 p))))))))

;; mem_ran
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (x (tuple21 c d)))
  (and
  (=> (mem21 x (tb2t689 (ran (tuple2 c1 d1) a2 p)))
  (exists ((a3 uni))
  (and (sort a2 a3) (mem (tuple2 a2 (tuple2 c1 d1))
  (Tuple2 a2 (tuple2 c1 d1) a3 (t2tb693 x)) p))))
  (=>
  (exists ((a3 uni)) (mem (tuple2 a2 (tuple2 c1 d1))
  (Tuple2 a2 (tuple2 c1 d1) a3 (t2tb693 x)) p)) (mem21 x
  (tb2t689 (ran (tuple2 c1 d1) a2 p))))))))

;; mem_ran
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (x d))
  (and
  (=> (mem20 x (tb2t690 (ran d1 a2 p)))
  (exists ((a3 uni))
  (and (sort a2 a3) (mem (tuple2 a2 d1) (Tuple2 a2 d1 a3 (t2tb694 x)) p))))
  (=>
  (exists ((a3 uni)) (mem (tuple2 a2 d1) (Tuple2 a2 d1 a3 (t2tb694 x)) p))
  (mem20 x (tb2t690 (ran d1 a2 p))))))))

;; mem_ran
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (x (tuple21 a c)))
  (and
  (=> (mem10 x (tb2t129 (ran (tuple2 a1 c1) a2 p)))
  (exists ((a3 uni))
  (and (sort a2 a3) (mem (tuple2 a2 (tuple2 a1 c1))
  (Tuple2 a2 (tuple2 a1 c1) a3 (t2tb133 x)) p))))
  (=>
  (exists ((a3 uni)) (mem (tuple2 a2 (tuple2 a1 c1))
  (Tuple2 a2 (tuple2 a1 c1) a3 (t2tb133 x)) p)) (mem10 x
  (tb2t129 (ran (tuple2 a1 c1) a2 p))))))))

;; mem_ran
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (x (set (tuple21 b c))))
  (and
  (=> (mem9 x (tb2t130 (ran (set1 (tuple2 b1 c1)) a2 p)))
  (exists ((a3 uni))
  (and (sort a2 a3) (mem (tuple2 a2 (set1 (tuple2 b1 c1)))
  (Tuple2 a2 (set1 (tuple2 b1 c1)) a3 (t2tb131 x)) p))))
  (=>
  (exists ((a3 uni)) (mem (tuple2 a2 (set1 (tuple2 b1 c1)))
  (Tuple2 a2 (set1 (tuple2 b1 c1)) a3 (t2tb131 x)) p)) (mem9 x
  (tb2t130 (ran (set1 (tuple2 b1 c1)) a2 p))))))))

;; mem_ran
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (x (tuple21 b c)))
  (and
  (=> (mem8 x (tb2t131 (ran (tuple2 b1 c1) a2 p)))
  (exists ((a3 uni))
  (and (sort a2 a3) (mem (tuple2 a2 (tuple2 b1 c1))
  (Tuple2 a2 (tuple2 b1 c1) a3 (t2tb134 x)) p))))
  (=>
  (exists ((a3 uni)) (mem (tuple2 a2 (tuple2 b1 c1))
  (Tuple2 a2 (tuple2 b1 c1) a3 (t2tb134 x)) p)) (mem8 x
  (tb2t131 (ran (tuple2 b1 c1) a2 p))))))))

;; mem_ran
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (x c))
  (and
  (=> (mem7 x (tb2t132 (ran c1 a2 p)))
  (exists ((a3 uni))
  (and (sort a2 a3) (mem (tuple2 a2 c1) (Tuple2 a2 c1 a3 (t2tb135 x)) p))))
  (=>
  (exists ((a3 uni)) (mem (tuple2 a2 c1) (Tuple2 a2 c1 a3 (t2tb135 x)) p))
  (mem7 x (tb2t132 (ran c1 a2 p))))))))

;; mem_ran
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (x (set (tuple21 a b))))
  (and
  (=> (mem4 x (tb2t10 (ran (set1 (tuple2 a1 b1)) a2 p)))
  (exists ((a3 uni))
  (and (sort a2 a3) (mem (tuple2 a2 (set1 (tuple2 a1 b1)))
  (Tuple2 a2 (set1 (tuple2 a1 b1)) a3 (t2tb11 x)) p))))
  (=>
  (exists ((a3 uni)) (mem (tuple2 a2 (set1 (tuple2 a1 b1)))
  (Tuple2 a2 (set1 (tuple2 a1 b1)) a3 (t2tb11 x)) p)) (mem4 x
  (tb2t10 (ran (set1 (tuple2 a1 b1)) a2 p))))))))

;; mem_ran
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (x (tuple21 a b)))
  (and
  (=> (mem3 x (tb2t11 (ran (tuple2 a1 b1) a2 p)))
  (exists ((a3 uni))
  (and (sort a2 a3) (mem (tuple2 a2 (tuple2 a1 b1))
  (Tuple2 a2 (tuple2 a1 b1) a3 (t2tb13 x)) p))))
  (=>
  (exists ((a3 uni)) (mem (tuple2 a2 (tuple2 a1 b1))
  (Tuple2 a2 (tuple2 a1 b1) a3 (t2tb13 x)) p)) (mem3 x
  (tb2t11 (ran (tuple2 a1 b1) a2 p))))))))

;; mem_ran
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (x b))
  (and
  (=> (mem2 x (tb2t12 (ran b1 a2 p)))
  (exists ((a3 uni))
  (and (sort a2 a3) (mem (tuple2 a2 b1) (Tuple2 a2 b1 a3 (t2tb14 x)) p))))
  (=> (exists ((a3 uni)) (mem (tuple2 a2 b1) (Tuple2 a2 b1 a3 (t2tb14 x)) p))
  (mem2 x (tb2t12 (ran b1 a2 p))))))))

;; mem_ran
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (x a))
  (and
  (=> (mem1 x (tb2t1 (ran a1 a2 p)))
  (exists ((a3 uni))
  (and (sort a2 a3) (mem (tuple2 a2 a1) (Tuple2 a2 a1 a3 (t2tb2 x)) p))))
  (=> (exists ((a3 uni)) (mem (tuple2 a2 a1) (Tuple2 a2 a1 a3 (t2tb2 x)) p))
  (mem1 x (tb2t1 (ran a1 a2 p))))))))

;; mem_ran
  (assert
  (forall ((p (set (tuple21 c d))) (x d))
  (= (mem20 x (tb2t690 (ran d1 c1 (t2tb689 p))))
  (exists ((a2 c)) (mem21 (tb2t693 (Tuple2 c1 d1 (t2tb135 a2) (t2tb694 x)))
  p)))))

;; mem_ran
  (assert
  (forall ((p (set (tuple21 b d))) (x d))
  (= (mem20 x (tb2t690 (ran d1 b1 (t2tb687 p))))
  (exists ((a2 b)) (mem23 (tb2t692 (Tuple2 b1 d1 (t2tb14 a2) (t2tb694 x)))
  p)))))

;; mem_ran
  (assert
  (forall ((p (set (tuple21 b c))) (x c))
  (= (mem7 x (tb2t132 (ran c1 b1 (t2tb131 p))))
  (exists ((a2 b)) (mem8 (tb2t134 (Tuple2 b1 c1 (t2tb14 a2) (t2tb135 x))) p)))))

;; mem_ran
  (assert
  (forall ((p (set (tuple21 a d))) (x d))
  (= (mem20 x (tb2t690 (ran d1 a1 (t2tb903 p))))
  (exists ((a2 a)) (mem32 (tb2t904 (Tuple2 a1 d1 (t2tb2 a2) (t2tb694 x))) p)))))

;; mem_ran
  (assert
  (forall ((p (set (tuple21 a c))) (x c))
  (= (mem7 x (tb2t132 (ran c1 a1 (t2tb129 p))))
  (exists ((a2 a)) (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 a2) (t2tb135 x))) p)))))

;; mem_ran
  (assert
  (forall ((p (set (tuple21 a b))) (x b))
  (= (mem2 x (tb2t12 (ran b1 a1 (t2tb11 p))))
  (exists ((a2 a)) (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 a2) (t2tb14 x))) p)))))

;; mem_ran
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((p uni) (x uni))
  (and
  (=> (mem b2 x (ran b2 a2 p))
  (exists ((a3 uni))
  (and (sort a2 a3) (mem (tuple2 a2 b2) (Tuple2 a2 b2 a3 x) p))))
  (=> (exists ((a3 uni)) (mem (tuple2 a2 b2) (Tuple2 a2 b2 a3 x) p)) (mem b2
  x (ran b2 a2 p)))))))

(declare-fun semicolon (ty ty ty uni uni) uni)

;; semicolon_sort
  (assert
  (forall ((a2 ty) (b2 ty) (c2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (tuple2 a2 c2))
  (semicolon c2 b2 a2 x x1)))))

(declare-fun semicolon1 ((set (tuple21 a b)) (set (tuple21 b
  c))) (set (tuple21 a c)))

(declare-fun semicolon15 ((set (tuple21 b c)) (set (tuple21 c
  d))) (set (tuple21 b d)))

(declare-fun semicolon16 ((set (tuple21 a b)) (set (tuple21 b
  d))) (set (tuple21 a d)))

(declare-fun semicolon17 ((set (tuple21 a c)) (set (tuple21 c
  d))) (set (tuple21 a d)))

;; mem_semicolon
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (q (set (tuple21 c d))) (x uni) (y d))
  (= (mem (tuple2 a2 d1) (Tuple2 a2 d1 x (t2tb694 y))
  (semicolon d1 c1 a2 p (t2tb689 q)))
  (exists ((b2 c))
  (and (mem (tuple2 a2 c1) (Tuple2 a2 c1 x (t2tb135 b2)) p) (mem21
  (tb2t693 (Tuple2 c1 d1 (t2tb135 b2) (t2tb694 y))) q)))))))

;; mem_semicolon
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (q (set (tuple21 b d))) (x uni) (y d))
  (= (mem (tuple2 a2 d1) (Tuple2 a2 d1 x (t2tb694 y))
  (semicolon d1 b1 a2 p (t2tb687 q)))
  (exists ((b2 b))
  (and (mem (tuple2 a2 b1) (Tuple2 a2 b1 x (t2tb14 b2)) p) (mem23
  (tb2t692 (Tuple2 b1 d1 (t2tb14 b2) (t2tb694 y))) q)))))))

;; mem_semicolon
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (q (set (tuple21 b c))) (x uni) (y c))
  (= (mem (tuple2 a2 c1) (Tuple2 a2 c1 x (t2tb135 y))
  (semicolon c1 b1 a2 p (t2tb131 q)))
  (exists ((b2 b))
  (and (mem (tuple2 a2 b1) (Tuple2 a2 b1 x (t2tb14 b2)) p) (mem8
  (tb2t134 (Tuple2 b1 c1 (t2tb14 b2) (t2tb135 y))) q)))))))

;; mem_semicolon
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (q (set (tuple21 a d))) (x uni) (y d))
  (= (mem (tuple2 a2 d1) (Tuple2 a2 d1 x (t2tb694 y))
  (semicolon d1 a1 a2 p (t2tb903 q)))
  (exists ((b2 a))
  (and (mem (tuple2 a2 a1) (Tuple2 a2 a1 x (t2tb2 b2)) p) (mem32
  (tb2t904 (Tuple2 a1 d1 (t2tb2 b2) (t2tb694 y))) q)))))))

;; mem_semicolon
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (q (set (tuple21 a c))) (x uni) (y c))
  (= (mem (tuple2 a2 c1) (Tuple2 a2 c1 x (t2tb135 y))
  (semicolon c1 a1 a2 p (t2tb129 q)))
  (exists ((b2 a))
  (and (mem (tuple2 a2 a1) (Tuple2 a2 a1 x (t2tb2 b2)) p) (mem10
  (tb2t133 (Tuple2 a1 c1 (t2tb2 b2) (t2tb135 y))) q)))))))

;; mem_semicolon
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (q (set (tuple21 a b))) (x uni) (y b))
  (= (mem (tuple2 a2 b1) (Tuple2 a2 b1 x (t2tb14 y))
  (semicolon b1 a1 a2 p (t2tb11 q)))
  (exists ((b2 a))
  (and (mem (tuple2 a2 a1) (Tuple2 a2 a1 x (t2tb2 b2)) p) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 b2) (t2tb14 y))) q)))))))

;; mem_semicolon
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (q uni) (x c) (y d))
  (and
  (=> (mem21 (tb2t693 (Tuple2 c1 d1 (t2tb135 x) (t2tb694 y)))
  (tb2t689 (semicolon d1 b2 c1 p q)))
  (exists ((b3 uni))
  (and (sort b2 b3)
  (and (mem (tuple2 c1 b2) (Tuple2 c1 b2 (t2tb135 x) b3) p) (mem
  (tuple2 b2 d1) (Tuple2 b2 d1 b3 (t2tb694 y)) q)))))
  (=>
  (exists ((b3 uni))
  (and (mem (tuple2 c1 b2) (Tuple2 c1 b2 (t2tb135 x) b3) p) (mem
  (tuple2 b2 d1) (Tuple2 b2 d1 b3 (t2tb694 y)) q))) (mem21
  (tb2t693 (Tuple2 c1 d1 (t2tb135 x) (t2tb694 y)))
  (tb2t689 (semicolon d1 b2 c1 p q))))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 c d))) (q (set (tuple21 d d))) (x c) (y d))
  (= (mem21 (tb2t693 (Tuple2 c1 d1 (t2tb135 x) (t2tb694 y)))
  (tb2t689 (semicolon d1 d1 c1 (t2tb689 p) (t2tb825 q))))
  (exists ((b2 d))
  (and (mem21 (tb2t693 (Tuple2 c1 d1 (t2tb135 x) (t2tb694 b2))) p) (mem
  (tuple2 d1 d1) (Tuple2 d1 d1 (t2tb694 b2) (t2tb694 y)) (t2tb825 q)))))))

;; mem_semicolon
  (assert
  (forall ((c2 ty))
  (forall ((p (set (tuple21 c d))) (q uni) (x c) (y uni))
  (= (mem (tuple2 c1 c2) (Tuple2 c1 c2 (t2tb135 x) y)
  (semicolon c2 d1 c1 (t2tb689 p) q))
  (exists ((b2 d))
  (and (mem21 (tb2t693 (Tuple2 c1 d1 (t2tb135 x) (t2tb694 b2))) p) (mem
  (tuple2 d1 c2) (Tuple2 d1 c2 (t2tb694 b2) y) q)))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 c c))) (q (set (tuple21 c d))) (x c) (y d))
  (= (mem21 (tb2t693 (Tuple2 c1 d1 (t2tb135 x) (t2tb694 y)))
  (tb2t689 (semicolon d1 c1 c1 (t2tb216 p) (t2tb689 q))))
  (exists ((b2 c))
  (and (mem (tuple2 c1 c1) (Tuple2 c1 c1 (t2tb135 x) (t2tb135 b2))
  (t2tb216 p)) (mem21 (tb2t693 (Tuple2 c1 d1 (t2tb135 b2) (t2tb694 y))) q))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 c b))) (q (set (tuple21 b d))) (x c) (y d))
  (= (mem21 (tb2t693 (Tuple2 c1 d1 (t2tb135 x) (t2tb694 y)))
  (tb2t689 (semicolon d1 b1 c1 (t2tb222 p) (t2tb687 q))))
  (exists ((b2 b))
  (and (mem (tuple2 c1 b1) (Tuple2 c1 b1 (t2tb135 x) (t2tb14 b2))
  (t2tb222 p)) (mem23 (tb2t692 (Tuple2 b1 d1 (t2tb14 b2) (t2tb694 y))) q))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 c a))) (q (set (tuple21 a d))) (x c) (y d))
  (= (mem21 (tb2t693 (Tuple2 c1 d1 (t2tb135 x) (t2tb694 y)))
  (tb2t689 (semicolon d1 a1 c1 (t2tb224 p) (t2tb903 q))))
  (exists ((b2 a))
  (and (mem (tuple2 c1 a1) (Tuple2 c1 a1 (t2tb135 x) (t2tb2 b2)) (t2tb224 p))
  (mem32 (tb2t904 (Tuple2 a1 d1 (t2tb2 b2) (t2tb694 y))) q))))))

;; mem_semicolon
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (q uni) (x b) (y d))
  (and
  (=> (mem23 (tb2t692 (Tuple2 b1 d1 (t2tb14 x) (t2tb694 y)))
  (tb2t687 (semicolon d1 b2 b1 p q)))
  (exists ((b3 uni))
  (and (sort b2 b3)
  (and (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) b3) p) (mem
  (tuple2 b2 d1) (Tuple2 b2 d1 b3 (t2tb694 y)) q)))))
  (=>
  (exists ((b3 uni))
  (and (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) b3) p) (mem
  (tuple2 b2 d1) (Tuple2 b2 d1 b3 (t2tb694 y)) q))) (mem23
  (tb2t692 (Tuple2 b1 d1 (t2tb14 x) (t2tb694 y)))
  (tb2t687 (semicolon d1 b2 b1 p q))))))))

;; mem_semicolon
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (q uni) (x b) (y c))
  (and
  (=> (mem8 (tb2t134 (Tuple2 b1 c1 (t2tb14 x) (t2tb135 y)))
  (tb2t131 (semicolon c1 b2 b1 p q)))
  (exists ((b3 uni))
  (and (sort b2 b3)
  (and (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) b3) p) (mem
  (tuple2 b2 c1) (Tuple2 b2 c1 b3 (t2tb135 y)) q)))))
  (=>
  (exists ((b3 uni))
  (and (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) b3) p) (mem
  (tuple2 b2 c1) (Tuple2 b2 c1 b3 (t2tb135 y)) q))) (mem8
  (tb2t134 (Tuple2 b1 c1 (t2tb14 x) (t2tb135 y)))
  (tb2t131 (semicolon c1 b2 b1 p q))))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 b d))) (q (set (tuple21 d d))) (x b) (y d))
  (= (mem23 (tb2t692 (Tuple2 b1 d1 (t2tb14 x) (t2tb694 y)))
  (tb2t687 (semicolon d1 d1 b1 (t2tb687 p) (t2tb825 q))))
  (exists ((b2 d))
  (and (mem23 (tb2t692 (Tuple2 b1 d1 (t2tb14 x) (t2tb694 b2))) p) (mem
  (tuple2 d1 d1) (Tuple2 d1 d1 (t2tb694 b2) (t2tb694 y)) (t2tb825 q)))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 b d))) (q (set (tuple21 d c))) (x b) (y c))
  (= (mem8 (tb2t134 (Tuple2 b1 c1 (t2tb14 x) (t2tb135 y)))
  (tb2t131 (semicolon c1 d1 b1 (t2tb687 p) (t2tb829 q))))
  (exists ((b2 d))
  (and (mem23 (tb2t692 (Tuple2 b1 d1 (t2tb14 x) (t2tb694 b2))) p) (mem
  (tuple2 d1 c1) (Tuple2 d1 c1 (t2tb694 b2) (t2tb135 y)) (t2tb829 q)))))))

;; mem_semicolon
  (assert
  (forall ((c2 ty))
  (forall ((p (set (tuple21 b d))) (q uni) (x b) (y uni))
  (= (mem (tuple2 b1 c2) (Tuple2 b1 c2 (t2tb14 x) y)
  (semicolon c2 d1 b1 (t2tb687 p) q))
  (exists ((b2 d))
  (and (mem23 (tb2t692 (Tuple2 b1 d1 (t2tb14 x) (t2tb694 b2))) p) (mem
  (tuple2 d1 c2) (Tuple2 d1 c2 (t2tb694 b2) y) q)))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 b c))) (q (set (tuple21 c d))) (x b) (y d))
  (= (mem23 (tb2t692 (Tuple2 b1 d1 (t2tb14 x) (t2tb694 y)))
  (semicolon15 p q))
  (exists ((b2 c))
  (and (mem8 (tb2t134 (Tuple2 b1 c1 (t2tb14 x) (t2tb135 b2))) p) (mem21
  (tb2t693 (Tuple2 c1 d1 (t2tb135 b2) (t2tb694 y))) q))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 b c))) (q (set (tuple21 c c))) (x b) (y c))
  (= (mem8 (tb2t134 (Tuple2 b1 c1 (t2tb14 x) (t2tb135 y)))
  (tb2t131 (semicolon c1 c1 b1 (t2tb131 p) (t2tb216 q))))
  (exists ((b2 c))
  (and (mem8 (tb2t134 (Tuple2 b1 c1 (t2tb14 x) (t2tb135 b2))) p) (mem
  (tuple2 c1 c1) (Tuple2 c1 c1 (t2tb135 b2) (t2tb135 y)) (t2tb216 q)))))))

;; mem_semicolon
  (assert
  (forall ((c2 ty))
  (forall ((p (set (tuple21 b c))) (q uni) (x b) (y uni))
  (= (mem (tuple2 b1 c2) (Tuple2 b1 c2 (t2tb14 x) y)
  (semicolon c2 c1 b1 (t2tb131 p) q))
  (exists ((b2 c))
  (and (mem8 (tb2t134 (Tuple2 b1 c1 (t2tb14 x) (t2tb135 b2))) p) (mem
  (tuple2 c1 c2) (Tuple2 c1 c2 (t2tb135 b2) y) q)))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 b b))) (q (set (tuple21 b d))) (x b) (y d))
  (= (mem23 (tb2t692 (Tuple2 b1 d1 (t2tb14 x) (t2tb694 y)))
  (tb2t687 (semicolon d1 b1 b1 (t2tb35 p) (t2tb687 q))))
  (exists ((b2 b))
  (and (mem (tuple2 b1 b1) (Tuple2 b1 b1 (t2tb14 x) (t2tb14 b2)) (t2tb35 p))
  (mem23 (tb2t692 (Tuple2 b1 d1 (t2tb14 b2) (t2tb694 y))) q))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 b b))) (q (set (tuple21 b c))) (x b) (y c))
  (= (mem8 (tb2t134 (Tuple2 b1 c1 (t2tb14 x) (t2tb135 y)))
  (tb2t131 (semicolon c1 b1 b1 (t2tb35 p) (t2tb131 q))))
  (exists ((b2 b))
  (and (mem (tuple2 b1 b1) (Tuple2 b1 b1 (t2tb14 x) (t2tb14 b2)) (t2tb35 p))
  (mem8 (tb2t134 (Tuple2 b1 c1 (t2tb14 b2) (t2tb135 y))) q))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 b a))) (q (set (tuple21 a d))) (x b) (y d))
  (= (mem23 (tb2t692 (Tuple2 b1 d1 (t2tb14 x) (t2tb694 y)))
  (tb2t687 (semicolon d1 a1 b1 (t2tb37 p) (t2tb903 q))))
  (exists ((b2 a))
  (and (mem (tuple2 b1 a1) (Tuple2 b1 a1 (t2tb14 x) (t2tb2 b2)) (t2tb37 p))
  (mem32 (tb2t904 (Tuple2 a1 d1 (t2tb2 b2) (t2tb694 y))) q))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 b a))) (q (set (tuple21 a c))) (x b) (y c))
  (= (mem8 (tb2t134 (Tuple2 b1 c1 (t2tb14 x) (t2tb135 y)))
  (tb2t131 (semicolon c1 a1 b1 (t2tb37 p) (t2tb129 q))))
  (exists ((b2 a))
  (and (mem (tuple2 b1 a1) (Tuple2 b1 a1 (t2tb14 x) (t2tb2 b2)) (t2tb37 p))
  (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 b2) (t2tb135 y))) q))))))

;; mem_semicolon
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (q uni) (x a) (y d))
  (and
  (=> (mem32 (tb2t904 (Tuple2 a1 d1 (t2tb2 x) (t2tb694 y)))
  (tb2t903 (semicolon d1 b2 a1 p q)))
  (exists ((b3 uni))
  (and (sort b2 b3)
  (and (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) b3) p) (mem (tuple2 b2 d1)
  (Tuple2 b2 d1 b3 (t2tb694 y)) q)))))
  (=>
  (exists ((b3 uni))
  (and (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) b3) p) (mem (tuple2 b2 d1)
  (Tuple2 b2 d1 b3 (t2tb694 y)) q))) (mem32
  (tb2t904 (Tuple2 a1 d1 (t2tb2 x) (t2tb694 y)))
  (tb2t903 (semicolon d1 b2 a1 p q))))))))

;; mem_semicolon
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (q uni) (x a) (y c))
  (and
  (=> (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y)))
  (tb2t129 (semicolon c1 b2 a1 p q)))
  (exists ((b3 uni))
  (and (sort b2 b3)
  (and (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) b3) p) (mem (tuple2 b2 c1)
  (Tuple2 b2 c1 b3 (t2tb135 y)) q)))))
  (=>
  (exists ((b3 uni))
  (and (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) b3) p) (mem (tuple2 b2 c1)
  (Tuple2 b2 c1 b3 (t2tb135 y)) q))) (mem10
  (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y)))
  (tb2t129 (semicolon c1 b2 a1 p q))))))))

;; mem_semicolon
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (q uni) (x a) (y b))
  (and
  (=> (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y)))
  (tb2t11 (semicolon b1 b2 a1 p q)))
  (exists ((b3 uni))
  (and (sort b2 b3)
  (and (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) b3) p) (mem (tuple2 b2 b1)
  (Tuple2 b2 b1 b3 (t2tb14 y)) q)))))
  (=>
  (exists ((b3 uni))
  (and (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) b3) p) (mem (tuple2 b2 b1)
  (Tuple2 b2 b1 b3 (t2tb14 y)) q))) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y)))
  (tb2t11 (semicolon b1 b2 a1 p q))))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 a d))) (q (set (tuple21 d d))) (x a) (y d))
  (= (mem32 (tb2t904 (Tuple2 a1 d1 (t2tb2 x) (t2tb694 y)))
  (tb2t903 (semicolon d1 d1 a1 (t2tb903 p) (t2tb825 q))))
  (exists ((b2 d))
  (and (mem32 (tb2t904 (Tuple2 a1 d1 (t2tb2 x) (t2tb694 b2))) p) (mem
  (tuple2 d1 d1) (Tuple2 d1 d1 (t2tb694 b2) (t2tb694 y)) (t2tb825 q)))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 a d))) (q (set (tuple21 d c))) (x a) (y c))
  (= (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y)))
  (tb2t129 (semicolon c1 d1 a1 (t2tb903 p) (t2tb829 q))))
  (exists ((b2 d))
  (and (mem32 (tb2t904 (Tuple2 a1 d1 (t2tb2 x) (t2tb694 b2))) p) (mem
  (tuple2 d1 c1) (Tuple2 d1 c1 (t2tb694 b2) (t2tb135 y)) (t2tb829 q)))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 a d))) (q (set (tuple21 d b))) (x a) (y b))
  (= (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y)))
  (tb2t11 (semicolon b1 d1 a1 (t2tb903 p) (t2tb835 q))))
  (exists ((b2 d))
  (and (mem32 (tb2t904 (Tuple2 a1 d1 (t2tb2 x) (t2tb694 b2))) p) (mem
  (tuple2 d1 b1) (Tuple2 d1 b1 (t2tb694 b2) (t2tb14 y)) (t2tb835 q)))))))

;; mem_semicolon
  (assert
  (forall ((c2 ty))
  (forall ((p (set (tuple21 a d))) (q uni) (x a) (y uni))
  (= (mem (tuple2 a1 c2) (Tuple2 a1 c2 (t2tb2 x) y)
  (semicolon c2 d1 a1 (t2tb903 p) q))
  (exists ((b2 d))
  (and (mem32 (tb2t904 (Tuple2 a1 d1 (t2tb2 x) (t2tb694 b2))) p) (mem
  (tuple2 d1 c2) (Tuple2 d1 c2 (t2tb694 b2) y) q)))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 a c))) (q (set (tuple21 c d))) (x a) (y d))
  (= (mem32 (tb2t904 (Tuple2 a1 d1 (t2tb2 x) (t2tb694 y))) (semicolon17 p q))
  (exists ((b2 c))
  (and (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 b2))) p) (mem21
  (tb2t693 (Tuple2 c1 d1 (t2tb135 b2) (t2tb694 y))) q))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 a c))) (q (set (tuple21 c c))) (x a) (y c))
  (= (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y)))
  (tb2t129 (semicolon c1 c1 a1 (t2tb129 p) (t2tb216 q))))
  (exists ((b2 c))
  (and (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 b2))) p) (mem
  (tuple2 c1 c1) (Tuple2 c1 c1 (t2tb135 b2) (t2tb135 y)) (t2tb216 q)))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 a c))) (q (set (tuple21 c b))) (x a) (y b))
  (= (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y)))
  (tb2t11 (semicolon b1 c1 a1 (t2tb129 p) (t2tb222 q))))
  (exists ((b2 c))
  (and (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 b2))) p) (mem
  (tuple2 c1 b1) (Tuple2 c1 b1 (t2tb135 b2) (t2tb14 y)) (t2tb222 q)))))))

;; mem_semicolon
  (assert
  (forall ((c2 ty))
  (forall ((p (set (tuple21 a c))) (q uni) (x a) (y uni))
  (= (mem (tuple2 a1 c2) (Tuple2 a1 c2 (t2tb2 x) y)
  (semicolon c2 c1 a1 (t2tb129 p) q))
  (exists ((b2 c))
  (and (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 b2))) p) (mem
  (tuple2 c1 c2) (Tuple2 c1 c2 (t2tb135 b2) y) q)))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 a b))) (q (set (tuple21 b d))) (x a) (y d))
  (= (mem32 (tb2t904 (Tuple2 a1 d1 (t2tb2 x) (t2tb694 y))) (semicolon16 p q))
  (exists ((b2 b))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 b2))) p) (mem23
  (tb2t692 (Tuple2 b1 d1 (t2tb14 b2) (t2tb694 y))) q))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 a b))) (q (set (tuple21 b c))) (x a) (y c))
  (= (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y))) (semicolon1 p q))
  (exists ((b2 b))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 b2))) p) (mem8
  (tb2t134 (Tuple2 b1 c1 (t2tb14 b2) (t2tb135 y))) q))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 a b))) (q (set (tuple21 b b))) (x a) (y b))
  (= (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y)))
  (tb2t11 (semicolon b1 b1 a1 (t2tb11 p) (t2tb35 q))))
  (exists ((b2 b))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 b2))) p) (mem
  (tuple2 b1 b1) (Tuple2 b1 b1 (t2tb14 b2) (t2tb14 y)) (t2tb35 q)))))))

;; mem_semicolon
  (assert
  (forall ((c2 ty))
  (forall ((p (set (tuple21 a b))) (q uni) (x a) (y uni))
  (= (mem (tuple2 a1 c2) (Tuple2 a1 c2 (t2tb2 x) y)
  (semicolon c2 b1 a1 (t2tb11 p) q))
  (exists ((b2 b))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 b2))) p) (mem
  (tuple2 b1 c2) (Tuple2 b1 c2 (t2tb14 b2) y) q)))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 a a))) (q (set (tuple21 a d))) (x a) (y d))
  (= (mem32 (tb2t904 (Tuple2 a1 d1 (t2tb2 x) (t2tb694 y)))
  (tb2t903 (semicolon d1 a1 a1 (t2tb4 p) (t2tb903 q))))
  (exists ((b2 a))
  (and (mem (tuple2 a1 a1) (Tuple2 a1 a1 (t2tb2 x) (t2tb2 b2)) (t2tb4 p))
  (mem32 (tb2t904 (Tuple2 a1 d1 (t2tb2 b2) (t2tb694 y))) q))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 a a))) (q (set (tuple21 a c))) (x a) (y c))
  (= (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y)))
  (tb2t129 (semicolon c1 a1 a1 (t2tb4 p) (t2tb129 q))))
  (exists ((b2 a))
  (and (mem (tuple2 a1 a1) (Tuple2 a1 a1 (t2tb2 x) (t2tb2 b2)) (t2tb4 p))
  (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 b2) (t2tb135 y))) q))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 a a))) (q (set (tuple21 a b))) (x a) (y b))
  (= (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y)))
  (tb2t11 (semicolon b1 a1 a1 (t2tb4 p) (t2tb11 q))))
  (exists ((b2 a))
  (and (mem (tuple2 a1 a1) (Tuple2 a1 a1 (t2tb2 x) (t2tb2 b2)) (t2tb4 p))
  (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 b2) (t2tb14 y))) q))))))

;; mem_semicolon
  (assert
  (forall ((a2 ty) (b2 ty) (c2 ty))
  (forall ((p uni) (q uni) (x uni) (y uni))
  (and
  (=> (mem (tuple2 a2 c2) (Tuple2 a2 c2 x y) (semicolon c2 b2 a2 p q))
  (exists ((b3 uni))
  (and (sort b2 b3)
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x b3) p) (mem (tuple2 b2 c2)
  (Tuple2 b2 c2 b3 y) q)))))
  (=>
  (exists ((b3 uni))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x b3) p) (mem (tuple2 b2 c2)
  (Tuple2 b2 c2 b3 y) q))) (mem (tuple2 a2 c2) (Tuple2 a2 c2 x y)
  (semicolon c2 b2 a2 p q)))))))

(declare-fun semicolon_back (ty ty ty uni uni) uni)

;; semicolon_back_sort
  (assert
  (forall ((a2 ty) (b2 ty) (c2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (tuple2 a2 c2))
  (semicolon_back c2 b2 a2 x x1)))))

;; semicolon_back
  (assert
  (forall ((p (set (tuple21 b c))) (q (set (tuple21 c d))))
  (= (tb2t687 (semicolon_back d1 c1 b1 (t2tb689 q) (t2tb131 p))) (semicolon15
                                                                 p q))))

;; semicolon_back
  (assert
  (forall ((p (set (tuple21 a c))) (q (set (tuple21 c d))))
  (= (tb2t903 (semicolon_back d1 c1 a1 (t2tb689 q) (t2tb129 p))) (semicolon17
                                                                 p q))))

;; semicolon_back
  (assert
  (forall ((p (set (tuple21 a b))) (q (set (tuple21 b d))))
  (= (tb2t903 (semicolon_back d1 b1 a1 (t2tb687 q) (t2tb11 p))) (semicolon16
                                                                p q))))

;; semicolon_back
  (assert
  (forall ((p (set (tuple21 a b))) (q (set (tuple21 b c))))
  (= (tb2t129 (semicolon_back c1 b1 a1 (t2tb131 q) (t2tb11 p))) (semicolon1 p
                                                                q))))

;; semicolon_back
  (assert
  (forall ((a2 ty) (b2 ty) (c2 ty))
  (forall ((p uni) (q uni))
  (= (semicolon_back c2 b2 a2 q p) (semicolon c2 b2 a2 p q)))))

(declare-fun id (ty uni) uni)

;; id_sort
  (assert
  (forall ((a2 ty))
  (forall ((x uni)) (sort (set1 (tuple2 a2 a2)) (id a2 x)))))

;; mem_id
  (assert
  (forall ((u (set (tuple21 a d))) (x (tuple21 a d)) (y (tuple21 a d)))
  (= (mem (tuple2 (tuple2 a1 d1) (tuple2 a1 d1))
  (Tuple2 (tuple2 a1 d1) (tuple2 a1 d1) (t2tb904 x) (t2tb904 y))
  (id (tuple2 a1 d1) (t2tb903 u))) (and (mem32 x u) (= x y)))))

;; mem_id
  (assert
  (forall ((u (set (tuple21 b d))) (x (tuple21 b d)) (y (tuple21 b d)))
  (= (mem (tuple2 (tuple2 b1 d1) (tuple2 b1 d1))
  (Tuple2 (tuple2 b1 d1) (tuple2 b1 d1) (t2tb692 x) (t2tb692 y))
  (id (tuple2 b1 d1) (t2tb687 u))) (and (mem23 x u) (= x y)))))

;; mem_id
  (assert
  (forall ((u (set (set (tuple21 c d)))) (x (set (tuple21 c d)))
  (y (set (tuple21 c d))))
  (= (mem (tuple2 (set1 (tuple2 c1 d1)) (set1 (tuple2 c1 d1)))
  (Tuple2 (set1 (tuple2 c1 d1)) (set1 (tuple2 c1 d1)) (t2tb689 x)
  (t2tb689 y)) (id (set1 (tuple2 c1 d1)) (t2tb688 u)))
  (and (mem22 x u) (= x y)))))

;; mem_id
  (assert
  (forall ((u (set (tuple21 c d))) (x (tuple21 c d)) (y (tuple21 c d)))
  (= (mem (tuple2 (tuple2 c1 d1) (tuple2 c1 d1))
  (Tuple2 (tuple2 c1 d1) (tuple2 c1 d1) (t2tb693 x) (t2tb693 y))
  (id (tuple2 c1 d1) (t2tb689 u))) (and (mem21 x u) (= x y)))))

;; mem_id
  (assert
  (forall ((u (set d)) (x d) (y d))
  (= (mem (tuple2 d1 d1) (Tuple2 d1 d1 (t2tb694 x) (t2tb694 y))
  (id d1 (t2tb690 u))) (and (mem20 x u) (= x y)))))

;; mem_id
  (assert
  (forall ((u (set (tuple21 a c))) (x (tuple21 a c)) (y (tuple21 a c)))
  (= (mem (tuple2 (tuple2 a1 c1) (tuple2 a1 c1))
  (Tuple2 (tuple2 a1 c1) (tuple2 a1 c1) (t2tb133 x) (t2tb133 y))
  (id (tuple2 a1 c1) (t2tb129 u))) (and (mem10 x u) (= x y)))))

;; mem_id
  (assert
  (forall ((u (set (set (tuple21 b c)))) (x (set (tuple21 b c)))
  (y (set (tuple21 b c))))
  (= (mem (tuple2 (set1 (tuple2 b1 c1)) (set1 (tuple2 b1 c1)))
  (Tuple2 (set1 (tuple2 b1 c1)) (set1 (tuple2 b1 c1)) (t2tb131 x)
  (t2tb131 y)) (id (set1 (tuple2 b1 c1)) (t2tb130 u)))
  (and (mem9 x u) (= x y)))))

;; mem_id
  (assert
  (forall ((u (set (tuple21 b c))) (x (tuple21 b c)) (y (tuple21 b c)))
  (= (mem (tuple2 (tuple2 b1 c1) (tuple2 b1 c1))
  (Tuple2 (tuple2 b1 c1) (tuple2 b1 c1) (t2tb134 x) (t2tb134 y))
  (id (tuple2 b1 c1) (t2tb131 u))) (and (mem8 x u) (= x y)))))

;; mem_id
  (assert
  (forall ((u (set c)) (x c) (y c))
  (= (mem (tuple2 c1 c1) (Tuple2 c1 c1 (t2tb135 x) (t2tb135 y))
  (id c1 (t2tb132 u))) (and (mem7 x u) (= x y)))))

;; mem_id
  (assert
  (forall ((u (set (set (tuple21 a b)))) (x (set (tuple21 a b)))
  (y (set (tuple21 a b))))
  (= (mem (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1)))
  (Tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1)) (t2tb11 x) (t2tb11 y))
  (id (set1 (tuple2 a1 b1)) (t2tb10 u))) (and (mem4 x u) (= x y)))))

;; mem_id
  (assert
  (forall ((u (set (tuple21 a b))) (x (tuple21 a b)) (y (tuple21 a b)))
  (= (mem (tuple2 (tuple2 a1 b1) (tuple2 a1 b1))
  (Tuple2 (tuple2 a1 b1) (tuple2 a1 b1) (t2tb13 x) (t2tb13 y))
  (id (tuple2 a1 b1) (t2tb11 u))) (and (mem3 x u) (= x y)))))

;; mem_id
  (assert
  (forall ((u (set b)) (x b) (y b))
  (= (mem (tuple2 b1 b1) (Tuple2 b1 b1 (t2tb14 x) (t2tb14 y))
  (id b1 (t2tb12 u))) (and (mem2 x u) (= x y)))))

;; mem_id
  (assert
  (forall ((u (set a)) (x a) (y a))
  (= (mem (tuple2 a1 a1) (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y))
  (id a1 (t2tb1 u))) (and (mem1 x u) (= x y)))))

;; mem_id
  (assert
  (forall ((a2 ty))
  (forall ((u uni) (x uni) (y uni))
  (=> (sort a2 x)
  (=> (sort a2 y)
  (= (mem (tuple2 a2 a2) (Tuple2 a2 a2 x y) (id a2 u))
  (and (mem a2 x u) (= x y))))))))

(declare-fun domain_restriction (ty ty uni uni) uni)

;; domain_restriction_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (tuple2 a2 b2))
  (domain_restriction b2 a2 x x1)))))

;; mem_domain_restriction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (tuple21 a d))) (x (tuple21 a d)) (y uni))
  (= (mem (tuple2 (tuple2 a1 d1) b2) (Tuple2 (tuple2 a1 d1) b2 (t2tb904 x) y)
  (domain_restriction b2 (tuple2 a1 d1) (t2tb903 s) p))
  (and (mem (tuple2 (tuple2 a1 d1) b2)
  (Tuple2 (tuple2 a1 d1) b2 (t2tb904 x) y) p) (mem32 x s))))))

;; mem_domain_restriction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (tuple21 b d))) (x (tuple21 b d)) (y uni))
  (= (mem (tuple2 (tuple2 b1 d1) b2) (Tuple2 (tuple2 b1 d1) b2 (t2tb692 x) y)
  (domain_restriction b2 (tuple2 b1 d1) (t2tb687 s) p))
  (and (mem (tuple2 (tuple2 b1 d1) b2)
  (Tuple2 (tuple2 b1 d1) b2 (t2tb692 x) y) p) (mem23 x s))))))

;; mem_domain_restriction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (set (tuple21 c d)))) (x (set (tuple21 c d)))
  (y uni))
  (= (mem (tuple2 (set1 (tuple2 c1 d1)) b2)
  (Tuple2 (set1 (tuple2 c1 d1)) b2 (t2tb689 x) y)
  (domain_restriction b2 (set1 (tuple2 c1 d1)) (t2tb688 s) p))
  (and (mem (tuple2 (set1 (tuple2 c1 d1)) b2)
  (Tuple2 (set1 (tuple2 c1 d1)) b2 (t2tb689 x) y) p) (mem22 x s))))))

;; mem_domain_restriction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (tuple21 c d))) (x (tuple21 c d)) (y uni))
  (= (mem (tuple2 (tuple2 c1 d1) b2) (Tuple2 (tuple2 c1 d1) b2 (t2tb693 x) y)
  (domain_restriction b2 (tuple2 c1 d1) (t2tb689 s) p))
  (and (mem (tuple2 (tuple2 c1 d1) b2)
  (Tuple2 (tuple2 c1 d1) b2 (t2tb693 x) y) p) (mem21 x s))))))

;; mem_domain_restriction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set d)) (x d) (y uni))
  (= (mem (tuple2 d1 b2) (Tuple2 d1 b2 (t2tb694 x) y)
  (domain_restriction b2 d1 (t2tb690 s) p))
  (and (mem (tuple2 d1 b2) (Tuple2 d1 b2 (t2tb694 x) y) p) (mem20 x s))))))

;; mem_domain_restriction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (tuple21 a c))) (x (tuple21 a c)) (y uni))
  (= (mem (tuple2 (tuple2 a1 c1) b2) (Tuple2 (tuple2 a1 c1) b2 (t2tb133 x) y)
  (domain_restriction b2 (tuple2 a1 c1) (t2tb129 s) p))
  (and (mem (tuple2 (tuple2 a1 c1) b2)
  (Tuple2 (tuple2 a1 c1) b2 (t2tb133 x) y) p) (mem10 x s))))))

;; mem_domain_restriction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (set (tuple21 b c)))) (x (set (tuple21 b c)))
  (y uni))
  (= (mem (tuple2 (set1 (tuple2 b1 c1)) b2)
  (Tuple2 (set1 (tuple2 b1 c1)) b2 (t2tb131 x) y)
  (domain_restriction b2 (set1 (tuple2 b1 c1)) (t2tb130 s) p))
  (and (mem (tuple2 (set1 (tuple2 b1 c1)) b2)
  (Tuple2 (set1 (tuple2 b1 c1)) b2 (t2tb131 x) y) p) (mem9 x s))))))

;; mem_domain_restriction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (tuple21 b c))) (x (tuple21 b c)) (y uni))
  (= (mem (tuple2 (tuple2 b1 c1) b2) (Tuple2 (tuple2 b1 c1) b2 (t2tb134 x) y)
  (domain_restriction b2 (tuple2 b1 c1) (t2tb131 s) p))
  (and (mem (tuple2 (tuple2 b1 c1) b2)
  (Tuple2 (tuple2 b1 c1) b2 (t2tb134 x) y) p) (mem8 x s))))))

;; mem_domain_restriction
  (assert
  (forall ((p (set (tuple21 c d))) (s (set c)) (x c) (y d))
  (= (mem21 (tb2t693 (Tuple2 c1 d1 (t2tb135 x) (t2tb694 y)))
  (tb2t689 (domain_restriction d1 c1 (t2tb132 s) (t2tb689 p))))
  (and (mem21 (tb2t693 (Tuple2 c1 d1 (t2tb135 x) (t2tb694 y))) p) (mem7 x s)))))

;; mem_domain_restriction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set c)) (x c) (y uni))
  (= (mem (tuple2 c1 b2) (Tuple2 c1 b2 (t2tb135 x) y)
  (domain_restriction b2 c1 (t2tb132 s) p))
  (and (mem (tuple2 c1 b2) (Tuple2 c1 b2 (t2tb135 x) y) p) (mem7 x s))))))

;; mem_domain_restriction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (set (tuple21 a b)))) (x (set (tuple21 a b)))
  (y uni))
  (= (mem (tuple2 (set1 (tuple2 a1 b1)) b2)
  (Tuple2 (set1 (tuple2 a1 b1)) b2 (t2tb11 x) y)
  (domain_restriction b2 (set1 (tuple2 a1 b1)) (t2tb10 s) p))
  (and (mem (tuple2 (set1 (tuple2 a1 b1)) b2)
  (Tuple2 (set1 (tuple2 a1 b1)) b2 (t2tb11 x) y) p) (mem4 x s))))))

;; mem_domain_restriction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (tuple21 a b))) (x (tuple21 a b)) (y uni))
  (= (mem (tuple2 (tuple2 a1 b1) b2) (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) y)
  (domain_restriction b2 (tuple2 a1 b1) (t2tb11 s) p))
  (and (mem (tuple2 (tuple2 a1 b1) b2)
  (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) y) p) (mem3 x s))))))

;; mem_domain_restriction
  (assert
  (forall ((p (set (tuple21 b d))) (s (set b)) (x b) (y d))
  (= (mem23 (tb2t692 (Tuple2 b1 d1 (t2tb14 x) (t2tb694 y)))
  (tb2t687 (domain_restriction d1 b1 (t2tb12 s) (t2tb687 p))))
  (and (mem23 (tb2t692 (Tuple2 b1 d1 (t2tb14 x) (t2tb694 y))) p) (mem2 x s)))))

;; mem_domain_restriction
  (assert
  (forall ((p (set (tuple21 b c))) (s (set b)) (x b) (y c))
  (= (mem8 (tb2t134 (Tuple2 b1 c1 (t2tb14 x) (t2tb135 y)))
  (tb2t131 (domain_restriction c1 b1 (t2tb12 s) (t2tb131 p))))
  (and (mem8 (tb2t134 (Tuple2 b1 c1 (t2tb14 x) (t2tb135 y))) p) (mem2 x s)))))

;; mem_domain_restriction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set b)) (x b) (y uni))
  (= (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) y)
  (domain_restriction b2 b1 (t2tb12 s) p))
  (and (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) y) p) (mem2 x s))))))

;; mem_domain_restriction
  (assert
  (forall ((p (set (tuple21 a d))) (s (set a)) (x a) (y d))
  (= (mem32 (tb2t904 (Tuple2 a1 d1 (t2tb2 x) (t2tb694 y)))
  (tb2t903 (domain_restriction d1 a1 (t2tb1 s) (t2tb903 p))))
  (and (mem32 (tb2t904 (Tuple2 a1 d1 (t2tb2 x) (t2tb694 y))) p) (mem1 x s)))))

;; mem_domain_restriction
  (assert
  (forall ((p (set (tuple21 a c))) (s (set a)) (x a) (y c))
  (= (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y)))
  (tb2t129 (domain_restriction c1 a1 (t2tb1 s) (t2tb129 p))))
  (and (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y))) p) (mem1 x s)))))

;; mem_domain_restriction
  (assert
  (forall ((p (set (tuple21 a b))) (s (set a)) (x a) (y b))
  (= (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y)))
  (tb2t11 (domain_restriction b1 a1 (t2tb1 s) (t2tb11 p))))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y))) p) (mem1 x s)))))

;; mem_domain_restriction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set a)) (x a) (y uni))
  (= (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) y)
  (domain_restriction b2 a1 (t2tb1 s) p))
  (and (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) y) p) (mem1 x s))))))

;; mem_domain_restriction
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((p uni) (s uni) (x uni) (y uni))
  (= (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) (domain_restriction b2 a2 s p))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) p) (mem a2 x s))))))

(declare-fun range_restriction (ty ty uni uni) uni)

;; range_restriction_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (tuple2 a2 b2))
  (range_restriction b2 a2 x x1)))))

;; mem_range_restriction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (tuple21 a d))) (x uni) (y (tuple21 a d)))
  (= (mem (tuple2 a2 (tuple2 a1 d1)) (Tuple2 a2 (tuple2 a1 d1) x (t2tb904 y))
  (range_restriction (tuple2 a1 d1) a2 p (t2tb903 t)))
  (and (mem (tuple2 a2 (tuple2 a1 d1))
  (Tuple2 a2 (tuple2 a1 d1) x (t2tb904 y)) p) (mem32 y t))))))

;; mem_range_restriction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (tuple21 b d))) (x uni) (y (tuple21 b d)))
  (= (mem (tuple2 a2 (tuple2 b1 d1)) (Tuple2 a2 (tuple2 b1 d1) x (t2tb692 y))
  (range_restriction (tuple2 b1 d1) a2 p (t2tb687 t)))
  (and (mem (tuple2 a2 (tuple2 b1 d1))
  (Tuple2 a2 (tuple2 b1 d1) x (t2tb692 y)) p) (mem23 y t))))))

;; mem_range_restriction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (set (tuple21 c d)))) (x uni) (y (set (tuple21 c
  d))))
  (= (mem (tuple2 a2 (set1 (tuple2 c1 d1)))
  (Tuple2 a2 (set1 (tuple2 c1 d1)) x (t2tb689 y))
  (range_restriction (set1 (tuple2 c1 d1)) a2 p (t2tb688 t)))
  (and (mem (tuple2 a2 (set1 (tuple2 c1 d1)))
  (Tuple2 a2 (set1 (tuple2 c1 d1)) x (t2tb689 y)) p) (mem22 y t))))))

;; mem_range_restriction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (tuple21 c d))) (x uni) (y (tuple21 c d)))
  (= (mem (tuple2 a2 (tuple2 c1 d1)) (Tuple2 a2 (tuple2 c1 d1) x (t2tb693 y))
  (range_restriction (tuple2 c1 d1) a2 p (t2tb689 t)))
  (and (mem (tuple2 a2 (tuple2 c1 d1))
  (Tuple2 a2 (tuple2 c1 d1) x (t2tb693 y)) p) (mem21 y t))))))

;; mem_range_restriction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set d)) (x uni) (y d))
  (= (mem (tuple2 a2 d1) (Tuple2 a2 d1 x (t2tb694 y))
  (range_restriction d1 a2 p (t2tb690 t)))
  (and (mem (tuple2 a2 d1) (Tuple2 a2 d1 x (t2tb694 y)) p) (mem20 y t))))))

;; mem_range_restriction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (tuple21 a c))) (x uni) (y (tuple21 a c)))
  (= (mem (tuple2 a2 (tuple2 a1 c1)) (Tuple2 a2 (tuple2 a1 c1) x (t2tb133 y))
  (range_restriction (tuple2 a1 c1) a2 p (t2tb129 t)))
  (and (mem (tuple2 a2 (tuple2 a1 c1))
  (Tuple2 a2 (tuple2 a1 c1) x (t2tb133 y)) p) (mem10 y t))))))

;; mem_range_restriction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (set (tuple21 b c)))) (x uni) (y (set (tuple21 b
  c))))
  (= (mem (tuple2 a2 (set1 (tuple2 b1 c1)))
  (Tuple2 a2 (set1 (tuple2 b1 c1)) x (t2tb131 y))
  (range_restriction (set1 (tuple2 b1 c1)) a2 p (t2tb130 t)))
  (and (mem (tuple2 a2 (set1 (tuple2 b1 c1)))
  (Tuple2 a2 (set1 (tuple2 b1 c1)) x (t2tb131 y)) p) (mem9 y t))))))

;; mem_range_restriction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (tuple21 b c))) (x uni) (y (tuple21 b c)))
  (= (mem (tuple2 a2 (tuple2 b1 c1)) (Tuple2 a2 (tuple2 b1 c1) x (t2tb134 y))
  (range_restriction (tuple2 b1 c1) a2 p (t2tb131 t)))
  (and (mem (tuple2 a2 (tuple2 b1 c1))
  (Tuple2 a2 (tuple2 b1 c1) x (t2tb134 y)) p) (mem8 y t))))))

;; mem_range_restriction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set c)) (x uni) (y c))
  (= (mem (tuple2 a2 c1) (Tuple2 a2 c1 x (t2tb135 y))
  (range_restriction c1 a2 p (t2tb132 t)))
  (and (mem (tuple2 a2 c1) (Tuple2 a2 c1 x (t2tb135 y)) p) (mem7 y t))))))

;; mem_range_restriction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (set (tuple21 a b)))) (x uni) (y (set (tuple21 a
  b))))
  (= (mem (tuple2 a2 (set1 (tuple2 a1 b1)))
  (Tuple2 a2 (set1 (tuple2 a1 b1)) x (t2tb11 y))
  (range_restriction (set1 (tuple2 a1 b1)) a2 p (t2tb10 t)))
  (and (mem (tuple2 a2 (set1 (tuple2 a1 b1)))
  (Tuple2 a2 (set1 (tuple2 a1 b1)) x (t2tb11 y)) p) (mem4 y t))))))

;; mem_range_restriction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (tuple21 a b))) (x uni) (y (tuple21 a b)))
  (= (mem (tuple2 a2 (tuple2 a1 b1)) (Tuple2 a2 (tuple2 a1 b1) x (t2tb13 y))
  (range_restriction (tuple2 a1 b1) a2 p (t2tb11 t)))
  (and (mem (tuple2 a2 (tuple2 a1 b1))
  (Tuple2 a2 (tuple2 a1 b1) x (t2tb13 y)) p) (mem3 y t))))))

;; mem_range_restriction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set b)) (x uni) (y b))
  (= (mem (tuple2 a2 b1) (Tuple2 a2 b1 x (t2tb14 y))
  (range_restriction b1 a2 p (t2tb12 t)))
  (and (mem (tuple2 a2 b1) (Tuple2 a2 b1 x (t2tb14 y)) p) (mem2 y t))))))

;; mem_range_restriction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set a)) (x uni) (y a))
  (= (mem (tuple2 a2 a1) (Tuple2 a2 a1 x (t2tb2 y))
  (range_restriction a1 a2 p (t2tb1 t)))
  (and (mem (tuple2 a2 a1) (Tuple2 a2 a1 x (t2tb2 y)) p) (mem1 y t))))))

;; mem_range_restriction
  (assert
  (forall ((p (set (tuple21 c d))) (t (set d)) (x c) (y d))
  (= (mem21 (tb2t693 (Tuple2 c1 d1 (t2tb135 x) (t2tb694 y)))
  (tb2t689 (range_restriction d1 c1 (t2tb689 p) (t2tb690 t))))
  (and (mem21 (tb2t693 (Tuple2 c1 d1 (t2tb135 x) (t2tb694 y))) p) (mem20 y
  t)))))

;; mem_range_restriction
  (assert
  (forall ((p (set (tuple21 b d))) (t (set d)) (x b) (y d))
  (= (mem23 (tb2t692 (Tuple2 b1 d1 (t2tb14 x) (t2tb694 y)))
  (tb2t687 (range_restriction d1 b1 (t2tb687 p) (t2tb690 t))))
  (and (mem23 (tb2t692 (Tuple2 b1 d1 (t2tb14 x) (t2tb694 y))) p) (mem20 y t)))))

;; mem_range_restriction
  (assert
  (forall ((p (set (tuple21 b c))) (t (set c)) (x b) (y c))
  (= (mem8 (tb2t134 (Tuple2 b1 c1 (t2tb14 x) (t2tb135 y)))
  (tb2t131 (range_restriction c1 b1 (t2tb131 p) (t2tb132 t))))
  (and (mem8 (tb2t134 (Tuple2 b1 c1 (t2tb14 x) (t2tb135 y))) p) (mem7 y t)))))

;; mem_range_restriction
  (assert
  (forall ((p (set (tuple21 a d))) (t (set d)) (x a) (y d))
  (= (mem32 (tb2t904 (Tuple2 a1 d1 (t2tb2 x) (t2tb694 y)))
  (tb2t903 (range_restriction d1 a1 (t2tb903 p) (t2tb690 t))))
  (and (mem32 (tb2t904 (Tuple2 a1 d1 (t2tb2 x) (t2tb694 y))) p) (mem20 y t)))))

;; mem_range_restriction
  (assert
  (forall ((p (set (tuple21 a c))) (t (set c)) (x a) (y c))
  (= (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y)))
  (tb2t129 (range_restriction c1 a1 (t2tb129 p) (t2tb132 t))))
  (and (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y))) p) (mem7 y t)))))

;; mem_range_restriction
  (assert
  (forall ((p (set (tuple21 a b))) (t (set b)) (x a) (y b))
  (= (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y)))
  (tb2t11 (range_restriction b1 a1 (t2tb11 p) (t2tb12 t))))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y))) p) (mem2 y t)))))

;; mem_range_restriction
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((p uni) (t uni) (x uni) (y uni))
  (= (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) (range_restriction b2 a2 p t))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) p) (mem b2 y t))))))

(declare-fun domain_substraction (ty ty uni uni) uni)

;; domain_substraction_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (tuple2 a2 b2))
  (domain_substraction b2 a2 x x1)))))

;; mem_domain_substraction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (tuple21 a d))) (x (tuple21 a d)) (y uni))
  (= (mem (tuple2 (tuple2 a1 d1) b2) (Tuple2 (tuple2 a1 d1) b2 (t2tb904 x) y)
  (domain_substraction b2 (tuple2 a1 d1) (t2tb903 s) p))
  (and (mem (tuple2 (tuple2 a1 d1) b2)
  (Tuple2 (tuple2 a1 d1) b2 (t2tb904 x) y) p) (not (mem32 x s)))))))

;; mem_domain_substraction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (tuple21 b d))) (x (tuple21 b d)) (y uni))
  (= (mem (tuple2 (tuple2 b1 d1) b2) (Tuple2 (tuple2 b1 d1) b2 (t2tb692 x) y)
  (domain_substraction b2 (tuple2 b1 d1) (t2tb687 s) p))
  (and (mem (tuple2 (tuple2 b1 d1) b2)
  (Tuple2 (tuple2 b1 d1) b2 (t2tb692 x) y) p) (not (mem23 x s)))))))

;; mem_domain_substraction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (set (tuple21 c d)))) (x (set (tuple21 c d)))
  (y uni))
  (= (mem (tuple2 (set1 (tuple2 c1 d1)) b2)
  (Tuple2 (set1 (tuple2 c1 d1)) b2 (t2tb689 x) y)
  (domain_substraction b2 (set1 (tuple2 c1 d1)) (t2tb688 s) p))
  (and (mem (tuple2 (set1 (tuple2 c1 d1)) b2)
  (Tuple2 (set1 (tuple2 c1 d1)) b2 (t2tb689 x) y) p) (not (mem22 x s)))))))

;; mem_domain_substraction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (tuple21 c d))) (x (tuple21 c d)) (y uni))
  (= (mem (tuple2 (tuple2 c1 d1) b2) (Tuple2 (tuple2 c1 d1) b2 (t2tb693 x) y)
  (domain_substraction b2 (tuple2 c1 d1) (t2tb689 s) p))
  (and (mem (tuple2 (tuple2 c1 d1) b2)
  (Tuple2 (tuple2 c1 d1) b2 (t2tb693 x) y) p) (not (mem21 x s)))))))

;; mem_domain_substraction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set d)) (x d) (y uni))
  (= (mem (tuple2 d1 b2) (Tuple2 d1 b2 (t2tb694 x) y)
  (domain_substraction b2 d1 (t2tb690 s) p))
  (and (mem (tuple2 d1 b2) (Tuple2 d1 b2 (t2tb694 x) y) p) (not (mem20 x s)))))))

;; mem_domain_substraction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (tuple21 a c))) (x (tuple21 a c)) (y uni))
  (= (mem (tuple2 (tuple2 a1 c1) b2) (Tuple2 (tuple2 a1 c1) b2 (t2tb133 x) y)
  (domain_substraction b2 (tuple2 a1 c1) (t2tb129 s) p))
  (and (mem (tuple2 (tuple2 a1 c1) b2)
  (Tuple2 (tuple2 a1 c1) b2 (t2tb133 x) y) p) (not (mem10 x s)))))))

;; mem_domain_substraction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (set (tuple21 b c)))) (x (set (tuple21 b c)))
  (y uni))
  (= (mem (tuple2 (set1 (tuple2 b1 c1)) b2)
  (Tuple2 (set1 (tuple2 b1 c1)) b2 (t2tb131 x) y)
  (domain_substraction b2 (set1 (tuple2 b1 c1)) (t2tb130 s) p))
  (and (mem (tuple2 (set1 (tuple2 b1 c1)) b2)
  (Tuple2 (set1 (tuple2 b1 c1)) b2 (t2tb131 x) y) p) (not (mem9 x s)))))))

;; mem_domain_substraction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (tuple21 b c))) (x (tuple21 b c)) (y uni))
  (= (mem (tuple2 (tuple2 b1 c1) b2) (Tuple2 (tuple2 b1 c1) b2 (t2tb134 x) y)
  (domain_substraction b2 (tuple2 b1 c1) (t2tb131 s) p))
  (and (mem (tuple2 (tuple2 b1 c1) b2)
  (Tuple2 (tuple2 b1 c1) b2 (t2tb134 x) y) p) (not (mem8 x s)))))))

;; mem_domain_substraction
  (assert
  (forall ((p (set (tuple21 c d))) (s (set c)) (x c) (y d))
  (= (mem21 (tb2t693 (Tuple2 c1 d1 (t2tb135 x) (t2tb694 y)))
  (tb2t689 (domain_substraction d1 c1 (t2tb132 s) (t2tb689 p))))
  (and (mem21 (tb2t693 (Tuple2 c1 d1 (t2tb135 x) (t2tb694 y))) p)
  (not (mem7 x s))))))

;; mem_domain_substraction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set c)) (x c) (y uni))
  (= (mem (tuple2 c1 b2) (Tuple2 c1 b2 (t2tb135 x) y)
  (domain_substraction b2 c1 (t2tb132 s) p))
  (and (mem (tuple2 c1 b2) (Tuple2 c1 b2 (t2tb135 x) y) p) (not (mem7 x s)))))))

;; mem_domain_substraction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (set (tuple21 a b)))) (x (set (tuple21 a b)))
  (y uni))
  (= (mem (tuple2 (set1 (tuple2 a1 b1)) b2)
  (Tuple2 (set1 (tuple2 a1 b1)) b2 (t2tb11 x) y)
  (domain_substraction b2 (set1 (tuple2 a1 b1)) (t2tb10 s) p))
  (and (mem (tuple2 (set1 (tuple2 a1 b1)) b2)
  (Tuple2 (set1 (tuple2 a1 b1)) b2 (t2tb11 x) y) p) (not (mem4 x s)))))))

;; mem_domain_substraction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (tuple21 a b))) (x (tuple21 a b)) (y uni))
  (= (mem (tuple2 (tuple2 a1 b1) b2) (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) y)
  (domain_substraction b2 (tuple2 a1 b1) (t2tb11 s) p))
  (and (mem (tuple2 (tuple2 a1 b1) b2)
  (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) y) p) (not (mem3 x s)))))))

;; mem_domain_substraction
  (assert
  (forall ((p (set (tuple21 b d))) (s (set b)) (x b) (y d))
  (= (mem23 (tb2t692 (Tuple2 b1 d1 (t2tb14 x) (t2tb694 y)))
  (tb2t687 (domain_substraction d1 b1 (t2tb12 s) (t2tb687 p))))
  (and (mem23 (tb2t692 (Tuple2 b1 d1 (t2tb14 x) (t2tb694 y))) p)
  (not (mem2 x s))))))

;; mem_domain_substraction
  (assert
  (forall ((p (set (tuple21 b c))) (s (set b)) (x b) (y c))
  (= (mem8 (tb2t134 (Tuple2 b1 c1 (t2tb14 x) (t2tb135 y)))
  (tb2t131 (domain_substraction c1 b1 (t2tb12 s) (t2tb131 p))))
  (and (mem8 (tb2t134 (Tuple2 b1 c1 (t2tb14 x) (t2tb135 y))) p)
  (not (mem2 x s))))))

;; mem_domain_substraction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set b)) (x b) (y uni))
  (= (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) y)
  (domain_substraction b2 b1 (t2tb12 s) p))
  (and (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) y) p) (not (mem2 x s)))))))

;; mem_domain_substraction
  (assert
  (forall ((p (set (tuple21 a d))) (s (set a)) (x a) (y d))
  (= (mem32 (tb2t904 (Tuple2 a1 d1 (t2tb2 x) (t2tb694 y)))
  (tb2t903 (domain_substraction d1 a1 (t2tb1 s) (t2tb903 p))))
  (and (mem32 (tb2t904 (Tuple2 a1 d1 (t2tb2 x) (t2tb694 y))) p)
  (not (mem1 x s))))))

;; mem_domain_substraction
  (assert
  (forall ((p (set (tuple21 a c))) (s (set a)) (x a) (y c))
  (= (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y)))
  (tb2t129 (domain_substraction c1 a1 (t2tb1 s) (t2tb129 p))))
  (and (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y))) p)
  (not (mem1 x s))))))

;; mem_domain_substraction
  (assert
  (forall ((p (set (tuple21 a b))) (s (set a)) (x a) (y b))
  (= (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y)))
  (tb2t11 (domain_substraction b1 a1 (t2tb1 s) (t2tb11 p))))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y))) p)
  (not (mem1 x s))))))

;; mem_domain_substraction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set a)) (x a) (y uni))
  (= (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) y)
  (domain_substraction b2 a1 (t2tb1 s) p))
  (and (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) y) p) (not (mem1 x s)))))))

;; mem_domain_substraction
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((p uni) (s uni) (x uni) (y uni))
  (= (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) (domain_substraction b2 a2 s p))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) p) (not (mem a2 x s)))))))

(declare-fun range_substraction (ty ty uni uni) uni)

;; range_substraction_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (tuple2 a2 b2))
  (range_substraction b2 a2 x x1)))))

;; mem_range_substraction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (tuple21 a d))) (x uni) (y (tuple21 a d)))
  (= (mem (tuple2 a2 (tuple2 a1 d1)) (Tuple2 a2 (tuple2 a1 d1) x (t2tb904 y))
  (range_substraction (tuple2 a1 d1) a2 p (t2tb903 t)))
  (and (mem (tuple2 a2 (tuple2 a1 d1))
  (Tuple2 a2 (tuple2 a1 d1) x (t2tb904 y)) p) (not (mem32 y t)))))))

;; mem_range_substraction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (tuple21 b d))) (x uni) (y (tuple21 b d)))
  (= (mem (tuple2 a2 (tuple2 b1 d1)) (Tuple2 a2 (tuple2 b1 d1) x (t2tb692 y))
  (range_substraction (tuple2 b1 d1) a2 p (t2tb687 t)))
  (and (mem (tuple2 a2 (tuple2 b1 d1))
  (Tuple2 a2 (tuple2 b1 d1) x (t2tb692 y)) p) (not (mem23 y t)))))))

;; mem_range_substraction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (set (tuple21 c d)))) (x uni) (y (set (tuple21 c
  d))))
  (= (mem (tuple2 a2 (set1 (tuple2 c1 d1)))
  (Tuple2 a2 (set1 (tuple2 c1 d1)) x (t2tb689 y))
  (range_substraction (set1 (tuple2 c1 d1)) a2 p (t2tb688 t)))
  (and (mem (tuple2 a2 (set1 (tuple2 c1 d1)))
  (Tuple2 a2 (set1 (tuple2 c1 d1)) x (t2tb689 y)) p) (not (mem22 y t)))))))

;; mem_range_substraction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (tuple21 c d))) (x uni) (y (tuple21 c d)))
  (= (mem (tuple2 a2 (tuple2 c1 d1)) (Tuple2 a2 (tuple2 c1 d1) x (t2tb693 y))
  (range_substraction (tuple2 c1 d1) a2 p (t2tb689 t)))
  (and (mem (tuple2 a2 (tuple2 c1 d1))
  (Tuple2 a2 (tuple2 c1 d1) x (t2tb693 y)) p) (not (mem21 y t)))))))

;; mem_range_substraction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set d)) (x uni) (y d))
  (= (mem (tuple2 a2 d1) (Tuple2 a2 d1 x (t2tb694 y))
  (range_substraction d1 a2 p (t2tb690 t)))
  (and (mem (tuple2 a2 d1) (Tuple2 a2 d1 x (t2tb694 y)) p) (not (mem20 y t)))))))

;; mem_range_substraction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (tuple21 a c))) (x uni) (y (tuple21 a c)))
  (= (mem (tuple2 a2 (tuple2 a1 c1)) (Tuple2 a2 (tuple2 a1 c1) x (t2tb133 y))
  (range_substraction (tuple2 a1 c1) a2 p (t2tb129 t)))
  (and (mem (tuple2 a2 (tuple2 a1 c1))
  (Tuple2 a2 (tuple2 a1 c1) x (t2tb133 y)) p) (not (mem10 y t)))))))

;; mem_range_substraction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (set (tuple21 b c)))) (x uni) (y (set (tuple21 b
  c))))
  (= (mem (tuple2 a2 (set1 (tuple2 b1 c1)))
  (Tuple2 a2 (set1 (tuple2 b1 c1)) x (t2tb131 y))
  (range_substraction (set1 (tuple2 b1 c1)) a2 p (t2tb130 t)))
  (and (mem (tuple2 a2 (set1 (tuple2 b1 c1)))
  (Tuple2 a2 (set1 (tuple2 b1 c1)) x (t2tb131 y)) p) (not (mem9 y t)))))))

;; mem_range_substraction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (tuple21 b c))) (x uni) (y (tuple21 b c)))
  (= (mem (tuple2 a2 (tuple2 b1 c1)) (Tuple2 a2 (tuple2 b1 c1) x (t2tb134 y))
  (range_substraction (tuple2 b1 c1) a2 p (t2tb131 t)))
  (and (mem (tuple2 a2 (tuple2 b1 c1))
  (Tuple2 a2 (tuple2 b1 c1) x (t2tb134 y)) p) (not (mem8 y t)))))))

;; mem_range_substraction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set c)) (x uni) (y c))
  (= (mem (tuple2 a2 c1) (Tuple2 a2 c1 x (t2tb135 y))
  (range_substraction c1 a2 p (t2tb132 t)))
  (and (mem (tuple2 a2 c1) (Tuple2 a2 c1 x (t2tb135 y)) p) (not (mem7 y t)))))))

;; mem_range_substraction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (set (tuple21 a b)))) (x uni) (y (set (tuple21 a
  b))))
  (= (mem (tuple2 a2 (set1 (tuple2 a1 b1)))
  (Tuple2 a2 (set1 (tuple2 a1 b1)) x (t2tb11 y))
  (range_substraction (set1 (tuple2 a1 b1)) a2 p (t2tb10 t)))
  (and (mem (tuple2 a2 (set1 (tuple2 a1 b1)))
  (Tuple2 a2 (set1 (tuple2 a1 b1)) x (t2tb11 y)) p) (not (mem4 y t)))))))

;; mem_range_substraction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (tuple21 a b))) (x uni) (y (tuple21 a b)))
  (= (mem (tuple2 a2 (tuple2 a1 b1)) (Tuple2 a2 (tuple2 a1 b1) x (t2tb13 y))
  (range_substraction (tuple2 a1 b1) a2 p (t2tb11 t)))
  (and (mem (tuple2 a2 (tuple2 a1 b1))
  (Tuple2 a2 (tuple2 a1 b1) x (t2tb13 y)) p) (not (mem3 y t)))))))

;; mem_range_substraction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set b)) (x uni) (y b))
  (= (mem (tuple2 a2 b1) (Tuple2 a2 b1 x (t2tb14 y))
  (range_substraction b1 a2 p (t2tb12 t)))
  (and (mem (tuple2 a2 b1) (Tuple2 a2 b1 x (t2tb14 y)) p) (not (mem2 y t)))))))

;; mem_range_substraction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set a)) (x uni) (y a))
  (= (mem (tuple2 a2 a1) (Tuple2 a2 a1 x (t2tb2 y))
  (range_substraction a1 a2 p (t2tb1 t)))
  (and (mem (tuple2 a2 a1) (Tuple2 a2 a1 x (t2tb2 y)) p) (not (mem1 y t)))))))

;; mem_range_substraction
  (assert
  (forall ((p (set (tuple21 c d))) (t (set d)) (x c) (y d))
  (= (mem21 (tb2t693 (Tuple2 c1 d1 (t2tb135 x) (t2tb694 y)))
  (tb2t689 (range_substraction d1 c1 (t2tb689 p) (t2tb690 t))))
  (and (mem21 (tb2t693 (Tuple2 c1 d1 (t2tb135 x) (t2tb694 y))) p)
  (not (mem20 y t))))))

;; mem_range_substraction
  (assert
  (forall ((p (set (tuple21 b d))) (t (set d)) (x b) (y d))
  (= (mem23 (tb2t692 (Tuple2 b1 d1 (t2tb14 x) (t2tb694 y)))
  (tb2t687 (range_substraction d1 b1 (t2tb687 p) (t2tb690 t))))
  (and (mem23 (tb2t692 (Tuple2 b1 d1 (t2tb14 x) (t2tb694 y))) p)
  (not (mem20 y t))))))

;; mem_range_substraction
  (assert
  (forall ((p (set (tuple21 b c))) (t (set c)) (x b) (y c))
  (= (mem8 (tb2t134 (Tuple2 b1 c1 (t2tb14 x) (t2tb135 y)))
  (tb2t131 (range_substraction c1 b1 (t2tb131 p) (t2tb132 t))))
  (and (mem8 (tb2t134 (Tuple2 b1 c1 (t2tb14 x) (t2tb135 y))) p)
  (not (mem7 y t))))))

;; mem_range_substraction
  (assert
  (forall ((p (set (tuple21 a d))) (t (set d)) (x a) (y d))
  (= (mem32 (tb2t904 (Tuple2 a1 d1 (t2tb2 x) (t2tb694 y)))
  (tb2t903 (range_substraction d1 a1 (t2tb903 p) (t2tb690 t))))
  (and (mem32 (tb2t904 (Tuple2 a1 d1 (t2tb2 x) (t2tb694 y))) p)
  (not (mem20 y t))))))

;; mem_range_substraction
  (assert
  (forall ((p (set (tuple21 a c))) (t (set c)) (x a) (y c))
  (= (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y)))
  (tb2t129 (range_substraction c1 a1 (t2tb129 p) (t2tb132 t))))
  (and (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y))) p)
  (not (mem7 y t))))))

;; mem_range_substraction
  (assert
  (forall ((p (set (tuple21 a b))) (t (set b)) (x a) (y b))
  (= (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y)))
  (tb2t11 (range_substraction b1 a1 (t2tb11 p) (t2tb12 t))))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y))) p)
  (not (mem2 y t))))))

;; mem_range_substraction
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((p uni) (t uni) (x uni) (y uni))
  (= (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) (range_substraction b2 a2 p t))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) p) (not (mem b2 y t)))))))

(declare-fun image (ty ty uni uni) uni)

;; image_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 b2) (image b2 a2 x x1)))))

;; mem_image
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (w uni) (x (tuple21 a d)))
  (and
  (=> (mem32 x (tb2t903 (image (tuple2 a1 d1) a2 p w)))
  (exists ((a3 uni))
  (and (sort a2 a3)
  (and (mem a2 a3 w) (mem (tuple2 a2 (tuple2 a1 d1))
  (Tuple2 a2 (tuple2 a1 d1) a3 (t2tb904 x)) p)))))
  (=>
  (exists ((a3 uni))
  (and (mem a2 a3 w) (mem (tuple2 a2 (tuple2 a1 d1))
  (Tuple2 a2 (tuple2 a1 d1) a3 (t2tb904 x)) p))) (mem32 x
  (tb2t903 (image (tuple2 a1 d1) a2 p w))))))))

;; mem_image
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (w uni) (x (tuple21 b d)))
  (and
  (=> (mem23 x (tb2t687 (image (tuple2 b1 d1) a2 p w)))
  (exists ((a3 uni))
  (and (sort a2 a3)
  (and (mem a2 a3 w) (mem (tuple2 a2 (tuple2 b1 d1))
  (Tuple2 a2 (tuple2 b1 d1) a3 (t2tb692 x)) p)))))
  (=>
  (exists ((a3 uni))
  (and (mem a2 a3 w) (mem (tuple2 a2 (tuple2 b1 d1))
  (Tuple2 a2 (tuple2 b1 d1) a3 (t2tb692 x)) p))) (mem23 x
  (tb2t687 (image (tuple2 b1 d1) a2 p w))))))))

;; mem_image
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (w uni) (x (set (tuple21 c d))))
  (and
  (=> (mem22 x (tb2t688 (image (set1 (tuple2 c1 d1)) a2 p w)))
  (exists ((a3 uni))
  (and (sort a2 a3)
  (and (mem a2 a3 w) (mem (tuple2 a2 (set1 (tuple2 c1 d1)))
  (Tuple2 a2 (set1 (tuple2 c1 d1)) a3 (t2tb689 x)) p)))))
  (=>
  (exists ((a3 uni))
  (and (mem a2 a3 w) (mem (tuple2 a2 (set1 (tuple2 c1 d1)))
  (Tuple2 a2 (set1 (tuple2 c1 d1)) a3 (t2tb689 x)) p))) (mem22 x
  (tb2t688 (image (set1 (tuple2 c1 d1)) a2 p w))))))))

;; mem_image
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (w uni) (x (tuple21 c d)))
  (and
  (=> (mem21 x (tb2t689 (image (tuple2 c1 d1) a2 p w)))
  (exists ((a3 uni))
  (and (sort a2 a3)
  (and (mem a2 a3 w) (mem (tuple2 a2 (tuple2 c1 d1))
  (Tuple2 a2 (tuple2 c1 d1) a3 (t2tb693 x)) p)))))
  (=>
  (exists ((a3 uni))
  (and (mem a2 a3 w) (mem (tuple2 a2 (tuple2 c1 d1))
  (Tuple2 a2 (tuple2 c1 d1) a3 (t2tb693 x)) p))) (mem21 x
  (tb2t689 (image (tuple2 c1 d1) a2 p w))))))))

;; mem_image
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (w uni) (x d))
  (and
  (=> (mem20 x (tb2t690 (image d1 a2 p w)))
  (exists ((a3 uni))
  (and (sort a2 a3)
  (and (mem a2 a3 w) (mem (tuple2 a2 d1) (Tuple2 a2 d1 a3 (t2tb694 x)) p)))))
  (=>
  (exists ((a3 uni))
  (and (mem a2 a3 w) (mem (tuple2 a2 d1) (Tuple2 a2 d1 a3 (t2tb694 x)) p)))
  (mem20 x (tb2t690 (image d1 a2 p w))))))))

;; mem_image
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (w uni) (x (tuple21 a c)))
  (and
  (=> (mem10 x (tb2t129 (image (tuple2 a1 c1) a2 p w)))
  (exists ((a3 uni))
  (and (sort a2 a3)
  (and (mem a2 a3 w) (mem (tuple2 a2 (tuple2 a1 c1))
  (Tuple2 a2 (tuple2 a1 c1) a3 (t2tb133 x)) p)))))
  (=>
  (exists ((a3 uni))
  (and (mem a2 a3 w) (mem (tuple2 a2 (tuple2 a1 c1))
  (Tuple2 a2 (tuple2 a1 c1) a3 (t2tb133 x)) p))) (mem10 x
  (tb2t129 (image (tuple2 a1 c1) a2 p w))))))))

;; mem_image
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (w uni) (x (set (tuple21 b c))))
  (and
  (=> (mem9 x (tb2t130 (image (set1 (tuple2 b1 c1)) a2 p w)))
  (exists ((a3 uni))
  (and (sort a2 a3)
  (and (mem a2 a3 w) (mem (tuple2 a2 (set1 (tuple2 b1 c1)))
  (Tuple2 a2 (set1 (tuple2 b1 c1)) a3 (t2tb131 x)) p)))))
  (=>
  (exists ((a3 uni))
  (and (mem a2 a3 w) (mem (tuple2 a2 (set1 (tuple2 b1 c1)))
  (Tuple2 a2 (set1 (tuple2 b1 c1)) a3 (t2tb131 x)) p))) (mem9 x
  (tb2t130 (image (set1 (tuple2 b1 c1)) a2 p w))))))))

;; mem_image
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (w uni) (x (tuple21 b c)))
  (and
  (=> (mem8 x (tb2t131 (image (tuple2 b1 c1) a2 p w)))
  (exists ((a3 uni))
  (and (sort a2 a3)
  (and (mem a2 a3 w) (mem (tuple2 a2 (tuple2 b1 c1))
  (Tuple2 a2 (tuple2 b1 c1) a3 (t2tb134 x)) p)))))
  (=>
  (exists ((a3 uni))
  (and (mem a2 a3 w) (mem (tuple2 a2 (tuple2 b1 c1))
  (Tuple2 a2 (tuple2 b1 c1) a3 (t2tb134 x)) p))) (mem8 x
  (tb2t131 (image (tuple2 b1 c1) a2 p w))))))))

;; mem_image
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (w uni) (x c))
  (and
  (=> (mem7 x (tb2t132 (image c1 a2 p w)))
  (exists ((a3 uni))
  (and (sort a2 a3)
  (and (mem a2 a3 w) (mem (tuple2 a2 c1) (Tuple2 a2 c1 a3 (t2tb135 x)) p)))))
  (=>
  (exists ((a3 uni))
  (and (mem a2 a3 w) (mem (tuple2 a2 c1) (Tuple2 a2 c1 a3 (t2tb135 x)) p)))
  (mem7 x (tb2t132 (image c1 a2 p w))))))))

;; mem_image
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (w uni) (x (set (tuple21 a b))))
  (and
  (=> (mem4 x (tb2t10 (image (set1 (tuple2 a1 b1)) a2 p w)))
  (exists ((a3 uni))
  (and (sort a2 a3)
  (and (mem a2 a3 w) (mem (tuple2 a2 (set1 (tuple2 a1 b1)))
  (Tuple2 a2 (set1 (tuple2 a1 b1)) a3 (t2tb11 x)) p)))))
  (=>
  (exists ((a3 uni))
  (and (mem a2 a3 w) (mem (tuple2 a2 (set1 (tuple2 a1 b1)))
  (Tuple2 a2 (set1 (tuple2 a1 b1)) a3 (t2tb11 x)) p))) (mem4 x
  (tb2t10 (image (set1 (tuple2 a1 b1)) a2 p w))))))))

;; mem_image
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (w uni) (x (tuple21 a b)))
  (and
  (=> (mem3 x (tb2t11 (image (tuple2 a1 b1) a2 p w)))
  (exists ((a3 uni))
  (and (sort a2 a3)
  (and (mem a2 a3 w) (mem (tuple2 a2 (tuple2 a1 b1))
  (Tuple2 a2 (tuple2 a1 b1) a3 (t2tb13 x)) p)))))
  (=>
  (exists ((a3 uni))
  (and (mem a2 a3 w) (mem (tuple2 a2 (tuple2 a1 b1))
  (Tuple2 a2 (tuple2 a1 b1) a3 (t2tb13 x)) p))) (mem3 x
  (tb2t11 (image (tuple2 a1 b1) a2 p w))))))))

;; mem_image
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (w uni) (x b))
  (and
  (=> (mem2 x (tb2t12 (image b1 a2 p w)))
  (exists ((a3 uni))
  (and (sort a2 a3)
  (and (mem a2 a3 w) (mem (tuple2 a2 b1) (Tuple2 a2 b1 a3 (t2tb14 x)) p)))))
  (=>
  (exists ((a3 uni))
  (and (mem a2 a3 w) (mem (tuple2 a2 b1) (Tuple2 a2 b1 a3 (t2tb14 x)) p)))
  (mem2 x (tb2t12 (image b1 a2 p w))))))))

;; mem_image
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (w uni) (x a))
  (and
  (=> (mem1 x (tb2t1 (image a1 a2 p w)))
  (exists ((a3 uni))
  (and (sort a2 a3)
  (and (mem a2 a3 w) (mem (tuple2 a2 a1) (Tuple2 a2 a1 a3 (t2tb2 x)) p)))))
  (=>
  (exists ((a3 uni))
  (and (mem a2 a3 w) (mem (tuple2 a2 a1) (Tuple2 a2 a1 a3 (t2tb2 x)) p)))
  (mem1 x (tb2t1 (image a1 a2 p w))))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a d) (tuple21 a d)))) (w (set (tuple21 a
  d))) (x (tuple21 a d)))
  (= (mem32 x
  (tb2t903 (image (tuple2 a1 d1) (tuple2 a1 d1) (t2tb2196 p) (t2tb903 w))))
  (exists ((a2 (tuple21 a d)))
  (and (mem32 a2 w) (mem (tuple2 (tuple2 a1 d1) (tuple2 a1 d1))
  (Tuple2 (tuple2 a1 d1) (tuple2 a1 d1) (t2tb904 a2) (t2tb904 x))
  (t2tb2196 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a d) (tuple21 b d)))) (w (set (tuple21 a
  d))) (x (tuple21 b d)))
  (= (mem23 x
  (tb2t687 (image (tuple2 b1 d1) (tuple2 a1 d1) (t2tb2198 p) (t2tb903 w))))
  (exists ((a2 (tuple21 a d)))
  (and (mem32 a2 w) (mem (tuple2 (tuple2 a1 d1) (tuple2 b1 d1))
  (Tuple2 (tuple2 a1 d1) (tuple2 b1 d1) (t2tb904 a2) (t2tb692 x))
  (t2tb2198 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a d) (set (tuple21 c d)))))
  (w (set (tuple21 a d))) (x (set (tuple21 c d))))
  (= (mem22 x
  (tb2t688
  (image (set1 (tuple2 c1 d1)) (tuple2 a1 d1) (t2tb2200 p) (t2tb903 w))))
  (exists ((a2 (tuple21 a d)))
  (and (mem32 a2 w) (mem (tuple2 (tuple2 a1 d1) (set1 (tuple2 c1 d1)))
  (Tuple2 (tuple2 a1 d1) (set1 (tuple2 c1 d1)) (t2tb904 a2) (t2tb689 x))
  (t2tb2200 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a d) (tuple21 c d)))) (w (set (tuple21 a
  d))) (x (tuple21 c d)))
  (= (mem21 x
  (tb2t689 (image (tuple2 c1 d1) (tuple2 a1 d1) (t2tb2202 p) (t2tb903 w))))
  (exists ((a2 (tuple21 a d)))
  (and (mem32 a2 w) (mem (tuple2 (tuple2 a1 d1) (tuple2 c1 d1))
  (Tuple2 (tuple2 a1 d1) (tuple2 c1 d1) (t2tb904 a2) (t2tb693 x))
  (t2tb2202 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a d) d))) (w (set (tuple21 a d))) (x d))
  (= (mem20 x (tb2t690 (image d1 (tuple2 a1 d1) (t2tb2204 p) (t2tb903 w))))
  (exists ((a2 (tuple21 a d)))
  (and (mem32 a2 w) (mem (tuple2 (tuple2 a1 d1) d1)
  (Tuple2 (tuple2 a1 d1) d1 (t2tb904 a2) (t2tb694 x)) (t2tb2204 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a d) (tuple21 a c)))) (w (set (tuple21 a
  d))) (x (tuple21 a c)))
  (= (mem10 x
  (tb2t129 (image (tuple2 a1 c1) (tuple2 a1 d1) (t2tb2206 p) (t2tb903 w))))
  (exists ((a2 (tuple21 a d)))
  (and (mem32 a2 w) (mem (tuple2 (tuple2 a1 d1) (tuple2 a1 c1))
  (Tuple2 (tuple2 a1 d1) (tuple2 a1 c1) (t2tb904 a2) (t2tb133 x))
  (t2tb2206 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a d) (set (tuple21 b c)))))
  (w (set (tuple21 a d))) (x (set (tuple21 b c))))
  (= (mem9 x
  (tb2t130
  (image (set1 (tuple2 b1 c1)) (tuple2 a1 d1) (t2tb2209 p) (t2tb903 w))))
  (exists ((a2 (tuple21 a d)))
  (and (mem32 a2 w) (mem (tuple2 (tuple2 a1 d1) (set1 (tuple2 b1 c1)))
  (Tuple2 (tuple2 a1 d1) (set1 (tuple2 b1 c1)) (t2tb904 a2) (t2tb131 x))
  (t2tb2209 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a d) (tuple21 b c)))) (w (set (tuple21 a
  d))) (x (tuple21 b c)))
  (= (mem8 x
  (tb2t131 (image (tuple2 b1 c1) (tuple2 a1 d1) (t2tb2210 p) (t2tb903 w))))
  (exists ((a2 (tuple21 a d)))
  (and (mem32 a2 w) (mem (tuple2 (tuple2 a1 d1) (tuple2 b1 c1))
  (Tuple2 (tuple2 a1 d1) (tuple2 b1 c1) (t2tb904 a2) (t2tb134 x))
  (t2tb2210 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a d) c))) (w (set (tuple21 a d))) (x c))
  (= (mem7 x (tb2t132 (image c1 (tuple2 a1 d1) (t2tb2212 p) (t2tb903 w))))
  (exists ((a2 (tuple21 a d)))
  (and (mem32 a2 w) (mem (tuple2 (tuple2 a1 d1) c1)
  (Tuple2 (tuple2 a1 d1) c1 (t2tb904 a2) (t2tb135 x)) (t2tb2212 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a d) (set (tuple21 a b)))))
  (w (set (tuple21 a d))) (x (set (tuple21 a b))))
  (= (mem4 x
  (tb2t10
  (image (set1 (tuple2 a1 b1)) (tuple2 a1 d1) (t2tb2214 p) (t2tb903 w))))
  (exists ((a2 (tuple21 a d)))
  (and (mem32 a2 w) (mem (tuple2 (tuple2 a1 d1) (set1 (tuple2 a1 b1)))
  (Tuple2 (tuple2 a1 d1) (set1 (tuple2 a1 b1)) (t2tb904 a2) (t2tb11 x))
  (t2tb2214 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a d) (tuple21 a b)))) (w (set (tuple21 a
  d))) (x (tuple21 a b)))
  (= (mem3 x
  (tb2t11 (image (tuple2 a1 b1) (tuple2 a1 d1) (t2tb2216 p) (t2tb903 w))))
  (exists ((a2 (tuple21 a d)))
  (and (mem32 a2 w) (mem (tuple2 (tuple2 a1 d1) (tuple2 a1 b1))
  (Tuple2 (tuple2 a1 d1) (tuple2 a1 b1) (t2tb904 a2) (t2tb13 x))
  (t2tb2216 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a d) b))) (w (set (tuple21 a d))) (x b))
  (= (mem2 x (tb2t12 (image b1 (tuple2 a1 d1) (t2tb2218 p) (t2tb903 w))))
  (exists ((a2 (tuple21 a d)))
  (and (mem32 a2 w) (mem (tuple2 (tuple2 a1 d1) b1)
  (Tuple2 (tuple2 a1 d1) b1 (t2tb904 a2) (t2tb14 x)) (t2tb2218 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a d) a))) (w (set (tuple21 a d))) (x a))
  (= (mem1 x (tb2t1 (image a1 (tuple2 a1 d1) (t2tb2220 p) (t2tb903 w))))
  (exists ((a2 (tuple21 a d)))
  (and (mem32 a2 w) (mem (tuple2 (tuple2 a1 d1) a1)
  (Tuple2 (tuple2 a1 d1) a1 (t2tb904 a2) (t2tb2 x)) (t2tb2220 p)))))))

;; mem_image
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (w (set (tuple21 a d))) (x uni))
  (= (mem b2 x (image b2 (tuple2 a1 d1) p (t2tb903 w)))
  (exists ((a2 (tuple21 a d)))
  (and (mem32 a2 w) (mem (tuple2 (tuple2 a1 d1) b2)
  (Tuple2 (tuple2 a1 d1) b2 (t2tb904 a2) x) p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 b d) (tuple21 a d)))) (w (set (tuple21 b
  d))) (x (tuple21 a d)))
  (= (mem32 x
  (tb2t903 (image (tuple2 a1 d1) (tuple2 b1 d1) (t2tb2223 p) (t2tb687 w))))
  (exists ((a2 (tuple21 b d)))
  (and (mem23 a2 w) (mem (tuple2 (tuple2 b1 d1) (tuple2 a1 d1))
  (Tuple2 (tuple2 b1 d1) (tuple2 a1 d1) (t2tb692 a2) (t2tb904 x))
  (t2tb2223 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 b d) (tuple21 b d)))) (w (set (tuple21 b
  d))) (x (tuple21 b d)))
  (= (mem23 x
  (tb2t687 (image (tuple2 b1 d1) (tuple2 b1 d1) (t2tb747 p) (t2tb687 w))))
  (exists ((a2 (tuple21 b d)))
  (and (mem23 a2 w) (mem (tuple2 (tuple2 b1 d1) (tuple2 b1 d1))
  (Tuple2 (tuple2 b1 d1) (tuple2 b1 d1) (t2tb692 a2) (t2tb692 x))
  (t2tb747 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 b d) (set (tuple21 c d)))))
  (w (set (tuple21 b d))) (x (set (tuple21 c d))))
  (= (mem22 x
  (tb2t688
  (image (set1 (tuple2 c1 d1)) (tuple2 b1 d1) (t2tb2031 p) (t2tb687 w))))
  (exists ((a2 (tuple21 b d)))
  (and (mem23 a2 w) (mem (tuple2 (tuple2 b1 d1) (set1 (tuple2 c1 d1)))
  (Tuple2 (tuple2 b1 d1) (set1 (tuple2 c1 d1)) (t2tb692 a2) (t2tb689 x))
  (t2tb2031 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 b d) (tuple21 c d)))) (w (set (tuple21 b
  d))) (x (tuple21 c d)))
  (= (mem21 x
  (tb2t689 (image (tuple2 c1 d1) (tuple2 b1 d1) (t2tb2033 p) (t2tb687 w))))
  (exists ((a2 (tuple21 b d)))
  (and (mem23 a2 w) (mem (tuple2 (tuple2 b1 d1) (tuple2 c1 d1))
  (Tuple2 (tuple2 b1 d1) (tuple2 c1 d1) (t2tb692 a2) (t2tb693 x))
  (t2tb2033 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 b d) d))) (w (set (tuple21 b d))) (x d))
  (= (mem20 x (tb2t690 (image d1 (tuple2 b1 d1) (t2tb2035 p) (t2tb687 w))))
  (exists ((a2 (tuple21 b d)))
  (and (mem23 a2 w) (mem (tuple2 (tuple2 b1 d1) d1)
  (Tuple2 (tuple2 b1 d1) d1 (t2tb692 a2) (t2tb694 x)) (t2tb2035 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 b d) (tuple21 a c)))) (w (set (tuple21 b
  d))) (x (tuple21 a c)))
  (= (mem10 x
  (tb2t129 (image (tuple2 a1 c1) (tuple2 b1 d1) (t2tb755 p) (t2tb687 w))))
  (exists ((a2 (tuple21 b d)))
  (and (mem23 a2 w) (mem (tuple2 (tuple2 b1 d1) (tuple2 a1 c1))
  (Tuple2 (tuple2 b1 d1) (tuple2 a1 c1) (t2tb692 a2) (t2tb133 x))
  (t2tb755 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 b d) (set (tuple21 b c)))))
  (w (set (tuple21 b d))) (x (set (tuple21 b c))))
  (= (mem9 x
  (tb2t130
  (image (set1 (tuple2 b1 c1)) (tuple2 b1 d1) (t2tb2224 p) (t2tb687 w))))
  (exists ((a2 (tuple21 b d)))
  (and (mem23 a2 w) (mem (tuple2 (tuple2 b1 d1) (set1 (tuple2 b1 c1)))
  (Tuple2 (tuple2 b1 d1) (set1 (tuple2 b1 c1)) (t2tb692 a2) (t2tb131 x))
  (t2tb2224 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 b d) (tuple21 b c)))) (w (set (tuple21 b
  d))) (x (tuple21 b c)))
  (= (mem8 x
  (tb2t131 (image (tuple2 b1 c1) (tuple2 b1 d1) (t2tb2226 p) (t2tb687 w))))
  (exists ((a2 (tuple21 b d)))
  (and (mem23 a2 w) (mem (tuple2 (tuple2 b1 d1) (tuple2 b1 c1))
  (Tuple2 (tuple2 b1 d1) (tuple2 b1 c1) (t2tb692 a2) (t2tb134 x))
  (t2tb2226 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 b d) c))) (w (set (tuple21 b d))) (x c))
  (= (mem7 x (tb2t132 (image c1 (tuple2 b1 d1) (t2tb2036 p) (t2tb687 w))))
  (exists ((a2 (tuple21 b d)))
  (and (mem23 a2 w) (mem (tuple2 (tuple2 b1 d1) c1)
  (Tuple2 (tuple2 b1 d1) c1 (t2tb692 a2) (t2tb135 x)) (t2tb2036 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 b d) (set (tuple21 a b)))))
  (w (set (tuple21 b d))) (x (set (tuple21 a b))))
  (= (mem4 x
  (tb2t10
  (image (set1 (tuple2 a1 b1)) (tuple2 b1 d1) (t2tb2037 p) (t2tb687 w))))
  (exists ((a2 (tuple21 b d)))
  (and (mem23 a2 w) (mem (tuple2 (tuple2 b1 d1) (set1 (tuple2 a1 b1)))
  (Tuple2 (tuple2 b1 d1) (set1 (tuple2 a1 b1)) (t2tb692 a2) (t2tb11 x))
  (t2tb2037 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 b d) (tuple21 a b)))) (w (set (tuple21 b
  d))) (x (tuple21 a b)))
  (= (mem3 x
  (tb2t11 (image (tuple2 a1 b1) (tuple2 b1 d1) (t2tb2039 p) (t2tb687 w))))
  (exists ((a2 (tuple21 b d)))
  (and (mem23 a2 w) (mem (tuple2 (tuple2 b1 d1) (tuple2 a1 b1))
  (Tuple2 (tuple2 b1 d1) (tuple2 a1 b1) (t2tb692 a2) (t2tb13 x))
  (t2tb2039 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 b d) b))) (w (set (tuple21 b d))) (x b))
  (= (mem2 x (tb2t12 (image b1 (tuple2 b1 d1) (t2tb2041 p) (t2tb687 w))))
  (exists ((a2 (tuple21 b d)))
  (and (mem23 a2 w) (mem (tuple2 (tuple2 b1 d1) b1)
  (Tuple2 (tuple2 b1 d1) b1 (t2tb692 a2) (t2tb14 x)) (t2tb2041 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 b d) a))) (w (set (tuple21 b d))) (x a))
  (= (mem1 x (tb2t1 (image a1 (tuple2 b1 d1) (t2tb2042 p) (t2tb687 w))))
  (exists ((a2 (tuple21 b d)))
  (and (mem23 a2 w) (mem (tuple2 (tuple2 b1 d1) a1)
  (Tuple2 (tuple2 b1 d1) a1 (t2tb692 a2) (t2tb2 x)) (t2tb2042 p)))))))

;; mem_image
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (w (set (tuple21 b d))) (x uni))
  (= (mem b2 x (image b2 (tuple2 b1 d1) p (t2tb687 w)))
  (exists ((a2 (tuple21 b d)))
  (and (mem23 a2 w) (mem (tuple2 (tuple2 b1 d1) b2)
  (Tuple2 (tuple2 b1 d1) b2 (t2tb692 a2) x) p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 c d)) (tuple21 a d))))
  (w (set (set (tuple21 c d)))) (x (tuple21 a d)))
  (= (mem32 x
  (tb2t903
  (image (tuple2 a1 d1) (set1 (tuple2 c1 d1)) (t2tb2228 p) (t2tb688 w))))
  (exists ((a2 (set (tuple21 c d))))
  (and (mem22 a2 w) (mem (tuple2 (set1 (tuple2 c1 d1)) (tuple2 a1 d1))
  (Tuple2 (set1 (tuple2 c1 d1)) (tuple2 a1 d1) (t2tb689 a2) (t2tb904 x))
  (t2tb2228 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 c d)) (tuple21 b d))))
  (w (set (set (tuple21 c d)))) (x (tuple21 b d)))
  (= (mem23 x
  (tb2t687
  (image (tuple2 b1 d1) (set1 (tuple2 c1 d1)) (t2tb2044 p) (t2tb688 w))))
  (exists ((a2 (set (tuple21 c d))))
  (and (mem22 a2 w) (mem (tuple2 (set1 (tuple2 c1 d1)) (tuple2 b1 d1))
  (Tuple2 (set1 (tuple2 c1 d1)) (tuple2 b1 d1) (t2tb689 a2) (t2tb692 x))
  (t2tb2044 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 c d)) (set (tuple21 c d)))))
  (w (set (set (tuple21 c d)))) (x (set (tuple21 c d))))
  (= (mem22 x
  (tb2t688
  (image (set1 (tuple2 c1 d1)) (set1 (tuple2 c1 d1)) (t2tb773 p) (t2tb688 w))))
  (exists ((a2 (set (tuple21 c d))))
  (and (mem22 a2 w) (mem (tuple2 (set1 (tuple2 c1 d1)) (set1 (tuple2 c1 d1)))
  (Tuple2 (set1 (tuple2 c1 d1)) (set1 (tuple2 c1 d1)) (t2tb689 a2)
  (t2tb689 x)) (t2tb773 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 c d)) (tuple21 c d))))
  (w (set (set (tuple21 c d)))) (x (tuple21 c d)))
  (= (mem21 x
  (tb2t689
  (image (tuple2 c1 d1) (set1 (tuple2 c1 d1)) (t2tb775 p) (t2tb688 w))))
  (exists ((a2 (set (tuple21 c d))))
  (and (mem22 a2 w) (mem (tuple2 (set1 (tuple2 c1 d1)) (tuple2 c1 d1))
  (Tuple2 (set1 (tuple2 c1 d1)) (tuple2 c1 d1) (t2tb689 a2) (t2tb693 x))
  (t2tb775 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 c d)) d))) (w (set (set (tuple21 c
  d)))) (x d))
  (= (mem20 x
  (tb2t690 (image d1 (set1 (tuple2 c1 d1)) (t2tb777 p) (t2tb688 w))))
  (exists ((a2 (set (tuple21 c d))))
  (and (mem22 a2 w) (mem (tuple2 (set1 (tuple2 c1 d1)) d1)
  (Tuple2 (set1 (tuple2 c1 d1)) d1 (t2tb689 a2) (t2tb694 x)) (t2tb777 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 c d)) (tuple21 a c))))
  (w (set (set (tuple21 c d)))) (x (tuple21 a c)))
  (= (mem10 x
  (tb2t129
  (image (tuple2 a1 c1) (set1 (tuple2 c1 d1)) (t2tb1916 p) (t2tb688 w))))
  (exists ((a2 (set (tuple21 c d))))
  (and (mem22 a2 w) (mem (tuple2 (set1 (tuple2 c1 d1)) (tuple2 a1 c1))
  (Tuple2 (set1 (tuple2 c1 d1)) (tuple2 a1 c1) (t2tb689 a2) (t2tb133 x))
  (t2tb1916 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 c d)) (set (tuple21 b c)))))
  (w (set (set (tuple21 c d)))) (x (set (tuple21 b c))))
  (= (mem9 x
  (tb2t130
  (image (set1 (tuple2 b1 c1)) (set1 (tuple2 c1 d1)) (t2tb2230 p)
  (t2tb688 w))))
  (exists ((a2 (set (tuple21 c d))))
  (and (mem22 a2 w) (mem (tuple2 (set1 (tuple2 c1 d1)) (set1 (tuple2 b1 c1)))
  (Tuple2 (set1 (tuple2 c1 d1)) (set1 (tuple2 b1 c1)) (t2tb689 a2)
  (t2tb131 x)) (t2tb2230 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 c d)) (tuple21 b c))))
  (w (set (set (tuple21 c d)))) (x (tuple21 b c)))
  (= (mem8 x
  (tb2t131
  (image (tuple2 b1 c1) (set1 (tuple2 c1 d1)) (t2tb2232 p) (t2tb688 w))))
  (exists ((a2 (set (tuple21 c d))))
  (and (mem22 a2 w) (mem (tuple2 (set1 (tuple2 c1 d1)) (tuple2 b1 c1))
  (Tuple2 (set1 (tuple2 c1 d1)) (tuple2 b1 c1) (t2tb689 a2) (t2tb134 x))
  (t2tb2232 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 c d)) c))) (w (set (set (tuple21 c
  d)))) (x c))
  (= (mem7 x
  (tb2t132 (image c1 (set1 (tuple2 c1 d1)) (t2tb781 p) (t2tb688 w))))
  (exists ((a2 (set (tuple21 c d))))
  (and (mem22 a2 w) (mem (tuple2 (set1 (tuple2 c1 d1)) c1)
  (Tuple2 (set1 (tuple2 c1 d1)) c1 (t2tb689 a2) (t2tb135 x)) (t2tb781 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 c d)) (set (tuple21 a b)))))
  (w (set (set (tuple21 c d)))) (x (set (tuple21 a b))))
  (= (mem4 x
  (tb2t10
  (image (set1 (tuple2 a1 b1)) (set1 (tuple2 c1 d1)) (t2tb783 p) (t2tb688 w))))
  (exists ((a2 (set (tuple21 c d))))
  (and (mem22 a2 w) (mem (tuple2 (set1 (tuple2 c1 d1)) (set1 (tuple2 a1 b1)))
  (Tuple2 (set1 (tuple2 c1 d1)) (set1 (tuple2 a1 b1)) (t2tb689 a2)
  (t2tb11 x)) (t2tb783 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 c d)) (tuple21 a b))))
  (w (set (set (tuple21 c d)))) (x (tuple21 a b)))
  (= (mem3 x
  (tb2t11
  (image (tuple2 a1 b1) (set1 (tuple2 c1 d1)) (t2tb785 p) (t2tb688 w))))
  (exists ((a2 (set (tuple21 c d))))
  (and (mem22 a2 w) (mem (tuple2 (set1 (tuple2 c1 d1)) (tuple2 a1 b1))
  (Tuple2 (set1 (tuple2 c1 d1)) (tuple2 a1 b1) (t2tb689 a2) (t2tb13 x))
  (t2tb785 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 c d)) b))) (w (set (set (tuple21 c
  d)))) (x b))
  (= (mem2 x
  (tb2t12 (image b1 (set1 (tuple2 c1 d1)) (t2tb787 p) (t2tb688 w))))
  (exists ((a2 (set (tuple21 c d))))
  (and (mem22 a2 w) (mem (tuple2 (set1 (tuple2 c1 d1)) b1)
  (Tuple2 (set1 (tuple2 c1 d1)) b1 (t2tb689 a2) (t2tb14 x)) (t2tb787 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 c d)) a))) (w (set (set (tuple21 c
  d)))) (x a))
  (= (mem1 x
  (tb2t1 (image a1 (set1 (tuple2 c1 d1)) (t2tb789 p) (t2tb688 w))))
  (exists ((a2 (set (tuple21 c d))))
  (and (mem22 a2 w) (mem (tuple2 (set1 (tuple2 c1 d1)) a1)
  (Tuple2 (set1 (tuple2 c1 d1)) a1 (t2tb689 a2) (t2tb2 x)) (t2tb789 p)))))))

;; mem_image
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (w (set (set (tuple21 c d)))) (x uni))
  (= (mem b2 x (image b2 (set1 (tuple2 c1 d1)) p (t2tb688 w)))
  (exists ((a2 (set (tuple21 c d))))
  (and (mem22 a2 w) (mem (tuple2 (set1 (tuple2 c1 d1)) b2)
  (Tuple2 (set1 (tuple2 c1 d1)) b2 (t2tb689 a2) x) p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 c d) (tuple21 a d)))) (w (set (tuple21 c
  d))) (x (tuple21 a d)))
  (= (mem32 x
  (tb2t903 (image (tuple2 a1 d1) (tuple2 c1 d1) (t2tb2234 p) (t2tb689 w))))
  (exists ((a2 (tuple21 c d)))
  (and (mem21 a2 w) (mem (tuple2 (tuple2 c1 d1) (tuple2 a1 d1))
  (Tuple2 (tuple2 c1 d1) (tuple2 a1 d1) (t2tb693 a2) (t2tb904 x))
  (t2tb2234 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 c d) (tuple21 b d)))) (w (set (tuple21 c
  d))) (x (tuple21 b d)))
  (= (mem23 x
  (tb2t687 (image (tuple2 b1 d1) (tuple2 c1 d1) (t2tb2046 p) (t2tb689 w))))
  (exists ((a2 (tuple21 c d)))
  (and (mem21 a2 w) (mem (tuple2 (tuple2 c1 d1) (tuple2 b1 d1))
  (Tuple2 (tuple2 c1 d1) (tuple2 b1 d1) (t2tb693 a2) (t2tb692 x))
  (t2tb2046 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 c d) (set (tuple21 c d)))))
  (w (set (tuple21 c d))) (x (set (tuple21 c d))))
  (= (mem22 x
  (tb2t688
  (image (set1 (tuple2 c1 d1)) (tuple2 c1 d1) (t2tb797 p) (t2tb689 w))))
  (exists ((a2 (tuple21 c d)))
  (and (mem21 a2 w) (mem (tuple2 (tuple2 c1 d1) (set1 (tuple2 c1 d1)))
  (Tuple2 (tuple2 c1 d1) (set1 (tuple2 c1 d1)) (t2tb693 a2) (t2tb689 x))
  (t2tb797 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 c d) (tuple21 c d)))) (w (set (tuple21 c
  d))) (x (tuple21 c d)))
  (= (mem21 x
  (tb2t689 (image (tuple2 c1 d1) (tuple2 c1 d1) (t2tb799 p) (t2tb689 w))))
  (exists ((a2 (tuple21 c d)))
  (and (mem21 a2 w) (mem (tuple2 (tuple2 c1 d1) (tuple2 c1 d1))
  (Tuple2 (tuple2 c1 d1) (tuple2 c1 d1) (t2tb693 a2) (t2tb693 x))
  (t2tb799 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 c d) d))) (w (set (tuple21 c d))) (x d))
  (= (mem20 x (tb2t690 (image d1 (tuple2 c1 d1) (t2tb801 p) (t2tb689 w))))
  (exists ((a2 (tuple21 c d)))
  (and (mem21 a2 w) (mem (tuple2 (tuple2 c1 d1) d1)
  (Tuple2 (tuple2 c1 d1) d1 (t2tb693 a2) (t2tb694 x)) (t2tb801 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 c d) (tuple21 a c)))) (w (set (tuple21 c
  d))) (x (tuple21 a c)))
  (= (mem10 x
  (tb2t129 (image (tuple2 a1 c1) (tuple2 c1 d1) (t2tb1918 p) (t2tb689 w))))
  (exists ((a2 (tuple21 c d)))
  (and (mem21 a2 w) (mem (tuple2 (tuple2 c1 d1) (tuple2 a1 c1))
  (Tuple2 (tuple2 c1 d1) (tuple2 a1 c1) (t2tb693 a2) (t2tb133 x))
  (t2tb1918 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 c d) (set (tuple21 b c)))))
  (w (set (tuple21 c d))) (x (set (tuple21 b c))))
  (= (mem9 x
  (tb2t130
  (image (set1 (tuple2 b1 c1)) (tuple2 c1 d1) (t2tb2236 p) (t2tb689 w))))
  (exists ((a2 (tuple21 c d)))
  (and (mem21 a2 w) (mem (tuple2 (tuple2 c1 d1) (set1 (tuple2 b1 c1)))
  (Tuple2 (tuple2 c1 d1) (set1 (tuple2 b1 c1)) (t2tb693 a2) (t2tb131 x))
  (t2tb2236 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 c d) (tuple21 b c)))) (w (set (tuple21 c
  d))) (x (tuple21 b c)))
  (= (mem8 x
  (tb2t131 (image (tuple2 b1 c1) (tuple2 c1 d1) (t2tb2239 p) (t2tb689 w))))
  (exists ((a2 (tuple21 c d)))
  (and (mem21 a2 w) (mem (tuple2 (tuple2 c1 d1) (tuple2 b1 c1))
  (Tuple2 (tuple2 c1 d1) (tuple2 b1 c1) (t2tb693 a2) (t2tb134 x))
  (t2tb2239 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 c d) c))) (w (set (tuple21 c d))) (x c))
  (= (mem7 x (tb2t132 (image c1 (tuple2 c1 d1) (t2tb805 p) (t2tb689 w))))
  (exists ((a2 (tuple21 c d)))
  (and (mem21 a2 w) (mem (tuple2 (tuple2 c1 d1) c1)
  (Tuple2 (tuple2 c1 d1) c1 (t2tb693 a2) (t2tb135 x)) (t2tb805 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 c d) (set (tuple21 a b)))))
  (w (set (tuple21 c d))) (x (set (tuple21 a b))))
  (= (mem4 x
  (tb2t10
  (image (set1 (tuple2 a1 b1)) (tuple2 c1 d1) (t2tb807 p) (t2tb689 w))))
  (exists ((a2 (tuple21 c d)))
  (and (mem21 a2 w) (mem (tuple2 (tuple2 c1 d1) (set1 (tuple2 a1 b1)))
  (Tuple2 (tuple2 c1 d1) (set1 (tuple2 a1 b1)) (t2tb693 a2) (t2tb11 x))
  (t2tb807 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 c d) (tuple21 a b)))) (w (set (tuple21 c
  d))) (x (tuple21 a b)))
  (= (mem3 x
  (tb2t11 (image (tuple2 a1 b1) (tuple2 c1 d1) (t2tb809 p) (t2tb689 w))))
  (exists ((a2 (tuple21 c d)))
  (and (mem21 a2 w) (mem (tuple2 (tuple2 c1 d1) (tuple2 a1 b1))
  (Tuple2 (tuple2 c1 d1) (tuple2 a1 b1) (t2tb693 a2) (t2tb13 x))
  (t2tb809 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 c d) b))) (w (set (tuple21 c d))) (x b))
  (= (mem2 x (tb2t12 (image b1 (tuple2 c1 d1) (t2tb811 p) (t2tb689 w))))
  (exists ((a2 (tuple21 c d)))
  (and (mem21 a2 w) (mem (tuple2 (tuple2 c1 d1) b1)
  (Tuple2 (tuple2 c1 d1) b1 (t2tb693 a2) (t2tb14 x)) (t2tb811 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 c d) a))) (w (set (tuple21 c d))) (x a))
  (= (mem1 x (tb2t1 (image a1 (tuple2 c1 d1) (t2tb813 p) (t2tb689 w))))
  (exists ((a2 (tuple21 c d)))
  (and (mem21 a2 w) (mem (tuple2 (tuple2 c1 d1) a1)
  (Tuple2 (tuple2 c1 d1) a1 (t2tb693 a2) (t2tb2 x)) (t2tb813 p)))))))

;; mem_image
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (w (set (tuple21 c d))) (x uni))
  (= (mem b2 x (image b2 (tuple2 c1 d1) p (t2tb689 w)))
  (exists ((a2 (tuple21 c d)))
  (and (mem21 a2 w) (mem (tuple2 (tuple2 c1 d1) b2)
  (Tuple2 (tuple2 c1 d1) b2 (t2tb693 a2) x) p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 d (tuple21 a d)))) (w (set d)) (x (tuple21 a d)))
  (= (mem32 x (tb2t903 (image (tuple2 a1 d1) d1 (t2tb2240 p) (t2tb690 w))))
  (exists ((a2 d))
  (and (mem20 a2 w) (mem (tuple2 d1 (tuple2 a1 d1))
  (Tuple2 d1 (tuple2 a1 d1) (t2tb694 a2) (t2tb904 x)) (t2tb2240 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 d (tuple21 b d)))) (w (set d)) (x (tuple21 b d)))
  (= (mem23 x (tb2t687 (image (tuple2 b1 d1) d1 (t2tb2048 p) (t2tb690 w))))
  (exists ((a2 d))
  (and (mem20 a2 w) (mem (tuple2 d1 (tuple2 b1 d1))
  (Tuple2 d1 (tuple2 b1 d1) (t2tb694 a2) (t2tb692 x)) (t2tb2048 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 d (set (tuple21 c d))))) (w (set d))
  (x (set (tuple21 c d))))
  (= (mem22 x
  (tb2t688 (image (set1 (tuple2 c1 d1)) d1 (t2tb821 p) (t2tb690 w))))
  (exists ((a2 d))
  (and (mem20 a2 w) (mem (tuple2 d1 (set1 (tuple2 c1 d1)))
  (Tuple2 d1 (set1 (tuple2 c1 d1)) (t2tb694 a2) (t2tb689 x)) (t2tb821 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 d (tuple21 c d)))) (w (set d)) (x (tuple21 c d)))
  (= (mem21 x (tb2t689 (image (tuple2 c1 d1) d1 (t2tb823 p) (t2tb690 w))))
  (exists ((a2 d))
  (and (mem20 a2 w) (mem (tuple2 d1 (tuple2 c1 d1))
  (Tuple2 d1 (tuple2 c1 d1) (t2tb694 a2) (t2tb693 x)) (t2tb823 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 d d))) (w (set d)) (x d))
  (= (mem20 x (tb2t690 (image d1 d1 (t2tb825 p) (t2tb690 w))))
  (exists ((a2 d))
  (and (mem20 a2 w) (mem (tuple2 d1 d1)
  (Tuple2 d1 d1 (t2tb694 a2) (t2tb694 x)) (t2tb825 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 d (tuple21 a c)))) (w (set d)) (x (tuple21 a c)))
  (= (mem10 x (tb2t129 (image (tuple2 a1 c1) d1 (t2tb1920 p) (t2tb690 w))))
  (exists ((a2 d))
  (and (mem20 a2 w) (mem (tuple2 d1 (tuple2 a1 c1))
  (Tuple2 d1 (tuple2 a1 c1) (t2tb694 a2) (t2tb133 x)) (t2tb1920 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 d (set (tuple21 b c))))) (w (set d))
  (x (set (tuple21 b c))))
  (= (mem9 x
  (tb2t130 (image (set1 (tuple2 b1 c1)) d1 (t2tb2242 p) (t2tb690 w))))
  (exists ((a2 d))
  (and (mem20 a2 w) (mem (tuple2 d1 (set1 (tuple2 b1 c1)))
  (Tuple2 d1 (set1 (tuple2 b1 c1)) (t2tb694 a2) (t2tb131 x)) (t2tb2242 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 d (tuple21 b c)))) (w (set d)) (x (tuple21 b c)))
  (= (mem8 x (tb2t131 (image (tuple2 b1 c1) d1 (t2tb2244 p) (t2tb690 w))))
  (exists ((a2 d))
  (and (mem20 a2 w) (mem (tuple2 d1 (tuple2 b1 c1))
  (Tuple2 d1 (tuple2 b1 c1) (t2tb694 a2) (t2tb134 x)) (t2tb2244 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 d c))) (w (set d)) (x c))
  (= (mem7 x (tb2t132 (image c1 d1 (t2tb829 p) (t2tb690 w))))
  (exists ((a2 d))
  (and (mem20 a2 w) (mem (tuple2 d1 c1)
  (Tuple2 d1 c1 (t2tb694 a2) (t2tb135 x)) (t2tb829 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 d (set (tuple21 a b))))) (w (set d))
  (x (set (tuple21 a b))))
  (= (mem4 x
  (tb2t10 (image (set1 (tuple2 a1 b1)) d1 (t2tb831 p) (t2tb690 w))))
  (exists ((a2 d))
  (and (mem20 a2 w) (mem (tuple2 d1 (set1 (tuple2 a1 b1)))
  (Tuple2 d1 (set1 (tuple2 a1 b1)) (t2tb694 a2) (t2tb11 x)) (t2tb831 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 d (tuple21 a b)))) (w (set d)) (x (tuple21 a b)))
  (= (mem3 x (tb2t11 (image (tuple2 a1 b1) d1 (t2tb833 p) (t2tb690 w))))
  (exists ((a2 d))
  (and (mem20 a2 w) (mem (tuple2 d1 (tuple2 a1 b1))
  (Tuple2 d1 (tuple2 a1 b1) (t2tb694 a2) (t2tb13 x)) (t2tb833 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 d b))) (w (set d)) (x b))
  (= (mem2 x (tb2t12 (image b1 d1 (t2tb835 p) (t2tb690 w))))
  (exists ((a2 d))
  (and (mem20 a2 w) (mem (tuple2 d1 b1)
  (Tuple2 d1 b1 (t2tb694 a2) (t2tb14 x)) (t2tb835 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 d a))) (w (set d)) (x a))
  (= (mem1 x (tb2t1 (image a1 d1 (t2tb837 p) (t2tb690 w))))
  (exists ((a2 d))
  (and (mem20 a2 w) (mem (tuple2 d1 a1) (Tuple2 d1 a1 (t2tb694 a2) (t2tb2 x))
  (t2tb837 p)))))))

;; mem_image
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (w (set d)) (x uni))
  (= (mem b2 x (image b2 d1 p (t2tb690 w)))
  (exists ((a2 d))
  (and (mem20 a2 w) (mem (tuple2 d1 b2) (Tuple2 d1 b2 (t2tb694 a2) x) p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a c) (tuple21 a d)))) (w (set (tuple21 a
  c))) (x (tuple21 a d)))
  (= (mem32 x
  (tb2t903 (image (tuple2 a1 d1) (tuple2 a1 c1) (t2tb2246 p) (t2tb129 w))))
  (exists ((a2 (tuple21 a c)))
  (and (mem10 a2 w) (mem (tuple2 (tuple2 a1 c1) (tuple2 a1 d1))
  (Tuple2 (tuple2 a1 c1) (tuple2 a1 d1) (t2tb133 a2) (t2tb904 x))
  (t2tb2246 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a c) (tuple21 b d)))) (w (set (tuple21 a
  c))) (x (tuple21 b d)))
  (= (mem23 x
  (tb2t687 (image (tuple2 b1 d1) (tuple2 a1 c1) (t2tb686 p) (t2tb129 w))))
  (exists ((a2 (tuple21 a c)))
  (and (mem10 a2 w) (mem (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))
  (Tuple2 (tuple2 a1 c1) (tuple2 b1 d1) (t2tb133 a2) (t2tb692 x))
  (t2tb686 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a c) (set (tuple21 c d)))))
  (w (set (tuple21 a c))) (x (set (tuple21 c d))))
  (= (mem22 x
  (tb2t688
  (image (set1 (tuple2 c1 d1)) (tuple2 a1 c1) (t2tb1923 p) (t2tb129 w))))
  (exists ((a2 (tuple21 a c)))
  (and (mem10 a2 w) (mem (tuple2 (tuple2 a1 c1) (set1 (tuple2 c1 d1)))
  (Tuple2 (tuple2 a1 c1) (set1 (tuple2 c1 d1)) (t2tb133 a2) (t2tb689 x))
  (t2tb1923 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a c) (tuple21 c d)))) (w (set (tuple21 a
  c))) (x (tuple21 c d)))
  (= (mem21 x
  (tb2t689 (image (tuple2 c1 d1) (tuple2 a1 c1) (t2tb1925 p) (t2tb129 w))))
  (exists ((a2 (tuple21 a c)))
  (and (mem10 a2 w) (mem (tuple2 (tuple2 a1 c1) (tuple2 c1 d1))
  (Tuple2 (tuple2 a1 c1) (tuple2 c1 d1) (t2tb133 a2) (t2tb693 x))
  (t2tb1925 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a c) d))) (w (set (tuple21 a c))) (x d))
  (= (mem20 x (tb2t690 (image d1 (tuple2 a1 c1) (t2tb847 p) (t2tb129 w))))
  (exists ((a2 (tuple21 a c)))
  (and (mem10 a2 w) (mem (tuple2 (tuple2 a1 c1) d1)
  (Tuple2 (tuple2 a1 c1) d1 (t2tb133 a2) (t2tb694 x)) (t2tb847 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a c) (tuple21 a c)))) (w (set (tuple21 a
  c))) (x (tuple21 a c)))
  (= (mem10 x
  (tb2t129 (image (tuple2 a1 c1) (tuple2 a1 c1) (t2tb157 p) (t2tb129 w))))
  (exists ((a2 (tuple21 a c)))
  (and (mem10 a2 w) (mem (tuple2 (tuple2 a1 c1) (tuple2 a1 c1))
  (Tuple2 (tuple2 a1 c1) (tuple2 a1 c1) (t2tb133 a2) (t2tb133 x))
  (t2tb157 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a c) (set (tuple21 b c)))))
  (w (set (tuple21 a c))) (x (set (tuple21 b c))))
  (= (mem9 x
  (tb2t130
  (image (set1 (tuple2 b1 c1)) (tuple2 a1 c1) (t2tb1089 p) (t2tb129 w))))
  (exists ((a2 (tuple21 a c)))
  (and (mem10 a2 w) (mem (tuple2 (tuple2 a1 c1) (set1 (tuple2 b1 c1)))
  (Tuple2 (tuple2 a1 c1) (set1 (tuple2 b1 c1)) (t2tb133 a2) (t2tb131 x))
  (t2tb1089 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a c) (tuple21 b c)))) (w (set (tuple21 a
  c))) (x (tuple21 b c)))
  (= (mem8 x
  (tb2t131 (image (tuple2 b1 c1) (tuple2 a1 c1) (t2tb1091 p) (t2tb129 w))))
  (exists ((a2 (tuple21 a c)))
  (and (mem10 a2 w) (mem (tuple2 (tuple2 a1 c1) (tuple2 b1 c1))
  (Tuple2 (tuple2 a1 c1) (tuple2 b1 c1) (t2tb133 a2) (t2tb134 x))
  (t2tb1091 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a c) c))) (w (set (tuple21 a c))) (x c))
  (= (mem7 x (tb2t132 (image c1 (tuple2 a1 c1) (t2tb162 p) (t2tb129 w))))
  (exists ((a2 (tuple21 a c)))
  (and (mem10 a2 w) (mem (tuple2 (tuple2 a1 c1) c1)
  (Tuple2 (tuple2 a1 c1) c1 (t2tb133 a2) (t2tb135 x)) (t2tb162 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a c) (set (tuple21 a b)))))
  (w (set (tuple21 a c))) (x (set (tuple21 a b))))
  (= (mem4 x
  (tb2t10
  (image (set1 (tuple2 a1 b1)) (tuple2 a1 c1) (t2tb164 p) (t2tb129 w))))
  (exists ((a2 (tuple21 a c)))
  (and (mem10 a2 w) (mem (tuple2 (tuple2 a1 c1) (set1 (tuple2 a1 b1)))
  (Tuple2 (tuple2 a1 c1) (set1 (tuple2 a1 b1)) (t2tb133 a2) (t2tb11 x))
  (t2tb164 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a c) (tuple21 a b)))) (w (set (tuple21 a
  c))) (x (tuple21 a b)))
  (= (mem3 x
  (tb2t11 (image (tuple2 a1 b1) (tuple2 a1 c1) (t2tb166 p) (t2tb129 w))))
  (exists ((a2 (tuple21 a c)))
  (and (mem10 a2 w) (mem (tuple2 (tuple2 a1 c1) (tuple2 a1 b1))
  (Tuple2 (tuple2 a1 c1) (tuple2 a1 b1) (t2tb133 a2) (t2tb13 x))
  (t2tb166 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a c) b))) (w (set (tuple21 a c))) (x b))
  (= (mem2 x (tb2t12 (image b1 (tuple2 a1 c1) (t2tb168 p) (t2tb129 w))))
  (exists ((a2 (tuple21 a c)))
  (and (mem10 a2 w) (mem (tuple2 (tuple2 a1 c1) b1)
  (Tuple2 (tuple2 a1 c1) b1 (t2tb133 a2) (t2tb14 x)) (t2tb168 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a c) a))) (w (set (tuple21 a c))) (x a))
  (= (mem1 x (tb2t1 (image a1 (tuple2 a1 c1) (t2tb170 p) (t2tb129 w))))
  (exists ((a2 (tuple21 a c)))
  (and (mem10 a2 w) (mem (tuple2 (tuple2 a1 c1) a1)
  (Tuple2 (tuple2 a1 c1) a1 (t2tb133 a2) (t2tb2 x)) (t2tb170 p)))))))

;; mem_image
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (w (set (tuple21 a c))) (x uni))
  (= (mem b2 x (image b2 (tuple2 a1 c1) p (t2tb129 w)))
  (exists ((a2 (tuple21 a c)))
  (and (mem10 a2 w) (mem (tuple2 (tuple2 a1 c1) b2)
  (Tuple2 (tuple2 a1 c1) b2 (t2tb133 a2) x) p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 b c)) (tuple21 a d))))
  (w (set (set (tuple21 b c)))) (x (tuple21 a d)))
  (= (mem32 x
  (tb2t903
  (image (tuple2 a1 d1) (set1 (tuple2 b1 c1)) (t2tb2248 p) (t2tb130 w))))
  (exists ((a2 (set (tuple21 b c))))
  (and (mem9 a2 w) (mem (tuple2 (set1 (tuple2 b1 c1)) (tuple2 a1 d1))
  (Tuple2 (set1 (tuple2 b1 c1)) (tuple2 a1 d1) (t2tb131 a2) (t2tb904 x))
  (t2tb2248 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 b c)) (tuple21 b d))))
  (w (set (set (tuple21 b c)))) (x (tuple21 b d)))
  (= (mem23 x
  (tb2t687
  (image (tuple2 b1 d1) (set1 (tuple2 b1 c1)) (t2tb2250 p) (t2tb130 w))))
  (exists ((a2 (set (tuple21 b c))))
  (and (mem9 a2 w) (mem (tuple2 (set1 (tuple2 b1 c1)) (tuple2 b1 d1))
  (Tuple2 (set1 (tuple2 b1 c1)) (tuple2 b1 d1) (t2tb131 a2) (t2tb692 x))
  (t2tb2250 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 b c)) (set (tuple21 c d)))))
  (w (set (set (tuple21 b c)))) (x (set (tuple21 c d))))
  (= (mem22 x
  (tb2t688
  (image (set1 (tuple2 c1 d1)) (set1 (tuple2 b1 c1)) (t2tb2252 p)
  (t2tb130 w))))
  (exists ((a2 (set (tuple21 b c))))
  (and (mem9 a2 w) (mem (tuple2 (set1 (tuple2 b1 c1)) (set1 (tuple2 c1 d1)))
  (Tuple2 (set1 (tuple2 b1 c1)) (set1 (tuple2 c1 d1)) (t2tb131 a2)
  (t2tb689 x)) (t2tb2252 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 b c)) (tuple21 c d))))
  (w (set (set (tuple21 b c)))) (x (tuple21 c d)))
  (= (mem21 x
  (tb2t689
  (image (tuple2 c1 d1) (set1 (tuple2 b1 c1)) (t2tb2255 p) (t2tb130 w))))
  (exists ((a2 (set (tuple21 b c))))
  (and (mem9 a2 w) (mem (tuple2 (set1 (tuple2 b1 c1)) (tuple2 c1 d1))
  (Tuple2 (set1 (tuple2 b1 c1)) (tuple2 c1 d1) (t2tb131 a2) (t2tb693 x))
  (t2tb2255 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 b c)) d))) (w (set (set (tuple21 b
  c)))) (x d))
  (= (mem20 x
  (tb2t690 (image d1 (set1 (tuple2 b1 c1)) (t2tb2256 p) (t2tb130 w))))
  (exists ((a2 (set (tuple21 b c))))
  (and (mem9 a2 w) (mem (tuple2 (set1 (tuple2 b1 c1)) d1)
  (Tuple2 (set1 (tuple2 b1 c1)) d1 (t2tb131 a2) (t2tb694 x)) (t2tb2256 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 b c)) (tuple21 a c))))
  (w (set (set (tuple21 b c)))) (x (tuple21 a c)))
  (= (mem10 x
  (tb2t129
  (image (tuple2 a1 c1) (set1 (tuple2 b1 c1)) (t2tb1094 p) (t2tb130 w))))
  (exists ((a2 (set (tuple21 b c))))
  (and (mem9 a2 w) (mem (tuple2 (set1 (tuple2 b1 c1)) (tuple2 a1 c1))
  (Tuple2 (set1 (tuple2 b1 c1)) (tuple2 a1 c1) (t2tb131 a2) (t2tb133 x))
  (t2tb1094 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 b c)) (set (tuple21 b c)))))
  (w (set (set (tuple21 b c)))) (x (set (tuple21 b c))))
  (= (mem9 x
  (tb2t130
  (image (set1 (tuple2 b1 c1)) (set1 (tuple2 b1 c1)) (t2tb1095 p)
  (t2tb130 w))))
  (exists ((a2 (set (tuple21 b c))))
  (and (mem9 a2 w) (mem (tuple2 (set1 (tuple2 b1 c1)) (set1 (tuple2 b1 c1)))
  (Tuple2 (set1 (tuple2 b1 c1)) (set1 (tuple2 b1 c1)) (t2tb131 a2)
  (t2tb131 x)) (t2tb1095 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 b c)) (tuple21 b c))))
  (w (set (set (tuple21 b c)))) (x (tuple21 b c)))
  (= (mem8 x
  (tb2t131
  (image (tuple2 b1 c1) (set1 (tuple2 b1 c1)) (t2tb1097 p) (t2tb130 w))))
  (exists ((a2 (set (tuple21 b c))))
  (and (mem9 a2 w) (mem (tuple2 (set1 (tuple2 b1 c1)) (tuple2 b1 c1))
  (Tuple2 (set1 (tuple2 b1 c1)) (tuple2 b1 c1) (t2tb131 a2) (t2tb134 x))
  (t2tb1097 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 b c)) c))) (w (set (set (tuple21 b
  c)))) (x c))
  (= (mem7 x
  (tb2t132 (image c1 (set1 (tuple2 b1 c1)) (t2tb1099 p) (t2tb130 w))))
  (exists ((a2 (set (tuple21 b c))))
  (and (mem9 a2 w) (mem (tuple2 (set1 (tuple2 b1 c1)) c1)
  (Tuple2 (set1 (tuple2 b1 c1)) c1 (t2tb131 a2) (t2tb135 x)) (t2tb1099 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 b c)) (set (tuple21 a b)))))
  (w (set (set (tuple21 b c)))) (x (set (tuple21 a b))))
  (= (mem4 x
  (tb2t10
  (image (set1 (tuple2 a1 b1)) (set1 (tuple2 b1 c1)) (t2tb1101 p)
  (t2tb130 w))))
  (exists ((a2 (set (tuple21 b c))))
  (and (mem9 a2 w) (mem (tuple2 (set1 (tuple2 b1 c1)) (set1 (tuple2 a1 b1)))
  (Tuple2 (set1 (tuple2 b1 c1)) (set1 (tuple2 a1 b1)) (t2tb131 a2)
  (t2tb11 x)) (t2tb1101 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 b c)) (tuple21 a b))))
  (w (set (set (tuple21 b c)))) (x (tuple21 a b)))
  (= (mem3 x
  (tb2t11
  (image (tuple2 a1 b1) (set1 (tuple2 b1 c1)) (t2tb1103 p) (t2tb130 w))))
  (exists ((a2 (set (tuple21 b c))))
  (and (mem9 a2 w) (mem (tuple2 (set1 (tuple2 b1 c1)) (tuple2 a1 b1))
  (Tuple2 (set1 (tuple2 b1 c1)) (tuple2 a1 b1) (t2tb131 a2) (t2tb13 x))
  (t2tb1103 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 b c)) b))) (w (set (set (tuple21 b
  c)))) (x b))
  (= (mem2 x
  (tb2t12 (image b1 (set1 (tuple2 b1 c1)) (t2tb1105 p) (t2tb130 w))))
  (exists ((a2 (set (tuple21 b c))))
  (and (mem9 a2 w) (mem (tuple2 (set1 (tuple2 b1 c1)) b1)
  (Tuple2 (set1 (tuple2 b1 c1)) b1 (t2tb131 a2) (t2tb14 x)) (t2tb1105 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 b c)) a))) (w (set (set (tuple21 b
  c)))) (x a))
  (= (mem1 x
  (tb2t1 (image a1 (set1 (tuple2 b1 c1)) (t2tb1107 p) (t2tb130 w))))
  (exists ((a2 (set (tuple21 b c))))
  (and (mem9 a2 w) (mem (tuple2 (set1 (tuple2 b1 c1)) a1)
  (Tuple2 (set1 (tuple2 b1 c1)) a1 (t2tb131 a2) (t2tb2 x)) (t2tb1107 p)))))))

;; mem_image
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (w (set (set (tuple21 b c)))) (x uni))
  (= (mem b2 x (image b2 (set1 (tuple2 b1 c1)) p (t2tb130 w)))
  (exists ((a2 (set (tuple21 b c))))
  (and (mem9 a2 w) (mem (tuple2 (set1 (tuple2 b1 c1)) b2)
  (Tuple2 (set1 (tuple2 b1 c1)) b2 (t2tb131 a2) x) p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 b c) (tuple21 a d)))) (w (set (tuple21 b
  c))) (x (tuple21 a d)))
  (= (mem32 x
  (tb2t903 (image (tuple2 a1 d1) (tuple2 b1 c1) (t2tb2258 p) (t2tb131 w))))
  (exists ((a2 (tuple21 b c)))
  (and (mem8 a2 w) (mem (tuple2 (tuple2 b1 c1) (tuple2 a1 d1))
  (Tuple2 (tuple2 b1 c1) (tuple2 a1 d1) (t2tb134 a2) (t2tb904 x))
  (t2tb2258 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 b c) (tuple21 b d)))) (w (set (tuple21 b
  c))) (x (tuple21 b d)))
  (= (mem23 x
  (tb2t687 (image (tuple2 b1 d1) (tuple2 b1 c1) (t2tb2260 p) (t2tb131 w))))
  (exists ((a2 (tuple21 b c)))
  (and (mem8 a2 w) (mem (tuple2 (tuple2 b1 c1) (tuple2 b1 d1))
  (Tuple2 (tuple2 b1 c1) (tuple2 b1 d1) (t2tb134 a2) (t2tb692 x))
  (t2tb2260 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 b c) (set (tuple21 c d)))))
  (w (set (tuple21 b c))) (x (set (tuple21 c d))))
  (= (mem22 x
  (tb2t688
  (image (set1 (tuple2 c1 d1)) (tuple2 b1 c1) (t2tb2262 p) (t2tb131 w))))
  (exists ((a2 (tuple21 b c)))
  (and (mem8 a2 w) (mem (tuple2 (tuple2 b1 c1) (set1 (tuple2 c1 d1)))
  (Tuple2 (tuple2 b1 c1) (set1 (tuple2 c1 d1)) (t2tb134 a2) (t2tb689 x))
  (t2tb2262 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 b c) (tuple21 c d)))) (w (set (tuple21 b
  c))) (x (tuple21 c d)))
  (= (mem21 x
  (tb2t689 (image (tuple2 c1 d1) (tuple2 b1 c1) (t2tb2264 p) (t2tb131 w))))
  (exists ((a2 (tuple21 b c)))
  (and (mem8 a2 w) (mem (tuple2 (tuple2 b1 c1) (tuple2 c1 d1))
  (Tuple2 (tuple2 b1 c1) (tuple2 c1 d1) (t2tb134 a2) (t2tb693 x))
  (t2tb2264 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 b c) d))) (w (set (tuple21 b c))) (x d))
  (= (mem20 x (tb2t690 (image d1 (tuple2 b1 c1) (t2tb2266 p) (t2tb131 w))))
  (exists ((a2 (tuple21 b c)))
  (and (mem8 a2 w) (mem (tuple2 (tuple2 b1 c1) d1)
  (Tuple2 (tuple2 b1 c1) d1 (t2tb134 a2) (t2tb694 x)) (t2tb2266 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 b c) (tuple21 a c)))) (w (set (tuple21 b
  c))) (x (tuple21 a c)))
  (= (mem10 x
  (tb2t129 (image (tuple2 a1 c1) (tuple2 b1 c1) (t2tb1109 p) (t2tb131 w))))
  (exists ((a2 (tuple21 b c)))
  (and (mem8 a2 w) (mem (tuple2 (tuple2 b1 c1) (tuple2 a1 c1))
  (Tuple2 (tuple2 b1 c1) (tuple2 a1 c1) (t2tb134 a2) (t2tb133 x))
  (t2tb1109 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 b c) (set (tuple21 b c)))))
  (w (set (tuple21 b c))) (x (set (tuple21 b c))))
  (= (mem9 x
  (tb2t130
  (image (set1 (tuple2 b1 c1)) (tuple2 b1 c1) (t2tb1111 p) (t2tb131 w))))
  (exists ((a2 (tuple21 b c)))
  (and (mem8 a2 w) (mem (tuple2 (tuple2 b1 c1) (set1 (tuple2 b1 c1)))
  (Tuple2 (tuple2 b1 c1) (set1 (tuple2 b1 c1)) (t2tb134 a2) (t2tb131 x))
  (t2tb1111 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 b c) (tuple21 b c)))) (w (set (tuple21 b
  c))) (x (tuple21 b c)))
  (= (mem8 x
  (tb2t131 (image (tuple2 b1 c1) (tuple2 b1 c1) (t2tb1113 p) (t2tb131 w))))
  (exists ((a2 (tuple21 b c)))
  (and (mem8 a2 w) (mem (tuple2 (tuple2 b1 c1) (tuple2 b1 c1))
  (Tuple2 (tuple2 b1 c1) (tuple2 b1 c1) (t2tb134 a2) (t2tb134 x))
  (t2tb1113 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 b c) c))) (w (set (tuple21 b c))) (x c))
  (= (mem7 x (tb2t132 (image c1 (tuple2 b1 c1) (t2tb1115 p) (t2tb131 w))))
  (exists ((a2 (tuple21 b c)))
  (and (mem8 a2 w) (mem (tuple2 (tuple2 b1 c1) c1)
  (Tuple2 (tuple2 b1 c1) c1 (t2tb134 a2) (t2tb135 x)) (t2tb1115 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 b c) (set (tuple21 a b)))))
  (w (set (tuple21 b c))) (x (set (tuple21 a b))))
  (= (mem4 x
  (tb2t10
  (image (set1 (tuple2 a1 b1)) (tuple2 b1 c1) (t2tb1117 p) (t2tb131 w))))
  (exists ((a2 (tuple21 b c)))
  (and (mem8 a2 w) (mem (tuple2 (tuple2 b1 c1) (set1 (tuple2 a1 b1)))
  (Tuple2 (tuple2 b1 c1) (set1 (tuple2 a1 b1)) (t2tb134 a2) (t2tb11 x))
  (t2tb1117 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 b c) (tuple21 a b)))) (w (set (tuple21 b
  c))) (x (tuple21 a b)))
  (= (mem3 x
  (tb2t11 (image (tuple2 a1 b1) (tuple2 b1 c1) (t2tb1119 p) (t2tb131 w))))
  (exists ((a2 (tuple21 b c)))
  (and (mem8 a2 w) (mem (tuple2 (tuple2 b1 c1) (tuple2 a1 b1))
  (Tuple2 (tuple2 b1 c1) (tuple2 a1 b1) (t2tb134 a2) (t2tb13 x))
  (t2tb1119 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 b c) b))) (w (set (tuple21 b c))) (x b))
  (= (mem2 x (tb2t12 (image b1 (tuple2 b1 c1) (t2tb1121 p) (t2tb131 w))))
  (exists ((a2 (tuple21 b c)))
  (and (mem8 a2 w) (mem (tuple2 (tuple2 b1 c1) b1)
  (Tuple2 (tuple2 b1 c1) b1 (t2tb134 a2) (t2tb14 x)) (t2tb1121 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 b c) a))) (w (set (tuple21 b c))) (x a))
  (= (mem1 x (tb2t1 (image a1 (tuple2 b1 c1) (t2tb1124 p) (t2tb131 w))))
  (exists ((a2 (tuple21 b c)))
  (and (mem8 a2 w) (mem (tuple2 (tuple2 b1 c1) a1)
  (Tuple2 (tuple2 b1 c1) a1 (t2tb134 a2) (t2tb2 x)) (t2tb1124 p)))))))

;; mem_image
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (w (set (tuple21 b c))) (x uni))
  (= (mem b2 x (image b2 (tuple2 b1 c1) p (t2tb131 w)))
  (exists ((a2 (tuple21 b c)))
  (and (mem8 a2 w) (mem (tuple2 (tuple2 b1 c1) b2)
  (Tuple2 (tuple2 b1 c1) b2 (t2tb134 a2) x) p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 c (tuple21 a d)))) (w (set c)) (x (tuple21 a d)))
  (= (mem32 x (tb2t903 (image (tuple2 a1 d1) c1 (t2tb2268 p) (t2tb132 w))))
  (exists ((a2 c))
  (and (mem7 a2 w) (mem (tuple2 c1 (tuple2 a1 d1))
  (Tuple2 c1 (tuple2 a1 d1) (t2tb135 a2) (t2tb904 x)) (t2tb2268 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 c (tuple21 b d)))) (w (set c)) (x (tuple21 b d)))
  (= (mem23 x (tb2t687 (image (tuple2 b1 d1) c1 (t2tb2049 p) (t2tb132 w))))
  (exists ((a2 c))
  (and (mem7 a2 w) (mem (tuple2 c1 (tuple2 b1 d1))
  (Tuple2 c1 (tuple2 b1 d1) (t2tb135 a2) (t2tb692 x)) (t2tb2049 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 c (set (tuple21 c d))))) (w (set c))
  (x (set (tuple21 c d))))
  (= (mem22 x
  (tb2t688 (image (set1 (tuple2 c1 d1)) c1 (t2tb855 p) (t2tb132 w))))
  (exists ((a2 c))
  (and (mem7 a2 w) (mem (tuple2 c1 (set1 (tuple2 c1 d1)))
  (Tuple2 c1 (set1 (tuple2 c1 d1)) (t2tb135 a2) (t2tb689 x)) (t2tb855 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 c (tuple21 c d)))) (w (set c)) (x (tuple21 c d)))
  (= (mem21 x (tb2t689 (image (tuple2 c1 d1) c1 (t2tb857 p) (t2tb132 w))))
  (exists ((a2 c))
  (and (mem7 a2 w) (mem (tuple2 c1 (tuple2 c1 d1))
  (Tuple2 c1 (tuple2 c1 d1) (t2tb135 a2) (t2tb693 x)) (t2tb857 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 c d))) (w (set c)) (x d))
  (= (mem20 x (tb2t690 (image d1 c1 (t2tb689 p) (t2tb132 w))))
  (exists ((a2 c))
  (and (mem7 a2 w) (mem21 (tb2t693 (Tuple2 c1 d1 (t2tb135 a2) (t2tb694 x)))
  p))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 c (tuple21 a c)))) (w (set c)) (x (tuple21 a c)))
  (= (mem10 x (tb2t129 (image (tuple2 a1 c1) c1 (t2tb210 p) (t2tb132 w))))
  (exists ((a2 c))
  (and (mem7 a2 w) (mem (tuple2 c1 (tuple2 a1 c1))
  (Tuple2 c1 (tuple2 a1 c1) (t2tb135 a2) (t2tb133 x)) (t2tb210 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 c (set (tuple21 b c))))) (w (set c))
  (x (set (tuple21 b c))))
  (= (mem9 x
  (tb2t130 (image (set1 (tuple2 b1 c1)) c1 (t2tb1125 p) (t2tb132 w))))
  (exists ((a2 c))
  (and (mem7 a2 w) (mem (tuple2 c1 (set1 (tuple2 b1 c1)))
  (Tuple2 c1 (set1 (tuple2 b1 c1)) (t2tb135 a2) (t2tb131 x)) (t2tb1125 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 c (tuple21 b c)))) (w (set c)) (x (tuple21 b c)))
  (= (mem8 x (tb2t131 (image (tuple2 b1 c1) c1 (t2tb1127 p) (t2tb132 w))))
  (exists ((a2 c))
  (and (mem7 a2 w) (mem (tuple2 c1 (tuple2 b1 c1))
  (Tuple2 c1 (tuple2 b1 c1) (t2tb135 a2) (t2tb134 x)) (t2tb1127 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 c c))) (w (set c)) (x c))
  (= (mem7 x (tb2t132 (image c1 c1 (t2tb216 p) (t2tb132 w))))
  (exists ((a2 c))
  (and (mem7 a2 w) (mem (tuple2 c1 c1)
  (Tuple2 c1 c1 (t2tb135 a2) (t2tb135 x)) (t2tb216 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 c (set (tuple21 a b))))) (w (set c))
  (x (set (tuple21 a b))))
  (= (mem4 x
  (tb2t10 (image (set1 (tuple2 a1 b1)) c1 (t2tb218 p) (t2tb132 w))))
  (exists ((a2 c))
  (and (mem7 a2 w) (mem (tuple2 c1 (set1 (tuple2 a1 b1)))
  (Tuple2 c1 (set1 (tuple2 a1 b1)) (t2tb135 a2) (t2tb11 x)) (t2tb218 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 c (tuple21 a b)))) (w (set c)) (x (tuple21 a b)))
  (= (mem3 x (tb2t11 (image (tuple2 a1 b1) c1 (t2tb220 p) (t2tb132 w))))
  (exists ((a2 c))
  (and (mem7 a2 w) (mem (tuple2 c1 (tuple2 a1 b1))
  (Tuple2 c1 (tuple2 a1 b1) (t2tb135 a2) (t2tb13 x)) (t2tb220 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 c b))) (w (set c)) (x b))
  (= (mem2 x (tb2t12 (image b1 c1 (t2tb222 p) (t2tb132 w))))
  (exists ((a2 c))
  (and (mem7 a2 w) (mem (tuple2 c1 b1) (Tuple2 c1 b1 (t2tb135 a2) (t2tb14 x))
  (t2tb222 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 c a))) (w (set c)) (x a))
  (= (mem1 x (tb2t1 (image a1 c1 (t2tb224 p) (t2tb132 w))))
  (exists ((a2 c))
  (and (mem7 a2 w) (mem (tuple2 c1 a1) (Tuple2 c1 a1 (t2tb135 a2) (t2tb2 x))
  (t2tb224 p)))))))

;; mem_image
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (w (set c)) (x uni))
  (= (mem b2 x (image b2 c1 p (t2tb132 w)))
  (exists ((a2 c))
  (and (mem7 a2 w) (mem (tuple2 c1 b2) (Tuple2 c1 b2 (t2tb135 a2) x) p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a b)) (tuple21 a d))))
  (w (set (set (tuple21 a b)))) (x (tuple21 a d)))
  (= (mem32 x
  (tb2t903
  (image (tuple2 a1 d1) (set1 (tuple2 a1 b1)) (t2tb2271 p) (t2tb10 w))))
  (exists ((a2 (set (tuple21 a b))))
  (and (mem4 a2 w) (mem (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 d1))
  (Tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 d1) (t2tb11 a2) (t2tb904 x))
  (t2tb2271 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a b)) (tuple21 b d))))
  (w (set (set (tuple21 a b)))) (x (tuple21 b d)))
  (= (mem23 x
  (tb2t687
  (image (tuple2 b1 d1) (set1 (tuple2 a1 b1)) (t2tb2050 p) (t2tb10 w))))
  (exists ((a2 (set (tuple21 a b))))
  (and (mem4 a2 w) (mem (tuple2 (set1 (tuple2 a1 b1)) (tuple2 b1 d1))
  (Tuple2 (set1 (tuple2 a1 b1)) (tuple2 b1 d1) (t2tb11 a2) (t2tb692 x))
  (t2tb2050 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a b)) (set (tuple21 c d)))))
  (w (set (set (tuple21 a b)))) (x (set (tuple21 c d))))
  (= (mem22 x
  (tb2t688
  (image (set1 (tuple2 c1 d1)) (set1 (tuple2 a1 b1)) (t2tb865 p) (t2tb10 w))))
  (exists ((a2 (set (tuple21 a b))))
  (and (mem4 a2 w) (mem (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 c1 d1)))
  (Tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 c1 d1)) (t2tb11 a2)
  (t2tb689 x)) (t2tb865 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a b)) (tuple21 c d))))
  (w (set (set (tuple21 a b)))) (x (tuple21 c d)))
  (= (mem21 x
  (tb2t689
  (image (tuple2 c1 d1) (set1 (tuple2 a1 b1)) (t2tb867 p) (t2tb10 w))))
  (exists ((a2 (set (tuple21 a b))))
  (and (mem4 a2 w) (mem (tuple2 (set1 (tuple2 a1 b1)) (tuple2 c1 d1))
  (Tuple2 (set1 (tuple2 a1 b1)) (tuple2 c1 d1) (t2tb11 a2) (t2tb693 x))
  (t2tb867 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a b)) d))) (w (set (set (tuple21 a
  b)))) (x d))
  (= (mem20 x
  (tb2t690 (image d1 (set1 (tuple2 a1 b1)) (t2tb869 p) (t2tb10 w))))
  (exists ((a2 (set (tuple21 a b))))
  (and (mem4 a2 w) (mem (tuple2 (set1 (tuple2 a1 b1)) d1)
  (Tuple2 (set1 (tuple2 a1 b1)) d1 (t2tb11 a2) (t2tb694 x)) (t2tb869 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a b)) (tuple21 a c))))
  (w (set (set (tuple21 a b)))) (x (tuple21 a c)))
  (= (mem10 x
  (tb2t129
  (image (tuple2 a1 c1) (set1 (tuple2 a1 b1)) (t2tb229 p) (t2tb10 w))))
  (exists ((a2 (set (tuple21 a b))))
  (and (mem4 a2 w) (mem (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 c1))
  (Tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 c1) (t2tb11 a2) (t2tb133 x))
  (t2tb229 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a b)) (set (tuple21 b c)))))
  (w (set (set (tuple21 a b)))) (x (set (tuple21 b c))))
  (= (mem9 x
  (tb2t130
  (image (set1 (tuple2 b1 c1)) (set1 (tuple2 a1 b1)) (t2tb1129 p) (t2tb10 w))))
  (exists ((a2 (set (tuple21 a b))))
  (and (mem4 a2 w) (mem (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 b1 c1)))
  (Tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 b1 c1)) (t2tb11 a2)
  (t2tb131 x)) (t2tb1129 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a b)) (tuple21 b c))))
  (w (set (set (tuple21 a b)))) (x (tuple21 b c)))
  (= (mem8 x
  (tb2t131
  (image (tuple2 b1 c1) (set1 (tuple2 a1 b1)) (t2tb1131 p) (t2tb10 w))))
  (exists ((a2 (set (tuple21 a b))))
  (and (mem4 a2 w) (mem (tuple2 (set1 (tuple2 a1 b1)) (tuple2 b1 c1))
  (Tuple2 (set1 (tuple2 a1 b1)) (tuple2 b1 c1) (t2tb11 a2) (t2tb134 x))
  (t2tb1131 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a b)) c))) (w (set (set (tuple21 a
  b)))) (x c))
  (= (mem7 x
  (tb2t132 (image c1 (set1 (tuple2 a1 b1)) (t2tb234 p) (t2tb10 w))))
  (exists ((a2 (set (tuple21 a b))))
  (and (mem4 a2 w) (mem (tuple2 (set1 (tuple2 a1 b1)) c1)
  (Tuple2 (set1 (tuple2 a1 b1)) c1 (t2tb11 a2) (t2tb135 x)) (t2tb234 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a b)) (set (tuple21 a b)))))
  (w (set (set (tuple21 a b)))) (x (set (tuple21 a b))))
  (= (mem4 x
  (tb2t10
  (image (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1)) (t2tb15 p) (t2tb10 w))))
  (exists ((a2 (set (tuple21 a b))))
  (and (mem4 a2 w) (mem (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1)))
  (Tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1)) (t2tb11 a2) (t2tb11 x))
  (t2tb15 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a b)) (tuple21 a b))))
  (w (set (set (tuple21 a b)))) (x (tuple21 a b)))
  (= (mem3 x
  (tb2t11 (image (tuple2 a1 b1) (set1 (tuple2 a1 b1)) (t2tb17 p) (t2tb10 w))))
  (exists ((a2 (set (tuple21 a b))))
  (and (mem4 a2 w) (mem (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 b1))
  (Tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 b1) (t2tb11 a2) (t2tb13 x))
  (t2tb17 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a b)) b))) (w (set (set (tuple21 a
  b)))) (x b))
  (= (mem2 x (tb2t12 (image b1 (set1 (tuple2 a1 b1)) (t2tb19 p) (t2tb10 w))))
  (exists ((a2 (set (tuple21 a b))))
  (and (mem4 a2 w) (mem (tuple2 (set1 (tuple2 a1 b1)) b1)
  (Tuple2 (set1 (tuple2 a1 b1)) b1 (t2tb11 a2) (t2tb14 x)) (t2tb19 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a b)) a))) (w (set (set (tuple21 a
  b)))) (x a))
  (= (mem1 x (tb2t1 (image a1 (set1 (tuple2 a1 b1)) (t2tb22 p) (t2tb10 w))))
  (exists ((a2 (set (tuple21 a b))))
  (and (mem4 a2 w) (mem (tuple2 (set1 (tuple2 a1 b1)) a1)
  (Tuple2 (set1 (tuple2 a1 b1)) a1 (t2tb11 a2) (t2tb2 x)) (t2tb22 p)))))))

;; mem_image
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (w (set (set (tuple21 a b)))) (x uni))
  (= (mem b2 x (image b2 (set1 (tuple2 a1 b1)) p (t2tb10 w)))
  (exists ((a2 (set (tuple21 a b))))
  (and (mem4 a2 w) (mem (tuple2 (set1 (tuple2 a1 b1)) b2)
  (Tuple2 (set1 (tuple2 a1 b1)) b2 (t2tb11 a2) x) p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) (tuple21 a d)))) (w (set (tuple21 a
  b))) (x (tuple21 a d)))
  (= (mem32 x
  (tb2t903 (image (tuple2 a1 d1) (tuple2 a1 b1) (t2tb2272 p) (t2tb11 w))))
  (exists ((a2 (tuple21 a b)))
  (and (mem3 a2 w) (mem (tuple2 (tuple2 a1 b1) (tuple2 a1 d1))
  (Tuple2 (tuple2 a1 b1) (tuple2 a1 d1) (t2tb13 a2) (t2tb904 x))
  (t2tb2272 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) (tuple21 b d)))) (w (set (tuple21 a
  b))) (x (tuple21 b d)))
  (= (mem23 x
  (tb2t687 (image (tuple2 b1 d1) (tuple2 a1 b1) (t2tb2052 p) (t2tb11 w))))
  (exists ((a2 (tuple21 a b)))
  (and (mem3 a2 w) (mem (tuple2 (tuple2 a1 b1) (tuple2 b1 d1))
  (Tuple2 (tuple2 a1 b1) (tuple2 b1 d1) (t2tb13 a2) (t2tb692 x))
  (t2tb2052 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) (set (tuple21 c d)))))
  (w (set (tuple21 a b))) (x (set (tuple21 c d))))
  (= (mem22 x
  (tb2t688
  (image (set1 (tuple2 c1 d1)) (tuple2 a1 b1) (t2tb877 p) (t2tb11 w))))
  (exists ((a2 (tuple21 a b)))
  (and (mem3 a2 w) (mem (tuple2 (tuple2 a1 b1) (set1 (tuple2 c1 d1)))
  (Tuple2 (tuple2 a1 b1) (set1 (tuple2 c1 d1)) (t2tb13 a2) (t2tb689 x))
  (t2tb877 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) (tuple21 c d)))) (w (set (tuple21 a
  b))) (x (tuple21 c d)))
  (= (mem21 x
  (tb2t689 (image (tuple2 c1 d1) (tuple2 a1 b1) (t2tb879 p) (t2tb11 w))))
  (exists ((a2 (tuple21 a b)))
  (and (mem3 a2 w) (mem (tuple2 (tuple2 a1 b1) (tuple2 c1 d1))
  (Tuple2 (tuple2 a1 b1) (tuple2 c1 d1) (t2tb13 a2) (t2tb693 x))
  (t2tb879 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) d))) (w (set (tuple21 a b))) (x d))
  (= (mem20 x (tb2t690 (image d1 (tuple2 a1 b1) (t2tb881 p) (t2tb11 w))))
  (exists ((a2 (tuple21 a b)))
  (and (mem3 a2 w) (mem (tuple2 (tuple2 a1 b1) d1)
  (Tuple2 (tuple2 a1 b1) d1 (t2tb13 a2) (t2tb694 x)) (t2tb881 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) (tuple21 a c)))) (w (set (tuple21 a
  b))) (x (tuple21 a c)))
  (= (mem10 x
  (tb2t129 (image (tuple2 a1 c1) (tuple2 a1 b1) (t2tb238 p) (t2tb11 w))))
  (exists ((a2 (tuple21 a b)))
  (and (mem3 a2 w) (mem (tuple2 (tuple2 a1 b1) (tuple2 a1 c1))
  (Tuple2 (tuple2 a1 b1) (tuple2 a1 c1) (t2tb13 a2) (t2tb133 x))
  (t2tb238 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) (set (tuple21 b c)))))
  (w (set (tuple21 a b))) (x (set (tuple21 b c))))
  (= (mem9 x
  (tb2t130
  (image (set1 (tuple2 b1 c1)) (tuple2 a1 b1) (t2tb1133 p) (t2tb11 w))))
  (exists ((a2 (tuple21 a b)))
  (and (mem3 a2 w) (mem (tuple2 (tuple2 a1 b1) (set1 (tuple2 b1 c1)))
  (Tuple2 (tuple2 a1 b1) (set1 (tuple2 b1 c1)) (t2tb13 a2) (t2tb131 x))
  (t2tb1133 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) (tuple21 b c)))) (w (set (tuple21 a
  b))) (x (tuple21 b c)))
  (= (mem8 x
  (tb2t131 (image (tuple2 b1 c1) (tuple2 a1 b1) (t2tb1135 p) (t2tb11 w))))
  (exists ((a2 (tuple21 a b)))
  (and (mem3 a2 w) (mem (tuple2 (tuple2 a1 b1) (tuple2 b1 c1))
  (Tuple2 (tuple2 a1 b1) (tuple2 b1 c1) (t2tb13 a2) (t2tb134 x))
  (t2tb1135 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) c))) (w (set (tuple21 a b))) (x c))
  (= (mem7 x (tb2t132 (image c1 (tuple2 a1 b1) (t2tb245 p) (t2tb11 w))))
  (exists ((a2 (tuple21 a b)))
  (and (mem3 a2 w) (mem (tuple2 (tuple2 a1 b1) c1)
  (Tuple2 (tuple2 a1 b1) c1 (t2tb13 a2) (t2tb135 x)) (t2tb245 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) (set (tuple21 a b)))))
  (w (set (tuple21 a b))) (x (set (tuple21 a b))))
  (= (mem4 x
  (tb2t10 (image (set1 (tuple2 a1 b1)) (tuple2 a1 b1) (t2tb23 p) (t2tb11 w))))
  (exists ((a2 (tuple21 a b)))
  (and (mem3 a2 w) (mem (tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 b1)))
  (Tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 b1)) (t2tb13 a2) (t2tb11 x))
  (t2tb23 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) (tuple21 a b)))) (w (set (tuple21 a
  b))) (x (tuple21 a b)))
  (= (mem3 x
  (tb2t11 (image (tuple2 a1 b1) (tuple2 a1 b1) (t2tb25 p) (t2tb11 w))))
  (exists ((a2 (tuple21 a b)))
  (and (mem3 a2 w) (mem (tuple2 (tuple2 a1 b1) (tuple2 a1 b1))
  (Tuple2 (tuple2 a1 b1) (tuple2 a1 b1) (t2tb13 a2) (t2tb13 x)) (t2tb25 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) b))) (w (set (tuple21 a b))) (x b))
  (= (mem2 x (tb2t12 (image b1 (tuple2 a1 b1) (t2tb27 p) (t2tb11 w))))
  (exists ((a2 (tuple21 a b)))
  (and (mem3 a2 w) (mem (tuple2 (tuple2 a1 b1) b1)
  (Tuple2 (tuple2 a1 b1) b1 (t2tb13 a2) (t2tb14 x)) (t2tb27 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) a))) (w (set (tuple21 a b))) (x a))
  (= (mem1 x (tb2t1 (image a1 (tuple2 a1 b1) (t2tb29 p) (t2tb11 w))))
  (exists ((a2 (tuple21 a b)))
  (and (mem3 a2 w) (mem (tuple2 (tuple2 a1 b1) a1)
  (Tuple2 (tuple2 a1 b1) a1 (t2tb13 a2) (t2tb2 x)) (t2tb29 p)))))))

;; mem_image
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (w (set (tuple21 a b))) (x uni))
  (= (mem b2 x (image b2 (tuple2 a1 b1) p (t2tb11 w)))
  (exists ((a2 (tuple21 a b)))
  (and (mem3 a2 w) (mem (tuple2 (tuple2 a1 b1) b2)
  (Tuple2 (tuple2 a1 b1) b2 (t2tb13 a2) x) p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 b (tuple21 a d)))) (w (set b)) (x (tuple21 a d)))
  (= (mem32 x (tb2t903 (image (tuple2 a1 d1) b1 (t2tb2274 p) (t2tb12 w))))
  (exists ((a2 b))
  (and (mem2 a2 w) (mem (tuple2 b1 (tuple2 a1 d1))
  (Tuple2 b1 (tuple2 a1 d1) (t2tb14 a2) (t2tb904 x)) (t2tb2274 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 b (tuple21 b d)))) (w (set b)) (x (tuple21 b d)))
  (= (mem23 x (tb2t687 (image (tuple2 b1 d1) b1 (t2tb2054 p) (t2tb12 w))))
  (exists ((a2 b))
  (and (mem2 a2 w) (mem (tuple2 b1 (tuple2 b1 d1))
  (Tuple2 b1 (tuple2 b1 d1) (t2tb14 a2) (t2tb692 x)) (t2tb2054 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 b (set (tuple21 c d))))) (w (set b))
  (x (set (tuple21 c d))))
  (= (mem22 x
  (tb2t688 (image (set1 (tuple2 c1 d1)) b1 (t2tb889 p) (t2tb12 w))))
  (exists ((a2 b))
  (and (mem2 a2 w) (mem (tuple2 b1 (set1 (tuple2 c1 d1)))
  (Tuple2 b1 (set1 (tuple2 c1 d1)) (t2tb14 a2) (t2tb689 x)) (t2tb889 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 b (tuple21 c d)))) (w (set b)) (x (tuple21 c d)))
  (= (mem21 x (tb2t689 (image (tuple2 c1 d1) b1 (t2tb891 p) (t2tb12 w))))
  (exists ((a2 b))
  (and (mem2 a2 w) (mem (tuple2 b1 (tuple2 c1 d1))
  (Tuple2 b1 (tuple2 c1 d1) (t2tb14 a2) (t2tb693 x)) (t2tb891 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 b d))) (w (set b)) (x d))
  (= (mem20 x (tb2t690 (image d1 b1 (t2tb687 p) (t2tb12 w))))
  (exists ((a2 b))
  (and (mem2 a2 w) (mem23 (tb2t692 (Tuple2 b1 d1 (t2tb14 a2) (t2tb694 x)))
  p))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 b (tuple21 a c)))) (w (set b)) (x (tuple21 a c)))
  (= (mem10 x (tb2t129 (image (tuple2 a1 c1) b1 (t2tb248 p) (t2tb12 w))))
  (exists ((a2 b))
  (and (mem2 a2 w) (mem (tuple2 b1 (tuple2 a1 c1))
  (Tuple2 b1 (tuple2 a1 c1) (t2tb14 a2) (t2tb133 x)) (t2tb248 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 b (set (tuple21 b c))))) (w (set b))
  (x (set (tuple21 b c))))
  (= (mem9 x
  (tb2t130 (image (set1 (tuple2 b1 c1)) b1 (t2tb1138 p) (t2tb12 w))))
  (exists ((a2 b))
  (and (mem2 a2 w) (mem (tuple2 b1 (set1 (tuple2 b1 c1)))
  (Tuple2 b1 (set1 (tuple2 b1 c1)) (t2tb14 a2) (t2tb131 x)) (t2tb1138 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 b (tuple21 b c)))) (w (set b)) (x (tuple21 b c)))
  (= (mem8 x (tb2t131 (image (tuple2 b1 c1) b1 (t2tb1139 p) (t2tb12 w))))
  (exists ((a2 b))
  (and (mem2 a2 w) (mem (tuple2 b1 (tuple2 b1 c1))
  (Tuple2 b1 (tuple2 b1 c1) (t2tb14 a2) (t2tb134 x)) (t2tb1139 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 b c))) (w (set b)) (x c))
  (= (mem7 x (tb2t132 (image c1 b1 (t2tb131 p) (t2tb12 w))))
  (exists ((a2 b))
  (and (mem2 a2 w) (mem8 (tb2t134 (Tuple2 b1 c1 (t2tb14 a2) (t2tb135 x))) p))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 b (set (tuple21 a b))))) (w (set b))
  (x (set (tuple21 a b))))
  (= (mem4 x (tb2t10 (image (set1 (tuple2 a1 b1)) b1 (t2tb31 p) (t2tb12 w))))
  (exists ((a2 b))
  (and (mem2 a2 w) (mem (tuple2 b1 (set1 (tuple2 a1 b1)))
  (Tuple2 b1 (set1 (tuple2 a1 b1)) (t2tb14 a2) (t2tb11 x)) (t2tb31 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 b (tuple21 a b)))) (w (set b)) (x (tuple21 a b)))
  (= (mem3 x (tb2t11 (image (tuple2 a1 b1) b1 (t2tb34 p) (t2tb12 w))))
  (exists ((a2 b))
  (and (mem2 a2 w) (mem (tuple2 b1 (tuple2 a1 b1))
  (Tuple2 b1 (tuple2 a1 b1) (t2tb14 a2) (t2tb13 x)) (t2tb34 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 b b))) (w (set b)) (x b))
  (= (mem2 x (tb2t12 (image b1 b1 (t2tb35 p) (t2tb12 w))))
  (exists ((a2 b))
  (and (mem2 a2 w) (mem (tuple2 b1 b1) (Tuple2 b1 b1 (t2tb14 a2) (t2tb14 x))
  (t2tb35 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 b a))) (w (set b)) (x a))
  (= (mem1 x (tb2t1 (image a1 b1 (t2tb37 p) (t2tb12 w))))
  (exists ((a2 b))
  (and (mem2 a2 w) (mem (tuple2 b1 a1) (Tuple2 b1 a1 (t2tb14 a2) (t2tb2 x))
  (t2tb37 p)))))))

;; mem_image
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (w (set b)) (x uni))
  (= (mem b2 x (image b2 b1 p (t2tb12 w)))
  (exists ((a2 b))
  (and (mem2 a2 w) (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 a2) x) p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 a (tuple21 a d)))) (w (set a)) (x (tuple21 a d)))
  (= (mem32 x (tb2t903 (image (tuple2 a1 d1) a1 (t2tb2276 p) (t2tb1 w))))
  (exists ((a2 a))
  (and (mem1 a2 w) (mem (tuple2 a1 (tuple2 a1 d1))
  (Tuple2 a1 (tuple2 a1 d1) (t2tb2 a2) (t2tb904 x)) (t2tb2276 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 a (tuple21 b d)))) (w (set a)) (x (tuple21 b d)))
  (= (mem23 x (tb2t687 (image (tuple2 b1 d1) a1 (t2tb2056 p) (t2tb1 w))))
  (exists ((a2 a))
  (and (mem1 a2 w) (mem (tuple2 a1 (tuple2 b1 d1))
  (Tuple2 a1 (tuple2 b1 d1) (t2tb2 a2) (t2tb692 x)) (t2tb2056 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 a (set (tuple21 c d))))) (w (set a))
  (x (set (tuple21 c d))))
  (= (mem22 x
  (tb2t688 (image (set1 (tuple2 c1 d1)) a1 (t2tb899 p) (t2tb1 w))))
  (exists ((a2 a))
  (and (mem1 a2 w) (mem (tuple2 a1 (set1 (tuple2 c1 d1)))
  (Tuple2 a1 (set1 (tuple2 c1 d1)) (t2tb2 a2) (t2tb689 x)) (t2tb899 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 a (tuple21 c d)))) (w (set a)) (x (tuple21 c d)))
  (= (mem21 x (tb2t689 (image (tuple2 c1 d1) a1 (t2tb901 p) (t2tb1 w))))
  (exists ((a2 a))
  (and (mem1 a2 w) (mem (tuple2 a1 (tuple2 c1 d1))
  (Tuple2 a1 (tuple2 c1 d1) (t2tb2 a2) (t2tb693 x)) (t2tb901 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 a d))) (w (set a)) (x d))
  (= (mem20 x (tb2t690 (image d1 a1 (t2tb903 p) (t2tb1 w))))
  (exists ((a2 a))
  (and (mem1 a2 w) (mem32 (tb2t904 (Tuple2 a1 d1 (t2tb2 a2) (t2tb694 x))) p))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 a (tuple21 a c)))) (w (set a)) (x (tuple21 a c)))
  (= (mem10 x (tb2t129 (image (tuple2 a1 c1) a1 (t2tb256 p) (t2tb1 w))))
  (exists ((a2 a))
  (and (mem1 a2 w) (mem (tuple2 a1 (tuple2 a1 c1))
  (Tuple2 a1 (tuple2 a1 c1) (t2tb2 a2) (t2tb133 x)) (t2tb256 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 a (set (tuple21 b c))))) (w (set a))
  (x (set (tuple21 b c))))
  (= (mem9 x
  (tb2t130 (image (set1 (tuple2 b1 c1)) a1 (t2tb1141 p) (t2tb1 w))))
  (exists ((a2 a))
  (and (mem1 a2 w) (mem (tuple2 a1 (set1 (tuple2 b1 c1)))
  (Tuple2 a1 (set1 (tuple2 b1 c1)) (t2tb2 a2) (t2tb131 x)) (t2tb1141 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 a (tuple21 b c)))) (w (set a)) (x (tuple21 b c)))
  (= (mem8 x (tb2t131 (image (tuple2 b1 c1) a1 (t2tb261 p) (t2tb1 w))))
  (exists ((a2 a))
  (and (mem1 a2 w) (mem (tuple2 a1 (tuple2 b1 c1))
  (Tuple2 a1 (tuple2 b1 c1) (t2tb2 a2) (t2tb134 x)) (t2tb261 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 a c))) (w (set a)) (x c))
  (= (mem7 x (tb2t132 (image c1 a1 (t2tb129 p) (t2tb1 w))))
  (exists ((a2 a))
  (and (mem1 a2 w) (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 a2) (t2tb135 x))) p))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 a (set (tuple21 a b))))) (w (set a))
  (x (set (tuple21 a b))))
  (= (mem4 x (tb2t10 (image (set1 (tuple2 a1 b1)) a1 (t2tb39 p) (t2tb1 w))))
  (exists ((a2 a))
  (and (mem1 a2 w) (mem (tuple2 a1 (set1 (tuple2 a1 b1)))
  (Tuple2 a1 (set1 (tuple2 a1 b1)) (t2tb2 a2) (t2tb11 x)) (t2tb39 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 a (tuple21 a b)))) (w (set a)) (x (tuple21 a b)))
  (= (mem3 x (tb2t11 (image (tuple2 a1 b1) a1 (t2tb41 p) (t2tb1 w))))
  (exists ((a2 a))
  (and (mem1 a2 w) (mem (tuple2 a1 (tuple2 a1 b1))
  (Tuple2 a1 (tuple2 a1 b1) (t2tb2 a2) (t2tb13 x)) (t2tb41 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 a b))) (w (set a)) (x b))
  (= (mem2 x (tb2t12 (image b1 a1 (t2tb11 p) (t2tb1 w))))
  (exists ((a2 a))
  (and (mem1 a2 w) (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 a2) (t2tb14 x))) p))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 a a))) (w (set a)) (x a))
  (= (mem1 x (tb2t1 (image a1 a1 (t2tb4 p) (t2tb1 w))))
  (exists ((a2 a))
  (and (mem1 a2 w) (mem (tuple2 a1 a1) (Tuple2 a1 a1 (t2tb2 a2) (t2tb2 x))
  (t2tb4 p)))))))

;; mem_image
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (w (set a)) (x uni))
  (= (mem b2 x (image b2 a1 p (t2tb1 w)))
  (exists ((a2 a))
  (and (mem1 a2 w) (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 a2) x) p)))))))

;; mem_image
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((p uni) (w uni) (x uni))
  (and
  (=> (mem b2 x (image b2 a2 p w))
  (exists ((a3 uni))
  (and (sort a2 a3)
  (and (mem a2 a3 w) (mem (tuple2 a2 b2) (Tuple2 a2 b2 a3 x) p)))))
  (=>
  (exists ((a3 uni))
  (and (mem a2 a3 w) (mem (tuple2 a2 b2) (Tuple2 a2 b2 a3 x) p))) (mem b2 x
  (image b2 a2 p w)))))))

(declare-fun infix_lspl (ty ty uni uni) uni)

;; infix <+_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (tuple2 a2 b2))
  (infix_lspl b2 a2 x x1)))))

;; mem_overriding
  (assert
  (forall ((b2 ty))
  (forall ((q uni) (p uni) (x (tuple21 a d)) (y uni))
  (= (mem (tuple2 (tuple2 a1 d1) b2) (Tuple2 (tuple2 a1 d1) b2 (t2tb904 x) y)
  (infix_lspl b2 (tuple2 a1 d1) q p))
  (or
  (and (mem (tuple2 (tuple2 a1 d1) b2)
  (Tuple2 (tuple2 a1 d1) b2 (t2tb904 x) y) q)
  (not (mem32 x (tb2t903 (dom b2 (tuple2 a1 d1) p))))) (mem
  (tuple2 (tuple2 a1 d1) b2) (Tuple2 (tuple2 a1 d1) b2 (t2tb904 x) y) p))))))

;; mem_overriding
  (assert
  (forall ((b2 ty))
  (forall ((q uni) (p uni) (x (tuple21 b d)) (y uni))
  (= (mem (tuple2 (tuple2 b1 d1) b2) (Tuple2 (tuple2 b1 d1) b2 (t2tb692 x) y)
  (infix_lspl b2 (tuple2 b1 d1) q p))
  (or
  (and (mem (tuple2 (tuple2 b1 d1) b2)
  (Tuple2 (tuple2 b1 d1) b2 (t2tb692 x) y) q)
  (not (mem23 x (tb2t687 (dom b2 (tuple2 b1 d1) p))))) (mem
  (tuple2 (tuple2 b1 d1) b2) (Tuple2 (tuple2 b1 d1) b2 (t2tb692 x) y) p))))))

;; mem_overriding
  (assert
  (forall ((b2 ty))
  (forall ((q uni) (p uni) (x (set (tuple21 c d))) (y uni))
  (= (mem (tuple2 (set1 (tuple2 c1 d1)) b2)
  (Tuple2 (set1 (tuple2 c1 d1)) b2 (t2tb689 x) y)
  (infix_lspl b2 (set1 (tuple2 c1 d1)) q p))
  (or
  (and (mem (tuple2 (set1 (tuple2 c1 d1)) b2)
  (Tuple2 (set1 (tuple2 c1 d1)) b2 (t2tb689 x) y) q)
  (not (mem22 x (tb2t688 (dom b2 (set1 (tuple2 c1 d1)) p))))) (mem
  (tuple2 (set1 (tuple2 c1 d1)) b2)
  (Tuple2 (set1 (tuple2 c1 d1)) b2 (t2tb689 x) y) p))))))

;; mem_overriding
  (assert
  (forall ((b2 ty))
  (forall ((q uni) (p uni) (x (tuple21 c d)) (y uni))
  (= (mem (tuple2 (tuple2 c1 d1) b2) (Tuple2 (tuple2 c1 d1) b2 (t2tb693 x) y)
  (infix_lspl b2 (tuple2 c1 d1) q p))
  (or
  (and (mem (tuple2 (tuple2 c1 d1) b2)
  (Tuple2 (tuple2 c1 d1) b2 (t2tb693 x) y) q)
  (not (mem21 x (tb2t689 (dom b2 (tuple2 c1 d1) p))))) (mem
  (tuple2 (tuple2 c1 d1) b2) (Tuple2 (tuple2 c1 d1) b2 (t2tb693 x) y) p))))))

;; mem_overriding
  (assert
  (forall ((b2 ty))
  (forall ((q uni) (p uni) (x d) (y uni))
  (= (mem (tuple2 d1 b2) (Tuple2 d1 b2 (t2tb694 x) y) (infix_lspl b2 d1 q p))
  (or
  (and (mem (tuple2 d1 b2) (Tuple2 d1 b2 (t2tb694 x) y) q)
  (not (mem20 x (tb2t690 (dom b2 d1 p))))) (mem (tuple2 d1 b2)
  (Tuple2 d1 b2 (t2tb694 x) y) p))))))

;; mem_overriding
  (assert
  (forall ((b2 ty))
  (forall ((q uni) (p uni) (x (tuple21 a c)) (y uni))
  (= (mem (tuple2 (tuple2 a1 c1) b2) (Tuple2 (tuple2 a1 c1) b2 (t2tb133 x) y)
  (infix_lspl b2 (tuple2 a1 c1) q p))
  (or
  (and (mem (tuple2 (tuple2 a1 c1) b2)
  (Tuple2 (tuple2 a1 c1) b2 (t2tb133 x) y) q)
  (not (mem10 x (tb2t129 (dom b2 (tuple2 a1 c1) p))))) (mem
  (tuple2 (tuple2 a1 c1) b2) (Tuple2 (tuple2 a1 c1) b2 (t2tb133 x) y) p))))))

;; mem_overriding
  (assert
  (forall ((b2 ty))
  (forall ((q uni) (p uni) (x (set (tuple21 b c))) (y uni))
  (= (mem (tuple2 (set1 (tuple2 b1 c1)) b2)
  (Tuple2 (set1 (tuple2 b1 c1)) b2 (t2tb131 x) y)
  (infix_lspl b2 (set1 (tuple2 b1 c1)) q p))
  (or
  (and (mem (tuple2 (set1 (tuple2 b1 c1)) b2)
  (Tuple2 (set1 (tuple2 b1 c1)) b2 (t2tb131 x) y) q)
  (not (mem9 x (tb2t130 (dom b2 (set1 (tuple2 b1 c1)) p))))) (mem
  (tuple2 (set1 (tuple2 b1 c1)) b2)
  (Tuple2 (set1 (tuple2 b1 c1)) b2 (t2tb131 x) y) p))))))

;; mem_overriding
  (assert
  (forall ((b2 ty))
  (forall ((q uni) (p uni) (x (tuple21 b c)) (y uni))
  (= (mem (tuple2 (tuple2 b1 c1) b2) (Tuple2 (tuple2 b1 c1) b2 (t2tb134 x) y)
  (infix_lspl b2 (tuple2 b1 c1) q p))
  (or
  (and (mem (tuple2 (tuple2 b1 c1) b2)
  (Tuple2 (tuple2 b1 c1) b2 (t2tb134 x) y) q)
  (not (mem8 x (tb2t131 (dom b2 (tuple2 b1 c1) p))))) (mem
  (tuple2 (tuple2 b1 c1) b2) (Tuple2 (tuple2 b1 c1) b2 (t2tb134 x) y) p))))))

;; mem_overriding
  (assert
  (forall ((q (set (tuple21 c d))) (p (set (tuple21 c d))) (x c) (y d))
  (= (mem21 (tb2t693 (Tuple2 c1 d1 (t2tb135 x) (t2tb694 y)))
  (tb2t689 (infix_lspl d1 c1 (t2tb689 q) (t2tb689 p))))
  (or
  (and (mem21 (tb2t693 (Tuple2 c1 d1 (t2tb135 x) (t2tb694 y))) q)
  (not (mem7 x (tb2t132 (dom d1 c1 (t2tb689 p)))))) (mem21
  (tb2t693 (Tuple2 c1 d1 (t2tb135 x) (t2tb694 y))) p)))))

;; mem_overriding
  (assert
  (forall ((b2 ty))
  (forall ((q uni) (p uni) (x c) (y uni))
  (= (mem (tuple2 c1 b2) (Tuple2 c1 b2 (t2tb135 x) y) (infix_lspl b2 c1 q p))
  (or
  (and (mem (tuple2 c1 b2) (Tuple2 c1 b2 (t2tb135 x) y) q)
  (not (mem7 x (tb2t132 (dom b2 c1 p))))) (mem (tuple2 c1 b2)
  (Tuple2 c1 b2 (t2tb135 x) y) p))))))

;; mem_overriding
  (assert
  (forall ((b2 ty))
  (forall ((q uni) (p uni) (x (set (tuple21 a b))) (y uni))
  (= (mem (tuple2 (set1 (tuple2 a1 b1)) b2)
  (Tuple2 (set1 (tuple2 a1 b1)) b2 (t2tb11 x) y)
  (infix_lspl b2 (set1 (tuple2 a1 b1)) q p))
  (or
  (and (mem (tuple2 (set1 (tuple2 a1 b1)) b2)
  (Tuple2 (set1 (tuple2 a1 b1)) b2 (t2tb11 x) y) q)
  (not (mem4 x (tb2t10 (dom b2 (set1 (tuple2 a1 b1)) p))))) (mem
  (tuple2 (set1 (tuple2 a1 b1)) b2)
  (Tuple2 (set1 (tuple2 a1 b1)) b2 (t2tb11 x) y) p))))))

;; mem_overriding
  (assert
  (forall ((b2 ty))
  (forall ((q uni) (p uni) (x (tuple21 a b)) (y uni))
  (= (mem (tuple2 (tuple2 a1 b1) b2) (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) y)
  (infix_lspl b2 (tuple2 a1 b1) q p))
  (or
  (and (mem (tuple2 (tuple2 a1 b1) b2)
  (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) y) q)
  (not (mem3 x (tb2t11 (dom b2 (tuple2 a1 b1) p))))) (mem
  (tuple2 (tuple2 a1 b1) b2) (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) y) p))))))

;; mem_overriding
  (assert
  (forall ((q (set (tuple21 b d))) (p (set (tuple21 b d))) (x b) (y d))
  (= (mem23 (tb2t692 (Tuple2 b1 d1 (t2tb14 x) (t2tb694 y)))
  (tb2t687 (infix_lspl d1 b1 (t2tb687 q) (t2tb687 p))))
  (or
  (and (mem23 (tb2t692 (Tuple2 b1 d1 (t2tb14 x) (t2tb694 y))) q)
  (not (mem2 x (tb2t12 (dom d1 b1 (t2tb687 p)))))) (mem23
  (tb2t692 (Tuple2 b1 d1 (t2tb14 x) (t2tb694 y))) p)))))

;; mem_overriding
  (assert
  (forall ((q (set (tuple21 b c))) (p (set (tuple21 b c))) (x b) (y c))
  (= (mem8 (tb2t134 (Tuple2 b1 c1 (t2tb14 x) (t2tb135 y)))
  (tb2t131 (infix_lspl c1 b1 (t2tb131 q) (t2tb131 p))))
  (or
  (and (mem8 (tb2t134 (Tuple2 b1 c1 (t2tb14 x) (t2tb135 y))) q)
  (not (mem2 x (tb2t12 (dom c1 b1 (t2tb131 p)))))) (mem8
  (tb2t134 (Tuple2 b1 c1 (t2tb14 x) (t2tb135 y))) p)))))

;; mem_overriding
  (assert
  (forall ((b2 ty))
  (forall ((q uni) (p uni) (x b) (y uni))
  (= (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) y) (infix_lspl b2 b1 q p))
  (or
  (and (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) y) q)
  (not (mem2 x (tb2t12 (dom b2 b1 p))))) (mem (tuple2 b1 b2)
  (Tuple2 b1 b2 (t2tb14 x) y) p))))))

;; mem_overriding
  (assert
  (forall ((q (set (tuple21 a d))) (p (set (tuple21 a d))) (x a) (y d))
  (= (mem32 (tb2t904 (Tuple2 a1 d1 (t2tb2 x) (t2tb694 y)))
  (tb2t903 (infix_lspl d1 a1 (t2tb903 q) (t2tb903 p))))
  (or
  (and (mem32 (tb2t904 (Tuple2 a1 d1 (t2tb2 x) (t2tb694 y))) q)
  (not (mem1 x (tb2t1 (dom d1 a1 (t2tb903 p)))))) (mem32
  (tb2t904 (Tuple2 a1 d1 (t2tb2 x) (t2tb694 y))) p)))))

;; mem_overriding
  (assert
  (forall ((q (set (tuple21 a c))) (p (set (tuple21 a c))) (x a) (y c))
  (= (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y)))
  (tb2t129 (infix_lspl c1 a1 (t2tb129 q) (t2tb129 p))))
  (or
  (and (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y))) q)
  (not (mem1 x (tb2t1 (dom c1 a1 (t2tb129 p)))))) (mem10
  (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y))) p)))))

;; mem_overriding
  (assert
  (forall ((q (set (tuple21 a b))) (p (set (tuple21 a b))) (x a) (y b))
  (= (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y)))
  (tb2t11 (infix_lspl b1 a1 (t2tb11 q) (t2tb11 p))))
  (or
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y))) q)
  (not (mem1 x (tb2t1 (dom b1 a1 (t2tb11 p)))))) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y))) p)))))

;; mem_overriding
  (assert
  (forall ((b2 ty))
  (forall ((q uni) (p uni) (x a) (y uni))
  (= (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) y) (infix_lspl b2 a1 q p))
  (or
  (and (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) y) q)
  (not (mem1 x (tb2t1 (dom b2 a1 p))))) (mem (tuple2 a1 b2)
  (Tuple2 a1 b2 (t2tb2 x) y) p))))))

;; mem_overriding
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((q uni) (p uni) (x uni) (y uni))
  (= (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) (infix_lspl b2 a2 q p))
  (or
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) q)
  (not (mem a2 x (dom b2 a2 p)))) (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) p))))))

(declare-fun direct_product (ty ty ty uni uni) uni)

;; direct_product_sort
  (assert
  (forall ((a2 ty) (b2 ty) (c2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (tuple2 a2 (tuple2 b2 c2)))
  (direct_product c2 b2 a2 x x1)))))

;; mem_direct_product
  (assert
  (forall ((b2 ty))
  (forall ((f uni) (g (set (tuple21 c d))) (x c) (y uni) (z d))
  (= (mem (tuple2 c1 (tuple2 b2 d1))
  (Tuple2 c1 (tuple2 b2 d1) (t2tb135 x) (Tuple2 b2 d1 y (t2tb694 z)))
  (direct_product d1 b2 c1 f (t2tb689 g)))
  (and (mem (tuple2 c1 b2) (Tuple2 c1 b2 (t2tb135 x) y) f) (mem21
  (tb2t693 (Tuple2 c1 d1 (t2tb135 x) (t2tb694 z))) g))))))

(declare-fun t2tb1016 ((set (tuple21 c (tuple21 d d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 c (tuple21 d d))))) (sort
  (set1 (tuple2 c1 (tuple2 d1 d1))) (t2tb1016 x))))

(declare-fun tb2t1016 (uni) (set (tuple21 c (tuple21 d d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 c (tuple21 d d)))))
  (! (= (tb2t1016 (t2tb1016 i)) i) :pattern ((t2tb1016 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 c1 (tuple2 d1 d1))) j)
     (= (t2tb1016 (tb2t1016 j)) j)) :pattern ((t2tb1016 (tb2t1016 j))) )))

(declare-fun t2tb1017 ((tuple21 c (tuple21 d d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 c (tuple21 d d)))) (sort (tuple2 c1 (tuple2 d1 d1))
  (t2tb1017 x))))

(declare-fun tb2t1017 (uni) (tuple21 c (tuple21 d d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 c (tuple21 d d))))
  (! (= (tb2t1017 (t2tb1017 i)) i) :pattern ((t2tb1017 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 c1 (tuple2 d1 d1)) j) (= (t2tb1017 (tb2t1017 j)) j)) :pattern (
  (t2tb1017 (tb2t1017 j))) )))

;; mem_direct_product
  (assert
  (forall ((f (set (tuple21 c d))) (g (set (tuple21 c d))) (x c) (y d) (z d))
  (= (mem (tuple2 c1 (tuple2 d1 d1))
  (Tuple2 c1 (tuple2 d1 d1) (t2tb135 x)
  (Tuple2 d1 d1 (t2tb694 y) (t2tb694 z)))
  (direct_product d1 d1 c1 (t2tb689 f) (t2tb689 g)))
  (and (mem21 (tb2t693 (Tuple2 c1 d1 (t2tb135 x) (t2tb694 y))) f) (mem21
  (tb2t693 (Tuple2 c1 d1 (t2tb135 x) (t2tb694 z))) g)))))

;; mem_direct_product
  (assert
  (forall ((c2 ty))
  (forall ((f (set (tuple21 c d))) (g uni) (x c) (y d) (z uni))
  (= (mem (tuple2 c1 (tuple2 d1 c2))
  (Tuple2 c1 (tuple2 d1 c2) (t2tb135 x) (Tuple2 d1 c2 (t2tb694 y) z))
  (direct_product c2 d1 c1 (t2tb689 f) g))
  (and (mem21 (tb2t693 (Tuple2 c1 d1 (t2tb135 x) (t2tb694 y))) f) (mem
  (tuple2 c1 c2) (Tuple2 c1 c2 (t2tb135 x) z) g))))))

;; mem_direct_product
  (assert
  (forall ((b2 ty))
  (forall ((f uni) (g (set (tuple21 b d))) (x b) (y uni) (z d))
  (= (mem (tuple2 b1 (tuple2 b2 d1))
  (Tuple2 b1 (tuple2 b2 d1) (t2tb14 x) (Tuple2 b2 d1 y (t2tb694 z)))
  (direct_product d1 b2 b1 f (t2tb687 g)))
  (and (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) y) f) (mem23
  (tb2t692 (Tuple2 b1 d1 (t2tb14 x) (t2tb694 z))) g))))))

;; mem_direct_product
  (assert
  (forall ((b2 ty))
  (forall ((f uni) (g (set (tuple21 b c))) (x b) (y uni) (z c))
  (= (mem (tuple2 b1 (tuple2 b2 c1))
  (Tuple2 b1 (tuple2 b2 c1) (t2tb14 x) (Tuple2 b2 c1 y (t2tb135 z)))
  (direct_product c1 b2 b1 f (t2tb131 g)))
  (and (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) y) f) (mem8
  (tb2t134 (Tuple2 b1 c1 (t2tb14 x) (t2tb135 z))) g))))))

(declare-fun t2tb2076 ((set (tuple21 b (tuple21 d d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 b (tuple21 d d))))) (sort
  (set1 (tuple2 b1 (tuple2 d1 d1))) (t2tb2076 x))))

(declare-fun tb2t2076 (uni) (set (tuple21 b (tuple21 d d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 b (tuple21 d d)))))
  (! (= (tb2t2076 (t2tb2076 i)) i) :pattern ((t2tb2076 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 b1 (tuple2 d1 d1))) j)
     (= (t2tb2076 (tb2t2076 j)) j)) :pattern ((t2tb2076 (tb2t2076 j))) )))

(declare-fun t2tb2077 ((tuple21 b (tuple21 d d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 b (tuple21 d d)))) (sort (tuple2 b1 (tuple2 d1 d1))
  (t2tb2077 x))))

(declare-fun tb2t2077 (uni) (tuple21 b (tuple21 d d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 b (tuple21 d d))))
  (! (= (tb2t2077 (t2tb2077 i)) i) :pattern ((t2tb2077 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 b1 (tuple2 d1 d1)) j) (= (t2tb2077 (tb2t2077 j)) j)) :pattern (
  (t2tb2077 (tb2t2077 j))) )))

;; mem_direct_product
  (assert
  (forall ((f (set (tuple21 b d))) (g (set (tuple21 b d))) (x b) (y d) (z d))
  (= (mem (tuple2 b1 (tuple2 d1 d1))
  (Tuple2 b1 (tuple2 d1 d1) (t2tb14 x)
  (Tuple2 d1 d1 (t2tb694 y) (t2tb694 z)))
  (direct_product d1 d1 b1 (t2tb687 f) (t2tb687 g)))
  (and (mem23 (tb2t692 (Tuple2 b1 d1 (t2tb14 x) (t2tb694 y))) f) (mem23
  (tb2t692 (Tuple2 b1 d1 (t2tb14 x) (t2tb694 z))) g)))))

(declare-fun t2tb2320 ((set (tuple21 b (tuple21 d c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 b (tuple21 d c))))) (sort
  (set1 (tuple2 b1 (tuple2 d1 c1))) (t2tb2320 x))))

(declare-fun tb2t2320 (uni) (set (tuple21 b (tuple21 d c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 b (tuple21 d c)))))
  (! (= (tb2t2320 (t2tb2320 i)) i) :pattern ((t2tb2320 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 b1 (tuple2 d1 c1))) j)
     (= (t2tb2320 (tb2t2320 j)) j)) :pattern ((t2tb2320 (tb2t2320 j))) )))

(declare-fun t2tb2321 ((tuple21 b (tuple21 d c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 b (tuple21 d c)))) (sort (tuple2 b1 (tuple2 d1 c1))
  (t2tb2321 x))))

(declare-fun tb2t2321 (uni) (tuple21 b (tuple21 d c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 b (tuple21 d c))))
  (! (= (tb2t2321 (t2tb2321 i)) i) :pattern ((t2tb2321 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 b1 (tuple2 d1 c1)) j) (= (t2tb2321 (tb2t2321 j)) j)) :pattern (
  (t2tb2321 (tb2t2321 j))) )))

;; mem_direct_product
  (assert
  (forall ((f (set (tuple21 b d))) (g (set (tuple21 b c))) (x b) (y d) (z c))
  (= (mem (tuple2 b1 (tuple2 d1 c1))
  (Tuple2 b1 (tuple2 d1 c1) (t2tb14 x)
  (Tuple2 d1 c1 (t2tb694 y) (t2tb135 z)))
  (direct_product c1 d1 b1 (t2tb687 f) (t2tb131 g)))
  (and (mem23 (tb2t692 (Tuple2 b1 d1 (t2tb14 x) (t2tb694 y))) f) (mem8
  (tb2t134 (Tuple2 b1 c1 (t2tb14 x) (t2tb135 z))) g)))))

;; mem_direct_product
  (assert
  (forall ((c2 ty))
  (forall ((f (set (tuple21 b d))) (g uni) (x b) (y d) (z uni))
  (= (mem (tuple2 b1 (tuple2 d1 c2))
  (Tuple2 b1 (tuple2 d1 c2) (t2tb14 x) (Tuple2 d1 c2 (t2tb694 y) z))
  (direct_product c2 d1 b1 (t2tb687 f) g))
  (and (mem23 (tb2t692 (Tuple2 b1 d1 (t2tb14 x) (t2tb694 y))) f) (mem
  (tuple2 b1 c2) (Tuple2 b1 c2 (t2tb14 x) z) g))))))

;; mem_direct_product
  (assert
  (forall ((f (set (tuple21 b c))) (g (set (tuple21 b d))) (x b) (y c) (z d))
  (= (mem (tuple2 b1 (tuple2 c1 d1))
  (Tuple2 b1 (tuple2 c1 d1) (t2tb14 x)
  (Tuple2 c1 d1 (t2tb135 y) (t2tb694 z)))
  (direct_product d1 c1 b1 (t2tb131 f) (t2tb687 g)))
  (and (mem8 (tb2t134 (Tuple2 b1 c1 (t2tb14 x) (t2tb135 y))) f) (mem23
  (tb2t692 (Tuple2 b1 d1 (t2tb14 x) (t2tb694 z))) g)))))

(declare-fun t2tb1170 ((set (tuple21 b (tuple21 c c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 b (tuple21 c c))))) (sort
  (set1 (tuple2 b1 (tuple2 c1 c1))) (t2tb1170 x))))

(declare-fun tb2t1170 (uni) (set (tuple21 b (tuple21 c c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 b (tuple21 c c)))))
  (! (= (tb2t1170 (t2tb1170 i)) i) :pattern ((t2tb1170 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 b1 (tuple2 c1 c1))) j)
     (= (t2tb1170 (tb2t1170 j)) j)) :pattern ((t2tb1170 (tb2t1170 j))) )))

(declare-fun t2tb1171 ((tuple21 b (tuple21 c c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 b (tuple21 c c)))) (sort (tuple2 b1 (tuple2 c1 c1))
  (t2tb1171 x))))

(declare-fun tb2t1171 (uni) (tuple21 b (tuple21 c c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 b (tuple21 c c))))
  (! (= (tb2t1171 (t2tb1171 i)) i) :pattern ((t2tb1171 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 b1 (tuple2 c1 c1)) j) (= (t2tb1171 (tb2t1171 j)) j)) :pattern (
  (t2tb1171 (tb2t1171 j))) )))

;; mem_direct_product
  (assert
  (forall ((f (set (tuple21 b c))) (g (set (tuple21 b c))) (x b) (y c) (z c))
  (= (mem (tuple2 b1 (tuple2 c1 c1))
  (Tuple2 b1 (tuple2 c1 c1) (t2tb14 x)
  (Tuple2 c1 c1 (t2tb135 y) (t2tb135 z)))
  (direct_product c1 c1 b1 (t2tb131 f) (t2tb131 g)))
  (and (mem8 (tb2t134 (Tuple2 b1 c1 (t2tb14 x) (t2tb135 y))) f) (mem8
  (tb2t134 (Tuple2 b1 c1 (t2tb14 x) (t2tb135 z))) g)))))

;; mem_direct_product
  (assert
  (forall ((c2 ty))
  (forall ((f (set (tuple21 b c))) (g uni) (x b) (y c) (z uni))
  (= (mem (tuple2 b1 (tuple2 c1 c2))
  (Tuple2 b1 (tuple2 c1 c2) (t2tb14 x) (Tuple2 c1 c2 (t2tb135 y) z))
  (direct_product c2 c1 b1 (t2tb131 f) g))
  (and (mem8 (tb2t134 (Tuple2 b1 c1 (t2tb14 x) (t2tb135 y))) f) (mem
  (tuple2 b1 c2) (Tuple2 b1 c2 (t2tb14 x) z) g))))))

;; mem_direct_product
  (assert
  (forall ((b2 ty))
  (forall ((f uni) (g (set (tuple21 a d))) (x a) (y uni) (z d))
  (= (mem (tuple2 a1 (tuple2 b2 d1))
  (Tuple2 a1 (tuple2 b2 d1) (t2tb2 x) (Tuple2 b2 d1 y (t2tb694 z)))
  (direct_product d1 b2 a1 f (t2tb903 g)))
  (and (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) y) f) (mem32
  (tb2t904 (Tuple2 a1 d1 (t2tb2 x) (t2tb694 z))) g))))))

;; mem_direct_product
  (assert
  (forall ((b2 ty))
  (forall ((f uni) (g (set (tuple21 a c))) (x a) (y uni) (z c))
  (= (mem (tuple2 a1 (tuple2 b2 c1))
  (Tuple2 a1 (tuple2 b2 c1) (t2tb2 x) (Tuple2 b2 c1 y (t2tb135 z)))
  (direct_product c1 b2 a1 f (t2tb129 g)))
  (and (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) y) f) (mem10
  (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 z))) g))))))

;; mem_direct_product
  (assert
  (forall ((b2 ty))
  (forall ((f uni) (g (set (tuple21 a b))) (x a) (y uni) (z b))
  (= (mem (tuple2 a1 (tuple2 b2 b1))
  (Tuple2 a1 (tuple2 b2 b1) (t2tb2 x) (Tuple2 b2 b1 y (t2tb14 z)))
  (direct_product b1 b2 a1 f (t2tb11 g)))
  (and (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) y) f) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 z))) g))))))

(declare-fun t2tb2322 ((set (tuple21 a (tuple21 d d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (tuple21 d d))))) (sort
  (set1 (tuple2 a1 (tuple2 d1 d1))) (t2tb2322 x))))

(declare-fun tb2t2322 (uni) (set (tuple21 a (tuple21 d d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (tuple21 d d)))))
  (! (= (tb2t2322 (t2tb2322 i)) i) :pattern ((t2tb2322 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (tuple2 d1 d1))) j)
     (= (t2tb2322 (tb2t2322 j)) j)) :pattern ((t2tb2322 (tb2t2322 j))) )))

(declare-fun t2tb2323 ((tuple21 a (tuple21 d d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (tuple21 d d)))) (sort (tuple2 a1 (tuple2 d1 d1))
  (t2tb2323 x))))

(declare-fun tb2t2323 (uni) (tuple21 a (tuple21 d d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (tuple21 d d))))
  (! (= (tb2t2323 (t2tb2323 i)) i) :pattern ((t2tb2323 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (tuple2 d1 d1)) j) (= (t2tb2323 (tb2t2323 j)) j)) :pattern (
  (t2tb2323 (tb2t2323 j))) )))

;; mem_direct_product
  (assert
  (forall ((f (set (tuple21 a d))) (g (set (tuple21 a d))) (x a) (y d) (z d))
  (= (mem (tuple2 a1 (tuple2 d1 d1))
  (Tuple2 a1 (tuple2 d1 d1) (t2tb2 x) (Tuple2 d1 d1 (t2tb694 y) (t2tb694 z)))
  (direct_product d1 d1 a1 (t2tb903 f) (t2tb903 g)))
  (and (mem32 (tb2t904 (Tuple2 a1 d1 (t2tb2 x) (t2tb694 y))) f) (mem32
  (tb2t904 (Tuple2 a1 d1 (t2tb2 x) (t2tb694 z))) g)))))

(declare-fun t2tb2324 ((tuple21 a (tuple21 d c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (tuple21 d c)))) (sort (tuple2 a1 (tuple2 d1 c1))
  (t2tb2324 x))))

(declare-fun tb2t2324 (uni) (tuple21 a (tuple21 d c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (tuple21 d c))))
  (! (= (tb2t2324 (t2tb2324 i)) i) :pattern ((t2tb2324 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (tuple2 d1 c1)) j) (= (t2tb2324 (tb2t2324 j)) j)) :pattern (
  (t2tb2324 (tb2t2324 j))) )))

(declare-fun t2tb2325 ((set (tuple21 a (tuple21 d c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (tuple21 d c))))) (sort
  (set1 (tuple2 a1 (tuple2 d1 c1))) (t2tb2325 x))))

(declare-fun tb2t2325 (uni) (set (tuple21 a (tuple21 d c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (tuple21 d c)))))
  (! (= (tb2t2325 (t2tb2325 i)) i) :pattern ((t2tb2325 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (tuple2 d1 c1))) j)
     (= (t2tb2325 (tb2t2325 j)) j)) :pattern ((t2tb2325 (tb2t2325 j))) )))

;; mem_direct_product
  (assert
  (forall ((f (set (tuple21 a d))) (g (set (tuple21 a c))) (x a) (y d) (z c))
  (= (mem (tuple2 a1 (tuple2 d1 c1))
  (Tuple2 a1 (tuple2 d1 c1) (t2tb2 x) (Tuple2 d1 c1 (t2tb694 y) (t2tb135 z)))
  (direct_product c1 d1 a1 (t2tb903 f) (t2tb129 g)))
  (and (mem32 (tb2t904 (Tuple2 a1 d1 (t2tb2 x) (t2tb694 y))) f) (mem10
  (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 z))) g)))))

(declare-fun t2tb2326 ((set (tuple21 a (tuple21 d b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (tuple21 d b))))) (sort
  (set1 (tuple2 a1 (tuple2 d1 b1))) (t2tb2326 x))))

(declare-fun tb2t2326 (uni) (set (tuple21 a (tuple21 d b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (tuple21 d b)))))
  (! (= (tb2t2326 (t2tb2326 i)) i) :pattern ((t2tb2326 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (tuple2 d1 b1))) j)
     (= (t2tb2326 (tb2t2326 j)) j)) :pattern ((t2tb2326 (tb2t2326 j))) )))

(declare-fun t2tb2327 ((tuple21 a (tuple21 d b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (tuple21 d b)))) (sort (tuple2 a1 (tuple2 d1 b1))
  (t2tb2327 x))))

(declare-fun tb2t2327 (uni) (tuple21 a (tuple21 d b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (tuple21 d b))))
  (! (= (tb2t2327 (t2tb2327 i)) i) :pattern ((t2tb2327 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (tuple2 d1 b1)) j) (= (t2tb2327 (tb2t2327 j)) j)) :pattern (
  (t2tb2327 (tb2t2327 j))) )))

;; mem_direct_product
  (assert
  (forall ((f (set (tuple21 a d))) (g (set (tuple21 a b))) (x a) (y d) (z b))
  (= (mem (tuple2 a1 (tuple2 d1 b1))
  (Tuple2 a1 (tuple2 d1 b1) (t2tb2 x) (Tuple2 d1 b1 (t2tb694 y) (t2tb14 z)))
  (direct_product b1 d1 a1 (t2tb903 f) (t2tb11 g)))
  (and (mem32 (tb2t904 (Tuple2 a1 d1 (t2tb2 x) (t2tb694 y))) f) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 z))) g)))))

;; mem_direct_product
  (assert
  (forall ((c2 ty))
  (forall ((f (set (tuple21 a d))) (g uni) (x a) (y d) (z uni))
  (= (mem (tuple2 a1 (tuple2 d1 c2))
  (Tuple2 a1 (tuple2 d1 c2) (t2tb2 x) (Tuple2 d1 c2 (t2tb694 y) z))
  (direct_product c2 d1 a1 (t2tb903 f) g))
  (and (mem32 (tb2t904 (Tuple2 a1 d1 (t2tb2 x) (t2tb694 y))) f) (mem
  (tuple2 a1 c2) (Tuple2 a1 c2 (t2tb2 x) z) g))))))

;; mem_direct_product
  (assert
  (forall ((f (set (tuple21 a c))) (g (set (tuple21 a d))) (x a) (y c) (z d))
  (= (mem (tuple2 a1 (tuple2 c1 d1))
  (Tuple2 a1 (tuple2 c1 d1) (t2tb2 x) (Tuple2 c1 d1 (t2tb135 y) (t2tb694 z)))
  (direct_product d1 c1 a1 (t2tb129 f) (t2tb903 g)))
  (and (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y))) f) (mem32
  (tb2t904 (Tuple2 a1 d1 (t2tb2 x) (t2tb694 z))) g)))))

(declare-fun t2tb330 ((set (tuple21 a (tuple21 c c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (tuple21 c c))))) (sort
  (set1 (tuple2 a1 (tuple2 c1 c1))) (t2tb330 x))))

(declare-fun tb2t330 (uni) (set (tuple21 a (tuple21 c c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (tuple21 c c)))))
  (! (= (tb2t330 (t2tb330 i)) i) :pattern ((t2tb330 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (tuple2 c1 c1))) j)
     (= (t2tb330 (tb2t330 j)) j)) :pattern ((t2tb330 (tb2t330 j))) )))

(declare-fun t2tb331 ((tuple21 a (tuple21 c c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (tuple21 c c)))) (sort (tuple2 a1 (tuple2 c1 c1))
  (t2tb331 x))))

(declare-fun tb2t331 (uni) (tuple21 a (tuple21 c c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (tuple21 c c))))
  (! (= (tb2t331 (t2tb331 i)) i) :pattern ((t2tb331 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (tuple2 c1 c1)) j) (= (t2tb331 (tb2t331 j)) j)) :pattern (
  (t2tb331 (tb2t331 j))) )))

;; mem_direct_product
  (assert
  (forall ((f (set (tuple21 a c))) (g (set (tuple21 a c))) (x a) (y c) (z c))
  (= (mem (tuple2 a1 (tuple2 c1 c1))
  (Tuple2 a1 (tuple2 c1 c1) (t2tb2 x) (Tuple2 c1 c1 (t2tb135 y) (t2tb135 z)))
  (direct_product c1 c1 a1 (t2tb129 f) (t2tb129 g)))
  (and (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y))) f) (mem10
  (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 z))) g)))))

(declare-fun t2tb332 ((set (tuple21 a (tuple21 c b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (tuple21 c b))))) (sort
  (set1 (tuple2 a1 (tuple2 c1 b1))) (t2tb332 x))))

(declare-fun tb2t332 (uni) (set (tuple21 a (tuple21 c b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (tuple21 c b)))))
  (! (= (tb2t332 (t2tb332 i)) i) :pattern ((t2tb332 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (tuple2 c1 b1))) j)
     (= (t2tb332 (tb2t332 j)) j)) :pattern ((t2tb332 (tb2t332 j))) )))

(declare-fun t2tb333 ((tuple21 a (tuple21 c b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (tuple21 c b)))) (sort (tuple2 a1 (tuple2 c1 b1))
  (t2tb333 x))))

(declare-fun tb2t333 (uni) (tuple21 a (tuple21 c b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (tuple21 c b))))
  (! (= (tb2t333 (t2tb333 i)) i) :pattern ((t2tb333 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (tuple2 c1 b1)) j) (= (t2tb333 (tb2t333 j)) j)) :pattern (
  (t2tb333 (tb2t333 j))) )))

;; mem_direct_product
  (assert
  (forall ((f (set (tuple21 a c))) (g (set (tuple21 a b))) (x a) (y c) (z b))
  (= (mem (tuple2 a1 (tuple2 c1 b1))
  (Tuple2 a1 (tuple2 c1 b1) (t2tb2 x) (Tuple2 c1 b1 (t2tb135 y) (t2tb14 z)))
  (direct_product b1 c1 a1 (t2tb129 f) (t2tb11 g)))
  (and (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y))) f) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 z))) g)))))

;; mem_direct_product
  (assert
  (forall ((c2 ty))
  (forall ((f (set (tuple21 a c))) (g uni) (x a) (y c) (z uni))
  (= (mem (tuple2 a1 (tuple2 c1 c2))
  (Tuple2 a1 (tuple2 c1 c2) (t2tb2 x) (Tuple2 c1 c2 (t2tb135 y) z))
  (direct_product c2 c1 a1 (t2tb129 f) g))
  (and (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y))) f) (mem
  (tuple2 a1 c2) (Tuple2 a1 c2 (t2tb2 x) z) g))))))

;; mem_direct_product
  (assert
  (forall ((f (set (tuple21 a b))) (g (set (tuple21 a d))) (x a) (y b) (z d))
  (= (mem (tuple2 a1 (tuple2 b1 d1))
  (Tuple2 a1 (tuple2 b1 d1) (t2tb2 x) (Tuple2 b1 d1 (t2tb14 y) (t2tb694 z)))
  (direct_product d1 b1 a1 (t2tb11 f) (t2tb903 g)))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y))) f) (mem32
  (tb2t904 (Tuple2 a1 d1 (t2tb2 x) (t2tb694 z))) g)))))

;; mem_direct_product
  (assert
  (forall ((f (set (tuple21 a b))) (g (set (tuple21 a c))) (x a) (y b) (z c))
  (= (mem (tuple2 a1 (tuple2 b1 c1))
  (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (Tuple2 b1 c1 (t2tb14 y) (t2tb135 z)))
  (direct_product c1 b1 a1 (t2tb11 f) (t2tb129 g)))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y))) f) (mem10
  (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 z))) g)))))

(declare-fun t2tb59 ((set (tuple21 a (tuple21 b b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (tuple21 b b))))) (sort
  (set1 (tuple2 a1 (tuple2 b1 b1))) (t2tb59 x))))

(declare-fun tb2t59 (uni) (set (tuple21 a (tuple21 b b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (tuple21 b b)))))
  (! (= (tb2t59 (t2tb59 i)) i) :pattern ((t2tb59 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (tuple2 b1 b1))) j)
     (= (t2tb59 (tb2t59 j)) j)) :pattern ((t2tb59 (tb2t59 j))) )))

(declare-fun t2tb60 ((tuple21 a (tuple21 b b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (tuple21 b b)))) (sort (tuple2 a1 (tuple2 b1 b1))
  (t2tb60 x))))

(declare-fun tb2t60 (uni) (tuple21 a (tuple21 b b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (tuple21 b b))))
  (! (= (tb2t60 (t2tb60 i)) i) :pattern ((t2tb60 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (tuple2 b1 b1)) j) (= (t2tb60 (tb2t60 j)) j)) :pattern (
  (t2tb60 (tb2t60 j))) )))

;; mem_direct_product
  (assert
  (forall ((f (set (tuple21 a b))) (g (set (tuple21 a b))) (x a) (y b) (z b))
  (= (mem (tuple2 a1 (tuple2 b1 b1))
  (Tuple2 a1 (tuple2 b1 b1) (t2tb2 x) (Tuple2 b1 b1 (t2tb14 y) (t2tb14 z)))
  (direct_product b1 b1 a1 (t2tb11 f) (t2tb11 g)))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y))) f) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 z))) g)))))

;; mem_direct_product
  (assert
  (forall ((c2 ty))
  (forall ((f (set (tuple21 a b))) (g uni) (x a) (y b) (z uni))
  (= (mem (tuple2 a1 (tuple2 b1 c2))
  (Tuple2 a1 (tuple2 b1 c2) (t2tb2 x) (Tuple2 b1 c2 (t2tb14 y) z))
  (direct_product c2 b1 a1 (t2tb11 f) g))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y))) f) (mem
  (tuple2 a1 c2) (Tuple2 a1 c2 (t2tb2 x) z) g))))))

;; mem_direct_product
  (assert
  (forall ((a2 ty) (b2 ty) (c2 ty))
  (forall ((f uni) (g uni) (x uni) (y uni) (z uni))
  (= (mem (tuple2 a2 (tuple2 b2 c2))
  (Tuple2 a2 (tuple2 b2 c2) x (Tuple2 b2 c2 y z))
  (direct_product c2 b2 a2 f g))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) f) (mem (tuple2 a2 c2)
  (Tuple2 a2 c2 x z) g))))))

(declare-fun prj1 (ty ty uni) uni)

;; prj1_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni)) (sort (set1 (tuple2 (tuple2 a2 b2) a2)) (prj1 b2 a2 x)))))

;; mem_proj_op_1
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (x uni) (y uni) (z uni))
  (=> (sort a2 x)
  (=> (sort a2 z)
  (= (mem (tuple2 (tuple2 a2 b2) a2)
  (Tuple2 (tuple2 a2 b2) a2 (Tuple2 a2 b2 x y) z)
  (prj1 b2 a2 (Tuple2 (set1 a2) (set1 b2) s t)))
  (and (mem (tuple2 (tuple2 a2 b2) a2)
  (Tuple2 (tuple2 a2 b2) a2 (Tuple2 a2 b2 x y) z)
  (times a2 (tuple2 a2 b2) (times b2 a2 s t) s)) (= z x))))))))

(declare-fun prj2 (ty ty uni) uni)

;; prj2_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni)) (sort (set1 (tuple2 (tuple2 a2 b2) b2)) (prj2 b2 a2 x)))))

;; mem_proj_op_2
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (x uni) (y uni) (z uni))
  (=> (sort b2 y)
  (=> (sort b2 z)
  (= (mem (tuple2 (tuple2 a2 b2) b2)
  (Tuple2 (tuple2 a2 b2) b2 (Tuple2 a2 b2 x y) z)
  (prj2 b2 a2 (Tuple2 (set1 a2) (set1 b2) s t)))
  (and (mem (tuple2 (tuple2 a2 b2) b2)
  (Tuple2 (tuple2 a2 b2) b2 (Tuple2 a2 b2 x y) z)
  (times b2 (tuple2 a2 b2) (times b2 a2 s t) t)) (= z y))))))))

(declare-fun parallel_product (ty ty ty ty uni uni) uni)

;; parallel_product_sort
  (assert
  (forall ((a2 ty) (b2 ty) (c2 ty) (d2 ty))
  (forall ((x uni) (x1 uni)) (sort
  (set1 (tuple2 (tuple2 a2 c2) (tuple2 b2 d2)))
  (parallel_product d2 c2 b2 a2 x x1)))))

;; mem_parallel_product
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((h uni) (k (set (tuple21 c d))) (x uni) (y c) (z uni) (w d))
  (= (mem (tuple2 (tuple2 a2 c1) (tuple2 b2 d1))
  (Tuple2 (tuple2 a2 c1) (tuple2 b2 d1) (Tuple2 a2 c1 x (t2tb135 y))
  (Tuple2 b2 d1 z (t2tb694 w))) (parallel_product d1 c1 b2 a2 h (t2tb689 k)))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x z) h) (mem21
  (tb2t693 (Tuple2 c1 d1 (t2tb135 y) (t2tb694 w))) k))))))

;; mem_parallel_product
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((h uni) (k (set (tuple21 b d))) (x uni) (y b) (z uni) (w d))
  (= (mem (tuple2 (tuple2 a2 b1) (tuple2 b2 d1))
  (Tuple2 (tuple2 a2 b1) (tuple2 b2 d1) (Tuple2 a2 b1 x (t2tb14 y))
  (Tuple2 b2 d1 z (t2tb694 w))) (parallel_product d1 b1 b2 a2 h (t2tb687 k)))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x z) h) (mem23
  (tb2t692 (Tuple2 b1 d1 (t2tb14 y) (t2tb694 w))) k))))))

;; mem_parallel_product
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((h uni) (k (set (tuple21 b c))) (x uni) (y b) (z uni) (w c))
  (= (mem (tuple2 (tuple2 a2 b1) (tuple2 b2 c1))
  (Tuple2 (tuple2 a2 b1) (tuple2 b2 c1) (Tuple2 a2 b1 x (t2tb14 y))
  (Tuple2 b2 c1 z (t2tb135 w))) (parallel_product c1 b1 b2 a2 h (t2tb131 k)))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x z) h) (mem8
  (tb2t134 (Tuple2 b1 c1 (t2tb14 y) (t2tb135 w))) k))))))

;; mem_parallel_product
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((h uni) (k (set (tuple21 a d))) (x uni) (y a) (z uni) (w d))
  (= (mem (tuple2 (tuple2 a2 a1) (tuple2 b2 d1))
  (Tuple2 (tuple2 a2 a1) (tuple2 b2 d1) (Tuple2 a2 a1 x (t2tb2 y))
  (Tuple2 b2 d1 z (t2tb694 w))) (parallel_product d1 a1 b2 a2 h (t2tb903 k)))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x z) h) (mem32
  (tb2t904 (Tuple2 a1 d1 (t2tb2 y) (t2tb694 w))) k))))))

;; mem_parallel_product
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((h uni) (k (set (tuple21 a c))) (x uni) (y a) (z uni) (w c))
  (= (mem (tuple2 (tuple2 a2 a1) (tuple2 b2 c1))
  (Tuple2 (tuple2 a2 a1) (tuple2 b2 c1) (Tuple2 a2 a1 x (t2tb2 y))
  (Tuple2 b2 c1 z (t2tb135 w))) (parallel_product c1 a1 b2 a2 h (t2tb129 k)))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x z) h) (mem10
  (tb2t133 (Tuple2 a1 c1 (t2tb2 y) (t2tb135 w))) k))))))

;; mem_parallel_product
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((h uni) (k (set (tuple21 a b))) (x uni) (y a) (z uni) (w b))
  (= (mem (tuple2 (tuple2 a2 a1) (tuple2 b2 b1))
  (Tuple2 (tuple2 a2 a1) (tuple2 b2 b1) (Tuple2 a2 a1 x (t2tb2 y))
  (Tuple2 b2 b1 z (t2tb14 w))) (parallel_product b1 a1 b2 a2 h (t2tb11 k)))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x z) h) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 y) (t2tb14 w))) k))))))

(declare-fun t2tb1035 ((set (tuple21 (tuple21 c c) (tuple21 d d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 c c) (tuple21 d d))))) (sort
  (set1 (tuple2 (tuple2 c1 c1) (tuple2 d1 d1))) (t2tb1035 x))))

(declare-fun tb2t1035 (uni) (set (tuple21 (tuple21 c c) (tuple21 d d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 c c) (tuple21 d d)))))
  (! (= (tb2t1035 (t2tb1035 i)) i) :pattern ((t2tb1035 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 c1 c1) (tuple2 d1 d1))) j)
     (= (t2tb1035 (tb2t1035 j)) j)) :pattern ((t2tb1035 (tb2t1035 j))) )))

(declare-fun t2tb1036 ((tuple21 (tuple21 c c) (tuple21 d d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 c c) (tuple21 d d)))) (sort
  (tuple2 (tuple2 c1 c1) (tuple2 d1 d1)) (t2tb1036 x))))

(declare-fun tb2t1036 (uni) (tuple21 (tuple21 c c) (tuple21 d d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 c c) (tuple21 d d))))
  (! (= (tb2t1036 (t2tb1036 i)) i) :pattern ((t2tb1036 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 c1 c1) (tuple2 d1 d1)) j)
     (= (t2tb1036 (tb2t1036 j)) j)) :pattern ((t2tb1036 (tb2t1036 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 c d))) (k (set (tuple21 c d))) (x c) (y c) (z d)
  (w d))
  (= (mem (tuple2 (tuple2 c1 c1) (tuple2 d1 d1))
  (Tuple2 (tuple2 c1 c1) (tuple2 d1 d1)
  (Tuple2 c1 c1 (t2tb135 x) (t2tb135 y))
  (Tuple2 d1 d1 (t2tb694 z) (t2tb694 w)))
  (parallel_product d1 c1 d1 c1 (t2tb689 h) (t2tb689 k)))
  (and (mem21 (tb2t693 (Tuple2 c1 d1 (t2tb135 x) (t2tb694 z))) h) (mem21
  (tb2t693 (Tuple2 c1 d1 (t2tb135 y) (t2tb694 w))) k)))))

(declare-fun t2tb2081 ((set (tuple21 (tuple21 c b) (tuple21 d d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 c b) (tuple21 d d))))) (sort
  (set1 (tuple2 (tuple2 c1 b1) (tuple2 d1 d1))) (t2tb2081 x))))

(declare-fun tb2t2081 (uni) (set (tuple21 (tuple21 c b) (tuple21 d d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 c b) (tuple21 d d)))))
  (! (= (tb2t2081 (t2tb2081 i)) i) :pattern ((t2tb2081 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 c1 b1) (tuple2 d1 d1))) j)
     (= (t2tb2081 (tb2t2081 j)) j)) :pattern ((t2tb2081 (tb2t2081 j))) )))

(declare-fun t2tb2082 ((tuple21 (tuple21 c b) (tuple21 d d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 c b) (tuple21 d d)))) (sort
  (tuple2 (tuple2 c1 b1) (tuple2 d1 d1)) (t2tb2082 x))))

(declare-fun tb2t2082 (uni) (tuple21 (tuple21 c b) (tuple21 d d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 c b) (tuple21 d d))))
  (! (= (tb2t2082 (t2tb2082 i)) i) :pattern ((t2tb2082 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 c1 b1) (tuple2 d1 d1)) j)
     (= (t2tb2082 (tb2t2082 j)) j)) :pattern ((t2tb2082 (tb2t2082 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 c d))) (k (set (tuple21 b d))) (x c) (y b) (z d)
  (w d))
  (= (mem (tuple2 (tuple2 c1 b1) (tuple2 d1 d1))
  (Tuple2 (tuple2 c1 b1) (tuple2 d1 d1) (Tuple2 c1 b1 (t2tb135 x) (t2tb14 y))
  (Tuple2 d1 d1 (t2tb694 z) (t2tb694 w)))
  (parallel_product d1 b1 d1 c1 (t2tb689 h) (t2tb687 k)))
  (and (mem21 (tb2t693 (Tuple2 c1 d1 (t2tb135 x) (t2tb694 z))) h) (mem23
  (tb2t692 (Tuple2 b1 d1 (t2tb14 y) (t2tb694 w))) k)))))

(declare-fun t2tb2328 ((set (tuple21 (tuple21 c b) (tuple21 d c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 c b) (tuple21 d c))))) (sort
  (set1 (tuple2 (tuple2 c1 b1) (tuple2 d1 c1))) (t2tb2328 x))))

(declare-fun tb2t2328 (uni) (set (tuple21 (tuple21 c b) (tuple21 d c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 c b) (tuple21 d c)))))
  (! (= (tb2t2328 (t2tb2328 i)) i) :pattern ((t2tb2328 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 c1 b1) (tuple2 d1 c1))) j)
     (= (t2tb2328 (tb2t2328 j)) j)) :pattern ((t2tb2328 (tb2t2328 j))) )))

(declare-fun t2tb2329 ((tuple21 (tuple21 c b) (tuple21 d c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 c b) (tuple21 d c)))) (sort
  (tuple2 (tuple2 c1 b1) (tuple2 d1 c1)) (t2tb2329 x))))

(declare-fun tb2t2329 (uni) (tuple21 (tuple21 c b) (tuple21 d c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 c b) (tuple21 d c))))
  (! (= (tb2t2329 (t2tb2329 i)) i) :pattern ((t2tb2329 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 c1 b1) (tuple2 d1 c1)) j)
     (= (t2tb2329 (tb2t2329 j)) j)) :pattern ((t2tb2329 (tb2t2329 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 c d))) (k (set (tuple21 b c))) (x c) (y b) (z d)
  (w c))
  (= (mem (tuple2 (tuple2 c1 b1) (tuple2 d1 c1))
  (Tuple2 (tuple2 c1 b1) (tuple2 d1 c1) (Tuple2 c1 b1 (t2tb135 x) (t2tb14 y))
  (Tuple2 d1 c1 (t2tb694 z) (t2tb135 w)))
  (parallel_product c1 b1 d1 c1 (t2tb689 h) (t2tb131 k)))
  (and (mem21 (tb2t693 (Tuple2 c1 d1 (t2tb135 x) (t2tb694 z))) h) (mem8
  (tb2t134 (Tuple2 b1 c1 (t2tb14 y) (t2tb135 w))) k)))))

(declare-fun t2tb2330 ((set (tuple21 (tuple21 c a) (tuple21 d d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 c a) (tuple21 d d))))) (sort
  (set1 (tuple2 (tuple2 c1 a1) (tuple2 d1 d1))) (t2tb2330 x))))

(declare-fun tb2t2330 (uni) (set (tuple21 (tuple21 c a) (tuple21 d d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 c a) (tuple21 d d)))))
  (! (= (tb2t2330 (t2tb2330 i)) i) :pattern ((t2tb2330 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 c1 a1) (tuple2 d1 d1))) j)
     (= (t2tb2330 (tb2t2330 j)) j)) :pattern ((t2tb2330 (tb2t2330 j))) )))

(declare-fun t2tb2331 ((tuple21 (tuple21 c a) (tuple21 d d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 c a) (tuple21 d d)))) (sort
  (tuple2 (tuple2 c1 a1) (tuple2 d1 d1)) (t2tb2331 x))))

(declare-fun tb2t2331 (uni) (tuple21 (tuple21 c a) (tuple21 d d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 c a) (tuple21 d d))))
  (! (= (tb2t2331 (t2tb2331 i)) i) :pattern ((t2tb2331 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 c1 a1) (tuple2 d1 d1)) j)
     (= (t2tb2331 (tb2t2331 j)) j)) :pattern ((t2tb2331 (tb2t2331 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 c d))) (k (set (tuple21 a d))) (x c) (y a) (z d)
  (w d))
  (= (mem (tuple2 (tuple2 c1 a1) (tuple2 d1 d1))
  (Tuple2 (tuple2 c1 a1) (tuple2 d1 d1) (Tuple2 c1 a1 (t2tb135 x) (t2tb2 y))
  (Tuple2 d1 d1 (t2tb694 z) (t2tb694 w)))
  (parallel_product d1 a1 d1 c1 (t2tb689 h) (t2tb903 k)))
  (and (mem21 (tb2t693 (Tuple2 c1 d1 (t2tb135 x) (t2tb694 z))) h) (mem32
  (tb2t904 (Tuple2 a1 d1 (t2tb2 y) (t2tb694 w))) k)))))

(declare-fun t2tb1939 ((set (tuple21 (tuple21 c a) (tuple21 d c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 c a) (tuple21 d c))))) (sort
  (set1 (tuple2 (tuple2 c1 a1) (tuple2 d1 c1))) (t2tb1939 x))))

(declare-fun tb2t1939 (uni) (set (tuple21 (tuple21 c a) (tuple21 d c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 c a) (tuple21 d c)))))
  (! (= (tb2t1939 (t2tb1939 i)) i) :pattern ((t2tb1939 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 c1 a1) (tuple2 d1 c1))) j)
     (= (t2tb1939 (tb2t1939 j)) j)) :pattern ((t2tb1939 (tb2t1939 j))) )))

(declare-fun t2tb1940 ((tuple21 (tuple21 c a) (tuple21 d c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 c a) (tuple21 d c)))) (sort
  (tuple2 (tuple2 c1 a1) (tuple2 d1 c1)) (t2tb1940 x))))

(declare-fun tb2t1940 (uni) (tuple21 (tuple21 c a) (tuple21 d c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 c a) (tuple21 d c))))
  (! (= (tb2t1940 (t2tb1940 i)) i) :pattern ((t2tb1940 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 c1 a1) (tuple2 d1 c1)) j)
     (= (t2tb1940 (tb2t1940 j)) j)) :pattern ((t2tb1940 (tb2t1940 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 c d))) (k (set (tuple21 a c))) (x c) (y a) (z d)
  (w c))
  (= (mem (tuple2 (tuple2 c1 a1) (tuple2 d1 c1))
  (Tuple2 (tuple2 c1 a1) (tuple2 d1 c1) (Tuple2 c1 a1 (t2tb135 x) (t2tb2 y))
  (Tuple2 d1 c1 (t2tb694 z) (t2tb135 w)))
  (parallel_product c1 a1 d1 c1 (t2tb689 h) (t2tb129 k)))
  (and (mem21 (tb2t693 (Tuple2 c1 d1 (t2tb135 x) (t2tb694 z))) h) (mem10
  (tb2t133 (Tuple2 a1 c1 (t2tb2 y) (t2tb135 w))) k)))))

(declare-fun t2tb1041 ((set (tuple21 (tuple21 c a) (tuple21 d b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 c a) (tuple21 d b))))) (sort
  (set1 (tuple2 (tuple2 c1 a1) (tuple2 d1 b1))) (t2tb1041 x))))

(declare-fun tb2t1041 (uni) (set (tuple21 (tuple21 c a) (tuple21 d b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 c a) (tuple21 d b)))))
  (! (= (tb2t1041 (t2tb1041 i)) i) :pattern ((t2tb1041 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 c1 a1) (tuple2 d1 b1))) j)
     (= (t2tb1041 (tb2t1041 j)) j)) :pattern ((t2tb1041 (tb2t1041 j))) )))

(declare-fun t2tb1042 ((tuple21 (tuple21 c a) (tuple21 d b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 c a) (tuple21 d b)))) (sort
  (tuple2 (tuple2 c1 a1) (tuple2 d1 b1)) (t2tb1042 x))))

(declare-fun tb2t1042 (uni) (tuple21 (tuple21 c a) (tuple21 d b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 c a) (tuple21 d b))))
  (! (= (tb2t1042 (t2tb1042 i)) i) :pattern ((t2tb1042 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 c1 a1) (tuple2 d1 b1)) j)
     (= (t2tb1042 (tb2t1042 j)) j)) :pattern ((t2tb1042 (tb2t1042 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 c d))) (k (set (tuple21 a b))) (x c) (y a) (z d)
  (w b))
  (= (mem (tuple2 (tuple2 c1 a1) (tuple2 d1 b1))
  (Tuple2 (tuple2 c1 a1) (tuple2 d1 b1) (Tuple2 c1 a1 (t2tb135 x) (t2tb2 y))
  (Tuple2 d1 b1 (t2tb694 z) (t2tb14 w)))
  (parallel_product b1 a1 d1 c1 (t2tb689 h) (t2tb11 k)))
  (and (mem21 (tb2t693 (Tuple2 c1 d1 (t2tb135 x) (t2tb694 z))) h) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 y) (t2tb14 w))) k)))))

;; mem_parallel_product
  (assert
  (forall ((c2 ty) (d2 ty))
  (forall ((h (set (tuple21 c d))) (k uni) (x c) (y uni) (z d) (w uni))
  (= (mem (tuple2 (tuple2 c1 c2) (tuple2 d1 d2))
  (Tuple2 (tuple2 c1 c2) (tuple2 d1 d2) (Tuple2 c1 c2 (t2tb135 x) y)
  (Tuple2 d1 d2 (t2tb694 z) w)) (parallel_product d2 c2 d1 c1 (t2tb689 h) k))
  (and (mem21 (tb2t693 (Tuple2 c1 d1 (t2tb135 x) (t2tb694 z))) h) (mem
  (tuple2 c2 d2) (Tuple2 c2 d2 y w) k))))))

(declare-fun t2tb2085 ((set (tuple21 (tuple21 b c) (tuple21 d d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b c) (tuple21 d d))))) (sort
  (set1 (tuple2 (tuple2 b1 c1) (tuple2 d1 d1))) (t2tb2085 x))))

(declare-fun tb2t2085 (uni) (set (tuple21 (tuple21 b c) (tuple21 d d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b c) (tuple21 d d)))))
  (! (= (tb2t2085 (t2tb2085 i)) i) :pattern ((t2tb2085 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 c1) (tuple2 d1 d1))) j)
     (= (t2tb2085 (tb2t2085 j)) j)) :pattern ((t2tb2085 (tb2t2085 j))) )))

(declare-fun t2tb2086 ((tuple21 (tuple21 b c) (tuple21 d d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b c) (tuple21 d d)))) (sort
  (tuple2 (tuple2 b1 c1) (tuple2 d1 d1)) (t2tb2086 x))))

(declare-fun tb2t2086 (uni) (tuple21 (tuple21 b c) (tuple21 d d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b c) (tuple21 d d))))
  (! (= (tb2t2086 (t2tb2086 i)) i) :pattern ((t2tb2086 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 c1) (tuple2 d1 d1)) j)
     (= (t2tb2086 (tb2t2086 j)) j)) :pattern ((t2tb2086 (tb2t2086 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 b d))) (k (set (tuple21 c d))) (x b) (y c) (z d)
  (w d))
  (= (mem (tuple2 (tuple2 b1 c1) (tuple2 d1 d1))
  (Tuple2 (tuple2 b1 c1) (tuple2 d1 d1) (Tuple2 b1 c1 (t2tb14 x) (t2tb135 y))
  (Tuple2 d1 d1 (t2tb694 z) (t2tb694 w)))
  (parallel_product d1 c1 d1 b1 (t2tb687 h) (t2tb689 k)))
  (and (mem23 (tb2t692 (Tuple2 b1 d1 (t2tb14 x) (t2tb694 z))) h) (mem21
  (tb2t693 (Tuple2 c1 d1 (t2tb135 y) (t2tb694 w))) k)))))

(declare-fun t2tb2087 ((tuple21 (tuple21 b b) (tuple21 d d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b b) (tuple21 d d)))) (sort
  (tuple2 (tuple2 b1 b1) (tuple2 d1 d1)) (t2tb2087 x))))

(declare-fun tb2t2087 (uni) (tuple21 (tuple21 b b) (tuple21 d d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b b) (tuple21 d d))))
  (! (= (tb2t2087 (t2tb2087 i)) i) :pattern ((t2tb2087 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 b1) (tuple2 d1 d1)) j)
     (= (t2tb2087 (tb2t2087 j)) j)) :pattern ((t2tb2087 (tb2t2087 j))) )))

(declare-fun t2tb2088 ((set (tuple21 (tuple21 b b) (tuple21 d d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b b) (tuple21 d d))))) (sort
  (set1 (tuple2 (tuple2 b1 b1) (tuple2 d1 d1))) (t2tb2088 x))))

(declare-fun tb2t2088 (uni) (set (tuple21 (tuple21 b b) (tuple21 d d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b b) (tuple21 d d)))))
  (! (= (tb2t2088 (t2tb2088 i)) i) :pattern ((t2tb2088 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 b1) (tuple2 d1 d1))) j)
     (= (t2tb2088 (tb2t2088 j)) j)) :pattern ((t2tb2088 (tb2t2088 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 b d))) (k (set (tuple21 b d))) (x b) (y b) (z d)
  (w d))
  (= (mem (tuple2 (tuple2 b1 b1) (tuple2 d1 d1))
  (Tuple2 (tuple2 b1 b1) (tuple2 d1 d1) (Tuple2 b1 b1 (t2tb14 x) (t2tb14 y))
  (Tuple2 d1 d1 (t2tb694 z) (t2tb694 w)))
  (parallel_product d1 b1 d1 b1 (t2tb687 h) (t2tb687 k)))
  (and (mem23 (tb2t692 (Tuple2 b1 d1 (t2tb14 x) (t2tb694 z))) h) (mem23
  (tb2t692 (Tuple2 b1 d1 (t2tb14 y) (t2tb694 w))) k)))))

(declare-fun t2tb2332 ((set (tuple21 (tuple21 b b) (tuple21 d c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b b) (tuple21 d c))))) (sort
  (set1 (tuple2 (tuple2 b1 b1) (tuple2 d1 c1))) (t2tb2332 x))))

(declare-fun tb2t2332 (uni) (set (tuple21 (tuple21 b b) (tuple21 d c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b b) (tuple21 d c)))))
  (! (= (tb2t2332 (t2tb2332 i)) i) :pattern ((t2tb2332 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 b1) (tuple2 d1 c1))) j)
     (= (t2tb2332 (tb2t2332 j)) j)) :pattern ((t2tb2332 (tb2t2332 j))) )))

(declare-fun t2tb2333 ((tuple21 (tuple21 b b) (tuple21 d c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b b) (tuple21 d c)))) (sort
  (tuple2 (tuple2 b1 b1) (tuple2 d1 c1)) (t2tb2333 x))))

(declare-fun tb2t2333 (uni) (tuple21 (tuple21 b b) (tuple21 d c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b b) (tuple21 d c))))
  (! (= (tb2t2333 (t2tb2333 i)) i) :pattern ((t2tb2333 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 b1) (tuple2 d1 c1)) j)
     (= (t2tb2333 (tb2t2333 j)) j)) :pattern ((t2tb2333 (tb2t2333 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 b d))) (k (set (tuple21 b c))) (x b) (y b) (z d)
  (w c))
  (= (mem (tuple2 (tuple2 b1 b1) (tuple2 d1 c1))
  (Tuple2 (tuple2 b1 b1) (tuple2 d1 c1) (Tuple2 b1 b1 (t2tb14 x) (t2tb14 y))
  (Tuple2 d1 c1 (t2tb694 z) (t2tb135 w)))
  (parallel_product c1 b1 d1 b1 (t2tb687 h) (t2tb131 k)))
  (and (mem23 (tb2t692 (Tuple2 b1 d1 (t2tb14 x) (t2tb694 z))) h) (mem8
  (tb2t134 (Tuple2 b1 c1 (t2tb14 y) (t2tb135 w))) k)))))

(declare-fun t2tb2334 ((tuple21 (tuple21 b a) (tuple21 d d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b a) (tuple21 d d)))) (sort
  (tuple2 (tuple2 b1 a1) (tuple2 d1 d1)) (t2tb2334 x))))

(declare-fun tb2t2334 (uni) (tuple21 (tuple21 b a) (tuple21 d d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b a) (tuple21 d d))))
  (! (= (tb2t2334 (t2tb2334 i)) i) :pattern ((t2tb2334 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 a1) (tuple2 d1 d1)) j)
     (= (t2tb2334 (tb2t2334 j)) j)) :pattern ((t2tb2334 (tb2t2334 j))) )))

(declare-fun t2tb2335 ((set (tuple21 (tuple21 b a) (tuple21 d d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b a) (tuple21 d d))))) (sort
  (set1 (tuple2 (tuple2 b1 a1) (tuple2 d1 d1))) (t2tb2335 x))))

(declare-fun tb2t2335 (uni) (set (tuple21 (tuple21 b a) (tuple21 d d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b a) (tuple21 d d)))))
  (! (= (tb2t2335 (t2tb2335 i)) i) :pattern ((t2tb2335 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 a1) (tuple2 d1 d1))) j)
     (= (t2tb2335 (tb2t2335 j)) j)) :pattern ((t2tb2335 (tb2t2335 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 b d))) (k (set (tuple21 a d))) (x b) (y a) (z d)
  (w d))
  (= (mem (tuple2 (tuple2 b1 a1) (tuple2 d1 d1))
  (Tuple2 (tuple2 b1 a1) (tuple2 d1 d1) (Tuple2 b1 a1 (t2tb14 x) (t2tb2 y))
  (Tuple2 d1 d1 (t2tb694 z) (t2tb694 w)))
  (parallel_product d1 a1 d1 b1 (t2tb687 h) (t2tb903 k)))
  (and (mem23 (tb2t692 (Tuple2 b1 d1 (t2tb14 x) (t2tb694 z))) h) (mem32
  (tb2t904 (Tuple2 a1 d1 (t2tb2 y) (t2tb694 w))) k)))))

(declare-fun t2tb2336 ((set (tuple21 (tuple21 b a) (tuple21 d c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b a) (tuple21 d c))))) (sort
  (set1 (tuple2 (tuple2 b1 a1) (tuple2 d1 c1))) (t2tb2336 x))))

(declare-fun tb2t2336 (uni) (set (tuple21 (tuple21 b a) (tuple21 d c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b a) (tuple21 d c)))))
  (! (= (tb2t2336 (t2tb2336 i)) i) :pattern ((t2tb2336 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 a1) (tuple2 d1 c1))) j)
     (= (t2tb2336 (tb2t2336 j)) j)) :pattern ((t2tb2336 (tb2t2336 j))) )))

(declare-fun t2tb2337 ((tuple21 (tuple21 b a) (tuple21 d c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b a) (tuple21 d c)))) (sort
  (tuple2 (tuple2 b1 a1) (tuple2 d1 c1)) (t2tb2337 x))))

(declare-fun tb2t2337 (uni) (tuple21 (tuple21 b a) (tuple21 d c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b a) (tuple21 d c))))
  (! (= (tb2t2337 (t2tb2337 i)) i) :pattern ((t2tb2337 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 a1) (tuple2 d1 c1)) j)
     (= (t2tb2337 (tb2t2337 j)) j)) :pattern ((t2tb2337 (tb2t2337 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 b d))) (k (set (tuple21 a c))) (x b) (y a) (z d)
  (w c))
  (= (mem (tuple2 (tuple2 b1 a1) (tuple2 d1 c1))
  (Tuple2 (tuple2 b1 a1) (tuple2 d1 c1) (Tuple2 b1 a1 (t2tb14 x) (t2tb2 y))
  (Tuple2 d1 c1 (t2tb694 z) (t2tb135 w)))
  (parallel_product c1 a1 d1 b1 (t2tb687 h) (t2tb129 k)))
  (and (mem23 (tb2t692 (Tuple2 b1 d1 (t2tb14 x) (t2tb694 z))) h) (mem10
  (tb2t133 (Tuple2 a1 c1 (t2tb2 y) (t2tb135 w))) k)))))

(declare-fun t2tb2089 ((set (tuple21 (tuple21 b a) (tuple21 d b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b a) (tuple21 d b))))) (sort
  (set1 (tuple2 (tuple2 b1 a1) (tuple2 d1 b1))) (t2tb2089 x))))

(declare-fun tb2t2089 (uni) (set (tuple21 (tuple21 b a) (tuple21 d b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b a) (tuple21 d b)))))
  (! (= (tb2t2089 (t2tb2089 i)) i) :pattern ((t2tb2089 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 a1) (tuple2 d1 b1))) j)
     (= (t2tb2089 (tb2t2089 j)) j)) :pattern ((t2tb2089 (tb2t2089 j))) )))

(declare-fun t2tb2090 ((tuple21 (tuple21 b a) (tuple21 d b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b a) (tuple21 d b)))) (sort
  (tuple2 (tuple2 b1 a1) (tuple2 d1 b1)) (t2tb2090 x))))

(declare-fun tb2t2090 (uni) (tuple21 (tuple21 b a) (tuple21 d b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b a) (tuple21 d b))))
  (! (= (tb2t2090 (t2tb2090 i)) i) :pattern ((t2tb2090 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 a1) (tuple2 d1 b1)) j)
     (= (t2tb2090 (tb2t2090 j)) j)) :pattern ((t2tb2090 (tb2t2090 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 b d))) (k (set (tuple21 a b))) (x b) (y a) (z d)
  (w b))
  (= (mem (tuple2 (tuple2 b1 a1) (tuple2 d1 b1))
  (Tuple2 (tuple2 b1 a1) (tuple2 d1 b1) (Tuple2 b1 a1 (t2tb14 x) (t2tb2 y))
  (Tuple2 d1 b1 (t2tb694 z) (t2tb14 w)))
  (parallel_product b1 a1 d1 b1 (t2tb687 h) (t2tb11 k)))
  (and (mem23 (tb2t692 (Tuple2 b1 d1 (t2tb14 x) (t2tb694 z))) h) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 y) (t2tb14 w))) k)))))

;; mem_parallel_product
  (assert
  (forall ((c2 ty) (d2 ty))
  (forall ((h (set (tuple21 b d))) (k uni) (x b) (y uni) (z d) (w uni))
  (= (mem (tuple2 (tuple2 b1 c2) (tuple2 d1 d2))
  (Tuple2 (tuple2 b1 c2) (tuple2 d1 d2) (Tuple2 b1 c2 (t2tb14 x) y)
  (Tuple2 d1 d2 (t2tb694 z) w)) (parallel_product d2 c2 d1 b1 (t2tb687 h) k))
  (and (mem23 (tb2t692 (Tuple2 b1 d1 (t2tb14 x) (t2tb694 z))) h) (mem
  (tuple2 c2 d2) (Tuple2 c2 d2 y w) k))))))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 b c))) (k (set (tuple21 c d))) (x b) (y c) (z c)
  (w d))
  (= (mem (tuple2 (tuple2 b1 c1) (tuple2 c1 d1))
  (Tuple2 (tuple2 b1 c1) (tuple2 c1 d1) (Tuple2 b1 c1 (t2tb14 x) (t2tb135 y))
  (Tuple2 c1 d1 (t2tb135 z) (t2tb694 w)))
  (parallel_product d1 c1 c1 b1 (t2tb131 h) (t2tb689 k)))
  (and (mem8 (tb2t134 (Tuple2 b1 c1 (t2tb14 x) (t2tb135 z))) h) (mem21
  (tb2t693 (Tuple2 c1 d1 (t2tb135 y) (t2tb694 w))) k)))))

(declare-fun t2tb2338 ((set (tuple21 (tuple21 b b) (tuple21 c d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b b) (tuple21 c d))))) (sort
  (set1 (tuple2 (tuple2 b1 b1) (tuple2 c1 d1))) (t2tb2338 x))))

(declare-fun tb2t2338 (uni) (set (tuple21 (tuple21 b b) (tuple21 c d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b b) (tuple21 c d)))))
  (! (= (tb2t2338 (t2tb2338 i)) i) :pattern ((t2tb2338 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 b1) (tuple2 c1 d1))) j)
     (= (t2tb2338 (tb2t2338 j)) j)) :pattern ((t2tb2338 (tb2t2338 j))) )))

(declare-fun t2tb2339 ((tuple21 (tuple21 b b) (tuple21 c d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b b) (tuple21 c d)))) (sort
  (tuple2 (tuple2 b1 b1) (tuple2 c1 d1)) (t2tb2339 x))))

(declare-fun tb2t2339 (uni) (tuple21 (tuple21 b b) (tuple21 c d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b b) (tuple21 c d))))
  (! (= (tb2t2339 (t2tb2339 i)) i) :pattern ((t2tb2339 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 b1) (tuple2 c1 d1)) j)
     (= (t2tb2339 (tb2t2339 j)) j)) :pattern ((t2tb2339 (tb2t2339 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 b c))) (k (set (tuple21 b d))) (x b) (y b) (z c)
  (w d))
  (= (mem (tuple2 (tuple2 b1 b1) (tuple2 c1 d1))
  (Tuple2 (tuple2 b1 b1) (tuple2 c1 d1) (Tuple2 b1 b1 (t2tb14 x) (t2tb14 y))
  (Tuple2 c1 d1 (t2tb135 z) (t2tb694 w)))
  (parallel_product d1 b1 c1 b1 (t2tb131 h) (t2tb687 k)))
  (and (mem8 (tb2t134 (Tuple2 b1 c1 (t2tb14 x) (t2tb135 z))) h) (mem23
  (tb2t692 (Tuple2 b1 d1 (t2tb14 y) (t2tb694 w))) k)))))

(declare-fun t2tb1172 ((set (tuple21 (tuple21 b b) (tuple21 c c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b b) (tuple21 c c))))) (sort
  (set1 (tuple2 (tuple2 b1 b1) (tuple2 c1 c1))) (t2tb1172 x))))

(declare-fun tb2t1172 (uni) (set (tuple21 (tuple21 b b) (tuple21 c c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b b) (tuple21 c c)))))
  (! (= (tb2t1172 (t2tb1172 i)) i) :pattern ((t2tb1172 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 b1) (tuple2 c1 c1))) j)
     (= (t2tb1172 (tb2t1172 j)) j)) :pattern ((t2tb1172 (tb2t1172 j))) )))

(declare-fun t2tb1173 ((tuple21 (tuple21 b b) (tuple21 c c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b b) (tuple21 c c)))) (sort
  (tuple2 (tuple2 b1 b1) (tuple2 c1 c1)) (t2tb1173 x))))

(declare-fun tb2t1173 (uni) (tuple21 (tuple21 b b) (tuple21 c c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b b) (tuple21 c c))))
  (! (= (tb2t1173 (t2tb1173 i)) i) :pattern ((t2tb1173 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 b1) (tuple2 c1 c1)) j)
     (= (t2tb1173 (tb2t1173 j)) j)) :pattern ((t2tb1173 (tb2t1173 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 b c))) (k (set (tuple21 b c))) (x b) (y b) (z c)
  (w c))
  (= (mem (tuple2 (tuple2 b1 b1) (tuple2 c1 c1))
  (Tuple2 (tuple2 b1 b1) (tuple2 c1 c1) (Tuple2 b1 b1 (t2tb14 x) (t2tb14 y))
  (Tuple2 c1 c1 (t2tb135 z) (t2tb135 w)))
  (parallel_product c1 b1 c1 b1 (t2tb131 h) (t2tb131 k)))
  (and (mem8 (tb2t134 (Tuple2 b1 c1 (t2tb14 x) (t2tb135 z))) h) (mem8
  (tb2t134 (Tuple2 b1 c1 (t2tb14 y) (t2tb135 w))) k)))))

(declare-fun t2tb2340 ((set (tuple21 (tuple21 b a) (tuple21 c d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b a) (tuple21 c d))))) (sort
  (set1 (tuple2 (tuple2 b1 a1) (tuple2 c1 d1))) (t2tb2340 x))))

(declare-fun tb2t2340 (uni) (set (tuple21 (tuple21 b a) (tuple21 c d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b a) (tuple21 c d)))))
  (! (= (tb2t2340 (t2tb2340 i)) i) :pattern ((t2tb2340 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 a1) (tuple2 c1 d1))) j)
     (= (t2tb2340 (tb2t2340 j)) j)) :pattern ((t2tb2340 (tb2t2340 j))) )))

(declare-fun t2tb2341 ((tuple21 (tuple21 b a) (tuple21 c d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b a) (tuple21 c d)))) (sort
  (tuple2 (tuple2 b1 a1) (tuple2 c1 d1)) (t2tb2341 x))))

(declare-fun tb2t2341 (uni) (tuple21 (tuple21 b a) (tuple21 c d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b a) (tuple21 c d))))
  (! (= (tb2t2341 (t2tb2341 i)) i) :pattern ((t2tb2341 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 a1) (tuple2 c1 d1)) j)
     (= (t2tb2341 (tb2t2341 j)) j)) :pattern ((t2tb2341 (tb2t2341 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 b c))) (k (set (tuple21 a d))) (x b) (y a) (z c)
  (w d))
  (= (mem (tuple2 (tuple2 b1 a1) (tuple2 c1 d1))
  (Tuple2 (tuple2 b1 a1) (tuple2 c1 d1) (Tuple2 b1 a1 (t2tb14 x) (t2tb2 y))
  (Tuple2 c1 d1 (t2tb135 z) (t2tb694 w)))
  (parallel_product d1 a1 c1 b1 (t2tb131 h) (t2tb903 k)))
  (and (mem8 (tb2t134 (Tuple2 b1 c1 (t2tb14 x) (t2tb135 z))) h) (mem32
  (tb2t904 (Tuple2 a1 d1 (t2tb2 y) (t2tb694 w))) k)))))

(declare-fun t2tb1174 ((set (tuple21 (tuple21 b a) (tuple21 c c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b a) (tuple21 c c))))) (sort
  (set1 (tuple2 (tuple2 b1 a1) (tuple2 c1 c1))) (t2tb1174 x))))

(declare-fun tb2t1174 (uni) (set (tuple21 (tuple21 b a) (tuple21 c c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b a) (tuple21 c c)))))
  (! (= (tb2t1174 (t2tb1174 i)) i) :pattern ((t2tb1174 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 a1) (tuple2 c1 c1))) j)
     (= (t2tb1174 (tb2t1174 j)) j)) :pattern ((t2tb1174 (tb2t1174 j))) )))

(declare-fun t2tb1175 ((tuple21 (tuple21 b a) (tuple21 c c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b a) (tuple21 c c)))) (sort
  (tuple2 (tuple2 b1 a1) (tuple2 c1 c1)) (t2tb1175 x))))

(declare-fun tb2t1175 (uni) (tuple21 (tuple21 b a) (tuple21 c c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b a) (tuple21 c c))))
  (! (= (tb2t1175 (t2tb1175 i)) i) :pattern ((t2tb1175 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 a1) (tuple2 c1 c1)) j)
     (= (t2tb1175 (tb2t1175 j)) j)) :pattern ((t2tb1175 (tb2t1175 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 b c))) (k (set (tuple21 a c))) (x b) (y a) (z c)
  (w c))
  (= (mem (tuple2 (tuple2 b1 a1) (tuple2 c1 c1))
  (Tuple2 (tuple2 b1 a1) (tuple2 c1 c1) (Tuple2 b1 a1 (t2tb14 x) (t2tb2 y))
  (Tuple2 c1 c1 (t2tb135 z) (t2tb135 w)))
  (parallel_product c1 a1 c1 b1 (t2tb131 h) (t2tb129 k)))
  (and (mem8 (tb2t134 (Tuple2 b1 c1 (t2tb14 x) (t2tb135 z))) h) (mem10
  (tb2t133 (Tuple2 a1 c1 (t2tb2 y) (t2tb135 w))) k)))))

(declare-fun t2tb1176 ((set (tuple21 (tuple21 b a) (tuple21 c b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b a) (tuple21 c b))))) (sort
  (set1 (tuple2 (tuple2 b1 a1) (tuple2 c1 b1))) (t2tb1176 x))))

(declare-fun tb2t1176 (uni) (set (tuple21 (tuple21 b a) (tuple21 c b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b a) (tuple21 c b)))))
  (! (= (tb2t1176 (t2tb1176 i)) i) :pattern ((t2tb1176 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 a1) (tuple2 c1 b1))) j)
     (= (t2tb1176 (tb2t1176 j)) j)) :pattern ((t2tb1176 (tb2t1176 j))) )))

(declare-fun t2tb1177 ((tuple21 (tuple21 b a) (tuple21 c b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b a) (tuple21 c b)))) (sort
  (tuple2 (tuple2 b1 a1) (tuple2 c1 b1)) (t2tb1177 x))))

(declare-fun tb2t1177 (uni) (tuple21 (tuple21 b a) (tuple21 c b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b a) (tuple21 c b))))
  (! (= (tb2t1177 (t2tb1177 i)) i) :pattern ((t2tb1177 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 a1) (tuple2 c1 b1)) j)
     (= (t2tb1177 (tb2t1177 j)) j)) :pattern ((t2tb1177 (tb2t1177 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 b c))) (k (set (tuple21 a b))) (x b) (y a) (z c)
  (w b))
  (= (mem (tuple2 (tuple2 b1 a1) (tuple2 c1 b1))
  (Tuple2 (tuple2 b1 a1) (tuple2 c1 b1) (Tuple2 b1 a1 (t2tb14 x) (t2tb2 y))
  (Tuple2 c1 b1 (t2tb135 z) (t2tb14 w)))
  (parallel_product b1 a1 c1 b1 (t2tb131 h) (t2tb11 k)))
  (and (mem8 (tb2t134 (Tuple2 b1 c1 (t2tb14 x) (t2tb135 z))) h) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 y) (t2tb14 w))) k)))))

;; mem_parallel_product
  (assert
  (forall ((c2 ty) (d2 ty))
  (forall ((h (set (tuple21 b c))) (k uni) (x b) (y uni) (z c) (w uni))
  (= (mem (tuple2 (tuple2 b1 c2) (tuple2 c1 d2))
  (Tuple2 (tuple2 b1 c2) (tuple2 c1 d2) (Tuple2 b1 c2 (t2tb14 x) y)
  (Tuple2 c1 d2 (t2tb135 z) w)) (parallel_product d2 c2 c1 b1 (t2tb131 h) k))
  (and (mem8 (tb2t134 (Tuple2 b1 c1 (t2tb14 x) (t2tb135 z))) h) (mem
  (tuple2 c2 d2) (Tuple2 c2 d2 y w) k))))))

(declare-fun t2tb2342 ((set (tuple21 (tuple21 a c) (tuple21 d d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a c) (tuple21 d d))))) (sort
  (set1 (tuple2 (tuple2 a1 c1) (tuple2 d1 d1))) (t2tb2342 x))))

(declare-fun tb2t2342 (uni) (set (tuple21 (tuple21 a c) (tuple21 d d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a c) (tuple21 d d)))))
  (! (= (tb2t2342 (t2tb2342 i)) i) :pattern ((t2tb2342 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 c1) (tuple2 d1 d1))) j)
     (= (t2tb2342 (tb2t2342 j)) j)) :pattern ((t2tb2342 (tb2t2342 j))) )))

(declare-fun t2tb2343 ((tuple21 (tuple21 a c) (tuple21 d d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a c) (tuple21 d d)))) (sort
  (tuple2 (tuple2 a1 c1) (tuple2 d1 d1)) (t2tb2343 x))))

(declare-fun tb2t2343 (uni) (tuple21 (tuple21 a c) (tuple21 d d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a c) (tuple21 d d))))
  (! (= (tb2t2343 (t2tb2343 i)) i) :pattern ((t2tb2343 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 c1) (tuple2 d1 d1)) j)
     (= (t2tb2343 (tb2t2343 j)) j)) :pattern ((t2tb2343 (tb2t2343 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a d))) (k (set (tuple21 c d))) (x a) (y c) (z d)
  (w d))
  (= (mem (tuple2 (tuple2 a1 c1) (tuple2 d1 d1))
  (Tuple2 (tuple2 a1 c1) (tuple2 d1 d1) (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y))
  (Tuple2 d1 d1 (t2tb694 z) (t2tb694 w)))
  (parallel_product d1 c1 d1 a1 (t2tb903 h) (t2tb689 k)))
  (and (mem32 (tb2t904 (Tuple2 a1 d1 (t2tb2 x) (t2tb694 z))) h) (mem21
  (tb2t693 (Tuple2 c1 d1 (t2tb135 y) (t2tb694 w))) k)))))

(declare-fun t2tb2344 ((set (tuple21 (tuple21 a b) (tuple21 d d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) (tuple21 d d))))) (sort
  (set1 (tuple2 (tuple2 a1 b1) (tuple2 d1 d1))) (t2tb2344 x))))

(declare-fun tb2t2344 (uni) (set (tuple21 (tuple21 a b) (tuple21 d d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a b) (tuple21 d d)))))
  (! (= (tb2t2344 (t2tb2344 i)) i) :pattern ((t2tb2344 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 b1) (tuple2 d1 d1))) j)
     (= (t2tb2344 (tb2t2344 j)) j)) :pattern ((t2tb2344 (tb2t2344 j))) )))

(declare-fun t2tb2345 ((tuple21 (tuple21 a b) (tuple21 d d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a b) (tuple21 d d)))) (sort
  (tuple2 (tuple2 a1 b1) (tuple2 d1 d1)) (t2tb2345 x))))

(declare-fun tb2t2345 (uni) (tuple21 (tuple21 a b) (tuple21 d d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a b) (tuple21 d d))))
  (! (= (tb2t2345 (t2tb2345 i)) i) :pattern ((t2tb2345 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 b1) (tuple2 d1 d1)) j)
     (= (t2tb2345 (tb2t2345 j)) j)) :pattern ((t2tb2345 (tb2t2345 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a d))) (k (set (tuple21 b d))) (x a) (y b) (z d)
  (w d))
  (= (mem (tuple2 (tuple2 a1 b1) (tuple2 d1 d1))
  (Tuple2 (tuple2 a1 b1) (tuple2 d1 d1) (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y))
  (Tuple2 d1 d1 (t2tb694 z) (t2tb694 w)))
  (parallel_product d1 b1 d1 a1 (t2tb903 h) (t2tb687 k)))
  (and (mem32 (tb2t904 (Tuple2 a1 d1 (t2tb2 x) (t2tb694 z))) h) (mem23
  (tb2t692 (Tuple2 b1 d1 (t2tb14 y) (t2tb694 w))) k)))))

(declare-fun t2tb2346 ((set (tuple21 (tuple21 a b) (tuple21 d c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) (tuple21 d c))))) (sort
  (set1 (tuple2 (tuple2 a1 b1) (tuple2 d1 c1))) (t2tb2346 x))))

(declare-fun tb2t2346 (uni) (set (tuple21 (tuple21 a b) (tuple21 d c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a b) (tuple21 d c)))))
  (! (= (tb2t2346 (t2tb2346 i)) i) :pattern ((t2tb2346 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 b1) (tuple2 d1 c1))) j)
     (= (t2tb2346 (tb2t2346 j)) j)) :pattern ((t2tb2346 (tb2t2346 j))) )))

(declare-fun t2tb2347 ((tuple21 (tuple21 a b) (tuple21 d c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a b) (tuple21 d c)))) (sort
  (tuple2 (tuple2 a1 b1) (tuple2 d1 c1)) (t2tb2347 x))))

(declare-fun tb2t2347 (uni) (tuple21 (tuple21 a b) (tuple21 d c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a b) (tuple21 d c))))
  (! (= (tb2t2347 (t2tb2347 i)) i) :pattern ((t2tb2347 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 b1) (tuple2 d1 c1)) j)
     (= (t2tb2347 (tb2t2347 j)) j)) :pattern ((t2tb2347 (tb2t2347 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a d))) (k (set (tuple21 b c))) (x a) (y b) (z d)
  (w c))
  (= (mem (tuple2 (tuple2 a1 b1) (tuple2 d1 c1))
  (Tuple2 (tuple2 a1 b1) (tuple2 d1 c1) (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y))
  (Tuple2 d1 c1 (t2tb694 z) (t2tb135 w)))
  (parallel_product c1 b1 d1 a1 (t2tb903 h) (t2tb131 k)))
  (and (mem32 (tb2t904 (Tuple2 a1 d1 (t2tb2 x) (t2tb694 z))) h) (mem8
  (tb2t134 (Tuple2 b1 c1 (t2tb14 y) (t2tb135 w))) k)))))

(declare-fun t2tb2348 ((set (tuple21 (tuple21 a a) (tuple21 d d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a a) (tuple21 d d))))) (sort
  (set1 (tuple2 (tuple2 a1 a1) (tuple2 d1 d1))) (t2tb2348 x))))

(declare-fun tb2t2348 (uni) (set (tuple21 (tuple21 a a) (tuple21 d d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a a) (tuple21 d d)))))
  (! (= (tb2t2348 (t2tb2348 i)) i) :pattern ((t2tb2348 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 a1) (tuple2 d1 d1))) j)
     (= (t2tb2348 (tb2t2348 j)) j)) :pattern ((t2tb2348 (tb2t2348 j))) )))

(declare-fun t2tb2349 ((tuple21 (tuple21 a a) (tuple21 d d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a a) (tuple21 d d)))) (sort
  (tuple2 (tuple2 a1 a1) (tuple2 d1 d1)) (t2tb2349 x))))

(declare-fun tb2t2349 (uni) (tuple21 (tuple21 a a) (tuple21 d d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a a) (tuple21 d d))))
  (! (= (tb2t2349 (t2tb2349 i)) i) :pattern ((t2tb2349 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 a1) (tuple2 d1 d1)) j)
     (= (t2tb2349 (tb2t2349 j)) j)) :pattern ((t2tb2349 (tb2t2349 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a d))) (k (set (tuple21 a d))) (x a) (y a) (z d)
  (w d))
  (= (mem (tuple2 (tuple2 a1 a1) (tuple2 d1 d1))
  (Tuple2 (tuple2 a1 a1) (tuple2 d1 d1) (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y))
  (Tuple2 d1 d1 (t2tb694 z) (t2tb694 w)))
  (parallel_product d1 a1 d1 a1 (t2tb903 h) (t2tb903 k)))
  (and (mem32 (tb2t904 (Tuple2 a1 d1 (t2tb2 x) (t2tb694 z))) h) (mem32
  (tb2t904 (Tuple2 a1 d1 (t2tb2 y) (t2tb694 w))) k)))))

(declare-fun t2tb2350 ((tuple21 (tuple21 a a) (tuple21 d c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a a) (tuple21 d c)))) (sort
  (tuple2 (tuple2 a1 a1) (tuple2 d1 c1)) (t2tb2350 x))))

(declare-fun tb2t2350 (uni) (tuple21 (tuple21 a a) (tuple21 d c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a a) (tuple21 d c))))
  (! (= (tb2t2350 (t2tb2350 i)) i) :pattern ((t2tb2350 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 a1) (tuple2 d1 c1)) j)
     (= (t2tb2350 (tb2t2350 j)) j)) :pattern ((t2tb2350 (tb2t2350 j))) )))

(declare-fun t2tb2351 ((set (tuple21 (tuple21 a a) (tuple21 d c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a a) (tuple21 d c))))) (sort
  (set1 (tuple2 (tuple2 a1 a1) (tuple2 d1 c1))) (t2tb2351 x))))

(declare-fun tb2t2351 (uni) (set (tuple21 (tuple21 a a) (tuple21 d c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a a) (tuple21 d c)))))
  (! (= (tb2t2351 (t2tb2351 i)) i) :pattern ((t2tb2351 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 a1) (tuple2 d1 c1))) j)
     (= (t2tb2351 (tb2t2351 j)) j)) :pattern ((t2tb2351 (tb2t2351 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a d))) (k (set (tuple21 a c))) (x a) (y a) (z d)
  (w c))
  (= (mem (tuple2 (tuple2 a1 a1) (tuple2 d1 c1))
  (Tuple2 (tuple2 a1 a1) (tuple2 d1 c1) (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y))
  (Tuple2 d1 c1 (t2tb694 z) (t2tb135 w)))
  (parallel_product c1 a1 d1 a1 (t2tb903 h) (t2tb129 k)))
  (and (mem32 (tb2t904 (Tuple2 a1 d1 (t2tb2 x) (t2tb694 z))) h) (mem10
  (tb2t133 (Tuple2 a1 c1 (t2tb2 y) (t2tb135 w))) k)))))

(declare-fun t2tb2352 ((set (tuple21 (tuple21 a a) (tuple21 d b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a a) (tuple21 d b))))) (sort
  (set1 (tuple2 (tuple2 a1 a1) (tuple2 d1 b1))) (t2tb2352 x))))

(declare-fun tb2t2352 (uni) (set (tuple21 (tuple21 a a) (tuple21 d b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a a) (tuple21 d b)))))
  (! (= (tb2t2352 (t2tb2352 i)) i) :pattern ((t2tb2352 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 a1) (tuple2 d1 b1))) j)
     (= (t2tb2352 (tb2t2352 j)) j)) :pattern ((t2tb2352 (tb2t2352 j))) )))

(declare-fun t2tb2353 ((tuple21 (tuple21 a a) (tuple21 d b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a a) (tuple21 d b)))) (sort
  (tuple2 (tuple2 a1 a1) (tuple2 d1 b1)) (t2tb2353 x))))

(declare-fun tb2t2353 (uni) (tuple21 (tuple21 a a) (tuple21 d b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a a) (tuple21 d b))))
  (! (= (tb2t2353 (t2tb2353 i)) i) :pattern ((t2tb2353 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 a1) (tuple2 d1 b1)) j)
     (= (t2tb2353 (tb2t2353 j)) j)) :pattern ((t2tb2353 (tb2t2353 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a d))) (k (set (tuple21 a b))) (x a) (y a) (z d)
  (w b))
  (= (mem (tuple2 (tuple2 a1 a1) (tuple2 d1 b1))
  (Tuple2 (tuple2 a1 a1) (tuple2 d1 b1) (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y))
  (Tuple2 d1 b1 (t2tb694 z) (t2tb14 w)))
  (parallel_product b1 a1 d1 a1 (t2tb903 h) (t2tb11 k)))
  (and (mem32 (tb2t904 (Tuple2 a1 d1 (t2tb2 x) (t2tb694 z))) h) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 y) (t2tb14 w))) k)))))

;; mem_parallel_product
  (assert
  (forall ((c2 ty) (d2 ty))
  (forall ((h (set (tuple21 a d))) (k uni) (x a) (y uni) (z d) (w uni))
  (= (mem (tuple2 (tuple2 a1 c2) (tuple2 d1 d2))
  (Tuple2 (tuple2 a1 c2) (tuple2 d1 d2) (Tuple2 a1 c2 (t2tb2 x) y)
  (Tuple2 d1 d2 (t2tb694 z) w)) (parallel_product d2 c2 d1 a1 (t2tb903 h) k))
  (and (mem32 (tb2t904 (Tuple2 a1 d1 (t2tb2 x) (t2tb694 z))) h) (mem
  (tuple2 c2 d2) (Tuple2 c2 d2 y w) k))))))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a c))) (k (set (tuple21 c d))) (x a) (y c) (z c)
  (w d))
  (= (mem (tuple2 (tuple2 a1 c1) (tuple2 c1 d1))
  (Tuple2 (tuple2 a1 c1) (tuple2 c1 d1) (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y))
  (Tuple2 c1 d1 (t2tb135 z) (t2tb694 w)))
  (parallel_product d1 c1 c1 a1 (t2tb129 h) (t2tb689 k)))
  (and (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 z))) h) (mem21
  (tb2t693 (Tuple2 c1 d1 (t2tb135 y) (t2tb694 w))) k)))))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a c))) (k (set (tuple21 b d))) (x a) (y b) (z c)
  (w d))
  (= (mem (tuple2 (tuple2 a1 b1) (tuple2 c1 d1))
  (Tuple2 (tuple2 a1 b1) (tuple2 c1 d1) (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y))
  (Tuple2 c1 d1 (t2tb135 z) (t2tb694 w)))
  (parallel_product d1 b1 c1 a1 (t2tb129 h) (t2tb687 k)))
  (and (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 z))) h) (mem23
  (tb2t692 (Tuple2 b1 d1 (t2tb14 y) (t2tb694 w))) k)))))

(declare-fun t2tb1178 ((set (tuple21 (tuple21 a b) (tuple21 c c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) (tuple21 c c))))) (sort
  (set1 (tuple2 (tuple2 a1 b1) (tuple2 c1 c1))) (t2tb1178 x))))

(declare-fun tb2t1178 (uni) (set (tuple21 (tuple21 a b) (tuple21 c c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a b) (tuple21 c c)))))
  (! (= (tb2t1178 (t2tb1178 i)) i) :pattern ((t2tb1178 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 b1) (tuple2 c1 c1))) j)
     (= (t2tb1178 (tb2t1178 j)) j)) :pattern ((t2tb1178 (tb2t1178 j))) )))

(declare-fun t2tb1179 ((tuple21 (tuple21 a b) (tuple21 c c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a b) (tuple21 c c)))) (sort
  (tuple2 (tuple2 a1 b1) (tuple2 c1 c1)) (t2tb1179 x))))

(declare-fun tb2t1179 (uni) (tuple21 (tuple21 a b) (tuple21 c c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a b) (tuple21 c c))))
  (! (= (tb2t1179 (t2tb1179 i)) i) :pattern ((t2tb1179 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 b1) (tuple2 c1 c1)) j)
     (= (t2tb1179 (tb2t1179 j)) j)) :pattern ((t2tb1179 (tb2t1179 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a c))) (k (set (tuple21 b c))) (x a) (y b) (z c)
  (w c))
  (= (mem (tuple2 (tuple2 a1 b1) (tuple2 c1 c1))
  (Tuple2 (tuple2 a1 b1) (tuple2 c1 c1) (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y))
  (Tuple2 c1 c1 (t2tb135 z) (t2tb135 w)))
  (parallel_product c1 b1 c1 a1 (t2tb129 h) (t2tb131 k)))
  (and (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 z))) h) (mem8
  (tb2t134 (Tuple2 b1 c1 (t2tb14 y) (t2tb135 w))) k)))))

(declare-fun t2tb2354 ((set (tuple21 (tuple21 a a) (tuple21 c d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a a) (tuple21 c d))))) (sort
  (set1 (tuple2 (tuple2 a1 a1) (tuple2 c1 d1))) (t2tb2354 x))))

(declare-fun tb2t2354 (uni) (set (tuple21 (tuple21 a a) (tuple21 c d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a a) (tuple21 c d)))))
  (! (= (tb2t2354 (t2tb2354 i)) i) :pattern ((t2tb2354 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 a1) (tuple2 c1 d1))) j)
     (= (t2tb2354 (tb2t2354 j)) j)) :pattern ((t2tb2354 (tb2t2354 j))) )))

(declare-fun t2tb2355 ((tuple21 (tuple21 a a) (tuple21 c d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a a) (tuple21 c d)))) (sort
  (tuple2 (tuple2 a1 a1) (tuple2 c1 d1)) (t2tb2355 x))))

(declare-fun tb2t2355 (uni) (tuple21 (tuple21 a a) (tuple21 c d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a a) (tuple21 c d))))
  (! (= (tb2t2355 (t2tb2355 i)) i) :pattern ((t2tb2355 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 a1) (tuple2 c1 d1)) j)
     (= (t2tb2355 (tb2t2355 j)) j)) :pattern ((t2tb2355 (tb2t2355 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a c))) (k (set (tuple21 a d))) (x a) (y a) (z c)
  (w d))
  (= (mem (tuple2 (tuple2 a1 a1) (tuple2 c1 d1))
  (Tuple2 (tuple2 a1 a1) (tuple2 c1 d1) (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y))
  (Tuple2 c1 d1 (t2tb135 z) (t2tb694 w)))
  (parallel_product d1 a1 c1 a1 (t2tb129 h) (t2tb903 k)))
  (and (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 z))) h) (mem32
  (tb2t904 (Tuple2 a1 d1 (t2tb2 y) (t2tb694 w))) k)))))

(declare-fun t2tb342 ((set (tuple21 (tuple21 a a) (tuple21 c c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a a) (tuple21 c c))))) (sort
  (set1 (tuple2 (tuple2 a1 a1) (tuple2 c1 c1))) (t2tb342 x))))

(declare-fun tb2t342 (uni) (set (tuple21 (tuple21 a a) (tuple21 c c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a a) (tuple21 c c)))))
  (! (= (tb2t342 (t2tb342 i)) i) :pattern ((t2tb342 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 a1) (tuple2 c1 c1))) j)
     (= (t2tb342 (tb2t342 j)) j)) :pattern ((t2tb342 (tb2t342 j))) )))

(declare-fun t2tb343 ((tuple21 (tuple21 a a) (tuple21 c c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a a) (tuple21 c c)))) (sort
  (tuple2 (tuple2 a1 a1) (tuple2 c1 c1)) (t2tb343 x))))

(declare-fun tb2t343 (uni) (tuple21 (tuple21 a a) (tuple21 c c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a a) (tuple21 c c))))
  (! (= (tb2t343 (t2tb343 i)) i) :pattern ((t2tb343 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 a1) (tuple2 c1 c1)) j)
     (= (t2tb343 (tb2t343 j)) j)) :pattern ((t2tb343 (tb2t343 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a c))) (k (set (tuple21 a c))) (x a) (y a) (z c)
  (w c))
  (= (mem (tuple2 (tuple2 a1 a1) (tuple2 c1 c1))
  (Tuple2 (tuple2 a1 a1) (tuple2 c1 c1) (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y))
  (Tuple2 c1 c1 (t2tb135 z) (t2tb135 w)))
  (parallel_product c1 a1 c1 a1 (t2tb129 h) (t2tb129 k)))
  (and (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 z))) h) (mem10
  (tb2t133 (Tuple2 a1 c1 (t2tb2 y) (t2tb135 w))) k)))))

(declare-fun t2tb344 ((set (tuple21 (tuple21 a a) (tuple21 c b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a a) (tuple21 c b))))) (sort
  (set1 (tuple2 (tuple2 a1 a1) (tuple2 c1 b1))) (t2tb344 x))))

(declare-fun tb2t344 (uni) (set (tuple21 (tuple21 a a) (tuple21 c b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a a) (tuple21 c b)))))
  (! (= (tb2t344 (t2tb344 i)) i) :pattern ((t2tb344 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 a1) (tuple2 c1 b1))) j)
     (= (t2tb344 (tb2t344 j)) j)) :pattern ((t2tb344 (tb2t344 j))) )))

(declare-fun t2tb345 ((tuple21 (tuple21 a a) (tuple21 c b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a a) (tuple21 c b)))) (sort
  (tuple2 (tuple2 a1 a1) (tuple2 c1 b1)) (t2tb345 x))))

(declare-fun tb2t345 (uni) (tuple21 (tuple21 a a) (tuple21 c b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a a) (tuple21 c b))))
  (! (= (tb2t345 (t2tb345 i)) i) :pattern ((t2tb345 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 a1) (tuple2 c1 b1)) j)
     (= (t2tb345 (tb2t345 j)) j)) :pattern ((t2tb345 (tb2t345 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a c))) (k (set (tuple21 a b))) (x a) (y a) (z c)
  (w b))
  (= (mem (tuple2 (tuple2 a1 a1) (tuple2 c1 b1))
  (Tuple2 (tuple2 a1 a1) (tuple2 c1 b1) (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y))
  (Tuple2 c1 b1 (t2tb135 z) (t2tb14 w)))
  (parallel_product b1 a1 c1 a1 (t2tb129 h) (t2tb11 k)))
  (and (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 z))) h) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 y) (t2tb14 w))) k)))))

;; mem_parallel_product
  (assert
  (forall ((c2 ty) (d2 ty))
  (forall ((h (set (tuple21 a c))) (k uni) (x a) (y uni) (z c) (w uni))
  (= (mem (tuple2 (tuple2 a1 c2) (tuple2 c1 d2))
  (Tuple2 (tuple2 a1 c2) (tuple2 c1 d2) (Tuple2 a1 c2 (t2tb2 x) y)
  (Tuple2 c1 d2 (t2tb135 z) w)) (parallel_product d2 c2 c1 a1 (t2tb129 h) k))
  (and (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 z))) h) (mem
  (tuple2 c2 d2) (Tuple2 c2 d2 y w) k))))))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a b))) (k (set (tuple21 c d))) (x a) (y c) (z b)
  (w d))
  (= (mem (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))
  (Tuple2 (tuple2 a1 c1) (tuple2 b1 d1) (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y))
  (Tuple2 b1 d1 (t2tb14 z) (t2tb694 w)))
  (parallel_product d1 c1 b1 a1 (t2tb11 h) (t2tb689 k)))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 z))) h) (mem21
  (tb2t693 (Tuple2 c1 d1 (t2tb135 y) (t2tb694 w))) k)))))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a b))) (k (set (tuple21 b d))) (x a) (y b) (z b)
  (w d))
  (= (mem (tuple2 (tuple2 a1 b1) (tuple2 b1 d1))
  (Tuple2 (tuple2 a1 b1) (tuple2 b1 d1) (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y))
  (Tuple2 b1 d1 (t2tb14 z) (t2tb694 w)))
  (parallel_product d1 b1 b1 a1 (t2tb11 h) (t2tb687 k)))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 z))) h) (mem23
  (tb2t692 (Tuple2 b1 d1 (t2tb14 y) (t2tb694 w))) k)))))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a b))) (k (set (tuple21 b c))) (x a) (y b) (z b)
  (w c))
  (= (mem (tuple2 (tuple2 a1 b1) (tuple2 b1 c1))
  (Tuple2 (tuple2 a1 b1) (tuple2 b1 c1) (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y))
  (Tuple2 b1 c1 (t2tb14 z) (t2tb135 w)))
  (parallel_product c1 b1 b1 a1 (t2tb11 h) (t2tb131 k)))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 z))) h) (mem8
  (tb2t134 (Tuple2 b1 c1 (t2tb14 y) (t2tb135 w))) k)))))

(declare-fun t2tb2356 ((set (tuple21 (tuple21 a a) (tuple21 b d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a a) (tuple21 b d))))) (sort
  (set1 (tuple2 (tuple2 a1 a1) (tuple2 b1 d1))) (t2tb2356 x))))

(declare-fun tb2t2356 (uni) (set (tuple21 (tuple21 a a) (tuple21 b d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a a) (tuple21 b d)))))
  (! (= (tb2t2356 (t2tb2356 i)) i) :pattern ((t2tb2356 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 a1) (tuple2 b1 d1))) j)
     (= (t2tb2356 (tb2t2356 j)) j)) :pattern ((t2tb2356 (tb2t2356 j))) )))

(declare-fun t2tb2357 ((tuple21 (tuple21 a a) (tuple21 b d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a a) (tuple21 b d)))) (sort
  (tuple2 (tuple2 a1 a1) (tuple2 b1 d1)) (t2tb2357 x))))

(declare-fun tb2t2357 (uni) (tuple21 (tuple21 a a) (tuple21 b d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a a) (tuple21 b d))))
  (! (= (tb2t2357 (t2tb2357 i)) i) :pattern ((t2tb2357 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 a1) (tuple2 b1 d1)) j)
     (= (t2tb2357 (tb2t2357 j)) j)) :pattern ((t2tb2357 (tb2t2357 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a b))) (k (set (tuple21 a d))) (x a) (y a) (z b)
  (w d))
  (= (mem (tuple2 (tuple2 a1 a1) (tuple2 b1 d1))
  (Tuple2 (tuple2 a1 a1) (tuple2 b1 d1) (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y))
  (Tuple2 b1 d1 (t2tb14 z) (t2tb694 w)))
  (parallel_product d1 a1 b1 a1 (t2tb11 h) (t2tb903 k)))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 z))) h) (mem32
  (tb2t904 (Tuple2 a1 d1 (t2tb2 y) (t2tb694 w))) k)))))

(declare-fun t2tb346 ((tuple21 (tuple21 a a) (tuple21 b c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a a) (tuple21 b c)))) (sort
  (tuple2 (tuple2 a1 a1) (tuple2 b1 c1)) (t2tb346 x))))

(declare-fun tb2t346 (uni) (tuple21 (tuple21 a a) (tuple21 b c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a a) (tuple21 b c))))
  (! (= (tb2t346 (t2tb346 i)) i) :pattern ((t2tb346 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 a1) (tuple2 b1 c1)) j)
     (= (t2tb346 (tb2t346 j)) j)) :pattern ((t2tb346 (tb2t346 j))) )))

(declare-fun t2tb347 ((set (tuple21 (tuple21 a a) (tuple21 b c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a a) (tuple21 b c))))) (sort
  (set1 (tuple2 (tuple2 a1 a1) (tuple2 b1 c1))) (t2tb347 x))))

(declare-fun tb2t347 (uni) (set (tuple21 (tuple21 a a) (tuple21 b c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a a) (tuple21 b c)))))
  (! (= (tb2t347 (t2tb347 i)) i) :pattern ((t2tb347 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 a1) (tuple2 b1 c1))) j)
     (= (t2tb347 (tb2t347 j)) j)) :pattern ((t2tb347 (tb2t347 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a b))) (k (set (tuple21 a c))) (x a) (y a) (z b)
  (w c))
  (= (mem (tuple2 (tuple2 a1 a1) (tuple2 b1 c1))
  (Tuple2 (tuple2 a1 a1) (tuple2 b1 c1) (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y))
  (Tuple2 b1 c1 (t2tb14 z) (t2tb135 w)))
  (parallel_product c1 a1 b1 a1 (t2tb11 h) (t2tb129 k)))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 z))) h) (mem10
  (tb2t133 (Tuple2 a1 c1 (t2tb2 y) (t2tb135 w))) k)))))

(declare-fun t2tb61 ((set (tuple21 (tuple21 a a) (tuple21 b b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a a) (tuple21 b b))))) (sort
  (set1 (tuple2 (tuple2 a1 a1) (tuple2 b1 b1))) (t2tb61 x))))

(declare-fun tb2t61 (uni) (set (tuple21 (tuple21 a a) (tuple21 b b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a a) (tuple21 b b)))))
  (! (= (tb2t61 (t2tb61 i)) i) :pattern ((t2tb61 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 a1) (tuple2 b1 b1))) j)
     (= (t2tb61 (tb2t61 j)) j)) :pattern ((t2tb61 (tb2t61 j))) )))

(declare-fun t2tb62 ((tuple21 (tuple21 a a) (tuple21 b b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a a) (tuple21 b b)))) (sort
  (tuple2 (tuple2 a1 a1) (tuple2 b1 b1)) (t2tb62 x))))

(declare-fun tb2t62 (uni) (tuple21 (tuple21 a a) (tuple21 b b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a a) (tuple21 b b))))
  (! (= (tb2t62 (t2tb62 i)) i) :pattern ((t2tb62 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 a1) (tuple2 b1 b1)) j)
     (= (t2tb62 (tb2t62 j)) j)) :pattern ((t2tb62 (tb2t62 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a b))) (k (set (tuple21 a b))) (x a) (y a) (z b)
  (w b))
  (= (mem (tuple2 (tuple2 a1 a1) (tuple2 b1 b1))
  (Tuple2 (tuple2 a1 a1) (tuple2 b1 b1) (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y))
  (Tuple2 b1 b1 (t2tb14 z) (t2tb14 w)))
  (parallel_product b1 a1 b1 a1 (t2tb11 h) (t2tb11 k)))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 z))) h) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 y) (t2tb14 w))) k)))))

;; mem_parallel_product
  (assert
  (forall ((c2 ty) (d2 ty))
  (forall ((h (set (tuple21 a b))) (k uni) (x a) (y uni) (z b) (w uni))
  (= (mem (tuple2 (tuple2 a1 c2) (tuple2 b1 d2))
  (Tuple2 (tuple2 a1 c2) (tuple2 b1 d2) (Tuple2 a1 c2 (t2tb2 x) y)
  (Tuple2 b1 d2 (t2tb14 z) w)) (parallel_product d2 c2 b1 a1 (t2tb11 h) k))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 z))) h) (mem
  (tuple2 c2 d2) (Tuple2 c2 d2 y w) k))))))

;; mem_parallel_product
  (assert
  (forall ((a2 ty) (b2 ty) (c2 ty) (d2 ty))
  (forall ((h uni) (k uni) (x uni) (y uni) (z uni) (w uni))
  (= (mem (tuple2 (tuple2 a2 c2) (tuple2 b2 d2))
  (Tuple2 (tuple2 a2 c2) (tuple2 b2 d2) (Tuple2 a2 c2 x y)
  (Tuple2 b2 d2 z w)) (parallel_product d2 c2 b2 a2 h k))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x z) h) (mem (tuple2 c2 d2)
  (Tuple2 c2 d2 y w) k))))))

(declare-fun infix_plmngt (ty ty uni uni) uni)

;; infix +->_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (set1 (tuple2 a2 b2)))
  (infix_plmngt b2 a2 x x1)))))

;; mem_partial_function_set
  (assert
  (forall ((s (set c)) (t (set d)) (f (set (tuple21 c d))))
  (= (mem22 f (tb2t688 (infix_plmngt d1 c1 (t2tb132 s) (t2tb690 t))))
  (and (mem22 f (relation7 s t))
  (forall ((x c) (y1 d) (y2 d))
  (=>
  (and (mem21 (tb2t693 (Tuple2 c1 d1 (t2tb135 x) (t2tb694 y1))) f) (mem21
  (tb2t693 (Tuple2 c1 d1 (t2tb135 x) (t2tb694 y2))) f)) (= y1 y2)))))))

;; mem_partial_function_set
  (assert
  (forall ((s (set b)) (t (set d)) (f (set (tuple21 b d))))
  (= (mem (set1 (tuple2 b1 d1)) (t2tb687 f)
  (infix_plmngt d1 b1 (t2tb12 s) (t2tb690 t)))
  (and (mem (set1 (tuple2 b1 d1)) (t2tb687 f)
  (relation d1 b1 (t2tb12 s) (t2tb690 t)))
  (forall ((x b) (y1 d) (y2 d))
  (=>
  (and (mem23 (tb2t692 (Tuple2 b1 d1 (t2tb14 x) (t2tb694 y1))) f) (mem23
  (tb2t692 (Tuple2 b1 d1 (t2tb14 x) (t2tb694 y2))) f)) (= y1 y2)))))))

;; mem_partial_function_set
  (assert
  (forall ((s (set b)) (t (set c)) (f (set (tuple21 b c))))
  (= (mem9 f (tb2t130 (infix_plmngt c1 b1 (t2tb12 s) (t2tb132 t))))
  (and (mem9 f (relation4 s t))
  (forall ((x b) (y1 c) (y2 c))
  (=>
  (and (mem8 (tb2t134 (Tuple2 b1 c1 (t2tb14 x) (t2tb135 y1))) f) (mem8
  (tb2t134 (Tuple2 b1 c1 (t2tb14 x) (t2tb135 y2))) f)) (= y1 y2)))))))

;; mem_partial_function_set
  (assert
  (forall ((s (set a)) (t (set d)) (f (set (tuple21 a d))))
  (= (mem (set1 (tuple2 a1 d1)) (t2tb903 f)
  (infix_plmngt d1 a1 (t2tb1 s) (t2tb690 t)))
  (and (mem (set1 (tuple2 a1 d1)) (t2tb903 f)
  (relation d1 a1 (t2tb1 s) (t2tb690 t)))
  (forall ((x a) (y1 d) (y2 d))
  (=>
  (and (mem32 (tb2t904 (Tuple2 a1 d1 (t2tb2 x) (t2tb694 y1))) f) (mem32
  (tb2t904 (Tuple2 a1 d1 (t2tb2 x) (t2tb694 y2))) f)) (= y1 y2)))))))

;; mem_partial_function_set
  (assert
  (forall ((s (set a)) (t (set c)) (f (set (tuple21 a c))))
  (= (mem (set1 (tuple2 a1 c1)) (t2tb129 f)
  (infix_plmngt c1 a1 (t2tb1 s) (t2tb132 t)))
  (and (mem (set1 (tuple2 a1 c1)) (t2tb129 f)
  (relation c1 a1 (t2tb1 s) (t2tb132 t)))
  (forall ((x a) (y1 c) (y2 c))
  (=>
  (and (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y1))) f) (mem10
  (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y2))) f)) (= y1 y2)))))))

;; mem_partial_function_set
  (assert
  (forall ((s (set a)) (t (set b)) (f (set (tuple21 a b))))
  (= (mem4 f (tb2t10 (infix_plmngt b1 a1 (t2tb1 s) (t2tb12 t))))
  (and (mem4 f (relation1 s t))
  (forall ((x a) (y1 b) (y2 b))
  (=>
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y1))) f) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y2))) f)) (= y1 y2)))))))

;; mem_partial_function_set
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (f uni))
  (and
  (=> (mem (set1 (tuple2 a2 b2)) f (infix_plmngt b2 a2 s t))
  (and (mem (set1 (tuple2 a2 b2)) f (relation b2 a2 s t))
  (forall ((x uni) (y1 uni) (y2 uni))
  (=> (sort b2 y1)
  (=> (sort b2 y2)
  (=>
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y1) f) (mem (tuple2 a2 b2)
  (Tuple2 a2 b2 x y2) f)) (= y1 y2)))))))
  (=>
  (and (mem (set1 (tuple2 a2 b2)) f (relation b2 a2 s t))
  (forall ((x uni) (y1 uni) (y2 uni))
  (=> (sort a2 x)
  (=> (sort b2 y1)
  (=> (sort b2 y2)
  (=>
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y1) f) (mem (tuple2 a2 b2)
  (Tuple2 a2 b2 x y2) f)) (= y1 y2))))))) (mem (set1 (tuple2 a2 b2)) f
  (infix_plmngt b2 a2 s t)))))))

(declare-fun infix_mnmngt (ty ty uni uni) uni)

;; infix -->_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (set1 (tuple2 a2 b2)))
  (infix_mnmngt b2 a2 x x1)))))

;; mem_total_function_set
  (assert
  (forall ((b2 ty))
  (forall ((s (set (tuple21 a d))) (t uni) (x uni))
  (= (mem (set1 (tuple2 (tuple2 a1 d1) b2)) x
  (infix_mnmngt b2 (tuple2 a1 d1) (t2tb903 s) t))
  (and (mem (set1 (tuple2 (tuple2 a1 d1) b2)) x
  (infix_plmngt b2 (tuple2 a1 d1) (t2tb903 s) t)) (infix_eqeq24
  (tb2t903 (dom b2 (tuple2 a1 d1) x)) s))))))

;; mem_total_function_set
  (assert
  (forall ((b2 ty))
  (forall ((s (set (tuple21 b d))) (t uni) (x uni))
  (= (mem (set1 (tuple2 (tuple2 b1 d1) b2)) x
  (infix_mnmngt b2 (tuple2 b1 d1) (t2tb687 s) t))
  (and (mem (set1 (tuple2 (tuple2 b1 d1) b2)) x
  (infix_plmngt b2 (tuple2 b1 d1) (t2tb687 s) t)) (infix_eqeq22
  (tb2t687 (dom b2 (tuple2 b1 d1) x)) s))))))

;; mem_total_function_set
  (assert
  (forall ((b2 ty))
  (forall ((s (set (set (tuple21 c d)))) (t uni) (x uni))
  (= (mem (set1 (tuple2 (set1 (tuple2 c1 d1)) b2)) x
  (infix_mnmngt b2 (set1 (tuple2 c1 d1)) (t2tb688 s) t))
  (and (mem (set1 (tuple2 (set1 (tuple2 c1 d1)) b2)) x
  (infix_plmngt b2 (set1 (tuple2 c1 d1)) (t2tb688 s) t)) (infix_eqeq16
  (tb2t688 (dom b2 (set1 (tuple2 c1 d1)) x)) s))))))

;; mem_total_function_set
  (assert
  (forall ((b2 ty))
  (forall ((s (set (tuple21 c d))) (t uni) (x uni))
  (= (mem (set1 (tuple2 (tuple2 c1 d1) b2)) x
  (infix_mnmngt b2 (tuple2 c1 d1) (t2tb689 s) t))
  (and (mem (set1 (tuple2 (tuple2 c1 d1) b2)) x
  (infix_plmngt b2 (tuple2 c1 d1) (t2tb689 s) t)) (infix_eqeq14
  (tb2t689 (dom b2 (tuple2 c1 d1) x)) s))))))

;; mem_total_function_set
  (assert
  (forall ((b2 ty))
  (forall ((s (set d)) (t uni) (x uni))
  (= (mem (set1 (tuple2 d1 b2)) x (infix_mnmngt b2 d1 (t2tb690 s) t))
  (and (mem (set1 (tuple2 d1 b2)) x (infix_plmngt b2 d1 (t2tb690 s) t))
  (infix_eqeq13 (tb2t690 (dom b2 d1 x)) s))))))

;; mem_total_function_set
  (assert
  (forall ((b2 ty))
  (forall ((s (set (tuple21 a c))) (t uni) (x uni))
  (= (mem (set1 (tuple2 (tuple2 a1 c1) b2)) x
  (infix_mnmngt b2 (tuple2 a1 c1) (t2tb129 s) t))
  (and (mem (set1 (tuple2 (tuple2 a1 c1) b2)) x
  (infix_plmngt b2 (tuple2 a1 c1) (t2tb129 s) t)) (infix_eqeq9
  (tb2t129 (dom b2 (tuple2 a1 c1) x)) s))))))

;; mem_total_function_set
  (assert
  (forall ((b2 ty))
  (forall ((s (set (set (tuple21 b c)))) (t uni) (x uni))
  (= (mem (set1 (tuple2 (set1 (tuple2 b1 c1)) b2)) x
  (infix_mnmngt b2 (set1 (tuple2 b1 c1)) (t2tb130 s) t))
  (and (mem (set1 (tuple2 (set1 (tuple2 b1 c1)) b2)) x
  (infix_plmngt b2 (set1 (tuple2 b1 c1)) (t2tb130 s) t)) (infix_eqeq10
  (tb2t130 (dom b2 (set1 (tuple2 b1 c1)) x)) s))))))

;; mem_total_function_set
  (assert
  (forall ((b2 ty))
  (forall ((s (set (tuple21 b c))) (t uni) (x uni))
  (= (mem (set1 (tuple2 (tuple2 b1 c1) b2)) x
  (infix_mnmngt b2 (tuple2 b1 c1) (t2tb131 s) t))
  (and (mem (set1 (tuple2 (tuple2 b1 c1) b2)) x
  (infix_plmngt b2 (tuple2 b1 c1) (t2tb131 s) t)) (infix_eqeq8
  (tb2t131 (dom b2 (tuple2 b1 c1) x)) s))))))

;; mem_total_function_set
  (assert
  (forall ((s (set c)) (t (set d)) (x (set (tuple21 c d))))
  (= (mem22 x (tb2t688 (infix_mnmngt d1 c1 (t2tb132 s) (t2tb690 t))))
  (and (mem22 x (tb2t688 (infix_plmngt d1 c1 (t2tb132 s) (t2tb690 t))))
  (infix_eqeq7 (tb2t132 (dom d1 c1 (t2tb689 x))) s)))))

;; mem_total_function_set
  (assert
  (forall ((b2 ty))
  (forall ((s (set c)) (t uni) (x uni))
  (= (mem (set1 (tuple2 c1 b2)) x (infix_mnmngt b2 c1 (t2tb132 s) t))
  (and (mem (set1 (tuple2 c1 b2)) x (infix_plmngt b2 c1 (t2tb132 s) t))
  (infix_eqeq7 (tb2t132 (dom b2 c1 x)) s))))))

;; mem_total_function_set
  (assert
  (forall ((b2 ty))
  (forall ((s (set (set (tuple21 a b)))) (t uni) (x uni))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 b1)) b2)) x
  (infix_mnmngt b2 (set1 (tuple2 a1 b1)) (t2tb10 s) t))
  (and (mem (set1 (tuple2 (set1 (tuple2 a1 b1)) b2)) x
  (infix_plmngt b2 (set1 (tuple2 a1 b1)) (t2tb10 s) t)) (infix_eqeq5
  (tb2t10 (dom b2 (set1 (tuple2 a1 b1)) x)) s))))))

;; mem_total_function_set
  (assert
  (forall ((b2 ty))
  (forall ((s (set (tuple21 a b))) (t uni) (x uni))
  (= (mem (set1 (tuple2 (tuple2 a1 b1) b2)) x
  (infix_mnmngt b2 (tuple2 a1 b1) (t2tb11 s) t))
  (and (mem (set1 (tuple2 (tuple2 a1 b1) b2)) x
  (infix_plmngt b2 (tuple2 a1 b1) (t2tb11 s) t)) (infix_eqeq4
  (tb2t11 (dom b2 (tuple2 a1 b1) x)) s))))))

;; mem_total_function_set
  (assert
  (forall ((s (set b)) (t (set c)) (x (set (tuple21 b c))))
  (= (mem9 x (tb2t130 (infix_mnmngt c1 b1 (t2tb12 s) (t2tb132 t))))
  (and (mem9 x (tb2t130 (infix_plmngt c1 b1 (t2tb12 s) (t2tb132 t))))
  (infix_eqeq3 (tb2t12 (dom c1 b1 (t2tb131 x))) s)))))

;; mem_total_function_set
  (assert
  (forall ((b2 ty))
  (forall ((s (set b)) (t uni) (x uni))
  (= (mem (set1 (tuple2 b1 b2)) x (infix_mnmngt b2 b1 (t2tb12 s) t))
  (and (mem (set1 (tuple2 b1 b2)) x (infix_plmngt b2 b1 (t2tb12 s) t))
  (infix_eqeq3 (tb2t12 (dom b2 b1 x)) s))))))

;; mem_total_function_set
  (assert
  (forall ((s (set a)) (t (set b)) (x (set (tuple21 a b))))
  (= (mem4 x (tb2t10 (infix_mnmngt b1 a1 (t2tb1 s) (t2tb12 t))))
  (and (mem4 x (tb2t10 (infix_plmngt b1 a1 (t2tb1 s) (t2tb12 t))))
  (infix_eqeq1 (tb2t1 (dom b1 a1 (t2tb11 x))) s)))))

;; mem_total_function_set
  (assert
  (forall ((b2 ty))
  (forall ((s (set a)) (t uni) (x uni))
  (= (mem (set1 (tuple2 a1 b2)) x (infix_mnmngt b2 a1 (t2tb1 s) t))
  (and (mem (set1 (tuple2 a1 b2)) x (infix_plmngt b2 a1 (t2tb1 s) t))
  (infix_eqeq1 (tb2t1 (dom b2 a1 x)) s))))))

;; mem_total_function_set
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (x uni))
  (= (mem (set1 (tuple2 a2 b2)) x (infix_mnmngt b2 a2 s t))
  (and (mem (set1 (tuple2 a2 b2)) x (infix_plmngt b2 a2 s t)) (infix_eqeq a2
  (dom b2 a2 x) s))))))

(declare-fun infix_gtplgt (ty ty uni uni) uni)

;; infix >+>_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (set1 (tuple2 a2 b2)))
  (infix_gtplgt b2 a2 x x1)))))

;; mem_partial_injection_set
  (assert
  (forall ((s (set d)) (t (set c)) (x (set (tuple21 d c))))
  (= (mem (set1 (tuple2 d1 c1)) (t2tb829 x)
  (infix_gtplgt c1 d1 (t2tb690 s) (t2tb132 t)))
  (and (mem (set1 (tuple2 d1 c1)) (t2tb829 x)
  (infix_plmngt c1 d1 (t2tb690 s) (t2tb132 t))) (mem22
  (tb2t689 (inverse c1 d1 (t2tb829 x)))
  (tb2t688 (infix_plmngt d1 c1 (t2tb132 t) (t2tb690 s))))))))

;; mem_partial_injection_set
  (assert
  (forall ((s (set c)) (t (set d)) (x (set (tuple21 c d))))
  (= (mem22 x (tb2t688 (infix_gtplgt d1 c1 (t2tb132 s) (t2tb690 t))))
  (and (mem22 x (tb2t688 (infix_plmngt d1 c1 (t2tb132 s) (t2tb690 t)))) (mem
  (set1 (tuple2 d1 c1)) (inverse d1 c1 (t2tb689 x))
  (infix_plmngt c1 d1 (t2tb690 t) (t2tb132 s)))))))

;; mem_partial_injection_set
  (assert
  (forall ((s (set c)) (t (set b)) (x (set (tuple21 c b))))
  (= (mem (set1 (tuple2 c1 b1)) (t2tb222 x)
  (infix_gtplgt b1 c1 (t2tb132 s) (t2tb12 t)))
  (and (mem (set1 (tuple2 c1 b1)) (t2tb222 x)
  (infix_plmngt b1 c1 (t2tb132 s) (t2tb12 t))) (mem9
  (tb2t131 (inverse b1 c1 (t2tb222 x)))
  (tb2t130 (infix_plmngt c1 b1 (t2tb12 t) (t2tb132 s))))))))

;; mem_partial_injection_set
  (assert
  (forall ((s (set b)) (t (set c)) (x (set (tuple21 b c))))
  (= (mem9 x (tb2t130 (infix_gtplgt c1 b1 (t2tb12 s) (t2tb132 t))))
  (and (mem9 x (tb2t130 (infix_plmngt c1 b1 (t2tb12 s) (t2tb132 t)))) (mem
  (set1 (tuple2 c1 b1)) (inverse c1 b1 (t2tb131 x))
  (infix_plmngt b1 c1 (t2tb132 t) (t2tb12 s)))))))

;; mem_partial_injection_set
  (assert
  (forall ((s (set b)) (t (set a)) (x (set (tuple21 b a))))
  (= (mem (set1 (tuple2 b1 a1)) (t2tb37 x)
  (infix_gtplgt a1 b1 (t2tb12 s) (t2tb1 t)))
  (and (mem (set1 (tuple2 b1 a1)) (t2tb37 x)
  (infix_plmngt a1 b1 (t2tb12 s) (t2tb1 t))) (mem4
  (tb2t11 (inverse a1 b1 (t2tb37 x)))
  (tb2t10 (infix_plmngt b1 a1 (t2tb1 t) (t2tb12 s))))))))

;; mem_partial_injection_set
  (assert
  (forall ((s (set a)) (t (set b)) (x (set (tuple21 a b))))
  (= (mem4 x (tb2t10 (infix_gtplgt b1 a1 (t2tb1 s) (t2tb12 t))))
  (and (mem4 x (tb2t10 (infix_plmngt b1 a1 (t2tb1 s) (t2tb12 t)))) (mem
  (set1 (tuple2 b1 a1)) (inverse b1 a1 (t2tb11 x))
  (infix_plmngt a1 b1 (t2tb12 t) (t2tb1 s)))))))

;; mem_partial_injection_set
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (x uni))
  (= (mem (set1 (tuple2 a2 b2)) x (infix_gtplgt b2 a2 s t))
  (and (mem (set1 (tuple2 a2 b2)) x (infix_plmngt b2 a2 s t)) (mem
  (set1 (tuple2 b2 a2)) (inverse b2 a2 x) (infix_plmngt a2 b2 t s)))))))

(declare-fun infix_gtmngt (ty ty uni uni) uni)

;; infix >->_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (set1 (tuple2 a2 b2)))
  (infix_gtmngt b2 a2 x x1)))))

;; mem_total_injection_set
  (assert
  (forall ((s (set c)) (t (set d)) (x (set (tuple21 c d))))
  (= (mem22 x (tb2t688 (infix_gtmngt d1 c1 (t2tb132 s) (t2tb690 t))))
  (and (mem22 x (tb2t688 (infix_gtplgt d1 c1 (t2tb132 s) (t2tb690 t))))
  (mem22 x (tb2t688 (infix_mnmngt d1 c1 (t2tb132 s) (t2tb690 t))))))))

;; mem_total_injection_set
  (assert
  (forall ((s (set b)) (t (set c)) (x (set (tuple21 b c))))
  (= (mem9 x (tb2t130 (infix_gtmngt c1 b1 (t2tb12 s) (t2tb132 t))))
  (and (mem9 x (tb2t130 (infix_gtplgt c1 b1 (t2tb12 s) (t2tb132 t)))) (mem9 x
  (tb2t130 (infix_mnmngt c1 b1 (t2tb12 s) (t2tb132 t))))))))

;; mem_total_injection_set
  (assert
  (forall ((s (set a)) (t (set b)) (x (set (tuple21 a b))))
  (= (mem4 x (tb2t10 (infix_gtmngt b1 a1 (t2tb1 s) (t2tb12 t))))
  (and (mem4 x (tb2t10 (infix_gtplgt b1 a1 (t2tb1 s) (t2tb12 t)))) (mem4 x
  (tb2t10 (infix_mnmngt b1 a1 (t2tb1 s) (t2tb12 t))))))))

;; mem_total_injection_set
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (x uni))
  (= (mem (set1 (tuple2 a2 b2)) x (infix_gtmngt b2 a2 s t))
  (and (mem (set1 (tuple2 a2 b2)) x (infix_gtplgt b2 a2 s t)) (mem
  (set1 (tuple2 a2 b2)) x (infix_mnmngt b2 a2 s t)))))))

(declare-fun infix_plmngtgt (ty ty uni uni) uni)

;; infix +->>_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (set1 (tuple2 a2 b2)))
  (infix_plmngtgt b2 a2 x x1)))))

;; mem_partial_surjection_set
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set (tuple21 a d))) (x uni))
  (= (mem (set1 (tuple2 a2 (tuple2 a1 d1))) x
  (infix_plmngtgt (tuple2 a1 d1) a2 s (t2tb903 t)))
  (and (mem (set1 (tuple2 a2 (tuple2 a1 d1))) x
  (infix_plmngt (tuple2 a1 d1) a2 s (t2tb903 t))) (infix_eqeq24
  (tb2t903 (ran (tuple2 a1 d1) a2 x)) t))))))

;; mem_partial_surjection_set
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set (tuple21 b d))) (x uni))
  (= (mem (set1 (tuple2 a2 (tuple2 b1 d1))) x
  (infix_plmngtgt (tuple2 b1 d1) a2 s (t2tb687 t)))
  (and (mem (set1 (tuple2 a2 (tuple2 b1 d1))) x
  (infix_plmngt (tuple2 b1 d1) a2 s (t2tb687 t))) (infix_eqeq22
  (tb2t687 (ran (tuple2 b1 d1) a2 x)) t))))))

;; mem_partial_surjection_set
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set (set (tuple21 c d)))) (x uni))
  (= (mem (set1 (tuple2 a2 (set1 (tuple2 c1 d1)))) x
  (infix_plmngtgt (set1 (tuple2 c1 d1)) a2 s (t2tb688 t)))
  (and (mem (set1 (tuple2 a2 (set1 (tuple2 c1 d1)))) x
  (infix_plmngt (set1 (tuple2 c1 d1)) a2 s (t2tb688 t))) (infix_eqeq16
  (tb2t688 (ran (set1 (tuple2 c1 d1)) a2 x)) t))))))

;; mem_partial_surjection_set
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set (tuple21 c d))) (x uni))
  (= (mem (set1 (tuple2 a2 (tuple2 c1 d1))) x
  (infix_plmngtgt (tuple2 c1 d1) a2 s (t2tb689 t)))
  (and (mem (set1 (tuple2 a2 (tuple2 c1 d1))) x
  (infix_plmngt (tuple2 c1 d1) a2 s (t2tb689 t))) (infix_eqeq14
  (tb2t689 (ran (tuple2 c1 d1) a2 x)) t))))))

;; mem_partial_surjection_set
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set d)) (x uni))
  (= (mem (set1 (tuple2 a2 d1)) x (infix_plmngtgt d1 a2 s (t2tb690 t)))
  (and (mem (set1 (tuple2 a2 d1)) x (infix_plmngt d1 a2 s (t2tb690 t)))
  (infix_eqeq13 (tb2t690 (ran d1 a2 x)) t))))))

;; mem_partial_surjection_set
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set (tuple21 a c))) (x uni))
  (= (mem (set1 (tuple2 a2 (tuple2 a1 c1))) x
  (infix_plmngtgt (tuple2 a1 c1) a2 s (t2tb129 t)))
  (and (mem (set1 (tuple2 a2 (tuple2 a1 c1))) x
  (infix_plmngt (tuple2 a1 c1) a2 s (t2tb129 t))) (infix_eqeq9
  (tb2t129 (ran (tuple2 a1 c1) a2 x)) t))))))

;; mem_partial_surjection_set
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set (set (tuple21 b c)))) (x uni))
  (= (mem (set1 (tuple2 a2 (set1 (tuple2 b1 c1)))) x
  (infix_plmngtgt (set1 (tuple2 b1 c1)) a2 s (t2tb130 t)))
  (and (mem (set1 (tuple2 a2 (set1 (tuple2 b1 c1)))) x
  (infix_plmngt (set1 (tuple2 b1 c1)) a2 s (t2tb130 t))) (infix_eqeq10
  (tb2t130 (ran (set1 (tuple2 b1 c1)) a2 x)) t))))))

;; mem_partial_surjection_set
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set (tuple21 b c))) (x uni))
  (= (mem (set1 (tuple2 a2 (tuple2 b1 c1))) x
  (infix_plmngtgt (tuple2 b1 c1) a2 s (t2tb131 t)))
  (and (mem (set1 (tuple2 a2 (tuple2 b1 c1))) x
  (infix_plmngt (tuple2 b1 c1) a2 s (t2tb131 t))) (infix_eqeq8
  (tb2t131 (ran (tuple2 b1 c1) a2 x)) t))))))

;; mem_partial_surjection_set
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set c)) (x uni))
  (= (mem (set1 (tuple2 a2 c1)) x (infix_plmngtgt c1 a2 s (t2tb132 t)))
  (and (mem (set1 (tuple2 a2 c1)) x (infix_plmngt c1 a2 s (t2tb132 t)))
  (infix_eqeq7 (tb2t132 (ran c1 a2 x)) t))))))

;; mem_partial_surjection_set
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set (set (tuple21 a b)))) (x uni))
  (= (mem (set1 (tuple2 a2 (set1 (tuple2 a1 b1)))) x
  (infix_plmngtgt (set1 (tuple2 a1 b1)) a2 s (t2tb10 t)))
  (and (mem (set1 (tuple2 a2 (set1 (tuple2 a1 b1)))) x
  (infix_plmngt (set1 (tuple2 a1 b1)) a2 s (t2tb10 t))) (infix_eqeq5
  (tb2t10 (ran (set1 (tuple2 a1 b1)) a2 x)) t))))))

;; mem_partial_surjection_set
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set (tuple21 a b))) (x uni))
  (= (mem (set1 (tuple2 a2 (tuple2 a1 b1))) x
  (infix_plmngtgt (tuple2 a1 b1) a2 s (t2tb11 t)))
  (and (mem (set1 (tuple2 a2 (tuple2 a1 b1))) x
  (infix_plmngt (tuple2 a1 b1) a2 s (t2tb11 t))) (infix_eqeq4
  (tb2t11 (ran (tuple2 a1 b1) a2 x)) t))))))

;; mem_partial_surjection_set
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set b)) (x uni))
  (= (mem (set1 (tuple2 a2 b1)) x (infix_plmngtgt b1 a2 s (t2tb12 t)))
  (and (mem (set1 (tuple2 a2 b1)) x (infix_plmngt b1 a2 s (t2tb12 t)))
  (infix_eqeq3 (tb2t12 (ran b1 a2 x)) t))))))

;; mem_partial_surjection_set
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set a)) (x uni))
  (= (mem (set1 (tuple2 a2 a1)) x (infix_plmngtgt a1 a2 s (t2tb1 t)))
  (and (mem (set1 (tuple2 a2 a1)) x (infix_plmngt a1 a2 s (t2tb1 t)))
  (infix_eqeq1 (tb2t1 (ran a1 a2 x)) t))))))

;; mem_partial_surjection_set
  (assert
  (forall ((s (set c)) (t (set d)) (x (set (tuple21 c d))))
  (= (mem22 x (tb2t688 (infix_plmngtgt d1 c1 (t2tb132 s) (t2tb690 t))))
  (and (mem22 x (tb2t688 (infix_plmngt d1 c1 (t2tb132 s) (t2tb690 t))))
  (infix_eqeq13 (tb2t690 (ran d1 c1 (t2tb689 x))) t)))))

;; mem_partial_surjection_set
  (assert
  (forall ((s (set b)) (t (set c)) (x (set (tuple21 b c))))
  (= (mem9 x (tb2t130 (infix_plmngtgt c1 b1 (t2tb12 s) (t2tb132 t))))
  (and (mem9 x (tb2t130 (infix_plmngt c1 b1 (t2tb12 s) (t2tb132 t))))
  (infix_eqeq7 (tb2t132 (ran c1 b1 (t2tb131 x))) t)))))

;; mem_partial_surjection_set
  (assert
  (forall ((s (set a)) (t (set b)) (x (set (tuple21 a b))))
  (= (mem4 x (tb2t10 (infix_plmngtgt b1 a1 (t2tb1 s) (t2tb12 t))))
  (and (mem4 x (tb2t10 (infix_plmngt b1 a1 (t2tb1 s) (t2tb12 t))))
  (infix_eqeq3 (tb2t12 (ran b1 a1 (t2tb11 x))) t)))))

;; mem_partial_surjection_set
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (x uni))
  (= (mem (set1 (tuple2 a2 b2)) x (infix_plmngtgt b2 a2 s t))
  (and (mem (set1 (tuple2 a2 b2)) x (infix_plmngt b2 a2 s t)) (infix_eqeq b2
  (ran b2 a2 x) t))))))

(declare-fun infix_mnmngtgt (ty ty uni uni) uni)

;; infix -->>_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (set1 (tuple2 a2 b2)))
  (infix_mnmngtgt b2 a2 x x1)))))

;; mem_total_surjection_set
  (assert
  (forall ((s (set c)) (t (set d)) (x (set (tuple21 c d))))
  (= (mem22 x (tb2t688 (infix_mnmngtgt d1 c1 (t2tb132 s) (t2tb690 t))))
  (and (mem22 x (tb2t688 (infix_plmngtgt d1 c1 (t2tb132 s) (t2tb690 t))))
  (mem22 x (tb2t688 (infix_mnmngt d1 c1 (t2tb132 s) (t2tb690 t))))))))

;; mem_total_surjection_set
  (assert
  (forall ((s (set b)) (t (set c)) (x (set (tuple21 b c))))
  (= (mem9 x (tb2t130 (infix_mnmngtgt c1 b1 (t2tb12 s) (t2tb132 t))))
  (and (mem9 x (tb2t130 (infix_plmngtgt c1 b1 (t2tb12 s) (t2tb132 t)))) (mem9
  x (tb2t130 (infix_mnmngt c1 b1 (t2tb12 s) (t2tb132 t))))))))

;; mem_total_surjection_set
  (assert
  (forall ((s (set a)) (t (set b)) (x (set (tuple21 a b))))
  (= (mem4 x (tb2t10 (infix_mnmngtgt b1 a1 (t2tb1 s) (t2tb12 t))))
  (and (mem4 x (tb2t10 (infix_plmngtgt b1 a1 (t2tb1 s) (t2tb12 t)))) (mem4 x
  (tb2t10 (infix_mnmngt b1 a1 (t2tb1 s) (t2tb12 t))))))))

;; mem_total_surjection_set
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (x uni))
  (= (mem (set1 (tuple2 a2 b2)) x (infix_mnmngtgt b2 a2 s t))
  (and (mem (set1 (tuple2 a2 b2)) x (infix_plmngtgt b2 a2 s t)) (mem
  (set1 (tuple2 a2 b2)) x (infix_mnmngt b2 a2 s t)))))))

(declare-fun infix_gtplgtgt (ty ty uni uni) uni)

;; infix >+>>_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (set1 (tuple2 a2 b2)))
  (infix_gtplgtgt b2 a2 x x1)))))

;; mem_partial_bijection_set
  (assert
  (forall ((s (set c)) (t (set d)) (x (set (tuple21 c d))))
  (= (mem22 x (tb2t688 (infix_gtplgtgt d1 c1 (t2tb132 s) (t2tb690 t))))
  (and (mem22 x (tb2t688 (infix_gtplgt d1 c1 (t2tb132 s) (t2tb690 t))))
  (mem22 x (tb2t688 (infix_plmngtgt d1 c1 (t2tb132 s) (t2tb690 t))))))))

;; mem_partial_bijection_set
  (assert
  (forall ((s (set b)) (t (set c)) (x (set (tuple21 b c))))
  (= (mem9 x (tb2t130 (infix_gtplgtgt c1 b1 (t2tb12 s) (t2tb132 t))))
  (and (mem9 x (tb2t130 (infix_gtplgt c1 b1 (t2tb12 s) (t2tb132 t)))) (mem9 x
  (tb2t130 (infix_plmngtgt c1 b1 (t2tb12 s) (t2tb132 t))))))))

;; mem_partial_bijection_set
  (assert
  (forall ((s (set a)) (t (set b)) (x (set (tuple21 a b))))
  (= (mem4 x (tb2t10 (infix_gtplgtgt b1 a1 (t2tb1 s) (t2tb12 t))))
  (and (mem4 x (tb2t10 (infix_gtplgt b1 a1 (t2tb1 s) (t2tb12 t)))) (mem4 x
  (tb2t10 (infix_plmngtgt b1 a1 (t2tb1 s) (t2tb12 t))))))))

;; mem_partial_bijection_set
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (x uni))
  (= (mem (set1 (tuple2 a2 b2)) x (infix_gtplgtgt b2 a2 s t))
  (and (mem (set1 (tuple2 a2 b2)) x (infix_gtplgt b2 a2 s t)) (mem
  (set1 (tuple2 a2 b2)) x (infix_plmngtgt b2 a2 s t)))))))

(declare-fun infix_gtmngtgt (ty ty uni uni) uni)

;; infix >->>_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (set1 (tuple2 a2 b2)))
  (infix_gtmngtgt b2 a2 x x1)))))

;; mem_total_bijection_set
  (assert
  (forall ((s (set c)) (t (set d)) (x (set (tuple21 c d))))
  (= (mem22 x (tb2t688 (infix_gtmngtgt d1 c1 (t2tb132 s) (t2tb690 t))))
  (and (mem22 x (tb2t688 (infix_gtmngt d1 c1 (t2tb132 s) (t2tb690 t))))
  (mem22 x (tb2t688 (infix_mnmngtgt d1 c1 (t2tb132 s) (t2tb690 t))))))))

;; mem_total_bijection_set
  (assert
  (forall ((s (set b)) (t (set c)) (x (set (tuple21 b c))))
  (= (mem9 x (tb2t130 (infix_gtmngtgt c1 b1 (t2tb12 s) (t2tb132 t))))
  (and (mem9 x (tb2t130 (infix_gtmngt c1 b1 (t2tb12 s) (t2tb132 t)))) (mem9 x
  (tb2t130 (infix_mnmngtgt c1 b1 (t2tb12 s) (t2tb132 t))))))))

;; mem_total_bijection_set
  (assert
  (forall ((s (set a)) (t (set b)) (x (set (tuple21 a b))))
  (= (mem4 x (tb2t10 (infix_gtmngtgt b1 a1 (t2tb1 s) (t2tb12 t))))
  (and (mem4 x (tb2t10 (infix_gtmngt b1 a1 (t2tb1 s) (t2tb12 t)))) (mem4 x
  (tb2t10 (infix_mnmngtgt b1 a1 (t2tb1 s) (t2tb12 t))))))))

;; mem_total_bijection_set
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (x uni))
  (= (mem (set1 (tuple2 a2 b2)) x (infix_gtmngtgt b2 a2 s t))
  (and (mem (set1 (tuple2 a2 b2)) x (infix_gtmngt b2 a2 s t)) (mem
  (set1 (tuple2 a2 b2)) x (infix_mnmngtgt b2 a2 s t)))))))

(declare-fun apply (ty ty uni uni) uni)

;; apply_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort b2 (apply b2 a2 x x1)))))

;; apply_def0
  (assert
  (forall ((b2 ty))
  (forall ((f uni) (s (set (tuple21 a d))) (t uni) (a2 (tuple21 a d)))
  (=>
  (and (mem (set1 (tuple2 (tuple2 a1 d1) b2)) f
  (infix_plmngt b2 (tuple2 a1 d1) (t2tb903 s) t)) (mem32 a2
  (tb2t903 (dom b2 (tuple2 a1 d1) f)))) (mem (tuple2 (tuple2 a1 d1) b2)
  (Tuple2 (tuple2 a1 d1) b2 (t2tb904 a2)
  (apply b2 (tuple2 a1 d1) f (t2tb904 a2))) f)))))

;; apply_def0
  (assert
  (forall ((b2 ty))
  (forall ((f uni) (s (set (tuple21 b d))) (t uni) (a2 (tuple21 b d)))
  (=>
  (and (mem (set1 (tuple2 (tuple2 b1 d1) b2)) f
  (infix_plmngt b2 (tuple2 b1 d1) (t2tb687 s) t)) (mem23 a2
  (tb2t687 (dom b2 (tuple2 b1 d1) f)))) (mem (tuple2 (tuple2 b1 d1) b2)
  (Tuple2 (tuple2 b1 d1) b2 (t2tb692 a2)
  (apply b2 (tuple2 b1 d1) f (t2tb692 a2))) f)))))

;; apply_def0
  (assert
  (forall ((b2 ty))
  (forall ((f uni) (s (set (set (tuple21 c d)))) (t uni) (a2 (set (tuple21 c
  d))))
  (=>
  (and (mem (set1 (tuple2 (set1 (tuple2 c1 d1)) b2)) f
  (infix_plmngt b2 (set1 (tuple2 c1 d1)) (t2tb688 s) t)) (mem22 a2
  (tb2t688 (dom b2 (set1 (tuple2 c1 d1)) f)))) (mem
  (tuple2 (set1 (tuple2 c1 d1)) b2)
  (Tuple2 (set1 (tuple2 c1 d1)) b2 (t2tb689 a2)
  (apply b2 (set1 (tuple2 c1 d1)) f (t2tb689 a2))) f)))))

;; apply_def0
  (assert
  (forall ((b2 ty))
  (forall ((f uni) (s (set (tuple21 c d))) (t uni) (a2 (tuple21 c d)))
  (=>
  (and (mem (set1 (tuple2 (tuple2 c1 d1) b2)) f
  (infix_plmngt b2 (tuple2 c1 d1) (t2tb689 s) t)) (mem21 a2
  (tb2t689 (dom b2 (tuple2 c1 d1) f)))) (mem (tuple2 (tuple2 c1 d1) b2)
  (Tuple2 (tuple2 c1 d1) b2 (t2tb693 a2)
  (apply b2 (tuple2 c1 d1) f (t2tb693 a2))) f)))))

;; apply_def0
  (assert
  (forall ((b2 ty))
  (forall ((f uni) (s (set d)) (t uni) (a2 d))
  (=>
  (and (mem (set1 (tuple2 d1 b2)) f (infix_plmngt b2 d1 (t2tb690 s) t))
  (mem20 a2 (tb2t690 (dom b2 d1 f)))) (mem (tuple2 d1 b2)
  (Tuple2 d1 b2 (t2tb694 a2) (apply b2 d1 f (t2tb694 a2))) f)))))

;; apply_def0
  (assert
  (forall ((b2 ty))
  (forall ((f uni) (s (set (tuple21 a c))) (t uni) (a2 (tuple21 a c)))
  (=>
  (and (mem (set1 (tuple2 (tuple2 a1 c1) b2)) f
  (infix_plmngt b2 (tuple2 a1 c1) (t2tb129 s) t)) (mem10 a2
  (tb2t129 (dom b2 (tuple2 a1 c1) f)))) (mem (tuple2 (tuple2 a1 c1) b2)
  (Tuple2 (tuple2 a1 c1) b2 (t2tb133 a2)
  (apply b2 (tuple2 a1 c1) f (t2tb133 a2))) f)))))

;; apply_def0
  (assert
  (forall ((b2 ty))
  (forall ((f uni) (s (set (set (tuple21 b c)))) (t uni) (a2 (set (tuple21 b
  c))))
  (=>
  (and (mem (set1 (tuple2 (set1 (tuple2 b1 c1)) b2)) f
  (infix_plmngt b2 (set1 (tuple2 b1 c1)) (t2tb130 s) t)) (mem9 a2
  (tb2t130 (dom b2 (set1 (tuple2 b1 c1)) f)))) (mem
  (tuple2 (set1 (tuple2 b1 c1)) b2)
  (Tuple2 (set1 (tuple2 b1 c1)) b2 (t2tb131 a2)
  (apply b2 (set1 (tuple2 b1 c1)) f (t2tb131 a2))) f)))))

;; apply_def0
  (assert
  (forall ((b2 ty))
  (forall ((f uni) (s (set (tuple21 b c))) (t uni) (a2 (tuple21 b c)))
  (=>
  (and (mem (set1 (tuple2 (tuple2 b1 c1) b2)) f
  (infix_plmngt b2 (tuple2 b1 c1) (t2tb131 s) t)) (mem8 a2
  (tb2t131 (dom b2 (tuple2 b1 c1) f)))) (mem (tuple2 (tuple2 b1 c1) b2)
  (Tuple2 (tuple2 b1 c1) b2 (t2tb134 a2)
  (apply b2 (tuple2 b1 c1) f (t2tb134 a2))) f)))))

;; apply_def0
  (assert
  (forall ((f (set (tuple21 c d))) (s (set c)) (t (set d)) (a2 c))
  (=>
  (and (mem22 f (tb2t688 (infix_plmngt d1 c1 (t2tb132 s) (t2tb690 t)))) (mem7
  a2 (tb2t132 (dom d1 c1 (t2tb689 f))))) (mem21
  (tb2t693
  (Tuple2 c1 d1 (t2tb135 a2) (apply d1 c1 (t2tb689 f) (t2tb135 a2)))) f))))

;; apply_def0
  (assert
  (forall ((b2 ty))
  (forall ((f uni) (s (set c)) (t uni) (a2 c))
  (=>
  (and (mem (set1 (tuple2 c1 b2)) f (infix_plmngt b2 c1 (t2tb132 s) t)) (mem7
  a2 (tb2t132 (dom b2 c1 f)))) (mem (tuple2 c1 b2)
  (Tuple2 c1 b2 (t2tb135 a2) (apply b2 c1 f (t2tb135 a2))) f)))))

;; apply_def0
  (assert
  (forall ((b2 ty))
  (forall ((f uni) (s (set (set (tuple21 a b)))) (t uni) (a2 (set (tuple21 a
  b))))
  (=>
  (and (mem (set1 (tuple2 (set1 (tuple2 a1 b1)) b2)) f
  (infix_plmngt b2 (set1 (tuple2 a1 b1)) (t2tb10 s) t)) (mem4 a2
  (tb2t10 (dom b2 (set1 (tuple2 a1 b1)) f)))) (mem
  (tuple2 (set1 (tuple2 a1 b1)) b2)
  (Tuple2 (set1 (tuple2 a1 b1)) b2 (t2tb11 a2)
  (apply b2 (set1 (tuple2 a1 b1)) f (t2tb11 a2))) f)))))

;; apply_def0
  (assert
  (forall ((b2 ty))
  (forall ((f uni) (s (set (tuple21 a b))) (t uni) (a2 (tuple21 a b)))
  (=>
  (and (mem (set1 (tuple2 (tuple2 a1 b1) b2)) f
  (infix_plmngt b2 (tuple2 a1 b1) (t2tb11 s) t)) (mem3 a2
  (tb2t11 (dom b2 (tuple2 a1 b1) f)))) (mem (tuple2 (tuple2 a1 b1) b2)
  (Tuple2 (tuple2 a1 b1) b2 (t2tb13 a2)
  (apply b2 (tuple2 a1 b1) f (t2tb13 a2))) f)))))

;; apply_def0
  (assert
  (forall ((f (set (tuple21 b d))) (s (set b)) (t (set d)) (a2 b))
  (=>
  (and (mem (set1 (tuple2 b1 d1)) (t2tb687 f)
  (infix_plmngt d1 b1 (t2tb12 s) (t2tb690 t))) (mem2 a2
  (tb2t12 (dom d1 b1 (t2tb687 f))))) (mem23
  (tb2t692 (Tuple2 b1 d1 (t2tb14 a2) (apply d1 b1 (t2tb687 f) (t2tb14 a2))))
  f))))

;; apply_def0
  (assert
  (forall ((f (set (tuple21 b c))) (s (set b)) (t (set c)) (a2 b))
  (=>
  (and (mem9 f (tb2t130 (infix_plmngt c1 b1 (t2tb12 s) (t2tb132 t)))) (mem2
  a2 (tb2t12 (dom c1 b1 (t2tb131 f))))) (mem8
  (tb2t134 (Tuple2 b1 c1 (t2tb14 a2) (apply c1 b1 (t2tb131 f) (t2tb14 a2))))
  f))))

;; apply_def0
  (assert
  (forall ((b2 ty))
  (forall ((f uni) (s (set b)) (t uni) (a2 b))
  (=>
  (and (mem (set1 (tuple2 b1 b2)) f (infix_plmngt b2 b1 (t2tb12 s) t)) (mem2
  a2 (tb2t12 (dom b2 b1 f)))) (mem (tuple2 b1 b2)
  (Tuple2 b1 b2 (t2tb14 a2) (apply b2 b1 f (t2tb14 a2))) f)))))

;; apply_def0
  (assert
  (forall ((f (set (tuple21 a d))) (s (set a)) (t (set d)) (a2 a))
  (=>
  (and (mem (set1 (tuple2 a1 d1)) (t2tb903 f)
  (infix_plmngt d1 a1 (t2tb1 s) (t2tb690 t))) (mem1 a2
  (tb2t1 (dom d1 a1 (t2tb903 f))))) (mem32
  (tb2t904 (Tuple2 a1 d1 (t2tb2 a2) (apply d1 a1 (t2tb903 f) (t2tb2 a2))))
  f))))

;; apply_def0
  (assert
  (forall ((f (set (tuple21 a c))) (s (set a)) (t (set c)) (a2 a))
  (=>
  (and (mem (set1 (tuple2 a1 c1)) (t2tb129 f)
  (infix_plmngt c1 a1 (t2tb1 s) (t2tb132 t))) (mem1 a2
  (tb2t1 (dom c1 a1 (t2tb129 f))))) (mem10
  (tb2t133 (Tuple2 a1 c1 (t2tb2 a2) (apply c1 a1 (t2tb129 f) (t2tb2 a2))))
  f))))

;; apply_def0
  (assert
  (forall ((f (set (tuple21 a b))) (s (set a)) (t (set b)) (a2 a))
  (=>
  (and (mem4 f (tb2t10 (infix_plmngt b1 a1 (t2tb1 s) (t2tb12 t)))) (mem1 a2
  (tb2t1 (dom b1 a1 (t2tb11 f))))) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 a2) (apply b1 a1 (t2tb11 f) (t2tb2 a2)))) f))))

;; apply_def0
  (assert
  (forall ((b2 ty))
  (forall ((f uni) (s (set a)) (t uni) (a2 a))
  (=>
  (and (mem (set1 (tuple2 a1 b2)) f (infix_plmngt b2 a1 (t2tb1 s) t)) (mem1
  a2 (tb2t1 (dom b2 a1 f)))) (mem (tuple2 a1 b2)
  (Tuple2 a1 b2 (t2tb2 a2) (apply b2 a1 f (t2tb2 a2))) f)))))

;; apply_def0
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((f uni) (s uni) (t uni) (a3 uni))
  (=>
  (and (mem (set1 (tuple2 a2 b2)) f (infix_plmngt b2 a2 s t)) (mem a2 a3
  (dom b2 a2 f))) (mem (tuple2 a2 b2) (Tuple2 a2 b2 a3 (apply b2 a2 f a3))
  f)))))

(assert
;; equal_semicolon_3
 ;; File "lemmes_bbook.why", line 1525, characters 7-24
  (not
  (forall ((s (set a)) (t (set b)) (u (set c)) (v (set d)) (p (set (tuple21 b
  c))) (q (set (tuple21 c d))) (r (set (tuple21 a b))))
  (=>
  (and (mem4 r (relation1 s t))
  (and (mem9 p (relation4 t u)) (mem22 q (relation7 u v)))) (infix_eqeq24
  (semicolon16 r (semicolon15 p q)) (semicolon17 (semicolon1 r p) q))))))
(check-sat)
