(set-logic AUFBVDTLIRA)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
(declare-sort uni 0)

(declare-sort ty 0)

(declare-fun sort (ty uni) Bool)

(declare-fun witness (ty) uni)

;; witness_sort
  (assert (forall ((a2 ty)) (sort a2 (witness a2))))

(declare-fun int () ty)

(declare-fun real () ty)

(declare-sort set 1)

(declare-fun set1 (ty) ty)

(declare-sort d 0)

(declare-fun d1 () ty)

(declare-sort c 0)

(declare-fun c1 () ty)

(declare-sort b 0)

(declare-fun b1 () ty)

(declare-sort a 0)

(declare-fun a1 () ty)

(declare-sort tuple21 2)

(declare-fun tuple2 (ty ty) ty)

(declare-fun mem (ty uni uni) Bool)

(declare-fun mem1 (a (set a)) Bool)

(declare-fun mem2 (b (set b)) Bool)

(declare-fun mem3 ((tuple21 a b) (set (tuple21 a b))) Bool)

(declare-fun mem4 ((set (tuple21 a b)) (set (set (tuple21 a b)))) Bool)

(declare-fun mem7 (c (set c)) Bool)

(declare-fun mem20 (d (set d)) Bool)

(declare-fun mem21 ((tuple21 c d) (set (tuple21 c d))) Bool)

(declare-fun mem22 ((set (tuple21 c d)) (set (set (tuple21 c d)))) Bool)

(declare-fun mem24 ((tuple21 (tuple21 a c) (tuple21 b d))
  (set (tuple21 (tuple21 a c) (tuple21 b d)))) Bool)

(declare-fun infix_eqeq (ty uni uni) Bool)

(declare-fun t2tb686 ((set (tuple21 (tuple21 a c) (tuple21 b d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a c) (tuple21 b d))))) (sort
  (set1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))) (t2tb686 x))))

(declare-fun tb2t686 (uni) (set (tuple21 (tuple21 a c) (tuple21 b d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a c) (tuple21 b d)))))
  (! (= (tb2t686 (t2tb686 i)) i) :pattern ((t2tb686 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))) j)
     (= (t2tb686 (tb2t686 j)) j)) :pattern ((t2tb686 (tb2t686 j))) )))

;; infix ==_def
  (assert
  (forall ((s (set (tuple21 (tuple21 a c) (tuple21 b d))))
  (t (set (tuple21 (tuple21 a c) (tuple21 b d)))))
  (= (infix_eqeq (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb686 s)
  (t2tb686 t))
  (forall ((x (tuple21 (tuple21 a c) (tuple21 b d))))
  (= (mem24 x s) (mem24 x t))))))

(declare-fun t2tb688 ((set (set (tuple21 c d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 c d))))) (sort (set1 (set1 (tuple2 c1 d1)))
  (t2tb688 x))))

(declare-fun tb2t688 (uni) (set (set (tuple21 c d))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 c d)))))
  (! (= (tb2t688 (t2tb688 i)) i) :pattern ((t2tb688 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 c1 d1))) j) (= (t2tb688 (tb2t688 j)) j)) :pattern (
  (t2tb688 (tb2t688 j))) )))

;; infix ==_def
  (assert
  (forall ((s (set (set (tuple21 c d)))) (t (set (set (tuple21 c d)))))
  (= (infix_eqeq (set1 (tuple2 c1 d1)) (t2tb688 s) (t2tb688 t))
  (forall ((x (set (tuple21 c d)))) (= (mem22 x s) (mem22 x t))))))

(declare-fun t2tb689 ((set (tuple21 c d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 c d)))) (sort (set1 (tuple2 c1 d1)) (t2tb689 x))))

(declare-fun tb2t689 (uni) (set (tuple21 c d)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 c d))))
  (! (= (tb2t689 (t2tb689 i)) i) :pattern ((t2tb689 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 c1 d1)) j) (= (t2tb689 (tb2t689 j)) j)) :pattern (
  (t2tb689 (tb2t689 j))) )))

;; infix ==_def
  (assert
  (forall ((s (set (tuple21 c d))) (t (set (tuple21 c d))))
  (= (infix_eqeq (tuple2 c1 d1) (t2tb689 s) (t2tb689 t))
  (forall ((x (tuple21 c d))) (= (mem21 x s) (mem21 x t))))))

(declare-fun t2tb690 ((set d)) uni)

;; t2tb_sort
  (assert (forall ((x (set d))) (sort (set1 d1) (t2tb690 x))))

(declare-fun tb2t690 (uni) (set d))

;; BridgeL
  (assert
  (forall ((i (set d)))
  (! (= (tb2t690 (t2tb690 i)) i) :pattern ((t2tb690 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 d1) j) (= (t2tb690 (tb2t690 j)) j)) :pattern ((t2tb690
                                                                   (tb2t690
                                                                   j))) )))

;; infix ==_def
  (assert
  (forall ((s (set d)) (t (set d)))
  (= (infix_eqeq d1 (t2tb690 s) (t2tb690 t))
  (forall ((x d)) (= (mem20 x s) (mem20 x t))))))

(declare-fun t2tb132 ((set c)) uni)

;; t2tb_sort
  (assert (forall ((x (set c))) (sort (set1 c1) (t2tb132 x))))

(declare-fun tb2t132 (uni) (set c))

;; BridgeL
  (assert
  (forall ((i (set c)))
  (! (= (tb2t132 (t2tb132 i)) i) :pattern ((t2tb132 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 c1) j) (= (t2tb132 (tb2t132 j)) j)) :pattern ((t2tb132
                                                                   (tb2t132
                                                                   j))) )))

;; infix ==_def
  (assert
  (forall ((s (set c)) (t (set c)))
  (= (infix_eqeq c1 (t2tb132 s) (t2tb132 t))
  (forall ((x c)) (= (mem7 x s) (mem7 x t))))))

(declare-fun t2tb10 ((set (set (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 a b))))) (sort (set1 (set1 (tuple2 a1 b1)))
  (t2tb10 x))))

(declare-fun tb2t10 (uni) (set (set (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 a b)))))
  (! (= (tb2t10 (t2tb10 i)) i) :pattern ((t2tb10 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 a1 b1))) j) (= (t2tb10 (tb2t10 j)) j)) :pattern (
  (t2tb10 (tb2t10 j))) )))

;; infix ==_def
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set (set (tuple21 a b)))))
  (= (infix_eqeq (set1 (tuple2 a1 b1)) (t2tb10 s) (t2tb10 t))
  (forall ((x (set (tuple21 a b)))) (= (mem4 x s) (mem4 x t))))))

(declare-fun t2tb11 ((set (tuple21 a b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a b)))) (sort (set1 (tuple2 a1 b1)) (t2tb11 x))))

(declare-fun tb2t11 (uni) (set (tuple21 a b)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a b))))
  (! (= (tb2t11 (t2tb11 i)) i) :pattern ((t2tb11 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 b1)) j) (= (t2tb11 (tb2t11 j)) j)) :pattern (
  (t2tb11 (tb2t11 j))) )))

;; infix ==_def
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (tuple21 a b))))
  (= (infix_eqeq (tuple2 a1 b1) (t2tb11 s) (t2tb11 t))
  (forall ((x (tuple21 a b))) (= (mem3 x s) (mem3 x t))))))

(declare-fun t2tb12 ((set b)) uni)

;; t2tb_sort
  (assert (forall ((x (set b))) (sort (set1 b1) (t2tb12 x))))

(declare-fun tb2t12 (uni) (set b))

;; BridgeL
  (assert
  (forall ((i (set b))) (! (= (tb2t12 (t2tb12 i)) i) :pattern ((t2tb12 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 b1) j) (= (t2tb12 (tb2t12 j)) j)) :pattern ((t2tb12
                                                                 (tb2t12 j))) )))

;; infix ==_def
  (assert
  (forall ((s (set b)) (t (set b)))
  (= (infix_eqeq b1 (t2tb12 s) (t2tb12 t))
  (forall ((x b)) (= (mem2 x s) (mem2 x t))))))

(declare-fun t2tb1 ((set a)) uni)

;; t2tb_sort
  (assert (forall ((x (set a))) (sort (set1 a1) (t2tb1 x))))

(declare-fun tb2t1 (uni) (set a))

;; BridgeL
  (assert
  (forall ((i (set a))) (! (= (tb2t1 (t2tb1 i)) i) :pattern ((t2tb1 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 a1) j) (= (t2tb1 (tb2t1 j)) j)) :pattern ((t2tb1
                                                               (tb2t1 j))) )))

;; infix ==_def
  (assert
  (forall ((s (set a)) (t (set a)))
  (= (infix_eqeq a1 (t2tb1 s) (t2tb1 t))
  (forall ((x a)) (= (mem1 x s) (mem1 x t))))))

;; infix ==_def
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t uni))
  (and
  (=> (infix_eqeq a2 s t) (forall ((x uni)) (= (mem a2 x s) (mem a2 x t))))
  (=> (forall ((x uni)) (=> (sort a2 x) (= (mem a2 x s) (mem a2 x t))))
  (infix_eqeq a2 s t))))))

(declare-fun power (ty uni) uni)

;; power_sort
  (assert
  (forall ((a2 ty)) (forall ((x uni)) (sort (set1 (set1 a2)) (power a2 x)))))

(declare-fun non_empty_power (ty uni) uni)

;; non_empty_power_sort
  (assert
  (forall ((a2 ty))
  (forall ((x uni)) (sort (set1 (set1 a2)) (non_empty_power a2 x)))))

(declare-fun subset1 (ty uni uni) Bool)

(declare-fun subset2 ((set a) (set a)) Bool)

(declare-fun subset5 ((set b) (set b)) Bool)

(declare-fun subset6 ((set (tuple21 a b)) (set (tuple21 a b))) Bool)

(declare-fun subset7 ((set (set (tuple21 a b))) (set (set (tuple21 a
  b)))) Bool)

(declare-fun subset9 ((set c) (set c)) Bool)

(declare-fun subset17 ((set d) (set d)) Bool)

(declare-fun subset18 ((set (tuple21 c d)) (set (tuple21 c d))) Bool)

(declare-fun subset19 ((set (tuple21 (tuple21 a c) (tuple21 b d)))
  (set (tuple21 (tuple21 a c) (tuple21 b d)))) Bool)

(declare-fun subset20 ((set (set (tuple21 c d))) (set (set (tuple21 c
  d)))) Bool)

(declare-fun t2tb685 ((set (set (tuple21 (tuple21 a c) (tuple21 b d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a c) (tuple21 b d)))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))) (t2tb685 x))))

(declare-fun tb2t685 (uni) (set (set (tuple21 (tuple21 a c) (tuple21 b d)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a c) (tuple21 b d))))))
  (! (= (tb2t685 (t2tb685 i)) i) :pattern ((t2tb685 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))) j)
     (= (t2tb685 (tb2t685 j)) j)) :pattern ((t2tb685 (tb2t685 j))) )))

;; subset_def
  (assert
  (forall ((s (set (tuple21 (tuple21 a c) (tuple21 b d))))
  (t (set (tuple21 (tuple21 a c) (tuple21 b d)))))
  (= (subset19 s t) (mem (set1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
  (t2tb686 s) (power (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb686 t))))))

(declare-fun t2tb907 ((set (set (set (tuple21 c d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (set (tuple21 c d)))))) (sort
  (set1 (set1 (set1 (tuple2 c1 d1)))) (t2tb907 x))))

(declare-fun tb2t907 (uni) (set (set (set (tuple21 c d)))))

;; BridgeL
  (assert
  (forall ((i (set (set (set (tuple21 c d))))))
  (! (= (tb2t907 (t2tb907 i)) i) :pattern ((t2tb907 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (set1 (tuple2 c1 d1)))) j)
     (= (t2tb907 (tb2t907 j)) j)) :pattern ((t2tb907 (tb2t907 j))) )))

;; subset_def
  (assert
  (forall ((s (set (set (tuple21 c d)))) (t (set (set (tuple21 c d)))))
  (= (subset20 s t) (mem (set1 (set1 (tuple2 c1 d1))) (t2tb688 s)
  (power (set1 (tuple2 c1 d1)) (t2tb688 t))))))

;; subset_def
  (assert
  (forall ((s (set (tuple21 c d))) (t (set (tuple21 c d))))
  (= (subset18 s t) (mem22 s (tb2t688 (power (tuple2 c1 d1) (t2tb689 t)))))))

(declare-fun t2tb908 ((set (set d))) uni)

;; t2tb_sort
  (assert (forall ((x (set (set d)))) (sort (set1 (set1 d1)) (t2tb908 x))))

(declare-fun tb2t908 (uni) (set (set d)))

;; BridgeL
  (assert
  (forall ((i (set (set d))))
  (! (= (tb2t908 (t2tb908 i)) i) :pattern ((t2tb908 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 d1)) j) (= (t2tb908 (tb2t908 j)) j)) :pattern (
  (t2tb908 (tb2t908 j))) )))

;; subset_def
  (assert
  (forall ((s (set d)) (t (set d)))
  (= (subset17 s t) (mem (set1 d1) (t2tb690 s) (power d1 (t2tb690 t))))))

(declare-fun t2tb264 ((set (set c))) uni)

;; t2tb_sort
  (assert (forall ((x (set (set c)))) (sort (set1 (set1 c1)) (t2tb264 x))))

(declare-fun tb2t264 (uni) (set (set c)))

;; BridgeL
  (assert
  (forall ((i (set (set c))))
  (! (= (tb2t264 (t2tb264 i)) i) :pattern ((t2tb264 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 c1)) j) (= (t2tb264 (tb2t264 j)) j)) :pattern (
  (t2tb264 (tb2t264 j))) )))

;; subset_def
  (assert
  (forall ((s (set c)) (t (set c)))
  (= (subset9 s t) (mem (set1 c1) (t2tb132 s) (power c1 (t2tb132 t))))))

(declare-fun t2tb43 ((set (set (set (tuple21 a b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (set (tuple21 a b)))))) (sort
  (set1 (set1 (set1 (tuple2 a1 b1)))) (t2tb43 x))))

(declare-fun tb2t43 (uni) (set (set (set (tuple21 a b)))))

;; BridgeL
  (assert
  (forall ((i (set (set (set (tuple21 a b))))))
  (! (= (tb2t43 (t2tb43 i)) i) :pattern ((t2tb43 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (set1 (tuple2 a1 b1)))) j)
     (= (t2tb43 (tb2t43 j)) j)) :pattern ((t2tb43 (tb2t43 j))) )))

;; subset_def
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set (set (tuple21 a b)))))
  (= (subset7 s t) (mem (set1 (set1 (tuple2 a1 b1))) (t2tb10 s)
  (power (set1 (tuple2 a1 b1)) (t2tb10 t))))))

;; subset_def
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (tuple21 a b))))
  (= (subset6 s t) (mem4 s (tb2t10 (power (tuple2 a1 b1) (t2tb11 t)))))))

(declare-fun t2tb44 ((set (set b))) uni)

;; t2tb_sort
  (assert (forall ((x (set (set b)))) (sort (set1 (set1 b1)) (t2tb44 x))))

(declare-fun tb2t44 (uni) (set (set b)))

;; BridgeL
  (assert
  (forall ((i (set (set b))))
  (! (= (tb2t44 (t2tb44 i)) i) :pattern ((t2tb44 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 b1)) j) (= (t2tb44 (tb2t44 j)) j)) :pattern (
  (t2tb44 (tb2t44 j))) )))

;; subset_def
  (assert
  (forall ((s (set b)) (t (set b)))
  (= (subset5 s t) (mem (set1 b1) (t2tb12 s) (power b1 (t2tb12 t))))))

(declare-fun t2tb ((set (set a))) uni)

;; t2tb_sort
  (assert (forall ((x (set (set a)))) (sort (set1 (set1 a1)) (t2tb x))))

(declare-fun tb2t (uni) (set (set a)))

;; BridgeL
  (assert
  (forall ((i (set (set a)))) (! (= (tb2t (t2tb i)) i) :pattern ((t2tb i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 a1)) j) (= (t2tb (tb2t j)) j)) :pattern ((t2tb
                                                                    (tb2t j))) )))

;; subset_def
  (assert
  (forall ((s (set a)) (t (set a)))
  (= (subset2 s t) (mem (set1 a1) (t2tb1 s) (power a1 (t2tb1 t))))))

;; subset_def
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t uni))
  (= (subset1 a2 s t) (mem (set1 a2) s (power a2 t))))))

(declare-fun subsetnoteq (ty uni uni) Bool)

;; subsetnoteq_def
  (assert
  (forall ((s (set (tuple21 (tuple21 a c) (tuple21 b d))))
  (t (set (tuple21 (tuple21 a c) (tuple21 b d)))))
  (= (subsetnoteq (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb686 s)
  (t2tb686 t))
  (and (subset19 s t)
  (not (infix_eqeq (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb686 s)
  (t2tb686 t)))))))

;; subsetnoteq_def
  (assert
  (forall ((s (set (set (tuple21 c d)))) (t (set (set (tuple21 c d)))))
  (= (subsetnoteq (set1 (tuple2 c1 d1)) (t2tb688 s) (t2tb688 t))
  (and (subset20 s t)
  (not (infix_eqeq (set1 (tuple2 c1 d1)) (t2tb688 s) (t2tb688 t)))))))

;; subsetnoteq_def
  (assert
  (forall ((s (set (tuple21 c d))) (t (set (tuple21 c d))))
  (= (subsetnoteq (tuple2 c1 d1) (t2tb689 s) (t2tb689 t))
  (and (subset18 s t)
  (not (infix_eqeq (tuple2 c1 d1) (t2tb689 s) (t2tb689 t)))))))

;; subsetnoteq_def
  (assert
  (forall ((s (set d)) (t (set d)))
  (= (subsetnoteq d1 (t2tb690 s) (t2tb690 t))
  (and (subset17 s t) (not (infix_eqeq d1 (t2tb690 s) (t2tb690 t)))))))

;; subsetnoteq_def
  (assert
  (forall ((s (set c)) (t (set c)))
  (= (subsetnoteq c1 (t2tb132 s) (t2tb132 t))
  (and (subset9 s t) (not (infix_eqeq c1 (t2tb132 s) (t2tb132 t)))))))

;; subsetnoteq_def
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set (set (tuple21 a b)))))
  (= (subsetnoteq (set1 (tuple2 a1 b1)) (t2tb10 s) (t2tb10 t))
  (and (subset7 s t)
  (not (infix_eqeq (set1 (tuple2 a1 b1)) (t2tb10 s) (t2tb10 t)))))))

;; subsetnoteq_def
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (tuple21 a b))))
  (= (subsetnoteq (tuple2 a1 b1) (t2tb11 s) (t2tb11 t))
  (and (subset6 s t) (not (infix_eqeq (tuple2 a1 b1) (t2tb11 s) (t2tb11 t)))))))

;; subsetnoteq_def
  (assert
  (forall ((s (set b)) (t (set b)))
  (= (subsetnoteq b1 (t2tb12 s) (t2tb12 t))
  (and (subset5 s t) (not (infix_eqeq b1 (t2tb12 s) (t2tb12 t)))))))

;; subsetnoteq_def
  (assert
  (forall ((s (set a)) (t (set a)))
  (= (subsetnoteq a1 (t2tb1 s) (t2tb1 t))
  (and (subset2 s t) (not (infix_eqeq a1 (t2tb1 s) (t2tb1 t)))))))

;; subsetnoteq_def
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t uni))
  (= (subsetnoteq a2 s t) (and (subset1 a2 s t) (not (infix_eqeq a2 s t)))))))

(declare-fun empty (ty) uni)

;; empty_sort
  (assert (forall ((a2 ty)) (sort (set1 a2) (empty a2))))

(declare-fun is_empty (ty uni) Bool)

;; is_empty_def
  (assert
  (forall ((s (set (tuple21 (tuple21 a c) (tuple21 b d)))))
  (= (is_empty (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb686 s))
  (forall ((x (tuple21 (tuple21 a c) (tuple21 b d)))) (not (mem24 x s))))))

;; is_empty_def
  (assert
  (forall ((s (set (set (tuple21 c d)))))
  (= (is_empty (set1 (tuple2 c1 d1)) (t2tb688 s))
  (forall ((x (set (tuple21 c d)))) (not (mem22 x s))))))

;; is_empty_def
  (assert
  (forall ((s (set (tuple21 c d))))
  (= (is_empty (tuple2 c1 d1) (t2tb689 s))
  (forall ((x (tuple21 c d))) (not (mem21 x s))))))

;; is_empty_def
  (assert
  (forall ((s (set d)))
  (= (is_empty d1 (t2tb690 s)) (forall ((x d)) (not (mem20 x s))))))

;; is_empty_def
  (assert
  (forall ((s (set c)))
  (= (is_empty c1 (t2tb132 s)) (forall ((x c)) (not (mem7 x s))))))

;; is_empty_def
  (assert
  (forall ((s (set (set (tuple21 a b)))))
  (= (is_empty (set1 (tuple2 a1 b1)) (t2tb10 s))
  (forall ((x (set (tuple21 a b)))) (not (mem4 x s))))))

;; is_empty_def
  (assert
  (forall ((s (set (tuple21 a b))))
  (= (is_empty (tuple2 a1 b1) (t2tb11 s))
  (forall ((x (tuple21 a b))) (not (mem3 x s))))))

;; is_empty_def
  (assert
  (forall ((s (set b)))
  (= (is_empty b1 (t2tb12 s)) (forall ((x b)) (not (mem2 x s))))))

;; is_empty_def
  (assert
  (forall ((s (set a)))
  (= (is_empty a1 (t2tb1 s)) (forall ((x a)) (not (mem1 x s))))))

;; is_empty_def
  (assert
  (forall ((a2 ty))
  (forall ((s uni))
  (and (=> (is_empty a2 s) (forall ((x uni)) (not (mem a2 x s))))
  (=> (forall ((x uni)) (=> (sort a2 x) (not (mem a2 x s)))) (is_empty a2 s))))))

;; empty_def1
  (assert (forall ((a2 ty)) (is_empty a2 (empty a2))))

;; empty
  (assert
  (forall ((x (tuple21 (tuple21 a c) (tuple21 b d))))
  (not (mem24 x (tb2t686 (empty (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))))))))

;; empty
  (assert
  (forall ((x (set (tuple21 c d))))
  (not (mem22 x (tb2t688 (empty (set1 (tuple2 c1 d1))))))))

;; empty
  (assert
  (forall ((x (tuple21 c d)))
  (not (mem21 x (tb2t689 (empty (tuple2 c1 d1)))))))

;; empty
  (assert (forall ((x d)) (not (mem20 x (tb2t690 (empty d1))))))

;; empty
  (assert (forall ((x c)) (not (mem7 x (tb2t132 (empty c1))))))

;; empty
  (assert
  (forall ((x (set (tuple21 a b))))
  (not (mem4 x (tb2t10 (empty (set1 (tuple2 a1 b1))))))))

;; empty
  (assert
  (forall ((x (tuple21 a b))) (not (mem3 x (tb2t11 (empty (tuple2 a1 b1)))))))

;; empty
  (assert (forall ((x b)) (not (mem2 x (tb2t12 (empty b1))))))

;; empty
  (assert (forall ((x a)) (not (mem1 x (tb2t1 (empty a1))))))

;; empty
  (assert (forall ((a2 ty)) (forall ((x uni)) (not (mem a2 x (empty a2))))))

(declare-fun add (ty uni uni) uni)

;; add_sort
  (assert
  (forall ((a2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 a2) (add a2 x x1)))))

(declare-fun t2tb691 ((tuple21 (tuple21 a c) (tuple21 b d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a c) (tuple21 b d)))) (sort
  (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb691 x))))

(declare-fun tb2t691 (uni) (tuple21 (tuple21 a c) (tuple21 b d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a c) (tuple21 b d))))
  (! (= (tb2t691 (t2tb691 i)) i) :pattern ((t2tb691 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) j)
     (= (t2tb691 (tb2t691 j)) j)) :pattern ((t2tb691 (tb2t691 j))) )))

;; add_def1
  (assert
  (forall ((x (tuple21 (tuple21 a c) (tuple21 b d))) (y (tuple21 (tuple21 a
  c) (tuple21 b d))))
  (forall ((s (set (tuple21 (tuple21 a c) (tuple21 b d)))))
  (= (mem24 x
  (tb2t686
  (add (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb691 y) (t2tb686 s))))
  (or (= x y) (mem24 x s))))))

;; add_def1
  (assert
  (forall ((x (set (tuple21 c d))) (y (set (tuple21 c d))))
  (forall ((s (set (set (tuple21 c d)))))
  (= (mem22 x (tb2t688 (add (set1 (tuple2 c1 d1)) (t2tb689 y) (t2tb688 s))))
  (or (= x y) (mem22 x s))))))

(declare-fun t2tb693 ((tuple21 c d)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 c d))) (sort (tuple2 c1 d1) (t2tb693 x))))

(declare-fun tb2t693 (uni) (tuple21 c d))

;; BridgeL
  (assert
  (forall ((i (tuple21 c d)))
  (! (= (tb2t693 (t2tb693 i)) i) :pattern ((t2tb693 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 c1 d1) j) (= (t2tb693 (tb2t693 j)) j)) :pattern (
  (t2tb693 (tb2t693 j))) )))

;; add_def1
  (assert
  (forall ((x (tuple21 c d)) (y (tuple21 c d)))
  (forall ((s (set (tuple21 c d))))
  (= (mem21 x (tb2t689 (add (tuple2 c1 d1) (t2tb693 y) (t2tb689 s))))
  (or (= x y) (mem21 x s))))))

(declare-fun t2tb694 (d) uni)

;; t2tb_sort
  (assert (forall ((x d)) (sort d1 (t2tb694 x))))

(declare-fun tb2t694 (uni) d)

;; BridgeL
  (assert
  (forall ((i d)) (! (= (tb2t694 (t2tb694 i)) i) :pattern ((t2tb694 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort d1 j) (= (t2tb694 (tb2t694 j)) j)) :pattern ((t2tb694
                                                            (tb2t694 j))) )))

;; add_def1
  (assert
  (forall ((x d) (y d))
  (forall ((s (set d)))
  (= (mem20 x (tb2t690 (add d1 (t2tb694 y) (t2tb690 s))))
  (or (= x y) (mem20 x s))))))

(declare-fun t2tb135 (c) uni)

;; t2tb_sort
  (assert (forall ((x c)) (sort c1 (t2tb135 x))))

(declare-fun tb2t135 (uni) c)

;; BridgeL
  (assert
  (forall ((i c)) (! (= (tb2t135 (t2tb135 i)) i) :pattern ((t2tb135 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort c1 j) (= (t2tb135 (tb2t135 j)) j)) :pattern ((t2tb135
                                                            (tb2t135 j))) )))

;; add_def1
  (assert
  (forall ((x c) (y c))
  (forall ((s (set c)))
  (= (mem7 x (tb2t132 (add c1 (t2tb135 y) (t2tb132 s))))
  (or (= x y) (mem7 x s))))))

;; add_def1
  (assert
  (forall ((x (set (tuple21 a b))) (y (set (tuple21 a b))))
  (forall ((s (set (set (tuple21 a b)))))
  (= (mem4 x (tb2t10 (add (set1 (tuple2 a1 b1)) (t2tb11 y) (t2tb10 s))))
  (or (= x y) (mem4 x s))))))

(declare-fun t2tb13 ((tuple21 a b)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 a b))) (sort (tuple2 a1 b1) (t2tb13 x))))

(declare-fun tb2t13 (uni) (tuple21 a b))

;; BridgeL
  (assert
  (forall ((i (tuple21 a b)))
  (! (= (tb2t13 (t2tb13 i)) i) :pattern ((t2tb13 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 b1) j) (= (t2tb13 (tb2t13 j)) j)) :pattern (
  (t2tb13 (tb2t13 j))) )))

;; add_def1
  (assert
  (forall ((x (tuple21 a b)) (y (tuple21 a b)))
  (forall ((s (set (tuple21 a b))))
  (= (mem3 x (tb2t11 (add (tuple2 a1 b1) (t2tb13 y) (t2tb11 s))))
  (or (= x y) (mem3 x s))))))

(declare-fun t2tb14 (b) uni)

;; t2tb_sort
  (assert (forall ((x b)) (sort b1 (t2tb14 x))))

(declare-fun tb2t14 (uni) b)

;; BridgeL
  (assert
  (forall ((i b)) (! (= (tb2t14 (t2tb14 i)) i) :pattern ((t2tb14 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort b1 j) (= (t2tb14 (tb2t14 j)) j)) :pattern ((t2tb14 (tb2t14 j))) )))

;; add_def1
  (assert
  (forall ((x b) (y b))
  (forall ((s (set b)))
  (= (mem2 x (tb2t12 (add b1 (t2tb14 y) (t2tb12 s))))
  (or (= x y) (mem2 x s))))))

(declare-fun t2tb2 (a) uni)

;; t2tb_sort
  (assert (forall ((x a)) (sort a1 (t2tb2 x))))

(declare-fun tb2t2 (uni) a)

;; BridgeL
  (assert (forall ((i a)) (! (= (tb2t2 (t2tb2 i)) i) :pattern ((t2tb2 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort a1 j) (= (t2tb2 (tb2t2 j)) j)) :pattern ((t2tb2 (tb2t2 j))) )))

;; add_def1
  (assert
  (forall ((x a) (y a))
  (forall ((s (set a)))
  (= (mem1 x (tb2t1 (add a1 (t2tb2 y) (t2tb1 s)))) (or (= x y) (mem1 x s))))))

;; add_def1
  (assert
  (forall ((a2 ty))
  (forall ((x uni) (y uni))
  (=> (sort a2 x)
  (=> (sort a2 y)
  (forall ((s uni)) (= (mem a2 x (add a2 y s)) (or (= x y) (mem a2 x s)))))))))

(declare-fun singleton (ty uni) uni)

;; singleton_sort
  (assert
  (forall ((a2 ty)) (forall ((x uni)) (sort (set1 a2) (singleton a2 x)))))

;; mem_singleton
  (assert
  (forall ((x (tuple21 (tuple21 a c) (tuple21 b d))) (y (tuple21 (tuple21 a
  c) (tuple21 b d))))
  (= (mem24 x
  (tb2t686 (singleton (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb691 y))))
  (= x y))))

;; mem_singleton
  (assert
  (forall ((x (set (tuple21 c d))) (y (set (tuple21 c d))))
  (= (mem22 x (tb2t688 (singleton (set1 (tuple2 c1 d1)) (t2tb689 y))))
  (= x y))))

;; mem_singleton
  (assert
  (forall ((x (tuple21 c d)) (y (tuple21 c d)))
  (= (mem21 x (tb2t689 (singleton (tuple2 c1 d1) (t2tb693 y)))) (= x y))))

;; mem_singleton
  (assert
  (forall ((x d) (y d))
  (= (mem20 x (tb2t690 (singleton d1 (t2tb694 y)))) (= x y))))

;; mem_singleton
  (assert
  (forall ((x c) (y c))
  (= (mem7 x (tb2t132 (singleton c1 (t2tb135 y)))) (= x y))))

;; mem_singleton
  (assert
  (forall ((x (set (tuple21 a b))) (y (set (tuple21 a b))))
  (= (mem4 x (tb2t10 (singleton (set1 (tuple2 a1 b1)) (t2tb11 y)))) (= x y))))

;; mem_singleton
  (assert
  (forall ((x (tuple21 a b)) (y (tuple21 a b)))
  (= (mem3 x (tb2t11 (singleton (tuple2 a1 b1) (t2tb13 y)))) (= x y))))

;; mem_singleton
  (assert
  (forall ((x b) (y b))
  (= (mem2 x (tb2t12 (singleton b1 (t2tb14 y)))) (= x y))))

;; mem_singleton
  (assert
  (forall ((x a) (y a))
  (= (mem1 x (tb2t1 (singleton a1 (t2tb2 y)))) (= x y))))

;; mem_singleton
  (assert
  (forall ((a2 ty))
  (forall ((x uni) (y uni))
  (=> (sort a2 x) (=> (sort a2 y) (= (mem a2 x (singleton a2 y)) (= x y)))))))

(declare-fun remove (ty uni uni) uni)

;; remove_sort
  (assert
  (forall ((a2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 a2) (remove a2 x x1)))))

;; remove_def1
  (assert
  (forall ((x (tuple21 (tuple21 a c) (tuple21 b d))) (y (tuple21 (tuple21 a
  c) (tuple21 b d))) (s (set (tuple21 (tuple21 a c) (tuple21 b d)))))
  (= (mem24 x
  (tb2t686
  (remove (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb691 y) (t2tb686 s))))
  (and (not (= x y)) (mem24 x s)))))

;; remove_def1
  (assert
  (forall ((x (set (tuple21 c d))) (y (set (tuple21 c d)))
  (s (set (set (tuple21 c d)))))
  (= (mem22 x
  (tb2t688 (remove (set1 (tuple2 c1 d1)) (t2tb689 y) (t2tb688 s))))
  (and (not (= x y)) (mem22 x s)))))

;; remove_def1
  (assert
  (forall ((x (tuple21 c d)) (y (tuple21 c d)) (s (set (tuple21 c d))))
  (= (mem21 x (tb2t689 (remove (tuple2 c1 d1) (t2tb693 y) (t2tb689 s))))
  (and (not (= x y)) (mem21 x s)))))

;; remove_def1
  (assert
  (forall ((x d) (y d) (s (set d)))
  (= (mem20 x (tb2t690 (remove d1 (t2tb694 y) (t2tb690 s))))
  (and (not (= x y)) (mem20 x s)))))

;; remove_def1
  (assert
  (forall ((x c) (y c) (s (set c)))
  (= (mem7 x (tb2t132 (remove c1 (t2tb135 y) (t2tb132 s))))
  (and (not (= x y)) (mem7 x s)))))

;; remove_def1
  (assert
  (forall ((x (set (tuple21 a b))) (y (set (tuple21 a b)))
  (s (set (set (tuple21 a b)))))
  (= (mem4 x (tb2t10 (remove (set1 (tuple2 a1 b1)) (t2tb11 y) (t2tb10 s))))
  (and (not (= x y)) (mem4 x s)))))

;; remove_def1
  (assert
  (forall ((x (tuple21 a b)) (y (tuple21 a b)) (s (set (tuple21 a b))))
  (= (mem3 x (tb2t11 (remove (tuple2 a1 b1) (t2tb13 y) (t2tb11 s))))
  (and (not (= x y)) (mem3 x s)))))

;; remove_def1
  (assert
  (forall ((x b) (y b) (s (set b)))
  (= (mem2 x (tb2t12 (remove b1 (t2tb14 y) (t2tb12 s))))
  (and (not (= x y)) (mem2 x s)))))

;; remove_def1
  (assert
  (forall ((x a) (y a) (s (set a)))
  (= (mem1 x (tb2t1 (remove a1 (t2tb2 y) (t2tb1 s))))
  (and (not (= x y)) (mem1 x s)))))

;; remove_def1
  (assert
  (forall ((a2 ty))
  (forall ((x uni) (y uni) (s uni))
  (=> (sort a2 x)
  (=> (sort a2 y)
  (= (mem a2 x (remove a2 y s)) (and (not (= x y)) (mem a2 x s))))))))

(declare-fun all (ty) uni)

;; all_sort
  (assert (forall ((a2 ty)) (sort (set1 a2) (all a2))))

;; all_def
  (assert
  (forall ((x (tuple21 (tuple21 a c) (tuple21 b d)))) (mem24 x
  (tb2t686 (all (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))))))

;; all_def
  (assert
  (forall ((x (set (tuple21 c d)))) (mem22 x
  (tb2t688 (all (set1 (tuple2 c1 d1)))))))

;; all_def
  (assert
  (forall ((x (tuple21 c d))) (mem21 x (tb2t689 (all (tuple2 c1 d1))))))

;; all_def
  (assert (forall ((x d)) (mem20 x (tb2t690 (all d1)))))

;; all_def
  (assert (forall ((x c)) (mem7 x (tb2t132 (all c1)))))

;; all_def
  (assert
  (forall ((x (set (tuple21 a b)))) (mem4 x
  (tb2t10 (all (set1 (tuple2 a1 b1)))))))

;; all_def
  (assert
  (forall ((x (tuple21 a b))) (mem3 x (tb2t11 (all (tuple2 a1 b1))))))

;; all_def
  (assert (forall ((x b)) (mem2 x (tb2t12 (all b1)))))

;; all_def
  (assert (forall ((x a)) (mem1 x (tb2t1 (all a1)))))

;; all_def
  (assert (forall ((a2 ty)) (forall ((x uni)) (mem a2 x (all a2)))))

(declare-fun union1 (ty uni uni) uni)

;; union_sort
  (assert
  (forall ((a2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 a2) (union1 a2 x x1)))))

;; mem_union
  (assert
  (forall ((s (set (tuple21 (tuple21 a c) (tuple21 b d))))
  (t (set (tuple21 (tuple21 a c) (tuple21 b d)))) (x (tuple21 (tuple21 a c)
  (tuple21 b d))))
  (= (mem24 x
  (tb2t686
  (union1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb686 s) (t2tb686 t))))
  (or (mem24 x s) (mem24 x t)))))

;; mem_union
  (assert
  (forall ((s (set (set (tuple21 c d)))) (t (set (set (tuple21 c d))))
  (x (set (tuple21 c d))))
  (= (mem22 x
  (tb2t688 (union1 (set1 (tuple2 c1 d1)) (t2tb688 s) (t2tb688 t))))
  (or (mem22 x s) (mem22 x t)))))

;; mem_union
  (assert
  (forall ((s (set (tuple21 c d))) (t (set (tuple21 c d))) (x (tuple21 c d)))
  (= (mem21 x (tb2t689 (union1 (tuple2 c1 d1) (t2tb689 s) (t2tb689 t))))
  (or (mem21 x s) (mem21 x t)))))

;; mem_union
  (assert
  (forall ((s (set d)) (t (set d)) (x d))
  (= (mem20 x (tb2t690 (union1 d1 (t2tb690 s) (t2tb690 t))))
  (or (mem20 x s) (mem20 x t)))))

;; mem_union
  (assert
  (forall ((s (set c)) (t (set c)) (x c))
  (= (mem7 x (tb2t132 (union1 c1 (t2tb132 s) (t2tb132 t))))
  (or (mem7 x s) (mem7 x t)))))

;; mem_union
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set (set (tuple21 a b))))
  (x (set (tuple21 a b))))
  (= (mem4 x (tb2t10 (union1 (set1 (tuple2 a1 b1)) (t2tb10 s) (t2tb10 t))))
  (or (mem4 x s) (mem4 x t)))))

;; mem_union
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (tuple21 a b))) (x (tuple21 a b)))
  (= (mem3 x (tb2t11 (union1 (tuple2 a1 b1) (t2tb11 s) (t2tb11 t))))
  (or (mem3 x s) (mem3 x t)))))

;; mem_union
  (assert
  (forall ((s (set b)) (t (set b)) (x b))
  (= (mem2 x (tb2t12 (union1 b1 (t2tb12 s) (t2tb12 t))))
  (or (mem2 x s) (mem2 x t)))))

;; mem_union
  (assert
  (forall ((s (set a)) (t (set a)) (x a))
  (= (mem1 x (tb2t1 (union1 a1 (t2tb1 s) (t2tb1 t))))
  (or (mem1 x s) (mem1 x t)))))

;; mem_union
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t uni) (x uni))
  (= (mem a2 x (union1 a2 s t)) (or (mem a2 x s) (mem a2 x t))))))

(declare-fun inter (ty uni uni) uni)

;; inter_sort
  (assert
  (forall ((a2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 a2) (inter a2 x x1)))))

;; mem_inter
  (assert
  (forall ((s (set (tuple21 (tuple21 a c) (tuple21 b d))))
  (t (set (tuple21 (tuple21 a c) (tuple21 b d)))) (x (tuple21 (tuple21 a c)
  (tuple21 b d))))
  (= (mem24 x
  (tb2t686
  (inter (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb686 s) (t2tb686 t))))
  (and (mem24 x s) (mem24 x t)))))

;; mem_inter
  (assert
  (forall ((s (set (set (tuple21 c d)))) (t (set (set (tuple21 c d))))
  (x (set (tuple21 c d))))
  (= (mem22 x
  (tb2t688 (inter (set1 (tuple2 c1 d1)) (t2tb688 s) (t2tb688 t))))
  (and (mem22 x s) (mem22 x t)))))

;; mem_inter
  (assert
  (forall ((s (set (tuple21 c d))) (t (set (tuple21 c d))) (x (tuple21 c d)))
  (= (mem21 x (tb2t689 (inter (tuple2 c1 d1) (t2tb689 s) (t2tb689 t))))
  (and (mem21 x s) (mem21 x t)))))

;; mem_inter
  (assert
  (forall ((s (set d)) (t (set d)) (x d))
  (= (mem20 x (tb2t690 (inter d1 (t2tb690 s) (t2tb690 t))))
  (and (mem20 x s) (mem20 x t)))))

;; mem_inter
  (assert
  (forall ((s (set c)) (t (set c)) (x c))
  (= (mem7 x (tb2t132 (inter c1 (t2tb132 s) (t2tb132 t))))
  (and (mem7 x s) (mem7 x t)))))

;; mem_inter
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set (set (tuple21 a b))))
  (x (set (tuple21 a b))))
  (= (mem4 x (tb2t10 (inter (set1 (tuple2 a1 b1)) (t2tb10 s) (t2tb10 t))))
  (and (mem4 x s) (mem4 x t)))))

;; mem_inter
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (tuple21 a b))) (x (tuple21 a b)))
  (= (mem3 x (tb2t11 (inter (tuple2 a1 b1) (t2tb11 s) (t2tb11 t))))
  (and (mem3 x s) (mem3 x t)))))

;; mem_inter
  (assert
  (forall ((s (set b)) (t (set b)) (x b))
  (= (mem2 x (tb2t12 (inter b1 (t2tb12 s) (t2tb12 t))))
  (and (mem2 x s) (mem2 x t)))))

;; mem_inter
  (assert
  (forall ((s (set a)) (t (set a)) (x a))
  (= (mem1 x (tb2t1 (inter a1 (t2tb1 s) (t2tb1 t))))
  (and (mem1 x s) (mem1 x t)))))

;; mem_inter
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t uni) (x uni))
  (= (mem a2 x (inter a2 s t)) (and (mem a2 x s) (mem a2 x t))))))

(declare-fun diff (ty uni uni) uni)

;; diff_sort
  (assert
  (forall ((a2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 a2) (diff a2 x x1)))))

;; mem_diff
  (assert
  (forall ((s (set (tuple21 (tuple21 a c) (tuple21 b d))))
  (t (set (tuple21 (tuple21 a c) (tuple21 b d)))) (x (tuple21 (tuple21 a c)
  (tuple21 b d))))
  (= (mem24 x
  (tb2t686
  (diff (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb686 s) (t2tb686 t))))
  (and (mem24 x s) (not (mem24 x t))))))

;; mem_diff
  (assert
  (forall ((s (set (set (tuple21 c d)))) (t (set (set (tuple21 c d))))
  (x (set (tuple21 c d))))
  (= (mem22 x (tb2t688 (diff (set1 (tuple2 c1 d1)) (t2tb688 s) (t2tb688 t))))
  (and (mem22 x s) (not (mem22 x t))))))

;; mem_diff
  (assert
  (forall ((s (set (tuple21 c d))) (t (set (tuple21 c d))) (x (tuple21 c d)))
  (= (mem21 x (tb2t689 (diff (tuple2 c1 d1) (t2tb689 s) (t2tb689 t))))
  (and (mem21 x s) (not (mem21 x t))))))

;; mem_diff
  (assert
  (forall ((s (set d)) (t (set d)) (x d))
  (= (mem20 x (tb2t690 (diff d1 (t2tb690 s) (t2tb690 t))))
  (and (mem20 x s) (not (mem20 x t))))))

;; mem_diff
  (assert
  (forall ((s (set c)) (t (set c)) (x c))
  (= (mem7 x (tb2t132 (diff c1 (t2tb132 s) (t2tb132 t))))
  (and (mem7 x s) (not (mem7 x t))))))

;; mem_diff
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set (set (tuple21 a b))))
  (x (set (tuple21 a b))))
  (= (mem4 x (tb2t10 (diff (set1 (tuple2 a1 b1)) (t2tb10 s) (t2tb10 t))))
  (and (mem4 x s) (not (mem4 x t))))))

;; mem_diff
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (tuple21 a b))) (x (tuple21 a b)))
  (= (mem3 x (tb2t11 (diff (tuple2 a1 b1) (t2tb11 s) (t2tb11 t))))
  (and (mem3 x s) (not (mem3 x t))))))

;; mem_diff
  (assert
  (forall ((s (set b)) (t (set b)) (x b))
  (= (mem2 x (tb2t12 (diff b1 (t2tb12 s) (t2tb12 t))))
  (and (mem2 x s) (not (mem2 x t))))))

;; mem_diff
  (assert
  (forall ((s (set a)) (t (set a)) (x a))
  (= (mem1 x (tb2t1 (diff a1 (t2tb1 s) (t2tb1 t))))
  (and (mem1 x s) (not (mem1 x t))))))

;; mem_diff
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t uni) (x uni))
  (= (mem a2 x (diff a2 s t)) (and (mem a2 x s) (not (mem a2 x t)))))))

(declare-fun Tuple2 (ty ty uni uni) uni)

;; Tuple2_sort
  (assert
  (forall ((a2 ty) (a3 ty))
  (forall ((x uni) (x1 uni)) (sort (tuple2 a3 a2) (Tuple2 a3 a2 x x1)))))

(declare-fun Tuple2_proj_1 (ty ty uni) uni)

;; Tuple2_proj_1_sort
  (assert
  (forall ((a2 ty) (a3 ty))
  (forall ((x uni)) (sort a3 (Tuple2_proj_1 a3 a2 x)))))

;; Tuple2_proj_1_def
  (assert
  (forall ((a2 ty) (a3 ty))
  (forall ((u uni) (u1 uni))
  (=> (sort a3 u) (= (Tuple2_proj_1 a3 a2 (Tuple2 a3 a2 u u1)) u)))))

(declare-fun Tuple2_proj_2 (ty ty uni) uni)

;; Tuple2_proj_2_sort
  (assert
  (forall ((a2 ty) (a3 ty))
  (forall ((x uni)) (sort a2 (Tuple2_proj_2 a3 a2 x)))))

;; Tuple2_proj_2_def
  (assert
  (forall ((a2 ty) (a3 ty))
  (forall ((u uni) (u1 uni))
  (=> (sort a2 u1) (= (Tuple2_proj_2 a3 a2 (Tuple2 a3 a2 u u1)) u1)))))

;; tuple2_inversion
  (assert
  (forall ((a2 ty) (a3 ty))
  (forall ((u uni))
  (=> (sort (tuple2 a3 a2) u)
  (= u (Tuple2 a3 a2 (Tuple2_proj_1 a3 a2 u) (Tuple2_proj_2 a3 a2 u)))))))

(declare-fun times (ty ty uni uni) uni)

;; times_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (tuple2 a2 b2)) (times b2 a2 x x1)))))

;; mem_times
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set (tuple21 (tuple21 a c) (tuple21 b d)))) (x uni)
  (y (tuple21 (tuple21 a c) (tuple21 b d))))
  (= (mem (tuple2 a2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
  (Tuple2 a2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) x (t2tb691 y))
  (times (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) a2 s (t2tb686 t)))
  (and (mem a2 x s) (mem24 y t))))))

;; mem_times
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set (set (tuple21 c d)))) (x uni) (y (set (tuple21 c
  d))))
  (= (mem (tuple2 a2 (set1 (tuple2 c1 d1)))
  (Tuple2 a2 (set1 (tuple2 c1 d1)) x (t2tb689 y))
  (times (set1 (tuple2 c1 d1)) a2 s (t2tb688 t)))
  (and (mem a2 x s) (mem22 y t))))))

;; mem_times
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set (tuple21 c d))) (x uni) (y (tuple21 c d)))
  (= (mem (tuple2 a2 (tuple2 c1 d1)) (Tuple2 a2 (tuple2 c1 d1) x (t2tb693 y))
  (times (tuple2 c1 d1) a2 s (t2tb689 t))) (and (mem a2 x s) (mem21 y t))))))

;; mem_times
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set d)) (x uni) (y d))
  (= (mem (tuple2 a2 d1) (Tuple2 a2 d1 x (t2tb694 y))
  (times d1 a2 s (t2tb690 t))) (and (mem a2 x s) (mem20 y t))))))

;; mem_times
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set c)) (x uni) (y c))
  (= (mem (tuple2 a2 c1) (Tuple2 a2 c1 x (t2tb135 y))
  (times c1 a2 s (t2tb132 t))) (and (mem a2 x s) (mem7 y t))))))

;; mem_times
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set (set (tuple21 a b)))) (x uni) (y (set (tuple21 a
  b))))
  (= (mem (tuple2 a2 (set1 (tuple2 a1 b1)))
  (Tuple2 a2 (set1 (tuple2 a1 b1)) x (t2tb11 y))
  (times (set1 (tuple2 a1 b1)) a2 s (t2tb10 t)))
  (and (mem a2 x s) (mem4 y t))))))

;; mem_times
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set (tuple21 a b))) (x uni) (y (tuple21 a b)))
  (= (mem (tuple2 a2 (tuple2 a1 b1)) (Tuple2 a2 (tuple2 a1 b1) x (t2tb13 y))
  (times (tuple2 a1 b1) a2 s (t2tb11 t))) (and (mem a2 x s) (mem3 y t))))))

;; mem_times
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set b)) (x uni) (y b))
  (= (mem (tuple2 a2 b1) (Tuple2 a2 b1 x (t2tb14 y))
  (times b1 a2 s (t2tb12 t))) (and (mem a2 x s) (mem2 y t))))))

;; mem_times
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set a)) (x uni) (y a))
  (= (mem (tuple2 a2 a1) (Tuple2 a2 a1 x (t2tb2 y))
  (times a1 a2 s (t2tb1 t))) (and (mem a2 x s) (mem1 y t))))))

(declare-fun t2tb721 ((set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  (tuple21 (tuple21 a c) (tuple21 b d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  (tuple21 (tuple21 a c) (tuple21 b d)))))) (sort
  (set1
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))
  (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))) (t2tb721 x))))

(declare-fun tb2t721 (uni) (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b
  d)) (tuple21 (tuple21 a c) (tuple21 b d)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  (tuple21 (tuple21 a c) (tuple21 b d))))))
  (! (= (tb2t721 (t2tb721 i)) i) :pattern ((t2tb721 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))
     (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))) j) (= (t2tb721 (tb2t721 j)) j)) :pattern (
  (t2tb721 (tb2t721 j))) )))

(declare-fun t2tb722 ((tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  (tuple21 (tuple21 a c) (tuple21 b d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  (tuple21 (tuple21 a c) (tuple21 b d))))) (sort
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))
  (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))) (t2tb722 x))))

(declare-fun tb2t722 (uni) (tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  (tuple21 (tuple21 a c) (tuple21 b d))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  (tuple21 (tuple21 a c) (tuple21 b d)))))
  (! (= (tb2t722 (t2tb722 i)) i) :pattern ((t2tb722 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))
     (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))) j) (= (t2tb722 (tb2t722 j)) j)) :pattern (
  (t2tb722 (tb2t722 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 (tuple21 a c) (tuple21 b d))))
  (t (set (tuple21 (tuple21 a c) (tuple21 b d)))) (x (tuple21 (tuple21 a c)
  (tuple21 b d))) (y (tuple21 (tuple21 a c) (tuple21 b d))))
  (= (mem
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))
  (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))
  (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb691 x) (t2tb691 y))
  (times (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))
  (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb686 s) (t2tb686 t)))
  (and (mem24 x s) (mem24 y t)))))

(declare-fun t2tb725 ((set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  (set (tuple21 c d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  (set (tuple21 c d)))))) (sort
  (set1
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (set1 (tuple2 c1 d1))))
  (t2tb725 x))))

(declare-fun tb2t725 (uni) (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b
  d)) (set (tuple21 c d)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  (set (tuple21 c d))))))
  (! (= (tb2t725 (t2tb725 i)) i) :pattern ((t2tb725 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (set1 (tuple2 c1 d1))))
     j) (= (t2tb725 (tb2t725 j)) j)) :pattern ((t2tb725 (tb2t725 j))) )))

(declare-fun t2tb726 ((tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  (set (tuple21 c d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) (set (tuple21 c
  d))))) (sort
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (set1 (tuple2 c1 d1)))
  (t2tb726 x))))

(declare-fun tb2t726 (uni) (tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  (set (tuple21 c d))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) (set (tuple21 c
  d))))) (! (= (tb2t726 (t2tb726 i)) i) :pattern ((t2tb726 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (set1 (tuple2 c1 d1))) j)
     (= (t2tb726 (tb2t726 j)) j)) :pattern ((t2tb726 (tb2t726 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 (tuple21 a c) (tuple21 b d))))
  (t (set (set (tuple21 c d)))) (x (tuple21 (tuple21 a c) (tuple21 b d)))
  (y (set (tuple21 c d))))
  (= (mem
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (set1 (tuple2 c1 d1)))
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (set1 (tuple2 c1 d1))
  (t2tb691 x) (t2tb689 y))
  (times (set1 (tuple2 c1 d1)) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))
  (t2tb686 s) (t2tb688 t))) (and (mem24 x s) (mem22 y t)))))

(declare-fun t2tb727 ((set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  (tuple21 c d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) (tuple21 c
  d))))) (sort
  (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 c1 d1)))
  (t2tb727 x))))

(declare-fun tb2t727 (uni) (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b
  d)) (tuple21 c d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) (tuple21 c
  d))))) (! (= (tb2t727 (t2tb727 i)) i) :pattern ((t2tb727 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 c1 d1))) j)
     (= (t2tb727 (tb2t727 j)) j)) :pattern ((t2tb727 (tb2t727 j))) )))

(declare-fun t2tb728 ((tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  (tuple21 c d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) (tuple21 c d))))
  (sort (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 c1 d1))
  (t2tb728 x))))

(declare-fun tb2t728 (uni) (tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  (tuple21 c d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) (tuple21 c d))))
  (! (= (tb2t728 (t2tb728 i)) i) :pattern ((t2tb728 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 c1 d1))
     j) (= (t2tb728 (tb2t728 j)) j)) :pattern ((t2tb728 (tb2t728 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 (tuple21 a c) (tuple21 b d)))) (t (set (tuple21 c
  d))) (x (tuple21 (tuple21 a c) (tuple21 b d))) (y (tuple21 c d)))
  (= (mem (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 c1 d1))
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 c1 d1) (t2tb691 x)
  (t2tb693 y))
  (times (tuple2 c1 d1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb686 s)
  (t2tb689 t))) (and (mem24 x s) (mem21 y t)))))

(declare-fun t2tb729 ((set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) d)))) (sort
  (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) d1)) (t2tb729 x))))

(declare-fun tb2t729 (uni) (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b
  d)) d)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) d))))
  (! (= (tb2t729 (t2tb729 i)) i) :pattern ((t2tb729 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) d1)) j)
     (= (t2tb729 (tb2t729 j)) j)) :pattern ((t2tb729 (tb2t729 j))) )))

(declare-fun t2tb730 ((tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) d)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) d))) (sort
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) d1) (t2tb730 x))))

(declare-fun tb2t730 (uni) (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) d))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) d)))
  (! (= (tb2t730 (t2tb730 i)) i) :pattern ((t2tb730 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) d1) j)
     (= (t2tb730 (tb2t730 j)) j)) :pattern ((t2tb730 (tb2t730 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 (tuple21 a c) (tuple21 b d)))) (t (set d))
  (x (tuple21 (tuple21 a c) (tuple21 b d))) (y d))
  (= (mem (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) d1)
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) d1 (t2tb691 x) (t2tb694 y))
  (times d1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb686 s) (t2tb690 t)))
  (and (mem24 x s) (mem20 y t)))))

(declare-fun t2tb733 ((set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) c)))) (sort
  (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) c1)) (t2tb733 x))))

(declare-fun tb2t733 (uni) (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b
  d)) c)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) c))))
  (! (= (tb2t733 (t2tb733 i)) i) :pattern ((t2tb733 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) c1)) j)
     (= (t2tb733 (tb2t733 j)) j)) :pattern ((t2tb733 (tb2t733 j))) )))

(declare-fun t2tb734 ((tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) c)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) c))) (sort
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) c1) (t2tb734 x))))

(declare-fun tb2t734 (uni) (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) c))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) c)))
  (! (= (tb2t734 (t2tb734 i)) i) :pattern ((t2tb734 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) c1) j)
     (= (t2tb734 (tb2t734 j)) j)) :pattern ((t2tb734 (tb2t734 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 (tuple21 a c) (tuple21 b d)))) (t (set c))
  (x (tuple21 (tuple21 a c) (tuple21 b d))) (y c))
  (= (mem (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) c1)
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) c1 (t2tb691 x) (t2tb135 y))
  (times c1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb686 s) (t2tb132 t)))
  (and (mem24 x s) (mem7 y t)))))

(declare-fun t2tb735 ((set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  (set (tuple21 a b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  (set (tuple21 a b)))))) (sort
  (set1
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (set1 (tuple2 a1 b1))))
  (t2tb735 x))))

(declare-fun tb2t735 (uni) (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b
  d)) (set (tuple21 a b)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  (set (tuple21 a b))))))
  (! (= (tb2t735 (t2tb735 i)) i) :pattern ((t2tb735 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (set1 (tuple2 a1 b1))))
     j) (= (t2tb735 (tb2t735 j)) j)) :pattern ((t2tb735 (tb2t735 j))) )))

(declare-fun t2tb736 ((tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  (set (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) (set (tuple21 a
  b))))) (sort
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (set1 (tuple2 a1 b1)))
  (t2tb736 x))))

(declare-fun tb2t736 (uni) (tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  (set (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) (set (tuple21 a
  b))))) (! (= (tb2t736 (t2tb736 i)) i) :pattern ((t2tb736 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (set1 (tuple2 a1 b1))) j)
     (= (t2tb736 (tb2t736 j)) j)) :pattern ((t2tb736 (tb2t736 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 (tuple21 a c) (tuple21 b d))))
  (t (set (set (tuple21 a b)))) (x (tuple21 (tuple21 a c) (tuple21 b d)))
  (y (set (tuple21 a b))))
  (= (mem
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (set1 (tuple2 a1 b1)))
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (set1 (tuple2 a1 b1))
  (t2tb691 x) (t2tb11 y))
  (times (set1 (tuple2 a1 b1)) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))
  (t2tb686 s) (t2tb10 t))) (and (mem24 x s) (mem4 y t)))))

(declare-fun t2tb737 ((set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) (tuple21 a
  b))))) (sort
  (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 a1 b1)))
  (t2tb737 x))))

(declare-fun tb2t737 (uni) (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b
  d)) (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) (tuple21 a
  b))))) (! (= (tb2t737 (t2tb737 i)) i) :pattern ((t2tb737 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 a1 b1))) j)
     (= (t2tb737 (tb2t737 j)) j)) :pattern ((t2tb737 (tb2t737 j))) )))

(declare-fun t2tb738 ((tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  (tuple21 a b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) (tuple21 a b))))
  (sort (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 a1 b1))
  (t2tb738 x))))

(declare-fun tb2t738 (uni) (tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  (tuple21 a b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) (tuple21 a b))))
  (! (= (tb2t738 (t2tb738 i)) i) :pattern ((t2tb738 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 a1 b1))
     j) (= (t2tb738 (tb2t738 j)) j)) :pattern ((t2tb738 (tb2t738 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 (tuple21 a c) (tuple21 b d)))) (t (set (tuple21 a
  b))) (x (tuple21 (tuple21 a c) (tuple21 b d))) (y (tuple21 a b)))
  (= (mem (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 a1 b1))
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 a1 b1) (t2tb691 x)
  (t2tb13 y))
  (times (tuple2 a1 b1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb686 s)
  (t2tb11 t))) (and (mem24 x s) (mem3 y t)))))

(declare-fun t2tb739 ((set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) b)))) (sort
  (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) b1)) (t2tb739 x))))

(declare-fun tb2t739 (uni) (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b
  d)) b)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) b))))
  (! (= (tb2t739 (t2tb739 i)) i) :pattern ((t2tb739 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) b1)) j)
     (= (t2tb739 (tb2t739 j)) j)) :pattern ((t2tb739 (tb2t739 j))) )))

(declare-fun t2tb740 ((tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) b)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) b))) (sort
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) b1) (t2tb740 x))))

(declare-fun tb2t740 (uni) (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) b))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) b)))
  (! (= (tb2t740 (t2tb740 i)) i) :pattern ((t2tb740 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) b1) j)
     (= (t2tb740 (tb2t740 j)) j)) :pattern ((t2tb740 (tb2t740 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 (tuple21 a c) (tuple21 b d)))) (t (set b))
  (x (tuple21 (tuple21 a c) (tuple21 b d))) (y b))
  (= (mem (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) b1)
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) b1 (t2tb691 x) (t2tb14 y))
  (times b1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb686 s) (t2tb12 t)))
  (and (mem24 x s) (mem2 y t)))))

(declare-fun t2tb741 ((set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) a)))) (sort
  (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) a1)) (t2tb741 x))))

(declare-fun tb2t741 (uni) (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b
  d)) a)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) a))))
  (! (= (tb2t741 (t2tb741 i)) i) :pattern ((t2tb741 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) a1)) j)
     (= (t2tb741 (tb2t741 j)) j)) :pattern ((t2tb741 (tb2t741 j))) )))

(declare-fun t2tb742 ((tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) a)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) a))) (sort
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) a1) (t2tb742 x))))

(declare-fun tb2t742 (uni) (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) a))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) a)))
  (! (= (tb2t742 (t2tb742 i)) i) :pattern ((t2tb742 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) a1) j)
     (= (t2tb742 (tb2t742 j)) j)) :pattern ((t2tb742 (tb2t742 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 (tuple21 a c) (tuple21 b d)))) (t (set a))
  (x (tuple21 (tuple21 a c) (tuple21 b d))) (y a))
  (= (mem (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) a1)
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) a1 (t2tb691 x) (t2tb2 y))
  (times a1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb686 s) (t2tb1 t)))
  (and (mem24 x s) (mem1 y t)))))

;; mem_times
  (assert
  (forall ((b2 ty))
  (forall ((s (set (tuple21 (tuple21 a c) (tuple21 b d)))) (t uni)
  (x (tuple21 (tuple21 a c) (tuple21 b d))) (y uni))
  (= (mem (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) b2)
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) b2 (t2tb691 x) y)
  (times b2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb686 s) t))
  (and (mem24 x s) (mem b2 y t))))))

(declare-fun t2tb769 ((set (tuple21 (set (tuple21 c d)) (tuple21 (tuple21 a
  c) (tuple21 b d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 c d)) (tuple21 (tuple21 a c)
  (tuple21 b d)))))) (sort
  (set1
  (tuple2 (set1 (tuple2 c1 d1)) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))))
  (t2tb769 x))))

(declare-fun tb2t769 (uni) (set (tuple21 (set (tuple21 c d))
  (tuple21 (tuple21 a c) (tuple21 b d)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 c d)) (tuple21 (tuple21 a c)
  (tuple21 b d)))))) (! (= (tb2t769 (t2tb769 i)) i) :pattern ((t2tb769 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (tuple2 (set1 (tuple2 c1 d1)) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))))
     j) (= (t2tb769 (tb2t769 j)) j)) :pattern ((t2tb769 (tb2t769 j))) )))

(declare-fun t2tb770 ((tuple21 (set (tuple21 c d)) (tuple21 (tuple21 a c)
  (tuple21 b d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 c d)) (tuple21 (tuple21 a c) (tuple21 b
  d))))) (sort
  (tuple2 (set1 (tuple2 c1 d1)) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
  (t2tb770 x))))

(declare-fun tb2t770 (uni) (tuple21 (set (tuple21 c d)) (tuple21 (tuple21 a
  c) (tuple21 b d))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 c d)) (tuple21 (tuple21 a c) (tuple21 b
  d))))) (! (= (tb2t770 (t2tb770 i)) i) :pattern ((t2tb770 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (tuple2 (set1 (tuple2 c1 d1)) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))) j)
     (= (t2tb770 (tb2t770 j)) j)) :pattern ((t2tb770 (tb2t770 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 c d)))) (t (set (tuple21 (tuple21 a c)
  (tuple21 b d)))) (x (set (tuple21 c d))) (y (tuple21 (tuple21 a c)
  (tuple21 b d))))
  (= (mem
  (tuple2 (set1 (tuple2 c1 d1)) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
  (Tuple2 (set1 (tuple2 c1 d1)) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))
  (t2tb689 x) (t2tb691 y))
  (times (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (set1 (tuple2 c1 d1))
  (t2tb688 s) (t2tb686 t))) (and (mem22 x s) (mem24 y t)))))

(declare-fun t2tb773 ((set (tuple21 (set (tuple21 c d)) (set (tuple21 c
  d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 c d)) (set (tuple21 c d)))))) (sort
  (set1 (tuple2 (set1 (tuple2 c1 d1)) (set1 (tuple2 c1 d1)))) (t2tb773 x))))

(declare-fun tb2t773 (uni) (set (tuple21 (set (tuple21 c d)) (set (tuple21 c
  d)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 c d)) (set (tuple21 c d))))))
  (! (= (tb2t773 (t2tb773 i)) i) :pattern ((t2tb773 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 c1 d1)) (set1 (tuple2 c1 d1)))) j)
     (= (t2tb773 (tb2t773 j)) j)) :pattern ((t2tb773 (tb2t773 j))) )))

(declare-fun t2tb774 ((tuple21 (set (tuple21 c d)) (set (tuple21 c d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 c d)) (set (tuple21 c d))))) (sort
  (tuple2 (set1 (tuple2 c1 d1)) (set1 (tuple2 c1 d1))) (t2tb774 x))))

(declare-fun tb2t774 (uni) (tuple21 (set (tuple21 c d)) (set (tuple21 c d))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 c d)) (set (tuple21 c d)))))
  (! (= (tb2t774 (t2tb774 i)) i) :pattern ((t2tb774 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 c1 d1)) (set1 (tuple2 c1 d1))) j)
     (= (t2tb774 (tb2t774 j)) j)) :pattern ((t2tb774 (tb2t774 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 c d)))) (t (set (set (tuple21 c d))))
  (x (set (tuple21 c d))) (y (set (tuple21 c d))))
  (= (mem (tuple2 (set1 (tuple2 c1 d1)) (set1 (tuple2 c1 d1)))
  (Tuple2 (set1 (tuple2 c1 d1)) (set1 (tuple2 c1 d1)) (t2tb689 x)
  (t2tb689 y))
  (times (set1 (tuple2 c1 d1)) (set1 (tuple2 c1 d1)) (t2tb688 s) (t2tb688 t)))
  (and (mem22 x s) (mem22 y t)))))

(declare-fun t2tb775 ((set (tuple21 (set (tuple21 c d)) (tuple21 c d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 c d)) (tuple21 c d))))) (sort
  (set1 (tuple2 (set1 (tuple2 c1 d1)) (tuple2 c1 d1))) (t2tb775 x))))

(declare-fun tb2t775 (uni) (set (tuple21 (set (tuple21 c d)) (tuple21 c d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 c d)) (tuple21 c d)))))
  (! (= (tb2t775 (t2tb775 i)) i) :pattern ((t2tb775 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 c1 d1)) (tuple2 c1 d1))) j)
     (= (t2tb775 (tb2t775 j)) j)) :pattern ((t2tb775 (tb2t775 j))) )))

(declare-fun t2tb776 ((tuple21 (set (tuple21 c d)) (tuple21 c d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 c d)) (tuple21 c d)))) (sort
  (tuple2 (set1 (tuple2 c1 d1)) (tuple2 c1 d1)) (t2tb776 x))))

(declare-fun tb2t776 (uni) (tuple21 (set (tuple21 c d)) (tuple21 c d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 c d)) (tuple21 c d))))
  (! (= (tb2t776 (t2tb776 i)) i) :pattern ((t2tb776 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 c1 d1)) (tuple2 c1 d1)) j)
     (= (t2tb776 (tb2t776 j)) j)) :pattern ((t2tb776 (tb2t776 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 c d)))) (t (set (tuple21 c d)))
  (x (set (tuple21 c d))) (y (tuple21 c d)))
  (= (mem (tuple2 (set1 (tuple2 c1 d1)) (tuple2 c1 d1))
  (Tuple2 (set1 (tuple2 c1 d1)) (tuple2 c1 d1) (t2tb689 x) (t2tb693 y))
  (times (tuple2 c1 d1) (set1 (tuple2 c1 d1)) (t2tb688 s) (t2tb689 t)))
  (and (mem22 x s) (mem21 y t)))))

(declare-fun t2tb777 ((set (tuple21 (set (tuple21 c d)) d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 c d)) d)))) (sort
  (set1 (tuple2 (set1 (tuple2 c1 d1)) d1)) (t2tb777 x))))

(declare-fun tb2t777 (uni) (set (tuple21 (set (tuple21 c d)) d)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 c d)) d))))
  (! (= (tb2t777 (t2tb777 i)) i) :pattern ((t2tb777 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 c1 d1)) d1)) j)
     (= (t2tb777 (tb2t777 j)) j)) :pattern ((t2tb777 (tb2t777 j))) )))

(declare-fun t2tb778 ((tuple21 (set (tuple21 c d)) d)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 c d)) d))) (sort
  (tuple2 (set1 (tuple2 c1 d1)) d1) (t2tb778 x))))

(declare-fun tb2t778 (uni) (tuple21 (set (tuple21 c d)) d))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 c d)) d)))
  (! (= (tb2t778 (t2tb778 i)) i) :pattern ((t2tb778 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 c1 d1)) d1) j)
     (= (t2tb778 (tb2t778 j)) j)) :pattern ((t2tb778 (tb2t778 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 c d)))) (t (set d)) (x (set (tuple21 c d)))
  (y d))
  (= (mem (tuple2 (set1 (tuple2 c1 d1)) d1)
  (Tuple2 (set1 (tuple2 c1 d1)) d1 (t2tb689 x) (t2tb694 y))
  (times d1 (set1 (tuple2 c1 d1)) (t2tb688 s) (t2tb690 t)))
  (and (mem22 x s) (mem20 y t)))))

(declare-fun t2tb781 ((set (tuple21 (set (tuple21 c d)) c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 c d)) c)))) (sort
  (set1 (tuple2 (set1 (tuple2 c1 d1)) c1)) (t2tb781 x))))

(declare-fun tb2t781 (uni) (set (tuple21 (set (tuple21 c d)) c)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 c d)) c))))
  (! (= (tb2t781 (t2tb781 i)) i) :pattern ((t2tb781 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 c1 d1)) c1)) j)
     (= (t2tb781 (tb2t781 j)) j)) :pattern ((t2tb781 (tb2t781 j))) )))

(declare-fun t2tb782 ((tuple21 (set (tuple21 c d)) c)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 c d)) c))) (sort
  (tuple2 (set1 (tuple2 c1 d1)) c1) (t2tb782 x))))

(declare-fun tb2t782 (uni) (tuple21 (set (tuple21 c d)) c))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 c d)) c)))
  (! (= (tb2t782 (t2tb782 i)) i) :pattern ((t2tb782 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 c1 d1)) c1) j)
     (= (t2tb782 (tb2t782 j)) j)) :pattern ((t2tb782 (tb2t782 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 c d)))) (t (set c)) (x (set (tuple21 c d)))
  (y c))
  (= (mem (tuple2 (set1 (tuple2 c1 d1)) c1)
  (Tuple2 (set1 (tuple2 c1 d1)) c1 (t2tb689 x) (t2tb135 y))
  (times c1 (set1 (tuple2 c1 d1)) (t2tb688 s) (t2tb132 t)))
  (and (mem22 x s) (mem7 y t)))))

(declare-fun t2tb783 ((set (tuple21 (set (tuple21 c d)) (set (tuple21 a
  b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 c d)) (set (tuple21 a b)))))) (sort
  (set1 (tuple2 (set1 (tuple2 c1 d1)) (set1 (tuple2 a1 b1)))) (t2tb783 x))))

(declare-fun tb2t783 (uni) (set (tuple21 (set (tuple21 c d)) (set (tuple21 a
  b)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 c d)) (set (tuple21 a b))))))
  (! (= (tb2t783 (t2tb783 i)) i) :pattern ((t2tb783 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 c1 d1)) (set1 (tuple2 a1 b1)))) j)
     (= (t2tb783 (tb2t783 j)) j)) :pattern ((t2tb783 (tb2t783 j))) )))

(declare-fun t2tb784 ((tuple21 (set (tuple21 c d)) (set (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 c d)) (set (tuple21 a b))))) (sort
  (tuple2 (set1 (tuple2 c1 d1)) (set1 (tuple2 a1 b1))) (t2tb784 x))))

(declare-fun tb2t784 (uni) (tuple21 (set (tuple21 c d)) (set (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 c d)) (set (tuple21 a b)))))
  (! (= (tb2t784 (t2tb784 i)) i) :pattern ((t2tb784 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 c1 d1)) (set1 (tuple2 a1 b1))) j)
     (= (t2tb784 (tb2t784 j)) j)) :pattern ((t2tb784 (tb2t784 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 c d)))) (t (set (set (tuple21 a b))))
  (x (set (tuple21 c d))) (y (set (tuple21 a b))))
  (= (mem (tuple2 (set1 (tuple2 c1 d1)) (set1 (tuple2 a1 b1)))
  (Tuple2 (set1 (tuple2 c1 d1)) (set1 (tuple2 a1 b1)) (t2tb689 x) (t2tb11 y))
  (times (set1 (tuple2 a1 b1)) (set1 (tuple2 c1 d1)) (t2tb688 s) (t2tb10 t)))
  (and (mem22 x s) (mem4 y t)))))

(declare-fun t2tb785 ((set (tuple21 (set (tuple21 c d)) (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 c d)) (tuple21 a b))))) (sort
  (set1 (tuple2 (set1 (tuple2 c1 d1)) (tuple2 a1 b1))) (t2tb785 x))))

(declare-fun tb2t785 (uni) (set (tuple21 (set (tuple21 c d)) (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 c d)) (tuple21 a b)))))
  (! (= (tb2t785 (t2tb785 i)) i) :pattern ((t2tb785 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 c1 d1)) (tuple2 a1 b1))) j)
     (= (t2tb785 (tb2t785 j)) j)) :pattern ((t2tb785 (tb2t785 j))) )))

(declare-fun t2tb786 ((tuple21 (set (tuple21 c d)) (tuple21 a b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 c d)) (tuple21 a b)))) (sort
  (tuple2 (set1 (tuple2 c1 d1)) (tuple2 a1 b1)) (t2tb786 x))))

(declare-fun tb2t786 (uni) (tuple21 (set (tuple21 c d)) (tuple21 a b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 c d)) (tuple21 a b))))
  (! (= (tb2t786 (t2tb786 i)) i) :pattern ((t2tb786 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 c1 d1)) (tuple2 a1 b1)) j)
     (= (t2tb786 (tb2t786 j)) j)) :pattern ((t2tb786 (tb2t786 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 c d)))) (t (set (tuple21 a b)))
  (x (set (tuple21 c d))) (y (tuple21 a b)))
  (= (mem (tuple2 (set1 (tuple2 c1 d1)) (tuple2 a1 b1))
  (Tuple2 (set1 (tuple2 c1 d1)) (tuple2 a1 b1) (t2tb689 x) (t2tb13 y))
  (times (tuple2 a1 b1) (set1 (tuple2 c1 d1)) (t2tb688 s) (t2tb11 t)))
  (and (mem22 x s) (mem3 y t)))))

(declare-fun t2tb787 ((set (tuple21 (set (tuple21 c d)) b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 c d)) b)))) (sort
  (set1 (tuple2 (set1 (tuple2 c1 d1)) b1)) (t2tb787 x))))

(declare-fun tb2t787 (uni) (set (tuple21 (set (tuple21 c d)) b)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 c d)) b))))
  (! (= (tb2t787 (t2tb787 i)) i) :pattern ((t2tb787 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 c1 d1)) b1)) j)
     (= (t2tb787 (tb2t787 j)) j)) :pattern ((t2tb787 (tb2t787 j))) )))

(declare-fun t2tb788 ((tuple21 (set (tuple21 c d)) b)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 c d)) b))) (sort
  (tuple2 (set1 (tuple2 c1 d1)) b1) (t2tb788 x))))

(declare-fun tb2t788 (uni) (tuple21 (set (tuple21 c d)) b))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 c d)) b)))
  (! (= (tb2t788 (t2tb788 i)) i) :pattern ((t2tb788 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 c1 d1)) b1) j)
     (= (t2tb788 (tb2t788 j)) j)) :pattern ((t2tb788 (tb2t788 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 c d)))) (t (set b)) (x (set (tuple21 c d)))
  (y b))
  (= (mem (tuple2 (set1 (tuple2 c1 d1)) b1)
  (Tuple2 (set1 (tuple2 c1 d1)) b1 (t2tb689 x) (t2tb14 y))
  (times b1 (set1 (tuple2 c1 d1)) (t2tb688 s) (t2tb12 t)))
  (and (mem22 x s) (mem2 y t)))))

(declare-fun t2tb789 ((set (tuple21 (set (tuple21 c d)) a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 c d)) a)))) (sort
  (set1 (tuple2 (set1 (tuple2 c1 d1)) a1)) (t2tb789 x))))

(declare-fun tb2t789 (uni) (set (tuple21 (set (tuple21 c d)) a)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 c d)) a))))
  (! (= (tb2t789 (t2tb789 i)) i) :pattern ((t2tb789 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 c1 d1)) a1)) j)
     (= (t2tb789 (tb2t789 j)) j)) :pattern ((t2tb789 (tb2t789 j))) )))

(declare-fun t2tb790 ((tuple21 (set (tuple21 c d)) a)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 c d)) a))) (sort
  (tuple2 (set1 (tuple2 c1 d1)) a1) (t2tb790 x))))

(declare-fun tb2t790 (uni) (tuple21 (set (tuple21 c d)) a))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 c d)) a)))
  (! (= (tb2t790 (t2tb790 i)) i) :pattern ((t2tb790 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 c1 d1)) a1) j)
     (= (t2tb790 (tb2t790 j)) j)) :pattern ((t2tb790 (tb2t790 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 c d)))) (t (set a)) (x (set (tuple21 c d)))
  (y a))
  (= (mem (tuple2 (set1 (tuple2 c1 d1)) a1)
  (Tuple2 (set1 (tuple2 c1 d1)) a1 (t2tb689 x) (t2tb2 y))
  (times a1 (set1 (tuple2 c1 d1)) (t2tb688 s) (t2tb1 t)))
  (and (mem22 x s) (mem1 y t)))))

;; mem_times
  (assert
  (forall ((b2 ty))
  (forall ((s (set (set (tuple21 c d)))) (t uni) (x (set (tuple21 c d)))
  (y uni))
  (= (mem (tuple2 (set1 (tuple2 c1 d1)) b2)
  (Tuple2 (set1 (tuple2 c1 d1)) b2 (t2tb689 x) y)
  (times b2 (set1 (tuple2 c1 d1)) (t2tb688 s) t))
  (and (mem22 x s) (mem b2 y t))))))

(declare-fun t2tb793 ((set (tuple21 (tuple21 c d) (tuple21 (tuple21 a c)
  (tuple21 b d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 c d) (tuple21 (tuple21 a c) (tuple21 b
  d)))))) (sort
  (set1 (tuple2 (tuple2 c1 d1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))))
  (t2tb793 x))))

(declare-fun tb2t793 (uni) (set (tuple21 (tuple21 c d) (tuple21 (tuple21 a c)
  (tuple21 b d)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 c d) (tuple21 (tuple21 a c) (tuple21 b
  d)))))) (! (= (tb2t793 (t2tb793 i)) i) :pattern ((t2tb793 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 c1 d1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))) j)
     (= (t2tb793 (tb2t793 j)) j)) :pattern ((t2tb793 (tb2t793 j))) )))

(declare-fun t2tb794 ((tuple21 (tuple21 c d) (tuple21 (tuple21 a c)
  (tuple21 b d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 c d) (tuple21 (tuple21 a c) (tuple21 b d)))))
  (sort (tuple2 (tuple2 c1 d1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
  (t2tb794 x))))

(declare-fun tb2t794 (uni) (tuple21 (tuple21 c d) (tuple21 (tuple21 a c)
  (tuple21 b d))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 c d) (tuple21 (tuple21 a c) (tuple21 b d)))))
  (! (= (tb2t794 (t2tb794 i)) i) :pattern ((t2tb794 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 c1 d1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
     j) (= (t2tb794 (tb2t794 j)) j)) :pattern ((t2tb794 (tb2t794 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 c d))) (t (set (tuple21 (tuple21 a c) (tuple21 b
  d)))) (x (tuple21 c d)) (y (tuple21 (tuple21 a c) (tuple21 b d))))
  (= (mem (tuple2 (tuple2 c1 d1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
  (Tuple2 (tuple2 c1 d1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb693 x)
  (t2tb691 y))
  (times (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 c1 d1) (t2tb689 s)
  (t2tb686 t))) (and (mem21 x s) (mem24 y t)))))

(declare-fun t2tb797 ((set (tuple21 (tuple21 c d) (set (tuple21 c d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 c d) (set (tuple21 c d)))))) (sort
  (set1 (tuple2 (tuple2 c1 d1) (set1 (tuple2 c1 d1)))) (t2tb797 x))))

(declare-fun tb2t797 (uni) (set (tuple21 (tuple21 c d) (set (tuple21 c d)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 c d) (set (tuple21 c d))))))
  (! (= (tb2t797 (t2tb797 i)) i) :pattern ((t2tb797 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 c1 d1) (set1 (tuple2 c1 d1)))) j)
     (= (t2tb797 (tb2t797 j)) j)) :pattern ((t2tb797 (tb2t797 j))) )))

(declare-fun t2tb798 ((tuple21 (tuple21 c d) (set (tuple21 c d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 c d) (set (tuple21 c d))))) (sort
  (tuple2 (tuple2 c1 d1) (set1 (tuple2 c1 d1))) (t2tb798 x))))

(declare-fun tb2t798 (uni) (tuple21 (tuple21 c d) (set (tuple21 c d))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 c d) (set (tuple21 c d)))))
  (! (= (tb2t798 (t2tb798 i)) i) :pattern ((t2tb798 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 c1 d1) (set1 (tuple2 c1 d1))) j)
     (= (t2tb798 (tb2t798 j)) j)) :pattern ((t2tb798 (tb2t798 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 c d))) (t (set (set (tuple21 c d))))
  (x (tuple21 c d)) (y (set (tuple21 c d))))
  (= (mem (tuple2 (tuple2 c1 d1) (set1 (tuple2 c1 d1)))
  (Tuple2 (tuple2 c1 d1) (set1 (tuple2 c1 d1)) (t2tb693 x) (t2tb689 y))
  (times (set1 (tuple2 c1 d1)) (tuple2 c1 d1) (t2tb689 s) (t2tb688 t)))
  (and (mem21 x s) (mem22 y t)))))

(declare-fun t2tb799 ((set (tuple21 (tuple21 c d) (tuple21 c d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 c d) (tuple21 c d))))) (sort
  (set1 (tuple2 (tuple2 c1 d1) (tuple2 c1 d1))) (t2tb799 x))))

(declare-fun tb2t799 (uni) (set (tuple21 (tuple21 c d) (tuple21 c d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 c d) (tuple21 c d)))))
  (! (= (tb2t799 (t2tb799 i)) i) :pattern ((t2tb799 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 c1 d1) (tuple2 c1 d1))) j)
     (= (t2tb799 (tb2t799 j)) j)) :pattern ((t2tb799 (tb2t799 j))) )))

(declare-fun t2tb800 ((tuple21 (tuple21 c d) (tuple21 c d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 c d) (tuple21 c d)))) (sort
  (tuple2 (tuple2 c1 d1) (tuple2 c1 d1)) (t2tb800 x))))

(declare-fun tb2t800 (uni) (tuple21 (tuple21 c d) (tuple21 c d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 c d) (tuple21 c d))))
  (! (= (tb2t800 (t2tb800 i)) i) :pattern ((t2tb800 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 c1 d1) (tuple2 c1 d1)) j)
     (= (t2tb800 (tb2t800 j)) j)) :pattern ((t2tb800 (tb2t800 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 c d))) (t (set (tuple21 c d))) (x (tuple21 c d))
  (y (tuple21 c d)))
  (= (mem (tuple2 (tuple2 c1 d1) (tuple2 c1 d1))
  (Tuple2 (tuple2 c1 d1) (tuple2 c1 d1) (t2tb693 x) (t2tb693 y))
  (times (tuple2 c1 d1) (tuple2 c1 d1) (t2tb689 s) (t2tb689 t)))
  (and (mem21 x s) (mem21 y t)))))

(declare-fun t2tb801 ((set (tuple21 (tuple21 c d) d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 c d) d)))) (sort
  (set1 (tuple2 (tuple2 c1 d1) d1)) (t2tb801 x))))

(declare-fun tb2t801 (uni) (set (tuple21 (tuple21 c d) d)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 c d) d))))
  (! (= (tb2t801 (t2tb801 i)) i) :pattern ((t2tb801 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 c1 d1) d1)) j)
     (= (t2tb801 (tb2t801 j)) j)) :pattern ((t2tb801 (tb2t801 j))) )))

(declare-fun t2tb802 ((tuple21 (tuple21 c d) d)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 c d) d))) (sort (tuple2 (tuple2 c1 d1) d1)
  (t2tb802 x))))

(declare-fun tb2t802 (uni) (tuple21 (tuple21 c d) d))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 c d) d)))
  (! (= (tb2t802 (t2tb802 i)) i) :pattern ((t2tb802 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 c1 d1) d1) j) (= (t2tb802 (tb2t802 j)) j)) :pattern (
  (t2tb802 (tb2t802 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 c d))) (t (set d)) (x (tuple21 c d)) (y d))
  (= (mem (tuple2 (tuple2 c1 d1) d1)
  (Tuple2 (tuple2 c1 d1) d1 (t2tb693 x) (t2tb694 y))
  (times d1 (tuple2 c1 d1) (t2tb689 s) (t2tb690 t)))
  (and (mem21 x s) (mem20 y t)))))

(declare-fun t2tb805 ((set (tuple21 (tuple21 c d) c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 c d) c)))) (sort
  (set1 (tuple2 (tuple2 c1 d1) c1)) (t2tb805 x))))

(declare-fun tb2t805 (uni) (set (tuple21 (tuple21 c d) c)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 c d) c))))
  (! (= (tb2t805 (t2tb805 i)) i) :pattern ((t2tb805 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 c1 d1) c1)) j)
     (= (t2tb805 (tb2t805 j)) j)) :pattern ((t2tb805 (tb2t805 j))) )))

(declare-fun t2tb806 ((tuple21 (tuple21 c d) c)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 c d) c))) (sort (tuple2 (tuple2 c1 d1) c1)
  (t2tb806 x))))

(declare-fun tb2t806 (uni) (tuple21 (tuple21 c d) c))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 c d) c)))
  (! (= (tb2t806 (t2tb806 i)) i) :pattern ((t2tb806 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 c1 d1) c1) j) (= (t2tb806 (tb2t806 j)) j)) :pattern (
  (t2tb806 (tb2t806 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 c d))) (t (set c)) (x (tuple21 c d)) (y c))
  (= (mem (tuple2 (tuple2 c1 d1) c1)
  (Tuple2 (tuple2 c1 d1) c1 (t2tb693 x) (t2tb135 y))
  (times c1 (tuple2 c1 d1) (t2tb689 s) (t2tb132 t)))
  (and (mem21 x s) (mem7 y t)))))

(declare-fun t2tb807 ((set (tuple21 (tuple21 c d) (set (tuple21 a b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 c d) (set (tuple21 a b)))))) (sort
  (set1 (tuple2 (tuple2 c1 d1) (set1 (tuple2 a1 b1)))) (t2tb807 x))))

(declare-fun tb2t807 (uni) (set (tuple21 (tuple21 c d) (set (tuple21 a b)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 c d) (set (tuple21 a b))))))
  (! (= (tb2t807 (t2tb807 i)) i) :pattern ((t2tb807 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 c1 d1) (set1 (tuple2 a1 b1)))) j)
     (= (t2tb807 (tb2t807 j)) j)) :pattern ((t2tb807 (tb2t807 j))) )))

(declare-fun t2tb808 ((tuple21 (tuple21 c d) (set (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 c d) (set (tuple21 a b))))) (sort
  (tuple2 (tuple2 c1 d1) (set1 (tuple2 a1 b1))) (t2tb808 x))))

(declare-fun tb2t808 (uni) (tuple21 (tuple21 c d) (set (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 c d) (set (tuple21 a b)))))
  (! (= (tb2t808 (t2tb808 i)) i) :pattern ((t2tb808 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 c1 d1) (set1 (tuple2 a1 b1))) j)
     (= (t2tb808 (tb2t808 j)) j)) :pattern ((t2tb808 (tb2t808 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 c d))) (t (set (set (tuple21 a b))))
  (x (tuple21 c d)) (y (set (tuple21 a b))))
  (= (mem (tuple2 (tuple2 c1 d1) (set1 (tuple2 a1 b1)))
  (Tuple2 (tuple2 c1 d1) (set1 (tuple2 a1 b1)) (t2tb693 x) (t2tb11 y))
  (times (set1 (tuple2 a1 b1)) (tuple2 c1 d1) (t2tb689 s) (t2tb10 t)))
  (and (mem21 x s) (mem4 y t)))))

(declare-fun t2tb809 ((set (tuple21 (tuple21 c d) (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 c d) (tuple21 a b))))) (sort
  (set1 (tuple2 (tuple2 c1 d1) (tuple2 a1 b1))) (t2tb809 x))))

(declare-fun tb2t809 (uni) (set (tuple21 (tuple21 c d) (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 c d) (tuple21 a b)))))
  (! (= (tb2t809 (t2tb809 i)) i) :pattern ((t2tb809 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 c1 d1) (tuple2 a1 b1))) j)
     (= (t2tb809 (tb2t809 j)) j)) :pattern ((t2tb809 (tb2t809 j))) )))

(declare-fun t2tb810 ((tuple21 (tuple21 c d) (tuple21 a b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 c d) (tuple21 a b)))) (sort
  (tuple2 (tuple2 c1 d1) (tuple2 a1 b1)) (t2tb810 x))))

(declare-fun tb2t810 (uni) (tuple21 (tuple21 c d) (tuple21 a b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 c d) (tuple21 a b))))
  (! (= (tb2t810 (t2tb810 i)) i) :pattern ((t2tb810 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 c1 d1) (tuple2 a1 b1)) j)
     (= (t2tb810 (tb2t810 j)) j)) :pattern ((t2tb810 (tb2t810 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 c d))) (t (set (tuple21 a b))) (x (tuple21 c d))
  (y (tuple21 a b)))
  (= (mem (tuple2 (tuple2 c1 d1) (tuple2 a1 b1))
  (Tuple2 (tuple2 c1 d1) (tuple2 a1 b1) (t2tb693 x) (t2tb13 y))
  (times (tuple2 a1 b1) (tuple2 c1 d1) (t2tb689 s) (t2tb11 t)))
  (and (mem21 x s) (mem3 y t)))))

(declare-fun t2tb811 ((set (tuple21 (tuple21 c d) b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 c d) b)))) (sort
  (set1 (tuple2 (tuple2 c1 d1) b1)) (t2tb811 x))))

(declare-fun tb2t811 (uni) (set (tuple21 (tuple21 c d) b)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 c d) b))))
  (! (= (tb2t811 (t2tb811 i)) i) :pattern ((t2tb811 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 c1 d1) b1)) j)
     (= (t2tb811 (tb2t811 j)) j)) :pattern ((t2tb811 (tb2t811 j))) )))

(declare-fun t2tb812 ((tuple21 (tuple21 c d) b)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 c d) b))) (sort (tuple2 (tuple2 c1 d1) b1)
  (t2tb812 x))))

(declare-fun tb2t812 (uni) (tuple21 (tuple21 c d) b))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 c d) b)))
  (! (= (tb2t812 (t2tb812 i)) i) :pattern ((t2tb812 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 c1 d1) b1) j) (= (t2tb812 (tb2t812 j)) j)) :pattern (
  (t2tb812 (tb2t812 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 c d))) (t (set b)) (x (tuple21 c d)) (y b))
  (= (mem (tuple2 (tuple2 c1 d1) b1)
  (Tuple2 (tuple2 c1 d1) b1 (t2tb693 x) (t2tb14 y))
  (times b1 (tuple2 c1 d1) (t2tb689 s) (t2tb12 t)))
  (and (mem21 x s) (mem2 y t)))))

(declare-fun t2tb813 ((set (tuple21 (tuple21 c d) a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 c d) a)))) (sort
  (set1 (tuple2 (tuple2 c1 d1) a1)) (t2tb813 x))))

(declare-fun tb2t813 (uni) (set (tuple21 (tuple21 c d) a)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 c d) a))))
  (! (= (tb2t813 (t2tb813 i)) i) :pattern ((t2tb813 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 c1 d1) a1)) j)
     (= (t2tb813 (tb2t813 j)) j)) :pattern ((t2tb813 (tb2t813 j))) )))

(declare-fun t2tb814 ((tuple21 (tuple21 c d) a)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 c d) a))) (sort (tuple2 (tuple2 c1 d1) a1)
  (t2tb814 x))))

(declare-fun tb2t814 (uni) (tuple21 (tuple21 c d) a))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 c d) a)))
  (! (= (tb2t814 (t2tb814 i)) i) :pattern ((t2tb814 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 c1 d1) a1) j) (= (t2tb814 (tb2t814 j)) j)) :pattern (
  (t2tb814 (tb2t814 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 c d))) (t (set a)) (x (tuple21 c d)) (y a))
  (= (mem (tuple2 (tuple2 c1 d1) a1)
  (Tuple2 (tuple2 c1 d1) a1 (t2tb693 x) (t2tb2 y))
  (times a1 (tuple2 c1 d1) (t2tb689 s) (t2tb1 t)))
  (and (mem21 x s) (mem1 y t)))))

;; mem_times
  (assert
  (forall ((b2 ty))
  (forall ((s (set (tuple21 c d))) (t uni) (x (tuple21 c d)) (y uni))
  (= (mem (tuple2 (tuple2 c1 d1) b2) (Tuple2 (tuple2 c1 d1) b2 (t2tb693 x) y)
  (times b2 (tuple2 c1 d1) (t2tb689 s) t)) (and (mem21 x s) (mem b2 y t))))))

(declare-fun t2tb817 ((set (tuple21 d (tuple21 (tuple21 a c) (tuple21 b
  d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 d (tuple21 (tuple21 a c) (tuple21 b d)))))) (sort
  (set1 (tuple2 d1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))) (t2tb817 x))))

(declare-fun tb2t817 (uni) (set (tuple21 d (tuple21 (tuple21 a c) (tuple21 b
  d)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 d (tuple21 (tuple21 a c) (tuple21 b d))))))
  (! (= (tb2t817 (t2tb817 i)) i) :pattern ((t2tb817 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 d1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))) j)
     (= (t2tb817 (tb2t817 j)) j)) :pattern ((t2tb817 (tb2t817 j))) )))

(declare-fun t2tb818 ((tuple21 d (tuple21 (tuple21 a c) (tuple21 b d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 d (tuple21 (tuple21 a c) (tuple21 b d))))) (sort
  (tuple2 d1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))) (t2tb818 x))))

(declare-fun tb2t818 (uni) (tuple21 d (tuple21 (tuple21 a c) (tuple21 b d))))

;; BridgeL
  (assert
  (forall ((i (tuple21 d (tuple21 (tuple21 a c) (tuple21 b d)))))
  (! (= (tb2t818 (t2tb818 i)) i) :pattern ((t2tb818 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 d1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))) j)
     (= (t2tb818 (tb2t818 j)) j)) :pattern ((t2tb818 (tb2t818 j))) )))

;; mem_times
  (assert
  (forall ((s (set d)) (t (set (tuple21 (tuple21 a c) (tuple21 b d)))) (x d)
  (y (tuple21 (tuple21 a c) (tuple21 b d))))
  (= (mem (tuple2 d1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
  (Tuple2 d1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb694 x) (t2tb691 y))
  (times (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) d1 (t2tb690 s) (t2tb686 t)))
  (and (mem20 x s) (mem24 y t)))))

(declare-fun t2tb821 ((set (tuple21 d (set (tuple21 c d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 d (set (tuple21 c d)))))) (sort
  (set1 (tuple2 d1 (set1 (tuple2 c1 d1)))) (t2tb821 x))))

(declare-fun tb2t821 (uni) (set (tuple21 d (set (tuple21 c d)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 d (set (tuple21 c d))))))
  (! (= (tb2t821 (t2tb821 i)) i) :pattern ((t2tb821 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 d1 (set1 (tuple2 c1 d1)))) j)
     (= (t2tb821 (tb2t821 j)) j)) :pattern ((t2tb821 (tb2t821 j))) )))

(declare-fun t2tb822 ((tuple21 d (set (tuple21 c d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 d (set (tuple21 c d))))) (sort
  (tuple2 d1 (set1 (tuple2 c1 d1))) (t2tb822 x))))

(declare-fun tb2t822 (uni) (tuple21 d (set (tuple21 c d))))

;; BridgeL
  (assert
  (forall ((i (tuple21 d (set (tuple21 c d)))))
  (! (= (tb2t822 (t2tb822 i)) i) :pattern ((t2tb822 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 d1 (set1 (tuple2 c1 d1))) j)
     (= (t2tb822 (tb2t822 j)) j)) :pattern ((t2tb822 (tb2t822 j))) )))

;; mem_times
  (assert
  (forall ((s (set d)) (t (set (set (tuple21 c d)))) (x d) (y (set (tuple21 c
  d))))
  (= (mem (tuple2 d1 (set1 (tuple2 c1 d1)))
  (Tuple2 d1 (set1 (tuple2 c1 d1)) (t2tb694 x) (t2tb689 y))
  (times (set1 (tuple2 c1 d1)) d1 (t2tb690 s) (t2tb688 t)))
  (and (mem20 x s) (mem22 y t)))))

(declare-fun t2tb823 ((set (tuple21 d (tuple21 c d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 d (tuple21 c d))))) (sort
  (set1 (tuple2 d1 (tuple2 c1 d1))) (t2tb823 x))))

(declare-fun tb2t823 (uni) (set (tuple21 d (tuple21 c d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 d (tuple21 c d)))))
  (! (= (tb2t823 (t2tb823 i)) i) :pattern ((t2tb823 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 d1 (tuple2 c1 d1))) j)
     (= (t2tb823 (tb2t823 j)) j)) :pattern ((t2tb823 (tb2t823 j))) )))

(declare-fun t2tb824 ((tuple21 d (tuple21 c d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 d (tuple21 c d)))) (sort (tuple2 d1 (tuple2 c1 d1))
  (t2tb824 x))))

(declare-fun tb2t824 (uni) (tuple21 d (tuple21 c d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 d (tuple21 c d))))
  (! (= (tb2t824 (t2tb824 i)) i) :pattern ((t2tb824 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 d1 (tuple2 c1 d1)) j) (= (t2tb824 (tb2t824 j)) j)) :pattern (
  (t2tb824 (tb2t824 j))) )))

;; mem_times
  (assert
  (forall ((s (set d)) (t (set (tuple21 c d))) (x d) (y (tuple21 c d)))
  (= (mem (tuple2 d1 (tuple2 c1 d1))
  (Tuple2 d1 (tuple2 c1 d1) (t2tb694 x) (t2tb693 y))
  (times (tuple2 c1 d1) d1 (t2tb690 s) (t2tb689 t)))
  (and (mem20 x s) (mem21 y t)))))

(declare-fun t2tb825 ((set (tuple21 d d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 d d)))) (sort (set1 (tuple2 d1 d1)) (t2tb825 x))))

(declare-fun tb2t825 (uni) (set (tuple21 d d)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 d d))))
  (! (= (tb2t825 (t2tb825 i)) i) :pattern ((t2tb825 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 d1 d1)) j) (= (t2tb825 (tb2t825 j)) j)) :pattern (
  (t2tb825 (tb2t825 j))) )))

(declare-fun t2tb826 ((tuple21 d d)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 d d))) (sort (tuple2 d1 d1) (t2tb826 x))))

(declare-fun tb2t826 (uni) (tuple21 d d))

;; BridgeL
  (assert
  (forall ((i (tuple21 d d)))
  (! (= (tb2t826 (t2tb826 i)) i) :pattern ((t2tb826 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 d1 d1) j) (= (t2tb826 (tb2t826 j)) j)) :pattern (
  (t2tb826 (tb2t826 j))) )))

;; mem_times
  (assert
  (forall ((s (set d)) (t (set d)) (x d) (y d))
  (= (mem (tuple2 d1 d1) (Tuple2 d1 d1 (t2tb694 x) (t2tb694 y))
  (times d1 d1 (t2tb690 s) (t2tb690 t))) (and (mem20 x s) (mem20 y t)))))

(declare-fun t2tb829 ((set (tuple21 d c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 d c)))) (sort (set1 (tuple2 d1 c1)) (t2tb829 x))))

(declare-fun tb2t829 (uni) (set (tuple21 d c)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 d c))))
  (! (= (tb2t829 (t2tb829 i)) i) :pattern ((t2tb829 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 d1 c1)) j) (= (t2tb829 (tb2t829 j)) j)) :pattern (
  (t2tb829 (tb2t829 j))) )))

(declare-fun t2tb830 ((tuple21 d c)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 d c))) (sort (tuple2 d1 c1) (t2tb830 x))))

(declare-fun tb2t830 (uni) (tuple21 d c))

;; BridgeL
  (assert
  (forall ((i (tuple21 d c)))
  (! (= (tb2t830 (t2tb830 i)) i) :pattern ((t2tb830 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 d1 c1) j) (= (t2tb830 (tb2t830 j)) j)) :pattern (
  (t2tb830 (tb2t830 j))) )))

;; mem_times
  (assert
  (forall ((s (set d)) (t (set c)) (x d) (y c))
  (= (mem (tuple2 d1 c1) (Tuple2 d1 c1 (t2tb694 x) (t2tb135 y))
  (times c1 d1 (t2tb690 s) (t2tb132 t))) (and (mem20 x s) (mem7 y t)))))

(declare-fun t2tb831 ((set (tuple21 d (set (tuple21 a b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 d (set (tuple21 a b)))))) (sort
  (set1 (tuple2 d1 (set1 (tuple2 a1 b1)))) (t2tb831 x))))

(declare-fun tb2t831 (uni) (set (tuple21 d (set (tuple21 a b)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 d (set (tuple21 a b))))))
  (! (= (tb2t831 (t2tb831 i)) i) :pattern ((t2tb831 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 d1 (set1 (tuple2 a1 b1)))) j)
     (= (t2tb831 (tb2t831 j)) j)) :pattern ((t2tb831 (tb2t831 j))) )))

(declare-fun t2tb832 ((tuple21 d (set (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 d (set (tuple21 a b))))) (sort
  (tuple2 d1 (set1 (tuple2 a1 b1))) (t2tb832 x))))

(declare-fun tb2t832 (uni) (tuple21 d (set (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (tuple21 d (set (tuple21 a b)))))
  (! (= (tb2t832 (t2tb832 i)) i) :pattern ((t2tb832 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 d1 (set1 (tuple2 a1 b1))) j)
     (= (t2tb832 (tb2t832 j)) j)) :pattern ((t2tb832 (tb2t832 j))) )))

;; mem_times
  (assert
  (forall ((s (set d)) (t (set (set (tuple21 a b)))) (x d) (y (set (tuple21 a
  b))))
  (= (mem (tuple2 d1 (set1 (tuple2 a1 b1)))
  (Tuple2 d1 (set1 (tuple2 a1 b1)) (t2tb694 x) (t2tb11 y))
  (times (set1 (tuple2 a1 b1)) d1 (t2tb690 s) (t2tb10 t)))
  (and (mem20 x s) (mem4 y t)))))

(declare-fun t2tb833 ((set (tuple21 d (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 d (tuple21 a b))))) (sort
  (set1 (tuple2 d1 (tuple2 a1 b1))) (t2tb833 x))))

(declare-fun tb2t833 (uni) (set (tuple21 d (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 d (tuple21 a b)))))
  (! (= (tb2t833 (t2tb833 i)) i) :pattern ((t2tb833 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 d1 (tuple2 a1 b1))) j)
     (= (t2tb833 (tb2t833 j)) j)) :pattern ((t2tb833 (tb2t833 j))) )))

(declare-fun t2tb834 ((tuple21 d (tuple21 a b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 d (tuple21 a b)))) (sort (tuple2 d1 (tuple2 a1 b1))
  (t2tb834 x))))

(declare-fun tb2t834 (uni) (tuple21 d (tuple21 a b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 d (tuple21 a b))))
  (! (= (tb2t834 (t2tb834 i)) i) :pattern ((t2tb834 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 d1 (tuple2 a1 b1)) j) (= (t2tb834 (tb2t834 j)) j)) :pattern (
  (t2tb834 (tb2t834 j))) )))

;; mem_times
  (assert
  (forall ((s (set d)) (t (set (tuple21 a b))) (x d) (y (tuple21 a b)))
  (= (mem (tuple2 d1 (tuple2 a1 b1))
  (Tuple2 d1 (tuple2 a1 b1) (t2tb694 x) (t2tb13 y))
  (times (tuple2 a1 b1) d1 (t2tb690 s) (t2tb11 t)))
  (and (mem20 x s) (mem3 y t)))))

(declare-fun t2tb835 ((set (tuple21 d b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 d b)))) (sort (set1 (tuple2 d1 b1)) (t2tb835 x))))

(declare-fun tb2t835 (uni) (set (tuple21 d b)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 d b))))
  (! (= (tb2t835 (t2tb835 i)) i) :pattern ((t2tb835 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 d1 b1)) j) (= (t2tb835 (tb2t835 j)) j)) :pattern (
  (t2tb835 (tb2t835 j))) )))

(declare-fun t2tb836 ((tuple21 d b)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 d b))) (sort (tuple2 d1 b1) (t2tb836 x))))

(declare-fun tb2t836 (uni) (tuple21 d b))

;; BridgeL
  (assert
  (forall ((i (tuple21 d b)))
  (! (= (tb2t836 (t2tb836 i)) i) :pattern ((t2tb836 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 d1 b1) j) (= (t2tb836 (tb2t836 j)) j)) :pattern (
  (t2tb836 (tb2t836 j))) )))

;; mem_times
  (assert
  (forall ((s (set d)) (t (set b)) (x d) (y b))
  (= (mem (tuple2 d1 b1) (Tuple2 d1 b1 (t2tb694 x) (t2tb14 y))
  (times b1 d1 (t2tb690 s) (t2tb12 t))) (and (mem20 x s) (mem2 y t)))))

(declare-fun t2tb837 ((set (tuple21 d a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 d a)))) (sort (set1 (tuple2 d1 a1)) (t2tb837 x))))

(declare-fun tb2t837 (uni) (set (tuple21 d a)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 d a))))
  (! (= (tb2t837 (t2tb837 i)) i) :pattern ((t2tb837 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 d1 a1)) j) (= (t2tb837 (tb2t837 j)) j)) :pattern (
  (t2tb837 (tb2t837 j))) )))

(declare-fun t2tb838 ((tuple21 d a)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 d a))) (sort (tuple2 d1 a1) (t2tb838 x))))

(declare-fun tb2t838 (uni) (tuple21 d a))

;; BridgeL
  (assert
  (forall ((i (tuple21 d a)))
  (! (= (tb2t838 (t2tb838 i)) i) :pattern ((t2tb838 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 d1 a1) j) (= (t2tb838 (tb2t838 j)) j)) :pattern (
  (t2tb838 (tb2t838 j))) )))

;; mem_times
  (assert
  (forall ((s (set d)) (t (set a)) (x d) (y a))
  (= (mem (tuple2 d1 a1) (Tuple2 d1 a1 (t2tb694 x) (t2tb2 y))
  (times a1 d1 (t2tb690 s) (t2tb1 t))) (and (mem20 x s) (mem1 y t)))))

;; mem_times
  (assert
  (forall ((b2 ty))
  (forall ((s (set d)) (t uni) (x d) (y uni))
  (= (mem (tuple2 d1 b2) (Tuple2 d1 b2 (t2tb694 x) y)
  (times b2 d1 (t2tb690 s) t)) (and (mem20 x s) (mem b2 y t))))))

(declare-fun t2tb129 ((set (tuple21 a c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a c)))) (sort (set1 (tuple2 a1 c1)) (t2tb129 x))))

(declare-fun tb2t129 (uni) (set (tuple21 a c)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a c))))
  (! (= (tb2t129 (t2tb129 i)) i) :pattern ((t2tb129 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 c1)) j) (= (t2tb129 (tb2t129 j)) j)) :pattern (
  (t2tb129 (tb2t129 j))) )))

(declare-fun t2tb687 ((set (tuple21 b d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 b d)))) (sort (set1 (tuple2 b1 d1)) (t2tb687 x))))

(declare-fun tb2t687 (uni) (set (tuple21 b d)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 b d))))
  (! (= (tb2t687 (t2tb687 i)) i) :pattern ((t2tb687 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 b1 d1)) j) (= (t2tb687 (tb2t687 j)) j)) :pattern (
  (t2tb687 (tb2t687 j))) )))

(declare-fun t2tb133 ((tuple21 a c)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 a c))) (sort (tuple2 a1 c1) (t2tb133 x))))

(declare-fun tb2t133 (uni) (tuple21 a c))

;; BridgeL
  (assert
  (forall ((i (tuple21 a c)))
  (! (= (tb2t133 (t2tb133 i)) i) :pattern ((t2tb133 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 c1) j) (= (t2tb133 (tb2t133 j)) j)) :pattern (
  (t2tb133 (tb2t133 j))) )))

(declare-fun t2tb692 ((tuple21 b d)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 b d))) (sort (tuple2 b1 d1) (t2tb692 x))))

(declare-fun tb2t692 (uni) (tuple21 b d))

;; BridgeL
  (assert
  (forall ((i (tuple21 b d)))
  (! (= (tb2t692 (t2tb692 i)) i) :pattern ((t2tb692 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 b1 d1) j) (= (t2tb692 (tb2t692 j)) j)) :pattern (
  (t2tb692 (tb2t692 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a c))) (t (set (tuple21 b d))) (x (tuple21 a c))
  (y (tuple21 b d)))
  (= (mem24
  (tb2t691 (Tuple2 (tuple2 a1 c1) (tuple2 b1 d1) (t2tb133 x) (t2tb692 y)))
  (tb2t686 (times (tuple2 b1 d1) (tuple2 a1 c1) (t2tb129 s) (t2tb687 t))))
  (and (mem (tuple2 a1 c1) (t2tb133 x) (t2tb129 s)) (mem (tuple2 b1 d1)
  (t2tb692 y) (t2tb687 t))))))

(declare-fun t2tb851 ((set (tuple21 c (tuple21 (tuple21 a c) (tuple21 b
  d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 c (tuple21 (tuple21 a c) (tuple21 b d)))))) (sort
  (set1 (tuple2 c1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))) (t2tb851 x))))

(declare-fun tb2t851 (uni) (set (tuple21 c (tuple21 (tuple21 a c) (tuple21 b
  d)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 c (tuple21 (tuple21 a c) (tuple21 b d))))))
  (! (= (tb2t851 (t2tb851 i)) i) :pattern ((t2tb851 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 c1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))) j)
     (= (t2tb851 (tb2t851 j)) j)) :pattern ((t2tb851 (tb2t851 j))) )))

(declare-fun t2tb852 ((tuple21 c (tuple21 (tuple21 a c) (tuple21 b d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 c (tuple21 (tuple21 a c) (tuple21 b d))))) (sort
  (tuple2 c1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))) (t2tb852 x))))

(declare-fun tb2t852 (uni) (tuple21 c (tuple21 (tuple21 a c) (tuple21 b d))))

;; BridgeL
  (assert
  (forall ((i (tuple21 c (tuple21 (tuple21 a c) (tuple21 b d)))))
  (! (= (tb2t852 (t2tb852 i)) i) :pattern ((t2tb852 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 c1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))) j)
     (= (t2tb852 (tb2t852 j)) j)) :pattern ((t2tb852 (tb2t852 j))) )))

;; mem_times
  (assert
  (forall ((s (set c)) (t (set (tuple21 (tuple21 a c) (tuple21 b d)))) (x c)
  (y (tuple21 (tuple21 a c) (tuple21 b d))))
  (= (mem (tuple2 c1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
  (Tuple2 c1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb135 x) (t2tb691 y))
  (times (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) c1 (t2tb132 s) (t2tb686 t)))
  (and (mem7 x s) (mem24 y t)))))

(declare-fun t2tb855 ((set (tuple21 c (set (tuple21 c d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 c (set (tuple21 c d)))))) (sort
  (set1 (tuple2 c1 (set1 (tuple2 c1 d1)))) (t2tb855 x))))

(declare-fun tb2t855 (uni) (set (tuple21 c (set (tuple21 c d)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 c (set (tuple21 c d))))))
  (! (= (tb2t855 (t2tb855 i)) i) :pattern ((t2tb855 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 c1 (set1 (tuple2 c1 d1)))) j)
     (= (t2tb855 (tb2t855 j)) j)) :pattern ((t2tb855 (tb2t855 j))) )))

(declare-fun t2tb856 ((tuple21 c (set (tuple21 c d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 c (set (tuple21 c d))))) (sort
  (tuple2 c1 (set1 (tuple2 c1 d1))) (t2tb856 x))))

(declare-fun tb2t856 (uni) (tuple21 c (set (tuple21 c d))))

;; BridgeL
  (assert
  (forall ((i (tuple21 c (set (tuple21 c d)))))
  (! (= (tb2t856 (t2tb856 i)) i) :pattern ((t2tb856 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 c1 (set1 (tuple2 c1 d1))) j)
     (= (t2tb856 (tb2t856 j)) j)) :pattern ((t2tb856 (tb2t856 j))) )))

;; mem_times
  (assert
  (forall ((s (set c)) (t (set (set (tuple21 c d)))) (x c) (y (set (tuple21 c
  d))))
  (= (mem (tuple2 c1 (set1 (tuple2 c1 d1)))
  (Tuple2 c1 (set1 (tuple2 c1 d1)) (t2tb135 x) (t2tb689 y))
  (times (set1 (tuple2 c1 d1)) c1 (t2tb132 s) (t2tb688 t)))
  (and (mem7 x s) (mem22 y t)))))

(declare-fun t2tb857 ((set (tuple21 c (tuple21 c d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 c (tuple21 c d))))) (sort
  (set1 (tuple2 c1 (tuple2 c1 d1))) (t2tb857 x))))

(declare-fun tb2t857 (uni) (set (tuple21 c (tuple21 c d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 c (tuple21 c d)))))
  (! (= (tb2t857 (t2tb857 i)) i) :pattern ((t2tb857 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 c1 (tuple2 c1 d1))) j)
     (= (t2tb857 (tb2t857 j)) j)) :pattern ((t2tb857 (tb2t857 j))) )))

(declare-fun t2tb858 ((tuple21 c (tuple21 c d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 c (tuple21 c d)))) (sort (tuple2 c1 (tuple2 c1 d1))
  (t2tb858 x))))

(declare-fun tb2t858 (uni) (tuple21 c (tuple21 c d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 c (tuple21 c d))))
  (! (= (tb2t858 (t2tb858 i)) i) :pattern ((t2tb858 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 c1 (tuple2 c1 d1)) j) (= (t2tb858 (tb2t858 j)) j)) :pattern (
  (t2tb858 (tb2t858 j))) )))

;; mem_times
  (assert
  (forall ((s (set c)) (t (set (tuple21 c d))) (x c) (y (tuple21 c d)))
  (= (mem (tuple2 c1 (tuple2 c1 d1))
  (Tuple2 c1 (tuple2 c1 d1) (t2tb135 x) (t2tb693 y))
  (times (tuple2 c1 d1) c1 (t2tb132 s) (t2tb689 t)))
  (and (mem7 x s) (mem21 y t)))))

;; mem_times
  (assert
  (forall ((s (set c)) (t (set d)) (x c) (y d))
  (= (mem21 (tb2t693 (Tuple2 c1 d1 (t2tb135 x) (t2tb694 y)))
  (tb2t689 (times d1 c1 (t2tb132 s) (t2tb690 t))))
  (and (mem7 x s) (mem20 y t)))))

(declare-fun t2tb216 ((set (tuple21 c c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 c c)))) (sort (set1 (tuple2 c1 c1)) (t2tb216 x))))

(declare-fun tb2t216 (uni) (set (tuple21 c c)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 c c))))
  (! (= (tb2t216 (t2tb216 i)) i) :pattern ((t2tb216 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 c1 c1)) j) (= (t2tb216 (tb2t216 j)) j)) :pattern (
  (t2tb216 (tb2t216 j))) )))

(declare-fun t2tb217 ((tuple21 c c)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 c c))) (sort (tuple2 c1 c1) (t2tb217 x))))

(declare-fun tb2t217 (uni) (tuple21 c c))

;; BridgeL
  (assert
  (forall ((i (tuple21 c c)))
  (! (= (tb2t217 (t2tb217 i)) i) :pattern ((t2tb217 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 c1 c1) j) (= (t2tb217 (tb2t217 j)) j)) :pattern (
  (t2tb217 (tb2t217 j))) )))

;; mem_times
  (assert
  (forall ((s (set c)) (t (set c)) (x c) (y c))
  (= (mem (tuple2 c1 c1) (Tuple2 c1 c1 (t2tb135 x) (t2tb135 y))
  (times c1 c1 (t2tb132 s) (t2tb132 t))) (and (mem7 x s) (mem7 y t)))))

(declare-fun t2tb218 ((set (tuple21 c (set (tuple21 a b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 c (set (tuple21 a b)))))) (sort
  (set1 (tuple2 c1 (set1 (tuple2 a1 b1)))) (t2tb218 x))))

(declare-fun tb2t218 (uni) (set (tuple21 c (set (tuple21 a b)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 c (set (tuple21 a b))))))
  (! (= (tb2t218 (t2tb218 i)) i) :pattern ((t2tb218 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 c1 (set1 (tuple2 a1 b1)))) j)
     (= (t2tb218 (tb2t218 j)) j)) :pattern ((t2tb218 (tb2t218 j))) )))

(declare-fun t2tb219 ((tuple21 c (set (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 c (set (tuple21 a b))))) (sort
  (tuple2 c1 (set1 (tuple2 a1 b1))) (t2tb219 x))))

(declare-fun tb2t219 (uni) (tuple21 c (set (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (tuple21 c (set (tuple21 a b)))))
  (! (= (tb2t219 (t2tb219 i)) i) :pattern ((t2tb219 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 c1 (set1 (tuple2 a1 b1))) j)
     (= (t2tb219 (tb2t219 j)) j)) :pattern ((t2tb219 (tb2t219 j))) )))

;; mem_times
  (assert
  (forall ((s (set c)) (t (set (set (tuple21 a b)))) (x c) (y (set (tuple21 a
  b))))
  (= (mem (tuple2 c1 (set1 (tuple2 a1 b1)))
  (Tuple2 c1 (set1 (tuple2 a1 b1)) (t2tb135 x) (t2tb11 y))
  (times (set1 (tuple2 a1 b1)) c1 (t2tb132 s) (t2tb10 t)))
  (and (mem7 x s) (mem4 y t)))))

(declare-fun t2tb220 ((set (tuple21 c (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 c (tuple21 a b))))) (sort
  (set1 (tuple2 c1 (tuple2 a1 b1))) (t2tb220 x))))

(declare-fun tb2t220 (uni) (set (tuple21 c (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 c (tuple21 a b)))))
  (! (= (tb2t220 (t2tb220 i)) i) :pattern ((t2tb220 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 c1 (tuple2 a1 b1))) j)
     (= (t2tb220 (tb2t220 j)) j)) :pattern ((t2tb220 (tb2t220 j))) )))

(declare-fun t2tb221 ((tuple21 c (tuple21 a b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 c (tuple21 a b)))) (sort (tuple2 c1 (tuple2 a1 b1))
  (t2tb221 x))))

(declare-fun tb2t221 (uni) (tuple21 c (tuple21 a b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 c (tuple21 a b))))
  (! (= (tb2t221 (t2tb221 i)) i) :pattern ((t2tb221 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 c1 (tuple2 a1 b1)) j) (= (t2tb221 (tb2t221 j)) j)) :pattern (
  (t2tb221 (tb2t221 j))) )))

;; mem_times
  (assert
  (forall ((s (set c)) (t (set (tuple21 a b))) (x c) (y (tuple21 a b)))
  (= (mem (tuple2 c1 (tuple2 a1 b1))
  (Tuple2 c1 (tuple2 a1 b1) (t2tb135 x) (t2tb13 y))
  (times (tuple2 a1 b1) c1 (t2tb132 s) (t2tb11 t)))
  (and (mem7 x s) (mem3 y t)))))

(declare-fun t2tb222 ((set (tuple21 c b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 c b)))) (sort (set1 (tuple2 c1 b1)) (t2tb222 x))))

(declare-fun tb2t222 (uni) (set (tuple21 c b)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 c b))))
  (! (= (tb2t222 (t2tb222 i)) i) :pattern ((t2tb222 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 c1 b1)) j) (= (t2tb222 (tb2t222 j)) j)) :pattern (
  (t2tb222 (tb2t222 j))) )))

(declare-fun t2tb223 ((tuple21 c b)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 c b))) (sort (tuple2 c1 b1) (t2tb223 x))))

(declare-fun tb2t223 (uni) (tuple21 c b))

;; BridgeL
  (assert
  (forall ((i (tuple21 c b)))
  (! (= (tb2t223 (t2tb223 i)) i) :pattern ((t2tb223 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 c1 b1) j) (= (t2tb223 (tb2t223 j)) j)) :pattern (
  (t2tb223 (tb2t223 j))) )))

;; mem_times
  (assert
  (forall ((s (set c)) (t (set b)) (x c) (y b))
  (= (mem (tuple2 c1 b1) (Tuple2 c1 b1 (t2tb135 x) (t2tb14 y))
  (times b1 c1 (t2tb132 s) (t2tb12 t))) (and (mem7 x s) (mem2 y t)))))

(declare-fun t2tb224 ((set (tuple21 c a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 c a)))) (sort (set1 (tuple2 c1 a1)) (t2tb224 x))))

(declare-fun tb2t224 (uni) (set (tuple21 c a)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 c a))))
  (! (= (tb2t224 (t2tb224 i)) i) :pattern ((t2tb224 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 c1 a1)) j) (= (t2tb224 (tb2t224 j)) j)) :pattern (
  (t2tb224 (tb2t224 j))) )))

(declare-fun t2tb225 ((tuple21 c a)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 c a))) (sort (tuple2 c1 a1) (t2tb225 x))))

(declare-fun tb2t225 (uni) (tuple21 c a))

;; BridgeL
  (assert
  (forall ((i (tuple21 c a)))
  (! (= (tb2t225 (t2tb225 i)) i) :pattern ((t2tb225 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 c1 a1) j) (= (t2tb225 (tb2t225 j)) j)) :pattern (
  (t2tb225 (tb2t225 j))) )))

;; mem_times
  (assert
  (forall ((s (set c)) (t (set a)) (x c) (y a))
  (= (mem (tuple2 c1 a1) (Tuple2 c1 a1 (t2tb135 x) (t2tb2 y))
  (times a1 c1 (t2tb132 s) (t2tb1 t))) (and (mem7 x s) (mem1 y t)))))

;; mem_times
  (assert
  (forall ((b2 ty))
  (forall ((s (set c)) (t uni) (x c) (y uni))
  (= (mem (tuple2 c1 b2) (Tuple2 c1 b2 (t2tb135 x) y)
  (times b2 c1 (t2tb132 s) t)) (and (mem7 x s) (mem b2 y t))))))

(declare-fun t2tb861 ((set (tuple21 (set (tuple21 a b)) (tuple21 (tuple21 a
  c) (tuple21 b d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a b)) (tuple21 (tuple21 a c)
  (tuple21 b d)))))) (sort
  (set1
  (tuple2 (set1 (tuple2 a1 b1)) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))))
  (t2tb861 x))))

(declare-fun tb2t861 (uni) (set (tuple21 (set (tuple21 a b))
  (tuple21 (tuple21 a c) (tuple21 b d)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a b)) (tuple21 (tuple21 a c)
  (tuple21 b d)))))) (! (= (tb2t861 (t2tb861 i)) i) :pattern ((t2tb861 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (tuple2 (set1 (tuple2 a1 b1)) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))))
     j) (= (t2tb861 (tb2t861 j)) j)) :pattern ((t2tb861 (tb2t861 j))) )))

(declare-fun t2tb862 ((tuple21 (set (tuple21 a b)) (tuple21 (tuple21 a c)
  (tuple21 b d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a b)) (tuple21 (tuple21 a c) (tuple21 b
  d))))) (sort
  (tuple2 (set1 (tuple2 a1 b1)) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
  (t2tb862 x))))

(declare-fun tb2t862 (uni) (tuple21 (set (tuple21 a b)) (tuple21 (tuple21 a
  c) (tuple21 b d))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a b)) (tuple21 (tuple21 a c) (tuple21 b
  d))))) (! (= (tb2t862 (t2tb862 i)) i) :pattern ((t2tb862 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (tuple2 (set1 (tuple2 a1 b1)) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))) j)
     (= (t2tb862 (tb2t862 j)) j)) :pattern ((t2tb862 (tb2t862 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set (tuple21 (tuple21 a c)
  (tuple21 b d)))) (x (set (tuple21 a b))) (y (tuple21 (tuple21 a c)
  (tuple21 b d))))
  (= (mem
  (tuple2 (set1 (tuple2 a1 b1)) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
  (Tuple2 (set1 (tuple2 a1 b1)) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))
  (t2tb11 x) (t2tb691 y))
  (times (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (set1 (tuple2 a1 b1))
  (t2tb10 s) (t2tb686 t))) (and (mem4 x s) (mem24 y t)))))

(declare-fun t2tb865 ((set (tuple21 (set (tuple21 a b)) (set (tuple21 c
  d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a b)) (set (tuple21 c d)))))) (sort
  (set1 (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 c1 d1)))) (t2tb865 x))))

(declare-fun tb2t865 (uni) (set (tuple21 (set (tuple21 a b)) (set (tuple21 c
  d)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a b)) (set (tuple21 c d))))))
  (! (= (tb2t865 (t2tb865 i)) i) :pattern ((t2tb865 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 c1 d1)))) j)
     (= (t2tb865 (tb2t865 j)) j)) :pattern ((t2tb865 (tb2t865 j))) )))

(declare-fun t2tb866 ((tuple21 (set (tuple21 a b)) (set (tuple21 c d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a b)) (set (tuple21 c d))))) (sort
  (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 c1 d1))) (t2tb866 x))))

(declare-fun tb2t866 (uni) (tuple21 (set (tuple21 a b)) (set (tuple21 c d))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a b)) (set (tuple21 c d)))))
  (! (= (tb2t866 (t2tb866 i)) i) :pattern ((t2tb866 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 c1 d1))) j)
     (= (t2tb866 (tb2t866 j)) j)) :pattern ((t2tb866 (tb2t866 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set (set (tuple21 c d))))
  (x (set (tuple21 a b))) (y (set (tuple21 c d))))
  (= (mem (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 c1 d1)))
  (Tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 c1 d1)) (t2tb11 x) (t2tb689 y))
  (times (set1 (tuple2 c1 d1)) (set1 (tuple2 a1 b1)) (t2tb10 s) (t2tb688 t)))
  (and (mem4 x s) (mem22 y t)))))

(declare-fun t2tb867 ((set (tuple21 (set (tuple21 a b)) (tuple21 c d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a b)) (tuple21 c d))))) (sort
  (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 c1 d1))) (t2tb867 x))))

(declare-fun tb2t867 (uni) (set (tuple21 (set (tuple21 a b)) (tuple21 c d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a b)) (tuple21 c d)))))
  (! (= (tb2t867 (t2tb867 i)) i) :pattern ((t2tb867 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 c1 d1))) j)
     (= (t2tb867 (tb2t867 j)) j)) :pattern ((t2tb867 (tb2t867 j))) )))

(declare-fun t2tb868 ((tuple21 (set (tuple21 a b)) (tuple21 c d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a b)) (tuple21 c d)))) (sort
  (tuple2 (set1 (tuple2 a1 b1)) (tuple2 c1 d1)) (t2tb868 x))))

(declare-fun tb2t868 (uni) (tuple21 (set (tuple21 a b)) (tuple21 c d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a b)) (tuple21 c d))))
  (! (= (tb2t868 (t2tb868 i)) i) :pattern ((t2tb868 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 a1 b1)) (tuple2 c1 d1)) j)
     (= (t2tb868 (tb2t868 j)) j)) :pattern ((t2tb868 (tb2t868 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set (tuple21 c d)))
  (x (set (tuple21 a b))) (y (tuple21 c d)))
  (= (mem (tuple2 (set1 (tuple2 a1 b1)) (tuple2 c1 d1))
  (Tuple2 (set1 (tuple2 a1 b1)) (tuple2 c1 d1) (t2tb11 x) (t2tb693 y))
  (times (tuple2 c1 d1) (set1 (tuple2 a1 b1)) (t2tb10 s) (t2tb689 t)))
  (and (mem4 x s) (mem21 y t)))))

(declare-fun t2tb869 ((set (tuple21 (set (tuple21 a b)) d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a b)) d)))) (sort
  (set1 (tuple2 (set1 (tuple2 a1 b1)) d1)) (t2tb869 x))))

(declare-fun tb2t869 (uni) (set (tuple21 (set (tuple21 a b)) d)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a b)) d))))
  (! (= (tb2t869 (t2tb869 i)) i) :pattern ((t2tb869 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 a1 b1)) d1)) j)
     (= (t2tb869 (tb2t869 j)) j)) :pattern ((t2tb869 (tb2t869 j))) )))

(declare-fun t2tb870 ((tuple21 (set (tuple21 a b)) d)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a b)) d))) (sort
  (tuple2 (set1 (tuple2 a1 b1)) d1) (t2tb870 x))))

(declare-fun tb2t870 (uni) (tuple21 (set (tuple21 a b)) d))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a b)) d)))
  (! (= (tb2t870 (t2tb870 i)) i) :pattern ((t2tb870 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 a1 b1)) d1) j)
     (= (t2tb870 (tb2t870 j)) j)) :pattern ((t2tb870 (tb2t870 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set d)) (x (set (tuple21 a b)))
  (y d))
  (= (mem (tuple2 (set1 (tuple2 a1 b1)) d1)
  (Tuple2 (set1 (tuple2 a1 b1)) d1 (t2tb11 x) (t2tb694 y))
  (times d1 (set1 (tuple2 a1 b1)) (t2tb10 s) (t2tb690 t)))
  (and (mem4 x s) (mem20 y t)))))

(declare-fun t2tb234 ((set (tuple21 (set (tuple21 a b)) c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a b)) c)))) (sort
  (set1 (tuple2 (set1 (tuple2 a1 b1)) c1)) (t2tb234 x))))

(declare-fun tb2t234 (uni) (set (tuple21 (set (tuple21 a b)) c)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a b)) c))))
  (! (= (tb2t234 (t2tb234 i)) i) :pattern ((t2tb234 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 a1 b1)) c1)) j)
     (= (t2tb234 (tb2t234 j)) j)) :pattern ((t2tb234 (tb2t234 j))) )))

(declare-fun t2tb235 ((tuple21 (set (tuple21 a b)) c)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a b)) c))) (sort
  (tuple2 (set1 (tuple2 a1 b1)) c1) (t2tb235 x))))

(declare-fun tb2t235 (uni) (tuple21 (set (tuple21 a b)) c))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a b)) c)))
  (! (= (tb2t235 (t2tb235 i)) i) :pattern ((t2tb235 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 a1 b1)) c1) j)
     (= (t2tb235 (tb2t235 j)) j)) :pattern ((t2tb235 (tb2t235 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set c)) (x (set (tuple21 a b)))
  (y c))
  (= (mem (tuple2 (set1 (tuple2 a1 b1)) c1)
  (Tuple2 (set1 (tuple2 a1 b1)) c1 (t2tb11 x) (t2tb135 y))
  (times c1 (set1 (tuple2 a1 b1)) (t2tb10 s) (t2tb132 t)))
  (and (mem4 x s) (mem7 y t)))))

(declare-fun t2tb15 ((set (tuple21 (set (tuple21 a b)) (set (tuple21 a
  b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a b)) (set (tuple21 a b)))))) (sort
  (set1 (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1)))) (t2tb15 x))))

(declare-fun tb2t15 (uni) (set (tuple21 (set (tuple21 a b)) (set (tuple21 a
  b)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a b)) (set (tuple21 a b))))))
  (! (= (tb2t15 (t2tb15 i)) i) :pattern ((t2tb15 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1)))) j)
     (= (t2tb15 (tb2t15 j)) j)) :pattern ((t2tb15 (tb2t15 j))) )))

(declare-fun t2tb16 ((tuple21 (set (tuple21 a b)) (set (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a b)) (set (tuple21 a b))))) (sort
  (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1))) (t2tb16 x))))

(declare-fun tb2t16 (uni) (tuple21 (set (tuple21 a b)) (set (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a b)) (set (tuple21 a b)))))
  (! (= (tb2t16 (t2tb16 i)) i) :pattern ((t2tb16 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1))) j)
     (= (t2tb16 (tb2t16 j)) j)) :pattern ((t2tb16 (tb2t16 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set (set (tuple21 a b))))
  (x (set (tuple21 a b))) (y (set (tuple21 a b))))
  (= (mem (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1)))
  (Tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1)) (t2tb11 x) (t2tb11 y))
  (times (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1)) (t2tb10 s) (t2tb10 t)))
  (and (mem4 x s) (mem4 y t)))))

(declare-fun t2tb17 ((set (tuple21 (set (tuple21 a b)) (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a b)) (tuple21 a b))))) (sort
  (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 b1))) (t2tb17 x))))

(declare-fun tb2t17 (uni) (set (tuple21 (set (tuple21 a b)) (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a b)) (tuple21 a b)))))
  (! (= (tb2t17 (t2tb17 i)) i) :pattern ((t2tb17 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 b1))) j)
     (= (t2tb17 (tb2t17 j)) j)) :pattern ((t2tb17 (tb2t17 j))) )))

(declare-fun t2tb18 ((tuple21 (set (tuple21 a b)) (tuple21 a b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a b)) (tuple21 a b)))) (sort
  (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 b1)) (t2tb18 x))))

(declare-fun tb2t18 (uni) (tuple21 (set (tuple21 a b)) (tuple21 a b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a b)) (tuple21 a b))))
  (! (= (tb2t18 (t2tb18 i)) i) :pattern ((t2tb18 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 b1)) j)
     (= (t2tb18 (tb2t18 j)) j)) :pattern ((t2tb18 (tb2t18 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set (tuple21 a b)))
  (x (set (tuple21 a b))) (y (tuple21 a b)))
  (= (mem (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 b1))
  (Tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 b1) (t2tb11 x) (t2tb13 y))
  (times (tuple2 a1 b1) (set1 (tuple2 a1 b1)) (t2tb10 s) (t2tb11 t)))
  (and (mem4 x s) (mem3 y t)))))

(declare-fun t2tb19 ((set (tuple21 (set (tuple21 a b)) b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a b)) b)))) (sort
  (set1 (tuple2 (set1 (tuple2 a1 b1)) b1)) (t2tb19 x))))

(declare-fun tb2t19 (uni) (set (tuple21 (set (tuple21 a b)) b)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a b)) b))))
  (! (= (tb2t19 (t2tb19 i)) i) :pattern ((t2tb19 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 a1 b1)) b1)) j)
     (= (t2tb19 (tb2t19 j)) j)) :pattern ((t2tb19 (tb2t19 j))) )))

(declare-fun t2tb20 ((tuple21 (set (tuple21 a b)) b)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a b)) b))) (sort
  (tuple2 (set1 (tuple2 a1 b1)) b1) (t2tb20 x))))

(declare-fun tb2t20 (uni) (tuple21 (set (tuple21 a b)) b))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a b)) b)))
  (! (= (tb2t20 (t2tb20 i)) i) :pattern ((t2tb20 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 a1 b1)) b1) j)
     (= (t2tb20 (tb2t20 j)) j)) :pattern ((t2tb20 (tb2t20 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set b)) (x (set (tuple21 a b)))
  (y b))
  (= (mem (tuple2 (set1 (tuple2 a1 b1)) b1)
  (Tuple2 (set1 (tuple2 a1 b1)) b1 (t2tb11 x) (t2tb14 y))
  (times b1 (set1 (tuple2 a1 b1)) (t2tb10 s) (t2tb12 t)))
  (and (mem4 x s) (mem2 y t)))))

(declare-fun t2tb21 ((tuple21 (set (tuple21 a b)) a)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a b)) a))) (sort
  (tuple2 (set1 (tuple2 a1 b1)) a1) (t2tb21 x))))

(declare-fun tb2t21 (uni) (tuple21 (set (tuple21 a b)) a))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a b)) a)))
  (! (= (tb2t21 (t2tb21 i)) i) :pattern ((t2tb21 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 a1 b1)) a1) j)
     (= (t2tb21 (tb2t21 j)) j)) :pattern ((t2tb21 (tb2t21 j))) )))

(declare-fun t2tb22 ((set (tuple21 (set (tuple21 a b)) a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a b)) a)))) (sort
  (set1 (tuple2 (set1 (tuple2 a1 b1)) a1)) (t2tb22 x))))

(declare-fun tb2t22 (uni) (set (tuple21 (set (tuple21 a b)) a)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a b)) a))))
  (! (= (tb2t22 (t2tb22 i)) i) :pattern ((t2tb22 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 a1 b1)) a1)) j)
     (= (t2tb22 (tb2t22 j)) j)) :pattern ((t2tb22 (tb2t22 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set a)) (x (set (tuple21 a b)))
  (y a))
  (= (mem (tuple2 (set1 (tuple2 a1 b1)) a1)
  (Tuple2 (set1 (tuple2 a1 b1)) a1 (t2tb11 x) (t2tb2 y))
  (times a1 (set1 (tuple2 a1 b1)) (t2tb10 s) (t2tb1 t)))
  (and (mem4 x s) (mem1 y t)))))

;; mem_times
  (assert
  (forall ((b2 ty))
  (forall ((s (set (set (tuple21 a b)))) (t uni) (x (set (tuple21 a b)))
  (y uni))
  (= (mem (tuple2 (set1 (tuple2 a1 b1)) b2)
  (Tuple2 (set1 (tuple2 a1 b1)) b2 (t2tb11 x) y)
  (times b2 (set1 (tuple2 a1 b1)) (t2tb10 s) t))
  (and (mem4 x s) (mem b2 y t))))))

(declare-fun t2tb873 ((set (tuple21 (tuple21 a b) (tuple21 (tuple21 a c)
  (tuple21 b d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) (tuple21 (tuple21 a c) (tuple21 b
  d)))))) (sort
  (set1 (tuple2 (tuple2 a1 b1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))))
  (t2tb873 x))))

(declare-fun tb2t873 (uni) (set (tuple21 (tuple21 a b) (tuple21 (tuple21 a c)
  (tuple21 b d)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a b) (tuple21 (tuple21 a c) (tuple21 b
  d)))))) (! (= (tb2t873 (t2tb873 i)) i) :pattern ((t2tb873 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 a1 b1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))) j)
     (= (t2tb873 (tb2t873 j)) j)) :pattern ((t2tb873 (tb2t873 j))) )))

(declare-fun t2tb874 ((tuple21 (tuple21 a b) (tuple21 (tuple21 a c)
  (tuple21 b d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a b) (tuple21 (tuple21 a c) (tuple21 b d)))))
  (sort (tuple2 (tuple2 a1 b1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
  (t2tb874 x))))

(declare-fun tb2t874 (uni) (tuple21 (tuple21 a b) (tuple21 (tuple21 a c)
  (tuple21 b d))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a b) (tuple21 (tuple21 a c) (tuple21 b d)))))
  (! (= (tb2t874 (t2tb874 i)) i) :pattern ((t2tb874 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 b1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
     j) (= (t2tb874 (tb2t874 j)) j)) :pattern ((t2tb874 (tb2t874 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (tuple21 (tuple21 a c) (tuple21 b
  d)))) (x (tuple21 a b)) (y (tuple21 (tuple21 a c) (tuple21 b d))))
  (= (mem (tuple2 (tuple2 a1 b1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
  (Tuple2 (tuple2 a1 b1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb13 x)
  (t2tb691 y))
  (times (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 a1 b1) (t2tb11 s)
  (t2tb686 t))) (and (mem3 x s) (mem24 y t)))))

(declare-fun t2tb877 ((set (tuple21 (tuple21 a b) (set (tuple21 c d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) (set (tuple21 c d)))))) (sort
  (set1 (tuple2 (tuple2 a1 b1) (set1 (tuple2 c1 d1)))) (t2tb877 x))))

(declare-fun tb2t877 (uni) (set (tuple21 (tuple21 a b) (set (tuple21 c d)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a b) (set (tuple21 c d))))))
  (! (= (tb2t877 (t2tb877 i)) i) :pattern ((t2tb877 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 b1) (set1 (tuple2 c1 d1)))) j)
     (= (t2tb877 (tb2t877 j)) j)) :pattern ((t2tb877 (tb2t877 j))) )))

(declare-fun t2tb878 ((tuple21 (tuple21 a b) (set (tuple21 c d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a b) (set (tuple21 c d))))) (sort
  (tuple2 (tuple2 a1 b1) (set1 (tuple2 c1 d1))) (t2tb878 x))))

(declare-fun tb2t878 (uni) (tuple21 (tuple21 a b) (set (tuple21 c d))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a b) (set (tuple21 c d)))))
  (! (= (tb2t878 (t2tb878 i)) i) :pattern ((t2tb878 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 b1) (set1 (tuple2 c1 d1))) j)
     (= (t2tb878 (tb2t878 j)) j)) :pattern ((t2tb878 (tb2t878 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (set (tuple21 c d))))
  (x (tuple21 a b)) (y (set (tuple21 c d))))
  (= (mem (tuple2 (tuple2 a1 b1) (set1 (tuple2 c1 d1)))
  (Tuple2 (tuple2 a1 b1) (set1 (tuple2 c1 d1)) (t2tb13 x) (t2tb689 y))
  (times (set1 (tuple2 c1 d1)) (tuple2 a1 b1) (t2tb11 s) (t2tb688 t)))
  (and (mem3 x s) (mem22 y t)))))

(declare-fun t2tb879 ((set (tuple21 (tuple21 a b) (tuple21 c d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) (tuple21 c d))))) (sort
  (set1 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1))) (t2tb879 x))))

(declare-fun tb2t879 (uni) (set (tuple21 (tuple21 a b) (tuple21 c d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a b) (tuple21 c d)))))
  (! (= (tb2t879 (t2tb879 i)) i) :pattern ((t2tb879 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1))) j)
     (= (t2tb879 (tb2t879 j)) j)) :pattern ((t2tb879 (tb2t879 j))) )))

(declare-fun t2tb880 ((tuple21 (tuple21 a b) (tuple21 c d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a b) (tuple21 c d)))) (sort
  (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) (t2tb880 x))))

(declare-fun tb2t880 (uni) (tuple21 (tuple21 a b) (tuple21 c d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a b) (tuple21 c d))))
  (! (= (tb2t880 (t2tb880 i)) i) :pattern ((t2tb880 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) j)
     (= (t2tb880 (tb2t880 j)) j)) :pattern ((t2tb880 (tb2t880 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (tuple21 c d))) (x (tuple21 a b))
  (y (tuple21 c d)))
  (= (mem (tuple2 (tuple2 a1 b1) (tuple2 c1 d1))
  (Tuple2 (tuple2 a1 b1) (tuple2 c1 d1) (t2tb13 x) (t2tb693 y))
  (times (tuple2 c1 d1) (tuple2 a1 b1) (t2tb11 s) (t2tb689 t)))
  (and (mem3 x s) (mem21 y t)))))

(declare-fun t2tb881 ((set (tuple21 (tuple21 a b) d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) d)))) (sort
  (set1 (tuple2 (tuple2 a1 b1) d1)) (t2tb881 x))))

(declare-fun tb2t881 (uni) (set (tuple21 (tuple21 a b) d)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a b) d))))
  (! (= (tb2t881 (t2tb881 i)) i) :pattern ((t2tb881 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 b1) d1)) j)
     (= (t2tb881 (tb2t881 j)) j)) :pattern ((t2tb881 (tb2t881 j))) )))

(declare-fun t2tb882 ((tuple21 (tuple21 a b) d)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a b) d))) (sort (tuple2 (tuple2 a1 b1) d1)
  (t2tb882 x))))

(declare-fun tb2t882 (uni) (tuple21 (tuple21 a b) d))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a b) d)))
  (! (= (tb2t882 (t2tb882 i)) i) :pattern ((t2tb882 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 b1) d1) j) (= (t2tb882 (tb2t882 j)) j)) :pattern (
  (t2tb882 (tb2t882 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a b))) (t (set d)) (x (tuple21 a b)) (y d))
  (= (mem (tuple2 (tuple2 a1 b1) d1)
  (Tuple2 (tuple2 a1 b1) d1 (t2tb13 x) (t2tb694 y))
  (times d1 (tuple2 a1 b1) (t2tb11 s) (t2tb690 t)))
  (and (mem3 x s) (mem20 y t)))))

(declare-fun t2tb244 ((tuple21 (tuple21 a b) c)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a b) c))) (sort (tuple2 (tuple2 a1 b1) c1)
  (t2tb244 x))))

(declare-fun tb2t244 (uni) (tuple21 (tuple21 a b) c))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a b) c)))
  (! (= (tb2t244 (t2tb244 i)) i) :pattern ((t2tb244 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 b1) c1) j) (= (t2tb244 (tb2t244 j)) j)) :pattern (
  (t2tb244 (tb2t244 j))) )))

(declare-fun t2tb245 ((set (tuple21 (tuple21 a b) c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) c)))) (sort
  (set1 (tuple2 (tuple2 a1 b1) c1)) (t2tb245 x))))

(declare-fun tb2t245 (uni) (set (tuple21 (tuple21 a b) c)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a b) c))))
  (! (= (tb2t245 (t2tb245 i)) i) :pattern ((t2tb245 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 b1) c1)) j)
     (= (t2tb245 (tb2t245 j)) j)) :pattern ((t2tb245 (tb2t245 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a b))) (t (set c)) (x (tuple21 a b)) (y c))
  (= (mem (tuple2 (tuple2 a1 b1) c1)
  (Tuple2 (tuple2 a1 b1) c1 (t2tb13 x) (t2tb135 y))
  (times c1 (tuple2 a1 b1) (t2tb11 s) (t2tb132 t)))
  (and (mem3 x s) (mem7 y t)))))

(declare-fun t2tb23 ((set (tuple21 (tuple21 a b) (set (tuple21 a b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) (set (tuple21 a b)))))) (sort
  (set1 (tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 b1)))) (t2tb23 x))))

(declare-fun tb2t23 (uni) (set (tuple21 (tuple21 a b) (set (tuple21 a b)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a b) (set (tuple21 a b))))))
  (! (= (tb2t23 (t2tb23 i)) i) :pattern ((t2tb23 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 b1)))) j)
     (= (t2tb23 (tb2t23 j)) j)) :pattern ((t2tb23 (tb2t23 j))) )))

(declare-fun t2tb24 ((tuple21 (tuple21 a b) (set (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a b) (set (tuple21 a b))))) (sort
  (tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 b1))) (t2tb24 x))))

(declare-fun tb2t24 (uni) (tuple21 (tuple21 a b) (set (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a b) (set (tuple21 a b)))))
  (! (= (tb2t24 (t2tb24 i)) i) :pattern ((t2tb24 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 b1))) j)
     (= (t2tb24 (tb2t24 j)) j)) :pattern ((t2tb24 (tb2t24 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (set (tuple21 a b))))
  (x (tuple21 a b)) (y (set (tuple21 a b))))
  (= (mem (tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 b1)))
  (Tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 b1)) (t2tb13 x) (t2tb11 y))
  (times (set1 (tuple2 a1 b1)) (tuple2 a1 b1) (t2tb11 s) (t2tb10 t)))
  (and (mem3 x s) (mem4 y t)))))

(declare-fun t2tb25 ((set (tuple21 (tuple21 a b) (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) (tuple21 a b))))) (sort
  (set1 (tuple2 (tuple2 a1 b1) (tuple2 a1 b1))) (t2tb25 x))))

(declare-fun tb2t25 (uni) (set (tuple21 (tuple21 a b) (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a b) (tuple21 a b)))))
  (! (= (tb2t25 (t2tb25 i)) i) :pattern ((t2tb25 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 b1) (tuple2 a1 b1))) j)
     (= (t2tb25 (tb2t25 j)) j)) :pattern ((t2tb25 (tb2t25 j))) )))

(declare-fun t2tb26 ((tuple21 (tuple21 a b) (tuple21 a b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a b) (tuple21 a b)))) (sort
  (tuple2 (tuple2 a1 b1) (tuple2 a1 b1)) (t2tb26 x))))

(declare-fun tb2t26 (uni) (tuple21 (tuple21 a b) (tuple21 a b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a b) (tuple21 a b))))
  (! (= (tb2t26 (t2tb26 i)) i) :pattern ((t2tb26 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 b1) (tuple2 a1 b1)) j)
     (= (t2tb26 (tb2t26 j)) j)) :pattern ((t2tb26 (tb2t26 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (tuple21 a b))) (x (tuple21 a b))
  (y (tuple21 a b)))
  (= (mem (tuple2 (tuple2 a1 b1) (tuple2 a1 b1))
  (Tuple2 (tuple2 a1 b1) (tuple2 a1 b1) (t2tb13 x) (t2tb13 y))
  (times (tuple2 a1 b1) (tuple2 a1 b1) (t2tb11 s) (t2tb11 t)))
  (and (mem3 x s) (mem3 y t)))))

(declare-fun t2tb27 ((set (tuple21 (tuple21 a b) b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) b)))) (sort
  (set1 (tuple2 (tuple2 a1 b1) b1)) (t2tb27 x))))

(declare-fun tb2t27 (uni) (set (tuple21 (tuple21 a b) b)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a b) b))))
  (! (= (tb2t27 (t2tb27 i)) i) :pattern ((t2tb27 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 b1) b1)) j)
     (= (t2tb27 (tb2t27 j)) j)) :pattern ((t2tb27 (tb2t27 j))) )))

(declare-fun t2tb28 ((tuple21 (tuple21 a b) b)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a b) b))) (sort (tuple2 (tuple2 a1 b1) b1)
  (t2tb28 x))))

(declare-fun tb2t28 (uni) (tuple21 (tuple21 a b) b))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a b) b)))
  (! (= (tb2t28 (t2tb28 i)) i) :pattern ((t2tb28 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 b1) b1) j) (= (t2tb28 (tb2t28 j)) j)) :pattern (
  (t2tb28 (tb2t28 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a b))) (t (set b)) (x (tuple21 a b)) (y b))
  (= (mem (tuple2 (tuple2 a1 b1) b1)
  (Tuple2 (tuple2 a1 b1) b1 (t2tb13 x) (t2tb14 y))
  (times b1 (tuple2 a1 b1) (t2tb11 s) (t2tb12 t)))
  (and (mem3 x s) (mem2 y t)))))

(declare-fun t2tb29 ((set (tuple21 (tuple21 a b) a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) a)))) (sort
  (set1 (tuple2 (tuple2 a1 b1) a1)) (t2tb29 x))))

(declare-fun tb2t29 (uni) (set (tuple21 (tuple21 a b) a)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a b) a))))
  (! (= (tb2t29 (t2tb29 i)) i) :pattern ((t2tb29 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 b1) a1)) j)
     (= (t2tb29 (tb2t29 j)) j)) :pattern ((t2tb29 (tb2t29 j))) )))

(declare-fun t2tb30 ((tuple21 (tuple21 a b) a)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a b) a))) (sort (tuple2 (tuple2 a1 b1) a1)
  (t2tb30 x))))

(declare-fun tb2t30 (uni) (tuple21 (tuple21 a b) a))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a b) a)))
  (! (= (tb2t30 (t2tb30 i)) i) :pattern ((t2tb30 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 b1) a1) j) (= (t2tb30 (tb2t30 j)) j)) :pattern (
  (t2tb30 (tb2t30 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a b))) (t (set a)) (x (tuple21 a b)) (y a))
  (= (mem (tuple2 (tuple2 a1 b1) a1)
  (Tuple2 (tuple2 a1 b1) a1 (t2tb13 x) (t2tb2 y))
  (times a1 (tuple2 a1 b1) (t2tb11 s) (t2tb1 t)))
  (and (mem3 x s) (mem1 y t)))))

;; mem_times
  (assert
  (forall ((b2 ty))
  (forall ((s (set (tuple21 a b))) (t uni) (x (tuple21 a b)) (y uni))
  (= (mem (tuple2 (tuple2 a1 b1) b2) (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) y)
  (times b2 (tuple2 a1 b1) (t2tb11 s) t)) (and (mem3 x s) (mem b2 y t))))))

(declare-fun t2tb885 ((set (tuple21 b (tuple21 (tuple21 a c) (tuple21 b
  d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 b (tuple21 (tuple21 a c) (tuple21 b d)))))) (sort
  (set1 (tuple2 b1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))) (t2tb885 x))))

(declare-fun tb2t885 (uni) (set (tuple21 b (tuple21 (tuple21 a c) (tuple21 b
  d)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 b (tuple21 (tuple21 a c) (tuple21 b d))))))
  (! (= (tb2t885 (t2tb885 i)) i) :pattern ((t2tb885 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 b1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))) j)
     (= (t2tb885 (tb2t885 j)) j)) :pattern ((t2tb885 (tb2t885 j))) )))

(declare-fun t2tb886 ((tuple21 b (tuple21 (tuple21 a c) (tuple21 b d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 b (tuple21 (tuple21 a c) (tuple21 b d))))) (sort
  (tuple2 b1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))) (t2tb886 x))))

(declare-fun tb2t886 (uni) (tuple21 b (tuple21 (tuple21 a c) (tuple21 b d))))

;; BridgeL
  (assert
  (forall ((i (tuple21 b (tuple21 (tuple21 a c) (tuple21 b d)))))
  (! (= (tb2t886 (t2tb886 i)) i) :pattern ((t2tb886 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 b1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))) j)
     (= (t2tb886 (tb2t886 j)) j)) :pattern ((t2tb886 (tb2t886 j))) )))

;; mem_times
  (assert
  (forall ((s (set b)) (t (set (tuple21 (tuple21 a c) (tuple21 b d)))) (x b)
  (y (tuple21 (tuple21 a c) (tuple21 b d))))
  (= (mem (tuple2 b1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
  (Tuple2 b1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb14 x) (t2tb691 y))
  (times (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) b1 (t2tb12 s) (t2tb686 t)))
  (and (mem2 x s) (mem24 y t)))))

(declare-fun t2tb889 ((set (tuple21 b (set (tuple21 c d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 b (set (tuple21 c d)))))) (sort
  (set1 (tuple2 b1 (set1 (tuple2 c1 d1)))) (t2tb889 x))))

(declare-fun tb2t889 (uni) (set (tuple21 b (set (tuple21 c d)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 b (set (tuple21 c d))))))
  (! (= (tb2t889 (t2tb889 i)) i) :pattern ((t2tb889 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 b1 (set1 (tuple2 c1 d1)))) j)
     (= (t2tb889 (tb2t889 j)) j)) :pattern ((t2tb889 (tb2t889 j))) )))

(declare-fun t2tb890 ((tuple21 b (set (tuple21 c d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 b (set (tuple21 c d))))) (sort
  (tuple2 b1 (set1 (tuple2 c1 d1))) (t2tb890 x))))

(declare-fun tb2t890 (uni) (tuple21 b (set (tuple21 c d))))

;; BridgeL
  (assert
  (forall ((i (tuple21 b (set (tuple21 c d)))))
  (! (= (tb2t890 (t2tb890 i)) i) :pattern ((t2tb890 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 b1 (set1 (tuple2 c1 d1))) j)
     (= (t2tb890 (tb2t890 j)) j)) :pattern ((t2tb890 (tb2t890 j))) )))

;; mem_times
  (assert
  (forall ((s (set b)) (t (set (set (tuple21 c d)))) (x b) (y (set (tuple21 c
  d))))
  (= (mem (tuple2 b1 (set1 (tuple2 c1 d1)))
  (Tuple2 b1 (set1 (tuple2 c1 d1)) (t2tb14 x) (t2tb689 y))
  (times (set1 (tuple2 c1 d1)) b1 (t2tb12 s) (t2tb688 t)))
  (and (mem2 x s) (mem22 y t)))))

(declare-fun t2tb891 ((set (tuple21 b (tuple21 c d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 b (tuple21 c d))))) (sort
  (set1 (tuple2 b1 (tuple2 c1 d1))) (t2tb891 x))))

(declare-fun tb2t891 (uni) (set (tuple21 b (tuple21 c d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 b (tuple21 c d)))))
  (! (= (tb2t891 (t2tb891 i)) i) :pattern ((t2tb891 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 b1 (tuple2 c1 d1))) j)
     (= (t2tb891 (tb2t891 j)) j)) :pattern ((t2tb891 (tb2t891 j))) )))

(declare-fun t2tb892 ((tuple21 b (tuple21 c d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 b (tuple21 c d)))) (sort (tuple2 b1 (tuple2 c1 d1))
  (t2tb892 x))))

(declare-fun tb2t892 (uni) (tuple21 b (tuple21 c d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 b (tuple21 c d))))
  (! (= (tb2t892 (t2tb892 i)) i) :pattern ((t2tb892 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 b1 (tuple2 c1 d1)) j) (= (t2tb892 (tb2t892 j)) j)) :pattern (
  (t2tb892 (tb2t892 j))) )))

;; mem_times
  (assert
  (forall ((s (set b)) (t (set (tuple21 c d))) (x b) (y (tuple21 c d)))
  (= (mem (tuple2 b1 (tuple2 c1 d1))
  (Tuple2 b1 (tuple2 c1 d1) (t2tb14 x) (t2tb693 y))
  (times (tuple2 c1 d1) b1 (t2tb12 s) (t2tb689 t)))
  (and (mem2 x s) (mem21 y t)))))

;; mem_times
  (assert
  (forall ((s (set b)) (t (set d)) (x b) (y d))
  (= (mem (tuple2 b1 d1) (Tuple2 b1 d1 (t2tb14 x) (t2tb694 y))
  (times d1 b1 (t2tb12 s) (t2tb690 t))) (and (mem2 x s) (mem20 y t)))))

(declare-fun t2tb131 ((set (tuple21 b c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 b c)))) (sort (set1 (tuple2 b1 c1)) (t2tb131 x))))

(declare-fun tb2t131 (uni) (set (tuple21 b c)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 b c))))
  (! (= (tb2t131 (t2tb131 i)) i) :pattern ((t2tb131 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 b1 c1)) j) (= (t2tb131 (tb2t131 j)) j)) :pattern (
  (t2tb131 (tb2t131 j))) )))

(declare-fun t2tb134 ((tuple21 b c)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 b c))) (sort (tuple2 b1 c1) (t2tb134 x))))

(declare-fun tb2t134 (uni) (tuple21 b c))

;; BridgeL
  (assert
  (forall ((i (tuple21 b c)))
  (! (= (tb2t134 (t2tb134 i)) i) :pattern ((t2tb134 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 b1 c1) j) (= (t2tb134 (tb2t134 j)) j)) :pattern (
  (t2tb134 (tb2t134 j))) )))

;; mem_times
  (assert
  (forall ((s (set b)) (t (set c)) (x b) (y c))
  (= (mem (tuple2 b1 c1) (Tuple2 b1 c1 (t2tb14 x) (t2tb135 y))
  (times c1 b1 (t2tb12 s) (t2tb132 t))) (and (mem2 x s) (mem7 y t)))))

(declare-fun t2tb31 ((set (tuple21 b (set (tuple21 a b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 b (set (tuple21 a b)))))) (sort
  (set1 (tuple2 b1 (set1 (tuple2 a1 b1)))) (t2tb31 x))))

(declare-fun tb2t31 (uni) (set (tuple21 b (set (tuple21 a b)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 b (set (tuple21 a b))))))
  (! (= (tb2t31 (t2tb31 i)) i) :pattern ((t2tb31 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 b1 (set1 (tuple2 a1 b1)))) j)
     (= (t2tb31 (tb2t31 j)) j)) :pattern ((t2tb31 (tb2t31 j))) )))

(declare-fun t2tb32 ((tuple21 b (set (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 b (set (tuple21 a b))))) (sort
  (tuple2 b1 (set1 (tuple2 a1 b1))) (t2tb32 x))))

(declare-fun tb2t32 (uni) (tuple21 b (set (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (tuple21 b (set (tuple21 a b)))))
  (! (= (tb2t32 (t2tb32 i)) i) :pattern ((t2tb32 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 b1 (set1 (tuple2 a1 b1))) j)
     (= (t2tb32 (tb2t32 j)) j)) :pattern ((t2tb32 (tb2t32 j))) )))

;; mem_times
  (assert
  (forall ((s (set b)) (t (set (set (tuple21 a b)))) (x b) (y (set (tuple21 a
  b))))
  (= (mem (tuple2 b1 (set1 (tuple2 a1 b1)))
  (Tuple2 b1 (set1 (tuple2 a1 b1)) (t2tb14 x) (t2tb11 y))
  (times (set1 (tuple2 a1 b1)) b1 (t2tb12 s) (t2tb10 t)))
  (and (mem2 x s) (mem4 y t)))))

(declare-fun t2tb33 ((tuple21 b (tuple21 a b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 b (tuple21 a b)))) (sort (tuple2 b1 (tuple2 a1 b1))
  (t2tb33 x))))

(declare-fun tb2t33 (uni) (tuple21 b (tuple21 a b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 b (tuple21 a b))))
  (! (= (tb2t33 (t2tb33 i)) i) :pattern ((t2tb33 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 b1 (tuple2 a1 b1)) j) (= (t2tb33 (tb2t33 j)) j)) :pattern (
  (t2tb33 (tb2t33 j))) )))

(declare-fun t2tb34 ((set (tuple21 b (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 b (tuple21 a b))))) (sort
  (set1 (tuple2 b1 (tuple2 a1 b1))) (t2tb34 x))))

(declare-fun tb2t34 (uni) (set (tuple21 b (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 b (tuple21 a b)))))
  (! (= (tb2t34 (t2tb34 i)) i) :pattern ((t2tb34 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 b1 (tuple2 a1 b1))) j)
     (= (t2tb34 (tb2t34 j)) j)) :pattern ((t2tb34 (tb2t34 j))) )))

;; mem_times
  (assert
  (forall ((s (set b)) (t (set (tuple21 a b))) (x b) (y (tuple21 a b)))
  (= (mem (tuple2 b1 (tuple2 a1 b1))
  (Tuple2 b1 (tuple2 a1 b1) (t2tb14 x) (t2tb13 y))
  (times (tuple2 a1 b1) b1 (t2tb12 s) (t2tb11 t)))
  (and (mem2 x s) (mem3 y t)))))

(declare-fun t2tb35 ((set (tuple21 b b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 b b)))) (sort (set1 (tuple2 b1 b1)) (t2tb35 x))))

(declare-fun tb2t35 (uni) (set (tuple21 b b)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 b b))))
  (! (= (tb2t35 (t2tb35 i)) i) :pattern ((t2tb35 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 b1 b1)) j) (= (t2tb35 (tb2t35 j)) j)) :pattern (
  (t2tb35 (tb2t35 j))) )))

(declare-fun t2tb36 ((tuple21 b b)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 b b))) (sort (tuple2 b1 b1) (t2tb36 x))))

(declare-fun tb2t36 (uni) (tuple21 b b))

;; BridgeL
  (assert
  (forall ((i (tuple21 b b)))
  (! (= (tb2t36 (t2tb36 i)) i) :pattern ((t2tb36 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 b1 b1) j) (= (t2tb36 (tb2t36 j)) j)) :pattern (
  (t2tb36 (tb2t36 j))) )))

;; mem_times
  (assert
  (forall ((s (set b)) (t (set b)) (x b) (y b))
  (= (mem (tuple2 b1 b1) (Tuple2 b1 b1 (t2tb14 x) (t2tb14 y))
  (times b1 b1 (t2tb12 s) (t2tb12 t))) (and (mem2 x s) (mem2 y t)))))

(declare-fun t2tb37 ((set (tuple21 b a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 b a)))) (sort (set1 (tuple2 b1 a1)) (t2tb37 x))))

(declare-fun tb2t37 (uni) (set (tuple21 b a)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 b a))))
  (! (= (tb2t37 (t2tb37 i)) i) :pattern ((t2tb37 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 b1 a1)) j) (= (t2tb37 (tb2t37 j)) j)) :pattern (
  (t2tb37 (tb2t37 j))) )))

(declare-fun t2tb38 ((tuple21 b a)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 b a))) (sort (tuple2 b1 a1) (t2tb38 x))))

(declare-fun tb2t38 (uni) (tuple21 b a))

;; BridgeL
  (assert
  (forall ((i (tuple21 b a)))
  (! (= (tb2t38 (t2tb38 i)) i) :pattern ((t2tb38 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 b1 a1) j) (= (t2tb38 (tb2t38 j)) j)) :pattern (
  (t2tb38 (tb2t38 j))) )))

;; mem_times
  (assert
  (forall ((s (set b)) (t (set a)) (x b) (y a))
  (= (mem (tuple2 b1 a1) (Tuple2 b1 a1 (t2tb14 x) (t2tb2 y))
  (times a1 b1 (t2tb12 s) (t2tb1 t))) (and (mem2 x s) (mem1 y t)))))

;; mem_times
  (assert
  (forall ((b2 ty))
  (forall ((s (set b)) (t uni) (x b) (y uni))
  (= (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) y)
  (times b2 b1 (t2tb12 s) t)) (and (mem2 x s) (mem b2 y t))))))

(declare-fun t2tb895 ((set (tuple21 a (tuple21 (tuple21 a c) (tuple21 b
  d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (tuple21 (tuple21 a c) (tuple21 b d)))))) (sort
  (set1 (tuple2 a1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))) (t2tb895 x))))

(declare-fun tb2t895 (uni) (set (tuple21 a (tuple21 (tuple21 a c) (tuple21 b
  d)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (tuple21 (tuple21 a c) (tuple21 b d))))))
  (! (= (tb2t895 (t2tb895 i)) i) :pattern ((t2tb895 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))) j)
     (= (t2tb895 (tb2t895 j)) j)) :pattern ((t2tb895 (tb2t895 j))) )))

(declare-fun t2tb896 ((tuple21 a (tuple21 (tuple21 a c) (tuple21 b d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (tuple21 (tuple21 a c) (tuple21 b d))))) (sort
  (tuple2 a1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))) (t2tb896 x))))

(declare-fun tb2t896 (uni) (tuple21 a (tuple21 (tuple21 a c) (tuple21 b d))))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (tuple21 (tuple21 a c) (tuple21 b d)))))
  (! (= (tb2t896 (t2tb896 i)) i) :pattern ((t2tb896 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))) j)
     (= (t2tb896 (tb2t896 j)) j)) :pattern ((t2tb896 (tb2t896 j))) )))

;; mem_times
  (assert
  (forall ((s (set a)) (t (set (tuple21 (tuple21 a c) (tuple21 b d)))) (x a)
  (y (tuple21 (tuple21 a c) (tuple21 b d))))
  (= (mem (tuple2 a1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
  (Tuple2 a1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb2 x) (t2tb691 y))
  (times (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) a1 (t2tb1 s) (t2tb686 t)))
  (and (mem1 x s) (mem24 y t)))))

(declare-fun t2tb899 ((set (tuple21 a (set (tuple21 c d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (set (tuple21 c d)))))) (sort
  (set1 (tuple2 a1 (set1 (tuple2 c1 d1)))) (t2tb899 x))))

(declare-fun tb2t899 (uni) (set (tuple21 a (set (tuple21 c d)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (set (tuple21 c d))))))
  (! (= (tb2t899 (t2tb899 i)) i) :pattern ((t2tb899 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (set1 (tuple2 c1 d1)))) j)
     (= (t2tb899 (tb2t899 j)) j)) :pattern ((t2tb899 (tb2t899 j))) )))

(declare-fun t2tb900 ((tuple21 a (set (tuple21 c d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (set (tuple21 c d))))) (sort
  (tuple2 a1 (set1 (tuple2 c1 d1))) (t2tb900 x))))

(declare-fun tb2t900 (uni) (tuple21 a (set (tuple21 c d))))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (set (tuple21 c d)))))
  (! (= (tb2t900 (t2tb900 i)) i) :pattern ((t2tb900 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (set1 (tuple2 c1 d1))) j)
     (= (t2tb900 (tb2t900 j)) j)) :pattern ((t2tb900 (tb2t900 j))) )))

;; mem_times
  (assert
  (forall ((s (set a)) (t (set (set (tuple21 c d)))) (x a) (y (set (tuple21 c
  d))))
  (= (mem (tuple2 a1 (set1 (tuple2 c1 d1)))
  (Tuple2 a1 (set1 (tuple2 c1 d1)) (t2tb2 x) (t2tb689 y))
  (times (set1 (tuple2 c1 d1)) a1 (t2tb1 s) (t2tb688 t)))
  (and (mem1 x s) (mem22 y t)))))

(declare-fun t2tb901 ((set (tuple21 a (tuple21 c d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (tuple21 c d))))) (sort
  (set1 (tuple2 a1 (tuple2 c1 d1))) (t2tb901 x))))

(declare-fun tb2t901 (uni) (set (tuple21 a (tuple21 c d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (tuple21 c d)))))
  (! (= (tb2t901 (t2tb901 i)) i) :pattern ((t2tb901 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (tuple2 c1 d1))) j)
     (= (t2tb901 (tb2t901 j)) j)) :pattern ((t2tb901 (tb2t901 j))) )))

(declare-fun t2tb902 ((tuple21 a (tuple21 c d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (tuple21 c d)))) (sort (tuple2 a1 (tuple2 c1 d1))
  (t2tb902 x))))

(declare-fun tb2t902 (uni) (tuple21 a (tuple21 c d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (tuple21 c d))))
  (! (= (tb2t902 (t2tb902 i)) i) :pattern ((t2tb902 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (tuple2 c1 d1)) j) (= (t2tb902 (tb2t902 j)) j)) :pattern (
  (t2tb902 (tb2t902 j))) )))

;; mem_times
  (assert
  (forall ((s (set a)) (t (set (tuple21 c d))) (x a) (y (tuple21 c d)))
  (= (mem (tuple2 a1 (tuple2 c1 d1))
  (Tuple2 a1 (tuple2 c1 d1) (t2tb2 x) (t2tb693 y))
  (times (tuple2 c1 d1) a1 (t2tb1 s) (t2tb689 t)))
  (and (mem1 x s) (mem21 y t)))))

(declare-fun t2tb903 ((set (tuple21 a d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a d)))) (sort (set1 (tuple2 a1 d1)) (t2tb903 x))))

(declare-fun tb2t903 (uni) (set (tuple21 a d)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a d))))
  (! (= (tb2t903 (t2tb903 i)) i) :pattern ((t2tb903 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 d1)) j) (= (t2tb903 (tb2t903 j)) j)) :pattern (
  (t2tb903 (tb2t903 j))) )))

(declare-fun t2tb904 ((tuple21 a d)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 a d))) (sort (tuple2 a1 d1) (t2tb904 x))))

(declare-fun tb2t904 (uni) (tuple21 a d))

;; BridgeL
  (assert
  (forall ((i (tuple21 a d)))
  (! (= (tb2t904 (t2tb904 i)) i) :pattern ((t2tb904 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 d1) j) (= (t2tb904 (tb2t904 j)) j)) :pattern (
  (t2tb904 (tb2t904 j))) )))

;; mem_times
  (assert
  (forall ((s (set a)) (t (set d)) (x a) (y d))
  (= (mem (tuple2 a1 d1) (Tuple2 a1 d1 (t2tb2 x) (t2tb694 y))
  (times d1 a1 (t2tb1 s) (t2tb690 t))) (and (mem1 x s) (mem20 y t)))))

;; mem_times
  (assert
  (forall ((s (set a)) (t (set c)) (x a) (y c))
  (= (mem (tuple2 a1 c1) (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y))
  (times c1 a1 (t2tb1 s) (t2tb132 t))) (and (mem1 x s) (mem7 y t)))))

(declare-fun t2tb39 ((set (tuple21 a (set (tuple21 a b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (set (tuple21 a b)))))) (sort
  (set1 (tuple2 a1 (set1 (tuple2 a1 b1)))) (t2tb39 x))))

(declare-fun tb2t39 (uni) (set (tuple21 a (set (tuple21 a b)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (set (tuple21 a b))))))
  (! (= (tb2t39 (t2tb39 i)) i) :pattern ((t2tb39 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (set1 (tuple2 a1 b1)))) j)
     (= (t2tb39 (tb2t39 j)) j)) :pattern ((t2tb39 (tb2t39 j))) )))

(declare-fun t2tb40 ((tuple21 a (set (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (set (tuple21 a b))))) (sort
  (tuple2 a1 (set1 (tuple2 a1 b1))) (t2tb40 x))))

(declare-fun tb2t40 (uni) (tuple21 a (set (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (set (tuple21 a b)))))
  (! (= (tb2t40 (t2tb40 i)) i) :pattern ((t2tb40 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (set1 (tuple2 a1 b1))) j)
     (= (t2tb40 (tb2t40 j)) j)) :pattern ((t2tb40 (tb2t40 j))) )))

;; mem_times
  (assert
  (forall ((s (set a)) (t (set (set (tuple21 a b)))) (x a) (y (set (tuple21 a
  b))))
  (= (mem (tuple2 a1 (set1 (tuple2 a1 b1)))
  (Tuple2 a1 (set1 (tuple2 a1 b1)) (t2tb2 x) (t2tb11 y))
  (times (set1 (tuple2 a1 b1)) a1 (t2tb1 s) (t2tb10 t)))
  (and (mem1 x s) (mem4 y t)))))

(declare-fun t2tb41 ((set (tuple21 a (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (tuple21 a b))))) (sort
  (set1 (tuple2 a1 (tuple2 a1 b1))) (t2tb41 x))))

(declare-fun tb2t41 (uni) (set (tuple21 a (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (tuple21 a b)))))
  (! (= (tb2t41 (t2tb41 i)) i) :pattern ((t2tb41 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (tuple2 a1 b1))) j)
     (= (t2tb41 (tb2t41 j)) j)) :pattern ((t2tb41 (tb2t41 j))) )))

(declare-fun t2tb42 ((tuple21 a (tuple21 a b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (tuple21 a b)))) (sort (tuple2 a1 (tuple2 a1 b1))
  (t2tb42 x))))

(declare-fun tb2t42 (uni) (tuple21 a (tuple21 a b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (tuple21 a b))))
  (! (= (tb2t42 (t2tb42 i)) i) :pattern ((t2tb42 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (tuple2 a1 b1)) j) (= (t2tb42 (tb2t42 j)) j)) :pattern (
  (t2tb42 (tb2t42 j))) )))

;; mem_times
  (assert
  (forall ((s (set a)) (t (set (tuple21 a b))) (x a) (y (tuple21 a b)))
  (= (mem (tuple2 a1 (tuple2 a1 b1))
  (Tuple2 a1 (tuple2 a1 b1) (t2tb2 x) (t2tb13 y))
  (times (tuple2 a1 b1) a1 (t2tb1 s) (t2tb11 t)))
  (and (mem1 x s) (mem3 y t)))))

;; mem_times
  (assert
  (forall ((s (set a)) (t (set b)) (x a) (y b))
  (= (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y)))
  (tb2t11 (times b1 a1 (t2tb1 s) (t2tb12 t)))) (and (mem1 x s) (mem2 y t)))))

(declare-fun t2tb4 ((set (tuple21 a a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a a)))) (sort (set1 (tuple2 a1 a1)) (t2tb4 x))))

(declare-fun tb2t4 (uni) (set (tuple21 a a)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a a))))
  (! (= (tb2t4 (t2tb4 i)) i) :pattern ((t2tb4 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 a1)) j) (= (t2tb4 (tb2t4 j)) j)) :pattern (
  (t2tb4 (tb2t4 j))) )))

(declare-fun t2tb5 ((tuple21 a a)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 a a))) (sort (tuple2 a1 a1) (t2tb5 x))))

(declare-fun tb2t5 (uni) (tuple21 a a))

;; BridgeL
  (assert
  (forall ((i (tuple21 a a)))
  (! (= (tb2t5 (t2tb5 i)) i) :pattern ((t2tb5 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 a1) j) (= (t2tb5 (tb2t5 j)) j)) :pattern ((t2tb5
                                                                    (tb2t5 j))) )))

;; mem_times
  (assert
  (forall ((s (set a)) (t (set a)) (x a) (y a))
  (= (mem (tuple2 a1 a1) (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y))
  (times a1 a1 (t2tb1 s) (t2tb1 t))) (and (mem1 x s) (mem1 y t)))))

;; mem_times
  (assert
  (forall ((b2 ty))
  (forall ((s (set a)) (t uni) (x a) (y uni))
  (= (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) y)
  (times b2 a1 (t2tb1 s) t)) (and (mem1 x s) (mem b2 y t))))))

;; mem_times
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (x uni) (y uni))
  (= (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) (times b2 a2 s t))
  (and (mem a2 x s) (mem b2 y t))))))

;; mem_power
  (assert
  (forall ((s (set (tuple21 (tuple21 a c) (tuple21 b d))))
  (t (set (tuple21 (tuple21 a c) (tuple21 b d)))))
  (= (mem (set1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))) (t2tb686 s)
  (power (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb686 t)))
  (forall ((x (tuple21 (tuple21 a c) (tuple21 b d))))
  (=> (mem24 x s) (mem24 x t))))))

;; mem_power
  (assert
  (forall ((s (set (set (tuple21 c d)))) (t (set (set (tuple21 c d)))))
  (= (mem (set1 (set1 (tuple2 c1 d1))) (t2tb688 s)
  (power (set1 (tuple2 c1 d1)) (t2tb688 t)))
  (forall ((x (set (tuple21 c d)))) (=> (mem22 x s) (mem22 x t))))))

;; mem_power
  (assert
  (forall ((s (set (tuple21 c d))) (t (set (tuple21 c d))))
  (= (mem22 s (tb2t688 (power (tuple2 c1 d1) (t2tb689 t))))
  (forall ((x (tuple21 c d))) (=> (mem21 x s) (mem21 x t))))))

;; mem_power
  (assert
  (forall ((s (set d)) (t (set d)))
  (= (mem (set1 d1) (t2tb690 s) (power d1 (t2tb690 t)))
  (forall ((x d)) (=> (mem20 x s) (mem20 x t))))))

;; mem_power
  (assert
  (forall ((s (set c)) (t (set c)))
  (= (mem (set1 c1) (t2tb132 s) (power c1 (t2tb132 t)))
  (forall ((x c)) (=> (mem7 x s) (mem7 x t))))))

;; mem_power
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set (set (tuple21 a b)))))
  (= (mem (set1 (set1 (tuple2 a1 b1))) (t2tb10 s)
  (power (set1 (tuple2 a1 b1)) (t2tb10 t)))
  (forall ((x (set (tuple21 a b)))) (=> (mem4 x s) (mem4 x t))))))

;; mem_power
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (tuple21 a b))))
  (= (mem4 s (tb2t10 (power (tuple2 a1 b1) (t2tb11 t))))
  (forall ((x (tuple21 a b))) (=> (mem3 x s) (mem3 x t))))))

;; mem_power
  (assert
  (forall ((s (set b)) (t (set b)))
  (= (mem (set1 b1) (t2tb12 s) (power b1 (t2tb12 t)))
  (forall ((x b)) (=> (mem2 x s) (mem2 x t))))))

;; mem_power
  (assert
  (forall ((s (set a)) (t (set a)))
  (= (mem (set1 a1) (t2tb1 s) (power a1 (t2tb1 t)))
  (forall ((x a)) (=> (mem1 x s) (mem1 x t))))))

;; mem_power
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t uni))
  (and
  (=> (mem (set1 a2) s (power a2 t))
  (forall ((x uni)) (=> (mem a2 x s) (mem a2 x t))))
  (=> (forall ((x uni)) (=> (sort a2 x) (=> (mem a2 x s) (mem a2 x t)))) (mem
  (set1 a2) s (power a2 t)))))))

;; mem_non_empty_power
  (assert
  (forall ((s (set (tuple21 (tuple21 a c) (tuple21 b d))))
  (t (set (tuple21 (tuple21 a c) (tuple21 b d)))))
  (= (mem (set1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))) (t2tb686 s)
  (non_empty_power (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb686 t)))
  (and
  (forall ((x (tuple21 (tuple21 a c) (tuple21 b d))))
  (=> (mem24 x s) (mem24 x t)))
  (not (infix_eqeq (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb686 s)
  (empty (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))))))))

;; mem_non_empty_power
  (assert
  (forall ((s (set (set (tuple21 c d)))) (t (set (set (tuple21 c d)))))
  (= (mem (set1 (set1 (tuple2 c1 d1))) (t2tb688 s)
  (non_empty_power (set1 (tuple2 c1 d1)) (t2tb688 t)))
  (and (forall ((x (set (tuple21 c d)))) (=> (mem22 x s) (mem22 x t)))
  (not (infix_eqeq (set1 (tuple2 c1 d1)) (t2tb688 s)
  (empty (set1 (tuple2 c1 d1)))))))))

;; mem_non_empty_power
  (assert
  (forall ((s (set (tuple21 c d))) (t (set (tuple21 c d))))
  (= (mem22 s (tb2t688 (non_empty_power (tuple2 c1 d1) (t2tb689 t))))
  (and (forall ((x (tuple21 c d))) (=> (mem21 x s) (mem21 x t)))
  (not (infix_eqeq (tuple2 c1 d1) (t2tb689 s) (empty (tuple2 c1 d1))))))))

;; mem_non_empty_power
  (assert
  (forall ((s (set d)) (t (set d)))
  (= (mem (set1 d1) (t2tb690 s) (non_empty_power d1 (t2tb690 t)))
  (and (forall ((x d)) (=> (mem20 x s) (mem20 x t)))
  (not (infix_eqeq d1 (t2tb690 s) (empty d1)))))))

;; mem_non_empty_power
  (assert
  (forall ((s (set c)) (t (set c)))
  (= (mem (set1 c1) (t2tb132 s) (non_empty_power c1 (t2tb132 t)))
  (and (forall ((x c)) (=> (mem7 x s) (mem7 x t)))
  (not (infix_eqeq c1 (t2tb132 s) (empty c1)))))))

;; mem_non_empty_power
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set (set (tuple21 a b)))))
  (= (mem (set1 (set1 (tuple2 a1 b1))) (t2tb10 s)
  (non_empty_power (set1 (tuple2 a1 b1)) (t2tb10 t)))
  (and (forall ((x (set (tuple21 a b)))) (=> (mem4 x s) (mem4 x t)))
  (not (infix_eqeq (set1 (tuple2 a1 b1)) (t2tb10 s)
  (empty (set1 (tuple2 a1 b1)))))))))

;; mem_non_empty_power
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (tuple21 a b))))
  (= (mem4 s (tb2t10 (non_empty_power (tuple2 a1 b1) (t2tb11 t))))
  (and (forall ((x (tuple21 a b))) (=> (mem3 x s) (mem3 x t)))
  (not (infix_eqeq (tuple2 a1 b1) (t2tb11 s) (empty (tuple2 a1 b1))))))))

;; mem_non_empty_power
  (assert
  (forall ((s (set b)) (t (set b)))
  (= (mem (set1 b1) (t2tb12 s) (non_empty_power b1 (t2tb12 t)))
  (and (forall ((x b)) (=> (mem2 x s) (mem2 x t)))
  (not (infix_eqeq b1 (t2tb12 s) (empty b1)))))))

;; mem_non_empty_power
  (assert
  (forall ((s (set a)) (t (set a)))
  (= (mem (set1 a1) (t2tb1 s) (non_empty_power a1 (t2tb1 t)))
  (and (forall ((x a)) (=> (mem1 x s) (mem1 x t)))
  (not (infix_eqeq a1 (t2tb1 s) (empty a1)))))))

;; mem_non_empty_power
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t uni))
  (and
  (=> (mem (set1 a2) s (non_empty_power a2 t))
  (and (forall ((x uni)) (=> (mem a2 x s) (mem a2 x t)))
  (not (infix_eqeq a2 s (empty a2)))))
  (=>
  (and (forall ((x uni)) (=> (sort a2 x) (=> (mem a2 x s) (mem a2 x t))))
  (not (infix_eqeq a2 s (empty a2)))) (mem (set1 a2) s
  (non_empty_power a2 t)))))))

(declare-fun choose (ty uni) uni)

;; choose_sort
  (assert (forall ((a2 ty)) (forall ((x uni)) (sort a2 (choose a2 x)))))

(declare-fun relation (ty ty uni uni) uni)

;; relation_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (set1 (tuple2 a2 b2)))
  (relation b2 a2 x x1)))))

(declare-fun relation1 ((set a) (set b)) (set (set (tuple21 a b))))

(declare-fun relation7 ((set c) (set d)) (set (set (tuple21 c d))))

;; mem_relation
  (assert
  (forall ((a2 ty))
  (forall ((u uni) (v (set (tuple21 (tuple21 a c) (tuple21 b d)))) (r uni))
  (and
  (=> (mem (set1 (tuple2 a2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))) r
  (relation (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) a2 u (t2tb686 v)))
  (forall ((x uni) (y (tuple21 (tuple21 a c) (tuple21 b d))))
  (=> (mem (tuple2 a2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
  (Tuple2 a2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) x (t2tb691 y)) r)
  (and (mem a2 x u) (mem24 y v)))))
  (=>
  (forall ((x uni) (y (tuple21 (tuple21 a c) (tuple21 b d))))
  (=> (sort a2 x)
  (=> (mem (tuple2 a2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
  (Tuple2 a2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) x (t2tb691 y)) r)
  (and (mem a2 x u) (mem24 y v))))) (mem
  (set1 (tuple2 a2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))) r
  (relation (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) a2 u (t2tb686 v))))))))

;; mem_relation
  (assert
  (forall ((a2 ty))
  (forall ((u uni) (v (set (set (tuple21 c d)))) (r uni))
  (and
  (=> (mem (set1 (tuple2 a2 (set1 (tuple2 c1 d1)))) r
  (relation (set1 (tuple2 c1 d1)) a2 u (t2tb688 v)))
  (forall ((x uni) (y (set (tuple21 c d))))
  (=> (mem (tuple2 a2 (set1 (tuple2 c1 d1)))
  (Tuple2 a2 (set1 (tuple2 c1 d1)) x (t2tb689 y)) r)
  (and (mem a2 x u) (mem22 y v)))))
  (=>
  (forall ((x uni) (y (set (tuple21 c d))))
  (=> (sort a2 x)
  (=> (mem (tuple2 a2 (set1 (tuple2 c1 d1)))
  (Tuple2 a2 (set1 (tuple2 c1 d1)) x (t2tb689 y)) r)
  (and (mem a2 x u) (mem22 y v))))) (mem
  (set1 (tuple2 a2 (set1 (tuple2 c1 d1)))) r
  (relation (set1 (tuple2 c1 d1)) a2 u (t2tb688 v))))))))

;; mem_relation
  (assert
  (forall ((a2 ty))
  (forall ((u uni) (v (set (tuple21 c d))) (r uni))
  (and
  (=> (mem (set1 (tuple2 a2 (tuple2 c1 d1))) r
  (relation (tuple2 c1 d1) a2 u (t2tb689 v)))
  (forall ((x uni) (y (tuple21 c d)))
  (=> (mem (tuple2 a2 (tuple2 c1 d1))
  (Tuple2 a2 (tuple2 c1 d1) x (t2tb693 y)) r) (and (mem a2 x u) (mem21 y v)))))
  (=>
  (forall ((x uni) (y (tuple21 c d)))
  (=> (sort a2 x)
  (=> (mem (tuple2 a2 (tuple2 c1 d1))
  (Tuple2 a2 (tuple2 c1 d1) x (t2tb693 y)) r) (and (mem a2 x u) (mem21 y v)))))
  (mem (set1 (tuple2 a2 (tuple2 c1 d1))) r
  (relation (tuple2 c1 d1) a2 u (t2tb689 v))))))))

;; mem_relation
  (assert
  (forall ((a2 ty))
  (forall ((u uni) (v (set d)) (r uni))
  (and
  (=> (mem (set1 (tuple2 a2 d1)) r (relation d1 a2 u (t2tb690 v)))
  (forall ((x uni) (y d))
  (=> (mem (tuple2 a2 d1) (Tuple2 a2 d1 x (t2tb694 y)) r)
  (and (mem a2 x u) (mem20 y v)))))
  (=>
  (forall ((x uni) (y d))
  (=> (sort a2 x)
  (=> (mem (tuple2 a2 d1) (Tuple2 a2 d1 x (t2tb694 y)) r)
  (and (mem a2 x u) (mem20 y v))))) (mem (set1 (tuple2 a2 d1)) r
  (relation d1 a2 u (t2tb690 v))))))))

;; mem_relation
  (assert
  (forall ((a2 ty))
  (forall ((u uni) (v (set c)) (r uni))
  (and
  (=> (mem (set1 (tuple2 a2 c1)) r (relation c1 a2 u (t2tb132 v)))
  (forall ((x uni) (y c))
  (=> (mem (tuple2 a2 c1) (Tuple2 a2 c1 x (t2tb135 y)) r)
  (and (mem a2 x u) (mem7 y v)))))
  (=>
  (forall ((x uni) (y c))
  (=> (sort a2 x)
  (=> (mem (tuple2 a2 c1) (Tuple2 a2 c1 x (t2tb135 y)) r)
  (and (mem a2 x u) (mem7 y v))))) (mem (set1 (tuple2 a2 c1)) r
  (relation c1 a2 u (t2tb132 v))))))))

;; mem_relation
  (assert
  (forall ((a2 ty))
  (forall ((u uni) (v (set (set (tuple21 a b)))) (r uni))
  (and
  (=> (mem (set1 (tuple2 a2 (set1 (tuple2 a1 b1)))) r
  (relation (set1 (tuple2 a1 b1)) a2 u (t2tb10 v)))
  (forall ((x uni) (y (set (tuple21 a b))))
  (=> (mem (tuple2 a2 (set1 (tuple2 a1 b1)))
  (Tuple2 a2 (set1 (tuple2 a1 b1)) x (t2tb11 y)) r)
  (and (mem a2 x u) (mem4 y v)))))
  (=>
  (forall ((x uni) (y (set (tuple21 a b))))
  (=> (sort a2 x)
  (=> (mem (tuple2 a2 (set1 (tuple2 a1 b1)))
  (Tuple2 a2 (set1 (tuple2 a1 b1)) x (t2tb11 y)) r)
  (and (mem a2 x u) (mem4 y v))))) (mem
  (set1 (tuple2 a2 (set1 (tuple2 a1 b1)))) r
  (relation (set1 (tuple2 a1 b1)) a2 u (t2tb10 v))))))))

;; mem_relation
  (assert
  (forall ((a2 ty))
  (forall ((u uni) (v (set (tuple21 a b))) (r uni))
  (and
  (=> (mem (set1 (tuple2 a2 (tuple2 a1 b1))) r
  (relation (tuple2 a1 b1) a2 u (t2tb11 v)))
  (forall ((x uni) (y (tuple21 a b)))
  (=> (mem (tuple2 a2 (tuple2 a1 b1)) (Tuple2 a2 (tuple2 a1 b1) x (t2tb13 y))
  r) (and (mem a2 x u) (mem3 y v)))))
  (=>
  (forall ((x uni) (y (tuple21 a b)))
  (=> (sort a2 x)
  (=> (mem (tuple2 a2 (tuple2 a1 b1)) (Tuple2 a2 (tuple2 a1 b1) x (t2tb13 y))
  r) (and (mem a2 x u) (mem3 y v))))) (mem (set1 (tuple2 a2 (tuple2 a1 b1)))
  r (relation (tuple2 a1 b1) a2 u (t2tb11 v))))))))

;; mem_relation
  (assert
  (forall ((a2 ty))
  (forall ((u uni) (v (set b)) (r uni))
  (and
  (=> (mem (set1 (tuple2 a2 b1)) r (relation b1 a2 u (t2tb12 v)))
  (forall ((x uni) (y b))
  (=> (mem (tuple2 a2 b1) (Tuple2 a2 b1 x (t2tb14 y)) r)
  (and (mem a2 x u) (mem2 y v)))))
  (=>
  (forall ((x uni) (y b))
  (=> (sort a2 x)
  (=> (mem (tuple2 a2 b1) (Tuple2 a2 b1 x (t2tb14 y)) r)
  (and (mem a2 x u) (mem2 y v))))) (mem (set1 (tuple2 a2 b1)) r
  (relation b1 a2 u (t2tb12 v))))))))

;; mem_relation
  (assert
  (forall ((a2 ty))
  (forall ((u uni) (v (set a)) (r uni))
  (and
  (=> (mem (set1 (tuple2 a2 a1)) r (relation a1 a2 u (t2tb1 v)))
  (forall ((x uni) (y a))
  (=> (mem (tuple2 a2 a1) (Tuple2 a2 a1 x (t2tb2 y)) r)
  (and (mem a2 x u) (mem1 y v)))))
  (=>
  (forall ((x uni) (y a))
  (=> (sort a2 x)
  (=> (mem (tuple2 a2 a1) (Tuple2 a2 a1 x (t2tb2 y)) r)
  (and (mem a2 x u) (mem1 y v))))) (mem (set1 (tuple2 a2 a1)) r
  (relation a1 a2 u (t2tb1 v))))))))

(declare-fun t2tb922 ((set (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b
  d)) (tuple21 (tuple21 a c) (tuple21 b d)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  (tuple21 (tuple21 a c) (tuple21 b d))))))) (sort
  (set1
  (set1
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))
  (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))))) (t2tb922 x))))

(declare-fun tb2t922 (uni) (set (set (tuple21 (tuple21 (tuple21 a c)
  (tuple21 b d)) (tuple21 (tuple21 a c) (tuple21 b d))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  (tuple21 (tuple21 a c) (tuple21 b d)))))))
  (! (= (tb2t922 (t2tb922 i)) i) :pattern ((t2tb922 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (set1
     (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))
     (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))))) j)
     (= (t2tb922 (tb2t922 j)) j)) :pattern ((t2tb922 (tb2t922 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 (tuple21 a c) (tuple21 b d))))
  (v (set (tuple21 (tuple21 a c) (tuple21 b d))))
  (r (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) (tuple21 (tuple21 a
  c) (tuple21 b d))))))
  (= (mem
  (set1
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))
  (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))) (t2tb721 r)
  (relation (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))
  (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb686 u) (t2tb686 v)))
  (forall ((x (tuple21 (tuple21 a c) (tuple21 b d))) (y (tuple21 (tuple21 a
  c) (tuple21 b d))))
  (=> (mem
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))
  (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))
  (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb691 x) (t2tb691 y))
  (t2tb721 r)) (and (mem24 x u) (mem24 y v)))))))

(declare-fun t2tb924 ((set (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b
  d)) (set (tuple21 c d)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  (set (tuple21 c d))))))) (sort
  (set1
  (set1
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (set1 (tuple2 c1 d1)))))
  (t2tb924 x))))

(declare-fun tb2t924 (uni) (set (set (tuple21 (tuple21 (tuple21 a c)
  (tuple21 b d)) (set (tuple21 c d))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  (set (tuple21 c d)))))))
  (! (= (tb2t924 (t2tb924 i)) i) :pattern ((t2tb924 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (set1
     (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (set1 (tuple2 c1 d1)))))
     j) (= (t2tb924 (tb2t924 j)) j)) :pattern ((t2tb924 (tb2t924 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 (tuple21 a c) (tuple21 b d))))
  (v (set (set (tuple21 c d)))) (r (set (tuple21 (tuple21 (tuple21 a c)
  (tuple21 b d)) (set (tuple21 c d))))))
  (= (mem
  (set1
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (set1 (tuple2 c1 d1))))
  (t2tb725 r)
  (relation (set1 (tuple2 c1 d1)) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))
  (t2tb686 u) (t2tb688 v)))
  (forall ((x (tuple21 (tuple21 a c) (tuple21 b d))) (y (set (tuple21 c d))))
  (=> (mem
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (set1 (tuple2 c1 d1)))
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (set1 (tuple2 c1 d1))
  (t2tb691 x) (t2tb689 y)) (t2tb725 r)) (and (mem24 x u) (mem22 y v)))))))

(declare-fun t2tb925 ((set (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b
  d)) (tuple21 c d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  (tuple21 c d)))))) (sort
  (set1
  (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 c1 d1))))
  (t2tb925 x))))

(declare-fun tb2t925 (uni) (set (set (tuple21 (tuple21 (tuple21 a c)
  (tuple21 b d)) (tuple21 c d)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  (tuple21 c d)))))) (! (= (tb2t925 (t2tb925 i)) i) :pattern ((t2tb925 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 c1 d1))))
     j) (= (t2tb925 (tb2t925 j)) j)) :pattern ((t2tb925 (tb2t925 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 (tuple21 a c) (tuple21 b d)))) (v (set (tuple21 c
  d))) (r (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) (tuple21 c
  d)))))
  (= (mem
  (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 c1 d1)))
  (t2tb727 r)
  (relation (tuple2 c1 d1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb686 u)
  (t2tb689 v)))
  (forall ((x (tuple21 (tuple21 a c) (tuple21 b d))) (y (tuple21 c d)))
  (=> (mem (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 c1 d1))
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 c1 d1) (t2tb691 x)
  (t2tb693 y)) (t2tb727 r)) (and (mem24 x u) (mem21 y v)))))))

(declare-fun t2tb926 ((set (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b
  d)) d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) d)))))
  (sort (set1 (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) d1)))
  (t2tb926 x))))

(declare-fun tb2t926 (uni) (set (set (tuple21 (tuple21 (tuple21 a c)
  (tuple21 b d)) d))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) d)))))
  (! (= (tb2t926 (t2tb926 i)) i) :pattern ((t2tb926 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) d1))) j)
     (= (t2tb926 (tb2t926 j)) j)) :pattern ((t2tb926 (tb2t926 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 (tuple21 a c) (tuple21 b d)))) (v (set d))
  (r (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) d))))
  (= (mem (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) d1))
  (t2tb729 r)
  (relation d1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb686 u)
  (t2tb690 v)))
  (forall ((x (tuple21 (tuple21 a c) (tuple21 b d))) (y d))
  (=> (mem (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) d1)
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) d1 (t2tb691 x) (t2tb694 y))
  (t2tb729 r)) (and (mem24 x u) (mem20 y v)))))))

(declare-fun t2tb928 ((set (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b
  d)) c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) c)))))
  (sort (set1 (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) c1)))
  (t2tb928 x))))

(declare-fun tb2t928 (uni) (set (set (tuple21 (tuple21 (tuple21 a c)
  (tuple21 b d)) c))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) c)))))
  (! (= (tb2t928 (t2tb928 i)) i) :pattern ((t2tb928 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) c1))) j)
     (= (t2tb928 (tb2t928 j)) j)) :pattern ((t2tb928 (tb2t928 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 (tuple21 a c) (tuple21 b d)))) (v (set c))
  (r (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) c))))
  (= (mem (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) c1))
  (t2tb733 r)
  (relation c1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb686 u)
  (t2tb132 v)))
  (forall ((x (tuple21 (tuple21 a c) (tuple21 b d))) (y c))
  (=> (mem (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) c1)
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) c1 (t2tb691 x) (t2tb135 y))
  (t2tb733 r)) (and (mem24 x u) (mem7 y v)))))))

(declare-fun t2tb929 ((set (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b
  d)) (set (tuple21 a b)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  (set (tuple21 a b))))))) (sort
  (set1
  (set1
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (set1 (tuple2 a1 b1)))))
  (t2tb929 x))))

(declare-fun tb2t929 (uni) (set (set (tuple21 (tuple21 (tuple21 a c)
  (tuple21 b d)) (set (tuple21 a b))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  (set (tuple21 a b)))))))
  (! (= (tb2t929 (t2tb929 i)) i) :pattern ((t2tb929 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (set1
     (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (set1 (tuple2 a1 b1)))))
     j) (= (t2tb929 (tb2t929 j)) j)) :pattern ((t2tb929 (tb2t929 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 (tuple21 a c) (tuple21 b d))))
  (v (set (set (tuple21 a b)))) (r (set (tuple21 (tuple21 (tuple21 a c)
  (tuple21 b d)) (set (tuple21 a b))))))
  (= (mem
  (set1
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (set1 (tuple2 a1 b1))))
  (t2tb735 r)
  (relation (set1 (tuple2 a1 b1)) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))
  (t2tb686 u) (t2tb10 v)))
  (forall ((x (tuple21 (tuple21 a c) (tuple21 b d))) (y (set (tuple21 a b))))
  (=> (mem
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (set1 (tuple2 a1 b1)))
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (set1 (tuple2 a1 b1))
  (t2tb691 x) (t2tb11 y)) (t2tb735 r)) (and (mem24 x u) (mem4 y v)))))))

(declare-fun t2tb930 ((set (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b
  d)) (tuple21 a b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  (tuple21 a b)))))) (sort
  (set1
  (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 a1 b1))))
  (t2tb930 x))))

(declare-fun tb2t930 (uni) (set (set (tuple21 (tuple21 (tuple21 a c)
  (tuple21 b d)) (tuple21 a b)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  (tuple21 a b)))))) (! (= (tb2t930 (t2tb930 i)) i) :pattern ((t2tb930 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 a1 b1))))
     j) (= (t2tb930 (tb2t930 j)) j)) :pattern ((t2tb930 (tb2t930 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 (tuple21 a c) (tuple21 b d)))) (v (set (tuple21 a
  b))) (r (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) (tuple21 a
  b)))))
  (= (mem
  (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 a1 b1)))
  (t2tb737 r)
  (relation (tuple2 a1 b1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb686 u)
  (t2tb11 v)))
  (forall ((x (tuple21 (tuple21 a c) (tuple21 b d))) (y (tuple21 a b)))
  (=> (mem (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 a1 b1))
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 a1 b1) (t2tb691 x)
  (t2tb13 y)) (t2tb737 r)) (and (mem24 x u) (mem3 y v)))))))

(declare-fun t2tb931 ((set (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b
  d)) b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) b)))))
  (sort (set1 (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) b1)))
  (t2tb931 x))))

(declare-fun tb2t931 (uni) (set (set (tuple21 (tuple21 (tuple21 a c)
  (tuple21 b d)) b))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) b)))))
  (! (= (tb2t931 (t2tb931 i)) i) :pattern ((t2tb931 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) b1))) j)
     (= (t2tb931 (tb2t931 j)) j)) :pattern ((t2tb931 (tb2t931 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 (tuple21 a c) (tuple21 b d)))) (v (set b))
  (r (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) b))))
  (= (mem (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) b1))
  (t2tb739 r)
  (relation b1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb686 u) (t2tb12 v)))
  (forall ((x (tuple21 (tuple21 a c) (tuple21 b d))) (y b))
  (=> (mem (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) b1)
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) b1 (t2tb691 x) (t2tb14 y))
  (t2tb739 r)) (and (mem24 x u) (mem2 y v)))))))

(declare-fun t2tb932 ((set (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b
  d)) a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) a)))))
  (sort (set1 (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) a1)))
  (t2tb932 x))))

(declare-fun tb2t932 (uni) (set (set (tuple21 (tuple21 (tuple21 a c)
  (tuple21 b d)) a))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) a)))))
  (! (= (tb2t932 (t2tb932 i)) i) :pattern ((t2tb932 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) a1))) j)
     (= (t2tb932 (tb2t932 j)) j)) :pattern ((t2tb932 (tb2t932 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 (tuple21 a c) (tuple21 b d)))) (v (set a))
  (r (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) a))))
  (= (mem (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) a1))
  (t2tb741 r)
  (relation a1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb686 u) (t2tb1 v)))
  (forall ((x (tuple21 (tuple21 a c) (tuple21 b d))) (y a))
  (=> (mem (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) a1)
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) a1 (t2tb691 x) (t2tb2 y))
  (t2tb741 r)) (and (mem24 x u) (mem1 y v)))))))

;; mem_relation
  (assert
  (forall ((b2 ty))
  (forall ((u (set (tuple21 (tuple21 a c) (tuple21 b d)))) (v uni) (r uni))
  (and
  (=> (mem (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) b2)) r
  (relation b2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb686 u) v))
  (forall ((x (tuple21 (tuple21 a c) (tuple21 b d))) (y uni))
  (=> (mem (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) b2)
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) b2 (t2tb691 x) y) r)
  (and (mem24 x u) (mem b2 y v)))))
  (=>
  (forall ((x (tuple21 (tuple21 a c) (tuple21 b d))) (y uni))
  (=> (sort b2 y)
  (=> (mem (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) b2)
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) b2 (t2tb691 x) y) r)
  (and (mem24 x u) (mem b2 y v))))) (mem
  (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) b2)) r
  (relation b2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb686 u) v)))))))

(declare-fun t2tb946 ((set (set (tuple21 (set (tuple21 c d))
  (tuple21 (tuple21 a c) (tuple21 b d)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 c d)) (tuple21 (tuple21 a c)
  (tuple21 b d))))))) (sort
  (set1
  (set1
  (tuple2 (set1 (tuple2 c1 d1)) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))))
  (t2tb946 x))))

(declare-fun tb2t946 (uni) (set (set (tuple21 (set (tuple21 c d))
  (tuple21 (tuple21 a c) (tuple21 b d))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 c d)) (tuple21 (tuple21 a c)
  (tuple21 b d)))))))
  (! (= (tb2t946 (t2tb946 i)) i) :pattern ((t2tb946 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (set1
     (tuple2 (set1 (tuple2 c1 d1)) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))))
     j) (= (t2tb946 (tb2t946 j)) j)) :pattern ((t2tb946 (tb2t946 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 c d)))) (v (set (tuple21 (tuple21 a c)
  (tuple21 b d)))) (r (set (tuple21 (set (tuple21 c d)) (tuple21 (tuple21 a
  c) (tuple21 b d))))))
  (= (mem
  (set1
  (tuple2 (set1 (tuple2 c1 d1)) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))))
  (t2tb769 r)
  (relation (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (set1 (tuple2 c1 d1))
  (t2tb688 u) (t2tb686 v)))
  (forall ((x (set (tuple21 c d))) (y (tuple21 (tuple21 a c) (tuple21 b d))))
  (=> (mem
  (tuple2 (set1 (tuple2 c1 d1)) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
  (Tuple2 (set1 (tuple2 c1 d1)) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))
  (t2tb689 x) (t2tb691 y)) (t2tb769 r)) (and (mem22 x u) (mem24 y v)))))))

(declare-fun t2tb948 ((set (set (tuple21 (set (tuple21 c d)) (set (tuple21 c
  d)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 c d)) (set (tuple21 c d)))))))
  (sort (set1 (set1 (tuple2 (set1 (tuple2 c1 d1)) (set1 (tuple2 c1 d1)))))
  (t2tb948 x))))

(declare-fun tb2t948 (uni) (set (set (tuple21 (set (tuple21 c d))
  (set (tuple21 c d))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 c d)) (set (tuple21 c d)))))))
  (! (= (tb2t948 (t2tb948 i)) i) :pattern ((t2tb948 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (set1 (tuple2 c1 d1)) (set1 (tuple2 c1 d1))))) j)
     (= (t2tb948 (tb2t948 j)) j)) :pattern ((t2tb948 (tb2t948 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 c d)))) (v (set (set (tuple21 c d))))
  (r (set (tuple21 (set (tuple21 c d)) (set (tuple21 c d))))))
  (= (mem (set1 (tuple2 (set1 (tuple2 c1 d1)) (set1 (tuple2 c1 d1))))
  (t2tb773 r)
  (relation (set1 (tuple2 c1 d1)) (set1 (tuple2 c1 d1)) (t2tb688 u)
  (t2tb688 v)))
  (forall ((x (set (tuple21 c d))) (y (set (tuple21 c d))))
  (=> (mem (tuple2 (set1 (tuple2 c1 d1)) (set1 (tuple2 c1 d1)))
  (Tuple2 (set1 (tuple2 c1 d1)) (set1 (tuple2 c1 d1)) (t2tb689 x)
  (t2tb689 y)) (t2tb773 r)) (and (mem22 x u) (mem22 y v)))))))

(declare-fun t2tb949 ((set (set (tuple21 (set (tuple21 c d)) (tuple21 c
  d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 c d)) (tuple21 c d)))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 c1 d1)) (tuple2 c1 d1)))) (t2tb949 x))))

(declare-fun tb2t949 (uni) (set (set (tuple21 (set (tuple21 c d)) (tuple21 c
  d)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 c d)) (tuple21 c d))))))
  (! (= (tb2t949 (t2tb949 i)) i) :pattern ((t2tb949 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 c1 d1)) (tuple2 c1 d1)))) j)
     (= (t2tb949 (tb2t949 j)) j)) :pattern ((t2tb949 (tb2t949 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 c d)))) (v (set (tuple21 c d)))
  (r (set (tuple21 (set (tuple21 c d)) (tuple21 c d)))))
  (= (mem (set1 (tuple2 (set1 (tuple2 c1 d1)) (tuple2 c1 d1))) (t2tb775 r)
  (relation (tuple2 c1 d1) (set1 (tuple2 c1 d1)) (t2tb688 u) (t2tb689 v)))
  (forall ((x (set (tuple21 c d))) (y (tuple21 c d)))
  (=> (mem (tuple2 (set1 (tuple2 c1 d1)) (tuple2 c1 d1))
  (Tuple2 (set1 (tuple2 c1 d1)) (tuple2 c1 d1) (t2tb689 x) (t2tb693 y))
  (t2tb775 r)) (and (mem22 x u) (mem21 y v)))))))

(declare-fun t2tb950 ((set (set (tuple21 (set (tuple21 c d)) d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 c d)) d))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 c1 d1)) d1))) (t2tb950 x))))

(declare-fun tb2t950 (uni) (set (set (tuple21 (set (tuple21 c d)) d))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 c d)) d)))))
  (! (= (tb2t950 (t2tb950 i)) i) :pattern ((t2tb950 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 c1 d1)) d1))) j)
     (= (t2tb950 (tb2t950 j)) j)) :pattern ((t2tb950 (tb2t950 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 c d)))) (v (set d))
  (r (set (tuple21 (set (tuple21 c d)) d))))
  (= (mem (set1 (tuple2 (set1 (tuple2 c1 d1)) d1)) (t2tb777 r)
  (relation d1 (set1 (tuple2 c1 d1)) (t2tb688 u) (t2tb690 v)))
  (forall ((x (set (tuple21 c d))) (y d))
  (=> (mem (tuple2 (set1 (tuple2 c1 d1)) d1)
  (Tuple2 (set1 (tuple2 c1 d1)) d1 (t2tb689 x) (t2tb694 y)) (t2tb777 r))
  (and (mem22 x u) (mem20 y v)))))))

(declare-fun t2tb952 ((set (set (tuple21 (set (tuple21 c d)) c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 c d)) c))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 c1 d1)) c1))) (t2tb952 x))))

(declare-fun tb2t952 (uni) (set (set (tuple21 (set (tuple21 c d)) c))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 c d)) c)))))
  (! (= (tb2t952 (t2tb952 i)) i) :pattern ((t2tb952 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 c1 d1)) c1))) j)
     (= (t2tb952 (tb2t952 j)) j)) :pattern ((t2tb952 (tb2t952 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 c d)))) (v (set c))
  (r (set (tuple21 (set (tuple21 c d)) c))))
  (= (mem (set1 (tuple2 (set1 (tuple2 c1 d1)) c1)) (t2tb781 r)
  (relation c1 (set1 (tuple2 c1 d1)) (t2tb688 u) (t2tb132 v)))
  (forall ((x (set (tuple21 c d))) (y c))
  (=> (mem (tuple2 (set1 (tuple2 c1 d1)) c1)
  (Tuple2 (set1 (tuple2 c1 d1)) c1 (t2tb689 x) (t2tb135 y)) (t2tb781 r))
  (and (mem22 x u) (mem7 y v)))))))

(declare-fun t2tb953 ((set (set (tuple21 (set (tuple21 c d)) (set (tuple21 a
  b)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 c d)) (set (tuple21 a b)))))))
  (sort (set1 (set1 (tuple2 (set1 (tuple2 c1 d1)) (set1 (tuple2 a1 b1)))))
  (t2tb953 x))))

(declare-fun tb2t953 (uni) (set (set (tuple21 (set (tuple21 c d))
  (set (tuple21 a b))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 c d)) (set (tuple21 a b)))))))
  (! (= (tb2t953 (t2tb953 i)) i) :pattern ((t2tb953 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (set1 (tuple2 c1 d1)) (set1 (tuple2 a1 b1))))) j)
     (= (t2tb953 (tb2t953 j)) j)) :pattern ((t2tb953 (tb2t953 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 c d)))) (v (set (set (tuple21 a b))))
  (r (set (tuple21 (set (tuple21 c d)) (set (tuple21 a b))))))
  (= (mem (set1 (tuple2 (set1 (tuple2 c1 d1)) (set1 (tuple2 a1 b1))))
  (t2tb783 r)
  (relation (set1 (tuple2 a1 b1)) (set1 (tuple2 c1 d1)) (t2tb688 u)
  (t2tb10 v)))
  (forall ((x (set (tuple21 c d))) (y (set (tuple21 a b))))
  (=> (mem (tuple2 (set1 (tuple2 c1 d1)) (set1 (tuple2 a1 b1)))
  (Tuple2 (set1 (tuple2 c1 d1)) (set1 (tuple2 a1 b1)) (t2tb689 x) (t2tb11 y))
  (t2tb783 r)) (and (mem22 x u) (mem4 y v)))))))

(declare-fun t2tb954 ((set (set (tuple21 (set (tuple21 c d)) (tuple21 a
  b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 c d)) (tuple21 a b)))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 c1 d1)) (tuple2 a1 b1)))) (t2tb954 x))))

(declare-fun tb2t954 (uni) (set (set (tuple21 (set (tuple21 c d)) (tuple21 a
  b)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 c d)) (tuple21 a b))))))
  (! (= (tb2t954 (t2tb954 i)) i) :pattern ((t2tb954 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 c1 d1)) (tuple2 a1 b1)))) j)
     (= (t2tb954 (tb2t954 j)) j)) :pattern ((t2tb954 (tb2t954 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 c d)))) (v (set (tuple21 a b)))
  (r (set (tuple21 (set (tuple21 c d)) (tuple21 a b)))))
  (= (mem (set1 (tuple2 (set1 (tuple2 c1 d1)) (tuple2 a1 b1))) (t2tb785 r)
  (relation (tuple2 a1 b1) (set1 (tuple2 c1 d1)) (t2tb688 u) (t2tb11 v)))
  (forall ((x (set (tuple21 c d))) (y (tuple21 a b)))
  (=> (mem (tuple2 (set1 (tuple2 c1 d1)) (tuple2 a1 b1))
  (Tuple2 (set1 (tuple2 c1 d1)) (tuple2 a1 b1) (t2tb689 x) (t2tb13 y))
  (t2tb785 r)) (and (mem22 x u) (mem3 y v)))))))

(declare-fun t2tb955 ((set (set (tuple21 (set (tuple21 c d)) b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 c d)) b))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 c1 d1)) b1))) (t2tb955 x))))

(declare-fun tb2t955 (uni) (set (set (tuple21 (set (tuple21 c d)) b))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 c d)) b)))))
  (! (= (tb2t955 (t2tb955 i)) i) :pattern ((t2tb955 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 c1 d1)) b1))) j)
     (= (t2tb955 (tb2t955 j)) j)) :pattern ((t2tb955 (tb2t955 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 c d)))) (v (set b))
  (r (set (tuple21 (set (tuple21 c d)) b))))
  (= (mem (set1 (tuple2 (set1 (tuple2 c1 d1)) b1)) (t2tb787 r)
  (relation b1 (set1 (tuple2 c1 d1)) (t2tb688 u) (t2tb12 v)))
  (forall ((x (set (tuple21 c d))) (y b))
  (=> (mem (tuple2 (set1 (tuple2 c1 d1)) b1)
  (Tuple2 (set1 (tuple2 c1 d1)) b1 (t2tb689 x) (t2tb14 y)) (t2tb787 r))
  (and (mem22 x u) (mem2 y v)))))))

(declare-fun t2tb956 ((set (set (tuple21 (set (tuple21 c d)) a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 c d)) a))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 c1 d1)) a1))) (t2tb956 x))))

(declare-fun tb2t956 (uni) (set (set (tuple21 (set (tuple21 c d)) a))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 c d)) a)))))
  (! (= (tb2t956 (t2tb956 i)) i) :pattern ((t2tb956 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 c1 d1)) a1))) j)
     (= (t2tb956 (tb2t956 j)) j)) :pattern ((t2tb956 (tb2t956 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 c d)))) (v (set a))
  (r (set (tuple21 (set (tuple21 c d)) a))))
  (= (mem (set1 (tuple2 (set1 (tuple2 c1 d1)) a1)) (t2tb789 r)
  (relation a1 (set1 (tuple2 c1 d1)) (t2tb688 u) (t2tb1 v)))
  (forall ((x (set (tuple21 c d))) (y a))
  (=> (mem (tuple2 (set1 (tuple2 c1 d1)) a1)
  (Tuple2 (set1 (tuple2 c1 d1)) a1 (t2tb689 x) (t2tb2 y)) (t2tb789 r))
  (and (mem22 x u) (mem1 y v)))))))

;; mem_relation
  (assert
  (forall ((b2 ty))
  (forall ((u (set (set (tuple21 c d)))) (v uni) (r uni))
  (and
  (=> (mem (set1 (tuple2 (set1 (tuple2 c1 d1)) b2)) r
  (relation b2 (set1 (tuple2 c1 d1)) (t2tb688 u) v))
  (forall ((x (set (tuple21 c d))) (y uni))
  (=> (mem (tuple2 (set1 (tuple2 c1 d1)) b2)
  (Tuple2 (set1 (tuple2 c1 d1)) b2 (t2tb689 x) y) r)
  (and (mem22 x u) (mem b2 y v)))))
  (=>
  (forall ((x (set (tuple21 c d))) (y uni))
  (=> (sort b2 y)
  (=> (mem (tuple2 (set1 (tuple2 c1 d1)) b2)
  (Tuple2 (set1 (tuple2 c1 d1)) b2 (t2tb689 x) y) r)
  (and (mem22 x u) (mem b2 y v))))) (mem
  (set1 (tuple2 (set1 (tuple2 c1 d1)) b2)) r
  (relation b2 (set1 (tuple2 c1 d1)) (t2tb688 u) v)))))))

(declare-fun t2tb958 ((set (set (tuple21 (tuple21 c d) (tuple21 (tuple21 a c)
  (tuple21 b d)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 c d) (tuple21 (tuple21 a c)
  (tuple21 b d))))))) (sort
  (set1
  (set1 (tuple2 (tuple2 c1 d1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))))
  (t2tb958 x))))

(declare-fun tb2t958 (uni) (set (set (tuple21 (tuple21 c d)
  (tuple21 (tuple21 a c) (tuple21 b d))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 c d) (tuple21 (tuple21 a c)
  (tuple21 b d)))))))
  (! (= (tb2t958 (t2tb958 i)) i) :pattern ((t2tb958 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (set1 (tuple2 (tuple2 c1 d1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))))
     j) (= (t2tb958 (tb2t958 j)) j)) :pattern ((t2tb958 (tb2t958 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 c d))) (v (set (tuple21 (tuple21 a c) (tuple21 b
  d)))) (r (set (tuple21 (tuple21 c d) (tuple21 (tuple21 a c) (tuple21 b
  d))))))
  (= (mem
  (set1 (tuple2 (tuple2 c1 d1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))))
  (t2tb793 r)
  (relation (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 c1 d1) (t2tb689 u)
  (t2tb686 v)))
  (forall ((x (tuple21 c d)) (y (tuple21 (tuple21 a c) (tuple21 b d))))
  (=> (mem (tuple2 (tuple2 c1 d1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
  (Tuple2 (tuple2 c1 d1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb693 x)
  (t2tb691 y)) (t2tb793 r)) (and (mem21 x u) (mem24 y v)))))))

(declare-fun t2tb960 ((set (set (tuple21 (tuple21 c d) (set (tuple21 c
  d)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 c d) (set (tuple21 c d))))))) (sort
  (set1 (set1 (tuple2 (tuple2 c1 d1) (set1 (tuple2 c1 d1))))) (t2tb960 x))))

(declare-fun tb2t960 (uni) (set (set (tuple21 (tuple21 c d) (set (tuple21 c
  d))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 c d) (set (tuple21 c d)))))))
  (! (= (tb2t960 (t2tb960 i)) i) :pattern ((t2tb960 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 c1 d1) (set1 (tuple2 c1 d1))))) j)
     (= (t2tb960 (tb2t960 j)) j)) :pattern ((t2tb960 (tb2t960 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 c d))) (v (set (set (tuple21 c d))))
  (r (set (tuple21 (tuple21 c d) (set (tuple21 c d))))))
  (= (mem (set1 (tuple2 (tuple2 c1 d1) (set1 (tuple2 c1 d1)))) (t2tb797 r)
  (relation (set1 (tuple2 c1 d1)) (tuple2 c1 d1) (t2tb689 u) (t2tb688 v)))
  (forall ((x (tuple21 c d)) (y (set (tuple21 c d))))
  (=> (mem (tuple2 (tuple2 c1 d1) (set1 (tuple2 c1 d1)))
  (Tuple2 (tuple2 c1 d1) (set1 (tuple2 c1 d1)) (t2tb693 x) (t2tb689 y))
  (t2tb797 r)) (and (mem21 x u) (mem22 y v)))))))

(declare-fun t2tb961 ((set (set (tuple21 (tuple21 c d) (tuple21 c d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 c d) (tuple21 c d)))))) (sort
  (set1 (set1 (tuple2 (tuple2 c1 d1) (tuple2 c1 d1)))) (t2tb961 x))))

(declare-fun tb2t961 (uni) (set (set (tuple21 (tuple21 c d) (tuple21 c d)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 c d) (tuple21 c d))))))
  (! (= (tb2t961 (t2tb961 i)) i) :pattern ((t2tb961 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 c1 d1) (tuple2 c1 d1)))) j)
     (= (t2tb961 (tb2t961 j)) j)) :pattern ((t2tb961 (tb2t961 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 c d))) (v (set (tuple21 c d)))
  (r (set (tuple21 (tuple21 c d) (tuple21 c d)))))
  (= (mem (set1 (tuple2 (tuple2 c1 d1) (tuple2 c1 d1))) (t2tb799 r)
  (relation (tuple2 c1 d1) (tuple2 c1 d1) (t2tb689 u) (t2tb689 v)))
  (forall ((x (tuple21 c d)) (y (tuple21 c d)))
  (=> (mem (tuple2 (tuple2 c1 d1) (tuple2 c1 d1))
  (Tuple2 (tuple2 c1 d1) (tuple2 c1 d1) (t2tb693 x) (t2tb693 y)) (t2tb799 r))
  (and (mem21 x u) (mem21 y v)))))))

(declare-fun t2tb962 ((set (set (tuple21 (tuple21 c d) d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 c d) d))))) (sort
  (set1 (set1 (tuple2 (tuple2 c1 d1) d1))) (t2tb962 x))))

(declare-fun tb2t962 (uni) (set (set (tuple21 (tuple21 c d) d))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 c d) d)))))
  (! (= (tb2t962 (t2tb962 i)) i) :pattern ((t2tb962 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 c1 d1) d1))) j)
     (= (t2tb962 (tb2t962 j)) j)) :pattern ((t2tb962 (tb2t962 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 c d))) (v (set d)) (r (set (tuple21 (tuple21 c d)
  d))))
  (= (mem (set1 (tuple2 (tuple2 c1 d1) d1)) (t2tb801 r)
  (relation d1 (tuple2 c1 d1) (t2tb689 u) (t2tb690 v)))
  (forall ((x (tuple21 c d)) (y d))
  (=> (mem (tuple2 (tuple2 c1 d1) d1)
  (Tuple2 (tuple2 c1 d1) d1 (t2tb693 x) (t2tb694 y)) (t2tb801 r))
  (and (mem21 x u) (mem20 y v)))))))

(declare-fun t2tb964 ((set (set (tuple21 (tuple21 c d) c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 c d) c))))) (sort
  (set1 (set1 (tuple2 (tuple2 c1 d1) c1))) (t2tb964 x))))

(declare-fun tb2t964 (uni) (set (set (tuple21 (tuple21 c d) c))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 c d) c)))))
  (! (= (tb2t964 (t2tb964 i)) i) :pattern ((t2tb964 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 c1 d1) c1))) j)
     (= (t2tb964 (tb2t964 j)) j)) :pattern ((t2tb964 (tb2t964 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 c d))) (v (set c)) (r (set (tuple21 (tuple21 c d)
  c))))
  (= (mem (set1 (tuple2 (tuple2 c1 d1) c1)) (t2tb805 r)
  (relation c1 (tuple2 c1 d1) (t2tb689 u) (t2tb132 v)))
  (forall ((x (tuple21 c d)) (y c))
  (=> (mem (tuple2 (tuple2 c1 d1) c1)
  (Tuple2 (tuple2 c1 d1) c1 (t2tb693 x) (t2tb135 y)) (t2tb805 r))
  (and (mem21 x u) (mem7 y v)))))))

(declare-fun t2tb965 ((set (set (tuple21 (tuple21 c d) (set (tuple21 a
  b)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 c d) (set (tuple21 a b))))))) (sort
  (set1 (set1 (tuple2 (tuple2 c1 d1) (set1 (tuple2 a1 b1))))) (t2tb965 x))))

(declare-fun tb2t965 (uni) (set (set (tuple21 (tuple21 c d) (set (tuple21 a
  b))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 c d) (set (tuple21 a b)))))))
  (! (= (tb2t965 (t2tb965 i)) i) :pattern ((t2tb965 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 c1 d1) (set1 (tuple2 a1 b1))))) j)
     (= (t2tb965 (tb2t965 j)) j)) :pattern ((t2tb965 (tb2t965 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 c d))) (v (set (set (tuple21 a b))))
  (r (set (tuple21 (tuple21 c d) (set (tuple21 a b))))))
  (= (mem (set1 (tuple2 (tuple2 c1 d1) (set1 (tuple2 a1 b1)))) (t2tb807 r)
  (relation (set1 (tuple2 a1 b1)) (tuple2 c1 d1) (t2tb689 u) (t2tb10 v)))
  (forall ((x (tuple21 c d)) (y (set (tuple21 a b))))
  (=> (mem (tuple2 (tuple2 c1 d1) (set1 (tuple2 a1 b1)))
  (Tuple2 (tuple2 c1 d1) (set1 (tuple2 a1 b1)) (t2tb693 x) (t2tb11 y))
  (t2tb807 r)) (and (mem21 x u) (mem4 y v)))))))

(declare-fun t2tb966 ((set (set (tuple21 (tuple21 c d) (tuple21 a b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 c d) (tuple21 a b)))))) (sort
  (set1 (set1 (tuple2 (tuple2 c1 d1) (tuple2 a1 b1)))) (t2tb966 x))))

(declare-fun tb2t966 (uni) (set (set (tuple21 (tuple21 c d) (tuple21 a b)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 c d) (tuple21 a b))))))
  (! (= (tb2t966 (t2tb966 i)) i) :pattern ((t2tb966 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 c1 d1) (tuple2 a1 b1)))) j)
     (= (t2tb966 (tb2t966 j)) j)) :pattern ((t2tb966 (tb2t966 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 c d))) (v (set (tuple21 a b)))
  (r (set (tuple21 (tuple21 c d) (tuple21 a b)))))
  (= (mem (set1 (tuple2 (tuple2 c1 d1) (tuple2 a1 b1))) (t2tb809 r)
  (relation (tuple2 a1 b1) (tuple2 c1 d1) (t2tb689 u) (t2tb11 v)))
  (forall ((x (tuple21 c d)) (y (tuple21 a b)))
  (=> (mem (tuple2 (tuple2 c1 d1) (tuple2 a1 b1))
  (Tuple2 (tuple2 c1 d1) (tuple2 a1 b1) (t2tb693 x) (t2tb13 y)) (t2tb809 r))
  (and (mem21 x u) (mem3 y v)))))))

(declare-fun t2tb967 ((set (set (tuple21 (tuple21 c d) b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 c d) b))))) (sort
  (set1 (set1 (tuple2 (tuple2 c1 d1) b1))) (t2tb967 x))))

(declare-fun tb2t967 (uni) (set (set (tuple21 (tuple21 c d) b))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 c d) b)))))
  (! (= (tb2t967 (t2tb967 i)) i) :pattern ((t2tb967 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 c1 d1) b1))) j)
     (= (t2tb967 (tb2t967 j)) j)) :pattern ((t2tb967 (tb2t967 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 c d))) (v (set b)) (r (set (tuple21 (tuple21 c d)
  b))))
  (= (mem (set1 (tuple2 (tuple2 c1 d1) b1)) (t2tb811 r)
  (relation b1 (tuple2 c1 d1) (t2tb689 u) (t2tb12 v)))
  (forall ((x (tuple21 c d)) (y b))
  (=> (mem (tuple2 (tuple2 c1 d1) b1)
  (Tuple2 (tuple2 c1 d1) b1 (t2tb693 x) (t2tb14 y)) (t2tb811 r))
  (and (mem21 x u) (mem2 y v)))))))

(declare-fun t2tb968 ((set (set (tuple21 (tuple21 c d) a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 c d) a))))) (sort
  (set1 (set1 (tuple2 (tuple2 c1 d1) a1))) (t2tb968 x))))

(declare-fun tb2t968 (uni) (set (set (tuple21 (tuple21 c d) a))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 c d) a)))))
  (! (= (tb2t968 (t2tb968 i)) i) :pattern ((t2tb968 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 c1 d1) a1))) j)
     (= (t2tb968 (tb2t968 j)) j)) :pattern ((t2tb968 (tb2t968 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 c d))) (v (set a)) (r (set (tuple21 (tuple21 c d)
  a))))
  (= (mem (set1 (tuple2 (tuple2 c1 d1) a1)) (t2tb813 r)
  (relation a1 (tuple2 c1 d1) (t2tb689 u) (t2tb1 v)))
  (forall ((x (tuple21 c d)) (y a))
  (=> (mem (tuple2 (tuple2 c1 d1) a1)
  (Tuple2 (tuple2 c1 d1) a1 (t2tb693 x) (t2tb2 y)) (t2tb813 r))
  (and (mem21 x u) (mem1 y v)))))))

;; mem_relation
  (assert
  (forall ((b2 ty))
  (forall ((u (set (tuple21 c d))) (v uni) (r uni))
  (and
  (=> (mem (set1 (tuple2 (tuple2 c1 d1) b2)) r
  (relation b2 (tuple2 c1 d1) (t2tb689 u) v))
  (forall ((x (tuple21 c d)) (y uni))
  (=> (mem (tuple2 (tuple2 c1 d1) b2)
  (Tuple2 (tuple2 c1 d1) b2 (t2tb693 x) y) r) (and (mem21 x u) (mem b2 y v)))))
  (=>
  (forall ((x (tuple21 c d)) (y uni))
  (=> (sort b2 y)
  (=> (mem (tuple2 (tuple2 c1 d1) b2)
  (Tuple2 (tuple2 c1 d1) b2 (t2tb693 x) y) r) (and (mem21 x u) (mem b2 y v)))))
  (mem (set1 (tuple2 (tuple2 c1 d1) b2)) r
  (relation b2 (tuple2 c1 d1) (t2tb689 u) v)))))))

(declare-fun t2tb970 ((set (set (tuple21 d (tuple21 (tuple21 a c) (tuple21 b
  d)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 d (tuple21 (tuple21 a c) (tuple21 b d)))))))
  (sort (set1 (set1 (tuple2 d1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))))
  (t2tb970 x))))

(declare-fun tb2t970 (uni) (set (set (tuple21 d (tuple21 (tuple21 a c)
  (tuple21 b d))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 d (tuple21 (tuple21 a c) (tuple21 b d)))))))
  (! (= (tb2t970 (t2tb970 i)) i) :pattern ((t2tb970 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 d1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))))) j)
     (= (t2tb970 (tb2t970 j)) j)) :pattern ((t2tb970 (tb2t970 j))) )))

;; mem_relation
  (assert
  (forall ((u (set d)) (v (set (tuple21 (tuple21 a c) (tuple21 b d))))
  (r (set (tuple21 d (tuple21 (tuple21 a c) (tuple21 b d))))))
  (= (mem (set1 (tuple2 d1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))))
  (t2tb817 r)
  (relation (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) d1 (t2tb690 u)
  (t2tb686 v)))
  (forall ((x d) (y (tuple21 (tuple21 a c) (tuple21 b d))))
  (=> (mem (tuple2 d1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
  (Tuple2 d1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb694 x) (t2tb691 y))
  (t2tb817 r)) (and (mem20 x u) (mem24 y v)))))))

(declare-fun t2tb972 ((set (set (tuple21 d (set (tuple21 c d)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 d (set (tuple21 c d))))))) (sort
  (set1 (set1 (tuple2 d1 (set1 (tuple2 c1 d1))))) (t2tb972 x))))

(declare-fun tb2t972 (uni) (set (set (tuple21 d (set (tuple21 c d))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 d (set (tuple21 c d)))))))
  (! (= (tb2t972 (t2tb972 i)) i) :pattern ((t2tb972 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 d1 (set1 (tuple2 c1 d1))))) j)
     (= (t2tb972 (tb2t972 j)) j)) :pattern ((t2tb972 (tb2t972 j))) )))

;; mem_relation
  (assert
  (forall ((u (set d)) (v (set (set (tuple21 c d)))) (r (set (tuple21 d
  (set (tuple21 c d))))))
  (= (mem (set1 (tuple2 d1 (set1 (tuple2 c1 d1)))) (t2tb821 r)
  (relation (set1 (tuple2 c1 d1)) d1 (t2tb690 u) (t2tb688 v)))
  (forall ((x d) (y (set (tuple21 c d))))
  (=> (mem (tuple2 d1 (set1 (tuple2 c1 d1)))
  (Tuple2 d1 (set1 (tuple2 c1 d1)) (t2tb694 x) (t2tb689 y)) (t2tb821 r))
  (and (mem20 x u) (mem22 y v)))))))

(declare-fun t2tb973 ((set (set (tuple21 d (tuple21 c d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 d (tuple21 c d)))))) (sort
  (set1 (set1 (tuple2 d1 (tuple2 c1 d1)))) (t2tb973 x))))

(declare-fun tb2t973 (uni) (set (set (tuple21 d (tuple21 c d)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 d (tuple21 c d))))))
  (! (= (tb2t973 (t2tb973 i)) i) :pattern ((t2tb973 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 d1 (tuple2 c1 d1)))) j)
     (= (t2tb973 (tb2t973 j)) j)) :pattern ((t2tb973 (tb2t973 j))) )))

;; mem_relation
  (assert
  (forall ((u (set d)) (v (set (tuple21 c d))) (r (set (tuple21 d (tuple21 c
  d)))))
  (= (mem (set1 (tuple2 d1 (tuple2 c1 d1))) (t2tb823 r)
  (relation (tuple2 c1 d1) d1 (t2tb690 u) (t2tb689 v)))
  (forall ((x d) (y (tuple21 c d)))
  (=> (mem (tuple2 d1 (tuple2 c1 d1))
  (Tuple2 d1 (tuple2 c1 d1) (t2tb694 x) (t2tb693 y)) (t2tb823 r))
  (and (mem20 x u) (mem21 y v)))))))

(declare-fun t2tb974 ((set (set (tuple21 d d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 d d))))) (sort (set1 (set1 (tuple2 d1 d1)))
  (t2tb974 x))))

(declare-fun tb2t974 (uni) (set (set (tuple21 d d))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 d d)))))
  (! (= (tb2t974 (t2tb974 i)) i) :pattern ((t2tb974 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 d1 d1))) j) (= (t2tb974 (tb2t974 j)) j)) :pattern (
  (t2tb974 (tb2t974 j))) )))

;; mem_relation
  (assert
  (forall ((u (set d)) (v (set d)) (r (set (tuple21 d d))))
  (= (mem (set1 (tuple2 d1 d1)) (t2tb825 r)
  (relation d1 d1 (t2tb690 u) (t2tb690 v)))
  (forall ((x d) (y d))
  (=> (mem (tuple2 d1 d1) (Tuple2 d1 d1 (t2tb694 x) (t2tb694 y)) (t2tb825 r))
  (and (mem20 x u) (mem20 y v)))))))

(declare-fun t2tb976 ((set (set (tuple21 d c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 d c))))) (sort (set1 (set1 (tuple2 d1 c1)))
  (t2tb976 x))))

(declare-fun tb2t976 (uni) (set (set (tuple21 d c))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 d c)))))
  (! (= (tb2t976 (t2tb976 i)) i) :pattern ((t2tb976 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 d1 c1))) j) (= (t2tb976 (tb2t976 j)) j)) :pattern (
  (t2tb976 (tb2t976 j))) )))

;; mem_relation
  (assert
  (forall ((u (set d)) (v (set c)) (r (set (tuple21 d c))))
  (= (mem (set1 (tuple2 d1 c1)) (t2tb829 r)
  (relation c1 d1 (t2tb690 u) (t2tb132 v)))
  (forall ((x d) (y c))
  (=> (mem (tuple2 d1 c1) (Tuple2 d1 c1 (t2tb694 x) (t2tb135 y)) (t2tb829 r))
  (and (mem20 x u) (mem7 y v)))))))

(declare-fun t2tb977 ((set (set (tuple21 d (set (tuple21 a b)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 d (set (tuple21 a b))))))) (sort
  (set1 (set1 (tuple2 d1 (set1 (tuple2 a1 b1))))) (t2tb977 x))))

(declare-fun tb2t977 (uni) (set (set (tuple21 d (set (tuple21 a b))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 d (set (tuple21 a b)))))))
  (! (= (tb2t977 (t2tb977 i)) i) :pattern ((t2tb977 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 d1 (set1 (tuple2 a1 b1))))) j)
     (= (t2tb977 (tb2t977 j)) j)) :pattern ((t2tb977 (tb2t977 j))) )))

;; mem_relation
  (assert
  (forall ((u (set d)) (v (set (set (tuple21 a b)))) (r (set (tuple21 d
  (set (tuple21 a b))))))
  (= (mem (set1 (tuple2 d1 (set1 (tuple2 a1 b1)))) (t2tb831 r)
  (relation (set1 (tuple2 a1 b1)) d1 (t2tb690 u) (t2tb10 v)))
  (forall ((x d) (y (set (tuple21 a b))))
  (=> (mem (tuple2 d1 (set1 (tuple2 a1 b1)))
  (Tuple2 d1 (set1 (tuple2 a1 b1)) (t2tb694 x) (t2tb11 y)) (t2tb831 r))
  (and (mem20 x u) (mem4 y v)))))))

(declare-fun t2tb978 ((set (set (tuple21 d (tuple21 a b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 d (tuple21 a b)))))) (sort
  (set1 (set1 (tuple2 d1 (tuple2 a1 b1)))) (t2tb978 x))))

(declare-fun tb2t978 (uni) (set (set (tuple21 d (tuple21 a b)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 d (tuple21 a b))))))
  (! (= (tb2t978 (t2tb978 i)) i) :pattern ((t2tb978 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 d1 (tuple2 a1 b1)))) j)
     (= (t2tb978 (tb2t978 j)) j)) :pattern ((t2tb978 (tb2t978 j))) )))

;; mem_relation
  (assert
  (forall ((u (set d)) (v (set (tuple21 a b))) (r (set (tuple21 d (tuple21 a
  b)))))
  (= (mem (set1 (tuple2 d1 (tuple2 a1 b1))) (t2tb833 r)
  (relation (tuple2 a1 b1) d1 (t2tb690 u) (t2tb11 v)))
  (forall ((x d) (y (tuple21 a b)))
  (=> (mem (tuple2 d1 (tuple2 a1 b1))
  (Tuple2 d1 (tuple2 a1 b1) (t2tb694 x) (t2tb13 y)) (t2tb833 r))
  (and (mem20 x u) (mem3 y v)))))))

(declare-fun t2tb979 ((set (set (tuple21 d b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 d b))))) (sort (set1 (set1 (tuple2 d1 b1)))
  (t2tb979 x))))

(declare-fun tb2t979 (uni) (set (set (tuple21 d b))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 d b)))))
  (! (= (tb2t979 (t2tb979 i)) i) :pattern ((t2tb979 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 d1 b1))) j) (= (t2tb979 (tb2t979 j)) j)) :pattern (
  (t2tb979 (tb2t979 j))) )))

;; mem_relation
  (assert
  (forall ((u (set d)) (v (set b)) (r (set (tuple21 d b))))
  (= (mem (set1 (tuple2 d1 b1)) (t2tb835 r)
  (relation b1 d1 (t2tb690 u) (t2tb12 v)))
  (forall ((x d) (y b))
  (=> (mem (tuple2 d1 b1) (Tuple2 d1 b1 (t2tb694 x) (t2tb14 y)) (t2tb835 r))
  (and (mem20 x u) (mem2 y v)))))))

(declare-fun t2tb980 ((set (set (tuple21 d a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 d a))))) (sort (set1 (set1 (tuple2 d1 a1)))
  (t2tb980 x))))

(declare-fun tb2t980 (uni) (set (set (tuple21 d a))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 d a)))))
  (! (= (tb2t980 (t2tb980 i)) i) :pattern ((t2tb980 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 d1 a1))) j) (= (t2tb980 (tb2t980 j)) j)) :pattern (
  (t2tb980 (tb2t980 j))) )))

;; mem_relation
  (assert
  (forall ((u (set d)) (v (set a)) (r (set (tuple21 d a))))
  (= (mem (set1 (tuple2 d1 a1)) (t2tb837 r)
  (relation a1 d1 (t2tb690 u) (t2tb1 v)))
  (forall ((x d) (y a))
  (=> (mem (tuple2 d1 a1) (Tuple2 d1 a1 (t2tb694 x) (t2tb2 y)) (t2tb837 r))
  (and (mem20 x u) (mem1 y v)))))))

;; mem_relation
  (assert
  (forall ((b2 ty))
  (forall ((u (set d)) (v uni) (r uni))
  (and
  (=> (mem (set1 (tuple2 d1 b2)) r (relation b2 d1 (t2tb690 u) v))
  (forall ((x d) (y uni))
  (=> (mem (tuple2 d1 b2) (Tuple2 d1 b2 (t2tb694 x) y) r)
  (and (mem20 x u) (mem b2 y v)))))
  (=>
  (forall ((x d) (y uni))
  (=> (sort b2 y)
  (=> (mem (tuple2 d1 b2) (Tuple2 d1 b2 (t2tb694 x) y) r)
  (and (mem20 x u) (mem b2 y v))))) (mem (set1 (tuple2 d1 b2)) r
  (relation b2 d1 (t2tb690 u) v)))))))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a c))) (v (set (tuple21 b d)))
  (r (set (tuple21 (tuple21 a c) (tuple21 b d)))))
  (= (mem (set1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))) (t2tb686 r)
  (relation (tuple2 b1 d1) (tuple2 a1 c1) (t2tb129 u) (t2tb687 v)))
  (forall ((x (tuple21 a c)) (y (tuple21 b d)))
  (=> (mem24
  (tb2t691 (Tuple2 (tuple2 a1 c1) (tuple2 b1 d1) (t2tb133 x) (t2tb692 y))) r)
  (and (mem (tuple2 a1 c1) (t2tb133 x) (t2tb129 u)) (mem (tuple2 b1 d1)
  (t2tb692 y) (t2tb687 v))))))))

(declare-fun t2tb987 ((set (set (tuple21 c (tuple21 (tuple21 a c) (tuple21 b
  d)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 c (tuple21 (tuple21 a c) (tuple21 b d)))))))
  (sort (set1 (set1 (tuple2 c1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))))
  (t2tb987 x))))

(declare-fun tb2t987 (uni) (set (set (tuple21 c (tuple21 (tuple21 a c)
  (tuple21 b d))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 c (tuple21 (tuple21 a c) (tuple21 b d)))))))
  (! (= (tb2t987 (t2tb987 i)) i) :pattern ((t2tb987 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 c1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))))) j)
     (= (t2tb987 (tb2t987 j)) j)) :pattern ((t2tb987 (tb2t987 j))) )))

;; mem_relation
  (assert
  (forall ((u (set c)) (v (set (tuple21 (tuple21 a c) (tuple21 b d))))
  (r (set (tuple21 c (tuple21 (tuple21 a c) (tuple21 b d))))))
  (= (mem (set1 (tuple2 c1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))))
  (t2tb851 r)
  (relation (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) c1 (t2tb132 u)
  (t2tb686 v)))
  (forall ((x c) (y (tuple21 (tuple21 a c) (tuple21 b d))))
  (=> (mem (tuple2 c1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
  (Tuple2 c1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb135 x) (t2tb691 y))
  (t2tb851 r)) (and (mem7 x u) (mem24 y v)))))))

(declare-fun t2tb989 ((set (set (tuple21 c (set (tuple21 c d)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 c (set (tuple21 c d))))))) (sort
  (set1 (set1 (tuple2 c1 (set1 (tuple2 c1 d1))))) (t2tb989 x))))

(declare-fun tb2t989 (uni) (set (set (tuple21 c (set (tuple21 c d))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 c (set (tuple21 c d)))))))
  (! (= (tb2t989 (t2tb989 i)) i) :pattern ((t2tb989 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 c1 (set1 (tuple2 c1 d1))))) j)
     (= (t2tb989 (tb2t989 j)) j)) :pattern ((t2tb989 (tb2t989 j))) )))

;; mem_relation
  (assert
  (forall ((u (set c)) (v (set (set (tuple21 c d)))) (r (set (tuple21 c
  (set (tuple21 c d))))))
  (= (mem (set1 (tuple2 c1 (set1 (tuple2 c1 d1)))) (t2tb855 r)
  (relation (set1 (tuple2 c1 d1)) c1 (t2tb132 u) (t2tb688 v)))
  (forall ((x c) (y (set (tuple21 c d))))
  (=> (mem (tuple2 c1 (set1 (tuple2 c1 d1)))
  (Tuple2 c1 (set1 (tuple2 c1 d1)) (t2tb135 x) (t2tb689 y)) (t2tb855 r))
  (and (mem7 x u) (mem22 y v)))))))

(declare-fun t2tb990 ((set (set (tuple21 c (tuple21 c d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 c (tuple21 c d)))))) (sort
  (set1 (set1 (tuple2 c1 (tuple2 c1 d1)))) (t2tb990 x))))

(declare-fun tb2t990 (uni) (set (set (tuple21 c (tuple21 c d)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 c (tuple21 c d))))))
  (! (= (tb2t990 (t2tb990 i)) i) :pattern ((t2tb990 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 c1 (tuple2 c1 d1)))) j)
     (= (t2tb990 (tb2t990 j)) j)) :pattern ((t2tb990 (tb2t990 j))) )))

;; mem_relation
  (assert
  (forall ((u (set c)) (v (set (tuple21 c d))) (r (set (tuple21 c (tuple21 c
  d)))))
  (= (mem (set1 (tuple2 c1 (tuple2 c1 d1))) (t2tb857 r)
  (relation (tuple2 c1 d1) c1 (t2tb132 u) (t2tb689 v)))
  (forall ((x c) (y (tuple21 c d)))
  (=> (mem (tuple2 c1 (tuple2 c1 d1))
  (Tuple2 c1 (tuple2 c1 d1) (t2tb135 x) (t2tb693 y)) (t2tb857 r))
  (and (mem7 x u) (mem21 y v)))))))

;; mem_relation
  (assert
  (forall ((u (set c)) (v (set d)) (r (set (tuple21 c d))))
  (= (mem22 r (relation7 u v))
  (forall ((x c) (y d))
  (=> (mem21 (tb2t693 (Tuple2 c1 d1 (t2tb135 x) (t2tb694 y))) r)
  (and (mem7 x u) (mem20 y v)))))))

(declare-fun t2tb305 ((set (set (tuple21 c c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 c c))))) (sort (set1 (set1 (tuple2 c1 c1)))
  (t2tb305 x))))

(declare-fun tb2t305 (uni) (set (set (tuple21 c c))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 c c)))))
  (! (= (tb2t305 (t2tb305 i)) i) :pattern ((t2tb305 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 c1 c1))) j) (= (t2tb305 (tb2t305 j)) j)) :pattern (
  (t2tb305 (tb2t305 j))) )))

;; mem_relation
  (assert
  (forall ((u (set c)) (v (set c)) (r (set (tuple21 c c))))
  (= (mem (set1 (tuple2 c1 c1)) (t2tb216 r)
  (relation c1 c1 (t2tb132 u) (t2tb132 v)))
  (forall ((x c) (y c))
  (=> (mem (tuple2 c1 c1) (Tuple2 c1 c1 (t2tb135 x) (t2tb135 y)) (t2tb216 r))
  (and (mem7 x u) (mem7 y v)))))))

(declare-fun t2tb306 ((set (set (tuple21 c (set (tuple21 a b)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 c (set (tuple21 a b))))))) (sort
  (set1 (set1 (tuple2 c1 (set1 (tuple2 a1 b1))))) (t2tb306 x))))

(declare-fun tb2t306 (uni) (set (set (tuple21 c (set (tuple21 a b))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 c (set (tuple21 a b)))))))
  (! (= (tb2t306 (t2tb306 i)) i) :pattern ((t2tb306 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 c1 (set1 (tuple2 a1 b1))))) j)
     (= (t2tb306 (tb2t306 j)) j)) :pattern ((t2tb306 (tb2t306 j))) )))

;; mem_relation
  (assert
  (forall ((u (set c)) (v (set (set (tuple21 a b)))) (r (set (tuple21 c
  (set (tuple21 a b))))))
  (= (mem (set1 (tuple2 c1 (set1 (tuple2 a1 b1)))) (t2tb218 r)
  (relation (set1 (tuple2 a1 b1)) c1 (t2tb132 u) (t2tb10 v)))
  (forall ((x c) (y (set (tuple21 a b))))
  (=> (mem (tuple2 c1 (set1 (tuple2 a1 b1)))
  (Tuple2 c1 (set1 (tuple2 a1 b1)) (t2tb135 x) (t2tb11 y)) (t2tb218 r))
  (and (mem7 x u) (mem4 y v)))))))

(declare-fun t2tb307 ((set (set (tuple21 c (tuple21 a b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 c (tuple21 a b)))))) (sort
  (set1 (set1 (tuple2 c1 (tuple2 a1 b1)))) (t2tb307 x))))

(declare-fun tb2t307 (uni) (set (set (tuple21 c (tuple21 a b)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 c (tuple21 a b))))))
  (! (= (tb2t307 (t2tb307 i)) i) :pattern ((t2tb307 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 c1 (tuple2 a1 b1)))) j)
     (= (t2tb307 (tb2t307 j)) j)) :pattern ((t2tb307 (tb2t307 j))) )))

;; mem_relation
  (assert
  (forall ((u (set c)) (v (set (tuple21 a b))) (r (set (tuple21 c (tuple21 a
  b)))))
  (= (mem (set1 (tuple2 c1 (tuple2 a1 b1))) (t2tb220 r)
  (relation (tuple2 a1 b1) c1 (t2tb132 u) (t2tb11 v)))
  (forall ((x c) (y (tuple21 a b)))
  (=> (mem (tuple2 c1 (tuple2 a1 b1))
  (Tuple2 c1 (tuple2 a1 b1) (t2tb135 x) (t2tb13 y)) (t2tb220 r))
  (and (mem7 x u) (mem3 y v)))))))

(declare-fun t2tb308 ((set (set (tuple21 c b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 c b))))) (sort (set1 (set1 (tuple2 c1 b1)))
  (t2tb308 x))))

(declare-fun tb2t308 (uni) (set (set (tuple21 c b))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 c b)))))
  (! (= (tb2t308 (t2tb308 i)) i) :pattern ((t2tb308 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 c1 b1))) j) (= (t2tb308 (tb2t308 j)) j)) :pattern (
  (t2tb308 (tb2t308 j))) )))

;; mem_relation
  (assert
  (forall ((u (set c)) (v (set b)) (r (set (tuple21 c b))))
  (= (mem (set1 (tuple2 c1 b1)) (t2tb222 r)
  (relation b1 c1 (t2tb132 u) (t2tb12 v)))
  (forall ((x c) (y b))
  (=> (mem (tuple2 c1 b1) (Tuple2 c1 b1 (t2tb135 x) (t2tb14 y)) (t2tb222 r))
  (and (mem7 x u) (mem2 y v)))))))

(declare-fun t2tb309 ((set (set (tuple21 c a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 c a))))) (sort (set1 (set1 (tuple2 c1 a1)))
  (t2tb309 x))))

(declare-fun tb2t309 (uni) (set (set (tuple21 c a))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 c a)))))
  (! (= (tb2t309 (t2tb309 i)) i) :pattern ((t2tb309 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 c1 a1))) j) (= (t2tb309 (tb2t309 j)) j)) :pattern (
  (t2tb309 (tb2t309 j))) )))

;; mem_relation
  (assert
  (forall ((u (set c)) (v (set a)) (r (set (tuple21 c a))))
  (= (mem (set1 (tuple2 c1 a1)) (t2tb224 r)
  (relation a1 c1 (t2tb132 u) (t2tb1 v)))
  (forall ((x c) (y a))
  (=> (mem (tuple2 c1 a1) (Tuple2 c1 a1 (t2tb135 x) (t2tb2 y)) (t2tb224 r))
  (and (mem7 x u) (mem1 y v)))))))

;; mem_relation
  (assert
  (forall ((b2 ty))
  (forall ((u (set c)) (v uni) (r uni))
  (and
  (=> (mem (set1 (tuple2 c1 b2)) r (relation b2 c1 (t2tb132 u) v))
  (forall ((x c) (y uni))
  (=> (mem (tuple2 c1 b2) (Tuple2 c1 b2 (t2tb135 x) y) r)
  (and (mem7 x u) (mem b2 y v)))))
  (=>
  (forall ((x c) (y uni))
  (=> (sort b2 y)
  (=> (mem (tuple2 c1 b2) (Tuple2 c1 b2 (t2tb135 x) y) r)
  (and (mem7 x u) (mem b2 y v))))) (mem (set1 (tuple2 c1 b2)) r
  (relation b2 c1 (t2tb132 u) v)))))))

(declare-fun t2tb992 ((set (set (tuple21 (set (tuple21 a b))
  (tuple21 (tuple21 a c) (tuple21 b d)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a b)) (tuple21 (tuple21 a c)
  (tuple21 b d))))))) (sort
  (set1
  (set1
  (tuple2 (set1 (tuple2 a1 b1)) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))))
  (t2tb992 x))))

(declare-fun tb2t992 (uni) (set (set (tuple21 (set (tuple21 a b))
  (tuple21 (tuple21 a c) (tuple21 b d))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a b)) (tuple21 (tuple21 a c)
  (tuple21 b d)))))))
  (! (= (tb2t992 (t2tb992 i)) i) :pattern ((t2tb992 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (set1
     (tuple2 (set1 (tuple2 a1 b1)) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))))
     j) (= (t2tb992 (tb2t992 j)) j)) :pattern ((t2tb992 (tb2t992 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a b)))) (v (set (tuple21 (tuple21 a c)
  (tuple21 b d)))) (r (set (tuple21 (set (tuple21 a b)) (tuple21 (tuple21 a
  c) (tuple21 b d))))))
  (= (mem
  (set1
  (tuple2 (set1 (tuple2 a1 b1)) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))))
  (t2tb861 r)
  (relation (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (set1 (tuple2 a1 b1))
  (t2tb10 u) (t2tb686 v)))
  (forall ((x (set (tuple21 a b))) (y (tuple21 (tuple21 a c) (tuple21 b d))))
  (=> (mem
  (tuple2 (set1 (tuple2 a1 b1)) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
  (Tuple2 (set1 (tuple2 a1 b1)) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))
  (t2tb11 x) (t2tb691 y)) (t2tb861 r)) (and (mem4 x u) (mem24 y v)))))))

(declare-fun t2tb994 ((set (set (tuple21 (set (tuple21 a b)) (set (tuple21 c
  d)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a b)) (set (tuple21 c d)))))))
  (sort (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 c1 d1)))))
  (t2tb994 x))))

(declare-fun tb2t994 (uni) (set (set (tuple21 (set (tuple21 a b))
  (set (tuple21 c d))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a b)) (set (tuple21 c d)))))))
  (! (= (tb2t994 (t2tb994 i)) i) :pattern ((t2tb994 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 c1 d1))))) j)
     (= (t2tb994 (tb2t994 j)) j)) :pattern ((t2tb994 (tb2t994 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a b)))) (v (set (set (tuple21 c d))))
  (r (set (tuple21 (set (tuple21 a b)) (set (tuple21 c d))))))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 c1 d1))))
  (t2tb865 r)
  (relation (set1 (tuple2 c1 d1)) (set1 (tuple2 a1 b1)) (t2tb10 u)
  (t2tb688 v)))
  (forall ((x (set (tuple21 a b))) (y (set (tuple21 c d))))
  (=> (mem (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 c1 d1)))
  (Tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 c1 d1)) (t2tb11 x) (t2tb689 y))
  (t2tb865 r)) (and (mem4 x u) (mem22 y v)))))))

(declare-fun t2tb995 ((set (set (tuple21 (set (tuple21 a b)) (tuple21 c
  d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a b)) (tuple21 c d)))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 c1 d1)))) (t2tb995 x))))

(declare-fun tb2t995 (uni) (set (set (tuple21 (set (tuple21 a b)) (tuple21 c
  d)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a b)) (tuple21 c d))))))
  (! (= (tb2t995 (t2tb995 i)) i) :pattern ((t2tb995 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 c1 d1)))) j)
     (= (t2tb995 (tb2t995 j)) j)) :pattern ((t2tb995 (tb2t995 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a b)))) (v (set (tuple21 c d)))
  (r (set (tuple21 (set (tuple21 a b)) (tuple21 c d)))))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 c1 d1))) (t2tb867 r)
  (relation (tuple2 c1 d1) (set1 (tuple2 a1 b1)) (t2tb10 u) (t2tb689 v)))
  (forall ((x (set (tuple21 a b))) (y (tuple21 c d)))
  (=> (mem (tuple2 (set1 (tuple2 a1 b1)) (tuple2 c1 d1))
  (Tuple2 (set1 (tuple2 a1 b1)) (tuple2 c1 d1) (t2tb11 x) (t2tb693 y))
  (t2tb867 r)) (and (mem4 x u) (mem21 y v)))))))

(declare-fun t2tb996 ((set (set (tuple21 (set (tuple21 a b)) d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a b)) d))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) d1))) (t2tb996 x))))

(declare-fun tb2t996 (uni) (set (set (tuple21 (set (tuple21 a b)) d))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a b)) d)))))
  (! (= (tb2t996 (t2tb996 i)) i) :pattern ((t2tb996 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) d1))) j)
     (= (t2tb996 (tb2t996 j)) j)) :pattern ((t2tb996 (tb2t996 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a b)))) (v (set d))
  (r (set (tuple21 (set (tuple21 a b)) d))))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 b1)) d1)) (t2tb869 r)
  (relation d1 (set1 (tuple2 a1 b1)) (t2tb10 u) (t2tb690 v)))
  (forall ((x (set (tuple21 a b))) (y d))
  (=> (mem (tuple2 (set1 (tuple2 a1 b1)) d1)
  (Tuple2 (set1 (tuple2 a1 b1)) d1 (t2tb11 x) (t2tb694 y)) (t2tb869 r))
  (and (mem4 x u) (mem20 y v)))))))

(declare-fun t2tb314 ((set (set (tuple21 (set (tuple21 a b)) c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a b)) c))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) c1))) (t2tb314 x))))

(declare-fun tb2t314 (uni) (set (set (tuple21 (set (tuple21 a b)) c))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a b)) c)))))
  (! (= (tb2t314 (t2tb314 i)) i) :pattern ((t2tb314 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) c1))) j)
     (= (t2tb314 (tb2t314 j)) j)) :pattern ((t2tb314 (tb2t314 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a b)))) (v (set c))
  (r (set (tuple21 (set (tuple21 a b)) c))))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 b1)) c1)) (t2tb234 r)
  (relation c1 (set1 (tuple2 a1 b1)) (t2tb10 u) (t2tb132 v)))
  (forall ((x (set (tuple21 a b))) (y c))
  (=> (mem (tuple2 (set1 (tuple2 a1 b1)) c1)
  (Tuple2 (set1 (tuple2 a1 b1)) c1 (t2tb11 x) (t2tb135 y)) (t2tb234 r))
  (and (mem4 x u) (mem7 y v)))))))

(declare-fun t2tb45 ((set (set (tuple21 (set (tuple21 a b)) (set (tuple21 a
  b)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a b)) (set (tuple21 a b)))))))
  (sort (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1)))))
  (t2tb45 x))))

(declare-fun tb2t45 (uni) (set (set (tuple21 (set (tuple21 a b))
  (set (tuple21 a b))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a b)) (set (tuple21 a b)))))))
  (! (= (tb2t45 (t2tb45 i)) i) :pattern ((t2tb45 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1))))) j)
     (= (t2tb45 (tb2t45 j)) j)) :pattern ((t2tb45 (tb2t45 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a b)))) (v (set (set (tuple21 a b))))
  (r (set (tuple21 (set (tuple21 a b)) (set (tuple21 a b))))))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1))))
  (t2tb15 r)
  (relation (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1)) (t2tb10 u)
  (t2tb10 v)))
  (forall ((x (set (tuple21 a b))) (y (set (tuple21 a b))))
  (=> (mem (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1)))
  (Tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1)) (t2tb11 x) (t2tb11 y))
  (t2tb15 r)) (and (mem4 x u) (mem4 y v)))))))

(declare-fun t2tb46 ((set (set (tuple21 (set (tuple21 a b)) (tuple21 a
  b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a b)) (tuple21 a b)))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 b1)))) (t2tb46 x))))

(declare-fun tb2t46 (uni) (set (set (tuple21 (set (tuple21 a b)) (tuple21 a
  b)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a b)) (tuple21 a b))))))
  (! (= (tb2t46 (t2tb46 i)) i) :pattern ((t2tb46 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 b1)))) j)
     (= (t2tb46 (tb2t46 j)) j)) :pattern ((t2tb46 (tb2t46 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a b)))) (v (set (tuple21 a b)))
  (r (set (tuple21 (set (tuple21 a b)) (tuple21 a b)))))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 b1))) (t2tb17 r)
  (relation (tuple2 a1 b1) (set1 (tuple2 a1 b1)) (t2tb10 u) (t2tb11 v)))
  (forall ((x (set (tuple21 a b))) (y (tuple21 a b)))
  (=> (mem (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 b1))
  (Tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 b1) (t2tb11 x) (t2tb13 y))
  (t2tb17 r)) (and (mem4 x u) (mem3 y v)))))))

(declare-fun t2tb47 ((set (set (tuple21 (set (tuple21 a b)) b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a b)) b))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) b1))) (t2tb47 x))))

(declare-fun tb2t47 (uni) (set (set (tuple21 (set (tuple21 a b)) b))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a b)) b)))))
  (! (= (tb2t47 (t2tb47 i)) i) :pattern ((t2tb47 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) b1))) j)
     (= (t2tb47 (tb2t47 j)) j)) :pattern ((t2tb47 (tb2t47 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a b)))) (v (set b))
  (r (set (tuple21 (set (tuple21 a b)) b))))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 b1)) b1)) (t2tb19 r)
  (relation b1 (set1 (tuple2 a1 b1)) (t2tb10 u) (t2tb12 v)))
  (forall ((x (set (tuple21 a b))) (y b))
  (=> (mem (tuple2 (set1 (tuple2 a1 b1)) b1)
  (Tuple2 (set1 (tuple2 a1 b1)) b1 (t2tb11 x) (t2tb14 y)) (t2tb19 r))
  (and (mem4 x u) (mem2 y v)))))))

(declare-fun t2tb48 ((set (set (tuple21 (set (tuple21 a b)) a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a b)) a))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) a1))) (t2tb48 x))))

(declare-fun tb2t48 (uni) (set (set (tuple21 (set (tuple21 a b)) a))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a b)) a)))))
  (! (= (tb2t48 (t2tb48 i)) i) :pattern ((t2tb48 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) a1))) j)
     (= (t2tb48 (tb2t48 j)) j)) :pattern ((t2tb48 (tb2t48 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a b)))) (v (set a))
  (r (set (tuple21 (set (tuple21 a b)) a))))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 b1)) a1)) (t2tb22 r)
  (relation a1 (set1 (tuple2 a1 b1)) (t2tb10 u) (t2tb1 v)))
  (forall ((x (set (tuple21 a b))) (y a))
  (=> (mem (tuple2 (set1 (tuple2 a1 b1)) a1)
  (Tuple2 (set1 (tuple2 a1 b1)) a1 (t2tb11 x) (t2tb2 y)) (t2tb22 r))
  (and (mem4 x u) (mem1 y v)))))))

;; mem_relation
  (assert
  (forall ((b2 ty))
  (forall ((u (set (set (tuple21 a b)))) (v uni) (r uni))
  (and
  (=> (mem (set1 (tuple2 (set1 (tuple2 a1 b1)) b2)) r
  (relation b2 (set1 (tuple2 a1 b1)) (t2tb10 u) v))
  (forall ((x (set (tuple21 a b))) (y uni))
  (=> (mem (tuple2 (set1 (tuple2 a1 b1)) b2)
  (Tuple2 (set1 (tuple2 a1 b1)) b2 (t2tb11 x) y) r)
  (and (mem4 x u) (mem b2 y v)))))
  (=>
  (forall ((x (set (tuple21 a b))) (y uni))
  (=> (sort b2 y)
  (=> (mem (tuple2 (set1 (tuple2 a1 b1)) b2)
  (Tuple2 (set1 (tuple2 a1 b1)) b2 (t2tb11 x) y) r)
  (and (mem4 x u) (mem b2 y v))))) (mem
  (set1 (tuple2 (set1 (tuple2 a1 b1)) b2)) r
  (relation b2 (set1 (tuple2 a1 b1)) (t2tb10 u) v)))))))

(declare-fun t2tb998 ((set (set (tuple21 (tuple21 a b) (tuple21 (tuple21 a c)
  (tuple21 b d)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a b) (tuple21 (tuple21 a c)
  (tuple21 b d))))))) (sort
  (set1
  (set1 (tuple2 (tuple2 a1 b1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))))
  (t2tb998 x))))

(declare-fun tb2t998 (uni) (set (set (tuple21 (tuple21 a b)
  (tuple21 (tuple21 a c) (tuple21 b d))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a b) (tuple21 (tuple21 a c)
  (tuple21 b d)))))))
  (! (= (tb2t998 (t2tb998 i)) i) :pattern ((t2tb998 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (set1 (tuple2 (tuple2 a1 b1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))))
     j) (= (t2tb998 (tb2t998 j)) j)) :pattern ((t2tb998 (tb2t998 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a b))) (v (set (tuple21 (tuple21 a c) (tuple21 b
  d)))) (r (set (tuple21 (tuple21 a b) (tuple21 (tuple21 a c) (tuple21 b
  d))))))
  (= (mem
  (set1 (tuple2 (tuple2 a1 b1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))))
  (t2tb873 r)
  (relation (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 a1 b1) (t2tb11 u)
  (t2tb686 v)))
  (forall ((x (tuple21 a b)) (y (tuple21 (tuple21 a c) (tuple21 b d))))
  (=> (mem (tuple2 (tuple2 a1 b1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
  (Tuple2 (tuple2 a1 b1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb13 x)
  (t2tb691 y)) (t2tb873 r)) (and (mem3 x u) (mem24 y v)))))))

(declare-fun t2tb1000 ((set (set (tuple21 (tuple21 a b) (set (tuple21 c
  d)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a b) (set (tuple21 c d))))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 b1) (set1 (tuple2 c1 d1))))) (t2tb1000 x))))

(declare-fun tb2t1000 (uni) (set (set (tuple21 (tuple21 a b) (set (tuple21 c
  d))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a b) (set (tuple21 c d)))))))
  (! (= (tb2t1000 (t2tb1000 i)) i) :pattern ((t2tb1000 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 b1) (set1 (tuple2 c1 d1))))) j)
     (= (t2tb1000 (tb2t1000 j)) j)) :pattern ((t2tb1000 (tb2t1000 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a b))) (v (set (set (tuple21 c d))))
  (r (set (tuple21 (tuple21 a b) (set (tuple21 c d))))))
  (= (mem (set1 (tuple2 (tuple2 a1 b1) (set1 (tuple2 c1 d1)))) (t2tb877 r)
  (relation (set1 (tuple2 c1 d1)) (tuple2 a1 b1) (t2tb11 u) (t2tb688 v)))
  (forall ((x (tuple21 a b)) (y (set (tuple21 c d))))
  (=> (mem (tuple2 (tuple2 a1 b1) (set1 (tuple2 c1 d1)))
  (Tuple2 (tuple2 a1 b1) (set1 (tuple2 c1 d1)) (t2tb13 x) (t2tb689 y))
  (t2tb877 r)) (and (mem3 x u) (mem22 y v)))))))

(declare-fun t2tb1001 ((set (set (tuple21 (tuple21 a b) (tuple21 c
  d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a b) (tuple21 c d)))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)))) (t2tb1001 x))))

(declare-fun tb2t1001 (uni) (set (set (tuple21 (tuple21 a b) (tuple21 c
  d)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a b) (tuple21 c d))))))
  (! (= (tb2t1001 (t2tb1001 i)) i) :pattern ((t2tb1001 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)))) j)
     (= (t2tb1001 (tb2t1001 j)) j)) :pattern ((t2tb1001 (tb2t1001 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a b))) (v (set (tuple21 c d)))
  (r (set (tuple21 (tuple21 a b) (tuple21 c d)))))
  (= (mem (set1 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1))) (t2tb879 r)
  (relation (tuple2 c1 d1) (tuple2 a1 b1) (t2tb11 u) (t2tb689 v)))
  (forall ((x (tuple21 a b)) (y (tuple21 c d)))
  (=> (mem (tuple2 (tuple2 a1 b1) (tuple2 c1 d1))
  (Tuple2 (tuple2 a1 b1) (tuple2 c1 d1) (t2tb13 x) (t2tb693 y)) (t2tb879 r))
  (and (mem3 x u) (mem21 y v)))))))

(declare-fun t2tb1002 ((set (set (tuple21 (tuple21 a b) d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a b) d))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 b1) d1))) (t2tb1002 x))))

(declare-fun tb2t1002 (uni) (set (set (tuple21 (tuple21 a b) d))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a b) d)))))
  (! (= (tb2t1002 (t2tb1002 i)) i) :pattern ((t2tb1002 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 b1) d1))) j)
     (= (t2tb1002 (tb2t1002 j)) j)) :pattern ((t2tb1002 (tb2t1002 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a b))) (v (set d)) (r (set (tuple21 (tuple21 a b)
  d))))
  (= (mem (set1 (tuple2 (tuple2 a1 b1) d1)) (t2tb881 r)
  (relation d1 (tuple2 a1 b1) (t2tb11 u) (t2tb690 v)))
  (forall ((x (tuple21 a b)) (y d))
  (=> (mem (tuple2 (tuple2 a1 b1) d1)
  (Tuple2 (tuple2 a1 b1) d1 (t2tb13 x) (t2tb694 y)) (t2tb881 r))
  (and (mem3 x u) (mem20 y v)))))))

(declare-fun t2tb319 ((set (set (tuple21 (tuple21 a b) c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a b) c))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 b1) c1))) (t2tb319 x))))

(declare-fun tb2t319 (uni) (set (set (tuple21 (tuple21 a b) c))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a b) c)))))
  (! (= (tb2t319 (t2tb319 i)) i) :pattern ((t2tb319 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 b1) c1))) j)
     (= (t2tb319 (tb2t319 j)) j)) :pattern ((t2tb319 (tb2t319 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a b))) (v (set c)) (r (set (tuple21 (tuple21 a b)
  c))))
  (= (mem (set1 (tuple2 (tuple2 a1 b1) c1)) (t2tb245 r)
  (relation c1 (tuple2 a1 b1) (t2tb11 u) (t2tb132 v)))
  (forall ((x (tuple21 a b)) (y c))
  (=> (mem (tuple2 (tuple2 a1 b1) c1)
  (Tuple2 (tuple2 a1 b1) c1 (t2tb13 x) (t2tb135 y)) (t2tb245 r))
  (and (mem3 x u) (mem7 y v)))))))

(declare-fun t2tb49 ((set (set (tuple21 (tuple21 a b) (set (tuple21 a
  b)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a b) (set (tuple21 a b))))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 b1))))) (t2tb49 x))))

(declare-fun tb2t49 (uni) (set (set (tuple21 (tuple21 a b) (set (tuple21 a
  b))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a b) (set (tuple21 a b)))))))
  (! (= (tb2t49 (t2tb49 i)) i) :pattern ((t2tb49 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 b1))))) j)
     (= (t2tb49 (tb2t49 j)) j)) :pattern ((t2tb49 (tb2t49 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a b))) (v (set (set (tuple21 a b))))
  (r (set (tuple21 (tuple21 a b) (set (tuple21 a b))))))
  (= (mem (set1 (tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 b1)))) (t2tb23 r)
  (relation (set1 (tuple2 a1 b1)) (tuple2 a1 b1) (t2tb11 u) (t2tb10 v)))
  (forall ((x (tuple21 a b)) (y (set (tuple21 a b))))
  (=> (mem (tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 b1)))
  (Tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 b1)) (t2tb13 x) (t2tb11 y))
  (t2tb23 r)) (and (mem3 x u) (mem4 y v)))))))

(declare-fun t2tb50 ((set (set (tuple21 (tuple21 a b) (tuple21 a b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a b) (tuple21 a b)))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 b1) (tuple2 a1 b1)))) (t2tb50 x))))

(declare-fun tb2t50 (uni) (set (set (tuple21 (tuple21 a b) (tuple21 a b)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a b) (tuple21 a b))))))
  (! (= (tb2t50 (t2tb50 i)) i) :pattern ((t2tb50 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 b1) (tuple2 a1 b1)))) j)
     (= (t2tb50 (tb2t50 j)) j)) :pattern ((t2tb50 (tb2t50 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a b))) (v (set (tuple21 a b)))
  (r (set (tuple21 (tuple21 a b) (tuple21 a b)))))
  (= (mem (set1 (tuple2 (tuple2 a1 b1) (tuple2 a1 b1))) (t2tb25 r)
  (relation (tuple2 a1 b1) (tuple2 a1 b1) (t2tb11 u) (t2tb11 v)))
  (forall ((x (tuple21 a b)) (y (tuple21 a b)))
  (=> (mem (tuple2 (tuple2 a1 b1) (tuple2 a1 b1))
  (Tuple2 (tuple2 a1 b1) (tuple2 a1 b1) (t2tb13 x) (t2tb13 y)) (t2tb25 r))
  (and (mem3 x u) (mem3 y v)))))))

(declare-fun t2tb51 ((set (set (tuple21 (tuple21 a b) b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a b) b))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 b1) b1))) (t2tb51 x))))

(declare-fun tb2t51 (uni) (set (set (tuple21 (tuple21 a b) b))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a b) b)))))
  (! (= (tb2t51 (t2tb51 i)) i) :pattern ((t2tb51 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 b1) b1))) j)
     (= (t2tb51 (tb2t51 j)) j)) :pattern ((t2tb51 (tb2t51 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a b))) (v (set b)) (r (set (tuple21 (tuple21 a b)
  b))))
  (= (mem (set1 (tuple2 (tuple2 a1 b1) b1)) (t2tb27 r)
  (relation b1 (tuple2 a1 b1) (t2tb11 u) (t2tb12 v)))
  (forall ((x (tuple21 a b)) (y b))
  (=> (mem (tuple2 (tuple2 a1 b1) b1)
  (Tuple2 (tuple2 a1 b1) b1 (t2tb13 x) (t2tb14 y)) (t2tb27 r))
  (and (mem3 x u) (mem2 y v)))))))

(declare-fun t2tb52 ((set (set (tuple21 (tuple21 a b) a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a b) a))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 b1) a1))) (t2tb52 x))))

(declare-fun tb2t52 (uni) (set (set (tuple21 (tuple21 a b) a))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a b) a)))))
  (! (= (tb2t52 (t2tb52 i)) i) :pattern ((t2tb52 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 b1) a1))) j)
     (= (t2tb52 (tb2t52 j)) j)) :pattern ((t2tb52 (tb2t52 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a b))) (v (set a)) (r (set (tuple21 (tuple21 a b)
  a))))
  (= (mem (set1 (tuple2 (tuple2 a1 b1) a1)) (t2tb29 r)
  (relation a1 (tuple2 a1 b1) (t2tb11 u) (t2tb1 v)))
  (forall ((x (tuple21 a b)) (y a))
  (=> (mem (tuple2 (tuple2 a1 b1) a1)
  (Tuple2 (tuple2 a1 b1) a1 (t2tb13 x) (t2tb2 y)) (t2tb29 r))
  (and (mem3 x u) (mem1 y v)))))))

;; mem_relation
  (assert
  (forall ((b2 ty))
  (forall ((u (set (tuple21 a b))) (v uni) (r uni))
  (and
  (=> (mem (set1 (tuple2 (tuple2 a1 b1) b2)) r
  (relation b2 (tuple2 a1 b1) (t2tb11 u) v))
  (forall ((x (tuple21 a b)) (y uni))
  (=> (mem (tuple2 (tuple2 a1 b1) b2) (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) y)
  r) (and (mem3 x u) (mem b2 y v)))))
  (=>
  (forall ((x (tuple21 a b)) (y uni))
  (=> (sort b2 y)
  (=> (mem (tuple2 (tuple2 a1 b1) b2) (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) y)
  r) (and (mem3 x u) (mem b2 y v))))) (mem (set1 (tuple2 (tuple2 a1 b1) b2))
  r (relation b2 (tuple2 a1 b1) (t2tb11 u) v)))))))

(declare-fun t2tb1004 ((set (set (tuple21 b (tuple21 (tuple21 a c) (tuple21 b
  d)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 b (tuple21 (tuple21 a c) (tuple21 b d)))))))
  (sort (set1 (set1 (tuple2 b1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))))
  (t2tb1004 x))))

(declare-fun tb2t1004 (uni) (set (set (tuple21 b (tuple21 (tuple21 a c)
  (tuple21 b d))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 b (tuple21 (tuple21 a c) (tuple21 b d)))))))
  (! (= (tb2t1004 (t2tb1004 i)) i) :pattern ((t2tb1004 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 b1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))))) j)
     (= (t2tb1004 (tb2t1004 j)) j)) :pattern ((t2tb1004 (tb2t1004 j))) )))

;; mem_relation
  (assert
  (forall ((u (set b)) (v (set (tuple21 (tuple21 a c) (tuple21 b d))))
  (r (set (tuple21 b (tuple21 (tuple21 a c) (tuple21 b d))))))
  (= (mem (set1 (tuple2 b1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))))
  (t2tb885 r)
  (relation (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) b1 (t2tb12 u) (t2tb686 v)))
  (forall ((x b) (y (tuple21 (tuple21 a c) (tuple21 b d))))
  (=> (mem (tuple2 b1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
  (Tuple2 b1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb14 x) (t2tb691 y))
  (t2tb885 r)) (and (mem2 x u) (mem24 y v)))))))

(declare-fun t2tb1006 ((set (set (tuple21 b (set (tuple21 c d)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 b (set (tuple21 c d))))))) (sort
  (set1 (set1 (tuple2 b1 (set1 (tuple2 c1 d1))))) (t2tb1006 x))))

(declare-fun tb2t1006 (uni) (set (set (tuple21 b (set (tuple21 c d))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 b (set (tuple21 c d)))))))
  (! (= (tb2t1006 (t2tb1006 i)) i) :pattern ((t2tb1006 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 b1 (set1 (tuple2 c1 d1))))) j)
     (= (t2tb1006 (tb2t1006 j)) j)) :pattern ((t2tb1006 (tb2t1006 j))) )))

;; mem_relation
  (assert
  (forall ((u (set b)) (v (set (set (tuple21 c d)))) (r (set (tuple21 b
  (set (tuple21 c d))))))
  (= (mem (set1 (tuple2 b1 (set1 (tuple2 c1 d1)))) (t2tb889 r)
  (relation (set1 (tuple2 c1 d1)) b1 (t2tb12 u) (t2tb688 v)))
  (forall ((x b) (y (set (tuple21 c d))))
  (=> (mem (tuple2 b1 (set1 (tuple2 c1 d1)))
  (Tuple2 b1 (set1 (tuple2 c1 d1)) (t2tb14 x) (t2tb689 y)) (t2tb889 r))
  (and (mem2 x u) (mem22 y v)))))))

(declare-fun t2tb1007 ((set (set (tuple21 b (tuple21 c d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 b (tuple21 c d)))))) (sort
  (set1 (set1 (tuple2 b1 (tuple2 c1 d1)))) (t2tb1007 x))))

(declare-fun tb2t1007 (uni) (set (set (tuple21 b (tuple21 c d)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 b (tuple21 c d))))))
  (! (= (tb2t1007 (t2tb1007 i)) i) :pattern ((t2tb1007 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 b1 (tuple2 c1 d1)))) j)
     (= (t2tb1007 (tb2t1007 j)) j)) :pattern ((t2tb1007 (tb2t1007 j))) )))

;; mem_relation
  (assert
  (forall ((u (set b)) (v (set (tuple21 c d))) (r (set (tuple21 b (tuple21 c
  d)))))
  (= (mem (set1 (tuple2 b1 (tuple2 c1 d1))) (t2tb891 r)
  (relation (tuple2 c1 d1) b1 (t2tb12 u) (t2tb689 v)))
  (forall ((x b) (y (tuple21 c d)))
  (=> (mem (tuple2 b1 (tuple2 c1 d1))
  (Tuple2 b1 (tuple2 c1 d1) (t2tb14 x) (t2tb693 y)) (t2tb891 r))
  (and (mem2 x u) (mem21 y v)))))))

(declare-fun t2tb906 ((set (set (tuple21 b d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 b d))))) (sort (set1 (set1 (tuple2 b1 d1)))
  (t2tb906 x))))

(declare-fun tb2t906 (uni) (set (set (tuple21 b d))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 b d)))))
  (! (= (tb2t906 (t2tb906 i)) i) :pattern ((t2tb906 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 b1 d1))) j) (= (t2tb906 (tb2t906 j)) j)) :pattern (
  (t2tb906 (tb2t906 j))) )))

;; mem_relation
  (assert
  (forall ((u (set b)) (v (set d)) (r (set (tuple21 b d))))
  (= (mem (set1 (tuple2 b1 d1)) (t2tb687 r)
  (relation d1 b1 (t2tb12 u) (t2tb690 v)))
  (forall ((x b) (y d))
  (=> (mem (tuple2 b1 d1) (Tuple2 b1 d1 (t2tb14 x) (t2tb694 y)) (t2tb687 r))
  (and (mem2 x u) (mem20 y v)))))))

(declare-fun t2tb130 ((set (set (tuple21 b c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 b c))))) (sort (set1 (set1 (tuple2 b1 c1)))
  (t2tb130 x))))

(declare-fun tb2t130 (uni) (set (set (tuple21 b c))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 b c)))))
  (! (= (tb2t130 (t2tb130 i)) i) :pattern ((t2tb130 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 b1 c1))) j) (= (t2tb130 (tb2t130 j)) j)) :pattern (
  (t2tb130 (tb2t130 j))) )))

;; mem_relation
  (assert
  (forall ((u (set b)) (v (set c)) (r (set (tuple21 b c))))
  (= (mem (set1 (tuple2 b1 c1)) (t2tb131 r)
  (relation c1 b1 (t2tb12 u) (t2tb132 v)))
  (forall ((x b) (y c))
  (=> (mem (tuple2 b1 c1) (Tuple2 b1 c1 (t2tb14 x) (t2tb135 y)) (t2tb131 r))
  (and (mem2 x u) (mem7 y v)))))))

(declare-fun t2tb53 ((set (set (tuple21 b (set (tuple21 a b)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 b (set (tuple21 a b))))))) (sort
  (set1 (set1 (tuple2 b1 (set1 (tuple2 a1 b1))))) (t2tb53 x))))

(declare-fun tb2t53 (uni) (set (set (tuple21 b (set (tuple21 a b))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 b (set (tuple21 a b)))))))
  (! (= (tb2t53 (t2tb53 i)) i) :pattern ((t2tb53 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 b1 (set1 (tuple2 a1 b1))))) j)
     (= (t2tb53 (tb2t53 j)) j)) :pattern ((t2tb53 (tb2t53 j))) )))

;; mem_relation
  (assert
  (forall ((u (set b)) (v (set (set (tuple21 a b)))) (r (set (tuple21 b
  (set (tuple21 a b))))))
  (= (mem (set1 (tuple2 b1 (set1 (tuple2 a1 b1)))) (t2tb31 r)
  (relation (set1 (tuple2 a1 b1)) b1 (t2tb12 u) (t2tb10 v)))
  (forall ((x b) (y (set (tuple21 a b))))
  (=> (mem (tuple2 b1 (set1 (tuple2 a1 b1)))
  (Tuple2 b1 (set1 (tuple2 a1 b1)) (t2tb14 x) (t2tb11 y)) (t2tb31 r))
  (and (mem2 x u) (mem4 y v)))))))

(declare-fun t2tb54 ((set (set (tuple21 b (tuple21 a b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 b (tuple21 a b)))))) (sort
  (set1 (set1 (tuple2 b1 (tuple2 a1 b1)))) (t2tb54 x))))

(declare-fun tb2t54 (uni) (set (set (tuple21 b (tuple21 a b)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 b (tuple21 a b))))))
  (! (= (tb2t54 (t2tb54 i)) i) :pattern ((t2tb54 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 b1 (tuple2 a1 b1)))) j)
     (= (t2tb54 (tb2t54 j)) j)) :pattern ((t2tb54 (tb2t54 j))) )))

;; mem_relation
  (assert
  (forall ((u (set b)) (v (set (tuple21 a b))) (r (set (tuple21 b (tuple21 a
  b)))))
  (= (mem (set1 (tuple2 b1 (tuple2 a1 b1))) (t2tb34 r)
  (relation (tuple2 a1 b1) b1 (t2tb12 u) (t2tb11 v)))
  (forall ((x b) (y (tuple21 a b)))
  (=> (mem (tuple2 b1 (tuple2 a1 b1))
  (Tuple2 b1 (tuple2 a1 b1) (t2tb14 x) (t2tb13 y)) (t2tb34 r))
  (and (mem2 x u) (mem3 y v)))))))

(declare-fun t2tb55 ((set (set (tuple21 b b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 b b))))) (sort (set1 (set1 (tuple2 b1 b1)))
  (t2tb55 x))))

(declare-fun tb2t55 (uni) (set (set (tuple21 b b))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 b b)))))
  (! (= (tb2t55 (t2tb55 i)) i) :pattern ((t2tb55 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 b1 b1))) j) (= (t2tb55 (tb2t55 j)) j)) :pattern (
  (t2tb55 (tb2t55 j))) )))

;; mem_relation
  (assert
  (forall ((u (set b)) (v (set b)) (r (set (tuple21 b b))))
  (= (mem (set1 (tuple2 b1 b1)) (t2tb35 r)
  (relation b1 b1 (t2tb12 u) (t2tb12 v)))
  (forall ((x b) (y b))
  (=> (mem (tuple2 b1 b1) (Tuple2 b1 b1 (t2tb14 x) (t2tb14 y)) (t2tb35 r))
  (and (mem2 x u) (mem2 y v)))))))

(declare-fun t2tb56 ((set (set (tuple21 b a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 b a))))) (sort (set1 (set1 (tuple2 b1 a1)))
  (t2tb56 x))))

(declare-fun tb2t56 (uni) (set (set (tuple21 b a))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 b a)))))
  (! (= (tb2t56 (t2tb56 i)) i) :pattern ((t2tb56 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 b1 a1))) j) (= (t2tb56 (tb2t56 j)) j)) :pattern (
  (t2tb56 (tb2t56 j))) )))

;; mem_relation
  (assert
  (forall ((u (set b)) (v (set a)) (r (set (tuple21 b a))))
  (= (mem (set1 (tuple2 b1 a1)) (t2tb37 r)
  (relation a1 b1 (t2tb12 u) (t2tb1 v)))
  (forall ((x b) (y a))
  (=> (mem (tuple2 b1 a1) (Tuple2 b1 a1 (t2tb14 x) (t2tb2 y)) (t2tb37 r))
  (and (mem2 x u) (mem1 y v)))))))

;; mem_relation
  (assert
  (forall ((b2 ty))
  (forall ((u (set b)) (v uni) (r uni))
  (and
  (=> (mem (set1 (tuple2 b1 b2)) r (relation b2 b1 (t2tb12 u) v))
  (forall ((x b) (y uni))
  (=> (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) y) r)
  (and (mem2 x u) (mem b2 y v)))))
  (=>
  (forall ((x b) (y uni))
  (=> (sort b2 y)
  (=> (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) y) r)
  (and (mem2 x u) (mem b2 y v))))) (mem (set1 (tuple2 b1 b2)) r
  (relation b2 b1 (t2tb12 u) v)))))))

(declare-fun t2tb1009 ((set (set (tuple21 a (tuple21 (tuple21 a c) (tuple21 b
  d)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 a (tuple21 (tuple21 a c) (tuple21 b d)))))))
  (sort (set1 (set1 (tuple2 a1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))))
  (t2tb1009 x))))

(declare-fun tb2t1009 (uni) (set (set (tuple21 a (tuple21 (tuple21 a c)
  (tuple21 b d))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 a (tuple21 (tuple21 a c) (tuple21 b d)))))))
  (! (= (tb2t1009 (t2tb1009 i)) i) :pattern ((t2tb1009 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 a1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))))) j)
     (= (t2tb1009 (tb2t1009 j)) j)) :pattern ((t2tb1009 (tb2t1009 j))) )))

;; mem_relation
  (assert
  (forall ((u (set a)) (v (set (tuple21 (tuple21 a c) (tuple21 b d))))
  (r (set (tuple21 a (tuple21 (tuple21 a c) (tuple21 b d))))))
  (= (mem (set1 (tuple2 a1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))))
  (t2tb895 r)
  (relation (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) a1 (t2tb1 u) (t2tb686 v)))
  (forall ((x a) (y (tuple21 (tuple21 a c) (tuple21 b d))))
  (=> (mem (tuple2 a1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
  (Tuple2 a1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb2 x) (t2tb691 y))
  (t2tb895 r)) (and (mem1 x u) (mem24 y v)))))))

(declare-fun t2tb1011 ((set (set (tuple21 a (set (tuple21 c d)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 a (set (tuple21 c d))))))) (sort
  (set1 (set1 (tuple2 a1 (set1 (tuple2 c1 d1))))) (t2tb1011 x))))

(declare-fun tb2t1011 (uni) (set (set (tuple21 a (set (tuple21 c d))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 a (set (tuple21 c d)))))))
  (! (= (tb2t1011 (t2tb1011 i)) i) :pattern ((t2tb1011 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 a1 (set1 (tuple2 c1 d1))))) j)
     (= (t2tb1011 (tb2t1011 j)) j)) :pattern ((t2tb1011 (tb2t1011 j))) )))

;; mem_relation
  (assert
  (forall ((u (set a)) (v (set (set (tuple21 c d)))) (r (set (tuple21 a
  (set (tuple21 c d))))))
  (= (mem (set1 (tuple2 a1 (set1 (tuple2 c1 d1)))) (t2tb899 r)
  (relation (set1 (tuple2 c1 d1)) a1 (t2tb1 u) (t2tb688 v)))
  (forall ((x a) (y (set (tuple21 c d))))
  (=> (mem (tuple2 a1 (set1 (tuple2 c1 d1)))
  (Tuple2 a1 (set1 (tuple2 c1 d1)) (t2tb2 x) (t2tb689 y)) (t2tb899 r))
  (and (mem1 x u) (mem22 y v)))))))

(declare-fun t2tb1012 ((set (set (tuple21 a (tuple21 c d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 a (tuple21 c d)))))) (sort
  (set1 (set1 (tuple2 a1 (tuple2 c1 d1)))) (t2tb1012 x))))

(declare-fun tb2t1012 (uni) (set (set (tuple21 a (tuple21 c d)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 a (tuple21 c d))))))
  (! (= (tb2t1012 (t2tb1012 i)) i) :pattern ((t2tb1012 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 a1 (tuple2 c1 d1)))) j)
     (= (t2tb1012 (tb2t1012 j)) j)) :pattern ((t2tb1012 (tb2t1012 j))) )))

;; mem_relation
  (assert
  (forall ((u (set a)) (v (set (tuple21 c d))) (r (set (tuple21 a (tuple21 c
  d)))))
  (= (mem (set1 (tuple2 a1 (tuple2 c1 d1))) (t2tb901 r)
  (relation (tuple2 c1 d1) a1 (t2tb1 u) (t2tb689 v)))
  (forall ((x a) (y (tuple21 c d)))
  (=> (mem (tuple2 a1 (tuple2 c1 d1))
  (Tuple2 a1 (tuple2 c1 d1) (t2tb2 x) (t2tb693 y)) (t2tb901 r))
  (and (mem1 x u) (mem21 y v)))))))

(declare-fun t2tb1013 ((set (set (tuple21 a d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 a d))))) (sort (set1 (set1 (tuple2 a1 d1)))
  (t2tb1013 x))))

(declare-fun tb2t1013 (uni) (set (set (tuple21 a d))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 a d)))))
  (! (= (tb2t1013 (t2tb1013 i)) i) :pattern ((t2tb1013 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 a1 d1))) j) (= (t2tb1013 (tb2t1013 j)) j)) :pattern (
  (t2tb1013 (tb2t1013 j))) )))

;; mem_relation
  (assert
  (forall ((u (set a)) (v (set d)) (r (set (tuple21 a d))))
  (= (mem (set1 (tuple2 a1 d1)) (t2tb903 r)
  (relation d1 a1 (t2tb1 u) (t2tb690 v)))
  (forall ((x a) (y d))
  (=> (mem (tuple2 a1 d1) (Tuple2 a1 d1 (t2tb2 x) (t2tb694 y)) (t2tb903 r))
  (and (mem1 x u) (mem20 y v)))))))

(declare-fun t2tb128 ((set (set (tuple21 a c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 a c))))) (sort (set1 (set1 (tuple2 a1 c1)))
  (t2tb128 x))))

(declare-fun tb2t128 (uni) (set (set (tuple21 a c))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 a c)))))
  (! (= (tb2t128 (t2tb128 i)) i) :pattern ((t2tb128 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 a1 c1))) j) (= (t2tb128 (tb2t128 j)) j)) :pattern (
  (t2tb128 (tb2t128 j))) )))

;; mem_relation
  (assert
  (forall ((u (set a)) (v (set c)) (r (set (tuple21 a c))))
  (= (mem (set1 (tuple2 a1 c1)) (t2tb129 r)
  (relation c1 a1 (t2tb1 u) (t2tb132 v)))
  (forall ((x a) (y c))
  (=> (mem (tuple2 a1 c1) (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y)) (t2tb129 r))
  (and (mem1 x u) (mem7 y v)))))))

(declare-fun t2tb57 ((set (set (tuple21 a (set (tuple21 a b)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 a (set (tuple21 a b))))))) (sort
  (set1 (set1 (tuple2 a1 (set1 (tuple2 a1 b1))))) (t2tb57 x))))

(declare-fun tb2t57 (uni) (set (set (tuple21 a (set (tuple21 a b))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 a (set (tuple21 a b)))))))
  (! (= (tb2t57 (t2tb57 i)) i) :pattern ((t2tb57 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 a1 (set1 (tuple2 a1 b1))))) j)
     (= (t2tb57 (tb2t57 j)) j)) :pattern ((t2tb57 (tb2t57 j))) )))

;; mem_relation
  (assert
  (forall ((u (set a)) (v (set (set (tuple21 a b)))) (r (set (tuple21 a
  (set (tuple21 a b))))))
  (= (mem (set1 (tuple2 a1 (set1 (tuple2 a1 b1)))) (t2tb39 r)
  (relation (set1 (tuple2 a1 b1)) a1 (t2tb1 u) (t2tb10 v)))
  (forall ((x a) (y (set (tuple21 a b))))
  (=> (mem (tuple2 a1 (set1 (tuple2 a1 b1)))
  (Tuple2 a1 (set1 (tuple2 a1 b1)) (t2tb2 x) (t2tb11 y)) (t2tb39 r))
  (and (mem1 x u) (mem4 y v)))))))

(declare-fun t2tb58 ((set (set (tuple21 a (tuple21 a b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 a (tuple21 a b)))))) (sort
  (set1 (set1 (tuple2 a1 (tuple2 a1 b1)))) (t2tb58 x))))

(declare-fun tb2t58 (uni) (set (set (tuple21 a (tuple21 a b)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 a (tuple21 a b))))))
  (! (= (tb2t58 (t2tb58 i)) i) :pattern ((t2tb58 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 a1 (tuple2 a1 b1)))) j)
     (= (t2tb58 (tb2t58 j)) j)) :pattern ((t2tb58 (tb2t58 j))) )))

;; mem_relation
  (assert
  (forall ((u (set a)) (v (set (tuple21 a b))) (r (set (tuple21 a (tuple21 a
  b)))))
  (= (mem (set1 (tuple2 a1 (tuple2 a1 b1))) (t2tb41 r)
  (relation (tuple2 a1 b1) a1 (t2tb1 u) (t2tb11 v)))
  (forall ((x a) (y (tuple21 a b)))
  (=> (mem (tuple2 a1 (tuple2 a1 b1))
  (Tuple2 a1 (tuple2 a1 b1) (t2tb2 x) (t2tb13 y)) (t2tb41 r))
  (and (mem1 x u) (mem3 y v)))))))

;; mem_relation
  (assert
  (forall ((u (set a)) (v (set b)) (r (set (tuple21 a b))))
  (= (mem4 r (relation1 u v))
  (forall ((x a) (y b))
  (=> (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y))) r)
  (and (mem1 x u) (mem2 y v)))))))

(declare-fun t2tb3 ((set (set (tuple21 a a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 a a))))) (sort (set1 (set1 (tuple2 a1 a1)))
  (t2tb3 x))))

(declare-fun tb2t3 (uni) (set (set (tuple21 a a))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 a a)))))
  (! (= (tb2t3 (t2tb3 i)) i) :pattern ((t2tb3 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 a1 a1))) j) (= (t2tb3 (tb2t3 j)) j)) :pattern (
  (t2tb3 (tb2t3 j))) )))

;; mem_relation
  (assert
  (forall ((u (set a)) (v (set a)) (r (set (tuple21 a a))))
  (= (mem (set1 (tuple2 a1 a1)) (t2tb4 r)
  (relation a1 a1 (t2tb1 u) (t2tb1 v)))
  (forall ((x a) (y a))
  (=> (mem (tuple2 a1 a1) (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y)) (t2tb4 r))
  (and (mem1 x u) (mem1 y v)))))))

;; mem_relation
  (assert
  (forall ((b2 ty))
  (forall ((u (set a)) (v uni) (r uni))
  (and
  (=> (mem (set1 (tuple2 a1 b2)) r (relation b2 a1 (t2tb1 u) v))
  (forall ((x a) (y uni))
  (=> (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) y) r)
  (and (mem1 x u) (mem b2 y v)))))
  (=>
  (forall ((x a) (y uni))
  (=> (sort b2 y)
  (=> (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) y) r)
  (and (mem1 x u) (mem b2 y v))))) (mem (set1 (tuple2 a1 b2)) r
  (relation b2 a1 (t2tb1 u) v)))))))

;; mem_relation
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((u uni) (v uni) (r uni))
  (and
  (=> (mem (set1 (tuple2 a2 b2)) r (relation b2 a2 u v))
  (forall ((x uni) (y uni))
  (=> (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) r)
  (and (mem a2 x u) (mem b2 y v)))))
  (=>
  (forall ((x uni) (y uni))
  (=> (sort a2 x)
  (=> (sort b2 y)
  (=> (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) r)
  (and (mem a2 x u) (mem b2 y v)))))) (mem (set1 (tuple2 a2 b2)) r
  (relation b2 a2 u v)))))))

(declare-fun inverse (ty ty uni) uni)

;; inverse_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni)) (sort (set1 (tuple2 b2 a2)) (inverse b2 a2 x)))))

(declare-fun t2tb755 ((set (tuple21 (tuple21 b d) (tuple21 a c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b d) (tuple21 a c))))) (sort
  (set1 (tuple2 (tuple2 b1 d1) (tuple2 a1 c1))) (t2tb755 x))))

(declare-fun tb2t755 (uni) (set (tuple21 (tuple21 b d) (tuple21 a c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b d) (tuple21 a c)))))
  (! (= (tb2t755 (t2tb755 i)) i) :pattern ((t2tb755 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 d1) (tuple2 a1 c1))) j)
     (= (t2tb755 (tb2t755 j)) j)) :pattern ((t2tb755 (tb2t755 j))) )))

(declare-fun t2tb756 ((tuple21 (tuple21 b d) (tuple21 a c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b d) (tuple21 a c)))) (sort
  (tuple2 (tuple2 b1 d1) (tuple2 a1 c1)) (t2tb756 x))))

(declare-fun tb2t756 (uni) (tuple21 (tuple21 b d) (tuple21 a c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b d) (tuple21 a c))))
  (! (= (tb2t756 (t2tb756 i)) i) :pattern ((t2tb756 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 d1) (tuple2 a1 c1)) j)
     (= (t2tb756 (tb2t756 j)) j)) :pattern ((t2tb756 (tb2t756 j))) )))

;; mem_inverse
  (assert
  (forall ((p (set (tuple21 (tuple21 b d) (tuple21 a c)))) (x (tuple21 a c))
  (y (tuple21 b d)))
  (= (mem24
  (tb2t691 (Tuple2 (tuple2 a1 c1) (tuple2 b1 d1) (t2tb133 x) (t2tb692 y)))
  (tb2t686 (inverse (tuple2 a1 c1) (tuple2 b1 d1) (t2tb755 p)))) (mem
  (tuple2 (tuple2 b1 d1) (tuple2 a1 c1))
  (Tuple2 (tuple2 b1 d1) (tuple2 a1 c1) (t2tb692 y) (t2tb133 x))
  (t2tb755 p)))))

;; mem_inverse
  (assert
  (forall ((p (set (tuple21 d c))) (x c) (y d))
  (= (mem21 (tb2t693 (Tuple2 c1 d1 (t2tb135 x) (t2tb694 y)))
  (tb2t689 (inverse c1 d1 (t2tb829 p)))) (mem (tuple2 d1 c1)
  (Tuple2 d1 c1 (t2tb694 y) (t2tb135 x)) (t2tb829 p)))))

;; mem_inverse
  (assert
  (forall ((p (set (tuple21 (tuple21 a c) (tuple21 b d)))) (x (tuple21 b d))
  (y (tuple21 a c)))
  (= (mem (tuple2 (tuple2 b1 d1) (tuple2 a1 c1))
  (Tuple2 (tuple2 b1 d1) (tuple2 a1 c1) (t2tb692 x) (t2tb133 y))
  (inverse (tuple2 b1 d1) (tuple2 a1 c1) (t2tb686 p))) (mem24
  (tb2t691 (Tuple2 (tuple2 a1 c1) (tuple2 b1 d1) (t2tb133 y) (t2tb692 x)))
  p))))

;; mem_inverse
  (assert
  (forall ((p (set (tuple21 c d))) (x d) (y c))
  (= (mem (tuple2 d1 c1) (Tuple2 d1 c1 (t2tb694 x) (t2tb135 y))
  (inverse d1 c1 (t2tb689 p))) (mem21
  (tb2t693 (Tuple2 c1 d1 (t2tb135 y) (t2tb694 x))) p))))

;; mem_inverse
  (assert
  (forall ((p (set (tuple21 b a))) (x a) (y b))
  (= (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y)))
  (tb2t11 (inverse a1 b1 (t2tb37 p)))) (mem (tuple2 b1 a1)
  (Tuple2 b1 a1 (t2tb14 y) (t2tb2 x)) (t2tb37 p)))))

;; mem_inverse
  (assert
  (forall ((p (set (tuple21 a b))) (x b) (y a))
  (= (mem (tuple2 b1 a1) (Tuple2 b1 a1 (t2tb14 x) (t2tb2 y))
  (inverse b1 a1 (t2tb11 p))) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 y) (t2tb14 x))) p))))

;; mem_inverse
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((p uni) (x uni) (y uni))
  (= (mem (tuple2 b2 a2) (Tuple2 b2 a2 x y) (inverse b2 a2 p)) (mem
  (tuple2 a2 b2) (Tuple2 a2 b2 y x) p)))))

(declare-fun dom (ty ty uni) uni)

;; dom_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni)) (sort (set1 a2) (dom b2 a2 x)))))

;; mem_dom
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (x (tuple21 (tuple21 a c) (tuple21 b d))))
  (and
  (=> (mem24 x (tb2t686 (dom b2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) p)))
  (exists ((b3 uni))
  (and (sort b2 b3) (mem (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) b2)
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) b2 (t2tb691 x) b3) p))))
  (=>
  (exists ((b3 uni)) (mem (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) b2)
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) b2 (t2tb691 x) b3) p))
  (mem24 x (tb2t686 (dom b2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) p))))))))

;; mem_dom
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (x (set (tuple21 c d))))
  (and
  (=> (mem22 x (tb2t688 (dom b2 (set1 (tuple2 c1 d1)) p)))
  (exists ((b3 uni))
  (and (sort b2 b3) (mem (tuple2 (set1 (tuple2 c1 d1)) b2)
  (Tuple2 (set1 (tuple2 c1 d1)) b2 (t2tb689 x) b3) p))))
  (=>
  (exists ((b3 uni)) (mem (tuple2 (set1 (tuple2 c1 d1)) b2)
  (Tuple2 (set1 (tuple2 c1 d1)) b2 (t2tb689 x) b3) p)) (mem22 x
  (tb2t688 (dom b2 (set1 (tuple2 c1 d1)) p))))))))

;; mem_dom
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (x (tuple21 c d)))
  (and
  (=> (mem21 x (tb2t689 (dom b2 (tuple2 c1 d1) p)))
  (exists ((b3 uni))
  (and (sort b2 b3) (mem (tuple2 (tuple2 c1 d1) b2)
  (Tuple2 (tuple2 c1 d1) b2 (t2tb693 x) b3) p))))
  (=>
  (exists ((b3 uni)) (mem (tuple2 (tuple2 c1 d1) b2)
  (Tuple2 (tuple2 c1 d1) b2 (t2tb693 x) b3) p)) (mem21 x
  (tb2t689 (dom b2 (tuple2 c1 d1) p))))))))

;; mem_dom
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (x d))
  (and
  (=> (mem20 x (tb2t690 (dom b2 d1 p)))
  (exists ((b3 uni))
  (and (sort b2 b3) (mem (tuple2 d1 b2) (Tuple2 d1 b2 (t2tb694 x) b3) p))))
  (=>
  (exists ((b3 uni)) (mem (tuple2 d1 b2) (Tuple2 d1 b2 (t2tb694 x) b3) p))
  (mem20 x (tb2t690 (dom b2 d1 p))))))))

;; mem_dom
  (assert
  (forall ((p (set (tuple21 (tuple21 a c) (tuple21 b d)))) (x (tuple21 a c)))
  (= (mem (tuple2 a1 c1) (t2tb133 x)
  (dom (tuple2 b1 d1) (tuple2 a1 c1) (t2tb686 p)))
  (exists ((b2 (tuple21 b d))) (mem24
  (tb2t691 (Tuple2 (tuple2 a1 c1) (tuple2 b1 d1) (t2tb133 x) (t2tb692 b2)))
  p)))))

;; mem_dom
  (assert
  (forall ((p (set (tuple21 c d))) (x c))
  (= (mem7 x (tb2t132 (dom d1 c1 (t2tb689 p))))
  (exists ((b2 d)) (mem21 (tb2t693 (Tuple2 c1 d1 (t2tb135 x) (t2tb694 b2)))
  p)))))

;; mem_dom
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (x c))
  (and
  (=> (mem7 x (tb2t132 (dom b2 c1 p)))
  (exists ((b3 uni))
  (and (sort b2 b3) (mem (tuple2 c1 b2) (Tuple2 c1 b2 (t2tb135 x) b3) p))))
  (=>
  (exists ((b3 uni)) (mem (tuple2 c1 b2) (Tuple2 c1 b2 (t2tb135 x) b3) p))
  (mem7 x (tb2t132 (dom b2 c1 p))))))))

;; mem_dom
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (x (set (tuple21 a b))))
  (and
  (=> (mem4 x (tb2t10 (dom b2 (set1 (tuple2 a1 b1)) p)))
  (exists ((b3 uni))
  (and (sort b2 b3) (mem (tuple2 (set1 (tuple2 a1 b1)) b2)
  (Tuple2 (set1 (tuple2 a1 b1)) b2 (t2tb11 x) b3) p))))
  (=>
  (exists ((b3 uni)) (mem (tuple2 (set1 (tuple2 a1 b1)) b2)
  (Tuple2 (set1 (tuple2 a1 b1)) b2 (t2tb11 x) b3) p)) (mem4 x
  (tb2t10 (dom b2 (set1 (tuple2 a1 b1)) p))))))))

;; mem_dom
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (x (tuple21 a b)))
  (and
  (=> (mem3 x (tb2t11 (dom b2 (tuple2 a1 b1) p)))
  (exists ((b3 uni))
  (and (sort b2 b3) (mem (tuple2 (tuple2 a1 b1) b2)
  (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) b3) p))))
  (=>
  (exists ((b3 uni)) (mem (tuple2 (tuple2 a1 b1) b2)
  (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) b3) p)) (mem3 x
  (tb2t11 (dom b2 (tuple2 a1 b1) p))))))))

;; mem_dom
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (x b))
  (and
  (=> (mem2 x (tb2t12 (dom b2 b1 p)))
  (exists ((b3 uni))
  (and (sort b2 b3) (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) b3) p))))
  (=> (exists ((b3 uni)) (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) b3) p))
  (mem2 x (tb2t12 (dom b2 b1 p))))))))

;; mem_dom
  (assert
  (forall ((p (set (tuple21 a b))) (x a))
  (= (mem1 x (tb2t1 (dom b1 a1 (t2tb11 p))))
  (exists ((b2 b)) (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 b2))) p)))))

;; mem_dom
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (x a))
  (and
  (=> (mem1 x (tb2t1 (dom b2 a1 p)))
  (exists ((b3 uni))
  (and (sort b2 b3) (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) b3) p))))
  (=> (exists ((b3 uni)) (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) b3) p))
  (mem1 x (tb2t1 (dom b2 a1 p))))))))

;; mem_dom
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((p uni) (x uni))
  (and
  (=> (mem a2 x (dom b2 a2 p))
  (exists ((b3 uni))
  (and (sort b2 b3) (mem (tuple2 a2 b2) (Tuple2 a2 b2 x b3) p))))
  (=> (exists ((b3 uni)) (mem (tuple2 a2 b2) (Tuple2 a2 b2 x b3) p)) (mem a2
  x (dom b2 a2 p)))))))

(declare-fun ran (ty ty uni) uni)

;; ran_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni)) (sort (set1 b2) (ran b2 a2 x)))))

;; mem_ran
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (x (tuple21 (tuple21 a c) (tuple21 b d))))
  (and
  (=> (mem24 x (tb2t686 (ran (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) a2 p)))
  (exists ((a3 uni))
  (and (sort a2 a3) (mem (tuple2 a2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
  (Tuple2 a2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) a3 (t2tb691 x)) p))))
  (=>
  (exists ((a3 uni)) (mem (tuple2 a2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
  (Tuple2 a2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) a3 (t2tb691 x)) p))
  (mem24 x (tb2t686 (ran (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) a2 p))))))))

;; mem_ran
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (x (set (tuple21 c d))))
  (and
  (=> (mem22 x (tb2t688 (ran (set1 (tuple2 c1 d1)) a2 p)))
  (exists ((a3 uni))
  (and (sort a2 a3) (mem (tuple2 a2 (set1 (tuple2 c1 d1)))
  (Tuple2 a2 (set1 (tuple2 c1 d1)) a3 (t2tb689 x)) p))))
  (=>
  (exists ((a3 uni)) (mem (tuple2 a2 (set1 (tuple2 c1 d1)))
  (Tuple2 a2 (set1 (tuple2 c1 d1)) a3 (t2tb689 x)) p)) (mem22 x
  (tb2t688 (ran (set1 (tuple2 c1 d1)) a2 p))))))))

;; mem_ran
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (x (tuple21 c d)))
  (and
  (=> (mem21 x (tb2t689 (ran (tuple2 c1 d1) a2 p)))
  (exists ((a3 uni))
  (and (sort a2 a3) (mem (tuple2 a2 (tuple2 c1 d1))
  (Tuple2 a2 (tuple2 c1 d1) a3 (t2tb693 x)) p))))
  (=>
  (exists ((a3 uni)) (mem (tuple2 a2 (tuple2 c1 d1))
  (Tuple2 a2 (tuple2 c1 d1) a3 (t2tb693 x)) p)) (mem21 x
  (tb2t689 (ran (tuple2 c1 d1) a2 p))))))))

;; mem_ran
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (x d))
  (and
  (=> (mem20 x (tb2t690 (ran d1 a2 p)))
  (exists ((a3 uni))
  (and (sort a2 a3) (mem (tuple2 a2 d1) (Tuple2 a2 d1 a3 (t2tb694 x)) p))))
  (=>
  (exists ((a3 uni)) (mem (tuple2 a2 d1) (Tuple2 a2 d1 a3 (t2tb694 x)) p))
  (mem20 x (tb2t690 (ran d1 a2 p))))))))

;; mem_ran
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (x c))
  (and
  (=> (mem7 x (tb2t132 (ran c1 a2 p)))
  (exists ((a3 uni))
  (and (sort a2 a3) (mem (tuple2 a2 c1) (Tuple2 a2 c1 a3 (t2tb135 x)) p))))
  (=>
  (exists ((a3 uni)) (mem (tuple2 a2 c1) (Tuple2 a2 c1 a3 (t2tb135 x)) p))
  (mem7 x (tb2t132 (ran c1 a2 p))))))))

;; mem_ran
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (x (set (tuple21 a b))))
  (and
  (=> (mem4 x (tb2t10 (ran (set1 (tuple2 a1 b1)) a2 p)))
  (exists ((a3 uni))
  (and (sort a2 a3) (mem (tuple2 a2 (set1 (tuple2 a1 b1)))
  (Tuple2 a2 (set1 (tuple2 a1 b1)) a3 (t2tb11 x)) p))))
  (=>
  (exists ((a3 uni)) (mem (tuple2 a2 (set1 (tuple2 a1 b1)))
  (Tuple2 a2 (set1 (tuple2 a1 b1)) a3 (t2tb11 x)) p)) (mem4 x
  (tb2t10 (ran (set1 (tuple2 a1 b1)) a2 p))))))))

;; mem_ran
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (x (tuple21 a b)))
  (and
  (=> (mem3 x (tb2t11 (ran (tuple2 a1 b1) a2 p)))
  (exists ((a3 uni))
  (and (sort a2 a3) (mem (tuple2 a2 (tuple2 a1 b1))
  (Tuple2 a2 (tuple2 a1 b1) a3 (t2tb13 x)) p))))
  (=>
  (exists ((a3 uni)) (mem (tuple2 a2 (tuple2 a1 b1))
  (Tuple2 a2 (tuple2 a1 b1) a3 (t2tb13 x)) p)) (mem3 x
  (tb2t11 (ran (tuple2 a1 b1) a2 p))))))))

;; mem_ran
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (x b))
  (and
  (=> (mem2 x (tb2t12 (ran b1 a2 p)))
  (exists ((a3 uni))
  (and (sort a2 a3) (mem (tuple2 a2 b1) (Tuple2 a2 b1 a3 (t2tb14 x)) p))))
  (=> (exists ((a3 uni)) (mem (tuple2 a2 b1) (Tuple2 a2 b1 a3 (t2tb14 x)) p))
  (mem2 x (tb2t12 (ran b1 a2 p))))))))

;; mem_ran
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (x a))
  (and
  (=> (mem1 x (tb2t1 (ran a1 a2 p)))
  (exists ((a3 uni))
  (and (sort a2 a3) (mem (tuple2 a2 a1) (Tuple2 a2 a1 a3 (t2tb2 x)) p))))
  (=> (exists ((a3 uni)) (mem (tuple2 a2 a1) (Tuple2 a2 a1 a3 (t2tb2 x)) p))
  (mem1 x (tb2t1 (ran a1 a2 p))))))))

;; mem_ran
  (assert
  (forall ((p (set (tuple21 (tuple21 a c) (tuple21 b d)))) (x (tuple21 b d)))
  (= (mem (tuple2 b1 d1) (t2tb692 x)
  (ran (tuple2 b1 d1) (tuple2 a1 c1) (t2tb686 p)))
  (exists ((a2 (tuple21 a c))) (mem24
  (tb2t691 (Tuple2 (tuple2 a1 c1) (tuple2 b1 d1) (t2tb133 a2) (t2tb692 x)))
  p)))))

;; mem_ran
  (assert
  (forall ((p (set (tuple21 c d))) (x d))
  (= (mem20 x (tb2t690 (ran d1 c1 (t2tb689 p))))
  (exists ((a2 c)) (mem21 (tb2t693 (Tuple2 c1 d1 (t2tb135 a2) (t2tb694 x)))
  p)))))

;; mem_ran
  (assert
  (forall ((p (set (tuple21 a b))) (x b))
  (= (mem2 x (tb2t12 (ran b1 a1 (t2tb11 p))))
  (exists ((a2 a)) (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 a2) (t2tb14 x))) p)))))

;; mem_ran
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((p uni) (x uni))
  (and
  (=> (mem b2 x (ran b2 a2 p))
  (exists ((a3 uni))
  (and (sort a2 a3) (mem (tuple2 a2 b2) (Tuple2 a2 b2 a3 x) p))))
  (=> (exists ((a3 uni)) (mem (tuple2 a2 b2) (Tuple2 a2 b2 a3 x) p)) (mem b2
  x (ran b2 a2 p)))))))

(declare-fun semicolon (ty ty ty uni uni) uni)

;; semicolon_sort
  (assert
  (forall ((a2 ty) (b2 ty) (c2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (tuple2 a2 c2))
  (semicolon c2 b2 a2 x x1)))))

;; mem_semicolon
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (q (set (tuple21 (tuple21 a c) (tuple21 b d)))) (x uni)
  (y (tuple21 b d)))
  (= (mem (tuple2 a2 (tuple2 b1 d1)) (Tuple2 a2 (tuple2 b1 d1) x (t2tb692 y))
  (semicolon (tuple2 b1 d1) (tuple2 a1 c1) a2 p (t2tb686 q)))
  (exists ((b2 (tuple21 a c)))
  (and (mem (tuple2 a2 (tuple2 a1 c1))
  (Tuple2 a2 (tuple2 a1 c1) x (t2tb133 b2)) p) (mem24
  (tb2t691 (Tuple2 (tuple2 a1 c1) (tuple2 b1 d1) (t2tb133 b2) (t2tb692 y)))
  q)))))))

;; mem_semicolon
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (q (set (tuple21 c d))) (x uni) (y d))
  (= (mem (tuple2 a2 d1) (Tuple2 a2 d1 x (t2tb694 y))
  (semicolon d1 c1 a2 p (t2tb689 q)))
  (exists ((b2 c))
  (and (mem (tuple2 a2 c1) (Tuple2 a2 c1 x (t2tb135 b2)) p) (mem21
  (tb2t693 (Tuple2 c1 d1 (t2tb135 b2) (t2tb694 y))) q)))))))

;; mem_semicolon
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (q (set (tuple21 a b))) (x uni) (y b))
  (= (mem (tuple2 a2 b1) (Tuple2 a2 b1 x (t2tb14 y))
  (semicolon b1 a1 a2 p (t2tb11 q)))
  (exists ((b2 a))
  (and (mem (tuple2 a2 a1) (Tuple2 a2 a1 x (t2tb2 b2)) p) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 b2) (t2tb14 y))) q)))))))

;; mem_semicolon
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (q uni) (x (tuple21 a c)) (y (tuple21 b d)))
  (and
  (=> (mem24
  (tb2t691 (Tuple2 (tuple2 a1 c1) (tuple2 b1 d1) (t2tb133 x) (t2tb692 y)))
  (tb2t686 (semicolon (tuple2 b1 d1) b2 (tuple2 a1 c1) p q)))
  (exists ((b3 uni))
  (and (sort b2 b3)
  (and (mem (tuple2 (tuple2 a1 c1) b2)
  (Tuple2 (tuple2 a1 c1) b2 (t2tb133 x) b3) p) (mem
  (tuple2 b2 (tuple2 b1 d1)) (Tuple2 b2 (tuple2 b1 d1) b3 (t2tb692 y)) q)))))
  (=>
  (exists ((b3 uni))
  (and (mem (tuple2 (tuple2 a1 c1) b2)
  (Tuple2 (tuple2 a1 c1) b2 (t2tb133 x) b3) p) (mem
  (tuple2 b2 (tuple2 b1 d1)) (Tuple2 b2 (tuple2 b1 d1) b3 (t2tb692 y)) q)))
  (mem24
  (tb2t691 (Tuple2 (tuple2 a1 c1) (tuple2 b1 d1) (t2tb133 x) (t2tb692 y)))
  (tb2t686 (semicolon (tuple2 b1 d1) b2 (tuple2 a1 c1) p q))))))))

(declare-fun t2tb747 ((set (tuple21 (tuple21 b d) (tuple21 b d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b d) (tuple21 b d))))) (sort
  (set1 (tuple2 (tuple2 b1 d1) (tuple2 b1 d1))) (t2tb747 x))))

(declare-fun tb2t747 (uni) (set (tuple21 (tuple21 b d) (tuple21 b d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b d) (tuple21 b d)))))
  (! (= (tb2t747 (t2tb747 i)) i) :pattern ((t2tb747 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 d1) (tuple2 b1 d1))) j)
     (= (t2tb747 (tb2t747 j)) j)) :pattern ((t2tb747 (tb2t747 j))) )))

(declare-fun t2tb748 ((tuple21 (tuple21 b d) (tuple21 b d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b d) (tuple21 b d)))) (sort
  (tuple2 (tuple2 b1 d1) (tuple2 b1 d1)) (t2tb748 x))))

(declare-fun tb2t748 (uni) (tuple21 (tuple21 b d) (tuple21 b d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b d) (tuple21 b d))))
  (! (= (tb2t748 (t2tb748 i)) i) :pattern ((t2tb748 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 d1) (tuple2 b1 d1)) j)
     (= (t2tb748 (tb2t748 j)) j)) :pattern ((t2tb748 (tb2t748 j))) )))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 (tuple21 a c) (tuple21 b d))))
  (q (set (tuple21 (tuple21 b d) (tuple21 b d)))) (x (tuple21 a c))
  (y (tuple21 b d)))
  (= (mem24
  (tb2t691 (Tuple2 (tuple2 a1 c1) (tuple2 b1 d1) (t2tb133 x) (t2tb692 y)))
  (tb2t686
  (semicolon (tuple2 b1 d1) (tuple2 b1 d1) (tuple2 a1 c1) (t2tb686 p)
  (t2tb747 q))))
  (exists ((b2 (tuple21 b d)))
  (and (mem24
  (tb2t691 (Tuple2 (tuple2 a1 c1) (tuple2 b1 d1) (t2tb133 x) (t2tb692 b2)))
  p) (mem (tuple2 (tuple2 b1 d1) (tuple2 b1 d1))
  (Tuple2 (tuple2 b1 d1) (tuple2 b1 d1) (t2tb692 b2) (t2tb692 y))
  (t2tb747 q)))))))

;; mem_semicolon
  (assert
  (forall ((c2 ty))
  (forall ((p (set (tuple21 (tuple21 a c) (tuple21 b d)))) (q uni)
  (x (tuple21 a c)) (y uni))
  (= (mem (tuple2 (tuple2 a1 c1) c2) (Tuple2 (tuple2 a1 c1) c2 (t2tb133 x) y)
  (semicolon c2 (tuple2 b1 d1) (tuple2 a1 c1) (t2tb686 p) q))
  (exists ((b2 (tuple21 b d)))
  (and (mem24
  (tb2t691 (Tuple2 (tuple2 a1 c1) (tuple2 b1 d1) (t2tb133 x) (t2tb692 b2)))
  p) (mem (tuple2 (tuple2 b1 d1) c2)
  (Tuple2 (tuple2 b1 d1) c2 (t2tb692 b2) y) q)))))))

(declare-fun t2tb156 ((tuple21 (tuple21 a c) (tuple21 a c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a c) (tuple21 a c)))) (sort
  (tuple2 (tuple2 a1 c1) (tuple2 a1 c1)) (t2tb156 x))))

(declare-fun tb2t156 (uni) (tuple21 (tuple21 a c) (tuple21 a c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a c) (tuple21 a c))))
  (! (= (tb2t156 (t2tb156 i)) i) :pattern ((t2tb156 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 c1) (tuple2 a1 c1)) j)
     (= (t2tb156 (tb2t156 j)) j)) :pattern ((t2tb156 (tb2t156 j))) )))

(declare-fun t2tb157 ((set (tuple21 (tuple21 a c) (tuple21 a c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a c) (tuple21 a c))))) (sort
  (set1 (tuple2 (tuple2 a1 c1) (tuple2 a1 c1))) (t2tb157 x))))

(declare-fun tb2t157 (uni) (set (tuple21 (tuple21 a c) (tuple21 a c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a c) (tuple21 a c)))))
  (! (= (tb2t157 (t2tb157 i)) i) :pattern ((t2tb157 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 c1) (tuple2 a1 c1))) j)
     (= (t2tb157 (tb2t157 j)) j)) :pattern ((t2tb157 (tb2t157 j))) )))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 (tuple21 a c) (tuple21 a c))))
  (q (set (tuple21 (tuple21 a c) (tuple21 b d)))) (x (tuple21 a c))
  (y (tuple21 b d)))
  (= (mem24
  (tb2t691 (Tuple2 (tuple2 a1 c1) (tuple2 b1 d1) (t2tb133 x) (t2tb692 y)))
  (tb2t686
  (semicolon (tuple2 b1 d1) (tuple2 a1 c1) (tuple2 a1 c1) (t2tb157 p)
  (t2tb686 q))))
  (exists ((b2 (tuple21 a c)))
  (and (mem (tuple2 (tuple2 a1 c1) (tuple2 a1 c1))
  (Tuple2 (tuple2 a1 c1) (tuple2 a1 c1) (t2tb133 x) (t2tb133 b2))
  (t2tb157 p)) (mem24
  (tb2t691 (Tuple2 (tuple2 a1 c1) (tuple2 b1 d1) (t2tb133 b2) (t2tb692 y)))
  q))))))

;; mem_semicolon
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (q uni) (x c) (y d))
  (and
  (=> (mem21 (tb2t693 (Tuple2 c1 d1 (t2tb135 x) (t2tb694 y)))
  (tb2t689 (semicolon d1 b2 c1 p q)))
  (exists ((b3 uni))
  (and (sort b2 b3)
  (and (mem (tuple2 c1 b2) (Tuple2 c1 b2 (t2tb135 x) b3) p) (mem
  (tuple2 b2 d1) (Tuple2 b2 d1 b3 (t2tb694 y)) q)))))
  (=>
  (exists ((b3 uni))
  (and (mem (tuple2 c1 b2) (Tuple2 c1 b2 (t2tb135 x) b3) p) (mem
  (tuple2 b2 d1) (Tuple2 b2 d1 b3 (t2tb694 y)) q))) (mem21
  (tb2t693 (Tuple2 c1 d1 (t2tb135 x) (t2tb694 y)))
  (tb2t689 (semicolon d1 b2 c1 p q))))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 c d))) (q (set (tuple21 d d))) (x c) (y d))
  (= (mem21 (tb2t693 (Tuple2 c1 d1 (t2tb135 x) (t2tb694 y)))
  (tb2t689 (semicolon d1 d1 c1 (t2tb689 p) (t2tb825 q))))
  (exists ((b2 d))
  (and (mem21 (tb2t693 (Tuple2 c1 d1 (t2tb135 x) (t2tb694 b2))) p) (mem
  (tuple2 d1 d1) (Tuple2 d1 d1 (t2tb694 b2) (t2tb694 y)) (t2tb825 q)))))))

;; mem_semicolon
  (assert
  (forall ((c2 ty))
  (forall ((p (set (tuple21 c d))) (q uni) (x c) (y uni))
  (= (mem (tuple2 c1 c2) (Tuple2 c1 c2 (t2tb135 x) y)
  (semicolon c2 d1 c1 (t2tb689 p) q))
  (exists ((b2 d))
  (and (mem21 (tb2t693 (Tuple2 c1 d1 (t2tb135 x) (t2tb694 b2))) p) (mem
  (tuple2 d1 c2) (Tuple2 d1 c2 (t2tb694 b2) y) q)))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 c c))) (q (set (tuple21 c d))) (x c) (y d))
  (= (mem21 (tb2t693 (Tuple2 c1 d1 (t2tb135 x) (t2tb694 y)))
  (tb2t689 (semicolon d1 c1 c1 (t2tb216 p) (t2tb689 q))))
  (exists ((b2 c))
  (and (mem (tuple2 c1 c1) (Tuple2 c1 c1 (t2tb135 x) (t2tb135 b2))
  (t2tb216 p)) (mem21 (tb2t693 (Tuple2 c1 d1 (t2tb135 b2) (t2tb694 y))) q))))))

;; mem_semicolon
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (q uni) (x a) (y b))
  (and
  (=> (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y)))
  (tb2t11 (semicolon b1 b2 a1 p q)))
  (exists ((b3 uni))
  (and (sort b2 b3)
  (and (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) b3) p) (mem (tuple2 b2 b1)
  (Tuple2 b2 b1 b3 (t2tb14 y)) q)))))
  (=>
  (exists ((b3 uni))
  (and (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) b3) p) (mem (tuple2 b2 b1)
  (Tuple2 b2 b1 b3 (t2tb14 y)) q))) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y)))
  (tb2t11 (semicolon b1 b2 a1 p q))))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 a b))) (q (set (tuple21 b b))) (x a) (y b))
  (= (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y)))
  (tb2t11 (semicolon b1 b1 a1 (t2tb11 p) (t2tb35 q))))
  (exists ((b2 b))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 b2))) p) (mem
  (tuple2 b1 b1) (Tuple2 b1 b1 (t2tb14 b2) (t2tb14 y)) (t2tb35 q)))))))

;; mem_semicolon
  (assert
  (forall ((c2 ty))
  (forall ((p (set (tuple21 a b))) (q uni) (x a) (y uni))
  (= (mem (tuple2 a1 c2) (Tuple2 a1 c2 (t2tb2 x) y)
  (semicolon c2 b1 a1 (t2tb11 p) q))
  (exists ((b2 b))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 b2))) p) (mem
  (tuple2 b1 c2) (Tuple2 b1 c2 (t2tb14 b2) y) q)))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 a a))) (q (set (tuple21 a b))) (x a) (y b))
  (= (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y)))
  (tb2t11 (semicolon b1 a1 a1 (t2tb4 p) (t2tb11 q))))
  (exists ((b2 a))
  (and (mem (tuple2 a1 a1) (Tuple2 a1 a1 (t2tb2 x) (t2tb2 b2)) (t2tb4 p))
  (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 b2) (t2tb14 y))) q))))))

;; mem_semicolon
  (assert
  (forall ((a2 ty) (b2 ty) (c2 ty))
  (forall ((p uni) (q uni) (x uni) (y uni))
  (and
  (=> (mem (tuple2 a2 c2) (Tuple2 a2 c2 x y) (semicolon c2 b2 a2 p q))
  (exists ((b3 uni))
  (and (sort b2 b3)
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x b3) p) (mem (tuple2 b2 c2)
  (Tuple2 b2 c2 b3 y) q)))))
  (=>
  (exists ((b3 uni))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x b3) p) (mem (tuple2 b2 c2)
  (Tuple2 b2 c2 b3 y) q))) (mem (tuple2 a2 c2) (Tuple2 a2 c2 x y)
  (semicolon c2 b2 a2 p q)))))))

(declare-fun semicolon_back (ty ty ty uni uni) uni)

;; semicolon_back_sort
  (assert
  (forall ((a2 ty) (b2 ty) (c2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (tuple2 a2 c2))
  (semicolon_back c2 b2 a2 x x1)))))

;; semicolon_back
  (assert
  (forall ((a2 ty) (b2 ty) (c2 ty))
  (forall ((p uni) (q uni))
  (= (semicolon_back c2 b2 a2 q p) (semicolon c2 b2 a2 p q)))))

(declare-fun id (ty uni) uni)

;; id_sort
  (assert
  (forall ((a2 ty))
  (forall ((x uni)) (sort (set1 (tuple2 a2 a2)) (id a2 x)))))

;; mem_id
  (assert
  (forall ((u (set (tuple21 (tuple21 a c) (tuple21 b d))))
  (x (tuple21 (tuple21 a c) (tuple21 b d))) (y (tuple21 (tuple21 a c)
  (tuple21 b d))))
  (= (mem
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))
  (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))
  (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb691 x) (t2tb691 y))
  (id (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb686 u)))
  (and (mem24 x u) (= x y)))))

;; mem_id
  (assert
  (forall ((u (set (set (tuple21 c d)))) (x (set (tuple21 c d)))
  (y (set (tuple21 c d))))
  (= (mem (tuple2 (set1 (tuple2 c1 d1)) (set1 (tuple2 c1 d1)))
  (Tuple2 (set1 (tuple2 c1 d1)) (set1 (tuple2 c1 d1)) (t2tb689 x)
  (t2tb689 y)) (id (set1 (tuple2 c1 d1)) (t2tb688 u)))
  (and (mem22 x u) (= x y)))))

;; mem_id
  (assert
  (forall ((u (set (tuple21 c d))) (x (tuple21 c d)) (y (tuple21 c d)))
  (= (mem (tuple2 (tuple2 c1 d1) (tuple2 c1 d1))
  (Tuple2 (tuple2 c1 d1) (tuple2 c1 d1) (t2tb693 x) (t2tb693 y))
  (id (tuple2 c1 d1) (t2tb689 u))) (and (mem21 x u) (= x y)))))

;; mem_id
  (assert
  (forall ((u (set d)) (x d) (y d))
  (= (mem (tuple2 d1 d1) (Tuple2 d1 d1 (t2tb694 x) (t2tb694 y))
  (id d1 (t2tb690 u))) (and (mem20 x u) (= x y)))))

;; mem_id
  (assert
  (forall ((u (set c)) (x c) (y c))
  (= (mem (tuple2 c1 c1) (Tuple2 c1 c1 (t2tb135 x) (t2tb135 y))
  (id c1 (t2tb132 u))) (and (mem7 x u) (= x y)))))

;; mem_id
  (assert
  (forall ((u (set (set (tuple21 a b)))) (x (set (tuple21 a b)))
  (y (set (tuple21 a b))))
  (= (mem (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1)))
  (Tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1)) (t2tb11 x) (t2tb11 y))
  (id (set1 (tuple2 a1 b1)) (t2tb10 u))) (and (mem4 x u) (= x y)))))

;; mem_id
  (assert
  (forall ((u (set (tuple21 a b))) (x (tuple21 a b)) (y (tuple21 a b)))
  (= (mem (tuple2 (tuple2 a1 b1) (tuple2 a1 b1))
  (Tuple2 (tuple2 a1 b1) (tuple2 a1 b1) (t2tb13 x) (t2tb13 y))
  (id (tuple2 a1 b1) (t2tb11 u))) (and (mem3 x u) (= x y)))))

;; mem_id
  (assert
  (forall ((u (set b)) (x b) (y b))
  (= (mem (tuple2 b1 b1) (Tuple2 b1 b1 (t2tb14 x) (t2tb14 y))
  (id b1 (t2tb12 u))) (and (mem2 x u) (= x y)))))

;; mem_id
  (assert
  (forall ((u (set a)) (x a) (y a))
  (= (mem (tuple2 a1 a1) (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y))
  (id a1 (t2tb1 u))) (and (mem1 x u) (= x y)))))

;; mem_id
  (assert
  (forall ((a2 ty))
  (forall ((u uni) (x uni) (y uni))
  (=> (sort a2 x)
  (=> (sort a2 y)
  (= (mem (tuple2 a2 a2) (Tuple2 a2 a2 x y) (id a2 u))
  (and (mem a2 x u) (= x y))))))))

(declare-fun domain_restriction (ty ty uni uni) uni)

;; domain_restriction_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (tuple2 a2 b2))
  (domain_restriction b2 a2 x x1)))))

;; mem_domain_restriction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (tuple21 (tuple21 a c) (tuple21 b d))))
  (x (tuple21 (tuple21 a c) (tuple21 b d))) (y uni))
  (= (mem (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) b2)
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) b2 (t2tb691 x) y)
  (domain_restriction b2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb686 s)
  p))
  (and (mem (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) b2)
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) b2 (t2tb691 x) y) p) (mem24
  x s))))))

;; mem_domain_restriction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (set (tuple21 c d)))) (x (set (tuple21 c d)))
  (y uni))
  (= (mem (tuple2 (set1 (tuple2 c1 d1)) b2)
  (Tuple2 (set1 (tuple2 c1 d1)) b2 (t2tb689 x) y)
  (domain_restriction b2 (set1 (tuple2 c1 d1)) (t2tb688 s) p))
  (and (mem (tuple2 (set1 (tuple2 c1 d1)) b2)
  (Tuple2 (set1 (tuple2 c1 d1)) b2 (t2tb689 x) y) p) (mem22 x s))))))

;; mem_domain_restriction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (tuple21 c d))) (x (tuple21 c d)) (y uni))
  (= (mem (tuple2 (tuple2 c1 d1) b2) (Tuple2 (tuple2 c1 d1) b2 (t2tb693 x) y)
  (domain_restriction b2 (tuple2 c1 d1) (t2tb689 s) p))
  (and (mem (tuple2 (tuple2 c1 d1) b2)
  (Tuple2 (tuple2 c1 d1) b2 (t2tb693 x) y) p) (mem21 x s))))))

;; mem_domain_restriction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set d)) (x d) (y uni))
  (= (mem (tuple2 d1 b2) (Tuple2 d1 b2 (t2tb694 x) y)
  (domain_restriction b2 d1 (t2tb690 s) p))
  (and (mem (tuple2 d1 b2) (Tuple2 d1 b2 (t2tb694 x) y) p) (mem20 x s))))))

;; mem_domain_restriction
  (assert
  (forall ((p (set (tuple21 (tuple21 a c) (tuple21 b d)))) (s (set (tuple21 a
  c))) (x (tuple21 a c)) (y (tuple21 b d)))
  (= (mem24
  (tb2t691 (Tuple2 (tuple2 a1 c1) (tuple2 b1 d1) (t2tb133 x) (t2tb692 y)))
  (tb2t686
  (domain_restriction (tuple2 b1 d1) (tuple2 a1 c1) (t2tb129 s) (t2tb686 p))))
  (and (mem24
  (tb2t691 (Tuple2 (tuple2 a1 c1) (tuple2 b1 d1) (t2tb133 x) (t2tb692 y))) p)
  (mem (tuple2 a1 c1) (t2tb133 x) (t2tb129 s))))))

;; mem_domain_restriction
  (assert
  (forall ((p (set (tuple21 c d))) (s (set c)) (x c) (y d))
  (= (mem21 (tb2t693 (Tuple2 c1 d1 (t2tb135 x) (t2tb694 y)))
  (tb2t689 (domain_restriction d1 c1 (t2tb132 s) (t2tb689 p))))
  (and (mem21 (tb2t693 (Tuple2 c1 d1 (t2tb135 x) (t2tb694 y))) p) (mem7 x s)))))

;; mem_domain_restriction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set c)) (x c) (y uni))
  (= (mem (tuple2 c1 b2) (Tuple2 c1 b2 (t2tb135 x) y)
  (domain_restriction b2 c1 (t2tb132 s) p))
  (and (mem (tuple2 c1 b2) (Tuple2 c1 b2 (t2tb135 x) y) p) (mem7 x s))))))

;; mem_domain_restriction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (set (tuple21 a b)))) (x (set (tuple21 a b)))
  (y uni))
  (= (mem (tuple2 (set1 (tuple2 a1 b1)) b2)
  (Tuple2 (set1 (tuple2 a1 b1)) b2 (t2tb11 x) y)
  (domain_restriction b2 (set1 (tuple2 a1 b1)) (t2tb10 s) p))
  (and (mem (tuple2 (set1 (tuple2 a1 b1)) b2)
  (Tuple2 (set1 (tuple2 a1 b1)) b2 (t2tb11 x) y) p) (mem4 x s))))))

;; mem_domain_restriction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (tuple21 a b))) (x (tuple21 a b)) (y uni))
  (= (mem (tuple2 (tuple2 a1 b1) b2) (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) y)
  (domain_restriction b2 (tuple2 a1 b1) (t2tb11 s) p))
  (and (mem (tuple2 (tuple2 a1 b1) b2)
  (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) y) p) (mem3 x s))))))

;; mem_domain_restriction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set b)) (x b) (y uni))
  (= (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) y)
  (domain_restriction b2 b1 (t2tb12 s) p))
  (and (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) y) p) (mem2 x s))))))

;; mem_domain_restriction
  (assert
  (forall ((p (set (tuple21 a b))) (s (set a)) (x a) (y b))
  (= (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y)))
  (tb2t11 (domain_restriction b1 a1 (t2tb1 s) (t2tb11 p))))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y))) p) (mem1 x s)))))

;; mem_domain_restriction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set a)) (x a) (y uni))
  (= (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) y)
  (domain_restriction b2 a1 (t2tb1 s) p))
  (and (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) y) p) (mem1 x s))))))

;; mem_domain_restriction
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((p uni) (s uni) (x uni) (y uni))
  (= (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) (domain_restriction b2 a2 s p))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) p) (mem a2 x s))))))

(declare-fun range_restriction (ty ty uni uni) uni)

;; range_restriction_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (tuple2 a2 b2))
  (range_restriction b2 a2 x x1)))))

;; mem_range_restriction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (tuple21 (tuple21 a c) (tuple21 b d)))) (x uni)
  (y (tuple21 (tuple21 a c) (tuple21 b d))))
  (= (mem (tuple2 a2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
  (Tuple2 a2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) x (t2tb691 y))
  (range_restriction (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) a2 p (t2tb686 t)))
  (and (mem (tuple2 a2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
  (Tuple2 a2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) x (t2tb691 y)) p) (mem24
  y t))))))

;; mem_range_restriction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (set (tuple21 c d)))) (x uni) (y (set (tuple21 c
  d))))
  (= (mem (tuple2 a2 (set1 (tuple2 c1 d1)))
  (Tuple2 a2 (set1 (tuple2 c1 d1)) x (t2tb689 y))
  (range_restriction (set1 (tuple2 c1 d1)) a2 p (t2tb688 t)))
  (and (mem (tuple2 a2 (set1 (tuple2 c1 d1)))
  (Tuple2 a2 (set1 (tuple2 c1 d1)) x (t2tb689 y)) p) (mem22 y t))))))

;; mem_range_restriction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (tuple21 c d))) (x uni) (y (tuple21 c d)))
  (= (mem (tuple2 a2 (tuple2 c1 d1)) (Tuple2 a2 (tuple2 c1 d1) x (t2tb693 y))
  (range_restriction (tuple2 c1 d1) a2 p (t2tb689 t)))
  (and (mem (tuple2 a2 (tuple2 c1 d1))
  (Tuple2 a2 (tuple2 c1 d1) x (t2tb693 y)) p) (mem21 y t))))))

;; mem_range_restriction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set d)) (x uni) (y d))
  (= (mem (tuple2 a2 d1) (Tuple2 a2 d1 x (t2tb694 y))
  (range_restriction d1 a2 p (t2tb690 t)))
  (and (mem (tuple2 a2 d1) (Tuple2 a2 d1 x (t2tb694 y)) p) (mem20 y t))))))

;; mem_range_restriction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set c)) (x uni) (y c))
  (= (mem (tuple2 a2 c1) (Tuple2 a2 c1 x (t2tb135 y))
  (range_restriction c1 a2 p (t2tb132 t)))
  (and (mem (tuple2 a2 c1) (Tuple2 a2 c1 x (t2tb135 y)) p) (mem7 y t))))))

;; mem_range_restriction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (set (tuple21 a b)))) (x uni) (y (set (tuple21 a
  b))))
  (= (mem (tuple2 a2 (set1 (tuple2 a1 b1)))
  (Tuple2 a2 (set1 (tuple2 a1 b1)) x (t2tb11 y))
  (range_restriction (set1 (tuple2 a1 b1)) a2 p (t2tb10 t)))
  (and (mem (tuple2 a2 (set1 (tuple2 a1 b1)))
  (Tuple2 a2 (set1 (tuple2 a1 b1)) x (t2tb11 y)) p) (mem4 y t))))))

;; mem_range_restriction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (tuple21 a b))) (x uni) (y (tuple21 a b)))
  (= (mem (tuple2 a2 (tuple2 a1 b1)) (Tuple2 a2 (tuple2 a1 b1) x (t2tb13 y))
  (range_restriction (tuple2 a1 b1) a2 p (t2tb11 t)))
  (and (mem (tuple2 a2 (tuple2 a1 b1))
  (Tuple2 a2 (tuple2 a1 b1) x (t2tb13 y)) p) (mem3 y t))))))

;; mem_range_restriction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set b)) (x uni) (y b))
  (= (mem (tuple2 a2 b1) (Tuple2 a2 b1 x (t2tb14 y))
  (range_restriction b1 a2 p (t2tb12 t)))
  (and (mem (tuple2 a2 b1) (Tuple2 a2 b1 x (t2tb14 y)) p) (mem2 y t))))))

;; mem_range_restriction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set a)) (x uni) (y a))
  (= (mem (tuple2 a2 a1) (Tuple2 a2 a1 x (t2tb2 y))
  (range_restriction a1 a2 p (t2tb1 t)))
  (and (mem (tuple2 a2 a1) (Tuple2 a2 a1 x (t2tb2 y)) p) (mem1 y t))))))

;; mem_range_restriction
  (assert
  (forall ((p (set (tuple21 (tuple21 a c) (tuple21 b d)))) (t (set (tuple21 b
  d))) (x (tuple21 a c)) (y (tuple21 b d)))
  (= (mem24
  (tb2t691 (Tuple2 (tuple2 a1 c1) (tuple2 b1 d1) (t2tb133 x) (t2tb692 y)))
  (tb2t686
  (range_restriction (tuple2 b1 d1) (tuple2 a1 c1) (t2tb686 p) (t2tb687 t))))
  (and (mem24
  (tb2t691 (Tuple2 (tuple2 a1 c1) (tuple2 b1 d1) (t2tb133 x) (t2tb692 y))) p)
  (mem (tuple2 b1 d1) (t2tb692 y) (t2tb687 t))))))

;; mem_range_restriction
  (assert
  (forall ((p (set (tuple21 c d))) (t (set d)) (x c) (y d))
  (= (mem21 (tb2t693 (Tuple2 c1 d1 (t2tb135 x) (t2tb694 y)))
  (tb2t689 (range_restriction d1 c1 (t2tb689 p) (t2tb690 t))))
  (and (mem21 (tb2t693 (Tuple2 c1 d1 (t2tb135 x) (t2tb694 y))) p) (mem20 y
  t)))))

;; mem_range_restriction
  (assert
  (forall ((p (set (tuple21 a b))) (t (set b)) (x a) (y b))
  (= (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y)))
  (tb2t11 (range_restriction b1 a1 (t2tb11 p) (t2tb12 t))))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y))) p) (mem2 y t)))))

;; mem_range_restriction
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((p uni) (t uni) (x uni) (y uni))
  (= (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) (range_restriction b2 a2 p t))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) p) (mem b2 y t))))))

(declare-fun domain_substraction (ty ty uni uni) uni)

;; domain_substraction_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (tuple2 a2 b2))
  (domain_substraction b2 a2 x x1)))))

;; mem_domain_substraction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (tuple21 (tuple21 a c) (tuple21 b d))))
  (x (tuple21 (tuple21 a c) (tuple21 b d))) (y uni))
  (= (mem (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) b2)
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) b2 (t2tb691 x) y)
  (domain_substraction b2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb686 s)
  p))
  (and (mem (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) b2)
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) b2 (t2tb691 x) y) p)
  (not (mem24 x s)))))))

;; mem_domain_substraction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (set (tuple21 c d)))) (x (set (tuple21 c d)))
  (y uni))
  (= (mem (tuple2 (set1 (tuple2 c1 d1)) b2)
  (Tuple2 (set1 (tuple2 c1 d1)) b2 (t2tb689 x) y)
  (domain_substraction b2 (set1 (tuple2 c1 d1)) (t2tb688 s) p))
  (and (mem (tuple2 (set1 (tuple2 c1 d1)) b2)
  (Tuple2 (set1 (tuple2 c1 d1)) b2 (t2tb689 x) y) p) (not (mem22 x s)))))))

;; mem_domain_substraction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (tuple21 c d))) (x (tuple21 c d)) (y uni))
  (= (mem (tuple2 (tuple2 c1 d1) b2) (Tuple2 (tuple2 c1 d1) b2 (t2tb693 x) y)
  (domain_substraction b2 (tuple2 c1 d1) (t2tb689 s) p))
  (and (mem (tuple2 (tuple2 c1 d1) b2)
  (Tuple2 (tuple2 c1 d1) b2 (t2tb693 x) y) p) (not (mem21 x s)))))))

;; mem_domain_substraction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set d)) (x d) (y uni))
  (= (mem (tuple2 d1 b2) (Tuple2 d1 b2 (t2tb694 x) y)
  (domain_substraction b2 d1 (t2tb690 s) p))
  (and (mem (tuple2 d1 b2) (Tuple2 d1 b2 (t2tb694 x) y) p) (not (mem20 x s)))))))

;; mem_domain_substraction
  (assert
  (forall ((p (set (tuple21 (tuple21 a c) (tuple21 b d)))) (s (set (tuple21 a
  c))) (x (tuple21 a c)) (y (tuple21 b d)))
  (= (mem24
  (tb2t691 (Tuple2 (tuple2 a1 c1) (tuple2 b1 d1) (t2tb133 x) (t2tb692 y)))
  (tb2t686
  (domain_substraction (tuple2 b1 d1) (tuple2 a1 c1) (t2tb129 s) (t2tb686 p))))
  (and (mem24
  (tb2t691 (Tuple2 (tuple2 a1 c1) (tuple2 b1 d1) (t2tb133 x) (t2tb692 y))) p)
  (not (mem (tuple2 a1 c1) (t2tb133 x) (t2tb129 s)))))))

;; mem_domain_substraction
  (assert
  (forall ((p (set (tuple21 c d))) (s (set c)) (x c) (y d))
  (= (mem21 (tb2t693 (Tuple2 c1 d1 (t2tb135 x) (t2tb694 y)))
  (tb2t689 (domain_substraction d1 c1 (t2tb132 s) (t2tb689 p))))
  (and (mem21 (tb2t693 (Tuple2 c1 d1 (t2tb135 x) (t2tb694 y))) p)
  (not (mem7 x s))))))

;; mem_domain_substraction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set c)) (x c) (y uni))
  (= (mem (tuple2 c1 b2) (Tuple2 c1 b2 (t2tb135 x) y)
  (domain_substraction b2 c1 (t2tb132 s) p))
  (and (mem (tuple2 c1 b2) (Tuple2 c1 b2 (t2tb135 x) y) p) (not (mem7 x s)))))))

;; mem_domain_substraction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (set (tuple21 a b)))) (x (set (tuple21 a b)))
  (y uni))
  (= (mem (tuple2 (set1 (tuple2 a1 b1)) b2)
  (Tuple2 (set1 (tuple2 a1 b1)) b2 (t2tb11 x) y)
  (domain_substraction b2 (set1 (tuple2 a1 b1)) (t2tb10 s) p))
  (and (mem (tuple2 (set1 (tuple2 a1 b1)) b2)
  (Tuple2 (set1 (tuple2 a1 b1)) b2 (t2tb11 x) y) p) (not (mem4 x s)))))))

;; mem_domain_substraction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (tuple21 a b))) (x (tuple21 a b)) (y uni))
  (= (mem (tuple2 (tuple2 a1 b1) b2) (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) y)
  (domain_substraction b2 (tuple2 a1 b1) (t2tb11 s) p))
  (and (mem (tuple2 (tuple2 a1 b1) b2)
  (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) y) p) (not (mem3 x s)))))))

;; mem_domain_substraction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set b)) (x b) (y uni))
  (= (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) y)
  (domain_substraction b2 b1 (t2tb12 s) p))
  (and (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) y) p) (not (mem2 x s)))))))

;; mem_domain_substraction
  (assert
  (forall ((p (set (tuple21 a b))) (s (set a)) (x a) (y b))
  (= (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y)))
  (tb2t11 (domain_substraction b1 a1 (t2tb1 s) (t2tb11 p))))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y))) p)
  (not (mem1 x s))))))

;; mem_domain_substraction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set a)) (x a) (y uni))
  (= (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) y)
  (domain_substraction b2 a1 (t2tb1 s) p))
  (and (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) y) p) (not (mem1 x s)))))))

;; mem_domain_substraction
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((p uni) (s uni) (x uni) (y uni))
  (= (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) (domain_substraction b2 a2 s p))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) p) (not (mem a2 x s)))))))

(declare-fun range_substraction (ty ty uni uni) uni)

;; range_substraction_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (tuple2 a2 b2))
  (range_substraction b2 a2 x x1)))))

;; mem_range_substraction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (tuple21 (tuple21 a c) (tuple21 b d)))) (x uni)
  (y (tuple21 (tuple21 a c) (tuple21 b d))))
  (= (mem (tuple2 a2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
  (Tuple2 a2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) x (t2tb691 y))
  (range_substraction (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) a2 p
  (t2tb686 t)))
  (and (mem (tuple2 a2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
  (Tuple2 a2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) x (t2tb691 y)) p)
  (not (mem24 y t)))))))

;; mem_range_substraction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (set (tuple21 c d)))) (x uni) (y (set (tuple21 c
  d))))
  (= (mem (tuple2 a2 (set1 (tuple2 c1 d1)))
  (Tuple2 a2 (set1 (tuple2 c1 d1)) x (t2tb689 y))
  (range_substraction (set1 (tuple2 c1 d1)) a2 p (t2tb688 t)))
  (and (mem (tuple2 a2 (set1 (tuple2 c1 d1)))
  (Tuple2 a2 (set1 (tuple2 c1 d1)) x (t2tb689 y)) p) (not (mem22 y t)))))))

;; mem_range_substraction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (tuple21 c d))) (x uni) (y (tuple21 c d)))
  (= (mem (tuple2 a2 (tuple2 c1 d1)) (Tuple2 a2 (tuple2 c1 d1) x (t2tb693 y))
  (range_substraction (tuple2 c1 d1) a2 p (t2tb689 t)))
  (and (mem (tuple2 a2 (tuple2 c1 d1))
  (Tuple2 a2 (tuple2 c1 d1) x (t2tb693 y)) p) (not (mem21 y t)))))))

;; mem_range_substraction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set d)) (x uni) (y d))
  (= (mem (tuple2 a2 d1) (Tuple2 a2 d1 x (t2tb694 y))
  (range_substraction d1 a2 p (t2tb690 t)))
  (and (mem (tuple2 a2 d1) (Tuple2 a2 d1 x (t2tb694 y)) p) (not (mem20 y t)))))))

;; mem_range_substraction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set c)) (x uni) (y c))
  (= (mem (tuple2 a2 c1) (Tuple2 a2 c1 x (t2tb135 y))
  (range_substraction c1 a2 p (t2tb132 t)))
  (and (mem (tuple2 a2 c1) (Tuple2 a2 c1 x (t2tb135 y)) p) (not (mem7 y t)))))))

;; mem_range_substraction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (set (tuple21 a b)))) (x uni) (y (set (tuple21 a
  b))))
  (= (mem (tuple2 a2 (set1 (tuple2 a1 b1)))
  (Tuple2 a2 (set1 (tuple2 a1 b1)) x (t2tb11 y))
  (range_substraction (set1 (tuple2 a1 b1)) a2 p (t2tb10 t)))
  (and (mem (tuple2 a2 (set1 (tuple2 a1 b1)))
  (Tuple2 a2 (set1 (tuple2 a1 b1)) x (t2tb11 y)) p) (not (mem4 y t)))))))

;; mem_range_substraction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (tuple21 a b))) (x uni) (y (tuple21 a b)))
  (= (mem (tuple2 a2 (tuple2 a1 b1)) (Tuple2 a2 (tuple2 a1 b1) x (t2tb13 y))
  (range_substraction (tuple2 a1 b1) a2 p (t2tb11 t)))
  (and (mem (tuple2 a2 (tuple2 a1 b1))
  (Tuple2 a2 (tuple2 a1 b1) x (t2tb13 y)) p) (not (mem3 y t)))))))

;; mem_range_substraction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set b)) (x uni) (y b))
  (= (mem (tuple2 a2 b1) (Tuple2 a2 b1 x (t2tb14 y))
  (range_substraction b1 a2 p (t2tb12 t)))
  (and (mem (tuple2 a2 b1) (Tuple2 a2 b1 x (t2tb14 y)) p) (not (mem2 y t)))))))

;; mem_range_substraction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set a)) (x uni) (y a))
  (= (mem (tuple2 a2 a1) (Tuple2 a2 a1 x (t2tb2 y))
  (range_substraction a1 a2 p (t2tb1 t)))
  (and (mem (tuple2 a2 a1) (Tuple2 a2 a1 x (t2tb2 y)) p) (not (mem1 y t)))))))

;; mem_range_substraction
  (assert
  (forall ((p (set (tuple21 (tuple21 a c) (tuple21 b d)))) (t (set (tuple21 b
  d))) (x (tuple21 a c)) (y (tuple21 b d)))
  (= (mem24
  (tb2t691 (Tuple2 (tuple2 a1 c1) (tuple2 b1 d1) (t2tb133 x) (t2tb692 y)))
  (tb2t686
  (range_substraction (tuple2 b1 d1) (tuple2 a1 c1) (t2tb686 p) (t2tb687 t))))
  (and (mem24
  (tb2t691 (Tuple2 (tuple2 a1 c1) (tuple2 b1 d1) (t2tb133 x) (t2tb692 y))) p)
  (not (mem (tuple2 b1 d1) (t2tb692 y) (t2tb687 t)))))))

;; mem_range_substraction
  (assert
  (forall ((p (set (tuple21 c d))) (t (set d)) (x c) (y d))
  (= (mem21 (tb2t693 (Tuple2 c1 d1 (t2tb135 x) (t2tb694 y)))
  (tb2t689 (range_substraction d1 c1 (t2tb689 p) (t2tb690 t))))
  (and (mem21 (tb2t693 (Tuple2 c1 d1 (t2tb135 x) (t2tb694 y))) p)
  (not (mem20 y t))))))

;; mem_range_substraction
  (assert
  (forall ((p (set (tuple21 a b))) (t (set b)) (x a) (y b))
  (= (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y)))
  (tb2t11 (range_substraction b1 a1 (t2tb11 p) (t2tb12 t))))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y))) p)
  (not (mem2 y t))))))

;; mem_range_substraction
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((p uni) (t uni) (x uni) (y uni))
  (= (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) (range_substraction b2 a2 p t))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) p) (not (mem b2 y t)))))))

(declare-fun image (ty ty uni uni) uni)

;; image_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 b2) (image b2 a2 x x1)))))

;; mem_image
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (w uni) (x (tuple21 (tuple21 a c) (tuple21 b d))))
  (and
  (=> (mem24 x
  (tb2t686 (image (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) a2 p w)))
  (exists ((a3 uni))
  (and (sort a2 a3)
  (and (mem a2 a3 w) (mem (tuple2 a2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
  (Tuple2 a2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) a3 (t2tb691 x)) p)))))
  (=>
  (exists ((a3 uni))
  (and (mem a2 a3 w) (mem (tuple2 a2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
  (Tuple2 a2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) a3 (t2tb691 x)) p)))
  (mem24 x (tb2t686 (image (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) a2 p w))))))))

;; mem_image
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (w uni) (x (set (tuple21 c d))))
  (and
  (=> (mem22 x (tb2t688 (image (set1 (tuple2 c1 d1)) a2 p w)))
  (exists ((a3 uni))
  (and (sort a2 a3)
  (and (mem a2 a3 w) (mem (tuple2 a2 (set1 (tuple2 c1 d1)))
  (Tuple2 a2 (set1 (tuple2 c1 d1)) a3 (t2tb689 x)) p)))))
  (=>
  (exists ((a3 uni))
  (and (mem a2 a3 w) (mem (tuple2 a2 (set1 (tuple2 c1 d1)))
  (Tuple2 a2 (set1 (tuple2 c1 d1)) a3 (t2tb689 x)) p))) (mem22 x
  (tb2t688 (image (set1 (tuple2 c1 d1)) a2 p w))))))))

;; mem_image
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (w uni) (x (tuple21 c d)))
  (and
  (=> (mem21 x (tb2t689 (image (tuple2 c1 d1) a2 p w)))
  (exists ((a3 uni))
  (and (sort a2 a3)
  (and (mem a2 a3 w) (mem (tuple2 a2 (tuple2 c1 d1))
  (Tuple2 a2 (tuple2 c1 d1) a3 (t2tb693 x)) p)))))
  (=>
  (exists ((a3 uni))
  (and (mem a2 a3 w) (mem (tuple2 a2 (tuple2 c1 d1))
  (Tuple2 a2 (tuple2 c1 d1) a3 (t2tb693 x)) p))) (mem21 x
  (tb2t689 (image (tuple2 c1 d1) a2 p w))))))))

;; mem_image
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (w uni) (x d))
  (and
  (=> (mem20 x (tb2t690 (image d1 a2 p w)))
  (exists ((a3 uni))
  (and (sort a2 a3)
  (and (mem a2 a3 w) (mem (tuple2 a2 d1) (Tuple2 a2 d1 a3 (t2tb694 x)) p)))))
  (=>
  (exists ((a3 uni))
  (and (mem a2 a3 w) (mem (tuple2 a2 d1) (Tuple2 a2 d1 a3 (t2tb694 x)) p)))
  (mem20 x (tb2t690 (image d1 a2 p w))))))))

;; mem_image
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (w uni) (x c))
  (and
  (=> (mem7 x (tb2t132 (image c1 a2 p w)))
  (exists ((a3 uni))
  (and (sort a2 a3)
  (and (mem a2 a3 w) (mem (tuple2 a2 c1) (Tuple2 a2 c1 a3 (t2tb135 x)) p)))))
  (=>
  (exists ((a3 uni))
  (and (mem a2 a3 w) (mem (tuple2 a2 c1) (Tuple2 a2 c1 a3 (t2tb135 x)) p)))
  (mem7 x (tb2t132 (image c1 a2 p w))))))))

;; mem_image
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (w uni) (x (set (tuple21 a b))))
  (and
  (=> (mem4 x (tb2t10 (image (set1 (tuple2 a1 b1)) a2 p w)))
  (exists ((a3 uni))
  (and (sort a2 a3)
  (and (mem a2 a3 w) (mem (tuple2 a2 (set1 (tuple2 a1 b1)))
  (Tuple2 a2 (set1 (tuple2 a1 b1)) a3 (t2tb11 x)) p)))))
  (=>
  (exists ((a3 uni))
  (and (mem a2 a3 w) (mem (tuple2 a2 (set1 (tuple2 a1 b1)))
  (Tuple2 a2 (set1 (tuple2 a1 b1)) a3 (t2tb11 x)) p))) (mem4 x
  (tb2t10 (image (set1 (tuple2 a1 b1)) a2 p w))))))))

;; mem_image
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (w uni) (x (tuple21 a b)))
  (and
  (=> (mem3 x (tb2t11 (image (tuple2 a1 b1) a2 p w)))
  (exists ((a3 uni))
  (and (sort a2 a3)
  (and (mem a2 a3 w) (mem (tuple2 a2 (tuple2 a1 b1))
  (Tuple2 a2 (tuple2 a1 b1) a3 (t2tb13 x)) p)))))
  (=>
  (exists ((a3 uni))
  (and (mem a2 a3 w) (mem (tuple2 a2 (tuple2 a1 b1))
  (Tuple2 a2 (tuple2 a1 b1) a3 (t2tb13 x)) p))) (mem3 x
  (tb2t11 (image (tuple2 a1 b1) a2 p w))))))))

;; mem_image
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (w uni) (x b))
  (and
  (=> (mem2 x (tb2t12 (image b1 a2 p w)))
  (exists ((a3 uni))
  (and (sort a2 a3)
  (and (mem a2 a3 w) (mem (tuple2 a2 b1) (Tuple2 a2 b1 a3 (t2tb14 x)) p)))))
  (=>
  (exists ((a3 uni))
  (and (mem a2 a3 w) (mem (tuple2 a2 b1) (Tuple2 a2 b1 a3 (t2tb14 x)) p)))
  (mem2 x (tb2t12 (image b1 a2 p w))))))))

;; mem_image
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (w uni) (x a))
  (and
  (=> (mem1 x (tb2t1 (image a1 a2 p w)))
  (exists ((a3 uni))
  (and (sort a2 a3)
  (and (mem a2 a3 w) (mem (tuple2 a2 a1) (Tuple2 a2 a1 a3 (t2tb2 x)) p)))))
  (=>
  (exists ((a3 uni))
  (and (mem a2 a3 w) (mem (tuple2 a2 a1) (Tuple2 a2 a1 a3 (t2tb2 x)) p)))
  (mem1 x (tb2t1 (image a1 a2 p w))))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  (tuple21 (tuple21 a c) (tuple21 b d))))) (w (set (tuple21 (tuple21 a c)
  (tuple21 b d)))) (x (tuple21 (tuple21 a c) (tuple21 b d))))
  (= (mem24 x
  (tb2t686
  (image (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))
  (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb721 p) (t2tb686 w))))
  (exists ((a2 (tuple21 (tuple21 a c) (tuple21 b d))))
  (and (mem24 a2 w) (mem
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))
  (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))
  (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb691 a2) (t2tb691 x))
  (t2tb721 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  (set (tuple21 c d))))) (w (set (tuple21 (tuple21 a c) (tuple21 b d))))
  (x (set (tuple21 c d))))
  (= (mem22 x
  (tb2t688
  (image (set1 (tuple2 c1 d1)) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))
  (t2tb725 p) (t2tb686 w))))
  (exists ((a2 (tuple21 (tuple21 a c) (tuple21 b d))))
  (and (mem24 a2 w) (mem
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (set1 (tuple2 c1 d1)))
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (set1 (tuple2 c1 d1))
  (t2tb691 a2) (t2tb689 x)) (t2tb725 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) (tuple21 c
  d)))) (w (set (tuple21 (tuple21 a c) (tuple21 b d)))) (x (tuple21 c d)))
  (= (mem21 x
  (tb2t689
  (image (tuple2 c1 d1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb727 p)
  (t2tb686 w))))
  (exists ((a2 (tuple21 (tuple21 a c) (tuple21 b d))))
  (and (mem24 a2 w) (mem
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 c1 d1))
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 c1 d1) (t2tb691 a2)
  (t2tb693 x)) (t2tb727 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) d)))
  (w (set (tuple21 (tuple21 a c) (tuple21 b d)))) (x d))
  (= (mem20 x
  (tb2t690
  (image d1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb729 p) (t2tb686 w))))
  (exists ((a2 (tuple21 (tuple21 a c) (tuple21 b d))))
  (and (mem24 a2 w) (mem (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) d1)
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) d1 (t2tb691 a2) (t2tb694 x))
  (t2tb729 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) c)))
  (w (set (tuple21 (tuple21 a c) (tuple21 b d)))) (x c))
  (= (mem7 x
  (tb2t132
  (image c1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb733 p) (t2tb686 w))))
  (exists ((a2 (tuple21 (tuple21 a c) (tuple21 b d))))
  (and (mem24 a2 w) (mem (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) c1)
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) c1 (t2tb691 a2) (t2tb135 x))
  (t2tb733 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d))
  (set (tuple21 a b))))) (w (set (tuple21 (tuple21 a c) (tuple21 b d))))
  (x (set (tuple21 a b))))
  (= (mem4 x
  (tb2t10
  (image (set1 (tuple2 a1 b1)) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))
  (t2tb735 p) (t2tb686 w))))
  (exists ((a2 (tuple21 (tuple21 a c) (tuple21 b d))))
  (and (mem24 a2 w) (mem
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (set1 (tuple2 a1 b1)))
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (set1 (tuple2 a1 b1))
  (t2tb691 a2) (t2tb11 x)) (t2tb735 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) (tuple21 a
  b)))) (w (set (tuple21 (tuple21 a c) (tuple21 b d)))) (x (tuple21 a b)))
  (= (mem3 x
  (tb2t11
  (image (tuple2 a1 b1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb737 p)
  (t2tb686 w))))
  (exists ((a2 (tuple21 (tuple21 a c) (tuple21 b d))))
  (and (mem24 a2 w) (mem
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 a1 b1))
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 a1 b1) (t2tb691 a2)
  (t2tb13 x)) (t2tb737 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) b)))
  (w (set (tuple21 (tuple21 a c) (tuple21 b d)))) (x b))
  (= (mem2 x
  (tb2t12
  (image b1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb739 p) (t2tb686 w))))
  (exists ((a2 (tuple21 (tuple21 a c) (tuple21 b d))))
  (and (mem24 a2 w) (mem (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) b1)
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) b1 (t2tb691 a2) (t2tb14 x))
  (t2tb739 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 (tuple21 a c) (tuple21 b d)) a)))
  (w (set (tuple21 (tuple21 a c) (tuple21 b d)))) (x a))
  (= (mem1 x
  (tb2t1
  (image a1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb741 p) (t2tb686 w))))
  (exists ((a2 (tuple21 (tuple21 a c) (tuple21 b d))))
  (and (mem24 a2 w) (mem (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) a1)
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) a1 (t2tb691 a2) (t2tb2 x))
  (t2tb741 p)))))))

;; mem_image
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (w (set (tuple21 (tuple21 a c) (tuple21 b d)))) (x uni))
  (= (mem b2 x
  (image b2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) p (t2tb686 w)))
  (exists ((a2 (tuple21 (tuple21 a c) (tuple21 b d))))
  (and (mem24 a2 w) (mem (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) b2)
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) b2 (t2tb691 a2) x) p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 c d)) (tuple21 (tuple21 a c)
  (tuple21 b d))))) (w (set (set (tuple21 c d)))) (x (tuple21 (tuple21 a c)
  (tuple21 b d))))
  (= (mem24 x
  (tb2t686
  (image (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (set1 (tuple2 c1 d1))
  (t2tb769 p) (t2tb688 w))))
  (exists ((a2 (set (tuple21 c d))))
  (and (mem22 a2 w) (mem
  (tuple2 (set1 (tuple2 c1 d1)) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
  (Tuple2 (set1 (tuple2 c1 d1)) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))
  (t2tb689 a2) (t2tb691 x)) (t2tb769 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 c d)) (set (tuple21 c d)))))
  (w (set (set (tuple21 c d)))) (x (set (tuple21 c d))))
  (= (mem22 x
  (tb2t688
  (image (set1 (tuple2 c1 d1)) (set1 (tuple2 c1 d1)) (t2tb773 p) (t2tb688 w))))
  (exists ((a2 (set (tuple21 c d))))
  (and (mem22 a2 w) (mem (tuple2 (set1 (tuple2 c1 d1)) (set1 (tuple2 c1 d1)))
  (Tuple2 (set1 (tuple2 c1 d1)) (set1 (tuple2 c1 d1)) (t2tb689 a2)
  (t2tb689 x)) (t2tb773 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 c d)) (tuple21 c d))))
  (w (set (set (tuple21 c d)))) (x (tuple21 c d)))
  (= (mem21 x
  (tb2t689
  (image (tuple2 c1 d1) (set1 (tuple2 c1 d1)) (t2tb775 p) (t2tb688 w))))
  (exists ((a2 (set (tuple21 c d))))
  (and (mem22 a2 w) (mem (tuple2 (set1 (tuple2 c1 d1)) (tuple2 c1 d1))
  (Tuple2 (set1 (tuple2 c1 d1)) (tuple2 c1 d1) (t2tb689 a2) (t2tb693 x))
  (t2tb775 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 c d)) d))) (w (set (set (tuple21 c
  d)))) (x d))
  (= (mem20 x
  (tb2t690 (image d1 (set1 (tuple2 c1 d1)) (t2tb777 p) (t2tb688 w))))
  (exists ((a2 (set (tuple21 c d))))
  (and (mem22 a2 w) (mem (tuple2 (set1 (tuple2 c1 d1)) d1)
  (Tuple2 (set1 (tuple2 c1 d1)) d1 (t2tb689 a2) (t2tb694 x)) (t2tb777 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 c d)) c))) (w (set (set (tuple21 c
  d)))) (x c))
  (= (mem7 x
  (tb2t132 (image c1 (set1 (tuple2 c1 d1)) (t2tb781 p) (t2tb688 w))))
  (exists ((a2 (set (tuple21 c d))))
  (and (mem22 a2 w) (mem (tuple2 (set1 (tuple2 c1 d1)) c1)
  (Tuple2 (set1 (tuple2 c1 d1)) c1 (t2tb689 a2) (t2tb135 x)) (t2tb781 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 c d)) (set (tuple21 a b)))))
  (w (set (set (tuple21 c d)))) (x (set (tuple21 a b))))
  (= (mem4 x
  (tb2t10
  (image (set1 (tuple2 a1 b1)) (set1 (tuple2 c1 d1)) (t2tb783 p) (t2tb688 w))))
  (exists ((a2 (set (tuple21 c d))))
  (and (mem22 a2 w) (mem (tuple2 (set1 (tuple2 c1 d1)) (set1 (tuple2 a1 b1)))
  (Tuple2 (set1 (tuple2 c1 d1)) (set1 (tuple2 a1 b1)) (t2tb689 a2)
  (t2tb11 x)) (t2tb783 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 c d)) (tuple21 a b))))
  (w (set (set (tuple21 c d)))) (x (tuple21 a b)))
  (= (mem3 x
  (tb2t11
  (image (tuple2 a1 b1) (set1 (tuple2 c1 d1)) (t2tb785 p) (t2tb688 w))))
  (exists ((a2 (set (tuple21 c d))))
  (and (mem22 a2 w) (mem (tuple2 (set1 (tuple2 c1 d1)) (tuple2 a1 b1))
  (Tuple2 (set1 (tuple2 c1 d1)) (tuple2 a1 b1) (t2tb689 a2) (t2tb13 x))
  (t2tb785 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 c d)) b))) (w (set (set (tuple21 c
  d)))) (x b))
  (= (mem2 x
  (tb2t12 (image b1 (set1 (tuple2 c1 d1)) (t2tb787 p) (t2tb688 w))))
  (exists ((a2 (set (tuple21 c d))))
  (and (mem22 a2 w) (mem (tuple2 (set1 (tuple2 c1 d1)) b1)
  (Tuple2 (set1 (tuple2 c1 d1)) b1 (t2tb689 a2) (t2tb14 x)) (t2tb787 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 c d)) a))) (w (set (set (tuple21 c
  d)))) (x a))
  (= (mem1 x
  (tb2t1 (image a1 (set1 (tuple2 c1 d1)) (t2tb789 p) (t2tb688 w))))
  (exists ((a2 (set (tuple21 c d))))
  (and (mem22 a2 w) (mem (tuple2 (set1 (tuple2 c1 d1)) a1)
  (Tuple2 (set1 (tuple2 c1 d1)) a1 (t2tb689 a2) (t2tb2 x)) (t2tb789 p)))))))

;; mem_image
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (w (set (set (tuple21 c d)))) (x uni))
  (= (mem b2 x (image b2 (set1 (tuple2 c1 d1)) p (t2tb688 w)))
  (exists ((a2 (set (tuple21 c d))))
  (and (mem22 a2 w) (mem (tuple2 (set1 (tuple2 c1 d1)) b2)
  (Tuple2 (set1 (tuple2 c1 d1)) b2 (t2tb689 a2) x) p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 c d) (tuple21 (tuple21 a c) (tuple21 b
  d))))) (w (set (tuple21 c d))) (x (tuple21 (tuple21 a c) (tuple21 b d))))
  (= (mem24 x
  (tb2t686
  (image (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 c1 d1) (t2tb793 p)
  (t2tb689 w))))
  (exists ((a2 (tuple21 c d)))
  (and (mem21 a2 w) (mem
  (tuple2 (tuple2 c1 d1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
  (Tuple2 (tuple2 c1 d1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb693 a2)
  (t2tb691 x)) (t2tb793 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 c d) (set (tuple21 c d)))))
  (w (set (tuple21 c d))) (x (set (tuple21 c d))))
  (= (mem22 x
  (tb2t688
  (image (set1 (tuple2 c1 d1)) (tuple2 c1 d1) (t2tb797 p) (t2tb689 w))))
  (exists ((a2 (tuple21 c d)))
  (and (mem21 a2 w) (mem (tuple2 (tuple2 c1 d1) (set1 (tuple2 c1 d1)))
  (Tuple2 (tuple2 c1 d1) (set1 (tuple2 c1 d1)) (t2tb693 a2) (t2tb689 x))
  (t2tb797 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 c d) (tuple21 c d)))) (w (set (tuple21 c
  d))) (x (tuple21 c d)))
  (= (mem21 x
  (tb2t689 (image (tuple2 c1 d1) (tuple2 c1 d1) (t2tb799 p) (t2tb689 w))))
  (exists ((a2 (tuple21 c d)))
  (and (mem21 a2 w) (mem (tuple2 (tuple2 c1 d1) (tuple2 c1 d1))
  (Tuple2 (tuple2 c1 d1) (tuple2 c1 d1) (t2tb693 a2) (t2tb693 x))
  (t2tb799 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 c d) d))) (w (set (tuple21 c d))) (x d))
  (= (mem20 x (tb2t690 (image d1 (tuple2 c1 d1) (t2tb801 p) (t2tb689 w))))
  (exists ((a2 (tuple21 c d)))
  (and (mem21 a2 w) (mem (tuple2 (tuple2 c1 d1) d1)
  (Tuple2 (tuple2 c1 d1) d1 (t2tb693 a2) (t2tb694 x)) (t2tb801 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 c d) c))) (w (set (tuple21 c d))) (x c))
  (= (mem7 x (tb2t132 (image c1 (tuple2 c1 d1) (t2tb805 p) (t2tb689 w))))
  (exists ((a2 (tuple21 c d)))
  (and (mem21 a2 w) (mem (tuple2 (tuple2 c1 d1) c1)
  (Tuple2 (tuple2 c1 d1) c1 (t2tb693 a2) (t2tb135 x)) (t2tb805 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 c d) (set (tuple21 a b)))))
  (w (set (tuple21 c d))) (x (set (tuple21 a b))))
  (= (mem4 x
  (tb2t10
  (image (set1 (tuple2 a1 b1)) (tuple2 c1 d1) (t2tb807 p) (t2tb689 w))))
  (exists ((a2 (tuple21 c d)))
  (and (mem21 a2 w) (mem (tuple2 (tuple2 c1 d1) (set1 (tuple2 a1 b1)))
  (Tuple2 (tuple2 c1 d1) (set1 (tuple2 a1 b1)) (t2tb693 a2) (t2tb11 x))
  (t2tb807 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 c d) (tuple21 a b)))) (w (set (tuple21 c
  d))) (x (tuple21 a b)))
  (= (mem3 x
  (tb2t11 (image (tuple2 a1 b1) (tuple2 c1 d1) (t2tb809 p) (t2tb689 w))))
  (exists ((a2 (tuple21 c d)))
  (and (mem21 a2 w) (mem (tuple2 (tuple2 c1 d1) (tuple2 a1 b1))
  (Tuple2 (tuple2 c1 d1) (tuple2 a1 b1) (t2tb693 a2) (t2tb13 x))
  (t2tb809 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 c d) b))) (w (set (tuple21 c d))) (x b))
  (= (mem2 x (tb2t12 (image b1 (tuple2 c1 d1) (t2tb811 p) (t2tb689 w))))
  (exists ((a2 (tuple21 c d)))
  (and (mem21 a2 w) (mem (tuple2 (tuple2 c1 d1) b1)
  (Tuple2 (tuple2 c1 d1) b1 (t2tb693 a2) (t2tb14 x)) (t2tb811 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 c d) a))) (w (set (tuple21 c d))) (x a))
  (= (mem1 x (tb2t1 (image a1 (tuple2 c1 d1) (t2tb813 p) (t2tb689 w))))
  (exists ((a2 (tuple21 c d)))
  (and (mem21 a2 w) (mem (tuple2 (tuple2 c1 d1) a1)
  (Tuple2 (tuple2 c1 d1) a1 (t2tb693 a2) (t2tb2 x)) (t2tb813 p)))))))

;; mem_image
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (w (set (tuple21 c d))) (x uni))
  (= (mem b2 x (image b2 (tuple2 c1 d1) p (t2tb689 w)))
  (exists ((a2 (tuple21 c d)))
  (and (mem21 a2 w) (mem (tuple2 (tuple2 c1 d1) b2)
  (Tuple2 (tuple2 c1 d1) b2 (t2tb693 a2) x) p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 d (tuple21 (tuple21 a c) (tuple21 b d)))))
  (w (set d)) (x (tuple21 (tuple21 a c) (tuple21 b d))))
  (= (mem24 x
  (tb2t686
  (image (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) d1 (t2tb817 p) (t2tb690 w))))
  (exists ((a2 d))
  (and (mem20 a2 w) (mem (tuple2 d1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
  (Tuple2 d1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb694 a2) (t2tb691 x))
  (t2tb817 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 d (set (tuple21 c d))))) (w (set d))
  (x (set (tuple21 c d))))
  (= (mem22 x
  (tb2t688 (image (set1 (tuple2 c1 d1)) d1 (t2tb821 p) (t2tb690 w))))
  (exists ((a2 d))
  (and (mem20 a2 w) (mem (tuple2 d1 (set1 (tuple2 c1 d1)))
  (Tuple2 d1 (set1 (tuple2 c1 d1)) (t2tb694 a2) (t2tb689 x)) (t2tb821 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 d (tuple21 c d)))) (w (set d)) (x (tuple21 c d)))
  (= (mem21 x (tb2t689 (image (tuple2 c1 d1) d1 (t2tb823 p) (t2tb690 w))))
  (exists ((a2 d))
  (and (mem20 a2 w) (mem (tuple2 d1 (tuple2 c1 d1))
  (Tuple2 d1 (tuple2 c1 d1) (t2tb694 a2) (t2tb693 x)) (t2tb823 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 d d))) (w (set d)) (x d))
  (= (mem20 x (tb2t690 (image d1 d1 (t2tb825 p) (t2tb690 w))))
  (exists ((a2 d))
  (and (mem20 a2 w) (mem (tuple2 d1 d1)
  (Tuple2 d1 d1 (t2tb694 a2) (t2tb694 x)) (t2tb825 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 d c))) (w (set d)) (x c))
  (= (mem7 x (tb2t132 (image c1 d1 (t2tb829 p) (t2tb690 w))))
  (exists ((a2 d))
  (and (mem20 a2 w) (mem (tuple2 d1 c1)
  (Tuple2 d1 c1 (t2tb694 a2) (t2tb135 x)) (t2tb829 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 d (set (tuple21 a b))))) (w (set d))
  (x (set (tuple21 a b))))
  (= (mem4 x
  (tb2t10 (image (set1 (tuple2 a1 b1)) d1 (t2tb831 p) (t2tb690 w))))
  (exists ((a2 d))
  (and (mem20 a2 w) (mem (tuple2 d1 (set1 (tuple2 a1 b1)))
  (Tuple2 d1 (set1 (tuple2 a1 b1)) (t2tb694 a2) (t2tb11 x)) (t2tb831 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 d (tuple21 a b)))) (w (set d)) (x (tuple21 a b)))
  (= (mem3 x (tb2t11 (image (tuple2 a1 b1) d1 (t2tb833 p) (t2tb690 w))))
  (exists ((a2 d))
  (and (mem20 a2 w) (mem (tuple2 d1 (tuple2 a1 b1))
  (Tuple2 d1 (tuple2 a1 b1) (t2tb694 a2) (t2tb13 x)) (t2tb833 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 d b))) (w (set d)) (x b))
  (= (mem2 x (tb2t12 (image b1 d1 (t2tb835 p) (t2tb690 w))))
  (exists ((a2 d))
  (and (mem20 a2 w) (mem (tuple2 d1 b1)
  (Tuple2 d1 b1 (t2tb694 a2) (t2tb14 x)) (t2tb835 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 d a))) (w (set d)) (x a))
  (= (mem1 x (tb2t1 (image a1 d1 (t2tb837 p) (t2tb690 w))))
  (exists ((a2 d))
  (and (mem20 a2 w) (mem (tuple2 d1 a1) (Tuple2 d1 a1 (t2tb694 a2) (t2tb2 x))
  (t2tb837 p)))))))

;; mem_image
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (w (set d)) (x uni))
  (= (mem b2 x (image b2 d1 p (t2tb690 w)))
  (exists ((a2 d))
  (and (mem20 a2 w) (mem (tuple2 d1 b2) (Tuple2 d1 b2 (t2tb694 a2) x) p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a c) (tuple21 b d)))) (w (set (tuple21 a
  c))) (x (tuple21 b d)))
  (= (mem (tuple2 b1 d1) (t2tb692 x)
  (image (tuple2 b1 d1) (tuple2 a1 c1) (t2tb686 p) (t2tb129 w)))
  (exists ((a2 (tuple21 a c)))
  (and (mem (tuple2 a1 c1) (t2tb133 a2) (t2tb129 w)) (mem24
  (tb2t691 (Tuple2 (tuple2 a1 c1) (tuple2 b1 d1) (t2tb133 a2) (t2tb692 x)))
  p))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 c (tuple21 (tuple21 a c) (tuple21 b d)))))
  (w (set c)) (x (tuple21 (tuple21 a c) (tuple21 b d))))
  (= (mem24 x
  (tb2t686
  (image (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) c1 (t2tb851 p) (t2tb132 w))))
  (exists ((a2 c))
  (and (mem7 a2 w) (mem (tuple2 c1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
  (Tuple2 c1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb135 a2) (t2tb691 x))
  (t2tb851 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 c (set (tuple21 c d))))) (w (set c))
  (x (set (tuple21 c d))))
  (= (mem22 x
  (tb2t688 (image (set1 (tuple2 c1 d1)) c1 (t2tb855 p) (t2tb132 w))))
  (exists ((a2 c))
  (and (mem7 a2 w) (mem (tuple2 c1 (set1 (tuple2 c1 d1)))
  (Tuple2 c1 (set1 (tuple2 c1 d1)) (t2tb135 a2) (t2tb689 x)) (t2tb855 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 c (tuple21 c d)))) (w (set c)) (x (tuple21 c d)))
  (= (mem21 x (tb2t689 (image (tuple2 c1 d1) c1 (t2tb857 p) (t2tb132 w))))
  (exists ((a2 c))
  (and (mem7 a2 w) (mem (tuple2 c1 (tuple2 c1 d1))
  (Tuple2 c1 (tuple2 c1 d1) (t2tb135 a2) (t2tb693 x)) (t2tb857 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 c d))) (w (set c)) (x d))
  (= (mem20 x (tb2t690 (image d1 c1 (t2tb689 p) (t2tb132 w))))
  (exists ((a2 c))
  (and (mem7 a2 w) (mem21 (tb2t693 (Tuple2 c1 d1 (t2tb135 a2) (t2tb694 x)))
  p))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 c c))) (w (set c)) (x c))
  (= (mem7 x (tb2t132 (image c1 c1 (t2tb216 p) (t2tb132 w))))
  (exists ((a2 c))
  (and (mem7 a2 w) (mem (tuple2 c1 c1)
  (Tuple2 c1 c1 (t2tb135 a2) (t2tb135 x)) (t2tb216 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 c (set (tuple21 a b))))) (w (set c))
  (x (set (tuple21 a b))))
  (= (mem4 x
  (tb2t10 (image (set1 (tuple2 a1 b1)) c1 (t2tb218 p) (t2tb132 w))))
  (exists ((a2 c))
  (and (mem7 a2 w) (mem (tuple2 c1 (set1 (tuple2 a1 b1)))
  (Tuple2 c1 (set1 (tuple2 a1 b1)) (t2tb135 a2) (t2tb11 x)) (t2tb218 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 c (tuple21 a b)))) (w (set c)) (x (tuple21 a b)))
  (= (mem3 x (tb2t11 (image (tuple2 a1 b1) c1 (t2tb220 p) (t2tb132 w))))
  (exists ((a2 c))
  (and (mem7 a2 w) (mem (tuple2 c1 (tuple2 a1 b1))
  (Tuple2 c1 (tuple2 a1 b1) (t2tb135 a2) (t2tb13 x)) (t2tb220 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 c b))) (w (set c)) (x b))
  (= (mem2 x (tb2t12 (image b1 c1 (t2tb222 p) (t2tb132 w))))
  (exists ((a2 c))
  (and (mem7 a2 w) (mem (tuple2 c1 b1) (Tuple2 c1 b1 (t2tb135 a2) (t2tb14 x))
  (t2tb222 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 c a))) (w (set c)) (x a))
  (= (mem1 x (tb2t1 (image a1 c1 (t2tb224 p) (t2tb132 w))))
  (exists ((a2 c))
  (and (mem7 a2 w) (mem (tuple2 c1 a1) (Tuple2 c1 a1 (t2tb135 a2) (t2tb2 x))
  (t2tb224 p)))))))

;; mem_image
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (w (set c)) (x uni))
  (= (mem b2 x (image b2 c1 p (t2tb132 w)))
  (exists ((a2 c))
  (and (mem7 a2 w) (mem (tuple2 c1 b2) (Tuple2 c1 b2 (t2tb135 a2) x) p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a b)) (tuple21 (tuple21 a c)
  (tuple21 b d))))) (w (set (set (tuple21 a b)))) (x (tuple21 (tuple21 a c)
  (tuple21 b d))))
  (= (mem24 x
  (tb2t686
  (image (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (set1 (tuple2 a1 b1))
  (t2tb861 p) (t2tb10 w))))
  (exists ((a2 (set (tuple21 a b))))
  (and (mem4 a2 w) (mem
  (tuple2 (set1 (tuple2 a1 b1)) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
  (Tuple2 (set1 (tuple2 a1 b1)) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))
  (t2tb11 a2) (t2tb691 x)) (t2tb861 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a b)) (set (tuple21 c d)))))
  (w (set (set (tuple21 a b)))) (x (set (tuple21 c d))))
  (= (mem22 x
  (tb2t688
  (image (set1 (tuple2 c1 d1)) (set1 (tuple2 a1 b1)) (t2tb865 p) (t2tb10 w))))
  (exists ((a2 (set (tuple21 a b))))
  (and (mem4 a2 w) (mem (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 c1 d1)))
  (Tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 c1 d1)) (t2tb11 a2)
  (t2tb689 x)) (t2tb865 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a b)) (tuple21 c d))))
  (w (set (set (tuple21 a b)))) (x (tuple21 c d)))
  (= (mem21 x
  (tb2t689
  (image (tuple2 c1 d1) (set1 (tuple2 a1 b1)) (t2tb867 p) (t2tb10 w))))
  (exists ((a2 (set (tuple21 a b))))
  (and (mem4 a2 w) (mem (tuple2 (set1 (tuple2 a1 b1)) (tuple2 c1 d1))
  (Tuple2 (set1 (tuple2 a1 b1)) (tuple2 c1 d1) (t2tb11 a2) (t2tb693 x))
  (t2tb867 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a b)) d))) (w (set (set (tuple21 a
  b)))) (x d))
  (= (mem20 x
  (tb2t690 (image d1 (set1 (tuple2 a1 b1)) (t2tb869 p) (t2tb10 w))))
  (exists ((a2 (set (tuple21 a b))))
  (and (mem4 a2 w) (mem (tuple2 (set1 (tuple2 a1 b1)) d1)
  (Tuple2 (set1 (tuple2 a1 b1)) d1 (t2tb11 a2) (t2tb694 x)) (t2tb869 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a b)) c))) (w (set (set (tuple21 a
  b)))) (x c))
  (= (mem7 x
  (tb2t132 (image c1 (set1 (tuple2 a1 b1)) (t2tb234 p) (t2tb10 w))))
  (exists ((a2 (set (tuple21 a b))))
  (and (mem4 a2 w) (mem (tuple2 (set1 (tuple2 a1 b1)) c1)
  (Tuple2 (set1 (tuple2 a1 b1)) c1 (t2tb11 a2) (t2tb135 x)) (t2tb234 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a b)) (set (tuple21 a b)))))
  (w (set (set (tuple21 a b)))) (x (set (tuple21 a b))))
  (= (mem4 x
  (tb2t10
  (image (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1)) (t2tb15 p) (t2tb10 w))))
  (exists ((a2 (set (tuple21 a b))))
  (and (mem4 a2 w) (mem (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1)))
  (Tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1)) (t2tb11 a2) (t2tb11 x))
  (t2tb15 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a b)) (tuple21 a b))))
  (w (set (set (tuple21 a b)))) (x (tuple21 a b)))
  (= (mem3 x
  (tb2t11 (image (tuple2 a1 b1) (set1 (tuple2 a1 b1)) (t2tb17 p) (t2tb10 w))))
  (exists ((a2 (set (tuple21 a b))))
  (and (mem4 a2 w) (mem (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 b1))
  (Tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 b1) (t2tb11 a2) (t2tb13 x))
  (t2tb17 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a b)) b))) (w (set (set (tuple21 a
  b)))) (x b))
  (= (mem2 x (tb2t12 (image b1 (set1 (tuple2 a1 b1)) (t2tb19 p) (t2tb10 w))))
  (exists ((a2 (set (tuple21 a b))))
  (and (mem4 a2 w) (mem (tuple2 (set1 (tuple2 a1 b1)) b1)
  (Tuple2 (set1 (tuple2 a1 b1)) b1 (t2tb11 a2) (t2tb14 x)) (t2tb19 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a b)) a))) (w (set (set (tuple21 a
  b)))) (x a))
  (= (mem1 x (tb2t1 (image a1 (set1 (tuple2 a1 b1)) (t2tb22 p) (t2tb10 w))))
  (exists ((a2 (set (tuple21 a b))))
  (and (mem4 a2 w) (mem (tuple2 (set1 (tuple2 a1 b1)) a1)
  (Tuple2 (set1 (tuple2 a1 b1)) a1 (t2tb11 a2) (t2tb2 x)) (t2tb22 p)))))))

;; mem_image
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (w (set (set (tuple21 a b)))) (x uni))
  (= (mem b2 x (image b2 (set1 (tuple2 a1 b1)) p (t2tb10 w)))
  (exists ((a2 (set (tuple21 a b))))
  (and (mem4 a2 w) (mem (tuple2 (set1 (tuple2 a1 b1)) b2)
  (Tuple2 (set1 (tuple2 a1 b1)) b2 (t2tb11 a2) x) p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) (tuple21 (tuple21 a c) (tuple21 b
  d))))) (w (set (tuple21 a b))) (x (tuple21 (tuple21 a c) (tuple21 b d))))
  (= (mem24 x
  (tb2t686
  (image (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (tuple2 a1 b1) (t2tb873 p)
  (t2tb11 w))))
  (exists ((a2 (tuple21 a b)))
  (and (mem3 a2 w) (mem
  (tuple2 (tuple2 a1 b1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
  (Tuple2 (tuple2 a1 b1) (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb13 a2)
  (t2tb691 x)) (t2tb873 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) (set (tuple21 c d)))))
  (w (set (tuple21 a b))) (x (set (tuple21 c d))))
  (= (mem22 x
  (tb2t688
  (image (set1 (tuple2 c1 d1)) (tuple2 a1 b1) (t2tb877 p) (t2tb11 w))))
  (exists ((a2 (tuple21 a b)))
  (and (mem3 a2 w) (mem (tuple2 (tuple2 a1 b1) (set1 (tuple2 c1 d1)))
  (Tuple2 (tuple2 a1 b1) (set1 (tuple2 c1 d1)) (t2tb13 a2) (t2tb689 x))
  (t2tb877 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) (tuple21 c d)))) (w (set (tuple21 a
  b))) (x (tuple21 c d)))
  (= (mem21 x
  (tb2t689 (image (tuple2 c1 d1) (tuple2 a1 b1) (t2tb879 p) (t2tb11 w))))
  (exists ((a2 (tuple21 a b)))
  (and (mem3 a2 w) (mem (tuple2 (tuple2 a1 b1) (tuple2 c1 d1))
  (Tuple2 (tuple2 a1 b1) (tuple2 c1 d1) (t2tb13 a2) (t2tb693 x))
  (t2tb879 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) d))) (w (set (tuple21 a b))) (x d))
  (= (mem20 x (tb2t690 (image d1 (tuple2 a1 b1) (t2tb881 p) (t2tb11 w))))
  (exists ((a2 (tuple21 a b)))
  (and (mem3 a2 w) (mem (tuple2 (tuple2 a1 b1) d1)
  (Tuple2 (tuple2 a1 b1) d1 (t2tb13 a2) (t2tb694 x)) (t2tb881 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) c))) (w (set (tuple21 a b))) (x c))
  (= (mem7 x (tb2t132 (image c1 (tuple2 a1 b1) (t2tb245 p) (t2tb11 w))))
  (exists ((a2 (tuple21 a b)))
  (and (mem3 a2 w) (mem (tuple2 (tuple2 a1 b1) c1)
  (Tuple2 (tuple2 a1 b1) c1 (t2tb13 a2) (t2tb135 x)) (t2tb245 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) (set (tuple21 a b)))))
  (w (set (tuple21 a b))) (x (set (tuple21 a b))))
  (= (mem4 x
  (tb2t10 (image (set1 (tuple2 a1 b1)) (tuple2 a1 b1) (t2tb23 p) (t2tb11 w))))
  (exists ((a2 (tuple21 a b)))
  (and (mem3 a2 w) (mem (tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 b1)))
  (Tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 b1)) (t2tb13 a2) (t2tb11 x))
  (t2tb23 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) (tuple21 a b)))) (w (set (tuple21 a
  b))) (x (tuple21 a b)))
  (= (mem3 x
  (tb2t11 (image (tuple2 a1 b1) (tuple2 a1 b1) (t2tb25 p) (t2tb11 w))))
  (exists ((a2 (tuple21 a b)))
  (and (mem3 a2 w) (mem (tuple2 (tuple2 a1 b1) (tuple2 a1 b1))
  (Tuple2 (tuple2 a1 b1) (tuple2 a1 b1) (t2tb13 a2) (t2tb13 x)) (t2tb25 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) b))) (w (set (tuple21 a b))) (x b))
  (= (mem2 x (tb2t12 (image b1 (tuple2 a1 b1) (t2tb27 p) (t2tb11 w))))
  (exists ((a2 (tuple21 a b)))
  (and (mem3 a2 w) (mem (tuple2 (tuple2 a1 b1) b1)
  (Tuple2 (tuple2 a1 b1) b1 (t2tb13 a2) (t2tb14 x)) (t2tb27 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) a))) (w (set (tuple21 a b))) (x a))
  (= (mem1 x (tb2t1 (image a1 (tuple2 a1 b1) (t2tb29 p) (t2tb11 w))))
  (exists ((a2 (tuple21 a b)))
  (and (mem3 a2 w) (mem (tuple2 (tuple2 a1 b1) a1)
  (Tuple2 (tuple2 a1 b1) a1 (t2tb13 a2) (t2tb2 x)) (t2tb29 p)))))))

;; mem_image
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (w (set (tuple21 a b))) (x uni))
  (= (mem b2 x (image b2 (tuple2 a1 b1) p (t2tb11 w)))
  (exists ((a2 (tuple21 a b)))
  (and (mem3 a2 w) (mem (tuple2 (tuple2 a1 b1) b2)
  (Tuple2 (tuple2 a1 b1) b2 (t2tb13 a2) x) p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 b (tuple21 (tuple21 a c) (tuple21 b d)))))
  (w (set b)) (x (tuple21 (tuple21 a c) (tuple21 b d))))
  (= (mem24 x
  (tb2t686
  (image (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) b1 (t2tb885 p) (t2tb12 w))))
  (exists ((a2 b))
  (and (mem2 a2 w) (mem (tuple2 b1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
  (Tuple2 b1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb14 a2) (t2tb691 x))
  (t2tb885 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 b (set (tuple21 c d))))) (w (set b))
  (x (set (tuple21 c d))))
  (= (mem22 x
  (tb2t688 (image (set1 (tuple2 c1 d1)) b1 (t2tb889 p) (t2tb12 w))))
  (exists ((a2 b))
  (and (mem2 a2 w) (mem (tuple2 b1 (set1 (tuple2 c1 d1)))
  (Tuple2 b1 (set1 (tuple2 c1 d1)) (t2tb14 a2) (t2tb689 x)) (t2tb889 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 b (tuple21 c d)))) (w (set b)) (x (tuple21 c d)))
  (= (mem21 x (tb2t689 (image (tuple2 c1 d1) b1 (t2tb891 p) (t2tb12 w))))
  (exists ((a2 b))
  (and (mem2 a2 w) (mem (tuple2 b1 (tuple2 c1 d1))
  (Tuple2 b1 (tuple2 c1 d1) (t2tb14 a2) (t2tb693 x)) (t2tb891 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 b d))) (w (set b)) (x d))
  (= (mem20 x (tb2t690 (image d1 b1 (t2tb687 p) (t2tb12 w))))
  (exists ((a2 b))
  (and (mem2 a2 w) (mem (tuple2 b1 d1) (Tuple2 b1 d1 (t2tb14 a2) (t2tb694 x))
  (t2tb687 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 b c))) (w (set b)) (x c))
  (= (mem7 x (tb2t132 (image c1 b1 (t2tb131 p) (t2tb12 w))))
  (exists ((a2 b))
  (and (mem2 a2 w) (mem (tuple2 b1 c1) (Tuple2 b1 c1 (t2tb14 a2) (t2tb135 x))
  (t2tb131 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 b (set (tuple21 a b))))) (w (set b))
  (x (set (tuple21 a b))))
  (= (mem4 x (tb2t10 (image (set1 (tuple2 a1 b1)) b1 (t2tb31 p) (t2tb12 w))))
  (exists ((a2 b))
  (and (mem2 a2 w) (mem (tuple2 b1 (set1 (tuple2 a1 b1)))
  (Tuple2 b1 (set1 (tuple2 a1 b1)) (t2tb14 a2) (t2tb11 x)) (t2tb31 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 b (tuple21 a b)))) (w (set b)) (x (tuple21 a b)))
  (= (mem3 x (tb2t11 (image (tuple2 a1 b1) b1 (t2tb34 p) (t2tb12 w))))
  (exists ((a2 b))
  (and (mem2 a2 w) (mem (tuple2 b1 (tuple2 a1 b1))
  (Tuple2 b1 (tuple2 a1 b1) (t2tb14 a2) (t2tb13 x)) (t2tb34 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 b b))) (w (set b)) (x b))
  (= (mem2 x (tb2t12 (image b1 b1 (t2tb35 p) (t2tb12 w))))
  (exists ((a2 b))
  (and (mem2 a2 w) (mem (tuple2 b1 b1) (Tuple2 b1 b1 (t2tb14 a2) (t2tb14 x))
  (t2tb35 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 b a))) (w (set b)) (x a))
  (= (mem1 x (tb2t1 (image a1 b1 (t2tb37 p) (t2tb12 w))))
  (exists ((a2 b))
  (and (mem2 a2 w) (mem (tuple2 b1 a1) (Tuple2 b1 a1 (t2tb14 a2) (t2tb2 x))
  (t2tb37 p)))))))

;; mem_image
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (w (set b)) (x uni))
  (= (mem b2 x (image b2 b1 p (t2tb12 w)))
  (exists ((a2 b))
  (and (mem2 a2 w) (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 a2) x) p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 a (tuple21 (tuple21 a c) (tuple21 b d)))))
  (w (set a)) (x (tuple21 (tuple21 a c) (tuple21 b d))))
  (= (mem24 x
  (tb2t686
  (image (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) a1 (t2tb895 p) (t2tb1 w))))
  (exists ((a2 a))
  (and (mem1 a2 w) (mem (tuple2 a1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))
  (Tuple2 a1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb2 a2) (t2tb691 x))
  (t2tb895 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 a (set (tuple21 c d))))) (w (set a))
  (x (set (tuple21 c d))))
  (= (mem22 x
  (tb2t688 (image (set1 (tuple2 c1 d1)) a1 (t2tb899 p) (t2tb1 w))))
  (exists ((a2 a))
  (and (mem1 a2 w) (mem (tuple2 a1 (set1 (tuple2 c1 d1)))
  (Tuple2 a1 (set1 (tuple2 c1 d1)) (t2tb2 a2) (t2tb689 x)) (t2tb899 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 a (tuple21 c d)))) (w (set a)) (x (tuple21 c d)))
  (= (mem21 x (tb2t689 (image (tuple2 c1 d1) a1 (t2tb901 p) (t2tb1 w))))
  (exists ((a2 a))
  (and (mem1 a2 w) (mem (tuple2 a1 (tuple2 c1 d1))
  (Tuple2 a1 (tuple2 c1 d1) (t2tb2 a2) (t2tb693 x)) (t2tb901 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 a d))) (w (set a)) (x d))
  (= (mem20 x (tb2t690 (image d1 a1 (t2tb903 p) (t2tb1 w))))
  (exists ((a2 a))
  (and (mem1 a2 w) (mem (tuple2 a1 d1) (Tuple2 a1 d1 (t2tb2 a2) (t2tb694 x))
  (t2tb903 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 a c))) (w (set a)) (x c))
  (= (mem7 x (tb2t132 (image c1 a1 (t2tb129 p) (t2tb1 w))))
  (exists ((a2 a))
  (and (mem1 a2 w) (mem (tuple2 a1 c1) (Tuple2 a1 c1 (t2tb2 a2) (t2tb135 x))
  (t2tb129 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 a (set (tuple21 a b))))) (w (set a))
  (x (set (tuple21 a b))))
  (= (mem4 x (tb2t10 (image (set1 (tuple2 a1 b1)) a1 (t2tb39 p) (t2tb1 w))))
  (exists ((a2 a))
  (and (mem1 a2 w) (mem (tuple2 a1 (set1 (tuple2 a1 b1)))
  (Tuple2 a1 (set1 (tuple2 a1 b1)) (t2tb2 a2) (t2tb11 x)) (t2tb39 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 a (tuple21 a b)))) (w (set a)) (x (tuple21 a b)))
  (= (mem3 x (tb2t11 (image (tuple2 a1 b1) a1 (t2tb41 p) (t2tb1 w))))
  (exists ((a2 a))
  (and (mem1 a2 w) (mem (tuple2 a1 (tuple2 a1 b1))
  (Tuple2 a1 (tuple2 a1 b1) (t2tb2 a2) (t2tb13 x)) (t2tb41 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 a b))) (w (set a)) (x b))
  (= (mem2 x (tb2t12 (image b1 a1 (t2tb11 p) (t2tb1 w))))
  (exists ((a2 a))
  (and (mem1 a2 w) (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 a2) (t2tb14 x))) p))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 a a))) (w (set a)) (x a))
  (= (mem1 x (tb2t1 (image a1 a1 (t2tb4 p) (t2tb1 w))))
  (exists ((a2 a))
  (and (mem1 a2 w) (mem (tuple2 a1 a1) (Tuple2 a1 a1 (t2tb2 a2) (t2tb2 x))
  (t2tb4 p)))))))

;; mem_image
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (w (set a)) (x uni))
  (= (mem b2 x (image b2 a1 p (t2tb1 w)))
  (exists ((a2 a))
  (and (mem1 a2 w) (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 a2) x) p)))))))

;; mem_image
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((p uni) (w uni) (x uni))
  (and
  (=> (mem b2 x (image b2 a2 p w))
  (exists ((a3 uni))
  (and (sort a2 a3)
  (and (mem a2 a3 w) (mem (tuple2 a2 b2) (Tuple2 a2 b2 a3 x) p)))))
  (=>
  (exists ((a3 uni))
  (and (mem a2 a3 w) (mem (tuple2 a2 b2) (Tuple2 a2 b2 a3 x) p))) (mem b2 x
  (image b2 a2 p w)))))))

(declare-fun infix_lspl (ty ty uni uni) uni)

;; infix <+_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (tuple2 a2 b2))
  (infix_lspl b2 a2 x x1)))))

;; mem_overriding
  (assert
  (forall ((b2 ty))
  (forall ((q uni) (p uni) (x (tuple21 (tuple21 a c) (tuple21 b d))) (y uni))
  (= (mem (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) b2)
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) b2 (t2tb691 x) y)
  (infix_lspl b2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) q p))
  (or
  (and (mem (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) b2)
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) b2 (t2tb691 x) y) q)
  (not (mem24 x (tb2t686 (dom b2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) p)))))
  (mem (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) b2)
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) b2 (t2tb691 x) y) p))))))

;; mem_overriding
  (assert
  (forall ((b2 ty))
  (forall ((q uni) (p uni) (x (set (tuple21 c d))) (y uni))
  (= (mem (tuple2 (set1 (tuple2 c1 d1)) b2)
  (Tuple2 (set1 (tuple2 c1 d1)) b2 (t2tb689 x) y)
  (infix_lspl b2 (set1 (tuple2 c1 d1)) q p))
  (or
  (and (mem (tuple2 (set1 (tuple2 c1 d1)) b2)
  (Tuple2 (set1 (tuple2 c1 d1)) b2 (t2tb689 x) y) q)
  (not (mem22 x (tb2t688 (dom b2 (set1 (tuple2 c1 d1)) p))))) (mem
  (tuple2 (set1 (tuple2 c1 d1)) b2)
  (Tuple2 (set1 (tuple2 c1 d1)) b2 (t2tb689 x) y) p))))))

;; mem_overriding
  (assert
  (forall ((b2 ty))
  (forall ((q uni) (p uni) (x (tuple21 c d)) (y uni))
  (= (mem (tuple2 (tuple2 c1 d1) b2) (Tuple2 (tuple2 c1 d1) b2 (t2tb693 x) y)
  (infix_lspl b2 (tuple2 c1 d1) q p))
  (or
  (and (mem (tuple2 (tuple2 c1 d1) b2)
  (Tuple2 (tuple2 c1 d1) b2 (t2tb693 x) y) q)
  (not (mem21 x (tb2t689 (dom b2 (tuple2 c1 d1) p))))) (mem
  (tuple2 (tuple2 c1 d1) b2) (Tuple2 (tuple2 c1 d1) b2 (t2tb693 x) y) p))))))

;; mem_overriding
  (assert
  (forall ((b2 ty))
  (forall ((q uni) (p uni) (x d) (y uni))
  (= (mem (tuple2 d1 b2) (Tuple2 d1 b2 (t2tb694 x) y) (infix_lspl b2 d1 q p))
  (or
  (and (mem (tuple2 d1 b2) (Tuple2 d1 b2 (t2tb694 x) y) q)
  (not (mem20 x (tb2t690 (dom b2 d1 p))))) (mem (tuple2 d1 b2)
  (Tuple2 d1 b2 (t2tb694 x) y) p))))))

;; mem_overriding
  (assert
  (forall ((q (set (tuple21 (tuple21 a c) (tuple21 b d))))
  (p (set (tuple21 (tuple21 a c) (tuple21 b d)))) (x (tuple21 a c))
  (y (tuple21 b d)))
  (= (mem24
  (tb2t691 (Tuple2 (tuple2 a1 c1) (tuple2 b1 d1) (t2tb133 x) (t2tb692 y)))
  (tb2t686
  (infix_lspl (tuple2 b1 d1) (tuple2 a1 c1) (t2tb686 q) (t2tb686 p))))
  (or
  (and (mem24
  (tb2t691 (Tuple2 (tuple2 a1 c1) (tuple2 b1 d1) (t2tb133 x) (t2tb692 y))) q)
  (not (mem (tuple2 a1 c1) (t2tb133 x)
  (dom (tuple2 b1 d1) (tuple2 a1 c1) (t2tb686 p))))) (mem24
  (tb2t691 (Tuple2 (tuple2 a1 c1) (tuple2 b1 d1) (t2tb133 x) (t2tb692 y)))
  p)))))

;; mem_overriding
  (assert
  (forall ((q (set (tuple21 c d))) (p (set (tuple21 c d))) (x c) (y d))
  (= (mem21 (tb2t693 (Tuple2 c1 d1 (t2tb135 x) (t2tb694 y)))
  (tb2t689 (infix_lspl d1 c1 (t2tb689 q) (t2tb689 p))))
  (or
  (and (mem21 (tb2t693 (Tuple2 c1 d1 (t2tb135 x) (t2tb694 y))) q)
  (not (mem7 x (tb2t132 (dom d1 c1 (t2tb689 p)))))) (mem21
  (tb2t693 (Tuple2 c1 d1 (t2tb135 x) (t2tb694 y))) p)))))

;; mem_overriding
  (assert
  (forall ((b2 ty))
  (forall ((q uni) (p uni) (x c) (y uni))
  (= (mem (tuple2 c1 b2) (Tuple2 c1 b2 (t2tb135 x) y) (infix_lspl b2 c1 q p))
  (or
  (and (mem (tuple2 c1 b2) (Tuple2 c1 b2 (t2tb135 x) y) q)
  (not (mem7 x (tb2t132 (dom b2 c1 p))))) (mem (tuple2 c1 b2)
  (Tuple2 c1 b2 (t2tb135 x) y) p))))))

;; mem_overriding
  (assert
  (forall ((b2 ty))
  (forall ((q uni) (p uni) (x (set (tuple21 a b))) (y uni))
  (= (mem (tuple2 (set1 (tuple2 a1 b1)) b2)
  (Tuple2 (set1 (tuple2 a1 b1)) b2 (t2tb11 x) y)
  (infix_lspl b2 (set1 (tuple2 a1 b1)) q p))
  (or
  (and (mem (tuple2 (set1 (tuple2 a1 b1)) b2)
  (Tuple2 (set1 (tuple2 a1 b1)) b2 (t2tb11 x) y) q)
  (not (mem4 x (tb2t10 (dom b2 (set1 (tuple2 a1 b1)) p))))) (mem
  (tuple2 (set1 (tuple2 a1 b1)) b2)
  (Tuple2 (set1 (tuple2 a1 b1)) b2 (t2tb11 x) y) p))))))

;; mem_overriding
  (assert
  (forall ((b2 ty))
  (forall ((q uni) (p uni) (x (tuple21 a b)) (y uni))
  (= (mem (tuple2 (tuple2 a1 b1) b2) (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) y)
  (infix_lspl b2 (tuple2 a1 b1) q p))
  (or
  (and (mem (tuple2 (tuple2 a1 b1) b2)
  (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) y) q)
  (not (mem3 x (tb2t11 (dom b2 (tuple2 a1 b1) p))))) (mem
  (tuple2 (tuple2 a1 b1) b2) (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) y) p))))))

;; mem_overriding
  (assert
  (forall ((b2 ty))
  (forall ((q uni) (p uni) (x b) (y uni))
  (= (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) y) (infix_lspl b2 b1 q p))
  (or
  (and (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) y) q)
  (not (mem2 x (tb2t12 (dom b2 b1 p))))) (mem (tuple2 b1 b2)
  (Tuple2 b1 b2 (t2tb14 x) y) p))))))

;; mem_overriding
  (assert
  (forall ((q (set (tuple21 a b))) (p (set (tuple21 a b))) (x a) (y b))
  (= (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y)))
  (tb2t11 (infix_lspl b1 a1 (t2tb11 q) (t2tb11 p))))
  (or
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y))) q)
  (not (mem1 x (tb2t1 (dom b1 a1 (t2tb11 p)))))) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y))) p)))))

;; mem_overriding
  (assert
  (forall ((b2 ty))
  (forall ((q uni) (p uni) (x a) (y uni))
  (= (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) y) (infix_lspl b2 a1 q p))
  (or
  (and (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) y) q)
  (not (mem1 x (tb2t1 (dom b2 a1 p))))) (mem (tuple2 a1 b2)
  (Tuple2 a1 b2 (t2tb2 x) y) p))))))

;; mem_overriding
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((q uni) (p uni) (x uni) (y uni))
  (= (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) (infix_lspl b2 a2 q p))
  (or
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) q)
  (not (mem a2 x (dom b2 a2 p)))) (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) p))))))

(declare-fun direct_product (ty ty ty uni uni) uni)

;; direct_product_sort
  (assert
  (forall ((a2 ty) (b2 ty) (c2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (tuple2 a2 (tuple2 b2 c2)))
  (direct_product c2 b2 a2 x x1)))))

;; mem_direct_product
  (assert
  (forall ((b2 ty))
  (forall ((f uni) (g (set (tuple21 (tuple21 a c) (tuple21 b d))))
  (x (tuple21 a c)) (y uni) (z (tuple21 b d)))
  (= (mem (tuple2 (tuple2 a1 c1) (tuple2 b2 (tuple2 b1 d1)))
  (Tuple2 (tuple2 a1 c1) (tuple2 b2 (tuple2 b1 d1)) (t2tb133 x)
  (Tuple2 b2 (tuple2 b1 d1) y (t2tb692 z)))
  (direct_product (tuple2 b1 d1) b2 (tuple2 a1 c1) f (t2tb686 g)))
  (and (mem (tuple2 (tuple2 a1 c1) b2)
  (Tuple2 (tuple2 a1 c1) b2 (t2tb133 x) y) f) (mem24
  (tb2t691 (Tuple2 (tuple2 a1 c1) (tuple2 b1 d1) (t2tb133 x) (t2tb692 z)))
  g))))))

(declare-fun t2tb1014 ((set (tuple21 (tuple21 a c) (tuple21 (tuple21 b d)
  (tuple21 b d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a c) (tuple21 (tuple21 b d) (tuple21 b
  d)))))) (sort
  (set1 (tuple2 (tuple2 a1 c1) (tuple2 (tuple2 b1 d1) (tuple2 b1 d1))))
  (t2tb1014 x))))

(declare-fun tb2t1014 (uni) (set (tuple21 (tuple21 a c) (tuple21 (tuple21 b
  d) (tuple21 b d)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a c) (tuple21 (tuple21 b d) (tuple21 b
  d)))))) (! (= (tb2t1014 (t2tb1014 i)) i) :pattern ((t2tb1014 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 a1 c1) (tuple2 (tuple2 b1 d1) (tuple2 b1 d1)))) j)
     (= (t2tb1014 (tb2t1014 j)) j)) :pattern ((t2tb1014 (tb2t1014 j))) )))

(declare-fun t2tb1015 ((tuple21 (tuple21 a c) (tuple21 (tuple21 b d)
  (tuple21 b d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a c) (tuple21 (tuple21 b d) (tuple21 b d)))))
  (sort (tuple2 (tuple2 a1 c1) (tuple2 (tuple2 b1 d1) (tuple2 b1 d1)))
  (t2tb1015 x))))

(declare-fun tb2t1015 (uni) (tuple21 (tuple21 a c) (tuple21 (tuple21 b d)
  (tuple21 b d))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a c) (tuple21 (tuple21 b d) (tuple21 b d)))))
  (! (= (tb2t1015 (t2tb1015 i)) i) :pattern ((t2tb1015 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 c1) (tuple2 (tuple2 b1 d1) (tuple2 b1 d1)))
     j) (= (t2tb1015 (tb2t1015 j)) j)) :pattern ((t2tb1015 (tb2t1015 j))) )))

;; mem_direct_product
  (assert
  (forall ((f (set (tuple21 (tuple21 a c) (tuple21 b d))))
  (g (set (tuple21 (tuple21 a c) (tuple21 b d)))) (x (tuple21 a c))
  (y (tuple21 b d)) (z (tuple21 b d)))
  (= (mem (tuple2 (tuple2 a1 c1) (tuple2 (tuple2 b1 d1) (tuple2 b1 d1)))
  (Tuple2 (tuple2 a1 c1) (tuple2 (tuple2 b1 d1) (tuple2 b1 d1)) (t2tb133 x)
  (Tuple2 (tuple2 b1 d1) (tuple2 b1 d1) (t2tb692 y) (t2tb692 z)))
  (direct_product (tuple2 b1 d1) (tuple2 b1 d1) (tuple2 a1 c1) (t2tb686 f)
  (t2tb686 g)))
  (and (mem24
  (tb2t691 (Tuple2 (tuple2 a1 c1) (tuple2 b1 d1) (t2tb133 x) (t2tb692 y))) f)
  (mem24
  (tb2t691 (Tuple2 (tuple2 a1 c1) (tuple2 b1 d1) (t2tb133 x) (t2tb692 z)))
  g)))))

;; mem_direct_product
  (assert
  (forall ((c2 ty))
  (forall ((f (set (tuple21 (tuple21 a c) (tuple21 b d)))) (g uni)
  (x (tuple21 a c)) (y (tuple21 b d)) (z uni))
  (= (mem (tuple2 (tuple2 a1 c1) (tuple2 (tuple2 b1 d1) c2))
  (Tuple2 (tuple2 a1 c1) (tuple2 (tuple2 b1 d1) c2) (t2tb133 x)
  (Tuple2 (tuple2 b1 d1) c2 (t2tb692 y) z))
  (direct_product c2 (tuple2 b1 d1) (tuple2 a1 c1) (t2tb686 f) g))
  (and (mem24
  (tb2t691 (Tuple2 (tuple2 a1 c1) (tuple2 b1 d1) (t2tb133 x) (t2tb692 y))) f)
  (mem (tuple2 (tuple2 a1 c1) c2) (Tuple2 (tuple2 a1 c1) c2 (t2tb133 x) z)
  g))))))

(declare-fun t2tb168 ((set (tuple21 (tuple21 a c) b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a c) b)))) (sort
  (set1 (tuple2 (tuple2 a1 c1) b1)) (t2tb168 x))))

(declare-fun tb2t168 (uni) (set (tuple21 (tuple21 a c) b)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a c) b))))
  (! (= (tb2t168 (t2tb168 i)) i) :pattern ((t2tb168 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 c1) b1)) j)
     (= (t2tb168 (tb2t168 j)) j)) :pattern ((t2tb168 (tb2t168 j))) )))

(declare-fun t2tb847 ((set (tuple21 (tuple21 a c) d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a c) d)))) (sort
  (set1 (tuple2 (tuple2 a1 c1) d1)) (t2tb847 x))))

(declare-fun tb2t847 (uni) (set (tuple21 (tuple21 a c) d)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a c) d))))
  (! (= (tb2t847 (t2tb847 i)) i) :pattern ((t2tb847 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 c1) d1)) j)
     (= (t2tb847 (tb2t847 j)) j)) :pattern ((t2tb847 (tb2t847 j))) )))

(declare-fun t2tb169 ((tuple21 (tuple21 a c) b)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a c) b))) (sort (tuple2 (tuple2 a1 c1) b1)
  (t2tb169 x))))

(declare-fun tb2t169 (uni) (tuple21 (tuple21 a c) b))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a c) b)))
  (! (= (tb2t169 (t2tb169 i)) i) :pattern ((t2tb169 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 c1) b1) j) (= (t2tb169 (tb2t169 j)) j)) :pattern (
  (t2tb169 (tb2t169 j))) )))

(declare-fun t2tb848 ((tuple21 (tuple21 a c) d)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a c) d))) (sort (tuple2 (tuple2 a1 c1) d1)
  (t2tb848 x))))

(declare-fun tb2t848 (uni) (tuple21 (tuple21 a c) d))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a c) d)))
  (! (= (tb2t848 (t2tb848 i)) i) :pattern ((t2tb848 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 c1) d1) j) (= (t2tb848 (tb2t848 j)) j)) :pattern (
  (t2tb848 (tb2t848 j))) )))

;; mem_direct_product
  (assert
  (forall ((f (set (tuple21 (tuple21 a c) b))) (g (set (tuple21 (tuple21 a c)
  d))) (x (tuple21 a c)) (y b) (z d))
  (= (mem24
  (tb2t691
  (Tuple2 (tuple2 a1 c1) (tuple2 b1 d1) (t2tb133 x)
  (Tuple2 b1 d1 (t2tb14 y) (t2tb694 z))))
  (tb2t686 (direct_product d1 b1 (tuple2 a1 c1) (t2tb168 f) (t2tb847 g))))
  (and (mem (tuple2 (tuple2 a1 c1) b1)
  (Tuple2 (tuple2 a1 c1) b1 (t2tb133 x) (t2tb14 y)) (t2tb168 f)) (mem
  (tuple2 (tuple2 a1 c1) d1)
  (Tuple2 (tuple2 a1 c1) d1 (t2tb133 x) (t2tb694 z)) (t2tb847 g))))))

;; mem_direct_product
  (assert
  (forall ((b2 ty))
  (forall ((f uni) (g (set (tuple21 c d))) (x c) (y uni) (z d))
  (= (mem (tuple2 c1 (tuple2 b2 d1))
  (Tuple2 c1 (tuple2 b2 d1) (t2tb135 x) (Tuple2 b2 d1 y (t2tb694 z)))
  (direct_product d1 b2 c1 f (t2tb689 g)))
  (and (mem (tuple2 c1 b2) (Tuple2 c1 b2 (t2tb135 x) y) f) (mem21
  (tb2t693 (Tuple2 c1 d1 (t2tb135 x) (t2tb694 z))) g))))))

(declare-fun t2tb1016 ((set (tuple21 c (tuple21 d d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 c (tuple21 d d))))) (sort
  (set1 (tuple2 c1 (tuple2 d1 d1))) (t2tb1016 x))))

(declare-fun tb2t1016 (uni) (set (tuple21 c (tuple21 d d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 c (tuple21 d d)))))
  (! (= (tb2t1016 (t2tb1016 i)) i) :pattern ((t2tb1016 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 c1 (tuple2 d1 d1))) j)
     (= (t2tb1016 (tb2t1016 j)) j)) :pattern ((t2tb1016 (tb2t1016 j))) )))

(declare-fun t2tb1017 ((tuple21 c (tuple21 d d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 c (tuple21 d d)))) (sort (tuple2 c1 (tuple2 d1 d1))
  (t2tb1017 x))))

(declare-fun tb2t1017 (uni) (tuple21 c (tuple21 d d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 c (tuple21 d d))))
  (! (= (tb2t1017 (t2tb1017 i)) i) :pattern ((t2tb1017 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 c1 (tuple2 d1 d1)) j) (= (t2tb1017 (tb2t1017 j)) j)) :pattern (
  (t2tb1017 (tb2t1017 j))) )))

;; mem_direct_product
  (assert
  (forall ((f (set (tuple21 c d))) (g (set (tuple21 c d))) (x c) (y d) (z d))
  (= (mem (tuple2 c1 (tuple2 d1 d1))
  (Tuple2 c1 (tuple2 d1 d1) (t2tb135 x)
  (Tuple2 d1 d1 (t2tb694 y) (t2tb694 z)))
  (direct_product d1 d1 c1 (t2tb689 f) (t2tb689 g)))
  (and (mem21 (tb2t693 (Tuple2 c1 d1 (t2tb135 x) (t2tb694 y))) f) (mem21
  (tb2t693 (Tuple2 c1 d1 (t2tb135 x) (t2tb694 z))) g)))))

;; mem_direct_product
  (assert
  (forall ((c2 ty))
  (forall ((f (set (tuple21 c d))) (g uni) (x c) (y d) (z uni))
  (= (mem (tuple2 c1 (tuple2 d1 c2))
  (Tuple2 c1 (tuple2 d1 c2) (t2tb135 x) (Tuple2 d1 c2 (t2tb694 y) z))
  (direct_product c2 d1 c1 (t2tb689 f) g))
  (and (mem21 (tb2t693 (Tuple2 c1 d1 (t2tb135 x) (t2tb694 y))) f) (mem
  (tuple2 c1 c2) (Tuple2 c1 c2 (t2tb135 x) z) g))))))

;; mem_direct_product
  (assert
  (forall ((b2 ty))
  (forall ((f uni) (g (set (tuple21 a b))) (x a) (y uni) (z b))
  (= (mem (tuple2 a1 (tuple2 b2 b1))
  (Tuple2 a1 (tuple2 b2 b1) (t2tb2 x) (Tuple2 b2 b1 y (t2tb14 z)))
  (direct_product b1 b2 a1 f (t2tb11 g)))
  (and (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) y) f) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 z))) g))))))

(declare-fun t2tb59 ((set (tuple21 a (tuple21 b b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (tuple21 b b))))) (sort
  (set1 (tuple2 a1 (tuple2 b1 b1))) (t2tb59 x))))

(declare-fun tb2t59 (uni) (set (tuple21 a (tuple21 b b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (tuple21 b b)))))
  (! (= (tb2t59 (t2tb59 i)) i) :pattern ((t2tb59 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (tuple2 b1 b1))) j)
     (= (t2tb59 (tb2t59 j)) j)) :pattern ((t2tb59 (tb2t59 j))) )))

(declare-fun t2tb60 ((tuple21 a (tuple21 b b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (tuple21 b b)))) (sort (tuple2 a1 (tuple2 b1 b1))
  (t2tb60 x))))

(declare-fun tb2t60 (uni) (tuple21 a (tuple21 b b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (tuple21 b b))))
  (! (= (tb2t60 (t2tb60 i)) i) :pattern ((t2tb60 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (tuple2 b1 b1)) j) (= (t2tb60 (tb2t60 j)) j)) :pattern (
  (t2tb60 (tb2t60 j))) )))

;; mem_direct_product
  (assert
  (forall ((f (set (tuple21 a b))) (g (set (tuple21 a b))) (x a) (y b) (z b))
  (= (mem (tuple2 a1 (tuple2 b1 b1))
  (Tuple2 a1 (tuple2 b1 b1) (t2tb2 x) (Tuple2 b1 b1 (t2tb14 y) (t2tb14 z)))
  (direct_product b1 b1 a1 (t2tb11 f) (t2tb11 g)))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y))) f) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 z))) g)))))

;; mem_direct_product
  (assert
  (forall ((c2 ty))
  (forall ((f (set (tuple21 a b))) (g uni) (x a) (y b) (z uni))
  (= (mem (tuple2 a1 (tuple2 b1 c2))
  (Tuple2 a1 (tuple2 b1 c2) (t2tb2 x) (Tuple2 b1 c2 (t2tb14 y) z))
  (direct_product c2 b1 a1 (t2tb11 f) g))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y))) f) (mem
  (tuple2 a1 c2) (Tuple2 a1 c2 (t2tb2 x) z) g))))))

;; mem_direct_product
  (assert
  (forall ((a2 ty) (b2 ty) (c2 ty))
  (forall ((f uni) (g uni) (x uni) (y uni) (z uni))
  (= (mem (tuple2 a2 (tuple2 b2 c2))
  (Tuple2 a2 (tuple2 b2 c2) x (Tuple2 b2 c2 y z))
  (direct_product c2 b2 a2 f g))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) f) (mem (tuple2 a2 c2)
  (Tuple2 a2 c2 x z) g))))))

(declare-fun prj1 (ty ty uni) uni)

;; prj1_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni)) (sort (set1 (tuple2 (tuple2 a2 b2) a2)) (prj1 b2 a2 x)))))

;; mem_proj_op_1
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (x uni) (y uni) (z uni))
  (=> (sort a2 x)
  (=> (sort a2 z)
  (= (mem (tuple2 (tuple2 a2 b2) a2)
  (Tuple2 (tuple2 a2 b2) a2 (Tuple2 a2 b2 x y) z)
  (prj1 b2 a2 (Tuple2 (set1 a2) (set1 b2) s t)))
  (and (mem (tuple2 (tuple2 a2 b2) a2)
  (Tuple2 (tuple2 a2 b2) a2 (Tuple2 a2 b2 x y) z)
  (times a2 (tuple2 a2 b2) (times b2 a2 s t) s)) (= z x))))))))

(declare-fun prj2 (ty ty uni) uni)

;; prj2_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni)) (sort (set1 (tuple2 (tuple2 a2 b2) b2)) (prj2 b2 a2 x)))))

;; mem_proj_op_2
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (x uni) (y uni) (z uni))
  (=> (sort b2 y)
  (=> (sort b2 z)
  (= (mem (tuple2 (tuple2 a2 b2) b2)
  (Tuple2 (tuple2 a2 b2) b2 (Tuple2 a2 b2 x y) z)
  (prj2 b2 a2 (Tuple2 (set1 a2) (set1 b2) s t)))
  (and (mem (tuple2 (tuple2 a2 b2) b2)
  (Tuple2 (tuple2 a2 b2) b2 (Tuple2 a2 b2 x y) z)
  (times b2 (tuple2 a2 b2) (times b2 a2 s t) t)) (= z y))))))))

(declare-fun parallel_product (ty ty ty ty uni uni) uni)

;; parallel_product_sort
  (assert
  (forall ((a2 ty) (b2 ty) (c2 ty) (d2 ty))
  (forall ((x uni) (x1 uni)) (sort
  (set1 (tuple2 (tuple2 a2 c2) (tuple2 b2 d2)))
  (parallel_product d2 c2 b2 a2 x x1)))))

(declare-fun parallel_product1 ((set (tuple21 a b)) (set (tuple21 c
  d))) (set (tuple21 (tuple21 a c) (tuple21 b d))))

;; mem_parallel_product
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((h uni) (k (set (tuple21 (tuple21 a c) (tuple21 b d)))) (x uni)
  (y (tuple21 a c)) (z uni) (w (tuple21 b d)))
  (= (mem (tuple2 (tuple2 a2 (tuple2 a1 c1)) (tuple2 b2 (tuple2 b1 d1)))
  (Tuple2 (tuple2 a2 (tuple2 a1 c1)) (tuple2 b2 (tuple2 b1 d1))
  (Tuple2 a2 (tuple2 a1 c1) x (t2tb133 y))
  (Tuple2 b2 (tuple2 b1 d1) z (t2tb692 w)))
  (parallel_product (tuple2 b1 d1) (tuple2 a1 c1) b2 a2 h (t2tb686 k)))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x z) h) (mem24
  (tb2t691 (Tuple2 (tuple2 a1 c1) (tuple2 b1 d1) (t2tb133 y) (t2tb692 w)))
  k))))))

;; mem_parallel_product
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((h uni) (k (set (tuple21 c d))) (x uni) (y c) (z uni) (w d))
  (= (mem (tuple2 (tuple2 a2 c1) (tuple2 b2 d1))
  (Tuple2 (tuple2 a2 c1) (tuple2 b2 d1) (Tuple2 a2 c1 x (t2tb135 y))
  (Tuple2 b2 d1 z (t2tb694 w))) (parallel_product d1 c1 b2 a2 h (t2tb689 k)))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x z) h) (mem21
  (tb2t693 (Tuple2 c1 d1 (t2tb135 y) (t2tb694 w))) k))))))

;; mem_parallel_product
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((h uni) (k (set (tuple21 a b))) (x uni) (y a) (z uni) (w b))
  (= (mem (tuple2 (tuple2 a2 a1) (tuple2 b2 b1))
  (Tuple2 (tuple2 a2 a1) (tuple2 b2 b1) (Tuple2 a2 a1 x (t2tb2 y))
  (Tuple2 b2 b1 z (t2tb14 w))) (parallel_product b1 a1 b2 a2 h (t2tb11 k)))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x z) h) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 y) (t2tb14 w))) k))))))

(declare-fun t2tb1023 ((set (tuple21 (tuple21 (tuple21 a c) (tuple21 a c))
  (tuple21 (tuple21 b d) (tuple21 b d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 a c) (tuple21 a c))
  (tuple21 (tuple21 b d) (tuple21 b d)))))) (sort
  (set1
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 a1 c1))
  (tuple2 (tuple2 b1 d1) (tuple2 b1 d1)))) (t2tb1023 x))))

(declare-fun tb2t1023 (uni) (set (tuple21 (tuple21 (tuple21 a c) (tuple21 a
  c)) (tuple21 (tuple21 b d) (tuple21 b d)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 a c) (tuple21 a c))
  (tuple21 (tuple21 b d) (tuple21 b d))))))
  (! (= (tb2t1023 (t2tb1023 i)) i) :pattern ((t2tb1023 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 a1 c1))
     (tuple2 (tuple2 b1 d1) (tuple2 b1 d1)))) j)
     (= (t2tb1023 (tb2t1023 j)) j)) :pattern ((t2tb1023 (tb2t1023 j))) )))

(declare-fun t2tb1024 ((tuple21 (tuple21 (tuple21 a c) (tuple21 a c))
  (tuple21 (tuple21 b d) (tuple21 b d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 a c) (tuple21 a c))
  (tuple21 (tuple21 b d) (tuple21 b d))))) (sort
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 a1 c1))
  (tuple2 (tuple2 b1 d1) (tuple2 b1 d1))) (t2tb1024 x))))

(declare-fun tb2t1024 (uni) (tuple21 (tuple21 (tuple21 a c) (tuple21 a c))
  (tuple21 (tuple21 b d) (tuple21 b d))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 a c) (tuple21 a c))
  (tuple21 (tuple21 b d) (tuple21 b d)))))
  (! (= (tb2t1024 (t2tb1024 i)) i) :pattern ((t2tb1024 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 a1 c1))
     (tuple2 (tuple2 b1 d1) (tuple2 b1 d1))) j)
     (= (t2tb1024 (tb2t1024 j)) j)) :pattern ((t2tb1024 (tb2t1024 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 (tuple21 a c) (tuple21 b d))))
  (k (set (tuple21 (tuple21 a c) (tuple21 b d)))) (x (tuple21 a c))
  (y (tuple21 a c)) (z (tuple21 b d)) (w (tuple21 b d)))
  (= (mem
  (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 a1 c1))
  (tuple2 (tuple2 b1 d1) (tuple2 b1 d1)))
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 a1 c1))
  (tuple2 (tuple2 b1 d1) (tuple2 b1 d1))
  (Tuple2 (tuple2 a1 c1) (tuple2 a1 c1) (t2tb133 x) (t2tb133 y))
  (Tuple2 (tuple2 b1 d1) (tuple2 b1 d1) (t2tb692 z) (t2tb692 w)))
  (parallel_product (tuple2 b1 d1) (tuple2 a1 c1) (tuple2 b1 d1)
  (tuple2 a1 c1) (t2tb686 h) (t2tb686 k)))
  (and (mem24
  (tb2t691 (Tuple2 (tuple2 a1 c1) (tuple2 b1 d1) (t2tb133 x) (t2tb692 z))) h)
  (mem24
  (tb2t691 (Tuple2 (tuple2 a1 c1) (tuple2 b1 d1) (t2tb133 y) (t2tb692 w)))
  k)))))

(declare-fun t2tb163 ((tuple21 (tuple21 a c) c)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a c) c))) (sort (tuple2 (tuple2 a1 c1) c1)
  (t2tb163 x))))

(declare-fun tb2t163 (uni) (tuple21 (tuple21 a c) c))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a c) c)))
  (! (= (tb2t163 (t2tb163 i)) i) :pattern ((t2tb163 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 c1) c1) j) (= (t2tb163 (tb2t163 j)) j)) :pattern (
  (t2tb163 (tb2t163 j))) )))

(declare-fun t2tb754 ((tuple21 (tuple21 b d) d)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b d) d))) (sort (tuple2 (tuple2 b1 d1) d1)
  (t2tb754 x))))

(declare-fun tb2t754 (uni) (tuple21 (tuple21 b d) d))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b d) d)))
  (! (= (tb2t754 (t2tb754 i)) i) :pattern ((t2tb754 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 d1) d1) j) (= (t2tb754 (tb2t754 j)) j)) :pattern (
  (t2tb754 (tb2t754 j))) )))

(declare-fun t2tb1025 ((set (tuple21 (tuple21 (tuple21 a c) c)
  (tuple21 (tuple21 b d) d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 a c) c) (tuple21 (tuple21 b d)
  d))))) (sort
  (set1 (tuple2 (tuple2 (tuple2 a1 c1) c1) (tuple2 (tuple2 b1 d1) d1)))
  (t2tb1025 x))))

(declare-fun tb2t1025 (uni) (set (tuple21 (tuple21 (tuple21 a c) c)
  (tuple21 (tuple21 b d) d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 a c) c) (tuple21 (tuple21 b d)
  d))))) (! (= (tb2t1025 (t2tb1025 i)) i) :pattern ((t2tb1025 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 (tuple2 a1 c1) c1) (tuple2 (tuple2 b1 d1) d1))) j)
     (= (t2tb1025 (tb2t1025 j)) j)) :pattern ((t2tb1025 (tb2t1025 j))) )))

(declare-fun t2tb1026 ((tuple21 (tuple21 (tuple21 a c) c) (tuple21 (tuple21 b
  d) d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 a c) c) (tuple21 (tuple21 b d) d))))
  (sort (tuple2 (tuple2 (tuple2 a1 c1) c1) (tuple2 (tuple2 b1 d1) d1))
  (t2tb1026 x))))

(declare-fun tb2t1026 (uni) (tuple21 (tuple21 (tuple21 a c) c)
  (tuple21 (tuple21 b d) d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 a c) c) (tuple21 (tuple21 b d) d))))
  (! (= (tb2t1026 (t2tb1026 i)) i) :pattern ((t2tb1026 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 (tuple2 a1 c1) c1) (tuple2 (tuple2 b1 d1) d1))
     j) (= (t2tb1026 (tb2t1026 j)) j)) :pattern ((t2tb1026 (tb2t1026 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 (tuple21 a c) (tuple21 b d)))) (k (set (tuple21 c
  d))) (x (tuple21 a c)) (y c) (z (tuple21 b d)) (w d))
  (= (mem (tuple2 (tuple2 (tuple2 a1 c1) c1) (tuple2 (tuple2 b1 d1) d1))
  (Tuple2 (tuple2 (tuple2 a1 c1) c1) (tuple2 (tuple2 b1 d1) d1)
  (Tuple2 (tuple2 a1 c1) c1 (t2tb133 x) (t2tb135 y))
  (Tuple2 (tuple2 b1 d1) d1 (t2tb692 z) (t2tb694 w)))
  (parallel_product d1 c1 (tuple2 b1 d1) (tuple2 a1 c1) (t2tb686 h)
  (t2tb689 k)))
  (and (mem24
  (tb2t691 (Tuple2 (tuple2 a1 c1) (tuple2 b1 d1) (t2tb133 x) (t2tb692 z))) h)
  (mem21 (tb2t693 (Tuple2 c1 d1 (t2tb135 y) (t2tb694 w))) k)))))

(declare-fun t2tb1031 ((set (tuple21 (tuple21 (tuple21 a c) a)
  (tuple21 (tuple21 b d) b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 a c) a) (tuple21 (tuple21 b d)
  b))))) (sort
  (set1 (tuple2 (tuple2 (tuple2 a1 c1) a1) (tuple2 (tuple2 b1 d1) b1)))
  (t2tb1031 x))))

(declare-fun tb2t1031 (uni) (set (tuple21 (tuple21 (tuple21 a c) a)
  (tuple21 (tuple21 b d) b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 a c) a) (tuple21 (tuple21 b d)
  b))))) (! (= (tb2t1031 (t2tb1031 i)) i) :pattern ((t2tb1031 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 (tuple2 a1 c1) a1) (tuple2 (tuple2 b1 d1) b1))) j)
     (= (t2tb1031 (tb2t1031 j)) j)) :pattern ((t2tb1031 (tb2t1031 j))) )))

(declare-fun t2tb764 ((tuple21 (tuple21 b d) b)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b d) b))) (sort (tuple2 (tuple2 b1 d1) b1)
  (t2tb764 x))))

(declare-fun tb2t764 (uni) (tuple21 (tuple21 b d) b))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b d) b)))
  (! (= (tb2t764 (t2tb764 i)) i) :pattern ((t2tb764 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 d1) b1) j) (= (t2tb764 (tb2t764 j)) j)) :pattern (
  (t2tb764 (tb2t764 j))) )))

(declare-fun t2tb1032 ((tuple21 (tuple21 (tuple21 a c) a) (tuple21 (tuple21 b
  d) b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 a c) a) (tuple21 (tuple21 b d) b))))
  (sort (tuple2 (tuple2 (tuple2 a1 c1) a1) (tuple2 (tuple2 b1 d1) b1))
  (t2tb1032 x))))

(declare-fun tb2t1032 (uni) (tuple21 (tuple21 (tuple21 a c) a)
  (tuple21 (tuple21 b d) b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 a c) a) (tuple21 (tuple21 b d) b))))
  (! (= (tb2t1032 (t2tb1032 i)) i) :pattern ((t2tb1032 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 (tuple2 a1 c1) a1) (tuple2 (tuple2 b1 d1) b1))
     j) (= (t2tb1032 (tb2t1032 j)) j)) :pattern ((t2tb1032 (tb2t1032 j))) )))

(declare-fun t2tb171 ((tuple21 (tuple21 a c) a)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a c) a))) (sort (tuple2 (tuple2 a1 c1) a1)
  (t2tb171 x))))

(declare-fun tb2t171 (uni) (tuple21 (tuple21 a c) a))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a c) a)))
  (! (= (tb2t171 (t2tb171 i)) i) :pattern ((t2tb171 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 c1) a1) j) (= (t2tb171 (tb2t171 j)) j)) :pattern (
  (t2tb171 (tb2t171 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 (tuple21 a c) (tuple21 b d)))) (k (set (tuple21 a
  b))) (x (tuple21 a c)) (y a) (z (tuple21 b d)) (w b))
  (= (mem (tuple2 (tuple2 (tuple2 a1 c1) a1) (tuple2 (tuple2 b1 d1) b1))
  (Tuple2 (tuple2 (tuple2 a1 c1) a1) (tuple2 (tuple2 b1 d1) b1)
  (Tuple2 (tuple2 a1 c1) a1 (t2tb133 x) (t2tb2 y))
  (Tuple2 (tuple2 b1 d1) b1 (t2tb692 z) (t2tb14 w)))
  (parallel_product b1 a1 (tuple2 b1 d1) (tuple2 a1 c1) (t2tb686 h)
  (t2tb11 k)))
  (and (mem24
  (tb2t691 (Tuple2 (tuple2 a1 c1) (tuple2 b1 d1) (t2tb133 x) (t2tb692 z))) h)
  (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 y) (t2tb14 w))) k)))))

;; mem_parallel_product
  (assert
  (forall ((c2 ty) (d2 ty))
  (forall ((h (set (tuple21 (tuple21 a c) (tuple21 b d)))) (k uni)
  (x (tuple21 a c)) (y uni) (z (tuple21 b d)) (w uni))
  (= (mem (tuple2 (tuple2 (tuple2 a1 c1) c2) (tuple2 (tuple2 b1 d1) d2))
  (Tuple2 (tuple2 (tuple2 a1 c1) c2) (tuple2 (tuple2 b1 d1) d2)
  (Tuple2 (tuple2 a1 c1) c2 (t2tb133 x) y)
  (Tuple2 (tuple2 b1 d1) d2 (t2tb692 z) w))
  (parallel_product d2 c2 (tuple2 b1 d1) (tuple2 a1 c1) (t2tb686 h) k))
  (and (mem24
  (tb2t691 (Tuple2 (tuple2 a1 c1) (tuple2 b1 d1) (t2tb133 x) (t2tb692 z))) h)
  (mem (tuple2 c2 d2) (Tuple2 c2 d2 y w) k))))))

(declare-fun t2tb1033 ((set (tuple21 (tuple21 c (tuple21 a c)) (tuple21 d
  (tuple21 b d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 c (tuple21 a c)) (tuple21 d (tuple21 b
  d)))))) (sort
  (set1 (tuple2 (tuple2 c1 (tuple2 a1 c1)) (tuple2 d1 (tuple2 b1 d1))))
  (t2tb1033 x))))

(declare-fun tb2t1033 (uni) (set (tuple21 (tuple21 c (tuple21 a c))
  (tuple21 d (tuple21 b d)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 c (tuple21 a c)) (tuple21 d (tuple21 b
  d)))))) (! (= (tb2t1033 (t2tb1033 i)) i) :pattern ((t2tb1033 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 c1 (tuple2 a1 c1)) (tuple2 d1 (tuple2 b1 d1)))) j)
     (= (t2tb1033 (tb2t1033 j)) j)) :pattern ((t2tb1033 (tb2t1033 j))) )))

(declare-fun t2tb1034 ((tuple21 (tuple21 c (tuple21 a c)) (tuple21 d
  (tuple21 b d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 c (tuple21 a c)) (tuple21 d (tuple21 b d)))))
  (sort (tuple2 (tuple2 c1 (tuple2 a1 c1)) (tuple2 d1 (tuple2 b1 d1)))
  (t2tb1034 x))))

(declare-fun tb2t1034 (uni) (tuple21 (tuple21 c (tuple21 a c)) (tuple21 d
  (tuple21 b d))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 c (tuple21 a c)) (tuple21 d (tuple21 b d)))))
  (! (= (tb2t1034 (t2tb1034 i)) i) :pattern ((t2tb1034 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 c1 (tuple2 a1 c1)) (tuple2 d1 (tuple2 b1 d1)))
     j) (= (t2tb1034 (tb2t1034 j)) j)) :pattern ((t2tb1034 (tb2t1034 j))) )))

(declare-fun t2tb211 ((tuple21 c (tuple21 a c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 c (tuple21 a c)))) (sort (tuple2 c1 (tuple2 a1 c1))
  (t2tb211 x))))

(declare-fun tb2t211 (uni) (tuple21 c (tuple21 a c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 c (tuple21 a c))))
  (! (= (tb2t211 (t2tb211 i)) i) :pattern ((t2tb211 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 c1 (tuple2 a1 c1)) j) (= (t2tb211 (tb2t211 j)) j)) :pattern (
  (t2tb211 (tb2t211 j))) )))

(declare-fun t2tb820 ((tuple21 d (tuple21 b d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 d (tuple21 b d)))) (sort (tuple2 d1 (tuple2 b1 d1))
  (t2tb820 x))))

(declare-fun tb2t820 (uni) (tuple21 d (tuple21 b d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 d (tuple21 b d))))
  (! (= (tb2t820 (t2tb820 i)) i) :pattern ((t2tb820 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 d1 (tuple2 b1 d1)) j) (= (t2tb820 (tb2t820 j)) j)) :pattern (
  (t2tb820 (tb2t820 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 c d))) (k (set (tuple21 (tuple21 a c) (tuple21 b
  d)))) (x c) (y (tuple21 a c)) (z d) (w (tuple21 b d)))
  (= (mem (tuple2 (tuple2 c1 (tuple2 a1 c1)) (tuple2 d1 (tuple2 b1 d1)))
  (Tuple2 (tuple2 c1 (tuple2 a1 c1)) (tuple2 d1 (tuple2 b1 d1))
  (Tuple2 c1 (tuple2 a1 c1) (t2tb135 x) (t2tb133 y))
  (Tuple2 d1 (tuple2 b1 d1) (t2tb694 z) (t2tb692 w)))
  (parallel_product (tuple2 b1 d1) (tuple2 a1 c1) d1 c1 (t2tb689 h)
  (t2tb686 k)))
  (and (mem21 (tb2t693 (Tuple2 c1 d1 (t2tb135 x) (t2tb694 z))) h) (mem24
  (tb2t691 (Tuple2 (tuple2 a1 c1) (tuple2 b1 d1) (t2tb133 y) (t2tb692 w)))
  k)))))

(declare-fun t2tb1035 ((set (tuple21 (tuple21 c c) (tuple21 d d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 c c) (tuple21 d d))))) (sort
  (set1 (tuple2 (tuple2 c1 c1) (tuple2 d1 d1))) (t2tb1035 x))))

(declare-fun tb2t1035 (uni) (set (tuple21 (tuple21 c c) (tuple21 d d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 c c) (tuple21 d d)))))
  (! (= (tb2t1035 (t2tb1035 i)) i) :pattern ((t2tb1035 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 c1 c1) (tuple2 d1 d1))) j)
     (= (t2tb1035 (tb2t1035 j)) j)) :pattern ((t2tb1035 (tb2t1035 j))) )))

(declare-fun t2tb1036 ((tuple21 (tuple21 c c) (tuple21 d d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 c c) (tuple21 d d)))) (sort
  (tuple2 (tuple2 c1 c1) (tuple2 d1 d1)) (t2tb1036 x))))

(declare-fun tb2t1036 (uni) (tuple21 (tuple21 c c) (tuple21 d d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 c c) (tuple21 d d))))
  (! (= (tb2t1036 (t2tb1036 i)) i) :pattern ((t2tb1036 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 c1 c1) (tuple2 d1 d1)) j)
     (= (t2tb1036 (tb2t1036 j)) j)) :pattern ((t2tb1036 (tb2t1036 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 c d))) (k (set (tuple21 c d))) (x c) (y c) (z d)
  (w d))
  (= (mem (tuple2 (tuple2 c1 c1) (tuple2 d1 d1))
  (Tuple2 (tuple2 c1 c1) (tuple2 d1 d1)
  (Tuple2 c1 c1 (t2tb135 x) (t2tb135 y))
  (Tuple2 d1 d1 (t2tb694 z) (t2tb694 w)))
  (parallel_product d1 c1 d1 c1 (t2tb689 h) (t2tb689 k)))
  (and (mem21 (tb2t693 (Tuple2 c1 d1 (t2tb135 x) (t2tb694 z))) h) (mem21
  (tb2t693 (Tuple2 c1 d1 (t2tb135 y) (t2tb694 w))) k)))))

(declare-fun t2tb1041 ((set (tuple21 (tuple21 c a) (tuple21 d b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 c a) (tuple21 d b))))) (sort
  (set1 (tuple2 (tuple2 c1 a1) (tuple2 d1 b1))) (t2tb1041 x))))

(declare-fun tb2t1041 (uni) (set (tuple21 (tuple21 c a) (tuple21 d b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 c a) (tuple21 d b)))))
  (! (= (tb2t1041 (t2tb1041 i)) i) :pattern ((t2tb1041 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 c1 a1) (tuple2 d1 b1))) j)
     (= (t2tb1041 (tb2t1041 j)) j)) :pattern ((t2tb1041 (tb2t1041 j))) )))

(declare-fun t2tb1042 ((tuple21 (tuple21 c a) (tuple21 d b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 c a) (tuple21 d b)))) (sort
  (tuple2 (tuple2 c1 a1) (tuple2 d1 b1)) (t2tb1042 x))))

(declare-fun tb2t1042 (uni) (tuple21 (tuple21 c a) (tuple21 d b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 c a) (tuple21 d b))))
  (! (= (tb2t1042 (t2tb1042 i)) i) :pattern ((t2tb1042 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 c1 a1) (tuple2 d1 b1)) j)
     (= (t2tb1042 (tb2t1042 j)) j)) :pattern ((t2tb1042 (tb2t1042 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 c d))) (k (set (tuple21 a b))) (x c) (y a) (z d)
  (w b))
  (= (mem (tuple2 (tuple2 c1 a1) (tuple2 d1 b1))
  (Tuple2 (tuple2 c1 a1) (tuple2 d1 b1) (Tuple2 c1 a1 (t2tb135 x) (t2tb2 y))
  (Tuple2 d1 b1 (t2tb694 z) (t2tb14 w)))
  (parallel_product b1 a1 d1 c1 (t2tb689 h) (t2tb11 k)))
  (and (mem21 (tb2t693 (Tuple2 c1 d1 (t2tb135 x) (t2tb694 z))) h) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 y) (t2tb14 w))) k)))))

;; mem_parallel_product
  (assert
  (forall ((c2 ty) (d2 ty))
  (forall ((h (set (tuple21 c d))) (k uni) (x c) (y uni) (z d) (w uni))
  (= (mem (tuple2 (tuple2 c1 c2) (tuple2 d1 d2))
  (Tuple2 (tuple2 c1 c2) (tuple2 d1 d2) (Tuple2 c1 c2 (t2tb135 x) y)
  (Tuple2 d1 d2 (t2tb694 z) w)) (parallel_product d2 c2 d1 c1 (t2tb689 h) k))
  (and (mem21 (tb2t693 (Tuple2 c1 d1 (t2tb135 x) (t2tb694 z))) h) (mem
  (tuple2 c2 d2) (Tuple2 c2 d2 y w) k))))))

(declare-fun t2tb1055 ((set (tuple21 (tuple21 a (tuple21 a c)) (tuple21 b
  (tuple21 b d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a (tuple21 a c)) (tuple21 b (tuple21 b
  d)))))) (sort
  (set1 (tuple2 (tuple2 a1 (tuple2 a1 c1)) (tuple2 b1 (tuple2 b1 d1))))
  (t2tb1055 x))))

(declare-fun tb2t1055 (uni) (set (tuple21 (tuple21 a (tuple21 a c))
  (tuple21 b (tuple21 b d)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a (tuple21 a c)) (tuple21 b (tuple21 b
  d)))))) (! (= (tb2t1055 (t2tb1055 i)) i) :pattern ((t2tb1055 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 a1 (tuple2 a1 c1)) (tuple2 b1 (tuple2 b1 d1)))) j)
     (= (t2tb1055 (tb2t1055 j)) j)) :pattern ((t2tb1055 (tb2t1055 j))) )))

(declare-fun t2tb1056 ((tuple21 (tuple21 a (tuple21 a c)) (tuple21 b
  (tuple21 b d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a (tuple21 a c)) (tuple21 b (tuple21 b d)))))
  (sort (tuple2 (tuple2 a1 (tuple2 a1 c1)) (tuple2 b1 (tuple2 b1 d1)))
  (t2tb1056 x))))

(declare-fun tb2t1056 (uni) (tuple21 (tuple21 a (tuple21 a c)) (tuple21 b
  (tuple21 b d))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a (tuple21 a c)) (tuple21 b (tuple21 b d)))))
  (! (= (tb2t1056 (t2tb1056 i)) i) :pattern ((t2tb1056 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 (tuple2 a1 c1)) (tuple2 b1 (tuple2 b1 d1)))
     j) (= (t2tb1056 (tb2t1056 j)) j)) :pattern ((t2tb1056 (tb2t1056 j))) )))

(declare-fun t2tb888 ((tuple21 b (tuple21 b d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 b (tuple21 b d)))) (sort (tuple2 b1 (tuple2 b1 d1))
  (t2tb888 x))))

(declare-fun tb2t888 (uni) (tuple21 b (tuple21 b d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 b (tuple21 b d))))
  (! (= (tb2t888 (t2tb888 i)) i) :pattern ((t2tb888 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 b1 (tuple2 b1 d1)) j) (= (t2tb888 (tb2t888 j)) j)) :pattern (
  (t2tb888 (tb2t888 j))) )))

(declare-fun t2tb257 ((tuple21 a (tuple21 a c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (tuple21 a c)))) (sort (tuple2 a1 (tuple2 a1 c1))
  (t2tb257 x))))

(declare-fun tb2t257 (uni) (tuple21 a (tuple21 a c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (tuple21 a c))))
  (! (= (tb2t257 (t2tb257 i)) i) :pattern ((t2tb257 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (tuple2 a1 c1)) j) (= (t2tb257 (tb2t257 j)) j)) :pattern (
  (t2tb257 (tb2t257 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a b))) (k (set (tuple21 (tuple21 a c) (tuple21 b
  d)))) (x a) (y (tuple21 a c)) (z b) (w (tuple21 b d)))
  (= (mem (tuple2 (tuple2 a1 (tuple2 a1 c1)) (tuple2 b1 (tuple2 b1 d1)))
  (Tuple2 (tuple2 a1 (tuple2 a1 c1)) (tuple2 b1 (tuple2 b1 d1))
  (Tuple2 a1 (tuple2 a1 c1) (t2tb2 x) (t2tb133 y))
  (Tuple2 b1 (tuple2 b1 d1) (t2tb14 z) (t2tb692 w)))
  (parallel_product (tuple2 b1 d1) (tuple2 a1 c1) b1 a1 (t2tb11 h)
  (t2tb686 k)))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 z))) h) (mem24
  (tb2t691 (Tuple2 (tuple2 a1 c1) (tuple2 b1 d1) (t2tb133 y) (t2tb692 w)))
  k)))))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a b))) (k (set (tuple21 c d))) (x a) (y c) (z b)
  (w d))
  (= (mem24
  (tb2t691
  (Tuple2 (tuple2 a1 c1) (tuple2 b1 d1) (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y))
  (Tuple2 b1 d1 (t2tb14 z) (t2tb694 w)))) (parallel_product1 h k))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 z))) h) (mem21
  (tb2t693 (Tuple2 c1 d1 (t2tb135 y) (t2tb694 w))) k)))))

(declare-fun t2tb61 ((set (tuple21 (tuple21 a a) (tuple21 b b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a a) (tuple21 b b))))) (sort
  (set1 (tuple2 (tuple2 a1 a1) (tuple2 b1 b1))) (t2tb61 x))))

(declare-fun tb2t61 (uni) (set (tuple21 (tuple21 a a) (tuple21 b b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a a) (tuple21 b b)))))
  (! (= (tb2t61 (t2tb61 i)) i) :pattern ((t2tb61 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 a1) (tuple2 b1 b1))) j)
     (= (t2tb61 (tb2t61 j)) j)) :pattern ((t2tb61 (tb2t61 j))) )))

(declare-fun t2tb62 ((tuple21 (tuple21 a a) (tuple21 b b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a a) (tuple21 b b)))) (sort
  (tuple2 (tuple2 a1 a1) (tuple2 b1 b1)) (t2tb62 x))))

(declare-fun tb2t62 (uni) (tuple21 (tuple21 a a) (tuple21 b b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a a) (tuple21 b b))))
  (! (= (tb2t62 (t2tb62 i)) i) :pattern ((t2tb62 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 a1) (tuple2 b1 b1)) j)
     (= (t2tb62 (tb2t62 j)) j)) :pattern ((t2tb62 (tb2t62 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a b))) (k (set (tuple21 a b))) (x a) (y a) (z b)
  (w b))
  (= (mem (tuple2 (tuple2 a1 a1) (tuple2 b1 b1))
  (Tuple2 (tuple2 a1 a1) (tuple2 b1 b1) (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y))
  (Tuple2 b1 b1 (t2tb14 z) (t2tb14 w)))
  (parallel_product b1 a1 b1 a1 (t2tb11 h) (t2tb11 k)))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 z))) h) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 y) (t2tb14 w))) k)))))

;; mem_parallel_product
  (assert
  (forall ((c2 ty) (d2 ty))
  (forall ((h (set (tuple21 a b))) (k uni) (x a) (y uni) (z b) (w uni))
  (= (mem (tuple2 (tuple2 a1 c2) (tuple2 b1 d2))
  (Tuple2 (tuple2 a1 c2) (tuple2 b1 d2) (Tuple2 a1 c2 (t2tb2 x) y)
  (Tuple2 b1 d2 (t2tb14 z) w)) (parallel_product d2 c2 b1 a1 (t2tb11 h) k))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 z))) h) (mem
  (tuple2 c2 d2) (Tuple2 c2 d2 y w) k))))))

;; mem_parallel_product
  (assert
  (forall ((a2 ty) (b2 ty) (c2 ty) (d2 ty))
  (forall ((h uni) (k uni) (x uni) (y uni) (z uni) (w uni))
  (= (mem (tuple2 (tuple2 a2 c2) (tuple2 b2 d2))
  (Tuple2 (tuple2 a2 c2) (tuple2 b2 d2) (Tuple2 a2 c2 x y)
  (Tuple2 b2 d2 z w)) (parallel_product d2 c2 b2 a2 h k))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x z) h) (mem (tuple2 c2 d2)
  (Tuple2 c2 d2 y w) k))))))

(declare-fun infix_plmngt (ty ty uni uni) uni)

;; infix +->_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (set1 (tuple2 a2 b2)))
  (infix_plmngt b2 a2 x x1)))))

;; mem_partial_function_set
  (assert
  (forall ((s (set (tuple21 a c))) (t (set (tuple21 b d)))
  (f (set (tuple21 (tuple21 a c) (tuple21 b d)))))
  (= (mem (set1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))) (t2tb686 f)
  (infix_plmngt (tuple2 b1 d1) (tuple2 a1 c1) (t2tb129 s) (t2tb687 t)))
  (and (mem (set1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))) (t2tb686 f)
  (relation (tuple2 b1 d1) (tuple2 a1 c1) (t2tb129 s) (t2tb687 t)))
  (forall ((x (tuple21 a c)) (y1 (tuple21 b d)) (y2 (tuple21 b d)))
  (=>
  (and (mem24
  (tb2t691 (Tuple2 (tuple2 a1 c1) (tuple2 b1 d1) (t2tb133 x) (t2tb692 y1)))
  f) (mem24
  (tb2t691 (Tuple2 (tuple2 a1 c1) (tuple2 b1 d1) (t2tb133 x) (t2tb692 y2)))
  f)) (= y1 y2)))))))

;; mem_partial_function_set
  (assert
  (forall ((s (set c)) (t (set d)) (f (set (tuple21 c d))))
  (= (mem22 f (tb2t688 (infix_plmngt d1 c1 (t2tb132 s) (t2tb690 t))))
  (and (mem22 f (relation7 s t))
  (forall ((x c) (y1 d) (y2 d))
  (=>
  (and (mem21 (tb2t693 (Tuple2 c1 d1 (t2tb135 x) (t2tb694 y1))) f) (mem21
  (tb2t693 (Tuple2 c1 d1 (t2tb135 x) (t2tb694 y2))) f)) (= y1 y2)))))))

;; mem_partial_function_set
  (assert
  (forall ((s (set a)) (t (set b)) (f (set (tuple21 a b))))
  (= (mem4 f (tb2t10 (infix_plmngt b1 a1 (t2tb1 s) (t2tb12 t))))
  (and (mem4 f (relation1 s t))
  (forall ((x a) (y1 b) (y2 b))
  (=>
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y1))) f) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y2))) f)) (= y1 y2)))))))

;; mem_partial_function_set
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (f uni))
  (and
  (=> (mem (set1 (tuple2 a2 b2)) f (infix_plmngt b2 a2 s t))
  (and (mem (set1 (tuple2 a2 b2)) f (relation b2 a2 s t))
  (forall ((x uni) (y1 uni) (y2 uni))
  (=> (sort b2 y1)
  (=> (sort b2 y2)
  (=>
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y1) f) (mem (tuple2 a2 b2)
  (Tuple2 a2 b2 x y2) f)) (= y1 y2)))))))
  (=>
  (and (mem (set1 (tuple2 a2 b2)) f (relation b2 a2 s t))
  (forall ((x uni) (y1 uni) (y2 uni))
  (=> (sort a2 x)
  (=> (sort b2 y1)
  (=> (sort b2 y2)
  (=>
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y1) f) (mem (tuple2 a2 b2)
  (Tuple2 a2 b2 x y2) f)) (= y1 y2))))))) (mem (set1 (tuple2 a2 b2)) f
  (infix_plmngt b2 a2 s t)))))))

(declare-fun infix_mnmngt (ty ty uni uni) uni)

;; infix -->_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (set1 (tuple2 a2 b2)))
  (infix_mnmngt b2 a2 x x1)))))

;; mem_total_function_set
  (assert
  (forall ((s (set c)) (t (set d)) (x (set (tuple21 c d))))
  (= (mem22 x (tb2t688 (infix_mnmngt d1 c1 (t2tb132 s) (t2tb690 t))))
  (and (mem22 x (tb2t688 (infix_plmngt d1 c1 (t2tb132 s) (t2tb690 t))))
  (infix_eqeq c1 (dom d1 c1 (t2tb689 x)) (t2tb132 s))))))

;; mem_total_function_set
  (assert
  (forall ((s (set a)) (t (set b)) (x (set (tuple21 a b))))
  (= (mem4 x (tb2t10 (infix_mnmngt b1 a1 (t2tb1 s) (t2tb12 t))))
  (and (mem4 x (tb2t10 (infix_plmngt b1 a1 (t2tb1 s) (t2tb12 t))))
  (infix_eqeq a1 (dom b1 a1 (t2tb11 x)) (t2tb1 s))))))

;; mem_total_function_set
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (x uni))
  (= (mem (set1 (tuple2 a2 b2)) x (infix_mnmngt b2 a2 s t))
  (and (mem (set1 (tuple2 a2 b2)) x (infix_plmngt b2 a2 s t)) (infix_eqeq a2
  (dom b2 a2 x) s))))))

(declare-fun infix_gtplgt (ty ty uni uni) uni)

;; infix >+>_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (set1 (tuple2 a2 b2)))
  (infix_gtplgt b2 a2 x x1)))))

;; mem_partial_injection_set
  (assert
  (forall ((s (set d)) (t (set c)) (x (set (tuple21 d c))))
  (= (mem (set1 (tuple2 d1 c1)) (t2tb829 x)
  (infix_gtplgt c1 d1 (t2tb690 s) (t2tb132 t)))
  (and (mem (set1 (tuple2 d1 c1)) (t2tb829 x)
  (infix_plmngt c1 d1 (t2tb690 s) (t2tb132 t))) (mem22
  (tb2t689 (inverse c1 d1 (t2tb829 x)))
  (tb2t688 (infix_plmngt d1 c1 (t2tb132 t) (t2tb690 s))))))))

;; mem_partial_injection_set
  (assert
  (forall ((s (set c)) (t (set d)) (x (set (tuple21 c d))))
  (= (mem22 x (tb2t688 (infix_gtplgt d1 c1 (t2tb132 s) (t2tb690 t))))
  (and (mem22 x (tb2t688 (infix_plmngt d1 c1 (t2tb132 s) (t2tb690 t)))) (mem
  (set1 (tuple2 d1 c1)) (inverse d1 c1 (t2tb689 x))
  (infix_plmngt c1 d1 (t2tb690 t) (t2tb132 s)))))))

;; mem_partial_injection_set
  (assert
  (forall ((s (set b)) (t (set a)) (x (set (tuple21 b a))))
  (= (mem (set1 (tuple2 b1 a1)) (t2tb37 x)
  (infix_gtplgt a1 b1 (t2tb12 s) (t2tb1 t)))
  (and (mem (set1 (tuple2 b1 a1)) (t2tb37 x)
  (infix_plmngt a1 b1 (t2tb12 s) (t2tb1 t))) (mem4
  (tb2t11 (inverse a1 b1 (t2tb37 x)))
  (tb2t10 (infix_plmngt b1 a1 (t2tb1 t) (t2tb12 s))))))))

;; mem_partial_injection_set
  (assert
  (forall ((s (set a)) (t (set b)) (x (set (tuple21 a b))))
  (= (mem4 x (tb2t10 (infix_gtplgt b1 a1 (t2tb1 s) (t2tb12 t))))
  (and (mem4 x (tb2t10 (infix_plmngt b1 a1 (t2tb1 s) (t2tb12 t)))) (mem
  (set1 (tuple2 b1 a1)) (inverse b1 a1 (t2tb11 x))
  (infix_plmngt a1 b1 (t2tb12 t) (t2tb1 s)))))))

;; mem_partial_injection_set
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (x uni))
  (= (mem (set1 (tuple2 a2 b2)) x (infix_gtplgt b2 a2 s t))
  (and (mem (set1 (tuple2 a2 b2)) x (infix_plmngt b2 a2 s t)) (mem
  (set1 (tuple2 b2 a2)) (inverse b2 a2 x) (infix_plmngt a2 b2 t s)))))))

(declare-fun infix_gtmngt (ty ty uni uni) uni)

;; infix >->_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (set1 (tuple2 a2 b2)))
  (infix_gtmngt b2 a2 x x1)))))

;; mem_total_injection_set
  (assert
  (forall ((s (set c)) (t (set d)) (x (set (tuple21 c d))))
  (= (mem22 x (tb2t688 (infix_gtmngt d1 c1 (t2tb132 s) (t2tb690 t))))
  (and (mem22 x (tb2t688 (infix_gtplgt d1 c1 (t2tb132 s) (t2tb690 t))))
  (mem22 x (tb2t688 (infix_mnmngt d1 c1 (t2tb132 s) (t2tb690 t))))))))

;; mem_total_injection_set
  (assert
  (forall ((s (set a)) (t (set b)) (x (set (tuple21 a b))))
  (= (mem4 x (tb2t10 (infix_gtmngt b1 a1 (t2tb1 s) (t2tb12 t))))
  (and (mem4 x (tb2t10 (infix_gtplgt b1 a1 (t2tb1 s) (t2tb12 t)))) (mem4 x
  (tb2t10 (infix_mnmngt b1 a1 (t2tb1 s) (t2tb12 t))))))))

;; mem_total_injection_set
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (x uni))
  (= (mem (set1 (tuple2 a2 b2)) x (infix_gtmngt b2 a2 s t))
  (and (mem (set1 (tuple2 a2 b2)) x (infix_gtplgt b2 a2 s t)) (mem
  (set1 (tuple2 a2 b2)) x (infix_mnmngt b2 a2 s t)))))))

(declare-fun infix_plmngtgt (ty ty uni uni) uni)

;; infix +->>_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (set1 (tuple2 a2 b2)))
  (infix_plmngtgt b2 a2 x x1)))))

;; mem_partial_surjection_set
  (assert
  (forall ((s (set c)) (t (set d)) (x (set (tuple21 c d))))
  (= (mem22 x (tb2t688 (infix_plmngtgt d1 c1 (t2tb132 s) (t2tb690 t))))
  (and (mem22 x (tb2t688 (infix_plmngt d1 c1 (t2tb132 s) (t2tb690 t))))
  (infix_eqeq d1 (ran d1 c1 (t2tb689 x)) (t2tb690 t))))))

;; mem_partial_surjection_set
  (assert
  (forall ((s (set a)) (t (set b)) (x (set (tuple21 a b))))
  (= (mem4 x (tb2t10 (infix_plmngtgt b1 a1 (t2tb1 s) (t2tb12 t))))
  (and (mem4 x (tb2t10 (infix_plmngt b1 a1 (t2tb1 s) (t2tb12 t))))
  (infix_eqeq b1 (ran b1 a1 (t2tb11 x)) (t2tb12 t))))))

;; mem_partial_surjection_set
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (x uni))
  (= (mem (set1 (tuple2 a2 b2)) x (infix_plmngtgt b2 a2 s t))
  (and (mem (set1 (tuple2 a2 b2)) x (infix_plmngt b2 a2 s t)) (infix_eqeq b2
  (ran b2 a2 x) t))))))

(declare-fun infix_mnmngtgt (ty ty uni uni) uni)

;; infix -->>_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (set1 (tuple2 a2 b2)))
  (infix_mnmngtgt b2 a2 x x1)))))

;; mem_total_surjection_set
  (assert
  (forall ((s (set c)) (t (set d)) (x (set (tuple21 c d))))
  (= (mem22 x (tb2t688 (infix_mnmngtgt d1 c1 (t2tb132 s) (t2tb690 t))))
  (and (mem22 x (tb2t688 (infix_plmngtgt d1 c1 (t2tb132 s) (t2tb690 t))))
  (mem22 x (tb2t688 (infix_mnmngt d1 c1 (t2tb132 s) (t2tb690 t))))))))

;; mem_total_surjection_set
  (assert
  (forall ((s (set a)) (t (set b)) (x (set (tuple21 a b))))
  (= (mem4 x (tb2t10 (infix_mnmngtgt b1 a1 (t2tb1 s) (t2tb12 t))))
  (and (mem4 x (tb2t10 (infix_plmngtgt b1 a1 (t2tb1 s) (t2tb12 t)))) (mem4 x
  (tb2t10 (infix_mnmngt b1 a1 (t2tb1 s) (t2tb12 t))))))))

;; mem_total_surjection_set
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (x uni))
  (= (mem (set1 (tuple2 a2 b2)) x (infix_mnmngtgt b2 a2 s t))
  (and (mem (set1 (tuple2 a2 b2)) x (infix_plmngtgt b2 a2 s t)) (mem
  (set1 (tuple2 a2 b2)) x (infix_mnmngt b2 a2 s t)))))))

(declare-fun infix_gtplgtgt (ty ty uni uni) uni)

;; infix >+>>_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (set1 (tuple2 a2 b2)))
  (infix_gtplgtgt b2 a2 x x1)))))

;; mem_partial_bijection_set
  (assert
  (forall ((s (set c)) (t (set d)) (x (set (tuple21 c d))))
  (= (mem22 x (tb2t688 (infix_gtplgtgt d1 c1 (t2tb132 s) (t2tb690 t))))
  (and (mem22 x (tb2t688 (infix_gtplgt d1 c1 (t2tb132 s) (t2tb690 t))))
  (mem22 x (tb2t688 (infix_plmngtgt d1 c1 (t2tb132 s) (t2tb690 t))))))))

;; mem_partial_bijection_set
  (assert
  (forall ((s (set a)) (t (set b)) (x (set (tuple21 a b))))
  (= (mem4 x (tb2t10 (infix_gtplgtgt b1 a1 (t2tb1 s) (t2tb12 t))))
  (and (mem4 x (tb2t10 (infix_gtplgt b1 a1 (t2tb1 s) (t2tb12 t)))) (mem4 x
  (tb2t10 (infix_plmngtgt b1 a1 (t2tb1 s) (t2tb12 t))))))))

;; mem_partial_bijection_set
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (x uni))
  (= (mem (set1 (tuple2 a2 b2)) x (infix_gtplgtgt b2 a2 s t))
  (and (mem (set1 (tuple2 a2 b2)) x (infix_gtplgt b2 a2 s t)) (mem
  (set1 (tuple2 a2 b2)) x (infix_plmngtgt b2 a2 s t)))))))

(declare-fun infix_gtmngtgt (ty ty uni uni) uni)

;; infix >->>_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (set1 (tuple2 a2 b2)))
  (infix_gtmngtgt b2 a2 x x1)))))

;; mem_total_bijection_set
  (assert
  (forall ((s (set c)) (t (set d)) (x (set (tuple21 c d))))
  (= (mem22 x (tb2t688 (infix_gtmngtgt d1 c1 (t2tb132 s) (t2tb690 t))))
  (and (mem22 x (tb2t688 (infix_gtmngt d1 c1 (t2tb132 s) (t2tb690 t))))
  (mem22 x (tb2t688 (infix_mnmngtgt d1 c1 (t2tb132 s) (t2tb690 t))))))))

;; mem_total_bijection_set
  (assert
  (forall ((s (set a)) (t (set b)) (x (set (tuple21 a b))))
  (= (mem4 x (tb2t10 (infix_gtmngtgt b1 a1 (t2tb1 s) (t2tb12 t))))
  (and (mem4 x (tb2t10 (infix_gtmngt b1 a1 (t2tb1 s) (t2tb12 t)))) (mem4 x
  (tb2t10 (infix_mnmngtgt b1 a1 (t2tb1 s) (t2tb12 t))))))))

;; mem_total_bijection_set
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (x uni))
  (= (mem (set1 (tuple2 a2 b2)) x (infix_gtmngtgt b2 a2 s t))
  (and (mem (set1 (tuple2 a2 b2)) x (infix_gtmngt b2 a2 s t)) (mem
  (set1 (tuple2 a2 b2)) x (infix_mnmngtgt b2 a2 s t)))))))

(declare-fun apply (ty ty uni uni) uni)

;; apply_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort b2 (apply b2 a2 x x1)))))

;; apply_def0
  (assert
  (forall ((b2 ty))
  (forall ((f uni) (s (set (tuple21 (tuple21 a c) (tuple21 b d)))) (t uni)
  (a2 (tuple21 (tuple21 a c) (tuple21 b d))))
  (=>
  (and (mem (set1 (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) b2)) f
  (infix_plmngt b2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb686 s) t))
  (mem24 a2 (tb2t686 (dom b2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) f))))
  (mem (tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) b2)
  (Tuple2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) b2 (t2tb691 a2)
  (apply b2 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) f (t2tb691 a2))) f)))))

;; apply_def0
  (assert
  (forall ((b2 ty))
  (forall ((f uni) (s (set (set (tuple21 c d)))) (t uni) (a2 (set (tuple21 c
  d))))
  (=>
  (and (mem (set1 (tuple2 (set1 (tuple2 c1 d1)) b2)) f
  (infix_plmngt b2 (set1 (tuple2 c1 d1)) (t2tb688 s) t)) (mem22 a2
  (tb2t688 (dom b2 (set1 (tuple2 c1 d1)) f)))) (mem
  (tuple2 (set1 (tuple2 c1 d1)) b2)
  (Tuple2 (set1 (tuple2 c1 d1)) b2 (t2tb689 a2)
  (apply b2 (set1 (tuple2 c1 d1)) f (t2tb689 a2))) f)))))

;; apply_def0
  (assert
  (forall ((b2 ty))
  (forall ((f uni) (s (set (tuple21 c d))) (t uni) (a2 (tuple21 c d)))
  (=>
  (and (mem (set1 (tuple2 (tuple2 c1 d1) b2)) f
  (infix_plmngt b2 (tuple2 c1 d1) (t2tb689 s) t)) (mem21 a2
  (tb2t689 (dom b2 (tuple2 c1 d1) f)))) (mem (tuple2 (tuple2 c1 d1) b2)
  (Tuple2 (tuple2 c1 d1) b2 (t2tb693 a2)
  (apply b2 (tuple2 c1 d1) f (t2tb693 a2))) f)))))

;; apply_def0
  (assert
  (forall ((b2 ty))
  (forall ((f uni) (s (set d)) (t uni) (a2 d))
  (=>
  (and (mem (set1 (tuple2 d1 b2)) f (infix_plmngt b2 d1 (t2tb690 s) t))
  (mem20 a2 (tb2t690 (dom b2 d1 f)))) (mem (tuple2 d1 b2)
  (Tuple2 d1 b2 (t2tb694 a2) (apply b2 d1 f (t2tb694 a2))) f)))))

;; apply_def0
  (assert
  (forall ((f (set (tuple21 (tuple21 a c) (tuple21 b d)))) (s (set (tuple21 a
  c))) (t (set (tuple21 b d))) (a2 (tuple21 a c)))
  (=>
  (and (mem (set1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))) (t2tb686 f)
  (infix_plmngt (tuple2 b1 d1) (tuple2 a1 c1) (t2tb129 s) (t2tb687 t))) (mem
  (tuple2 a1 c1) (t2tb133 a2)
  (dom (tuple2 b1 d1) (tuple2 a1 c1) (t2tb686 f)))) (mem24
  (tb2t691
  (Tuple2 (tuple2 a1 c1) (tuple2 b1 d1) (t2tb133 a2)
  (apply (tuple2 b1 d1) (tuple2 a1 c1) (t2tb686 f) (t2tb133 a2)))) f))))

;; apply_def0
  (assert
  (forall ((f (set (tuple21 c d))) (s (set c)) (t (set d)) (a2 c))
  (=>
  (and (mem22 f (tb2t688 (infix_plmngt d1 c1 (t2tb132 s) (t2tb690 t)))) (mem7
  a2 (tb2t132 (dom d1 c1 (t2tb689 f))))) (mem21
  (tb2t693
  (Tuple2 c1 d1 (t2tb135 a2) (apply d1 c1 (t2tb689 f) (t2tb135 a2)))) f))))

;; apply_def0
  (assert
  (forall ((b2 ty))
  (forall ((f uni) (s (set c)) (t uni) (a2 c))
  (=>
  (and (mem (set1 (tuple2 c1 b2)) f (infix_plmngt b2 c1 (t2tb132 s) t)) (mem7
  a2 (tb2t132 (dom b2 c1 f)))) (mem (tuple2 c1 b2)
  (Tuple2 c1 b2 (t2tb135 a2) (apply b2 c1 f (t2tb135 a2))) f)))))

;; apply_def0
  (assert
  (forall ((b2 ty))
  (forall ((f uni) (s (set (set (tuple21 a b)))) (t uni) (a2 (set (tuple21 a
  b))))
  (=>
  (and (mem (set1 (tuple2 (set1 (tuple2 a1 b1)) b2)) f
  (infix_plmngt b2 (set1 (tuple2 a1 b1)) (t2tb10 s) t)) (mem4 a2
  (tb2t10 (dom b2 (set1 (tuple2 a1 b1)) f)))) (mem
  (tuple2 (set1 (tuple2 a1 b1)) b2)
  (Tuple2 (set1 (tuple2 a1 b1)) b2 (t2tb11 a2)
  (apply b2 (set1 (tuple2 a1 b1)) f (t2tb11 a2))) f)))))

;; apply_def0
  (assert
  (forall ((b2 ty))
  (forall ((f uni) (s (set (tuple21 a b))) (t uni) (a2 (tuple21 a b)))
  (=>
  (and (mem (set1 (tuple2 (tuple2 a1 b1) b2)) f
  (infix_plmngt b2 (tuple2 a1 b1) (t2tb11 s) t)) (mem3 a2
  (tb2t11 (dom b2 (tuple2 a1 b1) f)))) (mem (tuple2 (tuple2 a1 b1) b2)
  (Tuple2 (tuple2 a1 b1) b2 (t2tb13 a2)
  (apply b2 (tuple2 a1 b1) f (t2tb13 a2))) f)))))

;; apply_def0
  (assert
  (forall ((b2 ty))
  (forall ((f uni) (s (set b)) (t uni) (a2 b))
  (=>
  (and (mem (set1 (tuple2 b1 b2)) f (infix_plmngt b2 b1 (t2tb12 s) t)) (mem2
  a2 (tb2t12 (dom b2 b1 f)))) (mem (tuple2 b1 b2)
  (Tuple2 b1 b2 (t2tb14 a2) (apply b2 b1 f (t2tb14 a2))) f)))))

;; apply_def0
  (assert
  (forall ((f (set (tuple21 a b))) (s (set a)) (t (set b)) (a2 a))
  (=>
  (and (mem4 f (tb2t10 (infix_plmngt b1 a1 (t2tb1 s) (t2tb12 t)))) (mem1 a2
  (tb2t1 (dom b1 a1 (t2tb11 f))))) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 a2) (apply b1 a1 (t2tb11 f) (t2tb2 a2)))) f))))

;; apply_def0
  (assert
  (forall ((b2 ty))
  (forall ((f uni) (s (set a)) (t uni) (a2 a))
  (=>
  (and (mem (set1 (tuple2 a1 b2)) f (infix_plmngt b2 a1 (t2tb1 s) t)) (mem1
  a2 (tb2t1 (dom b2 a1 f)))) (mem (tuple2 a1 b2)
  (Tuple2 a1 b2 (t2tb2 a2) (apply b2 a1 f (t2tb2 a2))) f)))))

;; apply_def0
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((f uni) (s uni) (t uni) (a3 uni))
  (=>
  (and (mem (set1 (tuple2 a2 b2)) f (infix_plmngt b2 a2 s t)) (mem a2 a3
  (dom b2 a2 f))) (mem (tuple2 a2 b2) (Tuple2 a2 b2 a3 (apply b2 a2 f a3))
  f)))))

(assert
;; monot_parallel_product
 ;; File "lemmes_bbook.why", line 870, characters 7-29
  (not
  (forall ((s (set a)) (t (set b)) (u (set c)) (v (set d)) (h (set (tuple21 a
  b))) (p (set (tuple21 a b))) (k (set (tuple21 c d))) (q (set (tuple21 c
  d))))
  (=> (and (mem4 h (relation1 s t)) (mem22 k (relation7 u v)))
  (=> (and (subset6 p h) (subset18 q k)) (subset19 (parallel_product1 p q)
  (parallel_product1 h k)))))))
(check-sat)
