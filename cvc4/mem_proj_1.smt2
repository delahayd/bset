(set-logic AUFBVDTLIRA)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
(declare-sort uni 0)

(declare-sort ty 0)

(declare-fun sort (ty uni) Bool)

(declare-fun witness (ty) uni)

;; witness_sort
  (assert (forall ((a2 ty)) (sort a2 (witness a2))))

(declare-fun int () ty)

(declare-fun real () ty)

(declare-sort set 1)

(declare-fun set1 (ty) ty)

(declare-sort b 0)

(declare-fun b1 () ty)

(declare-sort a 0)

(declare-fun a1 () ty)

(declare-sort tuple21 2)

(declare-fun tuple2 (ty ty) ty)

(declare-fun mem (ty uni uni) Bool)

(declare-fun mem1 (a (set a)) Bool)

(declare-fun mem2 (b (set b)) Bool)

(declare-fun mem3 ((tuple21 a b) (set (tuple21 a b))) Bool)

(declare-fun mem16 ((tuple21 (tuple21 a b) a) (set (tuple21 (tuple21 a b)
  a))) Bool)

(declare-fun mem17 ((set (tuple21 (tuple21 a b) a))
  (set (set (tuple21 (tuple21 a b) a)))) Bool)

(declare-fun infix_eqeq (ty uni uni) Bool)

(declare-fun t2tb52 ((set (set (tuple21 (tuple21 a b) a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a b) a))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 b1) a1))) (t2tb52 x))))

(declare-fun tb2t52 (uni) (set (set (tuple21 (tuple21 a b) a))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a b) a)))))
  (! (= (tb2t52 (t2tb52 i)) i) :pattern ((t2tb52 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 b1) a1))) j)
     (= (t2tb52 (tb2t52 j)) j)) :pattern ((t2tb52 (tb2t52 j))) )))

;; infix ==_def
  (assert
  (forall ((s (set (set (tuple21 (tuple21 a b) a))))
  (t (set (set (tuple21 (tuple21 a b) a)))))
  (= (infix_eqeq (set1 (tuple2 (tuple2 a1 b1) a1)) (t2tb52 s) (t2tb52 t))
  (forall ((x (set (tuple21 (tuple21 a b) a)))) (= (mem17 x s) (mem17 x t))))))

(declare-fun t2tb29 ((set (tuple21 (tuple21 a b) a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) a)))) (sort
  (set1 (tuple2 (tuple2 a1 b1) a1)) (t2tb29 x))))

(declare-fun tb2t29 (uni) (set (tuple21 (tuple21 a b) a)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a b) a))))
  (! (= (tb2t29 (t2tb29 i)) i) :pattern ((t2tb29 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 b1) a1)) j)
     (= (t2tb29 (tb2t29 j)) j)) :pattern ((t2tb29 (tb2t29 j))) )))

;; infix ==_def
  (assert
  (forall ((s (set (tuple21 (tuple21 a b) a))) (t (set (tuple21 (tuple21 a b)
  a))))
  (= (infix_eqeq (tuple2 (tuple2 a1 b1) a1) (t2tb29 s) (t2tb29 t))
  (forall ((x (tuple21 (tuple21 a b) a))) (= (mem16 x s) (mem16 x t))))))

(declare-fun t2tb11 ((set (tuple21 a b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a b)))) (sort (set1 (tuple2 a1 b1)) (t2tb11 x))))

(declare-fun tb2t11 (uni) (set (tuple21 a b)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a b))))
  (! (= (tb2t11 (t2tb11 i)) i) :pattern ((t2tb11 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 b1)) j) (= (t2tb11 (tb2t11 j)) j)) :pattern (
  (t2tb11 (tb2t11 j))) )))

;; infix ==_def
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (tuple21 a b))))
  (= (infix_eqeq (tuple2 a1 b1) (t2tb11 s) (t2tb11 t))
  (forall ((x (tuple21 a b))) (= (mem3 x s) (mem3 x t))))))

(declare-fun t2tb12 ((set b)) uni)

;; t2tb_sort
  (assert (forall ((x (set b))) (sort (set1 b1) (t2tb12 x))))

(declare-fun tb2t12 (uni) (set b))

;; BridgeL
  (assert
  (forall ((i (set b))) (! (= (tb2t12 (t2tb12 i)) i) :pattern ((t2tb12 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 b1) j) (= (t2tb12 (tb2t12 j)) j)) :pattern ((t2tb12
                                                                 (tb2t12 j))) )))

;; infix ==_def
  (assert
  (forall ((s (set b)) (t (set b)))
  (= (infix_eqeq b1 (t2tb12 s) (t2tb12 t))
  (forall ((x b)) (= (mem2 x s) (mem2 x t))))))

(declare-fun t2tb1 ((set a)) uni)

;; t2tb_sort
  (assert (forall ((x (set a))) (sort (set1 a1) (t2tb1 x))))

(declare-fun tb2t1 (uni) (set a))

;; BridgeL
  (assert
  (forall ((i (set a))) (! (= (tb2t1 (t2tb1 i)) i) :pattern ((t2tb1 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 a1) j) (= (t2tb1 (tb2t1 j)) j)) :pattern ((t2tb1
                                                               (tb2t1 j))) )))

;; infix ==_def
  (assert
  (forall ((s (set a)) (t (set a)))
  (= (infix_eqeq a1 (t2tb1 s) (t2tb1 t))
  (forall ((x a)) (= (mem1 x s) (mem1 x t))))))

;; infix ==_def
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t uni))
  (and
  (=> (infix_eqeq a2 s t) (forall ((x uni)) (= (mem a2 x s) (mem a2 x t))))
  (=> (forall ((x uni)) (=> (sort a2 x) (= (mem a2 x s) (mem a2 x t))))
  (infix_eqeq a2 s t))))))

(declare-fun power (ty uni) uni)

;; power_sort
  (assert
  (forall ((a2 ty)) (forall ((x uni)) (sort (set1 (set1 a2)) (power a2 x)))))

(declare-fun non_empty_power (ty uni) uni)

;; non_empty_power_sort
  (assert
  (forall ((a2 ty))
  (forall ((x uni)) (sort (set1 (set1 a2)) (non_empty_power a2 x)))))

(declare-fun subset1 (ty uni uni) Bool)

;; subset_def
  (assert
  (forall ((s (set (tuple21 (tuple21 a b) a))) (t (set (tuple21 (tuple21 a b)
  a))))
  (= (subset1 (tuple2 (tuple2 a1 b1) a1) (t2tb29 s) (t2tb29 t)) (mem17 s
  (tb2t52 (power (tuple2 (tuple2 a1 b1) a1) (t2tb29 t)))))))

;; subset_def
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t uni))
  (= (subset1 a2 s t) (mem (set1 a2) s (power a2 t))))))

(declare-fun subsetnoteq (ty uni uni) Bool)

;; subsetnoteq_def
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t uni))
  (= (subsetnoteq a2 s t) (and (subset1 a2 s t) (not (infix_eqeq a2 s t)))))))

(declare-fun empty (ty) uni)

;; empty_sort
  (assert (forall ((a2 ty)) (sort (set1 a2) (empty a2))))

(declare-fun is_empty (ty uni) Bool)

;; is_empty_def
  (assert
  (forall ((s (set (set (tuple21 (tuple21 a b) a)))))
  (= (is_empty (set1 (tuple2 (tuple2 a1 b1) a1)) (t2tb52 s))
  (forall ((x (set (tuple21 (tuple21 a b) a)))) (not (mem17 x s))))))

;; is_empty_def
  (assert
  (forall ((s (set (tuple21 (tuple21 a b) a))))
  (= (is_empty (tuple2 (tuple2 a1 b1) a1) (t2tb29 s))
  (forall ((x (tuple21 (tuple21 a b) a))) (not (mem16 x s))))))

;; is_empty_def
  (assert
  (forall ((s (set (tuple21 a b))))
  (= (is_empty (tuple2 a1 b1) (t2tb11 s))
  (forall ((x (tuple21 a b))) (not (mem3 x s))))))

;; is_empty_def
  (assert
  (forall ((s (set b)))
  (= (is_empty b1 (t2tb12 s)) (forall ((x b)) (not (mem2 x s))))))

;; is_empty_def
  (assert
  (forall ((s (set a)))
  (= (is_empty a1 (t2tb1 s)) (forall ((x a)) (not (mem1 x s))))))

;; is_empty_def
  (assert
  (forall ((a2 ty))
  (forall ((s uni))
  (and (=> (is_empty a2 s) (forall ((x uni)) (not (mem a2 x s))))
  (=> (forall ((x uni)) (=> (sort a2 x) (not (mem a2 x s)))) (is_empty a2 s))))))

;; empty_def1
  (assert (forall ((a2 ty)) (is_empty a2 (empty a2))))

;; empty
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) a))))
  (not (mem17 x (tb2t52 (empty (set1 (tuple2 (tuple2 a1 b1) a1))))))))

;; empty
  (assert
  (forall ((x (tuple21 (tuple21 a b) a)))
  (not (mem16 x (tb2t29 (empty (tuple2 (tuple2 a1 b1) a1)))))))

;; empty
  (assert
  (forall ((x (tuple21 a b))) (not (mem3 x (tb2t11 (empty (tuple2 a1 b1)))))))

;; empty
  (assert (forall ((x b)) (not (mem2 x (tb2t12 (empty b1))))))

;; empty
  (assert (forall ((x a)) (not (mem1 x (tb2t1 (empty a1))))))

;; empty
  (assert (forall ((a2 ty)) (forall ((x uni)) (not (mem a2 x (empty a2))))))

(declare-fun add (ty uni uni) uni)

;; add_sort
  (assert
  (forall ((a2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 a2) (add a2 x x1)))))

;; add_def1
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) a))) (y (set (tuple21 (tuple21 a b)
  a))))
  (forall ((s (set (set (tuple21 (tuple21 a b) a)))))
  (= (mem17 x
  (tb2t52 (add (set1 (tuple2 (tuple2 a1 b1) a1)) (t2tb29 y) (t2tb52 s))))
  (or (= x y) (mem17 x s))))))

(declare-fun t2tb30 ((tuple21 (tuple21 a b) a)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a b) a))) (sort (tuple2 (tuple2 a1 b1) a1)
  (t2tb30 x))))

(declare-fun tb2t30 (uni) (tuple21 (tuple21 a b) a))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a b) a)))
  (! (= (tb2t30 (t2tb30 i)) i) :pattern ((t2tb30 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 b1) a1) j) (= (t2tb30 (tb2t30 j)) j)) :pattern (
  (t2tb30 (tb2t30 j))) )))

;; add_def1
  (assert
  (forall ((x (tuple21 (tuple21 a b) a)) (y (tuple21 (tuple21 a b) a)))
  (forall ((s (set (tuple21 (tuple21 a b) a))))
  (= (mem16 x
  (tb2t29 (add (tuple2 (tuple2 a1 b1) a1) (t2tb30 y) (t2tb29 s))))
  (or (= x y) (mem16 x s))))))

(declare-fun t2tb13 ((tuple21 a b)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 a b))) (sort (tuple2 a1 b1) (t2tb13 x))))

(declare-fun tb2t13 (uni) (tuple21 a b))

;; BridgeL
  (assert
  (forall ((i (tuple21 a b)))
  (! (= (tb2t13 (t2tb13 i)) i) :pattern ((t2tb13 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 b1) j) (= (t2tb13 (tb2t13 j)) j)) :pattern (
  (t2tb13 (tb2t13 j))) )))

;; add_def1
  (assert
  (forall ((x (tuple21 a b)) (y (tuple21 a b)))
  (forall ((s (set (tuple21 a b))))
  (= (mem3 x (tb2t11 (add (tuple2 a1 b1) (t2tb13 y) (t2tb11 s))))
  (or (= x y) (mem3 x s))))))

(declare-fun t2tb14 (b) uni)

;; t2tb_sort
  (assert (forall ((x b)) (sort b1 (t2tb14 x))))

(declare-fun tb2t14 (uni) b)

;; BridgeL
  (assert
  (forall ((i b)) (! (= (tb2t14 (t2tb14 i)) i) :pattern ((t2tb14 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort b1 j) (= (t2tb14 (tb2t14 j)) j)) :pattern ((t2tb14 (tb2t14 j))) )))

;; add_def1
  (assert
  (forall ((x b) (y b))
  (forall ((s (set b)))
  (= (mem2 x (tb2t12 (add b1 (t2tb14 y) (t2tb12 s))))
  (or (= x y) (mem2 x s))))))

(declare-fun t2tb2 (a) uni)

;; t2tb_sort
  (assert (forall ((x a)) (sort a1 (t2tb2 x))))

(declare-fun tb2t2 (uni) a)

;; BridgeL
  (assert (forall ((i a)) (! (= (tb2t2 (t2tb2 i)) i) :pattern ((t2tb2 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort a1 j) (= (t2tb2 (tb2t2 j)) j)) :pattern ((t2tb2 (tb2t2 j))) )))

;; add_def1
  (assert
  (forall ((x a) (y a))
  (forall ((s (set a)))
  (= (mem1 x (tb2t1 (add a1 (t2tb2 y) (t2tb1 s)))) (or (= x y) (mem1 x s))))))

;; add_def1
  (assert
  (forall ((a2 ty))
  (forall ((x uni) (y uni))
  (=> (sort a2 x)
  (=> (sort a2 y)
  (forall ((s uni)) (= (mem a2 x (add a2 y s)) (or (= x y) (mem a2 x s)))))))))

(declare-fun singleton (ty uni) uni)

;; singleton_sort
  (assert
  (forall ((a2 ty)) (forall ((x uni)) (sort (set1 a2) (singleton a2 x)))))

;; mem_singleton
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) a))) (y (set (tuple21 (tuple21 a b)
  a))))
  (= (mem17 x
  (tb2t52 (singleton (set1 (tuple2 (tuple2 a1 b1) a1)) (t2tb29 y)))) (= x y))))

;; mem_singleton
  (assert
  (forall ((x (tuple21 (tuple21 a b) a)) (y (tuple21 (tuple21 a b) a)))
  (= (mem16 x (tb2t29 (singleton (tuple2 (tuple2 a1 b1) a1) (t2tb30 y))))
  (= x y))))

;; mem_singleton
  (assert
  (forall ((x (tuple21 a b)) (y (tuple21 a b)))
  (= (mem3 x (tb2t11 (singleton (tuple2 a1 b1) (t2tb13 y)))) (= x y))))

;; mem_singleton
  (assert
  (forall ((x b) (y b))
  (= (mem2 x (tb2t12 (singleton b1 (t2tb14 y)))) (= x y))))

;; mem_singleton
  (assert
  (forall ((x a) (y a))
  (= (mem1 x (tb2t1 (singleton a1 (t2tb2 y)))) (= x y))))

;; mem_singleton
  (assert
  (forall ((a2 ty))
  (forall ((x uni) (y uni))
  (=> (sort a2 x) (=> (sort a2 y) (= (mem a2 x (singleton a2 y)) (= x y)))))))

(declare-fun remove (ty uni uni) uni)

;; remove_sort
  (assert
  (forall ((a2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 a2) (remove a2 x x1)))))

;; remove_def1
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) a))) (y (set (tuple21 (tuple21 a b)
  a))) (s (set (set (tuple21 (tuple21 a b) a)))))
  (= (mem17 x
  (tb2t52 (remove (set1 (tuple2 (tuple2 a1 b1) a1)) (t2tb29 y) (t2tb52 s))))
  (and (not (= x y)) (mem17 x s)))))

;; remove_def1
  (assert
  (forall ((x (tuple21 (tuple21 a b) a)) (y (tuple21 (tuple21 a b) a))
  (s (set (tuple21 (tuple21 a b) a))))
  (= (mem16 x
  (tb2t29 (remove (tuple2 (tuple2 a1 b1) a1) (t2tb30 y) (t2tb29 s))))
  (and (not (= x y)) (mem16 x s)))))

;; remove_def1
  (assert
  (forall ((x (tuple21 a b)) (y (tuple21 a b)) (s (set (tuple21 a b))))
  (= (mem3 x (tb2t11 (remove (tuple2 a1 b1) (t2tb13 y) (t2tb11 s))))
  (and (not (= x y)) (mem3 x s)))))

;; remove_def1
  (assert
  (forall ((x b) (y b) (s (set b)))
  (= (mem2 x (tb2t12 (remove b1 (t2tb14 y) (t2tb12 s))))
  (and (not (= x y)) (mem2 x s)))))

;; remove_def1
  (assert
  (forall ((x a) (y a) (s (set a)))
  (= (mem1 x (tb2t1 (remove a1 (t2tb2 y) (t2tb1 s))))
  (and (not (= x y)) (mem1 x s)))))

;; remove_def1
  (assert
  (forall ((a2 ty))
  (forall ((x uni) (y uni) (s uni))
  (=> (sort a2 x)
  (=> (sort a2 y)
  (= (mem a2 x (remove a2 y s)) (and (not (= x y)) (mem a2 x s))))))))

(declare-fun all (ty) uni)

;; all_sort
  (assert (forall ((a2 ty)) (sort (set1 a2) (all a2))))

;; all_def
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) a)))) (mem17 x
  (tb2t52 (all (set1 (tuple2 (tuple2 a1 b1) a1)))))))

;; all_def
  (assert
  (forall ((x (tuple21 (tuple21 a b) a))) (mem16 x
  (tb2t29 (all (tuple2 (tuple2 a1 b1) a1))))))

;; all_def
  (assert
  (forall ((x (tuple21 a b))) (mem3 x (tb2t11 (all (tuple2 a1 b1))))))

;; all_def
  (assert (forall ((x b)) (mem2 x (tb2t12 (all b1)))))

;; all_def
  (assert (forall ((x a)) (mem1 x (tb2t1 (all a1)))))

;; all_def
  (assert (forall ((a2 ty)) (forall ((x uni)) (mem a2 x (all a2)))))

(declare-fun union1 (ty uni uni) uni)

;; union_sort
  (assert
  (forall ((a2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 a2) (union1 a2 x x1)))))

;; mem_union
  (assert
  (forall ((s (set (set (tuple21 (tuple21 a b) a))))
  (t (set (set (tuple21 (tuple21 a b) a)))) (x (set (tuple21 (tuple21 a b)
  a))))
  (= (mem17 x
  (tb2t52 (union1 (set1 (tuple2 (tuple2 a1 b1) a1)) (t2tb52 s) (t2tb52 t))))
  (or (mem17 x s) (mem17 x t)))))

;; mem_union
  (assert
  (forall ((s (set (tuple21 (tuple21 a b) a))) (t (set (tuple21 (tuple21 a b)
  a))) (x (tuple21 (tuple21 a b) a)))
  (= (mem16 x
  (tb2t29 (union1 (tuple2 (tuple2 a1 b1) a1) (t2tb29 s) (t2tb29 t))))
  (or (mem16 x s) (mem16 x t)))))

;; mem_union
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (tuple21 a b))) (x (tuple21 a b)))
  (= (mem3 x (tb2t11 (union1 (tuple2 a1 b1) (t2tb11 s) (t2tb11 t))))
  (or (mem3 x s) (mem3 x t)))))

;; mem_union
  (assert
  (forall ((s (set b)) (t (set b)) (x b))
  (= (mem2 x (tb2t12 (union1 b1 (t2tb12 s) (t2tb12 t))))
  (or (mem2 x s) (mem2 x t)))))

;; mem_union
  (assert
  (forall ((s (set a)) (t (set a)) (x a))
  (= (mem1 x (tb2t1 (union1 a1 (t2tb1 s) (t2tb1 t))))
  (or (mem1 x s) (mem1 x t)))))

;; mem_union
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t uni) (x uni))
  (= (mem a2 x (union1 a2 s t)) (or (mem a2 x s) (mem a2 x t))))))

(declare-fun inter (ty uni uni) uni)

;; inter_sort
  (assert
  (forall ((a2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 a2) (inter a2 x x1)))))

;; mem_inter
  (assert
  (forall ((s (set (set (tuple21 (tuple21 a b) a))))
  (t (set (set (tuple21 (tuple21 a b) a)))) (x (set (tuple21 (tuple21 a b)
  a))))
  (= (mem17 x
  (tb2t52 (inter (set1 (tuple2 (tuple2 a1 b1) a1)) (t2tb52 s) (t2tb52 t))))
  (and (mem17 x s) (mem17 x t)))))

;; mem_inter
  (assert
  (forall ((s (set (tuple21 (tuple21 a b) a))) (t (set (tuple21 (tuple21 a b)
  a))) (x (tuple21 (tuple21 a b) a)))
  (= (mem16 x
  (tb2t29 (inter (tuple2 (tuple2 a1 b1) a1) (t2tb29 s) (t2tb29 t))))
  (and (mem16 x s) (mem16 x t)))))

;; mem_inter
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (tuple21 a b))) (x (tuple21 a b)))
  (= (mem3 x (tb2t11 (inter (tuple2 a1 b1) (t2tb11 s) (t2tb11 t))))
  (and (mem3 x s) (mem3 x t)))))

;; mem_inter
  (assert
  (forall ((s (set b)) (t (set b)) (x b))
  (= (mem2 x (tb2t12 (inter b1 (t2tb12 s) (t2tb12 t))))
  (and (mem2 x s) (mem2 x t)))))

;; mem_inter
  (assert
  (forall ((s (set a)) (t (set a)) (x a))
  (= (mem1 x (tb2t1 (inter a1 (t2tb1 s) (t2tb1 t))))
  (and (mem1 x s) (mem1 x t)))))

;; mem_inter
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t uni) (x uni))
  (= (mem a2 x (inter a2 s t)) (and (mem a2 x s) (mem a2 x t))))))

(declare-fun diff (ty uni uni) uni)

;; diff_sort
  (assert
  (forall ((a2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 a2) (diff a2 x x1)))))

;; mem_diff
  (assert
  (forall ((s (set (set (tuple21 (tuple21 a b) a))))
  (t (set (set (tuple21 (tuple21 a b) a)))) (x (set (tuple21 (tuple21 a b)
  a))))
  (= (mem17 x
  (tb2t52 (diff (set1 (tuple2 (tuple2 a1 b1) a1)) (t2tb52 s) (t2tb52 t))))
  (and (mem17 x s) (not (mem17 x t))))))

;; mem_diff
  (assert
  (forall ((s (set (tuple21 (tuple21 a b) a))) (t (set (tuple21 (tuple21 a b)
  a))) (x (tuple21 (tuple21 a b) a)))
  (= (mem16 x
  (tb2t29 (diff (tuple2 (tuple2 a1 b1) a1) (t2tb29 s) (t2tb29 t))))
  (and (mem16 x s) (not (mem16 x t))))))

;; mem_diff
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (tuple21 a b))) (x (tuple21 a b)))
  (= (mem3 x (tb2t11 (diff (tuple2 a1 b1) (t2tb11 s) (t2tb11 t))))
  (and (mem3 x s) (not (mem3 x t))))))

;; mem_diff
  (assert
  (forall ((s (set b)) (t (set b)) (x b))
  (= (mem2 x (tb2t12 (diff b1 (t2tb12 s) (t2tb12 t))))
  (and (mem2 x s) (not (mem2 x t))))))

;; mem_diff
  (assert
  (forall ((s (set a)) (t (set a)) (x a))
  (= (mem1 x (tb2t1 (diff a1 (t2tb1 s) (t2tb1 t))))
  (and (mem1 x s) (not (mem1 x t))))))

;; mem_diff
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t uni) (x uni))
  (= (mem a2 x (diff a2 s t)) (and (mem a2 x s) (not (mem a2 x t)))))))

(declare-fun Tuple2 (ty ty uni uni) uni)

;; Tuple2_sort
  (assert
  (forall ((a2 ty) (a3 ty))
  (forall ((x uni) (x1 uni)) (sort (tuple2 a3 a2) (Tuple2 a3 a2 x x1)))))

(declare-fun Tuple21 (a b) (tuple21 a b))

(declare-fun Tuple22 ((tuple21 a b) a) (tuple21 (tuple21 a b) a))

(declare-fun Tuple23 ((set a) (set b)) (tuple21 (set a) (set b)))

(declare-fun Tuple2_proj_1 (ty ty uni) uni)

;; Tuple2_proj_1_sort
  (assert
  (forall ((a2 ty) (a3 ty))
  (forall ((x uni)) (sort a3 (Tuple2_proj_1 a3 a2 x)))))

(declare-fun t2tb495 ((tuple21 (set a) (set b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set a) (set b)))) (sort (tuple2 (set1 a1) (set1 b1))
  (t2tb495 x))))

(declare-fun tb2t495 (uni) (tuple21 (set a) (set b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set a) (set b))))
  (! (= (tb2t495 (t2tb495 i)) i) :pattern ((t2tb495 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 a1) (set1 b1)) j) (= (t2tb495 (tb2t495 j)) j)) :pattern (
  (t2tb495 (tb2t495 j))) )))

;; Tuple2_proj_1_def
  (assert
  (forall ((u (set a)) (u1 (set b)))
  (= (tb2t1 (Tuple2_proj_1 (set1 a1) (set1 b1) (t2tb495 (Tuple23 u u1)))) u)))

;; Tuple2_proj_1_def
  (assert
  (forall ((u a) (u1 b))
  (= (tb2t2 (Tuple2_proj_1 a1 b1 (t2tb13 (Tuple21 u u1)))) u)))

;; Tuple2_proj_1_def
  (assert
  (forall ((u (tuple21 a b)) (u1 a))
  (= (tb2t13 (Tuple2_proj_1 (tuple2 a1 b1) a1 (t2tb30 (Tuple22 u u1)))) u)))

;; Tuple2_proj_1_def
  (assert
  (forall ((a2 ty) (a3 ty))
  (forall ((u uni) (u1 uni))
  (=> (sort a3 u) (= (Tuple2_proj_1 a3 a2 (Tuple2 a3 a2 u u1)) u)))))

(declare-fun Tuple2_proj_2 (ty ty uni) uni)

;; Tuple2_proj_2_sort
  (assert
  (forall ((a2 ty) (a3 ty))
  (forall ((x uni)) (sort a2 (Tuple2_proj_2 a3 a2 x)))))

;; Tuple2_proj_2_def
  (assert
  (forall ((u (set a)) (u1 (set b)))
  (= (tb2t12 (Tuple2_proj_2 (set1 a1) (set1 b1) (t2tb495 (Tuple23 u u1)))) u1)))

;; Tuple2_proj_2_def
  (assert
  (forall ((u a) (u1 b))
  (= (tb2t14 (Tuple2_proj_2 a1 b1 (t2tb13 (Tuple21 u u1)))) u1)))

;; Tuple2_proj_2_def
  (assert
  (forall ((u (tuple21 a b)) (u1 a))
  (= (tb2t2 (Tuple2_proj_2 (tuple2 a1 b1) a1 (t2tb30 (Tuple22 u u1)))) u1)))

;; Tuple2_proj_2_def
  (assert
  (forall ((a2 ty) (a3 ty))
  (forall ((u uni) (u1 uni))
  (=> (sort a2 u1) (= (Tuple2_proj_2 a3 a2 (Tuple2 a3 a2 u u1)) u1)))))

;; tuple2_inversion
  (assert
  (forall ((u (tuple21 (set a) (set b))))
  (= u (Tuple23 (tb2t1 (Tuple2_proj_1 (set1 a1) (set1 b1) (t2tb495 u)))
       (tb2t12 (Tuple2_proj_2 (set1 a1) (set1 b1) (t2tb495 u)))))))

;; tuple2_inversion
  (assert
  (forall ((u (tuple21 a b)))
  (= u (Tuple21 (tb2t2 (Tuple2_proj_1 a1 b1 (t2tb13 u)))
       (tb2t14 (Tuple2_proj_2 a1 b1 (t2tb13 u)))))))

;; tuple2_inversion
  (assert
  (forall ((u (tuple21 (tuple21 a b) a)))
  (= u (Tuple22 (tb2t13 (Tuple2_proj_1 (tuple2 a1 b1) a1 (t2tb30 u)))
       (tb2t2 (Tuple2_proj_2 (tuple2 a1 b1) a1 (t2tb30 u)))))))

;; tuple2_inversion
  (assert
  (forall ((a2 ty) (a3 ty))
  (forall ((u uni))
  (=> (sort (tuple2 a3 a2) u)
  (= u (Tuple2 a3 a2 (Tuple2_proj_1 a3 a2 u) (Tuple2_proj_2 a3 a2 u)))))))

(declare-fun times (ty ty uni uni) uni)

;; times_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (tuple2 a2 b2)) (times b2 a2 x x1)))))

(declare-fun times2 ((set a) (set b)) (set (tuple21 a b)))

(declare-fun times6 ((set (tuple21 a b)) (set a)) (set (tuple21 (tuple21 a b)
  a)))

;; mem_times
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set (set (tuple21 (tuple21 a b) a)))) (x uni)
  (y (set (tuple21 (tuple21 a b) a))))
  (= (mem (tuple2 a2 (set1 (tuple2 (tuple2 a1 b1) a1)))
  (Tuple2 a2 (set1 (tuple2 (tuple2 a1 b1) a1)) x (t2tb29 y))
  (times (set1 (tuple2 (tuple2 a1 b1) a1)) a2 s (t2tb52 t)))
  (and (mem a2 x s) (mem17 y t))))))

;; mem_times
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set (tuple21 (tuple21 a b) a))) (x uni)
  (y (tuple21 (tuple21 a b) a)))
  (= (mem (tuple2 a2 (tuple2 (tuple2 a1 b1) a1))
  (Tuple2 a2 (tuple2 (tuple2 a1 b1) a1) x (t2tb30 y))
  (times (tuple2 (tuple2 a1 b1) a1) a2 s (t2tb29 t)))
  (and (mem a2 x s) (mem16 y t))))))

;; mem_times
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set (tuple21 a b))) (x uni) (y (tuple21 a b)))
  (= (mem (tuple2 a2 (tuple2 a1 b1)) (Tuple2 a2 (tuple2 a1 b1) x (t2tb13 y))
  (times (tuple2 a1 b1) a2 s (t2tb11 t))) (and (mem a2 x s) (mem3 y t))))))

;; mem_times
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set b)) (x uni) (y b))
  (= (mem (tuple2 a2 b1) (Tuple2 a2 b1 x (t2tb14 y))
  (times b1 a2 s (t2tb12 t))) (and (mem a2 x s) (mem2 y t))))))

;; mem_times
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set a)) (x uni) (y a))
  (= (mem (tuple2 a2 a1) (Tuple2 a2 a1 x (t2tb2 y))
  (times a1 a2 s (t2tb1 t))) (and (mem a2 x s) (mem1 y t))))))

(declare-fun t2tb510 ((set (tuple21 (set (tuple21 (tuple21 a b) a))
  (set (tuple21 (tuple21 a b) a))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 (tuple21 a b) a))
  (set (tuple21 (tuple21 a b) a)))))) (sort
  (set1
  (tuple2 (set1 (tuple2 (tuple2 a1 b1) a1))
  (set1 (tuple2 (tuple2 a1 b1) a1)))) (t2tb510 x))))

(declare-fun tb2t510 (uni) (set (tuple21 (set (tuple21 (tuple21 a b) a))
  (set (tuple21 (tuple21 a b) a)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 (tuple21 a b) a))
  (set (tuple21 (tuple21 a b) a))))))
  (! (= (tb2t510 (t2tb510 i)) i) :pattern ((t2tb510 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (tuple2 (set1 (tuple2 (tuple2 a1 b1) a1))
     (set1 (tuple2 (tuple2 a1 b1) a1)))) j) (= (t2tb510 (tb2t510 j)) j)) :pattern (
  (t2tb510 (tb2t510 j))) )))

(declare-fun t2tb511 ((tuple21 (set (tuple21 (tuple21 a b) a))
  (set (tuple21 (tuple21 a b) a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 (tuple21 a b) a))
  (set (tuple21 (tuple21 a b) a))))) (sort
  (tuple2 (set1 (tuple2 (tuple2 a1 b1) a1))
  (set1 (tuple2 (tuple2 a1 b1) a1))) (t2tb511 x))))

(declare-fun tb2t511 (uni) (tuple21 (set (tuple21 (tuple21 a b) a))
  (set (tuple21 (tuple21 a b) a))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 (tuple21 a b) a))
  (set (tuple21 (tuple21 a b) a)))))
  (! (= (tb2t511 (t2tb511 i)) i) :pattern ((t2tb511 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (tuple2 (set1 (tuple2 (tuple2 a1 b1) a1))
     (set1 (tuple2 (tuple2 a1 b1) a1))) j) (= (t2tb511 (tb2t511 j)) j)) :pattern (
  (t2tb511 (tb2t511 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 (tuple21 a b) a))))
  (t (set (set (tuple21 (tuple21 a b) a)))) (x (set (tuple21 (tuple21 a b)
  a))) (y (set (tuple21 (tuple21 a b) a))))
  (= (mem
  (tuple2 (set1 (tuple2 (tuple2 a1 b1) a1))
  (set1 (tuple2 (tuple2 a1 b1) a1)))
  (Tuple2 (set1 (tuple2 (tuple2 a1 b1) a1)) (set1 (tuple2 (tuple2 a1 b1) a1))
  (t2tb29 x) (t2tb29 y))
  (times (set1 (tuple2 (tuple2 a1 b1) a1)) (set1 (tuple2 (tuple2 a1 b1) a1))
  (t2tb52 s) (t2tb52 t))) (and (mem17 x s) (mem17 y t)))))

(declare-fun t2tb512 ((set (tuple21 (set (tuple21 (tuple21 a b) a))
  (tuple21 (tuple21 a b) a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 (tuple21 a b) a))
  (tuple21 (tuple21 a b) a))))) (sort
  (set1
  (tuple2 (set1 (tuple2 (tuple2 a1 b1) a1)) (tuple2 (tuple2 a1 b1) a1)))
  (t2tb512 x))))

(declare-fun tb2t512 (uni) (set (tuple21 (set (tuple21 (tuple21 a b) a))
  (tuple21 (tuple21 a b) a))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 (tuple21 a b) a))
  (tuple21 (tuple21 a b) a)))))
  (! (= (tb2t512 (t2tb512 i)) i) :pattern ((t2tb512 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (tuple2 (set1 (tuple2 (tuple2 a1 b1) a1)) (tuple2 (tuple2 a1 b1) a1)))
     j) (= (t2tb512 (tb2t512 j)) j)) :pattern ((t2tb512 (tb2t512 j))) )))

(declare-fun t2tb513 ((tuple21 (set (tuple21 (tuple21 a b) a))
  (tuple21 (tuple21 a b) a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 (tuple21 a b) a)) (tuple21 (tuple21 a b)
  a)))) (sort
  (tuple2 (set1 (tuple2 (tuple2 a1 b1) a1)) (tuple2 (tuple2 a1 b1) a1))
  (t2tb513 x))))

(declare-fun tb2t513 (uni) (tuple21 (set (tuple21 (tuple21 a b) a))
  (tuple21 (tuple21 a b) a)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 (tuple21 a b) a)) (tuple21 (tuple21 a b)
  a)))) (! (= (tb2t513 (t2tb513 i)) i) :pattern ((t2tb513 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (tuple2 (set1 (tuple2 (tuple2 a1 b1) a1)) (tuple2 (tuple2 a1 b1) a1)) j)
     (= (t2tb513 (tb2t513 j)) j)) :pattern ((t2tb513 (tb2t513 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 (tuple21 a b) a))))
  (t (set (tuple21 (tuple21 a b) a))) (x (set (tuple21 (tuple21 a b) a)))
  (y (tuple21 (tuple21 a b) a)))
  (= (mem
  (tuple2 (set1 (tuple2 (tuple2 a1 b1) a1)) (tuple2 (tuple2 a1 b1) a1))
  (Tuple2 (set1 (tuple2 (tuple2 a1 b1) a1)) (tuple2 (tuple2 a1 b1) a1)
  (t2tb29 x) (t2tb30 y))
  (times (tuple2 (tuple2 a1 b1) a1) (set1 (tuple2 (tuple2 a1 b1) a1))
  (t2tb52 s) (t2tb29 t))) (and (mem17 x s) (mem16 y t)))))

(declare-fun t2tb514 ((set (tuple21 (set (tuple21 (tuple21 a b) a))
  (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 (tuple21 a b) a)) (tuple21 a b)))))
  (sort (set1 (tuple2 (set1 (tuple2 (tuple2 a1 b1) a1)) (tuple2 a1 b1)))
  (t2tb514 x))))

(declare-fun tb2t514 (uni) (set (tuple21 (set (tuple21 (tuple21 a b) a))
  (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 (tuple21 a b) a)) (tuple21 a b)))))
  (! (= (tb2t514 (t2tb514 i)) i) :pattern ((t2tb514 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (set1 (tuple2 (tuple2 a1 b1) a1)) (tuple2 a1 b1))) j)
     (= (t2tb514 (tb2t514 j)) j)) :pattern ((t2tb514 (tb2t514 j))) )))

(declare-fun t2tb515 ((tuple21 (set (tuple21 (tuple21 a b) a)) (tuple21 a
  b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 (tuple21 a b) a)) (tuple21 a b)))) (sort
  (tuple2 (set1 (tuple2 (tuple2 a1 b1) a1)) (tuple2 a1 b1)) (t2tb515 x))))

(declare-fun tb2t515 (uni) (tuple21 (set (tuple21 (tuple21 a b) a))
  (tuple21 a b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 (tuple21 a b) a)) (tuple21 a b))))
  (! (= (tb2t515 (t2tb515 i)) i) :pattern ((t2tb515 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 (tuple2 a1 b1) a1)) (tuple2 a1 b1)) j)
     (= (t2tb515 (tb2t515 j)) j)) :pattern ((t2tb515 (tb2t515 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 (tuple21 a b) a)))) (t (set (tuple21 a b)))
  (x (set (tuple21 (tuple21 a b) a))) (y (tuple21 a b)))
  (= (mem (tuple2 (set1 (tuple2 (tuple2 a1 b1) a1)) (tuple2 a1 b1))
  (Tuple2 (set1 (tuple2 (tuple2 a1 b1) a1)) (tuple2 a1 b1) (t2tb29 x)
  (t2tb13 y))
  (times (tuple2 a1 b1) (set1 (tuple2 (tuple2 a1 b1) a1)) (t2tb52 s)
  (t2tb11 t))) (and (mem17 x s) (mem3 y t)))))

(declare-fun t2tb516 ((set (tuple21 (set (tuple21 (tuple21 a b) a)) b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 (tuple21 a b) a)) b)))) (sort
  (set1 (tuple2 (set1 (tuple2 (tuple2 a1 b1) a1)) b1)) (t2tb516 x))))

(declare-fun tb2t516 (uni) (set (tuple21 (set (tuple21 (tuple21 a b) a)) b)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 (tuple21 a b) a)) b))))
  (! (= (tb2t516 (t2tb516 i)) i) :pattern ((t2tb516 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 (tuple2 a1 b1) a1)) b1)) j)
     (= (t2tb516 (tb2t516 j)) j)) :pattern ((t2tb516 (tb2t516 j))) )))

(declare-fun t2tb517 ((tuple21 (set (tuple21 (tuple21 a b) a)) b)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 (tuple21 a b) a)) b))) (sort
  (tuple2 (set1 (tuple2 (tuple2 a1 b1) a1)) b1) (t2tb517 x))))

(declare-fun tb2t517 (uni) (tuple21 (set (tuple21 (tuple21 a b) a)) b))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 (tuple21 a b) a)) b)))
  (! (= (tb2t517 (t2tb517 i)) i) :pattern ((t2tb517 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 (tuple2 a1 b1) a1)) b1) j)
     (= (t2tb517 (tb2t517 j)) j)) :pattern ((t2tb517 (tb2t517 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 (tuple21 a b) a)))) (t (set b))
  (x (set (tuple21 (tuple21 a b) a))) (y b))
  (= (mem (tuple2 (set1 (tuple2 (tuple2 a1 b1) a1)) b1)
  (Tuple2 (set1 (tuple2 (tuple2 a1 b1) a1)) b1 (t2tb29 x) (t2tb14 y))
  (times b1 (set1 (tuple2 (tuple2 a1 b1) a1)) (t2tb52 s) (t2tb12 t)))
  (and (mem17 x s) (mem2 y t)))))

(declare-fun t2tb518 ((set (tuple21 (set (tuple21 (tuple21 a b) a)) a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 (tuple21 a b) a)) a)))) (sort
  (set1 (tuple2 (set1 (tuple2 (tuple2 a1 b1) a1)) a1)) (t2tb518 x))))

(declare-fun tb2t518 (uni) (set (tuple21 (set (tuple21 (tuple21 a b) a)) a)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 (tuple21 a b) a)) a))))
  (! (= (tb2t518 (t2tb518 i)) i) :pattern ((t2tb518 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 (tuple2 a1 b1) a1)) a1)) j)
     (= (t2tb518 (tb2t518 j)) j)) :pattern ((t2tb518 (tb2t518 j))) )))

(declare-fun t2tb519 ((tuple21 (set (tuple21 (tuple21 a b) a)) a)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 (tuple21 a b) a)) a))) (sort
  (tuple2 (set1 (tuple2 (tuple2 a1 b1) a1)) a1) (t2tb519 x))))

(declare-fun tb2t519 (uni) (tuple21 (set (tuple21 (tuple21 a b) a)) a))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 (tuple21 a b) a)) a)))
  (! (= (tb2t519 (t2tb519 i)) i) :pattern ((t2tb519 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 (tuple2 a1 b1) a1)) a1) j)
     (= (t2tb519 (tb2t519 j)) j)) :pattern ((t2tb519 (tb2t519 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 (tuple21 a b) a)))) (t (set a))
  (x (set (tuple21 (tuple21 a b) a))) (y a))
  (= (mem (tuple2 (set1 (tuple2 (tuple2 a1 b1) a1)) a1)
  (Tuple2 (set1 (tuple2 (tuple2 a1 b1) a1)) a1 (t2tb29 x) (t2tb2 y))
  (times a1 (set1 (tuple2 (tuple2 a1 b1) a1)) (t2tb52 s) (t2tb1 t)))
  (and (mem17 x s) (mem1 y t)))))

;; mem_times
  (assert
  (forall ((b2 ty))
  (forall ((s (set (set (tuple21 (tuple21 a b) a)))) (t uni)
  (x (set (tuple21 (tuple21 a b) a))) (y uni))
  (= (mem (tuple2 (set1 (tuple2 (tuple2 a1 b1) a1)) b2)
  (Tuple2 (set1 (tuple2 (tuple2 a1 b1) a1)) b2 (t2tb29 x) y)
  (times b2 (set1 (tuple2 (tuple2 a1 b1) a1)) (t2tb52 s) t))
  (and (mem17 x s) (mem b2 y t))))))

(declare-fun t2tb520 ((set (tuple21 (tuple21 (tuple21 a b) a)
  (set (tuple21 (tuple21 a b) a))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 a b) a)
  (set (tuple21 (tuple21 a b) a)))))) (sort
  (set1
  (tuple2 (tuple2 (tuple2 a1 b1) a1) (set1 (tuple2 (tuple2 a1 b1) a1))))
  (t2tb520 x))))

(declare-fun tb2t520 (uni) (set (tuple21 (tuple21 (tuple21 a b) a)
  (set (tuple21 (tuple21 a b) a)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 a b) a)
  (set (tuple21 (tuple21 a b) a))))))
  (! (= (tb2t520 (t2tb520 i)) i) :pattern ((t2tb520 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (tuple2 (tuple2 (tuple2 a1 b1) a1) (set1 (tuple2 (tuple2 a1 b1) a1))))
     j) (= (t2tb520 (tb2t520 j)) j)) :pattern ((t2tb520 (tb2t520 j))) )))

(declare-fun t2tb521 ((tuple21 (tuple21 (tuple21 a b) a)
  (set (tuple21 (tuple21 a b) a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 a b) a) (set (tuple21 (tuple21 a b)
  a))))) (sort
  (tuple2 (tuple2 (tuple2 a1 b1) a1) (set1 (tuple2 (tuple2 a1 b1) a1)))
  (t2tb521 x))))

(declare-fun tb2t521 (uni) (tuple21 (tuple21 (tuple21 a b) a)
  (set (tuple21 (tuple21 a b) a))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 a b) a) (set (tuple21 (tuple21 a b)
  a))))) (! (= (tb2t521 (t2tb521 i)) i) :pattern ((t2tb521 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (tuple2 (tuple2 (tuple2 a1 b1) a1) (set1 (tuple2 (tuple2 a1 b1) a1))) j)
     (= (t2tb521 (tb2t521 j)) j)) :pattern ((t2tb521 (tb2t521 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 (tuple21 a b) a)))
  (t (set (set (tuple21 (tuple21 a b) a)))) (x (tuple21 (tuple21 a b) a))
  (y (set (tuple21 (tuple21 a b) a))))
  (= (mem
  (tuple2 (tuple2 (tuple2 a1 b1) a1) (set1 (tuple2 (tuple2 a1 b1) a1)))
  (Tuple2 (tuple2 (tuple2 a1 b1) a1) (set1 (tuple2 (tuple2 a1 b1) a1))
  (t2tb30 x) (t2tb29 y))
  (times (set1 (tuple2 (tuple2 a1 b1) a1)) (tuple2 (tuple2 a1 b1) a1)
  (t2tb29 s) (t2tb52 t))) (and (mem16 x s) (mem17 y t)))))

(declare-fun t2tb522 ((set (tuple21 (tuple21 (tuple21 a b) a)
  (tuple21 (tuple21 a b) a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 a b) a) (tuple21 (tuple21 a b)
  a))))) (sort
  (set1 (tuple2 (tuple2 (tuple2 a1 b1) a1) (tuple2 (tuple2 a1 b1) a1)))
  (t2tb522 x))))

(declare-fun tb2t522 (uni) (set (tuple21 (tuple21 (tuple21 a b) a)
  (tuple21 (tuple21 a b) a))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 a b) a) (tuple21 (tuple21 a b)
  a))))) (! (= (tb2t522 (t2tb522 i)) i) :pattern ((t2tb522 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 (tuple2 a1 b1) a1) (tuple2 (tuple2 a1 b1) a1))) j)
     (= (t2tb522 (tb2t522 j)) j)) :pattern ((t2tb522 (tb2t522 j))) )))

(declare-fun t2tb523 ((tuple21 (tuple21 (tuple21 a b) a) (tuple21 (tuple21 a
  b) a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 a b) a) (tuple21 (tuple21 a b) a))))
  (sort (tuple2 (tuple2 (tuple2 a1 b1) a1) (tuple2 (tuple2 a1 b1) a1))
  (t2tb523 x))))

(declare-fun tb2t523 (uni) (tuple21 (tuple21 (tuple21 a b) a)
  (tuple21 (tuple21 a b) a)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 a b) a) (tuple21 (tuple21 a b) a))))
  (! (= (tb2t523 (t2tb523 i)) i) :pattern ((t2tb523 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 (tuple2 a1 b1) a1) (tuple2 (tuple2 a1 b1) a1))
     j) (= (t2tb523 (tb2t523 j)) j)) :pattern ((t2tb523 (tb2t523 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 (tuple21 a b) a))) (t (set (tuple21 (tuple21 a b)
  a))) (x (tuple21 (tuple21 a b) a)) (y (tuple21 (tuple21 a b) a)))
  (= (mem (tuple2 (tuple2 (tuple2 a1 b1) a1) (tuple2 (tuple2 a1 b1) a1))
  (Tuple2 (tuple2 (tuple2 a1 b1) a1) (tuple2 (tuple2 a1 b1) a1) (t2tb30 x)
  (t2tb30 y))
  (times (tuple2 (tuple2 a1 b1) a1) (tuple2 (tuple2 a1 b1) a1) (t2tb29 s)
  (t2tb29 t))) (and (mem16 x s) (mem16 y t)))))

(declare-fun t2tb524 ((set (tuple21 (tuple21 (tuple21 a b) a) (tuple21 a
  b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 a b) a) (tuple21 a b))))) (sort
  (set1 (tuple2 (tuple2 (tuple2 a1 b1) a1) (tuple2 a1 b1))) (t2tb524 x))))

(declare-fun tb2t524 (uni) (set (tuple21 (tuple21 (tuple21 a b) a) (tuple21 a
  b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 a b) a) (tuple21 a b)))))
  (! (= (tb2t524 (t2tb524 i)) i) :pattern ((t2tb524 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 (tuple2 a1 b1) a1) (tuple2 a1 b1))) j)
     (= (t2tb524 (tb2t524 j)) j)) :pattern ((t2tb524 (tb2t524 j))) )))

(declare-fun t2tb525 ((tuple21 (tuple21 (tuple21 a b) a) (tuple21 a b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 a b) a) (tuple21 a b)))) (sort
  (tuple2 (tuple2 (tuple2 a1 b1) a1) (tuple2 a1 b1)) (t2tb525 x))))

(declare-fun tb2t525 (uni) (tuple21 (tuple21 (tuple21 a b) a) (tuple21 a b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 a b) a) (tuple21 a b))))
  (! (= (tb2t525 (t2tb525 i)) i) :pattern ((t2tb525 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 (tuple2 a1 b1) a1) (tuple2 a1 b1)) j)
     (= (t2tb525 (tb2t525 j)) j)) :pattern ((t2tb525 (tb2t525 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 (tuple21 a b) a))) (t (set (tuple21 a b)))
  (x (tuple21 (tuple21 a b) a)) (y (tuple21 a b)))
  (= (mem (tuple2 (tuple2 (tuple2 a1 b1) a1) (tuple2 a1 b1))
  (Tuple2 (tuple2 (tuple2 a1 b1) a1) (tuple2 a1 b1) (t2tb30 x) (t2tb13 y))
  (times (tuple2 a1 b1) (tuple2 (tuple2 a1 b1) a1) (t2tb29 s) (t2tb11 t)))
  (and (mem16 x s) (mem3 y t)))))

(declare-fun t2tb526 ((set (tuple21 (tuple21 (tuple21 a b) a) b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 a b) a) b)))) (sort
  (set1 (tuple2 (tuple2 (tuple2 a1 b1) a1) b1)) (t2tb526 x))))

(declare-fun tb2t526 (uni) (set (tuple21 (tuple21 (tuple21 a b) a) b)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 a b) a) b))))
  (! (= (tb2t526 (t2tb526 i)) i) :pattern ((t2tb526 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 (tuple2 a1 b1) a1) b1)) j)
     (= (t2tb526 (tb2t526 j)) j)) :pattern ((t2tb526 (tb2t526 j))) )))

(declare-fun t2tb527 ((tuple21 (tuple21 (tuple21 a b) a) b)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 a b) a) b))) (sort
  (tuple2 (tuple2 (tuple2 a1 b1) a1) b1) (t2tb527 x))))

(declare-fun tb2t527 (uni) (tuple21 (tuple21 (tuple21 a b) a) b))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 a b) a) b)))
  (! (= (tb2t527 (t2tb527 i)) i) :pattern ((t2tb527 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 (tuple2 a1 b1) a1) b1) j)
     (= (t2tb527 (tb2t527 j)) j)) :pattern ((t2tb527 (tb2t527 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 (tuple21 a b) a))) (t (set b))
  (x (tuple21 (tuple21 a b) a)) (y b))
  (= (mem (tuple2 (tuple2 (tuple2 a1 b1) a1) b1)
  (Tuple2 (tuple2 (tuple2 a1 b1) a1) b1 (t2tb30 x) (t2tb14 y))
  (times b1 (tuple2 (tuple2 a1 b1) a1) (t2tb29 s) (t2tb12 t)))
  (and (mem16 x s) (mem2 y t)))))

(declare-fun t2tb528 ((set (tuple21 (tuple21 (tuple21 a b) a) a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 a b) a) a)))) (sort
  (set1 (tuple2 (tuple2 (tuple2 a1 b1) a1) a1)) (t2tb528 x))))

(declare-fun tb2t528 (uni) (set (tuple21 (tuple21 (tuple21 a b) a) a)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 a b) a) a))))
  (! (= (tb2t528 (t2tb528 i)) i) :pattern ((t2tb528 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 (tuple2 a1 b1) a1) a1)) j)
     (= (t2tb528 (tb2t528 j)) j)) :pattern ((t2tb528 (tb2t528 j))) )))

(declare-fun t2tb529 ((tuple21 (tuple21 (tuple21 a b) a) a)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 a b) a) a))) (sort
  (tuple2 (tuple2 (tuple2 a1 b1) a1) a1) (t2tb529 x))))

(declare-fun tb2t529 (uni) (tuple21 (tuple21 (tuple21 a b) a) a))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 a b) a) a)))
  (! (= (tb2t529 (t2tb529 i)) i) :pattern ((t2tb529 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 (tuple2 a1 b1) a1) a1) j)
     (= (t2tb529 (tb2t529 j)) j)) :pattern ((t2tb529 (tb2t529 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 (tuple21 a b) a))) (t (set a))
  (x (tuple21 (tuple21 a b) a)) (y a))
  (= (mem (tuple2 (tuple2 (tuple2 a1 b1) a1) a1)
  (Tuple2 (tuple2 (tuple2 a1 b1) a1) a1 (t2tb30 x) (t2tb2 y))
  (times a1 (tuple2 (tuple2 a1 b1) a1) (t2tb29 s) (t2tb1 t)))
  (and (mem16 x s) (mem1 y t)))))

;; mem_times
  (assert
  (forall ((b2 ty))
  (forall ((s (set (tuple21 (tuple21 a b) a))) (t uni) (x (tuple21 (tuple21 a
  b) a)) (y uni))
  (= (mem (tuple2 (tuple2 (tuple2 a1 b1) a1) b2)
  (Tuple2 (tuple2 (tuple2 a1 b1) a1) b2 (t2tb30 x) y)
  (times b2 (tuple2 (tuple2 a1 b1) a1) (t2tb29 s) t))
  (and (mem16 x s) (mem b2 y t))))))

(declare-fun t2tb530 ((set (tuple21 (tuple21 a b) (set (tuple21 (tuple21 a b)
  a))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) (set (tuple21 (tuple21 a b) a))))))
  (sort (set1 (tuple2 (tuple2 a1 b1) (set1 (tuple2 (tuple2 a1 b1) a1))))
  (t2tb530 x))))

(declare-fun tb2t530 (uni) (set (tuple21 (tuple21 a b)
  (set (tuple21 (tuple21 a b) a)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a b) (set (tuple21 (tuple21 a b) a))))))
  (! (= (tb2t530 (t2tb530 i)) i) :pattern ((t2tb530 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 a1 b1) (set1 (tuple2 (tuple2 a1 b1) a1)))) j)
     (= (t2tb530 (tb2t530 j)) j)) :pattern ((t2tb530 (tb2t530 j))) )))

(declare-fun t2tb531 ((tuple21 (tuple21 a b) (set (tuple21 (tuple21 a b)
  a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a b) (set (tuple21 (tuple21 a b) a))))) (sort
  (tuple2 (tuple2 a1 b1) (set1 (tuple2 (tuple2 a1 b1) a1))) (t2tb531 x))))

(declare-fun tb2t531 (uni) (tuple21 (tuple21 a b) (set (tuple21 (tuple21 a b)
  a))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a b) (set (tuple21 (tuple21 a b) a)))))
  (! (= (tb2t531 (t2tb531 i)) i) :pattern ((t2tb531 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 b1) (set1 (tuple2 (tuple2 a1 b1) a1))) j)
     (= (t2tb531 (tb2t531 j)) j)) :pattern ((t2tb531 (tb2t531 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (set (tuple21 (tuple21 a b) a))))
  (x (tuple21 a b)) (y (set (tuple21 (tuple21 a b) a))))
  (= (mem (tuple2 (tuple2 a1 b1) (set1 (tuple2 (tuple2 a1 b1) a1)))
  (Tuple2 (tuple2 a1 b1) (set1 (tuple2 (tuple2 a1 b1) a1)) (t2tb13 x)
  (t2tb29 y))
  (times (set1 (tuple2 (tuple2 a1 b1) a1)) (tuple2 a1 b1) (t2tb11 s)
  (t2tb52 t))) (and (mem3 x s) (mem17 y t)))))

(declare-fun t2tb532 ((set (tuple21 (tuple21 a b) (tuple21 (tuple21 a b)
  a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) (tuple21 (tuple21 a b) a))))) (sort
  (set1 (tuple2 (tuple2 a1 b1) (tuple2 (tuple2 a1 b1) a1))) (t2tb532 x))))

(declare-fun tb2t532 (uni) (set (tuple21 (tuple21 a b) (tuple21 (tuple21 a b)
  a))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a b) (tuple21 (tuple21 a b) a)))))
  (! (= (tb2t532 (t2tb532 i)) i) :pattern ((t2tb532 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 b1) (tuple2 (tuple2 a1 b1) a1))) j)
     (= (t2tb532 (tb2t532 j)) j)) :pattern ((t2tb532 (tb2t532 j))) )))

(declare-fun t2tb533 ((tuple21 (tuple21 a b) (tuple21 (tuple21 a b) a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a b) (tuple21 (tuple21 a b) a)))) (sort
  (tuple2 (tuple2 a1 b1) (tuple2 (tuple2 a1 b1) a1)) (t2tb533 x))))

(declare-fun tb2t533 (uni) (tuple21 (tuple21 a b) (tuple21 (tuple21 a b) a)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a b) (tuple21 (tuple21 a b) a))))
  (! (= (tb2t533 (t2tb533 i)) i) :pattern ((t2tb533 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 b1) (tuple2 (tuple2 a1 b1) a1)) j)
     (= (t2tb533 (tb2t533 j)) j)) :pattern ((t2tb533 (tb2t533 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (tuple21 (tuple21 a b) a)))
  (x (tuple21 a b)) (y (tuple21 (tuple21 a b) a)))
  (= (mem (tuple2 (tuple2 a1 b1) (tuple2 (tuple2 a1 b1) a1))
  (Tuple2 (tuple2 a1 b1) (tuple2 (tuple2 a1 b1) a1) (t2tb13 x) (t2tb30 y))
  (times (tuple2 (tuple2 a1 b1) a1) (tuple2 a1 b1) (t2tb11 s) (t2tb29 t)))
  (and (mem3 x s) (mem16 y t)))))

(declare-fun t2tb25 ((set (tuple21 (tuple21 a b) (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) (tuple21 a b))))) (sort
  (set1 (tuple2 (tuple2 a1 b1) (tuple2 a1 b1))) (t2tb25 x))))

(declare-fun tb2t25 (uni) (set (tuple21 (tuple21 a b) (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a b) (tuple21 a b)))))
  (! (= (tb2t25 (t2tb25 i)) i) :pattern ((t2tb25 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 b1) (tuple2 a1 b1))) j)
     (= (t2tb25 (tb2t25 j)) j)) :pattern ((t2tb25 (tb2t25 j))) )))

(declare-fun t2tb26 ((tuple21 (tuple21 a b) (tuple21 a b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a b) (tuple21 a b)))) (sort
  (tuple2 (tuple2 a1 b1) (tuple2 a1 b1)) (t2tb26 x))))

(declare-fun tb2t26 (uni) (tuple21 (tuple21 a b) (tuple21 a b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a b) (tuple21 a b))))
  (! (= (tb2t26 (t2tb26 i)) i) :pattern ((t2tb26 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 b1) (tuple2 a1 b1)) j)
     (= (t2tb26 (tb2t26 j)) j)) :pattern ((t2tb26 (tb2t26 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (tuple21 a b))) (x (tuple21 a b))
  (y (tuple21 a b)))
  (= (mem (tuple2 (tuple2 a1 b1) (tuple2 a1 b1))
  (Tuple2 (tuple2 a1 b1) (tuple2 a1 b1) (t2tb13 x) (t2tb13 y))
  (times (tuple2 a1 b1) (tuple2 a1 b1) (t2tb11 s) (t2tb11 t)))
  (and (mem3 x s) (mem3 y t)))))

(declare-fun t2tb27 ((set (tuple21 (tuple21 a b) b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) b)))) (sort
  (set1 (tuple2 (tuple2 a1 b1) b1)) (t2tb27 x))))

(declare-fun tb2t27 (uni) (set (tuple21 (tuple21 a b) b)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a b) b))))
  (! (= (tb2t27 (t2tb27 i)) i) :pattern ((t2tb27 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 b1) b1)) j)
     (= (t2tb27 (tb2t27 j)) j)) :pattern ((t2tb27 (tb2t27 j))) )))

(declare-fun t2tb28 ((tuple21 (tuple21 a b) b)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a b) b))) (sort (tuple2 (tuple2 a1 b1) b1)
  (t2tb28 x))))

(declare-fun tb2t28 (uni) (tuple21 (tuple21 a b) b))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a b) b)))
  (! (= (tb2t28 (t2tb28 i)) i) :pattern ((t2tb28 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 b1) b1) j) (= (t2tb28 (tb2t28 j)) j)) :pattern (
  (t2tb28 (tb2t28 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a b))) (t (set b)) (x (tuple21 a b)) (y b))
  (= (mem (tuple2 (tuple2 a1 b1) b1)
  (Tuple2 (tuple2 a1 b1) b1 (t2tb13 x) (t2tb14 y))
  (times b1 (tuple2 a1 b1) (t2tb11 s) (t2tb12 t)))
  (and (mem3 x s) (mem2 y t)))))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a b))) (t (set a)) (x (tuple21 a b)) (y a))
  (= (mem16 (Tuple22 x y) (times6 s t)) (and (mem3 x s) (mem1 y t)))))

;; mem_times
  (assert
  (forall ((b2 ty))
  (forall ((s (set (tuple21 a b))) (t uni) (x (tuple21 a b)) (y uni))
  (= (mem (tuple2 (tuple2 a1 b1) b2) (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) y)
  (times b2 (tuple2 a1 b1) (t2tb11 s) t)) (and (mem3 x s) (mem b2 y t))))))

(declare-fun t2tb534 ((set (tuple21 b (set (tuple21 (tuple21 a b) a))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 b (set (tuple21 (tuple21 a b) a)))))) (sort
  (set1 (tuple2 b1 (set1 (tuple2 (tuple2 a1 b1) a1)))) (t2tb534 x))))

(declare-fun tb2t534 (uni) (set (tuple21 b (set (tuple21 (tuple21 a b) a)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 b (set (tuple21 (tuple21 a b) a))))))
  (! (= (tb2t534 (t2tb534 i)) i) :pattern ((t2tb534 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 b1 (set1 (tuple2 (tuple2 a1 b1) a1)))) j)
     (= (t2tb534 (tb2t534 j)) j)) :pattern ((t2tb534 (tb2t534 j))) )))

(declare-fun t2tb535 ((tuple21 b (set (tuple21 (tuple21 a b) a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 b (set (tuple21 (tuple21 a b) a))))) (sort
  (tuple2 b1 (set1 (tuple2 (tuple2 a1 b1) a1))) (t2tb535 x))))

(declare-fun tb2t535 (uni) (tuple21 b (set (tuple21 (tuple21 a b) a))))

;; BridgeL
  (assert
  (forall ((i (tuple21 b (set (tuple21 (tuple21 a b) a)))))
  (! (= (tb2t535 (t2tb535 i)) i) :pattern ((t2tb535 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 b1 (set1 (tuple2 (tuple2 a1 b1) a1))) j)
     (= (t2tb535 (tb2t535 j)) j)) :pattern ((t2tb535 (tb2t535 j))) )))

;; mem_times
  (assert
  (forall ((s (set b)) (t (set (set (tuple21 (tuple21 a b) a)))) (x b)
  (y (set (tuple21 (tuple21 a b) a))))
  (= (mem (tuple2 b1 (set1 (tuple2 (tuple2 a1 b1) a1)))
  (Tuple2 b1 (set1 (tuple2 (tuple2 a1 b1) a1)) (t2tb14 x) (t2tb29 y))
  (times (set1 (tuple2 (tuple2 a1 b1) a1)) b1 (t2tb12 s) (t2tb52 t)))
  (and (mem2 x s) (mem17 y t)))))

(declare-fun t2tb536 ((set (tuple21 b (tuple21 (tuple21 a b) a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 b (tuple21 (tuple21 a b) a))))) (sort
  (set1 (tuple2 b1 (tuple2 (tuple2 a1 b1) a1))) (t2tb536 x))))

(declare-fun tb2t536 (uni) (set (tuple21 b (tuple21 (tuple21 a b) a))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 b (tuple21 (tuple21 a b) a)))))
  (! (= (tb2t536 (t2tb536 i)) i) :pattern ((t2tb536 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 b1 (tuple2 (tuple2 a1 b1) a1))) j)
     (= (t2tb536 (tb2t536 j)) j)) :pattern ((t2tb536 (tb2t536 j))) )))

(declare-fun t2tb537 ((tuple21 b (tuple21 (tuple21 a b) a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 b (tuple21 (tuple21 a b) a)))) (sort
  (tuple2 b1 (tuple2 (tuple2 a1 b1) a1)) (t2tb537 x))))

(declare-fun tb2t537 (uni) (tuple21 b (tuple21 (tuple21 a b) a)))

;; BridgeL
  (assert
  (forall ((i (tuple21 b (tuple21 (tuple21 a b) a))))
  (! (= (tb2t537 (t2tb537 i)) i) :pattern ((t2tb537 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 b1 (tuple2 (tuple2 a1 b1) a1)) j)
     (= (t2tb537 (tb2t537 j)) j)) :pattern ((t2tb537 (tb2t537 j))) )))

;; mem_times
  (assert
  (forall ((s (set b)) (t (set (tuple21 (tuple21 a b) a))) (x b)
  (y (tuple21 (tuple21 a b) a)))
  (= (mem (tuple2 b1 (tuple2 (tuple2 a1 b1) a1))
  (Tuple2 b1 (tuple2 (tuple2 a1 b1) a1) (t2tb14 x) (t2tb30 y))
  (times (tuple2 (tuple2 a1 b1) a1) b1 (t2tb12 s) (t2tb29 t)))
  (and (mem2 x s) (mem16 y t)))))

(declare-fun t2tb33 ((tuple21 b (tuple21 a b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 b (tuple21 a b)))) (sort (tuple2 b1 (tuple2 a1 b1))
  (t2tb33 x))))

(declare-fun tb2t33 (uni) (tuple21 b (tuple21 a b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 b (tuple21 a b))))
  (! (= (tb2t33 (t2tb33 i)) i) :pattern ((t2tb33 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 b1 (tuple2 a1 b1)) j) (= (t2tb33 (tb2t33 j)) j)) :pattern (
  (t2tb33 (tb2t33 j))) )))

(declare-fun t2tb34 ((set (tuple21 b (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 b (tuple21 a b))))) (sort
  (set1 (tuple2 b1 (tuple2 a1 b1))) (t2tb34 x))))

(declare-fun tb2t34 (uni) (set (tuple21 b (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 b (tuple21 a b)))))
  (! (= (tb2t34 (t2tb34 i)) i) :pattern ((t2tb34 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 b1 (tuple2 a1 b1))) j)
     (= (t2tb34 (tb2t34 j)) j)) :pattern ((t2tb34 (tb2t34 j))) )))

;; mem_times
  (assert
  (forall ((s (set b)) (t (set (tuple21 a b))) (x b) (y (tuple21 a b)))
  (= (mem (tuple2 b1 (tuple2 a1 b1))
  (Tuple2 b1 (tuple2 a1 b1) (t2tb14 x) (t2tb13 y))
  (times (tuple2 a1 b1) b1 (t2tb12 s) (t2tb11 t)))
  (and (mem2 x s) (mem3 y t)))))

(declare-fun t2tb35 ((set (tuple21 b b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 b b)))) (sort (set1 (tuple2 b1 b1)) (t2tb35 x))))

(declare-fun tb2t35 (uni) (set (tuple21 b b)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 b b))))
  (! (= (tb2t35 (t2tb35 i)) i) :pattern ((t2tb35 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 b1 b1)) j) (= (t2tb35 (tb2t35 j)) j)) :pattern (
  (t2tb35 (tb2t35 j))) )))

(declare-fun t2tb36 ((tuple21 b b)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 b b))) (sort (tuple2 b1 b1) (t2tb36 x))))

(declare-fun tb2t36 (uni) (tuple21 b b))

;; BridgeL
  (assert
  (forall ((i (tuple21 b b)))
  (! (= (tb2t36 (t2tb36 i)) i) :pattern ((t2tb36 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 b1 b1) j) (= (t2tb36 (tb2t36 j)) j)) :pattern (
  (t2tb36 (tb2t36 j))) )))

;; mem_times
  (assert
  (forall ((s (set b)) (t (set b)) (x b) (y b))
  (= (mem (tuple2 b1 b1) (Tuple2 b1 b1 (t2tb14 x) (t2tb14 y))
  (times b1 b1 (t2tb12 s) (t2tb12 t))) (and (mem2 x s) (mem2 y t)))))

(declare-fun t2tb37 ((set (tuple21 b a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 b a)))) (sort (set1 (tuple2 b1 a1)) (t2tb37 x))))

(declare-fun tb2t37 (uni) (set (tuple21 b a)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 b a))))
  (! (= (tb2t37 (t2tb37 i)) i) :pattern ((t2tb37 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 b1 a1)) j) (= (t2tb37 (tb2t37 j)) j)) :pattern (
  (t2tb37 (tb2t37 j))) )))

(declare-fun t2tb38 ((tuple21 b a)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 b a))) (sort (tuple2 b1 a1) (t2tb38 x))))

(declare-fun tb2t38 (uni) (tuple21 b a))

;; BridgeL
  (assert
  (forall ((i (tuple21 b a)))
  (! (= (tb2t38 (t2tb38 i)) i) :pattern ((t2tb38 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 b1 a1) j) (= (t2tb38 (tb2t38 j)) j)) :pattern (
  (t2tb38 (tb2t38 j))) )))

;; mem_times
  (assert
  (forall ((s (set b)) (t (set a)) (x b) (y a))
  (= (mem (tuple2 b1 a1) (Tuple2 b1 a1 (t2tb14 x) (t2tb2 y))
  (times a1 b1 (t2tb12 s) (t2tb1 t))) (and (mem2 x s) (mem1 y t)))))

;; mem_times
  (assert
  (forall ((b2 ty))
  (forall ((s (set b)) (t uni) (x b) (y uni))
  (= (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) y)
  (times b2 b1 (t2tb12 s) t)) (and (mem2 x s) (mem b2 y t))))))

(declare-fun t2tb44 ((set (set b))) uni)

;; t2tb_sort
  (assert (forall ((x (set (set b)))) (sort (set1 (set1 b1)) (t2tb44 x))))

(declare-fun tb2t44 (uni) (set (set b)))

;; BridgeL
  (assert
  (forall ((i (set (set b))))
  (! (= (tb2t44 (t2tb44 i)) i) :pattern ((t2tb44 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 b1)) j) (= (t2tb44 (tb2t44 j)) j)) :pattern (
  (t2tb44 (tb2t44 j))) )))

(declare-fun t2tb ((set (set a))) uni)

;; t2tb_sort
  (assert (forall ((x (set (set a)))) (sort (set1 (set1 a1)) (t2tb x))))

(declare-fun tb2t (uni) (set (set a)))

;; BridgeL
  (assert
  (forall ((i (set (set a)))) (! (= (tb2t (t2tb i)) i) :pattern ((t2tb i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 a1)) j) (= (t2tb (tb2t j)) j)) :pattern ((t2tb
                                                                    (tb2t j))) )))

(declare-fun t2tb538 ((set (tuple21 (set a) (set b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set a) (set b))))) (sort
  (set1 (tuple2 (set1 a1) (set1 b1))) (t2tb538 x))))

(declare-fun tb2t538 (uni) (set (tuple21 (set a) (set b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set a) (set b)))))
  (! (= (tb2t538 (t2tb538 i)) i) :pattern ((t2tb538 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 a1) (set1 b1))) j)
     (= (t2tb538 (tb2t538 j)) j)) :pattern ((t2tb538 (tb2t538 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set a))) (t (set (set b))) (x (set a)) (y (set b)))
  (= (mem (tuple2 (set1 a1) (set1 b1)) (t2tb495 (Tuple23 x y))
  (times (set1 b1) (set1 a1) (t2tb s) (t2tb44 t)))
  (and (mem (set1 a1) (t2tb1 x) (t2tb s)) (mem (set1 b1) (t2tb12 y)
  (t2tb44 t))))))

(declare-fun t2tb539 ((tuple21 a (set (tuple21 (tuple21 a b) a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (set (tuple21 (tuple21 a b) a))))) (sort
  (tuple2 a1 (set1 (tuple2 (tuple2 a1 b1) a1))) (t2tb539 x))))

(declare-fun tb2t539 (uni) (tuple21 a (set (tuple21 (tuple21 a b) a))))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (set (tuple21 (tuple21 a b) a)))))
  (! (= (tb2t539 (t2tb539 i)) i) :pattern ((t2tb539 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (set1 (tuple2 (tuple2 a1 b1) a1))) j)
     (= (t2tb539 (tb2t539 j)) j)) :pattern ((t2tb539 (tb2t539 j))) )))

(declare-fun t2tb540 ((set (tuple21 a (set (tuple21 (tuple21 a b) a))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (set (tuple21 (tuple21 a b) a)))))) (sort
  (set1 (tuple2 a1 (set1 (tuple2 (tuple2 a1 b1) a1)))) (t2tb540 x))))

(declare-fun tb2t540 (uni) (set (tuple21 a (set (tuple21 (tuple21 a b) a)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (set (tuple21 (tuple21 a b) a))))))
  (! (= (tb2t540 (t2tb540 i)) i) :pattern ((t2tb540 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (set1 (tuple2 (tuple2 a1 b1) a1)))) j)
     (= (t2tb540 (tb2t540 j)) j)) :pattern ((t2tb540 (tb2t540 j))) )))

;; mem_times
  (assert
  (forall ((s (set a)) (t (set (set (tuple21 (tuple21 a b) a)))) (x a)
  (y (set (tuple21 (tuple21 a b) a))))
  (= (mem (tuple2 a1 (set1 (tuple2 (tuple2 a1 b1) a1)))
  (Tuple2 a1 (set1 (tuple2 (tuple2 a1 b1) a1)) (t2tb2 x) (t2tb29 y))
  (times (set1 (tuple2 (tuple2 a1 b1) a1)) a1 (t2tb1 s) (t2tb52 t)))
  (and (mem1 x s) (mem17 y t)))))

(declare-fun t2tb541 ((set (tuple21 a (tuple21 (tuple21 a b) a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (tuple21 (tuple21 a b) a))))) (sort
  (set1 (tuple2 a1 (tuple2 (tuple2 a1 b1) a1))) (t2tb541 x))))

(declare-fun tb2t541 (uni) (set (tuple21 a (tuple21 (tuple21 a b) a))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (tuple21 (tuple21 a b) a)))))
  (! (= (tb2t541 (t2tb541 i)) i) :pattern ((t2tb541 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (tuple2 (tuple2 a1 b1) a1))) j)
     (= (t2tb541 (tb2t541 j)) j)) :pattern ((t2tb541 (tb2t541 j))) )))

(declare-fun t2tb542 ((tuple21 a (tuple21 (tuple21 a b) a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (tuple21 (tuple21 a b) a)))) (sort
  (tuple2 a1 (tuple2 (tuple2 a1 b1) a1)) (t2tb542 x))))

(declare-fun tb2t542 (uni) (tuple21 a (tuple21 (tuple21 a b) a)))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (tuple21 (tuple21 a b) a))))
  (! (= (tb2t542 (t2tb542 i)) i) :pattern ((t2tb542 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (tuple2 (tuple2 a1 b1) a1)) j)
     (= (t2tb542 (tb2t542 j)) j)) :pattern ((t2tb542 (tb2t542 j))) )))

;; mem_times
  (assert
  (forall ((s (set a)) (t (set (tuple21 (tuple21 a b) a))) (x a)
  (y (tuple21 (tuple21 a b) a)))
  (= (mem (tuple2 a1 (tuple2 (tuple2 a1 b1) a1))
  (Tuple2 a1 (tuple2 (tuple2 a1 b1) a1) (t2tb2 x) (t2tb30 y))
  (times (tuple2 (tuple2 a1 b1) a1) a1 (t2tb1 s) (t2tb29 t)))
  (and (mem1 x s) (mem16 y t)))))

(declare-fun t2tb41 ((set (tuple21 a (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (tuple21 a b))))) (sort
  (set1 (tuple2 a1 (tuple2 a1 b1))) (t2tb41 x))))

(declare-fun tb2t41 (uni) (set (tuple21 a (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (tuple21 a b)))))
  (! (= (tb2t41 (t2tb41 i)) i) :pattern ((t2tb41 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (tuple2 a1 b1))) j)
     (= (t2tb41 (tb2t41 j)) j)) :pattern ((t2tb41 (tb2t41 j))) )))

(declare-fun t2tb42 ((tuple21 a (tuple21 a b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (tuple21 a b)))) (sort (tuple2 a1 (tuple2 a1 b1))
  (t2tb42 x))))

(declare-fun tb2t42 (uni) (tuple21 a (tuple21 a b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (tuple21 a b))))
  (! (= (tb2t42 (t2tb42 i)) i) :pattern ((t2tb42 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (tuple2 a1 b1)) j) (= (t2tb42 (tb2t42 j)) j)) :pattern (
  (t2tb42 (tb2t42 j))) )))

;; mem_times
  (assert
  (forall ((s (set a)) (t (set (tuple21 a b))) (x a) (y (tuple21 a b)))
  (= (mem (tuple2 a1 (tuple2 a1 b1))
  (Tuple2 a1 (tuple2 a1 b1) (t2tb2 x) (t2tb13 y))
  (times (tuple2 a1 b1) a1 (t2tb1 s) (t2tb11 t)))
  (and (mem1 x s) (mem3 y t)))))

;; mem_times
  (assert
  (forall ((s (set a)) (t (set b)) (x a) (y b))
  (= (mem3 (Tuple21 x y) (times2 s t)) (and (mem1 x s) (mem2 y t)))))

(declare-fun t2tb4 ((set (tuple21 a a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a a)))) (sort (set1 (tuple2 a1 a1)) (t2tb4 x))))

(declare-fun tb2t4 (uni) (set (tuple21 a a)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a a))))
  (! (= (tb2t4 (t2tb4 i)) i) :pattern ((t2tb4 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 a1)) j) (= (t2tb4 (tb2t4 j)) j)) :pattern (
  (t2tb4 (tb2t4 j))) )))

(declare-fun t2tb5 ((tuple21 a a)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 a a))) (sort (tuple2 a1 a1) (t2tb5 x))))

(declare-fun tb2t5 (uni) (tuple21 a a))

;; BridgeL
  (assert
  (forall ((i (tuple21 a a)))
  (! (= (tb2t5 (t2tb5 i)) i) :pattern ((t2tb5 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 a1) j) (= (t2tb5 (tb2t5 j)) j)) :pattern ((t2tb5
                                                                    (tb2t5 j))) )))

;; mem_times
  (assert
  (forall ((s (set a)) (t (set a)) (x a) (y a))
  (= (mem (tuple2 a1 a1) (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y))
  (times a1 a1 (t2tb1 s) (t2tb1 t))) (and (mem1 x s) (mem1 y t)))))

;; mem_times
  (assert
  (forall ((b2 ty))
  (forall ((s (set a)) (t uni) (x a) (y uni))
  (= (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) y)
  (times b2 a1 (t2tb1 s) t)) (and (mem1 x s) (mem b2 y t))))))

;; mem_times
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (x uni) (y uni))
  (= (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) (times b2 a2 s t))
  (and (mem a2 x s) (mem b2 y t))))))

(declare-fun t2tb543 ((set (set (set (tuple21 (tuple21 a b) a))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (set (tuple21 (tuple21 a b) a)))))) (sort
  (set1 (set1 (set1 (tuple2 (tuple2 a1 b1) a1)))) (t2tb543 x))))

(declare-fun tb2t543 (uni) (set (set (set (tuple21 (tuple21 a b) a)))))

;; BridgeL
  (assert
  (forall ((i (set (set (set (tuple21 (tuple21 a b) a))))))
  (! (= (tb2t543 (t2tb543 i)) i) :pattern ((t2tb543 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (set1 (tuple2 (tuple2 a1 b1) a1)))) j)
     (= (t2tb543 (tb2t543 j)) j)) :pattern ((t2tb543 (tb2t543 j))) )))

;; mem_power
  (assert
  (forall ((s (set (set (tuple21 (tuple21 a b) a))))
  (t (set (set (tuple21 (tuple21 a b) a)))))
  (= (mem (set1 (set1 (tuple2 (tuple2 a1 b1) a1))) (t2tb52 s)
  (power (set1 (tuple2 (tuple2 a1 b1) a1)) (t2tb52 t)))
  (forall ((x (set (tuple21 (tuple21 a b) a)))) (=> (mem17 x s) (mem17 x t))))))

;; mem_power
  (assert
  (forall ((s (set (tuple21 (tuple21 a b) a))) (t (set (tuple21 (tuple21 a b)
  a))))
  (= (mem17 s (tb2t52 (power (tuple2 (tuple2 a1 b1) a1) (t2tb29 t))))
  (forall ((x (tuple21 (tuple21 a b) a))) (=> (mem16 x s) (mem16 x t))))))

(declare-fun t2tb10 ((set (set (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 a b))))) (sort (set1 (set1 (tuple2 a1 b1)))
  (t2tb10 x))))

(declare-fun tb2t10 (uni) (set (set (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 a b)))))
  (! (= (tb2t10 (t2tb10 i)) i) :pattern ((t2tb10 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 a1 b1))) j) (= (t2tb10 (tb2t10 j)) j)) :pattern (
  (t2tb10 (tb2t10 j))) )))

;; mem_power
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (tuple21 a b))))
  (= (mem (set1 (tuple2 a1 b1)) (t2tb11 s) (power (tuple2 a1 b1) (t2tb11 t)))
  (forall ((x (tuple21 a b))) (=> (mem3 x s) (mem3 x t))))))

;; mem_power
  (assert
  (forall ((s (set b)) (t (set b)))
  (= (mem (set1 b1) (t2tb12 s) (power b1 (t2tb12 t)))
  (forall ((x b)) (=> (mem2 x s) (mem2 x t))))))

;; mem_power
  (assert
  (forall ((s (set a)) (t (set a)))
  (= (mem (set1 a1) (t2tb1 s) (power a1 (t2tb1 t)))
  (forall ((x a)) (=> (mem1 x s) (mem1 x t))))))

;; mem_power
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t uni))
  (and
  (=> (mem (set1 a2) s (power a2 t))
  (forall ((x uni)) (=> (mem a2 x s) (mem a2 x t))))
  (=> (forall ((x uni)) (=> (sort a2 x) (=> (mem a2 x s) (mem a2 x t)))) (mem
  (set1 a2) s (power a2 t)))))))

;; mem_non_empty_power
  (assert
  (forall ((s (set (set (tuple21 (tuple21 a b) a))))
  (t (set (set (tuple21 (tuple21 a b) a)))))
  (= (mem (set1 (set1 (tuple2 (tuple2 a1 b1) a1))) (t2tb52 s)
  (non_empty_power (set1 (tuple2 (tuple2 a1 b1) a1)) (t2tb52 t)))
  (and
  (forall ((x (set (tuple21 (tuple21 a b) a)))) (=> (mem17 x s) (mem17 x t)))
  (not (infix_eqeq (set1 (tuple2 (tuple2 a1 b1) a1)) (t2tb52 s)
  (empty (set1 (tuple2 (tuple2 a1 b1) a1)))))))))

;; mem_non_empty_power
  (assert
  (forall ((s (set (tuple21 (tuple21 a b) a))) (t (set (tuple21 (tuple21 a b)
  a))))
  (= (mem17 s
  (tb2t52 (non_empty_power (tuple2 (tuple2 a1 b1) a1) (t2tb29 t))))
  (and (forall ((x (tuple21 (tuple21 a b) a))) (=> (mem16 x s) (mem16 x t)))
  (not (infix_eqeq (tuple2 (tuple2 a1 b1) a1) (t2tb29 s)
  (empty (tuple2 (tuple2 a1 b1) a1))))))))

;; mem_non_empty_power
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (tuple21 a b))))
  (= (mem (set1 (tuple2 a1 b1)) (t2tb11 s)
  (non_empty_power (tuple2 a1 b1) (t2tb11 t)))
  (and (forall ((x (tuple21 a b))) (=> (mem3 x s) (mem3 x t)))
  (not (infix_eqeq (tuple2 a1 b1) (t2tb11 s) (empty (tuple2 a1 b1))))))))

;; mem_non_empty_power
  (assert
  (forall ((s (set b)) (t (set b)))
  (= (mem (set1 b1) (t2tb12 s) (non_empty_power b1 (t2tb12 t)))
  (and (forall ((x b)) (=> (mem2 x s) (mem2 x t)))
  (not (infix_eqeq b1 (t2tb12 s) (empty b1)))))))

;; mem_non_empty_power
  (assert
  (forall ((s (set a)) (t (set a)))
  (= (mem (set1 a1) (t2tb1 s) (non_empty_power a1 (t2tb1 t)))
  (and (forall ((x a)) (=> (mem1 x s) (mem1 x t)))
  (not (infix_eqeq a1 (t2tb1 s) (empty a1)))))))

;; mem_non_empty_power
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t uni))
  (and
  (=> (mem (set1 a2) s (non_empty_power a2 t))
  (and (forall ((x uni)) (=> (mem a2 x s) (mem a2 x t)))
  (not (infix_eqeq a2 s (empty a2)))))
  (=>
  (and (forall ((x uni)) (=> (sort a2 x) (=> (mem a2 x s) (mem a2 x t))))
  (not (infix_eqeq a2 s (empty a2)))) (mem (set1 a2) s
  (non_empty_power a2 t)))))))

(declare-fun choose (ty uni) uni)

;; choose_sort
  (assert (forall ((a2 ty)) (forall ((x uni)) (sort a2 (choose a2 x)))))

(declare-fun relation (ty ty uni uni) uni)

;; relation_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (set1 (tuple2 a2 b2)))
  (relation b2 a2 x x1)))))

;; mem_relation
  (assert
  (forall ((a2 ty))
  (forall ((u uni) (v (set (set (tuple21 (tuple21 a b) a)))) (r uni))
  (and
  (=> (mem (set1 (tuple2 a2 (set1 (tuple2 (tuple2 a1 b1) a1)))) r
  (relation (set1 (tuple2 (tuple2 a1 b1) a1)) a2 u (t2tb52 v)))
  (forall ((x uni) (y (set (tuple21 (tuple21 a b) a))))
  (=> (mem (tuple2 a2 (set1 (tuple2 (tuple2 a1 b1) a1)))
  (Tuple2 a2 (set1 (tuple2 (tuple2 a1 b1) a1)) x (t2tb29 y)) r)
  (and (mem a2 x u) (mem17 y v)))))
  (=>
  (forall ((x uni) (y (set (tuple21 (tuple21 a b) a))))
  (=> (sort a2 x)
  (=> (mem (tuple2 a2 (set1 (tuple2 (tuple2 a1 b1) a1)))
  (Tuple2 a2 (set1 (tuple2 (tuple2 a1 b1) a1)) x (t2tb29 y)) r)
  (and (mem a2 x u) (mem17 y v))))) (mem
  (set1 (tuple2 a2 (set1 (tuple2 (tuple2 a1 b1) a1)))) r
  (relation (set1 (tuple2 (tuple2 a1 b1) a1)) a2 u (t2tb52 v))))))))

;; mem_relation
  (assert
  (forall ((a2 ty))
  (forall ((u uni) (v (set (tuple21 (tuple21 a b) a))) (r uni))
  (and
  (=> (mem (set1 (tuple2 a2 (tuple2 (tuple2 a1 b1) a1))) r
  (relation (tuple2 (tuple2 a1 b1) a1) a2 u (t2tb29 v)))
  (forall ((x uni) (y (tuple21 (tuple21 a b) a)))
  (=> (mem (tuple2 a2 (tuple2 (tuple2 a1 b1) a1))
  (Tuple2 a2 (tuple2 (tuple2 a1 b1) a1) x (t2tb30 y)) r)
  (and (mem a2 x u) (mem16 y v)))))
  (=>
  (forall ((x uni) (y (tuple21 (tuple21 a b) a)))
  (=> (sort a2 x)
  (=> (mem (tuple2 a2 (tuple2 (tuple2 a1 b1) a1))
  (Tuple2 a2 (tuple2 (tuple2 a1 b1) a1) x (t2tb30 y)) r)
  (and (mem a2 x u) (mem16 y v))))) (mem
  (set1 (tuple2 a2 (tuple2 (tuple2 a1 b1) a1))) r
  (relation (tuple2 (tuple2 a1 b1) a1) a2 u (t2tb29 v))))))))

;; mem_relation
  (assert
  (forall ((a2 ty))
  (forall ((u uni) (v (set (tuple21 a b))) (r uni))
  (and
  (=> (mem (set1 (tuple2 a2 (tuple2 a1 b1))) r
  (relation (tuple2 a1 b1) a2 u (t2tb11 v)))
  (forall ((x uni) (y (tuple21 a b)))
  (=> (mem (tuple2 a2 (tuple2 a1 b1)) (Tuple2 a2 (tuple2 a1 b1) x (t2tb13 y))
  r) (and (mem a2 x u) (mem3 y v)))))
  (=>
  (forall ((x uni) (y (tuple21 a b)))
  (=> (sort a2 x)
  (=> (mem (tuple2 a2 (tuple2 a1 b1)) (Tuple2 a2 (tuple2 a1 b1) x (t2tb13 y))
  r) (and (mem a2 x u) (mem3 y v))))) (mem (set1 (tuple2 a2 (tuple2 a1 b1)))
  r (relation (tuple2 a1 b1) a2 u (t2tb11 v))))))))

;; mem_relation
  (assert
  (forall ((a2 ty))
  (forall ((u uni) (v (set b)) (r uni))
  (and
  (=> (mem (set1 (tuple2 a2 b1)) r (relation b1 a2 u (t2tb12 v)))
  (forall ((x uni) (y b))
  (=> (mem (tuple2 a2 b1) (Tuple2 a2 b1 x (t2tb14 y)) r)
  (and (mem a2 x u) (mem2 y v)))))
  (=>
  (forall ((x uni) (y b))
  (=> (sort a2 x)
  (=> (mem (tuple2 a2 b1) (Tuple2 a2 b1 x (t2tb14 y)) r)
  (and (mem a2 x u) (mem2 y v))))) (mem (set1 (tuple2 a2 b1)) r
  (relation b1 a2 u (t2tb12 v))))))))

;; mem_relation
  (assert
  (forall ((a2 ty))
  (forall ((u uni) (v (set a)) (r uni))
  (and
  (=> (mem (set1 (tuple2 a2 a1)) r (relation a1 a2 u (t2tb1 v)))
  (forall ((x uni) (y a))
  (=> (mem (tuple2 a2 a1) (Tuple2 a2 a1 x (t2tb2 y)) r)
  (and (mem a2 x u) (mem1 y v)))))
  (=>
  (forall ((x uni) (y a))
  (=> (sort a2 x)
  (=> (mem (tuple2 a2 a1) (Tuple2 a2 a1 x (t2tb2 y)) r)
  (and (mem a2 x u) (mem1 y v))))) (mem (set1 (tuple2 a2 a1)) r
  (relation a1 a2 u (t2tb1 v))))))))

(declare-fun t2tb544 ((set (set (tuple21 (set (tuple21 (tuple21 a b) a))
  (set (tuple21 (tuple21 a b) a)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 (tuple21 a b) a))
  (set (tuple21 (tuple21 a b) a))))))) (sort
  (set1
  (set1
  (tuple2 (set1 (tuple2 (tuple2 a1 b1) a1))
  (set1 (tuple2 (tuple2 a1 b1) a1))))) (t2tb544 x))))

(declare-fun tb2t544 (uni) (set (set (tuple21 (set (tuple21 (tuple21 a b) a))
  (set (tuple21 (tuple21 a b) a))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 (tuple21 a b) a))
  (set (tuple21 (tuple21 a b) a)))))))
  (! (= (tb2t544 (t2tb544 i)) i) :pattern ((t2tb544 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (set1
     (tuple2 (set1 (tuple2 (tuple2 a1 b1) a1))
     (set1 (tuple2 (tuple2 a1 b1) a1))))) j) (= (t2tb544 (tb2t544 j)) j)) :pattern (
  (t2tb544 (tb2t544 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 (tuple21 a b) a))))
  (v (set (set (tuple21 (tuple21 a b) a))))
  (r (set (tuple21 (set (tuple21 (tuple21 a b) a)) (set (tuple21 (tuple21 a
  b) a))))))
  (= (mem
  (set1
  (tuple2 (set1 (tuple2 (tuple2 a1 b1) a1))
  (set1 (tuple2 (tuple2 a1 b1) a1)))) (t2tb510 r)
  (relation (set1 (tuple2 (tuple2 a1 b1) a1))
  (set1 (tuple2 (tuple2 a1 b1) a1)) (t2tb52 u) (t2tb52 v)))
  (forall ((x (set (tuple21 (tuple21 a b) a))) (y (set (tuple21 (tuple21 a b)
  a))))
  (=> (mem
  (tuple2 (set1 (tuple2 (tuple2 a1 b1) a1))
  (set1 (tuple2 (tuple2 a1 b1) a1)))
  (Tuple2 (set1 (tuple2 (tuple2 a1 b1) a1)) (set1 (tuple2 (tuple2 a1 b1) a1))
  (t2tb29 x) (t2tb29 y)) (t2tb510 r)) (and (mem17 x u) (mem17 y v)))))))

(declare-fun t2tb545 ((set (set (tuple21 (set (tuple21 (tuple21 a b) a))
  (tuple21 (tuple21 a b) a))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 (tuple21 a b) a))
  (tuple21 (tuple21 a b) a)))))) (sort
  (set1
  (set1
  (tuple2 (set1 (tuple2 (tuple2 a1 b1) a1)) (tuple2 (tuple2 a1 b1) a1))))
  (t2tb545 x))))

(declare-fun tb2t545 (uni) (set (set (tuple21 (set (tuple21 (tuple21 a b) a))
  (tuple21 (tuple21 a b) a)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 (tuple21 a b) a))
  (tuple21 (tuple21 a b) a))))))
  (! (= (tb2t545 (t2tb545 i)) i) :pattern ((t2tb545 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (set1
     (tuple2 (set1 (tuple2 (tuple2 a1 b1) a1)) (tuple2 (tuple2 a1 b1) a1))))
     j) (= (t2tb545 (tb2t545 j)) j)) :pattern ((t2tb545 (tb2t545 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 (tuple21 a b) a))))
  (v (set (tuple21 (tuple21 a b) a)))
  (r (set (tuple21 (set (tuple21 (tuple21 a b) a)) (tuple21 (tuple21 a b)
  a)))))
  (= (mem
  (set1
  (tuple2 (set1 (tuple2 (tuple2 a1 b1) a1)) (tuple2 (tuple2 a1 b1) a1)))
  (t2tb512 r)
  (relation (tuple2 (tuple2 a1 b1) a1) (set1 (tuple2 (tuple2 a1 b1) a1))
  (t2tb52 u) (t2tb29 v)))
  (forall ((x (set (tuple21 (tuple21 a b) a))) (y (tuple21 (tuple21 a b) a)))
  (=> (mem
  (tuple2 (set1 (tuple2 (tuple2 a1 b1) a1)) (tuple2 (tuple2 a1 b1) a1))
  (Tuple2 (set1 (tuple2 (tuple2 a1 b1) a1)) (tuple2 (tuple2 a1 b1) a1)
  (t2tb29 x) (t2tb30 y)) (t2tb512 r)) (and (mem17 x u) (mem16 y v)))))))

(declare-fun t2tb546 ((set (set (tuple21 (set (tuple21 (tuple21 a b) a))
  (tuple21 a b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 (tuple21 a b) a)) (tuple21 a
  b)))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 (tuple2 a1 b1) a1)) (tuple2 a1 b1))))
  (t2tb546 x))))

(declare-fun tb2t546 (uni) (set (set (tuple21 (set (tuple21 (tuple21 a b) a))
  (tuple21 a b)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 (tuple21 a b) a)) (tuple21 a
  b)))))) (! (= (tb2t546 (t2tb546 i)) i) :pattern ((t2tb546 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (set1 (tuple2 (tuple2 a1 b1) a1)) (tuple2 a1 b1))))
     j) (= (t2tb546 (tb2t546 j)) j)) :pattern ((t2tb546 (tb2t546 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 (tuple21 a b) a)))) (v (set (tuple21 a b)))
  (r (set (tuple21 (set (tuple21 (tuple21 a b) a)) (tuple21 a b)))))
  (= (mem (set1 (tuple2 (set1 (tuple2 (tuple2 a1 b1) a1)) (tuple2 a1 b1)))
  (t2tb514 r)
  (relation (tuple2 a1 b1) (set1 (tuple2 (tuple2 a1 b1) a1)) (t2tb52 u)
  (t2tb11 v)))
  (forall ((x (set (tuple21 (tuple21 a b) a))) (y (tuple21 a b)))
  (=> (mem (tuple2 (set1 (tuple2 (tuple2 a1 b1) a1)) (tuple2 a1 b1))
  (Tuple2 (set1 (tuple2 (tuple2 a1 b1) a1)) (tuple2 a1 b1) (t2tb29 x)
  (t2tb13 y)) (t2tb514 r)) (and (mem17 x u) (mem3 y v)))))))

(declare-fun t2tb547 ((set (set (tuple21 (set (tuple21 (tuple21 a b) a))
  b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 (tuple21 a b) a)) b))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 (tuple2 a1 b1) a1)) b1))) (t2tb547 x))))

(declare-fun tb2t547 (uni) (set (set (tuple21 (set (tuple21 (tuple21 a b) a))
  b))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 (tuple21 a b) a)) b)))))
  (! (= (tb2t547 (t2tb547 i)) i) :pattern ((t2tb547 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 (tuple2 a1 b1) a1)) b1))) j)
     (= (t2tb547 (tb2t547 j)) j)) :pattern ((t2tb547 (tb2t547 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 (tuple21 a b) a)))) (v (set b))
  (r (set (tuple21 (set (tuple21 (tuple21 a b) a)) b))))
  (= (mem (set1 (tuple2 (set1 (tuple2 (tuple2 a1 b1) a1)) b1)) (t2tb516 r)
  (relation b1 (set1 (tuple2 (tuple2 a1 b1) a1)) (t2tb52 u) (t2tb12 v)))
  (forall ((x (set (tuple21 (tuple21 a b) a))) (y b))
  (=> (mem (tuple2 (set1 (tuple2 (tuple2 a1 b1) a1)) b1)
  (Tuple2 (set1 (tuple2 (tuple2 a1 b1) a1)) b1 (t2tb29 x) (t2tb14 y))
  (t2tb516 r)) (and (mem17 x u) (mem2 y v)))))))

(declare-fun t2tb548 ((set (set (tuple21 (set (tuple21 (tuple21 a b) a))
  a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 (tuple21 a b) a)) a))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 (tuple2 a1 b1) a1)) a1))) (t2tb548 x))))

(declare-fun tb2t548 (uni) (set (set (tuple21 (set (tuple21 (tuple21 a b) a))
  a))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 (tuple21 a b) a)) a)))))
  (! (= (tb2t548 (t2tb548 i)) i) :pattern ((t2tb548 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 (tuple2 a1 b1) a1)) a1))) j)
     (= (t2tb548 (tb2t548 j)) j)) :pattern ((t2tb548 (tb2t548 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 (tuple21 a b) a)))) (v (set a))
  (r (set (tuple21 (set (tuple21 (tuple21 a b) a)) a))))
  (= (mem (set1 (tuple2 (set1 (tuple2 (tuple2 a1 b1) a1)) a1)) (t2tb518 r)
  (relation a1 (set1 (tuple2 (tuple2 a1 b1) a1)) (t2tb52 u) (t2tb1 v)))
  (forall ((x (set (tuple21 (tuple21 a b) a))) (y a))
  (=> (mem (tuple2 (set1 (tuple2 (tuple2 a1 b1) a1)) a1)
  (Tuple2 (set1 (tuple2 (tuple2 a1 b1) a1)) a1 (t2tb29 x) (t2tb2 y))
  (t2tb518 r)) (and (mem17 x u) (mem1 y v)))))))

;; mem_relation
  (assert
  (forall ((b2 ty))
  (forall ((u (set (set (tuple21 (tuple21 a b) a)))) (v uni) (r uni))
  (and
  (=> (mem (set1 (tuple2 (set1 (tuple2 (tuple2 a1 b1) a1)) b2)) r
  (relation b2 (set1 (tuple2 (tuple2 a1 b1) a1)) (t2tb52 u) v))
  (forall ((x (set (tuple21 (tuple21 a b) a))) (y uni))
  (=> (mem (tuple2 (set1 (tuple2 (tuple2 a1 b1) a1)) b2)
  (Tuple2 (set1 (tuple2 (tuple2 a1 b1) a1)) b2 (t2tb29 x) y) r)
  (and (mem17 x u) (mem b2 y v)))))
  (=>
  (forall ((x (set (tuple21 (tuple21 a b) a))) (y uni))
  (=> (sort b2 y)
  (=> (mem (tuple2 (set1 (tuple2 (tuple2 a1 b1) a1)) b2)
  (Tuple2 (set1 (tuple2 (tuple2 a1 b1) a1)) b2 (t2tb29 x) y) r)
  (and (mem17 x u) (mem b2 y v))))) (mem
  (set1 (tuple2 (set1 (tuple2 (tuple2 a1 b1) a1)) b2)) r
  (relation b2 (set1 (tuple2 (tuple2 a1 b1) a1)) (t2tb52 u) v)))))))

(declare-fun t2tb549 ((set (set (tuple21 (tuple21 (tuple21 a b) a)
  (set (tuple21 (tuple21 a b) a)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 (tuple21 a b) a)
  (set (tuple21 (tuple21 a b) a))))))) (sort
  (set1
  (set1
  (tuple2 (tuple2 (tuple2 a1 b1) a1) (set1 (tuple2 (tuple2 a1 b1) a1)))))
  (t2tb549 x))))

(declare-fun tb2t549 (uni) (set (set (tuple21 (tuple21 (tuple21 a b) a)
  (set (tuple21 (tuple21 a b) a))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 (tuple21 a b) a)
  (set (tuple21 (tuple21 a b) a)))))))
  (! (= (tb2t549 (t2tb549 i)) i) :pattern ((t2tb549 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (set1
     (tuple2 (tuple2 (tuple2 a1 b1) a1) (set1 (tuple2 (tuple2 a1 b1) a1)))))
     j) (= (t2tb549 (tb2t549 j)) j)) :pattern ((t2tb549 (tb2t549 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 (tuple21 a b) a)))
  (v (set (set (tuple21 (tuple21 a b) a))))
  (r (set (tuple21 (tuple21 (tuple21 a b) a) (set (tuple21 (tuple21 a b)
  a))))))
  (= (mem
  (set1
  (tuple2 (tuple2 (tuple2 a1 b1) a1) (set1 (tuple2 (tuple2 a1 b1) a1))))
  (t2tb520 r)
  (relation (set1 (tuple2 (tuple2 a1 b1) a1)) (tuple2 (tuple2 a1 b1) a1)
  (t2tb29 u) (t2tb52 v)))
  (forall ((x (tuple21 (tuple21 a b) a)) (y (set (tuple21 (tuple21 a b) a))))
  (=> (mem
  (tuple2 (tuple2 (tuple2 a1 b1) a1) (set1 (tuple2 (tuple2 a1 b1) a1)))
  (Tuple2 (tuple2 (tuple2 a1 b1) a1) (set1 (tuple2 (tuple2 a1 b1) a1))
  (t2tb30 x) (t2tb29 y)) (t2tb520 r)) (and (mem16 x u) (mem17 y v)))))))

(declare-fun t2tb550 ((set (set (tuple21 (tuple21 (tuple21 a b) a)
  (tuple21 (tuple21 a b) a))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 (tuple21 a b) a)
  (tuple21 (tuple21 a b) a)))))) (sort
  (set1
  (set1 (tuple2 (tuple2 (tuple2 a1 b1) a1) (tuple2 (tuple2 a1 b1) a1))))
  (t2tb550 x))))

(declare-fun tb2t550 (uni) (set (set (tuple21 (tuple21 (tuple21 a b) a)
  (tuple21 (tuple21 a b) a)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 (tuple21 a b) a)
  (tuple21 (tuple21 a b) a))))))
  (! (= (tb2t550 (t2tb550 i)) i) :pattern ((t2tb550 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (set1 (tuple2 (tuple2 (tuple2 a1 b1) a1) (tuple2 (tuple2 a1 b1) a1))))
     j) (= (t2tb550 (tb2t550 j)) j)) :pattern ((t2tb550 (tb2t550 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 (tuple21 a b) a))) (v (set (tuple21 (tuple21 a b)
  a))) (r (set (tuple21 (tuple21 (tuple21 a b) a) (tuple21 (tuple21 a b)
  a)))))
  (= (mem
  (set1 (tuple2 (tuple2 (tuple2 a1 b1) a1) (tuple2 (tuple2 a1 b1) a1)))
  (t2tb522 r)
  (relation (tuple2 (tuple2 a1 b1) a1) (tuple2 (tuple2 a1 b1) a1) (t2tb29 u)
  (t2tb29 v)))
  (forall ((x (tuple21 (tuple21 a b) a)) (y (tuple21 (tuple21 a b) a)))
  (=> (mem (tuple2 (tuple2 (tuple2 a1 b1) a1) (tuple2 (tuple2 a1 b1) a1))
  (Tuple2 (tuple2 (tuple2 a1 b1) a1) (tuple2 (tuple2 a1 b1) a1) (t2tb30 x)
  (t2tb30 y)) (t2tb522 r)) (and (mem16 x u) (mem16 y v)))))))

(declare-fun t2tb551 ((set (set (tuple21 (tuple21 (tuple21 a b) a) (tuple21 a
  b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 (tuple21 a b) a) (tuple21 a b))))))
  (sort (set1 (set1 (tuple2 (tuple2 (tuple2 a1 b1) a1) (tuple2 a1 b1))))
  (t2tb551 x))))

(declare-fun tb2t551 (uni) (set (set (tuple21 (tuple21 (tuple21 a b) a)
  (tuple21 a b)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 (tuple21 a b) a) (tuple21 a b))))))
  (! (= (tb2t551 (t2tb551 i)) i) :pattern ((t2tb551 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (tuple2 (tuple2 a1 b1) a1) (tuple2 a1 b1)))) j)
     (= (t2tb551 (tb2t551 j)) j)) :pattern ((t2tb551 (tb2t551 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 (tuple21 a b) a))) (v (set (tuple21 a b)))
  (r (set (tuple21 (tuple21 (tuple21 a b) a) (tuple21 a b)))))
  (= (mem (set1 (tuple2 (tuple2 (tuple2 a1 b1) a1) (tuple2 a1 b1)))
  (t2tb524 r)
  (relation (tuple2 a1 b1) (tuple2 (tuple2 a1 b1) a1) (t2tb29 u) (t2tb11 v)))
  (forall ((x (tuple21 (tuple21 a b) a)) (y (tuple21 a b)))
  (=> (mem (tuple2 (tuple2 (tuple2 a1 b1) a1) (tuple2 a1 b1))
  (Tuple2 (tuple2 (tuple2 a1 b1) a1) (tuple2 a1 b1) (t2tb30 x) (t2tb13 y))
  (t2tb524 r)) (and (mem16 x u) (mem3 y v)))))))

(declare-fun t2tb552 ((set (set (tuple21 (tuple21 (tuple21 a b) a) b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 (tuple21 a b) a) b))))) (sort
  (set1 (set1 (tuple2 (tuple2 (tuple2 a1 b1) a1) b1))) (t2tb552 x))))

(declare-fun tb2t552 (uni) (set (set (tuple21 (tuple21 (tuple21 a b) a) b))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 (tuple21 a b) a) b)))))
  (! (= (tb2t552 (t2tb552 i)) i) :pattern ((t2tb552 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 (tuple2 a1 b1) a1) b1))) j)
     (= (t2tb552 (tb2t552 j)) j)) :pattern ((t2tb552 (tb2t552 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 (tuple21 a b) a))) (v (set b))
  (r (set (tuple21 (tuple21 (tuple21 a b) a) b))))
  (= (mem (set1 (tuple2 (tuple2 (tuple2 a1 b1) a1) b1)) (t2tb526 r)
  (relation b1 (tuple2 (tuple2 a1 b1) a1) (t2tb29 u) (t2tb12 v)))
  (forall ((x (tuple21 (tuple21 a b) a)) (y b))
  (=> (mem (tuple2 (tuple2 (tuple2 a1 b1) a1) b1)
  (Tuple2 (tuple2 (tuple2 a1 b1) a1) b1 (t2tb30 x) (t2tb14 y)) (t2tb526 r))
  (and (mem16 x u) (mem2 y v)))))))

(declare-fun t2tb553 ((set (set (tuple21 (tuple21 (tuple21 a b) a) a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 (tuple21 a b) a) a))))) (sort
  (set1 (set1 (tuple2 (tuple2 (tuple2 a1 b1) a1) a1))) (t2tb553 x))))

(declare-fun tb2t553 (uni) (set (set (tuple21 (tuple21 (tuple21 a b) a) a))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 (tuple21 a b) a) a)))))
  (! (= (tb2t553 (t2tb553 i)) i) :pattern ((t2tb553 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 (tuple2 a1 b1) a1) a1))) j)
     (= (t2tb553 (tb2t553 j)) j)) :pattern ((t2tb553 (tb2t553 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 (tuple21 a b) a))) (v (set a))
  (r (set (tuple21 (tuple21 (tuple21 a b) a) a))))
  (= (mem (set1 (tuple2 (tuple2 (tuple2 a1 b1) a1) a1)) (t2tb528 r)
  (relation a1 (tuple2 (tuple2 a1 b1) a1) (t2tb29 u) (t2tb1 v)))
  (forall ((x (tuple21 (tuple21 a b) a)) (y a))
  (=> (mem (tuple2 (tuple2 (tuple2 a1 b1) a1) a1)
  (Tuple2 (tuple2 (tuple2 a1 b1) a1) a1 (t2tb30 x) (t2tb2 y)) (t2tb528 r))
  (and (mem16 x u) (mem1 y v)))))))

;; mem_relation
  (assert
  (forall ((b2 ty))
  (forall ((u (set (tuple21 (tuple21 a b) a))) (v uni) (r uni))
  (and
  (=> (mem (set1 (tuple2 (tuple2 (tuple2 a1 b1) a1) b2)) r
  (relation b2 (tuple2 (tuple2 a1 b1) a1) (t2tb29 u) v))
  (forall ((x (tuple21 (tuple21 a b) a)) (y uni))
  (=> (mem (tuple2 (tuple2 (tuple2 a1 b1) a1) b2)
  (Tuple2 (tuple2 (tuple2 a1 b1) a1) b2 (t2tb30 x) y) r)
  (and (mem16 x u) (mem b2 y v)))))
  (=>
  (forall ((x (tuple21 (tuple21 a b) a)) (y uni))
  (=> (sort b2 y)
  (=> (mem (tuple2 (tuple2 (tuple2 a1 b1) a1) b2)
  (Tuple2 (tuple2 (tuple2 a1 b1) a1) b2 (t2tb30 x) y) r)
  (and (mem16 x u) (mem b2 y v))))) (mem
  (set1 (tuple2 (tuple2 (tuple2 a1 b1) a1) b2)) r
  (relation b2 (tuple2 (tuple2 a1 b1) a1) (t2tb29 u) v)))))))

(declare-fun t2tb554 ((set (set (tuple21 (tuple21 a b)
  (set (tuple21 (tuple21 a b) a)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a b) (set (tuple21 (tuple21 a b)
  a))))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 b1) (set1 (tuple2 (tuple2 a1 b1) a1)))))
  (t2tb554 x))))

(declare-fun tb2t554 (uni) (set (set (tuple21 (tuple21 a b)
  (set (tuple21 (tuple21 a b) a))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a b) (set (tuple21 (tuple21 a b)
  a))))))) (! (= (tb2t554 (t2tb554 i)) i) :pattern ((t2tb554 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (tuple2 a1 b1) (set1 (tuple2 (tuple2 a1 b1) a1)))))
     j) (= (t2tb554 (tb2t554 j)) j)) :pattern ((t2tb554 (tb2t554 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a b))) (v (set (set (tuple21 (tuple21 a b) a))))
  (r (set (tuple21 (tuple21 a b) (set (tuple21 (tuple21 a b) a))))))
  (= (mem (set1 (tuple2 (tuple2 a1 b1) (set1 (tuple2 (tuple2 a1 b1) a1))))
  (t2tb530 r)
  (relation (set1 (tuple2 (tuple2 a1 b1) a1)) (tuple2 a1 b1) (t2tb11 u)
  (t2tb52 v)))
  (forall ((x (tuple21 a b)) (y (set (tuple21 (tuple21 a b) a))))
  (=> (mem (tuple2 (tuple2 a1 b1) (set1 (tuple2 (tuple2 a1 b1) a1)))
  (Tuple2 (tuple2 a1 b1) (set1 (tuple2 (tuple2 a1 b1) a1)) (t2tb13 x)
  (t2tb29 y)) (t2tb530 r)) (and (mem3 x u) (mem17 y v)))))))

(declare-fun t2tb555 ((set (set (tuple21 (tuple21 a b) (tuple21 (tuple21 a b)
  a))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a b) (tuple21 (tuple21 a b) a))))))
  (sort (set1 (set1 (tuple2 (tuple2 a1 b1) (tuple2 (tuple2 a1 b1) a1))))
  (t2tb555 x))))

(declare-fun tb2t555 (uni) (set (set (tuple21 (tuple21 a b)
  (tuple21 (tuple21 a b) a)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a b) (tuple21 (tuple21 a b) a))))))
  (! (= (tb2t555 (t2tb555 i)) i) :pattern ((t2tb555 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (tuple2 a1 b1) (tuple2 (tuple2 a1 b1) a1)))) j)
     (= (t2tb555 (tb2t555 j)) j)) :pattern ((t2tb555 (tb2t555 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a b))) (v (set (tuple21 (tuple21 a b) a)))
  (r (set (tuple21 (tuple21 a b) (tuple21 (tuple21 a b) a)))))
  (= (mem (set1 (tuple2 (tuple2 a1 b1) (tuple2 (tuple2 a1 b1) a1)))
  (t2tb532 r)
  (relation (tuple2 (tuple2 a1 b1) a1) (tuple2 a1 b1) (t2tb11 u) (t2tb29 v)))
  (forall ((x (tuple21 a b)) (y (tuple21 (tuple21 a b) a)))
  (=> (mem (tuple2 (tuple2 a1 b1) (tuple2 (tuple2 a1 b1) a1))
  (Tuple2 (tuple2 a1 b1) (tuple2 (tuple2 a1 b1) a1) (t2tb13 x) (t2tb30 y))
  (t2tb532 r)) (and (mem3 x u) (mem16 y v)))))))

(declare-fun t2tb50 ((set (set (tuple21 (tuple21 a b) (tuple21 a b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a b) (tuple21 a b)))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 b1) (tuple2 a1 b1)))) (t2tb50 x))))

(declare-fun tb2t50 (uni) (set (set (tuple21 (tuple21 a b) (tuple21 a b)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a b) (tuple21 a b))))))
  (! (= (tb2t50 (t2tb50 i)) i) :pattern ((t2tb50 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 b1) (tuple2 a1 b1)))) j)
     (= (t2tb50 (tb2t50 j)) j)) :pattern ((t2tb50 (tb2t50 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a b))) (v (set (tuple21 a b)))
  (r (set (tuple21 (tuple21 a b) (tuple21 a b)))))
  (= (mem (set1 (tuple2 (tuple2 a1 b1) (tuple2 a1 b1))) (t2tb25 r)
  (relation (tuple2 a1 b1) (tuple2 a1 b1) (t2tb11 u) (t2tb11 v)))
  (forall ((x (tuple21 a b)) (y (tuple21 a b)))
  (=> (mem (tuple2 (tuple2 a1 b1) (tuple2 a1 b1))
  (Tuple2 (tuple2 a1 b1) (tuple2 a1 b1) (t2tb13 x) (t2tb13 y)) (t2tb25 r))
  (and (mem3 x u) (mem3 y v)))))))

(declare-fun t2tb51 ((set (set (tuple21 (tuple21 a b) b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a b) b))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 b1) b1))) (t2tb51 x))))

(declare-fun tb2t51 (uni) (set (set (tuple21 (tuple21 a b) b))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a b) b)))))
  (! (= (tb2t51 (t2tb51 i)) i) :pattern ((t2tb51 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 b1) b1))) j)
     (= (t2tb51 (tb2t51 j)) j)) :pattern ((t2tb51 (tb2t51 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a b))) (v (set b)) (r (set (tuple21 (tuple21 a b)
  b))))
  (= (mem (set1 (tuple2 (tuple2 a1 b1) b1)) (t2tb27 r)
  (relation b1 (tuple2 a1 b1) (t2tb11 u) (t2tb12 v)))
  (forall ((x (tuple21 a b)) (y b))
  (=> (mem (tuple2 (tuple2 a1 b1) b1)
  (Tuple2 (tuple2 a1 b1) b1 (t2tb13 x) (t2tb14 y)) (t2tb27 r))
  (and (mem3 x u) (mem2 y v)))))))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a b))) (v (set a)) (r (set (tuple21 (tuple21 a b)
  a))))
  (= (mem17 r (tb2t52 (relation a1 (tuple2 a1 b1) (t2tb11 u) (t2tb1 v))))
  (forall ((x (tuple21 a b)) (y a))
  (=> (mem16 (Tuple22 x y) r) (and (mem3 x u) (mem1 y v)))))))

;; mem_relation
  (assert
  (forall ((b2 ty))
  (forall ((u (set (tuple21 a b))) (v uni) (r uni))
  (and
  (=> (mem (set1 (tuple2 (tuple2 a1 b1) b2)) r
  (relation b2 (tuple2 a1 b1) (t2tb11 u) v))
  (forall ((x (tuple21 a b)) (y uni))
  (=> (mem (tuple2 (tuple2 a1 b1) b2) (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) y)
  r) (and (mem3 x u) (mem b2 y v)))))
  (=>
  (forall ((x (tuple21 a b)) (y uni))
  (=> (sort b2 y)
  (=> (mem (tuple2 (tuple2 a1 b1) b2) (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) y)
  r) (and (mem3 x u) (mem b2 y v))))) (mem (set1 (tuple2 (tuple2 a1 b1) b2))
  r (relation b2 (tuple2 a1 b1) (t2tb11 u) v)))))))

(declare-fun t2tb556 ((set (set (tuple21 b (set (tuple21 (tuple21 a b)
  a)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 b (set (tuple21 (tuple21 a b) a))))))) (sort
  (set1 (set1 (tuple2 b1 (set1 (tuple2 (tuple2 a1 b1) a1))))) (t2tb556 x))))

(declare-fun tb2t556 (uni) (set (set (tuple21 b (set (tuple21 (tuple21 a b)
  a))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 b (set (tuple21 (tuple21 a b) a)))))))
  (! (= (tb2t556 (t2tb556 i)) i) :pattern ((t2tb556 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 b1 (set1 (tuple2 (tuple2 a1 b1) a1))))) j)
     (= (t2tb556 (tb2t556 j)) j)) :pattern ((t2tb556 (tb2t556 j))) )))

;; mem_relation
  (assert
  (forall ((u (set b)) (v (set (set (tuple21 (tuple21 a b) a))))
  (r (set (tuple21 b (set (tuple21 (tuple21 a b) a))))))
  (= (mem (set1 (tuple2 b1 (set1 (tuple2 (tuple2 a1 b1) a1)))) (t2tb534 r)
  (relation (set1 (tuple2 (tuple2 a1 b1) a1)) b1 (t2tb12 u) (t2tb52 v)))
  (forall ((x b) (y (set (tuple21 (tuple21 a b) a))))
  (=> (mem (tuple2 b1 (set1 (tuple2 (tuple2 a1 b1) a1)))
  (Tuple2 b1 (set1 (tuple2 (tuple2 a1 b1) a1)) (t2tb14 x) (t2tb29 y))
  (t2tb534 r)) (and (mem2 x u) (mem17 y v)))))))

(declare-fun t2tb557 ((set (set (tuple21 b (tuple21 (tuple21 a b) a))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 b (tuple21 (tuple21 a b) a)))))) (sort
  (set1 (set1 (tuple2 b1 (tuple2 (tuple2 a1 b1) a1)))) (t2tb557 x))))

(declare-fun tb2t557 (uni) (set (set (tuple21 b (tuple21 (tuple21 a b) a)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 b (tuple21 (tuple21 a b) a))))))
  (! (= (tb2t557 (t2tb557 i)) i) :pattern ((t2tb557 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 b1 (tuple2 (tuple2 a1 b1) a1)))) j)
     (= (t2tb557 (tb2t557 j)) j)) :pattern ((t2tb557 (tb2t557 j))) )))

;; mem_relation
  (assert
  (forall ((u (set b)) (v (set (tuple21 (tuple21 a b) a))) (r (set (tuple21 b
  (tuple21 (tuple21 a b) a)))))
  (= (mem (set1 (tuple2 b1 (tuple2 (tuple2 a1 b1) a1))) (t2tb536 r)
  (relation (tuple2 (tuple2 a1 b1) a1) b1 (t2tb12 u) (t2tb29 v)))
  (forall ((x b) (y (tuple21 (tuple21 a b) a)))
  (=> (mem (tuple2 b1 (tuple2 (tuple2 a1 b1) a1))
  (Tuple2 b1 (tuple2 (tuple2 a1 b1) a1) (t2tb14 x) (t2tb30 y)) (t2tb536 r))
  (and (mem2 x u) (mem16 y v)))))))

(declare-fun t2tb54 ((set (set (tuple21 b (tuple21 a b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 b (tuple21 a b)))))) (sort
  (set1 (set1 (tuple2 b1 (tuple2 a1 b1)))) (t2tb54 x))))

(declare-fun tb2t54 (uni) (set (set (tuple21 b (tuple21 a b)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 b (tuple21 a b))))))
  (! (= (tb2t54 (t2tb54 i)) i) :pattern ((t2tb54 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 b1 (tuple2 a1 b1)))) j)
     (= (t2tb54 (tb2t54 j)) j)) :pattern ((t2tb54 (tb2t54 j))) )))

;; mem_relation
  (assert
  (forall ((u (set b)) (v (set (tuple21 a b))) (r (set (tuple21 b (tuple21 a
  b)))))
  (= (mem (set1 (tuple2 b1 (tuple2 a1 b1))) (t2tb34 r)
  (relation (tuple2 a1 b1) b1 (t2tb12 u) (t2tb11 v)))
  (forall ((x b) (y (tuple21 a b)))
  (=> (mem (tuple2 b1 (tuple2 a1 b1))
  (Tuple2 b1 (tuple2 a1 b1) (t2tb14 x) (t2tb13 y)) (t2tb34 r))
  (and (mem2 x u) (mem3 y v)))))))

(declare-fun t2tb55 ((set (set (tuple21 b b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 b b))))) (sort (set1 (set1 (tuple2 b1 b1)))
  (t2tb55 x))))

(declare-fun tb2t55 (uni) (set (set (tuple21 b b))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 b b)))))
  (! (= (tb2t55 (t2tb55 i)) i) :pattern ((t2tb55 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 b1 b1))) j) (= (t2tb55 (tb2t55 j)) j)) :pattern (
  (t2tb55 (tb2t55 j))) )))

;; mem_relation
  (assert
  (forall ((u (set b)) (v (set b)) (r (set (tuple21 b b))))
  (= (mem (set1 (tuple2 b1 b1)) (t2tb35 r)
  (relation b1 b1 (t2tb12 u) (t2tb12 v)))
  (forall ((x b) (y b))
  (=> (mem (tuple2 b1 b1) (Tuple2 b1 b1 (t2tb14 x) (t2tb14 y)) (t2tb35 r))
  (and (mem2 x u) (mem2 y v)))))))

(declare-fun t2tb56 ((set (set (tuple21 b a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 b a))))) (sort (set1 (set1 (tuple2 b1 a1)))
  (t2tb56 x))))

(declare-fun tb2t56 (uni) (set (set (tuple21 b a))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 b a)))))
  (! (= (tb2t56 (t2tb56 i)) i) :pattern ((t2tb56 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 b1 a1))) j) (= (t2tb56 (tb2t56 j)) j)) :pattern (
  (t2tb56 (tb2t56 j))) )))

;; mem_relation
  (assert
  (forall ((u (set b)) (v (set a)) (r (set (tuple21 b a))))
  (= (mem (set1 (tuple2 b1 a1)) (t2tb37 r)
  (relation a1 b1 (t2tb12 u) (t2tb1 v)))
  (forall ((x b) (y a))
  (=> (mem (tuple2 b1 a1) (Tuple2 b1 a1 (t2tb14 x) (t2tb2 y)) (t2tb37 r))
  (and (mem2 x u) (mem1 y v)))))))

;; mem_relation
  (assert
  (forall ((b2 ty))
  (forall ((u (set b)) (v uni) (r uni))
  (and
  (=> (mem (set1 (tuple2 b1 b2)) r (relation b2 b1 (t2tb12 u) v))
  (forall ((x b) (y uni))
  (=> (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) y) r)
  (and (mem2 x u) (mem b2 y v)))))
  (=>
  (forall ((x b) (y uni))
  (=> (sort b2 y)
  (=> (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) y) r)
  (and (mem2 x u) (mem b2 y v))))) (mem (set1 (tuple2 b1 b2)) r
  (relation b2 b1 (t2tb12 u) v)))))))

(declare-fun t2tb558 ((set (set (tuple21 (set a) (set b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set a) (set b)))))) (sort
  (set1 (set1 (tuple2 (set1 a1) (set1 b1)))) (t2tb558 x))))

(declare-fun tb2t558 (uni) (set (set (tuple21 (set a) (set b)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set a) (set b))))))
  (! (= (tb2t558 (t2tb558 i)) i) :pattern ((t2tb558 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 a1) (set1 b1)))) j)
     (= (t2tb558 (tb2t558 j)) j)) :pattern ((t2tb558 (tb2t558 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set a))) (v (set (set b))) (r (set (tuple21 (set a)
  (set b)))))
  (= (mem (set1 (tuple2 (set1 a1) (set1 b1))) (t2tb538 r)
  (relation (set1 b1) (set1 a1) (t2tb u) (t2tb44 v)))
  (forall ((x (set a)) (y (set b)))
  (=> (mem (tuple2 (set1 a1) (set1 b1)) (t2tb495 (Tuple23 x y)) (t2tb538 r))
  (and (mem (set1 a1) (t2tb1 x) (t2tb u)) (mem (set1 b1) (t2tb12 y)
  (t2tb44 v))))))))

(declare-fun t2tb559 ((set (set (tuple21 a (set (tuple21 (tuple21 a b)
  a)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 a (set (tuple21 (tuple21 a b) a))))))) (sort
  (set1 (set1 (tuple2 a1 (set1 (tuple2 (tuple2 a1 b1) a1))))) (t2tb559 x))))

(declare-fun tb2t559 (uni) (set (set (tuple21 a (set (tuple21 (tuple21 a b)
  a))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 a (set (tuple21 (tuple21 a b) a)))))))
  (! (= (tb2t559 (t2tb559 i)) i) :pattern ((t2tb559 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 a1 (set1 (tuple2 (tuple2 a1 b1) a1))))) j)
     (= (t2tb559 (tb2t559 j)) j)) :pattern ((t2tb559 (tb2t559 j))) )))

;; mem_relation
  (assert
  (forall ((u (set a)) (v (set (set (tuple21 (tuple21 a b) a))))
  (r (set (tuple21 a (set (tuple21 (tuple21 a b) a))))))
  (= (mem (set1 (tuple2 a1 (set1 (tuple2 (tuple2 a1 b1) a1)))) (t2tb540 r)
  (relation (set1 (tuple2 (tuple2 a1 b1) a1)) a1 (t2tb1 u) (t2tb52 v)))
  (forall ((x a) (y (set (tuple21 (tuple21 a b) a))))
  (=> (mem (tuple2 a1 (set1 (tuple2 (tuple2 a1 b1) a1)))
  (Tuple2 a1 (set1 (tuple2 (tuple2 a1 b1) a1)) (t2tb2 x) (t2tb29 y))
  (t2tb540 r)) (and (mem1 x u) (mem17 y v)))))))

(declare-fun t2tb560 ((set (set (tuple21 a (tuple21 (tuple21 a b) a))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 a (tuple21 (tuple21 a b) a)))))) (sort
  (set1 (set1 (tuple2 a1 (tuple2 (tuple2 a1 b1) a1)))) (t2tb560 x))))

(declare-fun tb2t560 (uni) (set (set (tuple21 a (tuple21 (tuple21 a b) a)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 a (tuple21 (tuple21 a b) a))))))
  (! (= (tb2t560 (t2tb560 i)) i) :pattern ((t2tb560 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 a1 (tuple2 (tuple2 a1 b1) a1)))) j)
     (= (t2tb560 (tb2t560 j)) j)) :pattern ((t2tb560 (tb2t560 j))) )))

;; mem_relation
  (assert
  (forall ((u (set a)) (v (set (tuple21 (tuple21 a b) a))) (r (set (tuple21 a
  (tuple21 (tuple21 a b) a)))))
  (= (mem (set1 (tuple2 a1 (tuple2 (tuple2 a1 b1) a1))) (t2tb541 r)
  (relation (tuple2 (tuple2 a1 b1) a1) a1 (t2tb1 u) (t2tb29 v)))
  (forall ((x a) (y (tuple21 (tuple21 a b) a)))
  (=> (mem (tuple2 a1 (tuple2 (tuple2 a1 b1) a1))
  (Tuple2 a1 (tuple2 (tuple2 a1 b1) a1) (t2tb2 x) (t2tb30 y)) (t2tb541 r))
  (and (mem1 x u) (mem16 y v)))))))

(declare-fun t2tb58 ((set (set (tuple21 a (tuple21 a b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 a (tuple21 a b)))))) (sort
  (set1 (set1 (tuple2 a1 (tuple2 a1 b1)))) (t2tb58 x))))

(declare-fun tb2t58 (uni) (set (set (tuple21 a (tuple21 a b)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 a (tuple21 a b))))))
  (! (= (tb2t58 (t2tb58 i)) i) :pattern ((t2tb58 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 a1 (tuple2 a1 b1)))) j)
     (= (t2tb58 (tb2t58 j)) j)) :pattern ((t2tb58 (tb2t58 j))) )))

;; mem_relation
  (assert
  (forall ((u (set a)) (v (set (tuple21 a b))) (r (set (tuple21 a (tuple21 a
  b)))))
  (= (mem (set1 (tuple2 a1 (tuple2 a1 b1))) (t2tb41 r)
  (relation (tuple2 a1 b1) a1 (t2tb1 u) (t2tb11 v)))
  (forall ((x a) (y (tuple21 a b)))
  (=> (mem (tuple2 a1 (tuple2 a1 b1))
  (Tuple2 a1 (tuple2 a1 b1) (t2tb2 x) (t2tb13 y)) (t2tb41 r))
  (and (mem1 x u) (mem3 y v)))))))

;; mem_relation
  (assert
  (forall ((u (set a)) (v (set b)) (r (set (tuple21 a b))))
  (= (mem (set1 (tuple2 a1 b1)) (t2tb11 r)
  (relation b1 a1 (t2tb1 u) (t2tb12 v)))
  (forall ((x a) (y b))
  (=> (mem3 (Tuple21 x y) r) (and (mem1 x u) (mem2 y v)))))))

(declare-fun t2tb3 ((set (set (tuple21 a a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 a a))))) (sort (set1 (set1 (tuple2 a1 a1)))
  (t2tb3 x))))

(declare-fun tb2t3 (uni) (set (set (tuple21 a a))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 a a)))))
  (! (= (tb2t3 (t2tb3 i)) i) :pattern ((t2tb3 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 a1 a1))) j) (= (t2tb3 (tb2t3 j)) j)) :pattern (
  (t2tb3 (tb2t3 j))) )))

;; mem_relation
  (assert
  (forall ((u (set a)) (v (set a)) (r (set (tuple21 a a))))
  (= (mem (set1 (tuple2 a1 a1)) (t2tb4 r)
  (relation a1 a1 (t2tb1 u) (t2tb1 v)))
  (forall ((x a) (y a))
  (=> (mem (tuple2 a1 a1) (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y)) (t2tb4 r))
  (and (mem1 x u) (mem1 y v)))))))

;; mem_relation
  (assert
  (forall ((b2 ty))
  (forall ((u (set a)) (v uni) (r uni))
  (and
  (=> (mem (set1 (tuple2 a1 b2)) r (relation b2 a1 (t2tb1 u) v))
  (forall ((x a) (y uni))
  (=> (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) y) r)
  (and (mem1 x u) (mem b2 y v)))))
  (=>
  (forall ((x a) (y uni))
  (=> (sort b2 y)
  (=> (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) y) r)
  (and (mem1 x u) (mem b2 y v))))) (mem (set1 (tuple2 a1 b2)) r
  (relation b2 a1 (t2tb1 u) v)))))))

;; mem_relation
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((u uni) (v uni) (r uni))
  (and
  (=> (mem (set1 (tuple2 a2 b2)) r (relation b2 a2 u v))
  (forall ((x uni) (y uni))
  (=> (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) r)
  (and (mem a2 x u) (mem b2 y v)))))
  (=>
  (forall ((x uni) (y uni))
  (=> (sort a2 x)
  (=> (sort b2 y)
  (=> (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) r)
  (and (mem a2 x u) (mem b2 y v)))))) (mem (set1 (tuple2 a2 b2)) r
  (relation b2 a2 u v)))))))

(declare-fun inverse (ty ty uni) uni)

;; inverse_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni)) (sort (set1 (tuple2 b2 a2)) (inverse b2 a2 x)))))

;; mem_inverse
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) a))) (x a) (y (tuple21 a b)))
  (= (mem (tuple2 a1 (tuple2 a1 b1))
  (Tuple2 a1 (tuple2 a1 b1) (t2tb2 x) (t2tb13 y))
  (inverse a1 (tuple2 a1 b1) (t2tb29 p))) (mem16 (Tuple22 y x) p))))

(declare-fun t2tb561 ((set (tuple21 (set b) (set a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set b) (set a))))) (sort
  (set1 (tuple2 (set1 b1) (set1 a1))) (t2tb561 x))))

(declare-fun tb2t561 (uni) (set (tuple21 (set b) (set a))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set b) (set a)))))
  (! (= (tb2t561 (t2tb561 i)) i) :pattern ((t2tb561 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 b1) (set1 a1))) j)
     (= (t2tb561 (tb2t561 j)) j)) :pattern ((t2tb561 (tb2t561 j))) )))

(declare-fun t2tb562 ((tuple21 (set b) (set a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set b) (set a)))) (sort (tuple2 (set1 b1) (set1 a1))
  (t2tb562 x))))

(declare-fun tb2t562 (uni) (tuple21 (set b) (set a)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set b) (set a))))
  (! (= (tb2t562 (t2tb562 i)) i) :pattern ((t2tb562 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 b1) (set1 a1)) j) (= (t2tb562 (tb2t562 j)) j)) :pattern (
  (t2tb562 (tb2t562 j))) )))

;; mem_inverse
  (assert
  (forall ((p (set (tuple21 (set b) (set a)))) (x (set a)) (y (set b)))
  (= (mem (tuple2 (set1 a1) (set1 b1)) (t2tb495 (Tuple23 x y))
  (inverse (set1 a1) (set1 b1) (t2tb561 p))) (mem
  (tuple2 (set1 b1) (set1 a1))
  (Tuple2 (set1 b1) (set1 a1) (t2tb12 y) (t2tb1 x)) (t2tb561 p)))))

;; mem_inverse
  (assert
  (forall ((p (set (tuple21 b a))) (x a) (y b))
  (= (mem3 (Tuple21 x y) (tb2t11 (inverse a1 b1 (t2tb37 p)))) (mem
  (tuple2 b1 a1) (Tuple2 b1 a1 (t2tb14 y) (t2tb2 x)) (t2tb37 p)))))

;; mem_inverse
  (assert
  (forall ((p (set (tuple21 (set a) (set b)))) (x (set b)) (y (set a)))
  (= (mem (tuple2 (set1 b1) (set1 a1))
  (Tuple2 (set1 b1) (set1 a1) (t2tb12 x) (t2tb1 y))
  (inverse (set1 b1) (set1 a1) (t2tb538 p))) (mem
  (tuple2 (set1 a1) (set1 b1)) (t2tb495 (Tuple23 y x)) (t2tb538 p)))))

;; mem_inverse
  (assert
  (forall ((p (set (tuple21 a (tuple21 a b)))) (x (tuple21 a b)) (y a))
  (= (mem16 (Tuple22 x y) (tb2t29 (inverse (tuple2 a1 b1) a1 (t2tb41 p))))
  (mem (tuple2 a1 (tuple2 a1 b1))
  (Tuple2 a1 (tuple2 a1 b1) (t2tb2 y) (t2tb13 x)) (t2tb41 p)))))

;; mem_inverse
  (assert
  (forall ((p (set (tuple21 a b))) (x b) (y a))
  (= (mem (tuple2 b1 a1) (Tuple2 b1 a1 (t2tb14 x) (t2tb2 y))
  (inverse b1 a1 (t2tb11 p))) (mem3 (Tuple21 y x) p))))

;; mem_inverse
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((p uni) (x uni) (y uni))
  (= (mem (tuple2 b2 a2) (Tuple2 b2 a2 x y) (inverse b2 a2 p)) (mem
  (tuple2 a2 b2) (Tuple2 a2 b2 y x) p)))))

(declare-fun dom (ty ty uni) uni)

;; dom_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni)) (sort (set1 a2) (dom b2 a2 x)))))

;; mem_dom
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (x (set (tuple21 (tuple21 a b) a))))
  (and
  (=> (mem17 x (tb2t52 (dom b2 (set1 (tuple2 (tuple2 a1 b1) a1)) p)))
  (exists ((b3 uni))
  (and (sort b2 b3) (mem (tuple2 (set1 (tuple2 (tuple2 a1 b1) a1)) b2)
  (Tuple2 (set1 (tuple2 (tuple2 a1 b1) a1)) b2 (t2tb29 x) b3) p))))
  (=>
  (exists ((b3 uni)) (mem (tuple2 (set1 (tuple2 (tuple2 a1 b1) a1)) b2)
  (Tuple2 (set1 (tuple2 (tuple2 a1 b1) a1)) b2 (t2tb29 x) b3) p)) (mem17 x
  (tb2t52 (dom b2 (set1 (tuple2 (tuple2 a1 b1) a1)) p))))))))

;; mem_dom
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (x (tuple21 (tuple21 a b) a)))
  (and
  (=> (mem16 x (tb2t29 (dom b2 (tuple2 (tuple2 a1 b1) a1) p)))
  (exists ((b3 uni))
  (and (sort b2 b3) (mem (tuple2 (tuple2 (tuple2 a1 b1) a1) b2)
  (Tuple2 (tuple2 (tuple2 a1 b1) a1) b2 (t2tb30 x) b3) p))))
  (=>
  (exists ((b3 uni)) (mem (tuple2 (tuple2 (tuple2 a1 b1) a1) b2)
  (Tuple2 (tuple2 (tuple2 a1 b1) a1) b2 (t2tb30 x) b3) p)) (mem16 x
  (tb2t29 (dom b2 (tuple2 (tuple2 a1 b1) a1) p))))))))

;; mem_dom
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) a))) (x (tuple21 a b)))
  (= (mem3 x (tb2t11 (dom a1 (tuple2 a1 b1) (t2tb29 p))))
  (exists ((b2 a)) (mem16 (Tuple22 x b2) p)))))

;; mem_dom
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (x (tuple21 a b)))
  (and
  (=> (mem3 x (tb2t11 (dom b2 (tuple2 a1 b1) p)))
  (exists ((b3 uni))
  (and (sort b2 b3) (mem (tuple2 (tuple2 a1 b1) b2)
  (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) b3) p))))
  (=>
  (exists ((b3 uni)) (mem (tuple2 (tuple2 a1 b1) b2)
  (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) b3) p)) (mem3 x
  (tb2t11 (dom b2 (tuple2 a1 b1) p))))))))

;; mem_dom
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (x b))
  (and
  (=> (mem2 x (tb2t12 (dom b2 b1 p)))
  (exists ((b3 uni))
  (and (sort b2 b3) (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) b3) p))))
  (=> (exists ((b3 uni)) (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) b3) p))
  (mem2 x (tb2t12 (dom b2 b1 p))))))))

;; mem_dom
  (assert
  (forall ((p (set (tuple21 (set a) (set b)))) (x (set a)))
  (= (mem (set1 a1) (t2tb1 x) (dom (set1 b1) (set1 a1) (t2tb538 p)))
  (exists ((b2 (set b))) (mem (tuple2 (set1 a1) (set1 b1))
  (t2tb495 (Tuple23 x b2)) (t2tb538 p))))))

;; mem_dom
  (assert
  (forall ((p (set (tuple21 a b))) (x a))
  (= (mem1 x (tb2t1 (dom b1 a1 (t2tb11 p))))
  (exists ((b2 b)) (mem3 (Tuple21 x b2) p)))))

;; mem_dom
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (x a))
  (and
  (=> (mem1 x (tb2t1 (dom b2 a1 p)))
  (exists ((b3 uni))
  (and (sort b2 b3) (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) b3) p))))
  (=> (exists ((b3 uni)) (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) b3) p))
  (mem1 x (tb2t1 (dom b2 a1 p))))))))

;; mem_dom
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((p uni) (x uni))
  (and
  (=> (mem a2 x (dom b2 a2 p))
  (exists ((b3 uni))
  (and (sort b2 b3) (mem (tuple2 a2 b2) (Tuple2 a2 b2 x b3) p))))
  (=> (exists ((b3 uni)) (mem (tuple2 a2 b2) (Tuple2 a2 b2 x b3) p)) (mem a2
  x (dom b2 a2 p)))))))

(declare-fun ran (ty ty uni) uni)

;; ran_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni)) (sort (set1 b2) (ran b2 a2 x)))))

;; mem_ran
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (x (set (tuple21 (tuple21 a b) a))))
  (and
  (=> (mem17 x (tb2t52 (ran (set1 (tuple2 (tuple2 a1 b1) a1)) a2 p)))
  (exists ((a3 uni))
  (and (sort a2 a3) (mem (tuple2 a2 (set1 (tuple2 (tuple2 a1 b1) a1)))
  (Tuple2 a2 (set1 (tuple2 (tuple2 a1 b1) a1)) a3 (t2tb29 x)) p))))
  (=>
  (exists ((a3 uni)) (mem (tuple2 a2 (set1 (tuple2 (tuple2 a1 b1) a1)))
  (Tuple2 a2 (set1 (tuple2 (tuple2 a1 b1) a1)) a3 (t2tb29 x)) p)) (mem17 x
  (tb2t52 (ran (set1 (tuple2 (tuple2 a1 b1) a1)) a2 p))))))))

;; mem_ran
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (x (tuple21 (tuple21 a b) a)))
  (and
  (=> (mem16 x (tb2t29 (ran (tuple2 (tuple2 a1 b1) a1) a2 p)))
  (exists ((a3 uni))
  (and (sort a2 a3) (mem (tuple2 a2 (tuple2 (tuple2 a1 b1) a1))
  (Tuple2 a2 (tuple2 (tuple2 a1 b1) a1) a3 (t2tb30 x)) p))))
  (=>
  (exists ((a3 uni)) (mem (tuple2 a2 (tuple2 (tuple2 a1 b1) a1))
  (Tuple2 a2 (tuple2 (tuple2 a1 b1) a1) a3 (t2tb30 x)) p)) (mem16 x
  (tb2t29 (ran (tuple2 (tuple2 a1 b1) a1) a2 p))))))))

;; mem_ran
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (x (tuple21 a b)))
  (and
  (=> (mem3 x (tb2t11 (ran (tuple2 a1 b1) a2 p)))
  (exists ((a3 uni))
  (and (sort a2 a3) (mem (tuple2 a2 (tuple2 a1 b1))
  (Tuple2 a2 (tuple2 a1 b1) a3 (t2tb13 x)) p))))
  (=>
  (exists ((a3 uni)) (mem (tuple2 a2 (tuple2 a1 b1))
  (Tuple2 a2 (tuple2 a1 b1) a3 (t2tb13 x)) p)) (mem3 x
  (tb2t11 (ran (tuple2 a1 b1) a2 p))))))))

;; mem_ran
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (x b))
  (and
  (=> (mem2 x (tb2t12 (ran b1 a2 p)))
  (exists ((a3 uni))
  (and (sort a2 a3) (mem (tuple2 a2 b1) (Tuple2 a2 b1 a3 (t2tb14 x)) p))))
  (=> (exists ((a3 uni)) (mem (tuple2 a2 b1) (Tuple2 a2 b1 a3 (t2tb14 x)) p))
  (mem2 x (tb2t12 (ran b1 a2 p))))))))

;; mem_ran
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (x a))
  (and
  (=> (mem1 x (tb2t1 (ran a1 a2 p)))
  (exists ((a3 uni))
  (and (sort a2 a3) (mem (tuple2 a2 a1) (Tuple2 a2 a1 a3 (t2tb2 x)) p))))
  (=> (exists ((a3 uni)) (mem (tuple2 a2 a1) (Tuple2 a2 a1 a3 (t2tb2 x)) p))
  (mem1 x (tb2t1 (ran a1 a2 p))))))))

;; mem_ran
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) a))) (x a))
  (= (mem1 x (tb2t1 (ran a1 (tuple2 a1 b1) (t2tb29 p))))
  (exists ((a2 (tuple21 a b))) (mem16 (Tuple22 a2 x) p)))))

;; mem_ran
  (assert
  (forall ((p (set (tuple21 (set a) (set b)))) (x (set b)))
  (= (mem (set1 b1) (t2tb12 x) (ran (set1 b1) (set1 a1) (t2tb538 p)))
  (exists ((a2 (set a))) (mem (tuple2 (set1 a1) (set1 b1))
  (t2tb495 (Tuple23 a2 x)) (t2tb538 p))))))

;; mem_ran
  (assert
  (forall ((p (set (tuple21 a b))) (x b))
  (= (mem2 x (tb2t12 (ran b1 a1 (t2tb11 p))))
  (exists ((a2 a)) (mem3 (Tuple21 a2 x) p)))))

;; mem_ran
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((p uni) (x uni))
  (and
  (=> (mem b2 x (ran b2 a2 p))
  (exists ((a3 uni))
  (and (sort a2 a3) (mem (tuple2 a2 b2) (Tuple2 a2 b2 a3 x) p))))
  (=> (exists ((a3 uni)) (mem (tuple2 a2 b2) (Tuple2 a2 b2 a3 x) p)) (mem b2
  x (ran b2 a2 p)))))))

(declare-fun semicolon (ty ty ty uni uni) uni)

;; semicolon_sort
  (assert
  (forall ((a2 ty) (b2 ty) (c2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (tuple2 a2 c2))
  (semicolon c2 b2 a2 x x1)))))

;; mem_semicolon
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (q (set (tuple21 (tuple21 a b) a))) (x uni) (y a))
  (= (mem (tuple2 a2 a1) (Tuple2 a2 a1 x (t2tb2 y))
  (semicolon a1 (tuple2 a1 b1) a2 p (t2tb29 q)))
  (exists ((b2 (tuple21 a b)))
  (and (mem (tuple2 a2 (tuple2 a1 b1))
  (Tuple2 a2 (tuple2 a1 b1) x (t2tb13 b2)) p) (mem16 (Tuple22 b2 y) q)))))))

;; mem_semicolon
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (q (set (tuple21 (set a) (set b)))) (x uni) (y (set b)))
  (= (mem (tuple2 a2 (set1 b1)) (Tuple2 a2 (set1 b1) x (t2tb12 y))
  (semicolon (set1 b1) (set1 a1) a2 p (t2tb538 q)))
  (exists ((b2 (set a)))
  (and (mem (tuple2 a2 (set1 a1)) (Tuple2 a2 (set1 a1) x (t2tb1 b2)) p) (mem
  (tuple2 (set1 a1) (set1 b1)) (t2tb495 (Tuple23 b2 y)) (t2tb538 q))))))))

;; mem_semicolon
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (q (set (tuple21 a b))) (x uni) (y b))
  (= (mem (tuple2 a2 b1) (Tuple2 a2 b1 x (t2tb14 y))
  (semicolon b1 a1 a2 p (t2tb11 q)))
  (exists ((b2 a))
  (and (mem (tuple2 a2 a1) (Tuple2 a2 a1 x (t2tb2 b2)) p) (mem3
  (Tuple21 b2 y) q)))))))

;; mem_semicolon
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (q uni) (x (tuple21 a b)) (y a))
  (and
  (=> (mem16 (Tuple22 x y) (tb2t29 (semicolon a1 b2 (tuple2 a1 b1) p q)))
  (exists ((b3 uni))
  (and (sort b2 b3)
  (and (mem (tuple2 (tuple2 a1 b1) b2)
  (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) b3) p) (mem (tuple2 b2 a1)
  (Tuple2 b2 a1 b3 (t2tb2 y)) q)))))
  (=>
  (exists ((b3 uni))
  (and (mem (tuple2 (tuple2 a1 b1) b2)
  (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) b3) p) (mem (tuple2 b2 a1)
  (Tuple2 b2 a1 b3 (t2tb2 y)) q))) (mem16 (Tuple22 x y)
  (tb2t29 (semicolon a1 b2 (tuple2 a1 b1) p q))))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) (tuple21 a b))))
  (q (set (tuple21 (tuple21 a b) a))) (x (tuple21 a b)) (y a))
  (= (mem16 (Tuple22 x y)
  (tb2t29 (semicolon a1 (tuple2 a1 b1) (tuple2 a1 b1) (t2tb25 p) (t2tb29 q))))
  (exists ((b2 (tuple21 a b)))
  (and (mem (tuple2 (tuple2 a1 b1) (tuple2 a1 b1))
  (Tuple2 (tuple2 a1 b1) (tuple2 a1 b1) (t2tb13 x) (t2tb13 b2)) (t2tb25 p))
  (mem16 (Tuple22 b2 y) q))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) a))) (q (set (tuple21 a b)))
  (x (tuple21 a b)) (y b))
  (= (mem (tuple2 (tuple2 a1 b1) b1)
  (Tuple2 (tuple2 a1 b1) b1 (t2tb13 x) (t2tb14 y))
  (semicolon b1 a1 (tuple2 a1 b1) (t2tb29 p) (t2tb11 q)))
  (exists ((b2 a)) (and (mem16 (Tuple22 x b2) p) (mem3 (Tuple21 b2 y) q))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) a))) (q (set (tuple21 a a)))
  (x (tuple21 a b)) (y a))
  (= (mem16 (Tuple22 x y)
  (tb2t29 (semicolon a1 a1 (tuple2 a1 b1) (t2tb29 p) (t2tb4 q))))
  (exists ((b2 a))
  (and (mem16 (Tuple22 x b2) p) (mem (tuple2 a1 a1)
  (Tuple2 a1 a1 (t2tb2 b2) (t2tb2 y)) (t2tb4 q)))))))

;; mem_semicolon
  (assert
  (forall ((c2 ty))
  (forall ((p (set (tuple21 (tuple21 a b) a))) (q uni) (x (tuple21 a b))
  (y uni))
  (= (mem (tuple2 (tuple2 a1 b1) c2) (Tuple2 (tuple2 a1 b1) c2 (t2tb13 x) y)
  (semicolon c2 a1 (tuple2 a1 b1) (t2tb29 p) q))
  (exists ((b2 a))
  (and (mem16 (Tuple22 x b2) p) (mem (tuple2 a1 c2)
  (Tuple2 a1 c2 (t2tb2 b2) y) q)))))))

;; mem_semicolon
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (q uni) (x (set a)) (y (set b)))
  (and
  (=> (mem (tuple2 (set1 a1) (set1 b1)) (t2tb495 (Tuple23 x y))
  (semicolon (set1 b1) b2 (set1 a1) p q))
  (exists ((b3 uni))
  (and (sort b2 b3)
  (and (mem (tuple2 (set1 a1) b2) (Tuple2 (set1 a1) b2 (t2tb1 x) b3) p) (mem
  (tuple2 b2 (set1 b1)) (Tuple2 b2 (set1 b1) b3 (t2tb12 y)) q)))))
  (=>
  (exists ((b3 uni))
  (and (mem (tuple2 (set1 a1) b2) (Tuple2 (set1 a1) b2 (t2tb1 x) b3) p) (mem
  (tuple2 b2 (set1 b1)) (Tuple2 b2 (set1 b1) b3 (t2tb12 y)) q))) (mem
  (tuple2 (set1 a1) (set1 b1)) (t2tb495 (Tuple23 x y))
  (semicolon (set1 b1) b2 (set1 a1) p q)))))))

(declare-fun t2tb563 ((set (tuple21 (set b) (set b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set b) (set b))))) (sort
  (set1 (tuple2 (set1 b1) (set1 b1))) (t2tb563 x))))

(declare-fun tb2t563 (uni) (set (tuple21 (set b) (set b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set b) (set b)))))
  (! (= (tb2t563 (t2tb563 i)) i) :pattern ((t2tb563 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 b1) (set1 b1))) j)
     (= (t2tb563 (tb2t563 j)) j)) :pattern ((t2tb563 (tb2t563 j))) )))

(declare-fun t2tb564 ((tuple21 (set b) (set b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set b) (set b)))) (sort (tuple2 (set1 b1) (set1 b1))
  (t2tb564 x))))

(declare-fun tb2t564 (uni) (tuple21 (set b) (set b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set b) (set b))))
  (! (= (tb2t564 (t2tb564 i)) i) :pattern ((t2tb564 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 b1) (set1 b1)) j) (= (t2tb564 (tb2t564 j)) j)) :pattern (
  (t2tb564 (tb2t564 j))) )))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 (set a) (set b)))) (q (set (tuple21 (set b)
  (set b)))) (x (set a)) (y (set b)))
  (= (mem (tuple2 (set1 a1) (set1 b1)) (t2tb495 (Tuple23 x y))
  (semicolon (set1 b1) (set1 b1) (set1 a1) (t2tb538 p) (t2tb563 q)))
  (exists ((b2 (set b)))
  (and (mem (tuple2 (set1 a1) (set1 b1)) (t2tb495 (Tuple23 x b2))
  (t2tb538 p)) (mem (tuple2 (set1 b1) (set1 b1))
  (Tuple2 (set1 b1) (set1 b1) (t2tb12 b2) (t2tb12 y)) (t2tb563 q)))))))

;; mem_semicolon
  (assert
  (forall ((c2 ty))
  (forall ((p (set (tuple21 (set a) (set b)))) (q uni) (x (set a)) (y uni))
  (= (mem (tuple2 (set1 a1) c2) (Tuple2 (set1 a1) c2 (t2tb1 x) y)
  (semicolon c2 (set1 b1) (set1 a1) (t2tb538 p) q))
  (exists ((b2 (set b)))
  (and (mem (tuple2 (set1 a1) (set1 b1)) (t2tb495 (Tuple23 x b2))
  (t2tb538 p)) (mem (tuple2 (set1 b1) c2) (Tuple2 (set1 b1) c2 (t2tb12 b2) y)
  q)))))))

(declare-fun t2tb565 ((set (tuple21 (set a) (set a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set a) (set a))))) (sort
  (set1 (tuple2 (set1 a1) (set1 a1))) (t2tb565 x))))

(declare-fun tb2t565 (uni) (set (tuple21 (set a) (set a))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set a) (set a)))))
  (! (= (tb2t565 (t2tb565 i)) i) :pattern ((t2tb565 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 a1) (set1 a1))) j)
     (= (t2tb565 (tb2t565 j)) j)) :pattern ((t2tb565 (tb2t565 j))) )))

(declare-fun t2tb566 ((tuple21 (set a) (set a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set a) (set a)))) (sort (tuple2 (set1 a1) (set1 a1))
  (t2tb566 x))))

(declare-fun tb2t566 (uni) (tuple21 (set a) (set a)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set a) (set a))))
  (! (= (tb2t566 (t2tb566 i)) i) :pattern ((t2tb566 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 a1) (set1 a1)) j) (= (t2tb566 (tb2t566 j)) j)) :pattern (
  (t2tb566 (tb2t566 j))) )))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 (set a) (set a)))) (q (set (tuple21 (set a)
  (set b)))) (x (set a)) (y (set b)))
  (= (mem (tuple2 (set1 a1) (set1 b1)) (t2tb495 (Tuple23 x y))
  (semicolon (set1 b1) (set1 a1) (set1 a1) (t2tb565 p) (t2tb538 q)))
  (exists ((b2 (set a)))
  (and (mem (tuple2 (set1 a1) (set1 a1))
  (Tuple2 (set1 a1) (set1 a1) (t2tb1 x) (t2tb1 b2)) (t2tb565 p)) (mem
  (tuple2 (set1 a1) (set1 b1)) (t2tb495 (Tuple23 b2 y)) (t2tb538 q)))))))

;; mem_semicolon
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (q uni) (x a) (y b))
  (and
  (=> (mem3 (Tuple21 x y) (tb2t11 (semicolon b1 b2 a1 p q)))
  (exists ((b3 uni))
  (and (sort b2 b3)
  (and (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) b3) p) (mem (tuple2 b2 b1)
  (Tuple2 b2 b1 b3 (t2tb14 y)) q)))))
  (=>
  (exists ((b3 uni))
  (and (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) b3) p) (mem (tuple2 b2 b1)
  (Tuple2 b2 b1 b3 (t2tb14 y)) q))) (mem3 (Tuple21 x y)
  (tb2t11 (semicolon b1 b2 a1 p q))))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 a b))) (q (set (tuple21 b b))) (x a) (y b))
  (= (mem3 (Tuple21 x y) (tb2t11 (semicolon b1 b1 a1 (t2tb11 p) (t2tb35 q))))
  (exists ((b2 b))
  (and (mem3 (Tuple21 x b2) p) (mem (tuple2 b1 b1)
  (Tuple2 b1 b1 (t2tb14 b2) (t2tb14 y)) (t2tb35 q)))))))

;; mem_semicolon
  (assert
  (forall ((c2 ty))
  (forall ((p (set (tuple21 a b))) (q uni) (x a) (y uni))
  (= (mem (tuple2 a1 c2) (Tuple2 a1 c2 (t2tb2 x) y)
  (semicolon c2 b1 a1 (t2tb11 p) q))
  (exists ((b2 b))
  (and (mem3 (Tuple21 x b2) p) (mem (tuple2 b1 c2)
  (Tuple2 b1 c2 (t2tb14 b2) y) q)))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 a a))) (q (set (tuple21 a b))) (x a) (y b))
  (= (mem3 (Tuple21 x y) (tb2t11 (semicolon b1 a1 a1 (t2tb4 p) (t2tb11 q))))
  (exists ((b2 a))
  (and (mem (tuple2 a1 a1) (Tuple2 a1 a1 (t2tb2 x) (t2tb2 b2)) (t2tb4 p))
  (mem3 (Tuple21 b2 y) q))))))

;; mem_semicolon
  (assert
  (forall ((a2 ty) (b2 ty) (c2 ty))
  (forall ((p uni) (q uni) (x uni) (y uni))
  (and
  (=> (mem (tuple2 a2 c2) (Tuple2 a2 c2 x y) (semicolon c2 b2 a2 p q))
  (exists ((b3 uni))
  (and (sort b2 b3)
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x b3) p) (mem (tuple2 b2 c2)
  (Tuple2 b2 c2 b3 y) q)))))
  (=>
  (exists ((b3 uni))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x b3) p) (mem (tuple2 b2 c2)
  (Tuple2 b2 c2 b3 y) q))) (mem (tuple2 a2 c2) (Tuple2 a2 c2 x y)
  (semicolon c2 b2 a2 p q)))))))

(declare-fun semicolon_back (ty ty ty uni uni) uni)

;; semicolon_back_sort
  (assert
  (forall ((a2 ty) (b2 ty) (c2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (tuple2 a2 c2))
  (semicolon_back c2 b2 a2 x x1)))))

;; semicolon_back
  (assert
  (forall ((a2 ty) (b2 ty) (c2 ty))
  (forall ((p uni) (q uni))
  (= (semicolon_back c2 b2 a2 q p) (semicolon c2 b2 a2 p q)))))

(declare-fun id (ty uni) uni)

;; id_sort
  (assert
  (forall ((a2 ty))
  (forall ((x uni)) (sort (set1 (tuple2 a2 a2)) (id a2 x)))))

;; mem_id
  (assert
  (forall ((u (set (set (tuple21 (tuple21 a b) a))))
  (x (set (tuple21 (tuple21 a b) a))) (y (set (tuple21 (tuple21 a b) a))))
  (= (mem
  (tuple2 (set1 (tuple2 (tuple2 a1 b1) a1))
  (set1 (tuple2 (tuple2 a1 b1) a1)))
  (Tuple2 (set1 (tuple2 (tuple2 a1 b1) a1)) (set1 (tuple2 (tuple2 a1 b1) a1))
  (t2tb29 x) (t2tb29 y)) (id (set1 (tuple2 (tuple2 a1 b1) a1)) (t2tb52 u)))
  (and (mem17 x u) (= x y)))))

;; mem_id
  (assert
  (forall ((u (set (tuple21 (tuple21 a b) a))) (x (tuple21 (tuple21 a b) a))
  (y (tuple21 (tuple21 a b) a)))
  (= (mem (tuple2 (tuple2 (tuple2 a1 b1) a1) (tuple2 (tuple2 a1 b1) a1))
  (Tuple2 (tuple2 (tuple2 a1 b1) a1) (tuple2 (tuple2 a1 b1) a1) (t2tb30 x)
  (t2tb30 y)) (id (tuple2 (tuple2 a1 b1) a1) (t2tb29 u)))
  (and (mem16 x u) (= x y)))))

;; mem_id
  (assert
  (forall ((u (set (tuple21 a b))) (x (tuple21 a b)) (y (tuple21 a b)))
  (= (mem (tuple2 (tuple2 a1 b1) (tuple2 a1 b1))
  (Tuple2 (tuple2 a1 b1) (tuple2 a1 b1) (t2tb13 x) (t2tb13 y))
  (id (tuple2 a1 b1) (t2tb11 u))) (and (mem3 x u) (= x y)))))

;; mem_id
  (assert
  (forall ((u (set b)) (x b) (y b))
  (= (mem (tuple2 b1 b1) (Tuple2 b1 b1 (t2tb14 x) (t2tb14 y))
  (id b1 (t2tb12 u))) (and (mem2 x u) (= x y)))))

;; mem_id
  (assert
  (forall ((u (set a)) (x a) (y a))
  (= (mem (tuple2 a1 a1) (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y))
  (id a1 (t2tb1 u))) (and (mem1 x u) (= x y)))))

;; mem_id
  (assert
  (forall ((a2 ty))
  (forall ((u uni) (x uni) (y uni))
  (=> (sort a2 x)
  (=> (sort a2 y)
  (= (mem (tuple2 a2 a2) (Tuple2 a2 a2 x y) (id a2 u))
  (and (mem a2 x u) (= x y))))))))

(declare-fun domain_restriction (ty ty uni uni) uni)

;; domain_restriction_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (tuple2 a2 b2))
  (domain_restriction b2 a2 x x1)))))

;; mem_domain_restriction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (set (tuple21 (tuple21 a b) a))))
  (x (set (tuple21 (tuple21 a b) a))) (y uni))
  (= (mem (tuple2 (set1 (tuple2 (tuple2 a1 b1) a1)) b2)
  (Tuple2 (set1 (tuple2 (tuple2 a1 b1) a1)) b2 (t2tb29 x) y)
  (domain_restriction b2 (set1 (tuple2 (tuple2 a1 b1) a1)) (t2tb52 s) p))
  (and (mem (tuple2 (set1 (tuple2 (tuple2 a1 b1) a1)) b2)
  (Tuple2 (set1 (tuple2 (tuple2 a1 b1) a1)) b2 (t2tb29 x) y) p) (mem17 x s))))))

;; mem_domain_restriction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (tuple21 (tuple21 a b) a))) (x (tuple21 (tuple21 a
  b) a)) (y uni))
  (= (mem (tuple2 (tuple2 (tuple2 a1 b1) a1) b2)
  (Tuple2 (tuple2 (tuple2 a1 b1) a1) b2 (t2tb30 x) y)
  (domain_restriction b2 (tuple2 (tuple2 a1 b1) a1) (t2tb29 s) p))
  (and (mem (tuple2 (tuple2 (tuple2 a1 b1) a1) b2)
  (Tuple2 (tuple2 (tuple2 a1 b1) a1) b2 (t2tb30 x) y) p) (mem16 x s))))))

;; mem_domain_restriction
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) a))) (s (set (tuple21 a b)))
  (x (tuple21 a b)) (y a))
  (= (mem16 (Tuple22 x y)
  (tb2t29 (domain_restriction a1 (tuple2 a1 b1) (t2tb11 s) (t2tb29 p))))
  (and (mem16 (Tuple22 x y) p) (mem3 x s)))))

;; mem_domain_restriction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (tuple21 a b))) (x (tuple21 a b)) (y uni))
  (= (mem (tuple2 (tuple2 a1 b1) b2) (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) y)
  (domain_restriction b2 (tuple2 a1 b1) (t2tb11 s) p))
  (and (mem (tuple2 (tuple2 a1 b1) b2)
  (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) y) p) (mem3 x s))))))

;; mem_domain_restriction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set b)) (x b) (y uni))
  (= (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) y)
  (domain_restriction b2 b1 (t2tb12 s) p))
  (and (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) y) p) (mem2 x s))))))

;; mem_domain_restriction
  (assert
  (forall ((p (set (tuple21 (set a) (set b)))) (s (set (set a))) (x (set a))
  (y (set b)))
  (= (mem (tuple2 (set1 a1) (set1 b1)) (t2tb495 (Tuple23 x y))
  (domain_restriction (set1 b1) (set1 a1) (t2tb s) (t2tb538 p)))
  (and (mem (tuple2 (set1 a1) (set1 b1)) (t2tb495 (Tuple23 x y)) (t2tb538 p))
  (mem (set1 a1) (t2tb1 x) (t2tb s))))))

;; mem_domain_restriction
  (assert
  (forall ((p (set (tuple21 a b))) (s (set a)) (x a) (y b))
  (= (mem3 (Tuple21 x y)
  (tb2t11 (domain_restriction b1 a1 (t2tb1 s) (t2tb11 p))))
  (and (mem3 (Tuple21 x y) p) (mem1 x s)))))

;; mem_domain_restriction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set a)) (x a) (y uni))
  (= (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) y)
  (domain_restriction b2 a1 (t2tb1 s) p))
  (and (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) y) p) (mem1 x s))))))

;; mem_domain_restriction
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((p uni) (s uni) (x uni) (y uni))
  (= (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) (domain_restriction b2 a2 s p))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) p) (mem a2 x s))))))

(declare-fun range_restriction (ty ty uni uni) uni)

;; range_restriction_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (tuple2 a2 b2))
  (range_restriction b2 a2 x x1)))))

;; mem_range_restriction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (set (tuple21 (tuple21 a b) a)))) (x uni)
  (y (set (tuple21 (tuple21 a b) a))))
  (= (mem (tuple2 a2 (set1 (tuple2 (tuple2 a1 b1) a1)))
  (Tuple2 a2 (set1 (tuple2 (tuple2 a1 b1) a1)) x (t2tb29 y))
  (range_restriction (set1 (tuple2 (tuple2 a1 b1) a1)) a2 p (t2tb52 t)))
  (and (mem (tuple2 a2 (set1 (tuple2 (tuple2 a1 b1) a1)))
  (Tuple2 a2 (set1 (tuple2 (tuple2 a1 b1) a1)) x (t2tb29 y)) p) (mem17 y t))))))

;; mem_range_restriction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (tuple21 (tuple21 a b) a))) (x uni)
  (y (tuple21 (tuple21 a b) a)))
  (= (mem (tuple2 a2 (tuple2 (tuple2 a1 b1) a1))
  (Tuple2 a2 (tuple2 (tuple2 a1 b1) a1) x (t2tb30 y))
  (range_restriction (tuple2 (tuple2 a1 b1) a1) a2 p (t2tb29 t)))
  (and (mem (tuple2 a2 (tuple2 (tuple2 a1 b1) a1))
  (Tuple2 a2 (tuple2 (tuple2 a1 b1) a1) x (t2tb30 y)) p) (mem16 y t))))))

;; mem_range_restriction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (tuple21 a b))) (x uni) (y (tuple21 a b)))
  (= (mem (tuple2 a2 (tuple2 a1 b1)) (Tuple2 a2 (tuple2 a1 b1) x (t2tb13 y))
  (range_restriction (tuple2 a1 b1) a2 p (t2tb11 t)))
  (and (mem (tuple2 a2 (tuple2 a1 b1))
  (Tuple2 a2 (tuple2 a1 b1) x (t2tb13 y)) p) (mem3 y t))))))

;; mem_range_restriction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set b)) (x uni) (y b))
  (= (mem (tuple2 a2 b1) (Tuple2 a2 b1 x (t2tb14 y))
  (range_restriction b1 a2 p (t2tb12 t)))
  (and (mem (tuple2 a2 b1) (Tuple2 a2 b1 x (t2tb14 y)) p) (mem2 y t))))))

;; mem_range_restriction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set a)) (x uni) (y a))
  (= (mem (tuple2 a2 a1) (Tuple2 a2 a1 x (t2tb2 y))
  (range_restriction a1 a2 p (t2tb1 t)))
  (and (mem (tuple2 a2 a1) (Tuple2 a2 a1 x (t2tb2 y)) p) (mem1 y t))))))

;; mem_range_restriction
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) a))) (t (set a)) (x (tuple21 a b))
  (y a))
  (= (mem16 (Tuple22 x y)
  (tb2t29 (range_restriction a1 (tuple2 a1 b1) (t2tb29 p) (t2tb1 t))))
  (and (mem16 (Tuple22 x y) p) (mem1 y t)))))

;; mem_range_restriction
  (assert
  (forall ((p (set (tuple21 (set a) (set b)))) (t (set (set b))) (x (set a))
  (y (set b)))
  (= (mem (tuple2 (set1 a1) (set1 b1)) (t2tb495 (Tuple23 x y))
  (range_restriction (set1 b1) (set1 a1) (t2tb538 p) (t2tb44 t)))
  (and (mem (tuple2 (set1 a1) (set1 b1)) (t2tb495 (Tuple23 x y)) (t2tb538 p))
  (mem (set1 b1) (t2tb12 y) (t2tb44 t))))))

;; mem_range_restriction
  (assert
  (forall ((p (set (tuple21 a b))) (t (set b)) (x a) (y b))
  (= (mem3 (Tuple21 x y)
  (tb2t11 (range_restriction b1 a1 (t2tb11 p) (t2tb12 t))))
  (and (mem3 (Tuple21 x y) p) (mem2 y t)))))

;; mem_range_restriction
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((p uni) (t uni) (x uni) (y uni))
  (= (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) (range_restriction b2 a2 p t))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) p) (mem b2 y t))))))

(declare-fun domain_substraction (ty ty uni uni) uni)

;; domain_substraction_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (tuple2 a2 b2))
  (domain_substraction b2 a2 x x1)))))

;; mem_domain_substraction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (set (tuple21 (tuple21 a b) a))))
  (x (set (tuple21 (tuple21 a b) a))) (y uni))
  (= (mem (tuple2 (set1 (tuple2 (tuple2 a1 b1) a1)) b2)
  (Tuple2 (set1 (tuple2 (tuple2 a1 b1) a1)) b2 (t2tb29 x) y)
  (domain_substraction b2 (set1 (tuple2 (tuple2 a1 b1) a1)) (t2tb52 s) p))
  (and (mem (tuple2 (set1 (tuple2 (tuple2 a1 b1) a1)) b2)
  (Tuple2 (set1 (tuple2 (tuple2 a1 b1) a1)) b2 (t2tb29 x) y) p)
  (not (mem17 x s)))))))

;; mem_domain_substraction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (tuple21 (tuple21 a b) a))) (x (tuple21 (tuple21 a
  b) a)) (y uni))
  (= (mem (tuple2 (tuple2 (tuple2 a1 b1) a1) b2)
  (Tuple2 (tuple2 (tuple2 a1 b1) a1) b2 (t2tb30 x) y)
  (domain_substraction b2 (tuple2 (tuple2 a1 b1) a1) (t2tb29 s) p))
  (and (mem (tuple2 (tuple2 (tuple2 a1 b1) a1) b2)
  (Tuple2 (tuple2 (tuple2 a1 b1) a1) b2 (t2tb30 x) y) p) (not (mem16 x s)))))))

;; mem_domain_substraction
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) a))) (s (set (tuple21 a b)))
  (x (tuple21 a b)) (y a))
  (= (mem16 (Tuple22 x y)
  (tb2t29 (domain_substraction a1 (tuple2 a1 b1) (t2tb11 s) (t2tb29 p))))
  (and (mem16 (Tuple22 x y) p) (not (mem3 x s))))))

;; mem_domain_substraction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (tuple21 a b))) (x (tuple21 a b)) (y uni))
  (= (mem (tuple2 (tuple2 a1 b1) b2) (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) y)
  (domain_substraction b2 (tuple2 a1 b1) (t2tb11 s) p))
  (and (mem (tuple2 (tuple2 a1 b1) b2)
  (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) y) p) (not (mem3 x s)))))))

;; mem_domain_substraction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set b)) (x b) (y uni))
  (= (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) y)
  (domain_substraction b2 b1 (t2tb12 s) p))
  (and (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) y) p) (not (mem2 x s)))))))

;; mem_domain_substraction
  (assert
  (forall ((p (set (tuple21 (set a) (set b)))) (s (set (set a))) (x (set a))
  (y (set b)))
  (= (mem (tuple2 (set1 a1) (set1 b1)) (t2tb495 (Tuple23 x y))
  (domain_substraction (set1 b1) (set1 a1) (t2tb s) (t2tb538 p)))
  (and (mem (tuple2 (set1 a1) (set1 b1)) (t2tb495 (Tuple23 x y)) (t2tb538 p))
  (not (mem (set1 a1) (t2tb1 x) (t2tb s)))))))

;; mem_domain_substraction
  (assert
  (forall ((p (set (tuple21 a b))) (s (set a)) (x a) (y b))
  (= (mem3 (Tuple21 x y)
  (tb2t11 (domain_substraction b1 a1 (t2tb1 s) (t2tb11 p))))
  (and (mem3 (Tuple21 x y) p) (not (mem1 x s))))))

;; mem_domain_substraction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set a)) (x a) (y uni))
  (= (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) y)
  (domain_substraction b2 a1 (t2tb1 s) p))
  (and (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) y) p) (not (mem1 x s)))))))

;; mem_domain_substraction
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((p uni) (s uni) (x uni) (y uni))
  (= (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) (domain_substraction b2 a2 s p))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) p) (not (mem a2 x s)))))))

(declare-fun range_substraction (ty ty uni uni) uni)

;; range_substraction_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (tuple2 a2 b2))
  (range_substraction b2 a2 x x1)))))

;; mem_range_substraction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (set (tuple21 (tuple21 a b) a)))) (x uni)
  (y (set (tuple21 (tuple21 a b) a))))
  (= (mem (tuple2 a2 (set1 (tuple2 (tuple2 a1 b1) a1)))
  (Tuple2 a2 (set1 (tuple2 (tuple2 a1 b1) a1)) x (t2tb29 y))
  (range_substraction (set1 (tuple2 (tuple2 a1 b1) a1)) a2 p (t2tb52 t)))
  (and (mem (tuple2 a2 (set1 (tuple2 (tuple2 a1 b1) a1)))
  (Tuple2 a2 (set1 (tuple2 (tuple2 a1 b1) a1)) x (t2tb29 y)) p)
  (not (mem17 y t)))))))

;; mem_range_substraction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (tuple21 (tuple21 a b) a))) (x uni)
  (y (tuple21 (tuple21 a b) a)))
  (= (mem (tuple2 a2 (tuple2 (tuple2 a1 b1) a1))
  (Tuple2 a2 (tuple2 (tuple2 a1 b1) a1) x (t2tb30 y))
  (range_substraction (tuple2 (tuple2 a1 b1) a1) a2 p (t2tb29 t)))
  (and (mem (tuple2 a2 (tuple2 (tuple2 a1 b1) a1))
  (Tuple2 a2 (tuple2 (tuple2 a1 b1) a1) x (t2tb30 y)) p) (not (mem16 y t)))))))

;; mem_range_substraction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (tuple21 a b))) (x uni) (y (tuple21 a b)))
  (= (mem (tuple2 a2 (tuple2 a1 b1)) (Tuple2 a2 (tuple2 a1 b1) x (t2tb13 y))
  (range_substraction (tuple2 a1 b1) a2 p (t2tb11 t)))
  (and (mem (tuple2 a2 (tuple2 a1 b1))
  (Tuple2 a2 (tuple2 a1 b1) x (t2tb13 y)) p) (not (mem3 y t)))))))

;; mem_range_substraction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set b)) (x uni) (y b))
  (= (mem (tuple2 a2 b1) (Tuple2 a2 b1 x (t2tb14 y))
  (range_substraction b1 a2 p (t2tb12 t)))
  (and (mem (tuple2 a2 b1) (Tuple2 a2 b1 x (t2tb14 y)) p) (not (mem2 y t)))))))

;; mem_range_substraction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set a)) (x uni) (y a))
  (= (mem (tuple2 a2 a1) (Tuple2 a2 a1 x (t2tb2 y))
  (range_substraction a1 a2 p (t2tb1 t)))
  (and (mem (tuple2 a2 a1) (Tuple2 a2 a1 x (t2tb2 y)) p) (not (mem1 y t)))))))

;; mem_range_substraction
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) a))) (t (set a)) (x (tuple21 a b))
  (y a))
  (= (mem16 (Tuple22 x y)
  (tb2t29 (range_substraction a1 (tuple2 a1 b1) (t2tb29 p) (t2tb1 t))))
  (and (mem16 (Tuple22 x y) p) (not (mem1 y t))))))

;; mem_range_substraction
  (assert
  (forall ((p (set (tuple21 (set a) (set b)))) (t (set (set b))) (x (set a))
  (y (set b)))
  (= (mem (tuple2 (set1 a1) (set1 b1)) (t2tb495 (Tuple23 x y))
  (range_substraction (set1 b1) (set1 a1) (t2tb538 p) (t2tb44 t)))
  (and (mem (tuple2 (set1 a1) (set1 b1)) (t2tb495 (Tuple23 x y)) (t2tb538 p))
  (not (mem (set1 b1) (t2tb12 y) (t2tb44 t)))))))

;; mem_range_substraction
  (assert
  (forall ((p (set (tuple21 a b))) (t (set b)) (x a) (y b))
  (= (mem3 (Tuple21 x y)
  (tb2t11 (range_substraction b1 a1 (t2tb11 p) (t2tb12 t))))
  (and (mem3 (Tuple21 x y) p) (not (mem2 y t))))))

;; mem_range_substraction
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((p uni) (t uni) (x uni) (y uni))
  (= (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) (range_substraction b2 a2 p t))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) p) (not (mem b2 y t)))))))

(declare-fun image (ty ty uni uni) uni)

;; image_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 b2) (image b2 a2 x x1)))))

;; mem_image
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (w uni) (x (set (tuple21 (tuple21 a b) a))))
  (and
  (=> (mem17 x (tb2t52 (image (set1 (tuple2 (tuple2 a1 b1) a1)) a2 p w)))
  (exists ((a3 uni))
  (and (sort a2 a3)
  (and (mem a2 a3 w) (mem (tuple2 a2 (set1 (tuple2 (tuple2 a1 b1) a1)))
  (Tuple2 a2 (set1 (tuple2 (tuple2 a1 b1) a1)) a3 (t2tb29 x)) p)))))
  (=>
  (exists ((a3 uni))
  (and (mem a2 a3 w) (mem (tuple2 a2 (set1 (tuple2 (tuple2 a1 b1) a1)))
  (Tuple2 a2 (set1 (tuple2 (tuple2 a1 b1) a1)) a3 (t2tb29 x)) p))) (mem17 x
  (tb2t52 (image (set1 (tuple2 (tuple2 a1 b1) a1)) a2 p w))))))))

;; mem_image
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (w uni) (x (tuple21 (tuple21 a b) a)))
  (and
  (=> (mem16 x (tb2t29 (image (tuple2 (tuple2 a1 b1) a1) a2 p w)))
  (exists ((a3 uni))
  (and (sort a2 a3)
  (and (mem a2 a3 w) (mem (tuple2 a2 (tuple2 (tuple2 a1 b1) a1))
  (Tuple2 a2 (tuple2 (tuple2 a1 b1) a1) a3 (t2tb30 x)) p)))))
  (=>
  (exists ((a3 uni))
  (and (mem a2 a3 w) (mem (tuple2 a2 (tuple2 (tuple2 a1 b1) a1))
  (Tuple2 a2 (tuple2 (tuple2 a1 b1) a1) a3 (t2tb30 x)) p))) (mem16 x
  (tb2t29 (image (tuple2 (tuple2 a1 b1) a1) a2 p w))))))))

;; mem_image
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (w uni) (x (tuple21 a b)))
  (and
  (=> (mem3 x (tb2t11 (image (tuple2 a1 b1) a2 p w)))
  (exists ((a3 uni))
  (and (sort a2 a3)
  (and (mem a2 a3 w) (mem (tuple2 a2 (tuple2 a1 b1))
  (Tuple2 a2 (tuple2 a1 b1) a3 (t2tb13 x)) p)))))
  (=>
  (exists ((a3 uni))
  (and (mem a2 a3 w) (mem (tuple2 a2 (tuple2 a1 b1))
  (Tuple2 a2 (tuple2 a1 b1) a3 (t2tb13 x)) p))) (mem3 x
  (tb2t11 (image (tuple2 a1 b1) a2 p w))))))))

;; mem_image
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (w uni) (x b))
  (and
  (=> (mem2 x (tb2t12 (image b1 a2 p w)))
  (exists ((a3 uni))
  (and (sort a2 a3)
  (and (mem a2 a3 w) (mem (tuple2 a2 b1) (Tuple2 a2 b1 a3 (t2tb14 x)) p)))))
  (=>
  (exists ((a3 uni))
  (and (mem a2 a3 w) (mem (tuple2 a2 b1) (Tuple2 a2 b1 a3 (t2tb14 x)) p)))
  (mem2 x (tb2t12 (image b1 a2 p w))))))))

;; mem_image
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (w uni) (x a))
  (and
  (=> (mem1 x (tb2t1 (image a1 a2 p w)))
  (exists ((a3 uni))
  (and (sort a2 a3)
  (and (mem a2 a3 w) (mem (tuple2 a2 a1) (Tuple2 a2 a1 a3 (t2tb2 x)) p)))))
  (=>
  (exists ((a3 uni))
  (and (mem a2 a3 w) (mem (tuple2 a2 a1) (Tuple2 a2 a1 a3 (t2tb2 x)) p)))
  (mem1 x (tb2t1 (image a1 a2 p w))))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 (tuple21 a b) a))
  (set (tuple21 (tuple21 a b) a))))) (w (set (set (tuple21 (tuple21 a b)
  a)))) (x (set (tuple21 (tuple21 a b) a))))
  (= (mem17 x
  (tb2t52
  (image (set1 (tuple2 (tuple2 a1 b1) a1)) (set1 (tuple2 (tuple2 a1 b1) a1))
  (t2tb510 p) (t2tb52 w))))
  (exists ((a2 (set (tuple21 (tuple21 a b) a))))
  (and (mem17 a2 w) (mem
  (tuple2 (set1 (tuple2 (tuple2 a1 b1) a1))
  (set1 (tuple2 (tuple2 a1 b1) a1)))
  (Tuple2 (set1 (tuple2 (tuple2 a1 b1) a1)) (set1 (tuple2 (tuple2 a1 b1) a1))
  (t2tb29 a2) (t2tb29 x)) (t2tb510 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 (tuple21 a b) a))
  (tuple21 (tuple21 a b) a)))) (w (set (set (tuple21 (tuple21 a b) a))))
  (x (tuple21 (tuple21 a b) a)))
  (= (mem16 x
  (tb2t29
  (image (tuple2 (tuple2 a1 b1) a1) (set1 (tuple2 (tuple2 a1 b1) a1))
  (t2tb512 p) (t2tb52 w))))
  (exists ((a2 (set (tuple21 (tuple21 a b) a))))
  (and (mem17 a2 w) (mem
  (tuple2 (set1 (tuple2 (tuple2 a1 b1) a1)) (tuple2 (tuple2 a1 b1) a1))
  (Tuple2 (set1 (tuple2 (tuple2 a1 b1) a1)) (tuple2 (tuple2 a1 b1) a1)
  (t2tb29 a2) (t2tb30 x)) (t2tb512 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 (tuple21 a b) a)) (tuple21 a b))))
  (w (set (set (tuple21 (tuple21 a b) a)))) (x (tuple21 a b)))
  (= (mem3 x
  (tb2t11
  (image (tuple2 a1 b1) (set1 (tuple2 (tuple2 a1 b1) a1)) (t2tb514 p)
  (t2tb52 w))))
  (exists ((a2 (set (tuple21 (tuple21 a b) a))))
  (and (mem17 a2 w) (mem
  (tuple2 (set1 (tuple2 (tuple2 a1 b1) a1)) (tuple2 a1 b1))
  (Tuple2 (set1 (tuple2 (tuple2 a1 b1) a1)) (tuple2 a1 b1) (t2tb29 a2)
  (t2tb13 x)) (t2tb514 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 (tuple21 a b) a)) b)))
  (w (set (set (tuple21 (tuple21 a b) a)))) (x b))
  (= (mem2 x
  (tb2t12
  (image b1 (set1 (tuple2 (tuple2 a1 b1) a1)) (t2tb516 p) (t2tb52 w))))
  (exists ((a2 (set (tuple21 (tuple21 a b) a))))
  (and (mem17 a2 w) (mem (tuple2 (set1 (tuple2 (tuple2 a1 b1) a1)) b1)
  (Tuple2 (set1 (tuple2 (tuple2 a1 b1) a1)) b1 (t2tb29 a2) (t2tb14 x))
  (t2tb516 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 (tuple21 a b) a)) a)))
  (w (set (set (tuple21 (tuple21 a b) a)))) (x a))
  (= (mem1 x
  (tb2t1 (image a1 (set1 (tuple2 (tuple2 a1 b1) a1)) (t2tb518 p) (t2tb52 w))))
  (exists ((a2 (set (tuple21 (tuple21 a b) a))))
  (and (mem17 a2 w) (mem (tuple2 (set1 (tuple2 (tuple2 a1 b1) a1)) a1)
  (Tuple2 (set1 (tuple2 (tuple2 a1 b1) a1)) a1 (t2tb29 a2) (t2tb2 x))
  (t2tb518 p)))))))

;; mem_image
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (w (set (set (tuple21 (tuple21 a b) a)))) (x uni))
  (= (mem b2 x (image b2 (set1 (tuple2 (tuple2 a1 b1) a1)) p (t2tb52 w)))
  (exists ((a2 (set (tuple21 (tuple21 a b) a))))
  (and (mem17 a2 w) (mem (tuple2 (set1 (tuple2 (tuple2 a1 b1) a1)) b2)
  (Tuple2 (set1 (tuple2 (tuple2 a1 b1) a1)) b2 (t2tb29 a2) x) p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 (tuple21 a b) a)
  (set (tuple21 (tuple21 a b) a))))) (w (set (tuple21 (tuple21 a b) a)))
  (x (set (tuple21 (tuple21 a b) a))))
  (= (mem17 x
  (tb2t52
  (image (set1 (tuple2 (tuple2 a1 b1) a1)) (tuple2 (tuple2 a1 b1) a1)
  (t2tb520 p) (t2tb29 w))))
  (exists ((a2 (tuple21 (tuple21 a b) a)))
  (and (mem16 a2 w) (mem
  (tuple2 (tuple2 (tuple2 a1 b1) a1) (set1 (tuple2 (tuple2 a1 b1) a1)))
  (Tuple2 (tuple2 (tuple2 a1 b1) a1) (set1 (tuple2 (tuple2 a1 b1) a1))
  (t2tb30 a2) (t2tb29 x)) (t2tb520 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 (tuple21 a b) a) (tuple21 (tuple21 a b)
  a)))) (w (set (tuple21 (tuple21 a b) a))) (x (tuple21 (tuple21 a b) a)))
  (= (mem16 x
  (tb2t29
  (image (tuple2 (tuple2 a1 b1) a1) (tuple2 (tuple2 a1 b1) a1) (t2tb522 p)
  (t2tb29 w))))
  (exists ((a2 (tuple21 (tuple21 a b) a)))
  (and (mem16 a2 w) (mem
  (tuple2 (tuple2 (tuple2 a1 b1) a1) (tuple2 (tuple2 a1 b1) a1))
  (Tuple2 (tuple2 (tuple2 a1 b1) a1) (tuple2 (tuple2 a1 b1) a1) (t2tb30 a2)
  (t2tb30 x)) (t2tb522 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 (tuple21 a b) a) (tuple21 a b))))
  (w (set (tuple21 (tuple21 a b) a))) (x (tuple21 a b)))
  (= (mem3 x
  (tb2t11
  (image (tuple2 a1 b1) (tuple2 (tuple2 a1 b1) a1) (t2tb524 p) (t2tb29 w))))
  (exists ((a2 (tuple21 (tuple21 a b) a)))
  (and (mem16 a2 w) (mem (tuple2 (tuple2 (tuple2 a1 b1) a1) (tuple2 a1 b1))
  (Tuple2 (tuple2 (tuple2 a1 b1) a1) (tuple2 a1 b1) (t2tb30 a2) (t2tb13 x))
  (t2tb524 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 (tuple21 a b) a) b)))
  (w (set (tuple21 (tuple21 a b) a))) (x b))
  (= (mem2 x
  (tb2t12 (image b1 (tuple2 (tuple2 a1 b1) a1) (t2tb526 p) (t2tb29 w))))
  (exists ((a2 (tuple21 (tuple21 a b) a)))
  (and (mem16 a2 w) (mem (tuple2 (tuple2 (tuple2 a1 b1) a1) b1)
  (Tuple2 (tuple2 (tuple2 a1 b1) a1) b1 (t2tb30 a2) (t2tb14 x)) (t2tb526 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 (tuple21 a b) a) a)))
  (w (set (tuple21 (tuple21 a b) a))) (x a))
  (= (mem1 x
  (tb2t1 (image a1 (tuple2 (tuple2 a1 b1) a1) (t2tb528 p) (t2tb29 w))))
  (exists ((a2 (tuple21 (tuple21 a b) a)))
  (and (mem16 a2 w) (mem (tuple2 (tuple2 (tuple2 a1 b1) a1) a1)
  (Tuple2 (tuple2 (tuple2 a1 b1) a1) a1 (t2tb30 a2) (t2tb2 x)) (t2tb528 p)))))))

;; mem_image
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (w (set (tuple21 (tuple21 a b) a))) (x uni))
  (= (mem b2 x (image b2 (tuple2 (tuple2 a1 b1) a1) p (t2tb29 w)))
  (exists ((a2 (tuple21 (tuple21 a b) a)))
  (and (mem16 a2 w) (mem (tuple2 (tuple2 (tuple2 a1 b1) a1) b2)
  (Tuple2 (tuple2 (tuple2 a1 b1) a1) b2 (t2tb30 a2) x) p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) (set (tuple21 (tuple21 a b) a)))))
  (w (set (tuple21 a b))) (x (set (tuple21 (tuple21 a b) a))))
  (= (mem17 x
  (tb2t52
  (image (set1 (tuple2 (tuple2 a1 b1) a1)) (tuple2 a1 b1) (t2tb530 p)
  (t2tb11 w))))
  (exists ((a2 (tuple21 a b)))
  (and (mem3 a2 w) (mem
  (tuple2 (tuple2 a1 b1) (set1 (tuple2 (tuple2 a1 b1) a1)))
  (Tuple2 (tuple2 a1 b1) (set1 (tuple2 (tuple2 a1 b1) a1)) (t2tb13 a2)
  (t2tb29 x)) (t2tb530 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) (tuple21 (tuple21 a b) a))))
  (w (set (tuple21 a b))) (x (tuple21 (tuple21 a b) a)))
  (= (mem16 x
  (tb2t29
  (image (tuple2 (tuple2 a1 b1) a1) (tuple2 a1 b1) (t2tb532 p) (t2tb11 w))))
  (exists ((a2 (tuple21 a b)))
  (and (mem3 a2 w) (mem (tuple2 (tuple2 a1 b1) (tuple2 (tuple2 a1 b1) a1))
  (Tuple2 (tuple2 a1 b1) (tuple2 (tuple2 a1 b1) a1) (t2tb13 a2) (t2tb30 x))
  (t2tb532 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) (tuple21 a b)))) (w (set (tuple21 a
  b))) (x (tuple21 a b)))
  (= (mem3 x
  (tb2t11 (image (tuple2 a1 b1) (tuple2 a1 b1) (t2tb25 p) (t2tb11 w))))
  (exists ((a2 (tuple21 a b)))
  (and (mem3 a2 w) (mem (tuple2 (tuple2 a1 b1) (tuple2 a1 b1))
  (Tuple2 (tuple2 a1 b1) (tuple2 a1 b1) (t2tb13 a2) (t2tb13 x)) (t2tb25 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) b))) (w (set (tuple21 a b))) (x b))
  (= (mem2 x (tb2t12 (image b1 (tuple2 a1 b1) (t2tb27 p) (t2tb11 w))))
  (exists ((a2 (tuple21 a b)))
  (and (mem3 a2 w) (mem (tuple2 (tuple2 a1 b1) b1)
  (Tuple2 (tuple2 a1 b1) b1 (t2tb13 a2) (t2tb14 x)) (t2tb27 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) a))) (w (set (tuple21 a b))) (x a))
  (= (mem1 x (tb2t1 (image a1 (tuple2 a1 b1) (t2tb29 p) (t2tb11 w))))
  (exists ((a2 (tuple21 a b))) (and (mem3 a2 w) (mem16 (Tuple22 a2 x) p))))))

;; mem_image
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (w (set (tuple21 a b))) (x uni))
  (= (mem b2 x (image b2 (tuple2 a1 b1) p (t2tb11 w)))
  (exists ((a2 (tuple21 a b)))
  (and (mem3 a2 w) (mem (tuple2 (tuple2 a1 b1) b2)
  (Tuple2 (tuple2 a1 b1) b2 (t2tb13 a2) x) p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 b (set (tuple21 (tuple21 a b) a))))) (w (set b))
  (x (set (tuple21 (tuple21 a b) a))))
  (= (mem17 x
  (tb2t52
  (image (set1 (tuple2 (tuple2 a1 b1) a1)) b1 (t2tb534 p) (t2tb12 w))))
  (exists ((a2 b))
  (and (mem2 a2 w) (mem (tuple2 b1 (set1 (tuple2 (tuple2 a1 b1) a1)))
  (Tuple2 b1 (set1 (tuple2 (tuple2 a1 b1) a1)) (t2tb14 a2) (t2tb29 x))
  (t2tb534 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 b (tuple21 (tuple21 a b) a)))) (w (set b))
  (x (tuple21 (tuple21 a b) a)))
  (= (mem16 x
  (tb2t29 (image (tuple2 (tuple2 a1 b1) a1) b1 (t2tb536 p) (t2tb12 w))))
  (exists ((a2 b))
  (and (mem2 a2 w) (mem (tuple2 b1 (tuple2 (tuple2 a1 b1) a1))
  (Tuple2 b1 (tuple2 (tuple2 a1 b1) a1) (t2tb14 a2) (t2tb30 x)) (t2tb536 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 b (tuple21 a b)))) (w (set b)) (x (tuple21 a b)))
  (= (mem3 x (tb2t11 (image (tuple2 a1 b1) b1 (t2tb34 p) (t2tb12 w))))
  (exists ((a2 b))
  (and (mem2 a2 w) (mem (tuple2 b1 (tuple2 a1 b1))
  (Tuple2 b1 (tuple2 a1 b1) (t2tb14 a2) (t2tb13 x)) (t2tb34 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 b b))) (w (set b)) (x b))
  (= (mem2 x (tb2t12 (image b1 b1 (t2tb35 p) (t2tb12 w))))
  (exists ((a2 b))
  (and (mem2 a2 w) (mem (tuple2 b1 b1) (Tuple2 b1 b1 (t2tb14 a2) (t2tb14 x))
  (t2tb35 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 b a))) (w (set b)) (x a))
  (= (mem1 x (tb2t1 (image a1 b1 (t2tb37 p) (t2tb12 w))))
  (exists ((a2 b))
  (and (mem2 a2 w) (mem (tuple2 b1 a1) (Tuple2 b1 a1 (t2tb14 a2) (t2tb2 x))
  (t2tb37 p)))))))

;; mem_image
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (w (set b)) (x uni))
  (= (mem b2 x (image b2 b1 p (t2tb12 w)))
  (exists ((a2 b))
  (and (mem2 a2 w) (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 a2) x) p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set a) (set b)))) (w (set (set a))) (x (set b)))
  (= (mem (set1 b1) (t2tb12 x)
  (image (set1 b1) (set1 a1) (t2tb538 p) (t2tb w)))
  (exists ((a2 (set a)))
  (and (mem (set1 a1) (t2tb1 a2) (t2tb w)) (mem (tuple2 (set1 a1) (set1 b1))
  (t2tb495 (Tuple23 a2 x)) (t2tb538 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 a (set (tuple21 (tuple21 a b) a))))) (w (set a))
  (x (set (tuple21 (tuple21 a b) a))))
  (= (mem17 x
  (tb2t52 (image (set1 (tuple2 (tuple2 a1 b1) a1)) a1 (t2tb540 p) (t2tb1 w))))
  (exists ((a2 a))
  (and (mem1 a2 w) (mem (tuple2 a1 (set1 (tuple2 (tuple2 a1 b1) a1)))
  (Tuple2 a1 (set1 (tuple2 (tuple2 a1 b1) a1)) (t2tb2 a2) (t2tb29 x))
  (t2tb540 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 a (tuple21 (tuple21 a b) a)))) (w (set a))
  (x (tuple21 (tuple21 a b) a)))
  (= (mem16 x
  (tb2t29 (image (tuple2 (tuple2 a1 b1) a1) a1 (t2tb541 p) (t2tb1 w))))
  (exists ((a2 a))
  (and (mem1 a2 w) (mem (tuple2 a1 (tuple2 (tuple2 a1 b1) a1))
  (Tuple2 a1 (tuple2 (tuple2 a1 b1) a1) (t2tb2 a2) (t2tb30 x)) (t2tb541 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 a (tuple21 a b)))) (w (set a)) (x (tuple21 a b)))
  (= (mem3 x (tb2t11 (image (tuple2 a1 b1) a1 (t2tb41 p) (t2tb1 w))))
  (exists ((a2 a))
  (and (mem1 a2 w) (mem (tuple2 a1 (tuple2 a1 b1))
  (Tuple2 a1 (tuple2 a1 b1) (t2tb2 a2) (t2tb13 x)) (t2tb41 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 a b))) (w (set a)) (x b))
  (= (mem2 x (tb2t12 (image b1 a1 (t2tb11 p) (t2tb1 w))))
  (exists ((a2 a)) (and (mem1 a2 w) (mem3 (Tuple21 a2 x) p))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 a a))) (w (set a)) (x a))
  (= (mem1 x (tb2t1 (image a1 a1 (t2tb4 p) (t2tb1 w))))
  (exists ((a2 a))
  (and (mem1 a2 w) (mem (tuple2 a1 a1) (Tuple2 a1 a1 (t2tb2 a2) (t2tb2 x))
  (t2tb4 p)))))))

;; mem_image
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (w (set a)) (x uni))
  (= (mem b2 x (image b2 a1 p (t2tb1 w)))
  (exists ((a2 a))
  (and (mem1 a2 w) (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 a2) x) p)))))))

;; mem_image
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((p uni) (w uni) (x uni))
  (and
  (=> (mem b2 x (image b2 a2 p w))
  (exists ((a3 uni))
  (and (sort a2 a3)
  (and (mem a2 a3 w) (mem (tuple2 a2 b2) (Tuple2 a2 b2 a3 x) p)))))
  (=>
  (exists ((a3 uni))
  (and (mem a2 a3 w) (mem (tuple2 a2 b2) (Tuple2 a2 b2 a3 x) p))) (mem b2 x
  (image b2 a2 p w)))))))

(declare-fun infix_lspl (ty ty uni uni) uni)

;; infix <+_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (tuple2 a2 b2))
  (infix_lspl b2 a2 x x1)))))

;; mem_overriding
  (assert
  (forall ((b2 ty))
  (forall ((q uni) (p uni) (x (set (tuple21 (tuple21 a b) a))) (y uni))
  (= (mem (tuple2 (set1 (tuple2 (tuple2 a1 b1) a1)) b2)
  (Tuple2 (set1 (tuple2 (tuple2 a1 b1) a1)) b2 (t2tb29 x) y)
  (infix_lspl b2 (set1 (tuple2 (tuple2 a1 b1) a1)) q p))
  (or
  (and (mem (tuple2 (set1 (tuple2 (tuple2 a1 b1) a1)) b2)
  (Tuple2 (set1 (tuple2 (tuple2 a1 b1) a1)) b2 (t2tb29 x) y) q)
  (not (mem17 x (tb2t52 (dom b2 (set1 (tuple2 (tuple2 a1 b1) a1)) p))))) (mem
  (tuple2 (set1 (tuple2 (tuple2 a1 b1) a1)) b2)
  (Tuple2 (set1 (tuple2 (tuple2 a1 b1) a1)) b2 (t2tb29 x) y) p))))))

;; mem_overriding
  (assert
  (forall ((b2 ty))
  (forall ((q uni) (p uni) (x (tuple21 (tuple21 a b) a)) (y uni))
  (= (mem (tuple2 (tuple2 (tuple2 a1 b1) a1) b2)
  (Tuple2 (tuple2 (tuple2 a1 b1) a1) b2 (t2tb30 x) y)
  (infix_lspl b2 (tuple2 (tuple2 a1 b1) a1) q p))
  (or
  (and (mem (tuple2 (tuple2 (tuple2 a1 b1) a1) b2)
  (Tuple2 (tuple2 (tuple2 a1 b1) a1) b2 (t2tb30 x) y) q)
  (not (mem16 x (tb2t29 (dom b2 (tuple2 (tuple2 a1 b1) a1) p))))) (mem
  (tuple2 (tuple2 (tuple2 a1 b1) a1) b2)
  (Tuple2 (tuple2 (tuple2 a1 b1) a1) b2 (t2tb30 x) y) p))))))

;; mem_overriding
  (assert
  (forall ((q (set (tuple21 (tuple21 a b) a))) (p (set (tuple21 (tuple21 a b)
  a))) (x (tuple21 a b)) (y a))
  (= (mem16 (Tuple22 x y)
  (tb2t29 (infix_lspl a1 (tuple2 a1 b1) (t2tb29 q) (t2tb29 p))))
  (or
  (and (mem16 (Tuple22 x y) q)
  (not (mem3 x (tb2t11 (dom a1 (tuple2 a1 b1) (t2tb29 p)))))) (mem16
  (Tuple22 x y) p)))))

;; mem_overriding
  (assert
  (forall ((b2 ty))
  (forall ((q uni) (p uni) (x (tuple21 a b)) (y uni))
  (= (mem (tuple2 (tuple2 a1 b1) b2) (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) y)
  (infix_lspl b2 (tuple2 a1 b1) q p))
  (or
  (and (mem (tuple2 (tuple2 a1 b1) b2)
  (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) y) q)
  (not (mem3 x (tb2t11 (dom b2 (tuple2 a1 b1) p))))) (mem
  (tuple2 (tuple2 a1 b1) b2) (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) y) p))))))

;; mem_overriding
  (assert
  (forall ((b2 ty))
  (forall ((q uni) (p uni) (x b) (y uni))
  (= (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) y) (infix_lspl b2 b1 q p))
  (or
  (and (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) y) q)
  (not (mem2 x (tb2t12 (dom b2 b1 p))))) (mem (tuple2 b1 b2)
  (Tuple2 b1 b2 (t2tb14 x) y) p))))))

;; mem_overriding
  (assert
  (forall ((q (set (tuple21 (set a) (set b)))) (p (set (tuple21 (set a)
  (set b)))) (x (set a)) (y (set b)))
  (= (mem (tuple2 (set1 a1) (set1 b1)) (t2tb495 (Tuple23 x y))
  (infix_lspl (set1 b1) (set1 a1) (t2tb538 q) (t2tb538 p)))
  (or
  (and (mem (tuple2 (set1 a1) (set1 b1)) (t2tb495 (Tuple23 x y)) (t2tb538 q))
  (not (mem (set1 a1) (t2tb1 x) (dom (set1 b1) (set1 a1) (t2tb538 p))))) (mem
  (tuple2 (set1 a1) (set1 b1)) (t2tb495 (Tuple23 x y)) (t2tb538 p))))))

;; mem_overriding
  (assert
  (forall ((q (set (tuple21 a b))) (p (set (tuple21 a b))) (x a) (y b))
  (= (mem3 (Tuple21 x y) (tb2t11 (infix_lspl b1 a1 (t2tb11 q) (t2tb11 p))))
  (or
  (and (mem3 (Tuple21 x y) q) (not (mem1 x (tb2t1 (dom b1 a1 (t2tb11 p))))))
  (mem3 (Tuple21 x y) p)))))

;; mem_overriding
  (assert
  (forall ((b2 ty))
  (forall ((q uni) (p uni) (x a) (y uni))
  (= (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) y) (infix_lspl b2 a1 q p))
  (or
  (and (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) y) q)
  (not (mem1 x (tb2t1 (dom b2 a1 p))))) (mem (tuple2 a1 b2)
  (Tuple2 a1 b2 (t2tb2 x) y) p))))))

;; mem_overriding
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((q uni) (p uni) (x uni) (y uni))
  (= (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) (infix_lspl b2 a2 q p))
  (or
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) q)
  (not (mem a2 x (dom b2 a2 p)))) (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) p))))))

(declare-fun direct_product (ty ty ty uni uni) uni)

;; direct_product_sort
  (assert
  (forall ((a2 ty) (b2 ty) (c2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (tuple2 a2 (tuple2 b2 c2)))
  (direct_product c2 b2 a2 x x1)))))

;; mem_direct_product
  (assert
  (forall ((a2 ty))
  (forall ((f uni) (g uni) (x uni) (y (tuple21 a b)) (z a))
  (= (mem (tuple2 a2 (tuple2 (tuple2 a1 b1) a1))
  (Tuple2 a2 (tuple2 (tuple2 a1 b1) a1) x (t2tb30 (Tuple22 y z)))
  (direct_product a1 (tuple2 a1 b1) a2 f g))
  (and (mem (tuple2 a2 (tuple2 a1 b1))
  (Tuple2 a2 (tuple2 a1 b1) x (t2tb13 y)) f) (mem (tuple2 a2 a1)
  (Tuple2 a2 a1 x (t2tb2 z)) g))))))

;; mem_direct_product
  (assert
  (forall ((a2 ty))
  (forall ((f uni) (g uni) (x uni) (y (set a)) (z (set b)))
  (= (mem (tuple2 a2 (tuple2 (set1 a1) (set1 b1)))
  (Tuple2 a2 (tuple2 (set1 a1) (set1 b1)) x (t2tb495 (Tuple23 y z)))
  (direct_product (set1 b1) (set1 a1) a2 f g))
  (and (mem (tuple2 a2 (set1 a1)) (Tuple2 a2 (set1 a1) x (t2tb1 y)) f) (mem
  (tuple2 a2 (set1 b1)) (Tuple2 a2 (set1 b1) x (t2tb12 z)) g))))))

;; mem_direct_product
  (assert
  (forall ((a2 ty))
  (forall ((f uni) (g uni) (x uni) (y a) (z b))
  (= (mem (tuple2 a2 (tuple2 a1 b1))
  (Tuple2 a2 (tuple2 a1 b1) x (t2tb13 (Tuple21 y z)))
  (direct_product b1 a1 a2 f g))
  (and (mem (tuple2 a2 a1) (Tuple2 a2 a1 x (t2tb2 y)) f) (mem (tuple2 a2 b1)
  (Tuple2 a2 b1 x (t2tb14 z)) g))))))

;; mem_direct_product
  (assert
  (forall ((b2 ty))
  (forall ((f uni) (g (set (tuple21 (tuple21 a b) a))) (x (tuple21 a b))
  (y uni) (z a))
  (= (mem (tuple2 (tuple2 a1 b1) (tuple2 b2 a1))
  (Tuple2 (tuple2 a1 b1) (tuple2 b2 a1) (t2tb13 x)
  (Tuple2 b2 a1 y (t2tb2 z)))
  (direct_product a1 b2 (tuple2 a1 b1) f (t2tb29 g)))
  (and (mem (tuple2 (tuple2 a1 b1) b2)
  (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) y) f) (mem16 (Tuple22 x z) g))))))

;; mem_direct_product
  (assert
  (forall ((f (set (tuple21 (tuple21 a b) (tuple21 a b))))
  (g (set (tuple21 (tuple21 a b) a))) (x (tuple21 a b)) (y (tuple21 a b))
  (z a))
  (= (mem (tuple2 (tuple2 a1 b1) (tuple2 (tuple2 a1 b1) a1))
  (Tuple2 (tuple2 a1 b1) (tuple2 (tuple2 a1 b1) a1) (t2tb13 x)
  (t2tb30 (Tuple22 y z)))
  (direct_product a1 (tuple2 a1 b1) (tuple2 a1 b1) (t2tb25 f) (t2tb29 g)))
  (and (mem (tuple2 (tuple2 a1 b1) (tuple2 a1 b1))
  (Tuple2 (tuple2 a1 b1) (tuple2 a1 b1) (t2tb13 x) (t2tb13 y)) (t2tb25 f))
  (mem16 (Tuple22 x z) g)))))

;; mem_direct_product
  (assert
  (forall ((f (set (tuple21 (tuple21 a b) a))) (g (set (tuple21 (tuple21 a b)
  b))) (x (tuple21 a b)) (y a) (z b))
  (= (mem (tuple2 (tuple2 a1 b1) (tuple2 a1 b1))
  (Tuple2 (tuple2 a1 b1) (tuple2 a1 b1) (t2tb13 x) (t2tb13 (Tuple21 y z)))
  (direct_product b1 a1 (tuple2 a1 b1) (t2tb29 f) (t2tb27 g)))
  (and (mem16 (Tuple22 x y) f) (mem (tuple2 (tuple2 a1 b1) b1)
  (Tuple2 (tuple2 a1 b1) b1 (t2tb13 x) (t2tb14 z)) (t2tb27 g))))))

(declare-fun t2tb567 ((set (tuple21 (tuple21 a b) (tuple21 a a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) (tuple21 a a))))) (sort
  (set1 (tuple2 (tuple2 a1 b1) (tuple2 a1 a1))) (t2tb567 x))))

(declare-fun tb2t567 (uni) (set (tuple21 (tuple21 a b) (tuple21 a a))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a b) (tuple21 a a)))))
  (! (= (tb2t567 (t2tb567 i)) i) :pattern ((t2tb567 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 b1) (tuple2 a1 a1))) j)
     (= (t2tb567 (tb2t567 j)) j)) :pattern ((t2tb567 (tb2t567 j))) )))

(declare-fun t2tb568 ((tuple21 (tuple21 a b) (tuple21 a a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a b) (tuple21 a a)))) (sort
  (tuple2 (tuple2 a1 b1) (tuple2 a1 a1)) (t2tb568 x))))

(declare-fun tb2t568 (uni) (tuple21 (tuple21 a b) (tuple21 a a)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a b) (tuple21 a a))))
  (! (= (tb2t568 (t2tb568 i)) i) :pattern ((t2tb568 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 b1) (tuple2 a1 a1)) j)
     (= (t2tb568 (tb2t568 j)) j)) :pattern ((t2tb568 (tb2t568 j))) )))

;; mem_direct_product
  (assert
  (forall ((f (set (tuple21 (tuple21 a b) a))) (g (set (tuple21 (tuple21 a b)
  a))) (x (tuple21 a b)) (y a) (z a))
  (= (mem (tuple2 (tuple2 a1 b1) (tuple2 a1 a1))
  (Tuple2 (tuple2 a1 b1) (tuple2 a1 a1) (t2tb13 x)
  (Tuple2 a1 a1 (t2tb2 y) (t2tb2 z)))
  (direct_product a1 a1 (tuple2 a1 b1) (t2tb29 f) (t2tb29 g)))
  (and (mem16 (Tuple22 x y) f) (mem16 (Tuple22 x z) g)))))

;; mem_direct_product
  (assert
  (forall ((c2 ty))
  (forall ((f (set (tuple21 (tuple21 a b) a))) (g uni) (x (tuple21 a b))
  (y a) (z uni))
  (= (mem (tuple2 (tuple2 a1 b1) (tuple2 a1 c2))
  (Tuple2 (tuple2 a1 b1) (tuple2 a1 c2) (t2tb13 x)
  (Tuple2 a1 c2 (t2tb2 y) z))
  (direct_product c2 a1 (tuple2 a1 b1) (t2tb29 f) g))
  (and (mem16 (Tuple22 x y) f) (mem (tuple2 (tuple2 a1 b1) c2)
  (Tuple2 (tuple2 a1 b1) c2 (t2tb13 x) z) g))))))

;; mem_direct_product
  (assert
  (forall ((b2 ty))
  (forall ((f uni) (g (set (tuple21 (set a) (set b)))) (x (set a)) (y uni)
  (z (set b)))
  (= (mem (tuple2 (set1 a1) (tuple2 b2 (set1 b1)))
  (Tuple2 (set1 a1) (tuple2 b2 (set1 b1)) (t2tb1 x)
  (Tuple2 b2 (set1 b1) y (t2tb12 z)))
  (direct_product (set1 b1) b2 (set1 a1) f (t2tb538 g)))
  (and (mem (tuple2 (set1 a1) b2) (Tuple2 (set1 a1) b2 (t2tb1 x) y) f) (mem
  (tuple2 (set1 a1) (set1 b1)) (t2tb495 (Tuple23 x z)) (t2tb538 g)))))))

(declare-fun t2tb569 ((set (tuple21 (set a) (tuple21 (set b) (set b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set a) (tuple21 (set b) (set b)))))) (sort
  (set1 (tuple2 (set1 a1) (tuple2 (set1 b1) (set1 b1)))) (t2tb569 x))))

(declare-fun tb2t569 (uni) (set (tuple21 (set a) (tuple21 (set b) (set b)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set a) (tuple21 (set b) (set b))))))
  (! (= (tb2t569 (t2tb569 i)) i) :pattern ((t2tb569 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 a1) (tuple2 (set1 b1) (set1 b1)))) j)
     (= (t2tb569 (tb2t569 j)) j)) :pattern ((t2tb569 (tb2t569 j))) )))

(declare-fun t2tb570 ((tuple21 (set a) (tuple21 (set b) (set b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set a) (tuple21 (set b) (set b))))) (sort
  (tuple2 (set1 a1) (tuple2 (set1 b1) (set1 b1))) (t2tb570 x))))

(declare-fun tb2t570 (uni) (tuple21 (set a) (tuple21 (set b) (set b))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set a) (tuple21 (set b) (set b)))))
  (! (= (tb2t570 (t2tb570 i)) i) :pattern ((t2tb570 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 a1) (tuple2 (set1 b1) (set1 b1))) j)
     (= (t2tb570 (tb2t570 j)) j)) :pattern ((t2tb570 (tb2t570 j))) )))

;; mem_direct_product
  (assert
  (forall ((f (set (tuple21 (set a) (set b)))) (g (set (tuple21 (set a)
  (set b)))) (x (set a)) (y (set b)) (z (set b)))
  (= (mem (tuple2 (set1 a1) (tuple2 (set1 b1) (set1 b1)))
  (Tuple2 (set1 a1) (tuple2 (set1 b1) (set1 b1)) (t2tb1 x)
  (Tuple2 (set1 b1) (set1 b1) (t2tb12 y) (t2tb12 z)))
  (direct_product (set1 b1) (set1 b1) (set1 a1) (t2tb538 f) (t2tb538 g)))
  (and (mem (tuple2 (set1 a1) (set1 b1)) (t2tb495 (Tuple23 x y)) (t2tb538 f))
  (mem (tuple2 (set1 a1) (set1 b1)) (t2tb495 (Tuple23 x z)) (t2tb538 g))))))

;; mem_direct_product
  (assert
  (forall ((c2 ty))
  (forall ((f (set (tuple21 (set a) (set b)))) (g uni) (x (set a))
  (y (set b)) (z uni))
  (= (mem (tuple2 (set1 a1) (tuple2 (set1 b1) c2))
  (Tuple2 (set1 a1) (tuple2 (set1 b1) c2) (t2tb1 x)
  (Tuple2 (set1 b1) c2 (t2tb12 y) z))
  (direct_product c2 (set1 b1) (set1 a1) (t2tb538 f) g))
  (and (mem (tuple2 (set1 a1) (set1 b1)) (t2tb495 (Tuple23 x y)) (t2tb538 f))
  (mem (tuple2 (set1 a1) c2) (Tuple2 (set1 a1) c2 (t2tb1 x) z) g))))))

(declare-fun t2tb571 ((set (tuple21 (set a) (tuple21 (set a) (set b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set a) (tuple21 (set a) (set b)))))) (sort
  (set1 (tuple2 (set1 a1) (tuple2 (set1 a1) (set1 b1)))) (t2tb571 x))))

(declare-fun tb2t571 (uni) (set (tuple21 (set a) (tuple21 (set a) (set b)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set a) (tuple21 (set a) (set b))))))
  (! (= (tb2t571 (t2tb571 i)) i) :pattern ((t2tb571 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 a1) (tuple2 (set1 a1) (set1 b1)))) j)
     (= (t2tb571 (tb2t571 j)) j)) :pattern ((t2tb571 (tb2t571 j))) )))

(declare-fun t2tb572 ((tuple21 (set a) (tuple21 (set a) (set b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set a) (tuple21 (set a) (set b))))) (sort
  (tuple2 (set1 a1) (tuple2 (set1 a1) (set1 b1))) (t2tb572 x))))

(declare-fun tb2t572 (uni) (tuple21 (set a) (tuple21 (set a) (set b))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set a) (tuple21 (set a) (set b)))))
  (! (= (tb2t572 (t2tb572 i)) i) :pattern ((t2tb572 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 a1) (tuple2 (set1 a1) (set1 b1))) j)
     (= (t2tb572 (tb2t572 j)) j)) :pattern ((t2tb572 (tb2t572 j))) )))

;; mem_direct_product
  (assert
  (forall ((f (set (tuple21 (set a) (set a)))) (g (set (tuple21 (set a)
  (set b)))) (x (set a)) (y (set a)) (z (set b)))
  (= (mem (tuple2 (set1 a1) (tuple2 (set1 a1) (set1 b1)))
  (Tuple2 (set1 a1) (tuple2 (set1 a1) (set1 b1)) (t2tb1 x)
  (t2tb495 (Tuple23 y z)))
  (direct_product (set1 b1) (set1 a1) (set1 a1) (t2tb565 f) (t2tb538 g)))
  (and (mem (tuple2 (set1 a1) (set1 a1))
  (Tuple2 (set1 a1) (set1 a1) (t2tb1 x) (t2tb1 y)) (t2tb565 f)) (mem
  (tuple2 (set1 a1) (set1 b1)) (t2tb495 (Tuple23 x z)) (t2tb538 g))))))

;; mem_direct_product
  (assert
  (forall ((b2 ty))
  (forall ((f uni) (g (set (tuple21 a b))) (x a) (y uni) (z b))
  (= (mem (tuple2 a1 (tuple2 b2 b1))
  (Tuple2 a1 (tuple2 b2 b1) (t2tb2 x) (Tuple2 b2 b1 y (t2tb14 z)))
  (direct_product b1 b2 a1 f (t2tb11 g)))
  (and (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) y) f) (mem3 (Tuple21 x z)
  g))))))

(declare-fun t2tb59 ((set (tuple21 a (tuple21 b b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (tuple21 b b))))) (sort
  (set1 (tuple2 a1 (tuple2 b1 b1))) (t2tb59 x))))

(declare-fun tb2t59 (uni) (set (tuple21 a (tuple21 b b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (tuple21 b b)))))
  (! (= (tb2t59 (t2tb59 i)) i) :pattern ((t2tb59 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (tuple2 b1 b1))) j)
     (= (t2tb59 (tb2t59 j)) j)) :pattern ((t2tb59 (tb2t59 j))) )))

(declare-fun t2tb60 ((tuple21 a (tuple21 b b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (tuple21 b b)))) (sort (tuple2 a1 (tuple2 b1 b1))
  (t2tb60 x))))

(declare-fun tb2t60 (uni) (tuple21 a (tuple21 b b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (tuple21 b b))))
  (! (= (tb2t60 (t2tb60 i)) i) :pattern ((t2tb60 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (tuple2 b1 b1)) j) (= (t2tb60 (tb2t60 j)) j)) :pattern (
  (t2tb60 (tb2t60 j))) )))

;; mem_direct_product
  (assert
  (forall ((f (set (tuple21 a b))) (g (set (tuple21 a b))) (x a) (y b) (z b))
  (= (mem (tuple2 a1 (tuple2 b1 b1))
  (Tuple2 a1 (tuple2 b1 b1) (t2tb2 x) (Tuple2 b1 b1 (t2tb14 y) (t2tb14 z)))
  (direct_product b1 b1 a1 (t2tb11 f) (t2tb11 g)))
  (and (mem3 (Tuple21 x y) f) (mem3 (Tuple21 x z) g)))))

;; mem_direct_product
  (assert
  (forall ((c2 ty))
  (forall ((f (set (tuple21 a b))) (g uni) (x a) (y b) (z uni))
  (= (mem (tuple2 a1 (tuple2 b1 c2))
  (Tuple2 a1 (tuple2 b1 c2) (t2tb2 x) (Tuple2 b1 c2 (t2tb14 y) z))
  (direct_product c2 b1 a1 (t2tb11 f) g))
  (and (mem3 (Tuple21 x y) f) (mem (tuple2 a1 c2) (Tuple2 a1 c2 (t2tb2 x) z)
  g))))))

;; mem_direct_product
  (assert
  (forall ((f (set (tuple21 a a))) (g (set (tuple21 a b))) (x a) (y a) (z b))
  (= (mem (tuple2 a1 (tuple2 a1 b1))
  (Tuple2 a1 (tuple2 a1 b1) (t2tb2 x) (t2tb13 (Tuple21 y z)))
  (direct_product b1 a1 a1 (t2tb4 f) (t2tb11 g)))
  (and (mem (tuple2 a1 a1) (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y)) (t2tb4 f))
  (mem3 (Tuple21 x z) g)))))

;; mem_direct_product
  (assert
  (forall ((a2 ty) (b2 ty) (c2 ty))
  (forall ((f uni) (g uni) (x uni) (y uni) (z uni))
  (= (mem (tuple2 a2 (tuple2 b2 c2))
  (Tuple2 a2 (tuple2 b2 c2) x (Tuple2 b2 c2 y z))
  (direct_product c2 b2 a2 f g))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) f) (mem (tuple2 a2 c2)
  (Tuple2 a2 c2 x z) g))))))

(declare-fun prj1 (ty ty uni) uni)

;; prj1_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni)) (sort (set1 (tuple2 (tuple2 a2 b2) a2)) (prj1 b2 a2 x)))))

(declare-fun prj11 ((tuple21 (set a) (set b))) (set (tuple21 (tuple21 a b)
  a)))

(declare-fun t2tb573 ((tuple21 (set (tuple21 a b)) (set a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a b)) (set a)))) (sort
  (tuple2 (set1 (tuple2 a1 b1)) (set1 a1)) (t2tb573 x))))

(declare-fun tb2t573 (uni) (tuple21 (set (tuple21 a b)) (set a)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a b)) (set a))))
  (! (= (tb2t573 (t2tb573 i)) i) :pattern ((t2tb573 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 a1 b1)) (set1 a1)) j)
     (= (t2tb573 (tb2t573 j)) j)) :pattern ((t2tb573 (tb2t573 j))) )))

;; mem_proj_op_1
  (assert
  (forall ((s (set (tuple21 a b))) (t (set a)) (x (tuple21 a b)) (y a)
  (z (tuple21 a b)))
  (= (mem (tuple2 (tuple2 (tuple2 a1 b1) a1) (tuple2 a1 b1))
  (Tuple2 (tuple2 (tuple2 a1 b1) a1) (tuple2 a1 b1) (t2tb30 (Tuple22 x y))
  (t2tb13 z))
  (prj1 a1 (tuple2 a1 b1)
  (Tuple2 (set1 (tuple2 a1 b1)) (set1 a1) (t2tb11 s) (t2tb1 t))))
  (and (mem (tuple2 (tuple2 (tuple2 a1 b1) a1) (tuple2 a1 b1))
  (Tuple2 (tuple2 (tuple2 a1 b1) a1) (tuple2 a1 b1) (t2tb30 (Tuple22 x y))
  (t2tb13 z))
  (times (tuple2 a1 b1) (tuple2 (tuple2 a1 b1) a1) (t2tb29 (times6 s t))
  (t2tb11 s))) (= z x)))))

(declare-fun t2tb574 ((set (tuple21 (tuple21 (set a) (set b)) (set a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (set a) (set b)) (set a))))) (sort
  (set1 (tuple2 (tuple2 (set1 a1) (set1 b1)) (set1 a1))) (t2tb574 x))))

(declare-fun tb2t574 (uni) (set (tuple21 (tuple21 (set a) (set b)) (set a))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (set a) (set b)) (set a)))))
  (! (= (tb2t574 (t2tb574 i)) i) :pattern ((t2tb574 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 (set1 a1) (set1 b1)) (set1 a1))) j)
     (= (t2tb574 (tb2t574 j)) j)) :pattern ((t2tb574 (tb2t574 j))) )))

(declare-fun t2tb575 ((tuple21 (set (set a)) (set (set b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (set a)) (set (set b))))) (sort
  (tuple2 (set1 (set1 a1)) (set1 (set1 b1))) (t2tb575 x))))

(declare-fun tb2t575 (uni) (tuple21 (set (set a)) (set (set b))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (set a)) (set (set b)))))
  (! (= (tb2t575 (t2tb575 i)) i) :pattern ((t2tb575 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (set1 a1)) (set1 (set1 b1))) j)
     (= (t2tb575 (tb2t575 j)) j)) :pattern ((t2tb575 (tb2t575 j))) )))

(declare-fun t2tb576 ((tuple21 (tuple21 (set a) (set b)) (set a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (set a) (set b)) (set a)))) (sort
  (tuple2 (tuple2 (set1 a1) (set1 b1)) (set1 a1)) (t2tb576 x))))

(declare-fun tb2t576 (uni) (tuple21 (tuple21 (set a) (set b)) (set a)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (set a) (set b)) (set a))))
  (! (= (tb2t576 (t2tb576 i)) i) :pattern ((t2tb576 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 (set1 a1) (set1 b1)) (set1 a1)) j)
     (= (t2tb576 (tb2t576 j)) j)) :pattern ((t2tb576 (tb2t576 j))) )))

;; mem_proj_op_1
  (assert
  (forall ((s (set (set a))) (t (set (set b))) (x (set a)) (y (set b))
  (z (set a)))
  (= (mem (tuple2 (tuple2 (set1 a1) (set1 b1)) (set1 a1))
  (Tuple2 (tuple2 (set1 a1) (set1 b1)) (set1 a1) (t2tb495 (Tuple23 x y))
  (t2tb1 z))
  (prj1 (set1 b1) (set1 a1)
  (Tuple2 (set1 (set1 a1)) (set1 (set1 b1)) (t2tb s) (t2tb44 t))))
  (and (mem (tuple2 (tuple2 (set1 a1) (set1 b1)) (set1 a1))
  (Tuple2 (tuple2 (set1 a1) (set1 b1)) (set1 a1) (t2tb495 (Tuple23 x y))
  (t2tb1 z))
  (times (set1 a1) (tuple2 (set1 a1) (set1 b1))
  (times (set1 b1) (set1 a1) (t2tb s) (t2tb44 t)) (t2tb s))) (= z x)))))

;; mem_proj_op_1
  (assert
  (forall ((s (set a)) (t (set b)) (x a) (y b) (z a))
  (= (mem16 (Tuple22 (Tuple21 x y) z) (prj11 (Tuple23 s t)))
  (and (mem16 (Tuple22 (Tuple21 x y) z) (times6 (times2 s t) s)) (= z x)))))

;; mem_proj_op_1
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (x uni) (y uni) (z uni))
  (=> (sort a2 x)
  (=> (sort a2 z)
  (= (mem (tuple2 (tuple2 a2 b2) a2)
  (Tuple2 (tuple2 a2 b2) a2 (Tuple2 a2 b2 x y) z)
  (prj1 b2 a2 (Tuple2 (set1 a2) (set1 b2) s t)))
  (and (mem (tuple2 (tuple2 a2 b2) a2)
  (Tuple2 (tuple2 a2 b2) a2 (Tuple2 a2 b2 x y) z)
  (times a2 (tuple2 a2 b2) (times b2 a2 s t) s)) (= z x))))))))

(declare-fun prj2 (ty ty uni) uni)

;; prj2_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni)) (sort (set1 (tuple2 (tuple2 a2 b2) b2)) (prj2 b2 a2 x)))))

;; mem_proj_op_2
  (assert
  (forall ((s (set (tuple21 a b))) (t (set a)) (x (tuple21 a b)) (y a) (z a))
  (= (mem (tuple2 (tuple2 (tuple2 a1 b1) a1) a1)
  (Tuple2 (tuple2 (tuple2 a1 b1) a1) a1 (t2tb30 (Tuple22 x y)) (t2tb2 z))
  (prj2 a1 (tuple2 a1 b1)
  (Tuple2 (set1 (tuple2 a1 b1)) (set1 a1) (t2tb11 s) (t2tb1 t))))
  (and (mem (tuple2 (tuple2 (tuple2 a1 b1) a1) a1)
  (Tuple2 (tuple2 (tuple2 a1 b1) a1) a1 (t2tb30 (Tuple22 x y)) (t2tb2 z))
  (times a1 (tuple2 (tuple2 a1 b1) a1) (t2tb29 (times6 s t)) (t2tb1 t)))
  (= z y)))))

(declare-fun t2tb577 ((set (tuple21 (tuple21 (set a) (set b)) (set b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (set a) (set b)) (set b))))) (sort
  (set1 (tuple2 (tuple2 (set1 a1) (set1 b1)) (set1 b1))) (t2tb577 x))))

(declare-fun tb2t577 (uni) (set (tuple21 (tuple21 (set a) (set b)) (set b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (set a) (set b)) (set b)))))
  (! (= (tb2t577 (t2tb577 i)) i) :pattern ((t2tb577 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 (set1 a1) (set1 b1)) (set1 b1))) j)
     (= (t2tb577 (tb2t577 j)) j)) :pattern ((t2tb577 (tb2t577 j))) )))

(declare-fun t2tb578 ((tuple21 (tuple21 (set a) (set b)) (set b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (set a) (set b)) (set b)))) (sort
  (tuple2 (tuple2 (set1 a1) (set1 b1)) (set1 b1)) (t2tb578 x))))

(declare-fun tb2t578 (uni) (tuple21 (tuple21 (set a) (set b)) (set b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (set a) (set b)) (set b))))
  (! (= (tb2t578 (t2tb578 i)) i) :pattern ((t2tb578 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 (set1 a1) (set1 b1)) (set1 b1)) j)
     (= (t2tb578 (tb2t578 j)) j)) :pattern ((t2tb578 (tb2t578 j))) )))

;; mem_proj_op_2
  (assert
  (forall ((s (set (set a))) (t (set (set b))) (x (set a)) (y (set b))
  (z (set b)))
  (= (mem (tuple2 (tuple2 (set1 a1) (set1 b1)) (set1 b1))
  (Tuple2 (tuple2 (set1 a1) (set1 b1)) (set1 b1) (t2tb495 (Tuple23 x y))
  (t2tb12 z))
  (prj2 (set1 b1) (set1 a1)
  (Tuple2 (set1 (set1 a1)) (set1 (set1 b1)) (t2tb s) (t2tb44 t))))
  (and (mem (tuple2 (tuple2 (set1 a1) (set1 b1)) (set1 b1))
  (Tuple2 (tuple2 (set1 a1) (set1 b1)) (set1 b1) (t2tb495 (Tuple23 x y))
  (t2tb12 z))
  (times (set1 b1) (tuple2 (set1 a1) (set1 b1))
  (times (set1 b1) (set1 a1) (t2tb s) (t2tb44 t)) (t2tb44 t))) (= z y)))))

;; mem_proj_op_2
  (assert
  (forall ((s (set a)) (t (set b)) (x a) (y b) (z b))
  (= (mem (tuple2 (tuple2 a1 b1) b1)
  (Tuple2 (tuple2 a1 b1) b1 (t2tb13 (Tuple21 x y)) (t2tb14 z))
  (prj2 b1 a1 (t2tb495 (Tuple23 s t))))
  (and (mem (tuple2 (tuple2 a1 b1) b1)
  (Tuple2 (tuple2 a1 b1) b1 (t2tb13 (Tuple21 x y)) (t2tb14 z))
  (times b1 (tuple2 a1 b1) (t2tb11 (times2 s t)) (t2tb12 t))) (= z y)))))

;; mem_proj_op_2
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (x uni) (y uni) (z uni))
  (=> (sort b2 y)
  (=> (sort b2 z)
  (= (mem (tuple2 (tuple2 a2 b2) b2)
  (Tuple2 (tuple2 a2 b2) b2 (Tuple2 a2 b2 x y) z)
  (prj2 b2 a2 (Tuple2 (set1 a2) (set1 b2) s t)))
  (and (mem (tuple2 (tuple2 a2 b2) b2)
  (Tuple2 (tuple2 a2 b2) b2 (Tuple2 a2 b2 x y) z)
  (times b2 (tuple2 a2 b2) (times b2 a2 s t) t)) (= z y))))))))

(declare-fun parallel_product (ty ty ty ty uni uni) uni)

;; parallel_product_sort
  (assert
  (forall ((a2 ty) (b2 ty) (c2 ty) (d ty))
  (forall ((x uni) (x1 uni)) (sort
  (set1 (tuple2 (tuple2 a2 c2) (tuple2 b2 d)))
  (parallel_product d c2 b2 a2 x x1)))))

;; mem_parallel_product
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((h uni) (k (set (tuple21 (tuple21 a b) a))) (x uni) (y (tuple21 a
  b)) (z uni) (w a))
  (= (mem (tuple2 (tuple2 a2 (tuple2 a1 b1)) (tuple2 b2 a1))
  (Tuple2 (tuple2 a2 (tuple2 a1 b1)) (tuple2 b2 a1)
  (Tuple2 a2 (tuple2 a1 b1) x (t2tb13 y)) (Tuple2 b2 a1 z (t2tb2 w)))
  (parallel_product a1 (tuple2 a1 b1) b2 a2 h (t2tb29 k)))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x z) h) (mem16 (Tuple22 y w) k))))))

;; mem_parallel_product
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((h uni) (k (set (tuple21 (set a) (set b)))) (x uni) (y (set a))
  (z uni) (w (set b)))
  (= (mem (tuple2 (tuple2 a2 (set1 a1)) (tuple2 b2 (set1 b1)))
  (Tuple2 (tuple2 a2 (set1 a1)) (tuple2 b2 (set1 b1))
  (Tuple2 a2 (set1 a1) x (t2tb1 y)) (Tuple2 b2 (set1 b1) z (t2tb12 w)))
  (parallel_product (set1 b1) (set1 a1) b2 a2 h (t2tb538 k)))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x z) h) (mem
  (tuple2 (set1 a1) (set1 b1)) (t2tb495 (Tuple23 y w)) (t2tb538 k)))))))

;; mem_parallel_product
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((h uni) (k (set (tuple21 a b))) (x uni) (y a) (z uni) (w b))
  (= (mem (tuple2 (tuple2 a2 a1) (tuple2 b2 b1))
  (Tuple2 (tuple2 a2 a1) (tuple2 b2 b1) (Tuple2 a2 a1 x (t2tb2 y))
  (Tuple2 b2 b1 z (t2tb14 w))) (parallel_product b1 a1 b2 a2 h (t2tb11 k)))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x z) h) (mem3 (Tuple21 y w) k))))))

;; mem_parallel_product
  (assert
  (forall ((a2 ty) (c2 ty))
  (forall ((h uni) (k uni) (x uni) (y uni) (z (tuple21 a b)) (w a))
  (= (mem (tuple2 (tuple2 a2 c2) (tuple2 (tuple2 a1 b1) a1))
  (Tuple2 (tuple2 a2 c2) (tuple2 (tuple2 a1 b1) a1) (Tuple2 a2 c2 x y)
  (t2tb30 (Tuple22 z w))) (parallel_product a1 c2 (tuple2 a1 b1) a2 h k))
  (and (mem (tuple2 a2 (tuple2 a1 b1))
  (Tuple2 a2 (tuple2 a1 b1) x (t2tb13 z)) h) (mem (tuple2 c2 a1)
  (Tuple2 c2 a1 y (t2tb2 w)) k))))))

;; mem_parallel_product
  (assert
  (forall ((a2 ty))
  (forall ((h uni) (k (set (tuple21 (tuple21 a b) a))) (x uni) (y (tuple21 a
  b)) (z (tuple21 a b)) (w a))
  (= (mem (tuple2 (tuple2 a2 (tuple2 a1 b1)) (tuple2 (tuple2 a1 b1) a1))
  (Tuple2 (tuple2 a2 (tuple2 a1 b1)) (tuple2 (tuple2 a1 b1) a1)
  (Tuple2 a2 (tuple2 a1 b1) x (t2tb13 y)) (t2tb30 (Tuple22 z w)))
  (parallel_product a1 (tuple2 a1 b1) (tuple2 a1 b1) a2 h (t2tb29 k)))
  (and (mem (tuple2 a2 (tuple2 a1 b1))
  (Tuple2 a2 (tuple2 a1 b1) x (t2tb13 z)) h) (mem16 (Tuple22 y w) k))))))

;; mem_parallel_product
  (assert
  (forall ((a2 ty) (c2 ty))
  (forall ((h uni) (k uni) (x uni) (y uni) (z (set a)) (w (set b)))
  (= (mem (tuple2 (tuple2 a2 c2) (tuple2 (set1 a1) (set1 b1)))
  (Tuple2 (tuple2 a2 c2) (tuple2 (set1 a1) (set1 b1)) (Tuple2 a2 c2 x y)
  (t2tb495 (Tuple23 z w))) (parallel_product (set1 b1) c2 (set1 a1) a2 h k))
  (and (mem (tuple2 a2 (set1 a1)) (Tuple2 a2 (set1 a1) x (t2tb1 z)) h) (mem
  (tuple2 c2 (set1 b1)) (Tuple2 c2 (set1 b1) y (t2tb12 w)) k))))))

;; mem_parallel_product
  (assert
  (forall ((a2 ty))
  (forall ((h uni) (k (set (tuple21 (set a) (set b)))) (x uni) (y (set a))
  (z (set a)) (w (set b)))
  (= (mem (tuple2 (tuple2 a2 (set1 a1)) (tuple2 (set1 a1) (set1 b1)))
  (Tuple2 (tuple2 a2 (set1 a1)) (tuple2 (set1 a1) (set1 b1))
  (Tuple2 a2 (set1 a1) x (t2tb1 y)) (t2tb495 (Tuple23 z w)))
  (parallel_product (set1 b1) (set1 a1) (set1 a1) a2 h (t2tb538 k)))
  (and (mem (tuple2 a2 (set1 a1)) (Tuple2 a2 (set1 a1) x (t2tb1 z)) h) (mem
  (tuple2 (set1 a1) (set1 b1)) (t2tb495 (Tuple23 y w)) (t2tb538 k)))))))

;; mem_parallel_product
  (assert
  (forall ((a2 ty) (c2 ty))
  (forall ((h uni) (k uni) (x uni) (y uni) (z a) (w b))
  (= (mem (tuple2 (tuple2 a2 c2) (tuple2 a1 b1))
  (Tuple2 (tuple2 a2 c2) (tuple2 a1 b1) (Tuple2 a2 c2 x y)
  (t2tb13 (Tuple21 z w))) (parallel_product b1 c2 a1 a2 h k))
  (and (mem (tuple2 a2 a1) (Tuple2 a2 a1 x (t2tb2 z)) h) (mem (tuple2 c2 b1)
  (Tuple2 c2 b1 y (t2tb14 w)) k))))))

;; mem_parallel_product
  (assert
  (forall ((a2 ty))
  (forall ((h uni) (k (set (tuple21 a b))) (x uni) (y a) (z a) (w b))
  (= (mem (tuple2 (tuple2 a2 a1) (tuple2 a1 b1))
  (Tuple2 (tuple2 a2 a1) (tuple2 a1 b1) (Tuple2 a2 a1 x (t2tb2 y))
  (t2tb13 (Tuple21 z w))) (parallel_product b1 a1 a1 a2 h (t2tb11 k)))
  (and (mem (tuple2 a2 a1) (Tuple2 a2 a1 x (t2tb2 z)) h) (mem3 (Tuple21 y w)
  k))))))

;; mem_parallel_product
  (assert
  (forall ((b2 ty))
  (forall ((h uni) (k (set (tuple21 a b))) (x (tuple21 a b)) (y a) (z uni)
  (w b))
  (= (mem (tuple2 (tuple2 (tuple2 a1 b1) a1) (tuple2 b2 b1))
  (Tuple2 (tuple2 (tuple2 a1 b1) a1) (tuple2 b2 b1) (t2tb30 (Tuple22 x y))
  (Tuple2 b2 b1 z (t2tb14 w)))
  (parallel_product b1 a1 b2 (tuple2 a1 b1) h (t2tb11 k)))
  (and (mem (tuple2 (tuple2 a1 b1) b2)
  (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) z) h) (mem3 (Tuple21 y w) k))))))

;; mem_parallel_product
  (assert
  (forall ((b2 ty) (d ty))
  (forall ((h uni) (k uni) (x (tuple21 a b)) (y a) (z uni) (w uni))
  (= (mem (tuple2 (tuple2 (tuple2 a1 b1) a1) (tuple2 b2 d))
  (Tuple2 (tuple2 (tuple2 a1 b1) a1) (tuple2 b2 d) (t2tb30 (Tuple22 x y))
  (Tuple2 b2 d z w)) (parallel_product d a1 b2 (tuple2 a1 b1) h k))
  (and (mem (tuple2 (tuple2 a1 b1) b2)
  (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) z) h) (mem (tuple2 a1 d)
  (Tuple2 a1 d (t2tb2 y) w) k))))))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 (tuple21 a b) (tuple21 a b)))) (k (set (tuple21 a
  a))) (x (tuple21 a b)) (y a) (z (tuple21 a b)) (w a))
  (= (mem (tuple2 (tuple2 (tuple2 a1 b1) a1) (tuple2 (tuple2 a1 b1) a1))
  (Tuple2 (tuple2 (tuple2 a1 b1) a1) (tuple2 (tuple2 a1 b1) a1)
  (t2tb30 (Tuple22 x y)) (t2tb30 (Tuple22 z w)))
  (parallel_product a1 a1 (tuple2 a1 b1) (tuple2 a1 b1) (t2tb25 h) (t2tb4 k)))
  (and (mem (tuple2 (tuple2 a1 b1) (tuple2 a1 b1))
  (Tuple2 (tuple2 a1 b1) (tuple2 a1 b1) (t2tb13 x) (t2tb13 z)) (t2tb25 h))
  (mem (tuple2 a1 a1) (Tuple2 a1 a1 (t2tb2 y) (t2tb2 w)) (t2tb4 k))))))

(declare-fun t2tb579 ((tuple21 (tuple21 a b) (set a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a b) (set a)))) (sort
  (tuple2 (tuple2 a1 b1) (set1 a1)) (t2tb579 x))))

(declare-fun tb2t579 (uni) (tuple21 (tuple21 a b) (set a)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a b) (set a))))
  (! (= (tb2t579 (t2tb579 i)) i) :pattern ((t2tb579 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 b1) (set1 a1)) j)
     (= (t2tb579 (tb2t579 j)) j)) :pattern ((t2tb579 (tb2t579 j))) )))

(declare-fun t2tb580 ((set (tuple21 (tuple21 (tuple21 a b) a)
  (tuple21 (set a) (set b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 a b) a) (tuple21 (set a)
  (set b)))))) (sort
  (set1 (tuple2 (tuple2 (tuple2 a1 b1) a1) (tuple2 (set1 a1) (set1 b1))))
  (t2tb580 x))))

(declare-fun tb2t580 (uni) (set (tuple21 (tuple21 (tuple21 a b) a)
  (tuple21 (set a) (set b)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 a b) a) (tuple21 (set a)
  (set b)))))) (! (= (tb2t580 (t2tb580 i)) i) :pattern ((t2tb580 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 (tuple2 a1 b1) a1) (tuple2 (set1 a1) (set1 b1))))
     j) (= (t2tb580 (tb2t580 j)) j)) :pattern ((t2tb580 (tb2t580 j))) )))

(declare-fun t2tb581 ((tuple21 (tuple21 (tuple21 a b) a) (tuple21 (set a)
  (set b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 a b) a) (tuple21 (set a) (set b)))))
  (sort (tuple2 (tuple2 (tuple2 a1 b1) a1) (tuple2 (set1 a1) (set1 b1)))
  (t2tb581 x))))

(declare-fun tb2t581 (uni) (tuple21 (tuple21 (tuple21 a b) a)
  (tuple21 (set a) (set b))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 a b) a) (tuple21 (set a) (set b)))))
  (! (= (tb2t581 (t2tb581 i)) i) :pattern ((t2tb581 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (tuple2 (tuple2 (tuple2 a1 b1) a1) (tuple2 (set1 a1) (set1 b1))) j)
     (= (t2tb581 (tb2t581 j)) j)) :pattern ((t2tb581 (tb2t581 j))) )))

(declare-fun t2tb582 ((set (tuple21 a (set b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (set b))))) (sort (set1 (tuple2 a1 (set1 b1)))
  (t2tb582 x))))

(declare-fun tb2t582 (uni) (set (tuple21 a (set b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (set b)))))
  (! (= (tb2t582 (t2tb582 i)) i) :pattern ((t2tb582 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (set1 b1))) j) (= (t2tb582 (tb2t582 j)) j)) :pattern (
  (t2tb582 (tb2t582 j))) )))

(declare-fun t2tb583 ((set (tuple21 (tuple21 a b) (set a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) (set a))))) (sort
  (set1 (tuple2 (tuple2 a1 b1) (set1 a1))) (t2tb583 x))))

(declare-fun tb2t583 (uni) (set (tuple21 (tuple21 a b) (set a))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a b) (set a)))))
  (! (= (tb2t583 (t2tb583 i)) i) :pattern ((t2tb583 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 b1) (set1 a1))) j)
     (= (t2tb583 (tb2t583 j)) j)) :pattern ((t2tb583 (tb2t583 j))) )))

(declare-fun t2tb584 ((tuple21 a (set b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (set b)))) (sort (tuple2 a1 (set1 b1)) (t2tb584 x))))

(declare-fun tb2t584 (uni) (tuple21 a (set b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (set b))))
  (! (= (tb2t584 (t2tb584 i)) i) :pattern ((t2tb584 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (set1 b1)) j) (= (t2tb584 (tb2t584 j)) j)) :pattern (
  (t2tb584 (tb2t584 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 (tuple21 a b) (set a)))) (k (set (tuple21 a
  (set b)))) (x (tuple21 a b)) (y a) (z (set a)) (w (set b)))
  (= (mem (tuple2 (tuple2 (tuple2 a1 b1) a1) (tuple2 (set1 a1) (set1 b1)))
  (Tuple2 (tuple2 (tuple2 a1 b1) a1) (tuple2 (set1 a1) (set1 b1))
  (t2tb30 (Tuple22 x y)) (t2tb495 (Tuple23 z w)))
  (parallel_product (set1 b1) a1 (set1 a1) (tuple2 a1 b1) (t2tb583 h)
  (t2tb582 k)))
  (and (mem (tuple2 (tuple2 a1 b1) (set1 a1))
  (Tuple2 (tuple2 a1 b1) (set1 a1) (t2tb13 x) (t2tb1 z)) (t2tb583 h)) (mem
  (tuple2 a1 (set1 b1)) (Tuple2 a1 (set1 b1) (t2tb2 y) (t2tb12 w))
  (t2tb582 k))))))

;; mem_parallel_product
  (assert
  (forall ((c2 ty))
  (forall ((h (set (tuple21 (tuple21 a b) a))) (k uni) (x (tuple21 a b))
  (y uni) (z a) (w b))
  (= (mem (tuple2 (tuple2 (tuple2 a1 b1) c2) (tuple2 a1 b1))
  (Tuple2 (tuple2 (tuple2 a1 b1) c2) (tuple2 a1 b1)
  (Tuple2 (tuple2 a1 b1) c2 (t2tb13 x) y) (t2tb13 (Tuple21 z w)))
  (parallel_product b1 c2 a1 (tuple2 a1 b1) (t2tb29 h) k))
  (and (mem16 (Tuple22 x z) h) (mem (tuple2 c2 b1)
  (Tuple2 c2 b1 y (t2tb14 w)) k))))))

(declare-fun t2tb585 ((set (tuple21 (tuple21 (tuple21 a b) (tuple21 a b))
  (tuple21 a a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 a b) (tuple21 a b)) (tuple21 a
  a))))) (sort
  (set1 (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 b1)) (tuple2 a1 a1)))
  (t2tb585 x))))

(declare-fun tb2t585 (uni) (set (tuple21 (tuple21 (tuple21 a b) (tuple21 a
  b)) (tuple21 a a))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 a b) (tuple21 a b)) (tuple21 a
  a))))) (! (= (tb2t585 (t2tb585 i)) i) :pattern ((t2tb585 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 b1)) (tuple2 a1 a1))) j)
     (= (t2tb585 (tb2t585 j)) j)) :pattern ((t2tb585 (tb2t585 j))) )))

(declare-fun t2tb586 ((tuple21 (tuple21 (tuple21 a b) (tuple21 a b))
  (tuple21 a a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 a b) (tuple21 a b)) (tuple21 a a))))
  (sort (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 b1)) (tuple2 a1 a1))
  (t2tb586 x))))

(declare-fun tb2t586 (uni) (tuple21 (tuple21 (tuple21 a b) (tuple21 a b))
  (tuple21 a a)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 a b) (tuple21 a b)) (tuple21 a a))))
  (! (= (tb2t586 (t2tb586 i)) i) :pattern ((t2tb586 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 b1)) (tuple2 a1 a1))
     j) (= (t2tb586 (tb2t586 j)) j)) :pattern ((t2tb586 (tb2t586 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 (tuple21 a b) a))) (k (set (tuple21 (tuple21 a b)
  a))) (x (tuple21 a b)) (y (tuple21 a b)) (z a) (w a))
  (= (mem (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 b1)) (tuple2 a1 a1))
  (Tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 b1)) (tuple2 a1 a1)
  (Tuple2 (tuple2 a1 b1) (tuple2 a1 b1) (t2tb13 x) (t2tb13 y))
  (Tuple2 a1 a1 (t2tb2 z) (t2tb2 w)))
  (parallel_product a1 (tuple2 a1 b1) a1 (tuple2 a1 b1) (t2tb29 h)
  (t2tb29 k))) (and (mem16 (Tuple22 x z) h) (mem16 (Tuple22 y w) k)))))

(declare-fun t2tb587 ((set (tuple21 (tuple21 (tuple21 a b) (set a))
  (tuple21 a (set b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 a b) (set a)) (tuple21 a
  (set b)))))) (sort
  (set1 (tuple2 (tuple2 (tuple2 a1 b1) (set1 a1)) (tuple2 a1 (set1 b1))))
  (t2tb587 x))))

(declare-fun tb2t587 (uni) (set (tuple21 (tuple21 (tuple21 a b) (set a))
  (tuple21 a (set b)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 a b) (set a)) (tuple21 a
  (set b)))))) (! (= (tb2t587 (t2tb587 i)) i) :pattern ((t2tb587 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 (tuple2 a1 b1) (set1 a1)) (tuple2 a1 (set1 b1))))
     j) (= (t2tb587 (tb2t587 j)) j)) :pattern ((t2tb587 (tb2t587 j))) )))

(declare-fun t2tb588 ((tuple21 (tuple21 (tuple21 a b) (set a)) (tuple21 a
  (set b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 a b) (set a)) (tuple21 a (set b)))))
  (sort (tuple2 (tuple2 (tuple2 a1 b1) (set1 a1)) (tuple2 a1 (set1 b1)))
  (t2tb588 x))))

(declare-fun tb2t588 (uni) (tuple21 (tuple21 (tuple21 a b) (set a))
  (tuple21 a (set b))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 a b) (set a)) (tuple21 a (set b)))))
  (! (= (tb2t588 (t2tb588 i)) i) :pattern ((t2tb588 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (tuple2 (tuple2 (tuple2 a1 b1) (set1 a1)) (tuple2 a1 (set1 b1))) j)
     (= (t2tb588 (tb2t588 j)) j)) :pattern ((t2tb588 (tb2t588 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 (tuple21 a b) a))) (k (set (tuple21 (set a)
  (set b)))) (x (tuple21 a b)) (y (set a)) (z a) (w (set b)))
  (= (mem (tuple2 (tuple2 (tuple2 a1 b1) (set1 a1)) (tuple2 a1 (set1 b1)))
  (Tuple2 (tuple2 (tuple2 a1 b1) (set1 a1)) (tuple2 a1 (set1 b1))
  (Tuple2 (tuple2 a1 b1) (set1 a1) (t2tb13 x) (t2tb1 y))
  (Tuple2 a1 (set1 b1) (t2tb2 z) (t2tb12 w)))
  (parallel_product (set1 b1) (set1 a1) a1 (tuple2 a1 b1) (t2tb29 h)
  (t2tb538 k)))
  (and (mem16 (Tuple22 x z) h) (mem (tuple2 (set1 a1) (set1 b1))
  (t2tb495 (Tuple23 y w)) (t2tb538 k))))))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 (tuple21 a b) a))) (k (set (tuple21 a b)))
  (x (tuple21 a b)) (y a) (z a) (w b))
  (= (mem (tuple2 (tuple2 (tuple2 a1 b1) a1) (tuple2 a1 b1))
  (Tuple2 (tuple2 (tuple2 a1 b1) a1) (tuple2 a1 b1) (t2tb30 (Tuple22 x y))
  (t2tb13 (Tuple21 z w)))
  (parallel_product b1 a1 a1 (tuple2 a1 b1) (t2tb29 h) (t2tb11 k)))
  (and (mem16 (Tuple22 x z) h) (mem3 (Tuple21 y w) k)))))

;; mem_parallel_product
  (assert
  (forall ((d ty))
  (forall ((h (set (tuple21 (tuple21 a b) a))) (k uni) (x (tuple21 a b))
  (y a) (z a) (w uni))
  (= (mem (tuple2 (tuple2 (tuple2 a1 b1) a1) (tuple2 a1 d))
  (Tuple2 (tuple2 (tuple2 a1 b1) a1) (tuple2 a1 d) (t2tb30 (Tuple22 x y))
  (Tuple2 a1 d (t2tb2 z) w))
  (parallel_product d a1 a1 (tuple2 a1 b1) (t2tb29 h) k))
  (and (mem16 (Tuple22 x z) h) (mem (tuple2 a1 d) (Tuple2 a1 d (t2tb2 y) w)
  k))))))

;; mem_parallel_product
  (assert
  (forall ((c2 ty) (d ty))
  (forall ((h (set (tuple21 (tuple21 a b) a))) (k uni) (x (tuple21 a b))
  (y uni) (z a) (w uni))
  (= (mem (tuple2 (tuple2 (tuple2 a1 b1) c2) (tuple2 a1 d))
  (Tuple2 (tuple2 (tuple2 a1 b1) c2) (tuple2 a1 d)
  (Tuple2 (tuple2 a1 b1) c2 (t2tb13 x) y) (Tuple2 a1 d (t2tb2 z) w))
  (parallel_product d c2 a1 (tuple2 a1 b1) (t2tb29 h) k))
  (and (mem16 (Tuple22 x z) h) (mem (tuple2 c2 d) (Tuple2 c2 d y w) k))))))

;; mem_parallel_product
  (assert
  (forall ((b2 ty) (d ty))
  (forall ((h uni) (k uni) (x (set a)) (y (set b)) (z uni) (w uni))
  (= (mem (tuple2 (tuple2 (set1 a1) (set1 b1)) (tuple2 b2 d))
  (Tuple2 (tuple2 (set1 a1) (set1 b1)) (tuple2 b2 d) (t2tb495 (Tuple23 x y))
  (Tuple2 b2 d z w)) (parallel_product d (set1 b1) b2 (set1 a1) h k))
  (and (mem (tuple2 (set1 a1) b2) (Tuple2 (set1 a1) b2 (t2tb1 x) z) h) (mem
  (tuple2 (set1 b1) d) (Tuple2 (set1 b1) d (t2tb12 y) w) k))))))

(declare-fun t2tb589 ((tuple21 (set a) (tuple21 a b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set a) (tuple21 a b)))) (sort
  (tuple2 (set1 a1) (tuple2 a1 b1)) (t2tb589 x))))

(declare-fun tb2t589 (uni) (tuple21 (set a) (tuple21 a b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set a) (tuple21 a b))))
  (! (= (tb2t589 (t2tb589 i)) i) :pattern ((t2tb589 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 a1) (tuple2 a1 b1)) j)
     (= (t2tb589 (tb2t589 j)) j)) :pattern ((t2tb589 (tb2t589 j))) )))

(declare-fun t2tb590 ((set (tuple21 (tuple21 (set a) (set b))
  (tuple21 (tuple21 a b) a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (set a) (set b)) (tuple21 (tuple21 a b)
  a))))) (sort
  (set1 (tuple2 (tuple2 (set1 a1) (set1 b1)) (tuple2 (tuple2 a1 b1) a1)))
  (t2tb590 x))))

(declare-fun tb2t590 (uni) (set (tuple21 (tuple21 (set a) (set b))
  (tuple21 (tuple21 a b) a))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (set a) (set b)) (tuple21 (tuple21 a b)
  a))))) (! (= (tb2t590 (t2tb590 i)) i) :pattern ((t2tb590 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 (set1 a1) (set1 b1)) (tuple2 (tuple2 a1 b1) a1)))
     j) (= (t2tb590 (tb2t590 j)) j)) :pattern ((t2tb590 (tb2t590 j))) )))

(declare-fun t2tb591 ((tuple21 (tuple21 (set a) (set b)) (tuple21 (tuple21 a
  b) a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (set a) (set b)) (tuple21 (tuple21 a b) a))))
  (sort (tuple2 (tuple2 (set1 a1) (set1 b1)) (tuple2 (tuple2 a1 b1) a1))
  (t2tb591 x))))

(declare-fun tb2t591 (uni) (tuple21 (tuple21 (set a) (set b))
  (tuple21 (tuple21 a b) a)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (set a) (set b)) (tuple21 (tuple21 a b) a))))
  (! (= (tb2t591 (t2tb591 i)) i) :pattern ((t2tb591 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (tuple2 (tuple2 (set1 a1) (set1 b1)) (tuple2 (tuple2 a1 b1) a1)) j)
     (= (t2tb591 (tb2t591 j)) j)) :pattern ((t2tb591 (tb2t591 j))) )))

(declare-fun t2tb592 ((set (tuple21 (set b) a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set b) a)))) (sort (set1 (tuple2 (set1 b1) a1))
  (t2tb592 x))))

(declare-fun tb2t592 (uni) (set (tuple21 (set b) a)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set b) a))))
  (! (= (tb2t592 (t2tb592 i)) i) :pattern ((t2tb592 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 b1) a1)) j) (= (t2tb592 (tb2t592 j)) j)) :pattern (
  (t2tb592 (tb2t592 j))) )))

(declare-fun t2tb593 ((set (tuple21 (set a) (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set a) (tuple21 a b))))) (sort
  (set1 (tuple2 (set1 a1) (tuple2 a1 b1))) (t2tb593 x))))

(declare-fun tb2t593 (uni) (set (tuple21 (set a) (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set a) (tuple21 a b)))))
  (! (= (tb2t593 (t2tb593 i)) i) :pattern ((t2tb593 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 a1) (tuple2 a1 b1))) j)
     (= (t2tb593 (tb2t593 j)) j)) :pattern ((t2tb593 (tb2t593 j))) )))

(declare-fun t2tb594 ((tuple21 (set b) a)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set b) a))) (sort (tuple2 (set1 b1) a1) (t2tb594 x))))

(declare-fun tb2t594 (uni) (tuple21 (set b) a))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set b) a)))
  (! (= (tb2t594 (t2tb594 i)) i) :pattern ((t2tb594 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 b1) a1) j) (= (t2tb594 (tb2t594 j)) j)) :pattern (
  (t2tb594 (tb2t594 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 (set a) (tuple21 a b)))) (k (set (tuple21 (set b)
  a))) (x (set a)) (y (set b)) (z (tuple21 a b)) (w a))
  (= (mem (tuple2 (tuple2 (set1 a1) (set1 b1)) (tuple2 (tuple2 a1 b1) a1))
  (Tuple2 (tuple2 (set1 a1) (set1 b1)) (tuple2 (tuple2 a1 b1) a1)
  (t2tb495 (Tuple23 x y)) (t2tb30 (Tuple22 z w)))
  (parallel_product a1 (set1 b1) (tuple2 a1 b1) (set1 a1) (t2tb593 h)
  (t2tb592 k)))
  (and (mem (tuple2 (set1 a1) (tuple2 a1 b1))
  (Tuple2 (set1 a1) (tuple2 a1 b1) (t2tb1 x) (t2tb13 z)) (t2tb593 h)) (mem
  (tuple2 (set1 b1) a1) (Tuple2 (set1 b1) a1 (t2tb12 y) (t2tb2 w))
  (t2tb592 k))))))

(declare-fun t2tb595 ((set (tuple21 (tuple21 (set a) (tuple21 a b))
  (tuple21 (set b) a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (set a) (tuple21 a b)) (tuple21 (set b)
  a))))) (sort
  (set1 (tuple2 (tuple2 (set1 a1) (tuple2 a1 b1)) (tuple2 (set1 b1) a1)))
  (t2tb595 x))))

(declare-fun tb2t595 (uni) (set (tuple21 (tuple21 (set a) (tuple21 a b))
  (tuple21 (set b) a))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (set a) (tuple21 a b)) (tuple21 (set b)
  a))))) (! (= (tb2t595 (t2tb595 i)) i) :pattern ((t2tb595 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 (set1 a1) (tuple2 a1 b1)) (tuple2 (set1 b1) a1)))
     j) (= (t2tb595 (tb2t595 j)) j)) :pattern ((t2tb595 (tb2t595 j))) )))

(declare-fun t2tb596 ((tuple21 (tuple21 (set a) (tuple21 a b))
  (tuple21 (set b) a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (set a) (tuple21 a b)) (tuple21 (set b) a))))
  (sort (tuple2 (tuple2 (set1 a1) (tuple2 a1 b1)) (tuple2 (set1 b1) a1))
  (t2tb596 x))))

(declare-fun tb2t596 (uni) (tuple21 (tuple21 (set a) (tuple21 a b))
  (tuple21 (set b) a)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (set a) (tuple21 a b)) (tuple21 (set b) a))))
  (! (= (tb2t596 (t2tb596 i)) i) :pattern ((t2tb596 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (tuple2 (tuple2 (set1 a1) (tuple2 a1 b1)) (tuple2 (set1 b1) a1)) j)
     (= (t2tb596 (tb2t596 j)) j)) :pattern ((t2tb596 (tb2t596 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 (set a) (set b)))) (k (set (tuple21 (tuple21 a b)
  a))) (x (set a)) (y (tuple21 a b)) (z (set b)) (w a))
  (= (mem (tuple2 (tuple2 (set1 a1) (tuple2 a1 b1)) (tuple2 (set1 b1) a1))
  (Tuple2 (tuple2 (set1 a1) (tuple2 a1 b1)) (tuple2 (set1 b1) a1)
  (Tuple2 (set1 a1) (tuple2 a1 b1) (t2tb1 x) (t2tb13 y))
  (Tuple2 (set1 b1) a1 (t2tb12 z) (t2tb2 w)))
  (parallel_product a1 (tuple2 a1 b1) (set1 b1) (set1 a1) (t2tb538 h)
  (t2tb29 k)))
  (and (mem (tuple2 (set1 a1) (set1 b1)) (t2tb495 (Tuple23 x z)) (t2tb538 h))
  (mem16 (Tuple22 y w) k)))))

;; mem_parallel_product
  (assert
  (forall ((d ty))
  (forall ((h (set (tuple21 (set a) (set b)))) (k uni) (x (set a))
  (y (set b)) (z (set b)) (w uni))
  (= (mem (tuple2 (tuple2 (set1 a1) (set1 b1)) (tuple2 (set1 b1) d))
  (Tuple2 (tuple2 (set1 a1) (set1 b1)) (tuple2 (set1 b1) d)
  (t2tb495 (Tuple23 x y)) (Tuple2 (set1 b1) d (t2tb12 z) w))
  (parallel_product d (set1 b1) (set1 b1) (set1 a1) (t2tb538 h) k))
  (and (mem (tuple2 (set1 a1) (set1 b1)) (t2tb495 (Tuple23 x z)) (t2tb538 h))
  (mem (tuple2 (set1 b1) d) (Tuple2 (set1 b1) d (t2tb12 y) w) k))))))

(declare-fun t2tb597 ((set (tuple21 (tuple21 (set a) (set a))
  (tuple21 (set b) (set b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (set a) (set a)) (tuple21 (set b)
  (set b)))))) (sort
  (set1 (tuple2 (tuple2 (set1 a1) (set1 a1)) (tuple2 (set1 b1) (set1 b1))))
  (t2tb597 x))))

(declare-fun tb2t597 (uni) (set (tuple21 (tuple21 (set a) (set a))
  (tuple21 (set b) (set b)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (set a) (set a)) (tuple21 (set b)
  (set b)))))) (! (= (tb2t597 (t2tb597 i)) i) :pattern ((t2tb597 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (tuple2 (tuple2 (set1 a1) (set1 a1)) (tuple2 (set1 b1) (set1 b1)))) j)
     (= (t2tb597 (tb2t597 j)) j)) :pattern ((t2tb597 (tb2t597 j))) )))

(declare-fun t2tb598 ((tuple21 (tuple21 (set a) (set a)) (tuple21 (set b)
  (set b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (set a) (set a)) (tuple21 (set b) (set b)))))
  (sort (tuple2 (tuple2 (set1 a1) (set1 a1)) (tuple2 (set1 b1) (set1 b1)))
  (t2tb598 x))))

(declare-fun tb2t598 (uni) (tuple21 (tuple21 (set a) (set a))
  (tuple21 (set b) (set b))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (set a) (set a)) (tuple21 (set b) (set b)))))
  (! (= (tb2t598 (t2tb598 i)) i) :pattern ((t2tb598 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (tuple2 (tuple2 (set1 a1) (set1 a1)) (tuple2 (set1 b1) (set1 b1))) j)
     (= (t2tb598 (tb2t598 j)) j)) :pattern ((t2tb598 (tb2t598 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 (set a) (set b)))) (k (set (tuple21 (set a)
  (set b)))) (x (set a)) (y (set a)) (z (set b)) (w (set b)))
  (= (mem (tuple2 (tuple2 (set1 a1) (set1 a1)) (tuple2 (set1 b1) (set1 b1)))
  (Tuple2 (tuple2 (set1 a1) (set1 a1)) (tuple2 (set1 b1) (set1 b1))
  (Tuple2 (set1 a1) (set1 a1) (t2tb1 x) (t2tb1 y))
  (Tuple2 (set1 b1) (set1 b1) (t2tb12 z) (t2tb12 w)))
  (parallel_product (set1 b1) (set1 a1) (set1 b1) (set1 a1) (t2tb538 h)
  (t2tb538 k)))
  (and (mem (tuple2 (set1 a1) (set1 b1)) (t2tb495 (Tuple23 x z)) (t2tb538 h))
  (mem (tuple2 (set1 a1) (set1 b1)) (t2tb495 (Tuple23 y w)) (t2tb538 k))))))

(declare-fun t2tb599 ((tuple21 (set b) b)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set b) b))) (sort (tuple2 (set1 b1) b1) (t2tb599 x))))

(declare-fun tb2t599 (uni) (tuple21 (set b) b))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set b) b)))
  (! (= (tb2t599 (t2tb599 i)) i) :pattern ((t2tb599 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 b1) b1) j) (= (t2tb599 (tb2t599 j)) j)) :pattern (
  (t2tb599 (tb2t599 j))) )))

(declare-fun t2tb600 ((tuple21 (set a) a)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set a) a))) (sort (tuple2 (set1 a1) a1) (t2tb600 x))))

(declare-fun tb2t600 (uni) (tuple21 (set a) a))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set a) a)))
  (! (= (tb2t600 (t2tb600 i)) i) :pattern ((t2tb600 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 a1) a1) j) (= (t2tb600 (tb2t600 j)) j)) :pattern (
  (t2tb600 (tb2t600 j))) )))

(declare-fun t2tb601 ((set (tuple21 (tuple21 (set a) a) (tuple21 (set b)
  b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (set a) a) (tuple21 (set b) b))))) (sort
  (set1 (tuple2 (tuple2 (set1 a1) a1) (tuple2 (set1 b1) b1))) (t2tb601 x))))

(declare-fun tb2t601 (uni) (set (tuple21 (tuple21 (set a) a) (tuple21 (set b)
  b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (set a) a) (tuple21 (set b) b)))))
  (! (= (tb2t601 (t2tb601 i)) i) :pattern ((t2tb601 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 (set1 a1) a1) (tuple2 (set1 b1) b1))) j)
     (= (t2tb601 (tb2t601 j)) j)) :pattern ((t2tb601 (tb2t601 j))) )))

(declare-fun t2tb602 ((tuple21 (tuple21 (set a) a) (tuple21 (set b) b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (set a) a) (tuple21 (set b) b)))) (sort
  (tuple2 (tuple2 (set1 a1) a1) (tuple2 (set1 b1) b1)) (t2tb602 x))))

(declare-fun tb2t602 (uni) (tuple21 (tuple21 (set a) a) (tuple21 (set b) b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (set a) a) (tuple21 (set b) b))))
  (! (= (tb2t602 (t2tb602 i)) i) :pattern ((t2tb602 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 (set1 a1) a1) (tuple2 (set1 b1) b1)) j)
     (= (t2tb602 (tb2t602 j)) j)) :pattern ((t2tb602 (tb2t602 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 (set a) (set b)))) (k (set (tuple21 a b)))
  (x (set a)) (y a) (z (set b)) (w b))
  (= (mem (tuple2 (tuple2 (set1 a1) a1) (tuple2 (set1 b1) b1))
  (Tuple2 (tuple2 (set1 a1) a1) (tuple2 (set1 b1) b1)
  (Tuple2 (set1 a1) a1 (t2tb1 x) (t2tb2 y))
  (Tuple2 (set1 b1) b1 (t2tb12 z) (t2tb14 w)))
  (parallel_product b1 a1 (set1 b1) (set1 a1) (t2tb538 h) (t2tb11 k)))
  (and (mem (tuple2 (set1 a1) (set1 b1)) (t2tb495 (Tuple23 x z)) (t2tb538 h))
  (mem3 (Tuple21 y w) k)))))

;; mem_parallel_product
  (assert
  (forall ((c2 ty) (d ty))
  (forall ((h (set (tuple21 (set a) (set b)))) (k uni) (x (set a)) (y uni)
  (z (set b)) (w uni))
  (= (mem (tuple2 (tuple2 (set1 a1) c2) (tuple2 (set1 b1) d))
  (Tuple2 (tuple2 (set1 a1) c2) (tuple2 (set1 b1) d)
  (Tuple2 (set1 a1) c2 (t2tb1 x) y) (Tuple2 (set1 b1) d (t2tb12 z) w))
  (parallel_product d c2 (set1 b1) (set1 a1) (t2tb538 h) k))
  (and (mem (tuple2 (set1 a1) (set1 b1)) (t2tb495 (Tuple23 x z)) (t2tb538 h))
  (mem (tuple2 c2 d) (Tuple2 c2 d y w) k))))))

(declare-fun t2tb603 ((set (tuple21 (tuple21 (set a) (set b))
  (tuple21 (set a) (set b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (set a) (set b)) (tuple21 (set a)
  (set b)))))) (sort
  (set1 (tuple2 (tuple2 (set1 a1) (set1 b1)) (tuple2 (set1 a1) (set1 b1))))
  (t2tb603 x))))

(declare-fun tb2t603 (uni) (set (tuple21 (tuple21 (set a) (set b))
  (tuple21 (set a) (set b)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (set a) (set b)) (tuple21 (set a)
  (set b)))))) (! (= (tb2t603 (t2tb603 i)) i) :pattern ((t2tb603 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (tuple2 (tuple2 (set1 a1) (set1 b1)) (tuple2 (set1 a1) (set1 b1)))) j)
     (= (t2tb603 (tb2t603 j)) j)) :pattern ((t2tb603 (tb2t603 j))) )))

(declare-fun t2tb604 ((tuple21 (tuple21 (set a) (set b)) (tuple21 (set a)
  (set b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (set a) (set b)) (tuple21 (set a) (set b)))))
  (sort (tuple2 (tuple2 (set1 a1) (set1 b1)) (tuple2 (set1 a1) (set1 b1)))
  (t2tb604 x))))

(declare-fun tb2t604 (uni) (tuple21 (tuple21 (set a) (set b))
  (tuple21 (set a) (set b))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (set a) (set b)) (tuple21 (set a) (set b)))))
  (! (= (tb2t604 (t2tb604 i)) i) :pattern ((t2tb604 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (tuple2 (tuple2 (set1 a1) (set1 b1)) (tuple2 (set1 a1) (set1 b1))) j)
     (= (t2tb604 (tb2t604 j)) j)) :pattern ((t2tb604 (tb2t604 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 (set a) (set a)))) (k (set (tuple21 (set b)
  (set b)))) (x (set a)) (y (set b)) (z (set a)) (w (set b)))
  (= (mem (tuple2 (tuple2 (set1 a1) (set1 b1)) (tuple2 (set1 a1) (set1 b1)))
  (Tuple2 (tuple2 (set1 a1) (set1 b1)) (tuple2 (set1 a1) (set1 b1))
  (t2tb495 (Tuple23 x y)) (t2tb495 (Tuple23 z w)))
  (parallel_product (set1 b1) (set1 b1) (set1 a1) (set1 a1) (t2tb565 h)
  (t2tb563 k)))
  (and (mem (tuple2 (set1 a1) (set1 a1))
  (Tuple2 (set1 a1) (set1 a1) (t2tb1 x) (t2tb1 z)) (t2tb565 h)) (mem
  (tuple2 (set1 b1) (set1 b1))
  (Tuple2 (set1 b1) (set1 b1) (t2tb12 y) (t2tb12 w)) (t2tb563 k))))))

(declare-fun t2tb605 ((set (tuple21 (set a) a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set a) a)))) (sort (set1 (tuple2 (set1 a1) a1))
  (t2tb605 x))))

(declare-fun tb2t605 (uni) (set (tuple21 (set a) a)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set a) a))))
  (! (= (tb2t605 (t2tb605 i)) i) :pattern ((t2tb605 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 a1) a1)) j) (= (t2tb605 (tb2t605 j)) j)) :pattern (
  (t2tb605 (tb2t605 j))) )))

(declare-fun t2tb606 ((set (tuple21 (tuple21 (set a) (set b)) (tuple21 a
  b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (set a) (set b)) (tuple21 a b))))) (sort
  (set1 (tuple2 (tuple2 (set1 a1) (set1 b1)) (tuple2 a1 b1))) (t2tb606 x))))

(declare-fun tb2t606 (uni) (set (tuple21 (tuple21 (set a) (set b)) (tuple21 a
  b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (set a) (set b)) (tuple21 a b)))))
  (! (= (tb2t606 (t2tb606 i)) i) :pattern ((t2tb606 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 (set1 a1) (set1 b1)) (tuple2 a1 b1))) j)
     (= (t2tb606 (tb2t606 j)) j)) :pattern ((t2tb606 (tb2t606 j))) )))

(declare-fun t2tb607 ((tuple21 (tuple21 (set a) (set b)) (tuple21 a b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (set a) (set b)) (tuple21 a b)))) (sort
  (tuple2 (tuple2 (set1 a1) (set1 b1)) (tuple2 a1 b1)) (t2tb607 x))))

(declare-fun tb2t607 (uni) (tuple21 (tuple21 (set a) (set b)) (tuple21 a b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (set a) (set b)) (tuple21 a b))))
  (! (= (tb2t607 (t2tb607 i)) i) :pattern ((t2tb607 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 (set1 a1) (set1 b1)) (tuple2 a1 b1)) j)
     (= (t2tb607 (tb2t607 j)) j)) :pattern ((t2tb607 (tb2t607 j))) )))

(declare-fun t2tb608 ((set (tuple21 (set b) b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set b) b)))) (sort (set1 (tuple2 (set1 b1) b1))
  (t2tb608 x))))

(declare-fun tb2t608 (uni) (set (tuple21 (set b) b)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set b) b))))
  (! (= (tb2t608 (t2tb608 i)) i) :pattern ((t2tb608 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 b1) b1)) j) (= (t2tb608 (tb2t608 j)) j)) :pattern (
  (t2tb608 (tb2t608 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 (set a) a))) (k (set (tuple21 (set b) b)))
  (x (set a)) (y (set b)) (z a) (w b))
  (= (mem (tuple2 (tuple2 (set1 a1) (set1 b1)) (tuple2 a1 b1))
  (Tuple2 (tuple2 (set1 a1) (set1 b1)) (tuple2 a1 b1) (t2tb495 (Tuple23 x y))
  (t2tb13 (Tuple21 z w)))
  (parallel_product b1 (set1 b1) a1 (set1 a1) (t2tb605 h) (t2tb608 k)))
  (and (mem (tuple2 (set1 a1) a1) (Tuple2 (set1 a1) a1 (t2tb1 x) (t2tb2 z))
  (t2tb605 h)) (mem (tuple2 (set1 b1) b1)
  (Tuple2 (set1 b1) b1 (t2tb12 y) (t2tb14 w)) (t2tb608 k))))))

;; mem_parallel_product
  (assert
  (forall ((b2 ty) (d ty))
  (forall ((h uni) (k uni) (x a) (y b) (z uni) (w uni))
  (= (mem (tuple2 (tuple2 a1 b1) (tuple2 b2 d))
  (Tuple2 (tuple2 a1 b1) (tuple2 b2 d) (t2tb13 (Tuple21 x y))
  (Tuple2 b2 d z w)) (parallel_product d b1 b2 a1 h k))
  (and (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) z) h) (mem (tuple2 b1 d)
  (Tuple2 b1 d (t2tb14 y) w) k))))))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a (tuple21 a b)))) (k (set (tuple21 b a))) (x a)
  (y b) (z (tuple21 a b)) (w a))
  (= (mem (tuple2 (tuple2 a1 b1) (tuple2 (tuple2 a1 b1) a1))
  (Tuple2 (tuple2 a1 b1) (tuple2 (tuple2 a1 b1) a1) (t2tb13 (Tuple21 x y))
  (t2tb30 (Tuple22 z w)))
  (parallel_product a1 b1 (tuple2 a1 b1) a1 (t2tb41 h) (t2tb37 k)))
  (and (mem (tuple2 a1 (tuple2 a1 b1))
  (Tuple2 a1 (tuple2 a1 b1) (t2tb2 x) (t2tb13 z)) (t2tb41 h)) (mem
  (tuple2 b1 a1) (Tuple2 b1 a1 (t2tb14 y) (t2tb2 w)) (t2tb37 k))))))

(declare-fun t2tb609 ((set (tuple21 (tuple21 a (tuple21 a b)) (tuple21 b
  a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a (tuple21 a b)) (tuple21 b a))))) (sort
  (set1 (tuple2 (tuple2 a1 (tuple2 a1 b1)) (tuple2 b1 a1))) (t2tb609 x))))

(declare-fun tb2t609 (uni) (set (tuple21 (tuple21 a (tuple21 a b)) (tuple21 b
  a))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a (tuple21 a b)) (tuple21 b a)))))
  (! (= (tb2t609 (t2tb609 i)) i) :pattern ((t2tb609 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 (tuple2 a1 b1)) (tuple2 b1 a1))) j)
     (= (t2tb609 (tb2t609 j)) j)) :pattern ((t2tb609 (tb2t609 j))) )))

(declare-fun t2tb610 ((tuple21 (tuple21 a (tuple21 a b)) (tuple21 b a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a (tuple21 a b)) (tuple21 b a)))) (sort
  (tuple2 (tuple2 a1 (tuple2 a1 b1)) (tuple2 b1 a1)) (t2tb610 x))))

(declare-fun tb2t610 (uni) (tuple21 (tuple21 a (tuple21 a b)) (tuple21 b a)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a (tuple21 a b)) (tuple21 b a))))
  (! (= (tb2t610 (t2tb610 i)) i) :pattern ((t2tb610 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 (tuple2 a1 b1)) (tuple2 b1 a1)) j)
     (= (t2tb610 (tb2t610 j)) j)) :pattern ((t2tb610 (tb2t610 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a b))) (k (set (tuple21 (tuple21 a b) a))) (x a)
  (y (tuple21 a b)) (z b) (w a))
  (= (mem (tuple2 (tuple2 a1 (tuple2 a1 b1)) (tuple2 b1 a1))
  (Tuple2 (tuple2 a1 (tuple2 a1 b1)) (tuple2 b1 a1)
  (Tuple2 a1 (tuple2 a1 b1) (t2tb2 x) (t2tb13 y))
  (Tuple2 b1 a1 (t2tb14 z) (t2tb2 w)))
  (parallel_product a1 (tuple2 a1 b1) b1 a1 (t2tb11 h) (t2tb29 k)))
  (and (mem3 (Tuple21 x z) h) (mem16 (Tuple22 y w) k)))))

;; mem_parallel_product
  (assert
  (forall ((d ty))
  (forall ((h (set (tuple21 a b))) (k uni) (x a) (y b) (z b) (w uni))
  (= (mem (tuple2 (tuple2 a1 b1) (tuple2 b1 d))
  (Tuple2 (tuple2 a1 b1) (tuple2 b1 d) (t2tb13 (Tuple21 x y))
  (Tuple2 b1 d (t2tb14 z) w)) (parallel_product d b1 b1 a1 (t2tb11 h) k))
  (and (mem3 (Tuple21 x z) h) (mem (tuple2 b1 d) (Tuple2 b1 d (t2tb14 y) w)
  k))))))

(declare-fun t2tb611 ((tuple21 b (set b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 b (set b)))) (sort (tuple2 b1 (set1 b1)) (t2tb611 x))))

(declare-fun tb2t611 (uni) (tuple21 b (set b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 b (set b))))
  (! (= (tb2t611 (t2tb611 i)) i) :pattern ((t2tb611 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 b1 (set1 b1)) j) (= (t2tb611 (tb2t611 j)) j)) :pattern (
  (t2tb611 (tb2t611 j))) )))

(declare-fun t2tb612 ((set (tuple21 (tuple21 a (set a)) (tuple21 b
  (set b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a (set a)) (tuple21 b (set b)))))) (sort
  (set1 (tuple2 (tuple2 a1 (set1 a1)) (tuple2 b1 (set1 b1)))) (t2tb612 x))))

(declare-fun tb2t612 (uni) (set (tuple21 (tuple21 a (set a)) (tuple21 b
  (set b)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a (set a)) (tuple21 b (set b))))))
  (! (= (tb2t612 (t2tb612 i)) i) :pattern ((t2tb612 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 (set1 a1)) (tuple2 b1 (set1 b1)))) j)
     (= (t2tb612 (tb2t612 j)) j)) :pattern ((t2tb612 (tb2t612 j))) )))

(declare-fun t2tb613 ((tuple21 a (set a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (set a)))) (sort (tuple2 a1 (set1 a1)) (t2tb613 x))))

(declare-fun tb2t613 (uni) (tuple21 a (set a)))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (set a))))
  (! (= (tb2t613 (t2tb613 i)) i) :pattern ((t2tb613 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (set1 a1)) j) (= (t2tb613 (tb2t613 j)) j)) :pattern (
  (t2tb613 (tb2t613 j))) )))

(declare-fun t2tb614 ((tuple21 (tuple21 a (set a)) (tuple21 b (set b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a (set a)) (tuple21 b (set b))))) (sort
  (tuple2 (tuple2 a1 (set1 a1)) (tuple2 b1 (set1 b1))) (t2tb614 x))))

(declare-fun tb2t614 (uni) (tuple21 (tuple21 a (set a)) (tuple21 b (set b))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a (set a)) (tuple21 b (set b)))))
  (! (= (tb2t614 (t2tb614 i)) i) :pattern ((t2tb614 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 (set1 a1)) (tuple2 b1 (set1 b1))) j)
     (= (t2tb614 (tb2t614 j)) j)) :pattern ((t2tb614 (tb2t614 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a b))) (k (set (tuple21 (set a) (set b)))) (x a)
  (y (set a)) (z b) (w (set b)))
  (= (mem (tuple2 (tuple2 a1 (set1 a1)) (tuple2 b1 (set1 b1)))
  (Tuple2 (tuple2 a1 (set1 a1)) (tuple2 b1 (set1 b1))
  (Tuple2 a1 (set1 a1) (t2tb2 x) (t2tb1 y))
  (Tuple2 b1 (set1 b1) (t2tb14 z) (t2tb12 w)))
  (parallel_product (set1 b1) (set1 a1) b1 a1 (t2tb11 h) (t2tb538 k)))
  (and (mem3 (Tuple21 x z) h) (mem (tuple2 (set1 a1) (set1 b1))
  (t2tb495 (Tuple23 y w)) (t2tb538 k))))))

(declare-fun t2tb61 ((set (tuple21 (tuple21 a a) (tuple21 b b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a a) (tuple21 b b))))) (sort
  (set1 (tuple2 (tuple2 a1 a1) (tuple2 b1 b1))) (t2tb61 x))))

(declare-fun tb2t61 (uni) (set (tuple21 (tuple21 a a) (tuple21 b b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a a) (tuple21 b b)))))
  (! (= (tb2t61 (t2tb61 i)) i) :pattern ((t2tb61 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 a1) (tuple2 b1 b1))) j)
     (= (t2tb61 (tb2t61 j)) j)) :pattern ((t2tb61 (tb2t61 j))) )))

(declare-fun t2tb62 ((tuple21 (tuple21 a a) (tuple21 b b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a a) (tuple21 b b)))) (sort
  (tuple2 (tuple2 a1 a1) (tuple2 b1 b1)) (t2tb62 x))))

(declare-fun tb2t62 (uni) (tuple21 (tuple21 a a) (tuple21 b b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a a) (tuple21 b b))))
  (! (= (tb2t62 (t2tb62 i)) i) :pattern ((t2tb62 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 a1) (tuple2 b1 b1)) j)
     (= (t2tb62 (tb2t62 j)) j)) :pattern ((t2tb62 (tb2t62 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a b))) (k (set (tuple21 a b))) (x a) (y a) (z b)
  (w b))
  (= (mem (tuple2 (tuple2 a1 a1) (tuple2 b1 b1))
  (Tuple2 (tuple2 a1 a1) (tuple2 b1 b1) (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y))
  (Tuple2 b1 b1 (t2tb14 z) (t2tb14 w)))
  (parallel_product b1 a1 b1 a1 (t2tb11 h) (t2tb11 k)))
  (and (mem3 (Tuple21 x z) h) (mem3 (Tuple21 y w) k)))))

;; mem_parallel_product
  (assert
  (forall ((c2 ty) (d ty))
  (forall ((h (set (tuple21 a b))) (k uni) (x a) (y uni) (z b) (w uni))
  (= (mem (tuple2 (tuple2 a1 c2) (tuple2 b1 d))
  (Tuple2 (tuple2 a1 c2) (tuple2 b1 d) (Tuple2 a1 c2 (t2tb2 x) y)
  (Tuple2 b1 d (t2tb14 z) w)) (parallel_product d c2 b1 a1 (t2tb11 h) k))
  (and (mem3 (Tuple21 x z) h) (mem (tuple2 c2 d) (Tuple2 c2 d y w) k))))))

(declare-fun t2tb615 ((tuple21 (tuple21 a b) (tuple21 (set a) (set b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a b) (tuple21 (set a) (set b))))) (sort
  (tuple2 (tuple2 a1 b1) (tuple2 (set1 a1) (set1 b1))) (t2tb615 x))))

(declare-fun tb2t615 (uni) (tuple21 (tuple21 a b) (tuple21 (set a) (set b))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a b) (tuple21 (set a) (set b)))))
  (! (= (tb2t615 (t2tb615 i)) i) :pattern ((t2tb615 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 b1) (tuple2 (set1 a1) (set1 b1))) j)
     (= (t2tb615 (tb2t615 j)) j)) :pattern ((t2tb615 (tb2t615 j))) )))

(declare-fun t2tb616 ((set (tuple21 (tuple21 a b) (tuple21 (set a)
  (set b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) (tuple21 (set a) (set b)))))) (sort
  (set1 (tuple2 (tuple2 a1 b1) (tuple2 (set1 a1) (set1 b1)))) (t2tb616 x))))

(declare-fun tb2t616 (uni) (set (tuple21 (tuple21 a b) (tuple21 (set a)
  (set b)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a b) (tuple21 (set a) (set b))))))
  (! (= (tb2t616 (t2tb616 i)) i) :pattern ((t2tb616 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 b1) (tuple2 (set1 a1) (set1 b1)))) j)
     (= (t2tb616 (tb2t616 j)) j)) :pattern ((t2tb616 (tb2t616 j))) )))

(declare-fun t2tb617 ((set (tuple21 b (set b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 b (set b))))) (sort (set1 (tuple2 b1 (set1 b1)))
  (t2tb617 x))))

(declare-fun tb2t617 (uni) (set (tuple21 b (set b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 b (set b)))))
  (! (= (tb2t617 (t2tb617 i)) i) :pattern ((t2tb617 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 b1 (set1 b1))) j) (= (t2tb617 (tb2t617 j)) j)) :pattern (
  (t2tb617 (tb2t617 j))) )))

(declare-fun t2tb618 ((set (tuple21 a (set a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (set a))))) (sort (set1 (tuple2 a1 (set1 a1)))
  (t2tb618 x))))

(declare-fun tb2t618 (uni) (set (tuple21 a (set a))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (set a)))))
  (! (= (tb2t618 (t2tb618 i)) i) :pattern ((t2tb618 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (set1 a1))) j) (= (t2tb618 (tb2t618 j)) j)) :pattern (
  (t2tb618 (tb2t618 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a (set a)))) (k (set (tuple21 b (set b)))) (x a)
  (y b) (z (set a)) (w (set b)))
  (= (mem (tuple2 (tuple2 a1 b1) (tuple2 (set1 a1) (set1 b1)))
  (Tuple2 (tuple2 a1 b1) (tuple2 (set1 a1) (set1 b1)) (t2tb13 (Tuple21 x y))
  (t2tb495 (Tuple23 z w)))
  (parallel_product (set1 b1) b1 (set1 a1) a1 (t2tb618 h) (t2tb617 k)))
  (and (mem (tuple2 a1 (set1 a1)) (Tuple2 a1 (set1 a1) (t2tb2 x) (t2tb1 z))
  (t2tb618 h)) (mem (tuple2 b1 (set1 b1))
  (Tuple2 b1 (set1 b1) (t2tb14 y) (t2tb12 w)) (t2tb617 k))))))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a a))) (k (set (tuple21 b b))) (x a) (y b) (z a)
  (w b))
  (= (mem (tuple2 (tuple2 a1 b1) (tuple2 a1 b1))
  (Tuple2 (tuple2 a1 b1) (tuple2 a1 b1) (t2tb13 (Tuple21 x y))
  (t2tb13 (Tuple21 z w)))
  (parallel_product b1 b1 a1 a1 (t2tb4 h) (t2tb35 k)))
  (and (mem (tuple2 a1 a1) (Tuple2 a1 a1 (t2tb2 x) (t2tb2 z)) (t2tb4 h)) (mem
  (tuple2 b1 b1) (Tuple2 b1 b1 (t2tb14 y) (t2tb14 w)) (t2tb35 k))))))

;; mem_parallel_product
  (assert
  (forall ((a2 ty) (b2 ty) (c2 ty) (d ty))
  (forall ((h uni) (k uni) (x uni) (y uni) (z uni) (w uni))
  (= (mem (tuple2 (tuple2 a2 c2) (tuple2 b2 d))
  (Tuple2 (tuple2 a2 c2) (tuple2 b2 d) (Tuple2 a2 c2 x y) (Tuple2 b2 d z w))
  (parallel_product d c2 b2 a2 h k))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x z) h) (mem (tuple2 c2 d)
  (Tuple2 c2 d y w) k))))))

(declare-fun infix_plmngt (ty ty uni uni) uni)

;; infix +->_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (set1 (tuple2 a2 b2)))
  (infix_plmngt b2 a2 x x1)))))

;; mem_partial_function_set
  (assert
  (forall ((s (set (tuple21 a b))) (t (set a)) (f (set (tuple21 (tuple21 a b)
  a))))
  (= (mem17 f (tb2t52 (infix_plmngt a1 (tuple2 a1 b1) (t2tb11 s) (t2tb1 t))))
  (and (mem17 f (tb2t52 (relation a1 (tuple2 a1 b1) (t2tb11 s) (t2tb1 t))))
  (forall ((x (tuple21 a b)) (y1 a) (y2 a))
  (=> (and (mem16 (Tuple22 x y1) f) (mem16 (Tuple22 x y2) f)) (= y1 y2)))))))

;; mem_partial_function_set
  (assert
  (forall ((s (set (set a))) (t (set (set b))) (f (set (tuple21 (set a)
  (set b)))))
  (= (mem (set1 (tuple2 (set1 a1) (set1 b1))) (t2tb538 f)
  (infix_plmngt (set1 b1) (set1 a1) (t2tb s) (t2tb44 t)))
  (and (mem (set1 (tuple2 (set1 a1) (set1 b1))) (t2tb538 f)
  (relation (set1 b1) (set1 a1) (t2tb s) (t2tb44 t)))
  (forall ((x (set a)) (y1 (set b)) (y2 (set b)))
  (=>
  (and (mem (tuple2 (set1 a1) (set1 b1)) (t2tb495 (Tuple23 x y1))
  (t2tb538 f)) (mem (tuple2 (set1 a1) (set1 b1)) (t2tb495 (Tuple23 x y2))
  (t2tb538 f))) (= y1 y2)))))))

;; mem_partial_function_set
  (assert
  (forall ((s (set a)) (t (set b)) (f (set (tuple21 a b))))
  (= (mem (set1 (tuple2 a1 b1)) (t2tb11 f)
  (infix_plmngt b1 a1 (t2tb1 s) (t2tb12 t)))
  (and (mem (set1 (tuple2 a1 b1)) (t2tb11 f)
  (relation b1 a1 (t2tb1 s) (t2tb12 t)))
  (forall ((x a) (y1 b) (y2 b))
  (=> (and (mem3 (Tuple21 x y1) f) (mem3 (Tuple21 x y2) f)) (= y1 y2)))))))

;; mem_partial_function_set
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (f uni))
  (and
  (=> (mem (set1 (tuple2 a2 b2)) f (infix_plmngt b2 a2 s t))
  (and (mem (set1 (tuple2 a2 b2)) f (relation b2 a2 s t))
  (forall ((x uni) (y1 uni) (y2 uni))
  (=> (sort b2 y1)
  (=> (sort b2 y2)
  (=>
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y1) f) (mem (tuple2 a2 b2)
  (Tuple2 a2 b2 x y2) f)) (= y1 y2)))))))
  (=>
  (and (mem (set1 (tuple2 a2 b2)) f (relation b2 a2 s t))
  (forall ((x uni) (y1 uni) (y2 uni))
  (=> (sort a2 x)
  (=> (sort b2 y1)
  (=> (sort b2 y2)
  (=>
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y1) f) (mem (tuple2 a2 b2)
  (Tuple2 a2 b2 x y2) f)) (= y1 y2))))))) (mem (set1 (tuple2 a2 b2)) f
  (infix_plmngt b2 a2 s t)))))))

(declare-fun infix_mnmngt (ty ty uni uni) uni)

;; infix -->_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (set1 (tuple2 a2 b2)))
  (infix_mnmngt b2 a2 x x1)))))

(declare-fun infix_mnmngt5 ((set (tuple21 a b))
  (set a)) (set (set (tuple21 (tuple21 a b) a))))

;; mem_total_function_set
  (assert
  (forall ((s (set (tuple21 a b))) (t (set a)) (x (set (tuple21 (tuple21 a b)
  a))))
  (= (mem17 x (infix_mnmngt5 s t))
  (and (mem17 x
  (tb2t52 (infix_plmngt a1 (tuple2 a1 b1) (t2tb11 s) (t2tb1 t)))) (infix_eqeq
  (tuple2 a1 b1) (dom a1 (tuple2 a1 b1) (t2tb29 x)) (t2tb11 s))))))

;; mem_total_function_set
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (x uni))
  (= (mem (set1 (tuple2 a2 b2)) x (infix_mnmngt b2 a2 s t))
  (and (mem (set1 (tuple2 a2 b2)) x (infix_plmngt b2 a2 s t)) (infix_eqeq a2
  (dom b2 a2 x) s))))))

(declare-fun infix_gtplgt (ty ty uni uni) uni)

;; infix >+>_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (set1 (tuple2 a2 b2)))
  (infix_gtplgt b2 a2 x x1)))))

;; mem_partial_injection_set
  (assert
  (forall ((s (set (tuple21 a b))) (t (set a)) (x (set (tuple21 (tuple21 a b)
  a))))
  (= (mem17 x (tb2t52 (infix_gtplgt a1 (tuple2 a1 b1) (t2tb11 s) (t2tb1 t))))
  (and (mem17 x
  (tb2t52 (infix_plmngt a1 (tuple2 a1 b1) (t2tb11 s) (t2tb1 t)))) (mem
  (set1 (tuple2 a1 (tuple2 a1 b1))) (inverse a1 (tuple2 a1 b1) (t2tb29 x))
  (infix_plmngt (tuple2 a1 b1) a1 (t2tb1 t) (t2tb11 s)))))))

;; mem_partial_injection_set
  (assert
  (forall ((s (set a)) (t (set (tuple21 a b))) (x (set (tuple21 a (tuple21 a
  b)))))
  (= (mem (set1 (tuple2 a1 (tuple2 a1 b1))) (t2tb41 x)
  (infix_gtplgt (tuple2 a1 b1) a1 (t2tb1 s) (t2tb11 t)))
  (and (mem (set1 (tuple2 a1 (tuple2 a1 b1))) (t2tb41 x)
  (infix_plmngt (tuple2 a1 b1) a1 (t2tb1 s) (t2tb11 t))) (mem17
  (tb2t29 (inverse (tuple2 a1 b1) a1 (t2tb41 x)))
  (tb2t52 (infix_plmngt a1 (tuple2 a1 b1) (t2tb11 t) (t2tb1 s))))))))

;; mem_partial_injection_set
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (x uni))
  (= (mem (set1 (tuple2 a2 b2)) x (infix_gtplgt b2 a2 s t))
  (and (mem (set1 (tuple2 a2 b2)) x (infix_plmngt b2 a2 s t)) (mem
  (set1 (tuple2 b2 a2)) (inverse b2 a2 x) (infix_plmngt a2 b2 t s)))))))

(declare-fun infix_gtmngt (ty ty uni uni) uni)

;; infix >->_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (set1 (tuple2 a2 b2)))
  (infix_gtmngt b2 a2 x x1)))))

;; mem_total_injection_set
  (assert
  (forall ((s (set (tuple21 a b))) (t (set a)) (x (set (tuple21 (tuple21 a b)
  a))))
  (= (mem17 x (tb2t52 (infix_gtmngt a1 (tuple2 a1 b1) (t2tb11 s) (t2tb1 t))))
  (and (mem17 x
  (tb2t52 (infix_gtplgt a1 (tuple2 a1 b1) (t2tb11 s) (t2tb1 t)))) (mem17 x
  (infix_mnmngt5 s t))))))

;; mem_total_injection_set
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (x uni))
  (= (mem (set1 (tuple2 a2 b2)) x (infix_gtmngt b2 a2 s t))
  (and (mem (set1 (tuple2 a2 b2)) x (infix_gtplgt b2 a2 s t)) (mem
  (set1 (tuple2 a2 b2)) x (infix_mnmngt b2 a2 s t)))))))

(declare-fun infix_plmngtgt (ty ty uni uni) uni)

;; infix +->>_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (set1 (tuple2 a2 b2)))
  (infix_plmngtgt b2 a2 x x1)))))

;; mem_partial_surjection_set
  (assert
  (forall ((s (set (tuple21 a b))) (t (set a)) (x (set (tuple21 (tuple21 a b)
  a))))
  (= (mem17 x
  (tb2t52 (infix_plmngtgt a1 (tuple2 a1 b1) (t2tb11 s) (t2tb1 t))))
  (and (mem17 x
  (tb2t52 (infix_plmngt a1 (tuple2 a1 b1) (t2tb11 s) (t2tb1 t)))) (infix_eqeq
  a1 (ran a1 (tuple2 a1 b1) (t2tb29 x)) (t2tb1 t))))))

;; mem_partial_surjection_set
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (x uni))
  (= (mem (set1 (tuple2 a2 b2)) x (infix_plmngtgt b2 a2 s t))
  (and (mem (set1 (tuple2 a2 b2)) x (infix_plmngt b2 a2 s t)) (infix_eqeq b2
  (ran b2 a2 x) t))))))

(declare-fun infix_mnmngtgt (ty ty uni uni) uni)

;; infix -->>_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (set1 (tuple2 a2 b2)))
  (infix_mnmngtgt b2 a2 x x1)))))

;; mem_total_surjection_set
  (assert
  (forall ((s (set (tuple21 a b))) (t (set a)) (x (set (tuple21 (tuple21 a b)
  a))))
  (= (mem17 x
  (tb2t52 (infix_mnmngtgt a1 (tuple2 a1 b1) (t2tb11 s) (t2tb1 t))))
  (and (mem17 x
  (tb2t52 (infix_plmngtgt a1 (tuple2 a1 b1) (t2tb11 s) (t2tb1 t)))) (mem17 x
  (infix_mnmngt5 s t))))))

;; mem_total_surjection_set
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (x uni))
  (= (mem (set1 (tuple2 a2 b2)) x (infix_mnmngtgt b2 a2 s t))
  (and (mem (set1 (tuple2 a2 b2)) x (infix_plmngtgt b2 a2 s t)) (mem
  (set1 (tuple2 a2 b2)) x (infix_mnmngt b2 a2 s t)))))))

(declare-fun infix_gtplgtgt (ty ty uni uni) uni)

;; infix >+>>_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (set1 (tuple2 a2 b2)))
  (infix_gtplgtgt b2 a2 x x1)))))

;; mem_partial_bijection_set
  (assert
  (forall ((s (set (tuple21 a b))) (t (set a)) (x (set (tuple21 (tuple21 a b)
  a))))
  (= (mem17 x
  (tb2t52 (infix_gtplgtgt a1 (tuple2 a1 b1) (t2tb11 s) (t2tb1 t))))
  (and (mem17 x
  (tb2t52 (infix_gtplgt a1 (tuple2 a1 b1) (t2tb11 s) (t2tb1 t)))) (mem17 x
  (tb2t52 (infix_plmngtgt a1 (tuple2 a1 b1) (t2tb11 s) (t2tb1 t))))))))

;; mem_partial_bijection_set
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (x uni))
  (= (mem (set1 (tuple2 a2 b2)) x (infix_gtplgtgt b2 a2 s t))
  (and (mem (set1 (tuple2 a2 b2)) x (infix_gtplgt b2 a2 s t)) (mem
  (set1 (tuple2 a2 b2)) x (infix_plmngtgt b2 a2 s t)))))))

(declare-fun infix_gtmngtgt (ty ty uni uni) uni)

;; infix >->>_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (set1 (tuple2 a2 b2)))
  (infix_gtmngtgt b2 a2 x x1)))))

;; mem_total_bijection_set
  (assert
  (forall ((s (set (tuple21 a b))) (t (set a)) (x (set (tuple21 (tuple21 a b)
  a))))
  (= (mem17 x
  (tb2t52 (infix_gtmngtgt a1 (tuple2 a1 b1) (t2tb11 s) (t2tb1 t))))
  (and (mem17 x
  (tb2t52 (infix_gtmngt a1 (tuple2 a1 b1) (t2tb11 s) (t2tb1 t)))) (mem17 x
  (tb2t52 (infix_mnmngtgt a1 (tuple2 a1 b1) (t2tb11 s) (t2tb1 t))))))))

;; mem_total_bijection_set
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (x uni))
  (= (mem (set1 (tuple2 a2 b2)) x (infix_gtmngtgt b2 a2 s t))
  (and (mem (set1 (tuple2 a2 b2)) x (infix_gtmngt b2 a2 s t)) (mem
  (set1 (tuple2 a2 b2)) x (infix_mnmngtgt b2 a2 s t)))))))

(declare-fun apply (ty ty uni uni) uni)

;; apply_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort b2 (apply b2 a2 x x1)))))

;; apply_def0
  (assert
  (forall ((b2 ty))
  (forall ((f uni) (s (set (set (tuple21 (tuple21 a b) a)))) (t uni)
  (a2 (set (tuple21 (tuple21 a b) a))))
  (=>
  (and (mem (set1 (tuple2 (set1 (tuple2 (tuple2 a1 b1) a1)) b2)) f
  (infix_plmngt b2 (set1 (tuple2 (tuple2 a1 b1) a1)) (t2tb52 s) t)) (mem17 a2
  (tb2t52 (dom b2 (set1 (tuple2 (tuple2 a1 b1) a1)) f)))) (mem
  (tuple2 (set1 (tuple2 (tuple2 a1 b1) a1)) b2)
  (Tuple2 (set1 (tuple2 (tuple2 a1 b1) a1)) b2 (t2tb29 a2)
  (apply b2 (set1 (tuple2 (tuple2 a1 b1) a1)) f (t2tb29 a2))) f)))))

;; apply_def0
  (assert
  (forall ((b2 ty))
  (forall ((f uni) (s (set (tuple21 (tuple21 a b) a))) (t uni)
  (a2 (tuple21 (tuple21 a b) a)))
  (=>
  (and (mem (set1 (tuple2 (tuple2 (tuple2 a1 b1) a1) b2)) f
  (infix_plmngt b2 (tuple2 (tuple2 a1 b1) a1) (t2tb29 s) t)) (mem16 a2
  (tb2t29 (dom b2 (tuple2 (tuple2 a1 b1) a1) f)))) (mem
  (tuple2 (tuple2 (tuple2 a1 b1) a1) b2)
  (Tuple2 (tuple2 (tuple2 a1 b1) a1) b2 (t2tb30 a2)
  (apply b2 (tuple2 (tuple2 a1 b1) a1) f (t2tb30 a2))) f)))))

;; apply_def0
  (assert
  (forall ((f (set (tuple21 (tuple21 a b) a))) (s (set (tuple21 a b)))
  (t (set a)) (a2 (tuple21 a b)))
  (=>
  (and (mem17 f
  (tb2t52 (infix_plmngt a1 (tuple2 a1 b1) (t2tb11 s) (t2tb1 t)))) (mem3 a2
  (tb2t11 (dom a1 (tuple2 a1 b1) (t2tb29 f))))) (mem16
  (Tuple22 a2 (tb2t2 (apply a1 (tuple2 a1 b1) (t2tb29 f) (t2tb13 a2)))) f))))

;; apply_def0
  (assert
  (forall ((b2 ty))
  (forall ((f uni) (s (set (tuple21 a b))) (t uni) (a2 (tuple21 a b)))
  (=>
  (and (mem (set1 (tuple2 (tuple2 a1 b1) b2)) f
  (infix_plmngt b2 (tuple2 a1 b1) (t2tb11 s) t)) (mem3 a2
  (tb2t11 (dom b2 (tuple2 a1 b1) f)))) (mem (tuple2 (tuple2 a1 b1) b2)
  (Tuple2 (tuple2 a1 b1) b2 (t2tb13 a2)
  (apply b2 (tuple2 a1 b1) f (t2tb13 a2))) f)))))

;; apply_def0
  (assert
  (forall ((b2 ty))
  (forall ((f uni) (s (set b)) (t uni) (a2 b))
  (=>
  (and (mem (set1 (tuple2 b1 b2)) f (infix_plmngt b2 b1 (t2tb12 s) t)) (mem2
  a2 (tb2t12 (dom b2 b1 f)))) (mem (tuple2 b1 b2)
  (Tuple2 b1 b2 (t2tb14 a2) (apply b2 b1 f (t2tb14 a2))) f)))))

;; apply_def0
  (assert
  (forall ((f (set (tuple21 (set a) (set b)))) (s (set (set a)))
  (t (set (set b))) (a2 (set a)))
  (=>
  (and (mem (set1 (tuple2 (set1 a1) (set1 b1))) (t2tb538 f)
  (infix_plmngt (set1 b1) (set1 a1) (t2tb s) (t2tb44 t))) (mem (set1 a1)
  (t2tb1 a2) (dom (set1 b1) (set1 a1) (t2tb538 f)))) (mem
  (tuple2 (set1 a1) (set1 b1))
  (t2tb495
  (Tuple23 a2 (tb2t12 (apply (set1 b1) (set1 a1) (t2tb538 f) (t2tb1 a2)))))
  (t2tb538 f)))))

;; apply_def0
  (assert
  (forall ((f (set (tuple21 a b))) (s (set a)) (t (set b)) (a2 a))
  (=>
  (and (mem (set1 (tuple2 a1 b1)) (t2tb11 f)
  (infix_plmngt b1 a1 (t2tb1 s) (t2tb12 t))) (mem1 a2
  (tb2t1 (dom b1 a1 (t2tb11 f))))) (mem3
  (Tuple21 a2 (tb2t14 (apply b1 a1 (t2tb11 f) (t2tb2 a2)))) f))))

;; apply_def0
  (assert
  (forall ((b2 ty))
  (forall ((f uni) (s (set a)) (t uni) (a2 a))
  (=>
  (and (mem (set1 (tuple2 a1 b2)) f (infix_plmngt b2 a1 (t2tb1 s) t)) (mem1
  a2 (tb2t1 (dom b2 a1 f)))) (mem (tuple2 a1 b2)
  (Tuple2 a1 b2 (t2tb2 a2) (apply b2 a1 f (t2tb2 a2))) f)))))

;; apply_def0
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((f uni) (s uni) (t uni) (a3 uni))
  (=>
  (and (mem (set1 (tuple2 a2 b2)) f (infix_plmngt b2 a2 s t)) (mem a2 a3
  (dom b2 a2 f))) (mem (tuple2 a2 b2) (Tuple2 a2 b2 a3 (apply b2 a2 f a3))
  f)))))

(assert
;; mem_proj_1
 ;; File "lemmes_bbook.why", line 570, characters 7-17
  (not
  (forall ((s (set a)) (t (set b))) (mem17 (prj11 (Tuple23 s t))
  (infix_mnmngt5 (times2 s t) s)))))
(check-sat)
