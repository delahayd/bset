(set-logic AUFBVDTLIRA)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
(declare-sort uni 0)

(declare-sort ty 0)

(declare-fun sort (ty uni) Bool)

(declare-fun witness (ty) uni)

;; witness_sort
  (assert (forall ((a2 ty)) (sort a2 (witness a2))))

(declare-fun int () ty)

(declare-fun real () ty)

(declare-sort set 1)

(declare-fun set1 (ty) ty)

(declare-sort b 0)

(declare-fun b1 () ty)

(declare-sort a 0)

(declare-fun a1 () ty)

(declare-sort tuple21 2)

(declare-fun tuple2 (ty ty) ty)

(declare-fun mem (ty uni uni) Bool)

(declare-fun mem1 (a (set a)) Bool)

(declare-fun mem2 (b (set b)) Bool)

(declare-fun mem3 ((tuple21 a b) (set (tuple21 a b))) Bool)

(declare-fun mem4 ((set (tuple21 a b)) (set (set (tuple21 a b)))) Bool)

(declare-fun mem5 ((tuple21 b a) (set (tuple21 b a))) Bool)

(declare-fun mem6 ((set (tuple21 b a)) (set (set (tuple21 b a)))) Bool)

(declare-fun infix_eqeq (ty uni uni) Bool)

(declare-fun t2tb56 ((set (set (tuple21 b a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 b a))))) (sort (set1 (set1 (tuple2 b1 a1)))
  (t2tb56 x))))

(declare-fun tb2t56 (uni) (set (set (tuple21 b a))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 b a)))))
  (! (= (tb2t56 (t2tb56 i)) i) :pattern ((t2tb56 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 b1 a1))) j) (= (t2tb56 (tb2t56 j)) j)) :pattern (
  (t2tb56 (tb2t56 j))) )))

;; infix ==_def
  (assert
  (forall ((s (set (set (tuple21 b a)))) (t (set (set (tuple21 b a)))))
  (= (infix_eqeq (set1 (tuple2 b1 a1)) (t2tb56 s) (t2tb56 t))
  (forall ((x (set (tuple21 b a)))) (= (mem6 x s) (mem6 x t))))))

(declare-fun t2tb37 ((set (tuple21 b a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 b a)))) (sort (set1 (tuple2 b1 a1)) (t2tb37 x))))

(declare-fun tb2t37 (uni) (set (tuple21 b a)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 b a))))
  (! (= (tb2t37 (t2tb37 i)) i) :pattern ((t2tb37 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 b1 a1)) j) (= (t2tb37 (tb2t37 j)) j)) :pattern (
  (t2tb37 (tb2t37 j))) )))

;; infix ==_def
  (assert
  (forall ((s (set (tuple21 b a))) (t (set (tuple21 b a))))
  (= (infix_eqeq (tuple2 b1 a1) (t2tb37 s) (t2tb37 t))
  (forall ((x (tuple21 b a))) (= (mem5 x s) (mem5 x t))))))

(declare-fun t2tb10 ((set (set (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 a b))))) (sort (set1 (set1 (tuple2 a1 b1)))
  (t2tb10 x))))

(declare-fun tb2t10 (uni) (set (set (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 a b)))))
  (! (= (tb2t10 (t2tb10 i)) i) :pattern ((t2tb10 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 a1 b1))) j) (= (t2tb10 (tb2t10 j)) j)) :pattern (
  (t2tb10 (tb2t10 j))) )))

;; infix ==_def
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set (set (tuple21 a b)))))
  (= (infix_eqeq (set1 (tuple2 a1 b1)) (t2tb10 s) (t2tb10 t))
  (forall ((x (set (tuple21 a b)))) (= (mem4 x s) (mem4 x t))))))

(declare-fun t2tb11 ((set (tuple21 a b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a b)))) (sort (set1 (tuple2 a1 b1)) (t2tb11 x))))

(declare-fun tb2t11 (uni) (set (tuple21 a b)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a b))))
  (! (= (tb2t11 (t2tb11 i)) i) :pattern ((t2tb11 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 b1)) j) (= (t2tb11 (tb2t11 j)) j)) :pattern (
  (t2tb11 (tb2t11 j))) )))

;; infix ==_def
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (tuple21 a b))))
  (= (infix_eqeq (tuple2 a1 b1) (t2tb11 s) (t2tb11 t))
  (forall ((x (tuple21 a b))) (= (mem3 x s) (mem3 x t))))))

(declare-fun t2tb12 ((set b)) uni)

;; t2tb_sort
  (assert (forall ((x (set b))) (sort (set1 b1) (t2tb12 x))))

(declare-fun tb2t12 (uni) (set b))

;; BridgeL
  (assert
  (forall ((i (set b))) (! (= (tb2t12 (t2tb12 i)) i) :pattern ((t2tb12 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 b1) j) (= (t2tb12 (tb2t12 j)) j)) :pattern ((t2tb12
                                                                 (tb2t12 j))) )))

;; infix ==_def
  (assert
  (forall ((s (set b)) (t (set b)))
  (= (infix_eqeq b1 (t2tb12 s) (t2tb12 t))
  (forall ((x b)) (= (mem2 x s) (mem2 x t))))))

(declare-fun t2tb1 ((set a)) uni)

;; t2tb_sort
  (assert (forall ((x (set a))) (sort (set1 a1) (t2tb1 x))))

(declare-fun tb2t1 (uni) (set a))

;; BridgeL
  (assert
  (forall ((i (set a))) (! (= (tb2t1 (t2tb1 i)) i) :pattern ((t2tb1 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 a1) j) (= (t2tb1 (tb2t1 j)) j)) :pattern ((t2tb1
                                                               (tb2t1 j))) )))

;; infix ==_def
  (assert
  (forall ((s (set a)) (t (set a)))
  (= (infix_eqeq a1 (t2tb1 s) (t2tb1 t))
  (forall ((x a)) (= (mem1 x s) (mem1 x t))))))

;; infix ==_def
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t uni))
  (and
  (=> (infix_eqeq a2 s t) (forall ((x uni)) (= (mem a2 x s) (mem a2 x t))))
  (=> (forall ((x uni)) (=> (sort a2 x) (= (mem a2 x s) (mem a2 x t))))
  (infix_eqeq a2 s t))))))

(declare-fun power (ty uni) uni)

;; power_sort
  (assert
  (forall ((a2 ty)) (forall ((x uni)) (sort (set1 (set1 a2)) (power a2 x)))))

(declare-fun non_empty_power (ty uni) uni)

;; non_empty_power_sort
  (assert
  (forall ((a2 ty))
  (forall ((x uni)) (sort (set1 (set1 a2)) (non_empty_power a2 x)))))

(declare-fun subset1 (ty uni uni) Bool)

;; subset_def
  (assert
  (forall ((s (set (tuple21 b a))) (t (set (tuple21 b a))))
  (= (subset1 (tuple2 b1 a1) (t2tb37 s) (t2tb37 t)) (mem6 s
  (tb2t56 (power (tuple2 b1 a1) (t2tb37 t)))))))

;; subset_def
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (tuple21 a b))))
  (= (subset1 (tuple2 a1 b1) (t2tb11 s) (t2tb11 t)) (mem4 s
  (tb2t10 (power (tuple2 a1 b1) (t2tb11 t)))))))

;; subset_def
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t uni))
  (= (subset1 a2 s t) (mem (set1 a2) s (power a2 t))))))

(declare-fun subsetnoteq (ty uni uni) Bool)

;; subsetnoteq_def
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t uni))
  (= (subsetnoteq a2 s t) (and (subset1 a2 s t) (not (infix_eqeq a2 s t)))))))

(declare-fun empty (ty) uni)

;; empty_sort
  (assert (forall ((a2 ty)) (sort (set1 a2) (empty a2))))

(declare-fun is_empty (ty uni) Bool)

;; is_empty_def
  (assert
  (forall ((s (set (set (tuple21 b a)))))
  (= (is_empty (set1 (tuple2 b1 a1)) (t2tb56 s))
  (forall ((x (set (tuple21 b a)))) (not (mem6 x s))))))

;; is_empty_def
  (assert
  (forall ((s (set (tuple21 b a))))
  (= (is_empty (tuple2 b1 a1) (t2tb37 s))
  (forall ((x (tuple21 b a))) (not (mem5 x s))))))

;; is_empty_def
  (assert
  (forall ((s (set (set (tuple21 a b)))))
  (= (is_empty (set1 (tuple2 a1 b1)) (t2tb10 s))
  (forall ((x (set (tuple21 a b)))) (not (mem4 x s))))))

;; is_empty_def
  (assert
  (forall ((s (set (tuple21 a b))))
  (= (is_empty (tuple2 a1 b1) (t2tb11 s))
  (forall ((x (tuple21 a b))) (not (mem3 x s))))))

;; is_empty_def
  (assert
  (forall ((s (set b)))
  (= (is_empty b1 (t2tb12 s)) (forall ((x b)) (not (mem2 x s))))))

;; is_empty_def
  (assert
  (forall ((s (set a)))
  (= (is_empty a1 (t2tb1 s)) (forall ((x a)) (not (mem1 x s))))))

;; is_empty_def
  (assert
  (forall ((a2 ty))
  (forall ((s uni))
  (and (=> (is_empty a2 s) (forall ((x uni)) (not (mem a2 x s))))
  (=> (forall ((x uni)) (=> (sort a2 x) (not (mem a2 x s)))) (is_empty a2 s))))))

;; empty_def1
  (assert (forall ((a2 ty)) (is_empty a2 (empty a2))))

;; empty
  (assert
  (forall ((x (set (tuple21 b a))))
  (not (mem6 x (tb2t56 (empty (set1 (tuple2 b1 a1))))))))

;; empty
  (assert
  (forall ((x (tuple21 b a))) (not (mem5 x (tb2t37 (empty (tuple2 b1 a1)))))))

;; empty
  (assert
  (forall ((x (set (tuple21 a b))))
  (not (mem4 x (tb2t10 (empty (set1 (tuple2 a1 b1))))))))

;; empty
  (assert
  (forall ((x (tuple21 a b))) (not (mem3 x (tb2t11 (empty (tuple2 a1 b1)))))))

;; empty
  (assert (forall ((x b)) (not (mem2 x (tb2t12 (empty b1))))))

;; empty
  (assert (forall ((x a)) (not (mem1 x (tb2t1 (empty a1))))))

;; empty
  (assert (forall ((a2 ty)) (forall ((x uni)) (not (mem a2 x (empty a2))))))

(declare-fun add (ty uni uni) uni)

;; add_sort
  (assert
  (forall ((a2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 a2) (add a2 x x1)))))

;; add_def1
  (assert
  (forall ((x (set (tuple21 b a))) (y (set (tuple21 b a))))
  (forall ((s (set (set (tuple21 b a)))))
  (= (mem6 x (tb2t56 (add (set1 (tuple2 b1 a1)) (t2tb37 y) (t2tb56 s))))
  (or (= x y) (mem6 x s))))))

(declare-fun t2tb38 ((tuple21 b a)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 b a))) (sort (tuple2 b1 a1) (t2tb38 x))))

(declare-fun tb2t38 (uni) (tuple21 b a))

;; BridgeL
  (assert
  (forall ((i (tuple21 b a)))
  (! (= (tb2t38 (t2tb38 i)) i) :pattern ((t2tb38 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 b1 a1) j) (= (t2tb38 (tb2t38 j)) j)) :pattern (
  (t2tb38 (tb2t38 j))) )))

;; add_def1
  (assert
  (forall ((x (tuple21 b a)) (y (tuple21 b a)))
  (forall ((s (set (tuple21 b a))))
  (= (mem5 x (tb2t37 (add (tuple2 b1 a1) (t2tb38 y) (t2tb37 s))))
  (or (= x y) (mem5 x s))))))

;; add_def1
  (assert
  (forall ((x (set (tuple21 a b))) (y (set (tuple21 a b))))
  (forall ((s (set (set (tuple21 a b)))))
  (= (mem4 x (tb2t10 (add (set1 (tuple2 a1 b1)) (t2tb11 y) (t2tb10 s))))
  (or (= x y) (mem4 x s))))))

(declare-fun t2tb13 ((tuple21 a b)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 a b))) (sort (tuple2 a1 b1) (t2tb13 x))))

(declare-fun tb2t13 (uni) (tuple21 a b))

;; BridgeL
  (assert
  (forall ((i (tuple21 a b)))
  (! (= (tb2t13 (t2tb13 i)) i) :pattern ((t2tb13 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 b1) j) (= (t2tb13 (tb2t13 j)) j)) :pattern (
  (t2tb13 (tb2t13 j))) )))

;; add_def1
  (assert
  (forall ((x (tuple21 a b)) (y (tuple21 a b)))
  (forall ((s (set (tuple21 a b))))
  (= (mem3 x (tb2t11 (add (tuple2 a1 b1) (t2tb13 y) (t2tb11 s))))
  (or (= x y) (mem3 x s))))))

(declare-fun t2tb14 (b) uni)

;; t2tb_sort
  (assert (forall ((x b)) (sort b1 (t2tb14 x))))

(declare-fun tb2t14 (uni) b)

;; BridgeL
  (assert
  (forall ((i b)) (! (= (tb2t14 (t2tb14 i)) i) :pattern ((t2tb14 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort b1 j) (= (t2tb14 (tb2t14 j)) j)) :pattern ((t2tb14 (tb2t14 j))) )))

;; add_def1
  (assert
  (forall ((x b) (y b))
  (forall ((s (set b)))
  (= (mem2 x (tb2t12 (add b1 (t2tb14 y) (t2tb12 s))))
  (or (= x y) (mem2 x s))))))

(declare-fun t2tb2 (a) uni)

;; t2tb_sort
  (assert (forall ((x a)) (sort a1 (t2tb2 x))))

(declare-fun tb2t2 (uni) a)

;; BridgeL
  (assert (forall ((i a)) (! (= (tb2t2 (t2tb2 i)) i) :pattern ((t2tb2 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort a1 j) (= (t2tb2 (tb2t2 j)) j)) :pattern ((t2tb2 (tb2t2 j))) )))

;; add_def1
  (assert
  (forall ((x a) (y a))
  (forall ((s (set a)))
  (= (mem1 x (tb2t1 (add a1 (t2tb2 y) (t2tb1 s)))) (or (= x y) (mem1 x s))))))

;; add_def1
  (assert
  (forall ((a2 ty))
  (forall ((x uni) (y uni))
  (=> (sort a2 x)
  (=> (sort a2 y)
  (forall ((s uni)) (= (mem a2 x (add a2 y s)) (or (= x y) (mem a2 x s)))))))))

(declare-fun singleton (ty uni) uni)

;; singleton_sort
  (assert
  (forall ((a2 ty)) (forall ((x uni)) (sort (set1 a2) (singleton a2 x)))))

;; mem_singleton
  (assert
  (forall ((x (set (tuple21 b a))) (y (set (tuple21 b a))))
  (= (mem6 x (tb2t56 (singleton (set1 (tuple2 b1 a1)) (t2tb37 y)))) (= x y))))

;; mem_singleton
  (assert
  (forall ((x (tuple21 b a)) (y (tuple21 b a)))
  (= (mem5 x (tb2t37 (singleton (tuple2 b1 a1) (t2tb38 y)))) (= x y))))

;; mem_singleton
  (assert
  (forall ((x (set (tuple21 a b))) (y (set (tuple21 a b))))
  (= (mem4 x (tb2t10 (singleton (set1 (tuple2 a1 b1)) (t2tb11 y)))) (= x y))))

;; mem_singleton
  (assert
  (forall ((x (tuple21 a b)) (y (tuple21 a b)))
  (= (mem3 x (tb2t11 (singleton (tuple2 a1 b1) (t2tb13 y)))) (= x y))))

;; mem_singleton
  (assert
  (forall ((x b) (y b))
  (= (mem2 x (tb2t12 (singleton b1 (t2tb14 y)))) (= x y))))

;; mem_singleton
  (assert
  (forall ((x a) (y a))
  (= (mem1 x (tb2t1 (singleton a1 (t2tb2 y)))) (= x y))))

;; mem_singleton
  (assert
  (forall ((a2 ty))
  (forall ((x uni) (y uni))
  (=> (sort a2 x) (=> (sort a2 y) (= (mem a2 x (singleton a2 y)) (= x y)))))))

(declare-fun remove (ty uni uni) uni)

;; remove_sort
  (assert
  (forall ((a2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 a2) (remove a2 x x1)))))

;; remove_def1
  (assert
  (forall ((x (set (tuple21 b a))) (y (set (tuple21 b a)))
  (s (set (set (tuple21 b a)))))
  (= (mem6 x (tb2t56 (remove (set1 (tuple2 b1 a1)) (t2tb37 y) (t2tb56 s))))
  (and (not (= x y)) (mem6 x s)))))

;; remove_def1
  (assert
  (forall ((x (tuple21 b a)) (y (tuple21 b a)) (s (set (tuple21 b a))))
  (= (mem5 x (tb2t37 (remove (tuple2 b1 a1) (t2tb38 y) (t2tb37 s))))
  (and (not (= x y)) (mem5 x s)))))

;; remove_def1
  (assert
  (forall ((x (set (tuple21 a b))) (y (set (tuple21 a b)))
  (s (set (set (tuple21 a b)))))
  (= (mem4 x (tb2t10 (remove (set1 (tuple2 a1 b1)) (t2tb11 y) (t2tb10 s))))
  (and (not (= x y)) (mem4 x s)))))

;; remove_def1
  (assert
  (forall ((x (tuple21 a b)) (y (tuple21 a b)) (s (set (tuple21 a b))))
  (= (mem3 x (tb2t11 (remove (tuple2 a1 b1) (t2tb13 y) (t2tb11 s))))
  (and (not (= x y)) (mem3 x s)))))

;; remove_def1
  (assert
  (forall ((x b) (y b) (s (set b)))
  (= (mem2 x (tb2t12 (remove b1 (t2tb14 y) (t2tb12 s))))
  (and (not (= x y)) (mem2 x s)))))

;; remove_def1
  (assert
  (forall ((x a) (y a) (s (set a)))
  (= (mem1 x (tb2t1 (remove a1 (t2tb2 y) (t2tb1 s))))
  (and (not (= x y)) (mem1 x s)))))

;; remove_def1
  (assert
  (forall ((a2 ty))
  (forall ((x uni) (y uni) (s uni))
  (=> (sort a2 x)
  (=> (sort a2 y)
  (= (mem a2 x (remove a2 y s)) (and (not (= x y)) (mem a2 x s))))))))

(declare-fun all (ty) uni)

;; all_sort
  (assert (forall ((a2 ty)) (sort (set1 a2) (all a2))))

;; all_def
  (assert
  (forall ((x (set (tuple21 b a)))) (mem6 x
  (tb2t56 (all (set1 (tuple2 b1 a1)))))))

;; all_def
  (assert
  (forall ((x (tuple21 b a))) (mem5 x (tb2t37 (all (tuple2 b1 a1))))))

;; all_def
  (assert
  (forall ((x (set (tuple21 a b)))) (mem4 x
  (tb2t10 (all (set1 (tuple2 a1 b1)))))))

;; all_def
  (assert
  (forall ((x (tuple21 a b))) (mem3 x (tb2t11 (all (tuple2 a1 b1))))))

;; all_def
  (assert (forall ((x b)) (mem2 x (tb2t12 (all b1)))))

;; all_def
  (assert (forall ((x a)) (mem1 x (tb2t1 (all a1)))))

;; all_def
  (assert (forall ((a2 ty)) (forall ((x uni)) (mem a2 x (all a2)))))

(declare-fun union1 (ty uni uni) uni)

;; union_sort
  (assert
  (forall ((a2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 a2) (union1 a2 x x1)))))

;; mem_union
  (assert
  (forall ((s (set (set (tuple21 b a)))) (t (set (set (tuple21 b a))))
  (x (set (tuple21 b a))))
  (= (mem6 x (tb2t56 (union1 (set1 (tuple2 b1 a1)) (t2tb56 s) (t2tb56 t))))
  (or (mem6 x s) (mem6 x t)))))

;; mem_union
  (assert
  (forall ((s (set (tuple21 b a))) (t (set (tuple21 b a))) (x (tuple21 b a)))
  (= (mem5 x (tb2t37 (union1 (tuple2 b1 a1) (t2tb37 s) (t2tb37 t))))
  (or (mem5 x s) (mem5 x t)))))

;; mem_union
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set (set (tuple21 a b))))
  (x (set (tuple21 a b))))
  (= (mem4 x (tb2t10 (union1 (set1 (tuple2 a1 b1)) (t2tb10 s) (t2tb10 t))))
  (or (mem4 x s) (mem4 x t)))))

;; mem_union
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (tuple21 a b))) (x (tuple21 a b)))
  (= (mem3 x (tb2t11 (union1 (tuple2 a1 b1) (t2tb11 s) (t2tb11 t))))
  (or (mem3 x s) (mem3 x t)))))

;; mem_union
  (assert
  (forall ((s (set b)) (t (set b)) (x b))
  (= (mem2 x (tb2t12 (union1 b1 (t2tb12 s) (t2tb12 t))))
  (or (mem2 x s) (mem2 x t)))))

;; mem_union
  (assert
  (forall ((s (set a)) (t (set a)) (x a))
  (= (mem1 x (tb2t1 (union1 a1 (t2tb1 s) (t2tb1 t))))
  (or (mem1 x s) (mem1 x t)))))

;; mem_union
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t uni) (x uni))
  (= (mem a2 x (union1 a2 s t)) (or (mem a2 x s) (mem a2 x t))))))

(declare-fun inter (ty uni uni) uni)

;; inter_sort
  (assert
  (forall ((a2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 a2) (inter a2 x x1)))))

;; mem_inter
  (assert
  (forall ((s (set (set (tuple21 b a)))) (t (set (set (tuple21 b a))))
  (x (set (tuple21 b a))))
  (= (mem6 x (tb2t56 (inter (set1 (tuple2 b1 a1)) (t2tb56 s) (t2tb56 t))))
  (and (mem6 x s) (mem6 x t)))))

;; mem_inter
  (assert
  (forall ((s (set (tuple21 b a))) (t (set (tuple21 b a))) (x (tuple21 b a)))
  (= (mem5 x (tb2t37 (inter (tuple2 b1 a1) (t2tb37 s) (t2tb37 t))))
  (and (mem5 x s) (mem5 x t)))))

;; mem_inter
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set (set (tuple21 a b))))
  (x (set (tuple21 a b))))
  (= (mem4 x (tb2t10 (inter (set1 (tuple2 a1 b1)) (t2tb10 s) (t2tb10 t))))
  (and (mem4 x s) (mem4 x t)))))

;; mem_inter
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (tuple21 a b))) (x (tuple21 a b)))
  (= (mem3 x (tb2t11 (inter (tuple2 a1 b1) (t2tb11 s) (t2tb11 t))))
  (and (mem3 x s) (mem3 x t)))))

;; mem_inter
  (assert
  (forall ((s (set b)) (t (set b)) (x b))
  (= (mem2 x (tb2t12 (inter b1 (t2tb12 s) (t2tb12 t))))
  (and (mem2 x s) (mem2 x t)))))

;; mem_inter
  (assert
  (forall ((s (set a)) (t (set a)) (x a))
  (= (mem1 x (tb2t1 (inter a1 (t2tb1 s) (t2tb1 t))))
  (and (mem1 x s) (mem1 x t)))))

;; mem_inter
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t uni) (x uni))
  (= (mem a2 x (inter a2 s t)) (and (mem a2 x s) (mem a2 x t))))))

(declare-fun diff (ty uni uni) uni)

;; diff_sort
  (assert
  (forall ((a2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 a2) (diff a2 x x1)))))

;; mem_diff
  (assert
  (forall ((s (set (set (tuple21 b a)))) (t (set (set (tuple21 b a))))
  (x (set (tuple21 b a))))
  (= (mem6 x (tb2t56 (diff (set1 (tuple2 b1 a1)) (t2tb56 s) (t2tb56 t))))
  (and (mem6 x s) (not (mem6 x t))))))

;; mem_diff
  (assert
  (forall ((s (set (tuple21 b a))) (t (set (tuple21 b a))) (x (tuple21 b a)))
  (= (mem5 x (tb2t37 (diff (tuple2 b1 a1) (t2tb37 s) (t2tb37 t))))
  (and (mem5 x s) (not (mem5 x t))))))

;; mem_diff
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set (set (tuple21 a b))))
  (x (set (tuple21 a b))))
  (= (mem4 x (tb2t10 (diff (set1 (tuple2 a1 b1)) (t2tb10 s) (t2tb10 t))))
  (and (mem4 x s) (not (mem4 x t))))))

;; mem_diff
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (tuple21 a b))) (x (tuple21 a b)))
  (= (mem3 x (tb2t11 (diff (tuple2 a1 b1) (t2tb11 s) (t2tb11 t))))
  (and (mem3 x s) (not (mem3 x t))))))

;; mem_diff
  (assert
  (forall ((s (set b)) (t (set b)) (x b))
  (= (mem2 x (tb2t12 (diff b1 (t2tb12 s) (t2tb12 t))))
  (and (mem2 x s) (not (mem2 x t))))))

;; mem_diff
  (assert
  (forall ((s (set a)) (t (set a)) (x a))
  (= (mem1 x (tb2t1 (diff a1 (t2tb1 s) (t2tb1 t))))
  (and (mem1 x s) (not (mem1 x t))))))

;; mem_diff
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t uni) (x uni))
  (= (mem a2 x (diff a2 s t)) (and (mem a2 x s) (not (mem a2 x t)))))))

(declare-fun Tuple2 (ty ty uni uni) uni)

;; Tuple2_sort
  (assert
  (forall ((a2 ty) (a3 ty))
  (forall ((x uni) (x1 uni)) (sort (tuple2 a3 a2) (Tuple2 a3 a2 x x1)))))

(declare-fun Tuple2_proj_1 (ty ty uni) uni)

;; Tuple2_proj_1_sort
  (assert
  (forall ((a2 ty) (a3 ty))
  (forall ((x uni)) (sort a3 (Tuple2_proj_1 a3 a2 x)))))

;; Tuple2_proj_1_def
  (assert
  (forall ((a2 ty) (a3 ty))
  (forall ((u uni) (u1 uni))
  (=> (sort a3 u) (= (Tuple2_proj_1 a3 a2 (Tuple2 a3 a2 u u1)) u)))))

(declare-fun Tuple2_proj_2 (ty ty uni) uni)

;; Tuple2_proj_2_sort
  (assert
  (forall ((a2 ty) (a3 ty))
  (forall ((x uni)) (sort a2 (Tuple2_proj_2 a3 a2 x)))))

;; Tuple2_proj_2_def
  (assert
  (forall ((a2 ty) (a3 ty))
  (forall ((u uni) (u1 uni))
  (=> (sort a2 u1) (= (Tuple2_proj_2 a3 a2 (Tuple2 a3 a2 u u1)) u1)))))

;; tuple2_inversion
  (assert
  (forall ((a2 ty) (a3 ty))
  (forall ((u uni))
  (=> (sort (tuple2 a3 a2) u)
  (= u (Tuple2 a3 a2 (Tuple2_proj_1 a3 a2 u) (Tuple2_proj_2 a3 a2 u)))))))

(declare-fun times (ty ty uni uni) uni)

;; times_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (tuple2 a2 b2)) (times b2 a2 x x1)))))

;; mem_times
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set (set (tuple21 b a)))) (x uni) (y (set (tuple21 b
  a))))
  (= (mem (tuple2 a2 (set1 (tuple2 b1 a1)))
  (Tuple2 a2 (set1 (tuple2 b1 a1)) x (t2tb37 y))
  (times (set1 (tuple2 b1 a1)) a2 s (t2tb56 t)))
  (and (mem a2 x s) (mem6 y t))))))

;; mem_times
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set (tuple21 b a))) (x uni) (y (tuple21 b a)))
  (= (mem (tuple2 a2 (tuple2 b1 a1)) (Tuple2 a2 (tuple2 b1 a1) x (t2tb38 y))
  (times (tuple2 b1 a1) a2 s (t2tb37 t))) (and (mem a2 x s) (mem5 y t))))))

;; mem_times
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set (set (tuple21 a b)))) (x uni) (y (set (tuple21 a
  b))))
  (= (mem (tuple2 a2 (set1 (tuple2 a1 b1)))
  (Tuple2 a2 (set1 (tuple2 a1 b1)) x (t2tb11 y))
  (times (set1 (tuple2 a1 b1)) a2 s (t2tb10 t)))
  (and (mem a2 x s) (mem4 y t))))))

;; mem_times
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set (tuple21 a b))) (x uni) (y (tuple21 a b)))
  (= (mem (tuple2 a2 (tuple2 a1 b1)) (Tuple2 a2 (tuple2 a1 b1) x (t2tb13 y))
  (times (tuple2 a1 b1) a2 s (t2tb11 t))) (and (mem a2 x s) (mem3 y t))))))

;; mem_times
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set b)) (x uni) (y b))
  (= (mem (tuple2 a2 b1) (Tuple2 a2 b1 x (t2tb14 y))
  (times b1 a2 s (t2tb12 t))) (and (mem a2 x s) (mem2 y t))))))

;; mem_times
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set a)) (x uni) (y a))
  (= (mem (tuple2 a2 a1) (Tuple2 a2 a1 x (t2tb2 y))
  (times a1 a2 s (t2tb1 t))) (and (mem a2 x s) (mem1 y t))))))

(declare-fun t2tb63 ((set (tuple21 (set (tuple21 b a)) (set (tuple21 b
  a))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 b a)) (set (tuple21 b a)))))) (sort
  (set1 (tuple2 (set1 (tuple2 b1 a1)) (set1 (tuple2 b1 a1)))) (t2tb63 x))))

(declare-fun tb2t63 (uni) (set (tuple21 (set (tuple21 b a)) (set (tuple21 b
  a)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 b a)) (set (tuple21 b a))))))
  (! (= (tb2t63 (t2tb63 i)) i) :pattern ((t2tb63 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 b1 a1)) (set1 (tuple2 b1 a1)))) j)
     (= (t2tb63 (tb2t63 j)) j)) :pattern ((t2tb63 (tb2t63 j))) )))

(declare-fun t2tb64 ((tuple21 (set (tuple21 b a)) (set (tuple21 b a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 b a)) (set (tuple21 b a))))) (sort
  (tuple2 (set1 (tuple2 b1 a1)) (set1 (tuple2 b1 a1))) (t2tb64 x))))

(declare-fun tb2t64 (uni) (tuple21 (set (tuple21 b a)) (set (tuple21 b a))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 b a)) (set (tuple21 b a)))))
  (! (= (tb2t64 (t2tb64 i)) i) :pattern ((t2tb64 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 b1 a1)) (set1 (tuple2 b1 a1))) j)
     (= (t2tb64 (tb2t64 j)) j)) :pattern ((t2tb64 (tb2t64 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 b a)))) (t (set (set (tuple21 b a))))
  (x (set (tuple21 b a))) (y (set (tuple21 b a))))
  (= (mem (tuple2 (set1 (tuple2 b1 a1)) (set1 (tuple2 b1 a1)))
  (Tuple2 (set1 (tuple2 b1 a1)) (set1 (tuple2 b1 a1)) (t2tb37 x) (t2tb37 y))
  (times (set1 (tuple2 b1 a1)) (set1 (tuple2 b1 a1)) (t2tb56 s) (t2tb56 t)))
  (and (mem6 x s) (mem6 y t)))))

(declare-fun t2tb65 ((tuple21 (set (tuple21 b a)) (tuple21 b a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 b a)) (tuple21 b a)))) (sort
  (tuple2 (set1 (tuple2 b1 a1)) (tuple2 b1 a1)) (t2tb65 x))))

(declare-fun tb2t65 (uni) (tuple21 (set (tuple21 b a)) (tuple21 b a)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 b a)) (tuple21 b a))))
  (! (= (tb2t65 (t2tb65 i)) i) :pattern ((t2tb65 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 b1 a1)) (tuple2 b1 a1)) j)
     (= (t2tb65 (tb2t65 j)) j)) :pattern ((t2tb65 (tb2t65 j))) )))

(declare-fun t2tb66 ((set (tuple21 (set (tuple21 b a)) (tuple21 b a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 b a)) (tuple21 b a))))) (sort
  (set1 (tuple2 (set1 (tuple2 b1 a1)) (tuple2 b1 a1))) (t2tb66 x))))

(declare-fun tb2t66 (uni) (set (tuple21 (set (tuple21 b a)) (tuple21 b a))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 b a)) (tuple21 b a)))))
  (! (= (tb2t66 (t2tb66 i)) i) :pattern ((t2tb66 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 b1 a1)) (tuple2 b1 a1))) j)
     (= (t2tb66 (tb2t66 j)) j)) :pattern ((t2tb66 (tb2t66 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 b a)))) (t (set (tuple21 b a)))
  (x (set (tuple21 b a))) (y (tuple21 b a)))
  (= (mem (tuple2 (set1 (tuple2 b1 a1)) (tuple2 b1 a1))
  (Tuple2 (set1 (tuple2 b1 a1)) (tuple2 b1 a1) (t2tb37 x) (t2tb38 y))
  (times (tuple2 b1 a1) (set1 (tuple2 b1 a1)) (t2tb56 s) (t2tb37 t)))
  (and (mem6 x s) (mem5 y t)))))

(declare-fun t2tb67 ((set (tuple21 (set (tuple21 b a)) (set (tuple21 a
  b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 b a)) (set (tuple21 a b)))))) (sort
  (set1 (tuple2 (set1 (tuple2 b1 a1)) (set1 (tuple2 a1 b1)))) (t2tb67 x))))

(declare-fun tb2t67 (uni) (set (tuple21 (set (tuple21 b a)) (set (tuple21 a
  b)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 b a)) (set (tuple21 a b))))))
  (! (= (tb2t67 (t2tb67 i)) i) :pattern ((t2tb67 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 b1 a1)) (set1 (tuple2 a1 b1)))) j)
     (= (t2tb67 (tb2t67 j)) j)) :pattern ((t2tb67 (tb2t67 j))) )))

(declare-fun t2tb68 ((tuple21 (set (tuple21 b a)) (set (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 b a)) (set (tuple21 a b))))) (sort
  (tuple2 (set1 (tuple2 b1 a1)) (set1 (tuple2 a1 b1))) (t2tb68 x))))

(declare-fun tb2t68 (uni) (tuple21 (set (tuple21 b a)) (set (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 b a)) (set (tuple21 a b)))))
  (! (= (tb2t68 (t2tb68 i)) i) :pattern ((t2tb68 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 b1 a1)) (set1 (tuple2 a1 b1))) j)
     (= (t2tb68 (tb2t68 j)) j)) :pattern ((t2tb68 (tb2t68 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 b a)))) (t (set (set (tuple21 a b))))
  (x (set (tuple21 b a))) (y (set (tuple21 a b))))
  (= (mem (tuple2 (set1 (tuple2 b1 a1)) (set1 (tuple2 a1 b1)))
  (Tuple2 (set1 (tuple2 b1 a1)) (set1 (tuple2 a1 b1)) (t2tb37 x) (t2tb11 y))
  (times (set1 (tuple2 a1 b1)) (set1 (tuple2 b1 a1)) (t2tb56 s) (t2tb10 t)))
  (and (mem6 x s) (mem4 y t)))))

(declare-fun t2tb69 ((set (tuple21 (set (tuple21 b a)) (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 b a)) (tuple21 a b))))) (sort
  (set1 (tuple2 (set1 (tuple2 b1 a1)) (tuple2 a1 b1))) (t2tb69 x))))

(declare-fun tb2t69 (uni) (set (tuple21 (set (tuple21 b a)) (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 b a)) (tuple21 a b)))))
  (! (= (tb2t69 (t2tb69 i)) i) :pattern ((t2tb69 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 b1 a1)) (tuple2 a1 b1))) j)
     (= (t2tb69 (tb2t69 j)) j)) :pattern ((t2tb69 (tb2t69 j))) )))

(declare-fun t2tb70 ((tuple21 (set (tuple21 b a)) (tuple21 a b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 b a)) (tuple21 a b)))) (sort
  (tuple2 (set1 (tuple2 b1 a1)) (tuple2 a1 b1)) (t2tb70 x))))

(declare-fun tb2t70 (uni) (tuple21 (set (tuple21 b a)) (tuple21 a b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 b a)) (tuple21 a b))))
  (! (= (tb2t70 (t2tb70 i)) i) :pattern ((t2tb70 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 b1 a1)) (tuple2 a1 b1)) j)
     (= (t2tb70 (tb2t70 j)) j)) :pattern ((t2tb70 (tb2t70 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 b a)))) (t (set (tuple21 a b)))
  (x (set (tuple21 b a))) (y (tuple21 a b)))
  (= (mem (tuple2 (set1 (tuple2 b1 a1)) (tuple2 a1 b1))
  (Tuple2 (set1 (tuple2 b1 a1)) (tuple2 a1 b1) (t2tb37 x) (t2tb13 y))
  (times (tuple2 a1 b1) (set1 (tuple2 b1 a1)) (t2tb56 s) (t2tb11 t)))
  (and (mem6 x s) (mem3 y t)))))

(declare-fun t2tb71 ((set (tuple21 (set (tuple21 b a)) b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 b a)) b)))) (sort
  (set1 (tuple2 (set1 (tuple2 b1 a1)) b1)) (t2tb71 x))))

(declare-fun tb2t71 (uni) (set (tuple21 (set (tuple21 b a)) b)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 b a)) b))))
  (! (= (tb2t71 (t2tb71 i)) i) :pattern ((t2tb71 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 b1 a1)) b1)) j)
     (= (t2tb71 (tb2t71 j)) j)) :pattern ((t2tb71 (tb2t71 j))) )))

(declare-fun t2tb72 ((tuple21 (set (tuple21 b a)) b)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 b a)) b))) (sort
  (tuple2 (set1 (tuple2 b1 a1)) b1) (t2tb72 x))))

(declare-fun tb2t72 (uni) (tuple21 (set (tuple21 b a)) b))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 b a)) b)))
  (! (= (tb2t72 (t2tb72 i)) i) :pattern ((t2tb72 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 b1 a1)) b1) j)
     (= (t2tb72 (tb2t72 j)) j)) :pattern ((t2tb72 (tb2t72 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 b a)))) (t (set b)) (x (set (tuple21 b a)))
  (y b))
  (= (mem (tuple2 (set1 (tuple2 b1 a1)) b1)
  (Tuple2 (set1 (tuple2 b1 a1)) b1 (t2tb37 x) (t2tb14 y))
  (times b1 (set1 (tuple2 b1 a1)) (t2tb56 s) (t2tb12 t)))
  (and (mem6 x s) (mem2 y t)))))

(declare-fun t2tb73 ((set (tuple21 (set (tuple21 b a)) a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 b a)) a)))) (sort
  (set1 (tuple2 (set1 (tuple2 b1 a1)) a1)) (t2tb73 x))))

(declare-fun tb2t73 (uni) (set (tuple21 (set (tuple21 b a)) a)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 b a)) a))))
  (! (= (tb2t73 (t2tb73 i)) i) :pattern ((t2tb73 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 b1 a1)) a1)) j)
     (= (t2tb73 (tb2t73 j)) j)) :pattern ((t2tb73 (tb2t73 j))) )))

(declare-fun t2tb74 ((tuple21 (set (tuple21 b a)) a)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 b a)) a))) (sort
  (tuple2 (set1 (tuple2 b1 a1)) a1) (t2tb74 x))))

(declare-fun tb2t74 (uni) (tuple21 (set (tuple21 b a)) a))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 b a)) a)))
  (! (= (tb2t74 (t2tb74 i)) i) :pattern ((t2tb74 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 b1 a1)) a1) j)
     (= (t2tb74 (tb2t74 j)) j)) :pattern ((t2tb74 (tb2t74 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 b a)))) (t (set a)) (x (set (tuple21 b a)))
  (y a))
  (= (mem (tuple2 (set1 (tuple2 b1 a1)) a1)
  (Tuple2 (set1 (tuple2 b1 a1)) a1 (t2tb37 x) (t2tb2 y))
  (times a1 (set1 (tuple2 b1 a1)) (t2tb56 s) (t2tb1 t)))
  (and (mem6 x s) (mem1 y t)))))

;; mem_times
  (assert
  (forall ((b2 ty))
  (forall ((s (set (set (tuple21 b a)))) (t uni) (x (set (tuple21 b a)))
  (y uni))
  (= (mem (tuple2 (set1 (tuple2 b1 a1)) b2)
  (Tuple2 (set1 (tuple2 b1 a1)) b2 (t2tb37 x) y)
  (times b2 (set1 (tuple2 b1 a1)) (t2tb56 s) t))
  (and (mem6 x s) (mem b2 y t))))))

(declare-fun t2tb75 ((set (tuple21 (tuple21 b a) (set (tuple21 b a))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b a) (set (tuple21 b a)))))) (sort
  (set1 (tuple2 (tuple2 b1 a1) (set1 (tuple2 b1 a1)))) (t2tb75 x))))

(declare-fun tb2t75 (uni) (set (tuple21 (tuple21 b a) (set (tuple21 b a)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b a) (set (tuple21 b a))))))
  (! (= (tb2t75 (t2tb75 i)) i) :pattern ((t2tb75 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 a1) (set1 (tuple2 b1 a1)))) j)
     (= (t2tb75 (tb2t75 j)) j)) :pattern ((t2tb75 (tb2t75 j))) )))

(declare-fun t2tb76 ((tuple21 (tuple21 b a) (set (tuple21 b a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b a) (set (tuple21 b a))))) (sort
  (tuple2 (tuple2 b1 a1) (set1 (tuple2 b1 a1))) (t2tb76 x))))

(declare-fun tb2t76 (uni) (tuple21 (tuple21 b a) (set (tuple21 b a))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b a) (set (tuple21 b a)))))
  (! (= (tb2t76 (t2tb76 i)) i) :pattern ((t2tb76 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 a1) (set1 (tuple2 b1 a1))) j)
     (= (t2tb76 (tb2t76 j)) j)) :pattern ((t2tb76 (tb2t76 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 b a))) (t (set (set (tuple21 b a))))
  (x (tuple21 b a)) (y (set (tuple21 b a))))
  (= (mem (tuple2 (tuple2 b1 a1) (set1 (tuple2 b1 a1)))
  (Tuple2 (tuple2 b1 a1) (set1 (tuple2 b1 a1)) (t2tb38 x) (t2tb37 y))
  (times (set1 (tuple2 b1 a1)) (tuple2 b1 a1) (t2tb37 s) (t2tb56 t)))
  (and (mem5 x s) (mem6 y t)))))

(declare-fun t2tb77 ((set (tuple21 (tuple21 b a) (tuple21 b a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b a) (tuple21 b a))))) (sort
  (set1 (tuple2 (tuple2 b1 a1) (tuple2 b1 a1))) (t2tb77 x))))

(declare-fun tb2t77 (uni) (set (tuple21 (tuple21 b a) (tuple21 b a))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b a) (tuple21 b a)))))
  (! (= (tb2t77 (t2tb77 i)) i) :pattern ((t2tb77 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 a1) (tuple2 b1 a1))) j)
     (= (t2tb77 (tb2t77 j)) j)) :pattern ((t2tb77 (tb2t77 j))) )))

(declare-fun t2tb78 ((tuple21 (tuple21 b a) (tuple21 b a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b a) (tuple21 b a)))) (sort
  (tuple2 (tuple2 b1 a1) (tuple2 b1 a1)) (t2tb78 x))))

(declare-fun tb2t78 (uni) (tuple21 (tuple21 b a) (tuple21 b a)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b a) (tuple21 b a))))
  (! (= (tb2t78 (t2tb78 i)) i) :pattern ((t2tb78 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 a1) (tuple2 b1 a1)) j)
     (= (t2tb78 (tb2t78 j)) j)) :pattern ((t2tb78 (tb2t78 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 b a))) (t (set (tuple21 b a))) (x (tuple21 b a))
  (y (tuple21 b a)))
  (= (mem (tuple2 (tuple2 b1 a1) (tuple2 b1 a1))
  (Tuple2 (tuple2 b1 a1) (tuple2 b1 a1) (t2tb38 x) (t2tb38 y))
  (times (tuple2 b1 a1) (tuple2 b1 a1) (t2tb37 s) (t2tb37 t)))
  (and (mem5 x s) (mem5 y t)))))

(declare-fun t2tb79 ((tuple21 (tuple21 b a) (set (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b a) (set (tuple21 a b))))) (sort
  (tuple2 (tuple2 b1 a1) (set1 (tuple2 a1 b1))) (t2tb79 x))))

(declare-fun tb2t79 (uni) (tuple21 (tuple21 b a) (set (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b a) (set (tuple21 a b)))))
  (! (= (tb2t79 (t2tb79 i)) i) :pattern ((t2tb79 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 a1) (set1 (tuple2 a1 b1))) j)
     (= (t2tb79 (tb2t79 j)) j)) :pattern ((t2tb79 (tb2t79 j))) )))

(declare-fun t2tb80 ((set (tuple21 (tuple21 b a) (set (tuple21 a b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b a) (set (tuple21 a b)))))) (sort
  (set1 (tuple2 (tuple2 b1 a1) (set1 (tuple2 a1 b1)))) (t2tb80 x))))

(declare-fun tb2t80 (uni) (set (tuple21 (tuple21 b a) (set (tuple21 a b)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b a) (set (tuple21 a b))))))
  (! (= (tb2t80 (t2tb80 i)) i) :pattern ((t2tb80 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 a1) (set1 (tuple2 a1 b1)))) j)
     (= (t2tb80 (tb2t80 j)) j)) :pattern ((t2tb80 (tb2t80 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 b a))) (t (set (set (tuple21 a b))))
  (x (tuple21 b a)) (y (set (tuple21 a b))))
  (= (mem (tuple2 (tuple2 b1 a1) (set1 (tuple2 a1 b1)))
  (Tuple2 (tuple2 b1 a1) (set1 (tuple2 a1 b1)) (t2tb38 x) (t2tb11 y))
  (times (set1 (tuple2 a1 b1)) (tuple2 b1 a1) (t2tb37 s) (t2tb10 t)))
  (and (mem5 x s) (mem4 y t)))))

(declare-fun t2tb81 ((set (tuple21 (tuple21 b a) (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b a) (tuple21 a b))))) (sort
  (set1 (tuple2 (tuple2 b1 a1) (tuple2 a1 b1))) (t2tb81 x))))

(declare-fun tb2t81 (uni) (set (tuple21 (tuple21 b a) (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b a) (tuple21 a b)))))
  (! (= (tb2t81 (t2tb81 i)) i) :pattern ((t2tb81 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 a1) (tuple2 a1 b1))) j)
     (= (t2tb81 (tb2t81 j)) j)) :pattern ((t2tb81 (tb2t81 j))) )))

(declare-fun t2tb82 ((tuple21 (tuple21 b a) (tuple21 a b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b a) (tuple21 a b)))) (sort
  (tuple2 (tuple2 b1 a1) (tuple2 a1 b1)) (t2tb82 x))))

(declare-fun tb2t82 (uni) (tuple21 (tuple21 b a) (tuple21 a b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b a) (tuple21 a b))))
  (! (= (tb2t82 (t2tb82 i)) i) :pattern ((t2tb82 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 a1) (tuple2 a1 b1)) j)
     (= (t2tb82 (tb2t82 j)) j)) :pattern ((t2tb82 (tb2t82 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 b a))) (t (set (tuple21 a b))) (x (tuple21 b a))
  (y (tuple21 a b)))
  (= (mem (tuple2 (tuple2 b1 a1) (tuple2 a1 b1))
  (Tuple2 (tuple2 b1 a1) (tuple2 a1 b1) (t2tb38 x) (t2tb13 y))
  (times (tuple2 a1 b1) (tuple2 b1 a1) (t2tb37 s) (t2tb11 t)))
  (and (mem5 x s) (mem3 y t)))))

(declare-fun t2tb83 ((set (tuple21 (tuple21 b a) b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b a) b)))) (sort
  (set1 (tuple2 (tuple2 b1 a1) b1)) (t2tb83 x))))

(declare-fun tb2t83 (uni) (set (tuple21 (tuple21 b a) b)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b a) b))))
  (! (= (tb2t83 (t2tb83 i)) i) :pattern ((t2tb83 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 a1) b1)) j)
     (= (t2tb83 (tb2t83 j)) j)) :pattern ((t2tb83 (tb2t83 j))) )))

(declare-fun t2tb84 ((tuple21 (tuple21 b a) b)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b a) b))) (sort (tuple2 (tuple2 b1 a1) b1)
  (t2tb84 x))))

(declare-fun tb2t84 (uni) (tuple21 (tuple21 b a) b))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b a) b)))
  (! (= (tb2t84 (t2tb84 i)) i) :pattern ((t2tb84 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 a1) b1) j) (= (t2tb84 (tb2t84 j)) j)) :pattern (
  (t2tb84 (tb2t84 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 b a))) (t (set b)) (x (tuple21 b a)) (y b))
  (= (mem (tuple2 (tuple2 b1 a1) b1)
  (Tuple2 (tuple2 b1 a1) b1 (t2tb38 x) (t2tb14 y))
  (times b1 (tuple2 b1 a1) (t2tb37 s) (t2tb12 t)))
  (and (mem5 x s) (mem2 y t)))))

(declare-fun t2tb85 ((set (tuple21 (tuple21 b a) a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b a) a)))) (sort
  (set1 (tuple2 (tuple2 b1 a1) a1)) (t2tb85 x))))

(declare-fun tb2t85 (uni) (set (tuple21 (tuple21 b a) a)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b a) a))))
  (! (= (tb2t85 (t2tb85 i)) i) :pattern ((t2tb85 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 a1) a1)) j)
     (= (t2tb85 (tb2t85 j)) j)) :pattern ((t2tb85 (tb2t85 j))) )))

(declare-fun t2tb86 ((tuple21 (tuple21 b a) a)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b a) a))) (sort (tuple2 (tuple2 b1 a1) a1)
  (t2tb86 x))))

(declare-fun tb2t86 (uni) (tuple21 (tuple21 b a) a))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b a) a)))
  (! (= (tb2t86 (t2tb86 i)) i) :pattern ((t2tb86 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 a1) a1) j) (= (t2tb86 (tb2t86 j)) j)) :pattern (
  (t2tb86 (tb2t86 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 b a))) (t (set a)) (x (tuple21 b a)) (y a))
  (= (mem (tuple2 (tuple2 b1 a1) a1)
  (Tuple2 (tuple2 b1 a1) a1 (t2tb38 x) (t2tb2 y))
  (times a1 (tuple2 b1 a1) (t2tb37 s) (t2tb1 t)))
  (and (mem5 x s) (mem1 y t)))))

;; mem_times
  (assert
  (forall ((b2 ty))
  (forall ((s (set (tuple21 b a))) (t uni) (x (tuple21 b a)) (y uni))
  (= (mem (tuple2 (tuple2 b1 a1) b2) (Tuple2 (tuple2 b1 a1) b2 (t2tb38 x) y)
  (times b2 (tuple2 b1 a1) (t2tb37 s) t)) (and (mem5 x s) (mem b2 y t))))))

(declare-fun t2tb87 ((set (tuple21 (set (tuple21 a b)) (set (tuple21 b
  a))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a b)) (set (tuple21 b a)))))) (sort
  (set1 (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 b1 a1)))) (t2tb87 x))))

(declare-fun tb2t87 (uni) (set (tuple21 (set (tuple21 a b)) (set (tuple21 b
  a)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a b)) (set (tuple21 b a))))))
  (! (= (tb2t87 (t2tb87 i)) i) :pattern ((t2tb87 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 b1 a1)))) j)
     (= (t2tb87 (tb2t87 j)) j)) :pattern ((t2tb87 (tb2t87 j))) )))

(declare-fun t2tb88 ((tuple21 (set (tuple21 a b)) (set (tuple21 b a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a b)) (set (tuple21 b a))))) (sort
  (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 b1 a1))) (t2tb88 x))))

(declare-fun tb2t88 (uni) (tuple21 (set (tuple21 a b)) (set (tuple21 b a))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a b)) (set (tuple21 b a)))))
  (! (= (tb2t88 (t2tb88 i)) i) :pattern ((t2tb88 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 b1 a1))) j)
     (= (t2tb88 (tb2t88 j)) j)) :pattern ((t2tb88 (tb2t88 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set (set (tuple21 b a))))
  (x (set (tuple21 a b))) (y (set (tuple21 b a))))
  (= (mem (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 b1 a1)))
  (Tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 b1 a1)) (t2tb11 x) (t2tb37 y))
  (times (set1 (tuple2 b1 a1)) (set1 (tuple2 a1 b1)) (t2tb10 s) (t2tb56 t)))
  (and (mem4 x s) (mem6 y t)))))

(declare-fun t2tb89 ((set (tuple21 (set (tuple21 a b)) (tuple21 b a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a b)) (tuple21 b a))))) (sort
  (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 b1 a1))) (t2tb89 x))))

(declare-fun tb2t89 (uni) (set (tuple21 (set (tuple21 a b)) (tuple21 b a))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a b)) (tuple21 b a)))))
  (! (= (tb2t89 (t2tb89 i)) i) :pattern ((t2tb89 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 b1 a1))) j)
     (= (t2tb89 (tb2t89 j)) j)) :pattern ((t2tb89 (tb2t89 j))) )))

(declare-fun t2tb90 ((tuple21 (set (tuple21 a b)) (tuple21 b a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a b)) (tuple21 b a)))) (sort
  (tuple2 (set1 (tuple2 a1 b1)) (tuple2 b1 a1)) (t2tb90 x))))

(declare-fun tb2t90 (uni) (tuple21 (set (tuple21 a b)) (tuple21 b a)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a b)) (tuple21 b a))))
  (! (= (tb2t90 (t2tb90 i)) i) :pattern ((t2tb90 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 a1 b1)) (tuple2 b1 a1)) j)
     (= (t2tb90 (tb2t90 j)) j)) :pattern ((t2tb90 (tb2t90 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set (tuple21 b a)))
  (x (set (tuple21 a b))) (y (tuple21 b a)))
  (= (mem (tuple2 (set1 (tuple2 a1 b1)) (tuple2 b1 a1))
  (Tuple2 (set1 (tuple2 a1 b1)) (tuple2 b1 a1) (t2tb11 x) (t2tb38 y))
  (times (tuple2 b1 a1) (set1 (tuple2 a1 b1)) (t2tb10 s) (t2tb37 t)))
  (and (mem4 x s) (mem5 y t)))))

(declare-fun t2tb15 ((set (tuple21 (set (tuple21 a b)) (set (tuple21 a
  b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a b)) (set (tuple21 a b)))))) (sort
  (set1 (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1)))) (t2tb15 x))))

(declare-fun tb2t15 (uni) (set (tuple21 (set (tuple21 a b)) (set (tuple21 a
  b)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a b)) (set (tuple21 a b))))))
  (! (= (tb2t15 (t2tb15 i)) i) :pattern ((t2tb15 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1)))) j)
     (= (t2tb15 (tb2t15 j)) j)) :pattern ((t2tb15 (tb2t15 j))) )))

(declare-fun t2tb16 ((tuple21 (set (tuple21 a b)) (set (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a b)) (set (tuple21 a b))))) (sort
  (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1))) (t2tb16 x))))

(declare-fun tb2t16 (uni) (tuple21 (set (tuple21 a b)) (set (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a b)) (set (tuple21 a b)))))
  (! (= (tb2t16 (t2tb16 i)) i) :pattern ((t2tb16 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1))) j)
     (= (t2tb16 (tb2t16 j)) j)) :pattern ((t2tb16 (tb2t16 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set (set (tuple21 a b))))
  (x (set (tuple21 a b))) (y (set (tuple21 a b))))
  (= (mem (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1)))
  (Tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1)) (t2tb11 x) (t2tb11 y))
  (times (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1)) (t2tb10 s) (t2tb10 t)))
  (and (mem4 x s) (mem4 y t)))))

(declare-fun t2tb17 ((set (tuple21 (set (tuple21 a b)) (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a b)) (tuple21 a b))))) (sort
  (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 b1))) (t2tb17 x))))

(declare-fun tb2t17 (uni) (set (tuple21 (set (tuple21 a b)) (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a b)) (tuple21 a b)))))
  (! (= (tb2t17 (t2tb17 i)) i) :pattern ((t2tb17 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 b1))) j)
     (= (t2tb17 (tb2t17 j)) j)) :pattern ((t2tb17 (tb2t17 j))) )))

(declare-fun t2tb18 ((tuple21 (set (tuple21 a b)) (tuple21 a b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a b)) (tuple21 a b)))) (sort
  (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 b1)) (t2tb18 x))))

(declare-fun tb2t18 (uni) (tuple21 (set (tuple21 a b)) (tuple21 a b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a b)) (tuple21 a b))))
  (! (= (tb2t18 (t2tb18 i)) i) :pattern ((t2tb18 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 b1)) j)
     (= (t2tb18 (tb2t18 j)) j)) :pattern ((t2tb18 (tb2t18 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set (tuple21 a b)))
  (x (set (tuple21 a b))) (y (tuple21 a b)))
  (= (mem (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 b1))
  (Tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 b1) (t2tb11 x) (t2tb13 y))
  (times (tuple2 a1 b1) (set1 (tuple2 a1 b1)) (t2tb10 s) (t2tb11 t)))
  (and (mem4 x s) (mem3 y t)))))

(declare-fun t2tb19 ((set (tuple21 (set (tuple21 a b)) b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a b)) b)))) (sort
  (set1 (tuple2 (set1 (tuple2 a1 b1)) b1)) (t2tb19 x))))

(declare-fun tb2t19 (uni) (set (tuple21 (set (tuple21 a b)) b)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a b)) b))))
  (! (= (tb2t19 (t2tb19 i)) i) :pattern ((t2tb19 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 a1 b1)) b1)) j)
     (= (t2tb19 (tb2t19 j)) j)) :pattern ((t2tb19 (tb2t19 j))) )))

(declare-fun t2tb20 ((tuple21 (set (tuple21 a b)) b)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a b)) b))) (sort
  (tuple2 (set1 (tuple2 a1 b1)) b1) (t2tb20 x))))

(declare-fun tb2t20 (uni) (tuple21 (set (tuple21 a b)) b))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a b)) b)))
  (! (= (tb2t20 (t2tb20 i)) i) :pattern ((t2tb20 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 a1 b1)) b1) j)
     (= (t2tb20 (tb2t20 j)) j)) :pattern ((t2tb20 (tb2t20 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set b)) (x (set (tuple21 a b)))
  (y b))
  (= (mem (tuple2 (set1 (tuple2 a1 b1)) b1)
  (Tuple2 (set1 (tuple2 a1 b1)) b1 (t2tb11 x) (t2tb14 y))
  (times b1 (set1 (tuple2 a1 b1)) (t2tb10 s) (t2tb12 t)))
  (and (mem4 x s) (mem2 y t)))))

(declare-fun t2tb21 ((tuple21 (set (tuple21 a b)) a)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a b)) a))) (sort
  (tuple2 (set1 (tuple2 a1 b1)) a1) (t2tb21 x))))

(declare-fun tb2t21 (uni) (tuple21 (set (tuple21 a b)) a))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a b)) a)))
  (! (= (tb2t21 (t2tb21 i)) i) :pattern ((t2tb21 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 a1 b1)) a1) j)
     (= (t2tb21 (tb2t21 j)) j)) :pattern ((t2tb21 (tb2t21 j))) )))

(declare-fun t2tb22 ((set (tuple21 (set (tuple21 a b)) a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a b)) a)))) (sort
  (set1 (tuple2 (set1 (tuple2 a1 b1)) a1)) (t2tb22 x))))

(declare-fun tb2t22 (uni) (set (tuple21 (set (tuple21 a b)) a)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a b)) a))))
  (! (= (tb2t22 (t2tb22 i)) i) :pattern ((t2tb22 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 a1 b1)) a1)) j)
     (= (t2tb22 (tb2t22 j)) j)) :pattern ((t2tb22 (tb2t22 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set a)) (x (set (tuple21 a b)))
  (y a))
  (= (mem (tuple2 (set1 (tuple2 a1 b1)) a1)
  (Tuple2 (set1 (tuple2 a1 b1)) a1 (t2tb11 x) (t2tb2 y))
  (times a1 (set1 (tuple2 a1 b1)) (t2tb10 s) (t2tb1 t)))
  (and (mem4 x s) (mem1 y t)))))

;; mem_times
  (assert
  (forall ((b2 ty))
  (forall ((s (set (set (tuple21 a b)))) (t uni) (x (set (tuple21 a b)))
  (y uni))
  (= (mem (tuple2 (set1 (tuple2 a1 b1)) b2)
  (Tuple2 (set1 (tuple2 a1 b1)) b2 (t2tb11 x) y)
  (times b2 (set1 (tuple2 a1 b1)) (t2tb10 s) t))
  (and (mem4 x s) (mem b2 y t))))))

(declare-fun t2tb91 ((set (tuple21 (tuple21 a b) (set (tuple21 b a))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) (set (tuple21 b a)))))) (sort
  (set1 (tuple2 (tuple2 a1 b1) (set1 (tuple2 b1 a1)))) (t2tb91 x))))

(declare-fun tb2t91 (uni) (set (tuple21 (tuple21 a b) (set (tuple21 b a)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a b) (set (tuple21 b a))))))
  (! (= (tb2t91 (t2tb91 i)) i) :pattern ((t2tb91 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 b1) (set1 (tuple2 b1 a1)))) j)
     (= (t2tb91 (tb2t91 j)) j)) :pattern ((t2tb91 (tb2t91 j))) )))

(declare-fun t2tb92 ((tuple21 (tuple21 a b) (set (tuple21 b a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a b) (set (tuple21 b a))))) (sort
  (tuple2 (tuple2 a1 b1) (set1 (tuple2 b1 a1))) (t2tb92 x))))

(declare-fun tb2t92 (uni) (tuple21 (tuple21 a b) (set (tuple21 b a))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a b) (set (tuple21 b a)))))
  (! (= (tb2t92 (t2tb92 i)) i) :pattern ((t2tb92 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 b1) (set1 (tuple2 b1 a1))) j)
     (= (t2tb92 (tb2t92 j)) j)) :pattern ((t2tb92 (tb2t92 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (set (tuple21 b a))))
  (x (tuple21 a b)) (y (set (tuple21 b a))))
  (= (mem (tuple2 (tuple2 a1 b1) (set1 (tuple2 b1 a1)))
  (Tuple2 (tuple2 a1 b1) (set1 (tuple2 b1 a1)) (t2tb13 x) (t2tb37 y))
  (times (set1 (tuple2 b1 a1)) (tuple2 a1 b1) (t2tb11 s) (t2tb56 t)))
  (and (mem3 x s) (mem6 y t)))))

(declare-fun t2tb93 ((tuple21 (tuple21 a b) (tuple21 b a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a b) (tuple21 b a)))) (sort
  (tuple2 (tuple2 a1 b1) (tuple2 b1 a1)) (t2tb93 x))))

(declare-fun tb2t93 (uni) (tuple21 (tuple21 a b) (tuple21 b a)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a b) (tuple21 b a))))
  (! (= (tb2t93 (t2tb93 i)) i) :pattern ((t2tb93 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 b1) (tuple2 b1 a1)) j)
     (= (t2tb93 (tb2t93 j)) j)) :pattern ((t2tb93 (tb2t93 j))) )))

(declare-fun t2tb94 ((set (tuple21 (tuple21 a b) (tuple21 b a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) (tuple21 b a))))) (sort
  (set1 (tuple2 (tuple2 a1 b1) (tuple2 b1 a1))) (t2tb94 x))))

(declare-fun tb2t94 (uni) (set (tuple21 (tuple21 a b) (tuple21 b a))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a b) (tuple21 b a)))))
  (! (= (tb2t94 (t2tb94 i)) i) :pattern ((t2tb94 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 b1) (tuple2 b1 a1))) j)
     (= (t2tb94 (tb2t94 j)) j)) :pattern ((t2tb94 (tb2t94 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (tuple21 b a))) (x (tuple21 a b))
  (y (tuple21 b a)))
  (= (mem (tuple2 (tuple2 a1 b1) (tuple2 b1 a1))
  (Tuple2 (tuple2 a1 b1) (tuple2 b1 a1) (t2tb13 x) (t2tb38 y))
  (times (tuple2 b1 a1) (tuple2 a1 b1) (t2tb11 s) (t2tb37 t)))
  (and (mem3 x s) (mem5 y t)))))

(declare-fun t2tb23 ((set (tuple21 (tuple21 a b) (set (tuple21 a b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) (set (tuple21 a b)))))) (sort
  (set1 (tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 b1)))) (t2tb23 x))))

(declare-fun tb2t23 (uni) (set (tuple21 (tuple21 a b) (set (tuple21 a b)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a b) (set (tuple21 a b))))))
  (! (= (tb2t23 (t2tb23 i)) i) :pattern ((t2tb23 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 b1)))) j)
     (= (t2tb23 (tb2t23 j)) j)) :pattern ((t2tb23 (tb2t23 j))) )))

(declare-fun t2tb24 ((tuple21 (tuple21 a b) (set (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a b) (set (tuple21 a b))))) (sort
  (tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 b1))) (t2tb24 x))))

(declare-fun tb2t24 (uni) (tuple21 (tuple21 a b) (set (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a b) (set (tuple21 a b)))))
  (! (= (tb2t24 (t2tb24 i)) i) :pattern ((t2tb24 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 b1))) j)
     (= (t2tb24 (tb2t24 j)) j)) :pattern ((t2tb24 (tb2t24 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (set (tuple21 a b))))
  (x (tuple21 a b)) (y (set (tuple21 a b))))
  (= (mem (tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 b1)))
  (Tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 b1)) (t2tb13 x) (t2tb11 y))
  (times (set1 (tuple2 a1 b1)) (tuple2 a1 b1) (t2tb11 s) (t2tb10 t)))
  (and (mem3 x s) (mem4 y t)))))

(declare-fun t2tb25 ((set (tuple21 (tuple21 a b) (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) (tuple21 a b))))) (sort
  (set1 (tuple2 (tuple2 a1 b1) (tuple2 a1 b1))) (t2tb25 x))))

(declare-fun tb2t25 (uni) (set (tuple21 (tuple21 a b) (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a b) (tuple21 a b)))))
  (! (= (tb2t25 (t2tb25 i)) i) :pattern ((t2tb25 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 b1) (tuple2 a1 b1))) j)
     (= (t2tb25 (tb2t25 j)) j)) :pattern ((t2tb25 (tb2t25 j))) )))

(declare-fun t2tb26 ((tuple21 (tuple21 a b) (tuple21 a b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a b) (tuple21 a b)))) (sort
  (tuple2 (tuple2 a1 b1) (tuple2 a1 b1)) (t2tb26 x))))

(declare-fun tb2t26 (uni) (tuple21 (tuple21 a b) (tuple21 a b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a b) (tuple21 a b))))
  (! (= (tb2t26 (t2tb26 i)) i) :pattern ((t2tb26 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 b1) (tuple2 a1 b1)) j)
     (= (t2tb26 (tb2t26 j)) j)) :pattern ((t2tb26 (tb2t26 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (tuple21 a b))) (x (tuple21 a b))
  (y (tuple21 a b)))
  (= (mem (tuple2 (tuple2 a1 b1) (tuple2 a1 b1))
  (Tuple2 (tuple2 a1 b1) (tuple2 a1 b1) (t2tb13 x) (t2tb13 y))
  (times (tuple2 a1 b1) (tuple2 a1 b1) (t2tb11 s) (t2tb11 t)))
  (and (mem3 x s) (mem3 y t)))))

(declare-fun t2tb27 ((set (tuple21 (tuple21 a b) b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) b)))) (sort
  (set1 (tuple2 (tuple2 a1 b1) b1)) (t2tb27 x))))

(declare-fun tb2t27 (uni) (set (tuple21 (tuple21 a b) b)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a b) b))))
  (! (= (tb2t27 (t2tb27 i)) i) :pattern ((t2tb27 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 b1) b1)) j)
     (= (t2tb27 (tb2t27 j)) j)) :pattern ((t2tb27 (tb2t27 j))) )))

(declare-fun t2tb28 ((tuple21 (tuple21 a b) b)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a b) b))) (sort (tuple2 (tuple2 a1 b1) b1)
  (t2tb28 x))))

(declare-fun tb2t28 (uni) (tuple21 (tuple21 a b) b))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a b) b)))
  (! (= (tb2t28 (t2tb28 i)) i) :pattern ((t2tb28 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 b1) b1) j) (= (t2tb28 (tb2t28 j)) j)) :pattern (
  (t2tb28 (tb2t28 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a b))) (t (set b)) (x (tuple21 a b)) (y b))
  (= (mem (tuple2 (tuple2 a1 b1) b1)
  (Tuple2 (tuple2 a1 b1) b1 (t2tb13 x) (t2tb14 y))
  (times b1 (tuple2 a1 b1) (t2tb11 s) (t2tb12 t)))
  (and (mem3 x s) (mem2 y t)))))

(declare-fun t2tb29 ((set (tuple21 (tuple21 a b) a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) a)))) (sort
  (set1 (tuple2 (tuple2 a1 b1) a1)) (t2tb29 x))))

(declare-fun tb2t29 (uni) (set (tuple21 (tuple21 a b) a)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a b) a))))
  (! (= (tb2t29 (t2tb29 i)) i) :pattern ((t2tb29 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 b1) a1)) j)
     (= (t2tb29 (tb2t29 j)) j)) :pattern ((t2tb29 (tb2t29 j))) )))

(declare-fun t2tb30 ((tuple21 (tuple21 a b) a)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a b) a))) (sort (tuple2 (tuple2 a1 b1) a1)
  (t2tb30 x))))

(declare-fun tb2t30 (uni) (tuple21 (tuple21 a b) a))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a b) a)))
  (! (= (tb2t30 (t2tb30 i)) i) :pattern ((t2tb30 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 b1) a1) j) (= (t2tb30 (tb2t30 j)) j)) :pattern (
  (t2tb30 (tb2t30 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a b))) (t (set a)) (x (tuple21 a b)) (y a))
  (= (mem (tuple2 (tuple2 a1 b1) a1)
  (Tuple2 (tuple2 a1 b1) a1 (t2tb13 x) (t2tb2 y))
  (times a1 (tuple2 a1 b1) (t2tb11 s) (t2tb1 t)))
  (and (mem3 x s) (mem1 y t)))))

;; mem_times
  (assert
  (forall ((b2 ty))
  (forall ((s (set (tuple21 a b))) (t uni) (x (tuple21 a b)) (y uni))
  (= (mem (tuple2 (tuple2 a1 b1) b2) (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) y)
  (times b2 (tuple2 a1 b1) (t2tb11 s) t)) (and (mem3 x s) (mem b2 y t))))))

(declare-fun t2tb95 ((set (tuple21 b (set (tuple21 b a))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 b (set (tuple21 b a)))))) (sort
  (set1 (tuple2 b1 (set1 (tuple2 b1 a1)))) (t2tb95 x))))

(declare-fun tb2t95 (uni) (set (tuple21 b (set (tuple21 b a)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 b (set (tuple21 b a))))))
  (! (= (tb2t95 (t2tb95 i)) i) :pattern ((t2tb95 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 b1 (set1 (tuple2 b1 a1)))) j)
     (= (t2tb95 (tb2t95 j)) j)) :pattern ((t2tb95 (tb2t95 j))) )))

(declare-fun t2tb96 ((tuple21 b (set (tuple21 b a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 b (set (tuple21 b a))))) (sort
  (tuple2 b1 (set1 (tuple2 b1 a1))) (t2tb96 x))))

(declare-fun tb2t96 (uni) (tuple21 b (set (tuple21 b a))))

;; BridgeL
  (assert
  (forall ((i (tuple21 b (set (tuple21 b a)))))
  (! (= (tb2t96 (t2tb96 i)) i) :pattern ((t2tb96 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 b1 (set1 (tuple2 b1 a1))) j)
     (= (t2tb96 (tb2t96 j)) j)) :pattern ((t2tb96 (tb2t96 j))) )))

;; mem_times
  (assert
  (forall ((s (set b)) (t (set (set (tuple21 b a)))) (x b) (y (set (tuple21 b
  a))))
  (= (mem (tuple2 b1 (set1 (tuple2 b1 a1)))
  (Tuple2 b1 (set1 (tuple2 b1 a1)) (t2tb14 x) (t2tb37 y))
  (times (set1 (tuple2 b1 a1)) b1 (t2tb12 s) (t2tb56 t)))
  (and (mem2 x s) (mem6 y t)))))

(declare-fun t2tb97 ((set (tuple21 b (tuple21 b a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 b (tuple21 b a))))) (sort
  (set1 (tuple2 b1 (tuple2 b1 a1))) (t2tb97 x))))

(declare-fun tb2t97 (uni) (set (tuple21 b (tuple21 b a))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 b (tuple21 b a)))))
  (! (= (tb2t97 (t2tb97 i)) i) :pattern ((t2tb97 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 b1 (tuple2 b1 a1))) j)
     (= (t2tb97 (tb2t97 j)) j)) :pattern ((t2tb97 (tb2t97 j))) )))

(declare-fun t2tb98 ((tuple21 b (tuple21 b a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 b (tuple21 b a)))) (sort (tuple2 b1 (tuple2 b1 a1))
  (t2tb98 x))))

(declare-fun tb2t98 (uni) (tuple21 b (tuple21 b a)))

;; BridgeL
  (assert
  (forall ((i (tuple21 b (tuple21 b a))))
  (! (= (tb2t98 (t2tb98 i)) i) :pattern ((t2tb98 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 b1 (tuple2 b1 a1)) j) (= (t2tb98 (tb2t98 j)) j)) :pattern (
  (t2tb98 (tb2t98 j))) )))

;; mem_times
  (assert
  (forall ((s (set b)) (t (set (tuple21 b a))) (x b) (y (tuple21 b a)))
  (= (mem (tuple2 b1 (tuple2 b1 a1))
  (Tuple2 b1 (tuple2 b1 a1) (t2tb14 x) (t2tb38 y))
  (times (tuple2 b1 a1) b1 (t2tb12 s) (t2tb37 t)))
  (and (mem2 x s) (mem5 y t)))))

(declare-fun t2tb31 ((set (tuple21 b (set (tuple21 a b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 b (set (tuple21 a b)))))) (sort
  (set1 (tuple2 b1 (set1 (tuple2 a1 b1)))) (t2tb31 x))))

(declare-fun tb2t31 (uni) (set (tuple21 b (set (tuple21 a b)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 b (set (tuple21 a b))))))
  (! (= (tb2t31 (t2tb31 i)) i) :pattern ((t2tb31 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 b1 (set1 (tuple2 a1 b1)))) j)
     (= (t2tb31 (tb2t31 j)) j)) :pattern ((t2tb31 (tb2t31 j))) )))

(declare-fun t2tb32 ((tuple21 b (set (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 b (set (tuple21 a b))))) (sort
  (tuple2 b1 (set1 (tuple2 a1 b1))) (t2tb32 x))))

(declare-fun tb2t32 (uni) (tuple21 b (set (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (tuple21 b (set (tuple21 a b)))))
  (! (= (tb2t32 (t2tb32 i)) i) :pattern ((t2tb32 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 b1 (set1 (tuple2 a1 b1))) j)
     (= (t2tb32 (tb2t32 j)) j)) :pattern ((t2tb32 (tb2t32 j))) )))

;; mem_times
  (assert
  (forall ((s (set b)) (t (set (set (tuple21 a b)))) (x b) (y (set (tuple21 a
  b))))
  (= (mem (tuple2 b1 (set1 (tuple2 a1 b1)))
  (Tuple2 b1 (set1 (tuple2 a1 b1)) (t2tb14 x) (t2tb11 y))
  (times (set1 (tuple2 a1 b1)) b1 (t2tb12 s) (t2tb10 t)))
  (and (mem2 x s) (mem4 y t)))))

(declare-fun t2tb33 ((tuple21 b (tuple21 a b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 b (tuple21 a b)))) (sort (tuple2 b1 (tuple2 a1 b1))
  (t2tb33 x))))

(declare-fun tb2t33 (uni) (tuple21 b (tuple21 a b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 b (tuple21 a b))))
  (! (= (tb2t33 (t2tb33 i)) i) :pattern ((t2tb33 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 b1 (tuple2 a1 b1)) j) (= (t2tb33 (tb2t33 j)) j)) :pattern (
  (t2tb33 (tb2t33 j))) )))

(declare-fun t2tb34 ((set (tuple21 b (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 b (tuple21 a b))))) (sort
  (set1 (tuple2 b1 (tuple2 a1 b1))) (t2tb34 x))))

(declare-fun tb2t34 (uni) (set (tuple21 b (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 b (tuple21 a b)))))
  (! (= (tb2t34 (t2tb34 i)) i) :pattern ((t2tb34 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 b1 (tuple2 a1 b1))) j)
     (= (t2tb34 (tb2t34 j)) j)) :pattern ((t2tb34 (tb2t34 j))) )))

;; mem_times
  (assert
  (forall ((s (set b)) (t (set (tuple21 a b))) (x b) (y (tuple21 a b)))
  (= (mem (tuple2 b1 (tuple2 a1 b1))
  (Tuple2 b1 (tuple2 a1 b1) (t2tb14 x) (t2tb13 y))
  (times (tuple2 a1 b1) b1 (t2tb12 s) (t2tb11 t)))
  (and (mem2 x s) (mem3 y t)))))

(declare-fun t2tb35 ((set (tuple21 b b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 b b)))) (sort (set1 (tuple2 b1 b1)) (t2tb35 x))))

(declare-fun tb2t35 (uni) (set (tuple21 b b)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 b b))))
  (! (= (tb2t35 (t2tb35 i)) i) :pattern ((t2tb35 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 b1 b1)) j) (= (t2tb35 (tb2t35 j)) j)) :pattern (
  (t2tb35 (tb2t35 j))) )))

(declare-fun t2tb36 ((tuple21 b b)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 b b))) (sort (tuple2 b1 b1) (t2tb36 x))))

(declare-fun tb2t36 (uni) (tuple21 b b))

;; BridgeL
  (assert
  (forall ((i (tuple21 b b)))
  (! (= (tb2t36 (t2tb36 i)) i) :pattern ((t2tb36 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 b1 b1) j) (= (t2tb36 (tb2t36 j)) j)) :pattern (
  (t2tb36 (tb2t36 j))) )))

;; mem_times
  (assert
  (forall ((s (set b)) (t (set b)) (x b) (y b))
  (= (mem (tuple2 b1 b1) (Tuple2 b1 b1 (t2tb14 x) (t2tb14 y))
  (times b1 b1 (t2tb12 s) (t2tb12 t))) (and (mem2 x s) (mem2 y t)))))

;; mem_times
  (assert
  (forall ((s (set b)) (t (set a)) (x b) (y a))
  (= (mem5 (tb2t38 (Tuple2 b1 a1 (t2tb14 x) (t2tb2 y)))
  (tb2t37 (times a1 b1 (t2tb12 s) (t2tb1 t)))) (and (mem2 x s) (mem1 y t)))))

;; mem_times
  (assert
  (forall ((b2 ty))
  (forall ((s (set b)) (t uni) (x b) (y uni))
  (= (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) y)
  (times b2 b1 (t2tb12 s) t)) (and (mem2 x s) (mem b2 y t))))))

(declare-fun t2tb99 ((set (tuple21 a (set (tuple21 b a))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (set (tuple21 b a)))))) (sort
  (set1 (tuple2 a1 (set1 (tuple2 b1 a1)))) (t2tb99 x))))

(declare-fun tb2t99 (uni) (set (tuple21 a (set (tuple21 b a)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (set (tuple21 b a))))))
  (! (= (tb2t99 (t2tb99 i)) i) :pattern ((t2tb99 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (set1 (tuple2 b1 a1)))) j)
     (= (t2tb99 (tb2t99 j)) j)) :pattern ((t2tb99 (tb2t99 j))) )))

(declare-fun t2tb100 ((tuple21 a (set (tuple21 b a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (set (tuple21 b a))))) (sort
  (tuple2 a1 (set1 (tuple2 b1 a1))) (t2tb100 x))))

(declare-fun tb2t100 (uni) (tuple21 a (set (tuple21 b a))))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (set (tuple21 b a)))))
  (! (= (tb2t100 (t2tb100 i)) i) :pattern ((t2tb100 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (set1 (tuple2 b1 a1))) j)
     (= (t2tb100 (tb2t100 j)) j)) :pattern ((t2tb100 (tb2t100 j))) )))

;; mem_times
  (assert
  (forall ((s (set a)) (t (set (set (tuple21 b a)))) (x a) (y (set (tuple21 b
  a))))
  (= (mem (tuple2 a1 (set1 (tuple2 b1 a1)))
  (Tuple2 a1 (set1 (tuple2 b1 a1)) (t2tb2 x) (t2tb37 y))
  (times (set1 (tuple2 b1 a1)) a1 (t2tb1 s) (t2tb56 t)))
  (and (mem1 x s) (mem6 y t)))))

(declare-fun t2tb101 ((set (tuple21 a (tuple21 b a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (tuple21 b a))))) (sort
  (set1 (tuple2 a1 (tuple2 b1 a1))) (t2tb101 x))))

(declare-fun tb2t101 (uni) (set (tuple21 a (tuple21 b a))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (tuple21 b a)))))
  (! (= (tb2t101 (t2tb101 i)) i) :pattern ((t2tb101 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (tuple2 b1 a1))) j)
     (= (t2tb101 (tb2t101 j)) j)) :pattern ((t2tb101 (tb2t101 j))) )))

(declare-fun t2tb102 ((tuple21 a (tuple21 b a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (tuple21 b a)))) (sort (tuple2 a1 (tuple2 b1 a1))
  (t2tb102 x))))

(declare-fun tb2t102 (uni) (tuple21 a (tuple21 b a)))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (tuple21 b a))))
  (! (= (tb2t102 (t2tb102 i)) i) :pattern ((t2tb102 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (tuple2 b1 a1)) j) (= (t2tb102 (tb2t102 j)) j)) :pattern (
  (t2tb102 (tb2t102 j))) )))

;; mem_times
  (assert
  (forall ((s (set a)) (t (set (tuple21 b a))) (x a) (y (tuple21 b a)))
  (= (mem (tuple2 a1 (tuple2 b1 a1))
  (Tuple2 a1 (tuple2 b1 a1) (t2tb2 x) (t2tb38 y))
  (times (tuple2 b1 a1) a1 (t2tb1 s) (t2tb37 t)))
  (and (mem1 x s) (mem5 y t)))))

(declare-fun t2tb39 ((set (tuple21 a (set (tuple21 a b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (set (tuple21 a b)))))) (sort
  (set1 (tuple2 a1 (set1 (tuple2 a1 b1)))) (t2tb39 x))))

(declare-fun tb2t39 (uni) (set (tuple21 a (set (tuple21 a b)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (set (tuple21 a b))))))
  (! (= (tb2t39 (t2tb39 i)) i) :pattern ((t2tb39 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (set1 (tuple2 a1 b1)))) j)
     (= (t2tb39 (tb2t39 j)) j)) :pattern ((t2tb39 (tb2t39 j))) )))

(declare-fun t2tb40 ((tuple21 a (set (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (set (tuple21 a b))))) (sort
  (tuple2 a1 (set1 (tuple2 a1 b1))) (t2tb40 x))))

(declare-fun tb2t40 (uni) (tuple21 a (set (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (set (tuple21 a b)))))
  (! (= (tb2t40 (t2tb40 i)) i) :pattern ((t2tb40 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (set1 (tuple2 a1 b1))) j)
     (= (t2tb40 (tb2t40 j)) j)) :pattern ((t2tb40 (tb2t40 j))) )))

;; mem_times
  (assert
  (forall ((s (set a)) (t (set (set (tuple21 a b)))) (x a) (y (set (tuple21 a
  b))))
  (= (mem (tuple2 a1 (set1 (tuple2 a1 b1)))
  (Tuple2 a1 (set1 (tuple2 a1 b1)) (t2tb2 x) (t2tb11 y))
  (times (set1 (tuple2 a1 b1)) a1 (t2tb1 s) (t2tb10 t)))
  (and (mem1 x s) (mem4 y t)))))

(declare-fun t2tb41 ((set (tuple21 a (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (tuple21 a b))))) (sort
  (set1 (tuple2 a1 (tuple2 a1 b1))) (t2tb41 x))))

(declare-fun tb2t41 (uni) (set (tuple21 a (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (tuple21 a b)))))
  (! (= (tb2t41 (t2tb41 i)) i) :pattern ((t2tb41 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (tuple2 a1 b1))) j)
     (= (t2tb41 (tb2t41 j)) j)) :pattern ((t2tb41 (tb2t41 j))) )))

(declare-fun t2tb42 ((tuple21 a (tuple21 a b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (tuple21 a b)))) (sort (tuple2 a1 (tuple2 a1 b1))
  (t2tb42 x))))

(declare-fun tb2t42 (uni) (tuple21 a (tuple21 a b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (tuple21 a b))))
  (! (= (tb2t42 (t2tb42 i)) i) :pattern ((t2tb42 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (tuple2 a1 b1)) j) (= (t2tb42 (tb2t42 j)) j)) :pattern (
  (t2tb42 (tb2t42 j))) )))

;; mem_times
  (assert
  (forall ((s (set a)) (t (set (tuple21 a b))) (x a) (y (tuple21 a b)))
  (= (mem (tuple2 a1 (tuple2 a1 b1))
  (Tuple2 a1 (tuple2 a1 b1) (t2tb2 x) (t2tb13 y))
  (times (tuple2 a1 b1) a1 (t2tb1 s) (t2tb11 t)))
  (and (mem1 x s) (mem3 y t)))))

;; mem_times
  (assert
  (forall ((s (set a)) (t (set b)) (x a) (y b))
  (= (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y)))
  (tb2t11 (times b1 a1 (t2tb1 s) (t2tb12 t)))) (and (mem1 x s) (mem2 y t)))))

(declare-fun t2tb4 ((set (tuple21 a a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a a)))) (sort (set1 (tuple2 a1 a1)) (t2tb4 x))))

(declare-fun tb2t4 (uni) (set (tuple21 a a)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a a))))
  (! (= (tb2t4 (t2tb4 i)) i) :pattern ((t2tb4 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 a1)) j) (= (t2tb4 (tb2t4 j)) j)) :pattern (
  (t2tb4 (tb2t4 j))) )))

(declare-fun t2tb5 ((tuple21 a a)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 a a))) (sort (tuple2 a1 a1) (t2tb5 x))))

(declare-fun tb2t5 (uni) (tuple21 a a))

;; BridgeL
  (assert
  (forall ((i (tuple21 a a)))
  (! (= (tb2t5 (t2tb5 i)) i) :pattern ((t2tb5 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 a1) j) (= (t2tb5 (tb2t5 j)) j)) :pattern ((t2tb5
                                                                    (tb2t5 j))) )))

;; mem_times
  (assert
  (forall ((s (set a)) (t (set a)) (x a) (y a))
  (= (mem (tuple2 a1 a1) (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y))
  (times a1 a1 (t2tb1 s) (t2tb1 t))) (and (mem1 x s) (mem1 y t)))))

;; mem_times
  (assert
  (forall ((b2 ty))
  (forall ((s (set a)) (t uni) (x a) (y uni))
  (= (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) y)
  (times b2 a1 (t2tb1 s) t)) (and (mem1 x s) (mem b2 y t))))))

;; mem_times
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (x uni) (y uni))
  (= (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) (times b2 a2 s t))
  (and (mem a2 x s) (mem b2 y t))))))

(declare-fun t2tb103 ((set (set (set (tuple21 b a))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (set (tuple21 b a)))))) (sort
  (set1 (set1 (set1 (tuple2 b1 a1)))) (t2tb103 x))))

(declare-fun tb2t103 (uni) (set (set (set (tuple21 b a)))))

;; BridgeL
  (assert
  (forall ((i (set (set (set (tuple21 b a))))))
  (! (= (tb2t103 (t2tb103 i)) i) :pattern ((t2tb103 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (set1 (tuple2 b1 a1)))) j)
     (= (t2tb103 (tb2t103 j)) j)) :pattern ((t2tb103 (tb2t103 j))) )))

;; mem_power
  (assert
  (forall ((s (set (set (tuple21 b a)))) (t (set (set (tuple21 b a)))))
  (= (mem (set1 (set1 (tuple2 b1 a1))) (t2tb56 s)
  (power (set1 (tuple2 b1 a1)) (t2tb56 t)))
  (forall ((x (set (tuple21 b a)))) (=> (mem6 x s) (mem6 x t))))))

;; mem_power
  (assert
  (forall ((s (set (tuple21 b a))) (t (set (tuple21 b a))))
  (= (mem6 s (tb2t56 (power (tuple2 b1 a1) (t2tb37 t))))
  (forall ((x (tuple21 b a))) (=> (mem5 x s) (mem5 x t))))))

(declare-fun t2tb43 ((set (set (set (tuple21 a b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (set (tuple21 a b)))))) (sort
  (set1 (set1 (set1 (tuple2 a1 b1)))) (t2tb43 x))))

(declare-fun tb2t43 (uni) (set (set (set (tuple21 a b)))))

;; BridgeL
  (assert
  (forall ((i (set (set (set (tuple21 a b))))))
  (! (= (tb2t43 (t2tb43 i)) i) :pattern ((t2tb43 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (set1 (tuple2 a1 b1)))) j)
     (= (t2tb43 (tb2t43 j)) j)) :pattern ((t2tb43 (tb2t43 j))) )))

;; mem_power
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set (set (tuple21 a b)))))
  (= (mem (set1 (set1 (tuple2 a1 b1))) (t2tb10 s)
  (power (set1 (tuple2 a1 b1)) (t2tb10 t)))
  (forall ((x (set (tuple21 a b)))) (=> (mem4 x s) (mem4 x t))))))

;; mem_power
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (tuple21 a b))))
  (= (mem4 s (tb2t10 (power (tuple2 a1 b1) (t2tb11 t))))
  (forall ((x (tuple21 a b))) (=> (mem3 x s) (mem3 x t))))))

(declare-fun t2tb44 ((set (set b))) uni)

;; t2tb_sort
  (assert (forall ((x (set (set b)))) (sort (set1 (set1 b1)) (t2tb44 x))))

(declare-fun tb2t44 (uni) (set (set b)))

;; BridgeL
  (assert
  (forall ((i (set (set b))))
  (! (= (tb2t44 (t2tb44 i)) i) :pattern ((t2tb44 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 b1)) j) (= (t2tb44 (tb2t44 j)) j)) :pattern (
  (t2tb44 (tb2t44 j))) )))

;; mem_power
  (assert
  (forall ((s (set b)) (t (set b)))
  (= (mem (set1 b1) (t2tb12 s) (power b1 (t2tb12 t)))
  (forall ((x b)) (=> (mem2 x s) (mem2 x t))))))

(declare-fun t2tb ((set (set a))) uni)

;; t2tb_sort
  (assert (forall ((x (set (set a)))) (sort (set1 (set1 a1)) (t2tb x))))

(declare-fun tb2t (uni) (set (set a)))

;; BridgeL
  (assert
  (forall ((i (set (set a)))) (! (= (tb2t (t2tb i)) i) :pattern ((t2tb i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 a1)) j) (= (t2tb (tb2t j)) j)) :pattern ((t2tb
                                                                    (tb2t j))) )))

;; mem_power
  (assert
  (forall ((s (set a)) (t (set a)))
  (= (mem (set1 a1) (t2tb1 s) (power a1 (t2tb1 t)))
  (forall ((x a)) (=> (mem1 x s) (mem1 x t))))))

;; mem_power
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t uni))
  (and
  (=> (mem (set1 a2) s (power a2 t))
  (forall ((x uni)) (=> (mem a2 x s) (mem a2 x t))))
  (=> (forall ((x uni)) (=> (sort a2 x) (=> (mem a2 x s) (mem a2 x t)))) (mem
  (set1 a2) s (power a2 t)))))))

;; mem_non_empty_power
  (assert
  (forall ((s (set (set (tuple21 b a)))) (t (set (set (tuple21 b a)))))
  (= (mem (set1 (set1 (tuple2 b1 a1))) (t2tb56 s)
  (non_empty_power (set1 (tuple2 b1 a1)) (t2tb56 t)))
  (and (forall ((x (set (tuple21 b a)))) (=> (mem6 x s) (mem6 x t)))
  (not (infix_eqeq (set1 (tuple2 b1 a1)) (t2tb56 s)
  (empty (set1 (tuple2 b1 a1)))))))))

;; mem_non_empty_power
  (assert
  (forall ((s (set (tuple21 b a))) (t (set (tuple21 b a))))
  (= (mem6 s (tb2t56 (non_empty_power (tuple2 b1 a1) (t2tb37 t))))
  (and (forall ((x (tuple21 b a))) (=> (mem5 x s) (mem5 x t)))
  (not (infix_eqeq (tuple2 b1 a1) (t2tb37 s) (empty (tuple2 b1 a1))))))))

;; mem_non_empty_power
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set (set (tuple21 a b)))))
  (= (mem (set1 (set1 (tuple2 a1 b1))) (t2tb10 s)
  (non_empty_power (set1 (tuple2 a1 b1)) (t2tb10 t)))
  (and (forall ((x (set (tuple21 a b)))) (=> (mem4 x s) (mem4 x t)))
  (not (infix_eqeq (set1 (tuple2 a1 b1)) (t2tb10 s)
  (empty (set1 (tuple2 a1 b1)))))))))

;; mem_non_empty_power
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (tuple21 a b))))
  (= (mem4 s (tb2t10 (non_empty_power (tuple2 a1 b1) (t2tb11 t))))
  (and (forall ((x (tuple21 a b))) (=> (mem3 x s) (mem3 x t)))
  (not (infix_eqeq (tuple2 a1 b1) (t2tb11 s) (empty (tuple2 a1 b1))))))))

;; mem_non_empty_power
  (assert
  (forall ((s (set b)) (t (set b)))
  (= (mem (set1 b1) (t2tb12 s) (non_empty_power b1 (t2tb12 t)))
  (and (forall ((x b)) (=> (mem2 x s) (mem2 x t)))
  (not (infix_eqeq b1 (t2tb12 s) (empty b1)))))))

;; mem_non_empty_power
  (assert
  (forall ((s (set a)) (t (set a)))
  (= (mem (set1 a1) (t2tb1 s) (non_empty_power a1 (t2tb1 t)))
  (and (forall ((x a)) (=> (mem1 x s) (mem1 x t)))
  (not (infix_eqeq a1 (t2tb1 s) (empty a1)))))))

;; mem_non_empty_power
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t uni))
  (and
  (=> (mem (set1 a2) s (non_empty_power a2 t))
  (and (forall ((x uni)) (=> (mem a2 x s) (mem a2 x t)))
  (not (infix_eqeq a2 s (empty a2)))))
  (=>
  (and (forall ((x uni)) (=> (sort a2 x) (=> (mem a2 x s) (mem a2 x t))))
  (not (infix_eqeq a2 s (empty a2)))) (mem (set1 a2) s
  (non_empty_power a2 t)))))))

(declare-fun choose (ty uni) uni)

;; choose_sort
  (assert (forall ((a2 ty)) (forall ((x uni)) (sort a2 (choose a2 x)))))

(declare-fun relation (ty ty uni uni) uni)

;; relation_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (set1 (tuple2 a2 b2)))
  (relation b2 a2 x x1)))))

;; mem_relation
  (assert
  (forall ((a2 ty))
  (forall ((u uni) (v (set (set (tuple21 b a)))) (r uni))
  (and
  (=> (mem (set1 (tuple2 a2 (set1 (tuple2 b1 a1)))) r
  (relation (set1 (tuple2 b1 a1)) a2 u (t2tb56 v)))
  (forall ((x uni) (y (set (tuple21 b a))))
  (=> (mem (tuple2 a2 (set1 (tuple2 b1 a1)))
  (Tuple2 a2 (set1 (tuple2 b1 a1)) x (t2tb37 y)) r)
  (and (mem a2 x u) (mem6 y v)))))
  (=>
  (forall ((x uni) (y (set (tuple21 b a))))
  (=> (sort a2 x)
  (=> (mem (tuple2 a2 (set1 (tuple2 b1 a1)))
  (Tuple2 a2 (set1 (tuple2 b1 a1)) x (t2tb37 y)) r)
  (and (mem a2 x u) (mem6 y v))))) (mem
  (set1 (tuple2 a2 (set1 (tuple2 b1 a1)))) r
  (relation (set1 (tuple2 b1 a1)) a2 u (t2tb56 v))))))))

;; mem_relation
  (assert
  (forall ((a2 ty))
  (forall ((u uni) (v (set (tuple21 b a))) (r uni))
  (and
  (=> (mem (set1 (tuple2 a2 (tuple2 b1 a1))) r
  (relation (tuple2 b1 a1) a2 u (t2tb37 v)))
  (forall ((x uni) (y (tuple21 b a)))
  (=> (mem (tuple2 a2 (tuple2 b1 a1)) (Tuple2 a2 (tuple2 b1 a1) x (t2tb38 y))
  r) (and (mem a2 x u) (mem5 y v)))))
  (=>
  (forall ((x uni) (y (tuple21 b a)))
  (=> (sort a2 x)
  (=> (mem (tuple2 a2 (tuple2 b1 a1)) (Tuple2 a2 (tuple2 b1 a1) x (t2tb38 y))
  r) (and (mem a2 x u) (mem5 y v))))) (mem (set1 (tuple2 a2 (tuple2 b1 a1)))
  r (relation (tuple2 b1 a1) a2 u (t2tb37 v))))))))

;; mem_relation
  (assert
  (forall ((a2 ty))
  (forall ((u uni) (v (set (set (tuple21 a b)))) (r uni))
  (and
  (=> (mem (set1 (tuple2 a2 (set1 (tuple2 a1 b1)))) r
  (relation (set1 (tuple2 a1 b1)) a2 u (t2tb10 v)))
  (forall ((x uni) (y (set (tuple21 a b))))
  (=> (mem (tuple2 a2 (set1 (tuple2 a1 b1)))
  (Tuple2 a2 (set1 (tuple2 a1 b1)) x (t2tb11 y)) r)
  (and (mem a2 x u) (mem4 y v)))))
  (=>
  (forall ((x uni) (y (set (tuple21 a b))))
  (=> (sort a2 x)
  (=> (mem (tuple2 a2 (set1 (tuple2 a1 b1)))
  (Tuple2 a2 (set1 (tuple2 a1 b1)) x (t2tb11 y)) r)
  (and (mem a2 x u) (mem4 y v))))) (mem
  (set1 (tuple2 a2 (set1 (tuple2 a1 b1)))) r
  (relation (set1 (tuple2 a1 b1)) a2 u (t2tb10 v))))))))

;; mem_relation
  (assert
  (forall ((a2 ty))
  (forall ((u uni) (v (set (tuple21 a b))) (r uni))
  (and
  (=> (mem (set1 (tuple2 a2 (tuple2 a1 b1))) r
  (relation (tuple2 a1 b1) a2 u (t2tb11 v)))
  (forall ((x uni) (y (tuple21 a b)))
  (=> (mem (tuple2 a2 (tuple2 a1 b1)) (Tuple2 a2 (tuple2 a1 b1) x (t2tb13 y))
  r) (and (mem a2 x u) (mem3 y v)))))
  (=>
  (forall ((x uni) (y (tuple21 a b)))
  (=> (sort a2 x)
  (=> (mem (tuple2 a2 (tuple2 a1 b1)) (Tuple2 a2 (tuple2 a1 b1) x (t2tb13 y))
  r) (and (mem a2 x u) (mem3 y v))))) (mem (set1 (tuple2 a2 (tuple2 a1 b1)))
  r (relation (tuple2 a1 b1) a2 u (t2tb11 v))))))))

;; mem_relation
  (assert
  (forall ((a2 ty))
  (forall ((u uni) (v (set b)) (r uni))
  (and
  (=> (mem (set1 (tuple2 a2 b1)) r (relation b1 a2 u (t2tb12 v)))
  (forall ((x uni) (y b))
  (=> (mem (tuple2 a2 b1) (Tuple2 a2 b1 x (t2tb14 y)) r)
  (and (mem a2 x u) (mem2 y v)))))
  (=>
  (forall ((x uni) (y b))
  (=> (sort a2 x)
  (=> (mem (tuple2 a2 b1) (Tuple2 a2 b1 x (t2tb14 y)) r)
  (and (mem a2 x u) (mem2 y v))))) (mem (set1 (tuple2 a2 b1)) r
  (relation b1 a2 u (t2tb12 v))))))))

;; mem_relation
  (assert
  (forall ((a2 ty))
  (forall ((u uni) (v (set a)) (r uni))
  (and
  (=> (mem (set1 (tuple2 a2 a1)) r (relation a1 a2 u (t2tb1 v)))
  (forall ((x uni) (y a))
  (=> (mem (tuple2 a2 a1) (Tuple2 a2 a1 x (t2tb2 y)) r)
  (and (mem a2 x u) (mem1 y v)))))
  (=>
  (forall ((x uni) (y a))
  (=> (sort a2 x)
  (=> (mem (tuple2 a2 a1) (Tuple2 a2 a1 x (t2tb2 y)) r)
  (and (mem a2 x u) (mem1 y v))))) (mem (set1 (tuple2 a2 a1)) r
  (relation a1 a2 u (t2tb1 v))))))))

(declare-fun t2tb104 ((set (set (tuple21 (set (tuple21 b a)) (set (tuple21 b
  a)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 b a)) (set (tuple21 b a)))))))
  (sort (set1 (set1 (tuple2 (set1 (tuple2 b1 a1)) (set1 (tuple2 b1 a1)))))
  (t2tb104 x))))

(declare-fun tb2t104 (uni) (set (set (tuple21 (set (tuple21 b a))
  (set (tuple21 b a))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 b a)) (set (tuple21 b a)))))))
  (! (= (tb2t104 (t2tb104 i)) i) :pattern ((t2tb104 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (set1 (tuple2 b1 a1)) (set1 (tuple2 b1 a1))))) j)
     (= (t2tb104 (tb2t104 j)) j)) :pattern ((t2tb104 (tb2t104 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 b a)))) (v (set (set (tuple21 b a))))
  (r (set (tuple21 (set (tuple21 b a)) (set (tuple21 b a))))))
  (= (mem (set1 (tuple2 (set1 (tuple2 b1 a1)) (set1 (tuple2 b1 a1))))
  (t2tb63 r)
  (relation (set1 (tuple2 b1 a1)) (set1 (tuple2 b1 a1)) (t2tb56 u)
  (t2tb56 v)))
  (forall ((x (set (tuple21 b a))) (y (set (tuple21 b a))))
  (=> (mem (tuple2 (set1 (tuple2 b1 a1)) (set1 (tuple2 b1 a1)))
  (Tuple2 (set1 (tuple2 b1 a1)) (set1 (tuple2 b1 a1)) (t2tb37 x) (t2tb37 y))
  (t2tb63 r)) (and (mem6 x u) (mem6 y v)))))))

(declare-fun t2tb105 ((set (set (tuple21 (set (tuple21 b a)) (tuple21 b
  a))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 b a)) (tuple21 b a)))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 b1 a1)) (tuple2 b1 a1)))) (t2tb105 x))))

(declare-fun tb2t105 (uni) (set (set (tuple21 (set (tuple21 b a)) (tuple21 b
  a)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 b a)) (tuple21 b a))))))
  (! (= (tb2t105 (t2tb105 i)) i) :pattern ((t2tb105 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 b1 a1)) (tuple2 b1 a1)))) j)
     (= (t2tb105 (tb2t105 j)) j)) :pattern ((t2tb105 (tb2t105 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 b a)))) (v (set (tuple21 b a)))
  (r (set (tuple21 (set (tuple21 b a)) (tuple21 b a)))))
  (= (mem (set1 (tuple2 (set1 (tuple2 b1 a1)) (tuple2 b1 a1))) (t2tb66 r)
  (relation (tuple2 b1 a1) (set1 (tuple2 b1 a1)) (t2tb56 u) (t2tb37 v)))
  (forall ((x (set (tuple21 b a))) (y (tuple21 b a)))
  (=> (mem (tuple2 (set1 (tuple2 b1 a1)) (tuple2 b1 a1))
  (Tuple2 (set1 (tuple2 b1 a1)) (tuple2 b1 a1) (t2tb37 x) (t2tb38 y))
  (t2tb66 r)) (and (mem6 x u) (mem5 y v)))))))

(declare-fun t2tb106 ((set (set (tuple21 (set (tuple21 b a)) (set (tuple21 a
  b)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 b a)) (set (tuple21 a b)))))))
  (sort (set1 (set1 (tuple2 (set1 (tuple2 b1 a1)) (set1 (tuple2 a1 b1)))))
  (t2tb106 x))))

(declare-fun tb2t106 (uni) (set (set (tuple21 (set (tuple21 b a))
  (set (tuple21 a b))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 b a)) (set (tuple21 a b)))))))
  (! (= (tb2t106 (t2tb106 i)) i) :pattern ((t2tb106 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (set1 (tuple2 b1 a1)) (set1 (tuple2 a1 b1))))) j)
     (= (t2tb106 (tb2t106 j)) j)) :pattern ((t2tb106 (tb2t106 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 b a)))) (v (set (set (tuple21 a b))))
  (r (set (tuple21 (set (tuple21 b a)) (set (tuple21 a b))))))
  (= (mem (set1 (tuple2 (set1 (tuple2 b1 a1)) (set1 (tuple2 a1 b1))))
  (t2tb67 r)
  (relation (set1 (tuple2 a1 b1)) (set1 (tuple2 b1 a1)) (t2tb56 u)
  (t2tb10 v)))
  (forall ((x (set (tuple21 b a))) (y (set (tuple21 a b))))
  (=> (mem (tuple2 (set1 (tuple2 b1 a1)) (set1 (tuple2 a1 b1)))
  (Tuple2 (set1 (tuple2 b1 a1)) (set1 (tuple2 a1 b1)) (t2tb37 x) (t2tb11 y))
  (t2tb67 r)) (and (mem6 x u) (mem4 y v)))))))

(declare-fun t2tb107 ((set (set (tuple21 (set (tuple21 b a)) (tuple21 a
  b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 b a)) (tuple21 a b)))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 b1 a1)) (tuple2 a1 b1)))) (t2tb107 x))))

(declare-fun tb2t107 (uni) (set (set (tuple21 (set (tuple21 b a)) (tuple21 a
  b)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 b a)) (tuple21 a b))))))
  (! (= (tb2t107 (t2tb107 i)) i) :pattern ((t2tb107 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 b1 a1)) (tuple2 a1 b1)))) j)
     (= (t2tb107 (tb2t107 j)) j)) :pattern ((t2tb107 (tb2t107 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 b a)))) (v (set (tuple21 a b)))
  (r (set (tuple21 (set (tuple21 b a)) (tuple21 a b)))))
  (= (mem (set1 (tuple2 (set1 (tuple2 b1 a1)) (tuple2 a1 b1))) (t2tb69 r)
  (relation (tuple2 a1 b1) (set1 (tuple2 b1 a1)) (t2tb56 u) (t2tb11 v)))
  (forall ((x (set (tuple21 b a))) (y (tuple21 a b)))
  (=> (mem (tuple2 (set1 (tuple2 b1 a1)) (tuple2 a1 b1))
  (Tuple2 (set1 (tuple2 b1 a1)) (tuple2 a1 b1) (t2tb37 x) (t2tb13 y))
  (t2tb69 r)) (and (mem6 x u) (mem3 y v)))))))

(declare-fun t2tb108 ((set (set (tuple21 (set (tuple21 b a)) b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 b a)) b))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 b1 a1)) b1))) (t2tb108 x))))

(declare-fun tb2t108 (uni) (set (set (tuple21 (set (tuple21 b a)) b))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 b a)) b)))))
  (! (= (tb2t108 (t2tb108 i)) i) :pattern ((t2tb108 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 b1 a1)) b1))) j)
     (= (t2tb108 (tb2t108 j)) j)) :pattern ((t2tb108 (tb2t108 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 b a)))) (v (set b))
  (r (set (tuple21 (set (tuple21 b a)) b))))
  (= (mem (set1 (tuple2 (set1 (tuple2 b1 a1)) b1)) (t2tb71 r)
  (relation b1 (set1 (tuple2 b1 a1)) (t2tb56 u) (t2tb12 v)))
  (forall ((x (set (tuple21 b a))) (y b))
  (=> (mem (tuple2 (set1 (tuple2 b1 a1)) b1)
  (Tuple2 (set1 (tuple2 b1 a1)) b1 (t2tb37 x) (t2tb14 y)) (t2tb71 r))
  (and (mem6 x u) (mem2 y v)))))))

(declare-fun t2tb109 ((set (set (tuple21 (set (tuple21 b a)) a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 b a)) a))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 b1 a1)) a1))) (t2tb109 x))))

(declare-fun tb2t109 (uni) (set (set (tuple21 (set (tuple21 b a)) a))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 b a)) a)))))
  (! (= (tb2t109 (t2tb109 i)) i) :pattern ((t2tb109 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 b1 a1)) a1))) j)
     (= (t2tb109 (tb2t109 j)) j)) :pattern ((t2tb109 (tb2t109 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 b a)))) (v (set a))
  (r (set (tuple21 (set (tuple21 b a)) a))))
  (= (mem (set1 (tuple2 (set1 (tuple2 b1 a1)) a1)) (t2tb73 r)
  (relation a1 (set1 (tuple2 b1 a1)) (t2tb56 u) (t2tb1 v)))
  (forall ((x (set (tuple21 b a))) (y a))
  (=> (mem (tuple2 (set1 (tuple2 b1 a1)) a1)
  (Tuple2 (set1 (tuple2 b1 a1)) a1 (t2tb37 x) (t2tb2 y)) (t2tb73 r))
  (and (mem6 x u) (mem1 y v)))))))

;; mem_relation
  (assert
  (forall ((b2 ty))
  (forall ((u (set (set (tuple21 b a)))) (v uni) (r uni))
  (and
  (=> (mem (set1 (tuple2 (set1 (tuple2 b1 a1)) b2)) r
  (relation b2 (set1 (tuple2 b1 a1)) (t2tb56 u) v))
  (forall ((x (set (tuple21 b a))) (y uni))
  (=> (mem (tuple2 (set1 (tuple2 b1 a1)) b2)
  (Tuple2 (set1 (tuple2 b1 a1)) b2 (t2tb37 x) y) r)
  (and (mem6 x u) (mem b2 y v)))))
  (=>
  (forall ((x (set (tuple21 b a))) (y uni))
  (=> (sort b2 y)
  (=> (mem (tuple2 (set1 (tuple2 b1 a1)) b2)
  (Tuple2 (set1 (tuple2 b1 a1)) b2 (t2tb37 x) y) r)
  (and (mem6 x u) (mem b2 y v))))) (mem
  (set1 (tuple2 (set1 (tuple2 b1 a1)) b2)) r
  (relation b2 (set1 (tuple2 b1 a1)) (t2tb56 u) v)))))))

(declare-fun t2tb110 ((set (set (tuple21 (tuple21 b a) (set (tuple21 b
  a)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 b a) (set (tuple21 b a))))))) (sort
  (set1 (set1 (tuple2 (tuple2 b1 a1) (set1 (tuple2 b1 a1))))) (t2tb110 x))))

(declare-fun tb2t110 (uni) (set (set (tuple21 (tuple21 b a) (set (tuple21 b
  a))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 b a) (set (tuple21 b a)))))))
  (! (= (tb2t110 (t2tb110 i)) i) :pattern ((t2tb110 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 b1 a1) (set1 (tuple2 b1 a1))))) j)
     (= (t2tb110 (tb2t110 j)) j)) :pattern ((t2tb110 (tb2t110 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 b a))) (v (set (set (tuple21 b a))))
  (r (set (tuple21 (tuple21 b a) (set (tuple21 b a))))))
  (= (mem (set1 (tuple2 (tuple2 b1 a1) (set1 (tuple2 b1 a1)))) (t2tb75 r)
  (relation (set1 (tuple2 b1 a1)) (tuple2 b1 a1) (t2tb37 u) (t2tb56 v)))
  (forall ((x (tuple21 b a)) (y (set (tuple21 b a))))
  (=> (mem (tuple2 (tuple2 b1 a1) (set1 (tuple2 b1 a1)))
  (Tuple2 (tuple2 b1 a1) (set1 (tuple2 b1 a1)) (t2tb38 x) (t2tb37 y))
  (t2tb75 r)) (and (mem5 x u) (mem6 y v)))))))

(declare-fun t2tb111 ((set (set (tuple21 (tuple21 b a) (tuple21 b a))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 b a) (tuple21 b a)))))) (sort
  (set1 (set1 (tuple2 (tuple2 b1 a1) (tuple2 b1 a1)))) (t2tb111 x))))

(declare-fun tb2t111 (uni) (set (set (tuple21 (tuple21 b a) (tuple21 b a)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 b a) (tuple21 b a))))))
  (! (= (tb2t111 (t2tb111 i)) i) :pattern ((t2tb111 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 b1 a1) (tuple2 b1 a1)))) j)
     (= (t2tb111 (tb2t111 j)) j)) :pattern ((t2tb111 (tb2t111 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 b a))) (v (set (tuple21 b a)))
  (r (set (tuple21 (tuple21 b a) (tuple21 b a)))))
  (= (mem (set1 (tuple2 (tuple2 b1 a1) (tuple2 b1 a1))) (t2tb77 r)
  (relation (tuple2 b1 a1) (tuple2 b1 a1) (t2tb37 u) (t2tb37 v)))
  (forall ((x (tuple21 b a)) (y (tuple21 b a)))
  (=> (mem (tuple2 (tuple2 b1 a1) (tuple2 b1 a1))
  (Tuple2 (tuple2 b1 a1) (tuple2 b1 a1) (t2tb38 x) (t2tb38 y)) (t2tb77 r))
  (and (mem5 x u) (mem5 y v)))))))

(declare-fun t2tb112 ((set (set (tuple21 (tuple21 b a) (set (tuple21 a
  b)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 b a) (set (tuple21 a b))))))) (sort
  (set1 (set1 (tuple2 (tuple2 b1 a1) (set1 (tuple2 a1 b1))))) (t2tb112 x))))

(declare-fun tb2t112 (uni) (set (set (tuple21 (tuple21 b a) (set (tuple21 a
  b))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 b a) (set (tuple21 a b)))))))
  (! (= (tb2t112 (t2tb112 i)) i) :pattern ((t2tb112 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 b1 a1) (set1 (tuple2 a1 b1))))) j)
     (= (t2tb112 (tb2t112 j)) j)) :pattern ((t2tb112 (tb2t112 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 b a))) (v (set (set (tuple21 a b))))
  (r (set (tuple21 (tuple21 b a) (set (tuple21 a b))))))
  (= (mem (set1 (tuple2 (tuple2 b1 a1) (set1 (tuple2 a1 b1)))) (t2tb80 r)
  (relation (set1 (tuple2 a1 b1)) (tuple2 b1 a1) (t2tb37 u) (t2tb10 v)))
  (forall ((x (tuple21 b a)) (y (set (tuple21 a b))))
  (=> (mem (tuple2 (tuple2 b1 a1) (set1 (tuple2 a1 b1)))
  (Tuple2 (tuple2 b1 a1) (set1 (tuple2 a1 b1)) (t2tb38 x) (t2tb11 y))
  (t2tb80 r)) (and (mem5 x u) (mem4 y v)))))))

(declare-fun t2tb113 ((set (set (tuple21 (tuple21 b a) (tuple21 a b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 b a) (tuple21 a b)))))) (sort
  (set1 (set1 (tuple2 (tuple2 b1 a1) (tuple2 a1 b1)))) (t2tb113 x))))

(declare-fun tb2t113 (uni) (set (set (tuple21 (tuple21 b a) (tuple21 a b)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 b a) (tuple21 a b))))))
  (! (= (tb2t113 (t2tb113 i)) i) :pattern ((t2tb113 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 b1 a1) (tuple2 a1 b1)))) j)
     (= (t2tb113 (tb2t113 j)) j)) :pattern ((t2tb113 (tb2t113 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 b a))) (v (set (tuple21 a b)))
  (r (set (tuple21 (tuple21 b a) (tuple21 a b)))))
  (= (mem (set1 (tuple2 (tuple2 b1 a1) (tuple2 a1 b1))) (t2tb81 r)
  (relation (tuple2 a1 b1) (tuple2 b1 a1) (t2tb37 u) (t2tb11 v)))
  (forall ((x (tuple21 b a)) (y (tuple21 a b)))
  (=> (mem (tuple2 (tuple2 b1 a1) (tuple2 a1 b1))
  (Tuple2 (tuple2 b1 a1) (tuple2 a1 b1) (t2tb38 x) (t2tb13 y)) (t2tb81 r))
  (and (mem5 x u) (mem3 y v)))))))

(declare-fun t2tb114 ((set (set (tuple21 (tuple21 b a) b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 b a) b))))) (sort
  (set1 (set1 (tuple2 (tuple2 b1 a1) b1))) (t2tb114 x))))

(declare-fun tb2t114 (uni) (set (set (tuple21 (tuple21 b a) b))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 b a) b)))))
  (! (= (tb2t114 (t2tb114 i)) i) :pattern ((t2tb114 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 b1 a1) b1))) j)
     (= (t2tb114 (tb2t114 j)) j)) :pattern ((t2tb114 (tb2t114 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 b a))) (v (set b)) (r (set (tuple21 (tuple21 b a)
  b))))
  (= (mem (set1 (tuple2 (tuple2 b1 a1) b1)) (t2tb83 r)
  (relation b1 (tuple2 b1 a1) (t2tb37 u) (t2tb12 v)))
  (forall ((x (tuple21 b a)) (y b))
  (=> (mem (tuple2 (tuple2 b1 a1) b1)
  (Tuple2 (tuple2 b1 a1) b1 (t2tb38 x) (t2tb14 y)) (t2tb83 r))
  (and (mem5 x u) (mem2 y v)))))))

(declare-fun t2tb115 ((set (set (tuple21 (tuple21 b a) a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 b a) a))))) (sort
  (set1 (set1 (tuple2 (tuple2 b1 a1) a1))) (t2tb115 x))))

(declare-fun tb2t115 (uni) (set (set (tuple21 (tuple21 b a) a))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 b a) a)))))
  (! (= (tb2t115 (t2tb115 i)) i) :pattern ((t2tb115 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 b1 a1) a1))) j)
     (= (t2tb115 (tb2t115 j)) j)) :pattern ((t2tb115 (tb2t115 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 b a))) (v (set a)) (r (set (tuple21 (tuple21 b a)
  a))))
  (= (mem (set1 (tuple2 (tuple2 b1 a1) a1)) (t2tb85 r)
  (relation a1 (tuple2 b1 a1) (t2tb37 u) (t2tb1 v)))
  (forall ((x (tuple21 b a)) (y a))
  (=> (mem (tuple2 (tuple2 b1 a1) a1)
  (Tuple2 (tuple2 b1 a1) a1 (t2tb38 x) (t2tb2 y)) (t2tb85 r))
  (and (mem5 x u) (mem1 y v)))))))

;; mem_relation
  (assert
  (forall ((b2 ty))
  (forall ((u (set (tuple21 b a))) (v uni) (r uni))
  (and
  (=> (mem (set1 (tuple2 (tuple2 b1 a1) b2)) r
  (relation b2 (tuple2 b1 a1) (t2tb37 u) v))
  (forall ((x (tuple21 b a)) (y uni))
  (=> (mem (tuple2 (tuple2 b1 a1) b2) (Tuple2 (tuple2 b1 a1) b2 (t2tb38 x) y)
  r) (and (mem5 x u) (mem b2 y v)))))
  (=>
  (forall ((x (tuple21 b a)) (y uni))
  (=> (sort b2 y)
  (=> (mem (tuple2 (tuple2 b1 a1) b2) (Tuple2 (tuple2 b1 a1) b2 (t2tb38 x) y)
  r) (and (mem5 x u) (mem b2 y v))))) (mem (set1 (tuple2 (tuple2 b1 a1) b2))
  r (relation b2 (tuple2 b1 a1) (t2tb37 u) v)))))))

(declare-fun t2tb116 ((set (set (tuple21 (set (tuple21 a b)) (set (tuple21 b
  a)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a b)) (set (tuple21 b a)))))))
  (sort (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 b1 a1)))))
  (t2tb116 x))))

(declare-fun tb2t116 (uni) (set (set (tuple21 (set (tuple21 a b))
  (set (tuple21 b a))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a b)) (set (tuple21 b a)))))))
  (! (= (tb2t116 (t2tb116 i)) i) :pattern ((t2tb116 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 b1 a1))))) j)
     (= (t2tb116 (tb2t116 j)) j)) :pattern ((t2tb116 (tb2t116 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a b)))) (v (set (set (tuple21 b a))))
  (r (set (tuple21 (set (tuple21 a b)) (set (tuple21 b a))))))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 b1 a1))))
  (t2tb87 r)
  (relation (set1 (tuple2 b1 a1)) (set1 (tuple2 a1 b1)) (t2tb10 u)
  (t2tb56 v)))
  (forall ((x (set (tuple21 a b))) (y (set (tuple21 b a))))
  (=> (mem (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 b1 a1)))
  (Tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 b1 a1)) (t2tb11 x) (t2tb37 y))
  (t2tb87 r)) (and (mem4 x u) (mem6 y v)))))))

(declare-fun t2tb117 ((set (set (tuple21 (set (tuple21 a b)) (tuple21 b
  a))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a b)) (tuple21 b a)))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 b1 a1)))) (t2tb117 x))))

(declare-fun tb2t117 (uni) (set (set (tuple21 (set (tuple21 a b)) (tuple21 b
  a)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a b)) (tuple21 b a))))))
  (! (= (tb2t117 (t2tb117 i)) i) :pattern ((t2tb117 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 b1 a1)))) j)
     (= (t2tb117 (tb2t117 j)) j)) :pattern ((t2tb117 (tb2t117 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a b)))) (v (set (tuple21 b a)))
  (r (set (tuple21 (set (tuple21 a b)) (tuple21 b a)))))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 b1 a1))) (t2tb89 r)
  (relation (tuple2 b1 a1) (set1 (tuple2 a1 b1)) (t2tb10 u) (t2tb37 v)))
  (forall ((x (set (tuple21 a b))) (y (tuple21 b a)))
  (=> (mem (tuple2 (set1 (tuple2 a1 b1)) (tuple2 b1 a1))
  (Tuple2 (set1 (tuple2 a1 b1)) (tuple2 b1 a1) (t2tb11 x) (t2tb38 y))
  (t2tb89 r)) (and (mem4 x u) (mem5 y v)))))))

(declare-fun t2tb45 ((set (set (tuple21 (set (tuple21 a b)) (set (tuple21 a
  b)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a b)) (set (tuple21 a b)))))))
  (sort (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1)))))
  (t2tb45 x))))

(declare-fun tb2t45 (uni) (set (set (tuple21 (set (tuple21 a b))
  (set (tuple21 a b))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a b)) (set (tuple21 a b)))))))
  (! (= (tb2t45 (t2tb45 i)) i) :pattern ((t2tb45 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1))))) j)
     (= (t2tb45 (tb2t45 j)) j)) :pattern ((t2tb45 (tb2t45 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a b)))) (v (set (set (tuple21 a b))))
  (r (set (tuple21 (set (tuple21 a b)) (set (tuple21 a b))))))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1))))
  (t2tb15 r)
  (relation (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1)) (t2tb10 u)
  (t2tb10 v)))
  (forall ((x (set (tuple21 a b))) (y (set (tuple21 a b))))
  (=> (mem (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1)))
  (Tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1)) (t2tb11 x) (t2tb11 y))
  (t2tb15 r)) (and (mem4 x u) (mem4 y v)))))))

(declare-fun t2tb46 ((set (set (tuple21 (set (tuple21 a b)) (tuple21 a
  b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a b)) (tuple21 a b)))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 b1)))) (t2tb46 x))))

(declare-fun tb2t46 (uni) (set (set (tuple21 (set (tuple21 a b)) (tuple21 a
  b)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a b)) (tuple21 a b))))))
  (! (= (tb2t46 (t2tb46 i)) i) :pattern ((t2tb46 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 b1)))) j)
     (= (t2tb46 (tb2t46 j)) j)) :pattern ((t2tb46 (tb2t46 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a b)))) (v (set (tuple21 a b)))
  (r (set (tuple21 (set (tuple21 a b)) (tuple21 a b)))))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 b1))) (t2tb17 r)
  (relation (tuple2 a1 b1) (set1 (tuple2 a1 b1)) (t2tb10 u) (t2tb11 v)))
  (forall ((x (set (tuple21 a b))) (y (tuple21 a b)))
  (=> (mem (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 b1))
  (Tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 b1) (t2tb11 x) (t2tb13 y))
  (t2tb17 r)) (and (mem4 x u) (mem3 y v)))))))

(declare-fun t2tb47 ((set (set (tuple21 (set (tuple21 a b)) b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a b)) b))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) b1))) (t2tb47 x))))

(declare-fun tb2t47 (uni) (set (set (tuple21 (set (tuple21 a b)) b))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a b)) b)))))
  (! (= (tb2t47 (t2tb47 i)) i) :pattern ((t2tb47 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) b1))) j)
     (= (t2tb47 (tb2t47 j)) j)) :pattern ((t2tb47 (tb2t47 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a b)))) (v (set b))
  (r (set (tuple21 (set (tuple21 a b)) b))))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 b1)) b1)) (t2tb19 r)
  (relation b1 (set1 (tuple2 a1 b1)) (t2tb10 u) (t2tb12 v)))
  (forall ((x (set (tuple21 a b))) (y b))
  (=> (mem (tuple2 (set1 (tuple2 a1 b1)) b1)
  (Tuple2 (set1 (tuple2 a1 b1)) b1 (t2tb11 x) (t2tb14 y)) (t2tb19 r))
  (and (mem4 x u) (mem2 y v)))))))

(declare-fun t2tb48 ((set (set (tuple21 (set (tuple21 a b)) a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a b)) a))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) a1))) (t2tb48 x))))

(declare-fun tb2t48 (uni) (set (set (tuple21 (set (tuple21 a b)) a))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a b)) a)))))
  (! (= (tb2t48 (t2tb48 i)) i) :pattern ((t2tb48 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) a1))) j)
     (= (t2tb48 (tb2t48 j)) j)) :pattern ((t2tb48 (tb2t48 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a b)))) (v (set a))
  (r (set (tuple21 (set (tuple21 a b)) a))))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 b1)) a1)) (t2tb22 r)
  (relation a1 (set1 (tuple2 a1 b1)) (t2tb10 u) (t2tb1 v)))
  (forall ((x (set (tuple21 a b))) (y a))
  (=> (mem (tuple2 (set1 (tuple2 a1 b1)) a1)
  (Tuple2 (set1 (tuple2 a1 b1)) a1 (t2tb11 x) (t2tb2 y)) (t2tb22 r))
  (and (mem4 x u) (mem1 y v)))))))

;; mem_relation
  (assert
  (forall ((b2 ty))
  (forall ((u (set (set (tuple21 a b)))) (v uni) (r uni))
  (and
  (=> (mem (set1 (tuple2 (set1 (tuple2 a1 b1)) b2)) r
  (relation b2 (set1 (tuple2 a1 b1)) (t2tb10 u) v))
  (forall ((x (set (tuple21 a b))) (y uni))
  (=> (mem (tuple2 (set1 (tuple2 a1 b1)) b2)
  (Tuple2 (set1 (tuple2 a1 b1)) b2 (t2tb11 x) y) r)
  (and (mem4 x u) (mem b2 y v)))))
  (=>
  (forall ((x (set (tuple21 a b))) (y uni))
  (=> (sort b2 y)
  (=> (mem (tuple2 (set1 (tuple2 a1 b1)) b2)
  (Tuple2 (set1 (tuple2 a1 b1)) b2 (t2tb11 x) y) r)
  (and (mem4 x u) (mem b2 y v))))) (mem
  (set1 (tuple2 (set1 (tuple2 a1 b1)) b2)) r
  (relation b2 (set1 (tuple2 a1 b1)) (t2tb10 u) v)))))))

(declare-fun t2tb118 ((set (set (tuple21 (tuple21 a b) (set (tuple21 b
  a)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a b) (set (tuple21 b a))))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 b1) (set1 (tuple2 b1 a1))))) (t2tb118 x))))

(declare-fun tb2t118 (uni) (set (set (tuple21 (tuple21 a b) (set (tuple21 b
  a))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a b) (set (tuple21 b a)))))))
  (! (= (tb2t118 (t2tb118 i)) i) :pattern ((t2tb118 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 b1) (set1 (tuple2 b1 a1))))) j)
     (= (t2tb118 (tb2t118 j)) j)) :pattern ((t2tb118 (tb2t118 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a b))) (v (set (set (tuple21 b a))))
  (r (set (tuple21 (tuple21 a b) (set (tuple21 b a))))))
  (= (mem (set1 (tuple2 (tuple2 a1 b1) (set1 (tuple2 b1 a1)))) (t2tb91 r)
  (relation (set1 (tuple2 b1 a1)) (tuple2 a1 b1) (t2tb11 u) (t2tb56 v)))
  (forall ((x (tuple21 a b)) (y (set (tuple21 b a))))
  (=> (mem (tuple2 (tuple2 a1 b1) (set1 (tuple2 b1 a1)))
  (Tuple2 (tuple2 a1 b1) (set1 (tuple2 b1 a1)) (t2tb13 x) (t2tb37 y))
  (t2tb91 r)) (and (mem3 x u) (mem6 y v)))))))

(declare-fun t2tb119 ((set (set (tuple21 (tuple21 a b) (tuple21 b a))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a b) (tuple21 b a)))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 b1) (tuple2 b1 a1)))) (t2tb119 x))))

(declare-fun tb2t119 (uni) (set (set (tuple21 (tuple21 a b) (tuple21 b a)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a b) (tuple21 b a))))))
  (! (= (tb2t119 (t2tb119 i)) i) :pattern ((t2tb119 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 b1) (tuple2 b1 a1)))) j)
     (= (t2tb119 (tb2t119 j)) j)) :pattern ((t2tb119 (tb2t119 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a b))) (v (set (tuple21 b a)))
  (r (set (tuple21 (tuple21 a b) (tuple21 b a)))))
  (= (mem (set1 (tuple2 (tuple2 a1 b1) (tuple2 b1 a1))) (t2tb94 r)
  (relation (tuple2 b1 a1) (tuple2 a1 b1) (t2tb11 u) (t2tb37 v)))
  (forall ((x (tuple21 a b)) (y (tuple21 b a)))
  (=> (mem (tuple2 (tuple2 a1 b1) (tuple2 b1 a1))
  (Tuple2 (tuple2 a1 b1) (tuple2 b1 a1) (t2tb13 x) (t2tb38 y)) (t2tb94 r))
  (and (mem3 x u) (mem5 y v)))))))

(declare-fun t2tb49 ((set (set (tuple21 (tuple21 a b) (set (tuple21 a
  b)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a b) (set (tuple21 a b))))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 b1))))) (t2tb49 x))))

(declare-fun tb2t49 (uni) (set (set (tuple21 (tuple21 a b) (set (tuple21 a
  b))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a b) (set (tuple21 a b)))))))
  (! (= (tb2t49 (t2tb49 i)) i) :pattern ((t2tb49 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 b1))))) j)
     (= (t2tb49 (tb2t49 j)) j)) :pattern ((t2tb49 (tb2t49 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a b))) (v (set (set (tuple21 a b))))
  (r (set (tuple21 (tuple21 a b) (set (tuple21 a b))))))
  (= (mem (set1 (tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 b1)))) (t2tb23 r)
  (relation (set1 (tuple2 a1 b1)) (tuple2 a1 b1) (t2tb11 u) (t2tb10 v)))
  (forall ((x (tuple21 a b)) (y (set (tuple21 a b))))
  (=> (mem (tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 b1)))
  (Tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 b1)) (t2tb13 x) (t2tb11 y))
  (t2tb23 r)) (and (mem3 x u) (mem4 y v)))))))

(declare-fun t2tb50 ((set (set (tuple21 (tuple21 a b) (tuple21 a b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a b) (tuple21 a b)))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 b1) (tuple2 a1 b1)))) (t2tb50 x))))

(declare-fun tb2t50 (uni) (set (set (tuple21 (tuple21 a b) (tuple21 a b)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a b) (tuple21 a b))))))
  (! (= (tb2t50 (t2tb50 i)) i) :pattern ((t2tb50 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 b1) (tuple2 a1 b1)))) j)
     (= (t2tb50 (tb2t50 j)) j)) :pattern ((t2tb50 (tb2t50 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a b))) (v (set (tuple21 a b)))
  (r (set (tuple21 (tuple21 a b) (tuple21 a b)))))
  (= (mem (set1 (tuple2 (tuple2 a1 b1) (tuple2 a1 b1))) (t2tb25 r)
  (relation (tuple2 a1 b1) (tuple2 a1 b1) (t2tb11 u) (t2tb11 v)))
  (forall ((x (tuple21 a b)) (y (tuple21 a b)))
  (=> (mem (tuple2 (tuple2 a1 b1) (tuple2 a1 b1))
  (Tuple2 (tuple2 a1 b1) (tuple2 a1 b1) (t2tb13 x) (t2tb13 y)) (t2tb25 r))
  (and (mem3 x u) (mem3 y v)))))))

(declare-fun t2tb51 ((set (set (tuple21 (tuple21 a b) b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a b) b))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 b1) b1))) (t2tb51 x))))

(declare-fun tb2t51 (uni) (set (set (tuple21 (tuple21 a b) b))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a b) b)))))
  (! (= (tb2t51 (t2tb51 i)) i) :pattern ((t2tb51 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 b1) b1))) j)
     (= (t2tb51 (tb2t51 j)) j)) :pattern ((t2tb51 (tb2t51 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a b))) (v (set b)) (r (set (tuple21 (tuple21 a b)
  b))))
  (= (mem (set1 (tuple2 (tuple2 a1 b1) b1)) (t2tb27 r)
  (relation b1 (tuple2 a1 b1) (t2tb11 u) (t2tb12 v)))
  (forall ((x (tuple21 a b)) (y b))
  (=> (mem (tuple2 (tuple2 a1 b1) b1)
  (Tuple2 (tuple2 a1 b1) b1 (t2tb13 x) (t2tb14 y)) (t2tb27 r))
  (and (mem3 x u) (mem2 y v)))))))

(declare-fun t2tb52 ((set (set (tuple21 (tuple21 a b) a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a b) a))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 b1) a1))) (t2tb52 x))))

(declare-fun tb2t52 (uni) (set (set (tuple21 (tuple21 a b) a))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a b) a)))))
  (! (= (tb2t52 (t2tb52 i)) i) :pattern ((t2tb52 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 b1) a1))) j)
     (= (t2tb52 (tb2t52 j)) j)) :pattern ((t2tb52 (tb2t52 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a b))) (v (set a)) (r (set (tuple21 (tuple21 a b)
  a))))
  (= (mem (set1 (tuple2 (tuple2 a1 b1) a1)) (t2tb29 r)
  (relation a1 (tuple2 a1 b1) (t2tb11 u) (t2tb1 v)))
  (forall ((x (tuple21 a b)) (y a))
  (=> (mem (tuple2 (tuple2 a1 b1) a1)
  (Tuple2 (tuple2 a1 b1) a1 (t2tb13 x) (t2tb2 y)) (t2tb29 r))
  (and (mem3 x u) (mem1 y v)))))))

;; mem_relation
  (assert
  (forall ((b2 ty))
  (forall ((u (set (tuple21 a b))) (v uni) (r uni))
  (and
  (=> (mem (set1 (tuple2 (tuple2 a1 b1) b2)) r
  (relation b2 (tuple2 a1 b1) (t2tb11 u) v))
  (forall ((x (tuple21 a b)) (y uni))
  (=> (mem (tuple2 (tuple2 a1 b1) b2) (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) y)
  r) (and (mem3 x u) (mem b2 y v)))))
  (=>
  (forall ((x (tuple21 a b)) (y uni))
  (=> (sort b2 y)
  (=> (mem (tuple2 (tuple2 a1 b1) b2) (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) y)
  r) (and (mem3 x u) (mem b2 y v))))) (mem (set1 (tuple2 (tuple2 a1 b1) b2))
  r (relation b2 (tuple2 a1 b1) (t2tb11 u) v)))))))

(declare-fun t2tb120 ((set (set (tuple21 b (set (tuple21 b a)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 b (set (tuple21 b a))))))) (sort
  (set1 (set1 (tuple2 b1 (set1 (tuple2 b1 a1))))) (t2tb120 x))))

(declare-fun tb2t120 (uni) (set (set (tuple21 b (set (tuple21 b a))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 b (set (tuple21 b a)))))))
  (! (= (tb2t120 (t2tb120 i)) i) :pattern ((t2tb120 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 b1 (set1 (tuple2 b1 a1))))) j)
     (= (t2tb120 (tb2t120 j)) j)) :pattern ((t2tb120 (tb2t120 j))) )))

;; mem_relation
  (assert
  (forall ((u (set b)) (v (set (set (tuple21 b a)))) (r (set (tuple21 b
  (set (tuple21 b a))))))
  (= (mem (set1 (tuple2 b1 (set1 (tuple2 b1 a1)))) (t2tb95 r)
  (relation (set1 (tuple2 b1 a1)) b1 (t2tb12 u) (t2tb56 v)))
  (forall ((x b) (y (set (tuple21 b a))))
  (=> (mem (tuple2 b1 (set1 (tuple2 b1 a1)))
  (Tuple2 b1 (set1 (tuple2 b1 a1)) (t2tb14 x) (t2tb37 y)) (t2tb95 r))
  (and (mem2 x u) (mem6 y v)))))))

(declare-fun t2tb121 ((set (set (tuple21 b (tuple21 b a))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 b (tuple21 b a)))))) (sort
  (set1 (set1 (tuple2 b1 (tuple2 b1 a1)))) (t2tb121 x))))

(declare-fun tb2t121 (uni) (set (set (tuple21 b (tuple21 b a)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 b (tuple21 b a))))))
  (! (= (tb2t121 (t2tb121 i)) i) :pattern ((t2tb121 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 b1 (tuple2 b1 a1)))) j)
     (= (t2tb121 (tb2t121 j)) j)) :pattern ((t2tb121 (tb2t121 j))) )))

;; mem_relation
  (assert
  (forall ((u (set b)) (v (set (tuple21 b a))) (r (set (tuple21 b (tuple21 b
  a)))))
  (= (mem (set1 (tuple2 b1 (tuple2 b1 a1))) (t2tb97 r)
  (relation (tuple2 b1 a1) b1 (t2tb12 u) (t2tb37 v)))
  (forall ((x b) (y (tuple21 b a)))
  (=> (mem (tuple2 b1 (tuple2 b1 a1))
  (Tuple2 b1 (tuple2 b1 a1) (t2tb14 x) (t2tb38 y)) (t2tb97 r))
  (and (mem2 x u) (mem5 y v)))))))

(declare-fun t2tb53 ((set (set (tuple21 b (set (tuple21 a b)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 b (set (tuple21 a b))))))) (sort
  (set1 (set1 (tuple2 b1 (set1 (tuple2 a1 b1))))) (t2tb53 x))))

(declare-fun tb2t53 (uni) (set (set (tuple21 b (set (tuple21 a b))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 b (set (tuple21 a b)))))))
  (! (= (tb2t53 (t2tb53 i)) i) :pattern ((t2tb53 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 b1 (set1 (tuple2 a1 b1))))) j)
     (= (t2tb53 (tb2t53 j)) j)) :pattern ((t2tb53 (tb2t53 j))) )))

;; mem_relation
  (assert
  (forall ((u (set b)) (v (set (set (tuple21 a b)))) (r (set (tuple21 b
  (set (tuple21 a b))))))
  (= (mem (set1 (tuple2 b1 (set1 (tuple2 a1 b1)))) (t2tb31 r)
  (relation (set1 (tuple2 a1 b1)) b1 (t2tb12 u) (t2tb10 v)))
  (forall ((x b) (y (set (tuple21 a b))))
  (=> (mem (tuple2 b1 (set1 (tuple2 a1 b1)))
  (Tuple2 b1 (set1 (tuple2 a1 b1)) (t2tb14 x) (t2tb11 y)) (t2tb31 r))
  (and (mem2 x u) (mem4 y v)))))))

(declare-fun t2tb54 ((set (set (tuple21 b (tuple21 a b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 b (tuple21 a b)))))) (sort
  (set1 (set1 (tuple2 b1 (tuple2 a1 b1)))) (t2tb54 x))))

(declare-fun tb2t54 (uni) (set (set (tuple21 b (tuple21 a b)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 b (tuple21 a b))))))
  (! (= (tb2t54 (t2tb54 i)) i) :pattern ((t2tb54 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 b1 (tuple2 a1 b1)))) j)
     (= (t2tb54 (tb2t54 j)) j)) :pattern ((t2tb54 (tb2t54 j))) )))

;; mem_relation
  (assert
  (forall ((u (set b)) (v (set (tuple21 a b))) (r (set (tuple21 b (tuple21 a
  b)))))
  (= (mem (set1 (tuple2 b1 (tuple2 a1 b1))) (t2tb34 r)
  (relation (tuple2 a1 b1) b1 (t2tb12 u) (t2tb11 v)))
  (forall ((x b) (y (tuple21 a b)))
  (=> (mem (tuple2 b1 (tuple2 a1 b1))
  (Tuple2 b1 (tuple2 a1 b1) (t2tb14 x) (t2tb13 y)) (t2tb34 r))
  (and (mem2 x u) (mem3 y v)))))))

(declare-fun t2tb55 ((set (set (tuple21 b b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 b b))))) (sort (set1 (set1 (tuple2 b1 b1)))
  (t2tb55 x))))

(declare-fun tb2t55 (uni) (set (set (tuple21 b b))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 b b)))))
  (! (= (tb2t55 (t2tb55 i)) i) :pattern ((t2tb55 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 b1 b1))) j) (= (t2tb55 (tb2t55 j)) j)) :pattern (
  (t2tb55 (tb2t55 j))) )))

;; mem_relation
  (assert
  (forall ((u (set b)) (v (set b)) (r (set (tuple21 b b))))
  (= (mem (set1 (tuple2 b1 b1)) (t2tb35 r)
  (relation b1 b1 (t2tb12 u) (t2tb12 v)))
  (forall ((x b) (y b))
  (=> (mem (tuple2 b1 b1) (Tuple2 b1 b1 (t2tb14 x) (t2tb14 y)) (t2tb35 r))
  (and (mem2 x u) (mem2 y v)))))))

;; mem_relation
  (assert
  (forall ((u (set b)) (v (set a)) (r (set (tuple21 b a))))
  (= (mem6 r (tb2t56 (relation a1 b1 (t2tb12 u) (t2tb1 v))))
  (forall ((x b) (y a))
  (=> (mem5 (tb2t38 (Tuple2 b1 a1 (t2tb14 x) (t2tb2 y))) r)
  (and (mem2 x u) (mem1 y v)))))))

;; mem_relation
  (assert
  (forall ((b2 ty))
  (forall ((u (set b)) (v uni) (r uni))
  (and
  (=> (mem (set1 (tuple2 b1 b2)) r (relation b2 b1 (t2tb12 u) v))
  (forall ((x b) (y uni))
  (=> (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) y) r)
  (and (mem2 x u) (mem b2 y v)))))
  (=>
  (forall ((x b) (y uni))
  (=> (sort b2 y)
  (=> (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) y) r)
  (and (mem2 x u) (mem b2 y v))))) (mem (set1 (tuple2 b1 b2)) r
  (relation b2 b1 (t2tb12 u) v)))))))

(declare-fun t2tb122 ((set (set (tuple21 a (set (tuple21 b a)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 a (set (tuple21 b a))))))) (sort
  (set1 (set1 (tuple2 a1 (set1 (tuple2 b1 a1))))) (t2tb122 x))))

(declare-fun tb2t122 (uni) (set (set (tuple21 a (set (tuple21 b a))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 a (set (tuple21 b a)))))))
  (! (= (tb2t122 (t2tb122 i)) i) :pattern ((t2tb122 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 a1 (set1 (tuple2 b1 a1))))) j)
     (= (t2tb122 (tb2t122 j)) j)) :pattern ((t2tb122 (tb2t122 j))) )))

;; mem_relation
  (assert
  (forall ((u (set a)) (v (set (set (tuple21 b a)))) (r (set (tuple21 a
  (set (tuple21 b a))))))
  (= (mem (set1 (tuple2 a1 (set1 (tuple2 b1 a1)))) (t2tb99 r)
  (relation (set1 (tuple2 b1 a1)) a1 (t2tb1 u) (t2tb56 v)))
  (forall ((x a) (y (set (tuple21 b a))))
  (=> (mem (tuple2 a1 (set1 (tuple2 b1 a1)))
  (Tuple2 a1 (set1 (tuple2 b1 a1)) (t2tb2 x) (t2tb37 y)) (t2tb99 r))
  (and (mem1 x u) (mem6 y v)))))))

(declare-fun t2tb123 ((set (set (tuple21 a (tuple21 b a))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 a (tuple21 b a)))))) (sort
  (set1 (set1 (tuple2 a1 (tuple2 b1 a1)))) (t2tb123 x))))

(declare-fun tb2t123 (uni) (set (set (tuple21 a (tuple21 b a)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 a (tuple21 b a))))))
  (! (= (tb2t123 (t2tb123 i)) i) :pattern ((t2tb123 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 a1 (tuple2 b1 a1)))) j)
     (= (t2tb123 (tb2t123 j)) j)) :pattern ((t2tb123 (tb2t123 j))) )))

;; mem_relation
  (assert
  (forall ((u (set a)) (v (set (tuple21 b a))) (r (set (tuple21 a (tuple21 b
  a)))))
  (= (mem (set1 (tuple2 a1 (tuple2 b1 a1))) (t2tb101 r)
  (relation (tuple2 b1 a1) a1 (t2tb1 u) (t2tb37 v)))
  (forall ((x a) (y (tuple21 b a)))
  (=> (mem (tuple2 a1 (tuple2 b1 a1))
  (Tuple2 a1 (tuple2 b1 a1) (t2tb2 x) (t2tb38 y)) (t2tb101 r))
  (and (mem1 x u) (mem5 y v)))))))

(declare-fun t2tb57 ((set (set (tuple21 a (set (tuple21 a b)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 a (set (tuple21 a b))))))) (sort
  (set1 (set1 (tuple2 a1 (set1 (tuple2 a1 b1))))) (t2tb57 x))))

(declare-fun tb2t57 (uni) (set (set (tuple21 a (set (tuple21 a b))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 a (set (tuple21 a b)))))))
  (! (= (tb2t57 (t2tb57 i)) i) :pattern ((t2tb57 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 a1 (set1 (tuple2 a1 b1))))) j)
     (= (t2tb57 (tb2t57 j)) j)) :pattern ((t2tb57 (tb2t57 j))) )))

;; mem_relation
  (assert
  (forall ((u (set a)) (v (set (set (tuple21 a b)))) (r (set (tuple21 a
  (set (tuple21 a b))))))
  (= (mem (set1 (tuple2 a1 (set1 (tuple2 a1 b1)))) (t2tb39 r)
  (relation (set1 (tuple2 a1 b1)) a1 (t2tb1 u) (t2tb10 v)))
  (forall ((x a) (y (set (tuple21 a b))))
  (=> (mem (tuple2 a1 (set1 (tuple2 a1 b1)))
  (Tuple2 a1 (set1 (tuple2 a1 b1)) (t2tb2 x) (t2tb11 y)) (t2tb39 r))
  (and (mem1 x u) (mem4 y v)))))))

(declare-fun t2tb58 ((set (set (tuple21 a (tuple21 a b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 a (tuple21 a b)))))) (sort
  (set1 (set1 (tuple2 a1 (tuple2 a1 b1)))) (t2tb58 x))))

(declare-fun tb2t58 (uni) (set (set (tuple21 a (tuple21 a b)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 a (tuple21 a b))))))
  (! (= (tb2t58 (t2tb58 i)) i) :pattern ((t2tb58 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 a1 (tuple2 a1 b1)))) j)
     (= (t2tb58 (tb2t58 j)) j)) :pattern ((t2tb58 (tb2t58 j))) )))

;; mem_relation
  (assert
  (forall ((u (set a)) (v (set (tuple21 a b))) (r (set (tuple21 a (tuple21 a
  b)))))
  (= (mem (set1 (tuple2 a1 (tuple2 a1 b1))) (t2tb41 r)
  (relation (tuple2 a1 b1) a1 (t2tb1 u) (t2tb11 v)))
  (forall ((x a) (y (tuple21 a b)))
  (=> (mem (tuple2 a1 (tuple2 a1 b1))
  (Tuple2 a1 (tuple2 a1 b1) (t2tb2 x) (t2tb13 y)) (t2tb41 r))
  (and (mem1 x u) (mem3 y v)))))))

;; mem_relation
  (assert
  (forall ((u (set a)) (v (set b)) (r (set (tuple21 a b))))
  (= (mem4 r (tb2t10 (relation b1 a1 (t2tb1 u) (t2tb12 v))))
  (forall ((x a) (y b))
  (=> (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y))) r)
  (and (mem1 x u) (mem2 y v)))))))

(declare-fun t2tb3 ((set (set (tuple21 a a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 a a))))) (sort (set1 (set1 (tuple2 a1 a1)))
  (t2tb3 x))))

(declare-fun tb2t3 (uni) (set (set (tuple21 a a))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 a a)))))
  (! (= (tb2t3 (t2tb3 i)) i) :pattern ((t2tb3 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 a1 a1))) j) (= (t2tb3 (tb2t3 j)) j)) :pattern (
  (t2tb3 (tb2t3 j))) )))

;; mem_relation
  (assert
  (forall ((u (set a)) (v (set a)) (r (set (tuple21 a a))))
  (= (mem (set1 (tuple2 a1 a1)) (t2tb4 r)
  (relation a1 a1 (t2tb1 u) (t2tb1 v)))
  (forall ((x a) (y a))
  (=> (mem (tuple2 a1 a1) (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y)) (t2tb4 r))
  (and (mem1 x u) (mem1 y v)))))))

;; mem_relation
  (assert
  (forall ((b2 ty))
  (forall ((u (set a)) (v uni) (r uni))
  (and
  (=> (mem (set1 (tuple2 a1 b2)) r (relation b2 a1 (t2tb1 u) v))
  (forall ((x a) (y uni))
  (=> (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) y) r)
  (and (mem1 x u) (mem b2 y v)))))
  (=>
  (forall ((x a) (y uni))
  (=> (sort b2 y)
  (=> (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) y) r)
  (and (mem1 x u) (mem b2 y v))))) (mem (set1 (tuple2 a1 b2)) r
  (relation b2 a1 (t2tb1 u) v)))))))

;; mem_relation
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((u uni) (v uni) (r uni))
  (and
  (=> (mem (set1 (tuple2 a2 b2)) r (relation b2 a2 u v))
  (forall ((x uni) (y uni))
  (=> (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) r)
  (and (mem a2 x u) (mem b2 y v)))))
  (=>
  (forall ((x uni) (y uni))
  (=> (sort a2 x)
  (=> (sort b2 y)
  (=> (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) r)
  (and (mem a2 x u) (mem b2 y v)))))) (mem (set1 (tuple2 a2 b2)) r
  (relation b2 a2 u v)))))))

(declare-fun inverse (ty ty uni) uni)

;; inverse_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni)) (sort (set1 (tuple2 b2 a2)) (inverse b2 a2 x)))))

(declare-fun inverse1 ((set (tuple21 b a))) (set (tuple21 a b)))

(declare-fun inverse2 ((set (tuple21 a b))) (set (tuple21 b a)))

;; mem_inverse
  (assert
  (forall ((p (set (tuple21 b a))) (x a) (y b))
  (= (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y))) (inverse1 p)) (mem5
  (tb2t38 (Tuple2 b1 a1 (t2tb14 y) (t2tb2 x))) p))))

;; mem_inverse
  (assert
  (forall ((p (set (tuple21 a b))) (x b) (y a))
  (= (mem5 (tb2t38 (Tuple2 b1 a1 (t2tb14 x) (t2tb2 y))) (inverse2 p)) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 y) (t2tb14 x))) p))))

;; mem_inverse
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((p uni) (x uni) (y uni))
  (= (mem (tuple2 b2 a2) (Tuple2 b2 a2 x y) (inverse b2 a2 p)) (mem
  (tuple2 a2 b2) (Tuple2 a2 b2 y x) p)))))

(declare-fun dom (ty ty uni) uni)

;; dom_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni)) (sort (set1 a2) (dom b2 a2 x)))))

;; mem_dom
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (x (set (tuple21 b a))))
  (and
  (=> (mem6 x (tb2t56 (dom b2 (set1 (tuple2 b1 a1)) p)))
  (exists ((b3 uni))
  (and (sort b2 b3) (mem (tuple2 (set1 (tuple2 b1 a1)) b2)
  (Tuple2 (set1 (tuple2 b1 a1)) b2 (t2tb37 x) b3) p))))
  (=>
  (exists ((b3 uni)) (mem (tuple2 (set1 (tuple2 b1 a1)) b2)
  (Tuple2 (set1 (tuple2 b1 a1)) b2 (t2tb37 x) b3) p)) (mem6 x
  (tb2t56 (dom b2 (set1 (tuple2 b1 a1)) p))))))))

;; mem_dom
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (x (tuple21 b a)))
  (and
  (=> (mem5 x (tb2t37 (dom b2 (tuple2 b1 a1) p)))
  (exists ((b3 uni))
  (and (sort b2 b3) (mem (tuple2 (tuple2 b1 a1) b2)
  (Tuple2 (tuple2 b1 a1) b2 (t2tb38 x) b3) p))))
  (=>
  (exists ((b3 uni)) (mem (tuple2 (tuple2 b1 a1) b2)
  (Tuple2 (tuple2 b1 a1) b2 (t2tb38 x) b3) p)) (mem5 x
  (tb2t37 (dom b2 (tuple2 b1 a1) p))))))))

;; mem_dom
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (x (set (tuple21 a b))))
  (and
  (=> (mem4 x (tb2t10 (dom b2 (set1 (tuple2 a1 b1)) p)))
  (exists ((b3 uni))
  (and (sort b2 b3) (mem (tuple2 (set1 (tuple2 a1 b1)) b2)
  (Tuple2 (set1 (tuple2 a1 b1)) b2 (t2tb11 x) b3) p))))
  (=>
  (exists ((b3 uni)) (mem (tuple2 (set1 (tuple2 a1 b1)) b2)
  (Tuple2 (set1 (tuple2 a1 b1)) b2 (t2tb11 x) b3) p)) (mem4 x
  (tb2t10 (dom b2 (set1 (tuple2 a1 b1)) p))))))))

;; mem_dom
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (x (tuple21 a b)))
  (and
  (=> (mem3 x (tb2t11 (dom b2 (tuple2 a1 b1) p)))
  (exists ((b3 uni))
  (and (sort b2 b3) (mem (tuple2 (tuple2 a1 b1) b2)
  (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) b3) p))))
  (=>
  (exists ((b3 uni)) (mem (tuple2 (tuple2 a1 b1) b2)
  (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) b3) p)) (mem3 x
  (tb2t11 (dom b2 (tuple2 a1 b1) p))))))))

;; mem_dom
  (assert
  (forall ((p (set (tuple21 b a))) (x b))
  (= (mem2 x (tb2t12 (dom a1 b1 (t2tb37 p))))
  (exists ((b2 a)) (mem5 (tb2t38 (Tuple2 b1 a1 (t2tb14 x) (t2tb2 b2))) p)))))

;; mem_dom
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (x b))
  (and
  (=> (mem2 x (tb2t12 (dom b2 b1 p)))
  (exists ((b3 uni))
  (and (sort b2 b3) (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) b3) p))))
  (=> (exists ((b3 uni)) (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) b3) p))
  (mem2 x (tb2t12 (dom b2 b1 p))))))))

;; mem_dom
  (assert
  (forall ((p (set (tuple21 a b))) (x a))
  (= (mem1 x (tb2t1 (dom b1 a1 (t2tb11 p))))
  (exists ((b2 b)) (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 b2))) p)))))

;; mem_dom
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (x a))
  (and
  (=> (mem1 x (tb2t1 (dom b2 a1 p)))
  (exists ((b3 uni))
  (and (sort b2 b3) (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) b3) p))))
  (=> (exists ((b3 uni)) (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) b3) p))
  (mem1 x (tb2t1 (dom b2 a1 p))))))))

;; mem_dom
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((p uni) (x uni))
  (and
  (=> (mem a2 x (dom b2 a2 p))
  (exists ((b3 uni))
  (and (sort b2 b3) (mem (tuple2 a2 b2) (Tuple2 a2 b2 x b3) p))))
  (=> (exists ((b3 uni)) (mem (tuple2 a2 b2) (Tuple2 a2 b2 x b3) p)) (mem a2
  x (dom b2 a2 p)))))))

(declare-fun ran (ty ty uni) uni)

;; ran_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni)) (sort (set1 b2) (ran b2 a2 x)))))

;; mem_ran
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (x (set (tuple21 b a))))
  (and
  (=> (mem6 x (tb2t56 (ran (set1 (tuple2 b1 a1)) a2 p)))
  (exists ((a3 uni))
  (and (sort a2 a3) (mem (tuple2 a2 (set1 (tuple2 b1 a1)))
  (Tuple2 a2 (set1 (tuple2 b1 a1)) a3 (t2tb37 x)) p))))
  (=>
  (exists ((a3 uni)) (mem (tuple2 a2 (set1 (tuple2 b1 a1)))
  (Tuple2 a2 (set1 (tuple2 b1 a1)) a3 (t2tb37 x)) p)) (mem6 x
  (tb2t56 (ran (set1 (tuple2 b1 a1)) a2 p))))))))

;; mem_ran
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (x (tuple21 b a)))
  (and
  (=> (mem5 x (tb2t37 (ran (tuple2 b1 a1) a2 p)))
  (exists ((a3 uni))
  (and (sort a2 a3) (mem (tuple2 a2 (tuple2 b1 a1))
  (Tuple2 a2 (tuple2 b1 a1) a3 (t2tb38 x)) p))))
  (=>
  (exists ((a3 uni)) (mem (tuple2 a2 (tuple2 b1 a1))
  (Tuple2 a2 (tuple2 b1 a1) a3 (t2tb38 x)) p)) (mem5 x
  (tb2t37 (ran (tuple2 b1 a1) a2 p))))))))

;; mem_ran
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (x (set (tuple21 a b))))
  (and
  (=> (mem4 x (tb2t10 (ran (set1 (tuple2 a1 b1)) a2 p)))
  (exists ((a3 uni))
  (and (sort a2 a3) (mem (tuple2 a2 (set1 (tuple2 a1 b1)))
  (Tuple2 a2 (set1 (tuple2 a1 b1)) a3 (t2tb11 x)) p))))
  (=>
  (exists ((a3 uni)) (mem (tuple2 a2 (set1 (tuple2 a1 b1)))
  (Tuple2 a2 (set1 (tuple2 a1 b1)) a3 (t2tb11 x)) p)) (mem4 x
  (tb2t10 (ran (set1 (tuple2 a1 b1)) a2 p))))))))

;; mem_ran
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (x (tuple21 a b)))
  (and
  (=> (mem3 x (tb2t11 (ran (tuple2 a1 b1) a2 p)))
  (exists ((a3 uni))
  (and (sort a2 a3) (mem (tuple2 a2 (tuple2 a1 b1))
  (Tuple2 a2 (tuple2 a1 b1) a3 (t2tb13 x)) p))))
  (=>
  (exists ((a3 uni)) (mem (tuple2 a2 (tuple2 a1 b1))
  (Tuple2 a2 (tuple2 a1 b1) a3 (t2tb13 x)) p)) (mem3 x
  (tb2t11 (ran (tuple2 a1 b1) a2 p))))))))

;; mem_ran
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (x b))
  (and
  (=> (mem2 x (tb2t12 (ran b1 a2 p)))
  (exists ((a3 uni))
  (and (sort a2 a3) (mem (tuple2 a2 b1) (Tuple2 a2 b1 a3 (t2tb14 x)) p))))
  (=> (exists ((a3 uni)) (mem (tuple2 a2 b1) (Tuple2 a2 b1 a3 (t2tb14 x)) p))
  (mem2 x (tb2t12 (ran b1 a2 p))))))))

;; mem_ran
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (x a))
  (and
  (=> (mem1 x (tb2t1 (ran a1 a2 p)))
  (exists ((a3 uni))
  (and (sort a2 a3) (mem (tuple2 a2 a1) (Tuple2 a2 a1 a3 (t2tb2 x)) p))))
  (=> (exists ((a3 uni)) (mem (tuple2 a2 a1) (Tuple2 a2 a1 a3 (t2tb2 x)) p))
  (mem1 x (tb2t1 (ran a1 a2 p))))))))

;; mem_ran
  (assert
  (forall ((p (set (tuple21 b a))) (x a))
  (= (mem1 x (tb2t1 (ran a1 b1 (t2tb37 p))))
  (exists ((a2 b)) (mem5 (tb2t38 (Tuple2 b1 a1 (t2tb14 a2) (t2tb2 x))) p)))))

;; mem_ran
  (assert
  (forall ((p (set (tuple21 a b))) (x b))
  (= (mem2 x (tb2t12 (ran b1 a1 (t2tb11 p))))
  (exists ((a2 a)) (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 a2) (t2tb14 x))) p)))))

;; mem_ran
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((p uni) (x uni))
  (and
  (=> (mem b2 x (ran b2 a2 p))
  (exists ((a3 uni))
  (and (sort a2 a3) (mem (tuple2 a2 b2) (Tuple2 a2 b2 a3 x) p))))
  (=> (exists ((a3 uni)) (mem (tuple2 a2 b2) (Tuple2 a2 b2 a3 x) p)) (mem b2
  x (ran b2 a2 p)))))))

(declare-fun semicolon (ty ty ty uni uni) uni)

;; semicolon_sort
  (assert
  (forall ((a2 ty) (b2 ty) (c ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (tuple2 a2 c))
  (semicolon c b2 a2 x x1)))))

;; mem_semicolon
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (q (set (tuple21 b a))) (x uni) (y a))
  (= (mem (tuple2 a2 a1) (Tuple2 a2 a1 x (t2tb2 y))
  (semicolon a1 b1 a2 p (t2tb37 q)))
  (exists ((b2 b))
  (and (mem (tuple2 a2 b1) (Tuple2 a2 b1 x (t2tb14 b2)) p) (mem5
  (tb2t38 (Tuple2 b1 a1 (t2tb14 b2) (t2tb2 y))) q)))))))

;; mem_semicolon
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (q (set (tuple21 a b))) (x uni) (y b))
  (= (mem (tuple2 a2 b1) (Tuple2 a2 b1 x (t2tb14 y))
  (semicolon b1 a1 a2 p (t2tb11 q)))
  (exists ((b2 a))
  (and (mem (tuple2 a2 a1) (Tuple2 a2 a1 x (t2tb2 b2)) p) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 b2) (t2tb14 y))) q)))))))

;; mem_semicolon
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (q uni) (x b) (y a))
  (and
  (=> (mem5 (tb2t38 (Tuple2 b1 a1 (t2tb14 x) (t2tb2 y)))
  (tb2t37 (semicolon a1 b2 b1 p q)))
  (exists ((b3 uni))
  (and (sort b2 b3)
  (and (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) b3) p) (mem
  (tuple2 b2 a1) (Tuple2 b2 a1 b3 (t2tb2 y)) q)))))
  (=>
  (exists ((b3 uni))
  (and (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) b3) p) (mem
  (tuple2 b2 a1) (Tuple2 b2 a1 b3 (t2tb2 y)) q))) (mem5
  (tb2t38 (Tuple2 b1 a1 (t2tb14 x) (t2tb2 y)))
  (tb2t37 (semicolon a1 b2 b1 p q))))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 b b))) (q (set (tuple21 b a))) (x b) (y a))
  (= (mem5 (tb2t38 (Tuple2 b1 a1 (t2tb14 x) (t2tb2 y)))
  (tb2t37 (semicolon a1 b1 b1 (t2tb35 p) (t2tb37 q))))
  (exists ((b2 b))
  (and (mem (tuple2 b1 b1) (Tuple2 b1 b1 (t2tb14 x) (t2tb14 b2)) (t2tb35 p))
  (mem5 (tb2t38 (Tuple2 b1 a1 (t2tb14 b2) (t2tb2 y))) q))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 b a))) (q (set (tuple21 a b))) (x b) (y b))
  (= (mem (tuple2 b1 b1) (Tuple2 b1 b1 (t2tb14 x) (t2tb14 y))
  (semicolon b1 a1 b1 (t2tb37 p) (t2tb11 q)))
  (exists ((b2 a))
  (and (mem5 (tb2t38 (Tuple2 b1 a1 (t2tb14 x) (t2tb2 b2))) p) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 b2) (t2tb14 y))) q))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 b a))) (q (set (tuple21 a a))) (x b) (y a))
  (= (mem5 (tb2t38 (Tuple2 b1 a1 (t2tb14 x) (t2tb2 y)))
  (tb2t37 (semicolon a1 a1 b1 (t2tb37 p) (t2tb4 q))))
  (exists ((b2 a))
  (and (mem5 (tb2t38 (Tuple2 b1 a1 (t2tb14 x) (t2tb2 b2))) p) (mem
  (tuple2 a1 a1) (Tuple2 a1 a1 (t2tb2 b2) (t2tb2 y)) (t2tb4 q)))))))

;; mem_semicolon
  (assert
  (forall ((c ty))
  (forall ((p (set (tuple21 b a))) (q uni) (x b) (y uni))
  (= (mem (tuple2 b1 c) (Tuple2 b1 c (t2tb14 x) y)
  (semicolon c a1 b1 (t2tb37 p) q))
  (exists ((b2 a))
  (and (mem5 (tb2t38 (Tuple2 b1 a1 (t2tb14 x) (t2tb2 b2))) p) (mem
  (tuple2 a1 c) (Tuple2 a1 c (t2tb2 b2) y) q)))))))

;; mem_semicolon
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (q uni) (x a) (y b))
  (and
  (=> (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y)))
  (tb2t11 (semicolon b1 b2 a1 p q)))
  (exists ((b3 uni))
  (and (sort b2 b3)
  (and (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) b3) p) (mem (tuple2 b2 b1)
  (Tuple2 b2 b1 b3 (t2tb14 y)) q)))))
  (=>
  (exists ((b3 uni))
  (and (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) b3) p) (mem (tuple2 b2 b1)
  (Tuple2 b2 b1 b3 (t2tb14 y)) q))) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y)))
  (tb2t11 (semicolon b1 b2 a1 p q))))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 a b))) (q (set (tuple21 b b))) (x a) (y b))
  (= (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y)))
  (tb2t11 (semicolon b1 b1 a1 (t2tb11 p) (t2tb35 q))))
  (exists ((b2 b))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 b2))) p) (mem
  (tuple2 b1 b1) (Tuple2 b1 b1 (t2tb14 b2) (t2tb14 y)) (t2tb35 q)))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 a b))) (q (set (tuple21 b a))) (x a) (y a))
  (= (mem (tuple2 a1 a1) (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y))
  (semicolon a1 b1 a1 (t2tb11 p) (t2tb37 q)))
  (exists ((b2 b))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 b2))) p) (mem5
  (tb2t38 (Tuple2 b1 a1 (t2tb14 b2) (t2tb2 y))) q))))))

;; mem_semicolon
  (assert
  (forall ((c ty))
  (forall ((p (set (tuple21 a b))) (q uni) (x a) (y uni))
  (= (mem (tuple2 a1 c) (Tuple2 a1 c (t2tb2 x) y)
  (semicolon c b1 a1 (t2tb11 p) q))
  (exists ((b2 b))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 b2))) p) (mem
  (tuple2 b1 c) (Tuple2 b1 c (t2tb14 b2) y) q)))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 a a))) (q (set (tuple21 a b))) (x a) (y b))
  (= (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y)))
  (tb2t11 (semicolon b1 a1 a1 (t2tb4 p) (t2tb11 q))))
  (exists ((b2 a))
  (and (mem (tuple2 a1 a1) (Tuple2 a1 a1 (t2tb2 x) (t2tb2 b2)) (t2tb4 p))
  (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 b2) (t2tb14 y))) q))))))

;; mem_semicolon
  (assert
  (forall ((a2 ty) (b2 ty) (c ty))
  (forall ((p uni) (q uni) (x uni) (y uni))
  (and
  (=> (mem (tuple2 a2 c) (Tuple2 a2 c x y) (semicolon c b2 a2 p q))
  (exists ((b3 uni))
  (and (sort b2 b3)
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x b3) p) (mem (tuple2 b2 c)
  (Tuple2 b2 c b3 y) q)))))
  (=>
  (exists ((b3 uni))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x b3) p) (mem (tuple2 b2 c)
  (Tuple2 b2 c b3 y) q))) (mem (tuple2 a2 c) (Tuple2 a2 c x y)
  (semicolon c b2 a2 p q)))))))

(declare-fun semicolon_back (ty ty ty uni uni) uni)

;; semicolon_back_sort
  (assert
  (forall ((a2 ty) (b2 ty) (c ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (tuple2 a2 c))
  (semicolon_back c b2 a2 x x1)))))

;; semicolon_back
  (assert
  (forall ((a2 ty) (b2 ty) (c ty))
  (forall ((p uni) (q uni))
  (= (semicolon_back c b2 a2 q p) (semicolon c b2 a2 p q)))))

(declare-fun id (ty uni) uni)

;; id_sort
  (assert
  (forall ((a2 ty))
  (forall ((x uni)) (sort (set1 (tuple2 a2 a2)) (id a2 x)))))

;; mem_id
  (assert
  (forall ((u (set (set (tuple21 b a)))) (x (set (tuple21 b a)))
  (y (set (tuple21 b a))))
  (= (mem (tuple2 (set1 (tuple2 b1 a1)) (set1 (tuple2 b1 a1)))
  (Tuple2 (set1 (tuple2 b1 a1)) (set1 (tuple2 b1 a1)) (t2tb37 x) (t2tb37 y))
  (id (set1 (tuple2 b1 a1)) (t2tb56 u))) (and (mem6 x u) (= x y)))))

;; mem_id
  (assert
  (forall ((u (set (tuple21 b a))) (x (tuple21 b a)) (y (tuple21 b a)))
  (= (mem (tuple2 (tuple2 b1 a1) (tuple2 b1 a1))
  (Tuple2 (tuple2 b1 a1) (tuple2 b1 a1) (t2tb38 x) (t2tb38 y))
  (id (tuple2 b1 a1) (t2tb37 u))) (and (mem5 x u) (= x y)))))

;; mem_id
  (assert
  (forall ((u (set (set (tuple21 a b)))) (x (set (tuple21 a b)))
  (y (set (tuple21 a b))))
  (= (mem (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1)))
  (Tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1)) (t2tb11 x) (t2tb11 y))
  (id (set1 (tuple2 a1 b1)) (t2tb10 u))) (and (mem4 x u) (= x y)))))

;; mem_id
  (assert
  (forall ((u (set (tuple21 a b))) (x (tuple21 a b)) (y (tuple21 a b)))
  (= (mem (tuple2 (tuple2 a1 b1) (tuple2 a1 b1))
  (Tuple2 (tuple2 a1 b1) (tuple2 a1 b1) (t2tb13 x) (t2tb13 y))
  (id (tuple2 a1 b1) (t2tb11 u))) (and (mem3 x u) (= x y)))))

;; mem_id
  (assert
  (forall ((u (set b)) (x b) (y b))
  (= (mem (tuple2 b1 b1) (Tuple2 b1 b1 (t2tb14 x) (t2tb14 y))
  (id b1 (t2tb12 u))) (and (mem2 x u) (= x y)))))

;; mem_id
  (assert
  (forall ((u (set a)) (x a) (y a))
  (= (mem (tuple2 a1 a1) (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y))
  (id a1 (t2tb1 u))) (and (mem1 x u) (= x y)))))

;; mem_id
  (assert
  (forall ((a2 ty))
  (forall ((u uni) (x uni) (y uni))
  (=> (sort a2 x)
  (=> (sort a2 y)
  (= (mem (tuple2 a2 a2) (Tuple2 a2 a2 x y) (id a2 u))
  (and (mem a2 x u) (= x y))))))))

(declare-fun domain_restriction (ty ty uni uni) uni)

;; domain_restriction_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (tuple2 a2 b2))
  (domain_restriction b2 a2 x x1)))))

;; mem_domain_restriction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (set (tuple21 b a)))) (x (set (tuple21 b a)))
  (y uni))
  (= (mem (tuple2 (set1 (tuple2 b1 a1)) b2)
  (Tuple2 (set1 (tuple2 b1 a1)) b2 (t2tb37 x) y)
  (domain_restriction b2 (set1 (tuple2 b1 a1)) (t2tb56 s) p))
  (and (mem (tuple2 (set1 (tuple2 b1 a1)) b2)
  (Tuple2 (set1 (tuple2 b1 a1)) b2 (t2tb37 x) y) p) (mem6 x s))))))

;; mem_domain_restriction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (tuple21 b a))) (x (tuple21 b a)) (y uni))
  (= (mem (tuple2 (tuple2 b1 a1) b2) (Tuple2 (tuple2 b1 a1) b2 (t2tb38 x) y)
  (domain_restriction b2 (tuple2 b1 a1) (t2tb37 s) p))
  (and (mem (tuple2 (tuple2 b1 a1) b2)
  (Tuple2 (tuple2 b1 a1) b2 (t2tb38 x) y) p) (mem5 x s))))))

;; mem_domain_restriction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (set (tuple21 a b)))) (x (set (tuple21 a b)))
  (y uni))
  (= (mem (tuple2 (set1 (tuple2 a1 b1)) b2)
  (Tuple2 (set1 (tuple2 a1 b1)) b2 (t2tb11 x) y)
  (domain_restriction b2 (set1 (tuple2 a1 b1)) (t2tb10 s) p))
  (and (mem (tuple2 (set1 (tuple2 a1 b1)) b2)
  (Tuple2 (set1 (tuple2 a1 b1)) b2 (t2tb11 x) y) p) (mem4 x s))))))

;; mem_domain_restriction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (tuple21 a b))) (x (tuple21 a b)) (y uni))
  (= (mem (tuple2 (tuple2 a1 b1) b2) (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) y)
  (domain_restriction b2 (tuple2 a1 b1) (t2tb11 s) p))
  (and (mem (tuple2 (tuple2 a1 b1) b2)
  (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) y) p) (mem3 x s))))))

;; mem_domain_restriction
  (assert
  (forall ((p (set (tuple21 b a))) (s (set b)) (x b) (y a))
  (= (mem5 (tb2t38 (Tuple2 b1 a1 (t2tb14 x) (t2tb2 y)))
  (tb2t37 (domain_restriction a1 b1 (t2tb12 s) (t2tb37 p))))
  (and (mem5 (tb2t38 (Tuple2 b1 a1 (t2tb14 x) (t2tb2 y))) p) (mem2 x s)))))

;; mem_domain_restriction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set b)) (x b) (y uni))
  (= (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) y)
  (domain_restriction b2 b1 (t2tb12 s) p))
  (and (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) y) p) (mem2 x s))))))

;; mem_domain_restriction
  (assert
  (forall ((p (set (tuple21 a b))) (s (set a)) (x a) (y b))
  (= (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y)))
  (tb2t11 (domain_restriction b1 a1 (t2tb1 s) (t2tb11 p))))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y))) p) (mem1 x s)))))

;; mem_domain_restriction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set a)) (x a) (y uni))
  (= (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) y)
  (domain_restriction b2 a1 (t2tb1 s) p))
  (and (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) y) p) (mem1 x s))))))

;; mem_domain_restriction
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((p uni) (s uni) (x uni) (y uni))
  (= (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) (domain_restriction b2 a2 s p))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) p) (mem a2 x s))))))

(declare-fun range_restriction (ty ty uni uni) uni)

;; range_restriction_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (tuple2 a2 b2))
  (range_restriction b2 a2 x x1)))))

;; mem_range_restriction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (set (tuple21 b a)))) (x uni) (y (set (tuple21 b
  a))))
  (= (mem (tuple2 a2 (set1 (tuple2 b1 a1)))
  (Tuple2 a2 (set1 (tuple2 b1 a1)) x (t2tb37 y))
  (range_restriction (set1 (tuple2 b1 a1)) a2 p (t2tb56 t)))
  (and (mem (tuple2 a2 (set1 (tuple2 b1 a1)))
  (Tuple2 a2 (set1 (tuple2 b1 a1)) x (t2tb37 y)) p) (mem6 y t))))))

;; mem_range_restriction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (tuple21 b a))) (x uni) (y (tuple21 b a)))
  (= (mem (tuple2 a2 (tuple2 b1 a1)) (Tuple2 a2 (tuple2 b1 a1) x (t2tb38 y))
  (range_restriction (tuple2 b1 a1) a2 p (t2tb37 t)))
  (and (mem (tuple2 a2 (tuple2 b1 a1))
  (Tuple2 a2 (tuple2 b1 a1) x (t2tb38 y)) p) (mem5 y t))))))

;; mem_range_restriction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (set (tuple21 a b)))) (x uni) (y (set (tuple21 a
  b))))
  (= (mem (tuple2 a2 (set1 (tuple2 a1 b1)))
  (Tuple2 a2 (set1 (tuple2 a1 b1)) x (t2tb11 y))
  (range_restriction (set1 (tuple2 a1 b1)) a2 p (t2tb10 t)))
  (and (mem (tuple2 a2 (set1 (tuple2 a1 b1)))
  (Tuple2 a2 (set1 (tuple2 a1 b1)) x (t2tb11 y)) p) (mem4 y t))))))

;; mem_range_restriction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (tuple21 a b))) (x uni) (y (tuple21 a b)))
  (= (mem (tuple2 a2 (tuple2 a1 b1)) (Tuple2 a2 (tuple2 a1 b1) x (t2tb13 y))
  (range_restriction (tuple2 a1 b1) a2 p (t2tb11 t)))
  (and (mem (tuple2 a2 (tuple2 a1 b1))
  (Tuple2 a2 (tuple2 a1 b1) x (t2tb13 y)) p) (mem3 y t))))))

;; mem_range_restriction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set b)) (x uni) (y b))
  (= (mem (tuple2 a2 b1) (Tuple2 a2 b1 x (t2tb14 y))
  (range_restriction b1 a2 p (t2tb12 t)))
  (and (mem (tuple2 a2 b1) (Tuple2 a2 b1 x (t2tb14 y)) p) (mem2 y t))))))

;; mem_range_restriction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set a)) (x uni) (y a))
  (= (mem (tuple2 a2 a1) (Tuple2 a2 a1 x (t2tb2 y))
  (range_restriction a1 a2 p (t2tb1 t)))
  (and (mem (tuple2 a2 a1) (Tuple2 a2 a1 x (t2tb2 y)) p) (mem1 y t))))))

;; mem_range_restriction
  (assert
  (forall ((p (set (tuple21 b a))) (t (set a)) (x b) (y a))
  (= (mem5 (tb2t38 (Tuple2 b1 a1 (t2tb14 x) (t2tb2 y)))
  (tb2t37 (range_restriction a1 b1 (t2tb37 p) (t2tb1 t))))
  (and (mem5 (tb2t38 (Tuple2 b1 a1 (t2tb14 x) (t2tb2 y))) p) (mem1 y t)))))

;; mem_range_restriction
  (assert
  (forall ((p (set (tuple21 a b))) (t (set b)) (x a) (y b))
  (= (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y)))
  (tb2t11 (range_restriction b1 a1 (t2tb11 p) (t2tb12 t))))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y))) p) (mem2 y t)))))

;; mem_range_restriction
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((p uni) (t uni) (x uni) (y uni))
  (= (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) (range_restriction b2 a2 p t))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) p) (mem b2 y t))))))

(declare-fun domain_substraction (ty ty uni uni) uni)

;; domain_substraction_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (tuple2 a2 b2))
  (domain_substraction b2 a2 x x1)))))

;; mem_domain_substraction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (set (tuple21 b a)))) (x (set (tuple21 b a)))
  (y uni))
  (= (mem (tuple2 (set1 (tuple2 b1 a1)) b2)
  (Tuple2 (set1 (tuple2 b1 a1)) b2 (t2tb37 x) y)
  (domain_substraction b2 (set1 (tuple2 b1 a1)) (t2tb56 s) p))
  (and (mem (tuple2 (set1 (tuple2 b1 a1)) b2)
  (Tuple2 (set1 (tuple2 b1 a1)) b2 (t2tb37 x) y) p) (not (mem6 x s)))))))

;; mem_domain_substraction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (tuple21 b a))) (x (tuple21 b a)) (y uni))
  (= (mem (tuple2 (tuple2 b1 a1) b2) (Tuple2 (tuple2 b1 a1) b2 (t2tb38 x) y)
  (domain_substraction b2 (tuple2 b1 a1) (t2tb37 s) p))
  (and (mem (tuple2 (tuple2 b1 a1) b2)
  (Tuple2 (tuple2 b1 a1) b2 (t2tb38 x) y) p) (not (mem5 x s)))))))

;; mem_domain_substraction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (set (tuple21 a b)))) (x (set (tuple21 a b)))
  (y uni))
  (= (mem (tuple2 (set1 (tuple2 a1 b1)) b2)
  (Tuple2 (set1 (tuple2 a1 b1)) b2 (t2tb11 x) y)
  (domain_substraction b2 (set1 (tuple2 a1 b1)) (t2tb10 s) p))
  (and (mem (tuple2 (set1 (tuple2 a1 b1)) b2)
  (Tuple2 (set1 (tuple2 a1 b1)) b2 (t2tb11 x) y) p) (not (mem4 x s)))))))

;; mem_domain_substraction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (tuple21 a b))) (x (tuple21 a b)) (y uni))
  (= (mem (tuple2 (tuple2 a1 b1) b2) (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) y)
  (domain_substraction b2 (tuple2 a1 b1) (t2tb11 s) p))
  (and (mem (tuple2 (tuple2 a1 b1) b2)
  (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) y) p) (not (mem3 x s)))))))

;; mem_domain_substraction
  (assert
  (forall ((p (set (tuple21 b a))) (s (set b)) (x b) (y a))
  (= (mem5 (tb2t38 (Tuple2 b1 a1 (t2tb14 x) (t2tb2 y)))
  (tb2t37 (domain_substraction a1 b1 (t2tb12 s) (t2tb37 p))))
  (and (mem5 (tb2t38 (Tuple2 b1 a1 (t2tb14 x) (t2tb2 y))) p)
  (not (mem2 x s))))))

;; mem_domain_substraction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set b)) (x b) (y uni))
  (= (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) y)
  (domain_substraction b2 b1 (t2tb12 s) p))
  (and (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) y) p) (not (mem2 x s)))))))

;; mem_domain_substraction
  (assert
  (forall ((p (set (tuple21 a b))) (s (set a)) (x a) (y b))
  (= (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y)))
  (tb2t11 (domain_substraction b1 a1 (t2tb1 s) (t2tb11 p))))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y))) p)
  (not (mem1 x s))))))

;; mem_domain_substraction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set a)) (x a) (y uni))
  (= (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) y)
  (domain_substraction b2 a1 (t2tb1 s) p))
  (and (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) y) p) (not (mem1 x s)))))))

;; mem_domain_substraction
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((p uni) (s uni) (x uni) (y uni))
  (= (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) (domain_substraction b2 a2 s p))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) p) (not (mem a2 x s)))))))

(declare-fun range_substraction (ty ty uni uni) uni)

;; range_substraction_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (tuple2 a2 b2))
  (range_substraction b2 a2 x x1)))))

;; mem_range_substraction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (set (tuple21 b a)))) (x uni) (y (set (tuple21 b
  a))))
  (= (mem (tuple2 a2 (set1 (tuple2 b1 a1)))
  (Tuple2 a2 (set1 (tuple2 b1 a1)) x (t2tb37 y))
  (range_substraction (set1 (tuple2 b1 a1)) a2 p (t2tb56 t)))
  (and (mem (tuple2 a2 (set1 (tuple2 b1 a1)))
  (Tuple2 a2 (set1 (tuple2 b1 a1)) x (t2tb37 y)) p) (not (mem6 y t)))))))

;; mem_range_substraction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (tuple21 b a))) (x uni) (y (tuple21 b a)))
  (= (mem (tuple2 a2 (tuple2 b1 a1)) (Tuple2 a2 (tuple2 b1 a1) x (t2tb38 y))
  (range_substraction (tuple2 b1 a1) a2 p (t2tb37 t)))
  (and (mem (tuple2 a2 (tuple2 b1 a1))
  (Tuple2 a2 (tuple2 b1 a1) x (t2tb38 y)) p) (not (mem5 y t)))))))

;; mem_range_substraction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (set (tuple21 a b)))) (x uni) (y (set (tuple21 a
  b))))
  (= (mem (tuple2 a2 (set1 (tuple2 a1 b1)))
  (Tuple2 a2 (set1 (tuple2 a1 b1)) x (t2tb11 y))
  (range_substraction (set1 (tuple2 a1 b1)) a2 p (t2tb10 t)))
  (and (mem (tuple2 a2 (set1 (tuple2 a1 b1)))
  (Tuple2 a2 (set1 (tuple2 a1 b1)) x (t2tb11 y)) p) (not (mem4 y t)))))))

;; mem_range_substraction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (tuple21 a b))) (x uni) (y (tuple21 a b)))
  (= (mem (tuple2 a2 (tuple2 a1 b1)) (Tuple2 a2 (tuple2 a1 b1) x (t2tb13 y))
  (range_substraction (tuple2 a1 b1) a2 p (t2tb11 t)))
  (and (mem (tuple2 a2 (tuple2 a1 b1))
  (Tuple2 a2 (tuple2 a1 b1) x (t2tb13 y)) p) (not (mem3 y t)))))))

;; mem_range_substraction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set b)) (x uni) (y b))
  (= (mem (tuple2 a2 b1) (Tuple2 a2 b1 x (t2tb14 y))
  (range_substraction b1 a2 p (t2tb12 t)))
  (and (mem (tuple2 a2 b1) (Tuple2 a2 b1 x (t2tb14 y)) p) (not (mem2 y t)))))))

;; mem_range_substraction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set a)) (x uni) (y a))
  (= (mem (tuple2 a2 a1) (Tuple2 a2 a1 x (t2tb2 y))
  (range_substraction a1 a2 p (t2tb1 t)))
  (and (mem (tuple2 a2 a1) (Tuple2 a2 a1 x (t2tb2 y)) p) (not (mem1 y t)))))))

;; mem_range_substraction
  (assert
  (forall ((p (set (tuple21 b a))) (t (set a)) (x b) (y a))
  (= (mem5 (tb2t38 (Tuple2 b1 a1 (t2tb14 x) (t2tb2 y)))
  (tb2t37 (range_substraction a1 b1 (t2tb37 p) (t2tb1 t))))
  (and (mem5 (tb2t38 (Tuple2 b1 a1 (t2tb14 x) (t2tb2 y))) p)
  (not (mem1 y t))))))

;; mem_range_substraction
  (assert
  (forall ((p (set (tuple21 a b))) (t (set b)) (x a) (y b))
  (= (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y)))
  (tb2t11 (range_substraction b1 a1 (t2tb11 p) (t2tb12 t))))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y))) p)
  (not (mem2 y t))))))

;; mem_range_substraction
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((p uni) (t uni) (x uni) (y uni))
  (= (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) (range_substraction b2 a2 p t))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) p) (not (mem b2 y t)))))))

(declare-fun image (ty ty uni uni) uni)

;; image_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 b2) (image b2 a2 x x1)))))

;; mem_image
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (w uni) (x (set (tuple21 b a))))
  (and
  (=> (mem6 x (tb2t56 (image (set1 (tuple2 b1 a1)) a2 p w)))
  (exists ((a3 uni))
  (and (sort a2 a3)
  (and (mem a2 a3 w) (mem (tuple2 a2 (set1 (tuple2 b1 a1)))
  (Tuple2 a2 (set1 (tuple2 b1 a1)) a3 (t2tb37 x)) p)))))
  (=>
  (exists ((a3 uni))
  (and (mem a2 a3 w) (mem (tuple2 a2 (set1 (tuple2 b1 a1)))
  (Tuple2 a2 (set1 (tuple2 b1 a1)) a3 (t2tb37 x)) p))) (mem6 x
  (tb2t56 (image (set1 (tuple2 b1 a1)) a2 p w))))))))

;; mem_image
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (w uni) (x (tuple21 b a)))
  (and
  (=> (mem5 x (tb2t37 (image (tuple2 b1 a1) a2 p w)))
  (exists ((a3 uni))
  (and (sort a2 a3)
  (and (mem a2 a3 w) (mem (tuple2 a2 (tuple2 b1 a1))
  (Tuple2 a2 (tuple2 b1 a1) a3 (t2tb38 x)) p)))))
  (=>
  (exists ((a3 uni))
  (and (mem a2 a3 w) (mem (tuple2 a2 (tuple2 b1 a1))
  (Tuple2 a2 (tuple2 b1 a1) a3 (t2tb38 x)) p))) (mem5 x
  (tb2t37 (image (tuple2 b1 a1) a2 p w))))))))

;; mem_image
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (w uni) (x (set (tuple21 a b))))
  (and
  (=> (mem4 x (tb2t10 (image (set1 (tuple2 a1 b1)) a2 p w)))
  (exists ((a3 uni))
  (and (sort a2 a3)
  (and (mem a2 a3 w) (mem (tuple2 a2 (set1 (tuple2 a1 b1)))
  (Tuple2 a2 (set1 (tuple2 a1 b1)) a3 (t2tb11 x)) p)))))
  (=>
  (exists ((a3 uni))
  (and (mem a2 a3 w) (mem (tuple2 a2 (set1 (tuple2 a1 b1)))
  (Tuple2 a2 (set1 (tuple2 a1 b1)) a3 (t2tb11 x)) p))) (mem4 x
  (tb2t10 (image (set1 (tuple2 a1 b1)) a2 p w))))))))

;; mem_image
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (w uni) (x (tuple21 a b)))
  (and
  (=> (mem3 x (tb2t11 (image (tuple2 a1 b1) a2 p w)))
  (exists ((a3 uni))
  (and (sort a2 a3)
  (and (mem a2 a3 w) (mem (tuple2 a2 (tuple2 a1 b1))
  (Tuple2 a2 (tuple2 a1 b1) a3 (t2tb13 x)) p)))))
  (=>
  (exists ((a3 uni))
  (and (mem a2 a3 w) (mem (tuple2 a2 (tuple2 a1 b1))
  (Tuple2 a2 (tuple2 a1 b1) a3 (t2tb13 x)) p))) (mem3 x
  (tb2t11 (image (tuple2 a1 b1) a2 p w))))))))

;; mem_image
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (w uni) (x b))
  (and
  (=> (mem2 x (tb2t12 (image b1 a2 p w)))
  (exists ((a3 uni))
  (and (sort a2 a3)
  (and (mem a2 a3 w) (mem (tuple2 a2 b1) (Tuple2 a2 b1 a3 (t2tb14 x)) p)))))
  (=>
  (exists ((a3 uni))
  (and (mem a2 a3 w) (mem (tuple2 a2 b1) (Tuple2 a2 b1 a3 (t2tb14 x)) p)))
  (mem2 x (tb2t12 (image b1 a2 p w))))))))

;; mem_image
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (w uni) (x a))
  (and
  (=> (mem1 x (tb2t1 (image a1 a2 p w)))
  (exists ((a3 uni))
  (and (sort a2 a3)
  (and (mem a2 a3 w) (mem (tuple2 a2 a1) (Tuple2 a2 a1 a3 (t2tb2 x)) p)))))
  (=>
  (exists ((a3 uni))
  (and (mem a2 a3 w) (mem (tuple2 a2 a1) (Tuple2 a2 a1 a3 (t2tb2 x)) p)))
  (mem1 x (tb2t1 (image a1 a2 p w))))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 b a)) (set (tuple21 b a)))))
  (w (set (set (tuple21 b a)))) (x (set (tuple21 b a))))
  (= (mem6 x
  (tb2t56
  (image (set1 (tuple2 b1 a1)) (set1 (tuple2 b1 a1)) (t2tb63 p) (t2tb56 w))))
  (exists ((a2 (set (tuple21 b a))))
  (and (mem6 a2 w) (mem (tuple2 (set1 (tuple2 b1 a1)) (set1 (tuple2 b1 a1)))
  (Tuple2 (set1 (tuple2 b1 a1)) (set1 (tuple2 b1 a1)) (t2tb37 a2) (t2tb37 x))
  (t2tb63 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 b a)) (tuple21 b a))))
  (w (set (set (tuple21 b a)))) (x (tuple21 b a)))
  (= (mem5 x
  (tb2t37 (image (tuple2 b1 a1) (set1 (tuple2 b1 a1)) (t2tb66 p) (t2tb56 w))))
  (exists ((a2 (set (tuple21 b a))))
  (and (mem6 a2 w) (mem (tuple2 (set1 (tuple2 b1 a1)) (tuple2 b1 a1))
  (Tuple2 (set1 (tuple2 b1 a1)) (tuple2 b1 a1) (t2tb37 a2) (t2tb38 x))
  (t2tb66 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 b a)) (set (tuple21 a b)))))
  (w (set (set (tuple21 b a)))) (x (set (tuple21 a b))))
  (= (mem4 x
  (tb2t10
  (image (set1 (tuple2 a1 b1)) (set1 (tuple2 b1 a1)) (t2tb67 p) (t2tb56 w))))
  (exists ((a2 (set (tuple21 b a))))
  (and (mem6 a2 w) (mem (tuple2 (set1 (tuple2 b1 a1)) (set1 (tuple2 a1 b1)))
  (Tuple2 (set1 (tuple2 b1 a1)) (set1 (tuple2 a1 b1)) (t2tb37 a2) (t2tb11 x))
  (t2tb67 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 b a)) (tuple21 a b))))
  (w (set (set (tuple21 b a)))) (x (tuple21 a b)))
  (= (mem3 x
  (tb2t11 (image (tuple2 a1 b1) (set1 (tuple2 b1 a1)) (t2tb69 p) (t2tb56 w))))
  (exists ((a2 (set (tuple21 b a))))
  (and (mem6 a2 w) (mem (tuple2 (set1 (tuple2 b1 a1)) (tuple2 a1 b1))
  (Tuple2 (set1 (tuple2 b1 a1)) (tuple2 a1 b1) (t2tb37 a2) (t2tb13 x))
  (t2tb69 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 b a)) b))) (w (set (set (tuple21 b
  a)))) (x b))
  (= (mem2 x (tb2t12 (image b1 (set1 (tuple2 b1 a1)) (t2tb71 p) (t2tb56 w))))
  (exists ((a2 (set (tuple21 b a))))
  (and (mem6 a2 w) (mem (tuple2 (set1 (tuple2 b1 a1)) b1)
  (Tuple2 (set1 (tuple2 b1 a1)) b1 (t2tb37 a2) (t2tb14 x)) (t2tb71 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 b a)) a))) (w (set (set (tuple21 b
  a)))) (x a))
  (= (mem1 x (tb2t1 (image a1 (set1 (tuple2 b1 a1)) (t2tb73 p) (t2tb56 w))))
  (exists ((a2 (set (tuple21 b a))))
  (and (mem6 a2 w) (mem (tuple2 (set1 (tuple2 b1 a1)) a1)
  (Tuple2 (set1 (tuple2 b1 a1)) a1 (t2tb37 a2) (t2tb2 x)) (t2tb73 p)))))))

;; mem_image
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (w (set (set (tuple21 b a)))) (x uni))
  (= (mem b2 x (image b2 (set1 (tuple2 b1 a1)) p (t2tb56 w)))
  (exists ((a2 (set (tuple21 b a))))
  (and (mem6 a2 w) (mem (tuple2 (set1 (tuple2 b1 a1)) b2)
  (Tuple2 (set1 (tuple2 b1 a1)) b2 (t2tb37 a2) x) p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 b a) (set (tuple21 b a)))))
  (w (set (tuple21 b a))) (x (set (tuple21 b a))))
  (= (mem6 x
  (tb2t56 (image (set1 (tuple2 b1 a1)) (tuple2 b1 a1) (t2tb75 p) (t2tb37 w))))
  (exists ((a2 (tuple21 b a)))
  (and (mem5 a2 w) (mem (tuple2 (tuple2 b1 a1) (set1 (tuple2 b1 a1)))
  (Tuple2 (tuple2 b1 a1) (set1 (tuple2 b1 a1)) (t2tb38 a2) (t2tb37 x))
  (t2tb75 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 b a) (tuple21 b a)))) (w (set (tuple21 b
  a))) (x (tuple21 b a)))
  (= (mem5 x
  (tb2t37 (image (tuple2 b1 a1) (tuple2 b1 a1) (t2tb77 p) (t2tb37 w))))
  (exists ((a2 (tuple21 b a)))
  (and (mem5 a2 w) (mem (tuple2 (tuple2 b1 a1) (tuple2 b1 a1))
  (Tuple2 (tuple2 b1 a1) (tuple2 b1 a1) (t2tb38 a2) (t2tb38 x)) (t2tb77 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 b a) (set (tuple21 a b)))))
  (w (set (tuple21 b a))) (x (set (tuple21 a b))))
  (= (mem4 x
  (tb2t10 (image (set1 (tuple2 a1 b1)) (tuple2 b1 a1) (t2tb80 p) (t2tb37 w))))
  (exists ((a2 (tuple21 b a)))
  (and (mem5 a2 w) (mem (tuple2 (tuple2 b1 a1) (set1 (tuple2 a1 b1)))
  (Tuple2 (tuple2 b1 a1) (set1 (tuple2 a1 b1)) (t2tb38 a2) (t2tb11 x))
  (t2tb80 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 b a) (tuple21 a b)))) (w (set (tuple21 b
  a))) (x (tuple21 a b)))
  (= (mem3 x
  (tb2t11 (image (tuple2 a1 b1) (tuple2 b1 a1) (t2tb81 p) (t2tb37 w))))
  (exists ((a2 (tuple21 b a)))
  (and (mem5 a2 w) (mem (tuple2 (tuple2 b1 a1) (tuple2 a1 b1))
  (Tuple2 (tuple2 b1 a1) (tuple2 a1 b1) (t2tb38 a2) (t2tb13 x)) (t2tb81 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 b a) b))) (w (set (tuple21 b a))) (x b))
  (= (mem2 x (tb2t12 (image b1 (tuple2 b1 a1) (t2tb83 p) (t2tb37 w))))
  (exists ((a2 (tuple21 b a)))
  (and (mem5 a2 w) (mem (tuple2 (tuple2 b1 a1) b1)
  (Tuple2 (tuple2 b1 a1) b1 (t2tb38 a2) (t2tb14 x)) (t2tb83 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 b a) a))) (w (set (tuple21 b a))) (x a))
  (= (mem1 x (tb2t1 (image a1 (tuple2 b1 a1) (t2tb85 p) (t2tb37 w))))
  (exists ((a2 (tuple21 b a)))
  (and (mem5 a2 w) (mem (tuple2 (tuple2 b1 a1) a1)
  (Tuple2 (tuple2 b1 a1) a1 (t2tb38 a2) (t2tb2 x)) (t2tb85 p)))))))

;; mem_image
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (w (set (tuple21 b a))) (x uni))
  (= (mem b2 x (image b2 (tuple2 b1 a1) p (t2tb37 w)))
  (exists ((a2 (tuple21 b a)))
  (and (mem5 a2 w) (mem (tuple2 (tuple2 b1 a1) b2)
  (Tuple2 (tuple2 b1 a1) b2 (t2tb38 a2) x) p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a b)) (set (tuple21 b a)))))
  (w (set (set (tuple21 a b)))) (x (set (tuple21 b a))))
  (= (mem6 x
  (tb2t56
  (image (set1 (tuple2 b1 a1)) (set1 (tuple2 a1 b1)) (t2tb87 p) (t2tb10 w))))
  (exists ((a2 (set (tuple21 a b))))
  (and (mem4 a2 w) (mem (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 b1 a1)))
  (Tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 b1 a1)) (t2tb11 a2) (t2tb37 x))
  (t2tb87 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a b)) (tuple21 b a))))
  (w (set (set (tuple21 a b)))) (x (tuple21 b a)))
  (= (mem5 x
  (tb2t37 (image (tuple2 b1 a1) (set1 (tuple2 a1 b1)) (t2tb89 p) (t2tb10 w))))
  (exists ((a2 (set (tuple21 a b))))
  (and (mem4 a2 w) (mem (tuple2 (set1 (tuple2 a1 b1)) (tuple2 b1 a1))
  (Tuple2 (set1 (tuple2 a1 b1)) (tuple2 b1 a1) (t2tb11 a2) (t2tb38 x))
  (t2tb89 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a b)) (set (tuple21 a b)))))
  (w (set (set (tuple21 a b)))) (x (set (tuple21 a b))))
  (= (mem4 x
  (tb2t10
  (image (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1)) (t2tb15 p) (t2tb10 w))))
  (exists ((a2 (set (tuple21 a b))))
  (and (mem4 a2 w) (mem (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1)))
  (Tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1)) (t2tb11 a2) (t2tb11 x))
  (t2tb15 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a b)) (tuple21 a b))))
  (w (set (set (tuple21 a b)))) (x (tuple21 a b)))
  (= (mem3 x
  (tb2t11 (image (tuple2 a1 b1) (set1 (tuple2 a1 b1)) (t2tb17 p) (t2tb10 w))))
  (exists ((a2 (set (tuple21 a b))))
  (and (mem4 a2 w) (mem (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 b1))
  (Tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 b1) (t2tb11 a2) (t2tb13 x))
  (t2tb17 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a b)) b))) (w (set (set (tuple21 a
  b)))) (x b))
  (= (mem2 x (tb2t12 (image b1 (set1 (tuple2 a1 b1)) (t2tb19 p) (t2tb10 w))))
  (exists ((a2 (set (tuple21 a b))))
  (and (mem4 a2 w) (mem (tuple2 (set1 (tuple2 a1 b1)) b1)
  (Tuple2 (set1 (tuple2 a1 b1)) b1 (t2tb11 a2) (t2tb14 x)) (t2tb19 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a b)) a))) (w (set (set (tuple21 a
  b)))) (x a))
  (= (mem1 x (tb2t1 (image a1 (set1 (tuple2 a1 b1)) (t2tb22 p) (t2tb10 w))))
  (exists ((a2 (set (tuple21 a b))))
  (and (mem4 a2 w) (mem (tuple2 (set1 (tuple2 a1 b1)) a1)
  (Tuple2 (set1 (tuple2 a1 b1)) a1 (t2tb11 a2) (t2tb2 x)) (t2tb22 p)))))))

;; mem_image
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (w (set (set (tuple21 a b)))) (x uni))
  (= (mem b2 x (image b2 (set1 (tuple2 a1 b1)) p (t2tb10 w)))
  (exists ((a2 (set (tuple21 a b))))
  (and (mem4 a2 w) (mem (tuple2 (set1 (tuple2 a1 b1)) b2)
  (Tuple2 (set1 (tuple2 a1 b1)) b2 (t2tb11 a2) x) p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) (set (tuple21 b a)))))
  (w (set (tuple21 a b))) (x (set (tuple21 b a))))
  (= (mem6 x
  (tb2t56 (image (set1 (tuple2 b1 a1)) (tuple2 a1 b1) (t2tb91 p) (t2tb11 w))))
  (exists ((a2 (tuple21 a b)))
  (and (mem3 a2 w) (mem (tuple2 (tuple2 a1 b1) (set1 (tuple2 b1 a1)))
  (Tuple2 (tuple2 a1 b1) (set1 (tuple2 b1 a1)) (t2tb13 a2) (t2tb37 x))
  (t2tb91 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) (tuple21 b a)))) (w (set (tuple21 a
  b))) (x (tuple21 b a)))
  (= (mem5 x
  (tb2t37 (image (tuple2 b1 a1) (tuple2 a1 b1) (t2tb94 p) (t2tb11 w))))
  (exists ((a2 (tuple21 a b)))
  (and (mem3 a2 w) (mem (tuple2 (tuple2 a1 b1) (tuple2 b1 a1))
  (Tuple2 (tuple2 a1 b1) (tuple2 b1 a1) (t2tb13 a2) (t2tb38 x)) (t2tb94 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) (set (tuple21 a b)))))
  (w (set (tuple21 a b))) (x (set (tuple21 a b))))
  (= (mem4 x
  (tb2t10 (image (set1 (tuple2 a1 b1)) (tuple2 a1 b1) (t2tb23 p) (t2tb11 w))))
  (exists ((a2 (tuple21 a b)))
  (and (mem3 a2 w) (mem (tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 b1)))
  (Tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 b1)) (t2tb13 a2) (t2tb11 x))
  (t2tb23 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) (tuple21 a b)))) (w (set (tuple21 a
  b))) (x (tuple21 a b)))
  (= (mem3 x
  (tb2t11 (image (tuple2 a1 b1) (tuple2 a1 b1) (t2tb25 p) (t2tb11 w))))
  (exists ((a2 (tuple21 a b)))
  (and (mem3 a2 w) (mem (tuple2 (tuple2 a1 b1) (tuple2 a1 b1))
  (Tuple2 (tuple2 a1 b1) (tuple2 a1 b1) (t2tb13 a2) (t2tb13 x)) (t2tb25 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) b))) (w (set (tuple21 a b))) (x b))
  (= (mem2 x (tb2t12 (image b1 (tuple2 a1 b1) (t2tb27 p) (t2tb11 w))))
  (exists ((a2 (tuple21 a b)))
  (and (mem3 a2 w) (mem (tuple2 (tuple2 a1 b1) b1)
  (Tuple2 (tuple2 a1 b1) b1 (t2tb13 a2) (t2tb14 x)) (t2tb27 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) a))) (w (set (tuple21 a b))) (x a))
  (= (mem1 x (tb2t1 (image a1 (tuple2 a1 b1) (t2tb29 p) (t2tb11 w))))
  (exists ((a2 (tuple21 a b)))
  (and (mem3 a2 w) (mem (tuple2 (tuple2 a1 b1) a1)
  (Tuple2 (tuple2 a1 b1) a1 (t2tb13 a2) (t2tb2 x)) (t2tb29 p)))))))

;; mem_image
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (w (set (tuple21 a b))) (x uni))
  (= (mem b2 x (image b2 (tuple2 a1 b1) p (t2tb11 w)))
  (exists ((a2 (tuple21 a b)))
  (and (mem3 a2 w) (mem (tuple2 (tuple2 a1 b1) b2)
  (Tuple2 (tuple2 a1 b1) b2 (t2tb13 a2) x) p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 b (set (tuple21 b a))))) (w (set b))
  (x (set (tuple21 b a))))
  (= (mem6 x (tb2t56 (image (set1 (tuple2 b1 a1)) b1 (t2tb95 p) (t2tb12 w))))
  (exists ((a2 b))
  (and (mem2 a2 w) (mem (tuple2 b1 (set1 (tuple2 b1 a1)))
  (Tuple2 b1 (set1 (tuple2 b1 a1)) (t2tb14 a2) (t2tb37 x)) (t2tb95 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 b (tuple21 b a)))) (w (set b)) (x (tuple21 b a)))
  (= (mem5 x (tb2t37 (image (tuple2 b1 a1) b1 (t2tb97 p) (t2tb12 w))))
  (exists ((a2 b))
  (and (mem2 a2 w) (mem (tuple2 b1 (tuple2 b1 a1))
  (Tuple2 b1 (tuple2 b1 a1) (t2tb14 a2) (t2tb38 x)) (t2tb97 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 b (set (tuple21 a b))))) (w (set b))
  (x (set (tuple21 a b))))
  (= (mem4 x (tb2t10 (image (set1 (tuple2 a1 b1)) b1 (t2tb31 p) (t2tb12 w))))
  (exists ((a2 b))
  (and (mem2 a2 w) (mem (tuple2 b1 (set1 (tuple2 a1 b1)))
  (Tuple2 b1 (set1 (tuple2 a1 b1)) (t2tb14 a2) (t2tb11 x)) (t2tb31 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 b (tuple21 a b)))) (w (set b)) (x (tuple21 a b)))
  (= (mem3 x (tb2t11 (image (tuple2 a1 b1) b1 (t2tb34 p) (t2tb12 w))))
  (exists ((a2 b))
  (and (mem2 a2 w) (mem (tuple2 b1 (tuple2 a1 b1))
  (Tuple2 b1 (tuple2 a1 b1) (t2tb14 a2) (t2tb13 x)) (t2tb34 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 b b))) (w (set b)) (x b))
  (= (mem2 x (tb2t12 (image b1 b1 (t2tb35 p) (t2tb12 w))))
  (exists ((a2 b))
  (and (mem2 a2 w) (mem (tuple2 b1 b1) (Tuple2 b1 b1 (t2tb14 a2) (t2tb14 x))
  (t2tb35 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 b a))) (w (set b)) (x a))
  (= (mem1 x (tb2t1 (image a1 b1 (t2tb37 p) (t2tb12 w))))
  (exists ((a2 b))
  (and (mem2 a2 w) (mem5 (tb2t38 (Tuple2 b1 a1 (t2tb14 a2) (t2tb2 x))) p))))))

;; mem_image
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (w (set b)) (x uni))
  (= (mem b2 x (image b2 b1 p (t2tb12 w)))
  (exists ((a2 b))
  (and (mem2 a2 w) (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 a2) x) p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 a (set (tuple21 b a))))) (w (set a))
  (x (set (tuple21 b a))))
  (= (mem6 x (tb2t56 (image (set1 (tuple2 b1 a1)) a1 (t2tb99 p) (t2tb1 w))))
  (exists ((a2 a))
  (and (mem1 a2 w) (mem (tuple2 a1 (set1 (tuple2 b1 a1)))
  (Tuple2 a1 (set1 (tuple2 b1 a1)) (t2tb2 a2) (t2tb37 x)) (t2tb99 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 a (tuple21 b a)))) (w (set a)) (x (tuple21 b a)))
  (= (mem5 x (tb2t37 (image (tuple2 b1 a1) a1 (t2tb101 p) (t2tb1 w))))
  (exists ((a2 a))
  (and (mem1 a2 w) (mem (tuple2 a1 (tuple2 b1 a1))
  (Tuple2 a1 (tuple2 b1 a1) (t2tb2 a2) (t2tb38 x)) (t2tb101 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 a (set (tuple21 a b))))) (w (set a))
  (x (set (tuple21 a b))))
  (= (mem4 x (tb2t10 (image (set1 (tuple2 a1 b1)) a1 (t2tb39 p) (t2tb1 w))))
  (exists ((a2 a))
  (and (mem1 a2 w) (mem (tuple2 a1 (set1 (tuple2 a1 b1)))
  (Tuple2 a1 (set1 (tuple2 a1 b1)) (t2tb2 a2) (t2tb11 x)) (t2tb39 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 a (tuple21 a b)))) (w (set a)) (x (tuple21 a b)))
  (= (mem3 x (tb2t11 (image (tuple2 a1 b1) a1 (t2tb41 p) (t2tb1 w))))
  (exists ((a2 a))
  (and (mem1 a2 w) (mem (tuple2 a1 (tuple2 a1 b1))
  (Tuple2 a1 (tuple2 a1 b1) (t2tb2 a2) (t2tb13 x)) (t2tb41 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 a b))) (w (set a)) (x b))
  (= (mem2 x (tb2t12 (image b1 a1 (t2tb11 p) (t2tb1 w))))
  (exists ((a2 a))
  (and (mem1 a2 w) (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 a2) (t2tb14 x))) p))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 a a))) (w (set a)) (x a))
  (= (mem1 x (tb2t1 (image a1 a1 (t2tb4 p) (t2tb1 w))))
  (exists ((a2 a))
  (and (mem1 a2 w) (mem (tuple2 a1 a1) (Tuple2 a1 a1 (t2tb2 a2) (t2tb2 x))
  (t2tb4 p)))))))

;; mem_image
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (w (set a)) (x uni))
  (= (mem b2 x (image b2 a1 p (t2tb1 w)))
  (exists ((a2 a))
  (and (mem1 a2 w) (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 a2) x) p)))))))

;; mem_image
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((p uni) (w uni) (x uni))
  (and
  (=> (mem b2 x (image b2 a2 p w))
  (exists ((a3 uni))
  (and (sort a2 a3)
  (and (mem a2 a3 w) (mem (tuple2 a2 b2) (Tuple2 a2 b2 a3 x) p)))))
  (=>
  (exists ((a3 uni))
  (and (mem a2 a3 w) (mem (tuple2 a2 b2) (Tuple2 a2 b2 a3 x) p))) (mem b2 x
  (image b2 a2 p w)))))))

(declare-fun infix_lspl (ty ty uni uni) uni)

;; infix <+_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (tuple2 a2 b2))
  (infix_lspl b2 a2 x x1)))))

;; mem_overriding
  (assert
  (forall ((b2 ty))
  (forall ((q uni) (p uni) (x (set (tuple21 b a))) (y uni))
  (= (mem (tuple2 (set1 (tuple2 b1 a1)) b2)
  (Tuple2 (set1 (tuple2 b1 a1)) b2 (t2tb37 x) y)
  (infix_lspl b2 (set1 (tuple2 b1 a1)) q p))
  (or
  (and (mem (tuple2 (set1 (tuple2 b1 a1)) b2)
  (Tuple2 (set1 (tuple2 b1 a1)) b2 (t2tb37 x) y) q)
  (not (mem6 x (tb2t56 (dom b2 (set1 (tuple2 b1 a1)) p))))) (mem
  (tuple2 (set1 (tuple2 b1 a1)) b2)
  (Tuple2 (set1 (tuple2 b1 a1)) b2 (t2tb37 x) y) p))))))

;; mem_overriding
  (assert
  (forall ((b2 ty))
  (forall ((q uni) (p uni) (x (tuple21 b a)) (y uni))
  (= (mem (tuple2 (tuple2 b1 a1) b2) (Tuple2 (tuple2 b1 a1) b2 (t2tb38 x) y)
  (infix_lspl b2 (tuple2 b1 a1) q p))
  (or
  (and (mem (tuple2 (tuple2 b1 a1) b2)
  (Tuple2 (tuple2 b1 a1) b2 (t2tb38 x) y) q)
  (not (mem5 x (tb2t37 (dom b2 (tuple2 b1 a1) p))))) (mem
  (tuple2 (tuple2 b1 a1) b2) (Tuple2 (tuple2 b1 a1) b2 (t2tb38 x) y) p))))))

;; mem_overriding
  (assert
  (forall ((b2 ty))
  (forall ((q uni) (p uni) (x (set (tuple21 a b))) (y uni))
  (= (mem (tuple2 (set1 (tuple2 a1 b1)) b2)
  (Tuple2 (set1 (tuple2 a1 b1)) b2 (t2tb11 x) y)
  (infix_lspl b2 (set1 (tuple2 a1 b1)) q p))
  (or
  (and (mem (tuple2 (set1 (tuple2 a1 b1)) b2)
  (Tuple2 (set1 (tuple2 a1 b1)) b2 (t2tb11 x) y) q)
  (not (mem4 x (tb2t10 (dom b2 (set1 (tuple2 a1 b1)) p))))) (mem
  (tuple2 (set1 (tuple2 a1 b1)) b2)
  (Tuple2 (set1 (tuple2 a1 b1)) b2 (t2tb11 x) y) p))))))

;; mem_overriding
  (assert
  (forall ((b2 ty))
  (forall ((q uni) (p uni) (x (tuple21 a b)) (y uni))
  (= (mem (tuple2 (tuple2 a1 b1) b2) (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) y)
  (infix_lspl b2 (tuple2 a1 b1) q p))
  (or
  (and (mem (tuple2 (tuple2 a1 b1) b2)
  (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) y) q)
  (not (mem3 x (tb2t11 (dom b2 (tuple2 a1 b1) p))))) (mem
  (tuple2 (tuple2 a1 b1) b2) (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) y) p))))))

;; mem_overriding
  (assert
  (forall ((q (set (tuple21 b a))) (p (set (tuple21 b a))) (x b) (y a))
  (= (mem5 (tb2t38 (Tuple2 b1 a1 (t2tb14 x) (t2tb2 y)))
  (tb2t37 (infix_lspl a1 b1 (t2tb37 q) (t2tb37 p))))
  (or
  (and (mem5 (tb2t38 (Tuple2 b1 a1 (t2tb14 x) (t2tb2 y))) q)
  (not (mem2 x (tb2t12 (dom a1 b1 (t2tb37 p)))))) (mem5
  (tb2t38 (Tuple2 b1 a1 (t2tb14 x) (t2tb2 y))) p)))))

;; mem_overriding
  (assert
  (forall ((b2 ty))
  (forall ((q uni) (p uni) (x b) (y uni))
  (= (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) y) (infix_lspl b2 b1 q p))
  (or
  (and (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) y) q)
  (not (mem2 x (tb2t12 (dom b2 b1 p))))) (mem (tuple2 b1 b2)
  (Tuple2 b1 b2 (t2tb14 x) y) p))))))

;; mem_overriding
  (assert
  (forall ((q (set (tuple21 a b))) (p (set (tuple21 a b))) (x a) (y b))
  (= (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y)))
  (tb2t11 (infix_lspl b1 a1 (t2tb11 q) (t2tb11 p))))
  (or
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y))) q)
  (not (mem1 x (tb2t1 (dom b1 a1 (t2tb11 p)))))) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y))) p)))))

;; mem_overriding
  (assert
  (forall ((b2 ty))
  (forall ((q uni) (p uni) (x a) (y uni))
  (= (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) y) (infix_lspl b2 a1 q p))
  (or
  (and (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) y) q)
  (not (mem1 x (tb2t1 (dom b2 a1 p))))) (mem (tuple2 a1 b2)
  (Tuple2 a1 b2 (t2tb2 x) y) p))))))

;; mem_overriding
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((q uni) (p uni) (x uni) (y uni))
  (= (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) (infix_lspl b2 a2 q p))
  (or
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) q)
  (not (mem a2 x (dom b2 a2 p)))) (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) p))))))

(declare-fun direct_product (ty ty ty uni uni) uni)

;; direct_product_sort
  (assert
  (forall ((a2 ty) (b2 ty) (c ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (tuple2 a2 (tuple2 b2 c)))
  (direct_product c b2 a2 x x1)))))

;; mem_direct_product
  (assert
  (forall ((b2 ty))
  (forall ((f uni) (g (set (tuple21 b a))) (x b) (y uni) (z a))
  (= (mem (tuple2 b1 (tuple2 b2 a1))
  (Tuple2 b1 (tuple2 b2 a1) (t2tb14 x) (Tuple2 b2 a1 y (t2tb2 z)))
  (direct_product a1 b2 b1 f (t2tb37 g)))
  (and (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) y) f) (mem5
  (tb2t38 (Tuple2 b1 a1 (t2tb14 x) (t2tb2 z))) g))))))

(declare-fun t2tb124 ((set (tuple21 b (tuple21 a a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 b (tuple21 a a))))) (sort
  (set1 (tuple2 b1 (tuple2 a1 a1))) (t2tb124 x))))

(declare-fun tb2t124 (uni) (set (tuple21 b (tuple21 a a))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 b (tuple21 a a)))))
  (! (= (tb2t124 (t2tb124 i)) i) :pattern ((t2tb124 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 b1 (tuple2 a1 a1))) j)
     (= (t2tb124 (tb2t124 j)) j)) :pattern ((t2tb124 (tb2t124 j))) )))

(declare-fun t2tb125 ((tuple21 b (tuple21 a a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 b (tuple21 a a)))) (sort (tuple2 b1 (tuple2 a1 a1))
  (t2tb125 x))))

(declare-fun tb2t125 (uni) (tuple21 b (tuple21 a a)))

;; BridgeL
  (assert
  (forall ((i (tuple21 b (tuple21 a a))))
  (! (= (tb2t125 (t2tb125 i)) i) :pattern ((t2tb125 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 b1 (tuple2 a1 a1)) j) (= (t2tb125 (tb2t125 j)) j)) :pattern (
  (t2tb125 (tb2t125 j))) )))

;; mem_direct_product
  (assert
  (forall ((f (set (tuple21 b a))) (g (set (tuple21 b a))) (x b) (y a) (z a))
  (= (mem (tuple2 b1 (tuple2 a1 a1))
  (Tuple2 b1 (tuple2 a1 a1) (t2tb14 x) (Tuple2 a1 a1 (t2tb2 y) (t2tb2 z)))
  (direct_product a1 a1 b1 (t2tb37 f) (t2tb37 g)))
  (and (mem5 (tb2t38 (Tuple2 b1 a1 (t2tb14 x) (t2tb2 y))) f) (mem5
  (tb2t38 (Tuple2 b1 a1 (t2tb14 x) (t2tb2 z))) g)))))

;; mem_direct_product
  (assert
  (forall ((c ty))
  (forall ((f (set (tuple21 b a))) (g uni) (x b) (y a) (z uni))
  (= (mem (tuple2 b1 (tuple2 a1 c))
  (Tuple2 b1 (tuple2 a1 c) (t2tb14 x) (Tuple2 a1 c (t2tb2 y) z))
  (direct_product c a1 b1 (t2tb37 f) g))
  (and (mem5 (tb2t38 (Tuple2 b1 a1 (t2tb14 x) (t2tb2 y))) f) (mem
  (tuple2 b1 c) (Tuple2 b1 c (t2tb14 x) z) g))))))

;; mem_direct_product
  (assert
  (forall ((b2 ty))
  (forall ((f uni) (g (set (tuple21 a b))) (x a) (y uni) (z b))
  (= (mem (tuple2 a1 (tuple2 b2 b1))
  (Tuple2 a1 (tuple2 b2 b1) (t2tb2 x) (Tuple2 b2 b1 y (t2tb14 z)))
  (direct_product b1 b2 a1 f (t2tb11 g)))
  (and (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) y) f) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 z))) g))))))

(declare-fun t2tb59 ((set (tuple21 a (tuple21 b b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (tuple21 b b))))) (sort
  (set1 (tuple2 a1 (tuple2 b1 b1))) (t2tb59 x))))

(declare-fun tb2t59 (uni) (set (tuple21 a (tuple21 b b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (tuple21 b b)))))
  (! (= (tb2t59 (t2tb59 i)) i) :pattern ((t2tb59 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (tuple2 b1 b1))) j)
     (= (t2tb59 (tb2t59 j)) j)) :pattern ((t2tb59 (tb2t59 j))) )))

(declare-fun t2tb60 ((tuple21 a (tuple21 b b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (tuple21 b b)))) (sort (tuple2 a1 (tuple2 b1 b1))
  (t2tb60 x))))

(declare-fun tb2t60 (uni) (tuple21 a (tuple21 b b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (tuple21 b b))))
  (! (= (tb2t60 (t2tb60 i)) i) :pattern ((t2tb60 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (tuple2 b1 b1)) j) (= (t2tb60 (tb2t60 j)) j)) :pattern (
  (t2tb60 (tb2t60 j))) )))

;; mem_direct_product
  (assert
  (forall ((f (set (tuple21 a b))) (g (set (tuple21 a b))) (x a) (y b) (z b))
  (= (mem (tuple2 a1 (tuple2 b1 b1))
  (Tuple2 a1 (tuple2 b1 b1) (t2tb2 x) (Tuple2 b1 b1 (t2tb14 y) (t2tb14 z)))
  (direct_product b1 b1 a1 (t2tb11 f) (t2tb11 g)))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y))) f) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 z))) g)))))

;; mem_direct_product
  (assert
  (forall ((c ty))
  (forall ((f (set (tuple21 a b))) (g uni) (x a) (y b) (z uni))
  (= (mem (tuple2 a1 (tuple2 b1 c))
  (Tuple2 a1 (tuple2 b1 c) (t2tb2 x) (Tuple2 b1 c (t2tb14 y) z))
  (direct_product c b1 a1 (t2tb11 f) g))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y))) f) (mem
  (tuple2 a1 c) (Tuple2 a1 c (t2tb2 x) z) g))))))

;; mem_direct_product
  (assert
  (forall ((a2 ty) (b2 ty) (c ty))
  (forall ((f uni) (g uni) (x uni) (y uni) (z uni))
  (= (mem (tuple2 a2 (tuple2 b2 c))
  (Tuple2 a2 (tuple2 b2 c) x (Tuple2 b2 c y z)) (direct_product c b2 a2 f g))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) f) (mem (tuple2 a2 c)
  (Tuple2 a2 c x z) g))))))

(declare-fun prj1 (ty ty uni) uni)

;; prj1_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni)) (sort (set1 (tuple2 (tuple2 a2 b2) a2)) (prj1 b2 a2 x)))))

;; mem_proj_op_1
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (x uni) (y uni) (z uni))
  (=> (sort a2 x)
  (=> (sort a2 z)
  (= (mem (tuple2 (tuple2 a2 b2) a2)
  (Tuple2 (tuple2 a2 b2) a2 (Tuple2 a2 b2 x y) z)
  (prj1 b2 a2 (Tuple2 (set1 a2) (set1 b2) s t)))
  (and (mem (tuple2 (tuple2 a2 b2) a2)
  (Tuple2 (tuple2 a2 b2) a2 (Tuple2 a2 b2 x y) z)
  (times a2 (tuple2 a2 b2) (times b2 a2 s t) s)) (= z x))))))))

(declare-fun prj2 (ty ty uni) uni)

;; prj2_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni)) (sort (set1 (tuple2 (tuple2 a2 b2) b2)) (prj2 b2 a2 x)))))

;; mem_proj_op_2
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (x uni) (y uni) (z uni))
  (=> (sort b2 y)
  (=> (sort b2 z)
  (= (mem (tuple2 (tuple2 a2 b2) b2)
  (Tuple2 (tuple2 a2 b2) b2 (Tuple2 a2 b2 x y) z)
  (prj2 b2 a2 (Tuple2 (set1 a2) (set1 b2) s t)))
  (and (mem (tuple2 (tuple2 a2 b2) b2)
  (Tuple2 (tuple2 a2 b2) b2 (Tuple2 a2 b2 x y) z)
  (times b2 (tuple2 a2 b2) (times b2 a2 s t) t)) (= z y))))))))

(declare-fun parallel_product (ty ty ty ty uni uni) uni)

;; parallel_product_sort
  (assert
  (forall ((a2 ty) (b2 ty) (c ty) (d ty))
  (forall ((x uni) (x1 uni)) (sort
  (set1 (tuple2 (tuple2 a2 c) (tuple2 b2 d)))
  (parallel_product d c b2 a2 x x1)))))

;; mem_parallel_product
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((h uni) (k (set (tuple21 b a))) (x uni) (y b) (z uni) (w a))
  (= (mem (tuple2 (tuple2 a2 b1) (tuple2 b2 a1))
  (Tuple2 (tuple2 a2 b1) (tuple2 b2 a1) (Tuple2 a2 b1 x (t2tb14 y))
  (Tuple2 b2 a1 z (t2tb2 w))) (parallel_product a1 b1 b2 a2 h (t2tb37 k)))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x z) h) (mem5
  (tb2t38 (Tuple2 b1 a1 (t2tb14 y) (t2tb2 w))) k))))))

;; mem_parallel_product
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((h uni) (k (set (tuple21 a b))) (x uni) (y a) (z uni) (w b))
  (= (mem (tuple2 (tuple2 a2 a1) (tuple2 b2 b1))
  (Tuple2 (tuple2 a2 a1) (tuple2 b2 b1) (Tuple2 a2 a1 x (t2tb2 y))
  (Tuple2 b2 b1 z (t2tb14 w))) (parallel_product b1 a1 b2 a2 h (t2tb11 k)))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x z) h) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 y) (t2tb14 w))) k))))))

(declare-fun t2tb126 ((set (tuple21 (tuple21 b b) (tuple21 a a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b b) (tuple21 a a))))) (sort
  (set1 (tuple2 (tuple2 b1 b1) (tuple2 a1 a1))) (t2tb126 x))))

(declare-fun tb2t126 (uni) (set (tuple21 (tuple21 b b) (tuple21 a a))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b b) (tuple21 a a)))))
  (! (= (tb2t126 (t2tb126 i)) i) :pattern ((t2tb126 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 b1) (tuple2 a1 a1))) j)
     (= (t2tb126 (tb2t126 j)) j)) :pattern ((t2tb126 (tb2t126 j))) )))

(declare-fun t2tb127 ((tuple21 (tuple21 b b) (tuple21 a a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b b) (tuple21 a a)))) (sort
  (tuple2 (tuple2 b1 b1) (tuple2 a1 a1)) (t2tb127 x))))

(declare-fun tb2t127 (uni) (tuple21 (tuple21 b b) (tuple21 a a)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b b) (tuple21 a a))))
  (! (= (tb2t127 (t2tb127 i)) i) :pattern ((t2tb127 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 b1) (tuple2 a1 a1)) j)
     (= (t2tb127 (tb2t127 j)) j)) :pattern ((t2tb127 (tb2t127 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 b a))) (k (set (tuple21 b a))) (x b) (y b) (z a)
  (w a))
  (= (mem (tuple2 (tuple2 b1 b1) (tuple2 a1 a1))
  (Tuple2 (tuple2 b1 b1) (tuple2 a1 a1) (Tuple2 b1 b1 (t2tb14 x) (t2tb14 y))
  (Tuple2 a1 a1 (t2tb2 z) (t2tb2 w)))
  (parallel_product a1 b1 a1 b1 (t2tb37 h) (t2tb37 k)))
  (and (mem5 (tb2t38 (Tuple2 b1 a1 (t2tb14 x) (t2tb2 z))) h) (mem5
  (tb2t38 (Tuple2 b1 a1 (t2tb14 y) (t2tb2 w))) k)))))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 b a))) (k (set (tuple21 a b))) (x b) (y a) (z a)
  (w b))
  (= (mem (tuple2 (tuple2 b1 a1) (tuple2 a1 b1))
  (Tuple2 (tuple2 b1 a1) (tuple2 a1 b1) (Tuple2 b1 a1 (t2tb14 x) (t2tb2 y))
  (Tuple2 a1 b1 (t2tb2 z) (t2tb14 w)))
  (parallel_product b1 a1 a1 b1 (t2tb37 h) (t2tb11 k)))
  (and (mem5 (tb2t38 (Tuple2 b1 a1 (t2tb14 x) (t2tb2 z))) h) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 y) (t2tb14 w))) k)))))

;; mem_parallel_product
  (assert
  (forall ((c ty) (d ty))
  (forall ((h (set (tuple21 b a))) (k uni) (x b) (y uni) (z a) (w uni))
  (= (mem (tuple2 (tuple2 b1 c) (tuple2 a1 d))
  (Tuple2 (tuple2 b1 c) (tuple2 a1 d) (Tuple2 b1 c (t2tb14 x) y)
  (Tuple2 a1 d (t2tb2 z) w)) (parallel_product d c a1 b1 (t2tb37 h) k))
  (and (mem5 (tb2t38 (Tuple2 b1 a1 (t2tb14 x) (t2tb2 z))) h) (mem
  (tuple2 c d) (Tuple2 c d y w) k))))))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a b))) (k (set (tuple21 b a))) (x a) (y b) (z b)
  (w a))
  (= (mem (tuple2 (tuple2 a1 b1) (tuple2 b1 a1))
  (Tuple2 (tuple2 a1 b1) (tuple2 b1 a1) (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y))
  (Tuple2 b1 a1 (t2tb14 z) (t2tb2 w)))
  (parallel_product a1 b1 b1 a1 (t2tb11 h) (t2tb37 k)))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 z))) h) (mem5
  (tb2t38 (Tuple2 b1 a1 (t2tb14 y) (t2tb2 w))) k)))))

(declare-fun t2tb61 ((set (tuple21 (tuple21 a a) (tuple21 b b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a a) (tuple21 b b))))) (sort
  (set1 (tuple2 (tuple2 a1 a1) (tuple2 b1 b1))) (t2tb61 x))))

(declare-fun tb2t61 (uni) (set (tuple21 (tuple21 a a) (tuple21 b b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a a) (tuple21 b b)))))
  (! (= (tb2t61 (t2tb61 i)) i) :pattern ((t2tb61 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 a1) (tuple2 b1 b1))) j)
     (= (t2tb61 (tb2t61 j)) j)) :pattern ((t2tb61 (tb2t61 j))) )))

(declare-fun t2tb62 ((tuple21 (tuple21 a a) (tuple21 b b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a a) (tuple21 b b)))) (sort
  (tuple2 (tuple2 a1 a1) (tuple2 b1 b1)) (t2tb62 x))))

(declare-fun tb2t62 (uni) (tuple21 (tuple21 a a) (tuple21 b b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a a) (tuple21 b b))))
  (! (= (tb2t62 (t2tb62 i)) i) :pattern ((t2tb62 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 a1) (tuple2 b1 b1)) j)
     (= (t2tb62 (tb2t62 j)) j)) :pattern ((t2tb62 (tb2t62 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a b))) (k (set (tuple21 a b))) (x a) (y a) (z b)
  (w b))
  (= (mem (tuple2 (tuple2 a1 a1) (tuple2 b1 b1))
  (Tuple2 (tuple2 a1 a1) (tuple2 b1 b1) (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y))
  (Tuple2 b1 b1 (t2tb14 z) (t2tb14 w)))
  (parallel_product b1 a1 b1 a1 (t2tb11 h) (t2tb11 k)))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 z))) h) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 y) (t2tb14 w))) k)))))

;; mem_parallel_product
  (assert
  (forall ((c ty) (d ty))
  (forall ((h (set (tuple21 a b))) (k uni) (x a) (y uni) (z b) (w uni))
  (= (mem (tuple2 (tuple2 a1 c) (tuple2 b1 d))
  (Tuple2 (tuple2 a1 c) (tuple2 b1 d) (Tuple2 a1 c (t2tb2 x) y)
  (Tuple2 b1 d (t2tb14 z) w)) (parallel_product d c b1 a1 (t2tb11 h) k))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 z))) h) (mem
  (tuple2 c d) (Tuple2 c d y w) k))))))

;; mem_parallel_product
  (assert
  (forall ((a2 ty) (b2 ty) (c ty) (d ty))
  (forall ((h uni) (k uni) (x uni) (y uni) (z uni) (w uni))
  (= (mem (tuple2 (tuple2 a2 c) (tuple2 b2 d))
  (Tuple2 (tuple2 a2 c) (tuple2 b2 d) (Tuple2 a2 c x y) (Tuple2 b2 d z w))
  (parallel_product d c b2 a2 h k))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x z) h) (mem (tuple2 c d)
  (Tuple2 c d y w) k))))))

(declare-fun infix_plmngt (ty ty uni uni) uni)

;; infix +->_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (set1 (tuple2 a2 b2)))
  (infix_plmngt b2 a2 x x1)))))

;; mem_partial_function_set
  (assert
  (forall ((s (set b)) (t (set a)) (f (set (tuple21 b a))))
  (= (mem6 f (tb2t56 (infix_plmngt a1 b1 (t2tb12 s) (t2tb1 t))))
  (and (mem6 f (tb2t56 (relation a1 b1 (t2tb12 s) (t2tb1 t))))
  (forall ((x b) (y1 a) (y2 a))
  (=>
  (and (mem5 (tb2t38 (Tuple2 b1 a1 (t2tb14 x) (t2tb2 y1))) f) (mem5
  (tb2t38 (Tuple2 b1 a1 (t2tb14 x) (t2tb2 y2))) f)) (= y1 y2)))))))

;; mem_partial_function_set
  (assert
  (forall ((s (set a)) (t (set b)) (f (set (tuple21 a b))))
  (= (mem4 f (tb2t10 (infix_plmngt b1 a1 (t2tb1 s) (t2tb12 t))))
  (and (mem4 f (tb2t10 (relation b1 a1 (t2tb1 s) (t2tb12 t))))
  (forall ((x a) (y1 b) (y2 b))
  (=>
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y1))) f) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y2))) f)) (= y1 y2)))))))

;; mem_partial_function_set
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (f uni))
  (and
  (=> (mem (set1 (tuple2 a2 b2)) f (infix_plmngt b2 a2 s t))
  (and (mem (set1 (tuple2 a2 b2)) f (relation b2 a2 s t))
  (forall ((x uni) (y1 uni) (y2 uni))
  (=> (sort b2 y1)
  (=> (sort b2 y2)
  (=>
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y1) f) (mem (tuple2 a2 b2)
  (Tuple2 a2 b2 x y2) f)) (= y1 y2)))))))
  (=>
  (and (mem (set1 (tuple2 a2 b2)) f (relation b2 a2 s t))
  (forall ((x uni) (y1 uni) (y2 uni))
  (=> (sort a2 x)
  (=> (sort b2 y1)
  (=> (sort b2 y2)
  (=>
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y1) f) (mem (tuple2 a2 b2)
  (Tuple2 a2 b2 x y2) f)) (= y1 y2))))))) (mem (set1 (tuple2 a2 b2)) f
  (infix_plmngt b2 a2 s t)))))))

(declare-fun infix_mnmngt (ty ty uni uni) uni)

;; infix -->_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (set1 (tuple2 a2 b2)))
  (infix_mnmngt b2 a2 x x1)))))

;; mem_total_function_set
  (assert
  (forall ((s (set b)) (t (set a)) (x (set (tuple21 b a))))
  (= (mem6 x (tb2t56 (infix_mnmngt a1 b1 (t2tb12 s) (t2tb1 t))))
  (and (mem6 x (tb2t56 (infix_plmngt a1 b1 (t2tb12 s) (t2tb1 t))))
  (infix_eqeq b1 (dom a1 b1 (t2tb37 x)) (t2tb12 s))))))

;; mem_total_function_set
  (assert
  (forall ((s (set a)) (t (set b)) (x (set (tuple21 a b))))
  (= (mem4 x (tb2t10 (infix_mnmngt b1 a1 (t2tb1 s) (t2tb12 t))))
  (and (mem4 x (tb2t10 (infix_plmngt b1 a1 (t2tb1 s) (t2tb12 t))))
  (infix_eqeq a1 (dom b1 a1 (t2tb11 x)) (t2tb1 s))))))

;; mem_total_function_set
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (x uni))
  (= (mem (set1 (tuple2 a2 b2)) x (infix_mnmngt b2 a2 s t))
  (and (mem (set1 (tuple2 a2 b2)) x (infix_plmngt b2 a2 s t)) (infix_eqeq a2
  (dom b2 a2 x) s))))))

(declare-fun infix_gtplgt (ty ty uni uni) uni)

;; infix >+>_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (set1 (tuple2 a2 b2)))
  (infix_gtplgt b2 a2 x x1)))))

(declare-fun infix_gtplgt1 ((set a) (set b)) (set (set (tuple21 a b))))

(declare-fun infix_gtplgt2 ((set b) (set a)) (set (set (tuple21 b a))))

;; mem_partial_injection_set
  (assert
  (forall ((s (set b)) (t (set a)) (x (set (tuple21 b a))))
  (= (mem6 x (infix_gtplgt2 s t))
  (and (mem6 x (tb2t56 (infix_plmngt a1 b1 (t2tb12 s) (t2tb1 t)))) (mem4
  (inverse1 x) (tb2t10 (infix_plmngt b1 a1 (t2tb1 t) (t2tb12 s))))))))

;; mem_partial_injection_set
  (assert
  (forall ((s (set a)) (t (set b)) (x (set (tuple21 a b))))
  (= (mem4 x (infix_gtplgt1 s t))
  (and (mem4 x (tb2t10 (infix_plmngt b1 a1 (t2tb1 s) (t2tb12 t)))) (mem6
  (inverse2 x) (tb2t56 (infix_plmngt a1 b1 (t2tb12 t) (t2tb1 s))))))))

;; mem_partial_injection_set
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (x uni))
  (= (mem (set1 (tuple2 a2 b2)) x (infix_gtplgt b2 a2 s t))
  (and (mem (set1 (tuple2 a2 b2)) x (infix_plmngt b2 a2 s t)) (mem
  (set1 (tuple2 b2 a2)) (inverse b2 a2 x) (infix_plmngt a2 b2 t s)))))))

(declare-fun infix_gtmngt (ty ty uni uni) uni)

;; infix >->_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (set1 (tuple2 a2 b2)))
  (infix_gtmngt b2 a2 x x1)))))

;; mem_total_injection_set
  (assert
  (forall ((s (set b)) (t (set a)) (x (set (tuple21 b a))))
  (= (mem6 x (tb2t56 (infix_gtmngt a1 b1 (t2tb12 s) (t2tb1 t))))
  (and (mem6 x (infix_gtplgt2 s t)) (mem6 x
  (tb2t56 (infix_mnmngt a1 b1 (t2tb12 s) (t2tb1 t))))))))

;; mem_total_injection_set
  (assert
  (forall ((s (set a)) (t (set b)) (x (set (tuple21 a b))))
  (= (mem4 x (tb2t10 (infix_gtmngt b1 a1 (t2tb1 s) (t2tb12 t))))
  (and (mem4 x (infix_gtplgt1 s t)) (mem4 x
  (tb2t10 (infix_mnmngt b1 a1 (t2tb1 s) (t2tb12 t))))))))

;; mem_total_injection_set
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (x uni))
  (= (mem (set1 (tuple2 a2 b2)) x (infix_gtmngt b2 a2 s t))
  (and (mem (set1 (tuple2 a2 b2)) x (infix_gtplgt b2 a2 s t)) (mem
  (set1 (tuple2 a2 b2)) x (infix_mnmngt b2 a2 s t)))))))

(declare-fun infix_plmngtgt (ty ty uni uni) uni)

;; infix +->>_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (set1 (tuple2 a2 b2)))
  (infix_plmngtgt b2 a2 x x1)))))

;; mem_partial_surjection_set
  (assert
  (forall ((s (set b)) (t (set a)) (x (set (tuple21 b a))))
  (= (mem6 x (tb2t56 (infix_plmngtgt a1 b1 (t2tb12 s) (t2tb1 t))))
  (and (mem6 x (tb2t56 (infix_plmngt a1 b1 (t2tb12 s) (t2tb1 t))))
  (infix_eqeq a1 (ran a1 b1 (t2tb37 x)) (t2tb1 t))))))

;; mem_partial_surjection_set
  (assert
  (forall ((s (set a)) (t (set b)) (x (set (tuple21 a b))))
  (= (mem4 x (tb2t10 (infix_plmngtgt b1 a1 (t2tb1 s) (t2tb12 t))))
  (and (mem4 x (tb2t10 (infix_plmngt b1 a1 (t2tb1 s) (t2tb12 t))))
  (infix_eqeq b1 (ran b1 a1 (t2tb11 x)) (t2tb12 t))))))

;; mem_partial_surjection_set
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (x uni))
  (= (mem (set1 (tuple2 a2 b2)) x (infix_plmngtgt b2 a2 s t))
  (and (mem (set1 (tuple2 a2 b2)) x (infix_plmngt b2 a2 s t)) (infix_eqeq b2
  (ran b2 a2 x) t))))))

(declare-fun infix_mnmngtgt (ty ty uni uni) uni)

;; infix -->>_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (set1 (tuple2 a2 b2)))
  (infix_mnmngtgt b2 a2 x x1)))))

;; mem_total_surjection_set
  (assert
  (forall ((s (set b)) (t (set a)) (x (set (tuple21 b a))))
  (= (mem6 x (tb2t56 (infix_mnmngtgt a1 b1 (t2tb12 s) (t2tb1 t))))
  (and (mem6 x (tb2t56 (infix_plmngtgt a1 b1 (t2tb12 s) (t2tb1 t)))) (mem6 x
  (tb2t56 (infix_mnmngt a1 b1 (t2tb12 s) (t2tb1 t))))))))

;; mem_total_surjection_set
  (assert
  (forall ((s (set a)) (t (set b)) (x (set (tuple21 a b))))
  (= (mem4 x (tb2t10 (infix_mnmngtgt b1 a1 (t2tb1 s) (t2tb12 t))))
  (and (mem4 x (tb2t10 (infix_plmngtgt b1 a1 (t2tb1 s) (t2tb12 t)))) (mem4 x
  (tb2t10 (infix_mnmngt b1 a1 (t2tb1 s) (t2tb12 t))))))))

;; mem_total_surjection_set
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (x uni))
  (= (mem (set1 (tuple2 a2 b2)) x (infix_mnmngtgt b2 a2 s t))
  (and (mem (set1 (tuple2 a2 b2)) x (infix_plmngtgt b2 a2 s t)) (mem
  (set1 (tuple2 a2 b2)) x (infix_mnmngt b2 a2 s t)))))))

(declare-fun infix_gtplgtgt (ty ty uni uni) uni)

;; infix >+>>_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (set1 (tuple2 a2 b2)))
  (infix_gtplgtgt b2 a2 x x1)))))

;; mem_partial_bijection_set
  (assert
  (forall ((s (set b)) (t (set a)) (x (set (tuple21 b a))))
  (= (mem6 x (tb2t56 (infix_gtplgtgt a1 b1 (t2tb12 s) (t2tb1 t))))
  (and (mem6 x (infix_gtplgt2 s t)) (mem6 x
  (tb2t56 (infix_plmngtgt a1 b1 (t2tb12 s) (t2tb1 t))))))))

;; mem_partial_bijection_set
  (assert
  (forall ((s (set a)) (t (set b)) (x (set (tuple21 a b))))
  (= (mem4 x (tb2t10 (infix_gtplgtgt b1 a1 (t2tb1 s) (t2tb12 t))))
  (and (mem4 x (infix_gtplgt1 s t)) (mem4 x
  (tb2t10 (infix_plmngtgt b1 a1 (t2tb1 s) (t2tb12 t))))))))

;; mem_partial_bijection_set
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (x uni))
  (= (mem (set1 (tuple2 a2 b2)) x (infix_gtplgtgt b2 a2 s t))
  (and (mem (set1 (tuple2 a2 b2)) x (infix_gtplgt b2 a2 s t)) (mem
  (set1 (tuple2 a2 b2)) x (infix_plmngtgt b2 a2 s t)))))))

(declare-fun infix_gtmngtgt (ty ty uni uni) uni)

;; infix >->>_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (set1 (tuple2 a2 b2)))
  (infix_gtmngtgt b2 a2 x x1)))))

;; mem_total_bijection_set
  (assert
  (forall ((s (set b)) (t (set a)) (x (set (tuple21 b a))))
  (= (mem6 x (tb2t56 (infix_gtmngtgt a1 b1 (t2tb12 s) (t2tb1 t))))
  (and (mem6 x (tb2t56 (infix_gtmngt a1 b1 (t2tb12 s) (t2tb1 t)))) (mem6 x
  (tb2t56 (infix_mnmngtgt a1 b1 (t2tb12 s) (t2tb1 t))))))))

;; mem_total_bijection_set
  (assert
  (forall ((s (set a)) (t (set b)) (x (set (tuple21 a b))))
  (= (mem4 x (tb2t10 (infix_gtmngtgt b1 a1 (t2tb1 s) (t2tb12 t))))
  (and (mem4 x (tb2t10 (infix_gtmngt b1 a1 (t2tb1 s) (t2tb12 t)))) (mem4 x
  (tb2t10 (infix_mnmngtgt b1 a1 (t2tb1 s) (t2tb12 t))))))))

;; mem_total_bijection_set
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (x uni))
  (= (mem (set1 (tuple2 a2 b2)) x (infix_gtmngtgt b2 a2 s t))
  (and (mem (set1 (tuple2 a2 b2)) x (infix_gtmngt b2 a2 s t)) (mem
  (set1 (tuple2 a2 b2)) x (infix_mnmngtgt b2 a2 s t)))))))

(declare-fun apply (ty ty uni uni) uni)

;; apply_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort b2 (apply b2 a2 x x1)))))

;; apply_def0
  (assert
  (forall ((b2 ty))
  (forall ((f uni) (s (set (set (tuple21 b a)))) (t uni) (a2 (set (tuple21 b
  a))))
  (=>
  (and (mem (set1 (tuple2 (set1 (tuple2 b1 a1)) b2)) f
  (infix_plmngt b2 (set1 (tuple2 b1 a1)) (t2tb56 s) t)) (mem6 a2
  (tb2t56 (dom b2 (set1 (tuple2 b1 a1)) f)))) (mem
  (tuple2 (set1 (tuple2 b1 a1)) b2)
  (Tuple2 (set1 (tuple2 b1 a1)) b2 (t2tb37 a2)
  (apply b2 (set1 (tuple2 b1 a1)) f (t2tb37 a2))) f)))))

;; apply_def0
  (assert
  (forall ((b2 ty))
  (forall ((f uni) (s (set (tuple21 b a))) (t uni) (a2 (tuple21 b a)))
  (=>
  (and (mem (set1 (tuple2 (tuple2 b1 a1) b2)) f
  (infix_plmngt b2 (tuple2 b1 a1) (t2tb37 s) t)) (mem5 a2
  (tb2t37 (dom b2 (tuple2 b1 a1) f)))) (mem (tuple2 (tuple2 b1 a1) b2)
  (Tuple2 (tuple2 b1 a1) b2 (t2tb38 a2)
  (apply b2 (tuple2 b1 a1) f (t2tb38 a2))) f)))))

;; apply_def0
  (assert
  (forall ((b2 ty))
  (forall ((f uni) (s (set (set (tuple21 a b)))) (t uni) (a2 (set (tuple21 a
  b))))
  (=>
  (and (mem (set1 (tuple2 (set1 (tuple2 a1 b1)) b2)) f
  (infix_plmngt b2 (set1 (tuple2 a1 b1)) (t2tb10 s) t)) (mem4 a2
  (tb2t10 (dom b2 (set1 (tuple2 a1 b1)) f)))) (mem
  (tuple2 (set1 (tuple2 a1 b1)) b2)
  (Tuple2 (set1 (tuple2 a1 b1)) b2 (t2tb11 a2)
  (apply b2 (set1 (tuple2 a1 b1)) f (t2tb11 a2))) f)))))

;; apply_def0
  (assert
  (forall ((b2 ty))
  (forall ((f uni) (s (set (tuple21 a b))) (t uni) (a2 (tuple21 a b)))
  (=>
  (and (mem (set1 (tuple2 (tuple2 a1 b1) b2)) f
  (infix_plmngt b2 (tuple2 a1 b1) (t2tb11 s) t)) (mem3 a2
  (tb2t11 (dom b2 (tuple2 a1 b1) f)))) (mem (tuple2 (tuple2 a1 b1) b2)
  (Tuple2 (tuple2 a1 b1) b2 (t2tb13 a2)
  (apply b2 (tuple2 a1 b1) f (t2tb13 a2))) f)))))

;; apply_def0
  (assert
  (forall ((f (set (tuple21 b a))) (s (set b)) (t (set a)) (a2 b))
  (=>
  (and (mem6 f (tb2t56 (infix_plmngt a1 b1 (t2tb12 s) (t2tb1 t)))) (mem2 a2
  (tb2t12 (dom a1 b1 (t2tb37 f))))) (mem5
  (tb2t38 (Tuple2 b1 a1 (t2tb14 a2) (apply a1 b1 (t2tb37 f) (t2tb14 a2))))
  f))))

;; apply_def0
  (assert
  (forall ((b2 ty))
  (forall ((f uni) (s (set b)) (t uni) (a2 b))
  (=>
  (and (mem (set1 (tuple2 b1 b2)) f (infix_plmngt b2 b1 (t2tb12 s) t)) (mem2
  a2 (tb2t12 (dom b2 b1 f)))) (mem (tuple2 b1 b2)
  (Tuple2 b1 b2 (t2tb14 a2) (apply b2 b1 f (t2tb14 a2))) f)))))

;; apply_def0
  (assert
  (forall ((f (set (tuple21 a b))) (s (set a)) (t (set b)) (a2 a))
  (=>
  (and (mem4 f (tb2t10 (infix_plmngt b1 a1 (t2tb1 s) (t2tb12 t)))) (mem1 a2
  (tb2t1 (dom b1 a1 (t2tb11 f))))) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 a2) (apply b1 a1 (t2tb11 f) (t2tb2 a2)))) f))))

;; apply_def0
  (assert
  (forall ((b2 ty))
  (forall ((f uni) (s (set a)) (t uni) (a2 a))
  (=>
  (and (mem (set1 (tuple2 a1 b2)) f (infix_plmngt b2 a1 (t2tb1 s) t)) (mem1
  a2 (tb2t1 (dom b2 a1 f)))) (mem (tuple2 a1 b2)
  (Tuple2 a1 b2 (t2tb2 a2) (apply b2 a1 f (t2tb2 a2))) f)))))

;; apply_def0
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((f uni) (s uni) (t uni) (a3 uni))
  (=>
  (and (mem (set1 (tuple2 a2 b2)) f (infix_plmngt b2 a2 s t)) (mem a2 a3
  (dom b2 a2 f))) (mem (tuple2 a2 b2) (Tuple2 a2 b2 a3 (apply b2 a2 f a3))
  f)))))

(assert
;; mem_inverse_3
 ;; File "lemmes_bbook.why", line 323, characters 7-20
  (not
  (forall ((s (set a)) (t (set b)) (f (set (tuple21 a b))))
  (=> (mem4 f (infix_gtplgt1 s t)) (mem6 (inverse2 f) (infix_gtplgt2 t s))))))
(check-sat)
