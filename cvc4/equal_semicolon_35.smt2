(set-logic AUFBVDTLIRA)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
(declare-sort uni 0)

(declare-sort ty 0)

(declare-fun sort (ty uni) Bool)

(declare-fun witness (ty) uni)

;; witness_sort
  (assert (forall ((a2 ty)) (sort a2 (witness a2))))

(declare-fun int () ty)

(declare-fun real () ty)

(declare-sort set 1)

(declare-fun set1 (ty) ty)

(declare-sort e 0)

(declare-fun e1 () ty)

(declare-sort d 0)

(declare-fun d1 () ty)

(declare-sort c 0)

(declare-fun c1 () ty)

(declare-sort b 0)

(declare-fun b1 () ty)

(declare-sort a 0)

(declare-fun a1 () ty)

(declare-sort tuple21 2)

(declare-fun tuple2 (ty ty) ty)

(declare-fun mem (ty uni uni) Bool)

(declare-fun mem1 (a (set a)) Bool)

(declare-fun mem2 (b (set b)) Bool)

(declare-fun mem3 ((tuple21 a b) (set (tuple21 a b))) Bool)

(declare-fun mem4 ((set (tuple21 a b)) (set (set (tuple21 a b)))) Bool)

(declare-fun mem7 (c (set c)) Bool)

(declare-fun mem10 ((tuple21 a c) (set (tuple21 a c))) Bool)

(declare-fun mem11 ((set (tuple21 a c)) (set (set (tuple21 a c)))) Bool)

(declare-fun mem14 ((tuple21 a (tuple21 b c)) (set (tuple21 a (tuple21 b
  c)))) Bool)

(declare-fun mem20 (d (set d)) Bool)

(declare-fun mem23 ((tuple21 b d) (set (tuple21 b d))) Bool)

(declare-fun mem33 ((set (tuple21 b d)) (set (set (tuple21 b d)))) Bool)

(declare-fun mem32 ((tuple21 a d) (set (tuple21 a d))) Bool)

(declare-fun mem36 (e (set e)) Bool)

(declare-fun mem44 ((tuple21 a e) (set (tuple21 a e))) Bool)

(declare-fun mem46 ((tuple21 c e) (set (tuple21 c e))) Bool)

(declare-fun mem47 ((set (tuple21 c e)) (set (set (tuple21 c e)))) Bool)

(declare-fun mem48 ((tuple21 a (tuple21 d e)) (set (tuple21 a (tuple21 d
  e)))) Bool)

(declare-fun mem49 ((tuple21 (tuple21 b c) (tuple21 d e))
  (set (tuple21 (tuple21 b c) (tuple21 d e)))) Bool)

(declare-fun infix_eqeq (ty uni uni) Bool)

(declare-fun infix_eqeq1 ((set a) (set a)) Bool)

(declare-fun infix_eqeq3 ((set b) (set b)) Bool)

(declare-fun infix_eqeq4 ((set (tuple21 a b)) (set (tuple21 a b))) Bool)

(declare-fun infix_eqeq5 ((set (set (tuple21 a b))) (set (set (tuple21 a
  b)))) Bool)

(declare-fun infix_eqeq7 ((set c) (set c)) Bool)

(declare-fun infix_eqeq9 ((set (tuple21 a c)) (set (tuple21 a c))) Bool)

(declare-fun infix_eqeq19 ((set (set (tuple21 a c))) (set (set (tuple21 a
  c)))) Bool)

(declare-fun infix_eqeq20 ((set (tuple21 a (tuple21 b c))) (set (tuple21 a
  (tuple21 b c)))) Bool)

(declare-fun infix_eqeq13 ((set d) (set d)) Bool)

(declare-fun infix_eqeq22 ((set (tuple21 b d)) (set (tuple21 b d))) Bool)

(declare-fun infix_eqeq24 ((set (tuple21 a d)) (set (tuple21 a d))) Bool)

(declare-fun infix_eqeq28 ((set (set (tuple21 b d))) (set (set (tuple21 b
  d)))) Bool)

(declare-fun infix_eqeq29 ((set e) (set e)) Bool)

(declare-fun infix_eqeq35 ((set (tuple21 a e)) (set (tuple21 a e))) Bool)

(declare-fun infix_eqeq39 ((set (tuple21 c e)) (set (tuple21 c e))) Bool)

(declare-fun infix_eqeq40 ((set (set (tuple21 c e))) (set (set (tuple21 c
  e)))) Bool)

(declare-fun infix_eqeq41 ((set (tuple21 a (tuple21 d e))) (set (tuple21 a
  (tuple21 d e)))) Bool)

(declare-fun infix_eqeq42 ((set (tuple21 (tuple21 b c) (tuple21 d e)))
  (set (tuple21 (tuple21 b c) (tuple21 d e)))) Bool)

;; infix ==_def
  (assert
  (forall ((s (set (tuple21 (tuple21 b c) (tuple21 d e))))
  (t (set (tuple21 (tuple21 b c) (tuple21 d e)))))
  (= (infix_eqeq42 s t)
  (forall ((x (tuple21 (tuple21 b c) (tuple21 d e))))
  (= (mem49 x s) (mem49 x t))))))

;; infix ==_def
  (assert
  (forall ((s (set (tuple21 a (tuple21 d e)))) (t (set (tuple21 a (tuple21 d
  e)))))
  (= (infix_eqeq41 s t)
  (forall ((x (tuple21 a (tuple21 d e)))) (= (mem48 x s) (mem48 x t))))))

;; infix ==_def
  (assert
  (forall ((s (set (set (tuple21 c e)))) (t (set (set (tuple21 c e)))))
  (= (infix_eqeq40 s t)
  (forall ((x (set (tuple21 c e)))) (= (mem47 x s) (mem47 x t))))))

;; infix ==_def
  (assert
  (forall ((s (set (tuple21 c e))) (t (set (tuple21 c e))))
  (= (infix_eqeq39 s t)
  (forall ((x (tuple21 c e))) (= (mem46 x s) (mem46 x t))))))

;; infix ==_def
  (assert
  (forall ((s (set (tuple21 a e))) (t (set (tuple21 a e))))
  (= (infix_eqeq35 s t)
  (forall ((x (tuple21 a e))) (= (mem44 x s) (mem44 x t))))))

;; infix ==_def
  (assert
  (forall ((s (set e)) (t (set e)))
  (= (infix_eqeq29 s t) (forall ((x e)) (= (mem36 x s) (mem36 x t))))))

;; infix ==_def
  (assert
  (forall ((s (set (tuple21 a d))) (t (set (tuple21 a d))))
  (= (infix_eqeq24 s t)
  (forall ((x (tuple21 a d))) (= (mem32 x s) (mem32 x t))))))

;; infix ==_def
  (assert
  (forall ((s (set (set (tuple21 b d)))) (t (set (set (tuple21 b d)))))
  (= (infix_eqeq28 s t)
  (forall ((x (set (tuple21 b d)))) (= (mem33 x s) (mem33 x t))))))

;; infix ==_def
  (assert
  (forall ((s (set (tuple21 b d))) (t (set (tuple21 b d))))
  (= (infix_eqeq22 s t)
  (forall ((x (tuple21 b d))) (= (mem23 x s) (mem23 x t))))))

;; infix ==_def
  (assert
  (forall ((s (set d)) (t (set d)))
  (= (infix_eqeq13 s t) (forall ((x d)) (= (mem20 x s) (mem20 x t))))))

;; infix ==_def
  (assert
  (forall ((s (set (tuple21 a (tuple21 b c)))) (t (set (tuple21 a (tuple21 b
  c)))))
  (= (infix_eqeq20 s t)
  (forall ((x (tuple21 a (tuple21 b c)))) (= (mem14 x s) (mem14 x t))))))

;; infix ==_def
  (assert
  (forall ((s (set (set (tuple21 a c)))) (t (set (set (tuple21 a c)))))
  (= (infix_eqeq19 s t)
  (forall ((x (set (tuple21 a c)))) (= (mem11 x s) (mem11 x t))))))

;; infix ==_def
  (assert
  (forall ((s (set (tuple21 a c))) (t (set (tuple21 a c))))
  (= (infix_eqeq9 s t)
  (forall ((x (tuple21 a c))) (= (mem10 x s) (mem10 x t))))))

;; infix ==_def
  (assert
  (forall ((s (set c)) (t (set c)))
  (= (infix_eqeq7 s t) (forall ((x c)) (= (mem7 x s) (mem7 x t))))))

;; infix ==_def
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set (set (tuple21 a b)))))
  (= (infix_eqeq5 s t)
  (forall ((x (set (tuple21 a b)))) (= (mem4 x s) (mem4 x t))))))

;; infix ==_def
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (tuple21 a b))))
  (= (infix_eqeq4 s t)
  (forall ((x (tuple21 a b))) (= (mem3 x s) (mem3 x t))))))

;; infix ==_def
  (assert
  (forall ((s (set b)) (t (set b)))
  (= (infix_eqeq3 s t) (forall ((x b)) (= (mem2 x s) (mem2 x t))))))

;; infix ==_def
  (assert
  (forall ((s (set a)) (t (set a)))
  (= (infix_eqeq1 s t) (forall ((x a)) (= (mem1 x s) (mem1 x t))))))

;; infix ==_def
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t uni))
  (and
  (=> (infix_eqeq a2 s t) (forall ((x uni)) (= (mem a2 x s) (mem a2 x t))))
  (=> (forall ((x uni)) (=> (sort a2 x) (= (mem a2 x s) (mem a2 x t))))
  (infix_eqeq a2 s t))))))

(declare-fun power (ty uni) uni)

;; power_sort
  (assert
  (forall ((a2 ty)) (forall ((x uni)) (sort (set1 (set1 a2)) (power a2 x)))))

(declare-fun non_empty_power (ty uni) uni)

;; non_empty_power_sort
  (assert
  (forall ((a2 ty))
  (forall ((x uni)) (sort (set1 (set1 a2)) (non_empty_power a2 x)))))

(declare-fun subset1 (ty uni uni) Bool)

(declare-fun t2tb3854 ((set (set (tuple21 c e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 c e))))) (sort (set1 (set1 (tuple2 c1 e1)))
  (t2tb3854 x))))

(declare-fun tb2t3854 (uni) (set (set (tuple21 c e))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 c e)))))
  (! (= (tb2t3854 (t2tb3854 i)) i) :pattern ((t2tb3854 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 c1 e1))) j) (= (t2tb3854 (tb2t3854 j)) j)) :pattern (
  (t2tb3854 (tb2t3854 j))) )))

(declare-fun t2tb3478 ((set (tuple21 c e))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 c e)))) (sort (set1 (tuple2 c1 e1))
  (t2tb3478 x))))

(declare-fun tb2t3478 (uni) (set (tuple21 c e)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 c e))))
  (! (= (tb2t3478 (t2tb3478 i)) i) :pattern ((t2tb3478 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 c1 e1)) j) (= (t2tb3478 (tb2t3478 j)) j)) :pattern (
  (t2tb3478 (tb2t3478 j))) )))

;; subset_def
  (assert
  (forall ((s (set (tuple21 c e))) (t (set (tuple21 c e))))
  (= (subset1 (tuple2 c1 e1) (t2tb3478 s) (t2tb3478 t)) (mem47 s
  (tb2t3854 (power (tuple2 c1 e1) (t2tb3478 t)))))))

(declare-fun t2tb906 ((set (set (tuple21 b d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 b d))))) (sort (set1 (set1 (tuple2 b1 d1)))
  (t2tb906 x))))

(declare-fun tb2t906 (uni) (set (set (tuple21 b d))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 b d)))))
  (! (= (tb2t906 (t2tb906 i)) i) :pattern ((t2tb906 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 b1 d1))) j) (= (t2tb906 (tb2t906 j)) j)) :pattern (
  (t2tb906 (tb2t906 j))) )))

(declare-fun t2tb687 ((set (tuple21 b d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 b d)))) (sort (set1 (tuple2 b1 d1)) (t2tb687 x))))

(declare-fun tb2t687 (uni) (set (tuple21 b d)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 b d))))
  (! (= (tb2t687 (t2tb687 i)) i) :pattern ((t2tb687 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 b1 d1)) j) (= (t2tb687 (tb2t687 j)) j)) :pattern (
  (t2tb687 (tb2t687 j))) )))

;; subset_def
  (assert
  (forall ((s (set (tuple21 b d))) (t (set (tuple21 b d))))
  (= (subset1 (tuple2 b1 d1) (t2tb687 s) (t2tb687 t)) (mem33 s
  (tb2t906 (power (tuple2 b1 d1) (t2tb687 t)))))))

(declare-fun t2tb128 ((set (set (tuple21 a c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 a c))))) (sort (set1 (set1 (tuple2 a1 c1)))
  (t2tb128 x))))

(declare-fun tb2t128 (uni) (set (set (tuple21 a c))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 a c)))))
  (! (= (tb2t128 (t2tb128 i)) i) :pattern ((t2tb128 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 a1 c1))) j) (= (t2tb128 (tb2t128 j)) j)) :pattern (
  (t2tb128 (tb2t128 j))) )))

(declare-fun t2tb129 ((set (tuple21 a c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a c)))) (sort (set1 (tuple2 a1 c1)) (t2tb129 x))))

(declare-fun tb2t129 (uni) (set (tuple21 a c)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a c))))
  (! (= (tb2t129 (t2tb129 i)) i) :pattern ((t2tb129 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 c1)) j) (= (t2tb129 (tb2t129 j)) j)) :pattern (
  (t2tb129 (tb2t129 j))) )))

;; subset_def
  (assert
  (forall ((s (set (tuple21 a c))) (t (set (tuple21 a c))))
  (= (subset1 (tuple2 a1 c1) (t2tb129 s) (t2tb129 t)) (mem11 s
  (tb2t128 (power (tuple2 a1 c1) (t2tb129 t)))))))

(declare-fun t2tb10 ((set (set (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 a b))))) (sort (set1 (set1 (tuple2 a1 b1)))
  (t2tb10 x))))

(declare-fun tb2t10 (uni) (set (set (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 a b)))))
  (! (= (tb2t10 (t2tb10 i)) i) :pattern ((t2tb10 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 a1 b1))) j) (= (t2tb10 (tb2t10 j)) j)) :pattern (
  (t2tb10 (tb2t10 j))) )))

(declare-fun t2tb11 ((set (tuple21 a b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a b)))) (sort (set1 (tuple2 a1 b1)) (t2tb11 x))))

(declare-fun tb2t11 (uni) (set (tuple21 a b)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a b))))
  (! (= (tb2t11 (t2tb11 i)) i) :pattern ((t2tb11 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 b1)) j) (= (t2tb11 (tb2t11 j)) j)) :pattern (
  (t2tb11 (tb2t11 j))) )))

;; subset_def
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (tuple21 a b))))
  (= (subset1 (tuple2 a1 b1) (t2tb11 s) (t2tb11 t)) (mem4 s
  (tb2t10 (power (tuple2 a1 b1) (t2tb11 t)))))))

;; subset_def
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t uni))
  (= (subset1 a2 s t) (mem (set1 a2) s (power a2 t))))))

(declare-fun subsetnoteq (ty uni uni) Bool)

(declare-fun t2tb4102 ((set (tuple21 (tuple21 b c) (tuple21 d e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b c) (tuple21 d e))))) (sort
  (set1 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1))) (t2tb4102 x))))

(declare-fun tb2t4102 (uni) (set (tuple21 (tuple21 b c) (tuple21 d e))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b c) (tuple21 d e)))))
  (! (= (tb2t4102 (t2tb4102 i)) i) :pattern ((t2tb4102 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1))) j)
     (= (t2tb4102 (tb2t4102 j)) j)) :pattern ((t2tb4102 (tb2t4102 j))) )))

;; subsetnoteq_def
  (assert
  (forall ((s (set (tuple21 (tuple21 b c) (tuple21 d e))))
  (t (set (tuple21 (tuple21 b c) (tuple21 d e)))))
  (= (subsetnoteq (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (t2tb4102 s)
  (t2tb4102 t))
  (and (subset1 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (t2tb4102 s)
  (t2tb4102 t)) (not (infix_eqeq42 s t))))))

(declare-fun t2tb4103 ((set (tuple21 a (tuple21 d e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (tuple21 d e))))) (sort
  (set1 (tuple2 a1 (tuple2 d1 e1))) (t2tb4103 x))))

(declare-fun tb2t4103 (uni) (set (tuple21 a (tuple21 d e))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (tuple21 d e)))))
  (! (= (tb2t4103 (t2tb4103 i)) i) :pattern ((t2tb4103 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (tuple2 d1 e1))) j)
     (= (t2tb4103 (tb2t4103 j)) j)) :pattern ((t2tb4103 (tb2t4103 j))) )))

;; subsetnoteq_def
  (assert
  (forall ((s (set (tuple21 a (tuple21 d e)))) (t (set (tuple21 a (tuple21 d
  e)))))
  (= (subsetnoteq (tuple2 a1 (tuple2 d1 e1)) (t2tb4103 s) (t2tb4103 t))
  (and (subset1 (tuple2 a1 (tuple2 d1 e1)) (t2tb4103 s) (t2tb4103 t))
  (not (infix_eqeq41 s t))))))

;; subsetnoteq_def
  (assert
  (forall ((s (set (set (tuple21 c e)))) (t (set (set (tuple21 c e)))))
  (= (subsetnoteq (set1 (tuple2 c1 e1)) (t2tb3854 s) (t2tb3854 t))
  (and (subset1 (set1 (tuple2 c1 e1)) (t2tb3854 s) (t2tb3854 t))
  (not (infix_eqeq40 s t))))))

;; subsetnoteq_def
  (assert
  (forall ((s (set (tuple21 c e))) (t (set (tuple21 c e))))
  (= (subsetnoteq (tuple2 c1 e1) (t2tb3478 s) (t2tb3478 t))
  (and (subset1 (tuple2 c1 e1) (t2tb3478 s) (t2tb3478 t))
  (not (infix_eqeq39 s t))))))

(declare-fun t2tb2943 ((set (tuple21 a e))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a e)))) (sort (set1 (tuple2 a1 e1))
  (t2tb2943 x))))

(declare-fun tb2t2943 (uni) (set (tuple21 a e)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a e))))
  (! (= (tb2t2943 (t2tb2943 i)) i) :pattern ((t2tb2943 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 e1)) j) (= (t2tb2943 (tb2t2943 j)) j)) :pattern (
  (t2tb2943 (tb2t2943 j))) )))

;; subsetnoteq_def
  (assert
  (forall ((s (set (tuple21 a e))) (t (set (tuple21 a e))))
  (= (subsetnoteq (tuple2 a1 e1) (t2tb2943 s) (t2tb2943 t))
  (and (subset1 (tuple2 a1 e1) (t2tb2943 s) (t2tb2943 t))
  (not (infix_eqeq35 s t))))))

(declare-fun t2tb2947 ((set e)) uni)

;; t2tb_sort
  (assert (forall ((x (set e))) (sort (set1 e1) (t2tb2947 x))))

(declare-fun tb2t2947 (uni) (set e))

;; BridgeL
  (assert
  (forall ((i (set e)))
  (! (= (tb2t2947 (t2tb2947 i)) i) :pattern ((t2tb2947 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 e1) j) (= (t2tb2947 (tb2t2947 j)) j)) :pattern (
  (t2tb2947 (tb2t2947 j))) )))

;; subsetnoteq_def
  (assert
  (forall ((s (set e)) (t (set e)))
  (= (subsetnoteq e1 (t2tb2947 s) (t2tb2947 t))
  (and (subset1 e1 (t2tb2947 s) (t2tb2947 t)) (not (infix_eqeq29 s t))))))

(declare-fun t2tb903 ((set (tuple21 a d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a d)))) (sort (set1 (tuple2 a1 d1)) (t2tb903 x))))

(declare-fun tb2t903 (uni) (set (tuple21 a d)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a d))))
  (! (= (tb2t903 (t2tb903 i)) i) :pattern ((t2tb903 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 d1)) j) (= (t2tb903 (tb2t903 j)) j)) :pattern (
  (t2tb903 (tb2t903 j))) )))

;; subsetnoteq_def
  (assert
  (forall ((s (set (tuple21 a d))) (t (set (tuple21 a d))))
  (= (subsetnoteq (tuple2 a1 d1) (t2tb903 s) (t2tb903 t))
  (and (subset1 (tuple2 a1 d1) (t2tb903 s) (t2tb903 t))
  (not (infix_eqeq24 s t))))))

;; subsetnoteq_def
  (assert
  (forall ((s (set (set (tuple21 b d)))) (t (set (set (tuple21 b d)))))
  (= (subsetnoteq (set1 (tuple2 b1 d1)) (t2tb906 s) (t2tb906 t))
  (and (subset1 (set1 (tuple2 b1 d1)) (t2tb906 s) (t2tb906 t))
  (not (infix_eqeq28 s t))))))

;; subsetnoteq_def
  (assert
  (forall ((s (set (tuple21 b d))) (t (set (tuple21 b d))))
  (= (subsetnoteq (tuple2 b1 d1) (t2tb687 s) (t2tb687 t))
  (and (subset1 (tuple2 b1 d1) (t2tb687 s) (t2tb687 t))
  (not (infix_eqeq22 s t))))))

(declare-fun t2tb690 ((set d)) uni)

;; t2tb_sort
  (assert (forall ((x (set d))) (sort (set1 d1) (t2tb690 x))))

(declare-fun tb2t690 (uni) (set d))

;; BridgeL
  (assert
  (forall ((i (set d)))
  (! (= (tb2t690 (t2tb690 i)) i) :pattern ((t2tb690 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 d1) j) (= (t2tb690 (tb2t690 j)) j)) :pattern ((t2tb690
                                                                   (tb2t690
                                                                   j))) )))

;; subsetnoteq_def
  (assert
  (forall ((s (set d)) (t (set d)))
  (= (subsetnoteq d1 (t2tb690 s) (t2tb690 t))
  (and (subset1 d1 (t2tb690 s) (t2tb690 t)) (not (infix_eqeq13 s t))))))

(declare-fun t2tb261 ((set (tuple21 a (tuple21 b c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (tuple21 b c))))) (sort
  (set1 (tuple2 a1 (tuple2 b1 c1))) (t2tb261 x))))

(declare-fun tb2t261 (uni) (set (tuple21 a (tuple21 b c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (tuple21 b c)))))
  (! (= (tb2t261 (t2tb261 i)) i) :pattern ((t2tb261 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (tuple2 b1 c1))) j)
     (= (t2tb261 (tb2t261 j)) j)) :pattern ((t2tb261 (tb2t261 j))) )))

;; subsetnoteq_def
  (assert
  (forall ((s (set (tuple21 a (tuple21 b c)))) (t (set (tuple21 a (tuple21 b
  c)))))
  (= (subsetnoteq (tuple2 a1 (tuple2 b1 c1)) (t2tb261 s) (t2tb261 t))
  (and (subset1 (tuple2 a1 (tuple2 b1 c1)) (t2tb261 s) (t2tb261 t))
  (not (infix_eqeq20 s t))))))

;; subsetnoteq_def
  (assert
  (forall ((s (set (set (tuple21 a c)))) (t (set (set (tuple21 a c)))))
  (= (subsetnoteq (set1 (tuple2 a1 c1)) (t2tb128 s) (t2tb128 t))
  (and (subset1 (set1 (tuple2 a1 c1)) (t2tb128 s) (t2tb128 t))
  (not (infix_eqeq19 s t))))))

;; subsetnoteq_def
  (assert
  (forall ((s (set (tuple21 a c))) (t (set (tuple21 a c))))
  (= (subsetnoteq (tuple2 a1 c1) (t2tb129 s) (t2tb129 t))
  (and (subset1 (tuple2 a1 c1) (t2tb129 s) (t2tb129 t))
  (not (infix_eqeq9 s t))))))

(declare-fun t2tb132 ((set c)) uni)

;; t2tb_sort
  (assert (forall ((x (set c))) (sort (set1 c1) (t2tb132 x))))

(declare-fun tb2t132 (uni) (set c))

;; BridgeL
  (assert
  (forall ((i (set c)))
  (! (= (tb2t132 (t2tb132 i)) i) :pattern ((t2tb132 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 c1) j) (= (t2tb132 (tb2t132 j)) j)) :pattern ((t2tb132
                                                                   (tb2t132
                                                                   j))) )))

;; subsetnoteq_def
  (assert
  (forall ((s (set c)) (t (set c)))
  (= (subsetnoteq c1 (t2tb132 s) (t2tb132 t))
  (and (subset1 c1 (t2tb132 s) (t2tb132 t)) (not (infix_eqeq7 s t))))))

;; subsetnoteq_def
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set (set (tuple21 a b)))))
  (= (subsetnoteq (set1 (tuple2 a1 b1)) (t2tb10 s) (t2tb10 t))
  (and (subset1 (set1 (tuple2 a1 b1)) (t2tb10 s) (t2tb10 t))
  (not (infix_eqeq5 s t))))))

;; subsetnoteq_def
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (tuple21 a b))))
  (= (subsetnoteq (tuple2 a1 b1) (t2tb11 s) (t2tb11 t))
  (and (subset1 (tuple2 a1 b1) (t2tb11 s) (t2tb11 t))
  (not (infix_eqeq4 s t))))))

(declare-fun t2tb12 ((set b)) uni)

;; t2tb_sort
  (assert (forall ((x (set b))) (sort (set1 b1) (t2tb12 x))))

(declare-fun tb2t12 (uni) (set b))

;; BridgeL
  (assert
  (forall ((i (set b))) (! (= (tb2t12 (t2tb12 i)) i) :pattern ((t2tb12 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 b1) j) (= (t2tb12 (tb2t12 j)) j)) :pattern ((t2tb12
                                                                 (tb2t12 j))) )))

;; subsetnoteq_def
  (assert
  (forall ((s (set b)) (t (set b)))
  (= (subsetnoteq b1 (t2tb12 s) (t2tb12 t))
  (and (subset1 b1 (t2tb12 s) (t2tb12 t)) (not (infix_eqeq3 s t))))))

(declare-fun t2tb1 ((set a)) uni)

;; t2tb_sort
  (assert (forall ((x (set a))) (sort (set1 a1) (t2tb1 x))))

(declare-fun tb2t1 (uni) (set a))

;; BridgeL
  (assert
  (forall ((i (set a))) (! (= (tb2t1 (t2tb1 i)) i) :pattern ((t2tb1 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 a1) j) (= (t2tb1 (tb2t1 j)) j)) :pattern ((t2tb1
                                                               (tb2t1 j))) )))

;; subsetnoteq_def
  (assert
  (forall ((s (set a)) (t (set a)))
  (= (subsetnoteq a1 (t2tb1 s) (t2tb1 t))
  (and (subset1 a1 (t2tb1 s) (t2tb1 t)) (not (infix_eqeq1 s t))))))

;; subsetnoteq_def
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t uni))
  (= (subsetnoteq a2 s t) (and (subset1 a2 s t) (not (infix_eqeq a2 s t)))))))

(declare-fun empty (ty) uni)

;; empty_sort
  (assert (forall ((a2 ty)) (sort (set1 a2) (empty a2))))

(declare-fun is_empty (ty uni) Bool)

;; is_empty_def
  (assert
  (forall ((s (set (tuple21 (tuple21 b c) (tuple21 d e)))))
  (= (is_empty (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (t2tb4102 s))
  (forall ((x (tuple21 (tuple21 b c) (tuple21 d e)))) (not (mem49 x s))))))

;; is_empty_def
  (assert
  (forall ((s (set (tuple21 a (tuple21 d e)))))
  (= (is_empty (tuple2 a1 (tuple2 d1 e1)) (t2tb4103 s))
  (forall ((x (tuple21 a (tuple21 d e)))) (not (mem48 x s))))))

;; is_empty_def
  (assert
  (forall ((s (set (set (tuple21 c e)))))
  (= (is_empty (set1 (tuple2 c1 e1)) (t2tb3854 s))
  (forall ((x (set (tuple21 c e)))) (not (mem47 x s))))))

;; is_empty_def
  (assert
  (forall ((s (set (tuple21 c e))))
  (= (is_empty (tuple2 c1 e1) (t2tb3478 s))
  (forall ((x (tuple21 c e))) (not (mem46 x s))))))

;; is_empty_def
  (assert
  (forall ((s (set (tuple21 a e))))
  (= (is_empty (tuple2 a1 e1) (t2tb2943 s))
  (forall ((x (tuple21 a e))) (not (mem44 x s))))))

;; is_empty_def
  (assert
  (forall ((s (set e)))
  (= (is_empty e1 (t2tb2947 s)) (forall ((x e)) (not (mem36 x s))))))

;; is_empty_def
  (assert
  (forall ((s (set (tuple21 a d))))
  (= (is_empty (tuple2 a1 d1) (t2tb903 s))
  (forall ((x (tuple21 a d))) (not (mem32 x s))))))

;; is_empty_def
  (assert
  (forall ((s (set (set (tuple21 b d)))))
  (= (is_empty (set1 (tuple2 b1 d1)) (t2tb906 s))
  (forall ((x (set (tuple21 b d)))) (not (mem33 x s))))))

;; is_empty_def
  (assert
  (forall ((s (set (tuple21 b d))))
  (= (is_empty (tuple2 b1 d1) (t2tb687 s))
  (forall ((x (tuple21 b d))) (not (mem23 x s))))))

;; is_empty_def
  (assert
  (forall ((s (set d)))
  (= (is_empty d1 (t2tb690 s)) (forall ((x d)) (not (mem20 x s))))))

;; is_empty_def
  (assert
  (forall ((s (set (tuple21 a (tuple21 b c)))))
  (= (is_empty (tuple2 a1 (tuple2 b1 c1)) (t2tb261 s))
  (forall ((x (tuple21 a (tuple21 b c)))) (not (mem14 x s))))))

;; is_empty_def
  (assert
  (forall ((s (set (set (tuple21 a c)))))
  (= (is_empty (set1 (tuple2 a1 c1)) (t2tb128 s))
  (forall ((x (set (tuple21 a c)))) (not (mem11 x s))))))

;; is_empty_def
  (assert
  (forall ((s (set (tuple21 a c))))
  (= (is_empty (tuple2 a1 c1) (t2tb129 s))
  (forall ((x (tuple21 a c))) (not (mem10 x s))))))

;; is_empty_def
  (assert
  (forall ((s (set c)))
  (= (is_empty c1 (t2tb132 s)) (forall ((x c)) (not (mem7 x s))))))

;; is_empty_def
  (assert
  (forall ((s (set (set (tuple21 a b)))))
  (= (is_empty (set1 (tuple2 a1 b1)) (t2tb10 s))
  (forall ((x (set (tuple21 a b)))) (not (mem4 x s))))))

;; is_empty_def
  (assert
  (forall ((s (set (tuple21 a b))))
  (= (is_empty (tuple2 a1 b1) (t2tb11 s))
  (forall ((x (tuple21 a b))) (not (mem3 x s))))))

;; is_empty_def
  (assert
  (forall ((s (set b)))
  (= (is_empty b1 (t2tb12 s)) (forall ((x b)) (not (mem2 x s))))))

;; is_empty_def
  (assert
  (forall ((s (set a)))
  (= (is_empty a1 (t2tb1 s)) (forall ((x a)) (not (mem1 x s))))))

;; is_empty_def
  (assert
  (forall ((a2 ty))
  (forall ((s uni))
  (and (=> (is_empty a2 s) (forall ((x uni)) (not (mem a2 x s))))
  (=> (forall ((x uni)) (=> (sort a2 x) (not (mem a2 x s)))) (is_empty a2 s))))))

;; empty_def1
  (assert (forall ((a2 ty)) (is_empty a2 (empty a2))))

;; empty
  (assert
  (forall ((x (tuple21 (tuple21 b c) (tuple21 d e))))
  (not (mem49 x (tb2t4102 (empty (tuple2 (tuple2 b1 c1) (tuple2 d1 e1))))))))

;; empty
  (assert
  (forall ((x (tuple21 a (tuple21 d e))))
  (not (mem48 x (tb2t4103 (empty (tuple2 a1 (tuple2 d1 e1))))))))

;; empty
  (assert
  (forall ((x (set (tuple21 c e))))
  (not (mem47 x (tb2t3854 (empty (set1 (tuple2 c1 e1))))))))

;; empty
  (assert
  (forall ((x (tuple21 c e)))
  (not (mem46 x (tb2t3478 (empty (tuple2 c1 e1)))))))

;; empty
  (assert
  (forall ((x (tuple21 a e)))
  (not (mem44 x (tb2t2943 (empty (tuple2 a1 e1)))))))

;; empty
  (assert (forall ((x e)) (not (mem36 x (tb2t2947 (empty e1))))))

;; empty
  (assert
  (forall ((x (tuple21 a d)))
  (not (mem32 x (tb2t903 (empty (tuple2 a1 d1)))))))

;; empty
  (assert
  (forall ((x (set (tuple21 b d))))
  (not (mem33 x (tb2t906 (empty (set1 (tuple2 b1 d1))))))))

;; empty
  (assert
  (forall ((x (tuple21 b d)))
  (not (mem23 x (tb2t687 (empty (tuple2 b1 d1)))))))

;; empty
  (assert (forall ((x d)) (not (mem20 x (tb2t690 (empty d1))))))

;; empty
  (assert
  (forall ((x (tuple21 a (tuple21 b c))))
  (not (mem14 x (tb2t261 (empty (tuple2 a1 (tuple2 b1 c1))))))))

;; empty
  (assert
  (forall ((x (set (tuple21 a c))))
  (not (mem11 x (tb2t128 (empty (set1 (tuple2 a1 c1))))))))

;; empty
  (assert
  (forall ((x (tuple21 a c)))
  (not (mem10 x (tb2t129 (empty (tuple2 a1 c1)))))))

;; empty
  (assert (forall ((x c)) (not (mem7 x (tb2t132 (empty c1))))))

;; empty
  (assert
  (forall ((x (set (tuple21 a b))))
  (not (mem4 x (tb2t10 (empty (set1 (tuple2 a1 b1))))))))

;; empty
  (assert
  (forall ((x (tuple21 a b))) (not (mem3 x (tb2t11 (empty (tuple2 a1 b1)))))))

;; empty
  (assert (forall ((x b)) (not (mem2 x (tb2t12 (empty b1))))))

;; empty
  (assert (forall ((x a)) (not (mem1 x (tb2t1 (empty a1))))))

;; empty
  (assert (forall ((a2 ty)) (forall ((x uni)) (not (mem a2 x (empty a2))))))

(declare-fun add (ty uni uni) uni)

;; add_sort
  (assert
  (forall ((a2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 a2) (add a2 x x1)))))

(declare-fun t2tb4104 ((tuple21 (tuple21 b c) (tuple21 d e))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b c) (tuple21 d e)))) (sort
  (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (t2tb4104 x))))

(declare-fun tb2t4104 (uni) (tuple21 (tuple21 b c) (tuple21 d e)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b c) (tuple21 d e))))
  (! (= (tb2t4104 (t2tb4104 i)) i) :pattern ((t2tb4104 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) j)
     (= (t2tb4104 (tb2t4104 j)) j)) :pattern ((t2tb4104 (tb2t4104 j))) )))

;; add_def1
  (assert
  (forall ((x (tuple21 (tuple21 b c) (tuple21 d e))) (y (tuple21 (tuple21 b
  c) (tuple21 d e))))
  (forall ((s (set (tuple21 (tuple21 b c) (tuple21 d e)))))
  (= (mem49 x
  (tb2t4102
  (add (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (t2tb4104 y) (t2tb4102 s))))
  (or (= x y) (mem49 x s))))))

(declare-fun t2tb4105 ((tuple21 a (tuple21 d e))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (tuple21 d e)))) (sort (tuple2 a1 (tuple2 d1 e1))
  (t2tb4105 x))))

(declare-fun tb2t4105 (uni) (tuple21 a (tuple21 d e)))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (tuple21 d e))))
  (! (= (tb2t4105 (t2tb4105 i)) i) :pattern ((t2tb4105 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (tuple2 d1 e1)) j) (= (t2tb4105 (tb2t4105 j)) j)) :pattern (
  (t2tb4105 (tb2t4105 j))) )))

;; add_def1
  (assert
  (forall ((x (tuple21 a (tuple21 d e))) (y (tuple21 a (tuple21 d e))))
  (forall ((s (set (tuple21 a (tuple21 d e)))))
  (= (mem48 x
  (tb2t4103 (add (tuple2 a1 (tuple2 d1 e1)) (t2tb4105 y) (t2tb4103 s))))
  (or (= x y) (mem48 x s))))))

;; add_def1
  (assert
  (forall ((x (set (tuple21 c e))) (y (set (tuple21 c e))))
  (forall ((s (set (set (tuple21 c e)))))
  (= (mem47 x
  (tb2t3854 (add (set1 (tuple2 c1 e1)) (t2tb3478 y) (t2tb3854 s))))
  (or (= x y) (mem47 x s))))))

(declare-fun t2tb3479 ((tuple21 c e)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 c e))) (sort (tuple2 c1 e1) (t2tb3479 x))))

(declare-fun tb2t3479 (uni) (tuple21 c e))

;; BridgeL
  (assert
  (forall ((i (tuple21 c e)))
  (! (= (tb2t3479 (t2tb3479 i)) i) :pattern ((t2tb3479 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 c1 e1) j) (= (t2tb3479 (tb2t3479 j)) j)) :pattern (
  (t2tb3479 (tb2t3479 j))) )))

;; add_def1
  (assert
  (forall ((x (tuple21 c e)) (y (tuple21 c e)))
  (forall ((s (set (tuple21 c e))))
  (= (mem46 x (tb2t3478 (add (tuple2 c1 e1) (t2tb3479 y) (t2tb3478 s))))
  (or (= x y) (mem46 x s))))))

(declare-fun t2tb2949 ((tuple21 a e)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 a e))) (sort (tuple2 a1 e1) (t2tb2949 x))))

(declare-fun tb2t2949 (uni) (tuple21 a e))

;; BridgeL
  (assert
  (forall ((i (tuple21 a e)))
  (! (= (tb2t2949 (t2tb2949 i)) i) :pattern ((t2tb2949 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 e1) j) (= (t2tb2949 (tb2t2949 j)) j)) :pattern (
  (t2tb2949 (tb2t2949 j))) )))

;; add_def1
  (assert
  (forall ((x (tuple21 a e)) (y (tuple21 a e)))
  (forall ((s (set (tuple21 a e))))
  (= (mem44 x (tb2t2943 (add (tuple2 a1 e1) (t2tb2949 y) (t2tb2943 s))))
  (or (= x y) (mem44 x s))))))

(declare-fun t2tb2955 (e) uni)

;; t2tb_sort
  (assert (forall ((x e)) (sort e1 (t2tb2955 x))))

(declare-fun tb2t2955 (uni) e)

;; BridgeL
  (assert
  (forall ((i e)) (! (= (tb2t2955 (t2tb2955 i)) i) :pattern ((t2tb2955 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort e1 j) (= (t2tb2955 (tb2t2955 j)) j)) :pattern ((t2tb2955
                                                              (tb2t2955 j))) )))

;; add_def1
  (assert
  (forall ((x e) (y e))
  (forall ((s (set e)))
  (= (mem36 x (tb2t2947 (add e1 (t2tb2955 y) (t2tb2947 s))))
  (or (= x y) (mem36 x s))))))

(declare-fun t2tb904 ((tuple21 a d)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 a d))) (sort (tuple2 a1 d1) (t2tb904 x))))

(declare-fun tb2t904 (uni) (tuple21 a d))

;; BridgeL
  (assert
  (forall ((i (tuple21 a d)))
  (! (= (tb2t904 (t2tb904 i)) i) :pattern ((t2tb904 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 d1) j) (= (t2tb904 (tb2t904 j)) j)) :pattern (
  (t2tb904 (tb2t904 j))) )))

;; add_def1
  (assert
  (forall ((x (tuple21 a d)) (y (tuple21 a d)))
  (forall ((s (set (tuple21 a d))))
  (= (mem32 x (tb2t903 (add (tuple2 a1 d1) (t2tb904 y) (t2tb903 s))))
  (or (= x y) (mem32 x s))))))

;; add_def1
  (assert
  (forall ((x (set (tuple21 b d))) (y (set (tuple21 b d))))
  (forall ((s (set (set (tuple21 b d)))))
  (= (mem33 x (tb2t906 (add (set1 (tuple2 b1 d1)) (t2tb687 y) (t2tb906 s))))
  (or (= x y) (mem33 x s))))))

(declare-fun t2tb692 ((tuple21 b d)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 b d))) (sort (tuple2 b1 d1) (t2tb692 x))))

(declare-fun tb2t692 (uni) (tuple21 b d))

;; BridgeL
  (assert
  (forall ((i (tuple21 b d)))
  (! (= (tb2t692 (t2tb692 i)) i) :pattern ((t2tb692 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 b1 d1) j) (= (t2tb692 (tb2t692 j)) j)) :pattern (
  (t2tb692 (tb2t692 j))) )))

;; add_def1
  (assert
  (forall ((x (tuple21 b d)) (y (tuple21 b d)))
  (forall ((s (set (tuple21 b d))))
  (= (mem23 x (tb2t687 (add (tuple2 b1 d1) (t2tb692 y) (t2tb687 s))))
  (or (= x y) (mem23 x s))))))

(declare-fun t2tb694 (d) uni)

;; t2tb_sort
  (assert (forall ((x d)) (sort d1 (t2tb694 x))))

(declare-fun tb2t694 (uni) d)

;; BridgeL
  (assert
  (forall ((i d)) (! (= (tb2t694 (t2tb694 i)) i) :pattern ((t2tb694 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort d1 j) (= (t2tb694 (tb2t694 j)) j)) :pattern ((t2tb694
                                                            (tb2t694 j))) )))

;; add_def1
  (assert
  (forall ((x d) (y d))
  (forall ((s (set d)))
  (= (mem20 x (tb2t690 (add d1 (t2tb694 y) (t2tb690 s))))
  (or (= x y) (mem20 x s))))))

(declare-fun t2tb260 ((tuple21 a (tuple21 b c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (tuple21 b c)))) (sort (tuple2 a1 (tuple2 b1 c1))
  (t2tb260 x))))

(declare-fun tb2t260 (uni) (tuple21 a (tuple21 b c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (tuple21 b c))))
  (! (= (tb2t260 (t2tb260 i)) i) :pattern ((t2tb260 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (tuple2 b1 c1)) j) (= (t2tb260 (tb2t260 j)) j)) :pattern (
  (t2tb260 (tb2t260 j))) )))

;; add_def1
  (assert
  (forall ((x (tuple21 a (tuple21 b c))) (y (tuple21 a (tuple21 b c))))
  (forall ((s (set (tuple21 a (tuple21 b c)))))
  (= (mem14 x
  (tb2t261 (add (tuple2 a1 (tuple2 b1 c1)) (t2tb260 y) (t2tb261 s))))
  (or (= x y) (mem14 x s))))))

;; add_def1
  (assert
  (forall ((x (set (tuple21 a c))) (y (set (tuple21 a c))))
  (forall ((s (set (set (tuple21 a c)))))
  (= (mem11 x (tb2t128 (add (set1 (tuple2 a1 c1)) (t2tb129 y) (t2tb128 s))))
  (or (= x y) (mem11 x s))))))

(declare-fun t2tb133 ((tuple21 a c)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 a c))) (sort (tuple2 a1 c1) (t2tb133 x))))

(declare-fun tb2t133 (uni) (tuple21 a c))

;; BridgeL
  (assert
  (forall ((i (tuple21 a c)))
  (! (= (tb2t133 (t2tb133 i)) i) :pattern ((t2tb133 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 c1) j) (= (t2tb133 (tb2t133 j)) j)) :pattern (
  (t2tb133 (tb2t133 j))) )))

;; add_def1
  (assert
  (forall ((x (tuple21 a c)) (y (tuple21 a c)))
  (forall ((s (set (tuple21 a c))))
  (= (mem10 x (tb2t129 (add (tuple2 a1 c1) (t2tb133 y) (t2tb129 s))))
  (or (= x y) (mem10 x s))))))

(declare-fun t2tb135 (c) uni)

;; t2tb_sort
  (assert (forall ((x c)) (sort c1 (t2tb135 x))))

(declare-fun tb2t135 (uni) c)

;; BridgeL
  (assert
  (forall ((i c)) (! (= (tb2t135 (t2tb135 i)) i) :pattern ((t2tb135 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort c1 j) (= (t2tb135 (tb2t135 j)) j)) :pattern ((t2tb135
                                                            (tb2t135 j))) )))

;; add_def1
  (assert
  (forall ((x c) (y c))
  (forall ((s (set c)))
  (= (mem7 x (tb2t132 (add c1 (t2tb135 y) (t2tb132 s))))
  (or (= x y) (mem7 x s))))))

;; add_def1
  (assert
  (forall ((x (set (tuple21 a b))) (y (set (tuple21 a b))))
  (forall ((s (set (set (tuple21 a b)))))
  (= (mem4 x (tb2t10 (add (set1 (tuple2 a1 b1)) (t2tb11 y) (t2tb10 s))))
  (or (= x y) (mem4 x s))))))

(declare-fun t2tb13 ((tuple21 a b)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 a b))) (sort (tuple2 a1 b1) (t2tb13 x))))

(declare-fun tb2t13 (uni) (tuple21 a b))

;; BridgeL
  (assert
  (forall ((i (tuple21 a b)))
  (! (= (tb2t13 (t2tb13 i)) i) :pattern ((t2tb13 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 b1) j) (= (t2tb13 (tb2t13 j)) j)) :pattern (
  (t2tb13 (tb2t13 j))) )))

;; add_def1
  (assert
  (forall ((x (tuple21 a b)) (y (tuple21 a b)))
  (forall ((s (set (tuple21 a b))))
  (= (mem3 x (tb2t11 (add (tuple2 a1 b1) (t2tb13 y) (t2tb11 s))))
  (or (= x y) (mem3 x s))))))

(declare-fun t2tb14 (b) uni)

;; t2tb_sort
  (assert (forall ((x b)) (sort b1 (t2tb14 x))))

(declare-fun tb2t14 (uni) b)

;; BridgeL
  (assert
  (forall ((i b)) (! (= (tb2t14 (t2tb14 i)) i) :pattern ((t2tb14 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort b1 j) (= (t2tb14 (tb2t14 j)) j)) :pattern ((t2tb14 (tb2t14 j))) )))

;; add_def1
  (assert
  (forall ((x b) (y b))
  (forall ((s (set b)))
  (= (mem2 x (tb2t12 (add b1 (t2tb14 y) (t2tb12 s))))
  (or (= x y) (mem2 x s))))))

(declare-fun t2tb2 (a) uni)

;; t2tb_sort
  (assert (forall ((x a)) (sort a1 (t2tb2 x))))

(declare-fun tb2t2 (uni) a)

;; BridgeL
  (assert (forall ((i a)) (! (= (tb2t2 (t2tb2 i)) i) :pattern ((t2tb2 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort a1 j) (= (t2tb2 (tb2t2 j)) j)) :pattern ((t2tb2 (tb2t2 j))) )))

;; add_def1
  (assert
  (forall ((x a) (y a))
  (forall ((s (set a)))
  (= (mem1 x (tb2t1 (add a1 (t2tb2 y) (t2tb1 s)))) (or (= x y) (mem1 x s))))))

;; add_def1
  (assert
  (forall ((a2 ty))
  (forall ((x uni) (y uni))
  (=> (sort a2 x)
  (=> (sort a2 y)
  (forall ((s uni)) (= (mem a2 x (add a2 y s)) (or (= x y) (mem a2 x s)))))))))

(declare-fun singleton (ty uni) uni)

;; singleton_sort
  (assert
  (forall ((a2 ty)) (forall ((x uni)) (sort (set1 a2) (singleton a2 x)))))

;; mem_singleton
  (assert
  (forall ((x (tuple21 (tuple21 b c) (tuple21 d e))) (y (tuple21 (tuple21 b
  c) (tuple21 d e))))
  (= (mem49 x
  (tb2t4102 (singleton (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (t2tb4104 y))))
  (= x y))))

;; mem_singleton
  (assert
  (forall ((x (tuple21 a (tuple21 d e))) (y (tuple21 a (tuple21 d e))))
  (= (mem48 x (tb2t4103 (singleton (tuple2 a1 (tuple2 d1 e1)) (t2tb4105 y))))
  (= x y))))

;; mem_singleton
  (assert
  (forall ((x (set (tuple21 c e))) (y (set (tuple21 c e))))
  (= (mem47 x (tb2t3854 (singleton (set1 (tuple2 c1 e1)) (t2tb3478 y))))
  (= x y))))

;; mem_singleton
  (assert
  (forall ((x (tuple21 c e)) (y (tuple21 c e)))
  (= (mem46 x (tb2t3478 (singleton (tuple2 c1 e1) (t2tb3479 y)))) (= x y))))

;; mem_singleton
  (assert
  (forall ((x (tuple21 a e)) (y (tuple21 a e)))
  (= (mem44 x (tb2t2943 (singleton (tuple2 a1 e1) (t2tb2949 y)))) (= x y))))

;; mem_singleton
  (assert
  (forall ((x e) (y e))
  (= (mem36 x (tb2t2947 (singleton e1 (t2tb2955 y)))) (= x y))))

;; mem_singleton
  (assert
  (forall ((x (tuple21 a d)) (y (tuple21 a d)))
  (= (mem32 x (tb2t903 (singleton (tuple2 a1 d1) (t2tb904 y)))) (= x y))))

;; mem_singleton
  (assert
  (forall ((x (set (tuple21 b d))) (y (set (tuple21 b d))))
  (= (mem33 x (tb2t906 (singleton (set1 (tuple2 b1 d1)) (t2tb687 y))))
  (= x y))))

;; mem_singleton
  (assert
  (forall ((x (tuple21 b d)) (y (tuple21 b d)))
  (= (mem23 x (tb2t687 (singleton (tuple2 b1 d1) (t2tb692 y)))) (= x y))))

;; mem_singleton
  (assert
  (forall ((x d) (y d))
  (= (mem20 x (tb2t690 (singleton d1 (t2tb694 y)))) (= x y))))

;; mem_singleton
  (assert
  (forall ((x (tuple21 a (tuple21 b c))) (y (tuple21 a (tuple21 b c))))
  (= (mem14 x (tb2t261 (singleton (tuple2 a1 (tuple2 b1 c1)) (t2tb260 y))))
  (= x y))))

;; mem_singleton
  (assert
  (forall ((x (set (tuple21 a c))) (y (set (tuple21 a c))))
  (= (mem11 x (tb2t128 (singleton (set1 (tuple2 a1 c1)) (t2tb129 y))))
  (= x y))))

;; mem_singleton
  (assert
  (forall ((x (tuple21 a c)) (y (tuple21 a c)))
  (= (mem10 x (tb2t129 (singleton (tuple2 a1 c1) (t2tb133 y)))) (= x y))))

;; mem_singleton
  (assert
  (forall ((x c) (y c))
  (= (mem7 x (tb2t132 (singleton c1 (t2tb135 y)))) (= x y))))

;; mem_singleton
  (assert
  (forall ((x (set (tuple21 a b))) (y (set (tuple21 a b))))
  (= (mem4 x (tb2t10 (singleton (set1 (tuple2 a1 b1)) (t2tb11 y)))) (= x y))))

;; mem_singleton
  (assert
  (forall ((x (tuple21 a b)) (y (tuple21 a b)))
  (= (mem3 x (tb2t11 (singleton (tuple2 a1 b1) (t2tb13 y)))) (= x y))))

;; mem_singleton
  (assert
  (forall ((x b) (y b))
  (= (mem2 x (tb2t12 (singleton b1 (t2tb14 y)))) (= x y))))

;; mem_singleton
  (assert
  (forall ((x a) (y a))
  (= (mem1 x (tb2t1 (singleton a1 (t2tb2 y)))) (= x y))))

;; mem_singleton
  (assert
  (forall ((a2 ty))
  (forall ((x uni) (y uni))
  (=> (sort a2 x) (=> (sort a2 y) (= (mem a2 x (singleton a2 y)) (= x y)))))))

(declare-fun remove (ty uni uni) uni)

;; remove_sort
  (assert
  (forall ((a2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 a2) (remove a2 x x1)))))

;; remove_def1
  (assert
  (forall ((x (tuple21 (tuple21 b c) (tuple21 d e))) (y (tuple21 (tuple21 b
  c) (tuple21 d e))) (s (set (tuple21 (tuple21 b c) (tuple21 d e)))))
  (= (mem49 x
  (tb2t4102
  (remove (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (t2tb4104 y) (t2tb4102 s))))
  (and (not (= x y)) (mem49 x s)))))

;; remove_def1
  (assert
  (forall ((x (tuple21 a (tuple21 d e))) (y (tuple21 a (tuple21 d e)))
  (s (set (tuple21 a (tuple21 d e)))))
  (= (mem48 x
  (tb2t4103 (remove (tuple2 a1 (tuple2 d1 e1)) (t2tb4105 y) (t2tb4103 s))))
  (and (not (= x y)) (mem48 x s)))))

;; remove_def1
  (assert
  (forall ((x (set (tuple21 c e))) (y (set (tuple21 c e)))
  (s (set (set (tuple21 c e)))))
  (= (mem47 x
  (tb2t3854 (remove (set1 (tuple2 c1 e1)) (t2tb3478 y) (t2tb3854 s))))
  (and (not (= x y)) (mem47 x s)))))

;; remove_def1
  (assert
  (forall ((x (tuple21 c e)) (y (tuple21 c e)) (s (set (tuple21 c e))))
  (= (mem46 x (tb2t3478 (remove (tuple2 c1 e1) (t2tb3479 y) (t2tb3478 s))))
  (and (not (= x y)) (mem46 x s)))))

;; remove_def1
  (assert
  (forall ((x (tuple21 a e)) (y (tuple21 a e)) (s (set (tuple21 a e))))
  (= (mem44 x (tb2t2943 (remove (tuple2 a1 e1) (t2tb2949 y) (t2tb2943 s))))
  (and (not (= x y)) (mem44 x s)))))

;; remove_def1
  (assert
  (forall ((x e) (y e) (s (set e)))
  (= (mem36 x (tb2t2947 (remove e1 (t2tb2955 y) (t2tb2947 s))))
  (and (not (= x y)) (mem36 x s)))))

;; remove_def1
  (assert
  (forall ((x (tuple21 a d)) (y (tuple21 a d)) (s (set (tuple21 a d))))
  (= (mem32 x (tb2t903 (remove (tuple2 a1 d1) (t2tb904 y) (t2tb903 s))))
  (and (not (= x y)) (mem32 x s)))))

;; remove_def1
  (assert
  (forall ((x (set (tuple21 b d))) (y (set (tuple21 b d)))
  (s (set (set (tuple21 b d)))))
  (= (mem33 x
  (tb2t906 (remove (set1 (tuple2 b1 d1)) (t2tb687 y) (t2tb906 s))))
  (and (not (= x y)) (mem33 x s)))))

;; remove_def1
  (assert
  (forall ((x (tuple21 b d)) (y (tuple21 b d)) (s (set (tuple21 b d))))
  (= (mem23 x (tb2t687 (remove (tuple2 b1 d1) (t2tb692 y) (t2tb687 s))))
  (and (not (= x y)) (mem23 x s)))))

;; remove_def1
  (assert
  (forall ((x d) (y d) (s (set d)))
  (= (mem20 x (tb2t690 (remove d1 (t2tb694 y) (t2tb690 s))))
  (and (not (= x y)) (mem20 x s)))))

;; remove_def1
  (assert
  (forall ((x (tuple21 a (tuple21 b c))) (y (tuple21 a (tuple21 b c)))
  (s (set (tuple21 a (tuple21 b c)))))
  (= (mem14 x
  (tb2t261 (remove (tuple2 a1 (tuple2 b1 c1)) (t2tb260 y) (t2tb261 s))))
  (and (not (= x y)) (mem14 x s)))))

;; remove_def1
  (assert
  (forall ((x (set (tuple21 a c))) (y (set (tuple21 a c)))
  (s (set (set (tuple21 a c)))))
  (= (mem11 x
  (tb2t128 (remove (set1 (tuple2 a1 c1)) (t2tb129 y) (t2tb128 s))))
  (and (not (= x y)) (mem11 x s)))))

;; remove_def1
  (assert
  (forall ((x (tuple21 a c)) (y (tuple21 a c)) (s (set (tuple21 a c))))
  (= (mem10 x (tb2t129 (remove (tuple2 a1 c1) (t2tb133 y) (t2tb129 s))))
  (and (not (= x y)) (mem10 x s)))))

;; remove_def1
  (assert
  (forall ((x c) (y c) (s (set c)))
  (= (mem7 x (tb2t132 (remove c1 (t2tb135 y) (t2tb132 s))))
  (and (not (= x y)) (mem7 x s)))))

;; remove_def1
  (assert
  (forall ((x (set (tuple21 a b))) (y (set (tuple21 a b)))
  (s (set (set (tuple21 a b)))))
  (= (mem4 x (tb2t10 (remove (set1 (tuple2 a1 b1)) (t2tb11 y) (t2tb10 s))))
  (and (not (= x y)) (mem4 x s)))))

;; remove_def1
  (assert
  (forall ((x (tuple21 a b)) (y (tuple21 a b)) (s (set (tuple21 a b))))
  (= (mem3 x (tb2t11 (remove (tuple2 a1 b1) (t2tb13 y) (t2tb11 s))))
  (and (not (= x y)) (mem3 x s)))))

;; remove_def1
  (assert
  (forall ((x b) (y b) (s (set b)))
  (= (mem2 x (tb2t12 (remove b1 (t2tb14 y) (t2tb12 s))))
  (and (not (= x y)) (mem2 x s)))))

;; remove_def1
  (assert
  (forall ((x a) (y a) (s (set a)))
  (= (mem1 x (tb2t1 (remove a1 (t2tb2 y) (t2tb1 s))))
  (and (not (= x y)) (mem1 x s)))))

;; remove_def1
  (assert
  (forall ((a2 ty))
  (forall ((x uni) (y uni) (s uni))
  (=> (sort a2 x)
  (=> (sort a2 y)
  (= (mem a2 x (remove a2 y s)) (and (not (= x y)) (mem a2 x s))))))))

(declare-fun all (ty) uni)

;; all_sort
  (assert (forall ((a2 ty)) (sort (set1 a2) (all a2))))

;; all_def
  (assert
  (forall ((x (tuple21 (tuple21 b c) (tuple21 d e)))) (mem49 x
  (tb2t4102 (all (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)))))))

;; all_def
  (assert
  (forall ((x (tuple21 a (tuple21 d e)))) (mem48 x
  (tb2t4103 (all (tuple2 a1 (tuple2 d1 e1)))))))

;; all_def
  (assert
  (forall ((x (set (tuple21 c e)))) (mem47 x
  (tb2t3854 (all (set1 (tuple2 c1 e1)))))))

;; all_def
  (assert
  (forall ((x (tuple21 c e))) (mem46 x (tb2t3478 (all (tuple2 c1 e1))))))

;; all_def
  (assert
  (forall ((x (tuple21 a e))) (mem44 x (tb2t2943 (all (tuple2 a1 e1))))))

;; all_def
  (assert (forall ((x e)) (mem36 x (tb2t2947 (all e1)))))

;; all_def
  (assert
  (forall ((x (tuple21 a d))) (mem32 x (tb2t903 (all (tuple2 a1 d1))))))

;; all_def
  (assert
  (forall ((x (set (tuple21 b d)))) (mem33 x
  (tb2t906 (all (set1 (tuple2 b1 d1)))))))

;; all_def
  (assert
  (forall ((x (tuple21 b d))) (mem23 x (tb2t687 (all (tuple2 b1 d1))))))

;; all_def
  (assert (forall ((x d)) (mem20 x (tb2t690 (all d1)))))

;; all_def
  (assert
  (forall ((x (tuple21 a (tuple21 b c)))) (mem14 x
  (tb2t261 (all (tuple2 a1 (tuple2 b1 c1)))))))

;; all_def
  (assert
  (forall ((x (set (tuple21 a c)))) (mem11 x
  (tb2t128 (all (set1 (tuple2 a1 c1)))))))

;; all_def
  (assert
  (forall ((x (tuple21 a c))) (mem10 x (tb2t129 (all (tuple2 a1 c1))))))

;; all_def
  (assert (forall ((x c)) (mem7 x (tb2t132 (all c1)))))

;; all_def
  (assert
  (forall ((x (set (tuple21 a b)))) (mem4 x
  (tb2t10 (all (set1 (tuple2 a1 b1)))))))

;; all_def
  (assert
  (forall ((x (tuple21 a b))) (mem3 x (tb2t11 (all (tuple2 a1 b1))))))

;; all_def
  (assert (forall ((x b)) (mem2 x (tb2t12 (all b1)))))

;; all_def
  (assert (forall ((x a)) (mem1 x (tb2t1 (all a1)))))

;; all_def
  (assert (forall ((a2 ty)) (forall ((x uni)) (mem a2 x (all a2)))))

(declare-fun union1 (ty uni uni) uni)

;; union_sort
  (assert
  (forall ((a2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 a2) (union1 a2 x x1)))))

;; mem_union
  (assert
  (forall ((s (set (tuple21 (tuple21 b c) (tuple21 d e))))
  (t (set (tuple21 (tuple21 b c) (tuple21 d e)))) (x (tuple21 (tuple21 b c)
  (tuple21 d e))))
  (= (mem49 x
  (tb2t4102
  (union1 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (t2tb4102 s) (t2tb4102 t))))
  (or (mem49 x s) (mem49 x t)))))

;; mem_union
  (assert
  (forall ((s (set (tuple21 a (tuple21 d e)))) (t (set (tuple21 a (tuple21 d
  e)))) (x (tuple21 a (tuple21 d e))))
  (= (mem48 x
  (tb2t4103 (union1 (tuple2 a1 (tuple2 d1 e1)) (t2tb4103 s) (t2tb4103 t))))
  (or (mem48 x s) (mem48 x t)))))

;; mem_union
  (assert
  (forall ((s (set (set (tuple21 c e)))) (t (set (set (tuple21 c e))))
  (x (set (tuple21 c e))))
  (= (mem47 x
  (tb2t3854 (union1 (set1 (tuple2 c1 e1)) (t2tb3854 s) (t2tb3854 t))))
  (or (mem47 x s) (mem47 x t)))))

;; mem_union
  (assert
  (forall ((s (set (tuple21 c e))) (t (set (tuple21 c e))) (x (tuple21 c e)))
  (= (mem46 x (tb2t3478 (union1 (tuple2 c1 e1) (t2tb3478 s) (t2tb3478 t))))
  (or (mem46 x s) (mem46 x t)))))

;; mem_union
  (assert
  (forall ((s (set (tuple21 a e))) (t (set (tuple21 a e))) (x (tuple21 a e)))
  (= (mem44 x (tb2t2943 (union1 (tuple2 a1 e1) (t2tb2943 s) (t2tb2943 t))))
  (or (mem44 x s) (mem44 x t)))))

;; mem_union
  (assert
  (forall ((s (set e)) (t (set e)) (x e))
  (= (mem36 x (tb2t2947 (union1 e1 (t2tb2947 s) (t2tb2947 t))))
  (or (mem36 x s) (mem36 x t)))))

;; mem_union
  (assert
  (forall ((s (set (tuple21 a d))) (t (set (tuple21 a d))) (x (tuple21 a d)))
  (= (mem32 x (tb2t903 (union1 (tuple2 a1 d1) (t2tb903 s) (t2tb903 t))))
  (or (mem32 x s) (mem32 x t)))))

;; mem_union
  (assert
  (forall ((s (set (set (tuple21 b d)))) (t (set (set (tuple21 b d))))
  (x (set (tuple21 b d))))
  (= (mem33 x
  (tb2t906 (union1 (set1 (tuple2 b1 d1)) (t2tb906 s) (t2tb906 t))))
  (or (mem33 x s) (mem33 x t)))))

;; mem_union
  (assert
  (forall ((s (set (tuple21 b d))) (t (set (tuple21 b d))) (x (tuple21 b d)))
  (= (mem23 x (tb2t687 (union1 (tuple2 b1 d1) (t2tb687 s) (t2tb687 t))))
  (or (mem23 x s) (mem23 x t)))))

;; mem_union
  (assert
  (forall ((s (set d)) (t (set d)) (x d))
  (= (mem20 x (tb2t690 (union1 d1 (t2tb690 s) (t2tb690 t))))
  (or (mem20 x s) (mem20 x t)))))

;; mem_union
  (assert
  (forall ((s (set (tuple21 a (tuple21 b c)))) (t (set (tuple21 a (tuple21 b
  c)))) (x (tuple21 a (tuple21 b c))))
  (= (mem14 x
  (tb2t261 (union1 (tuple2 a1 (tuple2 b1 c1)) (t2tb261 s) (t2tb261 t))))
  (or (mem14 x s) (mem14 x t)))))

;; mem_union
  (assert
  (forall ((s (set (set (tuple21 a c)))) (t (set (set (tuple21 a c))))
  (x (set (tuple21 a c))))
  (= (mem11 x
  (tb2t128 (union1 (set1 (tuple2 a1 c1)) (t2tb128 s) (t2tb128 t))))
  (or (mem11 x s) (mem11 x t)))))

;; mem_union
  (assert
  (forall ((s (set (tuple21 a c))) (t (set (tuple21 a c))) (x (tuple21 a c)))
  (= (mem10 x (tb2t129 (union1 (tuple2 a1 c1) (t2tb129 s) (t2tb129 t))))
  (or (mem10 x s) (mem10 x t)))))

;; mem_union
  (assert
  (forall ((s (set c)) (t (set c)) (x c))
  (= (mem7 x (tb2t132 (union1 c1 (t2tb132 s) (t2tb132 t))))
  (or (mem7 x s) (mem7 x t)))))

;; mem_union
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set (set (tuple21 a b))))
  (x (set (tuple21 a b))))
  (= (mem4 x (tb2t10 (union1 (set1 (tuple2 a1 b1)) (t2tb10 s) (t2tb10 t))))
  (or (mem4 x s) (mem4 x t)))))

;; mem_union
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (tuple21 a b))) (x (tuple21 a b)))
  (= (mem3 x (tb2t11 (union1 (tuple2 a1 b1) (t2tb11 s) (t2tb11 t))))
  (or (mem3 x s) (mem3 x t)))))

;; mem_union
  (assert
  (forall ((s (set b)) (t (set b)) (x b))
  (= (mem2 x (tb2t12 (union1 b1 (t2tb12 s) (t2tb12 t))))
  (or (mem2 x s) (mem2 x t)))))

;; mem_union
  (assert
  (forall ((s (set a)) (t (set a)) (x a))
  (= (mem1 x (tb2t1 (union1 a1 (t2tb1 s) (t2tb1 t))))
  (or (mem1 x s) (mem1 x t)))))

;; mem_union
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t uni) (x uni))
  (= (mem a2 x (union1 a2 s t)) (or (mem a2 x s) (mem a2 x t))))))

(declare-fun inter (ty uni uni) uni)

;; inter_sort
  (assert
  (forall ((a2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 a2) (inter a2 x x1)))))

;; mem_inter
  (assert
  (forall ((s (set (tuple21 (tuple21 b c) (tuple21 d e))))
  (t (set (tuple21 (tuple21 b c) (tuple21 d e)))) (x (tuple21 (tuple21 b c)
  (tuple21 d e))))
  (= (mem49 x
  (tb2t4102
  (inter (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (t2tb4102 s) (t2tb4102 t))))
  (and (mem49 x s) (mem49 x t)))))

;; mem_inter
  (assert
  (forall ((s (set (tuple21 a (tuple21 d e)))) (t (set (tuple21 a (tuple21 d
  e)))) (x (tuple21 a (tuple21 d e))))
  (= (mem48 x
  (tb2t4103 (inter (tuple2 a1 (tuple2 d1 e1)) (t2tb4103 s) (t2tb4103 t))))
  (and (mem48 x s) (mem48 x t)))))

;; mem_inter
  (assert
  (forall ((s (set (set (tuple21 c e)))) (t (set (set (tuple21 c e))))
  (x (set (tuple21 c e))))
  (= (mem47 x
  (tb2t3854 (inter (set1 (tuple2 c1 e1)) (t2tb3854 s) (t2tb3854 t))))
  (and (mem47 x s) (mem47 x t)))))

;; mem_inter
  (assert
  (forall ((s (set (tuple21 c e))) (t (set (tuple21 c e))) (x (tuple21 c e)))
  (= (mem46 x (tb2t3478 (inter (tuple2 c1 e1) (t2tb3478 s) (t2tb3478 t))))
  (and (mem46 x s) (mem46 x t)))))

;; mem_inter
  (assert
  (forall ((s (set (tuple21 a e))) (t (set (tuple21 a e))) (x (tuple21 a e)))
  (= (mem44 x (tb2t2943 (inter (tuple2 a1 e1) (t2tb2943 s) (t2tb2943 t))))
  (and (mem44 x s) (mem44 x t)))))

;; mem_inter
  (assert
  (forall ((s (set e)) (t (set e)) (x e))
  (= (mem36 x (tb2t2947 (inter e1 (t2tb2947 s) (t2tb2947 t))))
  (and (mem36 x s) (mem36 x t)))))

;; mem_inter
  (assert
  (forall ((s (set (tuple21 a d))) (t (set (tuple21 a d))) (x (tuple21 a d)))
  (= (mem32 x (tb2t903 (inter (tuple2 a1 d1) (t2tb903 s) (t2tb903 t))))
  (and (mem32 x s) (mem32 x t)))))

;; mem_inter
  (assert
  (forall ((s (set (set (tuple21 b d)))) (t (set (set (tuple21 b d))))
  (x (set (tuple21 b d))))
  (= (mem33 x
  (tb2t906 (inter (set1 (tuple2 b1 d1)) (t2tb906 s) (t2tb906 t))))
  (and (mem33 x s) (mem33 x t)))))

;; mem_inter
  (assert
  (forall ((s (set (tuple21 b d))) (t (set (tuple21 b d))) (x (tuple21 b d)))
  (= (mem23 x (tb2t687 (inter (tuple2 b1 d1) (t2tb687 s) (t2tb687 t))))
  (and (mem23 x s) (mem23 x t)))))

;; mem_inter
  (assert
  (forall ((s (set d)) (t (set d)) (x d))
  (= (mem20 x (tb2t690 (inter d1 (t2tb690 s) (t2tb690 t))))
  (and (mem20 x s) (mem20 x t)))))

;; mem_inter
  (assert
  (forall ((s (set (tuple21 a (tuple21 b c)))) (t (set (tuple21 a (tuple21 b
  c)))) (x (tuple21 a (tuple21 b c))))
  (= (mem14 x
  (tb2t261 (inter (tuple2 a1 (tuple2 b1 c1)) (t2tb261 s) (t2tb261 t))))
  (and (mem14 x s) (mem14 x t)))))

;; mem_inter
  (assert
  (forall ((s (set (set (tuple21 a c)))) (t (set (set (tuple21 a c))))
  (x (set (tuple21 a c))))
  (= (mem11 x
  (tb2t128 (inter (set1 (tuple2 a1 c1)) (t2tb128 s) (t2tb128 t))))
  (and (mem11 x s) (mem11 x t)))))

;; mem_inter
  (assert
  (forall ((s (set (tuple21 a c))) (t (set (tuple21 a c))) (x (tuple21 a c)))
  (= (mem10 x (tb2t129 (inter (tuple2 a1 c1) (t2tb129 s) (t2tb129 t))))
  (and (mem10 x s) (mem10 x t)))))

;; mem_inter
  (assert
  (forall ((s (set c)) (t (set c)) (x c))
  (= (mem7 x (tb2t132 (inter c1 (t2tb132 s) (t2tb132 t))))
  (and (mem7 x s) (mem7 x t)))))

;; mem_inter
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set (set (tuple21 a b))))
  (x (set (tuple21 a b))))
  (= (mem4 x (tb2t10 (inter (set1 (tuple2 a1 b1)) (t2tb10 s) (t2tb10 t))))
  (and (mem4 x s) (mem4 x t)))))

;; mem_inter
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (tuple21 a b))) (x (tuple21 a b)))
  (= (mem3 x (tb2t11 (inter (tuple2 a1 b1) (t2tb11 s) (t2tb11 t))))
  (and (mem3 x s) (mem3 x t)))))

;; mem_inter
  (assert
  (forall ((s (set b)) (t (set b)) (x b))
  (= (mem2 x (tb2t12 (inter b1 (t2tb12 s) (t2tb12 t))))
  (and (mem2 x s) (mem2 x t)))))

;; mem_inter
  (assert
  (forall ((s (set a)) (t (set a)) (x a))
  (= (mem1 x (tb2t1 (inter a1 (t2tb1 s) (t2tb1 t))))
  (and (mem1 x s) (mem1 x t)))))

;; mem_inter
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t uni) (x uni))
  (= (mem a2 x (inter a2 s t)) (and (mem a2 x s) (mem a2 x t))))))

(declare-fun diff (ty uni uni) uni)

;; diff_sort
  (assert
  (forall ((a2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 a2) (diff a2 x x1)))))

;; mem_diff
  (assert
  (forall ((s (set (tuple21 (tuple21 b c) (tuple21 d e))))
  (t (set (tuple21 (tuple21 b c) (tuple21 d e)))) (x (tuple21 (tuple21 b c)
  (tuple21 d e))))
  (= (mem49 x
  (tb2t4102
  (diff (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (t2tb4102 s) (t2tb4102 t))))
  (and (mem49 x s) (not (mem49 x t))))))

;; mem_diff
  (assert
  (forall ((s (set (tuple21 a (tuple21 d e)))) (t (set (tuple21 a (tuple21 d
  e)))) (x (tuple21 a (tuple21 d e))))
  (= (mem48 x
  (tb2t4103 (diff (tuple2 a1 (tuple2 d1 e1)) (t2tb4103 s) (t2tb4103 t))))
  (and (mem48 x s) (not (mem48 x t))))))

;; mem_diff
  (assert
  (forall ((s (set (set (tuple21 c e)))) (t (set (set (tuple21 c e))))
  (x (set (tuple21 c e))))
  (= (mem47 x
  (tb2t3854 (diff (set1 (tuple2 c1 e1)) (t2tb3854 s) (t2tb3854 t))))
  (and (mem47 x s) (not (mem47 x t))))))

;; mem_diff
  (assert
  (forall ((s (set (tuple21 c e))) (t (set (tuple21 c e))) (x (tuple21 c e)))
  (= (mem46 x (tb2t3478 (diff (tuple2 c1 e1) (t2tb3478 s) (t2tb3478 t))))
  (and (mem46 x s) (not (mem46 x t))))))

;; mem_diff
  (assert
  (forall ((s (set (tuple21 a e))) (t (set (tuple21 a e))) (x (tuple21 a e)))
  (= (mem44 x (tb2t2943 (diff (tuple2 a1 e1) (t2tb2943 s) (t2tb2943 t))))
  (and (mem44 x s) (not (mem44 x t))))))

;; mem_diff
  (assert
  (forall ((s (set e)) (t (set e)) (x e))
  (= (mem36 x (tb2t2947 (diff e1 (t2tb2947 s) (t2tb2947 t))))
  (and (mem36 x s) (not (mem36 x t))))))

;; mem_diff
  (assert
  (forall ((s (set (tuple21 a d))) (t (set (tuple21 a d))) (x (tuple21 a d)))
  (= (mem32 x (tb2t903 (diff (tuple2 a1 d1) (t2tb903 s) (t2tb903 t))))
  (and (mem32 x s) (not (mem32 x t))))))

;; mem_diff
  (assert
  (forall ((s (set (set (tuple21 b d)))) (t (set (set (tuple21 b d))))
  (x (set (tuple21 b d))))
  (= (mem33 x (tb2t906 (diff (set1 (tuple2 b1 d1)) (t2tb906 s) (t2tb906 t))))
  (and (mem33 x s) (not (mem33 x t))))))

;; mem_diff
  (assert
  (forall ((s (set (tuple21 b d))) (t (set (tuple21 b d))) (x (tuple21 b d)))
  (= (mem23 x (tb2t687 (diff (tuple2 b1 d1) (t2tb687 s) (t2tb687 t))))
  (and (mem23 x s) (not (mem23 x t))))))

;; mem_diff
  (assert
  (forall ((s (set d)) (t (set d)) (x d))
  (= (mem20 x (tb2t690 (diff d1 (t2tb690 s) (t2tb690 t))))
  (and (mem20 x s) (not (mem20 x t))))))

;; mem_diff
  (assert
  (forall ((s (set (tuple21 a (tuple21 b c)))) (t (set (tuple21 a (tuple21 b
  c)))) (x (tuple21 a (tuple21 b c))))
  (= (mem14 x
  (tb2t261 (diff (tuple2 a1 (tuple2 b1 c1)) (t2tb261 s) (t2tb261 t))))
  (and (mem14 x s) (not (mem14 x t))))))

;; mem_diff
  (assert
  (forall ((s (set (set (tuple21 a c)))) (t (set (set (tuple21 a c))))
  (x (set (tuple21 a c))))
  (= (mem11 x (tb2t128 (diff (set1 (tuple2 a1 c1)) (t2tb128 s) (t2tb128 t))))
  (and (mem11 x s) (not (mem11 x t))))))

;; mem_diff
  (assert
  (forall ((s (set (tuple21 a c))) (t (set (tuple21 a c))) (x (tuple21 a c)))
  (= (mem10 x (tb2t129 (diff (tuple2 a1 c1) (t2tb129 s) (t2tb129 t))))
  (and (mem10 x s) (not (mem10 x t))))))

;; mem_diff
  (assert
  (forall ((s (set c)) (t (set c)) (x c))
  (= (mem7 x (tb2t132 (diff c1 (t2tb132 s) (t2tb132 t))))
  (and (mem7 x s) (not (mem7 x t))))))

;; mem_diff
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set (set (tuple21 a b))))
  (x (set (tuple21 a b))))
  (= (mem4 x (tb2t10 (diff (set1 (tuple2 a1 b1)) (t2tb10 s) (t2tb10 t))))
  (and (mem4 x s) (not (mem4 x t))))))

;; mem_diff
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (tuple21 a b))) (x (tuple21 a b)))
  (= (mem3 x (tb2t11 (diff (tuple2 a1 b1) (t2tb11 s) (t2tb11 t))))
  (and (mem3 x s) (not (mem3 x t))))))

;; mem_diff
  (assert
  (forall ((s (set b)) (t (set b)) (x b))
  (= (mem2 x (tb2t12 (diff b1 (t2tb12 s) (t2tb12 t))))
  (and (mem2 x s) (not (mem2 x t))))))

;; mem_diff
  (assert
  (forall ((s (set a)) (t (set a)) (x a))
  (= (mem1 x (tb2t1 (diff a1 (t2tb1 s) (t2tb1 t))))
  (and (mem1 x s) (not (mem1 x t))))))

;; mem_diff
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t uni) (x uni))
  (= (mem a2 x (diff a2 s t)) (and (mem a2 x s) (not (mem a2 x t)))))))

(declare-fun Tuple2 (ty ty uni uni) uni)

;; Tuple2_sort
  (assert
  (forall ((a2 ty) (a3 ty))
  (forall ((x uni) (x1 uni)) (sort (tuple2 a3 a2) (Tuple2 a3 a2 x x1)))))

(declare-fun Tuple2_proj_1 (ty ty uni) uni)

;; Tuple2_proj_1_sort
  (assert
  (forall ((a2 ty) (a3 ty))
  (forall ((x uni)) (sort a3 (Tuple2_proj_1 a3 a2 x)))))

;; Tuple2_proj_1_def
  (assert
  (forall ((a2 ty) (a3 ty))
  (forall ((u uni) (u1 uni))
  (=> (sort a3 u) (= (Tuple2_proj_1 a3 a2 (Tuple2 a3 a2 u u1)) u)))))

(declare-fun Tuple2_proj_2 (ty ty uni) uni)

;; Tuple2_proj_2_sort
  (assert
  (forall ((a2 ty) (a3 ty))
  (forall ((x uni)) (sort a2 (Tuple2_proj_2 a3 a2 x)))))

;; Tuple2_proj_2_def
  (assert
  (forall ((a2 ty) (a3 ty))
  (forall ((u uni) (u1 uni))
  (=> (sort a2 u1) (= (Tuple2_proj_2 a3 a2 (Tuple2 a3 a2 u u1)) u1)))))

;; tuple2_inversion
  (assert
  (forall ((a2 ty) (a3 ty))
  (forall ((u uni))
  (=> (sort (tuple2 a3 a2) u)
  (= u (Tuple2 a3 a2 (Tuple2_proj_1 a3 a2 u) (Tuple2_proj_2 a3 a2 u)))))))

(declare-fun times (ty ty uni uni) uni)

;; times_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (tuple2 a2 b2)) (times b2 a2 x x1)))))

;; mem_times
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set (tuple21 (tuple21 b c) (tuple21 d e)))) (x uni)
  (y (tuple21 (tuple21 b c) (tuple21 d e))))
  (= (mem (tuple2 a2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)))
  (Tuple2 a2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) x (t2tb4104 y))
  (times (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) a2 s (t2tb4102 t)))
  (and (mem a2 x s) (mem49 y t))))))

;; mem_times
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set (tuple21 a (tuple21 d e)))) (x uni) (y (tuple21 a
  (tuple21 d e))))
  (= (mem (tuple2 a2 (tuple2 a1 (tuple2 d1 e1)))
  (Tuple2 a2 (tuple2 a1 (tuple2 d1 e1)) x (t2tb4105 y))
  (times (tuple2 a1 (tuple2 d1 e1)) a2 s (t2tb4103 t)))
  (and (mem a2 x s) (mem48 y t))))))

;; mem_times
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set (set (tuple21 c e)))) (x uni) (y (set (tuple21 c
  e))))
  (= (mem (tuple2 a2 (set1 (tuple2 c1 e1)))
  (Tuple2 a2 (set1 (tuple2 c1 e1)) x (t2tb3478 y))
  (times (set1 (tuple2 c1 e1)) a2 s (t2tb3854 t)))
  (and (mem a2 x s) (mem47 y t))))))

;; mem_times
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set (tuple21 c e))) (x uni) (y (tuple21 c e)))
  (= (mem (tuple2 a2 (tuple2 c1 e1))
  (Tuple2 a2 (tuple2 c1 e1) x (t2tb3479 y))
  (times (tuple2 c1 e1) a2 s (t2tb3478 t))) (and (mem a2 x s) (mem46 y t))))))

;; mem_times
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set (tuple21 a e))) (x uni) (y (tuple21 a e)))
  (= (mem (tuple2 a2 (tuple2 a1 e1))
  (Tuple2 a2 (tuple2 a1 e1) x (t2tb2949 y))
  (times (tuple2 a1 e1) a2 s (t2tb2943 t))) (and (mem a2 x s) (mem44 y t))))))

;; mem_times
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set e)) (x uni) (y e))
  (= (mem (tuple2 a2 e1) (Tuple2 a2 e1 x (t2tb2955 y))
  (times e1 a2 s (t2tb2947 t))) (and (mem a2 x s) (mem36 y t))))))

;; mem_times
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set (tuple21 a d))) (x uni) (y (tuple21 a d)))
  (= (mem (tuple2 a2 (tuple2 a1 d1)) (Tuple2 a2 (tuple2 a1 d1) x (t2tb904 y))
  (times (tuple2 a1 d1) a2 s (t2tb903 t))) (and (mem a2 x s) (mem32 y t))))))

;; mem_times
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set (set (tuple21 b d)))) (x uni) (y (set (tuple21 b
  d))))
  (= (mem (tuple2 a2 (set1 (tuple2 b1 d1)))
  (Tuple2 a2 (set1 (tuple2 b1 d1)) x (t2tb687 y))
  (times (set1 (tuple2 b1 d1)) a2 s (t2tb906 t)))
  (and (mem a2 x s) (mem33 y t))))))

;; mem_times
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set (tuple21 b d))) (x uni) (y (tuple21 b d)))
  (= (mem (tuple2 a2 (tuple2 b1 d1)) (Tuple2 a2 (tuple2 b1 d1) x (t2tb692 y))
  (times (tuple2 b1 d1) a2 s (t2tb687 t))) (and (mem a2 x s) (mem23 y t))))))

;; mem_times
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set d)) (x uni) (y d))
  (= (mem (tuple2 a2 d1) (Tuple2 a2 d1 x (t2tb694 y))
  (times d1 a2 s (t2tb690 t))) (and (mem a2 x s) (mem20 y t))))))

;; mem_times
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set (tuple21 a (tuple21 b c)))) (x uni) (y (tuple21 a
  (tuple21 b c))))
  (= (mem (tuple2 a2 (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 a2 (tuple2 a1 (tuple2 b1 c1)) x (t2tb260 y))
  (times (tuple2 a1 (tuple2 b1 c1)) a2 s (t2tb261 t)))
  (and (mem a2 x s) (mem14 y t))))))

;; mem_times
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set (set (tuple21 a c)))) (x uni) (y (set (tuple21 a
  c))))
  (= (mem (tuple2 a2 (set1 (tuple2 a1 c1)))
  (Tuple2 a2 (set1 (tuple2 a1 c1)) x (t2tb129 y))
  (times (set1 (tuple2 a1 c1)) a2 s (t2tb128 t)))
  (and (mem a2 x s) (mem11 y t))))))

;; mem_times
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set (tuple21 a c))) (x uni) (y (tuple21 a c)))
  (= (mem (tuple2 a2 (tuple2 a1 c1)) (Tuple2 a2 (tuple2 a1 c1) x (t2tb133 y))
  (times (tuple2 a1 c1) a2 s (t2tb129 t))) (and (mem a2 x s) (mem10 y t))))))

;; mem_times
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set c)) (x uni) (y c))
  (= (mem (tuple2 a2 c1) (Tuple2 a2 c1 x (t2tb135 y))
  (times c1 a2 s (t2tb132 t))) (and (mem a2 x s) (mem7 y t))))))

;; mem_times
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set (set (tuple21 a b)))) (x uni) (y (set (tuple21 a
  b))))
  (= (mem (tuple2 a2 (set1 (tuple2 a1 b1)))
  (Tuple2 a2 (set1 (tuple2 a1 b1)) x (t2tb11 y))
  (times (set1 (tuple2 a1 b1)) a2 s (t2tb10 t)))
  (and (mem a2 x s) (mem4 y t))))))

;; mem_times
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set (tuple21 a b))) (x uni) (y (tuple21 a b)))
  (= (mem (tuple2 a2 (tuple2 a1 b1)) (Tuple2 a2 (tuple2 a1 b1) x (t2tb13 y))
  (times (tuple2 a1 b1) a2 s (t2tb11 t))) (and (mem a2 x s) (mem3 y t))))))

;; mem_times
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set b)) (x uni) (y b))
  (= (mem (tuple2 a2 b1) (Tuple2 a2 b1 x (t2tb14 y))
  (times b1 a2 s (t2tb12 t))) (and (mem a2 x s) (mem2 y t))))))

;; mem_times
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set a)) (x uni) (y a))
  (= (mem (tuple2 a2 a1) (Tuple2 a2 a1 x (t2tb2 y))
  (times a1 a2 s (t2tb1 t))) (and (mem a2 x s) (mem1 y t))))))

(declare-fun t2tb4106 ((set (tuple21 (tuple21 (tuple21 b c) (tuple21 d e))
  (tuple21 (tuple21 b c) (tuple21 d e))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 b c) (tuple21 d e))
  (tuple21 (tuple21 b c) (tuple21 d e)))))) (sort
  (set1
  (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1))
  (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)))) (t2tb4106 x))))

(declare-fun tb2t4106 (uni) (set (tuple21 (tuple21 (tuple21 b c) (tuple21 d
  e)) (tuple21 (tuple21 b c) (tuple21 d e)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 b c) (tuple21 d e))
  (tuple21 (tuple21 b c) (tuple21 d e))))))
  (! (= (tb2t4106 (t2tb4106 i)) i) :pattern ((t2tb4106 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1))
     (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)))) j)
     (= (t2tb4106 (tb2t4106 j)) j)) :pattern ((t2tb4106 (tb2t4106 j))) )))

(declare-fun t2tb4107 ((tuple21 (tuple21 (tuple21 b c) (tuple21 d e))
  (tuple21 (tuple21 b c) (tuple21 d e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 b c) (tuple21 d e))
  (tuple21 (tuple21 b c) (tuple21 d e))))) (sort
  (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1))
  (tuple2 (tuple2 b1 c1) (tuple2 d1 e1))) (t2tb4107 x))))

(declare-fun tb2t4107 (uni) (tuple21 (tuple21 (tuple21 b c) (tuple21 d e))
  (tuple21 (tuple21 b c) (tuple21 d e))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 b c) (tuple21 d e))
  (tuple21 (tuple21 b c) (tuple21 d e)))))
  (! (= (tb2t4107 (t2tb4107 i)) i) :pattern ((t2tb4107 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1))
     (tuple2 (tuple2 b1 c1) (tuple2 d1 e1))) j)
     (= (t2tb4107 (tb2t4107 j)) j)) :pattern ((t2tb4107 (tb2t4107 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 (tuple21 b c) (tuple21 d e))))
  (t (set (tuple21 (tuple21 b c) (tuple21 d e)))) (x (tuple21 (tuple21 b c)
  (tuple21 d e))) (y (tuple21 (tuple21 b c) (tuple21 d e))))
  (= (mem
  (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1))
  (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)))
  (Tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1))
  (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (t2tb4104 x) (t2tb4104 y))
  (times (tuple2 (tuple2 b1 c1) (tuple2 d1 e1))
  (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (t2tb4102 s) (t2tb4102 t)))
  (and (mem49 x s) (mem49 y t)))))

(declare-fun t2tb4108 ((set (tuple21 (tuple21 (tuple21 b c) (tuple21 d e))
  (tuple21 a (tuple21 d e))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 b c) (tuple21 d e)) (tuple21 a
  (tuple21 d e)))))) (sort
  (set1
  (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (tuple2 a1 (tuple2 d1 e1))))
  (t2tb4108 x))))

(declare-fun tb2t4108 (uni) (set (tuple21 (tuple21 (tuple21 b c) (tuple21 d
  e)) (tuple21 a (tuple21 d e)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 b c) (tuple21 d e)) (tuple21 a
  (tuple21 d e))))))
  (! (= (tb2t4108 (t2tb4108 i)) i) :pattern ((t2tb4108 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1))
     (tuple2 a1 (tuple2 d1 e1)))) j) (= (t2tb4108 (tb2t4108 j)) j)) :pattern (
  (t2tb4108 (tb2t4108 j))) )))

(declare-fun t2tb4109 ((tuple21 (tuple21 (tuple21 b c) (tuple21 d e))
  (tuple21 a (tuple21 d e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 b c) (tuple21 d e)) (tuple21 a
  (tuple21 d e))))) (sort
  (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (tuple2 a1 (tuple2 d1 e1)))
  (t2tb4109 x))))

(declare-fun tb2t4109 (uni) (tuple21 (tuple21 (tuple21 b c) (tuple21 d e))
  (tuple21 a (tuple21 d e))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 b c) (tuple21 d e)) (tuple21 a
  (tuple21 d e)))))
  (! (= (tb2t4109 (t2tb4109 i)) i) :pattern ((t2tb4109 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1))
     (tuple2 a1 (tuple2 d1 e1))) j) (= (t2tb4109 (tb2t4109 j)) j)) :pattern (
  (t2tb4109 (tb2t4109 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 (tuple21 b c) (tuple21 d e)))) (t (set (tuple21 a
  (tuple21 d e)))) (x (tuple21 (tuple21 b c) (tuple21 d e))) (y (tuple21 a
  (tuple21 d e))))
  (= (mem
  (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (tuple2 a1 (tuple2 d1 e1)))
  (Tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (tuple2 a1 (tuple2 d1 e1))
  (t2tb4104 x) (t2tb4105 y))
  (times (tuple2 a1 (tuple2 d1 e1)) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1))
  (t2tb4102 s) (t2tb4103 t))) (and (mem49 x s) (mem48 y t)))))

(declare-fun t2tb4110 ((set (tuple21 (tuple21 (tuple21 b c) (tuple21 d e))
  (set (tuple21 c e))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 b c) (tuple21 d e))
  (set (tuple21 c e)))))) (sort
  (set1
  (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (set1 (tuple2 c1 e1))))
  (t2tb4110 x))))

(declare-fun tb2t4110 (uni) (set (tuple21 (tuple21 (tuple21 b c) (tuple21 d
  e)) (set (tuple21 c e)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 b c) (tuple21 d e))
  (set (tuple21 c e))))))
  (! (= (tb2t4110 (t2tb4110 i)) i) :pattern ((t2tb4110 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (set1 (tuple2 c1 e1))))
     j) (= (t2tb4110 (tb2t4110 j)) j)) :pattern ((t2tb4110 (tb2t4110 j))) )))

(declare-fun t2tb4111 ((tuple21 (tuple21 (tuple21 b c) (tuple21 d e))
  (set (tuple21 c e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 b c) (tuple21 d e)) (set (tuple21 c
  e))))) (sort
  (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (set1 (tuple2 c1 e1)))
  (t2tb4111 x))))

(declare-fun tb2t4111 (uni) (tuple21 (tuple21 (tuple21 b c) (tuple21 d e))
  (set (tuple21 c e))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 b c) (tuple21 d e)) (set (tuple21 c
  e))))) (! (= (tb2t4111 (t2tb4111 i)) i) :pattern ((t2tb4111 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (set1 (tuple2 c1 e1))) j)
     (= (t2tb4111 (tb2t4111 j)) j)) :pattern ((t2tb4111 (tb2t4111 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 (tuple21 b c) (tuple21 d e))))
  (t (set (set (tuple21 c e)))) (x (tuple21 (tuple21 b c) (tuple21 d e)))
  (y (set (tuple21 c e))))
  (= (mem
  (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (set1 (tuple2 c1 e1)))
  (Tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (set1 (tuple2 c1 e1))
  (t2tb4104 x) (t2tb3478 y))
  (times (set1 (tuple2 c1 e1)) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1))
  (t2tb4102 s) (t2tb3854 t))) (and (mem49 x s) (mem47 y t)))))

(declare-fun t2tb4112 ((set (tuple21 (tuple21 (tuple21 b c) (tuple21 d e))
  (tuple21 c e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 b c) (tuple21 d e)) (tuple21 c
  e))))) (sort
  (set1 (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (tuple2 c1 e1)))
  (t2tb4112 x))))

(declare-fun tb2t4112 (uni) (set (tuple21 (tuple21 (tuple21 b c) (tuple21 d
  e)) (tuple21 c e))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 b c) (tuple21 d e)) (tuple21 c
  e))))) (! (= (tb2t4112 (t2tb4112 i)) i) :pattern ((t2tb4112 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (tuple2 c1 e1))) j)
     (= (t2tb4112 (tb2t4112 j)) j)) :pattern ((t2tb4112 (tb2t4112 j))) )))

(declare-fun t2tb4113 ((tuple21 (tuple21 (tuple21 b c) (tuple21 d e))
  (tuple21 c e))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 b c) (tuple21 d e)) (tuple21 c e))))
  (sort (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (tuple2 c1 e1))
  (t2tb4113 x))))

(declare-fun tb2t4113 (uni) (tuple21 (tuple21 (tuple21 b c) (tuple21 d e))
  (tuple21 c e)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 b c) (tuple21 d e)) (tuple21 c e))))
  (! (= (tb2t4113 (t2tb4113 i)) i) :pattern ((t2tb4113 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (tuple2 c1 e1))
     j) (= (t2tb4113 (tb2t4113 j)) j)) :pattern ((t2tb4113 (tb2t4113 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 (tuple21 b c) (tuple21 d e)))) (t (set (tuple21 c
  e))) (x (tuple21 (tuple21 b c) (tuple21 d e))) (y (tuple21 c e)))
  (= (mem (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (tuple2 c1 e1))
  (Tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (tuple2 c1 e1) (t2tb4104 x)
  (t2tb3479 y))
  (times (tuple2 c1 e1) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (t2tb4102 s)
  (t2tb3478 t))) (and (mem49 x s) (mem46 y t)))))

(declare-fun t2tb4114 ((set (tuple21 (tuple21 (tuple21 b c) (tuple21 d e))
  (tuple21 a e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 b c) (tuple21 d e)) (tuple21 a
  e))))) (sort
  (set1 (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (tuple2 a1 e1)))
  (t2tb4114 x))))

(declare-fun tb2t4114 (uni) (set (tuple21 (tuple21 (tuple21 b c) (tuple21 d
  e)) (tuple21 a e))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 b c) (tuple21 d e)) (tuple21 a
  e))))) (! (= (tb2t4114 (t2tb4114 i)) i) :pattern ((t2tb4114 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (tuple2 a1 e1))) j)
     (= (t2tb4114 (tb2t4114 j)) j)) :pattern ((t2tb4114 (tb2t4114 j))) )))

(declare-fun t2tb4115 ((tuple21 (tuple21 (tuple21 b c) (tuple21 d e))
  (tuple21 a e))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 b c) (tuple21 d e)) (tuple21 a e))))
  (sort (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (tuple2 a1 e1))
  (t2tb4115 x))))

(declare-fun tb2t4115 (uni) (tuple21 (tuple21 (tuple21 b c) (tuple21 d e))
  (tuple21 a e)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 b c) (tuple21 d e)) (tuple21 a e))))
  (! (= (tb2t4115 (t2tb4115 i)) i) :pattern ((t2tb4115 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (tuple2 a1 e1))
     j) (= (t2tb4115 (tb2t4115 j)) j)) :pattern ((t2tb4115 (tb2t4115 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 (tuple21 b c) (tuple21 d e)))) (t (set (tuple21 a
  e))) (x (tuple21 (tuple21 b c) (tuple21 d e))) (y (tuple21 a e)))
  (= (mem (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (tuple2 a1 e1))
  (Tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (tuple2 a1 e1) (t2tb4104 x)
  (t2tb2949 y))
  (times (tuple2 a1 e1) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (t2tb4102 s)
  (t2tb2943 t))) (and (mem49 x s) (mem44 y t)))))

(declare-fun t2tb4116 ((set (tuple21 (tuple21 (tuple21 b c) (tuple21 d e))
  e))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 b c) (tuple21 d e)) e)))) (sort
  (set1 (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) e1)) (t2tb4116 x))))

(declare-fun tb2t4116 (uni) (set (tuple21 (tuple21 (tuple21 b c) (tuple21 d
  e)) e)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 b c) (tuple21 d e)) e))))
  (! (= (tb2t4116 (t2tb4116 i)) i) :pattern ((t2tb4116 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) e1)) j)
     (= (t2tb4116 (tb2t4116 j)) j)) :pattern ((t2tb4116 (tb2t4116 j))) )))

(declare-fun t2tb4117 ((tuple21 (tuple21 (tuple21 b c) (tuple21 d e))
  e)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 b c) (tuple21 d e)) e))) (sort
  (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) e1) (t2tb4117 x))))

(declare-fun tb2t4117 (uni) (tuple21 (tuple21 (tuple21 b c) (tuple21 d e))
  e))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 b c) (tuple21 d e)) e)))
  (! (= (tb2t4117 (t2tb4117 i)) i) :pattern ((t2tb4117 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) e1) j)
     (= (t2tb4117 (tb2t4117 j)) j)) :pattern ((t2tb4117 (tb2t4117 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 (tuple21 b c) (tuple21 d e)))) (t (set e))
  (x (tuple21 (tuple21 b c) (tuple21 d e))) (y e))
  (= (mem (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) e1)
  (Tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) e1 (t2tb4104 x)
  (t2tb2955 y))
  (times e1 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (t2tb4102 s) (t2tb2947 t)))
  (and (mem49 x s) (mem36 y t)))))

(declare-fun t2tb4118 ((set (tuple21 (tuple21 (tuple21 b c) (tuple21 d e))
  (tuple21 a d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 b c) (tuple21 d e)) (tuple21 a
  d))))) (sort
  (set1 (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (tuple2 a1 d1)))
  (t2tb4118 x))))

(declare-fun tb2t4118 (uni) (set (tuple21 (tuple21 (tuple21 b c) (tuple21 d
  e)) (tuple21 a d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 b c) (tuple21 d e)) (tuple21 a
  d))))) (! (= (tb2t4118 (t2tb4118 i)) i) :pattern ((t2tb4118 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (tuple2 a1 d1))) j)
     (= (t2tb4118 (tb2t4118 j)) j)) :pattern ((t2tb4118 (tb2t4118 j))) )))

(declare-fun t2tb4119 ((tuple21 (tuple21 (tuple21 b c) (tuple21 d e))
  (tuple21 a d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 b c) (tuple21 d e)) (tuple21 a d))))
  (sort (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (tuple2 a1 d1))
  (t2tb4119 x))))

(declare-fun tb2t4119 (uni) (tuple21 (tuple21 (tuple21 b c) (tuple21 d e))
  (tuple21 a d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 b c) (tuple21 d e)) (tuple21 a d))))
  (! (= (tb2t4119 (t2tb4119 i)) i) :pattern ((t2tb4119 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (tuple2 a1 d1))
     j) (= (t2tb4119 (tb2t4119 j)) j)) :pattern ((t2tb4119 (tb2t4119 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 (tuple21 b c) (tuple21 d e)))) (t (set (tuple21 a
  d))) (x (tuple21 (tuple21 b c) (tuple21 d e))) (y (tuple21 a d)))
  (= (mem (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (tuple2 a1 d1))
  (Tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (tuple2 a1 d1) (t2tb4104 x)
  (t2tb904 y))
  (times (tuple2 a1 d1) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (t2tb4102 s)
  (t2tb903 t))) (and (mem49 x s) (mem32 y t)))))

(declare-fun t2tb4120 ((set (tuple21 (tuple21 (tuple21 b c) (tuple21 d e))
  (set (tuple21 b d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 b c) (tuple21 d e))
  (set (tuple21 b d)))))) (sort
  (set1
  (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (set1 (tuple2 b1 d1))))
  (t2tb4120 x))))

(declare-fun tb2t4120 (uni) (set (tuple21 (tuple21 (tuple21 b c) (tuple21 d
  e)) (set (tuple21 b d)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 b c) (tuple21 d e))
  (set (tuple21 b d))))))
  (! (= (tb2t4120 (t2tb4120 i)) i) :pattern ((t2tb4120 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (set1 (tuple2 b1 d1))))
     j) (= (t2tb4120 (tb2t4120 j)) j)) :pattern ((t2tb4120 (tb2t4120 j))) )))

(declare-fun t2tb4121 ((tuple21 (tuple21 (tuple21 b c) (tuple21 d e))
  (set (tuple21 b d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 b c) (tuple21 d e)) (set (tuple21 b
  d))))) (sort
  (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (set1 (tuple2 b1 d1)))
  (t2tb4121 x))))

(declare-fun tb2t4121 (uni) (tuple21 (tuple21 (tuple21 b c) (tuple21 d e))
  (set (tuple21 b d))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 b c) (tuple21 d e)) (set (tuple21 b
  d))))) (! (= (tb2t4121 (t2tb4121 i)) i) :pattern ((t2tb4121 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (set1 (tuple2 b1 d1))) j)
     (= (t2tb4121 (tb2t4121 j)) j)) :pattern ((t2tb4121 (tb2t4121 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 (tuple21 b c) (tuple21 d e))))
  (t (set (set (tuple21 b d)))) (x (tuple21 (tuple21 b c) (tuple21 d e)))
  (y (set (tuple21 b d))))
  (= (mem
  (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (set1 (tuple2 b1 d1)))
  (Tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (set1 (tuple2 b1 d1))
  (t2tb4104 x) (t2tb687 y))
  (times (set1 (tuple2 b1 d1)) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1))
  (t2tb4102 s) (t2tb906 t))) (and (mem49 x s) (mem33 y t)))))

(declare-fun t2tb4122 ((set (tuple21 (tuple21 (tuple21 b c) (tuple21 d e))
  (tuple21 b d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 b c) (tuple21 d e)) (tuple21 b
  d))))) (sort
  (set1 (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (tuple2 b1 d1)))
  (t2tb4122 x))))

(declare-fun tb2t4122 (uni) (set (tuple21 (tuple21 (tuple21 b c) (tuple21 d
  e)) (tuple21 b d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 b c) (tuple21 d e)) (tuple21 b
  d))))) (! (= (tb2t4122 (t2tb4122 i)) i) :pattern ((t2tb4122 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (tuple2 b1 d1))) j)
     (= (t2tb4122 (tb2t4122 j)) j)) :pattern ((t2tb4122 (tb2t4122 j))) )))

(declare-fun t2tb4123 ((tuple21 (tuple21 (tuple21 b c) (tuple21 d e))
  (tuple21 b d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 b c) (tuple21 d e)) (tuple21 b d))))
  (sort (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (tuple2 b1 d1))
  (t2tb4123 x))))

(declare-fun tb2t4123 (uni) (tuple21 (tuple21 (tuple21 b c) (tuple21 d e))
  (tuple21 b d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 b c) (tuple21 d e)) (tuple21 b d))))
  (! (= (tb2t4123 (t2tb4123 i)) i) :pattern ((t2tb4123 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (tuple2 b1 d1))
     j) (= (t2tb4123 (tb2t4123 j)) j)) :pattern ((t2tb4123 (tb2t4123 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 (tuple21 b c) (tuple21 d e)))) (t (set (tuple21 b
  d))) (x (tuple21 (tuple21 b c) (tuple21 d e))) (y (tuple21 b d)))
  (= (mem (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (tuple2 b1 d1))
  (Tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (tuple2 b1 d1) (t2tb4104 x)
  (t2tb692 y))
  (times (tuple2 b1 d1) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (t2tb4102 s)
  (t2tb687 t))) (and (mem49 x s) (mem23 y t)))))

(declare-fun t2tb4124 ((set (tuple21 (tuple21 (tuple21 b c) (tuple21 d e))
  d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 b c) (tuple21 d e)) d)))) (sort
  (set1 (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) d1)) (t2tb4124 x))))

(declare-fun tb2t4124 (uni) (set (tuple21 (tuple21 (tuple21 b c) (tuple21 d
  e)) d)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 b c) (tuple21 d e)) d))))
  (! (= (tb2t4124 (t2tb4124 i)) i) :pattern ((t2tb4124 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) d1)) j)
     (= (t2tb4124 (tb2t4124 j)) j)) :pattern ((t2tb4124 (tb2t4124 j))) )))

(declare-fun t2tb4125 ((tuple21 (tuple21 (tuple21 b c) (tuple21 d e))
  d)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 b c) (tuple21 d e)) d))) (sort
  (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) d1) (t2tb4125 x))))

(declare-fun tb2t4125 (uni) (tuple21 (tuple21 (tuple21 b c) (tuple21 d e))
  d))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 b c) (tuple21 d e)) d)))
  (! (= (tb2t4125 (t2tb4125 i)) i) :pattern ((t2tb4125 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) d1) j)
     (= (t2tb4125 (tb2t4125 j)) j)) :pattern ((t2tb4125 (tb2t4125 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 (tuple21 b c) (tuple21 d e)))) (t (set d))
  (x (tuple21 (tuple21 b c) (tuple21 d e))) (y d))
  (= (mem (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) d1)
  (Tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) d1 (t2tb4104 x) (t2tb694 y))
  (times d1 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (t2tb4102 s) (t2tb690 t)))
  (and (mem49 x s) (mem20 y t)))))

(declare-fun t2tb4126 ((set (tuple21 (tuple21 (tuple21 b c) (tuple21 d e))
  (tuple21 a (tuple21 b c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 b c) (tuple21 d e)) (tuple21 a
  (tuple21 b c)))))) (sort
  (set1
  (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (tuple2 a1 (tuple2 b1 c1))))
  (t2tb4126 x))))

(declare-fun tb2t4126 (uni) (set (tuple21 (tuple21 (tuple21 b c) (tuple21 d
  e)) (tuple21 a (tuple21 b c)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 b c) (tuple21 d e)) (tuple21 a
  (tuple21 b c))))))
  (! (= (tb2t4126 (t2tb4126 i)) i) :pattern ((t2tb4126 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1))
     (tuple2 a1 (tuple2 b1 c1)))) j) (= (t2tb4126 (tb2t4126 j)) j)) :pattern (
  (t2tb4126 (tb2t4126 j))) )))

(declare-fun t2tb4127 ((tuple21 (tuple21 (tuple21 b c) (tuple21 d e))
  (tuple21 a (tuple21 b c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 b c) (tuple21 d e)) (tuple21 a
  (tuple21 b c))))) (sort
  (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (tuple2 a1 (tuple2 b1 c1)))
  (t2tb4127 x))))

(declare-fun tb2t4127 (uni) (tuple21 (tuple21 (tuple21 b c) (tuple21 d e))
  (tuple21 a (tuple21 b c))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 b c) (tuple21 d e)) (tuple21 a
  (tuple21 b c)))))
  (! (= (tb2t4127 (t2tb4127 i)) i) :pattern ((t2tb4127 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1))
     (tuple2 a1 (tuple2 b1 c1))) j) (= (t2tb4127 (tb2t4127 j)) j)) :pattern (
  (t2tb4127 (tb2t4127 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 (tuple21 b c) (tuple21 d e)))) (t (set (tuple21 a
  (tuple21 b c)))) (x (tuple21 (tuple21 b c) (tuple21 d e))) (y (tuple21 a
  (tuple21 b c))))
  (= (mem
  (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (tuple2 a1 (tuple2 b1 c1))
  (t2tb4104 x) (t2tb260 y))
  (times (tuple2 a1 (tuple2 b1 c1)) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1))
  (t2tb4102 s) (t2tb261 t))) (and (mem49 x s) (mem14 y t)))))

(declare-fun t2tb4128 ((set (tuple21 (tuple21 (tuple21 b c) (tuple21 d e))
  (set (tuple21 a c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 b c) (tuple21 d e))
  (set (tuple21 a c)))))) (sort
  (set1
  (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (set1 (tuple2 a1 c1))))
  (t2tb4128 x))))

(declare-fun tb2t4128 (uni) (set (tuple21 (tuple21 (tuple21 b c) (tuple21 d
  e)) (set (tuple21 a c)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 b c) (tuple21 d e))
  (set (tuple21 a c))))))
  (! (= (tb2t4128 (t2tb4128 i)) i) :pattern ((t2tb4128 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (set1 (tuple2 a1 c1))))
     j) (= (t2tb4128 (tb2t4128 j)) j)) :pattern ((t2tb4128 (tb2t4128 j))) )))

(declare-fun t2tb4129 ((tuple21 (tuple21 (tuple21 b c) (tuple21 d e))
  (set (tuple21 a c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 b c) (tuple21 d e)) (set (tuple21 a
  c))))) (sort
  (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (set1 (tuple2 a1 c1)))
  (t2tb4129 x))))

(declare-fun tb2t4129 (uni) (tuple21 (tuple21 (tuple21 b c) (tuple21 d e))
  (set (tuple21 a c))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 b c) (tuple21 d e)) (set (tuple21 a
  c))))) (! (= (tb2t4129 (t2tb4129 i)) i) :pattern ((t2tb4129 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (set1 (tuple2 a1 c1))) j)
     (= (t2tb4129 (tb2t4129 j)) j)) :pattern ((t2tb4129 (tb2t4129 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 (tuple21 b c) (tuple21 d e))))
  (t (set (set (tuple21 a c)))) (x (tuple21 (tuple21 b c) (tuple21 d e)))
  (y (set (tuple21 a c))))
  (= (mem
  (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (set1 (tuple2 a1 c1)))
  (Tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (set1 (tuple2 a1 c1))
  (t2tb4104 x) (t2tb129 y))
  (times (set1 (tuple2 a1 c1)) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1))
  (t2tb4102 s) (t2tb128 t))) (and (mem49 x s) (mem11 y t)))))

(declare-fun t2tb4130 ((set (tuple21 (tuple21 (tuple21 b c) (tuple21 d e))
  (tuple21 a c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 b c) (tuple21 d e)) (tuple21 a
  c))))) (sort
  (set1 (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (tuple2 a1 c1)))
  (t2tb4130 x))))

(declare-fun tb2t4130 (uni) (set (tuple21 (tuple21 (tuple21 b c) (tuple21 d
  e)) (tuple21 a c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 b c) (tuple21 d e)) (tuple21 a
  c))))) (! (= (tb2t4130 (t2tb4130 i)) i) :pattern ((t2tb4130 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (tuple2 a1 c1))) j)
     (= (t2tb4130 (tb2t4130 j)) j)) :pattern ((t2tb4130 (tb2t4130 j))) )))

(declare-fun t2tb4131 ((tuple21 (tuple21 (tuple21 b c) (tuple21 d e))
  (tuple21 a c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 b c) (tuple21 d e)) (tuple21 a c))))
  (sort (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (tuple2 a1 c1))
  (t2tb4131 x))))

(declare-fun tb2t4131 (uni) (tuple21 (tuple21 (tuple21 b c) (tuple21 d e))
  (tuple21 a c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 b c) (tuple21 d e)) (tuple21 a c))))
  (! (= (tb2t4131 (t2tb4131 i)) i) :pattern ((t2tb4131 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (tuple2 a1 c1))
     j) (= (t2tb4131 (tb2t4131 j)) j)) :pattern ((t2tb4131 (tb2t4131 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 (tuple21 b c) (tuple21 d e)))) (t (set (tuple21 a
  c))) (x (tuple21 (tuple21 b c) (tuple21 d e))) (y (tuple21 a c)))
  (= (mem (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (tuple2 a1 c1))
  (Tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (tuple2 a1 c1) (t2tb4104 x)
  (t2tb133 y))
  (times (tuple2 a1 c1) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (t2tb4102 s)
  (t2tb129 t))) (and (mem49 x s) (mem10 y t)))))

(declare-fun t2tb4132 ((set (tuple21 (tuple21 (tuple21 b c) (tuple21 d e))
  c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 b c) (tuple21 d e)) c)))) (sort
  (set1 (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) c1)) (t2tb4132 x))))

(declare-fun tb2t4132 (uni) (set (tuple21 (tuple21 (tuple21 b c) (tuple21 d
  e)) c)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 b c) (tuple21 d e)) c))))
  (! (= (tb2t4132 (t2tb4132 i)) i) :pattern ((t2tb4132 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) c1)) j)
     (= (t2tb4132 (tb2t4132 j)) j)) :pattern ((t2tb4132 (tb2t4132 j))) )))

(declare-fun t2tb4133 ((tuple21 (tuple21 (tuple21 b c) (tuple21 d e))
  c)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 b c) (tuple21 d e)) c))) (sort
  (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) c1) (t2tb4133 x))))

(declare-fun tb2t4133 (uni) (tuple21 (tuple21 (tuple21 b c) (tuple21 d e))
  c))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 b c) (tuple21 d e)) c)))
  (! (= (tb2t4133 (t2tb4133 i)) i) :pattern ((t2tb4133 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) c1) j)
     (= (t2tb4133 (tb2t4133 j)) j)) :pattern ((t2tb4133 (tb2t4133 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 (tuple21 b c) (tuple21 d e)))) (t (set c))
  (x (tuple21 (tuple21 b c) (tuple21 d e))) (y c))
  (= (mem (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) c1)
  (Tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) c1 (t2tb4104 x) (t2tb135 y))
  (times c1 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (t2tb4102 s) (t2tb132 t)))
  (and (mem49 x s) (mem7 y t)))))

(declare-fun t2tb4134 ((set (tuple21 (tuple21 (tuple21 b c) (tuple21 d e))
  (set (tuple21 a b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 b c) (tuple21 d e))
  (set (tuple21 a b)))))) (sort
  (set1
  (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (set1 (tuple2 a1 b1))))
  (t2tb4134 x))))

(declare-fun tb2t4134 (uni) (set (tuple21 (tuple21 (tuple21 b c) (tuple21 d
  e)) (set (tuple21 a b)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 b c) (tuple21 d e))
  (set (tuple21 a b))))))
  (! (= (tb2t4134 (t2tb4134 i)) i) :pattern ((t2tb4134 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (set1 (tuple2 a1 b1))))
     j) (= (t2tb4134 (tb2t4134 j)) j)) :pattern ((t2tb4134 (tb2t4134 j))) )))

(declare-fun t2tb4135 ((tuple21 (tuple21 (tuple21 b c) (tuple21 d e))
  (set (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 b c) (tuple21 d e)) (set (tuple21 a
  b))))) (sort
  (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (set1 (tuple2 a1 b1)))
  (t2tb4135 x))))

(declare-fun tb2t4135 (uni) (tuple21 (tuple21 (tuple21 b c) (tuple21 d e))
  (set (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 b c) (tuple21 d e)) (set (tuple21 a
  b))))) (! (= (tb2t4135 (t2tb4135 i)) i) :pattern ((t2tb4135 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (set1 (tuple2 a1 b1))) j)
     (= (t2tb4135 (tb2t4135 j)) j)) :pattern ((t2tb4135 (tb2t4135 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 (tuple21 b c) (tuple21 d e))))
  (t (set (set (tuple21 a b)))) (x (tuple21 (tuple21 b c) (tuple21 d e)))
  (y (set (tuple21 a b))))
  (= (mem
  (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (set1 (tuple2 a1 b1)))
  (Tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (set1 (tuple2 a1 b1))
  (t2tb4104 x) (t2tb11 y))
  (times (set1 (tuple2 a1 b1)) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1))
  (t2tb4102 s) (t2tb10 t))) (and (mem49 x s) (mem4 y t)))))

(declare-fun t2tb4136 ((set (tuple21 (tuple21 (tuple21 b c) (tuple21 d e))
  (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 b c) (tuple21 d e)) (tuple21 a
  b))))) (sort
  (set1 (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (tuple2 a1 b1)))
  (t2tb4136 x))))

(declare-fun tb2t4136 (uni) (set (tuple21 (tuple21 (tuple21 b c) (tuple21 d
  e)) (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 b c) (tuple21 d e)) (tuple21 a
  b))))) (! (= (tb2t4136 (t2tb4136 i)) i) :pattern ((t2tb4136 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (tuple2 a1 b1))) j)
     (= (t2tb4136 (tb2t4136 j)) j)) :pattern ((t2tb4136 (tb2t4136 j))) )))

(declare-fun t2tb4137 ((tuple21 (tuple21 (tuple21 b c) (tuple21 d e))
  (tuple21 a b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 b c) (tuple21 d e)) (tuple21 a b))))
  (sort (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (tuple2 a1 b1))
  (t2tb4137 x))))

(declare-fun tb2t4137 (uni) (tuple21 (tuple21 (tuple21 b c) (tuple21 d e))
  (tuple21 a b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 b c) (tuple21 d e)) (tuple21 a b))))
  (! (= (tb2t4137 (t2tb4137 i)) i) :pattern ((t2tb4137 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (tuple2 a1 b1))
     j) (= (t2tb4137 (tb2t4137 j)) j)) :pattern ((t2tb4137 (tb2t4137 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 (tuple21 b c) (tuple21 d e)))) (t (set (tuple21 a
  b))) (x (tuple21 (tuple21 b c) (tuple21 d e))) (y (tuple21 a b)))
  (= (mem (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (tuple2 a1 b1))
  (Tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (tuple2 a1 b1) (t2tb4104 x)
  (t2tb13 y))
  (times (tuple2 a1 b1) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (t2tb4102 s)
  (t2tb11 t))) (and (mem49 x s) (mem3 y t)))))

(declare-fun t2tb4138 ((set (tuple21 (tuple21 (tuple21 b c) (tuple21 d e))
  b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 b c) (tuple21 d e)) b)))) (sort
  (set1 (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) b1)) (t2tb4138 x))))

(declare-fun tb2t4138 (uni) (set (tuple21 (tuple21 (tuple21 b c) (tuple21 d
  e)) b)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 b c) (tuple21 d e)) b))))
  (! (= (tb2t4138 (t2tb4138 i)) i) :pattern ((t2tb4138 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) b1)) j)
     (= (t2tb4138 (tb2t4138 j)) j)) :pattern ((t2tb4138 (tb2t4138 j))) )))

(declare-fun t2tb4139 ((tuple21 (tuple21 (tuple21 b c) (tuple21 d e))
  b)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 b c) (tuple21 d e)) b))) (sort
  (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) b1) (t2tb4139 x))))

(declare-fun tb2t4139 (uni) (tuple21 (tuple21 (tuple21 b c) (tuple21 d e))
  b))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 b c) (tuple21 d e)) b)))
  (! (= (tb2t4139 (t2tb4139 i)) i) :pattern ((t2tb4139 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) b1) j)
     (= (t2tb4139 (tb2t4139 j)) j)) :pattern ((t2tb4139 (tb2t4139 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 (tuple21 b c) (tuple21 d e)))) (t (set b))
  (x (tuple21 (tuple21 b c) (tuple21 d e))) (y b))
  (= (mem (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) b1)
  (Tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) b1 (t2tb4104 x) (t2tb14 y))
  (times b1 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (t2tb4102 s) (t2tb12 t)))
  (and (mem49 x s) (mem2 y t)))))

(declare-fun t2tb4140 ((set (tuple21 (tuple21 (tuple21 b c) (tuple21 d e))
  a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 b c) (tuple21 d e)) a)))) (sort
  (set1 (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) a1)) (t2tb4140 x))))

(declare-fun tb2t4140 (uni) (set (tuple21 (tuple21 (tuple21 b c) (tuple21 d
  e)) a)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 b c) (tuple21 d e)) a))))
  (! (= (tb2t4140 (t2tb4140 i)) i) :pattern ((t2tb4140 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) a1)) j)
     (= (t2tb4140 (tb2t4140 j)) j)) :pattern ((t2tb4140 (tb2t4140 j))) )))

(declare-fun t2tb4141 ((tuple21 (tuple21 (tuple21 b c) (tuple21 d e))
  a)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 b c) (tuple21 d e)) a))) (sort
  (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) a1) (t2tb4141 x))))

(declare-fun tb2t4141 (uni) (tuple21 (tuple21 (tuple21 b c) (tuple21 d e))
  a))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 b c) (tuple21 d e)) a)))
  (! (= (tb2t4141 (t2tb4141 i)) i) :pattern ((t2tb4141 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) a1) j)
     (= (t2tb4141 (tb2t4141 j)) j)) :pattern ((t2tb4141 (tb2t4141 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 (tuple21 b c) (tuple21 d e)))) (t (set a))
  (x (tuple21 (tuple21 b c) (tuple21 d e))) (y a))
  (= (mem (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) a1)
  (Tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) a1 (t2tb4104 x) (t2tb2 y))
  (times a1 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (t2tb4102 s) (t2tb1 t)))
  (and (mem49 x s) (mem1 y t)))))

;; mem_times
  (assert
  (forall ((b2 ty))
  (forall ((s (set (tuple21 (tuple21 b c) (tuple21 d e)))) (t uni)
  (x (tuple21 (tuple21 b c) (tuple21 d e))) (y uni))
  (= (mem (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) b2)
  (Tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) b2 (t2tb4104 x) y)
  (times b2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (t2tb4102 s) t))
  (and (mem49 x s) (mem b2 y t))))))

(declare-fun t2tb4142 ((set (tuple21 (tuple21 a (tuple21 d e))
  (tuple21 (tuple21 b c) (tuple21 d e))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a (tuple21 d e)) (tuple21 (tuple21 b c)
  (tuple21 d e)))))) (sort
  (set1
  (tuple2 (tuple2 a1 (tuple2 d1 e1)) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1))))
  (t2tb4142 x))))

(declare-fun tb2t4142 (uni) (set (tuple21 (tuple21 a (tuple21 d e))
  (tuple21 (tuple21 b c) (tuple21 d e)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a (tuple21 d e)) (tuple21 (tuple21 b c)
  (tuple21 d e))))))
  (! (= (tb2t4142 (t2tb4142 i)) i) :pattern ((t2tb4142 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (tuple2 (tuple2 a1 (tuple2 d1 e1))
     (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)))) j)
     (= (t2tb4142 (tb2t4142 j)) j)) :pattern ((t2tb4142 (tb2t4142 j))) )))

(declare-fun t2tb4143 ((tuple21 (tuple21 a (tuple21 d e)) (tuple21 (tuple21 b
  c) (tuple21 d e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a (tuple21 d e)) (tuple21 (tuple21 b c)
  (tuple21 d e))))) (sort
  (tuple2 (tuple2 a1 (tuple2 d1 e1)) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)))
  (t2tb4143 x))))

(declare-fun tb2t4143 (uni) (tuple21 (tuple21 a (tuple21 d e))
  (tuple21 (tuple21 b c) (tuple21 d e))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a (tuple21 d e)) (tuple21 (tuple21 b c)
  (tuple21 d e)))))
  (! (= (tb2t4143 (t2tb4143 i)) i) :pattern ((t2tb4143 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (tuple2 (tuple2 a1 (tuple2 d1 e1))
     (tuple2 (tuple2 b1 c1) (tuple2 d1 e1))) j)
     (= (t2tb4143 (tb2t4143 j)) j)) :pattern ((t2tb4143 (tb2t4143 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a (tuple21 d e)))) (t (set (tuple21 (tuple21 b c)
  (tuple21 d e)))) (x (tuple21 a (tuple21 d e))) (y (tuple21 (tuple21 b c)
  (tuple21 d e))))
  (= (mem
  (tuple2 (tuple2 a1 (tuple2 d1 e1)) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)))
  (Tuple2 (tuple2 a1 (tuple2 d1 e1)) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1))
  (t2tb4105 x) (t2tb4104 y))
  (times (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (tuple2 a1 (tuple2 d1 e1))
  (t2tb4103 s) (t2tb4102 t))) (and (mem48 x s) (mem49 y t)))))

(declare-fun t2tb4144 ((set (tuple21 (tuple21 a (tuple21 d e)) (tuple21 a
  (tuple21 d e))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a (tuple21 d e)) (tuple21 a (tuple21 d
  e)))))) (sort
  (set1 (tuple2 (tuple2 a1 (tuple2 d1 e1)) (tuple2 a1 (tuple2 d1 e1))))
  (t2tb4144 x))))

(declare-fun tb2t4144 (uni) (set (tuple21 (tuple21 a (tuple21 d e))
  (tuple21 a (tuple21 d e)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a (tuple21 d e)) (tuple21 a (tuple21 d
  e)))))) (! (= (tb2t4144 (t2tb4144 i)) i) :pattern ((t2tb4144 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 a1 (tuple2 d1 e1)) (tuple2 a1 (tuple2 d1 e1)))) j)
     (= (t2tb4144 (tb2t4144 j)) j)) :pattern ((t2tb4144 (tb2t4144 j))) )))

(declare-fun t2tb4145 ((tuple21 (tuple21 a (tuple21 d e)) (tuple21 a
  (tuple21 d e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a (tuple21 d e)) (tuple21 a (tuple21 d e)))))
  (sort (tuple2 (tuple2 a1 (tuple2 d1 e1)) (tuple2 a1 (tuple2 d1 e1)))
  (t2tb4145 x))))

(declare-fun tb2t4145 (uni) (tuple21 (tuple21 a (tuple21 d e)) (tuple21 a
  (tuple21 d e))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a (tuple21 d e)) (tuple21 a (tuple21 d e)))))
  (! (= (tb2t4145 (t2tb4145 i)) i) :pattern ((t2tb4145 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 (tuple2 d1 e1)) (tuple2 a1 (tuple2 d1 e1)))
     j) (= (t2tb4145 (tb2t4145 j)) j)) :pattern ((t2tb4145 (tb2t4145 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a (tuple21 d e)))) (t (set (tuple21 a (tuple21 d
  e)))) (x (tuple21 a (tuple21 d e))) (y (tuple21 a (tuple21 d e))))
  (= (mem (tuple2 (tuple2 a1 (tuple2 d1 e1)) (tuple2 a1 (tuple2 d1 e1)))
  (Tuple2 (tuple2 a1 (tuple2 d1 e1)) (tuple2 a1 (tuple2 d1 e1)) (t2tb4105 x)
  (t2tb4105 y))
  (times (tuple2 a1 (tuple2 d1 e1)) (tuple2 a1 (tuple2 d1 e1)) (t2tb4103 s)
  (t2tb4103 t))) (and (mem48 x s) (mem48 y t)))))

(declare-fun t2tb4146 ((set (tuple21 (tuple21 a (tuple21 d e))
  (set (tuple21 c e))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a (tuple21 d e)) (set (tuple21 c e))))))
  (sort (set1 (tuple2 (tuple2 a1 (tuple2 d1 e1)) (set1 (tuple2 c1 e1))))
  (t2tb4146 x))))

(declare-fun tb2t4146 (uni) (set (tuple21 (tuple21 a (tuple21 d e))
  (set (tuple21 c e)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a (tuple21 d e)) (set (tuple21 c e))))))
  (! (= (tb2t4146 (t2tb4146 i)) i) :pattern ((t2tb4146 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 a1 (tuple2 d1 e1)) (set1 (tuple2 c1 e1)))) j)
     (= (t2tb4146 (tb2t4146 j)) j)) :pattern ((t2tb4146 (tb2t4146 j))) )))

(declare-fun t2tb4147 ((tuple21 (tuple21 a (tuple21 d e)) (set (tuple21 c
  e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a (tuple21 d e)) (set (tuple21 c e))))) (sort
  (tuple2 (tuple2 a1 (tuple2 d1 e1)) (set1 (tuple2 c1 e1))) (t2tb4147 x))))

(declare-fun tb2t4147 (uni) (tuple21 (tuple21 a (tuple21 d e))
  (set (tuple21 c e))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a (tuple21 d e)) (set (tuple21 c e)))))
  (! (= (tb2t4147 (t2tb4147 i)) i) :pattern ((t2tb4147 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 (tuple2 d1 e1)) (set1 (tuple2 c1 e1))) j)
     (= (t2tb4147 (tb2t4147 j)) j)) :pattern ((t2tb4147 (tb2t4147 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a (tuple21 d e)))) (t (set (set (tuple21 c e))))
  (x (tuple21 a (tuple21 d e))) (y (set (tuple21 c e))))
  (= (mem (tuple2 (tuple2 a1 (tuple2 d1 e1)) (set1 (tuple2 c1 e1)))
  (Tuple2 (tuple2 a1 (tuple2 d1 e1)) (set1 (tuple2 c1 e1)) (t2tb4105 x)
  (t2tb3478 y))
  (times (set1 (tuple2 c1 e1)) (tuple2 a1 (tuple2 d1 e1)) (t2tb4103 s)
  (t2tb3854 t))) (and (mem48 x s) (mem47 y t)))))

(declare-fun t2tb4148 ((set (tuple21 (tuple21 a (tuple21 d e)) (tuple21 c
  e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a (tuple21 d e)) (tuple21 c e))))) (sort
  (set1 (tuple2 (tuple2 a1 (tuple2 d1 e1)) (tuple2 c1 e1))) (t2tb4148 x))))

(declare-fun tb2t4148 (uni) (set (tuple21 (tuple21 a (tuple21 d e))
  (tuple21 c e))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a (tuple21 d e)) (tuple21 c e)))))
  (! (= (tb2t4148 (t2tb4148 i)) i) :pattern ((t2tb4148 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 (tuple2 d1 e1)) (tuple2 c1 e1))) j)
     (= (t2tb4148 (tb2t4148 j)) j)) :pattern ((t2tb4148 (tb2t4148 j))) )))

(declare-fun t2tb4149 ((tuple21 (tuple21 a (tuple21 d e)) (tuple21 c
  e))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a (tuple21 d e)) (tuple21 c e)))) (sort
  (tuple2 (tuple2 a1 (tuple2 d1 e1)) (tuple2 c1 e1)) (t2tb4149 x))))

(declare-fun tb2t4149 (uni) (tuple21 (tuple21 a (tuple21 d e)) (tuple21 c
  e)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a (tuple21 d e)) (tuple21 c e))))
  (! (= (tb2t4149 (t2tb4149 i)) i) :pattern ((t2tb4149 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 (tuple2 d1 e1)) (tuple2 c1 e1)) j)
     (= (t2tb4149 (tb2t4149 j)) j)) :pattern ((t2tb4149 (tb2t4149 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a (tuple21 d e)))) (t (set (tuple21 c e)))
  (x (tuple21 a (tuple21 d e))) (y (tuple21 c e)))
  (= (mem (tuple2 (tuple2 a1 (tuple2 d1 e1)) (tuple2 c1 e1))
  (Tuple2 (tuple2 a1 (tuple2 d1 e1)) (tuple2 c1 e1) (t2tb4105 x)
  (t2tb3479 y))
  (times (tuple2 c1 e1) (tuple2 a1 (tuple2 d1 e1)) (t2tb4103 s) (t2tb3478 t)))
  (and (mem48 x s) (mem46 y t)))))

(declare-fun t2tb4150 ((set (tuple21 (tuple21 a (tuple21 d e)) (tuple21 a
  e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a (tuple21 d e)) (tuple21 a e))))) (sort
  (set1 (tuple2 (tuple2 a1 (tuple2 d1 e1)) (tuple2 a1 e1))) (t2tb4150 x))))

(declare-fun tb2t4150 (uni) (set (tuple21 (tuple21 a (tuple21 d e))
  (tuple21 a e))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a (tuple21 d e)) (tuple21 a e)))))
  (! (= (tb2t4150 (t2tb4150 i)) i) :pattern ((t2tb4150 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 (tuple2 d1 e1)) (tuple2 a1 e1))) j)
     (= (t2tb4150 (tb2t4150 j)) j)) :pattern ((t2tb4150 (tb2t4150 j))) )))

(declare-fun t2tb4151 ((tuple21 (tuple21 a (tuple21 d e)) (tuple21 a
  e))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a (tuple21 d e)) (tuple21 a e)))) (sort
  (tuple2 (tuple2 a1 (tuple2 d1 e1)) (tuple2 a1 e1)) (t2tb4151 x))))

(declare-fun tb2t4151 (uni) (tuple21 (tuple21 a (tuple21 d e)) (tuple21 a
  e)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a (tuple21 d e)) (tuple21 a e))))
  (! (= (tb2t4151 (t2tb4151 i)) i) :pattern ((t2tb4151 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 (tuple2 d1 e1)) (tuple2 a1 e1)) j)
     (= (t2tb4151 (tb2t4151 j)) j)) :pattern ((t2tb4151 (tb2t4151 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a (tuple21 d e)))) (t (set (tuple21 a e)))
  (x (tuple21 a (tuple21 d e))) (y (tuple21 a e)))
  (= (mem (tuple2 (tuple2 a1 (tuple2 d1 e1)) (tuple2 a1 e1))
  (Tuple2 (tuple2 a1 (tuple2 d1 e1)) (tuple2 a1 e1) (t2tb4105 x)
  (t2tb2949 y))
  (times (tuple2 a1 e1) (tuple2 a1 (tuple2 d1 e1)) (t2tb4103 s) (t2tb2943 t)))
  (and (mem48 x s) (mem44 y t)))))

(declare-fun t2tb4152 ((set (tuple21 (tuple21 a (tuple21 d e)) e))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a (tuple21 d e)) e)))) (sort
  (set1 (tuple2 (tuple2 a1 (tuple2 d1 e1)) e1)) (t2tb4152 x))))

(declare-fun tb2t4152 (uni) (set (tuple21 (tuple21 a (tuple21 d e)) e)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a (tuple21 d e)) e))))
  (! (= (tb2t4152 (t2tb4152 i)) i) :pattern ((t2tb4152 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 (tuple2 d1 e1)) e1)) j)
     (= (t2tb4152 (tb2t4152 j)) j)) :pattern ((t2tb4152 (tb2t4152 j))) )))

(declare-fun t2tb4153 ((tuple21 (tuple21 a (tuple21 d e)) e)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a (tuple21 d e)) e))) (sort
  (tuple2 (tuple2 a1 (tuple2 d1 e1)) e1) (t2tb4153 x))))

(declare-fun tb2t4153 (uni) (tuple21 (tuple21 a (tuple21 d e)) e))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a (tuple21 d e)) e)))
  (! (= (tb2t4153 (t2tb4153 i)) i) :pattern ((t2tb4153 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 (tuple2 d1 e1)) e1) j)
     (= (t2tb4153 (tb2t4153 j)) j)) :pattern ((t2tb4153 (tb2t4153 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a (tuple21 d e)))) (t (set e)) (x (tuple21 a
  (tuple21 d e))) (y e))
  (= (mem (tuple2 (tuple2 a1 (tuple2 d1 e1)) e1)
  (Tuple2 (tuple2 a1 (tuple2 d1 e1)) e1 (t2tb4105 x) (t2tb2955 y))
  (times e1 (tuple2 a1 (tuple2 d1 e1)) (t2tb4103 s) (t2tb2947 t)))
  (and (mem48 x s) (mem36 y t)))))

(declare-fun t2tb4154 ((set (tuple21 (tuple21 a (tuple21 d e)) (tuple21 a
  d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a (tuple21 d e)) (tuple21 a d))))) (sort
  (set1 (tuple2 (tuple2 a1 (tuple2 d1 e1)) (tuple2 a1 d1))) (t2tb4154 x))))

(declare-fun tb2t4154 (uni) (set (tuple21 (tuple21 a (tuple21 d e))
  (tuple21 a d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a (tuple21 d e)) (tuple21 a d)))))
  (! (= (tb2t4154 (t2tb4154 i)) i) :pattern ((t2tb4154 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 (tuple2 d1 e1)) (tuple2 a1 d1))) j)
     (= (t2tb4154 (tb2t4154 j)) j)) :pattern ((t2tb4154 (tb2t4154 j))) )))

(declare-fun t2tb4155 ((tuple21 (tuple21 a (tuple21 d e)) (tuple21 a
  d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a (tuple21 d e)) (tuple21 a d)))) (sort
  (tuple2 (tuple2 a1 (tuple2 d1 e1)) (tuple2 a1 d1)) (t2tb4155 x))))

(declare-fun tb2t4155 (uni) (tuple21 (tuple21 a (tuple21 d e)) (tuple21 a
  d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a (tuple21 d e)) (tuple21 a d))))
  (! (= (tb2t4155 (t2tb4155 i)) i) :pattern ((t2tb4155 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 (tuple2 d1 e1)) (tuple2 a1 d1)) j)
     (= (t2tb4155 (tb2t4155 j)) j)) :pattern ((t2tb4155 (tb2t4155 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a (tuple21 d e)))) (t (set (tuple21 a d)))
  (x (tuple21 a (tuple21 d e))) (y (tuple21 a d)))
  (= (mem (tuple2 (tuple2 a1 (tuple2 d1 e1)) (tuple2 a1 d1))
  (Tuple2 (tuple2 a1 (tuple2 d1 e1)) (tuple2 a1 d1) (t2tb4105 x) (t2tb904 y))
  (times (tuple2 a1 d1) (tuple2 a1 (tuple2 d1 e1)) (t2tb4103 s) (t2tb903 t)))
  (and (mem48 x s) (mem32 y t)))))

(declare-fun t2tb4156 ((set (tuple21 (tuple21 a (tuple21 d e))
  (set (tuple21 b d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a (tuple21 d e)) (set (tuple21 b d))))))
  (sort (set1 (tuple2 (tuple2 a1 (tuple2 d1 e1)) (set1 (tuple2 b1 d1))))
  (t2tb4156 x))))

(declare-fun tb2t4156 (uni) (set (tuple21 (tuple21 a (tuple21 d e))
  (set (tuple21 b d)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a (tuple21 d e)) (set (tuple21 b d))))))
  (! (= (tb2t4156 (t2tb4156 i)) i) :pattern ((t2tb4156 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 a1 (tuple2 d1 e1)) (set1 (tuple2 b1 d1)))) j)
     (= (t2tb4156 (tb2t4156 j)) j)) :pattern ((t2tb4156 (tb2t4156 j))) )))

(declare-fun t2tb4157 ((tuple21 (tuple21 a (tuple21 d e)) (set (tuple21 b
  d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a (tuple21 d e)) (set (tuple21 b d))))) (sort
  (tuple2 (tuple2 a1 (tuple2 d1 e1)) (set1 (tuple2 b1 d1))) (t2tb4157 x))))

(declare-fun tb2t4157 (uni) (tuple21 (tuple21 a (tuple21 d e))
  (set (tuple21 b d))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a (tuple21 d e)) (set (tuple21 b d)))))
  (! (= (tb2t4157 (t2tb4157 i)) i) :pattern ((t2tb4157 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 (tuple2 d1 e1)) (set1 (tuple2 b1 d1))) j)
     (= (t2tb4157 (tb2t4157 j)) j)) :pattern ((t2tb4157 (tb2t4157 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a (tuple21 d e)))) (t (set (set (tuple21 b d))))
  (x (tuple21 a (tuple21 d e))) (y (set (tuple21 b d))))
  (= (mem (tuple2 (tuple2 a1 (tuple2 d1 e1)) (set1 (tuple2 b1 d1)))
  (Tuple2 (tuple2 a1 (tuple2 d1 e1)) (set1 (tuple2 b1 d1)) (t2tb4105 x)
  (t2tb687 y))
  (times (set1 (tuple2 b1 d1)) (tuple2 a1 (tuple2 d1 e1)) (t2tb4103 s)
  (t2tb906 t))) (and (mem48 x s) (mem33 y t)))))

(declare-fun t2tb4158 ((set (tuple21 (tuple21 a (tuple21 d e)) (tuple21 b
  d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a (tuple21 d e)) (tuple21 b d))))) (sort
  (set1 (tuple2 (tuple2 a1 (tuple2 d1 e1)) (tuple2 b1 d1))) (t2tb4158 x))))

(declare-fun tb2t4158 (uni) (set (tuple21 (tuple21 a (tuple21 d e))
  (tuple21 b d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a (tuple21 d e)) (tuple21 b d)))))
  (! (= (tb2t4158 (t2tb4158 i)) i) :pattern ((t2tb4158 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 (tuple2 d1 e1)) (tuple2 b1 d1))) j)
     (= (t2tb4158 (tb2t4158 j)) j)) :pattern ((t2tb4158 (tb2t4158 j))) )))

(declare-fun t2tb4159 ((tuple21 (tuple21 a (tuple21 d e)) (tuple21 b
  d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a (tuple21 d e)) (tuple21 b d)))) (sort
  (tuple2 (tuple2 a1 (tuple2 d1 e1)) (tuple2 b1 d1)) (t2tb4159 x))))

(declare-fun tb2t4159 (uni) (tuple21 (tuple21 a (tuple21 d e)) (tuple21 b
  d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a (tuple21 d e)) (tuple21 b d))))
  (! (= (tb2t4159 (t2tb4159 i)) i) :pattern ((t2tb4159 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 (tuple2 d1 e1)) (tuple2 b1 d1)) j)
     (= (t2tb4159 (tb2t4159 j)) j)) :pattern ((t2tb4159 (tb2t4159 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a (tuple21 d e)))) (t (set (tuple21 b d)))
  (x (tuple21 a (tuple21 d e))) (y (tuple21 b d)))
  (= (mem (tuple2 (tuple2 a1 (tuple2 d1 e1)) (tuple2 b1 d1))
  (Tuple2 (tuple2 a1 (tuple2 d1 e1)) (tuple2 b1 d1) (t2tb4105 x) (t2tb692 y))
  (times (tuple2 b1 d1) (tuple2 a1 (tuple2 d1 e1)) (t2tb4103 s) (t2tb687 t)))
  (and (mem48 x s) (mem23 y t)))))

(declare-fun t2tb4160 ((set (tuple21 (tuple21 a (tuple21 d e)) d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a (tuple21 d e)) d)))) (sort
  (set1 (tuple2 (tuple2 a1 (tuple2 d1 e1)) d1)) (t2tb4160 x))))

(declare-fun tb2t4160 (uni) (set (tuple21 (tuple21 a (tuple21 d e)) d)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a (tuple21 d e)) d))))
  (! (= (tb2t4160 (t2tb4160 i)) i) :pattern ((t2tb4160 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 (tuple2 d1 e1)) d1)) j)
     (= (t2tb4160 (tb2t4160 j)) j)) :pattern ((t2tb4160 (tb2t4160 j))) )))

(declare-fun t2tb4161 ((tuple21 (tuple21 a (tuple21 d e)) d)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a (tuple21 d e)) d))) (sort
  (tuple2 (tuple2 a1 (tuple2 d1 e1)) d1) (t2tb4161 x))))

(declare-fun tb2t4161 (uni) (tuple21 (tuple21 a (tuple21 d e)) d))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a (tuple21 d e)) d)))
  (! (= (tb2t4161 (t2tb4161 i)) i) :pattern ((t2tb4161 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 (tuple2 d1 e1)) d1) j)
     (= (t2tb4161 (tb2t4161 j)) j)) :pattern ((t2tb4161 (tb2t4161 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a (tuple21 d e)))) (t (set d)) (x (tuple21 a
  (tuple21 d e))) (y d))
  (= (mem (tuple2 (tuple2 a1 (tuple2 d1 e1)) d1)
  (Tuple2 (tuple2 a1 (tuple2 d1 e1)) d1 (t2tb4105 x) (t2tb694 y))
  (times d1 (tuple2 a1 (tuple2 d1 e1)) (t2tb4103 s) (t2tb690 t)))
  (and (mem48 x s) (mem20 y t)))))

(declare-fun t2tb4162 ((set (tuple21 (tuple21 a (tuple21 d e)) (tuple21 a
  (tuple21 b c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a (tuple21 d e)) (tuple21 a (tuple21 b
  c)))))) (sort
  (set1 (tuple2 (tuple2 a1 (tuple2 d1 e1)) (tuple2 a1 (tuple2 b1 c1))))
  (t2tb4162 x))))

(declare-fun tb2t4162 (uni) (set (tuple21 (tuple21 a (tuple21 d e))
  (tuple21 a (tuple21 b c)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a (tuple21 d e)) (tuple21 a (tuple21 b
  c)))))) (! (= (tb2t4162 (t2tb4162 i)) i) :pattern ((t2tb4162 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 a1 (tuple2 d1 e1)) (tuple2 a1 (tuple2 b1 c1)))) j)
     (= (t2tb4162 (tb2t4162 j)) j)) :pattern ((t2tb4162 (tb2t4162 j))) )))

(declare-fun t2tb4163 ((tuple21 (tuple21 a (tuple21 d e)) (tuple21 a
  (tuple21 b c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a (tuple21 d e)) (tuple21 a (tuple21 b c)))))
  (sort (tuple2 (tuple2 a1 (tuple2 d1 e1)) (tuple2 a1 (tuple2 b1 c1)))
  (t2tb4163 x))))

(declare-fun tb2t4163 (uni) (tuple21 (tuple21 a (tuple21 d e)) (tuple21 a
  (tuple21 b c))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a (tuple21 d e)) (tuple21 a (tuple21 b c)))))
  (! (= (tb2t4163 (t2tb4163 i)) i) :pattern ((t2tb4163 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 (tuple2 d1 e1)) (tuple2 a1 (tuple2 b1 c1)))
     j) (= (t2tb4163 (tb2t4163 j)) j)) :pattern ((t2tb4163 (tb2t4163 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a (tuple21 d e)))) (t (set (tuple21 a (tuple21 b
  c)))) (x (tuple21 a (tuple21 d e))) (y (tuple21 a (tuple21 b c))))
  (= (mem (tuple2 (tuple2 a1 (tuple2 d1 e1)) (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 (tuple2 a1 (tuple2 d1 e1)) (tuple2 a1 (tuple2 b1 c1)) (t2tb4105 x)
  (t2tb260 y))
  (times (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 (tuple2 d1 e1)) (t2tb4103 s)
  (t2tb261 t))) (and (mem48 x s) (mem14 y t)))))

(declare-fun t2tb4164 ((set (tuple21 (tuple21 a (tuple21 d e))
  (set (tuple21 a c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a (tuple21 d e)) (set (tuple21 a c))))))
  (sort (set1 (tuple2 (tuple2 a1 (tuple2 d1 e1)) (set1 (tuple2 a1 c1))))
  (t2tb4164 x))))

(declare-fun tb2t4164 (uni) (set (tuple21 (tuple21 a (tuple21 d e))
  (set (tuple21 a c)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a (tuple21 d e)) (set (tuple21 a c))))))
  (! (= (tb2t4164 (t2tb4164 i)) i) :pattern ((t2tb4164 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 a1 (tuple2 d1 e1)) (set1 (tuple2 a1 c1)))) j)
     (= (t2tb4164 (tb2t4164 j)) j)) :pattern ((t2tb4164 (tb2t4164 j))) )))

(declare-fun t2tb4165 ((tuple21 (tuple21 a (tuple21 d e)) (set (tuple21 a
  c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a (tuple21 d e)) (set (tuple21 a c))))) (sort
  (tuple2 (tuple2 a1 (tuple2 d1 e1)) (set1 (tuple2 a1 c1))) (t2tb4165 x))))

(declare-fun tb2t4165 (uni) (tuple21 (tuple21 a (tuple21 d e))
  (set (tuple21 a c))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a (tuple21 d e)) (set (tuple21 a c)))))
  (! (= (tb2t4165 (t2tb4165 i)) i) :pattern ((t2tb4165 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 (tuple2 d1 e1)) (set1 (tuple2 a1 c1))) j)
     (= (t2tb4165 (tb2t4165 j)) j)) :pattern ((t2tb4165 (tb2t4165 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a (tuple21 d e)))) (t (set (set (tuple21 a c))))
  (x (tuple21 a (tuple21 d e))) (y (set (tuple21 a c))))
  (= (mem (tuple2 (tuple2 a1 (tuple2 d1 e1)) (set1 (tuple2 a1 c1)))
  (Tuple2 (tuple2 a1 (tuple2 d1 e1)) (set1 (tuple2 a1 c1)) (t2tb4105 x)
  (t2tb129 y))
  (times (set1 (tuple2 a1 c1)) (tuple2 a1 (tuple2 d1 e1)) (t2tb4103 s)
  (t2tb128 t))) (and (mem48 x s) (mem11 y t)))))

(declare-fun t2tb4166 ((set (tuple21 (tuple21 a (tuple21 d e)) (tuple21 a
  c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a (tuple21 d e)) (tuple21 a c))))) (sort
  (set1 (tuple2 (tuple2 a1 (tuple2 d1 e1)) (tuple2 a1 c1))) (t2tb4166 x))))

(declare-fun tb2t4166 (uni) (set (tuple21 (tuple21 a (tuple21 d e))
  (tuple21 a c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a (tuple21 d e)) (tuple21 a c)))))
  (! (= (tb2t4166 (t2tb4166 i)) i) :pattern ((t2tb4166 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 (tuple2 d1 e1)) (tuple2 a1 c1))) j)
     (= (t2tb4166 (tb2t4166 j)) j)) :pattern ((t2tb4166 (tb2t4166 j))) )))

(declare-fun t2tb4167 ((tuple21 (tuple21 a (tuple21 d e)) (tuple21 a
  c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a (tuple21 d e)) (tuple21 a c)))) (sort
  (tuple2 (tuple2 a1 (tuple2 d1 e1)) (tuple2 a1 c1)) (t2tb4167 x))))

(declare-fun tb2t4167 (uni) (tuple21 (tuple21 a (tuple21 d e)) (tuple21 a
  c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a (tuple21 d e)) (tuple21 a c))))
  (! (= (tb2t4167 (t2tb4167 i)) i) :pattern ((t2tb4167 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 (tuple2 d1 e1)) (tuple2 a1 c1)) j)
     (= (t2tb4167 (tb2t4167 j)) j)) :pattern ((t2tb4167 (tb2t4167 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a (tuple21 d e)))) (t (set (tuple21 a c)))
  (x (tuple21 a (tuple21 d e))) (y (tuple21 a c)))
  (= (mem (tuple2 (tuple2 a1 (tuple2 d1 e1)) (tuple2 a1 c1))
  (Tuple2 (tuple2 a1 (tuple2 d1 e1)) (tuple2 a1 c1) (t2tb4105 x) (t2tb133 y))
  (times (tuple2 a1 c1) (tuple2 a1 (tuple2 d1 e1)) (t2tb4103 s) (t2tb129 t)))
  (and (mem48 x s) (mem10 y t)))))

(declare-fun t2tb4168 ((set (tuple21 (tuple21 a (tuple21 d e)) c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a (tuple21 d e)) c)))) (sort
  (set1 (tuple2 (tuple2 a1 (tuple2 d1 e1)) c1)) (t2tb4168 x))))

(declare-fun tb2t4168 (uni) (set (tuple21 (tuple21 a (tuple21 d e)) c)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a (tuple21 d e)) c))))
  (! (= (tb2t4168 (t2tb4168 i)) i) :pattern ((t2tb4168 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 (tuple2 d1 e1)) c1)) j)
     (= (t2tb4168 (tb2t4168 j)) j)) :pattern ((t2tb4168 (tb2t4168 j))) )))

(declare-fun t2tb4169 ((tuple21 (tuple21 a (tuple21 d e)) c)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a (tuple21 d e)) c))) (sort
  (tuple2 (tuple2 a1 (tuple2 d1 e1)) c1) (t2tb4169 x))))

(declare-fun tb2t4169 (uni) (tuple21 (tuple21 a (tuple21 d e)) c))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a (tuple21 d e)) c)))
  (! (= (tb2t4169 (t2tb4169 i)) i) :pattern ((t2tb4169 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 (tuple2 d1 e1)) c1) j)
     (= (t2tb4169 (tb2t4169 j)) j)) :pattern ((t2tb4169 (tb2t4169 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a (tuple21 d e)))) (t (set c)) (x (tuple21 a
  (tuple21 d e))) (y c))
  (= (mem (tuple2 (tuple2 a1 (tuple2 d1 e1)) c1)
  (Tuple2 (tuple2 a1 (tuple2 d1 e1)) c1 (t2tb4105 x) (t2tb135 y))
  (times c1 (tuple2 a1 (tuple2 d1 e1)) (t2tb4103 s) (t2tb132 t)))
  (and (mem48 x s) (mem7 y t)))))

(declare-fun t2tb4170 ((set (tuple21 (tuple21 a (tuple21 d e))
  (set (tuple21 a b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a (tuple21 d e)) (set (tuple21 a b))))))
  (sort (set1 (tuple2 (tuple2 a1 (tuple2 d1 e1)) (set1 (tuple2 a1 b1))))
  (t2tb4170 x))))

(declare-fun tb2t4170 (uni) (set (tuple21 (tuple21 a (tuple21 d e))
  (set (tuple21 a b)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a (tuple21 d e)) (set (tuple21 a b))))))
  (! (= (tb2t4170 (t2tb4170 i)) i) :pattern ((t2tb4170 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 a1 (tuple2 d1 e1)) (set1 (tuple2 a1 b1)))) j)
     (= (t2tb4170 (tb2t4170 j)) j)) :pattern ((t2tb4170 (tb2t4170 j))) )))

(declare-fun t2tb4171 ((tuple21 (tuple21 a (tuple21 d e)) (set (tuple21 a
  b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a (tuple21 d e)) (set (tuple21 a b))))) (sort
  (tuple2 (tuple2 a1 (tuple2 d1 e1)) (set1 (tuple2 a1 b1))) (t2tb4171 x))))

(declare-fun tb2t4171 (uni) (tuple21 (tuple21 a (tuple21 d e))
  (set (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a (tuple21 d e)) (set (tuple21 a b)))))
  (! (= (tb2t4171 (t2tb4171 i)) i) :pattern ((t2tb4171 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 (tuple2 d1 e1)) (set1 (tuple2 a1 b1))) j)
     (= (t2tb4171 (tb2t4171 j)) j)) :pattern ((t2tb4171 (tb2t4171 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a (tuple21 d e)))) (t (set (set (tuple21 a b))))
  (x (tuple21 a (tuple21 d e))) (y (set (tuple21 a b))))
  (= (mem (tuple2 (tuple2 a1 (tuple2 d1 e1)) (set1 (tuple2 a1 b1)))
  (Tuple2 (tuple2 a1 (tuple2 d1 e1)) (set1 (tuple2 a1 b1)) (t2tb4105 x)
  (t2tb11 y))
  (times (set1 (tuple2 a1 b1)) (tuple2 a1 (tuple2 d1 e1)) (t2tb4103 s)
  (t2tb10 t))) (and (mem48 x s) (mem4 y t)))))

(declare-fun t2tb4172 ((set (tuple21 (tuple21 a (tuple21 d e)) (tuple21 a
  b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a (tuple21 d e)) (tuple21 a b))))) (sort
  (set1 (tuple2 (tuple2 a1 (tuple2 d1 e1)) (tuple2 a1 b1))) (t2tb4172 x))))

(declare-fun tb2t4172 (uni) (set (tuple21 (tuple21 a (tuple21 d e))
  (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a (tuple21 d e)) (tuple21 a b)))))
  (! (= (tb2t4172 (t2tb4172 i)) i) :pattern ((t2tb4172 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 (tuple2 d1 e1)) (tuple2 a1 b1))) j)
     (= (t2tb4172 (tb2t4172 j)) j)) :pattern ((t2tb4172 (tb2t4172 j))) )))

(declare-fun t2tb4173 ((tuple21 (tuple21 a (tuple21 d e)) (tuple21 a
  b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a (tuple21 d e)) (tuple21 a b)))) (sort
  (tuple2 (tuple2 a1 (tuple2 d1 e1)) (tuple2 a1 b1)) (t2tb4173 x))))

(declare-fun tb2t4173 (uni) (tuple21 (tuple21 a (tuple21 d e)) (tuple21 a
  b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a (tuple21 d e)) (tuple21 a b))))
  (! (= (tb2t4173 (t2tb4173 i)) i) :pattern ((t2tb4173 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 (tuple2 d1 e1)) (tuple2 a1 b1)) j)
     (= (t2tb4173 (tb2t4173 j)) j)) :pattern ((t2tb4173 (tb2t4173 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a (tuple21 d e)))) (t (set (tuple21 a b)))
  (x (tuple21 a (tuple21 d e))) (y (tuple21 a b)))
  (= (mem (tuple2 (tuple2 a1 (tuple2 d1 e1)) (tuple2 a1 b1))
  (Tuple2 (tuple2 a1 (tuple2 d1 e1)) (tuple2 a1 b1) (t2tb4105 x) (t2tb13 y))
  (times (tuple2 a1 b1) (tuple2 a1 (tuple2 d1 e1)) (t2tb4103 s) (t2tb11 t)))
  (and (mem48 x s) (mem3 y t)))))

(declare-fun t2tb4174 ((set (tuple21 (tuple21 a (tuple21 d e)) b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a (tuple21 d e)) b)))) (sort
  (set1 (tuple2 (tuple2 a1 (tuple2 d1 e1)) b1)) (t2tb4174 x))))

(declare-fun tb2t4174 (uni) (set (tuple21 (tuple21 a (tuple21 d e)) b)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a (tuple21 d e)) b))))
  (! (= (tb2t4174 (t2tb4174 i)) i) :pattern ((t2tb4174 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 (tuple2 d1 e1)) b1)) j)
     (= (t2tb4174 (tb2t4174 j)) j)) :pattern ((t2tb4174 (tb2t4174 j))) )))

(declare-fun t2tb4175 ((tuple21 (tuple21 a (tuple21 d e)) b)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a (tuple21 d e)) b))) (sort
  (tuple2 (tuple2 a1 (tuple2 d1 e1)) b1) (t2tb4175 x))))

(declare-fun tb2t4175 (uni) (tuple21 (tuple21 a (tuple21 d e)) b))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a (tuple21 d e)) b)))
  (! (= (tb2t4175 (t2tb4175 i)) i) :pattern ((t2tb4175 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 (tuple2 d1 e1)) b1) j)
     (= (t2tb4175 (tb2t4175 j)) j)) :pattern ((t2tb4175 (tb2t4175 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a (tuple21 d e)))) (t (set b)) (x (tuple21 a
  (tuple21 d e))) (y b))
  (= (mem (tuple2 (tuple2 a1 (tuple2 d1 e1)) b1)
  (Tuple2 (tuple2 a1 (tuple2 d1 e1)) b1 (t2tb4105 x) (t2tb14 y))
  (times b1 (tuple2 a1 (tuple2 d1 e1)) (t2tb4103 s) (t2tb12 t)))
  (and (mem48 x s) (mem2 y t)))))

(declare-fun t2tb4176 ((set (tuple21 (tuple21 a (tuple21 d e)) a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a (tuple21 d e)) a)))) (sort
  (set1 (tuple2 (tuple2 a1 (tuple2 d1 e1)) a1)) (t2tb4176 x))))

(declare-fun tb2t4176 (uni) (set (tuple21 (tuple21 a (tuple21 d e)) a)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a (tuple21 d e)) a))))
  (! (= (tb2t4176 (t2tb4176 i)) i) :pattern ((t2tb4176 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 (tuple2 d1 e1)) a1)) j)
     (= (t2tb4176 (tb2t4176 j)) j)) :pattern ((t2tb4176 (tb2t4176 j))) )))

(declare-fun t2tb4177 ((tuple21 (tuple21 a (tuple21 d e)) a)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a (tuple21 d e)) a))) (sort
  (tuple2 (tuple2 a1 (tuple2 d1 e1)) a1) (t2tb4177 x))))

(declare-fun tb2t4177 (uni) (tuple21 (tuple21 a (tuple21 d e)) a))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a (tuple21 d e)) a)))
  (! (= (tb2t4177 (t2tb4177 i)) i) :pattern ((t2tb4177 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 (tuple2 d1 e1)) a1) j)
     (= (t2tb4177 (tb2t4177 j)) j)) :pattern ((t2tb4177 (tb2t4177 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a (tuple21 d e)))) (t (set a)) (x (tuple21 a
  (tuple21 d e))) (y a))
  (= (mem (tuple2 (tuple2 a1 (tuple2 d1 e1)) a1)
  (Tuple2 (tuple2 a1 (tuple2 d1 e1)) a1 (t2tb4105 x) (t2tb2 y))
  (times a1 (tuple2 a1 (tuple2 d1 e1)) (t2tb4103 s) (t2tb1 t)))
  (and (mem48 x s) (mem1 y t)))))

;; mem_times
  (assert
  (forall ((b2 ty))
  (forall ((s (set (tuple21 a (tuple21 d e)))) (t uni) (x (tuple21 a
  (tuple21 d e))) (y uni))
  (= (mem (tuple2 (tuple2 a1 (tuple2 d1 e1)) b2)
  (Tuple2 (tuple2 a1 (tuple2 d1 e1)) b2 (t2tb4105 x) y)
  (times b2 (tuple2 a1 (tuple2 d1 e1)) (t2tb4103 s) t))
  (and (mem48 x s) (mem b2 y t))))))

(declare-fun t2tb4178 ((set (tuple21 (set (tuple21 c e)) (tuple21 (tuple21 b
  c) (tuple21 d e))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 c e)) (tuple21 (tuple21 b c)
  (tuple21 d e)))))) (sort
  (set1
  (tuple2 (set1 (tuple2 c1 e1)) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1))))
  (t2tb4178 x))))

(declare-fun tb2t4178 (uni) (set (tuple21 (set (tuple21 c e))
  (tuple21 (tuple21 b c) (tuple21 d e)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 c e)) (tuple21 (tuple21 b c)
  (tuple21 d e))))))
  (! (= (tb2t4178 (t2tb4178 i)) i) :pattern ((t2tb4178 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (tuple2 (set1 (tuple2 c1 e1)) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1))))
     j) (= (t2tb4178 (tb2t4178 j)) j)) :pattern ((t2tb4178 (tb2t4178 j))) )))

(declare-fun t2tb4179 ((tuple21 (set (tuple21 c e)) (tuple21 (tuple21 b c)
  (tuple21 d e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 c e)) (tuple21 (tuple21 b c) (tuple21 d
  e))))) (sort
  (tuple2 (set1 (tuple2 c1 e1)) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)))
  (t2tb4179 x))))

(declare-fun tb2t4179 (uni) (tuple21 (set (tuple21 c e)) (tuple21 (tuple21 b
  c) (tuple21 d e))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 c e)) (tuple21 (tuple21 b c) (tuple21 d
  e))))) (! (= (tb2t4179 (t2tb4179 i)) i) :pattern ((t2tb4179 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (tuple2 (set1 (tuple2 c1 e1)) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1))) j)
     (= (t2tb4179 (tb2t4179 j)) j)) :pattern ((t2tb4179 (tb2t4179 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 c e)))) (t (set (tuple21 (tuple21 b c)
  (tuple21 d e)))) (x (set (tuple21 c e))) (y (tuple21 (tuple21 b c)
  (tuple21 d e))))
  (= (mem
  (tuple2 (set1 (tuple2 c1 e1)) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)))
  (Tuple2 (set1 (tuple2 c1 e1)) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1))
  (t2tb3478 x) (t2tb4104 y))
  (times (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (set1 (tuple2 c1 e1))
  (t2tb3854 s) (t2tb4102 t))) (and (mem47 x s) (mem49 y t)))))

(declare-fun t2tb4180 ((set (tuple21 (set (tuple21 c e)) (tuple21 a
  (tuple21 d e))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 c e)) (tuple21 a (tuple21 d e))))))
  (sort (set1 (tuple2 (set1 (tuple2 c1 e1)) (tuple2 a1 (tuple2 d1 e1))))
  (t2tb4180 x))))

(declare-fun tb2t4180 (uni) (set (tuple21 (set (tuple21 c e)) (tuple21 a
  (tuple21 d e)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 c e)) (tuple21 a (tuple21 d e))))))
  (! (= (tb2t4180 (t2tb4180 i)) i) :pattern ((t2tb4180 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (set1 (tuple2 c1 e1)) (tuple2 a1 (tuple2 d1 e1)))) j)
     (= (t2tb4180 (tb2t4180 j)) j)) :pattern ((t2tb4180 (tb2t4180 j))) )))

(declare-fun t2tb4181 ((tuple21 (set (tuple21 c e)) (tuple21 a (tuple21 d
  e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 c e)) (tuple21 a (tuple21 d e))))) (sort
  (tuple2 (set1 (tuple2 c1 e1)) (tuple2 a1 (tuple2 d1 e1))) (t2tb4181 x))))

(declare-fun tb2t4181 (uni) (tuple21 (set (tuple21 c e)) (tuple21 a
  (tuple21 d e))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 c e)) (tuple21 a (tuple21 d e)))))
  (! (= (tb2t4181 (t2tb4181 i)) i) :pattern ((t2tb4181 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 c1 e1)) (tuple2 a1 (tuple2 d1 e1))) j)
     (= (t2tb4181 (tb2t4181 j)) j)) :pattern ((t2tb4181 (tb2t4181 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 c e)))) (t (set (tuple21 a (tuple21 d e))))
  (x (set (tuple21 c e))) (y (tuple21 a (tuple21 d e))))
  (= (mem (tuple2 (set1 (tuple2 c1 e1)) (tuple2 a1 (tuple2 d1 e1)))
  (Tuple2 (set1 (tuple2 c1 e1)) (tuple2 a1 (tuple2 d1 e1)) (t2tb3478 x)
  (t2tb4105 y))
  (times (tuple2 a1 (tuple2 d1 e1)) (set1 (tuple2 c1 e1)) (t2tb3854 s)
  (t2tb4103 t))) (and (mem47 x s) (mem48 y t)))))

(declare-fun t2tb4182 ((set (tuple21 (set (tuple21 c e)) (set (tuple21 c
  e))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 c e)) (set (tuple21 c e)))))) (sort
  (set1 (tuple2 (set1 (tuple2 c1 e1)) (set1 (tuple2 c1 e1)))) (t2tb4182 x))))

(declare-fun tb2t4182 (uni) (set (tuple21 (set (tuple21 c e)) (set (tuple21 c
  e)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 c e)) (set (tuple21 c e))))))
  (! (= (tb2t4182 (t2tb4182 i)) i) :pattern ((t2tb4182 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 c1 e1)) (set1 (tuple2 c1 e1)))) j)
     (= (t2tb4182 (tb2t4182 j)) j)) :pattern ((t2tb4182 (tb2t4182 j))) )))

(declare-fun t2tb4183 ((tuple21 (set (tuple21 c e)) (set (tuple21 c
  e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 c e)) (set (tuple21 c e))))) (sort
  (tuple2 (set1 (tuple2 c1 e1)) (set1 (tuple2 c1 e1))) (t2tb4183 x))))

(declare-fun tb2t4183 (uni) (tuple21 (set (tuple21 c e)) (set (tuple21 c
  e))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 c e)) (set (tuple21 c e)))))
  (! (= (tb2t4183 (t2tb4183 i)) i) :pattern ((t2tb4183 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 c1 e1)) (set1 (tuple2 c1 e1))) j)
     (= (t2tb4183 (tb2t4183 j)) j)) :pattern ((t2tb4183 (tb2t4183 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 c e)))) (t (set (set (tuple21 c e))))
  (x (set (tuple21 c e))) (y (set (tuple21 c e))))
  (= (mem (tuple2 (set1 (tuple2 c1 e1)) (set1 (tuple2 c1 e1)))
  (Tuple2 (set1 (tuple2 c1 e1)) (set1 (tuple2 c1 e1)) (t2tb3478 x)
  (t2tb3478 y))
  (times (set1 (tuple2 c1 e1)) (set1 (tuple2 c1 e1)) (t2tb3854 s)
  (t2tb3854 t))) (and (mem47 x s) (mem47 y t)))))

(declare-fun t2tb4184 ((set (tuple21 (set (tuple21 c e)) (tuple21 c
  e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 c e)) (tuple21 c e))))) (sort
  (set1 (tuple2 (set1 (tuple2 c1 e1)) (tuple2 c1 e1))) (t2tb4184 x))))

(declare-fun tb2t4184 (uni) (set (tuple21 (set (tuple21 c e)) (tuple21 c
  e))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 c e)) (tuple21 c e)))))
  (! (= (tb2t4184 (t2tb4184 i)) i) :pattern ((t2tb4184 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 c1 e1)) (tuple2 c1 e1))) j)
     (= (t2tb4184 (tb2t4184 j)) j)) :pattern ((t2tb4184 (tb2t4184 j))) )))

(declare-fun t2tb4185 ((tuple21 (set (tuple21 c e)) (tuple21 c e))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 c e)) (tuple21 c e)))) (sort
  (tuple2 (set1 (tuple2 c1 e1)) (tuple2 c1 e1)) (t2tb4185 x))))

(declare-fun tb2t4185 (uni) (tuple21 (set (tuple21 c e)) (tuple21 c e)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 c e)) (tuple21 c e))))
  (! (= (tb2t4185 (t2tb4185 i)) i) :pattern ((t2tb4185 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 c1 e1)) (tuple2 c1 e1)) j)
     (= (t2tb4185 (tb2t4185 j)) j)) :pattern ((t2tb4185 (tb2t4185 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 c e)))) (t (set (tuple21 c e)))
  (x (set (tuple21 c e))) (y (tuple21 c e)))
  (= (mem (tuple2 (set1 (tuple2 c1 e1)) (tuple2 c1 e1))
  (Tuple2 (set1 (tuple2 c1 e1)) (tuple2 c1 e1) (t2tb3478 x) (t2tb3479 y))
  (times (tuple2 c1 e1) (set1 (tuple2 c1 e1)) (t2tb3854 s) (t2tb3478 t)))
  (and (mem47 x s) (mem46 y t)))))

(declare-fun t2tb4186 ((set (tuple21 (set (tuple21 c e)) (tuple21 a
  e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 c e)) (tuple21 a e))))) (sort
  (set1 (tuple2 (set1 (tuple2 c1 e1)) (tuple2 a1 e1))) (t2tb4186 x))))

(declare-fun tb2t4186 (uni) (set (tuple21 (set (tuple21 c e)) (tuple21 a
  e))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 c e)) (tuple21 a e)))))
  (! (= (tb2t4186 (t2tb4186 i)) i) :pattern ((t2tb4186 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 c1 e1)) (tuple2 a1 e1))) j)
     (= (t2tb4186 (tb2t4186 j)) j)) :pattern ((t2tb4186 (tb2t4186 j))) )))

(declare-fun t2tb4187 ((tuple21 (set (tuple21 c e)) (tuple21 a e))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 c e)) (tuple21 a e)))) (sort
  (tuple2 (set1 (tuple2 c1 e1)) (tuple2 a1 e1)) (t2tb4187 x))))

(declare-fun tb2t4187 (uni) (tuple21 (set (tuple21 c e)) (tuple21 a e)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 c e)) (tuple21 a e))))
  (! (= (tb2t4187 (t2tb4187 i)) i) :pattern ((t2tb4187 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 c1 e1)) (tuple2 a1 e1)) j)
     (= (t2tb4187 (tb2t4187 j)) j)) :pattern ((t2tb4187 (tb2t4187 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 c e)))) (t (set (tuple21 a e)))
  (x (set (tuple21 c e))) (y (tuple21 a e)))
  (= (mem (tuple2 (set1 (tuple2 c1 e1)) (tuple2 a1 e1))
  (Tuple2 (set1 (tuple2 c1 e1)) (tuple2 a1 e1) (t2tb3478 x) (t2tb2949 y))
  (times (tuple2 a1 e1) (set1 (tuple2 c1 e1)) (t2tb3854 s) (t2tb2943 t)))
  (and (mem47 x s) (mem44 y t)))))

(declare-fun t2tb4188 ((set (tuple21 (set (tuple21 c e)) e))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 c e)) e)))) (sort
  (set1 (tuple2 (set1 (tuple2 c1 e1)) e1)) (t2tb4188 x))))

(declare-fun tb2t4188 (uni) (set (tuple21 (set (tuple21 c e)) e)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 c e)) e))))
  (! (= (tb2t4188 (t2tb4188 i)) i) :pattern ((t2tb4188 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 c1 e1)) e1)) j)
     (= (t2tb4188 (tb2t4188 j)) j)) :pattern ((t2tb4188 (tb2t4188 j))) )))

(declare-fun t2tb4189 ((tuple21 (set (tuple21 c e)) e)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 c e)) e))) (sort
  (tuple2 (set1 (tuple2 c1 e1)) e1) (t2tb4189 x))))

(declare-fun tb2t4189 (uni) (tuple21 (set (tuple21 c e)) e))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 c e)) e)))
  (! (= (tb2t4189 (t2tb4189 i)) i) :pattern ((t2tb4189 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 c1 e1)) e1) j)
     (= (t2tb4189 (tb2t4189 j)) j)) :pattern ((t2tb4189 (tb2t4189 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 c e)))) (t (set e)) (x (set (tuple21 c e)))
  (y e))
  (= (mem (tuple2 (set1 (tuple2 c1 e1)) e1)
  (Tuple2 (set1 (tuple2 c1 e1)) e1 (t2tb3478 x) (t2tb2955 y))
  (times e1 (set1 (tuple2 c1 e1)) (t2tb3854 s) (t2tb2947 t)))
  (and (mem47 x s) (mem36 y t)))))

(declare-fun t2tb4190 ((set (tuple21 (set (tuple21 c e)) (tuple21 a
  d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 c e)) (tuple21 a d))))) (sort
  (set1 (tuple2 (set1 (tuple2 c1 e1)) (tuple2 a1 d1))) (t2tb4190 x))))

(declare-fun tb2t4190 (uni) (set (tuple21 (set (tuple21 c e)) (tuple21 a
  d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 c e)) (tuple21 a d)))))
  (! (= (tb2t4190 (t2tb4190 i)) i) :pattern ((t2tb4190 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 c1 e1)) (tuple2 a1 d1))) j)
     (= (t2tb4190 (tb2t4190 j)) j)) :pattern ((t2tb4190 (tb2t4190 j))) )))

(declare-fun t2tb4191 ((tuple21 (set (tuple21 c e)) (tuple21 a d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 c e)) (tuple21 a d)))) (sort
  (tuple2 (set1 (tuple2 c1 e1)) (tuple2 a1 d1)) (t2tb4191 x))))

(declare-fun tb2t4191 (uni) (tuple21 (set (tuple21 c e)) (tuple21 a d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 c e)) (tuple21 a d))))
  (! (= (tb2t4191 (t2tb4191 i)) i) :pattern ((t2tb4191 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 c1 e1)) (tuple2 a1 d1)) j)
     (= (t2tb4191 (tb2t4191 j)) j)) :pattern ((t2tb4191 (tb2t4191 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 c e)))) (t (set (tuple21 a d)))
  (x (set (tuple21 c e))) (y (tuple21 a d)))
  (= (mem (tuple2 (set1 (tuple2 c1 e1)) (tuple2 a1 d1))
  (Tuple2 (set1 (tuple2 c1 e1)) (tuple2 a1 d1) (t2tb3478 x) (t2tb904 y))
  (times (tuple2 a1 d1) (set1 (tuple2 c1 e1)) (t2tb3854 s) (t2tb903 t)))
  (and (mem47 x s) (mem32 y t)))))

(declare-fun t2tb4192 ((set (tuple21 (set (tuple21 c e)) (set (tuple21 b
  d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 c e)) (set (tuple21 b d)))))) (sort
  (set1 (tuple2 (set1 (tuple2 c1 e1)) (set1 (tuple2 b1 d1)))) (t2tb4192 x))))

(declare-fun tb2t4192 (uni) (set (tuple21 (set (tuple21 c e)) (set (tuple21 b
  d)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 c e)) (set (tuple21 b d))))))
  (! (= (tb2t4192 (t2tb4192 i)) i) :pattern ((t2tb4192 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 c1 e1)) (set1 (tuple2 b1 d1)))) j)
     (= (t2tb4192 (tb2t4192 j)) j)) :pattern ((t2tb4192 (tb2t4192 j))) )))

(declare-fun t2tb4193 ((tuple21 (set (tuple21 c e)) (set (tuple21 b
  d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 c e)) (set (tuple21 b d))))) (sort
  (tuple2 (set1 (tuple2 c1 e1)) (set1 (tuple2 b1 d1))) (t2tb4193 x))))

(declare-fun tb2t4193 (uni) (tuple21 (set (tuple21 c e)) (set (tuple21 b
  d))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 c e)) (set (tuple21 b d)))))
  (! (= (tb2t4193 (t2tb4193 i)) i) :pattern ((t2tb4193 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 c1 e1)) (set1 (tuple2 b1 d1))) j)
     (= (t2tb4193 (tb2t4193 j)) j)) :pattern ((t2tb4193 (tb2t4193 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 c e)))) (t (set (set (tuple21 b d))))
  (x (set (tuple21 c e))) (y (set (tuple21 b d))))
  (= (mem (tuple2 (set1 (tuple2 c1 e1)) (set1 (tuple2 b1 d1)))
  (Tuple2 (set1 (tuple2 c1 e1)) (set1 (tuple2 b1 d1)) (t2tb3478 x)
  (t2tb687 y))
  (times (set1 (tuple2 b1 d1)) (set1 (tuple2 c1 e1)) (t2tb3854 s)
  (t2tb906 t))) (and (mem47 x s) (mem33 y t)))))

(declare-fun t2tb4194 ((set (tuple21 (set (tuple21 c e)) (tuple21 b
  d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 c e)) (tuple21 b d))))) (sort
  (set1 (tuple2 (set1 (tuple2 c1 e1)) (tuple2 b1 d1))) (t2tb4194 x))))

(declare-fun tb2t4194 (uni) (set (tuple21 (set (tuple21 c e)) (tuple21 b
  d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 c e)) (tuple21 b d)))))
  (! (= (tb2t4194 (t2tb4194 i)) i) :pattern ((t2tb4194 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 c1 e1)) (tuple2 b1 d1))) j)
     (= (t2tb4194 (tb2t4194 j)) j)) :pattern ((t2tb4194 (tb2t4194 j))) )))

(declare-fun t2tb4195 ((tuple21 (set (tuple21 c e)) (tuple21 b d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 c e)) (tuple21 b d)))) (sort
  (tuple2 (set1 (tuple2 c1 e1)) (tuple2 b1 d1)) (t2tb4195 x))))

(declare-fun tb2t4195 (uni) (tuple21 (set (tuple21 c e)) (tuple21 b d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 c e)) (tuple21 b d))))
  (! (= (tb2t4195 (t2tb4195 i)) i) :pattern ((t2tb4195 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 c1 e1)) (tuple2 b1 d1)) j)
     (= (t2tb4195 (tb2t4195 j)) j)) :pattern ((t2tb4195 (tb2t4195 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 c e)))) (t (set (tuple21 b d)))
  (x (set (tuple21 c e))) (y (tuple21 b d)))
  (= (mem (tuple2 (set1 (tuple2 c1 e1)) (tuple2 b1 d1))
  (Tuple2 (set1 (tuple2 c1 e1)) (tuple2 b1 d1) (t2tb3478 x) (t2tb692 y))
  (times (tuple2 b1 d1) (set1 (tuple2 c1 e1)) (t2tb3854 s) (t2tb687 t)))
  (and (mem47 x s) (mem23 y t)))))

(declare-fun t2tb4196 ((set (tuple21 (set (tuple21 c e)) d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 c e)) d)))) (sort
  (set1 (tuple2 (set1 (tuple2 c1 e1)) d1)) (t2tb4196 x))))

(declare-fun tb2t4196 (uni) (set (tuple21 (set (tuple21 c e)) d)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 c e)) d))))
  (! (= (tb2t4196 (t2tb4196 i)) i) :pattern ((t2tb4196 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 c1 e1)) d1)) j)
     (= (t2tb4196 (tb2t4196 j)) j)) :pattern ((t2tb4196 (tb2t4196 j))) )))

(declare-fun t2tb4197 ((tuple21 (set (tuple21 c e)) d)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 c e)) d))) (sort
  (tuple2 (set1 (tuple2 c1 e1)) d1) (t2tb4197 x))))

(declare-fun tb2t4197 (uni) (tuple21 (set (tuple21 c e)) d))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 c e)) d)))
  (! (= (tb2t4197 (t2tb4197 i)) i) :pattern ((t2tb4197 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 c1 e1)) d1) j)
     (= (t2tb4197 (tb2t4197 j)) j)) :pattern ((t2tb4197 (tb2t4197 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 c e)))) (t (set d)) (x (set (tuple21 c e)))
  (y d))
  (= (mem (tuple2 (set1 (tuple2 c1 e1)) d1)
  (Tuple2 (set1 (tuple2 c1 e1)) d1 (t2tb3478 x) (t2tb694 y))
  (times d1 (set1 (tuple2 c1 e1)) (t2tb3854 s) (t2tb690 t)))
  (and (mem47 x s) (mem20 y t)))))

(declare-fun t2tb4198 ((set (tuple21 (set (tuple21 c e)) (tuple21 a
  (tuple21 b c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 c e)) (tuple21 a (tuple21 b c))))))
  (sort (set1 (tuple2 (set1 (tuple2 c1 e1)) (tuple2 a1 (tuple2 b1 c1))))
  (t2tb4198 x))))

(declare-fun tb2t4198 (uni) (set (tuple21 (set (tuple21 c e)) (tuple21 a
  (tuple21 b c)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 c e)) (tuple21 a (tuple21 b c))))))
  (! (= (tb2t4198 (t2tb4198 i)) i) :pattern ((t2tb4198 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (set1 (tuple2 c1 e1)) (tuple2 a1 (tuple2 b1 c1)))) j)
     (= (t2tb4198 (tb2t4198 j)) j)) :pattern ((t2tb4198 (tb2t4198 j))) )))

(declare-fun t2tb4199 ((tuple21 (set (tuple21 c e)) (tuple21 a (tuple21 b
  c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 c e)) (tuple21 a (tuple21 b c))))) (sort
  (tuple2 (set1 (tuple2 c1 e1)) (tuple2 a1 (tuple2 b1 c1))) (t2tb4199 x))))

(declare-fun tb2t4199 (uni) (tuple21 (set (tuple21 c e)) (tuple21 a
  (tuple21 b c))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 c e)) (tuple21 a (tuple21 b c)))))
  (! (= (tb2t4199 (t2tb4199 i)) i) :pattern ((t2tb4199 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 c1 e1)) (tuple2 a1 (tuple2 b1 c1))) j)
     (= (t2tb4199 (tb2t4199 j)) j)) :pattern ((t2tb4199 (tb2t4199 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 c e)))) (t (set (tuple21 a (tuple21 b c))))
  (x (set (tuple21 c e))) (y (tuple21 a (tuple21 b c))))
  (= (mem (tuple2 (set1 (tuple2 c1 e1)) (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 (set1 (tuple2 c1 e1)) (tuple2 a1 (tuple2 b1 c1)) (t2tb3478 x)
  (t2tb260 y))
  (times (tuple2 a1 (tuple2 b1 c1)) (set1 (tuple2 c1 e1)) (t2tb3854 s)
  (t2tb261 t))) (and (mem47 x s) (mem14 y t)))))

(declare-fun t2tb4200 ((set (tuple21 (set (tuple21 c e)) (set (tuple21 a
  c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 c e)) (set (tuple21 a c)))))) (sort
  (set1 (tuple2 (set1 (tuple2 c1 e1)) (set1 (tuple2 a1 c1)))) (t2tb4200 x))))

(declare-fun tb2t4200 (uni) (set (tuple21 (set (tuple21 c e)) (set (tuple21 a
  c)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 c e)) (set (tuple21 a c))))))
  (! (= (tb2t4200 (t2tb4200 i)) i) :pattern ((t2tb4200 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 c1 e1)) (set1 (tuple2 a1 c1)))) j)
     (= (t2tb4200 (tb2t4200 j)) j)) :pattern ((t2tb4200 (tb2t4200 j))) )))

(declare-fun t2tb4201 ((tuple21 (set (tuple21 c e)) (set (tuple21 a
  c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 c e)) (set (tuple21 a c))))) (sort
  (tuple2 (set1 (tuple2 c1 e1)) (set1 (tuple2 a1 c1))) (t2tb4201 x))))

(declare-fun tb2t4201 (uni) (tuple21 (set (tuple21 c e)) (set (tuple21 a
  c))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 c e)) (set (tuple21 a c)))))
  (! (= (tb2t4201 (t2tb4201 i)) i) :pattern ((t2tb4201 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 c1 e1)) (set1 (tuple2 a1 c1))) j)
     (= (t2tb4201 (tb2t4201 j)) j)) :pattern ((t2tb4201 (tb2t4201 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 c e)))) (t (set (set (tuple21 a c))))
  (x (set (tuple21 c e))) (y (set (tuple21 a c))))
  (= (mem (tuple2 (set1 (tuple2 c1 e1)) (set1 (tuple2 a1 c1)))
  (Tuple2 (set1 (tuple2 c1 e1)) (set1 (tuple2 a1 c1)) (t2tb3478 x)
  (t2tb129 y))
  (times (set1 (tuple2 a1 c1)) (set1 (tuple2 c1 e1)) (t2tb3854 s)
  (t2tb128 t))) (and (mem47 x s) (mem11 y t)))))

(declare-fun t2tb4202 ((set (tuple21 (set (tuple21 c e)) (tuple21 a
  c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 c e)) (tuple21 a c))))) (sort
  (set1 (tuple2 (set1 (tuple2 c1 e1)) (tuple2 a1 c1))) (t2tb4202 x))))

(declare-fun tb2t4202 (uni) (set (tuple21 (set (tuple21 c e)) (tuple21 a
  c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 c e)) (tuple21 a c)))))
  (! (= (tb2t4202 (t2tb4202 i)) i) :pattern ((t2tb4202 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 c1 e1)) (tuple2 a1 c1))) j)
     (= (t2tb4202 (tb2t4202 j)) j)) :pattern ((t2tb4202 (tb2t4202 j))) )))

(declare-fun t2tb4203 ((tuple21 (set (tuple21 c e)) (tuple21 a c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 c e)) (tuple21 a c)))) (sort
  (tuple2 (set1 (tuple2 c1 e1)) (tuple2 a1 c1)) (t2tb4203 x))))

(declare-fun tb2t4203 (uni) (tuple21 (set (tuple21 c e)) (tuple21 a c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 c e)) (tuple21 a c))))
  (! (= (tb2t4203 (t2tb4203 i)) i) :pattern ((t2tb4203 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 c1 e1)) (tuple2 a1 c1)) j)
     (= (t2tb4203 (tb2t4203 j)) j)) :pattern ((t2tb4203 (tb2t4203 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 c e)))) (t (set (tuple21 a c)))
  (x (set (tuple21 c e))) (y (tuple21 a c)))
  (= (mem (tuple2 (set1 (tuple2 c1 e1)) (tuple2 a1 c1))
  (Tuple2 (set1 (tuple2 c1 e1)) (tuple2 a1 c1) (t2tb3478 x) (t2tb133 y))
  (times (tuple2 a1 c1) (set1 (tuple2 c1 e1)) (t2tb3854 s) (t2tb129 t)))
  (and (mem47 x s) (mem10 y t)))))

(declare-fun t2tb4204 ((set (tuple21 (set (tuple21 c e)) c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 c e)) c)))) (sort
  (set1 (tuple2 (set1 (tuple2 c1 e1)) c1)) (t2tb4204 x))))

(declare-fun tb2t4204 (uni) (set (tuple21 (set (tuple21 c e)) c)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 c e)) c))))
  (! (= (tb2t4204 (t2tb4204 i)) i) :pattern ((t2tb4204 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 c1 e1)) c1)) j)
     (= (t2tb4204 (tb2t4204 j)) j)) :pattern ((t2tb4204 (tb2t4204 j))) )))

(declare-fun t2tb4205 ((tuple21 (set (tuple21 c e)) c)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 c e)) c))) (sort
  (tuple2 (set1 (tuple2 c1 e1)) c1) (t2tb4205 x))))

(declare-fun tb2t4205 (uni) (tuple21 (set (tuple21 c e)) c))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 c e)) c)))
  (! (= (tb2t4205 (t2tb4205 i)) i) :pattern ((t2tb4205 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 c1 e1)) c1) j)
     (= (t2tb4205 (tb2t4205 j)) j)) :pattern ((t2tb4205 (tb2t4205 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 c e)))) (t (set c)) (x (set (tuple21 c e)))
  (y c))
  (= (mem (tuple2 (set1 (tuple2 c1 e1)) c1)
  (Tuple2 (set1 (tuple2 c1 e1)) c1 (t2tb3478 x) (t2tb135 y))
  (times c1 (set1 (tuple2 c1 e1)) (t2tb3854 s) (t2tb132 t)))
  (and (mem47 x s) (mem7 y t)))))

(declare-fun t2tb4206 ((set (tuple21 (set (tuple21 c e)) (set (tuple21 a
  b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 c e)) (set (tuple21 a b)))))) (sort
  (set1 (tuple2 (set1 (tuple2 c1 e1)) (set1 (tuple2 a1 b1)))) (t2tb4206 x))))

(declare-fun tb2t4206 (uni) (set (tuple21 (set (tuple21 c e)) (set (tuple21 a
  b)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 c e)) (set (tuple21 a b))))))
  (! (= (tb2t4206 (t2tb4206 i)) i) :pattern ((t2tb4206 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 c1 e1)) (set1 (tuple2 a1 b1)))) j)
     (= (t2tb4206 (tb2t4206 j)) j)) :pattern ((t2tb4206 (tb2t4206 j))) )))

(declare-fun t2tb4207 ((tuple21 (set (tuple21 c e)) (set (tuple21 a
  b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 c e)) (set (tuple21 a b))))) (sort
  (tuple2 (set1 (tuple2 c1 e1)) (set1 (tuple2 a1 b1))) (t2tb4207 x))))

(declare-fun tb2t4207 (uni) (tuple21 (set (tuple21 c e)) (set (tuple21 a
  b))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 c e)) (set (tuple21 a b)))))
  (! (= (tb2t4207 (t2tb4207 i)) i) :pattern ((t2tb4207 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 c1 e1)) (set1 (tuple2 a1 b1))) j)
     (= (t2tb4207 (tb2t4207 j)) j)) :pattern ((t2tb4207 (tb2t4207 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 c e)))) (t (set (set (tuple21 a b))))
  (x (set (tuple21 c e))) (y (set (tuple21 a b))))
  (= (mem (tuple2 (set1 (tuple2 c1 e1)) (set1 (tuple2 a1 b1)))
  (Tuple2 (set1 (tuple2 c1 e1)) (set1 (tuple2 a1 b1)) (t2tb3478 x)
  (t2tb11 y))
  (times (set1 (tuple2 a1 b1)) (set1 (tuple2 c1 e1)) (t2tb3854 s) (t2tb10 t)))
  (and (mem47 x s) (mem4 y t)))))

(declare-fun t2tb4208 ((set (tuple21 (set (tuple21 c e)) (tuple21 a
  b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 c e)) (tuple21 a b))))) (sort
  (set1 (tuple2 (set1 (tuple2 c1 e1)) (tuple2 a1 b1))) (t2tb4208 x))))

(declare-fun tb2t4208 (uni) (set (tuple21 (set (tuple21 c e)) (tuple21 a
  b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 c e)) (tuple21 a b)))))
  (! (= (tb2t4208 (t2tb4208 i)) i) :pattern ((t2tb4208 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 c1 e1)) (tuple2 a1 b1))) j)
     (= (t2tb4208 (tb2t4208 j)) j)) :pattern ((t2tb4208 (tb2t4208 j))) )))

(declare-fun t2tb4209 ((tuple21 (set (tuple21 c e)) (tuple21 a b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 c e)) (tuple21 a b)))) (sort
  (tuple2 (set1 (tuple2 c1 e1)) (tuple2 a1 b1)) (t2tb4209 x))))

(declare-fun tb2t4209 (uni) (tuple21 (set (tuple21 c e)) (tuple21 a b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 c e)) (tuple21 a b))))
  (! (= (tb2t4209 (t2tb4209 i)) i) :pattern ((t2tb4209 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 c1 e1)) (tuple2 a1 b1)) j)
     (= (t2tb4209 (tb2t4209 j)) j)) :pattern ((t2tb4209 (tb2t4209 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 c e)))) (t (set (tuple21 a b)))
  (x (set (tuple21 c e))) (y (tuple21 a b)))
  (= (mem (tuple2 (set1 (tuple2 c1 e1)) (tuple2 a1 b1))
  (Tuple2 (set1 (tuple2 c1 e1)) (tuple2 a1 b1) (t2tb3478 x) (t2tb13 y))
  (times (tuple2 a1 b1) (set1 (tuple2 c1 e1)) (t2tb3854 s) (t2tb11 t)))
  (and (mem47 x s) (mem3 y t)))))

(declare-fun t2tb4210 ((set (tuple21 (set (tuple21 c e)) b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 c e)) b)))) (sort
  (set1 (tuple2 (set1 (tuple2 c1 e1)) b1)) (t2tb4210 x))))

(declare-fun tb2t4210 (uni) (set (tuple21 (set (tuple21 c e)) b)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 c e)) b))))
  (! (= (tb2t4210 (t2tb4210 i)) i) :pattern ((t2tb4210 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 c1 e1)) b1)) j)
     (= (t2tb4210 (tb2t4210 j)) j)) :pattern ((t2tb4210 (tb2t4210 j))) )))

(declare-fun t2tb4211 ((tuple21 (set (tuple21 c e)) b)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 c e)) b))) (sort
  (tuple2 (set1 (tuple2 c1 e1)) b1) (t2tb4211 x))))

(declare-fun tb2t4211 (uni) (tuple21 (set (tuple21 c e)) b))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 c e)) b)))
  (! (= (tb2t4211 (t2tb4211 i)) i) :pattern ((t2tb4211 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 c1 e1)) b1) j)
     (= (t2tb4211 (tb2t4211 j)) j)) :pattern ((t2tb4211 (tb2t4211 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 c e)))) (t (set b)) (x (set (tuple21 c e)))
  (y b))
  (= (mem (tuple2 (set1 (tuple2 c1 e1)) b1)
  (Tuple2 (set1 (tuple2 c1 e1)) b1 (t2tb3478 x) (t2tb14 y))
  (times b1 (set1 (tuple2 c1 e1)) (t2tb3854 s) (t2tb12 t)))
  (and (mem47 x s) (mem2 y t)))))

(declare-fun t2tb4212 ((set (tuple21 (set (tuple21 c e)) a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 c e)) a)))) (sort
  (set1 (tuple2 (set1 (tuple2 c1 e1)) a1)) (t2tb4212 x))))

(declare-fun tb2t4212 (uni) (set (tuple21 (set (tuple21 c e)) a)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 c e)) a))))
  (! (= (tb2t4212 (t2tb4212 i)) i) :pattern ((t2tb4212 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 c1 e1)) a1)) j)
     (= (t2tb4212 (tb2t4212 j)) j)) :pattern ((t2tb4212 (tb2t4212 j))) )))

(declare-fun t2tb4213 ((tuple21 (set (tuple21 c e)) a)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 c e)) a))) (sort
  (tuple2 (set1 (tuple2 c1 e1)) a1) (t2tb4213 x))))

(declare-fun tb2t4213 (uni) (tuple21 (set (tuple21 c e)) a))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 c e)) a)))
  (! (= (tb2t4213 (t2tb4213 i)) i) :pattern ((t2tb4213 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 c1 e1)) a1) j)
     (= (t2tb4213 (tb2t4213 j)) j)) :pattern ((t2tb4213 (tb2t4213 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 c e)))) (t (set a)) (x (set (tuple21 c e)))
  (y a))
  (= (mem (tuple2 (set1 (tuple2 c1 e1)) a1)
  (Tuple2 (set1 (tuple2 c1 e1)) a1 (t2tb3478 x) (t2tb2 y))
  (times a1 (set1 (tuple2 c1 e1)) (t2tb3854 s) (t2tb1 t)))
  (and (mem47 x s) (mem1 y t)))))

;; mem_times
  (assert
  (forall ((b2 ty))
  (forall ((s (set (set (tuple21 c e)))) (t uni) (x (set (tuple21 c e)))
  (y uni))
  (= (mem (tuple2 (set1 (tuple2 c1 e1)) b2)
  (Tuple2 (set1 (tuple2 c1 e1)) b2 (t2tb3478 x) y)
  (times b2 (set1 (tuple2 c1 e1)) (t2tb3854 s) t))
  (and (mem47 x s) (mem b2 y t))))))

(declare-fun t2tb4214 ((set (tuple21 (tuple21 c e) (tuple21 (tuple21 b c)
  (tuple21 d e))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 c e) (tuple21 (tuple21 b c) (tuple21 d
  e)))))) (sort
  (set1 (tuple2 (tuple2 c1 e1) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1))))
  (t2tb4214 x))))

(declare-fun tb2t4214 (uni) (set (tuple21 (tuple21 c e) (tuple21 (tuple21 b
  c) (tuple21 d e)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 c e) (tuple21 (tuple21 b c) (tuple21 d
  e)))))) (! (= (tb2t4214 (t2tb4214 i)) i) :pattern ((t2tb4214 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 c1 e1) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)))) j)
     (= (t2tb4214 (tb2t4214 j)) j)) :pattern ((t2tb4214 (tb2t4214 j))) )))

(declare-fun t2tb4215 ((tuple21 (tuple21 c e) (tuple21 (tuple21 b c)
  (tuple21 d e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 c e) (tuple21 (tuple21 b c) (tuple21 d e)))))
  (sort (tuple2 (tuple2 c1 e1) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)))
  (t2tb4215 x))))

(declare-fun tb2t4215 (uni) (tuple21 (tuple21 c e) (tuple21 (tuple21 b c)
  (tuple21 d e))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 c e) (tuple21 (tuple21 b c) (tuple21 d e)))))
  (! (= (tb2t4215 (t2tb4215 i)) i) :pattern ((t2tb4215 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 c1 e1) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)))
     j) (= (t2tb4215 (tb2t4215 j)) j)) :pattern ((t2tb4215 (tb2t4215 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 c e))) (t (set (tuple21 (tuple21 b c) (tuple21 d
  e)))) (x (tuple21 c e)) (y (tuple21 (tuple21 b c) (tuple21 d e))))
  (= (mem (tuple2 (tuple2 c1 e1) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)))
  (Tuple2 (tuple2 c1 e1) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (t2tb3479 x)
  (t2tb4104 y))
  (times (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (tuple2 c1 e1) (t2tb3478 s)
  (t2tb4102 t))) (and (mem46 x s) (mem49 y t)))))

(declare-fun t2tb4216 ((set (tuple21 (tuple21 c e) (tuple21 a (tuple21 d
  e))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 c e) (tuple21 a (tuple21 d e)))))) (sort
  (set1 (tuple2 (tuple2 c1 e1) (tuple2 a1 (tuple2 d1 e1)))) (t2tb4216 x))))

(declare-fun tb2t4216 (uni) (set (tuple21 (tuple21 c e) (tuple21 a (tuple21 d
  e)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 c e) (tuple21 a (tuple21 d e))))))
  (! (= (tb2t4216 (t2tb4216 i)) i) :pattern ((t2tb4216 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 c1 e1) (tuple2 a1 (tuple2 d1 e1)))) j)
     (= (t2tb4216 (tb2t4216 j)) j)) :pattern ((t2tb4216 (tb2t4216 j))) )))

(declare-fun t2tb4217 ((tuple21 (tuple21 c e) (tuple21 a (tuple21 d
  e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 c e) (tuple21 a (tuple21 d e))))) (sort
  (tuple2 (tuple2 c1 e1) (tuple2 a1 (tuple2 d1 e1))) (t2tb4217 x))))

(declare-fun tb2t4217 (uni) (tuple21 (tuple21 c e) (tuple21 a (tuple21 d
  e))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 c e) (tuple21 a (tuple21 d e)))))
  (! (= (tb2t4217 (t2tb4217 i)) i) :pattern ((t2tb4217 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 c1 e1) (tuple2 a1 (tuple2 d1 e1))) j)
     (= (t2tb4217 (tb2t4217 j)) j)) :pattern ((t2tb4217 (tb2t4217 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 c e))) (t (set (tuple21 a (tuple21 d e))))
  (x (tuple21 c e)) (y (tuple21 a (tuple21 d e))))
  (= (mem (tuple2 (tuple2 c1 e1) (tuple2 a1 (tuple2 d1 e1)))
  (Tuple2 (tuple2 c1 e1) (tuple2 a1 (tuple2 d1 e1)) (t2tb3479 x)
  (t2tb4105 y))
  (times (tuple2 a1 (tuple2 d1 e1)) (tuple2 c1 e1) (t2tb3478 s) (t2tb4103 t)))
  (and (mem46 x s) (mem48 y t)))))

(declare-fun t2tb4218 ((set (tuple21 (tuple21 c e) (set (tuple21 c
  e))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 c e) (set (tuple21 c e)))))) (sort
  (set1 (tuple2 (tuple2 c1 e1) (set1 (tuple2 c1 e1)))) (t2tb4218 x))))

(declare-fun tb2t4218 (uni) (set (tuple21 (tuple21 c e) (set (tuple21 c
  e)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 c e) (set (tuple21 c e))))))
  (! (= (tb2t4218 (t2tb4218 i)) i) :pattern ((t2tb4218 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 c1 e1) (set1 (tuple2 c1 e1)))) j)
     (= (t2tb4218 (tb2t4218 j)) j)) :pattern ((t2tb4218 (tb2t4218 j))) )))

(declare-fun t2tb4219 ((tuple21 (tuple21 c e) (set (tuple21 c e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 c e) (set (tuple21 c e))))) (sort
  (tuple2 (tuple2 c1 e1) (set1 (tuple2 c1 e1))) (t2tb4219 x))))

(declare-fun tb2t4219 (uni) (tuple21 (tuple21 c e) (set (tuple21 c e))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 c e) (set (tuple21 c e)))))
  (! (= (tb2t4219 (t2tb4219 i)) i) :pattern ((t2tb4219 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 c1 e1) (set1 (tuple2 c1 e1))) j)
     (= (t2tb4219 (tb2t4219 j)) j)) :pattern ((t2tb4219 (tb2t4219 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 c e))) (t (set (set (tuple21 c e))))
  (x (tuple21 c e)) (y (set (tuple21 c e))))
  (= (mem (tuple2 (tuple2 c1 e1) (set1 (tuple2 c1 e1)))
  (Tuple2 (tuple2 c1 e1) (set1 (tuple2 c1 e1)) (t2tb3479 x) (t2tb3478 y))
  (times (set1 (tuple2 c1 e1)) (tuple2 c1 e1) (t2tb3478 s) (t2tb3854 t)))
  (and (mem46 x s) (mem47 y t)))))

(declare-fun t2tb4220 ((set (tuple21 (tuple21 c e) (tuple21 c e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 c e) (tuple21 c e))))) (sort
  (set1 (tuple2 (tuple2 c1 e1) (tuple2 c1 e1))) (t2tb4220 x))))

(declare-fun tb2t4220 (uni) (set (tuple21 (tuple21 c e) (tuple21 c e))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 c e) (tuple21 c e)))))
  (! (= (tb2t4220 (t2tb4220 i)) i) :pattern ((t2tb4220 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 c1 e1) (tuple2 c1 e1))) j)
     (= (t2tb4220 (tb2t4220 j)) j)) :pattern ((t2tb4220 (tb2t4220 j))) )))

(declare-fun t2tb4221 ((tuple21 (tuple21 c e) (tuple21 c e))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 c e) (tuple21 c e)))) (sort
  (tuple2 (tuple2 c1 e1) (tuple2 c1 e1)) (t2tb4221 x))))

(declare-fun tb2t4221 (uni) (tuple21 (tuple21 c e) (tuple21 c e)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 c e) (tuple21 c e))))
  (! (= (tb2t4221 (t2tb4221 i)) i) :pattern ((t2tb4221 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 c1 e1) (tuple2 c1 e1)) j)
     (= (t2tb4221 (tb2t4221 j)) j)) :pattern ((t2tb4221 (tb2t4221 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 c e))) (t (set (tuple21 c e))) (x (tuple21 c e))
  (y (tuple21 c e)))
  (= (mem (tuple2 (tuple2 c1 e1) (tuple2 c1 e1))
  (Tuple2 (tuple2 c1 e1) (tuple2 c1 e1) (t2tb3479 x) (t2tb3479 y))
  (times (tuple2 c1 e1) (tuple2 c1 e1) (t2tb3478 s) (t2tb3478 t)))
  (and (mem46 x s) (mem46 y t)))))

(declare-fun t2tb4222 ((set (tuple21 (tuple21 c e) (tuple21 a e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 c e) (tuple21 a e))))) (sort
  (set1 (tuple2 (tuple2 c1 e1) (tuple2 a1 e1))) (t2tb4222 x))))

(declare-fun tb2t4222 (uni) (set (tuple21 (tuple21 c e) (tuple21 a e))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 c e) (tuple21 a e)))))
  (! (= (tb2t4222 (t2tb4222 i)) i) :pattern ((t2tb4222 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 c1 e1) (tuple2 a1 e1))) j)
     (= (t2tb4222 (tb2t4222 j)) j)) :pattern ((t2tb4222 (tb2t4222 j))) )))

(declare-fun t2tb4223 ((tuple21 (tuple21 c e) (tuple21 a e))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 c e) (tuple21 a e)))) (sort
  (tuple2 (tuple2 c1 e1) (tuple2 a1 e1)) (t2tb4223 x))))

(declare-fun tb2t4223 (uni) (tuple21 (tuple21 c e) (tuple21 a e)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 c e) (tuple21 a e))))
  (! (= (tb2t4223 (t2tb4223 i)) i) :pattern ((t2tb4223 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 c1 e1) (tuple2 a1 e1)) j)
     (= (t2tb4223 (tb2t4223 j)) j)) :pattern ((t2tb4223 (tb2t4223 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 c e))) (t (set (tuple21 a e))) (x (tuple21 c e))
  (y (tuple21 a e)))
  (= (mem (tuple2 (tuple2 c1 e1) (tuple2 a1 e1))
  (Tuple2 (tuple2 c1 e1) (tuple2 a1 e1) (t2tb3479 x) (t2tb2949 y))
  (times (tuple2 a1 e1) (tuple2 c1 e1) (t2tb3478 s) (t2tb2943 t)))
  (and (mem46 x s) (mem44 y t)))))

(declare-fun t2tb4224 ((set (tuple21 (tuple21 c e) e))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 c e) e)))) (sort
  (set1 (tuple2 (tuple2 c1 e1) e1)) (t2tb4224 x))))

(declare-fun tb2t4224 (uni) (set (tuple21 (tuple21 c e) e)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 c e) e))))
  (! (= (tb2t4224 (t2tb4224 i)) i) :pattern ((t2tb4224 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 c1 e1) e1)) j)
     (= (t2tb4224 (tb2t4224 j)) j)) :pattern ((t2tb4224 (tb2t4224 j))) )))

(declare-fun t2tb4225 ((tuple21 (tuple21 c e) e)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 c e) e))) (sort (tuple2 (tuple2 c1 e1) e1)
  (t2tb4225 x))))

(declare-fun tb2t4225 (uni) (tuple21 (tuple21 c e) e))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 c e) e)))
  (! (= (tb2t4225 (t2tb4225 i)) i) :pattern ((t2tb4225 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 c1 e1) e1) j) (= (t2tb4225 (tb2t4225 j)) j)) :pattern (
  (t2tb4225 (tb2t4225 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 c e))) (t (set e)) (x (tuple21 c e)) (y e))
  (= (mem (tuple2 (tuple2 c1 e1) e1)
  (Tuple2 (tuple2 c1 e1) e1 (t2tb3479 x) (t2tb2955 y))
  (times e1 (tuple2 c1 e1) (t2tb3478 s) (t2tb2947 t)))
  (and (mem46 x s) (mem36 y t)))))

(declare-fun t2tb4226 ((set (tuple21 (tuple21 c e) (tuple21 a d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 c e) (tuple21 a d))))) (sort
  (set1 (tuple2 (tuple2 c1 e1) (tuple2 a1 d1))) (t2tb4226 x))))

(declare-fun tb2t4226 (uni) (set (tuple21 (tuple21 c e) (tuple21 a d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 c e) (tuple21 a d)))))
  (! (= (tb2t4226 (t2tb4226 i)) i) :pattern ((t2tb4226 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 c1 e1) (tuple2 a1 d1))) j)
     (= (t2tb4226 (tb2t4226 j)) j)) :pattern ((t2tb4226 (tb2t4226 j))) )))

(declare-fun t2tb4227 ((tuple21 (tuple21 c e) (tuple21 a d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 c e) (tuple21 a d)))) (sort
  (tuple2 (tuple2 c1 e1) (tuple2 a1 d1)) (t2tb4227 x))))

(declare-fun tb2t4227 (uni) (tuple21 (tuple21 c e) (tuple21 a d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 c e) (tuple21 a d))))
  (! (= (tb2t4227 (t2tb4227 i)) i) :pattern ((t2tb4227 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 c1 e1) (tuple2 a1 d1)) j)
     (= (t2tb4227 (tb2t4227 j)) j)) :pattern ((t2tb4227 (tb2t4227 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 c e))) (t (set (tuple21 a d))) (x (tuple21 c e))
  (y (tuple21 a d)))
  (= (mem (tuple2 (tuple2 c1 e1) (tuple2 a1 d1))
  (Tuple2 (tuple2 c1 e1) (tuple2 a1 d1) (t2tb3479 x) (t2tb904 y))
  (times (tuple2 a1 d1) (tuple2 c1 e1) (t2tb3478 s) (t2tb903 t)))
  (and (mem46 x s) (mem32 y t)))))

(declare-fun t2tb4228 ((set (tuple21 (tuple21 c e) (set (tuple21 b
  d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 c e) (set (tuple21 b d)))))) (sort
  (set1 (tuple2 (tuple2 c1 e1) (set1 (tuple2 b1 d1)))) (t2tb4228 x))))

(declare-fun tb2t4228 (uni) (set (tuple21 (tuple21 c e) (set (tuple21 b
  d)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 c e) (set (tuple21 b d))))))
  (! (= (tb2t4228 (t2tb4228 i)) i) :pattern ((t2tb4228 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 c1 e1) (set1 (tuple2 b1 d1)))) j)
     (= (t2tb4228 (tb2t4228 j)) j)) :pattern ((t2tb4228 (tb2t4228 j))) )))

(declare-fun t2tb4229 ((tuple21 (tuple21 c e) (set (tuple21 b d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 c e) (set (tuple21 b d))))) (sort
  (tuple2 (tuple2 c1 e1) (set1 (tuple2 b1 d1))) (t2tb4229 x))))

(declare-fun tb2t4229 (uni) (tuple21 (tuple21 c e) (set (tuple21 b d))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 c e) (set (tuple21 b d)))))
  (! (= (tb2t4229 (t2tb4229 i)) i) :pattern ((t2tb4229 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 c1 e1) (set1 (tuple2 b1 d1))) j)
     (= (t2tb4229 (tb2t4229 j)) j)) :pattern ((t2tb4229 (tb2t4229 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 c e))) (t (set (set (tuple21 b d))))
  (x (tuple21 c e)) (y (set (tuple21 b d))))
  (= (mem (tuple2 (tuple2 c1 e1) (set1 (tuple2 b1 d1)))
  (Tuple2 (tuple2 c1 e1) (set1 (tuple2 b1 d1)) (t2tb3479 x) (t2tb687 y))
  (times (set1 (tuple2 b1 d1)) (tuple2 c1 e1) (t2tb3478 s) (t2tb906 t)))
  (and (mem46 x s) (mem33 y t)))))

(declare-fun t2tb4230 ((set (tuple21 (tuple21 c e) (tuple21 b d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 c e) (tuple21 b d))))) (sort
  (set1 (tuple2 (tuple2 c1 e1) (tuple2 b1 d1))) (t2tb4230 x))))

(declare-fun tb2t4230 (uni) (set (tuple21 (tuple21 c e) (tuple21 b d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 c e) (tuple21 b d)))))
  (! (= (tb2t4230 (t2tb4230 i)) i) :pattern ((t2tb4230 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 c1 e1) (tuple2 b1 d1))) j)
     (= (t2tb4230 (tb2t4230 j)) j)) :pattern ((t2tb4230 (tb2t4230 j))) )))

(declare-fun t2tb4231 ((tuple21 (tuple21 c e) (tuple21 b d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 c e) (tuple21 b d)))) (sort
  (tuple2 (tuple2 c1 e1) (tuple2 b1 d1)) (t2tb4231 x))))

(declare-fun tb2t4231 (uni) (tuple21 (tuple21 c e) (tuple21 b d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 c e) (tuple21 b d))))
  (! (= (tb2t4231 (t2tb4231 i)) i) :pattern ((t2tb4231 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 c1 e1) (tuple2 b1 d1)) j)
     (= (t2tb4231 (tb2t4231 j)) j)) :pattern ((t2tb4231 (tb2t4231 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 c e))) (t (set (tuple21 b d))) (x (tuple21 c e))
  (y (tuple21 b d)))
  (= (mem (tuple2 (tuple2 c1 e1) (tuple2 b1 d1))
  (Tuple2 (tuple2 c1 e1) (tuple2 b1 d1) (t2tb3479 x) (t2tb692 y))
  (times (tuple2 b1 d1) (tuple2 c1 e1) (t2tb3478 s) (t2tb687 t)))
  (and (mem46 x s) (mem23 y t)))))

(declare-fun t2tb4232 ((set (tuple21 (tuple21 c e) d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 c e) d)))) (sort
  (set1 (tuple2 (tuple2 c1 e1) d1)) (t2tb4232 x))))

(declare-fun tb2t4232 (uni) (set (tuple21 (tuple21 c e) d)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 c e) d))))
  (! (= (tb2t4232 (t2tb4232 i)) i) :pattern ((t2tb4232 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 c1 e1) d1)) j)
     (= (t2tb4232 (tb2t4232 j)) j)) :pattern ((t2tb4232 (tb2t4232 j))) )))

(declare-fun t2tb4233 ((tuple21 (tuple21 c e) d)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 c e) d))) (sort (tuple2 (tuple2 c1 e1) d1)
  (t2tb4233 x))))

(declare-fun tb2t4233 (uni) (tuple21 (tuple21 c e) d))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 c e) d)))
  (! (= (tb2t4233 (t2tb4233 i)) i) :pattern ((t2tb4233 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 c1 e1) d1) j) (= (t2tb4233 (tb2t4233 j)) j)) :pattern (
  (t2tb4233 (tb2t4233 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 c e))) (t (set d)) (x (tuple21 c e)) (y d))
  (= (mem (tuple2 (tuple2 c1 e1) d1)
  (Tuple2 (tuple2 c1 e1) d1 (t2tb3479 x) (t2tb694 y))
  (times d1 (tuple2 c1 e1) (t2tb3478 s) (t2tb690 t)))
  (and (mem46 x s) (mem20 y t)))))

(declare-fun t2tb4234 ((set (tuple21 (tuple21 c e) (tuple21 a (tuple21 b
  c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 c e) (tuple21 a (tuple21 b c)))))) (sort
  (set1 (tuple2 (tuple2 c1 e1) (tuple2 a1 (tuple2 b1 c1)))) (t2tb4234 x))))

(declare-fun tb2t4234 (uni) (set (tuple21 (tuple21 c e) (tuple21 a (tuple21 b
  c)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 c e) (tuple21 a (tuple21 b c))))))
  (! (= (tb2t4234 (t2tb4234 i)) i) :pattern ((t2tb4234 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 c1 e1) (tuple2 a1 (tuple2 b1 c1)))) j)
     (= (t2tb4234 (tb2t4234 j)) j)) :pattern ((t2tb4234 (tb2t4234 j))) )))

(declare-fun t2tb4235 ((tuple21 (tuple21 c e) (tuple21 a (tuple21 b
  c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 c e) (tuple21 a (tuple21 b c))))) (sort
  (tuple2 (tuple2 c1 e1) (tuple2 a1 (tuple2 b1 c1))) (t2tb4235 x))))

(declare-fun tb2t4235 (uni) (tuple21 (tuple21 c e) (tuple21 a (tuple21 b
  c))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 c e) (tuple21 a (tuple21 b c)))))
  (! (= (tb2t4235 (t2tb4235 i)) i) :pattern ((t2tb4235 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 c1 e1) (tuple2 a1 (tuple2 b1 c1))) j)
     (= (t2tb4235 (tb2t4235 j)) j)) :pattern ((t2tb4235 (tb2t4235 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 c e))) (t (set (tuple21 a (tuple21 b c))))
  (x (tuple21 c e)) (y (tuple21 a (tuple21 b c))))
  (= (mem (tuple2 (tuple2 c1 e1) (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 (tuple2 c1 e1) (tuple2 a1 (tuple2 b1 c1)) (t2tb3479 x) (t2tb260 y))
  (times (tuple2 a1 (tuple2 b1 c1)) (tuple2 c1 e1) (t2tb3478 s) (t2tb261 t)))
  (and (mem46 x s) (mem14 y t)))))

(declare-fun t2tb4236 ((set (tuple21 (tuple21 c e) (set (tuple21 a
  c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 c e) (set (tuple21 a c)))))) (sort
  (set1 (tuple2 (tuple2 c1 e1) (set1 (tuple2 a1 c1)))) (t2tb4236 x))))

(declare-fun tb2t4236 (uni) (set (tuple21 (tuple21 c e) (set (tuple21 a
  c)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 c e) (set (tuple21 a c))))))
  (! (= (tb2t4236 (t2tb4236 i)) i) :pattern ((t2tb4236 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 c1 e1) (set1 (tuple2 a1 c1)))) j)
     (= (t2tb4236 (tb2t4236 j)) j)) :pattern ((t2tb4236 (tb2t4236 j))) )))

(declare-fun t2tb4237 ((tuple21 (tuple21 c e) (set (tuple21 a c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 c e) (set (tuple21 a c))))) (sort
  (tuple2 (tuple2 c1 e1) (set1 (tuple2 a1 c1))) (t2tb4237 x))))

(declare-fun tb2t4237 (uni) (tuple21 (tuple21 c e) (set (tuple21 a c))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 c e) (set (tuple21 a c)))))
  (! (= (tb2t4237 (t2tb4237 i)) i) :pattern ((t2tb4237 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 c1 e1) (set1 (tuple2 a1 c1))) j)
     (= (t2tb4237 (tb2t4237 j)) j)) :pattern ((t2tb4237 (tb2t4237 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 c e))) (t (set (set (tuple21 a c))))
  (x (tuple21 c e)) (y (set (tuple21 a c))))
  (= (mem (tuple2 (tuple2 c1 e1) (set1 (tuple2 a1 c1)))
  (Tuple2 (tuple2 c1 e1) (set1 (tuple2 a1 c1)) (t2tb3479 x) (t2tb129 y))
  (times (set1 (tuple2 a1 c1)) (tuple2 c1 e1) (t2tb3478 s) (t2tb128 t)))
  (and (mem46 x s) (mem11 y t)))))

(declare-fun t2tb4238 ((set (tuple21 (tuple21 c e) (tuple21 a c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 c e) (tuple21 a c))))) (sort
  (set1 (tuple2 (tuple2 c1 e1) (tuple2 a1 c1))) (t2tb4238 x))))

(declare-fun tb2t4238 (uni) (set (tuple21 (tuple21 c e) (tuple21 a c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 c e) (tuple21 a c)))))
  (! (= (tb2t4238 (t2tb4238 i)) i) :pattern ((t2tb4238 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 c1 e1) (tuple2 a1 c1))) j)
     (= (t2tb4238 (tb2t4238 j)) j)) :pattern ((t2tb4238 (tb2t4238 j))) )))

(declare-fun t2tb4239 ((tuple21 (tuple21 c e) (tuple21 a c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 c e) (tuple21 a c)))) (sort
  (tuple2 (tuple2 c1 e1) (tuple2 a1 c1)) (t2tb4239 x))))

(declare-fun tb2t4239 (uni) (tuple21 (tuple21 c e) (tuple21 a c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 c e) (tuple21 a c))))
  (! (= (tb2t4239 (t2tb4239 i)) i) :pattern ((t2tb4239 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 c1 e1) (tuple2 a1 c1)) j)
     (= (t2tb4239 (tb2t4239 j)) j)) :pattern ((t2tb4239 (tb2t4239 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 c e))) (t (set (tuple21 a c))) (x (tuple21 c e))
  (y (tuple21 a c)))
  (= (mem (tuple2 (tuple2 c1 e1) (tuple2 a1 c1))
  (Tuple2 (tuple2 c1 e1) (tuple2 a1 c1) (t2tb3479 x) (t2tb133 y))
  (times (tuple2 a1 c1) (tuple2 c1 e1) (t2tb3478 s) (t2tb129 t)))
  (and (mem46 x s) (mem10 y t)))))

(declare-fun t2tb4240 ((set (tuple21 (tuple21 c e) c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 c e) c)))) (sort
  (set1 (tuple2 (tuple2 c1 e1) c1)) (t2tb4240 x))))

(declare-fun tb2t4240 (uni) (set (tuple21 (tuple21 c e) c)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 c e) c))))
  (! (= (tb2t4240 (t2tb4240 i)) i) :pattern ((t2tb4240 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 c1 e1) c1)) j)
     (= (t2tb4240 (tb2t4240 j)) j)) :pattern ((t2tb4240 (tb2t4240 j))) )))

(declare-fun t2tb4241 ((tuple21 (tuple21 c e) c)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 c e) c))) (sort (tuple2 (tuple2 c1 e1) c1)
  (t2tb4241 x))))

(declare-fun tb2t4241 (uni) (tuple21 (tuple21 c e) c))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 c e) c)))
  (! (= (tb2t4241 (t2tb4241 i)) i) :pattern ((t2tb4241 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 c1 e1) c1) j) (= (t2tb4241 (tb2t4241 j)) j)) :pattern (
  (t2tb4241 (tb2t4241 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 c e))) (t (set c)) (x (tuple21 c e)) (y c))
  (= (mem (tuple2 (tuple2 c1 e1) c1)
  (Tuple2 (tuple2 c1 e1) c1 (t2tb3479 x) (t2tb135 y))
  (times c1 (tuple2 c1 e1) (t2tb3478 s) (t2tb132 t)))
  (and (mem46 x s) (mem7 y t)))))

(declare-fun t2tb4242 ((set (tuple21 (tuple21 c e) (set (tuple21 a
  b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 c e) (set (tuple21 a b)))))) (sort
  (set1 (tuple2 (tuple2 c1 e1) (set1 (tuple2 a1 b1)))) (t2tb4242 x))))

(declare-fun tb2t4242 (uni) (set (tuple21 (tuple21 c e) (set (tuple21 a
  b)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 c e) (set (tuple21 a b))))))
  (! (= (tb2t4242 (t2tb4242 i)) i) :pattern ((t2tb4242 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 c1 e1) (set1 (tuple2 a1 b1)))) j)
     (= (t2tb4242 (tb2t4242 j)) j)) :pattern ((t2tb4242 (tb2t4242 j))) )))

(declare-fun t2tb4243 ((tuple21 (tuple21 c e) (set (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 c e) (set (tuple21 a b))))) (sort
  (tuple2 (tuple2 c1 e1) (set1 (tuple2 a1 b1))) (t2tb4243 x))))

(declare-fun tb2t4243 (uni) (tuple21 (tuple21 c e) (set (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 c e) (set (tuple21 a b)))))
  (! (= (tb2t4243 (t2tb4243 i)) i) :pattern ((t2tb4243 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 c1 e1) (set1 (tuple2 a1 b1))) j)
     (= (t2tb4243 (tb2t4243 j)) j)) :pattern ((t2tb4243 (tb2t4243 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 c e))) (t (set (set (tuple21 a b))))
  (x (tuple21 c e)) (y (set (tuple21 a b))))
  (= (mem (tuple2 (tuple2 c1 e1) (set1 (tuple2 a1 b1)))
  (Tuple2 (tuple2 c1 e1) (set1 (tuple2 a1 b1)) (t2tb3479 x) (t2tb11 y))
  (times (set1 (tuple2 a1 b1)) (tuple2 c1 e1) (t2tb3478 s) (t2tb10 t)))
  (and (mem46 x s) (mem4 y t)))))

(declare-fun t2tb4244 ((set (tuple21 (tuple21 c e) (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 c e) (tuple21 a b))))) (sort
  (set1 (tuple2 (tuple2 c1 e1) (tuple2 a1 b1))) (t2tb4244 x))))

(declare-fun tb2t4244 (uni) (set (tuple21 (tuple21 c e) (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 c e) (tuple21 a b)))))
  (! (= (tb2t4244 (t2tb4244 i)) i) :pattern ((t2tb4244 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 c1 e1) (tuple2 a1 b1))) j)
     (= (t2tb4244 (tb2t4244 j)) j)) :pattern ((t2tb4244 (tb2t4244 j))) )))

(declare-fun t2tb4245 ((tuple21 (tuple21 c e) (tuple21 a b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 c e) (tuple21 a b)))) (sort
  (tuple2 (tuple2 c1 e1) (tuple2 a1 b1)) (t2tb4245 x))))

(declare-fun tb2t4245 (uni) (tuple21 (tuple21 c e) (tuple21 a b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 c e) (tuple21 a b))))
  (! (= (tb2t4245 (t2tb4245 i)) i) :pattern ((t2tb4245 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 c1 e1) (tuple2 a1 b1)) j)
     (= (t2tb4245 (tb2t4245 j)) j)) :pattern ((t2tb4245 (tb2t4245 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 c e))) (t (set (tuple21 a b))) (x (tuple21 c e))
  (y (tuple21 a b)))
  (= (mem (tuple2 (tuple2 c1 e1) (tuple2 a1 b1))
  (Tuple2 (tuple2 c1 e1) (tuple2 a1 b1) (t2tb3479 x) (t2tb13 y))
  (times (tuple2 a1 b1) (tuple2 c1 e1) (t2tb3478 s) (t2tb11 t)))
  (and (mem46 x s) (mem3 y t)))))

(declare-fun t2tb4246 ((set (tuple21 (tuple21 c e) b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 c e) b)))) (sort
  (set1 (tuple2 (tuple2 c1 e1) b1)) (t2tb4246 x))))

(declare-fun tb2t4246 (uni) (set (tuple21 (tuple21 c e) b)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 c e) b))))
  (! (= (tb2t4246 (t2tb4246 i)) i) :pattern ((t2tb4246 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 c1 e1) b1)) j)
     (= (t2tb4246 (tb2t4246 j)) j)) :pattern ((t2tb4246 (tb2t4246 j))) )))

(declare-fun t2tb4247 ((tuple21 (tuple21 c e) b)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 c e) b))) (sort (tuple2 (tuple2 c1 e1) b1)
  (t2tb4247 x))))

(declare-fun tb2t4247 (uni) (tuple21 (tuple21 c e) b))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 c e) b)))
  (! (= (tb2t4247 (t2tb4247 i)) i) :pattern ((t2tb4247 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 c1 e1) b1) j) (= (t2tb4247 (tb2t4247 j)) j)) :pattern (
  (t2tb4247 (tb2t4247 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 c e))) (t (set b)) (x (tuple21 c e)) (y b))
  (= (mem (tuple2 (tuple2 c1 e1) b1)
  (Tuple2 (tuple2 c1 e1) b1 (t2tb3479 x) (t2tb14 y))
  (times b1 (tuple2 c1 e1) (t2tb3478 s) (t2tb12 t)))
  (and (mem46 x s) (mem2 y t)))))

(declare-fun t2tb4248 ((set (tuple21 (tuple21 c e) a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 c e) a)))) (sort
  (set1 (tuple2 (tuple2 c1 e1) a1)) (t2tb4248 x))))

(declare-fun tb2t4248 (uni) (set (tuple21 (tuple21 c e) a)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 c e) a))))
  (! (= (tb2t4248 (t2tb4248 i)) i) :pattern ((t2tb4248 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 c1 e1) a1)) j)
     (= (t2tb4248 (tb2t4248 j)) j)) :pattern ((t2tb4248 (tb2t4248 j))) )))

(declare-fun t2tb4249 ((tuple21 (tuple21 c e) a)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 c e) a))) (sort (tuple2 (tuple2 c1 e1) a1)
  (t2tb4249 x))))

(declare-fun tb2t4249 (uni) (tuple21 (tuple21 c e) a))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 c e) a)))
  (! (= (tb2t4249 (t2tb4249 i)) i) :pattern ((t2tb4249 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 c1 e1) a1) j) (= (t2tb4249 (tb2t4249 j)) j)) :pattern (
  (t2tb4249 (tb2t4249 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 c e))) (t (set a)) (x (tuple21 c e)) (y a))
  (= (mem (tuple2 (tuple2 c1 e1) a1)
  (Tuple2 (tuple2 c1 e1) a1 (t2tb3479 x) (t2tb2 y))
  (times a1 (tuple2 c1 e1) (t2tb3478 s) (t2tb1 t)))
  (and (mem46 x s) (mem1 y t)))))

;; mem_times
  (assert
  (forall ((b2 ty))
  (forall ((s (set (tuple21 c e))) (t uni) (x (tuple21 c e)) (y uni))
  (= (mem (tuple2 (tuple2 c1 e1) b2)
  (Tuple2 (tuple2 c1 e1) b2 (t2tb3479 x) y)
  (times b2 (tuple2 c1 e1) (t2tb3478 s) t)) (and (mem46 x s) (mem b2 y t))))))

(declare-fun t2tb4250 ((set (tuple21 (tuple21 a e) (tuple21 (tuple21 b c)
  (tuple21 d e))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a e) (tuple21 (tuple21 b c) (tuple21 d
  e)))))) (sort
  (set1 (tuple2 (tuple2 a1 e1) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1))))
  (t2tb4250 x))))

(declare-fun tb2t4250 (uni) (set (tuple21 (tuple21 a e) (tuple21 (tuple21 b
  c) (tuple21 d e)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a e) (tuple21 (tuple21 b c) (tuple21 d
  e)))))) (! (= (tb2t4250 (t2tb4250 i)) i) :pattern ((t2tb4250 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 a1 e1) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)))) j)
     (= (t2tb4250 (tb2t4250 j)) j)) :pattern ((t2tb4250 (tb2t4250 j))) )))

(declare-fun t2tb4251 ((tuple21 (tuple21 a e) (tuple21 (tuple21 b c)
  (tuple21 d e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a e) (tuple21 (tuple21 b c) (tuple21 d e)))))
  (sort (tuple2 (tuple2 a1 e1) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)))
  (t2tb4251 x))))

(declare-fun tb2t4251 (uni) (tuple21 (tuple21 a e) (tuple21 (tuple21 b c)
  (tuple21 d e))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a e) (tuple21 (tuple21 b c) (tuple21 d e)))))
  (! (= (tb2t4251 (t2tb4251 i)) i) :pattern ((t2tb4251 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 e1) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)))
     j) (= (t2tb4251 (tb2t4251 j)) j)) :pattern ((t2tb4251 (tb2t4251 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a e))) (t (set (tuple21 (tuple21 b c) (tuple21 d
  e)))) (x (tuple21 a e)) (y (tuple21 (tuple21 b c) (tuple21 d e))))
  (= (mem (tuple2 (tuple2 a1 e1) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)))
  (Tuple2 (tuple2 a1 e1) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (t2tb2949 x)
  (t2tb4104 y))
  (times (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (tuple2 a1 e1) (t2tb2943 s)
  (t2tb4102 t))) (and (mem44 x s) (mem49 y t)))))

(declare-fun t2tb4252 ((set (tuple21 (tuple21 a e) (tuple21 a (tuple21 d
  e))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a e) (tuple21 a (tuple21 d e)))))) (sort
  (set1 (tuple2 (tuple2 a1 e1) (tuple2 a1 (tuple2 d1 e1)))) (t2tb4252 x))))

(declare-fun tb2t4252 (uni) (set (tuple21 (tuple21 a e) (tuple21 a (tuple21 d
  e)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a e) (tuple21 a (tuple21 d e))))))
  (! (= (tb2t4252 (t2tb4252 i)) i) :pattern ((t2tb4252 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 e1) (tuple2 a1 (tuple2 d1 e1)))) j)
     (= (t2tb4252 (tb2t4252 j)) j)) :pattern ((t2tb4252 (tb2t4252 j))) )))

(declare-fun t2tb4253 ((tuple21 (tuple21 a e) (tuple21 a (tuple21 d
  e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a e) (tuple21 a (tuple21 d e))))) (sort
  (tuple2 (tuple2 a1 e1) (tuple2 a1 (tuple2 d1 e1))) (t2tb4253 x))))

(declare-fun tb2t4253 (uni) (tuple21 (tuple21 a e) (tuple21 a (tuple21 d
  e))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a e) (tuple21 a (tuple21 d e)))))
  (! (= (tb2t4253 (t2tb4253 i)) i) :pattern ((t2tb4253 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 e1) (tuple2 a1 (tuple2 d1 e1))) j)
     (= (t2tb4253 (tb2t4253 j)) j)) :pattern ((t2tb4253 (tb2t4253 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a e))) (t (set (tuple21 a (tuple21 d e))))
  (x (tuple21 a e)) (y (tuple21 a (tuple21 d e))))
  (= (mem (tuple2 (tuple2 a1 e1) (tuple2 a1 (tuple2 d1 e1)))
  (Tuple2 (tuple2 a1 e1) (tuple2 a1 (tuple2 d1 e1)) (t2tb2949 x)
  (t2tb4105 y))
  (times (tuple2 a1 (tuple2 d1 e1)) (tuple2 a1 e1) (t2tb2943 s) (t2tb4103 t)))
  (and (mem44 x s) (mem48 y t)))))

(declare-fun t2tb4254 ((set (tuple21 (tuple21 a e) (set (tuple21 c
  e))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a e) (set (tuple21 c e)))))) (sort
  (set1 (tuple2 (tuple2 a1 e1) (set1 (tuple2 c1 e1)))) (t2tb4254 x))))

(declare-fun tb2t4254 (uni) (set (tuple21 (tuple21 a e) (set (tuple21 c
  e)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a e) (set (tuple21 c e))))))
  (! (= (tb2t4254 (t2tb4254 i)) i) :pattern ((t2tb4254 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 e1) (set1 (tuple2 c1 e1)))) j)
     (= (t2tb4254 (tb2t4254 j)) j)) :pattern ((t2tb4254 (tb2t4254 j))) )))

(declare-fun t2tb4255 ((tuple21 (tuple21 a e) (set (tuple21 c e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a e) (set (tuple21 c e))))) (sort
  (tuple2 (tuple2 a1 e1) (set1 (tuple2 c1 e1))) (t2tb4255 x))))

(declare-fun tb2t4255 (uni) (tuple21 (tuple21 a e) (set (tuple21 c e))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a e) (set (tuple21 c e)))))
  (! (= (tb2t4255 (t2tb4255 i)) i) :pattern ((t2tb4255 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 e1) (set1 (tuple2 c1 e1))) j)
     (= (t2tb4255 (tb2t4255 j)) j)) :pattern ((t2tb4255 (tb2t4255 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a e))) (t (set (set (tuple21 c e))))
  (x (tuple21 a e)) (y (set (tuple21 c e))))
  (= (mem (tuple2 (tuple2 a1 e1) (set1 (tuple2 c1 e1)))
  (Tuple2 (tuple2 a1 e1) (set1 (tuple2 c1 e1)) (t2tb2949 x) (t2tb3478 y))
  (times (set1 (tuple2 c1 e1)) (tuple2 a1 e1) (t2tb2943 s) (t2tb3854 t)))
  (and (mem44 x s) (mem47 y t)))))

(declare-fun t2tb4256 ((set (tuple21 (tuple21 a e) (tuple21 c e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a e) (tuple21 c e))))) (sort
  (set1 (tuple2 (tuple2 a1 e1) (tuple2 c1 e1))) (t2tb4256 x))))

(declare-fun tb2t4256 (uni) (set (tuple21 (tuple21 a e) (tuple21 c e))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a e) (tuple21 c e)))))
  (! (= (tb2t4256 (t2tb4256 i)) i) :pattern ((t2tb4256 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 e1) (tuple2 c1 e1))) j)
     (= (t2tb4256 (tb2t4256 j)) j)) :pattern ((t2tb4256 (tb2t4256 j))) )))

(declare-fun t2tb4257 ((tuple21 (tuple21 a e) (tuple21 c e))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a e) (tuple21 c e)))) (sort
  (tuple2 (tuple2 a1 e1) (tuple2 c1 e1)) (t2tb4257 x))))

(declare-fun tb2t4257 (uni) (tuple21 (tuple21 a e) (tuple21 c e)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a e) (tuple21 c e))))
  (! (= (tb2t4257 (t2tb4257 i)) i) :pattern ((t2tb4257 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 e1) (tuple2 c1 e1)) j)
     (= (t2tb4257 (tb2t4257 j)) j)) :pattern ((t2tb4257 (tb2t4257 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a e))) (t (set (tuple21 c e))) (x (tuple21 a e))
  (y (tuple21 c e)))
  (= (mem (tuple2 (tuple2 a1 e1) (tuple2 c1 e1))
  (Tuple2 (tuple2 a1 e1) (tuple2 c1 e1) (t2tb2949 x) (t2tb3479 y))
  (times (tuple2 c1 e1) (tuple2 a1 e1) (t2tb2943 s) (t2tb3478 t)))
  (and (mem44 x s) (mem46 y t)))))

(declare-fun t2tb2996 ((set (tuple21 (tuple21 a e) (tuple21 a e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a e) (tuple21 a e))))) (sort
  (set1 (tuple2 (tuple2 a1 e1) (tuple2 a1 e1))) (t2tb2996 x))))

(declare-fun tb2t2996 (uni) (set (tuple21 (tuple21 a e) (tuple21 a e))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a e) (tuple21 a e)))))
  (! (= (tb2t2996 (t2tb2996 i)) i) :pattern ((t2tb2996 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 e1) (tuple2 a1 e1))) j)
     (= (t2tb2996 (tb2t2996 j)) j)) :pattern ((t2tb2996 (tb2t2996 j))) )))

(declare-fun t2tb2997 ((tuple21 (tuple21 a e) (tuple21 a e))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a e) (tuple21 a e)))) (sort
  (tuple2 (tuple2 a1 e1) (tuple2 a1 e1)) (t2tb2997 x))))

(declare-fun tb2t2997 (uni) (tuple21 (tuple21 a e) (tuple21 a e)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a e) (tuple21 a e))))
  (! (= (tb2t2997 (t2tb2997 i)) i) :pattern ((t2tb2997 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 e1) (tuple2 a1 e1)) j)
     (= (t2tb2997 (tb2t2997 j)) j)) :pattern ((t2tb2997 (tb2t2997 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a e))) (t (set (tuple21 a e))) (x (tuple21 a e))
  (y (tuple21 a e)))
  (= (mem (tuple2 (tuple2 a1 e1) (tuple2 a1 e1))
  (Tuple2 (tuple2 a1 e1) (tuple2 a1 e1) (t2tb2949 x) (t2tb2949 y))
  (times (tuple2 a1 e1) (tuple2 a1 e1) (t2tb2943 s) (t2tb2943 t)))
  (and (mem44 x s) (mem44 y t)))))

(declare-fun t2tb3012 ((set (tuple21 (tuple21 a e) e))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a e) e)))) (sort
  (set1 (tuple2 (tuple2 a1 e1) e1)) (t2tb3012 x))))

(declare-fun tb2t3012 (uni) (set (tuple21 (tuple21 a e) e)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a e) e))))
  (! (= (tb2t3012 (t2tb3012 i)) i) :pattern ((t2tb3012 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 e1) e1)) j)
     (= (t2tb3012 (tb2t3012 j)) j)) :pattern ((t2tb3012 (tb2t3012 j))) )))

(declare-fun t2tb3013 ((tuple21 (tuple21 a e) e)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a e) e))) (sort (tuple2 (tuple2 a1 e1) e1)
  (t2tb3013 x))))

(declare-fun tb2t3013 (uni) (tuple21 (tuple21 a e) e))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a e) e)))
  (! (= (tb2t3013 (t2tb3013 i)) i) :pattern ((t2tb3013 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 e1) e1) j) (= (t2tb3013 (tb2t3013 j)) j)) :pattern (
  (t2tb3013 (tb2t3013 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a e))) (t (set e)) (x (tuple21 a e)) (y e))
  (= (mem (tuple2 (tuple2 a1 e1) e1)
  (Tuple2 (tuple2 a1 e1) e1 (t2tb2949 x) (t2tb2955 y))
  (times e1 (tuple2 a1 e1) (t2tb2943 s) (t2tb2947 t)))
  (and (mem44 x s) (mem36 y t)))))

(declare-fun t2tb4258 ((set (tuple21 (tuple21 a e) (tuple21 a d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a e) (tuple21 a d))))) (sort
  (set1 (tuple2 (tuple2 a1 e1) (tuple2 a1 d1))) (t2tb4258 x))))

(declare-fun tb2t4258 (uni) (set (tuple21 (tuple21 a e) (tuple21 a d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a e) (tuple21 a d)))))
  (! (= (tb2t4258 (t2tb4258 i)) i) :pattern ((t2tb4258 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 e1) (tuple2 a1 d1))) j)
     (= (t2tb4258 (tb2t4258 j)) j)) :pattern ((t2tb4258 (tb2t4258 j))) )))

(declare-fun t2tb4259 ((tuple21 (tuple21 a e) (tuple21 a d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a e) (tuple21 a d)))) (sort
  (tuple2 (tuple2 a1 e1) (tuple2 a1 d1)) (t2tb4259 x))))

(declare-fun tb2t4259 (uni) (tuple21 (tuple21 a e) (tuple21 a d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a e) (tuple21 a d))))
  (! (= (tb2t4259 (t2tb4259 i)) i) :pattern ((t2tb4259 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 e1) (tuple2 a1 d1)) j)
     (= (t2tb4259 (tb2t4259 j)) j)) :pattern ((t2tb4259 (tb2t4259 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a e))) (t (set (tuple21 a d))) (x (tuple21 a e))
  (y (tuple21 a d)))
  (= (mem (tuple2 (tuple2 a1 e1) (tuple2 a1 d1))
  (Tuple2 (tuple2 a1 e1) (tuple2 a1 d1) (t2tb2949 x) (t2tb904 y))
  (times (tuple2 a1 d1) (tuple2 a1 e1) (t2tb2943 s) (t2tb903 t)))
  (and (mem44 x s) (mem32 y t)))))

(declare-fun t2tb4260 ((set (tuple21 (tuple21 a e) (set (tuple21 b
  d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a e) (set (tuple21 b d)))))) (sort
  (set1 (tuple2 (tuple2 a1 e1) (set1 (tuple2 b1 d1)))) (t2tb4260 x))))

(declare-fun tb2t4260 (uni) (set (tuple21 (tuple21 a e) (set (tuple21 b
  d)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a e) (set (tuple21 b d))))))
  (! (= (tb2t4260 (t2tb4260 i)) i) :pattern ((t2tb4260 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 e1) (set1 (tuple2 b1 d1)))) j)
     (= (t2tb4260 (tb2t4260 j)) j)) :pattern ((t2tb4260 (tb2t4260 j))) )))

(declare-fun t2tb4261 ((tuple21 (tuple21 a e) (set (tuple21 b d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a e) (set (tuple21 b d))))) (sort
  (tuple2 (tuple2 a1 e1) (set1 (tuple2 b1 d1))) (t2tb4261 x))))

(declare-fun tb2t4261 (uni) (tuple21 (tuple21 a e) (set (tuple21 b d))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a e) (set (tuple21 b d)))))
  (! (= (tb2t4261 (t2tb4261 i)) i) :pattern ((t2tb4261 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 e1) (set1 (tuple2 b1 d1))) j)
     (= (t2tb4261 (tb2t4261 j)) j)) :pattern ((t2tb4261 (tb2t4261 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a e))) (t (set (set (tuple21 b d))))
  (x (tuple21 a e)) (y (set (tuple21 b d))))
  (= (mem (tuple2 (tuple2 a1 e1) (set1 (tuple2 b1 d1)))
  (Tuple2 (tuple2 a1 e1) (set1 (tuple2 b1 d1)) (t2tb2949 x) (t2tb687 y))
  (times (set1 (tuple2 b1 d1)) (tuple2 a1 e1) (t2tb2943 s) (t2tb906 t)))
  (and (mem44 x s) (mem33 y t)))))

(declare-fun t2tb4262 ((set (tuple21 (tuple21 a e) (tuple21 b d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a e) (tuple21 b d))))) (sort
  (set1 (tuple2 (tuple2 a1 e1) (tuple2 b1 d1))) (t2tb4262 x))))

(declare-fun tb2t4262 (uni) (set (tuple21 (tuple21 a e) (tuple21 b d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a e) (tuple21 b d)))))
  (! (= (tb2t4262 (t2tb4262 i)) i) :pattern ((t2tb4262 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 e1) (tuple2 b1 d1))) j)
     (= (t2tb4262 (tb2t4262 j)) j)) :pattern ((t2tb4262 (tb2t4262 j))) )))

(declare-fun t2tb4263 ((tuple21 (tuple21 a e) (tuple21 b d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a e) (tuple21 b d)))) (sort
  (tuple2 (tuple2 a1 e1) (tuple2 b1 d1)) (t2tb4263 x))))

(declare-fun tb2t4263 (uni) (tuple21 (tuple21 a e) (tuple21 b d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a e) (tuple21 b d))))
  (! (= (tb2t4263 (t2tb4263 i)) i) :pattern ((t2tb4263 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 e1) (tuple2 b1 d1)) j)
     (= (t2tb4263 (tb2t4263 j)) j)) :pattern ((t2tb4263 (tb2t4263 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a e))) (t (set (tuple21 b d))) (x (tuple21 a e))
  (y (tuple21 b d)))
  (= (mem (tuple2 (tuple2 a1 e1) (tuple2 b1 d1))
  (Tuple2 (tuple2 a1 e1) (tuple2 b1 d1) (t2tb2949 x) (t2tb692 y))
  (times (tuple2 b1 d1) (tuple2 a1 e1) (t2tb2943 s) (t2tb687 t)))
  (and (mem44 x s) (mem23 y t)))))

(declare-fun t2tb3020 ((set (tuple21 (tuple21 a e) d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a e) d)))) (sort
  (set1 (tuple2 (tuple2 a1 e1) d1)) (t2tb3020 x))))

(declare-fun tb2t3020 (uni) (set (tuple21 (tuple21 a e) d)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a e) d))))
  (! (= (tb2t3020 (t2tb3020 i)) i) :pattern ((t2tb3020 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 e1) d1)) j)
     (= (t2tb3020 (tb2t3020 j)) j)) :pattern ((t2tb3020 (tb2t3020 j))) )))

(declare-fun t2tb3021 ((tuple21 (tuple21 a e) d)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a e) d))) (sort (tuple2 (tuple2 a1 e1) d1)
  (t2tb3021 x))))

(declare-fun tb2t3021 (uni) (tuple21 (tuple21 a e) d))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a e) d)))
  (! (= (tb2t3021 (t2tb3021 i)) i) :pattern ((t2tb3021 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 e1) d1) j) (= (t2tb3021 (tb2t3021 j)) j)) :pattern (
  (t2tb3021 (tb2t3021 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a e))) (t (set d)) (x (tuple21 a e)) (y d))
  (= (mem (tuple2 (tuple2 a1 e1) d1)
  (Tuple2 (tuple2 a1 e1) d1 (t2tb2949 x) (t2tb694 y))
  (times d1 (tuple2 a1 e1) (t2tb2943 s) (t2tb690 t)))
  (and (mem44 x s) (mem20 y t)))))

(declare-fun t2tb4264 ((set (tuple21 (tuple21 a e) (tuple21 a (tuple21 b
  c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a e) (tuple21 a (tuple21 b c)))))) (sort
  (set1 (tuple2 (tuple2 a1 e1) (tuple2 a1 (tuple2 b1 c1)))) (t2tb4264 x))))

(declare-fun tb2t4264 (uni) (set (tuple21 (tuple21 a e) (tuple21 a (tuple21 b
  c)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a e) (tuple21 a (tuple21 b c))))))
  (! (= (tb2t4264 (t2tb4264 i)) i) :pattern ((t2tb4264 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 e1) (tuple2 a1 (tuple2 b1 c1)))) j)
     (= (t2tb4264 (tb2t4264 j)) j)) :pattern ((t2tb4264 (tb2t4264 j))) )))

(declare-fun t2tb4265 ((tuple21 (tuple21 a e) (tuple21 a (tuple21 b
  c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a e) (tuple21 a (tuple21 b c))))) (sort
  (tuple2 (tuple2 a1 e1) (tuple2 a1 (tuple2 b1 c1))) (t2tb4265 x))))

(declare-fun tb2t4265 (uni) (tuple21 (tuple21 a e) (tuple21 a (tuple21 b
  c))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a e) (tuple21 a (tuple21 b c)))))
  (! (= (tb2t4265 (t2tb4265 i)) i) :pattern ((t2tb4265 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 e1) (tuple2 a1 (tuple2 b1 c1))) j)
     (= (t2tb4265 (tb2t4265 j)) j)) :pattern ((t2tb4265 (tb2t4265 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a e))) (t (set (tuple21 a (tuple21 b c))))
  (x (tuple21 a e)) (y (tuple21 a (tuple21 b c))))
  (= (mem (tuple2 (tuple2 a1 e1) (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 (tuple2 a1 e1) (tuple2 a1 (tuple2 b1 c1)) (t2tb2949 x) (t2tb260 y))
  (times (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 e1) (t2tb2943 s) (t2tb261 t)))
  (and (mem44 x s) (mem14 y t)))))

(declare-fun t2tb4266 ((set (tuple21 (tuple21 a e) (set (tuple21 a
  c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a e) (set (tuple21 a c)))))) (sort
  (set1 (tuple2 (tuple2 a1 e1) (set1 (tuple2 a1 c1)))) (t2tb4266 x))))

(declare-fun tb2t4266 (uni) (set (tuple21 (tuple21 a e) (set (tuple21 a
  c)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a e) (set (tuple21 a c))))))
  (! (= (tb2t4266 (t2tb4266 i)) i) :pattern ((t2tb4266 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 e1) (set1 (tuple2 a1 c1)))) j)
     (= (t2tb4266 (tb2t4266 j)) j)) :pattern ((t2tb4266 (tb2t4266 j))) )))

(declare-fun t2tb4267 ((tuple21 (tuple21 a e) (set (tuple21 a c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a e) (set (tuple21 a c))))) (sort
  (tuple2 (tuple2 a1 e1) (set1 (tuple2 a1 c1))) (t2tb4267 x))))

(declare-fun tb2t4267 (uni) (tuple21 (tuple21 a e) (set (tuple21 a c))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a e) (set (tuple21 a c)))))
  (! (= (tb2t4267 (t2tb4267 i)) i) :pattern ((t2tb4267 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 e1) (set1 (tuple2 a1 c1))) j)
     (= (t2tb4267 (tb2t4267 j)) j)) :pattern ((t2tb4267 (tb2t4267 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a e))) (t (set (set (tuple21 a c))))
  (x (tuple21 a e)) (y (set (tuple21 a c))))
  (= (mem (tuple2 (tuple2 a1 e1) (set1 (tuple2 a1 c1)))
  (Tuple2 (tuple2 a1 e1) (set1 (tuple2 a1 c1)) (t2tb2949 x) (t2tb129 y))
  (times (set1 (tuple2 a1 c1)) (tuple2 a1 e1) (t2tb2943 s) (t2tb128 t)))
  (and (mem44 x s) (mem11 y t)))))

(declare-fun t2tb4268 ((set (tuple21 (tuple21 a e) (tuple21 a c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a e) (tuple21 a c))))) (sort
  (set1 (tuple2 (tuple2 a1 e1) (tuple2 a1 c1))) (t2tb4268 x))))

(declare-fun tb2t4268 (uni) (set (tuple21 (tuple21 a e) (tuple21 a c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a e) (tuple21 a c)))))
  (! (= (tb2t4268 (t2tb4268 i)) i) :pattern ((t2tb4268 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 e1) (tuple2 a1 c1))) j)
     (= (t2tb4268 (tb2t4268 j)) j)) :pattern ((t2tb4268 (tb2t4268 j))) )))

(declare-fun t2tb4269 ((tuple21 (tuple21 a e) (tuple21 a c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a e) (tuple21 a c)))) (sort
  (tuple2 (tuple2 a1 e1) (tuple2 a1 c1)) (t2tb4269 x))))

(declare-fun tb2t4269 (uni) (tuple21 (tuple21 a e) (tuple21 a c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a e) (tuple21 a c))))
  (! (= (tb2t4269 (t2tb4269 i)) i) :pattern ((t2tb4269 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 e1) (tuple2 a1 c1)) j)
     (= (t2tb4269 (tb2t4269 j)) j)) :pattern ((t2tb4269 (tb2t4269 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a e))) (t (set (tuple21 a c))) (x (tuple21 a e))
  (y (tuple21 a c)))
  (= (mem (tuple2 (tuple2 a1 e1) (tuple2 a1 c1))
  (Tuple2 (tuple2 a1 e1) (tuple2 a1 c1) (t2tb2949 x) (t2tb133 y))
  (times (tuple2 a1 c1) (tuple2 a1 e1) (t2tb2943 s) (t2tb129 t)))
  (and (mem44 x s) (mem10 y t)))))

(declare-fun t2tb3022 ((set (tuple21 (tuple21 a e) c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a e) c)))) (sort
  (set1 (tuple2 (tuple2 a1 e1) c1)) (t2tb3022 x))))

(declare-fun tb2t3022 (uni) (set (tuple21 (tuple21 a e) c)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a e) c))))
  (! (= (tb2t3022 (t2tb3022 i)) i) :pattern ((t2tb3022 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 e1) c1)) j)
     (= (t2tb3022 (tb2t3022 j)) j)) :pattern ((t2tb3022 (tb2t3022 j))) )))

(declare-fun t2tb3023 ((tuple21 (tuple21 a e) c)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a e) c))) (sort (tuple2 (tuple2 a1 e1) c1)
  (t2tb3023 x))))

(declare-fun tb2t3023 (uni) (tuple21 (tuple21 a e) c))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a e) c)))
  (! (= (tb2t3023 (t2tb3023 i)) i) :pattern ((t2tb3023 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 e1) c1) j) (= (t2tb3023 (tb2t3023 j)) j)) :pattern (
  (t2tb3023 (tb2t3023 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a e))) (t (set c)) (x (tuple21 a e)) (y c))
  (= (mem (tuple2 (tuple2 a1 e1) c1)
  (Tuple2 (tuple2 a1 e1) c1 (t2tb2949 x) (t2tb135 y))
  (times c1 (tuple2 a1 e1) (t2tb2943 s) (t2tb132 t)))
  (and (mem44 x s) (mem7 y t)))))

(declare-fun t2tb3024 ((set (tuple21 (tuple21 a e) (set (tuple21 a
  b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a e) (set (tuple21 a b)))))) (sort
  (set1 (tuple2 (tuple2 a1 e1) (set1 (tuple2 a1 b1)))) (t2tb3024 x))))

(declare-fun tb2t3024 (uni) (set (tuple21 (tuple21 a e) (set (tuple21 a
  b)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a e) (set (tuple21 a b))))))
  (! (= (tb2t3024 (t2tb3024 i)) i) :pattern ((t2tb3024 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 e1) (set1 (tuple2 a1 b1)))) j)
     (= (t2tb3024 (tb2t3024 j)) j)) :pattern ((t2tb3024 (tb2t3024 j))) )))

(declare-fun t2tb3025 ((tuple21 (tuple21 a e) (set (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a e) (set (tuple21 a b))))) (sort
  (tuple2 (tuple2 a1 e1) (set1 (tuple2 a1 b1))) (t2tb3025 x))))

(declare-fun tb2t3025 (uni) (tuple21 (tuple21 a e) (set (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a e) (set (tuple21 a b)))))
  (! (= (tb2t3025 (t2tb3025 i)) i) :pattern ((t2tb3025 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 e1) (set1 (tuple2 a1 b1))) j)
     (= (t2tb3025 (tb2t3025 j)) j)) :pattern ((t2tb3025 (tb2t3025 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a e))) (t (set (set (tuple21 a b))))
  (x (tuple21 a e)) (y (set (tuple21 a b))))
  (= (mem (tuple2 (tuple2 a1 e1) (set1 (tuple2 a1 b1)))
  (Tuple2 (tuple2 a1 e1) (set1 (tuple2 a1 b1)) (t2tb2949 x) (t2tb11 y))
  (times (set1 (tuple2 a1 b1)) (tuple2 a1 e1) (t2tb2943 s) (t2tb10 t)))
  (and (mem44 x s) (mem4 y t)))))

(declare-fun t2tb3026 ((set (tuple21 (tuple21 a e) (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a e) (tuple21 a b))))) (sort
  (set1 (tuple2 (tuple2 a1 e1) (tuple2 a1 b1))) (t2tb3026 x))))

(declare-fun tb2t3026 (uni) (set (tuple21 (tuple21 a e) (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a e) (tuple21 a b)))))
  (! (= (tb2t3026 (t2tb3026 i)) i) :pattern ((t2tb3026 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 e1) (tuple2 a1 b1))) j)
     (= (t2tb3026 (tb2t3026 j)) j)) :pattern ((t2tb3026 (tb2t3026 j))) )))

(declare-fun t2tb3027 ((tuple21 (tuple21 a e) (tuple21 a b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a e) (tuple21 a b)))) (sort
  (tuple2 (tuple2 a1 e1) (tuple2 a1 b1)) (t2tb3027 x))))

(declare-fun tb2t3027 (uni) (tuple21 (tuple21 a e) (tuple21 a b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a e) (tuple21 a b))))
  (! (= (tb2t3027 (t2tb3027 i)) i) :pattern ((t2tb3027 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 e1) (tuple2 a1 b1)) j)
     (= (t2tb3027 (tb2t3027 j)) j)) :pattern ((t2tb3027 (tb2t3027 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a e))) (t (set (tuple21 a b))) (x (tuple21 a e))
  (y (tuple21 a b)))
  (= (mem (tuple2 (tuple2 a1 e1) (tuple2 a1 b1))
  (Tuple2 (tuple2 a1 e1) (tuple2 a1 b1) (t2tb2949 x) (t2tb13 y))
  (times (tuple2 a1 b1) (tuple2 a1 e1) (t2tb2943 s) (t2tb11 t)))
  (and (mem44 x s) (mem3 y t)))))

(declare-fun t2tb3028 ((set (tuple21 (tuple21 a e) b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a e) b)))) (sort
  (set1 (tuple2 (tuple2 a1 e1) b1)) (t2tb3028 x))))

(declare-fun tb2t3028 (uni) (set (tuple21 (tuple21 a e) b)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a e) b))))
  (! (= (tb2t3028 (t2tb3028 i)) i) :pattern ((t2tb3028 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 e1) b1)) j)
     (= (t2tb3028 (tb2t3028 j)) j)) :pattern ((t2tb3028 (tb2t3028 j))) )))

(declare-fun t2tb3029 ((tuple21 (tuple21 a e) b)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a e) b))) (sort (tuple2 (tuple2 a1 e1) b1)
  (t2tb3029 x))))

(declare-fun tb2t3029 (uni) (tuple21 (tuple21 a e) b))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a e) b)))
  (! (= (tb2t3029 (t2tb3029 i)) i) :pattern ((t2tb3029 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 e1) b1) j) (= (t2tb3029 (tb2t3029 j)) j)) :pattern (
  (t2tb3029 (tb2t3029 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a e))) (t (set b)) (x (tuple21 a e)) (y b))
  (= (mem (tuple2 (tuple2 a1 e1) b1)
  (Tuple2 (tuple2 a1 e1) b1 (t2tb2949 x) (t2tb14 y))
  (times b1 (tuple2 a1 e1) (t2tb2943 s) (t2tb12 t)))
  (and (mem44 x s) (mem2 y t)))))

(declare-fun t2tb3030 ((set (tuple21 (tuple21 a e) a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a e) a)))) (sort
  (set1 (tuple2 (tuple2 a1 e1) a1)) (t2tb3030 x))))

(declare-fun tb2t3030 (uni) (set (tuple21 (tuple21 a e) a)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a e) a))))
  (! (= (tb2t3030 (t2tb3030 i)) i) :pattern ((t2tb3030 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 e1) a1)) j)
     (= (t2tb3030 (tb2t3030 j)) j)) :pattern ((t2tb3030 (tb2t3030 j))) )))

(declare-fun t2tb3031 ((tuple21 (tuple21 a e) a)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a e) a))) (sort (tuple2 (tuple2 a1 e1) a1)
  (t2tb3031 x))))

(declare-fun tb2t3031 (uni) (tuple21 (tuple21 a e) a))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a e) a)))
  (! (= (tb2t3031 (t2tb3031 i)) i) :pattern ((t2tb3031 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 e1) a1) j) (= (t2tb3031 (tb2t3031 j)) j)) :pattern (
  (t2tb3031 (tb2t3031 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a e))) (t (set a)) (x (tuple21 a e)) (y a))
  (= (mem (tuple2 (tuple2 a1 e1) a1)
  (Tuple2 (tuple2 a1 e1) a1 (t2tb2949 x) (t2tb2 y))
  (times a1 (tuple2 a1 e1) (t2tb2943 s) (t2tb1 t)))
  (and (mem44 x s) (mem1 y t)))))

;; mem_times
  (assert
  (forall ((b2 ty))
  (forall ((s (set (tuple21 a e))) (t uni) (x (tuple21 a e)) (y uni))
  (= (mem (tuple2 (tuple2 a1 e1) b2)
  (Tuple2 (tuple2 a1 e1) b2 (t2tb2949 x) y)
  (times b2 (tuple2 a1 e1) (t2tb2943 s) t)) (and (mem44 x s) (mem b2 y t))))))

(declare-fun t2tb4270 ((set (tuple21 e (tuple21 (tuple21 b c) (tuple21 d
  e))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 e (tuple21 (tuple21 b c) (tuple21 d e)))))) (sort
  (set1 (tuple2 e1 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)))) (t2tb4270 x))))

(declare-fun tb2t4270 (uni) (set (tuple21 e (tuple21 (tuple21 b c) (tuple21 d
  e)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 e (tuple21 (tuple21 b c) (tuple21 d e))))))
  (! (= (tb2t4270 (t2tb4270 i)) i) :pattern ((t2tb4270 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 e1 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)))) j)
     (= (t2tb4270 (tb2t4270 j)) j)) :pattern ((t2tb4270 (tb2t4270 j))) )))

(declare-fun t2tb4271 ((tuple21 e (tuple21 (tuple21 b c) (tuple21 d
  e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 e (tuple21 (tuple21 b c) (tuple21 d e))))) (sort
  (tuple2 e1 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1))) (t2tb4271 x))))

(declare-fun tb2t4271 (uni) (tuple21 e (tuple21 (tuple21 b c) (tuple21 d
  e))))

;; BridgeL
  (assert
  (forall ((i (tuple21 e (tuple21 (tuple21 b c) (tuple21 d e)))))
  (! (= (tb2t4271 (t2tb4271 i)) i) :pattern ((t2tb4271 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 e1 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1))) j)
     (= (t2tb4271 (tb2t4271 j)) j)) :pattern ((t2tb4271 (tb2t4271 j))) )))

;; mem_times
  (assert
  (forall ((s (set e)) (t (set (tuple21 (tuple21 b c) (tuple21 d e)))) (x e)
  (y (tuple21 (tuple21 b c) (tuple21 d e))))
  (= (mem (tuple2 e1 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)))
  (Tuple2 e1 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (t2tb2955 x)
  (t2tb4104 y))
  (times (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) e1 (t2tb2947 s) (t2tb4102 t)))
  (and (mem36 x s) (mem49 y t)))))

(declare-fun t2tb4272 ((set (tuple21 e (tuple21 a (tuple21 d e))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 e (tuple21 a (tuple21 d e)))))) (sort
  (set1 (tuple2 e1 (tuple2 a1 (tuple2 d1 e1)))) (t2tb4272 x))))

(declare-fun tb2t4272 (uni) (set (tuple21 e (tuple21 a (tuple21 d e)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 e (tuple21 a (tuple21 d e))))))
  (! (= (tb2t4272 (t2tb4272 i)) i) :pattern ((t2tb4272 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 e1 (tuple2 a1 (tuple2 d1 e1)))) j)
     (= (t2tb4272 (tb2t4272 j)) j)) :pattern ((t2tb4272 (tb2t4272 j))) )))

(declare-fun t2tb4273 ((tuple21 e (tuple21 a (tuple21 d e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 e (tuple21 a (tuple21 d e))))) (sort
  (tuple2 e1 (tuple2 a1 (tuple2 d1 e1))) (t2tb4273 x))))

(declare-fun tb2t4273 (uni) (tuple21 e (tuple21 a (tuple21 d e))))

;; BridgeL
  (assert
  (forall ((i (tuple21 e (tuple21 a (tuple21 d e)))))
  (! (= (tb2t4273 (t2tb4273 i)) i) :pattern ((t2tb4273 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 e1 (tuple2 a1 (tuple2 d1 e1))) j)
     (= (t2tb4273 (tb2t4273 j)) j)) :pattern ((t2tb4273 (tb2t4273 j))) )))

;; mem_times
  (assert
  (forall ((s (set e)) (t (set (tuple21 a (tuple21 d e)))) (x e)
  (y (tuple21 a (tuple21 d e))))
  (= (mem (tuple2 e1 (tuple2 a1 (tuple2 d1 e1)))
  (Tuple2 e1 (tuple2 a1 (tuple2 d1 e1)) (t2tb2955 x) (t2tb4105 y))
  (times (tuple2 a1 (tuple2 d1 e1)) e1 (t2tb2947 s) (t2tb4103 t)))
  (and (mem36 x s) (mem48 y t)))))

(declare-fun t2tb4274 ((set (tuple21 e (set (tuple21 c e))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 e (set (tuple21 c e)))))) (sort
  (set1 (tuple2 e1 (set1 (tuple2 c1 e1)))) (t2tb4274 x))))

(declare-fun tb2t4274 (uni) (set (tuple21 e (set (tuple21 c e)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 e (set (tuple21 c e))))))
  (! (= (tb2t4274 (t2tb4274 i)) i) :pattern ((t2tb4274 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 e1 (set1 (tuple2 c1 e1)))) j)
     (= (t2tb4274 (tb2t4274 j)) j)) :pattern ((t2tb4274 (tb2t4274 j))) )))

(declare-fun t2tb4275 ((tuple21 e (set (tuple21 c e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 e (set (tuple21 c e))))) (sort
  (tuple2 e1 (set1 (tuple2 c1 e1))) (t2tb4275 x))))

(declare-fun tb2t4275 (uni) (tuple21 e (set (tuple21 c e))))

;; BridgeL
  (assert
  (forall ((i (tuple21 e (set (tuple21 c e)))))
  (! (= (tb2t4275 (t2tb4275 i)) i) :pattern ((t2tb4275 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 e1 (set1 (tuple2 c1 e1))) j)
     (= (t2tb4275 (tb2t4275 j)) j)) :pattern ((t2tb4275 (tb2t4275 j))) )))

;; mem_times
  (assert
  (forall ((s (set e)) (t (set (set (tuple21 c e)))) (x e) (y (set (tuple21 c
  e))))
  (= (mem (tuple2 e1 (set1 (tuple2 c1 e1)))
  (Tuple2 e1 (set1 (tuple2 c1 e1)) (t2tb2955 x) (t2tb3478 y))
  (times (set1 (tuple2 c1 e1)) e1 (t2tb2947 s) (t2tb3854 t)))
  (and (mem36 x s) (mem47 y t)))))

(declare-fun t2tb4276 ((set (tuple21 e (tuple21 c e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 e (tuple21 c e))))) (sort
  (set1 (tuple2 e1 (tuple2 c1 e1))) (t2tb4276 x))))

(declare-fun tb2t4276 (uni) (set (tuple21 e (tuple21 c e))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 e (tuple21 c e)))))
  (! (= (tb2t4276 (t2tb4276 i)) i) :pattern ((t2tb4276 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 e1 (tuple2 c1 e1))) j)
     (= (t2tb4276 (tb2t4276 j)) j)) :pattern ((t2tb4276 (tb2t4276 j))) )))

(declare-fun t2tb4277 ((tuple21 e (tuple21 c e))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 e (tuple21 c e)))) (sort (tuple2 e1 (tuple2 c1 e1))
  (t2tb4277 x))))

(declare-fun tb2t4277 (uni) (tuple21 e (tuple21 c e)))

;; BridgeL
  (assert
  (forall ((i (tuple21 e (tuple21 c e))))
  (! (= (tb2t4277 (t2tb4277 i)) i) :pattern ((t2tb4277 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 e1 (tuple2 c1 e1)) j) (= (t2tb4277 (tb2t4277 j)) j)) :pattern (
  (t2tb4277 (tb2t4277 j))) )))

;; mem_times
  (assert
  (forall ((s (set e)) (t (set (tuple21 c e))) (x e) (y (tuple21 c e)))
  (= (mem (tuple2 e1 (tuple2 c1 e1))
  (Tuple2 e1 (tuple2 c1 e1) (t2tb2955 x) (t2tb3479 y))
  (times (tuple2 c1 e1) e1 (t2tb2947 s) (t2tb3478 t)))
  (and (mem36 x s) (mem46 y t)))))

(declare-fun t2tb3300 ((set (tuple21 e (tuple21 a e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 e (tuple21 a e))))) (sort
  (set1 (tuple2 e1 (tuple2 a1 e1))) (t2tb3300 x))))

(declare-fun tb2t3300 (uni) (set (tuple21 e (tuple21 a e))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 e (tuple21 a e)))))
  (! (= (tb2t3300 (t2tb3300 i)) i) :pattern ((t2tb3300 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 e1 (tuple2 a1 e1))) j)
     (= (t2tb3300 (tb2t3300 j)) j)) :pattern ((t2tb3300 (tb2t3300 j))) )))

(declare-fun t2tb3301 ((tuple21 e (tuple21 a e))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 e (tuple21 a e)))) (sort (tuple2 e1 (tuple2 a1 e1))
  (t2tb3301 x))))

(declare-fun tb2t3301 (uni) (tuple21 e (tuple21 a e)))

;; BridgeL
  (assert
  (forall ((i (tuple21 e (tuple21 a e))))
  (! (= (tb2t3301 (t2tb3301 i)) i) :pattern ((t2tb3301 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 e1 (tuple2 a1 e1)) j) (= (t2tb3301 (tb2t3301 j)) j)) :pattern (
  (t2tb3301 (tb2t3301 j))) )))

;; mem_times
  (assert
  (forall ((s (set e)) (t (set (tuple21 a e))) (x e) (y (tuple21 a e)))
  (= (mem (tuple2 e1 (tuple2 a1 e1))
  (Tuple2 e1 (tuple2 a1 e1) (t2tb2955 x) (t2tb2949 y))
  (times (tuple2 a1 e1) e1 (t2tb2947 s) (t2tb2943 t)))
  (and (mem36 x s) (mem44 y t)))))

(declare-fun t2tb3316 ((set (tuple21 e e))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 e e)))) (sort (set1 (tuple2 e1 e1))
  (t2tb3316 x))))

(declare-fun tb2t3316 (uni) (set (tuple21 e e)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 e e))))
  (! (= (tb2t3316 (t2tb3316 i)) i) :pattern ((t2tb3316 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 e1 e1)) j) (= (t2tb3316 (tb2t3316 j)) j)) :pattern (
  (t2tb3316 (tb2t3316 j))) )))

(declare-fun t2tb3317 ((tuple21 e e)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 e e))) (sort (tuple2 e1 e1) (t2tb3317 x))))

(declare-fun tb2t3317 (uni) (tuple21 e e))

;; BridgeL
  (assert
  (forall ((i (tuple21 e e)))
  (! (= (tb2t3317 (t2tb3317 i)) i) :pattern ((t2tb3317 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 e1 e1) j) (= (t2tb3317 (tb2t3317 j)) j)) :pattern (
  (t2tb3317 (tb2t3317 j))) )))

;; mem_times
  (assert
  (forall ((s (set e)) (t (set e)) (x e) (y e))
  (= (mem (tuple2 e1 e1) (Tuple2 e1 e1 (t2tb2955 x) (t2tb2955 y))
  (times e1 e1 (t2tb2947 s) (t2tb2947 t))) (and (mem36 x s) (mem36 y t)))))

(declare-fun t2tb4278 ((set (tuple21 e (tuple21 a d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 e (tuple21 a d))))) (sort
  (set1 (tuple2 e1 (tuple2 a1 d1))) (t2tb4278 x))))

(declare-fun tb2t4278 (uni) (set (tuple21 e (tuple21 a d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 e (tuple21 a d)))))
  (! (= (tb2t4278 (t2tb4278 i)) i) :pattern ((t2tb4278 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 e1 (tuple2 a1 d1))) j)
     (= (t2tb4278 (tb2t4278 j)) j)) :pattern ((t2tb4278 (tb2t4278 j))) )))

(declare-fun t2tb4279 ((tuple21 e (tuple21 a d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 e (tuple21 a d)))) (sort (tuple2 e1 (tuple2 a1 d1))
  (t2tb4279 x))))

(declare-fun tb2t4279 (uni) (tuple21 e (tuple21 a d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 e (tuple21 a d))))
  (! (= (tb2t4279 (t2tb4279 i)) i) :pattern ((t2tb4279 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 e1 (tuple2 a1 d1)) j) (= (t2tb4279 (tb2t4279 j)) j)) :pattern (
  (t2tb4279 (tb2t4279 j))) )))

;; mem_times
  (assert
  (forall ((s (set e)) (t (set (tuple21 a d))) (x e) (y (tuple21 a d)))
  (= (mem (tuple2 e1 (tuple2 a1 d1))
  (Tuple2 e1 (tuple2 a1 d1) (t2tb2955 x) (t2tb904 y))
  (times (tuple2 a1 d1) e1 (t2tb2947 s) (t2tb903 t)))
  (and (mem36 x s) (mem32 y t)))))

(declare-fun t2tb4280 ((set (tuple21 e (set (tuple21 b d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 e (set (tuple21 b d)))))) (sort
  (set1 (tuple2 e1 (set1 (tuple2 b1 d1)))) (t2tb4280 x))))

(declare-fun tb2t4280 (uni) (set (tuple21 e (set (tuple21 b d)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 e (set (tuple21 b d))))))
  (! (= (tb2t4280 (t2tb4280 i)) i) :pattern ((t2tb4280 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 e1 (set1 (tuple2 b1 d1)))) j)
     (= (t2tb4280 (tb2t4280 j)) j)) :pattern ((t2tb4280 (tb2t4280 j))) )))

(declare-fun t2tb4281 ((tuple21 e (set (tuple21 b d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 e (set (tuple21 b d))))) (sort
  (tuple2 e1 (set1 (tuple2 b1 d1))) (t2tb4281 x))))

(declare-fun tb2t4281 (uni) (tuple21 e (set (tuple21 b d))))

;; BridgeL
  (assert
  (forall ((i (tuple21 e (set (tuple21 b d)))))
  (! (= (tb2t4281 (t2tb4281 i)) i) :pattern ((t2tb4281 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 e1 (set1 (tuple2 b1 d1))) j)
     (= (t2tb4281 (tb2t4281 j)) j)) :pattern ((t2tb4281 (tb2t4281 j))) )))

;; mem_times
  (assert
  (forall ((s (set e)) (t (set (set (tuple21 b d)))) (x e) (y (set (tuple21 b
  d))))
  (= (mem (tuple2 e1 (set1 (tuple2 b1 d1)))
  (Tuple2 e1 (set1 (tuple2 b1 d1)) (t2tb2955 x) (t2tb687 y))
  (times (set1 (tuple2 b1 d1)) e1 (t2tb2947 s) (t2tb906 t)))
  (and (mem36 x s) (mem33 y t)))))

(declare-fun t2tb4060 ((tuple21 e (tuple21 b d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 e (tuple21 b d)))) (sort (tuple2 e1 (tuple2 b1 d1))
  (t2tb4060 x))))

(declare-fun tb2t4060 (uni) (tuple21 e (tuple21 b d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 e (tuple21 b d))))
  (! (= (tb2t4060 (t2tb4060 i)) i) :pattern ((t2tb4060 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 e1 (tuple2 b1 d1)) j) (= (t2tb4060 (tb2t4060 j)) j)) :pattern (
  (t2tb4060 (tb2t4060 j))) )))

(declare-fun t2tb4282 ((set (tuple21 e (tuple21 b d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 e (tuple21 b d))))) (sort
  (set1 (tuple2 e1 (tuple2 b1 d1))) (t2tb4282 x))))

(declare-fun tb2t4282 (uni) (set (tuple21 e (tuple21 b d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 e (tuple21 b d)))))
  (! (= (tb2t4282 (t2tb4282 i)) i) :pattern ((t2tb4282 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 e1 (tuple2 b1 d1))) j)
     (= (t2tb4282 (tb2t4282 j)) j)) :pattern ((t2tb4282 (tb2t4282 j))) )))

;; mem_times
  (assert
  (forall ((s (set e)) (t (set (tuple21 b d))) (x e) (y (tuple21 b d)))
  (= (mem (tuple2 e1 (tuple2 b1 d1))
  (Tuple2 e1 (tuple2 b1 d1) (t2tb2955 x) (t2tb692 y))
  (times (tuple2 b1 d1) e1 (t2tb2947 s) (t2tb687 t)))
  (and (mem36 x s) (mem23 y t)))))

(declare-fun t2tb3324 ((set (tuple21 e d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 e d)))) (sort (set1 (tuple2 e1 d1))
  (t2tb3324 x))))

(declare-fun tb2t3324 (uni) (set (tuple21 e d)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 e d))))
  (! (= (tb2t3324 (t2tb3324 i)) i) :pattern ((t2tb3324 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 e1 d1)) j) (= (t2tb3324 (tb2t3324 j)) j)) :pattern (
  (t2tb3324 (tb2t3324 j))) )))

(declare-fun t2tb3325 ((tuple21 e d)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 e d))) (sort (tuple2 e1 d1) (t2tb3325 x))))

(declare-fun tb2t3325 (uni) (tuple21 e d))

;; BridgeL
  (assert
  (forall ((i (tuple21 e d)))
  (! (= (tb2t3325 (t2tb3325 i)) i) :pattern ((t2tb3325 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 e1 d1) j) (= (t2tb3325 (tb2t3325 j)) j)) :pattern (
  (t2tb3325 (tb2t3325 j))) )))

;; mem_times
  (assert
  (forall ((s (set e)) (t (set d)) (x e) (y d))
  (= (mem (tuple2 e1 d1) (Tuple2 e1 d1 (t2tb2955 x) (t2tb694 y))
  (times d1 e1 (t2tb2947 s) (t2tb690 t))) (and (mem36 x s) (mem20 y t)))))

(declare-fun t2tb4283 ((tuple21 e (tuple21 a (tuple21 b c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 e (tuple21 a (tuple21 b c))))) (sort
  (tuple2 e1 (tuple2 a1 (tuple2 b1 c1))) (t2tb4283 x))))

(declare-fun tb2t4283 (uni) (tuple21 e (tuple21 a (tuple21 b c))))

;; BridgeL
  (assert
  (forall ((i (tuple21 e (tuple21 a (tuple21 b c)))))
  (! (= (tb2t4283 (t2tb4283 i)) i) :pattern ((t2tb4283 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 e1 (tuple2 a1 (tuple2 b1 c1))) j)
     (= (t2tb4283 (tb2t4283 j)) j)) :pattern ((t2tb4283 (tb2t4283 j))) )))

(declare-fun t2tb4284 ((set (tuple21 e (tuple21 a (tuple21 b c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 e (tuple21 a (tuple21 b c)))))) (sort
  (set1 (tuple2 e1 (tuple2 a1 (tuple2 b1 c1)))) (t2tb4284 x))))

(declare-fun tb2t4284 (uni) (set (tuple21 e (tuple21 a (tuple21 b c)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 e (tuple21 a (tuple21 b c))))))
  (! (= (tb2t4284 (t2tb4284 i)) i) :pattern ((t2tb4284 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 e1 (tuple2 a1 (tuple2 b1 c1)))) j)
     (= (t2tb4284 (tb2t4284 j)) j)) :pattern ((t2tb4284 (tb2t4284 j))) )))

;; mem_times
  (assert
  (forall ((s (set e)) (t (set (tuple21 a (tuple21 b c)))) (x e)
  (y (tuple21 a (tuple21 b c))))
  (= (mem (tuple2 e1 (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 e1 (tuple2 a1 (tuple2 b1 c1)) (t2tb2955 x) (t2tb260 y))
  (times (tuple2 a1 (tuple2 b1 c1)) e1 (t2tb2947 s) (t2tb261 t)))
  (and (mem36 x s) (mem14 y t)))))

(declare-fun t2tb4285 ((set (tuple21 e (set (tuple21 a c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 e (set (tuple21 a c)))))) (sort
  (set1 (tuple2 e1 (set1 (tuple2 a1 c1)))) (t2tb4285 x))))

(declare-fun tb2t4285 (uni) (set (tuple21 e (set (tuple21 a c)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 e (set (tuple21 a c))))))
  (! (= (tb2t4285 (t2tb4285 i)) i) :pattern ((t2tb4285 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 e1 (set1 (tuple2 a1 c1)))) j)
     (= (t2tb4285 (tb2t4285 j)) j)) :pattern ((t2tb4285 (tb2t4285 j))) )))

(declare-fun t2tb4286 ((tuple21 e (set (tuple21 a c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 e (set (tuple21 a c))))) (sort
  (tuple2 e1 (set1 (tuple2 a1 c1))) (t2tb4286 x))))

(declare-fun tb2t4286 (uni) (tuple21 e (set (tuple21 a c))))

;; BridgeL
  (assert
  (forall ((i (tuple21 e (set (tuple21 a c)))))
  (! (= (tb2t4286 (t2tb4286 i)) i) :pattern ((t2tb4286 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 e1 (set1 (tuple2 a1 c1))) j)
     (= (t2tb4286 (tb2t4286 j)) j)) :pattern ((t2tb4286 (tb2t4286 j))) )))

;; mem_times
  (assert
  (forall ((s (set e)) (t (set (set (tuple21 a c)))) (x e) (y (set (tuple21 a
  c))))
  (= (mem (tuple2 e1 (set1 (tuple2 a1 c1)))
  (Tuple2 e1 (set1 (tuple2 a1 c1)) (t2tb2955 x) (t2tb129 y))
  (times (set1 (tuple2 a1 c1)) e1 (t2tb2947 s) (t2tb128 t)))
  (and (mem36 x s) (mem11 y t)))))

(declare-fun t2tb4287 ((set (tuple21 e (tuple21 a c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 e (tuple21 a c))))) (sort
  (set1 (tuple2 e1 (tuple2 a1 c1))) (t2tb4287 x))))

(declare-fun tb2t4287 (uni) (set (tuple21 e (tuple21 a c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 e (tuple21 a c)))))
  (! (= (tb2t4287 (t2tb4287 i)) i) :pattern ((t2tb4287 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 e1 (tuple2 a1 c1))) j)
     (= (t2tb4287 (tb2t4287 j)) j)) :pattern ((t2tb4287 (tb2t4287 j))) )))

(declare-fun t2tb4288 ((tuple21 e (tuple21 a c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 e (tuple21 a c)))) (sort (tuple2 e1 (tuple2 a1 c1))
  (t2tb4288 x))))

(declare-fun tb2t4288 (uni) (tuple21 e (tuple21 a c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 e (tuple21 a c))))
  (! (= (tb2t4288 (t2tb4288 i)) i) :pattern ((t2tb4288 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 e1 (tuple2 a1 c1)) j) (= (t2tb4288 (tb2t4288 j)) j)) :pattern (
  (t2tb4288 (tb2t4288 j))) )))

;; mem_times
  (assert
  (forall ((s (set e)) (t (set (tuple21 a c))) (x e) (y (tuple21 a c)))
  (= (mem (tuple2 e1 (tuple2 a1 c1))
  (Tuple2 e1 (tuple2 a1 c1) (t2tb2955 x) (t2tb133 y))
  (times (tuple2 a1 c1) e1 (t2tb2947 s) (t2tb129 t)))
  (and (mem36 x s) (mem10 y t)))))

(declare-fun t2tb3326 ((set (tuple21 e c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 e c)))) (sort (set1 (tuple2 e1 c1))
  (t2tb3326 x))))

(declare-fun tb2t3326 (uni) (set (tuple21 e c)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 e c))))
  (! (= (tb2t3326 (t2tb3326 i)) i) :pattern ((t2tb3326 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 e1 c1)) j) (= (t2tb3326 (tb2t3326 j)) j)) :pattern (
  (t2tb3326 (tb2t3326 j))) )))

(declare-fun t2tb3327 ((tuple21 e c)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 e c))) (sort (tuple2 e1 c1) (t2tb3327 x))))

(declare-fun tb2t3327 (uni) (tuple21 e c))

;; BridgeL
  (assert
  (forall ((i (tuple21 e c)))
  (! (= (tb2t3327 (t2tb3327 i)) i) :pattern ((t2tb3327 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 e1 c1) j) (= (t2tb3327 (tb2t3327 j)) j)) :pattern (
  (t2tb3327 (tb2t3327 j))) )))

;; mem_times
  (assert
  (forall ((s (set e)) (t (set c)) (x e) (y c))
  (= (mem (tuple2 e1 c1) (Tuple2 e1 c1 (t2tb2955 x) (t2tb135 y))
  (times c1 e1 (t2tb2947 s) (t2tb132 t))) (and (mem36 x s) (mem7 y t)))))

(declare-fun t2tb3328 ((set (tuple21 e (set (tuple21 a b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 e (set (tuple21 a b)))))) (sort
  (set1 (tuple2 e1 (set1 (tuple2 a1 b1)))) (t2tb3328 x))))

(declare-fun tb2t3328 (uni) (set (tuple21 e (set (tuple21 a b)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 e (set (tuple21 a b))))))
  (! (= (tb2t3328 (t2tb3328 i)) i) :pattern ((t2tb3328 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 e1 (set1 (tuple2 a1 b1)))) j)
     (= (t2tb3328 (tb2t3328 j)) j)) :pattern ((t2tb3328 (tb2t3328 j))) )))

(declare-fun t2tb3329 ((tuple21 e (set (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 e (set (tuple21 a b))))) (sort
  (tuple2 e1 (set1 (tuple2 a1 b1))) (t2tb3329 x))))

(declare-fun tb2t3329 (uni) (tuple21 e (set (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (tuple21 e (set (tuple21 a b)))))
  (! (= (tb2t3329 (t2tb3329 i)) i) :pattern ((t2tb3329 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 e1 (set1 (tuple2 a1 b1))) j)
     (= (t2tb3329 (tb2t3329 j)) j)) :pattern ((t2tb3329 (tb2t3329 j))) )))

;; mem_times
  (assert
  (forall ((s (set e)) (t (set (set (tuple21 a b)))) (x e) (y (set (tuple21 a
  b))))
  (= (mem (tuple2 e1 (set1 (tuple2 a1 b1)))
  (Tuple2 e1 (set1 (tuple2 a1 b1)) (t2tb2955 x) (t2tb11 y))
  (times (set1 (tuple2 a1 b1)) e1 (t2tb2947 s) (t2tb10 t)))
  (and (mem36 x s) (mem4 y t)))))

(declare-fun t2tb3330 ((set (tuple21 e (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 e (tuple21 a b))))) (sort
  (set1 (tuple2 e1 (tuple2 a1 b1))) (t2tb3330 x))))

(declare-fun tb2t3330 (uni) (set (tuple21 e (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 e (tuple21 a b)))))
  (! (= (tb2t3330 (t2tb3330 i)) i) :pattern ((t2tb3330 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 e1 (tuple2 a1 b1))) j)
     (= (t2tb3330 (tb2t3330 j)) j)) :pattern ((t2tb3330 (tb2t3330 j))) )))

(declare-fun t2tb3331 ((tuple21 e (tuple21 a b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 e (tuple21 a b)))) (sort (tuple2 e1 (tuple2 a1 b1))
  (t2tb3331 x))))

(declare-fun tb2t3331 (uni) (tuple21 e (tuple21 a b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 e (tuple21 a b))))
  (! (= (tb2t3331 (t2tb3331 i)) i) :pattern ((t2tb3331 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 e1 (tuple2 a1 b1)) j) (= (t2tb3331 (tb2t3331 j)) j)) :pattern (
  (t2tb3331 (tb2t3331 j))) )))

;; mem_times
  (assert
  (forall ((s (set e)) (t (set (tuple21 a b))) (x e) (y (tuple21 a b)))
  (= (mem (tuple2 e1 (tuple2 a1 b1))
  (Tuple2 e1 (tuple2 a1 b1) (t2tb2955 x) (t2tb13 y))
  (times (tuple2 a1 b1) e1 (t2tb2947 s) (t2tb11 t)))
  (and (mem36 x s) (mem3 y t)))))

(declare-fun t2tb3332 ((set (tuple21 e b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 e b)))) (sort (set1 (tuple2 e1 b1))
  (t2tb3332 x))))

(declare-fun tb2t3332 (uni) (set (tuple21 e b)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 e b))))
  (! (= (tb2t3332 (t2tb3332 i)) i) :pattern ((t2tb3332 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 e1 b1)) j) (= (t2tb3332 (tb2t3332 j)) j)) :pattern (
  (t2tb3332 (tb2t3332 j))) )))

(declare-fun t2tb3333 ((tuple21 e b)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 e b))) (sort (tuple2 e1 b1) (t2tb3333 x))))

(declare-fun tb2t3333 (uni) (tuple21 e b))

;; BridgeL
  (assert
  (forall ((i (tuple21 e b)))
  (! (= (tb2t3333 (t2tb3333 i)) i) :pattern ((t2tb3333 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 e1 b1) j) (= (t2tb3333 (tb2t3333 j)) j)) :pattern (
  (t2tb3333 (tb2t3333 j))) )))

;; mem_times
  (assert
  (forall ((s (set e)) (t (set b)) (x e) (y b))
  (= (mem (tuple2 e1 b1) (Tuple2 e1 b1 (t2tb2955 x) (t2tb14 y))
  (times b1 e1 (t2tb2947 s) (t2tb12 t))) (and (mem36 x s) (mem2 y t)))))

(declare-fun t2tb3334 ((set (tuple21 e a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 e a)))) (sort (set1 (tuple2 e1 a1))
  (t2tb3334 x))))

(declare-fun tb2t3334 (uni) (set (tuple21 e a)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 e a))))
  (! (= (tb2t3334 (t2tb3334 i)) i) :pattern ((t2tb3334 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 e1 a1)) j) (= (t2tb3334 (tb2t3334 j)) j)) :pattern (
  (t2tb3334 (tb2t3334 j))) )))

(declare-fun t2tb3335 ((tuple21 e a)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 e a))) (sort (tuple2 e1 a1) (t2tb3335 x))))

(declare-fun tb2t3335 (uni) (tuple21 e a))

;; BridgeL
  (assert
  (forall ((i (tuple21 e a)))
  (! (= (tb2t3335 (t2tb3335 i)) i) :pattern ((t2tb3335 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 e1 a1) j) (= (t2tb3335 (tb2t3335 j)) j)) :pattern (
  (t2tb3335 (tb2t3335 j))) )))

;; mem_times
  (assert
  (forall ((s (set e)) (t (set a)) (x e) (y a))
  (= (mem (tuple2 e1 a1) (Tuple2 e1 a1 (t2tb2955 x) (t2tb2 y))
  (times a1 e1 (t2tb2947 s) (t2tb1 t))) (and (mem36 x s) (mem1 y t)))))

;; mem_times
  (assert
  (forall ((b2 ty))
  (forall ((s (set e)) (t uni) (x e) (y uni))
  (= (mem (tuple2 e1 b2) (Tuple2 e1 b2 (t2tb2955 x) y)
  (times b2 e1 (t2tb2947 s) t)) (and (mem36 x s) (mem b2 y t))))))

(declare-fun t2tb4289 ((set (tuple21 (tuple21 a d) (tuple21 (tuple21 b c)
  (tuple21 d e))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a d) (tuple21 (tuple21 b c) (tuple21 d
  e)))))) (sort
  (set1 (tuple2 (tuple2 a1 d1) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1))))
  (t2tb4289 x))))

(declare-fun tb2t4289 (uni) (set (tuple21 (tuple21 a d) (tuple21 (tuple21 b
  c) (tuple21 d e)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a d) (tuple21 (tuple21 b c) (tuple21 d
  e)))))) (! (= (tb2t4289 (t2tb4289 i)) i) :pattern ((t2tb4289 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 a1 d1) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)))) j)
     (= (t2tb4289 (tb2t4289 j)) j)) :pattern ((t2tb4289 (tb2t4289 j))) )))

(declare-fun t2tb4290 ((tuple21 (tuple21 a d) (tuple21 (tuple21 b c)
  (tuple21 d e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a d) (tuple21 (tuple21 b c) (tuple21 d e)))))
  (sort (tuple2 (tuple2 a1 d1) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)))
  (t2tb4290 x))))

(declare-fun tb2t4290 (uni) (tuple21 (tuple21 a d) (tuple21 (tuple21 b c)
  (tuple21 d e))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a d) (tuple21 (tuple21 b c) (tuple21 d e)))))
  (! (= (tb2t4290 (t2tb4290 i)) i) :pattern ((t2tb4290 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 d1) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)))
     j) (= (t2tb4290 (tb2t4290 j)) j)) :pattern ((t2tb4290 (tb2t4290 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a d))) (t (set (tuple21 (tuple21 b c) (tuple21 d
  e)))) (x (tuple21 a d)) (y (tuple21 (tuple21 b c) (tuple21 d e))))
  (= (mem (tuple2 (tuple2 a1 d1) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)))
  (Tuple2 (tuple2 a1 d1) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (t2tb904 x)
  (t2tb4104 y))
  (times (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (tuple2 a1 d1) (t2tb903 s)
  (t2tb4102 t))) (and (mem32 x s) (mem49 y t)))))

(declare-fun t2tb4291 ((set (tuple21 (tuple21 a d) (tuple21 a (tuple21 d
  e))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a d) (tuple21 a (tuple21 d e)))))) (sort
  (set1 (tuple2 (tuple2 a1 d1) (tuple2 a1 (tuple2 d1 e1)))) (t2tb4291 x))))

(declare-fun tb2t4291 (uni) (set (tuple21 (tuple21 a d) (tuple21 a (tuple21 d
  e)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a d) (tuple21 a (tuple21 d e))))))
  (! (= (tb2t4291 (t2tb4291 i)) i) :pattern ((t2tb4291 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 d1) (tuple2 a1 (tuple2 d1 e1)))) j)
     (= (t2tb4291 (tb2t4291 j)) j)) :pattern ((t2tb4291 (tb2t4291 j))) )))

(declare-fun t2tb4292 ((tuple21 (tuple21 a d) (tuple21 a (tuple21 d
  e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a d) (tuple21 a (tuple21 d e))))) (sort
  (tuple2 (tuple2 a1 d1) (tuple2 a1 (tuple2 d1 e1))) (t2tb4292 x))))

(declare-fun tb2t4292 (uni) (tuple21 (tuple21 a d) (tuple21 a (tuple21 d
  e))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a d) (tuple21 a (tuple21 d e)))))
  (! (= (tb2t4292 (t2tb4292 i)) i) :pattern ((t2tb4292 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 d1) (tuple2 a1 (tuple2 d1 e1))) j)
     (= (t2tb4292 (tb2t4292 j)) j)) :pattern ((t2tb4292 (tb2t4292 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a d))) (t (set (tuple21 a (tuple21 d e))))
  (x (tuple21 a d)) (y (tuple21 a (tuple21 d e))))
  (= (mem (tuple2 (tuple2 a1 d1) (tuple2 a1 (tuple2 d1 e1)))
  (Tuple2 (tuple2 a1 d1) (tuple2 a1 (tuple2 d1 e1)) (t2tb904 x) (t2tb4105 y))
  (times (tuple2 a1 (tuple2 d1 e1)) (tuple2 a1 d1) (t2tb903 s) (t2tb4103 t)))
  (and (mem32 x s) (mem48 y t)))))

(declare-fun t2tb4293 ((set (tuple21 (tuple21 a d) (set (tuple21 c
  e))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a d) (set (tuple21 c e)))))) (sort
  (set1 (tuple2 (tuple2 a1 d1) (set1 (tuple2 c1 e1)))) (t2tb4293 x))))

(declare-fun tb2t4293 (uni) (set (tuple21 (tuple21 a d) (set (tuple21 c
  e)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a d) (set (tuple21 c e))))))
  (! (= (tb2t4293 (t2tb4293 i)) i) :pattern ((t2tb4293 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 d1) (set1 (tuple2 c1 e1)))) j)
     (= (t2tb4293 (tb2t4293 j)) j)) :pattern ((t2tb4293 (tb2t4293 j))) )))

(declare-fun t2tb4294 ((tuple21 (tuple21 a d) (set (tuple21 c e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a d) (set (tuple21 c e))))) (sort
  (tuple2 (tuple2 a1 d1) (set1 (tuple2 c1 e1))) (t2tb4294 x))))

(declare-fun tb2t4294 (uni) (tuple21 (tuple21 a d) (set (tuple21 c e))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a d) (set (tuple21 c e)))))
  (! (= (tb2t4294 (t2tb4294 i)) i) :pattern ((t2tb4294 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 d1) (set1 (tuple2 c1 e1))) j)
     (= (t2tb4294 (tb2t4294 j)) j)) :pattern ((t2tb4294 (tb2t4294 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a d))) (t (set (set (tuple21 c e))))
  (x (tuple21 a d)) (y (set (tuple21 c e))))
  (= (mem (tuple2 (tuple2 a1 d1) (set1 (tuple2 c1 e1)))
  (Tuple2 (tuple2 a1 d1) (set1 (tuple2 c1 e1)) (t2tb904 x) (t2tb3478 y))
  (times (set1 (tuple2 c1 e1)) (tuple2 a1 d1) (t2tb903 s) (t2tb3854 t)))
  (and (mem32 x s) (mem47 y t)))))

(declare-fun t2tb4295 ((set (tuple21 (tuple21 a d) (tuple21 c e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a d) (tuple21 c e))))) (sort
  (set1 (tuple2 (tuple2 a1 d1) (tuple2 c1 e1))) (t2tb4295 x))))

(declare-fun tb2t4295 (uni) (set (tuple21 (tuple21 a d) (tuple21 c e))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a d) (tuple21 c e)))))
  (! (= (tb2t4295 (t2tb4295 i)) i) :pattern ((t2tb4295 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 d1) (tuple2 c1 e1))) j)
     (= (t2tb4295 (tb2t4295 j)) j)) :pattern ((t2tb4295 (tb2t4295 j))) )))

(declare-fun t2tb4296 ((tuple21 (tuple21 a d) (tuple21 c e))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a d) (tuple21 c e)))) (sort
  (tuple2 (tuple2 a1 d1) (tuple2 c1 e1)) (t2tb4296 x))))

(declare-fun tb2t4296 (uni) (tuple21 (tuple21 a d) (tuple21 c e)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a d) (tuple21 c e))))
  (! (= (tb2t4296 (t2tb4296 i)) i) :pattern ((t2tb4296 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 d1) (tuple2 c1 e1)) j)
     (= (t2tb4296 (tb2t4296 j)) j)) :pattern ((t2tb4296 (tb2t4296 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a d))) (t (set (tuple21 c e))) (x (tuple21 a d))
  (y (tuple21 c e)))
  (= (mem (tuple2 (tuple2 a1 d1) (tuple2 c1 e1))
  (Tuple2 (tuple2 a1 d1) (tuple2 c1 e1) (t2tb904 x) (t2tb3479 y))
  (times (tuple2 c1 e1) (tuple2 a1 d1) (t2tb903 s) (t2tb3478 t)))
  (and (mem32 x s) (mem46 y t)))))

(declare-fun t2tb4297 ((set (tuple21 (tuple21 a d) (tuple21 a e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a d) (tuple21 a e))))) (sort
  (set1 (tuple2 (tuple2 a1 d1) (tuple2 a1 e1))) (t2tb4297 x))))

(declare-fun tb2t4297 (uni) (set (tuple21 (tuple21 a d) (tuple21 a e))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a d) (tuple21 a e)))))
  (! (= (tb2t4297 (t2tb4297 i)) i) :pattern ((t2tb4297 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 d1) (tuple2 a1 e1))) j)
     (= (t2tb4297 (tb2t4297 j)) j)) :pattern ((t2tb4297 (tb2t4297 j))) )))

(declare-fun t2tb4298 ((tuple21 (tuple21 a d) (tuple21 a e))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a d) (tuple21 a e)))) (sort
  (tuple2 (tuple2 a1 d1) (tuple2 a1 e1)) (t2tb4298 x))))

(declare-fun tb2t4298 (uni) (tuple21 (tuple21 a d) (tuple21 a e)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a d) (tuple21 a e))))
  (! (= (tb2t4298 (t2tb4298 i)) i) :pattern ((t2tb4298 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 d1) (tuple2 a1 e1)) j)
     (= (t2tb4298 (tb2t4298 j)) j)) :pattern ((t2tb4298 (tb2t4298 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a d))) (t (set (tuple21 a e))) (x (tuple21 a d))
  (y (tuple21 a e)))
  (= (mem (tuple2 (tuple2 a1 d1) (tuple2 a1 e1))
  (Tuple2 (tuple2 a1 d1) (tuple2 a1 e1) (t2tb904 x) (t2tb2949 y))
  (times (tuple2 a1 e1) (tuple2 a1 d1) (t2tb903 s) (t2tb2943 t)))
  (and (mem32 x s) (mem44 y t)))))

(declare-fun t2tb4299 ((tuple21 (tuple21 a d) e)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a d) e))) (sort (tuple2 (tuple2 a1 d1) e1)
  (t2tb4299 x))))

(declare-fun tb2t4299 (uni) (tuple21 (tuple21 a d) e))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a d) e)))
  (! (= (tb2t4299 (t2tb4299 i)) i) :pattern ((t2tb4299 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 d1) e1) j) (= (t2tb4299 (tb2t4299 j)) j)) :pattern (
  (t2tb4299 (tb2t4299 j))) )))

(declare-fun t2tb4300 ((set (tuple21 (tuple21 a d) e))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a d) e)))) (sort
  (set1 (tuple2 (tuple2 a1 d1) e1)) (t2tb4300 x))))

(declare-fun tb2t4300 (uni) (set (tuple21 (tuple21 a d) e)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a d) e))))
  (! (= (tb2t4300 (t2tb4300 i)) i) :pattern ((t2tb4300 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 d1) e1)) j)
     (= (t2tb4300 (tb2t4300 j)) j)) :pattern ((t2tb4300 (tb2t4300 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a d))) (t (set e)) (x (tuple21 a d)) (y e))
  (= (mem (tuple2 (tuple2 a1 d1) e1)
  (Tuple2 (tuple2 a1 d1) e1 (t2tb904 x) (t2tb2955 y))
  (times e1 (tuple2 a1 d1) (t2tb903 s) (t2tb2947 t)))
  (and (mem32 x s) (mem36 y t)))))

(declare-fun t2tb4301 ((set (tuple21 (tuple21 a d) (tuple21 a d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a d) (tuple21 a d))))) (sort
  (set1 (tuple2 (tuple2 a1 d1) (tuple2 a1 d1))) (t2tb4301 x))))

(declare-fun tb2t4301 (uni) (set (tuple21 (tuple21 a d) (tuple21 a d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a d) (tuple21 a d)))))
  (! (= (tb2t4301 (t2tb4301 i)) i) :pattern ((t2tb4301 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 d1) (tuple2 a1 d1))) j)
     (= (t2tb4301 (tb2t4301 j)) j)) :pattern ((t2tb4301 (tb2t4301 j))) )))

(declare-fun t2tb4302 ((tuple21 (tuple21 a d) (tuple21 a d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a d) (tuple21 a d)))) (sort
  (tuple2 (tuple2 a1 d1) (tuple2 a1 d1)) (t2tb4302 x))))

(declare-fun tb2t4302 (uni) (tuple21 (tuple21 a d) (tuple21 a d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a d) (tuple21 a d))))
  (! (= (tb2t4302 (t2tb4302 i)) i) :pattern ((t2tb4302 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 d1) (tuple2 a1 d1)) j)
     (= (t2tb4302 (tb2t4302 j)) j)) :pattern ((t2tb4302 (tb2t4302 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a d))) (t (set (tuple21 a d))) (x (tuple21 a d))
  (y (tuple21 a d)))
  (= (mem (tuple2 (tuple2 a1 d1) (tuple2 a1 d1))
  (Tuple2 (tuple2 a1 d1) (tuple2 a1 d1) (t2tb904 x) (t2tb904 y))
  (times (tuple2 a1 d1) (tuple2 a1 d1) (t2tb903 s) (t2tb903 t)))
  (and (mem32 x s) (mem32 y t)))))

(declare-fun t2tb4303 ((set (tuple21 (tuple21 a d) (set (tuple21 b
  d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a d) (set (tuple21 b d)))))) (sort
  (set1 (tuple2 (tuple2 a1 d1) (set1 (tuple2 b1 d1)))) (t2tb4303 x))))

(declare-fun tb2t4303 (uni) (set (tuple21 (tuple21 a d) (set (tuple21 b
  d)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a d) (set (tuple21 b d))))))
  (! (= (tb2t4303 (t2tb4303 i)) i) :pattern ((t2tb4303 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 d1) (set1 (tuple2 b1 d1)))) j)
     (= (t2tb4303 (tb2t4303 j)) j)) :pattern ((t2tb4303 (tb2t4303 j))) )))

(declare-fun t2tb4304 ((tuple21 (tuple21 a d) (set (tuple21 b d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a d) (set (tuple21 b d))))) (sort
  (tuple2 (tuple2 a1 d1) (set1 (tuple2 b1 d1))) (t2tb4304 x))))

(declare-fun tb2t4304 (uni) (tuple21 (tuple21 a d) (set (tuple21 b d))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a d) (set (tuple21 b d)))))
  (! (= (tb2t4304 (t2tb4304 i)) i) :pattern ((t2tb4304 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 d1) (set1 (tuple2 b1 d1))) j)
     (= (t2tb4304 (tb2t4304 j)) j)) :pattern ((t2tb4304 (tb2t4304 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a d))) (t (set (set (tuple21 b d))))
  (x (tuple21 a d)) (y (set (tuple21 b d))))
  (= (mem (tuple2 (tuple2 a1 d1) (set1 (tuple2 b1 d1)))
  (Tuple2 (tuple2 a1 d1) (set1 (tuple2 b1 d1)) (t2tb904 x) (t2tb687 y))
  (times (set1 (tuple2 b1 d1)) (tuple2 a1 d1) (t2tb903 s) (t2tb906 t)))
  (and (mem32 x s) (mem33 y t)))))

(declare-fun t2tb4305 ((set (tuple21 (tuple21 a d) (tuple21 b d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a d) (tuple21 b d))))) (sort
  (set1 (tuple2 (tuple2 a1 d1) (tuple2 b1 d1))) (t2tb4305 x))))

(declare-fun tb2t4305 (uni) (set (tuple21 (tuple21 a d) (tuple21 b d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a d) (tuple21 b d)))))
  (! (= (tb2t4305 (t2tb4305 i)) i) :pattern ((t2tb4305 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 d1) (tuple2 b1 d1))) j)
     (= (t2tb4305 (tb2t4305 j)) j)) :pattern ((t2tb4305 (tb2t4305 j))) )))

(declare-fun t2tb4306 ((tuple21 (tuple21 a d) (tuple21 b d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a d) (tuple21 b d)))) (sort
  (tuple2 (tuple2 a1 d1) (tuple2 b1 d1)) (t2tb4306 x))))

(declare-fun tb2t4306 (uni) (tuple21 (tuple21 a d) (tuple21 b d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a d) (tuple21 b d))))
  (! (= (tb2t4306 (t2tb4306 i)) i) :pattern ((t2tb4306 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 d1) (tuple2 b1 d1)) j)
     (= (t2tb4306 (tb2t4306 j)) j)) :pattern ((t2tb4306 (tb2t4306 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a d))) (t (set (tuple21 b d))) (x (tuple21 a d))
  (y (tuple21 b d)))
  (= (mem (tuple2 (tuple2 a1 d1) (tuple2 b1 d1))
  (Tuple2 (tuple2 a1 d1) (tuple2 b1 d1) (t2tb904 x) (t2tb692 y))
  (times (tuple2 b1 d1) (tuple2 a1 d1) (t2tb903 s) (t2tb687 t)))
  (and (mem32 x s) (mem23 y t)))))

(declare-fun t2tb4307 ((set (tuple21 (tuple21 a d) d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a d) d)))) (sort
  (set1 (tuple2 (tuple2 a1 d1) d1)) (t2tb4307 x))))

(declare-fun tb2t4307 (uni) (set (tuple21 (tuple21 a d) d)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a d) d))))
  (! (= (tb2t4307 (t2tb4307 i)) i) :pattern ((t2tb4307 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 d1) d1)) j)
     (= (t2tb4307 (tb2t4307 j)) j)) :pattern ((t2tb4307 (tb2t4307 j))) )))

(declare-fun t2tb4308 ((tuple21 (tuple21 a d) d)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a d) d))) (sort (tuple2 (tuple2 a1 d1) d1)
  (t2tb4308 x))))

(declare-fun tb2t4308 (uni) (tuple21 (tuple21 a d) d))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a d) d)))
  (! (= (tb2t4308 (t2tb4308 i)) i) :pattern ((t2tb4308 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 d1) d1) j) (= (t2tb4308 (tb2t4308 j)) j)) :pattern (
  (t2tb4308 (tb2t4308 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a d))) (t (set d)) (x (tuple21 a d)) (y d))
  (= (mem (tuple2 (tuple2 a1 d1) d1)
  (Tuple2 (tuple2 a1 d1) d1 (t2tb904 x) (t2tb694 y))
  (times d1 (tuple2 a1 d1) (t2tb903 s) (t2tb690 t)))
  (and (mem32 x s) (mem20 y t)))))

(declare-fun t2tb4309 ((set (tuple21 (tuple21 a d) (tuple21 a (tuple21 b
  c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a d) (tuple21 a (tuple21 b c)))))) (sort
  (set1 (tuple2 (tuple2 a1 d1) (tuple2 a1 (tuple2 b1 c1)))) (t2tb4309 x))))

(declare-fun tb2t4309 (uni) (set (tuple21 (tuple21 a d) (tuple21 a (tuple21 b
  c)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a d) (tuple21 a (tuple21 b c))))))
  (! (= (tb2t4309 (t2tb4309 i)) i) :pattern ((t2tb4309 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 d1) (tuple2 a1 (tuple2 b1 c1)))) j)
     (= (t2tb4309 (tb2t4309 j)) j)) :pattern ((t2tb4309 (tb2t4309 j))) )))

(declare-fun t2tb4310 ((tuple21 (tuple21 a d) (tuple21 a (tuple21 b
  c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a d) (tuple21 a (tuple21 b c))))) (sort
  (tuple2 (tuple2 a1 d1) (tuple2 a1 (tuple2 b1 c1))) (t2tb4310 x))))

(declare-fun tb2t4310 (uni) (tuple21 (tuple21 a d) (tuple21 a (tuple21 b
  c))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a d) (tuple21 a (tuple21 b c)))))
  (! (= (tb2t4310 (t2tb4310 i)) i) :pattern ((t2tb4310 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 d1) (tuple2 a1 (tuple2 b1 c1))) j)
     (= (t2tb4310 (tb2t4310 j)) j)) :pattern ((t2tb4310 (tb2t4310 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a d))) (t (set (tuple21 a (tuple21 b c))))
  (x (tuple21 a d)) (y (tuple21 a (tuple21 b c))))
  (= (mem (tuple2 (tuple2 a1 d1) (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 (tuple2 a1 d1) (tuple2 a1 (tuple2 b1 c1)) (t2tb904 x) (t2tb260 y))
  (times (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 d1) (t2tb903 s) (t2tb261 t)))
  (and (mem32 x s) (mem14 y t)))))

(declare-fun t2tb4311 ((set (tuple21 (tuple21 a d) (set (tuple21 a
  c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a d) (set (tuple21 a c)))))) (sort
  (set1 (tuple2 (tuple2 a1 d1) (set1 (tuple2 a1 c1)))) (t2tb4311 x))))

(declare-fun tb2t4311 (uni) (set (tuple21 (tuple21 a d) (set (tuple21 a
  c)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a d) (set (tuple21 a c))))))
  (! (= (tb2t4311 (t2tb4311 i)) i) :pattern ((t2tb4311 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 d1) (set1 (tuple2 a1 c1)))) j)
     (= (t2tb4311 (tb2t4311 j)) j)) :pattern ((t2tb4311 (tb2t4311 j))) )))

(declare-fun t2tb4312 ((tuple21 (tuple21 a d) (set (tuple21 a c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a d) (set (tuple21 a c))))) (sort
  (tuple2 (tuple2 a1 d1) (set1 (tuple2 a1 c1))) (t2tb4312 x))))

(declare-fun tb2t4312 (uni) (tuple21 (tuple21 a d) (set (tuple21 a c))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a d) (set (tuple21 a c)))))
  (! (= (tb2t4312 (t2tb4312 i)) i) :pattern ((t2tb4312 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 d1) (set1 (tuple2 a1 c1))) j)
     (= (t2tb4312 (tb2t4312 j)) j)) :pattern ((t2tb4312 (tb2t4312 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a d))) (t (set (set (tuple21 a c))))
  (x (tuple21 a d)) (y (set (tuple21 a c))))
  (= (mem (tuple2 (tuple2 a1 d1) (set1 (tuple2 a1 c1)))
  (Tuple2 (tuple2 a1 d1) (set1 (tuple2 a1 c1)) (t2tb904 x) (t2tb129 y))
  (times (set1 (tuple2 a1 c1)) (tuple2 a1 d1) (t2tb903 s) (t2tb128 t)))
  (and (mem32 x s) (mem11 y t)))))

(declare-fun t2tb4313 ((set (tuple21 (tuple21 a d) (tuple21 a c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a d) (tuple21 a c))))) (sort
  (set1 (tuple2 (tuple2 a1 d1) (tuple2 a1 c1))) (t2tb4313 x))))

(declare-fun tb2t4313 (uni) (set (tuple21 (tuple21 a d) (tuple21 a c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a d) (tuple21 a c)))))
  (! (= (tb2t4313 (t2tb4313 i)) i) :pattern ((t2tb4313 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 d1) (tuple2 a1 c1))) j)
     (= (t2tb4313 (tb2t4313 j)) j)) :pattern ((t2tb4313 (tb2t4313 j))) )))

(declare-fun t2tb4314 ((tuple21 (tuple21 a d) (tuple21 a c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a d) (tuple21 a c)))) (sort
  (tuple2 (tuple2 a1 d1) (tuple2 a1 c1)) (t2tb4314 x))))

(declare-fun tb2t4314 (uni) (tuple21 (tuple21 a d) (tuple21 a c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a d) (tuple21 a c))))
  (! (= (tb2t4314 (t2tb4314 i)) i) :pattern ((t2tb4314 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 d1) (tuple2 a1 c1)) j)
     (= (t2tb4314 (tb2t4314 j)) j)) :pattern ((t2tb4314 (tb2t4314 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a d))) (t (set (tuple21 a c))) (x (tuple21 a d))
  (y (tuple21 a c)))
  (= (mem (tuple2 (tuple2 a1 d1) (tuple2 a1 c1))
  (Tuple2 (tuple2 a1 d1) (tuple2 a1 c1) (t2tb904 x) (t2tb133 y))
  (times (tuple2 a1 c1) (tuple2 a1 d1) (t2tb903 s) (t2tb129 t)))
  (and (mem32 x s) (mem10 y t)))))

(declare-fun t2tb4315 ((tuple21 (tuple21 a d) c)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a d) c))) (sort (tuple2 (tuple2 a1 d1) c1)
  (t2tb4315 x))))

(declare-fun tb2t4315 (uni) (tuple21 (tuple21 a d) c))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a d) c)))
  (! (= (tb2t4315 (t2tb4315 i)) i) :pattern ((t2tb4315 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 d1) c1) j) (= (t2tb4315 (tb2t4315 j)) j)) :pattern (
  (t2tb4315 (tb2t4315 j))) )))

(declare-fun t2tb4316 ((set (tuple21 (tuple21 a d) c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a d) c)))) (sort
  (set1 (tuple2 (tuple2 a1 d1) c1)) (t2tb4316 x))))

(declare-fun tb2t4316 (uni) (set (tuple21 (tuple21 a d) c)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a d) c))))
  (! (= (tb2t4316 (t2tb4316 i)) i) :pattern ((t2tb4316 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 d1) c1)) j)
     (= (t2tb4316 (tb2t4316 j)) j)) :pattern ((t2tb4316 (tb2t4316 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a d))) (t (set c)) (x (tuple21 a d)) (y c))
  (= (mem (tuple2 (tuple2 a1 d1) c1)
  (Tuple2 (tuple2 a1 d1) c1 (t2tb904 x) (t2tb135 y))
  (times c1 (tuple2 a1 d1) (t2tb903 s) (t2tb132 t)))
  (and (mem32 x s) (mem7 y t)))))

(declare-fun t2tb4317 ((set (tuple21 (tuple21 a d) (set (tuple21 a
  b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a d) (set (tuple21 a b)))))) (sort
  (set1 (tuple2 (tuple2 a1 d1) (set1 (tuple2 a1 b1)))) (t2tb4317 x))))

(declare-fun tb2t4317 (uni) (set (tuple21 (tuple21 a d) (set (tuple21 a
  b)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a d) (set (tuple21 a b))))))
  (! (= (tb2t4317 (t2tb4317 i)) i) :pattern ((t2tb4317 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 d1) (set1 (tuple2 a1 b1)))) j)
     (= (t2tb4317 (tb2t4317 j)) j)) :pattern ((t2tb4317 (tb2t4317 j))) )))

(declare-fun t2tb4318 ((tuple21 (tuple21 a d) (set (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a d) (set (tuple21 a b))))) (sort
  (tuple2 (tuple2 a1 d1) (set1 (tuple2 a1 b1))) (t2tb4318 x))))

(declare-fun tb2t4318 (uni) (tuple21 (tuple21 a d) (set (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a d) (set (tuple21 a b)))))
  (! (= (tb2t4318 (t2tb4318 i)) i) :pattern ((t2tb4318 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 d1) (set1 (tuple2 a1 b1))) j)
     (= (t2tb4318 (tb2t4318 j)) j)) :pattern ((t2tb4318 (tb2t4318 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a d))) (t (set (set (tuple21 a b))))
  (x (tuple21 a d)) (y (set (tuple21 a b))))
  (= (mem (tuple2 (tuple2 a1 d1) (set1 (tuple2 a1 b1)))
  (Tuple2 (tuple2 a1 d1) (set1 (tuple2 a1 b1)) (t2tb904 x) (t2tb11 y))
  (times (set1 (tuple2 a1 b1)) (tuple2 a1 d1) (t2tb903 s) (t2tb10 t)))
  (and (mem32 x s) (mem4 y t)))))

(declare-fun t2tb4319 ((set (tuple21 (tuple21 a d) (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a d) (tuple21 a b))))) (sort
  (set1 (tuple2 (tuple2 a1 d1) (tuple2 a1 b1))) (t2tb4319 x))))

(declare-fun tb2t4319 (uni) (set (tuple21 (tuple21 a d) (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a d) (tuple21 a b)))))
  (! (= (tb2t4319 (t2tb4319 i)) i) :pattern ((t2tb4319 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 d1) (tuple2 a1 b1))) j)
     (= (t2tb4319 (tb2t4319 j)) j)) :pattern ((t2tb4319 (tb2t4319 j))) )))

(declare-fun t2tb4320 ((tuple21 (tuple21 a d) (tuple21 a b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a d) (tuple21 a b)))) (sort
  (tuple2 (tuple2 a1 d1) (tuple2 a1 b1)) (t2tb4320 x))))

(declare-fun tb2t4320 (uni) (tuple21 (tuple21 a d) (tuple21 a b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a d) (tuple21 a b))))
  (! (= (tb2t4320 (t2tb4320 i)) i) :pattern ((t2tb4320 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 d1) (tuple2 a1 b1)) j)
     (= (t2tb4320 (tb2t4320 j)) j)) :pattern ((t2tb4320 (tb2t4320 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a d))) (t (set (tuple21 a b))) (x (tuple21 a d))
  (y (tuple21 a b)))
  (= (mem (tuple2 (tuple2 a1 d1) (tuple2 a1 b1))
  (Tuple2 (tuple2 a1 d1) (tuple2 a1 b1) (t2tb904 x) (t2tb13 y))
  (times (tuple2 a1 b1) (tuple2 a1 d1) (t2tb903 s) (t2tb11 t)))
  (and (mem32 x s) (mem3 y t)))))

(declare-fun t2tb4321 ((set (tuple21 (tuple21 a d) b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a d) b)))) (sort
  (set1 (tuple2 (tuple2 a1 d1) b1)) (t2tb4321 x))))

(declare-fun tb2t4321 (uni) (set (tuple21 (tuple21 a d) b)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a d) b))))
  (! (= (tb2t4321 (t2tb4321 i)) i) :pattern ((t2tb4321 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 d1) b1)) j)
     (= (t2tb4321 (tb2t4321 j)) j)) :pattern ((t2tb4321 (tb2t4321 j))) )))

(declare-fun t2tb4322 ((tuple21 (tuple21 a d) b)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a d) b))) (sort (tuple2 (tuple2 a1 d1) b1)
  (t2tb4322 x))))

(declare-fun tb2t4322 (uni) (tuple21 (tuple21 a d) b))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a d) b)))
  (! (= (tb2t4322 (t2tb4322 i)) i) :pattern ((t2tb4322 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 d1) b1) j) (= (t2tb4322 (tb2t4322 j)) j)) :pattern (
  (t2tb4322 (tb2t4322 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a d))) (t (set b)) (x (tuple21 a d)) (y b))
  (= (mem (tuple2 (tuple2 a1 d1) b1)
  (Tuple2 (tuple2 a1 d1) b1 (t2tb904 x) (t2tb14 y))
  (times b1 (tuple2 a1 d1) (t2tb903 s) (t2tb12 t)))
  (and (mem32 x s) (mem2 y t)))))

(declare-fun t2tb4323 ((set (tuple21 (tuple21 a d) a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a d) a)))) (sort
  (set1 (tuple2 (tuple2 a1 d1) a1)) (t2tb4323 x))))

(declare-fun tb2t4323 (uni) (set (tuple21 (tuple21 a d) a)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a d) a))))
  (! (= (tb2t4323 (t2tb4323 i)) i) :pattern ((t2tb4323 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 d1) a1)) j)
     (= (t2tb4323 (tb2t4323 j)) j)) :pattern ((t2tb4323 (tb2t4323 j))) )))

(declare-fun t2tb4324 ((tuple21 (tuple21 a d) a)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a d) a))) (sort (tuple2 (tuple2 a1 d1) a1)
  (t2tb4324 x))))

(declare-fun tb2t4324 (uni) (tuple21 (tuple21 a d) a))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a d) a)))
  (! (= (tb2t4324 (t2tb4324 i)) i) :pattern ((t2tb4324 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 d1) a1) j) (= (t2tb4324 (tb2t4324 j)) j)) :pattern (
  (t2tb4324 (tb2t4324 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a d))) (t (set a)) (x (tuple21 a d)) (y a))
  (= (mem (tuple2 (tuple2 a1 d1) a1)
  (Tuple2 (tuple2 a1 d1) a1 (t2tb904 x) (t2tb2 y))
  (times a1 (tuple2 a1 d1) (t2tb903 s) (t2tb1 t)))
  (and (mem32 x s) (mem1 y t)))))

;; mem_times
  (assert
  (forall ((b2 ty))
  (forall ((s (set (tuple21 a d))) (t uni) (x (tuple21 a d)) (y uni))
  (= (mem (tuple2 (tuple2 a1 d1) b2) (Tuple2 (tuple2 a1 d1) b2 (t2tb904 x) y)
  (times b2 (tuple2 a1 d1) (t2tb903 s) t)) (and (mem32 x s) (mem b2 y t))))))

(declare-fun t2tb4325 ((set (tuple21 (set (tuple21 b d)) (tuple21 (tuple21 b
  c) (tuple21 d e))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 b d)) (tuple21 (tuple21 b c)
  (tuple21 d e)))))) (sort
  (set1
  (tuple2 (set1 (tuple2 b1 d1)) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1))))
  (t2tb4325 x))))

(declare-fun tb2t4325 (uni) (set (tuple21 (set (tuple21 b d))
  (tuple21 (tuple21 b c) (tuple21 d e)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 b d)) (tuple21 (tuple21 b c)
  (tuple21 d e))))))
  (! (= (tb2t4325 (t2tb4325 i)) i) :pattern ((t2tb4325 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (tuple2 (set1 (tuple2 b1 d1)) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1))))
     j) (= (t2tb4325 (tb2t4325 j)) j)) :pattern ((t2tb4325 (tb2t4325 j))) )))

(declare-fun t2tb4326 ((tuple21 (set (tuple21 b d)) (tuple21 (tuple21 b c)
  (tuple21 d e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 b d)) (tuple21 (tuple21 b c) (tuple21 d
  e))))) (sort
  (tuple2 (set1 (tuple2 b1 d1)) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)))
  (t2tb4326 x))))

(declare-fun tb2t4326 (uni) (tuple21 (set (tuple21 b d)) (tuple21 (tuple21 b
  c) (tuple21 d e))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 b d)) (tuple21 (tuple21 b c) (tuple21 d
  e))))) (! (= (tb2t4326 (t2tb4326 i)) i) :pattern ((t2tb4326 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (tuple2 (set1 (tuple2 b1 d1)) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1))) j)
     (= (t2tb4326 (tb2t4326 j)) j)) :pattern ((t2tb4326 (tb2t4326 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 b d)))) (t (set (tuple21 (tuple21 b c)
  (tuple21 d e)))) (x (set (tuple21 b d))) (y (tuple21 (tuple21 b c)
  (tuple21 d e))))
  (= (mem
  (tuple2 (set1 (tuple2 b1 d1)) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)))
  (Tuple2 (set1 (tuple2 b1 d1)) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1))
  (t2tb687 x) (t2tb4104 y))
  (times (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (set1 (tuple2 b1 d1))
  (t2tb906 s) (t2tb4102 t))) (and (mem33 x s) (mem49 y t)))))

(declare-fun t2tb4327 ((set (tuple21 (set (tuple21 b d)) (tuple21 a
  (tuple21 d e))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 b d)) (tuple21 a (tuple21 d e))))))
  (sort (set1 (tuple2 (set1 (tuple2 b1 d1)) (tuple2 a1 (tuple2 d1 e1))))
  (t2tb4327 x))))

(declare-fun tb2t4327 (uni) (set (tuple21 (set (tuple21 b d)) (tuple21 a
  (tuple21 d e)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 b d)) (tuple21 a (tuple21 d e))))))
  (! (= (tb2t4327 (t2tb4327 i)) i) :pattern ((t2tb4327 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (set1 (tuple2 b1 d1)) (tuple2 a1 (tuple2 d1 e1)))) j)
     (= (t2tb4327 (tb2t4327 j)) j)) :pattern ((t2tb4327 (tb2t4327 j))) )))

(declare-fun t2tb4328 ((tuple21 (set (tuple21 b d)) (tuple21 a (tuple21 d
  e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 b d)) (tuple21 a (tuple21 d e))))) (sort
  (tuple2 (set1 (tuple2 b1 d1)) (tuple2 a1 (tuple2 d1 e1))) (t2tb4328 x))))

(declare-fun tb2t4328 (uni) (tuple21 (set (tuple21 b d)) (tuple21 a
  (tuple21 d e))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 b d)) (tuple21 a (tuple21 d e)))))
  (! (= (tb2t4328 (t2tb4328 i)) i) :pattern ((t2tb4328 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 b1 d1)) (tuple2 a1 (tuple2 d1 e1))) j)
     (= (t2tb4328 (tb2t4328 j)) j)) :pattern ((t2tb4328 (tb2t4328 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 b d)))) (t (set (tuple21 a (tuple21 d e))))
  (x (set (tuple21 b d))) (y (tuple21 a (tuple21 d e))))
  (= (mem (tuple2 (set1 (tuple2 b1 d1)) (tuple2 a1 (tuple2 d1 e1)))
  (Tuple2 (set1 (tuple2 b1 d1)) (tuple2 a1 (tuple2 d1 e1)) (t2tb687 x)
  (t2tb4105 y))
  (times (tuple2 a1 (tuple2 d1 e1)) (set1 (tuple2 b1 d1)) (t2tb906 s)
  (t2tb4103 t))) (and (mem33 x s) (mem48 y t)))))

(declare-fun t2tb4329 ((tuple21 (set (tuple21 b d)) (set (tuple21 c
  e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 b d)) (set (tuple21 c e))))) (sort
  (tuple2 (set1 (tuple2 b1 d1)) (set1 (tuple2 c1 e1))) (t2tb4329 x))))

(declare-fun tb2t4329 (uni) (tuple21 (set (tuple21 b d)) (set (tuple21 c
  e))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 b d)) (set (tuple21 c e)))))
  (! (= (tb2t4329 (t2tb4329 i)) i) :pattern ((t2tb4329 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 b1 d1)) (set1 (tuple2 c1 e1))) j)
     (= (t2tb4329 (tb2t4329 j)) j)) :pattern ((t2tb4329 (tb2t4329 j))) )))

(declare-fun t2tb4330 ((set (tuple21 (set (tuple21 b d)) (set (tuple21 c
  e))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 b d)) (set (tuple21 c e)))))) (sort
  (set1 (tuple2 (set1 (tuple2 b1 d1)) (set1 (tuple2 c1 e1)))) (t2tb4330 x))))

(declare-fun tb2t4330 (uni) (set (tuple21 (set (tuple21 b d)) (set (tuple21 c
  e)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 b d)) (set (tuple21 c e))))))
  (! (= (tb2t4330 (t2tb4330 i)) i) :pattern ((t2tb4330 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 b1 d1)) (set1 (tuple2 c1 e1)))) j)
     (= (t2tb4330 (tb2t4330 j)) j)) :pattern ((t2tb4330 (tb2t4330 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 b d)))) (t (set (set (tuple21 c e))))
  (x (set (tuple21 b d))) (y (set (tuple21 c e))))
  (= (mem (tuple2 (set1 (tuple2 b1 d1)) (set1 (tuple2 c1 e1)))
  (Tuple2 (set1 (tuple2 b1 d1)) (set1 (tuple2 c1 e1)) (t2tb687 x)
  (t2tb3478 y))
  (times (set1 (tuple2 c1 e1)) (set1 (tuple2 b1 d1)) (t2tb906 s)
  (t2tb3854 t))) (and (mem33 x s) (mem47 y t)))))

(declare-fun t2tb4331 ((set (tuple21 (set (tuple21 b d)) (tuple21 c
  e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 b d)) (tuple21 c e))))) (sort
  (set1 (tuple2 (set1 (tuple2 b1 d1)) (tuple2 c1 e1))) (t2tb4331 x))))

(declare-fun tb2t4331 (uni) (set (tuple21 (set (tuple21 b d)) (tuple21 c
  e))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 b d)) (tuple21 c e)))))
  (! (= (tb2t4331 (t2tb4331 i)) i) :pattern ((t2tb4331 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 b1 d1)) (tuple2 c1 e1))) j)
     (= (t2tb4331 (tb2t4331 j)) j)) :pattern ((t2tb4331 (tb2t4331 j))) )))

(declare-fun t2tb4332 ((tuple21 (set (tuple21 b d)) (tuple21 c e))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 b d)) (tuple21 c e)))) (sort
  (tuple2 (set1 (tuple2 b1 d1)) (tuple2 c1 e1)) (t2tb4332 x))))

(declare-fun tb2t4332 (uni) (tuple21 (set (tuple21 b d)) (tuple21 c e)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 b d)) (tuple21 c e))))
  (! (= (tb2t4332 (t2tb4332 i)) i) :pattern ((t2tb4332 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 b1 d1)) (tuple2 c1 e1)) j)
     (= (t2tb4332 (tb2t4332 j)) j)) :pattern ((t2tb4332 (tb2t4332 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 b d)))) (t (set (tuple21 c e)))
  (x (set (tuple21 b d))) (y (tuple21 c e)))
  (= (mem (tuple2 (set1 (tuple2 b1 d1)) (tuple2 c1 e1))
  (Tuple2 (set1 (tuple2 b1 d1)) (tuple2 c1 e1) (t2tb687 x) (t2tb3479 y))
  (times (tuple2 c1 e1) (set1 (tuple2 b1 d1)) (t2tb906 s) (t2tb3478 t)))
  (and (mem33 x s) (mem46 y t)))))

(declare-fun t2tb4333 ((set (tuple21 (set (tuple21 b d)) (tuple21 a
  e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 b d)) (tuple21 a e))))) (sort
  (set1 (tuple2 (set1 (tuple2 b1 d1)) (tuple2 a1 e1))) (t2tb4333 x))))

(declare-fun tb2t4333 (uni) (set (tuple21 (set (tuple21 b d)) (tuple21 a
  e))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 b d)) (tuple21 a e)))))
  (! (= (tb2t4333 (t2tb4333 i)) i) :pattern ((t2tb4333 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 b1 d1)) (tuple2 a1 e1))) j)
     (= (t2tb4333 (tb2t4333 j)) j)) :pattern ((t2tb4333 (tb2t4333 j))) )))

(declare-fun t2tb4334 ((tuple21 (set (tuple21 b d)) (tuple21 a e))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 b d)) (tuple21 a e)))) (sort
  (tuple2 (set1 (tuple2 b1 d1)) (tuple2 a1 e1)) (t2tb4334 x))))

(declare-fun tb2t4334 (uni) (tuple21 (set (tuple21 b d)) (tuple21 a e)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 b d)) (tuple21 a e))))
  (! (= (tb2t4334 (t2tb4334 i)) i) :pattern ((t2tb4334 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 b1 d1)) (tuple2 a1 e1)) j)
     (= (t2tb4334 (tb2t4334 j)) j)) :pattern ((t2tb4334 (tb2t4334 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 b d)))) (t (set (tuple21 a e)))
  (x (set (tuple21 b d))) (y (tuple21 a e)))
  (= (mem (tuple2 (set1 (tuple2 b1 d1)) (tuple2 a1 e1))
  (Tuple2 (set1 (tuple2 b1 d1)) (tuple2 a1 e1) (t2tb687 x) (t2tb2949 y))
  (times (tuple2 a1 e1) (set1 (tuple2 b1 d1)) (t2tb906 s) (t2tb2943 t)))
  (and (mem33 x s) (mem44 y t)))))

(declare-fun t2tb4335 ((set (tuple21 (set (tuple21 b d)) e))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 b d)) e)))) (sort
  (set1 (tuple2 (set1 (tuple2 b1 d1)) e1)) (t2tb4335 x))))

(declare-fun tb2t4335 (uni) (set (tuple21 (set (tuple21 b d)) e)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 b d)) e))))
  (! (= (tb2t4335 (t2tb4335 i)) i) :pattern ((t2tb4335 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 b1 d1)) e1)) j)
     (= (t2tb4335 (tb2t4335 j)) j)) :pattern ((t2tb4335 (tb2t4335 j))) )))

(declare-fun t2tb4336 ((tuple21 (set (tuple21 b d)) e)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 b d)) e))) (sort
  (tuple2 (set1 (tuple2 b1 d1)) e1) (t2tb4336 x))))

(declare-fun tb2t4336 (uni) (tuple21 (set (tuple21 b d)) e))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 b d)) e)))
  (! (= (tb2t4336 (t2tb4336 i)) i) :pattern ((t2tb4336 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 b1 d1)) e1) j)
     (= (t2tb4336 (tb2t4336 j)) j)) :pattern ((t2tb4336 (tb2t4336 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 b d)))) (t (set e)) (x (set (tuple21 b d)))
  (y e))
  (= (mem (tuple2 (set1 (tuple2 b1 d1)) e1)
  (Tuple2 (set1 (tuple2 b1 d1)) e1 (t2tb687 x) (t2tb2955 y))
  (times e1 (set1 (tuple2 b1 d1)) (t2tb906 s) (t2tb2947 t)))
  (and (mem33 x s) (mem36 y t)))))

(declare-fun t2tb4337 ((set (tuple21 (set (tuple21 b d)) (tuple21 a
  d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 b d)) (tuple21 a d))))) (sort
  (set1 (tuple2 (set1 (tuple2 b1 d1)) (tuple2 a1 d1))) (t2tb4337 x))))

(declare-fun tb2t4337 (uni) (set (tuple21 (set (tuple21 b d)) (tuple21 a
  d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 b d)) (tuple21 a d)))))
  (! (= (tb2t4337 (t2tb4337 i)) i) :pattern ((t2tb4337 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 b1 d1)) (tuple2 a1 d1))) j)
     (= (t2tb4337 (tb2t4337 j)) j)) :pattern ((t2tb4337 (tb2t4337 j))) )))

(declare-fun t2tb4338 ((tuple21 (set (tuple21 b d)) (tuple21 a d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 b d)) (tuple21 a d)))) (sort
  (tuple2 (set1 (tuple2 b1 d1)) (tuple2 a1 d1)) (t2tb4338 x))))

(declare-fun tb2t4338 (uni) (tuple21 (set (tuple21 b d)) (tuple21 a d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 b d)) (tuple21 a d))))
  (! (= (tb2t4338 (t2tb4338 i)) i) :pattern ((t2tb4338 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 b1 d1)) (tuple2 a1 d1)) j)
     (= (t2tb4338 (tb2t4338 j)) j)) :pattern ((t2tb4338 (tb2t4338 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 b d)))) (t (set (tuple21 a d)))
  (x (set (tuple21 b d))) (y (tuple21 a d)))
  (= (mem (tuple2 (set1 (tuple2 b1 d1)) (tuple2 a1 d1))
  (Tuple2 (set1 (tuple2 b1 d1)) (tuple2 a1 d1) (t2tb687 x) (t2tb904 y))
  (times (tuple2 a1 d1) (set1 (tuple2 b1 d1)) (t2tb906 s) (t2tb903 t)))
  (and (mem33 x s) (mem32 y t)))))

(declare-fun t2tb4339 ((set (tuple21 (set (tuple21 b d)) (set (tuple21 b
  d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 b d)) (set (tuple21 b d)))))) (sort
  (set1 (tuple2 (set1 (tuple2 b1 d1)) (set1 (tuple2 b1 d1)))) (t2tb4339 x))))

(declare-fun tb2t4339 (uni) (set (tuple21 (set (tuple21 b d)) (set (tuple21 b
  d)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 b d)) (set (tuple21 b d))))))
  (! (= (tb2t4339 (t2tb4339 i)) i) :pattern ((t2tb4339 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 b1 d1)) (set1 (tuple2 b1 d1)))) j)
     (= (t2tb4339 (tb2t4339 j)) j)) :pattern ((t2tb4339 (tb2t4339 j))) )))

(declare-fun t2tb4340 ((tuple21 (set (tuple21 b d)) (set (tuple21 b
  d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 b d)) (set (tuple21 b d))))) (sort
  (tuple2 (set1 (tuple2 b1 d1)) (set1 (tuple2 b1 d1))) (t2tb4340 x))))

(declare-fun tb2t4340 (uni) (tuple21 (set (tuple21 b d)) (set (tuple21 b
  d))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 b d)) (set (tuple21 b d)))))
  (! (= (tb2t4340 (t2tb4340 i)) i) :pattern ((t2tb4340 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 b1 d1)) (set1 (tuple2 b1 d1))) j)
     (= (t2tb4340 (tb2t4340 j)) j)) :pattern ((t2tb4340 (tb2t4340 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 b d)))) (t (set (set (tuple21 b d))))
  (x (set (tuple21 b d))) (y (set (tuple21 b d))))
  (= (mem (tuple2 (set1 (tuple2 b1 d1)) (set1 (tuple2 b1 d1)))
  (Tuple2 (set1 (tuple2 b1 d1)) (set1 (tuple2 b1 d1)) (t2tb687 x)
  (t2tb687 y))
  (times (set1 (tuple2 b1 d1)) (set1 (tuple2 b1 d1)) (t2tb906 s) (t2tb906 t)))
  (and (mem33 x s) (mem33 y t)))))

(declare-fun t2tb4341 ((set (tuple21 (set (tuple21 b d)) (tuple21 b
  d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 b d)) (tuple21 b d))))) (sort
  (set1 (tuple2 (set1 (tuple2 b1 d1)) (tuple2 b1 d1))) (t2tb4341 x))))

(declare-fun tb2t4341 (uni) (set (tuple21 (set (tuple21 b d)) (tuple21 b
  d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 b d)) (tuple21 b d)))))
  (! (= (tb2t4341 (t2tb4341 i)) i) :pattern ((t2tb4341 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 b1 d1)) (tuple2 b1 d1))) j)
     (= (t2tb4341 (tb2t4341 j)) j)) :pattern ((t2tb4341 (tb2t4341 j))) )))

(declare-fun t2tb4342 ((tuple21 (set (tuple21 b d)) (tuple21 b d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 b d)) (tuple21 b d)))) (sort
  (tuple2 (set1 (tuple2 b1 d1)) (tuple2 b1 d1)) (t2tb4342 x))))

(declare-fun tb2t4342 (uni) (tuple21 (set (tuple21 b d)) (tuple21 b d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 b d)) (tuple21 b d))))
  (! (= (tb2t4342 (t2tb4342 i)) i) :pattern ((t2tb4342 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 b1 d1)) (tuple2 b1 d1)) j)
     (= (t2tb4342 (tb2t4342 j)) j)) :pattern ((t2tb4342 (tb2t4342 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 b d)))) (t (set (tuple21 b d)))
  (x (set (tuple21 b d))) (y (tuple21 b d)))
  (= (mem (tuple2 (set1 (tuple2 b1 d1)) (tuple2 b1 d1))
  (Tuple2 (set1 (tuple2 b1 d1)) (tuple2 b1 d1) (t2tb687 x) (t2tb692 y))
  (times (tuple2 b1 d1) (set1 (tuple2 b1 d1)) (t2tb906 s) (t2tb687 t)))
  (and (mem33 x s) (mem23 y t)))))

(declare-fun t2tb4343 ((set (tuple21 (set (tuple21 b d)) d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 b d)) d)))) (sort
  (set1 (tuple2 (set1 (tuple2 b1 d1)) d1)) (t2tb4343 x))))

(declare-fun tb2t4343 (uni) (set (tuple21 (set (tuple21 b d)) d)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 b d)) d))))
  (! (= (tb2t4343 (t2tb4343 i)) i) :pattern ((t2tb4343 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 b1 d1)) d1)) j)
     (= (t2tb4343 (tb2t4343 j)) j)) :pattern ((t2tb4343 (tb2t4343 j))) )))

(declare-fun t2tb4344 ((tuple21 (set (tuple21 b d)) d)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 b d)) d))) (sort
  (tuple2 (set1 (tuple2 b1 d1)) d1) (t2tb4344 x))))

(declare-fun tb2t4344 (uni) (tuple21 (set (tuple21 b d)) d))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 b d)) d)))
  (! (= (tb2t4344 (t2tb4344 i)) i) :pattern ((t2tb4344 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 b1 d1)) d1) j)
     (= (t2tb4344 (tb2t4344 j)) j)) :pattern ((t2tb4344 (tb2t4344 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 b d)))) (t (set d)) (x (set (tuple21 b d)))
  (y d))
  (= (mem (tuple2 (set1 (tuple2 b1 d1)) d1)
  (Tuple2 (set1 (tuple2 b1 d1)) d1 (t2tb687 x) (t2tb694 y))
  (times d1 (set1 (tuple2 b1 d1)) (t2tb906 s) (t2tb690 t)))
  (and (mem33 x s) (mem20 y t)))))

(declare-fun t2tb4345 ((tuple21 (set (tuple21 b d)) (tuple21 a (tuple21 b
  c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 b d)) (tuple21 a (tuple21 b c))))) (sort
  (tuple2 (set1 (tuple2 b1 d1)) (tuple2 a1 (tuple2 b1 c1))) (t2tb4345 x))))

(declare-fun tb2t4345 (uni) (tuple21 (set (tuple21 b d)) (tuple21 a
  (tuple21 b c))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 b d)) (tuple21 a (tuple21 b c)))))
  (! (= (tb2t4345 (t2tb4345 i)) i) :pattern ((t2tb4345 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 b1 d1)) (tuple2 a1 (tuple2 b1 c1))) j)
     (= (t2tb4345 (tb2t4345 j)) j)) :pattern ((t2tb4345 (tb2t4345 j))) )))

(declare-fun t2tb4346 ((set (tuple21 (set (tuple21 b d)) (tuple21 a
  (tuple21 b c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 b d)) (tuple21 a (tuple21 b c))))))
  (sort (set1 (tuple2 (set1 (tuple2 b1 d1)) (tuple2 a1 (tuple2 b1 c1))))
  (t2tb4346 x))))

(declare-fun tb2t4346 (uni) (set (tuple21 (set (tuple21 b d)) (tuple21 a
  (tuple21 b c)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 b d)) (tuple21 a (tuple21 b c))))))
  (! (= (tb2t4346 (t2tb4346 i)) i) :pattern ((t2tb4346 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (set1 (tuple2 b1 d1)) (tuple2 a1 (tuple2 b1 c1)))) j)
     (= (t2tb4346 (tb2t4346 j)) j)) :pattern ((t2tb4346 (tb2t4346 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 b d)))) (t (set (tuple21 a (tuple21 b c))))
  (x (set (tuple21 b d))) (y (tuple21 a (tuple21 b c))))
  (= (mem (tuple2 (set1 (tuple2 b1 d1)) (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 (set1 (tuple2 b1 d1)) (tuple2 a1 (tuple2 b1 c1)) (t2tb687 x)
  (t2tb260 y))
  (times (tuple2 a1 (tuple2 b1 c1)) (set1 (tuple2 b1 d1)) (t2tb906 s)
  (t2tb261 t))) (and (mem33 x s) (mem14 y t)))))

(declare-fun t2tb4347 ((set (tuple21 (set (tuple21 b d)) (set (tuple21 a
  c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 b d)) (set (tuple21 a c)))))) (sort
  (set1 (tuple2 (set1 (tuple2 b1 d1)) (set1 (tuple2 a1 c1)))) (t2tb4347 x))))

(declare-fun tb2t4347 (uni) (set (tuple21 (set (tuple21 b d)) (set (tuple21 a
  c)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 b d)) (set (tuple21 a c))))))
  (! (= (tb2t4347 (t2tb4347 i)) i) :pattern ((t2tb4347 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 b1 d1)) (set1 (tuple2 a1 c1)))) j)
     (= (t2tb4347 (tb2t4347 j)) j)) :pattern ((t2tb4347 (tb2t4347 j))) )))

(declare-fun t2tb4348 ((tuple21 (set (tuple21 b d)) (set (tuple21 a
  c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 b d)) (set (tuple21 a c))))) (sort
  (tuple2 (set1 (tuple2 b1 d1)) (set1 (tuple2 a1 c1))) (t2tb4348 x))))

(declare-fun tb2t4348 (uni) (tuple21 (set (tuple21 b d)) (set (tuple21 a
  c))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 b d)) (set (tuple21 a c)))))
  (! (= (tb2t4348 (t2tb4348 i)) i) :pattern ((t2tb4348 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 b1 d1)) (set1 (tuple2 a1 c1))) j)
     (= (t2tb4348 (tb2t4348 j)) j)) :pattern ((t2tb4348 (tb2t4348 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 b d)))) (t (set (set (tuple21 a c))))
  (x (set (tuple21 b d))) (y (set (tuple21 a c))))
  (= (mem (tuple2 (set1 (tuple2 b1 d1)) (set1 (tuple2 a1 c1)))
  (Tuple2 (set1 (tuple2 b1 d1)) (set1 (tuple2 a1 c1)) (t2tb687 x)
  (t2tb129 y))
  (times (set1 (tuple2 a1 c1)) (set1 (tuple2 b1 d1)) (t2tb906 s) (t2tb128 t)))
  (and (mem33 x s) (mem11 y t)))))

(declare-fun t2tb4349 ((set (tuple21 (set (tuple21 b d)) (tuple21 a
  c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 b d)) (tuple21 a c))))) (sort
  (set1 (tuple2 (set1 (tuple2 b1 d1)) (tuple2 a1 c1))) (t2tb4349 x))))

(declare-fun tb2t4349 (uni) (set (tuple21 (set (tuple21 b d)) (tuple21 a
  c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 b d)) (tuple21 a c)))))
  (! (= (tb2t4349 (t2tb4349 i)) i) :pattern ((t2tb4349 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 b1 d1)) (tuple2 a1 c1))) j)
     (= (t2tb4349 (tb2t4349 j)) j)) :pattern ((t2tb4349 (tb2t4349 j))) )))

(declare-fun t2tb4350 ((tuple21 (set (tuple21 b d)) (tuple21 a c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 b d)) (tuple21 a c)))) (sort
  (tuple2 (set1 (tuple2 b1 d1)) (tuple2 a1 c1)) (t2tb4350 x))))

(declare-fun tb2t4350 (uni) (tuple21 (set (tuple21 b d)) (tuple21 a c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 b d)) (tuple21 a c))))
  (! (= (tb2t4350 (t2tb4350 i)) i) :pattern ((t2tb4350 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 b1 d1)) (tuple2 a1 c1)) j)
     (= (t2tb4350 (tb2t4350 j)) j)) :pattern ((t2tb4350 (tb2t4350 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 b d)))) (t (set (tuple21 a c)))
  (x (set (tuple21 b d))) (y (tuple21 a c)))
  (= (mem (tuple2 (set1 (tuple2 b1 d1)) (tuple2 a1 c1))
  (Tuple2 (set1 (tuple2 b1 d1)) (tuple2 a1 c1) (t2tb687 x) (t2tb133 y))
  (times (tuple2 a1 c1) (set1 (tuple2 b1 d1)) (t2tb906 s) (t2tb129 t)))
  (and (mem33 x s) (mem10 y t)))))

(declare-fun t2tb4351 ((set (tuple21 (set (tuple21 b d)) c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 b d)) c)))) (sort
  (set1 (tuple2 (set1 (tuple2 b1 d1)) c1)) (t2tb4351 x))))

(declare-fun tb2t4351 (uni) (set (tuple21 (set (tuple21 b d)) c)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 b d)) c))))
  (! (= (tb2t4351 (t2tb4351 i)) i) :pattern ((t2tb4351 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 b1 d1)) c1)) j)
     (= (t2tb4351 (tb2t4351 j)) j)) :pattern ((t2tb4351 (tb2t4351 j))) )))

(declare-fun t2tb4352 ((tuple21 (set (tuple21 b d)) c)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 b d)) c))) (sort
  (tuple2 (set1 (tuple2 b1 d1)) c1) (t2tb4352 x))))

(declare-fun tb2t4352 (uni) (tuple21 (set (tuple21 b d)) c))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 b d)) c)))
  (! (= (tb2t4352 (t2tb4352 i)) i) :pattern ((t2tb4352 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 b1 d1)) c1) j)
     (= (t2tb4352 (tb2t4352 j)) j)) :pattern ((t2tb4352 (tb2t4352 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 b d)))) (t (set c)) (x (set (tuple21 b d)))
  (y c))
  (= (mem (tuple2 (set1 (tuple2 b1 d1)) c1)
  (Tuple2 (set1 (tuple2 b1 d1)) c1 (t2tb687 x) (t2tb135 y))
  (times c1 (set1 (tuple2 b1 d1)) (t2tb906 s) (t2tb132 t)))
  (and (mem33 x s) (mem7 y t)))))

(declare-fun t2tb4353 ((set (tuple21 (set (tuple21 b d)) (set (tuple21 a
  b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 b d)) (set (tuple21 a b)))))) (sort
  (set1 (tuple2 (set1 (tuple2 b1 d1)) (set1 (tuple2 a1 b1)))) (t2tb4353 x))))

(declare-fun tb2t4353 (uni) (set (tuple21 (set (tuple21 b d)) (set (tuple21 a
  b)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 b d)) (set (tuple21 a b))))))
  (! (= (tb2t4353 (t2tb4353 i)) i) :pattern ((t2tb4353 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 b1 d1)) (set1 (tuple2 a1 b1)))) j)
     (= (t2tb4353 (tb2t4353 j)) j)) :pattern ((t2tb4353 (tb2t4353 j))) )))

(declare-fun t2tb4354 ((tuple21 (set (tuple21 b d)) (set (tuple21 a
  b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 b d)) (set (tuple21 a b))))) (sort
  (tuple2 (set1 (tuple2 b1 d1)) (set1 (tuple2 a1 b1))) (t2tb4354 x))))

(declare-fun tb2t4354 (uni) (tuple21 (set (tuple21 b d)) (set (tuple21 a
  b))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 b d)) (set (tuple21 a b)))))
  (! (= (tb2t4354 (t2tb4354 i)) i) :pattern ((t2tb4354 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 b1 d1)) (set1 (tuple2 a1 b1))) j)
     (= (t2tb4354 (tb2t4354 j)) j)) :pattern ((t2tb4354 (tb2t4354 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 b d)))) (t (set (set (tuple21 a b))))
  (x (set (tuple21 b d))) (y (set (tuple21 a b))))
  (= (mem (tuple2 (set1 (tuple2 b1 d1)) (set1 (tuple2 a1 b1)))
  (Tuple2 (set1 (tuple2 b1 d1)) (set1 (tuple2 a1 b1)) (t2tb687 x) (t2tb11 y))
  (times (set1 (tuple2 a1 b1)) (set1 (tuple2 b1 d1)) (t2tb906 s) (t2tb10 t)))
  (and (mem33 x s) (mem4 y t)))))

(declare-fun t2tb4355 ((set (tuple21 (set (tuple21 b d)) (tuple21 a
  b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 b d)) (tuple21 a b))))) (sort
  (set1 (tuple2 (set1 (tuple2 b1 d1)) (tuple2 a1 b1))) (t2tb4355 x))))

(declare-fun tb2t4355 (uni) (set (tuple21 (set (tuple21 b d)) (tuple21 a
  b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 b d)) (tuple21 a b)))))
  (! (= (tb2t4355 (t2tb4355 i)) i) :pattern ((t2tb4355 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 b1 d1)) (tuple2 a1 b1))) j)
     (= (t2tb4355 (tb2t4355 j)) j)) :pattern ((t2tb4355 (tb2t4355 j))) )))

(declare-fun t2tb4356 ((tuple21 (set (tuple21 b d)) (tuple21 a b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 b d)) (tuple21 a b)))) (sort
  (tuple2 (set1 (tuple2 b1 d1)) (tuple2 a1 b1)) (t2tb4356 x))))

(declare-fun tb2t4356 (uni) (tuple21 (set (tuple21 b d)) (tuple21 a b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 b d)) (tuple21 a b))))
  (! (= (tb2t4356 (t2tb4356 i)) i) :pattern ((t2tb4356 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 b1 d1)) (tuple2 a1 b1)) j)
     (= (t2tb4356 (tb2t4356 j)) j)) :pattern ((t2tb4356 (tb2t4356 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 b d)))) (t (set (tuple21 a b)))
  (x (set (tuple21 b d))) (y (tuple21 a b)))
  (= (mem (tuple2 (set1 (tuple2 b1 d1)) (tuple2 a1 b1))
  (Tuple2 (set1 (tuple2 b1 d1)) (tuple2 a1 b1) (t2tb687 x) (t2tb13 y))
  (times (tuple2 a1 b1) (set1 (tuple2 b1 d1)) (t2tb906 s) (t2tb11 t)))
  (and (mem33 x s) (mem3 y t)))))

(declare-fun t2tb4357 ((set (tuple21 (set (tuple21 b d)) b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 b d)) b)))) (sort
  (set1 (tuple2 (set1 (tuple2 b1 d1)) b1)) (t2tb4357 x))))

(declare-fun tb2t4357 (uni) (set (tuple21 (set (tuple21 b d)) b)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 b d)) b))))
  (! (= (tb2t4357 (t2tb4357 i)) i) :pattern ((t2tb4357 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 b1 d1)) b1)) j)
     (= (t2tb4357 (tb2t4357 j)) j)) :pattern ((t2tb4357 (tb2t4357 j))) )))

(declare-fun t2tb4358 ((tuple21 (set (tuple21 b d)) b)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 b d)) b))) (sort
  (tuple2 (set1 (tuple2 b1 d1)) b1) (t2tb4358 x))))

(declare-fun tb2t4358 (uni) (tuple21 (set (tuple21 b d)) b))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 b d)) b)))
  (! (= (tb2t4358 (t2tb4358 i)) i) :pattern ((t2tb4358 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 b1 d1)) b1) j)
     (= (t2tb4358 (tb2t4358 j)) j)) :pattern ((t2tb4358 (tb2t4358 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 b d)))) (t (set b)) (x (set (tuple21 b d)))
  (y b))
  (= (mem (tuple2 (set1 (tuple2 b1 d1)) b1)
  (Tuple2 (set1 (tuple2 b1 d1)) b1 (t2tb687 x) (t2tb14 y))
  (times b1 (set1 (tuple2 b1 d1)) (t2tb906 s) (t2tb12 t)))
  (and (mem33 x s) (mem2 y t)))))

(declare-fun t2tb4359 ((set (tuple21 (set (tuple21 b d)) a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 b d)) a)))) (sort
  (set1 (tuple2 (set1 (tuple2 b1 d1)) a1)) (t2tb4359 x))))

(declare-fun tb2t4359 (uni) (set (tuple21 (set (tuple21 b d)) a)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 b d)) a))))
  (! (= (tb2t4359 (t2tb4359 i)) i) :pattern ((t2tb4359 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 b1 d1)) a1)) j)
     (= (t2tb4359 (tb2t4359 j)) j)) :pattern ((t2tb4359 (tb2t4359 j))) )))

(declare-fun t2tb4360 ((tuple21 (set (tuple21 b d)) a)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 b d)) a))) (sort
  (tuple2 (set1 (tuple2 b1 d1)) a1) (t2tb4360 x))))

(declare-fun tb2t4360 (uni) (tuple21 (set (tuple21 b d)) a))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 b d)) a)))
  (! (= (tb2t4360 (t2tb4360 i)) i) :pattern ((t2tb4360 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 b1 d1)) a1) j)
     (= (t2tb4360 (tb2t4360 j)) j)) :pattern ((t2tb4360 (tb2t4360 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 b d)))) (t (set a)) (x (set (tuple21 b d)))
  (y a))
  (= (mem (tuple2 (set1 (tuple2 b1 d1)) a1)
  (Tuple2 (set1 (tuple2 b1 d1)) a1 (t2tb687 x) (t2tb2 y))
  (times a1 (set1 (tuple2 b1 d1)) (t2tb906 s) (t2tb1 t)))
  (and (mem33 x s) (mem1 y t)))))

;; mem_times
  (assert
  (forall ((b2 ty))
  (forall ((s (set (set (tuple21 b d)))) (t uni) (x (set (tuple21 b d)))
  (y uni))
  (= (mem (tuple2 (set1 (tuple2 b1 d1)) b2)
  (Tuple2 (set1 (tuple2 b1 d1)) b2 (t2tb687 x) y)
  (times b2 (set1 (tuple2 b1 d1)) (t2tb906 s) t))
  (and (mem33 x s) (mem b2 y t))))))

(declare-fun t2tb4361 ((set (tuple21 (tuple21 b d) (tuple21 (tuple21 b c)
  (tuple21 d e))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b d) (tuple21 (tuple21 b c) (tuple21 d
  e)))))) (sort
  (set1 (tuple2 (tuple2 b1 d1) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1))))
  (t2tb4361 x))))

(declare-fun tb2t4361 (uni) (set (tuple21 (tuple21 b d) (tuple21 (tuple21 b
  c) (tuple21 d e)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b d) (tuple21 (tuple21 b c) (tuple21 d
  e)))))) (! (= (tb2t4361 (t2tb4361 i)) i) :pattern ((t2tb4361 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 b1 d1) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)))) j)
     (= (t2tb4361 (tb2t4361 j)) j)) :pattern ((t2tb4361 (tb2t4361 j))) )))

(declare-fun t2tb4362 ((tuple21 (tuple21 b d) (tuple21 (tuple21 b c)
  (tuple21 d e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b d) (tuple21 (tuple21 b c) (tuple21 d e)))))
  (sort (tuple2 (tuple2 b1 d1) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)))
  (t2tb4362 x))))

(declare-fun tb2t4362 (uni) (tuple21 (tuple21 b d) (tuple21 (tuple21 b c)
  (tuple21 d e))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b d) (tuple21 (tuple21 b c) (tuple21 d e)))))
  (! (= (tb2t4362 (t2tb4362 i)) i) :pattern ((t2tb4362 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 d1) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)))
     j) (= (t2tb4362 (tb2t4362 j)) j)) :pattern ((t2tb4362 (tb2t4362 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 b d))) (t (set (tuple21 (tuple21 b c) (tuple21 d
  e)))) (x (tuple21 b d)) (y (tuple21 (tuple21 b c) (tuple21 d e))))
  (= (mem (tuple2 (tuple2 b1 d1) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)))
  (Tuple2 (tuple2 b1 d1) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (t2tb692 x)
  (t2tb4104 y))
  (times (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (tuple2 b1 d1) (t2tb687 s)
  (t2tb4102 t))) (and (mem23 x s) (mem49 y t)))))

(declare-fun t2tb4363 ((set (tuple21 (tuple21 b d) (tuple21 a (tuple21 d
  e))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b d) (tuple21 a (tuple21 d e)))))) (sort
  (set1 (tuple2 (tuple2 b1 d1) (tuple2 a1 (tuple2 d1 e1)))) (t2tb4363 x))))

(declare-fun tb2t4363 (uni) (set (tuple21 (tuple21 b d) (tuple21 a (tuple21 d
  e)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b d) (tuple21 a (tuple21 d e))))))
  (! (= (tb2t4363 (t2tb4363 i)) i) :pattern ((t2tb4363 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 d1) (tuple2 a1 (tuple2 d1 e1)))) j)
     (= (t2tb4363 (tb2t4363 j)) j)) :pattern ((t2tb4363 (tb2t4363 j))) )))

(declare-fun t2tb4364 ((tuple21 (tuple21 b d) (tuple21 a (tuple21 d
  e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b d) (tuple21 a (tuple21 d e))))) (sort
  (tuple2 (tuple2 b1 d1) (tuple2 a1 (tuple2 d1 e1))) (t2tb4364 x))))

(declare-fun tb2t4364 (uni) (tuple21 (tuple21 b d) (tuple21 a (tuple21 d
  e))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b d) (tuple21 a (tuple21 d e)))))
  (! (= (tb2t4364 (t2tb4364 i)) i) :pattern ((t2tb4364 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 d1) (tuple2 a1 (tuple2 d1 e1))) j)
     (= (t2tb4364 (tb2t4364 j)) j)) :pattern ((t2tb4364 (tb2t4364 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 b d))) (t (set (tuple21 a (tuple21 d e))))
  (x (tuple21 b d)) (y (tuple21 a (tuple21 d e))))
  (= (mem (tuple2 (tuple2 b1 d1) (tuple2 a1 (tuple2 d1 e1)))
  (Tuple2 (tuple2 b1 d1) (tuple2 a1 (tuple2 d1 e1)) (t2tb692 x) (t2tb4105 y))
  (times (tuple2 a1 (tuple2 d1 e1)) (tuple2 b1 d1) (t2tb687 s) (t2tb4103 t)))
  (and (mem23 x s) (mem48 y t)))))

(declare-fun t2tb4365 ((set (tuple21 (tuple21 b d) (set (tuple21 c
  e))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b d) (set (tuple21 c e)))))) (sort
  (set1 (tuple2 (tuple2 b1 d1) (set1 (tuple2 c1 e1)))) (t2tb4365 x))))

(declare-fun tb2t4365 (uni) (set (tuple21 (tuple21 b d) (set (tuple21 c
  e)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b d) (set (tuple21 c e))))))
  (! (= (tb2t4365 (t2tb4365 i)) i) :pattern ((t2tb4365 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 d1) (set1 (tuple2 c1 e1)))) j)
     (= (t2tb4365 (tb2t4365 j)) j)) :pattern ((t2tb4365 (tb2t4365 j))) )))

(declare-fun t2tb4366 ((tuple21 (tuple21 b d) (set (tuple21 c e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b d) (set (tuple21 c e))))) (sort
  (tuple2 (tuple2 b1 d1) (set1 (tuple2 c1 e1))) (t2tb4366 x))))

(declare-fun tb2t4366 (uni) (tuple21 (tuple21 b d) (set (tuple21 c e))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b d) (set (tuple21 c e)))))
  (! (= (tb2t4366 (t2tb4366 i)) i) :pattern ((t2tb4366 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 d1) (set1 (tuple2 c1 e1))) j)
     (= (t2tb4366 (tb2t4366 j)) j)) :pattern ((t2tb4366 (tb2t4366 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 b d))) (t (set (set (tuple21 c e))))
  (x (tuple21 b d)) (y (set (tuple21 c e))))
  (= (mem (tuple2 (tuple2 b1 d1) (set1 (tuple2 c1 e1)))
  (Tuple2 (tuple2 b1 d1) (set1 (tuple2 c1 e1)) (t2tb692 x) (t2tb3478 y))
  (times (set1 (tuple2 c1 e1)) (tuple2 b1 d1) (t2tb687 s) (t2tb3854 t)))
  (and (mem23 x s) (mem47 y t)))))

(declare-fun t2tb4367 ((set (tuple21 (tuple21 b d) (tuple21 c e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b d) (tuple21 c e))))) (sort
  (set1 (tuple2 (tuple2 b1 d1) (tuple2 c1 e1))) (t2tb4367 x))))

(declare-fun tb2t4367 (uni) (set (tuple21 (tuple21 b d) (tuple21 c e))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b d) (tuple21 c e)))))
  (! (= (tb2t4367 (t2tb4367 i)) i) :pattern ((t2tb4367 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 d1) (tuple2 c1 e1))) j)
     (= (t2tb4367 (tb2t4367 j)) j)) :pattern ((t2tb4367 (tb2t4367 j))) )))

(declare-fun t2tb4368 ((tuple21 (tuple21 b d) (tuple21 c e))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b d) (tuple21 c e)))) (sort
  (tuple2 (tuple2 b1 d1) (tuple2 c1 e1)) (t2tb4368 x))))

(declare-fun tb2t4368 (uni) (tuple21 (tuple21 b d) (tuple21 c e)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b d) (tuple21 c e))))
  (! (= (tb2t4368 (t2tb4368 i)) i) :pattern ((t2tb4368 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 d1) (tuple2 c1 e1)) j)
     (= (t2tb4368 (tb2t4368 j)) j)) :pattern ((t2tb4368 (tb2t4368 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 b d))) (t (set (tuple21 c e))) (x (tuple21 b d))
  (y (tuple21 c e)))
  (= (mem (tuple2 (tuple2 b1 d1) (tuple2 c1 e1))
  (Tuple2 (tuple2 b1 d1) (tuple2 c1 e1) (t2tb692 x) (t2tb3479 y))
  (times (tuple2 c1 e1) (tuple2 b1 d1) (t2tb687 s) (t2tb3478 t)))
  (and (mem23 x s) (mem46 y t)))))

(declare-fun t2tb4369 ((set (tuple21 (tuple21 b d) (tuple21 a e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b d) (tuple21 a e))))) (sort
  (set1 (tuple2 (tuple2 b1 d1) (tuple2 a1 e1))) (t2tb4369 x))))

(declare-fun tb2t4369 (uni) (set (tuple21 (tuple21 b d) (tuple21 a e))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b d) (tuple21 a e)))))
  (! (= (tb2t4369 (t2tb4369 i)) i) :pattern ((t2tb4369 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 d1) (tuple2 a1 e1))) j)
     (= (t2tb4369 (tb2t4369 j)) j)) :pattern ((t2tb4369 (tb2t4369 j))) )))

(declare-fun t2tb4370 ((tuple21 (tuple21 b d) (tuple21 a e))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b d) (tuple21 a e)))) (sort
  (tuple2 (tuple2 b1 d1) (tuple2 a1 e1)) (t2tb4370 x))))

(declare-fun tb2t4370 (uni) (tuple21 (tuple21 b d) (tuple21 a e)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b d) (tuple21 a e))))
  (! (= (tb2t4370 (t2tb4370 i)) i) :pattern ((t2tb4370 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 d1) (tuple2 a1 e1)) j)
     (= (t2tb4370 (tb2t4370 j)) j)) :pattern ((t2tb4370 (tb2t4370 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 b d))) (t (set (tuple21 a e))) (x (tuple21 b d))
  (y (tuple21 a e)))
  (= (mem (tuple2 (tuple2 b1 d1) (tuple2 a1 e1))
  (Tuple2 (tuple2 b1 d1) (tuple2 a1 e1) (t2tb692 x) (t2tb2949 y))
  (times (tuple2 a1 e1) (tuple2 b1 d1) (t2tb687 s) (t2tb2943 t)))
  (and (mem23 x s) (mem44 y t)))))

(declare-fun t2tb3915 ((set (tuple21 (tuple21 b d) e))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b d) e)))) (sort
  (set1 (tuple2 (tuple2 b1 d1) e1)) (t2tb3915 x))))

(declare-fun tb2t3915 (uni) (set (tuple21 (tuple21 b d) e)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b d) e))))
  (! (= (tb2t3915 (t2tb3915 i)) i) :pattern ((t2tb3915 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 d1) e1)) j)
     (= (t2tb3915 (tb2t3915 j)) j)) :pattern ((t2tb3915 (tb2t3915 j))) )))

(declare-fun t2tb3916 ((tuple21 (tuple21 b d) e)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b d) e))) (sort (tuple2 (tuple2 b1 d1) e1)
  (t2tb3916 x))))

(declare-fun tb2t3916 (uni) (tuple21 (tuple21 b d) e))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b d) e)))
  (! (= (tb2t3916 (t2tb3916 i)) i) :pattern ((t2tb3916 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 d1) e1) j) (= (t2tb3916 (tb2t3916 j)) j)) :pattern (
  (t2tb3916 (tb2t3916 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 b d))) (t (set e)) (x (tuple21 b d)) (y e))
  (= (mem (tuple2 (tuple2 b1 d1) e1)
  (Tuple2 (tuple2 b1 d1) e1 (t2tb692 x) (t2tb2955 y))
  (times e1 (tuple2 b1 d1) (t2tb687 s) (t2tb2947 t)))
  (and (mem23 x s) (mem36 y t)))))

(declare-fun t2tb4371 ((set (tuple21 (tuple21 b d) (tuple21 a d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b d) (tuple21 a d))))) (sort
  (set1 (tuple2 (tuple2 b1 d1) (tuple2 a1 d1))) (t2tb4371 x))))

(declare-fun tb2t4371 (uni) (set (tuple21 (tuple21 b d) (tuple21 a d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b d) (tuple21 a d)))))
  (! (= (tb2t4371 (t2tb4371 i)) i) :pattern ((t2tb4371 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 d1) (tuple2 a1 d1))) j)
     (= (t2tb4371 (tb2t4371 j)) j)) :pattern ((t2tb4371 (tb2t4371 j))) )))

(declare-fun t2tb4372 ((tuple21 (tuple21 b d) (tuple21 a d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b d) (tuple21 a d)))) (sort
  (tuple2 (tuple2 b1 d1) (tuple2 a1 d1)) (t2tb4372 x))))

(declare-fun tb2t4372 (uni) (tuple21 (tuple21 b d) (tuple21 a d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b d) (tuple21 a d))))
  (! (= (tb2t4372 (t2tb4372 i)) i) :pattern ((t2tb4372 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 d1) (tuple2 a1 d1)) j)
     (= (t2tb4372 (tb2t4372 j)) j)) :pattern ((t2tb4372 (tb2t4372 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 b d))) (t (set (tuple21 a d))) (x (tuple21 b d))
  (y (tuple21 a d)))
  (= (mem (tuple2 (tuple2 b1 d1) (tuple2 a1 d1))
  (Tuple2 (tuple2 b1 d1) (tuple2 a1 d1) (t2tb692 x) (t2tb904 y))
  (times (tuple2 a1 d1) (tuple2 b1 d1) (t2tb687 s) (t2tb903 t)))
  (and (mem23 x s) (mem32 y t)))))

(declare-fun t2tb4373 ((set (tuple21 (tuple21 b d) (set (tuple21 b
  d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b d) (set (tuple21 b d)))))) (sort
  (set1 (tuple2 (tuple2 b1 d1) (set1 (tuple2 b1 d1)))) (t2tb4373 x))))

(declare-fun tb2t4373 (uni) (set (tuple21 (tuple21 b d) (set (tuple21 b
  d)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b d) (set (tuple21 b d))))))
  (! (= (tb2t4373 (t2tb4373 i)) i) :pattern ((t2tb4373 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 d1) (set1 (tuple2 b1 d1)))) j)
     (= (t2tb4373 (tb2t4373 j)) j)) :pattern ((t2tb4373 (tb2t4373 j))) )))

(declare-fun t2tb4374 ((tuple21 (tuple21 b d) (set (tuple21 b d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b d) (set (tuple21 b d))))) (sort
  (tuple2 (tuple2 b1 d1) (set1 (tuple2 b1 d1))) (t2tb4374 x))))

(declare-fun tb2t4374 (uni) (tuple21 (tuple21 b d) (set (tuple21 b d))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b d) (set (tuple21 b d)))))
  (! (= (tb2t4374 (t2tb4374 i)) i) :pattern ((t2tb4374 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 d1) (set1 (tuple2 b1 d1))) j)
     (= (t2tb4374 (tb2t4374 j)) j)) :pattern ((t2tb4374 (tb2t4374 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 b d))) (t (set (set (tuple21 b d))))
  (x (tuple21 b d)) (y (set (tuple21 b d))))
  (= (mem (tuple2 (tuple2 b1 d1) (set1 (tuple2 b1 d1)))
  (Tuple2 (tuple2 b1 d1) (set1 (tuple2 b1 d1)) (t2tb692 x) (t2tb687 y))
  (times (set1 (tuple2 b1 d1)) (tuple2 b1 d1) (t2tb687 s) (t2tb906 t)))
  (and (mem23 x s) (mem33 y t)))))

(declare-fun t2tb747 ((set (tuple21 (tuple21 b d) (tuple21 b d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b d) (tuple21 b d))))) (sort
  (set1 (tuple2 (tuple2 b1 d1) (tuple2 b1 d1))) (t2tb747 x))))

(declare-fun tb2t747 (uni) (set (tuple21 (tuple21 b d) (tuple21 b d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b d) (tuple21 b d)))))
  (! (= (tb2t747 (t2tb747 i)) i) :pattern ((t2tb747 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 d1) (tuple2 b1 d1))) j)
     (= (t2tb747 (tb2t747 j)) j)) :pattern ((t2tb747 (tb2t747 j))) )))

(declare-fun t2tb748 ((tuple21 (tuple21 b d) (tuple21 b d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b d) (tuple21 b d)))) (sort
  (tuple2 (tuple2 b1 d1) (tuple2 b1 d1)) (t2tb748 x))))

(declare-fun tb2t748 (uni) (tuple21 (tuple21 b d) (tuple21 b d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b d) (tuple21 b d))))
  (! (= (tb2t748 (t2tb748 i)) i) :pattern ((t2tb748 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 d1) (tuple2 b1 d1)) j)
     (= (t2tb748 (tb2t748 j)) j)) :pattern ((t2tb748 (tb2t748 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 b d))) (t (set (tuple21 b d))) (x (tuple21 b d))
  (y (tuple21 b d)))
  (= (mem (tuple2 (tuple2 b1 d1) (tuple2 b1 d1))
  (Tuple2 (tuple2 b1 d1) (tuple2 b1 d1) (t2tb692 x) (t2tb692 y))
  (times (tuple2 b1 d1) (tuple2 b1 d1) (t2tb687 s) (t2tb687 t)))
  (and (mem23 x s) (mem23 y t)))))

(declare-fun t2tb754 ((tuple21 (tuple21 b d) d)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b d) d))) (sort (tuple2 (tuple2 b1 d1) d1)
  (t2tb754 x))))

(declare-fun tb2t754 (uni) (tuple21 (tuple21 b d) d))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b d) d)))
  (! (= (tb2t754 (t2tb754 i)) i) :pattern ((t2tb754 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 d1) d1) j) (= (t2tb754 (tb2t754 j)) j)) :pattern (
  (t2tb754 (tb2t754 j))) )))

(declare-fun t2tb4375 ((set (tuple21 (tuple21 b d) d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b d) d)))) (sort
  (set1 (tuple2 (tuple2 b1 d1) d1)) (t2tb4375 x))))

(declare-fun tb2t4375 (uni) (set (tuple21 (tuple21 b d) d)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b d) d))))
  (! (= (tb2t4375 (t2tb4375 i)) i) :pattern ((t2tb4375 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 d1) d1)) j)
     (= (t2tb4375 (tb2t4375 j)) j)) :pattern ((t2tb4375 (tb2t4375 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 b d))) (t (set d)) (x (tuple21 b d)) (y d))
  (= (mem (tuple2 (tuple2 b1 d1) d1)
  (Tuple2 (tuple2 b1 d1) d1 (t2tb692 x) (t2tb694 y))
  (times d1 (tuple2 b1 d1) (t2tb687 s) (t2tb690 t)))
  (and (mem23 x s) (mem20 y t)))))

(declare-fun t2tb4376 ((set (tuple21 (tuple21 b d) (tuple21 a (tuple21 b
  c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b d) (tuple21 a (tuple21 b c)))))) (sort
  (set1 (tuple2 (tuple2 b1 d1) (tuple2 a1 (tuple2 b1 c1)))) (t2tb4376 x))))

(declare-fun tb2t4376 (uni) (set (tuple21 (tuple21 b d) (tuple21 a (tuple21 b
  c)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b d) (tuple21 a (tuple21 b c))))))
  (! (= (tb2t4376 (t2tb4376 i)) i) :pattern ((t2tb4376 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 d1) (tuple2 a1 (tuple2 b1 c1)))) j)
     (= (t2tb4376 (tb2t4376 j)) j)) :pattern ((t2tb4376 (tb2t4376 j))) )))

(declare-fun t2tb4377 ((tuple21 (tuple21 b d) (tuple21 a (tuple21 b
  c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b d) (tuple21 a (tuple21 b c))))) (sort
  (tuple2 (tuple2 b1 d1) (tuple2 a1 (tuple2 b1 c1))) (t2tb4377 x))))

(declare-fun tb2t4377 (uni) (tuple21 (tuple21 b d) (tuple21 a (tuple21 b
  c))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b d) (tuple21 a (tuple21 b c)))))
  (! (= (tb2t4377 (t2tb4377 i)) i) :pattern ((t2tb4377 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 d1) (tuple2 a1 (tuple2 b1 c1))) j)
     (= (t2tb4377 (tb2t4377 j)) j)) :pattern ((t2tb4377 (tb2t4377 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 b d))) (t (set (tuple21 a (tuple21 b c))))
  (x (tuple21 b d)) (y (tuple21 a (tuple21 b c))))
  (= (mem (tuple2 (tuple2 b1 d1) (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 (tuple2 b1 d1) (tuple2 a1 (tuple2 b1 c1)) (t2tb692 x) (t2tb260 y))
  (times (tuple2 a1 (tuple2 b1 c1)) (tuple2 b1 d1) (t2tb687 s) (t2tb261 t)))
  (and (mem23 x s) (mem14 y t)))))

(declare-fun t2tb4378 ((set (tuple21 (tuple21 b d) (set (tuple21 a
  c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b d) (set (tuple21 a c)))))) (sort
  (set1 (tuple2 (tuple2 b1 d1) (set1 (tuple2 a1 c1)))) (t2tb4378 x))))

(declare-fun tb2t4378 (uni) (set (tuple21 (tuple21 b d) (set (tuple21 a
  c)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b d) (set (tuple21 a c))))))
  (! (= (tb2t4378 (t2tb4378 i)) i) :pattern ((t2tb4378 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 d1) (set1 (tuple2 a1 c1)))) j)
     (= (t2tb4378 (tb2t4378 j)) j)) :pattern ((t2tb4378 (tb2t4378 j))) )))

(declare-fun t2tb4379 ((tuple21 (tuple21 b d) (set (tuple21 a c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b d) (set (tuple21 a c))))) (sort
  (tuple2 (tuple2 b1 d1) (set1 (tuple2 a1 c1))) (t2tb4379 x))))

(declare-fun tb2t4379 (uni) (tuple21 (tuple21 b d) (set (tuple21 a c))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b d) (set (tuple21 a c)))))
  (! (= (tb2t4379 (t2tb4379 i)) i) :pattern ((t2tb4379 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 d1) (set1 (tuple2 a1 c1))) j)
     (= (t2tb4379 (tb2t4379 j)) j)) :pattern ((t2tb4379 (tb2t4379 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 b d))) (t (set (set (tuple21 a c))))
  (x (tuple21 b d)) (y (set (tuple21 a c))))
  (= (mem (tuple2 (tuple2 b1 d1) (set1 (tuple2 a1 c1)))
  (Tuple2 (tuple2 b1 d1) (set1 (tuple2 a1 c1)) (t2tb692 x) (t2tb129 y))
  (times (set1 (tuple2 a1 c1)) (tuple2 b1 d1) (t2tb687 s) (t2tb128 t)))
  (and (mem23 x s) (mem11 y t)))))

(declare-fun t2tb755 ((set (tuple21 (tuple21 b d) (tuple21 a c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b d) (tuple21 a c))))) (sort
  (set1 (tuple2 (tuple2 b1 d1) (tuple2 a1 c1))) (t2tb755 x))))

(declare-fun tb2t755 (uni) (set (tuple21 (tuple21 b d) (tuple21 a c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b d) (tuple21 a c)))))
  (! (= (tb2t755 (t2tb755 i)) i) :pattern ((t2tb755 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 d1) (tuple2 a1 c1))) j)
     (= (t2tb755 (tb2t755 j)) j)) :pattern ((t2tb755 (tb2t755 j))) )))

(declare-fun t2tb756 ((tuple21 (tuple21 b d) (tuple21 a c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b d) (tuple21 a c)))) (sort
  (tuple2 (tuple2 b1 d1) (tuple2 a1 c1)) (t2tb756 x))))

(declare-fun tb2t756 (uni) (tuple21 (tuple21 b d) (tuple21 a c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b d) (tuple21 a c))))
  (! (= (tb2t756 (t2tb756 i)) i) :pattern ((t2tb756 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 d1) (tuple2 a1 c1)) j)
     (= (t2tb756 (tb2t756 j)) j)) :pattern ((t2tb756 (tb2t756 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 b d))) (t (set (tuple21 a c))) (x (tuple21 b d))
  (y (tuple21 a c)))
  (= (mem (tuple2 (tuple2 b1 d1) (tuple2 a1 c1))
  (Tuple2 (tuple2 b1 d1) (tuple2 a1 c1) (t2tb692 x) (t2tb133 y))
  (times (tuple2 a1 c1) (tuple2 b1 d1) (t2tb687 s) (t2tb129 t)))
  (and (mem23 x s) (mem10 y t)))))

(declare-fun t2tb1761 ((tuple21 (tuple21 b d) c)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b d) c))) (sort (tuple2 (tuple2 b1 d1) c1)
  (t2tb1761 x))))

(declare-fun tb2t1761 (uni) (tuple21 (tuple21 b d) c))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b d) c)))
  (! (= (tb2t1761 (t2tb1761 i)) i) :pattern ((t2tb1761 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 d1) c1) j) (= (t2tb1761 (tb2t1761 j)) j)) :pattern (
  (t2tb1761 (tb2t1761 j))) )))

(declare-fun t2tb4380 ((set (tuple21 (tuple21 b d) c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b d) c)))) (sort
  (set1 (tuple2 (tuple2 b1 d1) c1)) (t2tb4380 x))))

(declare-fun tb2t4380 (uni) (set (tuple21 (tuple21 b d) c)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b d) c))))
  (! (= (tb2t4380 (t2tb4380 i)) i) :pattern ((t2tb4380 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 d1) c1)) j)
     (= (t2tb4380 (tb2t4380 j)) j)) :pattern ((t2tb4380 (tb2t4380 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 b d))) (t (set c)) (x (tuple21 b d)) (y c))
  (= (mem (tuple2 (tuple2 b1 d1) c1)
  (Tuple2 (tuple2 b1 d1) c1 (t2tb692 x) (t2tb135 y))
  (times c1 (tuple2 b1 d1) (t2tb687 s) (t2tb132 t)))
  (and (mem23 x s) (mem7 y t)))))

(declare-fun t2tb4381 ((set (tuple21 (tuple21 b d) (set (tuple21 a
  b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b d) (set (tuple21 a b)))))) (sort
  (set1 (tuple2 (tuple2 b1 d1) (set1 (tuple2 a1 b1)))) (t2tb4381 x))))

(declare-fun tb2t4381 (uni) (set (tuple21 (tuple21 b d) (set (tuple21 a
  b)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b d) (set (tuple21 a b))))))
  (! (= (tb2t4381 (t2tb4381 i)) i) :pattern ((t2tb4381 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 d1) (set1 (tuple2 a1 b1)))) j)
     (= (t2tb4381 (tb2t4381 j)) j)) :pattern ((t2tb4381 (tb2t4381 j))) )))

(declare-fun t2tb4382 ((tuple21 (tuple21 b d) (set (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b d) (set (tuple21 a b))))) (sort
  (tuple2 (tuple2 b1 d1) (set1 (tuple2 a1 b1))) (t2tb4382 x))))

(declare-fun tb2t4382 (uni) (tuple21 (tuple21 b d) (set (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b d) (set (tuple21 a b)))))
  (! (= (tb2t4382 (t2tb4382 i)) i) :pattern ((t2tb4382 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 d1) (set1 (tuple2 a1 b1))) j)
     (= (t2tb4382 (tb2t4382 j)) j)) :pattern ((t2tb4382 (tb2t4382 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 b d))) (t (set (set (tuple21 a b))))
  (x (tuple21 b d)) (y (set (tuple21 a b))))
  (= (mem (tuple2 (tuple2 b1 d1) (set1 (tuple2 a1 b1)))
  (Tuple2 (tuple2 b1 d1) (set1 (tuple2 a1 b1)) (t2tb692 x) (t2tb11 y))
  (times (set1 (tuple2 a1 b1)) (tuple2 b1 d1) (t2tb687 s) (t2tb10 t)))
  (and (mem23 x s) (mem4 y t)))))

(declare-fun t2tb4383 ((set (tuple21 (tuple21 b d) (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b d) (tuple21 a b))))) (sort
  (set1 (tuple2 (tuple2 b1 d1) (tuple2 a1 b1))) (t2tb4383 x))))

(declare-fun tb2t4383 (uni) (set (tuple21 (tuple21 b d) (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b d) (tuple21 a b)))))
  (! (= (tb2t4383 (t2tb4383 i)) i) :pattern ((t2tb4383 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 d1) (tuple2 a1 b1))) j)
     (= (t2tb4383 (tb2t4383 j)) j)) :pattern ((t2tb4383 (tb2t4383 j))) )))

(declare-fun t2tb4384 ((tuple21 (tuple21 b d) (tuple21 a b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b d) (tuple21 a b)))) (sort
  (tuple2 (tuple2 b1 d1) (tuple2 a1 b1)) (t2tb4384 x))))

(declare-fun tb2t4384 (uni) (tuple21 (tuple21 b d) (tuple21 a b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b d) (tuple21 a b))))
  (! (= (tb2t4384 (t2tb4384 i)) i) :pattern ((t2tb4384 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 d1) (tuple2 a1 b1)) j)
     (= (t2tb4384 (tb2t4384 j)) j)) :pattern ((t2tb4384 (tb2t4384 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 b d))) (t (set (tuple21 a b))) (x (tuple21 b d))
  (y (tuple21 a b)))
  (= (mem (tuple2 (tuple2 b1 d1) (tuple2 a1 b1))
  (Tuple2 (tuple2 b1 d1) (tuple2 a1 b1) (t2tb692 x) (t2tb13 y))
  (times (tuple2 a1 b1) (tuple2 b1 d1) (t2tb687 s) (t2tb11 t)))
  (and (mem23 x s) (mem3 y t)))))

(declare-fun t2tb764 ((tuple21 (tuple21 b d) b)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b d) b))) (sort (tuple2 (tuple2 b1 d1) b1)
  (t2tb764 x))))

(declare-fun tb2t764 (uni) (tuple21 (tuple21 b d) b))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b d) b)))
  (! (= (tb2t764 (t2tb764 i)) i) :pattern ((t2tb764 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 d1) b1) j) (= (t2tb764 (tb2t764 j)) j)) :pattern (
  (t2tb764 (tb2t764 j))) )))

(declare-fun t2tb4385 ((set (tuple21 (tuple21 b d) b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b d) b)))) (sort
  (set1 (tuple2 (tuple2 b1 d1) b1)) (t2tb4385 x))))

(declare-fun tb2t4385 (uni) (set (tuple21 (tuple21 b d) b)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b d) b))))
  (! (= (tb2t4385 (t2tb4385 i)) i) :pattern ((t2tb4385 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 d1) b1)) j)
     (= (t2tb4385 (tb2t4385 j)) j)) :pattern ((t2tb4385 (tb2t4385 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 b d))) (t (set b)) (x (tuple21 b d)) (y b))
  (= (mem (tuple2 (tuple2 b1 d1) b1)
  (Tuple2 (tuple2 b1 d1) b1 (t2tb692 x) (t2tb14 y))
  (times b1 (tuple2 b1 d1) (t2tb687 s) (t2tb12 t)))
  (and (mem23 x s) (mem2 y t)))))

(declare-fun t2tb2043 ((tuple21 (tuple21 b d) a)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b d) a))) (sort (tuple2 (tuple2 b1 d1) a1)
  (t2tb2043 x))))

(declare-fun tb2t2043 (uni) (tuple21 (tuple21 b d) a))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b d) a)))
  (! (= (tb2t2043 (t2tb2043 i)) i) :pattern ((t2tb2043 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 d1) a1) j) (= (t2tb2043 (tb2t2043 j)) j)) :pattern (
  (t2tb2043 (tb2t2043 j))) )))

(declare-fun t2tb4386 ((set (tuple21 (tuple21 b d) a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b d) a)))) (sort
  (set1 (tuple2 (tuple2 b1 d1) a1)) (t2tb4386 x))))

(declare-fun tb2t4386 (uni) (set (tuple21 (tuple21 b d) a)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b d) a))))
  (! (= (tb2t4386 (t2tb4386 i)) i) :pattern ((t2tb4386 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 d1) a1)) j)
     (= (t2tb4386 (tb2t4386 j)) j)) :pattern ((t2tb4386 (tb2t4386 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 b d))) (t (set a)) (x (tuple21 b d)) (y a))
  (= (mem (tuple2 (tuple2 b1 d1) a1)
  (Tuple2 (tuple2 b1 d1) a1 (t2tb692 x) (t2tb2 y))
  (times a1 (tuple2 b1 d1) (t2tb687 s) (t2tb1 t)))
  (and (mem23 x s) (mem1 y t)))))

;; mem_times
  (assert
  (forall ((b2 ty))
  (forall ((s (set (tuple21 b d))) (t uni) (x (tuple21 b d)) (y uni))
  (= (mem (tuple2 (tuple2 b1 d1) b2) (Tuple2 (tuple2 b1 d1) b2 (t2tb692 x) y)
  (times b2 (tuple2 b1 d1) (t2tb687 s) t)) (and (mem23 x s) (mem b2 y t))))))

(declare-fun t2tb4387 ((set (tuple21 d (tuple21 (tuple21 b c) (tuple21 d
  e))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 d (tuple21 (tuple21 b c) (tuple21 d e)))))) (sort
  (set1 (tuple2 d1 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)))) (t2tb4387 x))))

(declare-fun tb2t4387 (uni) (set (tuple21 d (tuple21 (tuple21 b c) (tuple21 d
  e)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 d (tuple21 (tuple21 b c) (tuple21 d e))))))
  (! (= (tb2t4387 (t2tb4387 i)) i) :pattern ((t2tb4387 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 d1 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)))) j)
     (= (t2tb4387 (tb2t4387 j)) j)) :pattern ((t2tb4387 (tb2t4387 j))) )))

(declare-fun t2tb4388 ((tuple21 d (tuple21 (tuple21 b c) (tuple21 d
  e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 d (tuple21 (tuple21 b c) (tuple21 d e))))) (sort
  (tuple2 d1 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1))) (t2tb4388 x))))

(declare-fun tb2t4388 (uni) (tuple21 d (tuple21 (tuple21 b c) (tuple21 d
  e))))

;; BridgeL
  (assert
  (forall ((i (tuple21 d (tuple21 (tuple21 b c) (tuple21 d e)))))
  (! (= (tb2t4388 (t2tb4388 i)) i) :pattern ((t2tb4388 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 d1 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1))) j)
     (= (t2tb4388 (tb2t4388 j)) j)) :pattern ((t2tb4388 (tb2t4388 j))) )))

;; mem_times
  (assert
  (forall ((s (set d)) (t (set (tuple21 (tuple21 b c) (tuple21 d e)))) (x d)
  (y (tuple21 (tuple21 b c) (tuple21 d e))))
  (= (mem (tuple2 d1 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)))
  (Tuple2 d1 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (t2tb694 x) (t2tb4104 y))
  (times (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) d1 (t2tb690 s) (t2tb4102 t)))
  (and (mem20 x s) (mem49 y t)))))

(declare-fun t2tb4389 ((set (tuple21 d (tuple21 a (tuple21 d e))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 d (tuple21 a (tuple21 d e)))))) (sort
  (set1 (tuple2 d1 (tuple2 a1 (tuple2 d1 e1)))) (t2tb4389 x))))

(declare-fun tb2t4389 (uni) (set (tuple21 d (tuple21 a (tuple21 d e)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 d (tuple21 a (tuple21 d e))))))
  (! (= (tb2t4389 (t2tb4389 i)) i) :pattern ((t2tb4389 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 d1 (tuple2 a1 (tuple2 d1 e1)))) j)
     (= (t2tb4389 (tb2t4389 j)) j)) :pattern ((t2tb4389 (tb2t4389 j))) )))

(declare-fun t2tb4390 ((tuple21 d (tuple21 a (tuple21 d e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 d (tuple21 a (tuple21 d e))))) (sort
  (tuple2 d1 (tuple2 a1 (tuple2 d1 e1))) (t2tb4390 x))))

(declare-fun tb2t4390 (uni) (tuple21 d (tuple21 a (tuple21 d e))))

;; BridgeL
  (assert
  (forall ((i (tuple21 d (tuple21 a (tuple21 d e)))))
  (! (= (tb2t4390 (t2tb4390 i)) i) :pattern ((t2tb4390 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 d1 (tuple2 a1 (tuple2 d1 e1))) j)
     (= (t2tb4390 (tb2t4390 j)) j)) :pattern ((t2tb4390 (tb2t4390 j))) )))

;; mem_times
  (assert
  (forall ((s (set d)) (t (set (tuple21 a (tuple21 d e)))) (x d)
  (y (tuple21 a (tuple21 d e))))
  (= (mem (tuple2 d1 (tuple2 a1 (tuple2 d1 e1)))
  (Tuple2 d1 (tuple2 a1 (tuple2 d1 e1)) (t2tb694 x) (t2tb4105 y))
  (times (tuple2 a1 (tuple2 d1 e1)) d1 (t2tb690 s) (t2tb4103 t)))
  (and (mem20 x s) (mem48 y t)))))

(declare-fun t2tb4391 ((tuple21 d (set (tuple21 c e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 d (set (tuple21 c e))))) (sort
  (tuple2 d1 (set1 (tuple2 c1 e1))) (t2tb4391 x))))

(declare-fun tb2t4391 (uni) (tuple21 d (set (tuple21 c e))))

;; BridgeL
  (assert
  (forall ((i (tuple21 d (set (tuple21 c e)))))
  (! (= (tb2t4391 (t2tb4391 i)) i) :pattern ((t2tb4391 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 d1 (set1 (tuple2 c1 e1))) j)
     (= (t2tb4391 (tb2t4391 j)) j)) :pattern ((t2tb4391 (tb2t4391 j))) )))

(declare-fun t2tb4392 ((set (tuple21 d (set (tuple21 c e))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 d (set (tuple21 c e)))))) (sort
  (set1 (tuple2 d1 (set1 (tuple2 c1 e1)))) (t2tb4392 x))))

(declare-fun tb2t4392 (uni) (set (tuple21 d (set (tuple21 c e)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 d (set (tuple21 c e))))))
  (! (= (tb2t4392 (t2tb4392 i)) i) :pattern ((t2tb4392 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 d1 (set1 (tuple2 c1 e1)))) j)
     (= (t2tb4392 (tb2t4392 j)) j)) :pattern ((t2tb4392 (tb2t4392 j))) )))

;; mem_times
  (assert
  (forall ((s (set d)) (t (set (set (tuple21 c e)))) (x d) (y (set (tuple21 c
  e))))
  (= (mem (tuple2 d1 (set1 (tuple2 c1 e1)))
  (Tuple2 d1 (set1 (tuple2 c1 e1)) (t2tb694 x) (t2tb3478 y))
  (times (set1 (tuple2 c1 e1)) d1 (t2tb690 s) (t2tb3854 t)))
  (and (mem20 x s) (mem47 y t)))))

(declare-fun t2tb4393 ((set (tuple21 d (tuple21 c e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 d (tuple21 c e))))) (sort
  (set1 (tuple2 d1 (tuple2 c1 e1))) (t2tb4393 x))))

(declare-fun tb2t4393 (uni) (set (tuple21 d (tuple21 c e))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 d (tuple21 c e)))))
  (! (= (tb2t4393 (t2tb4393 i)) i) :pattern ((t2tb4393 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 d1 (tuple2 c1 e1))) j)
     (= (t2tb4393 (tb2t4393 j)) j)) :pattern ((t2tb4393 (tb2t4393 j))) )))

(declare-fun t2tb4394 ((tuple21 d (tuple21 c e))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 d (tuple21 c e)))) (sort (tuple2 d1 (tuple2 c1 e1))
  (t2tb4394 x))))

(declare-fun tb2t4394 (uni) (tuple21 d (tuple21 c e)))

;; BridgeL
  (assert
  (forall ((i (tuple21 d (tuple21 c e))))
  (! (= (tb2t4394 (t2tb4394 i)) i) :pattern ((t2tb4394 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 d1 (tuple2 c1 e1)) j) (= (t2tb4394 (tb2t4394 j)) j)) :pattern (
  (t2tb4394 (tb2t4394 j))) )))

;; mem_times
  (assert
  (forall ((s (set d)) (t (set (tuple21 c e))) (x d) (y (tuple21 c e)))
  (= (mem (tuple2 d1 (tuple2 c1 e1))
  (Tuple2 d1 (tuple2 c1 e1) (t2tb694 x) (t2tb3479 y))
  (times (tuple2 c1 e1) d1 (t2tb690 s) (t2tb3478 t)))
  (and (mem20 x s) (mem46 y t)))))

(declare-fun t2tb3442 ((set (tuple21 d (tuple21 a e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 d (tuple21 a e))))) (sort
  (set1 (tuple2 d1 (tuple2 a1 e1))) (t2tb3442 x))))

(declare-fun tb2t3442 (uni) (set (tuple21 d (tuple21 a e))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 d (tuple21 a e)))))
  (! (= (tb2t3442 (t2tb3442 i)) i) :pattern ((t2tb3442 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 d1 (tuple2 a1 e1))) j)
     (= (t2tb3442 (tb2t3442 j)) j)) :pattern ((t2tb3442 (tb2t3442 j))) )))

(declare-fun t2tb3443 ((tuple21 d (tuple21 a e))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 d (tuple21 a e)))) (sort (tuple2 d1 (tuple2 a1 e1))
  (t2tb3443 x))))

(declare-fun tb2t3443 (uni) (tuple21 d (tuple21 a e)))

;; BridgeL
  (assert
  (forall ((i (tuple21 d (tuple21 a e))))
  (! (= (tb2t3443 (t2tb3443 i)) i) :pattern ((t2tb3443 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 d1 (tuple2 a1 e1)) j) (= (t2tb3443 (tb2t3443 j)) j)) :pattern (
  (t2tb3443 (tb2t3443 j))) )))

;; mem_times
  (assert
  (forall ((s (set d)) (t (set (tuple21 a e))) (x d) (y (tuple21 a e)))
  (= (mem (tuple2 d1 (tuple2 a1 e1))
  (Tuple2 d1 (tuple2 a1 e1) (t2tb694 x) (t2tb2949 y))
  (times (tuple2 a1 e1) d1 (t2tb690 s) (t2tb2943 t)))
  (and (mem20 x s) (mem44 y t)))))

(declare-fun t2tb3456 ((set (tuple21 d e))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 d e)))) (sort (set1 (tuple2 d1 e1))
  (t2tb3456 x))))

(declare-fun tb2t3456 (uni) (set (tuple21 d e)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 d e))))
  (! (= (tb2t3456 (t2tb3456 i)) i) :pattern ((t2tb3456 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 d1 e1)) j) (= (t2tb3456 (tb2t3456 j)) j)) :pattern (
  (t2tb3456 (tb2t3456 j))) )))

(declare-fun t2tb3457 ((tuple21 d e)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 d e))) (sort (tuple2 d1 e1) (t2tb3457 x))))

(declare-fun tb2t3457 (uni) (tuple21 d e))

;; BridgeL
  (assert
  (forall ((i (tuple21 d e)))
  (! (= (tb2t3457 (t2tb3457 i)) i) :pattern ((t2tb3457 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 d1 e1) j) (= (t2tb3457 (tb2t3457 j)) j)) :pattern (
  (t2tb3457 (tb2t3457 j))) )))

;; mem_times
  (assert
  (forall ((s (set d)) (t (set e)) (x d) (y e))
  (= (mem (tuple2 d1 e1) (Tuple2 d1 e1 (t2tb694 x) (t2tb2955 y))
  (times e1 d1 (t2tb690 s) (t2tb2947 t))) (and (mem20 x s) (mem36 y t)))))

(declare-fun t2tb4395 ((set (tuple21 d (tuple21 a d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 d (tuple21 a d))))) (sort
  (set1 (tuple2 d1 (tuple2 a1 d1))) (t2tb4395 x))))

(declare-fun tb2t4395 (uni) (set (tuple21 d (tuple21 a d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 d (tuple21 a d)))))
  (! (= (tb2t4395 (t2tb4395 i)) i) :pattern ((t2tb4395 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 d1 (tuple2 a1 d1))) j)
     (= (t2tb4395 (tb2t4395 j)) j)) :pattern ((t2tb4395 (tb2t4395 j))) )))

(declare-fun t2tb4396 ((tuple21 d (tuple21 a d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 d (tuple21 a d)))) (sort (tuple2 d1 (tuple2 a1 d1))
  (t2tb4396 x))))

(declare-fun tb2t4396 (uni) (tuple21 d (tuple21 a d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 d (tuple21 a d))))
  (! (= (tb2t4396 (t2tb4396 i)) i) :pattern ((t2tb4396 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 d1 (tuple2 a1 d1)) j) (= (t2tb4396 (tb2t4396 j)) j)) :pattern (
  (t2tb4396 (tb2t4396 j))) )))

;; mem_times
  (assert
  (forall ((s (set d)) (t (set (tuple21 a d))) (x d) (y (tuple21 a d)))
  (= (mem (tuple2 d1 (tuple2 a1 d1))
  (Tuple2 d1 (tuple2 a1 d1) (t2tb694 x) (t2tb904 y))
  (times (tuple2 a1 d1) d1 (t2tb690 s) (t2tb903 t)))
  (and (mem20 x s) (mem32 y t)))))

(declare-fun t2tb4397 ((set (tuple21 d (set (tuple21 b d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 d (set (tuple21 b d)))))) (sort
  (set1 (tuple2 d1 (set1 (tuple2 b1 d1)))) (t2tb4397 x))))

(declare-fun tb2t4397 (uni) (set (tuple21 d (set (tuple21 b d)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 d (set (tuple21 b d))))))
  (! (= (tb2t4397 (t2tb4397 i)) i) :pattern ((t2tb4397 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 d1 (set1 (tuple2 b1 d1)))) j)
     (= (t2tb4397 (tb2t4397 j)) j)) :pattern ((t2tb4397 (tb2t4397 j))) )))

(declare-fun t2tb4398 ((tuple21 d (set (tuple21 b d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 d (set (tuple21 b d))))) (sort
  (tuple2 d1 (set1 (tuple2 b1 d1))) (t2tb4398 x))))

(declare-fun tb2t4398 (uni) (tuple21 d (set (tuple21 b d))))

;; BridgeL
  (assert
  (forall ((i (tuple21 d (set (tuple21 b d)))))
  (! (= (tb2t4398 (t2tb4398 i)) i) :pattern ((t2tb4398 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 d1 (set1 (tuple2 b1 d1))) j)
     (= (t2tb4398 (tb2t4398 j)) j)) :pattern ((t2tb4398 (tb2t4398 j))) )))

;; mem_times
  (assert
  (forall ((s (set d)) (t (set (set (tuple21 b d)))) (x d) (y (set (tuple21 b
  d))))
  (= (mem (tuple2 d1 (set1 (tuple2 b1 d1)))
  (Tuple2 d1 (set1 (tuple2 b1 d1)) (t2tb694 x) (t2tb687 y))
  (times (set1 (tuple2 b1 d1)) d1 (t2tb690 s) (t2tb906 t)))
  (and (mem20 x s) (mem33 y t)))))

(declare-fun t2tb4399 ((set (tuple21 d (tuple21 b d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 d (tuple21 b d))))) (sort
  (set1 (tuple2 d1 (tuple2 b1 d1))) (t2tb4399 x))))

(declare-fun tb2t4399 (uni) (set (tuple21 d (tuple21 b d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 d (tuple21 b d)))))
  (! (= (tb2t4399 (t2tb4399 i)) i) :pattern ((t2tb4399 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 d1 (tuple2 b1 d1))) j)
     (= (t2tb4399 (tb2t4399 j)) j)) :pattern ((t2tb4399 (tb2t4399 j))) )))

(declare-fun t2tb820 ((tuple21 d (tuple21 b d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 d (tuple21 b d)))) (sort (tuple2 d1 (tuple2 b1 d1))
  (t2tb820 x))))

(declare-fun tb2t820 (uni) (tuple21 d (tuple21 b d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 d (tuple21 b d))))
  (! (= (tb2t820 (t2tb820 i)) i) :pattern ((t2tb820 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 d1 (tuple2 b1 d1)) j) (= (t2tb820 (tb2t820 j)) j)) :pattern (
  (t2tb820 (tb2t820 j))) )))

;; mem_times
  (assert
  (forall ((s (set d)) (t (set (tuple21 b d))) (x d) (y (tuple21 b d)))
  (= (mem (tuple2 d1 (tuple2 b1 d1))
  (Tuple2 d1 (tuple2 b1 d1) (t2tb694 x) (t2tb692 y))
  (times (tuple2 b1 d1) d1 (t2tb690 s) (t2tb687 t)))
  (and (mem20 x s) (mem23 y t)))))

(declare-fun t2tb825 ((set (tuple21 d d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 d d)))) (sort (set1 (tuple2 d1 d1)) (t2tb825 x))))

(declare-fun tb2t825 (uni) (set (tuple21 d d)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 d d))))
  (! (= (tb2t825 (t2tb825 i)) i) :pattern ((t2tb825 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 d1 d1)) j) (= (t2tb825 (tb2t825 j)) j)) :pattern (
  (t2tb825 (tb2t825 j))) )))

(declare-fun t2tb826 ((tuple21 d d)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 d d))) (sort (tuple2 d1 d1) (t2tb826 x))))

(declare-fun tb2t826 (uni) (tuple21 d d))

;; BridgeL
  (assert
  (forall ((i (tuple21 d d)))
  (! (= (tb2t826 (t2tb826 i)) i) :pattern ((t2tb826 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 d1 d1) j) (= (t2tb826 (tb2t826 j)) j)) :pattern (
  (t2tb826 (tb2t826 j))) )))

;; mem_times
  (assert
  (forall ((s (set d)) (t (set d)) (x d) (y d))
  (= (mem (tuple2 d1 d1) (Tuple2 d1 d1 (t2tb694 x) (t2tb694 y))
  (times d1 d1 (t2tb690 s) (t2tb690 t))) (and (mem20 x s) (mem20 y t)))))

(declare-fun t2tb4400 ((set (tuple21 d (tuple21 a (tuple21 b c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 d (tuple21 a (tuple21 b c)))))) (sort
  (set1 (tuple2 d1 (tuple2 a1 (tuple2 b1 c1)))) (t2tb4400 x))))

(declare-fun tb2t4400 (uni) (set (tuple21 d (tuple21 a (tuple21 b c)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 d (tuple21 a (tuple21 b c))))))
  (! (= (tb2t4400 (t2tb4400 i)) i) :pattern ((t2tb4400 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 d1 (tuple2 a1 (tuple2 b1 c1)))) j)
     (= (t2tb4400 (tb2t4400 j)) j)) :pattern ((t2tb4400 (tb2t4400 j))) )))

(declare-fun t2tb4401 ((tuple21 d (tuple21 a (tuple21 b c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 d (tuple21 a (tuple21 b c))))) (sort
  (tuple2 d1 (tuple2 a1 (tuple2 b1 c1))) (t2tb4401 x))))

(declare-fun tb2t4401 (uni) (tuple21 d (tuple21 a (tuple21 b c))))

;; BridgeL
  (assert
  (forall ((i (tuple21 d (tuple21 a (tuple21 b c)))))
  (! (= (tb2t4401 (t2tb4401 i)) i) :pattern ((t2tb4401 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 d1 (tuple2 a1 (tuple2 b1 c1))) j)
     (= (t2tb4401 (tb2t4401 j)) j)) :pattern ((t2tb4401 (tb2t4401 j))) )))

;; mem_times
  (assert
  (forall ((s (set d)) (t (set (tuple21 a (tuple21 b c)))) (x d)
  (y (tuple21 a (tuple21 b c))))
  (= (mem (tuple2 d1 (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 d1 (tuple2 a1 (tuple2 b1 c1)) (t2tb694 x) (t2tb260 y))
  (times (tuple2 a1 (tuple2 b1 c1)) d1 (t2tb690 s) (t2tb261 t)))
  (and (mem20 x s) (mem14 y t)))))

(declare-fun t2tb4402 ((set (tuple21 d (set (tuple21 a c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 d (set (tuple21 a c)))))) (sort
  (set1 (tuple2 d1 (set1 (tuple2 a1 c1)))) (t2tb4402 x))))

(declare-fun tb2t4402 (uni) (set (tuple21 d (set (tuple21 a c)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 d (set (tuple21 a c))))))
  (! (= (tb2t4402 (t2tb4402 i)) i) :pattern ((t2tb4402 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 d1 (set1 (tuple2 a1 c1)))) j)
     (= (t2tb4402 (tb2t4402 j)) j)) :pattern ((t2tb4402 (tb2t4402 j))) )))

(declare-fun t2tb4403 ((tuple21 d (set (tuple21 a c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 d (set (tuple21 a c))))) (sort
  (tuple2 d1 (set1 (tuple2 a1 c1))) (t2tb4403 x))))

(declare-fun tb2t4403 (uni) (tuple21 d (set (tuple21 a c))))

;; BridgeL
  (assert
  (forall ((i (tuple21 d (set (tuple21 a c)))))
  (! (= (tb2t4403 (t2tb4403 i)) i) :pattern ((t2tb4403 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 d1 (set1 (tuple2 a1 c1))) j)
     (= (t2tb4403 (tb2t4403 j)) j)) :pattern ((t2tb4403 (tb2t4403 j))) )))

;; mem_times
  (assert
  (forall ((s (set d)) (t (set (set (tuple21 a c)))) (x d) (y (set (tuple21 a
  c))))
  (= (mem (tuple2 d1 (set1 (tuple2 a1 c1)))
  (Tuple2 d1 (set1 (tuple2 a1 c1)) (t2tb694 x) (t2tb129 y))
  (times (set1 (tuple2 a1 c1)) d1 (t2tb690 s) (t2tb128 t)))
  (and (mem20 x s) (mem11 y t)))))

(declare-fun t2tb1781 ((tuple21 d (tuple21 a c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 d (tuple21 a c)))) (sort (tuple2 d1 (tuple2 a1 c1))
  (t2tb1781 x))))

(declare-fun tb2t1781 (uni) (tuple21 d (tuple21 a c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 d (tuple21 a c))))
  (! (= (tb2t1781 (t2tb1781 i)) i) :pattern ((t2tb1781 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 d1 (tuple2 a1 c1)) j) (= (t2tb1781 (tb2t1781 j)) j)) :pattern (
  (t2tb1781 (tb2t1781 j))) )))

(declare-fun t2tb4404 ((set (tuple21 d (tuple21 a c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 d (tuple21 a c))))) (sort
  (set1 (tuple2 d1 (tuple2 a1 c1))) (t2tb4404 x))))

(declare-fun tb2t4404 (uni) (set (tuple21 d (tuple21 a c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 d (tuple21 a c)))))
  (! (= (tb2t4404 (t2tb4404 i)) i) :pattern ((t2tb4404 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 d1 (tuple2 a1 c1))) j)
     (= (t2tb4404 (tb2t4404 j)) j)) :pattern ((t2tb4404 (tb2t4404 j))) )))

;; mem_times
  (assert
  (forall ((s (set d)) (t (set (tuple21 a c))) (x d) (y (tuple21 a c)))
  (= (mem (tuple2 d1 (tuple2 a1 c1))
  (Tuple2 d1 (tuple2 a1 c1) (t2tb694 x) (t2tb133 y))
  (times (tuple2 a1 c1) d1 (t2tb690 s) (t2tb129 t)))
  (and (mem20 x s) (mem10 y t)))))

(declare-fun t2tb829 ((set (tuple21 d c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 d c)))) (sort (set1 (tuple2 d1 c1)) (t2tb829 x))))

(declare-fun tb2t829 (uni) (set (tuple21 d c)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 d c))))
  (! (= (tb2t829 (t2tb829 i)) i) :pattern ((t2tb829 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 d1 c1)) j) (= (t2tb829 (tb2t829 j)) j)) :pattern (
  (t2tb829 (tb2t829 j))) )))

(declare-fun t2tb830 ((tuple21 d c)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 d c))) (sort (tuple2 d1 c1) (t2tb830 x))))

(declare-fun tb2t830 (uni) (tuple21 d c))

;; BridgeL
  (assert
  (forall ((i (tuple21 d c)))
  (! (= (tb2t830 (t2tb830 i)) i) :pattern ((t2tb830 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 d1 c1) j) (= (t2tb830 (tb2t830 j)) j)) :pattern (
  (t2tb830 (tb2t830 j))) )))

;; mem_times
  (assert
  (forall ((s (set d)) (t (set c)) (x d) (y c))
  (= (mem (tuple2 d1 c1) (Tuple2 d1 c1 (t2tb694 x) (t2tb135 y))
  (times c1 d1 (t2tb690 s) (t2tb132 t))) (and (mem20 x s) (mem7 y t)))))

(declare-fun t2tb831 ((set (tuple21 d (set (tuple21 a b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 d (set (tuple21 a b)))))) (sort
  (set1 (tuple2 d1 (set1 (tuple2 a1 b1)))) (t2tb831 x))))

(declare-fun tb2t831 (uni) (set (tuple21 d (set (tuple21 a b)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 d (set (tuple21 a b))))))
  (! (= (tb2t831 (t2tb831 i)) i) :pattern ((t2tb831 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 d1 (set1 (tuple2 a1 b1)))) j)
     (= (t2tb831 (tb2t831 j)) j)) :pattern ((t2tb831 (tb2t831 j))) )))

(declare-fun t2tb832 ((tuple21 d (set (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 d (set (tuple21 a b))))) (sort
  (tuple2 d1 (set1 (tuple2 a1 b1))) (t2tb832 x))))

(declare-fun tb2t832 (uni) (tuple21 d (set (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (tuple21 d (set (tuple21 a b)))))
  (! (= (tb2t832 (t2tb832 i)) i) :pattern ((t2tb832 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 d1 (set1 (tuple2 a1 b1))) j)
     (= (t2tb832 (tb2t832 j)) j)) :pattern ((t2tb832 (tb2t832 j))) )))

;; mem_times
  (assert
  (forall ((s (set d)) (t (set (set (tuple21 a b)))) (x d) (y (set (tuple21 a
  b))))
  (= (mem (tuple2 d1 (set1 (tuple2 a1 b1)))
  (Tuple2 d1 (set1 (tuple2 a1 b1)) (t2tb694 x) (t2tb11 y))
  (times (set1 (tuple2 a1 b1)) d1 (t2tb690 s) (t2tb10 t)))
  (and (mem20 x s) (mem4 y t)))))

(declare-fun t2tb833 ((set (tuple21 d (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 d (tuple21 a b))))) (sort
  (set1 (tuple2 d1 (tuple2 a1 b1))) (t2tb833 x))))

(declare-fun tb2t833 (uni) (set (tuple21 d (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 d (tuple21 a b)))))
  (! (= (tb2t833 (t2tb833 i)) i) :pattern ((t2tb833 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 d1 (tuple2 a1 b1))) j)
     (= (t2tb833 (tb2t833 j)) j)) :pattern ((t2tb833 (tb2t833 j))) )))

(declare-fun t2tb834 ((tuple21 d (tuple21 a b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 d (tuple21 a b)))) (sort (tuple2 d1 (tuple2 a1 b1))
  (t2tb834 x))))

(declare-fun tb2t834 (uni) (tuple21 d (tuple21 a b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 d (tuple21 a b))))
  (! (= (tb2t834 (t2tb834 i)) i) :pattern ((t2tb834 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 d1 (tuple2 a1 b1)) j) (= (t2tb834 (tb2t834 j)) j)) :pattern (
  (t2tb834 (tb2t834 j))) )))

;; mem_times
  (assert
  (forall ((s (set d)) (t (set (tuple21 a b))) (x d) (y (tuple21 a b)))
  (= (mem (tuple2 d1 (tuple2 a1 b1))
  (Tuple2 d1 (tuple2 a1 b1) (t2tb694 x) (t2tb13 y))
  (times (tuple2 a1 b1) d1 (t2tb690 s) (t2tb11 t)))
  (and (mem20 x s) (mem3 y t)))))

(declare-fun t2tb835 ((set (tuple21 d b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 d b)))) (sort (set1 (tuple2 d1 b1)) (t2tb835 x))))

(declare-fun tb2t835 (uni) (set (tuple21 d b)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 d b))))
  (! (= (tb2t835 (t2tb835 i)) i) :pattern ((t2tb835 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 d1 b1)) j) (= (t2tb835 (tb2t835 j)) j)) :pattern (
  (t2tb835 (tb2t835 j))) )))

(declare-fun t2tb836 ((tuple21 d b)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 d b))) (sort (tuple2 d1 b1) (t2tb836 x))))

(declare-fun tb2t836 (uni) (tuple21 d b))

;; BridgeL
  (assert
  (forall ((i (tuple21 d b)))
  (! (= (tb2t836 (t2tb836 i)) i) :pattern ((t2tb836 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 d1 b1) j) (= (t2tb836 (tb2t836 j)) j)) :pattern (
  (t2tb836 (tb2t836 j))) )))

;; mem_times
  (assert
  (forall ((s (set d)) (t (set b)) (x d) (y b))
  (= (mem (tuple2 d1 b1) (Tuple2 d1 b1 (t2tb694 x) (t2tb14 y))
  (times b1 d1 (t2tb690 s) (t2tb12 t))) (and (mem20 x s) (mem2 y t)))))

(declare-fun t2tb837 ((set (tuple21 d a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 d a)))) (sort (set1 (tuple2 d1 a1)) (t2tb837 x))))

(declare-fun tb2t837 (uni) (set (tuple21 d a)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 d a))))
  (! (= (tb2t837 (t2tb837 i)) i) :pattern ((t2tb837 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 d1 a1)) j) (= (t2tb837 (tb2t837 j)) j)) :pattern (
  (t2tb837 (tb2t837 j))) )))

(declare-fun t2tb838 ((tuple21 d a)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 d a))) (sort (tuple2 d1 a1) (t2tb838 x))))

(declare-fun tb2t838 (uni) (tuple21 d a))

;; BridgeL
  (assert
  (forall ((i (tuple21 d a)))
  (! (= (tb2t838 (t2tb838 i)) i) :pattern ((t2tb838 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 d1 a1) j) (= (t2tb838 (tb2t838 j)) j)) :pattern (
  (t2tb838 (tb2t838 j))) )))

;; mem_times
  (assert
  (forall ((s (set d)) (t (set a)) (x d) (y a))
  (= (mem (tuple2 d1 a1) (Tuple2 d1 a1 (t2tb694 x) (t2tb2 y))
  (times a1 d1 (t2tb690 s) (t2tb1 t))) (and (mem20 x s) (mem1 y t)))))

;; mem_times
  (assert
  (forall ((b2 ty))
  (forall ((s (set d)) (t uni) (x d) (y uni))
  (= (mem (tuple2 d1 b2) (Tuple2 d1 b2 (t2tb694 x) y)
  (times b2 d1 (t2tb690 s) t)) (and (mem20 x s) (mem b2 y t))))))

(declare-fun t2tb4405 ((set (tuple21 (tuple21 a (tuple21 b c))
  (tuple21 (tuple21 b c) (tuple21 d e))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a (tuple21 b c)) (tuple21 (tuple21 b c)
  (tuple21 d e)))))) (sort
  (set1
  (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1))))
  (t2tb4405 x))))

(declare-fun tb2t4405 (uni) (set (tuple21 (tuple21 a (tuple21 b c))
  (tuple21 (tuple21 b c) (tuple21 d e)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a (tuple21 b c)) (tuple21 (tuple21 b c)
  (tuple21 d e))))))
  (! (= (tb2t4405 (t2tb4405 i)) i) :pattern ((t2tb4405 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (tuple2 (tuple2 a1 (tuple2 b1 c1))
     (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)))) j)
     (= (t2tb4405 (tb2t4405 j)) j)) :pattern ((t2tb4405 (tb2t4405 j))) )))

(declare-fun t2tb4406 ((tuple21 (tuple21 a (tuple21 b c)) (tuple21 (tuple21 b
  c) (tuple21 d e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a (tuple21 b c)) (tuple21 (tuple21 b c)
  (tuple21 d e))))) (sort
  (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)))
  (t2tb4406 x))))

(declare-fun tb2t4406 (uni) (tuple21 (tuple21 a (tuple21 b c))
  (tuple21 (tuple21 b c) (tuple21 d e))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a (tuple21 b c)) (tuple21 (tuple21 b c)
  (tuple21 d e)))))
  (! (= (tb2t4406 (t2tb4406 i)) i) :pattern ((t2tb4406 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (tuple2 (tuple2 a1 (tuple2 b1 c1))
     (tuple2 (tuple2 b1 c1) (tuple2 d1 e1))) j)
     (= (t2tb4406 (tb2t4406 j)) j)) :pattern ((t2tb4406 (tb2t4406 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a (tuple21 b c)))) (t (set (tuple21 (tuple21 b c)
  (tuple21 d e)))) (x (tuple21 a (tuple21 b c))) (y (tuple21 (tuple21 b c)
  (tuple21 d e))))
  (= (mem
  (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)))
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1))
  (t2tb260 x) (t2tb4104 y))
  (times (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (tuple2 a1 (tuple2 b1 c1))
  (t2tb261 s) (t2tb4102 t))) (and (mem14 x s) (mem49 y t)))))

(declare-fun t2tb4407 ((tuple21 (tuple21 a (tuple21 b c)) (tuple21 a
  (tuple21 d e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a (tuple21 b c)) (tuple21 a (tuple21 d e)))))
  (sort (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 (tuple2 d1 e1)))
  (t2tb4407 x))))

(declare-fun tb2t4407 (uni) (tuple21 (tuple21 a (tuple21 b c)) (tuple21 a
  (tuple21 d e))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a (tuple21 b c)) (tuple21 a (tuple21 d e)))))
  (! (= (tb2t4407 (t2tb4407 i)) i) :pattern ((t2tb4407 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 (tuple2 d1 e1)))
     j) (= (t2tb4407 (tb2t4407 j)) j)) :pattern ((t2tb4407 (tb2t4407 j))) )))

(declare-fun t2tb4408 ((set (tuple21 (tuple21 a (tuple21 b c)) (tuple21 a
  (tuple21 d e))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a (tuple21 b c)) (tuple21 a (tuple21 d
  e)))))) (sort
  (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 (tuple2 d1 e1))))
  (t2tb4408 x))))

(declare-fun tb2t4408 (uni) (set (tuple21 (tuple21 a (tuple21 b c))
  (tuple21 a (tuple21 d e)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a (tuple21 b c)) (tuple21 a (tuple21 d
  e)))))) (! (= (tb2t4408 (t2tb4408 i)) i) :pattern ((t2tb4408 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 (tuple2 d1 e1)))) j)
     (= (t2tb4408 (tb2t4408 j)) j)) :pattern ((t2tb4408 (tb2t4408 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a (tuple21 b c)))) (t (set (tuple21 a (tuple21 d
  e)))) (x (tuple21 a (tuple21 b c))) (y (tuple21 a (tuple21 d e))))
  (= (mem (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 (tuple2 d1 e1)))
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 (tuple2 d1 e1)) (t2tb260 x)
  (t2tb4105 y))
  (times (tuple2 a1 (tuple2 d1 e1)) (tuple2 a1 (tuple2 b1 c1)) (t2tb261 s)
  (t2tb4103 t))) (and (mem14 x s) (mem48 y t)))))

(declare-fun t2tb4409 ((set (tuple21 (tuple21 a (tuple21 b c))
  (set (tuple21 c e))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a (tuple21 b c)) (set (tuple21 c e))))))
  (sort (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) (set1 (tuple2 c1 e1))))
  (t2tb4409 x))))

(declare-fun tb2t4409 (uni) (set (tuple21 (tuple21 a (tuple21 b c))
  (set (tuple21 c e)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a (tuple21 b c)) (set (tuple21 c e))))))
  (! (= (tb2t4409 (t2tb4409 i)) i) :pattern ((t2tb4409 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) (set1 (tuple2 c1 e1)))) j)
     (= (t2tb4409 (tb2t4409 j)) j)) :pattern ((t2tb4409 (tb2t4409 j))) )))

(declare-fun t2tb4410 ((tuple21 (tuple21 a (tuple21 b c)) (set (tuple21 c
  e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a (tuple21 b c)) (set (tuple21 c e))))) (sort
  (tuple2 (tuple2 a1 (tuple2 b1 c1)) (set1 (tuple2 c1 e1))) (t2tb4410 x))))

(declare-fun tb2t4410 (uni) (tuple21 (tuple21 a (tuple21 b c))
  (set (tuple21 c e))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a (tuple21 b c)) (set (tuple21 c e)))))
  (! (= (tb2t4410 (t2tb4410 i)) i) :pattern ((t2tb4410 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 (tuple2 b1 c1)) (set1 (tuple2 c1 e1))) j)
     (= (t2tb4410 (tb2t4410 j)) j)) :pattern ((t2tb4410 (tb2t4410 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a (tuple21 b c)))) (t (set (set (tuple21 c e))))
  (x (tuple21 a (tuple21 b c))) (y (set (tuple21 c e))))
  (= (mem (tuple2 (tuple2 a1 (tuple2 b1 c1)) (set1 (tuple2 c1 e1)))
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) (set1 (tuple2 c1 e1)) (t2tb260 x)
  (t2tb3478 y))
  (times (set1 (tuple2 c1 e1)) (tuple2 a1 (tuple2 b1 c1)) (t2tb261 s)
  (t2tb3854 t))) (and (mem14 x s) (mem47 y t)))))

(declare-fun t2tb4411 ((set (tuple21 (tuple21 a (tuple21 b c)) (tuple21 c
  e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a (tuple21 b c)) (tuple21 c e))))) (sort
  (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 c1 e1))) (t2tb4411 x))))

(declare-fun tb2t4411 (uni) (set (tuple21 (tuple21 a (tuple21 b c))
  (tuple21 c e))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a (tuple21 b c)) (tuple21 c e)))))
  (! (= (tb2t4411 (t2tb4411 i)) i) :pattern ((t2tb4411 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 c1 e1))) j)
     (= (t2tb4411 (tb2t4411 j)) j)) :pattern ((t2tb4411 (tb2t4411 j))) )))

(declare-fun t2tb4412 ((tuple21 (tuple21 a (tuple21 b c)) (tuple21 c
  e))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a (tuple21 b c)) (tuple21 c e)))) (sort
  (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 c1 e1)) (t2tb4412 x))))

(declare-fun tb2t4412 (uni) (tuple21 (tuple21 a (tuple21 b c)) (tuple21 c
  e)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a (tuple21 b c)) (tuple21 c e))))
  (! (= (tb2t4412 (t2tb4412 i)) i) :pattern ((t2tb4412 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 c1 e1)) j)
     (= (t2tb4412 (tb2t4412 j)) j)) :pattern ((t2tb4412 (tb2t4412 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a (tuple21 b c)))) (t (set (tuple21 c e)))
  (x (tuple21 a (tuple21 b c))) (y (tuple21 c e)))
  (= (mem (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 c1 e1))
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 c1 e1) (t2tb260 x) (t2tb3479 y))
  (times (tuple2 c1 e1) (tuple2 a1 (tuple2 b1 c1)) (t2tb261 s) (t2tb3478 t)))
  (and (mem14 x s) (mem46 y t)))))

(declare-fun t2tb4413 ((set (tuple21 (tuple21 a (tuple21 b c)) (tuple21 a
  e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a (tuple21 b c)) (tuple21 a e))))) (sort
  (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 e1))) (t2tb4413 x))))

(declare-fun tb2t4413 (uni) (set (tuple21 (tuple21 a (tuple21 b c))
  (tuple21 a e))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a (tuple21 b c)) (tuple21 a e)))))
  (! (= (tb2t4413 (t2tb4413 i)) i) :pattern ((t2tb4413 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 e1))) j)
     (= (t2tb4413 (tb2t4413 j)) j)) :pattern ((t2tb4413 (tb2t4413 j))) )))

(declare-fun t2tb4414 ((tuple21 (tuple21 a (tuple21 b c)) (tuple21 a
  e))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a (tuple21 b c)) (tuple21 a e)))) (sort
  (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 e1)) (t2tb4414 x))))

(declare-fun tb2t4414 (uni) (tuple21 (tuple21 a (tuple21 b c)) (tuple21 a
  e)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a (tuple21 b c)) (tuple21 a e))))
  (! (= (tb2t4414 (t2tb4414 i)) i) :pattern ((t2tb4414 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 e1)) j)
     (= (t2tb4414 (tb2t4414 j)) j)) :pattern ((t2tb4414 (tb2t4414 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a (tuple21 b c)))) (t (set (tuple21 a e)))
  (x (tuple21 a (tuple21 b c))) (y (tuple21 a e)))
  (= (mem (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 e1))
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 e1) (t2tb260 x) (t2tb2949 y))
  (times (tuple2 a1 e1) (tuple2 a1 (tuple2 b1 c1)) (t2tb261 s) (t2tb2943 t)))
  (and (mem14 x s) (mem44 y t)))))

(declare-fun t2tb4415 ((set (tuple21 (tuple21 a (tuple21 b c)) e))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a (tuple21 b c)) e)))) (sort
  (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) e1)) (t2tb4415 x))))

(declare-fun tb2t4415 (uni) (set (tuple21 (tuple21 a (tuple21 b c)) e)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a (tuple21 b c)) e))))
  (! (= (tb2t4415 (t2tb4415 i)) i) :pattern ((t2tb4415 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) e1)) j)
     (= (t2tb4415 (tb2t4415 j)) j)) :pattern ((t2tb4415 (tb2t4415 j))) )))

(declare-fun t2tb4416 ((tuple21 (tuple21 a (tuple21 b c)) e)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a (tuple21 b c)) e))) (sort
  (tuple2 (tuple2 a1 (tuple2 b1 c1)) e1) (t2tb4416 x))))

(declare-fun tb2t4416 (uni) (tuple21 (tuple21 a (tuple21 b c)) e))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a (tuple21 b c)) e)))
  (! (= (tb2t4416 (t2tb4416 i)) i) :pattern ((t2tb4416 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 (tuple2 b1 c1)) e1) j)
     (= (t2tb4416 (tb2t4416 j)) j)) :pattern ((t2tb4416 (tb2t4416 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a (tuple21 b c)))) (t (set e)) (x (tuple21 a
  (tuple21 b c))) (y e))
  (= (mem (tuple2 (tuple2 a1 (tuple2 b1 c1)) e1)
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) e1 (t2tb260 x) (t2tb2955 y))
  (times e1 (tuple2 a1 (tuple2 b1 c1)) (t2tb261 s) (t2tb2947 t)))
  (and (mem14 x s) (mem36 y t)))))

(declare-fun t2tb4417 ((set (tuple21 (tuple21 a (tuple21 b c)) (tuple21 a
  d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a (tuple21 b c)) (tuple21 a d))))) (sort
  (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 d1))) (t2tb4417 x))))

(declare-fun tb2t4417 (uni) (set (tuple21 (tuple21 a (tuple21 b c))
  (tuple21 a d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a (tuple21 b c)) (tuple21 a d)))))
  (! (= (tb2t4417 (t2tb4417 i)) i) :pattern ((t2tb4417 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 d1))) j)
     (= (t2tb4417 (tb2t4417 j)) j)) :pattern ((t2tb4417 (tb2t4417 j))) )))

(declare-fun t2tb4418 ((tuple21 (tuple21 a (tuple21 b c)) (tuple21 a
  d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a (tuple21 b c)) (tuple21 a d)))) (sort
  (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 d1)) (t2tb4418 x))))

(declare-fun tb2t4418 (uni) (tuple21 (tuple21 a (tuple21 b c)) (tuple21 a
  d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a (tuple21 b c)) (tuple21 a d))))
  (! (= (tb2t4418 (t2tb4418 i)) i) :pattern ((t2tb4418 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 d1)) j)
     (= (t2tb4418 (tb2t4418 j)) j)) :pattern ((t2tb4418 (tb2t4418 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a (tuple21 b c)))) (t (set (tuple21 a d)))
  (x (tuple21 a (tuple21 b c))) (y (tuple21 a d)))
  (= (mem (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 d1))
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 d1) (t2tb260 x) (t2tb904 y))
  (times (tuple2 a1 d1) (tuple2 a1 (tuple2 b1 c1)) (t2tb261 s) (t2tb903 t)))
  (and (mem14 x s) (mem32 y t)))))

(declare-fun t2tb4419 ((set (tuple21 (tuple21 a (tuple21 b c))
  (set (tuple21 b d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a (tuple21 b c)) (set (tuple21 b d))))))
  (sort (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) (set1 (tuple2 b1 d1))))
  (t2tb4419 x))))

(declare-fun tb2t4419 (uni) (set (tuple21 (tuple21 a (tuple21 b c))
  (set (tuple21 b d)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a (tuple21 b c)) (set (tuple21 b d))))))
  (! (= (tb2t4419 (t2tb4419 i)) i) :pattern ((t2tb4419 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) (set1 (tuple2 b1 d1)))) j)
     (= (t2tb4419 (tb2t4419 j)) j)) :pattern ((t2tb4419 (tb2t4419 j))) )))

(declare-fun t2tb4420 ((tuple21 (tuple21 a (tuple21 b c)) (set (tuple21 b
  d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a (tuple21 b c)) (set (tuple21 b d))))) (sort
  (tuple2 (tuple2 a1 (tuple2 b1 c1)) (set1 (tuple2 b1 d1))) (t2tb4420 x))))

(declare-fun tb2t4420 (uni) (tuple21 (tuple21 a (tuple21 b c))
  (set (tuple21 b d))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a (tuple21 b c)) (set (tuple21 b d)))))
  (! (= (tb2t4420 (t2tb4420 i)) i) :pattern ((t2tb4420 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 (tuple2 b1 c1)) (set1 (tuple2 b1 d1))) j)
     (= (t2tb4420 (tb2t4420 j)) j)) :pattern ((t2tb4420 (tb2t4420 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a (tuple21 b c)))) (t (set (set (tuple21 b d))))
  (x (tuple21 a (tuple21 b c))) (y (set (tuple21 b d))))
  (= (mem (tuple2 (tuple2 a1 (tuple2 b1 c1)) (set1 (tuple2 b1 d1)))
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) (set1 (tuple2 b1 d1)) (t2tb260 x)
  (t2tb687 y))
  (times (set1 (tuple2 b1 d1)) (tuple2 a1 (tuple2 b1 c1)) (t2tb261 s)
  (t2tb906 t))) (and (mem14 x s) (mem33 y t)))))

(declare-fun t2tb4421 ((set (tuple21 (tuple21 a (tuple21 b c)) (tuple21 b
  d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a (tuple21 b c)) (tuple21 b d))))) (sort
  (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 b1 d1))) (t2tb4421 x))))

(declare-fun tb2t4421 (uni) (set (tuple21 (tuple21 a (tuple21 b c))
  (tuple21 b d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a (tuple21 b c)) (tuple21 b d)))))
  (! (= (tb2t4421 (t2tb4421 i)) i) :pattern ((t2tb4421 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 b1 d1))) j)
     (= (t2tb4421 (tb2t4421 j)) j)) :pattern ((t2tb4421 (tb2t4421 j))) )))

(declare-fun t2tb4422 ((tuple21 (tuple21 a (tuple21 b c)) (tuple21 b
  d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a (tuple21 b c)) (tuple21 b d)))) (sort
  (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 b1 d1)) (t2tb4422 x))))

(declare-fun tb2t4422 (uni) (tuple21 (tuple21 a (tuple21 b c)) (tuple21 b
  d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a (tuple21 b c)) (tuple21 b d))))
  (! (= (tb2t4422 (t2tb4422 i)) i) :pattern ((t2tb4422 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 b1 d1)) j)
     (= (t2tb4422 (tb2t4422 j)) j)) :pattern ((t2tb4422 (tb2t4422 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a (tuple21 b c)))) (t (set (tuple21 b d)))
  (x (tuple21 a (tuple21 b c))) (y (tuple21 b d)))
  (= (mem (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 b1 d1))
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 b1 d1) (t2tb260 x) (t2tb692 y))
  (times (tuple2 b1 d1) (tuple2 a1 (tuple2 b1 c1)) (t2tb261 s) (t2tb687 t)))
  (and (mem14 x s) (mem23 y t)))))

(declare-fun t2tb4423 ((tuple21 (tuple21 a (tuple21 b c)) d)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a (tuple21 b c)) d))) (sort
  (tuple2 (tuple2 a1 (tuple2 b1 c1)) d1) (t2tb4423 x))))

(declare-fun tb2t4423 (uni) (tuple21 (tuple21 a (tuple21 b c)) d))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a (tuple21 b c)) d)))
  (! (= (tb2t4423 (t2tb4423 i)) i) :pattern ((t2tb4423 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 (tuple2 b1 c1)) d1) j)
     (= (t2tb4423 (tb2t4423 j)) j)) :pattern ((t2tb4423 (tb2t4423 j))) )))

(declare-fun t2tb4424 ((set (tuple21 (tuple21 a (tuple21 b c)) d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a (tuple21 b c)) d)))) (sort
  (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) d1)) (t2tb4424 x))))

(declare-fun tb2t4424 (uni) (set (tuple21 (tuple21 a (tuple21 b c)) d)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a (tuple21 b c)) d))))
  (! (= (tb2t4424 (t2tb4424 i)) i) :pattern ((t2tb4424 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) d1)) j)
     (= (t2tb4424 (tb2t4424 j)) j)) :pattern ((t2tb4424 (tb2t4424 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a (tuple21 b c)))) (t (set d)) (x (tuple21 a
  (tuple21 b c))) (y d))
  (= (mem (tuple2 (tuple2 a1 (tuple2 b1 c1)) d1)
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) d1 (t2tb260 x) (t2tb694 y))
  (times d1 (tuple2 a1 (tuple2 b1 c1)) (t2tb261 s) (t2tb690 t)))
  (and (mem14 x s) (mem20 y t)))))

(declare-fun t2tb4425 ((set (tuple21 (tuple21 a (tuple21 b c)) (tuple21 a
  (tuple21 b c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a (tuple21 b c)) (tuple21 a (tuple21 b
  c)))))) (sort
  (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 (tuple2 b1 c1))))
  (t2tb4425 x))))

(declare-fun tb2t4425 (uni) (set (tuple21 (tuple21 a (tuple21 b c))
  (tuple21 a (tuple21 b c)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a (tuple21 b c)) (tuple21 a (tuple21 b
  c)))))) (! (= (tb2t4425 (t2tb4425 i)) i) :pattern ((t2tb4425 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 (tuple2 b1 c1)))) j)
     (= (t2tb4425 (tb2t4425 j)) j)) :pattern ((t2tb4425 (tb2t4425 j))) )))

(declare-fun t2tb4426 ((tuple21 (tuple21 a (tuple21 b c)) (tuple21 a
  (tuple21 b c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a (tuple21 b c)) (tuple21 a (tuple21 b c)))))
  (sort (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 (tuple2 b1 c1)))
  (t2tb4426 x))))

(declare-fun tb2t4426 (uni) (tuple21 (tuple21 a (tuple21 b c)) (tuple21 a
  (tuple21 b c))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a (tuple21 b c)) (tuple21 a (tuple21 b c)))))
  (! (= (tb2t4426 (t2tb4426 i)) i) :pattern ((t2tb4426 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 (tuple2 b1 c1)))
     j) (= (t2tb4426 (tb2t4426 j)) j)) :pattern ((t2tb4426 (tb2t4426 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a (tuple21 b c)))) (t (set (tuple21 a (tuple21 b
  c)))) (x (tuple21 a (tuple21 b c))) (y (tuple21 a (tuple21 b c))))
  (= (mem (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 (tuple2 b1 c1)) (t2tb260 x)
  (t2tb260 y))
  (times (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 (tuple2 b1 c1)) (t2tb261 s)
  (t2tb261 t))) (and (mem14 x s) (mem14 y t)))))

(declare-fun t2tb4427 ((set (tuple21 (tuple21 a (tuple21 b c))
  (set (tuple21 a c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a (tuple21 b c)) (set (tuple21 a c))))))
  (sort (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) (set1 (tuple2 a1 c1))))
  (t2tb4427 x))))

(declare-fun tb2t4427 (uni) (set (tuple21 (tuple21 a (tuple21 b c))
  (set (tuple21 a c)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a (tuple21 b c)) (set (tuple21 a c))))))
  (! (= (tb2t4427 (t2tb4427 i)) i) :pattern ((t2tb4427 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) (set1 (tuple2 a1 c1)))) j)
     (= (t2tb4427 (tb2t4427 j)) j)) :pattern ((t2tb4427 (tb2t4427 j))) )))

(declare-fun t2tb4428 ((tuple21 (tuple21 a (tuple21 b c)) (set (tuple21 a
  c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a (tuple21 b c)) (set (tuple21 a c))))) (sort
  (tuple2 (tuple2 a1 (tuple2 b1 c1)) (set1 (tuple2 a1 c1))) (t2tb4428 x))))

(declare-fun tb2t4428 (uni) (tuple21 (tuple21 a (tuple21 b c))
  (set (tuple21 a c))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a (tuple21 b c)) (set (tuple21 a c)))))
  (! (= (tb2t4428 (t2tb4428 i)) i) :pattern ((t2tb4428 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 (tuple2 b1 c1)) (set1 (tuple2 a1 c1))) j)
     (= (t2tb4428 (tb2t4428 j)) j)) :pattern ((t2tb4428 (tb2t4428 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a (tuple21 b c)))) (t (set (set (tuple21 a c))))
  (x (tuple21 a (tuple21 b c))) (y (set (tuple21 a c))))
  (= (mem (tuple2 (tuple2 a1 (tuple2 b1 c1)) (set1 (tuple2 a1 c1)))
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) (set1 (tuple2 a1 c1)) (t2tb260 x)
  (t2tb129 y))
  (times (set1 (tuple2 a1 c1)) (tuple2 a1 (tuple2 b1 c1)) (t2tb261 s)
  (t2tb128 t))) (and (mem14 x s) (mem11 y t)))))

(declare-fun t2tb4429 ((set (tuple21 (tuple21 a (tuple21 b c)) (tuple21 a
  c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a (tuple21 b c)) (tuple21 a c))))) (sort
  (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 c1))) (t2tb4429 x))))

(declare-fun tb2t4429 (uni) (set (tuple21 (tuple21 a (tuple21 b c))
  (tuple21 a c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a (tuple21 b c)) (tuple21 a c)))))
  (! (= (tb2t4429 (t2tb4429 i)) i) :pattern ((t2tb4429 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 c1))) j)
     (= (t2tb4429 (tb2t4429 j)) j)) :pattern ((t2tb4429 (tb2t4429 j))) )))

(declare-fun t2tb4430 ((tuple21 (tuple21 a (tuple21 b c)) (tuple21 a
  c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a (tuple21 b c)) (tuple21 a c)))) (sort
  (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 c1)) (t2tb4430 x))))

(declare-fun tb2t4430 (uni) (tuple21 (tuple21 a (tuple21 b c)) (tuple21 a
  c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a (tuple21 b c)) (tuple21 a c))))
  (! (= (tb2t4430 (t2tb4430 i)) i) :pattern ((t2tb4430 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 c1)) j)
     (= (t2tb4430 (tb2t4430 j)) j)) :pattern ((t2tb4430 (tb2t4430 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a (tuple21 b c)))) (t (set (tuple21 a c)))
  (x (tuple21 a (tuple21 b c))) (y (tuple21 a c)))
  (= (mem (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 c1))
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 c1) (t2tb260 x) (t2tb133 y))
  (times (tuple2 a1 c1) (tuple2 a1 (tuple2 b1 c1)) (t2tb261 s) (t2tb129 t)))
  (and (mem14 x s) (mem10 y t)))))

(declare-fun t2tb4431 ((set (tuple21 (tuple21 a (tuple21 b c)) c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a (tuple21 b c)) c)))) (sort
  (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) c1)) (t2tb4431 x))))

(declare-fun tb2t4431 (uni) (set (tuple21 (tuple21 a (tuple21 b c)) c)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a (tuple21 b c)) c))))
  (! (= (tb2t4431 (t2tb4431 i)) i) :pattern ((t2tb4431 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) c1)) j)
     (= (t2tb4431 (tb2t4431 j)) j)) :pattern ((t2tb4431 (tb2t4431 j))) )))

(declare-fun t2tb4432 ((tuple21 (tuple21 a (tuple21 b c)) c)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a (tuple21 b c)) c))) (sort
  (tuple2 (tuple2 a1 (tuple2 b1 c1)) c1) (t2tb4432 x))))

(declare-fun tb2t4432 (uni) (tuple21 (tuple21 a (tuple21 b c)) c))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a (tuple21 b c)) c)))
  (! (= (tb2t4432 (t2tb4432 i)) i) :pattern ((t2tb4432 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 (tuple2 b1 c1)) c1) j)
     (= (t2tb4432 (tb2t4432 j)) j)) :pattern ((t2tb4432 (tb2t4432 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a (tuple21 b c)))) (t (set c)) (x (tuple21 a
  (tuple21 b c))) (y c))
  (= (mem (tuple2 (tuple2 a1 (tuple2 b1 c1)) c1)
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) c1 (t2tb260 x) (t2tb135 y))
  (times c1 (tuple2 a1 (tuple2 b1 c1)) (t2tb261 s) (t2tb132 t)))
  (and (mem14 x s) (mem7 y t)))))

(declare-fun t2tb4433 ((set (tuple21 (tuple21 a (tuple21 b c))
  (set (tuple21 a b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a (tuple21 b c)) (set (tuple21 a b))))))
  (sort (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) (set1 (tuple2 a1 b1))))
  (t2tb4433 x))))

(declare-fun tb2t4433 (uni) (set (tuple21 (tuple21 a (tuple21 b c))
  (set (tuple21 a b)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a (tuple21 b c)) (set (tuple21 a b))))))
  (! (= (tb2t4433 (t2tb4433 i)) i) :pattern ((t2tb4433 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) (set1 (tuple2 a1 b1)))) j)
     (= (t2tb4433 (tb2t4433 j)) j)) :pattern ((t2tb4433 (tb2t4433 j))) )))

(declare-fun t2tb4434 ((tuple21 (tuple21 a (tuple21 b c)) (set (tuple21 a
  b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a (tuple21 b c)) (set (tuple21 a b))))) (sort
  (tuple2 (tuple2 a1 (tuple2 b1 c1)) (set1 (tuple2 a1 b1))) (t2tb4434 x))))

(declare-fun tb2t4434 (uni) (tuple21 (tuple21 a (tuple21 b c))
  (set (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a (tuple21 b c)) (set (tuple21 a b)))))
  (! (= (tb2t4434 (t2tb4434 i)) i) :pattern ((t2tb4434 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 (tuple2 b1 c1)) (set1 (tuple2 a1 b1))) j)
     (= (t2tb4434 (tb2t4434 j)) j)) :pattern ((t2tb4434 (tb2t4434 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a (tuple21 b c)))) (t (set (set (tuple21 a b))))
  (x (tuple21 a (tuple21 b c))) (y (set (tuple21 a b))))
  (= (mem (tuple2 (tuple2 a1 (tuple2 b1 c1)) (set1 (tuple2 a1 b1)))
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) (set1 (tuple2 a1 b1)) (t2tb260 x)
  (t2tb11 y))
  (times (set1 (tuple2 a1 b1)) (tuple2 a1 (tuple2 b1 c1)) (t2tb261 s)
  (t2tb10 t))) (and (mem14 x s) (mem4 y t)))))

(declare-fun t2tb4435 ((set (tuple21 (tuple21 a (tuple21 b c)) (tuple21 a
  b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a (tuple21 b c)) (tuple21 a b))))) (sort
  (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 b1))) (t2tb4435 x))))

(declare-fun tb2t4435 (uni) (set (tuple21 (tuple21 a (tuple21 b c))
  (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a (tuple21 b c)) (tuple21 a b)))))
  (! (= (tb2t4435 (t2tb4435 i)) i) :pattern ((t2tb4435 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 b1))) j)
     (= (t2tb4435 (tb2t4435 j)) j)) :pattern ((t2tb4435 (tb2t4435 j))) )))

(declare-fun t2tb4436 ((tuple21 (tuple21 a (tuple21 b c)) (tuple21 a
  b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a (tuple21 b c)) (tuple21 a b)))) (sort
  (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 b1)) (t2tb4436 x))))

(declare-fun tb2t4436 (uni) (tuple21 (tuple21 a (tuple21 b c)) (tuple21 a
  b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a (tuple21 b c)) (tuple21 a b))))
  (! (= (tb2t4436 (t2tb4436 i)) i) :pattern ((t2tb4436 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 b1)) j)
     (= (t2tb4436 (tb2t4436 j)) j)) :pattern ((t2tb4436 (tb2t4436 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a (tuple21 b c)))) (t (set (tuple21 a b)))
  (x (tuple21 a (tuple21 b c))) (y (tuple21 a b)))
  (= (mem (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 b1))
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 b1) (t2tb260 x) (t2tb13 y))
  (times (tuple2 a1 b1) (tuple2 a1 (tuple2 b1 c1)) (t2tb261 s) (t2tb11 t)))
  (and (mem14 x s) (mem3 y t)))))

(declare-fun t2tb4437 ((set (tuple21 (tuple21 a (tuple21 b c)) b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a (tuple21 b c)) b)))) (sort
  (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) b1)) (t2tb4437 x))))

(declare-fun tb2t4437 (uni) (set (tuple21 (tuple21 a (tuple21 b c)) b)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a (tuple21 b c)) b))))
  (! (= (tb2t4437 (t2tb4437 i)) i) :pattern ((t2tb4437 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) b1)) j)
     (= (t2tb4437 (tb2t4437 j)) j)) :pattern ((t2tb4437 (tb2t4437 j))) )))

(declare-fun t2tb4438 ((tuple21 (tuple21 a (tuple21 b c)) b)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a (tuple21 b c)) b))) (sort
  (tuple2 (tuple2 a1 (tuple2 b1 c1)) b1) (t2tb4438 x))))

(declare-fun tb2t4438 (uni) (tuple21 (tuple21 a (tuple21 b c)) b))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a (tuple21 b c)) b)))
  (! (= (tb2t4438 (t2tb4438 i)) i) :pattern ((t2tb4438 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 (tuple2 b1 c1)) b1) j)
     (= (t2tb4438 (tb2t4438 j)) j)) :pattern ((t2tb4438 (tb2t4438 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a (tuple21 b c)))) (t (set b)) (x (tuple21 a
  (tuple21 b c))) (y b))
  (= (mem (tuple2 (tuple2 a1 (tuple2 b1 c1)) b1)
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) b1 (t2tb260 x) (t2tb14 y))
  (times b1 (tuple2 a1 (tuple2 b1 c1)) (t2tb261 s) (t2tb12 t)))
  (and (mem14 x s) (mem2 y t)))))

(declare-fun t2tb4439 ((tuple21 (tuple21 a (tuple21 b c)) a)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a (tuple21 b c)) a))) (sort
  (tuple2 (tuple2 a1 (tuple2 b1 c1)) a1) (t2tb4439 x))))

(declare-fun tb2t4439 (uni) (tuple21 (tuple21 a (tuple21 b c)) a))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a (tuple21 b c)) a)))
  (! (= (tb2t4439 (t2tb4439 i)) i) :pattern ((t2tb4439 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 (tuple2 b1 c1)) a1) j)
     (= (t2tb4439 (tb2t4439 j)) j)) :pattern ((t2tb4439 (tb2t4439 j))) )))

(declare-fun t2tb4440 ((set (tuple21 (tuple21 a (tuple21 b c)) a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a (tuple21 b c)) a)))) (sort
  (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) a1)) (t2tb4440 x))))

(declare-fun tb2t4440 (uni) (set (tuple21 (tuple21 a (tuple21 b c)) a)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a (tuple21 b c)) a))))
  (! (= (tb2t4440 (t2tb4440 i)) i) :pattern ((t2tb4440 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) a1)) j)
     (= (t2tb4440 (tb2t4440 j)) j)) :pattern ((t2tb4440 (tb2t4440 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a (tuple21 b c)))) (t (set a)) (x (tuple21 a
  (tuple21 b c))) (y a))
  (= (mem (tuple2 (tuple2 a1 (tuple2 b1 c1)) a1)
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) a1 (t2tb260 x) (t2tb2 y))
  (times a1 (tuple2 a1 (tuple2 b1 c1)) (t2tb261 s) (t2tb1 t)))
  (and (mem14 x s) (mem1 y t)))))

;; mem_times
  (assert
  (forall ((b2 ty))
  (forall ((s (set (tuple21 a (tuple21 b c)))) (t uni) (x (tuple21 a
  (tuple21 b c))) (y uni))
  (= (mem (tuple2 (tuple2 a1 (tuple2 b1 c1)) b2)
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) b2 (t2tb260 x) y)
  (times b2 (tuple2 a1 (tuple2 b1 c1)) (t2tb261 s) t))
  (and (mem14 x s) (mem b2 y t))))))

(declare-fun t2tb4441 ((set (tuple21 (set (tuple21 a c)) (tuple21 (tuple21 b
  c) (tuple21 d e))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a c)) (tuple21 (tuple21 b c)
  (tuple21 d e)))))) (sort
  (set1
  (tuple2 (set1 (tuple2 a1 c1)) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1))))
  (t2tb4441 x))))

(declare-fun tb2t4441 (uni) (set (tuple21 (set (tuple21 a c))
  (tuple21 (tuple21 b c) (tuple21 d e)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a c)) (tuple21 (tuple21 b c)
  (tuple21 d e))))))
  (! (= (tb2t4441 (t2tb4441 i)) i) :pattern ((t2tb4441 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (tuple2 (set1 (tuple2 a1 c1)) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1))))
     j) (= (t2tb4441 (tb2t4441 j)) j)) :pattern ((t2tb4441 (tb2t4441 j))) )))

(declare-fun t2tb4442 ((tuple21 (set (tuple21 a c)) (tuple21 (tuple21 b c)
  (tuple21 d e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a c)) (tuple21 (tuple21 b c) (tuple21 d
  e))))) (sort
  (tuple2 (set1 (tuple2 a1 c1)) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)))
  (t2tb4442 x))))

(declare-fun tb2t4442 (uni) (tuple21 (set (tuple21 a c)) (tuple21 (tuple21 b
  c) (tuple21 d e))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a c)) (tuple21 (tuple21 b c) (tuple21 d
  e))))) (! (= (tb2t4442 (t2tb4442 i)) i) :pattern ((t2tb4442 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (tuple2 (set1 (tuple2 a1 c1)) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1))) j)
     (= (t2tb4442 (tb2t4442 j)) j)) :pattern ((t2tb4442 (tb2t4442 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a c)))) (t (set (tuple21 (tuple21 b c)
  (tuple21 d e)))) (x (set (tuple21 a c))) (y (tuple21 (tuple21 b c)
  (tuple21 d e))))
  (= (mem
  (tuple2 (set1 (tuple2 a1 c1)) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)))
  (Tuple2 (set1 (tuple2 a1 c1)) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1))
  (t2tb129 x) (t2tb4104 y))
  (times (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (set1 (tuple2 a1 c1))
  (t2tb128 s) (t2tb4102 t))) (and (mem11 x s) (mem49 y t)))))

(declare-fun t2tb4443 ((set (tuple21 (set (tuple21 a c)) (tuple21 a
  (tuple21 d e))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a c)) (tuple21 a (tuple21 d e))))))
  (sort (set1 (tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 (tuple2 d1 e1))))
  (t2tb4443 x))))

(declare-fun tb2t4443 (uni) (set (tuple21 (set (tuple21 a c)) (tuple21 a
  (tuple21 d e)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a c)) (tuple21 a (tuple21 d e))))))
  (! (= (tb2t4443 (t2tb4443 i)) i) :pattern ((t2tb4443 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 (tuple2 d1 e1)))) j)
     (= (t2tb4443 (tb2t4443 j)) j)) :pattern ((t2tb4443 (tb2t4443 j))) )))

(declare-fun t2tb4444 ((tuple21 (set (tuple21 a c)) (tuple21 a (tuple21 d
  e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a c)) (tuple21 a (tuple21 d e))))) (sort
  (tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 (tuple2 d1 e1))) (t2tb4444 x))))

(declare-fun tb2t4444 (uni) (tuple21 (set (tuple21 a c)) (tuple21 a
  (tuple21 d e))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a c)) (tuple21 a (tuple21 d e)))))
  (! (= (tb2t4444 (t2tb4444 i)) i) :pattern ((t2tb4444 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 (tuple2 d1 e1))) j)
     (= (t2tb4444 (tb2t4444 j)) j)) :pattern ((t2tb4444 (tb2t4444 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a c)))) (t (set (tuple21 a (tuple21 d e))))
  (x (set (tuple21 a c))) (y (tuple21 a (tuple21 d e))))
  (= (mem (tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 (tuple2 d1 e1)))
  (Tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 (tuple2 d1 e1)) (t2tb129 x)
  (t2tb4105 y))
  (times (tuple2 a1 (tuple2 d1 e1)) (set1 (tuple2 a1 c1)) (t2tb128 s)
  (t2tb4103 t))) (and (mem11 x s) (mem48 y t)))))

(declare-fun t2tb4445 ((set (tuple21 (set (tuple21 a c)) (set (tuple21 c
  e))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a c)) (set (tuple21 c e)))))) (sort
  (set1 (tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 c1 e1)))) (t2tb4445 x))))

(declare-fun tb2t4445 (uni) (set (tuple21 (set (tuple21 a c)) (set (tuple21 c
  e)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a c)) (set (tuple21 c e))))))
  (! (= (tb2t4445 (t2tb4445 i)) i) :pattern ((t2tb4445 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 c1 e1)))) j)
     (= (t2tb4445 (tb2t4445 j)) j)) :pattern ((t2tb4445 (tb2t4445 j))) )))

(declare-fun t2tb4446 ((tuple21 (set (tuple21 a c)) (set (tuple21 c
  e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a c)) (set (tuple21 c e))))) (sort
  (tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 c1 e1))) (t2tb4446 x))))

(declare-fun tb2t4446 (uni) (tuple21 (set (tuple21 a c)) (set (tuple21 c
  e))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a c)) (set (tuple21 c e)))))
  (! (= (tb2t4446 (t2tb4446 i)) i) :pattern ((t2tb4446 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 c1 e1))) j)
     (= (t2tb4446 (tb2t4446 j)) j)) :pattern ((t2tb4446 (tb2t4446 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a c)))) (t (set (set (tuple21 c e))))
  (x (set (tuple21 a c))) (y (set (tuple21 c e))))
  (= (mem (tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 c1 e1)))
  (Tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 c1 e1)) (t2tb129 x)
  (t2tb3478 y))
  (times (set1 (tuple2 c1 e1)) (set1 (tuple2 a1 c1)) (t2tb128 s)
  (t2tb3854 t))) (and (mem11 x s) (mem47 y t)))))

(declare-fun t2tb4447 ((set (tuple21 (set (tuple21 a c)) (tuple21 c
  e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a c)) (tuple21 c e))))) (sort
  (set1 (tuple2 (set1 (tuple2 a1 c1)) (tuple2 c1 e1))) (t2tb4447 x))))

(declare-fun tb2t4447 (uni) (set (tuple21 (set (tuple21 a c)) (tuple21 c
  e))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a c)) (tuple21 c e)))))
  (! (= (tb2t4447 (t2tb4447 i)) i) :pattern ((t2tb4447 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 a1 c1)) (tuple2 c1 e1))) j)
     (= (t2tb4447 (tb2t4447 j)) j)) :pattern ((t2tb4447 (tb2t4447 j))) )))

(declare-fun t2tb4448 ((tuple21 (set (tuple21 a c)) (tuple21 c e))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a c)) (tuple21 c e)))) (sort
  (tuple2 (set1 (tuple2 a1 c1)) (tuple2 c1 e1)) (t2tb4448 x))))

(declare-fun tb2t4448 (uni) (tuple21 (set (tuple21 a c)) (tuple21 c e)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a c)) (tuple21 c e))))
  (! (= (tb2t4448 (t2tb4448 i)) i) :pattern ((t2tb4448 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 a1 c1)) (tuple2 c1 e1)) j)
     (= (t2tb4448 (tb2t4448 j)) j)) :pattern ((t2tb4448 (tb2t4448 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a c)))) (t (set (tuple21 c e)))
  (x (set (tuple21 a c))) (y (tuple21 c e)))
  (= (mem (tuple2 (set1 (tuple2 a1 c1)) (tuple2 c1 e1))
  (Tuple2 (set1 (tuple2 a1 c1)) (tuple2 c1 e1) (t2tb129 x) (t2tb3479 y))
  (times (tuple2 c1 e1) (set1 (tuple2 a1 c1)) (t2tb128 s) (t2tb3478 t)))
  (and (mem11 x s) (mem46 y t)))))

(declare-fun t2tb4449 ((set (tuple21 (set (tuple21 a c)) (tuple21 a
  e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a c)) (tuple21 a e))))) (sort
  (set1 (tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 e1))) (t2tb4449 x))))

(declare-fun tb2t4449 (uni) (set (tuple21 (set (tuple21 a c)) (tuple21 a
  e))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a c)) (tuple21 a e)))))
  (! (= (tb2t4449 (t2tb4449 i)) i) :pattern ((t2tb4449 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 e1))) j)
     (= (t2tb4449 (tb2t4449 j)) j)) :pattern ((t2tb4449 (tb2t4449 j))) )))

(declare-fun t2tb4450 ((tuple21 (set (tuple21 a c)) (tuple21 a e))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a c)) (tuple21 a e)))) (sort
  (tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 e1)) (t2tb4450 x))))

(declare-fun tb2t4450 (uni) (tuple21 (set (tuple21 a c)) (tuple21 a e)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a c)) (tuple21 a e))))
  (! (= (tb2t4450 (t2tb4450 i)) i) :pattern ((t2tb4450 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 e1)) j)
     (= (t2tb4450 (tb2t4450 j)) j)) :pattern ((t2tb4450 (tb2t4450 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a c)))) (t (set (tuple21 a e)))
  (x (set (tuple21 a c))) (y (tuple21 a e)))
  (= (mem (tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 e1))
  (Tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 e1) (t2tb129 x) (t2tb2949 y))
  (times (tuple2 a1 e1) (set1 (tuple2 a1 c1)) (t2tb128 s) (t2tb2943 t)))
  (and (mem11 x s) (mem44 y t)))))

(declare-fun t2tb4451 ((set (tuple21 (set (tuple21 a c)) e))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a c)) e)))) (sort
  (set1 (tuple2 (set1 (tuple2 a1 c1)) e1)) (t2tb4451 x))))

(declare-fun tb2t4451 (uni) (set (tuple21 (set (tuple21 a c)) e)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a c)) e))))
  (! (= (tb2t4451 (t2tb4451 i)) i) :pattern ((t2tb4451 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 a1 c1)) e1)) j)
     (= (t2tb4451 (tb2t4451 j)) j)) :pattern ((t2tb4451 (tb2t4451 j))) )))

(declare-fun t2tb4452 ((tuple21 (set (tuple21 a c)) e)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a c)) e))) (sort
  (tuple2 (set1 (tuple2 a1 c1)) e1) (t2tb4452 x))))

(declare-fun tb2t4452 (uni) (tuple21 (set (tuple21 a c)) e))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a c)) e)))
  (! (= (tb2t4452 (t2tb4452 i)) i) :pattern ((t2tb4452 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 a1 c1)) e1) j)
     (= (t2tb4452 (tb2t4452 j)) j)) :pattern ((t2tb4452 (tb2t4452 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a c)))) (t (set e)) (x (set (tuple21 a c)))
  (y e))
  (= (mem (tuple2 (set1 (tuple2 a1 c1)) e1)
  (Tuple2 (set1 (tuple2 a1 c1)) e1 (t2tb129 x) (t2tb2955 y))
  (times e1 (set1 (tuple2 a1 c1)) (t2tb128 s) (t2tb2947 t)))
  (and (mem11 x s) (mem36 y t)))))

(declare-fun t2tb4453 ((tuple21 (set (tuple21 a c)) (tuple21 a d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a c)) (tuple21 a d)))) (sort
  (tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 d1)) (t2tb4453 x))))

(declare-fun tb2t4453 (uni) (tuple21 (set (tuple21 a c)) (tuple21 a d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a c)) (tuple21 a d))))
  (! (= (tb2t4453 (t2tb4453 i)) i) :pattern ((t2tb4453 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 d1)) j)
     (= (t2tb4453 (tb2t4453 j)) j)) :pattern ((t2tb4453 (tb2t4453 j))) )))

(declare-fun t2tb4454 ((set (tuple21 (set (tuple21 a c)) (tuple21 a
  d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a c)) (tuple21 a d))))) (sort
  (set1 (tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 d1))) (t2tb4454 x))))

(declare-fun tb2t4454 (uni) (set (tuple21 (set (tuple21 a c)) (tuple21 a
  d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a c)) (tuple21 a d)))))
  (! (= (tb2t4454 (t2tb4454 i)) i) :pattern ((t2tb4454 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 d1))) j)
     (= (t2tb4454 (tb2t4454 j)) j)) :pattern ((t2tb4454 (tb2t4454 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a c)))) (t (set (tuple21 a d)))
  (x (set (tuple21 a c))) (y (tuple21 a d)))
  (= (mem (tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 d1))
  (Tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 d1) (t2tb129 x) (t2tb904 y))
  (times (tuple2 a1 d1) (set1 (tuple2 a1 c1)) (t2tb128 s) (t2tb903 t)))
  (and (mem11 x s) (mem32 y t)))))

(declare-fun t2tb4455 ((set (tuple21 (set (tuple21 a c)) (set (tuple21 b
  d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a c)) (set (tuple21 b d)))))) (sort
  (set1 (tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 b1 d1)))) (t2tb4455 x))))

(declare-fun tb2t4455 (uni) (set (tuple21 (set (tuple21 a c)) (set (tuple21 b
  d)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a c)) (set (tuple21 b d))))))
  (! (= (tb2t4455 (t2tb4455 i)) i) :pattern ((t2tb4455 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 b1 d1)))) j)
     (= (t2tb4455 (tb2t4455 j)) j)) :pattern ((t2tb4455 (tb2t4455 j))) )))

(declare-fun t2tb4456 ((tuple21 (set (tuple21 a c)) (set (tuple21 b
  d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a c)) (set (tuple21 b d))))) (sort
  (tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 b1 d1))) (t2tb4456 x))))

(declare-fun tb2t4456 (uni) (tuple21 (set (tuple21 a c)) (set (tuple21 b
  d))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a c)) (set (tuple21 b d)))))
  (! (= (tb2t4456 (t2tb4456 i)) i) :pattern ((t2tb4456 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 b1 d1))) j)
     (= (t2tb4456 (tb2t4456 j)) j)) :pattern ((t2tb4456 (tb2t4456 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a c)))) (t (set (set (tuple21 b d))))
  (x (set (tuple21 a c))) (y (set (tuple21 b d))))
  (= (mem (tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 b1 d1)))
  (Tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 b1 d1)) (t2tb129 x)
  (t2tb687 y))
  (times (set1 (tuple2 b1 d1)) (set1 (tuple2 a1 c1)) (t2tb128 s) (t2tb906 t)))
  (and (mem11 x s) (mem33 y t)))))

(declare-fun t2tb4457 ((set (tuple21 (set (tuple21 a c)) (tuple21 b
  d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a c)) (tuple21 b d))))) (sort
  (set1 (tuple2 (set1 (tuple2 a1 c1)) (tuple2 b1 d1))) (t2tb4457 x))))

(declare-fun tb2t4457 (uni) (set (tuple21 (set (tuple21 a c)) (tuple21 b
  d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a c)) (tuple21 b d)))))
  (! (= (tb2t4457 (t2tb4457 i)) i) :pattern ((t2tb4457 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 a1 c1)) (tuple2 b1 d1))) j)
     (= (t2tb4457 (tb2t4457 j)) j)) :pattern ((t2tb4457 (tb2t4457 j))) )))

(declare-fun t2tb4458 ((tuple21 (set (tuple21 a c)) (tuple21 b d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a c)) (tuple21 b d)))) (sort
  (tuple2 (set1 (tuple2 a1 c1)) (tuple2 b1 d1)) (t2tb4458 x))))

(declare-fun tb2t4458 (uni) (tuple21 (set (tuple21 a c)) (tuple21 b d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a c)) (tuple21 b d))))
  (! (= (tb2t4458 (t2tb4458 i)) i) :pattern ((t2tb4458 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 a1 c1)) (tuple2 b1 d1)) j)
     (= (t2tb4458 (tb2t4458 j)) j)) :pattern ((t2tb4458 (tb2t4458 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a c)))) (t (set (tuple21 b d)))
  (x (set (tuple21 a c))) (y (tuple21 b d)))
  (= (mem (tuple2 (set1 (tuple2 a1 c1)) (tuple2 b1 d1))
  (Tuple2 (set1 (tuple2 a1 c1)) (tuple2 b1 d1) (t2tb129 x) (t2tb692 y))
  (times (tuple2 b1 d1) (set1 (tuple2 a1 c1)) (t2tb128 s) (t2tb687 t)))
  (and (mem11 x s) (mem23 y t)))))

(declare-fun t2tb4459 ((set (tuple21 (set (tuple21 a c)) d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a c)) d)))) (sort
  (set1 (tuple2 (set1 (tuple2 a1 c1)) d1)) (t2tb4459 x))))

(declare-fun tb2t4459 (uni) (set (tuple21 (set (tuple21 a c)) d)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a c)) d))))
  (! (= (tb2t4459 (t2tb4459 i)) i) :pattern ((t2tb4459 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 a1 c1)) d1)) j)
     (= (t2tb4459 (tb2t4459 j)) j)) :pattern ((t2tb4459 (tb2t4459 j))) )))

(declare-fun t2tb4460 ((tuple21 (set (tuple21 a c)) d)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a c)) d))) (sort
  (tuple2 (set1 (tuple2 a1 c1)) d1) (t2tb4460 x))))

(declare-fun tb2t4460 (uni) (tuple21 (set (tuple21 a c)) d))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a c)) d)))
  (! (= (tb2t4460 (t2tb4460 i)) i) :pattern ((t2tb4460 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 a1 c1)) d1) j)
     (= (t2tb4460 (tb2t4460 j)) j)) :pattern ((t2tb4460 (tb2t4460 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a c)))) (t (set d)) (x (set (tuple21 a c)))
  (y d))
  (= (mem (tuple2 (set1 (tuple2 a1 c1)) d1)
  (Tuple2 (set1 (tuple2 a1 c1)) d1 (t2tb129 x) (t2tb694 y))
  (times d1 (set1 (tuple2 a1 c1)) (t2tb128 s) (t2tb690 t)))
  (and (mem11 x s) (mem20 y t)))))

(declare-fun t2tb4461 ((set (tuple21 (set (tuple21 a c)) (tuple21 a
  (tuple21 b c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a c)) (tuple21 a (tuple21 b c))))))
  (sort (set1 (tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 (tuple2 b1 c1))))
  (t2tb4461 x))))

(declare-fun tb2t4461 (uni) (set (tuple21 (set (tuple21 a c)) (tuple21 a
  (tuple21 b c)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a c)) (tuple21 a (tuple21 b c))))))
  (! (= (tb2t4461 (t2tb4461 i)) i) :pattern ((t2tb4461 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 (tuple2 b1 c1)))) j)
     (= (t2tb4461 (tb2t4461 j)) j)) :pattern ((t2tb4461 (tb2t4461 j))) )))

(declare-fun t2tb4462 ((tuple21 (set (tuple21 a c)) (tuple21 a (tuple21 b
  c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a c)) (tuple21 a (tuple21 b c))))) (sort
  (tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 (tuple2 b1 c1))) (t2tb4462 x))))

(declare-fun tb2t4462 (uni) (tuple21 (set (tuple21 a c)) (tuple21 a
  (tuple21 b c))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a c)) (tuple21 a (tuple21 b c)))))
  (! (= (tb2t4462 (t2tb4462 i)) i) :pattern ((t2tb4462 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 (tuple2 b1 c1))) j)
     (= (t2tb4462 (tb2t4462 j)) j)) :pattern ((t2tb4462 (tb2t4462 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a c)))) (t (set (tuple21 a (tuple21 b c))))
  (x (set (tuple21 a c))) (y (tuple21 a (tuple21 b c))))
  (= (mem (tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 (tuple2 b1 c1)) (t2tb129 x)
  (t2tb260 y))
  (times (tuple2 a1 (tuple2 b1 c1)) (set1 (tuple2 a1 c1)) (t2tb128 s)
  (t2tb261 t))) (and (mem11 x s) (mem14 y t)))))

(declare-fun t2tb4463 ((set (tuple21 (set (tuple21 a c)) (set (tuple21 a
  c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a c)) (set (tuple21 a c)))))) (sort
  (set1 (tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 a1 c1)))) (t2tb4463 x))))

(declare-fun tb2t4463 (uni) (set (tuple21 (set (tuple21 a c)) (set (tuple21 a
  c)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a c)) (set (tuple21 a c))))))
  (! (= (tb2t4463 (t2tb4463 i)) i) :pattern ((t2tb4463 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 a1 c1)))) j)
     (= (t2tb4463 (tb2t4463 j)) j)) :pattern ((t2tb4463 (tb2t4463 j))) )))

(declare-fun t2tb4464 ((tuple21 (set (tuple21 a c)) (set (tuple21 a
  c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a c)) (set (tuple21 a c))))) (sort
  (tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 a1 c1))) (t2tb4464 x))))

(declare-fun tb2t4464 (uni) (tuple21 (set (tuple21 a c)) (set (tuple21 a
  c))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a c)) (set (tuple21 a c)))))
  (! (= (tb2t4464 (t2tb4464 i)) i) :pattern ((t2tb4464 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 a1 c1))) j)
     (= (t2tb4464 (tb2t4464 j)) j)) :pattern ((t2tb4464 (tb2t4464 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a c)))) (t (set (set (tuple21 a c))))
  (x (set (tuple21 a c))) (y (set (tuple21 a c))))
  (= (mem (tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 a1 c1)))
  (Tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 a1 c1)) (t2tb129 x)
  (t2tb129 y))
  (times (set1 (tuple2 a1 c1)) (set1 (tuple2 a1 c1)) (t2tb128 s) (t2tb128 t)))
  (and (mem11 x s) (mem11 y t)))))

(declare-fun t2tb4465 ((set (tuple21 (set (tuple21 a c)) (tuple21 a
  c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a c)) (tuple21 a c))))) (sort
  (set1 (tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 c1))) (t2tb4465 x))))

(declare-fun tb2t4465 (uni) (set (tuple21 (set (tuple21 a c)) (tuple21 a
  c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a c)) (tuple21 a c)))))
  (! (= (tb2t4465 (t2tb4465 i)) i) :pattern ((t2tb4465 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 c1))) j)
     (= (t2tb4465 (tb2t4465 j)) j)) :pattern ((t2tb4465 (tb2t4465 j))) )))

(declare-fun t2tb4466 ((tuple21 (set (tuple21 a c)) (tuple21 a c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a c)) (tuple21 a c)))) (sort
  (tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 c1)) (t2tb4466 x))))

(declare-fun tb2t4466 (uni) (tuple21 (set (tuple21 a c)) (tuple21 a c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a c)) (tuple21 a c))))
  (! (= (tb2t4466 (t2tb4466 i)) i) :pattern ((t2tb4466 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 c1)) j)
     (= (t2tb4466 (tb2t4466 j)) j)) :pattern ((t2tb4466 (tb2t4466 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a c)))) (t (set (tuple21 a c)))
  (x (set (tuple21 a c))) (y (tuple21 a c)))
  (= (mem (tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 c1))
  (Tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 c1) (t2tb129 x) (t2tb133 y))
  (times (tuple2 a1 c1) (set1 (tuple2 a1 c1)) (t2tb128 s) (t2tb129 t)))
  (and (mem11 x s) (mem10 y t)))))

(declare-fun t2tb4467 ((set (tuple21 (set (tuple21 a c)) c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a c)) c)))) (sort
  (set1 (tuple2 (set1 (tuple2 a1 c1)) c1)) (t2tb4467 x))))

(declare-fun tb2t4467 (uni) (set (tuple21 (set (tuple21 a c)) c)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a c)) c))))
  (! (= (tb2t4467 (t2tb4467 i)) i) :pattern ((t2tb4467 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 a1 c1)) c1)) j)
     (= (t2tb4467 (tb2t4467 j)) j)) :pattern ((t2tb4467 (tb2t4467 j))) )))

(declare-fun t2tb4468 ((tuple21 (set (tuple21 a c)) c)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a c)) c))) (sort
  (tuple2 (set1 (tuple2 a1 c1)) c1) (t2tb4468 x))))

(declare-fun tb2t4468 (uni) (tuple21 (set (tuple21 a c)) c))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a c)) c)))
  (! (= (tb2t4468 (t2tb4468 i)) i) :pattern ((t2tb4468 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 a1 c1)) c1) j)
     (= (t2tb4468 (tb2t4468 j)) j)) :pattern ((t2tb4468 (tb2t4468 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a c)))) (t (set c)) (x (set (tuple21 a c)))
  (y c))
  (= (mem (tuple2 (set1 (tuple2 a1 c1)) c1)
  (Tuple2 (set1 (tuple2 a1 c1)) c1 (t2tb129 x) (t2tb135 y))
  (times c1 (set1 (tuple2 a1 c1)) (t2tb128 s) (t2tb132 t)))
  (and (mem11 x s) (mem7 y t)))))

(declare-fun t2tb4469 ((tuple21 (set (tuple21 a c)) (set (tuple21 a
  b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a c)) (set (tuple21 a b))))) (sort
  (tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 a1 b1))) (t2tb4469 x))))

(declare-fun tb2t4469 (uni) (tuple21 (set (tuple21 a c)) (set (tuple21 a
  b))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a c)) (set (tuple21 a b)))))
  (! (= (tb2t4469 (t2tb4469 i)) i) :pattern ((t2tb4469 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 a1 b1))) j)
     (= (t2tb4469 (tb2t4469 j)) j)) :pattern ((t2tb4469 (tb2t4469 j))) )))

(declare-fun t2tb4470 ((set (tuple21 (set (tuple21 a c)) (set (tuple21 a
  b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a c)) (set (tuple21 a b)))))) (sort
  (set1 (tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 a1 b1)))) (t2tb4470 x))))

(declare-fun tb2t4470 (uni) (set (tuple21 (set (tuple21 a c)) (set (tuple21 a
  b)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a c)) (set (tuple21 a b))))))
  (! (= (tb2t4470 (t2tb4470 i)) i) :pattern ((t2tb4470 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 a1 b1)))) j)
     (= (t2tb4470 (tb2t4470 j)) j)) :pattern ((t2tb4470 (tb2t4470 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a c)))) (t (set (set (tuple21 a b))))
  (x (set (tuple21 a c))) (y (set (tuple21 a b))))
  (= (mem (tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 a1 b1)))
  (Tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 a1 b1)) (t2tb129 x) (t2tb11 y))
  (times (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 c1)) (t2tb128 s) (t2tb10 t)))
  (and (mem11 x s) (mem4 y t)))))

(declare-fun t2tb4471 ((set (tuple21 (set (tuple21 a c)) (tuple21 a
  b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a c)) (tuple21 a b))))) (sort
  (set1 (tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 b1))) (t2tb4471 x))))

(declare-fun tb2t4471 (uni) (set (tuple21 (set (tuple21 a c)) (tuple21 a
  b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a c)) (tuple21 a b)))))
  (! (= (tb2t4471 (t2tb4471 i)) i) :pattern ((t2tb4471 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 b1))) j)
     (= (t2tb4471 (tb2t4471 j)) j)) :pattern ((t2tb4471 (tb2t4471 j))) )))

(declare-fun t2tb4472 ((tuple21 (set (tuple21 a c)) (tuple21 a b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a c)) (tuple21 a b)))) (sort
  (tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 b1)) (t2tb4472 x))))

(declare-fun tb2t4472 (uni) (tuple21 (set (tuple21 a c)) (tuple21 a b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a c)) (tuple21 a b))))
  (! (= (tb2t4472 (t2tb4472 i)) i) :pattern ((t2tb4472 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 b1)) j)
     (= (t2tb4472 (tb2t4472 j)) j)) :pattern ((t2tb4472 (tb2t4472 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a c)))) (t (set (tuple21 a b)))
  (x (set (tuple21 a c))) (y (tuple21 a b)))
  (= (mem (tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 b1))
  (Tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 b1) (t2tb129 x) (t2tb13 y))
  (times (tuple2 a1 b1) (set1 (tuple2 a1 c1)) (t2tb128 s) (t2tb11 t)))
  (and (mem11 x s) (mem3 y t)))))

(declare-fun t2tb4473 ((set (tuple21 (set (tuple21 a c)) b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a c)) b)))) (sort
  (set1 (tuple2 (set1 (tuple2 a1 c1)) b1)) (t2tb4473 x))))

(declare-fun tb2t4473 (uni) (set (tuple21 (set (tuple21 a c)) b)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a c)) b))))
  (! (= (tb2t4473 (t2tb4473 i)) i) :pattern ((t2tb4473 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 a1 c1)) b1)) j)
     (= (t2tb4473 (tb2t4473 j)) j)) :pattern ((t2tb4473 (tb2t4473 j))) )))

(declare-fun t2tb4474 ((tuple21 (set (tuple21 a c)) b)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a c)) b))) (sort
  (tuple2 (set1 (tuple2 a1 c1)) b1) (t2tb4474 x))))

(declare-fun tb2t4474 (uni) (tuple21 (set (tuple21 a c)) b))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a c)) b)))
  (! (= (tb2t4474 (t2tb4474 i)) i) :pattern ((t2tb4474 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 a1 c1)) b1) j)
     (= (t2tb4474 (tb2t4474 j)) j)) :pattern ((t2tb4474 (tb2t4474 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a c)))) (t (set b)) (x (set (tuple21 a c)))
  (y b))
  (= (mem (tuple2 (set1 (tuple2 a1 c1)) b1)
  (Tuple2 (set1 (tuple2 a1 c1)) b1 (t2tb129 x) (t2tb14 y))
  (times b1 (set1 (tuple2 a1 c1)) (t2tb128 s) (t2tb12 t)))
  (and (mem11 x s) (mem2 y t)))))

(declare-fun t2tb4475 ((set (tuple21 (set (tuple21 a c)) a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a c)) a)))) (sort
  (set1 (tuple2 (set1 (tuple2 a1 c1)) a1)) (t2tb4475 x))))

(declare-fun tb2t4475 (uni) (set (tuple21 (set (tuple21 a c)) a)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a c)) a))))
  (! (= (tb2t4475 (t2tb4475 i)) i) :pattern ((t2tb4475 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 a1 c1)) a1)) j)
     (= (t2tb4475 (tb2t4475 j)) j)) :pattern ((t2tb4475 (tb2t4475 j))) )))

(declare-fun t2tb4476 ((tuple21 (set (tuple21 a c)) a)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a c)) a))) (sort
  (tuple2 (set1 (tuple2 a1 c1)) a1) (t2tb4476 x))))

(declare-fun tb2t4476 (uni) (tuple21 (set (tuple21 a c)) a))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a c)) a)))
  (! (= (tb2t4476 (t2tb4476 i)) i) :pattern ((t2tb4476 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 a1 c1)) a1) j)
     (= (t2tb4476 (tb2t4476 j)) j)) :pattern ((t2tb4476 (tb2t4476 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a c)))) (t (set a)) (x (set (tuple21 a c)))
  (y a))
  (= (mem (tuple2 (set1 (tuple2 a1 c1)) a1)
  (Tuple2 (set1 (tuple2 a1 c1)) a1 (t2tb129 x) (t2tb2 y))
  (times a1 (set1 (tuple2 a1 c1)) (t2tb128 s) (t2tb1 t)))
  (and (mem11 x s) (mem1 y t)))))

;; mem_times
  (assert
  (forall ((b2 ty))
  (forall ((s (set (set (tuple21 a c)))) (t uni) (x (set (tuple21 a c)))
  (y uni))
  (= (mem (tuple2 (set1 (tuple2 a1 c1)) b2)
  (Tuple2 (set1 (tuple2 a1 c1)) b2 (t2tb129 x) y)
  (times b2 (set1 (tuple2 a1 c1)) (t2tb128 s) t))
  (and (mem11 x s) (mem b2 y t))))))

(declare-fun t2tb4477 ((set (tuple21 (tuple21 a c) (tuple21 (tuple21 b c)
  (tuple21 d e))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a c) (tuple21 (tuple21 b c) (tuple21 d
  e)))))) (sort
  (set1 (tuple2 (tuple2 a1 c1) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1))))
  (t2tb4477 x))))

(declare-fun tb2t4477 (uni) (set (tuple21 (tuple21 a c) (tuple21 (tuple21 b
  c) (tuple21 d e)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a c) (tuple21 (tuple21 b c) (tuple21 d
  e)))))) (! (= (tb2t4477 (t2tb4477 i)) i) :pattern ((t2tb4477 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 a1 c1) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)))) j)
     (= (t2tb4477 (tb2t4477 j)) j)) :pattern ((t2tb4477 (tb2t4477 j))) )))

(declare-fun t2tb4478 ((tuple21 (tuple21 a c) (tuple21 (tuple21 b c)
  (tuple21 d e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a c) (tuple21 (tuple21 b c) (tuple21 d e)))))
  (sort (tuple2 (tuple2 a1 c1) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)))
  (t2tb4478 x))))

(declare-fun tb2t4478 (uni) (tuple21 (tuple21 a c) (tuple21 (tuple21 b c)
  (tuple21 d e))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a c) (tuple21 (tuple21 b c) (tuple21 d e)))))
  (! (= (tb2t4478 (t2tb4478 i)) i) :pattern ((t2tb4478 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 c1) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)))
     j) (= (t2tb4478 (tb2t4478 j)) j)) :pattern ((t2tb4478 (tb2t4478 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a c))) (t (set (tuple21 (tuple21 b c) (tuple21 d
  e)))) (x (tuple21 a c)) (y (tuple21 (tuple21 b c) (tuple21 d e))))
  (= (mem (tuple2 (tuple2 a1 c1) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)))
  (Tuple2 (tuple2 a1 c1) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (t2tb133 x)
  (t2tb4104 y))
  (times (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (tuple2 a1 c1) (t2tb129 s)
  (t2tb4102 t))) (and (mem10 x s) (mem49 y t)))))

(declare-fun t2tb4479 ((set (tuple21 (tuple21 a c) (tuple21 a (tuple21 d
  e))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a c) (tuple21 a (tuple21 d e)))))) (sort
  (set1 (tuple2 (tuple2 a1 c1) (tuple2 a1 (tuple2 d1 e1)))) (t2tb4479 x))))

(declare-fun tb2t4479 (uni) (set (tuple21 (tuple21 a c) (tuple21 a (tuple21 d
  e)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a c) (tuple21 a (tuple21 d e))))))
  (! (= (tb2t4479 (t2tb4479 i)) i) :pattern ((t2tb4479 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 c1) (tuple2 a1 (tuple2 d1 e1)))) j)
     (= (t2tb4479 (tb2t4479 j)) j)) :pattern ((t2tb4479 (tb2t4479 j))) )))

(declare-fun t2tb4480 ((tuple21 (tuple21 a c) (tuple21 a (tuple21 d
  e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a c) (tuple21 a (tuple21 d e))))) (sort
  (tuple2 (tuple2 a1 c1) (tuple2 a1 (tuple2 d1 e1))) (t2tb4480 x))))

(declare-fun tb2t4480 (uni) (tuple21 (tuple21 a c) (tuple21 a (tuple21 d
  e))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a c) (tuple21 a (tuple21 d e)))))
  (! (= (tb2t4480 (t2tb4480 i)) i) :pattern ((t2tb4480 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 c1) (tuple2 a1 (tuple2 d1 e1))) j)
     (= (t2tb4480 (tb2t4480 j)) j)) :pattern ((t2tb4480 (tb2t4480 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a c))) (t (set (tuple21 a (tuple21 d e))))
  (x (tuple21 a c)) (y (tuple21 a (tuple21 d e))))
  (= (mem (tuple2 (tuple2 a1 c1) (tuple2 a1 (tuple2 d1 e1)))
  (Tuple2 (tuple2 a1 c1) (tuple2 a1 (tuple2 d1 e1)) (t2tb133 x) (t2tb4105 y))
  (times (tuple2 a1 (tuple2 d1 e1)) (tuple2 a1 c1) (t2tb129 s) (t2tb4103 t)))
  (and (mem10 x s) (mem48 y t)))))

(declare-fun t2tb4481 ((set (tuple21 (tuple21 a c) (set (tuple21 c
  e))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a c) (set (tuple21 c e)))))) (sort
  (set1 (tuple2 (tuple2 a1 c1) (set1 (tuple2 c1 e1)))) (t2tb4481 x))))

(declare-fun tb2t4481 (uni) (set (tuple21 (tuple21 a c) (set (tuple21 c
  e)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a c) (set (tuple21 c e))))))
  (! (= (tb2t4481 (t2tb4481 i)) i) :pattern ((t2tb4481 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 c1) (set1 (tuple2 c1 e1)))) j)
     (= (t2tb4481 (tb2t4481 j)) j)) :pattern ((t2tb4481 (tb2t4481 j))) )))

(declare-fun t2tb4482 ((tuple21 (tuple21 a c) (set (tuple21 c e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a c) (set (tuple21 c e))))) (sort
  (tuple2 (tuple2 a1 c1) (set1 (tuple2 c1 e1))) (t2tb4482 x))))

(declare-fun tb2t4482 (uni) (tuple21 (tuple21 a c) (set (tuple21 c e))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a c) (set (tuple21 c e)))))
  (! (= (tb2t4482 (t2tb4482 i)) i) :pattern ((t2tb4482 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 c1) (set1 (tuple2 c1 e1))) j)
     (= (t2tb4482 (tb2t4482 j)) j)) :pattern ((t2tb4482 (tb2t4482 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a c))) (t (set (set (tuple21 c e))))
  (x (tuple21 a c)) (y (set (tuple21 c e))))
  (= (mem (tuple2 (tuple2 a1 c1) (set1 (tuple2 c1 e1)))
  (Tuple2 (tuple2 a1 c1) (set1 (tuple2 c1 e1)) (t2tb133 x) (t2tb3478 y))
  (times (set1 (tuple2 c1 e1)) (tuple2 a1 c1) (t2tb129 s) (t2tb3854 t)))
  (and (mem10 x s) (mem47 y t)))))

(declare-fun t2tb4483 ((tuple21 (tuple21 a c) (tuple21 c e))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a c) (tuple21 c e)))) (sort
  (tuple2 (tuple2 a1 c1) (tuple2 c1 e1)) (t2tb4483 x))))

(declare-fun tb2t4483 (uni) (tuple21 (tuple21 a c) (tuple21 c e)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a c) (tuple21 c e))))
  (! (= (tb2t4483 (t2tb4483 i)) i) :pattern ((t2tb4483 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 c1) (tuple2 c1 e1)) j)
     (= (t2tb4483 (tb2t4483 j)) j)) :pattern ((t2tb4483 (tb2t4483 j))) )))

(declare-fun t2tb4484 ((set (tuple21 (tuple21 a c) (tuple21 c e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a c) (tuple21 c e))))) (sort
  (set1 (tuple2 (tuple2 a1 c1) (tuple2 c1 e1))) (t2tb4484 x))))

(declare-fun tb2t4484 (uni) (set (tuple21 (tuple21 a c) (tuple21 c e))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a c) (tuple21 c e)))))
  (! (= (tb2t4484 (t2tb4484 i)) i) :pattern ((t2tb4484 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 c1) (tuple2 c1 e1))) j)
     (= (t2tb4484 (tb2t4484 j)) j)) :pattern ((t2tb4484 (tb2t4484 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a c))) (t (set (tuple21 c e))) (x (tuple21 a c))
  (y (tuple21 c e)))
  (= (mem (tuple2 (tuple2 a1 c1) (tuple2 c1 e1))
  (Tuple2 (tuple2 a1 c1) (tuple2 c1 e1) (t2tb133 x) (t2tb3479 y))
  (times (tuple2 c1 e1) (tuple2 a1 c1) (t2tb129 s) (t2tb3478 t)))
  (and (mem10 x s) (mem46 y t)))))

(declare-fun t2tb4485 ((set (tuple21 (tuple21 a c) (tuple21 a e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a c) (tuple21 a e))))) (sort
  (set1 (tuple2 (tuple2 a1 c1) (tuple2 a1 e1))) (t2tb4485 x))))

(declare-fun tb2t4485 (uni) (set (tuple21 (tuple21 a c) (tuple21 a e))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a c) (tuple21 a e)))))
  (! (= (tb2t4485 (t2tb4485 i)) i) :pattern ((t2tb4485 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 c1) (tuple2 a1 e1))) j)
     (= (t2tb4485 (tb2t4485 j)) j)) :pattern ((t2tb4485 (tb2t4485 j))) )))

(declare-fun t2tb4486 ((tuple21 (tuple21 a c) (tuple21 a e))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a c) (tuple21 a e)))) (sort
  (tuple2 (tuple2 a1 c1) (tuple2 a1 e1)) (t2tb4486 x))))

(declare-fun tb2t4486 (uni) (tuple21 (tuple21 a c) (tuple21 a e)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a c) (tuple21 a e))))
  (! (= (tb2t4486 (t2tb4486 i)) i) :pattern ((t2tb4486 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 c1) (tuple2 a1 e1)) j)
     (= (t2tb4486 (tb2t4486 j)) j)) :pattern ((t2tb4486 (tb2t4486 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a c))) (t (set (tuple21 a e))) (x (tuple21 a c))
  (y (tuple21 a e)))
  (= (mem (tuple2 (tuple2 a1 c1) (tuple2 a1 e1))
  (Tuple2 (tuple2 a1 c1) (tuple2 a1 e1) (t2tb133 x) (t2tb2949 y))
  (times (tuple2 a1 e1) (tuple2 a1 c1) (t2tb129 s) (t2tb2943 t)))
  (and (mem10 x s) (mem44 y t)))))

(declare-fun t2tb3925 ((set (tuple21 (tuple21 a c) e))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a c) e)))) (sort
  (set1 (tuple2 (tuple2 a1 c1) e1)) (t2tb3925 x))))

(declare-fun tb2t3925 (uni) (set (tuple21 (tuple21 a c) e)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a c) e))))
  (! (= (tb2t3925 (t2tb3925 i)) i) :pattern ((t2tb3925 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 c1) e1)) j)
     (= (t2tb3925 (tb2t3925 j)) j)) :pattern ((t2tb3925 (tb2t3925 j))) )))

(declare-fun t2tb3927 ((tuple21 (tuple21 a c) e)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a c) e))) (sort (tuple2 (tuple2 a1 c1) e1)
  (t2tb3927 x))))

(declare-fun tb2t3927 (uni) (tuple21 (tuple21 a c) e))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a c) e)))
  (! (= (tb2t3927 (t2tb3927 i)) i) :pattern ((t2tb3927 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 c1) e1) j) (= (t2tb3927 (tb2t3927 j)) j)) :pattern (
  (t2tb3927 (tb2t3927 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a c))) (t (set e)) (x (tuple21 a c)) (y e))
  (= (mem (tuple2 (tuple2 a1 c1) e1)
  (Tuple2 (tuple2 a1 c1) e1 (t2tb133 x) (t2tb2955 y))
  (times e1 (tuple2 a1 c1) (t2tb129 s) (t2tb2947 t)))
  (and (mem10 x s) (mem36 y t)))))

(declare-fun t2tb4487 ((set (tuple21 (tuple21 a c) (tuple21 a d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a c) (tuple21 a d))))) (sort
  (set1 (tuple2 (tuple2 a1 c1) (tuple2 a1 d1))) (t2tb4487 x))))

(declare-fun tb2t4487 (uni) (set (tuple21 (tuple21 a c) (tuple21 a d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a c) (tuple21 a d)))))
  (! (= (tb2t4487 (t2tb4487 i)) i) :pattern ((t2tb4487 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 c1) (tuple2 a1 d1))) j)
     (= (t2tb4487 (tb2t4487 j)) j)) :pattern ((t2tb4487 (tb2t4487 j))) )))

(declare-fun t2tb4488 ((tuple21 (tuple21 a c) (tuple21 a d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a c) (tuple21 a d)))) (sort
  (tuple2 (tuple2 a1 c1) (tuple2 a1 d1)) (t2tb4488 x))))

(declare-fun tb2t4488 (uni) (tuple21 (tuple21 a c) (tuple21 a d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a c) (tuple21 a d))))
  (! (= (tb2t4488 (t2tb4488 i)) i) :pattern ((t2tb4488 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 c1) (tuple2 a1 d1)) j)
     (= (t2tb4488 (tb2t4488 j)) j)) :pattern ((t2tb4488 (tb2t4488 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a c))) (t (set (tuple21 a d))) (x (tuple21 a c))
  (y (tuple21 a d)))
  (= (mem (tuple2 (tuple2 a1 c1) (tuple2 a1 d1))
  (Tuple2 (tuple2 a1 c1) (tuple2 a1 d1) (t2tb133 x) (t2tb904 y))
  (times (tuple2 a1 d1) (tuple2 a1 c1) (t2tb129 s) (t2tb903 t)))
  (and (mem10 x s) (mem32 y t)))))

(declare-fun t2tb4489 ((set (tuple21 (tuple21 a c) (set (tuple21 b
  d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a c) (set (tuple21 b d)))))) (sort
  (set1 (tuple2 (tuple2 a1 c1) (set1 (tuple2 b1 d1)))) (t2tb4489 x))))

(declare-fun tb2t4489 (uni) (set (tuple21 (tuple21 a c) (set (tuple21 b
  d)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a c) (set (tuple21 b d))))))
  (! (= (tb2t4489 (t2tb4489 i)) i) :pattern ((t2tb4489 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 c1) (set1 (tuple2 b1 d1)))) j)
     (= (t2tb4489 (tb2t4489 j)) j)) :pattern ((t2tb4489 (tb2t4489 j))) )))

(declare-fun t2tb4490 ((tuple21 (tuple21 a c) (set (tuple21 b d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a c) (set (tuple21 b d))))) (sort
  (tuple2 (tuple2 a1 c1) (set1 (tuple2 b1 d1))) (t2tb4490 x))))

(declare-fun tb2t4490 (uni) (tuple21 (tuple21 a c) (set (tuple21 b d))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a c) (set (tuple21 b d)))))
  (! (= (tb2t4490 (t2tb4490 i)) i) :pattern ((t2tb4490 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 c1) (set1 (tuple2 b1 d1))) j)
     (= (t2tb4490 (tb2t4490 j)) j)) :pattern ((t2tb4490 (tb2t4490 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a c))) (t (set (set (tuple21 b d))))
  (x (tuple21 a c)) (y (set (tuple21 b d))))
  (= (mem (tuple2 (tuple2 a1 c1) (set1 (tuple2 b1 d1)))
  (Tuple2 (tuple2 a1 c1) (set1 (tuple2 b1 d1)) (t2tb133 x) (t2tb687 y))
  (times (set1 (tuple2 b1 d1)) (tuple2 a1 c1) (t2tb129 s) (t2tb906 t)))
  (and (mem10 x s) (mem33 y t)))))

(declare-fun t2tb686 ((set (tuple21 (tuple21 a c) (tuple21 b d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a c) (tuple21 b d))))) (sort
  (set1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))) (t2tb686 x))))

(declare-fun tb2t686 (uni) (set (tuple21 (tuple21 a c) (tuple21 b d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a c) (tuple21 b d)))))
  (! (= (tb2t686 (t2tb686 i)) i) :pattern ((t2tb686 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))) j)
     (= (t2tb686 (tb2t686 j)) j)) :pattern ((t2tb686 (tb2t686 j))) )))

(declare-fun t2tb691 ((tuple21 (tuple21 a c) (tuple21 b d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a c) (tuple21 b d)))) (sort
  (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb691 x))))

(declare-fun tb2t691 (uni) (tuple21 (tuple21 a c) (tuple21 b d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a c) (tuple21 b d))))
  (! (= (tb2t691 (t2tb691 i)) i) :pattern ((t2tb691 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) j)
     (= (t2tb691 (tb2t691 j)) j)) :pattern ((t2tb691 (tb2t691 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a c))) (t (set (tuple21 b d))) (x (tuple21 a c))
  (y (tuple21 b d)))
  (= (mem (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))
  (Tuple2 (tuple2 a1 c1) (tuple2 b1 d1) (t2tb133 x) (t2tb692 y))
  (times (tuple2 b1 d1) (tuple2 a1 c1) (t2tb129 s) (t2tb687 t)))
  (and (mem10 x s) (mem23 y t)))))

(declare-fun t2tb847 ((set (tuple21 (tuple21 a c) d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a c) d)))) (sort
  (set1 (tuple2 (tuple2 a1 c1) d1)) (t2tb847 x))))

(declare-fun tb2t847 (uni) (set (tuple21 (tuple21 a c) d)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a c) d))))
  (! (= (tb2t847 (t2tb847 i)) i) :pattern ((t2tb847 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 c1) d1)) j)
     (= (t2tb847 (tb2t847 j)) j)) :pattern ((t2tb847 (tb2t847 j))) )))

(declare-fun t2tb848 ((tuple21 (tuple21 a c) d)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a c) d))) (sort (tuple2 (tuple2 a1 c1) d1)
  (t2tb848 x))))

(declare-fun tb2t848 (uni) (tuple21 (tuple21 a c) d))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a c) d)))
  (! (= (tb2t848 (t2tb848 i)) i) :pattern ((t2tb848 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 c1) d1) j) (= (t2tb848 (tb2t848 j)) j)) :pattern (
  (t2tb848 (tb2t848 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a c))) (t (set d)) (x (tuple21 a c)) (y d))
  (= (mem (tuple2 (tuple2 a1 c1) d1)
  (Tuple2 (tuple2 a1 c1) d1 (t2tb133 x) (t2tb694 y))
  (times d1 (tuple2 a1 c1) (t2tb129 s) (t2tb690 t)))
  (and (mem10 x s) (mem20 y t)))))

(declare-fun t2tb4491 ((set (tuple21 (tuple21 a c) (tuple21 a (tuple21 b
  c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a c) (tuple21 a (tuple21 b c)))))) (sort
  (set1 (tuple2 (tuple2 a1 c1) (tuple2 a1 (tuple2 b1 c1)))) (t2tb4491 x))))

(declare-fun tb2t4491 (uni) (set (tuple21 (tuple21 a c) (tuple21 a (tuple21 b
  c)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a c) (tuple21 a (tuple21 b c))))))
  (! (= (tb2t4491 (t2tb4491 i)) i) :pattern ((t2tb4491 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 c1) (tuple2 a1 (tuple2 b1 c1)))) j)
     (= (t2tb4491 (tb2t4491 j)) j)) :pattern ((t2tb4491 (tb2t4491 j))) )))

(declare-fun t2tb4492 ((tuple21 (tuple21 a c) (tuple21 a (tuple21 b
  c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a c) (tuple21 a (tuple21 b c))))) (sort
  (tuple2 (tuple2 a1 c1) (tuple2 a1 (tuple2 b1 c1))) (t2tb4492 x))))

(declare-fun tb2t4492 (uni) (tuple21 (tuple21 a c) (tuple21 a (tuple21 b
  c))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a c) (tuple21 a (tuple21 b c)))))
  (! (= (tb2t4492 (t2tb4492 i)) i) :pattern ((t2tb4492 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 c1) (tuple2 a1 (tuple2 b1 c1))) j)
     (= (t2tb4492 (tb2t4492 j)) j)) :pattern ((t2tb4492 (tb2t4492 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a c))) (t (set (tuple21 a (tuple21 b c))))
  (x (tuple21 a c)) (y (tuple21 a (tuple21 b c))))
  (= (mem (tuple2 (tuple2 a1 c1) (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 (tuple2 a1 c1) (tuple2 a1 (tuple2 b1 c1)) (t2tb133 x) (t2tb260 y))
  (times (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 c1) (t2tb129 s) (t2tb261 t)))
  (and (mem10 x s) (mem14 y t)))))

(declare-fun t2tb4493 ((set (tuple21 (tuple21 a c) (set (tuple21 a
  c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a c) (set (tuple21 a c)))))) (sort
  (set1 (tuple2 (tuple2 a1 c1) (set1 (tuple2 a1 c1)))) (t2tb4493 x))))

(declare-fun tb2t4493 (uni) (set (tuple21 (tuple21 a c) (set (tuple21 a
  c)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a c) (set (tuple21 a c))))))
  (! (= (tb2t4493 (t2tb4493 i)) i) :pattern ((t2tb4493 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 c1) (set1 (tuple2 a1 c1)))) j)
     (= (t2tb4493 (tb2t4493 j)) j)) :pattern ((t2tb4493 (tb2t4493 j))) )))

(declare-fun t2tb4494 ((tuple21 (tuple21 a c) (set (tuple21 a c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a c) (set (tuple21 a c))))) (sort
  (tuple2 (tuple2 a1 c1) (set1 (tuple2 a1 c1))) (t2tb4494 x))))

(declare-fun tb2t4494 (uni) (tuple21 (tuple21 a c) (set (tuple21 a c))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a c) (set (tuple21 a c)))))
  (! (= (tb2t4494 (t2tb4494 i)) i) :pattern ((t2tb4494 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 c1) (set1 (tuple2 a1 c1))) j)
     (= (t2tb4494 (tb2t4494 j)) j)) :pattern ((t2tb4494 (tb2t4494 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a c))) (t (set (set (tuple21 a c))))
  (x (tuple21 a c)) (y (set (tuple21 a c))))
  (= (mem (tuple2 (tuple2 a1 c1) (set1 (tuple2 a1 c1)))
  (Tuple2 (tuple2 a1 c1) (set1 (tuple2 a1 c1)) (t2tb133 x) (t2tb129 y))
  (times (set1 (tuple2 a1 c1)) (tuple2 a1 c1) (t2tb129 s) (t2tb128 t)))
  (and (mem10 x s) (mem11 y t)))))

(declare-fun t2tb156 ((tuple21 (tuple21 a c) (tuple21 a c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a c) (tuple21 a c)))) (sort
  (tuple2 (tuple2 a1 c1) (tuple2 a1 c1)) (t2tb156 x))))

(declare-fun tb2t156 (uni) (tuple21 (tuple21 a c) (tuple21 a c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a c) (tuple21 a c))))
  (! (= (tb2t156 (t2tb156 i)) i) :pattern ((t2tb156 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 c1) (tuple2 a1 c1)) j)
     (= (t2tb156 (tb2t156 j)) j)) :pattern ((t2tb156 (tb2t156 j))) )))

(declare-fun t2tb157 ((set (tuple21 (tuple21 a c) (tuple21 a c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a c) (tuple21 a c))))) (sort
  (set1 (tuple2 (tuple2 a1 c1) (tuple2 a1 c1))) (t2tb157 x))))

(declare-fun tb2t157 (uni) (set (tuple21 (tuple21 a c) (tuple21 a c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a c) (tuple21 a c)))))
  (! (= (tb2t157 (t2tb157 i)) i) :pattern ((t2tb157 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 c1) (tuple2 a1 c1))) j)
     (= (t2tb157 (tb2t157 j)) j)) :pattern ((t2tb157 (tb2t157 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a c))) (t (set (tuple21 a c))) (x (tuple21 a c))
  (y (tuple21 a c)))
  (= (mem (tuple2 (tuple2 a1 c1) (tuple2 a1 c1))
  (Tuple2 (tuple2 a1 c1) (tuple2 a1 c1) (t2tb133 x) (t2tb133 y))
  (times (tuple2 a1 c1) (tuple2 a1 c1) (t2tb129 s) (t2tb129 t)))
  (and (mem10 x s) (mem10 y t)))))

(declare-fun t2tb162 ((set (tuple21 (tuple21 a c) c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a c) c)))) (sort
  (set1 (tuple2 (tuple2 a1 c1) c1)) (t2tb162 x))))

(declare-fun tb2t162 (uni) (set (tuple21 (tuple21 a c) c)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a c) c))))
  (! (= (tb2t162 (t2tb162 i)) i) :pattern ((t2tb162 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 c1) c1)) j)
     (= (t2tb162 (tb2t162 j)) j)) :pattern ((t2tb162 (tb2t162 j))) )))

(declare-fun t2tb163 ((tuple21 (tuple21 a c) c)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a c) c))) (sort (tuple2 (tuple2 a1 c1) c1)
  (t2tb163 x))))

(declare-fun tb2t163 (uni) (tuple21 (tuple21 a c) c))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a c) c)))
  (! (= (tb2t163 (t2tb163 i)) i) :pattern ((t2tb163 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 c1) c1) j) (= (t2tb163 (tb2t163 j)) j)) :pattern (
  (t2tb163 (tb2t163 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a c))) (t (set c)) (x (tuple21 a c)) (y c))
  (= (mem (tuple2 (tuple2 a1 c1) c1)
  (Tuple2 (tuple2 a1 c1) c1 (t2tb133 x) (t2tb135 y))
  (times c1 (tuple2 a1 c1) (t2tb129 s) (t2tb132 t)))
  (and (mem10 x s) (mem7 y t)))))

(declare-fun t2tb164 ((set (tuple21 (tuple21 a c) (set (tuple21 a b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a c) (set (tuple21 a b)))))) (sort
  (set1 (tuple2 (tuple2 a1 c1) (set1 (tuple2 a1 b1)))) (t2tb164 x))))

(declare-fun tb2t164 (uni) (set (tuple21 (tuple21 a c) (set (tuple21 a b)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a c) (set (tuple21 a b))))))
  (! (= (tb2t164 (t2tb164 i)) i) :pattern ((t2tb164 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 c1) (set1 (tuple2 a1 b1)))) j)
     (= (t2tb164 (tb2t164 j)) j)) :pattern ((t2tb164 (tb2t164 j))) )))

(declare-fun t2tb165 ((tuple21 (tuple21 a c) (set (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a c) (set (tuple21 a b))))) (sort
  (tuple2 (tuple2 a1 c1) (set1 (tuple2 a1 b1))) (t2tb165 x))))

(declare-fun tb2t165 (uni) (tuple21 (tuple21 a c) (set (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a c) (set (tuple21 a b)))))
  (! (= (tb2t165 (t2tb165 i)) i) :pattern ((t2tb165 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 c1) (set1 (tuple2 a1 b1))) j)
     (= (t2tb165 (tb2t165 j)) j)) :pattern ((t2tb165 (tb2t165 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a c))) (t (set (set (tuple21 a b))))
  (x (tuple21 a c)) (y (set (tuple21 a b))))
  (= (mem (tuple2 (tuple2 a1 c1) (set1 (tuple2 a1 b1)))
  (Tuple2 (tuple2 a1 c1) (set1 (tuple2 a1 b1)) (t2tb133 x) (t2tb11 y))
  (times (set1 (tuple2 a1 b1)) (tuple2 a1 c1) (t2tb129 s) (t2tb10 t)))
  (and (mem10 x s) (mem4 y t)))))

(declare-fun t2tb166 ((set (tuple21 (tuple21 a c) (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a c) (tuple21 a b))))) (sort
  (set1 (tuple2 (tuple2 a1 c1) (tuple2 a1 b1))) (t2tb166 x))))

(declare-fun tb2t166 (uni) (set (tuple21 (tuple21 a c) (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a c) (tuple21 a b)))))
  (! (= (tb2t166 (t2tb166 i)) i) :pattern ((t2tb166 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 c1) (tuple2 a1 b1))) j)
     (= (t2tb166 (tb2t166 j)) j)) :pattern ((t2tb166 (tb2t166 j))) )))

(declare-fun t2tb167 ((tuple21 (tuple21 a c) (tuple21 a b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a c) (tuple21 a b)))) (sort
  (tuple2 (tuple2 a1 c1) (tuple2 a1 b1)) (t2tb167 x))))

(declare-fun tb2t167 (uni) (tuple21 (tuple21 a c) (tuple21 a b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a c) (tuple21 a b))))
  (! (= (tb2t167 (t2tb167 i)) i) :pattern ((t2tb167 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 c1) (tuple2 a1 b1)) j)
     (= (t2tb167 (tb2t167 j)) j)) :pattern ((t2tb167 (tb2t167 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a c))) (t (set (tuple21 a b))) (x (tuple21 a c))
  (y (tuple21 a b)))
  (= (mem (tuple2 (tuple2 a1 c1) (tuple2 a1 b1))
  (Tuple2 (tuple2 a1 c1) (tuple2 a1 b1) (t2tb133 x) (t2tb13 y))
  (times (tuple2 a1 b1) (tuple2 a1 c1) (t2tb129 s) (t2tb11 t)))
  (and (mem10 x s) (mem3 y t)))))

(declare-fun t2tb168 ((set (tuple21 (tuple21 a c) b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a c) b)))) (sort
  (set1 (tuple2 (tuple2 a1 c1) b1)) (t2tb168 x))))

(declare-fun tb2t168 (uni) (set (tuple21 (tuple21 a c) b)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a c) b))))
  (! (= (tb2t168 (t2tb168 i)) i) :pattern ((t2tb168 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 c1) b1)) j)
     (= (t2tb168 (tb2t168 j)) j)) :pattern ((t2tb168 (tb2t168 j))) )))

(declare-fun t2tb169 ((tuple21 (tuple21 a c) b)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a c) b))) (sort (tuple2 (tuple2 a1 c1) b1)
  (t2tb169 x))))

(declare-fun tb2t169 (uni) (tuple21 (tuple21 a c) b))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a c) b)))
  (! (= (tb2t169 (t2tb169 i)) i) :pattern ((t2tb169 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 c1) b1) j) (= (t2tb169 (tb2t169 j)) j)) :pattern (
  (t2tb169 (tb2t169 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a c))) (t (set b)) (x (tuple21 a c)) (y b))
  (= (mem (tuple2 (tuple2 a1 c1) b1)
  (Tuple2 (tuple2 a1 c1) b1 (t2tb133 x) (t2tb14 y))
  (times b1 (tuple2 a1 c1) (t2tb129 s) (t2tb12 t)))
  (and (mem10 x s) (mem2 y t)))))

(declare-fun t2tb170 ((set (tuple21 (tuple21 a c) a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a c) a)))) (sort
  (set1 (tuple2 (tuple2 a1 c1) a1)) (t2tb170 x))))

(declare-fun tb2t170 (uni) (set (tuple21 (tuple21 a c) a)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a c) a))))
  (! (= (tb2t170 (t2tb170 i)) i) :pattern ((t2tb170 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 c1) a1)) j)
     (= (t2tb170 (tb2t170 j)) j)) :pattern ((t2tb170 (tb2t170 j))) )))

(declare-fun t2tb171 ((tuple21 (tuple21 a c) a)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a c) a))) (sort (tuple2 (tuple2 a1 c1) a1)
  (t2tb171 x))))

(declare-fun tb2t171 (uni) (tuple21 (tuple21 a c) a))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a c) a)))
  (! (= (tb2t171 (t2tb171 i)) i) :pattern ((t2tb171 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 c1) a1) j) (= (t2tb171 (tb2t171 j)) j)) :pattern (
  (t2tb171 (tb2t171 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a c))) (t (set a)) (x (tuple21 a c)) (y a))
  (= (mem (tuple2 (tuple2 a1 c1) a1)
  (Tuple2 (tuple2 a1 c1) a1 (t2tb133 x) (t2tb2 y))
  (times a1 (tuple2 a1 c1) (t2tb129 s) (t2tb1 t)))
  (and (mem10 x s) (mem1 y t)))))

;; mem_times
  (assert
  (forall ((b2 ty))
  (forall ((s (set (tuple21 a c))) (t uni) (x (tuple21 a c)) (y uni))
  (= (mem (tuple2 (tuple2 a1 c1) b2) (Tuple2 (tuple2 a1 c1) b2 (t2tb133 x) y)
  (times b2 (tuple2 a1 c1) (t2tb129 s) t)) (and (mem10 x s) (mem b2 y t))))))

(declare-fun t2tb131 ((set (tuple21 b c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 b c)))) (sort (set1 (tuple2 b1 c1)) (t2tb131 x))))

(declare-fun tb2t131 (uni) (set (tuple21 b c)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 b c))))
  (! (= (tb2t131 (t2tb131 i)) i) :pattern ((t2tb131 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 b1 c1)) j) (= (t2tb131 (tb2t131 j)) j)) :pattern (
  (t2tb131 (tb2t131 j))) )))

(declare-fun t2tb134 ((tuple21 b c)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 b c))) (sort (tuple2 b1 c1) (t2tb134 x))))

(declare-fun tb2t134 (uni) (tuple21 b c))

;; BridgeL
  (assert
  (forall ((i (tuple21 b c)))
  (! (= (tb2t134 (t2tb134 i)) i) :pattern ((t2tb134 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 b1 c1) j) (= (t2tb134 (tb2t134 j)) j)) :pattern (
  (t2tb134 (tb2t134 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 b c))) (t (set (tuple21 d e))) (x (tuple21 b c))
  (y (tuple21 d e)))
  (= (mem49
  (tb2t4104 (Tuple2 (tuple2 b1 c1) (tuple2 d1 e1) (t2tb134 x) (t2tb3457 y)))
  (tb2t4102 (times (tuple2 d1 e1) (tuple2 b1 c1) (t2tb131 s) (t2tb3456 t))))
  (and (mem (tuple2 b1 c1) (t2tb134 x) (t2tb131 s)) (mem (tuple2 d1 e1)
  (t2tb3457 y) (t2tb3456 t))))))

(declare-fun t2tb4495 ((set (tuple21 c (tuple21 (tuple21 b c) (tuple21 d
  e))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 c (tuple21 (tuple21 b c) (tuple21 d e)))))) (sort
  (set1 (tuple2 c1 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)))) (t2tb4495 x))))

(declare-fun tb2t4495 (uni) (set (tuple21 c (tuple21 (tuple21 b c) (tuple21 d
  e)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 c (tuple21 (tuple21 b c) (tuple21 d e))))))
  (! (= (tb2t4495 (t2tb4495 i)) i) :pattern ((t2tb4495 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 c1 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)))) j)
     (= (t2tb4495 (tb2t4495 j)) j)) :pattern ((t2tb4495 (tb2t4495 j))) )))

(declare-fun t2tb4496 ((tuple21 c (tuple21 (tuple21 b c) (tuple21 d
  e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 c (tuple21 (tuple21 b c) (tuple21 d e))))) (sort
  (tuple2 c1 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1))) (t2tb4496 x))))

(declare-fun tb2t4496 (uni) (tuple21 c (tuple21 (tuple21 b c) (tuple21 d
  e))))

;; BridgeL
  (assert
  (forall ((i (tuple21 c (tuple21 (tuple21 b c) (tuple21 d e)))))
  (! (= (tb2t4496 (t2tb4496 i)) i) :pattern ((t2tb4496 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 c1 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1))) j)
     (= (t2tb4496 (tb2t4496 j)) j)) :pattern ((t2tb4496 (tb2t4496 j))) )))

;; mem_times
  (assert
  (forall ((s (set c)) (t (set (tuple21 (tuple21 b c) (tuple21 d e)))) (x c)
  (y (tuple21 (tuple21 b c) (tuple21 d e))))
  (= (mem (tuple2 c1 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)))
  (Tuple2 c1 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (t2tb135 x) (t2tb4104 y))
  (times (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) c1 (t2tb132 s) (t2tb4102 t)))
  (and (mem7 x s) (mem49 y t)))))

(declare-fun t2tb4497 ((set (tuple21 c (tuple21 a (tuple21 d e))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 c (tuple21 a (tuple21 d e)))))) (sort
  (set1 (tuple2 c1 (tuple2 a1 (tuple2 d1 e1)))) (t2tb4497 x))))

(declare-fun tb2t4497 (uni) (set (tuple21 c (tuple21 a (tuple21 d e)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 c (tuple21 a (tuple21 d e))))))
  (! (= (tb2t4497 (t2tb4497 i)) i) :pattern ((t2tb4497 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 c1 (tuple2 a1 (tuple2 d1 e1)))) j)
     (= (t2tb4497 (tb2t4497 j)) j)) :pattern ((t2tb4497 (tb2t4497 j))) )))

(declare-fun t2tb4498 ((tuple21 c (tuple21 a (tuple21 d e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 c (tuple21 a (tuple21 d e))))) (sort
  (tuple2 c1 (tuple2 a1 (tuple2 d1 e1))) (t2tb4498 x))))

(declare-fun tb2t4498 (uni) (tuple21 c (tuple21 a (tuple21 d e))))

;; BridgeL
  (assert
  (forall ((i (tuple21 c (tuple21 a (tuple21 d e)))))
  (! (= (tb2t4498 (t2tb4498 i)) i) :pattern ((t2tb4498 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 c1 (tuple2 a1 (tuple2 d1 e1))) j)
     (= (t2tb4498 (tb2t4498 j)) j)) :pattern ((t2tb4498 (tb2t4498 j))) )))

;; mem_times
  (assert
  (forall ((s (set c)) (t (set (tuple21 a (tuple21 d e)))) (x c)
  (y (tuple21 a (tuple21 d e))))
  (= (mem (tuple2 c1 (tuple2 a1 (tuple2 d1 e1)))
  (Tuple2 c1 (tuple2 a1 (tuple2 d1 e1)) (t2tb135 x) (t2tb4105 y))
  (times (tuple2 a1 (tuple2 d1 e1)) c1 (t2tb132 s) (t2tb4103 t)))
  (and (mem7 x s) (mem48 y t)))))

(declare-fun t2tb4499 ((tuple21 c (set (tuple21 c e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 c (set (tuple21 c e))))) (sort
  (tuple2 c1 (set1 (tuple2 c1 e1))) (t2tb4499 x))))

(declare-fun tb2t4499 (uni) (tuple21 c (set (tuple21 c e))))

;; BridgeL
  (assert
  (forall ((i (tuple21 c (set (tuple21 c e)))))
  (! (= (tb2t4499 (t2tb4499 i)) i) :pattern ((t2tb4499 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 c1 (set1 (tuple2 c1 e1))) j)
     (= (t2tb4499 (tb2t4499 j)) j)) :pattern ((t2tb4499 (tb2t4499 j))) )))

(declare-fun t2tb4500 ((set (tuple21 c (set (tuple21 c e))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 c (set (tuple21 c e)))))) (sort
  (set1 (tuple2 c1 (set1 (tuple2 c1 e1)))) (t2tb4500 x))))

(declare-fun tb2t4500 (uni) (set (tuple21 c (set (tuple21 c e)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 c (set (tuple21 c e))))))
  (! (= (tb2t4500 (t2tb4500 i)) i) :pattern ((t2tb4500 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 c1 (set1 (tuple2 c1 e1)))) j)
     (= (t2tb4500 (tb2t4500 j)) j)) :pattern ((t2tb4500 (tb2t4500 j))) )))

;; mem_times
  (assert
  (forall ((s (set c)) (t (set (set (tuple21 c e)))) (x c) (y (set (tuple21 c
  e))))
  (= (mem (tuple2 c1 (set1 (tuple2 c1 e1)))
  (Tuple2 c1 (set1 (tuple2 c1 e1)) (t2tb135 x) (t2tb3478 y))
  (times (set1 (tuple2 c1 e1)) c1 (t2tb132 s) (t2tb3854 t)))
  (and (mem7 x s) (mem47 y t)))))

(declare-fun t2tb4501 ((set (tuple21 c (tuple21 c e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 c (tuple21 c e))))) (sort
  (set1 (tuple2 c1 (tuple2 c1 e1))) (t2tb4501 x))))

(declare-fun tb2t4501 (uni) (set (tuple21 c (tuple21 c e))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 c (tuple21 c e)))))
  (! (= (tb2t4501 (t2tb4501 i)) i) :pattern ((t2tb4501 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 c1 (tuple2 c1 e1))) j)
     (= (t2tb4501 (tb2t4501 j)) j)) :pattern ((t2tb4501 (tb2t4501 j))) )))

(declare-fun t2tb4502 ((tuple21 c (tuple21 c e))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 c (tuple21 c e)))) (sort (tuple2 c1 (tuple2 c1 e1))
  (t2tb4502 x))))

(declare-fun tb2t4502 (uni) (tuple21 c (tuple21 c e)))

;; BridgeL
  (assert
  (forall ((i (tuple21 c (tuple21 c e))))
  (! (= (tb2t4502 (t2tb4502 i)) i) :pattern ((t2tb4502 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 c1 (tuple2 c1 e1)) j) (= (t2tb4502 (tb2t4502 j)) j)) :pattern (
  (t2tb4502 (tb2t4502 j))) )))

;; mem_times
  (assert
  (forall ((s (set c)) (t (set (tuple21 c e))) (x c) (y (tuple21 c e)))
  (= (mem (tuple2 c1 (tuple2 c1 e1))
  (Tuple2 c1 (tuple2 c1 e1) (t2tb135 x) (t2tb3479 y))
  (times (tuple2 c1 e1) c1 (t2tb132 s) (t2tb3478 t)))
  (and (mem7 x s) (mem46 y t)))))

(declare-fun t2tb3464 ((set (tuple21 c (tuple21 a e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 c (tuple21 a e))))) (sort
  (set1 (tuple2 c1 (tuple2 a1 e1))) (t2tb3464 x))))

(declare-fun tb2t3464 (uni) (set (tuple21 c (tuple21 a e))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 c (tuple21 a e)))))
  (! (= (tb2t3464 (t2tb3464 i)) i) :pattern ((t2tb3464 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 c1 (tuple2 a1 e1))) j)
     (= (t2tb3464 (tb2t3464 j)) j)) :pattern ((t2tb3464 (tb2t3464 j))) )))

(declare-fun t2tb3465 ((tuple21 c (tuple21 a e))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 c (tuple21 a e)))) (sort (tuple2 c1 (tuple2 a1 e1))
  (t2tb3465 x))))

(declare-fun tb2t3465 (uni) (tuple21 c (tuple21 a e)))

;; BridgeL
  (assert
  (forall ((i (tuple21 c (tuple21 a e))))
  (! (= (tb2t3465 (t2tb3465 i)) i) :pattern ((t2tb3465 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 c1 (tuple2 a1 e1)) j) (= (t2tb3465 (tb2t3465 j)) j)) :pattern (
  (t2tb3465 (tb2t3465 j))) )))

;; mem_times
  (assert
  (forall ((s (set c)) (t (set (tuple21 a e))) (x c) (y (tuple21 a e)))
  (= (mem (tuple2 c1 (tuple2 a1 e1))
  (Tuple2 c1 (tuple2 a1 e1) (t2tb135 x) (t2tb2949 y))
  (times (tuple2 a1 e1) c1 (t2tb132 s) (t2tb2943 t)))
  (and (mem7 x s) (mem44 y t)))))

;; mem_times
  (assert
  (forall ((s (set c)) (t (set e)) (x c) (y e))
  (= (mem46 (tb2t3479 (Tuple2 c1 e1 (t2tb135 x) (t2tb2955 y)))
  (tb2t3478 (times e1 c1 (t2tb132 s) (t2tb2947 t))))
  (and (mem7 x s) (mem36 y t)))))

(declare-fun t2tb4503 ((set (tuple21 c (tuple21 a d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 c (tuple21 a d))))) (sort
  (set1 (tuple2 c1 (tuple2 a1 d1))) (t2tb4503 x))))

(declare-fun tb2t4503 (uni) (set (tuple21 c (tuple21 a d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 c (tuple21 a d)))))
  (! (= (tb2t4503 (t2tb4503 i)) i) :pattern ((t2tb4503 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 c1 (tuple2 a1 d1))) j)
     (= (t2tb4503 (tb2t4503 j)) j)) :pattern ((t2tb4503 (tb2t4503 j))) )))

(declare-fun t2tb4504 ((tuple21 c (tuple21 a d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 c (tuple21 a d)))) (sort (tuple2 c1 (tuple2 a1 d1))
  (t2tb4504 x))))

(declare-fun tb2t4504 (uni) (tuple21 c (tuple21 a d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 c (tuple21 a d))))
  (! (= (tb2t4504 (t2tb4504 i)) i) :pattern ((t2tb4504 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 c1 (tuple2 a1 d1)) j) (= (t2tb4504 (tb2t4504 j)) j)) :pattern (
  (t2tb4504 (tb2t4504 j))) )))

;; mem_times
  (assert
  (forall ((s (set c)) (t (set (tuple21 a d))) (x c) (y (tuple21 a d)))
  (= (mem (tuple2 c1 (tuple2 a1 d1))
  (Tuple2 c1 (tuple2 a1 d1) (t2tb135 x) (t2tb904 y))
  (times (tuple2 a1 d1) c1 (t2tb132 s) (t2tb903 t)))
  (and (mem7 x s) (mem32 y t)))))

(declare-fun t2tb4505 ((set (tuple21 c (set (tuple21 b d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 c (set (tuple21 b d)))))) (sort
  (set1 (tuple2 c1 (set1 (tuple2 b1 d1)))) (t2tb4505 x))))

(declare-fun tb2t4505 (uni) (set (tuple21 c (set (tuple21 b d)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 c (set (tuple21 b d))))))
  (! (= (tb2t4505 (t2tb4505 i)) i) :pattern ((t2tb4505 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 c1 (set1 (tuple2 b1 d1)))) j)
     (= (t2tb4505 (tb2t4505 j)) j)) :pattern ((t2tb4505 (tb2t4505 j))) )))

(declare-fun t2tb4506 ((tuple21 c (set (tuple21 b d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 c (set (tuple21 b d))))) (sort
  (tuple2 c1 (set1 (tuple2 b1 d1))) (t2tb4506 x))))

(declare-fun tb2t4506 (uni) (tuple21 c (set (tuple21 b d))))

;; BridgeL
  (assert
  (forall ((i (tuple21 c (set (tuple21 b d)))))
  (! (= (tb2t4506 (t2tb4506 i)) i) :pattern ((t2tb4506 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 c1 (set1 (tuple2 b1 d1))) j)
     (= (t2tb4506 (tb2t4506 j)) j)) :pattern ((t2tb4506 (tb2t4506 j))) )))

;; mem_times
  (assert
  (forall ((s (set c)) (t (set (set (tuple21 b d)))) (x c) (y (set (tuple21 b
  d))))
  (= (mem (tuple2 c1 (set1 (tuple2 b1 d1)))
  (Tuple2 c1 (set1 (tuple2 b1 d1)) (t2tb135 x) (t2tb687 y))
  (times (set1 (tuple2 b1 d1)) c1 (t2tb132 s) (t2tb906 t)))
  (and (mem7 x s) (mem33 y t)))))

(declare-fun t2tb1782 ((tuple21 c (tuple21 b d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 c (tuple21 b d)))) (sort (tuple2 c1 (tuple2 b1 d1))
  (t2tb1782 x))))

(declare-fun tb2t1782 (uni) (tuple21 c (tuple21 b d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 c (tuple21 b d))))
  (! (= (tb2t1782 (t2tb1782 i)) i) :pattern ((t2tb1782 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 c1 (tuple2 b1 d1)) j) (= (t2tb1782 (tb2t1782 j)) j)) :pattern (
  (t2tb1782 (tb2t1782 j))) )))

(declare-fun t2tb4507 ((set (tuple21 c (tuple21 b d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 c (tuple21 b d))))) (sort
  (set1 (tuple2 c1 (tuple2 b1 d1))) (t2tb4507 x))))

(declare-fun tb2t4507 (uni) (set (tuple21 c (tuple21 b d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 c (tuple21 b d)))))
  (! (= (tb2t4507 (t2tb4507 i)) i) :pattern ((t2tb4507 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 c1 (tuple2 b1 d1))) j)
     (= (t2tb4507 (tb2t4507 j)) j)) :pattern ((t2tb4507 (tb2t4507 j))) )))

;; mem_times
  (assert
  (forall ((s (set c)) (t (set (tuple21 b d))) (x c) (y (tuple21 b d)))
  (= (mem (tuple2 c1 (tuple2 b1 d1))
  (Tuple2 c1 (tuple2 b1 d1) (t2tb135 x) (t2tb692 y))
  (times (tuple2 b1 d1) c1 (t2tb132 s) (t2tb687 t)))
  (and (mem7 x s) (mem23 y t)))))

(declare-fun t2tb689 ((set (tuple21 c d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 c d)))) (sort (set1 (tuple2 c1 d1)) (t2tb689 x))))

(declare-fun tb2t689 (uni) (set (tuple21 c d)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 c d))))
  (! (= (tb2t689 (t2tb689 i)) i) :pattern ((t2tb689 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 c1 d1)) j) (= (t2tb689 (tb2t689 j)) j)) :pattern (
  (t2tb689 (tb2t689 j))) )))

(declare-fun t2tb693 ((tuple21 c d)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 c d))) (sort (tuple2 c1 d1) (t2tb693 x))))

(declare-fun tb2t693 (uni) (tuple21 c d))

;; BridgeL
  (assert
  (forall ((i (tuple21 c d)))
  (! (= (tb2t693 (t2tb693 i)) i) :pattern ((t2tb693 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 c1 d1) j) (= (t2tb693 (tb2t693 j)) j)) :pattern (
  (t2tb693 (tb2t693 j))) )))

;; mem_times
  (assert
  (forall ((s (set c)) (t (set d)) (x c) (y d))
  (= (mem (tuple2 c1 d1) (Tuple2 c1 d1 (t2tb135 x) (t2tb694 y))
  (times d1 c1 (t2tb132 s) (t2tb690 t))) (and (mem7 x s) (mem20 y t)))))

(declare-fun t2tb4508 ((set (tuple21 c (tuple21 a (tuple21 b c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 c (tuple21 a (tuple21 b c)))))) (sort
  (set1 (tuple2 c1 (tuple2 a1 (tuple2 b1 c1)))) (t2tb4508 x))))

(declare-fun tb2t4508 (uni) (set (tuple21 c (tuple21 a (tuple21 b c)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 c (tuple21 a (tuple21 b c))))))
  (! (= (tb2t4508 (t2tb4508 i)) i) :pattern ((t2tb4508 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 c1 (tuple2 a1 (tuple2 b1 c1)))) j)
     (= (t2tb4508 (tb2t4508 j)) j)) :pattern ((t2tb4508 (tb2t4508 j))) )))

(declare-fun t2tb4509 ((tuple21 c (tuple21 a (tuple21 b c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 c (tuple21 a (tuple21 b c))))) (sort
  (tuple2 c1 (tuple2 a1 (tuple2 b1 c1))) (t2tb4509 x))))

(declare-fun tb2t4509 (uni) (tuple21 c (tuple21 a (tuple21 b c))))

;; BridgeL
  (assert
  (forall ((i (tuple21 c (tuple21 a (tuple21 b c)))))
  (! (= (tb2t4509 (t2tb4509 i)) i) :pattern ((t2tb4509 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 c1 (tuple2 a1 (tuple2 b1 c1))) j)
     (= (t2tb4509 (tb2t4509 j)) j)) :pattern ((t2tb4509 (tb2t4509 j))) )))

;; mem_times
  (assert
  (forall ((s (set c)) (t (set (tuple21 a (tuple21 b c)))) (x c)
  (y (tuple21 a (tuple21 b c))))
  (= (mem (tuple2 c1 (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 c1 (tuple2 a1 (tuple2 b1 c1)) (t2tb135 x) (t2tb260 y))
  (times (tuple2 a1 (tuple2 b1 c1)) c1 (t2tb132 s) (t2tb261 t)))
  (and (mem7 x s) (mem14 y t)))))

(declare-fun t2tb4510 ((set (tuple21 c (set (tuple21 a c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 c (set (tuple21 a c)))))) (sort
  (set1 (tuple2 c1 (set1 (tuple2 a1 c1)))) (t2tb4510 x))))

(declare-fun tb2t4510 (uni) (set (tuple21 c (set (tuple21 a c)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 c (set (tuple21 a c))))))
  (! (= (tb2t4510 (t2tb4510 i)) i) :pattern ((t2tb4510 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 c1 (set1 (tuple2 a1 c1)))) j)
     (= (t2tb4510 (tb2t4510 j)) j)) :pattern ((t2tb4510 (tb2t4510 j))) )))

(declare-fun t2tb4511 ((tuple21 c (set (tuple21 a c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 c (set (tuple21 a c))))) (sort
  (tuple2 c1 (set1 (tuple2 a1 c1))) (t2tb4511 x))))

(declare-fun tb2t4511 (uni) (tuple21 c (set (tuple21 a c))))

;; BridgeL
  (assert
  (forall ((i (tuple21 c (set (tuple21 a c)))))
  (! (= (tb2t4511 (t2tb4511 i)) i) :pattern ((t2tb4511 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 c1 (set1 (tuple2 a1 c1))) j)
     (= (t2tb4511 (tb2t4511 j)) j)) :pattern ((t2tb4511 (tb2t4511 j))) )))

;; mem_times
  (assert
  (forall ((s (set c)) (t (set (set (tuple21 a c)))) (x c) (y (set (tuple21 a
  c))))
  (= (mem (tuple2 c1 (set1 (tuple2 a1 c1)))
  (Tuple2 c1 (set1 (tuple2 a1 c1)) (t2tb135 x) (t2tb129 y))
  (times (set1 (tuple2 a1 c1)) c1 (t2tb132 s) (t2tb128 t)))
  (and (mem7 x s) (mem11 y t)))))

(declare-fun t2tb210 ((set (tuple21 c (tuple21 a c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 c (tuple21 a c))))) (sort
  (set1 (tuple2 c1 (tuple2 a1 c1))) (t2tb210 x))))

(declare-fun tb2t210 (uni) (set (tuple21 c (tuple21 a c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 c (tuple21 a c)))))
  (! (= (tb2t210 (t2tb210 i)) i) :pattern ((t2tb210 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 c1 (tuple2 a1 c1))) j)
     (= (t2tb210 (tb2t210 j)) j)) :pattern ((t2tb210 (tb2t210 j))) )))

(declare-fun t2tb211 ((tuple21 c (tuple21 a c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 c (tuple21 a c)))) (sort (tuple2 c1 (tuple2 a1 c1))
  (t2tb211 x))))

(declare-fun tb2t211 (uni) (tuple21 c (tuple21 a c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 c (tuple21 a c))))
  (! (= (tb2t211 (t2tb211 i)) i) :pattern ((t2tb211 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 c1 (tuple2 a1 c1)) j) (= (t2tb211 (tb2t211 j)) j)) :pattern (
  (t2tb211 (tb2t211 j))) )))

;; mem_times
  (assert
  (forall ((s (set c)) (t (set (tuple21 a c))) (x c) (y (tuple21 a c)))
  (= (mem (tuple2 c1 (tuple2 a1 c1))
  (Tuple2 c1 (tuple2 a1 c1) (t2tb135 x) (t2tb133 y))
  (times (tuple2 a1 c1) c1 (t2tb132 s) (t2tb129 t)))
  (and (mem7 x s) (mem10 y t)))))

(declare-fun t2tb216 ((set (tuple21 c c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 c c)))) (sort (set1 (tuple2 c1 c1)) (t2tb216 x))))

(declare-fun tb2t216 (uni) (set (tuple21 c c)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 c c))))
  (! (= (tb2t216 (t2tb216 i)) i) :pattern ((t2tb216 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 c1 c1)) j) (= (t2tb216 (tb2t216 j)) j)) :pattern (
  (t2tb216 (tb2t216 j))) )))

(declare-fun t2tb217 ((tuple21 c c)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 c c))) (sort (tuple2 c1 c1) (t2tb217 x))))

(declare-fun tb2t217 (uni) (tuple21 c c))

;; BridgeL
  (assert
  (forall ((i (tuple21 c c)))
  (! (= (tb2t217 (t2tb217 i)) i) :pattern ((t2tb217 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 c1 c1) j) (= (t2tb217 (tb2t217 j)) j)) :pattern (
  (t2tb217 (tb2t217 j))) )))

;; mem_times
  (assert
  (forall ((s (set c)) (t (set c)) (x c) (y c))
  (= (mem (tuple2 c1 c1) (Tuple2 c1 c1 (t2tb135 x) (t2tb135 y))
  (times c1 c1 (t2tb132 s) (t2tb132 t))) (and (mem7 x s) (mem7 y t)))))

(declare-fun t2tb218 ((set (tuple21 c (set (tuple21 a b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 c (set (tuple21 a b)))))) (sort
  (set1 (tuple2 c1 (set1 (tuple2 a1 b1)))) (t2tb218 x))))

(declare-fun tb2t218 (uni) (set (tuple21 c (set (tuple21 a b)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 c (set (tuple21 a b))))))
  (! (= (tb2t218 (t2tb218 i)) i) :pattern ((t2tb218 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 c1 (set1 (tuple2 a1 b1)))) j)
     (= (t2tb218 (tb2t218 j)) j)) :pattern ((t2tb218 (tb2t218 j))) )))

(declare-fun t2tb219 ((tuple21 c (set (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 c (set (tuple21 a b))))) (sort
  (tuple2 c1 (set1 (tuple2 a1 b1))) (t2tb219 x))))

(declare-fun tb2t219 (uni) (tuple21 c (set (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (tuple21 c (set (tuple21 a b)))))
  (! (= (tb2t219 (t2tb219 i)) i) :pattern ((t2tb219 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 c1 (set1 (tuple2 a1 b1))) j)
     (= (t2tb219 (tb2t219 j)) j)) :pattern ((t2tb219 (tb2t219 j))) )))

;; mem_times
  (assert
  (forall ((s (set c)) (t (set (set (tuple21 a b)))) (x c) (y (set (tuple21 a
  b))))
  (= (mem (tuple2 c1 (set1 (tuple2 a1 b1)))
  (Tuple2 c1 (set1 (tuple2 a1 b1)) (t2tb135 x) (t2tb11 y))
  (times (set1 (tuple2 a1 b1)) c1 (t2tb132 s) (t2tb10 t)))
  (and (mem7 x s) (mem4 y t)))))

(declare-fun t2tb220 ((set (tuple21 c (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 c (tuple21 a b))))) (sort
  (set1 (tuple2 c1 (tuple2 a1 b1))) (t2tb220 x))))

(declare-fun tb2t220 (uni) (set (tuple21 c (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 c (tuple21 a b)))))
  (! (= (tb2t220 (t2tb220 i)) i) :pattern ((t2tb220 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 c1 (tuple2 a1 b1))) j)
     (= (t2tb220 (tb2t220 j)) j)) :pattern ((t2tb220 (tb2t220 j))) )))

(declare-fun t2tb221 ((tuple21 c (tuple21 a b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 c (tuple21 a b)))) (sort (tuple2 c1 (tuple2 a1 b1))
  (t2tb221 x))))

(declare-fun tb2t221 (uni) (tuple21 c (tuple21 a b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 c (tuple21 a b))))
  (! (= (tb2t221 (t2tb221 i)) i) :pattern ((t2tb221 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 c1 (tuple2 a1 b1)) j) (= (t2tb221 (tb2t221 j)) j)) :pattern (
  (t2tb221 (tb2t221 j))) )))

;; mem_times
  (assert
  (forall ((s (set c)) (t (set (tuple21 a b))) (x c) (y (tuple21 a b)))
  (= (mem (tuple2 c1 (tuple2 a1 b1))
  (Tuple2 c1 (tuple2 a1 b1) (t2tb135 x) (t2tb13 y))
  (times (tuple2 a1 b1) c1 (t2tb132 s) (t2tb11 t)))
  (and (mem7 x s) (mem3 y t)))))

(declare-fun t2tb222 ((set (tuple21 c b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 c b)))) (sort (set1 (tuple2 c1 b1)) (t2tb222 x))))

(declare-fun tb2t222 (uni) (set (tuple21 c b)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 c b))))
  (! (= (tb2t222 (t2tb222 i)) i) :pattern ((t2tb222 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 c1 b1)) j) (= (t2tb222 (tb2t222 j)) j)) :pattern (
  (t2tb222 (tb2t222 j))) )))

(declare-fun t2tb223 ((tuple21 c b)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 c b))) (sort (tuple2 c1 b1) (t2tb223 x))))

(declare-fun tb2t223 (uni) (tuple21 c b))

;; BridgeL
  (assert
  (forall ((i (tuple21 c b)))
  (! (= (tb2t223 (t2tb223 i)) i) :pattern ((t2tb223 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 c1 b1) j) (= (t2tb223 (tb2t223 j)) j)) :pattern (
  (t2tb223 (tb2t223 j))) )))

;; mem_times
  (assert
  (forall ((s (set c)) (t (set b)) (x c) (y b))
  (= (mem (tuple2 c1 b1) (Tuple2 c1 b1 (t2tb135 x) (t2tb14 y))
  (times b1 c1 (t2tb132 s) (t2tb12 t))) (and (mem7 x s) (mem2 y t)))))

(declare-fun t2tb224 ((set (tuple21 c a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 c a)))) (sort (set1 (tuple2 c1 a1)) (t2tb224 x))))

(declare-fun tb2t224 (uni) (set (tuple21 c a)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 c a))))
  (! (= (tb2t224 (t2tb224 i)) i) :pattern ((t2tb224 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 c1 a1)) j) (= (t2tb224 (tb2t224 j)) j)) :pattern (
  (t2tb224 (tb2t224 j))) )))

(declare-fun t2tb225 ((tuple21 c a)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 c a))) (sort (tuple2 c1 a1) (t2tb225 x))))

(declare-fun tb2t225 (uni) (tuple21 c a))

;; BridgeL
  (assert
  (forall ((i (tuple21 c a)))
  (! (= (tb2t225 (t2tb225 i)) i) :pattern ((t2tb225 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 c1 a1) j) (= (t2tb225 (tb2t225 j)) j)) :pattern (
  (t2tb225 (tb2t225 j))) )))

;; mem_times
  (assert
  (forall ((s (set c)) (t (set a)) (x c) (y a))
  (= (mem (tuple2 c1 a1) (Tuple2 c1 a1 (t2tb135 x) (t2tb2 y))
  (times a1 c1 (t2tb132 s) (t2tb1 t))) (and (mem7 x s) (mem1 y t)))))

;; mem_times
  (assert
  (forall ((b2 ty))
  (forall ((s (set c)) (t uni) (x c) (y uni))
  (= (mem (tuple2 c1 b2) (Tuple2 c1 b2 (t2tb135 x) y)
  (times b2 c1 (t2tb132 s) t)) (and (mem7 x s) (mem b2 y t))))))

(declare-fun t2tb4512 ((set (tuple21 (set (tuple21 a b)) (tuple21 (tuple21 b
  c) (tuple21 d e))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a b)) (tuple21 (tuple21 b c)
  (tuple21 d e)))))) (sort
  (set1
  (tuple2 (set1 (tuple2 a1 b1)) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1))))
  (t2tb4512 x))))

(declare-fun tb2t4512 (uni) (set (tuple21 (set (tuple21 a b))
  (tuple21 (tuple21 b c) (tuple21 d e)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a b)) (tuple21 (tuple21 b c)
  (tuple21 d e))))))
  (! (= (tb2t4512 (t2tb4512 i)) i) :pattern ((t2tb4512 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (tuple2 (set1 (tuple2 a1 b1)) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1))))
     j) (= (t2tb4512 (tb2t4512 j)) j)) :pattern ((t2tb4512 (tb2t4512 j))) )))

(declare-fun t2tb4513 ((tuple21 (set (tuple21 a b)) (tuple21 (tuple21 b c)
  (tuple21 d e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a b)) (tuple21 (tuple21 b c) (tuple21 d
  e))))) (sort
  (tuple2 (set1 (tuple2 a1 b1)) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)))
  (t2tb4513 x))))

(declare-fun tb2t4513 (uni) (tuple21 (set (tuple21 a b)) (tuple21 (tuple21 b
  c) (tuple21 d e))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a b)) (tuple21 (tuple21 b c) (tuple21 d
  e))))) (! (= (tb2t4513 (t2tb4513 i)) i) :pattern ((t2tb4513 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (tuple2 (set1 (tuple2 a1 b1)) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1))) j)
     (= (t2tb4513 (tb2t4513 j)) j)) :pattern ((t2tb4513 (tb2t4513 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set (tuple21 (tuple21 b c)
  (tuple21 d e)))) (x (set (tuple21 a b))) (y (tuple21 (tuple21 b c)
  (tuple21 d e))))
  (= (mem
  (tuple2 (set1 (tuple2 a1 b1)) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)))
  (Tuple2 (set1 (tuple2 a1 b1)) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1))
  (t2tb11 x) (t2tb4104 y))
  (times (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (set1 (tuple2 a1 b1))
  (t2tb10 s) (t2tb4102 t))) (and (mem4 x s) (mem49 y t)))))

(declare-fun t2tb4514 ((set (tuple21 (set (tuple21 a b)) (tuple21 a
  (tuple21 d e))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a b)) (tuple21 a (tuple21 d e))))))
  (sort (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 (tuple2 d1 e1))))
  (t2tb4514 x))))

(declare-fun tb2t4514 (uni) (set (tuple21 (set (tuple21 a b)) (tuple21 a
  (tuple21 d e)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a b)) (tuple21 a (tuple21 d e))))))
  (! (= (tb2t4514 (t2tb4514 i)) i) :pattern ((t2tb4514 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 (tuple2 d1 e1)))) j)
     (= (t2tb4514 (tb2t4514 j)) j)) :pattern ((t2tb4514 (tb2t4514 j))) )))

(declare-fun t2tb4515 ((tuple21 (set (tuple21 a b)) (tuple21 a (tuple21 d
  e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a b)) (tuple21 a (tuple21 d e))))) (sort
  (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 (tuple2 d1 e1))) (t2tb4515 x))))

(declare-fun tb2t4515 (uni) (tuple21 (set (tuple21 a b)) (tuple21 a
  (tuple21 d e))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a b)) (tuple21 a (tuple21 d e)))))
  (! (= (tb2t4515 (t2tb4515 i)) i) :pattern ((t2tb4515 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 (tuple2 d1 e1))) j)
     (= (t2tb4515 (tb2t4515 j)) j)) :pattern ((t2tb4515 (tb2t4515 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set (tuple21 a (tuple21 d e))))
  (x (set (tuple21 a b))) (y (tuple21 a (tuple21 d e))))
  (= (mem (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 (tuple2 d1 e1)))
  (Tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 (tuple2 d1 e1)) (t2tb11 x)
  (t2tb4105 y))
  (times (tuple2 a1 (tuple2 d1 e1)) (set1 (tuple2 a1 b1)) (t2tb10 s)
  (t2tb4103 t))) (and (mem4 x s) (mem48 y t)))))

(declare-fun t2tb4516 ((set (tuple21 (set (tuple21 a b)) (set (tuple21 c
  e))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a b)) (set (tuple21 c e)))))) (sort
  (set1 (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 c1 e1)))) (t2tb4516 x))))

(declare-fun tb2t4516 (uni) (set (tuple21 (set (tuple21 a b)) (set (tuple21 c
  e)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a b)) (set (tuple21 c e))))))
  (! (= (tb2t4516 (t2tb4516 i)) i) :pattern ((t2tb4516 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 c1 e1)))) j)
     (= (t2tb4516 (tb2t4516 j)) j)) :pattern ((t2tb4516 (tb2t4516 j))) )))

(declare-fun t2tb4517 ((tuple21 (set (tuple21 a b)) (set (tuple21 c
  e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a b)) (set (tuple21 c e))))) (sort
  (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 c1 e1))) (t2tb4517 x))))

(declare-fun tb2t4517 (uni) (tuple21 (set (tuple21 a b)) (set (tuple21 c
  e))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a b)) (set (tuple21 c e)))))
  (! (= (tb2t4517 (t2tb4517 i)) i) :pattern ((t2tb4517 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 c1 e1))) j)
     (= (t2tb4517 (tb2t4517 j)) j)) :pattern ((t2tb4517 (tb2t4517 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set (set (tuple21 c e))))
  (x (set (tuple21 a b))) (y (set (tuple21 c e))))
  (= (mem (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 c1 e1)))
  (Tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 c1 e1)) (t2tb11 x)
  (t2tb3478 y))
  (times (set1 (tuple2 c1 e1)) (set1 (tuple2 a1 b1)) (t2tb10 s) (t2tb3854 t)))
  (and (mem4 x s) (mem47 y t)))))

(declare-fun t2tb4518 ((set (tuple21 (set (tuple21 a b)) (tuple21 c
  e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a b)) (tuple21 c e))))) (sort
  (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 c1 e1))) (t2tb4518 x))))

(declare-fun tb2t4518 (uni) (set (tuple21 (set (tuple21 a b)) (tuple21 c
  e))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a b)) (tuple21 c e)))))
  (! (= (tb2t4518 (t2tb4518 i)) i) :pattern ((t2tb4518 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 c1 e1))) j)
     (= (t2tb4518 (tb2t4518 j)) j)) :pattern ((t2tb4518 (tb2t4518 j))) )))

(declare-fun t2tb4519 ((tuple21 (set (tuple21 a b)) (tuple21 c e))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a b)) (tuple21 c e)))) (sort
  (tuple2 (set1 (tuple2 a1 b1)) (tuple2 c1 e1)) (t2tb4519 x))))

(declare-fun tb2t4519 (uni) (tuple21 (set (tuple21 a b)) (tuple21 c e)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a b)) (tuple21 c e))))
  (! (= (tb2t4519 (t2tb4519 i)) i) :pattern ((t2tb4519 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 a1 b1)) (tuple2 c1 e1)) j)
     (= (t2tb4519 (tb2t4519 j)) j)) :pattern ((t2tb4519 (tb2t4519 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set (tuple21 c e)))
  (x (set (tuple21 a b))) (y (tuple21 c e)))
  (= (mem (tuple2 (set1 (tuple2 a1 b1)) (tuple2 c1 e1))
  (Tuple2 (set1 (tuple2 a1 b1)) (tuple2 c1 e1) (t2tb11 x) (t2tb3479 y))
  (times (tuple2 c1 e1) (set1 (tuple2 a1 b1)) (t2tb10 s) (t2tb3478 t)))
  (and (mem4 x s) (mem46 y t)))))

(declare-fun t2tb3486 ((set (tuple21 (set (tuple21 a b)) (tuple21 a
  e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a b)) (tuple21 a e))))) (sort
  (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 e1))) (t2tb3486 x))))

(declare-fun tb2t3486 (uni) (set (tuple21 (set (tuple21 a b)) (tuple21 a
  e))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a b)) (tuple21 a e)))))
  (! (= (tb2t3486 (t2tb3486 i)) i) :pattern ((t2tb3486 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 e1))) j)
     (= (t2tb3486 (tb2t3486 j)) j)) :pattern ((t2tb3486 (tb2t3486 j))) )))

(declare-fun t2tb3487 ((tuple21 (set (tuple21 a b)) (tuple21 a e))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a b)) (tuple21 a e)))) (sort
  (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 e1)) (t2tb3487 x))))

(declare-fun tb2t3487 (uni) (tuple21 (set (tuple21 a b)) (tuple21 a e)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a b)) (tuple21 a e))))
  (! (= (tb2t3487 (t2tb3487 i)) i) :pattern ((t2tb3487 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 e1)) j)
     (= (t2tb3487 (tb2t3487 j)) j)) :pattern ((t2tb3487 (tb2t3487 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set (tuple21 a e)))
  (x (set (tuple21 a b))) (y (tuple21 a e)))
  (= (mem (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 e1))
  (Tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 e1) (t2tb11 x) (t2tb2949 y))
  (times (tuple2 a1 e1) (set1 (tuple2 a1 b1)) (t2tb10 s) (t2tb2943 t)))
  (and (mem4 x s) (mem44 y t)))))

(declare-fun t2tb3502 ((set (tuple21 (set (tuple21 a b)) e))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a b)) e)))) (sort
  (set1 (tuple2 (set1 (tuple2 a1 b1)) e1)) (t2tb3502 x))))

(declare-fun tb2t3502 (uni) (set (tuple21 (set (tuple21 a b)) e)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a b)) e))))
  (! (= (tb2t3502 (t2tb3502 i)) i) :pattern ((t2tb3502 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 a1 b1)) e1)) j)
     (= (t2tb3502 (tb2t3502 j)) j)) :pattern ((t2tb3502 (tb2t3502 j))) )))

(declare-fun t2tb3503 ((tuple21 (set (tuple21 a b)) e)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a b)) e))) (sort
  (tuple2 (set1 (tuple2 a1 b1)) e1) (t2tb3503 x))))

(declare-fun tb2t3503 (uni) (tuple21 (set (tuple21 a b)) e))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a b)) e)))
  (! (= (tb2t3503 (t2tb3503 i)) i) :pattern ((t2tb3503 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 a1 b1)) e1) j)
     (= (t2tb3503 (tb2t3503 j)) j)) :pattern ((t2tb3503 (tb2t3503 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set e)) (x (set (tuple21 a b)))
  (y e))
  (= (mem (tuple2 (set1 (tuple2 a1 b1)) e1)
  (Tuple2 (set1 (tuple2 a1 b1)) e1 (t2tb11 x) (t2tb2955 y))
  (times e1 (set1 (tuple2 a1 b1)) (t2tb10 s) (t2tb2947 t)))
  (and (mem4 x s) (mem36 y t)))))

(declare-fun t2tb4520 ((set (tuple21 (set (tuple21 a b)) (tuple21 a
  d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a b)) (tuple21 a d))))) (sort
  (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 d1))) (t2tb4520 x))))

(declare-fun tb2t4520 (uni) (set (tuple21 (set (tuple21 a b)) (tuple21 a
  d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a b)) (tuple21 a d)))))
  (! (= (tb2t4520 (t2tb4520 i)) i) :pattern ((t2tb4520 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 d1))) j)
     (= (t2tb4520 (tb2t4520 j)) j)) :pattern ((t2tb4520 (tb2t4520 j))) )))

(declare-fun t2tb4521 ((tuple21 (set (tuple21 a b)) (tuple21 a d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a b)) (tuple21 a d)))) (sort
  (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 d1)) (t2tb4521 x))))

(declare-fun tb2t4521 (uni) (tuple21 (set (tuple21 a b)) (tuple21 a d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a b)) (tuple21 a d))))
  (! (= (tb2t4521 (t2tb4521 i)) i) :pattern ((t2tb4521 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 d1)) j)
     (= (t2tb4521 (tb2t4521 j)) j)) :pattern ((t2tb4521 (tb2t4521 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set (tuple21 a d)))
  (x (set (tuple21 a b))) (y (tuple21 a d)))
  (= (mem (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 d1))
  (Tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 d1) (t2tb11 x) (t2tb904 y))
  (times (tuple2 a1 d1) (set1 (tuple2 a1 b1)) (t2tb10 s) (t2tb903 t)))
  (and (mem4 x s) (mem32 y t)))))

(declare-fun t2tb4522 ((set (tuple21 (set (tuple21 a b)) (set (tuple21 b
  d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a b)) (set (tuple21 b d)))))) (sort
  (set1 (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 b1 d1)))) (t2tb4522 x))))

(declare-fun tb2t4522 (uni) (set (tuple21 (set (tuple21 a b)) (set (tuple21 b
  d)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a b)) (set (tuple21 b d))))))
  (! (= (tb2t4522 (t2tb4522 i)) i) :pattern ((t2tb4522 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 b1 d1)))) j)
     (= (t2tb4522 (tb2t4522 j)) j)) :pattern ((t2tb4522 (tb2t4522 j))) )))

(declare-fun t2tb4523 ((tuple21 (set (tuple21 a b)) (set (tuple21 b
  d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a b)) (set (tuple21 b d))))) (sort
  (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 b1 d1))) (t2tb4523 x))))

(declare-fun tb2t4523 (uni) (tuple21 (set (tuple21 a b)) (set (tuple21 b
  d))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a b)) (set (tuple21 b d)))))
  (! (= (tb2t4523 (t2tb4523 i)) i) :pattern ((t2tb4523 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 b1 d1))) j)
     (= (t2tb4523 (tb2t4523 j)) j)) :pattern ((t2tb4523 (tb2t4523 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set (set (tuple21 b d))))
  (x (set (tuple21 a b))) (y (set (tuple21 b d))))
  (= (mem (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 b1 d1)))
  (Tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 b1 d1)) (t2tb11 x) (t2tb687 y))
  (times (set1 (tuple2 b1 d1)) (set1 (tuple2 a1 b1)) (t2tb10 s) (t2tb906 t)))
  (and (mem4 x s) (mem33 y t)))))

(declare-fun t2tb4524 ((set (tuple21 (set (tuple21 a b)) (tuple21 b
  d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a b)) (tuple21 b d))))) (sort
  (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 b1 d1))) (t2tb4524 x))))

(declare-fun tb2t4524 (uni) (set (tuple21 (set (tuple21 a b)) (tuple21 b
  d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a b)) (tuple21 b d)))))
  (! (= (tb2t4524 (t2tb4524 i)) i) :pattern ((t2tb4524 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 b1 d1))) j)
     (= (t2tb4524 (tb2t4524 j)) j)) :pattern ((t2tb4524 (tb2t4524 j))) )))

(declare-fun t2tb4525 ((tuple21 (set (tuple21 a b)) (tuple21 b d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a b)) (tuple21 b d)))) (sort
  (tuple2 (set1 (tuple2 a1 b1)) (tuple2 b1 d1)) (t2tb4525 x))))

(declare-fun tb2t4525 (uni) (tuple21 (set (tuple21 a b)) (tuple21 b d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a b)) (tuple21 b d))))
  (! (= (tb2t4525 (t2tb4525 i)) i) :pattern ((t2tb4525 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 a1 b1)) (tuple2 b1 d1)) j)
     (= (t2tb4525 (tb2t4525 j)) j)) :pattern ((t2tb4525 (tb2t4525 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set (tuple21 b d)))
  (x (set (tuple21 a b))) (y (tuple21 b d)))
  (= (mem (tuple2 (set1 (tuple2 a1 b1)) (tuple2 b1 d1))
  (Tuple2 (set1 (tuple2 a1 b1)) (tuple2 b1 d1) (t2tb11 x) (t2tb692 y))
  (times (tuple2 b1 d1) (set1 (tuple2 a1 b1)) (t2tb10 s) (t2tb687 t)))
  (and (mem4 x s) (mem23 y t)))))

(declare-fun t2tb869 ((set (tuple21 (set (tuple21 a b)) d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a b)) d)))) (sort
  (set1 (tuple2 (set1 (tuple2 a1 b1)) d1)) (t2tb869 x))))

(declare-fun tb2t869 (uni) (set (tuple21 (set (tuple21 a b)) d)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a b)) d))))
  (! (= (tb2t869 (t2tb869 i)) i) :pattern ((t2tb869 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 a1 b1)) d1)) j)
     (= (t2tb869 (tb2t869 j)) j)) :pattern ((t2tb869 (tb2t869 j))) )))

(declare-fun t2tb870 ((tuple21 (set (tuple21 a b)) d)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a b)) d))) (sort
  (tuple2 (set1 (tuple2 a1 b1)) d1) (t2tb870 x))))

(declare-fun tb2t870 (uni) (tuple21 (set (tuple21 a b)) d))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a b)) d)))
  (! (= (tb2t870 (t2tb870 i)) i) :pattern ((t2tb870 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 a1 b1)) d1) j)
     (= (t2tb870 (tb2t870 j)) j)) :pattern ((t2tb870 (tb2t870 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set d)) (x (set (tuple21 a b)))
  (y d))
  (= (mem (tuple2 (set1 (tuple2 a1 b1)) d1)
  (Tuple2 (set1 (tuple2 a1 b1)) d1 (t2tb11 x) (t2tb694 y))
  (times d1 (set1 (tuple2 a1 b1)) (t2tb10 s) (t2tb690 t)))
  (and (mem4 x s) (mem20 y t)))))

(declare-fun t2tb4526 ((set (tuple21 (set (tuple21 a b)) (tuple21 a
  (tuple21 b c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a b)) (tuple21 a (tuple21 b c))))))
  (sort (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 (tuple2 b1 c1))))
  (t2tb4526 x))))

(declare-fun tb2t4526 (uni) (set (tuple21 (set (tuple21 a b)) (tuple21 a
  (tuple21 b c)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a b)) (tuple21 a (tuple21 b c))))))
  (! (= (tb2t4526 (t2tb4526 i)) i) :pattern ((t2tb4526 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 (tuple2 b1 c1)))) j)
     (= (t2tb4526 (tb2t4526 j)) j)) :pattern ((t2tb4526 (tb2t4526 j))) )))

(declare-fun t2tb4527 ((tuple21 (set (tuple21 a b)) (tuple21 a (tuple21 b
  c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a b)) (tuple21 a (tuple21 b c))))) (sort
  (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 (tuple2 b1 c1))) (t2tb4527 x))))

(declare-fun tb2t4527 (uni) (tuple21 (set (tuple21 a b)) (tuple21 a
  (tuple21 b c))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a b)) (tuple21 a (tuple21 b c)))))
  (! (= (tb2t4527 (t2tb4527 i)) i) :pattern ((t2tb4527 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 (tuple2 b1 c1))) j)
     (= (t2tb4527 (tb2t4527 j)) j)) :pattern ((t2tb4527 (tb2t4527 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set (tuple21 a (tuple21 b c))))
  (x (set (tuple21 a b))) (y (tuple21 a (tuple21 b c))))
  (= (mem (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 (tuple2 b1 c1)) (t2tb11 x)
  (t2tb260 y))
  (times (tuple2 a1 (tuple2 b1 c1)) (set1 (tuple2 a1 b1)) (t2tb10 s)
  (t2tb261 t))) (and (mem4 x s) (mem14 y t)))))

(declare-fun t2tb4528 ((set (tuple21 (set (tuple21 a b)) (set (tuple21 a
  c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a b)) (set (tuple21 a c)))))) (sort
  (set1 (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 c1)))) (t2tb4528 x))))

(declare-fun tb2t4528 (uni) (set (tuple21 (set (tuple21 a b)) (set (tuple21 a
  c)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a b)) (set (tuple21 a c))))))
  (! (= (tb2t4528 (t2tb4528 i)) i) :pattern ((t2tb4528 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 c1)))) j)
     (= (t2tb4528 (tb2t4528 j)) j)) :pattern ((t2tb4528 (tb2t4528 j))) )))

(declare-fun t2tb4529 ((tuple21 (set (tuple21 a b)) (set (tuple21 a
  c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a b)) (set (tuple21 a c))))) (sort
  (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 c1))) (t2tb4529 x))))

(declare-fun tb2t4529 (uni) (tuple21 (set (tuple21 a b)) (set (tuple21 a
  c))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a b)) (set (tuple21 a c)))))
  (! (= (tb2t4529 (t2tb4529 i)) i) :pattern ((t2tb4529 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 c1))) j)
     (= (t2tb4529 (tb2t4529 j)) j)) :pattern ((t2tb4529 (tb2t4529 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set (set (tuple21 a c))))
  (x (set (tuple21 a b))) (y (set (tuple21 a c))))
  (= (mem (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 c1)))
  (Tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 c1)) (t2tb11 x) (t2tb129 y))
  (times (set1 (tuple2 a1 c1)) (set1 (tuple2 a1 b1)) (t2tb10 s) (t2tb128 t)))
  (and (mem4 x s) (mem11 y t)))))

(declare-fun t2tb228 ((tuple21 (set (tuple21 a b)) (tuple21 a c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a b)) (tuple21 a c)))) (sort
  (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 c1)) (t2tb228 x))))

(declare-fun tb2t228 (uni) (tuple21 (set (tuple21 a b)) (tuple21 a c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a b)) (tuple21 a c))))
  (! (= (tb2t228 (t2tb228 i)) i) :pattern ((t2tb228 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 c1)) j)
     (= (t2tb228 (tb2t228 j)) j)) :pattern ((t2tb228 (tb2t228 j))) )))

(declare-fun t2tb229 ((set (tuple21 (set (tuple21 a b)) (tuple21 a c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a b)) (tuple21 a c))))) (sort
  (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 c1))) (t2tb229 x))))

(declare-fun tb2t229 (uni) (set (tuple21 (set (tuple21 a b)) (tuple21 a c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a b)) (tuple21 a c)))))
  (! (= (tb2t229 (t2tb229 i)) i) :pattern ((t2tb229 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 c1))) j)
     (= (t2tb229 (tb2t229 j)) j)) :pattern ((t2tb229 (tb2t229 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set (tuple21 a c)))
  (x (set (tuple21 a b))) (y (tuple21 a c)))
  (= (mem (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 c1))
  (Tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 c1) (t2tb11 x) (t2tb133 y))
  (times (tuple2 a1 c1) (set1 (tuple2 a1 b1)) (t2tb10 s) (t2tb129 t)))
  (and (mem4 x s) (mem10 y t)))))

(declare-fun t2tb234 ((set (tuple21 (set (tuple21 a b)) c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a b)) c)))) (sort
  (set1 (tuple2 (set1 (tuple2 a1 b1)) c1)) (t2tb234 x))))

(declare-fun tb2t234 (uni) (set (tuple21 (set (tuple21 a b)) c)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a b)) c))))
  (! (= (tb2t234 (t2tb234 i)) i) :pattern ((t2tb234 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 a1 b1)) c1)) j)
     (= (t2tb234 (tb2t234 j)) j)) :pattern ((t2tb234 (tb2t234 j))) )))

(declare-fun t2tb235 ((tuple21 (set (tuple21 a b)) c)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a b)) c))) (sort
  (tuple2 (set1 (tuple2 a1 b1)) c1) (t2tb235 x))))

(declare-fun tb2t235 (uni) (tuple21 (set (tuple21 a b)) c))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a b)) c)))
  (! (= (tb2t235 (t2tb235 i)) i) :pattern ((t2tb235 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 a1 b1)) c1) j)
     (= (t2tb235 (tb2t235 j)) j)) :pattern ((t2tb235 (tb2t235 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set c)) (x (set (tuple21 a b)))
  (y c))
  (= (mem (tuple2 (set1 (tuple2 a1 b1)) c1)
  (Tuple2 (set1 (tuple2 a1 b1)) c1 (t2tb11 x) (t2tb135 y))
  (times c1 (set1 (tuple2 a1 b1)) (t2tb10 s) (t2tb132 t)))
  (and (mem4 x s) (mem7 y t)))))

(declare-fun t2tb15 ((set (tuple21 (set (tuple21 a b)) (set (tuple21 a
  b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a b)) (set (tuple21 a b)))))) (sort
  (set1 (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1)))) (t2tb15 x))))

(declare-fun tb2t15 (uni) (set (tuple21 (set (tuple21 a b)) (set (tuple21 a
  b)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a b)) (set (tuple21 a b))))))
  (! (= (tb2t15 (t2tb15 i)) i) :pattern ((t2tb15 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1)))) j)
     (= (t2tb15 (tb2t15 j)) j)) :pattern ((t2tb15 (tb2t15 j))) )))

(declare-fun t2tb16 ((tuple21 (set (tuple21 a b)) (set (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a b)) (set (tuple21 a b))))) (sort
  (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1))) (t2tb16 x))))

(declare-fun tb2t16 (uni) (tuple21 (set (tuple21 a b)) (set (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a b)) (set (tuple21 a b)))))
  (! (= (tb2t16 (t2tb16 i)) i) :pattern ((t2tb16 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1))) j)
     (= (t2tb16 (tb2t16 j)) j)) :pattern ((t2tb16 (tb2t16 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set (set (tuple21 a b))))
  (x (set (tuple21 a b))) (y (set (tuple21 a b))))
  (= (mem (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1)))
  (Tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1)) (t2tb11 x) (t2tb11 y))
  (times (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1)) (t2tb10 s) (t2tb10 t)))
  (and (mem4 x s) (mem4 y t)))))

(declare-fun t2tb17 ((set (tuple21 (set (tuple21 a b)) (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a b)) (tuple21 a b))))) (sort
  (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 b1))) (t2tb17 x))))

(declare-fun tb2t17 (uni) (set (tuple21 (set (tuple21 a b)) (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a b)) (tuple21 a b)))))
  (! (= (tb2t17 (t2tb17 i)) i) :pattern ((t2tb17 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 b1))) j)
     (= (t2tb17 (tb2t17 j)) j)) :pattern ((t2tb17 (tb2t17 j))) )))

(declare-fun t2tb18 ((tuple21 (set (tuple21 a b)) (tuple21 a b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a b)) (tuple21 a b)))) (sort
  (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 b1)) (t2tb18 x))))

(declare-fun tb2t18 (uni) (tuple21 (set (tuple21 a b)) (tuple21 a b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a b)) (tuple21 a b))))
  (! (= (tb2t18 (t2tb18 i)) i) :pattern ((t2tb18 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 b1)) j)
     (= (t2tb18 (tb2t18 j)) j)) :pattern ((t2tb18 (tb2t18 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set (tuple21 a b)))
  (x (set (tuple21 a b))) (y (tuple21 a b)))
  (= (mem (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 b1))
  (Tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 b1) (t2tb11 x) (t2tb13 y))
  (times (tuple2 a1 b1) (set1 (tuple2 a1 b1)) (t2tb10 s) (t2tb11 t)))
  (and (mem4 x s) (mem3 y t)))))

(declare-fun t2tb19 ((set (tuple21 (set (tuple21 a b)) b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a b)) b)))) (sort
  (set1 (tuple2 (set1 (tuple2 a1 b1)) b1)) (t2tb19 x))))

(declare-fun tb2t19 (uni) (set (tuple21 (set (tuple21 a b)) b)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a b)) b))))
  (! (= (tb2t19 (t2tb19 i)) i) :pattern ((t2tb19 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 a1 b1)) b1)) j)
     (= (t2tb19 (tb2t19 j)) j)) :pattern ((t2tb19 (tb2t19 j))) )))

(declare-fun t2tb20 ((tuple21 (set (tuple21 a b)) b)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a b)) b))) (sort
  (tuple2 (set1 (tuple2 a1 b1)) b1) (t2tb20 x))))

(declare-fun tb2t20 (uni) (tuple21 (set (tuple21 a b)) b))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a b)) b)))
  (! (= (tb2t20 (t2tb20 i)) i) :pattern ((t2tb20 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 a1 b1)) b1) j)
     (= (t2tb20 (tb2t20 j)) j)) :pattern ((t2tb20 (tb2t20 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set b)) (x (set (tuple21 a b)))
  (y b))
  (= (mem (tuple2 (set1 (tuple2 a1 b1)) b1)
  (Tuple2 (set1 (tuple2 a1 b1)) b1 (t2tb11 x) (t2tb14 y))
  (times b1 (set1 (tuple2 a1 b1)) (t2tb10 s) (t2tb12 t)))
  (and (mem4 x s) (mem2 y t)))))

(declare-fun t2tb21 ((tuple21 (set (tuple21 a b)) a)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a b)) a))) (sort
  (tuple2 (set1 (tuple2 a1 b1)) a1) (t2tb21 x))))

(declare-fun tb2t21 (uni) (tuple21 (set (tuple21 a b)) a))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a b)) a)))
  (! (= (tb2t21 (t2tb21 i)) i) :pattern ((t2tb21 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 a1 b1)) a1) j)
     (= (t2tb21 (tb2t21 j)) j)) :pattern ((t2tb21 (tb2t21 j))) )))

(declare-fun t2tb22 ((set (tuple21 (set (tuple21 a b)) a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a b)) a)))) (sort
  (set1 (tuple2 (set1 (tuple2 a1 b1)) a1)) (t2tb22 x))))

(declare-fun tb2t22 (uni) (set (tuple21 (set (tuple21 a b)) a)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a b)) a))))
  (! (= (tb2t22 (t2tb22 i)) i) :pattern ((t2tb22 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 a1 b1)) a1)) j)
     (= (t2tb22 (tb2t22 j)) j)) :pattern ((t2tb22 (tb2t22 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set a)) (x (set (tuple21 a b)))
  (y a))
  (= (mem (tuple2 (set1 (tuple2 a1 b1)) a1)
  (Tuple2 (set1 (tuple2 a1 b1)) a1 (t2tb11 x) (t2tb2 y))
  (times a1 (set1 (tuple2 a1 b1)) (t2tb10 s) (t2tb1 t)))
  (and (mem4 x s) (mem1 y t)))))

;; mem_times
  (assert
  (forall ((b2 ty))
  (forall ((s (set (set (tuple21 a b)))) (t uni) (x (set (tuple21 a b)))
  (y uni))
  (= (mem (tuple2 (set1 (tuple2 a1 b1)) b2)
  (Tuple2 (set1 (tuple2 a1 b1)) b2 (t2tb11 x) y)
  (times b2 (set1 (tuple2 a1 b1)) (t2tb10 s) t))
  (and (mem4 x s) (mem b2 y t))))))

(declare-fun t2tb4530 ((set (tuple21 (tuple21 a b) (tuple21 (tuple21 b c)
  (tuple21 d e))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) (tuple21 (tuple21 b c) (tuple21 d
  e)))))) (sort
  (set1 (tuple2 (tuple2 a1 b1) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1))))
  (t2tb4530 x))))

(declare-fun tb2t4530 (uni) (set (tuple21 (tuple21 a b) (tuple21 (tuple21 b
  c) (tuple21 d e)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a b) (tuple21 (tuple21 b c) (tuple21 d
  e)))))) (! (= (tb2t4530 (t2tb4530 i)) i) :pattern ((t2tb4530 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 a1 b1) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)))) j)
     (= (t2tb4530 (tb2t4530 j)) j)) :pattern ((t2tb4530 (tb2t4530 j))) )))

(declare-fun t2tb4531 ((tuple21 (tuple21 a b) (tuple21 (tuple21 b c)
  (tuple21 d e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a b) (tuple21 (tuple21 b c) (tuple21 d e)))))
  (sort (tuple2 (tuple2 a1 b1) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)))
  (t2tb4531 x))))

(declare-fun tb2t4531 (uni) (tuple21 (tuple21 a b) (tuple21 (tuple21 b c)
  (tuple21 d e))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a b) (tuple21 (tuple21 b c) (tuple21 d e)))))
  (! (= (tb2t4531 (t2tb4531 i)) i) :pattern ((t2tb4531 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 b1) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)))
     j) (= (t2tb4531 (tb2t4531 j)) j)) :pattern ((t2tb4531 (tb2t4531 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (tuple21 (tuple21 b c) (tuple21 d
  e)))) (x (tuple21 a b)) (y (tuple21 (tuple21 b c) (tuple21 d e))))
  (= (mem (tuple2 (tuple2 a1 b1) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)))
  (Tuple2 (tuple2 a1 b1) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (t2tb13 x)
  (t2tb4104 y))
  (times (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (tuple2 a1 b1) (t2tb11 s)
  (t2tb4102 t))) (and (mem3 x s) (mem49 y t)))))

(declare-fun t2tb4532 ((set (tuple21 (tuple21 a b) (tuple21 a (tuple21 d
  e))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) (tuple21 a (tuple21 d e)))))) (sort
  (set1 (tuple2 (tuple2 a1 b1) (tuple2 a1 (tuple2 d1 e1)))) (t2tb4532 x))))

(declare-fun tb2t4532 (uni) (set (tuple21 (tuple21 a b) (tuple21 a (tuple21 d
  e)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a b) (tuple21 a (tuple21 d e))))))
  (! (= (tb2t4532 (t2tb4532 i)) i) :pattern ((t2tb4532 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 b1) (tuple2 a1 (tuple2 d1 e1)))) j)
     (= (t2tb4532 (tb2t4532 j)) j)) :pattern ((t2tb4532 (tb2t4532 j))) )))

(declare-fun t2tb4533 ((tuple21 (tuple21 a b) (tuple21 a (tuple21 d
  e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a b) (tuple21 a (tuple21 d e))))) (sort
  (tuple2 (tuple2 a1 b1) (tuple2 a1 (tuple2 d1 e1))) (t2tb4533 x))))

(declare-fun tb2t4533 (uni) (tuple21 (tuple21 a b) (tuple21 a (tuple21 d
  e))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a b) (tuple21 a (tuple21 d e)))))
  (! (= (tb2t4533 (t2tb4533 i)) i) :pattern ((t2tb4533 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 b1) (tuple2 a1 (tuple2 d1 e1))) j)
     (= (t2tb4533 (tb2t4533 j)) j)) :pattern ((t2tb4533 (tb2t4533 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (tuple21 a (tuple21 d e))))
  (x (tuple21 a b)) (y (tuple21 a (tuple21 d e))))
  (= (mem (tuple2 (tuple2 a1 b1) (tuple2 a1 (tuple2 d1 e1)))
  (Tuple2 (tuple2 a1 b1) (tuple2 a1 (tuple2 d1 e1)) (t2tb13 x) (t2tb4105 y))
  (times (tuple2 a1 (tuple2 d1 e1)) (tuple2 a1 b1) (t2tb11 s) (t2tb4103 t)))
  (and (mem3 x s) (mem48 y t)))))

(declare-fun t2tb4534 ((set (tuple21 (tuple21 a b) (set (tuple21 c
  e))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) (set (tuple21 c e)))))) (sort
  (set1 (tuple2 (tuple2 a1 b1) (set1 (tuple2 c1 e1)))) (t2tb4534 x))))

(declare-fun tb2t4534 (uni) (set (tuple21 (tuple21 a b) (set (tuple21 c
  e)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a b) (set (tuple21 c e))))))
  (! (= (tb2t4534 (t2tb4534 i)) i) :pattern ((t2tb4534 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 b1) (set1 (tuple2 c1 e1)))) j)
     (= (t2tb4534 (tb2t4534 j)) j)) :pattern ((t2tb4534 (tb2t4534 j))) )))

(declare-fun t2tb4535 ((tuple21 (tuple21 a b) (set (tuple21 c e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a b) (set (tuple21 c e))))) (sort
  (tuple2 (tuple2 a1 b1) (set1 (tuple2 c1 e1))) (t2tb4535 x))))

(declare-fun tb2t4535 (uni) (tuple21 (tuple21 a b) (set (tuple21 c e))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a b) (set (tuple21 c e)))))
  (! (= (tb2t4535 (t2tb4535 i)) i) :pattern ((t2tb4535 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 b1) (set1 (tuple2 c1 e1))) j)
     (= (t2tb4535 (tb2t4535 j)) j)) :pattern ((t2tb4535 (tb2t4535 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (set (tuple21 c e))))
  (x (tuple21 a b)) (y (set (tuple21 c e))))
  (= (mem (tuple2 (tuple2 a1 b1) (set1 (tuple2 c1 e1)))
  (Tuple2 (tuple2 a1 b1) (set1 (tuple2 c1 e1)) (t2tb13 x) (t2tb3478 y))
  (times (set1 (tuple2 c1 e1)) (tuple2 a1 b1) (t2tb11 s) (t2tb3854 t)))
  (and (mem3 x s) (mem47 y t)))))

(declare-fun t2tb4536 ((set (tuple21 (tuple21 a b) (tuple21 c e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) (tuple21 c e))))) (sort
  (set1 (tuple2 (tuple2 a1 b1) (tuple2 c1 e1))) (t2tb4536 x))))

(declare-fun tb2t4536 (uni) (set (tuple21 (tuple21 a b) (tuple21 c e))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a b) (tuple21 c e)))))
  (! (= (tb2t4536 (t2tb4536 i)) i) :pattern ((t2tb4536 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 b1) (tuple2 c1 e1))) j)
     (= (t2tb4536 (tb2t4536 j)) j)) :pattern ((t2tb4536 (tb2t4536 j))) )))

(declare-fun t2tb4537 ((tuple21 (tuple21 a b) (tuple21 c e))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a b) (tuple21 c e)))) (sort
  (tuple2 (tuple2 a1 b1) (tuple2 c1 e1)) (t2tb4537 x))))

(declare-fun tb2t4537 (uni) (tuple21 (tuple21 a b) (tuple21 c e)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a b) (tuple21 c e))))
  (! (= (tb2t4537 (t2tb4537 i)) i) :pattern ((t2tb4537 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 b1) (tuple2 c1 e1)) j)
     (= (t2tb4537 (tb2t4537 j)) j)) :pattern ((t2tb4537 (tb2t4537 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (tuple21 c e))) (x (tuple21 a b))
  (y (tuple21 c e)))
  (= (mem (tuple2 (tuple2 a1 b1) (tuple2 c1 e1))
  (Tuple2 (tuple2 a1 b1) (tuple2 c1 e1) (t2tb13 x) (t2tb3479 y))
  (times (tuple2 c1 e1) (tuple2 a1 b1) (t2tb11 s) (t2tb3478 t)))
  (and (mem3 x s) (mem46 y t)))))

(declare-fun t2tb3512 ((set (tuple21 (tuple21 a b) (tuple21 a e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) (tuple21 a e))))) (sort
  (set1 (tuple2 (tuple2 a1 b1) (tuple2 a1 e1))) (t2tb3512 x))))

(declare-fun tb2t3512 (uni) (set (tuple21 (tuple21 a b) (tuple21 a e))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a b) (tuple21 a e)))))
  (! (= (tb2t3512 (t2tb3512 i)) i) :pattern ((t2tb3512 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 b1) (tuple2 a1 e1))) j)
     (= (t2tb3512 (tb2t3512 j)) j)) :pattern ((t2tb3512 (tb2t3512 j))) )))

(declare-fun t2tb3513 ((tuple21 (tuple21 a b) (tuple21 a e))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a b) (tuple21 a e)))) (sort
  (tuple2 (tuple2 a1 b1) (tuple2 a1 e1)) (t2tb3513 x))))

(declare-fun tb2t3513 (uni) (tuple21 (tuple21 a b) (tuple21 a e)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a b) (tuple21 a e))))
  (! (= (tb2t3513 (t2tb3513 i)) i) :pattern ((t2tb3513 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 b1) (tuple2 a1 e1)) j)
     (= (t2tb3513 (tb2t3513 j)) j)) :pattern ((t2tb3513 (tb2t3513 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (tuple21 a e))) (x (tuple21 a b))
  (y (tuple21 a e)))
  (= (mem (tuple2 (tuple2 a1 b1) (tuple2 a1 e1))
  (Tuple2 (tuple2 a1 b1) (tuple2 a1 e1) (t2tb13 x) (t2tb2949 y))
  (times (tuple2 a1 e1) (tuple2 a1 b1) (t2tb11 s) (t2tb2943 t)))
  (and (mem3 x s) (mem44 y t)))))

(declare-fun t2tb3528 ((set (tuple21 (tuple21 a b) e))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) e)))) (sort
  (set1 (tuple2 (tuple2 a1 b1) e1)) (t2tb3528 x))))

(declare-fun tb2t3528 (uni) (set (tuple21 (tuple21 a b) e)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a b) e))))
  (! (= (tb2t3528 (t2tb3528 i)) i) :pattern ((t2tb3528 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 b1) e1)) j)
     (= (t2tb3528 (tb2t3528 j)) j)) :pattern ((t2tb3528 (tb2t3528 j))) )))

(declare-fun t2tb3529 ((tuple21 (tuple21 a b) e)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a b) e))) (sort (tuple2 (tuple2 a1 b1) e1)
  (t2tb3529 x))))

(declare-fun tb2t3529 (uni) (tuple21 (tuple21 a b) e))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a b) e)))
  (! (= (tb2t3529 (t2tb3529 i)) i) :pattern ((t2tb3529 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 b1) e1) j) (= (t2tb3529 (tb2t3529 j)) j)) :pattern (
  (t2tb3529 (tb2t3529 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a b))) (t (set e)) (x (tuple21 a b)) (y e))
  (= (mem (tuple2 (tuple2 a1 b1) e1)
  (Tuple2 (tuple2 a1 b1) e1 (t2tb13 x) (t2tb2955 y))
  (times e1 (tuple2 a1 b1) (t2tb11 s) (t2tb2947 t)))
  (and (mem3 x s) (mem36 y t)))))

(declare-fun t2tb4538 ((set (tuple21 (tuple21 a b) (tuple21 a d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) (tuple21 a d))))) (sort
  (set1 (tuple2 (tuple2 a1 b1) (tuple2 a1 d1))) (t2tb4538 x))))

(declare-fun tb2t4538 (uni) (set (tuple21 (tuple21 a b) (tuple21 a d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a b) (tuple21 a d)))))
  (! (= (tb2t4538 (t2tb4538 i)) i) :pattern ((t2tb4538 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 b1) (tuple2 a1 d1))) j)
     (= (t2tb4538 (tb2t4538 j)) j)) :pattern ((t2tb4538 (tb2t4538 j))) )))

(declare-fun t2tb4539 ((tuple21 (tuple21 a b) (tuple21 a d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a b) (tuple21 a d)))) (sort
  (tuple2 (tuple2 a1 b1) (tuple2 a1 d1)) (t2tb4539 x))))

(declare-fun tb2t4539 (uni) (tuple21 (tuple21 a b) (tuple21 a d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a b) (tuple21 a d))))
  (! (= (tb2t4539 (t2tb4539 i)) i) :pattern ((t2tb4539 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 b1) (tuple2 a1 d1)) j)
     (= (t2tb4539 (tb2t4539 j)) j)) :pattern ((t2tb4539 (tb2t4539 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (tuple21 a d))) (x (tuple21 a b))
  (y (tuple21 a d)))
  (= (mem (tuple2 (tuple2 a1 b1) (tuple2 a1 d1))
  (Tuple2 (tuple2 a1 b1) (tuple2 a1 d1) (t2tb13 x) (t2tb904 y))
  (times (tuple2 a1 d1) (tuple2 a1 b1) (t2tb11 s) (t2tb903 t)))
  (and (mem3 x s) (mem32 y t)))))

(declare-fun t2tb4540 ((set (tuple21 (tuple21 a b) (set (tuple21 b
  d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) (set (tuple21 b d)))))) (sort
  (set1 (tuple2 (tuple2 a1 b1) (set1 (tuple2 b1 d1)))) (t2tb4540 x))))

(declare-fun tb2t4540 (uni) (set (tuple21 (tuple21 a b) (set (tuple21 b
  d)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a b) (set (tuple21 b d))))))
  (! (= (tb2t4540 (t2tb4540 i)) i) :pattern ((t2tb4540 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 b1) (set1 (tuple2 b1 d1)))) j)
     (= (t2tb4540 (tb2t4540 j)) j)) :pattern ((t2tb4540 (tb2t4540 j))) )))

(declare-fun t2tb4541 ((tuple21 (tuple21 a b) (set (tuple21 b d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a b) (set (tuple21 b d))))) (sort
  (tuple2 (tuple2 a1 b1) (set1 (tuple2 b1 d1))) (t2tb4541 x))))

(declare-fun tb2t4541 (uni) (tuple21 (tuple21 a b) (set (tuple21 b d))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a b) (set (tuple21 b d)))))
  (! (= (tb2t4541 (t2tb4541 i)) i) :pattern ((t2tb4541 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 b1) (set1 (tuple2 b1 d1))) j)
     (= (t2tb4541 (tb2t4541 j)) j)) :pattern ((t2tb4541 (tb2t4541 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (set (tuple21 b d))))
  (x (tuple21 a b)) (y (set (tuple21 b d))))
  (= (mem (tuple2 (tuple2 a1 b1) (set1 (tuple2 b1 d1)))
  (Tuple2 (tuple2 a1 b1) (set1 (tuple2 b1 d1)) (t2tb13 x) (t2tb687 y))
  (times (set1 (tuple2 b1 d1)) (tuple2 a1 b1) (t2tb11 s) (t2tb906 t)))
  (and (mem3 x s) (mem33 y t)))))

(declare-fun t2tb4542 ((set (tuple21 (tuple21 a b) (tuple21 b d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) (tuple21 b d))))) (sort
  (set1 (tuple2 (tuple2 a1 b1) (tuple2 b1 d1))) (t2tb4542 x))))

(declare-fun tb2t4542 (uni) (set (tuple21 (tuple21 a b) (tuple21 b d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a b) (tuple21 b d)))))
  (! (= (tb2t4542 (t2tb4542 i)) i) :pattern ((t2tb4542 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 b1) (tuple2 b1 d1))) j)
     (= (t2tb4542 (tb2t4542 j)) j)) :pattern ((t2tb4542 (tb2t4542 j))) )))

(declare-fun t2tb4543 ((tuple21 (tuple21 a b) (tuple21 b d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a b) (tuple21 b d)))) (sort
  (tuple2 (tuple2 a1 b1) (tuple2 b1 d1)) (t2tb4543 x))))

(declare-fun tb2t4543 (uni) (tuple21 (tuple21 a b) (tuple21 b d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a b) (tuple21 b d))))
  (! (= (tb2t4543 (t2tb4543 i)) i) :pattern ((t2tb4543 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 b1) (tuple2 b1 d1)) j)
     (= (t2tb4543 (tb2t4543 j)) j)) :pattern ((t2tb4543 (tb2t4543 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (tuple21 b d))) (x (tuple21 a b))
  (y (tuple21 b d)))
  (= (mem (tuple2 (tuple2 a1 b1) (tuple2 b1 d1))
  (Tuple2 (tuple2 a1 b1) (tuple2 b1 d1) (t2tb13 x) (t2tb692 y))
  (times (tuple2 b1 d1) (tuple2 a1 b1) (t2tb11 s) (t2tb687 t)))
  (and (mem3 x s) (mem23 y t)))))

(declare-fun t2tb881 ((set (tuple21 (tuple21 a b) d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) d)))) (sort
  (set1 (tuple2 (tuple2 a1 b1) d1)) (t2tb881 x))))

(declare-fun tb2t881 (uni) (set (tuple21 (tuple21 a b) d)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a b) d))))
  (! (= (tb2t881 (t2tb881 i)) i) :pattern ((t2tb881 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 b1) d1)) j)
     (= (t2tb881 (tb2t881 j)) j)) :pattern ((t2tb881 (tb2t881 j))) )))

(declare-fun t2tb882 ((tuple21 (tuple21 a b) d)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a b) d))) (sort (tuple2 (tuple2 a1 b1) d1)
  (t2tb882 x))))

(declare-fun tb2t882 (uni) (tuple21 (tuple21 a b) d))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a b) d)))
  (! (= (tb2t882 (t2tb882 i)) i) :pattern ((t2tb882 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 b1) d1) j) (= (t2tb882 (tb2t882 j)) j)) :pattern (
  (t2tb882 (tb2t882 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a b))) (t (set d)) (x (tuple21 a b)) (y d))
  (= (mem (tuple2 (tuple2 a1 b1) d1)
  (Tuple2 (tuple2 a1 b1) d1 (t2tb13 x) (t2tb694 y))
  (times d1 (tuple2 a1 b1) (t2tb11 s) (t2tb690 t)))
  (and (mem3 x s) (mem20 y t)))))

(declare-fun t2tb4544 ((set (tuple21 (tuple21 a b) (tuple21 a (tuple21 b
  c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) (tuple21 a (tuple21 b c)))))) (sort
  (set1 (tuple2 (tuple2 a1 b1) (tuple2 a1 (tuple2 b1 c1)))) (t2tb4544 x))))

(declare-fun tb2t4544 (uni) (set (tuple21 (tuple21 a b) (tuple21 a (tuple21 b
  c)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a b) (tuple21 a (tuple21 b c))))))
  (! (= (tb2t4544 (t2tb4544 i)) i) :pattern ((t2tb4544 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 b1) (tuple2 a1 (tuple2 b1 c1)))) j)
     (= (t2tb4544 (tb2t4544 j)) j)) :pattern ((t2tb4544 (tb2t4544 j))) )))

(declare-fun t2tb4545 ((tuple21 (tuple21 a b) (tuple21 a (tuple21 b
  c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a b) (tuple21 a (tuple21 b c))))) (sort
  (tuple2 (tuple2 a1 b1) (tuple2 a1 (tuple2 b1 c1))) (t2tb4545 x))))

(declare-fun tb2t4545 (uni) (tuple21 (tuple21 a b) (tuple21 a (tuple21 b
  c))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a b) (tuple21 a (tuple21 b c)))))
  (! (= (tb2t4545 (t2tb4545 i)) i) :pattern ((t2tb4545 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 b1) (tuple2 a1 (tuple2 b1 c1))) j)
     (= (t2tb4545 (tb2t4545 j)) j)) :pattern ((t2tb4545 (tb2t4545 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (tuple21 a (tuple21 b c))))
  (x (tuple21 a b)) (y (tuple21 a (tuple21 b c))))
  (= (mem (tuple2 (tuple2 a1 b1) (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 (tuple2 a1 b1) (tuple2 a1 (tuple2 b1 c1)) (t2tb13 x) (t2tb260 y))
  (times (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 b1) (t2tb11 s) (t2tb261 t)))
  (and (mem3 x s) (mem14 y t)))))

(declare-fun t2tb4546 ((set (tuple21 (tuple21 a b) (set (tuple21 a
  c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) (set (tuple21 a c)))))) (sort
  (set1 (tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 c1)))) (t2tb4546 x))))

(declare-fun tb2t4546 (uni) (set (tuple21 (tuple21 a b) (set (tuple21 a
  c)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a b) (set (tuple21 a c))))))
  (! (= (tb2t4546 (t2tb4546 i)) i) :pattern ((t2tb4546 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 c1)))) j)
     (= (t2tb4546 (tb2t4546 j)) j)) :pattern ((t2tb4546 (tb2t4546 j))) )))

(declare-fun t2tb4547 ((tuple21 (tuple21 a b) (set (tuple21 a c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a b) (set (tuple21 a c))))) (sort
  (tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 c1))) (t2tb4547 x))))

(declare-fun tb2t4547 (uni) (tuple21 (tuple21 a b) (set (tuple21 a c))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a b) (set (tuple21 a c)))))
  (! (= (tb2t4547 (t2tb4547 i)) i) :pattern ((t2tb4547 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 c1))) j)
     (= (t2tb4547 (tb2t4547 j)) j)) :pattern ((t2tb4547 (tb2t4547 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (set (tuple21 a c))))
  (x (tuple21 a b)) (y (set (tuple21 a c))))
  (= (mem (tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 c1)))
  (Tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 c1)) (t2tb13 x) (t2tb129 y))
  (times (set1 (tuple2 a1 c1)) (tuple2 a1 b1) (t2tb11 s) (t2tb128 t)))
  (and (mem3 x s) (mem11 y t)))))

(declare-fun t2tb238 ((set (tuple21 (tuple21 a b) (tuple21 a c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) (tuple21 a c))))) (sort
  (set1 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1))) (t2tb238 x))))

(declare-fun tb2t238 (uni) (set (tuple21 (tuple21 a b) (tuple21 a c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a b) (tuple21 a c)))))
  (! (= (tb2t238 (t2tb238 i)) i) :pattern ((t2tb238 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1))) j)
     (= (t2tb238 (tb2t238 j)) j)) :pattern ((t2tb238 (tb2t238 j))) )))

(declare-fun t2tb239 ((tuple21 (tuple21 a b) (tuple21 a c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a b) (tuple21 a c)))) (sort
  (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) (t2tb239 x))))

(declare-fun tb2t239 (uni) (tuple21 (tuple21 a b) (tuple21 a c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a b) (tuple21 a c))))
  (! (= (tb2t239 (t2tb239 i)) i) :pattern ((t2tb239 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) j)
     (= (t2tb239 (tb2t239 j)) j)) :pattern ((t2tb239 (tb2t239 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (tuple21 a c))) (x (tuple21 a b))
  (y (tuple21 a c)))
  (= (mem (tuple2 (tuple2 a1 b1) (tuple2 a1 c1))
  (Tuple2 (tuple2 a1 b1) (tuple2 a1 c1) (t2tb13 x) (t2tb133 y))
  (times (tuple2 a1 c1) (tuple2 a1 b1) (t2tb11 s) (t2tb129 t)))
  (and (mem3 x s) (mem10 y t)))))

(declare-fun t2tb244 ((tuple21 (tuple21 a b) c)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a b) c))) (sort (tuple2 (tuple2 a1 b1) c1)
  (t2tb244 x))))

(declare-fun tb2t244 (uni) (tuple21 (tuple21 a b) c))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a b) c)))
  (! (= (tb2t244 (t2tb244 i)) i) :pattern ((t2tb244 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 b1) c1) j) (= (t2tb244 (tb2t244 j)) j)) :pattern (
  (t2tb244 (tb2t244 j))) )))

(declare-fun t2tb245 ((set (tuple21 (tuple21 a b) c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) c)))) (sort
  (set1 (tuple2 (tuple2 a1 b1) c1)) (t2tb245 x))))

(declare-fun tb2t245 (uni) (set (tuple21 (tuple21 a b) c)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a b) c))))
  (! (= (tb2t245 (t2tb245 i)) i) :pattern ((t2tb245 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 b1) c1)) j)
     (= (t2tb245 (tb2t245 j)) j)) :pattern ((t2tb245 (tb2t245 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a b))) (t (set c)) (x (tuple21 a b)) (y c))
  (= (mem (tuple2 (tuple2 a1 b1) c1)
  (Tuple2 (tuple2 a1 b1) c1 (t2tb13 x) (t2tb135 y))
  (times c1 (tuple2 a1 b1) (t2tb11 s) (t2tb132 t)))
  (and (mem3 x s) (mem7 y t)))))

(declare-fun t2tb23 ((set (tuple21 (tuple21 a b) (set (tuple21 a b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) (set (tuple21 a b)))))) (sort
  (set1 (tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 b1)))) (t2tb23 x))))

(declare-fun tb2t23 (uni) (set (tuple21 (tuple21 a b) (set (tuple21 a b)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a b) (set (tuple21 a b))))))
  (! (= (tb2t23 (t2tb23 i)) i) :pattern ((t2tb23 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 b1)))) j)
     (= (t2tb23 (tb2t23 j)) j)) :pattern ((t2tb23 (tb2t23 j))) )))

(declare-fun t2tb24 ((tuple21 (tuple21 a b) (set (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a b) (set (tuple21 a b))))) (sort
  (tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 b1))) (t2tb24 x))))

(declare-fun tb2t24 (uni) (tuple21 (tuple21 a b) (set (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a b) (set (tuple21 a b)))))
  (! (= (tb2t24 (t2tb24 i)) i) :pattern ((t2tb24 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 b1))) j)
     (= (t2tb24 (tb2t24 j)) j)) :pattern ((t2tb24 (tb2t24 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (set (tuple21 a b))))
  (x (tuple21 a b)) (y (set (tuple21 a b))))
  (= (mem (tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 b1)))
  (Tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 b1)) (t2tb13 x) (t2tb11 y))
  (times (set1 (tuple2 a1 b1)) (tuple2 a1 b1) (t2tb11 s) (t2tb10 t)))
  (and (mem3 x s) (mem4 y t)))))

(declare-fun t2tb25 ((set (tuple21 (tuple21 a b) (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) (tuple21 a b))))) (sort
  (set1 (tuple2 (tuple2 a1 b1) (tuple2 a1 b1))) (t2tb25 x))))

(declare-fun tb2t25 (uni) (set (tuple21 (tuple21 a b) (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a b) (tuple21 a b)))))
  (! (= (tb2t25 (t2tb25 i)) i) :pattern ((t2tb25 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 b1) (tuple2 a1 b1))) j)
     (= (t2tb25 (tb2t25 j)) j)) :pattern ((t2tb25 (tb2t25 j))) )))

(declare-fun t2tb26 ((tuple21 (tuple21 a b) (tuple21 a b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a b) (tuple21 a b)))) (sort
  (tuple2 (tuple2 a1 b1) (tuple2 a1 b1)) (t2tb26 x))))

(declare-fun tb2t26 (uni) (tuple21 (tuple21 a b) (tuple21 a b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a b) (tuple21 a b))))
  (! (= (tb2t26 (t2tb26 i)) i) :pattern ((t2tb26 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 b1) (tuple2 a1 b1)) j)
     (= (t2tb26 (tb2t26 j)) j)) :pattern ((t2tb26 (tb2t26 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (tuple21 a b))) (x (tuple21 a b))
  (y (tuple21 a b)))
  (= (mem (tuple2 (tuple2 a1 b1) (tuple2 a1 b1))
  (Tuple2 (tuple2 a1 b1) (tuple2 a1 b1) (t2tb13 x) (t2tb13 y))
  (times (tuple2 a1 b1) (tuple2 a1 b1) (t2tb11 s) (t2tb11 t)))
  (and (mem3 x s) (mem3 y t)))))

(declare-fun t2tb27 ((set (tuple21 (tuple21 a b) b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) b)))) (sort
  (set1 (tuple2 (tuple2 a1 b1) b1)) (t2tb27 x))))

(declare-fun tb2t27 (uni) (set (tuple21 (tuple21 a b) b)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a b) b))))
  (! (= (tb2t27 (t2tb27 i)) i) :pattern ((t2tb27 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 b1) b1)) j)
     (= (t2tb27 (tb2t27 j)) j)) :pattern ((t2tb27 (tb2t27 j))) )))

(declare-fun t2tb28 ((tuple21 (tuple21 a b) b)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a b) b))) (sort (tuple2 (tuple2 a1 b1) b1)
  (t2tb28 x))))

(declare-fun tb2t28 (uni) (tuple21 (tuple21 a b) b))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a b) b)))
  (! (= (tb2t28 (t2tb28 i)) i) :pattern ((t2tb28 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 b1) b1) j) (= (t2tb28 (tb2t28 j)) j)) :pattern (
  (t2tb28 (tb2t28 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a b))) (t (set b)) (x (tuple21 a b)) (y b))
  (= (mem (tuple2 (tuple2 a1 b1) b1)
  (Tuple2 (tuple2 a1 b1) b1 (t2tb13 x) (t2tb14 y))
  (times b1 (tuple2 a1 b1) (t2tb11 s) (t2tb12 t)))
  (and (mem3 x s) (mem2 y t)))))

(declare-fun t2tb29 ((set (tuple21 (tuple21 a b) a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) a)))) (sort
  (set1 (tuple2 (tuple2 a1 b1) a1)) (t2tb29 x))))

(declare-fun tb2t29 (uni) (set (tuple21 (tuple21 a b) a)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a b) a))))
  (! (= (tb2t29 (t2tb29 i)) i) :pattern ((t2tb29 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 b1) a1)) j)
     (= (t2tb29 (tb2t29 j)) j)) :pattern ((t2tb29 (tb2t29 j))) )))

(declare-fun t2tb30 ((tuple21 (tuple21 a b) a)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a b) a))) (sort (tuple2 (tuple2 a1 b1) a1)
  (t2tb30 x))))

(declare-fun tb2t30 (uni) (tuple21 (tuple21 a b) a))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a b) a)))
  (! (= (tb2t30 (t2tb30 i)) i) :pattern ((t2tb30 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 b1) a1) j) (= (t2tb30 (tb2t30 j)) j)) :pattern (
  (t2tb30 (tb2t30 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a b))) (t (set a)) (x (tuple21 a b)) (y a))
  (= (mem (tuple2 (tuple2 a1 b1) a1)
  (Tuple2 (tuple2 a1 b1) a1 (t2tb13 x) (t2tb2 y))
  (times a1 (tuple2 a1 b1) (t2tb11 s) (t2tb1 t)))
  (and (mem3 x s) (mem1 y t)))))

;; mem_times
  (assert
  (forall ((b2 ty))
  (forall ((s (set (tuple21 a b))) (t uni) (x (tuple21 a b)) (y uni))
  (= (mem (tuple2 (tuple2 a1 b1) b2) (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) y)
  (times b2 (tuple2 a1 b1) (t2tb11 s) t)) (and (mem3 x s) (mem b2 y t))))))

(declare-fun t2tb4548 ((set (tuple21 b (tuple21 (tuple21 b c) (tuple21 d
  e))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 b (tuple21 (tuple21 b c) (tuple21 d e)))))) (sort
  (set1 (tuple2 b1 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)))) (t2tb4548 x))))

(declare-fun tb2t4548 (uni) (set (tuple21 b (tuple21 (tuple21 b c) (tuple21 d
  e)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 b (tuple21 (tuple21 b c) (tuple21 d e))))))
  (! (= (tb2t4548 (t2tb4548 i)) i) :pattern ((t2tb4548 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 b1 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)))) j)
     (= (t2tb4548 (tb2t4548 j)) j)) :pattern ((t2tb4548 (tb2t4548 j))) )))

(declare-fun t2tb4549 ((tuple21 b (tuple21 (tuple21 b c) (tuple21 d
  e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 b (tuple21 (tuple21 b c) (tuple21 d e))))) (sort
  (tuple2 b1 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1))) (t2tb4549 x))))

(declare-fun tb2t4549 (uni) (tuple21 b (tuple21 (tuple21 b c) (tuple21 d
  e))))

;; BridgeL
  (assert
  (forall ((i (tuple21 b (tuple21 (tuple21 b c) (tuple21 d e)))))
  (! (= (tb2t4549 (t2tb4549 i)) i) :pattern ((t2tb4549 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 b1 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1))) j)
     (= (t2tb4549 (tb2t4549 j)) j)) :pattern ((t2tb4549 (tb2t4549 j))) )))

;; mem_times
  (assert
  (forall ((s (set b)) (t (set (tuple21 (tuple21 b c) (tuple21 d e)))) (x b)
  (y (tuple21 (tuple21 b c) (tuple21 d e))))
  (= (mem (tuple2 b1 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)))
  (Tuple2 b1 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (t2tb14 x) (t2tb4104 y))
  (times (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) b1 (t2tb12 s) (t2tb4102 t)))
  (and (mem2 x s) (mem49 y t)))))

(declare-fun t2tb4550 ((set (tuple21 b (tuple21 a (tuple21 d e))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 b (tuple21 a (tuple21 d e)))))) (sort
  (set1 (tuple2 b1 (tuple2 a1 (tuple2 d1 e1)))) (t2tb4550 x))))

(declare-fun tb2t4550 (uni) (set (tuple21 b (tuple21 a (tuple21 d e)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 b (tuple21 a (tuple21 d e))))))
  (! (= (tb2t4550 (t2tb4550 i)) i) :pattern ((t2tb4550 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 b1 (tuple2 a1 (tuple2 d1 e1)))) j)
     (= (t2tb4550 (tb2t4550 j)) j)) :pattern ((t2tb4550 (tb2t4550 j))) )))

(declare-fun t2tb4551 ((tuple21 b (tuple21 a (tuple21 d e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 b (tuple21 a (tuple21 d e))))) (sort
  (tuple2 b1 (tuple2 a1 (tuple2 d1 e1))) (t2tb4551 x))))

(declare-fun tb2t4551 (uni) (tuple21 b (tuple21 a (tuple21 d e))))

;; BridgeL
  (assert
  (forall ((i (tuple21 b (tuple21 a (tuple21 d e)))))
  (! (= (tb2t4551 (t2tb4551 i)) i) :pattern ((t2tb4551 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 b1 (tuple2 a1 (tuple2 d1 e1))) j)
     (= (t2tb4551 (tb2t4551 j)) j)) :pattern ((t2tb4551 (tb2t4551 j))) )))

;; mem_times
  (assert
  (forall ((s (set b)) (t (set (tuple21 a (tuple21 d e)))) (x b)
  (y (tuple21 a (tuple21 d e))))
  (= (mem (tuple2 b1 (tuple2 a1 (tuple2 d1 e1)))
  (Tuple2 b1 (tuple2 a1 (tuple2 d1 e1)) (t2tb14 x) (t2tb4105 y))
  (times (tuple2 a1 (tuple2 d1 e1)) b1 (t2tb12 s) (t2tb4103 t)))
  (and (mem2 x s) (mem48 y t)))))

(declare-fun t2tb4552 ((set (tuple21 b (set (tuple21 c e))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 b (set (tuple21 c e)))))) (sort
  (set1 (tuple2 b1 (set1 (tuple2 c1 e1)))) (t2tb4552 x))))

(declare-fun tb2t4552 (uni) (set (tuple21 b (set (tuple21 c e)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 b (set (tuple21 c e))))))
  (! (= (tb2t4552 (t2tb4552 i)) i) :pattern ((t2tb4552 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 b1 (set1 (tuple2 c1 e1)))) j)
     (= (t2tb4552 (tb2t4552 j)) j)) :pattern ((t2tb4552 (tb2t4552 j))) )))

(declare-fun t2tb4553 ((tuple21 b (set (tuple21 c e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 b (set (tuple21 c e))))) (sort
  (tuple2 b1 (set1 (tuple2 c1 e1))) (t2tb4553 x))))

(declare-fun tb2t4553 (uni) (tuple21 b (set (tuple21 c e))))

;; BridgeL
  (assert
  (forall ((i (tuple21 b (set (tuple21 c e)))))
  (! (= (tb2t4553 (t2tb4553 i)) i) :pattern ((t2tb4553 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 b1 (set1 (tuple2 c1 e1))) j)
     (= (t2tb4553 (tb2t4553 j)) j)) :pattern ((t2tb4553 (tb2t4553 j))) )))

;; mem_times
  (assert
  (forall ((s (set b)) (t (set (set (tuple21 c e)))) (x b) (y (set (tuple21 c
  e))))
  (= (mem (tuple2 b1 (set1 (tuple2 c1 e1)))
  (Tuple2 b1 (set1 (tuple2 c1 e1)) (t2tb14 x) (t2tb3478 y))
  (times (set1 (tuple2 c1 e1)) b1 (t2tb12 s) (t2tb3854 t)))
  (and (mem2 x s) (mem47 y t)))))

(declare-fun t2tb4554 ((set (tuple21 b (tuple21 c e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 b (tuple21 c e))))) (sort
  (set1 (tuple2 b1 (tuple2 c1 e1))) (t2tb4554 x))))

(declare-fun tb2t4554 (uni) (set (tuple21 b (tuple21 c e))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 b (tuple21 c e)))))
  (! (= (tb2t4554 (t2tb4554 i)) i) :pattern ((t2tb4554 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 b1 (tuple2 c1 e1))) j)
     (= (t2tb4554 (tb2t4554 j)) j)) :pattern ((t2tb4554 (tb2t4554 j))) )))

(declare-fun t2tb4555 ((tuple21 b (tuple21 c e))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 b (tuple21 c e)))) (sort (tuple2 b1 (tuple2 c1 e1))
  (t2tb4555 x))))

(declare-fun tb2t4555 (uni) (tuple21 b (tuple21 c e)))

;; BridgeL
  (assert
  (forall ((i (tuple21 b (tuple21 c e))))
  (! (= (tb2t4555 (t2tb4555 i)) i) :pattern ((t2tb4555 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 b1 (tuple2 c1 e1)) j) (= (t2tb4555 (tb2t4555 j)) j)) :pattern (
  (t2tb4555 (tb2t4555 j))) )))

;; mem_times
  (assert
  (forall ((s (set b)) (t (set (tuple21 c e))) (x b) (y (tuple21 c e)))
  (= (mem (tuple2 b1 (tuple2 c1 e1))
  (Tuple2 b1 (tuple2 c1 e1) (t2tb14 x) (t2tb3479 y))
  (times (tuple2 c1 e1) b1 (t2tb12 s) (t2tb3478 t)))
  (and (mem2 x s) (mem46 y t)))))

(declare-fun t2tb3536 ((set (tuple21 b (tuple21 a e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 b (tuple21 a e))))) (sort
  (set1 (tuple2 b1 (tuple2 a1 e1))) (t2tb3536 x))))

(declare-fun tb2t3536 (uni) (set (tuple21 b (tuple21 a e))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 b (tuple21 a e)))))
  (! (= (tb2t3536 (t2tb3536 i)) i) :pattern ((t2tb3536 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 b1 (tuple2 a1 e1))) j)
     (= (t2tb3536 (tb2t3536 j)) j)) :pattern ((t2tb3536 (tb2t3536 j))) )))

(declare-fun t2tb3537 ((tuple21 b (tuple21 a e))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 b (tuple21 a e)))) (sort (tuple2 b1 (tuple2 a1 e1))
  (t2tb3537 x))))

(declare-fun tb2t3537 (uni) (tuple21 b (tuple21 a e)))

;; BridgeL
  (assert
  (forall ((i (tuple21 b (tuple21 a e))))
  (! (= (tb2t3537 (t2tb3537 i)) i) :pattern ((t2tb3537 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 b1 (tuple2 a1 e1)) j) (= (t2tb3537 (tb2t3537 j)) j)) :pattern (
  (t2tb3537 (tb2t3537 j))) )))

;; mem_times
  (assert
  (forall ((s (set b)) (t (set (tuple21 a e))) (x b) (y (tuple21 a e)))
  (= (mem (tuple2 b1 (tuple2 a1 e1))
  (Tuple2 b1 (tuple2 a1 e1) (t2tb14 x) (t2tb2949 y))
  (times (tuple2 a1 e1) b1 (t2tb12 s) (t2tb2943 t)))
  (and (mem2 x s) (mem44 y t)))))

(declare-fun t2tb2940 ((set (tuple21 b e))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 b e)))) (sort (set1 (tuple2 b1 e1))
  (t2tb2940 x))))

(declare-fun tb2t2940 (uni) (set (tuple21 b e)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 b e))))
  (! (= (tb2t2940 (t2tb2940 i)) i) :pattern ((t2tb2940 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 b1 e1)) j) (= (t2tb2940 (tb2t2940 j)) j)) :pattern (
  (t2tb2940 (tb2t2940 j))) )))

(declare-fun t2tb2953 ((tuple21 b e)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 b e))) (sort (tuple2 b1 e1) (t2tb2953 x))))

(declare-fun tb2t2953 (uni) (tuple21 b e))

;; BridgeL
  (assert
  (forall ((i (tuple21 b e)))
  (! (= (tb2t2953 (t2tb2953 i)) i) :pattern ((t2tb2953 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 b1 e1) j) (= (t2tb2953 (tb2t2953 j)) j)) :pattern (
  (t2tb2953 (tb2t2953 j))) )))

;; mem_times
  (assert
  (forall ((s (set b)) (t (set e)) (x b) (y e))
  (= (mem (tuple2 b1 e1) (Tuple2 b1 e1 (t2tb14 x) (t2tb2955 y))
  (times e1 b1 (t2tb12 s) (t2tb2947 t))) (and (mem2 x s) (mem36 y t)))))

(declare-fun t2tb4556 ((set (tuple21 b (tuple21 a d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 b (tuple21 a d))))) (sort
  (set1 (tuple2 b1 (tuple2 a1 d1))) (t2tb4556 x))))

(declare-fun tb2t4556 (uni) (set (tuple21 b (tuple21 a d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 b (tuple21 a d)))))
  (! (= (tb2t4556 (t2tb4556 i)) i) :pattern ((t2tb4556 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 b1 (tuple2 a1 d1))) j)
     (= (t2tb4556 (tb2t4556 j)) j)) :pattern ((t2tb4556 (tb2t4556 j))) )))

(declare-fun t2tb4557 ((tuple21 b (tuple21 a d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 b (tuple21 a d)))) (sort (tuple2 b1 (tuple2 a1 d1))
  (t2tb4557 x))))

(declare-fun tb2t4557 (uni) (tuple21 b (tuple21 a d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 b (tuple21 a d))))
  (! (= (tb2t4557 (t2tb4557 i)) i) :pattern ((t2tb4557 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 b1 (tuple2 a1 d1)) j) (= (t2tb4557 (tb2t4557 j)) j)) :pattern (
  (t2tb4557 (tb2t4557 j))) )))

;; mem_times
  (assert
  (forall ((s (set b)) (t (set (tuple21 a d))) (x b) (y (tuple21 a d)))
  (= (mem (tuple2 b1 (tuple2 a1 d1))
  (Tuple2 b1 (tuple2 a1 d1) (t2tb14 x) (t2tb904 y))
  (times (tuple2 a1 d1) b1 (t2tb12 s) (t2tb903 t)))
  (and (mem2 x s) (mem32 y t)))))

(declare-fun t2tb4558 ((set (tuple21 b (set (tuple21 b d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 b (set (tuple21 b d)))))) (sort
  (set1 (tuple2 b1 (set1 (tuple2 b1 d1)))) (t2tb4558 x))))

(declare-fun tb2t4558 (uni) (set (tuple21 b (set (tuple21 b d)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 b (set (tuple21 b d))))))
  (! (= (tb2t4558 (t2tb4558 i)) i) :pattern ((t2tb4558 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 b1 (set1 (tuple2 b1 d1)))) j)
     (= (t2tb4558 (tb2t4558 j)) j)) :pattern ((t2tb4558 (tb2t4558 j))) )))

(declare-fun t2tb4559 ((tuple21 b (set (tuple21 b d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 b (set (tuple21 b d))))) (sort
  (tuple2 b1 (set1 (tuple2 b1 d1))) (t2tb4559 x))))

(declare-fun tb2t4559 (uni) (tuple21 b (set (tuple21 b d))))

;; BridgeL
  (assert
  (forall ((i (tuple21 b (set (tuple21 b d)))))
  (! (= (tb2t4559 (t2tb4559 i)) i) :pattern ((t2tb4559 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 b1 (set1 (tuple2 b1 d1))) j)
     (= (t2tb4559 (tb2t4559 j)) j)) :pattern ((t2tb4559 (tb2t4559 j))) )))

;; mem_times
  (assert
  (forall ((s (set b)) (t (set (set (tuple21 b d)))) (x b) (y (set (tuple21 b
  d))))
  (= (mem (tuple2 b1 (set1 (tuple2 b1 d1)))
  (Tuple2 b1 (set1 (tuple2 b1 d1)) (t2tb14 x) (t2tb687 y))
  (times (set1 (tuple2 b1 d1)) b1 (t2tb12 s) (t2tb906 t)))
  (and (mem2 x s) (mem33 y t)))))

(declare-fun t2tb888 ((tuple21 b (tuple21 b d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 b (tuple21 b d)))) (sort (tuple2 b1 (tuple2 b1 d1))
  (t2tb888 x))))

(declare-fun tb2t888 (uni) (tuple21 b (tuple21 b d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 b (tuple21 b d))))
  (! (= (tb2t888 (t2tb888 i)) i) :pattern ((t2tb888 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 b1 (tuple2 b1 d1)) j) (= (t2tb888 (tb2t888 j)) j)) :pattern (
  (t2tb888 (tb2t888 j))) )))

(declare-fun t2tb4560 ((set (tuple21 b (tuple21 b d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 b (tuple21 b d))))) (sort
  (set1 (tuple2 b1 (tuple2 b1 d1))) (t2tb4560 x))))

(declare-fun tb2t4560 (uni) (set (tuple21 b (tuple21 b d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 b (tuple21 b d)))))
  (! (= (tb2t4560 (t2tb4560 i)) i) :pattern ((t2tb4560 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 b1 (tuple2 b1 d1))) j)
     (= (t2tb4560 (tb2t4560 j)) j)) :pattern ((t2tb4560 (tb2t4560 j))) )))

;; mem_times
  (assert
  (forall ((s (set b)) (t (set (tuple21 b d))) (x b) (y (tuple21 b d)))
  (= (mem (tuple2 b1 (tuple2 b1 d1))
  (Tuple2 b1 (tuple2 b1 d1) (t2tb14 x) (t2tb692 y))
  (times (tuple2 b1 d1) b1 (t2tb12 s) (t2tb687 t)))
  (and (mem2 x s) (mem23 y t)))))

;; mem_times
  (assert
  (forall ((s (set b)) (t (set d)) (x b) (y d))
  (= (mem23 (tb2t692 (Tuple2 b1 d1 (t2tb14 x) (t2tb694 y)))
  (tb2t687 (times d1 b1 (t2tb12 s) (t2tb690 t))))
  (and (mem2 x s) (mem20 y t)))))

(declare-fun t2tb4561 ((set (tuple21 b (tuple21 a (tuple21 b c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 b (tuple21 a (tuple21 b c)))))) (sort
  (set1 (tuple2 b1 (tuple2 a1 (tuple2 b1 c1)))) (t2tb4561 x))))

(declare-fun tb2t4561 (uni) (set (tuple21 b (tuple21 a (tuple21 b c)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 b (tuple21 a (tuple21 b c))))))
  (! (= (tb2t4561 (t2tb4561 i)) i) :pattern ((t2tb4561 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 b1 (tuple2 a1 (tuple2 b1 c1)))) j)
     (= (t2tb4561 (tb2t4561 j)) j)) :pattern ((t2tb4561 (tb2t4561 j))) )))

(declare-fun t2tb4562 ((tuple21 b (tuple21 a (tuple21 b c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 b (tuple21 a (tuple21 b c))))) (sort
  (tuple2 b1 (tuple2 a1 (tuple2 b1 c1))) (t2tb4562 x))))

(declare-fun tb2t4562 (uni) (tuple21 b (tuple21 a (tuple21 b c))))

;; BridgeL
  (assert
  (forall ((i (tuple21 b (tuple21 a (tuple21 b c)))))
  (! (= (tb2t4562 (t2tb4562 i)) i) :pattern ((t2tb4562 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 b1 (tuple2 a1 (tuple2 b1 c1))) j)
     (= (t2tb4562 (tb2t4562 j)) j)) :pattern ((t2tb4562 (tb2t4562 j))) )))

;; mem_times
  (assert
  (forall ((s (set b)) (t (set (tuple21 a (tuple21 b c)))) (x b)
  (y (tuple21 a (tuple21 b c))))
  (= (mem (tuple2 b1 (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 b1 (tuple2 a1 (tuple2 b1 c1)) (t2tb14 x) (t2tb260 y))
  (times (tuple2 a1 (tuple2 b1 c1)) b1 (t2tb12 s) (t2tb261 t)))
  (and (mem2 x s) (mem14 y t)))))

(declare-fun t2tb4563 ((tuple21 b (set (tuple21 a c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 b (set (tuple21 a c))))) (sort
  (tuple2 b1 (set1 (tuple2 a1 c1))) (t2tb4563 x))))

(declare-fun tb2t4563 (uni) (tuple21 b (set (tuple21 a c))))

;; BridgeL
  (assert
  (forall ((i (tuple21 b (set (tuple21 a c)))))
  (! (= (tb2t4563 (t2tb4563 i)) i) :pattern ((t2tb4563 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 b1 (set1 (tuple2 a1 c1))) j)
     (= (t2tb4563 (tb2t4563 j)) j)) :pattern ((t2tb4563 (tb2t4563 j))) )))

(declare-fun t2tb4564 ((set (tuple21 b (set (tuple21 a c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 b (set (tuple21 a c)))))) (sort
  (set1 (tuple2 b1 (set1 (tuple2 a1 c1)))) (t2tb4564 x))))

(declare-fun tb2t4564 (uni) (set (tuple21 b (set (tuple21 a c)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 b (set (tuple21 a c))))))
  (! (= (tb2t4564 (t2tb4564 i)) i) :pattern ((t2tb4564 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 b1 (set1 (tuple2 a1 c1)))) j)
     (= (t2tb4564 (tb2t4564 j)) j)) :pattern ((t2tb4564 (tb2t4564 j))) )))

;; mem_times
  (assert
  (forall ((s (set b)) (t (set (set (tuple21 a c)))) (x b) (y (set (tuple21 a
  c))))
  (= (mem (tuple2 b1 (set1 (tuple2 a1 c1)))
  (Tuple2 b1 (set1 (tuple2 a1 c1)) (t2tb14 x) (t2tb129 y))
  (times (set1 (tuple2 a1 c1)) b1 (t2tb12 s) (t2tb128 t)))
  (and (mem2 x s) (mem11 y t)))))

(declare-fun t2tb248 ((set (tuple21 b (tuple21 a c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 b (tuple21 a c))))) (sort
  (set1 (tuple2 b1 (tuple2 a1 c1))) (t2tb248 x))))

(declare-fun tb2t248 (uni) (set (tuple21 b (tuple21 a c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 b (tuple21 a c)))))
  (! (= (tb2t248 (t2tb248 i)) i) :pattern ((t2tb248 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 b1 (tuple2 a1 c1))) j)
     (= (t2tb248 (tb2t248 j)) j)) :pattern ((t2tb248 (tb2t248 j))) )))

(declare-fun t2tb249 ((tuple21 b (tuple21 a c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 b (tuple21 a c)))) (sort (tuple2 b1 (tuple2 a1 c1))
  (t2tb249 x))))

(declare-fun tb2t249 (uni) (tuple21 b (tuple21 a c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 b (tuple21 a c))))
  (! (= (tb2t249 (t2tb249 i)) i) :pattern ((t2tb249 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 b1 (tuple2 a1 c1)) j) (= (t2tb249 (tb2t249 j)) j)) :pattern (
  (t2tb249 (tb2t249 j))) )))

;; mem_times
  (assert
  (forall ((s (set b)) (t (set (tuple21 a c))) (x b) (y (tuple21 a c)))
  (= (mem (tuple2 b1 (tuple2 a1 c1))
  (Tuple2 b1 (tuple2 a1 c1) (t2tb14 x) (t2tb133 y))
  (times (tuple2 a1 c1) b1 (t2tb12 s) (t2tb129 t)))
  (and (mem2 x s) (mem10 y t)))))

;; mem_times
  (assert
  (forall ((s (set b)) (t (set c)) (x b) (y c))
  (= (mem (tuple2 b1 c1) (Tuple2 b1 c1 (t2tb14 x) (t2tb135 y))
  (times c1 b1 (t2tb12 s) (t2tb132 t))) (and (mem2 x s) (mem7 y t)))))

(declare-fun t2tb31 ((set (tuple21 b (set (tuple21 a b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 b (set (tuple21 a b)))))) (sort
  (set1 (tuple2 b1 (set1 (tuple2 a1 b1)))) (t2tb31 x))))

(declare-fun tb2t31 (uni) (set (tuple21 b (set (tuple21 a b)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 b (set (tuple21 a b))))))
  (! (= (tb2t31 (t2tb31 i)) i) :pattern ((t2tb31 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 b1 (set1 (tuple2 a1 b1)))) j)
     (= (t2tb31 (tb2t31 j)) j)) :pattern ((t2tb31 (tb2t31 j))) )))

(declare-fun t2tb32 ((tuple21 b (set (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 b (set (tuple21 a b))))) (sort
  (tuple2 b1 (set1 (tuple2 a1 b1))) (t2tb32 x))))

(declare-fun tb2t32 (uni) (tuple21 b (set (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (tuple21 b (set (tuple21 a b)))))
  (! (= (tb2t32 (t2tb32 i)) i) :pattern ((t2tb32 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 b1 (set1 (tuple2 a1 b1))) j)
     (= (t2tb32 (tb2t32 j)) j)) :pattern ((t2tb32 (tb2t32 j))) )))

;; mem_times
  (assert
  (forall ((s (set b)) (t (set (set (tuple21 a b)))) (x b) (y (set (tuple21 a
  b))))
  (= (mem (tuple2 b1 (set1 (tuple2 a1 b1)))
  (Tuple2 b1 (set1 (tuple2 a1 b1)) (t2tb14 x) (t2tb11 y))
  (times (set1 (tuple2 a1 b1)) b1 (t2tb12 s) (t2tb10 t)))
  (and (mem2 x s) (mem4 y t)))))

(declare-fun t2tb33 ((tuple21 b (tuple21 a b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 b (tuple21 a b)))) (sort (tuple2 b1 (tuple2 a1 b1))
  (t2tb33 x))))

(declare-fun tb2t33 (uni) (tuple21 b (tuple21 a b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 b (tuple21 a b))))
  (! (= (tb2t33 (t2tb33 i)) i) :pattern ((t2tb33 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 b1 (tuple2 a1 b1)) j) (= (t2tb33 (tb2t33 j)) j)) :pattern (
  (t2tb33 (tb2t33 j))) )))

(declare-fun t2tb34 ((set (tuple21 b (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 b (tuple21 a b))))) (sort
  (set1 (tuple2 b1 (tuple2 a1 b1))) (t2tb34 x))))

(declare-fun tb2t34 (uni) (set (tuple21 b (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 b (tuple21 a b)))))
  (! (= (tb2t34 (t2tb34 i)) i) :pattern ((t2tb34 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 b1 (tuple2 a1 b1))) j)
     (= (t2tb34 (tb2t34 j)) j)) :pattern ((t2tb34 (tb2t34 j))) )))

;; mem_times
  (assert
  (forall ((s (set b)) (t (set (tuple21 a b))) (x b) (y (tuple21 a b)))
  (= (mem (tuple2 b1 (tuple2 a1 b1))
  (Tuple2 b1 (tuple2 a1 b1) (t2tb14 x) (t2tb13 y))
  (times (tuple2 a1 b1) b1 (t2tb12 s) (t2tb11 t)))
  (and (mem2 x s) (mem3 y t)))))

(declare-fun t2tb35 ((set (tuple21 b b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 b b)))) (sort (set1 (tuple2 b1 b1)) (t2tb35 x))))

(declare-fun tb2t35 (uni) (set (tuple21 b b)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 b b))))
  (! (= (tb2t35 (t2tb35 i)) i) :pattern ((t2tb35 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 b1 b1)) j) (= (t2tb35 (tb2t35 j)) j)) :pattern (
  (t2tb35 (tb2t35 j))) )))

(declare-fun t2tb36 ((tuple21 b b)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 b b))) (sort (tuple2 b1 b1) (t2tb36 x))))

(declare-fun tb2t36 (uni) (tuple21 b b))

;; BridgeL
  (assert
  (forall ((i (tuple21 b b)))
  (! (= (tb2t36 (t2tb36 i)) i) :pattern ((t2tb36 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 b1 b1) j) (= (t2tb36 (tb2t36 j)) j)) :pattern (
  (t2tb36 (tb2t36 j))) )))

;; mem_times
  (assert
  (forall ((s (set b)) (t (set b)) (x b) (y b))
  (= (mem (tuple2 b1 b1) (Tuple2 b1 b1 (t2tb14 x) (t2tb14 y))
  (times b1 b1 (t2tb12 s) (t2tb12 t))) (and (mem2 x s) (mem2 y t)))))

(declare-fun t2tb37 ((set (tuple21 b a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 b a)))) (sort (set1 (tuple2 b1 a1)) (t2tb37 x))))

(declare-fun tb2t37 (uni) (set (tuple21 b a)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 b a))))
  (! (= (tb2t37 (t2tb37 i)) i) :pattern ((t2tb37 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 b1 a1)) j) (= (t2tb37 (tb2t37 j)) j)) :pattern (
  (t2tb37 (tb2t37 j))) )))

(declare-fun t2tb38 ((tuple21 b a)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 b a))) (sort (tuple2 b1 a1) (t2tb38 x))))

(declare-fun tb2t38 (uni) (tuple21 b a))

;; BridgeL
  (assert
  (forall ((i (tuple21 b a)))
  (! (= (tb2t38 (t2tb38 i)) i) :pattern ((t2tb38 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 b1 a1) j) (= (t2tb38 (tb2t38 j)) j)) :pattern (
  (t2tb38 (tb2t38 j))) )))

;; mem_times
  (assert
  (forall ((s (set b)) (t (set a)) (x b) (y a))
  (= (mem (tuple2 b1 a1) (Tuple2 b1 a1 (t2tb14 x) (t2tb2 y))
  (times a1 b1 (t2tb12 s) (t2tb1 t))) (and (mem2 x s) (mem1 y t)))))

;; mem_times
  (assert
  (forall ((b2 ty))
  (forall ((s (set b)) (t uni) (x b) (y uni))
  (= (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) y)
  (times b2 b1 (t2tb12 s) t)) (and (mem2 x s) (mem b2 y t))))))

(declare-fun t2tb4565 ((set (tuple21 a (tuple21 (tuple21 b c) (tuple21 d
  e))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (tuple21 (tuple21 b c) (tuple21 d e)))))) (sort
  (set1 (tuple2 a1 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)))) (t2tb4565 x))))

(declare-fun tb2t4565 (uni) (set (tuple21 a (tuple21 (tuple21 b c) (tuple21 d
  e)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (tuple21 (tuple21 b c) (tuple21 d e))))))
  (! (= (tb2t4565 (t2tb4565 i)) i) :pattern ((t2tb4565 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)))) j)
     (= (t2tb4565 (tb2t4565 j)) j)) :pattern ((t2tb4565 (tb2t4565 j))) )))

(declare-fun t2tb4566 ((tuple21 a (tuple21 (tuple21 b c) (tuple21 d
  e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (tuple21 (tuple21 b c) (tuple21 d e))))) (sort
  (tuple2 a1 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1))) (t2tb4566 x))))

(declare-fun tb2t4566 (uni) (tuple21 a (tuple21 (tuple21 b c) (tuple21 d
  e))))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (tuple21 (tuple21 b c) (tuple21 d e)))))
  (! (= (tb2t4566 (t2tb4566 i)) i) :pattern ((t2tb4566 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1))) j)
     (= (t2tb4566 (tb2t4566 j)) j)) :pattern ((t2tb4566 (tb2t4566 j))) )))

;; mem_times
  (assert
  (forall ((s (set a)) (t (set (tuple21 (tuple21 b c) (tuple21 d e)))) (x a)
  (y (tuple21 (tuple21 b c) (tuple21 d e))))
  (= (mem (tuple2 a1 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)))
  (Tuple2 a1 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (t2tb2 x) (t2tb4104 y))
  (times (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) a1 (t2tb1 s) (t2tb4102 t)))
  (and (mem1 x s) (mem49 y t)))))

(declare-fun t2tb4567 ((set (tuple21 a (tuple21 a (tuple21 d e))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (tuple21 a (tuple21 d e)))))) (sort
  (set1 (tuple2 a1 (tuple2 a1 (tuple2 d1 e1)))) (t2tb4567 x))))

(declare-fun tb2t4567 (uni) (set (tuple21 a (tuple21 a (tuple21 d e)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (tuple21 a (tuple21 d e))))))
  (! (= (tb2t4567 (t2tb4567 i)) i) :pattern ((t2tb4567 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (tuple2 a1 (tuple2 d1 e1)))) j)
     (= (t2tb4567 (tb2t4567 j)) j)) :pattern ((t2tb4567 (tb2t4567 j))) )))

(declare-fun t2tb4568 ((tuple21 a (tuple21 a (tuple21 d e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (tuple21 a (tuple21 d e))))) (sort
  (tuple2 a1 (tuple2 a1 (tuple2 d1 e1))) (t2tb4568 x))))

(declare-fun tb2t4568 (uni) (tuple21 a (tuple21 a (tuple21 d e))))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (tuple21 a (tuple21 d e)))))
  (! (= (tb2t4568 (t2tb4568 i)) i) :pattern ((t2tb4568 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (tuple2 a1 (tuple2 d1 e1))) j)
     (= (t2tb4568 (tb2t4568 j)) j)) :pattern ((t2tb4568 (tb2t4568 j))) )))

;; mem_times
  (assert
  (forall ((s (set a)) (t (set (tuple21 a (tuple21 d e)))) (x a)
  (y (tuple21 a (tuple21 d e))))
  (= (mem (tuple2 a1 (tuple2 a1 (tuple2 d1 e1)))
  (Tuple2 a1 (tuple2 a1 (tuple2 d1 e1)) (t2tb2 x) (t2tb4105 y))
  (times (tuple2 a1 (tuple2 d1 e1)) a1 (t2tb1 s) (t2tb4103 t)))
  (and (mem1 x s) (mem48 y t)))))

;; mem_times
  (assert
  (forall ((s (set a)) (t (set (tuple21 d e))) (x a) (y (tuple21 d e)))
  (= (mem48 (tb2t4105 (Tuple2 a1 (tuple2 d1 e1) (t2tb2 x) (t2tb3457 y)))
  (tb2t4103 (times (tuple2 d1 e1) a1 (t2tb1 s) (t2tb3456 t))))
  (and (mem1 x s) (mem (tuple2 d1 e1) (t2tb3457 y) (t2tb3456 t))))))

(declare-fun t2tb4569 ((set (tuple21 a (set (tuple21 c e))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (set (tuple21 c e)))))) (sort
  (set1 (tuple2 a1 (set1 (tuple2 c1 e1)))) (t2tb4569 x))))

(declare-fun tb2t4569 (uni) (set (tuple21 a (set (tuple21 c e)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (set (tuple21 c e))))))
  (! (= (tb2t4569 (t2tb4569 i)) i) :pattern ((t2tb4569 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (set1 (tuple2 c1 e1)))) j)
     (= (t2tb4569 (tb2t4569 j)) j)) :pattern ((t2tb4569 (tb2t4569 j))) )))

(declare-fun t2tb4570 ((tuple21 a (set (tuple21 c e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (set (tuple21 c e))))) (sort
  (tuple2 a1 (set1 (tuple2 c1 e1))) (t2tb4570 x))))

(declare-fun tb2t4570 (uni) (tuple21 a (set (tuple21 c e))))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (set (tuple21 c e)))))
  (! (= (tb2t4570 (t2tb4570 i)) i) :pattern ((t2tb4570 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (set1 (tuple2 c1 e1))) j)
     (= (t2tb4570 (tb2t4570 j)) j)) :pattern ((t2tb4570 (tb2t4570 j))) )))

;; mem_times
  (assert
  (forall ((s (set a)) (t (set (set (tuple21 c e)))) (x a) (y (set (tuple21 c
  e))))
  (= (mem (tuple2 a1 (set1 (tuple2 c1 e1)))
  (Tuple2 a1 (set1 (tuple2 c1 e1)) (t2tb2 x) (t2tb3478 y))
  (times (set1 (tuple2 c1 e1)) a1 (t2tb1 s) (t2tb3854 t)))
  (and (mem1 x s) (mem47 y t)))))

(declare-fun t2tb4571 ((set (tuple21 a (tuple21 c e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (tuple21 c e))))) (sort
  (set1 (tuple2 a1 (tuple2 c1 e1))) (t2tb4571 x))))

(declare-fun tb2t4571 (uni) (set (tuple21 a (tuple21 c e))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (tuple21 c e)))))
  (! (= (tb2t4571 (t2tb4571 i)) i) :pattern ((t2tb4571 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (tuple2 c1 e1))) j)
     (= (t2tb4571 (tb2t4571 j)) j)) :pattern ((t2tb4571 (tb2t4571 j))) )))

(declare-fun t2tb4572 ((tuple21 a (tuple21 c e))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (tuple21 c e)))) (sort (tuple2 a1 (tuple2 c1 e1))
  (t2tb4572 x))))

(declare-fun tb2t4572 (uni) (tuple21 a (tuple21 c e)))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (tuple21 c e))))
  (! (= (tb2t4572 (t2tb4572 i)) i) :pattern ((t2tb4572 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (tuple2 c1 e1)) j) (= (t2tb4572 (tb2t4572 j)) j)) :pattern (
  (t2tb4572 (tb2t4572 j))) )))

;; mem_times
  (assert
  (forall ((s (set a)) (t (set (tuple21 c e))) (x a) (y (tuple21 c e)))
  (= (mem (tuple2 a1 (tuple2 c1 e1))
  (Tuple2 a1 (tuple2 c1 e1) (t2tb2 x) (t2tb3479 y))
  (times (tuple2 c1 e1) a1 (t2tb1 s) (t2tb3478 t)))
  (and (mem1 x s) (mem46 y t)))))

(declare-fun t2tb3558 ((set (tuple21 a (tuple21 a e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (tuple21 a e))))) (sort
  (set1 (tuple2 a1 (tuple2 a1 e1))) (t2tb3558 x))))

(declare-fun tb2t3558 (uni) (set (tuple21 a (tuple21 a e))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (tuple21 a e)))))
  (! (= (tb2t3558 (t2tb3558 i)) i) :pattern ((t2tb3558 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (tuple2 a1 e1))) j)
     (= (t2tb3558 (tb2t3558 j)) j)) :pattern ((t2tb3558 (tb2t3558 j))) )))

(declare-fun t2tb3559 ((tuple21 a (tuple21 a e))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (tuple21 a e)))) (sort (tuple2 a1 (tuple2 a1 e1))
  (t2tb3559 x))))

(declare-fun tb2t3559 (uni) (tuple21 a (tuple21 a e)))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (tuple21 a e))))
  (! (= (tb2t3559 (t2tb3559 i)) i) :pattern ((t2tb3559 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (tuple2 a1 e1)) j) (= (t2tb3559 (tb2t3559 j)) j)) :pattern (
  (t2tb3559 (tb2t3559 j))) )))

;; mem_times
  (assert
  (forall ((s (set a)) (t (set (tuple21 a e))) (x a) (y (tuple21 a e)))
  (= (mem (tuple2 a1 (tuple2 a1 e1))
  (Tuple2 a1 (tuple2 a1 e1) (t2tb2 x) (t2tb2949 y))
  (times (tuple2 a1 e1) a1 (t2tb1 s) (t2tb2943 t)))
  (and (mem1 x s) (mem44 y t)))))

;; mem_times
  (assert
  (forall ((s (set a)) (t (set e)) (x a) (y e))
  (= (mem44 (tb2t2949 (Tuple2 a1 e1 (t2tb2 x) (t2tb2955 y)))
  (tb2t2943 (times e1 a1 (t2tb1 s) (t2tb2947 t))))
  (and (mem1 x s) (mem36 y t)))))

(declare-fun t2tb4573 ((set (tuple21 a (tuple21 a d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (tuple21 a d))))) (sort
  (set1 (tuple2 a1 (tuple2 a1 d1))) (t2tb4573 x))))

(declare-fun tb2t4573 (uni) (set (tuple21 a (tuple21 a d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (tuple21 a d)))))
  (! (= (tb2t4573 (t2tb4573 i)) i) :pattern ((t2tb4573 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (tuple2 a1 d1))) j)
     (= (t2tb4573 (tb2t4573 j)) j)) :pattern ((t2tb4573 (tb2t4573 j))) )))

(declare-fun t2tb4574 ((tuple21 a (tuple21 a d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (tuple21 a d)))) (sort (tuple2 a1 (tuple2 a1 d1))
  (t2tb4574 x))))

(declare-fun tb2t4574 (uni) (tuple21 a (tuple21 a d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (tuple21 a d))))
  (! (= (tb2t4574 (t2tb4574 i)) i) :pattern ((t2tb4574 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (tuple2 a1 d1)) j) (= (t2tb4574 (tb2t4574 j)) j)) :pattern (
  (t2tb4574 (tb2t4574 j))) )))

;; mem_times
  (assert
  (forall ((s (set a)) (t (set (tuple21 a d))) (x a) (y (tuple21 a d)))
  (= (mem (tuple2 a1 (tuple2 a1 d1))
  (Tuple2 a1 (tuple2 a1 d1) (t2tb2 x) (t2tb904 y))
  (times (tuple2 a1 d1) a1 (t2tb1 s) (t2tb903 t)))
  (and (mem1 x s) (mem32 y t)))))

(declare-fun t2tb4575 ((set (tuple21 a (set (tuple21 b d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (set (tuple21 b d)))))) (sort
  (set1 (tuple2 a1 (set1 (tuple2 b1 d1)))) (t2tb4575 x))))

(declare-fun tb2t4575 (uni) (set (tuple21 a (set (tuple21 b d)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (set (tuple21 b d))))))
  (! (= (tb2t4575 (t2tb4575 i)) i) :pattern ((t2tb4575 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (set1 (tuple2 b1 d1)))) j)
     (= (t2tb4575 (tb2t4575 j)) j)) :pattern ((t2tb4575 (tb2t4575 j))) )))

(declare-fun t2tb4576 ((tuple21 a (set (tuple21 b d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (set (tuple21 b d))))) (sort
  (tuple2 a1 (set1 (tuple2 b1 d1))) (t2tb4576 x))))

(declare-fun tb2t4576 (uni) (tuple21 a (set (tuple21 b d))))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (set (tuple21 b d)))))
  (! (= (tb2t4576 (t2tb4576 i)) i) :pattern ((t2tb4576 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (set1 (tuple2 b1 d1))) j)
     (= (t2tb4576 (tb2t4576 j)) j)) :pattern ((t2tb4576 (tb2t4576 j))) )))

;; mem_times
  (assert
  (forall ((s (set a)) (t (set (set (tuple21 b d)))) (x a) (y (set (tuple21 b
  d))))
  (= (mem (tuple2 a1 (set1 (tuple2 b1 d1)))
  (Tuple2 a1 (set1 (tuple2 b1 d1)) (t2tb2 x) (t2tb687 y))
  (times (set1 (tuple2 b1 d1)) a1 (t2tb1 s) (t2tb906 t)))
  (and (mem1 x s) (mem33 y t)))))

(declare-fun t2tb2055 ((tuple21 a (tuple21 b d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (tuple21 b d)))) (sort (tuple2 a1 (tuple2 b1 d1))
  (t2tb2055 x))))

(declare-fun tb2t2055 (uni) (tuple21 a (tuple21 b d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (tuple21 b d))))
  (! (= (tb2t2055 (t2tb2055 i)) i) :pattern ((t2tb2055 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (tuple2 b1 d1)) j) (= (t2tb2055 (tb2t2055 j)) j)) :pattern (
  (t2tb2055 (tb2t2055 j))) )))

(declare-fun t2tb4577 ((set (tuple21 a (tuple21 b d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (tuple21 b d))))) (sort
  (set1 (tuple2 a1 (tuple2 b1 d1))) (t2tb4577 x))))

(declare-fun tb2t4577 (uni) (set (tuple21 a (tuple21 b d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (tuple21 b d)))))
  (! (= (tb2t4577 (t2tb4577 i)) i) :pattern ((t2tb4577 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (tuple2 b1 d1))) j)
     (= (t2tb4577 (tb2t4577 j)) j)) :pattern ((t2tb4577 (tb2t4577 j))) )))

;; mem_times
  (assert
  (forall ((s (set a)) (t (set (tuple21 b d))) (x a) (y (tuple21 b d)))
  (= (mem (tuple2 a1 (tuple2 b1 d1))
  (Tuple2 a1 (tuple2 b1 d1) (t2tb2 x) (t2tb692 y))
  (times (tuple2 b1 d1) a1 (t2tb1 s) (t2tb687 t)))
  (and (mem1 x s) (mem23 y t)))))

;; mem_times
  (assert
  (forall ((s (set a)) (t (set d)) (x a) (y d))
  (= (mem32 (tb2t904 (Tuple2 a1 d1 (t2tb2 x) (t2tb694 y)))
  (tb2t903 (times d1 a1 (t2tb1 s) (t2tb690 t))))
  (and (mem1 x s) (mem20 y t)))))

(declare-fun t2tb4578 ((set (tuple21 a (tuple21 a (tuple21 b c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (tuple21 a (tuple21 b c)))))) (sort
  (set1 (tuple2 a1 (tuple2 a1 (tuple2 b1 c1)))) (t2tb4578 x))))

(declare-fun tb2t4578 (uni) (set (tuple21 a (tuple21 a (tuple21 b c)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (tuple21 a (tuple21 b c))))))
  (! (= (tb2t4578 (t2tb4578 i)) i) :pattern ((t2tb4578 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (tuple2 a1 (tuple2 b1 c1)))) j)
     (= (t2tb4578 (tb2t4578 j)) j)) :pattern ((t2tb4578 (tb2t4578 j))) )))

(declare-fun t2tb4579 ((tuple21 a (tuple21 a (tuple21 b c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (tuple21 a (tuple21 b c))))) (sort
  (tuple2 a1 (tuple2 a1 (tuple2 b1 c1))) (t2tb4579 x))))

(declare-fun tb2t4579 (uni) (tuple21 a (tuple21 a (tuple21 b c))))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (tuple21 a (tuple21 b c)))))
  (! (= (tb2t4579 (t2tb4579 i)) i) :pattern ((t2tb4579 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (tuple2 a1 (tuple2 b1 c1))) j)
     (= (t2tb4579 (tb2t4579 j)) j)) :pattern ((t2tb4579 (tb2t4579 j))) )))

;; mem_times
  (assert
  (forall ((s (set a)) (t (set (tuple21 a (tuple21 b c)))) (x a)
  (y (tuple21 a (tuple21 b c))))
  (= (mem (tuple2 a1 (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 a1 (tuple2 a1 (tuple2 b1 c1)) (t2tb2 x) (t2tb260 y))
  (times (tuple2 a1 (tuple2 b1 c1)) a1 (t2tb1 s) (t2tb261 t)))
  (and (mem1 x s) (mem14 y t)))))

(declare-fun t2tb4580 ((set (tuple21 a (set (tuple21 a c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (set (tuple21 a c)))))) (sort
  (set1 (tuple2 a1 (set1 (tuple2 a1 c1)))) (t2tb4580 x))))

(declare-fun tb2t4580 (uni) (set (tuple21 a (set (tuple21 a c)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (set (tuple21 a c))))))
  (! (= (tb2t4580 (t2tb4580 i)) i) :pattern ((t2tb4580 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (set1 (tuple2 a1 c1)))) j)
     (= (t2tb4580 (tb2t4580 j)) j)) :pattern ((t2tb4580 (tb2t4580 j))) )))

(declare-fun t2tb4581 ((tuple21 a (set (tuple21 a c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (set (tuple21 a c))))) (sort
  (tuple2 a1 (set1 (tuple2 a1 c1))) (t2tb4581 x))))

(declare-fun tb2t4581 (uni) (tuple21 a (set (tuple21 a c))))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (set (tuple21 a c)))))
  (! (= (tb2t4581 (t2tb4581 i)) i) :pattern ((t2tb4581 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (set1 (tuple2 a1 c1))) j)
     (= (t2tb4581 (tb2t4581 j)) j)) :pattern ((t2tb4581 (tb2t4581 j))) )))

;; mem_times
  (assert
  (forall ((s (set a)) (t (set (set (tuple21 a c)))) (x a) (y (set (tuple21 a
  c))))
  (= (mem (tuple2 a1 (set1 (tuple2 a1 c1)))
  (Tuple2 a1 (set1 (tuple2 a1 c1)) (t2tb2 x) (t2tb129 y))
  (times (set1 (tuple2 a1 c1)) a1 (t2tb1 s) (t2tb128 t)))
  (and (mem1 x s) (mem11 y t)))))

(declare-fun t2tb256 ((set (tuple21 a (tuple21 a c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (tuple21 a c))))) (sort
  (set1 (tuple2 a1 (tuple2 a1 c1))) (t2tb256 x))))

(declare-fun tb2t256 (uni) (set (tuple21 a (tuple21 a c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (tuple21 a c)))))
  (! (= (tb2t256 (t2tb256 i)) i) :pattern ((t2tb256 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (tuple2 a1 c1))) j)
     (= (t2tb256 (tb2t256 j)) j)) :pattern ((t2tb256 (tb2t256 j))) )))

(declare-fun t2tb257 ((tuple21 a (tuple21 a c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (tuple21 a c)))) (sort (tuple2 a1 (tuple2 a1 c1))
  (t2tb257 x))))

(declare-fun tb2t257 (uni) (tuple21 a (tuple21 a c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (tuple21 a c))))
  (! (= (tb2t257 (t2tb257 i)) i) :pattern ((t2tb257 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (tuple2 a1 c1)) j) (= (t2tb257 (tb2t257 j)) j)) :pattern (
  (t2tb257 (tb2t257 j))) )))

;; mem_times
  (assert
  (forall ((s (set a)) (t (set (tuple21 a c))) (x a) (y (tuple21 a c)))
  (= (mem (tuple2 a1 (tuple2 a1 c1))
  (Tuple2 a1 (tuple2 a1 c1) (t2tb2 x) (t2tb133 y))
  (times (tuple2 a1 c1) a1 (t2tb1 s) (t2tb129 t)))
  (and (mem1 x s) (mem10 y t)))))

;; mem_times
  (assert
  (forall ((s (set a)) (t (set (tuple21 b c))) (x a) (y (tuple21 b c)))
  (= (mem14 (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 y)))
  (tb2t261 (times (tuple2 b1 c1) a1 (t2tb1 s) (t2tb131 t))))
  (and (mem1 x s) (mem (tuple2 b1 c1) (t2tb134 y) (t2tb131 t))))))

;; mem_times
  (assert
  (forall ((s (set a)) (t (set c)) (x a) (y c))
  (= (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y)))
  (tb2t129 (times c1 a1 (t2tb1 s) (t2tb132 t)))) (and (mem1 x s) (mem7 y t)))))

(declare-fun t2tb39 ((set (tuple21 a (set (tuple21 a b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (set (tuple21 a b)))))) (sort
  (set1 (tuple2 a1 (set1 (tuple2 a1 b1)))) (t2tb39 x))))

(declare-fun tb2t39 (uni) (set (tuple21 a (set (tuple21 a b)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (set (tuple21 a b))))))
  (! (= (tb2t39 (t2tb39 i)) i) :pattern ((t2tb39 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (set1 (tuple2 a1 b1)))) j)
     (= (t2tb39 (tb2t39 j)) j)) :pattern ((t2tb39 (tb2t39 j))) )))

(declare-fun t2tb40 ((tuple21 a (set (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (set (tuple21 a b))))) (sort
  (tuple2 a1 (set1 (tuple2 a1 b1))) (t2tb40 x))))

(declare-fun tb2t40 (uni) (tuple21 a (set (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (set (tuple21 a b)))))
  (! (= (tb2t40 (t2tb40 i)) i) :pattern ((t2tb40 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (set1 (tuple2 a1 b1))) j)
     (= (t2tb40 (tb2t40 j)) j)) :pattern ((t2tb40 (tb2t40 j))) )))

;; mem_times
  (assert
  (forall ((s (set a)) (t (set (set (tuple21 a b)))) (x a) (y (set (tuple21 a
  b))))
  (= (mem (tuple2 a1 (set1 (tuple2 a1 b1)))
  (Tuple2 a1 (set1 (tuple2 a1 b1)) (t2tb2 x) (t2tb11 y))
  (times (set1 (tuple2 a1 b1)) a1 (t2tb1 s) (t2tb10 t)))
  (and (mem1 x s) (mem4 y t)))))

(declare-fun t2tb41 ((set (tuple21 a (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (tuple21 a b))))) (sort
  (set1 (tuple2 a1 (tuple2 a1 b1))) (t2tb41 x))))

(declare-fun tb2t41 (uni) (set (tuple21 a (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (tuple21 a b)))))
  (! (= (tb2t41 (t2tb41 i)) i) :pattern ((t2tb41 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (tuple2 a1 b1))) j)
     (= (t2tb41 (tb2t41 j)) j)) :pattern ((t2tb41 (tb2t41 j))) )))

(declare-fun t2tb42 ((tuple21 a (tuple21 a b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (tuple21 a b)))) (sort (tuple2 a1 (tuple2 a1 b1))
  (t2tb42 x))))

(declare-fun tb2t42 (uni) (tuple21 a (tuple21 a b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (tuple21 a b))))
  (! (= (tb2t42 (t2tb42 i)) i) :pattern ((t2tb42 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (tuple2 a1 b1)) j) (= (t2tb42 (tb2t42 j)) j)) :pattern (
  (t2tb42 (tb2t42 j))) )))

;; mem_times
  (assert
  (forall ((s (set a)) (t (set (tuple21 a b))) (x a) (y (tuple21 a b)))
  (= (mem (tuple2 a1 (tuple2 a1 b1))
  (Tuple2 a1 (tuple2 a1 b1) (t2tb2 x) (t2tb13 y))
  (times (tuple2 a1 b1) a1 (t2tb1 s) (t2tb11 t)))
  (and (mem1 x s) (mem3 y t)))))

;; mem_times
  (assert
  (forall ((s (set a)) (t (set b)) (x a) (y b))
  (= (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y)))
  (tb2t11 (times b1 a1 (t2tb1 s) (t2tb12 t)))) (and (mem1 x s) (mem2 y t)))))

(declare-fun t2tb4 ((set (tuple21 a a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a a)))) (sort (set1 (tuple2 a1 a1)) (t2tb4 x))))

(declare-fun tb2t4 (uni) (set (tuple21 a a)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a a))))
  (! (= (tb2t4 (t2tb4 i)) i) :pattern ((t2tb4 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 a1)) j) (= (t2tb4 (tb2t4 j)) j)) :pattern (
  (t2tb4 (tb2t4 j))) )))

(declare-fun t2tb5 ((tuple21 a a)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 a a))) (sort (tuple2 a1 a1) (t2tb5 x))))

(declare-fun tb2t5 (uni) (tuple21 a a))

;; BridgeL
  (assert
  (forall ((i (tuple21 a a)))
  (! (= (tb2t5 (t2tb5 i)) i) :pattern ((t2tb5 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 a1) j) (= (t2tb5 (tb2t5 j)) j)) :pattern ((t2tb5
                                                                    (tb2t5 j))) )))

;; mem_times
  (assert
  (forall ((s (set a)) (t (set a)) (x a) (y a))
  (= (mem (tuple2 a1 a1) (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y))
  (times a1 a1 (t2tb1 s) (t2tb1 t))) (and (mem1 x s) (mem1 y t)))))

;; mem_times
  (assert
  (forall ((b2 ty))
  (forall ((s (set a)) (t uni) (x a) (y uni))
  (= (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) y)
  (times b2 a1 (t2tb1 s) t)) (and (mem1 x s) (mem b2 y t))))))

;; mem_times
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (x uni) (y uni))
  (= (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) (times b2 a2 s t))
  (and (mem a2 x s) (mem b2 y t))))))

(declare-fun t2tb4582 ((set (set (tuple21 (tuple21 b c) (tuple21 d
  e))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 b c) (tuple21 d e)))))) (sort
  (set1 (set1 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)))) (t2tb4582 x))))

(declare-fun tb2t4582 (uni) (set (set (tuple21 (tuple21 b c) (tuple21 d
  e)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 b c) (tuple21 d e))))))
  (! (= (tb2t4582 (t2tb4582 i)) i) :pattern ((t2tb4582 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)))) j)
     (= (t2tb4582 (tb2t4582 j)) j)) :pattern ((t2tb4582 (tb2t4582 j))) )))

;; mem_power
  (assert
  (forall ((s (set (tuple21 (tuple21 b c) (tuple21 d e))))
  (t (set (tuple21 (tuple21 b c) (tuple21 d e)))))
  (= (mem (set1 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1))) (t2tb4102 s)
  (power (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (t2tb4102 t)))
  (forall ((x (tuple21 (tuple21 b c) (tuple21 d e))))
  (=> (mem49 x s) (mem49 x t))))))

(declare-fun t2tb4583 ((set (set (tuple21 a (tuple21 d e))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 a (tuple21 d e)))))) (sort
  (set1 (set1 (tuple2 a1 (tuple2 d1 e1)))) (t2tb4583 x))))

(declare-fun tb2t4583 (uni) (set (set (tuple21 a (tuple21 d e)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 a (tuple21 d e))))))
  (! (= (tb2t4583 (t2tb4583 i)) i) :pattern ((t2tb4583 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 a1 (tuple2 d1 e1)))) j)
     (= (t2tb4583 (tb2t4583 j)) j)) :pattern ((t2tb4583 (tb2t4583 j))) )))

;; mem_power
  (assert
  (forall ((s (set (tuple21 a (tuple21 d e)))) (t (set (tuple21 a (tuple21 d
  e)))))
  (= (mem (set1 (tuple2 a1 (tuple2 d1 e1))) (t2tb4103 s)
  (power (tuple2 a1 (tuple2 d1 e1)) (t2tb4103 t)))
  (forall ((x (tuple21 a (tuple21 d e)))) (=> (mem48 x s) (mem48 x t))))))

(declare-fun t2tb4584 ((set (set (set (tuple21 c e))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (set (tuple21 c e)))))) (sort
  (set1 (set1 (set1 (tuple2 c1 e1)))) (t2tb4584 x))))

(declare-fun tb2t4584 (uni) (set (set (set (tuple21 c e)))))

;; BridgeL
  (assert
  (forall ((i (set (set (set (tuple21 c e))))))
  (! (= (tb2t4584 (t2tb4584 i)) i) :pattern ((t2tb4584 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (set1 (tuple2 c1 e1)))) j)
     (= (t2tb4584 (tb2t4584 j)) j)) :pattern ((t2tb4584 (tb2t4584 j))) )))

;; mem_power
  (assert
  (forall ((s (set (set (tuple21 c e)))) (t (set (set (tuple21 c e)))))
  (= (mem (set1 (set1 (tuple2 c1 e1))) (t2tb3854 s)
  (power (set1 (tuple2 c1 e1)) (t2tb3854 t)))
  (forall ((x (set (tuple21 c e)))) (=> (mem47 x s) (mem47 x t))))))

;; mem_power
  (assert
  (forall ((s (set (tuple21 c e))) (t (set (tuple21 c e))))
  (= (mem47 s (tb2t3854 (power (tuple2 c1 e1) (t2tb3478 t))))
  (forall ((x (tuple21 c e))) (=> (mem46 x s) (mem46 x t))))))

(declare-fun t2tb3579 ((set (set (tuple21 a e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 a e))))) (sort (set1 (set1 (tuple2 a1 e1)))
  (t2tb3579 x))))

(declare-fun tb2t3579 (uni) (set (set (tuple21 a e))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 a e)))))
  (! (= (tb2t3579 (t2tb3579 i)) i) :pattern ((t2tb3579 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 a1 e1))) j) (= (t2tb3579 (tb2t3579 j)) j)) :pattern (
  (t2tb3579 (tb2t3579 j))) )))

;; mem_power
  (assert
  (forall ((s (set (tuple21 a e))) (t (set (tuple21 a e))))
  (= (mem (set1 (tuple2 a1 e1)) (t2tb2943 s)
  (power (tuple2 a1 e1) (t2tb2943 t)))
  (forall ((x (tuple21 a e))) (=> (mem44 x s) (mem44 x t))))))

(declare-fun t2tb3585 ((set (set e))) uni)

;; t2tb_sort
  (assert (forall ((x (set (set e)))) (sort (set1 (set1 e1)) (t2tb3585 x))))

(declare-fun tb2t3585 (uni) (set (set e)))

;; BridgeL
  (assert
  (forall ((i (set (set e))))
  (! (= (tb2t3585 (t2tb3585 i)) i) :pattern ((t2tb3585 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 e1)) j) (= (t2tb3585 (tb2t3585 j)) j)) :pattern (
  (t2tb3585 (tb2t3585 j))) )))

;; mem_power
  (assert
  (forall ((s (set e)) (t (set e)))
  (= (mem (set1 e1) (t2tb2947 s) (power e1 (t2tb2947 t)))
  (forall ((x e)) (=> (mem36 x s) (mem36 x t))))))

(declare-fun t2tb1013 ((set (set (tuple21 a d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 a d))))) (sort (set1 (set1 (tuple2 a1 d1)))
  (t2tb1013 x))))

(declare-fun tb2t1013 (uni) (set (set (tuple21 a d))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 a d)))))
  (! (= (tb2t1013 (t2tb1013 i)) i) :pattern ((t2tb1013 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 a1 d1))) j) (= (t2tb1013 (tb2t1013 j)) j)) :pattern (
  (t2tb1013 (tb2t1013 j))) )))

;; mem_power
  (assert
  (forall ((s (set (tuple21 a d))) (t (set (tuple21 a d))))
  (= (mem (set1 (tuple2 a1 d1)) (t2tb903 s)
  (power (tuple2 a1 d1) (t2tb903 t)))
  (forall ((x (tuple21 a d))) (=> (mem32 x s) (mem32 x t))))))

(declare-fun t2tb4585 ((set (set (set (tuple21 b d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (set (tuple21 b d)))))) (sort
  (set1 (set1 (set1 (tuple2 b1 d1)))) (t2tb4585 x))))

(declare-fun tb2t4585 (uni) (set (set (set (tuple21 b d)))))

;; BridgeL
  (assert
  (forall ((i (set (set (set (tuple21 b d))))))
  (! (= (tb2t4585 (t2tb4585 i)) i) :pattern ((t2tb4585 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (set1 (tuple2 b1 d1)))) j)
     (= (t2tb4585 (tb2t4585 j)) j)) :pattern ((t2tb4585 (tb2t4585 j))) )))

;; mem_power
  (assert
  (forall ((s (set (set (tuple21 b d)))) (t (set (set (tuple21 b d)))))
  (= (mem (set1 (set1 (tuple2 b1 d1))) (t2tb906 s)
  (power (set1 (tuple2 b1 d1)) (t2tb906 t)))
  (forall ((x (set (tuple21 b d)))) (=> (mem33 x s) (mem33 x t))))))

;; mem_power
  (assert
  (forall ((s (set (tuple21 b d))) (t (set (tuple21 b d))))
  (= (mem33 s (tb2t906 (power (tuple2 b1 d1) (t2tb687 t))))
  (forall ((x (tuple21 b d))) (=> (mem23 x s) (mem23 x t))))))

(declare-fun t2tb908 ((set (set d))) uni)

;; t2tb_sort
  (assert (forall ((x (set (set d)))) (sort (set1 (set1 d1)) (t2tb908 x))))

(declare-fun tb2t908 (uni) (set (set d)))

;; BridgeL
  (assert
  (forall ((i (set (set d))))
  (! (= (tb2t908 (t2tb908 i)) i) :pattern ((t2tb908 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 d1)) j) (= (t2tb908 (tb2t908 j)) j)) :pattern (
  (t2tb908 (tb2t908 j))) )))

;; mem_power
  (assert
  (forall ((s (set d)) (t (set d)))
  (= (mem (set1 d1) (t2tb690 s) (power d1 (t2tb690 t)))
  (forall ((x d)) (=> (mem20 x s) (mem20 x t))))))

(declare-fun t2tb327 ((set (set (tuple21 a (tuple21 b c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 a (tuple21 b c)))))) (sort
  (set1 (set1 (tuple2 a1 (tuple2 b1 c1)))) (t2tb327 x))))

(declare-fun tb2t327 (uni) (set (set (tuple21 a (tuple21 b c)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 a (tuple21 b c))))))
  (! (= (tb2t327 (t2tb327 i)) i) :pattern ((t2tb327 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 a1 (tuple2 b1 c1)))) j)
     (= (t2tb327 (tb2t327 j)) j)) :pattern ((t2tb327 (tb2t327 j))) )))

;; mem_power
  (assert
  (forall ((s (set (tuple21 a (tuple21 b c)))) (t (set (tuple21 a (tuple21 b
  c)))))
  (= (mem (set1 (tuple2 a1 (tuple2 b1 c1))) (t2tb261 s)
  (power (tuple2 a1 (tuple2 b1 c1)) (t2tb261 t)))
  (forall ((x (tuple21 a (tuple21 b c)))) (=> (mem14 x s) (mem14 x t))))))

(declare-fun t2tb4586 ((set (set (set (tuple21 a c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (set (tuple21 a c)))))) (sort
  (set1 (set1 (set1 (tuple2 a1 c1)))) (t2tb4586 x))))

(declare-fun tb2t4586 (uni) (set (set (set (tuple21 a c)))))

;; BridgeL
  (assert
  (forall ((i (set (set (set (tuple21 a c))))))
  (! (= (tb2t4586 (t2tb4586 i)) i) :pattern ((t2tb4586 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (set1 (tuple2 a1 c1)))) j)
     (= (t2tb4586 (tb2t4586 j)) j)) :pattern ((t2tb4586 (tb2t4586 j))) )))

;; mem_power
  (assert
  (forall ((s (set (set (tuple21 a c)))) (t (set (set (tuple21 a c)))))
  (= (mem (set1 (set1 (tuple2 a1 c1))) (t2tb128 s)
  (power (set1 (tuple2 a1 c1)) (t2tb128 t)))
  (forall ((x (set (tuple21 a c)))) (=> (mem11 x s) (mem11 x t))))))

;; mem_power
  (assert
  (forall ((s (set (tuple21 a c))) (t (set (tuple21 a c))))
  (= (mem11 s (tb2t128 (power (tuple2 a1 c1) (t2tb129 t))))
  (forall ((x (tuple21 a c))) (=> (mem10 x s) (mem10 x t))))))

(declare-fun t2tb264 ((set (set c))) uni)

;; t2tb_sort
  (assert (forall ((x (set (set c)))) (sort (set1 (set1 c1)) (t2tb264 x))))

(declare-fun tb2t264 (uni) (set (set c)))

;; BridgeL
  (assert
  (forall ((i (set (set c))))
  (! (= (tb2t264 (t2tb264 i)) i) :pattern ((t2tb264 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 c1)) j) (= (t2tb264 (tb2t264 j)) j)) :pattern (
  (t2tb264 (tb2t264 j))) )))

;; mem_power
  (assert
  (forall ((s (set c)) (t (set c)))
  (= (mem (set1 c1) (t2tb132 s) (power c1 (t2tb132 t)))
  (forall ((x c)) (=> (mem7 x s) (mem7 x t))))))

(declare-fun t2tb43 ((set (set (set (tuple21 a b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (set (tuple21 a b)))))) (sort
  (set1 (set1 (set1 (tuple2 a1 b1)))) (t2tb43 x))))

(declare-fun tb2t43 (uni) (set (set (set (tuple21 a b)))))

;; BridgeL
  (assert
  (forall ((i (set (set (set (tuple21 a b))))))
  (! (= (tb2t43 (t2tb43 i)) i) :pattern ((t2tb43 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (set1 (tuple2 a1 b1)))) j)
     (= (t2tb43 (tb2t43 j)) j)) :pattern ((t2tb43 (tb2t43 j))) )))

;; mem_power
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set (set (tuple21 a b)))))
  (= (mem (set1 (set1 (tuple2 a1 b1))) (t2tb10 s)
  (power (set1 (tuple2 a1 b1)) (t2tb10 t)))
  (forall ((x (set (tuple21 a b)))) (=> (mem4 x s) (mem4 x t))))))

;; mem_power
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (tuple21 a b))))
  (= (mem4 s (tb2t10 (power (tuple2 a1 b1) (t2tb11 t))))
  (forall ((x (tuple21 a b))) (=> (mem3 x s) (mem3 x t))))))

(declare-fun t2tb44 ((set (set b))) uni)

;; t2tb_sort
  (assert (forall ((x (set (set b)))) (sort (set1 (set1 b1)) (t2tb44 x))))

(declare-fun tb2t44 (uni) (set (set b)))

;; BridgeL
  (assert
  (forall ((i (set (set b))))
  (! (= (tb2t44 (t2tb44 i)) i) :pattern ((t2tb44 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 b1)) j) (= (t2tb44 (tb2t44 j)) j)) :pattern (
  (t2tb44 (tb2t44 j))) )))

;; mem_power
  (assert
  (forall ((s (set b)) (t (set b)))
  (= (mem (set1 b1) (t2tb12 s) (power b1 (t2tb12 t)))
  (forall ((x b)) (=> (mem2 x s) (mem2 x t))))))

(declare-fun t2tb ((set (set a))) uni)

;; t2tb_sort
  (assert (forall ((x (set (set a)))) (sort (set1 (set1 a1)) (t2tb x))))

(declare-fun tb2t (uni) (set (set a)))

;; BridgeL
  (assert
  (forall ((i (set (set a)))) (! (= (tb2t (t2tb i)) i) :pattern ((t2tb i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 a1)) j) (= (t2tb (tb2t j)) j)) :pattern ((t2tb
                                                                    (tb2t j))) )))

;; mem_power
  (assert
  (forall ((s (set a)) (t (set a)))
  (= (mem (set1 a1) (t2tb1 s) (power a1 (t2tb1 t)))
  (forall ((x a)) (=> (mem1 x s) (mem1 x t))))))

;; mem_power
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t uni))
  (and
  (=> (mem (set1 a2) s (power a2 t))
  (forall ((x uni)) (=> (mem a2 x s) (mem a2 x t))))
  (=> (forall ((x uni)) (=> (sort a2 x) (=> (mem a2 x s) (mem a2 x t)))) (mem
  (set1 a2) s (power a2 t)))))))

;; mem_non_empty_power
  (assert
  (forall ((s (set (tuple21 (tuple21 b c) (tuple21 d e))))
  (t (set (tuple21 (tuple21 b c) (tuple21 d e)))))
  (= (mem (set1 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1))) (t2tb4102 s)
  (non_empty_power (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (t2tb4102 t)))
  (and
  (forall ((x (tuple21 (tuple21 b c) (tuple21 d e))))
  (=> (mem49 x s) (mem49 x t)))
  (not (infix_eqeq42 s
  (tb2t4102 (empty (tuple2 (tuple2 b1 c1) (tuple2 d1 e1))))))))))

;; mem_non_empty_power
  (assert
  (forall ((s (set (tuple21 a (tuple21 d e)))) (t (set (tuple21 a (tuple21 d
  e)))))
  (= (mem (set1 (tuple2 a1 (tuple2 d1 e1))) (t2tb4103 s)
  (non_empty_power (tuple2 a1 (tuple2 d1 e1)) (t2tb4103 t)))
  (and (forall ((x (tuple21 a (tuple21 d e)))) (=> (mem48 x s) (mem48 x t)))
  (not (infix_eqeq41 s (tb2t4103 (empty (tuple2 a1 (tuple2 d1 e1))))))))))

;; mem_non_empty_power
  (assert
  (forall ((s (set (set (tuple21 c e)))) (t (set (set (tuple21 c e)))))
  (= (mem (set1 (set1 (tuple2 c1 e1))) (t2tb3854 s)
  (non_empty_power (set1 (tuple2 c1 e1)) (t2tb3854 t)))
  (and (forall ((x (set (tuple21 c e)))) (=> (mem47 x s) (mem47 x t)))
  (not (infix_eqeq40 s (tb2t3854 (empty (set1 (tuple2 c1 e1))))))))))

;; mem_non_empty_power
  (assert
  (forall ((s (set (tuple21 c e))) (t (set (tuple21 c e))))
  (= (mem47 s (tb2t3854 (non_empty_power (tuple2 c1 e1) (t2tb3478 t))))
  (and (forall ((x (tuple21 c e))) (=> (mem46 x s) (mem46 x t)))
  (not (infix_eqeq39 s (tb2t3478 (empty (tuple2 c1 e1)))))))))

;; mem_non_empty_power
  (assert
  (forall ((s (set (tuple21 a e))) (t (set (tuple21 a e))))
  (= (mem (set1 (tuple2 a1 e1)) (t2tb2943 s)
  (non_empty_power (tuple2 a1 e1) (t2tb2943 t)))
  (and (forall ((x (tuple21 a e))) (=> (mem44 x s) (mem44 x t)))
  (not (infix_eqeq35 s (tb2t2943 (empty (tuple2 a1 e1)))))))))

;; mem_non_empty_power
  (assert
  (forall ((s (set e)) (t (set e)))
  (= (mem (set1 e1) (t2tb2947 s) (non_empty_power e1 (t2tb2947 t)))
  (and (forall ((x e)) (=> (mem36 x s) (mem36 x t)))
  (not (infix_eqeq29 s (tb2t2947 (empty e1))))))))

;; mem_non_empty_power
  (assert
  (forall ((s (set (tuple21 a d))) (t (set (tuple21 a d))))
  (= (mem (set1 (tuple2 a1 d1)) (t2tb903 s)
  (non_empty_power (tuple2 a1 d1) (t2tb903 t)))
  (and (forall ((x (tuple21 a d))) (=> (mem32 x s) (mem32 x t)))
  (not (infix_eqeq24 s (tb2t903 (empty (tuple2 a1 d1)))))))))

;; mem_non_empty_power
  (assert
  (forall ((s (set (set (tuple21 b d)))) (t (set (set (tuple21 b d)))))
  (= (mem (set1 (set1 (tuple2 b1 d1))) (t2tb906 s)
  (non_empty_power (set1 (tuple2 b1 d1)) (t2tb906 t)))
  (and (forall ((x (set (tuple21 b d)))) (=> (mem33 x s) (mem33 x t)))
  (not (infix_eqeq28 s (tb2t906 (empty (set1 (tuple2 b1 d1))))))))))

;; mem_non_empty_power
  (assert
  (forall ((s (set (tuple21 b d))) (t (set (tuple21 b d))))
  (= (mem33 s (tb2t906 (non_empty_power (tuple2 b1 d1) (t2tb687 t))))
  (and (forall ((x (tuple21 b d))) (=> (mem23 x s) (mem23 x t)))
  (not (infix_eqeq22 s (tb2t687 (empty (tuple2 b1 d1)))))))))

;; mem_non_empty_power
  (assert
  (forall ((s (set d)) (t (set d)))
  (= (mem (set1 d1) (t2tb690 s) (non_empty_power d1 (t2tb690 t)))
  (and (forall ((x d)) (=> (mem20 x s) (mem20 x t)))
  (not (infix_eqeq13 s (tb2t690 (empty d1))))))))

;; mem_non_empty_power
  (assert
  (forall ((s (set (tuple21 a (tuple21 b c)))) (t (set (tuple21 a (tuple21 b
  c)))))
  (= (mem (set1 (tuple2 a1 (tuple2 b1 c1))) (t2tb261 s)
  (non_empty_power (tuple2 a1 (tuple2 b1 c1)) (t2tb261 t)))
  (and (forall ((x (tuple21 a (tuple21 b c)))) (=> (mem14 x s) (mem14 x t)))
  (not (infix_eqeq20 s (tb2t261 (empty (tuple2 a1 (tuple2 b1 c1))))))))))

;; mem_non_empty_power
  (assert
  (forall ((s (set (set (tuple21 a c)))) (t (set (set (tuple21 a c)))))
  (= (mem (set1 (set1 (tuple2 a1 c1))) (t2tb128 s)
  (non_empty_power (set1 (tuple2 a1 c1)) (t2tb128 t)))
  (and (forall ((x (set (tuple21 a c)))) (=> (mem11 x s) (mem11 x t)))
  (not (infix_eqeq19 s (tb2t128 (empty (set1 (tuple2 a1 c1))))))))))

;; mem_non_empty_power
  (assert
  (forall ((s (set (tuple21 a c))) (t (set (tuple21 a c))))
  (= (mem11 s (tb2t128 (non_empty_power (tuple2 a1 c1) (t2tb129 t))))
  (and (forall ((x (tuple21 a c))) (=> (mem10 x s) (mem10 x t)))
  (not (infix_eqeq9 s (tb2t129 (empty (tuple2 a1 c1)))))))))

;; mem_non_empty_power
  (assert
  (forall ((s (set c)) (t (set c)))
  (= (mem (set1 c1) (t2tb132 s) (non_empty_power c1 (t2tb132 t)))
  (and (forall ((x c)) (=> (mem7 x s) (mem7 x t)))
  (not (infix_eqeq7 s (tb2t132 (empty c1))))))))

;; mem_non_empty_power
  (assert
  (forall ((s (set (set (tuple21 a b)))) (t (set (set (tuple21 a b)))))
  (= (mem (set1 (set1 (tuple2 a1 b1))) (t2tb10 s)
  (non_empty_power (set1 (tuple2 a1 b1)) (t2tb10 t)))
  (and (forall ((x (set (tuple21 a b)))) (=> (mem4 x s) (mem4 x t)))
  (not (infix_eqeq5 s (tb2t10 (empty (set1 (tuple2 a1 b1))))))))))

;; mem_non_empty_power
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (tuple21 a b))))
  (= (mem4 s (tb2t10 (non_empty_power (tuple2 a1 b1) (t2tb11 t))))
  (and (forall ((x (tuple21 a b))) (=> (mem3 x s) (mem3 x t)))
  (not (infix_eqeq4 s (tb2t11 (empty (tuple2 a1 b1)))))))))

;; mem_non_empty_power
  (assert
  (forall ((s (set b)) (t (set b)))
  (= (mem (set1 b1) (t2tb12 s) (non_empty_power b1 (t2tb12 t)))
  (and (forall ((x b)) (=> (mem2 x s) (mem2 x t)))
  (not (infix_eqeq3 s (tb2t12 (empty b1))))))))

;; mem_non_empty_power
  (assert
  (forall ((s (set a)) (t (set a)))
  (= (mem (set1 a1) (t2tb1 s) (non_empty_power a1 (t2tb1 t)))
  (and (forall ((x a)) (=> (mem1 x s) (mem1 x t)))
  (not (infix_eqeq1 s (tb2t1 (empty a1))))))))

;; mem_non_empty_power
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t uni))
  (and
  (=> (mem (set1 a2) s (non_empty_power a2 t))
  (and (forall ((x uni)) (=> (mem a2 x s) (mem a2 x t)))
  (not (infix_eqeq a2 s (empty a2)))))
  (=>
  (and (forall ((x uni)) (=> (sort a2 x) (=> (mem a2 x s) (mem a2 x t))))
  (not (infix_eqeq a2 s (empty a2)))) (mem (set1 a2) s
  (non_empty_power a2 t)))))))

(declare-fun choose (ty uni) uni)

;; choose_sort
  (assert (forall ((a2 ty)) (forall ((x uni)) (sort a2 (choose a2 x)))))

(declare-fun relation (ty ty uni uni) uni)

;; relation_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (set1 (tuple2 a2 b2)))
  (relation b2 a2 x x1)))))

(declare-fun relation1 ((set a) (set b)) (set (set (tuple21 a b))))

(declare-fun relation3 ((set a) (set c)) (set (set (tuple21 a c))))

(declare-fun relation9 ((set b) (set d)) (set (set (tuple21 b d))))

(declare-fun relation12 ((set c) (set e)) (set (set (tuple21 c e))))

;; mem_relation
  (assert
  (forall ((a2 ty))
  (forall ((u uni) (v (set (tuple21 (tuple21 b c) (tuple21 d e)))) (r uni))
  (and
  (=> (mem (set1 (tuple2 a2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)))) r
  (relation (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) a2 u (t2tb4102 v)))
  (forall ((x uni) (y (tuple21 (tuple21 b c) (tuple21 d e))))
  (=> (mem (tuple2 a2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)))
  (Tuple2 a2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) x (t2tb4104 y)) r)
  (and (mem a2 x u) (mem49 y v)))))
  (=>
  (forall ((x uni) (y (tuple21 (tuple21 b c) (tuple21 d e))))
  (=> (sort a2 x)
  (=> (mem (tuple2 a2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)))
  (Tuple2 a2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) x (t2tb4104 y)) r)
  (and (mem a2 x u) (mem49 y v))))) (mem
  (set1 (tuple2 a2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)))) r
  (relation (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) a2 u (t2tb4102 v))))))))

;; mem_relation
  (assert
  (forall ((a2 ty))
  (forall ((u uni) (v (set (tuple21 a (tuple21 d e)))) (r uni))
  (and
  (=> (mem (set1 (tuple2 a2 (tuple2 a1 (tuple2 d1 e1)))) r
  (relation (tuple2 a1 (tuple2 d1 e1)) a2 u (t2tb4103 v)))
  (forall ((x uni) (y (tuple21 a (tuple21 d e))))
  (=> (mem (tuple2 a2 (tuple2 a1 (tuple2 d1 e1)))
  (Tuple2 a2 (tuple2 a1 (tuple2 d1 e1)) x (t2tb4105 y)) r)
  (and (mem a2 x u) (mem48 y v)))))
  (=>
  (forall ((x uni) (y (tuple21 a (tuple21 d e))))
  (=> (sort a2 x)
  (=> (mem (tuple2 a2 (tuple2 a1 (tuple2 d1 e1)))
  (Tuple2 a2 (tuple2 a1 (tuple2 d1 e1)) x (t2tb4105 y)) r)
  (and (mem a2 x u) (mem48 y v))))) (mem
  (set1 (tuple2 a2 (tuple2 a1 (tuple2 d1 e1)))) r
  (relation (tuple2 a1 (tuple2 d1 e1)) a2 u (t2tb4103 v))))))))

;; mem_relation
  (assert
  (forall ((a2 ty))
  (forall ((u uni) (v (set (set (tuple21 c e)))) (r uni))
  (and
  (=> (mem (set1 (tuple2 a2 (set1 (tuple2 c1 e1)))) r
  (relation (set1 (tuple2 c1 e1)) a2 u (t2tb3854 v)))
  (forall ((x uni) (y (set (tuple21 c e))))
  (=> (mem (tuple2 a2 (set1 (tuple2 c1 e1)))
  (Tuple2 a2 (set1 (tuple2 c1 e1)) x (t2tb3478 y)) r)
  (and (mem a2 x u) (mem47 y v)))))
  (=>
  (forall ((x uni) (y (set (tuple21 c e))))
  (=> (sort a2 x)
  (=> (mem (tuple2 a2 (set1 (tuple2 c1 e1)))
  (Tuple2 a2 (set1 (tuple2 c1 e1)) x (t2tb3478 y)) r)
  (and (mem a2 x u) (mem47 y v))))) (mem
  (set1 (tuple2 a2 (set1 (tuple2 c1 e1)))) r
  (relation (set1 (tuple2 c1 e1)) a2 u (t2tb3854 v))))))))

;; mem_relation
  (assert
  (forall ((a2 ty))
  (forall ((u uni) (v (set (tuple21 c e))) (r uni))
  (and
  (=> (mem (set1 (tuple2 a2 (tuple2 c1 e1))) r
  (relation (tuple2 c1 e1) a2 u (t2tb3478 v)))
  (forall ((x uni) (y (tuple21 c e)))
  (=> (mem (tuple2 a2 (tuple2 c1 e1))
  (Tuple2 a2 (tuple2 c1 e1) x (t2tb3479 y)) r)
  (and (mem a2 x u) (mem46 y v)))))
  (=>
  (forall ((x uni) (y (tuple21 c e)))
  (=> (sort a2 x)
  (=> (mem (tuple2 a2 (tuple2 c1 e1))
  (Tuple2 a2 (tuple2 c1 e1) x (t2tb3479 y)) r)
  (and (mem a2 x u) (mem46 y v))))) (mem (set1 (tuple2 a2 (tuple2 c1 e1))) r
  (relation (tuple2 c1 e1) a2 u (t2tb3478 v))))))))

;; mem_relation
  (assert
  (forall ((a2 ty))
  (forall ((u uni) (v (set (tuple21 a e))) (r uni))
  (and
  (=> (mem (set1 (tuple2 a2 (tuple2 a1 e1))) r
  (relation (tuple2 a1 e1) a2 u (t2tb2943 v)))
  (forall ((x uni) (y (tuple21 a e)))
  (=> (mem (tuple2 a2 (tuple2 a1 e1))
  (Tuple2 a2 (tuple2 a1 e1) x (t2tb2949 y)) r)
  (and (mem a2 x u) (mem44 y v)))))
  (=>
  (forall ((x uni) (y (tuple21 a e)))
  (=> (sort a2 x)
  (=> (mem (tuple2 a2 (tuple2 a1 e1))
  (Tuple2 a2 (tuple2 a1 e1) x (t2tb2949 y)) r)
  (and (mem a2 x u) (mem44 y v))))) (mem (set1 (tuple2 a2 (tuple2 a1 e1))) r
  (relation (tuple2 a1 e1) a2 u (t2tb2943 v))))))))

;; mem_relation
  (assert
  (forall ((a2 ty))
  (forall ((u uni) (v (set e)) (r uni))
  (and
  (=> (mem (set1 (tuple2 a2 e1)) r (relation e1 a2 u (t2tb2947 v)))
  (forall ((x uni) (y e))
  (=> (mem (tuple2 a2 e1) (Tuple2 a2 e1 x (t2tb2955 y)) r)
  (and (mem a2 x u) (mem36 y v)))))
  (=>
  (forall ((x uni) (y e))
  (=> (sort a2 x)
  (=> (mem (tuple2 a2 e1) (Tuple2 a2 e1 x (t2tb2955 y)) r)
  (and (mem a2 x u) (mem36 y v))))) (mem (set1 (tuple2 a2 e1)) r
  (relation e1 a2 u (t2tb2947 v))))))))

;; mem_relation
  (assert
  (forall ((a2 ty))
  (forall ((u uni) (v (set (tuple21 a d))) (r uni))
  (and
  (=> (mem (set1 (tuple2 a2 (tuple2 a1 d1))) r
  (relation (tuple2 a1 d1) a2 u (t2tb903 v)))
  (forall ((x uni) (y (tuple21 a d)))
  (=> (mem (tuple2 a2 (tuple2 a1 d1))
  (Tuple2 a2 (tuple2 a1 d1) x (t2tb904 y)) r) (and (mem a2 x u) (mem32 y v)))))
  (=>
  (forall ((x uni) (y (tuple21 a d)))
  (=> (sort a2 x)
  (=> (mem (tuple2 a2 (tuple2 a1 d1))
  (Tuple2 a2 (tuple2 a1 d1) x (t2tb904 y)) r) (and (mem a2 x u) (mem32 y v)))))
  (mem (set1 (tuple2 a2 (tuple2 a1 d1))) r
  (relation (tuple2 a1 d1) a2 u (t2tb903 v))))))))

;; mem_relation
  (assert
  (forall ((a2 ty))
  (forall ((u uni) (v (set (set (tuple21 b d)))) (r uni))
  (and
  (=> (mem (set1 (tuple2 a2 (set1 (tuple2 b1 d1)))) r
  (relation (set1 (tuple2 b1 d1)) a2 u (t2tb906 v)))
  (forall ((x uni) (y (set (tuple21 b d))))
  (=> (mem (tuple2 a2 (set1 (tuple2 b1 d1)))
  (Tuple2 a2 (set1 (tuple2 b1 d1)) x (t2tb687 y)) r)
  (and (mem a2 x u) (mem33 y v)))))
  (=>
  (forall ((x uni) (y (set (tuple21 b d))))
  (=> (sort a2 x)
  (=> (mem (tuple2 a2 (set1 (tuple2 b1 d1)))
  (Tuple2 a2 (set1 (tuple2 b1 d1)) x (t2tb687 y)) r)
  (and (mem a2 x u) (mem33 y v))))) (mem
  (set1 (tuple2 a2 (set1 (tuple2 b1 d1)))) r
  (relation (set1 (tuple2 b1 d1)) a2 u (t2tb906 v))))))))

;; mem_relation
  (assert
  (forall ((a2 ty))
  (forall ((u uni) (v (set (tuple21 b d))) (r uni))
  (and
  (=> (mem (set1 (tuple2 a2 (tuple2 b1 d1))) r
  (relation (tuple2 b1 d1) a2 u (t2tb687 v)))
  (forall ((x uni) (y (tuple21 b d)))
  (=> (mem (tuple2 a2 (tuple2 b1 d1))
  (Tuple2 a2 (tuple2 b1 d1) x (t2tb692 y)) r) (and (mem a2 x u) (mem23 y v)))))
  (=>
  (forall ((x uni) (y (tuple21 b d)))
  (=> (sort a2 x)
  (=> (mem (tuple2 a2 (tuple2 b1 d1))
  (Tuple2 a2 (tuple2 b1 d1) x (t2tb692 y)) r) (and (mem a2 x u) (mem23 y v)))))
  (mem (set1 (tuple2 a2 (tuple2 b1 d1))) r
  (relation (tuple2 b1 d1) a2 u (t2tb687 v))))))))

;; mem_relation
  (assert
  (forall ((a2 ty))
  (forall ((u uni) (v (set d)) (r uni))
  (and
  (=> (mem (set1 (tuple2 a2 d1)) r (relation d1 a2 u (t2tb690 v)))
  (forall ((x uni) (y d))
  (=> (mem (tuple2 a2 d1) (Tuple2 a2 d1 x (t2tb694 y)) r)
  (and (mem a2 x u) (mem20 y v)))))
  (=>
  (forall ((x uni) (y d))
  (=> (sort a2 x)
  (=> (mem (tuple2 a2 d1) (Tuple2 a2 d1 x (t2tb694 y)) r)
  (and (mem a2 x u) (mem20 y v))))) (mem (set1 (tuple2 a2 d1)) r
  (relation d1 a2 u (t2tb690 v))))))))

;; mem_relation
  (assert
  (forall ((a2 ty))
  (forall ((u uni) (v (set (tuple21 a (tuple21 b c)))) (r uni))
  (and
  (=> (mem (set1 (tuple2 a2 (tuple2 a1 (tuple2 b1 c1)))) r
  (relation (tuple2 a1 (tuple2 b1 c1)) a2 u (t2tb261 v)))
  (forall ((x uni) (y (tuple21 a (tuple21 b c))))
  (=> (mem (tuple2 a2 (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 a2 (tuple2 a1 (tuple2 b1 c1)) x (t2tb260 y)) r)
  (and (mem a2 x u) (mem14 y v)))))
  (=>
  (forall ((x uni) (y (tuple21 a (tuple21 b c))))
  (=> (sort a2 x)
  (=> (mem (tuple2 a2 (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 a2 (tuple2 a1 (tuple2 b1 c1)) x (t2tb260 y)) r)
  (and (mem a2 x u) (mem14 y v))))) (mem
  (set1 (tuple2 a2 (tuple2 a1 (tuple2 b1 c1)))) r
  (relation (tuple2 a1 (tuple2 b1 c1)) a2 u (t2tb261 v))))))))

;; mem_relation
  (assert
  (forall ((a2 ty))
  (forall ((u uni) (v (set (set (tuple21 a c)))) (r uni))
  (and
  (=> (mem (set1 (tuple2 a2 (set1 (tuple2 a1 c1)))) r
  (relation (set1 (tuple2 a1 c1)) a2 u (t2tb128 v)))
  (forall ((x uni) (y (set (tuple21 a c))))
  (=> (mem (tuple2 a2 (set1 (tuple2 a1 c1)))
  (Tuple2 a2 (set1 (tuple2 a1 c1)) x (t2tb129 y)) r)
  (and (mem a2 x u) (mem11 y v)))))
  (=>
  (forall ((x uni) (y (set (tuple21 a c))))
  (=> (sort a2 x)
  (=> (mem (tuple2 a2 (set1 (tuple2 a1 c1)))
  (Tuple2 a2 (set1 (tuple2 a1 c1)) x (t2tb129 y)) r)
  (and (mem a2 x u) (mem11 y v))))) (mem
  (set1 (tuple2 a2 (set1 (tuple2 a1 c1)))) r
  (relation (set1 (tuple2 a1 c1)) a2 u (t2tb128 v))))))))

;; mem_relation
  (assert
  (forall ((a2 ty))
  (forall ((u uni) (v (set (tuple21 a c))) (r uni))
  (and
  (=> (mem (set1 (tuple2 a2 (tuple2 a1 c1))) r
  (relation (tuple2 a1 c1) a2 u (t2tb129 v)))
  (forall ((x uni) (y (tuple21 a c)))
  (=> (mem (tuple2 a2 (tuple2 a1 c1))
  (Tuple2 a2 (tuple2 a1 c1) x (t2tb133 y)) r) (and (mem a2 x u) (mem10 y v)))))
  (=>
  (forall ((x uni) (y (tuple21 a c)))
  (=> (sort a2 x)
  (=> (mem (tuple2 a2 (tuple2 a1 c1))
  (Tuple2 a2 (tuple2 a1 c1) x (t2tb133 y)) r) (and (mem a2 x u) (mem10 y v)))))
  (mem (set1 (tuple2 a2 (tuple2 a1 c1))) r
  (relation (tuple2 a1 c1) a2 u (t2tb129 v))))))))

;; mem_relation
  (assert
  (forall ((a2 ty))
  (forall ((u uni) (v (set c)) (r uni))
  (and
  (=> (mem (set1 (tuple2 a2 c1)) r (relation c1 a2 u (t2tb132 v)))
  (forall ((x uni) (y c))
  (=> (mem (tuple2 a2 c1) (Tuple2 a2 c1 x (t2tb135 y)) r)
  (and (mem a2 x u) (mem7 y v)))))
  (=>
  (forall ((x uni) (y c))
  (=> (sort a2 x)
  (=> (mem (tuple2 a2 c1) (Tuple2 a2 c1 x (t2tb135 y)) r)
  (and (mem a2 x u) (mem7 y v))))) (mem (set1 (tuple2 a2 c1)) r
  (relation c1 a2 u (t2tb132 v))))))))

;; mem_relation
  (assert
  (forall ((a2 ty))
  (forall ((u uni) (v (set (set (tuple21 a b)))) (r uni))
  (and
  (=> (mem (set1 (tuple2 a2 (set1 (tuple2 a1 b1)))) r
  (relation (set1 (tuple2 a1 b1)) a2 u (t2tb10 v)))
  (forall ((x uni) (y (set (tuple21 a b))))
  (=> (mem (tuple2 a2 (set1 (tuple2 a1 b1)))
  (Tuple2 a2 (set1 (tuple2 a1 b1)) x (t2tb11 y)) r)
  (and (mem a2 x u) (mem4 y v)))))
  (=>
  (forall ((x uni) (y (set (tuple21 a b))))
  (=> (sort a2 x)
  (=> (mem (tuple2 a2 (set1 (tuple2 a1 b1)))
  (Tuple2 a2 (set1 (tuple2 a1 b1)) x (t2tb11 y)) r)
  (and (mem a2 x u) (mem4 y v))))) (mem
  (set1 (tuple2 a2 (set1 (tuple2 a1 b1)))) r
  (relation (set1 (tuple2 a1 b1)) a2 u (t2tb10 v))))))))

;; mem_relation
  (assert
  (forall ((a2 ty))
  (forall ((u uni) (v (set (tuple21 a b))) (r uni))
  (and
  (=> (mem (set1 (tuple2 a2 (tuple2 a1 b1))) r
  (relation (tuple2 a1 b1) a2 u (t2tb11 v)))
  (forall ((x uni) (y (tuple21 a b)))
  (=> (mem (tuple2 a2 (tuple2 a1 b1)) (Tuple2 a2 (tuple2 a1 b1) x (t2tb13 y))
  r) (and (mem a2 x u) (mem3 y v)))))
  (=>
  (forall ((x uni) (y (tuple21 a b)))
  (=> (sort a2 x)
  (=> (mem (tuple2 a2 (tuple2 a1 b1)) (Tuple2 a2 (tuple2 a1 b1) x (t2tb13 y))
  r) (and (mem a2 x u) (mem3 y v))))) (mem (set1 (tuple2 a2 (tuple2 a1 b1)))
  r (relation (tuple2 a1 b1) a2 u (t2tb11 v))))))))

;; mem_relation
  (assert
  (forall ((a2 ty))
  (forall ((u uni) (v (set b)) (r uni))
  (and
  (=> (mem (set1 (tuple2 a2 b1)) r (relation b1 a2 u (t2tb12 v)))
  (forall ((x uni) (y b))
  (=> (mem (tuple2 a2 b1) (Tuple2 a2 b1 x (t2tb14 y)) r)
  (and (mem a2 x u) (mem2 y v)))))
  (=>
  (forall ((x uni) (y b))
  (=> (sort a2 x)
  (=> (mem (tuple2 a2 b1) (Tuple2 a2 b1 x (t2tb14 y)) r)
  (and (mem a2 x u) (mem2 y v))))) (mem (set1 (tuple2 a2 b1)) r
  (relation b1 a2 u (t2tb12 v))))))))

;; mem_relation
  (assert
  (forall ((a2 ty))
  (forall ((u uni) (v (set a)) (r uni))
  (and
  (=> (mem (set1 (tuple2 a2 a1)) r (relation a1 a2 u (t2tb1 v)))
  (forall ((x uni) (y a))
  (=> (mem (tuple2 a2 a1) (Tuple2 a2 a1 x (t2tb2 y)) r)
  (and (mem a2 x u) (mem1 y v)))))
  (=>
  (forall ((x uni) (y a))
  (=> (sort a2 x)
  (=> (mem (tuple2 a2 a1) (Tuple2 a2 a1 x (t2tb2 y)) r)
  (and (mem a2 x u) (mem1 y v))))) (mem (set1 (tuple2 a2 a1)) r
  (relation a1 a2 u (t2tb1 v))))))))

(declare-fun t2tb4587 ((set (set (tuple21 (tuple21 (tuple21 b c) (tuple21 d
  e)) (tuple21 (tuple21 b c) (tuple21 d e)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 (tuple21 b c) (tuple21 d e))
  (tuple21 (tuple21 b c) (tuple21 d e))))))) (sort
  (set1
  (set1
  (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1))
  (tuple2 (tuple2 b1 c1) (tuple2 d1 e1))))) (t2tb4587 x))))

(declare-fun tb2t4587 (uni) (set (set (tuple21 (tuple21 (tuple21 b c)
  (tuple21 d e)) (tuple21 (tuple21 b c) (tuple21 d e))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 (tuple21 b c) (tuple21 d e))
  (tuple21 (tuple21 b c) (tuple21 d e)))))))
  (! (= (tb2t4587 (t2tb4587 i)) i) :pattern ((t2tb4587 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (set1
     (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1))
     (tuple2 (tuple2 b1 c1) (tuple2 d1 e1))))) j)
     (= (t2tb4587 (tb2t4587 j)) j)) :pattern ((t2tb4587 (tb2t4587 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 (tuple21 b c) (tuple21 d e))))
  (v (set (tuple21 (tuple21 b c) (tuple21 d e))))
  (r (set (tuple21 (tuple21 (tuple21 b c) (tuple21 d e)) (tuple21 (tuple21 b
  c) (tuple21 d e))))))
  (= (mem
  (set1
  (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1))
  (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)))) (t2tb4106 r)
  (relation (tuple2 (tuple2 b1 c1) (tuple2 d1 e1))
  (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (t2tb4102 u) (t2tb4102 v)))
  (forall ((x (tuple21 (tuple21 b c) (tuple21 d e))) (y (tuple21 (tuple21 b
  c) (tuple21 d e))))
  (=> (mem
  (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1))
  (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)))
  (Tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1))
  (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (t2tb4104 x) (t2tb4104 y))
  (t2tb4106 r)) (and (mem49 x u) (mem49 y v)))))))

(declare-fun t2tb4588 ((set (set (tuple21 (tuple21 (tuple21 b c) (tuple21 d
  e)) (tuple21 a (tuple21 d e)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 (tuple21 b c) (tuple21 d e))
  (tuple21 a (tuple21 d e))))))) (sort
  (set1
  (set1
  (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (tuple2 a1 (tuple2 d1 e1)))))
  (t2tb4588 x))))

(declare-fun tb2t4588 (uni) (set (set (tuple21 (tuple21 (tuple21 b c)
  (tuple21 d e)) (tuple21 a (tuple21 d e))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 (tuple21 b c) (tuple21 d e))
  (tuple21 a (tuple21 d e)))))))
  (! (= (tb2t4588 (t2tb4588 i)) i) :pattern ((t2tb4588 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (set1
     (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1))
     (tuple2 a1 (tuple2 d1 e1))))) j) (= (t2tb4588 (tb2t4588 j)) j)) :pattern (
  (t2tb4588 (tb2t4588 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 (tuple21 b c) (tuple21 d e)))) (v (set (tuple21 a
  (tuple21 d e)))) (r (set (tuple21 (tuple21 (tuple21 b c) (tuple21 d e))
  (tuple21 a (tuple21 d e))))))
  (= (mem
  (set1
  (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (tuple2 a1 (tuple2 d1 e1))))
  (t2tb4108 r)
  (relation (tuple2 a1 (tuple2 d1 e1)) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1))
  (t2tb4102 u) (t2tb4103 v)))
  (forall ((x (tuple21 (tuple21 b c) (tuple21 d e))) (y (tuple21 a (tuple21 d
  e))))
  (=> (mem
  (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (tuple2 a1 (tuple2 d1 e1)))
  (Tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (tuple2 a1 (tuple2 d1 e1))
  (t2tb4104 x) (t2tb4105 y)) (t2tb4108 r)) (and (mem49 x u) (mem48 y v)))))))

(declare-fun t2tb4589 ((set (set (tuple21 (tuple21 (tuple21 b c) (tuple21 d
  e)) (set (tuple21 c e)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 (tuple21 b c) (tuple21 d e))
  (set (tuple21 c e))))))) (sort
  (set1
  (set1
  (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (set1 (tuple2 c1 e1)))))
  (t2tb4589 x))))

(declare-fun tb2t4589 (uni) (set (set (tuple21 (tuple21 (tuple21 b c)
  (tuple21 d e)) (set (tuple21 c e))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 (tuple21 b c) (tuple21 d e))
  (set (tuple21 c e)))))))
  (! (= (tb2t4589 (t2tb4589 i)) i) :pattern ((t2tb4589 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (set1
     (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (set1 (tuple2 c1 e1)))))
     j) (= (t2tb4589 (tb2t4589 j)) j)) :pattern ((t2tb4589 (tb2t4589 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 (tuple21 b c) (tuple21 d e))))
  (v (set (set (tuple21 c e)))) (r (set (tuple21 (tuple21 (tuple21 b c)
  (tuple21 d e)) (set (tuple21 c e))))))
  (= (mem
  (set1
  (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (set1 (tuple2 c1 e1))))
  (t2tb4110 r)
  (relation (set1 (tuple2 c1 e1)) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1))
  (t2tb4102 u) (t2tb3854 v)))
  (forall ((x (tuple21 (tuple21 b c) (tuple21 d e))) (y (set (tuple21 c e))))
  (=> (mem
  (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (set1 (tuple2 c1 e1)))
  (Tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (set1 (tuple2 c1 e1))
  (t2tb4104 x) (t2tb3478 y)) (t2tb4110 r)) (and (mem49 x u) (mem47 y v)))))))

(declare-fun t2tb4590 ((set (set (tuple21 (tuple21 (tuple21 b c) (tuple21 d
  e)) (tuple21 c e))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 (tuple21 b c) (tuple21 d e))
  (tuple21 c e)))))) (sort
  (set1
  (set1 (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (tuple2 c1 e1))))
  (t2tb4590 x))))

(declare-fun tb2t4590 (uni) (set (set (tuple21 (tuple21 (tuple21 b c)
  (tuple21 d e)) (tuple21 c e)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 (tuple21 b c) (tuple21 d e))
  (tuple21 c e))))))
  (! (= (tb2t4590 (t2tb4590 i)) i) :pattern ((t2tb4590 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (set1 (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (tuple2 c1 e1))))
     j) (= (t2tb4590 (tb2t4590 j)) j)) :pattern ((t2tb4590 (tb2t4590 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 (tuple21 b c) (tuple21 d e)))) (v (set (tuple21 c
  e))) (r (set (tuple21 (tuple21 (tuple21 b c) (tuple21 d e)) (tuple21 c
  e)))))
  (= (mem
  (set1 (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (tuple2 c1 e1)))
  (t2tb4112 r)
  (relation (tuple2 c1 e1) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1))
  (t2tb4102 u) (t2tb3478 v)))
  (forall ((x (tuple21 (tuple21 b c) (tuple21 d e))) (y (tuple21 c e)))
  (=> (mem (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (tuple2 c1 e1))
  (Tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (tuple2 c1 e1) (t2tb4104 x)
  (t2tb3479 y)) (t2tb4112 r)) (and (mem49 x u) (mem46 y v)))))))

(declare-fun t2tb4591 ((set (set (tuple21 (tuple21 (tuple21 b c) (tuple21 d
  e)) (tuple21 a e))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 (tuple21 b c) (tuple21 d e))
  (tuple21 a e)))))) (sort
  (set1
  (set1 (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (tuple2 a1 e1))))
  (t2tb4591 x))))

(declare-fun tb2t4591 (uni) (set (set (tuple21 (tuple21 (tuple21 b c)
  (tuple21 d e)) (tuple21 a e)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 (tuple21 b c) (tuple21 d e))
  (tuple21 a e))))))
  (! (= (tb2t4591 (t2tb4591 i)) i) :pattern ((t2tb4591 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (set1 (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (tuple2 a1 e1))))
     j) (= (t2tb4591 (tb2t4591 j)) j)) :pattern ((t2tb4591 (tb2t4591 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 (tuple21 b c) (tuple21 d e)))) (v (set (tuple21 a
  e))) (r (set (tuple21 (tuple21 (tuple21 b c) (tuple21 d e)) (tuple21 a
  e)))))
  (= (mem
  (set1 (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (tuple2 a1 e1)))
  (t2tb4114 r)
  (relation (tuple2 a1 e1) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1))
  (t2tb4102 u) (t2tb2943 v)))
  (forall ((x (tuple21 (tuple21 b c) (tuple21 d e))) (y (tuple21 a e)))
  (=> (mem (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (tuple2 a1 e1))
  (Tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (tuple2 a1 e1) (t2tb4104 x)
  (t2tb2949 y)) (t2tb4114 r)) (and (mem49 x u) (mem44 y v)))))))

(declare-fun t2tb4592 ((set (set (tuple21 (tuple21 (tuple21 b c) (tuple21 d
  e)) e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 (tuple21 b c) (tuple21 d e)) e)))))
  (sort (set1 (set1 (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) e1)))
  (t2tb4592 x))))

(declare-fun tb2t4592 (uni) (set (set (tuple21 (tuple21 (tuple21 b c)
  (tuple21 d e)) e))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 (tuple21 b c) (tuple21 d e)) e)))))
  (! (= (tb2t4592 (t2tb4592 i)) i) :pattern ((t2tb4592 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) e1))) j)
     (= (t2tb4592 (tb2t4592 j)) j)) :pattern ((t2tb4592 (tb2t4592 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 (tuple21 b c) (tuple21 d e)))) (v (set e))
  (r (set (tuple21 (tuple21 (tuple21 b c) (tuple21 d e)) e))))
  (= (mem (set1 (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) e1))
  (t2tb4116 r)
  (relation e1 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (t2tb4102 u)
  (t2tb2947 v)))
  (forall ((x (tuple21 (tuple21 b c) (tuple21 d e))) (y e))
  (=> (mem (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) e1)
  (Tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) e1 (t2tb4104 x)
  (t2tb2955 y)) (t2tb4116 r)) (and (mem49 x u) (mem36 y v)))))))

(declare-fun t2tb4593 ((set (set (tuple21 (tuple21 (tuple21 b c) (tuple21 d
  e)) (tuple21 a d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 (tuple21 b c) (tuple21 d e))
  (tuple21 a d)))))) (sort
  (set1
  (set1 (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (tuple2 a1 d1))))
  (t2tb4593 x))))

(declare-fun tb2t4593 (uni) (set (set (tuple21 (tuple21 (tuple21 b c)
  (tuple21 d e)) (tuple21 a d)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 (tuple21 b c) (tuple21 d e))
  (tuple21 a d))))))
  (! (= (tb2t4593 (t2tb4593 i)) i) :pattern ((t2tb4593 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (set1 (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (tuple2 a1 d1))))
     j) (= (t2tb4593 (tb2t4593 j)) j)) :pattern ((t2tb4593 (tb2t4593 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 (tuple21 b c) (tuple21 d e)))) (v (set (tuple21 a
  d))) (r (set (tuple21 (tuple21 (tuple21 b c) (tuple21 d e)) (tuple21 a
  d)))))
  (= (mem
  (set1 (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (tuple2 a1 d1)))
  (t2tb4118 r)
  (relation (tuple2 a1 d1) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1))
  (t2tb4102 u) (t2tb903 v)))
  (forall ((x (tuple21 (tuple21 b c) (tuple21 d e))) (y (tuple21 a d)))
  (=> (mem (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (tuple2 a1 d1))
  (Tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (tuple2 a1 d1) (t2tb4104 x)
  (t2tb904 y)) (t2tb4118 r)) (and (mem49 x u) (mem32 y v)))))))

(declare-fun t2tb4594 ((set (set (tuple21 (tuple21 (tuple21 b c) (tuple21 d
  e)) (set (tuple21 b d)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 (tuple21 b c) (tuple21 d e))
  (set (tuple21 b d))))))) (sort
  (set1
  (set1
  (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (set1 (tuple2 b1 d1)))))
  (t2tb4594 x))))

(declare-fun tb2t4594 (uni) (set (set (tuple21 (tuple21 (tuple21 b c)
  (tuple21 d e)) (set (tuple21 b d))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 (tuple21 b c) (tuple21 d e))
  (set (tuple21 b d)))))))
  (! (= (tb2t4594 (t2tb4594 i)) i) :pattern ((t2tb4594 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (set1
     (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (set1 (tuple2 b1 d1)))))
     j) (= (t2tb4594 (tb2t4594 j)) j)) :pattern ((t2tb4594 (tb2t4594 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 (tuple21 b c) (tuple21 d e))))
  (v (set (set (tuple21 b d)))) (r (set (tuple21 (tuple21 (tuple21 b c)
  (tuple21 d e)) (set (tuple21 b d))))))
  (= (mem
  (set1
  (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (set1 (tuple2 b1 d1))))
  (t2tb4120 r)
  (relation (set1 (tuple2 b1 d1)) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1))
  (t2tb4102 u) (t2tb906 v)))
  (forall ((x (tuple21 (tuple21 b c) (tuple21 d e))) (y (set (tuple21 b d))))
  (=> (mem
  (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (set1 (tuple2 b1 d1)))
  (Tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (set1 (tuple2 b1 d1))
  (t2tb4104 x) (t2tb687 y)) (t2tb4120 r)) (and (mem49 x u) (mem33 y v)))))))

(declare-fun t2tb4595 ((set (set (tuple21 (tuple21 (tuple21 b c) (tuple21 d
  e)) (tuple21 b d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 (tuple21 b c) (tuple21 d e))
  (tuple21 b d)))))) (sort
  (set1
  (set1 (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (tuple2 b1 d1))))
  (t2tb4595 x))))

(declare-fun tb2t4595 (uni) (set (set (tuple21 (tuple21 (tuple21 b c)
  (tuple21 d e)) (tuple21 b d)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 (tuple21 b c) (tuple21 d e))
  (tuple21 b d))))))
  (! (= (tb2t4595 (t2tb4595 i)) i) :pattern ((t2tb4595 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (set1 (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (tuple2 b1 d1))))
     j) (= (t2tb4595 (tb2t4595 j)) j)) :pattern ((t2tb4595 (tb2t4595 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 (tuple21 b c) (tuple21 d e)))) (v (set (tuple21 b
  d))) (r (set (tuple21 (tuple21 (tuple21 b c) (tuple21 d e)) (tuple21 b
  d)))))
  (= (mem
  (set1 (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (tuple2 b1 d1)))
  (t2tb4122 r)
  (relation (tuple2 b1 d1) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1))
  (t2tb4102 u) (t2tb687 v)))
  (forall ((x (tuple21 (tuple21 b c) (tuple21 d e))) (y (tuple21 b d)))
  (=> (mem (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (tuple2 b1 d1))
  (Tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (tuple2 b1 d1) (t2tb4104 x)
  (t2tb692 y)) (t2tb4122 r)) (and (mem49 x u) (mem23 y v)))))))

(declare-fun t2tb4596 ((set (set (tuple21 (tuple21 (tuple21 b c) (tuple21 d
  e)) d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 (tuple21 b c) (tuple21 d e)) d)))))
  (sort (set1 (set1 (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) d1)))
  (t2tb4596 x))))

(declare-fun tb2t4596 (uni) (set (set (tuple21 (tuple21 (tuple21 b c)
  (tuple21 d e)) d))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 (tuple21 b c) (tuple21 d e)) d)))))
  (! (= (tb2t4596 (t2tb4596 i)) i) :pattern ((t2tb4596 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) d1))) j)
     (= (t2tb4596 (tb2t4596 j)) j)) :pattern ((t2tb4596 (tb2t4596 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 (tuple21 b c) (tuple21 d e)))) (v (set d))
  (r (set (tuple21 (tuple21 (tuple21 b c) (tuple21 d e)) d))))
  (= (mem (set1 (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) d1))
  (t2tb4124 r)
  (relation d1 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (t2tb4102 u)
  (t2tb690 v)))
  (forall ((x (tuple21 (tuple21 b c) (tuple21 d e))) (y d))
  (=> (mem (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) d1)
  (Tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) d1 (t2tb4104 x) (t2tb694 y))
  (t2tb4124 r)) (and (mem49 x u) (mem20 y v)))))))

(declare-fun t2tb4597 ((set (set (tuple21 (tuple21 (tuple21 b c) (tuple21 d
  e)) (tuple21 a (tuple21 b c)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 (tuple21 b c) (tuple21 d e))
  (tuple21 a (tuple21 b c))))))) (sort
  (set1
  (set1
  (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (tuple2 a1 (tuple2 b1 c1)))))
  (t2tb4597 x))))

(declare-fun tb2t4597 (uni) (set (set (tuple21 (tuple21 (tuple21 b c)
  (tuple21 d e)) (tuple21 a (tuple21 b c))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 (tuple21 b c) (tuple21 d e))
  (tuple21 a (tuple21 b c)))))))
  (! (= (tb2t4597 (t2tb4597 i)) i) :pattern ((t2tb4597 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (set1
     (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1))
     (tuple2 a1 (tuple2 b1 c1))))) j) (= (t2tb4597 (tb2t4597 j)) j)) :pattern (
  (t2tb4597 (tb2t4597 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 (tuple21 b c) (tuple21 d e)))) (v (set (tuple21 a
  (tuple21 b c)))) (r (set (tuple21 (tuple21 (tuple21 b c) (tuple21 d e))
  (tuple21 a (tuple21 b c))))))
  (= (mem
  (set1
  (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (tuple2 a1 (tuple2 b1 c1))))
  (t2tb4126 r)
  (relation (tuple2 a1 (tuple2 b1 c1)) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1))
  (t2tb4102 u) (t2tb261 v)))
  (forall ((x (tuple21 (tuple21 b c) (tuple21 d e))) (y (tuple21 a (tuple21 b
  c))))
  (=> (mem
  (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (tuple2 a1 (tuple2 b1 c1))
  (t2tb4104 x) (t2tb260 y)) (t2tb4126 r)) (and (mem49 x u) (mem14 y v)))))))

(declare-fun t2tb4598 ((set (set (tuple21 (tuple21 (tuple21 b c) (tuple21 d
  e)) (set (tuple21 a c)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 (tuple21 b c) (tuple21 d e))
  (set (tuple21 a c))))))) (sort
  (set1
  (set1
  (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (set1 (tuple2 a1 c1)))))
  (t2tb4598 x))))

(declare-fun tb2t4598 (uni) (set (set (tuple21 (tuple21 (tuple21 b c)
  (tuple21 d e)) (set (tuple21 a c))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 (tuple21 b c) (tuple21 d e))
  (set (tuple21 a c)))))))
  (! (= (tb2t4598 (t2tb4598 i)) i) :pattern ((t2tb4598 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (set1
     (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (set1 (tuple2 a1 c1)))))
     j) (= (t2tb4598 (tb2t4598 j)) j)) :pattern ((t2tb4598 (tb2t4598 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 (tuple21 b c) (tuple21 d e))))
  (v (set (set (tuple21 a c)))) (r (set (tuple21 (tuple21 (tuple21 b c)
  (tuple21 d e)) (set (tuple21 a c))))))
  (= (mem
  (set1
  (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (set1 (tuple2 a1 c1))))
  (t2tb4128 r)
  (relation (set1 (tuple2 a1 c1)) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1))
  (t2tb4102 u) (t2tb128 v)))
  (forall ((x (tuple21 (tuple21 b c) (tuple21 d e))) (y (set (tuple21 a c))))
  (=> (mem
  (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (set1 (tuple2 a1 c1)))
  (Tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (set1 (tuple2 a1 c1))
  (t2tb4104 x) (t2tb129 y)) (t2tb4128 r)) (and (mem49 x u) (mem11 y v)))))))

(declare-fun t2tb4599 ((set (set (tuple21 (tuple21 (tuple21 b c) (tuple21 d
  e)) (tuple21 a c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 (tuple21 b c) (tuple21 d e))
  (tuple21 a c)))))) (sort
  (set1
  (set1 (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (tuple2 a1 c1))))
  (t2tb4599 x))))

(declare-fun tb2t4599 (uni) (set (set (tuple21 (tuple21 (tuple21 b c)
  (tuple21 d e)) (tuple21 a c)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 (tuple21 b c) (tuple21 d e))
  (tuple21 a c))))))
  (! (= (tb2t4599 (t2tb4599 i)) i) :pattern ((t2tb4599 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (set1 (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (tuple2 a1 c1))))
     j) (= (t2tb4599 (tb2t4599 j)) j)) :pattern ((t2tb4599 (tb2t4599 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 (tuple21 b c) (tuple21 d e)))) (v (set (tuple21 a
  c))) (r (set (tuple21 (tuple21 (tuple21 b c) (tuple21 d e)) (tuple21 a
  c)))))
  (= (mem
  (set1 (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (tuple2 a1 c1)))
  (t2tb4130 r)
  (relation (tuple2 a1 c1) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1))
  (t2tb4102 u) (t2tb129 v)))
  (forall ((x (tuple21 (tuple21 b c) (tuple21 d e))) (y (tuple21 a c)))
  (=> (mem (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (tuple2 a1 c1))
  (Tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (tuple2 a1 c1) (t2tb4104 x)
  (t2tb133 y)) (t2tb4130 r)) (and (mem49 x u) (mem10 y v)))))))

(declare-fun t2tb4600 ((set (set (tuple21 (tuple21 (tuple21 b c) (tuple21 d
  e)) c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 (tuple21 b c) (tuple21 d e)) c)))))
  (sort (set1 (set1 (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) c1)))
  (t2tb4600 x))))

(declare-fun tb2t4600 (uni) (set (set (tuple21 (tuple21 (tuple21 b c)
  (tuple21 d e)) c))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 (tuple21 b c) (tuple21 d e)) c)))))
  (! (= (tb2t4600 (t2tb4600 i)) i) :pattern ((t2tb4600 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) c1))) j)
     (= (t2tb4600 (tb2t4600 j)) j)) :pattern ((t2tb4600 (tb2t4600 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 (tuple21 b c) (tuple21 d e)))) (v (set c))
  (r (set (tuple21 (tuple21 (tuple21 b c) (tuple21 d e)) c))))
  (= (mem (set1 (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) c1))
  (t2tb4132 r)
  (relation c1 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (t2tb4102 u)
  (t2tb132 v)))
  (forall ((x (tuple21 (tuple21 b c) (tuple21 d e))) (y c))
  (=> (mem (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) c1)
  (Tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) c1 (t2tb4104 x) (t2tb135 y))
  (t2tb4132 r)) (and (mem49 x u) (mem7 y v)))))))

(declare-fun t2tb4601 ((set (set (tuple21 (tuple21 (tuple21 b c) (tuple21 d
  e)) (set (tuple21 a b)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 (tuple21 b c) (tuple21 d e))
  (set (tuple21 a b))))))) (sort
  (set1
  (set1
  (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (set1 (tuple2 a1 b1)))))
  (t2tb4601 x))))

(declare-fun tb2t4601 (uni) (set (set (tuple21 (tuple21 (tuple21 b c)
  (tuple21 d e)) (set (tuple21 a b))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 (tuple21 b c) (tuple21 d e))
  (set (tuple21 a b)))))))
  (! (= (tb2t4601 (t2tb4601 i)) i) :pattern ((t2tb4601 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (set1
     (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (set1 (tuple2 a1 b1)))))
     j) (= (t2tb4601 (tb2t4601 j)) j)) :pattern ((t2tb4601 (tb2t4601 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 (tuple21 b c) (tuple21 d e))))
  (v (set (set (tuple21 a b)))) (r (set (tuple21 (tuple21 (tuple21 b c)
  (tuple21 d e)) (set (tuple21 a b))))))
  (= (mem
  (set1
  (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (set1 (tuple2 a1 b1))))
  (t2tb4134 r)
  (relation (set1 (tuple2 a1 b1)) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1))
  (t2tb4102 u) (t2tb10 v)))
  (forall ((x (tuple21 (tuple21 b c) (tuple21 d e))) (y (set (tuple21 a b))))
  (=> (mem
  (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (set1 (tuple2 a1 b1)))
  (Tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (set1 (tuple2 a1 b1))
  (t2tb4104 x) (t2tb11 y)) (t2tb4134 r)) (and (mem49 x u) (mem4 y v)))))))

(declare-fun t2tb4602 ((set (set (tuple21 (tuple21 (tuple21 b c) (tuple21 d
  e)) (tuple21 a b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 (tuple21 b c) (tuple21 d e))
  (tuple21 a b)))))) (sort
  (set1
  (set1 (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (tuple2 a1 b1))))
  (t2tb4602 x))))

(declare-fun tb2t4602 (uni) (set (set (tuple21 (tuple21 (tuple21 b c)
  (tuple21 d e)) (tuple21 a b)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 (tuple21 b c) (tuple21 d e))
  (tuple21 a b))))))
  (! (= (tb2t4602 (t2tb4602 i)) i) :pattern ((t2tb4602 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (set1 (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (tuple2 a1 b1))))
     j) (= (t2tb4602 (tb2t4602 j)) j)) :pattern ((t2tb4602 (tb2t4602 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 (tuple21 b c) (tuple21 d e)))) (v (set (tuple21 a
  b))) (r (set (tuple21 (tuple21 (tuple21 b c) (tuple21 d e)) (tuple21 a
  b)))))
  (= (mem
  (set1 (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (tuple2 a1 b1)))
  (t2tb4136 r)
  (relation (tuple2 a1 b1) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1))
  (t2tb4102 u) (t2tb11 v)))
  (forall ((x (tuple21 (tuple21 b c) (tuple21 d e))) (y (tuple21 a b)))
  (=> (mem (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (tuple2 a1 b1))
  (Tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (tuple2 a1 b1) (t2tb4104 x)
  (t2tb13 y)) (t2tb4136 r)) (and (mem49 x u) (mem3 y v)))))))

(declare-fun t2tb4603 ((set (set (tuple21 (tuple21 (tuple21 b c) (tuple21 d
  e)) b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 (tuple21 b c) (tuple21 d e)) b)))))
  (sort (set1 (set1 (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) b1)))
  (t2tb4603 x))))

(declare-fun tb2t4603 (uni) (set (set (tuple21 (tuple21 (tuple21 b c)
  (tuple21 d e)) b))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 (tuple21 b c) (tuple21 d e)) b)))))
  (! (= (tb2t4603 (t2tb4603 i)) i) :pattern ((t2tb4603 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) b1))) j)
     (= (t2tb4603 (tb2t4603 j)) j)) :pattern ((t2tb4603 (tb2t4603 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 (tuple21 b c) (tuple21 d e)))) (v (set b))
  (r (set (tuple21 (tuple21 (tuple21 b c) (tuple21 d e)) b))))
  (= (mem (set1 (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) b1))
  (t2tb4138 r)
  (relation b1 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (t2tb4102 u)
  (t2tb12 v)))
  (forall ((x (tuple21 (tuple21 b c) (tuple21 d e))) (y b))
  (=> (mem (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) b1)
  (Tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) b1 (t2tb4104 x) (t2tb14 y))
  (t2tb4138 r)) (and (mem49 x u) (mem2 y v)))))))

(declare-fun t2tb4604 ((set (set (tuple21 (tuple21 (tuple21 b c) (tuple21 d
  e)) a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 (tuple21 b c) (tuple21 d e)) a)))))
  (sort (set1 (set1 (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) a1)))
  (t2tb4604 x))))

(declare-fun tb2t4604 (uni) (set (set (tuple21 (tuple21 (tuple21 b c)
  (tuple21 d e)) a))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 (tuple21 b c) (tuple21 d e)) a)))))
  (! (= (tb2t4604 (t2tb4604 i)) i) :pattern ((t2tb4604 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) a1))) j)
     (= (t2tb4604 (tb2t4604 j)) j)) :pattern ((t2tb4604 (tb2t4604 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 (tuple21 b c) (tuple21 d e)))) (v (set a))
  (r (set (tuple21 (tuple21 (tuple21 b c) (tuple21 d e)) a))))
  (= (mem (set1 (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) a1))
  (t2tb4140 r)
  (relation a1 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (t2tb4102 u) (t2tb1 v)))
  (forall ((x (tuple21 (tuple21 b c) (tuple21 d e))) (y a))
  (=> (mem (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) a1)
  (Tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) a1 (t2tb4104 x) (t2tb2 y))
  (t2tb4140 r)) (and (mem49 x u) (mem1 y v)))))))

;; mem_relation
  (assert
  (forall ((b2 ty))
  (forall ((u (set (tuple21 (tuple21 b c) (tuple21 d e)))) (v uni) (r uni))
  (and
  (=> (mem (set1 (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) b2)) r
  (relation b2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (t2tb4102 u) v))
  (forall ((x (tuple21 (tuple21 b c) (tuple21 d e))) (y uni))
  (=> (mem (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) b2)
  (Tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) b2 (t2tb4104 x) y) r)
  (and (mem49 x u) (mem b2 y v)))))
  (=>
  (forall ((x (tuple21 (tuple21 b c) (tuple21 d e))) (y uni))
  (=> (sort b2 y)
  (=> (mem (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) b2)
  (Tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) b2 (t2tb4104 x) y) r)
  (and (mem49 x u) (mem b2 y v))))) (mem
  (set1 (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) b2)) r
  (relation b2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (t2tb4102 u) v)))))))

(declare-fun t2tb4605 ((set (set (tuple21 (tuple21 a (tuple21 d e))
  (tuple21 (tuple21 b c) (tuple21 d e)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a (tuple21 d e))
  (tuple21 (tuple21 b c) (tuple21 d e))))))) (sort
  (set1
  (set1
  (tuple2 (tuple2 a1 (tuple2 d1 e1)) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)))))
  (t2tb4605 x))))

(declare-fun tb2t4605 (uni) (set (set (tuple21 (tuple21 a (tuple21 d e))
  (tuple21 (tuple21 b c) (tuple21 d e))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a (tuple21 d e))
  (tuple21 (tuple21 b c) (tuple21 d e)))))))
  (! (= (tb2t4605 (t2tb4605 i)) i) :pattern ((t2tb4605 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (set1
     (tuple2 (tuple2 a1 (tuple2 d1 e1))
     (tuple2 (tuple2 b1 c1) (tuple2 d1 e1))))) j)
     (= (t2tb4605 (tb2t4605 j)) j)) :pattern ((t2tb4605 (tb2t4605 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a (tuple21 d e)))) (v (set (tuple21 (tuple21 b c)
  (tuple21 d e)))) (r (set (tuple21 (tuple21 a (tuple21 d e))
  (tuple21 (tuple21 b c) (tuple21 d e))))))
  (= (mem
  (set1
  (tuple2 (tuple2 a1 (tuple2 d1 e1)) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1))))
  (t2tb4142 r)
  (relation (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (tuple2 a1 (tuple2 d1 e1))
  (t2tb4103 u) (t2tb4102 v)))
  (forall ((x (tuple21 a (tuple21 d e))) (y (tuple21 (tuple21 b c) (tuple21 d
  e))))
  (=> (mem
  (tuple2 (tuple2 a1 (tuple2 d1 e1)) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)))
  (Tuple2 (tuple2 a1 (tuple2 d1 e1)) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1))
  (t2tb4105 x) (t2tb4104 y)) (t2tb4142 r)) (and (mem48 x u) (mem49 y v)))))))

(declare-fun t2tb4606 ((set (set (tuple21 (tuple21 a (tuple21 d e))
  (tuple21 a (tuple21 d e)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a (tuple21 d e)) (tuple21 a
  (tuple21 d e))))))) (sort
  (set1
  (set1 (tuple2 (tuple2 a1 (tuple2 d1 e1)) (tuple2 a1 (tuple2 d1 e1)))))
  (t2tb4606 x))))

(declare-fun tb2t4606 (uni) (set (set (tuple21 (tuple21 a (tuple21 d e))
  (tuple21 a (tuple21 d e))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a (tuple21 d e)) (tuple21 a
  (tuple21 d e)))))))
  (! (= (tb2t4606 (t2tb4606 i)) i) :pattern ((t2tb4606 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (set1 (tuple2 (tuple2 a1 (tuple2 d1 e1)) (tuple2 a1 (tuple2 d1 e1)))))
     j) (= (t2tb4606 (tb2t4606 j)) j)) :pattern ((t2tb4606 (tb2t4606 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a (tuple21 d e)))) (v (set (tuple21 a (tuple21 d
  e)))) (r (set (tuple21 (tuple21 a (tuple21 d e)) (tuple21 a (tuple21 d
  e))))))
  (= (mem
  (set1 (tuple2 (tuple2 a1 (tuple2 d1 e1)) (tuple2 a1 (tuple2 d1 e1))))
  (t2tb4144 r)
  (relation (tuple2 a1 (tuple2 d1 e1)) (tuple2 a1 (tuple2 d1 e1))
  (t2tb4103 u) (t2tb4103 v)))
  (forall ((x (tuple21 a (tuple21 d e))) (y (tuple21 a (tuple21 d e))))
  (=> (mem (tuple2 (tuple2 a1 (tuple2 d1 e1)) (tuple2 a1 (tuple2 d1 e1)))
  (Tuple2 (tuple2 a1 (tuple2 d1 e1)) (tuple2 a1 (tuple2 d1 e1)) (t2tb4105 x)
  (t2tb4105 y)) (t2tb4144 r)) (and (mem48 x u) (mem48 y v)))))))

(declare-fun t2tb4607 ((set (set (tuple21 (tuple21 a (tuple21 d e))
  (set (tuple21 c e)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a (tuple21 d e)) (set (tuple21 c
  e))))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 (tuple2 d1 e1)) (set1 (tuple2 c1 e1)))))
  (t2tb4607 x))))

(declare-fun tb2t4607 (uni) (set (set (tuple21 (tuple21 a (tuple21 d e))
  (set (tuple21 c e))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a (tuple21 d e)) (set (tuple21 c
  e))))))) (! (= (tb2t4607 (t2tb4607 i)) i) :pattern ((t2tb4607 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (tuple2 a1 (tuple2 d1 e1)) (set1 (tuple2 c1 e1)))))
     j) (= (t2tb4607 (tb2t4607 j)) j)) :pattern ((t2tb4607 (tb2t4607 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a (tuple21 d e)))) (v (set (set (tuple21 c e))))
  (r (set (tuple21 (tuple21 a (tuple21 d e)) (set (tuple21 c e))))))
  (= (mem (set1 (tuple2 (tuple2 a1 (tuple2 d1 e1)) (set1 (tuple2 c1 e1))))
  (t2tb4146 r)
  (relation (set1 (tuple2 c1 e1)) (tuple2 a1 (tuple2 d1 e1)) (t2tb4103 u)
  (t2tb3854 v)))
  (forall ((x (tuple21 a (tuple21 d e))) (y (set (tuple21 c e))))
  (=> (mem (tuple2 (tuple2 a1 (tuple2 d1 e1)) (set1 (tuple2 c1 e1)))
  (Tuple2 (tuple2 a1 (tuple2 d1 e1)) (set1 (tuple2 c1 e1)) (t2tb4105 x)
  (t2tb3478 y)) (t2tb4146 r)) (and (mem48 x u) (mem47 y v)))))))

(declare-fun t2tb4608 ((set (set (tuple21 (tuple21 a (tuple21 d e))
  (tuple21 c e))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a (tuple21 d e)) (tuple21 c e))))))
  (sort (set1 (set1 (tuple2 (tuple2 a1 (tuple2 d1 e1)) (tuple2 c1 e1))))
  (t2tb4608 x))))

(declare-fun tb2t4608 (uni) (set (set (tuple21 (tuple21 a (tuple21 d e))
  (tuple21 c e)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a (tuple21 d e)) (tuple21 c e))))))
  (! (= (tb2t4608 (t2tb4608 i)) i) :pattern ((t2tb4608 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (tuple2 a1 (tuple2 d1 e1)) (tuple2 c1 e1)))) j)
     (= (t2tb4608 (tb2t4608 j)) j)) :pattern ((t2tb4608 (tb2t4608 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a (tuple21 d e)))) (v (set (tuple21 c e)))
  (r (set (tuple21 (tuple21 a (tuple21 d e)) (tuple21 c e)))))
  (= (mem (set1 (tuple2 (tuple2 a1 (tuple2 d1 e1)) (tuple2 c1 e1)))
  (t2tb4148 r)
  (relation (tuple2 c1 e1) (tuple2 a1 (tuple2 d1 e1)) (t2tb4103 u)
  (t2tb3478 v)))
  (forall ((x (tuple21 a (tuple21 d e))) (y (tuple21 c e)))
  (=> (mem (tuple2 (tuple2 a1 (tuple2 d1 e1)) (tuple2 c1 e1))
  (Tuple2 (tuple2 a1 (tuple2 d1 e1)) (tuple2 c1 e1) (t2tb4105 x)
  (t2tb3479 y)) (t2tb4148 r)) (and (mem48 x u) (mem46 y v)))))))

(declare-fun t2tb4609 ((set (set (tuple21 (tuple21 a (tuple21 d e))
  (tuple21 a e))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a (tuple21 d e)) (tuple21 a e))))))
  (sort (set1 (set1 (tuple2 (tuple2 a1 (tuple2 d1 e1)) (tuple2 a1 e1))))
  (t2tb4609 x))))

(declare-fun tb2t4609 (uni) (set (set (tuple21 (tuple21 a (tuple21 d e))
  (tuple21 a e)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a (tuple21 d e)) (tuple21 a e))))))
  (! (= (tb2t4609 (t2tb4609 i)) i) :pattern ((t2tb4609 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (tuple2 a1 (tuple2 d1 e1)) (tuple2 a1 e1)))) j)
     (= (t2tb4609 (tb2t4609 j)) j)) :pattern ((t2tb4609 (tb2t4609 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a (tuple21 d e)))) (v (set (tuple21 a e)))
  (r (set (tuple21 (tuple21 a (tuple21 d e)) (tuple21 a e)))))
  (= (mem (set1 (tuple2 (tuple2 a1 (tuple2 d1 e1)) (tuple2 a1 e1)))
  (t2tb4150 r)
  (relation (tuple2 a1 e1) (tuple2 a1 (tuple2 d1 e1)) (t2tb4103 u)
  (t2tb2943 v)))
  (forall ((x (tuple21 a (tuple21 d e))) (y (tuple21 a e)))
  (=> (mem (tuple2 (tuple2 a1 (tuple2 d1 e1)) (tuple2 a1 e1))
  (Tuple2 (tuple2 a1 (tuple2 d1 e1)) (tuple2 a1 e1) (t2tb4105 x)
  (t2tb2949 y)) (t2tb4150 r)) (and (mem48 x u) (mem44 y v)))))))

(declare-fun t2tb4610 ((set (set (tuple21 (tuple21 a (tuple21 d e))
  e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a (tuple21 d e)) e))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 (tuple2 d1 e1)) e1))) (t2tb4610 x))))

(declare-fun tb2t4610 (uni) (set (set (tuple21 (tuple21 a (tuple21 d e))
  e))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a (tuple21 d e)) e)))))
  (! (= (tb2t4610 (t2tb4610 i)) i) :pattern ((t2tb4610 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 (tuple2 d1 e1)) e1))) j)
     (= (t2tb4610 (tb2t4610 j)) j)) :pattern ((t2tb4610 (tb2t4610 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a (tuple21 d e)))) (v (set e))
  (r (set (tuple21 (tuple21 a (tuple21 d e)) e))))
  (= (mem (set1 (tuple2 (tuple2 a1 (tuple2 d1 e1)) e1)) (t2tb4152 r)
  (relation e1 (tuple2 a1 (tuple2 d1 e1)) (t2tb4103 u) (t2tb2947 v)))
  (forall ((x (tuple21 a (tuple21 d e))) (y e))
  (=> (mem (tuple2 (tuple2 a1 (tuple2 d1 e1)) e1)
  (Tuple2 (tuple2 a1 (tuple2 d1 e1)) e1 (t2tb4105 x) (t2tb2955 y))
  (t2tb4152 r)) (and (mem48 x u) (mem36 y v)))))))

(declare-fun t2tb4611 ((set (set (tuple21 (tuple21 a (tuple21 d e))
  (tuple21 a d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a (tuple21 d e)) (tuple21 a d))))))
  (sort (set1 (set1 (tuple2 (tuple2 a1 (tuple2 d1 e1)) (tuple2 a1 d1))))
  (t2tb4611 x))))

(declare-fun tb2t4611 (uni) (set (set (tuple21 (tuple21 a (tuple21 d e))
  (tuple21 a d)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a (tuple21 d e)) (tuple21 a d))))))
  (! (= (tb2t4611 (t2tb4611 i)) i) :pattern ((t2tb4611 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (tuple2 a1 (tuple2 d1 e1)) (tuple2 a1 d1)))) j)
     (= (t2tb4611 (tb2t4611 j)) j)) :pattern ((t2tb4611 (tb2t4611 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a (tuple21 d e)))) (v (set (tuple21 a d)))
  (r (set (tuple21 (tuple21 a (tuple21 d e)) (tuple21 a d)))))
  (= (mem (set1 (tuple2 (tuple2 a1 (tuple2 d1 e1)) (tuple2 a1 d1)))
  (t2tb4154 r)
  (relation (tuple2 a1 d1) (tuple2 a1 (tuple2 d1 e1)) (t2tb4103 u)
  (t2tb903 v)))
  (forall ((x (tuple21 a (tuple21 d e))) (y (tuple21 a d)))
  (=> (mem (tuple2 (tuple2 a1 (tuple2 d1 e1)) (tuple2 a1 d1))
  (Tuple2 (tuple2 a1 (tuple2 d1 e1)) (tuple2 a1 d1) (t2tb4105 x) (t2tb904 y))
  (t2tb4154 r)) (and (mem48 x u) (mem32 y v)))))))

(declare-fun t2tb4612 ((set (set (tuple21 (tuple21 a (tuple21 d e))
  (set (tuple21 b d)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a (tuple21 d e)) (set (tuple21 b
  d))))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 (tuple2 d1 e1)) (set1 (tuple2 b1 d1)))))
  (t2tb4612 x))))

(declare-fun tb2t4612 (uni) (set (set (tuple21 (tuple21 a (tuple21 d e))
  (set (tuple21 b d))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a (tuple21 d e)) (set (tuple21 b
  d))))))) (! (= (tb2t4612 (t2tb4612 i)) i) :pattern ((t2tb4612 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (tuple2 a1 (tuple2 d1 e1)) (set1 (tuple2 b1 d1)))))
     j) (= (t2tb4612 (tb2t4612 j)) j)) :pattern ((t2tb4612 (tb2t4612 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a (tuple21 d e)))) (v (set (set (tuple21 b d))))
  (r (set (tuple21 (tuple21 a (tuple21 d e)) (set (tuple21 b d))))))
  (= (mem (set1 (tuple2 (tuple2 a1 (tuple2 d1 e1)) (set1 (tuple2 b1 d1))))
  (t2tb4156 r)
  (relation (set1 (tuple2 b1 d1)) (tuple2 a1 (tuple2 d1 e1)) (t2tb4103 u)
  (t2tb906 v)))
  (forall ((x (tuple21 a (tuple21 d e))) (y (set (tuple21 b d))))
  (=> (mem (tuple2 (tuple2 a1 (tuple2 d1 e1)) (set1 (tuple2 b1 d1)))
  (Tuple2 (tuple2 a1 (tuple2 d1 e1)) (set1 (tuple2 b1 d1)) (t2tb4105 x)
  (t2tb687 y)) (t2tb4156 r)) (and (mem48 x u) (mem33 y v)))))))

(declare-fun t2tb4613 ((set (set (tuple21 (tuple21 a (tuple21 d e))
  (tuple21 b d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a (tuple21 d e)) (tuple21 b d))))))
  (sort (set1 (set1 (tuple2 (tuple2 a1 (tuple2 d1 e1)) (tuple2 b1 d1))))
  (t2tb4613 x))))

(declare-fun tb2t4613 (uni) (set (set (tuple21 (tuple21 a (tuple21 d e))
  (tuple21 b d)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a (tuple21 d e)) (tuple21 b d))))))
  (! (= (tb2t4613 (t2tb4613 i)) i) :pattern ((t2tb4613 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (tuple2 a1 (tuple2 d1 e1)) (tuple2 b1 d1)))) j)
     (= (t2tb4613 (tb2t4613 j)) j)) :pattern ((t2tb4613 (tb2t4613 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a (tuple21 d e)))) (v (set (tuple21 b d)))
  (r (set (tuple21 (tuple21 a (tuple21 d e)) (tuple21 b d)))))
  (= (mem (set1 (tuple2 (tuple2 a1 (tuple2 d1 e1)) (tuple2 b1 d1)))
  (t2tb4158 r)
  (relation (tuple2 b1 d1) (tuple2 a1 (tuple2 d1 e1)) (t2tb4103 u)
  (t2tb687 v)))
  (forall ((x (tuple21 a (tuple21 d e))) (y (tuple21 b d)))
  (=> (mem (tuple2 (tuple2 a1 (tuple2 d1 e1)) (tuple2 b1 d1))
  (Tuple2 (tuple2 a1 (tuple2 d1 e1)) (tuple2 b1 d1) (t2tb4105 x) (t2tb692 y))
  (t2tb4158 r)) (and (mem48 x u) (mem23 y v)))))))

(declare-fun t2tb4614 ((set (set (tuple21 (tuple21 a (tuple21 d e))
  d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a (tuple21 d e)) d))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 (tuple2 d1 e1)) d1))) (t2tb4614 x))))

(declare-fun tb2t4614 (uni) (set (set (tuple21 (tuple21 a (tuple21 d e))
  d))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a (tuple21 d e)) d)))))
  (! (= (tb2t4614 (t2tb4614 i)) i) :pattern ((t2tb4614 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 (tuple2 d1 e1)) d1))) j)
     (= (t2tb4614 (tb2t4614 j)) j)) :pattern ((t2tb4614 (tb2t4614 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a (tuple21 d e)))) (v (set d))
  (r (set (tuple21 (tuple21 a (tuple21 d e)) d))))
  (= (mem (set1 (tuple2 (tuple2 a1 (tuple2 d1 e1)) d1)) (t2tb4160 r)
  (relation d1 (tuple2 a1 (tuple2 d1 e1)) (t2tb4103 u) (t2tb690 v)))
  (forall ((x (tuple21 a (tuple21 d e))) (y d))
  (=> (mem (tuple2 (tuple2 a1 (tuple2 d1 e1)) d1)
  (Tuple2 (tuple2 a1 (tuple2 d1 e1)) d1 (t2tb4105 x) (t2tb694 y))
  (t2tb4160 r)) (and (mem48 x u) (mem20 y v)))))))

(declare-fun t2tb4615 ((set (set (tuple21 (tuple21 a (tuple21 d e))
  (tuple21 a (tuple21 b c)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a (tuple21 d e)) (tuple21 a
  (tuple21 b c))))))) (sort
  (set1
  (set1 (tuple2 (tuple2 a1 (tuple2 d1 e1)) (tuple2 a1 (tuple2 b1 c1)))))
  (t2tb4615 x))))

(declare-fun tb2t4615 (uni) (set (set (tuple21 (tuple21 a (tuple21 d e))
  (tuple21 a (tuple21 b c))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a (tuple21 d e)) (tuple21 a
  (tuple21 b c)))))))
  (! (= (tb2t4615 (t2tb4615 i)) i) :pattern ((t2tb4615 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (set1 (tuple2 (tuple2 a1 (tuple2 d1 e1)) (tuple2 a1 (tuple2 b1 c1)))))
     j) (= (t2tb4615 (tb2t4615 j)) j)) :pattern ((t2tb4615 (tb2t4615 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a (tuple21 d e)))) (v (set (tuple21 a (tuple21 b
  c)))) (r (set (tuple21 (tuple21 a (tuple21 d e)) (tuple21 a (tuple21 b
  c))))))
  (= (mem
  (set1 (tuple2 (tuple2 a1 (tuple2 d1 e1)) (tuple2 a1 (tuple2 b1 c1))))
  (t2tb4162 r)
  (relation (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 (tuple2 d1 e1))
  (t2tb4103 u) (t2tb261 v)))
  (forall ((x (tuple21 a (tuple21 d e))) (y (tuple21 a (tuple21 b c))))
  (=> (mem (tuple2 (tuple2 a1 (tuple2 d1 e1)) (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 (tuple2 a1 (tuple2 d1 e1)) (tuple2 a1 (tuple2 b1 c1)) (t2tb4105 x)
  (t2tb260 y)) (t2tb4162 r)) (and (mem48 x u) (mem14 y v)))))))

(declare-fun t2tb4616 ((set (set (tuple21 (tuple21 a (tuple21 d e))
  (set (tuple21 a c)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a (tuple21 d e)) (set (tuple21 a
  c))))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 (tuple2 d1 e1)) (set1 (tuple2 a1 c1)))))
  (t2tb4616 x))))

(declare-fun tb2t4616 (uni) (set (set (tuple21 (tuple21 a (tuple21 d e))
  (set (tuple21 a c))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a (tuple21 d e)) (set (tuple21 a
  c))))))) (! (= (tb2t4616 (t2tb4616 i)) i) :pattern ((t2tb4616 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (tuple2 a1 (tuple2 d1 e1)) (set1 (tuple2 a1 c1)))))
     j) (= (t2tb4616 (tb2t4616 j)) j)) :pattern ((t2tb4616 (tb2t4616 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a (tuple21 d e)))) (v (set (set (tuple21 a c))))
  (r (set (tuple21 (tuple21 a (tuple21 d e)) (set (tuple21 a c))))))
  (= (mem (set1 (tuple2 (tuple2 a1 (tuple2 d1 e1)) (set1 (tuple2 a1 c1))))
  (t2tb4164 r)
  (relation (set1 (tuple2 a1 c1)) (tuple2 a1 (tuple2 d1 e1)) (t2tb4103 u)
  (t2tb128 v)))
  (forall ((x (tuple21 a (tuple21 d e))) (y (set (tuple21 a c))))
  (=> (mem (tuple2 (tuple2 a1 (tuple2 d1 e1)) (set1 (tuple2 a1 c1)))
  (Tuple2 (tuple2 a1 (tuple2 d1 e1)) (set1 (tuple2 a1 c1)) (t2tb4105 x)
  (t2tb129 y)) (t2tb4164 r)) (and (mem48 x u) (mem11 y v)))))))

(declare-fun t2tb4617 ((set (set (tuple21 (tuple21 a (tuple21 d e))
  (tuple21 a c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a (tuple21 d e)) (tuple21 a c))))))
  (sort (set1 (set1 (tuple2 (tuple2 a1 (tuple2 d1 e1)) (tuple2 a1 c1))))
  (t2tb4617 x))))

(declare-fun tb2t4617 (uni) (set (set (tuple21 (tuple21 a (tuple21 d e))
  (tuple21 a c)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a (tuple21 d e)) (tuple21 a c))))))
  (! (= (tb2t4617 (t2tb4617 i)) i) :pattern ((t2tb4617 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (tuple2 a1 (tuple2 d1 e1)) (tuple2 a1 c1)))) j)
     (= (t2tb4617 (tb2t4617 j)) j)) :pattern ((t2tb4617 (tb2t4617 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a (tuple21 d e)))) (v (set (tuple21 a c)))
  (r (set (tuple21 (tuple21 a (tuple21 d e)) (tuple21 a c)))))
  (= (mem (set1 (tuple2 (tuple2 a1 (tuple2 d1 e1)) (tuple2 a1 c1)))
  (t2tb4166 r)
  (relation (tuple2 a1 c1) (tuple2 a1 (tuple2 d1 e1)) (t2tb4103 u)
  (t2tb129 v)))
  (forall ((x (tuple21 a (tuple21 d e))) (y (tuple21 a c)))
  (=> (mem (tuple2 (tuple2 a1 (tuple2 d1 e1)) (tuple2 a1 c1))
  (Tuple2 (tuple2 a1 (tuple2 d1 e1)) (tuple2 a1 c1) (t2tb4105 x) (t2tb133 y))
  (t2tb4166 r)) (and (mem48 x u) (mem10 y v)))))))

(declare-fun t2tb4618 ((set (set (tuple21 (tuple21 a (tuple21 d e))
  c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a (tuple21 d e)) c))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 (tuple2 d1 e1)) c1))) (t2tb4618 x))))

(declare-fun tb2t4618 (uni) (set (set (tuple21 (tuple21 a (tuple21 d e))
  c))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a (tuple21 d e)) c)))))
  (! (= (tb2t4618 (t2tb4618 i)) i) :pattern ((t2tb4618 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 (tuple2 d1 e1)) c1))) j)
     (= (t2tb4618 (tb2t4618 j)) j)) :pattern ((t2tb4618 (tb2t4618 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a (tuple21 d e)))) (v (set c))
  (r (set (tuple21 (tuple21 a (tuple21 d e)) c))))
  (= (mem (set1 (tuple2 (tuple2 a1 (tuple2 d1 e1)) c1)) (t2tb4168 r)
  (relation c1 (tuple2 a1 (tuple2 d1 e1)) (t2tb4103 u) (t2tb132 v)))
  (forall ((x (tuple21 a (tuple21 d e))) (y c))
  (=> (mem (tuple2 (tuple2 a1 (tuple2 d1 e1)) c1)
  (Tuple2 (tuple2 a1 (tuple2 d1 e1)) c1 (t2tb4105 x) (t2tb135 y))
  (t2tb4168 r)) (and (mem48 x u) (mem7 y v)))))))

(declare-fun t2tb4619 ((set (set (tuple21 (tuple21 a (tuple21 d e))
  (set (tuple21 a b)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a (tuple21 d e)) (set (tuple21 a
  b))))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 (tuple2 d1 e1)) (set1 (tuple2 a1 b1)))))
  (t2tb4619 x))))

(declare-fun tb2t4619 (uni) (set (set (tuple21 (tuple21 a (tuple21 d e))
  (set (tuple21 a b))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a (tuple21 d e)) (set (tuple21 a
  b))))))) (! (= (tb2t4619 (t2tb4619 i)) i) :pattern ((t2tb4619 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (tuple2 a1 (tuple2 d1 e1)) (set1 (tuple2 a1 b1)))))
     j) (= (t2tb4619 (tb2t4619 j)) j)) :pattern ((t2tb4619 (tb2t4619 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a (tuple21 d e)))) (v (set (set (tuple21 a b))))
  (r (set (tuple21 (tuple21 a (tuple21 d e)) (set (tuple21 a b))))))
  (= (mem (set1 (tuple2 (tuple2 a1 (tuple2 d1 e1)) (set1 (tuple2 a1 b1))))
  (t2tb4170 r)
  (relation (set1 (tuple2 a1 b1)) (tuple2 a1 (tuple2 d1 e1)) (t2tb4103 u)
  (t2tb10 v)))
  (forall ((x (tuple21 a (tuple21 d e))) (y (set (tuple21 a b))))
  (=> (mem (tuple2 (tuple2 a1 (tuple2 d1 e1)) (set1 (tuple2 a1 b1)))
  (Tuple2 (tuple2 a1 (tuple2 d1 e1)) (set1 (tuple2 a1 b1)) (t2tb4105 x)
  (t2tb11 y)) (t2tb4170 r)) (and (mem48 x u) (mem4 y v)))))))

(declare-fun t2tb4620 ((set (set (tuple21 (tuple21 a (tuple21 d e))
  (tuple21 a b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a (tuple21 d e)) (tuple21 a b))))))
  (sort (set1 (set1 (tuple2 (tuple2 a1 (tuple2 d1 e1)) (tuple2 a1 b1))))
  (t2tb4620 x))))

(declare-fun tb2t4620 (uni) (set (set (tuple21 (tuple21 a (tuple21 d e))
  (tuple21 a b)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a (tuple21 d e)) (tuple21 a b))))))
  (! (= (tb2t4620 (t2tb4620 i)) i) :pattern ((t2tb4620 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (tuple2 a1 (tuple2 d1 e1)) (tuple2 a1 b1)))) j)
     (= (t2tb4620 (tb2t4620 j)) j)) :pattern ((t2tb4620 (tb2t4620 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a (tuple21 d e)))) (v (set (tuple21 a b)))
  (r (set (tuple21 (tuple21 a (tuple21 d e)) (tuple21 a b)))))
  (= (mem (set1 (tuple2 (tuple2 a1 (tuple2 d1 e1)) (tuple2 a1 b1)))
  (t2tb4172 r)
  (relation (tuple2 a1 b1) (tuple2 a1 (tuple2 d1 e1)) (t2tb4103 u)
  (t2tb11 v)))
  (forall ((x (tuple21 a (tuple21 d e))) (y (tuple21 a b)))
  (=> (mem (tuple2 (tuple2 a1 (tuple2 d1 e1)) (tuple2 a1 b1))
  (Tuple2 (tuple2 a1 (tuple2 d1 e1)) (tuple2 a1 b1) (t2tb4105 x) (t2tb13 y))
  (t2tb4172 r)) (and (mem48 x u) (mem3 y v)))))))

(declare-fun t2tb4621 ((set (set (tuple21 (tuple21 a (tuple21 d e))
  b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a (tuple21 d e)) b))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 (tuple2 d1 e1)) b1))) (t2tb4621 x))))

(declare-fun tb2t4621 (uni) (set (set (tuple21 (tuple21 a (tuple21 d e))
  b))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a (tuple21 d e)) b)))))
  (! (= (tb2t4621 (t2tb4621 i)) i) :pattern ((t2tb4621 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 (tuple2 d1 e1)) b1))) j)
     (= (t2tb4621 (tb2t4621 j)) j)) :pattern ((t2tb4621 (tb2t4621 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a (tuple21 d e)))) (v (set b))
  (r (set (tuple21 (tuple21 a (tuple21 d e)) b))))
  (= (mem (set1 (tuple2 (tuple2 a1 (tuple2 d1 e1)) b1)) (t2tb4174 r)
  (relation b1 (tuple2 a1 (tuple2 d1 e1)) (t2tb4103 u) (t2tb12 v)))
  (forall ((x (tuple21 a (tuple21 d e))) (y b))
  (=> (mem (tuple2 (tuple2 a1 (tuple2 d1 e1)) b1)
  (Tuple2 (tuple2 a1 (tuple2 d1 e1)) b1 (t2tb4105 x) (t2tb14 y))
  (t2tb4174 r)) (and (mem48 x u) (mem2 y v)))))))

(declare-fun t2tb4622 ((set (set (tuple21 (tuple21 a (tuple21 d e))
  a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a (tuple21 d e)) a))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 (tuple2 d1 e1)) a1))) (t2tb4622 x))))

(declare-fun tb2t4622 (uni) (set (set (tuple21 (tuple21 a (tuple21 d e))
  a))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a (tuple21 d e)) a)))))
  (! (= (tb2t4622 (t2tb4622 i)) i) :pattern ((t2tb4622 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 (tuple2 d1 e1)) a1))) j)
     (= (t2tb4622 (tb2t4622 j)) j)) :pattern ((t2tb4622 (tb2t4622 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a (tuple21 d e)))) (v (set a))
  (r (set (tuple21 (tuple21 a (tuple21 d e)) a))))
  (= (mem (set1 (tuple2 (tuple2 a1 (tuple2 d1 e1)) a1)) (t2tb4176 r)
  (relation a1 (tuple2 a1 (tuple2 d1 e1)) (t2tb4103 u) (t2tb1 v)))
  (forall ((x (tuple21 a (tuple21 d e))) (y a))
  (=> (mem (tuple2 (tuple2 a1 (tuple2 d1 e1)) a1)
  (Tuple2 (tuple2 a1 (tuple2 d1 e1)) a1 (t2tb4105 x) (t2tb2 y)) (t2tb4176 r))
  (and (mem48 x u) (mem1 y v)))))))

;; mem_relation
  (assert
  (forall ((b2 ty))
  (forall ((u (set (tuple21 a (tuple21 d e)))) (v uni) (r uni))
  (and
  (=> (mem (set1 (tuple2 (tuple2 a1 (tuple2 d1 e1)) b2)) r
  (relation b2 (tuple2 a1 (tuple2 d1 e1)) (t2tb4103 u) v))
  (forall ((x (tuple21 a (tuple21 d e))) (y uni))
  (=> (mem (tuple2 (tuple2 a1 (tuple2 d1 e1)) b2)
  (Tuple2 (tuple2 a1 (tuple2 d1 e1)) b2 (t2tb4105 x) y) r)
  (and (mem48 x u) (mem b2 y v)))))
  (=>
  (forall ((x (tuple21 a (tuple21 d e))) (y uni))
  (=> (sort b2 y)
  (=> (mem (tuple2 (tuple2 a1 (tuple2 d1 e1)) b2)
  (Tuple2 (tuple2 a1 (tuple2 d1 e1)) b2 (t2tb4105 x) y) r)
  (and (mem48 x u) (mem b2 y v))))) (mem
  (set1 (tuple2 (tuple2 a1 (tuple2 d1 e1)) b2)) r
  (relation b2 (tuple2 a1 (tuple2 d1 e1)) (t2tb4103 u) v)))))))

(declare-fun t2tb4623 ((set (set (tuple21 (set (tuple21 c e))
  (tuple21 (tuple21 b c) (tuple21 d e)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 c e)) (tuple21 (tuple21 b c)
  (tuple21 d e))))))) (sort
  (set1
  (set1
  (tuple2 (set1 (tuple2 c1 e1)) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)))))
  (t2tb4623 x))))

(declare-fun tb2t4623 (uni) (set (set (tuple21 (set (tuple21 c e))
  (tuple21 (tuple21 b c) (tuple21 d e))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 c e)) (tuple21 (tuple21 b c)
  (tuple21 d e)))))))
  (! (= (tb2t4623 (t2tb4623 i)) i) :pattern ((t2tb4623 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (set1
     (tuple2 (set1 (tuple2 c1 e1)) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)))))
     j) (= (t2tb4623 (tb2t4623 j)) j)) :pattern ((t2tb4623 (tb2t4623 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 c e)))) (v (set (tuple21 (tuple21 b c)
  (tuple21 d e)))) (r (set (tuple21 (set (tuple21 c e)) (tuple21 (tuple21 b
  c) (tuple21 d e))))))
  (= (mem
  (set1
  (tuple2 (set1 (tuple2 c1 e1)) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1))))
  (t2tb4178 r)
  (relation (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (set1 (tuple2 c1 e1))
  (t2tb3854 u) (t2tb4102 v)))
  (forall ((x (set (tuple21 c e))) (y (tuple21 (tuple21 b c) (tuple21 d e))))
  (=> (mem
  (tuple2 (set1 (tuple2 c1 e1)) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)))
  (Tuple2 (set1 (tuple2 c1 e1)) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1))
  (t2tb3478 x) (t2tb4104 y)) (t2tb4178 r)) (and (mem47 x u) (mem49 y v)))))))

(declare-fun t2tb4624 ((set (set (tuple21 (set (tuple21 c e)) (tuple21 a
  (tuple21 d e)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 c e)) (tuple21 a (tuple21 d
  e))))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 c1 e1)) (tuple2 a1 (tuple2 d1 e1)))))
  (t2tb4624 x))))

(declare-fun tb2t4624 (uni) (set (set (tuple21 (set (tuple21 c e)) (tuple21 a
  (tuple21 d e))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 c e)) (tuple21 a (tuple21 d
  e))))))) (! (= (tb2t4624 (t2tb4624 i)) i) :pattern ((t2tb4624 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (set1 (tuple2 c1 e1)) (tuple2 a1 (tuple2 d1 e1)))))
     j) (= (t2tb4624 (tb2t4624 j)) j)) :pattern ((t2tb4624 (tb2t4624 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 c e)))) (v (set (tuple21 a (tuple21 d e))))
  (r (set (tuple21 (set (tuple21 c e)) (tuple21 a (tuple21 d e))))))
  (= (mem (set1 (tuple2 (set1 (tuple2 c1 e1)) (tuple2 a1 (tuple2 d1 e1))))
  (t2tb4180 r)
  (relation (tuple2 a1 (tuple2 d1 e1)) (set1 (tuple2 c1 e1)) (t2tb3854 u)
  (t2tb4103 v)))
  (forall ((x (set (tuple21 c e))) (y (tuple21 a (tuple21 d e))))
  (=> (mem (tuple2 (set1 (tuple2 c1 e1)) (tuple2 a1 (tuple2 d1 e1)))
  (Tuple2 (set1 (tuple2 c1 e1)) (tuple2 a1 (tuple2 d1 e1)) (t2tb3478 x)
  (t2tb4105 y)) (t2tb4180 r)) (and (mem47 x u) (mem48 y v)))))))

(declare-fun t2tb4625 ((set (set (tuple21 (set (tuple21 c e)) (set (tuple21 c
  e)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 c e)) (set (tuple21 c e)))))))
  (sort (set1 (set1 (tuple2 (set1 (tuple2 c1 e1)) (set1 (tuple2 c1 e1)))))
  (t2tb4625 x))))

(declare-fun tb2t4625 (uni) (set (set (tuple21 (set (tuple21 c e))
  (set (tuple21 c e))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 c e)) (set (tuple21 c e)))))))
  (! (= (tb2t4625 (t2tb4625 i)) i) :pattern ((t2tb4625 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (set1 (tuple2 c1 e1)) (set1 (tuple2 c1 e1))))) j)
     (= (t2tb4625 (tb2t4625 j)) j)) :pattern ((t2tb4625 (tb2t4625 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 c e)))) (v (set (set (tuple21 c e))))
  (r (set (tuple21 (set (tuple21 c e)) (set (tuple21 c e))))))
  (= (mem (set1 (tuple2 (set1 (tuple2 c1 e1)) (set1 (tuple2 c1 e1))))
  (t2tb4182 r)
  (relation (set1 (tuple2 c1 e1)) (set1 (tuple2 c1 e1)) (t2tb3854 u)
  (t2tb3854 v)))
  (forall ((x (set (tuple21 c e))) (y (set (tuple21 c e))))
  (=> (mem (tuple2 (set1 (tuple2 c1 e1)) (set1 (tuple2 c1 e1)))
  (Tuple2 (set1 (tuple2 c1 e1)) (set1 (tuple2 c1 e1)) (t2tb3478 x)
  (t2tb3478 y)) (t2tb4182 r)) (and (mem47 x u) (mem47 y v)))))))

(declare-fun t2tb4626 ((set (set (tuple21 (set (tuple21 c e)) (tuple21 c
  e))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 c e)) (tuple21 c e)))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 c1 e1)) (tuple2 c1 e1)))) (t2tb4626 x))))

(declare-fun tb2t4626 (uni) (set (set (tuple21 (set (tuple21 c e)) (tuple21 c
  e)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 c e)) (tuple21 c e))))))
  (! (= (tb2t4626 (t2tb4626 i)) i) :pattern ((t2tb4626 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 c1 e1)) (tuple2 c1 e1)))) j)
     (= (t2tb4626 (tb2t4626 j)) j)) :pattern ((t2tb4626 (tb2t4626 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 c e)))) (v (set (tuple21 c e)))
  (r (set (tuple21 (set (tuple21 c e)) (tuple21 c e)))))
  (= (mem (set1 (tuple2 (set1 (tuple2 c1 e1)) (tuple2 c1 e1))) (t2tb4184 r)
  (relation (tuple2 c1 e1) (set1 (tuple2 c1 e1)) (t2tb3854 u) (t2tb3478 v)))
  (forall ((x (set (tuple21 c e))) (y (tuple21 c e)))
  (=> (mem (tuple2 (set1 (tuple2 c1 e1)) (tuple2 c1 e1))
  (Tuple2 (set1 (tuple2 c1 e1)) (tuple2 c1 e1) (t2tb3478 x) (t2tb3479 y))
  (t2tb4184 r)) (and (mem47 x u) (mem46 y v)))))))

(declare-fun t2tb4627 ((set (set (tuple21 (set (tuple21 c e)) (tuple21 a
  e))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 c e)) (tuple21 a e)))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 c1 e1)) (tuple2 a1 e1)))) (t2tb4627 x))))

(declare-fun tb2t4627 (uni) (set (set (tuple21 (set (tuple21 c e)) (tuple21 a
  e)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 c e)) (tuple21 a e))))))
  (! (= (tb2t4627 (t2tb4627 i)) i) :pattern ((t2tb4627 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 c1 e1)) (tuple2 a1 e1)))) j)
     (= (t2tb4627 (tb2t4627 j)) j)) :pattern ((t2tb4627 (tb2t4627 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 c e)))) (v (set (tuple21 a e)))
  (r (set (tuple21 (set (tuple21 c e)) (tuple21 a e)))))
  (= (mem (set1 (tuple2 (set1 (tuple2 c1 e1)) (tuple2 a1 e1))) (t2tb4186 r)
  (relation (tuple2 a1 e1) (set1 (tuple2 c1 e1)) (t2tb3854 u) (t2tb2943 v)))
  (forall ((x (set (tuple21 c e))) (y (tuple21 a e)))
  (=> (mem (tuple2 (set1 (tuple2 c1 e1)) (tuple2 a1 e1))
  (Tuple2 (set1 (tuple2 c1 e1)) (tuple2 a1 e1) (t2tb3478 x) (t2tb2949 y))
  (t2tb4186 r)) (and (mem47 x u) (mem44 y v)))))))

(declare-fun t2tb4628 ((set (set (tuple21 (set (tuple21 c e)) e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 c e)) e))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 c1 e1)) e1))) (t2tb4628 x))))

(declare-fun tb2t4628 (uni) (set (set (tuple21 (set (tuple21 c e)) e))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 c e)) e)))))
  (! (= (tb2t4628 (t2tb4628 i)) i) :pattern ((t2tb4628 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 c1 e1)) e1))) j)
     (= (t2tb4628 (tb2t4628 j)) j)) :pattern ((t2tb4628 (tb2t4628 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 c e)))) (v (set e))
  (r (set (tuple21 (set (tuple21 c e)) e))))
  (= (mem (set1 (tuple2 (set1 (tuple2 c1 e1)) e1)) (t2tb4188 r)
  (relation e1 (set1 (tuple2 c1 e1)) (t2tb3854 u) (t2tb2947 v)))
  (forall ((x (set (tuple21 c e))) (y e))
  (=> (mem (tuple2 (set1 (tuple2 c1 e1)) e1)
  (Tuple2 (set1 (tuple2 c1 e1)) e1 (t2tb3478 x) (t2tb2955 y)) (t2tb4188 r))
  (and (mem47 x u) (mem36 y v)))))))

(declare-fun t2tb4629 ((set (set (tuple21 (set (tuple21 c e)) (tuple21 a
  d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 c e)) (tuple21 a d)))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 c1 e1)) (tuple2 a1 d1)))) (t2tb4629 x))))

(declare-fun tb2t4629 (uni) (set (set (tuple21 (set (tuple21 c e)) (tuple21 a
  d)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 c e)) (tuple21 a d))))))
  (! (= (tb2t4629 (t2tb4629 i)) i) :pattern ((t2tb4629 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 c1 e1)) (tuple2 a1 d1)))) j)
     (= (t2tb4629 (tb2t4629 j)) j)) :pattern ((t2tb4629 (tb2t4629 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 c e)))) (v (set (tuple21 a d)))
  (r (set (tuple21 (set (tuple21 c e)) (tuple21 a d)))))
  (= (mem (set1 (tuple2 (set1 (tuple2 c1 e1)) (tuple2 a1 d1))) (t2tb4190 r)
  (relation (tuple2 a1 d1) (set1 (tuple2 c1 e1)) (t2tb3854 u) (t2tb903 v)))
  (forall ((x (set (tuple21 c e))) (y (tuple21 a d)))
  (=> (mem (tuple2 (set1 (tuple2 c1 e1)) (tuple2 a1 d1))
  (Tuple2 (set1 (tuple2 c1 e1)) (tuple2 a1 d1) (t2tb3478 x) (t2tb904 y))
  (t2tb4190 r)) (and (mem47 x u) (mem32 y v)))))))

(declare-fun t2tb4630 ((set (set (tuple21 (set (tuple21 c e)) (set (tuple21 b
  d)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 c e)) (set (tuple21 b d)))))))
  (sort (set1 (set1 (tuple2 (set1 (tuple2 c1 e1)) (set1 (tuple2 b1 d1)))))
  (t2tb4630 x))))

(declare-fun tb2t4630 (uni) (set (set (tuple21 (set (tuple21 c e))
  (set (tuple21 b d))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 c e)) (set (tuple21 b d)))))))
  (! (= (tb2t4630 (t2tb4630 i)) i) :pattern ((t2tb4630 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (set1 (tuple2 c1 e1)) (set1 (tuple2 b1 d1))))) j)
     (= (t2tb4630 (tb2t4630 j)) j)) :pattern ((t2tb4630 (tb2t4630 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 c e)))) (v (set (set (tuple21 b d))))
  (r (set (tuple21 (set (tuple21 c e)) (set (tuple21 b d))))))
  (= (mem (set1 (tuple2 (set1 (tuple2 c1 e1)) (set1 (tuple2 b1 d1))))
  (t2tb4192 r)
  (relation (set1 (tuple2 b1 d1)) (set1 (tuple2 c1 e1)) (t2tb3854 u)
  (t2tb906 v)))
  (forall ((x (set (tuple21 c e))) (y (set (tuple21 b d))))
  (=> (mem (tuple2 (set1 (tuple2 c1 e1)) (set1 (tuple2 b1 d1)))
  (Tuple2 (set1 (tuple2 c1 e1)) (set1 (tuple2 b1 d1)) (t2tb3478 x)
  (t2tb687 y)) (t2tb4192 r)) (and (mem47 x u) (mem33 y v)))))))

(declare-fun t2tb4631 ((set (set (tuple21 (set (tuple21 c e)) (tuple21 b
  d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 c e)) (tuple21 b d)))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 c1 e1)) (tuple2 b1 d1)))) (t2tb4631 x))))

(declare-fun tb2t4631 (uni) (set (set (tuple21 (set (tuple21 c e)) (tuple21 b
  d)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 c e)) (tuple21 b d))))))
  (! (= (tb2t4631 (t2tb4631 i)) i) :pattern ((t2tb4631 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 c1 e1)) (tuple2 b1 d1)))) j)
     (= (t2tb4631 (tb2t4631 j)) j)) :pattern ((t2tb4631 (tb2t4631 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 c e)))) (v (set (tuple21 b d)))
  (r (set (tuple21 (set (tuple21 c e)) (tuple21 b d)))))
  (= (mem (set1 (tuple2 (set1 (tuple2 c1 e1)) (tuple2 b1 d1))) (t2tb4194 r)
  (relation (tuple2 b1 d1) (set1 (tuple2 c1 e1)) (t2tb3854 u) (t2tb687 v)))
  (forall ((x (set (tuple21 c e))) (y (tuple21 b d)))
  (=> (mem (tuple2 (set1 (tuple2 c1 e1)) (tuple2 b1 d1))
  (Tuple2 (set1 (tuple2 c1 e1)) (tuple2 b1 d1) (t2tb3478 x) (t2tb692 y))
  (t2tb4194 r)) (and (mem47 x u) (mem23 y v)))))))

(declare-fun t2tb4632 ((set (set (tuple21 (set (tuple21 c e)) d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 c e)) d))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 c1 e1)) d1))) (t2tb4632 x))))

(declare-fun tb2t4632 (uni) (set (set (tuple21 (set (tuple21 c e)) d))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 c e)) d)))))
  (! (= (tb2t4632 (t2tb4632 i)) i) :pattern ((t2tb4632 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 c1 e1)) d1))) j)
     (= (t2tb4632 (tb2t4632 j)) j)) :pattern ((t2tb4632 (tb2t4632 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 c e)))) (v (set d))
  (r (set (tuple21 (set (tuple21 c e)) d))))
  (= (mem (set1 (tuple2 (set1 (tuple2 c1 e1)) d1)) (t2tb4196 r)
  (relation d1 (set1 (tuple2 c1 e1)) (t2tb3854 u) (t2tb690 v)))
  (forall ((x (set (tuple21 c e))) (y d))
  (=> (mem (tuple2 (set1 (tuple2 c1 e1)) d1)
  (Tuple2 (set1 (tuple2 c1 e1)) d1 (t2tb3478 x) (t2tb694 y)) (t2tb4196 r))
  (and (mem47 x u) (mem20 y v)))))))

(declare-fun t2tb4633 ((set (set (tuple21 (set (tuple21 c e)) (tuple21 a
  (tuple21 b c)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 c e)) (tuple21 a (tuple21 b
  c))))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 c1 e1)) (tuple2 a1 (tuple2 b1 c1)))))
  (t2tb4633 x))))

(declare-fun tb2t4633 (uni) (set (set (tuple21 (set (tuple21 c e)) (tuple21 a
  (tuple21 b c))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 c e)) (tuple21 a (tuple21 b
  c))))))) (! (= (tb2t4633 (t2tb4633 i)) i) :pattern ((t2tb4633 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (set1 (tuple2 c1 e1)) (tuple2 a1 (tuple2 b1 c1)))))
     j) (= (t2tb4633 (tb2t4633 j)) j)) :pattern ((t2tb4633 (tb2t4633 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 c e)))) (v (set (tuple21 a (tuple21 b c))))
  (r (set (tuple21 (set (tuple21 c e)) (tuple21 a (tuple21 b c))))))
  (= (mem (set1 (tuple2 (set1 (tuple2 c1 e1)) (tuple2 a1 (tuple2 b1 c1))))
  (t2tb4198 r)
  (relation (tuple2 a1 (tuple2 b1 c1)) (set1 (tuple2 c1 e1)) (t2tb3854 u)
  (t2tb261 v)))
  (forall ((x (set (tuple21 c e))) (y (tuple21 a (tuple21 b c))))
  (=> (mem (tuple2 (set1 (tuple2 c1 e1)) (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 (set1 (tuple2 c1 e1)) (tuple2 a1 (tuple2 b1 c1)) (t2tb3478 x)
  (t2tb260 y)) (t2tb4198 r)) (and (mem47 x u) (mem14 y v)))))))

(declare-fun t2tb4634 ((set (set (tuple21 (set (tuple21 c e)) (set (tuple21 a
  c)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 c e)) (set (tuple21 a c)))))))
  (sort (set1 (set1 (tuple2 (set1 (tuple2 c1 e1)) (set1 (tuple2 a1 c1)))))
  (t2tb4634 x))))

(declare-fun tb2t4634 (uni) (set (set (tuple21 (set (tuple21 c e))
  (set (tuple21 a c))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 c e)) (set (tuple21 a c)))))))
  (! (= (tb2t4634 (t2tb4634 i)) i) :pattern ((t2tb4634 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (set1 (tuple2 c1 e1)) (set1 (tuple2 a1 c1))))) j)
     (= (t2tb4634 (tb2t4634 j)) j)) :pattern ((t2tb4634 (tb2t4634 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 c e)))) (v (set (set (tuple21 a c))))
  (r (set (tuple21 (set (tuple21 c e)) (set (tuple21 a c))))))
  (= (mem (set1 (tuple2 (set1 (tuple2 c1 e1)) (set1 (tuple2 a1 c1))))
  (t2tb4200 r)
  (relation (set1 (tuple2 a1 c1)) (set1 (tuple2 c1 e1)) (t2tb3854 u)
  (t2tb128 v)))
  (forall ((x (set (tuple21 c e))) (y (set (tuple21 a c))))
  (=> (mem (tuple2 (set1 (tuple2 c1 e1)) (set1 (tuple2 a1 c1)))
  (Tuple2 (set1 (tuple2 c1 e1)) (set1 (tuple2 a1 c1)) (t2tb3478 x)
  (t2tb129 y)) (t2tb4200 r)) (and (mem47 x u) (mem11 y v)))))))

(declare-fun t2tb4635 ((set (set (tuple21 (set (tuple21 c e)) (tuple21 a
  c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 c e)) (tuple21 a c)))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 c1 e1)) (tuple2 a1 c1)))) (t2tb4635 x))))

(declare-fun tb2t4635 (uni) (set (set (tuple21 (set (tuple21 c e)) (tuple21 a
  c)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 c e)) (tuple21 a c))))))
  (! (= (tb2t4635 (t2tb4635 i)) i) :pattern ((t2tb4635 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 c1 e1)) (tuple2 a1 c1)))) j)
     (= (t2tb4635 (tb2t4635 j)) j)) :pattern ((t2tb4635 (tb2t4635 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 c e)))) (v (set (tuple21 a c)))
  (r (set (tuple21 (set (tuple21 c e)) (tuple21 a c)))))
  (= (mem (set1 (tuple2 (set1 (tuple2 c1 e1)) (tuple2 a1 c1))) (t2tb4202 r)
  (relation (tuple2 a1 c1) (set1 (tuple2 c1 e1)) (t2tb3854 u) (t2tb129 v)))
  (forall ((x (set (tuple21 c e))) (y (tuple21 a c)))
  (=> (mem (tuple2 (set1 (tuple2 c1 e1)) (tuple2 a1 c1))
  (Tuple2 (set1 (tuple2 c1 e1)) (tuple2 a1 c1) (t2tb3478 x) (t2tb133 y))
  (t2tb4202 r)) (and (mem47 x u) (mem10 y v)))))))

(declare-fun t2tb4636 ((set (set (tuple21 (set (tuple21 c e)) c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 c e)) c))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 c1 e1)) c1))) (t2tb4636 x))))

(declare-fun tb2t4636 (uni) (set (set (tuple21 (set (tuple21 c e)) c))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 c e)) c)))))
  (! (= (tb2t4636 (t2tb4636 i)) i) :pattern ((t2tb4636 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 c1 e1)) c1))) j)
     (= (t2tb4636 (tb2t4636 j)) j)) :pattern ((t2tb4636 (tb2t4636 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 c e)))) (v (set c))
  (r (set (tuple21 (set (tuple21 c e)) c))))
  (= (mem (set1 (tuple2 (set1 (tuple2 c1 e1)) c1)) (t2tb4204 r)
  (relation c1 (set1 (tuple2 c1 e1)) (t2tb3854 u) (t2tb132 v)))
  (forall ((x (set (tuple21 c e))) (y c))
  (=> (mem (tuple2 (set1 (tuple2 c1 e1)) c1)
  (Tuple2 (set1 (tuple2 c1 e1)) c1 (t2tb3478 x) (t2tb135 y)) (t2tb4204 r))
  (and (mem47 x u) (mem7 y v)))))))

(declare-fun t2tb4637 ((set (set (tuple21 (set (tuple21 c e)) (set (tuple21 a
  b)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 c e)) (set (tuple21 a b)))))))
  (sort (set1 (set1 (tuple2 (set1 (tuple2 c1 e1)) (set1 (tuple2 a1 b1)))))
  (t2tb4637 x))))

(declare-fun tb2t4637 (uni) (set (set (tuple21 (set (tuple21 c e))
  (set (tuple21 a b))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 c e)) (set (tuple21 a b)))))))
  (! (= (tb2t4637 (t2tb4637 i)) i) :pattern ((t2tb4637 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (set1 (tuple2 c1 e1)) (set1 (tuple2 a1 b1))))) j)
     (= (t2tb4637 (tb2t4637 j)) j)) :pattern ((t2tb4637 (tb2t4637 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 c e)))) (v (set (set (tuple21 a b))))
  (r (set (tuple21 (set (tuple21 c e)) (set (tuple21 a b))))))
  (= (mem (set1 (tuple2 (set1 (tuple2 c1 e1)) (set1 (tuple2 a1 b1))))
  (t2tb4206 r)
  (relation (set1 (tuple2 a1 b1)) (set1 (tuple2 c1 e1)) (t2tb3854 u)
  (t2tb10 v)))
  (forall ((x (set (tuple21 c e))) (y (set (tuple21 a b))))
  (=> (mem (tuple2 (set1 (tuple2 c1 e1)) (set1 (tuple2 a1 b1)))
  (Tuple2 (set1 (tuple2 c1 e1)) (set1 (tuple2 a1 b1)) (t2tb3478 x)
  (t2tb11 y)) (t2tb4206 r)) (and (mem47 x u) (mem4 y v)))))))

(declare-fun t2tb4638 ((set (set (tuple21 (set (tuple21 c e)) (tuple21 a
  b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 c e)) (tuple21 a b)))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 c1 e1)) (tuple2 a1 b1)))) (t2tb4638 x))))

(declare-fun tb2t4638 (uni) (set (set (tuple21 (set (tuple21 c e)) (tuple21 a
  b)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 c e)) (tuple21 a b))))))
  (! (= (tb2t4638 (t2tb4638 i)) i) :pattern ((t2tb4638 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 c1 e1)) (tuple2 a1 b1)))) j)
     (= (t2tb4638 (tb2t4638 j)) j)) :pattern ((t2tb4638 (tb2t4638 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 c e)))) (v (set (tuple21 a b)))
  (r (set (tuple21 (set (tuple21 c e)) (tuple21 a b)))))
  (= (mem (set1 (tuple2 (set1 (tuple2 c1 e1)) (tuple2 a1 b1))) (t2tb4208 r)
  (relation (tuple2 a1 b1) (set1 (tuple2 c1 e1)) (t2tb3854 u) (t2tb11 v)))
  (forall ((x (set (tuple21 c e))) (y (tuple21 a b)))
  (=> (mem (tuple2 (set1 (tuple2 c1 e1)) (tuple2 a1 b1))
  (Tuple2 (set1 (tuple2 c1 e1)) (tuple2 a1 b1) (t2tb3478 x) (t2tb13 y))
  (t2tb4208 r)) (and (mem47 x u) (mem3 y v)))))))

(declare-fun t2tb4639 ((set (set (tuple21 (set (tuple21 c e)) b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 c e)) b))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 c1 e1)) b1))) (t2tb4639 x))))

(declare-fun tb2t4639 (uni) (set (set (tuple21 (set (tuple21 c e)) b))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 c e)) b)))))
  (! (= (tb2t4639 (t2tb4639 i)) i) :pattern ((t2tb4639 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 c1 e1)) b1))) j)
     (= (t2tb4639 (tb2t4639 j)) j)) :pattern ((t2tb4639 (tb2t4639 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 c e)))) (v (set b))
  (r (set (tuple21 (set (tuple21 c e)) b))))
  (= (mem (set1 (tuple2 (set1 (tuple2 c1 e1)) b1)) (t2tb4210 r)
  (relation b1 (set1 (tuple2 c1 e1)) (t2tb3854 u) (t2tb12 v)))
  (forall ((x (set (tuple21 c e))) (y b))
  (=> (mem (tuple2 (set1 (tuple2 c1 e1)) b1)
  (Tuple2 (set1 (tuple2 c1 e1)) b1 (t2tb3478 x) (t2tb14 y)) (t2tb4210 r))
  (and (mem47 x u) (mem2 y v)))))))

(declare-fun t2tb4640 ((set (set (tuple21 (set (tuple21 c e)) a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 c e)) a))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 c1 e1)) a1))) (t2tb4640 x))))

(declare-fun tb2t4640 (uni) (set (set (tuple21 (set (tuple21 c e)) a))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 c e)) a)))))
  (! (= (tb2t4640 (t2tb4640 i)) i) :pattern ((t2tb4640 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 c1 e1)) a1))) j)
     (= (t2tb4640 (tb2t4640 j)) j)) :pattern ((t2tb4640 (tb2t4640 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 c e)))) (v (set a))
  (r (set (tuple21 (set (tuple21 c e)) a))))
  (= (mem (set1 (tuple2 (set1 (tuple2 c1 e1)) a1)) (t2tb4212 r)
  (relation a1 (set1 (tuple2 c1 e1)) (t2tb3854 u) (t2tb1 v)))
  (forall ((x (set (tuple21 c e))) (y a))
  (=> (mem (tuple2 (set1 (tuple2 c1 e1)) a1)
  (Tuple2 (set1 (tuple2 c1 e1)) a1 (t2tb3478 x) (t2tb2 y)) (t2tb4212 r))
  (and (mem47 x u) (mem1 y v)))))))

;; mem_relation
  (assert
  (forall ((b2 ty))
  (forall ((u (set (set (tuple21 c e)))) (v uni) (r uni))
  (and
  (=> (mem (set1 (tuple2 (set1 (tuple2 c1 e1)) b2)) r
  (relation b2 (set1 (tuple2 c1 e1)) (t2tb3854 u) v))
  (forall ((x (set (tuple21 c e))) (y uni))
  (=> (mem (tuple2 (set1 (tuple2 c1 e1)) b2)
  (Tuple2 (set1 (tuple2 c1 e1)) b2 (t2tb3478 x) y) r)
  (and (mem47 x u) (mem b2 y v)))))
  (=>
  (forall ((x (set (tuple21 c e))) (y uni))
  (=> (sort b2 y)
  (=> (mem (tuple2 (set1 (tuple2 c1 e1)) b2)
  (Tuple2 (set1 (tuple2 c1 e1)) b2 (t2tb3478 x) y) r)
  (and (mem47 x u) (mem b2 y v))))) (mem
  (set1 (tuple2 (set1 (tuple2 c1 e1)) b2)) r
  (relation b2 (set1 (tuple2 c1 e1)) (t2tb3854 u) v)))))))

(declare-fun t2tb4641 ((set (set (tuple21 (tuple21 c e) (tuple21 (tuple21 b
  c) (tuple21 d e)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 c e) (tuple21 (tuple21 b c)
  (tuple21 d e))))))) (sort
  (set1
  (set1 (tuple2 (tuple2 c1 e1) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)))))
  (t2tb4641 x))))

(declare-fun tb2t4641 (uni) (set (set (tuple21 (tuple21 c e)
  (tuple21 (tuple21 b c) (tuple21 d e))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 c e) (tuple21 (tuple21 b c)
  (tuple21 d e)))))))
  (! (= (tb2t4641 (t2tb4641 i)) i) :pattern ((t2tb4641 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (set1 (tuple2 (tuple2 c1 e1) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)))))
     j) (= (t2tb4641 (tb2t4641 j)) j)) :pattern ((t2tb4641 (tb2t4641 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 c e))) (v (set (tuple21 (tuple21 b c) (tuple21 d
  e)))) (r (set (tuple21 (tuple21 c e) (tuple21 (tuple21 b c) (tuple21 d
  e))))))
  (= (mem
  (set1 (tuple2 (tuple2 c1 e1) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1))))
  (t2tb4214 r)
  (relation (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (tuple2 c1 e1)
  (t2tb3478 u) (t2tb4102 v)))
  (forall ((x (tuple21 c e)) (y (tuple21 (tuple21 b c) (tuple21 d e))))
  (=> (mem (tuple2 (tuple2 c1 e1) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)))
  (Tuple2 (tuple2 c1 e1) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (t2tb3479 x)
  (t2tb4104 y)) (t2tb4214 r)) (and (mem46 x u) (mem49 y v)))))))

(declare-fun t2tb4642 ((set (set (tuple21 (tuple21 c e) (tuple21 a (tuple21 d
  e)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 c e) (tuple21 a (tuple21 d e)))))))
  (sort (set1 (set1 (tuple2 (tuple2 c1 e1) (tuple2 a1 (tuple2 d1 e1)))))
  (t2tb4642 x))))

(declare-fun tb2t4642 (uni) (set (set (tuple21 (tuple21 c e) (tuple21 a
  (tuple21 d e))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 c e) (tuple21 a (tuple21 d e)))))))
  (! (= (tb2t4642 (t2tb4642 i)) i) :pattern ((t2tb4642 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (tuple2 c1 e1) (tuple2 a1 (tuple2 d1 e1))))) j)
     (= (t2tb4642 (tb2t4642 j)) j)) :pattern ((t2tb4642 (tb2t4642 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 c e))) (v (set (tuple21 a (tuple21 d e))))
  (r (set (tuple21 (tuple21 c e) (tuple21 a (tuple21 d e))))))
  (= (mem (set1 (tuple2 (tuple2 c1 e1) (tuple2 a1 (tuple2 d1 e1))))
  (t2tb4216 r)
  (relation (tuple2 a1 (tuple2 d1 e1)) (tuple2 c1 e1) (t2tb3478 u)
  (t2tb4103 v)))
  (forall ((x (tuple21 c e)) (y (tuple21 a (tuple21 d e))))
  (=> (mem (tuple2 (tuple2 c1 e1) (tuple2 a1 (tuple2 d1 e1)))
  (Tuple2 (tuple2 c1 e1) (tuple2 a1 (tuple2 d1 e1)) (t2tb3479 x)
  (t2tb4105 y)) (t2tb4216 r)) (and (mem46 x u) (mem48 y v)))))))

(declare-fun t2tb4643 ((set (set (tuple21 (tuple21 c e) (set (tuple21 c
  e)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 c e) (set (tuple21 c e))))))) (sort
  (set1 (set1 (tuple2 (tuple2 c1 e1) (set1 (tuple2 c1 e1))))) (t2tb4643 x))))

(declare-fun tb2t4643 (uni) (set (set (tuple21 (tuple21 c e) (set (tuple21 c
  e))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 c e) (set (tuple21 c e)))))))
  (! (= (tb2t4643 (t2tb4643 i)) i) :pattern ((t2tb4643 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 c1 e1) (set1 (tuple2 c1 e1))))) j)
     (= (t2tb4643 (tb2t4643 j)) j)) :pattern ((t2tb4643 (tb2t4643 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 c e))) (v (set (set (tuple21 c e))))
  (r (set (tuple21 (tuple21 c e) (set (tuple21 c e))))))
  (= (mem (set1 (tuple2 (tuple2 c1 e1) (set1 (tuple2 c1 e1)))) (t2tb4218 r)
  (relation (set1 (tuple2 c1 e1)) (tuple2 c1 e1) (t2tb3478 u) (t2tb3854 v)))
  (forall ((x (tuple21 c e)) (y (set (tuple21 c e))))
  (=> (mem (tuple2 (tuple2 c1 e1) (set1 (tuple2 c1 e1)))
  (Tuple2 (tuple2 c1 e1) (set1 (tuple2 c1 e1)) (t2tb3479 x) (t2tb3478 y))
  (t2tb4218 r)) (and (mem46 x u) (mem47 y v)))))))

(declare-fun t2tb4644 ((set (set (tuple21 (tuple21 c e) (tuple21 c
  e))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 c e) (tuple21 c e)))))) (sort
  (set1 (set1 (tuple2 (tuple2 c1 e1) (tuple2 c1 e1)))) (t2tb4644 x))))

(declare-fun tb2t4644 (uni) (set (set (tuple21 (tuple21 c e) (tuple21 c
  e)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 c e) (tuple21 c e))))))
  (! (= (tb2t4644 (t2tb4644 i)) i) :pattern ((t2tb4644 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 c1 e1) (tuple2 c1 e1)))) j)
     (= (t2tb4644 (tb2t4644 j)) j)) :pattern ((t2tb4644 (tb2t4644 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 c e))) (v (set (tuple21 c e)))
  (r (set (tuple21 (tuple21 c e) (tuple21 c e)))))
  (= (mem (set1 (tuple2 (tuple2 c1 e1) (tuple2 c1 e1))) (t2tb4220 r)
  (relation (tuple2 c1 e1) (tuple2 c1 e1) (t2tb3478 u) (t2tb3478 v)))
  (forall ((x (tuple21 c e)) (y (tuple21 c e)))
  (=> (mem (tuple2 (tuple2 c1 e1) (tuple2 c1 e1))
  (Tuple2 (tuple2 c1 e1) (tuple2 c1 e1) (t2tb3479 x) (t2tb3479 y))
  (t2tb4220 r)) (and (mem46 x u) (mem46 y v)))))))

(declare-fun t2tb4645 ((set (set (tuple21 (tuple21 c e) (tuple21 a
  e))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 c e) (tuple21 a e)))))) (sort
  (set1 (set1 (tuple2 (tuple2 c1 e1) (tuple2 a1 e1)))) (t2tb4645 x))))

(declare-fun tb2t4645 (uni) (set (set (tuple21 (tuple21 c e) (tuple21 a
  e)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 c e) (tuple21 a e))))))
  (! (= (tb2t4645 (t2tb4645 i)) i) :pattern ((t2tb4645 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 c1 e1) (tuple2 a1 e1)))) j)
     (= (t2tb4645 (tb2t4645 j)) j)) :pattern ((t2tb4645 (tb2t4645 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 c e))) (v (set (tuple21 a e)))
  (r (set (tuple21 (tuple21 c e) (tuple21 a e)))))
  (= (mem (set1 (tuple2 (tuple2 c1 e1) (tuple2 a1 e1))) (t2tb4222 r)
  (relation (tuple2 a1 e1) (tuple2 c1 e1) (t2tb3478 u) (t2tb2943 v)))
  (forall ((x (tuple21 c e)) (y (tuple21 a e)))
  (=> (mem (tuple2 (tuple2 c1 e1) (tuple2 a1 e1))
  (Tuple2 (tuple2 c1 e1) (tuple2 a1 e1) (t2tb3479 x) (t2tb2949 y))
  (t2tb4222 r)) (and (mem46 x u) (mem44 y v)))))))

(declare-fun t2tb4646 ((set (set (tuple21 (tuple21 c e) e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 c e) e))))) (sort
  (set1 (set1 (tuple2 (tuple2 c1 e1) e1))) (t2tb4646 x))))

(declare-fun tb2t4646 (uni) (set (set (tuple21 (tuple21 c e) e))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 c e) e)))))
  (! (= (tb2t4646 (t2tb4646 i)) i) :pattern ((t2tb4646 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 c1 e1) e1))) j)
     (= (t2tb4646 (tb2t4646 j)) j)) :pattern ((t2tb4646 (tb2t4646 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 c e))) (v (set e)) (r (set (tuple21 (tuple21 c e)
  e))))
  (= (mem (set1 (tuple2 (tuple2 c1 e1) e1)) (t2tb4224 r)
  (relation e1 (tuple2 c1 e1) (t2tb3478 u) (t2tb2947 v)))
  (forall ((x (tuple21 c e)) (y e))
  (=> (mem (tuple2 (tuple2 c1 e1) e1)
  (Tuple2 (tuple2 c1 e1) e1 (t2tb3479 x) (t2tb2955 y)) (t2tb4224 r))
  (and (mem46 x u) (mem36 y v)))))))

(declare-fun t2tb4647 ((set (set (tuple21 (tuple21 c e) (tuple21 a
  d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 c e) (tuple21 a d)))))) (sort
  (set1 (set1 (tuple2 (tuple2 c1 e1) (tuple2 a1 d1)))) (t2tb4647 x))))

(declare-fun tb2t4647 (uni) (set (set (tuple21 (tuple21 c e) (tuple21 a
  d)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 c e) (tuple21 a d))))))
  (! (= (tb2t4647 (t2tb4647 i)) i) :pattern ((t2tb4647 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 c1 e1) (tuple2 a1 d1)))) j)
     (= (t2tb4647 (tb2t4647 j)) j)) :pattern ((t2tb4647 (tb2t4647 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 c e))) (v (set (tuple21 a d)))
  (r (set (tuple21 (tuple21 c e) (tuple21 a d)))))
  (= (mem (set1 (tuple2 (tuple2 c1 e1) (tuple2 a1 d1))) (t2tb4226 r)
  (relation (tuple2 a1 d1) (tuple2 c1 e1) (t2tb3478 u) (t2tb903 v)))
  (forall ((x (tuple21 c e)) (y (tuple21 a d)))
  (=> (mem (tuple2 (tuple2 c1 e1) (tuple2 a1 d1))
  (Tuple2 (tuple2 c1 e1) (tuple2 a1 d1) (t2tb3479 x) (t2tb904 y))
  (t2tb4226 r)) (and (mem46 x u) (mem32 y v)))))))

(declare-fun t2tb4648 ((set (set (tuple21 (tuple21 c e) (set (tuple21 b
  d)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 c e) (set (tuple21 b d))))))) (sort
  (set1 (set1 (tuple2 (tuple2 c1 e1) (set1 (tuple2 b1 d1))))) (t2tb4648 x))))

(declare-fun tb2t4648 (uni) (set (set (tuple21 (tuple21 c e) (set (tuple21 b
  d))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 c e) (set (tuple21 b d)))))))
  (! (= (tb2t4648 (t2tb4648 i)) i) :pattern ((t2tb4648 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 c1 e1) (set1 (tuple2 b1 d1))))) j)
     (= (t2tb4648 (tb2t4648 j)) j)) :pattern ((t2tb4648 (tb2t4648 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 c e))) (v (set (set (tuple21 b d))))
  (r (set (tuple21 (tuple21 c e) (set (tuple21 b d))))))
  (= (mem (set1 (tuple2 (tuple2 c1 e1) (set1 (tuple2 b1 d1)))) (t2tb4228 r)
  (relation (set1 (tuple2 b1 d1)) (tuple2 c1 e1) (t2tb3478 u) (t2tb906 v)))
  (forall ((x (tuple21 c e)) (y (set (tuple21 b d))))
  (=> (mem (tuple2 (tuple2 c1 e1) (set1 (tuple2 b1 d1)))
  (Tuple2 (tuple2 c1 e1) (set1 (tuple2 b1 d1)) (t2tb3479 x) (t2tb687 y))
  (t2tb4228 r)) (and (mem46 x u) (mem33 y v)))))))

(declare-fun t2tb4649 ((set (set (tuple21 (tuple21 c e) (tuple21 b
  d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 c e) (tuple21 b d)))))) (sort
  (set1 (set1 (tuple2 (tuple2 c1 e1) (tuple2 b1 d1)))) (t2tb4649 x))))

(declare-fun tb2t4649 (uni) (set (set (tuple21 (tuple21 c e) (tuple21 b
  d)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 c e) (tuple21 b d))))))
  (! (= (tb2t4649 (t2tb4649 i)) i) :pattern ((t2tb4649 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 c1 e1) (tuple2 b1 d1)))) j)
     (= (t2tb4649 (tb2t4649 j)) j)) :pattern ((t2tb4649 (tb2t4649 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 c e))) (v (set (tuple21 b d)))
  (r (set (tuple21 (tuple21 c e) (tuple21 b d)))))
  (= (mem (set1 (tuple2 (tuple2 c1 e1) (tuple2 b1 d1))) (t2tb4230 r)
  (relation (tuple2 b1 d1) (tuple2 c1 e1) (t2tb3478 u) (t2tb687 v)))
  (forall ((x (tuple21 c e)) (y (tuple21 b d)))
  (=> (mem (tuple2 (tuple2 c1 e1) (tuple2 b1 d1))
  (Tuple2 (tuple2 c1 e1) (tuple2 b1 d1) (t2tb3479 x) (t2tb692 y))
  (t2tb4230 r)) (and (mem46 x u) (mem23 y v)))))))

(declare-fun t2tb4650 ((set (set (tuple21 (tuple21 c e) d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 c e) d))))) (sort
  (set1 (set1 (tuple2 (tuple2 c1 e1) d1))) (t2tb4650 x))))

(declare-fun tb2t4650 (uni) (set (set (tuple21 (tuple21 c e) d))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 c e) d)))))
  (! (= (tb2t4650 (t2tb4650 i)) i) :pattern ((t2tb4650 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 c1 e1) d1))) j)
     (= (t2tb4650 (tb2t4650 j)) j)) :pattern ((t2tb4650 (tb2t4650 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 c e))) (v (set d)) (r (set (tuple21 (tuple21 c e)
  d))))
  (= (mem (set1 (tuple2 (tuple2 c1 e1) d1)) (t2tb4232 r)
  (relation d1 (tuple2 c1 e1) (t2tb3478 u) (t2tb690 v)))
  (forall ((x (tuple21 c e)) (y d))
  (=> (mem (tuple2 (tuple2 c1 e1) d1)
  (Tuple2 (tuple2 c1 e1) d1 (t2tb3479 x) (t2tb694 y)) (t2tb4232 r))
  (and (mem46 x u) (mem20 y v)))))))

(declare-fun t2tb4651 ((set (set (tuple21 (tuple21 c e) (tuple21 a (tuple21 b
  c)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 c e) (tuple21 a (tuple21 b c)))))))
  (sort (set1 (set1 (tuple2 (tuple2 c1 e1) (tuple2 a1 (tuple2 b1 c1)))))
  (t2tb4651 x))))

(declare-fun tb2t4651 (uni) (set (set (tuple21 (tuple21 c e) (tuple21 a
  (tuple21 b c))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 c e) (tuple21 a (tuple21 b c)))))))
  (! (= (tb2t4651 (t2tb4651 i)) i) :pattern ((t2tb4651 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (tuple2 c1 e1) (tuple2 a1 (tuple2 b1 c1))))) j)
     (= (t2tb4651 (tb2t4651 j)) j)) :pattern ((t2tb4651 (tb2t4651 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 c e))) (v (set (tuple21 a (tuple21 b c))))
  (r (set (tuple21 (tuple21 c e) (tuple21 a (tuple21 b c))))))
  (= (mem (set1 (tuple2 (tuple2 c1 e1) (tuple2 a1 (tuple2 b1 c1))))
  (t2tb4234 r)
  (relation (tuple2 a1 (tuple2 b1 c1)) (tuple2 c1 e1) (t2tb3478 u)
  (t2tb261 v)))
  (forall ((x (tuple21 c e)) (y (tuple21 a (tuple21 b c))))
  (=> (mem (tuple2 (tuple2 c1 e1) (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 (tuple2 c1 e1) (tuple2 a1 (tuple2 b1 c1)) (t2tb3479 x) (t2tb260 y))
  (t2tb4234 r)) (and (mem46 x u) (mem14 y v)))))))

(declare-fun t2tb4652 ((set (set (tuple21 (tuple21 c e) (set (tuple21 a
  c)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 c e) (set (tuple21 a c))))))) (sort
  (set1 (set1 (tuple2 (tuple2 c1 e1) (set1 (tuple2 a1 c1))))) (t2tb4652 x))))

(declare-fun tb2t4652 (uni) (set (set (tuple21 (tuple21 c e) (set (tuple21 a
  c))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 c e) (set (tuple21 a c)))))))
  (! (= (tb2t4652 (t2tb4652 i)) i) :pattern ((t2tb4652 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 c1 e1) (set1 (tuple2 a1 c1))))) j)
     (= (t2tb4652 (tb2t4652 j)) j)) :pattern ((t2tb4652 (tb2t4652 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 c e))) (v (set (set (tuple21 a c))))
  (r (set (tuple21 (tuple21 c e) (set (tuple21 a c))))))
  (= (mem (set1 (tuple2 (tuple2 c1 e1) (set1 (tuple2 a1 c1)))) (t2tb4236 r)
  (relation (set1 (tuple2 a1 c1)) (tuple2 c1 e1) (t2tb3478 u) (t2tb128 v)))
  (forall ((x (tuple21 c e)) (y (set (tuple21 a c))))
  (=> (mem (tuple2 (tuple2 c1 e1) (set1 (tuple2 a1 c1)))
  (Tuple2 (tuple2 c1 e1) (set1 (tuple2 a1 c1)) (t2tb3479 x) (t2tb129 y))
  (t2tb4236 r)) (and (mem46 x u) (mem11 y v)))))))

(declare-fun t2tb4653 ((set (set (tuple21 (tuple21 c e) (tuple21 a
  c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 c e) (tuple21 a c)))))) (sort
  (set1 (set1 (tuple2 (tuple2 c1 e1) (tuple2 a1 c1)))) (t2tb4653 x))))

(declare-fun tb2t4653 (uni) (set (set (tuple21 (tuple21 c e) (tuple21 a
  c)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 c e) (tuple21 a c))))))
  (! (= (tb2t4653 (t2tb4653 i)) i) :pattern ((t2tb4653 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 c1 e1) (tuple2 a1 c1)))) j)
     (= (t2tb4653 (tb2t4653 j)) j)) :pattern ((t2tb4653 (tb2t4653 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 c e))) (v (set (tuple21 a c)))
  (r (set (tuple21 (tuple21 c e) (tuple21 a c)))))
  (= (mem (set1 (tuple2 (tuple2 c1 e1) (tuple2 a1 c1))) (t2tb4238 r)
  (relation (tuple2 a1 c1) (tuple2 c1 e1) (t2tb3478 u) (t2tb129 v)))
  (forall ((x (tuple21 c e)) (y (tuple21 a c)))
  (=> (mem (tuple2 (tuple2 c1 e1) (tuple2 a1 c1))
  (Tuple2 (tuple2 c1 e1) (tuple2 a1 c1) (t2tb3479 x) (t2tb133 y))
  (t2tb4238 r)) (and (mem46 x u) (mem10 y v)))))))

(declare-fun t2tb4654 ((set (set (tuple21 (tuple21 c e) c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 c e) c))))) (sort
  (set1 (set1 (tuple2 (tuple2 c1 e1) c1))) (t2tb4654 x))))

(declare-fun tb2t4654 (uni) (set (set (tuple21 (tuple21 c e) c))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 c e) c)))))
  (! (= (tb2t4654 (t2tb4654 i)) i) :pattern ((t2tb4654 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 c1 e1) c1))) j)
     (= (t2tb4654 (tb2t4654 j)) j)) :pattern ((t2tb4654 (tb2t4654 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 c e))) (v (set c)) (r (set (tuple21 (tuple21 c e)
  c))))
  (= (mem (set1 (tuple2 (tuple2 c1 e1) c1)) (t2tb4240 r)
  (relation c1 (tuple2 c1 e1) (t2tb3478 u) (t2tb132 v)))
  (forall ((x (tuple21 c e)) (y c))
  (=> (mem (tuple2 (tuple2 c1 e1) c1)
  (Tuple2 (tuple2 c1 e1) c1 (t2tb3479 x) (t2tb135 y)) (t2tb4240 r))
  (and (mem46 x u) (mem7 y v)))))))

(declare-fun t2tb4655 ((set (set (tuple21 (tuple21 c e) (set (tuple21 a
  b)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 c e) (set (tuple21 a b))))))) (sort
  (set1 (set1 (tuple2 (tuple2 c1 e1) (set1 (tuple2 a1 b1))))) (t2tb4655 x))))

(declare-fun tb2t4655 (uni) (set (set (tuple21 (tuple21 c e) (set (tuple21 a
  b))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 c e) (set (tuple21 a b)))))))
  (! (= (tb2t4655 (t2tb4655 i)) i) :pattern ((t2tb4655 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 c1 e1) (set1 (tuple2 a1 b1))))) j)
     (= (t2tb4655 (tb2t4655 j)) j)) :pattern ((t2tb4655 (tb2t4655 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 c e))) (v (set (set (tuple21 a b))))
  (r (set (tuple21 (tuple21 c e) (set (tuple21 a b))))))
  (= (mem (set1 (tuple2 (tuple2 c1 e1) (set1 (tuple2 a1 b1)))) (t2tb4242 r)
  (relation (set1 (tuple2 a1 b1)) (tuple2 c1 e1) (t2tb3478 u) (t2tb10 v)))
  (forall ((x (tuple21 c e)) (y (set (tuple21 a b))))
  (=> (mem (tuple2 (tuple2 c1 e1) (set1 (tuple2 a1 b1)))
  (Tuple2 (tuple2 c1 e1) (set1 (tuple2 a1 b1)) (t2tb3479 x) (t2tb11 y))
  (t2tb4242 r)) (and (mem46 x u) (mem4 y v)))))))

(declare-fun t2tb4656 ((set (set (tuple21 (tuple21 c e) (tuple21 a
  b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 c e) (tuple21 a b)))))) (sort
  (set1 (set1 (tuple2 (tuple2 c1 e1) (tuple2 a1 b1)))) (t2tb4656 x))))

(declare-fun tb2t4656 (uni) (set (set (tuple21 (tuple21 c e) (tuple21 a
  b)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 c e) (tuple21 a b))))))
  (! (= (tb2t4656 (t2tb4656 i)) i) :pattern ((t2tb4656 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 c1 e1) (tuple2 a1 b1)))) j)
     (= (t2tb4656 (tb2t4656 j)) j)) :pattern ((t2tb4656 (tb2t4656 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 c e))) (v (set (tuple21 a b)))
  (r (set (tuple21 (tuple21 c e) (tuple21 a b)))))
  (= (mem (set1 (tuple2 (tuple2 c1 e1) (tuple2 a1 b1))) (t2tb4244 r)
  (relation (tuple2 a1 b1) (tuple2 c1 e1) (t2tb3478 u) (t2tb11 v)))
  (forall ((x (tuple21 c e)) (y (tuple21 a b)))
  (=> (mem (tuple2 (tuple2 c1 e1) (tuple2 a1 b1))
  (Tuple2 (tuple2 c1 e1) (tuple2 a1 b1) (t2tb3479 x) (t2tb13 y))
  (t2tb4244 r)) (and (mem46 x u) (mem3 y v)))))))

(declare-fun t2tb4657 ((set (set (tuple21 (tuple21 c e) b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 c e) b))))) (sort
  (set1 (set1 (tuple2 (tuple2 c1 e1) b1))) (t2tb4657 x))))

(declare-fun tb2t4657 (uni) (set (set (tuple21 (tuple21 c e) b))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 c e) b)))))
  (! (= (tb2t4657 (t2tb4657 i)) i) :pattern ((t2tb4657 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 c1 e1) b1))) j)
     (= (t2tb4657 (tb2t4657 j)) j)) :pattern ((t2tb4657 (tb2t4657 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 c e))) (v (set b)) (r (set (tuple21 (tuple21 c e)
  b))))
  (= (mem (set1 (tuple2 (tuple2 c1 e1) b1)) (t2tb4246 r)
  (relation b1 (tuple2 c1 e1) (t2tb3478 u) (t2tb12 v)))
  (forall ((x (tuple21 c e)) (y b))
  (=> (mem (tuple2 (tuple2 c1 e1) b1)
  (Tuple2 (tuple2 c1 e1) b1 (t2tb3479 x) (t2tb14 y)) (t2tb4246 r))
  (and (mem46 x u) (mem2 y v)))))))

(declare-fun t2tb4658 ((set (set (tuple21 (tuple21 c e) a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 c e) a))))) (sort
  (set1 (set1 (tuple2 (tuple2 c1 e1) a1))) (t2tb4658 x))))

(declare-fun tb2t4658 (uni) (set (set (tuple21 (tuple21 c e) a))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 c e) a)))))
  (! (= (tb2t4658 (t2tb4658 i)) i) :pattern ((t2tb4658 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 c1 e1) a1))) j)
     (= (t2tb4658 (tb2t4658 j)) j)) :pattern ((t2tb4658 (tb2t4658 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 c e))) (v (set a)) (r (set (tuple21 (tuple21 c e)
  a))))
  (= (mem (set1 (tuple2 (tuple2 c1 e1) a1)) (t2tb4248 r)
  (relation a1 (tuple2 c1 e1) (t2tb3478 u) (t2tb1 v)))
  (forall ((x (tuple21 c e)) (y a))
  (=> (mem (tuple2 (tuple2 c1 e1) a1)
  (Tuple2 (tuple2 c1 e1) a1 (t2tb3479 x) (t2tb2 y)) (t2tb4248 r))
  (and (mem46 x u) (mem1 y v)))))))

;; mem_relation
  (assert
  (forall ((b2 ty))
  (forall ((u (set (tuple21 c e))) (v uni) (r uni))
  (and
  (=> (mem (set1 (tuple2 (tuple2 c1 e1) b2)) r
  (relation b2 (tuple2 c1 e1) (t2tb3478 u) v))
  (forall ((x (tuple21 c e)) (y uni))
  (=> (mem (tuple2 (tuple2 c1 e1) b2)
  (Tuple2 (tuple2 c1 e1) b2 (t2tb3479 x) y) r)
  (and (mem46 x u) (mem b2 y v)))))
  (=>
  (forall ((x (tuple21 c e)) (y uni))
  (=> (sort b2 y)
  (=> (mem (tuple2 (tuple2 c1 e1) b2)
  (Tuple2 (tuple2 c1 e1) b2 (t2tb3479 x) y) r)
  (and (mem46 x u) (mem b2 y v))))) (mem (set1 (tuple2 (tuple2 c1 e1) b2)) r
  (relation b2 (tuple2 c1 e1) (t2tb3478 u) v)))))))

(declare-fun t2tb4659 ((set (set (tuple21 (tuple21 a e) (tuple21 (tuple21 b
  c) (tuple21 d e)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a e) (tuple21 (tuple21 b c)
  (tuple21 d e))))))) (sort
  (set1
  (set1 (tuple2 (tuple2 a1 e1) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)))))
  (t2tb4659 x))))

(declare-fun tb2t4659 (uni) (set (set (tuple21 (tuple21 a e)
  (tuple21 (tuple21 b c) (tuple21 d e))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a e) (tuple21 (tuple21 b c)
  (tuple21 d e)))))))
  (! (= (tb2t4659 (t2tb4659 i)) i) :pattern ((t2tb4659 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (set1 (tuple2 (tuple2 a1 e1) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)))))
     j) (= (t2tb4659 (tb2t4659 j)) j)) :pattern ((t2tb4659 (tb2t4659 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a e))) (v (set (tuple21 (tuple21 b c) (tuple21 d
  e)))) (r (set (tuple21 (tuple21 a e) (tuple21 (tuple21 b c) (tuple21 d
  e))))))
  (= (mem
  (set1 (tuple2 (tuple2 a1 e1) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1))))
  (t2tb4250 r)
  (relation (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (tuple2 a1 e1)
  (t2tb2943 u) (t2tb4102 v)))
  (forall ((x (tuple21 a e)) (y (tuple21 (tuple21 b c) (tuple21 d e))))
  (=> (mem (tuple2 (tuple2 a1 e1) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)))
  (Tuple2 (tuple2 a1 e1) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (t2tb2949 x)
  (t2tb4104 y)) (t2tb4250 r)) (and (mem44 x u) (mem49 y v)))))))

(declare-fun t2tb4660 ((set (set (tuple21 (tuple21 a e) (tuple21 a (tuple21 d
  e)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a e) (tuple21 a (tuple21 d e)))))))
  (sort (set1 (set1 (tuple2 (tuple2 a1 e1) (tuple2 a1 (tuple2 d1 e1)))))
  (t2tb4660 x))))

(declare-fun tb2t4660 (uni) (set (set (tuple21 (tuple21 a e) (tuple21 a
  (tuple21 d e))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a e) (tuple21 a (tuple21 d e)))))))
  (! (= (tb2t4660 (t2tb4660 i)) i) :pattern ((t2tb4660 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (tuple2 a1 e1) (tuple2 a1 (tuple2 d1 e1))))) j)
     (= (t2tb4660 (tb2t4660 j)) j)) :pattern ((t2tb4660 (tb2t4660 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a e))) (v (set (tuple21 a (tuple21 d e))))
  (r (set (tuple21 (tuple21 a e) (tuple21 a (tuple21 d e))))))
  (= (mem (set1 (tuple2 (tuple2 a1 e1) (tuple2 a1 (tuple2 d1 e1))))
  (t2tb4252 r)
  (relation (tuple2 a1 (tuple2 d1 e1)) (tuple2 a1 e1) (t2tb2943 u)
  (t2tb4103 v)))
  (forall ((x (tuple21 a e)) (y (tuple21 a (tuple21 d e))))
  (=> (mem (tuple2 (tuple2 a1 e1) (tuple2 a1 (tuple2 d1 e1)))
  (Tuple2 (tuple2 a1 e1) (tuple2 a1 (tuple2 d1 e1)) (t2tb2949 x)
  (t2tb4105 y)) (t2tb4252 r)) (and (mem44 x u) (mem48 y v)))))))

(declare-fun t2tb4661 ((set (set (tuple21 (tuple21 a e) (set (tuple21 c
  e)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a e) (set (tuple21 c e))))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 e1) (set1 (tuple2 c1 e1))))) (t2tb4661 x))))

(declare-fun tb2t4661 (uni) (set (set (tuple21 (tuple21 a e) (set (tuple21 c
  e))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a e) (set (tuple21 c e)))))))
  (! (= (tb2t4661 (t2tb4661 i)) i) :pattern ((t2tb4661 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 e1) (set1 (tuple2 c1 e1))))) j)
     (= (t2tb4661 (tb2t4661 j)) j)) :pattern ((t2tb4661 (tb2t4661 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a e))) (v (set (set (tuple21 c e))))
  (r (set (tuple21 (tuple21 a e) (set (tuple21 c e))))))
  (= (mem (set1 (tuple2 (tuple2 a1 e1) (set1 (tuple2 c1 e1)))) (t2tb4254 r)
  (relation (set1 (tuple2 c1 e1)) (tuple2 a1 e1) (t2tb2943 u) (t2tb3854 v)))
  (forall ((x (tuple21 a e)) (y (set (tuple21 c e))))
  (=> (mem (tuple2 (tuple2 a1 e1) (set1 (tuple2 c1 e1)))
  (Tuple2 (tuple2 a1 e1) (set1 (tuple2 c1 e1)) (t2tb2949 x) (t2tb3478 y))
  (t2tb4254 r)) (and (mem44 x u) (mem47 y v)))))))

(declare-fun t2tb4662 ((set (set (tuple21 (tuple21 a e) (tuple21 c
  e))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a e) (tuple21 c e)))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 e1) (tuple2 c1 e1)))) (t2tb4662 x))))

(declare-fun tb2t4662 (uni) (set (set (tuple21 (tuple21 a e) (tuple21 c
  e)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a e) (tuple21 c e))))))
  (! (= (tb2t4662 (t2tb4662 i)) i) :pattern ((t2tb4662 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 e1) (tuple2 c1 e1)))) j)
     (= (t2tb4662 (tb2t4662 j)) j)) :pattern ((t2tb4662 (tb2t4662 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a e))) (v (set (tuple21 c e)))
  (r (set (tuple21 (tuple21 a e) (tuple21 c e)))))
  (= (mem (set1 (tuple2 (tuple2 a1 e1) (tuple2 c1 e1))) (t2tb4256 r)
  (relation (tuple2 c1 e1) (tuple2 a1 e1) (t2tb2943 u) (t2tb3478 v)))
  (forall ((x (tuple21 a e)) (y (tuple21 c e)))
  (=> (mem (tuple2 (tuple2 a1 e1) (tuple2 c1 e1))
  (Tuple2 (tuple2 a1 e1) (tuple2 c1 e1) (t2tb2949 x) (t2tb3479 y))
  (t2tb4256 r)) (and (mem44 x u) (mem46 y v)))))))

(declare-fun t2tb3607 ((set (set (tuple21 (tuple21 a e) (tuple21 a
  e))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a e) (tuple21 a e)))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 e1) (tuple2 a1 e1)))) (t2tb3607 x))))

(declare-fun tb2t3607 (uni) (set (set (tuple21 (tuple21 a e) (tuple21 a
  e)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a e) (tuple21 a e))))))
  (! (= (tb2t3607 (t2tb3607 i)) i) :pattern ((t2tb3607 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 e1) (tuple2 a1 e1)))) j)
     (= (t2tb3607 (tb2t3607 j)) j)) :pattern ((t2tb3607 (tb2t3607 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a e))) (v (set (tuple21 a e)))
  (r (set (tuple21 (tuple21 a e) (tuple21 a e)))))
  (= (mem (set1 (tuple2 (tuple2 a1 e1) (tuple2 a1 e1))) (t2tb2996 r)
  (relation (tuple2 a1 e1) (tuple2 a1 e1) (t2tb2943 u) (t2tb2943 v)))
  (forall ((x (tuple21 a e)) (y (tuple21 a e)))
  (=> (mem (tuple2 (tuple2 a1 e1) (tuple2 a1 e1))
  (Tuple2 (tuple2 a1 e1) (tuple2 a1 e1) (t2tb2949 x) (t2tb2949 y))
  (t2tb2996 r)) (and (mem44 x u) (mem44 y v)))))))

(declare-fun t2tb3615 ((set (set (tuple21 (tuple21 a e) e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a e) e))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 e1) e1))) (t2tb3615 x))))

(declare-fun tb2t3615 (uni) (set (set (tuple21 (tuple21 a e) e))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a e) e)))))
  (! (= (tb2t3615 (t2tb3615 i)) i) :pattern ((t2tb3615 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 e1) e1))) j)
     (= (t2tb3615 (tb2t3615 j)) j)) :pattern ((t2tb3615 (tb2t3615 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a e))) (v (set e)) (r (set (tuple21 (tuple21 a e)
  e))))
  (= (mem (set1 (tuple2 (tuple2 a1 e1) e1)) (t2tb3012 r)
  (relation e1 (tuple2 a1 e1) (t2tb2943 u) (t2tb2947 v)))
  (forall ((x (tuple21 a e)) (y e))
  (=> (mem (tuple2 (tuple2 a1 e1) e1)
  (Tuple2 (tuple2 a1 e1) e1 (t2tb2949 x) (t2tb2955 y)) (t2tb3012 r))
  (and (mem44 x u) (mem36 y v)))))))

(declare-fun t2tb4663 ((set (set (tuple21 (tuple21 a e) (tuple21 a
  d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a e) (tuple21 a d)))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 e1) (tuple2 a1 d1)))) (t2tb4663 x))))

(declare-fun tb2t4663 (uni) (set (set (tuple21 (tuple21 a e) (tuple21 a
  d)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a e) (tuple21 a d))))))
  (! (= (tb2t4663 (t2tb4663 i)) i) :pattern ((t2tb4663 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 e1) (tuple2 a1 d1)))) j)
     (= (t2tb4663 (tb2t4663 j)) j)) :pattern ((t2tb4663 (tb2t4663 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a e))) (v (set (tuple21 a d)))
  (r (set (tuple21 (tuple21 a e) (tuple21 a d)))))
  (= (mem (set1 (tuple2 (tuple2 a1 e1) (tuple2 a1 d1))) (t2tb4258 r)
  (relation (tuple2 a1 d1) (tuple2 a1 e1) (t2tb2943 u) (t2tb903 v)))
  (forall ((x (tuple21 a e)) (y (tuple21 a d)))
  (=> (mem (tuple2 (tuple2 a1 e1) (tuple2 a1 d1))
  (Tuple2 (tuple2 a1 e1) (tuple2 a1 d1) (t2tb2949 x) (t2tb904 y))
  (t2tb4258 r)) (and (mem44 x u) (mem32 y v)))))))

(declare-fun t2tb4664 ((set (set (tuple21 (tuple21 a e) (set (tuple21 b
  d)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a e) (set (tuple21 b d))))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 e1) (set1 (tuple2 b1 d1))))) (t2tb4664 x))))

(declare-fun tb2t4664 (uni) (set (set (tuple21 (tuple21 a e) (set (tuple21 b
  d))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a e) (set (tuple21 b d)))))))
  (! (= (tb2t4664 (t2tb4664 i)) i) :pattern ((t2tb4664 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 e1) (set1 (tuple2 b1 d1))))) j)
     (= (t2tb4664 (tb2t4664 j)) j)) :pattern ((t2tb4664 (tb2t4664 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a e))) (v (set (set (tuple21 b d))))
  (r (set (tuple21 (tuple21 a e) (set (tuple21 b d))))))
  (= (mem (set1 (tuple2 (tuple2 a1 e1) (set1 (tuple2 b1 d1)))) (t2tb4260 r)
  (relation (set1 (tuple2 b1 d1)) (tuple2 a1 e1) (t2tb2943 u) (t2tb906 v)))
  (forall ((x (tuple21 a e)) (y (set (tuple21 b d))))
  (=> (mem (tuple2 (tuple2 a1 e1) (set1 (tuple2 b1 d1)))
  (Tuple2 (tuple2 a1 e1) (set1 (tuple2 b1 d1)) (t2tb2949 x) (t2tb687 y))
  (t2tb4260 r)) (and (mem44 x u) (mem33 y v)))))))

(declare-fun t2tb4665 ((set (set (tuple21 (tuple21 a e) (tuple21 b
  d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a e) (tuple21 b d)))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 e1) (tuple2 b1 d1)))) (t2tb4665 x))))

(declare-fun tb2t4665 (uni) (set (set (tuple21 (tuple21 a e) (tuple21 b
  d)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a e) (tuple21 b d))))))
  (! (= (tb2t4665 (t2tb4665 i)) i) :pattern ((t2tb4665 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 e1) (tuple2 b1 d1)))) j)
     (= (t2tb4665 (tb2t4665 j)) j)) :pattern ((t2tb4665 (tb2t4665 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a e))) (v (set (tuple21 b d)))
  (r (set (tuple21 (tuple21 a e) (tuple21 b d)))))
  (= (mem (set1 (tuple2 (tuple2 a1 e1) (tuple2 b1 d1))) (t2tb4262 r)
  (relation (tuple2 b1 d1) (tuple2 a1 e1) (t2tb2943 u) (t2tb687 v)))
  (forall ((x (tuple21 a e)) (y (tuple21 b d)))
  (=> (mem (tuple2 (tuple2 a1 e1) (tuple2 b1 d1))
  (Tuple2 (tuple2 a1 e1) (tuple2 b1 d1) (t2tb2949 x) (t2tb692 y))
  (t2tb4262 r)) (and (mem44 x u) (mem23 y v)))))))

(declare-fun t2tb3619 ((set (set (tuple21 (tuple21 a e) d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a e) d))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 e1) d1))) (t2tb3619 x))))

(declare-fun tb2t3619 (uni) (set (set (tuple21 (tuple21 a e) d))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a e) d)))))
  (! (= (tb2t3619 (t2tb3619 i)) i) :pattern ((t2tb3619 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 e1) d1))) j)
     (= (t2tb3619 (tb2t3619 j)) j)) :pattern ((t2tb3619 (tb2t3619 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a e))) (v (set d)) (r (set (tuple21 (tuple21 a e)
  d))))
  (= (mem (set1 (tuple2 (tuple2 a1 e1) d1)) (t2tb3020 r)
  (relation d1 (tuple2 a1 e1) (t2tb2943 u) (t2tb690 v)))
  (forall ((x (tuple21 a e)) (y d))
  (=> (mem (tuple2 (tuple2 a1 e1) d1)
  (Tuple2 (tuple2 a1 e1) d1 (t2tb2949 x) (t2tb694 y)) (t2tb3020 r))
  (and (mem44 x u) (mem20 y v)))))))

(declare-fun t2tb4666 ((set (set (tuple21 (tuple21 a e) (tuple21 a (tuple21 b
  c)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a e) (tuple21 a (tuple21 b c)))))))
  (sort (set1 (set1 (tuple2 (tuple2 a1 e1) (tuple2 a1 (tuple2 b1 c1)))))
  (t2tb4666 x))))

(declare-fun tb2t4666 (uni) (set (set (tuple21 (tuple21 a e) (tuple21 a
  (tuple21 b c))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a e) (tuple21 a (tuple21 b c)))))))
  (! (= (tb2t4666 (t2tb4666 i)) i) :pattern ((t2tb4666 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (tuple2 a1 e1) (tuple2 a1 (tuple2 b1 c1))))) j)
     (= (t2tb4666 (tb2t4666 j)) j)) :pattern ((t2tb4666 (tb2t4666 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a e))) (v (set (tuple21 a (tuple21 b c))))
  (r (set (tuple21 (tuple21 a e) (tuple21 a (tuple21 b c))))))
  (= (mem (set1 (tuple2 (tuple2 a1 e1) (tuple2 a1 (tuple2 b1 c1))))
  (t2tb4264 r)
  (relation (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 e1) (t2tb2943 u)
  (t2tb261 v)))
  (forall ((x (tuple21 a e)) (y (tuple21 a (tuple21 b c))))
  (=> (mem (tuple2 (tuple2 a1 e1) (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 (tuple2 a1 e1) (tuple2 a1 (tuple2 b1 c1)) (t2tb2949 x) (t2tb260 y))
  (t2tb4264 r)) (and (mem44 x u) (mem14 y v)))))))

(declare-fun t2tb4667 ((set (set (tuple21 (tuple21 a e) (set (tuple21 a
  c)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a e) (set (tuple21 a c))))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 e1) (set1 (tuple2 a1 c1))))) (t2tb4667 x))))

(declare-fun tb2t4667 (uni) (set (set (tuple21 (tuple21 a e) (set (tuple21 a
  c))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a e) (set (tuple21 a c)))))))
  (! (= (tb2t4667 (t2tb4667 i)) i) :pattern ((t2tb4667 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 e1) (set1 (tuple2 a1 c1))))) j)
     (= (t2tb4667 (tb2t4667 j)) j)) :pattern ((t2tb4667 (tb2t4667 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a e))) (v (set (set (tuple21 a c))))
  (r (set (tuple21 (tuple21 a e) (set (tuple21 a c))))))
  (= (mem (set1 (tuple2 (tuple2 a1 e1) (set1 (tuple2 a1 c1)))) (t2tb4266 r)
  (relation (set1 (tuple2 a1 c1)) (tuple2 a1 e1) (t2tb2943 u) (t2tb128 v)))
  (forall ((x (tuple21 a e)) (y (set (tuple21 a c))))
  (=> (mem (tuple2 (tuple2 a1 e1) (set1 (tuple2 a1 c1)))
  (Tuple2 (tuple2 a1 e1) (set1 (tuple2 a1 c1)) (t2tb2949 x) (t2tb129 y))
  (t2tb4266 r)) (and (mem44 x u) (mem11 y v)))))))

(declare-fun t2tb4668 ((set (set (tuple21 (tuple21 a e) (tuple21 a
  c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a e) (tuple21 a c)))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 e1) (tuple2 a1 c1)))) (t2tb4668 x))))

(declare-fun tb2t4668 (uni) (set (set (tuple21 (tuple21 a e) (tuple21 a
  c)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a e) (tuple21 a c))))))
  (! (= (tb2t4668 (t2tb4668 i)) i) :pattern ((t2tb4668 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 e1) (tuple2 a1 c1)))) j)
     (= (t2tb4668 (tb2t4668 j)) j)) :pattern ((t2tb4668 (tb2t4668 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a e))) (v (set (tuple21 a c)))
  (r (set (tuple21 (tuple21 a e) (tuple21 a c)))))
  (= (mem (set1 (tuple2 (tuple2 a1 e1) (tuple2 a1 c1))) (t2tb4268 r)
  (relation (tuple2 a1 c1) (tuple2 a1 e1) (t2tb2943 u) (t2tb129 v)))
  (forall ((x (tuple21 a e)) (y (tuple21 a c)))
  (=> (mem (tuple2 (tuple2 a1 e1) (tuple2 a1 c1))
  (Tuple2 (tuple2 a1 e1) (tuple2 a1 c1) (t2tb2949 x) (t2tb133 y))
  (t2tb4268 r)) (and (mem44 x u) (mem10 y v)))))))

(declare-fun t2tb3620 ((set (set (tuple21 (tuple21 a e) c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a e) c))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 e1) c1))) (t2tb3620 x))))

(declare-fun tb2t3620 (uni) (set (set (tuple21 (tuple21 a e) c))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a e) c)))))
  (! (= (tb2t3620 (t2tb3620 i)) i) :pattern ((t2tb3620 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 e1) c1))) j)
     (= (t2tb3620 (tb2t3620 j)) j)) :pattern ((t2tb3620 (tb2t3620 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a e))) (v (set c)) (r (set (tuple21 (tuple21 a e)
  c))))
  (= (mem (set1 (tuple2 (tuple2 a1 e1) c1)) (t2tb3022 r)
  (relation c1 (tuple2 a1 e1) (t2tb2943 u) (t2tb132 v)))
  (forall ((x (tuple21 a e)) (y c))
  (=> (mem (tuple2 (tuple2 a1 e1) c1)
  (Tuple2 (tuple2 a1 e1) c1 (t2tb2949 x) (t2tb135 y)) (t2tb3022 r))
  (and (mem44 x u) (mem7 y v)))))))

(declare-fun t2tb3621 ((set (set (tuple21 (tuple21 a e) (set (tuple21 a
  b)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a e) (set (tuple21 a b))))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 e1) (set1 (tuple2 a1 b1))))) (t2tb3621 x))))

(declare-fun tb2t3621 (uni) (set (set (tuple21 (tuple21 a e) (set (tuple21 a
  b))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a e) (set (tuple21 a b)))))))
  (! (= (tb2t3621 (t2tb3621 i)) i) :pattern ((t2tb3621 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 e1) (set1 (tuple2 a1 b1))))) j)
     (= (t2tb3621 (tb2t3621 j)) j)) :pattern ((t2tb3621 (tb2t3621 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a e))) (v (set (set (tuple21 a b))))
  (r (set (tuple21 (tuple21 a e) (set (tuple21 a b))))))
  (= (mem (set1 (tuple2 (tuple2 a1 e1) (set1 (tuple2 a1 b1)))) (t2tb3024 r)
  (relation (set1 (tuple2 a1 b1)) (tuple2 a1 e1) (t2tb2943 u) (t2tb10 v)))
  (forall ((x (tuple21 a e)) (y (set (tuple21 a b))))
  (=> (mem (tuple2 (tuple2 a1 e1) (set1 (tuple2 a1 b1)))
  (Tuple2 (tuple2 a1 e1) (set1 (tuple2 a1 b1)) (t2tb2949 x) (t2tb11 y))
  (t2tb3024 r)) (and (mem44 x u) (mem4 y v)))))))

(declare-fun t2tb3622 ((set (set (tuple21 (tuple21 a e) (tuple21 a
  b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a e) (tuple21 a b)))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 e1) (tuple2 a1 b1)))) (t2tb3622 x))))

(declare-fun tb2t3622 (uni) (set (set (tuple21 (tuple21 a e) (tuple21 a
  b)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a e) (tuple21 a b))))))
  (! (= (tb2t3622 (t2tb3622 i)) i) :pattern ((t2tb3622 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 e1) (tuple2 a1 b1)))) j)
     (= (t2tb3622 (tb2t3622 j)) j)) :pattern ((t2tb3622 (tb2t3622 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a e))) (v (set (tuple21 a b)))
  (r (set (tuple21 (tuple21 a e) (tuple21 a b)))))
  (= (mem (set1 (tuple2 (tuple2 a1 e1) (tuple2 a1 b1))) (t2tb3026 r)
  (relation (tuple2 a1 b1) (tuple2 a1 e1) (t2tb2943 u) (t2tb11 v)))
  (forall ((x (tuple21 a e)) (y (tuple21 a b)))
  (=> (mem (tuple2 (tuple2 a1 e1) (tuple2 a1 b1))
  (Tuple2 (tuple2 a1 e1) (tuple2 a1 b1) (t2tb2949 x) (t2tb13 y))
  (t2tb3026 r)) (and (mem44 x u) (mem3 y v)))))))

(declare-fun t2tb3623 ((set (set (tuple21 (tuple21 a e) b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a e) b))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 e1) b1))) (t2tb3623 x))))

(declare-fun tb2t3623 (uni) (set (set (tuple21 (tuple21 a e) b))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a e) b)))))
  (! (= (tb2t3623 (t2tb3623 i)) i) :pattern ((t2tb3623 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 e1) b1))) j)
     (= (t2tb3623 (tb2t3623 j)) j)) :pattern ((t2tb3623 (tb2t3623 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a e))) (v (set b)) (r (set (tuple21 (tuple21 a e)
  b))))
  (= (mem (set1 (tuple2 (tuple2 a1 e1) b1)) (t2tb3028 r)
  (relation b1 (tuple2 a1 e1) (t2tb2943 u) (t2tb12 v)))
  (forall ((x (tuple21 a e)) (y b))
  (=> (mem (tuple2 (tuple2 a1 e1) b1)
  (Tuple2 (tuple2 a1 e1) b1 (t2tb2949 x) (t2tb14 y)) (t2tb3028 r))
  (and (mem44 x u) (mem2 y v)))))))

(declare-fun t2tb3624 ((set (set (tuple21 (tuple21 a e) a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a e) a))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 e1) a1))) (t2tb3624 x))))

(declare-fun tb2t3624 (uni) (set (set (tuple21 (tuple21 a e) a))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a e) a)))))
  (! (= (tb2t3624 (t2tb3624 i)) i) :pattern ((t2tb3624 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 e1) a1))) j)
     (= (t2tb3624 (tb2t3624 j)) j)) :pattern ((t2tb3624 (tb2t3624 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a e))) (v (set a)) (r (set (tuple21 (tuple21 a e)
  a))))
  (= (mem (set1 (tuple2 (tuple2 a1 e1) a1)) (t2tb3030 r)
  (relation a1 (tuple2 a1 e1) (t2tb2943 u) (t2tb1 v)))
  (forall ((x (tuple21 a e)) (y a))
  (=> (mem (tuple2 (tuple2 a1 e1) a1)
  (Tuple2 (tuple2 a1 e1) a1 (t2tb2949 x) (t2tb2 y)) (t2tb3030 r))
  (and (mem44 x u) (mem1 y v)))))))

;; mem_relation
  (assert
  (forall ((b2 ty))
  (forall ((u (set (tuple21 a e))) (v uni) (r uni))
  (and
  (=> (mem (set1 (tuple2 (tuple2 a1 e1) b2)) r
  (relation b2 (tuple2 a1 e1) (t2tb2943 u) v))
  (forall ((x (tuple21 a e)) (y uni))
  (=> (mem (tuple2 (tuple2 a1 e1) b2)
  (Tuple2 (tuple2 a1 e1) b2 (t2tb2949 x) y) r)
  (and (mem44 x u) (mem b2 y v)))))
  (=>
  (forall ((x (tuple21 a e)) (y uni))
  (=> (sort b2 y)
  (=> (mem (tuple2 (tuple2 a1 e1) b2)
  (Tuple2 (tuple2 a1 e1) b2 (t2tb2949 x) y) r)
  (and (mem44 x u) (mem b2 y v))))) (mem (set1 (tuple2 (tuple2 a1 e1) b2)) r
  (relation b2 (tuple2 a1 e1) (t2tb2943 u) v)))))))

(declare-fun t2tb4669 ((set (set (tuple21 e (tuple21 (tuple21 b c) (tuple21 d
  e)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 e (tuple21 (tuple21 b c) (tuple21 d e)))))))
  (sort (set1 (set1 (tuple2 e1 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)))))
  (t2tb4669 x))))

(declare-fun tb2t4669 (uni) (set (set (tuple21 e (tuple21 (tuple21 b c)
  (tuple21 d e))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 e (tuple21 (tuple21 b c) (tuple21 d e)))))))
  (! (= (tb2t4669 (t2tb4669 i)) i) :pattern ((t2tb4669 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 e1 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1))))) j)
     (= (t2tb4669 (tb2t4669 j)) j)) :pattern ((t2tb4669 (tb2t4669 j))) )))

;; mem_relation
  (assert
  (forall ((u (set e)) (v (set (tuple21 (tuple21 b c) (tuple21 d e))))
  (r (set (tuple21 e (tuple21 (tuple21 b c) (tuple21 d e))))))
  (= (mem (set1 (tuple2 e1 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1))))
  (t2tb4270 r)
  (relation (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) e1 (t2tb2947 u)
  (t2tb4102 v)))
  (forall ((x e) (y (tuple21 (tuple21 b c) (tuple21 d e))))
  (=> (mem (tuple2 e1 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)))
  (Tuple2 e1 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (t2tb2955 x)
  (t2tb4104 y)) (t2tb4270 r)) (and (mem36 x u) (mem49 y v)))))))

(declare-fun t2tb4670 ((set (set (tuple21 e (tuple21 a (tuple21 d
  e)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 e (tuple21 a (tuple21 d e))))))) (sort
  (set1 (set1 (tuple2 e1 (tuple2 a1 (tuple2 d1 e1))))) (t2tb4670 x))))

(declare-fun tb2t4670 (uni) (set (set (tuple21 e (tuple21 a (tuple21 d
  e))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 e (tuple21 a (tuple21 d e)))))))
  (! (= (tb2t4670 (t2tb4670 i)) i) :pattern ((t2tb4670 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 e1 (tuple2 a1 (tuple2 d1 e1))))) j)
     (= (t2tb4670 (tb2t4670 j)) j)) :pattern ((t2tb4670 (tb2t4670 j))) )))

;; mem_relation
  (assert
  (forall ((u (set e)) (v (set (tuple21 a (tuple21 d e)))) (r (set (tuple21 e
  (tuple21 a (tuple21 d e))))))
  (= (mem (set1 (tuple2 e1 (tuple2 a1 (tuple2 d1 e1)))) (t2tb4272 r)
  (relation (tuple2 a1 (tuple2 d1 e1)) e1 (t2tb2947 u) (t2tb4103 v)))
  (forall ((x e) (y (tuple21 a (tuple21 d e))))
  (=> (mem (tuple2 e1 (tuple2 a1 (tuple2 d1 e1)))
  (Tuple2 e1 (tuple2 a1 (tuple2 d1 e1)) (t2tb2955 x) (t2tb4105 y))
  (t2tb4272 r)) (and (mem36 x u) (mem48 y v)))))))

(declare-fun t2tb4671 ((set (set (tuple21 e (set (tuple21 c e)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 e (set (tuple21 c e))))))) (sort
  (set1 (set1 (tuple2 e1 (set1 (tuple2 c1 e1))))) (t2tb4671 x))))

(declare-fun tb2t4671 (uni) (set (set (tuple21 e (set (tuple21 c e))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 e (set (tuple21 c e)))))))
  (! (= (tb2t4671 (t2tb4671 i)) i) :pattern ((t2tb4671 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 e1 (set1 (tuple2 c1 e1))))) j)
     (= (t2tb4671 (tb2t4671 j)) j)) :pattern ((t2tb4671 (tb2t4671 j))) )))

;; mem_relation
  (assert
  (forall ((u (set e)) (v (set (set (tuple21 c e)))) (r (set (tuple21 e
  (set (tuple21 c e))))))
  (= (mem (set1 (tuple2 e1 (set1 (tuple2 c1 e1)))) (t2tb4274 r)
  (relation (set1 (tuple2 c1 e1)) e1 (t2tb2947 u) (t2tb3854 v)))
  (forall ((x e) (y (set (tuple21 c e))))
  (=> (mem (tuple2 e1 (set1 (tuple2 c1 e1)))
  (Tuple2 e1 (set1 (tuple2 c1 e1)) (t2tb2955 x) (t2tb3478 y)) (t2tb4274 r))
  (and (mem36 x u) (mem47 y v)))))))

(declare-fun t2tb4672 ((set (set (tuple21 e (tuple21 c e))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 e (tuple21 c e)))))) (sort
  (set1 (set1 (tuple2 e1 (tuple2 c1 e1)))) (t2tb4672 x))))

(declare-fun tb2t4672 (uni) (set (set (tuple21 e (tuple21 c e)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 e (tuple21 c e))))))
  (! (= (tb2t4672 (t2tb4672 i)) i) :pattern ((t2tb4672 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 e1 (tuple2 c1 e1)))) j)
     (= (t2tb4672 (tb2t4672 j)) j)) :pattern ((t2tb4672 (tb2t4672 j))) )))

;; mem_relation
  (assert
  (forall ((u (set e)) (v (set (tuple21 c e))) (r (set (tuple21 e (tuple21 c
  e)))))
  (= (mem (set1 (tuple2 e1 (tuple2 c1 e1))) (t2tb4276 r)
  (relation (tuple2 c1 e1) e1 (t2tb2947 u) (t2tb3478 v)))
  (forall ((x e) (y (tuple21 c e)))
  (=> (mem (tuple2 e1 (tuple2 c1 e1))
  (Tuple2 e1 (tuple2 c1 e1) (t2tb2955 x) (t2tb3479 y)) (t2tb4276 r))
  (and (mem36 x u) (mem46 y v)))))))

(declare-fun t2tb3759 ((set (set (tuple21 e (tuple21 a e))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 e (tuple21 a e)))))) (sort
  (set1 (set1 (tuple2 e1 (tuple2 a1 e1)))) (t2tb3759 x))))

(declare-fun tb2t3759 (uni) (set (set (tuple21 e (tuple21 a e)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 e (tuple21 a e))))))
  (! (= (tb2t3759 (t2tb3759 i)) i) :pattern ((t2tb3759 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 e1 (tuple2 a1 e1)))) j)
     (= (t2tb3759 (tb2t3759 j)) j)) :pattern ((t2tb3759 (tb2t3759 j))) )))

;; mem_relation
  (assert
  (forall ((u (set e)) (v (set (tuple21 a e))) (r (set (tuple21 e (tuple21 a
  e)))))
  (= (mem (set1 (tuple2 e1 (tuple2 a1 e1))) (t2tb3300 r)
  (relation (tuple2 a1 e1) e1 (t2tb2947 u) (t2tb2943 v)))
  (forall ((x e) (y (tuple21 a e)))
  (=> (mem (tuple2 e1 (tuple2 a1 e1))
  (Tuple2 e1 (tuple2 a1 e1) (t2tb2955 x) (t2tb2949 y)) (t2tb3300 r))
  (and (mem36 x u) (mem44 y v)))))))

(declare-fun t2tb3767 ((set (set (tuple21 e e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 e e))))) (sort (set1 (set1 (tuple2 e1 e1)))
  (t2tb3767 x))))

(declare-fun tb2t3767 (uni) (set (set (tuple21 e e))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 e e)))))
  (! (= (tb2t3767 (t2tb3767 i)) i) :pattern ((t2tb3767 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 e1 e1))) j) (= (t2tb3767 (tb2t3767 j)) j)) :pattern (
  (t2tb3767 (tb2t3767 j))) )))

;; mem_relation
  (assert
  (forall ((u (set e)) (v (set e)) (r (set (tuple21 e e))))
  (= (mem (set1 (tuple2 e1 e1)) (t2tb3316 r)
  (relation e1 e1 (t2tb2947 u) (t2tb2947 v)))
  (forall ((x e) (y e))
  (=> (mem (tuple2 e1 e1) (Tuple2 e1 e1 (t2tb2955 x) (t2tb2955 y))
  (t2tb3316 r)) (and (mem36 x u) (mem36 y v)))))))

(declare-fun t2tb4673 ((set (set (tuple21 e (tuple21 a d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 e (tuple21 a d)))))) (sort
  (set1 (set1 (tuple2 e1 (tuple2 a1 d1)))) (t2tb4673 x))))

(declare-fun tb2t4673 (uni) (set (set (tuple21 e (tuple21 a d)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 e (tuple21 a d))))))
  (! (= (tb2t4673 (t2tb4673 i)) i) :pattern ((t2tb4673 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 e1 (tuple2 a1 d1)))) j)
     (= (t2tb4673 (tb2t4673 j)) j)) :pattern ((t2tb4673 (tb2t4673 j))) )))

;; mem_relation
  (assert
  (forall ((u (set e)) (v (set (tuple21 a d))) (r (set (tuple21 e (tuple21 a
  d)))))
  (= (mem (set1 (tuple2 e1 (tuple2 a1 d1))) (t2tb4278 r)
  (relation (tuple2 a1 d1) e1 (t2tb2947 u) (t2tb903 v)))
  (forall ((x e) (y (tuple21 a d)))
  (=> (mem (tuple2 e1 (tuple2 a1 d1))
  (Tuple2 e1 (tuple2 a1 d1) (t2tb2955 x) (t2tb904 y)) (t2tb4278 r))
  (and (mem36 x u) (mem32 y v)))))))

(declare-fun t2tb4674 ((set (set (tuple21 e (set (tuple21 b d)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 e (set (tuple21 b d))))))) (sort
  (set1 (set1 (tuple2 e1 (set1 (tuple2 b1 d1))))) (t2tb4674 x))))

(declare-fun tb2t4674 (uni) (set (set (tuple21 e (set (tuple21 b d))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 e (set (tuple21 b d)))))))
  (! (= (tb2t4674 (t2tb4674 i)) i) :pattern ((t2tb4674 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 e1 (set1 (tuple2 b1 d1))))) j)
     (= (t2tb4674 (tb2t4674 j)) j)) :pattern ((t2tb4674 (tb2t4674 j))) )))

;; mem_relation
  (assert
  (forall ((u (set e)) (v (set (set (tuple21 b d)))) (r (set (tuple21 e
  (set (tuple21 b d))))))
  (= (mem (set1 (tuple2 e1 (set1 (tuple2 b1 d1)))) (t2tb4280 r)
  (relation (set1 (tuple2 b1 d1)) e1 (t2tb2947 u) (t2tb906 v)))
  (forall ((x e) (y (set (tuple21 b d))))
  (=> (mem (tuple2 e1 (set1 (tuple2 b1 d1)))
  (Tuple2 e1 (set1 (tuple2 b1 d1)) (t2tb2955 x) (t2tb687 y)) (t2tb4280 r))
  (and (mem36 x u) (mem33 y v)))))))

(declare-fun t2tb4675 ((set (set (tuple21 e (tuple21 b d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 e (tuple21 b d)))))) (sort
  (set1 (set1 (tuple2 e1 (tuple2 b1 d1)))) (t2tb4675 x))))

(declare-fun tb2t4675 (uni) (set (set (tuple21 e (tuple21 b d)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 e (tuple21 b d))))))
  (! (= (tb2t4675 (t2tb4675 i)) i) :pattern ((t2tb4675 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 e1 (tuple2 b1 d1)))) j)
     (= (t2tb4675 (tb2t4675 j)) j)) :pattern ((t2tb4675 (tb2t4675 j))) )))

;; mem_relation
  (assert
  (forall ((u (set e)) (v (set (tuple21 b d))) (r (set (tuple21 e (tuple21 b
  d)))))
  (= (mem (set1 (tuple2 e1 (tuple2 b1 d1))) (t2tb4282 r)
  (relation (tuple2 b1 d1) e1 (t2tb2947 u) (t2tb687 v)))
  (forall ((x e) (y (tuple21 b d)))
  (=> (mem (tuple2 e1 (tuple2 b1 d1))
  (Tuple2 e1 (tuple2 b1 d1) (t2tb2955 x) (t2tb692 y)) (t2tb4282 r))
  (and (mem36 x u) (mem23 y v)))))))

(declare-fun t2tb3771 ((set (set (tuple21 e d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 e d))))) (sort (set1 (set1 (tuple2 e1 d1)))
  (t2tb3771 x))))

(declare-fun tb2t3771 (uni) (set (set (tuple21 e d))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 e d)))))
  (! (= (tb2t3771 (t2tb3771 i)) i) :pattern ((t2tb3771 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 e1 d1))) j) (= (t2tb3771 (tb2t3771 j)) j)) :pattern (
  (t2tb3771 (tb2t3771 j))) )))

;; mem_relation
  (assert
  (forall ((u (set e)) (v (set d)) (r (set (tuple21 e d))))
  (= (mem (set1 (tuple2 e1 d1)) (t2tb3324 r)
  (relation d1 e1 (t2tb2947 u) (t2tb690 v)))
  (forall ((x e) (y d))
  (=> (mem (tuple2 e1 d1) (Tuple2 e1 d1 (t2tb2955 x) (t2tb694 y))
  (t2tb3324 r)) (and (mem36 x u) (mem20 y v)))))))

(declare-fun t2tb4676 ((set (set (tuple21 e (tuple21 a (tuple21 b
  c)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 e (tuple21 a (tuple21 b c))))))) (sort
  (set1 (set1 (tuple2 e1 (tuple2 a1 (tuple2 b1 c1))))) (t2tb4676 x))))

(declare-fun tb2t4676 (uni) (set (set (tuple21 e (tuple21 a (tuple21 b
  c))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 e (tuple21 a (tuple21 b c)))))))
  (! (= (tb2t4676 (t2tb4676 i)) i) :pattern ((t2tb4676 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 e1 (tuple2 a1 (tuple2 b1 c1))))) j)
     (= (t2tb4676 (tb2t4676 j)) j)) :pattern ((t2tb4676 (tb2t4676 j))) )))

;; mem_relation
  (assert
  (forall ((u (set e)) (v (set (tuple21 a (tuple21 b c)))) (r (set (tuple21 e
  (tuple21 a (tuple21 b c))))))
  (= (mem (set1 (tuple2 e1 (tuple2 a1 (tuple2 b1 c1)))) (t2tb4284 r)
  (relation (tuple2 a1 (tuple2 b1 c1)) e1 (t2tb2947 u) (t2tb261 v)))
  (forall ((x e) (y (tuple21 a (tuple21 b c))))
  (=> (mem (tuple2 e1 (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 e1 (tuple2 a1 (tuple2 b1 c1)) (t2tb2955 x) (t2tb260 y))
  (t2tb4284 r)) (and (mem36 x u) (mem14 y v)))))))

(declare-fun t2tb4677 ((set (set (tuple21 e (set (tuple21 a c)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 e (set (tuple21 a c))))))) (sort
  (set1 (set1 (tuple2 e1 (set1 (tuple2 a1 c1))))) (t2tb4677 x))))

(declare-fun tb2t4677 (uni) (set (set (tuple21 e (set (tuple21 a c))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 e (set (tuple21 a c)))))))
  (! (= (tb2t4677 (t2tb4677 i)) i) :pattern ((t2tb4677 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 e1 (set1 (tuple2 a1 c1))))) j)
     (= (t2tb4677 (tb2t4677 j)) j)) :pattern ((t2tb4677 (tb2t4677 j))) )))

;; mem_relation
  (assert
  (forall ((u (set e)) (v (set (set (tuple21 a c)))) (r (set (tuple21 e
  (set (tuple21 a c))))))
  (= (mem (set1 (tuple2 e1 (set1 (tuple2 a1 c1)))) (t2tb4285 r)
  (relation (set1 (tuple2 a1 c1)) e1 (t2tb2947 u) (t2tb128 v)))
  (forall ((x e) (y (set (tuple21 a c))))
  (=> (mem (tuple2 e1 (set1 (tuple2 a1 c1)))
  (Tuple2 e1 (set1 (tuple2 a1 c1)) (t2tb2955 x) (t2tb129 y)) (t2tb4285 r))
  (and (mem36 x u) (mem11 y v)))))))

(declare-fun t2tb4678 ((set (set (tuple21 e (tuple21 a c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 e (tuple21 a c)))))) (sort
  (set1 (set1 (tuple2 e1 (tuple2 a1 c1)))) (t2tb4678 x))))

(declare-fun tb2t4678 (uni) (set (set (tuple21 e (tuple21 a c)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 e (tuple21 a c))))))
  (! (= (tb2t4678 (t2tb4678 i)) i) :pattern ((t2tb4678 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 e1 (tuple2 a1 c1)))) j)
     (= (t2tb4678 (tb2t4678 j)) j)) :pattern ((t2tb4678 (tb2t4678 j))) )))

;; mem_relation
  (assert
  (forall ((u (set e)) (v (set (tuple21 a c))) (r (set (tuple21 e (tuple21 a
  c)))))
  (= (mem (set1 (tuple2 e1 (tuple2 a1 c1))) (t2tb4287 r)
  (relation (tuple2 a1 c1) e1 (t2tb2947 u) (t2tb129 v)))
  (forall ((x e) (y (tuple21 a c)))
  (=> (mem (tuple2 e1 (tuple2 a1 c1))
  (Tuple2 e1 (tuple2 a1 c1) (t2tb2955 x) (t2tb133 y)) (t2tb4287 r))
  (and (mem36 x u) (mem10 y v)))))))

(declare-fun t2tb3772 ((set (set (tuple21 e c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 e c))))) (sort (set1 (set1 (tuple2 e1 c1)))
  (t2tb3772 x))))

(declare-fun tb2t3772 (uni) (set (set (tuple21 e c))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 e c)))))
  (! (= (tb2t3772 (t2tb3772 i)) i) :pattern ((t2tb3772 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 e1 c1))) j) (= (t2tb3772 (tb2t3772 j)) j)) :pattern (
  (t2tb3772 (tb2t3772 j))) )))

;; mem_relation
  (assert
  (forall ((u (set e)) (v (set c)) (r (set (tuple21 e c))))
  (= (mem (set1 (tuple2 e1 c1)) (t2tb3326 r)
  (relation c1 e1 (t2tb2947 u) (t2tb132 v)))
  (forall ((x e) (y c))
  (=> (mem (tuple2 e1 c1) (Tuple2 e1 c1 (t2tb2955 x) (t2tb135 y))
  (t2tb3326 r)) (and (mem36 x u) (mem7 y v)))))))

(declare-fun t2tb3773 ((set (set (tuple21 e (set (tuple21 a b)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 e (set (tuple21 a b))))))) (sort
  (set1 (set1 (tuple2 e1 (set1 (tuple2 a1 b1))))) (t2tb3773 x))))

(declare-fun tb2t3773 (uni) (set (set (tuple21 e (set (tuple21 a b))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 e (set (tuple21 a b)))))))
  (! (= (tb2t3773 (t2tb3773 i)) i) :pattern ((t2tb3773 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 e1 (set1 (tuple2 a1 b1))))) j)
     (= (t2tb3773 (tb2t3773 j)) j)) :pattern ((t2tb3773 (tb2t3773 j))) )))

;; mem_relation
  (assert
  (forall ((u (set e)) (v (set (set (tuple21 a b)))) (r (set (tuple21 e
  (set (tuple21 a b))))))
  (= (mem (set1 (tuple2 e1 (set1 (tuple2 a1 b1)))) (t2tb3328 r)
  (relation (set1 (tuple2 a1 b1)) e1 (t2tb2947 u) (t2tb10 v)))
  (forall ((x e) (y (set (tuple21 a b))))
  (=> (mem (tuple2 e1 (set1 (tuple2 a1 b1)))
  (Tuple2 e1 (set1 (tuple2 a1 b1)) (t2tb2955 x) (t2tb11 y)) (t2tb3328 r))
  (and (mem36 x u) (mem4 y v)))))))

(declare-fun t2tb3774 ((set (set (tuple21 e (tuple21 a b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 e (tuple21 a b)))))) (sort
  (set1 (set1 (tuple2 e1 (tuple2 a1 b1)))) (t2tb3774 x))))

(declare-fun tb2t3774 (uni) (set (set (tuple21 e (tuple21 a b)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 e (tuple21 a b))))))
  (! (= (tb2t3774 (t2tb3774 i)) i) :pattern ((t2tb3774 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 e1 (tuple2 a1 b1)))) j)
     (= (t2tb3774 (tb2t3774 j)) j)) :pattern ((t2tb3774 (tb2t3774 j))) )))

;; mem_relation
  (assert
  (forall ((u (set e)) (v (set (tuple21 a b))) (r (set (tuple21 e (tuple21 a
  b)))))
  (= (mem (set1 (tuple2 e1 (tuple2 a1 b1))) (t2tb3330 r)
  (relation (tuple2 a1 b1) e1 (t2tb2947 u) (t2tb11 v)))
  (forall ((x e) (y (tuple21 a b)))
  (=> (mem (tuple2 e1 (tuple2 a1 b1))
  (Tuple2 e1 (tuple2 a1 b1) (t2tb2955 x) (t2tb13 y)) (t2tb3330 r))
  (and (mem36 x u) (mem3 y v)))))))

(declare-fun t2tb3775 ((set (set (tuple21 e b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 e b))))) (sort (set1 (set1 (tuple2 e1 b1)))
  (t2tb3775 x))))

(declare-fun tb2t3775 (uni) (set (set (tuple21 e b))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 e b)))))
  (! (= (tb2t3775 (t2tb3775 i)) i) :pattern ((t2tb3775 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 e1 b1))) j) (= (t2tb3775 (tb2t3775 j)) j)) :pattern (
  (t2tb3775 (tb2t3775 j))) )))

;; mem_relation
  (assert
  (forall ((u (set e)) (v (set b)) (r (set (tuple21 e b))))
  (= (mem (set1 (tuple2 e1 b1)) (t2tb3332 r)
  (relation b1 e1 (t2tb2947 u) (t2tb12 v)))
  (forall ((x e) (y b))
  (=> (mem (tuple2 e1 b1) (Tuple2 e1 b1 (t2tb2955 x) (t2tb14 y))
  (t2tb3332 r)) (and (mem36 x u) (mem2 y v)))))))

(declare-fun t2tb3776 ((set (set (tuple21 e a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 e a))))) (sort (set1 (set1 (tuple2 e1 a1)))
  (t2tb3776 x))))

(declare-fun tb2t3776 (uni) (set (set (tuple21 e a))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 e a)))))
  (! (= (tb2t3776 (t2tb3776 i)) i) :pattern ((t2tb3776 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 e1 a1))) j) (= (t2tb3776 (tb2t3776 j)) j)) :pattern (
  (t2tb3776 (tb2t3776 j))) )))

;; mem_relation
  (assert
  (forall ((u (set e)) (v (set a)) (r (set (tuple21 e a))))
  (= (mem (set1 (tuple2 e1 a1)) (t2tb3334 r)
  (relation a1 e1 (t2tb2947 u) (t2tb1 v)))
  (forall ((x e) (y a))
  (=> (mem (tuple2 e1 a1) (Tuple2 e1 a1 (t2tb2955 x) (t2tb2 y)) (t2tb3334 r))
  (and (mem36 x u) (mem1 y v)))))))

;; mem_relation
  (assert
  (forall ((b2 ty))
  (forall ((u (set e)) (v uni) (r uni))
  (and
  (=> (mem (set1 (tuple2 e1 b2)) r (relation b2 e1 (t2tb2947 u) v))
  (forall ((x e) (y uni))
  (=> (mem (tuple2 e1 b2) (Tuple2 e1 b2 (t2tb2955 x) y) r)
  (and (mem36 x u) (mem b2 y v)))))
  (=>
  (forall ((x e) (y uni))
  (=> (sort b2 y)
  (=> (mem (tuple2 e1 b2) (Tuple2 e1 b2 (t2tb2955 x) y) r)
  (and (mem36 x u) (mem b2 y v))))) (mem (set1 (tuple2 e1 b2)) r
  (relation b2 e1 (t2tb2947 u) v)))))))

(declare-fun t2tb4679 ((set (set (tuple21 (tuple21 a d) (tuple21 (tuple21 b
  c) (tuple21 d e)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a d) (tuple21 (tuple21 b c)
  (tuple21 d e))))))) (sort
  (set1
  (set1 (tuple2 (tuple2 a1 d1) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)))))
  (t2tb4679 x))))

(declare-fun tb2t4679 (uni) (set (set (tuple21 (tuple21 a d)
  (tuple21 (tuple21 b c) (tuple21 d e))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a d) (tuple21 (tuple21 b c)
  (tuple21 d e)))))))
  (! (= (tb2t4679 (t2tb4679 i)) i) :pattern ((t2tb4679 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (set1 (tuple2 (tuple2 a1 d1) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)))))
     j) (= (t2tb4679 (tb2t4679 j)) j)) :pattern ((t2tb4679 (tb2t4679 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a d))) (v (set (tuple21 (tuple21 b c) (tuple21 d
  e)))) (r (set (tuple21 (tuple21 a d) (tuple21 (tuple21 b c) (tuple21 d
  e))))))
  (= (mem
  (set1 (tuple2 (tuple2 a1 d1) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1))))
  (t2tb4289 r)
  (relation (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (tuple2 a1 d1) (t2tb903 u)
  (t2tb4102 v)))
  (forall ((x (tuple21 a d)) (y (tuple21 (tuple21 b c) (tuple21 d e))))
  (=> (mem (tuple2 (tuple2 a1 d1) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)))
  (Tuple2 (tuple2 a1 d1) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (t2tb904 x)
  (t2tb4104 y)) (t2tb4289 r)) (and (mem32 x u) (mem49 y v)))))))

(declare-fun t2tb4680 ((set (set (tuple21 (tuple21 a d) (tuple21 a (tuple21 d
  e)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a d) (tuple21 a (tuple21 d e)))))))
  (sort (set1 (set1 (tuple2 (tuple2 a1 d1) (tuple2 a1 (tuple2 d1 e1)))))
  (t2tb4680 x))))

(declare-fun tb2t4680 (uni) (set (set (tuple21 (tuple21 a d) (tuple21 a
  (tuple21 d e))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a d) (tuple21 a (tuple21 d e)))))))
  (! (= (tb2t4680 (t2tb4680 i)) i) :pattern ((t2tb4680 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (tuple2 a1 d1) (tuple2 a1 (tuple2 d1 e1))))) j)
     (= (t2tb4680 (tb2t4680 j)) j)) :pattern ((t2tb4680 (tb2t4680 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a d))) (v (set (tuple21 a (tuple21 d e))))
  (r (set (tuple21 (tuple21 a d) (tuple21 a (tuple21 d e))))))
  (= (mem (set1 (tuple2 (tuple2 a1 d1) (tuple2 a1 (tuple2 d1 e1))))
  (t2tb4291 r)
  (relation (tuple2 a1 (tuple2 d1 e1)) (tuple2 a1 d1) (t2tb903 u)
  (t2tb4103 v)))
  (forall ((x (tuple21 a d)) (y (tuple21 a (tuple21 d e))))
  (=> (mem (tuple2 (tuple2 a1 d1) (tuple2 a1 (tuple2 d1 e1)))
  (Tuple2 (tuple2 a1 d1) (tuple2 a1 (tuple2 d1 e1)) (t2tb904 x) (t2tb4105 y))
  (t2tb4291 r)) (and (mem32 x u) (mem48 y v)))))))

(declare-fun t2tb4681 ((set (set (tuple21 (tuple21 a d) (set (tuple21 c
  e)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a d) (set (tuple21 c e))))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 d1) (set1 (tuple2 c1 e1))))) (t2tb4681 x))))

(declare-fun tb2t4681 (uni) (set (set (tuple21 (tuple21 a d) (set (tuple21 c
  e))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a d) (set (tuple21 c e)))))))
  (! (= (tb2t4681 (t2tb4681 i)) i) :pattern ((t2tb4681 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 d1) (set1 (tuple2 c1 e1))))) j)
     (= (t2tb4681 (tb2t4681 j)) j)) :pattern ((t2tb4681 (tb2t4681 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a d))) (v (set (set (tuple21 c e))))
  (r (set (tuple21 (tuple21 a d) (set (tuple21 c e))))))
  (= (mem (set1 (tuple2 (tuple2 a1 d1) (set1 (tuple2 c1 e1)))) (t2tb4293 r)
  (relation (set1 (tuple2 c1 e1)) (tuple2 a1 d1) (t2tb903 u) (t2tb3854 v)))
  (forall ((x (tuple21 a d)) (y (set (tuple21 c e))))
  (=> (mem (tuple2 (tuple2 a1 d1) (set1 (tuple2 c1 e1)))
  (Tuple2 (tuple2 a1 d1) (set1 (tuple2 c1 e1)) (t2tb904 x) (t2tb3478 y))
  (t2tb4293 r)) (and (mem32 x u) (mem47 y v)))))))

(declare-fun t2tb4682 ((set (set (tuple21 (tuple21 a d) (tuple21 c
  e))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a d) (tuple21 c e)))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 d1) (tuple2 c1 e1)))) (t2tb4682 x))))

(declare-fun tb2t4682 (uni) (set (set (tuple21 (tuple21 a d) (tuple21 c
  e)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a d) (tuple21 c e))))))
  (! (= (tb2t4682 (t2tb4682 i)) i) :pattern ((t2tb4682 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 d1) (tuple2 c1 e1)))) j)
     (= (t2tb4682 (tb2t4682 j)) j)) :pattern ((t2tb4682 (tb2t4682 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a d))) (v (set (tuple21 c e)))
  (r (set (tuple21 (tuple21 a d) (tuple21 c e)))))
  (= (mem (set1 (tuple2 (tuple2 a1 d1) (tuple2 c1 e1))) (t2tb4295 r)
  (relation (tuple2 c1 e1) (tuple2 a1 d1) (t2tb903 u) (t2tb3478 v)))
  (forall ((x (tuple21 a d)) (y (tuple21 c e)))
  (=> (mem (tuple2 (tuple2 a1 d1) (tuple2 c1 e1))
  (Tuple2 (tuple2 a1 d1) (tuple2 c1 e1) (t2tb904 x) (t2tb3479 y))
  (t2tb4295 r)) (and (mem32 x u) (mem46 y v)))))))

(declare-fun t2tb4683 ((set (set (tuple21 (tuple21 a d) (tuple21 a
  e))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a d) (tuple21 a e)))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 d1) (tuple2 a1 e1)))) (t2tb4683 x))))

(declare-fun tb2t4683 (uni) (set (set (tuple21 (tuple21 a d) (tuple21 a
  e)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a d) (tuple21 a e))))))
  (! (= (tb2t4683 (t2tb4683 i)) i) :pattern ((t2tb4683 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 d1) (tuple2 a1 e1)))) j)
     (= (t2tb4683 (tb2t4683 j)) j)) :pattern ((t2tb4683 (tb2t4683 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a d))) (v (set (tuple21 a e)))
  (r (set (tuple21 (tuple21 a d) (tuple21 a e)))))
  (= (mem (set1 (tuple2 (tuple2 a1 d1) (tuple2 a1 e1))) (t2tb4297 r)
  (relation (tuple2 a1 e1) (tuple2 a1 d1) (t2tb903 u) (t2tb2943 v)))
  (forall ((x (tuple21 a d)) (y (tuple21 a e)))
  (=> (mem (tuple2 (tuple2 a1 d1) (tuple2 a1 e1))
  (Tuple2 (tuple2 a1 d1) (tuple2 a1 e1) (t2tb904 x) (t2tb2949 y))
  (t2tb4297 r)) (and (mem32 x u) (mem44 y v)))))))

(declare-fun t2tb4684 ((set (set (tuple21 (tuple21 a d) e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a d) e))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 d1) e1))) (t2tb4684 x))))

(declare-fun tb2t4684 (uni) (set (set (tuple21 (tuple21 a d) e))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a d) e)))))
  (! (= (tb2t4684 (t2tb4684 i)) i) :pattern ((t2tb4684 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 d1) e1))) j)
     (= (t2tb4684 (tb2t4684 j)) j)) :pattern ((t2tb4684 (tb2t4684 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a d))) (v (set e)) (r (set (tuple21 (tuple21 a d)
  e))))
  (= (mem (set1 (tuple2 (tuple2 a1 d1) e1)) (t2tb4300 r)
  (relation e1 (tuple2 a1 d1) (t2tb903 u) (t2tb2947 v)))
  (forall ((x (tuple21 a d)) (y e))
  (=> (mem (tuple2 (tuple2 a1 d1) e1)
  (Tuple2 (tuple2 a1 d1) e1 (t2tb904 x) (t2tb2955 y)) (t2tb4300 r))
  (and (mem32 x u) (mem36 y v)))))))

(declare-fun t2tb4685 ((set (set (tuple21 (tuple21 a d) (tuple21 a
  d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a d) (tuple21 a d)))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 d1) (tuple2 a1 d1)))) (t2tb4685 x))))

(declare-fun tb2t4685 (uni) (set (set (tuple21 (tuple21 a d) (tuple21 a
  d)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a d) (tuple21 a d))))))
  (! (= (tb2t4685 (t2tb4685 i)) i) :pattern ((t2tb4685 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 d1) (tuple2 a1 d1)))) j)
     (= (t2tb4685 (tb2t4685 j)) j)) :pattern ((t2tb4685 (tb2t4685 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a d))) (v (set (tuple21 a d)))
  (r (set (tuple21 (tuple21 a d) (tuple21 a d)))))
  (= (mem (set1 (tuple2 (tuple2 a1 d1) (tuple2 a1 d1))) (t2tb4301 r)
  (relation (tuple2 a1 d1) (tuple2 a1 d1) (t2tb903 u) (t2tb903 v)))
  (forall ((x (tuple21 a d)) (y (tuple21 a d)))
  (=> (mem (tuple2 (tuple2 a1 d1) (tuple2 a1 d1))
  (Tuple2 (tuple2 a1 d1) (tuple2 a1 d1) (t2tb904 x) (t2tb904 y))
  (t2tb4301 r)) (and (mem32 x u) (mem32 y v)))))))

(declare-fun t2tb4686 ((set (set (tuple21 (tuple21 a d) (set (tuple21 b
  d)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a d) (set (tuple21 b d))))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 d1) (set1 (tuple2 b1 d1))))) (t2tb4686 x))))

(declare-fun tb2t4686 (uni) (set (set (tuple21 (tuple21 a d) (set (tuple21 b
  d))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a d) (set (tuple21 b d)))))))
  (! (= (tb2t4686 (t2tb4686 i)) i) :pattern ((t2tb4686 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 d1) (set1 (tuple2 b1 d1))))) j)
     (= (t2tb4686 (tb2t4686 j)) j)) :pattern ((t2tb4686 (tb2t4686 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a d))) (v (set (set (tuple21 b d))))
  (r (set (tuple21 (tuple21 a d) (set (tuple21 b d))))))
  (= (mem (set1 (tuple2 (tuple2 a1 d1) (set1 (tuple2 b1 d1)))) (t2tb4303 r)
  (relation (set1 (tuple2 b1 d1)) (tuple2 a1 d1) (t2tb903 u) (t2tb906 v)))
  (forall ((x (tuple21 a d)) (y (set (tuple21 b d))))
  (=> (mem (tuple2 (tuple2 a1 d1) (set1 (tuple2 b1 d1)))
  (Tuple2 (tuple2 a1 d1) (set1 (tuple2 b1 d1)) (t2tb904 x) (t2tb687 y))
  (t2tb4303 r)) (and (mem32 x u) (mem33 y v)))))))

(declare-fun t2tb4687 ((set (set (tuple21 (tuple21 a d) (tuple21 b
  d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a d) (tuple21 b d)))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 d1) (tuple2 b1 d1)))) (t2tb4687 x))))

(declare-fun tb2t4687 (uni) (set (set (tuple21 (tuple21 a d) (tuple21 b
  d)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a d) (tuple21 b d))))))
  (! (= (tb2t4687 (t2tb4687 i)) i) :pattern ((t2tb4687 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 d1) (tuple2 b1 d1)))) j)
     (= (t2tb4687 (tb2t4687 j)) j)) :pattern ((t2tb4687 (tb2t4687 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a d))) (v (set (tuple21 b d)))
  (r (set (tuple21 (tuple21 a d) (tuple21 b d)))))
  (= (mem (set1 (tuple2 (tuple2 a1 d1) (tuple2 b1 d1))) (t2tb4305 r)
  (relation (tuple2 b1 d1) (tuple2 a1 d1) (t2tb903 u) (t2tb687 v)))
  (forall ((x (tuple21 a d)) (y (tuple21 b d)))
  (=> (mem (tuple2 (tuple2 a1 d1) (tuple2 b1 d1))
  (Tuple2 (tuple2 a1 d1) (tuple2 b1 d1) (t2tb904 x) (t2tb692 y))
  (t2tb4305 r)) (and (mem32 x u) (mem23 y v)))))))

(declare-fun t2tb4688 ((set (set (tuple21 (tuple21 a d) d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a d) d))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 d1) d1))) (t2tb4688 x))))

(declare-fun tb2t4688 (uni) (set (set (tuple21 (tuple21 a d) d))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a d) d)))))
  (! (= (tb2t4688 (t2tb4688 i)) i) :pattern ((t2tb4688 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 d1) d1))) j)
     (= (t2tb4688 (tb2t4688 j)) j)) :pattern ((t2tb4688 (tb2t4688 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a d))) (v (set d)) (r (set (tuple21 (tuple21 a d)
  d))))
  (= (mem (set1 (tuple2 (tuple2 a1 d1) d1)) (t2tb4307 r)
  (relation d1 (tuple2 a1 d1) (t2tb903 u) (t2tb690 v)))
  (forall ((x (tuple21 a d)) (y d))
  (=> (mem (tuple2 (tuple2 a1 d1) d1)
  (Tuple2 (tuple2 a1 d1) d1 (t2tb904 x) (t2tb694 y)) (t2tb4307 r))
  (and (mem32 x u) (mem20 y v)))))))

(declare-fun t2tb4689 ((set (set (tuple21 (tuple21 a d) (tuple21 a (tuple21 b
  c)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a d) (tuple21 a (tuple21 b c)))))))
  (sort (set1 (set1 (tuple2 (tuple2 a1 d1) (tuple2 a1 (tuple2 b1 c1)))))
  (t2tb4689 x))))

(declare-fun tb2t4689 (uni) (set (set (tuple21 (tuple21 a d) (tuple21 a
  (tuple21 b c))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a d) (tuple21 a (tuple21 b c)))))))
  (! (= (tb2t4689 (t2tb4689 i)) i) :pattern ((t2tb4689 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (tuple2 a1 d1) (tuple2 a1 (tuple2 b1 c1))))) j)
     (= (t2tb4689 (tb2t4689 j)) j)) :pattern ((t2tb4689 (tb2t4689 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a d))) (v (set (tuple21 a (tuple21 b c))))
  (r (set (tuple21 (tuple21 a d) (tuple21 a (tuple21 b c))))))
  (= (mem (set1 (tuple2 (tuple2 a1 d1) (tuple2 a1 (tuple2 b1 c1))))
  (t2tb4309 r)
  (relation (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 d1) (t2tb903 u)
  (t2tb261 v)))
  (forall ((x (tuple21 a d)) (y (tuple21 a (tuple21 b c))))
  (=> (mem (tuple2 (tuple2 a1 d1) (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 (tuple2 a1 d1) (tuple2 a1 (tuple2 b1 c1)) (t2tb904 x) (t2tb260 y))
  (t2tb4309 r)) (and (mem32 x u) (mem14 y v)))))))

(declare-fun t2tb4690 ((set (set (tuple21 (tuple21 a d) (set (tuple21 a
  c)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a d) (set (tuple21 a c))))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 d1) (set1 (tuple2 a1 c1))))) (t2tb4690 x))))

(declare-fun tb2t4690 (uni) (set (set (tuple21 (tuple21 a d) (set (tuple21 a
  c))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a d) (set (tuple21 a c)))))))
  (! (= (tb2t4690 (t2tb4690 i)) i) :pattern ((t2tb4690 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 d1) (set1 (tuple2 a1 c1))))) j)
     (= (t2tb4690 (tb2t4690 j)) j)) :pattern ((t2tb4690 (tb2t4690 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a d))) (v (set (set (tuple21 a c))))
  (r (set (tuple21 (tuple21 a d) (set (tuple21 a c))))))
  (= (mem (set1 (tuple2 (tuple2 a1 d1) (set1 (tuple2 a1 c1)))) (t2tb4311 r)
  (relation (set1 (tuple2 a1 c1)) (tuple2 a1 d1) (t2tb903 u) (t2tb128 v)))
  (forall ((x (tuple21 a d)) (y (set (tuple21 a c))))
  (=> (mem (tuple2 (tuple2 a1 d1) (set1 (tuple2 a1 c1)))
  (Tuple2 (tuple2 a1 d1) (set1 (tuple2 a1 c1)) (t2tb904 x) (t2tb129 y))
  (t2tb4311 r)) (and (mem32 x u) (mem11 y v)))))))

(declare-fun t2tb4691 ((set (set (tuple21 (tuple21 a d) (tuple21 a
  c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a d) (tuple21 a c)))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 d1) (tuple2 a1 c1)))) (t2tb4691 x))))

(declare-fun tb2t4691 (uni) (set (set (tuple21 (tuple21 a d) (tuple21 a
  c)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a d) (tuple21 a c))))))
  (! (= (tb2t4691 (t2tb4691 i)) i) :pattern ((t2tb4691 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 d1) (tuple2 a1 c1)))) j)
     (= (t2tb4691 (tb2t4691 j)) j)) :pattern ((t2tb4691 (tb2t4691 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a d))) (v (set (tuple21 a c)))
  (r (set (tuple21 (tuple21 a d) (tuple21 a c)))))
  (= (mem (set1 (tuple2 (tuple2 a1 d1) (tuple2 a1 c1))) (t2tb4313 r)
  (relation (tuple2 a1 c1) (tuple2 a1 d1) (t2tb903 u) (t2tb129 v)))
  (forall ((x (tuple21 a d)) (y (tuple21 a c)))
  (=> (mem (tuple2 (tuple2 a1 d1) (tuple2 a1 c1))
  (Tuple2 (tuple2 a1 d1) (tuple2 a1 c1) (t2tb904 x) (t2tb133 y))
  (t2tb4313 r)) (and (mem32 x u) (mem10 y v)))))))

(declare-fun t2tb4692 ((set (set (tuple21 (tuple21 a d) c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a d) c))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 d1) c1))) (t2tb4692 x))))

(declare-fun tb2t4692 (uni) (set (set (tuple21 (tuple21 a d) c))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a d) c)))))
  (! (= (tb2t4692 (t2tb4692 i)) i) :pattern ((t2tb4692 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 d1) c1))) j)
     (= (t2tb4692 (tb2t4692 j)) j)) :pattern ((t2tb4692 (tb2t4692 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a d))) (v (set c)) (r (set (tuple21 (tuple21 a d)
  c))))
  (= (mem (set1 (tuple2 (tuple2 a1 d1) c1)) (t2tb4316 r)
  (relation c1 (tuple2 a1 d1) (t2tb903 u) (t2tb132 v)))
  (forall ((x (tuple21 a d)) (y c))
  (=> (mem (tuple2 (tuple2 a1 d1) c1)
  (Tuple2 (tuple2 a1 d1) c1 (t2tb904 x) (t2tb135 y)) (t2tb4316 r))
  (and (mem32 x u) (mem7 y v)))))))

(declare-fun t2tb4693 ((set (set (tuple21 (tuple21 a d) (set (tuple21 a
  b)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a d) (set (tuple21 a b))))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 d1) (set1 (tuple2 a1 b1))))) (t2tb4693 x))))

(declare-fun tb2t4693 (uni) (set (set (tuple21 (tuple21 a d) (set (tuple21 a
  b))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a d) (set (tuple21 a b)))))))
  (! (= (tb2t4693 (t2tb4693 i)) i) :pattern ((t2tb4693 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 d1) (set1 (tuple2 a1 b1))))) j)
     (= (t2tb4693 (tb2t4693 j)) j)) :pattern ((t2tb4693 (tb2t4693 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a d))) (v (set (set (tuple21 a b))))
  (r (set (tuple21 (tuple21 a d) (set (tuple21 a b))))))
  (= (mem (set1 (tuple2 (tuple2 a1 d1) (set1 (tuple2 a1 b1)))) (t2tb4317 r)
  (relation (set1 (tuple2 a1 b1)) (tuple2 a1 d1) (t2tb903 u) (t2tb10 v)))
  (forall ((x (tuple21 a d)) (y (set (tuple21 a b))))
  (=> (mem (tuple2 (tuple2 a1 d1) (set1 (tuple2 a1 b1)))
  (Tuple2 (tuple2 a1 d1) (set1 (tuple2 a1 b1)) (t2tb904 x) (t2tb11 y))
  (t2tb4317 r)) (and (mem32 x u) (mem4 y v)))))))

(declare-fun t2tb4694 ((set (set (tuple21 (tuple21 a d) (tuple21 a
  b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a d) (tuple21 a b)))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 d1) (tuple2 a1 b1)))) (t2tb4694 x))))

(declare-fun tb2t4694 (uni) (set (set (tuple21 (tuple21 a d) (tuple21 a
  b)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a d) (tuple21 a b))))))
  (! (= (tb2t4694 (t2tb4694 i)) i) :pattern ((t2tb4694 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 d1) (tuple2 a1 b1)))) j)
     (= (t2tb4694 (tb2t4694 j)) j)) :pattern ((t2tb4694 (tb2t4694 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a d))) (v (set (tuple21 a b)))
  (r (set (tuple21 (tuple21 a d) (tuple21 a b)))))
  (= (mem (set1 (tuple2 (tuple2 a1 d1) (tuple2 a1 b1))) (t2tb4319 r)
  (relation (tuple2 a1 b1) (tuple2 a1 d1) (t2tb903 u) (t2tb11 v)))
  (forall ((x (tuple21 a d)) (y (tuple21 a b)))
  (=> (mem (tuple2 (tuple2 a1 d1) (tuple2 a1 b1))
  (Tuple2 (tuple2 a1 d1) (tuple2 a1 b1) (t2tb904 x) (t2tb13 y)) (t2tb4319 r))
  (and (mem32 x u) (mem3 y v)))))))

(declare-fun t2tb4695 ((set (set (tuple21 (tuple21 a d) b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a d) b))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 d1) b1))) (t2tb4695 x))))

(declare-fun tb2t4695 (uni) (set (set (tuple21 (tuple21 a d) b))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a d) b)))))
  (! (= (tb2t4695 (t2tb4695 i)) i) :pattern ((t2tb4695 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 d1) b1))) j)
     (= (t2tb4695 (tb2t4695 j)) j)) :pattern ((t2tb4695 (tb2t4695 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a d))) (v (set b)) (r (set (tuple21 (tuple21 a d)
  b))))
  (= (mem (set1 (tuple2 (tuple2 a1 d1) b1)) (t2tb4321 r)
  (relation b1 (tuple2 a1 d1) (t2tb903 u) (t2tb12 v)))
  (forall ((x (tuple21 a d)) (y b))
  (=> (mem (tuple2 (tuple2 a1 d1) b1)
  (Tuple2 (tuple2 a1 d1) b1 (t2tb904 x) (t2tb14 y)) (t2tb4321 r))
  (and (mem32 x u) (mem2 y v)))))))

(declare-fun t2tb4696 ((set (set (tuple21 (tuple21 a d) a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a d) a))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 d1) a1))) (t2tb4696 x))))

(declare-fun tb2t4696 (uni) (set (set (tuple21 (tuple21 a d) a))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a d) a)))))
  (! (= (tb2t4696 (t2tb4696 i)) i) :pattern ((t2tb4696 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 d1) a1))) j)
     (= (t2tb4696 (tb2t4696 j)) j)) :pattern ((t2tb4696 (tb2t4696 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a d))) (v (set a)) (r (set (tuple21 (tuple21 a d)
  a))))
  (= (mem (set1 (tuple2 (tuple2 a1 d1) a1)) (t2tb4323 r)
  (relation a1 (tuple2 a1 d1) (t2tb903 u) (t2tb1 v)))
  (forall ((x (tuple21 a d)) (y a))
  (=> (mem (tuple2 (tuple2 a1 d1) a1)
  (Tuple2 (tuple2 a1 d1) a1 (t2tb904 x) (t2tb2 y)) (t2tb4323 r))
  (and (mem32 x u) (mem1 y v)))))))

;; mem_relation
  (assert
  (forall ((b2 ty))
  (forall ((u (set (tuple21 a d))) (v uni) (r uni))
  (and
  (=> (mem (set1 (tuple2 (tuple2 a1 d1) b2)) r
  (relation b2 (tuple2 a1 d1) (t2tb903 u) v))
  (forall ((x (tuple21 a d)) (y uni))
  (=> (mem (tuple2 (tuple2 a1 d1) b2)
  (Tuple2 (tuple2 a1 d1) b2 (t2tb904 x) y) r) (and (mem32 x u) (mem b2 y v)))))
  (=>
  (forall ((x (tuple21 a d)) (y uni))
  (=> (sort b2 y)
  (=> (mem (tuple2 (tuple2 a1 d1) b2)
  (Tuple2 (tuple2 a1 d1) b2 (t2tb904 x) y) r) (and (mem32 x u) (mem b2 y v)))))
  (mem (set1 (tuple2 (tuple2 a1 d1) b2)) r
  (relation b2 (tuple2 a1 d1) (t2tb903 u) v)))))))

(declare-fun t2tb4697 ((set (set (tuple21 (set (tuple21 b d))
  (tuple21 (tuple21 b c) (tuple21 d e)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 b d)) (tuple21 (tuple21 b c)
  (tuple21 d e))))))) (sort
  (set1
  (set1
  (tuple2 (set1 (tuple2 b1 d1)) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)))))
  (t2tb4697 x))))

(declare-fun tb2t4697 (uni) (set (set (tuple21 (set (tuple21 b d))
  (tuple21 (tuple21 b c) (tuple21 d e))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 b d)) (tuple21 (tuple21 b c)
  (tuple21 d e)))))))
  (! (= (tb2t4697 (t2tb4697 i)) i) :pattern ((t2tb4697 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (set1
     (tuple2 (set1 (tuple2 b1 d1)) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)))))
     j) (= (t2tb4697 (tb2t4697 j)) j)) :pattern ((t2tb4697 (tb2t4697 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 b d)))) (v (set (tuple21 (tuple21 b c)
  (tuple21 d e)))) (r (set (tuple21 (set (tuple21 b d)) (tuple21 (tuple21 b
  c) (tuple21 d e))))))
  (= (mem
  (set1
  (tuple2 (set1 (tuple2 b1 d1)) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1))))
  (t2tb4325 r)
  (relation (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (set1 (tuple2 b1 d1))
  (t2tb906 u) (t2tb4102 v)))
  (forall ((x (set (tuple21 b d))) (y (tuple21 (tuple21 b c) (tuple21 d e))))
  (=> (mem
  (tuple2 (set1 (tuple2 b1 d1)) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)))
  (Tuple2 (set1 (tuple2 b1 d1)) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1))
  (t2tb687 x) (t2tb4104 y)) (t2tb4325 r)) (and (mem33 x u) (mem49 y v)))))))

(declare-fun t2tb4698 ((set (set (tuple21 (set (tuple21 b d)) (tuple21 a
  (tuple21 d e)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 b d)) (tuple21 a (tuple21 d
  e))))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 b1 d1)) (tuple2 a1 (tuple2 d1 e1)))))
  (t2tb4698 x))))

(declare-fun tb2t4698 (uni) (set (set (tuple21 (set (tuple21 b d)) (tuple21 a
  (tuple21 d e))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 b d)) (tuple21 a (tuple21 d
  e))))))) (! (= (tb2t4698 (t2tb4698 i)) i) :pattern ((t2tb4698 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (set1 (tuple2 b1 d1)) (tuple2 a1 (tuple2 d1 e1)))))
     j) (= (t2tb4698 (tb2t4698 j)) j)) :pattern ((t2tb4698 (tb2t4698 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 b d)))) (v (set (tuple21 a (tuple21 d e))))
  (r (set (tuple21 (set (tuple21 b d)) (tuple21 a (tuple21 d e))))))
  (= (mem (set1 (tuple2 (set1 (tuple2 b1 d1)) (tuple2 a1 (tuple2 d1 e1))))
  (t2tb4327 r)
  (relation (tuple2 a1 (tuple2 d1 e1)) (set1 (tuple2 b1 d1)) (t2tb906 u)
  (t2tb4103 v)))
  (forall ((x (set (tuple21 b d))) (y (tuple21 a (tuple21 d e))))
  (=> (mem (tuple2 (set1 (tuple2 b1 d1)) (tuple2 a1 (tuple2 d1 e1)))
  (Tuple2 (set1 (tuple2 b1 d1)) (tuple2 a1 (tuple2 d1 e1)) (t2tb687 x)
  (t2tb4105 y)) (t2tb4327 r)) (and (mem33 x u) (mem48 y v)))))))

(declare-fun t2tb4699 ((set (set (tuple21 (set (tuple21 b d)) (set (tuple21 c
  e)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 b d)) (set (tuple21 c e)))))))
  (sort (set1 (set1 (tuple2 (set1 (tuple2 b1 d1)) (set1 (tuple2 c1 e1)))))
  (t2tb4699 x))))

(declare-fun tb2t4699 (uni) (set (set (tuple21 (set (tuple21 b d))
  (set (tuple21 c e))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 b d)) (set (tuple21 c e)))))))
  (! (= (tb2t4699 (t2tb4699 i)) i) :pattern ((t2tb4699 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (set1 (tuple2 b1 d1)) (set1 (tuple2 c1 e1))))) j)
     (= (t2tb4699 (tb2t4699 j)) j)) :pattern ((t2tb4699 (tb2t4699 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 b d)))) (v (set (set (tuple21 c e))))
  (r (set (tuple21 (set (tuple21 b d)) (set (tuple21 c e))))))
  (= (mem (set1 (tuple2 (set1 (tuple2 b1 d1)) (set1 (tuple2 c1 e1))))
  (t2tb4330 r)
  (relation (set1 (tuple2 c1 e1)) (set1 (tuple2 b1 d1)) (t2tb906 u)
  (t2tb3854 v)))
  (forall ((x (set (tuple21 b d))) (y (set (tuple21 c e))))
  (=> (mem (tuple2 (set1 (tuple2 b1 d1)) (set1 (tuple2 c1 e1)))
  (Tuple2 (set1 (tuple2 b1 d1)) (set1 (tuple2 c1 e1)) (t2tb687 x)
  (t2tb3478 y)) (t2tb4330 r)) (and (mem33 x u) (mem47 y v)))))))

(declare-fun t2tb4700 ((set (set (tuple21 (set (tuple21 b d)) (tuple21 c
  e))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 b d)) (tuple21 c e)))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 b1 d1)) (tuple2 c1 e1)))) (t2tb4700 x))))

(declare-fun tb2t4700 (uni) (set (set (tuple21 (set (tuple21 b d)) (tuple21 c
  e)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 b d)) (tuple21 c e))))))
  (! (= (tb2t4700 (t2tb4700 i)) i) :pattern ((t2tb4700 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 b1 d1)) (tuple2 c1 e1)))) j)
     (= (t2tb4700 (tb2t4700 j)) j)) :pattern ((t2tb4700 (tb2t4700 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 b d)))) (v (set (tuple21 c e)))
  (r (set (tuple21 (set (tuple21 b d)) (tuple21 c e)))))
  (= (mem (set1 (tuple2 (set1 (tuple2 b1 d1)) (tuple2 c1 e1))) (t2tb4331 r)
  (relation (tuple2 c1 e1) (set1 (tuple2 b1 d1)) (t2tb906 u) (t2tb3478 v)))
  (forall ((x (set (tuple21 b d))) (y (tuple21 c e)))
  (=> (mem (tuple2 (set1 (tuple2 b1 d1)) (tuple2 c1 e1))
  (Tuple2 (set1 (tuple2 b1 d1)) (tuple2 c1 e1) (t2tb687 x) (t2tb3479 y))
  (t2tb4331 r)) (and (mem33 x u) (mem46 y v)))))))

(declare-fun t2tb4701 ((set (set (tuple21 (set (tuple21 b d)) (tuple21 a
  e))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 b d)) (tuple21 a e)))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 b1 d1)) (tuple2 a1 e1)))) (t2tb4701 x))))

(declare-fun tb2t4701 (uni) (set (set (tuple21 (set (tuple21 b d)) (tuple21 a
  e)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 b d)) (tuple21 a e))))))
  (! (= (tb2t4701 (t2tb4701 i)) i) :pattern ((t2tb4701 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 b1 d1)) (tuple2 a1 e1)))) j)
     (= (t2tb4701 (tb2t4701 j)) j)) :pattern ((t2tb4701 (tb2t4701 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 b d)))) (v (set (tuple21 a e)))
  (r (set (tuple21 (set (tuple21 b d)) (tuple21 a e)))))
  (= (mem (set1 (tuple2 (set1 (tuple2 b1 d1)) (tuple2 a1 e1))) (t2tb4333 r)
  (relation (tuple2 a1 e1) (set1 (tuple2 b1 d1)) (t2tb906 u) (t2tb2943 v)))
  (forall ((x (set (tuple21 b d))) (y (tuple21 a e)))
  (=> (mem (tuple2 (set1 (tuple2 b1 d1)) (tuple2 a1 e1))
  (Tuple2 (set1 (tuple2 b1 d1)) (tuple2 a1 e1) (t2tb687 x) (t2tb2949 y))
  (t2tb4333 r)) (and (mem33 x u) (mem44 y v)))))))

(declare-fun t2tb4702 ((set (set (tuple21 (set (tuple21 b d)) e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 b d)) e))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 b1 d1)) e1))) (t2tb4702 x))))

(declare-fun tb2t4702 (uni) (set (set (tuple21 (set (tuple21 b d)) e))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 b d)) e)))))
  (! (= (tb2t4702 (t2tb4702 i)) i) :pattern ((t2tb4702 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 b1 d1)) e1))) j)
     (= (t2tb4702 (tb2t4702 j)) j)) :pattern ((t2tb4702 (tb2t4702 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 b d)))) (v (set e))
  (r (set (tuple21 (set (tuple21 b d)) e))))
  (= (mem (set1 (tuple2 (set1 (tuple2 b1 d1)) e1)) (t2tb4335 r)
  (relation e1 (set1 (tuple2 b1 d1)) (t2tb906 u) (t2tb2947 v)))
  (forall ((x (set (tuple21 b d))) (y e))
  (=> (mem (tuple2 (set1 (tuple2 b1 d1)) e1)
  (Tuple2 (set1 (tuple2 b1 d1)) e1 (t2tb687 x) (t2tb2955 y)) (t2tb4335 r))
  (and (mem33 x u) (mem36 y v)))))))

(declare-fun t2tb4703 ((set (set (tuple21 (set (tuple21 b d)) (tuple21 a
  d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 b d)) (tuple21 a d)))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 b1 d1)) (tuple2 a1 d1)))) (t2tb4703 x))))

(declare-fun tb2t4703 (uni) (set (set (tuple21 (set (tuple21 b d)) (tuple21 a
  d)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 b d)) (tuple21 a d))))))
  (! (= (tb2t4703 (t2tb4703 i)) i) :pattern ((t2tb4703 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 b1 d1)) (tuple2 a1 d1)))) j)
     (= (t2tb4703 (tb2t4703 j)) j)) :pattern ((t2tb4703 (tb2t4703 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 b d)))) (v (set (tuple21 a d)))
  (r (set (tuple21 (set (tuple21 b d)) (tuple21 a d)))))
  (= (mem (set1 (tuple2 (set1 (tuple2 b1 d1)) (tuple2 a1 d1))) (t2tb4337 r)
  (relation (tuple2 a1 d1) (set1 (tuple2 b1 d1)) (t2tb906 u) (t2tb903 v)))
  (forall ((x (set (tuple21 b d))) (y (tuple21 a d)))
  (=> (mem (tuple2 (set1 (tuple2 b1 d1)) (tuple2 a1 d1))
  (Tuple2 (set1 (tuple2 b1 d1)) (tuple2 a1 d1) (t2tb687 x) (t2tb904 y))
  (t2tb4337 r)) (and (mem33 x u) (mem32 y v)))))))

(declare-fun t2tb4704 ((set (set (tuple21 (set (tuple21 b d)) (set (tuple21 b
  d)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 b d)) (set (tuple21 b d)))))))
  (sort (set1 (set1 (tuple2 (set1 (tuple2 b1 d1)) (set1 (tuple2 b1 d1)))))
  (t2tb4704 x))))

(declare-fun tb2t4704 (uni) (set (set (tuple21 (set (tuple21 b d))
  (set (tuple21 b d))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 b d)) (set (tuple21 b d)))))))
  (! (= (tb2t4704 (t2tb4704 i)) i) :pattern ((t2tb4704 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (set1 (tuple2 b1 d1)) (set1 (tuple2 b1 d1))))) j)
     (= (t2tb4704 (tb2t4704 j)) j)) :pattern ((t2tb4704 (tb2t4704 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 b d)))) (v (set (set (tuple21 b d))))
  (r (set (tuple21 (set (tuple21 b d)) (set (tuple21 b d))))))
  (= (mem (set1 (tuple2 (set1 (tuple2 b1 d1)) (set1 (tuple2 b1 d1))))
  (t2tb4339 r)
  (relation (set1 (tuple2 b1 d1)) (set1 (tuple2 b1 d1)) (t2tb906 u)
  (t2tb906 v)))
  (forall ((x (set (tuple21 b d))) (y (set (tuple21 b d))))
  (=> (mem (tuple2 (set1 (tuple2 b1 d1)) (set1 (tuple2 b1 d1)))
  (Tuple2 (set1 (tuple2 b1 d1)) (set1 (tuple2 b1 d1)) (t2tb687 x)
  (t2tb687 y)) (t2tb4339 r)) (and (mem33 x u) (mem33 y v)))))))

(declare-fun t2tb4705 ((set (set (tuple21 (set (tuple21 b d)) (tuple21 b
  d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 b d)) (tuple21 b d)))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 b1 d1)) (tuple2 b1 d1)))) (t2tb4705 x))))

(declare-fun tb2t4705 (uni) (set (set (tuple21 (set (tuple21 b d)) (tuple21 b
  d)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 b d)) (tuple21 b d))))))
  (! (= (tb2t4705 (t2tb4705 i)) i) :pattern ((t2tb4705 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 b1 d1)) (tuple2 b1 d1)))) j)
     (= (t2tb4705 (tb2t4705 j)) j)) :pattern ((t2tb4705 (tb2t4705 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 b d)))) (v (set (tuple21 b d)))
  (r (set (tuple21 (set (tuple21 b d)) (tuple21 b d)))))
  (= (mem (set1 (tuple2 (set1 (tuple2 b1 d1)) (tuple2 b1 d1))) (t2tb4341 r)
  (relation (tuple2 b1 d1) (set1 (tuple2 b1 d1)) (t2tb906 u) (t2tb687 v)))
  (forall ((x (set (tuple21 b d))) (y (tuple21 b d)))
  (=> (mem (tuple2 (set1 (tuple2 b1 d1)) (tuple2 b1 d1))
  (Tuple2 (set1 (tuple2 b1 d1)) (tuple2 b1 d1) (t2tb687 x) (t2tb692 y))
  (t2tb4341 r)) (and (mem33 x u) (mem23 y v)))))))

(declare-fun t2tb4706 ((set (set (tuple21 (set (tuple21 b d)) d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 b d)) d))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 b1 d1)) d1))) (t2tb4706 x))))

(declare-fun tb2t4706 (uni) (set (set (tuple21 (set (tuple21 b d)) d))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 b d)) d)))))
  (! (= (tb2t4706 (t2tb4706 i)) i) :pattern ((t2tb4706 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 b1 d1)) d1))) j)
     (= (t2tb4706 (tb2t4706 j)) j)) :pattern ((t2tb4706 (tb2t4706 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 b d)))) (v (set d))
  (r (set (tuple21 (set (tuple21 b d)) d))))
  (= (mem (set1 (tuple2 (set1 (tuple2 b1 d1)) d1)) (t2tb4343 r)
  (relation d1 (set1 (tuple2 b1 d1)) (t2tb906 u) (t2tb690 v)))
  (forall ((x (set (tuple21 b d))) (y d))
  (=> (mem (tuple2 (set1 (tuple2 b1 d1)) d1)
  (Tuple2 (set1 (tuple2 b1 d1)) d1 (t2tb687 x) (t2tb694 y)) (t2tb4343 r))
  (and (mem33 x u) (mem20 y v)))))))

(declare-fun t2tb4707 ((set (set (tuple21 (set (tuple21 b d)) (tuple21 a
  (tuple21 b c)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 b d)) (tuple21 a (tuple21 b
  c))))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 b1 d1)) (tuple2 a1 (tuple2 b1 c1)))))
  (t2tb4707 x))))

(declare-fun tb2t4707 (uni) (set (set (tuple21 (set (tuple21 b d)) (tuple21 a
  (tuple21 b c))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 b d)) (tuple21 a (tuple21 b
  c))))))) (! (= (tb2t4707 (t2tb4707 i)) i) :pattern ((t2tb4707 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (set1 (tuple2 b1 d1)) (tuple2 a1 (tuple2 b1 c1)))))
     j) (= (t2tb4707 (tb2t4707 j)) j)) :pattern ((t2tb4707 (tb2t4707 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 b d)))) (v (set (tuple21 a (tuple21 b c))))
  (r (set (tuple21 (set (tuple21 b d)) (tuple21 a (tuple21 b c))))))
  (= (mem (set1 (tuple2 (set1 (tuple2 b1 d1)) (tuple2 a1 (tuple2 b1 c1))))
  (t2tb4346 r)
  (relation (tuple2 a1 (tuple2 b1 c1)) (set1 (tuple2 b1 d1)) (t2tb906 u)
  (t2tb261 v)))
  (forall ((x (set (tuple21 b d))) (y (tuple21 a (tuple21 b c))))
  (=> (mem (tuple2 (set1 (tuple2 b1 d1)) (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 (set1 (tuple2 b1 d1)) (tuple2 a1 (tuple2 b1 c1)) (t2tb687 x)
  (t2tb260 y)) (t2tb4346 r)) (and (mem33 x u) (mem14 y v)))))))

(declare-fun t2tb4708 ((set (set (tuple21 (set (tuple21 b d)) (set (tuple21 a
  c)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 b d)) (set (tuple21 a c)))))))
  (sort (set1 (set1 (tuple2 (set1 (tuple2 b1 d1)) (set1 (tuple2 a1 c1)))))
  (t2tb4708 x))))

(declare-fun tb2t4708 (uni) (set (set (tuple21 (set (tuple21 b d))
  (set (tuple21 a c))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 b d)) (set (tuple21 a c)))))))
  (! (= (tb2t4708 (t2tb4708 i)) i) :pattern ((t2tb4708 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (set1 (tuple2 b1 d1)) (set1 (tuple2 a1 c1))))) j)
     (= (t2tb4708 (tb2t4708 j)) j)) :pattern ((t2tb4708 (tb2t4708 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 b d)))) (v (set (set (tuple21 a c))))
  (r (set (tuple21 (set (tuple21 b d)) (set (tuple21 a c))))))
  (= (mem (set1 (tuple2 (set1 (tuple2 b1 d1)) (set1 (tuple2 a1 c1))))
  (t2tb4347 r)
  (relation (set1 (tuple2 a1 c1)) (set1 (tuple2 b1 d1)) (t2tb906 u)
  (t2tb128 v)))
  (forall ((x (set (tuple21 b d))) (y (set (tuple21 a c))))
  (=> (mem (tuple2 (set1 (tuple2 b1 d1)) (set1 (tuple2 a1 c1)))
  (Tuple2 (set1 (tuple2 b1 d1)) (set1 (tuple2 a1 c1)) (t2tb687 x)
  (t2tb129 y)) (t2tb4347 r)) (and (mem33 x u) (mem11 y v)))))))

(declare-fun t2tb4709 ((set (set (tuple21 (set (tuple21 b d)) (tuple21 a
  c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 b d)) (tuple21 a c)))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 b1 d1)) (tuple2 a1 c1)))) (t2tb4709 x))))

(declare-fun tb2t4709 (uni) (set (set (tuple21 (set (tuple21 b d)) (tuple21 a
  c)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 b d)) (tuple21 a c))))))
  (! (= (tb2t4709 (t2tb4709 i)) i) :pattern ((t2tb4709 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 b1 d1)) (tuple2 a1 c1)))) j)
     (= (t2tb4709 (tb2t4709 j)) j)) :pattern ((t2tb4709 (tb2t4709 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 b d)))) (v (set (tuple21 a c)))
  (r (set (tuple21 (set (tuple21 b d)) (tuple21 a c)))))
  (= (mem (set1 (tuple2 (set1 (tuple2 b1 d1)) (tuple2 a1 c1))) (t2tb4349 r)
  (relation (tuple2 a1 c1) (set1 (tuple2 b1 d1)) (t2tb906 u) (t2tb129 v)))
  (forall ((x (set (tuple21 b d))) (y (tuple21 a c)))
  (=> (mem (tuple2 (set1 (tuple2 b1 d1)) (tuple2 a1 c1))
  (Tuple2 (set1 (tuple2 b1 d1)) (tuple2 a1 c1) (t2tb687 x) (t2tb133 y))
  (t2tb4349 r)) (and (mem33 x u) (mem10 y v)))))))

(declare-fun t2tb4710 ((set (set (tuple21 (set (tuple21 b d)) c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 b d)) c))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 b1 d1)) c1))) (t2tb4710 x))))

(declare-fun tb2t4710 (uni) (set (set (tuple21 (set (tuple21 b d)) c))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 b d)) c)))))
  (! (= (tb2t4710 (t2tb4710 i)) i) :pattern ((t2tb4710 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 b1 d1)) c1))) j)
     (= (t2tb4710 (tb2t4710 j)) j)) :pattern ((t2tb4710 (tb2t4710 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 b d)))) (v (set c))
  (r (set (tuple21 (set (tuple21 b d)) c))))
  (= (mem (set1 (tuple2 (set1 (tuple2 b1 d1)) c1)) (t2tb4351 r)
  (relation c1 (set1 (tuple2 b1 d1)) (t2tb906 u) (t2tb132 v)))
  (forall ((x (set (tuple21 b d))) (y c))
  (=> (mem (tuple2 (set1 (tuple2 b1 d1)) c1)
  (Tuple2 (set1 (tuple2 b1 d1)) c1 (t2tb687 x) (t2tb135 y)) (t2tb4351 r))
  (and (mem33 x u) (mem7 y v)))))))

(declare-fun t2tb4711 ((set (set (tuple21 (set (tuple21 b d)) (set (tuple21 a
  b)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 b d)) (set (tuple21 a b)))))))
  (sort (set1 (set1 (tuple2 (set1 (tuple2 b1 d1)) (set1 (tuple2 a1 b1)))))
  (t2tb4711 x))))

(declare-fun tb2t4711 (uni) (set (set (tuple21 (set (tuple21 b d))
  (set (tuple21 a b))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 b d)) (set (tuple21 a b)))))))
  (! (= (tb2t4711 (t2tb4711 i)) i) :pattern ((t2tb4711 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (set1 (tuple2 b1 d1)) (set1 (tuple2 a1 b1))))) j)
     (= (t2tb4711 (tb2t4711 j)) j)) :pattern ((t2tb4711 (tb2t4711 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 b d)))) (v (set (set (tuple21 a b))))
  (r (set (tuple21 (set (tuple21 b d)) (set (tuple21 a b))))))
  (= (mem (set1 (tuple2 (set1 (tuple2 b1 d1)) (set1 (tuple2 a1 b1))))
  (t2tb4353 r)
  (relation (set1 (tuple2 a1 b1)) (set1 (tuple2 b1 d1)) (t2tb906 u)
  (t2tb10 v)))
  (forall ((x (set (tuple21 b d))) (y (set (tuple21 a b))))
  (=> (mem (tuple2 (set1 (tuple2 b1 d1)) (set1 (tuple2 a1 b1)))
  (Tuple2 (set1 (tuple2 b1 d1)) (set1 (tuple2 a1 b1)) (t2tb687 x) (t2tb11 y))
  (t2tb4353 r)) (and (mem33 x u) (mem4 y v)))))))

(declare-fun t2tb4712 ((set (set (tuple21 (set (tuple21 b d)) (tuple21 a
  b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 b d)) (tuple21 a b)))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 b1 d1)) (tuple2 a1 b1)))) (t2tb4712 x))))

(declare-fun tb2t4712 (uni) (set (set (tuple21 (set (tuple21 b d)) (tuple21 a
  b)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 b d)) (tuple21 a b))))))
  (! (= (tb2t4712 (t2tb4712 i)) i) :pattern ((t2tb4712 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 b1 d1)) (tuple2 a1 b1)))) j)
     (= (t2tb4712 (tb2t4712 j)) j)) :pattern ((t2tb4712 (tb2t4712 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 b d)))) (v (set (tuple21 a b)))
  (r (set (tuple21 (set (tuple21 b d)) (tuple21 a b)))))
  (= (mem (set1 (tuple2 (set1 (tuple2 b1 d1)) (tuple2 a1 b1))) (t2tb4355 r)
  (relation (tuple2 a1 b1) (set1 (tuple2 b1 d1)) (t2tb906 u) (t2tb11 v)))
  (forall ((x (set (tuple21 b d))) (y (tuple21 a b)))
  (=> (mem (tuple2 (set1 (tuple2 b1 d1)) (tuple2 a1 b1))
  (Tuple2 (set1 (tuple2 b1 d1)) (tuple2 a1 b1) (t2tb687 x) (t2tb13 y))
  (t2tb4355 r)) (and (mem33 x u) (mem3 y v)))))))

(declare-fun t2tb4713 ((set (set (tuple21 (set (tuple21 b d)) b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 b d)) b))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 b1 d1)) b1))) (t2tb4713 x))))

(declare-fun tb2t4713 (uni) (set (set (tuple21 (set (tuple21 b d)) b))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 b d)) b)))))
  (! (= (tb2t4713 (t2tb4713 i)) i) :pattern ((t2tb4713 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 b1 d1)) b1))) j)
     (= (t2tb4713 (tb2t4713 j)) j)) :pattern ((t2tb4713 (tb2t4713 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 b d)))) (v (set b))
  (r (set (tuple21 (set (tuple21 b d)) b))))
  (= (mem (set1 (tuple2 (set1 (tuple2 b1 d1)) b1)) (t2tb4357 r)
  (relation b1 (set1 (tuple2 b1 d1)) (t2tb906 u) (t2tb12 v)))
  (forall ((x (set (tuple21 b d))) (y b))
  (=> (mem (tuple2 (set1 (tuple2 b1 d1)) b1)
  (Tuple2 (set1 (tuple2 b1 d1)) b1 (t2tb687 x) (t2tb14 y)) (t2tb4357 r))
  (and (mem33 x u) (mem2 y v)))))))

(declare-fun t2tb4714 ((set (set (tuple21 (set (tuple21 b d)) a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 b d)) a))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 b1 d1)) a1))) (t2tb4714 x))))

(declare-fun tb2t4714 (uni) (set (set (tuple21 (set (tuple21 b d)) a))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 b d)) a)))))
  (! (= (tb2t4714 (t2tb4714 i)) i) :pattern ((t2tb4714 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 b1 d1)) a1))) j)
     (= (t2tb4714 (tb2t4714 j)) j)) :pattern ((t2tb4714 (tb2t4714 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 b d)))) (v (set a))
  (r (set (tuple21 (set (tuple21 b d)) a))))
  (= (mem (set1 (tuple2 (set1 (tuple2 b1 d1)) a1)) (t2tb4359 r)
  (relation a1 (set1 (tuple2 b1 d1)) (t2tb906 u) (t2tb1 v)))
  (forall ((x (set (tuple21 b d))) (y a))
  (=> (mem (tuple2 (set1 (tuple2 b1 d1)) a1)
  (Tuple2 (set1 (tuple2 b1 d1)) a1 (t2tb687 x) (t2tb2 y)) (t2tb4359 r))
  (and (mem33 x u) (mem1 y v)))))))

;; mem_relation
  (assert
  (forall ((b2 ty))
  (forall ((u (set (set (tuple21 b d)))) (v uni) (r uni))
  (and
  (=> (mem (set1 (tuple2 (set1 (tuple2 b1 d1)) b2)) r
  (relation b2 (set1 (tuple2 b1 d1)) (t2tb906 u) v))
  (forall ((x (set (tuple21 b d))) (y uni))
  (=> (mem (tuple2 (set1 (tuple2 b1 d1)) b2)
  (Tuple2 (set1 (tuple2 b1 d1)) b2 (t2tb687 x) y) r)
  (and (mem33 x u) (mem b2 y v)))))
  (=>
  (forall ((x (set (tuple21 b d))) (y uni))
  (=> (sort b2 y)
  (=> (mem (tuple2 (set1 (tuple2 b1 d1)) b2)
  (Tuple2 (set1 (tuple2 b1 d1)) b2 (t2tb687 x) y) r)
  (and (mem33 x u) (mem b2 y v))))) (mem
  (set1 (tuple2 (set1 (tuple2 b1 d1)) b2)) r
  (relation b2 (set1 (tuple2 b1 d1)) (t2tb906 u) v)))))))

(declare-fun t2tb4715 ((set (set (tuple21 (tuple21 b d) (tuple21 (tuple21 b
  c) (tuple21 d e)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 b d) (tuple21 (tuple21 b c)
  (tuple21 d e))))))) (sort
  (set1
  (set1 (tuple2 (tuple2 b1 d1) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)))))
  (t2tb4715 x))))

(declare-fun tb2t4715 (uni) (set (set (tuple21 (tuple21 b d)
  (tuple21 (tuple21 b c) (tuple21 d e))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 b d) (tuple21 (tuple21 b c)
  (tuple21 d e)))))))
  (! (= (tb2t4715 (t2tb4715 i)) i) :pattern ((t2tb4715 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (set1 (tuple2 (tuple2 b1 d1) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)))))
     j) (= (t2tb4715 (tb2t4715 j)) j)) :pattern ((t2tb4715 (tb2t4715 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 b d))) (v (set (tuple21 (tuple21 b c) (tuple21 d
  e)))) (r (set (tuple21 (tuple21 b d) (tuple21 (tuple21 b c) (tuple21 d
  e))))))
  (= (mem
  (set1 (tuple2 (tuple2 b1 d1) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1))))
  (t2tb4361 r)
  (relation (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (tuple2 b1 d1) (t2tb687 u)
  (t2tb4102 v)))
  (forall ((x (tuple21 b d)) (y (tuple21 (tuple21 b c) (tuple21 d e))))
  (=> (mem (tuple2 (tuple2 b1 d1) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)))
  (Tuple2 (tuple2 b1 d1) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (t2tb692 x)
  (t2tb4104 y)) (t2tb4361 r)) (and (mem23 x u) (mem49 y v)))))))

(declare-fun t2tb4716 ((set (set (tuple21 (tuple21 b d) (tuple21 a (tuple21 d
  e)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 b d) (tuple21 a (tuple21 d e)))))))
  (sort (set1 (set1 (tuple2 (tuple2 b1 d1) (tuple2 a1 (tuple2 d1 e1)))))
  (t2tb4716 x))))

(declare-fun tb2t4716 (uni) (set (set (tuple21 (tuple21 b d) (tuple21 a
  (tuple21 d e))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 b d) (tuple21 a (tuple21 d e)))))))
  (! (= (tb2t4716 (t2tb4716 i)) i) :pattern ((t2tb4716 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (tuple2 b1 d1) (tuple2 a1 (tuple2 d1 e1))))) j)
     (= (t2tb4716 (tb2t4716 j)) j)) :pattern ((t2tb4716 (tb2t4716 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 b d))) (v (set (tuple21 a (tuple21 d e))))
  (r (set (tuple21 (tuple21 b d) (tuple21 a (tuple21 d e))))))
  (= (mem (set1 (tuple2 (tuple2 b1 d1) (tuple2 a1 (tuple2 d1 e1))))
  (t2tb4363 r)
  (relation (tuple2 a1 (tuple2 d1 e1)) (tuple2 b1 d1) (t2tb687 u)
  (t2tb4103 v)))
  (forall ((x (tuple21 b d)) (y (tuple21 a (tuple21 d e))))
  (=> (mem (tuple2 (tuple2 b1 d1) (tuple2 a1 (tuple2 d1 e1)))
  (Tuple2 (tuple2 b1 d1) (tuple2 a1 (tuple2 d1 e1)) (t2tb692 x) (t2tb4105 y))
  (t2tb4363 r)) (and (mem23 x u) (mem48 y v)))))))

(declare-fun t2tb4717 ((set (set (tuple21 (tuple21 b d) (set (tuple21 c
  e)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 b d) (set (tuple21 c e))))))) (sort
  (set1 (set1 (tuple2 (tuple2 b1 d1) (set1 (tuple2 c1 e1))))) (t2tb4717 x))))

(declare-fun tb2t4717 (uni) (set (set (tuple21 (tuple21 b d) (set (tuple21 c
  e))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 b d) (set (tuple21 c e)))))))
  (! (= (tb2t4717 (t2tb4717 i)) i) :pattern ((t2tb4717 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 b1 d1) (set1 (tuple2 c1 e1))))) j)
     (= (t2tb4717 (tb2t4717 j)) j)) :pattern ((t2tb4717 (tb2t4717 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 b d))) (v (set (set (tuple21 c e))))
  (r (set (tuple21 (tuple21 b d) (set (tuple21 c e))))))
  (= (mem (set1 (tuple2 (tuple2 b1 d1) (set1 (tuple2 c1 e1)))) (t2tb4365 r)
  (relation (set1 (tuple2 c1 e1)) (tuple2 b1 d1) (t2tb687 u) (t2tb3854 v)))
  (forall ((x (tuple21 b d)) (y (set (tuple21 c e))))
  (=> (mem (tuple2 (tuple2 b1 d1) (set1 (tuple2 c1 e1)))
  (Tuple2 (tuple2 b1 d1) (set1 (tuple2 c1 e1)) (t2tb692 x) (t2tb3478 y))
  (t2tb4365 r)) (and (mem23 x u) (mem47 y v)))))))

(declare-fun t2tb4718 ((set (set (tuple21 (tuple21 b d) (tuple21 c
  e))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 b d) (tuple21 c e)))))) (sort
  (set1 (set1 (tuple2 (tuple2 b1 d1) (tuple2 c1 e1)))) (t2tb4718 x))))

(declare-fun tb2t4718 (uni) (set (set (tuple21 (tuple21 b d) (tuple21 c
  e)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 b d) (tuple21 c e))))))
  (! (= (tb2t4718 (t2tb4718 i)) i) :pattern ((t2tb4718 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 b1 d1) (tuple2 c1 e1)))) j)
     (= (t2tb4718 (tb2t4718 j)) j)) :pattern ((t2tb4718 (tb2t4718 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 b d))) (v (set (tuple21 c e)))
  (r (set (tuple21 (tuple21 b d) (tuple21 c e)))))
  (= (mem (set1 (tuple2 (tuple2 b1 d1) (tuple2 c1 e1))) (t2tb4367 r)
  (relation (tuple2 c1 e1) (tuple2 b1 d1) (t2tb687 u) (t2tb3478 v)))
  (forall ((x (tuple21 b d)) (y (tuple21 c e)))
  (=> (mem (tuple2 (tuple2 b1 d1) (tuple2 c1 e1))
  (Tuple2 (tuple2 b1 d1) (tuple2 c1 e1) (t2tb692 x) (t2tb3479 y))
  (t2tb4367 r)) (and (mem23 x u) (mem46 y v)))))))

(declare-fun t2tb4719 ((set (set (tuple21 (tuple21 b d) (tuple21 a
  e))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 b d) (tuple21 a e)))))) (sort
  (set1 (set1 (tuple2 (tuple2 b1 d1) (tuple2 a1 e1)))) (t2tb4719 x))))

(declare-fun tb2t4719 (uni) (set (set (tuple21 (tuple21 b d) (tuple21 a
  e)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 b d) (tuple21 a e))))))
  (! (= (tb2t4719 (t2tb4719 i)) i) :pattern ((t2tb4719 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 b1 d1) (tuple2 a1 e1)))) j)
     (= (t2tb4719 (tb2t4719 j)) j)) :pattern ((t2tb4719 (tb2t4719 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 b d))) (v (set (tuple21 a e)))
  (r (set (tuple21 (tuple21 b d) (tuple21 a e)))))
  (= (mem (set1 (tuple2 (tuple2 b1 d1) (tuple2 a1 e1))) (t2tb4369 r)
  (relation (tuple2 a1 e1) (tuple2 b1 d1) (t2tb687 u) (t2tb2943 v)))
  (forall ((x (tuple21 b d)) (y (tuple21 a e)))
  (=> (mem (tuple2 (tuple2 b1 d1) (tuple2 a1 e1))
  (Tuple2 (tuple2 b1 d1) (tuple2 a1 e1) (t2tb692 x) (t2tb2949 y))
  (t2tb4369 r)) (and (mem23 x u) (mem44 y v)))))))

(declare-fun t2tb4720 ((set (set (tuple21 (tuple21 b d) e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 b d) e))))) (sort
  (set1 (set1 (tuple2 (tuple2 b1 d1) e1))) (t2tb4720 x))))

(declare-fun tb2t4720 (uni) (set (set (tuple21 (tuple21 b d) e))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 b d) e)))))
  (! (= (tb2t4720 (t2tb4720 i)) i) :pattern ((t2tb4720 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 b1 d1) e1))) j)
     (= (t2tb4720 (tb2t4720 j)) j)) :pattern ((t2tb4720 (tb2t4720 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 b d))) (v (set e)) (r (set (tuple21 (tuple21 b d)
  e))))
  (= (mem (set1 (tuple2 (tuple2 b1 d1) e1)) (t2tb3915 r)
  (relation e1 (tuple2 b1 d1) (t2tb687 u) (t2tb2947 v)))
  (forall ((x (tuple21 b d)) (y e))
  (=> (mem (tuple2 (tuple2 b1 d1) e1)
  (Tuple2 (tuple2 b1 d1) e1 (t2tb692 x) (t2tb2955 y)) (t2tb3915 r))
  (and (mem23 x u) (mem36 y v)))))))

(declare-fun t2tb4721 ((set (set (tuple21 (tuple21 b d) (tuple21 a
  d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 b d) (tuple21 a d)))))) (sort
  (set1 (set1 (tuple2 (tuple2 b1 d1) (tuple2 a1 d1)))) (t2tb4721 x))))

(declare-fun tb2t4721 (uni) (set (set (tuple21 (tuple21 b d) (tuple21 a
  d)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 b d) (tuple21 a d))))))
  (! (= (tb2t4721 (t2tb4721 i)) i) :pattern ((t2tb4721 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 b1 d1) (tuple2 a1 d1)))) j)
     (= (t2tb4721 (tb2t4721 j)) j)) :pattern ((t2tb4721 (tb2t4721 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 b d))) (v (set (tuple21 a d)))
  (r (set (tuple21 (tuple21 b d) (tuple21 a d)))))
  (= (mem (set1 (tuple2 (tuple2 b1 d1) (tuple2 a1 d1))) (t2tb4371 r)
  (relation (tuple2 a1 d1) (tuple2 b1 d1) (t2tb687 u) (t2tb903 v)))
  (forall ((x (tuple21 b d)) (y (tuple21 a d)))
  (=> (mem (tuple2 (tuple2 b1 d1) (tuple2 a1 d1))
  (Tuple2 (tuple2 b1 d1) (tuple2 a1 d1) (t2tb692 x) (t2tb904 y))
  (t2tb4371 r)) (and (mem23 x u) (mem32 y v)))))))

(declare-fun t2tb4722 ((set (set (tuple21 (tuple21 b d) (set (tuple21 b
  d)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 b d) (set (tuple21 b d))))))) (sort
  (set1 (set1 (tuple2 (tuple2 b1 d1) (set1 (tuple2 b1 d1))))) (t2tb4722 x))))

(declare-fun tb2t4722 (uni) (set (set (tuple21 (tuple21 b d) (set (tuple21 b
  d))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 b d) (set (tuple21 b d)))))))
  (! (= (tb2t4722 (t2tb4722 i)) i) :pattern ((t2tb4722 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 b1 d1) (set1 (tuple2 b1 d1))))) j)
     (= (t2tb4722 (tb2t4722 j)) j)) :pattern ((t2tb4722 (tb2t4722 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 b d))) (v (set (set (tuple21 b d))))
  (r (set (tuple21 (tuple21 b d) (set (tuple21 b d))))))
  (= (mem (set1 (tuple2 (tuple2 b1 d1) (set1 (tuple2 b1 d1)))) (t2tb4373 r)
  (relation (set1 (tuple2 b1 d1)) (tuple2 b1 d1) (t2tb687 u) (t2tb906 v)))
  (forall ((x (tuple21 b d)) (y (set (tuple21 b d))))
  (=> (mem (tuple2 (tuple2 b1 d1) (set1 (tuple2 b1 d1)))
  (Tuple2 (tuple2 b1 d1) (set1 (tuple2 b1 d1)) (t2tb692 x) (t2tb687 y))
  (t2tb4373 r)) (and (mem23 x u) (mem33 y v)))))))

(declare-fun t2tb4723 ((set (set (tuple21 (tuple21 b d) (tuple21 b
  d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 b d) (tuple21 b d)))))) (sort
  (set1 (set1 (tuple2 (tuple2 b1 d1) (tuple2 b1 d1)))) (t2tb4723 x))))

(declare-fun tb2t4723 (uni) (set (set (tuple21 (tuple21 b d) (tuple21 b
  d)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 b d) (tuple21 b d))))))
  (! (= (tb2t4723 (t2tb4723 i)) i) :pattern ((t2tb4723 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 b1 d1) (tuple2 b1 d1)))) j)
     (= (t2tb4723 (tb2t4723 j)) j)) :pattern ((t2tb4723 (tb2t4723 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 b d))) (v (set (tuple21 b d)))
  (r (set (tuple21 (tuple21 b d) (tuple21 b d)))))
  (= (mem (set1 (tuple2 (tuple2 b1 d1) (tuple2 b1 d1))) (t2tb747 r)
  (relation (tuple2 b1 d1) (tuple2 b1 d1) (t2tb687 u) (t2tb687 v)))
  (forall ((x (tuple21 b d)) (y (tuple21 b d)))
  (=> (mem (tuple2 (tuple2 b1 d1) (tuple2 b1 d1))
  (Tuple2 (tuple2 b1 d1) (tuple2 b1 d1) (t2tb692 x) (t2tb692 y)) (t2tb747 r))
  (and (mem23 x u) (mem23 y v)))))))

(declare-fun t2tb4724 ((set (set (tuple21 (tuple21 b d) d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 b d) d))))) (sort
  (set1 (set1 (tuple2 (tuple2 b1 d1) d1))) (t2tb4724 x))))

(declare-fun tb2t4724 (uni) (set (set (tuple21 (tuple21 b d) d))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 b d) d)))))
  (! (= (tb2t4724 (t2tb4724 i)) i) :pattern ((t2tb4724 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 b1 d1) d1))) j)
     (= (t2tb4724 (tb2t4724 j)) j)) :pattern ((t2tb4724 (tb2t4724 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 b d))) (v (set d)) (r (set (tuple21 (tuple21 b d)
  d))))
  (= (mem (set1 (tuple2 (tuple2 b1 d1) d1)) (t2tb4375 r)
  (relation d1 (tuple2 b1 d1) (t2tb687 u) (t2tb690 v)))
  (forall ((x (tuple21 b d)) (y d))
  (=> (mem (tuple2 (tuple2 b1 d1) d1)
  (Tuple2 (tuple2 b1 d1) d1 (t2tb692 x) (t2tb694 y)) (t2tb4375 r))
  (and (mem23 x u) (mem20 y v)))))))

(declare-fun t2tb4725 ((set (set (tuple21 (tuple21 b d) (tuple21 a (tuple21 b
  c)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 b d) (tuple21 a (tuple21 b c)))))))
  (sort (set1 (set1 (tuple2 (tuple2 b1 d1) (tuple2 a1 (tuple2 b1 c1)))))
  (t2tb4725 x))))

(declare-fun tb2t4725 (uni) (set (set (tuple21 (tuple21 b d) (tuple21 a
  (tuple21 b c))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 b d) (tuple21 a (tuple21 b c)))))))
  (! (= (tb2t4725 (t2tb4725 i)) i) :pattern ((t2tb4725 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (tuple2 b1 d1) (tuple2 a1 (tuple2 b1 c1))))) j)
     (= (t2tb4725 (tb2t4725 j)) j)) :pattern ((t2tb4725 (tb2t4725 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 b d))) (v (set (tuple21 a (tuple21 b c))))
  (r (set (tuple21 (tuple21 b d) (tuple21 a (tuple21 b c))))))
  (= (mem (set1 (tuple2 (tuple2 b1 d1) (tuple2 a1 (tuple2 b1 c1))))
  (t2tb4376 r)
  (relation (tuple2 a1 (tuple2 b1 c1)) (tuple2 b1 d1) (t2tb687 u)
  (t2tb261 v)))
  (forall ((x (tuple21 b d)) (y (tuple21 a (tuple21 b c))))
  (=> (mem (tuple2 (tuple2 b1 d1) (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 (tuple2 b1 d1) (tuple2 a1 (tuple2 b1 c1)) (t2tb692 x) (t2tb260 y))
  (t2tb4376 r)) (and (mem23 x u) (mem14 y v)))))))

(declare-fun t2tb4726 ((set (set (tuple21 (tuple21 b d) (set (tuple21 a
  c)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 b d) (set (tuple21 a c))))))) (sort
  (set1 (set1 (tuple2 (tuple2 b1 d1) (set1 (tuple2 a1 c1))))) (t2tb4726 x))))

(declare-fun tb2t4726 (uni) (set (set (tuple21 (tuple21 b d) (set (tuple21 a
  c))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 b d) (set (tuple21 a c)))))))
  (! (= (tb2t4726 (t2tb4726 i)) i) :pattern ((t2tb4726 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 b1 d1) (set1 (tuple2 a1 c1))))) j)
     (= (t2tb4726 (tb2t4726 j)) j)) :pattern ((t2tb4726 (tb2t4726 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 b d))) (v (set (set (tuple21 a c))))
  (r (set (tuple21 (tuple21 b d) (set (tuple21 a c))))))
  (= (mem (set1 (tuple2 (tuple2 b1 d1) (set1 (tuple2 a1 c1)))) (t2tb4378 r)
  (relation (set1 (tuple2 a1 c1)) (tuple2 b1 d1) (t2tb687 u) (t2tb128 v)))
  (forall ((x (tuple21 b d)) (y (set (tuple21 a c))))
  (=> (mem (tuple2 (tuple2 b1 d1) (set1 (tuple2 a1 c1)))
  (Tuple2 (tuple2 b1 d1) (set1 (tuple2 a1 c1)) (t2tb692 x) (t2tb129 y))
  (t2tb4378 r)) (and (mem23 x u) (mem11 y v)))))))

(declare-fun t2tb4727 ((set (set (tuple21 (tuple21 b d) (tuple21 a
  c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 b d) (tuple21 a c)))))) (sort
  (set1 (set1 (tuple2 (tuple2 b1 d1) (tuple2 a1 c1)))) (t2tb4727 x))))

(declare-fun tb2t4727 (uni) (set (set (tuple21 (tuple21 b d) (tuple21 a
  c)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 b d) (tuple21 a c))))))
  (! (= (tb2t4727 (t2tb4727 i)) i) :pattern ((t2tb4727 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 b1 d1) (tuple2 a1 c1)))) j)
     (= (t2tb4727 (tb2t4727 j)) j)) :pattern ((t2tb4727 (tb2t4727 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 b d))) (v (set (tuple21 a c)))
  (r (set (tuple21 (tuple21 b d) (tuple21 a c)))))
  (= (mem (set1 (tuple2 (tuple2 b1 d1) (tuple2 a1 c1))) (t2tb755 r)
  (relation (tuple2 a1 c1) (tuple2 b1 d1) (t2tb687 u) (t2tb129 v)))
  (forall ((x (tuple21 b d)) (y (tuple21 a c)))
  (=> (mem (tuple2 (tuple2 b1 d1) (tuple2 a1 c1))
  (Tuple2 (tuple2 b1 d1) (tuple2 a1 c1) (t2tb692 x) (t2tb133 y)) (t2tb755 r))
  (and (mem23 x u) (mem10 y v)))))))

(declare-fun t2tb4728 ((set (set (tuple21 (tuple21 b d) c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 b d) c))))) (sort
  (set1 (set1 (tuple2 (tuple2 b1 d1) c1))) (t2tb4728 x))))

(declare-fun tb2t4728 (uni) (set (set (tuple21 (tuple21 b d) c))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 b d) c)))))
  (! (= (tb2t4728 (t2tb4728 i)) i) :pattern ((t2tb4728 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 b1 d1) c1))) j)
     (= (t2tb4728 (tb2t4728 j)) j)) :pattern ((t2tb4728 (tb2t4728 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 b d))) (v (set c)) (r (set (tuple21 (tuple21 b d)
  c))))
  (= (mem (set1 (tuple2 (tuple2 b1 d1) c1)) (t2tb4380 r)
  (relation c1 (tuple2 b1 d1) (t2tb687 u) (t2tb132 v)))
  (forall ((x (tuple21 b d)) (y c))
  (=> (mem (tuple2 (tuple2 b1 d1) c1)
  (Tuple2 (tuple2 b1 d1) c1 (t2tb692 x) (t2tb135 y)) (t2tb4380 r))
  (and (mem23 x u) (mem7 y v)))))))

(declare-fun t2tb4729 ((set (set (tuple21 (tuple21 b d) (set (tuple21 a
  b)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 b d) (set (tuple21 a b))))))) (sort
  (set1 (set1 (tuple2 (tuple2 b1 d1) (set1 (tuple2 a1 b1))))) (t2tb4729 x))))

(declare-fun tb2t4729 (uni) (set (set (tuple21 (tuple21 b d) (set (tuple21 a
  b))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 b d) (set (tuple21 a b)))))))
  (! (= (tb2t4729 (t2tb4729 i)) i) :pattern ((t2tb4729 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 b1 d1) (set1 (tuple2 a1 b1))))) j)
     (= (t2tb4729 (tb2t4729 j)) j)) :pattern ((t2tb4729 (tb2t4729 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 b d))) (v (set (set (tuple21 a b))))
  (r (set (tuple21 (tuple21 b d) (set (tuple21 a b))))))
  (= (mem (set1 (tuple2 (tuple2 b1 d1) (set1 (tuple2 a1 b1)))) (t2tb4381 r)
  (relation (set1 (tuple2 a1 b1)) (tuple2 b1 d1) (t2tb687 u) (t2tb10 v)))
  (forall ((x (tuple21 b d)) (y (set (tuple21 a b))))
  (=> (mem (tuple2 (tuple2 b1 d1) (set1 (tuple2 a1 b1)))
  (Tuple2 (tuple2 b1 d1) (set1 (tuple2 a1 b1)) (t2tb692 x) (t2tb11 y))
  (t2tb4381 r)) (and (mem23 x u) (mem4 y v)))))))

(declare-fun t2tb4730 ((set (set (tuple21 (tuple21 b d) (tuple21 a
  b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 b d) (tuple21 a b)))))) (sort
  (set1 (set1 (tuple2 (tuple2 b1 d1) (tuple2 a1 b1)))) (t2tb4730 x))))

(declare-fun tb2t4730 (uni) (set (set (tuple21 (tuple21 b d) (tuple21 a
  b)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 b d) (tuple21 a b))))))
  (! (= (tb2t4730 (t2tb4730 i)) i) :pattern ((t2tb4730 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 b1 d1) (tuple2 a1 b1)))) j)
     (= (t2tb4730 (tb2t4730 j)) j)) :pattern ((t2tb4730 (tb2t4730 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 b d))) (v (set (tuple21 a b)))
  (r (set (tuple21 (tuple21 b d) (tuple21 a b)))))
  (= (mem (set1 (tuple2 (tuple2 b1 d1) (tuple2 a1 b1))) (t2tb4383 r)
  (relation (tuple2 a1 b1) (tuple2 b1 d1) (t2tb687 u) (t2tb11 v)))
  (forall ((x (tuple21 b d)) (y (tuple21 a b)))
  (=> (mem (tuple2 (tuple2 b1 d1) (tuple2 a1 b1))
  (Tuple2 (tuple2 b1 d1) (tuple2 a1 b1) (t2tb692 x) (t2tb13 y)) (t2tb4383 r))
  (and (mem23 x u) (mem3 y v)))))))

(declare-fun t2tb4731 ((set (set (tuple21 (tuple21 b d) b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 b d) b))))) (sort
  (set1 (set1 (tuple2 (tuple2 b1 d1) b1))) (t2tb4731 x))))

(declare-fun tb2t4731 (uni) (set (set (tuple21 (tuple21 b d) b))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 b d) b)))))
  (! (= (tb2t4731 (t2tb4731 i)) i) :pattern ((t2tb4731 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 b1 d1) b1))) j)
     (= (t2tb4731 (tb2t4731 j)) j)) :pattern ((t2tb4731 (tb2t4731 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 b d))) (v (set b)) (r (set (tuple21 (tuple21 b d)
  b))))
  (= (mem (set1 (tuple2 (tuple2 b1 d1) b1)) (t2tb4385 r)
  (relation b1 (tuple2 b1 d1) (t2tb687 u) (t2tb12 v)))
  (forall ((x (tuple21 b d)) (y b))
  (=> (mem (tuple2 (tuple2 b1 d1) b1)
  (Tuple2 (tuple2 b1 d1) b1 (t2tb692 x) (t2tb14 y)) (t2tb4385 r))
  (and (mem23 x u) (mem2 y v)))))))

(declare-fun t2tb4732 ((set (set (tuple21 (tuple21 b d) a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 b d) a))))) (sort
  (set1 (set1 (tuple2 (tuple2 b1 d1) a1))) (t2tb4732 x))))

(declare-fun tb2t4732 (uni) (set (set (tuple21 (tuple21 b d) a))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 b d) a)))))
  (! (= (tb2t4732 (t2tb4732 i)) i) :pattern ((t2tb4732 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 b1 d1) a1))) j)
     (= (t2tb4732 (tb2t4732 j)) j)) :pattern ((t2tb4732 (tb2t4732 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 b d))) (v (set a)) (r (set (tuple21 (tuple21 b d)
  a))))
  (= (mem (set1 (tuple2 (tuple2 b1 d1) a1)) (t2tb4386 r)
  (relation a1 (tuple2 b1 d1) (t2tb687 u) (t2tb1 v)))
  (forall ((x (tuple21 b d)) (y a))
  (=> (mem (tuple2 (tuple2 b1 d1) a1)
  (Tuple2 (tuple2 b1 d1) a1 (t2tb692 x) (t2tb2 y)) (t2tb4386 r))
  (and (mem23 x u) (mem1 y v)))))))

;; mem_relation
  (assert
  (forall ((b2 ty))
  (forall ((u (set (tuple21 b d))) (v uni) (r uni))
  (and
  (=> (mem (set1 (tuple2 (tuple2 b1 d1) b2)) r
  (relation b2 (tuple2 b1 d1) (t2tb687 u) v))
  (forall ((x (tuple21 b d)) (y uni))
  (=> (mem (tuple2 (tuple2 b1 d1) b2)
  (Tuple2 (tuple2 b1 d1) b2 (t2tb692 x) y) r) (and (mem23 x u) (mem b2 y v)))))
  (=>
  (forall ((x (tuple21 b d)) (y uni))
  (=> (sort b2 y)
  (=> (mem (tuple2 (tuple2 b1 d1) b2)
  (Tuple2 (tuple2 b1 d1) b2 (t2tb692 x) y) r) (and (mem23 x u) (mem b2 y v)))))
  (mem (set1 (tuple2 (tuple2 b1 d1) b2)) r
  (relation b2 (tuple2 b1 d1) (t2tb687 u) v)))))))

(declare-fun t2tb4733 ((set (set (tuple21 d (tuple21 (tuple21 b c) (tuple21 d
  e)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 d (tuple21 (tuple21 b c) (tuple21 d e)))))))
  (sort (set1 (set1 (tuple2 d1 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)))))
  (t2tb4733 x))))

(declare-fun tb2t4733 (uni) (set (set (tuple21 d (tuple21 (tuple21 b c)
  (tuple21 d e))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 d (tuple21 (tuple21 b c) (tuple21 d e)))))))
  (! (= (tb2t4733 (t2tb4733 i)) i) :pattern ((t2tb4733 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 d1 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1))))) j)
     (= (t2tb4733 (tb2t4733 j)) j)) :pattern ((t2tb4733 (tb2t4733 j))) )))

;; mem_relation
  (assert
  (forall ((u (set d)) (v (set (tuple21 (tuple21 b c) (tuple21 d e))))
  (r (set (tuple21 d (tuple21 (tuple21 b c) (tuple21 d e))))))
  (= (mem (set1 (tuple2 d1 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1))))
  (t2tb4387 r)
  (relation (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) d1 (t2tb690 u)
  (t2tb4102 v)))
  (forall ((x d) (y (tuple21 (tuple21 b c) (tuple21 d e))))
  (=> (mem (tuple2 d1 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)))
  (Tuple2 d1 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (t2tb694 x) (t2tb4104 y))
  (t2tb4387 r)) (and (mem20 x u) (mem49 y v)))))))

(declare-fun t2tb4734 ((set (set (tuple21 d (tuple21 a (tuple21 d
  e)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 d (tuple21 a (tuple21 d e))))))) (sort
  (set1 (set1 (tuple2 d1 (tuple2 a1 (tuple2 d1 e1))))) (t2tb4734 x))))

(declare-fun tb2t4734 (uni) (set (set (tuple21 d (tuple21 a (tuple21 d
  e))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 d (tuple21 a (tuple21 d e)))))))
  (! (= (tb2t4734 (t2tb4734 i)) i) :pattern ((t2tb4734 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 d1 (tuple2 a1 (tuple2 d1 e1))))) j)
     (= (t2tb4734 (tb2t4734 j)) j)) :pattern ((t2tb4734 (tb2t4734 j))) )))

;; mem_relation
  (assert
  (forall ((u (set d)) (v (set (tuple21 a (tuple21 d e)))) (r (set (tuple21 d
  (tuple21 a (tuple21 d e))))))
  (= (mem (set1 (tuple2 d1 (tuple2 a1 (tuple2 d1 e1)))) (t2tb4389 r)
  (relation (tuple2 a1 (tuple2 d1 e1)) d1 (t2tb690 u) (t2tb4103 v)))
  (forall ((x d) (y (tuple21 a (tuple21 d e))))
  (=> (mem (tuple2 d1 (tuple2 a1 (tuple2 d1 e1)))
  (Tuple2 d1 (tuple2 a1 (tuple2 d1 e1)) (t2tb694 x) (t2tb4105 y))
  (t2tb4389 r)) (and (mem20 x u) (mem48 y v)))))))

(declare-fun t2tb4735 ((set (set (tuple21 d (set (tuple21 c e)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 d (set (tuple21 c e))))))) (sort
  (set1 (set1 (tuple2 d1 (set1 (tuple2 c1 e1))))) (t2tb4735 x))))

(declare-fun tb2t4735 (uni) (set (set (tuple21 d (set (tuple21 c e))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 d (set (tuple21 c e)))))))
  (! (= (tb2t4735 (t2tb4735 i)) i) :pattern ((t2tb4735 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 d1 (set1 (tuple2 c1 e1))))) j)
     (= (t2tb4735 (tb2t4735 j)) j)) :pattern ((t2tb4735 (tb2t4735 j))) )))

;; mem_relation
  (assert
  (forall ((u (set d)) (v (set (set (tuple21 c e)))) (r (set (tuple21 d
  (set (tuple21 c e))))))
  (= (mem (set1 (tuple2 d1 (set1 (tuple2 c1 e1)))) (t2tb4392 r)
  (relation (set1 (tuple2 c1 e1)) d1 (t2tb690 u) (t2tb3854 v)))
  (forall ((x d) (y (set (tuple21 c e))))
  (=> (mem (tuple2 d1 (set1 (tuple2 c1 e1)))
  (Tuple2 d1 (set1 (tuple2 c1 e1)) (t2tb694 x) (t2tb3478 y)) (t2tb4392 r))
  (and (mem20 x u) (mem47 y v)))))))

(declare-fun t2tb4736 ((set (set (tuple21 d (tuple21 c e))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 d (tuple21 c e)))))) (sort
  (set1 (set1 (tuple2 d1 (tuple2 c1 e1)))) (t2tb4736 x))))

(declare-fun tb2t4736 (uni) (set (set (tuple21 d (tuple21 c e)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 d (tuple21 c e))))))
  (! (= (tb2t4736 (t2tb4736 i)) i) :pattern ((t2tb4736 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 d1 (tuple2 c1 e1)))) j)
     (= (t2tb4736 (tb2t4736 j)) j)) :pattern ((t2tb4736 (tb2t4736 j))) )))

;; mem_relation
  (assert
  (forall ((u (set d)) (v (set (tuple21 c e))) (r (set (tuple21 d (tuple21 c
  e)))))
  (= (mem (set1 (tuple2 d1 (tuple2 c1 e1))) (t2tb4393 r)
  (relation (tuple2 c1 e1) d1 (t2tb690 u) (t2tb3478 v)))
  (forall ((x d) (y (tuple21 c e)))
  (=> (mem (tuple2 d1 (tuple2 c1 e1))
  (Tuple2 d1 (tuple2 c1 e1) (t2tb694 x) (t2tb3479 y)) (t2tb4393 r))
  (and (mem20 x u) (mem46 y v)))))))

(declare-fun t2tb3835 ((set (set (tuple21 d (tuple21 a e))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 d (tuple21 a e)))))) (sort
  (set1 (set1 (tuple2 d1 (tuple2 a1 e1)))) (t2tb3835 x))))

(declare-fun tb2t3835 (uni) (set (set (tuple21 d (tuple21 a e)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 d (tuple21 a e))))))
  (! (= (tb2t3835 (t2tb3835 i)) i) :pattern ((t2tb3835 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 d1 (tuple2 a1 e1)))) j)
     (= (t2tb3835 (tb2t3835 j)) j)) :pattern ((t2tb3835 (tb2t3835 j))) )))

;; mem_relation
  (assert
  (forall ((u (set d)) (v (set (tuple21 a e))) (r (set (tuple21 d (tuple21 a
  e)))))
  (= (mem (set1 (tuple2 d1 (tuple2 a1 e1))) (t2tb3442 r)
  (relation (tuple2 a1 e1) d1 (t2tb690 u) (t2tb2943 v)))
  (forall ((x d) (y (tuple21 a e)))
  (=> (mem (tuple2 d1 (tuple2 a1 e1))
  (Tuple2 d1 (tuple2 a1 e1) (t2tb694 x) (t2tb2949 y)) (t2tb3442 r))
  (and (mem20 x u) (mem44 y v)))))))

(declare-fun t2tb3842 ((set (set (tuple21 d e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 d e))))) (sort (set1 (set1 (tuple2 d1 e1)))
  (t2tb3842 x))))

(declare-fun tb2t3842 (uni) (set (set (tuple21 d e))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 d e)))))
  (! (= (tb2t3842 (t2tb3842 i)) i) :pattern ((t2tb3842 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 d1 e1))) j) (= (t2tb3842 (tb2t3842 j)) j)) :pattern (
  (t2tb3842 (tb2t3842 j))) )))

;; mem_relation
  (assert
  (forall ((u (set d)) (v (set e)) (r (set (tuple21 d e))))
  (= (mem (set1 (tuple2 d1 e1)) (t2tb3456 r)
  (relation e1 d1 (t2tb690 u) (t2tb2947 v)))
  (forall ((x d) (y e))
  (=> (mem (tuple2 d1 e1) (Tuple2 d1 e1 (t2tb694 x) (t2tb2955 y))
  (t2tb3456 r)) (and (mem20 x u) (mem36 y v)))))))

(declare-fun t2tb4737 ((set (set (tuple21 d (tuple21 a d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 d (tuple21 a d)))))) (sort
  (set1 (set1 (tuple2 d1 (tuple2 a1 d1)))) (t2tb4737 x))))

(declare-fun tb2t4737 (uni) (set (set (tuple21 d (tuple21 a d)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 d (tuple21 a d))))))
  (! (= (tb2t4737 (t2tb4737 i)) i) :pattern ((t2tb4737 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 d1 (tuple2 a1 d1)))) j)
     (= (t2tb4737 (tb2t4737 j)) j)) :pattern ((t2tb4737 (tb2t4737 j))) )))

;; mem_relation
  (assert
  (forall ((u (set d)) (v (set (tuple21 a d))) (r (set (tuple21 d (tuple21 a
  d)))))
  (= (mem (set1 (tuple2 d1 (tuple2 a1 d1))) (t2tb4395 r)
  (relation (tuple2 a1 d1) d1 (t2tb690 u) (t2tb903 v)))
  (forall ((x d) (y (tuple21 a d)))
  (=> (mem (tuple2 d1 (tuple2 a1 d1))
  (Tuple2 d1 (tuple2 a1 d1) (t2tb694 x) (t2tb904 y)) (t2tb4395 r))
  (and (mem20 x u) (mem32 y v)))))))

(declare-fun t2tb4738 ((set (set (tuple21 d (set (tuple21 b d)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 d (set (tuple21 b d))))))) (sort
  (set1 (set1 (tuple2 d1 (set1 (tuple2 b1 d1))))) (t2tb4738 x))))

(declare-fun tb2t4738 (uni) (set (set (tuple21 d (set (tuple21 b d))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 d (set (tuple21 b d)))))))
  (! (= (tb2t4738 (t2tb4738 i)) i) :pattern ((t2tb4738 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 d1 (set1 (tuple2 b1 d1))))) j)
     (= (t2tb4738 (tb2t4738 j)) j)) :pattern ((t2tb4738 (tb2t4738 j))) )))

;; mem_relation
  (assert
  (forall ((u (set d)) (v (set (set (tuple21 b d)))) (r (set (tuple21 d
  (set (tuple21 b d))))))
  (= (mem (set1 (tuple2 d1 (set1 (tuple2 b1 d1)))) (t2tb4397 r)
  (relation (set1 (tuple2 b1 d1)) d1 (t2tb690 u) (t2tb906 v)))
  (forall ((x d) (y (set (tuple21 b d))))
  (=> (mem (tuple2 d1 (set1 (tuple2 b1 d1)))
  (Tuple2 d1 (set1 (tuple2 b1 d1)) (t2tb694 x) (t2tb687 y)) (t2tb4397 r))
  (and (mem20 x u) (mem33 y v)))))))

(declare-fun t2tb4739 ((set (set (tuple21 d (tuple21 b d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 d (tuple21 b d)))))) (sort
  (set1 (set1 (tuple2 d1 (tuple2 b1 d1)))) (t2tb4739 x))))

(declare-fun tb2t4739 (uni) (set (set (tuple21 d (tuple21 b d)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 d (tuple21 b d))))))
  (! (= (tb2t4739 (t2tb4739 i)) i) :pattern ((t2tb4739 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 d1 (tuple2 b1 d1)))) j)
     (= (t2tb4739 (tb2t4739 j)) j)) :pattern ((t2tb4739 (tb2t4739 j))) )))

;; mem_relation
  (assert
  (forall ((u (set d)) (v (set (tuple21 b d))) (r (set (tuple21 d (tuple21 b
  d)))))
  (= (mem (set1 (tuple2 d1 (tuple2 b1 d1))) (t2tb4399 r)
  (relation (tuple2 b1 d1) d1 (t2tb690 u) (t2tb687 v)))
  (forall ((x d) (y (tuple21 b d)))
  (=> (mem (tuple2 d1 (tuple2 b1 d1))
  (Tuple2 d1 (tuple2 b1 d1) (t2tb694 x) (t2tb692 y)) (t2tb4399 r))
  (and (mem20 x u) (mem23 y v)))))))

(declare-fun t2tb974 ((set (set (tuple21 d d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 d d))))) (sort (set1 (set1 (tuple2 d1 d1)))
  (t2tb974 x))))

(declare-fun tb2t974 (uni) (set (set (tuple21 d d))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 d d)))))
  (! (= (tb2t974 (t2tb974 i)) i) :pattern ((t2tb974 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 d1 d1))) j) (= (t2tb974 (tb2t974 j)) j)) :pattern (
  (t2tb974 (tb2t974 j))) )))

;; mem_relation
  (assert
  (forall ((u (set d)) (v (set d)) (r (set (tuple21 d d))))
  (= (mem (set1 (tuple2 d1 d1)) (t2tb825 r)
  (relation d1 d1 (t2tb690 u) (t2tb690 v)))
  (forall ((x d) (y d))
  (=> (mem (tuple2 d1 d1) (Tuple2 d1 d1 (t2tb694 x) (t2tb694 y)) (t2tb825 r))
  (and (mem20 x u) (mem20 y v)))))))

(declare-fun t2tb4740 ((set (set (tuple21 d (tuple21 a (tuple21 b
  c)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 d (tuple21 a (tuple21 b c))))))) (sort
  (set1 (set1 (tuple2 d1 (tuple2 a1 (tuple2 b1 c1))))) (t2tb4740 x))))

(declare-fun tb2t4740 (uni) (set (set (tuple21 d (tuple21 a (tuple21 b
  c))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 d (tuple21 a (tuple21 b c)))))))
  (! (= (tb2t4740 (t2tb4740 i)) i) :pattern ((t2tb4740 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 d1 (tuple2 a1 (tuple2 b1 c1))))) j)
     (= (t2tb4740 (tb2t4740 j)) j)) :pattern ((t2tb4740 (tb2t4740 j))) )))

;; mem_relation
  (assert
  (forall ((u (set d)) (v (set (tuple21 a (tuple21 b c)))) (r (set (tuple21 d
  (tuple21 a (tuple21 b c))))))
  (= (mem (set1 (tuple2 d1 (tuple2 a1 (tuple2 b1 c1)))) (t2tb4400 r)
  (relation (tuple2 a1 (tuple2 b1 c1)) d1 (t2tb690 u) (t2tb261 v)))
  (forall ((x d) (y (tuple21 a (tuple21 b c))))
  (=> (mem (tuple2 d1 (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 d1 (tuple2 a1 (tuple2 b1 c1)) (t2tb694 x) (t2tb260 y))
  (t2tb4400 r)) (and (mem20 x u) (mem14 y v)))))))

(declare-fun t2tb4741 ((set (set (tuple21 d (set (tuple21 a c)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 d (set (tuple21 a c))))))) (sort
  (set1 (set1 (tuple2 d1 (set1 (tuple2 a1 c1))))) (t2tb4741 x))))

(declare-fun tb2t4741 (uni) (set (set (tuple21 d (set (tuple21 a c))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 d (set (tuple21 a c)))))))
  (! (= (tb2t4741 (t2tb4741 i)) i) :pattern ((t2tb4741 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 d1 (set1 (tuple2 a1 c1))))) j)
     (= (t2tb4741 (tb2t4741 j)) j)) :pattern ((t2tb4741 (tb2t4741 j))) )))

;; mem_relation
  (assert
  (forall ((u (set d)) (v (set (set (tuple21 a c)))) (r (set (tuple21 d
  (set (tuple21 a c))))))
  (= (mem (set1 (tuple2 d1 (set1 (tuple2 a1 c1)))) (t2tb4402 r)
  (relation (set1 (tuple2 a1 c1)) d1 (t2tb690 u) (t2tb128 v)))
  (forall ((x d) (y (set (tuple21 a c))))
  (=> (mem (tuple2 d1 (set1 (tuple2 a1 c1)))
  (Tuple2 d1 (set1 (tuple2 a1 c1)) (t2tb694 x) (t2tb129 y)) (t2tb4402 r))
  (and (mem20 x u) (mem11 y v)))))))

(declare-fun t2tb4742 ((set (set (tuple21 d (tuple21 a c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 d (tuple21 a c)))))) (sort
  (set1 (set1 (tuple2 d1 (tuple2 a1 c1)))) (t2tb4742 x))))

(declare-fun tb2t4742 (uni) (set (set (tuple21 d (tuple21 a c)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 d (tuple21 a c))))))
  (! (= (tb2t4742 (t2tb4742 i)) i) :pattern ((t2tb4742 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 d1 (tuple2 a1 c1)))) j)
     (= (t2tb4742 (tb2t4742 j)) j)) :pattern ((t2tb4742 (tb2t4742 j))) )))

;; mem_relation
  (assert
  (forall ((u (set d)) (v (set (tuple21 a c))) (r (set (tuple21 d (tuple21 a
  c)))))
  (= (mem (set1 (tuple2 d1 (tuple2 a1 c1))) (t2tb4404 r)
  (relation (tuple2 a1 c1) d1 (t2tb690 u) (t2tb129 v)))
  (forall ((x d) (y (tuple21 a c)))
  (=> (mem (tuple2 d1 (tuple2 a1 c1))
  (Tuple2 d1 (tuple2 a1 c1) (t2tb694 x) (t2tb133 y)) (t2tb4404 r))
  (and (mem20 x u) (mem10 y v)))))))

(declare-fun t2tb976 ((set (set (tuple21 d c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 d c))))) (sort (set1 (set1 (tuple2 d1 c1)))
  (t2tb976 x))))

(declare-fun tb2t976 (uni) (set (set (tuple21 d c))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 d c)))))
  (! (= (tb2t976 (t2tb976 i)) i) :pattern ((t2tb976 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 d1 c1))) j) (= (t2tb976 (tb2t976 j)) j)) :pattern (
  (t2tb976 (tb2t976 j))) )))

;; mem_relation
  (assert
  (forall ((u (set d)) (v (set c)) (r (set (tuple21 d c))))
  (= (mem (set1 (tuple2 d1 c1)) (t2tb829 r)
  (relation c1 d1 (t2tb690 u) (t2tb132 v)))
  (forall ((x d) (y c))
  (=> (mem (tuple2 d1 c1) (Tuple2 d1 c1 (t2tb694 x) (t2tb135 y)) (t2tb829 r))
  (and (mem20 x u) (mem7 y v)))))))

(declare-fun t2tb977 ((set (set (tuple21 d (set (tuple21 a b)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 d (set (tuple21 a b))))))) (sort
  (set1 (set1 (tuple2 d1 (set1 (tuple2 a1 b1))))) (t2tb977 x))))

(declare-fun tb2t977 (uni) (set (set (tuple21 d (set (tuple21 a b))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 d (set (tuple21 a b)))))))
  (! (= (tb2t977 (t2tb977 i)) i) :pattern ((t2tb977 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 d1 (set1 (tuple2 a1 b1))))) j)
     (= (t2tb977 (tb2t977 j)) j)) :pattern ((t2tb977 (tb2t977 j))) )))

;; mem_relation
  (assert
  (forall ((u (set d)) (v (set (set (tuple21 a b)))) (r (set (tuple21 d
  (set (tuple21 a b))))))
  (= (mem (set1 (tuple2 d1 (set1 (tuple2 a1 b1)))) (t2tb831 r)
  (relation (set1 (tuple2 a1 b1)) d1 (t2tb690 u) (t2tb10 v)))
  (forall ((x d) (y (set (tuple21 a b))))
  (=> (mem (tuple2 d1 (set1 (tuple2 a1 b1)))
  (Tuple2 d1 (set1 (tuple2 a1 b1)) (t2tb694 x) (t2tb11 y)) (t2tb831 r))
  (and (mem20 x u) (mem4 y v)))))))

(declare-fun t2tb978 ((set (set (tuple21 d (tuple21 a b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 d (tuple21 a b)))))) (sort
  (set1 (set1 (tuple2 d1 (tuple2 a1 b1)))) (t2tb978 x))))

(declare-fun tb2t978 (uni) (set (set (tuple21 d (tuple21 a b)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 d (tuple21 a b))))))
  (! (= (tb2t978 (t2tb978 i)) i) :pattern ((t2tb978 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 d1 (tuple2 a1 b1)))) j)
     (= (t2tb978 (tb2t978 j)) j)) :pattern ((t2tb978 (tb2t978 j))) )))

;; mem_relation
  (assert
  (forall ((u (set d)) (v (set (tuple21 a b))) (r (set (tuple21 d (tuple21 a
  b)))))
  (= (mem (set1 (tuple2 d1 (tuple2 a1 b1))) (t2tb833 r)
  (relation (tuple2 a1 b1) d1 (t2tb690 u) (t2tb11 v)))
  (forall ((x d) (y (tuple21 a b)))
  (=> (mem (tuple2 d1 (tuple2 a1 b1))
  (Tuple2 d1 (tuple2 a1 b1) (t2tb694 x) (t2tb13 y)) (t2tb833 r))
  (and (mem20 x u) (mem3 y v)))))))

(declare-fun t2tb979 ((set (set (tuple21 d b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 d b))))) (sort (set1 (set1 (tuple2 d1 b1)))
  (t2tb979 x))))

(declare-fun tb2t979 (uni) (set (set (tuple21 d b))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 d b)))))
  (! (= (tb2t979 (t2tb979 i)) i) :pattern ((t2tb979 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 d1 b1))) j) (= (t2tb979 (tb2t979 j)) j)) :pattern (
  (t2tb979 (tb2t979 j))) )))

;; mem_relation
  (assert
  (forall ((u (set d)) (v (set b)) (r (set (tuple21 d b))))
  (= (mem (set1 (tuple2 d1 b1)) (t2tb835 r)
  (relation b1 d1 (t2tb690 u) (t2tb12 v)))
  (forall ((x d) (y b))
  (=> (mem (tuple2 d1 b1) (Tuple2 d1 b1 (t2tb694 x) (t2tb14 y)) (t2tb835 r))
  (and (mem20 x u) (mem2 y v)))))))

(declare-fun t2tb980 ((set (set (tuple21 d a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 d a))))) (sort (set1 (set1 (tuple2 d1 a1)))
  (t2tb980 x))))

(declare-fun tb2t980 (uni) (set (set (tuple21 d a))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 d a)))))
  (! (= (tb2t980 (t2tb980 i)) i) :pattern ((t2tb980 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 d1 a1))) j) (= (t2tb980 (tb2t980 j)) j)) :pattern (
  (t2tb980 (tb2t980 j))) )))

;; mem_relation
  (assert
  (forall ((u (set d)) (v (set a)) (r (set (tuple21 d a))))
  (= (mem (set1 (tuple2 d1 a1)) (t2tb837 r)
  (relation a1 d1 (t2tb690 u) (t2tb1 v)))
  (forall ((x d) (y a))
  (=> (mem (tuple2 d1 a1) (Tuple2 d1 a1 (t2tb694 x) (t2tb2 y)) (t2tb837 r))
  (and (mem20 x u) (mem1 y v)))))))

;; mem_relation
  (assert
  (forall ((b2 ty))
  (forall ((u (set d)) (v uni) (r uni))
  (and
  (=> (mem (set1 (tuple2 d1 b2)) r (relation b2 d1 (t2tb690 u) v))
  (forall ((x d) (y uni))
  (=> (mem (tuple2 d1 b2) (Tuple2 d1 b2 (t2tb694 x) y) r)
  (and (mem20 x u) (mem b2 y v)))))
  (=>
  (forall ((x d) (y uni))
  (=> (sort b2 y)
  (=> (mem (tuple2 d1 b2) (Tuple2 d1 b2 (t2tb694 x) y) r)
  (and (mem20 x u) (mem b2 y v))))) (mem (set1 (tuple2 d1 b2)) r
  (relation b2 d1 (t2tb690 u) v)))))))

(declare-fun t2tb4743 ((set (set (tuple21 (tuple21 a (tuple21 b c))
  (tuple21 (tuple21 b c) (tuple21 d e)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a (tuple21 b c))
  (tuple21 (tuple21 b c) (tuple21 d e))))))) (sort
  (set1
  (set1
  (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)))))
  (t2tb4743 x))))

(declare-fun tb2t4743 (uni) (set (set (tuple21 (tuple21 a (tuple21 b c))
  (tuple21 (tuple21 b c) (tuple21 d e))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a (tuple21 b c))
  (tuple21 (tuple21 b c) (tuple21 d e)))))))
  (! (= (tb2t4743 (t2tb4743 i)) i) :pattern ((t2tb4743 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (set1
     (tuple2 (tuple2 a1 (tuple2 b1 c1))
     (tuple2 (tuple2 b1 c1) (tuple2 d1 e1))))) j)
     (= (t2tb4743 (tb2t4743 j)) j)) :pattern ((t2tb4743 (tb2t4743 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a (tuple21 b c)))) (v (set (tuple21 (tuple21 b c)
  (tuple21 d e)))) (r (set (tuple21 (tuple21 a (tuple21 b c))
  (tuple21 (tuple21 b c) (tuple21 d e))))))
  (= (mem
  (set1
  (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1))))
  (t2tb4405 r)
  (relation (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (tuple2 a1 (tuple2 b1 c1))
  (t2tb261 u) (t2tb4102 v)))
  (forall ((x (tuple21 a (tuple21 b c))) (y (tuple21 (tuple21 b c) (tuple21 d
  e))))
  (=> (mem
  (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)))
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1))
  (t2tb260 x) (t2tb4104 y)) (t2tb4405 r)) (and (mem14 x u) (mem49 y v)))))))

(declare-fun t2tb4744 ((set (set (tuple21 (tuple21 a (tuple21 b c))
  (tuple21 a (tuple21 d e)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a (tuple21 b c)) (tuple21 a
  (tuple21 d e))))))) (sort
  (set1
  (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 (tuple2 d1 e1)))))
  (t2tb4744 x))))

(declare-fun tb2t4744 (uni) (set (set (tuple21 (tuple21 a (tuple21 b c))
  (tuple21 a (tuple21 d e))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a (tuple21 b c)) (tuple21 a
  (tuple21 d e)))))))
  (! (= (tb2t4744 (t2tb4744 i)) i) :pattern ((t2tb4744 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 (tuple2 d1 e1)))))
     j) (= (t2tb4744 (tb2t4744 j)) j)) :pattern ((t2tb4744 (tb2t4744 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a (tuple21 b c)))) (v (set (tuple21 a (tuple21 d
  e)))) (r (set (tuple21 (tuple21 a (tuple21 b c)) (tuple21 a (tuple21 d
  e))))))
  (= (mem
  (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 (tuple2 d1 e1))))
  (t2tb4408 r)
  (relation (tuple2 a1 (tuple2 d1 e1)) (tuple2 a1 (tuple2 b1 c1)) (t2tb261 u)
  (t2tb4103 v)))
  (forall ((x (tuple21 a (tuple21 b c))) (y (tuple21 a (tuple21 d e))))
  (=> (mem (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 (tuple2 d1 e1)))
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 (tuple2 d1 e1)) (t2tb260 x)
  (t2tb4105 y)) (t2tb4408 r)) (and (mem14 x u) (mem48 y v)))))))

(declare-fun t2tb4745 ((set (set (tuple21 (tuple21 a (tuple21 b c))
  (set (tuple21 c e)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a (tuple21 b c)) (set (tuple21 c
  e))))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) (set1 (tuple2 c1 e1)))))
  (t2tb4745 x))))

(declare-fun tb2t4745 (uni) (set (set (tuple21 (tuple21 a (tuple21 b c))
  (set (tuple21 c e))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a (tuple21 b c)) (set (tuple21 c
  e))))))) (! (= (tb2t4745 (t2tb4745 i)) i) :pattern ((t2tb4745 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) (set1 (tuple2 c1 e1)))))
     j) (= (t2tb4745 (tb2t4745 j)) j)) :pattern ((t2tb4745 (tb2t4745 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a (tuple21 b c)))) (v (set (set (tuple21 c e))))
  (r (set (tuple21 (tuple21 a (tuple21 b c)) (set (tuple21 c e))))))
  (= (mem (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) (set1 (tuple2 c1 e1))))
  (t2tb4409 r)
  (relation (set1 (tuple2 c1 e1)) (tuple2 a1 (tuple2 b1 c1)) (t2tb261 u)
  (t2tb3854 v)))
  (forall ((x (tuple21 a (tuple21 b c))) (y (set (tuple21 c e))))
  (=> (mem (tuple2 (tuple2 a1 (tuple2 b1 c1)) (set1 (tuple2 c1 e1)))
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) (set1 (tuple2 c1 e1)) (t2tb260 x)
  (t2tb3478 y)) (t2tb4409 r)) (and (mem14 x u) (mem47 y v)))))))

(declare-fun t2tb4746 ((set (set (tuple21 (tuple21 a (tuple21 b c))
  (tuple21 c e))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a (tuple21 b c)) (tuple21 c e))))))
  (sort (set1 (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 c1 e1))))
  (t2tb4746 x))))

(declare-fun tb2t4746 (uni) (set (set (tuple21 (tuple21 a (tuple21 b c))
  (tuple21 c e)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a (tuple21 b c)) (tuple21 c e))))))
  (! (= (tb2t4746 (t2tb4746 i)) i) :pattern ((t2tb4746 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 c1 e1)))) j)
     (= (t2tb4746 (tb2t4746 j)) j)) :pattern ((t2tb4746 (tb2t4746 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a (tuple21 b c)))) (v (set (tuple21 c e)))
  (r (set (tuple21 (tuple21 a (tuple21 b c)) (tuple21 c e)))))
  (= (mem (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 c1 e1)))
  (t2tb4411 r)
  (relation (tuple2 c1 e1) (tuple2 a1 (tuple2 b1 c1)) (t2tb261 u)
  (t2tb3478 v)))
  (forall ((x (tuple21 a (tuple21 b c))) (y (tuple21 c e)))
  (=> (mem (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 c1 e1))
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 c1 e1) (t2tb260 x) (t2tb3479 y))
  (t2tb4411 r)) (and (mem14 x u) (mem46 y v)))))))

(declare-fun t2tb4747 ((set (set (tuple21 (tuple21 a (tuple21 b c))
  (tuple21 a e))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a (tuple21 b c)) (tuple21 a e))))))
  (sort (set1 (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 e1))))
  (t2tb4747 x))))

(declare-fun tb2t4747 (uni) (set (set (tuple21 (tuple21 a (tuple21 b c))
  (tuple21 a e)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a (tuple21 b c)) (tuple21 a e))))))
  (! (= (tb2t4747 (t2tb4747 i)) i) :pattern ((t2tb4747 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 e1)))) j)
     (= (t2tb4747 (tb2t4747 j)) j)) :pattern ((t2tb4747 (tb2t4747 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a (tuple21 b c)))) (v (set (tuple21 a e)))
  (r (set (tuple21 (tuple21 a (tuple21 b c)) (tuple21 a e)))))
  (= (mem (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 e1)))
  (t2tb4413 r)
  (relation (tuple2 a1 e1) (tuple2 a1 (tuple2 b1 c1)) (t2tb261 u)
  (t2tb2943 v)))
  (forall ((x (tuple21 a (tuple21 b c))) (y (tuple21 a e)))
  (=> (mem (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 e1))
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 e1) (t2tb260 x) (t2tb2949 y))
  (t2tb4413 r)) (and (mem14 x u) (mem44 y v)))))))

(declare-fun t2tb4748 ((set (set (tuple21 (tuple21 a (tuple21 b c))
  e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a (tuple21 b c)) e))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) e1))) (t2tb4748 x))))

(declare-fun tb2t4748 (uni) (set (set (tuple21 (tuple21 a (tuple21 b c))
  e))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a (tuple21 b c)) e)))))
  (! (= (tb2t4748 (t2tb4748 i)) i) :pattern ((t2tb4748 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) e1))) j)
     (= (t2tb4748 (tb2t4748 j)) j)) :pattern ((t2tb4748 (tb2t4748 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a (tuple21 b c)))) (v (set e))
  (r (set (tuple21 (tuple21 a (tuple21 b c)) e))))
  (= (mem (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) e1)) (t2tb4415 r)
  (relation e1 (tuple2 a1 (tuple2 b1 c1)) (t2tb261 u) (t2tb2947 v)))
  (forall ((x (tuple21 a (tuple21 b c))) (y e))
  (=> (mem (tuple2 (tuple2 a1 (tuple2 b1 c1)) e1)
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) e1 (t2tb260 x) (t2tb2955 y))
  (t2tb4415 r)) (and (mem14 x u) (mem36 y v)))))))

(declare-fun t2tb4749 ((set (set (tuple21 (tuple21 a (tuple21 b c))
  (tuple21 a d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a (tuple21 b c)) (tuple21 a d))))))
  (sort (set1 (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 d1))))
  (t2tb4749 x))))

(declare-fun tb2t4749 (uni) (set (set (tuple21 (tuple21 a (tuple21 b c))
  (tuple21 a d)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a (tuple21 b c)) (tuple21 a d))))))
  (! (= (tb2t4749 (t2tb4749 i)) i) :pattern ((t2tb4749 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 d1)))) j)
     (= (t2tb4749 (tb2t4749 j)) j)) :pattern ((t2tb4749 (tb2t4749 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a (tuple21 b c)))) (v (set (tuple21 a d)))
  (r (set (tuple21 (tuple21 a (tuple21 b c)) (tuple21 a d)))))
  (= (mem (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 d1)))
  (t2tb4417 r)
  (relation (tuple2 a1 d1) (tuple2 a1 (tuple2 b1 c1)) (t2tb261 u)
  (t2tb903 v)))
  (forall ((x (tuple21 a (tuple21 b c))) (y (tuple21 a d)))
  (=> (mem (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 d1))
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 d1) (t2tb260 x) (t2tb904 y))
  (t2tb4417 r)) (and (mem14 x u) (mem32 y v)))))))

(declare-fun t2tb4750 ((set (set (tuple21 (tuple21 a (tuple21 b c))
  (set (tuple21 b d)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a (tuple21 b c)) (set (tuple21 b
  d))))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) (set1 (tuple2 b1 d1)))))
  (t2tb4750 x))))

(declare-fun tb2t4750 (uni) (set (set (tuple21 (tuple21 a (tuple21 b c))
  (set (tuple21 b d))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a (tuple21 b c)) (set (tuple21 b
  d))))))) (! (= (tb2t4750 (t2tb4750 i)) i) :pattern ((t2tb4750 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) (set1 (tuple2 b1 d1)))))
     j) (= (t2tb4750 (tb2t4750 j)) j)) :pattern ((t2tb4750 (tb2t4750 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a (tuple21 b c)))) (v (set (set (tuple21 b d))))
  (r (set (tuple21 (tuple21 a (tuple21 b c)) (set (tuple21 b d))))))
  (= (mem (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) (set1 (tuple2 b1 d1))))
  (t2tb4419 r)
  (relation (set1 (tuple2 b1 d1)) (tuple2 a1 (tuple2 b1 c1)) (t2tb261 u)
  (t2tb906 v)))
  (forall ((x (tuple21 a (tuple21 b c))) (y (set (tuple21 b d))))
  (=> (mem (tuple2 (tuple2 a1 (tuple2 b1 c1)) (set1 (tuple2 b1 d1)))
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) (set1 (tuple2 b1 d1)) (t2tb260 x)
  (t2tb687 y)) (t2tb4419 r)) (and (mem14 x u) (mem33 y v)))))))

(declare-fun t2tb4751 ((set (set (tuple21 (tuple21 a (tuple21 b c))
  (tuple21 b d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a (tuple21 b c)) (tuple21 b d))))))
  (sort (set1 (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 b1 d1))))
  (t2tb4751 x))))

(declare-fun tb2t4751 (uni) (set (set (tuple21 (tuple21 a (tuple21 b c))
  (tuple21 b d)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a (tuple21 b c)) (tuple21 b d))))))
  (! (= (tb2t4751 (t2tb4751 i)) i) :pattern ((t2tb4751 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 b1 d1)))) j)
     (= (t2tb4751 (tb2t4751 j)) j)) :pattern ((t2tb4751 (tb2t4751 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a (tuple21 b c)))) (v (set (tuple21 b d)))
  (r (set (tuple21 (tuple21 a (tuple21 b c)) (tuple21 b d)))))
  (= (mem (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 b1 d1)))
  (t2tb4421 r)
  (relation (tuple2 b1 d1) (tuple2 a1 (tuple2 b1 c1)) (t2tb261 u)
  (t2tb687 v)))
  (forall ((x (tuple21 a (tuple21 b c))) (y (tuple21 b d)))
  (=> (mem (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 b1 d1))
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 b1 d1) (t2tb260 x) (t2tb692 y))
  (t2tb4421 r)) (and (mem14 x u) (mem23 y v)))))))

(declare-fun t2tb4752 ((set (set (tuple21 (tuple21 a (tuple21 b c))
  d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a (tuple21 b c)) d))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) d1))) (t2tb4752 x))))

(declare-fun tb2t4752 (uni) (set (set (tuple21 (tuple21 a (tuple21 b c))
  d))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a (tuple21 b c)) d)))))
  (! (= (tb2t4752 (t2tb4752 i)) i) :pattern ((t2tb4752 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) d1))) j)
     (= (t2tb4752 (tb2t4752 j)) j)) :pattern ((t2tb4752 (tb2t4752 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a (tuple21 b c)))) (v (set d))
  (r (set (tuple21 (tuple21 a (tuple21 b c)) d))))
  (= (mem (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) d1)) (t2tb4424 r)
  (relation d1 (tuple2 a1 (tuple2 b1 c1)) (t2tb261 u) (t2tb690 v)))
  (forall ((x (tuple21 a (tuple21 b c))) (y d))
  (=> (mem (tuple2 (tuple2 a1 (tuple2 b1 c1)) d1)
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) d1 (t2tb260 x) (t2tb694 y))
  (t2tb4424 r)) (and (mem14 x u) (mem20 y v)))))))

(declare-fun t2tb4753 ((set (set (tuple21 (tuple21 a (tuple21 b c))
  (tuple21 a (tuple21 b c)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a (tuple21 b c)) (tuple21 a
  (tuple21 b c))))))) (sort
  (set1
  (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 (tuple2 b1 c1)))))
  (t2tb4753 x))))

(declare-fun tb2t4753 (uni) (set (set (tuple21 (tuple21 a (tuple21 b c))
  (tuple21 a (tuple21 b c))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a (tuple21 b c)) (tuple21 a
  (tuple21 b c)))))))
  (! (= (tb2t4753 (t2tb4753 i)) i) :pattern ((t2tb4753 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 (tuple2 b1 c1)))))
     j) (= (t2tb4753 (tb2t4753 j)) j)) :pattern ((t2tb4753 (tb2t4753 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a (tuple21 b c)))) (v (set (tuple21 a (tuple21 b
  c)))) (r (set (tuple21 (tuple21 a (tuple21 b c)) (tuple21 a (tuple21 b
  c))))))
  (= (mem
  (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 (tuple2 b1 c1))))
  (t2tb4425 r)
  (relation (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 (tuple2 b1 c1)) (t2tb261 u)
  (t2tb261 v)))
  (forall ((x (tuple21 a (tuple21 b c))) (y (tuple21 a (tuple21 b c))))
  (=> (mem (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 (tuple2 b1 c1)) (t2tb260 x)
  (t2tb260 y)) (t2tb4425 r)) (and (mem14 x u) (mem14 y v)))))))

(declare-fun t2tb4754 ((set (set (tuple21 (tuple21 a (tuple21 b c))
  (set (tuple21 a c)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a (tuple21 b c)) (set (tuple21 a
  c))))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) (set1 (tuple2 a1 c1)))))
  (t2tb4754 x))))

(declare-fun tb2t4754 (uni) (set (set (tuple21 (tuple21 a (tuple21 b c))
  (set (tuple21 a c))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a (tuple21 b c)) (set (tuple21 a
  c))))))) (! (= (tb2t4754 (t2tb4754 i)) i) :pattern ((t2tb4754 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) (set1 (tuple2 a1 c1)))))
     j) (= (t2tb4754 (tb2t4754 j)) j)) :pattern ((t2tb4754 (tb2t4754 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a (tuple21 b c)))) (v (set (set (tuple21 a c))))
  (r (set (tuple21 (tuple21 a (tuple21 b c)) (set (tuple21 a c))))))
  (= (mem (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) (set1 (tuple2 a1 c1))))
  (t2tb4427 r)
  (relation (set1 (tuple2 a1 c1)) (tuple2 a1 (tuple2 b1 c1)) (t2tb261 u)
  (t2tb128 v)))
  (forall ((x (tuple21 a (tuple21 b c))) (y (set (tuple21 a c))))
  (=> (mem (tuple2 (tuple2 a1 (tuple2 b1 c1)) (set1 (tuple2 a1 c1)))
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) (set1 (tuple2 a1 c1)) (t2tb260 x)
  (t2tb129 y)) (t2tb4427 r)) (and (mem14 x u) (mem11 y v)))))))

(declare-fun t2tb4755 ((set (set (tuple21 (tuple21 a (tuple21 b c))
  (tuple21 a c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a (tuple21 b c)) (tuple21 a c))))))
  (sort (set1 (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 c1))))
  (t2tb4755 x))))

(declare-fun tb2t4755 (uni) (set (set (tuple21 (tuple21 a (tuple21 b c))
  (tuple21 a c)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a (tuple21 b c)) (tuple21 a c))))))
  (! (= (tb2t4755 (t2tb4755 i)) i) :pattern ((t2tb4755 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 c1)))) j)
     (= (t2tb4755 (tb2t4755 j)) j)) :pattern ((t2tb4755 (tb2t4755 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a (tuple21 b c)))) (v (set (tuple21 a c)))
  (r (set (tuple21 (tuple21 a (tuple21 b c)) (tuple21 a c)))))
  (= (mem (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 c1)))
  (t2tb4429 r)
  (relation (tuple2 a1 c1) (tuple2 a1 (tuple2 b1 c1)) (t2tb261 u)
  (t2tb129 v)))
  (forall ((x (tuple21 a (tuple21 b c))) (y (tuple21 a c)))
  (=> (mem (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 c1))
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 c1) (t2tb260 x) (t2tb133 y))
  (t2tb4429 r)) (and (mem14 x u) (mem10 y v)))))))

(declare-fun t2tb4756 ((set (set (tuple21 (tuple21 a (tuple21 b c))
  c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a (tuple21 b c)) c))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) c1))) (t2tb4756 x))))

(declare-fun tb2t4756 (uni) (set (set (tuple21 (tuple21 a (tuple21 b c))
  c))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a (tuple21 b c)) c)))))
  (! (= (tb2t4756 (t2tb4756 i)) i) :pattern ((t2tb4756 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) c1))) j)
     (= (t2tb4756 (tb2t4756 j)) j)) :pattern ((t2tb4756 (tb2t4756 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a (tuple21 b c)))) (v (set c))
  (r (set (tuple21 (tuple21 a (tuple21 b c)) c))))
  (= (mem (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) c1)) (t2tb4431 r)
  (relation c1 (tuple2 a1 (tuple2 b1 c1)) (t2tb261 u) (t2tb132 v)))
  (forall ((x (tuple21 a (tuple21 b c))) (y c))
  (=> (mem (tuple2 (tuple2 a1 (tuple2 b1 c1)) c1)
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) c1 (t2tb260 x) (t2tb135 y))
  (t2tb4431 r)) (and (mem14 x u) (mem7 y v)))))))

(declare-fun t2tb4757 ((set (set (tuple21 (tuple21 a (tuple21 b c))
  (set (tuple21 a b)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a (tuple21 b c)) (set (tuple21 a
  b))))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) (set1 (tuple2 a1 b1)))))
  (t2tb4757 x))))

(declare-fun tb2t4757 (uni) (set (set (tuple21 (tuple21 a (tuple21 b c))
  (set (tuple21 a b))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a (tuple21 b c)) (set (tuple21 a
  b))))))) (! (= (tb2t4757 (t2tb4757 i)) i) :pattern ((t2tb4757 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) (set1 (tuple2 a1 b1)))))
     j) (= (t2tb4757 (tb2t4757 j)) j)) :pattern ((t2tb4757 (tb2t4757 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a (tuple21 b c)))) (v (set (set (tuple21 a b))))
  (r (set (tuple21 (tuple21 a (tuple21 b c)) (set (tuple21 a b))))))
  (= (mem (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) (set1 (tuple2 a1 b1))))
  (t2tb4433 r)
  (relation (set1 (tuple2 a1 b1)) (tuple2 a1 (tuple2 b1 c1)) (t2tb261 u)
  (t2tb10 v)))
  (forall ((x (tuple21 a (tuple21 b c))) (y (set (tuple21 a b))))
  (=> (mem (tuple2 (tuple2 a1 (tuple2 b1 c1)) (set1 (tuple2 a1 b1)))
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) (set1 (tuple2 a1 b1)) (t2tb260 x)
  (t2tb11 y)) (t2tb4433 r)) (and (mem14 x u) (mem4 y v)))))))

(declare-fun t2tb4758 ((set (set (tuple21 (tuple21 a (tuple21 b c))
  (tuple21 a b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a (tuple21 b c)) (tuple21 a b))))))
  (sort (set1 (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 b1))))
  (t2tb4758 x))))

(declare-fun tb2t4758 (uni) (set (set (tuple21 (tuple21 a (tuple21 b c))
  (tuple21 a b)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a (tuple21 b c)) (tuple21 a b))))))
  (! (= (tb2t4758 (t2tb4758 i)) i) :pattern ((t2tb4758 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 b1)))) j)
     (= (t2tb4758 (tb2t4758 j)) j)) :pattern ((t2tb4758 (tb2t4758 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a (tuple21 b c)))) (v (set (tuple21 a b)))
  (r (set (tuple21 (tuple21 a (tuple21 b c)) (tuple21 a b)))))
  (= (mem (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 b1)))
  (t2tb4435 r)
  (relation (tuple2 a1 b1) (tuple2 a1 (tuple2 b1 c1)) (t2tb261 u) (t2tb11 v)))
  (forall ((x (tuple21 a (tuple21 b c))) (y (tuple21 a b)))
  (=> (mem (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 b1))
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 b1) (t2tb260 x) (t2tb13 y))
  (t2tb4435 r)) (and (mem14 x u) (mem3 y v)))))))

(declare-fun t2tb4759 ((set (set (tuple21 (tuple21 a (tuple21 b c))
  b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a (tuple21 b c)) b))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) b1))) (t2tb4759 x))))

(declare-fun tb2t4759 (uni) (set (set (tuple21 (tuple21 a (tuple21 b c))
  b))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a (tuple21 b c)) b)))))
  (! (= (tb2t4759 (t2tb4759 i)) i) :pattern ((t2tb4759 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) b1))) j)
     (= (t2tb4759 (tb2t4759 j)) j)) :pattern ((t2tb4759 (tb2t4759 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a (tuple21 b c)))) (v (set b))
  (r (set (tuple21 (tuple21 a (tuple21 b c)) b))))
  (= (mem (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) b1)) (t2tb4437 r)
  (relation b1 (tuple2 a1 (tuple2 b1 c1)) (t2tb261 u) (t2tb12 v)))
  (forall ((x (tuple21 a (tuple21 b c))) (y b))
  (=> (mem (tuple2 (tuple2 a1 (tuple2 b1 c1)) b1)
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) b1 (t2tb260 x) (t2tb14 y)) (t2tb4437 r))
  (and (mem14 x u) (mem2 y v)))))))

(declare-fun t2tb4760 ((set (set (tuple21 (tuple21 a (tuple21 b c))
  a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a (tuple21 b c)) a))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) a1))) (t2tb4760 x))))

(declare-fun tb2t4760 (uni) (set (set (tuple21 (tuple21 a (tuple21 b c))
  a))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a (tuple21 b c)) a)))))
  (! (= (tb2t4760 (t2tb4760 i)) i) :pattern ((t2tb4760 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) a1))) j)
     (= (t2tb4760 (tb2t4760 j)) j)) :pattern ((t2tb4760 (tb2t4760 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a (tuple21 b c)))) (v (set a))
  (r (set (tuple21 (tuple21 a (tuple21 b c)) a))))
  (= (mem (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) a1)) (t2tb4440 r)
  (relation a1 (tuple2 a1 (tuple2 b1 c1)) (t2tb261 u) (t2tb1 v)))
  (forall ((x (tuple21 a (tuple21 b c))) (y a))
  (=> (mem (tuple2 (tuple2 a1 (tuple2 b1 c1)) a1)
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) a1 (t2tb260 x) (t2tb2 y)) (t2tb4440 r))
  (and (mem14 x u) (mem1 y v)))))))

;; mem_relation
  (assert
  (forall ((b2 ty))
  (forall ((u (set (tuple21 a (tuple21 b c)))) (v uni) (r uni))
  (and
  (=> (mem (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) b2)) r
  (relation b2 (tuple2 a1 (tuple2 b1 c1)) (t2tb261 u) v))
  (forall ((x (tuple21 a (tuple21 b c))) (y uni))
  (=> (mem (tuple2 (tuple2 a1 (tuple2 b1 c1)) b2)
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) b2 (t2tb260 x) y) r)
  (and (mem14 x u) (mem b2 y v)))))
  (=>
  (forall ((x (tuple21 a (tuple21 b c))) (y uni))
  (=> (sort b2 y)
  (=> (mem (tuple2 (tuple2 a1 (tuple2 b1 c1)) b2)
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) b2 (t2tb260 x) y) r)
  (and (mem14 x u) (mem b2 y v))))) (mem
  (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) b2)) r
  (relation b2 (tuple2 a1 (tuple2 b1 c1)) (t2tb261 u) v)))))))

(declare-fun t2tb4761 ((set (set (tuple21 (set (tuple21 a c))
  (tuple21 (tuple21 b c) (tuple21 d e)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a c)) (tuple21 (tuple21 b c)
  (tuple21 d e))))))) (sort
  (set1
  (set1
  (tuple2 (set1 (tuple2 a1 c1)) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)))))
  (t2tb4761 x))))

(declare-fun tb2t4761 (uni) (set (set (tuple21 (set (tuple21 a c))
  (tuple21 (tuple21 b c) (tuple21 d e))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a c)) (tuple21 (tuple21 b c)
  (tuple21 d e)))))))
  (! (= (tb2t4761 (t2tb4761 i)) i) :pattern ((t2tb4761 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (set1
     (tuple2 (set1 (tuple2 a1 c1)) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)))))
     j) (= (t2tb4761 (tb2t4761 j)) j)) :pattern ((t2tb4761 (tb2t4761 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a c)))) (v (set (tuple21 (tuple21 b c)
  (tuple21 d e)))) (r (set (tuple21 (set (tuple21 a c)) (tuple21 (tuple21 b
  c) (tuple21 d e))))))
  (= (mem
  (set1
  (tuple2 (set1 (tuple2 a1 c1)) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1))))
  (t2tb4441 r)
  (relation (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (set1 (tuple2 a1 c1))
  (t2tb128 u) (t2tb4102 v)))
  (forall ((x (set (tuple21 a c))) (y (tuple21 (tuple21 b c) (tuple21 d e))))
  (=> (mem
  (tuple2 (set1 (tuple2 a1 c1)) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)))
  (Tuple2 (set1 (tuple2 a1 c1)) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1))
  (t2tb129 x) (t2tb4104 y)) (t2tb4441 r)) (and (mem11 x u) (mem49 y v)))))))

(declare-fun t2tb4762 ((set (set (tuple21 (set (tuple21 a c)) (tuple21 a
  (tuple21 d e)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a c)) (tuple21 a (tuple21 d
  e))))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 (tuple2 d1 e1)))))
  (t2tb4762 x))))

(declare-fun tb2t4762 (uni) (set (set (tuple21 (set (tuple21 a c)) (tuple21 a
  (tuple21 d e))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a c)) (tuple21 a (tuple21 d
  e))))))) (! (= (tb2t4762 (t2tb4762 i)) i) :pattern ((t2tb4762 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 (tuple2 d1 e1)))))
     j) (= (t2tb4762 (tb2t4762 j)) j)) :pattern ((t2tb4762 (tb2t4762 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a c)))) (v (set (tuple21 a (tuple21 d e))))
  (r (set (tuple21 (set (tuple21 a c)) (tuple21 a (tuple21 d e))))))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 (tuple2 d1 e1))))
  (t2tb4443 r)
  (relation (tuple2 a1 (tuple2 d1 e1)) (set1 (tuple2 a1 c1)) (t2tb128 u)
  (t2tb4103 v)))
  (forall ((x (set (tuple21 a c))) (y (tuple21 a (tuple21 d e))))
  (=> (mem (tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 (tuple2 d1 e1)))
  (Tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 (tuple2 d1 e1)) (t2tb129 x)
  (t2tb4105 y)) (t2tb4443 r)) (and (mem11 x u) (mem48 y v)))))))

(declare-fun t2tb4763 ((set (set (tuple21 (set (tuple21 a c)) (set (tuple21 c
  e)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a c)) (set (tuple21 c e)))))))
  (sort (set1 (set1 (tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 c1 e1)))))
  (t2tb4763 x))))

(declare-fun tb2t4763 (uni) (set (set (tuple21 (set (tuple21 a c))
  (set (tuple21 c e))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a c)) (set (tuple21 c e)))))))
  (! (= (tb2t4763 (t2tb4763 i)) i) :pattern ((t2tb4763 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 c1 e1))))) j)
     (= (t2tb4763 (tb2t4763 j)) j)) :pattern ((t2tb4763 (tb2t4763 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a c)))) (v (set (set (tuple21 c e))))
  (r (set (tuple21 (set (tuple21 a c)) (set (tuple21 c e))))))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 c1 e1))))
  (t2tb4445 r)
  (relation (set1 (tuple2 c1 e1)) (set1 (tuple2 a1 c1)) (t2tb128 u)
  (t2tb3854 v)))
  (forall ((x (set (tuple21 a c))) (y (set (tuple21 c e))))
  (=> (mem (tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 c1 e1)))
  (Tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 c1 e1)) (t2tb129 x)
  (t2tb3478 y)) (t2tb4445 r)) (and (mem11 x u) (mem47 y v)))))))

(declare-fun t2tb4764 ((set (set (tuple21 (set (tuple21 a c)) (tuple21 c
  e))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a c)) (tuple21 c e)))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 a1 c1)) (tuple2 c1 e1)))) (t2tb4764 x))))

(declare-fun tb2t4764 (uni) (set (set (tuple21 (set (tuple21 a c)) (tuple21 c
  e)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a c)) (tuple21 c e))))))
  (! (= (tb2t4764 (t2tb4764 i)) i) :pattern ((t2tb4764 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 a1 c1)) (tuple2 c1 e1)))) j)
     (= (t2tb4764 (tb2t4764 j)) j)) :pattern ((t2tb4764 (tb2t4764 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a c)))) (v (set (tuple21 c e)))
  (r (set (tuple21 (set (tuple21 a c)) (tuple21 c e)))))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 c1)) (tuple2 c1 e1))) (t2tb4447 r)
  (relation (tuple2 c1 e1) (set1 (tuple2 a1 c1)) (t2tb128 u) (t2tb3478 v)))
  (forall ((x (set (tuple21 a c))) (y (tuple21 c e)))
  (=> (mem (tuple2 (set1 (tuple2 a1 c1)) (tuple2 c1 e1))
  (Tuple2 (set1 (tuple2 a1 c1)) (tuple2 c1 e1) (t2tb129 x) (t2tb3479 y))
  (t2tb4447 r)) (and (mem11 x u) (mem46 y v)))))))

(declare-fun t2tb4765 ((set (set (tuple21 (set (tuple21 a c)) (tuple21 a
  e))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a c)) (tuple21 a e)))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 e1)))) (t2tb4765 x))))

(declare-fun tb2t4765 (uni) (set (set (tuple21 (set (tuple21 a c)) (tuple21 a
  e)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a c)) (tuple21 a e))))))
  (! (= (tb2t4765 (t2tb4765 i)) i) :pattern ((t2tb4765 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 e1)))) j)
     (= (t2tb4765 (tb2t4765 j)) j)) :pattern ((t2tb4765 (tb2t4765 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a c)))) (v (set (tuple21 a e)))
  (r (set (tuple21 (set (tuple21 a c)) (tuple21 a e)))))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 e1))) (t2tb4449 r)
  (relation (tuple2 a1 e1) (set1 (tuple2 a1 c1)) (t2tb128 u) (t2tb2943 v)))
  (forall ((x (set (tuple21 a c))) (y (tuple21 a e)))
  (=> (mem (tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 e1))
  (Tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 e1) (t2tb129 x) (t2tb2949 y))
  (t2tb4449 r)) (and (mem11 x u) (mem44 y v)))))))

(declare-fun t2tb4766 ((set (set (tuple21 (set (tuple21 a c)) e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a c)) e))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 a1 c1)) e1))) (t2tb4766 x))))

(declare-fun tb2t4766 (uni) (set (set (tuple21 (set (tuple21 a c)) e))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a c)) e)))))
  (! (= (tb2t4766 (t2tb4766 i)) i) :pattern ((t2tb4766 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 a1 c1)) e1))) j)
     (= (t2tb4766 (tb2t4766 j)) j)) :pattern ((t2tb4766 (tb2t4766 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a c)))) (v (set e))
  (r (set (tuple21 (set (tuple21 a c)) e))))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 c1)) e1)) (t2tb4451 r)
  (relation e1 (set1 (tuple2 a1 c1)) (t2tb128 u) (t2tb2947 v)))
  (forall ((x (set (tuple21 a c))) (y e))
  (=> (mem (tuple2 (set1 (tuple2 a1 c1)) e1)
  (Tuple2 (set1 (tuple2 a1 c1)) e1 (t2tb129 x) (t2tb2955 y)) (t2tb4451 r))
  (and (mem11 x u) (mem36 y v)))))))

(declare-fun t2tb4767 ((set (set (tuple21 (set (tuple21 a c)) (tuple21 a
  d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a c)) (tuple21 a d)))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 d1)))) (t2tb4767 x))))

(declare-fun tb2t4767 (uni) (set (set (tuple21 (set (tuple21 a c)) (tuple21 a
  d)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a c)) (tuple21 a d))))))
  (! (= (tb2t4767 (t2tb4767 i)) i) :pattern ((t2tb4767 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 d1)))) j)
     (= (t2tb4767 (tb2t4767 j)) j)) :pattern ((t2tb4767 (tb2t4767 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a c)))) (v (set (tuple21 a d)))
  (r (set (tuple21 (set (tuple21 a c)) (tuple21 a d)))))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 d1))) (t2tb4454 r)
  (relation (tuple2 a1 d1) (set1 (tuple2 a1 c1)) (t2tb128 u) (t2tb903 v)))
  (forall ((x (set (tuple21 a c))) (y (tuple21 a d)))
  (=> (mem (tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 d1))
  (Tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 d1) (t2tb129 x) (t2tb904 y))
  (t2tb4454 r)) (and (mem11 x u) (mem32 y v)))))))

(declare-fun t2tb4768 ((set (set (tuple21 (set (tuple21 a c)) (set (tuple21 b
  d)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a c)) (set (tuple21 b d)))))))
  (sort (set1 (set1 (tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 b1 d1)))))
  (t2tb4768 x))))

(declare-fun tb2t4768 (uni) (set (set (tuple21 (set (tuple21 a c))
  (set (tuple21 b d))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a c)) (set (tuple21 b d)))))))
  (! (= (tb2t4768 (t2tb4768 i)) i) :pattern ((t2tb4768 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 b1 d1))))) j)
     (= (t2tb4768 (tb2t4768 j)) j)) :pattern ((t2tb4768 (tb2t4768 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a c)))) (v (set (set (tuple21 b d))))
  (r (set (tuple21 (set (tuple21 a c)) (set (tuple21 b d))))))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 b1 d1))))
  (t2tb4455 r)
  (relation (set1 (tuple2 b1 d1)) (set1 (tuple2 a1 c1)) (t2tb128 u)
  (t2tb906 v)))
  (forall ((x (set (tuple21 a c))) (y (set (tuple21 b d))))
  (=> (mem (tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 b1 d1)))
  (Tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 b1 d1)) (t2tb129 x)
  (t2tb687 y)) (t2tb4455 r)) (and (mem11 x u) (mem33 y v)))))))

(declare-fun t2tb4769 ((set (set (tuple21 (set (tuple21 a c)) (tuple21 b
  d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a c)) (tuple21 b d)))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 a1 c1)) (tuple2 b1 d1)))) (t2tb4769 x))))

(declare-fun tb2t4769 (uni) (set (set (tuple21 (set (tuple21 a c)) (tuple21 b
  d)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a c)) (tuple21 b d))))))
  (! (= (tb2t4769 (t2tb4769 i)) i) :pattern ((t2tb4769 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 a1 c1)) (tuple2 b1 d1)))) j)
     (= (t2tb4769 (tb2t4769 j)) j)) :pattern ((t2tb4769 (tb2t4769 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a c)))) (v (set (tuple21 b d)))
  (r (set (tuple21 (set (tuple21 a c)) (tuple21 b d)))))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 c1)) (tuple2 b1 d1))) (t2tb4457 r)
  (relation (tuple2 b1 d1) (set1 (tuple2 a1 c1)) (t2tb128 u) (t2tb687 v)))
  (forall ((x (set (tuple21 a c))) (y (tuple21 b d)))
  (=> (mem (tuple2 (set1 (tuple2 a1 c1)) (tuple2 b1 d1))
  (Tuple2 (set1 (tuple2 a1 c1)) (tuple2 b1 d1) (t2tb129 x) (t2tb692 y))
  (t2tb4457 r)) (and (mem11 x u) (mem23 y v)))))))

(declare-fun t2tb4770 ((set (set (tuple21 (set (tuple21 a c)) d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a c)) d))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 a1 c1)) d1))) (t2tb4770 x))))

(declare-fun tb2t4770 (uni) (set (set (tuple21 (set (tuple21 a c)) d))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a c)) d)))))
  (! (= (tb2t4770 (t2tb4770 i)) i) :pattern ((t2tb4770 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 a1 c1)) d1))) j)
     (= (t2tb4770 (tb2t4770 j)) j)) :pattern ((t2tb4770 (tb2t4770 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a c)))) (v (set d))
  (r (set (tuple21 (set (tuple21 a c)) d))))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 c1)) d1)) (t2tb4459 r)
  (relation d1 (set1 (tuple2 a1 c1)) (t2tb128 u) (t2tb690 v)))
  (forall ((x (set (tuple21 a c))) (y d))
  (=> (mem (tuple2 (set1 (tuple2 a1 c1)) d1)
  (Tuple2 (set1 (tuple2 a1 c1)) d1 (t2tb129 x) (t2tb694 y)) (t2tb4459 r))
  (and (mem11 x u) (mem20 y v)))))))

(declare-fun t2tb4771 ((set (set (tuple21 (set (tuple21 a c)) (tuple21 a
  (tuple21 b c)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a c)) (tuple21 a (tuple21 b
  c))))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 (tuple2 b1 c1)))))
  (t2tb4771 x))))

(declare-fun tb2t4771 (uni) (set (set (tuple21 (set (tuple21 a c)) (tuple21 a
  (tuple21 b c))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a c)) (tuple21 a (tuple21 b
  c))))))) (! (= (tb2t4771 (t2tb4771 i)) i) :pattern ((t2tb4771 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 (tuple2 b1 c1)))))
     j) (= (t2tb4771 (tb2t4771 j)) j)) :pattern ((t2tb4771 (tb2t4771 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a c)))) (v (set (tuple21 a (tuple21 b c))))
  (r (set (tuple21 (set (tuple21 a c)) (tuple21 a (tuple21 b c))))))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 (tuple2 b1 c1))))
  (t2tb4461 r)
  (relation (tuple2 a1 (tuple2 b1 c1)) (set1 (tuple2 a1 c1)) (t2tb128 u)
  (t2tb261 v)))
  (forall ((x (set (tuple21 a c))) (y (tuple21 a (tuple21 b c))))
  (=> (mem (tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 (tuple2 b1 c1)) (t2tb129 x)
  (t2tb260 y)) (t2tb4461 r)) (and (mem11 x u) (mem14 y v)))))))

(declare-fun t2tb4772 ((set (set (tuple21 (set (tuple21 a c)) (set (tuple21 a
  c)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a c)) (set (tuple21 a c)))))))
  (sort (set1 (set1 (tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 a1 c1)))))
  (t2tb4772 x))))

(declare-fun tb2t4772 (uni) (set (set (tuple21 (set (tuple21 a c))
  (set (tuple21 a c))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a c)) (set (tuple21 a c)))))))
  (! (= (tb2t4772 (t2tb4772 i)) i) :pattern ((t2tb4772 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 a1 c1))))) j)
     (= (t2tb4772 (tb2t4772 j)) j)) :pattern ((t2tb4772 (tb2t4772 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a c)))) (v (set (set (tuple21 a c))))
  (r (set (tuple21 (set (tuple21 a c)) (set (tuple21 a c))))))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 a1 c1))))
  (t2tb4463 r)
  (relation (set1 (tuple2 a1 c1)) (set1 (tuple2 a1 c1)) (t2tb128 u)
  (t2tb128 v)))
  (forall ((x (set (tuple21 a c))) (y (set (tuple21 a c))))
  (=> (mem (tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 a1 c1)))
  (Tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 a1 c1)) (t2tb129 x)
  (t2tb129 y)) (t2tb4463 r)) (and (mem11 x u) (mem11 y v)))))))

(declare-fun t2tb4773 ((set (set (tuple21 (set (tuple21 a c)) (tuple21 a
  c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a c)) (tuple21 a c)))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 c1)))) (t2tb4773 x))))

(declare-fun tb2t4773 (uni) (set (set (tuple21 (set (tuple21 a c)) (tuple21 a
  c)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a c)) (tuple21 a c))))))
  (! (= (tb2t4773 (t2tb4773 i)) i) :pattern ((t2tb4773 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 c1)))) j)
     (= (t2tb4773 (tb2t4773 j)) j)) :pattern ((t2tb4773 (tb2t4773 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a c)))) (v (set (tuple21 a c)))
  (r (set (tuple21 (set (tuple21 a c)) (tuple21 a c)))))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 c1))) (t2tb4465 r)
  (relation (tuple2 a1 c1) (set1 (tuple2 a1 c1)) (t2tb128 u) (t2tb129 v)))
  (forall ((x (set (tuple21 a c))) (y (tuple21 a c)))
  (=> (mem (tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 c1))
  (Tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 c1) (t2tb129 x) (t2tb133 y))
  (t2tb4465 r)) (and (mem11 x u) (mem10 y v)))))))

(declare-fun t2tb4774 ((set (set (tuple21 (set (tuple21 a c)) c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a c)) c))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 a1 c1)) c1))) (t2tb4774 x))))

(declare-fun tb2t4774 (uni) (set (set (tuple21 (set (tuple21 a c)) c))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a c)) c)))))
  (! (= (tb2t4774 (t2tb4774 i)) i) :pattern ((t2tb4774 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 a1 c1)) c1))) j)
     (= (t2tb4774 (tb2t4774 j)) j)) :pattern ((t2tb4774 (tb2t4774 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a c)))) (v (set c))
  (r (set (tuple21 (set (tuple21 a c)) c))))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 c1)) c1)) (t2tb4467 r)
  (relation c1 (set1 (tuple2 a1 c1)) (t2tb128 u) (t2tb132 v)))
  (forall ((x (set (tuple21 a c))) (y c))
  (=> (mem (tuple2 (set1 (tuple2 a1 c1)) c1)
  (Tuple2 (set1 (tuple2 a1 c1)) c1 (t2tb129 x) (t2tb135 y)) (t2tb4467 r))
  (and (mem11 x u) (mem7 y v)))))))

(declare-fun t2tb4775 ((set (set (tuple21 (set (tuple21 a c)) (set (tuple21 a
  b)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a c)) (set (tuple21 a b)))))))
  (sort (set1 (set1 (tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 a1 b1)))))
  (t2tb4775 x))))

(declare-fun tb2t4775 (uni) (set (set (tuple21 (set (tuple21 a c))
  (set (tuple21 a b))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a c)) (set (tuple21 a b)))))))
  (! (= (tb2t4775 (t2tb4775 i)) i) :pattern ((t2tb4775 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 a1 b1))))) j)
     (= (t2tb4775 (tb2t4775 j)) j)) :pattern ((t2tb4775 (tb2t4775 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a c)))) (v (set (set (tuple21 a b))))
  (r (set (tuple21 (set (tuple21 a c)) (set (tuple21 a b))))))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 a1 b1))))
  (t2tb4470 r)
  (relation (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 c1)) (t2tb128 u)
  (t2tb10 v)))
  (forall ((x (set (tuple21 a c))) (y (set (tuple21 a b))))
  (=> (mem (tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 a1 b1)))
  (Tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 a1 b1)) (t2tb129 x) (t2tb11 y))
  (t2tb4470 r)) (and (mem11 x u) (mem4 y v)))))))

(declare-fun t2tb4776 ((set (set (tuple21 (set (tuple21 a c)) (tuple21 a
  b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a c)) (tuple21 a b)))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 b1)))) (t2tb4776 x))))

(declare-fun tb2t4776 (uni) (set (set (tuple21 (set (tuple21 a c)) (tuple21 a
  b)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a c)) (tuple21 a b))))))
  (! (= (tb2t4776 (t2tb4776 i)) i) :pattern ((t2tb4776 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 b1)))) j)
     (= (t2tb4776 (tb2t4776 j)) j)) :pattern ((t2tb4776 (tb2t4776 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a c)))) (v (set (tuple21 a b)))
  (r (set (tuple21 (set (tuple21 a c)) (tuple21 a b)))))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 b1))) (t2tb4471 r)
  (relation (tuple2 a1 b1) (set1 (tuple2 a1 c1)) (t2tb128 u) (t2tb11 v)))
  (forall ((x (set (tuple21 a c))) (y (tuple21 a b)))
  (=> (mem (tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 b1))
  (Tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 b1) (t2tb129 x) (t2tb13 y))
  (t2tb4471 r)) (and (mem11 x u) (mem3 y v)))))))

(declare-fun t2tb4777 ((set (set (tuple21 (set (tuple21 a c)) b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a c)) b))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 a1 c1)) b1))) (t2tb4777 x))))

(declare-fun tb2t4777 (uni) (set (set (tuple21 (set (tuple21 a c)) b))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a c)) b)))))
  (! (= (tb2t4777 (t2tb4777 i)) i) :pattern ((t2tb4777 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 a1 c1)) b1))) j)
     (= (t2tb4777 (tb2t4777 j)) j)) :pattern ((t2tb4777 (tb2t4777 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a c)))) (v (set b))
  (r (set (tuple21 (set (tuple21 a c)) b))))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 c1)) b1)) (t2tb4473 r)
  (relation b1 (set1 (tuple2 a1 c1)) (t2tb128 u) (t2tb12 v)))
  (forall ((x (set (tuple21 a c))) (y b))
  (=> (mem (tuple2 (set1 (tuple2 a1 c1)) b1)
  (Tuple2 (set1 (tuple2 a1 c1)) b1 (t2tb129 x) (t2tb14 y)) (t2tb4473 r))
  (and (mem11 x u) (mem2 y v)))))))

(declare-fun t2tb4778 ((set (set (tuple21 (set (tuple21 a c)) a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a c)) a))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 a1 c1)) a1))) (t2tb4778 x))))

(declare-fun tb2t4778 (uni) (set (set (tuple21 (set (tuple21 a c)) a))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a c)) a)))))
  (! (= (tb2t4778 (t2tb4778 i)) i) :pattern ((t2tb4778 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 a1 c1)) a1))) j)
     (= (t2tb4778 (tb2t4778 j)) j)) :pattern ((t2tb4778 (tb2t4778 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a c)))) (v (set a))
  (r (set (tuple21 (set (tuple21 a c)) a))))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 c1)) a1)) (t2tb4475 r)
  (relation a1 (set1 (tuple2 a1 c1)) (t2tb128 u) (t2tb1 v)))
  (forall ((x (set (tuple21 a c))) (y a))
  (=> (mem (tuple2 (set1 (tuple2 a1 c1)) a1)
  (Tuple2 (set1 (tuple2 a1 c1)) a1 (t2tb129 x) (t2tb2 y)) (t2tb4475 r))
  (and (mem11 x u) (mem1 y v)))))))

;; mem_relation
  (assert
  (forall ((b2 ty))
  (forall ((u (set (set (tuple21 a c)))) (v uni) (r uni))
  (and
  (=> (mem (set1 (tuple2 (set1 (tuple2 a1 c1)) b2)) r
  (relation b2 (set1 (tuple2 a1 c1)) (t2tb128 u) v))
  (forall ((x (set (tuple21 a c))) (y uni))
  (=> (mem (tuple2 (set1 (tuple2 a1 c1)) b2)
  (Tuple2 (set1 (tuple2 a1 c1)) b2 (t2tb129 x) y) r)
  (and (mem11 x u) (mem b2 y v)))))
  (=>
  (forall ((x (set (tuple21 a c))) (y uni))
  (=> (sort b2 y)
  (=> (mem (tuple2 (set1 (tuple2 a1 c1)) b2)
  (Tuple2 (set1 (tuple2 a1 c1)) b2 (t2tb129 x) y) r)
  (and (mem11 x u) (mem b2 y v))))) (mem
  (set1 (tuple2 (set1 (tuple2 a1 c1)) b2)) r
  (relation b2 (set1 (tuple2 a1 c1)) (t2tb128 u) v)))))))

(declare-fun t2tb4779 ((set (set (tuple21 (tuple21 a c) (tuple21 (tuple21 b
  c) (tuple21 d e)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a c) (tuple21 (tuple21 b c)
  (tuple21 d e))))))) (sort
  (set1
  (set1 (tuple2 (tuple2 a1 c1) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)))))
  (t2tb4779 x))))

(declare-fun tb2t4779 (uni) (set (set (tuple21 (tuple21 a c)
  (tuple21 (tuple21 b c) (tuple21 d e))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a c) (tuple21 (tuple21 b c)
  (tuple21 d e)))))))
  (! (= (tb2t4779 (t2tb4779 i)) i) :pattern ((t2tb4779 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (set1 (tuple2 (tuple2 a1 c1) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)))))
     j) (= (t2tb4779 (tb2t4779 j)) j)) :pattern ((t2tb4779 (tb2t4779 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a c))) (v (set (tuple21 (tuple21 b c) (tuple21 d
  e)))) (r (set (tuple21 (tuple21 a c) (tuple21 (tuple21 b c) (tuple21 d
  e))))))
  (= (mem
  (set1 (tuple2 (tuple2 a1 c1) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1))))
  (t2tb4477 r)
  (relation (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (tuple2 a1 c1) (t2tb129 u)
  (t2tb4102 v)))
  (forall ((x (tuple21 a c)) (y (tuple21 (tuple21 b c) (tuple21 d e))))
  (=> (mem (tuple2 (tuple2 a1 c1) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)))
  (Tuple2 (tuple2 a1 c1) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (t2tb133 x)
  (t2tb4104 y)) (t2tb4477 r)) (and (mem10 x u) (mem49 y v)))))))

(declare-fun t2tb4780 ((set (set (tuple21 (tuple21 a c) (tuple21 a (tuple21 d
  e)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a c) (tuple21 a (tuple21 d e)))))))
  (sort (set1 (set1 (tuple2 (tuple2 a1 c1) (tuple2 a1 (tuple2 d1 e1)))))
  (t2tb4780 x))))

(declare-fun tb2t4780 (uni) (set (set (tuple21 (tuple21 a c) (tuple21 a
  (tuple21 d e))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a c) (tuple21 a (tuple21 d e)))))))
  (! (= (tb2t4780 (t2tb4780 i)) i) :pattern ((t2tb4780 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (tuple2 a1 c1) (tuple2 a1 (tuple2 d1 e1))))) j)
     (= (t2tb4780 (tb2t4780 j)) j)) :pattern ((t2tb4780 (tb2t4780 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a c))) (v (set (tuple21 a (tuple21 d e))))
  (r (set (tuple21 (tuple21 a c) (tuple21 a (tuple21 d e))))))
  (= (mem (set1 (tuple2 (tuple2 a1 c1) (tuple2 a1 (tuple2 d1 e1))))
  (t2tb4479 r)
  (relation (tuple2 a1 (tuple2 d1 e1)) (tuple2 a1 c1) (t2tb129 u)
  (t2tb4103 v)))
  (forall ((x (tuple21 a c)) (y (tuple21 a (tuple21 d e))))
  (=> (mem (tuple2 (tuple2 a1 c1) (tuple2 a1 (tuple2 d1 e1)))
  (Tuple2 (tuple2 a1 c1) (tuple2 a1 (tuple2 d1 e1)) (t2tb133 x) (t2tb4105 y))
  (t2tb4479 r)) (and (mem10 x u) (mem48 y v)))))))

(declare-fun t2tb4781 ((set (set (tuple21 (tuple21 a c) (set (tuple21 c
  e)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a c) (set (tuple21 c e))))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 c1) (set1 (tuple2 c1 e1))))) (t2tb4781 x))))

(declare-fun tb2t4781 (uni) (set (set (tuple21 (tuple21 a c) (set (tuple21 c
  e))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a c) (set (tuple21 c e)))))))
  (! (= (tb2t4781 (t2tb4781 i)) i) :pattern ((t2tb4781 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 c1) (set1 (tuple2 c1 e1))))) j)
     (= (t2tb4781 (tb2t4781 j)) j)) :pattern ((t2tb4781 (tb2t4781 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a c))) (v (set (set (tuple21 c e))))
  (r (set (tuple21 (tuple21 a c) (set (tuple21 c e))))))
  (= (mem (set1 (tuple2 (tuple2 a1 c1) (set1 (tuple2 c1 e1)))) (t2tb4481 r)
  (relation (set1 (tuple2 c1 e1)) (tuple2 a1 c1) (t2tb129 u) (t2tb3854 v)))
  (forall ((x (tuple21 a c)) (y (set (tuple21 c e))))
  (=> (mem (tuple2 (tuple2 a1 c1) (set1 (tuple2 c1 e1)))
  (Tuple2 (tuple2 a1 c1) (set1 (tuple2 c1 e1)) (t2tb133 x) (t2tb3478 y))
  (t2tb4481 r)) (and (mem10 x u) (mem47 y v)))))))

(declare-fun t2tb4782 ((set (set (tuple21 (tuple21 a c) (tuple21 c
  e))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a c) (tuple21 c e)))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 c1) (tuple2 c1 e1)))) (t2tb4782 x))))

(declare-fun tb2t4782 (uni) (set (set (tuple21 (tuple21 a c) (tuple21 c
  e)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a c) (tuple21 c e))))))
  (! (= (tb2t4782 (t2tb4782 i)) i) :pattern ((t2tb4782 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 c1) (tuple2 c1 e1)))) j)
     (= (t2tb4782 (tb2t4782 j)) j)) :pattern ((t2tb4782 (tb2t4782 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a c))) (v (set (tuple21 c e)))
  (r (set (tuple21 (tuple21 a c) (tuple21 c e)))))
  (= (mem (set1 (tuple2 (tuple2 a1 c1) (tuple2 c1 e1))) (t2tb4484 r)
  (relation (tuple2 c1 e1) (tuple2 a1 c1) (t2tb129 u) (t2tb3478 v)))
  (forall ((x (tuple21 a c)) (y (tuple21 c e)))
  (=> (mem (tuple2 (tuple2 a1 c1) (tuple2 c1 e1))
  (Tuple2 (tuple2 a1 c1) (tuple2 c1 e1) (t2tb133 x) (t2tb3479 y))
  (t2tb4484 r)) (and (mem10 x u) (mem46 y v)))))))

(declare-fun t2tb4783 ((set (set (tuple21 (tuple21 a c) (tuple21 a
  e))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a c) (tuple21 a e)))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 c1) (tuple2 a1 e1)))) (t2tb4783 x))))

(declare-fun tb2t4783 (uni) (set (set (tuple21 (tuple21 a c) (tuple21 a
  e)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a c) (tuple21 a e))))))
  (! (= (tb2t4783 (t2tb4783 i)) i) :pattern ((t2tb4783 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 c1) (tuple2 a1 e1)))) j)
     (= (t2tb4783 (tb2t4783 j)) j)) :pattern ((t2tb4783 (tb2t4783 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a c))) (v (set (tuple21 a e)))
  (r (set (tuple21 (tuple21 a c) (tuple21 a e)))))
  (= (mem (set1 (tuple2 (tuple2 a1 c1) (tuple2 a1 e1))) (t2tb4485 r)
  (relation (tuple2 a1 e1) (tuple2 a1 c1) (t2tb129 u) (t2tb2943 v)))
  (forall ((x (tuple21 a c)) (y (tuple21 a e)))
  (=> (mem (tuple2 (tuple2 a1 c1) (tuple2 a1 e1))
  (Tuple2 (tuple2 a1 c1) (tuple2 a1 e1) (t2tb133 x) (t2tb2949 y))
  (t2tb4485 r)) (and (mem10 x u) (mem44 y v)))))))

(declare-fun t2tb4784 ((set (set (tuple21 (tuple21 a c) e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a c) e))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 c1) e1))) (t2tb4784 x))))

(declare-fun tb2t4784 (uni) (set (set (tuple21 (tuple21 a c) e))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a c) e)))))
  (! (= (tb2t4784 (t2tb4784 i)) i) :pattern ((t2tb4784 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 c1) e1))) j)
     (= (t2tb4784 (tb2t4784 j)) j)) :pattern ((t2tb4784 (tb2t4784 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a c))) (v (set e)) (r (set (tuple21 (tuple21 a c)
  e))))
  (= (mem (set1 (tuple2 (tuple2 a1 c1) e1)) (t2tb3925 r)
  (relation e1 (tuple2 a1 c1) (t2tb129 u) (t2tb2947 v)))
  (forall ((x (tuple21 a c)) (y e))
  (=> (mem (tuple2 (tuple2 a1 c1) e1)
  (Tuple2 (tuple2 a1 c1) e1 (t2tb133 x) (t2tb2955 y)) (t2tb3925 r))
  (and (mem10 x u) (mem36 y v)))))))

(declare-fun t2tb4785 ((set (set (tuple21 (tuple21 a c) (tuple21 a
  d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a c) (tuple21 a d)))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 c1) (tuple2 a1 d1)))) (t2tb4785 x))))

(declare-fun tb2t4785 (uni) (set (set (tuple21 (tuple21 a c) (tuple21 a
  d)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a c) (tuple21 a d))))))
  (! (= (tb2t4785 (t2tb4785 i)) i) :pattern ((t2tb4785 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 c1) (tuple2 a1 d1)))) j)
     (= (t2tb4785 (tb2t4785 j)) j)) :pattern ((t2tb4785 (tb2t4785 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a c))) (v (set (tuple21 a d)))
  (r (set (tuple21 (tuple21 a c) (tuple21 a d)))))
  (= (mem (set1 (tuple2 (tuple2 a1 c1) (tuple2 a1 d1))) (t2tb4487 r)
  (relation (tuple2 a1 d1) (tuple2 a1 c1) (t2tb129 u) (t2tb903 v)))
  (forall ((x (tuple21 a c)) (y (tuple21 a d)))
  (=> (mem (tuple2 (tuple2 a1 c1) (tuple2 a1 d1))
  (Tuple2 (tuple2 a1 c1) (tuple2 a1 d1) (t2tb133 x) (t2tb904 y))
  (t2tb4487 r)) (and (mem10 x u) (mem32 y v)))))))

(declare-fun t2tb4786 ((set (set (tuple21 (tuple21 a c) (set (tuple21 b
  d)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a c) (set (tuple21 b d))))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 c1) (set1 (tuple2 b1 d1))))) (t2tb4786 x))))

(declare-fun tb2t4786 (uni) (set (set (tuple21 (tuple21 a c) (set (tuple21 b
  d))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a c) (set (tuple21 b d)))))))
  (! (= (tb2t4786 (t2tb4786 i)) i) :pattern ((t2tb4786 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 c1) (set1 (tuple2 b1 d1))))) j)
     (= (t2tb4786 (tb2t4786 j)) j)) :pattern ((t2tb4786 (tb2t4786 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a c))) (v (set (set (tuple21 b d))))
  (r (set (tuple21 (tuple21 a c) (set (tuple21 b d))))))
  (= (mem (set1 (tuple2 (tuple2 a1 c1) (set1 (tuple2 b1 d1)))) (t2tb4489 r)
  (relation (set1 (tuple2 b1 d1)) (tuple2 a1 c1) (t2tb129 u) (t2tb906 v)))
  (forall ((x (tuple21 a c)) (y (set (tuple21 b d))))
  (=> (mem (tuple2 (tuple2 a1 c1) (set1 (tuple2 b1 d1)))
  (Tuple2 (tuple2 a1 c1) (set1 (tuple2 b1 d1)) (t2tb133 x) (t2tb687 y))
  (t2tb4489 r)) (and (mem10 x u) (mem33 y v)))))))

(declare-fun t2tb685 ((set (set (tuple21 (tuple21 a c) (tuple21 b d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a c) (tuple21 b d)))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))) (t2tb685 x))))

(declare-fun tb2t685 (uni) (set (set (tuple21 (tuple21 a c) (tuple21 b d)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a c) (tuple21 b d))))))
  (! (= (tb2t685 (t2tb685 i)) i) :pattern ((t2tb685 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))) j)
     (= (t2tb685 (tb2t685 j)) j)) :pattern ((t2tb685 (tb2t685 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a c))) (v (set (tuple21 b d)))
  (r (set (tuple21 (tuple21 a c) (tuple21 b d)))))
  (= (mem (set1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))) (t2tb686 r)
  (relation (tuple2 b1 d1) (tuple2 a1 c1) (t2tb129 u) (t2tb687 v)))
  (forall ((x (tuple21 a c)) (y (tuple21 b d)))
  (=> (mem (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))
  (Tuple2 (tuple2 a1 c1) (tuple2 b1 d1) (t2tb133 x) (t2tb692 y)) (t2tb686 r))
  (and (mem10 x u) (mem23 y v)))))))

(declare-fun t2tb4787 ((set (set (tuple21 (tuple21 a c) d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a c) d))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 c1) d1))) (t2tb4787 x))))

(declare-fun tb2t4787 (uni) (set (set (tuple21 (tuple21 a c) d))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a c) d)))))
  (! (= (tb2t4787 (t2tb4787 i)) i) :pattern ((t2tb4787 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 c1) d1))) j)
     (= (t2tb4787 (tb2t4787 j)) j)) :pattern ((t2tb4787 (tb2t4787 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a c))) (v (set d)) (r (set (tuple21 (tuple21 a c)
  d))))
  (= (mem (set1 (tuple2 (tuple2 a1 c1) d1)) (t2tb847 r)
  (relation d1 (tuple2 a1 c1) (t2tb129 u) (t2tb690 v)))
  (forall ((x (tuple21 a c)) (y d))
  (=> (mem (tuple2 (tuple2 a1 c1) d1)
  (Tuple2 (tuple2 a1 c1) d1 (t2tb133 x) (t2tb694 y)) (t2tb847 r))
  (and (mem10 x u) (mem20 y v)))))))

(declare-fun t2tb4788 ((set (set (tuple21 (tuple21 a c) (tuple21 a (tuple21 b
  c)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a c) (tuple21 a (tuple21 b c)))))))
  (sort (set1 (set1 (tuple2 (tuple2 a1 c1) (tuple2 a1 (tuple2 b1 c1)))))
  (t2tb4788 x))))

(declare-fun tb2t4788 (uni) (set (set (tuple21 (tuple21 a c) (tuple21 a
  (tuple21 b c))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a c) (tuple21 a (tuple21 b c)))))))
  (! (= (tb2t4788 (t2tb4788 i)) i) :pattern ((t2tb4788 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (tuple2 a1 c1) (tuple2 a1 (tuple2 b1 c1))))) j)
     (= (t2tb4788 (tb2t4788 j)) j)) :pattern ((t2tb4788 (tb2t4788 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a c))) (v (set (tuple21 a (tuple21 b c))))
  (r (set (tuple21 (tuple21 a c) (tuple21 a (tuple21 b c))))))
  (= (mem (set1 (tuple2 (tuple2 a1 c1) (tuple2 a1 (tuple2 b1 c1))))
  (t2tb4491 r)
  (relation (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 c1) (t2tb129 u)
  (t2tb261 v)))
  (forall ((x (tuple21 a c)) (y (tuple21 a (tuple21 b c))))
  (=> (mem (tuple2 (tuple2 a1 c1) (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 (tuple2 a1 c1) (tuple2 a1 (tuple2 b1 c1)) (t2tb133 x) (t2tb260 y))
  (t2tb4491 r)) (and (mem10 x u) (mem14 y v)))))))

(declare-fun t2tb4789 ((set (set (tuple21 (tuple21 a c) (set (tuple21 a
  c)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a c) (set (tuple21 a c))))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 c1) (set1 (tuple2 a1 c1))))) (t2tb4789 x))))

(declare-fun tb2t4789 (uni) (set (set (tuple21 (tuple21 a c) (set (tuple21 a
  c))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a c) (set (tuple21 a c)))))))
  (! (= (tb2t4789 (t2tb4789 i)) i) :pattern ((t2tb4789 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 c1) (set1 (tuple2 a1 c1))))) j)
     (= (t2tb4789 (tb2t4789 j)) j)) :pattern ((t2tb4789 (tb2t4789 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a c))) (v (set (set (tuple21 a c))))
  (r (set (tuple21 (tuple21 a c) (set (tuple21 a c))))))
  (= (mem (set1 (tuple2 (tuple2 a1 c1) (set1 (tuple2 a1 c1)))) (t2tb4493 r)
  (relation (set1 (tuple2 a1 c1)) (tuple2 a1 c1) (t2tb129 u) (t2tb128 v)))
  (forall ((x (tuple21 a c)) (y (set (tuple21 a c))))
  (=> (mem (tuple2 (tuple2 a1 c1) (set1 (tuple2 a1 c1)))
  (Tuple2 (tuple2 a1 c1) (set1 (tuple2 a1 c1)) (t2tb133 x) (t2tb129 y))
  (t2tb4493 r)) (and (mem10 x u) (mem11 y v)))))))

(declare-fun t2tb275 ((set (set (tuple21 (tuple21 a c) (tuple21 a c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a c) (tuple21 a c)))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 c1) (tuple2 a1 c1)))) (t2tb275 x))))

(declare-fun tb2t275 (uni) (set (set (tuple21 (tuple21 a c) (tuple21 a c)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a c) (tuple21 a c))))))
  (! (= (tb2t275 (t2tb275 i)) i) :pattern ((t2tb275 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 c1) (tuple2 a1 c1)))) j)
     (= (t2tb275 (tb2t275 j)) j)) :pattern ((t2tb275 (tb2t275 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a c))) (v (set (tuple21 a c)))
  (r (set (tuple21 (tuple21 a c) (tuple21 a c)))))
  (= (mem (set1 (tuple2 (tuple2 a1 c1) (tuple2 a1 c1))) (t2tb157 r)
  (relation (tuple2 a1 c1) (tuple2 a1 c1) (t2tb129 u) (t2tb129 v)))
  (forall ((x (tuple21 a c)) (y (tuple21 a c)))
  (=> (mem (tuple2 (tuple2 a1 c1) (tuple2 a1 c1))
  (Tuple2 (tuple2 a1 c1) (tuple2 a1 c1) (t2tb133 x) (t2tb133 y)) (t2tb157 r))
  (and (mem10 x u) (mem10 y v)))))))

(declare-fun t2tb278 ((set (set (tuple21 (tuple21 a c) c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a c) c))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 c1) c1))) (t2tb278 x))))

(declare-fun tb2t278 (uni) (set (set (tuple21 (tuple21 a c) c))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a c) c)))))
  (! (= (tb2t278 (t2tb278 i)) i) :pattern ((t2tb278 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 c1) c1))) j)
     (= (t2tb278 (tb2t278 j)) j)) :pattern ((t2tb278 (tb2t278 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a c))) (v (set c)) (r (set (tuple21 (tuple21 a c)
  c))))
  (= (mem (set1 (tuple2 (tuple2 a1 c1) c1)) (t2tb162 r)
  (relation c1 (tuple2 a1 c1) (t2tb129 u) (t2tb132 v)))
  (forall ((x (tuple21 a c)) (y c))
  (=> (mem (tuple2 (tuple2 a1 c1) c1)
  (Tuple2 (tuple2 a1 c1) c1 (t2tb133 x) (t2tb135 y)) (t2tb162 r))
  (and (mem10 x u) (mem7 y v)))))))

(declare-fun t2tb279 ((set (set (tuple21 (tuple21 a c) (set (tuple21 a
  b)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a c) (set (tuple21 a b))))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 c1) (set1 (tuple2 a1 b1))))) (t2tb279 x))))

(declare-fun tb2t279 (uni) (set (set (tuple21 (tuple21 a c) (set (tuple21 a
  b))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a c) (set (tuple21 a b)))))))
  (! (= (tb2t279 (t2tb279 i)) i) :pattern ((t2tb279 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 c1) (set1 (tuple2 a1 b1))))) j)
     (= (t2tb279 (tb2t279 j)) j)) :pattern ((t2tb279 (tb2t279 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a c))) (v (set (set (tuple21 a b))))
  (r (set (tuple21 (tuple21 a c) (set (tuple21 a b))))))
  (= (mem (set1 (tuple2 (tuple2 a1 c1) (set1 (tuple2 a1 b1)))) (t2tb164 r)
  (relation (set1 (tuple2 a1 b1)) (tuple2 a1 c1) (t2tb129 u) (t2tb10 v)))
  (forall ((x (tuple21 a c)) (y (set (tuple21 a b))))
  (=> (mem (tuple2 (tuple2 a1 c1) (set1 (tuple2 a1 b1)))
  (Tuple2 (tuple2 a1 c1) (set1 (tuple2 a1 b1)) (t2tb133 x) (t2tb11 y))
  (t2tb164 r)) (and (mem10 x u) (mem4 y v)))))))

(declare-fun t2tb280 ((set (set (tuple21 (tuple21 a c) (tuple21 a b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a c) (tuple21 a b)))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 c1) (tuple2 a1 b1)))) (t2tb280 x))))

(declare-fun tb2t280 (uni) (set (set (tuple21 (tuple21 a c) (tuple21 a b)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a c) (tuple21 a b))))))
  (! (= (tb2t280 (t2tb280 i)) i) :pattern ((t2tb280 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 c1) (tuple2 a1 b1)))) j)
     (= (t2tb280 (tb2t280 j)) j)) :pattern ((t2tb280 (tb2t280 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a c))) (v (set (tuple21 a b)))
  (r (set (tuple21 (tuple21 a c) (tuple21 a b)))))
  (= (mem (set1 (tuple2 (tuple2 a1 c1) (tuple2 a1 b1))) (t2tb166 r)
  (relation (tuple2 a1 b1) (tuple2 a1 c1) (t2tb129 u) (t2tb11 v)))
  (forall ((x (tuple21 a c)) (y (tuple21 a b)))
  (=> (mem (tuple2 (tuple2 a1 c1) (tuple2 a1 b1))
  (Tuple2 (tuple2 a1 c1) (tuple2 a1 b1) (t2tb133 x) (t2tb13 y)) (t2tb166 r))
  (and (mem10 x u) (mem3 y v)))))))

(declare-fun t2tb281 ((set (set (tuple21 (tuple21 a c) b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a c) b))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 c1) b1))) (t2tb281 x))))

(declare-fun tb2t281 (uni) (set (set (tuple21 (tuple21 a c) b))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a c) b)))))
  (! (= (tb2t281 (t2tb281 i)) i) :pattern ((t2tb281 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 c1) b1))) j)
     (= (t2tb281 (tb2t281 j)) j)) :pattern ((t2tb281 (tb2t281 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a c))) (v (set b)) (r (set (tuple21 (tuple21 a c)
  b))))
  (= (mem (set1 (tuple2 (tuple2 a1 c1) b1)) (t2tb168 r)
  (relation b1 (tuple2 a1 c1) (t2tb129 u) (t2tb12 v)))
  (forall ((x (tuple21 a c)) (y b))
  (=> (mem (tuple2 (tuple2 a1 c1) b1)
  (Tuple2 (tuple2 a1 c1) b1 (t2tb133 x) (t2tb14 y)) (t2tb168 r))
  (and (mem10 x u) (mem2 y v)))))))

(declare-fun t2tb282 ((set (set (tuple21 (tuple21 a c) a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a c) a))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 c1) a1))) (t2tb282 x))))

(declare-fun tb2t282 (uni) (set (set (tuple21 (tuple21 a c) a))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a c) a)))))
  (! (= (tb2t282 (t2tb282 i)) i) :pattern ((t2tb282 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 c1) a1))) j)
     (= (t2tb282 (tb2t282 j)) j)) :pattern ((t2tb282 (tb2t282 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a c))) (v (set a)) (r (set (tuple21 (tuple21 a c)
  a))))
  (= (mem (set1 (tuple2 (tuple2 a1 c1) a1)) (t2tb170 r)
  (relation a1 (tuple2 a1 c1) (t2tb129 u) (t2tb1 v)))
  (forall ((x (tuple21 a c)) (y a))
  (=> (mem (tuple2 (tuple2 a1 c1) a1)
  (Tuple2 (tuple2 a1 c1) a1 (t2tb133 x) (t2tb2 y)) (t2tb170 r))
  (and (mem10 x u) (mem1 y v)))))))

;; mem_relation
  (assert
  (forall ((b2 ty))
  (forall ((u (set (tuple21 a c))) (v uni) (r uni))
  (and
  (=> (mem (set1 (tuple2 (tuple2 a1 c1) b2)) r
  (relation b2 (tuple2 a1 c1) (t2tb129 u) v))
  (forall ((x (tuple21 a c)) (y uni))
  (=> (mem (tuple2 (tuple2 a1 c1) b2)
  (Tuple2 (tuple2 a1 c1) b2 (t2tb133 x) y) r) (and (mem10 x u) (mem b2 y v)))))
  (=>
  (forall ((x (tuple21 a c)) (y uni))
  (=> (sort b2 y)
  (=> (mem (tuple2 (tuple2 a1 c1) b2)
  (Tuple2 (tuple2 a1 c1) b2 (t2tb133 x) y) r) (and (mem10 x u) (mem b2 y v)))))
  (mem (set1 (tuple2 (tuple2 a1 c1) b2)) r
  (relation b2 (tuple2 a1 c1) (t2tb129 u) v)))))))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 b c))) (v (set (tuple21 d e)))
  (r (set (tuple21 (tuple21 b c) (tuple21 d e)))))
  (= (mem (set1 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1))) (t2tb4102 r)
  (relation (tuple2 d1 e1) (tuple2 b1 c1) (t2tb131 u) (t2tb3456 v)))
  (forall ((x (tuple21 b c)) (y (tuple21 d e)))
  (=> (mem49
  (tb2t4104 (Tuple2 (tuple2 b1 c1) (tuple2 d1 e1) (t2tb134 x) (t2tb3457 y)))
  r)
  (and (mem (tuple2 b1 c1) (t2tb134 x) (t2tb131 u)) (mem (tuple2 d1 e1)
  (t2tb3457 y) (t2tb3456 v))))))))

(declare-fun t2tb4790 ((set (set (tuple21 c (tuple21 (tuple21 b c) (tuple21 d
  e)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 c (tuple21 (tuple21 b c) (tuple21 d e)))))))
  (sort (set1 (set1 (tuple2 c1 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)))))
  (t2tb4790 x))))

(declare-fun tb2t4790 (uni) (set (set (tuple21 c (tuple21 (tuple21 b c)
  (tuple21 d e))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 c (tuple21 (tuple21 b c) (tuple21 d e)))))))
  (! (= (tb2t4790 (t2tb4790 i)) i) :pattern ((t2tb4790 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 c1 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1))))) j)
     (= (t2tb4790 (tb2t4790 j)) j)) :pattern ((t2tb4790 (tb2t4790 j))) )))

;; mem_relation
  (assert
  (forall ((u (set c)) (v (set (tuple21 (tuple21 b c) (tuple21 d e))))
  (r (set (tuple21 c (tuple21 (tuple21 b c) (tuple21 d e))))))
  (= (mem (set1 (tuple2 c1 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1))))
  (t2tb4495 r)
  (relation (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) c1 (t2tb132 u)
  (t2tb4102 v)))
  (forall ((x c) (y (tuple21 (tuple21 b c) (tuple21 d e))))
  (=> (mem (tuple2 c1 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)))
  (Tuple2 c1 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (t2tb135 x) (t2tb4104 y))
  (t2tb4495 r)) (and (mem7 x u) (mem49 y v)))))))

(declare-fun t2tb4791 ((set (set (tuple21 c (tuple21 a (tuple21 d
  e)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 c (tuple21 a (tuple21 d e))))))) (sort
  (set1 (set1 (tuple2 c1 (tuple2 a1 (tuple2 d1 e1))))) (t2tb4791 x))))

(declare-fun tb2t4791 (uni) (set (set (tuple21 c (tuple21 a (tuple21 d
  e))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 c (tuple21 a (tuple21 d e)))))))
  (! (= (tb2t4791 (t2tb4791 i)) i) :pattern ((t2tb4791 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 c1 (tuple2 a1 (tuple2 d1 e1))))) j)
     (= (t2tb4791 (tb2t4791 j)) j)) :pattern ((t2tb4791 (tb2t4791 j))) )))

;; mem_relation
  (assert
  (forall ((u (set c)) (v (set (tuple21 a (tuple21 d e)))) (r (set (tuple21 c
  (tuple21 a (tuple21 d e))))))
  (= (mem (set1 (tuple2 c1 (tuple2 a1 (tuple2 d1 e1)))) (t2tb4497 r)
  (relation (tuple2 a1 (tuple2 d1 e1)) c1 (t2tb132 u) (t2tb4103 v)))
  (forall ((x c) (y (tuple21 a (tuple21 d e))))
  (=> (mem (tuple2 c1 (tuple2 a1 (tuple2 d1 e1)))
  (Tuple2 c1 (tuple2 a1 (tuple2 d1 e1)) (t2tb135 x) (t2tb4105 y))
  (t2tb4497 r)) (and (mem7 x u) (mem48 y v)))))))

(declare-fun t2tb4792 ((set (set (tuple21 c (set (tuple21 c e)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 c (set (tuple21 c e))))))) (sort
  (set1 (set1 (tuple2 c1 (set1 (tuple2 c1 e1))))) (t2tb4792 x))))

(declare-fun tb2t4792 (uni) (set (set (tuple21 c (set (tuple21 c e))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 c (set (tuple21 c e)))))))
  (! (= (tb2t4792 (t2tb4792 i)) i) :pattern ((t2tb4792 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 c1 (set1 (tuple2 c1 e1))))) j)
     (= (t2tb4792 (tb2t4792 j)) j)) :pattern ((t2tb4792 (tb2t4792 j))) )))

;; mem_relation
  (assert
  (forall ((u (set c)) (v (set (set (tuple21 c e)))) (r (set (tuple21 c
  (set (tuple21 c e))))))
  (= (mem (set1 (tuple2 c1 (set1 (tuple2 c1 e1)))) (t2tb4500 r)
  (relation (set1 (tuple2 c1 e1)) c1 (t2tb132 u) (t2tb3854 v)))
  (forall ((x c) (y (set (tuple21 c e))))
  (=> (mem (tuple2 c1 (set1 (tuple2 c1 e1)))
  (Tuple2 c1 (set1 (tuple2 c1 e1)) (t2tb135 x) (t2tb3478 y)) (t2tb4500 r))
  (and (mem7 x u) (mem47 y v)))))))

(declare-fun t2tb4793 ((set (set (tuple21 c (tuple21 c e))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 c (tuple21 c e)))))) (sort
  (set1 (set1 (tuple2 c1 (tuple2 c1 e1)))) (t2tb4793 x))))

(declare-fun tb2t4793 (uni) (set (set (tuple21 c (tuple21 c e)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 c (tuple21 c e))))))
  (! (= (tb2t4793 (t2tb4793 i)) i) :pattern ((t2tb4793 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 c1 (tuple2 c1 e1)))) j)
     (= (t2tb4793 (tb2t4793 j)) j)) :pattern ((t2tb4793 (tb2t4793 j))) )))

;; mem_relation
  (assert
  (forall ((u (set c)) (v (set (tuple21 c e))) (r (set (tuple21 c (tuple21 c
  e)))))
  (= (mem (set1 (tuple2 c1 (tuple2 c1 e1))) (t2tb4501 r)
  (relation (tuple2 c1 e1) c1 (t2tb132 u) (t2tb3478 v)))
  (forall ((x c) (y (tuple21 c e)))
  (=> (mem (tuple2 c1 (tuple2 c1 e1))
  (Tuple2 c1 (tuple2 c1 e1) (t2tb135 x) (t2tb3479 y)) (t2tb4501 r))
  (and (mem7 x u) (mem46 y v)))))))

(declare-fun t2tb3847 ((set (set (tuple21 c (tuple21 a e))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 c (tuple21 a e)))))) (sort
  (set1 (set1 (tuple2 c1 (tuple2 a1 e1)))) (t2tb3847 x))))

(declare-fun tb2t3847 (uni) (set (set (tuple21 c (tuple21 a e)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 c (tuple21 a e))))))
  (! (= (tb2t3847 (t2tb3847 i)) i) :pattern ((t2tb3847 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 c1 (tuple2 a1 e1)))) j)
     (= (t2tb3847 (tb2t3847 j)) j)) :pattern ((t2tb3847 (tb2t3847 j))) )))

;; mem_relation
  (assert
  (forall ((u (set c)) (v (set (tuple21 a e))) (r (set (tuple21 c (tuple21 a
  e)))))
  (= (mem (set1 (tuple2 c1 (tuple2 a1 e1))) (t2tb3464 r)
  (relation (tuple2 a1 e1) c1 (t2tb132 u) (t2tb2943 v)))
  (forall ((x c) (y (tuple21 a e)))
  (=> (mem (tuple2 c1 (tuple2 a1 e1))
  (Tuple2 c1 (tuple2 a1 e1) (t2tb135 x) (t2tb2949 y)) (t2tb3464 r))
  (and (mem7 x u) (mem44 y v)))))))

;; mem_relation
  (assert
  (forall ((u (set c)) (v (set e)) (r (set (tuple21 c e))))
  (= (mem47 r (relation12 u v))
  (forall ((x c) (y e))
  (=> (mem46 (tb2t3479 (Tuple2 c1 e1 (t2tb135 x) (t2tb2955 y))) r)
  (and (mem7 x u) (mem36 y v)))))))

(declare-fun t2tb4794 ((set (set (tuple21 c (tuple21 a d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 c (tuple21 a d)))))) (sort
  (set1 (set1 (tuple2 c1 (tuple2 a1 d1)))) (t2tb4794 x))))

(declare-fun tb2t4794 (uni) (set (set (tuple21 c (tuple21 a d)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 c (tuple21 a d))))))
  (! (= (tb2t4794 (t2tb4794 i)) i) :pattern ((t2tb4794 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 c1 (tuple2 a1 d1)))) j)
     (= (t2tb4794 (tb2t4794 j)) j)) :pattern ((t2tb4794 (tb2t4794 j))) )))

;; mem_relation
  (assert
  (forall ((u (set c)) (v (set (tuple21 a d))) (r (set (tuple21 c (tuple21 a
  d)))))
  (= (mem (set1 (tuple2 c1 (tuple2 a1 d1))) (t2tb4503 r)
  (relation (tuple2 a1 d1) c1 (t2tb132 u) (t2tb903 v)))
  (forall ((x c) (y (tuple21 a d)))
  (=> (mem (tuple2 c1 (tuple2 a1 d1))
  (Tuple2 c1 (tuple2 a1 d1) (t2tb135 x) (t2tb904 y)) (t2tb4503 r))
  (and (mem7 x u) (mem32 y v)))))))

(declare-fun t2tb4795 ((set (set (tuple21 c (set (tuple21 b d)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 c (set (tuple21 b d))))))) (sort
  (set1 (set1 (tuple2 c1 (set1 (tuple2 b1 d1))))) (t2tb4795 x))))

(declare-fun tb2t4795 (uni) (set (set (tuple21 c (set (tuple21 b d))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 c (set (tuple21 b d)))))))
  (! (= (tb2t4795 (t2tb4795 i)) i) :pattern ((t2tb4795 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 c1 (set1 (tuple2 b1 d1))))) j)
     (= (t2tb4795 (tb2t4795 j)) j)) :pattern ((t2tb4795 (tb2t4795 j))) )))

;; mem_relation
  (assert
  (forall ((u (set c)) (v (set (set (tuple21 b d)))) (r (set (tuple21 c
  (set (tuple21 b d))))))
  (= (mem (set1 (tuple2 c1 (set1 (tuple2 b1 d1)))) (t2tb4505 r)
  (relation (set1 (tuple2 b1 d1)) c1 (t2tb132 u) (t2tb906 v)))
  (forall ((x c) (y (set (tuple21 b d))))
  (=> (mem (tuple2 c1 (set1 (tuple2 b1 d1)))
  (Tuple2 c1 (set1 (tuple2 b1 d1)) (t2tb135 x) (t2tb687 y)) (t2tb4505 r))
  (and (mem7 x u) (mem33 y v)))))))

(declare-fun t2tb4796 ((set (set (tuple21 c (tuple21 b d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 c (tuple21 b d)))))) (sort
  (set1 (set1 (tuple2 c1 (tuple2 b1 d1)))) (t2tb4796 x))))

(declare-fun tb2t4796 (uni) (set (set (tuple21 c (tuple21 b d)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 c (tuple21 b d))))))
  (! (= (tb2t4796 (t2tb4796 i)) i) :pattern ((t2tb4796 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 c1 (tuple2 b1 d1)))) j)
     (= (t2tb4796 (tb2t4796 j)) j)) :pattern ((t2tb4796 (tb2t4796 j))) )))

;; mem_relation
  (assert
  (forall ((u (set c)) (v (set (tuple21 b d))) (r (set (tuple21 c (tuple21 b
  d)))))
  (= (mem (set1 (tuple2 c1 (tuple2 b1 d1))) (t2tb4507 r)
  (relation (tuple2 b1 d1) c1 (t2tb132 u) (t2tb687 v)))
  (forall ((x c) (y (tuple21 b d)))
  (=> (mem (tuple2 c1 (tuple2 b1 d1))
  (Tuple2 c1 (tuple2 b1 d1) (t2tb135 x) (t2tb692 y)) (t2tb4507 r))
  (and (mem7 x u) (mem23 y v)))))))

(declare-fun t2tb688 ((set (set (tuple21 c d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 c d))))) (sort (set1 (set1 (tuple2 c1 d1)))
  (t2tb688 x))))

(declare-fun tb2t688 (uni) (set (set (tuple21 c d))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 c d)))))
  (! (= (tb2t688 (t2tb688 i)) i) :pattern ((t2tb688 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 c1 d1))) j) (= (t2tb688 (tb2t688 j)) j)) :pattern (
  (t2tb688 (tb2t688 j))) )))

;; mem_relation
  (assert
  (forall ((u (set c)) (v (set d)) (r (set (tuple21 c d))))
  (= (mem (set1 (tuple2 c1 d1)) (t2tb689 r)
  (relation d1 c1 (t2tb132 u) (t2tb690 v)))
  (forall ((x c) (y d))
  (=> (mem (tuple2 c1 d1) (Tuple2 c1 d1 (t2tb135 x) (t2tb694 y)) (t2tb689 r))
  (and (mem7 x u) (mem20 y v)))))))

(declare-fun t2tb4797 ((set (set (tuple21 c (tuple21 a (tuple21 b
  c)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 c (tuple21 a (tuple21 b c))))))) (sort
  (set1 (set1 (tuple2 c1 (tuple2 a1 (tuple2 b1 c1))))) (t2tb4797 x))))

(declare-fun tb2t4797 (uni) (set (set (tuple21 c (tuple21 a (tuple21 b
  c))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 c (tuple21 a (tuple21 b c)))))))
  (! (= (tb2t4797 (t2tb4797 i)) i) :pattern ((t2tb4797 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 c1 (tuple2 a1 (tuple2 b1 c1))))) j)
     (= (t2tb4797 (tb2t4797 j)) j)) :pattern ((t2tb4797 (tb2t4797 j))) )))

;; mem_relation
  (assert
  (forall ((u (set c)) (v (set (tuple21 a (tuple21 b c)))) (r (set (tuple21 c
  (tuple21 a (tuple21 b c))))))
  (= (mem (set1 (tuple2 c1 (tuple2 a1 (tuple2 b1 c1)))) (t2tb4508 r)
  (relation (tuple2 a1 (tuple2 b1 c1)) c1 (t2tb132 u) (t2tb261 v)))
  (forall ((x c) (y (tuple21 a (tuple21 b c))))
  (=> (mem (tuple2 c1 (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 c1 (tuple2 a1 (tuple2 b1 c1)) (t2tb135 x) (t2tb260 y))
  (t2tb4508 r)) (and (mem7 x u) (mem14 y v)))))))

(declare-fun t2tb4798 ((set (set (tuple21 c (set (tuple21 a c)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 c (set (tuple21 a c))))))) (sort
  (set1 (set1 (tuple2 c1 (set1 (tuple2 a1 c1))))) (t2tb4798 x))))

(declare-fun tb2t4798 (uni) (set (set (tuple21 c (set (tuple21 a c))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 c (set (tuple21 a c)))))))
  (! (= (tb2t4798 (t2tb4798 i)) i) :pattern ((t2tb4798 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 c1 (set1 (tuple2 a1 c1))))) j)
     (= (t2tb4798 (tb2t4798 j)) j)) :pattern ((t2tb4798 (tb2t4798 j))) )))

;; mem_relation
  (assert
  (forall ((u (set c)) (v (set (set (tuple21 a c)))) (r (set (tuple21 c
  (set (tuple21 a c))))))
  (= (mem (set1 (tuple2 c1 (set1 (tuple2 a1 c1)))) (t2tb4510 r)
  (relation (set1 (tuple2 a1 c1)) c1 (t2tb132 u) (t2tb128 v)))
  (forall ((x c) (y (set (tuple21 a c))))
  (=> (mem (tuple2 c1 (set1 (tuple2 a1 c1)))
  (Tuple2 c1 (set1 (tuple2 a1 c1)) (t2tb135 x) (t2tb129 y)) (t2tb4510 r))
  (and (mem7 x u) (mem11 y v)))))))

(declare-fun t2tb302 ((set (set (tuple21 c (tuple21 a c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 c (tuple21 a c)))))) (sort
  (set1 (set1 (tuple2 c1 (tuple2 a1 c1)))) (t2tb302 x))))

(declare-fun tb2t302 (uni) (set (set (tuple21 c (tuple21 a c)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 c (tuple21 a c))))))
  (! (= (tb2t302 (t2tb302 i)) i) :pattern ((t2tb302 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 c1 (tuple2 a1 c1)))) j)
     (= (t2tb302 (tb2t302 j)) j)) :pattern ((t2tb302 (tb2t302 j))) )))

;; mem_relation
  (assert
  (forall ((u (set c)) (v (set (tuple21 a c))) (r (set (tuple21 c (tuple21 a
  c)))))
  (= (mem (set1 (tuple2 c1 (tuple2 a1 c1))) (t2tb210 r)
  (relation (tuple2 a1 c1) c1 (t2tb132 u) (t2tb129 v)))
  (forall ((x c) (y (tuple21 a c)))
  (=> (mem (tuple2 c1 (tuple2 a1 c1))
  (Tuple2 c1 (tuple2 a1 c1) (t2tb135 x) (t2tb133 y)) (t2tb210 r))
  (and (mem7 x u) (mem10 y v)))))))

(declare-fun t2tb305 ((set (set (tuple21 c c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 c c))))) (sort (set1 (set1 (tuple2 c1 c1)))
  (t2tb305 x))))

(declare-fun tb2t305 (uni) (set (set (tuple21 c c))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 c c)))))
  (! (= (tb2t305 (t2tb305 i)) i) :pattern ((t2tb305 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 c1 c1))) j) (= (t2tb305 (tb2t305 j)) j)) :pattern (
  (t2tb305 (tb2t305 j))) )))

;; mem_relation
  (assert
  (forall ((u (set c)) (v (set c)) (r (set (tuple21 c c))))
  (= (mem (set1 (tuple2 c1 c1)) (t2tb216 r)
  (relation c1 c1 (t2tb132 u) (t2tb132 v)))
  (forall ((x c) (y c))
  (=> (mem (tuple2 c1 c1) (Tuple2 c1 c1 (t2tb135 x) (t2tb135 y)) (t2tb216 r))
  (and (mem7 x u) (mem7 y v)))))))

(declare-fun t2tb306 ((set (set (tuple21 c (set (tuple21 a b)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 c (set (tuple21 a b))))))) (sort
  (set1 (set1 (tuple2 c1 (set1 (tuple2 a1 b1))))) (t2tb306 x))))

(declare-fun tb2t306 (uni) (set (set (tuple21 c (set (tuple21 a b))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 c (set (tuple21 a b)))))))
  (! (= (tb2t306 (t2tb306 i)) i) :pattern ((t2tb306 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 c1 (set1 (tuple2 a1 b1))))) j)
     (= (t2tb306 (tb2t306 j)) j)) :pattern ((t2tb306 (tb2t306 j))) )))

;; mem_relation
  (assert
  (forall ((u (set c)) (v (set (set (tuple21 a b)))) (r (set (tuple21 c
  (set (tuple21 a b))))))
  (= (mem (set1 (tuple2 c1 (set1 (tuple2 a1 b1)))) (t2tb218 r)
  (relation (set1 (tuple2 a1 b1)) c1 (t2tb132 u) (t2tb10 v)))
  (forall ((x c) (y (set (tuple21 a b))))
  (=> (mem (tuple2 c1 (set1 (tuple2 a1 b1)))
  (Tuple2 c1 (set1 (tuple2 a1 b1)) (t2tb135 x) (t2tb11 y)) (t2tb218 r))
  (and (mem7 x u) (mem4 y v)))))))

(declare-fun t2tb307 ((set (set (tuple21 c (tuple21 a b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 c (tuple21 a b)))))) (sort
  (set1 (set1 (tuple2 c1 (tuple2 a1 b1)))) (t2tb307 x))))

(declare-fun tb2t307 (uni) (set (set (tuple21 c (tuple21 a b)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 c (tuple21 a b))))))
  (! (= (tb2t307 (t2tb307 i)) i) :pattern ((t2tb307 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 c1 (tuple2 a1 b1)))) j)
     (= (t2tb307 (tb2t307 j)) j)) :pattern ((t2tb307 (tb2t307 j))) )))

;; mem_relation
  (assert
  (forall ((u (set c)) (v (set (tuple21 a b))) (r (set (tuple21 c (tuple21 a
  b)))))
  (= (mem (set1 (tuple2 c1 (tuple2 a1 b1))) (t2tb220 r)
  (relation (tuple2 a1 b1) c1 (t2tb132 u) (t2tb11 v)))
  (forall ((x c) (y (tuple21 a b)))
  (=> (mem (tuple2 c1 (tuple2 a1 b1))
  (Tuple2 c1 (tuple2 a1 b1) (t2tb135 x) (t2tb13 y)) (t2tb220 r))
  (and (mem7 x u) (mem3 y v)))))))

(declare-fun t2tb308 ((set (set (tuple21 c b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 c b))))) (sort (set1 (set1 (tuple2 c1 b1)))
  (t2tb308 x))))

(declare-fun tb2t308 (uni) (set (set (tuple21 c b))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 c b)))))
  (! (= (tb2t308 (t2tb308 i)) i) :pattern ((t2tb308 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 c1 b1))) j) (= (t2tb308 (tb2t308 j)) j)) :pattern (
  (t2tb308 (tb2t308 j))) )))

;; mem_relation
  (assert
  (forall ((u (set c)) (v (set b)) (r (set (tuple21 c b))))
  (= (mem (set1 (tuple2 c1 b1)) (t2tb222 r)
  (relation b1 c1 (t2tb132 u) (t2tb12 v)))
  (forall ((x c) (y b))
  (=> (mem (tuple2 c1 b1) (Tuple2 c1 b1 (t2tb135 x) (t2tb14 y)) (t2tb222 r))
  (and (mem7 x u) (mem2 y v)))))))

(declare-fun t2tb309 ((set (set (tuple21 c a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 c a))))) (sort (set1 (set1 (tuple2 c1 a1)))
  (t2tb309 x))))

(declare-fun tb2t309 (uni) (set (set (tuple21 c a))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 c a)))))
  (! (= (tb2t309 (t2tb309 i)) i) :pattern ((t2tb309 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 c1 a1))) j) (= (t2tb309 (tb2t309 j)) j)) :pattern (
  (t2tb309 (tb2t309 j))) )))

;; mem_relation
  (assert
  (forall ((u (set c)) (v (set a)) (r (set (tuple21 c a))))
  (= (mem (set1 (tuple2 c1 a1)) (t2tb224 r)
  (relation a1 c1 (t2tb132 u) (t2tb1 v)))
  (forall ((x c) (y a))
  (=> (mem (tuple2 c1 a1) (Tuple2 c1 a1 (t2tb135 x) (t2tb2 y)) (t2tb224 r))
  (and (mem7 x u) (mem1 y v)))))))

;; mem_relation
  (assert
  (forall ((b2 ty))
  (forall ((u (set c)) (v uni) (r uni))
  (and
  (=> (mem (set1 (tuple2 c1 b2)) r (relation b2 c1 (t2tb132 u) v))
  (forall ((x c) (y uni))
  (=> (mem (tuple2 c1 b2) (Tuple2 c1 b2 (t2tb135 x) y) r)
  (and (mem7 x u) (mem b2 y v)))))
  (=>
  (forall ((x c) (y uni))
  (=> (sort b2 y)
  (=> (mem (tuple2 c1 b2) (Tuple2 c1 b2 (t2tb135 x) y) r)
  (and (mem7 x u) (mem b2 y v))))) (mem (set1 (tuple2 c1 b2)) r
  (relation b2 c1 (t2tb132 u) v)))))))

(declare-fun t2tb4799 ((set (set (tuple21 (set (tuple21 a b))
  (tuple21 (tuple21 b c) (tuple21 d e)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a b)) (tuple21 (tuple21 b c)
  (tuple21 d e))))))) (sort
  (set1
  (set1
  (tuple2 (set1 (tuple2 a1 b1)) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)))))
  (t2tb4799 x))))

(declare-fun tb2t4799 (uni) (set (set (tuple21 (set (tuple21 a b))
  (tuple21 (tuple21 b c) (tuple21 d e))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a b)) (tuple21 (tuple21 b c)
  (tuple21 d e)))))))
  (! (= (tb2t4799 (t2tb4799 i)) i) :pattern ((t2tb4799 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (set1
     (tuple2 (set1 (tuple2 a1 b1)) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)))))
     j) (= (t2tb4799 (tb2t4799 j)) j)) :pattern ((t2tb4799 (tb2t4799 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a b)))) (v (set (tuple21 (tuple21 b c)
  (tuple21 d e)))) (r (set (tuple21 (set (tuple21 a b)) (tuple21 (tuple21 b
  c) (tuple21 d e))))))
  (= (mem
  (set1
  (tuple2 (set1 (tuple2 a1 b1)) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1))))
  (t2tb4512 r)
  (relation (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (set1 (tuple2 a1 b1))
  (t2tb10 u) (t2tb4102 v)))
  (forall ((x (set (tuple21 a b))) (y (tuple21 (tuple21 b c) (tuple21 d e))))
  (=> (mem
  (tuple2 (set1 (tuple2 a1 b1)) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)))
  (Tuple2 (set1 (tuple2 a1 b1)) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1))
  (t2tb11 x) (t2tb4104 y)) (t2tb4512 r)) (and (mem4 x u) (mem49 y v)))))))

(declare-fun t2tb4800 ((set (set (tuple21 (set (tuple21 a b)) (tuple21 a
  (tuple21 d e)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a b)) (tuple21 a (tuple21 d
  e))))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 (tuple2 d1 e1)))))
  (t2tb4800 x))))

(declare-fun tb2t4800 (uni) (set (set (tuple21 (set (tuple21 a b)) (tuple21 a
  (tuple21 d e))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a b)) (tuple21 a (tuple21 d
  e))))))) (! (= (tb2t4800 (t2tb4800 i)) i) :pattern ((t2tb4800 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 (tuple2 d1 e1)))))
     j) (= (t2tb4800 (tb2t4800 j)) j)) :pattern ((t2tb4800 (tb2t4800 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a b)))) (v (set (tuple21 a (tuple21 d e))))
  (r (set (tuple21 (set (tuple21 a b)) (tuple21 a (tuple21 d e))))))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 (tuple2 d1 e1))))
  (t2tb4514 r)
  (relation (tuple2 a1 (tuple2 d1 e1)) (set1 (tuple2 a1 b1)) (t2tb10 u)
  (t2tb4103 v)))
  (forall ((x (set (tuple21 a b))) (y (tuple21 a (tuple21 d e))))
  (=> (mem (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 (tuple2 d1 e1)))
  (Tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 (tuple2 d1 e1)) (t2tb11 x)
  (t2tb4105 y)) (t2tb4514 r)) (and (mem4 x u) (mem48 y v)))))))

(declare-fun t2tb4801 ((set (set (tuple21 (set (tuple21 a b)) (set (tuple21 c
  e)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a b)) (set (tuple21 c e)))))))
  (sort (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 c1 e1)))))
  (t2tb4801 x))))

(declare-fun tb2t4801 (uni) (set (set (tuple21 (set (tuple21 a b))
  (set (tuple21 c e))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a b)) (set (tuple21 c e)))))))
  (! (= (tb2t4801 (t2tb4801 i)) i) :pattern ((t2tb4801 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 c1 e1))))) j)
     (= (t2tb4801 (tb2t4801 j)) j)) :pattern ((t2tb4801 (tb2t4801 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a b)))) (v (set (set (tuple21 c e))))
  (r (set (tuple21 (set (tuple21 a b)) (set (tuple21 c e))))))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 c1 e1))))
  (t2tb4516 r)
  (relation (set1 (tuple2 c1 e1)) (set1 (tuple2 a1 b1)) (t2tb10 u)
  (t2tb3854 v)))
  (forall ((x (set (tuple21 a b))) (y (set (tuple21 c e))))
  (=> (mem (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 c1 e1)))
  (Tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 c1 e1)) (t2tb11 x)
  (t2tb3478 y)) (t2tb4516 r)) (and (mem4 x u) (mem47 y v)))))))

(declare-fun t2tb4802 ((set (set (tuple21 (set (tuple21 a b)) (tuple21 c
  e))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a b)) (tuple21 c e)))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 c1 e1)))) (t2tb4802 x))))

(declare-fun tb2t4802 (uni) (set (set (tuple21 (set (tuple21 a b)) (tuple21 c
  e)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a b)) (tuple21 c e))))))
  (! (= (tb2t4802 (t2tb4802 i)) i) :pattern ((t2tb4802 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 c1 e1)))) j)
     (= (t2tb4802 (tb2t4802 j)) j)) :pattern ((t2tb4802 (tb2t4802 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a b)))) (v (set (tuple21 c e)))
  (r (set (tuple21 (set (tuple21 a b)) (tuple21 c e)))))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 c1 e1))) (t2tb4518 r)
  (relation (tuple2 c1 e1) (set1 (tuple2 a1 b1)) (t2tb10 u) (t2tb3478 v)))
  (forall ((x (set (tuple21 a b))) (y (tuple21 c e)))
  (=> (mem (tuple2 (set1 (tuple2 a1 b1)) (tuple2 c1 e1))
  (Tuple2 (set1 (tuple2 a1 b1)) (tuple2 c1 e1) (t2tb11 x) (t2tb3479 y))
  (t2tb4518 r)) (and (mem4 x u) (mem46 y v)))))))

(declare-fun t2tb3859 ((set (set (tuple21 (set (tuple21 a b)) (tuple21 a
  e))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a b)) (tuple21 a e)))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 e1)))) (t2tb3859 x))))

(declare-fun tb2t3859 (uni) (set (set (tuple21 (set (tuple21 a b)) (tuple21 a
  e)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a b)) (tuple21 a e))))))
  (! (= (tb2t3859 (t2tb3859 i)) i) :pattern ((t2tb3859 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 e1)))) j)
     (= (t2tb3859 (tb2t3859 j)) j)) :pattern ((t2tb3859 (tb2t3859 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a b)))) (v (set (tuple21 a e)))
  (r (set (tuple21 (set (tuple21 a b)) (tuple21 a e)))))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 e1))) (t2tb3486 r)
  (relation (tuple2 a1 e1) (set1 (tuple2 a1 b1)) (t2tb10 u) (t2tb2943 v)))
  (forall ((x (set (tuple21 a b))) (y (tuple21 a e)))
  (=> (mem (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 e1))
  (Tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 e1) (t2tb11 x) (t2tb2949 y))
  (t2tb3486 r)) (and (mem4 x u) (mem44 y v)))))))

(declare-fun t2tb3867 ((set (set (tuple21 (set (tuple21 a b)) e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a b)) e))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) e1))) (t2tb3867 x))))

(declare-fun tb2t3867 (uni) (set (set (tuple21 (set (tuple21 a b)) e))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a b)) e)))))
  (! (= (tb2t3867 (t2tb3867 i)) i) :pattern ((t2tb3867 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) e1))) j)
     (= (t2tb3867 (tb2t3867 j)) j)) :pattern ((t2tb3867 (tb2t3867 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a b)))) (v (set e))
  (r (set (tuple21 (set (tuple21 a b)) e))))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 b1)) e1)) (t2tb3502 r)
  (relation e1 (set1 (tuple2 a1 b1)) (t2tb10 u) (t2tb2947 v)))
  (forall ((x (set (tuple21 a b))) (y e))
  (=> (mem (tuple2 (set1 (tuple2 a1 b1)) e1)
  (Tuple2 (set1 (tuple2 a1 b1)) e1 (t2tb11 x) (t2tb2955 y)) (t2tb3502 r))
  (and (mem4 x u) (mem36 y v)))))))

(declare-fun t2tb4803 ((set (set (tuple21 (set (tuple21 a b)) (tuple21 a
  d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a b)) (tuple21 a d)))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 d1)))) (t2tb4803 x))))

(declare-fun tb2t4803 (uni) (set (set (tuple21 (set (tuple21 a b)) (tuple21 a
  d)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a b)) (tuple21 a d))))))
  (! (= (tb2t4803 (t2tb4803 i)) i) :pattern ((t2tb4803 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 d1)))) j)
     (= (t2tb4803 (tb2t4803 j)) j)) :pattern ((t2tb4803 (tb2t4803 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a b)))) (v (set (tuple21 a d)))
  (r (set (tuple21 (set (tuple21 a b)) (tuple21 a d)))))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 d1))) (t2tb4520 r)
  (relation (tuple2 a1 d1) (set1 (tuple2 a1 b1)) (t2tb10 u) (t2tb903 v)))
  (forall ((x (set (tuple21 a b))) (y (tuple21 a d)))
  (=> (mem (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 d1))
  (Tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 d1) (t2tb11 x) (t2tb904 y))
  (t2tb4520 r)) (and (mem4 x u) (mem32 y v)))))))

(declare-fun t2tb4804 ((set (set (tuple21 (set (tuple21 a b)) (set (tuple21 b
  d)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a b)) (set (tuple21 b d)))))))
  (sort (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 b1 d1)))))
  (t2tb4804 x))))

(declare-fun tb2t4804 (uni) (set (set (tuple21 (set (tuple21 a b))
  (set (tuple21 b d))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a b)) (set (tuple21 b d)))))))
  (! (= (tb2t4804 (t2tb4804 i)) i) :pattern ((t2tb4804 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 b1 d1))))) j)
     (= (t2tb4804 (tb2t4804 j)) j)) :pattern ((t2tb4804 (tb2t4804 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a b)))) (v (set (set (tuple21 b d))))
  (r (set (tuple21 (set (tuple21 a b)) (set (tuple21 b d))))))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 b1 d1))))
  (t2tb4522 r)
  (relation (set1 (tuple2 b1 d1)) (set1 (tuple2 a1 b1)) (t2tb10 u)
  (t2tb906 v)))
  (forall ((x (set (tuple21 a b))) (y (set (tuple21 b d))))
  (=> (mem (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 b1 d1)))
  (Tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 b1 d1)) (t2tb11 x) (t2tb687 y))
  (t2tb4522 r)) (and (mem4 x u) (mem33 y v)))))))

(declare-fun t2tb4805 ((set (set (tuple21 (set (tuple21 a b)) (tuple21 b
  d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a b)) (tuple21 b d)))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 b1 d1)))) (t2tb4805 x))))

(declare-fun tb2t4805 (uni) (set (set (tuple21 (set (tuple21 a b)) (tuple21 b
  d)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a b)) (tuple21 b d))))))
  (! (= (tb2t4805 (t2tb4805 i)) i) :pattern ((t2tb4805 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 b1 d1)))) j)
     (= (t2tb4805 (tb2t4805 j)) j)) :pattern ((t2tb4805 (tb2t4805 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a b)))) (v (set (tuple21 b d)))
  (r (set (tuple21 (set (tuple21 a b)) (tuple21 b d)))))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 b1 d1))) (t2tb4524 r)
  (relation (tuple2 b1 d1) (set1 (tuple2 a1 b1)) (t2tb10 u) (t2tb687 v)))
  (forall ((x (set (tuple21 a b))) (y (tuple21 b d)))
  (=> (mem (tuple2 (set1 (tuple2 a1 b1)) (tuple2 b1 d1))
  (Tuple2 (set1 (tuple2 a1 b1)) (tuple2 b1 d1) (t2tb11 x) (t2tb692 y))
  (t2tb4524 r)) (and (mem4 x u) (mem23 y v)))))))

(declare-fun t2tb996 ((set (set (tuple21 (set (tuple21 a b)) d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a b)) d))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) d1))) (t2tb996 x))))

(declare-fun tb2t996 (uni) (set (set (tuple21 (set (tuple21 a b)) d))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a b)) d)))))
  (! (= (tb2t996 (t2tb996 i)) i) :pattern ((t2tb996 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) d1))) j)
     (= (t2tb996 (tb2t996 j)) j)) :pattern ((t2tb996 (tb2t996 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a b)))) (v (set d))
  (r (set (tuple21 (set (tuple21 a b)) d))))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 b1)) d1)) (t2tb869 r)
  (relation d1 (set1 (tuple2 a1 b1)) (t2tb10 u) (t2tb690 v)))
  (forall ((x (set (tuple21 a b))) (y d))
  (=> (mem (tuple2 (set1 (tuple2 a1 b1)) d1)
  (Tuple2 (set1 (tuple2 a1 b1)) d1 (t2tb11 x) (t2tb694 y)) (t2tb869 r))
  (and (mem4 x u) (mem20 y v)))))))

(declare-fun t2tb4806 ((set (set (tuple21 (set (tuple21 a b)) (tuple21 a
  (tuple21 b c)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a b)) (tuple21 a (tuple21 b
  c))))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 (tuple2 b1 c1)))))
  (t2tb4806 x))))

(declare-fun tb2t4806 (uni) (set (set (tuple21 (set (tuple21 a b)) (tuple21 a
  (tuple21 b c))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a b)) (tuple21 a (tuple21 b
  c))))))) (! (= (tb2t4806 (t2tb4806 i)) i) :pattern ((t2tb4806 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 (tuple2 b1 c1)))))
     j) (= (t2tb4806 (tb2t4806 j)) j)) :pattern ((t2tb4806 (tb2t4806 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a b)))) (v (set (tuple21 a (tuple21 b c))))
  (r (set (tuple21 (set (tuple21 a b)) (tuple21 a (tuple21 b c))))))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 (tuple2 b1 c1))))
  (t2tb4526 r)
  (relation (tuple2 a1 (tuple2 b1 c1)) (set1 (tuple2 a1 b1)) (t2tb10 u)
  (t2tb261 v)))
  (forall ((x (set (tuple21 a b))) (y (tuple21 a (tuple21 b c))))
  (=> (mem (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 (tuple2 b1 c1)) (t2tb11 x)
  (t2tb260 y)) (t2tb4526 r)) (and (mem4 x u) (mem14 y v)))))))

(declare-fun t2tb4807 ((set (set (tuple21 (set (tuple21 a b)) (set (tuple21 a
  c)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a b)) (set (tuple21 a c)))))))
  (sort (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 c1)))))
  (t2tb4807 x))))

(declare-fun tb2t4807 (uni) (set (set (tuple21 (set (tuple21 a b))
  (set (tuple21 a c))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a b)) (set (tuple21 a c)))))))
  (! (= (tb2t4807 (t2tb4807 i)) i) :pattern ((t2tb4807 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 c1))))) j)
     (= (t2tb4807 (tb2t4807 j)) j)) :pattern ((t2tb4807 (tb2t4807 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a b)))) (v (set (set (tuple21 a c))))
  (r (set (tuple21 (set (tuple21 a b)) (set (tuple21 a c))))))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 c1))))
  (t2tb4528 r)
  (relation (set1 (tuple2 a1 c1)) (set1 (tuple2 a1 b1)) (t2tb10 u)
  (t2tb128 v)))
  (forall ((x (set (tuple21 a b))) (y (set (tuple21 a c))))
  (=> (mem (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 c1)))
  (Tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 c1)) (t2tb11 x) (t2tb129 y))
  (t2tb4528 r)) (and (mem4 x u) (mem11 y v)))))))

(declare-fun t2tb311 ((set (set (tuple21 (set (tuple21 a b)) (tuple21 a
  c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a b)) (tuple21 a c)))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 c1)))) (t2tb311 x))))

(declare-fun tb2t311 (uni) (set (set (tuple21 (set (tuple21 a b)) (tuple21 a
  c)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a b)) (tuple21 a c))))))
  (! (= (tb2t311 (t2tb311 i)) i) :pattern ((t2tb311 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 c1)))) j)
     (= (t2tb311 (tb2t311 j)) j)) :pattern ((t2tb311 (tb2t311 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a b)))) (v (set (tuple21 a c)))
  (r (set (tuple21 (set (tuple21 a b)) (tuple21 a c)))))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 c1))) (t2tb229 r)
  (relation (tuple2 a1 c1) (set1 (tuple2 a1 b1)) (t2tb10 u) (t2tb129 v)))
  (forall ((x (set (tuple21 a b))) (y (tuple21 a c)))
  (=> (mem (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 c1))
  (Tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 c1) (t2tb11 x) (t2tb133 y))
  (t2tb229 r)) (and (mem4 x u) (mem10 y v)))))))

(declare-fun t2tb314 ((set (set (tuple21 (set (tuple21 a b)) c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a b)) c))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) c1))) (t2tb314 x))))

(declare-fun tb2t314 (uni) (set (set (tuple21 (set (tuple21 a b)) c))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a b)) c)))))
  (! (= (tb2t314 (t2tb314 i)) i) :pattern ((t2tb314 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) c1))) j)
     (= (t2tb314 (tb2t314 j)) j)) :pattern ((t2tb314 (tb2t314 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a b)))) (v (set c))
  (r (set (tuple21 (set (tuple21 a b)) c))))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 b1)) c1)) (t2tb234 r)
  (relation c1 (set1 (tuple2 a1 b1)) (t2tb10 u) (t2tb132 v)))
  (forall ((x (set (tuple21 a b))) (y c))
  (=> (mem (tuple2 (set1 (tuple2 a1 b1)) c1)
  (Tuple2 (set1 (tuple2 a1 b1)) c1 (t2tb11 x) (t2tb135 y)) (t2tb234 r))
  (and (mem4 x u) (mem7 y v)))))))

(declare-fun t2tb45 ((set (set (tuple21 (set (tuple21 a b)) (set (tuple21 a
  b)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a b)) (set (tuple21 a b)))))))
  (sort (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1)))))
  (t2tb45 x))))

(declare-fun tb2t45 (uni) (set (set (tuple21 (set (tuple21 a b))
  (set (tuple21 a b))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a b)) (set (tuple21 a b)))))))
  (! (= (tb2t45 (t2tb45 i)) i) :pattern ((t2tb45 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1))))) j)
     (= (t2tb45 (tb2t45 j)) j)) :pattern ((t2tb45 (tb2t45 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a b)))) (v (set (set (tuple21 a b))))
  (r (set (tuple21 (set (tuple21 a b)) (set (tuple21 a b))))))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1))))
  (t2tb15 r)
  (relation (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1)) (t2tb10 u)
  (t2tb10 v)))
  (forall ((x (set (tuple21 a b))) (y (set (tuple21 a b))))
  (=> (mem (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1)))
  (Tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1)) (t2tb11 x) (t2tb11 y))
  (t2tb15 r)) (and (mem4 x u) (mem4 y v)))))))

(declare-fun t2tb46 ((set (set (tuple21 (set (tuple21 a b)) (tuple21 a
  b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a b)) (tuple21 a b)))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 b1)))) (t2tb46 x))))

(declare-fun tb2t46 (uni) (set (set (tuple21 (set (tuple21 a b)) (tuple21 a
  b)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a b)) (tuple21 a b))))))
  (! (= (tb2t46 (t2tb46 i)) i) :pattern ((t2tb46 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 b1)))) j)
     (= (t2tb46 (tb2t46 j)) j)) :pattern ((t2tb46 (tb2t46 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a b)))) (v (set (tuple21 a b)))
  (r (set (tuple21 (set (tuple21 a b)) (tuple21 a b)))))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 b1))) (t2tb17 r)
  (relation (tuple2 a1 b1) (set1 (tuple2 a1 b1)) (t2tb10 u) (t2tb11 v)))
  (forall ((x (set (tuple21 a b))) (y (tuple21 a b)))
  (=> (mem (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 b1))
  (Tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 b1) (t2tb11 x) (t2tb13 y))
  (t2tb17 r)) (and (mem4 x u) (mem3 y v)))))))

(declare-fun t2tb47 ((set (set (tuple21 (set (tuple21 a b)) b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a b)) b))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) b1))) (t2tb47 x))))

(declare-fun tb2t47 (uni) (set (set (tuple21 (set (tuple21 a b)) b))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a b)) b)))))
  (! (= (tb2t47 (t2tb47 i)) i) :pattern ((t2tb47 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) b1))) j)
     (= (t2tb47 (tb2t47 j)) j)) :pattern ((t2tb47 (tb2t47 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a b)))) (v (set b))
  (r (set (tuple21 (set (tuple21 a b)) b))))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 b1)) b1)) (t2tb19 r)
  (relation b1 (set1 (tuple2 a1 b1)) (t2tb10 u) (t2tb12 v)))
  (forall ((x (set (tuple21 a b))) (y b))
  (=> (mem (tuple2 (set1 (tuple2 a1 b1)) b1)
  (Tuple2 (set1 (tuple2 a1 b1)) b1 (t2tb11 x) (t2tb14 y)) (t2tb19 r))
  (and (mem4 x u) (mem2 y v)))))))

(declare-fun t2tb48 ((set (set (tuple21 (set (tuple21 a b)) a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a b)) a))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) a1))) (t2tb48 x))))

(declare-fun tb2t48 (uni) (set (set (tuple21 (set (tuple21 a b)) a))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a b)) a)))))
  (! (= (tb2t48 (t2tb48 i)) i) :pattern ((t2tb48 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 a1 b1)) a1))) j)
     (= (t2tb48 (tb2t48 j)) j)) :pattern ((t2tb48 (tb2t48 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a b)))) (v (set a))
  (r (set (tuple21 (set (tuple21 a b)) a))))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 b1)) a1)) (t2tb22 r)
  (relation a1 (set1 (tuple2 a1 b1)) (t2tb10 u) (t2tb1 v)))
  (forall ((x (set (tuple21 a b))) (y a))
  (=> (mem (tuple2 (set1 (tuple2 a1 b1)) a1)
  (Tuple2 (set1 (tuple2 a1 b1)) a1 (t2tb11 x) (t2tb2 y)) (t2tb22 r))
  (and (mem4 x u) (mem1 y v)))))))

;; mem_relation
  (assert
  (forall ((b2 ty))
  (forall ((u (set (set (tuple21 a b)))) (v uni) (r uni))
  (and
  (=> (mem (set1 (tuple2 (set1 (tuple2 a1 b1)) b2)) r
  (relation b2 (set1 (tuple2 a1 b1)) (t2tb10 u) v))
  (forall ((x (set (tuple21 a b))) (y uni))
  (=> (mem (tuple2 (set1 (tuple2 a1 b1)) b2)
  (Tuple2 (set1 (tuple2 a1 b1)) b2 (t2tb11 x) y) r)
  (and (mem4 x u) (mem b2 y v)))))
  (=>
  (forall ((x (set (tuple21 a b))) (y uni))
  (=> (sort b2 y)
  (=> (mem (tuple2 (set1 (tuple2 a1 b1)) b2)
  (Tuple2 (set1 (tuple2 a1 b1)) b2 (t2tb11 x) y) r)
  (and (mem4 x u) (mem b2 y v))))) (mem
  (set1 (tuple2 (set1 (tuple2 a1 b1)) b2)) r
  (relation b2 (set1 (tuple2 a1 b1)) (t2tb10 u) v)))))))

(declare-fun t2tb4808 ((set (set (tuple21 (tuple21 a b) (tuple21 (tuple21 b
  c) (tuple21 d e)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a b) (tuple21 (tuple21 b c)
  (tuple21 d e))))))) (sort
  (set1
  (set1 (tuple2 (tuple2 a1 b1) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)))))
  (t2tb4808 x))))

(declare-fun tb2t4808 (uni) (set (set (tuple21 (tuple21 a b)
  (tuple21 (tuple21 b c) (tuple21 d e))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a b) (tuple21 (tuple21 b c)
  (tuple21 d e)))))))
  (! (= (tb2t4808 (t2tb4808 i)) i) :pattern ((t2tb4808 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (set1 (tuple2 (tuple2 a1 b1) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)))))
     j) (= (t2tb4808 (tb2t4808 j)) j)) :pattern ((t2tb4808 (tb2t4808 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a b))) (v (set (tuple21 (tuple21 b c) (tuple21 d
  e)))) (r (set (tuple21 (tuple21 a b) (tuple21 (tuple21 b c) (tuple21 d
  e))))))
  (= (mem
  (set1 (tuple2 (tuple2 a1 b1) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1))))
  (t2tb4530 r)
  (relation (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (tuple2 a1 b1) (t2tb11 u)
  (t2tb4102 v)))
  (forall ((x (tuple21 a b)) (y (tuple21 (tuple21 b c) (tuple21 d e))))
  (=> (mem (tuple2 (tuple2 a1 b1) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)))
  (Tuple2 (tuple2 a1 b1) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (t2tb13 x)
  (t2tb4104 y)) (t2tb4530 r)) (and (mem3 x u) (mem49 y v)))))))

(declare-fun t2tb4809 ((set (set (tuple21 (tuple21 a b) (tuple21 a (tuple21 d
  e)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a b) (tuple21 a (tuple21 d e)))))))
  (sort (set1 (set1 (tuple2 (tuple2 a1 b1) (tuple2 a1 (tuple2 d1 e1)))))
  (t2tb4809 x))))

(declare-fun tb2t4809 (uni) (set (set (tuple21 (tuple21 a b) (tuple21 a
  (tuple21 d e))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a b) (tuple21 a (tuple21 d e)))))))
  (! (= (tb2t4809 (t2tb4809 i)) i) :pattern ((t2tb4809 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (tuple2 a1 b1) (tuple2 a1 (tuple2 d1 e1))))) j)
     (= (t2tb4809 (tb2t4809 j)) j)) :pattern ((t2tb4809 (tb2t4809 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a b))) (v (set (tuple21 a (tuple21 d e))))
  (r (set (tuple21 (tuple21 a b) (tuple21 a (tuple21 d e))))))
  (= (mem (set1 (tuple2 (tuple2 a1 b1) (tuple2 a1 (tuple2 d1 e1))))
  (t2tb4532 r)
  (relation (tuple2 a1 (tuple2 d1 e1)) (tuple2 a1 b1) (t2tb11 u)
  (t2tb4103 v)))
  (forall ((x (tuple21 a b)) (y (tuple21 a (tuple21 d e))))
  (=> (mem (tuple2 (tuple2 a1 b1) (tuple2 a1 (tuple2 d1 e1)))
  (Tuple2 (tuple2 a1 b1) (tuple2 a1 (tuple2 d1 e1)) (t2tb13 x) (t2tb4105 y))
  (t2tb4532 r)) (and (mem3 x u) (mem48 y v)))))))

(declare-fun t2tb4810 ((set (set (tuple21 (tuple21 a b) (set (tuple21 c
  e)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a b) (set (tuple21 c e))))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 b1) (set1 (tuple2 c1 e1))))) (t2tb4810 x))))

(declare-fun tb2t4810 (uni) (set (set (tuple21 (tuple21 a b) (set (tuple21 c
  e))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a b) (set (tuple21 c e)))))))
  (! (= (tb2t4810 (t2tb4810 i)) i) :pattern ((t2tb4810 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 b1) (set1 (tuple2 c1 e1))))) j)
     (= (t2tb4810 (tb2t4810 j)) j)) :pattern ((t2tb4810 (tb2t4810 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a b))) (v (set (set (tuple21 c e))))
  (r (set (tuple21 (tuple21 a b) (set (tuple21 c e))))))
  (= (mem (set1 (tuple2 (tuple2 a1 b1) (set1 (tuple2 c1 e1)))) (t2tb4534 r)
  (relation (set1 (tuple2 c1 e1)) (tuple2 a1 b1) (t2tb11 u) (t2tb3854 v)))
  (forall ((x (tuple21 a b)) (y (set (tuple21 c e))))
  (=> (mem (tuple2 (tuple2 a1 b1) (set1 (tuple2 c1 e1)))
  (Tuple2 (tuple2 a1 b1) (set1 (tuple2 c1 e1)) (t2tb13 x) (t2tb3478 y))
  (t2tb4534 r)) (and (mem3 x u) (mem47 y v)))))))

(declare-fun t2tb4811 ((set (set (tuple21 (tuple21 a b) (tuple21 c
  e))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a b) (tuple21 c e)))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 b1) (tuple2 c1 e1)))) (t2tb4811 x))))

(declare-fun tb2t4811 (uni) (set (set (tuple21 (tuple21 a b) (tuple21 c
  e)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a b) (tuple21 c e))))))
  (! (= (tb2t4811 (t2tb4811 i)) i) :pattern ((t2tb4811 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 b1) (tuple2 c1 e1)))) j)
     (= (t2tb4811 (tb2t4811 j)) j)) :pattern ((t2tb4811 (tb2t4811 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a b))) (v (set (tuple21 c e)))
  (r (set (tuple21 (tuple21 a b) (tuple21 c e)))))
  (= (mem (set1 (tuple2 (tuple2 a1 b1) (tuple2 c1 e1))) (t2tb4536 r)
  (relation (tuple2 c1 e1) (tuple2 a1 b1) (t2tb11 u) (t2tb3478 v)))
  (forall ((x (tuple21 a b)) (y (tuple21 c e)))
  (=> (mem (tuple2 (tuple2 a1 b1) (tuple2 c1 e1))
  (Tuple2 (tuple2 a1 b1) (tuple2 c1 e1) (t2tb13 x) (t2tb3479 y))
  (t2tb4536 r)) (and (mem3 x u) (mem46 y v)))))))

(declare-fun t2tb3872 ((set (set (tuple21 (tuple21 a b) (tuple21 a
  e))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a b) (tuple21 a e)))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 b1) (tuple2 a1 e1)))) (t2tb3872 x))))

(declare-fun tb2t3872 (uni) (set (set (tuple21 (tuple21 a b) (tuple21 a
  e)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a b) (tuple21 a e))))))
  (! (= (tb2t3872 (t2tb3872 i)) i) :pattern ((t2tb3872 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 b1) (tuple2 a1 e1)))) j)
     (= (t2tb3872 (tb2t3872 j)) j)) :pattern ((t2tb3872 (tb2t3872 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a b))) (v (set (tuple21 a e)))
  (r (set (tuple21 (tuple21 a b) (tuple21 a e)))))
  (= (mem (set1 (tuple2 (tuple2 a1 b1) (tuple2 a1 e1))) (t2tb3512 r)
  (relation (tuple2 a1 e1) (tuple2 a1 b1) (t2tb11 u) (t2tb2943 v)))
  (forall ((x (tuple21 a b)) (y (tuple21 a e)))
  (=> (mem (tuple2 (tuple2 a1 b1) (tuple2 a1 e1))
  (Tuple2 (tuple2 a1 b1) (tuple2 a1 e1) (t2tb13 x) (t2tb2949 y))
  (t2tb3512 r)) (and (mem3 x u) (mem44 y v)))))))

(declare-fun t2tb3880 ((set (set (tuple21 (tuple21 a b) e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a b) e))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 b1) e1))) (t2tb3880 x))))

(declare-fun tb2t3880 (uni) (set (set (tuple21 (tuple21 a b) e))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a b) e)))))
  (! (= (tb2t3880 (t2tb3880 i)) i) :pattern ((t2tb3880 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 b1) e1))) j)
     (= (t2tb3880 (tb2t3880 j)) j)) :pattern ((t2tb3880 (tb2t3880 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a b))) (v (set e)) (r (set (tuple21 (tuple21 a b)
  e))))
  (= (mem (set1 (tuple2 (tuple2 a1 b1) e1)) (t2tb3528 r)
  (relation e1 (tuple2 a1 b1) (t2tb11 u) (t2tb2947 v)))
  (forall ((x (tuple21 a b)) (y e))
  (=> (mem (tuple2 (tuple2 a1 b1) e1)
  (Tuple2 (tuple2 a1 b1) e1 (t2tb13 x) (t2tb2955 y)) (t2tb3528 r))
  (and (mem3 x u) (mem36 y v)))))))

(declare-fun t2tb4812 ((set (set (tuple21 (tuple21 a b) (tuple21 a
  d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a b) (tuple21 a d)))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 b1) (tuple2 a1 d1)))) (t2tb4812 x))))

(declare-fun tb2t4812 (uni) (set (set (tuple21 (tuple21 a b) (tuple21 a
  d)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a b) (tuple21 a d))))))
  (! (= (tb2t4812 (t2tb4812 i)) i) :pattern ((t2tb4812 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 b1) (tuple2 a1 d1)))) j)
     (= (t2tb4812 (tb2t4812 j)) j)) :pattern ((t2tb4812 (tb2t4812 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a b))) (v (set (tuple21 a d)))
  (r (set (tuple21 (tuple21 a b) (tuple21 a d)))))
  (= (mem (set1 (tuple2 (tuple2 a1 b1) (tuple2 a1 d1))) (t2tb4538 r)
  (relation (tuple2 a1 d1) (tuple2 a1 b1) (t2tb11 u) (t2tb903 v)))
  (forall ((x (tuple21 a b)) (y (tuple21 a d)))
  (=> (mem (tuple2 (tuple2 a1 b1) (tuple2 a1 d1))
  (Tuple2 (tuple2 a1 b1) (tuple2 a1 d1) (t2tb13 x) (t2tb904 y)) (t2tb4538 r))
  (and (mem3 x u) (mem32 y v)))))))

(declare-fun t2tb4813 ((set (set (tuple21 (tuple21 a b) (set (tuple21 b
  d)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a b) (set (tuple21 b d))))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 b1) (set1 (tuple2 b1 d1))))) (t2tb4813 x))))

(declare-fun tb2t4813 (uni) (set (set (tuple21 (tuple21 a b) (set (tuple21 b
  d))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a b) (set (tuple21 b d)))))))
  (! (= (tb2t4813 (t2tb4813 i)) i) :pattern ((t2tb4813 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 b1) (set1 (tuple2 b1 d1))))) j)
     (= (t2tb4813 (tb2t4813 j)) j)) :pattern ((t2tb4813 (tb2t4813 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a b))) (v (set (set (tuple21 b d))))
  (r (set (tuple21 (tuple21 a b) (set (tuple21 b d))))))
  (= (mem (set1 (tuple2 (tuple2 a1 b1) (set1 (tuple2 b1 d1)))) (t2tb4540 r)
  (relation (set1 (tuple2 b1 d1)) (tuple2 a1 b1) (t2tb11 u) (t2tb906 v)))
  (forall ((x (tuple21 a b)) (y (set (tuple21 b d))))
  (=> (mem (tuple2 (tuple2 a1 b1) (set1 (tuple2 b1 d1)))
  (Tuple2 (tuple2 a1 b1) (set1 (tuple2 b1 d1)) (t2tb13 x) (t2tb687 y))
  (t2tb4540 r)) (and (mem3 x u) (mem33 y v)))))))

(declare-fun t2tb4814 ((set (set (tuple21 (tuple21 a b) (tuple21 b
  d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a b) (tuple21 b d)))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 b1) (tuple2 b1 d1)))) (t2tb4814 x))))

(declare-fun tb2t4814 (uni) (set (set (tuple21 (tuple21 a b) (tuple21 b
  d)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a b) (tuple21 b d))))))
  (! (= (tb2t4814 (t2tb4814 i)) i) :pattern ((t2tb4814 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 b1) (tuple2 b1 d1)))) j)
     (= (t2tb4814 (tb2t4814 j)) j)) :pattern ((t2tb4814 (tb2t4814 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a b))) (v (set (tuple21 b d)))
  (r (set (tuple21 (tuple21 a b) (tuple21 b d)))))
  (= (mem (set1 (tuple2 (tuple2 a1 b1) (tuple2 b1 d1))) (t2tb4542 r)
  (relation (tuple2 b1 d1) (tuple2 a1 b1) (t2tb11 u) (t2tb687 v)))
  (forall ((x (tuple21 a b)) (y (tuple21 b d)))
  (=> (mem (tuple2 (tuple2 a1 b1) (tuple2 b1 d1))
  (Tuple2 (tuple2 a1 b1) (tuple2 b1 d1) (t2tb13 x) (t2tb692 y)) (t2tb4542 r))
  (and (mem3 x u) (mem23 y v)))))))

(declare-fun t2tb1002 ((set (set (tuple21 (tuple21 a b) d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a b) d))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 b1) d1))) (t2tb1002 x))))

(declare-fun tb2t1002 (uni) (set (set (tuple21 (tuple21 a b) d))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a b) d)))))
  (! (= (tb2t1002 (t2tb1002 i)) i) :pattern ((t2tb1002 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 b1) d1))) j)
     (= (t2tb1002 (tb2t1002 j)) j)) :pattern ((t2tb1002 (tb2t1002 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a b))) (v (set d)) (r (set (tuple21 (tuple21 a b)
  d))))
  (= (mem (set1 (tuple2 (tuple2 a1 b1) d1)) (t2tb881 r)
  (relation d1 (tuple2 a1 b1) (t2tb11 u) (t2tb690 v)))
  (forall ((x (tuple21 a b)) (y d))
  (=> (mem (tuple2 (tuple2 a1 b1) d1)
  (Tuple2 (tuple2 a1 b1) d1 (t2tb13 x) (t2tb694 y)) (t2tb881 r))
  (and (mem3 x u) (mem20 y v)))))))

(declare-fun t2tb4815 ((set (set (tuple21 (tuple21 a b) (tuple21 a (tuple21 b
  c)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a b) (tuple21 a (tuple21 b c)))))))
  (sort (set1 (set1 (tuple2 (tuple2 a1 b1) (tuple2 a1 (tuple2 b1 c1)))))
  (t2tb4815 x))))

(declare-fun tb2t4815 (uni) (set (set (tuple21 (tuple21 a b) (tuple21 a
  (tuple21 b c))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a b) (tuple21 a (tuple21 b c)))))))
  (! (= (tb2t4815 (t2tb4815 i)) i) :pattern ((t2tb4815 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (tuple2 a1 b1) (tuple2 a1 (tuple2 b1 c1))))) j)
     (= (t2tb4815 (tb2t4815 j)) j)) :pattern ((t2tb4815 (tb2t4815 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a b))) (v (set (tuple21 a (tuple21 b c))))
  (r (set (tuple21 (tuple21 a b) (tuple21 a (tuple21 b c))))))
  (= (mem (set1 (tuple2 (tuple2 a1 b1) (tuple2 a1 (tuple2 b1 c1))))
  (t2tb4544 r)
  (relation (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 b1) (t2tb11 u) (t2tb261 v)))
  (forall ((x (tuple21 a b)) (y (tuple21 a (tuple21 b c))))
  (=> (mem (tuple2 (tuple2 a1 b1) (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 (tuple2 a1 b1) (tuple2 a1 (tuple2 b1 c1)) (t2tb13 x) (t2tb260 y))
  (t2tb4544 r)) (and (mem3 x u) (mem14 y v)))))))

(declare-fun t2tb4816 ((set (set (tuple21 (tuple21 a b) (set (tuple21 a
  c)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a b) (set (tuple21 a c))))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 c1))))) (t2tb4816 x))))

(declare-fun tb2t4816 (uni) (set (set (tuple21 (tuple21 a b) (set (tuple21 a
  c))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a b) (set (tuple21 a c)))))))
  (! (= (tb2t4816 (t2tb4816 i)) i) :pattern ((t2tb4816 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 c1))))) j)
     (= (t2tb4816 (tb2t4816 j)) j)) :pattern ((t2tb4816 (tb2t4816 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a b))) (v (set (set (tuple21 a c))))
  (r (set (tuple21 (tuple21 a b) (set (tuple21 a c))))))
  (= (mem (set1 (tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 c1)))) (t2tb4546 r)
  (relation (set1 (tuple2 a1 c1)) (tuple2 a1 b1) (t2tb11 u) (t2tb128 v)))
  (forall ((x (tuple21 a b)) (y (set (tuple21 a c))))
  (=> (mem (tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 c1)))
  (Tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 c1)) (t2tb13 x) (t2tb129 y))
  (t2tb4546 r)) (and (mem3 x u) (mem11 y v)))))))

(declare-fun t2tb316 ((set (set (tuple21 (tuple21 a b) (tuple21 a c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a b) (tuple21 a c)))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)))) (t2tb316 x))))

(declare-fun tb2t316 (uni) (set (set (tuple21 (tuple21 a b) (tuple21 a c)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a b) (tuple21 a c))))))
  (! (= (tb2t316 (t2tb316 i)) i) :pattern ((t2tb316 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)))) j)
     (= (t2tb316 (tb2t316 j)) j)) :pattern ((t2tb316 (tb2t316 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a b))) (v (set (tuple21 a c)))
  (r (set (tuple21 (tuple21 a b) (tuple21 a c)))))
  (= (mem (set1 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1))) (t2tb238 r)
  (relation (tuple2 a1 c1) (tuple2 a1 b1) (t2tb11 u) (t2tb129 v)))
  (forall ((x (tuple21 a b)) (y (tuple21 a c)))
  (=> (mem (tuple2 (tuple2 a1 b1) (tuple2 a1 c1))
  (Tuple2 (tuple2 a1 b1) (tuple2 a1 c1) (t2tb13 x) (t2tb133 y)) (t2tb238 r))
  (and (mem3 x u) (mem10 y v)))))))

(declare-fun t2tb319 ((set (set (tuple21 (tuple21 a b) c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a b) c))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 b1) c1))) (t2tb319 x))))

(declare-fun tb2t319 (uni) (set (set (tuple21 (tuple21 a b) c))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a b) c)))))
  (! (= (tb2t319 (t2tb319 i)) i) :pattern ((t2tb319 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 b1) c1))) j)
     (= (t2tb319 (tb2t319 j)) j)) :pattern ((t2tb319 (tb2t319 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a b))) (v (set c)) (r (set (tuple21 (tuple21 a b)
  c))))
  (= (mem (set1 (tuple2 (tuple2 a1 b1) c1)) (t2tb245 r)
  (relation c1 (tuple2 a1 b1) (t2tb11 u) (t2tb132 v)))
  (forall ((x (tuple21 a b)) (y c))
  (=> (mem (tuple2 (tuple2 a1 b1) c1)
  (Tuple2 (tuple2 a1 b1) c1 (t2tb13 x) (t2tb135 y)) (t2tb245 r))
  (and (mem3 x u) (mem7 y v)))))))

(declare-fun t2tb49 ((set (set (tuple21 (tuple21 a b) (set (tuple21 a
  b)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a b) (set (tuple21 a b))))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 b1))))) (t2tb49 x))))

(declare-fun tb2t49 (uni) (set (set (tuple21 (tuple21 a b) (set (tuple21 a
  b))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a b) (set (tuple21 a b)))))))
  (! (= (tb2t49 (t2tb49 i)) i) :pattern ((t2tb49 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 b1))))) j)
     (= (t2tb49 (tb2t49 j)) j)) :pattern ((t2tb49 (tb2t49 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a b))) (v (set (set (tuple21 a b))))
  (r (set (tuple21 (tuple21 a b) (set (tuple21 a b))))))
  (= (mem (set1 (tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 b1)))) (t2tb23 r)
  (relation (set1 (tuple2 a1 b1)) (tuple2 a1 b1) (t2tb11 u) (t2tb10 v)))
  (forall ((x (tuple21 a b)) (y (set (tuple21 a b))))
  (=> (mem (tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 b1)))
  (Tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 b1)) (t2tb13 x) (t2tb11 y))
  (t2tb23 r)) (and (mem3 x u) (mem4 y v)))))))

(declare-fun t2tb50 ((set (set (tuple21 (tuple21 a b) (tuple21 a b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a b) (tuple21 a b)))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 b1) (tuple2 a1 b1)))) (t2tb50 x))))

(declare-fun tb2t50 (uni) (set (set (tuple21 (tuple21 a b) (tuple21 a b)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a b) (tuple21 a b))))))
  (! (= (tb2t50 (t2tb50 i)) i) :pattern ((t2tb50 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 b1) (tuple2 a1 b1)))) j)
     (= (t2tb50 (tb2t50 j)) j)) :pattern ((t2tb50 (tb2t50 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a b))) (v (set (tuple21 a b)))
  (r (set (tuple21 (tuple21 a b) (tuple21 a b)))))
  (= (mem (set1 (tuple2 (tuple2 a1 b1) (tuple2 a1 b1))) (t2tb25 r)
  (relation (tuple2 a1 b1) (tuple2 a1 b1) (t2tb11 u) (t2tb11 v)))
  (forall ((x (tuple21 a b)) (y (tuple21 a b)))
  (=> (mem (tuple2 (tuple2 a1 b1) (tuple2 a1 b1))
  (Tuple2 (tuple2 a1 b1) (tuple2 a1 b1) (t2tb13 x) (t2tb13 y)) (t2tb25 r))
  (and (mem3 x u) (mem3 y v)))))))

(declare-fun t2tb51 ((set (set (tuple21 (tuple21 a b) b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a b) b))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 b1) b1))) (t2tb51 x))))

(declare-fun tb2t51 (uni) (set (set (tuple21 (tuple21 a b) b))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a b) b)))))
  (! (= (tb2t51 (t2tb51 i)) i) :pattern ((t2tb51 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 b1) b1))) j)
     (= (t2tb51 (tb2t51 j)) j)) :pattern ((t2tb51 (tb2t51 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a b))) (v (set b)) (r (set (tuple21 (tuple21 a b)
  b))))
  (= (mem (set1 (tuple2 (tuple2 a1 b1) b1)) (t2tb27 r)
  (relation b1 (tuple2 a1 b1) (t2tb11 u) (t2tb12 v)))
  (forall ((x (tuple21 a b)) (y b))
  (=> (mem (tuple2 (tuple2 a1 b1) b1)
  (Tuple2 (tuple2 a1 b1) b1 (t2tb13 x) (t2tb14 y)) (t2tb27 r))
  (and (mem3 x u) (mem2 y v)))))))

(declare-fun t2tb52 ((set (set (tuple21 (tuple21 a b) a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a b) a))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 b1) a1))) (t2tb52 x))))

(declare-fun tb2t52 (uni) (set (set (tuple21 (tuple21 a b) a))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a b) a)))))
  (! (= (tb2t52 (t2tb52 i)) i) :pattern ((t2tb52 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 b1) a1))) j)
     (= (t2tb52 (tb2t52 j)) j)) :pattern ((t2tb52 (tb2t52 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a b))) (v (set a)) (r (set (tuple21 (tuple21 a b)
  a))))
  (= (mem (set1 (tuple2 (tuple2 a1 b1) a1)) (t2tb29 r)
  (relation a1 (tuple2 a1 b1) (t2tb11 u) (t2tb1 v)))
  (forall ((x (tuple21 a b)) (y a))
  (=> (mem (tuple2 (tuple2 a1 b1) a1)
  (Tuple2 (tuple2 a1 b1) a1 (t2tb13 x) (t2tb2 y)) (t2tb29 r))
  (and (mem3 x u) (mem1 y v)))))))

;; mem_relation
  (assert
  (forall ((b2 ty))
  (forall ((u (set (tuple21 a b))) (v uni) (r uni))
  (and
  (=> (mem (set1 (tuple2 (tuple2 a1 b1) b2)) r
  (relation b2 (tuple2 a1 b1) (t2tb11 u) v))
  (forall ((x (tuple21 a b)) (y uni))
  (=> (mem (tuple2 (tuple2 a1 b1) b2) (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) y)
  r) (and (mem3 x u) (mem b2 y v)))))
  (=>
  (forall ((x (tuple21 a b)) (y uni))
  (=> (sort b2 y)
  (=> (mem (tuple2 (tuple2 a1 b1) b2) (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) y)
  r) (and (mem3 x u) (mem b2 y v))))) (mem (set1 (tuple2 (tuple2 a1 b1) b2))
  r (relation b2 (tuple2 a1 b1) (t2tb11 u) v)))))))

(declare-fun t2tb4817 ((set (set (tuple21 b (tuple21 (tuple21 b c) (tuple21 d
  e)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 b (tuple21 (tuple21 b c) (tuple21 d e)))))))
  (sort (set1 (set1 (tuple2 b1 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)))))
  (t2tb4817 x))))

(declare-fun tb2t4817 (uni) (set (set (tuple21 b (tuple21 (tuple21 b c)
  (tuple21 d e))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 b (tuple21 (tuple21 b c) (tuple21 d e)))))))
  (! (= (tb2t4817 (t2tb4817 i)) i) :pattern ((t2tb4817 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 b1 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1))))) j)
     (= (t2tb4817 (tb2t4817 j)) j)) :pattern ((t2tb4817 (tb2t4817 j))) )))

;; mem_relation
  (assert
  (forall ((u (set b)) (v (set (tuple21 (tuple21 b c) (tuple21 d e))))
  (r (set (tuple21 b (tuple21 (tuple21 b c) (tuple21 d e))))))
  (= (mem (set1 (tuple2 b1 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1))))
  (t2tb4548 r)
  (relation (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) b1 (t2tb12 u)
  (t2tb4102 v)))
  (forall ((x b) (y (tuple21 (tuple21 b c) (tuple21 d e))))
  (=> (mem (tuple2 b1 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)))
  (Tuple2 b1 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (t2tb14 x) (t2tb4104 y))
  (t2tb4548 r)) (and (mem2 x u) (mem49 y v)))))))

(declare-fun t2tb4818 ((set (set (tuple21 b (tuple21 a (tuple21 d
  e)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 b (tuple21 a (tuple21 d e))))))) (sort
  (set1 (set1 (tuple2 b1 (tuple2 a1 (tuple2 d1 e1))))) (t2tb4818 x))))

(declare-fun tb2t4818 (uni) (set (set (tuple21 b (tuple21 a (tuple21 d
  e))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 b (tuple21 a (tuple21 d e)))))))
  (! (= (tb2t4818 (t2tb4818 i)) i) :pattern ((t2tb4818 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 b1 (tuple2 a1 (tuple2 d1 e1))))) j)
     (= (t2tb4818 (tb2t4818 j)) j)) :pattern ((t2tb4818 (tb2t4818 j))) )))

;; mem_relation
  (assert
  (forall ((u (set b)) (v (set (tuple21 a (tuple21 d e)))) (r (set (tuple21 b
  (tuple21 a (tuple21 d e))))))
  (= (mem (set1 (tuple2 b1 (tuple2 a1 (tuple2 d1 e1)))) (t2tb4550 r)
  (relation (tuple2 a1 (tuple2 d1 e1)) b1 (t2tb12 u) (t2tb4103 v)))
  (forall ((x b) (y (tuple21 a (tuple21 d e))))
  (=> (mem (tuple2 b1 (tuple2 a1 (tuple2 d1 e1)))
  (Tuple2 b1 (tuple2 a1 (tuple2 d1 e1)) (t2tb14 x) (t2tb4105 y))
  (t2tb4550 r)) (and (mem2 x u) (mem48 y v)))))))

(declare-fun t2tb4819 ((set (set (tuple21 b (set (tuple21 c e)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 b (set (tuple21 c e))))))) (sort
  (set1 (set1 (tuple2 b1 (set1 (tuple2 c1 e1))))) (t2tb4819 x))))

(declare-fun tb2t4819 (uni) (set (set (tuple21 b (set (tuple21 c e))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 b (set (tuple21 c e)))))))
  (! (= (tb2t4819 (t2tb4819 i)) i) :pattern ((t2tb4819 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 b1 (set1 (tuple2 c1 e1))))) j)
     (= (t2tb4819 (tb2t4819 j)) j)) :pattern ((t2tb4819 (tb2t4819 j))) )))

;; mem_relation
  (assert
  (forall ((u (set b)) (v (set (set (tuple21 c e)))) (r (set (tuple21 b
  (set (tuple21 c e))))))
  (= (mem (set1 (tuple2 b1 (set1 (tuple2 c1 e1)))) (t2tb4552 r)
  (relation (set1 (tuple2 c1 e1)) b1 (t2tb12 u) (t2tb3854 v)))
  (forall ((x b) (y (set (tuple21 c e))))
  (=> (mem (tuple2 b1 (set1 (tuple2 c1 e1)))
  (Tuple2 b1 (set1 (tuple2 c1 e1)) (t2tb14 x) (t2tb3478 y)) (t2tb4552 r))
  (and (mem2 x u) (mem47 y v)))))))

(declare-fun t2tb4820 ((set (set (tuple21 b (tuple21 c e))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 b (tuple21 c e)))))) (sort
  (set1 (set1 (tuple2 b1 (tuple2 c1 e1)))) (t2tb4820 x))))

(declare-fun tb2t4820 (uni) (set (set (tuple21 b (tuple21 c e)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 b (tuple21 c e))))))
  (! (= (tb2t4820 (t2tb4820 i)) i) :pattern ((t2tb4820 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 b1 (tuple2 c1 e1)))) j)
     (= (t2tb4820 (tb2t4820 j)) j)) :pattern ((t2tb4820 (tb2t4820 j))) )))

;; mem_relation
  (assert
  (forall ((u (set b)) (v (set (tuple21 c e))) (r (set (tuple21 b (tuple21 c
  e)))))
  (= (mem (set1 (tuple2 b1 (tuple2 c1 e1))) (t2tb4554 r)
  (relation (tuple2 c1 e1) b1 (t2tb12 u) (t2tb3478 v)))
  (forall ((x b) (y (tuple21 c e)))
  (=> (mem (tuple2 b1 (tuple2 c1 e1))
  (Tuple2 b1 (tuple2 c1 e1) (t2tb14 x) (t2tb3479 y)) (t2tb4554 r))
  (and (mem2 x u) (mem46 y v)))))))

(declare-fun t2tb3885 ((set (set (tuple21 b (tuple21 a e))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 b (tuple21 a e)))))) (sort
  (set1 (set1 (tuple2 b1 (tuple2 a1 e1)))) (t2tb3885 x))))

(declare-fun tb2t3885 (uni) (set (set (tuple21 b (tuple21 a e)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 b (tuple21 a e))))))
  (! (= (tb2t3885 (t2tb3885 i)) i) :pattern ((t2tb3885 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 b1 (tuple2 a1 e1)))) j)
     (= (t2tb3885 (tb2t3885 j)) j)) :pattern ((t2tb3885 (tb2t3885 j))) )))

;; mem_relation
  (assert
  (forall ((u (set b)) (v (set (tuple21 a e))) (r (set (tuple21 b (tuple21 a
  e)))))
  (= (mem (set1 (tuple2 b1 (tuple2 a1 e1))) (t2tb3536 r)
  (relation (tuple2 a1 e1) b1 (t2tb12 u) (t2tb2943 v)))
  (forall ((x b) (y (tuple21 a e)))
  (=> (mem (tuple2 b1 (tuple2 a1 e1))
  (Tuple2 b1 (tuple2 a1 e1) (t2tb14 x) (t2tb2949 y)) (t2tb3536 r))
  (and (mem2 x u) (mem44 y v)))))))

(declare-fun t2tb2941 ((set (set (tuple21 b e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 b e))))) (sort (set1 (set1 (tuple2 b1 e1)))
  (t2tb2941 x))))

(declare-fun tb2t2941 (uni) (set (set (tuple21 b e))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 b e)))))
  (! (= (tb2t2941 (t2tb2941 i)) i) :pattern ((t2tb2941 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 b1 e1))) j) (= (t2tb2941 (tb2t2941 j)) j)) :pattern (
  (t2tb2941 (tb2t2941 j))) )))

;; mem_relation
  (assert
  (forall ((u (set b)) (v (set e)) (r (set (tuple21 b e))))
  (= (mem (set1 (tuple2 b1 e1)) (t2tb2940 r)
  (relation e1 b1 (t2tb12 u) (t2tb2947 v)))
  (forall ((x b) (y e))
  (=> (mem (tuple2 b1 e1) (Tuple2 b1 e1 (t2tb14 x) (t2tb2955 y))
  (t2tb2940 r)) (and (mem2 x u) (mem36 y v)))))))

(declare-fun t2tb4821 ((set (set (tuple21 b (tuple21 a d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 b (tuple21 a d)))))) (sort
  (set1 (set1 (tuple2 b1 (tuple2 a1 d1)))) (t2tb4821 x))))

(declare-fun tb2t4821 (uni) (set (set (tuple21 b (tuple21 a d)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 b (tuple21 a d))))))
  (! (= (tb2t4821 (t2tb4821 i)) i) :pattern ((t2tb4821 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 b1 (tuple2 a1 d1)))) j)
     (= (t2tb4821 (tb2t4821 j)) j)) :pattern ((t2tb4821 (tb2t4821 j))) )))

;; mem_relation
  (assert
  (forall ((u (set b)) (v (set (tuple21 a d))) (r (set (tuple21 b (tuple21 a
  d)))))
  (= (mem (set1 (tuple2 b1 (tuple2 a1 d1))) (t2tb4556 r)
  (relation (tuple2 a1 d1) b1 (t2tb12 u) (t2tb903 v)))
  (forall ((x b) (y (tuple21 a d)))
  (=> (mem (tuple2 b1 (tuple2 a1 d1))
  (Tuple2 b1 (tuple2 a1 d1) (t2tb14 x) (t2tb904 y)) (t2tb4556 r))
  (and (mem2 x u) (mem32 y v)))))))

(declare-fun t2tb4822 ((set (set (tuple21 b (set (tuple21 b d)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 b (set (tuple21 b d))))))) (sort
  (set1 (set1 (tuple2 b1 (set1 (tuple2 b1 d1))))) (t2tb4822 x))))

(declare-fun tb2t4822 (uni) (set (set (tuple21 b (set (tuple21 b d))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 b (set (tuple21 b d)))))))
  (! (= (tb2t4822 (t2tb4822 i)) i) :pattern ((t2tb4822 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 b1 (set1 (tuple2 b1 d1))))) j)
     (= (t2tb4822 (tb2t4822 j)) j)) :pattern ((t2tb4822 (tb2t4822 j))) )))

;; mem_relation
  (assert
  (forall ((u (set b)) (v (set (set (tuple21 b d)))) (r (set (tuple21 b
  (set (tuple21 b d))))))
  (= (mem (set1 (tuple2 b1 (set1 (tuple2 b1 d1)))) (t2tb4558 r)
  (relation (set1 (tuple2 b1 d1)) b1 (t2tb12 u) (t2tb906 v)))
  (forall ((x b) (y (set (tuple21 b d))))
  (=> (mem (tuple2 b1 (set1 (tuple2 b1 d1)))
  (Tuple2 b1 (set1 (tuple2 b1 d1)) (t2tb14 x) (t2tb687 y)) (t2tb4558 r))
  (and (mem2 x u) (mem33 y v)))))))

(declare-fun t2tb4823 ((set (set (tuple21 b (tuple21 b d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 b (tuple21 b d)))))) (sort
  (set1 (set1 (tuple2 b1 (tuple2 b1 d1)))) (t2tb4823 x))))

(declare-fun tb2t4823 (uni) (set (set (tuple21 b (tuple21 b d)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 b (tuple21 b d))))))
  (! (= (tb2t4823 (t2tb4823 i)) i) :pattern ((t2tb4823 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 b1 (tuple2 b1 d1)))) j)
     (= (t2tb4823 (tb2t4823 j)) j)) :pattern ((t2tb4823 (tb2t4823 j))) )))

;; mem_relation
  (assert
  (forall ((u (set b)) (v (set (tuple21 b d))) (r (set (tuple21 b (tuple21 b
  d)))))
  (= (mem (set1 (tuple2 b1 (tuple2 b1 d1))) (t2tb4560 r)
  (relation (tuple2 b1 d1) b1 (t2tb12 u) (t2tb687 v)))
  (forall ((x b) (y (tuple21 b d)))
  (=> (mem (tuple2 b1 (tuple2 b1 d1))
  (Tuple2 b1 (tuple2 b1 d1) (t2tb14 x) (t2tb692 y)) (t2tb4560 r))
  (and (mem2 x u) (mem23 y v)))))))

;; mem_relation
  (assert
  (forall ((u (set b)) (v (set d)) (r (set (tuple21 b d))))
  (= (mem33 r (relation9 u v))
  (forall ((x b) (y d))
  (=> (mem23 (tb2t692 (Tuple2 b1 d1 (t2tb14 x) (t2tb694 y))) r)
  (and (mem2 x u) (mem20 y v)))))))

(declare-fun t2tb4824 ((set (set (tuple21 b (tuple21 a (tuple21 b
  c)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 b (tuple21 a (tuple21 b c))))))) (sort
  (set1 (set1 (tuple2 b1 (tuple2 a1 (tuple2 b1 c1))))) (t2tb4824 x))))

(declare-fun tb2t4824 (uni) (set (set (tuple21 b (tuple21 a (tuple21 b
  c))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 b (tuple21 a (tuple21 b c)))))))
  (! (= (tb2t4824 (t2tb4824 i)) i) :pattern ((t2tb4824 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 b1 (tuple2 a1 (tuple2 b1 c1))))) j)
     (= (t2tb4824 (tb2t4824 j)) j)) :pattern ((t2tb4824 (tb2t4824 j))) )))

;; mem_relation
  (assert
  (forall ((u (set b)) (v (set (tuple21 a (tuple21 b c)))) (r (set (tuple21 b
  (tuple21 a (tuple21 b c))))))
  (= (mem (set1 (tuple2 b1 (tuple2 a1 (tuple2 b1 c1)))) (t2tb4561 r)
  (relation (tuple2 a1 (tuple2 b1 c1)) b1 (t2tb12 u) (t2tb261 v)))
  (forall ((x b) (y (tuple21 a (tuple21 b c))))
  (=> (mem (tuple2 b1 (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 b1 (tuple2 a1 (tuple2 b1 c1)) (t2tb14 x) (t2tb260 y)) (t2tb4561 r))
  (and (mem2 x u) (mem14 y v)))))))

(declare-fun t2tb4825 ((set (set (tuple21 b (set (tuple21 a c)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 b (set (tuple21 a c))))))) (sort
  (set1 (set1 (tuple2 b1 (set1 (tuple2 a1 c1))))) (t2tb4825 x))))

(declare-fun tb2t4825 (uni) (set (set (tuple21 b (set (tuple21 a c))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 b (set (tuple21 a c)))))))
  (! (= (tb2t4825 (t2tb4825 i)) i) :pattern ((t2tb4825 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 b1 (set1 (tuple2 a1 c1))))) j)
     (= (t2tb4825 (tb2t4825 j)) j)) :pattern ((t2tb4825 (tb2t4825 j))) )))

;; mem_relation
  (assert
  (forall ((u (set b)) (v (set (set (tuple21 a c)))) (r (set (tuple21 b
  (set (tuple21 a c))))))
  (= (mem (set1 (tuple2 b1 (set1 (tuple2 a1 c1)))) (t2tb4564 r)
  (relation (set1 (tuple2 a1 c1)) b1 (t2tb12 u) (t2tb128 v)))
  (forall ((x b) (y (set (tuple21 a c))))
  (=> (mem (tuple2 b1 (set1 (tuple2 a1 c1)))
  (Tuple2 b1 (set1 (tuple2 a1 c1)) (t2tb14 x) (t2tb129 y)) (t2tb4564 r))
  (and (mem2 x u) (mem11 y v)))))))

(declare-fun t2tb321 ((set (set (tuple21 b (tuple21 a c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 b (tuple21 a c)))))) (sort
  (set1 (set1 (tuple2 b1 (tuple2 a1 c1)))) (t2tb321 x))))

(declare-fun tb2t321 (uni) (set (set (tuple21 b (tuple21 a c)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 b (tuple21 a c))))))
  (! (= (tb2t321 (t2tb321 i)) i) :pattern ((t2tb321 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 b1 (tuple2 a1 c1)))) j)
     (= (t2tb321 (tb2t321 j)) j)) :pattern ((t2tb321 (tb2t321 j))) )))

;; mem_relation
  (assert
  (forall ((u (set b)) (v (set (tuple21 a c))) (r (set (tuple21 b (tuple21 a
  c)))))
  (= (mem (set1 (tuple2 b1 (tuple2 a1 c1))) (t2tb248 r)
  (relation (tuple2 a1 c1) b1 (t2tb12 u) (t2tb129 v)))
  (forall ((x b) (y (tuple21 a c)))
  (=> (mem (tuple2 b1 (tuple2 a1 c1))
  (Tuple2 b1 (tuple2 a1 c1) (t2tb14 x) (t2tb133 y)) (t2tb248 r))
  (and (mem2 x u) (mem10 y v)))))))

(declare-fun t2tb130 ((set (set (tuple21 b c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 b c))))) (sort (set1 (set1 (tuple2 b1 c1)))
  (t2tb130 x))))

(declare-fun tb2t130 (uni) (set (set (tuple21 b c))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 b c)))))
  (! (= (tb2t130 (t2tb130 i)) i) :pattern ((t2tb130 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 b1 c1))) j) (= (t2tb130 (tb2t130 j)) j)) :pattern (
  (t2tb130 (tb2t130 j))) )))

;; mem_relation
  (assert
  (forall ((u (set b)) (v (set c)) (r (set (tuple21 b c))))
  (= (mem (set1 (tuple2 b1 c1)) (t2tb131 r)
  (relation c1 b1 (t2tb12 u) (t2tb132 v)))
  (forall ((x b) (y c))
  (=> (mem (tuple2 b1 c1) (Tuple2 b1 c1 (t2tb14 x) (t2tb135 y)) (t2tb131 r))
  (and (mem2 x u) (mem7 y v)))))))

(declare-fun t2tb53 ((set (set (tuple21 b (set (tuple21 a b)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 b (set (tuple21 a b))))))) (sort
  (set1 (set1 (tuple2 b1 (set1 (tuple2 a1 b1))))) (t2tb53 x))))

(declare-fun tb2t53 (uni) (set (set (tuple21 b (set (tuple21 a b))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 b (set (tuple21 a b)))))))
  (! (= (tb2t53 (t2tb53 i)) i) :pattern ((t2tb53 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 b1 (set1 (tuple2 a1 b1))))) j)
     (= (t2tb53 (tb2t53 j)) j)) :pattern ((t2tb53 (tb2t53 j))) )))

;; mem_relation
  (assert
  (forall ((u (set b)) (v (set (set (tuple21 a b)))) (r (set (tuple21 b
  (set (tuple21 a b))))))
  (= (mem (set1 (tuple2 b1 (set1 (tuple2 a1 b1)))) (t2tb31 r)
  (relation (set1 (tuple2 a1 b1)) b1 (t2tb12 u) (t2tb10 v)))
  (forall ((x b) (y (set (tuple21 a b))))
  (=> (mem (tuple2 b1 (set1 (tuple2 a1 b1)))
  (Tuple2 b1 (set1 (tuple2 a1 b1)) (t2tb14 x) (t2tb11 y)) (t2tb31 r))
  (and (mem2 x u) (mem4 y v)))))))

(declare-fun t2tb54 ((set (set (tuple21 b (tuple21 a b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 b (tuple21 a b)))))) (sort
  (set1 (set1 (tuple2 b1 (tuple2 a1 b1)))) (t2tb54 x))))

(declare-fun tb2t54 (uni) (set (set (tuple21 b (tuple21 a b)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 b (tuple21 a b))))))
  (! (= (tb2t54 (t2tb54 i)) i) :pattern ((t2tb54 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 b1 (tuple2 a1 b1)))) j)
     (= (t2tb54 (tb2t54 j)) j)) :pattern ((t2tb54 (tb2t54 j))) )))

;; mem_relation
  (assert
  (forall ((u (set b)) (v (set (tuple21 a b))) (r (set (tuple21 b (tuple21 a
  b)))))
  (= (mem (set1 (tuple2 b1 (tuple2 a1 b1))) (t2tb34 r)
  (relation (tuple2 a1 b1) b1 (t2tb12 u) (t2tb11 v)))
  (forall ((x b) (y (tuple21 a b)))
  (=> (mem (tuple2 b1 (tuple2 a1 b1))
  (Tuple2 b1 (tuple2 a1 b1) (t2tb14 x) (t2tb13 y)) (t2tb34 r))
  (and (mem2 x u) (mem3 y v)))))))

(declare-fun t2tb55 ((set (set (tuple21 b b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 b b))))) (sort (set1 (set1 (tuple2 b1 b1)))
  (t2tb55 x))))

(declare-fun tb2t55 (uni) (set (set (tuple21 b b))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 b b)))))
  (! (= (tb2t55 (t2tb55 i)) i) :pattern ((t2tb55 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 b1 b1))) j) (= (t2tb55 (tb2t55 j)) j)) :pattern (
  (t2tb55 (tb2t55 j))) )))

;; mem_relation
  (assert
  (forall ((u (set b)) (v (set b)) (r (set (tuple21 b b))))
  (= (mem (set1 (tuple2 b1 b1)) (t2tb35 r)
  (relation b1 b1 (t2tb12 u) (t2tb12 v)))
  (forall ((x b) (y b))
  (=> (mem (tuple2 b1 b1) (Tuple2 b1 b1 (t2tb14 x) (t2tb14 y)) (t2tb35 r))
  (and (mem2 x u) (mem2 y v)))))))

(declare-fun t2tb56 ((set (set (tuple21 b a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 b a))))) (sort (set1 (set1 (tuple2 b1 a1)))
  (t2tb56 x))))

(declare-fun tb2t56 (uni) (set (set (tuple21 b a))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 b a)))))
  (! (= (tb2t56 (t2tb56 i)) i) :pattern ((t2tb56 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 b1 a1))) j) (= (t2tb56 (tb2t56 j)) j)) :pattern (
  (t2tb56 (tb2t56 j))) )))

;; mem_relation
  (assert
  (forall ((u (set b)) (v (set a)) (r (set (tuple21 b a))))
  (= (mem (set1 (tuple2 b1 a1)) (t2tb37 r)
  (relation a1 b1 (t2tb12 u) (t2tb1 v)))
  (forall ((x b) (y a))
  (=> (mem (tuple2 b1 a1) (Tuple2 b1 a1 (t2tb14 x) (t2tb2 y)) (t2tb37 r))
  (and (mem2 x u) (mem1 y v)))))))

;; mem_relation
  (assert
  (forall ((b2 ty))
  (forall ((u (set b)) (v uni) (r uni))
  (and
  (=> (mem (set1 (tuple2 b1 b2)) r (relation b2 b1 (t2tb12 u) v))
  (forall ((x b) (y uni))
  (=> (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) y) r)
  (and (mem2 x u) (mem b2 y v)))))
  (=>
  (forall ((x b) (y uni))
  (=> (sort b2 y)
  (=> (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) y) r)
  (and (mem2 x u) (mem b2 y v))))) (mem (set1 (tuple2 b1 b2)) r
  (relation b2 b1 (t2tb12 u) v)))))))

(declare-fun t2tb4826 ((set (set (tuple21 a (tuple21 (tuple21 b c) (tuple21 d
  e)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 a (tuple21 (tuple21 b c) (tuple21 d e)))))))
  (sort (set1 (set1 (tuple2 a1 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)))))
  (t2tb4826 x))))

(declare-fun tb2t4826 (uni) (set (set (tuple21 a (tuple21 (tuple21 b c)
  (tuple21 d e))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 a (tuple21 (tuple21 b c) (tuple21 d e)))))))
  (! (= (tb2t4826 (t2tb4826 i)) i) :pattern ((t2tb4826 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 a1 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1))))) j)
     (= (t2tb4826 (tb2t4826 j)) j)) :pattern ((t2tb4826 (tb2t4826 j))) )))

;; mem_relation
  (assert
  (forall ((u (set a)) (v (set (tuple21 (tuple21 b c) (tuple21 d e))))
  (r (set (tuple21 a (tuple21 (tuple21 b c) (tuple21 d e))))))
  (= (mem (set1 (tuple2 a1 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1))))
  (t2tb4565 r)
  (relation (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) a1 (t2tb1 u) (t2tb4102 v)))
  (forall ((x a) (y (tuple21 (tuple21 b c) (tuple21 d e))))
  (=> (mem (tuple2 a1 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)))
  (Tuple2 a1 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (t2tb2 x) (t2tb4104 y))
  (t2tb4565 r)) (and (mem1 x u) (mem49 y v)))))))

(declare-fun t2tb4827 ((set (set (tuple21 a (tuple21 a (tuple21 d
  e)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 a (tuple21 a (tuple21 d e))))))) (sort
  (set1 (set1 (tuple2 a1 (tuple2 a1 (tuple2 d1 e1))))) (t2tb4827 x))))

(declare-fun tb2t4827 (uni) (set (set (tuple21 a (tuple21 a (tuple21 d
  e))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 a (tuple21 a (tuple21 d e)))))))
  (! (= (tb2t4827 (t2tb4827 i)) i) :pattern ((t2tb4827 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 a1 (tuple2 a1 (tuple2 d1 e1))))) j)
     (= (t2tb4827 (tb2t4827 j)) j)) :pattern ((t2tb4827 (tb2t4827 j))) )))

;; mem_relation
  (assert
  (forall ((u (set a)) (v (set (tuple21 a (tuple21 d e)))) (r (set (tuple21 a
  (tuple21 a (tuple21 d e))))))
  (= (mem (set1 (tuple2 a1 (tuple2 a1 (tuple2 d1 e1)))) (t2tb4567 r)
  (relation (tuple2 a1 (tuple2 d1 e1)) a1 (t2tb1 u) (t2tb4103 v)))
  (forall ((x a) (y (tuple21 a (tuple21 d e))))
  (=> (mem (tuple2 a1 (tuple2 a1 (tuple2 d1 e1)))
  (Tuple2 a1 (tuple2 a1 (tuple2 d1 e1)) (t2tb2 x) (t2tb4105 y)) (t2tb4567 r))
  (and (mem1 x u) (mem48 y v)))))))

;; mem_relation
  (assert
  (forall ((u (set a)) (v (set (tuple21 d e))) (r (set (tuple21 a (tuple21 d
  e)))))
  (= (mem (set1 (tuple2 a1 (tuple2 d1 e1))) (t2tb4103 r)
  (relation (tuple2 d1 e1) a1 (t2tb1 u) (t2tb3456 v)))
  (forall ((x a) (y (tuple21 d e)))
  (=> (mem48 (tb2t4105 (Tuple2 a1 (tuple2 d1 e1) (t2tb2 x) (t2tb3457 y))) r)
  (and (mem1 x u) (mem (tuple2 d1 e1) (t2tb3457 y) (t2tb3456 v))))))))

(declare-fun t2tb4828 ((set (set (tuple21 a (set (tuple21 c e)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 a (set (tuple21 c e))))))) (sort
  (set1 (set1 (tuple2 a1 (set1 (tuple2 c1 e1))))) (t2tb4828 x))))

(declare-fun tb2t4828 (uni) (set (set (tuple21 a (set (tuple21 c e))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 a (set (tuple21 c e)))))))
  (! (= (tb2t4828 (t2tb4828 i)) i) :pattern ((t2tb4828 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 a1 (set1 (tuple2 c1 e1))))) j)
     (= (t2tb4828 (tb2t4828 j)) j)) :pattern ((t2tb4828 (tb2t4828 j))) )))

;; mem_relation
  (assert
  (forall ((u (set a)) (v (set (set (tuple21 c e)))) (r (set (tuple21 a
  (set (tuple21 c e))))))
  (= (mem (set1 (tuple2 a1 (set1 (tuple2 c1 e1)))) (t2tb4569 r)
  (relation (set1 (tuple2 c1 e1)) a1 (t2tb1 u) (t2tb3854 v)))
  (forall ((x a) (y (set (tuple21 c e))))
  (=> (mem (tuple2 a1 (set1 (tuple2 c1 e1)))
  (Tuple2 a1 (set1 (tuple2 c1 e1)) (t2tb2 x) (t2tb3478 y)) (t2tb4569 r))
  (and (mem1 x u) (mem47 y v)))))))

(declare-fun t2tb4829 ((set (set (tuple21 a (tuple21 c e))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 a (tuple21 c e)))))) (sort
  (set1 (set1 (tuple2 a1 (tuple2 c1 e1)))) (t2tb4829 x))))

(declare-fun tb2t4829 (uni) (set (set (tuple21 a (tuple21 c e)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 a (tuple21 c e))))))
  (! (= (tb2t4829 (t2tb4829 i)) i) :pattern ((t2tb4829 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 a1 (tuple2 c1 e1)))) j)
     (= (t2tb4829 (tb2t4829 j)) j)) :pattern ((t2tb4829 (tb2t4829 j))) )))

;; mem_relation
  (assert
  (forall ((u (set a)) (v (set (tuple21 c e))) (r (set (tuple21 a (tuple21 c
  e)))))
  (= (mem (set1 (tuple2 a1 (tuple2 c1 e1))) (t2tb4571 r)
  (relation (tuple2 c1 e1) a1 (t2tb1 u) (t2tb3478 v)))
  (forall ((x a) (y (tuple21 c e)))
  (=> (mem (tuple2 a1 (tuple2 c1 e1))
  (Tuple2 a1 (tuple2 c1 e1) (t2tb2 x) (t2tb3479 y)) (t2tb4571 r))
  (and (mem1 x u) (mem46 y v)))))))

(declare-fun t2tb3896 ((set (set (tuple21 a (tuple21 a e))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 a (tuple21 a e)))))) (sort
  (set1 (set1 (tuple2 a1 (tuple2 a1 e1)))) (t2tb3896 x))))

(declare-fun tb2t3896 (uni) (set (set (tuple21 a (tuple21 a e)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 a (tuple21 a e))))))
  (! (= (tb2t3896 (t2tb3896 i)) i) :pattern ((t2tb3896 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 a1 (tuple2 a1 e1)))) j)
     (= (t2tb3896 (tb2t3896 j)) j)) :pattern ((t2tb3896 (tb2t3896 j))) )))

;; mem_relation
  (assert
  (forall ((u (set a)) (v (set (tuple21 a e))) (r (set (tuple21 a (tuple21 a
  e)))))
  (= (mem (set1 (tuple2 a1 (tuple2 a1 e1))) (t2tb3558 r)
  (relation (tuple2 a1 e1) a1 (t2tb1 u) (t2tb2943 v)))
  (forall ((x a) (y (tuple21 a e)))
  (=> (mem (tuple2 a1 (tuple2 a1 e1))
  (Tuple2 a1 (tuple2 a1 e1) (t2tb2 x) (t2tb2949 y)) (t2tb3558 r))
  (and (mem1 x u) (mem44 y v)))))))

;; mem_relation
  (assert
  (forall ((u (set a)) (v (set e)) (r (set (tuple21 a e))))
  (= (mem (set1 (tuple2 a1 e1)) (t2tb2943 r)
  (relation e1 a1 (t2tb1 u) (t2tb2947 v)))
  (forall ((x a) (y e))
  (=> (mem44 (tb2t2949 (Tuple2 a1 e1 (t2tb2 x) (t2tb2955 y))) r)
  (and (mem1 x u) (mem36 y v)))))))

(declare-fun t2tb4830 ((set (set (tuple21 a (tuple21 a d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 a (tuple21 a d)))))) (sort
  (set1 (set1 (tuple2 a1 (tuple2 a1 d1)))) (t2tb4830 x))))

(declare-fun tb2t4830 (uni) (set (set (tuple21 a (tuple21 a d)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 a (tuple21 a d))))))
  (! (= (tb2t4830 (t2tb4830 i)) i) :pattern ((t2tb4830 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 a1 (tuple2 a1 d1)))) j)
     (= (t2tb4830 (tb2t4830 j)) j)) :pattern ((t2tb4830 (tb2t4830 j))) )))

;; mem_relation
  (assert
  (forall ((u (set a)) (v (set (tuple21 a d))) (r (set (tuple21 a (tuple21 a
  d)))))
  (= (mem (set1 (tuple2 a1 (tuple2 a1 d1))) (t2tb4573 r)
  (relation (tuple2 a1 d1) a1 (t2tb1 u) (t2tb903 v)))
  (forall ((x a) (y (tuple21 a d)))
  (=> (mem (tuple2 a1 (tuple2 a1 d1))
  (Tuple2 a1 (tuple2 a1 d1) (t2tb2 x) (t2tb904 y)) (t2tb4573 r))
  (and (mem1 x u) (mem32 y v)))))))

(declare-fun t2tb4831 ((set (set (tuple21 a (set (tuple21 b d)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 a (set (tuple21 b d))))))) (sort
  (set1 (set1 (tuple2 a1 (set1 (tuple2 b1 d1))))) (t2tb4831 x))))

(declare-fun tb2t4831 (uni) (set (set (tuple21 a (set (tuple21 b d))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 a (set (tuple21 b d)))))))
  (! (= (tb2t4831 (t2tb4831 i)) i) :pattern ((t2tb4831 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 a1 (set1 (tuple2 b1 d1))))) j)
     (= (t2tb4831 (tb2t4831 j)) j)) :pattern ((t2tb4831 (tb2t4831 j))) )))

;; mem_relation
  (assert
  (forall ((u (set a)) (v (set (set (tuple21 b d)))) (r (set (tuple21 a
  (set (tuple21 b d))))))
  (= (mem (set1 (tuple2 a1 (set1 (tuple2 b1 d1)))) (t2tb4575 r)
  (relation (set1 (tuple2 b1 d1)) a1 (t2tb1 u) (t2tb906 v)))
  (forall ((x a) (y (set (tuple21 b d))))
  (=> (mem (tuple2 a1 (set1 (tuple2 b1 d1)))
  (Tuple2 a1 (set1 (tuple2 b1 d1)) (t2tb2 x) (t2tb687 y)) (t2tb4575 r))
  (and (mem1 x u) (mem33 y v)))))))

(declare-fun t2tb4832 ((set (set (tuple21 a (tuple21 b d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 a (tuple21 b d)))))) (sort
  (set1 (set1 (tuple2 a1 (tuple2 b1 d1)))) (t2tb4832 x))))

(declare-fun tb2t4832 (uni) (set (set (tuple21 a (tuple21 b d)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 a (tuple21 b d))))))
  (! (= (tb2t4832 (t2tb4832 i)) i) :pattern ((t2tb4832 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 a1 (tuple2 b1 d1)))) j)
     (= (t2tb4832 (tb2t4832 j)) j)) :pattern ((t2tb4832 (tb2t4832 j))) )))

;; mem_relation
  (assert
  (forall ((u (set a)) (v (set (tuple21 b d))) (r (set (tuple21 a (tuple21 b
  d)))))
  (= (mem (set1 (tuple2 a1 (tuple2 b1 d1))) (t2tb4577 r)
  (relation (tuple2 b1 d1) a1 (t2tb1 u) (t2tb687 v)))
  (forall ((x a) (y (tuple21 b d)))
  (=> (mem (tuple2 a1 (tuple2 b1 d1))
  (Tuple2 a1 (tuple2 b1 d1) (t2tb2 x) (t2tb692 y)) (t2tb4577 r))
  (and (mem1 x u) (mem23 y v)))))))

;; mem_relation
  (assert
  (forall ((u (set a)) (v (set d)) (r (set (tuple21 a d))))
  (= (mem (set1 (tuple2 a1 d1)) (t2tb903 r)
  (relation d1 a1 (t2tb1 u) (t2tb690 v)))
  (forall ((x a) (y d))
  (=> (mem32 (tb2t904 (Tuple2 a1 d1 (t2tb2 x) (t2tb694 y))) r)
  (and (mem1 x u) (mem20 y v)))))))

(declare-fun t2tb4833 ((set (set (tuple21 a (tuple21 a (tuple21 b
  c)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 a (tuple21 a (tuple21 b c))))))) (sort
  (set1 (set1 (tuple2 a1 (tuple2 a1 (tuple2 b1 c1))))) (t2tb4833 x))))

(declare-fun tb2t4833 (uni) (set (set (tuple21 a (tuple21 a (tuple21 b
  c))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 a (tuple21 a (tuple21 b c)))))))
  (! (= (tb2t4833 (t2tb4833 i)) i) :pattern ((t2tb4833 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 a1 (tuple2 a1 (tuple2 b1 c1))))) j)
     (= (t2tb4833 (tb2t4833 j)) j)) :pattern ((t2tb4833 (tb2t4833 j))) )))

;; mem_relation
  (assert
  (forall ((u (set a)) (v (set (tuple21 a (tuple21 b c)))) (r (set (tuple21 a
  (tuple21 a (tuple21 b c))))))
  (= (mem (set1 (tuple2 a1 (tuple2 a1 (tuple2 b1 c1)))) (t2tb4578 r)
  (relation (tuple2 a1 (tuple2 b1 c1)) a1 (t2tb1 u) (t2tb261 v)))
  (forall ((x a) (y (tuple21 a (tuple21 b c))))
  (=> (mem (tuple2 a1 (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 a1 (tuple2 a1 (tuple2 b1 c1)) (t2tb2 x) (t2tb260 y)) (t2tb4578 r))
  (and (mem1 x u) (mem14 y v)))))))

(declare-fun t2tb4834 ((set (set (tuple21 a (set (tuple21 a c)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 a (set (tuple21 a c))))))) (sort
  (set1 (set1 (tuple2 a1 (set1 (tuple2 a1 c1))))) (t2tb4834 x))))

(declare-fun tb2t4834 (uni) (set (set (tuple21 a (set (tuple21 a c))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 a (set (tuple21 a c)))))))
  (! (= (tb2t4834 (t2tb4834 i)) i) :pattern ((t2tb4834 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 a1 (set1 (tuple2 a1 c1))))) j)
     (= (t2tb4834 (tb2t4834 j)) j)) :pattern ((t2tb4834 (tb2t4834 j))) )))

;; mem_relation
  (assert
  (forall ((u (set a)) (v (set (set (tuple21 a c)))) (r (set (tuple21 a
  (set (tuple21 a c))))))
  (= (mem (set1 (tuple2 a1 (set1 (tuple2 a1 c1)))) (t2tb4580 r)
  (relation (set1 (tuple2 a1 c1)) a1 (t2tb1 u) (t2tb128 v)))
  (forall ((x a) (y (set (tuple21 a c))))
  (=> (mem (tuple2 a1 (set1 (tuple2 a1 c1)))
  (Tuple2 a1 (set1 (tuple2 a1 c1)) (t2tb2 x) (t2tb129 y)) (t2tb4580 r))
  (and (mem1 x u) (mem11 y v)))))))

(declare-fun t2tb325 ((set (set (tuple21 a (tuple21 a c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 a (tuple21 a c)))))) (sort
  (set1 (set1 (tuple2 a1 (tuple2 a1 c1)))) (t2tb325 x))))

(declare-fun tb2t325 (uni) (set (set (tuple21 a (tuple21 a c)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 a (tuple21 a c))))))
  (! (= (tb2t325 (t2tb325 i)) i) :pattern ((t2tb325 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 a1 (tuple2 a1 c1)))) j)
     (= (t2tb325 (tb2t325 j)) j)) :pattern ((t2tb325 (tb2t325 j))) )))

;; mem_relation
  (assert
  (forall ((u (set a)) (v (set (tuple21 a c))) (r (set (tuple21 a (tuple21 a
  c)))))
  (= (mem (set1 (tuple2 a1 (tuple2 a1 c1))) (t2tb256 r)
  (relation (tuple2 a1 c1) a1 (t2tb1 u) (t2tb129 v)))
  (forall ((x a) (y (tuple21 a c)))
  (=> (mem (tuple2 a1 (tuple2 a1 c1))
  (Tuple2 a1 (tuple2 a1 c1) (t2tb2 x) (t2tb133 y)) (t2tb256 r))
  (and (mem1 x u) (mem10 y v)))))))

;; mem_relation
  (assert
  (forall ((u (set a)) (v (set (tuple21 b c))) (r (set (tuple21 a (tuple21 b
  c)))))
  (= (mem (set1 (tuple2 a1 (tuple2 b1 c1))) (t2tb261 r)
  (relation (tuple2 b1 c1) a1 (t2tb1 u) (t2tb131 v)))
  (forall ((x a) (y (tuple21 b c)))
  (=> (mem14 (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 y))) r)
  (and (mem1 x u) (mem (tuple2 b1 c1) (t2tb134 y) (t2tb131 v))))))))

;; mem_relation
  (assert
  (forall ((u (set a)) (v (set c)) (r (set (tuple21 a c))))
  (= (mem11 r (relation3 u v))
  (forall ((x a) (y c))
  (=> (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y))) r)
  (and (mem1 x u) (mem7 y v)))))))

(declare-fun t2tb57 ((set (set (tuple21 a (set (tuple21 a b)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 a (set (tuple21 a b))))))) (sort
  (set1 (set1 (tuple2 a1 (set1 (tuple2 a1 b1))))) (t2tb57 x))))

(declare-fun tb2t57 (uni) (set (set (tuple21 a (set (tuple21 a b))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 a (set (tuple21 a b)))))))
  (! (= (tb2t57 (t2tb57 i)) i) :pattern ((t2tb57 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 a1 (set1 (tuple2 a1 b1))))) j)
     (= (t2tb57 (tb2t57 j)) j)) :pattern ((t2tb57 (tb2t57 j))) )))

;; mem_relation
  (assert
  (forall ((u (set a)) (v (set (set (tuple21 a b)))) (r (set (tuple21 a
  (set (tuple21 a b))))))
  (= (mem (set1 (tuple2 a1 (set1 (tuple2 a1 b1)))) (t2tb39 r)
  (relation (set1 (tuple2 a1 b1)) a1 (t2tb1 u) (t2tb10 v)))
  (forall ((x a) (y (set (tuple21 a b))))
  (=> (mem (tuple2 a1 (set1 (tuple2 a1 b1)))
  (Tuple2 a1 (set1 (tuple2 a1 b1)) (t2tb2 x) (t2tb11 y)) (t2tb39 r))
  (and (mem1 x u) (mem4 y v)))))))

(declare-fun t2tb58 ((set (set (tuple21 a (tuple21 a b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 a (tuple21 a b)))))) (sort
  (set1 (set1 (tuple2 a1 (tuple2 a1 b1)))) (t2tb58 x))))

(declare-fun tb2t58 (uni) (set (set (tuple21 a (tuple21 a b)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 a (tuple21 a b))))))
  (! (= (tb2t58 (t2tb58 i)) i) :pattern ((t2tb58 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 a1 (tuple2 a1 b1)))) j)
     (= (t2tb58 (tb2t58 j)) j)) :pattern ((t2tb58 (tb2t58 j))) )))

;; mem_relation
  (assert
  (forall ((u (set a)) (v (set (tuple21 a b))) (r (set (tuple21 a (tuple21 a
  b)))))
  (= (mem (set1 (tuple2 a1 (tuple2 a1 b1))) (t2tb41 r)
  (relation (tuple2 a1 b1) a1 (t2tb1 u) (t2tb11 v)))
  (forall ((x a) (y (tuple21 a b)))
  (=> (mem (tuple2 a1 (tuple2 a1 b1))
  (Tuple2 a1 (tuple2 a1 b1) (t2tb2 x) (t2tb13 y)) (t2tb41 r))
  (and (mem1 x u) (mem3 y v)))))))

;; mem_relation
  (assert
  (forall ((u (set a)) (v (set b)) (r (set (tuple21 a b))))
  (= (mem4 r (relation1 u v))
  (forall ((x a) (y b))
  (=> (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y))) r)
  (and (mem1 x u) (mem2 y v)))))))

(declare-fun t2tb3 ((set (set (tuple21 a a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 a a))))) (sort (set1 (set1 (tuple2 a1 a1)))
  (t2tb3 x))))

(declare-fun tb2t3 (uni) (set (set (tuple21 a a))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 a a)))))
  (! (= (tb2t3 (t2tb3 i)) i) :pattern ((t2tb3 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 a1 a1))) j) (= (t2tb3 (tb2t3 j)) j)) :pattern (
  (t2tb3 (tb2t3 j))) )))

;; mem_relation
  (assert
  (forall ((u (set a)) (v (set a)) (r (set (tuple21 a a))))
  (= (mem (set1 (tuple2 a1 a1)) (t2tb4 r)
  (relation a1 a1 (t2tb1 u) (t2tb1 v)))
  (forall ((x a) (y a))
  (=> (mem (tuple2 a1 a1) (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y)) (t2tb4 r))
  (and (mem1 x u) (mem1 y v)))))))

;; mem_relation
  (assert
  (forall ((b2 ty))
  (forall ((u (set a)) (v uni) (r uni))
  (and
  (=> (mem (set1 (tuple2 a1 b2)) r (relation b2 a1 (t2tb1 u) v))
  (forall ((x a) (y uni))
  (=> (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) y) r)
  (and (mem1 x u) (mem b2 y v)))))
  (=>
  (forall ((x a) (y uni))
  (=> (sort b2 y)
  (=> (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) y) r)
  (and (mem1 x u) (mem b2 y v))))) (mem (set1 (tuple2 a1 b2)) r
  (relation b2 a1 (t2tb1 u) v)))))))

;; mem_relation
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((u uni) (v uni) (r uni))
  (and
  (=> (mem (set1 (tuple2 a2 b2)) r (relation b2 a2 u v))
  (forall ((x uni) (y uni))
  (=> (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) r)
  (and (mem a2 x u) (mem b2 y v)))))
  (=>
  (forall ((x uni) (y uni))
  (=> (sort a2 x)
  (=> (sort b2 y)
  (=> (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) r)
  (and (mem a2 x u) (mem b2 y v)))))) (mem (set1 (tuple2 a2 b2)) r
  (relation b2 a2 u v)))))))

(declare-fun inverse (ty ty uni) uni)

;; inverse_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni)) (sort (set1 (tuple2 b2 a2)) (inverse b2 a2 x)))))

(declare-fun t2tb4835 ((set (tuple21 (tuple21 d e) (tuple21 b c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 d e) (tuple21 b c))))) (sort
  (set1 (tuple2 (tuple2 d1 e1) (tuple2 b1 c1))) (t2tb4835 x))))

(declare-fun tb2t4835 (uni) (set (tuple21 (tuple21 d e) (tuple21 b c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 d e) (tuple21 b c)))))
  (! (= (tb2t4835 (t2tb4835 i)) i) :pattern ((t2tb4835 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 d1 e1) (tuple2 b1 c1))) j)
     (= (t2tb4835 (tb2t4835 j)) j)) :pattern ((t2tb4835 (tb2t4835 j))) )))

(declare-fun t2tb4836 ((tuple21 (tuple21 d e) (tuple21 b c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 d e) (tuple21 b c)))) (sort
  (tuple2 (tuple2 d1 e1) (tuple2 b1 c1)) (t2tb4836 x))))

(declare-fun tb2t4836 (uni) (tuple21 (tuple21 d e) (tuple21 b c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 d e) (tuple21 b c))))
  (! (= (tb2t4836 (t2tb4836 i)) i) :pattern ((t2tb4836 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 d1 e1) (tuple2 b1 c1)) j)
     (= (t2tb4836 (tb2t4836 j)) j)) :pattern ((t2tb4836 (tb2t4836 j))) )))

;; mem_inverse
  (assert
  (forall ((p (set (tuple21 (tuple21 d e) (tuple21 b c)))) (x (tuple21 b c))
  (y (tuple21 d e)))
  (= (mem49
  (tb2t4104 (Tuple2 (tuple2 b1 c1) (tuple2 d1 e1) (t2tb134 x) (t2tb3457 y)))
  (tb2t4102 (inverse (tuple2 b1 c1) (tuple2 d1 e1) (t2tb4835 p)))) (mem
  (tuple2 (tuple2 d1 e1) (tuple2 b1 c1))
  (Tuple2 (tuple2 d1 e1) (tuple2 b1 c1) (t2tb3457 y) (t2tb134 x))
  (t2tb4835 p)))))

(declare-fun t2tb4837 ((set (tuple21 (tuple21 d e) a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 d e) a)))) (sort
  (set1 (tuple2 (tuple2 d1 e1) a1)) (t2tb4837 x))))

(declare-fun tb2t4837 (uni) (set (tuple21 (tuple21 d e) a)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 d e) a))))
  (! (= (tb2t4837 (t2tb4837 i)) i) :pattern ((t2tb4837 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 d1 e1) a1)) j)
     (= (t2tb4837 (tb2t4837 j)) j)) :pattern ((t2tb4837 (tb2t4837 j))) )))

(declare-fun t2tb4838 ((tuple21 (tuple21 d e) a)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 d e) a))) (sort (tuple2 (tuple2 d1 e1) a1)
  (t2tb4838 x))))

(declare-fun tb2t4838 (uni) (tuple21 (tuple21 d e) a))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 d e) a)))
  (! (= (tb2t4838 (t2tb4838 i)) i) :pattern ((t2tb4838 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 d1 e1) a1) j) (= (t2tb4838 (tb2t4838 j)) j)) :pattern (
  (t2tb4838 (tb2t4838 j))) )))

;; mem_inverse
  (assert
  (forall ((p (set (tuple21 (tuple21 d e) a))) (x a) (y (tuple21 d e)))
  (= (mem48 (tb2t4105 (Tuple2 a1 (tuple2 d1 e1) (t2tb2 x) (t2tb3457 y)))
  (tb2t4103 (inverse a1 (tuple2 d1 e1) (t2tb4837 p)))) (mem
  (tuple2 (tuple2 d1 e1) a1)
  (Tuple2 (tuple2 d1 e1) a1 (t2tb3457 y) (t2tb2 x)) (t2tb4837 p)))))

;; mem_inverse
  (assert
  (forall ((p (set (tuple21 e c))) (x c) (y e))
  (= (mem46 (tb2t3479 (Tuple2 c1 e1 (t2tb135 x) (t2tb2955 y)))
  (tb2t3478 (inverse c1 e1 (t2tb3326 p)))) (mem (tuple2 e1 c1)
  (Tuple2 e1 c1 (t2tb2955 y) (t2tb135 x)) (t2tb3326 p)))))

;; mem_inverse
  (assert
  (forall ((p (set (tuple21 e a))) (x a) (y e))
  (= (mem44 (tb2t2949 (Tuple2 a1 e1 (t2tb2 x) (t2tb2955 y)))
  (tb2t2943 (inverse a1 e1 (t2tb3334 p)))) (mem (tuple2 e1 a1)
  (Tuple2 e1 a1 (t2tb2955 y) (t2tb2 x)) (t2tb3334 p)))))

;; mem_inverse
  (assert
  (forall ((p (set (tuple21 d b))) (x b) (y d))
  (= (mem23 (tb2t692 (Tuple2 b1 d1 (t2tb14 x) (t2tb694 y)))
  (tb2t687 (inverse b1 d1 (t2tb835 p)))) (mem (tuple2 d1 b1)
  (Tuple2 d1 b1 (t2tb694 y) (t2tb14 x)) (t2tb835 p)))))

;; mem_inverse
  (assert
  (forall ((p (set (tuple21 d a))) (x a) (y d))
  (= (mem32 (tb2t904 (Tuple2 a1 d1 (t2tb2 x) (t2tb694 y)))
  (tb2t903 (inverse a1 d1 (t2tb837 p)))) (mem (tuple2 d1 a1)
  (Tuple2 d1 a1 (t2tb694 y) (t2tb2 x)) (t2tb837 p)))))

;; mem_inverse
  (assert
  (forall ((p (set (tuple21 (tuple21 b c) (tuple21 d e)))) (x (tuple21 d e))
  (y (tuple21 b c)))
  (= (mem (tuple2 (tuple2 d1 e1) (tuple2 b1 c1))
  (Tuple2 (tuple2 d1 e1) (tuple2 b1 c1) (t2tb3457 x) (t2tb134 y))
  (inverse (tuple2 d1 e1) (tuple2 b1 c1) (t2tb4102 p))) (mem49
  (tb2t4104 (Tuple2 (tuple2 b1 c1) (tuple2 d1 e1) (t2tb134 y) (t2tb3457 x)))
  p))))

(declare-fun t2tb1123 ((tuple21 (tuple21 b c) a)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b c) a))) (sort (tuple2 (tuple2 b1 c1) a1)
  (t2tb1123 x))))

(declare-fun tb2t1123 (uni) (tuple21 (tuple21 b c) a))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b c) a)))
  (! (= (tb2t1123 (t2tb1123 i)) i) :pattern ((t2tb1123 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 c1) a1) j) (= (t2tb1123 (tb2t1123 j)) j)) :pattern (
  (t2tb1123 (tb2t1123 j))) )))

(declare-fun t2tb1124 ((set (tuple21 (tuple21 b c) a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b c) a)))) (sort
  (set1 (tuple2 (tuple2 b1 c1) a1)) (t2tb1124 x))))

(declare-fun tb2t1124 (uni) (set (tuple21 (tuple21 b c) a)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b c) a))))
  (! (= (tb2t1124 (t2tb1124 i)) i) :pattern ((t2tb1124 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 c1) a1)) j)
     (= (t2tb1124 (tb2t1124 j)) j)) :pattern ((t2tb1124 (tb2t1124 j))) )))

;; mem_inverse
  (assert
  (forall ((p (set (tuple21 (tuple21 b c) a))) (x a) (y (tuple21 b c)))
  (= (mem14 (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 y)))
  (tb2t261 (inverse a1 (tuple2 b1 c1) (t2tb1124 p)))) (mem
  (tuple2 (tuple2 b1 c1) a1) (Tuple2 (tuple2 b1 c1) a1 (t2tb134 y) (t2tb2 x))
  (t2tb1124 p)))))

;; mem_inverse
  (assert
  (forall ((p (set (tuple21 c e))) (x e) (y c))
  (= (mem (tuple2 e1 c1) (Tuple2 e1 c1 (t2tb2955 x) (t2tb135 y))
  (inverse e1 c1 (t2tb3478 p))) (mem46
  (tb2t3479 (Tuple2 c1 e1 (t2tb135 y) (t2tb2955 x))) p))))

;; mem_inverse
  (assert
  (forall ((p (set (tuple21 c a))) (x a) (y c))
  (= (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y)))
  (tb2t129 (inverse a1 c1 (t2tb224 p)))) (mem (tuple2 c1 a1)
  (Tuple2 c1 a1 (t2tb135 y) (t2tb2 x)) (t2tb224 p)))))

;; mem_inverse
  (assert
  (forall ((p (set (tuple21 b d))) (x d) (y b))
  (= (mem (tuple2 d1 b1) (Tuple2 d1 b1 (t2tb694 x) (t2tb14 y))
  (inverse d1 b1 (t2tb687 p))) (mem23
  (tb2t692 (Tuple2 b1 d1 (t2tb14 y) (t2tb694 x))) p))))

;; mem_inverse
  (assert
  (forall ((p (set (tuple21 b a))) (x a) (y b))
  (= (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y)))
  (tb2t11 (inverse a1 b1 (t2tb37 p)))) (mem (tuple2 b1 a1)
  (Tuple2 b1 a1 (t2tb14 y) (t2tb2 x)) (t2tb37 p)))))

;; mem_inverse
  (assert
  (forall ((p (set (tuple21 a (tuple21 d e)))) (x (tuple21 d e)) (y a))
  (= (mem (tuple2 (tuple2 d1 e1) a1)
  (Tuple2 (tuple2 d1 e1) a1 (t2tb3457 x) (t2tb2 y))
  (inverse (tuple2 d1 e1) a1 (t2tb4103 p))) (mem48
  (tb2t4105 (Tuple2 a1 (tuple2 d1 e1) (t2tb2 y) (t2tb3457 x))) p))))

;; mem_inverse
  (assert
  (forall ((p (set (tuple21 a e))) (x e) (y a))
  (= (mem (tuple2 e1 a1) (Tuple2 e1 a1 (t2tb2955 x) (t2tb2 y))
  (inverse e1 a1 (t2tb2943 p))) (mem44
  (tb2t2949 (Tuple2 a1 e1 (t2tb2 y) (t2tb2955 x))) p))))

;; mem_inverse
  (assert
  (forall ((p (set (tuple21 a d))) (x d) (y a))
  (= (mem (tuple2 d1 a1) (Tuple2 d1 a1 (t2tb694 x) (t2tb2 y))
  (inverse d1 a1 (t2tb903 p))) (mem32
  (tb2t904 (Tuple2 a1 d1 (t2tb2 y) (t2tb694 x))) p))))

;; mem_inverse
  (assert
  (forall ((p (set (tuple21 a (tuple21 b c)))) (x (tuple21 b c)) (y a))
  (= (mem (tuple2 (tuple2 b1 c1) a1)
  (Tuple2 (tuple2 b1 c1) a1 (t2tb134 x) (t2tb2 y))
  (inverse (tuple2 b1 c1) a1 (t2tb261 p))) (mem14
  (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 y) (t2tb134 x))) p))))

;; mem_inverse
  (assert
  (forall ((p (set (tuple21 a c))) (x c) (y a))
  (= (mem (tuple2 c1 a1) (Tuple2 c1 a1 (t2tb135 x) (t2tb2 y))
  (inverse c1 a1 (t2tb129 p))) (mem10
  (tb2t133 (Tuple2 a1 c1 (t2tb2 y) (t2tb135 x))) p))))

;; mem_inverse
  (assert
  (forall ((p (set (tuple21 a b))) (x b) (y a))
  (= (mem (tuple2 b1 a1) (Tuple2 b1 a1 (t2tb14 x) (t2tb2 y))
  (inverse b1 a1 (t2tb11 p))) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 y) (t2tb14 x))) p))))

;; mem_inverse
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((p uni) (x uni) (y uni))
  (= (mem (tuple2 b2 a2) (Tuple2 b2 a2 x y) (inverse b2 a2 p)) (mem
  (tuple2 a2 b2) (Tuple2 a2 b2 y x) p)))))

(declare-fun dom (ty ty uni) uni)

;; dom_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni)) (sort (set1 a2) (dom b2 a2 x)))))

;; mem_dom
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (x (tuple21 (tuple21 b c) (tuple21 d e))))
  (and
  (=> (mem49 x (tb2t4102 (dom b2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) p)))
  (exists ((b3 uni))
  (and (sort b2 b3) (mem (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) b2)
  (Tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) b2 (t2tb4104 x) b3) p))))
  (=>
  (exists ((b3 uni)) (mem (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) b2)
  (Tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) b2 (t2tb4104 x) b3) p))
  (mem49 x (tb2t4102 (dom b2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) p))))))))

;; mem_dom
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (x (tuple21 a (tuple21 d e))))
  (and
  (=> (mem48 x (tb2t4103 (dom b2 (tuple2 a1 (tuple2 d1 e1)) p)))
  (exists ((b3 uni))
  (and (sort b2 b3) (mem (tuple2 (tuple2 a1 (tuple2 d1 e1)) b2)
  (Tuple2 (tuple2 a1 (tuple2 d1 e1)) b2 (t2tb4105 x) b3) p))))
  (=>
  (exists ((b3 uni)) (mem (tuple2 (tuple2 a1 (tuple2 d1 e1)) b2)
  (Tuple2 (tuple2 a1 (tuple2 d1 e1)) b2 (t2tb4105 x) b3) p)) (mem48 x
  (tb2t4103 (dom b2 (tuple2 a1 (tuple2 d1 e1)) p))))))))

;; mem_dom
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (x (set (tuple21 c e))))
  (and
  (=> (mem47 x (tb2t3854 (dom b2 (set1 (tuple2 c1 e1)) p)))
  (exists ((b3 uni))
  (and (sort b2 b3) (mem (tuple2 (set1 (tuple2 c1 e1)) b2)
  (Tuple2 (set1 (tuple2 c1 e1)) b2 (t2tb3478 x) b3) p))))
  (=>
  (exists ((b3 uni)) (mem (tuple2 (set1 (tuple2 c1 e1)) b2)
  (Tuple2 (set1 (tuple2 c1 e1)) b2 (t2tb3478 x) b3) p)) (mem47 x
  (tb2t3854 (dom b2 (set1 (tuple2 c1 e1)) p))))))))

;; mem_dom
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (x (tuple21 c e)))
  (and
  (=> (mem46 x (tb2t3478 (dom b2 (tuple2 c1 e1) p)))
  (exists ((b3 uni))
  (and (sort b2 b3) (mem (tuple2 (tuple2 c1 e1) b2)
  (Tuple2 (tuple2 c1 e1) b2 (t2tb3479 x) b3) p))))
  (=>
  (exists ((b3 uni)) (mem (tuple2 (tuple2 c1 e1) b2)
  (Tuple2 (tuple2 c1 e1) b2 (t2tb3479 x) b3) p)) (mem46 x
  (tb2t3478 (dom b2 (tuple2 c1 e1) p))))))))

;; mem_dom
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (x (tuple21 a e)))
  (and
  (=> (mem44 x (tb2t2943 (dom b2 (tuple2 a1 e1) p)))
  (exists ((b3 uni))
  (and (sort b2 b3) (mem (tuple2 (tuple2 a1 e1) b2)
  (Tuple2 (tuple2 a1 e1) b2 (t2tb2949 x) b3) p))))
  (=>
  (exists ((b3 uni)) (mem (tuple2 (tuple2 a1 e1) b2)
  (Tuple2 (tuple2 a1 e1) b2 (t2tb2949 x) b3) p)) (mem44 x
  (tb2t2943 (dom b2 (tuple2 a1 e1) p))))))))

;; mem_dom
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (x e))
  (and
  (=> (mem36 x (tb2t2947 (dom b2 e1 p)))
  (exists ((b3 uni))
  (and (sort b2 b3) (mem (tuple2 e1 b2) (Tuple2 e1 b2 (t2tb2955 x) b3) p))))
  (=>
  (exists ((b3 uni)) (mem (tuple2 e1 b2) (Tuple2 e1 b2 (t2tb2955 x) b3) p))
  (mem36 x (tb2t2947 (dom b2 e1 p))))))))

;; mem_dom
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (x (tuple21 a d)))
  (and
  (=> (mem32 x (tb2t903 (dom b2 (tuple2 a1 d1) p)))
  (exists ((b3 uni))
  (and (sort b2 b3) (mem (tuple2 (tuple2 a1 d1) b2)
  (Tuple2 (tuple2 a1 d1) b2 (t2tb904 x) b3) p))))
  (=>
  (exists ((b3 uni)) (mem (tuple2 (tuple2 a1 d1) b2)
  (Tuple2 (tuple2 a1 d1) b2 (t2tb904 x) b3) p)) (mem32 x
  (tb2t903 (dom b2 (tuple2 a1 d1) p))))))))

;; mem_dom
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (x (set (tuple21 b d))))
  (and
  (=> (mem33 x (tb2t906 (dom b2 (set1 (tuple2 b1 d1)) p)))
  (exists ((b3 uni))
  (and (sort b2 b3) (mem (tuple2 (set1 (tuple2 b1 d1)) b2)
  (Tuple2 (set1 (tuple2 b1 d1)) b2 (t2tb687 x) b3) p))))
  (=>
  (exists ((b3 uni)) (mem (tuple2 (set1 (tuple2 b1 d1)) b2)
  (Tuple2 (set1 (tuple2 b1 d1)) b2 (t2tb687 x) b3) p)) (mem33 x
  (tb2t906 (dom b2 (set1 (tuple2 b1 d1)) p))))))))

;; mem_dom
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (x (tuple21 b d)))
  (and
  (=> (mem23 x (tb2t687 (dom b2 (tuple2 b1 d1) p)))
  (exists ((b3 uni))
  (and (sort b2 b3) (mem (tuple2 (tuple2 b1 d1) b2)
  (Tuple2 (tuple2 b1 d1) b2 (t2tb692 x) b3) p))))
  (=>
  (exists ((b3 uni)) (mem (tuple2 (tuple2 b1 d1) b2)
  (Tuple2 (tuple2 b1 d1) b2 (t2tb692 x) b3) p)) (mem23 x
  (tb2t687 (dom b2 (tuple2 b1 d1) p))))))))

;; mem_dom
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (x d))
  (and
  (=> (mem20 x (tb2t690 (dom b2 d1 p)))
  (exists ((b3 uni))
  (and (sort b2 b3) (mem (tuple2 d1 b2) (Tuple2 d1 b2 (t2tb694 x) b3) p))))
  (=>
  (exists ((b3 uni)) (mem (tuple2 d1 b2) (Tuple2 d1 b2 (t2tb694 x) b3) p))
  (mem20 x (tb2t690 (dom b2 d1 p))))))))

;; mem_dom
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (x (tuple21 a (tuple21 b c))))
  (and
  (=> (mem14 x (tb2t261 (dom b2 (tuple2 a1 (tuple2 b1 c1)) p)))
  (exists ((b3 uni))
  (and (sort b2 b3) (mem (tuple2 (tuple2 a1 (tuple2 b1 c1)) b2)
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) b2 (t2tb260 x) b3) p))))
  (=>
  (exists ((b3 uni)) (mem (tuple2 (tuple2 a1 (tuple2 b1 c1)) b2)
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) b2 (t2tb260 x) b3) p)) (mem14 x
  (tb2t261 (dom b2 (tuple2 a1 (tuple2 b1 c1)) p))))))))

;; mem_dom
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (x (set (tuple21 a c))))
  (and
  (=> (mem11 x (tb2t128 (dom b2 (set1 (tuple2 a1 c1)) p)))
  (exists ((b3 uni))
  (and (sort b2 b3) (mem (tuple2 (set1 (tuple2 a1 c1)) b2)
  (Tuple2 (set1 (tuple2 a1 c1)) b2 (t2tb129 x) b3) p))))
  (=>
  (exists ((b3 uni)) (mem (tuple2 (set1 (tuple2 a1 c1)) b2)
  (Tuple2 (set1 (tuple2 a1 c1)) b2 (t2tb129 x) b3) p)) (mem11 x
  (tb2t128 (dom b2 (set1 (tuple2 a1 c1)) p))))))))

;; mem_dom
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (x (tuple21 a c)))
  (and
  (=> (mem10 x (tb2t129 (dom b2 (tuple2 a1 c1) p)))
  (exists ((b3 uni))
  (and (sort b2 b3) (mem (tuple2 (tuple2 a1 c1) b2)
  (Tuple2 (tuple2 a1 c1) b2 (t2tb133 x) b3) p))))
  (=>
  (exists ((b3 uni)) (mem (tuple2 (tuple2 a1 c1) b2)
  (Tuple2 (tuple2 a1 c1) b2 (t2tb133 x) b3) p)) (mem10 x
  (tb2t129 (dom b2 (tuple2 a1 c1) p))))))))

;; mem_dom
  (assert
  (forall ((p (set (tuple21 (tuple21 b c) (tuple21 d e)))) (x (tuple21 b c)))
  (= (mem (tuple2 b1 c1) (t2tb134 x)
  (dom (tuple2 d1 e1) (tuple2 b1 c1) (t2tb4102 p)))
  (exists ((b2 (tuple21 d e))) (mem49
  (tb2t4104 (Tuple2 (tuple2 b1 c1) (tuple2 d1 e1) (t2tb134 x) (t2tb3457 b2)))
  p)))))

;; mem_dom
  (assert
  (forall ((p (set (tuple21 c e))) (x c))
  (= (mem7 x (tb2t132 (dom e1 c1 (t2tb3478 p))))
  (exists ((b2 e)) (mem46 (tb2t3479 (Tuple2 c1 e1 (t2tb135 x) (t2tb2955 b2)))
  p)))))

;; mem_dom
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (x c))
  (and
  (=> (mem7 x (tb2t132 (dom b2 c1 p)))
  (exists ((b3 uni))
  (and (sort b2 b3) (mem (tuple2 c1 b2) (Tuple2 c1 b2 (t2tb135 x) b3) p))))
  (=>
  (exists ((b3 uni)) (mem (tuple2 c1 b2) (Tuple2 c1 b2 (t2tb135 x) b3) p))
  (mem7 x (tb2t132 (dom b2 c1 p))))))))

;; mem_dom
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (x (set (tuple21 a b))))
  (and
  (=> (mem4 x (tb2t10 (dom b2 (set1 (tuple2 a1 b1)) p)))
  (exists ((b3 uni))
  (and (sort b2 b3) (mem (tuple2 (set1 (tuple2 a1 b1)) b2)
  (Tuple2 (set1 (tuple2 a1 b1)) b2 (t2tb11 x) b3) p))))
  (=>
  (exists ((b3 uni)) (mem (tuple2 (set1 (tuple2 a1 b1)) b2)
  (Tuple2 (set1 (tuple2 a1 b1)) b2 (t2tb11 x) b3) p)) (mem4 x
  (tb2t10 (dom b2 (set1 (tuple2 a1 b1)) p))))))))

;; mem_dom
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (x (tuple21 a b)))
  (and
  (=> (mem3 x (tb2t11 (dom b2 (tuple2 a1 b1) p)))
  (exists ((b3 uni))
  (and (sort b2 b3) (mem (tuple2 (tuple2 a1 b1) b2)
  (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) b3) p))))
  (=>
  (exists ((b3 uni)) (mem (tuple2 (tuple2 a1 b1) b2)
  (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) b3) p)) (mem3 x
  (tb2t11 (dom b2 (tuple2 a1 b1) p))))))))

;; mem_dom
  (assert
  (forall ((p (set (tuple21 b d))) (x b))
  (= (mem2 x (tb2t12 (dom d1 b1 (t2tb687 p))))
  (exists ((b2 d)) (mem23 (tb2t692 (Tuple2 b1 d1 (t2tb14 x) (t2tb694 b2)))
  p)))))

;; mem_dom
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (x b))
  (and
  (=> (mem2 x (tb2t12 (dom b2 b1 p)))
  (exists ((b3 uni))
  (and (sort b2 b3) (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) b3) p))))
  (=> (exists ((b3 uni)) (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) b3) p))
  (mem2 x (tb2t12 (dom b2 b1 p))))))))

;; mem_dom
  (assert
  (forall ((p (set (tuple21 a (tuple21 d e)))) (x a))
  (= (mem1 x (tb2t1 (dom (tuple2 d1 e1) a1 (t2tb4103 p))))
  (exists ((b2 (tuple21 d e))) (mem48
  (tb2t4105 (Tuple2 a1 (tuple2 d1 e1) (t2tb2 x) (t2tb3457 b2))) p)))))

;; mem_dom
  (assert
  (forall ((p (set (tuple21 a e))) (x a))
  (= (mem1 x (tb2t1 (dom e1 a1 (t2tb2943 p))))
  (exists ((b2 e)) (mem44 (tb2t2949 (Tuple2 a1 e1 (t2tb2 x) (t2tb2955 b2)))
  p)))))

;; mem_dom
  (assert
  (forall ((p (set (tuple21 a d))) (x a))
  (= (mem1 x (tb2t1 (dom d1 a1 (t2tb903 p))))
  (exists ((b2 d)) (mem32 (tb2t904 (Tuple2 a1 d1 (t2tb2 x) (t2tb694 b2))) p)))))

;; mem_dom
  (assert
  (forall ((p (set (tuple21 a (tuple21 b c)))) (x a))
  (= (mem1 x (tb2t1 (dom (tuple2 b1 c1) a1 (t2tb261 p))))
  (exists ((b2 (tuple21 b c))) (mem14
  (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 b2))) p)))))

;; mem_dom
  (assert
  (forall ((p (set (tuple21 a c))) (x a))
  (= (mem1 x (tb2t1 (dom c1 a1 (t2tb129 p))))
  (exists ((b2 c)) (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 b2))) p)))))

;; mem_dom
  (assert
  (forall ((p (set (tuple21 a b))) (x a))
  (= (mem1 x (tb2t1 (dom b1 a1 (t2tb11 p))))
  (exists ((b2 b)) (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 b2))) p)))))

;; mem_dom
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (x a))
  (and
  (=> (mem1 x (tb2t1 (dom b2 a1 p)))
  (exists ((b3 uni))
  (and (sort b2 b3) (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) b3) p))))
  (=> (exists ((b3 uni)) (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) b3) p))
  (mem1 x (tb2t1 (dom b2 a1 p))))))))

;; mem_dom
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((p uni) (x uni))
  (and
  (=> (mem a2 x (dom b2 a2 p))
  (exists ((b3 uni))
  (and (sort b2 b3) (mem (tuple2 a2 b2) (Tuple2 a2 b2 x b3) p))))
  (=> (exists ((b3 uni)) (mem (tuple2 a2 b2) (Tuple2 a2 b2 x b3) p)) (mem a2
  x (dom b2 a2 p)))))))

(declare-fun ran (ty ty uni) uni)

;; ran_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni)) (sort (set1 b2) (ran b2 a2 x)))))

;; mem_ran
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (x (tuple21 (tuple21 b c) (tuple21 d e))))
  (and
  (=> (mem49 x (tb2t4102 (ran (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) a2 p)))
  (exists ((a3 uni))
  (and (sort a2 a3) (mem (tuple2 a2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)))
  (Tuple2 a2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) a3 (t2tb4104 x)) p))))
  (=>
  (exists ((a3 uni)) (mem (tuple2 a2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)))
  (Tuple2 a2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) a3 (t2tb4104 x)) p))
  (mem49 x (tb2t4102 (ran (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) a2 p))))))))

;; mem_ran
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (x (tuple21 a (tuple21 d e))))
  (and
  (=> (mem48 x (tb2t4103 (ran (tuple2 a1 (tuple2 d1 e1)) a2 p)))
  (exists ((a3 uni))
  (and (sort a2 a3) (mem (tuple2 a2 (tuple2 a1 (tuple2 d1 e1)))
  (Tuple2 a2 (tuple2 a1 (tuple2 d1 e1)) a3 (t2tb4105 x)) p))))
  (=>
  (exists ((a3 uni)) (mem (tuple2 a2 (tuple2 a1 (tuple2 d1 e1)))
  (Tuple2 a2 (tuple2 a1 (tuple2 d1 e1)) a3 (t2tb4105 x)) p)) (mem48 x
  (tb2t4103 (ran (tuple2 a1 (tuple2 d1 e1)) a2 p))))))))

;; mem_ran
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (x (set (tuple21 c e))))
  (and
  (=> (mem47 x (tb2t3854 (ran (set1 (tuple2 c1 e1)) a2 p)))
  (exists ((a3 uni))
  (and (sort a2 a3) (mem (tuple2 a2 (set1 (tuple2 c1 e1)))
  (Tuple2 a2 (set1 (tuple2 c1 e1)) a3 (t2tb3478 x)) p))))
  (=>
  (exists ((a3 uni)) (mem (tuple2 a2 (set1 (tuple2 c1 e1)))
  (Tuple2 a2 (set1 (tuple2 c1 e1)) a3 (t2tb3478 x)) p)) (mem47 x
  (tb2t3854 (ran (set1 (tuple2 c1 e1)) a2 p))))))))

;; mem_ran
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (x (tuple21 c e)))
  (and
  (=> (mem46 x (tb2t3478 (ran (tuple2 c1 e1) a2 p)))
  (exists ((a3 uni))
  (and (sort a2 a3) (mem (tuple2 a2 (tuple2 c1 e1))
  (Tuple2 a2 (tuple2 c1 e1) a3 (t2tb3479 x)) p))))
  (=>
  (exists ((a3 uni)) (mem (tuple2 a2 (tuple2 c1 e1))
  (Tuple2 a2 (tuple2 c1 e1) a3 (t2tb3479 x)) p)) (mem46 x
  (tb2t3478 (ran (tuple2 c1 e1) a2 p))))))))

;; mem_ran
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (x (tuple21 a e)))
  (and
  (=> (mem44 x (tb2t2943 (ran (tuple2 a1 e1) a2 p)))
  (exists ((a3 uni))
  (and (sort a2 a3) (mem (tuple2 a2 (tuple2 a1 e1))
  (Tuple2 a2 (tuple2 a1 e1) a3 (t2tb2949 x)) p))))
  (=>
  (exists ((a3 uni)) (mem (tuple2 a2 (tuple2 a1 e1))
  (Tuple2 a2 (tuple2 a1 e1) a3 (t2tb2949 x)) p)) (mem44 x
  (tb2t2943 (ran (tuple2 a1 e1) a2 p))))))))

;; mem_ran
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (x e))
  (and
  (=> (mem36 x (tb2t2947 (ran e1 a2 p)))
  (exists ((a3 uni))
  (and (sort a2 a3) (mem (tuple2 a2 e1) (Tuple2 a2 e1 a3 (t2tb2955 x)) p))))
  (=>
  (exists ((a3 uni)) (mem (tuple2 a2 e1) (Tuple2 a2 e1 a3 (t2tb2955 x)) p))
  (mem36 x (tb2t2947 (ran e1 a2 p))))))))

;; mem_ran
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (x (tuple21 a d)))
  (and
  (=> (mem32 x (tb2t903 (ran (tuple2 a1 d1) a2 p)))
  (exists ((a3 uni))
  (and (sort a2 a3) (mem (tuple2 a2 (tuple2 a1 d1))
  (Tuple2 a2 (tuple2 a1 d1) a3 (t2tb904 x)) p))))
  (=>
  (exists ((a3 uni)) (mem (tuple2 a2 (tuple2 a1 d1))
  (Tuple2 a2 (tuple2 a1 d1) a3 (t2tb904 x)) p)) (mem32 x
  (tb2t903 (ran (tuple2 a1 d1) a2 p))))))))

;; mem_ran
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (x (set (tuple21 b d))))
  (and
  (=> (mem33 x (tb2t906 (ran (set1 (tuple2 b1 d1)) a2 p)))
  (exists ((a3 uni))
  (and (sort a2 a3) (mem (tuple2 a2 (set1 (tuple2 b1 d1)))
  (Tuple2 a2 (set1 (tuple2 b1 d1)) a3 (t2tb687 x)) p))))
  (=>
  (exists ((a3 uni)) (mem (tuple2 a2 (set1 (tuple2 b1 d1)))
  (Tuple2 a2 (set1 (tuple2 b1 d1)) a3 (t2tb687 x)) p)) (mem33 x
  (tb2t906 (ran (set1 (tuple2 b1 d1)) a2 p))))))))

;; mem_ran
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (x (tuple21 b d)))
  (and
  (=> (mem23 x (tb2t687 (ran (tuple2 b1 d1) a2 p)))
  (exists ((a3 uni))
  (and (sort a2 a3) (mem (tuple2 a2 (tuple2 b1 d1))
  (Tuple2 a2 (tuple2 b1 d1) a3 (t2tb692 x)) p))))
  (=>
  (exists ((a3 uni)) (mem (tuple2 a2 (tuple2 b1 d1))
  (Tuple2 a2 (tuple2 b1 d1) a3 (t2tb692 x)) p)) (mem23 x
  (tb2t687 (ran (tuple2 b1 d1) a2 p))))))))

;; mem_ran
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (x d))
  (and
  (=> (mem20 x (tb2t690 (ran d1 a2 p)))
  (exists ((a3 uni))
  (and (sort a2 a3) (mem (tuple2 a2 d1) (Tuple2 a2 d1 a3 (t2tb694 x)) p))))
  (=>
  (exists ((a3 uni)) (mem (tuple2 a2 d1) (Tuple2 a2 d1 a3 (t2tb694 x)) p))
  (mem20 x (tb2t690 (ran d1 a2 p))))))))

;; mem_ran
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (x (tuple21 a (tuple21 b c))))
  (and
  (=> (mem14 x (tb2t261 (ran (tuple2 a1 (tuple2 b1 c1)) a2 p)))
  (exists ((a3 uni))
  (and (sort a2 a3) (mem (tuple2 a2 (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 a2 (tuple2 a1 (tuple2 b1 c1)) a3 (t2tb260 x)) p))))
  (=>
  (exists ((a3 uni)) (mem (tuple2 a2 (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 a2 (tuple2 a1 (tuple2 b1 c1)) a3 (t2tb260 x)) p)) (mem14 x
  (tb2t261 (ran (tuple2 a1 (tuple2 b1 c1)) a2 p))))))))

;; mem_ran
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (x (set (tuple21 a c))))
  (and
  (=> (mem11 x (tb2t128 (ran (set1 (tuple2 a1 c1)) a2 p)))
  (exists ((a3 uni))
  (and (sort a2 a3) (mem (tuple2 a2 (set1 (tuple2 a1 c1)))
  (Tuple2 a2 (set1 (tuple2 a1 c1)) a3 (t2tb129 x)) p))))
  (=>
  (exists ((a3 uni)) (mem (tuple2 a2 (set1 (tuple2 a1 c1)))
  (Tuple2 a2 (set1 (tuple2 a1 c1)) a3 (t2tb129 x)) p)) (mem11 x
  (tb2t128 (ran (set1 (tuple2 a1 c1)) a2 p))))))))

;; mem_ran
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (x (tuple21 a c)))
  (and
  (=> (mem10 x (tb2t129 (ran (tuple2 a1 c1) a2 p)))
  (exists ((a3 uni))
  (and (sort a2 a3) (mem (tuple2 a2 (tuple2 a1 c1))
  (Tuple2 a2 (tuple2 a1 c1) a3 (t2tb133 x)) p))))
  (=>
  (exists ((a3 uni)) (mem (tuple2 a2 (tuple2 a1 c1))
  (Tuple2 a2 (tuple2 a1 c1) a3 (t2tb133 x)) p)) (mem10 x
  (tb2t129 (ran (tuple2 a1 c1) a2 p))))))))

;; mem_ran
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (x c))
  (and
  (=> (mem7 x (tb2t132 (ran c1 a2 p)))
  (exists ((a3 uni))
  (and (sort a2 a3) (mem (tuple2 a2 c1) (Tuple2 a2 c1 a3 (t2tb135 x)) p))))
  (=>
  (exists ((a3 uni)) (mem (tuple2 a2 c1) (Tuple2 a2 c1 a3 (t2tb135 x)) p))
  (mem7 x (tb2t132 (ran c1 a2 p))))))))

;; mem_ran
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (x (set (tuple21 a b))))
  (and
  (=> (mem4 x (tb2t10 (ran (set1 (tuple2 a1 b1)) a2 p)))
  (exists ((a3 uni))
  (and (sort a2 a3) (mem (tuple2 a2 (set1 (tuple2 a1 b1)))
  (Tuple2 a2 (set1 (tuple2 a1 b1)) a3 (t2tb11 x)) p))))
  (=>
  (exists ((a3 uni)) (mem (tuple2 a2 (set1 (tuple2 a1 b1)))
  (Tuple2 a2 (set1 (tuple2 a1 b1)) a3 (t2tb11 x)) p)) (mem4 x
  (tb2t10 (ran (set1 (tuple2 a1 b1)) a2 p))))))))

;; mem_ran
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (x (tuple21 a b)))
  (and
  (=> (mem3 x (tb2t11 (ran (tuple2 a1 b1) a2 p)))
  (exists ((a3 uni))
  (and (sort a2 a3) (mem (tuple2 a2 (tuple2 a1 b1))
  (Tuple2 a2 (tuple2 a1 b1) a3 (t2tb13 x)) p))))
  (=>
  (exists ((a3 uni)) (mem (tuple2 a2 (tuple2 a1 b1))
  (Tuple2 a2 (tuple2 a1 b1) a3 (t2tb13 x)) p)) (mem3 x
  (tb2t11 (ran (tuple2 a1 b1) a2 p))))))))

;; mem_ran
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (x b))
  (and
  (=> (mem2 x (tb2t12 (ran b1 a2 p)))
  (exists ((a3 uni))
  (and (sort a2 a3) (mem (tuple2 a2 b1) (Tuple2 a2 b1 a3 (t2tb14 x)) p))))
  (=> (exists ((a3 uni)) (mem (tuple2 a2 b1) (Tuple2 a2 b1 a3 (t2tb14 x)) p))
  (mem2 x (tb2t12 (ran b1 a2 p))))))))

;; mem_ran
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (x a))
  (and
  (=> (mem1 x (tb2t1 (ran a1 a2 p)))
  (exists ((a3 uni))
  (and (sort a2 a3) (mem (tuple2 a2 a1) (Tuple2 a2 a1 a3 (t2tb2 x)) p))))
  (=> (exists ((a3 uni)) (mem (tuple2 a2 a1) (Tuple2 a2 a1 a3 (t2tb2 x)) p))
  (mem1 x (tb2t1 (ran a1 a2 p))))))))

;; mem_ran
  (assert
  (forall ((p (set (tuple21 (tuple21 b c) (tuple21 d e)))) (x (tuple21 d e)))
  (= (mem (tuple2 d1 e1) (t2tb3457 x)
  (ran (tuple2 d1 e1) (tuple2 b1 c1) (t2tb4102 p)))
  (exists ((a2 (tuple21 b c))) (mem49
  (tb2t4104 (Tuple2 (tuple2 b1 c1) (tuple2 d1 e1) (t2tb134 a2) (t2tb3457 x)))
  p)))))

;; mem_ran
  (assert
  (forall ((p (set (tuple21 c e))) (x e))
  (= (mem36 x (tb2t2947 (ran e1 c1 (t2tb3478 p))))
  (exists ((a2 c)) (mem46 (tb2t3479 (Tuple2 c1 e1 (t2tb135 a2) (t2tb2955 x)))
  p)))))

;; mem_ran
  (assert
  (forall ((p (set (tuple21 b d))) (x d))
  (= (mem20 x (tb2t690 (ran d1 b1 (t2tb687 p))))
  (exists ((a2 b)) (mem23 (tb2t692 (Tuple2 b1 d1 (t2tb14 a2) (t2tb694 x)))
  p)))))

;; mem_ran
  (assert
  (forall ((p (set (tuple21 a (tuple21 d e)))) (x (tuple21 d e)))
  (= (mem (tuple2 d1 e1) (t2tb3457 x) (ran (tuple2 d1 e1) a1 (t2tb4103 p)))
  (exists ((a2 a)) (mem48
  (tb2t4105 (Tuple2 a1 (tuple2 d1 e1) (t2tb2 a2) (t2tb3457 x))) p)))))

;; mem_ran
  (assert
  (forall ((p (set (tuple21 a e))) (x e))
  (= (mem36 x (tb2t2947 (ran e1 a1 (t2tb2943 p))))
  (exists ((a2 a)) (mem44 (tb2t2949 (Tuple2 a1 e1 (t2tb2 a2) (t2tb2955 x)))
  p)))))

;; mem_ran
  (assert
  (forall ((p (set (tuple21 a d))) (x d))
  (= (mem20 x (tb2t690 (ran d1 a1 (t2tb903 p))))
  (exists ((a2 a)) (mem32 (tb2t904 (Tuple2 a1 d1 (t2tb2 a2) (t2tb694 x))) p)))))

;; mem_ran
  (assert
  (forall ((p (set (tuple21 a (tuple21 b c)))) (x (tuple21 b c)))
  (= (mem (tuple2 b1 c1) (t2tb134 x) (ran (tuple2 b1 c1) a1 (t2tb261 p)))
  (exists ((a2 a)) (mem14
  (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 a2) (t2tb134 x))) p)))))

;; mem_ran
  (assert
  (forall ((p (set (tuple21 a c))) (x c))
  (= (mem7 x (tb2t132 (ran c1 a1 (t2tb129 p))))
  (exists ((a2 a)) (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 a2) (t2tb135 x))) p)))))

;; mem_ran
  (assert
  (forall ((p (set (tuple21 a b))) (x b))
  (= (mem2 x (tb2t12 (ran b1 a1 (t2tb11 p))))
  (exists ((a2 a)) (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 a2) (t2tb14 x))) p)))))

;; mem_ran
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((p uni) (x uni))
  (and
  (=> (mem b2 x (ran b2 a2 p))
  (exists ((a3 uni))
  (and (sort a2 a3) (mem (tuple2 a2 b2) (Tuple2 a2 b2 a3 x) p))))
  (=> (exists ((a3 uni)) (mem (tuple2 a2 b2) (Tuple2 a2 b2 a3 x) p)) (mem b2
  x (ran b2 a2 p)))))))

(declare-fun semicolon (ty ty ty uni uni) uni)

;; semicolon_sort
  (assert
  (forall ((a2 ty) (b2 ty) (c2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (tuple2 a2 c2))
  (semicolon c2 b2 a2 x x1)))))

(declare-fun semicolon16 ((set (tuple21 a b)) (set (tuple21 b
  d))) (set (tuple21 a d)))

(declare-fun semicolon22 ((set (tuple21 a c)) (set (tuple21 c
  e))) (set (tuple21 a e)))

(declare-fun semicolon23 ((set (tuple21 a (tuple21 b c)))
  (set (tuple21 (tuple21 b c) (tuple21 d e)))) (set (tuple21 a (tuple21 d
  e))))

;; mem_semicolon
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (q (set (tuple21 (tuple21 b c) (tuple21 d e)))) (x uni)
  (y (tuple21 d e)))
  (= (mem (tuple2 a2 (tuple2 d1 e1))
  (Tuple2 a2 (tuple2 d1 e1) x (t2tb3457 y))
  (semicolon (tuple2 d1 e1) (tuple2 b1 c1) a2 p (t2tb4102 q)))
  (exists ((b2 (tuple21 b c)))
  (and (mem (tuple2 a2 (tuple2 b1 c1))
  (Tuple2 a2 (tuple2 b1 c1) x (t2tb134 b2)) p) (mem49
  (tb2t4104 (Tuple2 (tuple2 b1 c1) (tuple2 d1 e1) (t2tb134 b2) (t2tb3457 y)))
  q)))))))

;; mem_semicolon
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (q (set (tuple21 c e))) (x uni) (y e))
  (= (mem (tuple2 a2 e1) (Tuple2 a2 e1 x (t2tb2955 y))
  (semicolon e1 c1 a2 p (t2tb3478 q)))
  (exists ((b2 c))
  (and (mem (tuple2 a2 c1) (Tuple2 a2 c1 x (t2tb135 b2)) p) (mem46
  (tb2t3479 (Tuple2 c1 e1 (t2tb135 b2) (t2tb2955 y))) q)))))))

;; mem_semicolon
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (q (set (tuple21 b d))) (x uni) (y d))
  (= (mem (tuple2 a2 d1) (Tuple2 a2 d1 x (t2tb694 y))
  (semicolon d1 b1 a2 p (t2tb687 q)))
  (exists ((b2 b))
  (and (mem (tuple2 a2 b1) (Tuple2 a2 b1 x (t2tb14 b2)) p) (mem23
  (tb2t692 (Tuple2 b1 d1 (t2tb14 b2) (t2tb694 y))) q)))))))

;; mem_semicolon
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (q (set (tuple21 a (tuple21 d e)))) (x uni) (y (tuple21 d
  e)))
  (= (mem (tuple2 a2 (tuple2 d1 e1))
  (Tuple2 a2 (tuple2 d1 e1) x (t2tb3457 y))
  (semicolon (tuple2 d1 e1) a1 a2 p (t2tb4103 q)))
  (exists ((b2 a))
  (and (mem (tuple2 a2 a1) (Tuple2 a2 a1 x (t2tb2 b2)) p) (mem48
  (tb2t4105 (Tuple2 a1 (tuple2 d1 e1) (t2tb2 b2) (t2tb3457 y))) q)))))))

;; mem_semicolon
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (q (set (tuple21 a e))) (x uni) (y e))
  (= (mem (tuple2 a2 e1) (Tuple2 a2 e1 x (t2tb2955 y))
  (semicolon e1 a1 a2 p (t2tb2943 q)))
  (exists ((b2 a))
  (and (mem (tuple2 a2 a1) (Tuple2 a2 a1 x (t2tb2 b2)) p) (mem44
  (tb2t2949 (Tuple2 a1 e1 (t2tb2 b2) (t2tb2955 y))) q)))))))

;; mem_semicolon
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (q (set (tuple21 a d))) (x uni) (y d))
  (= (mem (tuple2 a2 d1) (Tuple2 a2 d1 x (t2tb694 y))
  (semicolon d1 a1 a2 p (t2tb903 q)))
  (exists ((b2 a))
  (and (mem (tuple2 a2 a1) (Tuple2 a2 a1 x (t2tb2 b2)) p) (mem32
  (tb2t904 (Tuple2 a1 d1 (t2tb2 b2) (t2tb694 y))) q)))))))

;; mem_semicolon
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (q (set (tuple21 a (tuple21 b c)))) (x uni) (y (tuple21 b
  c)))
  (= (mem (tuple2 a2 (tuple2 b1 c1)) (Tuple2 a2 (tuple2 b1 c1) x (t2tb134 y))
  (semicolon (tuple2 b1 c1) a1 a2 p (t2tb261 q)))
  (exists ((b2 a))
  (and (mem (tuple2 a2 a1) (Tuple2 a2 a1 x (t2tb2 b2)) p) (mem14
  (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 b2) (t2tb134 y))) q)))))))

;; mem_semicolon
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (q (set (tuple21 a c))) (x uni) (y c))
  (= (mem (tuple2 a2 c1) (Tuple2 a2 c1 x (t2tb135 y))
  (semicolon c1 a1 a2 p (t2tb129 q)))
  (exists ((b2 a))
  (and (mem (tuple2 a2 a1) (Tuple2 a2 a1 x (t2tb2 b2)) p) (mem10
  (tb2t133 (Tuple2 a1 c1 (t2tb2 b2) (t2tb135 y))) q)))))))

;; mem_semicolon
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (q (set (tuple21 a b))) (x uni) (y b))
  (= (mem (tuple2 a2 b1) (Tuple2 a2 b1 x (t2tb14 y))
  (semicolon b1 a1 a2 p (t2tb11 q)))
  (exists ((b2 a))
  (and (mem (tuple2 a2 a1) (Tuple2 a2 a1 x (t2tb2 b2)) p) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 b2) (t2tb14 y))) q)))))))

;; mem_semicolon
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (q uni) (x (tuple21 b c)) (y (tuple21 d e)))
  (and
  (=> (mem49
  (tb2t4104 (Tuple2 (tuple2 b1 c1) (tuple2 d1 e1) (t2tb134 x) (t2tb3457 y)))
  (tb2t4102 (semicolon (tuple2 d1 e1) b2 (tuple2 b1 c1) p q)))
  (exists ((b3 uni))
  (and (sort b2 b3)
  (and (mem (tuple2 (tuple2 b1 c1) b2)
  (Tuple2 (tuple2 b1 c1) b2 (t2tb134 x) b3) p) (mem
  (tuple2 b2 (tuple2 d1 e1)) (Tuple2 b2 (tuple2 d1 e1) b3 (t2tb3457 y)) q)))))
  (=>
  (exists ((b3 uni))
  (and (mem (tuple2 (tuple2 b1 c1) b2)
  (Tuple2 (tuple2 b1 c1) b2 (t2tb134 x) b3) p) (mem
  (tuple2 b2 (tuple2 d1 e1)) (Tuple2 b2 (tuple2 d1 e1) b3 (t2tb3457 y)) q)))
  (mem49
  (tb2t4104 (Tuple2 (tuple2 b1 c1) (tuple2 d1 e1) (t2tb134 x) (t2tb3457 y)))
  (tb2t4102 (semicolon (tuple2 d1 e1) b2 (tuple2 b1 c1) p q))))))))

(declare-fun t2tb4839 ((set (tuple21 (tuple21 d e) (tuple21 d e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 d e) (tuple21 d e))))) (sort
  (set1 (tuple2 (tuple2 d1 e1) (tuple2 d1 e1))) (t2tb4839 x))))

(declare-fun tb2t4839 (uni) (set (tuple21 (tuple21 d e) (tuple21 d e))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 d e) (tuple21 d e)))))
  (! (= (tb2t4839 (t2tb4839 i)) i) :pattern ((t2tb4839 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 d1 e1) (tuple2 d1 e1))) j)
     (= (t2tb4839 (tb2t4839 j)) j)) :pattern ((t2tb4839 (tb2t4839 j))) )))

(declare-fun t2tb4840 ((tuple21 (tuple21 d e) (tuple21 d e))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 d e) (tuple21 d e)))) (sort
  (tuple2 (tuple2 d1 e1) (tuple2 d1 e1)) (t2tb4840 x))))

(declare-fun tb2t4840 (uni) (tuple21 (tuple21 d e) (tuple21 d e)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 d e) (tuple21 d e))))
  (! (= (tb2t4840 (t2tb4840 i)) i) :pattern ((t2tb4840 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 d1 e1) (tuple2 d1 e1)) j)
     (= (t2tb4840 (tb2t4840 j)) j)) :pattern ((t2tb4840 (tb2t4840 j))) )))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 (tuple21 b c) (tuple21 d e))))
  (q (set (tuple21 (tuple21 d e) (tuple21 d e)))) (x (tuple21 b c))
  (y (tuple21 d e)))
  (= (mem49
  (tb2t4104 (Tuple2 (tuple2 b1 c1) (tuple2 d1 e1) (t2tb134 x) (t2tb3457 y)))
  (tb2t4102
  (semicolon (tuple2 d1 e1) (tuple2 d1 e1) (tuple2 b1 c1) (t2tb4102 p)
  (t2tb4839 q))))
  (exists ((b2 (tuple21 d e)))
  (and (mem49
  (tb2t4104 (Tuple2 (tuple2 b1 c1) (tuple2 d1 e1) (t2tb134 x) (t2tb3457 b2)))
  p) (mem (tuple2 (tuple2 d1 e1) (tuple2 d1 e1))
  (Tuple2 (tuple2 d1 e1) (tuple2 d1 e1) (t2tb3457 b2) (t2tb3457 y))
  (t2tb4839 q)))))))

;; mem_semicolon
  (assert
  (forall ((c2 ty))
  (forall ((p (set (tuple21 (tuple21 b c) (tuple21 d e)))) (q uni)
  (x (tuple21 b c)) (y uni))
  (= (mem (tuple2 (tuple2 b1 c1) c2) (Tuple2 (tuple2 b1 c1) c2 (t2tb134 x) y)
  (semicolon c2 (tuple2 d1 e1) (tuple2 b1 c1) (t2tb4102 p) q))
  (exists ((b2 (tuple21 d e)))
  (and (mem49
  (tb2t4104 (Tuple2 (tuple2 b1 c1) (tuple2 d1 e1) (t2tb134 x) (t2tb3457 b2)))
  p) (mem (tuple2 (tuple2 d1 e1) c2)
  (Tuple2 (tuple2 d1 e1) c2 (t2tb3457 b2) y) q)))))))

(declare-fun t2tb1113 ((set (tuple21 (tuple21 b c) (tuple21 b c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b c) (tuple21 b c))))) (sort
  (set1 (tuple2 (tuple2 b1 c1) (tuple2 b1 c1))) (t2tb1113 x))))

(declare-fun tb2t1113 (uni) (set (tuple21 (tuple21 b c) (tuple21 b c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b c) (tuple21 b c)))))
  (! (= (tb2t1113 (t2tb1113 i)) i) :pattern ((t2tb1113 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 c1) (tuple2 b1 c1))) j)
     (= (t2tb1113 (tb2t1113 j)) j)) :pattern ((t2tb1113 (tb2t1113 j))) )))

(declare-fun t2tb1114 ((tuple21 (tuple21 b c) (tuple21 b c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b c) (tuple21 b c)))) (sort
  (tuple2 (tuple2 b1 c1) (tuple2 b1 c1)) (t2tb1114 x))))

(declare-fun tb2t1114 (uni) (tuple21 (tuple21 b c) (tuple21 b c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b c) (tuple21 b c))))
  (! (= (tb2t1114 (t2tb1114 i)) i) :pattern ((t2tb1114 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 c1) (tuple2 b1 c1)) j)
     (= (t2tb1114 (tb2t1114 j)) j)) :pattern ((t2tb1114 (tb2t1114 j))) )))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 (tuple21 b c) (tuple21 b c))))
  (q (set (tuple21 (tuple21 b c) (tuple21 d e)))) (x (tuple21 b c))
  (y (tuple21 d e)))
  (= (mem49
  (tb2t4104 (Tuple2 (tuple2 b1 c1) (tuple2 d1 e1) (t2tb134 x) (t2tb3457 y)))
  (tb2t4102
  (semicolon (tuple2 d1 e1) (tuple2 b1 c1) (tuple2 b1 c1) (t2tb1113 p)
  (t2tb4102 q))))
  (exists ((b2 (tuple21 b c)))
  (and (mem (tuple2 (tuple2 b1 c1) (tuple2 b1 c1))
  (Tuple2 (tuple2 b1 c1) (tuple2 b1 c1) (t2tb134 x) (t2tb134 b2))
  (t2tb1113 p)) (mem49
  (tb2t4104 (Tuple2 (tuple2 b1 c1) (tuple2 d1 e1) (t2tb134 b2) (t2tb3457 y)))
  q))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 (tuple21 b c) a))) (q (set (tuple21 a (tuple21 d
  e)))) (x (tuple21 b c)) (y (tuple21 d e)))
  (= (mem49
  (tb2t4104 (Tuple2 (tuple2 b1 c1) (tuple2 d1 e1) (t2tb134 x) (t2tb3457 y)))
  (tb2t4102
  (semicolon (tuple2 d1 e1) a1 (tuple2 b1 c1) (t2tb1124 p) (t2tb4103 q))))
  (exists ((b2 a))
  (and (mem (tuple2 (tuple2 b1 c1) a1)
  (Tuple2 (tuple2 b1 c1) a1 (t2tb134 x) (t2tb2 b2)) (t2tb1124 p)) (mem48
  (tb2t4105 (Tuple2 a1 (tuple2 d1 e1) (t2tb2 b2) (t2tb3457 y))) q))))))

;; mem_semicolon
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (q uni) (x c) (y e))
  (and
  (=> (mem46 (tb2t3479 (Tuple2 c1 e1 (t2tb135 x) (t2tb2955 y)))
  (tb2t3478 (semicolon e1 b2 c1 p q)))
  (exists ((b3 uni))
  (and (sort b2 b3)
  (and (mem (tuple2 c1 b2) (Tuple2 c1 b2 (t2tb135 x) b3) p) (mem
  (tuple2 b2 e1) (Tuple2 b2 e1 b3 (t2tb2955 y)) q)))))
  (=>
  (exists ((b3 uni))
  (and (mem (tuple2 c1 b2) (Tuple2 c1 b2 (t2tb135 x) b3) p) (mem
  (tuple2 b2 e1) (Tuple2 b2 e1 b3 (t2tb2955 y)) q))) (mem46
  (tb2t3479 (Tuple2 c1 e1 (t2tb135 x) (t2tb2955 y)))
  (tb2t3478 (semicolon e1 b2 c1 p q))))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 c e))) (q (set (tuple21 e e))) (x c) (y e))
  (= (mem46 (tb2t3479 (Tuple2 c1 e1 (t2tb135 x) (t2tb2955 y)))
  (tb2t3478 (semicolon e1 e1 c1 (t2tb3478 p) (t2tb3316 q))))
  (exists ((b2 e))
  (and (mem46 (tb2t3479 (Tuple2 c1 e1 (t2tb135 x) (t2tb2955 b2))) p) (mem
  (tuple2 e1 e1) (Tuple2 e1 e1 (t2tb2955 b2) (t2tb2955 y)) (t2tb3316 q)))))))

;; mem_semicolon
  (assert
  (forall ((c2 ty))
  (forall ((p (set (tuple21 c e))) (q uni) (x c) (y uni))
  (= (mem (tuple2 c1 c2) (Tuple2 c1 c2 (t2tb135 x) y)
  (semicolon c2 e1 c1 (t2tb3478 p) q))
  (exists ((b2 e))
  (and (mem46 (tb2t3479 (Tuple2 c1 e1 (t2tb135 x) (t2tb2955 b2))) p) (mem
  (tuple2 e1 c2) (Tuple2 e1 c2 (t2tb2955 b2) y) q)))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 c c))) (q (set (tuple21 c e))) (x c) (y e))
  (= (mem46 (tb2t3479 (Tuple2 c1 e1 (t2tb135 x) (t2tb2955 y)))
  (tb2t3478 (semicolon e1 c1 c1 (t2tb216 p) (t2tb3478 q))))
  (exists ((b2 c))
  (and (mem (tuple2 c1 c1) (Tuple2 c1 c1 (t2tb135 x) (t2tb135 b2))
  (t2tb216 p)) (mem46 (tb2t3479 (Tuple2 c1 e1 (t2tb135 b2) (t2tb2955 y))) q))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 c a))) (q (set (tuple21 a e))) (x c) (y e))
  (= (mem46 (tb2t3479 (Tuple2 c1 e1 (t2tb135 x) (t2tb2955 y)))
  (tb2t3478 (semicolon e1 a1 c1 (t2tb224 p) (t2tb2943 q))))
  (exists ((b2 a))
  (and (mem (tuple2 c1 a1) (Tuple2 c1 a1 (t2tb135 x) (t2tb2 b2)) (t2tb224 p))
  (mem44 (tb2t2949 (Tuple2 a1 e1 (t2tb2 b2) (t2tb2955 y))) q))))))

;; mem_semicolon
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (q uni) (x b) (y d))
  (and
  (=> (mem23 (tb2t692 (Tuple2 b1 d1 (t2tb14 x) (t2tb694 y)))
  (tb2t687 (semicolon d1 b2 b1 p q)))
  (exists ((b3 uni))
  (and (sort b2 b3)
  (and (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) b3) p) (mem
  (tuple2 b2 d1) (Tuple2 b2 d1 b3 (t2tb694 y)) q)))))
  (=>
  (exists ((b3 uni))
  (and (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) b3) p) (mem
  (tuple2 b2 d1) (Tuple2 b2 d1 b3 (t2tb694 y)) q))) (mem23
  (tb2t692 (Tuple2 b1 d1 (t2tb14 x) (t2tb694 y)))
  (tb2t687 (semicolon d1 b2 b1 p q))))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 b d))) (q (set (tuple21 d d))) (x b) (y d))
  (= (mem23 (tb2t692 (Tuple2 b1 d1 (t2tb14 x) (t2tb694 y)))
  (tb2t687 (semicolon d1 d1 b1 (t2tb687 p) (t2tb825 q))))
  (exists ((b2 d))
  (and (mem23 (tb2t692 (Tuple2 b1 d1 (t2tb14 x) (t2tb694 b2))) p) (mem
  (tuple2 d1 d1) (Tuple2 d1 d1 (t2tb694 b2) (t2tb694 y)) (t2tb825 q)))))))

;; mem_semicolon
  (assert
  (forall ((c2 ty))
  (forall ((p (set (tuple21 b d))) (q uni) (x b) (y uni))
  (= (mem (tuple2 b1 c2) (Tuple2 b1 c2 (t2tb14 x) y)
  (semicolon c2 d1 b1 (t2tb687 p) q))
  (exists ((b2 d))
  (and (mem23 (tb2t692 (Tuple2 b1 d1 (t2tb14 x) (t2tb694 b2))) p) (mem
  (tuple2 d1 c2) (Tuple2 d1 c2 (t2tb694 b2) y) q)))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 b b))) (q (set (tuple21 b d))) (x b) (y d))
  (= (mem23 (tb2t692 (Tuple2 b1 d1 (t2tb14 x) (t2tb694 y)))
  (tb2t687 (semicolon d1 b1 b1 (t2tb35 p) (t2tb687 q))))
  (exists ((b2 b))
  (and (mem (tuple2 b1 b1) (Tuple2 b1 b1 (t2tb14 x) (t2tb14 b2)) (t2tb35 p))
  (mem23 (tb2t692 (Tuple2 b1 d1 (t2tb14 b2) (t2tb694 y))) q))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 b a))) (q (set (tuple21 a d))) (x b) (y d))
  (= (mem23 (tb2t692 (Tuple2 b1 d1 (t2tb14 x) (t2tb694 y)))
  (tb2t687 (semicolon d1 a1 b1 (t2tb37 p) (t2tb903 q))))
  (exists ((b2 a))
  (and (mem (tuple2 b1 a1) (Tuple2 b1 a1 (t2tb14 x) (t2tb2 b2)) (t2tb37 p))
  (mem32 (tb2t904 (Tuple2 a1 d1 (t2tb2 b2) (t2tb694 y))) q))))))

;; mem_semicolon
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (q uni) (x a) (y (tuple21 d e)))
  (and
  (=> (mem48 (tb2t4105 (Tuple2 a1 (tuple2 d1 e1) (t2tb2 x) (t2tb3457 y)))
  (tb2t4103 (semicolon (tuple2 d1 e1) b2 a1 p q)))
  (exists ((b3 uni))
  (and (sort b2 b3)
  (and (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) b3) p) (mem
  (tuple2 b2 (tuple2 d1 e1)) (Tuple2 b2 (tuple2 d1 e1) b3 (t2tb3457 y)) q)))))
  (=>
  (exists ((b3 uni))
  (and (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) b3) p) (mem
  (tuple2 b2 (tuple2 d1 e1)) (Tuple2 b2 (tuple2 d1 e1) b3 (t2tb3457 y)) q)))
  (mem48 (tb2t4105 (Tuple2 a1 (tuple2 d1 e1) (t2tb2 x) (t2tb3457 y)))
  (tb2t4103 (semicolon (tuple2 d1 e1) b2 a1 p q))))))))

;; mem_semicolon
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (q uni) (x a) (y e))
  (and
  (=> (mem44 (tb2t2949 (Tuple2 a1 e1 (t2tb2 x) (t2tb2955 y)))
  (tb2t2943 (semicolon e1 b2 a1 p q)))
  (exists ((b3 uni))
  (and (sort b2 b3)
  (and (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) b3) p) (mem (tuple2 b2 e1)
  (Tuple2 b2 e1 b3 (t2tb2955 y)) q)))))
  (=>
  (exists ((b3 uni))
  (and (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) b3) p) (mem (tuple2 b2 e1)
  (Tuple2 b2 e1 b3 (t2tb2955 y)) q))) (mem44
  (tb2t2949 (Tuple2 a1 e1 (t2tb2 x) (t2tb2955 y)))
  (tb2t2943 (semicolon e1 b2 a1 p q))))))))

;; mem_semicolon
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (q uni) (x a) (y d))
  (and
  (=> (mem32 (tb2t904 (Tuple2 a1 d1 (t2tb2 x) (t2tb694 y)))
  (tb2t903 (semicolon d1 b2 a1 p q)))
  (exists ((b3 uni))
  (and (sort b2 b3)
  (and (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) b3) p) (mem (tuple2 b2 d1)
  (Tuple2 b2 d1 b3 (t2tb694 y)) q)))))
  (=>
  (exists ((b3 uni))
  (and (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) b3) p) (mem (tuple2 b2 d1)
  (Tuple2 b2 d1 b3 (t2tb694 y)) q))) (mem32
  (tb2t904 (Tuple2 a1 d1 (t2tb2 x) (t2tb694 y)))
  (tb2t903 (semicolon d1 b2 a1 p q))))))))

;; mem_semicolon
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (q uni) (x a) (y (tuple21 b c)))
  (and
  (=> (mem14 (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 y)))
  (tb2t261 (semicolon (tuple2 b1 c1) b2 a1 p q)))
  (exists ((b3 uni))
  (and (sort b2 b3)
  (and (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) b3) p) (mem
  (tuple2 b2 (tuple2 b1 c1)) (Tuple2 b2 (tuple2 b1 c1) b3 (t2tb134 y)) q)))))
  (=>
  (exists ((b3 uni))
  (and (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) b3) p) (mem
  (tuple2 b2 (tuple2 b1 c1)) (Tuple2 b2 (tuple2 b1 c1) b3 (t2tb134 y)) q)))
  (mem14 (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 y)))
  (tb2t261 (semicolon (tuple2 b1 c1) b2 a1 p q))))))))

;; mem_semicolon
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (q uni) (x a) (y c))
  (and
  (=> (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y)))
  (tb2t129 (semicolon c1 b2 a1 p q)))
  (exists ((b3 uni))
  (and (sort b2 b3)
  (and (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) b3) p) (mem (tuple2 b2 c1)
  (Tuple2 b2 c1 b3 (t2tb135 y)) q)))))
  (=>
  (exists ((b3 uni))
  (and (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) b3) p) (mem (tuple2 b2 c1)
  (Tuple2 b2 c1 b3 (t2tb135 y)) q))) (mem10
  (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y)))
  (tb2t129 (semicolon c1 b2 a1 p q))))))))

;; mem_semicolon
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (q uni) (x a) (y b))
  (and
  (=> (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y)))
  (tb2t11 (semicolon b1 b2 a1 p q)))
  (exists ((b3 uni))
  (and (sort b2 b3)
  (and (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) b3) p) (mem (tuple2 b2 b1)
  (Tuple2 b2 b1 b3 (t2tb14 y)) q)))))
  (=>
  (exists ((b3 uni))
  (and (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) b3) p) (mem (tuple2 b2 b1)
  (Tuple2 b2 b1 b3 (t2tb14 y)) q))) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y)))
  (tb2t11 (semicolon b1 b2 a1 p q))))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 a (tuple21 d e)))) (q (set (tuple21 (tuple21 d e)
  (tuple21 d e)))) (x a) (y (tuple21 d e)))
  (= (mem48 (tb2t4105 (Tuple2 a1 (tuple2 d1 e1) (t2tb2 x) (t2tb3457 y)))
  (tb2t4103
  (semicolon (tuple2 d1 e1) (tuple2 d1 e1) a1 (t2tb4103 p) (t2tb4839 q))))
  (exists ((b2 (tuple21 d e)))
  (and (mem48 (tb2t4105 (Tuple2 a1 (tuple2 d1 e1) (t2tb2 x) (t2tb3457 b2)))
  p) (mem (tuple2 (tuple2 d1 e1) (tuple2 d1 e1))
  (Tuple2 (tuple2 d1 e1) (tuple2 d1 e1) (t2tb3457 b2) (t2tb3457 y))
  (t2tb4839 q)))))))

(declare-fun t2tb4841 ((set (tuple21 (tuple21 d e) e))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 d e) e)))) (sort
  (set1 (tuple2 (tuple2 d1 e1) e1)) (t2tb4841 x))))

(declare-fun tb2t4841 (uni) (set (tuple21 (tuple21 d e) e)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 d e) e))))
  (! (= (tb2t4841 (t2tb4841 i)) i) :pattern ((t2tb4841 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 d1 e1) e1)) j)
     (= (t2tb4841 (tb2t4841 j)) j)) :pattern ((t2tb4841 (tb2t4841 j))) )))

(declare-fun t2tb4842 ((tuple21 (tuple21 d e) e)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 d e) e))) (sort (tuple2 (tuple2 d1 e1) e1)
  (t2tb4842 x))))

(declare-fun tb2t4842 (uni) (tuple21 (tuple21 d e) e))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 d e) e)))
  (! (= (tb2t4842 (t2tb4842 i)) i) :pattern ((t2tb4842 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 d1 e1) e1) j) (= (t2tb4842 (tb2t4842 j)) j)) :pattern (
  (t2tb4842 (tb2t4842 j))) )))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 a (tuple21 d e)))) (q (set (tuple21 (tuple21 d e)
  e))) (x a) (y e))
  (= (mem44 (tb2t2949 (Tuple2 a1 e1 (t2tb2 x) (t2tb2955 y)))
  (tb2t2943 (semicolon e1 (tuple2 d1 e1) a1 (t2tb4103 p) (t2tb4841 q))))
  (exists ((b2 (tuple21 d e)))
  (and (mem48 (tb2t4105 (Tuple2 a1 (tuple2 d1 e1) (t2tb2 x) (t2tb3457 b2)))
  p) (mem (tuple2 (tuple2 d1 e1) e1)
  (Tuple2 (tuple2 d1 e1) e1 (t2tb3457 b2) (t2tb2955 y)) (t2tb4841 q)))))))

(declare-fun t2tb4843 ((set (tuple21 (tuple21 d e) d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 d e) d)))) (sort
  (set1 (tuple2 (tuple2 d1 e1) d1)) (t2tb4843 x))))

(declare-fun tb2t4843 (uni) (set (tuple21 (tuple21 d e) d)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 d e) d))))
  (! (= (tb2t4843 (t2tb4843 i)) i) :pattern ((t2tb4843 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 d1 e1) d1)) j)
     (= (t2tb4843 (tb2t4843 j)) j)) :pattern ((t2tb4843 (tb2t4843 j))) )))

(declare-fun t2tb4844 ((tuple21 (tuple21 d e) d)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 d e) d))) (sort (tuple2 (tuple2 d1 e1) d1)
  (t2tb4844 x))))

(declare-fun tb2t4844 (uni) (tuple21 (tuple21 d e) d))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 d e) d)))
  (! (= (tb2t4844 (t2tb4844 i)) i) :pattern ((t2tb4844 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 d1 e1) d1) j) (= (t2tb4844 (tb2t4844 j)) j)) :pattern (
  (t2tb4844 (tb2t4844 j))) )))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 a (tuple21 d e)))) (q (set (tuple21 (tuple21 d e)
  d))) (x a) (y d))
  (= (mem32 (tb2t904 (Tuple2 a1 d1 (t2tb2 x) (t2tb694 y)))
  (tb2t903 (semicolon d1 (tuple2 d1 e1) a1 (t2tb4103 p) (t2tb4843 q))))
  (exists ((b2 (tuple21 d e)))
  (and (mem48 (tb2t4105 (Tuple2 a1 (tuple2 d1 e1) (t2tb2 x) (t2tb3457 b2)))
  p) (mem (tuple2 (tuple2 d1 e1) d1)
  (Tuple2 (tuple2 d1 e1) d1 (t2tb3457 b2) (t2tb694 y)) (t2tb4843 q)))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 a (tuple21 d e)))) (q (set (tuple21 (tuple21 d e)
  (tuple21 b c)))) (x a) (y (tuple21 b c)))
  (= (mem14 (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 y)))
  (tb2t261
  (semicolon (tuple2 b1 c1) (tuple2 d1 e1) a1 (t2tb4103 p) (t2tb4835 q))))
  (exists ((b2 (tuple21 d e)))
  (and (mem48 (tb2t4105 (Tuple2 a1 (tuple2 d1 e1) (t2tb2 x) (t2tb3457 b2)))
  p) (mem (tuple2 (tuple2 d1 e1) (tuple2 b1 c1))
  (Tuple2 (tuple2 d1 e1) (tuple2 b1 c1) (t2tb3457 b2) (t2tb134 y))
  (t2tb4835 q)))))))

(declare-fun t2tb4845 ((set (tuple21 (tuple21 d e) c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 d e) c)))) (sort
  (set1 (tuple2 (tuple2 d1 e1) c1)) (t2tb4845 x))))

(declare-fun tb2t4845 (uni) (set (tuple21 (tuple21 d e) c)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 d e) c))))
  (! (= (tb2t4845 (t2tb4845 i)) i) :pattern ((t2tb4845 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 d1 e1) c1)) j)
     (= (t2tb4845 (tb2t4845 j)) j)) :pattern ((t2tb4845 (tb2t4845 j))) )))

(declare-fun t2tb4846 ((tuple21 (tuple21 d e) c)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 d e) c))) (sort (tuple2 (tuple2 d1 e1) c1)
  (t2tb4846 x))))

(declare-fun tb2t4846 (uni) (tuple21 (tuple21 d e) c))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 d e) c)))
  (! (= (tb2t4846 (t2tb4846 i)) i) :pattern ((t2tb4846 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 d1 e1) c1) j) (= (t2tb4846 (tb2t4846 j)) j)) :pattern (
  (t2tb4846 (tb2t4846 j))) )))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 a (tuple21 d e)))) (q (set (tuple21 (tuple21 d e)
  c))) (x a) (y c))
  (= (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y)))
  (tb2t129 (semicolon c1 (tuple2 d1 e1) a1 (t2tb4103 p) (t2tb4845 q))))
  (exists ((b2 (tuple21 d e)))
  (and (mem48 (tb2t4105 (Tuple2 a1 (tuple2 d1 e1) (t2tb2 x) (t2tb3457 b2)))
  p) (mem (tuple2 (tuple2 d1 e1) c1)
  (Tuple2 (tuple2 d1 e1) c1 (t2tb3457 b2) (t2tb135 y)) (t2tb4845 q)))))))

(declare-fun t2tb4847 ((set (tuple21 (tuple21 d e) b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 d e) b)))) (sort
  (set1 (tuple2 (tuple2 d1 e1) b1)) (t2tb4847 x))))

(declare-fun tb2t4847 (uni) (set (tuple21 (tuple21 d e) b)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 d e) b))))
  (! (= (tb2t4847 (t2tb4847 i)) i) :pattern ((t2tb4847 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 d1 e1) b1)) j)
     (= (t2tb4847 (tb2t4847 j)) j)) :pattern ((t2tb4847 (tb2t4847 j))) )))

(declare-fun t2tb4848 ((tuple21 (tuple21 d e) b)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 d e) b))) (sort (tuple2 (tuple2 d1 e1) b1)
  (t2tb4848 x))))

(declare-fun tb2t4848 (uni) (tuple21 (tuple21 d e) b))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 d e) b)))
  (! (= (tb2t4848 (t2tb4848 i)) i) :pattern ((t2tb4848 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 d1 e1) b1) j) (= (t2tb4848 (tb2t4848 j)) j)) :pattern (
  (t2tb4848 (tb2t4848 j))) )))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 a (tuple21 d e)))) (q (set (tuple21 (tuple21 d e)
  b))) (x a) (y b))
  (= (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y)))
  (tb2t11 (semicolon b1 (tuple2 d1 e1) a1 (t2tb4103 p) (t2tb4847 q))))
  (exists ((b2 (tuple21 d e)))
  (and (mem48 (tb2t4105 (Tuple2 a1 (tuple2 d1 e1) (t2tb2 x) (t2tb3457 b2)))
  p) (mem (tuple2 (tuple2 d1 e1) b1)
  (Tuple2 (tuple2 d1 e1) b1 (t2tb3457 b2) (t2tb14 y)) (t2tb4847 q)))))))

;; mem_semicolon
  (assert
  (forall ((c2 ty))
  (forall ((p (set (tuple21 a (tuple21 d e)))) (q uni) (x a) (y uni))
  (= (mem (tuple2 a1 c2) (Tuple2 a1 c2 (t2tb2 x) y)
  (semicolon c2 (tuple2 d1 e1) a1 (t2tb4103 p) q))
  (exists ((b2 (tuple21 d e)))
  (and (mem48 (tb2t4105 (Tuple2 a1 (tuple2 d1 e1) (t2tb2 x) (t2tb3457 b2)))
  p) (mem (tuple2 (tuple2 d1 e1) c2)
  (Tuple2 (tuple2 d1 e1) c2 (t2tb3457 b2) y) q)))))))

(declare-fun t2tb4849 ((set (tuple21 e (tuple21 d e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 e (tuple21 d e))))) (sort
  (set1 (tuple2 e1 (tuple2 d1 e1))) (t2tb4849 x))))

(declare-fun tb2t4849 (uni) (set (tuple21 e (tuple21 d e))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 e (tuple21 d e)))))
  (! (= (tb2t4849 (t2tb4849 i)) i) :pattern ((t2tb4849 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 e1 (tuple2 d1 e1))) j)
     (= (t2tb4849 (tb2t4849 j)) j)) :pattern ((t2tb4849 (tb2t4849 j))) )))

(declare-fun t2tb4850 ((tuple21 e (tuple21 d e))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 e (tuple21 d e)))) (sort (tuple2 e1 (tuple2 d1 e1))
  (t2tb4850 x))))

(declare-fun tb2t4850 (uni) (tuple21 e (tuple21 d e)))

;; BridgeL
  (assert
  (forall ((i (tuple21 e (tuple21 d e))))
  (! (= (tb2t4850 (t2tb4850 i)) i) :pattern ((t2tb4850 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 e1 (tuple2 d1 e1)) j) (= (t2tb4850 (tb2t4850 j)) j)) :pattern (
  (t2tb4850 (tb2t4850 j))) )))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 a e))) (q (set (tuple21 e (tuple21 d e)))) (x a)
  (y (tuple21 d e)))
  (= (mem48 (tb2t4105 (Tuple2 a1 (tuple2 d1 e1) (t2tb2 x) (t2tb3457 y)))
  (tb2t4103 (semicolon (tuple2 d1 e1) e1 a1 (t2tb2943 p) (t2tb4849 q))))
  (exists ((b2 e))
  (and (mem44 (tb2t2949 (Tuple2 a1 e1 (t2tb2 x) (t2tb2955 b2))) p) (mem
  (tuple2 e1 (tuple2 d1 e1))
  (Tuple2 e1 (tuple2 d1 e1) (t2tb2955 b2) (t2tb3457 y)) (t2tb4849 q)))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 a e))) (q (set (tuple21 e e))) (x a) (y e))
  (= (mem44 (tb2t2949 (Tuple2 a1 e1 (t2tb2 x) (t2tb2955 y)))
  (tb2t2943 (semicolon e1 e1 a1 (t2tb2943 p) (t2tb3316 q))))
  (exists ((b2 e))
  (and (mem44 (tb2t2949 (Tuple2 a1 e1 (t2tb2 x) (t2tb2955 b2))) p) (mem
  (tuple2 e1 e1) (Tuple2 e1 e1 (t2tb2955 b2) (t2tb2955 y)) (t2tb3316 q)))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 a e))) (q (set (tuple21 e d))) (x a) (y d))
  (= (mem32 (tb2t904 (Tuple2 a1 d1 (t2tb2 x) (t2tb694 y)))
  (tb2t903 (semicolon d1 e1 a1 (t2tb2943 p) (t2tb3324 q))))
  (exists ((b2 e))
  (and (mem44 (tb2t2949 (Tuple2 a1 e1 (t2tb2 x) (t2tb2955 b2))) p) (mem
  (tuple2 e1 d1) (Tuple2 e1 d1 (t2tb2955 b2) (t2tb694 y)) (t2tb3324 q)))))))

(declare-fun t2tb4851 ((set (tuple21 e (tuple21 b c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 e (tuple21 b c))))) (sort
  (set1 (tuple2 e1 (tuple2 b1 c1))) (t2tb4851 x))))

(declare-fun tb2t4851 (uni) (set (tuple21 e (tuple21 b c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 e (tuple21 b c)))))
  (! (= (tb2t4851 (t2tb4851 i)) i) :pattern ((t2tb4851 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 e1 (tuple2 b1 c1))) j)
     (= (t2tb4851 (tb2t4851 j)) j)) :pattern ((t2tb4851 (tb2t4851 j))) )))

(declare-fun t2tb4852 ((tuple21 e (tuple21 b c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 e (tuple21 b c)))) (sort (tuple2 e1 (tuple2 b1 c1))
  (t2tb4852 x))))

(declare-fun tb2t4852 (uni) (tuple21 e (tuple21 b c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 e (tuple21 b c))))
  (! (= (tb2t4852 (t2tb4852 i)) i) :pattern ((t2tb4852 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 e1 (tuple2 b1 c1)) j) (= (t2tb4852 (tb2t4852 j)) j)) :pattern (
  (t2tb4852 (tb2t4852 j))) )))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 a e))) (q (set (tuple21 e (tuple21 b c)))) (x a)
  (y (tuple21 b c)))
  (= (mem14 (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 y)))
  (tb2t261 (semicolon (tuple2 b1 c1) e1 a1 (t2tb2943 p) (t2tb4851 q))))
  (exists ((b2 e))
  (and (mem44 (tb2t2949 (Tuple2 a1 e1 (t2tb2 x) (t2tb2955 b2))) p) (mem
  (tuple2 e1 (tuple2 b1 c1))
  (Tuple2 e1 (tuple2 b1 c1) (t2tb2955 b2) (t2tb134 y)) (t2tb4851 q)))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 a e))) (q (set (tuple21 e c))) (x a) (y c))
  (= (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y)))
  (tb2t129 (semicolon c1 e1 a1 (t2tb2943 p) (t2tb3326 q))))
  (exists ((b2 e))
  (and (mem44 (tb2t2949 (Tuple2 a1 e1 (t2tb2 x) (t2tb2955 b2))) p) (mem
  (tuple2 e1 c1) (Tuple2 e1 c1 (t2tb2955 b2) (t2tb135 y)) (t2tb3326 q)))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 a e))) (q (set (tuple21 e b))) (x a) (y b))
  (= (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y)))
  (tb2t11 (semicolon b1 e1 a1 (t2tb2943 p) (t2tb3332 q))))
  (exists ((b2 e))
  (and (mem44 (tb2t2949 (Tuple2 a1 e1 (t2tb2 x) (t2tb2955 b2))) p) (mem
  (tuple2 e1 b1) (Tuple2 e1 b1 (t2tb2955 b2) (t2tb14 y)) (t2tb3332 q)))))))

;; mem_semicolon
  (assert
  (forall ((c2 ty))
  (forall ((p (set (tuple21 a e))) (q uni) (x a) (y uni))
  (= (mem (tuple2 a1 c2) (Tuple2 a1 c2 (t2tb2 x) y)
  (semicolon c2 e1 a1 (t2tb2943 p) q))
  (exists ((b2 e))
  (and (mem44 (tb2t2949 (Tuple2 a1 e1 (t2tb2 x) (t2tb2955 b2))) p) (mem
  (tuple2 e1 c2) (Tuple2 e1 c2 (t2tb2955 b2) y) q)))))))

(declare-fun t2tb4853 ((set (tuple21 d (tuple21 d e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 d (tuple21 d e))))) (sort
  (set1 (tuple2 d1 (tuple2 d1 e1))) (t2tb4853 x))))

(declare-fun tb2t4853 (uni) (set (tuple21 d (tuple21 d e))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 d (tuple21 d e)))))
  (! (= (tb2t4853 (t2tb4853 i)) i) :pattern ((t2tb4853 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 d1 (tuple2 d1 e1))) j)
     (= (t2tb4853 (tb2t4853 j)) j)) :pattern ((t2tb4853 (tb2t4853 j))) )))

(declare-fun t2tb4854 ((tuple21 d (tuple21 d e))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 d (tuple21 d e)))) (sort (tuple2 d1 (tuple2 d1 e1))
  (t2tb4854 x))))

(declare-fun tb2t4854 (uni) (tuple21 d (tuple21 d e)))

;; BridgeL
  (assert
  (forall ((i (tuple21 d (tuple21 d e))))
  (! (= (tb2t4854 (t2tb4854 i)) i) :pattern ((t2tb4854 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 d1 (tuple2 d1 e1)) j) (= (t2tb4854 (tb2t4854 j)) j)) :pattern (
  (t2tb4854 (tb2t4854 j))) )))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 a d))) (q (set (tuple21 d (tuple21 d e)))) (x a)
  (y (tuple21 d e)))
  (= (mem48 (tb2t4105 (Tuple2 a1 (tuple2 d1 e1) (t2tb2 x) (t2tb3457 y)))
  (tb2t4103 (semicolon (tuple2 d1 e1) d1 a1 (t2tb903 p) (t2tb4853 q))))
  (exists ((b2 d))
  (and (mem32 (tb2t904 (Tuple2 a1 d1 (t2tb2 x) (t2tb694 b2))) p) (mem
  (tuple2 d1 (tuple2 d1 e1))
  (Tuple2 d1 (tuple2 d1 e1) (t2tb694 b2) (t2tb3457 y)) (t2tb4853 q)))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 a d))) (q (set (tuple21 d e))) (x a) (y e))
  (= (mem44 (tb2t2949 (Tuple2 a1 e1 (t2tb2 x) (t2tb2955 y)))
  (tb2t2943 (semicolon e1 d1 a1 (t2tb903 p) (t2tb3456 q))))
  (exists ((b2 d))
  (and (mem32 (tb2t904 (Tuple2 a1 d1 (t2tb2 x) (t2tb694 b2))) p) (mem
  (tuple2 d1 e1) (Tuple2 d1 e1 (t2tb694 b2) (t2tb2955 y)) (t2tb3456 q)))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 a d))) (q (set (tuple21 d d))) (x a) (y d))
  (= (mem32 (tb2t904 (Tuple2 a1 d1 (t2tb2 x) (t2tb694 y)))
  (tb2t903 (semicolon d1 d1 a1 (t2tb903 p) (t2tb825 q))))
  (exists ((b2 d))
  (and (mem32 (tb2t904 (Tuple2 a1 d1 (t2tb2 x) (t2tb694 b2))) p) (mem
  (tuple2 d1 d1) (Tuple2 d1 d1 (t2tb694 b2) (t2tb694 y)) (t2tb825 q)))))))

(declare-fun t2tb4855 ((set (tuple21 d (tuple21 b c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 d (tuple21 b c))))) (sort
  (set1 (tuple2 d1 (tuple2 b1 c1))) (t2tb4855 x))))

(declare-fun tb2t4855 (uni) (set (tuple21 d (tuple21 b c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 d (tuple21 b c)))))
  (! (= (tb2t4855 (t2tb4855 i)) i) :pattern ((t2tb4855 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 d1 (tuple2 b1 c1))) j)
     (= (t2tb4855 (tb2t4855 j)) j)) :pattern ((t2tb4855 (tb2t4855 j))) )))

(declare-fun t2tb4856 ((tuple21 d (tuple21 b c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 d (tuple21 b c)))) (sort (tuple2 d1 (tuple2 b1 c1))
  (t2tb4856 x))))

(declare-fun tb2t4856 (uni) (tuple21 d (tuple21 b c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 d (tuple21 b c))))
  (! (= (tb2t4856 (t2tb4856 i)) i) :pattern ((t2tb4856 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 d1 (tuple2 b1 c1)) j) (= (t2tb4856 (tb2t4856 j)) j)) :pattern (
  (t2tb4856 (tb2t4856 j))) )))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 a d))) (q (set (tuple21 d (tuple21 b c)))) (x a)
  (y (tuple21 b c)))
  (= (mem14 (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 y)))
  (tb2t261 (semicolon (tuple2 b1 c1) d1 a1 (t2tb903 p) (t2tb4855 q))))
  (exists ((b2 d))
  (and (mem32 (tb2t904 (Tuple2 a1 d1 (t2tb2 x) (t2tb694 b2))) p) (mem
  (tuple2 d1 (tuple2 b1 c1))
  (Tuple2 d1 (tuple2 b1 c1) (t2tb694 b2) (t2tb134 y)) (t2tb4855 q)))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 a d))) (q (set (tuple21 d c))) (x a) (y c))
  (= (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y)))
  (tb2t129 (semicolon c1 d1 a1 (t2tb903 p) (t2tb829 q))))
  (exists ((b2 d))
  (and (mem32 (tb2t904 (Tuple2 a1 d1 (t2tb2 x) (t2tb694 b2))) p) (mem
  (tuple2 d1 c1) (Tuple2 d1 c1 (t2tb694 b2) (t2tb135 y)) (t2tb829 q)))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 a d))) (q (set (tuple21 d b))) (x a) (y b))
  (= (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y)))
  (tb2t11 (semicolon b1 d1 a1 (t2tb903 p) (t2tb835 q))))
  (exists ((b2 d))
  (and (mem32 (tb2t904 (Tuple2 a1 d1 (t2tb2 x) (t2tb694 b2))) p) (mem
  (tuple2 d1 b1) (Tuple2 d1 b1 (t2tb694 b2) (t2tb14 y)) (t2tb835 q)))))))

;; mem_semicolon
  (assert
  (forall ((c2 ty))
  (forall ((p (set (tuple21 a d))) (q uni) (x a) (y uni))
  (= (mem (tuple2 a1 c2) (Tuple2 a1 c2 (t2tb2 x) y)
  (semicolon c2 d1 a1 (t2tb903 p) q))
  (exists ((b2 d))
  (and (mem32 (tb2t904 (Tuple2 a1 d1 (t2tb2 x) (t2tb694 b2))) p) (mem
  (tuple2 d1 c2) (Tuple2 d1 c2 (t2tb694 b2) y) q)))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 a (tuple21 b c)))) (q (set (tuple21 (tuple21 b c)
  (tuple21 d e)))) (x a) (y (tuple21 d e)))
  (= (mem48 (tb2t4105 (Tuple2 a1 (tuple2 d1 e1) (t2tb2 x) (t2tb3457 y)))
  (semicolon23 p q))
  (exists ((b2 (tuple21 b c)))
  (and (mem14 (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 b2))) p)
  (mem49
  (tb2t4104 (Tuple2 (tuple2 b1 c1) (tuple2 d1 e1) (t2tb134 b2) (t2tb3457 y)))
  q))))))

(declare-fun t2tb4857 ((set (tuple21 (tuple21 b c) e))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b c) e)))) (sort
  (set1 (tuple2 (tuple2 b1 c1) e1)) (t2tb4857 x))))

(declare-fun tb2t4857 (uni) (set (tuple21 (tuple21 b c) e)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b c) e))))
  (! (= (tb2t4857 (t2tb4857 i)) i) :pattern ((t2tb4857 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 c1) e1)) j)
     (= (t2tb4857 (tb2t4857 j)) j)) :pattern ((t2tb4857 (tb2t4857 j))) )))

(declare-fun t2tb4858 ((tuple21 (tuple21 b c) e)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b c) e))) (sort (tuple2 (tuple2 b1 c1) e1)
  (t2tb4858 x))))

(declare-fun tb2t4858 (uni) (tuple21 (tuple21 b c) e))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b c) e)))
  (! (= (tb2t4858 (t2tb4858 i)) i) :pattern ((t2tb4858 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 c1) e1) j) (= (t2tb4858 (tb2t4858 j)) j)) :pattern (
  (t2tb4858 (tb2t4858 j))) )))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 a (tuple21 b c)))) (q (set (tuple21 (tuple21 b c)
  e))) (x a) (y e))
  (= (mem44 (tb2t2949 (Tuple2 a1 e1 (t2tb2 x) (t2tb2955 y)))
  (tb2t2943 (semicolon e1 (tuple2 b1 c1) a1 (t2tb261 p) (t2tb4857 q))))
  (exists ((b2 (tuple21 b c)))
  (and (mem14 (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 b2))) p)
  (mem (tuple2 (tuple2 b1 c1) e1)
  (Tuple2 (tuple2 b1 c1) e1 (t2tb134 b2) (t2tb2955 y)) (t2tb4857 q)))))))

(declare-fun t2tb4859 ((set (tuple21 (tuple21 b c) d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b c) d)))) (sort
  (set1 (tuple2 (tuple2 b1 c1) d1)) (t2tb4859 x))))

(declare-fun tb2t4859 (uni) (set (tuple21 (tuple21 b c) d)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b c) d))))
  (! (= (tb2t4859 (t2tb4859 i)) i) :pattern ((t2tb4859 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 c1) d1)) j)
     (= (t2tb4859 (tb2t4859 j)) j)) :pattern ((t2tb4859 (tb2t4859 j))) )))

(declare-fun t2tb4860 ((tuple21 (tuple21 b c) d)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b c) d))) (sort (tuple2 (tuple2 b1 c1) d1)
  (t2tb4860 x))))

(declare-fun tb2t4860 (uni) (tuple21 (tuple21 b c) d))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b c) d)))
  (! (= (tb2t4860 (t2tb4860 i)) i) :pattern ((t2tb4860 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 c1) d1) j) (= (t2tb4860 (tb2t4860 j)) j)) :pattern (
  (t2tb4860 (tb2t4860 j))) )))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 a (tuple21 b c)))) (q (set (tuple21 (tuple21 b c)
  d))) (x a) (y d))
  (= (mem32 (tb2t904 (Tuple2 a1 d1 (t2tb2 x) (t2tb694 y)))
  (tb2t903 (semicolon d1 (tuple2 b1 c1) a1 (t2tb261 p) (t2tb4859 q))))
  (exists ((b2 (tuple21 b c)))
  (and (mem14 (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 b2))) p)
  (mem (tuple2 (tuple2 b1 c1) d1)
  (Tuple2 (tuple2 b1 c1) d1 (t2tb134 b2) (t2tb694 y)) (t2tb4859 q)))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 a (tuple21 b c)))) (q (set (tuple21 (tuple21 b c)
  (tuple21 b c)))) (x a) (y (tuple21 b c)))
  (= (mem14 (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 y)))
  (tb2t261
  (semicolon (tuple2 b1 c1) (tuple2 b1 c1) a1 (t2tb261 p) (t2tb1113 q))))
  (exists ((b2 (tuple21 b c)))
  (and (mem14 (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 b2))) p)
  (mem (tuple2 (tuple2 b1 c1) (tuple2 b1 c1))
  (Tuple2 (tuple2 b1 c1) (tuple2 b1 c1) (t2tb134 b2) (t2tb134 y))
  (t2tb1113 q)))))))

(declare-fun t2tb1115 ((set (tuple21 (tuple21 b c) c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b c) c)))) (sort
  (set1 (tuple2 (tuple2 b1 c1) c1)) (t2tb1115 x))))

(declare-fun tb2t1115 (uni) (set (tuple21 (tuple21 b c) c)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b c) c))))
  (! (= (tb2t1115 (t2tb1115 i)) i) :pattern ((t2tb1115 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 c1) c1)) j)
     (= (t2tb1115 (tb2t1115 j)) j)) :pattern ((t2tb1115 (tb2t1115 j))) )))

(declare-fun t2tb1116 ((tuple21 (tuple21 b c) c)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b c) c))) (sort (tuple2 (tuple2 b1 c1) c1)
  (t2tb1116 x))))

(declare-fun tb2t1116 (uni) (tuple21 (tuple21 b c) c))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b c) c)))
  (! (= (tb2t1116 (t2tb1116 i)) i) :pattern ((t2tb1116 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 c1) c1) j) (= (t2tb1116 (tb2t1116 j)) j)) :pattern (
  (t2tb1116 (tb2t1116 j))) )))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 a (tuple21 b c)))) (q (set (tuple21 (tuple21 b c)
  c))) (x a) (y c))
  (= (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y)))
  (tb2t129 (semicolon c1 (tuple2 b1 c1) a1 (t2tb261 p) (t2tb1115 q))))
  (exists ((b2 (tuple21 b c)))
  (and (mem14 (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 b2))) p)
  (mem (tuple2 (tuple2 b1 c1) c1)
  (Tuple2 (tuple2 b1 c1) c1 (t2tb134 b2) (t2tb135 y)) (t2tb1115 q)))))))

(declare-fun t2tb1121 ((set (tuple21 (tuple21 b c) b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b c) b)))) (sort
  (set1 (tuple2 (tuple2 b1 c1) b1)) (t2tb1121 x))))

(declare-fun tb2t1121 (uni) (set (tuple21 (tuple21 b c) b)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b c) b))))
  (! (= (tb2t1121 (t2tb1121 i)) i) :pattern ((t2tb1121 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 c1) b1)) j)
     (= (t2tb1121 (tb2t1121 j)) j)) :pattern ((t2tb1121 (tb2t1121 j))) )))

(declare-fun t2tb1122 ((tuple21 (tuple21 b c) b)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b c) b))) (sort (tuple2 (tuple2 b1 c1) b1)
  (t2tb1122 x))))

(declare-fun tb2t1122 (uni) (tuple21 (tuple21 b c) b))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b c) b)))
  (! (= (tb2t1122 (t2tb1122 i)) i) :pattern ((t2tb1122 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 c1) b1) j) (= (t2tb1122 (tb2t1122 j)) j)) :pattern (
  (t2tb1122 (tb2t1122 j))) )))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 a (tuple21 b c)))) (q (set (tuple21 (tuple21 b c)
  b))) (x a) (y b))
  (= (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y)))
  (tb2t11 (semicolon b1 (tuple2 b1 c1) a1 (t2tb261 p) (t2tb1121 q))))
  (exists ((b2 (tuple21 b c)))
  (and (mem14 (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 b2))) p)
  (mem (tuple2 (tuple2 b1 c1) b1)
  (Tuple2 (tuple2 b1 c1) b1 (t2tb134 b2) (t2tb14 y)) (t2tb1121 q)))))))

;; mem_semicolon
  (assert
  (forall ((c2 ty))
  (forall ((p (set (tuple21 a (tuple21 b c)))) (q uni) (x a) (y uni))
  (= (mem (tuple2 a1 c2) (Tuple2 a1 c2 (t2tb2 x) y)
  (semicolon c2 (tuple2 b1 c1) a1 (t2tb261 p) q))
  (exists ((b2 (tuple21 b c)))
  (and (mem14 (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 b2))) p)
  (mem (tuple2 (tuple2 b1 c1) c2) (Tuple2 (tuple2 b1 c1) c2 (t2tb134 b2) y)
  q)))))))

(declare-fun t2tb4861 ((set (tuple21 c (tuple21 d e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 c (tuple21 d e))))) (sort
  (set1 (tuple2 c1 (tuple2 d1 e1))) (t2tb4861 x))))

(declare-fun tb2t4861 (uni) (set (tuple21 c (tuple21 d e))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 c (tuple21 d e)))))
  (! (= (tb2t4861 (t2tb4861 i)) i) :pattern ((t2tb4861 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 c1 (tuple2 d1 e1))) j)
     (= (t2tb4861 (tb2t4861 j)) j)) :pattern ((t2tb4861 (tb2t4861 j))) )))

(declare-fun t2tb4862 ((tuple21 c (tuple21 d e))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 c (tuple21 d e)))) (sort (tuple2 c1 (tuple2 d1 e1))
  (t2tb4862 x))))

(declare-fun tb2t4862 (uni) (tuple21 c (tuple21 d e)))

;; BridgeL
  (assert
  (forall ((i (tuple21 c (tuple21 d e))))
  (! (= (tb2t4862 (t2tb4862 i)) i) :pattern ((t2tb4862 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 c1 (tuple2 d1 e1)) j) (= (t2tb4862 (tb2t4862 j)) j)) :pattern (
  (t2tb4862 (tb2t4862 j))) )))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 a c))) (q (set (tuple21 c (tuple21 d e)))) (x a)
  (y (tuple21 d e)))
  (= (mem48 (tb2t4105 (Tuple2 a1 (tuple2 d1 e1) (t2tb2 x) (t2tb3457 y)))
  (tb2t4103 (semicolon (tuple2 d1 e1) c1 a1 (t2tb129 p) (t2tb4861 q))))
  (exists ((b2 c))
  (and (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 b2))) p) (mem
  (tuple2 c1 (tuple2 d1 e1))
  (Tuple2 c1 (tuple2 d1 e1) (t2tb135 b2) (t2tb3457 y)) (t2tb4861 q)))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 a c))) (q (set (tuple21 c e))) (x a) (y e))
  (= (mem44 (tb2t2949 (Tuple2 a1 e1 (t2tb2 x) (t2tb2955 y)))
  (semicolon22 p q))
  (exists ((b2 c))
  (and (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 b2))) p) (mem46
  (tb2t3479 (Tuple2 c1 e1 (t2tb135 b2) (t2tb2955 y))) q))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 a c))) (q (set (tuple21 c d))) (x a) (y d))
  (= (mem32 (tb2t904 (Tuple2 a1 d1 (t2tb2 x) (t2tb694 y)))
  (tb2t903 (semicolon d1 c1 a1 (t2tb129 p) (t2tb689 q))))
  (exists ((b2 c))
  (and (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 b2))) p) (mem
  (tuple2 c1 d1) (Tuple2 c1 d1 (t2tb135 b2) (t2tb694 y)) (t2tb689 q)))))))

(declare-fun t2tb1127 ((set (tuple21 c (tuple21 b c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 c (tuple21 b c))))) (sort
  (set1 (tuple2 c1 (tuple2 b1 c1))) (t2tb1127 x))))

(declare-fun tb2t1127 (uni) (set (tuple21 c (tuple21 b c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 c (tuple21 b c)))))
  (! (= (tb2t1127 (t2tb1127 i)) i) :pattern ((t2tb1127 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 c1 (tuple2 b1 c1))) j)
     (= (t2tb1127 (tb2t1127 j)) j)) :pattern ((t2tb1127 (tb2t1127 j))) )))

(declare-fun t2tb1128 ((tuple21 c (tuple21 b c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 c (tuple21 b c)))) (sort (tuple2 c1 (tuple2 b1 c1))
  (t2tb1128 x))))

(declare-fun tb2t1128 (uni) (tuple21 c (tuple21 b c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 c (tuple21 b c))))
  (! (= (tb2t1128 (t2tb1128 i)) i) :pattern ((t2tb1128 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 c1 (tuple2 b1 c1)) j) (= (t2tb1128 (tb2t1128 j)) j)) :pattern (
  (t2tb1128 (tb2t1128 j))) )))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 a c))) (q (set (tuple21 c (tuple21 b c)))) (x a)
  (y (tuple21 b c)))
  (= (mem14 (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 y)))
  (tb2t261 (semicolon (tuple2 b1 c1) c1 a1 (t2tb129 p) (t2tb1127 q))))
  (exists ((b2 c))
  (and (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 b2))) p) (mem
  (tuple2 c1 (tuple2 b1 c1))
  (Tuple2 c1 (tuple2 b1 c1) (t2tb135 b2) (t2tb134 y)) (t2tb1127 q)))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 a c))) (q (set (tuple21 c c))) (x a) (y c))
  (= (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y)))
  (tb2t129 (semicolon c1 c1 a1 (t2tb129 p) (t2tb216 q))))
  (exists ((b2 c))
  (and (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 b2))) p) (mem
  (tuple2 c1 c1) (Tuple2 c1 c1 (t2tb135 b2) (t2tb135 y)) (t2tb216 q)))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 a c))) (q (set (tuple21 c b))) (x a) (y b))
  (= (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y)))
  (tb2t11 (semicolon b1 c1 a1 (t2tb129 p) (t2tb222 q))))
  (exists ((b2 c))
  (and (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 b2))) p) (mem
  (tuple2 c1 b1) (Tuple2 c1 b1 (t2tb135 b2) (t2tb14 y)) (t2tb222 q)))))))

;; mem_semicolon
  (assert
  (forall ((c2 ty))
  (forall ((p (set (tuple21 a c))) (q uni) (x a) (y uni))
  (= (mem (tuple2 a1 c2) (Tuple2 a1 c2 (t2tb2 x) y)
  (semicolon c2 c1 a1 (t2tb129 p) q))
  (exists ((b2 c))
  (and (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 b2))) p) (mem
  (tuple2 c1 c2) (Tuple2 c1 c2 (t2tb135 b2) y) q)))))))

(declare-fun t2tb4863 ((set (tuple21 b (tuple21 d e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 b (tuple21 d e))))) (sort
  (set1 (tuple2 b1 (tuple2 d1 e1))) (t2tb4863 x))))

(declare-fun tb2t4863 (uni) (set (tuple21 b (tuple21 d e))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 b (tuple21 d e)))))
  (! (= (tb2t4863 (t2tb4863 i)) i) :pattern ((t2tb4863 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 b1 (tuple2 d1 e1))) j)
     (= (t2tb4863 (tb2t4863 j)) j)) :pattern ((t2tb4863 (tb2t4863 j))) )))

(declare-fun t2tb4864 ((tuple21 b (tuple21 d e))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 b (tuple21 d e)))) (sort (tuple2 b1 (tuple2 d1 e1))
  (t2tb4864 x))))

(declare-fun tb2t4864 (uni) (tuple21 b (tuple21 d e)))

;; BridgeL
  (assert
  (forall ((i (tuple21 b (tuple21 d e))))
  (! (= (tb2t4864 (t2tb4864 i)) i) :pattern ((t2tb4864 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 b1 (tuple2 d1 e1)) j) (= (t2tb4864 (tb2t4864 j)) j)) :pattern (
  (t2tb4864 (tb2t4864 j))) )))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 a b))) (q (set (tuple21 b (tuple21 d e)))) (x a)
  (y (tuple21 d e)))
  (= (mem48 (tb2t4105 (Tuple2 a1 (tuple2 d1 e1) (t2tb2 x) (t2tb3457 y)))
  (tb2t4103 (semicolon (tuple2 d1 e1) b1 a1 (t2tb11 p) (t2tb4863 q))))
  (exists ((b2 b))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 b2))) p) (mem
  (tuple2 b1 (tuple2 d1 e1))
  (Tuple2 b1 (tuple2 d1 e1) (t2tb14 b2) (t2tb3457 y)) (t2tb4863 q)))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 a b))) (q (set (tuple21 b e))) (x a) (y e))
  (= (mem44 (tb2t2949 (Tuple2 a1 e1 (t2tb2 x) (t2tb2955 y)))
  (tb2t2943 (semicolon e1 b1 a1 (t2tb11 p) (t2tb2940 q))))
  (exists ((b2 b))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 b2))) p) (mem
  (tuple2 b1 e1) (Tuple2 b1 e1 (t2tb14 b2) (t2tb2955 y)) (t2tb2940 q)))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 a b))) (q (set (tuple21 b d))) (x a) (y d))
  (= (mem32 (tb2t904 (Tuple2 a1 d1 (t2tb2 x) (t2tb694 y))) (semicolon16 p q))
  (exists ((b2 b))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 b2))) p) (mem23
  (tb2t692 (Tuple2 b1 d1 (t2tb14 b2) (t2tb694 y))) q))))))

(declare-fun t2tb1139 ((set (tuple21 b (tuple21 b c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 b (tuple21 b c))))) (sort
  (set1 (tuple2 b1 (tuple2 b1 c1))) (t2tb1139 x))))

(declare-fun tb2t1139 (uni) (set (tuple21 b (tuple21 b c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 b (tuple21 b c)))))
  (! (= (tb2t1139 (t2tb1139 i)) i) :pattern ((t2tb1139 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 b1 (tuple2 b1 c1))) j)
     (= (t2tb1139 (tb2t1139 j)) j)) :pattern ((t2tb1139 (tb2t1139 j))) )))

(declare-fun t2tb1140 ((tuple21 b (tuple21 b c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 b (tuple21 b c)))) (sort (tuple2 b1 (tuple2 b1 c1))
  (t2tb1140 x))))

(declare-fun tb2t1140 (uni) (tuple21 b (tuple21 b c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 b (tuple21 b c))))
  (! (= (tb2t1140 (t2tb1140 i)) i) :pattern ((t2tb1140 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 b1 (tuple2 b1 c1)) j) (= (t2tb1140 (tb2t1140 j)) j)) :pattern (
  (t2tb1140 (tb2t1140 j))) )))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 a b))) (q (set (tuple21 b (tuple21 b c)))) (x a)
  (y (tuple21 b c)))
  (= (mem14 (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 y)))
  (tb2t261 (semicolon (tuple2 b1 c1) b1 a1 (t2tb11 p) (t2tb1139 q))))
  (exists ((b2 b))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 b2))) p) (mem
  (tuple2 b1 (tuple2 b1 c1))
  (Tuple2 b1 (tuple2 b1 c1) (t2tb14 b2) (t2tb134 y)) (t2tb1139 q)))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 a b))) (q (set (tuple21 b c))) (x a) (y c))
  (= (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y)))
  (tb2t129 (semicolon c1 b1 a1 (t2tb11 p) (t2tb131 q))))
  (exists ((b2 b))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 b2))) p) (mem
  (tuple2 b1 c1) (Tuple2 b1 c1 (t2tb14 b2) (t2tb135 y)) (t2tb131 q)))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 a b))) (q (set (tuple21 b b))) (x a) (y b))
  (= (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y)))
  (tb2t11 (semicolon b1 b1 a1 (t2tb11 p) (t2tb35 q))))
  (exists ((b2 b))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 b2))) p) (mem
  (tuple2 b1 b1) (Tuple2 b1 b1 (t2tb14 b2) (t2tb14 y)) (t2tb35 q)))))))

;; mem_semicolon
  (assert
  (forall ((c2 ty))
  (forall ((p (set (tuple21 a b))) (q uni) (x a) (y uni))
  (= (mem (tuple2 a1 c2) (Tuple2 a1 c2 (t2tb2 x) y)
  (semicolon c2 b1 a1 (t2tb11 p) q))
  (exists ((b2 b))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 b2))) p) (mem
  (tuple2 b1 c2) (Tuple2 b1 c2 (t2tb14 b2) y) q)))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 a a))) (q (set (tuple21 a (tuple21 d e)))) (x a)
  (y (tuple21 d e)))
  (= (mem48 (tb2t4105 (Tuple2 a1 (tuple2 d1 e1) (t2tb2 x) (t2tb3457 y)))
  (tb2t4103 (semicolon (tuple2 d1 e1) a1 a1 (t2tb4 p) (t2tb4103 q))))
  (exists ((b2 a))
  (and (mem (tuple2 a1 a1) (Tuple2 a1 a1 (t2tb2 x) (t2tb2 b2)) (t2tb4 p))
  (mem48 (tb2t4105 (Tuple2 a1 (tuple2 d1 e1) (t2tb2 b2) (t2tb3457 y))) q))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 a a))) (q (set (tuple21 a e))) (x a) (y e))
  (= (mem44 (tb2t2949 (Tuple2 a1 e1 (t2tb2 x) (t2tb2955 y)))
  (tb2t2943 (semicolon e1 a1 a1 (t2tb4 p) (t2tb2943 q))))
  (exists ((b2 a))
  (and (mem (tuple2 a1 a1) (Tuple2 a1 a1 (t2tb2 x) (t2tb2 b2)) (t2tb4 p))
  (mem44 (tb2t2949 (Tuple2 a1 e1 (t2tb2 b2) (t2tb2955 y))) q))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 a a))) (q (set (tuple21 a d))) (x a) (y d))
  (= (mem32 (tb2t904 (Tuple2 a1 d1 (t2tb2 x) (t2tb694 y)))
  (tb2t903 (semicolon d1 a1 a1 (t2tb4 p) (t2tb903 q))))
  (exists ((b2 a))
  (and (mem (tuple2 a1 a1) (Tuple2 a1 a1 (t2tb2 x) (t2tb2 b2)) (t2tb4 p))
  (mem32 (tb2t904 (Tuple2 a1 d1 (t2tb2 b2) (t2tb694 y))) q))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 a a))) (q (set (tuple21 a (tuple21 b c)))) (x a)
  (y (tuple21 b c)))
  (= (mem14 (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 y)))
  (tb2t261 (semicolon (tuple2 b1 c1) a1 a1 (t2tb4 p) (t2tb261 q))))
  (exists ((b2 a))
  (and (mem (tuple2 a1 a1) (Tuple2 a1 a1 (t2tb2 x) (t2tb2 b2)) (t2tb4 p))
  (mem14 (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 b2) (t2tb134 y))) q))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 a a))) (q (set (tuple21 a c))) (x a) (y c))
  (= (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y)))
  (tb2t129 (semicolon c1 a1 a1 (t2tb4 p) (t2tb129 q))))
  (exists ((b2 a))
  (and (mem (tuple2 a1 a1) (Tuple2 a1 a1 (t2tb2 x) (t2tb2 b2)) (t2tb4 p))
  (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 b2) (t2tb135 y))) q))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 a a))) (q (set (tuple21 a b))) (x a) (y b))
  (= (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y)))
  (tb2t11 (semicolon b1 a1 a1 (t2tb4 p) (t2tb11 q))))
  (exists ((b2 a))
  (and (mem (tuple2 a1 a1) (Tuple2 a1 a1 (t2tb2 x) (t2tb2 b2)) (t2tb4 p))
  (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 b2) (t2tb14 y))) q))))))

;; mem_semicolon
  (assert
  (forall ((a2 ty) (b2 ty) (c2 ty))
  (forall ((p uni) (q uni) (x uni) (y uni))
  (and
  (=> (mem (tuple2 a2 c2) (Tuple2 a2 c2 x y) (semicolon c2 b2 a2 p q))
  (exists ((b3 uni))
  (and (sort b2 b3)
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x b3) p) (mem (tuple2 b2 c2)
  (Tuple2 b2 c2 b3 y) q)))))
  (=>
  (exists ((b3 uni))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x b3) p) (mem (tuple2 b2 c2)
  (Tuple2 b2 c2 b3 y) q))) (mem (tuple2 a2 c2) (Tuple2 a2 c2 x y)
  (semicolon c2 b2 a2 p q)))))))

(declare-fun semicolon_back (ty ty ty uni uni) uni)

;; semicolon_back_sort
  (assert
  (forall ((a2 ty) (b2 ty) (c2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (tuple2 a2 c2))
  (semicolon_back c2 b2 a2 x x1)))))

;; semicolon_back
  (assert
  (forall ((p (set (tuple21 a (tuple21 b c)))) (q (set (tuple21 (tuple21 b c)
  (tuple21 d e)))))
  (= (tb2t4103
     (semicolon_back (tuple2 d1 e1) (tuple2 b1 c1) a1 (t2tb4102 q)
     (t2tb261 p))) (semicolon23 p q))))

;; semicolon_back
  (assert
  (forall ((p (set (tuple21 a c))) (q (set (tuple21 c e))))
  (= (tb2t2943 (semicolon_back e1 c1 a1 (t2tb3478 q) (t2tb129 p))) (semicolon22
                                                                   p q))))

;; semicolon_back
  (assert
  (forall ((p (set (tuple21 a b))) (q (set (tuple21 b d))))
  (= (tb2t903 (semicolon_back d1 b1 a1 (t2tb687 q) (t2tb11 p))) (semicolon16
                                                                p q))))

;; semicolon_back
  (assert
  (forall ((a2 ty) (b2 ty) (c2 ty))
  (forall ((p uni) (q uni))
  (= (semicolon_back c2 b2 a2 q p) (semicolon c2 b2 a2 p q)))))

(declare-fun id (ty uni) uni)

;; id_sort
  (assert
  (forall ((a2 ty))
  (forall ((x uni)) (sort (set1 (tuple2 a2 a2)) (id a2 x)))))

;; mem_id
  (assert
  (forall ((u (set (tuple21 (tuple21 b c) (tuple21 d e))))
  (x (tuple21 (tuple21 b c) (tuple21 d e))) (y (tuple21 (tuple21 b c)
  (tuple21 d e))))
  (= (mem
  (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1))
  (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)))
  (Tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1))
  (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (t2tb4104 x) (t2tb4104 y))
  (id (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (t2tb4102 u)))
  (and (mem49 x u) (= x y)))))

;; mem_id
  (assert
  (forall ((u (set (tuple21 a (tuple21 d e)))) (x (tuple21 a (tuple21 d e)))
  (y (tuple21 a (tuple21 d e))))
  (= (mem (tuple2 (tuple2 a1 (tuple2 d1 e1)) (tuple2 a1 (tuple2 d1 e1)))
  (Tuple2 (tuple2 a1 (tuple2 d1 e1)) (tuple2 a1 (tuple2 d1 e1)) (t2tb4105 x)
  (t2tb4105 y)) (id (tuple2 a1 (tuple2 d1 e1)) (t2tb4103 u)))
  (and (mem48 x u) (= x y)))))

;; mem_id
  (assert
  (forall ((u (set (set (tuple21 c e)))) (x (set (tuple21 c e)))
  (y (set (tuple21 c e))))
  (= (mem (tuple2 (set1 (tuple2 c1 e1)) (set1 (tuple2 c1 e1)))
  (Tuple2 (set1 (tuple2 c1 e1)) (set1 (tuple2 c1 e1)) (t2tb3478 x)
  (t2tb3478 y)) (id (set1 (tuple2 c1 e1)) (t2tb3854 u)))
  (and (mem47 x u) (= x y)))))

;; mem_id
  (assert
  (forall ((u (set (tuple21 c e))) (x (tuple21 c e)) (y (tuple21 c e)))
  (= (mem (tuple2 (tuple2 c1 e1) (tuple2 c1 e1))
  (Tuple2 (tuple2 c1 e1) (tuple2 c1 e1) (t2tb3479 x) (t2tb3479 y))
  (id (tuple2 c1 e1) (t2tb3478 u))) (and (mem46 x u) (= x y)))))

;; mem_id
  (assert
  (forall ((u (set (tuple21 a e))) (x (tuple21 a e)) (y (tuple21 a e)))
  (= (mem (tuple2 (tuple2 a1 e1) (tuple2 a1 e1))
  (Tuple2 (tuple2 a1 e1) (tuple2 a1 e1) (t2tb2949 x) (t2tb2949 y))
  (id (tuple2 a1 e1) (t2tb2943 u))) (and (mem44 x u) (= x y)))))

;; mem_id
  (assert
  (forall ((u (set e)) (x e) (y e))
  (= (mem (tuple2 e1 e1) (Tuple2 e1 e1 (t2tb2955 x) (t2tb2955 y))
  (id e1 (t2tb2947 u))) (and (mem36 x u) (= x y)))))

;; mem_id
  (assert
  (forall ((u (set (tuple21 a d))) (x (tuple21 a d)) (y (tuple21 a d)))
  (= (mem (tuple2 (tuple2 a1 d1) (tuple2 a1 d1))
  (Tuple2 (tuple2 a1 d1) (tuple2 a1 d1) (t2tb904 x) (t2tb904 y))
  (id (tuple2 a1 d1) (t2tb903 u))) (and (mem32 x u) (= x y)))))

;; mem_id
  (assert
  (forall ((u (set (set (tuple21 b d)))) (x (set (tuple21 b d)))
  (y (set (tuple21 b d))))
  (= (mem (tuple2 (set1 (tuple2 b1 d1)) (set1 (tuple2 b1 d1)))
  (Tuple2 (set1 (tuple2 b1 d1)) (set1 (tuple2 b1 d1)) (t2tb687 x)
  (t2tb687 y)) (id (set1 (tuple2 b1 d1)) (t2tb906 u)))
  (and (mem33 x u) (= x y)))))

;; mem_id
  (assert
  (forall ((u (set (tuple21 b d))) (x (tuple21 b d)) (y (tuple21 b d)))
  (= (mem (tuple2 (tuple2 b1 d1) (tuple2 b1 d1))
  (Tuple2 (tuple2 b1 d1) (tuple2 b1 d1) (t2tb692 x) (t2tb692 y))
  (id (tuple2 b1 d1) (t2tb687 u))) (and (mem23 x u) (= x y)))))

;; mem_id
  (assert
  (forall ((u (set d)) (x d) (y d))
  (= (mem (tuple2 d1 d1) (Tuple2 d1 d1 (t2tb694 x) (t2tb694 y))
  (id d1 (t2tb690 u))) (and (mem20 x u) (= x y)))))

;; mem_id
  (assert
  (forall ((u (set (tuple21 a (tuple21 b c)))) (x (tuple21 a (tuple21 b c)))
  (y (tuple21 a (tuple21 b c))))
  (= (mem (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 (tuple2 b1 c1)) (t2tb260 x)
  (t2tb260 y)) (id (tuple2 a1 (tuple2 b1 c1)) (t2tb261 u)))
  (and (mem14 x u) (= x y)))))

;; mem_id
  (assert
  (forall ((u (set (set (tuple21 a c)))) (x (set (tuple21 a c)))
  (y (set (tuple21 a c))))
  (= (mem (tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 a1 c1)))
  (Tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 a1 c1)) (t2tb129 x)
  (t2tb129 y)) (id (set1 (tuple2 a1 c1)) (t2tb128 u)))
  (and (mem11 x u) (= x y)))))

;; mem_id
  (assert
  (forall ((u (set (tuple21 a c))) (x (tuple21 a c)) (y (tuple21 a c)))
  (= (mem (tuple2 (tuple2 a1 c1) (tuple2 a1 c1))
  (Tuple2 (tuple2 a1 c1) (tuple2 a1 c1) (t2tb133 x) (t2tb133 y))
  (id (tuple2 a1 c1) (t2tb129 u))) (and (mem10 x u) (= x y)))))

;; mem_id
  (assert
  (forall ((u (set c)) (x c) (y c))
  (= (mem (tuple2 c1 c1) (Tuple2 c1 c1 (t2tb135 x) (t2tb135 y))
  (id c1 (t2tb132 u))) (and (mem7 x u) (= x y)))))

;; mem_id
  (assert
  (forall ((u (set (set (tuple21 a b)))) (x (set (tuple21 a b)))
  (y (set (tuple21 a b))))
  (= (mem (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1)))
  (Tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1)) (t2tb11 x) (t2tb11 y))
  (id (set1 (tuple2 a1 b1)) (t2tb10 u))) (and (mem4 x u) (= x y)))))

;; mem_id
  (assert
  (forall ((u (set (tuple21 a b))) (x (tuple21 a b)) (y (tuple21 a b)))
  (= (mem (tuple2 (tuple2 a1 b1) (tuple2 a1 b1))
  (Tuple2 (tuple2 a1 b1) (tuple2 a1 b1) (t2tb13 x) (t2tb13 y))
  (id (tuple2 a1 b1) (t2tb11 u))) (and (mem3 x u) (= x y)))))

;; mem_id
  (assert
  (forall ((u (set b)) (x b) (y b))
  (= (mem (tuple2 b1 b1) (Tuple2 b1 b1 (t2tb14 x) (t2tb14 y))
  (id b1 (t2tb12 u))) (and (mem2 x u) (= x y)))))

;; mem_id
  (assert
  (forall ((u (set a)) (x a) (y a))
  (= (mem (tuple2 a1 a1) (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y))
  (id a1 (t2tb1 u))) (and (mem1 x u) (= x y)))))

;; mem_id
  (assert
  (forall ((a2 ty))
  (forall ((u uni) (x uni) (y uni))
  (=> (sort a2 x)
  (=> (sort a2 y)
  (= (mem (tuple2 a2 a2) (Tuple2 a2 a2 x y) (id a2 u))
  (and (mem a2 x u) (= x y))))))))

(declare-fun domain_restriction (ty ty uni uni) uni)

;; domain_restriction_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (tuple2 a2 b2))
  (domain_restriction b2 a2 x x1)))))

;; mem_domain_restriction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (tuple21 (tuple21 b c) (tuple21 d e))))
  (x (tuple21 (tuple21 b c) (tuple21 d e))) (y uni))
  (= (mem (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) b2)
  (Tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) b2 (t2tb4104 x) y)
  (domain_restriction b2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (t2tb4102 s)
  p))
  (and (mem (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) b2)
  (Tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) b2 (t2tb4104 x) y) p) (mem49
  x s))))))

;; mem_domain_restriction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (tuple21 a (tuple21 d e)))) (x (tuple21 a
  (tuple21 d e))) (y uni))
  (= (mem (tuple2 (tuple2 a1 (tuple2 d1 e1)) b2)
  (Tuple2 (tuple2 a1 (tuple2 d1 e1)) b2 (t2tb4105 x) y)
  (domain_restriction b2 (tuple2 a1 (tuple2 d1 e1)) (t2tb4103 s) p))
  (and (mem (tuple2 (tuple2 a1 (tuple2 d1 e1)) b2)
  (Tuple2 (tuple2 a1 (tuple2 d1 e1)) b2 (t2tb4105 x) y) p) (mem48 x s))))))

;; mem_domain_restriction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (set (tuple21 c e)))) (x (set (tuple21 c e)))
  (y uni))
  (= (mem (tuple2 (set1 (tuple2 c1 e1)) b2)
  (Tuple2 (set1 (tuple2 c1 e1)) b2 (t2tb3478 x) y)
  (domain_restriction b2 (set1 (tuple2 c1 e1)) (t2tb3854 s) p))
  (and (mem (tuple2 (set1 (tuple2 c1 e1)) b2)
  (Tuple2 (set1 (tuple2 c1 e1)) b2 (t2tb3478 x) y) p) (mem47 x s))))))

;; mem_domain_restriction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (tuple21 c e))) (x (tuple21 c e)) (y uni))
  (= (mem (tuple2 (tuple2 c1 e1) b2)
  (Tuple2 (tuple2 c1 e1) b2 (t2tb3479 x) y)
  (domain_restriction b2 (tuple2 c1 e1) (t2tb3478 s) p))
  (and (mem (tuple2 (tuple2 c1 e1) b2)
  (Tuple2 (tuple2 c1 e1) b2 (t2tb3479 x) y) p) (mem46 x s))))))

;; mem_domain_restriction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (tuple21 a e))) (x (tuple21 a e)) (y uni))
  (= (mem (tuple2 (tuple2 a1 e1) b2)
  (Tuple2 (tuple2 a1 e1) b2 (t2tb2949 x) y)
  (domain_restriction b2 (tuple2 a1 e1) (t2tb2943 s) p))
  (and (mem (tuple2 (tuple2 a1 e1) b2)
  (Tuple2 (tuple2 a1 e1) b2 (t2tb2949 x) y) p) (mem44 x s))))))

;; mem_domain_restriction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set e)) (x e) (y uni))
  (= (mem (tuple2 e1 b2) (Tuple2 e1 b2 (t2tb2955 x) y)
  (domain_restriction b2 e1 (t2tb2947 s) p))
  (and (mem (tuple2 e1 b2) (Tuple2 e1 b2 (t2tb2955 x) y) p) (mem36 x s))))))

;; mem_domain_restriction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (tuple21 a d))) (x (tuple21 a d)) (y uni))
  (= (mem (tuple2 (tuple2 a1 d1) b2) (Tuple2 (tuple2 a1 d1) b2 (t2tb904 x) y)
  (domain_restriction b2 (tuple2 a1 d1) (t2tb903 s) p))
  (and (mem (tuple2 (tuple2 a1 d1) b2)
  (Tuple2 (tuple2 a1 d1) b2 (t2tb904 x) y) p) (mem32 x s))))))

;; mem_domain_restriction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (set (tuple21 b d)))) (x (set (tuple21 b d)))
  (y uni))
  (= (mem (tuple2 (set1 (tuple2 b1 d1)) b2)
  (Tuple2 (set1 (tuple2 b1 d1)) b2 (t2tb687 x) y)
  (domain_restriction b2 (set1 (tuple2 b1 d1)) (t2tb906 s) p))
  (and (mem (tuple2 (set1 (tuple2 b1 d1)) b2)
  (Tuple2 (set1 (tuple2 b1 d1)) b2 (t2tb687 x) y) p) (mem33 x s))))))

;; mem_domain_restriction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (tuple21 b d))) (x (tuple21 b d)) (y uni))
  (= (mem (tuple2 (tuple2 b1 d1) b2) (Tuple2 (tuple2 b1 d1) b2 (t2tb692 x) y)
  (domain_restriction b2 (tuple2 b1 d1) (t2tb687 s) p))
  (and (mem (tuple2 (tuple2 b1 d1) b2)
  (Tuple2 (tuple2 b1 d1) b2 (t2tb692 x) y) p) (mem23 x s))))))

;; mem_domain_restriction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set d)) (x d) (y uni))
  (= (mem (tuple2 d1 b2) (Tuple2 d1 b2 (t2tb694 x) y)
  (domain_restriction b2 d1 (t2tb690 s) p))
  (and (mem (tuple2 d1 b2) (Tuple2 d1 b2 (t2tb694 x) y) p) (mem20 x s))))))

;; mem_domain_restriction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (tuple21 a (tuple21 b c)))) (x (tuple21 a
  (tuple21 b c))) (y uni))
  (= (mem (tuple2 (tuple2 a1 (tuple2 b1 c1)) b2)
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) b2 (t2tb260 x) y)
  (domain_restriction b2 (tuple2 a1 (tuple2 b1 c1)) (t2tb261 s) p))
  (and (mem (tuple2 (tuple2 a1 (tuple2 b1 c1)) b2)
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) b2 (t2tb260 x) y) p) (mem14 x s))))))

;; mem_domain_restriction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (set (tuple21 a c)))) (x (set (tuple21 a c)))
  (y uni))
  (= (mem (tuple2 (set1 (tuple2 a1 c1)) b2)
  (Tuple2 (set1 (tuple2 a1 c1)) b2 (t2tb129 x) y)
  (domain_restriction b2 (set1 (tuple2 a1 c1)) (t2tb128 s) p))
  (and (mem (tuple2 (set1 (tuple2 a1 c1)) b2)
  (Tuple2 (set1 (tuple2 a1 c1)) b2 (t2tb129 x) y) p) (mem11 x s))))))

;; mem_domain_restriction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (tuple21 a c))) (x (tuple21 a c)) (y uni))
  (= (mem (tuple2 (tuple2 a1 c1) b2) (Tuple2 (tuple2 a1 c1) b2 (t2tb133 x) y)
  (domain_restriction b2 (tuple2 a1 c1) (t2tb129 s) p))
  (and (mem (tuple2 (tuple2 a1 c1) b2)
  (Tuple2 (tuple2 a1 c1) b2 (t2tb133 x) y) p) (mem10 x s))))))

;; mem_domain_restriction
  (assert
  (forall ((p (set (tuple21 (tuple21 b c) (tuple21 d e)))) (s (set (tuple21 b
  c))) (x (tuple21 b c)) (y (tuple21 d e)))
  (= (mem49
  (tb2t4104 (Tuple2 (tuple2 b1 c1) (tuple2 d1 e1) (t2tb134 x) (t2tb3457 y)))
  (tb2t4102
  (domain_restriction (tuple2 d1 e1) (tuple2 b1 c1) (t2tb131 s) (t2tb4102 p))))
  (and (mem49
  (tb2t4104 (Tuple2 (tuple2 b1 c1) (tuple2 d1 e1) (t2tb134 x) (t2tb3457 y)))
  p) (mem (tuple2 b1 c1) (t2tb134 x) (t2tb131 s))))))

;; mem_domain_restriction
  (assert
  (forall ((p (set (tuple21 c e))) (s (set c)) (x c) (y e))
  (= (mem46 (tb2t3479 (Tuple2 c1 e1 (t2tb135 x) (t2tb2955 y)))
  (tb2t3478 (domain_restriction e1 c1 (t2tb132 s) (t2tb3478 p))))
  (and (mem46 (tb2t3479 (Tuple2 c1 e1 (t2tb135 x) (t2tb2955 y))) p) (mem7 x
  s)))))

;; mem_domain_restriction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set c)) (x c) (y uni))
  (= (mem (tuple2 c1 b2) (Tuple2 c1 b2 (t2tb135 x) y)
  (domain_restriction b2 c1 (t2tb132 s) p))
  (and (mem (tuple2 c1 b2) (Tuple2 c1 b2 (t2tb135 x) y) p) (mem7 x s))))))

;; mem_domain_restriction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (set (tuple21 a b)))) (x (set (tuple21 a b)))
  (y uni))
  (= (mem (tuple2 (set1 (tuple2 a1 b1)) b2)
  (Tuple2 (set1 (tuple2 a1 b1)) b2 (t2tb11 x) y)
  (domain_restriction b2 (set1 (tuple2 a1 b1)) (t2tb10 s) p))
  (and (mem (tuple2 (set1 (tuple2 a1 b1)) b2)
  (Tuple2 (set1 (tuple2 a1 b1)) b2 (t2tb11 x) y) p) (mem4 x s))))))

;; mem_domain_restriction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (tuple21 a b))) (x (tuple21 a b)) (y uni))
  (= (mem (tuple2 (tuple2 a1 b1) b2) (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) y)
  (domain_restriction b2 (tuple2 a1 b1) (t2tb11 s) p))
  (and (mem (tuple2 (tuple2 a1 b1) b2)
  (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) y) p) (mem3 x s))))))

;; mem_domain_restriction
  (assert
  (forall ((p (set (tuple21 b d))) (s (set b)) (x b) (y d))
  (= (mem23 (tb2t692 (Tuple2 b1 d1 (t2tb14 x) (t2tb694 y)))
  (tb2t687 (domain_restriction d1 b1 (t2tb12 s) (t2tb687 p))))
  (and (mem23 (tb2t692 (Tuple2 b1 d1 (t2tb14 x) (t2tb694 y))) p) (mem2 x s)))))

;; mem_domain_restriction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set b)) (x b) (y uni))
  (= (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) y)
  (domain_restriction b2 b1 (t2tb12 s) p))
  (and (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) y) p) (mem2 x s))))))

;; mem_domain_restriction
  (assert
  (forall ((p (set (tuple21 a (tuple21 d e)))) (s (set a)) (x a)
  (y (tuple21 d e)))
  (= (mem48 (tb2t4105 (Tuple2 a1 (tuple2 d1 e1) (t2tb2 x) (t2tb3457 y)))
  (tb2t4103 (domain_restriction (tuple2 d1 e1) a1 (t2tb1 s) (t2tb4103 p))))
  (and (mem48 (tb2t4105 (Tuple2 a1 (tuple2 d1 e1) (t2tb2 x) (t2tb3457 y))) p)
  (mem1 x s)))))

;; mem_domain_restriction
  (assert
  (forall ((p (set (tuple21 a e))) (s (set a)) (x a) (y e))
  (= (mem44 (tb2t2949 (Tuple2 a1 e1 (t2tb2 x) (t2tb2955 y)))
  (tb2t2943 (domain_restriction e1 a1 (t2tb1 s) (t2tb2943 p))))
  (and (mem44 (tb2t2949 (Tuple2 a1 e1 (t2tb2 x) (t2tb2955 y))) p) (mem1 x s)))))

;; mem_domain_restriction
  (assert
  (forall ((p (set (tuple21 a d))) (s (set a)) (x a) (y d))
  (= (mem32 (tb2t904 (Tuple2 a1 d1 (t2tb2 x) (t2tb694 y)))
  (tb2t903 (domain_restriction d1 a1 (t2tb1 s) (t2tb903 p))))
  (and (mem32 (tb2t904 (Tuple2 a1 d1 (t2tb2 x) (t2tb694 y))) p) (mem1 x s)))))

;; mem_domain_restriction
  (assert
  (forall ((p (set (tuple21 a (tuple21 b c)))) (s (set a)) (x a)
  (y (tuple21 b c)))
  (= (mem14 (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 y)))
  (tb2t261 (domain_restriction (tuple2 b1 c1) a1 (t2tb1 s) (t2tb261 p))))
  (and (mem14 (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 y))) p)
  (mem1 x s)))))

;; mem_domain_restriction
  (assert
  (forall ((p (set (tuple21 a c))) (s (set a)) (x a) (y c))
  (= (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y)))
  (tb2t129 (domain_restriction c1 a1 (t2tb1 s) (t2tb129 p))))
  (and (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y))) p) (mem1 x s)))))

;; mem_domain_restriction
  (assert
  (forall ((p (set (tuple21 a b))) (s (set a)) (x a) (y b))
  (= (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y)))
  (tb2t11 (domain_restriction b1 a1 (t2tb1 s) (t2tb11 p))))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y))) p) (mem1 x s)))))

;; mem_domain_restriction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set a)) (x a) (y uni))
  (= (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) y)
  (domain_restriction b2 a1 (t2tb1 s) p))
  (and (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) y) p) (mem1 x s))))))

;; mem_domain_restriction
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((p uni) (s uni) (x uni) (y uni))
  (= (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) (domain_restriction b2 a2 s p))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) p) (mem a2 x s))))))

(declare-fun range_restriction (ty ty uni uni) uni)

;; range_restriction_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (tuple2 a2 b2))
  (range_restriction b2 a2 x x1)))))

;; mem_range_restriction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (tuple21 (tuple21 b c) (tuple21 d e)))) (x uni)
  (y (tuple21 (tuple21 b c) (tuple21 d e))))
  (= (mem (tuple2 a2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)))
  (Tuple2 a2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) x (t2tb4104 y))
  (range_restriction (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) a2 p
  (t2tb4102 t)))
  (and (mem (tuple2 a2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)))
  (Tuple2 a2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) x (t2tb4104 y)) p) (mem49
  y t))))))

;; mem_range_restriction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (tuple21 a (tuple21 d e)))) (x uni) (y (tuple21 a
  (tuple21 d e))))
  (= (mem (tuple2 a2 (tuple2 a1 (tuple2 d1 e1)))
  (Tuple2 a2 (tuple2 a1 (tuple2 d1 e1)) x (t2tb4105 y))
  (range_restriction (tuple2 a1 (tuple2 d1 e1)) a2 p (t2tb4103 t)))
  (and (mem (tuple2 a2 (tuple2 a1 (tuple2 d1 e1)))
  (Tuple2 a2 (tuple2 a1 (tuple2 d1 e1)) x (t2tb4105 y)) p) (mem48 y t))))))

;; mem_range_restriction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (set (tuple21 c e)))) (x uni) (y (set (tuple21 c
  e))))
  (= (mem (tuple2 a2 (set1 (tuple2 c1 e1)))
  (Tuple2 a2 (set1 (tuple2 c1 e1)) x (t2tb3478 y))
  (range_restriction (set1 (tuple2 c1 e1)) a2 p (t2tb3854 t)))
  (and (mem (tuple2 a2 (set1 (tuple2 c1 e1)))
  (Tuple2 a2 (set1 (tuple2 c1 e1)) x (t2tb3478 y)) p) (mem47 y t))))))

;; mem_range_restriction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (tuple21 c e))) (x uni) (y (tuple21 c e)))
  (= (mem (tuple2 a2 (tuple2 c1 e1))
  (Tuple2 a2 (tuple2 c1 e1) x (t2tb3479 y))
  (range_restriction (tuple2 c1 e1) a2 p (t2tb3478 t)))
  (and (mem (tuple2 a2 (tuple2 c1 e1))
  (Tuple2 a2 (tuple2 c1 e1) x (t2tb3479 y)) p) (mem46 y t))))))

;; mem_range_restriction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (tuple21 a e))) (x uni) (y (tuple21 a e)))
  (= (mem (tuple2 a2 (tuple2 a1 e1))
  (Tuple2 a2 (tuple2 a1 e1) x (t2tb2949 y))
  (range_restriction (tuple2 a1 e1) a2 p (t2tb2943 t)))
  (and (mem (tuple2 a2 (tuple2 a1 e1))
  (Tuple2 a2 (tuple2 a1 e1) x (t2tb2949 y)) p) (mem44 y t))))))

;; mem_range_restriction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set e)) (x uni) (y e))
  (= (mem (tuple2 a2 e1) (Tuple2 a2 e1 x (t2tb2955 y))
  (range_restriction e1 a2 p (t2tb2947 t)))
  (and (mem (tuple2 a2 e1) (Tuple2 a2 e1 x (t2tb2955 y)) p) (mem36 y t))))))

;; mem_range_restriction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (tuple21 a d))) (x uni) (y (tuple21 a d)))
  (= (mem (tuple2 a2 (tuple2 a1 d1)) (Tuple2 a2 (tuple2 a1 d1) x (t2tb904 y))
  (range_restriction (tuple2 a1 d1) a2 p (t2tb903 t)))
  (and (mem (tuple2 a2 (tuple2 a1 d1))
  (Tuple2 a2 (tuple2 a1 d1) x (t2tb904 y)) p) (mem32 y t))))))

;; mem_range_restriction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (set (tuple21 b d)))) (x uni) (y (set (tuple21 b
  d))))
  (= (mem (tuple2 a2 (set1 (tuple2 b1 d1)))
  (Tuple2 a2 (set1 (tuple2 b1 d1)) x (t2tb687 y))
  (range_restriction (set1 (tuple2 b1 d1)) a2 p (t2tb906 t)))
  (and (mem (tuple2 a2 (set1 (tuple2 b1 d1)))
  (Tuple2 a2 (set1 (tuple2 b1 d1)) x (t2tb687 y)) p) (mem33 y t))))))

;; mem_range_restriction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (tuple21 b d))) (x uni) (y (tuple21 b d)))
  (= (mem (tuple2 a2 (tuple2 b1 d1)) (Tuple2 a2 (tuple2 b1 d1) x (t2tb692 y))
  (range_restriction (tuple2 b1 d1) a2 p (t2tb687 t)))
  (and (mem (tuple2 a2 (tuple2 b1 d1))
  (Tuple2 a2 (tuple2 b1 d1) x (t2tb692 y)) p) (mem23 y t))))))

;; mem_range_restriction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set d)) (x uni) (y d))
  (= (mem (tuple2 a2 d1) (Tuple2 a2 d1 x (t2tb694 y))
  (range_restriction d1 a2 p (t2tb690 t)))
  (and (mem (tuple2 a2 d1) (Tuple2 a2 d1 x (t2tb694 y)) p) (mem20 y t))))))

;; mem_range_restriction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (tuple21 a (tuple21 b c)))) (x uni) (y (tuple21 a
  (tuple21 b c))))
  (= (mem (tuple2 a2 (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 a2 (tuple2 a1 (tuple2 b1 c1)) x (t2tb260 y))
  (range_restriction (tuple2 a1 (tuple2 b1 c1)) a2 p (t2tb261 t)))
  (and (mem (tuple2 a2 (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 a2 (tuple2 a1 (tuple2 b1 c1)) x (t2tb260 y)) p) (mem14 y t))))))

;; mem_range_restriction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (set (tuple21 a c)))) (x uni) (y (set (tuple21 a
  c))))
  (= (mem (tuple2 a2 (set1 (tuple2 a1 c1)))
  (Tuple2 a2 (set1 (tuple2 a1 c1)) x (t2tb129 y))
  (range_restriction (set1 (tuple2 a1 c1)) a2 p (t2tb128 t)))
  (and (mem (tuple2 a2 (set1 (tuple2 a1 c1)))
  (Tuple2 a2 (set1 (tuple2 a1 c1)) x (t2tb129 y)) p) (mem11 y t))))))

;; mem_range_restriction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (tuple21 a c))) (x uni) (y (tuple21 a c)))
  (= (mem (tuple2 a2 (tuple2 a1 c1)) (Tuple2 a2 (tuple2 a1 c1) x (t2tb133 y))
  (range_restriction (tuple2 a1 c1) a2 p (t2tb129 t)))
  (and (mem (tuple2 a2 (tuple2 a1 c1))
  (Tuple2 a2 (tuple2 a1 c1) x (t2tb133 y)) p) (mem10 y t))))))

;; mem_range_restriction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set c)) (x uni) (y c))
  (= (mem (tuple2 a2 c1) (Tuple2 a2 c1 x (t2tb135 y))
  (range_restriction c1 a2 p (t2tb132 t)))
  (and (mem (tuple2 a2 c1) (Tuple2 a2 c1 x (t2tb135 y)) p) (mem7 y t))))))

;; mem_range_restriction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (set (tuple21 a b)))) (x uni) (y (set (tuple21 a
  b))))
  (= (mem (tuple2 a2 (set1 (tuple2 a1 b1)))
  (Tuple2 a2 (set1 (tuple2 a1 b1)) x (t2tb11 y))
  (range_restriction (set1 (tuple2 a1 b1)) a2 p (t2tb10 t)))
  (and (mem (tuple2 a2 (set1 (tuple2 a1 b1)))
  (Tuple2 a2 (set1 (tuple2 a1 b1)) x (t2tb11 y)) p) (mem4 y t))))))

;; mem_range_restriction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (tuple21 a b))) (x uni) (y (tuple21 a b)))
  (= (mem (tuple2 a2 (tuple2 a1 b1)) (Tuple2 a2 (tuple2 a1 b1) x (t2tb13 y))
  (range_restriction (tuple2 a1 b1) a2 p (t2tb11 t)))
  (and (mem (tuple2 a2 (tuple2 a1 b1))
  (Tuple2 a2 (tuple2 a1 b1) x (t2tb13 y)) p) (mem3 y t))))))

;; mem_range_restriction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set b)) (x uni) (y b))
  (= (mem (tuple2 a2 b1) (Tuple2 a2 b1 x (t2tb14 y))
  (range_restriction b1 a2 p (t2tb12 t)))
  (and (mem (tuple2 a2 b1) (Tuple2 a2 b1 x (t2tb14 y)) p) (mem2 y t))))))

;; mem_range_restriction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set a)) (x uni) (y a))
  (= (mem (tuple2 a2 a1) (Tuple2 a2 a1 x (t2tb2 y))
  (range_restriction a1 a2 p (t2tb1 t)))
  (and (mem (tuple2 a2 a1) (Tuple2 a2 a1 x (t2tb2 y)) p) (mem1 y t))))))

;; mem_range_restriction
  (assert
  (forall ((p (set (tuple21 (tuple21 b c) (tuple21 d e)))) (t (set (tuple21 d
  e))) (x (tuple21 b c)) (y (tuple21 d e)))
  (= (mem49
  (tb2t4104 (Tuple2 (tuple2 b1 c1) (tuple2 d1 e1) (t2tb134 x) (t2tb3457 y)))
  (tb2t4102
  (range_restriction (tuple2 d1 e1) (tuple2 b1 c1) (t2tb4102 p) (t2tb3456 t))))
  (and (mem49
  (tb2t4104 (Tuple2 (tuple2 b1 c1) (tuple2 d1 e1) (t2tb134 x) (t2tb3457 y)))
  p) (mem (tuple2 d1 e1) (t2tb3457 y) (t2tb3456 t))))))

;; mem_range_restriction
  (assert
  (forall ((p (set (tuple21 c e))) (t (set e)) (x c) (y e))
  (= (mem46 (tb2t3479 (Tuple2 c1 e1 (t2tb135 x) (t2tb2955 y)))
  (tb2t3478 (range_restriction e1 c1 (t2tb3478 p) (t2tb2947 t))))
  (and (mem46 (tb2t3479 (Tuple2 c1 e1 (t2tb135 x) (t2tb2955 y))) p) (mem36 y
  t)))))

;; mem_range_restriction
  (assert
  (forall ((p (set (tuple21 b d))) (t (set d)) (x b) (y d))
  (= (mem23 (tb2t692 (Tuple2 b1 d1 (t2tb14 x) (t2tb694 y)))
  (tb2t687 (range_restriction d1 b1 (t2tb687 p) (t2tb690 t))))
  (and (mem23 (tb2t692 (Tuple2 b1 d1 (t2tb14 x) (t2tb694 y))) p) (mem20 y t)))))

;; mem_range_restriction
  (assert
  (forall ((p (set (tuple21 a (tuple21 d e)))) (t (set (tuple21 d e))) (x a)
  (y (tuple21 d e)))
  (= (mem48 (tb2t4105 (Tuple2 a1 (tuple2 d1 e1) (t2tb2 x) (t2tb3457 y)))
  (tb2t4103 (range_restriction (tuple2 d1 e1) a1 (t2tb4103 p) (t2tb3456 t))))
  (and (mem48 (tb2t4105 (Tuple2 a1 (tuple2 d1 e1) (t2tb2 x) (t2tb3457 y))) p)
  (mem (tuple2 d1 e1) (t2tb3457 y) (t2tb3456 t))))))

;; mem_range_restriction
  (assert
  (forall ((p (set (tuple21 a e))) (t (set e)) (x a) (y e))
  (= (mem44 (tb2t2949 (Tuple2 a1 e1 (t2tb2 x) (t2tb2955 y)))
  (tb2t2943 (range_restriction e1 a1 (t2tb2943 p) (t2tb2947 t))))
  (and (mem44 (tb2t2949 (Tuple2 a1 e1 (t2tb2 x) (t2tb2955 y))) p) (mem36 y
  t)))))

;; mem_range_restriction
  (assert
  (forall ((p (set (tuple21 a d))) (t (set d)) (x a) (y d))
  (= (mem32 (tb2t904 (Tuple2 a1 d1 (t2tb2 x) (t2tb694 y)))
  (tb2t903 (range_restriction d1 a1 (t2tb903 p) (t2tb690 t))))
  (and (mem32 (tb2t904 (Tuple2 a1 d1 (t2tb2 x) (t2tb694 y))) p) (mem20 y t)))))

;; mem_range_restriction
  (assert
  (forall ((p (set (tuple21 a (tuple21 b c)))) (t (set (tuple21 b c))) (x a)
  (y (tuple21 b c)))
  (= (mem14 (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 y)))
  (tb2t261 (range_restriction (tuple2 b1 c1) a1 (t2tb261 p) (t2tb131 t))))
  (and (mem14 (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 y))) p)
  (mem (tuple2 b1 c1) (t2tb134 y) (t2tb131 t))))))

;; mem_range_restriction
  (assert
  (forall ((p (set (tuple21 a c))) (t (set c)) (x a) (y c))
  (= (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y)))
  (tb2t129 (range_restriction c1 a1 (t2tb129 p) (t2tb132 t))))
  (and (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y))) p) (mem7 y t)))))

;; mem_range_restriction
  (assert
  (forall ((p (set (tuple21 a b))) (t (set b)) (x a) (y b))
  (= (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y)))
  (tb2t11 (range_restriction b1 a1 (t2tb11 p) (t2tb12 t))))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y))) p) (mem2 y t)))))

;; mem_range_restriction
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((p uni) (t uni) (x uni) (y uni))
  (= (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) (range_restriction b2 a2 p t))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) p) (mem b2 y t))))))

(declare-fun domain_substraction (ty ty uni uni) uni)

;; domain_substraction_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (tuple2 a2 b2))
  (domain_substraction b2 a2 x x1)))))

;; mem_domain_substraction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (tuple21 (tuple21 b c) (tuple21 d e))))
  (x (tuple21 (tuple21 b c) (tuple21 d e))) (y uni))
  (= (mem (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) b2)
  (Tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) b2 (t2tb4104 x) y)
  (domain_substraction b2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (t2tb4102 s)
  p))
  (and (mem (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) b2)
  (Tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) b2 (t2tb4104 x) y) p)
  (not (mem49 x s)))))))

;; mem_domain_substraction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (tuple21 a (tuple21 d e)))) (x (tuple21 a
  (tuple21 d e))) (y uni))
  (= (mem (tuple2 (tuple2 a1 (tuple2 d1 e1)) b2)
  (Tuple2 (tuple2 a1 (tuple2 d1 e1)) b2 (t2tb4105 x) y)
  (domain_substraction b2 (tuple2 a1 (tuple2 d1 e1)) (t2tb4103 s) p))
  (and (mem (tuple2 (tuple2 a1 (tuple2 d1 e1)) b2)
  (Tuple2 (tuple2 a1 (tuple2 d1 e1)) b2 (t2tb4105 x) y) p) (not (mem48 x s)))))))

;; mem_domain_substraction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (set (tuple21 c e)))) (x (set (tuple21 c e)))
  (y uni))
  (= (mem (tuple2 (set1 (tuple2 c1 e1)) b2)
  (Tuple2 (set1 (tuple2 c1 e1)) b2 (t2tb3478 x) y)
  (domain_substraction b2 (set1 (tuple2 c1 e1)) (t2tb3854 s) p))
  (and (mem (tuple2 (set1 (tuple2 c1 e1)) b2)
  (Tuple2 (set1 (tuple2 c1 e1)) b2 (t2tb3478 x) y) p) (not (mem47 x s)))))))

;; mem_domain_substraction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (tuple21 c e))) (x (tuple21 c e)) (y uni))
  (= (mem (tuple2 (tuple2 c1 e1) b2)
  (Tuple2 (tuple2 c1 e1) b2 (t2tb3479 x) y)
  (domain_substraction b2 (tuple2 c1 e1) (t2tb3478 s) p))
  (and (mem (tuple2 (tuple2 c1 e1) b2)
  (Tuple2 (tuple2 c1 e1) b2 (t2tb3479 x) y) p) (not (mem46 x s)))))))

;; mem_domain_substraction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (tuple21 a e))) (x (tuple21 a e)) (y uni))
  (= (mem (tuple2 (tuple2 a1 e1) b2)
  (Tuple2 (tuple2 a1 e1) b2 (t2tb2949 x) y)
  (domain_substraction b2 (tuple2 a1 e1) (t2tb2943 s) p))
  (and (mem (tuple2 (tuple2 a1 e1) b2)
  (Tuple2 (tuple2 a1 e1) b2 (t2tb2949 x) y) p) (not (mem44 x s)))))))

;; mem_domain_substraction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set e)) (x e) (y uni))
  (= (mem (tuple2 e1 b2) (Tuple2 e1 b2 (t2tb2955 x) y)
  (domain_substraction b2 e1 (t2tb2947 s) p))
  (and (mem (tuple2 e1 b2) (Tuple2 e1 b2 (t2tb2955 x) y) p)
  (not (mem36 x s)))))))

;; mem_domain_substraction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (tuple21 a d))) (x (tuple21 a d)) (y uni))
  (= (mem (tuple2 (tuple2 a1 d1) b2) (Tuple2 (tuple2 a1 d1) b2 (t2tb904 x) y)
  (domain_substraction b2 (tuple2 a1 d1) (t2tb903 s) p))
  (and (mem (tuple2 (tuple2 a1 d1) b2)
  (Tuple2 (tuple2 a1 d1) b2 (t2tb904 x) y) p) (not (mem32 x s)))))))

;; mem_domain_substraction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (set (tuple21 b d)))) (x (set (tuple21 b d)))
  (y uni))
  (= (mem (tuple2 (set1 (tuple2 b1 d1)) b2)
  (Tuple2 (set1 (tuple2 b1 d1)) b2 (t2tb687 x) y)
  (domain_substraction b2 (set1 (tuple2 b1 d1)) (t2tb906 s) p))
  (and (mem (tuple2 (set1 (tuple2 b1 d1)) b2)
  (Tuple2 (set1 (tuple2 b1 d1)) b2 (t2tb687 x) y) p) (not (mem33 x s)))))))

;; mem_domain_substraction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (tuple21 b d))) (x (tuple21 b d)) (y uni))
  (= (mem (tuple2 (tuple2 b1 d1) b2) (Tuple2 (tuple2 b1 d1) b2 (t2tb692 x) y)
  (domain_substraction b2 (tuple2 b1 d1) (t2tb687 s) p))
  (and (mem (tuple2 (tuple2 b1 d1) b2)
  (Tuple2 (tuple2 b1 d1) b2 (t2tb692 x) y) p) (not (mem23 x s)))))))

;; mem_domain_substraction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set d)) (x d) (y uni))
  (= (mem (tuple2 d1 b2) (Tuple2 d1 b2 (t2tb694 x) y)
  (domain_substraction b2 d1 (t2tb690 s) p))
  (and (mem (tuple2 d1 b2) (Tuple2 d1 b2 (t2tb694 x) y) p) (not (mem20 x s)))))))

;; mem_domain_substraction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (tuple21 a (tuple21 b c)))) (x (tuple21 a
  (tuple21 b c))) (y uni))
  (= (mem (tuple2 (tuple2 a1 (tuple2 b1 c1)) b2)
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) b2 (t2tb260 x) y)
  (domain_substraction b2 (tuple2 a1 (tuple2 b1 c1)) (t2tb261 s) p))
  (and (mem (tuple2 (tuple2 a1 (tuple2 b1 c1)) b2)
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) b2 (t2tb260 x) y) p) (not (mem14 x s)))))))

;; mem_domain_substraction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (set (tuple21 a c)))) (x (set (tuple21 a c)))
  (y uni))
  (= (mem (tuple2 (set1 (tuple2 a1 c1)) b2)
  (Tuple2 (set1 (tuple2 a1 c1)) b2 (t2tb129 x) y)
  (domain_substraction b2 (set1 (tuple2 a1 c1)) (t2tb128 s) p))
  (and (mem (tuple2 (set1 (tuple2 a1 c1)) b2)
  (Tuple2 (set1 (tuple2 a1 c1)) b2 (t2tb129 x) y) p) (not (mem11 x s)))))))

;; mem_domain_substraction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (tuple21 a c))) (x (tuple21 a c)) (y uni))
  (= (mem (tuple2 (tuple2 a1 c1) b2) (Tuple2 (tuple2 a1 c1) b2 (t2tb133 x) y)
  (domain_substraction b2 (tuple2 a1 c1) (t2tb129 s) p))
  (and (mem (tuple2 (tuple2 a1 c1) b2)
  (Tuple2 (tuple2 a1 c1) b2 (t2tb133 x) y) p) (not (mem10 x s)))))))

;; mem_domain_substraction
  (assert
  (forall ((p (set (tuple21 (tuple21 b c) (tuple21 d e)))) (s (set (tuple21 b
  c))) (x (tuple21 b c)) (y (tuple21 d e)))
  (= (mem49
  (tb2t4104 (Tuple2 (tuple2 b1 c1) (tuple2 d1 e1) (t2tb134 x) (t2tb3457 y)))
  (tb2t4102
  (domain_substraction (tuple2 d1 e1) (tuple2 b1 c1) (t2tb131 s)
  (t2tb4102 p))))
  (and (mem49
  (tb2t4104 (Tuple2 (tuple2 b1 c1) (tuple2 d1 e1) (t2tb134 x) (t2tb3457 y)))
  p) (not (mem (tuple2 b1 c1) (t2tb134 x) (t2tb131 s)))))))

;; mem_domain_substraction
  (assert
  (forall ((p (set (tuple21 c e))) (s (set c)) (x c) (y e))
  (= (mem46 (tb2t3479 (Tuple2 c1 e1 (t2tb135 x) (t2tb2955 y)))
  (tb2t3478 (domain_substraction e1 c1 (t2tb132 s) (t2tb3478 p))))
  (and (mem46 (tb2t3479 (Tuple2 c1 e1 (t2tb135 x) (t2tb2955 y))) p)
  (not (mem7 x s))))))

;; mem_domain_substraction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set c)) (x c) (y uni))
  (= (mem (tuple2 c1 b2) (Tuple2 c1 b2 (t2tb135 x) y)
  (domain_substraction b2 c1 (t2tb132 s) p))
  (and (mem (tuple2 c1 b2) (Tuple2 c1 b2 (t2tb135 x) y) p) (not (mem7 x s)))))))

;; mem_domain_substraction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (set (tuple21 a b)))) (x (set (tuple21 a b)))
  (y uni))
  (= (mem (tuple2 (set1 (tuple2 a1 b1)) b2)
  (Tuple2 (set1 (tuple2 a1 b1)) b2 (t2tb11 x) y)
  (domain_substraction b2 (set1 (tuple2 a1 b1)) (t2tb10 s) p))
  (and (mem (tuple2 (set1 (tuple2 a1 b1)) b2)
  (Tuple2 (set1 (tuple2 a1 b1)) b2 (t2tb11 x) y) p) (not (mem4 x s)))))))

;; mem_domain_substraction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (tuple21 a b))) (x (tuple21 a b)) (y uni))
  (= (mem (tuple2 (tuple2 a1 b1) b2) (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) y)
  (domain_substraction b2 (tuple2 a1 b1) (t2tb11 s) p))
  (and (mem (tuple2 (tuple2 a1 b1) b2)
  (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) y) p) (not (mem3 x s)))))))

;; mem_domain_substraction
  (assert
  (forall ((p (set (tuple21 b d))) (s (set b)) (x b) (y d))
  (= (mem23 (tb2t692 (Tuple2 b1 d1 (t2tb14 x) (t2tb694 y)))
  (tb2t687 (domain_substraction d1 b1 (t2tb12 s) (t2tb687 p))))
  (and (mem23 (tb2t692 (Tuple2 b1 d1 (t2tb14 x) (t2tb694 y))) p)
  (not (mem2 x s))))))

;; mem_domain_substraction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set b)) (x b) (y uni))
  (= (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) y)
  (domain_substraction b2 b1 (t2tb12 s) p))
  (and (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) y) p) (not (mem2 x s)))))))

;; mem_domain_substraction
  (assert
  (forall ((p (set (tuple21 a (tuple21 d e)))) (s (set a)) (x a)
  (y (tuple21 d e)))
  (= (mem48 (tb2t4105 (Tuple2 a1 (tuple2 d1 e1) (t2tb2 x) (t2tb3457 y)))
  (tb2t4103 (domain_substraction (tuple2 d1 e1) a1 (t2tb1 s) (t2tb4103 p))))
  (and (mem48 (tb2t4105 (Tuple2 a1 (tuple2 d1 e1) (t2tb2 x) (t2tb3457 y))) p)
  (not (mem1 x s))))))

;; mem_domain_substraction
  (assert
  (forall ((p (set (tuple21 a e))) (s (set a)) (x a) (y e))
  (= (mem44 (tb2t2949 (Tuple2 a1 e1 (t2tb2 x) (t2tb2955 y)))
  (tb2t2943 (domain_substraction e1 a1 (t2tb1 s) (t2tb2943 p))))
  (and (mem44 (tb2t2949 (Tuple2 a1 e1 (t2tb2 x) (t2tb2955 y))) p)
  (not (mem1 x s))))))

;; mem_domain_substraction
  (assert
  (forall ((p (set (tuple21 a d))) (s (set a)) (x a) (y d))
  (= (mem32 (tb2t904 (Tuple2 a1 d1 (t2tb2 x) (t2tb694 y)))
  (tb2t903 (domain_substraction d1 a1 (t2tb1 s) (t2tb903 p))))
  (and (mem32 (tb2t904 (Tuple2 a1 d1 (t2tb2 x) (t2tb694 y))) p)
  (not (mem1 x s))))))

;; mem_domain_substraction
  (assert
  (forall ((p (set (tuple21 a (tuple21 b c)))) (s (set a)) (x a)
  (y (tuple21 b c)))
  (= (mem14 (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 y)))
  (tb2t261 (domain_substraction (tuple2 b1 c1) a1 (t2tb1 s) (t2tb261 p))))
  (and (mem14 (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 y))) p)
  (not (mem1 x s))))))

;; mem_domain_substraction
  (assert
  (forall ((p (set (tuple21 a c))) (s (set a)) (x a) (y c))
  (= (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y)))
  (tb2t129 (domain_substraction c1 a1 (t2tb1 s) (t2tb129 p))))
  (and (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y))) p)
  (not (mem1 x s))))))

;; mem_domain_substraction
  (assert
  (forall ((p (set (tuple21 a b))) (s (set a)) (x a) (y b))
  (= (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y)))
  (tb2t11 (domain_substraction b1 a1 (t2tb1 s) (t2tb11 p))))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y))) p)
  (not (mem1 x s))))))

;; mem_domain_substraction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set a)) (x a) (y uni))
  (= (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) y)
  (domain_substraction b2 a1 (t2tb1 s) p))
  (and (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) y) p) (not (mem1 x s)))))))

;; mem_domain_substraction
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((p uni) (s uni) (x uni) (y uni))
  (= (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) (domain_substraction b2 a2 s p))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) p) (not (mem a2 x s)))))))

(declare-fun range_substraction (ty ty uni uni) uni)

;; range_substraction_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (tuple2 a2 b2))
  (range_substraction b2 a2 x x1)))))

;; mem_range_substraction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (tuple21 (tuple21 b c) (tuple21 d e)))) (x uni)
  (y (tuple21 (tuple21 b c) (tuple21 d e))))
  (= (mem (tuple2 a2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)))
  (Tuple2 a2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) x (t2tb4104 y))
  (range_substraction (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) a2 p
  (t2tb4102 t)))
  (and (mem (tuple2 a2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)))
  (Tuple2 a2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) x (t2tb4104 y)) p)
  (not (mem49 y t)))))))

;; mem_range_substraction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (tuple21 a (tuple21 d e)))) (x uni) (y (tuple21 a
  (tuple21 d e))))
  (= (mem (tuple2 a2 (tuple2 a1 (tuple2 d1 e1)))
  (Tuple2 a2 (tuple2 a1 (tuple2 d1 e1)) x (t2tb4105 y))
  (range_substraction (tuple2 a1 (tuple2 d1 e1)) a2 p (t2tb4103 t)))
  (and (mem (tuple2 a2 (tuple2 a1 (tuple2 d1 e1)))
  (Tuple2 a2 (tuple2 a1 (tuple2 d1 e1)) x (t2tb4105 y)) p) (not (mem48 y t)))))))

;; mem_range_substraction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (set (tuple21 c e)))) (x uni) (y (set (tuple21 c
  e))))
  (= (mem (tuple2 a2 (set1 (tuple2 c1 e1)))
  (Tuple2 a2 (set1 (tuple2 c1 e1)) x (t2tb3478 y))
  (range_substraction (set1 (tuple2 c1 e1)) a2 p (t2tb3854 t)))
  (and (mem (tuple2 a2 (set1 (tuple2 c1 e1)))
  (Tuple2 a2 (set1 (tuple2 c1 e1)) x (t2tb3478 y)) p) (not (mem47 y t)))))))

;; mem_range_substraction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (tuple21 c e))) (x uni) (y (tuple21 c e)))
  (= (mem (tuple2 a2 (tuple2 c1 e1))
  (Tuple2 a2 (tuple2 c1 e1) x (t2tb3479 y))
  (range_substraction (tuple2 c1 e1) a2 p (t2tb3478 t)))
  (and (mem (tuple2 a2 (tuple2 c1 e1))
  (Tuple2 a2 (tuple2 c1 e1) x (t2tb3479 y)) p) (not (mem46 y t)))))))

;; mem_range_substraction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (tuple21 a e))) (x uni) (y (tuple21 a e)))
  (= (mem (tuple2 a2 (tuple2 a1 e1))
  (Tuple2 a2 (tuple2 a1 e1) x (t2tb2949 y))
  (range_substraction (tuple2 a1 e1) a2 p (t2tb2943 t)))
  (and (mem (tuple2 a2 (tuple2 a1 e1))
  (Tuple2 a2 (tuple2 a1 e1) x (t2tb2949 y)) p) (not (mem44 y t)))))))

;; mem_range_substraction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set e)) (x uni) (y e))
  (= (mem (tuple2 a2 e1) (Tuple2 a2 e1 x (t2tb2955 y))
  (range_substraction e1 a2 p (t2tb2947 t)))
  (and (mem (tuple2 a2 e1) (Tuple2 a2 e1 x (t2tb2955 y)) p)
  (not (mem36 y t)))))))

;; mem_range_substraction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (tuple21 a d))) (x uni) (y (tuple21 a d)))
  (= (mem (tuple2 a2 (tuple2 a1 d1)) (Tuple2 a2 (tuple2 a1 d1) x (t2tb904 y))
  (range_substraction (tuple2 a1 d1) a2 p (t2tb903 t)))
  (and (mem (tuple2 a2 (tuple2 a1 d1))
  (Tuple2 a2 (tuple2 a1 d1) x (t2tb904 y)) p) (not (mem32 y t)))))))

;; mem_range_substraction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (set (tuple21 b d)))) (x uni) (y (set (tuple21 b
  d))))
  (= (mem (tuple2 a2 (set1 (tuple2 b1 d1)))
  (Tuple2 a2 (set1 (tuple2 b1 d1)) x (t2tb687 y))
  (range_substraction (set1 (tuple2 b1 d1)) a2 p (t2tb906 t)))
  (and (mem (tuple2 a2 (set1 (tuple2 b1 d1)))
  (Tuple2 a2 (set1 (tuple2 b1 d1)) x (t2tb687 y)) p) (not (mem33 y t)))))))

;; mem_range_substraction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (tuple21 b d))) (x uni) (y (tuple21 b d)))
  (= (mem (tuple2 a2 (tuple2 b1 d1)) (Tuple2 a2 (tuple2 b1 d1) x (t2tb692 y))
  (range_substraction (tuple2 b1 d1) a2 p (t2tb687 t)))
  (and (mem (tuple2 a2 (tuple2 b1 d1))
  (Tuple2 a2 (tuple2 b1 d1) x (t2tb692 y)) p) (not (mem23 y t)))))))

;; mem_range_substraction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set d)) (x uni) (y d))
  (= (mem (tuple2 a2 d1) (Tuple2 a2 d1 x (t2tb694 y))
  (range_substraction d1 a2 p (t2tb690 t)))
  (and (mem (tuple2 a2 d1) (Tuple2 a2 d1 x (t2tb694 y)) p) (not (mem20 y t)))))))

;; mem_range_substraction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (tuple21 a (tuple21 b c)))) (x uni) (y (tuple21 a
  (tuple21 b c))))
  (= (mem (tuple2 a2 (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 a2 (tuple2 a1 (tuple2 b1 c1)) x (t2tb260 y))
  (range_substraction (tuple2 a1 (tuple2 b1 c1)) a2 p (t2tb261 t)))
  (and (mem (tuple2 a2 (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 a2 (tuple2 a1 (tuple2 b1 c1)) x (t2tb260 y)) p) (not (mem14 y t)))))))

;; mem_range_substraction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (set (tuple21 a c)))) (x uni) (y (set (tuple21 a
  c))))
  (= (mem (tuple2 a2 (set1 (tuple2 a1 c1)))
  (Tuple2 a2 (set1 (tuple2 a1 c1)) x (t2tb129 y))
  (range_substraction (set1 (tuple2 a1 c1)) a2 p (t2tb128 t)))
  (and (mem (tuple2 a2 (set1 (tuple2 a1 c1)))
  (Tuple2 a2 (set1 (tuple2 a1 c1)) x (t2tb129 y)) p) (not (mem11 y t)))))))

;; mem_range_substraction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (tuple21 a c))) (x uni) (y (tuple21 a c)))
  (= (mem (tuple2 a2 (tuple2 a1 c1)) (Tuple2 a2 (tuple2 a1 c1) x (t2tb133 y))
  (range_substraction (tuple2 a1 c1) a2 p (t2tb129 t)))
  (and (mem (tuple2 a2 (tuple2 a1 c1))
  (Tuple2 a2 (tuple2 a1 c1) x (t2tb133 y)) p) (not (mem10 y t)))))))

;; mem_range_substraction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set c)) (x uni) (y c))
  (= (mem (tuple2 a2 c1) (Tuple2 a2 c1 x (t2tb135 y))
  (range_substraction c1 a2 p (t2tb132 t)))
  (and (mem (tuple2 a2 c1) (Tuple2 a2 c1 x (t2tb135 y)) p) (not (mem7 y t)))))))

;; mem_range_substraction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (set (tuple21 a b)))) (x uni) (y (set (tuple21 a
  b))))
  (= (mem (tuple2 a2 (set1 (tuple2 a1 b1)))
  (Tuple2 a2 (set1 (tuple2 a1 b1)) x (t2tb11 y))
  (range_substraction (set1 (tuple2 a1 b1)) a2 p (t2tb10 t)))
  (and (mem (tuple2 a2 (set1 (tuple2 a1 b1)))
  (Tuple2 a2 (set1 (tuple2 a1 b1)) x (t2tb11 y)) p) (not (mem4 y t)))))))

;; mem_range_substraction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (tuple21 a b))) (x uni) (y (tuple21 a b)))
  (= (mem (tuple2 a2 (tuple2 a1 b1)) (Tuple2 a2 (tuple2 a1 b1) x (t2tb13 y))
  (range_substraction (tuple2 a1 b1) a2 p (t2tb11 t)))
  (and (mem (tuple2 a2 (tuple2 a1 b1))
  (Tuple2 a2 (tuple2 a1 b1) x (t2tb13 y)) p) (not (mem3 y t)))))))

;; mem_range_substraction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set b)) (x uni) (y b))
  (= (mem (tuple2 a2 b1) (Tuple2 a2 b1 x (t2tb14 y))
  (range_substraction b1 a2 p (t2tb12 t)))
  (and (mem (tuple2 a2 b1) (Tuple2 a2 b1 x (t2tb14 y)) p) (not (mem2 y t)))))))

;; mem_range_substraction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set a)) (x uni) (y a))
  (= (mem (tuple2 a2 a1) (Tuple2 a2 a1 x (t2tb2 y))
  (range_substraction a1 a2 p (t2tb1 t)))
  (and (mem (tuple2 a2 a1) (Tuple2 a2 a1 x (t2tb2 y)) p) (not (mem1 y t)))))))

;; mem_range_substraction
  (assert
  (forall ((p (set (tuple21 (tuple21 b c) (tuple21 d e)))) (t (set (tuple21 d
  e))) (x (tuple21 b c)) (y (tuple21 d e)))
  (= (mem49
  (tb2t4104 (Tuple2 (tuple2 b1 c1) (tuple2 d1 e1) (t2tb134 x) (t2tb3457 y)))
  (tb2t4102
  (range_substraction (tuple2 d1 e1) (tuple2 b1 c1) (t2tb4102 p)
  (t2tb3456 t))))
  (and (mem49
  (tb2t4104 (Tuple2 (tuple2 b1 c1) (tuple2 d1 e1) (t2tb134 x) (t2tb3457 y)))
  p) (not (mem (tuple2 d1 e1) (t2tb3457 y) (t2tb3456 t)))))))

;; mem_range_substraction
  (assert
  (forall ((p (set (tuple21 c e))) (t (set e)) (x c) (y e))
  (= (mem46 (tb2t3479 (Tuple2 c1 e1 (t2tb135 x) (t2tb2955 y)))
  (tb2t3478 (range_substraction e1 c1 (t2tb3478 p) (t2tb2947 t))))
  (and (mem46 (tb2t3479 (Tuple2 c1 e1 (t2tb135 x) (t2tb2955 y))) p)
  (not (mem36 y t))))))

;; mem_range_substraction
  (assert
  (forall ((p (set (tuple21 b d))) (t (set d)) (x b) (y d))
  (= (mem23 (tb2t692 (Tuple2 b1 d1 (t2tb14 x) (t2tb694 y)))
  (tb2t687 (range_substraction d1 b1 (t2tb687 p) (t2tb690 t))))
  (and (mem23 (tb2t692 (Tuple2 b1 d1 (t2tb14 x) (t2tb694 y))) p)
  (not (mem20 y t))))))

;; mem_range_substraction
  (assert
  (forall ((p (set (tuple21 a (tuple21 d e)))) (t (set (tuple21 d e))) (x a)
  (y (tuple21 d e)))
  (= (mem48 (tb2t4105 (Tuple2 a1 (tuple2 d1 e1) (t2tb2 x) (t2tb3457 y)))
  (tb2t4103 (range_substraction (tuple2 d1 e1) a1 (t2tb4103 p) (t2tb3456 t))))
  (and (mem48 (tb2t4105 (Tuple2 a1 (tuple2 d1 e1) (t2tb2 x) (t2tb3457 y))) p)
  (not (mem (tuple2 d1 e1) (t2tb3457 y) (t2tb3456 t)))))))

;; mem_range_substraction
  (assert
  (forall ((p (set (tuple21 a e))) (t (set e)) (x a) (y e))
  (= (mem44 (tb2t2949 (Tuple2 a1 e1 (t2tb2 x) (t2tb2955 y)))
  (tb2t2943 (range_substraction e1 a1 (t2tb2943 p) (t2tb2947 t))))
  (and (mem44 (tb2t2949 (Tuple2 a1 e1 (t2tb2 x) (t2tb2955 y))) p)
  (not (mem36 y t))))))

;; mem_range_substraction
  (assert
  (forall ((p (set (tuple21 a d))) (t (set d)) (x a) (y d))
  (= (mem32 (tb2t904 (Tuple2 a1 d1 (t2tb2 x) (t2tb694 y)))
  (tb2t903 (range_substraction d1 a1 (t2tb903 p) (t2tb690 t))))
  (and (mem32 (tb2t904 (Tuple2 a1 d1 (t2tb2 x) (t2tb694 y))) p)
  (not (mem20 y t))))))

;; mem_range_substraction
  (assert
  (forall ((p (set (tuple21 a (tuple21 b c)))) (t (set (tuple21 b c))) (x a)
  (y (tuple21 b c)))
  (= (mem14 (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 y)))
  (tb2t261 (range_substraction (tuple2 b1 c1) a1 (t2tb261 p) (t2tb131 t))))
  (and (mem14 (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 y))) p)
  (not (mem (tuple2 b1 c1) (t2tb134 y) (t2tb131 t)))))))

;; mem_range_substraction
  (assert
  (forall ((p (set (tuple21 a c))) (t (set c)) (x a) (y c))
  (= (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y)))
  (tb2t129 (range_substraction c1 a1 (t2tb129 p) (t2tb132 t))))
  (and (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y))) p)
  (not (mem7 y t))))))

;; mem_range_substraction
  (assert
  (forall ((p (set (tuple21 a b))) (t (set b)) (x a) (y b))
  (= (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y)))
  (tb2t11 (range_substraction b1 a1 (t2tb11 p) (t2tb12 t))))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y))) p)
  (not (mem2 y t))))))

;; mem_range_substraction
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((p uni) (t uni) (x uni) (y uni))
  (= (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) (range_substraction b2 a2 p t))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) p) (not (mem b2 y t)))))))

(declare-fun image (ty ty uni uni) uni)

;; image_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 b2) (image b2 a2 x x1)))))

;; mem_image
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (w uni) (x (tuple21 (tuple21 b c) (tuple21 d e))))
  (and
  (=> (mem49 x
  (tb2t4102 (image (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) a2 p w)))
  (exists ((a3 uni))
  (and (sort a2 a3)
  (and (mem a2 a3 w) (mem (tuple2 a2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)))
  (Tuple2 a2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) a3 (t2tb4104 x)) p)))))
  (=>
  (exists ((a3 uni))
  (and (mem a2 a3 w) (mem (tuple2 a2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)))
  (Tuple2 a2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) a3 (t2tb4104 x)) p)))
  (mem49 x (tb2t4102 (image (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) a2 p w))))))))

;; mem_image
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (w uni) (x (tuple21 a (tuple21 d e))))
  (and
  (=> (mem48 x (tb2t4103 (image (tuple2 a1 (tuple2 d1 e1)) a2 p w)))
  (exists ((a3 uni))
  (and (sort a2 a3)
  (and (mem a2 a3 w) (mem (tuple2 a2 (tuple2 a1 (tuple2 d1 e1)))
  (Tuple2 a2 (tuple2 a1 (tuple2 d1 e1)) a3 (t2tb4105 x)) p)))))
  (=>
  (exists ((a3 uni))
  (and (mem a2 a3 w) (mem (tuple2 a2 (tuple2 a1 (tuple2 d1 e1)))
  (Tuple2 a2 (tuple2 a1 (tuple2 d1 e1)) a3 (t2tb4105 x)) p))) (mem48 x
  (tb2t4103 (image (tuple2 a1 (tuple2 d1 e1)) a2 p w))))))))

;; mem_image
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (w uni) (x (set (tuple21 c e))))
  (and
  (=> (mem47 x (tb2t3854 (image (set1 (tuple2 c1 e1)) a2 p w)))
  (exists ((a3 uni))
  (and (sort a2 a3)
  (and (mem a2 a3 w) (mem (tuple2 a2 (set1 (tuple2 c1 e1)))
  (Tuple2 a2 (set1 (tuple2 c1 e1)) a3 (t2tb3478 x)) p)))))
  (=>
  (exists ((a3 uni))
  (and (mem a2 a3 w) (mem (tuple2 a2 (set1 (tuple2 c1 e1)))
  (Tuple2 a2 (set1 (tuple2 c1 e1)) a3 (t2tb3478 x)) p))) (mem47 x
  (tb2t3854 (image (set1 (tuple2 c1 e1)) a2 p w))))))))

;; mem_image
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (w uni) (x (tuple21 c e)))
  (and
  (=> (mem46 x (tb2t3478 (image (tuple2 c1 e1) a2 p w)))
  (exists ((a3 uni))
  (and (sort a2 a3)
  (and (mem a2 a3 w) (mem (tuple2 a2 (tuple2 c1 e1))
  (Tuple2 a2 (tuple2 c1 e1) a3 (t2tb3479 x)) p)))))
  (=>
  (exists ((a3 uni))
  (and (mem a2 a3 w) (mem (tuple2 a2 (tuple2 c1 e1))
  (Tuple2 a2 (tuple2 c1 e1) a3 (t2tb3479 x)) p))) (mem46 x
  (tb2t3478 (image (tuple2 c1 e1) a2 p w))))))))

;; mem_image
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (w uni) (x (tuple21 a e)))
  (and
  (=> (mem44 x (tb2t2943 (image (tuple2 a1 e1) a2 p w)))
  (exists ((a3 uni))
  (and (sort a2 a3)
  (and (mem a2 a3 w) (mem (tuple2 a2 (tuple2 a1 e1))
  (Tuple2 a2 (tuple2 a1 e1) a3 (t2tb2949 x)) p)))))
  (=>
  (exists ((a3 uni))
  (and (mem a2 a3 w) (mem (tuple2 a2 (tuple2 a1 e1))
  (Tuple2 a2 (tuple2 a1 e1) a3 (t2tb2949 x)) p))) (mem44 x
  (tb2t2943 (image (tuple2 a1 e1) a2 p w))))))))

;; mem_image
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (w uni) (x e))
  (and
  (=> (mem36 x (tb2t2947 (image e1 a2 p w)))
  (exists ((a3 uni))
  (and (sort a2 a3)
  (and (mem a2 a3 w) (mem (tuple2 a2 e1) (Tuple2 a2 e1 a3 (t2tb2955 x)) p)))))
  (=>
  (exists ((a3 uni))
  (and (mem a2 a3 w) (mem (tuple2 a2 e1) (Tuple2 a2 e1 a3 (t2tb2955 x)) p)))
  (mem36 x (tb2t2947 (image e1 a2 p w))))))))

;; mem_image
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (w uni) (x (tuple21 a d)))
  (and
  (=> (mem32 x (tb2t903 (image (tuple2 a1 d1) a2 p w)))
  (exists ((a3 uni))
  (and (sort a2 a3)
  (and (mem a2 a3 w) (mem (tuple2 a2 (tuple2 a1 d1))
  (Tuple2 a2 (tuple2 a1 d1) a3 (t2tb904 x)) p)))))
  (=>
  (exists ((a3 uni))
  (and (mem a2 a3 w) (mem (tuple2 a2 (tuple2 a1 d1))
  (Tuple2 a2 (tuple2 a1 d1) a3 (t2tb904 x)) p))) (mem32 x
  (tb2t903 (image (tuple2 a1 d1) a2 p w))))))))

;; mem_image
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (w uni) (x (set (tuple21 b d))))
  (and
  (=> (mem33 x (tb2t906 (image (set1 (tuple2 b1 d1)) a2 p w)))
  (exists ((a3 uni))
  (and (sort a2 a3)
  (and (mem a2 a3 w) (mem (tuple2 a2 (set1 (tuple2 b1 d1)))
  (Tuple2 a2 (set1 (tuple2 b1 d1)) a3 (t2tb687 x)) p)))))
  (=>
  (exists ((a3 uni))
  (and (mem a2 a3 w) (mem (tuple2 a2 (set1 (tuple2 b1 d1)))
  (Tuple2 a2 (set1 (tuple2 b1 d1)) a3 (t2tb687 x)) p))) (mem33 x
  (tb2t906 (image (set1 (tuple2 b1 d1)) a2 p w))))))))

;; mem_image
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (w uni) (x (tuple21 b d)))
  (and
  (=> (mem23 x (tb2t687 (image (tuple2 b1 d1) a2 p w)))
  (exists ((a3 uni))
  (and (sort a2 a3)
  (and (mem a2 a3 w) (mem (tuple2 a2 (tuple2 b1 d1))
  (Tuple2 a2 (tuple2 b1 d1) a3 (t2tb692 x)) p)))))
  (=>
  (exists ((a3 uni))
  (and (mem a2 a3 w) (mem (tuple2 a2 (tuple2 b1 d1))
  (Tuple2 a2 (tuple2 b1 d1) a3 (t2tb692 x)) p))) (mem23 x
  (tb2t687 (image (tuple2 b1 d1) a2 p w))))))))

;; mem_image
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (w uni) (x d))
  (and
  (=> (mem20 x (tb2t690 (image d1 a2 p w)))
  (exists ((a3 uni))
  (and (sort a2 a3)
  (and (mem a2 a3 w) (mem (tuple2 a2 d1) (Tuple2 a2 d1 a3 (t2tb694 x)) p)))))
  (=>
  (exists ((a3 uni))
  (and (mem a2 a3 w) (mem (tuple2 a2 d1) (Tuple2 a2 d1 a3 (t2tb694 x)) p)))
  (mem20 x (tb2t690 (image d1 a2 p w))))))))

;; mem_image
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (w uni) (x (tuple21 a (tuple21 b c))))
  (and
  (=> (mem14 x (tb2t261 (image (tuple2 a1 (tuple2 b1 c1)) a2 p w)))
  (exists ((a3 uni))
  (and (sort a2 a3)
  (and (mem a2 a3 w) (mem (tuple2 a2 (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 a2 (tuple2 a1 (tuple2 b1 c1)) a3 (t2tb260 x)) p)))))
  (=>
  (exists ((a3 uni))
  (and (mem a2 a3 w) (mem (tuple2 a2 (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 a2 (tuple2 a1 (tuple2 b1 c1)) a3 (t2tb260 x)) p))) (mem14 x
  (tb2t261 (image (tuple2 a1 (tuple2 b1 c1)) a2 p w))))))))

;; mem_image
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (w uni) (x (set (tuple21 a c))))
  (and
  (=> (mem11 x (tb2t128 (image (set1 (tuple2 a1 c1)) a2 p w)))
  (exists ((a3 uni))
  (and (sort a2 a3)
  (and (mem a2 a3 w) (mem (tuple2 a2 (set1 (tuple2 a1 c1)))
  (Tuple2 a2 (set1 (tuple2 a1 c1)) a3 (t2tb129 x)) p)))))
  (=>
  (exists ((a3 uni))
  (and (mem a2 a3 w) (mem (tuple2 a2 (set1 (tuple2 a1 c1)))
  (Tuple2 a2 (set1 (tuple2 a1 c1)) a3 (t2tb129 x)) p))) (mem11 x
  (tb2t128 (image (set1 (tuple2 a1 c1)) a2 p w))))))))

;; mem_image
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (w uni) (x (tuple21 a c)))
  (and
  (=> (mem10 x (tb2t129 (image (tuple2 a1 c1) a2 p w)))
  (exists ((a3 uni))
  (and (sort a2 a3)
  (and (mem a2 a3 w) (mem (tuple2 a2 (tuple2 a1 c1))
  (Tuple2 a2 (tuple2 a1 c1) a3 (t2tb133 x)) p)))))
  (=>
  (exists ((a3 uni))
  (and (mem a2 a3 w) (mem (tuple2 a2 (tuple2 a1 c1))
  (Tuple2 a2 (tuple2 a1 c1) a3 (t2tb133 x)) p))) (mem10 x
  (tb2t129 (image (tuple2 a1 c1) a2 p w))))))))

;; mem_image
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (w uni) (x c))
  (and
  (=> (mem7 x (tb2t132 (image c1 a2 p w)))
  (exists ((a3 uni))
  (and (sort a2 a3)
  (and (mem a2 a3 w) (mem (tuple2 a2 c1) (Tuple2 a2 c1 a3 (t2tb135 x)) p)))))
  (=>
  (exists ((a3 uni))
  (and (mem a2 a3 w) (mem (tuple2 a2 c1) (Tuple2 a2 c1 a3 (t2tb135 x)) p)))
  (mem7 x (tb2t132 (image c1 a2 p w))))))))

;; mem_image
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (w uni) (x (set (tuple21 a b))))
  (and
  (=> (mem4 x (tb2t10 (image (set1 (tuple2 a1 b1)) a2 p w)))
  (exists ((a3 uni))
  (and (sort a2 a3)
  (and (mem a2 a3 w) (mem (tuple2 a2 (set1 (tuple2 a1 b1)))
  (Tuple2 a2 (set1 (tuple2 a1 b1)) a3 (t2tb11 x)) p)))))
  (=>
  (exists ((a3 uni))
  (and (mem a2 a3 w) (mem (tuple2 a2 (set1 (tuple2 a1 b1)))
  (Tuple2 a2 (set1 (tuple2 a1 b1)) a3 (t2tb11 x)) p))) (mem4 x
  (tb2t10 (image (set1 (tuple2 a1 b1)) a2 p w))))))))

;; mem_image
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (w uni) (x (tuple21 a b)))
  (and
  (=> (mem3 x (tb2t11 (image (tuple2 a1 b1) a2 p w)))
  (exists ((a3 uni))
  (and (sort a2 a3)
  (and (mem a2 a3 w) (mem (tuple2 a2 (tuple2 a1 b1))
  (Tuple2 a2 (tuple2 a1 b1) a3 (t2tb13 x)) p)))))
  (=>
  (exists ((a3 uni))
  (and (mem a2 a3 w) (mem (tuple2 a2 (tuple2 a1 b1))
  (Tuple2 a2 (tuple2 a1 b1) a3 (t2tb13 x)) p))) (mem3 x
  (tb2t11 (image (tuple2 a1 b1) a2 p w))))))))

;; mem_image
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (w uni) (x b))
  (and
  (=> (mem2 x (tb2t12 (image b1 a2 p w)))
  (exists ((a3 uni))
  (and (sort a2 a3)
  (and (mem a2 a3 w) (mem (tuple2 a2 b1) (Tuple2 a2 b1 a3 (t2tb14 x)) p)))))
  (=>
  (exists ((a3 uni))
  (and (mem a2 a3 w) (mem (tuple2 a2 b1) (Tuple2 a2 b1 a3 (t2tb14 x)) p)))
  (mem2 x (tb2t12 (image b1 a2 p w))))))))

;; mem_image
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (w uni) (x a))
  (and
  (=> (mem1 x (tb2t1 (image a1 a2 p w)))
  (exists ((a3 uni))
  (and (sort a2 a3)
  (and (mem a2 a3 w) (mem (tuple2 a2 a1) (Tuple2 a2 a1 a3 (t2tb2 x)) p)))))
  (=>
  (exists ((a3 uni))
  (and (mem a2 a3 w) (mem (tuple2 a2 a1) (Tuple2 a2 a1 a3 (t2tb2 x)) p)))
  (mem1 x (tb2t1 (image a1 a2 p w))))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 (tuple21 b c) (tuple21 d e))
  (tuple21 (tuple21 b c) (tuple21 d e))))) (w (set (tuple21 (tuple21 b c)
  (tuple21 d e)))) (x (tuple21 (tuple21 b c) (tuple21 d e))))
  (= (mem49 x
  (tb2t4102
  (image (tuple2 (tuple2 b1 c1) (tuple2 d1 e1))
  (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (t2tb4106 p) (t2tb4102 w))))
  (exists ((a2 (tuple21 (tuple21 b c) (tuple21 d e))))
  (and (mem49 a2 w) (mem
  (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1))
  (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)))
  (Tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1))
  (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (t2tb4104 a2) (t2tb4104 x))
  (t2tb4106 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 (tuple21 b c) (tuple21 d e)) (tuple21 a
  (tuple21 d e))))) (w (set (tuple21 (tuple21 b c) (tuple21 d e))))
  (x (tuple21 a (tuple21 d e))))
  (= (mem48 x
  (tb2t4103
  (image (tuple2 a1 (tuple2 d1 e1)) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1))
  (t2tb4108 p) (t2tb4102 w))))
  (exists ((a2 (tuple21 (tuple21 b c) (tuple21 d e))))
  (and (mem49 a2 w) (mem
  (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (tuple2 a1 (tuple2 d1 e1)))
  (Tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (tuple2 a1 (tuple2 d1 e1))
  (t2tb4104 a2) (t2tb4105 x)) (t2tb4108 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 (tuple21 b c) (tuple21 d e))
  (set (tuple21 c e))))) (w (set (tuple21 (tuple21 b c) (tuple21 d e))))
  (x (set (tuple21 c e))))
  (= (mem47 x
  (tb2t3854
  (image (set1 (tuple2 c1 e1)) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1))
  (t2tb4110 p) (t2tb4102 w))))
  (exists ((a2 (tuple21 (tuple21 b c) (tuple21 d e))))
  (and (mem49 a2 w) (mem
  (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (set1 (tuple2 c1 e1)))
  (Tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (set1 (tuple2 c1 e1))
  (t2tb4104 a2) (t2tb3478 x)) (t2tb4110 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 (tuple21 b c) (tuple21 d e)) (tuple21 c
  e)))) (w (set (tuple21 (tuple21 b c) (tuple21 d e)))) (x (tuple21 c e)))
  (= (mem46 x
  (tb2t3478
  (image (tuple2 c1 e1) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (t2tb4112 p)
  (t2tb4102 w))))
  (exists ((a2 (tuple21 (tuple21 b c) (tuple21 d e))))
  (and (mem49 a2 w) (mem
  (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (tuple2 c1 e1))
  (Tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (tuple2 c1 e1) (t2tb4104 a2)
  (t2tb3479 x)) (t2tb4112 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 (tuple21 b c) (tuple21 d e)) (tuple21 a
  e)))) (w (set (tuple21 (tuple21 b c) (tuple21 d e)))) (x (tuple21 a e)))
  (= (mem44 x
  (tb2t2943
  (image (tuple2 a1 e1) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (t2tb4114 p)
  (t2tb4102 w))))
  (exists ((a2 (tuple21 (tuple21 b c) (tuple21 d e))))
  (and (mem49 a2 w) (mem
  (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (tuple2 a1 e1))
  (Tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (tuple2 a1 e1) (t2tb4104 a2)
  (t2tb2949 x)) (t2tb4114 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 (tuple21 b c) (tuple21 d e)) e)))
  (w (set (tuple21 (tuple21 b c) (tuple21 d e)))) (x e))
  (= (mem36 x
  (tb2t2947
  (image e1 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (t2tb4116 p) (t2tb4102 w))))
  (exists ((a2 (tuple21 (tuple21 b c) (tuple21 d e))))
  (and (mem49 a2 w) (mem (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) e1)
  (Tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) e1 (t2tb4104 a2)
  (t2tb2955 x)) (t2tb4116 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 (tuple21 b c) (tuple21 d e)) (tuple21 a
  d)))) (w (set (tuple21 (tuple21 b c) (tuple21 d e)))) (x (tuple21 a d)))
  (= (mem32 x
  (tb2t903
  (image (tuple2 a1 d1) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (t2tb4118 p)
  (t2tb4102 w))))
  (exists ((a2 (tuple21 (tuple21 b c) (tuple21 d e))))
  (and (mem49 a2 w) (mem
  (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (tuple2 a1 d1))
  (Tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (tuple2 a1 d1) (t2tb4104 a2)
  (t2tb904 x)) (t2tb4118 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 (tuple21 b c) (tuple21 d e))
  (set (tuple21 b d))))) (w (set (tuple21 (tuple21 b c) (tuple21 d e))))
  (x (set (tuple21 b d))))
  (= (mem33 x
  (tb2t906
  (image (set1 (tuple2 b1 d1)) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1))
  (t2tb4120 p) (t2tb4102 w))))
  (exists ((a2 (tuple21 (tuple21 b c) (tuple21 d e))))
  (and (mem49 a2 w) (mem
  (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (set1 (tuple2 b1 d1)))
  (Tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (set1 (tuple2 b1 d1))
  (t2tb4104 a2) (t2tb687 x)) (t2tb4120 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 (tuple21 b c) (tuple21 d e)) (tuple21 b
  d)))) (w (set (tuple21 (tuple21 b c) (tuple21 d e)))) (x (tuple21 b d)))
  (= (mem23 x
  (tb2t687
  (image (tuple2 b1 d1) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (t2tb4122 p)
  (t2tb4102 w))))
  (exists ((a2 (tuple21 (tuple21 b c) (tuple21 d e))))
  (and (mem49 a2 w) (mem
  (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (tuple2 b1 d1))
  (Tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (tuple2 b1 d1) (t2tb4104 a2)
  (t2tb692 x)) (t2tb4122 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 (tuple21 b c) (tuple21 d e)) d)))
  (w (set (tuple21 (tuple21 b c) (tuple21 d e)))) (x d))
  (= (mem20 x
  (tb2t690
  (image d1 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (t2tb4124 p) (t2tb4102 w))))
  (exists ((a2 (tuple21 (tuple21 b c) (tuple21 d e))))
  (and (mem49 a2 w) (mem (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) d1)
  (Tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) d1 (t2tb4104 a2)
  (t2tb694 x)) (t2tb4124 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 (tuple21 b c) (tuple21 d e)) (tuple21 a
  (tuple21 b c))))) (w (set (tuple21 (tuple21 b c) (tuple21 d e))))
  (x (tuple21 a (tuple21 b c))))
  (= (mem14 x
  (tb2t261
  (image (tuple2 a1 (tuple2 b1 c1)) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1))
  (t2tb4126 p) (t2tb4102 w))))
  (exists ((a2 (tuple21 (tuple21 b c) (tuple21 d e))))
  (and (mem49 a2 w) (mem
  (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (tuple2 a1 (tuple2 b1 c1))
  (t2tb4104 a2) (t2tb260 x)) (t2tb4126 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 (tuple21 b c) (tuple21 d e))
  (set (tuple21 a c))))) (w (set (tuple21 (tuple21 b c) (tuple21 d e))))
  (x (set (tuple21 a c))))
  (= (mem11 x
  (tb2t128
  (image (set1 (tuple2 a1 c1)) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1))
  (t2tb4128 p) (t2tb4102 w))))
  (exists ((a2 (tuple21 (tuple21 b c) (tuple21 d e))))
  (and (mem49 a2 w) (mem
  (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (set1 (tuple2 a1 c1)))
  (Tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (set1 (tuple2 a1 c1))
  (t2tb4104 a2) (t2tb129 x)) (t2tb4128 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 (tuple21 b c) (tuple21 d e)) (tuple21 a
  c)))) (w (set (tuple21 (tuple21 b c) (tuple21 d e)))) (x (tuple21 a c)))
  (= (mem10 x
  (tb2t129
  (image (tuple2 a1 c1) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (t2tb4130 p)
  (t2tb4102 w))))
  (exists ((a2 (tuple21 (tuple21 b c) (tuple21 d e))))
  (and (mem49 a2 w) (mem
  (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (tuple2 a1 c1))
  (Tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (tuple2 a1 c1) (t2tb4104 a2)
  (t2tb133 x)) (t2tb4130 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 (tuple21 b c) (tuple21 d e)) c)))
  (w (set (tuple21 (tuple21 b c) (tuple21 d e)))) (x c))
  (= (mem7 x
  (tb2t132
  (image c1 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (t2tb4132 p) (t2tb4102 w))))
  (exists ((a2 (tuple21 (tuple21 b c) (tuple21 d e))))
  (and (mem49 a2 w) (mem (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) c1)
  (Tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) c1 (t2tb4104 a2)
  (t2tb135 x)) (t2tb4132 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 (tuple21 b c) (tuple21 d e))
  (set (tuple21 a b))))) (w (set (tuple21 (tuple21 b c) (tuple21 d e))))
  (x (set (tuple21 a b))))
  (= (mem4 x
  (tb2t10
  (image (set1 (tuple2 a1 b1)) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1))
  (t2tb4134 p) (t2tb4102 w))))
  (exists ((a2 (tuple21 (tuple21 b c) (tuple21 d e))))
  (and (mem49 a2 w) (mem
  (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (set1 (tuple2 a1 b1)))
  (Tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (set1 (tuple2 a1 b1))
  (t2tb4104 a2) (t2tb11 x)) (t2tb4134 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 (tuple21 b c) (tuple21 d e)) (tuple21 a
  b)))) (w (set (tuple21 (tuple21 b c) (tuple21 d e)))) (x (tuple21 a b)))
  (= (mem3 x
  (tb2t11
  (image (tuple2 a1 b1) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (t2tb4136 p)
  (t2tb4102 w))))
  (exists ((a2 (tuple21 (tuple21 b c) (tuple21 d e))))
  (and (mem49 a2 w) (mem
  (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (tuple2 a1 b1))
  (Tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (tuple2 a1 b1) (t2tb4104 a2)
  (t2tb13 x)) (t2tb4136 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 (tuple21 b c) (tuple21 d e)) b)))
  (w (set (tuple21 (tuple21 b c) (tuple21 d e)))) (x b))
  (= (mem2 x
  (tb2t12
  (image b1 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (t2tb4138 p) (t2tb4102 w))))
  (exists ((a2 (tuple21 (tuple21 b c) (tuple21 d e))))
  (and (mem49 a2 w) (mem (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) b1)
  (Tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) b1 (t2tb4104 a2) (t2tb14 x))
  (t2tb4138 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 (tuple21 b c) (tuple21 d e)) a)))
  (w (set (tuple21 (tuple21 b c) (tuple21 d e)))) (x a))
  (= (mem1 x
  (tb2t1
  (image a1 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (t2tb4140 p) (t2tb4102 w))))
  (exists ((a2 (tuple21 (tuple21 b c) (tuple21 d e))))
  (and (mem49 a2 w) (mem (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) a1)
  (Tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) a1 (t2tb4104 a2) (t2tb2 x))
  (t2tb4140 p)))))))

;; mem_image
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (w (set (tuple21 (tuple21 b c) (tuple21 d e)))) (x uni))
  (= (mem b2 x
  (image b2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) p (t2tb4102 w)))
  (exists ((a2 (tuple21 (tuple21 b c) (tuple21 d e))))
  (and (mem49 a2 w) (mem (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) b2)
  (Tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) b2 (t2tb4104 a2) x) p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a (tuple21 d e)) (tuple21 (tuple21 b c)
  (tuple21 d e))))) (w (set (tuple21 a (tuple21 d e))))
  (x (tuple21 (tuple21 b c) (tuple21 d e))))
  (= (mem49 x
  (tb2t4102
  (image (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (tuple2 a1 (tuple2 d1 e1))
  (t2tb4142 p) (t2tb4103 w))))
  (exists ((a2 (tuple21 a (tuple21 d e))))
  (and (mem48 a2 w) (mem
  (tuple2 (tuple2 a1 (tuple2 d1 e1)) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)))
  (Tuple2 (tuple2 a1 (tuple2 d1 e1)) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1))
  (t2tb4105 a2) (t2tb4104 x)) (t2tb4142 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a (tuple21 d e)) (tuple21 a (tuple21 d
  e))))) (w (set (tuple21 a (tuple21 d e)))) (x (tuple21 a (tuple21 d e))))
  (= (mem48 x
  (tb2t4103
  (image (tuple2 a1 (tuple2 d1 e1)) (tuple2 a1 (tuple2 d1 e1)) (t2tb4144 p)
  (t2tb4103 w))))
  (exists ((a2 (tuple21 a (tuple21 d e))))
  (and (mem48 a2 w) (mem
  (tuple2 (tuple2 a1 (tuple2 d1 e1)) (tuple2 a1 (tuple2 d1 e1)))
  (Tuple2 (tuple2 a1 (tuple2 d1 e1)) (tuple2 a1 (tuple2 d1 e1)) (t2tb4105 a2)
  (t2tb4105 x)) (t2tb4144 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a (tuple21 d e)) (set (tuple21 c e)))))
  (w (set (tuple21 a (tuple21 d e)))) (x (set (tuple21 c e))))
  (= (mem47 x
  (tb2t3854
  (image (set1 (tuple2 c1 e1)) (tuple2 a1 (tuple2 d1 e1)) (t2tb4146 p)
  (t2tb4103 w))))
  (exists ((a2 (tuple21 a (tuple21 d e))))
  (and (mem48 a2 w) (mem
  (tuple2 (tuple2 a1 (tuple2 d1 e1)) (set1 (tuple2 c1 e1)))
  (Tuple2 (tuple2 a1 (tuple2 d1 e1)) (set1 (tuple2 c1 e1)) (t2tb4105 a2)
  (t2tb3478 x)) (t2tb4146 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a (tuple21 d e)) (tuple21 c e))))
  (w (set (tuple21 a (tuple21 d e)))) (x (tuple21 c e)))
  (= (mem46 x
  (tb2t3478
  (image (tuple2 c1 e1) (tuple2 a1 (tuple2 d1 e1)) (t2tb4148 p) (t2tb4103 w))))
  (exists ((a2 (tuple21 a (tuple21 d e))))
  (and (mem48 a2 w) (mem (tuple2 (tuple2 a1 (tuple2 d1 e1)) (tuple2 c1 e1))
  (Tuple2 (tuple2 a1 (tuple2 d1 e1)) (tuple2 c1 e1) (t2tb4105 a2)
  (t2tb3479 x)) (t2tb4148 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a (tuple21 d e)) (tuple21 a e))))
  (w (set (tuple21 a (tuple21 d e)))) (x (tuple21 a e)))
  (= (mem44 x
  (tb2t2943
  (image (tuple2 a1 e1) (tuple2 a1 (tuple2 d1 e1)) (t2tb4150 p) (t2tb4103 w))))
  (exists ((a2 (tuple21 a (tuple21 d e))))
  (and (mem48 a2 w) (mem (tuple2 (tuple2 a1 (tuple2 d1 e1)) (tuple2 a1 e1))
  (Tuple2 (tuple2 a1 (tuple2 d1 e1)) (tuple2 a1 e1) (t2tb4105 a2)
  (t2tb2949 x)) (t2tb4150 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a (tuple21 d e)) e))) (w (set (tuple21 a
  (tuple21 d e)))) (x e))
  (= (mem36 x
  (tb2t2947 (image e1 (tuple2 a1 (tuple2 d1 e1)) (t2tb4152 p) (t2tb4103 w))))
  (exists ((a2 (tuple21 a (tuple21 d e))))
  (and (mem48 a2 w) (mem (tuple2 (tuple2 a1 (tuple2 d1 e1)) e1)
  (Tuple2 (tuple2 a1 (tuple2 d1 e1)) e1 (t2tb4105 a2) (t2tb2955 x))
  (t2tb4152 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a (tuple21 d e)) (tuple21 a d))))
  (w (set (tuple21 a (tuple21 d e)))) (x (tuple21 a d)))
  (= (mem32 x
  (tb2t903
  (image (tuple2 a1 d1) (tuple2 a1 (tuple2 d1 e1)) (t2tb4154 p) (t2tb4103 w))))
  (exists ((a2 (tuple21 a (tuple21 d e))))
  (and (mem48 a2 w) (mem (tuple2 (tuple2 a1 (tuple2 d1 e1)) (tuple2 a1 d1))
  (Tuple2 (tuple2 a1 (tuple2 d1 e1)) (tuple2 a1 d1) (t2tb4105 a2)
  (t2tb904 x)) (t2tb4154 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a (tuple21 d e)) (set (tuple21 b d)))))
  (w (set (tuple21 a (tuple21 d e)))) (x (set (tuple21 b d))))
  (= (mem33 x
  (tb2t906
  (image (set1 (tuple2 b1 d1)) (tuple2 a1 (tuple2 d1 e1)) (t2tb4156 p)
  (t2tb4103 w))))
  (exists ((a2 (tuple21 a (tuple21 d e))))
  (and (mem48 a2 w) (mem
  (tuple2 (tuple2 a1 (tuple2 d1 e1)) (set1 (tuple2 b1 d1)))
  (Tuple2 (tuple2 a1 (tuple2 d1 e1)) (set1 (tuple2 b1 d1)) (t2tb4105 a2)
  (t2tb687 x)) (t2tb4156 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a (tuple21 d e)) (tuple21 b d))))
  (w (set (tuple21 a (tuple21 d e)))) (x (tuple21 b d)))
  (= (mem23 x
  (tb2t687
  (image (tuple2 b1 d1) (tuple2 a1 (tuple2 d1 e1)) (t2tb4158 p) (t2tb4103 w))))
  (exists ((a2 (tuple21 a (tuple21 d e))))
  (and (mem48 a2 w) (mem (tuple2 (tuple2 a1 (tuple2 d1 e1)) (tuple2 b1 d1))
  (Tuple2 (tuple2 a1 (tuple2 d1 e1)) (tuple2 b1 d1) (t2tb4105 a2)
  (t2tb692 x)) (t2tb4158 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a (tuple21 d e)) d))) (w (set (tuple21 a
  (tuple21 d e)))) (x d))
  (= (mem20 x
  (tb2t690 (image d1 (tuple2 a1 (tuple2 d1 e1)) (t2tb4160 p) (t2tb4103 w))))
  (exists ((a2 (tuple21 a (tuple21 d e))))
  (and (mem48 a2 w) (mem (tuple2 (tuple2 a1 (tuple2 d1 e1)) d1)
  (Tuple2 (tuple2 a1 (tuple2 d1 e1)) d1 (t2tb4105 a2) (t2tb694 x))
  (t2tb4160 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a (tuple21 d e)) (tuple21 a (tuple21 b
  c))))) (w (set (tuple21 a (tuple21 d e)))) (x (tuple21 a (tuple21 b c))))
  (= (mem14 x
  (tb2t261
  (image (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 (tuple2 d1 e1)) (t2tb4162 p)
  (t2tb4103 w))))
  (exists ((a2 (tuple21 a (tuple21 d e))))
  (and (mem48 a2 w) (mem
  (tuple2 (tuple2 a1 (tuple2 d1 e1)) (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 (tuple2 a1 (tuple2 d1 e1)) (tuple2 a1 (tuple2 b1 c1)) (t2tb4105 a2)
  (t2tb260 x)) (t2tb4162 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a (tuple21 d e)) (set (tuple21 a c)))))
  (w (set (tuple21 a (tuple21 d e)))) (x (set (tuple21 a c))))
  (= (mem11 x
  (tb2t128
  (image (set1 (tuple2 a1 c1)) (tuple2 a1 (tuple2 d1 e1)) (t2tb4164 p)
  (t2tb4103 w))))
  (exists ((a2 (tuple21 a (tuple21 d e))))
  (and (mem48 a2 w) (mem
  (tuple2 (tuple2 a1 (tuple2 d1 e1)) (set1 (tuple2 a1 c1)))
  (Tuple2 (tuple2 a1 (tuple2 d1 e1)) (set1 (tuple2 a1 c1)) (t2tb4105 a2)
  (t2tb129 x)) (t2tb4164 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a (tuple21 d e)) (tuple21 a c))))
  (w (set (tuple21 a (tuple21 d e)))) (x (tuple21 a c)))
  (= (mem10 x
  (tb2t129
  (image (tuple2 a1 c1) (tuple2 a1 (tuple2 d1 e1)) (t2tb4166 p) (t2tb4103 w))))
  (exists ((a2 (tuple21 a (tuple21 d e))))
  (and (mem48 a2 w) (mem (tuple2 (tuple2 a1 (tuple2 d1 e1)) (tuple2 a1 c1))
  (Tuple2 (tuple2 a1 (tuple2 d1 e1)) (tuple2 a1 c1) (t2tb4105 a2)
  (t2tb133 x)) (t2tb4166 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a (tuple21 d e)) c))) (w (set (tuple21 a
  (tuple21 d e)))) (x c))
  (= (mem7 x
  (tb2t132 (image c1 (tuple2 a1 (tuple2 d1 e1)) (t2tb4168 p) (t2tb4103 w))))
  (exists ((a2 (tuple21 a (tuple21 d e))))
  (and (mem48 a2 w) (mem (tuple2 (tuple2 a1 (tuple2 d1 e1)) c1)
  (Tuple2 (tuple2 a1 (tuple2 d1 e1)) c1 (t2tb4105 a2) (t2tb135 x))
  (t2tb4168 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a (tuple21 d e)) (set (tuple21 a b)))))
  (w (set (tuple21 a (tuple21 d e)))) (x (set (tuple21 a b))))
  (= (mem4 x
  (tb2t10
  (image (set1 (tuple2 a1 b1)) (tuple2 a1 (tuple2 d1 e1)) (t2tb4170 p)
  (t2tb4103 w))))
  (exists ((a2 (tuple21 a (tuple21 d e))))
  (and (mem48 a2 w) (mem
  (tuple2 (tuple2 a1 (tuple2 d1 e1)) (set1 (tuple2 a1 b1)))
  (Tuple2 (tuple2 a1 (tuple2 d1 e1)) (set1 (tuple2 a1 b1)) (t2tb4105 a2)
  (t2tb11 x)) (t2tb4170 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a (tuple21 d e)) (tuple21 a b))))
  (w (set (tuple21 a (tuple21 d e)))) (x (tuple21 a b)))
  (= (mem3 x
  (tb2t11
  (image (tuple2 a1 b1) (tuple2 a1 (tuple2 d1 e1)) (t2tb4172 p) (t2tb4103 w))))
  (exists ((a2 (tuple21 a (tuple21 d e))))
  (and (mem48 a2 w) (mem (tuple2 (tuple2 a1 (tuple2 d1 e1)) (tuple2 a1 b1))
  (Tuple2 (tuple2 a1 (tuple2 d1 e1)) (tuple2 a1 b1) (t2tb4105 a2) (t2tb13 x))
  (t2tb4172 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a (tuple21 d e)) b))) (w (set (tuple21 a
  (tuple21 d e)))) (x b))
  (= (mem2 x
  (tb2t12 (image b1 (tuple2 a1 (tuple2 d1 e1)) (t2tb4174 p) (t2tb4103 w))))
  (exists ((a2 (tuple21 a (tuple21 d e))))
  (and (mem48 a2 w) (mem (tuple2 (tuple2 a1 (tuple2 d1 e1)) b1)
  (Tuple2 (tuple2 a1 (tuple2 d1 e1)) b1 (t2tb4105 a2) (t2tb14 x))
  (t2tb4174 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a (tuple21 d e)) a))) (w (set (tuple21 a
  (tuple21 d e)))) (x a))
  (= (mem1 x
  (tb2t1 (image a1 (tuple2 a1 (tuple2 d1 e1)) (t2tb4176 p) (t2tb4103 w))))
  (exists ((a2 (tuple21 a (tuple21 d e))))
  (and (mem48 a2 w) (mem (tuple2 (tuple2 a1 (tuple2 d1 e1)) a1)
  (Tuple2 (tuple2 a1 (tuple2 d1 e1)) a1 (t2tb4105 a2) (t2tb2 x))
  (t2tb4176 p)))))))

;; mem_image
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (w (set (tuple21 a (tuple21 d e)))) (x uni))
  (= (mem b2 x (image b2 (tuple2 a1 (tuple2 d1 e1)) p (t2tb4103 w)))
  (exists ((a2 (tuple21 a (tuple21 d e))))
  (and (mem48 a2 w) (mem (tuple2 (tuple2 a1 (tuple2 d1 e1)) b2)
  (Tuple2 (tuple2 a1 (tuple2 d1 e1)) b2 (t2tb4105 a2) x) p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 c e)) (tuple21 (tuple21 b c)
  (tuple21 d e))))) (w (set (set (tuple21 c e)))) (x (tuple21 (tuple21 b c)
  (tuple21 d e))))
  (= (mem49 x
  (tb2t4102
  (image (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (set1 (tuple2 c1 e1))
  (t2tb4178 p) (t2tb3854 w))))
  (exists ((a2 (set (tuple21 c e))))
  (and (mem47 a2 w) (mem
  (tuple2 (set1 (tuple2 c1 e1)) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)))
  (Tuple2 (set1 (tuple2 c1 e1)) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1))
  (t2tb3478 a2) (t2tb4104 x)) (t2tb4178 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 c e)) (tuple21 a (tuple21 d e)))))
  (w (set (set (tuple21 c e)))) (x (tuple21 a (tuple21 d e))))
  (= (mem48 x
  (tb2t4103
  (image (tuple2 a1 (tuple2 d1 e1)) (set1 (tuple2 c1 e1)) (t2tb4180 p)
  (t2tb3854 w))))
  (exists ((a2 (set (tuple21 c e))))
  (and (mem47 a2 w) (mem
  (tuple2 (set1 (tuple2 c1 e1)) (tuple2 a1 (tuple2 d1 e1)))
  (Tuple2 (set1 (tuple2 c1 e1)) (tuple2 a1 (tuple2 d1 e1)) (t2tb3478 a2)
  (t2tb4105 x)) (t2tb4180 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 c e)) (set (tuple21 c e)))))
  (w (set (set (tuple21 c e)))) (x (set (tuple21 c e))))
  (= (mem47 x
  (tb2t3854
  (image (set1 (tuple2 c1 e1)) (set1 (tuple2 c1 e1)) (t2tb4182 p)
  (t2tb3854 w))))
  (exists ((a2 (set (tuple21 c e))))
  (and (mem47 a2 w) (mem (tuple2 (set1 (tuple2 c1 e1)) (set1 (tuple2 c1 e1)))
  (Tuple2 (set1 (tuple2 c1 e1)) (set1 (tuple2 c1 e1)) (t2tb3478 a2)
  (t2tb3478 x)) (t2tb4182 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 c e)) (tuple21 c e))))
  (w (set (set (tuple21 c e)))) (x (tuple21 c e)))
  (= (mem46 x
  (tb2t3478
  (image (tuple2 c1 e1) (set1 (tuple2 c1 e1)) (t2tb4184 p) (t2tb3854 w))))
  (exists ((a2 (set (tuple21 c e))))
  (and (mem47 a2 w) (mem (tuple2 (set1 (tuple2 c1 e1)) (tuple2 c1 e1))
  (Tuple2 (set1 (tuple2 c1 e1)) (tuple2 c1 e1) (t2tb3478 a2) (t2tb3479 x))
  (t2tb4184 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 c e)) (tuple21 a e))))
  (w (set (set (tuple21 c e)))) (x (tuple21 a e)))
  (= (mem44 x
  (tb2t2943
  (image (tuple2 a1 e1) (set1 (tuple2 c1 e1)) (t2tb4186 p) (t2tb3854 w))))
  (exists ((a2 (set (tuple21 c e))))
  (and (mem47 a2 w) (mem (tuple2 (set1 (tuple2 c1 e1)) (tuple2 a1 e1))
  (Tuple2 (set1 (tuple2 c1 e1)) (tuple2 a1 e1) (t2tb3478 a2) (t2tb2949 x))
  (t2tb4186 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 c e)) e))) (w (set (set (tuple21 c
  e)))) (x e))
  (= (mem36 x
  (tb2t2947 (image e1 (set1 (tuple2 c1 e1)) (t2tb4188 p) (t2tb3854 w))))
  (exists ((a2 (set (tuple21 c e))))
  (and (mem47 a2 w) (mem (tuple2 (set1 (tuple2 c1 e1)) e1)
  (Tuple2 (set1 (tuple2 c1 e1)) e1 (t2tb3478 a2) (t2tb2955 x)) (t2tb4188 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 c e)) (tuple21 a d))))
  (w (set (set (tuple21 c e)))) (x (tuple21 a d)))
  (= (mem32 x
  (tb2t903
  (image (tuple2 a1 d1) (set1 (tuple2 c1 e1)) (t2tb4190 p) (t2tb3854 w))))
  (exists ((a2 (set (tuple21 c e))))
  (and (mem47 a2 w) (mem (tuple2 (set1 (tuple2 c1 e1)) (tuple2 a1 d1))
  (Tuple2 (set1 (tuple2 c1 e1)) (tuple2 a1 d1) (t2tb3478 a2) (t2tb904 x))
  (t2tb4190 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 c e)) (set (tuple21 b d)))))
  (w (set (set (tuple21 c e)))) (x (set (tuple21 b d))))
  (= (mem33 x
  (tb2t906
  (image (set1 (tuple2 b1 d1)) (set1 (tuple2 c1 e1)) (t2tb4192 p)
  (t2tb3854 w))))
  (exists ((a2 (set (tuple21 c e))))
  (and (mem47 a2 w) (mem (tuple2 (set1 (tuple2 c1 e1)) (set1 (tuple2 b1 d1)))
  (Tuple2 (set1 (tuple2 c1 e1)) (set1 (tuple2 b1 d1)) (t2tb3478 a2)
  (t2tb687 x)) (t2tb4192 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 c e)) (tuple21 b d))))
  (w (set (set (tuple21 c e)))) (x (tuple21 b d)))
  (= (mem23 x
  (tb2t687
  (image (tuple2 b1 d1) (set1 (tuple2 c1 e1)) (t2tb4194 p) (t2tb3854 w))))
  (exists ((a2 (set (tuple21 c e))))
  (and (mem47 a2 w) (mem (tuple2 (set1 (tuple2 c1 e1)) (tuple2 b1 d1))
  (Tuple2 (set1 (tuple2 c1 e1)) (tuple2 b1 d1) (t2tb3478 a2) (t2tb692 x))
  (t2tb4194 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 c e)) d))) (w (set (set (tuple21 c
  e)))) (x d))
  (= (mem20 x
  (tb2t690 (image d1 (set1 (tuple2 c1 e1)) (t2tb4196 p) (t2tb3854 w))))
  (exists ((a2 (set (tuple21 c e))))
  (and (mem47 a2 w) (mem (tuple2 (set1 (tuple2 c1 e1)) d1)
  (Tuple2 (set1 (tuple2 c1 e1)) d1 (t2tb3478 a2) (t2tb694 x)) (t2tb4196 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 c e)) (tuple21 a (tuple21 b c)))))
  (w (set (set (tuple21 c e)))) (x (tuple21 a (tuple21 b c))))
  (= (mem14 x
  (tb2t261
  (image (tuple2 a1 (tuple2 b1 c1)) (set1 (tuple2 c1 e1)) (t2tb4198 p)
  (t2tb3854 w))))
  (exists ((a2 (set (tuple21 c e))))
  (and (mem47 a2 w) (mem
  (tuple2 (set1 (tuple2 c1 e1)) (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 (set1 (tuple2 c1 e1)) (tuple2 a1 (tuple2 b1 c1)) (t2tb3478 a2)
  (t2tb260 x)) (t2tb4198 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 c e)) (set (tuple21 a c)))))
  (w (set (set (tuple21 c e)))) (x (set (tuple21 a c))))
  (= (mem11 x
  (tb2t128
  (image (set1 (tuple2 a1 c1)) (set1 (tuple2 c1 e1)) (t2tb4200 p)
  (t2tb3854 w))))
  (exists ((a2 (set (tuple21 c e))))
  (and (mem47 a2 w) (mem (tuple2 (set1 (tuple2 c1 e1)) (set1 (tuple2 a1 c1)))
  (Tuple2 (set1 (tuple2 c1 e1)) (set1 (tuple2 a1 c1)) (t2tb3478 a2)
  (t2tb129 x)) (t2tb4200 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 c e)) (tuple21 a c))))
  (w (set (set (tuple21 c e)))) (x (tuple21 a c)))
  (= (mem10 x
  (tb2t129
  (image (tuple2 a1 c1) (set1 (tuple2 c1 e1)) (t2tb4202 p) (t2tb3854 w))))
  (exists ((a2 (set (tuple21 c e))))
  (and (mem47 a2 w) (mem (tuple2 (set1 (tuple2 c1 e1)) (tuple2 a1 c1))
  (Tuple2 (set1 (tuple2 c1 e1)) (tuple2 a1 c1) (t2tb3478 a2) (t2tb133 x))
  (t2tb4202 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 c e)) c))) (w (set (set (tuple21 c
  e)))) (x c))
  (= (mem7 x
  (tb2t132 (image c1 (set1 (tuple2 c1 e1)) (t2tb4204 p) (t2tb3854 w))))
  (exists ((a2 (set (tuple21 c e))))
  (and (mem47 a2 w) (mem (tuple2 (set1 (tuple2 c1 e1)) c1)
  (Tuple2 (set1 (tuple2 c1 e1)) c1 (t2tb3478 a2) (t2tb135 x)) (t2tb4204 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 c e)) (set (tuple21 a b)))))
  (w (set (set (tuple21 c e)))) (x (set (tuple21 a b))))
  (= (mem4 x
  (tb2t10
  (image (set1 (tuple2 a1 b1)) (set1 (tuple2 c1 e1)) (t2tb4206 p)
  (t2tb3854 w))))
  (exists ((a2 (set (tuple21 c e))))
  (and (mem47 a2 w) (mem (tuple2 (set1 (tuple2 c1 e1)) (set1 (tuple2 a1 b1)))
  (Tuple2 (set1 (tuple2 c1 e1)) (set1 (tuple2 a1 b1)) (t2tb3478 a2)
  (t2tb11 x)) (t2tb4206 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 c e)) (tuple21 a b))))
  (w (set (set (tuple21 c e)))) (x (tuple21 a b)))
  (= (mem3 x
  (tb2t11
  (image (tuple2 a1 b1) (set1 (tuple2 c1 e1)) (t2tb4208 p) (t2tb3854 w))))
  (exists ((a2 (set (tuple21 c e))))
  (and (mem47 a2 w) (mem (tuple2 (set1 (tuple2 c1 e1)) (tuple2 a1 b1))
  (Tuple2 (set1 (tuple2 c1 e1)) (tuple2 a1 b1) (t2tb3478 a2) (t2tb13 x))
  (t2tb4208 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 c e)) b))) (w (set (set (tuple21 c
  e)))) (x b))
  (= (mem2 x
  (tb2t12 (image b1 (set1 (tuple2 c1 e1)) (t2tb4210 p) (t2tb3854 w))))
  (exists ((a2 (set (tuple21 c e))))
  (and (mem47 a2 w) (mem (tuple2 (set1 (tuple2 c1 e1)) b1)
  (Tuple2 (set1 (tuple2 c1 e1)) b1 (t2tb3478 a2) (t2tb14 x)) (t2tb4210 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 c e)) a))) (w (set (set (tuple21 c
  e)))) (x a))
  (= (mem1 x
  (tb2t1 (image a1 (set1 (tuple2 c1 e1)) (t2tb4212 p) (t2tb3854 w))))
  (exists ((a2 (set (tuple21 c e))))
  (and (mem47 a2 w) (mem (tuple2 (set1 (tuple2 c1 e1)) a1)
  (Tuple2 (set1 (tuple2 c1 e1)) a1 (t2tb3478 a2) (t2tb2 x)) (t2tb4212 p)))))))

;; mem_image
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (w (set (set (tuple21 c e)))) (x uni))
  (= (mem b2 x (image b2 (set1 (tuple2 c1 e1)) p (t2tb3854 w)))
  (exists ((a2 (set (tuple21 c e))))
  (and (mem47 a2 w) (mem (tuple2 (set1 (tuple2 c1 e1)) b2)
  (Tuple2 (set1 (tuple2 c1 e1)) b2 (t2tb3478 a2) x) p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 c e) (tuple21 (tuple21 b c) (tuple21 d
  e))))) (w (set (tuple21 c e))) (x (tuple21 (tuple21 b c) (tuple21 d e))))
  (= (mem49 x
  (tb2t4102
  (image (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (tuple2 c1 e1) (t2tb4214 p)
  (t2tb3478 w))))
  (exists ((a2 (tuple21 c e)))
  (and (mem46 a2 w) (mem
  (tuple2 (tuple2 c1 e1) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)))
  (Tuple2 (tuple2 c1 e1) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (t2tb3479 a2)
  (t2tb4104 x)) (t2tb4214 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 c e) (tuple21 a (tuple21 d e)))))
  (w (set (tuple21 c e))) (x (tuple21 a (tuple21 d e))))
  (= (mem48 x
  (tb2t4103
  (image (tuple2 a1 (tuple2 d1 e1)) (tuple2 c1 e1) (t2tb4216 p) (t2tb3478 w))))
  (exists ((a2 (tuple21 c e)))
  (and (mem46 a2 w) (mem (tuple2 (tuple2 c1 e1) (tuple2 a1 (tuple2 d1 e1)))
  (Tuple2 (tuple2 c1 e1) (tuple2 a1 (tuple2 d1 e1)) (t2tb3479 a2)
  (t2tb4105 x)) (t2tb4216 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 c e) (set (tuple21 c e)))))
  (w (set (tuple21 c e))) (x (set (tuple21 c e))))
  (= (mem47 x
  (tb2t3854
  (image (set1 (tuple2 c1 e1)) (tuple2 c1 e1) (t2tb4218 p) (t2tb3478 w))))
  (exists ((a2 (tuple21 c e)))
  (and (mem46 a2 w) (mem (tuple2 (tuple2 c1 e1) (set1 (tuple2 c1 e1)))
  (Tuple2 (tuple2 c1 e1) (set1 (tuple2 c1 e1)) (t2tb3479 a2) (t2tb3478 x))
  (t2tb4218 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 c e) (tuple21 c e)))) (w (set (tuple21 c
  e))) (x (tuple21 c e)))
  (= (mem46 x
  (tb2t3478 (image (tuple2 c1 e1) (tuple2 c1 e1) (t2tb4220 p) (t2tb3478 w))))
  (exists ((a2 (tuple21 c e)))
  (and (mem46 a2 w) (mem (tuple2 (tuple2 c1 e1) (tuple2 c1 e1))
  (Tuple2 (tuple2 c1 e1) (tuple2 c1 e1) (t2tb3479 a2) (t2tb3479 x))
  (t2tb4220 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 c e) (tuple21 a e)))) (w (set (tuple21 c
  e))) (x (tuple21 a e)))
  (= (mem44 x
  (tb2t2943 (image (tuple2 a1 e1) (tuple2 c1 e1) (t2tb4222 p) (t2tb3478 w))))
  (exists ((a2 (tuple21 c e)))
  (and (mem46 a2 w) (mem (tuple2 (tuple2 c1 e1) (tuple2 a1 e1))
  (Tuple2 (tuple2 c1 e1) (tuple2 a1 e1) (t2tb3479 a2) (t2tb2949 x))
  (t2tb4222 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 c e) e))) (w (set (tuple21 c e))) (x e))
  (= (mem36 x (tb2t2947 (image e1 (tuple2 c1 e1) (t2tb4224 p) (t2tb3478 w))))
  (exists ((a2 (tuple21 c e)))
  (and (mem46 a2 w) (mem (tuple2 (tuple2 c1 e1) e1)
  (Tuple2 (tuple2 c1 e1) e1 (t2tb3479 a2) (t2tb2955 x)) (t2tb4224 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 c e) (tuple21 a d)))) (w (set (tuple21 c
  e))) (x (tuple21 a d)))
  (= (mem32 x
  (tb2t903 (image (tuple2 a1 d1) (tuple2 c1 e1) (t2tb4226 p) (t2tb3478 w))))
  (exists ((a2 (tuple21 c e)))
  (and (mem46 a2 w) (mem (tuple2 (tuple2 c1 e1) (tuple2 a1 d1))
  (Tuple2 (tuple2 c1 e1) (tuple2 a1 d1) (t2tb3479 a2) (t2tb904 x))
  (t2tb4226 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 c e) (set (tuple21 b d)))))
  (w (set (tuple21 c e))) (x (set (tuple21 b d))))
  (= (mem33 x
  (tb2t906
  (image (set1 (tuple2 b1 d1)) (tuple2 c1 e1) (t2tb4228 p) (t2tb3478 w))))
  (exists ((a2 (tuple21 c e)))
  (and (mem46 a2 w) (mem (tuple2 (tuple2 c1 e1) (set1 (tuple2 b1 d1)))
  (Tuple2 (tuple2 c1 e1) (set1 (tuple2 b1 d1)) (t2tb3479 a2) (t2tb687 x))
  (t2tb4228 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 c e) (tuple21 b d)))) (w (set (tuple21 c
  e))) (x (tuple21 b d)))
  (= (mem23 x
  (tb2t687 (image (tuple2 b1 d1) (tuple2 c1 e1) (t2tb4230 p) (t2tb3478 w))))
  (exists ((a2 (tuple21 c e)))
  (and (mem46 a2 w) (mem (tuple2 (tuple2 c1 e1) (tuple2 b1 d1))
  (Tuple2 (tuple2 c1 e1) (tuple2 b1 d1) (t2tb3479 a2) (t2tb692 x))
  (t2tb4230 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 c e) d))) (w (set (tuple21 c e))) (x d))
  (= (mem20 x (tb2t690 (image d1 (tuple2 c1 e1) (t2tb4232 p) (t2tb3478 w))))
  (exists ((a2 (tuple21 c e)))
  (and (mem46 a2 w) (mem (tuple2 (tuple2 c1 e1) d1)
  (Tuple2 (tuple2 c1 e1) d1 (t2tb3479 a2) (t2tb694 x)) (t2tb4232 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 c e) (tuple21 a (tuple21 b c)))))
  (w (set (tuple21 c e))) (x (tuple21 a (tuple21 b c))))
  (= (mem14 x
  (tb2t261
  (image (tuple2 a1 (tuple2 b1 c1)) (tuple2 c1 e1) (t2tb4234 p) (t2tb3478 w))))
  (exists ((a2 (tuple21 c e)))
  (and (mem46 a2 w) (mem (tuple2 (tuple2 c1 e1) (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 (tuple2 c1 e1) (tuple2 a1 (tuple2 b1 c1)) (t2tb3479 a2)
  (t2tb260 x)) (t2tb4234 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 c e) (set (tuple21 a c)))))
  (w (set (tuple21 c e))) (x (set (tuple21 a c))))
  (= (mem11 x
  (tb2t128
  (image (set1 (tuple2 a1 c1)) (tuple2 c1 e1) (t2tb4236 p) (t2tb3478 w))))
  (exists ((a2 (tuple21 c e)))
  (and (mem46 a2 w) (mem (tuple2 (tuple2 c1 e1) (set1 (tuple2 a1 c1)))
  (Tuple2 (tuple2 c1 e1) (set1 (tuple2 a1 c1)) (t2tb3479 a2) (t2tb129 x))
  (t2tb4236 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 c e) (tuple21 a c)))) (w (set (tuple21 c
  e))) (x (tuple21 a c)))
  (= (mem10 x
  (tb2t129 (image (tuple2 a1 c1) (tuple2 c1 e1) (t2tb4238 p) (t2tb3478 w))))
  (exists ((a2 (tuple21 c e)))
  (and (mem46 a2 w) (mem (tuple2 (tuple2 c1 e1) (tuple2 a1 c1))
  (Tuple2 (tuple2 c1 e1) (tuple2 a1 c1) (t2tb3479 a2) (t2tb133 x))
  (t2tb4238 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 c e) c))) (w (set (tuple21 c e))) (x c))
  (= (mem7 x (tb2t132 (image c1 (tuple2 c1 e1) (t2tb4240 p) (t2tb3478 w))))
  (exists ((a2 (tuple21 c e)))
  (and (mem46 a2 w) (mem (tuple2 (tuple2 c1 e1) c1)
  (Tuple2 (tuple2 c1 e1) c1 (t2tb3479 a2) (t2tb135 x)) (t2tb4240 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 c e) (set (tuple21 a b)))))
  (w (set (tuple21 c e))) (x (set (tuple21 a b))))
  (= (mem4 x
  (tb2t10
  (image (set1 (tuple2 a1 b1)) (tuple2 c1 e1) (t2tb4242 p) (t2tb3478 w))))
  (exists ((a2 (tuple21 c e)))
  (and (mem46 a2 w) (mem (tuple2 (tuple2 c1 e1) (set1 (tuple2 a1 b1)))
  (Tuple2 (tuple2 c1 e1) (set1 (tuple2 a1 b1)) (t2tb3479 a2) (t2tb11 x))
  (t2tb4242 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 c e) (tuple21 a b)))) (w (set (tuple21 c
  e))) (x (tuple21 a b)))
  (= (mem3 x
  (tb2t11 (image (tuple2 a1 b1) (tuple2 c1 e1) (t2tb4244 p) (t2tb3478 w))))
  (exists ((a2 (tuple21 c e)))
  (and (mem46 a2 w) (mem (tuple2 (tuple2 c1 e1) (tuple2 a1 b1))
  (Tuple2 (tuple2 c1 e1) (tuple2 a1 b1) (t2tb3479 a2) (t2tb13 x))
  (t2tb4244 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 c e) b))) (w (set (tuple21 c e))) (x b))
  (= (mem2 x (tb2t12 (image b1 (tuple2 c1 e1) (t2tb4246 p) (t2tb3478 w))))
  (exists ((a2 (tuple21 c e)))
  (and (mem46 a2 w) (mem (tuple2 (tuple2 c1 e1) b1)
  (Tuple2 (tuple2 c1 e1) b1 (t2tb3479 a2) (t2tb14 x)) (t2tb4246 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 c e) a))) (w (set (tuple21 c e))) (x a))
  (= (mem1 x (tb2t1 (image a1 (tuple2 c1 e1) (t2tb4248 p) (t2tb3478 w))))
  (exists ((a2 (tuple21 c e)))
  (and (mem46 a2 w) (mem (tuple2 (tuple2 c1 e1) a1)
  (Tuple2 (tuple2 c1 e1) a1 (t2tb3479 a2) (t2tb2 x)) (t2tb4248 p)))))))

;; mem_image
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (w (set (tuple21 c e))) (x uni))
  (= (mem b2 x (image b2 (tuple2 c1 e1) p (t2tb3478 w)))
  (exists ((a2 (tuple21 c e)))
  (and (mem46 a2 w) (mem (tuple2 (tuple2 c1 e1) b2)
  (Tuple2 (tuple2 c1 e1) b2 (t2tb3479 a2) x) p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a e) (tuple21 (tuple21 b c) (tuple21 d
  e))))) (w (set (tuple21 a e))) (x (tuple21 (tuple21 b c) (tuple21 d e))))
  (= (mem49 x
  (tb2t4102
  (image (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (tuple2 a1 e1) (t2tb4250 p)
  (t2tb2943 w))))
  (exists ((a2 (tuple21 a e)))
  (and (mem44 a2 w) (mem
  (tuple2 (tuple2 a1 e1) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)))
  (Tuple2 (tuple2 a1 e1) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (t2tb2949 a2)
  (t2tb4104 x)) (t2tb4250 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a e) (tuple21 a (tuple21 d e)))))
  (w (set (tuple21 a e))) (x (tuple21 a (tuple21 d e))))
  (= (mem48 x
  (tb2t4103
  (image (tuple2 a1 (tuple2 d1 e1)) (tuple2 a1 e1) (t2tb4252 p) (t2tb2943 w))))
  (exists ((a2 (tuple21 a e)))
  (and (mem44 a2 w) (mem (tuple2 (tuple2 a1 e1) (tuple2 a1 (tuple2 d1 e1)))
  (Tuple2 (tuple2 a1 e1) (tuple2 a1 (tuple2 d1 e1)) (t2tb2949 a2)
  (t2tb4105 x)) (t2tb4252 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a e) (set (tuple21 c e)))))
  (w (set (tuple21 a e))) (x (set (tuple21 c e))))
  (= (mem47 x
  (tb2t3854
  (image (set1 (tuple2 c1 e1)) (tuple2 a1 e1) (t2tb4254 p) (t2tb2943 w))))
  (exists ((a2 (tuple21 a e)))
  (and (mem44 a2 w) (mem (tuple2 (tuple2 a1 e1) (set1 (tuple2 c1 e1)))
  (Tuple2 (tuple2 a1 e1) (set1 (tuple2 c1 e1)) (t2tb2949 a2) (t2tb3478 x))
  (t2tb4254 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a e) (tuple21 c e)))) (w (set (tuple21 a
  e))) (x (tuple21 c e)))
  (= (mem46 x
  (tb2t3478 (image (tuple2 c1 e1) (tuple2 a1 e1) (t2tb4256 p) (t2tb2943 w))))
  (exists ((a2 (tuple21 a e)))
  (and (mem44 a2 w) (mem (tuple2 (tuple2 a1 e1) (tuple2 c1 e1))
  (Tuple2 (tuple2 a1 e1) (tuple2 c1 e1) (t2tb2949 a2) (t2tb3479 x))
  (t2tb4256 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a e) (tuple21 a e)))) (w (set (tuple21 a
  e))) (x (tuple21 a e)))
  (= (mem44 x
  (tb2t2943 (image (tuple2 a1 e1) (tuple2 a1 e1) (t2tb2996 p) (t2tb2943 w))))
  (exists ((a2 (tuple21 a e)))
  (and (mem44 a2 w) (mem (tuple2 (tuple2 a1 e1) (tuple2 a1 e1))
  (Tuple2 (tuple2 a1 e1) (tuple2 a1 e1) (t2tb2949 a2) (t2tb2949 x))
  (t2tb2996 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a e) e))) (w (set (tuple21 a e))) (x e))
  (= (mem36 x (tb2t2947 (image e1 (tuple2 a1 e1) (t2tb3012 p) (t2tb2943 w))))
  (exists ((a2 (tuple21 a e)))
  (and (mem44 a2 w) (mem (tuple2 (tuple2 a1 e1) e1)
  (Tuple2 (tuple2 a1 e1) e1 (t2tb2949 a2) (t2tb2955 x)) (t2tb3012 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a e) (tuple21 a d)))) (w (set (tuple21 a
  e))) (x (tuple21 a d)))
  (= (mem32 x
  (tb2t903 (image (tuple2 a1 d1) (tuple2 a1 e1) (t2tb4258 p) (t2tb2943 w))))
  (exists ((a2 (tuple21 a e)))
  (and (mem44 a2 w) (mem (tuple2 (tuple2 a1 e1) (tuple2 a1 d1))
  (Tuple2 (tuple2 a1 e1) (tuple2 a1 d1) (t2tb2949 a2) (t2tb904 x))
  (t2tb4258 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a e) (set (tuple21 b d)))))
  (w (set (tuple21 a e))) (x (set (tuple21 b d))))
  (= (mem33 x
  (tb2t906
  (image (set1 (tuple2 b1 d1)) (tuple2 a1 e1) (t2tb4260 p) (t2tb2943 w))))
  (exists ((a2 (tuple21 a e)))
  (and (mem44 a2 w) (mem (tuple2 (tuple2 a1 e1) (set1 (tuple2 b1 d1)))
  (Tuple2 (tuple2 a1 e1) (set1 (tuple2 b1 d1)) (t2tb2949 a2) (t2tb687 x))
  (t2tb4260 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a e) (tuple21 b d)))) (w (set (tuple21 a
  e))) (x (tuple21 b d)))
  (= (mem23 x
  (tb2t687 (image (tuple2 b1 d1) (tuple2 a1 e1) (t2tb4262 p) (t2tb2943 w))))
  (exists ((a2 (tuple21 a e)))
  (and (mem44 a2 w) (mem (tuple2 (tuple2 a1 e1) (tuple2 b1 d1))
  (Tuple2 (tuple2 a1 e1) (tuple2 b1 d1) (t2tb2949 a2) (t2tb692 x))
  (t2tb4262 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a e) d))) (w (set (tuple21 a e))) (x d))
  (= (mem20 x (tb2t690 (image d1 (tuple2 a1 e1) (t2tb3020 p) (t2tb2943 w))))
  (exists ((a2 (tuple21 a e)))
  (and (mem44 a2 w) (mem (tuple2 (tuple2 a1 e1) d1)
  (Tuple2 (tuple2 a1 e1) d1 (t2tb2949 a2) (t2tb694 x)) (t2tb3020 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a e) (tuple21 a (tuple21 b c)))))
  (w (set (tuple21 a e))) (x (tuple21 a (tuple21 b c))))
  (= (mem14 x
  (tb2t261
  (image (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 e1) (t2tb4264 p) (t2tb2943 w))))
  (exists ((a2 (tuple21 a e)))
  (and (mem44 a2 w) (mem (tuple2 (tuple2 a1 e1) (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 (tuple2 a1 e1) (tuple2 a1 (tuple2 b1 c1)) (t2tb2949 a2)
  (t2tb260 x)) (t2tb4264 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a e) (set (tuple21 a c)))))
  (w (set (tuple21 a e))) (x (set (tuple21 a c))))
  (= (mem11 x
  (tb2t128
  (image (set1 (tuple2 a1 c1)) (tuple2 a1 e1) (t2tb4266 p) (t2tb2943 w))))
  (exists ((a2 (tuple21 a e)))
  (and (mem44 a2 w) (mem (tuple2 (tuple2 a1 e1) (set1 (tuple2 a1 c1)))
  (Tuple2 (tuple2 a1 e1) (set1 (tuple2 a1 c1)) (t2tb2949 a2) (t2tb129 x))
  (t2tb4266 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a e) (tuple21 a c)))) (w (set (tuple21 a
  e))) (x (tuple21 a c)))
  (= (mem10 x
  (tb2t129 (image (tuple2 a1 c1) (tuple2 a1 e1) (t2tb4268 p) (t2tb2943 w))))
  (exists ((a2 (tuple21 a e)))
  (and (mem44 a2 w) (mem (tuple2 (tuple2 a1 e1) (tuple2 a1 c1))
  (Tuple2 (tuple2 a1 e1) (tuple2 a1 c1) (t2tb2949 a2) (t2tb133 x))
  (t2tb4268 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a e) c))) (w (set (tuple21 a e))) (x c))
  (= (mem7 x (tb2t132 (image c1 (tuple2 a1 e1) (t2tb3022 p) (t2tb2943 w))))
  (exists ((a2 (tuple21 a e)))
  (and (mem44 a2 w) (mem (tuple2 (tuple2 a1 e1) c1)
  (Tuple2 (tuple2 a1 e1) c1 (t2tb2949 a2) (t2tb135 x)) (t2tb3022 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a e) (set (tuple21 a b)))))
  (w (set (tuple21 a e))) (x (set (tuple21 a b))))
  (= (mem4 x
  (tb2t10
  (image (set1 (tuple2 a1 b1)) (tuple2 a1 e1) (t2tb3024 p) (t2tb2943 w))))
  (exists ((a2 (tuple21 a e)))
  (and (mem44 a2 w) (mem (tuple2 (tuple2 a1 e1) (set1 (tuple2 a1 b1)))
  (Tuple2 (tuple2 a1 e1) (set1 (tuple2 a1 b1)) (t2tb2949 a2) (t2tb11 x))
  (t2tb3024 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a e) (tuple21 a b)))) (w (set (tuple21 a
  e))) (x (tuple21 a b)))
  (= (mem3 x
  (tb2t11 (image (tuple2 a1 b1) (tuple2 a1 e1) (t2tb3026 p) (t2tb2943 w))))
  (exists ((a2 (tuple21 a e)))
  (and (mem44 a2 w) (mem (tuple2 (tuple2 a1 e1) (tuple2 a1 b1))
  (Tuple2 (tuple2 a1 e1) (tuple2 a1 b1) (t2tb2949 a2) (t2tb13 x))
  (t2tb3026 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a e) b))) (w (set (tuple21 a e))) (x b))
  (= (mem2 x (tb2t12 (image b1 (tuple2 a1 e1) (t2tb3028 p) (t2tb2943 w))))
  (exists ((a2 (tuple21 a e)))
  (and (mem44 a2 w) (mem (tuple2 (tuple2 a1 e1) b1)
  (Tuple2 (tuple2 a1 e1) b1 (t2tb2949 a2) (t2tb14 x)) (t2tb3028 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a e) a))) (w (set (tuple21 a e))) (x a))
  (= (mem1 x (tb2t1 (image a1 (tuple2 a1 e1) (t2tb3030 p) (t2tb2943 w))))
  (exists ((a2 (tuple21 a e)))
  (and (mem44 a2 w) (mem (tuple2 (tuple2 a1 e1) a1)
  (Tuple2 (tuple2 a1 e1) a1 (t2tb2949 a2) (t2tb2 x)) (t2tb3030 p)))))))

;; mem_image
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (w (set (tuple21 a e))) (x uni))
  (= (mem b2 x (image b2 (tuple2 a1 e1) p (t2tb2943 w)))
  (exists ((a2 (tuple21 a e)))
  (and (mem44 a2 w) (mem (tuple2 (tuple2 a1 e1) b2)
  (Tuple2 (tuple2 a1 e1) b2 (t2tb2949 a2) x) p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 e (tuple21 (tuple21 b c) (tuple21 d e)))))
  (w (set e)) (x (tuple21 (tuple21 b c) (tuple21 d e))))
  (= (mem49 x
  (tb2t4102
  (image (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) e1 (t2tb4270 p) (t2tb2947 w))))
  (exists ((a2 e))
  (and (mem36 a2 w) (mem (tuple2 e1 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)))
  (Tuple2 e1 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (t2tb2955 a2)
  (t2tb4104 x)) (t2tb4270 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 e (tuple21 a (tuple21 d e))))) (w (set e))
  (x (tuple21 a (tuple21 d e))))
  (= (mem48 x
  (tb2t4103 (image (tuple2 a1 (tuple2 d1 e1)) e1 (t2tb4272 p) (t2tb2947 w))))
  (exists ((a2 e))
  (and (mem36 a2 w) (mem (tuple2 e1 (tuple2 a1 (tuple2 d1 e1)))
  (Tuple2 e1 (tuple2 a1 (tuple2 d1 e1)) (t2tb2955 a2) (t2tb4105 x))
  (t2tb4272 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 e (set (tuple21 c e))))) (w (set e))
  (x (set (tuple21 c e))))
  (= (mem47 x
  (tb2t3854 (image (set1 (tuple2 c1 e1)) e1 (t2tb4274 p) (t2tb2947 w))))
  (exists ((a2 e))
  (and (mem36 a2 w) (mem (tuple2 e1 (set1 (tuple2 c1 e1)))
  (Tuple2 e1 (set1 (tuple2 c1 e1)) (t2tb2955 a2) (t2tb3478 x)) (t2tb4274 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 e (tuple21 c e)))) (w (set e)) (x (tuple21 c e)))
  (= (mem46 x (tb2t3478 (image (tuple2 c1 e1) e1 (t2tb4276 p) (t2tb2947 w))))
  (exists ((a2 e))
  (and (mem36 a2 w) (mem (tuple2 e1 (tuple2 c1 e1))
  (Tuple2 e1 (tuple2 c1 e1) (t2tb2955 a2) (t2tb3479 x)) (t2tb4276 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 e (tuple21 a e)))) (w (set e)) (x (tuple21 a e)))
  (= (mem44 x (tb2t2943 (image (tuple2 a1 e1) e1 (t2tb3300 p) (t2tb2947 w))))
  (exists ((a2 e))
  (and (mem36 a2 w) (mem (tuple2 e1 (tuple2 a1 e1))
  (Tuple2 e1 (tuple2 a1 e1) (t2tb2955 a2) (t2tb2949 x)) (t2tb3300 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 e e))) (w (set e)) (x e))
  (= (mem36 x (tb2t2947 (image e1 e1 (t2tb3316 p) (t2tb2947 w))))
  (exists ((a2 e))
  (and (mem36 a2 w) (mem (tuple2 e1 e1)
  (Tuple2 e1 e1 (t2tb2955 a2) (t2tb2955 x)) (t2tb3316 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 e (tuple21 a d)))) (w (set e)) (x (tuple21 a d)))
  (= (mem32 x (tb2t903 (image (tuple2 a1 d1) e1 (t2tb4278 p) (t2tb2947 w))))
  (exists ((a2 e))
  (and (mem36 a2 w) (mem (tuple2 e1 (tuple2 a1 d1))
  (Tuple2 e1 (tuple2 a1 d1) (t2tb2955 a2) (t2tb904 x)) (t2tb4278 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 e (set (tuple21 b d))))) (w (set e))
  (x (set (tuple21 b d))))
  (= (mem33 x
  (tb2t906 (image (set1 (tuple2 b1 d1)) e1 (t2tb4280 p) (t2tb2947 w))))
  (exists ((a2 e))
  (and (mem36 a2 w) (mem (tuple2 e1 (set1 (tuple2 b1 d1)))
  (Tuple2 e1 (set1 (tuple2 b1 d1)) (t2tb2955 a2) (t2tb687 x)) (t2tb4280 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 e (tuple21 b d)))) (w (set e)) (x (tuple21 b d)))
  (= (mem23 x (tb2t687 (image (tuple2 b1 d1) e1 (t2tb4282 p) (t2tb2947 w))))
  (exists ((a2 e))
  (and (mem36 a2 w) (mem (tuple2 e1 (tuple2 b1 d1))
  (Tuple2 e1 (tuple2 b1 d1) (t2tb2955 a2) (t2tb692 x)) (t2tb4282 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 e d))) (w (set e)) (x d))
  (= (mem20 x (tb2t690 (image d1 e1 (t2tb3324 p) (t2tb2947 w))))
  (exists ((a2 e))
  (and (mem36 a2 w) (mem (tuple2 e1 d1)
  (Tuple2 e1 d1 (t2tb2955 a2) (t2tb694 x)) (t2tb3324 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 e (tuple21 a (tuple21 b c))))) (w (set e))
  (x (tuple21 a (tuple21 b c))))
  (= (mem14 x
  (tb2t261 (image (tuple2 a1 (tuple2 b1 c1)) e1 (t2tb4284 p) (t2tb2947 w))))
  (exists ((a2 e))
  (and (mem36 a2 w) (mem (tuple2 e1 (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 e1 (tuple2 a1 (tuple2 b1 c1)) (t2tb2955 a2) (t2tb260 x))
  (t2tb4284 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 e (set (tuple21 a c))))) (w (set e))
  (x (set (tuple21 a c))))
  (= (mem11 x
  (tb2t128 (image (set1 (tuple2 a1 c1)) e1 (t2tb4285 p) (t2tb2947 w))))
  (exists ((a2 e))
  (and (mem36 a2 w) (mem (tuple2 e1 (set1 (tuple2 a1 c1)))
  (Tuple2 e1 (set1 (tuple2 a1 c1)) (t2tb2955 a2) (t2tb129 x)) (t2tb4285 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 e (tuple21 a c)))) (w (set e)) (x (tuple21 a c)))
  (= (mem10 x (tb2t129 (image (tuple2 a1 c1) e1 (t2tb4287 p) (t2tb2947 w))))
  (exists ((a2 e))
  (and (mem36 a2 w) (mem (tuple2 e1 (tuple2 a1 c1))
  (Tuple2 e1 (tuple2 a1 c1) (t2tb2955 a2) (t2tb133 x)) (t2tb4287 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 e c))) (w (set e)) (x c))
  (= (mem7 x (tb2t132 (image c1 e1 (t2tb3326 p) (t2tb2947 w))))
  (exists ((a2 e))
  (and (mem36 a2 w) (mem (tuple2 e1 c1)
  (Tuple2 e1 c1 (t2tb2955 a2) (t2tb135 x)) (t2tb3326 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 e (set (tuple21 a b))))) (w (set e))
  (x (set (tuple21 a b))))
  (= (mem4 x
  (tb2t10 (image (set1 (tuple2 a1 b1)) e1 (t2tb3328 p) (t2tb2947 w))))
  (exists ((a2 e))
  (and (mem36 a2 w) (mem (tuple2 e1 (set1 (tuple2 a1 b1)))
  (Tuple2 e1 (set1 (tuple2 a1 b1)) (t2tb2955 a2) (t2tb11 x)) (t2tb3328 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 e (tuple21 a b)))) (w (set e)) (x (tuple21 a b)))
  (= (mem3 x (tb2t11 (image (tuple2 a1 b1) e1 (t2tb3330 p) (t2tb2947 w))))
  (exists ((a2 e))
  (and (mem36 a2 w) (mem (tuple2 e1 (tuple2 a1 b1))
  (Tuple2 e1 (tuple2 a1 b1) (t2tb2955 a2) (t2tb13 x)) (t2tb3330 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 e b))) (w (set e)) (x b))
  (= (mem2 x (tb2t12 (image b1 e1 (t2tb3332 p) (t2tb2947 w))))
  (exists ((a2 e))
  (and (mem36 a2 w) (mem (tuple2 e1 b1)
  (Tuple2 e1 b1 (t2tb2955 a2) (t2tb14 x)) (t2tb3332 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 e a))) (w (set e)) (x a))
  (= (mem1 x (tb2t1 (image a1 e1 (t2tb3334 p) (t2tb2947 w))))
  (exists ((a2 e))
  (and (mem36 a2 w) (mem (tuple2 e1 a1)
  (Tuple2 e1 a1 (t2tb2955 a2) (t2tb2 x)) (t2tb3334 p)))))))

;; mem_image
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (w (set e)) (x uni))
  (= (mem b2 x (image b2 e1 p (t2tb2947 w)))
  (exists ((a2 e))
  (and (mem36 a2 w) (mem (tuple2 e1 b2) (Tuple2 e1 b2 (t2tb2955 a2) x) p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a d) (tuple21 (tuple21 b c) (tuple21 d
  e))))) (w (set (tuple21 a d))) (x (tuple21 (tuple21 b c) (tuple21 d e))))
  (= (mem49 x
  (tb2t4102
  (image (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (tuple2 a1 d1) (t2tb4289 p)
  (t2tb903 w))))
  (exists ((a2 (tuple21 a d)))
  (and (mem32 a2 w) (mem
  (tuple2 (tuple2 a1 d1) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)))
  (Tuple2 (tuple2 a1 d1) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (t2tb904 a2)
  (t2tb4104 x)) (t2tb4289 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a d) (tuple21 a (tuple21 d e)))))
  (w (set (tuple21 a d))) (x (tuple21 a (tuple21 d e))))
  (= (mem48 x
  (tb2t4103
  (image (tuple2 a1 (tuple2 d1 e1)) (tuple2 a1 d1) (t2tb4291 p) (t2tb903 w))))
  (exists ((a2 (tuple21 a d)))
  (and (mem32 a2 w) (mem (tuple2 (tuple2 a1 d1) (tuple2 a1 (tuple2 d1 e1)))
  (Tuple2 (tuple2 a1 d1) (tuple2 a1 (tuple2 d1 e1)) (t2tb904 a2)
  (t2tb4105 x)) (t2tb4291 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a d) (set (tuple21 c e)))))
  (w (set (tuple21 a d))) (x (set (tuple21 c e))))
  (= (mem47 x
  (tb2t3854
  (image (set1 (tuple2 c1 e1)) (tuple2 a1 d1) (t2tb4293 p) (t2tb903 w))))
  (exists ((a2 (tuple21 a d)))
  (and (mem32 a2 w) (mem (tuple2 (tuple2 a1 d1) (set1 (tuple2 c1 e1)))
  (Tuple2 (tuple2 a1 d1) (set1 (tuple2 c1 e1)) (t2tb904 a2) (t2tb3478 x))
  (t2tb4293 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a d) (tuple21 c e)))) (w (set (tuple21 a
  d))) (x (tuple21 c e)))
  (= (mem46 x
  (tb2t3478 (image (tuple2 c1 e1) (tuple2 a1 d1) (t2tb4295 p) (t2tb903 w))))
  (exists ((a2 (tuple21 a d)))
  (and (mem32 a2 w) (mem (tuple2 (tuple2 a1 d1) (tuple2 c1 e1))
  (Tuple2 (tuple2 a1 d1) (tuple2 c1 e1) (t2tb904 a2) (t2tb3479 x))
  (t2tb4295 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a d) (tuple21 a e)))) (w (set (tuple21 a
  d))) (x (tuple21 a e)))
  (= (mem44 x
  (tb2t2943 (image (tuple2 a1 e1) (tuple2 a1 d1) (t2tb4297 p) (t2tb903 w))))
  (exists ((a2 (tuple21 a d)))
  (and (mem32 a2 w) (mem (tuple2 (tuple2 a1 d1) (tuple2 a1 e1))
  (Tuple2 (tuple2 a1 d1) (tuple2 a1 e1) (t2tb904 a2) (t2tb2949 x))
  (t2tb4297 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a d) e))) (w (set (tuple21 a d))) (x e))
  (= (mem36 x (tb2t2947 (image e1 (tuple2 a1 d1) (t2tb4300 p) (t2tb903 w))))
  (exists ((a2 (tuple21 a d)))
  (and (mem32 a2 w) (mem (tuple2 (tuple2 a1 d1) e1)
  (Tuple2 (tuple2 a1 d1) e1 (t2tb904 a2) (t2tb2955 x)) (t2tb4300 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a d) (tuple21 a d)))) (w (set (tuple21 a
  d))) (x (tuple21 a d)))
  (= (mem32 x
  (tb2t903 (image (tuple2 a1 d1) (tuple2 a1 d1) (t2tb4301 p) (t2tb903 w))))
  (exists ((a2 (tuple21 a d)))
  (and (mem32 a2 w) (mem (tuple2 (tuple2 a1 d1) (tuple2 a1 d1))
  (Tuple2 (tuple2 a1 d1) (tuple2 a1 d1) (t2tb904 a2) (t2tb904 x))
  (t2tb4301 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a d) (set (tuple21 b d)))))
  (w (set (tuple21 a d))) (x (set (tuple21 b d))))
  (= (mem33 x
  (tb2t906
  (image (set1 (tuple2 b1 d1)) (tuple2 a1 d1) (t2tb4303 p) (t2tb903 w))))
  (exists ((a2 (tuple21 a d)))
  (and (mem32 a2 w) (mem (tuple2 (tuple2 a1 d1) (set1 (tuple2 b1 d1)))
  (Tuple2 (tuple2 a1 d1) (set1 (tuple2 b1 d1)) (t2tb904 a2) (t2tb687 x))
  (t2tb4303 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a d) (tuple21 b d)))) (w (set (tuple21 a
  d))) (x (tuple21 b d)))
  (= (mem23 x
  (tb2t687 (image (tuple2 b1 d1) (tuple2 a1 d1) (t2tb4305 p) (t2tb903 w))))
  (exists ((a2 (tuple21 a d)))
  (and (mem32 a2 w) (mem (tuple2 (tuple2 a1 d1) (tuple2 b1 d1))
  (Tuple2 (tuple2 a1 d1) (tuple2 b1 d1) (t2tb904 a2) (t2tb692 x))
  (t2tb4305 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a d) d))) (w (set (tuple21 a d))) (x d))
  (= (mem20 x (tb2t690 (image d1 (tuple2 a1 d1) (t2tb4307 p) (t2tb903 w))))
  (exists ((a2 (tuple21 a d)))
  (and (mem32 a2 w) (mem (tuple2 (tuple2 a1 d1) d1)
  (Tuple2 (tuple2 a1 d1) d1 (t2tb904 a2) (t2tb694 x)) (t2tb4307 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a d) (tuple21 a (tuple21 b c)))))
  (w (set (tuple21 a d))) (x (tuple21 a (tuple21 b c))))
  (= (mem14 x
  (tb2t261
  (image (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 d1) (t2tb4309 p) (t2tb903 w))))
  (exists ((a2 (tuple21 a d)))
  (and (mem32 a2 w) (mem (tuple2 (tuple2 a1 d1) (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 (tuple2 a1 d1) (tuple2 a1 (tuple2 b1 c1)) (t2tb904 a2) (t2tb260 x))
  (t2tb4309 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a d) (set (tuple21 a c)))))
  (w (set (tuple21 a d))) (x (set (tuple21 a c))))
  (= (mem11 x
  (tb2t128
  (image (set1 (tuple2 a1 c1)) (tuple2 a1 d1) (t2tb4311 p) (t2tb903 w))))
  (exists ((a2 (tuple21 a d)))
  (and (mem32 a2 w) (mem (tuple2 (tuple2 a1 d1) (set1 (tuple2 a1 c1)))
  (Tuple2 (tuple2 a1 d1) (set1 (tuple2 a1 c1)) (t2tb904 a2) (t2tb129 x))
  (t2tb4311 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a d) (tuple21 a c)))) (w (set (tuple21 a
  d))) (x (tuple21 a c)))
  (= (mem10 x
  (tb2t129 (image (tuple2 a1 c1) (tuple2 a1 d1) (t2tb4313 p) (t2tb903 w))))
  (exists ((a2 (tuple21 a d)))
  (and (mem32 a2 w) (mem (tuple2 (tuple2 a1 d1) (tuple2 a1 c1))
  (Tuple2 (tuple2 a1 d1) (tuple2 a1 c1) (t2tb904 a2) (t2tb133 x))
  (t2tb4313 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a d) c))) (w (set (tuple21 a d))) (x c))
  (= (mem7 x (tb2t132 (image c1 (tuple2 a1 d1) (t2tb4316 p) (t2tb903 w))))
  (exists ((a2 (tuple21 a d)))
  (and (mem32 a2 w) (mem (tuple2 (tuple2 a1 d1) c1)
  (Tuple2 (tuple2 a1 d1) c1 (t2tb904 a2) (t2tb135 x)) (t2tb4316 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a d) (set (tuple21 a b)))))
  (w (set (tuple21 a d))) (x (set (tuple21 a b))))
  (= (mem4 x
  (tb2t10
  (image (set1 (tuple2 a1 b1)) (tuple2 a1 d1) (t2tb4317 p) (t2tb903 w))))
  (exists ((a2 (tuple21 a d)))
  (and (mem32 a2 w) (mem (tuple2 (tuple2 a1 d1) (set1 (tuple2 a1 b1)))
  (Tuple2 (tuple2 a1 d1) (set1 (tuple2 a1 b1)) (t2tb904 a2) (t2tb11 x))
  (t2tb4317 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a d) (tuple21 a b)))) (w (set (tuple21 a
  d))) (x (tuple21 a b)))
  (= (mem3 x
  (tb2t11 (image (tuple2 a1 b1) (tuple2 a1 d1) (t2tb4319 p) (t2tb903 w))))
  (exists ((a2 (tuple21 a d)))
  (and (mem32 a2 w) (mem (tuple2 (tuple2 a1 d1) (tuple2 a1 b1))
  (Tuple2 (tuple2 a1 d1) (tuple2 a1 b1) (t2tb904 a2) (t2tb13 x))
  (t2tb4319 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a d) b))) (w (set (tuple21 a d))) (x b))
  (= (mem2 x (tb2t12 (image b1 (tuple2 a1 d1) (t2tb4321 p) (t2tb903 w))))
  (exists ((a2 (tuple21 a d)))
  (and (mem32 a2 w) (mem (tuple2 (tuple2 a1 d1) b1)
  (Tuple2 (tuple2 a1 d1) b1 (t2tb904 a2) (t2tb14 x)) (t2tb4321 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a d) a))) (w (set (tuple21 a d))) (x a))
  (= (mem1 x (tb2t1 (image a1 (tuple2 a1 d1) (t2tb4323 p) (t2tb903 w))))
  (exists ((a2 (tuple21 a d)))
  (and (mem32 a2 w) (mem (tuple2 (tuple2 a1 d1) a1)
  (Tuple2 (tuple2 a1 d1) a1 (t2tb904 a2) (t2tb2 x)) (t2tb4323 p)))))))

;; mem_image
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (w (set (tuple21 a d))) (x uni))
  (= (mem b2 x (image b2 (tuple2 a1 d1) p (t2tb903 w)))
  (exists ((a2 (tuple21 a d)))
  (and (mem32 a2 w) (mem (tuple2 (tuple2 a1 d1) b2)
  (Tuple2 (tuple2 a1 d1) b2 (t2tb904 a2) x) p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 b d)) (tuple21 (tuple21 b c)
  (tuple21 d e))))) (w (set (set (tuple21 b d)))) (x (tuple21 (tuple21 b c)
  (tuple21 d e))))
  (= (mem49 x
  (tb2t4102
  (image (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (set1 (tuple2 b1 d1))
  (t2tb4325 p) (t2tb906 w))))
  (exists ((a2 (set (tuple21 b d))))
  (and (mem33 a2 w) (mem
  (tuple2 (set1 (tuple2 b1 d1)) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)))
  (Tuple2 (set1 (tuple2 b1 d1)) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1))
  (t2tb687 a2) (t2tb4104 x)) (t2tb4325 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 b d)) (tuple21 a (tuple21 d e)))))
  (w (set (set (tuple21 b d)))) (x (tuple21 a (tuple21 d e))))
  (= (mem48 x
  (tb2t4103
  (image (tuple2 a1 (tuple2 d1 e1)) (set1 (tuple2 b1 d1)) (t2tb4327 p)
  (t2tb906 w))))
  (exists ((a2 (set (tuple21 b d))))
  (and (mem33 a2 w) (mem
  (tuple2 (set1 (tuple2 b1 d1)) (tuple2 a1 (tuple2 d1 e1)))
  (Tuple2 (set1 (tuple2 b1 d1)) (tuple2 a1 (tuple2 d1 e1)) (t2tb687 a2)
  (t2tb4105 x)) (t2tb4327 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 b d)) (set (tuple21 c e)))))
  (w (set (set (tuple21 b d)))) (x (set (tuple21 c e))))
  (= (mem47 x
  (tb2t3854
  (image (set1 (tuple2 c1 e1)) (set1 (tuple2 b1 d1)) (t2tb4330 p)
  (t2tb906 w))))
  (exists ((a2 (set (tuple21 b d))))
  (and (mem33 a2 w) (mem (tuple2 (set1 (tuple2 b1 d1)) (set1 (tuple2 c1 e1)))
  (Tuple2 (set1 (tuple2 b1 d1)) (set1 (tuple2 c1 e1)) (t2tb687 a2)
  (t2tb3478 x)) (t2tb4330 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 b d)) (tuple21 c e))))
  (w (set (set (tuple21 b d)))) (x (tuple21 c e)))
  (= (mem46 x
  (tb2t3478
  (image (tuple2 c1 e1) (set1 (tuple2 b1 d1)) (t2tb4331 p) (t2tb906 w))))
  (exists ((a2 (set (tuple21 b d))))
  (and (mem33 a2 w) (mem (tuple2 (set1 (tuple2 b1 d1)) (tuple2 c1 e1))
  (Tuple2 (set1 (tuple2 b1 d1)) (tuple2 c1 e1) (t2tb687 a2) (t2tb3479 x))
  (t2tb4331 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 b d)) (tuple21 a e))))
  (w (set (set (tuple21 b d)))) (x (tuple21 a e)))
  (= (mem44 x
  (tb2t2943
  (image (tuple2 a1 e1) (set1 (tuple2 b1 d1)) (t2tb4333 p) (t2tb906 w))))
  (exists ((a2 (set (tuple21 b d))))
  (and (mem33 a2 w) (mem (tuple2 (set1 (tuple2 b1 d1)) (tuple2 a1 e1))
  (Tuple2 (set1 (tuple2 b1 d1)) (tuple2 a1 e1) (t2tb687 a2) (t2tb2949 x))
  (t2tb4333 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 b d)) e))) (w (set (set (tuple21 b
  d)))) (x e))
  (= (mem36 x
  (tb2t2947 (image e1 (set1 (tuple2 b1 d1)) (t2tb4335 p) (t2tb906 w))))
  (exists ((a2 (set (tuple21 b d))))
  (and (mem33 a2 w) (mem (tuple2 (set1 (tuple2 b1 d1)) e1)
  (Tuple2 (set1 (tuple2 b1 d1)) e1 (t2tb687 a2) (t2tb2955 x)) (t2tb4335 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 b d)) (tuple21 a d))))
  (w (set (set (tuple21 b d)))) (x (tuple21 a d)))
  (= (mem32 x
  (tb2t903
  (image (tuple2 a1 d1) (set1 (tuple2 b1 d1)) (t2tb4337 p) (t2tb906 w))))
  (exists ((a2 (set (tuple21 b d))))
  (and (mem33 a2 w) (mem (tuple2 (set1 (tuple2 b1 d1)) (tuple2 a1 d1))
  (Tuple2 (set1 (tuple2 b1 d1)) (tuple2 a1 d1) (t2tb687 a2) (t2tb904 x))
  (t2tb4337 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 b d)) (set (tuple21 b d)))))
  (w (set (set (tuple21 b d)))) (x (set (tuple21 b d))))
  (= (mem33 x
  (tb2t906
  (image (set1 (tuple2 b1 d1)) (set1 (tuple2 b1 d1)) (t2tb4339 p)
  (t2tb906 w))))
  (exists ((a2 (set (tuple21 b d))))
  (and (mem33 a2 w) (mem (tuple2 (set1 (tuple2 b1 d1)) (set1 (tuple2 b1 d1)))
  (Tuple2 (set1 (tuple2 b1 d1)) (set1 (tuple2 b1 d1)) (t2tb687 a2)
  (t2tb687 x)) (t2tb4339 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 b d)) (tuple21 b d))))
  (w (set (set (tuple21 b d)))) (x (tuple21 b d)))
  (= (mem23 x
  (tb2t687
  (image (tuple2 b1 d1) (set1 (tuple2 b1 d1)) (t2tb4341 p) (t2tb906 w))))
  (exists ((a2 (set (tuple21 b d))))
  (and (mem33 a2 w) (mem (tuple2 (set1 (tuple2 b1 d1)) (tuple2 b1 d1))
  (Tuple2 (set1 (tuple2 b1 d1)) (tuple2 b1 d1) (t2tb687 a2) (t2tb692 x))
  (t2tb4341 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 b d)) d))) (w (set (set (tuple21 b
  d)))) (x d))
  (= (mem20 x
  (tb2t690 (image d1 (set1 (tuple2 b1 d1)) (t2tb4343 p) (t2tb906 w))))
  (exists ((a2 (set (tuple21 b d))))
  (and (mem33 a2 w) (mem (tuple2 (set1 (tuple2 b1 d1)) d1)
  (Tuple2 (set1 (tuple2 b1 d1)) d1 (t2tb687 a2) (t2tb694 x)) (t2tb4343 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 b d)) (tuple21 a (tuple21 b c)))))
  (w (set (set (tuple21 b d)))) (x (tuple21 a (tuple21 b c))))
  (= (mem14 x
  (tb2t261
  (image (tuple2 a1 (tuple2 b1 c1)) (set1 (tuple2 b1 d1)) (t2tb4346 p)
  (t2tb906 w))))
  (exists ((a2 (set (tuple21 b d))))
  (and (mem33 a2 w) (mem
  (tuple2 (set1 (tuple2 b1 d1)) (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 (set1 (tuple2 b1 d1)) (tuple2 a1 (tuple2 b1 c1)) (t2tb687 a2)
  (t2tb260 x)) (t2tb4346 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 b d)) (set (tuple21 a c)))))
  (w (set (set (tuple21 b d)))) (x (set (tuple21 a c))))
  (= (mem11 x
  (tb2t128
  (image (set1 (tuple2 a1 c1)) (set1 (tuple2 b1 d1)) (t2tb4347 p)
  (t2tb906 w))))
  (exists ((a2 (set (tuple21 b d))))
  (and (mem33 a2 w) (mem (tuple2 (set1 (tuple2 b1 d1)) (set1 (tuple2 a1 c1)))
  (Tuple2 (set1 (tuple2 b1 d1)) (set1 (tuple2 a1 c1)) (t2tb687 a2)
  (t2tb129 x)) (t2tb4347 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 b d)) (tuple21 a c))))
  (w (set (set (tuple21 b d)))) (x (tuple21 a c)))
  (= (mem10 x
  (tb2t129
  (image (tuple2 a1 c1) (set1 (tuple2 b1 d1)) (t2tb4349 p) (t2tb906 w))))
  (exists ((a2 (set (tuple21 b d))))
  (and (mem33 a2 w) (mem (tuple2 (set1 (tuple2 b1 d1)) (tuple2 a1 c1))
  (Tuple2 (set1 (tuple2 b1 d1)) (tuple2 a1 c1) (t2tb687 a2) (t2tb133 x))
  (t2tb4349 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 b d)) c))) (w (set (set (tuple21 b
  d)))) (x c))
  (= (mem7 x
  (tb2t132 (image c1 (set1 (tuple2 b1 d1)) (t2tb4351 p) (t2tb906 w))))
  (exists ((a2 (set (tuple21 b d))))
  (and (mem33 a2 w) (mem (tuple2 (set1 (tuple2 b1 d1)) c1)
  (Tuple2 (set1 (tuple2 b1 d1)) c1 (t2tb687 a2) (t2tb135 x)) (t2tb4351 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 b d)) (set (tuple21 a b)))))
  (w (set (set (tuple21 b d)))) (x (set (tuple21 a b))))
  (= (mem4 x
  (tb2t10
  (image (set1 (tuple2 a1 b1)) (set1 (tuple2 b1 d1)) (t2tb4353 p)
  (t2tb906 w))))
  (exists ((a2 (set (tuple21 b d))))
  (and (mem33 a2 w) (mem (tuple2 (set1 (tuple2 b1 d1)) (set1 (tuple2 a1 b1)))
  (Tuple2 (set1 (tuple2 b1 d1)) (set1 (tuple2 a1 b1)) (t2tb687 a2)
  (t2tb11 x)) (t2tb4353 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 b d)) (tuple21 a b))))
  (w (set (set (tuple21 b d)))) (x (tuple21 a b)))
  (= (mem3 x
  (tb2t11
  (image (tuple2 a1 b1) (set1 (tuple2 b1 d1)) (t2tb4355 p) (t2tb906 w))))
  (exists ((a2 (set (tuple21 b d))))
  (and (mem33 a2 w) (mem (tuple2 (set1 (tuple2 b1 d1)) (tuple2 a1 b1))
  (Tuple2 (set1 (tuple2 b1 d1)) (tuple2 a1 b1) (t2tb687 a2) (t2tb13 x))
  (t2tb4355 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 b d)) b))) (w (set (set (tuple21 b
  d)))) (x b))
  (= (mem2 x
  (tb2t12 (image b1 (set1 (tuple2 b1 d1)) (t2tb4357 p) (t2tb906 w))))
  (exists ((a2 (set (tuple21 b d))))
  (and (mem33 a2 w) (mem (tuple2 (set1 (tuple2 b1 d1)) b1)
  (Tuple2 (set1 (tuple2 b1 d1)) b1 (t2tb687 a2) (t2tb14 x)) (t2tb4357 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 b d)) a))) (w (set (set (tuple21 b
  d)))) (x a))
  (= (mem1 x
  (tb2t1 (image a1 (set1 (tuple2 b1 d1)) (t2tb4359 p) (t2tb906 w))))
  (exists ((a2 (set (tuple21 b d))))
  (and (mem33 a2 w) (mem (tuple2 (set1 (tuple2 b1 d1)) a1)
  (Tuple2 (set1 (tuple2 b1 d1)) a1 (t2tb687 a2) (t2tb2 x)) (t2tb4359 p)))))))

;; mem_image
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (w (set (set (tuple21 b d)))) (x uni))
  (= (mem b2 x (image b2 (set1 (tuple2 b1 d1)) p (t2tb906 w)))
  (exists ((a2 (set (tuple21 b d))))
  (and (mem33 a2 w) (mem (tuple2 (set1 (tuple2 b1 d1)) b2)
  (Tuple2 (set1 (tuple2 b1 d1)) b2 (t2tb687 a2) x) p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 b d) (tuple21 (tuple21 b c) (tuple21 d
  e))))) (w (set (tuple21 b d))) (x (tuple21 (tuple21 b c) (tuple21 d e))))
  (= (mem49 x
  (tb2t4102
  (image (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (tuple2 b1 d1) (t2tb4361 p)
  (t2tb687 w))))
  (exists ((a2 (tuple21 b d)))
  (and (mem23 a2 w) (mem
  (tuple2 (tuple2 b1 d1) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)))
  (Tuple2 (tuple2 b1 d1) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (t2tb692 a2)
  (t2tb4104 x)) (t2tb4361 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 b d) (tuple21 a (tuple21 d e)))))
  (w (set (tuple21 b d))) (x (tuple21 a (tuple21 d e))))
  (= (mem48 x
  (tb2t4103
  (image (tuple2 a1 (tuple2 d1 e1)) (tuple2 b1 d1) (t2tb4363 p) (t2tb687 w))))
  (exists ((a2 (tuple21 b d)))
  (and (mem23 a2 w) (mem (tuple2 (tuple2 b1 d1) (tuple2 a1 (tuple2 d1 e1)))
  (Tuple2 (tuple2 b1 d1) (tuple2 a1 (tuple2 d1 e1)) (t2tb692 a2)
  (t2tb4105 x)) (t2tb4363 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 b d) (set (tuple21 c e)))))
  (w (set (tuple21 b d))) (x (set (tuple21 c e))))
  (= (mem47 x
  (tb2t3854
  (image (set1 (tuple2 c1 e1)) (tuple2 b1 d1) (t2tb4365 p) (t2tb687 w))))
  (exists ((a2 (tuple21 b d)))
  (and (mem23 a2 w) (mem (tuple2 (tuple2 b1 d1) (set1 (tuple2 c1 e1)))
  (Tuple2 (tuple2 b1 d1) (set1 (tuple2 c1 e1)) (t2tb692 a2) (t2tb3478 x))
  (t2tb4365 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 b d) (tuple21 c e)))) (w (set (tuple21 b
  d))) (x (tuple21 c e)))
  (= (mem46 x
  (tb2t3478 (image (tuple2 c1 e1) (tuple2 b1 d1) (t2tb4367 p) (t2tb687 w))))
  (exists ((a2 (tuple21 b d)))
  (and (mem23 a2 w) (mem (tuple2 (tuple2 b1 d1) (tuple2 c1 e1))
  (Tuple2 (tuple2 b1 d1) (tuple2 c1 e1) (t2tb692 a2) (t2tb3479 x))
  (t2tb4367 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 b d) (tuple21 a e)))) (w (set (tuple21 b
  d))) (x (tuple21 a e)))
  (= (mem44 x
  (tb2t2943 (image (tuple2 a1 e1) (tuple2 b1 d1) (t2tb4369 p) (t2tb687 w))))
  (exists ((a2 (tuple21 b d)))
  (and (mem23 a2 w) (mem (tuple2 (tuple2 b1 d1) (tuple2 a1 e1))
  (Tuple2 (tuple2 b1 d1) (tuple2 a1 e1) (t2tb692 a2) (t2tb2949 x))
  (t2tb4369 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 b d) e))) (w (set (tuple21 b d))) (x e))
  (= (mem36 x (tb2t2947 (image e1 (tuple2 b1 d1) (t2tb3915 p) (t2tb687 w))))
  (exists ((a2 (tuple21 b d)))
  (and (mem23 a2 w) (mem (tuple2 (tuple2 b1 d1) e1)
  (Tuple2 (tuple2 b1 d1) e1 (t2tb692 a2) (t2tb2955 x)) (t2tb3915 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 b d) (tuple21 a d)))) (w (set (tuple21 b
  d))) (x (tuple21 a d)))
  (= (mem32 x
  (tb2t903 (image (tuple2 a1 d1) (tuple2 b1 d1) (t2tb4371 p) (t2tb687 w))))
  (exists ((a2 (tuple21 b d)))
  (and (mem23 a2 w) (mem (tuple2 (tuple2 b1 d1) (tuple2 a1 d1))
  (Tuple2 (tuple2 b1 d1) (tuple2 a1 d1) (t2tb692 a2) (t2tb904 x))
  (t2tb4371 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 b d) (set (tuple21 b d)))))
  (w (set (tuple21 b d))) (x (set (tuple21 b d))))
  (= (mem33 x
  (tb2t906
  (image (set1 (tuple2 b1 d1)) (tuple2 b1 d1) (t2tb4373 p) (t2tb687 w))))
  (exists ((a2 (tuple21 b d)))
  (and (mem23 a2 w) (mem (tuple2 (tuple2 b1 d1) (set1 (tuple2 b1 d1)))
  (Tuple2 (tuple2 b1 d1) (set1 (tuple2 b1 d1)) (t2tb692 a2) (t2tb687 x))
  (t2tb4373 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 b d) (tuple21 b d)))) (w (set (tuple21 b
  d))) (x (tuple21 b d)))
  (= (mem23 x
  (tb2t687 (image (tuple2 b1 d1) (tuple2 b1 d1) (t2tb747 p) (t2tb687 w))))
  (exists ((a2 (tuple21 b d)))
  (and (mem23 a2 w) (mem (tuple2 (tuple2 b1 d1) (tuple2 b1 d1))
  (Tuple2 (tuple2 b1 d1) (tuple2 b1 d1) (t2tb692 a2) (t2tb692 x))
  (t2tb747 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 b d) d))) (w (set (tuple21 b d))) (x d))
  (= (mem20 x (tb2t690 (image d1 (tuple2 b1 d1) (t2tb4375 p) (t2tb687 w))))
  (exists ((a2 (tuple21 b d)))
  (and (mem23 a2 w) (mem (tuple2 (tuple2 b1 d1) d1)
  (Tuple2 (tuple2 b1 d1) d1 (t2tb692 a2) (t2tb694 x)) (t2tb4375 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 b d) (tuple21 a (tuple21 b c)))))
  (w (set (tuple21 b d))) (x (tuple21 a (tuple21 b c))))
  (= (mem14 x
  (tb2t261
  (image (tuple2 a1 (tuple2 b1 c1)) (tuple2 b1 d1) (t2tb4376 p) (t2tb687 w))))
  (exists ((a2 (tuple21 b d)))
  (and (mem23 a2 w) (mem (tuple2 (tuple2 b1 d1) (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 (tuple2 b1 d1) (tuple2 a1 (tuple2 b1 c1)) (t2tb692 a2) (t2tb260 x))
  (t2tb4376 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 b d) (set (tuple21 a c)))))
  (w (set (tuple21 b d))) (x (set (tuple21 a c))))
  (= (mem11 x
  (tb2t128
  (image (set1 (tuple2 a1 c1)) (tuple2 b1 d1) (t2tb4378 p) (t2tb687 w))))
  (exists ((a2 (tuple21 b d)))
  (and (mem23 a2 w) (mem (tuple2 (tuple2 b1 d1) (set1 (tuple2 a1 c1)))
  (Tuple2 (tuple2 b1 d1) (set1 (tuple2 a1 c1)) (t2tb692 a2) (t2tb129 x))
  (t2tb4378 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 b d) (tuple21 a c)))) (w (set (tuple21 b
  d))) (x (tuple21 a c)))
  (= (mem10 x
  (tb2t129 (image (tuple2 a1 c1) (tuple2 b1 d1) (t2tb755 p) (t2tb687 w))))
  (exists ((a2 (tuple21 b d)))
  (and (mem23 a2 w) (mem (tuple2 (tuple2 b1 d1) (tuple2 a1 c1))
  (Tuple2 (tuple2 b1 d1) (tuple2 a1 c1) (t2tb692 a2) (t2tb133 x))
  (t2tb755 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 b d) c))) (w (set (tuple21 b d))) (x c))
  (= (mem7 x (tb2t132 (image c1 (tuple2 b1 d1) (t2tb4380 p) (t2tb687 w))))
  (exists ((a2 (tuple21 b d)))
  (and (mem23 a2 w) (mem (tuple2 (tuple2 b1 d1) c1)
  (Tuple2 (tuple2 b1 d1) c1 (t2tb692 a2) (t2tb135 x)) (t2tb4380 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 b d) (set (tuple21 a b)))))
  (w (set (tuple21 b d))) (x (set (tuple21 a b))))
  (= (mem4 x
  (tb2t10
  (image (set1 (tuple2 a1 b1)) (tuple2 b1 d1) (t2tb4381 p) (t2tb687 w))))
  (exists ((a2 (tuple21 b d)))
  (and (mem23 a2 w) (mem (tuple2 (tuple2 b1 d1) (set1 (tuple2 a1 b1)))
  (Tuple2 (tuple2 b1 d1) (set1 (tuple2 a1 b1)) (t2tb692 a2) (t2tb11 x))
  (t2tb4381 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 b d) (tuple21 a b)))) (w (set (tuple21 b
  d))) (x (tuple21 a b)))
  (= (mem3 x
  (tb2t11 (image (tuple2 a1 b1) (tuple2 b1 d1) (t2tb4383 p) (t2tb687 w))))
  (exists ((a2 (tuple21 b d)))
  (and (mem23 a2 w) (mem (tuple2 (tuple2 b1 d1) (tuple2 a1 b1))
  (Tuple2 (tuple2 b1 d1) (tuple2 a1 b1) (t2tb692 a2) (t2tb13 x))
  (t2tb4383 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 b d) b))) (w (set (tuple21 b d))) (x b))
  (= (mem2 x (tb2t12 (image b1 (tuple2 b1 d1) (t2tb4385 p) (t2tb687 w))))
  (exists ((a2 (tuple21 b d)))
  (and (mem23 a2 w) (mem (tuple2 (tuple2 b1 d1) b1)
  (Tuple2 (tuple2 b1 d1) b1 (t2tb692 a2) (t2tb14 x)) (t2tb4385 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 b d) a))) (w (set (tuple21 b d))) (x a))
  (= (mem1 x (tb2t1 (image a1 (tuple2 b1 d1) (t2tb4386 p) (t2tb687 w))))
  (exists ((a2 (tuple21 b d)))
  (and (mem23 a2 w) (mem (tuple2 (tuple2 b1 d1) a1)
  (Tuple2 (tuple2 b1 d1) a1 (t2tb692 a2) (t2tb2 x)) (t2tb4386 p)))))))

;; mem_image
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (w (set (tuple21 b d))) (x uni))
  (= (mem b2 x (image b2 (tuple2 b1 d1) p (t2tb687 w)))
  (exists ((a2 (tuple21 b d)))
  (and (mem23 a2 w) (mem (tuple2 (tuple2 b1 d1) b2)
  (Tuple2 (tuple2 b1 d1) b2 (t2tb692 a2) x) p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 d (tuple21 (tuple21 b c) (tuple21 d e)))))
  (w (set d)) (x (tuple21 (tuple21 b c) (tuple21 d e))))
  (= (mem49 x
  (tb2t4102
  (image (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) d1 (t2tb4387 p) (t2tb690 w))))
  (exists ((a2 d))
  (and (mem20 a2 w) (mem (tuple2 d1 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)))
  (Tuple2 d1 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (t2tb694 a2)
  (t2tb4104 x)) (t2tb4387 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 d (tuple21 a (tuple21 d e))))) (w (set d))
  (x (tuple21 a (tuple21 d e))))
  (= (mem48 x
  (tb2t4103 (image (tuple2 a1 (tuple2 d1 e1)) d1 (t2tb4389 p) (t2tb690 w))))
  (exists ((a2 d))
  (and (mem20 a2 w) (mem (tuple2 d1 (tuple2 a1 (tuple2 d1 e1)))
  (Tuple2 d1 (tuple2 a1 (tuple2 d1 e1)) (t2tb694 a2) (t2tb4105 x))
  (t2tb4389 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 d (set (tuple21 c e))))) (w (set d))
  (x (set (tuple21 c e))))
  (= (mem47 x
  (tb2t3854 (image (set1 (tuple2 c1 e1)) d1 (t2tb4392 p) (t2tb690 w))))
  (exists ((a2 d))
  (and (mem20 a2 w) (mem (tuple2 d1 (set1 (tuple2 c1 e1)))
  (Tuple2 d1 (set1 (tuple2 c1 e1)) (t2tb694 a2) (t2tb3478 x)) (t2tb4392 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 d (tuple21 c e)))) (w (set d)) (x (tuple21 c e)))
  (= (mem46 x (tb2t3478 (image (tuple2 c1 e1) d1 (t2tb4393 p) (t2tb690 w))))
  (exists ((a2 d))
  (and (mem20 a2 w) (mem (tuple2 d1 (tuple2 c1 e1))
  (Tuple2 d1 (tuple2 c1 e1) (t2tb694 a2) (t2tb3479 x)) (t2tb4393 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 d (tuple21 a e)))) (w (set d)) (x (tuple21 a e)))
  (= (mem44 x (tb2t2943 (image (tuple2 a1 e1) d1 (t2tb3442 p) (t2tb690 w))))
  (exists ((a2 d))
  (and (mem20 a2 w) (mem (tuple2 d1 (tuple2 a1 e1))
  (Tuple2 d1 (tuple2 a1 e1) (t2tb694 a2) (t2tb2949 x)) (t2tb3442 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 d e))) (w (set d)) (x e))
  (= (mem36 x (tb2t2947 (image e1 d1 (t2tb3456 p) (t2tb690 w))))
  (exists ((a2 d))
  (and (mem20 a2 w) (mem (tuple2 d1 e1)
  (Tuple2 d1 e1 (t2tb694 a2) (t2tb2955 x)) (t2tb3456 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 d (tuple21 a d)))) (w (set d)) (x (tuple21 a d)))
  (= (mem32 x (tb2t903 (image (tuple2 a1 d1) d1 (t2tb4395 p) (t2tb690 w))))
  (exists ((a2 d))
  (and (mem20 a2 w) (mem (tuple2 d1 (tuple2 a1 d1))
  (Tuple2 d1 (tuple2 a1 d1) (t2tb694 a2) (t2tb904 x)) (t2tb4395 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 d (set (tuple21 b d))))) (w (set d))
  (x (set (tuple21 b d))))
  (= (mem33 x
  (tb2t906 (image (set1 (tuple2 b1 d1)) d1 (t2tb4397 p) (t2tb690 w))))
  (exists ((a2 d))
  (and (mem20 a2 w) (mem (tuple2 d1 (set1 (tuple2 b1 d1)))
  (Tuple2 d1 (set1 (tuple2 b1 d1)) (t2tb694 a2) (t2tb687 x)) (t2tb4397 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 d (tuple21 b d)))) (w (set d)) (x (tuple21 b d)))
  (= (mem23 x (tb2t687 (image (tuple2 b1 d1) d1 (t2tb4399 p) (t2tb690 w))))
  (exists ((a2 d))
  (and (mem20 a2 w) (mem (tuple2 d1 (tuple2 b1 d1))
  (Tuple2 d1 (tuple2 b1 d1) (t2tb694 a2) (t2tb692 x)) (t2tb4399 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 d d))) (w (set d)) (x d))
  (= (mem20 x (tb2t690 (image d1 d1 (t2tb825 p) (t2tb690 w))))
  (exists ((a2 d))
  (and (mem20 a2 w) (mem (tuple2 d1 d1)
  (Tuple2 d1 d1 (t2tb694 a2) (t2tb694 x)) (t2tb825 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 d (tuple21 a (tuple21 b c))))) (w (set d))
  (x (tuple21 a (tuple21 b c))))
  (= (mem14 x
  (tb2t261 (image (tuple2 a1 (tuple2 b1 c1)) d1 (t2tb4400 p) (t2tb690 w))))
  (exists ((a2 d))
  (and (mem20 a2 w) (mem (tuple2 d1 (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 d1 (tuple2 a1 (tuple2 b1 c1)) (t2tb694 a2) (t2tb260 x))
  (t2tb4400 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 d (set (tuple21 a c))))) (w (set d))
  (x (set (tuple21 a c))))
  (= (mem11 x
  (tb2t128 (image (set1 (tuple2 a1 c1)) d1 (t2tb4402 p) (t2tb690 w))))
  (exists ((a2 d))
  (and (mem20 a2 w) (mem (tuple2 d1 (set1 (tuple2 a1 c1)))
  (Tuple2 d1 (set1 (tuple2 a1 c1)) (t2tb694 a2) (t2tb129 x)) (t2tb4402 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 d (tuple21 a c)))) (w (set d)) (x (tuple21 a c)))
  (= (mem10 x (tb2t129 (image (tuple2 a1 c1) d1 (t2tb4404 p) (t2tb690 w))))
  (exists ((a2 d))
  (and (mem20 a2 w) (mem (tuple2 d1 (tuple2 a1 c1))
  (Tuple2 d1 (tuple2 a1 c1) (t2tb694 a2) (t2tb133 x)) (t2tb4404 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 d c))) (w (set d)) (x c))
  (= (mem7 x (tb2t132 (image c1 d1 (t2tb829 p) (t2tb690 w))))
  (exists ((a2 d))
  (and (mem20 a2 w) (mem (tuple2 d1 c1)
  (Tuple2 d1 c1 (t2tb694 a2) (t2tb135 x)) (t2tb829 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 d (set (tuple21 a b))))) (w (set d))
  (x (set (tuple21 a b))))
  (= (mem4 x
  (tb2t10 (image (set1 (tuple2 a1 b1)) d1 (t2tb831 p) (t2tb690 w))))
  (exists ((a2 d))
  (and (mem20 a2 w) (mem (tuple2 d1 (set1 (tuple2 a1 b1)))
  (Tuple2 d1 (set1 (tuple2 a1 b1)) (t2tb694 a2) (t2tb11 x)) (t2tb831 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 d (tuple21 a b)))) (w (set d)) (x (tuple21 a b)))
  (= (mem3 x (tb2t11 (image (tuple2 a1 b1) d1 (t2tb833 p) (t2tb690 w))))
  (exists ((a2 d))
  (and (mem20 a2 w) (mem (tuple2 d1 (tuple2 a1 b1))
  (Tuple2 d1 (tuple2 a1 b1) (t2tb694 a2) (t2tb13 x)) (t2tb833 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 d b))) (w (set d)) (x b))
  (= (mem2 x (tb2t12 (image b1 d1 (t2tb835 p) (t2tb690 w))))
  (exists ((a2 d))
  (and (mem20 a2 w) (mem (tuple2 d1 b1)
  (Tuple2 d1 b1 (t2tb694 a2) (t2tb14 x)) (t2tb835 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 d a))) (w (set d)) (x a))
  (= (mem1 x (tb2t1 (image a1 d1 (t2tb837 p) (t2tb690 w))))
  (exists ((a2 d))
  (and (mem20 a2 w) (mem (tuple2 d1 a1) (Tuple2 d1 a1 (t2tb694 a2) (t2tb2 x))
  (t2tb837 p)))))))

;; mem_image
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (w (set d)) (x uni))
  (= (mem b2 x (image b2 d1 p (t2tb690 w)))
  (exists ((a2 d))
  (and (mem20 a2 w) (mem (tuple2 d1 b2) (Tuple2 d1 b2 (t2tb694 a2) x) p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a (tuple21 b c)) (tuple21 (tuple21 b c)
  (tuple21 d e))))) (w (set (tuple21 a (tuple21 b c))))
  (x (tuple21 (tuple21 b c) (tuple21 d e))))
  (= (mem49 x
  (tb2t4102
  (image (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (tuple2 a1 (tuple2 b1 c1))
  (t2tb4405 p) (t2tb261 w))))
  (exists ((a2 (tuple21 a (tuple21 b c))))
  (and (mem14 a2 w) (mem
  (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)))
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1))
  (t2tb260 a2) (t2tb4104 x)) (t2tb4405 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a (tuple21 b c)) (tuple21 a (tuple21 d
  e))))) (w (set (tuple21 a (tuple21 b c)))) (x (tuple21 a (tuple21 d e))))
  (= (mem48 x
  (tb2t4103
  (image (tuple2 a1 (tuple2 d1 e1)) (tuple2 a1 (tuple2 b1 c1)) (t2tb4408 p)
  (t2tb261 w))))
  (exists ((a2 (tuple21 a (tuple21 b c))))
  (and (mem14 a2 w) (mem
  (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 (tuple2 d1 e1)))
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 (tuple2 d1 e1)) (t2tb260 a2)
  (t2tb4105 x)) (t2tb4408 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a (tuple21 b c)) (set (tuple21 c e)))))
  (w (set (tuple21 a (tuple21 b c)))) (x (set (tuple21 c e))))
  (= (mem47 x
  (tb2t3854
  (image (set1 (tuple2 c1 e1)) (tuple2 a1 (tuple2 b1 c1)) (t2tb4409 p)
  (t2tb261 w))))
  (exists ((a2 (tuple21 a (tuple21 b c))))
  (and (mem14 a2 w) (mem
  (tuple2 (tuple2 a1 (tuple2 b1 c1)) (set1 (tuple2 c1 e1)))
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) (set1 (tuple2 c1 e1)) (t2tb260 a2)
  (t2tb3478 x)) (t2tb4409 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a (tuple21 b c)) (tuple21 c e))))
  (w (set (tuple21 a (tuple21 b c)))) (x (tuple21 c e)))
  (= (mem46 x
  (tb2t3478
  (image (tuple2 c1 e1) (tuple2 a1 (tuple2 b1 c1)) (t2tb4411 p) (t2tb261 w))))
  (exists ((a2 (tuple21 a (tuple21 b c))))
  (and (mem14 a2 w) (mem (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 c1 e1))
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 c1 e1) (t2tb260 a2)
  (t2tb3479 x)) (t2tb4411 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a (tuple21 b c)) (tuple21 a e))))
  (w (set (tuple21 a (tuple21 b c)))) (x (tuple21 a e)))
  (= (mem44 x
  (tb2t2943
  (image (tuple2 a1 e1) (tuple2 a1 (tuple2 b1 c1)) (t2tb4413 p) (t2tb261 w))))
  (exists ((a2 (tuple21 a (tuple21 b c))))
  (and (mem14 a2 w) (mem (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 e1))
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 e1) (t2tb260 a2)
  (t2tb2949 x)) (t2tb4413 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a (tuple21 b c)) e))) (w (set (tuple21 a
  (tuple21 b c)))) (x e))
  (= (mem36 x
  (tb2t2947 (image e1 (tuple2 a1 (tuple2 b1 c1)) (t2tb4415 p) (t2tb261 w))))
  (exists ((a2 (tuple21 a (tuple21 b c))))
  (and (mem14 a2 w) (mem (tuple2 (tuple2 a1 (tuple2 b1 c1)) e1)
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) e1 (t2tb260 a2) (t2tb2955 x))
  (t2tb4415 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a (tuple21 b c)) (tuple21 a d))))
  (w (set (tuple21 a (tuple21 b c)))) (x (tuple21 a d)))
  (= (mem32 x
  (tb2t903
  (image (tuple2 a1 d1) (tuple2 a1 (tuple2 b1 c1)) (t2tb4417 p) (t2tb261 w))))
  (exists ((a2 (tuple21 a (tuple21 b c))))
  (and (mem14 a2 w) (mem (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 d1))
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 d1) (t2tb260 a2) (t2tb904 x))
  (t2tb4417 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a (tuple21 b c)) (set (tuple21 b d)))))
  (w (set (tuple21 a (tuple21 b c)))) (x (set (tuple21 b d))))
  (= (mem33 x
  (tb2t906
  (image (set1 (tuple2 b1 d1)) (tuple2 a1 (tuple2 b1 c1)) (t2tb4419 p)
  (t2tb261 w))))
  (exists ((a2 (tuple21 a (tuple21 b c))))
  (and (mem14 a2 w) (mem
  (tuple2 (tuple2 a1 (tuple2 b1 c1)) (set1 (tuple2 b1 d1)))
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) (set1 (tuple2 b1 d1)) (t2tb260 a2)
  (t2tb687 x)) (t2tb4419 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a (tuple21 b c)) (tuple21 b d))))
  (w (set (tuple21 a (tuple21 b c)))) (x (tuple21 b d)))
  (= (mem23 x
  (tb2t687
  (image (tuple2 b1 d1) (tuple2 a1 (tuple2 b1 c1)) (t2tb4421 p) (t2tb261 w))))
  (exists ((a2 (tuple21 a (tuple21 b c))))
  (and (mem14 a2 w) (mem (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 b1 d1))
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 b1 d1) (t2tb260 a2) (t2tb692 x))
  (t2tb4421 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a (tuple21 b c)) d))) (w (set (tuple21 a
  (tuple21 b c)))) (x d))
  (= (mem20 x
  (tb2t690 (image d1 (tuple2 a1 (tuple2 b1 c1)) (t2tb4424 p) (t2tb261 w))))
  (exists ((a2 (tuple21 a (tuple21 b c))))
  (and (mem14 a2 w) (mem (tuple2 (tuple2 a1 (tuple2 b1 c1)) d1)
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) d1 (t2tb260 a2) (t2tb694 x))
  (t2tb4424 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a (tuple21 b c)) (tuple21 a (tuple21 b
  c))))) (w (set (tuple21 a (tuple21 b c)))) (x (tuple21 a (tuple21 b c))))
  (= (mem14 x
  (tb2t261
  (image (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 (tuple2 b1 c1)) (t2tb4425 p)
  (t2tb261 w))))
  (exists ((a2 (tuple21 a (tuple21 b c))))
  (and (mem14 a2 w) (mem
  (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 (tuple2 b1 c1)) (t2tb260 a2)
  (t2tb260 x)) (t2tb4425 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a (tuple21 b c)) (set (tuple21 a c)))))
  (w (set (tuple21 a (tuple21 b c)))) (x (set (tuple21 a c))))
  (= (mem11 x
  (tb2t128
  (image (set1 (tuple2 a1 c1)) (tuple2 a1 (tuple2 b1 c1)) (t2tb4427 p)
  (t2tb261 w))))
  (exists ((a2 (tuple21 a (tuple21 b c))))
  (and (mem14 a2 w) (mem
  (tuple2 (tuple2 a1 (tuple2 b1 c1)) (set1 (tuple2 a1 c1)))
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) (set1 (tuple2 a1 c1)) (t2tb260 a2)
  (t2tb129 x)) (t2tb4427 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a (tuple21 b c)) (tuple21 a c))))
  (w (set (tuple21 a (tuple21 b c)))) (x (tuple21 a c)))
  (= (mem10 x
  (tb2t129
  (image (tuple2 a1 c1) (tuple2 a1 (tuple2 b1 c1)) (t2tb4429 p) (t2tb261 w))))
  (exists ((a2 (tuple21 a (tuple21 b c))))
  (and (mem14 a2 w) (mem (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 c1))
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 c1) (t2tb260 a2) (t2tb133 x))
  (t2tb4429 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a (tuple21 b c)) c))) (w (set (tuple21 a
  (tuple21 b c)))) (x c))
  (= (mem7 x
  (tb2t132 (image c1 (tuple2 a1 (tuple2 b1 c1)) (t2tb4431 p) (t2tb261 w))))
  (exists ((a2 (tuple21 a (tuple21 b c))))
  (and (mem14 a2 w) (mem (tuple2 (tuple2 a1 (tuple2 b1 c1)) c1)
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) c1 (t2tb260 a2) (t2tb135 x))
  (t2tb4431 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a (tuple21 b c)) (set (tuple21 a b)))))
  (w (set (tuple21 a (tuple21 b c)))) (x (set (tuple21 a b))))
  (= (mem4 x
  (tb2t10
  (image (set1 (tuple2 a1 b1)) (tuple2 a1 (tuple2 b1 c1)) (t2tb4433 p)
  (t2tb261 w))))
  (exists ((a2 (tuple21 a (tuple21 b c))))
  (and (mem14 a2 w) (mem
  (tuple2 (tuple2 a1 (tuple2 b1 c1)) (set1 (tuple2 a1 b1)))
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) (set1 (tuple2 a1 b1)) (t2tb260 a2)
  (t2tb11 x)) (t2tb4433 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a (tuple21 b c)) (tuple21 a b))))
  (w (set (tuple21 a (tuple21 b c)))) (x (tuple21 a b)))
  (= (mem3 x
  (tb2t11
  (image (tuple2 a1 b1) (tuple2 a1 (tuple2 b1 c1)) (t2tb4435 p) (t2tb261 w))))
  (exists ((a2 (tuple21 a (tuple21 b c))))
  (and (mem14 a2 w) (mem (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 b1))
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 b1) (t2tb260 a2) (t2tb13 x))
  (t2tb4435 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a (tuple21 b c)) b))) (w (set (tuple21 a
  (tuple21 b c)))) (x b))
  (= (mem2 x
  (tb2t12 (image b1 (tuple2 a1 (tuple2 b1 c1)) (t2tb4437 p) (t2tb261 w))))
  (exists ((a2 (tuple21 a (tuple21 b c))))
  (and (mem14 a2 w) (mem (tuple2 (tuple2 a1 (tuple2 b1 c1)) b1)
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) b1 (t2tb260 a2) (t2tb14 x))
  (t2tb4437 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a (tuple21 b c)) a))) (w (set (tuple21 a
  (tuple21 b c)))) (x a))
  (= (mem1 x
  (tb2t1 (image a1 (tuple2 a1 (tuple2 b1 c1)) (t2tb4440 p) (t2tb261 w))))
  (exists ((a2 (tuple21 a (tuple21 b c))))
  (and (mem14 a2 w) (mem (tuple2 (tuple2 a1 (tuple2 b1 c1)) a1)
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) a1 (t2tb260 a2) (t2tb2 x))
  (t2tb4440 p)))))))

;; mem_image
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (w (set (tuple21 a (tuple21 b c)))) (x uni))
  (= (mem b2 x (image b2 (tuple2 a1 (tuple2 b1 c1)) p (t2tb261 w)))
  (exists ((a2 (tuple21 a (tuple21 b c))))
  (and (mem14 a2 w) (mem (tuple2 (tuple2 a1 (tuple2 b1 c1)) b2)
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) b2 (t2tb260 a2) x) p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a c)) (tuple21 (tuple21 b c)
  (tuple21 d e))))) (w (set (set (tuple21 a c)))) (x (tuple21 (tuple21 b c)
  (tuple21 d e))))
  (= (mem49 x
  (tb2t4102
  (image (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (set1 (tuple2 a1 c1))
  (t2tb4441 p) (t2tb128 w))))
  (exists ((a2 (set (tuple21 a c))))
  (and (mem11 a2 w) (mem
  (tuple2 (set1 (tuple2 a1 c1)) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)))
  (Tuple2 (set1 (tuple2 a1 c1)) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1))
  (t2tb129 a2) (t2tb4104 x)) (t2tb4441 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a c)) (tuple21 a (tuple21 d e)))))
  (w (set (set (tuple21 a c)))) (x (tuple21 a (tuple21 d e))))
  (= (mem48 x
  (tb2t4103
  (image (tuple2 a1 (tuple2 d1 e1)) (set1 (tuple2 a1 c1)) (t2tb4443 p)
  (t2tb128 w))))
  (exists ((a2 (set (tuple21 a c))))
  (and (mem11 a2 w) (mem
  (tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 (tuple2 d1 e1)))
  (Tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 (tuple2 d1 e1)) (t2tb129 a2)
  (t2tb4105 x)) (t2tb4443 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a c)) (set (tuple21 c e)))))
  (w (set (set (tuple21 a c)))) (x (set (tuple21 c e))))
  (= (mem47 x
  (tb2t3854
  (image (set1 (tuple2 c1 e1)) (set1 (tuple2 a1 c1)) (t2tb4445 p)
  (t2tb128 w))))
  (exists ((a2 (set (tuple21 a c))))
  (and (mem11 a2 w) (mem (tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 c1 e1)))
  (Tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 c1 e1)) (t2tb129 a2)
  (t2tb3478 x)) (t2tb4445 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a c)) (tuple21 c e))))
  (w (set (set (tuple21 a c)))) (x (tuple21 c e)))
  (= (mem46 x
  (tb2t3478
  (image (tuple2 c1 e1) (set1 (tuple2 a1 c1)) (t2tb4447 p) (t2tb128 w))))
  (exists ((a2 (set (tuple21 a c))))
  (and (mem11 a2 w) (mem (tuple2 (set1 (tuple2 a1 c1)) (tuple2 c1 e1))
  (Tuple2 (set1 (tuple2 a1 c1)) (tuple2 c1 e1) (t2tb129 a2) (t2tb3479 x))
  (t2tb4447 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a c)) (tuple21 a e))))
  (w (set (set (tuple21 a c)))) (x (tuple21 a e)))
  (= (mem44 x
  (tb2t2943
  (image (tuple2 a1 e1) (set1 (tuple2 a1 c1)) (t2tb4449 p) (t2tb128 w))))
  (exists ((a2 (set (tuple21 a c))))
  (and (mem11 a2 w) (mem (tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 e1))
  (Tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 e1) (t2tb129 a2) (t2tb2949 x))
  (t2tb4449 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a c)) e))) (w (set (set (tuple21 a
  c)))) (x e))
  (= (mem36 x
  (tb2t2947 (image e1 (set1 (tuple2 a1 c1)) (t2tb4451 p) (t2tb128 w))))
  (exists ((a2 (set (tuple21 a c))))
  (and (mem11 a2 w) (mem (tuple2 (set1 (tuple2 a1 c1)) e1)
  (Tuple2 (set1 (tuple2 a1 c1)) e1 (t2tb129 a2) (t2tb2955 x)) (t2tb4451 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a c)) (tuple21 a d))))
  (w (set (set (tuple21 a c)))) (x (tuple21 a d)))
  (= (mem32 x
  (tb2t903
  (image (tuple2 a1 d1) (set1 (tuple2 a1 c1)) (t2tb4454 p) (t2tb128 w))))
  (exists ((a2 (set (tuple21 a c))))
  (and (mem11 a2 w) (mem (tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 d1))
  (Tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 d1) (t2tb129 a2) (t2tb904 x))
  (t2tb4454 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a c)) (set (tuple21 b d)))))
  (w (set (set (tuple21 a c)))) (x (set (tuple21 b d))))
  (= (mem33 x
  (tb2t906
  (image (set1 (tuple2 b1 d1)) (set1 (tuple2 a1 c1)) (t2tb4455 p)
  (t2tb128 w))))
  (exists ((a2 (set (tuple21 a c))))
  (and (mem11 a2 w) (mem (tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 b1 d1)))
  (Tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 b1 d1)) (t2tb129 a2)
  (t2tb687 x)) (t2tb4455 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a c)) (tuple21 b d))))
  (w (set (set (tuple21 a c)))) (x (tuple21 b d)))
  (= (mem23 x
  (tb2t687
  (image (tuple2 b1 d1) (set1 (tuple2 a1 c1)) (t2tb4457 p) (t2tb128 w))))
  (exists ((a2 (set (tuple21 a c))))
  (and (mem11 a2 w) (mem (tuple2 (set1 (tuple2 a1 c1)) (tuple2 b1 d1))
  (Tuple2 (set1 (tuple2 a1 c1)) (tuple2 b1 d1) (t2tb129 a2) (t2tb692 x))
  (t2tb4457 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a c)) d))) (w (set (set (tuple21 a
  c)))) (x d))
  (= (mem20 x
  (tb2t690 (image d1 (set1 (tuple2 a1 c1)) (t2tb4459 p) (t2tb128 w))))
  (exists ((a2 (set (tuple21 a c))))
  (and (mem11 a2 w) (mem (tuple2 (set1 (tuple2 a1 c1)) d1)
  (Tuple2 (set1 (tuple2 a1 c1)) d1 (t2tb129 a2) (t2tb694 x)) (t2tb4459 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a c)) (tuple21 a (tuple21 b c)))))
  (w (set (set (tuple21 a c)))) (x (tuple21 a (tuple21 b c))))
  (= (mem14 x
  (tb2t261
  (image (tuple2 a1 (tuple2 b1 c1)) (set1 (tuple2 a1 c1)) (t2tb4461 p)
  (t2tb128 w))))
  (exists ((a2 (set (tuple21 a c))))
  (and (mem11 a2 w) (mem
  (tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 (tuple2 b1 c1)) (t2tb129 a2)
  (t2tb260 x)) (t2tb4461 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a c)) (set (tuple21 a c)))))
  (w (set (set (tuple21 a c)))) (x (set (tuple21 a c))))
  (= (mem11 x
  (tb2t128
  (image (set1 (tuple2 a1 c1)) (set1 (tuple2 a1 c1)) (t2tb4463 p)
  (t2tb128 w))))
  (exists ((a2 (set (tuple21 a c))))
  (and (mem11 a2 w) (mem (tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 a1 c1)))
  (Tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 a1 c1)) (t2tb129 a2)
  (t2tb129 x)) (t2tb4463 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a c)) (tuple21 a c))))
  (w (set (set (tuple21 a c)))) (x (tuple21 a c)))
  (= (mem10 x
  (tb2t129
  (image (tuple2 a1 c1) (set1 (tuple2 a1 c1)) (t2tb4465 p) (t2tb128 w))))
  (exists ((a2 (set (tuple21 a c))))
  (and (mem11 a2 w) (mem (tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 c1))
  (Tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 c1) (t2tb129 a2) (t2tb133 x))
  (t2tb4465 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a c)) c))) (w (set (set (tuple21 a
  c)))) (x c))
  (= (mem7 x
  (tb2t132 (image c1 (set1 (tuple2 a1 c1)) (t2tb4467 p) (t2tb128 w))))
  (exists ((a2 (set (tuple21 a c))))
  (and (mem11 a2 w) (mem (tuple2 (set1 (tuple2 a1 c1)) c1)
  (Tuple2 (set1 (tuple2 a1 c1)) c1 (t2tb129 a2) (t2tb135 x)) (t2tb4467 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a c)) (set (tuple21 a b)))))
  (w (set (set (tuple21 a c)))) (x (set (tuple21 a b))))
  (= (mem4 x
  (tb2t10
  (image (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 c1)) (t2tb4470 p)
  (t2tb128 w))))
  (exists ((a2 (set (tuple21 a c))))
  (and (mem11 a2 w) (mem (tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 a1 b1)))
  (Tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 a1 b1)) (t2tb129 a2)
  (t2tb11 x)) (t2tb4470 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a c)) (tuple21 a b))))
  (w (set (set (tuple21 a c)))) (x (tuple21 a b)))
  (= (mem3 x
  (tb2t11
  (image (tuple2 a1 b1) (set1 (tuple2 a1 c1)) (t2tb4471 p) (t2tb128 w))))
  (exists ((a2 (set (tuple21 a c))))
  (and (mem11 a2 w) (mem (tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 b1))
  (Tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 b1) (t2tb129 a2) (t2tb13 x))
  (t2tb4471 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a c)) b))) (w (set (set (tuple21 a
  c)))) (x b))
  (= (mem2 x
  (tb2t12 (image b1 (set1 (tuple2 a1 c1)) (t2tb4473 p) (t2tb128 w))))
  (exists ((a2 (set (tuple21 a c))))
  (and (mem11 a2 w) (mem (tuple2 (set1 (tuple2 a1 c1)) b1)
  (Tuple2 (set1 (tuple2 a1 c1)) b1 (t2tb129 a2) (t2tb14 x)) (t2tb4473 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a c)) a))) (w (set (set (tuple21 a
  c)))) (x a))
  (= (mem1 x
  (tb2t1 (image a1 (set1 (tuple2 a1 c1)) (t2tb4475 p) (t2tb128 w))))
  (exists ((a2 (set (tuple21 a c))))
  (and (mem11 a2 w) (mem (tuple2 (set1 (tuple2 a1 c1)) a1)
  (Tuple2 (set1 (tuple2 a1 c1)) a1 (t2tb129 a2) (t2tb2 x)) (t2tb4475 p)))))))

;; mem_image
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (w (set (set (tuple21 a c)))) (x uni))
  (= (mem b2 x (image b2 (set1 (tuple2 a1 c1)) p (t2tb128 w)))
  (exists ((a2 (set (tuple21 a c))))
  (and (mem11 a2 w) (mem (tuple2 (set1 (tuple2 a1 c1)) b2)
  (Tuple2 (set1 (tuple2 a1 c1)) b2 (t2tb129 a2) x) p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a c) (tuple21 (tuple21 b c) (tuple21 d
  e))))) (w (set (tuple21 a c))) (x (tuple21 (tuple21 b c) (tuple21 d e))))
  (= (mem49 x
  (tb2t4102
  (image (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (tuple2 a1 c1) (t2tb4477 p)
  (t2tb129 w))))
  (exists ((a2 (tuple21 a c)))
  (and (mem10 a2 w) (mem
  (tuple2 (tuple2 a1 c1) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)))
  (Tuple2 (tuple2 a1 c1) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (t2tb133 a2)
  (t2tb4104 x)) (t2tb4477 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a c) (tuple21 a (tuple21 d e)))))
  (w (set (tuple21 a c))) (x (tuple21 a (tuple21 d e))))
  (= (mem48 x
  (tb2t4103
  (image (tuple2 a1 (tuple2 d1 e1)) (tuple2 a1 c1) (t2tb4479 p) (t2tb129 w))))
  (exists ((a2 (tuple21 a c)))
  (and (mem10 a2 w) (mem (tuple2 (tuple2 a1 c1) (tuple2 a1 (tuple2 d1 e1)))
  (Tuple2 (tuple2 a1 c1) (tuple2 a1 (tuple2 d1 e1)) (t2tb133 a2)
  (t2tb4105 x)) (t2tb4479 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a c) (set (tuple21 c e)))))
  (w (set (tuple21 a c))) (x (set (tuple21 c e))))
  (= (mem47 x
  (tb2t3854
  (image (set1 (tuple2 c1 e1)) (tuple2 a1 c1) (t2tb4481 p) (t2tb129 w))))
  (exists ((a2 (tuple21 a c)))
  (and (mem10 a2 w) (mem (tuple2 (tuple2 a1 c1) (set1 (tuple2 c1 e1)))
  (Tuple2 (tuple2 a1 c1) (set1 (tuple2 c1 e1)) (t2tb133 a2) (t2tb3478 x))
  (t2tb4481 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a c) (tuple21 c e)))) (w (set (tuple21 a
  c))) (x (tuple21 c e)))
  (= (mem46 x
  (tb2t3478 (image (tuple2 c1 e1) (tuple2 a1 c1) (t2tb4484 p) (t2tb129 w))))
  (exists ((a2 (tuple21 a c)))
  (and (mem10 a2 w) (mem (tuple2 (tuple2 a1 c1) (tuple2 c1 e1))
  (Tuple2 (tuple2 a1 c1) (tuple2 c1 e1) (t2tb133 a2) (t2tb3479 x))
  (t2tb4484 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a c) (tuple21 a e)))) (w (set (tuple21 a
  c))) (x (tuple21 a e)))
  (= (mem44 x
  (tb2t2943 (image (tuple2 a1 e1) (tuple2 a1 c1) (t2tb4485 p) (t2tb129 w))))
  (exists ((a2 (tuple21 a c)))
  (and (mem10 a2 w) (mem (tuple2 (tuple2 a1 c1) (tuple2 a1 e1))
  (Tuple2 (tuple2 a1 c1) (tuple2 a1 e1) (t2tb133 a2) (t2tb2949 x))
  (t2tb4485 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a c) e))) (w (set (tuple21 a c))) (x e))
  (= (mem36 x (tb2t2947 (image e1 (tuple2 a1 c1) (t2tb3925 p) (t2tb129 w))))
  (exists ((a2 (tuple21 a c)))
  (and (mem10 a2 w) (mem (tuple2 (tuple2 a1 c1) e1)
  (Tuple2 (tuple2 a1 c1) e1 (t2tb133 a2) (t2tb2955 x)) (t2tb3925 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a c) (tuple21 a d)))) (w (set (tuple21 a
  c))) (x (tuple21 a d)))
  (= (mem32 x
  (tb2t903 (image (tuple2 a1 d1) (tuple2 a1 c1) (t2tb4487 p) (t2tb129 w))))
  (exists ((a2 (tuple21 a c)))
  (and (mem10 a2 w) (mem (tuple2 (tuple2 a1 c1) (tuple2 a1 d1))
  (Tuple2 (tuple2 a1 c1) (tuple2 a1 d1) (t2tb133 a2) (t2tb904 x))
  (t2tb4487 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a c) (set (tuple21 b d)))))
  (w (set (tuple21 a c))) (x (set (tuple21 b d))))
  (= (mem33 x
  (tb2t906
  (image (set1 (tuple2 b1 d1)) (tuple2 a1 c1) (t2tb4489 p) (t2tb129 w))))
  (exists ((a2 (tuple21 a c)))
  (and (mem10 a2 w) (mem (tuple2 (tuple2 a1 c1) (set1 (tuple2 b1 d1)))
  (Tuple2 (tuple2 a1 c1) (set1 (tuple2 b1 d1)) (t2tb133 a2) (t2tb687 x))
  (t2tb4489 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a c) (tuple21 b d)))) (w (set (tuple21 a
  c))) (x (tuple21 b d)))
  (= (mem23 x
  (tb2t687 (image (tuple2 b1 d1) (tuple2 a1 c1) (t2tb686 p) (t2tb129 w))))
  (exists ((a2 (tuple21 a c)))
  (and (mem10 a2 w) (mem (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))
  (Tuple2 (tuple2 a1 c1) (tuple2 b1 d1) (t2tb133 a2) (t2tb692 x))
  (t2tb686 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a c) d))) (w (set (tuple21 a c))) (x d))
  (= (mem20 x (tb2t690 (image d1 (tuple2 a1 c1) (t2tb847 p) (t2tb129 w))))
  (exists ((a2 (tuple21 a c)))
  (and (mem10 a2 w) (mem (tuple2 (tuple2 a1 c1) d1)
  (Tuple2 (tuple2 a1 c1) d1 (t2tb133 a2) (t2tb694 x)) (t2tb847 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a c) (tuple21 a (tuple21 b c)))))
  (w (set (tuple21 a c))) (x (tuple21 a (tuple21 b c))))
  (= (mem14 x
  (tb2t261
  (image (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 c1) (t2tb4491 p) (t2tb129 w))))
  (exists ((a2 (tuple21 a c)))
  (and (mem10 a2 w) (mem (tuple2 (tuple2 a1 c1) (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 (tuple2 a1 c1) (tuple2 a1 (tuple2 b1 c1)) (t2tb133 a2) (t2tb260 x))
  (t2tb4491 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a c) (set (tuple21 a c)))))
  (w (set (tuple21 a c))) (x (set (tuple21 a c))))
  (= (mem11 x
  (tb2t128
  (image (set1 (tuple2 a1 c1)) (tuple2 a1 c1) (t2tb4493 p) (t2tb129 w))))
  (exists ((a2 (tuple21 a c)))
  (and (mem10 a2 w) (mem (tuple2 (tuple2 a1 c1) (set1 (tuple2 a1 c1)))
  (Tuple2 (tuple2 a1 c1) (set1 (tuple2 a1 c1)) (t2tb133 a2) (t2tb129 x))
  (t2tb4493 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a c) (tuple21 a c)))) (w (set (tuple21 a
  c))) (x (tuple21 a c)))
  (= (mem10 x
  (tb2t129 (image (tuple2 a1 c1) (tuple2 a1 c1) (t2tb157 p) (t2tb129 w))))
  (exists ((a2 (tuple21 a c)))
  (and (mem10 a2 w) (mem (tuple2 (tuple2 a1 c1) (tuple2 a1 c1))
  (Tuple2 (tuple2 a1 c1) (tuple2 a1 c1) (t2tb133 a2) (t2tb133 x))
  (t2tb157 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a c) c))) (w (set (tuple21 a c))) (x c))
  (= (mem7 x (tb2t132 (image c1 (tuple2 a1 c1) (t2tb162 p) (t2tb129 w))))
  (exists ((a2 (tuple21 a c)))
  (and (mem10 a2 w) (mem (tuple2 (tuple2 a1 c1) c1)
  (Tuple2 (tuple2 a1 c1) c1 (t2tb133 a2) (t2tb135 x)) (t2tb162 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a c) (set (tuple21 a b)))))
  (w (set (tuple21 a c))) (x (set (tuple21 a b))))
  (= (mem4 x
  (tb2t10
  (image (set1 (tuple2 a1 b1)) (tuple2 a1 c1) (t2tb164 p) (t2tb129 w))))
  (exists ((a2 (tuple21 a c)))
  (and (mem10 a2 w) (mem (tuple2 (tuple2 a1 c1) (set1 (tuple2 a1 b1)))
  (Tuple2 (tuple2 a1 c1) (set1 (tuple2 a1 b1)) (t2tb133 a2) (t2tb11 x))
  (t2tb164 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a c) (tuple21 a b)))) (w (set (tuple21 a
  c))) (x (tuple21 a b)))
  (= (mem3 x
  (tb2t11 (image (tuple2 a1 b1) (tuple2 a1 c1) (t2tb166 p) (t2tb129 w))))
  (exists ((a2 (tuple21 a c)))
  (and (mem10 a2 w) (mem (tuple2 (tuple2 a1 c1) (tuple2 a1 b1))
  (Tuple2 (tuple2 a1 c1) (tuple2 a1 b1) (t2tb133 a2) (t2tb13 x))
  (t2tb166 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a c) b))) (w (set (tuple21 a c))) (x b))
  (= (mem2 x (tb2t12 (image b1 (tuple2 a1 c1) (t2tb168 p) (t2tb129 w))))
  (exists ((a2 (tuple21 a c)))
  (and (mem10 a2 w) (mem (tuple2 (tuple2 a1 c1) b1)
  (Tuple2 (tuple2 a1 c1) b1 (t2tb133 a2) (t2tb14 x)) (t2tb168 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a c) a))) (w (set (tuple21 a c))) (x a))
  (= (mem1 x (tb2t1 (image a1 (tuple2 a1 c1) (t2tb170 p) (t2tb129 w))))
  (exists ((a2 (tuple21 a c)))
  (and (mem10 a2 w) (mem (tuple2 (tuple2 a1 c1) a1)
  (Tuple2 (tuple2 a1 c1) a1 (t2tb133 a2) (t2tb2 x)) (t2tb170 p)))))))

;; mem_image
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (w (set (tuple21 a c))) (x uni))
  (= (mem b2 x (image b2 (tuple2 a1 c1) p (t2tb129 w)))
  (exists ((a2 (tuple21 a c)))
  (and (mem10 a2 w) (mem (tuple2 (tuple2 a1 c1) b2)
  (Tuple2 (tuple2 a1 c1) b2 (t2tb133 a2) x) p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 b c) (tuple21 d e)))) (w (set (tuple21 b
  c))) (x (tuple21 d e)))
  (= (mem (tuple2 d1 e1) (t2tb3457 x)
  (image (tuple2 d1 e1) (tuple2 b1 c1) (t2tb4102 p) (t2tb131 w)))
  (exists ((a2 (tuple21 b c)))
  (and (mem (tuple2 b1 c1) (t2tb134 a2) (t2tb131 w)) (mem49
  (tb2t4104 (Tuple2 (tuple2 b1 c1) (tuple2 d1 e1) (t2tb134 a2) (t2tb3457 x)))
  p))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 c (tuple21 (tuple21 b c) (tuple21 d e)))))
  (w (set c)) (x (tuple21 (tuple21 b c) (tuple21 d e))))
  (= (mem49 x
  (tb2t4102
  (image (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) c1 (t2tb4495 p) (t2tb132 w))))
  (exists ((a2 c))
  (and (mem7 a2 w) (mem (tuple2 c1 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)))
  (Tuple2 c1 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (t2tb135 a2)
  (t2tb4104 x)) (t2tb4495 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 c (tuple21 a (tuple21 d e))))) (w (set c))
  (x (tuple21 a (tuple21 d e))))
  (= (mem48 x
  (tb2t4103 (image (tuple2 a1 (tuple2 d1 e1)) c1 (t2tb4497 p) (t2tb132 w))))
  (exists ((a2 c))
  (and (mem7 a2 w) (mem (tuple2 c1 (tuple2 a1 (tuple2 d1 e1)))
  (Tuple2 c1 (tuple2 a1 (tuple2 d1 e1)) (t2tb135 a2) (t2tb4105 x))
  (t2tb4497 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 c (set (tuple21 c e))))) (w (set c))
  (x (set (tuple21 c e))))
  (= (mem47 x
  (tb2t3854 (image (set1 (tuple2 c1 e1)) c1 (t2tb4500 p) (t2tb132 w))))
  (exists ((a2 c))
  (and (mem7 a2 w) (mem (tuple2 c1 (set1 (tuple2 c1 e1)))
  (Tuple2 c1 (set1 (tuple2 c1 e1)) (t2tb135 a2) (t2tb3478 x)) (t2tb4500 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 c (tuple21 c e)))) (w (set c)) (x (tuple21 c e)))
  (= (mem46 x (tb2t3478 (image (tuple2 c1 e1) c1 (t2tb4501 p) (t2tb132 w))))
  (exists ((a2 c))
  (and (mem7 a2 w) (mem (tuple2 c1 (tuple2 c1 e1))
  (Tuple2 c1 (tuple2 c1 e1) (t2tb135 a2) (t2tb3479 x)) (t2tb4501 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 c (tuple21 a e)))) (w (set c)) (x (tuple21 a e)))
  (= (mem44 x (tb2t2943 (image (tuple2 a1 e1) c1 (t2tb3464 p) (t2tb132 w))))
  (exists ((a2 c))
  (and (mem7 a2 w) (mem (tuple2 c1 (tuple2 a1 e1))
  (Tuple2 c1 (tuple2 a1 e1) (t2tb135 a2) (t2tb2949 x)) (t2tb3464 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 c e))) (w (set c)) (x e))
  (= (mem36 x (tb2t2947 (image e1 c1 (t2tb3478 p) (t2tb132 w))))
  (exists ((a2 c))
  (and (mem7 a2 w) (mem46 (tb2t3479 (Tuple2 c1 e1 (t2tb135 a2) (t2tb2955 x)))
  p))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 c (tuple21 a d)))) (w (set c)) (x (tuple21 a d)))
  (= (mem32 x (tb2t903 (image (tuple2 a1 d1) c1 (t2tb4503 p) (t2tb132 w))))
  (exists ((a2 c))
  (and (mem7 a2 w) (mem (tuple2 c1 (tuple2 a1 d1))
  (Tuple2 c1 (tuple2 a1 d1) (t2tb135 a2) (t2tb904 x)) (t2tb4503 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 c (set (tuple21 b d))))) (w (set c))
  (x (set (tuple21 b d))))
  (= (mem33 x
  (tb2t906 (image (set1 (tuple2 b1 d1)) c1 (t2tb4505 p) (t2tb132 w))))
  (exists ((a2 c))
  (and (mem7 a2 w) (mem (tuple2 c1 (set1 (tuple2 b1 d1)))
  (Tuple2 c1 (set1 (tuple2 b1 d1)) (t2tb135 a2) (t2tb687 x)) (t2tb4505 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 c (tuple21 b d)))) (w (set c)) (x (tuple21 b d)))
  (= (mem23 x (tb2t687 (image (tuple2 b1 d1) c1 (t2tb4507 p) (t2tb132 w))))
  (exists ((a2 c))
  (and (mem7 a2 w) (mem (tuple2 c1 (tuple2 b1 d1))
  (Tuple2 c1 (tuple2 b1 d1) (t2tb135 a2) (t2tb692 x)) (t2tb4507 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 c d))) (w (set c)) (x d))
  (= (mem20 x (tb2t690 (image d1 c1 (t2tb689 p) (t2tb132 w))))
  (exists ((a2 c))
  (and (mem7 a2 w) (mem (tuple2 c1 d1)
  (Tuple2 c1 d1 (t2tb135 a2) (t2tb694 x)) (t2tb689 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 c (tuple21 a (tuple21 b c))))) (w (set c))
  (x (tuple21 a (tuple21 b c))))
  (= (mem14 x
  (tb2t261 (image (tuple2 a1 (tuple2 b1 c1)) c1 (t2tb4508 p) (t2tb132 w))))
  (exists ((a2 c))
  (and (mem7 a2 w) (mem (tuple2 c1 (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 c1 (tuple2 a1 (tuple2 b1 c1)) (t2tb135 a2) (t2tb260 x))
  (t2tb4508 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 c (set (tuple21 a c))))) (w (set c))
  (x (set (tuple21 a c))))
  (= (mem11 x
  (tb2t128 (image (set1 (tuple2 a1 c1)) c1 (t2tb4510 p) (t2tb132 w))))
  (exists ((a2 c))
  (and (mem7 a2 w) (mem (tuple2 c1 (set1 (tuple2 a1 c1)))
  (Tuple2 c1 (set1 (tuple2 a1 c1)) (t2tb135 a2) (t2tb129 x)) (t2tb4510 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 c (tuple21 a c)))) (w (set c)) (x (tuple21 a c)))
  (= (mem10 x (tb2t129 (image (tuple2 a1 c1) c1 (t2tb210 p) (t2tb132 w))))
  (exists ((a2 c))
  (and (mem7 a2 w) (mem (tuple2 c1 (tuple2 a1 c1))
  (Tuple2 c1 (tuple2 a1 c1) (t2tb135 a2) (t2tb133 x)) (t2tb210 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 c c))) (w (set c)) (x c))
  (= (mem7 x (tb2t132 (image c1 c1 (t2tb216 p) (t2tb132 w))))
  (exists ((a2 c))
  (and (mem7 a2 w) (mem (tuple2 c1 c1)
  (Tuple2 c1 c1 (t2tb135 a2) (t2tb135 x)) (t2tb216 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 c (set (tuple21 a b))))) (w (set c))
  (x (set (tuple21 a b))))
  (= (mem4 x
  (tb2t10 (image (set1 (tuple2 a1 b1)) c1 (t2tb218 p) (t2tb132 w))))
  (exists ((a2 c))
  (and (mem7 a2 w) (mem (tuple2 c1 (set1 (tuple2 a1 b1)))
  (Tuple2 c1 (set1 (tuple2 a1 b1)) (t2tb135 a2) (t2tb11 x)) (t2tb218 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 c (tuple21 a b)))) (w (set c)) (x (tuple21 a b)))
  (= (mem3 x (tb2t11 (image (tuple2 a1 b1) c1 (t2tb220 p) (t2tb132 w))))
  (exists ((a2 c))
  (and (mem7 a2 w) (mem (tuple2 c1 (tuple2 a1 b1))
  (Tuple2 c1 (tuple2 a1 b1) (t2tb135 a2) (t2tb13 x)) (t2tb220 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 c b))) (w (set c)) (x b))
  (= (mem2 x (tb2t12 (image b1 c1 (t2tb222 p) (t2tb132 w))))
  (exists ((a2 c))
  (and (mem7 a2 w) (mem (tuple2 c1 b1) (Tuple2 c1 b1 (t2tb135 a2) (t2tb14 x))
  (t2tb222 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 c a))) (w (set c)) (x a))
  (= (mem1 x (tb2t1 (image a1 c1 (t2tb224 p) (t2tb132 w))))
  (exists ((a2 c))
  (and (mem7 a2 w) (mem (tuple2 c1 a1) (Tuple2 c1 a1 (t2tb135 a2) (t2tb2 x))
  (t2tb224 p)))))))

;; mem_image
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (w (set c)) (x uni))
  (= (mem b2 x (image b2 c1 p (t2tb132 w)))
  (exists ((a2 c))
  (and (mem7 a2 w) (mem (tuple2 c1 b2) (Tuple2 c1 b2 (t2tb135 a2) x) p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a b)) (tuple21 (tuple21 b c)
  (tuple21 d e))))) (w (set (set (tuple21 a b)))) (x (tuple21 (tuple21 b c)
  (tuple21 d e))))
  (= (mem49 x
  (tb2t4102
  (image (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (set1 (tuple2 a1 b1))
  (t2tb4512 p) (t2tb10 w))))
  (exists ((a2 (set (tuple21 a b))))
  (and (mem4 a2 w) (mem
  (tuple2 (set1 (tuple2 a1 b1)) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)))
  (Tuple2 (set1 (tuple2 a1 b1)) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1))
  (t2tb11 a2) (t2tb4104 x)) (t2tb4512 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a b)) (tuple21 a (tuple21 d e)))))
  (w (set (set (tuple21 a b)))) (x (tuple21 a (tuple21 d e))))
  (= (mem48 x
  (tb2t4103
  (image (tuple2 a1 (tuple2 d1 e1)) (set1 (tuple2 a1 b1)) (t2tb4514 p)
  (t2tb10 w))))
  (exists ((a2 (set (tuple21 a b))))
  (and (mem4 a2 w) (mem
  (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 (tuple2 d1 e1)))
  (Tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 (tuple2 d1 e1)) (t2tb11 a2)
  (t2tb4105 x)) (t2tb4514 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a b)) (set (tuple21 c e)))))
  (w (set (set (tuple21 a b)))) (x (set (tuple21 c e))))
  (= (mem47 x
  (tb2t3854
  (image (set1 (tuple2 c1 e1)) (set1 (tuple2 a1 b1)) (t2tb4516 p) (t2tb10 w))))
  (exists ((a2 (set (tuple21 a b))))
  (and (mem4 a2 w) (mem (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 c1 e1)))
  (Tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 c1 e1)) (t2tb11 a2)
  (t2tb3478 x)) (t2tb4516 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a b)) (tuple21 c e))))
  (w (set (set (tuple21 a b)))) (x (tuple21 c e)))
  (= (mem46 x
  (tb2t3478
  (image (tuple2 c1 e1) (set1 (tuple2 a1 b1)) (t2tb4518 p) (t2tb10 w))))
  (exists ((a2 (set (tuple21 a b))))
  (and (mem4 a2 w) (mem (tuple2 (set1 (tuple2 a1 b1)) (tuple2 c1 e1))
  (Tuple2 (set1 (tuple2 a1 b1)) (tuple2 c1 e1) (t2tb11 a2) (t2tb3479 x))
  (t2tb4518 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a b)) (tuple21 a e))))
  (w (set (set (tuple21 a b)))) (x (tuple21 a e)))
  (= (mem44 x
  (tb2t2943
  (image (tuple2 a1 e1) (set1 (tuple2 a1 b1)) (t2tb3486 p) (t2tb10 w))))
  (exists ((a2 (set (tuple21 a b))))
  (and (mem4 a2 w) (mem (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 e1))
  (Tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 e1) (t2tb11 a2) (t2tb2949 x))
  (t2tb3486 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a b)) e))) (w (set (set (tuple21 a
  b)))) (x e))
  (= (mem36 x
  (tb2t2947 (image e1 (set1 (tuple2 a1 b1)) (t2tb3502 p) (t2tb10 w))))
  (exists ((a2 (set (tuple21 a b))))
  (and (mem4 a2 w) (mem (tuple2 (set1 (tuple2 a1 b1)) e1)
  (Tuple2 (set1 (tuple2 a1 b1)) e1 (t2tb11 a2) (t2tb2955 x)) (t2tb3502 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a b)) (tuple21 a d))))
  (w (set (set (tuple21 a b)))) (x (tuple21 a d)))
  (= (mem32 x
  (tb2t903
  (image (tuple2 a1 d1) (set1 (tuple2 a1 b1)) (t2tb4520 p) (t2tb10 w))))
  (exists ((a2 (set (tuple21 a b))))
  (and (mem4 a2 w) (mem (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 d1))
  (Tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 d1) (t2tb11 a2) (t2tb904 x))
  (t2tb4520 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a b)) (set (tuple21 b d)))))
  (w (set (set (tuple21 a b)))) (x (set (tuple21 b d))))
  (= (mem33 x
  (tb2t906
  (image (set1 (tuple2 b1 d1)) (set1 (tuple2 a1 b1)) (t2tb4522 p) (t2tb10 w))))
  (exists ((a2 (set (tuple21 a b))))
  (and (mem4 a2 w) (mem (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 b1 d1)))
  (Tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 b1 d1)) (t2tb11 a2)
  (t2tb687 x)) (t2tb4522 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a b)) (tuple21 b d))))
  (w (set (set (tuple21 a b)))) (x (tuple21 b d)))
  (= (mem23 x
  (tb2t687
  (image (tuple2 b1 d1) (set1 (tuple2 a1 b1)) (t2tb4524 p) (t2tb10 w))))
  (exists ((a2 (set (tuple21 a b))))
  (and (mem4 a2 w) (mem (tuple2 (set1 (tuple2 a1 b1)) (tuple2 b1 d1))
  (Tuple2 (set1 (tuple2 a1 b1)) (tuple2 b1 d1) (t2tb11 a2) (t2tb692 x))
  (t2tb4524 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a b)) d))) (w (set (set (tuple21 a
  b)))) (x d))
  (= (mem20 x
  (tb2t690 (image d1 (set1 (tuple2 a1 b1)) (t2tb869 p) (t2tb10 w))))
  (exists ((a2 (set (tuple21 a b))))
  (and (mem4 a2 w) (mem (tuple2 (set1 (tuple2 a1 b1)) d1)
  (Tuple2 (set1 (tuple2 a1 b1)) d1 (t2tb11 a2) (t2tb694 x)) (t2tb869 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a b)) (tuple21 a (tuple21 b c)))))
  (w (set (set (tuple21 a b)))) (x (tuple21 a (tuple21 b c))))
  (= (mem14 x
  (tb2t261
  (image (tuple2 a1 (tuple2 b1 c1)) (set1 (tuple2 a1 b1)) (t2tb4526 p)
  (t2tb10 w))))
  (exists ((a2 (set (tuple21 a b))))
  (and (mem4 a2 w) (mem
  (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 (tuple2 b1 c1)) (t2tb11 a2)
  (t2tb260 x)) (t2tb4526 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a b)) (set (tuple21 a c)))))
  (w (set (set (tuple21 a b)))) (x (set (tuple21 a c))))
  (= (mem11 x
  (tb2t128
  (image (set1 (tuple2 a1 c1)) (set1 (tuple2 a1 b1)) (t2tb4528 p) (t2tb10 w))))
  (exists ((a2 (set (tuple21 a b))))
  (and (mem4 a2 w) (mem (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 c1)))
  (Tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 c1)) (t2tb11 a2)
  (t2tb129 x)) (t2tb4528 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a b)) (tuple21 a c))))
  (w (set (set (tuple21 a b)))) (x (tuple21 a c)))
  (= (mem10 x
  (tb2t129
  (image (tuple2 a1 c1) (set1 (tuple2 a1 b1)) (t2tb229 p) (t2tb10 w))))
  (exists ((a2 (set (tuple21 a b))))
  (and (mem4 a2 w) (mem (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 c1))
  (Tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 c1) (t2tb11 a2) (t2tb133 x))
  (t2tb229 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a b)) c))) (w (set (set (tuple21 a
  b)))) (x c))
  (= (mem7 x
  (tb2t132 (image c1 (set1 (tuple2 a1 b1)) (t2tb234 p) (t2tb10 w))))
  (exists ((a2 (set (tuple21 a b))))
  (and (mem4 a2 w) (mem (tuple2 (set1 (tuple2 a1 b1)) c1)
  (Tuple2 (set1 (tuple2 a1 b1)) c1 (t2tb11 a2) (t2tb135 x)) (t2tb234 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a b)) (set (tuple21 a b)))))
  (w (set (set (tuple21 a b)))) (x (set (tuple21 a b))))
  (= (mem4 x
  (tb2t10
  (image (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1)) (t2tb15 p) (t2tb10 w))))
  (exists ((a2 (set (tuple21 a b))))
  (and (mem4 a2 w) (mem (tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1)))
  (Tuple2 (set1 (tuple2 a1 b1)) (set1 (tuple2 a1 b1)) (t2tb11 a2) (t2tb11 x))
  (t2tb15 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a b)) (tuple21 a b))))
  (w (set (set (tuple21 a b)))) (x (tuple21 a b)))
  (= (mem3 x
  (tb2t11 (image (tuple2 a1 b1) (set1 (tuple2 a1 b1)) (t2tb17 p) (t2tb10 w))))
  (exists ((a2 (set (tuple21 a b))))
  (and (mem4 a2 w) (mem (tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 b1))
  (Tuple2 (set1 (tuple2 a1 b1)) (tuple2 a1 b1) (t2tb11 a2) (t2tb13 x))
  (t2tb17 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a b)) b))) (w (set (set (tuple21 a
  b)))) (x b))
  (= (mem2 x (tb2t12 (image b1 (set1 (tuple2 a1 b1)) (t2tb19 p) (t2tb10 w))))
  (exists ((a2 (set (tuple21 a b))))
  (and (mem4 a2 w) (mem (tuple2 (set1 (tuple2 a1 b1)) b1)
  (Tuple2 (set1 (tuple2 a1 b1)) b1 (t2tb11 a2) (t2tb14 x)) (t2tb19 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a b)) a))) (w (set (set (tuple21 a
  b)))) (x a))
  (= (mem1 x (tb2t1 (image a1 (set1 (tuple2 a1 b1)) (t2tb22 p) (t2tb10 w))))
  (exists ((a2 (set (tuple21 a b))))
  (and (mem4 a2 w) (mem (tuple2 (set1 (tuple2 a1 b1)) a1)
  (Tuple2 (set1 (tuple2 a1 b1)) a1 (t2tb11 a2) (t2tb2 x)) (t2tb22 p)))))))

;; mem_image
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (w (set (set (tuple21 a b)))) (x uni))
  (= (mem b2 x (image b2 (set1 (tuple2 a1 b1)) p (t2tb10 w)))
  (exists ((a2 (set (tuple21 a b))))
  (and (mem4 a2 w) (mem (tuple2 (set1 (tuple2 a1 b1)) b2)
  (Tuple2 (set1 (tuple2 a1 b1)) b2 (t2tb11 a2) x) p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) (tuple21 (tuple21 b c) (tuple21 d
  e))))) (w (set (tuple21 a b))) (x (tuple21 (tuple21 b c) (tuple21 d e))))
  (= (mem49 x
  (tb2t4102
  (image (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (tuple2 a1 b1) (t2tb4530 p)
  (t2tb11 w))))
  (exists ((a2 (tuple21 a b)))
  (and (mem3 a2 w) (mem
  (tuple2 (tuple2 a1 b1) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)))
  (Tuple2 (tuple2 a1 b1) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (t2tb13 a2)
  (t2tb4104 x)) (t2tb4530 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) (tuple21 a (tuple21 d e)))))
  (w (set (tuple21 a b))) (x (tuple21 a (tuple21 d e))))
  (= (mem48 x
  (tb2t4103
  (image (tuple2 a1 (tuple2 d1 e1)) (tuple2 a1 b1) (t2tb4532 p) (t2tb11 w))))
  (exists ((a2 (tuple21 a b)))
  (and (mem3 a2 w) (mem (tuple2 (tuple2 a1 b1) (tuple2 a1 (tuple2 d1 e1)))
  (Tuple2 (tuple2 a1 b1) (tuple2 a1 (tuple2 d1 e1)) (t2tb13 a2) (t2tb4105 x))
  (t2tb4532 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) (set (tuple21 c e)))))
  (w (set (tuple21 a b))) (x (set (tuple21 c e))))
  (= (mem47 x
  (tb2t3854
  (image (set1 (tuple2 c1 e1)) (tuple2 a1 b1) (t2tb4534 p) (t2tb11 w))))
  (exists ((a2 (tuple21 a b)))
  (and (mem3 a2 w) (mem (tuple2 (tuple2 a1 b1) (set1 (tuple2 c1 e1)))
  (Tuple2 (tuple2 a1 b1) (set1 (tuple2 c1 e1)) (t2tb13 a2) (t2tb3478 x))
  (t2tb4534 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) (tuple21 c e)))) (w (set (tuple21 a
  b))) (x (tuple21 c e)))
  (= (mem46 x
  (tb2t3478 (image (tuple2 c1 e1) (tuple2 a1 b1) (t2tb4536 p) (t2tb11 w))))
  (exists ((a2 (tuple21 a b)))
  (and (mem3 a2 w) (mem (tuple2 (tuple2 a1 b1) (tuple2 c1 e1))
  (Tuple2 (tuple2 a1 b1) (tuple2 c1 e1) (t2tb13 a2) (t2tb3479 x))
  (t2tb4536 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) (tuple21 a e)))) (w (set (tuple21 a
  b))) (x (tuple21 a e)))
  (= (mem44 x
  (tb2t2943 (image (tuple2 a1 e1) (tuple2 a1 b1) (t2tb3512 p) (t2tb11 w))))
  (exists ((a2 (tuple21 a b)))
  (and (mem3 a2 w) (mem (tuple2 (tuple2 a1 b1) (tuple2 a1 e1))
  (Tuple2 (tuple2 a1 b1) (tuple2 a1 e1) (t2tb13 a2) (t2tb2949 x))
  (t2tb3512 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) e))) (w (set (tuple21 a b))) (x e))
  (= (mem36 x (tb2t2947 (image e1 (tuple2 a1 b1) (t2tb3528 p) (t2tb11 w))))
  (exists ((a2 (tuple21 a b)))
  (and (mem3 a2 w) (mem (tuple2 (tuple2 a1 b1) e1)
  (Tuple2 (tuple2 a1 b1) e1 (t2tb13 a2) (t2tb2955 x)) (t2tb3528 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) (tuple21 a d)))) (w (set (tuple21 a
  b))) (x (tuple21 a d)))
  (= (mem32 x
  (tb2t903 (image (tuple2 a1 d1) (tuple2 a1 b1) (t2tb4538 p) (t2tb11 w))))
  (exists ((a2 (tuple21 a b)))
  (and (mem3 a2 w) (mem (tuple2 (tuple2 a1 b1) (tuple2 a1 d1))
  (Tuple2 (tuple2 a1 b1) (tuple2 a1 d1) (t2tb13 a2) (t2tb904 x))
  (t2tb4538 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) (set (tuple21 b d)))))
  (w (set (tuple21 a b))) (x (set (tuple21 b d))))
  (= (mem33 x
  (tb2t906
  (image (set1 (tuple2 b1 d1)) (tuple2 a1 b1) (t2tb4540 p) (t2tb11 w))))
  (exists ((a2 (tuple21 a b)))
  (and (mem3 a2 w) (mem (tuple2 (tuple2 a1 b1) (set1 (tuple2 b1 d1)))
  (Tuple2 (tuple2 a1 b1) (set1 (tuple2 b1 d1)) (t2tb13 a2) (t2tb687 x))
  (t2tb4540 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) (tuple21 b d)))) (w (set (tuple21 a
  b))) (x (tuple21 b d)))
  (= (mem23 x
  (tb2t687 (image (tuple2 b1 d1) (tuple2 a1 b1) (t2tb4542 p) (t2tb11 w))))
  (exists ((a2 (tuple21 a b)))
  (and (mem3 a2 w) (mem (tuple2 (tuple2 a1 b1) (tuple2 b1 d1))
  (Tuple2 (tuple2 a1 b1) (tuple2 b1 d1) (t2tb13 a2) (t2tb692 x))
  (t2tb4542 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) d))) (w (set (tuple21 a b))) (x d))
  (= (mem20 x (tb2t690 (image d1 (tuple2 a1 b1) (t2tb881 p) (t2tb11 w))))
  (exists ((a2 (tuple21 a b)))
  (and (mem3 a2 w) (mem (tuple2 (tuple2 a1 b1) d1)
  (Tuple2 (tuple2 a1 b1) d1 (t2tb13 a2) (t2tb694 x)) (t2tb881 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) (tuple21 a (tuple21 b c)))))
  (w (set (tuple21 a b))) (x (tuple21 a (tuple21 b c))))
  (= (mem14 x
  (tb2t261
  (image (tuple2 a1 (tuple2 b1 c1)) (tuple2 a1 b1) (t2tb4544 p) (t2tb11 w))))
  (exists ((a2 (tuple21 a b)))
  (and (mem3 a2 w) (mem (tuple2 (tuple2 a1 b1) (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 (tuple2 a1 b1) (tuple2 a1 (tuple2 b1 c1)) (t2tb13 a2) (t2tb260 x))
  (t2tb4544 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) (set (tuple21 a c)))))
  (w (set (tuple21 a b))) (x (set (tuple21 a c))))
  (= (mem11 x
  (tb2t128
  (image (set1 (tuple2 a1 c1)) (tuple2 a1 b1) (t2tb4546 p) (t2tb11 w))))
  (exists ((a2 (tuple21 a b)))
  (and (mem3 a2 w) (mem (tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 c1)))
  (Tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 c1)) (t2tb13 a2) (t2tb129 x))
  (t2tb4546 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) (tuple21 a c)))) (w (set (tuple21 a
  b))) (x (tuple21 a c)))
  (= (mem10 x
  (tb2t129 (image (tuple2 a1 c1) (tuple2 a1 b1) (t2tb238 p) (t2tb11 w))))
  (exists ((a2 (tuple21 a b)))
  (and (mem3 a2 w) (mem (tuple2 (tuple2 a1 b1) (tuple2 a1 c1))
  (Tuple2 (tuple2 a1 b1) (tuple2 a1 c1) (t2tb13 a2) (t2tb133 x))
  (t2tb238 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) c))) (w (set (tuple21 a b))) (x c))
  (= (mem7 x (tb2t132 (image c1 (tuple2 a1 b1) (t2tb245 p) (t2tb11 w))))
  (exists ((a2 (tuple21 a b)))
  (and (mem3 a2 w) (mem (tuple2 (tuple2 a1 b1) c1)
  (Tuple2 (tuple2 a1 b1) c1 (t2tb13 a2) (t2tb135 x)) (t2tb245 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) (set (tuple21 a b)))))
  (w (set (tuple21 a b))) (x (set (tuple21 a b))))
  (= (mem4 x
  (tb2t10 (image (set1 (tuple2 a1 b1)) (tuple2 a1 b1) (t2tb23 p) (t2tb11 w))))
  (exists ((a2 (tuple21 a b)))
  (and (mem3 a2 w) (mem (tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 b1)))
  (Tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 b1)) (t2tb13 a2) (t2tb11 x))
  (t2tb23 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) (tuple21 a b)))) (w (set (tuple21 a
  b))) (x (tuple21 a b)))
  (= (mem3 x
  (tb2t11 (image (tuple2 a1 b1) (tuple2 a1 b1) (t2tb25 p) (t2tb11 w))))
  (exists ((a2 (tuple21 a b)))
  (and (mem3 a2 w) (mem (tuple2 (tuple2 a1 b1) (tuple2 a1 b1))
  (Tuple2 (tuple2 a1 b1) (tuple2 a1 b1) (t2tb13 a2) (t2tb13 x)) (t2tb25 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) b))) (w (set (tuple21 a b))) (x b))
  (= (mem2 x (tb2t12 (image b1 (tuple2 a1 b1) (t2tb27 p) (t2tb11 w))))
  (exists ((a2 (tuple21 a b)))
  (and (mem3 a2 w) (mem (tuple2 (tuple2 a1 b1) b1)
  (Tuple2 (tuple2 a1 b1) b1 (t2tb13 a2) (t2tb14 x)) (t2tb27 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) a))) (w (set (tuple21 a b))) (x a))
  (= (mem1 x (tb2t1 (image a1 (tuple2 a1 b1) (t2tb29 p) (t2tb11 w))))
  (exists ((a2 (tuple21 a b)))
  (and (mem3 a2 w) (mem (tuple2 (tuple2 a1 b1) a1)
  (Tuple2 (tuple2 a1 b1) a1 (t2tb13 a2) (t2tb2 x)) (t2tb29 p)))))))

;; mem_image
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (w (set (tuple21 a b))) (x uni))
  (= (mem b2 x (image b2 (tuple2 a1 b1) p (t2tb11 w)))
  (exists ((a2 (tuple21 a b)))
  (and (mem3 a2 w) (mem (tuple2 (tuple2 a1 b1) b2)
  (Tuple2 (tuple2 a1 b1) b2 (t2tb13 a2) x) p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 b (tuple21 (tuple21 b c) (tuple21 d e)))))
  (w (set b)) (x (tuple21 (tuple21 b c) (tuple21 d e))))
  (= (mem49 x
  (tb2t4102
  (image (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) b1 (t2tb4548 p) (t2tb12 w))))
  (exists ((a2 b))
  (and (mem2 a2 w) (mem (tuple2 b1 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)))
  (Tuple2 b1 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (t2tb14 a2) (t2tb4104 x))
  (t2tb4548 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 b (tuple21 a (tuple21 d e))))) (w (set b))
  (x (tuple21 a (tuple21 d e))))
  (= (mem48 x
  (tb2t4103 (image (tuple2 a1 (tuple2 d1 e1)) b1 (t2tb4550 p) (t2tb12 w))))
  (exists ((a2 b))
  (and (mem2 a2 w) (mem (tuple2 b1 (tuple2 a1 (tuple2 d1 e1)))
  (Tuple2 b1 (tuple2 a1 (tuple2 d1 e1)) (t2tb14 a2) (t2tb4105 x))
  (t2tb4550 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 b (set (tuple21 c e))))) (w (set b))
  (x (set (tuple21 c e))))
  (= (mem47 x
  (tb2t3854 (image (set1 (tuple2 c1 e1)) b1 (t2tb4552 p) (t2tb12 w))))
  (exists ((a2 b))
  (and (mem2 a2 w) (mem (tuple2 b1 (set1 (tuple2 c1 e1)))
  (Tuple2 b1 (set1 (tuple2 c1 e1)) (t2tb14 a2) (t2tb3478 x)) (t2tb4552 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 b (tuple21 c e)))) (w (set b)) (x (tuple21 c e)))
  (= (mem46 x (tb2t3478 (image (tuple2 c1 e1) b1 (t2tb4554 p) (t2tb12 w))))
  (exists ((a2 b))
  (and (mem2 a2 w) (mem (tuple2 b1 (tuple2 c1 e1))
  (Tuple2 b1 (tuple2 c1 e1) (t2tb14 a2) (t2tb3479 x)) (t2tb4554 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 b (tuple21 a e)))) (w (set b)) (x (tuple21 a e)))
  (= (mem44 x (tb2t2943 (image (tuple2 a1 e1) b1 (t2tb3536 p) (t2tb12 w))))
  (exists ((a2 b))
  (and (mem2 a2 w) (mem (tuple2 b1 (tuple2 a1 e1))
  (Tuple2 b1 (tuple2 a1 e1) (t2tb14 a2) (t2tb2949 x)) (t2tb3536 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 b e))) (w (set b)) (x e))
  (= (mem36 x (tb2t2947 (image e1 b1 (t2tb2940 p) (t2tb12 w))))
  (exists ((a2 b))
  (and (mem2 a2 w) (mem (tuple2 b1 e1)
  (Tuple2 b1 e1 (t2tb14 a2) (t2tb2955 x)) (t2tb2940 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 b (tuple21 a d)))) (w (set b)) (x (tuple21 a d)))
  (= (mem32 x (tb2t903 (image (tuple2 a1 d1) b1 (t2tb4556 p) (t2tb12 w))))
  (exists ((a2 b))
  (and (mem2 a2 w) (mem (tuple2 b1 (tuple2 a1 d1))
  (Tuple2 b1 (tuple2 a1 d1) (t2tb14 a2) (t2tb904 x)) (t2tb4556 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 b (set (tuple21 b d))))) (w (set b))
  (x (set (tuple21 b d))))
  (= (mem33 x
  (tb2t906 (image (set1 (tuple2 b1 d1)) b1 (t2tb4558 p) (t2tb12 w))))
  (exists ((a2 b))
  (and (mem2 a2 w) (mem (tuple2 b1 (set1 (tuple2 b1 d1)))
  (Tuple2 b1 (set1 (tuple2 b1 d1)) (t2tb14 a2) (t2tb687 x)) (t2tb4558 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 b (tuple21 b d)))) (w (set b)) (x (tuple21 b d)))
  (= (mem23 x (tb2t687 (image (tuple2 b1 d1) b1 (t2tb4560 p) (t2tb12 w))))
  (exists ((a2 b))
  (and (mem2 a2 w) (mem (tuple2 b1 (tuple2 b1 d1))
  (Tuple2 b1 (tuple2 b1 d1) (t2tb14 a2) (t2tb692 x)) (t2tb4560 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 b d))) (w (set b)) (x d))
  (= (mem20 x (tb2t690 (image d1 b1 (t2tb687 p) (t2tb12 w))))
  (exists ((a2 b))
  (and (mem2 a2 w) (mem23 (tb2t692 (Tuple2 b1 d1 (t2tb14 a2) (t2tb694 x)))
  p))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 b (tuple21 a (tuple21 b c))))) (w (set b))
  (x (tuple21 a (tuple21 b c))))
  (= (mem14 x
  (tb2t261 (image (tuple2 a1 (tuple2 b1 c1)) b1 (t2tb4561 p) (t2tb12 w))))
  (exists ((a2 b))
  (and (mem2 a2 w) (mem (tuple2 b1 (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 b1 (tuple2 a1 (tuple2 b1 c1)) (t2tb14 a2) (t2tb260 x))
  (t2tb4561 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 b (set (tuple21 a c))))) (w (set b))
  (x (set (tuple21 a c))))
  (= (mem11 x
  (tb2t128 (image (set1 (tuple2 a1 c1)) b1 (t2tb4564 p) (t2tb12 w))))
  (exists ((a2 b))
  (and (mem2 a2 w) (mem (tuple2 b1 (set1 (tuple2 a1 c1)))
  (Tuple2 b1 (set1 (tuple2 a1 c1)) (t2tb14 a2) (t2tb129 x)) (t2tb4564 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 b (tuple21 a c)))) (w (set b)) (x (tuple21 a c)))
  (= (mem10 x (tb2t129 (image (tuple2 a1 c1) b1 (t2tb248 p) (t2tb12 w))))
  (exists ((a2 b))
  (and (mem2 a2 w) (mem (tuple2 b1 (tuple2 a1 c1))
  (Tuple2 b1 (tuple2 a1 c1) (t2tb14 a2) (t2tb133 x)) (t2tb248 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 b c))) (w (set b)) (x c))
  (= (mem7 x (tb2t132 (image c1 b1 (t2tb131 p) (t2tb12 w))))
  (exists ((a2 b))
  (and (mem2 a2 w) (mem (tuple2 b1 c1) (Tuple2 b1 c1 (t2tb14 a2) (t2tb135 x))
  (t2tb131 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 b (set (tuple21 a b))))) (w (set b))
  (x (set (tuple21 a b))))
  (= (mem4 x (tb2t10 (image (set1 (tuple2 a1 b1)) b1 (t2tb31 p) (t2tb12 w))))
  (exists ((a2 b))
  (and (mem2 a2 w) (mem (tuple2 b1 (set1 (tuple2 a1 b1)))
  (Tuple2 b1 (set1 (tuple2 a1 b1)) (t2tb14 a2) (t2tb11 x)) (t2tb31 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 b (tuple21 a b)))) (w (set b)) (x (tuple21 a b)))
  (= (mem3 x (tb2t11 (image (tuple2 a1 b1) b1 (t2tb34 p) (t2tb12 w))))
  (exists ((a2 b))
  (and (mem2 a2 w) (mem (tuple2 b1 (tuple2 a1 b1))
  (Tuple2 b1 (tuple2 a1 b1) (t2tb14 a2) (t2tb13 x)) (t2tb34 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 b b))) (w (set b)) (x b))
  (= (mem2 x (tb2t12 (image b1 b1 (t2tb35 p) (t2tb12 w))))
  (exists ((a2 b))
  (and (mem2 a2 w) (mem (tuple2 b1 b1) (Tuple2 b1 b1 (t2tb14 a2) (t2tb14 x))
  (t2tb35 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 b a))) (w (set b)) (x a))
  (= (mem1 x (tb2t1 (image a1 b1 (t2tb37 p) (t2tb12 w))))
  (exists ((a2 b))
  (and (mem2 a2 w) (mem (tuple2 b1 a1) (Tuple2 b1 a1 (t2tb14 a2) (t2tb2 x))
  (t2tb37 p)))))))

;; mem_image
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (w (set b)) (x uni))
  (= (mem b2 x (image b2 b1 p (t2tb12 w)))
  (exists ((a2 b))
  (and (mem2 a2 w) (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 a2) x) p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 a (tuple21 (tuple21 b c) (tuple21 d e)))))
  (w (set a)) (x (tuple21 (tuple21 b c) (tuple21 d e))))
  (= (mem49 x
  (tb2t4102
  (image (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) a1 (t2tb4565 p) (t2tb1 w))))
  (exists ((a2 a))
  (and (mem1 a2 w) (mem (tuple2 a1 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)))
  (Tuple2 a1 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (t2tb2 a2) (t2tb4104 x))
  (t2tb4565 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 a (tuple21 a (tuple21 d e))))) (w (set a))
  (x (tuple21 a (tuple21 d e))))
  (= (mem48 x
  (tb2t4103 (image (tuple2 a1 (tuple2 d1 e1)) a1 (t2tb4567 p) (t2tb1 w))))
  (exists ((a2 a))
  (and (mem1 a2 w) (mem (tuple2 a1 (tuple2 a1 (tuple2 d1 e1)))
  (Tuple2 a1 (tuple2 a1 (tuple2 d1 e1)) (t2tb2 a2) (t2tb4105 x))
  (t2tb4567 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 a (tuple21 d e)))) (w (set a)) (x (tuple21 d e)))
  (= (mem (tuple2 d1 e1) (t2tb3457 x)
  (image (tuple2 d1 e1) a1 (t2tb4103 p) (t2tb1 w)))
  (exists ((a2 a))
  (and (mem1 a2 w) (mem48
  (tb2t4105 (Tuple2 a1 (tuple2 d1 e1) (t2tb2 a2) (t2tb3457 x))) p))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 a (set (tuple21 c e))))) (w (set a))
  (x (set (tuple21 c e))))
  (= (mem47 x
  (tb2t3854 (image (set1 (tuple2 c1 e1)) a1 (t2tb4569 p) (t2tb1 w))))
  (exists ((a2 a))
  (and (mem1 a2 w) (mem (tuple2 a1 (set1 (tuple2 c1 e1)))
  (Tuple2 a1 (set1 (tuple2 c1 e1)) (t2tb2 a2) (t2tb3478 x)) (t2tb4569 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 a (tuple21 c e)))) (w (set a)) (x (tuple21 c e)))
  (= (mem46 x (tb2t3478 (image (tuple2 c1 e1) a1 (t2tb4571 p) (t2tb1 w))))
  (exists ((a2 a))
  (and (mem1 a2 w) (mem (tuple2 a1 (tuple2 c1 e1))
  (Tuple2 a1 (tuple2 c1 e1) (t2tb2 a2) (t2tb3479 x)) (t2tb4571 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 a (tuple21 a e)))) (w (set a)) (x (tuple21 a e)))
  (= (mem44 x (tb2t2943 (image (tuple2 a1 e1) a1 (t2tb3558 p) (t2tb1 w))))
  (exists ((a2 a))
  (and (mem1 a2 w) (mem (tuple2 a1 (tuple2 a1 e1))
  (Tuple2 a1 (tuple2 a1 e1) (t2tb2 a2) (t2tb2949 x)) (t2tb3558 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 a e))) (w (set a)) (x e))
  (= (mem36 x (tb2t2947 (image e1 a1 (t2tb2943 p) (t2tb1 w))))
  (exists ((a2 a))
  (and (mem1 a2 w) (mem44 (tb2t2949 (Tuple2 a1 e1 (t2tb2 a2) (t2tb2955 x)))
  p))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 a (tuple21 a d)))) (w (set a)) (x (tuple21 a d)))
  (= (mem32 x (tb2t903 (image (tuple2 a1 d1) a1 (t2tb4573 p) (t2tb1 w))))
  (exists ((a2 a))
  (and (mem1 a2 w) (mem (tuple2 a1 (tuple2 a1 d1))
  (Tuple2 a1 (tuple2 a1 d1) (t2tb2 a2) (t2tb904 x)) (t2tb4573 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 a (set (tuple21 b d))))) (w (set a))
  (x (set (tuple21 b d))))
  (= (mem33 x
  (tb2t906 (image (set1 (tuple2 b1 d1)) a1 (t2tb4575 p) (t2tb1 w))))
  (exists ((a2 a))
  (and (mem1 a2 w) (mem (tuple2 a1 (set1 (tuple2 b1 d1)))
  (Tuple2 a1 (set1 (tuple2 b1 d1)) (t2tb2 a2) (t2tb687 x)) (t2tb4575 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 a (tuple21 b d)))) (w (set a)) (x (tuple21 b d)))
  (= (mem23 x (tb2t687 (image (tuple2 b1 d1) a1 (t2tb4577 p) (t2tb1 w))))
  (exists ((a2 a))
  (and (mem1 a2 w) (mem (tuple2 a1 (tuple2 b1 d1))
  (Tuple2 a1 (tuple2 b1 d1) (t2tb2 a2) (t2tb692 x)) (t2tb4577 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 a d))) (w (set a)) (x d))
  (= (mem20 x (tb2t690 (image d1 a1 (t2tb903 p) (t2tb1 w))))
  (exists ((a2 a))
  (and (mem1 a2 w) (mem32 (tb2t904 (Tuple2 a1 d1 (t2tb2 a2) (t2tb694 x))) p))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 a (tuple21 a (tuple21 b c))))) (w (set a))
  (x (tuple21 a (tuple21 b c))))
  (= (mem14 x
  (tb2t261 (image (tuple2 a1 (tuple2 b1 c1)) a1 (t2tb4578 p) (t2tb1 w))))
  (exists ((a2 a))
  (and (mem1 a2 w) (mem (tuple2 a1 (tuple2 a1 (tuple2 b1 c1)))
  (Tuple2 a1 (tuple2 a1 (tuple2 b1 c1)) (t2tb2 a2) (t2tb260 x))
  (t2tb4578 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 a (set (tuple21 a c))))) (w (set a))
  (x (set (tuple21 a c))))
  (= (mem11 x
  (tb2t128 (image (set1 (tuple2 a1 c1)) a1 (t2tb4580 p) (t2tb1 w))))
  (exists ((a2 a))
  (and (mem1 a2 w) (mem (tuple2 a1 (set1 (tuple2 a1 c1)))
  (Tuple2 a1 (set1 (tuple2 a1 c1)) (t2tb2 a2) (t2tb129 x)) (t2tb4580 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 a (tuple21 a c)))) (w (set a)) (x (tuple21 a c)))
  (= (mem10 x (tb2t129 (image (tuple2 a1 c1) a1 (t2tb256 p) (t2tb1 w))))
  (exists ((a2 a))
  (and (mem1 a2 w) (mem (tuple2 a1 (tuple2 a1 c1))
  (Tuple2 a1 (tuple2 a1 c1) (t2tb2 a2) (t2tb133 x)) (t2tb256 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 a (tuple21 b c)))) (w (set a)) (x (tuple21 b c)))
  (= (mem (tuple2 b1 c1) (t2tb134 x)
  (image (tuple2 b1 c1) a1 (t2tb261 p) (t2tb1 w)))
  (exists ((a2 a))
  (and (mem1 a2 w) (mem14
  (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 a2) (t2tb134 x))) p))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 a c))) (w (set a)) (x c))
  (= (mem7 x (tb2t132 (image c1 a1 (t2tb129 p) (t2tb1 w))))
  (exists ((a2 a))
  (and (mem1 a2 w) (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 a2) (t2tb135 x))) p))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 a (set (tuple21 a b))))) (w (set a))
  (x (set (tuple21 a b))))
  (= (mem4 x (tb2t10 (image (set1 (tuple2 a1 b1)) a1 (t2tb39 p) (t2tb1 w))))
  (exists ((a2 a))
  (and (mem1 a2 w) (mem (tuple2 a1 (set1 (tuple2 a1 b1)))
  (Tuple2 a1 (set1 (tuple2 a1 b1)) (t2tb2 a2) (t2tb11 x)) (t2tb39 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 a (tuple21 a b)))) (w (set a)) (x (tuple21 a b)))
  (= (mem3 x (tb2t11 (image (tuple2 a1 b1) a1 (t2tb41 p) (t2tb1 w))))
  (exists ((a2 a))
  (and (mem1 a2 w) (mem (tuple2 a1 (tuple2 a1 b1))
  (Tuple2 a1 (tuple2 a1 b1) (t2tb2 a2) (t2tb13 x)) (t2tb41 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 a b))) (w (set a)) (x b))
  (= (mem2 x (tb2t12 (image b1 a1 (t2tb11 p) (t2tb1 w))))
  (exists ((a2 a))
  (and (mem1 a2 w) (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 a2) (t2tb14 x))) p))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 a a))) (w (set a)) (x a))
  (= (mem1 x (tb2t1 (image a1 a1 (t2tb4 p) (t2tb1 w))))
  (exists ((a2 a))
  (and (mem1 a2 w) (mem (tuple2 a1 a1) (Tuple2 a1 a1 (t2tb2 a2) (t2tb2 x))
  (t2tb4 p)))))))

;; mem_image
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (w (set a)) (x uni))
  (= (mem b2 x (image b2 a1 p (t2tb1 w)))
  (exists ((a2 a))
  (and (mem1 a2 w) (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 a2) x) p)))))))

;; mem_image
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((p uni) (w uni) (x uni))
  (and
  (=> (mem b2 x (image b2 a2 p w))
  (exists ((a3 uni))
  (and (sort a2 a3)
  (and (mem a2 a3 w) (mem (tuple2 a2 b2) (Tuple2 a2 b2 a3 x) p)))))
  (=>
  (exists ((a3 uni))
  (and (mem a2 a3 w) (mem (tuple2 a2 b2) (Tuple2 a2 b2 a3 x) p))) (mem b2 x
  (image b2 a2 p w)))))))

(declare-fun infix_lspl (ty ty uni uni) uni)

;; infix <+_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (tuple2 a2 b2))
  (infix_lspl b2 a2 x x1)))))

;; mem_overriding
  (assert
  (forall ((b2 ty))
  (forall ((q uni) (p uni) (x (tuple21 (tuple21 b c) (tuple21 d e))) (y uni))
  (= (mem (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) b2)
  (Tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) b2 (t2tb4104 x) y)
  (infix_lspl b2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) q p))
  (or
  (and (mem (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) b2)
  (Tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) b2 (t2tb4104 x) y) q)
  (not (mem49 x
  (tb2t4102 (dom b2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) p))))) (mem
  (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) b2)
  (Tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) b2 (t2tb4104 x) y) p))))))

;; mem_overriding
  (assert
  (forall ((b2 ty))
  (forall ((q uni) (p uni) (x (tuple21 a (tuple21 d e))) (y uni))
  (= (mem (tuple2 (tuple2 a1 (tuple2 d1 e1)) b2)
  (Tuple2 (tuple2 a1 (tuple2 d1 e1)) b2 (t2tb4105 x) y)
  (infix_lspl b2 (tuple2 a1 (tuple2 d1 e1)) q p))
  (or
  (and (mem (tuple2 (tuple2 a1 (tuple2 d1 e1)) b2)
  (Tuple2 (tuple2 a1 (tuple2 d1 e1)) b2 (t2tb4105 x) y) q)
  (not (mem48 x (tb2t4103 (dom b2 (tuple2 a1 (tuple2 d1 e1)) p))))) (mem
  (tuple2 (tuple2 a1 (tuple2 d1 e1)) b2)
  (Tuple2 (tuple2 a1 (tuple2 d1 e1)) b2 (t2tb4105 x) y) p))))))

;; mem_overriding
  (assert
  (forall ((b2 ty))
  (forall ((q uni) (p uni) (x (set (tuple21 c e))) (y uni))
  (= (mem (tuple2 (set1 (tuple2 c1 e1)) b2)
  (Tuple2 (set1 (tuple2 c1 e1)) b2 (t2tb3478 x) y)
  (infix_lspl b2 (set1 (tuple2 c1 e1)) q p))
  (or
  (and (mem (tuple2 (set1 (tuple2 c1 e1)) b2)
  (Tuple2 (set1 (tuple2 c1 e1)) b2 (t2tb3478 x) y) q)
  (not (mem47 x (tb2t3854 (dom b2 (set1 (tuple2 c1 e1)) p))))) (mem
  (tuple2 (set1 (tuple2 c1 e1)) b2)
  (Tuple2 (set1 (tuple2 c1 e1)) b2 (t2tb3478 x) y) p))))))

;; mem_overriding
  (assert
  (forall ((b2 ty))
  (forall ((q uni) (p uni) (x (tuple21 c e)) (y uni))
  (= (mem (tuple2 (tuple2 c1 e1) b2)
  (Tuple2 (tuple2 c1 e1) b2 (t2tb3479 x) y)
  (infix_lspl b2 (tuple2 c1 e1) q p))
  (or
  (and (mem (tuple2 (tuple2 c1 e1) b2)
  (Tuple2 (tuple2 c1 e1) b2 (t2tb3479 x) y) q)
  (not (mem46 x (tb2t3478 (dom b2 (tuple2 c1 e1) p))))) (mem
  (tuple2 (tuple2 c1 e1) b2) (Tuple2 (tuple2 c1 e1) b2 (t2tb3479 x) y) p))))))

;; mem_overriding
  (assert
  (forall ((b2 ty))
  (forall ((q uni) (p uni) (x (tuple21 a e)) (y uni))
  (= (mem (tuple2 (tuple2 a1 e1) b2)
  (Tuple2 (tuple2 a1 e1) b2 (t2tb2949 x) y)
  (infix_lspl b2 (tuple2 a1 e1) q p))
  (or
  (and (mem (tuple2 (tuple2 a1 e1) b2)
  (Tuple2 (tuple2 a1 e1) b2 (t2tb2949 x) y) q)
  (not (mem44 x (tb2t2943 (dom b2 (tuple2 a1 e1) p))))) (mem
  (tuple2 (tuple2 a1 e1) b2) (Tuple2 (tuple2 a1 e1) b2 (t2tb2949 x) y) p))))))

;; mem_overriding
  (assert
  (forall ((b2 ty))
  (forall ((q uni) (p uni) (x e) (y uni))
  (= (mem (tuple2 e1 b2) (Tuple2 e1 b2 (t2tb2955 x) y)
  (infix_lspl b2 e1 q p))
  (or
  (and (mem (tuple2 e1 b2) (Tuple2 e1 b2 (t2tb2955 x) y) q)
  (not (mem36 x (tb2t2947 (dom b2 e1 p))))) (mem (tuple2 e1 b2)
  (Tuple2 e1 b2 (t2tb2955 x) y) p))))))

;; mem_overriding
  (assert
  (forall ((b2 ty))
  (forall ((q uni) (p uni) (x (tuple21 a d)) (y uni))
  (= (mem (tuple2 (tuple2 a1 d1) b2) (Tuple2 (tuple2 a1 d1) b2 (t2tb904 x) y)
  (infix_lspl b2 (tuple2 a1 d1) q p))
  (or
  (and (mem (tuple2 (tuple2 a1 d1) b2)
  (Tuple2 (tuple2 a1 d1) b2 (t2tb904 x) y) q)
  (not (mem32 x (tb2t903 (dom b2 (tuple2 a1 d1) p))))) (mem
  (tuple2 (tuple2 a1 d1) b2) (Tuple2 (tuple2 a1 d1) b2 (t2tb904 x) y) p))))))

;; mem_overriding
  (assert
  (forall ((b2 ty))
  (forall ((q uni) (p uni) (x (set (tuple21 b d))) (y uni))
  (= (mem (tuple2 (set1 (tuple2 b1 d1)) b2)
  (Tuple2 (set1 (tuple2 b1 d1)) b2 (t2tb687 x) y)
  (infix_lspl b2 (set1 (tuple2 b1 d1)) q p))
  (or
  (and (mem (tuple2 (set1 (tuple2 b1 d1)) b2)
  (Tuple2 (set1 (tuple2 b1 d1)) b2 (t2tb687 x) y) q)
  (not (mem33 x (tb2t906 (dom b2 (set1 (tuple2 b1 d1)) p))))) (mem
  (tuple2 (set1 (tuple2 b1 d1)) b2)
  (Tuple2 (set1 (tuple2 b1 d1)) b2 (t2tb687 x) y) p))))))

;; mem_overriding
  (assert
  (forall ((b2 ty))
  (forall ((q uni) (p uni) (x (tuple21 b d)) (y uni))
  (= (mem (tuple2 (tuple2 b1 d1) b2) (Tuple2 (tuple2 b1 d1) b2 (t2tb692 x) y)
  (infix_lspl b2 (tuple2 b1 d1) q p))
  (or
  (and (mem (tuple2 (tuple2 b1 d1) b2)
  (Tuple2 (tuple2 b1 d1) b2 (t2tb692 x) y) q)
  (not (mem23 x (tb2t687 (dom b2 (tuple2 b1 d1) p))))) (mem
  (tuple2 (tuple2 b1 d1) b2) (Tuple2 (tuple2 b1 d1) b2 (t2tb692 x) y) p))))))

;; mem_overriding
  (assert
  (forall ((b2 ty))
  (forall ((q uni) (p uni) (x d) (y uni))
  (= (mem (tuple2 d1 b2) (Tuple2 d1 b2 (t2tb694 x) y) (infix_lspl b2 d1 q p))
  (or
  (and (mem (tuple2 d1 b2) (Tuple2 d1 b2 (t2tb694 x) y) q)
  (not (mem20 x (tb2t690 (dom b2 d1 p))))) (mem (tuple2 d1 b2)
  (Tuple2 d1 b2 (t2tb694 x) y) p))))))

;; mem_overriding
  (assert
  (forall ((b2 ty))
  (forall ((q uni) (p uni) (x (tuple21 a (tuple21 b c))) (y uni))
  (= (mem (tuple2 (tuple2 a1 (tuple2 b1 c1)) b2)
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) b2 (t2tb260 x) y)
  (infix_lspl b2 (tuple2 a1 (tuple2 b1 c1)) q p))
  (or
  (and (mem (tuple2 (tuple2 a1 (tuple2 b1 c1)) b2)
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) b2 (t2tb260 x) y) q)
  (not (mem14 x (tb2t261 (dom b2 (tuple2 a1 (tuple2 b1 c1)) p))))) (mem
  (tuple2 (tuple2 a1 (tuple2 b1 c1)) b2)
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) b2 (t2tb260 x) y) p))))))

;; mem_overriding
  (assert
  (forall ((b2 ty))
  (forall ((q uni) (p uni) (x (set (tuple21 a c))) (y uni))
  (= (mem (tuple2 (set1 (tuple2 a1 c1)) b2)
  (Tuple2 (set1 (tuple2 a1 c1)) b2 (t2tb129 x) y)
  (infix_lspl b2 (set1 (tuple2 a1 c1)) q p))
  (or
  (and (mem (tuple2 (set1 (tuple2 a1 c1)) b2)
  (Tuple2 (set1 (tuple2 a1 c1)) b2 (t2tb129 x) y) q)
  (not (mem11 x (tb2t128 (dom b2 (set1 (tuple2 a1 c1)) p))))) (mem
  (tuple2 (set1 (tuple2 a1 c1)) b2)
  (Tuple2 (set1 (tuple2 a1 c1)) b2 (t2tb129 x) y) p))))))

;; mem_overriding
  (assert
  (forall ((b2 ty))
  (forall ((q uni) (p uni) (x (tuple21 a c)) (y uni))
  (= (mem (tuple2 (tuple2 a1 c1) b2) (Tuple2 (tuple2 a1 c1) b2 (t2tb133 x) y)
  (infix_lspl b2 (tuple2 a1 c1) q p))
  (or
  (and (mem (tuple2 (tuple2 a1 c1) b2)
  (Tuple2 (tuple2 a1 c1) b2 (t2tb133 x) y) q)
  (not (mem10 x (tb2t129 (dom b2 (tuple2 a1 c1) p))))) (mem
  (tuple2 (tuple2 a1 c1) b2) (Tuple2 (tuple2 a1 c1) b2 (t2tb133 x) y) p))))))

;; mem_overriding
  (assert
  (forall ((q (set (tuple21 (tuple21 b c) (tuple21 d e))))
  (p (set (tuple21 (tuple21 b c) (tuple21 d e)))) (x (tuple21 b c))
  (y (tuple21 d e)))
  (= (mem49
  (tb2t4104 (Tuple2 (tuple2 b1 c1) (tuple2 d1 e1) (t2tb134 x) (t2tb3457 y)))
  (tb2t4102
  (infix_lspl (tuple2 d1 e1) (tuple2 b1 c1) (t2tb4102 q) (t2tb4102 p))))
  (or
  (and (mem49
  (tb2t4104 (Tuple2 (tuple2 b1 c1) (tuple2 d1 e1) (t2tb134 x) (t2tb3457 y)))
  q)
  (not (mem (tuple2 b1 c1) (t2tb134 x)
  (dom (tuple2 d1 e1) (tuple2 b1 c1) (t2tb4102 p))))) (mem49
  (tb2t4104 (Tuple2 (tuple2 b1 c1) (tuple2 d1 e1) (t2tb134 x) (t2tb3457 y)))
  p)))))

;; mem_overriding
  (assert
  (forall ((q (set (tuple21 c e))) (p (set (tuple21 c e))) (x c) (y e))
  (= (mem46 (tb2t3479 (Tuple2 c1 e1 (t2tb135 x) (t2tb2955 y)))
  (tb2t3478 (infix_lspl e1 c1 (t2tb3478 q) (t2tb3478 p))))
  (or
  (and (mem46 (tb2t3479 (Tuple2 c1 e1 (t2tb135 x) (t2tb2955 y))) q)
  (not (mem7 x (tb2t132 (dom e1 c1 (t2tb3478 p)))))) (mem46
  (tb2t3479 (Tuple2 c1 e1 (t2tb135 x) (t2tb2955 y))) p)))))

;; mem_overriding
  (assert
  (forall ((b2 ty))
  (forall ((q uni) (p uni) (x c) (y uni))
  (= (mem (tuple2 c1 b2) (Tuple2 c1 b2 (t2tb135 x) y) (infix_lspl b2 c1 q p))
  (or
  (and (mem (tuple2 c1 b2) (Tuple2 c1 b2 (t2tb135 x) y) q)
  (not (mem7 x (tb2t132 (dom b2 c1 p))))) (mem (tuple2 c1 b2)
  (Tuple2 c1 b2 (t2tb135 x) y) p))))))

;; mem_overriding
  (assert
  (forall ((b2 ty))
  (forall ((q uni) (p uni) (x (set (tuple21 a b))) (y uni))
  (= (mem (tuple2 (set1 (tuple2 a1 b1)) b2)
  (Tuple2 (set1 (tuple2 a1 b1)) b2 (t2tb11 x) y)
  (infix_lspl b2 (set1 (tuple2 a1 b1)) q p))
  (or
  (and (mem (tuple2 (set1 (tuple2 a1 b1)) b2)
  (Tuple2 (set1 (tuple2 a1 b1)) b2 (t2tb11 x) y) q)
  (not (mem4 x (tb2t10 (dom b2 (set1 (tuple2 a1 b1)) p))))) (mem
  (tuple2 (set1 (tuple2 a1 b1)) b2)
  (Tuple2 (set1 (tuple2 a1 b1)) b2 (t2tb11 x) y) p))))))

;; mem_overriding
  (assert
  (forall ((b2 ty))
  (forall ((q uni) (p uni) (x (tuple21 a b)) (y uni))
  (= (mem (tuple2 (tuple2 a1 b1) b2) (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) y)
  (infix_lspl b2 (tuple2 a1 b1) q p))
  (or
  (and (mem (tuple2 (tuple2 a1 b1) b2)
  (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) y) q)
  (not (mem3 x (tb2t11 (dom b2 (tuple2 a1 b1) p))))) (mem
  (tuple2 (tuple2 a1 b1) b2) (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) y) p))))))

;; mem_overriding
  (assert
  (forall ((q (set (tuple21 b d))) (p (set (tuple21 b d))) (x b) (y d))
  (= (mem23 (tb2t692 (Tuple2 b1 d1 (t2tb14 x) (t2tb694 y)))
  (tb2t687 (infix_lspl d1 b1 (t2tb687 q) (t2tb687 p))))
  (or
  (and (mem23 (tb2t692 (Tuple2 b1 d1 (t2tb14 x) (t2tb694 y))) q)
  (not (mem2 x (tb2t12 (dom d1 b1 (t2tb687 p)))))) (mem23
  (tb2t692 (Tuple2 b1 d1 (t2tb14 x) (t2tb694 y))) p)))))

;; mem_overriding
  (assert
  (forall ((b2 ty))
  (forall ((q uni) (p uni) (x b) (y uni))
  (= (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) y) (infix_lspl b2 b1 q p))
  (or
  (and (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) y) q)
  (not (mem2 x (tb2t12 (dom b2 b1 p))))) (mem (tuple2 b1 b2)
  (Tuple2 b1 b2 (t2tb14 x) y) p))))))

;; mem_overriding
  (assert
  (forall ((q (set (tuple21 a (tuple21 d e)))) (p (set (tuple21 a (tuple21 d
  e)))) (x a) (y (tuple21 d e)))
  (= (mem48 (tb2t4105 (Tuple2 a1 (tuple2 d1 e1) (t2tb2 x) (t2tb3457 y)))
  (tb2t4103 (infix_lspl (tuple2 d1 e1) a1 (t2tb4103 q) (t2tb4103 p))))
  (or
  (and (mem48 (tb2t4105 (Tuple2 a1 (tuple2 d1 e1) (t2tb2 x) (t2tb3457 y))) q)
  (not (mem1 x (tb2t1 (dom (tuple2 d1 e1) a1 (t2tb4103 p)))))) (mem48
  (tb2t4105 (Tuple2 a1 (tuple2 d1 e1) (t2tb2 x) (t2tb3457 y))) p)))))

;; mem_overriding
  (assert
  (forall ((q (set (tuple21 a e))) (p (set (tuple21 a e))) (x a) (y e))
  (= (mem44 (tb2t2949 (Tuple2 a1 e1 (t2tb2 x) (t2tb2955 y)))
  (tb2t2943 (infix_lspl e1 a1 (t2tb2943 q) (t2tb2943 p))))
  (or
  (and (mem44 (tb2t2949 (Tuple2 a1 e1 (t2tb2 x) (t2tb2955 y))) q)
  (not (mem1 x (tb2t1 (dom e1 a1 (t2tb2943 p)))))) (mem44
  (tb2t2949 (Tuple2 a1 e1 (t2tb2 x) (t2tb2955 y))) p)))))

;; mem_overriding
  (assert
  (forall ((q (set (tuple21 a d))) (p (set (tuple21 a d))) (x a) (y d))
  (= (mem32 (tb2t904 (Tuple2 a1 d1 (t2tb2 x) (t2tb694 y)))
  (tb2t903 (infix_lspl d1 a1 (t2tb903 q) (t2tb903 p))))
  (or
  (and (mem32 (tb2t904 (Tuple2 a1 d1 (t2tb2 x) (t2tb694 y))) q)
  (not (mem1 x (tb2t1 (dom d1 a1 (t2tb903 p)))))) (mem32
  (tb2t904 (Tuple2 a1 d1 (t2tb2 x) (t2tb694 y))) p)))))

;; mem_overriding
  (assert
  (forall ((q (set (tuple21 a (tuple21 b c)))) (p (set (tuple21 a (tuple21 b
  c)))) (x a) (y (tuple21 b c)))
  (= (mem14 (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 y)))
  (tb2t261 (infix_lspl (tuple2 b1 c1) a1 (t2tb261 q) (t2tb261 p))))
  (or
  (and (mem14 (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 y))) q)
  (not (mem1 x (tb2t1 (dom (tuple2 b1 c1) a1 (t2tb261 p)))))) (mem14
  (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 y))) p)))))

;; mem_overriding
  (assert
  (forall ((q (set (tuple21 a c))) (p (set (tuple21 a c))) (x a) (y c))
  (= (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y)))
  (tb2t129 (infix_lspl c1 a1 (t2tb129 q) (t2tb129 p))))
  (or
  (and (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y))) q)
  (not (mem1 x (tb2t1 (dom c1 a1 (t2tb129 p)))))) (mem10
  (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y))) p)))))

;; mem_overriding
  (assert
  (forall ((q (set (tuple21 a b))) (p (set (tuple21 a b))) (x a) (y b))
  (= (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y)))
  (tb2t11 (infix_lspl b1 a1 (t2tb11 q) (t2tb11 p))))
  (or
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y))) q)
  (not (mem1 x (tb2t1 (dom b1 a1 (t2tb11 p)))))) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y))) p)))))

;; mem_overriding
  (assert
  (forall ((b2 ty))
  (forall ((q uni) (p uni) (x a) (y uni))
  (= (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) y) (infix_lspl b2 a1 q p))
  (or
  (and (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) y) q)
  (not (mem1 x (tb2t1 (dom b2 a1 p))))) (mem (tuple2 a1 b2)
  (Tuple2 a1 b2 (t2tb2 x) y) p))))))

;; mem_overriding
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((q uni) (p uni) (x uni) (y uni))
  (= (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) (infix_lspl b2 a2 q p))
  (or
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) q)
  (not (mem a2 x (dom b2 a2 p)))) (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) p))))))

(declare-fun direct_product (ty ty ty uni uni) uni)

;; direct_product_sort
  (assert
  (forall ((a2 ty) (b2 ty) (c2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (tuple2 a2 (tuple2 b2 c2)))
  (direct_product c2 b2 a2 x x1)))))

(declare-fun direct_product1 ((set (tuple21 a b)) (set (tuple21 a
  c))) (set (tuple21 a (tuple21 b c))))

(declare-fun direct_product4 ((set (tuple21 a d)) (set (tuple21 a
  e))) (set (tuple21 a (tuple21 d e))))

;; mem_direct_product
  (assert
  (forall ((b2 ty))
  (forall ((f2 uni) (g (set (tuple21 (tuple21 b c) (tuple21 d e))))
  (x (tuple21 b c)) (y uni) (z (tuple21 d e)))
  (= (mem (tuple2 (tuple2 b1 c1) (tuple2 b2 (tuple2 d1 e1)))
  (Tuple2 (tuple2 b1 c1) (tuple2 b2 (tuple2 d1 e1)) (t2tb134 x)
  (Tuple2 b2 (tuple2 d1 e1) y (t2tb3457 z)))
  (direct_product (tuple2 d1 e1) b2 (tuple2 b1 c1) f2 (t2tb4102 g)))
  (and (mem (tuple2 (tuple2 b1 c1) b2)
  (Tuple2 (tuple2 b1 c1) b2 (t2tb134 x) y) f2) (mem49
  (tb2t4104 (Tuple2 (tuple2 b1 c1) (tuple2 d1 e1) (t2tb134 x) (t2tb3457 z)))
  g))))))

(declare-fun t2tb4865 ((set (tuple21 (tuple21 b c) (tuple21 (tuple21 d e)
  (tuple21 d e))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b c) (tuple21 (tuple21 d e) (tuple21 d
  e)))))) (sort
  (set1 (tuple2 (tuple2 b1 c1) (tuple2 (tuple2 d1 e1) (tuple2 d1 e1))))
  (t2tb4865 x))))

(declare-fun tb2t4865 (uni) (set (tuple21 (tuple21 b c) (tuple21 (tuple21 d
  e) (tuple21 d e)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b c) (tuple21 (tuple21 d e) (tuple21 d
  e)))))) (! (= (tb2t4865 (t2tb4865 i)) i) :pattern ((t2tb4865 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 b1 c1) (tuple2 (tuple2 d1 e1) (tuple2 d1 e1)))) j)
     (= (t2tb4865 (tb2t4865 j)) j)) :pattern ((t2tb4865 (tb2t4865 j))) )))

(declare-fun t2tb4866 ((tuple21 (tuple21 b c) (tuple21 (tuple21 d e)
  (tuple21 d e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b c) (tuple21 (tuple21 d e) (tuple21 d e)))))
  (sort (tuple2 (tuple2 b1 c1) (tuple2 (tuple2 d1 e1) (tuple2 d1 e1)))
  (t2tb4866 x))))

(declare-fun tb2t4866 (uni) (tuple21 (tuple21 b c) (tuple21 (tuple21 d e)
  (tuple21 d e))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b c) (tuple21 (tuple21 d e) (tuple21 d e)))))
  (! (= (tb2t4866 (t2tb4866 i)) i) :pattern ((t2tb4866 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 c1) (tuple2 (tuple2 d1 e1) (tuple2 d1 e1)))
     j) (= (t2tb4866 (tb2t4866 j)) j)) :pattern ((t2tb4866 (tb2t4866 j))) )))

;; mem_direct_product
  (assert
  (forall ((f2 (set (tuple21 (tuple21 b c) (tuple21 d e))))
  (g (set (tuple21 (tuple21 b c) (tuple21 d e)))) (x (tuple21 b c))
  (y (tuple21 d e)) (z (tuple21 d e)))
  (= (mem (tuple2 (tuple2 b1 c1) (tuple2 (tuple2 d1 e1) (tuple2 d1 e1)))
  (Tuple2 (tuple2 b1 c1) (tuple2 (tuple2 d1 e1) (tuple2 d1 e1)) (t2tb134 x)
  (Tuple2 (tuple2 d1 e1) (tuple2 d1 e1) (t2tb3457 y) (t2tb3457 z)))
  (direct_product (tuple2 d1 e1) (tuple2 d1 e1) (tuple2 b1 c1) (t2tb4102 f2)
  (t2tb4102 g)))
  (and (mem49
  (tb2t4104 (Tuple2 (tuple2 b1 c1) (tuple2 d1 e1) (t2tb134 x) (t2tb3457 y)))
  f2) (mem49
  (tb2t4104 (Tuple2 (tuple2 b1 c1) (tuple2 d1 e1) (t2tb134 x) (t2tb3457 z)))
  g)))))

;; mem_direct_product
  (assert
  (forall ((c2 ty))
  (forall ((f2 (set (tuple21 (tuple21 b c) (tuple21 d e)))) (g uni)
  (x (tuple21 b c)) (y (tuple21 d e)) (z uni))
  (= (mem (tuple2 (tuple2 b1 c1) (tuple2 (tuple2 d1 e1) c2))
  (Tuple2 (tuple2 b1 c1) (tuple2 (tuple2 d1 e1) c2) (t2tb134 x)
  (Tuple2 (tuple2 d1 e1) c2 (t2tb3457 y) z))
  (direct_product c2 (tuple2 d1 e1) (tuple2 b1 c1) (t2tb4102 f2) g))
  (and (mem49
  (tb2t4104 (Tuple2 (tuple2 b1 c1) (tuple2 d1 e1) (t2tb134 x) (t2tb3457 y)))
  f2) (mem (tuple2 (tuple2 b1 c1) c2)
  (Tuple2 (tuple2 b1 c1) c2 (t2tb134 x) z) g))))))

;; mem_direct_product
  (assert
  (forall ((f2 (set (tuple21 (tuple21 b c) d))) (g (set (tuple21 (tuple21 b
  c) e))) (x (tuple21 b c)) (y d) (z e))
  (= (mem49
  (tb2t4104
  (Tuple2 (tuple2 b1 c1) (tuple2 d1 e1) (t2tb134 x)
  (Tuple2 d1 e1 (t2tb694 y) (t2tb2955 z))))
  (tb2t4102 (direct_product e1 d1 (tuple2 b1 c1) (t2tb4859 f2) (t2tb4857 g))))
  (and (mem (tuple2 (tuple2 b1 c1) d1)
  (Tuple2 (tuple2 b1 c1) d1 (t2tb134 x) (t2tb694 y)) (t2tb4859 f2)) (mem
  (tuple2 (tuple2 b1 c1) e1)
  (Tuple2 (tuple2 b1 c1) e1 (t2tb134 x) (t2tb2955 z)) (t2tb4857 g))))))

;; mem_direct_product
  (assert
  (forall ((b2 ty))
  (forall ((f2 uni) (g (set (tuple21 c e))) (x c) (y uni) (z e))
  (= (mem (tuple2 c1 (tuple2 b2 e1))
  (Tuple2 c1 (tuple2 b2 e1) (t2tb135 x) (Tuple2 b2 e1 y (t2tb2955 z)))
  (direct_product e1 b2 c1 f2 (t2tb3478 g)))
  (and (mem (tuple2 c1 b2) (Tuple2 c1 b2 (t2tb135 x) y) f2) (mem46
  (tb2t3479 (Tuple2 c1 e1 (t2tb135 x) (t2tb2955 z))) g))))))

(declare-fun t2tb4867 ((set (tuple21 c (tuple21 e e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 c (tuple21 e e))))) (sort
  (set1 (tuple2 c1 (tuple2 e1 e1))) (t2tb4867 x))))

(declare-fun tb2t4867 (uni) (set (tuple21 c (tuple21 e e))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 c (tuple21 e e)))))
  (! (= (tb2t4867 (t2tb4867 i)) i) :pattern ((t2tb4867 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 c1 (tuple2 e1 e1))) j)
     (= (t2tb4867 (tb2t4867 j)) j)) :pattern ((t2tb4867 (tb2t4867 j))) )))

(declare-fun t2tb4868 ((tuple21 c (tuple21 e e))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 c (tuple21 e e)))) (sort (tuple2 c1 (tuple2 e1 e1))
  (t2tb4868 x))))

(declare-fun tb2t4868 (uni) (tuple21 c (tuple21 e e)))

;; BridgeL
  (assert
  (forall ((i (tuple21 c (tuple21 e e))))
  (! (= (tb2t4868 (t2tb4868 i)) i) :pattern ((t2tb4868 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 c1 (tuple2 e1 e1)) j) (= (t2tb4868 (tb2t4868 j)) j)) :pattern (
  (t2tb4868 (tb2t4868 j))) )))

;; mem_direct_product
  (assert
  (forall ((f2 (set (tuple21 c e))) (g (set (tuple21 c e))) (x c) (y e)
  (z e))
  (= (mem (tuple2 c1 (tuple2 e1 e1))
  (Tuple2 c1 (tuple2 e1 e1) (t2tb135 x)
  (Tuple2 e1 e1 (t2tb2955 y) (t2tb2955 z)))
  (direct_product e1 e1 c1 (t2tb3478 f2) (t2tb3478 g)))
  (and (mem46 (tb2t3479 (Tuple2 c1 e1 (t2tb135 x) (t2tb2955 y))) f2) (mem46
  (tb2t3479 (Tuple2 c1 e1 (t2tb135 x) (t2tb2955 z))) g)))))

;; mem_direct_product
  (assert
  (forall ((c2 ty))
  (forall ((f2 (set (tuple21 c e))) (g uni) (x c) (y e) (z uni))
  (= (mem (tuple2 c1 (tuple2 e1 c2))
  (Tuple2 c1 (tuple2 e1 c2) (t2tb135 x) (Tuple2 e1 c2 (t2tb2955 y) z))
  (direct_product c2 e1 c1 (t2tb3478 f2) g))
  (and (mem46 (tb2t3479 (Tuple2 c1 e1 (t2tb135 x) (t2tb2955 y))) f2) (mem
  (tuple2 c1 c2) (Tuple2 c1 c2 (t2tb135 x) z) g))))))

;; mem_direct_product
  (assert
  (forall ((b2 ty))
  (forall ((f2 uni) (g (set (tuple21 b d))) (x b) (y uni) (z d))
  (= (mem (tuple2 b1 (tuple2 b2 d1))
  (Tuple2 b1 (tuple2 b2 d1) (t2tb14 x) (Tuple2 b2 d1 y (t2tb694 z)))
  (direct_product d1 b2 b1 f2 (t2tb687 g)))
  (and (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) y) f2) (mem23
  (tb2t692 (Tuple2 b1 d1 (t2tb14 x) (t2tb694 z))) g))))))

(declare-fun t2tb4869 ((set (tuple21 b (tuple21 d d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 b (tuple21 d d))))) (sort
  (set1 (tuple2 b1 (tuple2 d1 d1))) (t2tb4869 x))))

(declare-fun tb2t4869 (uni) (set (tuple21 b (tuple21 d d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 b (tuple21 d d)))))
  (! (= (tb2t4869 (t2tb4869 i)) i) :pattern ((t2tb4869 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 b1 (tuple2 d1 d1))) j)
     (= (t2tb4869 (tb2t4869 j)) j)) :pattern ((t2tb4869 (tb2t4869 j))) )))

(declare-fun t2tb4870 ((tuple21 b (tuple21 d d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 b (tuple21 d d)))) (sort (tuple2 b1 (tuple2 d1 d1))
  (t2tb4870 x))))

(declare-fun tb2t4870 (uni) (tuple21 b (tuple21 d d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 b (tuple21 d d))))
  (! (= (tb2t4870 (t2tb4870 i)) i) :pattern ((t2tb4870 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 b1 (tuple2 d1 d1)) j) (= (t2tb4870 (tb2t4870 j)) j)) :pattern (
  (t2tb4870 (tb2t4870 j))) )))

;; mem_direct_product
  (assert
  (forall ((f2 (set (tuple21 b d))) (g (set (tuple21 b d))) (x b) (y d)
  (z d))
  (= (mem (tuple2 b1 (tuple2 d1 d1))
  (Tuple2 b1 (tuple2 d1 d1) (t2tb14 x)
  (Tuple2 d1 d1 (t2tb694 y) (t2tb694 z)))
  (direct_product d1 d1 b1 (t2tb687 f2) (t2tb687 g)))
  (and (mem23 (tb2t692 (Tuple2 b1 d1 (t2tb14 x) (t2tb694 y))) f2) (mem23
  (tb2t692 (Tuple2 b1 d1 (t2tb14 x) (t2tb694 z))) g)))))

;; mem_direct_product
  (assert
  (forall ((c2 ty))
  (forall ((f2 (set (tuple21 b d))) (g uni) (x b) (y d) (z uni))
  (= (mem (tuple2 b1 (tuple2 d1 c2))
  (Tuple2 b1 (tuple2 d1 c2) (t2tb14 x) (Tuple2 d1 c2 (t2tb694 y) z))
  (direct_product c2 d1 b1 (t2tb687 f2) g))
  (and (mem23 (tb2t692 (Tuple2 b1 d1 (t2tb14 x) (t2tb694 y))) f2) (mem
  (tuple2 b1 c2) (Tuple2 b1 c2 (t2tb14 x) z) g))))))

;; mem_direct_product
  (assert
  (forall ((b2 ty))
  (forall ((f2 uni) (g (set (tuple21 a (tuple21 d e)))) (x a) (y uni)
  (z (tuple21 d e)))
  (= (mem (tuple2 a1 (tuple2 b2 (tuple2 d1 e1)))
  (Tuple2 a1 (tuple2 b2 (tuple2 d1 e1)) (t2tb2 x)
  (Tuple2 b2 (tuple2 d1 e1) y (t2tb3457 z)))
  (direct_product (tuple2 d1 e1) b2 a1 f2 (t2tb4103 g)))
  (and (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) y) f2) (mem48
  (tb2t4105 (Tuple2 a1 (tuple2 d1 e1) (t2tb2 x) (t2tb3457 z))) g))))))

;; mem_direct_product
  (assert
  (forall ((b2 ty))
  (forall ((f2 uni) (g (set (tuple21 a e))) (x a) (y uni) (z e))
  (= (mem (tuple2 a1 (tuple2 b2 e1))
  (Tuple2 a1 (tuple2 b2 e1) (t2tb2 x) (Tuple2 b2 e1 y (t2tb2955 z)))
  (direct_product e1 b2 a1 f2 (t2tb2943 g)))
  (and (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) y) f2) (mem44
  (tb2t2949 (Tuple2 a1 e1 (t2tb2 x) (t2tb2955 z))) g))))))

;; mem_direct_product
  (assert
  (forall ((b2 ty))
  (forall ((f2 uni) (g (set (tuple21 a d))) (x a) (y uni) (z d))
  (= (mem (tuple2 a1 (tuple2 b2 d1))
  (Tuple2 a1 (tuple2 b2 d1) (t2tb2 x) (Tuple2 b2 d1 y (t2tb694 z)))
  (direct_product d1 b2 a1 f2 (t2tb903 g)))
  (and (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) y) f2) (mem32
  (tb2t904 (Tuple2 a1 d1 (t2tb2 x) (t2tb694 z))) g))))))

;; mem_direct_product
  (assert
  (forall ((b2 ty))
  (forall ((f2 uni) (g (set (tuple21 a (tuple21 b c)))) (x a) (y uni)
  (z (tuple21 b c)))
  (= (mem (tuple2 a1 (tuple2 b2 (tuple2 b1 c1)))
  (Tuple2 a1 (tuple2 b2 (tuple2 b1 c1)) (t2tb2 x)
  (Tuple2 b2 (tuple2 b1 c1) y (t2tb134 z)))
  (direct_product (tuple2 b1 c1) b2 a1 f2 (t2tb261 g)))
  (and (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) y) f2) (mem14
  (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 z))) g))))))

;; mem_direct_product
  (assert
  (forall ((b2 ty))
  (forall ((f2 uni) (g (set (tuple21 a c))) (x a) (y uni) (z c))
  (= (mem (tuple2 a1 (tuple2 b2 c1))
  (Tuple2 a1 (tuple2 b2 c1) (t2tb2 x) (Tuple2 b2 c1 y (t2tb135 z)))
  (direct_product c1 b2 a1 f2 (t2tb129 g)))
  (and (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) y) f2) (mem10
  (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 z))) g))))))

;; mem_direct_product
  (assert
  (forall ((b2 ty))
  (forall ((f2 uni) (g (set (tuple21 a b))) (x a) (y uni) (z b))
  (= (mem (tuple2 a1 (tuple2 b2 b1))
  (Tuple2 a1 (tuple2 b2 b1) (t2tb2 x) (Tuple2 b2 b1 y (t2tb14 z)))
  (direct_product b1 b2 a1 f2 (t2tb11 g)))
  (and (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) y) f2) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 z))) g))))))

(declare-fun t2tb4871 ((set (tuple21 a (tuple21 (tuple21 d e) (tuple21 d
  e))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (tuple21 (tuple21 d e) (tuple21 d e)))))) (sort
  (set1 (tuple2 a1 (tuple2 (tuple2 d1 e1) (tuple2 d1 e1)))) (t2tb4871 x))))

(declare-fun tb2t4871 (uni) (set (tuple21 a (tuple21 (tuple21 d e) (tuple21 d
  e)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (tuple21 (tuple21 d e) (tuple21 d e))))))
  (! (= (tb2t4871 (t2tb4871 i)) i) :pattern ((t2tb4871 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (tuple2 (tuple2 d1 e1) (tuple2 d1 e1)))) j)
     (= (t2tb4871 (tb2t4871 j)) j)) :pattern ((t2tb4871 (tb2t4871 j))) )))

(declare-fun t2tb4872 ((tuple21 a (tuple21 (tuple21 d e) (tuple21 d
  e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (tuple21 (tuple21 d e) (tuple21 d e))))) (sort
  (tuple2 a1 (tuple2 (tuple2 d1 e1) (tuple2 d1 e1))) (t2tb4872 x))))

(declare-fun tb2t4872 (uni) (tuple21 a (tuple21 (tuple21 d e) (tuple21 d
  e))))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (tuple21 (tuple21 d e) (tuple21 d e)))))
  (! (= (tb2t4872 (t2tb4872 i)) i) :pattern ((t2tb4872 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (tuple2 (tuple2 d1 e1) (tuple2 d1 e1))) j)
     (= (t2tb4872 (tb2t4872 j)) j)) :pattern ((t2tb4872 (tb2t4872 j))) )))

;; mem_direct_product
  (assert
  (forall ((f2 (set (tuple21 a (tuple21 d e)))) (g (set (tuple21 a (tuple21 d
  e)))) (x a) (y (tuple21 d e)) (z (tuple21 d e)))
  (= (mem (tuple2 a1 (tuple2 (tuple2 d1 e1) (tuple2 d1 e1)))
  (Tuple2 a1 (tuple2 (tuple2 d1 e1) (tuple2 d1 e1)) (t2tb2 x)
  (Tuple2 (tuple2 d1 e1) (tuple2 d1 e1) (t2tb3457 y) (t2tb3457 z)))
  (direct_product (tuple2 d1 e1) (tuple2 d1 e1) a1 (t2tb4103 f2)
  (t2tb4103 g)))
  (and (mem48 (tb2t4105 (Tuple2 a1 (tuple2 d1 e1) (t2tb2 x) (t2tb3457 y)))
  f2) (mem48 (tb2t4105 (Tuple2 a1 (tuple2 d1 e1) (t2tb2 x) (t2tb3457 z))) g)))))

(declare-fun t2tb4873 ((set (tuple21 a (tuple21 (tuple21 d e) e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (tuple21 (tuple21 d e) e))))) (sort
  (set1 (tuple2 a1 (tuple2 (tuple2 d1 e1) e1))) (t2tb4873 x))))

(declare-fun tb2t4873 (uni) (set (tuple21 a (tuple21 (tuple21 d e) e))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (tuple21 (tuple21 d e) e)))))
  (! (= (tb2t4873 (t2tb4873 i)) i) :pattern ((t2tb4873 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (tuple2 (tuple2 d1 e1) e1))) j)
     (= (t2tb4873 (tb2t4873 j)) j)) :pattern ((t2tb4873 (tb2t4873 j))) )))

(declare-fun t2tb4874 ((tuple21 a (tuple21 (tuple21 d e) e))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (tuple21 (tuple21 d e) e)))) (sort
  (tuple2 a1 (tuple2 (tuple2 d1 e1) e1)) (t2tb4874 x))))

(declare-fun tb2t4874 (uni) (tuple21 a (tuple21 (tuple21 d e) e)))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (tuple21 (tuple21 d e) e))))
  (! (= (tb2t4874 (t2tb4874 i)) i) :pattern ((t2tb4874 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (tuple2 (tuple2 d1 e1) e1)) j)
     (= (t2tb4874 (tb2t4874 j)) j)) :pattern ((t2tb4874 (tb2t4874 j))) )))

;; mem_direct_product
  (assert
  (forall ((f2 (set (tuple21 a (tuple21 d e)))) (g (set (tuple21 a e))) (x a)
  (y (tuple21 d e)) (z e))
  (= (mem (tuple2 a1 (tuple2 (tuple2 d1 e1) e1))
  (Tuple2 a1 (tuple2 (tuple2 d1 e1) e1) (t2tb2 x)
  (Tuple2 (tuple2 d1 e1) e1 (t2tb3457 y) (t2tb2955 z)))
  (direct_product e1 (tuple2 d1 e1) a1 (t2tb4103 f2) (t2tb2943 g)))
  (and (mem48 (tb2t4105 (Tuple2 a1 (tuple2 d1 e1) (t2tb2 x) (t2tb3457 y)))
  f2) (mem44 (tb2t2949 (Tuple2 a1 e1 (t2tb2 x) (t2tb2955 z))) g)))))

(declare-fun t2tb4875 ((set (tuple21 a (tuple21 (tuple21 d e) d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (tuple21 (tuple21 d e) d))))) (sort
  (set1 (tuple2 a1 (tuple2 (tuple2 d1 e1) d1))) (t2tb4875 x))))

(declare-fun tb2t4875 (uni) (set (tuple21 a (tuple21 (tuple21 d e) d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (tuple21 (tuple21 d e) d)))))
  (! (= (tb2t4875 (t2tb4875 i)) i) :pattern ((t2tb4875 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (tuple2 (tuple2 d1 e1) d1))) j)
     (= (t2tb4875 (tb2t4875 j)) j)) :pattern ((t2tb4875 (tb2t4875 j))) )))

(declare-fun t2tb4876 ((tuple21 a (tuple21 (tuple21 d e) d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (tuple21 (tuple21 d e) d)))) (sort
  (tuple2 a1 (tuple2 (tuple2 d1 e1) d1)) (t2tb4876 x))))

(declare-fun tb2t4876 (uni) (tuple21 a (tuple21 (tuple21 d e) d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (tuple21 (tuple21 d e) d))))
  (! (= (tb2t4876 (t2tb4876 i)) i) :pattern ((t2tb4876 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (tuple2 (tuple2 d1 e1) d1)) j)
     (= (t2tb4876 (tb2t4876 j)) j)) :pattern ((t2tb4876 (tb2t4876 j))) )))

;; mem_direct_product
  (assert
  (forall ((f2 (set (tuple21 a (tuple21 d e)))) (g (set (tuple21 a d))) (x a)
  (y (tuple21 d e)) (z d))
  (= (mem (tuple2 a1 (tuple2 (tuple2 d1 e1) d1))
  (Tuple2 a1 (tuple2 (tuple2 d1 e1) d1) (t2tb2 x)
  (Tuple2 (tuple2 d1 e1) d1 (t2tb3457 y) (t2tb694 z)))
  (direct_product d1 (tuple2 d1 e1) a1 (t2tb4103 f2) (t2tb903 g)))
  (and (mem48 (tb2t4105 (Tuple2 a1 (tuple2 d1 e1) (t2tb2 x) (t2tb3457 y)))
  f2) (mem32 (tb2t904 (Tuple2 a1 d1 (t2tb2 x) (t2tb694 z))) g)))))

(declare-fun t2tb4877 ((set (tuple21 a (tuple21 (tuple21 d e) (tuple21 b
  c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (tuple21 (tuple21 d e) (tuple21 b c)))))) (sort
  (set1 (tuple2 a1 (tuple2 (tuple2 d1 e1) (tuple2 b1 c1)))) (t2tb4877 x))))

(declare-fun tb2t4877 (uni) (set (tuple21 a (tuple21 (tuple21 d e) (tuple21 b
  c)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (tuple21 (tuple21 d e) (tuple21 b c))))))
  (! (= (tb2t4877 (t2tb4877 i)) i) :pattern ((t2tb4877 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (tuple2 (tuple2 d1 e1) (tuple2 b1 c1)))) j)
     (= (t2tb4877 (tb2t4877 j)) j)) :pattern ((t2tb4877 (tb2t4877 j))) )))

(declare-fun t2tb4878 ((tuple21 a (tuple21 (tuple21 d e) (tuple21 b
  c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (tuple21 (tuple21 d e) (tuple21 b c))))) (sort
  (tuple2 a1 (tuple2 (tuple2 d1 e1) (tuple2 b1 c1))) (t2tb4878 x))))

(declare-fun tb2t4878 (uni) (tuple21 a (tuple21 (tuple21 d e) (tuple21 b
  c))))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (tuple21 (tuple21 d e) (tuple21 b c)))))
  (! (= (tb2t4878 (t2tb4878 i)) i) :pattern ((t2tb4878 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (tuple2 (tuple2 d1 e1) (tuple2 b1 c1))) j)
     (= (t2tb4878 (tb2t4878 j)) j)) :pattern ((t2tb4878 (tb2t4878 j))) )))

;; mem_direct_product
  (assert
  (forall ((f2 (set (tuple21 a (tuple21 d e)))) (g (set (tuple21 a (tuple21 b
  c)))) (x a) (y (tuple21 d e)) (z (tuple21 b c)))
  (= (mem (tuple2 a1 (tuple2 (tuple2 d1 e1) (tuple2 b1 c1)))
  (Tuple2 a1 (tuple2 (tuple2 d1 e1) (tuple2 b1 c1)) (t2tb2 x)
  (Tuple2 (tuple2 d1 e1) (tuple2 b1 c1) (t2tb3457 y) (t2tb134 z)))
  (direct_product (tuple2 b1 c1) (tuple2 d1 e1) a1 (t2tb4103 f2) (t2tb261 g)))
  (and (mem48 (tb2t4105 (Tuple2 a1 (tuple2 d1 e1) (t2tb2 x) (t2tb3457 y)))
  f2) (mem14 (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 z))) g)))))

(declare-fun t2tb4879 ((set (tuple21 a (tuple21 (tuple21 d e) c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (tuple21 (tuple21 d e) c))))) (sort
  (set1 (tuple2 a1 (tuple2 (tuple2 d1 e1) c1))) (t2tb4879 x))))

(declare-fun tb2t4879 (uni) (set (tuple21 a (tuple21 (tuple21 d e) c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (tuple21 (tuple21 d e) c)))))
  (! (= (tb2t4879 (t2tb4879 i)) i) :pattern ((t2tb4879 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (tuple2 (tuple2 d1 e1) c1))) j)
     (= (t2tb4879 (tb2t4879 j)) j)) :pattern ((t2tb4879 (tb2t4879 j))) )))

(declare-fun t2tb4880 ((tuple21 a (tuple21 (tuple21 d e) c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (tuple21 (tuple21 d e) c)))) (sort
  (tuple2 a1 (tuple2 (tuple2 d1 e1) c1)) (t2tb4880 x))))

(declare-fun tb2t4880 (uni) (tuple21 a (tuple21 (tuple21 d e) c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (tuple21 (tuple21 d e) c))))
  (! (= (tb2t4880 (t2tb4880 i)) i) :pattern ((t2tb4880 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (tuple2 (tuple2 d1 e1) c1)) j)
     (= (t2tb4880 (tb2t4880 j)) j)) :pattern ((t2tb4880 (tb2t4880 j))) )))

;; mem_direct_product
  (assert
  (forall ((f2 (set (tuple21 a (tuple21 d e)))) (g (set (tuple21 a c))) (x a)
  (y (tuple21 d e)) (z c))
  (= (mem (tuple2 a1 (tuple2 (tuple2 d1 e1) c1))
  (Tuple2 a1 (tuple2 (tuple2 d1 e1) c1) (t2tb2 x)
  (Tuple2 (tuple2 d1 e1) c1 (t2tb3457 y) (t2tb135 z)))
  (direct_product c1 (tuple2 d1 e1) a1 (t2tb4103 f2) (t2tb129 g)))
  (and (mem48 (tb2t4105 (Tuple2 a1 (tuple2 d1 e1) (t2tb2 x) (t2tb3457 y)))
  f2) (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 z))) g)))))

(declare-fun t2tb4881 ((set (tuple21 a (tuple21 (tuple21 d e) b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (tuple21 (tuple21 d e) b))))) (sort
  (set1 (tuple2 a1 (tuple2 (tuple2 d1 e1) b1))) (t2tb4881 x))))

(declare-fun tb2t4881 (uni) (set (tuple21 a (tuple21 (tuple21 d e) b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (tuple21 (tuple21 d e) b)))))
  (! (= (tb2t4881 (t2tb4881 i)) i) :pattern ((t2tb4881 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (tuple2 (tuple2 d1 e1) b1))) j)
     (= (t2tb4881 (tb2t4881 j)) j)) :pattern ((t2tb4881 (tb2t4881 j))) )))

(declare-fun t2tb4882 ((tuple21 a (tuple21 (tuple21 d e) b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (tuple21 (tuple21 d e) b)))) (sort
  (tuple2 a1 (tuple2 (tuple2 d1 e1) b1)) (t2tb4882 x))))

(declare-fun tb2t4882 (uni) (tuple21 a (tuple21 (tuple21 d e) b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (tuple21 (tuple21 d e) b))))
  (! (= (tb2t4882 (t2tb4882 i)) i) :pattern ((t2tb4882 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (tuple2 (tuple2 d1 e1) b1)) j)
     (= (t2tb4882 (tb2t4882 j)) j)) :pattern ((t2tb4882 (tb2t4882 j))) )))

;; mem_direct_product
  (assert
  (forall ((f2 (set (tuple21 a (tuple21 d e)))) (g (set (tuple21 a b))) (x a)
  (y (tuple21 d e)) (z b))
  (= (mem (tuple2 a1 (tuple2 (tuple2 d1 e1) b1))
  (Tuple2 a1 (tuple2 (tuple2 d1 e1) b1) (t2tb2 x)
  (Tuple2 (tuple2 d1 e1) b1 (t2tb3457 y) (t2tb14 z)))
  (direct_product b1 (tuple2 d1 e1) a1 (t2tb4103 f2) (t2tb11 g)))
  (and (mem48 (tb2t4105 (Tuple2 a1 (tuple2 d1 e1) (t2tb2 x) (t2tb3457 y)))
  f2) (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 z))) g)))))

;; mem_direct_product
  (assert
  (forall ((c2 ty))
  (forall ((f2 (set (tuple21 a (tuple21 d e)))) (g uni) (x a) (y (tuple21 d
  e)) (z uni))
  (= (mem (tuple2 a1 (tuple2 (tuple2 d1 e1) c2))
  (Tuple2 a1 (tuple2 (tuple2 d1 e1) c2) (t2tb2 x)
  (Tuple2 (tuple2 d1 e1) c2 (t2tb3457 y) z))
  (direct_product c2 (tuple2 d1 e1) a1 (t2tb4103 f2) g))
  (and (mem48 (tb2t4105 (Tuple2 a1 (tuple2 d1 e1) (t2tb2 x) (t2tb3457 y)))
  f2) (mem (tuple2 a1 c2) (Tuple2 a1 c2 (t2tb2 x) z) g))))))

(declare-fun t2tb4883 ((set (tuple21 a (tuple21 e (tuple21 d e))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (tuple21 e (tuple21 d e)))))) (sort
  (set1 (tuple2 a1 (tuple2 e1 (tuple2 d1 e1)))) (t2tb4883 x))))

(declare-fun tb2t4883 (uni) (set (tuple21 a (tuple21 e (tuple21 d e)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (tuple21 e (tuple21 d e))))))
  (! (= (tb2t4883 (t2tb4883 i)) i) :pattern ((t2tb4883 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (tuple2 e1 (tuple2 d1 e1)))) j)
     (= (t2tb4883 (tb2t4883 j)) j)) :pattern ((t2tb4883 (tb2t4883 j))) )))

(declare-fun t2tb4884 ((tuple21 a (tuple21 e (tuple21 d e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (tuple21 e (tuple21 d e))))) (sort
  (tuple2 a1 (tuple2 e1 (tuple2 d1 e1))) (t2tb4884 x))))

(declare-fun tb2t4884 (uni) (tuple21 a (tuple21 e (tuple21 d e))))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (tuple21 e (tuple21 d e)))))
  (! (= (tb2t4884 (t2tb4884 i)) i) :pattern ((t2tb4884 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (tuple2 e1 (tuple2 d1 e1))) j)
     (= (t2tb4884 (tb2t4884 j)) j)) :pattern ((t2tb4884 (tb2t4884 j))) )))

;; mem_direct_product
  (assert
  (forall ((f2 (set (tuple21 a e))) (g (set (tuple21 a (tuple21 d e)))) (x a)
  (y e) (z (tuple21 d e)))
  (= (mem (tuple2 a1 (tuple2 e1 (tuple2 d1 e1)))
  (Tuple2 a1 (tuple2 e1 (tuple2 d1 e1)) (t2tb2 x)
  (Tuple2 e1 (tuple2 d1 e1) (t2tb2955 y) (t2tb3457 z)))
  (direct_product (tuple2 d1 e1) e1 a1 (t2tb2943 f2) (t2tb4103 g)))
  (and (mem44 (tb2t2949 (Tuple2 a1 e1 (t2tb2 x) (t2tb2955 y))) f2) (mem48
  (tb2t4105 (Tuple2 a1 (tuple2 d1 e1) (t2tb2 x) (t2tb3457 z))) g)))))

(declare-fun t2tb3940 ((set (tuple21 a (tuple21 e e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (tuple21 e e))))) (sort
  (set1 (tuple2 a1 (tuple2 e1 e1))) (t2tb3940 x))))

(declare-fun tb2t3940 (uni) (set (tuple21 a (tuple21 e e))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (tuple21 e e)))))
  (! (= (tb2t3940 (t2tb3940 i)) i) :pattern ((t2tb3940 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (tuple2 e1 e1))) j)
     (= (t2tb3940 (tb2t3940 j)) j)) :pattern ((t2tb3940 (tb2t3940 j))) )))

(declare-fun t2tb3941 ((tuple21 a (tuple21 e e))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (tuple21 e e)))) (sort (tuple2 a1 (tuple2 e1 e1))
  (t2tb3941 x))))

(declare-fun tb2t3941 (uni) (tuple21 a (tuple21 e e)))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (tuple21 e e))))
  (! (= (tb2t3941 (t2tb3941 i)) i) :pattern ((t2tb3941 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (tuple2 e1 e1)) j) (= (t2tb3941 (tb2t3941 j)) j)) :pattern (
  (t2tb3941 (tb2t3941 j))) )))

;; mem_direct_product
  (assert
  (forall ((f2 (set (tuple21 a e))) (g (set (tuple21 a e))) (x a) (y e)
  (z e))
  (= (mem (tuple2 a1 (tuple2 e1 e1))
  (Tuple2 a1 (tuple2 e1 e1) (t2tb2 x)
  (Tuple2 e1 e1 (t2tb2955 y) (t2tb2955 z)))
  (direct_product e1 e1 a1 (t2tb2943 f2) (t2tb2943 g)))
  (and (mem44 (tb2t2949 (Tuple2 a1 e1 (t2tb2 x) (t2tb2955 y))) f2) (mem44
  (tb2t2949 (Tuple2 a1 e1 (t2tb2 x) (t2tb2955 z))) g)))))

(declare-fun t2tb4885 ((set (tuple21 a (tuple21 e d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (tuple21 e d))))) (sort
  (set1 (tuple2 a1 (tuple2 e1 d1))) (t2tb4885 x))))

(declare-fun tb2t4885 (uni) (set (tuple21 a (tuple21 e d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (tuple21 e d)))))
  (! (= (tb2t4885 (t2tb4885 i)) i) :pattern ((t2tb4885 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (tuple2 e1 d1))) j)
     (= (t2tb4885 (tb2t4885 j)) j)) :pattern ((t2tb4885 (tb2t4885 j))) )))

(declare-fun t2tb4886 ((tuple21 a (tuple21 e d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (tuple21 e d)))) (sort (tuple2 a1 (tuple2 e1 d1))
  (t2tb4886 x))))

(declare-fun tb2t4886 (uni) (tuple21 a (tuple21 e d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (tuple21 e d))))
  (! (= (tb2t4886 (t2tb4886 i)) i) :pattern ((t2tb4886 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (tuple2 e1 d1)) j) (= (t2tb4886 (tb2t4886 j)) j)) :pattern (
  (t2tb4886 (tb2t4886 j))) )))

;; mem_direct_product
  (assert
  (forall ((f2 (set (tuple21 a e))) (g (set (tuple21 a d))) (x a) (y e)
  (z d))
  (= (mem (tuple2 a1 (tuple2 e1 d1))
  (Tuple2 a1 (tuple2 e1 d1) (t2tb2 x)
  (Tuple2 e1 d1 (t2tb2955 y) (t2tb694 z)))
  (direct_product d1 e1 a1 (t2tb2943 f2) (t2tb903 g)))
  (and (mem44 (tb2t2949 (Tuple2 a1 e1 (t2tb2 x) (t2tb2955 y))) f2) (mem32
  (tb2t904 (Tuple2 a1 d1 (t2tb2 x) (t2tb694 z))) g)))))

(declare-fun t2tb4887 ((set (tuple21 a (tuple21 e (tuple21 b c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (tuple21 e (tuple21 b c)))))) (sort
  (set1 (tuple2 a1 (tuple2 e1 (tuple2 b1 c1)))) (t2tb4887 x))))

(declare-fun tb2t4887 (uni) (set (tuple21 a (tuple21 e (tuple21 b c)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (tuple21 e (tuple21 b c))))))
  (! (= (tb2t4887 (t2tb4887 i)) i) :pattern ((t2tb4887 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (tuple2 e1 (tuple2 b1 c1)))) j)
     (= (t2tb4887 (tb2t4887 j)) j)) :pattern ((t2tb4887 (tb2t4887 j))) )))

(declare-fun t2tb4888 ((tuple21 a (tuple21 e (tuple21 b c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (tuple21 e (tuple21 b c))))) (sort
  (tuple2 a1 (tuple2 e1 (tuple2 b1 c1))) (t2tb4888 x))))

(declare-fun tb2t4888 (uni) (tuple21 a (tuple21 e (tuple21 b c))))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (tuple21 e (tuple21 b c)))))
  (! (= (tb2t4888 (t2tb4888 i)) i) :pattern ((t2tb4888 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (tuple2 e1 (tuple2 b1 c1))) j)
     (= (t2tb4888 (tb2t4888 j)) j)) :pattern ((t2tb4888 (tb2t4888 j))) )))

;; mem_direct_product
  (assert
  (forall ((f2 (set (tuple21 a e))) (g (set (tuple21 a (tuple21 b c)))) (x a)
  (y e) (z (tuple21 b c)))
  (= (mem (tuple2 a1 (tuple2 e1 (tuple2 b1 c1)))
  (Tuple2 a1 (tuple2 e1 (tuple2 b1 c1)) (t2tb2 x)
  (Tuple2 e1 (tuple2 b1 c1) (t2tb2955 y) (t2tb134 z)))
  (direct_product (tuple2 b1 c1) e1 a1 (t2tb2943 f2) (t2tb261 g)))
  (and (mem44 (tb2t2949 (Tuple2 a1 e1 (t2tb2 x) (t2tb2955 y))) f2) (mem14
  (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 z))) g)))))

(declare-fun t2tb4889 ((set (tuple21 a (tuple21 e c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (tuple21 e c))))) (sort
  (set1 (tuple2 a1 (tuple2 e1 c1))) (t2tb4889 x))))

(declare-fun tb2t4889 (uni) (set (tuple21 a (tuple21 e c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (tuple21 e c)))))
  (! (= (tb2t4889 (t2tb4889 i)) i) :pattern ((t2tb4889 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (tuple2 e1 c1))) j)
     (= (t2tb4889 (tb2t4889 j)) j)) :pattern ((t2tb4889 (tb2t4889 j))) )))

(declare-fun t2tb4890 ((tuple21 a (tuple21 e c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (tuple21 e c)))) (sort (tuple2 a1 (tuple2 e1 c1))
  (t2tb4890 x))))

(declare-fun tb2t4890 (uni) (tuple21 a (tuple21 e c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (tuple21 e c))))
  (! (= (tb2t4890 (t2tb4890 i)) i) :pattern ((t2tb4890 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (tuple2 e1 c1)) j) (= (t2tb4890 (tb2t4890 j)) j)) :pattern (
  (t2tb4890 (tb2t4890 j))) )))

;; mem_direct_product
  (assert
  (forall ((f2 (set (tuple21 a e))) (g (set (tuple21 a c))) (x a) (y e)
  (z c))
  (= (mem (tuple2 a1 (tuple2 e1 c1))
  (Tuple2 a1 (tuple2 e1 c1) (t2tb2 x)
  (Tuple2 e1 c1 (t2tb2955 y) (t2tb135 z)))
  (direct_product c1 e1 a1 (t2tb2943 f2) (t2tb129 g)))
  (and (mem44 (tb2t2949 (Tuple2 a1 e1 (t2tb2 x) (t2tb2955 y))) f2) (mem10
  (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 z))) g)))))

(declare-fun t2tb3942 ((set (tuple21 a (tuple21 e b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (tuple21 e b))))) (sort
  (set1 (tuple2 a1 (tuple2 e1 b1))) (t2tb3942 x))))

(declare-fun tb2t3942 (uni) (set (tuple21 a (tuple21 e b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (tuple21 e b)))))
  (! (= (tb2t3942 (t2tb3942 i)) i) :pattern ((t2tb3942 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (tuple2 e1 b1))) j)
     (= (t2tb3942 (tb2t3942 j)) j)) :pattern ((t2tb3942 (tb2t3942 j))) )))

(declare-fun t2tb3943 ((tuple21 a (tuple21 e b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (tuple21 e b)))) (sort (tuple2 a1 (tuple2 e1 b1))
  (t2tb3943 x))))

(declare-fun tb2t3943 (uni) (tuple21 a (tuple21 e b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (tuple21 e b))))
  (! (= (tb2t3943 (t2tb3943 i)) i) :pattern ((t2tb3943 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (tuple2 e1 b1)) j) (= (t2tb3943 (tb2t3943 j)) j)) :pattern (
  (t2tb3943 (tb2t3943 j))) )))

;; mem_direct_product
  (assert
  (forall ((f2 (set (tuple21 a e))) (g (set (tuple21 a b))) (x a) (y e)
  (z b))
  (= (mem (tuple2 a1 (tuple2 e1 b1))
  (Tuple2 a1 (tuple2 e1 b1) (t2tb2 x) (Tuple2 e1 b1 (t2tb2955 y) (t2tb14 z)))
  (direct_product b1 e1 a1 (t2tb2943 f2) (t2tb11 g)))
  (and (mem44 (tb2t2949 (Tuple2 a1 e1 (t2tb2 x) (t2tb2955 y))) f2) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 z))) g)))))

;; mem_direct_product
  (assert
  (forall ((c2 ty))
  (forall ((f2 (set (tuple21 a e))) (g uni) (x a) (y e) (z uni))
  (= (mem (tuple2 a1 (tuple2 e1 c2))
  (Tuple2 a1 (tuple2 e1 c2) (t2tb2 x) (Tuple2 e1 c2 (t2tb2955 y) z))
  (direct_product c2 e1 a1 (t2tb2943 f2) g))
  (and (mem44 (tb2t2949 (Tuple2 a1 e1 (t2tb2 x) (t2tb2955 y))) f2) (mem
  (tuple2 a1 c2) (Tuple2 a1 c2 (t2tb2 x) z) g))))))

(declare-fun t2tb4891 ((set (tuple21 a (tuple21 d (tuple21 d e))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (tuple21 d (tuple21 d e)))))) (sort
  (set1 (tuple2 a1 (tuple2 d1 (tuple2 d1 e1)))) (t2tb4891 x))))

(declare-fun tb2t4891 (uni) (set (tuple21 a (tuple21 d (tuple21 d e)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (tuple21 d (tuple21 d e))))))
  (! (= (tb2t4891 (t2tb4891 i)) i) :pattern ((t2tb4891 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (tuple2 d1 (tuple2 d1 e1)))) j)
     (= (t2tb4891 (tb2t4891 j)) j)) :pattern ((t2tb4891 (tb2t4891 j))) )))

(declare-fun t2tb4892 ((tuple21 a (tuple21 d (tuple21 d e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (tuple21 d (tuple21 d e))))) (sort
  (tuple2 a1 (tuple2 d1 (tuple2 d1 e1))) (t2tb4892 x))))

(declare-fun tb2t4892 (uni) (tuple21 a (tuple21 d (tuple21 d e))))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (tuple21 d (tuple21 d e)))))
  (! (= (tb2t4892 (t2tb4892 i)) i) :pattern ((t2tb4892 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (tuple2 d1 (tuple2 d1 e1))) j)
     (= (t2tb4892 (tb2t4892 j)) j)) :pattern ((t2tb4892 (tb2t4892 j))) )))

;; mem_direct_product
  (assert
  (forall ((f2 (set (tuple21 a d))) (g (set (tuple21 a (tuple21 d e)))) (x a)
  (y d) (z (tuple21 d e)))
  (= (mem (tuple2 a1 (tuple2 d1 (tuple2 d1 e1)))
  (Tuple2 a1 (tuple2 d1 (tuple2 d1 e1)) (t2tb2 x)
  (Tuple2 d1 (tuple2 d1 e1) (t2tb694 y) (t2tb3457 z)))
  (direct_product (tuple2 d1 e1) d1 a1 (t2tb903 f2) (t2tb4103 g)))
  (and (mem32 (tb2t904 (Tuple2 a1 d1 (t2tb2 x) (t2tb694 y))) f2) (mem48
  (tb2t4105 (Tuple2 a1 (tuple2 d1 e1) (t2tb2 x) (t2tb3457 z))) g)))))

;; mem_direct_product
  (assert
  (forall ((f2 (set (tuple21 a d))) (g (set (tuple21 a e))) (x a) (y d)
  (z e))
  (= (mem48
  (tb2t4105
  (Tuple2 a1 (tuple2 d1 e1) (t2tb2 x)
  (Tuple2 d1 e1 (t2tb694 y) (t2tb2955 z)))) (direct_product4 f2 g))
  (and (mem32 (tb2t904 (Tuple2 a1 d1 (t2tb2 x) (t2tb694 y))) f2) (mem44
  (tb2t2949 (Tuple2 a1 e1 (t2tb2 x) (t2tb2955 z))) g)))))

(declare-fun t2tb4893 ((set (tuple21 a (tuple21 d d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (tuple21 d d))))) (sort
  (set1 (tuple2 a1 (tuple2 d1 d1))) (t2tb4893 x))))

(declare-fun tb2t4893 (uni) (set (tuple21 a (tuple21 d d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (tuple21 d d)))))
  (! (= (tb2t4893 (t2tb4893 i)) i) :pattern ((t2tb4893 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (tuple2 d1 d1))) j)
     (= (t2tb4893 (tb2t4893 j)) j)) :pattern ((t2tb4893 (tb2t4893 j))) )))

(declare-fun t2tb4894 ((tuple21 a (tuple21 d d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (tuple21 d d)))) (sort (tuple2 a1 (tuple2 d1 d1))
  (t2tb4894 x))))

(declare-fun tb2t4894 (uni) (tuple21 a (tuple21 d d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (tuple21 d d))))
  (! (= (tb2t4894 (t2tb4894 i)) i) :pattern ((t2tb4894 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (tuple2 d1 d1)) j) (= (t2tb4894 (tb2t4894 j)) j)) :pattern (
  (t2tb4894 (tb2t4894 j))) )))

;; mem_direct_product
  (assert
  (forall ((f2 (set (tuple21 a d))) (g (set (tuple21 a d))) (x a) (y d)
  (z d))
  (= (mem (tuple2 a1 (tuple2 d1 d1))
  (Tuple2 a1 (tuple2 d1 d1) (t2tb2 x) (Tuple2 d1 d1 (t2tb694 y) (t2tb694 z)))
  (direct_product d1 d1 a1 (t2tb903 f2) (t2tb903 g)))
  (and (mem32 (tb2t904 (Tuple2 a1 d1 (t2tb2 x) (t2tb694 y))) f2) (mem32
  (tb2t904 (Tuple2 a1 d1 (t2tb2 x) (t2tb694 z))) g)))))

(declare-fun t2tb4895 ((set (tuple21 a (tuple21 d (tuple21 b c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (tuple21 d (tuple21 b c)))))) (sort
  (set1 (tuple2 a1 (tuple2 d1 (tuple2 b1 c1)))) (t2tb4895 x))))

(declare-fun tb2t4895 (uni) (set (tuple21 a (tuple21 d (tuple21 b c)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (tuple21 d (tuple21 b c))))))
  (! (= (tb2t4895 (t2tb4895 i)) i) :pattern ((t2tb4895 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (tuple2 d1 (tuple2 b1 c1)))) j)
     (= (t2tb4895 (tb2t4895 j)) j)) :pattern ((t2tb4895 (tb2t4895 j))) )))

(declare-fun t2tb4896 ((tuple21 a (tuple21 d (tuple21 b c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (tuple21 d (tuple21 b c))))) (sort
  (tuple2 a1 (tuple2 d1 (tuple2 b1 c1))) (t2tb4896 x))))

(declare-fun tb2t4896 (uni) (tuple21 a (tuple21 d (tuple21 b c))))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (tuple21 d (tuple21 b c)))))
  (! (= (tb2t4896 (t2tb4896 i)) i) :pattern ((t2tb4896 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (tuple2 d1 (tuple2 b1 c1))) j)
     (= (t2tb4896 (tb2t4896 j)) j)) :pattern ((t2tb4896 (tb2t4896 j))) )))

;; mem_direct_product
  (assert
  (forall ((f2 (set (tuple21 a d))) (g (set (tuple21 a (tuple21 b c)))) (x a)
  (y d) (z (tuple21 b c)))
  (= (mem (tuple2 a1 (tuple2 d1 (tuple2 b1 c1)))
  (Tuple2 a1 (tuple2 d1 (tuple2 b1 c1)) (t2tb2 x)
  (Tuple2 d1 (tuple2 b1 c1) (t2tb694 y) (t2tb134 z)))
  (direct_product (tuple2 b1 c1) d1 a1 (t2tb903 f2) (t2tb261 g)))
  (and (mem32 (tb2t904 (Tuple2 a1 d1 (t2tb2 x) (t2tb694 y))) f2) (mem14
  (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 z))) g)))))

(declare-fun t2tb4897 ((set (tuple21 a (tuple21 d c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (tuple21 d c))))) (sort
  (set1 (tuple2 a1 (tuple2 d1 c1))) (t2tb4897 x))))

(declare-fun tb2t4897 (uni) (set (tuple21 a (tuple21 d c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (tuple21 d c)))))
  (! (= (tb2t4897 (t2tb4897 i)) i) :pattern ((t2tb4897 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (tuple2 d1 c1))) j)
     (= (t2tb4897 (tb2t4897 j)) j)) :pattern ((t2tb4897 (tb2t4897 j))) )))

(declare-fun t2tb4898 ((tuple21 a (tuple21 d c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (tuple21 d c)))) (sort (tuple2 a1 (tuple2 d1 c1))
  (t2tb4898 x))))

(declare-fun tb2t4898 (uni) (tuple21 a (tuple21 d c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (tuple21 d c))))
  (! (= (tb2t4898 (t2tb4898 i)) i) :pattern ((t2tb4898 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (tuple2 d1 c1)) j) (= (t2tb4898 (tb2t4898 j)) j)) :pattern (
  (t2tb4898 (tb2t4898 j))) )))

;; mem_direct_product
  (assert
  (forall ((f2 (set (tuple21 a d))) (g (set (tuple21 a c))) (x a) (y d)
  (z c))
  (= (mem (tuple2 a1 (tuple2 d1 c1))
  (Tuple2 a1 (tuple2 d1 c1) (t2tb2 x) (Tuple2 d1 c1 (t2tb694 y) (t2tb135 z)))
  (direct_product c1 d1 a1 (t2tb903 f2) (t2tb129 g)))
  (and (mem32 (tb2t904 (Tuple2 a1 d1 (t2tb2 x) (t2tb694 y))) f2) (mem10
  (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 z))) g)))))

(declare-fun t2tb4899 ((set (tuple21 a (tuple21 d b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (tuple21 d b))))) (sort
  (set1 (tuple2 a1 (tuple2 d1 b1))) (t2tb4899 x))))

(declare-fun tb2t4899 (uni) (set (tuple21 a (tuple21 d b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (tuple21 d b)))))
  (! (= (tb2t4899 (t2tb4899 i)) i) :pattern ((t2tb4899 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (tuple2 d1 b1))) j)
     (= (t2tb4899 (tb2t4899 j)) j)) :pattern ((t2tb4899 (tb2t4899 j))) )))

(declare-fun t2tb4900 ((tuple21 a (tuple21 d b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (tuple21 d b)))) (sort (tuple2 a1 (tuple2 d1 b1))
  (t2tb4900 x))))

(declare-fun tb2t4900 (uni) (tuple21 a (tuple21 d b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (tuple21 d b))))
  (! (= (tb2t4900 (t2tb4900 i)) i) :pattern ((t2tb4900 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (tuple2 d1 b1)) j) (= (t2tb4900 (tb2t4900 j)) j)) :pattern (
  (t2tb4900 (tb2t4900 j))) )))

;; mem_direct_product
  (assert
  (forall ((f2 (set (tuple21 a d))) (g (set (tuple21 a b))) (x a) (y d)
  (z b))
  (= (mem (tuple2 a1 (tuple2 d1 b1))
  (Tuple2 a1 (tuple2 d1 b1) (t2tb2 x) (Tuple2 d1 b1 (t2tb694 y) (t2tb14 z)))
  (direct_product b1 d1 a1 (t2tb903 f2) (t2tb11 g)))
  (and (mem32 (tb2t904 (Tuple2 a1 d1 (t2tb2 x) (t2tb694 y))) f2) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 z))) g)))))

;; mem_direct_product
  (assert
  (forall ((c2 ty))
  (forall ((f2 (set (tuple21 a d))) (g uni) (x a) (y d) (z uni))
  (= (mem (tuple2 a1 (tuple2 d1 c2))
  (Tuple2 a1 (tuple2 d1 c2) (t2tb2 x) (Tuple2 d1 c2 (t2tb694 y) z))
  (direct_product c2 d1 a1 (t2tb903 f2) g))
  (and (mem32 (tb2t904 (Tuple2 a1 d1 (t2tb2 x) (t2tb694 y))) f2) (mem
  (tuple2 a1 c2) (Tuple2 a1 c2 (t2tb2 x) z) g))))))

;; mem_direct_product
  (assert
  (forall ((f2 (set (tuple21 a (tuple21 b c)))) (g (set (tuple21 a (tuple21 d
  e)))) (x a) (y (tuple21 b c)) (z (tuple21 d e)))
  (= (mem (tuple2 a1 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)))
  (Tuple2 a1 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (t2tb2 x)
  (Tuple2 (tuple2 b1 c1) (tuple2 d1 e1) (t2tb134 y) (t2tb3457 z)))
  (direct_product (tuple2 d1 e1) (tuple2 b1 c1) a1 (t2tb261 f2) (t2tb4103 g)))
  (and (mem14 (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 y))) f2)
  (mem48 (tb2t4105 (Tuple2 a1 (tuple2 d1 e1) (t2tb2 x) (t2tb3457 z))) g)))))

(declare-fun t2tb4901 ((set (tuple21 a (tuple21 (tuple21 b c) e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (tuple21 (tuple21 b c) e))))) (sort
  (set1 (tuple2 a1 (tuple2 (tuple2 b1 c1) e1))) (t2tb4901 x))))

(declare-fun tb2t4901 (uni) (set (tuple21 a (tuple21 (tuple21 b c) e))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (tuple21 (tuple21 b c) e)))))
  (! (= (tb2t4901 (t2tb4901 i)) i) :pattern ((t2tb4901 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (tuple2 (tuple2 b1 c1) e1))) j)
     (= (t2tb4901 (tb2t4901 j)) j)) :pattern ((t2tb4901 (tb2t4901 j))) )))

(declare-fun t2tb4902 ((tuple21 a (tuple21 (tuple21 b c) e))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (tuple21 (tuple21 b c) e)))) (sort
  (tuple2 a1 (tuple2 (tuple2 b1 c1) e1)) (t2tb4902 x))))

(declare-fun tb2t4902 (uni) (tuple21 a (tuple21 (tuple21 b c) e)))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (tuple21 (tuple21 b c) e))))
  (! (= (tb2t4902 (t2tb4902 i)) i) :pattern ((t2tb4902 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (tuple2 (tuple2 b1 c1) e1)) j)
     (= (t2tb4902 (tb2t4902 j)) j)) :pattern ((t2tb4902 (tb2t4902 j))) )))

;; mem_direct_product
  (assert
  (forall ((f2 (set (tuple21 a (tuple21 b c)))) (g (set (tuple21 a e))) (x a)
  (y (tuple21 b c)) (z e))
  (= (mem (tuple2 a1 (tuple2 (tuple2 b1 c1) e1))
  (Tuple2 a1 (tuple2 (tuple2 b1 c1) e1) (t2tb2 x)
  (Tuple2 (tuple2 b1 c1) e1 (t2tb134 y) (t2tb2955 z)))
  (direct_product e1 (tuple2 b1 c1) a1 (t2tb261 f2) (t2tb2943 g)))
  (and (mem14 (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 y))) f2)
  (mem44 (tb2t2949 (Tuple2 a1 e1 (t2tb2 x) (t2tb2955 z))) g)))))

(declare-fun t2tb4903 ((set (tuple21 a (tuple21 (tuple21 b c) d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (tuple21 (tuple21 b c) d))))) (sort
  (set1 (tuple2 a1 (tuple2 (tuple2 b1 c1) d1))) (t2tb4903 x))))

(declare-fun tb2t4903 (uni) (set (tuple21 a (tuple21 (tuple21 b c) d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (tuple21 (tuple21 b c) d)))))
  (! (= (tb2t4903 (t2tb4903 i)) i) :pattern ((t2tb4903 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (tuple2 (tuple2 b1 c1) d1))) j)
     (= (t2tb4903 (tb2t4903 j)) j)) :pattern ((t2tb4903 (tb2t4903 j))) )))

(declare-fun t2tb4904 ((tuple21 a (tuple21 (tuple21 b c) d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (tuple21 (tuple21 b c) d)))) (sort
  (tuple2 a1 (tuple2 (tuple2 b1 c1) d1)) (t2tb4904 x))))

(declare-fun tb2t4904 (uni) (tuple21 a (tuple21 (tuple21 b c) d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (tuple21 (tuple21 b c) d))))
  (! (= (tb2t4904 (t2tb4904 i)) i) :pattern ((t2tb4904 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (tuple2 (tuple2 b1 c1) d1)) j)
     (= (t2tb4904 (tb2t4904 j)) j)) :pattern ((t2tb4904 (tb2t4904 j))) )))

;; mem_direct_product
  (assert
  (forall ((f2 (set (tuple21 a (tuple21 b c)))) (g (set (tuple21 a d))) (x a)
  (y (tuple21 b c)) (z d))
  (= (mem (tuple2 a1 (tuple2 (tuple2 b1 c1) d1))
  (Tuple2 a1 (tuple2 (tuple2 b1 c1) d1) (t2tb2 x)
  (Tuple2 (tuple2 b1 c1) d1 (t2tb134 y) (t2tb694 z)))
  (direct_product d1 (tuple2 b1 c1) a1 (t2tb261 f2) (t2tb903 g)))
  (and (mem14 (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 y))) f2)
  (mem32 (tb2t904 (Tuple2 a1 d1 (t2tb2 x) (t2tb694 z))) g)))))

(declare-fun t2tb4905 ((set (tuple21 a (tuple21 (tuple21 b c) (tuple21 b
  c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (tuple21 (tuple21 b c) (tuple21 b c)))))) (sort
  (set1 (tuple2 a1 (tuple2 (tuple2 b1 c1) (tuple2 b1 c1)))) (t2tb4905 x))))

(declare-fun tb2t4905 (uni) (set (tuple21 a (tuple21 (tuple21 b c) (tuple21 b
  c)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (tuple21 (tuple21 b c) (tuple21 b c))))))
  (! (= (tb2t4905 (t2tb4905 i)) i) :pattern ((t2tb4905 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (tuple2 (tuple2 b1 c1) (tuple2 b1 c1)))) j)
     (= (t2tb4905 (tb2t4905 j)) j)) :pattern ((t2tb4905 (tb2t4905 j))) )))

(declare-fun t2tb4906 ((tuple21 a (tuple21 (tuple21 b c) (tuple21 b
  c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (tuple21 (tuple21 b c) (tuple21 b c))))) (sort
  (tuple2 a1 (tuple2 (tuple2 b1 c1) (tuple2 b1 c1))) (t2tb4906 x))))

(declare-fun tb2t4906 (uni) (tuple21 a (tuple21 (tuple21 b c) (tuple21 b
  c))))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (tuple21 (tuple21 b c) (tuple21 b c)))))
  (! (= (tb2t4906 (t2tb4906 i)) i) :pattern ((t2tb4906 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (tuple2 (tuple2 b1 c1) (tuple2 b1 c1))) j)
     (= (t2tb4906 (tb2t4906 j)) j)) :pattern ((t2tb4906 (tb2t4906 j))) )))

;; mem_direct_product
  (assert
  (forall ((f2 (set (tuple21 a (tuple21 b c)))) (g (set (tuple21 a (tuple21 b
  c)))) (x a) (y (tuple21 b c)) (z (tuple21 b c)))
  (= (mem (tuple2 a1 (tuple2 (tuple2 b1 c1) (tuple2 b1 c1)))
  (Tuple2 a1 (tuple2 (tuple2 b1 c1) (tuple2 b1 c1)) (t2tb2 x)
  (Tuple2 (tuple2 b1 c1) (tuple2 b1 c1) (t2tb134 y) (t2tb134 z)))
  (direct_product (tuple2 b1 c1) (tuple2 b1 c1) a1 (t2tb261 f2) (t2tb261 g)))
  (and (mem14 (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 y))) f2)
  (mem14 (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 z))) g)))))

(declare-fun t2tb4907 ((set (tuple21 a (tuple21 (tuple21 b c) c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (tuple21 (tuple21 b c) c))))) (sort
  (set1 (tuple2 a1 (tuple2 (tuple2 b1 c1) c1))) (t2tb4907 x))))

(declare-fun tb2t4907 (uni) (set (tuple21 a (tuple21 (tuple21 b c) c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (tuple21 (tuple21 b c) c)))))
  (! (= (tb2t4907 (t2tb4907 i)) i) :pattern ((t2tb4907 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (tuple2 (tuple2 b1 c1) c1))) j)
     (= (t2tb4907 (tb2t4907 j)) j)) :pattern ((t2tb4907 (tb2t4907 j))) )))

(declare-fun t2tb4908 ((tuple21 a (tuple21 (tuple21 b c) c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (tuple21 (tuple21 b c) c)))) (sort
  (tuple2 a1 (tuple2 (tuple2 b1 c1) c1)) (t2tb4908 x))))

(declare-fun tb2t4908 (uni) (tuple21 a (tuple21 (tuple21 b c) c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (tuple21 (tuple21 b c) c))))
  (! (= (tb2t4908 (t2tb4908 i)) i) :pattern ((t2tb4908 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (tuple2 (tuple2 b1 c1) c1)) j)
     (= (t2tb4908 (tb2t4908 j)) j)) :pattern ((t2tb4908 (tb2t4908 j))) )))

;; mem_direct_product
  (assert
  (forall ((f2 (set (tuple21 a (tuple21 b c)))) (g (set (tuple21 a c))) (x a)
  (y (tuple21 b c)) (z c))
  (= (mem (tuple2 a1 (tuple2 (tuple2 b1 c1) c1))
  (Tuple2 a1 (tuple2 (tuple2 b1 c1) c1) (t2tb2 x)
  (Tuple2 (tuple2 b1 c1) c1 (t2tb134 y) (t2tb135 z)))
  (direct_product c1 (tuple2 b1 c1) a1 (t2tb261 f2) (t2tb129 g)))
  (and (mem14 (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 y))) f2)
  (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 z))) g)))))

(declare-fun t2tb4909 ((set (tuple21 a (tuple21 (tuple21 b c) b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (tuple21 (tuple21 b c) b))))) (sort
  (set1 (tuple2 a1 (tuple2 (tuple2 b1 c1) b1))) (t2tb4909 x))))

(declare-fun tb2t4909 (uni) (set (tuple21 a (tuple21 (tuple21 b c) b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (tuple21 (tuple21 b c) b)))))
  (! (= (tb2t4909 (t2tb4909 i)) i) :pattern ((t2tb4909 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (tuple2 (tuple2 b1 c1) b1))) j)
     (= (t2tb4909 (tb2t4909 j)) j)) :pattern ((t2tb4909 (tb2t4909 j))) )))

(declare-fun t2tb4910 ((tuple21 a (tuple21 (tuple21 b c) b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (tuple21 (tuple21 b c) b)))) (sort
  (tuple2 a1 (tuple2 (tuple2 b1 c1) b1)) (t2tb4910 x))))

(declare-fun tb2t4910 (uni) (tuple21 a (tuple21 (tuple21 b c) b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (tuple21 (tuple21 b c) b))))
  (! (= (tb2t4910 (t2tb4910 i)) i) :pattern ((t2tb4910 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (tuple2 (tuple2 b1 c1) b1)) j)
     (= (t2tb4910 (tb2t4910 j)) j)) :pattern ((t2tb4910 (tb2t4910 j))) )))

;; mem_direct_product
  (assert
  (forall ((f2 (set (tuple21 a (tuple21 b c)))) (g (set (tuple21 a b))) (x a)
  (y (tuple21 b c)) (z b))
  (= (mem (tuple2 a1 (tuple2 (tuple2 b1 c1) b1))
  (Tuple2 a1 (tuple2 (tuple2 b1 c1) b1) (t2tb2 x)
  (Tuple2 (tuple2 b1 c1) b1 (t2tb134 y) (t2tb14 z)))
  (direct_product b1 (tuple2 b1 c1) a1 (t2tb261 f2) (t2tb11 g)))
  (and (mem14 (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 y))) f2)
  (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 z))) g)))))

;; mem_direct_product
  (assert
  (forall ((c2 ty))
  (forall ((f2 (set (tuple21 a (tuple21 b c)))) (g uni) (x a) (y (tuple21 b
  c)) (z uni))
  (= (mem (tuple2 a1 (tuple2 (tuple2 b1 c1) c2))
  (Tuple2 a1 (tuple2 (tuple2 b1 c1) c2) (t2tb2 x)
  (Tuple2 (tuple2 b1 c1) c2 (t2tb134 y) z))
  (direct_product c2 (tuple2 b1 c1) a1 (t2tb261 f2) g))
  (and (mem14 (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 y))) f2)
  (mem (tuple2 a1 c2) (Tuple2 a1 c2 (t2tb2 x) z) g))))))

(declare-fun t2tb4911 ((set (tuple21 a (tuple21 c (tuple21 d e))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (tuple21 c (tuple21 d e)))))) (sort
  (set1 (tuple2 a1 (tuple2 c1 (tuple2 d1 e1)))) (t2tb4911 x))))

(declare-fun tb2t4911 (uni) (set (tuple21 a (tuple21 c (tuple21 d e)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (tuple21 c (tuple21 d e))))))
  (! (= (tb2t4911 (t2tb4911 i)) i) :pattern ((t2tb4911 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (tuple2 c1 (tuple2 d1 e1)))) j)
     (= (t2tb4911 (tb2t4911 j)) j)) :pattern ((t2tb4911 (tb2t4911 j))) )))

(declare-fun t2tb4912 ((tuple21 a (tuple21 c (tuple21 d e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (tuple21 c (tuple21 d e))))) (sort
  (tuple2 a1 (tuple2 c1 (tuple2 d1 e1))) (t2tb4912 x))))

(declare-fun tb2t4912 (uni) (tuple21 a (tuple21 c (tuple21 d e))))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (tuple21 c (tuple21 d e)))))
  (! (= (tb2t4912 (t2tb4912 i)) i) :pattern ((t2tb4912 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (tuple2 c1 (tuple2 d1 e1))) j)
     (= (t2tb4912 (tb2t4912 j)) j)) :pattern ((t2tb4912 (tb2t4912 j))) )))

;; mem_direct_product
  (assert
  (forall ((f2 (set (tuple21 a c))) (g (set (tuple21 a (tuple21 d e)))) (x a)
  (y c) (z (tuple21 d e)))
  (= (mem (tuple2 a1 (tuple2 c1 (tuple2 d1 e1)))
  (Tuple2 a1 (tuple2 c1 (tuple2 d1 e1)) (t2tb2 x)
  (Tuple2 c1 (tuple2 d1 e1) (t2tb135 y) (t2tb3457 z)))
  (direct_product (tuple2 d1 e1) c1 a1 (t2tb129 f2) (t2tb4103 g)))
  (and (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y))) f2) (mem48
  (tb2t4105 (Tuple2 a1 (tuple2 d1 e1) (t2tb2 x) (t2tb3457 z))) g)))))

;; mem_direct_product
  (assert
  (forall ((f2 (set (tuple21 a c))) (g (set (tuple21 a e))) (x a) (y c)
  (z e))
  (= (mem (tuple2 a1 (tuple2 c1 e1))
  (Tuple2 a1 (tuple2 c1 e1) (t2tb2 x)
  (Tuple2 c1 e1 (t2tb135 y) (t2tb2955 z)))
  (direct_product e1 c1 a1 (t2tb129 f2) (t2tb2943 g)))
  (and (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y))) f2) (mem44
  (tb2t2949 (Tuple2 a1 e1 (t2tb2 x) (t2tb2955 z))) g)))))

(declare-fun t2tb901 ((set (tuple21 a (tuple21 c d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (tuple21 c d))))) (sort
  (set1 (tuple2 a1 (tuple2 c1 d1))) (t2tb901 x))))

(declare-fun tb2t901 (uni) (set (tuple21 a (tuple21 c d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (tuple21 c d)))))
  (! (= (tb2t901 (t2tb901 i)) i) :pattern ((t2tb901 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (tuple2 c1 d1))) j)
     (= (t2tb901 (tb2t901 j)) j)) :pattern ((t2tb901 (tb2t901 j))) )))

(declare-fun t2tb902 ((tuple21 a (tuple21 c d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (tuple21 c d)))) (sort (tuple2 a1 (tuple2 c1 d1))
  (t2tb902 x))))

(declare-fun tb2t902 (uni) (tuple21 a (tuple21 c d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (tuple21 c d))))
  (! (= (tb2t902 (t2tb902 i)) i) :pattern ((t2tb902 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (tuple2 c1 d1)) j) (= (t2tb902 (tb2t902 j)) j)) :pattern (
  (t2tb902 (tb2t902 j))) )))

;; mem_direct_product
  (assert
  (forall ((f2 (set (tuple21 a c))) (g (set (tuple21 a d))) (x a) (y c)
  (z d))
  (= (mem (tuple2 a1 (tuple2 c1 d1))
  (Tuple2 a1 (tuple2 c1 d1) (t2tb2 x) (Tuple2 c1 d1 (t2tb135 y) (t2tb694 z)))
  (direct_product d1 c1 a1 (t2tb129 f2) (t2tb903 g)))
  (and (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y))) f2) (mem32
  (tb2t904 (Tuple2 a1 d1 (t2tb2 x) (t2tb694 z))) g)))))

(declare-fun t2tb4913 ((set (tuple21 a (tuple21 c (tuple21 b c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (tuple21 c (tuple21 b c)))))) (sort
  (set1 (tuple2 a1 (tuple2 c1 (tuple2 b1 c1)))) (t2tb4913 x))))

(declare-fun tb2t4913 (uni) (set (tuple21 a (tuple21 c (tuple21 b c)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (tuple21 c (tuple21 b c))))))
  (! (= (tb2t4913 (t2tb4913 i)) i) :pattern ((t2tb4913 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (tuple2 c1 (tuple2 b1 c1)))) j)
     (= (t2tb4913 (tb2t4913 j)) j)) :pattern ((t2tb4913 (tb2t4913 j))) )))

(declare-fun t2tb4914 ((tuple21 a (tuple21 c (tuple21 b c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (tuple21 c (tuple21 b c))))) (sort
  (tuple2 a1 (tuple2 c1 (tuple2 b1 c1))) (t2tb4914 x))))

(declare-fun tb2t4914 (uni) (tuple21 a (tuple21 c (tuple21 b c))))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (tuple21 c (tuple21 b c)))))
  (! (= (tb2t4914 (t2tb4914 i)) i) :pattern ((t2tb4914 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (tuple2 c1 (tuple2 b1 c1))) j)
     (= (t2tb4914 (tb2t4914 j)) j)) :pattern ((t2tb4914 (tb2t4914 j))) )))

;; mem_direct_product
  (assert
  (forall ((f2 (set (tuple21 a c))) (g (set (tuple21 a (tuple21 b c)))) (x a)
  (y c) (z (tuple21 b c)))
  (= (mem (tuple2 a1 (tuple2 c1 (tuple2 b1 c1)))
  (Tuple2 a1 (tuple2 c1 (tuple2 b1 c1)) (t2tb2 x)
  (Tuple2 c1 (tuple2 b1 c1) (t2tb135 y) (t2tb134 z)))
  (direct_product (tuple2 b1 c1) c1 a1 (t2tb129 f2) (t2tb261 g)))
  (and (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y))) f2) (mem14
  (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 z))) g)))))

(declare-fun t2tb330 ((set (tuple21 a (tuple21 c c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (tuple21 c c))))) (sort
  (set1 (tuple2 a1 (tuple2 c1 c1))) (t2tb330 x))))

(declare-fun tb2t330 (uni) (set (tuple21 a (tuple21 c c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (tuple21 c c)))))
  (! (= (tb2t330 (t2tb330 i)) i) :pattern ((t2tb330 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (tuple2 c1 c1))) j)
     (= (t2tb330 (tb2t330 j)) j)) :pattern ((t2tb330 (tb2t330 j))) )))

(declare-fun t2tb331 ((tuple21 a (tuple21 c c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (tuple21 c c)))) (sort (tuple2 a1 (tuple2 c1 c1))
  (t2tb331 x))))

(declare-fun tb2t331 (uni) (tuple21 a (tuple21 c c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (tuple21 c c))))
  (! (= (tb2t331 (t2tb331 i)) i) :pattern ((t2tb331 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (tuple2 c1 c1)) j) (= (t2tb331 (tb2t331 j)) j)) :pattern (
  (t2tb331 (tb2t331 j))) )))

;; mem_direct_product
  (assert
  (forall ((f2 (set (tuple21 a c))) (g (set (tuple21 a c))) (x a) (y c)
  (z c))
  (= (mem (tuple2 a1 (tuple2 c1 c1))
  (Tuple2 a1 (tuple2 c1 c1) (t2tb2 x) (Tuple2 c1 c1 (t2tb135 y) (t2tb135 z)))
  (direct_product c1 c1 a1 (t2tb129 f2) (t2tb129 g)))
  (and (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y))) f2) (mem10
  (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 z))) g)))))

(declare-fun t2tb332 ((set (tuple21 a (tuple21 c b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (tuple21 c b))))) (sort
  (set1 (tuple2 a1 (tuple2 c1 b1))) (t2tb332 x))))

(declare-fun tb2t332 (uni) (set (tuple21 a (tuple21 c b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (tuple21 c b)))))
  (! (= (tb2t332 (t2tb332 i)) i) :pattern ((t2tb332 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (tuple2 c1 b1))) j)
     (= (t2tb332 (tb2t332 j)) j)) :pattern ((t2tb332 (tb2t332 j))) )))

(declare-fun t2tb333 ((tuple21 a (tuple21 c b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (tuple21 c b)))) (sort (tuple2 a1 (tuple2 c1 b1))
  (t2tb333 x))))

(declare-fun tb2t333 (uni) (tuple21 a (tuple21 c b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (tuple21 c b))))
  (! (= (tb2t333 (t2tb333 i)) i) :pattern ((t2tb333 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (tuple2 c1 b1)) j) (= (t2tb333 (tb2t333 j)) j)) :pattern (
  (t2tb333 (tb2t333 j))) )))

;; mem_direct_product
  (assert
  (forall ((f2 (set (tuple21 a c))) (g (set (tuple21 a b))) (x a) (y c)
  (z b))
  (= (mem (tuple2 a1 (tuple2 c1 b1))
  (Tuple2 a1 (tuple2 c1 b1) (t2tb2 x) (Tuple2 c1 b1 (t2tb135 y) (t2tb14 z)))
  (direct_product b1 c1 a1 (t2tb129 f2) (t2tb11 g)))
  (and (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y))) f2) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 z))) g)))))

;; mem_direct_product
  (assert
  (forall ((c2 ty))
  (forall ((f2 (set (tuple21 a c))) (g uni) (x a) (y c) (z uni))
  (= (mem (tuple2 a1 (tuple2 c1 c2))
  (Tuple2 a1 (tuple2 c1 c2) (t2tb2 x) (Tuple2 c1 c2 (t2tb135 y) z))
  (direct_product c2 c1 a1 (t2tb129 f2) g))
  (and (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y))) f2) (mem
  (tuple2 a1 c2) (Tuple2 a1 c2 (t2tb2 x) z) g))))))

(declare-fun t2tb4915 ((set (tuple21 a (tuple21 b (tuple21 d e))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (tuple21 b (tuple21 d e)))))) (sort
  (set1 (tuple2 a1 (tuple2 b1 (tuple2 d1 e1)))) (t2tb4915 x))))

(declare-fun tb2t4915 (uni) (set (tuple21 a (tuple21 b (tuple21 d e)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (tuple21 b (tuple21 d e))))))
  (! (= (tb2t4915 (t2tb4915 i)) i) :pattern ((t2tb4915 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (tuple2 b1 (tuple2 d1 e1)))) j)
     (= (t2tb4915 (tb2t4915 j)) j)) :pattern ((t2tb4915 (tb2t4915 j))) )))

(declare-fun t2tb4916 ((tuple21 a (tuple21 b (tuple21 d e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (tuple21 b (tuple21 d e))))) (sort
  (tuple2 a1 (tuple2 b1 (tuple2 d1 e1))) (t2tb4916 x))))

(declare-fun tb2t4916 (uni) (tuple21 a (tuple21 b (tuple21 d e))))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (tuple21 b (tuple21 d e)))))
  (! (= (tb2t4916 (t2tb4916 i)) i) :pattern ((t2tb4916 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (tuple2 b1 (tuple2 d1 e1))) j)
     (= (t2tb4916 (tb2t4916 j)) j)) :pattern ((t2tb4916 (tb2t4916 j))) )))

;; mem_direct_product
  (assert
  (forall ((f2 (set (tuple21 a b))) (g (set (tuple21 a (tuple21 d e)))) (x a)
  (y b) (z (tuple21 d e)))
  (= (mem (tuple2 a1 (tuple2 b1 (tuple2 d1 e1)))
  (Tuple2 a1 (tuple2 b1 (tuple2 d1 e1)) (t2tb2 x)
  (Tuple2 b1 (tuple2 d1 e1) (t2tb14 y) (t2tb3457 z)))
  (direct_product (tuple2 d1 e1) b1 a1 (t2tb11 f2) (t2tb4103 g)))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y))) f2) (mem48
  (tb2t4105 (Tuple2 a1 (tuple2 d1 e1) (t2tb2 x) (t2tb3457 z))) g)))))

(declare-fun t2tb3570 ((set (tuple21 a (tuple21 b e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (tuple21 b e))))) (sort
  (set1 (tuple2 a1 (tuple2 b1 e1))) (t2tb3570 x))))

(declare-fun tb2t3570 (uni) (set (tuple21 a (tuple21 b e))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (tuple21 b e)))))
  (! (= (tb2t3570 (t2tb3570 i)) i) :pattern ((t2tb3570 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (tuple2 b1 e1))) j)
     (= (t2tb3570 (tb2t3570 j)) j)) :pattern ((t2tb3570 (tb2t3570 j))) )))

(declare-fun t2tb3571 ((tuple21 a (tuple21 b e))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (tuple21 b e)))) (sort (tuple2 a1 (tuple2 b1 e1))
  (t2tb3571 x))))

(declare-fun tb2t3571 (uni) (tuple21 a (tuple21 b e)))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (tuple21 b e))))
  (! (= (tb2t3571 (t2tb3571 i)) i) :pattern ((t2tb3571 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (tuple2 b1 e1)) j) (= (t2tb3571 (tb2t3571 j)) j)) :pattern (
  (t2tb3571 (tb2t3571 j))) )))

;; mem_direct_product
  (assert
  (forall ((f2 (set (tuple21 a b))) (g (set (tuple21 a e))) (x a) (y b)
  (z e))
  (= (mem (tuple2 a1 (tuple2 b1 e1))
  (Tuple2 a1 (tuple2 b1 e1) (t2tb2 x) (Tuple2 b1 e1 (t2tb14 y) (t2tb2955 z)))
  (direct_product e1 b1 a1 (t2tb11 f2) (t2tb2943 g)))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y))) f2) (mem44
  (tb2t2949 (Tuple2 a1 e1 (t2tb2 x) (t2tb2955 z))) g)))))

;; mem_direct_product
  (assert
  (forall ((f2 (set (tuple21 a b))) (g (set (tuple21 a d))) (x a) (y b)
  (z d))
  (= (mem (tuple2 a1 (tuple2 b1 d1))
  (Tuple2 a1 (tuple2 b1 d1) (t2tb2 x) (Tuple2 b1 d1 (t2tb14 y) (t2tb694 z)))
  (direct_product d1 b1 a1 (t2tb11 f2) (t2tb903 g)))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y))) f2) (mem32
  (tb2t904 (Tuple2 a1 d1 (t2tb2 x) (t2tb694 z))) g)))))

(declare-fun t2tb4917 ((set (tuple21 a (tuple21 b (tuple21 b c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (tuple21 b (tuple21 b c)))))) (sort
  (set1 (tuple2 a1 (tuple2 b1 (tuple2 b1 c1)))) (t2tb4917 x))))

(declare-fun tb2t4917 (uni) (set (tuple21 a (tuple21 b (tuple21 b c)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (tuple21 b (tuple21 b c))))))
  (! (= (tb2t4917 (t2tb4917 i)) i) :pattern ((t2tb4917 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (tuple2 b1 (tuple2 b1 c1)))) j)
     (= (t2tb4917 (tb2t4917 j)) j)) :pattern ((t2tb4917 (tb2t4917 j))) )))

(declare-fun t2tb4918 ((tuple21 a (tuple21 b (tuple21 b c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (tuple21 b (tuple21 b c))))) (sort
  (tuple2 a1 (tuple2 b1 (tuple2 b1 c1))) (t2tb4918 x))))

(declare-fun tb2t4918 (uni) (tuple21 a (tuple21 b (tuple21 b c))))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (tuple21 b (tuple21 b c)))))
  (! (= (tb2t4918 (t2tb4918 i)) i) :pattern ((t2tb4918 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (tuple2 b1 (tuple2 b1 c1))) j)
     (= (t2tb4918 (tb2t4918 j)) j)) :pattern ((t2tb4918 (tb2t4918 j))) )))

;; mem_direct_product
  (assert
  (forall ((f2 (set (tuple21 a b))) (g (set (tuple21 a (tuple21 b c)))) (x a)
  (y b) (z (tuple21 b c)))
  (= (mem (tuple2 a1 (tuple2 b1 (tuple2 b1 c1)))
  (Tuple2 a1 (tuple2 b1 (tuple2 b1 c1)) (t2tb2 x)
  (Tuple2 b1 (tuple2 b1 c1) (t2tb14 y) (t2tb134 z)))
  (direct_product (tuple2 b1 c1) b1 a1 (t2tb11 f2) (t2tb261 g)))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y))) f2) (mem14
  (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 z))) g)))))

;; mem_direct_product
  (assert
  (forall ((f2 (set (tuple21 a b))) (g (set (tuple21 a c))) (x a) (y b)
  (z c))
  (= (mem14
  (tb2t260
  (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (Tuple2 b1 c1 (t2tb14 y) (t2tb135 z))))
  (direct_product1 f2 g))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y))) f2) (mem10
  (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 z))) g)))))

(declare-fun t2tb59 ((set (tuple21 a (tuple21 b b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (tuple21 b b))))) (sort
  (set1 (tuple2 a1 (tuple2 b1 b1))) (t2tb59 x))))

(declare-fun tb2t59 (uni) (set (tuple21 a (tuple21 b b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (tuple21 b b)))))
  (! (= (tb2t59 (t2tb59 i)) i) :pattern ((t2tb59 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (tuple2 b1 b1))) j)
     (= (t2tb59 (tb2t59 j)) j)) :pattern ((t2tb59 (tb2t59 j))) )))

(declare-fun t2tb60 ((tuple21 a (tuple21 b b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (tuple21 b b)))) (sort (tuple2 a1 (tuple2 b1 b1))
  (t2tb60 x))))

(declare-fun tb2t60 (uni) (tuple21 a (tuple21 b b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (tuple21 b b))))
  (! (= (tb2t60 (t2tb60 i)) i) :pattern ((t2tb60 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (tuple2 b1 b1)) j) (= (t2tb60 (tb2t60 j)) j)) :pattern (
  (t2tb60 (tb2t60 j))) )))

;; mem_direct_product
  (assert
  (forall ((f2 (set (tuple21 a b))) (g (set (tuple21 a b))) (x a) (y b)
  (z b))
  (= (mem (tuple2 a1 (tuple2 b1 b1))
  (Tuple2 a1 (tuple2 b1 b1) (t2tb2 x) (Tuple2 b1 b1 (t2tb14 y) (t2tb14 z)))
  (direct_product b1 b1 a1 (t2tb11 f2) (t2tb11 g)))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y))) f2) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 z))) g)))))

;; mem_direct_product
  (assert
  (forall ((c2 ty))
  (forall ((f2 (set (tuple21 a b))) (g uni) (x a) (y b) (z uni))
  (= (mem (tuple2 a1 (tuple2 b1 c2))
  (Tuple2 a1 (tuple2 b1 c2) (t2tb2 x) (Tuple2 b1 c2 (t2tb14 y) z))
  (direct_product c2 b1 a1 (t2tb11 f2) g))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y))) f2) (mem
  (tuple2 a1 c2) (Tuple2 a1 c2 (t2tb2 x) z) g))))))

;; mem_direct_product
  (assert
  (forall ((a2 ty) (b2 ty) (c2 ty))
  (forall ((f2 uni) (g uni) (x uni) (y uni) (z uni))
  (= (mem (tuple2 a2 (tuple2 b2 c2))
  (Tuple2 a2 (tuple2 b2 c2) x (Tuple2 b2 c2 y z))
  (direct_product c2 b2 a2 f2 g))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) f2) (mem (tuple2 a2 c2)
  (Tuple2 a2 c2 x z) g))))))

(declare-fun prj1 (ty ty uni) uni)

;; prj1_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni)) (sort (set1 (tuple2 (tuple2 a2 b2) a2)) (prj1 b2 a2 x)))))

;; mem_proj_op_1
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (x uni) (y uni) (z uni))
  (=> (sort a2 x)
  (=> (sort a2 z)
  (= (mem (tuple2 (tuple2 a2 b2) a2)
  (Tuple2 (tuple2 a2 b2) a2 (Tuple2 a2 b2 x y) z)
  (prj1 b2 a2 (Tuple2 (set1 a2) (set1 b2) s t)))
  (and (mem (tuple2 (tuple2 a2 b2) a2)
  (Tuple2 (tuple2 a2 b2) a2 (Tuple2 a2 b2 x y) z)
  (times a2 (tuple2 a2 b2) (times b2 a2 s t) s)) (= z x))))))))

(declare-fun prj2 (ty ty uni) uni)

;; prj2_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni)) (sort (set1 (tuple2 (tuple2 a2 b2) b2)) (prj2 b2 a2 x)))))

;; mem_proj_op_2
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (x uni) (y uni) (z uni))
  (=> (sort b2 y)
  (=> (sort b2 z)
  (= (mem (tuple2 (tuple2 a2 b2) b2)
  (Tuple2 (tuple2 a2 b2) b2 (Tuple2 a2 b2 x y) z)
  (prj2 b2 a2 (Tuple2 (set1 a2) (set1 b2) s t)))
  (and (mem (tuple2 (tuple2 a2 b2) b2)
  (Tuple2 (tuple2 a2 b2) b2 (Tuple2 a2 b2 x y) z)
  (times b2 (tuple2 a2 b2) (times b2 a2 s t) t)) (= z y))))))))

(declare-fun parallel_product (ty ty ty ty uni uni) uni)

;; parallel_product_sort
  (assert
  (forall ((a2 ty) (b2 ty) (c2 ty) (d2 ty))
  (forall ((x uni) (x1 uni)) (sort
  (set1 (tuple2 (tuple2 a2 c2) (tuple2 b2 d2)))
  (parallel_product d2 c2 b2 a2 x x1)))))

(declare-fun parallel_product5 ((set (tuple21 b d)) (set (tuple21 c
  e))) (set (tuple21 (tuple21 b c) (tuple21 d e))))

;; mem_parallel_product
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((h uni) (k (set (tuple21 (tuple21 b c) (tuple21 d e)))) (x uni)
  (y (tuple21 b c)) (z uni) (w (tuple21 d e)))
  (= (mem (tuple2 (tuple2 a2 (tuple2 b1 c1)) (tuple2 b2 (tuple2 d1 e1)))
  (Tuple2 (tuple2 a2 (tuple2 b1 c1)) (tuple2 b2 (tuple2 d1 e1))
  (Tuple2 a2 (tuple2 b1 c1) x (t2tb134 y))
  (Tuple2 b2 (tuple2 d1 e1) z (t2tb3457 w)))
  (parallel_product (tuple2 d1 e1) (tuple2 b1 c1) b2 a2 h (t2tb4102 k)))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x z) h) (mem49
  (tb2t4104 (Tuple2 (tuple2 b1 c1) (tuple2 d1 e1) (t2tb134 y) (t2tb3457 w)))
  k))))))

;; mem_parallel_product
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((h uni) (k (set (tuple21 c e))) (x uni) (y c) (z uni) (w e))
  (= (mem (tuple2 (tuple2 a2 c1) (tuple2 b2 e1))
  (Tuple2 (tuple2 a2 c1) (tuple2 b2 e1) (Tuple2 a2 c1 x (t2tb135 y))
  (Tuple2 b2 e1 z (t2tb2955 w)))
  (parallel_product e1 c1 b2 a2 h (t2tb3478 k)))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x z) h) (mem46
  (tb2t3479 (Tuple2 c1 e1 (t2tb135 y) (t2tb2955 w))) k))))))

;; mem_parallel_product
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((h uni) (k (set (tuple21 b d))) (x uni) (y b) (z uni) (w d))
  (= (mem (tuple2 (tuple2 a2 b1) (tuple2 b2 d1))
  (Tuple2 (tuple2 a2 b1) (tuple2 b2 d1) (Tuple2 a2 b1 x (t2tb14 y))
  (Tuple2 b2 d1 z (t2tb694 w))) (parallel_product d1 b1 b2 a2 h (t2tb687 k)))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x z) h) (mem23
  (tb2t692 (Tuple2 b1 d1 (t2tb14 y) (t2tb694 w))) k))))))

;; mem_parallel_product
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((h uni) (k (set (tuple21 a (tuple21 d e)))) (x uni) (y a) (z uni)
  (w (tuple21 d e)))
  (= (mem (tuple2 (tuple2 a2 a1) (tuple2 b2 (tuple2 d1 e1)))
  (Tuple2 (tuple2 a2 a1) (tuple2 b2 (tuple2 d1 e1))
  (Tuple2 a2 a1 x (t2tb2 y)) (Tuple2 b2 (tuple2 d1 e1) z (t2tb3457 w)))
  (parallel_product (tuple2 d1 e1) a1 b2 a2 h (t2tb4103 k)))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x z) h) (mem48
  (tb2t4105 (Tuple2 a1 (tuple2 d1 e1) (t2tb2 y) (t2tb3457 w))) k))))))

;; mem_parallel_product
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((h uni) (k (set (tuple21 a e))) (x uni) (y a) (z uni) (w e))
  (= (mem (tuple2 (tuple2 a2 a1) (tuple2 b2 e1))
  (Tuple2 (tuple2 a2 a1) (tuple2 b2 e1) (Tuple2 a2 a1 x (t2tb2 y))
  (Tuple2 b2 e1 z (t2tb2955 w)))
  (parallel_product e1 a1 b2 a2 h (t2tb2943 k)))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x z) h) (mem44
  (tb2t2949 (Tuple2 a1 e1 (t2tb2 y) (t2tb2955 w))) k))))))

;; mem_parallel_product
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((h uni) (k (set (tuple21 a d))) (x uni) (y a) (z uni) (w d))
  (= (mem (tuple2 (tuple2 a2 a1) (tuple2 b2 d1))
  (Tuple2 (tuple2 a2 a1) (tuple2 b2 d1) (Tuple2 a2 a1 x (t2tb2 y))
  (Tuple2 b2 d1 z (t2tb694 w))) (parallel_product d1 a1 b2 a2 h (t2tb903 k)))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x z) h) (mem32
  (tb2t904 (Tuple2 a1 d1 (t2tb2 y) (t2tb694 w))) k))))))

;; mem_parallel_product
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((h uni) (k (set (tuple21 a (tuple21 b c)))) (x uni) (y a) (z uni)
  (w (tuple21 b c)))
  (= (mem (tuple2 (tuple2 a2 a1) (tuple2 b2 (tuple2 b1 c1)))
  (Tuple2 (tuple2 a2 a1) (tuple2 b2 (tuple2 b1 c1))
  (Tuple2 a2 a1 x (t2tb2 y)) (Tuple2 b2 (tuple2 b1 c1) z (t2tb134 w)))
  (parallel_product (tuple2 b1 c1) a1 b2 a2 h (t2tb261 k)))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x z) h) (mem14
  (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 y) (t2tb134 w))) k))))))

;; mem_parallel_product
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((h uni) (k (set (tuple21 a c))) (x uni) (y a) (z uni) (w c))
  (= (mem (tuple2 (tuple2 a2 a1) (tuple2 b2 c1))
  (Tuple2 (tuple2 a2 a1) (tuple2 b2 c1) (Tuple2 a2 a1 x (t2tb2 y))
  (Tuple2 b2 c1 z (t2tb135 w))) (parallel_product c1 a1 b2 a2 h (t2tb129 k)))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x z) h) (mem10
  (tb2t133 (Tuple2 a1 c1 (t2tb2 y) (t2tb135 w))) k))))))

;; mem_parallel_product
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((h uni) (k (set (tuple21 a b))) (x uni) (y a) (z uni) (w b))
  (= (mem (tuple2 (tuple2 a2 a1) (tuple2 b2 b1))
  (Tuple2 (tuple2 a2 a1) (tuple2 b2 b1) (Tuple2 a2 a1 x (t2tb2 y))
  (Tuple2 b2 b1 z (t2tb14 w))) (parallel_product b1 a1 b2 a2 h (t2tb11 k)))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x z) h) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 y) (t2tb14 w))) k))))))

(declare-fun t2tb4919 ((set (tuple21 (tuple21 (tuple21 b c) (tuple21 b c))
  (tuple21 (tuple21 d e) (tuple21 d e))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 b c) (tuple21 b c))
  (tuple21 (tuple21 d e) (tuple21 d e)))))) (sort
  (set1
  (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 b1 c1))
  (tuple2 (tuple2 d1 e1) (tuple2 d1 e1)))) (t2tb4919 x))))

(declare-fun tb2t4919 (uni) (set (tuple21 (tuple21 (tuple21 b c) (tuple21 b
  c)) (tuple21 (tuple21 d e) (tuple21 d e)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 b c) (tuple21 b c))
  (tuple21 (tuple21 d e) (tuple21 d e))))))
  (! (= (tb2t4919 (t2tb4919 i)) i) :pattern ((t2tb4919 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 b1 c1))
     (tuple2 (tuple2 d1 e1) (tuple2 d1 e1)))) j)
     (= (t2tb4919 (tb2t4919 j)) j)) :pattern ((t2tb4919 (tb2t4919 j))) )))

(declare-fun t2tb4920 ((tuple21 (tuple21 (tuple21 b c) (tuple21 b c))
  (tuple21 (tuple21 d e) (tuple21 d e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 b c) (tuple21 b c))
  (tuple21 (tuple21 d e) (tuple21 d e))))) (sort
  (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 b1 c1))
  (tuple2 (tuple2 d1 e1) (tuple2 d1 e1))) (t2tb4920 x))))

(declare-fun tb2t4920 (uni) (tuple21 (tuple21 (tuple21 b c) (tuple21 b c))
  (tuple21 (tuple21 d e) (tuple21 d e))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 b c) (tuple21 b c))
  (tuple21 (tuple21 d e) (tuple21 d e)))))
  (! (= (tb2t4920 (t2tb4920 i)) i) :pattern ((t2tb4920 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 b1 c1))
     (tuple2 (tuple2 d1 e1) (tuple2 d1 e1))) j)
     (= (t2tb4920 (tb2t4920 j)) j)) :pattern ((t2tb4920 (tb2t4920 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 (tuple21 b c) (tuple21 d e))))
  (k (set (tuple21 (tuple21 b c) (tuple21 d e)))) (x (tuple21 b c))
  (y (tuple21 b c)) (z (tuple21 d e)) (w (tuple21 d e)))
  (= (mem
  (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 b1 c1))
  (tuple2 (tuple2 d1 e1) (tuple2 d1 e1)))
  (Tuple2 (tuple2 (tuple2 b1 c1) (tuple2 b1 c1))
  (tuple2 (tuple2 d1 e1) (tuple2 d1 e1))
  (Tuple2 (tuple2 b1 c1) (tuple2 b1 c1) (t2tb134 x) (t2tb134 y))
  (Tuple2 (tuple2 d1 e1) (tuple2 d1 e1) (t2tb3457 z) (t2tb3457 w)))
  (parallel_product (tuple2 d1 e1) (tuple2 b1 c1) (tuple2 d1 e1)
  (tuple2 b1 c1) (t2tb4102 h) (t2tb4102 k)))
  (and (mem49
  (tb2t4104 (Tuple2 (tuple2 b1 c1) (tuple2 d1 e1) (t2tb134 x) (t2tb3457 z)))
  h) (mem49
  (tb2t4104 (Tuple2 (tuple2 b1 c1) (tuple2 d1 e1) (t2tb134 y) (t2tb3457 w)))
  k)))))

(declare-fun t2tb4921 ((set (tuple21 (tuple21 (tuple21 b c) c)
  (tuple21 (tuple21 d e) e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 b c) c) (tuple21 (tuple21 d e)
  e))))) (sort
  (set1 (tuple2 (tuple2 (tuple2 b1 c1) c1) (tuple2 (tuple2 d1 e1) e1)))
  (t2tb4921 x))))

(declare-fun tb2t4921 (uni) (set (tuple21 (tuple21 (tuple21 b c) c)
  (tuple21 (tuple21 d e) e))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 b c) c) (tuple21 (tuple21 d e)
  e))))) (! (= (tb2t4921 (t2tb4921 i)) i) :pattern ((t2tb4921 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 (tuple2 b1 c1) c1) (tuple2 (tuple2 d1 e1) e1))) j)
     (= (t2tb4921 (tb2t4921 j)) j)) :pattern ((t2tb4921 (tb2t4921 j))) )))

(declare-fun t2tb4922 ((tuple21 (tuple21 (tuple21 b c) c) (tuple21 (tuple21 d
  e) e))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 b c) c) (tuple21 (tuple21 d e) e))))
  (sort (tuple2 (tuple2 (tuple2 b1 c1) c1) (tuple2 (tuple2 d1 e1) e1))
  (t2tb4922 x))))

(declare-fun tb2t4922 (uni) (tuple21 (tuple21 (tuple21 b c) c)
  (tuple21 (tuple21 d e) e)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 b c) c) (tuple21 (tuple21 d e) e))))
  (! (= (tb2t4922 (t2tb4922 i)) i) :pattern ((t2tb4922 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 (tuple2 b1 c1) c1) (tuple2 (tuple2 d1 e1) e1))
     j) (= (t2tb4922 (tb2t4922 j)) j)) :pattern ((t2tb4922 (tb2t4922 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 (tuple21 b c) (tuple21 d e)))) (k (set (tuple21 c
  e))) (x (tuple21 b c)) (y c) (z (tuple21 d e)) (w e))
  (= (mem (tuple2 (tuple2 (tuple2 b1 c1) c1) (tuple2 (tuple2 d1 e1) e1))
  (Tuple2 (tuple2 (tuple2 b1 c1) c1) (tuple2 (tuple2 d1 e1) e1)
  (Tuple2 (tuple2 b1 c1) c1 (t2tb134 x) (t2tb135 y))
  (Tuple2 (tuple2 d1 e1) e1 (t2tb3457 z) (t2tb2955 w)))
  (parallel_product e1 c1 (tuple2 d1 e1) (tuple2 b1 c1) (t2tb4102 h)
  (t2tb3478 k)))
  (and (mem49
  (tb2t4104 (Tuple2 (tuple2 b1 c1) (tuple2 d1 e1) (t2tb134 x) (t2tb3457 z)))
  h) (mem46 (tb2t3479 (Tuple2 c1 e1 (t2tb135 y) (t2tb2955 w))) k)))))

(declare-fun t2tb4923 ((set (tuple21 (tuple21 (tuple21 b c) b)
  (tuple21 (tuple21 d e) d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 b c) b) (tuple21 (tuple21 d e)
  d))))) (sort
  (set1 (tuple2 (tuple2 (tuple2 b1 c1) b1) (tuple2 (tuple2 d1 e1) d1)))
  (t2tb4923 x))))

(declare-fun tb2t4923 (uni) (set (tuple21 (tuple21 (tuple21 b c) b)
  (tuple21 (tuple21 d e) d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 b c) b) (tuple21 (tuple21 d e)
  d))))) (! (= (tb2t4923 (t2tb4923 i)) i) :pattern ((t2tb4923 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 (tuple2 b1 c1) b1) (tuple2 (tuple2 d1 e1) d1))) j)
     (= (t2tb4923 (tb2t4923 j)) j)) :pattern ((t2tb4923 (tb2t4923 j))) )))

(declare-fun t2tb4924 ((tuple21 (tuple21 (tuple21 b c) b) (tuple21 (tuple21 d
  e) d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 b c) b) (tuple21 (tuple21 d e) d))))
  (sort (tuple2 (tuple2 (tuple2 b1 c1) b1) (tuple2 (tuple2 d1 e1) d1))
  (t2tb4924 x))))

(declare-fun tb2t4924 (uni) (tuple21 (tuple21 (tuple21 b c) b)
  (tuple21 (tuple21 d e) d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 b c) b) (tuple21 (tuple21 d e) d))))
  (! (= (tb2t4924 (t2tb4924 i)) i) :pattern ((t2tb4924 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 (tuple2 b1 c1) b1) (tuple2 (tuple2 d1 e1) d1))
     j) (= (t2tb4924 (tb2t4924 j)) j)) :pattern ((t2tb4924 (tb2t4924 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 (tuple21 b c) (tuple21 d e)))) (k (set (tuple21 b
  d))) (x (tuple21 b c)) (y b) (z (tuple21 d e)) (w d))
  (= (mem (tuple2 (tuple2 (tuple2 b1 c1) b1) (tuple2 (tuple2 d1 e1) d1))
  (Tuple2 (tuple2 (tuple2 b1 c1) b1) (tuple2 (tuple2 d1 e1) d1)
  (Tuple2 (tuple2 b1 c1) b1 (t2tb134 x) (t2tb14 y))
  (Tuple2 (tuple2 d1 e1) d1 (t2tb3457 z) (t2tb694 w)))
  (parallel_product d1 b1 (tuple2 d1 e1) (tuple2 b1 c1) (t2tb4102 h)
  (t2tb687 k)))
  (and (mem49
  (tb2t4104 (Tuple2 (tuple2 b1 c1) (tuple2 d1 e1) (t2tb134 x) (t2tb3457 z)))
  h) (mem23 (tb2t692 (Tuple2 b1 d1 (t2tb14 y) (t2tb694 w))) k)))))

(declare-fun t2tb4925 ((set (tuple21 (tuple21 (tuple21 b c) a)
  (tuple21 (tuple21 d e) (tuple21 d e))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 b c) a) (tuple21 (tuple21 d e)
  (tuple21 d e)))))) (sort
  (set1
  (tuple2 (tuple2 (tuple2 b1 c1) a1) (tuple2 (tuple2 d1 e1) (tuple2 d1 e1))))
  (t2tb4925 x))))

(declare-fun tb2t4925 (uni) (set (tuple21 (tuple21 (tuple21 b c) a)
  (tuple21 (tuple21 d e) (tuple21 d e)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 b c) a) (tuple21 (tuple21 d e)
  (tuple21 d e))))))
  (! (= (tb2t4925 (t2tb4925 i)) i) :pattern ((t2tb4925 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (tuple2 (tuple2 (tuple2 b1 c1) a1)
     (tuple2 (tuple2 d1 e1) (tuple2 d1 e1)))) j)
     (= (t2tb4925 (tb2t4925 j)) j)) :pattern ((t2tb4925 (tb2t4925 j))) )))

(declare-fun t2tb4926 ((tuple21 (tuple21 (tuple21 b c) a) (tuple21 (tuple21 d
  e) (tuple21 d e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 b c) a) (tuple21 (tuple21 d e)
  (tuple21 d e))))) (sort
  (tuple2 (tuple2 (tuple2 b1 c1) a1) (tuple2 (tuple2 d1 e1) (tuple2 d1 e1)))
  (t2tb4926 x))))

(declare-fun tb2t4926 (uni) (tuple21 (tuple21 (tuple21 b c) a)
  (tuple21 (tuple21 d e) (tuple21 d e))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 b c) a) (tuple21 (tuple21 d e)
  (tuple21 d e)))))
  (! (= (tb2t4926 (t2tb4926 i)) i) :pattern ((t2tb4926 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (tuple2 (tuple2 (tuple2 b1 c1) a1)
     (tuple2 (tuple2 d1 e1) (tuple2 d1 e1))) j)
     (= (t2tb4926 (tb2t4926 j)) j)) :pattern ((t2tb4926 (tb2t4926 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 (tuple21 b c) (tuple21 d e)))) (k (set (tuple21 a
  (tuple21 d e)))) (x (tuple21 b c)) (y a) (z (tuple21 d e)) (w (tuple21 d
  e)))
  (= (mem
  (tuple2 (tuple2 (tuple2 b1 c1) a1) (tuple2 (tuple2 d1 e1) (tuple2 d1 e1)))
  (Tuple2 (tuple2 (tuple2 b1 c1) a1) (tuple2 (tuple2 d1 e1) (tuple2 d1 e1))
  (Tuple2 (tuple2 b1 c1) a1 (t2tb134 x) (t2tb2 y))
  (Tuple2 (tuple2 d1 e1) (tuple2 d1 e1) (t2tb3457 z) (t2tb3457 w)))
  (parallel_product (tuple2 d1 e1) a1 (tuple2 d1 e1) (tuple2 b1 c1)
  (t2tb4102 h) (t2tb4103 k)))
  (and (mem49
  (tb2t4104 (Tuple2 (tuple2 b1 c1) (tuple2 d1 e1) (t2tb134 x) (t2tb3457 z)))
  h) (mem48 (tb2t4105 (Tuple2 a1 (tuple2 d1 e1) (t2tb2 y) (t2tb3457 w))) k)))))

(declare-fun t2tb4927 ((set (tuple21 (tuple21 (tuple21 b c) a)
  (tuple21 (tuple21 d e) e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 b c) a) (tuple21 (tuple21 d e)
  e))))) (sort
  (set1 (tuple2 (tuple2 (tuple2 b1 c1) a1) (tuple2 (tuple2 d1 e1) e1)))
  (t2tb4927 x))))

(declare-fun tb2t4927 (uni) (set (tuple21 (tuple21 (tuple21 b c) a)
  (tuple21 (tuple21 d e) e))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 b c) a) (tuple21 (tuple21 d e)
  e))))) (! (= (tb2t4927 (t2tb4927 i)) i) :pattern ((t2tb4927 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 (tuple2 b1 c1) a1) (tuple2 (tuple2 d1 e1) e1))) j)
     (= (t2tb4927 (tb2t4927 j)) j)) :pattern ((t2tb4927 (tb2t4927 j))) )))

(declare-fun t2tb4928 ((tuple21 (tuple21 (tuple21 b c) a) (tuple21 (tuple21 d
  e) e))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 b c) a) (tuple21 (tuple21 d e) e))))
  (sort (tuple2 (tuple2 (tuple2 b1 c1) a1) (tuple2 (tuple2 d1 e1) e1))
  (t2tb4928 x))))

(declare-fun tb2t4928 (uni) (tuple21 (tuple21 (tuple21 b c) a)
  (tuple21 (tuple21 d e) e)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 b c) a) (tuple21 (tuple21 d e) e))))
  (! (= (tb2t4928 (t2tb4928 i)) i) :pattern ((t2tb4928 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 (tuple2 b1 c1) a1) (tuple2 (tuple2 d1 e1) e1))
     j) (= (t2tb4928 (tb2t4928 j)) j)) :pattern ((t2tb4928 (tb2t4928 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 (tuple21 b c) (tuple21 d e)))) (k (set (tuple21 a
  e))) (x (tuple21 b c)) (y a) (z (tuple21 d e)) (w e))
  (= (mem (tuple2 (tuple2 (tuple2 b1 c1) a1) (tuple2 (tuple2 d1 e1) e1))
  (Tuple2 (tuple2 (tuple2 b1 c1) a1) (tuple2 (tuple2 d1 e1) e1)
  (Tuple2 (tuple2 b1 c1) a1 (t2tb134 x) (t2tb2 y))
  (Tuple2 (tuple2 d1 e1) e1 (t2tb3457 z) (t2tb2955 w)))
  (parallel_product e1 a1 (tuple2 d1 e1) (tuple2 b1 c1) (t2tb4102 h)
  (t2tb2943 k)))
  (and (mem49
  (tb2t4104 (Tuple2 (tuple2 b1 c1) (tuple2 d1 e1) (t2tb134 x) (t2tb3457 z)))
  h) (mem44 (tb2t2949 (Tuple2 a1 e1 (t2tb2 y) (t2tb2955 w))) k)))))

(declare-fun t2tb4929 ((set (tuple21 (tuple21 (tuple21 b c) a)
  (tuple21 (tuple21 d e) d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 b c) a) (tuple21 (tuple21 d e)
  d))))) (sort
  (set1 (tuple2 (tuple2 (tuple2 b1 c1) a1) (tuple2 (tuple2 d1 e1) d1)))
  (t2tb4929 x))))

(declare-fun tb2t4929 (uni) (set (tuple21 (tuple21 (tuple21 b c) a)
  (tuple21 (tuple21 d e) d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 b c) a) (tuple21 (tuple21 d e)
  d))))) (! (= (tb2t4929 (t2tb4929 i)) i) :pattern ((t2tb4929 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 (tuple2 b1 c1) a1) (tuple2 (tuple2 d1 e1) d1))) j)
     (= (t2tb4929 (tb2t4929 j)) j)) :pattern ((t2tb4929 (tb2t4929 j))) )))

(declare-fun t2tb4930 ((tuple21 (tuple21 (tuple21 b c) a) (tuple21 (tuple21 d
  e) d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 b c) a) (tuple21 (tuple21 d e) d))))
  (sort (tuple2 (tuple2 (tuple2 b1 c1) a1) (tuple2 (tuple2 d1 e1) d1))
  (t2tb4930 x))))

(declare-fun tb2t4930 (uni) (tuple21 (tuple21 (tuple21 b c) a)
  (tuple21 (tuple21 d e) d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 b c) a) (tuple21 (tuple21 d e) d))))
  (! (= (tb2t4930 (t2tb4930 i)) i) :pattern ((t2tb4930 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 (tuple2 b1 c1) a1) (tuple2 (tuple2 d1 e1) d1))
     j) (= (t2tb4930 (tb2t4930 j)) j)) :pattern ((t2tb4930 (tb2t4930 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 (tuple21 b c) (tuple21 d e)))) (k (set (tuple21 a
  d))) (x (tuple21 b c)) (y a) (z (tuple21 d e)) (w d))
  (= (mem (tuple2 (tuple2 (tuple2 b1 c1) a1) (tuple2 (tuple2 d1 e1) d1))
  (Tuple2 (tuple2 (tuple2 b1 c1) a1) (tuple2 (tuple2 d1 e1) d1)
  (Tuple2 (tuple2 b1 c1) a1 (t2tb134 x) (t2tb2 y))
  (Tuple2 (tuple2 d1 e1) d1 (t2tb3457 z) (t2tb694 w)))
  (parallel_product d1 a1 (tuple2 d1 e1) (tuple2 b1 c1) (t2tb4102 h)
  (t2tb903 k)))
  (and (mem49
  (tb2t4104 (Tuple2 (tuple2 b1 c1) (tuple2 d1 e1) (t2tb134 x) (t2tb3457 z)))
  h) (mem32 (tb2t904 (Tuple2 a1 d1 (t2tb2 y) (t2tb694 w))) k)))))

(declare-fun t2tb4931 ((set (tuple21 (tuple21 (tuple21 b c) a)
  (tuple21 (tuple21 d e) (tuple21 b c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 b c) a) (tuple21 (tuple21 d e)
  (tuple21 b c)))))) (sort
  (set1
  (tuple2 (tuple2 (tuple2 b1 c1) a1) (tuple2 (tuple2 d1 e1) (tuple2 b1 c1))))
  (t2tb4931 x))))

(declare-fun tb2t4931 (uni) (set (tuple21 (tuple21 (tuple21 b c) a)
  (tuple21 (tuple21 d e) (tuple21 b c)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 b c) a) (tuple21 (tuple21 d e)
  (tuple21 b c))))))
  (! (= (tb2t4931 (t2tb4931 i)) i) :pattern ((t2tb4931 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (tuple2 (tuple2 (tuple2 b1 c1) a1)
     (tuple2 (tuple2 d1 e1) (tuple2 b1 c1)))) j)
     (= (t2tb4931 (tb2t4931 j)) j)) :pattern ((t2tb4931 (tb2t4931 j))) )))

(declare-fun t2tb4932 ((tuple21 (tuple21 (tuple21 b c) a) (tuple21 (tuple21 d
  e) (tuple21 b c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 b c) a) (tuple21 (tuple21 d e)
  (tuple21 b c))))) (sort
  (tuple2 (tuple2 (tuple2 b1 c1) a1) (tuple2 (tuple2 d1 e1) (tuple2 b1 c1)))
  (t2tb4932 x))))

(declare-fun tb2t4932 (uni) (tuple21 (tuple21 (tuple21 b c) a)
  (tuple21 (tuple21 d e) (tuple21 b c))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 b c) a) (tuple21 (tuple21 d e)
  (tuple21 b c)))))
  (! (= (tb2t4932 (t2tb4932 i)) i) :pattern ((t2tb4932 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (tuple2 (tuple2 (tuple2 b1 c1) a1)
     (tuple2 (tuple2 d1 e1) (tuple2 b1 c1))) j)
     (= (t2tb4932 (tb2t4932 j)) j)) :pattern ((t2tb4932 (tb2t4932 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 (tuple21 b c) (tuple21 d e)))) (k (set (tuple21 a
  (tuple21 b c)))) (x (tuple21 b c)) (y a) (z (tuple21 d e)) (w (tuple21 b
  c)))
  (= (mem
  (tuple2 (tuple2 (tuple2 b1 c1) a1) (tuple2 (tuple2 d1 e1) (tuple2 b1 c1)))
  (Tuple2 (tuple2 (tuple2 b1 c1) a1) (tuple2 (tuple2 d1 e1) (tuple2 b1 c1))
  (Tuple2 (tuple2 b1 c1) a1 (t2tb134 x) (t2tb2 y))
  (Tuple2 (tuple2 d1 e1) (tuple2 b1 c1) (t2tb3457 z) (t2tb134 w)))
  (parallel_product (tuple2 b1 c1) a1 (tuple2 d1 e1) (tuple2 b1 c1)
  (t2tb4102 h) (t2tb261 k)))
  (and (mem49
  (tb2t4104 (Tuple2 (tuple2 b1 c1) (tuple2 d1 e1) (t2tb134 x) (t2tb3457 z)))
  h) (mem14 (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 y) (t2tb134 w))) k)))))

(declare-fun t2tb4933 ((set (tuple21 (tuple21 (tuple21 b c) a)
  (tuple21 (tuple21 d e) c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 b c) a) (tuple21 (tuple21 d e)
  c))))) (sort
  (set1 (tuple2 (tuple2 (tuple2 b1 c1) a1) (tuple2 (tuple2 d1 e1) c1)))
  (t2tb4933 x))))

(declare-fun tb2t4933 (uni) (set (tuple21 (tuple21 (tuple21 b c) a)
  (tuple21 (tuple21 d e) c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 b c) a) (tuple21 (tuple21 d e)
  c))))) (! (= (tb2t4933 (t2tb4933 i)) i) :pattern ((t2tb4933 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 (tuple2 b1 c1) a1) (tuple2 (tuple2 d1 e1) c1))) j)
     (= (t2tb4933 (tb2t4933 j)) j)) :pattern ((t2tb4933 (tb2t4933 j))) )))

(declare-fun t2tb4934 ((tuple21 (tuple21 (tuple21 b c) a) (tuple21 (tuple21 d
  e) c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 b c) a) (tuple21 (tuple21 d e) c))))
  (sort (tuple2 (tuple2 (tuple2 b1 c1) a1) (tuple2 (tuple2 d1 e1) c1))
  (t2tb4934 x))))

(declare-fun tb2t4934 (uni) (tuple21 (tuple21 (tuple21 b c) a)
  (tuple21 (tuple21 d e) c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 b c) a) (tuple21 (tuple21 d e) c))))
  (! (= (tb2t4934 (t2tb4934 i)) i) :pattern ((t2tb4934 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 (tuple2 b1 c1) a1) (tuple2 (tuple2 d1 e1) c1))
     j) (= (t2tb4934 (tb2t4934 j)) j)) :pattern ((t2tb4934 (tb2t4934 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 (tuple21 b c) (tuple21 d e)))) (k (set (tuple21 a
  c))) (x (tuple21 b c)) (y a) (z (tuple21 d e)) (w c))
  (= (mem (tuple2 (tuple2 (tuple2 b1 c1) a1) (tuple2 (tuple2 d1 e1) c1))
  (Tuple2 (tuple2 (tuple2 b1 c1) a1) (tuple2 (tuple2 d1 e1) c1)
  (Tuple2 (tuple2 b1 c1) a1 (t2tb134 x) (t2tb2 y))
  (Tuple2 (tuple2 d1 e1) c1 (t2tb3457 z) (t2tb135 w)))
  (parallel_product c1 a1 (tuple2 d1 e1) (tuple2 b1 c1) (t2tb4102 h)
  (t2tb129 k)))
  (and (mem49
  (tb2t4104 (Tuple2 (tuple2 b1 c1) (tuple2 d1 e1) (t2tb134 x) (t2tb3457 z)))
  h) (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 y) (t2tb135 w))) k)))))

(declare-fun t2tb4935 ((set (tuple21 (tuple21 (tuple21 b c) a)
  (tuple21 (tuple21 d e) b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 b c) a) (tuple21 (tuple21 d e)
  b))))) (sort
  (set1 (tuple2 (tuple2 (tuple2 b1 c1) a1) (tuple2 (tuple2 d1 e1) b1)))
  (t2tb4935 x))))

(declare-fun tb2t4935 (uni) (set (tuple21 (tuple21 (tuple21 b c) a)
  (tuple21 (tuple21 d e) b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 b c) a) (tuple21 (tuple21 d e)
  b))))) (! (= (tb2t4935 (t2tb4935 i)) i) :pattern ((t2tb4935 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 (tuple2 b1 c1) a1) (tuple2 (tuple2 d1 e1) b1))) j)
     (= (t2tb4935 (tb2t4935 j)) j)) :pattern ((t2tb4935 (tb2t4935 j))) )))

(declare-fun t2tb4936 ((tuple21 (tuple21 (tuple21 b c) a) (tuple21 (tuple21 d
  e) b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 b c) a) (tuple21 (tuple21 d e) b))))
  (sort (tuple2 (tuple2 (tuple2 b1 c1) a1) (tuple2 (tuple2 d1 e1) b1))
  (t2tb4936 x))))

(declare-fun tb2t4936 (uni) (tuple21 (tuple21 (tuple21 b c) a)
  (tuple21 (tuple21 d e) b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 b c) a) (tuple21 (tuple21 d e) b))))
  (! (= (tb2t4936 (t2tb4936 i)) i) :pattern ((t2tb4936 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 (tuple2 b1 c1) a1) (tuple2 (tuple2 d1 e1) b1))
     j) (= (t2tb4936 (tb2t4936 j)) j)) :pattern ((t2tb4936 (tb2t4936 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 (tuple21 b c) (tuple21 d e)))) (k (set (tuple21 a
  b))) (x (tuple21 b c)) (y a) (z (tuple21 d e)) (w b))
  (= (mem (tuple2 (tuple2 (tuple2 b1 c1) a1) (tuple2 (tuple2 d1 e1) b1))
  (Tuple2 (tuple2 (tuple2 b1 c1) a1) (tuple2 (tuple2 d1 e1) b1)
  (Tuple2 (tuple2 b1 c1) a1 (t2tb134 x) (t2tb2 y))
  (Tuple2 (tuple2 d1 e1) b1 (t2tb3457 z) (t2tb14 w)))
  (parallel_product b1 a1 (tuple2 d1 e1) (tuple2 b1 c1) (t2tb4102 h)
  (t2tb11 k)))
  (and (mem49
  (tb2t4104 (Tuple2 (tuple2 b1 c1) (tuple2 d1 e1) (t2tb134 x) (t2tb3457 z)))
  h) (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 y) (t2tb14 w))) k)))))

;; mem_parallel_product
  (assert
  (forall ((c2 ty) (d2 ty))
  (forall ((h (set (tuple21 (tuple21 b c) (tuple21 d e)))) (k uni)
  (x (tuple21 b c)) (y uni) (z (tuple21 d e)) (w uni))
  (= (mem (tuple2 (tuple2 (tuple2 b1 c1) c2) (tuple2 (tuple2 d1 e1) d2))
  (Tuple2 (tuple2 (tuple2 b1 c1) c2) (tuple2 (tuple2 d1 e1) d2)
  (Tuple2 (tuple2 b1 c1) c2 (t2tb134 x) y)
  (Tuple2 (tuple2 d1 e1) d2 (t2tb3457 z) w))
  (parallel_product d2 c2 (tuple2 d1 e1) (tuple2 b1 c1) (t2tb4102 h) k))
  (and (mem49
  (tb2t4104 (Tuple2 (tuple2 b1 c1) (tuple2 d1 e1) (t2tb134 x) (t2tb3457 z)))
  h) (mem (tuple2 c2 d2) (Tuple2 c2 d2 y w) k))))))

(declare-fun t2tb4937 ((set (tuple21 (tuple21 c (tuple21 b c)) (tuple21 e
  (tuple21 d e))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 c (tuple21 b c)) (tuple21 e (tuple21 d
  e)))))) (sort
  (set1 (tuple2 (tuple2 c1 (tuple2 b1 c1)) (tuple2 e1 (tuple2 d1 e1))))
  (t2tb4937 x))))

(declare-fun tb2t4937 (uni) (set (tuple21 (tuple21 c (tuple21 b c))
  (tuple21 e (tuple21 d e)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 c (tuple21 b c)) (tuple21 e (tuple21 d
  e)))))) (! (= (tb2t4937 (t2tb4937 i)) i) :pattern ((t2tb4937 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 c1 (tuple2 b1 c1)) (tuple2 e1 (tuple2 d1 e1)))) j)
     (= (t2tb4937 (tb2t4937 j)) j)) :pattern ((t2tb4937 (tb2t4937 j))) )))

(declare-fun t2tb4938 ((tuple21 (tuple21 c (tuple21 b c)) (tuple21 e
  (tuple21 d e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 c (tuple21 b c)) (tuple21 e (tuple21 d e)))))
  (sort (tuple2 (tuple2 c1 (tuple2 b1 c1)) (tuple2 e1 (tuple2 d1 e1)))
  (t2tb4938 x))))

(declare-fun tb2t4938 (uni) (tuple21 (tuple21 c (tuple21 b c)) (tuple21 e
  (tuple21 d e))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 c (tuple21 b c)) (tuple21 e (tuple21 d e)))))
  (! (= (tb2t4938 (t2tb4938 i)) i) :pattern ((t2tb4938 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 c1 (tuple2 b1 c1)) (tuple2 e1 (tuple2 d1 e1)))
     j) (= (t2tb4938 (tb2t4938 j)) j)) :pattern ((t2tb4938 (tb2t4938 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 c e))) (k (set (tuple21 (tuple21 b c) (tuple21 d
  e)))) (x c) (y (tuple21 b c)) (z e) (w (tuple21 d e)))
  (= (mem (tuple2 (tuple2 c1 (tuple2 b1 c1)) (tuple2 e1 (tuple2 d1 e1)))
  (Tuple2 (tuple2 c1 (tuple2 b1 c1)) (tuple2 e1 (tuple2 d1 e1))
  (Tuple2 c1 (tuple2 b1 c1) (t2tb135 x) (t2tb134 y))
  (Tuple2 e1 (tuple2 d1 e1) (t2tb2955 z) (t2tb3457 w)))
  (parallel_product (tuple2 d1 e1) (tuple2 b1 c1) e1 c1 (t2tb3478 h)
  (t2tb4102 k)))
  (and (mem46 (tb2t3479 (Tuple2 c1 e1 (t2tb135 x) (t2tb2955 z))) h) (mem49
  (tb2t4104 (Tuple2 (tuple2 b1 c1) (tuple2 d1 e1) (t2tb134 y) (t2tb3457 w)))
  k)))))

(declare-fun t2tb4939 ((set (tuple21 (tuple21 c c) (tuple21 e e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 c c) (tuple21 e e))))) (sort
  (set1 (tuple2 (tuple2 c1 c1) (tuple2 e1 e1))) (t2tb4939 x))))

(declare-fun tb2t4939 (uni) (set (tuple21 (tuple21 c c) (tuple21 e e))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 c c) (tuple21 e e)))))
  (! (= (tb2t4939 (t2tb4939 i)) i) :pattern ((t2tb4939 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 c1 c1) (tuple2 e1 e1))) j)
     (= (t2tb4939 (tb2t4939 j)) j)) :pattern ((t2tb4939 (tb2t4939 j))) )))

(declare-fun t2tb4940 ((tuple21 (tuple21 c c) (tuple21 e e))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 c c) (tuple21 e e)))) (sort
  (tuple2 (tuple2 c1 c1) (tuple2 e1 e1)) (t2tb4940 x))))

(declare-fun tb2t4940 (uni) (tuple21 (tuple21 c c) (tuple21 e e)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 c c) (tuple21 e e))))
  (! (= (tb2t4940 (t2tb4940 i)) i) :pattern ((t2tb4940 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 c1 c1) (tuple2 e1 e1)) j)
     (= (t2tb4940 (tb2t4940 j)) j)) :pattern ((t2tb4940 (tb2t4940 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 c e))) (k (set (tuple21 c e))) (x c) (y c) (z e)
  (w e))
  (= (mem (tuple2 (tuple2 c1 c1) (tuple2 e1 e1))
  (Tuple2 (tuple2 c1 c1) (tuple2 e1 e1)
  (Tuple2 c1 c1 (t2tb135 x) (t2tb135 y))
  (Tuple2 e1 e1 (t2tb2955 z) (t2tb2955 w)))
  (parallel_product e1 c1 e1 c1 (t2tb3478 h) (t2tb3478 k)))
  (and (mem46 (tb2t3479 (Tuple2 c1 e1 (t2tb135 x) (t2tb2955 z))) h) (mem46
  (tb2t3479 (Tuple2 c1 e1 (t2tb135 y) (t2tb2955 w))) k)))))

(declare-fun t2tb4941 ((set (tuple21 (tuple21 c b) (tuple21 e d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 c b) (tuple21 e d))))) (sort
  (set1 (tuple2 (tuple2 c1 b1) (tuple2 e1 d1))) (t2tb4941 x))))

(declare-fun tb2t4941 (uni) (set (tuple21 (tuple21 c b) (tuple21 e d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 c b) (tuple21 e d)))))
  (! (= (tb2t4941 (t2tb4941 i)) i) :pattern ((t2tb4941 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 c1 b1) (tuple2 e1 d1))) j)
     (= (t2tb4941 (tb2t4941 j)) j)) :pattern ((t2tb4941 (tb2t4941 j))) )))

(declare-fun t2tb4942 ((tuple21 (tuple21 c b) (tuple21 e d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 c b) (tuple21 e d)))) (sort
  (tuple2 (tuple2 c1 b1) (tuple2 e1 d1)) (t2tb4942 x))))

(declare-fun tb2t4942 (uni) (tuple21 (tuple21 c b) (tuple21 e d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 c b) (tuple21 e d))))
  (! (= (tb2t4942 (t2tb4942 i)) i) :pattern ((t2tb4942 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 c1 b1) (tuple2 e1 d1)) j)
     (= (t2tb4942 (tb2t4942 j)) j)) :pattern ((t2tb4942 (tb2t4942 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 c e))) (k (set (tuple21 b d))) (x c) (y b) (z e)
  (w d))
  (= (mem (tuple2 (tuple2 c1 b1) (tuple2 e1 d1))
  (Tuple2 (tuple2 c1 b1) (tuple2 e1 d1) (Tuple2 c1 b1 (t2tb135 x) (t2tb14 y))
  (Tuple2 e1 d1 (t2tb2955 z) (t2tb694 w)))
  (parallel_product d1 b1 e1 c1 (t2tb3478 h) (t2tb687 k)))
  (and (mem46 (tb2t3479 (Tuple2 c1 e1 (t2tb135 x) (t2tb2955 z))) h) (mem23
  (tb2t692 (Tuple2 b1 d1 (t2tb14 y) (t2tb694 w))) k)))))

(declare-fun t2tb4943 ((set (tuple21 (tuple21 c a) (tuple21 e (tuple21 d
  e))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 c a) (tuple21 e (tuple21 d e)))))) (sort
  (set1 (tuple2 (tuple2 c1 a1) (tuple2 e1 (tuple2 d1 e1)))) (t2tb4943 x))))

(declare-fun tb2t4943 (uni) (set (tuple21 (tuple21 c a) (tuple21 e (tuple21 d
  e)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 c a) (tuple21 e (tuple21 d e))))))
  (! (= (tb2t4943 (t2tb4943 i)) i) :pattern ((t2tb4943 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 c1 a1) (tuple2 e1 (tuple2 d1 e1)))) j)
     (= (t2tb4943 (tb2t4943 j)) j)) :pattern ((t2tb4943 (tb2t4943 j))) )))

(declare-fun t2tb4944 ((tuple21 (tuple21 c a) (tuple21 e (tuple21 d
  e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 c a) (tuple21 e (tuple21 d e))))) (sort
  (tuple2 (tuple2 c1 a1) (tuple2 e1 (tuple2 d1 e1))) (t2tb4944 x))))

(declare-fun tb2t4944 (uni) (tuple21 (tuple21 c a) (tuple21 e (tuple21 d
  e))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 c a) (tuple21 e (tuple21 d e)))))
  (! (= (tb2t4944 (t2tb4944 i)) i) :pattern ((t2tb4944 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 c1 a1) (tuple2 e1 (tuple2 d1 e1))) j)
     (= (t2tb4944 (tb2t4944 j)) j)) :pattern ((t2tb4944 (tb2t4944 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 c e))) (k (set (tuple21 a (tuple21 d e)))) (x c)
  (y a) (z e) (w (tuple21 d e)))
  (= (mem (tuple2 (tuple2 c1 a1) (tuple2 e1 (tuple2 d1 e1)))
  (Tuple2 (tuple2 c1 a1) (tuple2 e1 (tuple2 d1 e1))
  (Tuple2 c1 a1 (t2tb135 x) (t2tb2 y))
  (Tuple2 e1 (tuple2 d1 e1) (t2tb2955 z) (t2tb3457 w)))
  (parallel_product (tuple2 d1 e1) a1 e1 c1 (t2tb3478 h) (t2tb4103 k)))
  (and (mem46 (tb2t3479 (Tuple2 c1 e1 (t2tb135 x) (t2tb2955 z))) h) (mem48
  (tb2t4105 (Tuple2 a1 (tuple2 d1 e1) (t2tb2 y) (t2tb3457 w))) k)))))

(declare-fun t2tb4945 ((set (tuple21 (tuple21 c a) (tuple21 e e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 c a) (tuple21 e e))))) (sort
  (set1 (tuple2 (tuple2 c1 a1) (tuple2 e1 e1))) (t2tb4945 x))))

(declare-fun tb2t4945 (uni) (set (tuple21 (tuple21 c a) (tuple21 e e))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 c a) (tuple21 e e)))))
  (! (= (tb2t4945 (t2tb4945 i)) i) :pattern ((t2tb4945 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 c1 a1) (tuple2 e1 e1))) j)
     (= (t2tb4945 (tb2t4945 j)) j)) :pattern ((t2tb4945 (tb2t4945 j))) )))

(declare-fun t2tb4946 ((tuple21 (tuple21 c a) (tuple21 e e))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 c a) (tuple21 e e)))) (sort
  (tuple2 (tuple2 c1 a1) (tuple2 e1 e1)) (t2tb4946 x))))

(declare-fun tb2t4946 (uni) (tuple21 (tuple21 c a) (tuple21 e e)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 c a) (tuple21 e e))))
  (! (= (tb2t4946 (t2tb4946 i)) i) :pattern ((t2tb4946 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 c1 a1) (tuple2 e1 e1)) j)
     (= (t2tb4946 (tb2t4946 j)) j)) :pattern ((t2tb4946 (tb2t4946 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 c e))) (k (set (tuple21 a e))) (x c) (y a) (z e)
  (w e))
  (= (mem (tuple2 (tuple2 c1 a1) (tuple2 e1 e1))
  (Tuple2 (tuple2 c1 a1) (tuple2 e1 e1) (Tuple2 c1 a1 (t2tb135 x) (t2tb2 y))
  (Tuple2 e1 e1 (t2tb2955 z) (t2tb2955 w)))
  (parallel_product e1 a1 e1 c1 (t2tb3478 h) (t2tb2943 k)))
  (and (mem46 (tb2t3479 (Tuple2 c1 e1 (t2tb135 x) (t2tb2955 z))) h) (mem44
  (tb2t2949 (Tuple2 a1 e1 (t2tb2 y) (t2tb2955 w))) k)))))

(declare-fun t2tb4947 ((set (tuple21 (tuple21 c a) (tuple21 e d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 c a) (tuple21 e d))))) (sort
  (set1 (tuple2 (tuple2 c1 a1) (tuple2 e1 d1))) (t2tb4947 x))))

(declare-fun tb2t4947 (uni) (set (tuple21 (tuple21 c a) (tuple21 e d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 c a) (tuple21 e d)))))
  (! (= (tb2t4947 (t2tb4947 i)) i) :pattern ((t2tb4947 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 c1 a1) (tuple2 e1 d1))) j)
     (= (t2tb4947 (tb2t4947 j)) j)) :pattern ((t2tb4947 (tb2t4947 j))) )))

(declare-fun t2tb4948 ((tuple21 (tuple21 c a) (tuple21 e d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 c a) (tuple21 e d)))) (sort
  (tuple2 (tuple2 c1 a1) (tuple2 e1 d1)) (t2tb4948 x))))

(declare-fun tb2t4948 (uni) (tuple21 (tuple21 c a) (tuple21 e d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 c a) (tuple21 e d))))
  (! (= (tb2t4948 (t2tb4948 i)) i) :pattern ((t2tb4948 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 c1 a1) (tuple2 e1 d1)) j)
     (= (t2tb4948 (tb2t4948 j)) j)) :pattern ((t2tb4948 (tb2t4948 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 c e))) (k (set (tuple21 a d))) (x c) (y a) (z e)
  (w d))
  (= (mem (tuple2 (tuple2 c1 a1) (tuple2 e1 d1))
  (Tuple2 (tuple2 c1 a1) (tuple2 e1 d1) (Tuple2 c1 a1 (t2tb135 x) (t2tb2 y))
  (Tuple2 e1 d1 (t2tb2955 z) (t2tb694 w)))
  (parallel_product d1 a1 e1 c1 (t2tb3478 h) (t2tb903 k)))
  (and (mem46 (tb2t3479 (Tuple2 c1 e1 (t2tb135 x) (t2tb2955 z))) h) (mem32
  (tb2t904 (Tuple2 a1 d1 (t2tb2 y) (t2tb694 w))) k)))))

(declare-fun t2tb4949 ((set (tuple21 (tuple21 c a) (tuple21 e (tuple21 b
  c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 c a) (tuple21 e (tuple21 b c)))))) (sort
  (set1 (tuple2 (tuple2 c1 a1) (tuple2 e1 (tuple2 b1 c1)))) (t2tb4949 x))))

(declare-fun tb2t4949 (uni) (set (tuple21 (tuple21 c a) (tuple21 e (tuple21 b
  c)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 c a) (tuple21 e (tuple21 b c))))))
  (! (= (tb2t4949 (t2tb4949 i)) i) :pattern ((t2tb4949 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 c1 a1) (tuple2 e1 (tuple2 b1 c1)))) j)
     (= (t2tb4949 (tb2t4949 j)) j)) :pattern ((t2tb4949 (tb2t4949 j))) )))

(declare-fun t2tb4950 ((tuple21 (tuple21 c a) (tuple21 e (tuple21 b
  c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 c a) (tuple21 e (tuple21 b c))))) (sort
  (tuple2 (tuple2 c1 a1) (tuple2 e1 (tuple2 b1 c1))) (t2tb4950 x))))

(declare-fun tb2t4950 (uni) (tuple21 (tuple21 c a) (tuple21 e (tuple21 b
  c))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 c a) (tuple21 e (tuple21 b c)))))
  (! (= (tb2t4950 (t2tb4950 i)) i) :pattern ((t2tb4950 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 c1 a1) (tuple2 e1 (tuple2 b1 c1))) j)
     (= (t2tb4950 (tb2t4950 j)) j)) :pattern ((t2tb4950 (tb2t4950 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 c e))) (k (set (tuple21 a (tuple21 b c)))) (x c)
  (y a) (z e) (w (tuple21 b c)))
  (= (mem (tuple2 (tuple2 c1 a1) (tuple2 e1 (tuple2 b1 c1)))
  (Tuple2 (tuple2 c1 a1) (tuple2 e1 (tuple2 b1 c1))
  (Tuple2 c1 a1 (t2tb135 x) (t2tb2 y))
  (Tuple2 e1 (tuple2 b1 c1) (t2tb2955 z) (t2tb134 w)))
  (parallel_product (tuple2 b1 c1) a1 e1 c1 (t2tb3478 h) (t2tb261 k)))
  (and (mem46 (tb2t3479 (Tuple2 c1 e1 (t2tb135 x) (t2tb2955 z))) h) (mem14
  (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 y) (t2tb134 w))) k)))))

(declare-fun t2tb4951 ((set (tuple21 (tuple21 c a) (tuple21 e c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 c a) (tuple21 e c))))) (sort
  (set1 (tuple2 (tuple2 c1 a1) (tuple2 e1 c1))) (t2tb4951 x))))

(declare-fun tb2t4951 (uni) (set (tuple21 (tuple21 c a) (tuple21 e c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 c a) (tuple21 e c)))))
  (! (= (tb2t4951 (t2tb4951 i)) i) :pattern ((t2tb4951 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 c1 a1) (tuple2 e1 c1))) j)
     (= (t2tb4951 (tb2t4951 j)) j)) :pattern ((t2tb4951 (tb2t4951 j))) )))

(declare-fun t2tb4952 ((tuple21 (tuple21 c a) (tuple21 e c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 c a) (tuple21 e c)))) (sort
  (tuple2 (tuple2 c1 a1) (tuple2 e1 c1)) (t2tb4952 x))))

(declare-fun tb2t4952 (uni) (tuple21 (tuple21 c a) (tuple21 e c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 c a) (tuple21 e c))))
  (! (= (tb2t4952 (t2tb4952 i)) i) :pattern ((t2tb4952 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 c1 a1) (tuple2 e1 c1)) j)
     (= (t2tb4952 (tb2t4952 j)) j)) :pattern ((t2tb4952 (tb2t4952 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 c e))) (k (set (tuple21 a c))) (x c) (y a) (z e)
  (w c))
  (= (mem (tuple2 (tuple2 c1 a1) (tuple2 e1 c1))
  (Tuple2 (tuple2 c1 a1) (tuple2 e1 c1) (Tuple2 c1 a1 (t2tb135 x) (t2tb2 y))
  (Tuple2 e1 c1 (t2tb2955 z) (t2tb135 w)))
  (parallel_product c1 a1 e1 c1 (t2tb3478 h) (t2tb129 k)))
  (and (mem46 (tb2t3479 (Tuple2 c1 e1 (t2tb135 x) (t2tb2955 z))) h) (mem10
  (tb2t133 (Tuple2 a1 c1 (t2tb2 y) (t2tb135 w))) k)))))

(declare-fun t2tb4953 ((set (tuple21 (tuple21 c a) (tuple21 e b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 c a) (tuple21 e b))))) (sort
  (set1 (tuple2 (tuple2 c1 a1) (tuple2 e1 b1))) (t2tb4953 x))))

(declare-fun tb2t4953 (uni) (set (tuple21 (tuple21 c a) (tuple21 e b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 c a) (tuple21 e b)))))
  (! (= (tb2t4953 (t2tb4953 i)) i) :pattern ((t2tb4953 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 c1 a1) (tuple2 e1 b1))) j)
     (= (t2tb4953 (tb2t4953 j)) j)) :pattern ((t2tb4953 (tb2t4953 j))) )))

(declare-fun t2tb4954 ((tuple21 (tuple21 c a) (tuple21 e b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 c a) (tuple21 e b)))) (sort
  (tuple2 (tuple2 c1 a1) (tuple2 e1 b1)) (t2tb4954 x))))

(declare-fun tb2t4954 (uni) (tuple21 (tuple21 c a) (tuple21 e b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 c a) (tuple21 e b))))
  (! (= (tb2t4954 (t2tb4954 i)) i) :pattern ((t2tb4954 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 c1 a1) (tuple2 e1 b1)) j)
     (= (t2tb4954 (tb2t4954 j)) j)) :pattern ((t2tb4954 (tb2t4954 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 c e))) (k (set (tuple21 a b))) (x c) (y a) (z e)
  (w b))
  (= (mem (tuple2 (tuple2 c1 a1) (tuple2 e1 b1))
  (Tuple2 (tuple2 c1 a1) (tuple2 e1 b1) (Tuple2 c1 a1 (t2tb135 x) (t2tb2 y))
  (Tuple2 e1 b1 (t2tb2955 z) (t2tb14 w)))
  (parallel_product b1 a1 e1 c1 (t2tb3478 h) (t2tb11 k)))
  (and (mem46 (tb2t3479 (Tuple2 c1 e1 (t2tb135 x) (t2tb2955 z))) h) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 y) (t2tb14 w))) k)))))

;; mem_parallel_product
  (assert
  (forall ((c2 ty) (d2 ty))
  (forall ((h (set (tuple21 c e))) (k uni) (x c) (y uni) (z e) (w uni))
  (= (mem (tuple2 (tuple2 c1 c2) (tuple2 e1 d2))
  (Tuple2 (tuple2 c1 c2) (tuple2 e1 d2) (Tuple2 c1 c2 (t2tb135 x) y)
  (Tuple2 e1 d2 (t2tb2955 z) w))
  (parallel_product d2 c2 e1 c1 (t2tb3478 h) k))
  (and (mem46 (tb2t3479 (Tuple2 c1 e1 (t2tb135 x) (t2tb2955 z))) h) (mem
  (tuple2 c2 d2) (Tuple2 c2 d2 y w) k))))))

(declare-fun t2tb4955 ((set (tuple21 (tuple21 b (tuple21 b c)) (tuple21 d
  (tuple21 d e))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b (tuple21 b c)) (tuple21 d (tuple21 d
  e)))))) (sort
  (set1 (tuple2 (tuple2 b1 (tuple2 b1 c1)) (tuple2 d1 (tuple2 d1 e1))))
  (t2tb4955 x))))

(declare-fun tb2t4955 (uni) (set (tuple21 (tuple21 b (tuple21 b c))
  (tuple21 d (tuple21 d e)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b (tuple21 b c)) (tuple21 d (tuple21 d
  e)))))) (! (= (tb2t4955 (t2tb4955 i)) i) :pattern ((t2tb4955 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 b1 (tuple2 b1 c1)) (tuple2 d1 (tuple2 d1 e1)))) j)
     (= (t2tb4955 (tb2t4955 j)) j)) :pattern ((t2tb4955 (tb2t4955 j))) )))

(declare-fun t2tb4956 ((tuple21 (tuple21 b (tuple21 b c)) (tuple21 d
  (tuple21 d e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b (tuple21 b c)) (tuple21 d (tuple21 d e)))))
  (sort (tuple2 (tuple2 b1 (tuple2 b1 c1)) (tuple2 d1 (tuple2 d1 e1)))
  (t2tb4956 x))))

(declare-fun tb2t4956 (uni) (tuple21 (tuple21 b (tuple21 b c)) (tuple21 d
  (tuple21 d e))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b (tuple21 b c)) (tuple21 d (tuple21 d e)))))
  (! (= (tb2t4956 (t2tb4956 i)) i) :pattern ((t2tb4956 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 (tuple2 b1 c1)) (tuple2 d1 (tuple2 d1 e1)))
     j) (= (t2tb4956 (tb2t4956 j)) j)) :pattern ((t2tb4956 (tb2t4956 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 b d))) (k (set (tuple21 (tuple21 b c) (tuple21 d
  e)))) (x b) (y (tuple21 b c)) (z d) (w (tuple21 d e)))
  (= (mem (tuple2 (tuple2 b1 (tuple2 b1 c1)) (tuple2 d1 (tuple2 d1 e1)))
  (Tuple2 (tuple2 b1 (tuple2 b1 c1)) (tuple2 d1 (tuple2 d1 e1))
  (Tuple2 b1 (tuple2 b1 c1) (t2tb14 x) (t2tb134 y))
  (Tuple2 d1 (tuple2 d1 e1) (t2tb694 z) (t2tb3457 w)))
  (parallel_product (tuple2 d1 e1) (tuple2 b1 c1) d1 b1 (t2tb687 h)
  (t2tb4102 k)))
  (and (mem23 (tb2t692 (Tuple2 b1 d1 (t2tb14 x) (t2tb694 z))) h) (mem49
  (tb2t4104 (Tuple2 (tuple2 b1 c1) (tuple2 d1 e1) (t2tb134 y) (t2tb3457 w)))
  k)))))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 b d))) (k (set (tuple21 c e))) (x b) (y c) (z d)
  (w e))
  (= (mem49
  (tb2t4104
  (Tuple2 (tuple2 b1 c1) (tuple2 d1 e1) (Tuple2 b1 c1 (t2tb14 x) (t2tb135 y))
  (Tuple2 d1 e1 (t2tb694 z) (t2tb2955 w)))) (parallel_product5 h k))
  (and (mem23 (tb2t692 (Tuple2 b1 d1 (t2tb14 x) (t2tb694 z))) h) (mem46
  (tb2t3479 (Tuple2 c1 e1 (t2tb135 y) (t2tb2955 w))) k)))))

(declare-fun t2tb4957 ((set (tuple21 (tuple21 b b) (tuple21 d d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b b) (tuple21 d d))))) (sort
  (set1 (tuple2 (tuple2 b1 b1) (tuple2 d1 d1))) (t2tb4957 x))))

(declare-fun tb2t4957 (uni) (set (tuple21 (tuple21 b b) (tuple21 d d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b b) (tuple21 d d)))))
  (! (= (tb2t4957 (t2tb4957 i)) i) :pattern ((t2tb4957 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 b1) (tuple2 d1 d1))) j)
     (= (t2tb4957 (tb2t4957 j)) j)) :pattern ((t2tb4957 (tb2t4957 j))) )))

(declare-fun t2tb4958 ((tuple21 (tuple21 b b) (tuple21 d d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b b) (tuple21 d d)))) (sort
  (tuple2 (tuple2 b1 b1) (tuple2 d1 d1)) (t2tb4958 x))))

(declare-fun tb2t4958 (uni) (tuple21 (tuple21 b b) (tuple21 d d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b b) (tuple21 d d))))
  (! (= (tb2t4958 (t2tb4958 i)) i) :pattern ((t2tb4958 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 b1) (tuple2 d1 d1)) j)
     (= (t2tb4958 (tb2t4958 j)) j)) :pattern ((t2tb4958 (tb2t4958 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 b d))) (k (set (tuple21 b d))) (x b) (y b) (z d)
  (w d))
  (= (mem (tuple2 (tuple2 b1 b1) (tuple2 d1 d1))
  (Tuple2 (tuple2 b1 b1) (tuple2 d1 d1) (Tuple2 b1 b1 (t2tb14 x) (t2tb14 y))
  (Tuple2 d1 d1 (t2tb694 z) (t2tb694 w)))
  (parallel_product d1 b1 d1 b1 (t2tb687 h) (t2tb687 k)))
  (and (mem23 (tb2t692 (Tuple2 b1 d1 (t2tb14 x) (t2tb694 z))) h) (mem23
  (tb2t692 (Tuple2 b1 d1 (t2tb14 y) (t2tb694 w))) k)))))

(declare-fun t2tb4959 ((set (tuple21 (tuple21 b a) (tuple21 d (tuple21 d
  e))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b a) (tuple21 d (tuple21 d e)))))) (sort
  (set1 (tuple2 (tuple2 b1 a1) (tuple2 d1 (tuple2 d1 e1)))) (t2tb4959 x))))

(declare-fun tb2t4959 (uni) (set (tuple21 (tuple21 b a) (tuple21 d (tuple21 d
  e)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b a) (tuple21 d (tuple21 d e))))))
  (! (= (tb2t4959 (t2tb4959 i)) i) :pattern ((t2tb4959 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 a1) (tuple2 d1 (tuple2 d1 e1)))) j)
     (= (t2tb4959 (tb2t4959 j)) j)) :pattern ((t2tb4959 (tb2t4959 j))) )))

(declare-fun t2tb4960 ((tuple21 (tuple21 b a) (tuple21 d (tuple21 d
  e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b a) (tuple21 d (tuple21 d e))))) (sort
  (tuple2 (tuple2 b1 a1) (tuple2 d1 (tuple2 d1 e1))) (t2tb4960 x))))

(declare-fun tb2t4960 (uni) (tuple21 (tuple21 b a) (tuple21 d (tuple21 d
  e))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b a) (tuple21 d (tuple21 d e)))))
  (! (= (tb2t4960 (t2tb4960 i)) i) :pattern ((t2tb4960 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 a1) (tuple2 d1 (tuple2 d1 e1))) j)
     (= (t2tb4960 (tb2t4960 j)) j)) :pattern ((t2tb4960 (tb2t4960 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 b d))) (k (set (tuple21 a (tuple21 d e)))) (x b)
  (y a) (z d) (w (tuple21 d e)))
  (= (mem (tuple2 (tuple2 b1 a1) (tuple2 d1 (tuple2 d1 e1)))
  (Tuple2 (tuple2 b1 a1) (tuple2 d1 (tuple2 d1 e1))
  (Tuple2 b1 a1 (t2tb14 x) (t2tb2 y))
  (Tuple2 d1 (tuple2 d1 e1) (t2tb694 z) (t2tb3457 w)))
  (parallel_product (tuple2 d1 e1) a1 d1 b1 (t2tb687 h) (t2tb4103 k)))
  (and (mem23 (tb2t692 (Tuple2 b1 d1 (t2tb14 x) (t2tb694 z))) h) (mem48
  (tb2t4105 (Tuple2 a1 (tuple2 d1 e1) (t2tb2 y) (t2tb3457 w))) k)))))

(declare-fun t2tb4961 ((set (tuple21 (tuple21 b a) (tuple21 d e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b a) (tuple21 d e))))) (sort
  (set1 (tuple2 (tuple2 b1 a1) (tuple2 d1 e1))) (t2tb4961 x))))

(declare-fun tb2t4961 (uni) (set (tuple21 (tuple21 b a) (tuple21 d e))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b a) (tuple21 d e)))))
  (! (= (tb2t4961 (t2tb4961 i)) i) :pattern ((t2tb4961 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 a1) (tuple2 d1 e1))) j)
     (= (t2tb4961 (tb2t4961 j)) j)) :pattern ((t2tb4961 (tb2t4961 j))) )))

(declare-fun t2tb4962 ((tuple21 (tuple21 b a) (tuple21 d e))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b a) (tuple21 d e)))) (sort
  (tuple2 (tuple2 b1 a1) (tuple2 d1 e1)) (t2tb4962 x))))

(declare-fun tb2t4962 (uni) (tuple21 (tuple21 b a) (tuple21 d e)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b a) (tuple21 d e))))
  (! (= (tb2t4962 (t2tb4962 i)) i) :pattern ((t2tb4962 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 a1) (tuple2 d1 e1)) j)
     (= (t2tb4962 (tb2t4962 j)) j)) :pattern ((t2tb4962 (tb2t4962 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 b d))) (k (set (tuple21 a e))) (x b) (y a) (z d)
  (w e))
  (= (mem (tuple2 (tuple2 b1 a1) (tuple2 d1 e1))
  (Tuple2 (tuple2 b1 a1) (tuple2 d1 e1) (Tuple2 b1 a1 (t2tb14 x) (t2tb2 y))
  (Tuple2 d1 e1 (t2tb694 z) (t2tb2955 w)))
  (parallel_product e1 a1 d1 b1 (t2tb687 h) (t2tb2943 k)))
  (and (mem23 (tb2t692 (Tuple2 b1 d1 (t2tb14 x) (t2tb694 z))) h) (mem44
  (tb2t2949 (Tuple2 a1 e1 (t2tb2 y) (t2tb2955 w))) k)))))

(declare-fun t2tb4963 ((set (tuple21 (tuple21 b a) (tuple21 d d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b a) (tuple21 d d))))) (sort
  (set1 (tuple2 (tuple2 b1 a1) (tuple2 d1 d1))) (t2tb4963 x))))

(declare-fun tb2t4963 (uni) (set (tuple21 (tuple21 b a) (tuple21 d d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b a) (tuple21 d d)))))
  (! (= (tb2t4963 (t2tb4963 i)) i) :pattern ((t2tb4963 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 a1) (tuple2 d1 d1))) j)
     (= (t2tb4963 (tb2t4963 j)) j)) :pattern ((t2tb4963 (tb2t4963 j))) )))

(declare-fun t2tb4964 ((tuple21 (tuple21 b a) (tuple21 d d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b a) (tuple21 d d)))) (sort
  (tuple2 (tuple2 b1 a1) (tuple2 d1 d1)) (t2tb4964 x))))

(declare-fun tb2t4964 (uni) (tuple21 (tuple21 b a) (tuple21 d d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b a) (tuple21 d d))))
  (! (= (tb2t4964 (t2tb4964 i)) i) :pattern ((t2tb4964 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 a1) (tuple2 d1 d1)) j)
     (= (t2tb4964 (tb2t4964 j)) j)) :pattern ((t2tb4964 (tb2t4964 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 b d))) (k (set (tuple21 a d))) (x b) (y a) (z d)
  (w d))
  (= (mem (tuple2 (tuple2 b1 a1) (tuple2 d1 d1))
  (Tuple2 (tuple2 b1 a1) (tuple2 d1 d1) (Tuple2 b1 a1 (t2tb14 x) (t2tb2 y))
  (Tuple2 d1 d1 (t2tb694 z) (t2tb694 w)))
  (parallel_product d1 a1 d1 b1 (t2tb687 h) (t2tb903 k)))
  (and (mem23 (tb2t692 (Tuple2 b1 d1 (t2tb14 x) (t2tb694 z))) h) (mem32
  (tb2t904 (Tuple2 a1 d1 (t2tb2 y) (t2tb694 w))) k)))))

(declare-fun t2tb4965 ((set (tuple21 (tuple21 b a) (tuple21 d (tuple21 b
  c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b a) (tuple21 d (tuple21 b c)))))) (sort
  (set1 (tuple2 (tuple2 b1 a1) (tuple2 d1 (tuple2 b1 c1)))) (t2tb4965 x))))

(declare-fun tb2t4965 (uni) (set (tuple21 (tuple21 b a) (tuple21 d (tuple21 b
  c)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b a) (tuple21 d (tuple21 b c))))))
  (! (= (tb2t4965 (t2tb4965 i)) i) :pattern ((t2tb4965 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 a1) (tuple2 d1 (tuple2 b1 c1)))) j)
     (= (t2tb4965 (tb2t4965 j)) j)) :pattern ((t2tb4965 (tb2t4965 j))) )))

(declare-fun t2tb4966 ((tuple21 (tuple21 b a) (tuple21 d (tuple21 b
  c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b a) (tuple21 d (tuple21 b c))))) (sort
  (tuple2 (tuple2 b1 a1) (tuple2 d1 (tuple2 b1 c1))) (t2tb4966 x))))

(declare-fun tb2t4966 (uni) (tuple21 (tuple21 b a) (tuple21 d (tuple21 b
  c))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b a) (tuple21 d (tuple21 b c)))))
  (! (= (tb2t4966 (t2tb4966 i)) i) :pattern ((t2tb4966 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 a1) (tuple2 d1 (tuple2 b1 c1))) j)
     (= (t2tb4966 (tb2t4966 j)) j)) :pattern ((t2tb4966 (tb2t4966 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 b d))) (k (set (tuple21 a (tuple21 b c)))) (x b)
  (y a) (z d) (w (tuple21 b c)))
  (= (mem (tuple2 (tuple2 b1 a1) (tuple2 d1 (tuple2 b1 c1)))
  (Tuple2 (tuple2 b1 a1) (tuple2 d1 (tuple2 b1 c1))
  (Tuple2 b1 a1 (t2tb14 x) (t2tb2 y))
  (Tuple2 d1 (tuple2 b1 c1) (t2tb694 z) (t2tb134 w)))
  (parallel_product (tuple2 b1 c1) a1 d1 b1 (t2tb687 h) (t2tb261 k)))
  (and (mem23 (tb2t692 (Tuple2 b1 d1 (t2tb14 x) (t2tb694 z))) h) (mem14
  (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 y) (t2tb134 w))) k)))))

(declare-fun t2tb4967 ((set (tuple21 (tuple21 b a) (tuple21 d c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b a) (tuple21 d c))))) (sort
  (set1 (tuple2 (tuple2 b1 a1) (tuple2 d1 c1))) (t2tb4967 x))))

(declare-fun tb2t4967 (uni) (set (tuple21 (tuple21 b a) (tuple21 d c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b a) (tuple21 d c)))))
  (! (= (tb2t4967 (t2tb4967 i)) i) :pattern ((t2tb4967 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 a1) (tuple2 d1 c1))) j)
     (= (t2tb4967 (tb2t4967 j)) j)) :pattern ((t2tb4967 (tb2t4967 j))) )))

(declare-fun t2tb4968 ((tuple21 (tuple21 b a) (tuple21 d c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b a) (tuple21 d c)))) (sort
  (tuple2 (tuple2 b1 a1) (tuple2 d1 c1)) (t2tb4968 x))))

(declare-fun tb2t4968 (uni) (tuple21 (tuple21 b a) (tuple21 d c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b a) (tuple21 d c))))
  (! (= (tb2t4968 (t2tb4968 i)) i) :pattern ((t2tb4968 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 a1) (tuple2 d1 c1)) j)
     (= (t2tb4968 (tb2t4968 j)) j)) :pattern ((t2tb4968 (tb2t4968 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 b d))) (k (set (tuple21 a c))) (x b) (y a) (z d)
  (w c))
  (= (mem (tuple2 (tuple2 b1 a1) (tuple2 d1 c1))
  (Tuple2 (tuple2 b1 a1) (tuple2 d1 c1) (Tuple2 b1 a1 (t2tb14 x) (t2tb2 y))
  (Tuple2 d1 c1 (t2tb694 z) (t2tb135 w)))
  (parallel_product c1 a1 d1 b1 (t2tb687 h) (t2tb129 k)))
  (and (mem23 (tb2t692 (Tuple2 b1 d1 (t2tb14 x) (t2tb694 z))) h) (mem10
  (tb2t133 (Tuple2 a1 c1 (t2tb2 y) (t2tb135 w))) k)))))

(declare-fun t2tb4969 ((set (tuple21 (tuple21 b a) (tuple21 d b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b a) (tuple21 d b))))) (sort
  (set1 (tuple2 (tuple2 b1 a1) (tuple2 d1 b1))) (t2tb4969 x))))

(declare-fun tb2t4969 (uni) (set (tuple21 (tuple21 b a) (tuple21 d b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b a) (tuple21 d b)))))
  (! (= (tb2t4969 (t2tb4969 i)) i) :pattern ((t2tb4969 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 a1) (tuple2 d1 b1))) j)
     (= (t2tb4969 (tb2t4969 j)) j)) :pattern ((t2tb4969 (tb2t4969 j))) )))

(declare-fun t2tb4970 ((tuple21 (tuple21 b a) (tuple21 d b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b a) (tuple21 d b)))) (sort
  (tuple2 (tuple2 b1 a1) (tuple2 d1 b1)) (t2tb4970 x))))

(declare-fun tb2t4970 (uni) (tuple21 (tuple21 b a) (tuple21 d b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b a) (tuple21 d b))))
  (! (= (tb2t4970 (t2tb4970 i)) i) :pattern ((t2tb4970 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 a1) (tuple2 d1 b1)) j)
     (= (t2tb4970 (tb2t4970 j)) j)) :pattern ((t2tb4970 (tb2t4970 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 b d))) (k (set (tuple21 a b))) (x b) (y a) (z d)
  (w b))
  (= (mem (tuple2 (tuple2 b1 a1) (tuple2 d1 b1))
  (Tuple2 (tuple2 b1 a1) (tuple2 d1 b1) (Tuple2 b1 a1 (t2tb14 x) (t2tb2 y))
  (Tuple2 d1 b1 (t2tb694 z) (t2tb14 w)))
  (parallel_product b1 a1 d1 b1 (t2tb687 h) (t2tb11 k)))
  (and (mem23 (tb2t692 (Tuple2 b1 d1 (t2tb14 x) (t2tb694 z))) h) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 y) (t2tb14 w))) k)))))

;; mem_parallel_product
  (assert
  (forall ((c2 ty) (d2 ty))
  (forall ((h (set (tuple21 b d))) (k uni) (x b) (y uni) (z d) (w uni))
  (= (mem (tuple2 (tuple2 b1 c2) (tuple2 d1 d2))
  (Tuple2 (tuple2 b1 c2) (tuple2 d1 d2) (Tuple2 b1 c2 (t2tb14 x) y)
  (Tuple2 d1 d2 (t2tb694 z) w)) (parallel_product d2 c2 d1 b1 (t2tb687 h) k))
  (and (mem23 (tb2t692 (Tuple2 b1 d1 (t2tb14 x) (t2tb694 z))) h) (mem
  (tuple2 c2 d2) (Tuple2 c2 d2 y w) k))))))

(declare-fun t2tb4971 ((set (tuple21 (tuple21 a (tuple21 b c))
  (tuple21 (tuple21 d e) (tuple21 d e))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a (tuple21 b c)) (tuple21 (tuple21 d e)
  (tuple21 d e)))))) (sort
  (set1
  (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 (tuple2 d1 e1) (tuple2 d1 e1))))
  (t2tb4971 x))))

(declare-fun tb2t4971 (uni) (set (tuple21 (tuple21 a (tuple21 b c))
  (tuple21 (tuple21 d e) (tuple21 d e)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a (tuple21 b c)) (tuple21 (tuple21 d e)
  (tuple21 d e))))))
  (! (= (tb2t4971 (t2tb4971 i)) i) :pattern ((t2tb4971 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (tuple2 (tuple2 a1 (tuple2 b1 c1))
     (tuple2 (tuple2 d1 e1) (tuple2 d1 e1)))) j)
     (= (t2tb4971 (tb2t4971 j)) j)) :pattern ((t2tb4971 (tb2t4971 j))) )))

(declare-fun t2tb4972 ((tuple21 (tuple21 a (tuple21 b c)) (tuple21 (tuple21 d
  e) (tuple21 d e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a (tuple21 b c)) (tuple21 (tuple21 d e)
  (tuple21 d e))))) (sort
  (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 (tuple2 d1 e1) (tuple2 d1 e1)))
  (t2tb4972 x))))

(declare-fun tb2t4972 (uni) (tuple21 (tuple21 a (tuple21 b c))
  (tuple21 (tuple21 d e) (tuple21 d e))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a (tuple21 b c)) (tuple21 (tuple21 d e)
  (tuple21 d e)))))
  (! (= (tb2t4972 (t2tb4972 i)) i) :pattern ((t2tb4972 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (tuple2 (tuple2 a1 (tuple2 b1 c1))
     (tuple2 (tuple2 d1 e1) (tuple2 d1 e1))) j)
     (= (t2tb4972 (tb2t4972 j)) j)) :pattern ((t2tb4972 (tb2t4972 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a (tuple21 d e)))) (k (set (tuple21 (tuple21 b c)
  (tuple21 d e)))) (x a) (y (tuple21 b c)) (z (tuple21 d e)) (w (tuple21 d
  e)))
  (= (mem
  (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 (tuple2 d1 e1) (tuple2 d1 e1)))
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 (tuple2 d1 e1) (tuple2 d1 e1))
  (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 y))
  (Tuple2 (tuple2 d1 e1) (tuple2 d1 e1) (t2tb3457 z) (t2tb3457 w)))
  (parallel_product (tuple2 d1 e1) (tuple2 b1 c1) (tuple2 d1 e1) a1
  (t2tb4103 h) (t2tb4102 k)))
  (and (mem48 (tb2t4105 (Tuple2 a1 (tuple2 d1 e1) (t2tb2 x) (t2tb3457 z))) h)
  (mem49
  (tb2t4104 (Tuple2 (tuple2 b1 c1) (tuple2 d1 e1) (t2tb134 y) (t2tb3457 w)))
  k)))))

(declare-fun t2tb4973 ((set (tuple21 (tuple21 a c) (tuple21 (tuple21 d e)
  e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a c) (tuple21 (tuple21 d e) e))))) (sort
  (set1 (tuple2 (tuple2 a1 c1) (tuple2 (tuple2 d1 e1) e1))) (t2tb4973 x))))

(declare-fun tb2t4973 (uni) (set (tuple21 (tuple21 a c) (tuple21 (tuple21 d
  e) e))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a c) (tuple21 (tuple21 d e) e)))))
  (! (= (tb2t4973 (t2tb4973 i)) i) :pattern ((t2tb4973 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 c1) (tuple2 (tuple2 d1 e1) e1))) j)
     (= (t2tb4973 (tb2t4973 j)) j)) :pattern ((t2tb4973 (tb2t4973 j))) )))

(declare-fun t2tb4974 ((tuple21 (tuple21 a c) (tuple21 (tuple21 d e)
  e))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a c) (tuple21 (tuple21 d e) e)))) (sort
  (tuple2 (tuple2 a1 c1) (tuple2 (tuple2 d1 e1) e1)) (t2tb4974 x))))

(declare-fun tb2t4974 (uni) (tuple21 (tuple21 a c) (tuple21 (tuple21 d e)
  e)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a c) (tuple21 (tuple21 d e) e))))
  (! (= (tb2t4974 (t2tb4974 i)) i) :pattern ((t2tb4974 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 c1) (tuple2 (tuple2 d1 e1) e1)) j)
     (= (t2tb4974 (tb2t4974 j)) j)) :pattern ((t2tb4974 (tb2t4974 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a (tuple21 d e)))) (k (set (tuple21 c e))) (x a)
  (y c) (z (tuple21 d e)) (w e))
  (= (mem (tuple2 (tuple2 a1 c1) (tuple2 (tuple2 d1 e1) e1))
  (Tuple2 (tuple2 a1 c1) (tuple2 (tuple2 d1 e1) e1)
  (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y))
  (Tuple2 (tuple2 d1 e1) e1 (t2tb3457 z) (t2tb2955 w)))
  (parallel_product e1 c1 (tuple2 d1 e1) a1 (t2tb4103 h) (t2tb3478 k)))
  (and (mem48 (tb2t4105 (Tuple2 a1 (tuple2 d1 e1) (t2tb2 x) (t2tb3457 z))) h)
  (mem46 (tb2t3479 (Tuple2 c1 e1 (t2tb135 y) (t2tb2955 w))) k)))))

(declare-fun t2tb4975 ((set (tuple21 (tuple21 a b) (tuple21 (tuple21 d e)
  d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) (tuple21 (tuple21 d e) d))))) (sort
  (set1 (tuple2 (tuple2 a1 b1) (tuple2 (tuple2 d1 e1) d1))) (t2tb4975 x))))

(declare-fun tb2t4975 (uni) (set (tuple21 (tuple21 a b) (tuple21 (tuple21 d
  e) d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a b) (tuple21 (tuple21 d e) d)))))
  (! (= (tb2t4975 (t2tb4975 i)) i) :pattern ((t2tb4975 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 b1) (tuple2 (tuple2 d1 e1) d1))) j)
     (= (t2tb4975 (tb2t4975 j)) j)) :pattern ((t2tb4975 (tb2t4975 j))) )))

(declare-fun t2tb4976 ((tuple21 (tuple21 a b) (tuple21 (tuple21 d e)
  d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a b) (tuple21 (tuple21 d e) d)))) (sort
  (tuple2 (tuple2 a1 b1) (tuple2 (tuple2 d1 e1) d1)) (t2tb4976 x))))

(declare-fun tb2t4976 (uni) (tuple21 (tuple21 a b) (tuple21 (tuple21 d e)
  d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a b) (tuple21 (tuple21 d e) d))))
  (! (= (tb2t4976 (t2tb4976 i)) i) :pattern ((t2tb4976 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 b1) (tuple2 (tuple2 d1 e1) d1)) j)
     (= (t2tb4976 (tb2t4976 j)) j)) :pattern ((t2tb4976 (tb2t4976 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a (tuple21 d e)))) (k (set (tuple21 b d))) (x a)
  (y b) (z (tuple21 d e)) (w d))
  (= (mem (tuple2 (tuple2 a1 b1) (tuple2 (tuple2 d1 e1) d1))
  (Tuple2 (tuple2 a1 b1) (tuple2 (tuple2 d1 e1) d1)
  (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y))
  (Tuple2 (tuple2 d1 e1) d1 (t2tb3457 z) (t2tb694 w)))
  (parallel_product d1 b1 (tuple2 d1 e1) a1 (t2tb4103 h) (t2tb687 k)))
  (and (mem48 (tb2t4105 (Tuple2 a1 (tuple2 d1 e1) (t2tb2 x) (t2tb3457 z))) h)
  (mem23 (tb2t692 (Tuple2 b1 d1 (t2tb14 y) (t2tb694 w))) k)))))

(declare-fun t2tb4977 ((set (tuple21 (tuple21 a a) (tuple21 (tuple21 d e)
  (tuple21 d e))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a a) (tuple21 (tuple21 d e) (tuple21 d
  e)))))) (sort
  (set1 (tuple2 (tuple2 a1 a1) (tuple2 (tuple2 d1 e1) (tuple2 d1 e1))))
  (t2tb4977 x))))

(declare-fun tb2t4977 (uni) (set (tuple21 (tuple21 a a) (tuple21 (tuple21 d
  e) (tuple21 d e)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a a) (tuple21 (tuple21 d e) (tuple21 d
  e)))))) (! (= (tb2t4977 (t2tb4977 i)) i) :pattern ((t2tb4977 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 a1 a1) (tuple2 (tuple2 d1 e1) (tuple2 d1 e1)))) j)
     (= (t2tb4977 (tb2t4977 j)) j)) :pattern ((t2tb4977 (tb2t4977 j))) )))

(declare-fun t2tb4978 ((tuple21 (tuple21 a a) (tuple21 (tuple21 d e)
  (tuple21 d e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a a) (tuple21 (tuple21 d e) (tuple21 d e)))))
  (sort (tuple2 (tuple2 a1 a1) (tuple2 (tuple2 d1 e1) (tuple2 d1 e1)))
  (t2tb4978 x))))

(declare-fun tb2t4978 (uni) (tuple21 (tuple21 a a) (tuple21 (tuple21 d e)
  (tuple21 d e))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a a) (tuple21 (tuple21 d e) (tuple21 d e)))))
  (! (= (tb2t4978 (t2tb4978 i)) i) :pattern ((t2tb4978 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 a1) (tuple2 (tuple2 d1 e1) (tuple2 d1 e1)))
     j) (= (t2tb4978 (tb2t4978 j)) j)) :pattern ((t2tb4978 (tb2t4978 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a (tuple21 d e)))) (k (set (tuple21 a (tuple21 d
  e)))) (x a) (y a) (z (tuple21 d e)) (w (tuple21 d e)))
  (= (mem (tuple2 (tuple2 a1 a1) (tuple2 (tuple2 d1 e1) (tuple2 d1 e1)))
  (Tuple2 (tuple2 a1 a1) (tuple2 (tuple2 d1 e1) (tuple2 d1 e1))
  (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y))
  (Tuple2 (tuple2 d1 e1) (tuple2 d1 e1) (t2tb3457 z) (t2tb3457 w)))
  (parallel_product (tuple2 d1 e1) a1 (tuple2 d1 e1) a1 (t2tb4103 h)
  (t2tb4103 k)))
  (and (mem48 (tb2t4105 (Tuple2 a1 (tuple2 d1 e1) (t2tb2 x) (t2tb3457 z))) h)
  (mem48 (tb2t4105 (Tuple2 a1 (tuple2 d1 e1) (t2tb2 y) (t2tb3457 w))) k)))))

(declare-fun t2tb4979 ((set (tuple21 (tuple21 a a) (tuple21 (tuple21 d e)
  e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a a) (tuple21 (tuple21 d e) e))))) (sort
  (set1 (tuple2 (tuple2 a1 a1) (tuple2 (tuple2 d1 e1) e1))) (t2tb4979 x))))

(declare-fun tb2t4979 (uni) (set (tuple21 (tuple21 a a) (tuple21 (tuple21 d
  e) e))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a a) (tuple21 (tuple21 d e) e)))))
  (! (= (tb2t4979 (t2tb4979 i)) i) :pattern ((t2tb4979 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 a1) (tuple2 (tuple2 d1 e1) e1))) j)
     (= (t2tb4979 (tb2t4979 j)) j)) :pattern ((t2tb4979 (tb2t4979 j))) )))

(declare-fun t2tb4980 ((tuple21 (tuple21 a a) (tuple21 (tuple21 d e)
  e))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a a) (tuple21 (tuple21 d e) e)))) (sort
  (tuple2 (tuple2 a1 a1) (tuple2 (tuple2 d1 e1) e1)) (t2tb4980 x))))

(declare-fun tb2t4980 (uni) (tuple21 (tuple21 a a) (tuple21 (tuple21 d e)
  e)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a a) (tuple21 (tuple21 d e) e))))
  (! (= (tb2t4980 (t2tb4980 i)) i) :pattern ((t2tb4980 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 a1) (tuple2 (tuple2 d1 e1) e1)) j)
     (= (t2tb4980 (tb2t4980 j)) j)) :pattern ((t2tb4980 (tb2t4980 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a (tuple21 d e)))) (k (set (tuple21 a e))) (x a)
  (y a) (z (tuple21 d e)) (w e))
  (= (mem (tuple2 (tuple2 a1 a1) (tuple2 (tuple2 d1 e1) e1))
  (Tuple2 (tuple2 a1 a1) (tuple2 (tuple2 d1 e1) e1)
  (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y))
  (Tuple2 (tuple2 d1 e1) e1 (t2tb3457 z) (t2tb2955 w)))
  (parallel_product e1 a1 (tuple2 d1 e1) a1 (t2tb4103 h) (t2tb2943 k)))
  (and (mem48 (tb2t4105 (Tuple2 a1 (tuple2 d1 e1) (t2tb2 x) (t2tb3457 z))) h)
  (mem44 (tb2t2949 (Tuple2 a1 e1 (t2tb2 y) (t2tb2955 w))) k)))))

(declare-fun t2tb4981 ((set (tuple21 (tuple21 a a) (tuple21 (tuple21 d e)
  d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a a) (tuple21 (tuple21 d e) d))))) (sort
  (set1 (tuple2 (tuple2 a1 a1) (tuple2 (tuple2 d1 e1) d1))) (t2tb4981 x))))

(declare-fun tb2t4981 (uni) (set (tuple21 (tuple21 a a) (tuple21 (tuple21 d
  e) d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a a) (tuple21 (tuple21 d e) d)))))
  (! (= (tb2t4981 (t2tb4981 i)) i) :pattern ((t2tb4981 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 a1) (tuple2 (tuple2 d1 e1) d1))) j)
     (= (t2tb4981 (tb2t4981 j)) j)) :pattern ((t2tb4981 (tb2t4981 j))) )))

(declare-fun t2tb4982 ((tuple21 (tuple21 a a) (tuple21 (tuple21 d e)
  d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a a) (tuple21 (tuple21 d e) d)))) (sort
  (tuple2 (tuple2 a1 a1) (tuple2 (tuple2 d1 e1) d1)) (t2tb4982 x))))

(declare-fun tb2t4982 (uni) (tuple21 (tuple21 a a) (tuple21 (tuple21 d e)
  d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a a) (tuple21 (tuple21 d e) d))))
  (! (= (tb2t4982 (t2tb4982 i)) i) :pattern ((t2tb4982 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 a1) (tuple2 (tuple2 d1 e1) d1)) j)
     (= (t2tb4982 (tb2t4982 j)) j)) :pattern ((t2tb4982 (tb2t4982 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a (tuple21 d e)))) (k (set (tuple21 a d))) (x a)
  (y a) (z (tuple21 d e)) (w d))
  (= (mem (tuple2 (tuple2 a1 a1) (tuple2 (tuple2 d1 e1) d1))
  (Tuple2 (tuple2 a1 a1) (tuple2 (tuple2 d1 e1) d1)
  (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y))
  (Tuple2 (tuple2 d1 e1) d1 (t2tb3457 z) (t2tb694 w)))
  (parallel_product d1 a1 (tuple2 d1 e1) a1 (t2tb4103 h) (t2tb903 k)))
  (and (mem48 (tb2t4105 (Tuple2 a1 (tuple2 d1 e1) (t2tb2 x) (t2tb3457 z))) h)
  (mem32 (tb2t904 (Tuple2 a1 d1 (t2tb2 y) (t2tb694 w))) k)))))

(declare-fun t2tb4983 ((set (tuple21 (tuple21 a a) (tuple21 (tuple21 d e)
  (tuple21 b c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a a) (tuple21 (tuple21 d e) (tuple21 b
  c)))))) (sort
  (set1 (tuple2 (tuple2 a1 a1) (tuple2 (tuple2 d1 e1) (tuple2 b1 c1))))
  (t2tb4983 x))))

(declare-fun tb2t4983 (uni) (set (tuple21 (tuple21 a a) (tuple21 (tuple21 d
  e) (tuple21 b c)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a a) (tuple21 (tuple21 d e) (tuple21 b
  c)))))) (! (= (tb2t4983 (t2tb4983 i)) i) :pattern ((t2tb4983 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 a1 a1) (tuple2 (tuple2 d1 e1) (tuple2 b1 c1)))) j)
     (= (t2tb4983 (tb2t4983 j)) j)) :pattern ((t2tb4983 (tb2t4983 j))) )))

(declare-fun t2tb4984 ((tuple21 (tuple21 a a) (tuple21 (tuple21 d e)
  (tuple21 b c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a a) (tuple21 (tuple21 d e) (tuple21 b c)))))
  (sort (tuple2 (tuple2 a1 a1) (tuple2 (tuple2 d1 e1) (tuple2 b1 c1)))
  (t2tb4984 x))))

(declare-fun tb2t4984 (uni) (tuple21 (tuple21 a a) (tuple21 (tuple21 d e)
  (tuple21 b c))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a a) (tuple21 (tuple21 d e) (tuple21 b c)))))
  (! (= (tb2t4984 (t2tb4984 i)) i) :pattern ((t2tb4984 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 a1) (tuple2 (tuple2 d1 e1) (tuple2 b1 c1)))
     j) (= (t2tb4984 (tb2t4984 j)) j)) :pattern ((t2tb4984 (tb2t4984 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a (tuple21 d e)))) (k (set (tuple21 a (tuple21 b
  c)))) (x a) (y a) (z (tuple21 d e)) (w (tuple21 b c)))
  (= (mem (tuple2 (tuple2 a1 a1) (tuple2 (tuple2 d1 e1) (tuple2 b1 c1)))
  (Tuple2 (tuple2 a1 a1) (tuple2 (tuple2 d1 e1) (tuple2 b1 c1))
  (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y))
  (Tuple2 (tuple2 d1 e1) (tuple2 b1 c1) (t2tb3457 z) (t2tb134 w)))
  (parallel_product (tuple2 b1 c1) a1 (tuple2 d1 e1) a1 (t2tb4103 h)
  (t2tb261 k)))
  (and (mem48 (tb2t4105 (Tuple2 a1 (tuple2 d1 e1) (t2tb2 x) (t2tb3457 z))) h)
  (mem14 (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 y) (t2tb134 w))) k)))))

(declare-fun t2tb4985 ((set (tuple21 (tuple21 a a) (tuple21 (tuple21 d e)
  c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a a) (tuple21 (tuple21 d e) c))))) (sort
  (set1 (tuple2 (tuple2 a1 a1) (tuple2 (tuple2 d1 e1) c1))) (t2tb4985 x))))

(declare-fun tb2t4985 (uni) (set (tuple21 (tuple21 a a) (tuple21 (tuple21 d
  e) c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a a) (tuple21 (tuple21 d e) c)))))
  (! (= (tb2t4985 (t2tb4985 i)) i) :pattern ((t2tb4985 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 a1) (tuple2 (tuple2 d1 e1) c1))) j)
     (= (t2tb4985 (tb2t4985 j)) j)) :pattern ((t2tb4985 (tb2t4985 j))) )))

(declare-fun t2tb4986 ((tuple21 (tuple21 a a) (tuple21 (tuple21 d e)
  c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a a) (tuple21 (tuple21 d e) c)))) (sort
  (tuple2 (tuple2 a1 a1) (tuple2 (tuple2 d1 e1) c1)) (t2tb4986 x))))

(declare-fun tb2t4986 (uni) (tuple21 (tuple21 a a) (tuple21 (tuple21 d e)
  c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a a) (tuple21 (tuple21 d e) c))))
  (! (= (tb2t4986 (t2tb4986 i)) i) :pattern ((t2tb4986 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 a1) (tuple2 (tuple2 d1 e1) c1)) j)
     (= (t2tb4986 (tb2t4986 j)) j)) :pattern ((t2tb4986 (tb2t4986 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a (tuple21 d e)))) (k (set (tuple21 a c))) (x a)
  (y a) (z (tuple21 d e)) (w c))
  (= (mem (tuple2 (tuple2 a1 a1) (tuple2 (tuple2 d1 e1) c1))
  (Tuple2 (tuple2 a1 a1) (tuple2 (tuple2 d1 e1) c1)
  (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y))
  (Tuple2 (tuple2 d1 e1) c1 (t2tb3457 z) (t2tb135 w)))
  (parallel_product c1 a1 (tuple2 d1 e1) a1 (t2tb4103 h) (t2tb129 k)))
  (and (mem48 (tb2t4105 (Tuple2 a1 (tuple2 d1 e1) (t2tb2 x) (t2tb3457 z))) h)
  (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 y) (t2tb135 w))) k)))))

(declare-fun t2tb4987 ((set (tuple21 (tuple21 a a) (tuple21 (tuple21 d e)
  b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a a) (tuple21 (tuple21 d e) b))))) (sort
  (set1 (tuple2 (tuple2 a1 a1) (tuple2 (tuple2 d1 e1) b1))) (t2tb4987 x))))

(declare-fun tb2t4987 (uni) (set (tuple21 (tuple21 a a) (tuple21 (tuple21 d
  e) b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a a) (tuple21 (tuple21 d e) b)))))
  (! (= (tb2t4987 (t2tb4987 i)) i) :pattern ((t2tb4987 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 a1) (tuple2 (tuple2 d1 e1) b1))) j)
     (= (t2tb4987 (tb2t4987 j)) j)) :pattern ((t2tb4987 (tb2t4987 j))) )))

(declare-fun t2tb4988 ((tuple21 (tuple21 a a) (tuple21 (tuple21 d e)
  b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a a) (tuple21 (tuple21 d e) b)))) (sort
  (tuple2 (tuple2 a1 a1) (tuple2 (tuple2 d1 e1) b1)) (t2tb4988 x))))

(declare-fun tb2t4988 (uni) (tuple21 (tuple21 a a) (tuple21 (tuple21 d e)
  b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a a) (tuple21 (tuple21 d e) b))))
  (! (= (tb2t4988 (t2tb4988 i)) i) :pattern ((t2tb4988 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 a1) (tuple2 (tuple2 d1 e1) b1)) j)
     (= (t2tb4988 (tb2t4988 j)) j)) :pattern ((t2tb4988 (tb2t4988 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a (tuple21 d e)))) (k (set (tuple21 a b))) (x a)
  (y a) (z (tuple21 d e)) (w b))
  (= (mem (tuple2 (tuple2 a1 a1) (tuple2 (tuple2 d1 e1) b1))
  (Tuple2 (tuple2 a1 a1) (tuple2 (tuple2 d1 e1) b1)
  (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y))
  (Tuple2 (tuple2 d1 e1) b1 (t2tb3457 z) (t2tb14 w)))
  (parallel_product b1 a1 (tuple2 d1 e1) a1 (t2tb4103 h) (t2tb11 k)))
  (and (mem48 (tb2t4105 (Tuple2 a1 (tuple2 d1 e1) (t2tb2 x) (t2tb3457 z))) h)
  (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 y) (t2tb14 w))) k)))))

;; mem_parallel_product
  (assert
  (forall ((c2 ty) (d2 ty))
  (forall ((h (set (tuple21 a (tuple21 d e)))) (k uni) (x a) (y uni)
  (z (tuple21 d e)) (w uni))
  (= (mem (tuple2 (tuple2 a1 c2) (tuple2 (tuple2 d1 e1) d2))
  (Tuple2 (tuple2 a1 c2) (tuple2 (tuple2 d1 e1) d2)
  (Tuple2 a1 c2 (t2tb2 x) y) (Tuple2 (tuple2 d1 e1) d2 (t2tb3457 z) w))
  (parallel_product d2 c2 (tuple2 d1 e1) a1 (t2tb4103 h) k))
  (and (mem48 (tb2t4105 (Tuple2 a1 (tuple2 d1 e1) (t2tb2 x) (t2tb3457 z))) h)
  (mem (tuple2 c2 d2) (Tuple2 c2 d2 y w) k))))))

(declare-fun t2tb4989 ((set (tuple21 (tuple21 a (tuple21 b c)) (tuple21 e
  (tuple21 d e))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a (tuple21 b c)) (tuple21 e (tuple21 d
  e)))))) (sort
  (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 e1 (tuple2 d1 e1))))
  (t2tb4989 x))))

(declare-fun tb2t4989 (uni) (set (tuple21 (tuple21 a (tuple21 b c))
  (tuple21 e (tuple21 d e)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a (tuple21 b c)) (tuple21 e (tuple21 d
  e)))))) (! (= (tb2t4989 (t2tb4989 i)) i) :pattern ((t2tb4989 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 e1 (tuple2 d1 e1)))) j)
     (= (t2tb4989 (tb2t4989 j)) j)) :pattern ((t2tb4989 (tb2t4989 j))) )))

(declare-fun t2tb4990 ((tuple21 (tuple21 a (tuple21 b c)) (tuple21 e
  (tuple21 d e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a (tuple21 b c)) (tuple21 e (tuple21 d e)))))
  (sort (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 e1 (tuple2 d1 e1)))
  (t2tb4990 x))))

(declare-fun tb2t4990 (uni) (tuple21 (tuple21 a (tuple21 b c)) (tuple21 e
  (tuple21 d e))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a (tuple21 b c)) (tuple21 e (tuple21 d e)))))
  (! (= (tb2t4990 (t2tb4990 i)) i) :pattern ((t2tb4990 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 e1 (tuple2 d1 e1)))
     j) (= (t2tb4990 (tb2t4990 j)) j)) :pattern ((t2tb4990 (tb2t4990 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a e))) (k (set (tuple21 (tuple21 b c) (tuple21 d
  e)))) (x a) (y (tuple21 b c)) (z e) (w (tuple21 d e)))
  (= (mem (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 e1 (tuple2 d1 e1)))
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 e1 (tuple2 d1 e1))
  (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 y))
  (Tuple2 e1 (tuple2 d1 e1) (t2tb2955 z) (t2tb3457 w)))
  (parallel_product (tuple2 d1 e1) (tuple2 b1 c1) e1 a1 (t2tb2943 h)
  (t2tb4102 k)))
  (and (mem44 (tb2t2949 (Tuple2 a1 e1 (t2tb2 x) (t2tb2955 z))) h) (mem49
  (tb2t4104 (Tuple2 (tuple2 b1 c1) (tuple2 d1 e1) (t2tb134 y) (t2tb3457 w)))
  k)))))

(declare-fun t2tb4991 ((tuple21 (tuple21 a c) (tuple21 e e))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a c) (tuple21 e e)))) (sort
  (tuple2 (tuple2 a1 c1) (tuple2 e1 e1)) (t2tb4991 x))))

(declare-fun tb2t4991 (uni) (tuple21 (tuple21 a c) (tuple21 e e)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a c) (tuple21 e e))))
  (! (= (tb2t4991 (t2tb4991 i)) i) :pattern ((t2tb4991 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 c1) (tuple2 e1 e1)) j)
     (= (t2tb4991 (tb2t4991 j)) j)) :pattern ((t2tb4991 (tb2t4991 j))) )))

(declare-fun t2tb4992 ((set (tuple21 (tuple21 a c) (tuple21 e e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a c) (tuple21 e e))))) (sort
  (set1 (tuple2 (tuple2 a1 c1) (tuple2 e1 e1))) (t2tb4992 x))))

(declare-fun tb2t4992 (uni) (set (tuple21 (tuple21 a c) (tuple21 e e))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a c) (tuple21 e e)))))
  (! (= (tb2t4992 (t2tb4992 i)) i) :pattern ((t2tb4992 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 c1) (tuple2 e1 e1))) j)
     (= (t2tb4992 (tb2t4992 j)) j)) :pattern ((t2tb4992 (tb2t4992 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a e))) (k (set (tuple21 c e))) (x a) (y c) (z e)
  (w e))
  (= (mem (tuple2 (tuple2 a1 c1) (tuple2 e1 e1))
  (Tuple2 (tuple2 a1 c1) (tuple2 e1 e1) (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y))
  (Tuple2 e1 e1 (t2tb2955 z) (t2tb2955 w)))
  (parallel_product e1 c1 e1 a1 (t2tb2943 h) (t2tb3478 k)))
  (and (mem44 (tb2t2949 (Tuple2 a1 e1 (t2tb2 x) (t2tb2955 z))) h) (mem46
  (tb2t3479 (Tuple2 c1 e1 (t2tb135 y) (t2tb2955 w))) k)))))

(declare-fun t2tb4993 ((set (tuple21 (tuple21 a b) (tuple21 e d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) (tuple21 e d))))) (sort
  (set1 (tuple2 (tuple2 a1 b1) (tuple2 e1 d1))) (t2tb4993 x))))

(declare-fun tb2t4993 (uni) (set (tuple21 (tuple21 a b) (tuple21 e d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a b) (tuple21 e d)))))
  (! (= (tb2t4993 (t2tb4993 i)) i) :pattern ((t2tb4993 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 b1) (tuple2 e1 d1))) j)
     (= (t2tb4993 (tb2t4993 j)) j)) :pattern ((t2tb4993 (tb2t4993 j))) )))

(declare-fun t2tb4994 ((tuple21 (tuple21 a b) (tuple21 e d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a b) (tuple21 e d)))) (sort
  (tuple2 (tuple2 a1 b1) (tuple2 e1 d1)) (t2tb4994 x))))

(declare-fun tb2t4994 (uni) (tuple21 (tuple21 a b) (tuple21 e d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a b) (tuple21 e d))))
  (! (= (tb2t4994 (t2tb4994 i)) i) :pattern ((t2tb4994 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 b1) (tuple2 e1 d1)) j)
     (= (t2tb4994 (tb2t4994 j)) j)) :pattern ((t2tb4994 (tb2t4994 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a e))) (k (set (tuple21 b d))) (x a) (y b) (z e)
  (w d))
  (= (mem (tuple2 (tuple2 a1 b1) (tuple2 e1 d1))
  (Tuple2 (tuple2 a1 b1) (tuple2 e1 d1) (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y))
  (Tuple2 e1 d1 (t2tb2955 z) (t2tb694 w)))
  (parallel_product d1 b1 e1 a1 (t2tb2943 h) (t2tb687 k)))
  (and (mem44 (tb2t2949 (Tuple2 a1 e1 (t2tb2 x) (t2tb2955 z))) h) (mem23
  (tb2t692 (Tuple2 b1 d1 (t2tb14 y) (t2tb694 w))) k)))))

(declare-fun t2tb4995 ((set (tuple21 (tuple21 a a) (tuple21 e (tuple21 d
  e))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a a) (tuple21 e (tuple21 d e)))))) (sort
  (set1 (tuple2 (tuple2 a1 a1) (tuple2 e1 (tuple2 d1 e1)))) (t2tb4995 x))))

(declare-fun tb2t4995 (uni) (set (tuple21 (tuple21 a a) (tuple21 e (tuple21 d
  e)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a a) (tuple21 e (tuple21 d e))))))
  (! (= (tb2t4995 (t2tb4995 i)) i) :pattern ((t2tb4995 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 a1) (tuple2 e1 (tuple2 d1 e1)))) j)
     (= (t2tb4995 (tb2t4995 j)) j)) :pattern ((t2tb4995 (tb2t4995 j))) )))

(declare-fun t2tb4996 ((tuple21 (tuple21 a a) (tuple21 e (tuple21 d
  e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a a) (tuple21 e (tuple21 d e))))) (sort
  (tuple2 (tuple2 a1 a1) (tuple2 e1 (tuple2 d1 e1))) (t2tb4996 x))))

(declare-fun tb2t4996 (uni) (tuple21 (tuple21 a a) (tuple21 e (tuple21 d
  e))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a a) (tuple21 e (tuple21 d e)))))
  (! (= (tb2t4996 (t2tb4996 i)) i) :pattern ((t2tb4996 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 a1) (tuple2 e1 (tuple2 d1 e1))) j)
     (= (t2tb4996 (tb2t4996 j)) j)) :pattern ((t2tb4996 (tb2t4996 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a e))) (k (set (tuple21 a (tuple21 d e)))) (x a)
  (y a) (z e) (w (tuple21 d e)))
  (= (mem (tuple2 (tuple2 a1 a1) (tuple2 e1 (tuple2 d1 e1)))
  (Tuple2 (tuple2 a1 a1) (tuple2 e1 (tuple2 d1 e1))
  (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y))
  (Tuple2 e1 (tuple2 d1 e1) (t2tb2955 z) (t2tb3457 w)))
  (parallel_product (tuple2 d1 e1) a1 e1 a1 (t2tb2943 h) (t2tb4103 k)))
  (and (mem44 (tb2t2949 (Tuple2 a1 e1 (t2tb2 x) (t2tb2955 z))) h) (mem48
  (tb2t4105 (Tuple2 a1 (tuple2 d1 e1) (t2tb2 y) (t2tb3457 w))) k)))))

(declare-fun t2tb4085 ((set (tuple21 (tuple21 a a) (tuple21 e e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a a) (tuple21 e e))))) (sort
  (set1 (tuple2 (tuple2 a1 a1) (tuple2 e1 e1))) (t2tb4085 x))))

(declare-fun tb2t4085 (uni) (set (tuple21 (tuple21 a a) (tuple21 e e))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a a) (tuple21 e e)))))
  (! (= (tb2t4085 (t2tb4085 i)) i) :pattern ((t2tb4085 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 a1) (tuple2 e1 e1))) j)
     (= (t2tb4085 (tb2t4085 j)) j)) :pattern ((t2tb4085 (tb2t4085 j))) )))

(declare-fun t2tb4086 ((tuple21 (tuple21 a a) (tuple21 e e))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a a) (tuple21 e e)))) (sort
  (tuple2 (tuple2 a1 a1) (tuple2 e1 e1)) (t2tb4086 x))))

(declare-fun tb2t4086 (uni) (tuple21 (tuple21 a a) (tuple21 e e)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a a) (tuple21 e e))))
  (! (= (tb2t4086 (t2tb4086 i)) i) :pattern ((t2tb4086 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 a1) (tuple2 e1 e1)) j)
     (= (t2tb4086 (tb2t4086 j)) j)) :pattern ((t2tb4086 (tb2t4086 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a e))) (k (set (tuple21 a e))) (x a) (y a) (z e)
  (w e))
  (= (mem (tuple2 (tuple2 a1 a1) (tuple2 e1 e1))
  (Tuple2 (tuple2 a1 a1) (tuple2 e1 e1) (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y))
  (Tuple2 e1 e1 (t2tb2955 z) (t2tb2955 w)))
  (parallel_product e1 a1 e1 a1 (t2tb2943 h) (t2tb2943 k)))
  (and (mem44 (tb2t2949 (Tuple2 a1 e1 (t2tb2 x) (t2tb2955 z))) h) (mem44
  (tb2t2949 (Tuple2 a1 e1 (t2tb2 y) (t2tb2955 w))) k)))))

(declare-fun t2tb4997 ((set (tuple21 (tuple21 a a) (tuple21 e d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a a) (tuple21 e d))))) (sort
  (set1 (tuple2 (tuple2 a1 a1) (tuple2 e1 d1))) (t2tb4997 x))))

(declare-fun tb2t4997 (uni) (set (tuple21 (tuple21 a a) (tuple21 e d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a a) (tuple21 e d)))))
  (! (= (tb2t4997 (t2tb4997 i)) i) :pattern ((t2tb4997 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 a1) (tuple2 e1 d1))) j)
     (= (t2tb4997 (tb2t4997 j)) j)) :pattern ((t2tb4997 (tb2t4997 j))) )))

(declare-fun t2tb4998 ((tuple21 (tuple21 a a) (tuple21 e d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a a) (tuple21 e d)))) (sort
  (tuple2 (tuple2 a1 a1) (tuple2 e1 d1)) (t2tb4998 x))))

(declare-fun tb2t4998 (uni) (tuple21 (tuple21 a a) (tuple21 e d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a a) (tuple21 e d))))
  (! (= (tb2t4998 (t2tb4998 i)) i) :pattern ((t2tb4998 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 a1) (tuple2 e1 d1)) j)
     (= (t2tb4998 (tb2t4998 j)) j)) :pattern ((t2tb4998 (tb2t4998 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a e))) (k (set (tuple21 a d))) (x a) (y a) (z e)
  (w d))
  (= (mem (tuple2 (tuple2 a1 a1) (tuple2 e1 d1))
  (Tuple2 (tuple2 a1 a1) (tuple2 e1 d1) (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y))
  (Tuple2 e1 d1 (t2tb2955 z) (t2tb694 w)))
  (parallel_product d1 a1 e1 a1 (t2tb2943 h) (t2tb903 k)))
  (and (mem44 (tb2t2949 (Tuple2 a1 e1 (t2tb2 x) (t2tb2955 z))) h) (mem32
  (tb2t904 (Tuple2 a1 d1 (t2tb2 y) (t2tb694 w))) k)))))

(declare-fun t2tb4999 ((set (tuple21 (tuple21 a a) (tuple21 e (tuple21 b
  c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a a) (tuple21 e (tuple21 b c)))))) (sort
  (set1 (tuple2 (tuple2 a1 a1) (tuple2 e1 (tuple2 b1 c1)))) (t2tb4999 x))))

(declare-fun tb2t4999 (uni) (set (tuple21 (tuple21 a a) (tuple21 e (tuple21 b
  c)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a a) (tuple21 e (tuple21 b c))))))
  (! (= (tb2t4999 (t2tb4999 i)) i) :pattern ((t2tb4999 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 a1) (tuple2 e1 (tuple2 b1 c1)))) j)
     (= (t2tb4999 (tb2t4999 j)) j)) :pattern ((t2tb4999 (tb2t4999 j))) )))

(declare-fun t2tb5000 ((tuple21 (tuple21 a a) (tuple21 e (tuple21 b
  c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a a) (tuple21 e (tuple21 b c))))) (sort
  (tuple2 (tuple2 a1 a1) (tuple2 e1 (tuple2 b1 c1))) (t2tb5000 x))))

(declare-fun tb2t5000 (uni) (tuple21 (tuple21 a a) (tuple21 e (tuple21 b
  c))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a a) (tuple21 e (tuple21 b c)))))
  (! (= (tb2t5000 (t2tb5000 i)) i) :pattern ((t2tb5000 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 a1) (tuple2 e1 (tuple2 b1 c1))) j)
     (= (t2tb5000 (tb2t5000 j)) j)) :pattern ((t2tb5000 (tb2t5000 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a e))) (k (set (tuple21 a (tuple21 b c)))) (x a)
  (y a) (z e) (w (tuple21 b c)))
  (= (mem (tuple2 (tuple2 a1 a1) (tuple2 e1 (tuple2 b1 c1)))
  (Tuple2 (tuple2 a1 a1) (tuple2 e1 (tuple2 b1 c1))
  (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y))
  (Tuple2 e1 (tuple2 b1 c1) (t2tb2955 z) (t2tb134 w)))
  (parallel_product (tuple2 b1 c1) a1 e1 a1 (t2tb2943 h) (t2tb261 k)))
  (and (mem44 (tb2t2949 (Tuple2 a1 e1 (t2tb2 x) (t2tb2955 z))) h) (mem14
  (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 y) (t2tb134 w))) k)))))

(declare-fun t2tb5001 ((set (tuple21 (tuple21 a a) (tuple21 e c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a a) (tuple21 e c))))) (sort
  (set1 (tuple2 (tuple2 a1 a1) (tuple2 e1 c1))) (t2tb5001 x))))

(declare-fun tb2t5001 (uni) (set (tuple21 (tuple21 a a) (tuple21 e c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a a) (tuple21 e c)))))
  (! (= (tb2t5001 (t2tb5001 i)) i) :pattern ((t2tb5001 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 a1) (tuple2 e1 c1))) j)
     (= (t2tb5001 (tb2t5001 j)) j)) :pattern ((t2tb5001 (tb2t5001 j))) )))

(declare-fun t2tb5002 ((tuple21 (tuple21 a a) (tuple21 e c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a a) (tuple21 e c)))) (sort
  (tuple2 (tuple2 a1 a1) (tuple2 e1 c1)) (t2tb5002 x))))

(declare-fun tb2t5002 (uni) (tuple21 (tuple21 a a) (tuple21 e c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a a) (tuple21 e c))))
  (! (= (tb2t5002 (t2tb5002 i)) i) :pattern ((t2tb5002 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 a1) (tuple2 e1 c1)) j)
     (= (t2tb5002 (tb2t5002 j)) j)) :pattern ((t2tb5002 (tb2t5002 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a e))) (k (set (tuple21 a c))) (x a) (y a) (z e)
  (w c))
  (= (mem (tuple2 (tuple2 a1 a1) (tuple2 e1 c1))
  (Tuple2 (tuple2 a1 a1) (tuple2 e1 c1) (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y))
  (Tuple2 e1 c1 (t2tb2955 z) (t2tb135 w)))
  (parallel_product c1 a1 e1 a1 (t2tb2943 h) (t2tb129 k)))
  (and (mem44 (tb2t2949 (Tuple2 a1 e1 (t2tb2 x) (t2tb2955 z))) h) (mem10
  (tb2t133 (Tuple2 a1 c1 (t2tb2 y) (t2tb135 w))) k)))))

(declare-fun t2tb4087 ((set (tuple21 (tuple21 a a) (tuple21 e b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a a) (tuple21 e b))))) (sort
  (set1 (tuple2 (tuple2 a1 a1) (tuple2 e1 b1))) (t2tb4087 x))))

(declare-fun tb2t4087 (uni) (set (tuple21 (tuple21 a a) (tuple21 e b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a a) (tuple21 e b)))))
  (! (= (tb2t4087 (t2tb4087 i)) i) :pattern ((t2tb4087 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 a1) (tuple2 e1 b1))) j)
     (= (t2tb4087 (tb2t4087 j)) j)) :pattern ((t2tb4087 (tb2t4087 j))) )))

(declare-fun t2tb4088 ((tuple21 (tuple21 a a) (tuple21 e b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a a) (tuple21 e b)))) (sort
  (tuple2 (tuple2 a1 a1) (tuple2 e1 b1)) (t2tb4088 x))))

(declare-fun tb2t4088 (uni) (tuple21 (tuple21 a a) (tuple21 e b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a a) (tuple21 e b))))
  (! (= (tb2t4088 (t2tb4088 i)) i) :pattern ((t2tb4088 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 a1) (tuple2 e1 b1)) j)
     (= (t2tb4088 (tb2t4088 j)) j)) :pattern ((t2tb4088 (tb2t4088 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a e))) (k (set (tuple21 a b))) (x a) (y a) (z e)
  (w b))
  (= (mem (tuple2 (tuple2 a1 a1) (tuple2 e1 b1))
  (Tuple2 (tuple2 a1 a1) (tuple2 e1 b1) (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y))
  (Tuple2 e1 b1 (t2tb2955 z) (t2tb14 w)))
  (parallel_product b1 a1 e1 a1 (t2tb2943 h) (t2tb11 k)))
  (and (mem44 (tb2t2949 (Tuple2 a1 e1 (t2tb2 x) (t2tb2955 z))) h) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 y) (t2tb14 w))) k)))))

;; mem_parallel_product
  (assert
  (forall ((c2 ty) (d2 ty))
  (forall ((h (set (tuple21 a e))) (k uni) (x a) (y uni) (z e) (w uni))
  (= (mem (tuple2 (tuple2 a1 c2) (tuple2 e1 d2))
  (Tuple2 (tuple2 a1 c2) (tuple2 e1 d2) (Tuple2 a1 c2 (t2tb2 x) y)
  (Tuple2 e1 d2 (t2tb2955 z) w))
  (parallel_product d2 c2 e1 a1 (t2tb2943 h) k))
  (and (mem44 (tb2t2949 (Tuple2 a1 e1 (t2tb2 x) (t2tb2955 z))) h) (mem
  (tuple2 c2 d2) (Tuple2 c2 d2 y w) k))))))

(declare-fun t2tb5003 ((set (tuple21 (tuple21 a (tuple21 b c)) (tuple21 d
  (tuple21 d e))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a (tuple21 b c)) (tuple21 d (tuple21 d
  e)))))) (sort
  (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 d1 (tuple2 d1 e1))))
  (t2tb5003 x))))

(declare-fun tb2t5003 (uni) (set (tuple21 (tuple21 a (tuple21 b c))
  (tuple21 d (tuple21 d e)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a (tuple21 b c)) (tuple21 d (tuple21 d
  e)))))) (! (= (tb2t5003 (t2tb5003 i)) i) :pattern ((t2tb5003 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 d1 (tuple2 d1 e1)))) j)
     (= (t2tb5003 (tb2t5003 j)) j)) :pattern ((t2tb5003 (tb2t5003 j))) )))

(declare-fun t2tb5004 ((tuple21 (tuple21 a (tuple21 b c)) (tuple21 d
  (tuple21 d e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a (tuple21 b c)) (tuple21 d (tuple21 d e)))))
  (sort (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 d1 (tuple2 d1 e1)))
  (t2tb5004 x))))

(declare-fun tb2t5004 (uni) (tuple21 (tuple21 a (tuple21 b c)) (tuple21 d
  (tuple21 d e))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a (tuple21 b c)) (tuple21 d (tuple21 d e)))))
  (! (= (tb2t5004 (t2tb5004 i)) i) :pattern ((t2tb5004 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 d1 (tuple2 d1 e1)))
     j) (= (t2tb5004 (tb2t5004 j)) j)) :pattern ((t2tb5004 (tb2t5004 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a d))) (k (set (tuple21 (tuple21 b c) (tuple21 d
  e)))) (x a) (y (tuple21 b c)) (z d) (w (tuple21 d e)))
  (= (mem (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 d1 (tuple2 d1 e1)))
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 d1 (tuple2 d1 e1))
  (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 y))
  (Tuple2 d1 (tuple2 d1 e1) (t2tb694 z) (t2tb3457 w)))
  (parallel_product (tuple2 d1 e1) (tuple2 b1 c1) d1 a1 (t2tb903 h)
  (t2tb4102 k)))
  (and (mem32 (tb2t904 (Tuple2 a1 d1 (t2tb2 x) (t2tb694 z))) h) (mem49
  (tb2t4104 (Tuple2 (tuple2 b1 c1) (tuple2 d1 e1) (t2tb134 y) (t2tb3457 w)))
  k)))))

(declare-fun t2tb5005 ((set (tuple21 (tuple21 a c) (tuple21 d e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a c) (tuple21 d e))))) (sort
  (set1 (tuple2 (tuple2 a1 c1) (tuple2 d1 e1))) (t2tb5005 x))))

(declare-fun tb2t5005 (uni) (set (tuple21 (tuple21 a c) (tuple21 d e))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a c) (tuple21 d e)))))
  (! (= (tb2t5005 (t2tb5005 i)) i) :pattern ((t2tb5005 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 c1) (tuple2 d1 e1))) j)
     (= (t2tb5005 (tb2t5005 j)) j)) :pattern ((t2tb5005 (tb2t5005 j))) )))

(declare-fun t2tb5006 ((tuple21 (tuple21 a c) (tuple21 d e))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a c) (tuple21 d e)))) (sort
  (tuple2 (tuple2 a1 c1) (tuple2 d1 e1)) (t2tb5006 x))))

(declare-fun tb2t5006 (uni) (tuple21 (tuple21 a c) (tuple21 d e)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a c) (tuple21 d e))))
  (! (= (tb2t5006 (t2tb5006 i)) i) :pattern ((t2tb5006 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 c1) (tuple2 d1 e1)) j)
     (= (t2tb5006 (tb2t5006 j)) j)) :pattern ((t2tb5006 (tb2t5006 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a d))) (k (set (tuple21 c e))) (x a) (y c) (z d)
  (w e))
  (= (mem (tuple2 (tuple2 a1 c1) (tuple2 d1 e1))
  (Tuple2 (tuple2 a1 c1) (tuple2 d1 e1) (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y))
  (Tuple2 d1 e1 (t2tb694 z) (t2tb2955 w)))
  (parallel_product e1 c1 d1 a1 (t2tb903 h) (t2tb3478 k)))
  (and (mem32 (tb2t904 (Tuple2 a1 d1 (t2tb2 x) (t2tb694 z))) h) (mem46
  (tb2t3479 (Tuple2 c1 e1 (t2tb135 y) (t2tb2955 w))) k)))))

(declare-fun t2tb5007 ((tuple21 (tuple21 a b) (tuple21 d d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a b) (tuple21 d d)))) (sort
  (tuple2 (tuple2 a1 b1) (tuple2 d1 d1)) (t2tb5007 x))))

(declare-fun tb2t5007 (uni) (tuple21 (tuple21 a b) (tuple21 d d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a b) (tuple21 d d))))
  (! (= (tb2t5007 (t2tb5007 i)) i) :pattern ((t2tb5007 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 b1) (tuple2 d1 d1)) j)
     (= (t2tb5007 (tb2t5007 j)) j)) :pattern ((t2tb5007 (tb2t5007 j))) )))

(declare-fun t2tb5008 ((set (tuple21 (tuple21 a b) (tuple21 d d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) (tuple21 d d))))) (sort
  (set1 (tuple2 (tuple2 a1 b1) (tuple2 d1 d1))) (t2tb5008 x))))

(declare-fun tb2t5008 (uni) (set (tuple21 (tuple21 a b) (tuple21 d d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a b) (tuple21 d d)))))
  (! (= (tb2t5008 (t2tb5008 i)) i) :pattern ((t2tb5008 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 b1) (tuple2 d1 d1))) j)
     (= (t2tb5008 (tb2t5008 j)) j)) :pattern ((t2tb5008 (tb2t5008 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a d))) (k (set (tuple21 b d))) (x a) (y b) (z d)
  (w d))
  (= (mem (tuple2 (tuple2 a1 b1) (tuple2 d1 d1))
  (Tuple2 (tuple2 a1 b1) (tuple2 d1 d1) (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y))
  (Tuple2 d1 d1 (t2tb694 z) (t2tb694 w)))
  (parallel_product d1 b1 d1 a1 (t2tb903 h) (t2tb687 k)))
  (and (mem32 (tb2t904 (Tuple2 a1 d1 (t2tb2 x) (t2tb694 z))) h) (mem23
  (tb2t692 (Tuple2 b1 d1 (t2tb14 y) (t2tb694 w))) k)))))

(declare-fun t2tb5009 ((set (tuple21 (tuple21 a a) (tuple21 d (tuple21 d
  e))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a a) (tuple21 d (tuple21 d e)))))) (sort
  (set1 (tuple2 (tuple2 a1 a1) (tuple2 d1 (tuple2 d1 e1)))) (t2tb5009 x))))

(declare-fun tb2t5009 (uni) (set (tuple21 (tuple21 a a) (tuple21 d (tuple21 d
  e)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a a) (tuple21 d (tuple21 d e))))))
  (! (= (tb2t5009 (t2tb5009 i)) i) :pattern ((t2tb5009 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 a1) (tuple2 d1 (tuple2 d1 e1)))) j)
     (= (t2tb5009 (tb2t5009 j)) j)) :pattern ((t2tb5009 (tb2t5009 j))) )))

(declare-fun t2tb5010 ((tuple21 (tuple21 a a) (tuple21 d (tuple21 d
  e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a a) (tuple21 d (tuple21 d e))))) (sort
  (tuple2 (tuple2 a1 a1) (tuple2 d1 (tuple2 d1 e1))) (t2tb5010 x))))

(declare-fun tb2t5010 (uni) (tuple21 (tuple21 a a) (tuple21 d (tuple21 d
  e))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a a) (tuple21 d (tuple21 d e)))))
  (! (= (tb2t5010 (t2tb5010 i)) i) :pattern ((t2tb5010 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 a1) (tuple2 d1 (tuple2 d1 e1))) j)
     (= (t2tb5010 (tb2t5010 j)) j)) :pattern ((t2tb5010 (tb2t5010 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a d))) (k (set (tuple21 a (tuple21 d e)))) (x a)
  (y a) (z d) (w (tuple21 d e)))
  (= (mem (tuple2 (tuple2 a1 a1) (tuple2 d1 (tuple2 d1 e1)))
  (Tuple2 (tuple2 a1 a1) (tuple2 d1 (tuple2 d1 e1))
  (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y))
  (Tuple2 d1 (tuple2 d1 e1) (t2tb694 z) (t2tb3457 w)))
  (parallel_product (tuple2 d1 e1) a1 d1 a1 (t2tb903 h) (t2tb4103 k)))
  (and (mem32 (tb2t904 (Tuple2 a1 d1 (t2tb2 x) (t2tb694 z))) h) (mem48
  (tb2t4105 (Tuple2 a1 (tuple2 d1 e1) (t2tb2 y) (t2tb3457 w))) k)))))

(declare-fun t2tb5011 ((set (tuple21 (tuple21 a a) (tuple21 d e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a a) (tuple21 d e))))) (sort
  (set1 (tuple2 (tuple2 a1 a1) (tuple2 d1 e1))) (t2tb5011 x))))

(declare-fun tb2t5011 (uni) (set (tuple21 (tuple21 a a) (tuple21 d e))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a a) (tuple21 d e)))))
  (! (= (tb2t5011 (t2tb5011 i)) i) :pattern ((t2tb5011 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 a1) (tuple2 d1 e1))) j)
     (= (t2tb5011 (tb2t5011 j)) j)) :pattern ((t2tb5011 (tb2t5011 j))) )))

(declare-fun t2tb5012 ((tuple21 (tuple21 a a) (tuple21 d e))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a a) (tuple21 d e)))) (sort
  (tuple2 (tuple2 a1 a1) (tuple2 d1 e1)) (t2tb5012 x))))

(declare-fun tb2t5012 (uni) (tuple21 (tuple21 a a) (tuple21 d e)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a a) (tuple21 d e))))
  (! (= (tb2t5012 (t2tb5012 i)) i) :pattern ((t2tb5012 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 a1) (tuple2 d1 e1)) j)
     (= (t2tb5012 (tb2t5012 j)) j)) :pattern ((t2tb5012 (tb2t5012 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a d))) (k (set (tuple21 a e))) (x a) (y a) (z d)
  (w e))
  (= (mem (tuple2 (tuple2 a1 a1) (tuple2 d1 e1))
  (Tuple2 (tuple2 a1 a1) (tuple2 d1 e1) (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y))
  (Tuple2 d1 e1 (t2tb694 z) (t2tb2955 w)))
  (parallel_product e1 a1 d1 a1 (t2tb903 h) (t2tb2943 k)))
  (and (mem32 (tb2t904 (Tuple2 a1 d1 (t2tb2 x) (t2tb694 z))) h) (mem44
  (tb2t2949 (Tuple2 a1 e1 (t2tb2 y) (t2tb2955 w))) k)))))

(declare-fun t2tb5013 ((set (tuple21 (tuple21 a a) (tuple21 d d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a a) (tuple21 d d))))) (sort
  (set1 (tuple2 (tuple2 a1 a1) (tuple2 d1 d1))) (t2tb5013 x))))

(declare-fun tb2t5013 (uni) (set (tuple21 (tuple21 a a) (tuple21 d d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a a) (tuple21 d d)))))
  (! (= (tb2t5013 (t2tb5013 i)) i) :pattern ((t2tb5013 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 a1) (tuple2 d1 d1))) j)
     (= (t2tb5013 (tb2t5013 j)) j)) :pattern ((t2tb5013 (tb2t5013 j))) )))

(declare-fun t2tb5014 ((tuple21 (tuple21 a a) (tuple21 d d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a a) (tuple21 d d)))) (sort
  (tuple2 (tuple2 a1 a1) (tuple2 d1 d1)) (t2tb5014 x))))

(declare-fun tb2t5014 (uni) (tuple21 (tuple21 a a) (tuple21 d d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a a) (tuple21 d d))))
  (! (= (tb2t5014 (t2tb5014 i)) i) :pattern ((t2tb5014 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 a1) (tuple2 d1 d1)) j)
     (= (t2tb5014 (tb2t5014 j)) j)) :pattern ((t2tb5014 (tb2t5014 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a d))) (k (set (tuple21 a d))) (x a) (y a) (z d)
  (w d))
  (= (mem (tuple2 (tuple2 a1 a1) (tuple2 d1 d1))
  (Tuple2 (tuple2 a1 a1) (tuple2 d1 d1) (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y))
  (Tuple2 d1 d1 (t2tb694 z) (t2tb694 w)))
  (parallel_product d1 a1 d1 a1 (t2tb903 h) (t2tb903 k)))
  (and (mem32 (tb2t904 (Tuple2 a1 d1 (t2tb2 x) (t2tb694 z))) h) (mem32
  (tb2t904 (Tuple2 a1 d1 (t2tb2 y) (t2tb694 w))) k)))))

(declare-fun t2tb5015 ((set (tuple21 (tuple21 a a) (tuple21 d (tuple21 b
  c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a a) (tuple21 d (tuple21 b c)))))) (sort
  (set1 (tuple2 (tuple2 a1 a1) (tuple2 d1 (tuple2 b1 c1)))) (t2tb5015 x))))

(declare-fun tb2t5015 (uni) (set (tuple21 (tuple21 a a) (tuple21 d (tuple21 b
  c)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a a) (tuple21 d (tuple21 b c))))))
  (! (= (tb2t5015 (t2tb5015 i)) i) :pattern ((t2tb5015 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 a1) (tuple2 d1 (tuple2 b1 c1)))) j)
     (= (t2tb5015 (tb2t5015 j)) j)) :pattern ((t2tb5015 (tb2t5015 j))) )))

(declare-fun t2tb5016 ((tuple21 (tuple21 a a) (tuple21 d (tuple21 b
  c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a a) (tuple21 d (tuple21 b c))))) (sort
  (tuple2 (tuple2 a1 a1) (tuple2 d1 (tuple2 b1 c1))) (t2tb5016 x))))

(declare-fun tb2t5016 (uni) (tuple21 (tuple21 a a) (tuple21 d (tuple21 b
  c))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a a) (tuple21 d (tuple21 b c)))))
  (! (= (tb2t5016 (t2tb5016 i)) i) :pattern ((t2tb5016 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 a1) (tuple2 d1 (tuple2 b1 c1))) j)
     (= (t2tb5016 (tb2t5016 j)) j)) :pattern ((t2tb5016 (tb2t5016 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a d))) (k (set (tuple21 a (tuple21 b c)))) (x a)
  (y a) (z d) (w (tuple21 b c)))
  (= (mem (tuple2 (tuple2 a1 a1) (tuple2 d1 (tuple2 b1 c1)))
  (Tuple2 (tuple2 a1 a1) (tuple2 d1 (tuple2 b1 c1))
  (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y))
  (Tuple2 d1 (tuple2 b1 c1) (t2tb694 z) (t2tb134 w)))
  (parallel_product (tuple2 b1 c1) a1 d1 a1 (t2tb903 h) (t2tb261 k)))
  (and (mem32 (tb2t904 (Tuple2 a1 d1 (t2tb2 x) (t2tb694 z))) h) (mem14
  (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 y) (t2tb134 w))) k)))))

(declare-fun t2tb5017 ((set (tuple21 (tuple21 a a) (tuple21 d c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a a) (tuple21 d c))))) (sort
  (set1 (tuple2 (tuple2 a1 a1) (tuple2 d1 c1))) (t2tb5017 x))))

(declare-fun tb2t5017 (uni) (set (tuple21 (tuple21 a a) (tuple21 d c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a a) (tuple21 d c)))))
  (! (= (tb2t5017 (t2tb5017 i)) i) :pattern ((t2tb5017 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 a1) (tuple2 d1 c1))) j)
     (= (t2tb5017 (tb2t5017 j)) j)) :pattern ((t2tb5017 (tb2t5017 j))) )))

(declare-fun t2tb5018 ((tuple21 (tuple21 a a) (tuple21 d c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a a) (tuple21 d c)))) (sort
  (tuple2 (tuple2 a1 a1) (tuple2 d1 c1)) (t2tb5018 x))))

(declare-fun tb2t5018 (uni) (tuple21 (tuple21 a a) (tuple21 d c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a a) (tuple21 d c))))
  (! (= (tb2t5018 (t2tb5018 i)) i) :pattern ((t2tb5018 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 a1) (tuple2 d1 c1)) j)
     (= (t2tb5018 (tb2t5018 j)) j)) :pattern ((t2tb5018 (tb2t5018 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a d))) (k (set (tuple21 a c))) (x a) (y a) (z d)
  (w c))
  (= (mem (tuple2 (tuple2 a1 a1) (tuple2 d1 c1))
  (Tuple2 (tuple2 a1 a1) (tuple2 d1 c1) (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y))
  (Tuple2 d1 c1 (t2tb694 z) (t2tb135 w)))
  (parallel_product c1 a1 d1 a1 (t2tb903 h) (t2tb129 k)))
  (and (mem32 (tb2t904 (Tuple2 a1 d1 (t2tb2 x) (t2tb694 z))) h) (mem10
  (tb2t133 (Tuple2 a1 c1 (t2tb2 y) (t2tb135 w))) k)))))

(declare-fun t2tb5019 ((set (tuple21 (tuple21 a a) (tuple21 d b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a a) (tuple21 d b))))) (sort
  (set1 (tuple2 (tuple2 a1 a1) (tuple2 d1 b1))) (t2tb5019 x))))

(declare-fun tb2t5019 (uni) (set (tuple21 (tuple21 a a) (tuple21 d b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a a) (tuple21 d b)))))
  (! (= (tb2t5019 (t2tb5019 i)) i) :pattern ((t2tb5019 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 a1) (tuple2 d1 b1))) j)
     (= (t2tb5019 (tb2t5019 j)) j)) :pattern ((t2tb5019 (tb2t5019 j))) )))

(declare-fun t2tb5020 ((tuple21 (tuple21 a a) (tuple21 d b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a a) (tuple21 d b)))) (sort
  (tuple2 (tuple2 a1 a1) (tuple2 d1 b1)) (t2tb5020 x))))

(declare-fun tb2t5020 (uni) (tuple21 (tuple21 a a) (tuple21 d b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a a) (tuple21 d b))))
  (! (= (tb2t5020 (t2tb5020 i)) i) :pattern ((t2tb5020 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 a1) (tuple2 d1 b1)) j)
     (= (t2tb5020 (tb2t5020 j)) j)) :pattern ((t2tb5020 (tb2t5020 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a d))) (k (set (tuple21 a b))) (x a) (y a) (z d)
  (w b))
  (= (mem (tuple2 (tuple2 a1 a1) (tuple2 d1 b1))
  (Tuple2 (tuple2 a1 a1) (tuple2 d1 b1) (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y))
  (Tuple2 d1 b1 (t2tb694 z) (t2tb14 w)))
  (parallel_product b1 a1 d1 a1 (t2tb903 h) (t2tb11 k)))
  (and (mem32 (tb2t904 (Tuple2 a1 d1 (t2tb2 x) (t2tb694 z))) h) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 y) (t2tb14 w))) k)))))

;; mem_parallel_product
  (assert
  (forall ((c2 ty) (d2 ty))
  (forall ((h (set (tuple21 a d))) (k uni) (x a) (y uni) (z d) (w uni))
  (= (mem (tuple2 (tuple2 a1 c2) (tuple2 d1 d2))
  (Tuple2 (tuple2 a1 c2) (tuple2 d1 d2) (Tuple2 a1 c2 (t2tb2 x) y)
  (Tuple2 d1 d2 (t2tb694 z) w)) (parallel_product d2 c2 d1 a1 (t2tb903 h) k))
  (and (mem32 (tb2t904 (Tuple2 a1 d1 (t2tb2 x) (t2tb694 z))) h) (mem
  (tuple2 c2 d2) (Tuple2 c2 d2 y w) k))))))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a (tuple21 b c)))) (k (set (tuple21 (tuple21 b c)
  (tuple21 d e)))) (x a) (y (tuple21 b c)) (z (tuple21 b c)) (w (tuple21 d
  e)))
  (= (mem
  (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)))
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1))
  (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 y))
  (Tuple2 (tuple2 b1 c1) (tuple2 d1 e1) (t2tb134 z) (t2tb3457 w)))
  (parallel_product (tuple2 d1 e1) (tuple2 b1 c1) (tuple2 b1 c1) a1
  (t2tb261 h) (t2tb4102 k)))
  (and (mem14 (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 z))) h)
  (mem49
  (tb2t4104 (Tuple2 (tuple2 b1 c1) (tuple2 d1 e1) (t2tb134 y) (t2tb3457 w)))
  k)))))

(declare-fun t2tb5021 ((tuple21 (tuple21 a c) (tuple21 (tuple21 b c)
  e))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a c) (tuple21 (tuple21 b c) e)))) (sort
  (tuple2 (tuple2 a1 c1) (tuple2 (tuple2 b1 c1) e1)) (t2tb5021 x))))

(declare-fun tb2t5021 (uni) (tuple21 (tuple21 a c) (tuple21 (tuple21 b c)
  e)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a c) (tuple21 (tuple21 b c) e))))
  (! (= (tb2t5021 (t2tb5021 i)) i) :pattern ((t2tb5021 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 c1) (tuple2 (tuple2 b1 c1) e1)) j)
     (= (t2tb5021 (tb2t5021 j)) j)) :pattern ((t2tb5021 (tb2t5021 j))) )))

(declare-fun t2tb5022 ((set (tuple21 (tuple21 a c) (tuple21 (tuple21 b c)
  e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a c) (tuple21 (tuple21 b c) e))))) (sort
  (set1 (tuple2 (tuple2 a1 c1) (tuple2 (tuple2 b1 c1) e1))) (t2tb5022 x))))

(declare-fun tb2t5022 (uni) (set (tuple21 (tuple21 a c) (tuple21 (tuple21 b
  c) e))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a c) (tuple21 (tuple21 b c) e)))))
  (! (= (tb2t5022 (t2tb5022 i)) i) :pattern ((t2tb5022 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 c1) (tuple2 (tuple2 b1 c1) e1))) j)
     (= (t2tb5022 (tb2t5022 j)) j)) :pattern ((t2tb5022 (tb2t5022 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a (tuple21 b c)))) (k (set (tuple21 c e))) (x a)
  (y c) (z (tuple21 b c)) (w e))
  (= (mem (tuple2 (tuple2 a1 c1) (tuple2 (tuple2 b1 c1) e1))
  (Tuple2 (tuple2 a1 c1) (tuple2 (tuple2 b1 c1) e1)
  (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y))
  (Tuple2 (tuple2 b1 c1) e1 (t2tb134 z) (t2tb2955 w)))
  (parallel_product e1 c1 (tuple2 b1 c1) a1 (t2tb261 h) (t2tb3478 k)))
  (and (mem14 (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 z))) h)
  (mem46 (tb2t3479 (Tuple2 c1 e1 (t2tb135 y) (t2tb2955 w))) k)))))

(declare-fun t2tb5023 ((set (tuple21 (tuple21 a b) (tuple21 (tuple21 b c)
  d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) (tuple21 (tuple21 b c) d))))) (sort
  (set1 (tuple2 (tuple2 a1 b1) (tuple2 (tuple2 b1 c1) d1))) (t2tb5023 x))))

(declare-fun tb2t5023 (uni) (set (tuple21 (tuple21 a b) (tuple21 (tuple21 b
  c) d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a b) (tuple21 (tuple21 b c) d)))))
  (! (= (tb2t5023 (t2tb5023 i)) i) :pattern ((t2tb5023 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 b1) (tuple2 (tuple2 b1 c1) d1))) j)
     (= (t2tb5023 (tb2t5023 j)) j)) :pattern ((t2tb5023 (tb2t5023 j))) )))

(declare-fun t2tb5024 ((tuple21 (tuple21 a b) (tuple21 (tuple21 b c)
  d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a b) (tuple21 (tuple21 b c) d)))) (sort
  (tuple2 (tuple2 a1 b1) (tuple2 (tuple2 b1 c1) d1)) (t2tb5024 x))))

(declare-fun tb2t5024 (uni) (tuple21 (tuple21 a b) (tuple21 (tuple21 b c)
  d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a b) (tuple21 (tuple21 b c) d))))
  (! (= (tb2t5024 (t2tb5024 i)) i) :pattern ((t2tb5024 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 b1) (tuple2 (tuple2 b1 c1) d1)) j)
     (= (t2tb5024 (tb2t5024 j)) j)) :pattern ((t2tb5024 (tb2t5024 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a (tuple21 b c)))) (k (set (tuple21 b d))) (x a)
  (y b) (z (tuple21 b c)) (w d))
  (= (mem (tuple2 (tuple2 a1 b1) (tuple2 (tuple2 b1 c1) d1))
  (Tuple2 (tuple2 a1 b1) (tuple2 (tuple2 b1 c1) d1)
  (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y))
  (Tuple2 (tuple2 b1 c1) d1 (t2tb134 z) (t2tb694 w)))
  (parallel_product d1 b1 (tuple2 b1 c1) a1 (t2tb261 h) (t2tb687 k)))
  (and (mem14 (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 z))) h)
  (mem23 (tb2t692 (Tuple2 b1 d1 (t2tb14 y) (t2tb694 w))) k)))))

(declare-fun t2tb5025 ((set (tuple21 (tuple21 a a) (tuple21 (tuple21 b c)
  (tuple21 d e))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a a) (tuple21 (tuple21 b c) (tuple21 d
  e)))))) (sort
  (set1 (tuple2 (tuple2 a1 a1) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1))))
  (t2tb5025 x))))

(declare-fun tb2t5025 (uni) (set (tuple21 (tuple21 a a) (tuple21 (tuple21 b
  c) (tuple21 d e)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a a) (tuple21 (tuple21 b c) (tuple21 d
  e)))))) (! (= (tb2t5025 (t2tb5025 i)) i) :pattern ((t2tb5025 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 a1 a1) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)))) j)
     (= (t2tb5025 (tb2t5025 j)) j)) :pattern ((t2tb5025 (tb2t5025 j))) )))

(declare-fun t2tb5026 ((tuple21 (tuple21 a a) (tuple21 (tuple21 b c)
  (tuple21 d e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a a) (tuple21 (tuple21 b c) (tuple21 d e)))))
  (sort (tuple2 (tuple2 a1 a1) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)))
  (t2tb5026 x))))

(declare-fun tb2t5026 (uni) (tuple21 (tuple21 a a) (tuple21 (tuple21 b c)
  (tuple21 d e))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a a) (tuple21 (tuple21 b c) (tuple21 d e)))))
  (! (= (tb2t5026 (t2tb5026 i)) i) :pattern ((t2tb5026 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 a1) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)))
     j) (= (t2tb5026 (tb2t5026 j)) j)) :pattern ((t2tb5026 (tb2t5026 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a (tuple21 b c)))) (k (set (tuple21 a (tuple21 d
  e)))) (x a) (y a) (z (tuple21 b c)) (w (tuple21 d e)))
  (= (mem (tuple2 (tuple2 a1 a1) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)))
  (Tuple2 (tuple2 a1 a1) (tuple2 (tuple2 b1 c1) (tuple2 d1 e1))
  (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y))
  (Tuple2 (tuple2 b1 c1) (tuple2 d1 e1) (t2tb134 z) (t2tb3457 w)))
  (parallel_product (tuple2 d1 e1) a1 (tuple2 b1 c1) a1 (t2tb261 h)
  (t2tb4103 k)))
  (and (mem14 (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 z))) h)
  (mem48 (tb2t4105 (Tuple2 a1 (tuple2 d1 e1) (t2tb2 y) (t2tb3457 w))) k)))))

(declare-fun t2tb5027 ((set (tuple21 (tuple21 a a) (tuple21 (tuple21 b c)
  e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a a) (tuple21 (tuple21 b c) e))))) (sort
  (set1 (tuple2 (tuple2 a1 a1) (tuple2 (tuple2 b1 c1) e1))) (t2tb5027 x))))

(declare-fun tb2t5027 (uni) (set (tuple21 (tuple21 a a) (tuple21 (tuple21 b
  c) e))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a a) (tuple21 (tuple21 b c) e)))))
  (! (= (tb2t5027 (t2tb5027 i)) i) :pattern ((t2tb5027 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 a1) (tuple2 (tuple2 b1 c1) e1))) j)
     (= (t2tb5027 (tb2t5027 j)) j)) :pattern ((t2tb5027 (tb2t5027 j))) )))

(declare-fun t2tb5028 ((tuple21 (tuple21 a a) (tuple21 (tuple21 b c)
  e))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a a) (tuple21 (tuple21 b c) e)))) (sort
  (tuple2 (tuple2 a1 a1) (tuple2 (tuple2 b1 c1) e1)) (t2tb5028 x))))

(declare-fun tb2t5028 (uni) (tuple21 (tuple21 a a) (tuple21 (tuple21 b c)
  e)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a a) (tuple21 (tuple21 b c) e))))
  (! (= (tb2t5028 (t2tb5028 i)) i) :pattern ((t2tb5028 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 a1) (tuple2 (tuple2 b1 c1) e1)) j)
     (= (t2tb5028 (tb2t5028 j)) j)) :pattern ((t2tb5028 (tb2t5028 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a (tuple21 b c)))) (k (set (tuple21 a e))) (x a)
  (y a) (z (tuple21 b c)) (w e))
  (= (mem (tuple2 (tuple2 a1 a1) (tuple2 (tuple2 b1 c1) e1))
  (Tuple2 (tuple2 a1 a1) (tuple2 (tuple2 b1 c1) e1)
  (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y))
  (Tuple2 (tuple2 b1 c1) e1 (t2tb134 z) (t2tb2955 w)))
  (parallel_product e1 a1 (tuple2 b1 c1) a1 (t2tb261 h) (t2tb2943 k)))
  (and (mem14 (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 z))) h)
  (mem44 (tb2t2949 (Tuple2 a1 e1 (t2tb2 y) (t2tb2955 w))) k)))))

(declare-fun t2tb5029 ((set (tuple21 (tuple21 a a) (tuple21 (tuple21 b c)
  d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a a) (tuple21 (tuple21 b c) d))))) (sort
  (set1 (tuple2 (tuple2 a1 a1) (tuple2 (tuple2 b1 c1) d1))) (t2tb5029 x))))

(declare-fun tb2t5029 (uni) (set (tuple21 (tuple21 a a) (tuple21 (tuple21 b
  c) d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a a) (tuple21 (tuple21 b c) d)))))
  (! (= (tb2t5029 (t2tb5029 i)) i) :pattern ((t2tb5029 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 a1) (tuple2 (tuple2 b1 c1) d1))) j)
     (= (t2tb5029 (tb2t5029 j)) j)) :pattern ((t2tb5029 (tb2t5029 j))) )))

(declare-fun t2tb5030 ((tuple21 (tuple21 a a) (tuple21 (tuple21 b c)
  d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a a) (tuple21 (tuple21 b c) d)))) (sort
  (tuple2 (tuple2 a1 a1) (tuple2 (tuple2 b1 c1) d1)) (t2tb5030 x))))

(declare-fun tb2t5030 (uni) (tuple21 (tuple21 a a) (tuple21 (tuple21 b c)
  d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a a) (tuple21 (tuple21 b c) d))))
  (! (= (tb2t5030 (t2tb5030 i)) i) :pattern ((t2tb5030 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 a1) (tuple2 (tuple2 b1 c1) d1)) j)
     (= (t2tb5030 (tb2t5030 j)) j)) :pattern ((t2tb5030 (tb2t5030 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a (tuple21 b c)))) (k (set (tuple21 a d))) (x a)
  (y a) (z (tuple21 b c)) (w d))
  (= (mem (tuple2 (tuple2 a1 a1) (tuple2 (tuple2 b1 c1) d1))
  (Tuple2 (tuple2 a1 a1) (tuple2 (tuple2 b1 c1) d1)
  (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y))
  (Tuple2 (tuple2 b1 c1) d1 (t2tb134 z) (t2tb694 w)))
  (parallel_product d1 a1 (tuple2 b1 c1) a1 (t2tb261 h) (t2tb903 k)))
  (and (mem14 (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 z))) h)
  (mem32 (tb2t904 (Tuple2 a1 d1 (t2tb2 y) (t2tb694 w))) k)))))

(declare-fun t2tb5031 ((set (tuple21 (tuple21 a a) (tuple21 (tuple21 b c)
  (tuple21 b c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a a) (tuple21 (tuple21 b c) (tuple21 b
  c)))))) (sort
  (set1 (tuple2 (tuple2 a1 a1) (tuple2 (tuple2 b1 c1) (tuple2 b1 c1))))
  (t2tb5031 x))))

(declare-fun tb2t5031 (uni) (set (tuple21 (tuple21 a a) (tuple21 (tuple21 b
  c) (tuple21 b c)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a a) (tuple21 (tuple21 b c) (tuple21 b
  c)))))) (! (= (tb2t5031 (t2tb5031 i)) i) :pattern ((t2tb5031 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 a1 a1) (tuple2 (tuple2 b1 c1) (tuple2 b1 c1)))) j)
     (= (t2tb5031 (tb2t5031 j)) j)) :pattern ((t2tb5031 (tb2t5031 j))) )))

(declare-fun t2tb5032 ((tuple21 (tuple21 a a) (tuple21 (tuple21 b c)
  (tuple21 b c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a a) (tuple21 (tuple21 b c) (tuple21 b c)))))
  (sort (tuple2 (tuple2 a1 a1) (tuple2 (tuple2 b1 c1) (tuple2 b1 c1)))
  (t2tb5032 x))))

(declare-fun tb2t5032 (uni) (tuple21 (tuple21 a a) (tuple21 (tuple21 b c)
  (tuple21 b c))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a a) (tuple21 (tuple21 b c) (tuple21 b c)))))
  (! (= (tb2t5032 (t2tb5032 i)) i) :pattern ((t2tb5032 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 a1) (tuple2 (tuple2 b1 c1) (tuple2 b1 c1)))
     j) (= (t2tb5032 (tb2t5032 j)) j)) :pattern ((t2tb5032 (tb2t5032 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a (tuple21 b c)))) (k (set (tuple21 a (tuple21 b
  c)))) (x a) (y a) (z (tuple21 b c)) (w (tuple21 b c)))
  (= (mem (tuple2 (tuple2 a1 a1) (tuple2 (tuple2 b1 c1) (tuple2 b1 c1)))
  (Tuple2 (tuple2 a1 a1) (tuple2 (tuple2 b1 c1) (tuple2 b1 c1))
  (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y))
  (Tuple2 (tuple2 b1 c1) (tuple2 b1 c1) (t2tb134 z) (t2tb134 w)))
  (parallel_product (tuple2 b1 c1) a1 (tuple2 b1 c1) a1 (t2tb261 h)
  (t2tb261 k)))
  (and (mem14 (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 z))) h)
  (mem14 (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 y) (t2tb134 w))) k)))))

(declare-fun t2tb5033 ((set (tuple21 (tuple21 a a) (tuple21 (tuple21 b c)
  c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a a) (tuple21 (tuple21 b c) c))))) (sort
  (set1 (tuple2 (tuple2 a1 a1) (tuple2 (tuple2 b1 c1) c1))) (t2tb5033 x))))

(declare-fun tb2t5033 (uni) (set (tuple21 (tuple21 a a) (tuple21 (tuple21 b
  c) c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a a) (tuple21 (tuple21 b c) c)))))
  (! (= (tb2t5033 (t2tb5033 i)) i) :pattern ((t2tb5033 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 a1) (tuple2 (tuple2 b1 c1) c1))) j)
     (= (t2tb5033 (tb2t5033 j)) j)) :pattern ((t2tb5033 (tb2t5033 j))) )))

(declare-fun t2tb5034 ((tuple21 (tuple21 a a) (tuple21 (tuple21 b c)
  c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a a) (tuple21 (tuple21 b c) c)))) (sort
  (tuple2 (tuple2 a1 a1) (tuple2 (tuple2 b1 c1) c1)) (t2tb5034 x))))

(declare-fun tb2t5034 (uni) (tuple21 (tuple21 a a) (tuple21 (tuple21 b c)
  c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a a) (tuple21 (tuple21 b c) c))))
  (! (= (tb2t5034 (t2tb5034 i)) i) :pattern ((t2tb5034 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 a1) (tuple2 (tuple2 b1 c1) c1)) j)
     (= (t2tb5034 (tb2t5034 j)) j)) :pattern ((t2tb5034 (tb2t5034 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a (tuple21 b c)))) (k (set (tuple21 a c))) (x a)
  (y a) (z (tuple21 b c)) (w c))
  (= (mem (tuple2 (tuple2 a1 a1) (tuple2 (tuple2 b1 c1) c1))
  (Tuple2 (tuple2 a1 a1) (tuple2 (tuple2 b1 c1) c1)
  (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y))
  (Tuple2 (tuple2 b1 c1) c1 (t2tb134 z) (t2tb135 w)))
  (parallel_product c1 a1 (tuple2 b1 c1) a1 (t2tb261 h) (t2tb129 k)))
  (and (mem14 (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 z))) h)
  (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 y) (t2tb135 w))) k)))))

(declare-fun t2tb5035 ((set (tuple21 (tuple21 a a) (tuple21 (tuple21 b c)
  b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a a) (tuple21 (tuple21 b c) b))))) (sort
  (set1 (tuple2 (tuple2 a1 a1) (tuple2 (tuple2 b1 c1) b1))) (t2tb5035 x))))

(declare-fun tb2t5035 (uni) (set (tuple21 (tuple21 a a) (tuple21 (tuple21 b
  c) b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a a) (tuple21 (tuple21 b c) b)))))
  (! (= (tb2t5035 (t2tb5035 i)) i) :pattern ((t2tb5035 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 a1) (tuple2 (tuple2 b1 c1) b1))) j)
     (= (t2tb5035 (tb2t5035 j)) j)) :pattern ((t2tb5035 (tb2t5035 j))) )))

(declare-fun t2tb5036 ((tuple21 (tuple21 a a) (tuple21 (tuple21 b c)
  b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a a) (tuple21 (tuple21 b c) b)))) (sort
  (tuple2 (tuple2 a1 a1) (tuple2 (tuple2 b1 c1) b1)) (t2tb5036 x))))

(declare-fun tb2t5036 (uni) (tuple21 (tuple21 a a) (tuple21 (tuple21 b c)
  b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a a) (tuple21 (tuple21 b c) b))))
  (! (= (tb2t5036 (t2tb5036 i)) i) :pattern ((t2tb5036 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 a1) (tuple2 (tuple2 b1 c1) b1)) j)
     (= (t2tb5036 (tb2t5036 j)) j)) :pattern ((t2tb5036 (tb2t5036 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a (tuple21 b c)))) (k (set (tuple21 a b))) (x a)
  (y a) (z (tuple21 b c)) (w b))
  (= (mem (tuple2 (tuple2 a1 a1) (tuple2 (tuple2 b1 c1) b1))
  (Tuple2 (tuple2 a1 a1) (tuple2 (tuple2 b1 c1) b1)
  (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y))
  (Tuple2 (tuple2 b1 c1) b1 (t2tb134 z) (t2tb14 w)))
  (parallel_product b1 a1 (tuple2 b1 c1) a1 (t2tb261 h) (t2tb11 k)))
  (and (mem14 (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 z))) h)
  (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 y) (t2tb14 w))) k)))))

;; mem_parallel_product
  (assert
  (forall ((c2 ty) (d2 ty))
  (forall ((h (set (tuple21 a (tuple21 b c)))) (k uni) (x a) (y uni)
  (z (tuple21 b c)) (w uni))
  (= (mem (tuple2 (tuple2 a1 c2) (tuple2 (tuple2 b1 c1) d2))
  (Tuple2 (tuple2 a1 c2) (tuple2 (tuple2 b1 c1) d2)
  (Tuple2 a1 c2 (t2tb2 x) y) (Tuple2 (tuple2 b1 c1) d2 (t2tb134 z) w))
  (parallel_product d2 c2 (tuple2 b1 c1) a1 (t2tb261 h) k))
  (and (mem14 (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 z))) h)
  (mem (tuple2 c2 d2) (Tuple2 c2 d2 y w) k))))))

(declare-fun t2tb5037 ((set (tuple21 (tuple21 a (tuple21 b c)) (tuple21 c
  (tuple21 d e))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a (tuple21 b c)) (tuple21 c (tuple21 d
  e)))))) (sort
  (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 c1 (tuple2 d1 e1))))
  (t2tb5037 x))))

(declare-fun tb2t5037 (uni) (set (tuple21 (tuple21 a (tuple21 b c))
  (tuple21 c (tuple21 d e)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a (tuple21 b c)) (tuple21 c (tuple21 d
  e)))))) (! (= (tb2t5037 (t2tb5037 i)) i) :pattern ((t2tb5037 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 c1 (tuple2 d1 e1)))) j)
     (= (t2tb5037 (tb2t5037 j)) j)) :pattern ((t2tb5037 (tb2t5037 j))) )))

(declare-fun t2tb5038 ((tuple21 (tuple21 a (tuple21 b c)) (tuple21 c
  (tuple21 d e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a (tuple21 b c)) (tuple21 c (tuple21 d e)))))
  (sort (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 c1 (tuple2 d1 e1)))
  (t2tb5038 x))))

(declare-fun tb2t5038 (uni) (tuple21 (tuple21 a (tuple21 b c)) (tuple21 c
  (tuple21 d e))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a (tuple21 b c)) (tuple21 c (tuple21 d e)))))
  (! (= (tb2t5038 (t2tb5038 i)) i) :pattern ((t2tb5038 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 c1 (tuple2 d1 e1)))
     j) (= (t2tb5038 (tb2t5038 j)) j)) :pattern ((t2tb5038 (tb2t5038 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a c))) (k (set (tuple21 (tuple21 b c) (tuple21 d
  e)))) (x a) (y (tuple21 b c)) (z c) (w (tuple21 d e)))
  (= (mem (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 c1 (tuple2 d1 e1)))
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 c1 (tuple2 d1 e1))
  (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 y))
  (Tuple2 c1 (tuple2 d1 e1) (t2tb135 z) (t2tb3457 w)))
  (parallel_product (tuple2 d1 e1) (tuple2 b1 c1) c1 a1 (t2tb129 h)
  (t2tb4102 k)))
  (and (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 z))) h) (mem49
  (tb2t4104 (Tuple2 (tuple2 b1 c1) (tuple2 d1 e1) (t2tb134 y) (t2tb3457 w)))
  k)))))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a c))) (k (set (tuple21 c e))) (x a) (y c) (z c)
  (w e))
  (= (mem (tuple2 (tuple2 a1 c1) (tuple2 c1 e1))
  (Tuple2 (tuple2 a1 c1) (tuple2 c1 e1) (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y))
  (Tuple2 c1 e1 (t2tb135 z) (t2tb2955 w)))
  (parallel_product e1 c1 c1 a1 (t2tb129 h) (t2tb3478 k)))
  (and (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 z))) h) (mem46
  (tb2t3479 (Tuple2 c1 e1 (t2tb135 y) (t2tb2955 w))) k)))))

(declare-fun t2tb879 ((set (tuple21 (tuple21 a b) (tuple21 c d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) (tuple21 c d))))) (sort
  (set1 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1))) (t2tb879 x))))

(declare-fun tb2t879 (uni) (set (tuple21 (tuple21 a b) (tuple21 c d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a b) (tuple21 c d)))))
  (! (= (tb2t879 (t2tb879 i)) i) :pattern ((t2tb879 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1))) j)
     (= (t2tb879 (tb2t879 j)) j)) :pattern ((t2tb879 (tb2t879 j))) )))

(declare-fun t2tb880 ((tuple21 (tuple21 a b) (tuple21 c d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a b) (tuple21 c d)))) (sort
  (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) (t2tb880 x))))

(declare-fun tb2t880 (uni) (tuple21 (tuple21 a b) (tuple21 c d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a b) (tuple21 c d))))
  (! (= (tb2t880 (t2tb880 i)) i) :pattern ((t2tb880 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) j)
     (= (t2tb880 (tb2t880 j)) j)) :pattern ((t2tb880 (tb2t880 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a c))) (k (set (tuple21 b d))) (x a) (y b) (z c)
  (w d))
  (= (mem (tuple2 (tuple2 a1 b1) (tuple2 c1 d1))
  (Tuple2 (tuple2 a1 b1) (tuple2 c1 d1) (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y))
  (Tuple2 c1 d1 (t2tb135 z) (t2tb694 w)))
  (parallel_product d1 b1 c1 a1 (t2tb129 h) (t2tb687 k)))
  (and (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 z))) h) (mem23
  (tb2t692 (Tuple2 b1 d1 (t2tb14 y) (t2tb694 w))) k)))))

(declare-fun t2tb5039 ((set (tuple21 (tuple21 a a) (tuple21 c (tuple21 d
  e))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a a) (tuple21 c (tuple21 d e)))))) (sort
  (set1 (tuple2 (tuple2 a1 a1) (tuple2 c1 (tuple2 d1 e1)))) (t2tb5039 x))))

(declare-fun tb2t5039 (uni) (set (tuple21 (tuple21 a a) (tuple21 c (tuple21 d
  e)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a a) (tuple21 c (tuple21 d e))))))
  (! (= (tb2t5039 (t2tb5039 i)) i) :pattern ((t2tb5039 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 a1) (tuple2 c1 (tuple2 d1 e1)))) j)
     (= (t2tb5039 (tb2t5039 j)) j)) :pattern ((t2tb5039 (tb2t5039 j))) )))

(declare-fun t2tb5040 ((tuple21 (tuple21 a a) (tuple21 c (tuple21 d
  e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a a) (tuple21 c (tuple21 d e))))) (sort
  (tuple2 (tuple2 a1 a1) (tuple2 c1 (tuple2 d1 e1))) (t2tb5040 x))))

(declare-fun tb2t5040 (uni) (tuple21 (tuple21 a a) (tuple21 c (tuple21 d
  e))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a a) (tuple21 c (tuple21 d e)))))
  (! (= (tb2t5040 (t2tb5040 i)) i) :pattern ((t2tb5040 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 a1) (tuple2 c1 (tuple2 d1 e1))) j)
     (= (t2tb5040 (tb2t5040 j)) j)) :pattern ((t2tb5040 (tb2t5040 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a c))) (k (set (tuple21 a (tuple21 d e)))) (x a)
  (y a) (z c) (w (tuple21 d e)))
  (= (mem (tuple2 (tuple2 a1 a1) (tuple2 c1 (tuple2 d1 e1)))
  (Tuple2 (tuple2 a1 a1) (tuple2 c1 (tuple2 d1 e1))
  (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y))
  (Tuple2 c1 (tuple2 d1 e1) (t2tb135 z) (t2tb3457 w)))
  (parallel_product (tuple2 d1 e1) a1 c1 a1 (t2tb129 h) (t2tb4103 k)))
  (and (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 z))) h) (mem48
  (tb2t4105 (Tuple2 a1 (tuple2 d1 e1) (t2tb2 y) (t2tb3457 w))) k)))))

(declare-fun t2tb5041 ((set (tuple21 (tuple21 a a) (tuple21 c e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a a) (tuple21 c e))))) (sort
  (set1 (tuple2 (tuple2 a1 a1) (tuple2 c1 e1))) (t2tb5041 x))))

(declare-fun tb2t5041 (uni) (set (tuple21 (tuple21 a a) (tuple21 c e))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a a) (tuple21 c e)))))
  (! (= (tb2t5041 (t2tb5041 i)) i) :pattern ((t2tb5041 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 a1) (tuple2 c1 e1))) j)
     (= (t2tb5041 (tb2t5041 j)) j)) :pattern ((t2tb5041 (tb2t5041 j))) )))

(declare-fun t2tb5042 ((tuple21 (tuple21 a a) (tuple21 c e))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a a) (tuple21 c e)))) (sort
  (tuple2 (tuple2 a1 a1) (tuple2 c1 e1)) (t2tb5042 x))))

(declare-fun tb2t5042 (uni) (tuple21 (tuple21 a a) (tuple21 c e)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a a) (tuple21 c e))))
  (! (= (tb2t5042 (t2tb5042 i)) i) :pattern ((t2tb5042 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 a1) (tuple2 c1 e1)) j)
     (= (t2tb5042 (tb2t5042 j)) j)) :pattern ((t2tb5042 (tb2t5042 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a c))) (k (set (tuple21 a e))) (x a) (y a) (z c)
  (w e))
  (= (mem (tuple2 (tuple2 a1 a1) (tuple2 c1 e1))
  (Tuple2 (tuple2 a1 a1) (tuple2 c1 e1) (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y))
  (Tuple2 c1 e1 (t2tb135 z) (t2tb2955 w)))
  (parallel_product e1 a1 c1 a1 (t2tb129 h) (t2tb2943 k)))
  (and (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 z))) h) (mem44
  (tb2t2949 (Tuple2 a1 e1 (t2tb2 y) (t2tb2955 w))) k)))))

(declare-fun t2tb5043 ((set (tuple21 (tuple21 a a) (tuple21 c d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a a) (tuple21 c d))))) (sort
  (set1 (tuple2 (tuple2 a1 a1) (tuple2 c1 d1))) (t2tb5043 x))))

(declare-fun tb2t5043 (uni) (set (tuple21 (tuple21 a a) (tuple21 c d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a a) (tuple21 c d)))))
  (! (= (tb2t5043 (t2tb5043 i)) i) :pattern ((t2tb5043 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 a1) (tuple2 c1 d1))) j)
     (= (t2tb5043 (tb2t5043 j)) j)) :pattern ((t2tb5043 (tb2t5043 j))) )))

(declare-fun t2tb5044 ((tuple21 (tuple21 a a) (tuple21 c d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a a) (tuple21 c d)))) (sort
  (tuple2 (tuple2 a1 a1) (tuple2 c1 d1)) (t2tb5044 x))))

(declare-fun tb2t5044 (uni) (tuple21 (tuple21 a a) (tuple21 c d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a a) (tuple21 c d))))
  (! (= (tb2t5044 (t2tb5044 i)) i) :pattern ((t2tb5044 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 a1) (tuple2 c1 d1)) j)
     (= (t2tb5044 (tb2t5044 j)) j)) :pattern ((t2tb5044 (tb2t5044 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a c))) (k (set (tuple21 a d))) (x a) (y a) (z c)
  (w d))
  (= (mem (tuple2 (tuple2 a1 a1) (tuple2 c1 d1))
  (Tuple2 (tuple2 a1 a1) (tuple2 c1 d1) (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y))
  (Tuple2 c1 d1 (t2tb135 z) (t2tb694 w)))
  (parallel_product d1 a1 c1 a1 (t2tb129 h) (t2tb903 k)))
  (and (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 z))) h) (mem32
  (tb2t904 (Tuple2 a1 d1 (t2tb2 y) (t2tb694 w))) k)))))

(declare-fun t2tb5045 ((set (tuple21 (tuple21 a a) (tuple21 c (tuple21 b
  c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a a) (tuple21 c (tuple21 b c)))))) (sort
  (set1 (tuple2 (tuple2 a1 a1) (tuple2 c1 (tuple2 b1 c1)))) (t2tb5045 x))))

(declare-fun tb2t5045 (uni) (set (tuple21 (tuple21 a a) (tuple21 c (tuple21 b
  c)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a a) (tuple21 c (tuple21 b c))))))
  (! (= (tb2t5045 (t2tb5045 i)) i) :pattern ((t2tb5045 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 a1) (tuple2 c1 (tuple2 b1 c1)))) j)
     (= (t2tb5045 (tb2t5045 j)) j)) :pattern ((t2tb5045 (tb2t5045 j))) )))

(declare-fun t2tb5046 ((tuple21 (tuple21 a a) (tuple21 c (tuple21 b
  c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a a) (tuple21 c (tuple21 b c))))) (sort
  (tuple2 (tuple2 a1 a1) (tuple2 c1 (tuple2 b1 c1))) (t2tb5046 x))))

(declare-fun tb2t5046 (uni) (tuple21 (tuple21 a a) (tuple21 c (tuple21 b
  c))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a a) (tuple21 c (tuple21 b c)))))
  (! (= (tb2t5046 (t2tb5046 i)) i) :pattern ((t2tb5046 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 a1) (tuple2 c1 (tuple2 b1 c1))) j)
     (= (t2tb5046 (tb2t5046 j)) j)) :pattern ((t2tb5046 (tb2t5046 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a c))) (k (set (tuple21 a (tuple21 b c)))) (x a)
  (y a) (z c) (w (tuple21 b c)))
  (= (mem (tuple2 (tuple2 a1 a1) (tuple2 c1 (tuple2 b1 c1)))
  (Tuple2 (tuple2 a1 a1) (tuple2 c1 (tuple2 b1 c1))
  (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y))
  (Tuple2 c1 (tuple2 b1 c1) (t2tb135 z) (t2tb134 w)))
  (parallel_product (tuple2 b1 c1) a1 c1 a1 (t2tb129 h) (t2tb261 k)))
  (and (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 z))) h) (mem14
  (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 y) (t2tb134 w))) k)))))

(declare-fun t2tb342 ((set (tuple21 (tuple21 a a) (tuple21 c c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a a) (tuple21 c c))))) (sort
  (set1 (tuple2 (tuple2 a1 a1) (tuple2 c1 c1))) (t2tb342 x))))

(declare-fun tb2t342 (uni) (set (tuple21 (tuple21 a a) (tuple21 c c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a a) (tuple21 c c)))))
  (! (= (tb2t342 (t2tb342 i)) i) :pattern ((t2tb342 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 a1) (tuple2 c1 c1))) j)
     (= (t2tb342 (tb2t342 j)) j)) :pattern ((t2tb342 (tb2t342 j))) )))

(declare-fun t2tb343 ((tuple21 (tuple21 a a) (tuple21 c c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a a) (tuple21 c c)))) (sort
  (tuple2 (tuple2 a1 a1) (tuple2 c1 c1)) (t2tb343 x))))

(declare-fun tb2t343 (uni) (tuple21 (tuple21 a a) (tuple21 c c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a a) (tuple21 c c))))
  (! (= (tb2t343 (t2tb343 i)) i) :pattern ((t2tb343 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 a1) (tuple2 c1 c1)) j)
     (= (t2tb343 (tb2t343 j)) j)) :pattern ((t2tb343 (tb2t343 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a c))) (k (set (tuple21 a c))) (x a) (y a) (z c)
  (w c))
  (= (mem (tuple2 (tuple2 a1 a1) (tuple2 c1 c1))
  (Tuple2 (tuple2 a1 a1) (tuple2 c1 c1) (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y))
  (Tuple2 c1 c1 (t2tb135 z) (t2tb135 w)))
  (parallel_product c1 a1 c1 a1 (t2tb129 h) (t2tb129 k)))
  (and (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 z))) h) (mem10
  (tb2t133 (Tuple2 a1 c1 (t2tb2 y) (t2tb135 w))) k)))))

(declare-fun t2tb344 ((set (tuple21 (tuple21 a a) (tuple21 c b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a a) (tuple21 c b))))) (sort
  (set1 (tuple2 (tuple2 a1 a1) (tuple2 c1 b1))) (t2tb344 x))))

(declare-fun tb2t344 (uni) (set (tuple21 (tuple21 a a) (tuple21 c b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a a) (tuple21 c b)))))
  (! (= (tb2t344 (t2tb344 i)) i) :pattern ((t2tb344 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 a1) (tuple2 c1 b1))) j)
     (= (t2tb344 (tb2t344 j)) j)) :pattern ((t2tb344 (tb2t344 j))) )))

(declare-fun t2tb345 ((tuple21 (tuple21 a a) (tuple21 c b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a a) (tuple21 c b)))) (sort
  (tuple2 (tuple2 a1 a1) (tuple2 c1 b1)) (t2tb345 x))))

(declare-fun tb2t345 (uni) (tuple21 (tuple21 a a) (tuple21 c b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a a) (tuple21 c b))))
  (! (= (tb2t345 (t2tb345 i)) i) :pattern ((t2tb345 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 a1) (tuple2 c1 b1)) j)
     (= (t2tb345 (tb2t345 j)) j)) :pattern ((t2tb345 (tb2t345 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a c))) (k (set (tuple21 a b))) (x a) (y a) (z c)
  (w b))
  (= (mem (tuple2 (tuple2 a1 a1) (tuple2 c1 b1))
  (Tuple2 (tuple2 a1 a1) (tuple2 c1 b1) (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y))
  (Tuple2 c1 b1 (t2tb135 z) (t2tb14 w)))
  (parallel_product b1 a1 c1 a1 (t2tb129 h) (t2tb11 k)))
  (and (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 z))) h) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 y) (t2tb14 w))) k)))))

;; mem_parallel_product
  (assert
  (forall ((c2 ty) (d2 ty))
  (forall ((h (set (tuple21 a c))) (k uni) (x a) (y uni) (z c) (w uni))
  (= (mem (tuple2 (tuple2 a1 c2) (tuple2 c1 d2))
  (Tuple2 (tuple2 a1 c2) (tuple2 c1 d2) (Tuple2 a1 c2 (t2tb2 x) y)
  (Tuple2 c1 d2 (t2tb135 z) w)) (parallel_product d2 c2 c1 a1 (t2tb129 h) k))
  (and (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 z))) h) (mem
  (tuple2 c2 d2) (Tuple2 c2 d2 y w) k))))))

(declare-fun t2tb5047 ((set (tuple21 (tuple21 a (tuple21 b c)) (tuple21 b
  (tuple21 d e))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a (tuple21 b c)) (tuple21 b (tuple21 d
  e)))))) (sort
  (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 b1 (tuple2 d1 e1))))
  (t2tb5047 x))))

(declare-fun tb2t5047 (uni) (set (tuple21 (tuple21 a (tuple21 b c))
  (tuple21 b (tuple21 d e)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a (tuple21 b c)) (tuple21 b (tuple21 d
  e)))))) (! (= (tb2t5047 (t2tb5047 i)) i) :pattern ((t2tb5047 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 b1 (tuple2 d1 e1)))) j)
     (= (t2tb5047 (tb2t5047 j)) j)) :pattern ((t2tb5047 (tb2t5047 j))) )))

(declare-fun t2tb5048 ((tuple21 (tuple21 a (tuple21 b c)) (tuple21 b
  (tuple21 d e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a (tuple21 b c)) (tuple21 b (tuple21 d e)))))
  (sort (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 b1 (tuple2 d1 e1)))
  (t2tb5048 x))))

(declare-fun tb2t5048 (uni) (tuple21 (tuple21 a (tuple21 b c)) (tuple21 b
  (tuple21 d e))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a (tuple21 b c)) (tuple21 b (tuple21 d e)))))
  (! (= (tb2t5048 (t2tb5048 i)) i) :pattern ((t2tb5048 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 b1 (tuple2 d1 e1)))
     j) (= (t2tb5048 (tb2t5048 j)) j)) :pattern ((t2tb5048 (tb2t5048 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a b))) (k (set (tuple21 (tuple21 b c) (tuple21 d
  e)))) (x a) (y (tuple21 b c)) (z b) (w (tuple21 d e)))
  (= (mem (tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 b1 (tuple2 d1 e1)))
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) (tuple2 b1 (tuple2 d1 e1))
  (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 y))
  (Tuple2 b1 (tuple2 d1 e1) (t2tb14 z) (t2tb3457 w)))
  (parallel_product (tuple2 d1 e1) (tuple2 b1 c1) b1 a1 (t2tb11 h)
  (t2tb4102 k)))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 z))) h) (mem49
  (tb2t4104 (Tuple2 (tuple2 b1 c1) (tuple2 d1 e1) (t2tb134 y) (t2tb3457 w)))
  k)))))

(declare-fun t2tb5049 ((set (tuple21 (tuple21 a c) (tuple21 b e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a c) (tuple21 b e))))) (sort
  (set1 (tuple2 (tuple2 a1 c1) (tuple2 b1 e1))) (t2tb5049 x))))

(declare-fun tb2t5049 (uni) (set (tuple21 (tuple21 a c) (tuple21 b e))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a c) (tuple21 b e)))))
  (! (= (tb2t5049 (t2tb5049 i)) i) :pattern ((t2tb5049 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 c1) (tuple2 b1 e1))) j)
     (= (t2tb5049 (tb2t5049 j)) j)) :pattern ((t2tb5049 (tb2t5049 j))) )))

(declare-fun t2tb5050 ((tuple21 (tuple21 a c) (tuple21 b e))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a c) (tuple21 b e)))) (sort
  (tuple2 (tuple2 a1 c1) (tuple2 b1 e1)) (t2tb5050 x))))

(declare-fun tb2t5050 (uni) (tuple21 (tuple21 a c) (tuple21 b e)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a c) (tuple21 b e))))
  (! (= (tb2t5050 (t2tb5050 i)) i) :pattern ((t2tb5050 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 c1) (tuple2 b1 e1)) j)
     (= (t2tb5050 (tb2t5050 j)) j)) :pattern ((t2tb5050 (tb2t5050 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a b))) (k (set (tuple21 c e))) (x a) (y c) (z b)
  (w e))
  (= (mem (tuple2 (tuple2 a1 c1) (tuple2 b1 e1))
  (Tuple2 (tuple2 a1 c1) (tuple2 b1 e1) (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y))
  (Tuple2 b1 e1 (t2tb14 z) (t2tb2955 w)))
  (parallel_product e1 c1 b1 a1 (t2tb11 h) (t2tb3478 k)))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 z))) h) (mem46
  (tb2t3479 (Tuple2 c1 e1 (t2tb135 y) (t2tb2955 w))) k)))))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a b))) (k (set (tuple21 b d))) (x a) (y b) (z b)
  (w d))
  (= (mem (tuple2 (tuple2 a1 b1) (tuple2 b1 d1))
  (Tuple2 (tuple2 a1 b1) (tuple2 b1 d1) (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y))
  (Tuple2 b1 d1 (t2tb14 z) (t2tb694 w)))
  (parallel_product d1 b1 b1 a1 (t2tb11 h) (t2tb687 k)))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 z))) h) (mem23
  (tb2t692 (Tuple2 b1 d1 (t2tb14 y) (t2tb694 w))) k)))))

(declare-fun t2tb5051 ((set (tuple21 (tuple21 a a) (tuple21 b (tuple21 d
  e))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a a) (tuple21 b (tuple21 d e)))))) (sort
  (set1 (tuple2 (tuple2 a1 a1) (tuple2 b1 (tuple2 d1 e1)))) (t2tb5051 x))))

(declare-fun tb2t5051 (uni) (set (tuple21 (tuple21 a a) (tuple21 b (tuple21 d
  e)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a a) (tuple21 b (tuple21 d e))))))
  (! (= (tb2t5051 (t2tb5051 i)) i) :pattern ((t2tb5051 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 a1) (tuple2 b1 (tuple2 d1 e1)))) j)
     (= (t2tb5051 (tb2t5051 j)) j)) :pattern ((t2tb5051 (tb2t5051 j))) )))

(declare-fun t2tb5052 ((tuple21 (tuple21 a a) (tuple21 b (tuple21 d
  e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a a) (tuple21 b (tuple21 d e))))) (sort
  (tuple2 (tuple2 a1 a1) (tuple2 b1 (tuple2 d1 e1))) (t2tb5052 x))))

(declare-fun tb2t5052 (uni) (tuple21 (tuple21 a a) (tuple21 b (tuple21 d
  e))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a a) (tuple21 b (tuple21 d e)))))
  (! (= (tb2t5052 (t2tb5052 i)) i) :pattern ((t2tb5052 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 a1) (tuple2 b1 (tuple2 d1 e1))) j)
     (= (t2tb5052 (tb2t5052 j)) j)) :pattern ((t2tb5052 (tb2t5052 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a b))) (k (set (tuple21 a (tuple21 d e)))) (x a)
  (y a) (z b) (w (tuple21 d e)))
  (= (mem (tuple2 (tuple2 a1 a1) (tuple2 b1 (tuple2 d1 e1)))
  (Tuple2 (tuple2 a1 a1) (tuple2 b1 (tuple2 d1 e1))
  (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y))
  (Tuple2 b1 (tuple2 d1 e1) (t2tb14 z) (t2tb3457 w)))
  (parallel_product (tuple2 d1 e1) a1 b1 a1 (t2tb11 h) (t2tb4103 k)))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 z))) h) (mem48
  (tb2t4105 (Tuple2 a1 (tuple2 d1 e1) (t2tb2 y) (t2tb3457 w))) k)))))

(declare-fun t2tb4100 ((set (tuple21 (tuple21 a a) (tuple21 b e)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a a) (tuple21 b e))))) (sort
  (set1 (tuple2 (tuple2 a1 a1) (tuple2 b1 e1))) (t2tb4100 x))))

(declare-fun tb2t4100 (uni) (set (tuple21 (tuple21 a a) (tuple21 b e))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a a) (tuple21 b e)))))
  (! (= (tb2t4100 (t2tb4100 i)) i) :pattern ((t2tb4100 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 a1) (tuple2 b1 e1))) j)
     (= (t2tb4100 (tb2t4100 j)) j)) :pattern ((t2tb4100 (tb2t4100 j))) )))

(declare-fun t2tb4101 ((tuple21 (tuple21 a a) (tuple21 b e))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a a) (tuple21 b e)))) (sort
  (tuple2 (tuple2 a1 a1) (tuple2 b1 e1)) (t2tb4101 x))))

(declare-fun tb2t4101 (uni) (tuple21 (tuple21 a a) (tuple21 b e)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a a) (tuple21 b e))))
  (! (= (tb2t4101 (t2tb4101 i)) i) :pattern ((t2tb4101 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 a1) (tuple2 b1 e1)) j)
     (= (t2tb4101 (tb2t4101 j)) j)) :pattern ((t2tb4101 (tb2t4101 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a b))) (k (set (tuple21 a e))) (x a) (y a) (z b)
  (w e))
  (= (mem (tuple2 (tuple2 a1 a1) (tuple2 b1 e1))
  (Tuple2 (tuple2 a1 a1) (tuple2 b1 e1) (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y))
  (Tuple2 b1 e1 (t2tb14 z) (t2tb2955 w)))
  (parallel_product e1 a1 b1 a1 (t2tb11 h) (t2tb2943 k)))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 z))) h) (mem44
  (tb2t2949 (Tuple2 a1 e1 (t2tb2 y) (t2tb2955 w))) k)))))

(declare-fun t2tb5053 ((set (tuple21 (tuple21 a a) (tuple21 b d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a a) (tuple21 b d))))) (sort
  (set1 (tuple2 (tuple2 a1 a1) (tuple2 b1 d1))) (t2tb5053 x))))

(declare-fun tb2t5053 (uni) (set (tuple21 (tuple21 a a) (tuple21 b d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a a) (tuple21 b d)))))
  (! (= (tb2t5053 (t2tb5053 i)) i) :pattern ((t2tb5053 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 a1) (tuple2 b1 d1))) j)
     (= (t2tb5053 (tb2t5053 j)) j)) :pattern ((t2tb5053 (tb2t5053 j))) )))

(declare-fun t2tb5054 ((tuple21 (tuple21 a a) (tuple21 b d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a a) (tuple21 b d)))) (sort
  (tuple2 (tuple2 a1 a1) (tuple2 b1 d1)) (t2tb5054 x))))

(declare-fun tb2t5054 (uni) (tuple21 (tuple21 a a) (tuple21 b d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a a) (tuple21 b d))))
  (! (= (tb2t5054 (t2tb5054 i)) i) :pattern ((t2tb5054 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 a1) (tuple2 b1 d1)) j)
     (= (t2tb5054 (tb2t5054 j)) j)) :pattern ((t2tb5054 (tb2t5054 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a b))) (k (set (tuple21 a d))) (x a) (y a) (z b)
  (w d))
  (= (mem (tuple2 (tuple2 a1 a1) (tuple2 b1 d1))
  (Tuple2 (tuple2 a1 a1) (tuple2 b1 d1) (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y))
  (Tuple2 b1 d1 (t2tb14 z) (t2tb694 w)))
  (parallel_product d1 a1 b1 a1 (t2tb11 h) (t2tb903 k)))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 z))) h) (mem32
  (tb2t904 (Tuple2 a1 d1 (t2tb2 y) (t2tb694 w))) k)))))

(declare-fun t2tb5055 ((set (tuple21 (tuple21 a a) (tuple21 b (tuple21 b
  c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a a) (tuple21 b (tuple21 b c)))))) (sort
  (set1 (tuple2 (tuple2 a1 a1) (tuple2 b1 (tuple2 b1 c1)))) (t2tb5055 x))))

(declare-fun tb2t5055 (uni) (set (tuple21 (tuple21 a a) (tuple21 b (tuple21 b
  c)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a a) (tuple21 b (tuple21 b c))))))
  (! (= (tb2t5055 (t2tb5055 i)) i) :pattern ((t2tb5055 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 a1) (tuple2 b1 (tuple2 b1 c1)))) j)
     (= (t2tb5055 (tb2t5055 j)) j)) :pattern ((t2tb5055 (tb2t5055 j))) )))

(declare-fun t2tb5056 ((tuple21 (tuple21 a a) (tuple21 b (tuple21 b
  c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a a) (tuple21 b (tuple21 b c))))) (sort
  (tuple2 (tuple2 a1 a1) (tuple2 b1 (tuple2 b1 c1))) (t2tb5056 x))))

(declare-fun tb2t5056 (uni) (tuple21 (tuple21 a a) (tuple21 b (tuple21 b
  c))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a a) (tuple21 b (tuple21 b c)))))
  (! (= (tb2t5056 (t2tb5056 i)) i) :pattern ((t2tb5056 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 a1) (tuple2 b1 (tuple2 b1 c1))) j)
     (= (t2tb5056 (tb2t5056 j)) j)) :pattern ((t2tb5056 (tb2t5056 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a b))) (k (set (tuple21 a (tuple21 b c)))) (x a)
  (y a) (z b) (w (tuple21 b c)))
  (= (mem (tuple2 (tuple2 a1 a1) (tuple2 b1 (tuple2 b1 c1)))
  (Tuple2 (tuple2 a1 a1) (tuple2 b1 (tuple2 b1 c1))
  (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y))
  (Tuple2 b1 (tuple2 b1 c1) (t2tb14 z) (t2tb134 w)))
  (parallel_product (tuple2 b1 c1) a1 b1 a1 (t2tb11 h) (t2tb261 k)))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 z))) h) (mem14
  (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 y) (t2tb134 w))) k)))))

(declare-fun t2tb346 ((tuple21 (tuple21 a a) (tuple21 b c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a a) (tuple21 b c)))) (sort
  (tuple2 (tuple2 a1 a1) (tuple2 b1 c1)) (t2tb346 x))))

(declare-fun tb2t346 (uni) (tuple21 (tuple21 a a) (tuple21 b c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a a) (tuple21 b c))))
  (! (= (tb2t346 (t2tb346 i)) i) :pattern ((t2tb346 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 a1) (tuple2 b1 c1)) j)
     (= (t2tb346 (tb2t346 j)) j)) :pattern ((t2tb346 (tb2t346 j))) )))

(declare-fun t2tb347 ((set (tuple21 (tuple21 a a) (tuple21 b c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a a) (tuple21 b c))))) (sort
  (set1 (tuple2 (tuple2 a1 a1) (tuple2 b1 c1))) (t2tb347 x))))

(declare-fun tb2t347 (uni) (set (tuple21 (tuple21 a a) (tuple21 b c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a a) (tuple21 b c)))))
  (! (= (tb2t347 (t2tb347 i)) i) :pattern ((t2tb347 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 a1) (tuple2 b1 c1))) j)
     (= (t2tb347 (tb2t347 j)) j)) :pattern ((t2tb347 (tb2t347 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a b))) (k (set (tuple21 a c))) (x a) (y a) (z b)
  (w c))
  (= (mem (tuple2 (tuple2 a1 a1) (tuple2 b1 c1))
  (Tuple2 (tuple2 a1 a1) (tuple2 b1 c1) (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y))
  (Tuple2 b1 c1 (t2tb14 z) (t2tb135 w)))
  (parallel_product c1 a1 b1 a1 (t2tb11 h) (t2tb129 k)))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 z))) h) (mem10
  (tb2t133 (Tuple2 a1 c1 (t2tb2 y) (t2tb135 w))) k)))))

(declare-fun t2tb61 ((set (tuple21 (tuple21 a a) (tuple21 b b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a a) (tuple21 b b))))) (sort
  (set1 (tuple2 (tuple2 a1 a1) (tuple2 b1 b1))) (t2tb61 x))))

(declare-fun tb2t61 (uni) (set (tuple21 (tuple21 a a) (tuple21 b b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a a) (tuple21 b b)))))
  (! (= (tb2t61 (t2tb61 i)) i) :pattern ((t2tb61 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 a1) (tuple2 b1 b1))) j)
     (= (t2tb61 (tb2t61 j)) j)) :pattern ((t2tb61 (tb2t61 j))) )))

(declare-fun t2tb62 ((tuple21 (tuple21 a a) (tuple21 b b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a a) (tuple21 b b)))) (sort
  (tuple2 (tuple2 a1 a1) (tuple2 b1 b1)) (t2tb62 x))))

(declare-fun tb2t62 (uni) (tuple21 (tuple21 a a) (tuple21 b b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a a) (tuple21 b b))))
  (! (= (tb2t62 (t2tb62 i)) i) :pattern ((t2tb62 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 a1) (tuple2 b1 b1)) j)
     (= (t2tb62 (tb2t62 j)) j)) :pattern ((t2tb62 (tb2t62 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a b))) (k (set (tuple21 a b))) (x a) (y a) (z b)
  (w b))
  (= (mem (tuple2 (tuple2 a1 a1) (tuple2 b1 b1))
  (Tuple2 (tuple2 a1 a1) (tuple2 b1 b1) (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y))
  (Tuple2 b1 b1 (t2tb14 z) (t2tb14 w)))
  (parallel_product b1 a1 b1 a1 (t2tb11 h) (t2tb11 k)))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 z))) h) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 y) (t2tb14 w))) k)))))

;; mem_parallel_product
  (assert
  (forall ((c2 ty) (d2 ty))
  (forall ((h (set (tuple21 a b))) (k uni) (x a) (y uni) (z b) (w uni))
  (= (mem (tuple2 (tuple2 a1 c2) (tuple2 b1 d2))
  (Tuple2 (tuple2 a1 c2) (tuple2 b1 d2) (Tuple2 a1 c2 (t2tb2 x) y)
  (Tuple2 b1 d2 (t2tb14 z) w)) (parallel_product d2 c2 b1 a1 (t2tb11 h) k))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 z))) h) (mem
  (tuple2 c2 d2) (Tuple2 c2 d2 y w) k))))))

;; mem_parallel_product
  (assert
  (forall ((a2 ty) (b2 ty) (c2 ty) (d2 ty))
  (forall ((h uni) (k uni) (x uni) (y uni) (z uni) (w uni))
  (= (mem (tuple2 (tuple2 a2 c2) (tuple2 b2 d2))
  (Tuple2 (tuple2 a2 c2) (tuple2 b2 d2) (Tuple2 a2 c2 x y)
  (Tuple2 b2 d2 z w)) (parallel_product d2 c2 b2 a2 h k))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x z) h) (mem (tuple2 c2 d2)
  (Tuple2 c2 d2 y w) k))))))

(declare-fun infix_plmngt (ty ty uni uni) uni)

;; infix +->_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (set1 (tuple2 a2 b2)))
  (infix_plmngt b2 a2 x x1)))))

;; mem_partial_function_set
  (assert
  (forall ((s (set (tuple21 b c))) (t (set (tuple21 d e)))
  (f2 (set (tuple21 (tuple21 b c) (tuple21 d e)))))
  (= (mem (set1 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1))) (t2tb4102 f2)
  (infix_plmngt (tuple2 d1 e1) (tuple2 b1 c1) (t2tb131 s) (t2tb3456 t)))
  (and (mem (set1 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1))) (t2tb4102 f2)
  (relation (tuple2 d1 e1) (tuple2 b1 c1) (t2tb131 s) (t2tb3456 t)))
  (forall ((x (tuple21 b c)) (y1 (tuple21 d e)) (y2 (tuple21 d e)))
  (=>
  (and (mem49
  (tb2t4104 (Tuple2 (tuple2 b1 c1) (tuple2 d1 e1) (t2tb134 x) (t2tb3457 y1)))
  f2) (mem49
  (tb2t4104 (Tuple2 (tuple2 b1 c1) (tuple2 d1 e1) (t2tb134 x) (t2tb3457 y2)))
  f2)) (= y1 y2)))))))

;; mem_partial_function_set
  (assert
  (forall ((s (set c)) (t (set e)) (f2 (set (tuple21 c e))))
  (= (mem47 f2 (tb2t3854 (infix_plmngt e1 c1 (t2tb132 s) (t2tb2947 t))))
  (and (mem47 f2 (relation12 s t))
  (forall ((x c) (y1 e) (y2 e))
  (=>
  (and (mem46 (tb2t3479 (Tuple2 c1 e1 (t2tb135 x) (t2tb2955 y1))) f2) (mem46
  (tb2t3479 (Tuple2 c1 e1 (t2tb135 x) (t2tb2955 y2))) f2)) (= y1 y2)))))))

;; mem_partial_function_set
  (assert
  (forall ((s (set b)) (t (set d)) (f2 (set (tuple21 b d))))
  (= (mem33 f2 (tb2t906 (infix_plmngt d1 b1 (t2tb12 s) (t2tb690 t))))
  (and (mem33 f2 (relation9 s t))
  (forall ((x b) (y1 d) (y2 d))
  (=>
  (and (mem23 (tb2t692 (Tuple2 b1 d1 (t2tb14 x) (t2tb694 y1))) f2) (mem23
  (tb2t692 (Tuple2 b1 d1 (t2tb14 x) (t2tb694 y2))) f2)) (= y1 y2)))))))

;; mem_partial_function_set
  (assert
  (forall ((s (set a)) (t (set (tuple21 d e))) (f2 (set (tuple21 a (tuple21 d
  e)))))
  (= (mem (set1 (tuple2 a1 (tuple2 d1 e1))) (t2tb4103 f2)
  (infix_plmngt (tuple2 d1 e1) a1 (t2tb1 s) (t2tb3456 t)))
  (and (mem (set1 (tuple2 a1 (tuple2 d1 e1))) (t2tb4103 f2)
  (relation (tuple2 d1 e1) a1 (t2tb1 s) (t2tb3456 t)))
  (forall ((x a) (y1 (tuple21 d e)) (y2 (tuple21 d e)))
  (=>
  (and (mem48 (tb2t4105 (Tuple2 a1 (tuple2 d1 e1) (t2tb2 x) (t2tb3457 y1)))
  f2) (mem48 (tb2t4105 (Tuple2 a1 (tuple2 d1 e1) (t2tb2 x) (t2tb3457 y2)))
  f2)) (= y1 y2)))))))

;; mem_partial_function_set
  (assert
  (forall ((s (set a)) (t (set e)) (f2 (set (tuple21 a e))))
  (= (mem (set1 (tuple2 a1 e1)) (t2tb2943 f2)
  (infix_plmngt e1 a1 (t2tb1 s) (t2tb2947 t)))
  (and (mem (set1 (tuple2 a1 e1)) (t2tb2943 f2)
  (relation e1 a1 (t2tb1 s) (t2tb2947 t)))
  (forall ((x a) (y1 e) (y2 e))
  (=>
  (and (mem44 (tb2t2949 (Tuple2 a1 e1 (t2tb2 x) (t2tb2955 y1))) f2) (mem44
  (tb2t2949 (Tuple2 a1 e1 (t2tb2 x) (t2tb2955 y2))) f2)) (= y1 y2)))))))

;; mem_partial_function_set
  (assert
  (forall ((s (set a)) (t (set d)) (f2 (set (tuple21 a d))))
  (= (mem (set1 (tuple2 a1 d1)) (t2tb903 f2)
  (infix_plmngt d1 a1 (t2tb1 s) (t2tb690 t)))
  (and (mem (set1 (tuple2 a1 d1)) (t2tb903 f2)
  (relation d1 a1 (t2tb1 s) (t2tb690 t)))
  (forall ((x a) (y1 d) (y2 d))
  (=>
  (and (mem32 (tb2t904 (Tuple2 a1 d1 (t2tb2 x) (t2tb694 y1))) f2) (mem32
  (tb2t904 (Tuple2 a1 d1 (t2tb2 x) (t2tb694 y2))) f2)) (= y1 y2)))))))

;; mem_partial_function_set
  (assert
  (forall ((s (set a)) (t (set (tuple21 b c))) (f2 (set (tuple21 a (tuple21 b
  c)))))
  (= (mem (set1 (tuple2 a1 (tuple2 b1 c1))) (t2tb261 f2)
  (infix_plmngt (tuple2 b1 c1) a1 (t2tb1 s) (t2tb131 t)))
  (and (mem (set1 (tuple2 a1 (tuple2 b1 c1))) (t2tb261 f2)
  (relation (tuple2 b1 c1) a1 (t2tb1 s) (t2tb131 t)))
  (forall ((x a) (y1 (tuple21 b c)) (y2 (tuple21 b c)))
  (=>
  (and (mem14 (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 y1))) f2)
  (mem14 (tb2t260 (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (t2tb134 y2))) f2))
  (= y1 y2)))))))

;; mem_partial_function_set
  (assert
  (forall ((s (set a)) (t (set c)) (f2 (set (tuple21 a c))))
  (= (mem11 f2 (tb2t128 (infix_plmngt c1 a1 (t2tb1 s) (t2tb132 t))))
  (and (mem11 f2 (relation3 s t))
  (forall ((x a) (y1 c) (y2 c))
  (=>
  (and (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y1))) f2) (mem10
  (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y2))) f2)) (= y1 y2)))))))

;; mem_partial_function_set
  (assert
  (forall ((s (set a)) (t (set b)) (f2 (set (tuple21 a b))))
  (= (mem4 f2 (tb2t10 (infix_plmngt b1 a1 (t2tb1 s) (t2tb12 t))))
  (and (mem4 f2 (relation1 s t))
  (forall ((x a) (y1 b) (y2 b))
  (=>
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y1))) f2) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y2))) f2)) (= y1 y2)))))))

;; mem_partial_function_set
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (f2 uni))
  (and
  (=> (mem (set1 (tuple2 a2 b2)) f2 (infix_plmngt b2 a2 s t))
  (and (mem (set1 (tuple2 a2 b2)) f2 (relation b2 a2 s t))
  (forall ((x uni) (y1 uni) (y2 uni))
  (=> (sort b2 y1)
  (=> (sort b2 y2)
  (=>
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y1) f2) (mem (tuple2 a2 b2)
  (Tuple2 a2 b2 x y2) f2)) (= y1 y2)))))))
  (=>
  (and (mem (set1 (tuple2 a2 b2)) f2 (relation b2 a2 s t))
  (forall ((x uni) (y1 uni) (y2 uni))
  (=> (sort a2 x)
  (=> (sort b2 y1)
  (=> (sort b2 y2)
  (=>
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y1) f2) (mem (tuple2 a2 b2)
  (Tuple2 a2 b2 x y2) f2)) (= y1 y2))))))) (mem (set1 (tuple2 a2 b2)) f2
  (infix_plmngt b2 a2 s t)))))))

(declare-fun infix_mnmngt (ty ty uni uni) uni)

;; infix -->_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (set1 (tuple2 a2 b2)))
  (infix_mnmngt b2 a2 x x1)))))

;; mem_total_function_set
  (assert
  (forall ((b2 ty))
  (forall ((s (set (tuple21 (tuple21 b c) (tuple21 d e)))) (t uni) (x uni))
  (= (mem (set1 (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) b2)) x
  (infix_mnmngt b2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (t2tb4102 s) t))
  (and (mem (set1 (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) b2)) x
  (infix_plmngt b2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (t2tb4102 s) t))
  (infix_eqeq42 (tb2t4102 (dom b2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) x))
  s))))))

;; mem_total_function_set
  (assert
  (forall ((b2 ty))
  (forall ((s (set (tuple21 a (tuple21 d e)))) (t uni) (x uni))
  (= (mem (set1 (tuple2 (tuple2 a1 (tuple2 d1 e1)) b2)) x
  (infix_mnmngt b2 (tuple2 a1 (tuple2 d1 e1)) (t2tb4103 s) t))
  (and (mem (set1 (tuple2 (tuple2 a1 (tuple2 d1 e1)) b2)) x
  (infix_plmngt b2 (tuple2 a1 (tuple2 d1 e1)) (t2tb4103 s) t)) (infix_eqeq41
  (tb2t4103 (dom b2 (tuple2 a1 (tuple2 d1 e1)) x)) s))))))

;; mem_total_function_set
  (assert
  (forall ((b2 ty))
  (forall ((s (set (set (tuple21 c e)))) (t uni) (x uni))
  (= (mem (set1 (tuple2 (set1 (tuple2 c1 e1)) b2)) x
  (infix_mnmngt b2 (set1 (tuple2 c1 e1)) (t2tb3854 s) t))
  (and (mem (set1 (tuple2 (set1 (tuple2 c1 e1)) b2)) x
  (infix_plmngt b2 (set1 (tuple2 c1 e1)) (t2tb3854 s) t)) (infix_eqeq40
  (tb2t3854 (dom b2 (set1 (tuple2 c1 e1)) x)) s))))))

;; mem_total_function_set
  (assert
  (forall ((b2 ty))
  (forall ((s (set (tuple21 c e))) (t uni) (x uni))
  (= (mem (set1 (tuple2 (tuple2 c1 e1) b2)) x
  (infix_mnmngt b2 (tuple2 c1 e1) (t2tb3478 s) t))
  (and (mem (set1 (tuple2 (tuple2 c1 e1) b2)) x
  (infix_plmngt b2 (tuple2 c1 e1) (t2tb3478 s) t)) (infix_eqeq39
  (tb2t3478 (dom b2 (tuple2 c1 e1) x)) s))))))

;; mem_total_function_set
  (assert
  (forall ((b2 ty))
  (forall ((s (set (tuple21 a e))) (t uni) (x uni))
  (= (mem (set1 (tuple2 (tuple2 a1 e1) b2)) x
  (infix_mnmngt b2 (tuple2 a1 e1) (t2tb2943 s) t))
  (and (mem (set1 (tuple2 (tuple2 a1 e1) b2)) x
  (infix_plmngt b2 (tuple2 a1 e1) (t2tb2943 s) t)) (infix_eqeq35
  (tb2t2943 (dom b2 (tuple2 a1 e1) x)) s))))))

;; mem_total_function_set
  (assert
  (forall ((b2 ty))
  (forall ((s (set e)) (t uni) (x uni))
  (= (mem (set1 (tuple2 e1 b2)) x (infix_mnmngt b2 e1 (t2tb2947 s) t))
  (and (mem (set1 (tuple2 e1 b2)) x (infix_plmngt b2 e1 (t2tb2947 s) t))
  (infix_eqeq29 (tb2t2947 (dom b2 e1 x)) s))))))

;; mem_total_function_set
  (assert
  (forall ((b2 ty))
  (forall ((s (set (tuple21 a d))) (t uni) (x uni))
  (= (mem (set1 (tuple2 (tuple2 a1 d1) b2)) x
  (infix_mnmngt b2 (tuple2 a1 d1) (t2tb903 s) t))
  (and (mem (set1 (tuple2 (tuple2 a1 d1) b2)) x
  (infix_plmngt b2 (tuple2 a1 d1) (t2tb903 s) t)) (infix_eqeq24
  (tb2t903 (dom b2 (tuple2 a1 d1) x)) s))))))

;; mem_total_function_set
  (assert
  (forall ((b2 ty))
  (forall ((s (set (set (tuple21 b d)))) (t uni) (x uni))
  (= (mem (set1 (tuple2 (set1 (tuple2 b1 d1)) b2)) x
  (infix_mnmngt b2 (set1 (tuple2 b1 d1)) (t2tb906 s) t))
  (and (mem (set1 (tuple2 (set1 (tuple2 b1 d1)) b2)) x
  (infix_plmngt b2 (set1 (tuple2 b1 d1)) (t2tb906 s) t)) (infix_eqeq28
  (tb2t906 (dom b2 (set1 (tuple2 b1 d1)) x)) s))))))

;; mem_total_function_set
  (assert
  (forall ((b2 ty))
  (forall ((s (set (tuple21 b d))) (t uni) (x uni))
  (= (mem (set1 (tuple2 (tuple2 b1 d1) b2)) x
  (infix_mnmngt b2 (tuple2 b1 d1) (t2tb687 s) t))
  (and (mem (set1 (tuple2 (tuple2 b1 d1) b2)) x
  (infix_plmngt b2 (tuple2 b1 d1) (t2tb687 s) t)) (infix_eqeq22
  (tb2t687 (dom b2 (tuple2 b1 d1) x)) s))))))

;; mem_total_function_set
  (assert
  (forall ((b2 ty))
  (forall ((s (set d)) (t uni) (x uni))
  (= (mem (set1 (tuple2 d1 b2)) x (infix_mnmngt b2 d1 (t2tb690 s) t))
  (and (mem (set1 (tuple2 d1 b2)) x (infix_plmngt b2 d1 (t2tb690 s) t))
  (infix_eqeq13 (tb2t690 (dom b2 d1 x)) s))))))

;; mem_total_function_set
  (assert
  (forall ((b2 ty))
  (forall ((s (set (tuple21 a (tuple21 b c)))) (t uni) (x uni))
  (= (mem (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) b2)) x
  (infix_mnmngt b2 (tuple2 a1 (tuple2 b1 c1)) (t2tb261 s) t))
  (and (mem (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) b2)) x
  (infix_plmngt b2 (tuple2 a1 (tuple2 b1 c1)) (t2tb261 s) t)) (infix_eqeq20
  (tb2t261 (dom b2 (tuple2 a1 (tuple2 b1 c1)) x)) s))))))

;; mem_total_function_set
  (assert
  (forall ((b2 ty))
  (forall ((s (set (set (tuple21 a c)))) (t uni) (x uni))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 c1)) b2)) x
  (infix_mnmngt b2 (set1 (tuple2 a1 c1)) (t2tb128 s) t))
  (and (mem (set1 (tuple2 (set1 (tuple2 a1 c1)) b2)) x
  (infix_plmngt b2 (set1 (tuple2 a1 c1)) (t2tb128 s) t)) (infix_eqeq19
  (tb2t128 (dom b2 (set1 (tuple2 a1 c1)) x)) s))))))

;; mem_total_function_set
  (assert
  (forall ((b2 ty))
  (forall ((s (set (tuple21 a c))) (t uni) (x uni))
  (= (mem (set1 (tuple2 (tuple2 a1 c1) b2)) x
  (infix_mnmngt b2 (tuple2 a1 c1) (t2tb129 s) t))
  (and (mem (set1 (tuple2 (tuple2 a1 c1) b2)) x
  (infix_plmngt b2 (tuple2 a1 c1) (t2tb129 s) t)) (infix_eqeq9
  (tb2t129 (dom b2 (tuple2 a1 c1) x)) s))))))

;; mem_total_function_set
  (assert
  (forall ((s (set c)) (t (set e)) (x (set (tuple21 c e))))
  (= (mem47 x (tb2t3854 (infix_mnmngt e1 c1 (t2tb132 s) (t2tb2947 t))))
  (and (mem47 x (tb2t3854 (infix_plmngt e1 c1 (t2tb132 s) (t2tb2947 t))))
  (infix_eqeq7 (tb2t132 (dom e1 c1 (t2tb3478 x))) s)))))

;; mem_total_function_set
  (assert
  (forall ((b2 ty))
  (forall ((s (set c)) (t uni) (x uni))
  (= (mem (set1 (tuple2 c1 b2)) x (infix_mnmngt b2 c1 (t2tb132 s) t))
  (and (mem (set1 (tuple2 c1 b2)) x (infix_plmngt b2 c1 (t2tb132 s) t))
  (infix_eqeq7 (tb2t132 (dom b2 c1 x)) s))))))

;; mem_total_function_set
  (assert
  (forall ((b2 ty))
  (forall ((s (set (set (tuple21 a b)))) (t uni) (x uni))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 b1)) b2)) x
  (infix_mnmngt b2 (set1 (tuple2 a1 b1)) (t2tb10 s) t))
  (and (mem (set1 (tuple2 (set1 (tuple2 a1 b1)) b2)) x
  (infix_plmngt b2 (set1 (tuple2 a1 b1)) (t2tb10 s) t)) (infix_eqeq5
  (tb2t10 (dom b2 (set1 (tuple2 a1 b1)) x)) s))))))

;; mem_total_function_set
  (assert
  (forall ((b2 ty))
  (forall ((s (set (tuple21 a b))) (t uni) (x uni))
  (= (mem (set1 (tuple2 (tuple2 a1 b1) b2)) x
  (infix_mnmngt b2 (tuple2 a1 b1) (t2tb11 s) t))
  (and (mem (set1 (tuple2 (tuple2 a1 b1) b2)) x
  (infix_plmngt b2 (tuple2 a1 b1) (t2tb11 s) t)) (infix_eqeq4
  (tb2t11 (dom b2 (tuple2 a1 b1) x)) s))))))

;; mem_total_function_set
  (assert
  (forall ((s (set b)) (t (set d)) (x (set (tuple21 b d))))
  (= (mem33 x (tb2t906 (infix_mnmngt d1 b1 (t2tb12 s) (t2tb690 t))))
  (and (mem33 x (tb2t906 (infix_plmngt d1 b1 (t2tb12 s) (t2tb690 t))))
  (infix_eqeq3 (tb2t12 (dom d1 b1 (t2tb687 x))) s)))))

;; mem_total_function_set
  (assert
  (forall ((b2 ty))
  (forall ((s (set b)) (t uni) (x uni))
  (= (mem (set1 (tuple2 b1 b2)) x (infix_mnmngt b2 b1 (t2tb12 s) t))
  (and (mem (set1 (tuple2 b1 b2)) x (infix_plmngt b2 b1 (t2tb12 s) t))
  (infix_eqeq3 (tb2t12 (dom b2 b1 x)) s))))))

;; mem_total_function_set
  (assert
  (forall ((s (set a)) (t (set c)) (x (set (tuple21 a c))))
  (= (mem11 x (tb2t128 (infix_mnmngt c1 a1 (t2tb1 s) (t2tb132 t))))
  (and (mem11 x (tb2t128 (infix_plmngt c1 a1 (t2tb1 s) (t2tb132 t))))
  (infix_eqeq1 (tb2t1 (dom c1 a1 (t2tb129 x))) s)))))

;; mem_total_function_set
  (assert
  (forall ((s (set a)) (t (set b)) (x (set (tuple21 a b))))
  (= (mem4 x (tb2t10 (infix_mnmngt b1 a1 (t2tb1 s) (t2tb12 t))))
  (and (mem4 x (tb2t10 (infix_plmngt b1 a1 (t2tb1 s) (t2tb12 t))))
  (infix_eqeq1 (tb2t1 (dom b1 a1 (t2tb11 x))) s)))))

;; mem_total_function_set
  (assert
  (forall ((b2 ty))
  (forall ((s (set a)) (t uni) (x uni))
  (= (mem (set1 (tuple2 a1 b2)) x (infix_mnmngt b2 a1 (t2tb1 s) t))
  (and (mem (set1 (tuple2 a1 b2)) x (infix_plmngt b2 a1 (t2tb1 s) t))
  (infix_eqeq1 (tb2t1 (dom b2 a1 x)) s))))))

;; mem_total_function_set
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (x uni))
  (= (mem (set1 (tuple2 a2 b2)) x (infix_mnmngt b2 a2 s t))
  (and (mem (set1 (tuple2 a2 b2)) x (infix_plmngt b2 a2 s t)) (infix_eqeq a2
  (dom b2 a2 x) s))))))

(declare-fun infix_gtplgt (ty ty uni uni) uni)

;; infix >+>_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (set1 (tuple2 a2 b2)))
  (infix_gtplgt b2 a2 x x1)))))

;; mem_partial_injection_set
  (assert
  (forall ((s (set e)) (t (set c)) (x (set (tuple21 e c))))
  (= (mem (set1 (tuple2 e1 c1)) (t2tb3326 x)
  (infix_gtplgt c1 e1 (t2tb2947 s) (t2tb132 t)))
  (and (mem (set1 (tuple2 e1 c1)) (t2tb3326 x)
  (infix_plmngt c1 e1 (t2tb2947 s) (t2tb132 t))) (mem47
  (tb2t3478 (inverse c1 e1 (t2tb3326 x)))
  (tb2t3854 (infix_plmngt e1 c1 (t2tb132 t) (t2tb2947 s))))))))

;; mem_partial_injection_set
  (assert
  (forall ((s (set d)) (t (set b)) (x (set (tuple21 d b))))
  (= (mem (set1 (tuple2 d1 b1)) (t2tb835 x)
  (infix_gtplgt b1 d1 (t2tb690 s) (t2tb12 t)))
  (and (mem (set1 (tuple2 d1 b1)) (t2tb835 x)
  (infix_plmngt b1 d1 (t2tb690 s) (t2tb12 t))) (mem33
  (tb2t687 (inverse b1 d1 (t2tb835 x)))
  (tb2t906 (infix_plmngt d1 b1 (t2tb12 t) (t2tb690 s))))))))

;; mem_partial_injection_set
  (assert
  (forall ((s (set c)) (t (set e)) (x (set (tuple21 c e))))
  (= (mem47 x (tb2t3854 (infix_gtplgt e1 c1 (t2tb132 s) (t2tb2947 t))))
  (and (mem47 x (tb2t3854 (infix_plmngt e1 c1 (t2tb132 s) (t2tb2947 t))))
  (mem (set1 (tuple2 e1 c1)) (inverse e1 c1 (t2tb3478 x))
  (infix_plmngt c1 e1 (t2tb2947 t) (t2tb132 s)))))))

;; mem_partial_injection_set
  (assert
  (forall ((s (set c)) (t (set a)) (x (set (tuple21 c a))))
  (= (mem (set1 (tuple2 c1 a1)) (t2tb224 x)
  (infix_gtplgt a1 c1 (t2tb132 s) (t2tb1 t)))
  (and (mem (set1 (tuple2 c1 a1)) (t2tb224 x)
  (infix_plmngt a1 c1 (t2tb132 s) (t2tb1 t))) (mem11
  (tb2t129 (inverse a1 c1 (t2tb224 x)))
  (tb2t128 (infix_plmngt c1 a1 (t2tb1 t) (t2tb132 s))))))))

;; mem_partial_injection_set
  (assert
  (forall ((s (set b)) (t (set d)) (x (set (tuple21 b d))))
  (= (mem33 x (tb2t906 (infix_gtplgt d1 b1 (t2tb12 s) (t2tb690 t))))
  (and (mem33 x (tb2t906 (infix_plmngt d1 b1 (t2tb12 s) (t2tb690 t)))) (mem
  (set1 (tuple2 d1 b1)) (inverse d1 b1 (t2tb687 x))
  (infix_plmngt b1 d1 (t2tb690 t) (t2tb12 s)))))))

;; mem_partial_injection_set
  (assert
  (forall ((s (set b)) (t (set a)) (x (set (tuple21 b a))))
  (= (mem (set1 (tuple2 b1 a1)) (t2tb37 x)
  (infix_gtplgt a1 b1 (t2tb12 s) (t2tb1 t)))
  (and (mem (set1 (tuple2 b1 a1)) (t2tb37 x)
  (infix_plmngt a1 b1 (t2tb12 s) (t2tb1 t))) (mem4
  (tb2t11 (inverse a1 b1 (t2tb37 x)))
  (tb2t10 (infix_plmngt b1 a1 (t2tb1 t) (t2tb12 s))))))))

;; mem_partial_injection_set
  (assert
  (forall ((s (set a)) (t (set c)) (x (set (tuple21 a c))))
  (= (mem11 x (tb2t128 (infix_gtplgt c1 a1 (t2tb1 s) (t2tb132 t))))
  (and (mem11 x (tb2t128 (infix_plmngt c1 a1 (t2tb1 s) (t2tb132 t)))) (mem
  (set1 (tuple2 c1 a1)) (inverse c1 a1 (t2tb129 x))
  (infix_plmngt a1 c1 (t2tb132 t) (t2tb1 s)))))))

;; mem_partial_injection_set
  (assert
  (forall ((s (set a)) (t (set b)) (x (set (tuple21 a b))))
  (= (mem4 x (tb2t10 (infix_gtplgt b1 a1 (t2tb1 s) (t2tb12 t))))
  (and (mem4 x (tb2t10 (infix_plmngt b1 a1 (t2tb1 s) (t2tb12 t)))) (mem
  (set1 (tuple2 b1 a1)) (inverse b1 a1 (t2tb11 x))
  (infix_plmngt a1 b1 (t2tb12 t) (t2tb1 s)))))))

;; mem_partial_injection_set
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (x uni))
  (= (mem (set1 (tuple2 a2 b2)) x (infix_gtplgt b2 a2 s t))
  (and (mem (set1 (tuple2 a2 b2)) x (infix_plmngt b2 a2 s t)) (mem
  (set1 (tuple2 b2 a2)) (inverse b2 a2 x) (infix_plmngt a2 b2 t s)))))))

(declare-fun infix_gtmngt (ty ty uni uni) uni)

;; infix >->_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (set1 (tuple2 a2 b2)))
  (infix_gtmngt b2 a2 x x1)))))

;; mem_total_injection_set
  (assert
  (forall ((s (set c)) (t (set e)) (x (set (tuple21 c e))))
  (= (mem47 x (tb2t3854 (infix_gtmngt e1 c1 (t2tb132 s) (t2tb2947 t))))
  (and (mem47 x (tb2t3854 (infix_gtplgt e1 c1 (t2tb132 s) (t2tb2947 t))))
  (mem47 x (tb2t3854 (infix_mnmngt e1 c1 (t2tb132 s) (t2tb2947 t))))))))

;; mem_total_injection_set
  (assert
  (forall ((s (set b)) (t (set d)) (x (set (tuple21 b d))))
  (= (mem33 x (tb2t906 (infix_gtmngt d1 b1 (t2tb12 s) (t2tb690 t))))
  (and (mem33 x (tb2t906 (infix_gtplgt d1 b1 (t2tb12 s) (t2tb690 t)))) (mem33
  x (tb2t906 (infix_mnmngt d1 b1 (t2tb12 s) (t2tb690 t))))))))

;; mem_total_injection_set
  (assert
  (forall ((s (set a)) (t (set c)) (x (set (tuple21 a c))))
  (= (mem11 x (tb2t128 (infix_gtmngt c1 a1 (t2tb1 s) (t2tb132 t))))
  (and (mem11 x (tb2t128 (infix_gtplgt c1 a1 (t2tb1 s) (t2tb132 t)))) (mem11
  x (tb2t128 (infix_mnmngt c1 a1 (t2tb1 s) (t2tb132 t))))))))

;; mem_total_injection_set
  (assert
  (forall ((s (set a)) (t (set b)) (x (set (tuple21 a b))))
  (= (mem4 x (tb2t10 (infix_gtmngt b1 a1 (t2tb1 s) (t2tb12 t))))
  (and (mem4 x (tb2t10 (infix_gtplgt b1 a1 (t2tb1 s) (t2tb12 t)))) (mem4 x
  (tb2t10 (infix_mnmngt b1 a1 (t2tb1 s) (t2tb12 t))))))))

;; mem_total_injection_set
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (x uni))
  (= (mem (set1 (tuple2 a2 b2)) x (infix_gtmngt b2 a2 s t))
  (and (mem (set1 (tuple2 a2 b2)) x (infix_gtplgt b2 a2 s t)) (mem
  (set1 (tuple2 a2 b2)) x (infix_mnmngt b2 a2 s t)))))))

(declare-fun infix_plmngtgt (ty ty uni uni) uni)

;; infix +->>_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (set1 (tuple2 a2 b2)))
  (infix_plmngtgt b2 a2 x x1)))))

;; mem_partial_surjection_set
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set (tuple21 (tuple21 b c) (tuple21 d e)))) (x uni))
  (= (mem (set1 (tuple2 a2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)))) x
  (infix_plmngtgt (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) a2 s (t2tb4102 t)))
  (and (mem (set1 (tuple2 a2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)))) x
  (infix_plmngt (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) a2 s (t2tb4102 t)))
  (infix_eqeq42 (tb2t4102 (ran (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) a2 x))
  t))))))

;; mem_partial_surjection_set
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set (tuple21 a (tuple21 d e)))) (x uni))
  (= (mem (set1 (tuple2 a2 (tuple2 a1 (tuple2 d1 e1)))) x
  (infix_plmngtgt (tuple2 a1 (tuple2 d1 e1)) a2 s (t2tb4103 t)))
  (and (mem (set1 (tuple2 a2 (tuple2 a1 (tuple2 d1 e1)))) x
  (infix_plmngt (tuple2 a1 (tuple2 d1 e1)) a2 s (t2tb4103 t))) (infix_eqeq41
  (tb2t4103 (ran (tuple2 a1 (tuple2 d1 e1)) a2 x)) t))))))

;; mem_partial_surjection_set
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set (set (tuple21 c e)))) (x uni))
  (= (mem (set1 (tuple2 a2 (set1 (tuple2 c1 e1)))) x
  (infix_plmngtgt (set1 (tuple2 c1 e1)) a2 s (t2tb3854 t)))
  (and (mem (set1 (tuple2 a2 (set1 (tuple2 c1 e1)))) x
  (infix_plmngt (set1 (tuple2 c1 e1)) a2 s (t2tb3854 t))) (infix_eqeq40
  (tb2t3854 (ran (set1 (tuple2 c1 e1)) a2 x)) t))))))

;; mem_partial_surjection_set
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set (tuple21 c e))) (x uni))
  (= (mem (set1 (tuple2 a2 (tuple2 c1 e1))) x
  (infix_plmngtgt (tuple2 c1 e1) a2 s (t2tb3478 t)))
  (and (mem (set1 (tuple2 a2 (tuple2 c1 e1))) x
  (infix_plmngt (tuple2 c1 e1) a2 s (t2tb3478 t))) (infix_eqeq39
  (tb2t3478 (ran (tuple2 c1 e1) a2 x)) t))))))

;; mem_partial_surjection_set
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set (tuple21 a e))) (x uni))
  (= (mem (set1 (tuple2 a2 (tuple2 a1 e1))) x
  (infix_plmngtgt (tuple2 a1 e1) a2 s (t2tb2943 t)))
  (and (mem (set1 (tuple2 a2 (tuple2 a1 e1))) x
  (infix_plmngt (tuple2 a1 e1) a2 s (t2tb2943 t))) (infix_eqeq35
  (tb2t2943 (ran (tuple2 a1 e1) a2 x)) t))))))

;; mem_partial_surjection_set
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set e)) (x uni))
  (= (mem (set1 (tuple2 a2 e1)) x (infix_plmngtgt e1 a2 s (t2tb2947 t)))
  (and (mem (set1 (tuple2 a2 e1)) x (infix_plmngt e1 a2 s (t2tb2947 t)))
  (infix_eqeq29 (tb2t2947 (ran e1 a2 x)) t))))))

;; mem_partial_surjection_set
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set (tuple21 a d))) (x uni))
  (= (mem (set1 (tuple2 a2 (tuple2 a1 d1))) x
  (infix_plmngtgt (tuple2 a1 d1) a2 s (t2tb903 t)))
  (and (mem (set1 (tuple2 a2 (tuple2 a1 d1))) x
  (infix_plmngt (tuple2 a1 d1) a2 s (t2tb903 t))) (infix_eqeq24
  (tb2t903 (ran (tuple2 a1 d1) a2 x)) t))))))

;; mem_partial_surjection_set
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set (set (tuple21 b d)))) (x uni))
  (= (mem (set1 (tuple2 a2 (set1 (tuple2 b1 d1)))) x
  (infix_plmngtgt (set1 (tuple2 b1 d1)) a2 s (t2tb906 t)))
  (and (mem (set1 (tuple2 a2 (set1 (tuple2 b1 d1)))) x
  (infix_plmngt (set1 (tuple2 b1 d1)) a2 s (t2tb906 t))) (infix_eqeq28
  (tb2t906 (ran (set1 (tuple2 b1 d1)) a2 x)) t))))))

;; mem_partial_surjection_set
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set (tuple21 b d))) (x uni))
  (= (mem (set1 (tuple2 a2 (tuple2 b1 d1))) x
  (infix_plmngtgt (tuple2 b1 d1) a2 s (t2tb687 t)))
  (and (mem (set1 (tuple2 a2 (tuple2 b1 d1))) x
  (infix_plmngt (tuple2 b1 d1) a2 s (t2tb687 t))) (infix_eqeq22
  (tb2t687 (ran (tuple2 b1 d1) a2 x)) t))))))

;; mem_partial_surjection_set
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set d)) (x uni))
  (= (mem (set1 (tuple2 a2 d1)) x (infix_plmngtgt d1 a2 s (t2tb690 t)))
  (and (mem (set1 (tuple2 a2 d1)) x (infix_plmngt d1 a2 s (t2tb690 t)))
  (infix_eqeq13 (tb2t690 (ran d1 a2 x)) t))))))

;; mem_partial_surjection_set
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set (tuple21 a (tuple21 b c)))) (x uni))
  (= (mem (set1 (tuple2 a2 (tuple2 a1 (tuple2 b1 c1)))) x
  (infix_plmngtgt (tuple2 a1 (tuple2 b1 c1)) a2 s (t2tb261 t)))
  (and (mem (set1 (tuple2 a2 (tuple2 a1 (tuple2 b1 c1)))) x
  (infix_plmngt (tuple2 a1 (tuple2 b1 c1)) a2 s (t2tb261 t))) (infix_eqeq20
  (tb2t261 (ran (tuple2 a1 (tuple2 b1 c1)) a2 x)) t))))))

;; mem_partial_surjection_set
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set (set (tuple21 a c)))) (x uni))
  (= (mem (set1 (tuple2 a2 (set1 (tuple2 a1 c1)))) x
  (infix_plmngtgt (set1 (tuple2 a1 c1)) a2 s (t2tb128 t)))
  (and (mem (set1 (tuple2 a2 (set1 (tuple2 a1 c1)))) x
  (infix_plmngt (set1 (tuple2 a1 c1)) a2 s (t2tb128 t))) (infix_eqeq19
  (tb2t128 (ran (set1 (tuple2 a1 c1)) a2 x)) t))))))

;; mem_partial_surjection_set
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set (tuple21 a c))) (x uni))
  (= (mem (set1 (tuple2 a2 (tuple2 a1 c1))) x
  (infix_plmngtgt (tuple2 a1 c1) a2 s (t2tb129 t)))
  (and (mem (set1 (tuple2 a2 (tuple2 a1 c1))) x
  (infix_plmngt (tuple2 a1 c1) a2 s (t2tb129 t))) (infix_eqeq9
  (tb2t129 (ran (tuple2 a1 c1) a2 x)) t))))))

;; mem_partial_surjection_set
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set c)) (x uni))
  (= (mem (set1 (tuple2 a2 c1)) x (infix_plmngtgt c1 a2 s (t2tb132 t)))
  (and (mem (set1 (tuple2 a2 c1)) x (infix_plmngt c1 a2 s (t2tb132 t)))
  (infix_eqeq7 (tb2t132 (ran c1 a2 x)) t))))))

;; mem_partial_surjection_set
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set (set (tuple21 a b)))) (x uni))
  (= (mem (set1 (tuple2 a2 (set1 (tuple2 a1 b1)))) x
  (infix_plmngtgt (set1 (tuple2 a1 b1)) a2 s (t2tb10 t)))
  (and (mem (set1 (tuple2 a2 (set1 (tuple2 a1 b1)))) x
  (infix_plmngt (set1 (tuple2 a1 b1)) a2 s (t2tb10 t))) (infix_eqeq5
  (tb2t10 (ran (set1 (tuple2 a1 b1)) a2 x)) t))))))

;; mem_partial_surjection_set
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set (tuple21 a b))) (x uni))
  (= (mem (set1 (tuple2 a2 (tuple2 a1 b1))) x
  (infix_plmngtgt (tuple2 a1 b1) a2 s (t2tb11 t)))
  (and (mem (set1 (tuple2 a2 (tuple2 a1 b1))) x
  (infix_plmngt (tuple2 a1 b1) a2 s (t2tb11 t))) (infix_eqeq4
  (tb2t11 (ran (tuple2 a1 b1) a2 x)) t))))))

;; mem_partial_surjection_set
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set b)) (x uni))
  (= (mem (set1 (tuple2 a2 b1)) x (infix_plmngtgt b1 a2 s (t2tb12 t)))
  (and (mem (set1 (tuple2 a2 b1)) x (infix_plmngt b1 a2 s (t2tb12 t)))
  (infix_eqeq3 (tb2t12 (ran b1 a2 x)) t))))))

;; mem_partial_surjection_set
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set a)) (x uni))
  (= (mem (set1 (tuple2 a2 a1)) x (infix_plmngtgt a1 a2 s (t2tb1 t)))
  (and (mem (set1 (tuple2 a2 a1)) x (infix_plmngt a1 a2 s (t2tb1 t)))
  (infix_eqeq1 (tb2t1 (ran a1 a2 x)) t))))))

;; mem_partial_surjection_set
  (assert
  (forall ((s (set c)) (t (set e)) (x (set (tuple21 c e))))
  (= (mem47 x (tb2t3854 (infix_plmngtgt e1 c1 (t2tb132 s) (t2tb2947 t))))
  (and (mem47 x (tb2t3854 (infix_plmngt e1 c1 (t2tb132 s) (t2tb2947 t))))
  (infix_eqeq29 (tb2t2947 (ran e1 c1 (t2tb3478 x))) t)))))

;; mem_partial_surjection_set
  (assert
  (forall ((s (set b)) (t (set d)) (x (set (tuple21 b d))))
  (= (mem33 x (tb2t906 (infix_plmngtgt d1 b1 (t2tb12 s) (t2tb690 t))))
  (and (mem33 x (tb2t906 (infix_plmngt d1 b1 (t2tb12 s) (t2tb690 t))))
  (infix_eqeq13 (tb2t690 (ran d1 b1 (t2tb687 x))) t)))))

;; mem_partial_surjection_set
  (assert
  (forall ((s (set a)) (t (set c)) (x (set (tuple21 a c))))
  (= (mem11 x (tb2t128 (infix_plmngtgt c1 a1 (t2tb1 s) (t2tb132 t))))
  (and (mem11 x (tb2t128 (infix_plmngt c1 a1 (t2tb1 s) (t2tb132 t))))
  (infix_eqeq7 (tb2t132 (ran c1 a1 (t2tb129 x))) t)))))

;; mem_partial_surjection_set
  (assert
  (forall ((s (set a)) (t (set b)) (x (set (tuple21 a b))))
  (= (mem4 x (tb2t10 (infix_plmngtgt b1 a1 (t2tb1 s) (t2tb12 t))))
  (and (mem4 x (tb2t10 (infix_plmngt b1 a1 (t2tb1 s) (t2tb12 t))))
  (infix_eqeq3 (tb2t12 (ran b1 a1 (t2tb11 x))) t)))))

;; mem_partial_surjection_set
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (x uni))
  (= (mem (set1 (tuple2 a2 b2)) x (infix_plmngtgt b2 a2 s t))
  (and (mem (set1 (tuple2 a2 b2)) x (infix_plmngt b2 a2 s t)) (infix_eqeq b2
  (ran b2 a2 x) t))))))

(declare-fun infix_mnmngtgt (ty ty uni uni) uni)

;; infix -->>_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (set1 (tuple2 a2 b2)))
  (infix_mnmngtgt b2 a2 x x1)))))

;; mem_total_surjection_set
  (assert
  (forall ((s (set c)) (t (set e)) (x (set (tuple21 c e))))
  (= (mem47 x (tb2t3854 (infix_mnmngtgt e1 c1 (t2tb132 s) (t2tb2947 t))))
  (and (mem47 x (tb2t3854 (infix_plmngtgt e1 c1 (t2tb132 s) (t2tb2947 t))))
  (mem47 x (tb2t3854 (infix_mnmngt e1 c1 (t2tb132 s) (t2tb2947 t))))))))

;; mem_total_surjection_set
  (assert
  (forall ((s (set b)) (t (set d)) (x (set (tuple21 b d))))
  (= (mem33 x (tb2t906 (infix_mnmngtgt d1 b1 (t2tb12 s) (t2tb690 t))))
  (and (mem33 x (tb2t906 (infix_plmngtgt d1 b1 (t2tb12 s) (t2tb690 t))))
  (mem33 x (tb2t906 (infix_mnmngt d1 b1 (t2tb12 s) (t2tb690 t))))))))

;; mem_total_surjection_set
  (assert
  (forall ((s (set a)) (t (set c)) (x (set (tuple21 a c))))
  (= (mem11 x (tb2t128 (infix_mnmngtgt c1 a1 (t2tb1 s) (t2tb132 t))))
  (and (mem11 x (tb2t128 (infix_plmngtgt c1 a1 (t2tb1 s) (t2tb132 t))))
  (mem11 x (tb2t128 (infix_mnmngt c1 a1 (t2tb1 s) (t2tb132 t))))))))

;; mem_total_surjection_set
  (assert
  (forall ((s (set a)) (t (set b)) (x (set (tuple21 a b))))
  (= (mem4 x (tb2t10 (infix_mnmngtgt b1 a1 (t2tb1 s) (t2tb12 t))))
  (and (mem4 x (tb2t10 (infix_plmngtgt b1 a1 (t2tb1 s) (t2tb12 t)))) (mem4 x
  (tb2t10 (infix_mnmngt b1 a1 (t2tb1 s) (t2tb12 t))))))))

;; mem_total_surjection_set
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (x uni))
  (= (mem (set1 (tuple2 a2 b2)) x (infix_mnmngtgt b2 a2 s t))
  (and (mem (set1 (tuple2 a2 b2)) x (infix_plmngtgt b2 a2 s t)) (mem
  (set1 (tuple2 a2 b2)) x (infix_mnmngt b2 a2 s t)))))))

(declare-fun infix_gtplgtgt (ty ty uni uni) uni)

;; infix >+>>_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (set1 (tuple2 a2 b2)))
  (infix_gtplgtgt b2 a2 x x1)))))

;; mem_partial_bijection_set
  (assert
  (forall ((s (set c)) (t (set e)) (x (set (tuple21 c e))))
  (= (mem47 x (tb2t3854 (infix_gtplgtgt e1 c1 (t2tb132 s) (t2tb2947 t))))
  (and (mem47 x (tb2t3854 (infix_gtplgt e1 c1 (t2tb132 s) (t2tb2947 t))))
  (mem47 x (tb2t3854 (infix_plmngtgt e1 c1 (t2tb132 s) (t2tb2947 t))))))))

;; mem_partial_bijection_set
  (assert
  (forall ((s (set b)) (t (set d)) (x (set (tuple21 b d))))
  (= (mem33 x (tb2t906 (infix_gtplgtgt d1 b1 (t2tb12 s) (t2tb690 t))))
  (and (mem33 x (tb2t906 (infix_gtplgt d1 b1 (t2tb12 s) (t2tb690 t)))) (mem33
  x (tb2t906 (infix_plmngtgt d1 b1 (t2tb12 s) (t2tb690 t))))))))

;; mem_partial_bijection_set
  (assert
  (forall ((s (set a)) (t (set c)) (x (set (tuple21 a c))))
  (= (mem11 x (tb2t128 (infix_gtplgtgt c1 a1 (t2tb1 s) (t2tb132 t))))
  (and (mem11 x (tb2t128 (infix_gtplgt c1 a1 (t2tb1 s) (t2tb132 t)))) (mem11
  x (tb2t128 (infix_plmngtgt c1 a1 (t2tb1 s) (t2tb132 t))))))))

;; mem_partial_bijection_set
  (assert
  (forall ((s (set a)) (t (set b)) (x (set (tuple21 a b))))
  (= (mem4 x (tb2t10 (infix_gtplgtgt b1 a1 (t2tb1 s) (t2tb12 t))))
  (and (mem4 x (tb2t10 (infix_gtplgt b1 a1 (t2tb1 s) (t2tb12 t)))) (mem4 x
  (tb2t10 (infix_plmngtgt b1 a1 (t2tb1 s) (t2tb12 t))))))))

;; mem_partial_bijection_set
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (x uni))
  (= (mem (set1 (tuple2 a2 b2)) x (infix_gtplgtgt b2 a2 s t))
  (and (mem (set1 (tuple2 a2 b2)) x (infix_gtplgt b2 a2 s t)) (mem
  (set1 (tuple2 a2 b2)) x (infix_plmngtgt b2 a2 s t)))))))

(declare-fun infix_gtmngtgt (ty ty uni uni) uni)

;; infix >->>_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (set1 (tuple2 a2 b2)))
  (infix_gtmngtgt b2 a2 x x1)))))

;; mem_total_bijection_set
  (assert
  (forall ((s (set c)) (t (set e)) (x (set (tuple21 c e))))
  (= (mem47 x (tb2t3854 (infix_gtmngtgt e1 c1 (t2tb132 s) (t2tb2947 t))))
  (and (mem47 x (tb2t3854 (infix_gtmngt e1 c1 (t2tb132 s) (t2tb2947 t))))
  (mem47 x (tb2t3854 (infix_mnmngtgt e1 c1 (t2tb132 s) (t2tb2947 t))))))))

;; mem_total_bijection_set
  (assert
  (forall ((s (set b)) (t (set d)) (x (set (tuple21 b d))))
  (= (mem33 x (tb2t906 (infix_gtmngtgt d1 b1 (t2tb12 s) (t2tb690 t))))
  (and (mem33 x (tb2t906 (infix_gtmngt d1 b1 (t2tb12 s) (t2tb690 t)))) (mem33
  x (tb2t906 (infix_mnmngtgt d1 b1 (t2tb12 s) (t2tb690 t))))))))

;; mem_total_bijection_set
  (assert
  (forall ((s (set a)) (t (set c)) (x (set (tuple21 a c))))
  (= (mem11 x (tb2t128 (infix_gtmngtgt c1 a1 (t2tb1 s) (t2tb132 t))))
  (and (mem11 x (tb2t128 (infix_gtmngt c1 a1 (t2tb1 s) (t2tb132 t)))) (mem11
  x (tb2t128 (infix_mnmngtgt c1 a1 (t2tb1 s) (t2tb132 t))))))))

;; mem_total_bijection_set
  (assert
  (forall ((s (set a)) (t (set b)) (x (set (tuple21 a b))))
  (= (mem4 x (tb2t10 (infix_gtmngtgt b1 a1 (t2tb1 s) (t2tb12 t))))
  (and (mem4 x (tb2t10 (infix_gtmngt b1 a1 (t2tb1 s) (t2tb12 t)))) (mem4 x
  (tb2t10 (infix_mnmngtgt b1 a1 (t2tb1 s) (t2tb12 t))))))))

;; mem_total_bijection_set
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (x uni))
  (= (mem (set1 (tuple2 a2 b2)) x (infix_gtmngtgt b2 a2 s t))
  (and (mem (set1 (tuple2 a2 b2)) x (infix_gtmngt b2 a2 s t)) (mem
  (set1 (tuple2 a2 b2)) x (infix_mnmngtgt b2 a2 s t)))))))

(declare-fun apply (ty ty uni uni) uni)

;; apply_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort b2 (apply b2 a2 x x1)))))

;; apply_def0
  (assert
  (forall ((b2 ty))
  (forall ((f2 uni) (s (set (tuple21 (tuple21 b c) (tuple21 d e)))) (t uni)
  (a2 (tuple21 (tuple21 b c) (tuple21 d e))))
  (=>
  (and (mem (set1 (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) b2)) f2
  (infix_plmngt b2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) (t2tb4102 s) t))
  (mem49 a2 (tb2t4102 (dom b2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) f2))))
  (mem (tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) b2)
  (Tuple2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) b2 (t2tb4104 a2)
  (apply b2 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1)) f2 (t2tb4104 a2))) f2)))))

;; apply_def0
  (assert
  (forall ((b2 ty))
  (forall ((f2 uni) (s (set (tuple21 a (tuple21 d e)))) (t uni)
  (a2 (tuple21 a (tuple21 d e))))
  (=>
  (and (mem (set1 (tuple2 (tuple2 a1 (tuple2 d1 e1)) b2)) f2
  (infix_plmngt b2 (tuple2 a1 (tuple2 d1 e1)) (t2tb4103 s) t)) (mem48 a2
  (tb2t4103 (dom b2 (tuple2 a1 (tuple2 d1 e1)) f2)))) (mem
  (tuple2 (tuple2 a1 (tuple2 d1 e1)) b2)
  (Tuple2 (tuple2 a1 (tuple2 d1 e1)) b2 (t2tb4105 a2)
  (apply b2 (tuple2 a1 (tuple2 d1 e1)) f2 (t2tb4105 a2))) f2)))))

;; apply_def0
  (assert
  (forall ((b2 ty))
  (forall ((f2 uni) (s (set (set (tuple21 c e)))) (t uni) (a2 (set (tuple21 c
  e))))
  (=>
  (and (mem (set1 (tuple2 (set1 (tuple2 c1 e1)) b2)) f2
  (infix_plmngt b2 (set1 (tuple2 c1 e1)) (t2tb3854 s) t)) (mem47 a2
  (tb2t3854 (dom b2 (set1 (tuple2 c1 e1)) f2)))) (mem
  (tuple2 (set1 (tuple2 c1 e1)) b2)
  (Tuple2 (set1 (tuple2 c1 e1)) b2 (t2tb3478 a2)
  (apply b2 (set1 (tuple2 c1 e1)) f2 (t2tb3478 a2))) f2)))))

;; apply_def0
  (assert
  (forall ((b2 ty))
  (forall ((f2 uni) (s (set (tuple21 c e))) (t uni) (a2 (tuple21 c e)))
  (=>
  (and (mem (set1 (tuple2 (tuple2 c1 e1) b2)) f2
  (infix_plmngt b2 (tuple2 c1 e1) (t2tb3478 s) t)) (mem46 a2
  (tb2t3478 (dom b2 (tuple2 c1 e1) f2)))) (mem (tuple2 (tuple2 c1 e1) b2)
  (Tuple2 (tuple2 c1 e1) b2 (t2tb3479 a2)
  (apply b2 (tuple2 c1 e1) f2 (t2tb3479 a2))) f2)))))

;; apply_def0
  (assert
  (forall ((b2 ty))
  (forall ((f2 uni) (s (set (tuple21 a e))) (t uni) (a2 (tuple21 a e)))
  (=>
  (and (mem (set1 (tuple2 (tuple2 a1 e1) b2)) f2
  (infix_plmngt b2 (tuple2 a1 e1) (t2tb2943 s) t)) (mem44 a2
  (tb2t2943 (dom b2 (tuple2 a1 e1) f2)))) (mem (tuple2 (tuple2 a1 e1) b2)
  (Tuple2 (tuple2 a1 e1) b2 (t2tb2949 a2)
  (apply b2 (tuple2 a1 e1) f2 (t2tb2949 a2))) f2)))))

;; apply_def0
  (assert
  (forall ((b2 ty))
  (forall ((f2 uni) (s (set e)) (t uni) (a2 e))
  (=>
  (and (mem (set1 (tuple2 e1 b2)) f2 (infix_plmngt b2 e1 (t2tb2947 s) t))
  (mem36 a2 (tb2t2947 (dom b2 e1 f2)))) (mem (tuple2 e1 b2)
  (Tuple2 e1 b2 (t2tb2955 a2) (apply b2 e1 f2 (t2tb2955 a2))) f2)))))

;; apply_def0
  (assert
  (forall ((b2 ty))
  (forall ((f2 uni) (s (set (tuple21 a d))) (t uni) (a2 (tuple21 a d)))
  (=>
  (and (mem (set1 (tuple2 (tuple2 a1 d1) b2)) f2
  (infix_plmngt b2 (tuple2 a1 d1) (t2tb903 s) t)) (mem32 a2
  (tb2t903 (dom b2 (tuple2 a1 d1) f2)))) (mem (tuple2 (tuple2 a1 d1) b2)
  (Tuple2 (tuple2 a1 d1) b2 (t2tb904 a2)
  (apply b2 (tuple2 a1 d1) f2 (t2tb904 a2))) f2)))))

;; apply_def0
  (assert
  (forall ((b2 ty))
  (forall ((f2 uni) (s (set (set (tuple21 b d)))) (t uni) (a2 (set (tuple21 b
  d))))
  (=>
  (and (mem (set1 (tuple2 (set1 (tuple2 b1 d1)) b2)) f2
  (infix_plmngt b2 (set1 (tuple2 b1 d1)) (t2tb906 s) t)) (mem33 a2
  (tb2t906 (dom b2 (set1 (tuple2 b1 d1)) f2)))) (mem
  (tuple2 (set1 (tuple2 b1 d1)) b2)
  (Tuple2 (set1 (tuple2 b1 d1)) b2 (t2tb687 a2)
  (apply b2 (set1 (tuple2 b1 d1)) f2 (t2tb687 a2))) f2)))))

;; apply_def0
  (assert
  (forall ((b2 ty))
  (forall ((f2 uni) (s (set (tuple21 b d))) (t uni) (a2 (tuple21 b d)))
  (=>
  (and (mem (set1 (tuple2 (tuple2 b1 d1) b2)) f2
  (infix_plmngt b2 (tuple2 b1 d1) (t2tb687 s) t)) (mem23 a2
  (tb2t687 (dom b2 (tuple2 b1 d1) f2)))) (mem (tuple2 (tuple2 b1 d1) b2)
  (Tuple2 (tuple2 b1 d1) b2 (t2tb692 a2)
  (apply b2 (tuple2 b1 d1) f2 (t2tb692 a2))) f2)))))

;; apply_def0
  (assert
  (forall ((b2 ty))
  (forall ((f2 uni) (s (set d)) (t uni) (a2 d))
  (=>
  (and (mem (set1 (tuple2 d1 b2)) f2 (infix_plmngt b2 d1 (t2tb690 s) t))
  (mem20 a2 (tb2t690 (dom b2 d1 f2)))) (mem (tuple2 d1 b2)
  (Tuple2 d1 b2 (t2tb694 a2) (apply b2 d1 f2 (t2tb694 a2))) f2)))))

;; apply_def0
  (assert
  (forall ((b2 ty))
  (forall ((f2 uni) (s (set (tuple21 a (tuple21 b c)))) (t uni)
  (a2 (tuple21 a (tuple21 b c))))
  (=>
  (and (mem (set1 (tuple2 (tuple2 a1 (tuple2 b1 c1)) b2)) f2
  (infix_plmngt b2 (tuple2 a1 (tuple2 b1 c1)) (t2tb261 s) t)) (mem14 a2
  (tb2t261 (dom b2 (tuple2 a1 (tuple2 b1 c1)) f2)))) (mem
  (tuple2 (tuple2 a1 (tuple2 b1 c1)) b2)
  (Tuple2 (tuple2 a1 (tuple2 b1 c1)) b2 (t2tb260 a2)
  (apply b2 (tuple2 a1 (tuple2 b1 c1)) f2 (t2tb260 a2))) f2)))))

;; apply_def0
  (assert
  (forall ((b2 ty))
  (forall ((f2 uni) (s (set (set (tuple21 a c)))) (t uni) (a2 (set (tuple21 a
  c))))
  (=>
  (and (mem (set1 (tuple2 (set1 (tuple2 a1 c1)) b2)) f2
  (infix_plmngt b2 (set1 (tuple2 a1 c1)) (t2tb128 s) t)) (mem11 a2
  (tb2t128 (dom b2 (set1 (tuple2 a1 c1)) f2)))) (mem
  (tuple2 (set1 (tuple2 a1 c1)) b2)
  (Tuple2 (set1 (tuple2 a1 c1)) b2 (t2tb129 a2)
  (apply b2 (set1 (tuple2 a1 c1)) f2 (t2tb129 a2))) f2)))))

;; apply_def0
  (assert
  (forall ((b2 ty))
  (forall ((f2 uni) (s (set (tuple21 a c))) (t uni) (a2 (tuple21 a c)))
  (=>
  (and (mem (set1 (tuple2 (tuple2 a1 c1) b2)) f2
  (infix_plmngt b2 (tuple2 a1 c1) (t2tb129 s) t)) (mem10 a2
  (tb2t129 (dom b2 (tuple2 a1 c1) f2)))) (mem (tuple2 (tuple2 a1 c1) b2)
  (Tuple2 (tuple2 a1 c1) b2 (t2tb133 a2)
  (apply b2 (tuple2 a1 c1) f2 (t2tb133 a2))) f2)))))

;; apply_def0
  (assert
  (forall ((f2 (set (tuple21 (tuple21 b c) (tuple21 d e))))
  (s (set (tuple21 b c))) (t (set (tuple21 d e))) (a2 (tuple21 b c)))
  (=>
  (and (mem (set1 (tuple2 (tuple2 b1 c1) (tuple2 d1 e1))) (t2tb4102 f2)
  (infix_plmngt (tuple2 d1 e1) (tuple2 b1 c1) (t2tb131 s) (t2tb3456 t))) (mem
  (tuple2 b1 c1) (t2tb134 a2)
  (dom (tuple2 d1 e1) (tuple2 b1 c1) (t2tb4102 f2)))) (mem49
  (tb2t4104
  (Tuple2 (tuple2 b1 c1) (tuple2 d1 e1) (t2tb134 a2)
  (apply (tuple2 d1 e1) (tuple2 b1 c1) (t2tb4102 f2) (t2tb134 a2)))) f2))))

;; apply_def0
  (assert
  (forall ((f2 (set (tuple21 c e))) (s (set c)) (t (set e)) (a2 c))
  (=>
  (and (mem47 f2 (tb2t3854 (infix_plmngt e1 c1 (t2tb132 s) (t2tb2947 t))))
  (mem7 a2 (tb2t132 (dom e1 c1 (t2tb3478 f2))))) (mem46
  (tb2t3479
  (Tuple2 c1 e1 (t2tb135 a2) (apply e1 c1 (t2tb3478 f2) (t2tb135 a2)))) f2))))

;; apply_def0
  (assert
  (forall ((b2 ty))
  (forall ((f2 uni) (s (set c)) (t uni) (a2 c))
  (=>
  (and (mem (set1 (tuple2 c1 b2)) f2 (infix_plmngt b2 c1 (t2tb132 s) t))
  (mem7 a2 (tb2t132 (dom b2 c1 f2)))) (mem (tuple2 c1 b2)
  (Tuple2 c1 b2 (t2tb135 a2) (apply b2 c1 f2 (t2tb135 a2))) f2)))))

;; apply_def0
  (assert
  (forall ((b2 ty))
  (forall ((f2 uni) (s (set (set (tuple21 a b)))) (t uni) (a2 (set (tuple21 a
  b))))
  (=>
  (and (mem (set1 (tuple2 (set1 (tuple2 a1 b1)) b2)) f2
  (infix_plmngt b2 (set1 (tuple2 a1 b1)) (t2tb10 s) t)) (mem4 a2
  (tb2t10 (dom b2 (set1 (tuple2 a1 b1)) f2)))) (mem
  (tuple2 (set1 (tuple2 a1 b1)) b2)
  (Tuple2 (set1 (tuple2 a1 b1)) b2 (t2tb11 a2)
  (apply b2 (set1 (tuple2 a1 b1)) f2 (t2tb11 a2))) f2)))))

;; apply_def0
  (assert
  (forall ((b2 ty))
  (forall ((f2 uni) (s (set (tuple21 a b))) (t uni) (a2 (tuple21 a b)))
  (=>
  (and (mem (set1 (tuple2 (tuple2 a1 b1) b2)) f2
  (infix_plmngt b2 (tuple2 a1 b1) (t2tb11 s) t)) (mem3 a2
  (tb2t11 (dom b2 (tuple2 a1 b1) f2)))) (mem (tuple2 (tuple2 a1 b1) b2)
  (Tuple2 (tuple2 a1 b1) b2 (t2tb13 a2)
  (apply b2 (tuple2 a1 b1) f2 (t2tb13 a2))) f2)))))

;; apply_def0
  (assert
  (forall ((f2 (set (tuple21 b d))) (s (set b)) (t (set d)) (a2 b))
  (=>
  (and (mem33 f2 (tb2t906 (infix_plmngt d1 b1 (t2tb12 s) (t2tb690 t)))) (mem2
  a2 (tb2t12 (dom d1 b1 (t2tb687 f2))))) (mem23
  (tb2t692 (Tuple2 b1 d1 (t2tb14 a2) (apply d1 b1 (t2tb687 f2) (t2tb14 a2))))
  f2))))

;; apply_def0
  (assert
  (forall ((b2 ty))
  (forall ((f2 uni) (s (set b)) (t uni) (a2 b))
  (=>
  (and (mem (set1 (tuple2 b1 b2)) f2 (infix_plmngt b2 b1 (t2tb12 s) t)) (mem2
  a2 (tb2t12 (dom b2 b1 f2)))) (mem (tuple2 b1 b2)
  (Tuple2 b1 b2 (t2tb14 a2) (apply b2 b1 f2 (t2tb14 a2))) f2)))))

;; apply_def0
  (assert
  (forall ((f2 (set (tuple21 a (tuple21 d e)))) (s (set a))
  (t (set (tuple21 d e))) (a2 a))
  (=>
  (and (mem (set1 (tuple2 a1 (tuple2 d1 e1))) (t2tb4103 f2)
  (infix_plmngt (tuple2 d1 e1) a1 (t2tb1 s) (t2tb3456 t))) (mem1 a2
  (tb2t1 (dom (tuple2 d1 e1) a1 (t2tb4103 f2))))) (mem48
  (tb2t4105
  (Tuple2 a1 (tuple2 d1 e1) (t2tb2 a2)
  (apply (tuple2 d1 e1) a1 (t2tb4103 f2) (t2tb2 a2)))) f2))))

;; apply_def0
  (assert
  (forall ((f2 (set (tuple21 a e))) (s (set a)) (t (set e)) (a2 a))
  (=>
  (and (mem (set1 (tuple2 a1 e1)) (t2tb2943 f2)
  (infix_plmngt e1 a1 (t2tb1 s) (t2tb2947 t))) (mem1 a2
  (tb2t1 (dom e1 a1 (t2tb2943 f2))))) (mem44
  (tb2t2949 (Tuple2 a1 e1 (t2tb2 a2) (apply e1 a1 (t2tb2943 f2) (t2tb2 a2))))
  f2))))

;; apply_def0
  (assert
  (forall ((f2 (set (tuple21 a d))) (s (set a)) (t (set d)) (a2 a))
  (=>
  (and (mem (set1 (tuple2 a1 d1)) (t2tb903 f2)
  (infix_plmngt d1 a1 (t2tb1 s) (t2tb690 t))) (mem1 a2
  (tb2t1 (dom d1 a1 (t2tb903 f2))))) (mem32
  (tb2t904 (Tuple2 a1 d1 (t2tb2 a2) (apply d1 a1 (t2tb903 f2) (t2tb2 a2))))
  f2))))

;; apply_def0
  (assert
  (forall ((f2 (set (tuple21 a (tuple21 b c)))) (s (set a))
  (t (set (tuple21 b c))) (a2 a))
  (=>
  (and (mem (set1 (tuple2 a1 (tuple2 b1 c1))) (t2tb261 f2)
  (infix_plmngt (tuple2 b1 c1) a1 (t2tb1 s) (t2tb131 t))) (mem1 a2
  (tb2t1 (dom (tuple2 b1 c1) a1 (t2tb261 f2))))) (mem14
  (tb2t260
  (Tuple2 a1 (tuple2 b1 c1) (t2tb2 a2)
  (apply (tuple2 b1 c1) a1 (t2tb261 f2) (t2tb2 a2)))) f2))))

;; apply_def0
  (assert
  (forall ((f2 (set (tuple21 a c))) (s (set a)) (t (set c)) (a2 a))
  (=>
  (and (mem11 f2 (tb2t128 (infix_plmngt c1 a1 (t2tb1 s) (t2tb132 t)))) (mem1
  a2 (tb2t1 (dom c1 a1 (t2tb129 f2))))) (mem10
  (tb2t133 (Tuple2 a1 c1 (t2tb2 a2) (apply c1 a1 (t2tb129 f2) (t2tb2 a2))))
  f2))))

;; apply_def0
  (assert
  (forall ((f2 (set (tuple21 a b))) (s (set a)) (t (set b)) (a2 a))
  (=>
  (and (mem4 f2 (tb2t10 (infix_plmngt b1 a1 (t2tb1 s) (t2tb12 t)))) (mem1 a2
  (tb2t1 (dom b1 a1 (t2tb11 f2))))) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 a2) (apply b1 a1 (t2tb11 f2) (t2tb2 a2))))
  f2))))

;; apply_def0
  (assert
  (forall ((b2 ty))
  (forall ((f2 uni) (s (set a)) (t uni) (a2 a))
  (=>
  (and (mem (set1 (tuple2 a1 b2)) f2 (infix_plmngt b2 a1 (t2tb1 s) t)) (mem1
  a2 (tb2t1 (dom b2 a1 f2)))) (mem (tuple2 a1 b2)
  (Tuple2 a1 b2 (t2tb2 a2) (apply b2 a1 f2 (t2tb2 a2))) f2)))))

;; apply_def0
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((f2 uni) (s uni) (t uni) (a3 uni))
  (=>
  (and (mem (set1 (tuple2 a2 b2)) f2 (infix_plmngt b2 a2 s t)) (mem a2 a3
  (dom b2 a2 f2))) (mem (tuple2 a2 b2) (Tuple2 a2 b2 a3 (apply b2 a2 f2 a3))
  f2)))))

(assert
;; equal_semicolon_35
 ;; File "lemmes_bbook.why", line 1806, characters 7-25
  (not
  (forall ((s (set a)) (t (set b)) (u (set c)) (v (set d)) (w (set e))
  (p (set (tuple21 a b))) (q (set (tuple21 a c))) (h (set (tuple21 b d)))
  (k (set (tuple21 c e))))
  (=>
  (and (mem4 p (relation1 s t))
  (and (mem11 q (relation3 s u))
  (and (mem33 h (relation9 t v)) (mem47 k (relation12 u w))))) (infix_eqeq41
  (semicolon23 (direct_product1 p q) (parallel_product5 h k))
  (direct_product4 (semicolon16 p h) (semicolon22 q k)))))))
(check-sat)
