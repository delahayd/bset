(set-logic AUFBVDTLIRA)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
(declare-sort uni 0)

(declare-sort ty 0)

(declare-fun sort (ty uni) Bool)

(declare-fun witness (ty) uni)

;; witness_sort
  (assert (forall ((a2 ty)) (sort a2 (witness a2))))

(declare-fun int () ty)

(declare-fun real () ty)

(declare-sort set 1)

(declare-fun set1 (ty) ty)

(declare-sort d 0)

(declare-fun d1 () ty)

(declare-sort c 0)

(declare-fun c1 () ty)

(declare-sort b 0)

(declare-fun b1 () ty)

(declare-sort a 0)

(declare-fun a1 () ty)

(declare-sort tuple21 2)

(declare-fun tuple2 (ty ty) ty)

(declare-fun mem (ty uni uni) Bool)

(declare-fun mem1 (a (set a)) Bool)

(declare-fun mem2 (b (set b)) Bool)

(declare-fun mem3 ((tuple21 a b) (set (tuple21 a b))) Bool)

(declare-fun mem7 (c (set c)) Bool)

(declare-fun mem10 ((tuple21 a c) (set (tuple21 a c))) Bool)

(declare-fun mem11 ((set (tuple21 a c)) (set (set (tuple21 a c)))) Bool)

(declare-fun mem20 (d (set d)) Bool)

(declare-fun mem23 ((tuple21 b d) (set (tuple21 b d))) Bool)

(declare-fun mem33 ((set (tuple21 b d)) (set (set (tuple21 b d)))) Bool)

(declare-fun mem50 ((tuple21 (tuple21 a b) (tuple21 c d))
  (set (tuple21 (tuple21 a b) (tuple21 c d)))) Bool)

(declare-fun infix_eqeq (ty uni uni) Bool)

(declare-fun infix_eqeq1 ((set a) (set a)) Bool)

(declare-fun infix_eqeq3 ((set b) (set b)) Bool)

(declare-fun infix_eqeq4 ((set (tuple21 a b)) (set (tuple21 a b))) Bool)

(declare-fun infix_eqeq7 ((set c) (set c)) Bool)

(declare-fun infix_eqeq9 ((set (tuple21 a c)) (set (tuple21 a c))) Bool)

(declare-fun infix_eqeq19 ((set (set (tuple21 a c))) (set (set (tuple21 a
  c)))) Bool)

(declare-fun infix_eqeq13 ((set d) (set d)) Bool)

(declare-fun infix_eqeq22 ((set (tuple21 b d)) (set (tuple21 b d))) Bool)

(declare-fun infix_eqeq43 ((set (tuple21 (tuple21 a b) (tuple21 c d)))
  (set (tuple21 (tuple21 a b) (tuple21 c d)))) Bool)

(declare-fun infix_eqeq28 ((set (set (tuple21 b d))) (set (set (tuple21 b
  d)))) Bool)

;; infix ==_def
  (assert
  (forall ((s (set (tuple21 (tuple21 a b) (tuple21 c d))))
  (t (set (tuple21 (tuple21 a b) (tuple21 c d)))))
  (= (infix_eqeq43 s t)
  (forall ((x (tuple21 (tuple21 a b) (tuple21 c d))))
  (= (mem50 x s) (mem50 x t))))))

;; infix ==_def
  (assert
  (forall ((s (set (set (tuple21 b d)))) (t (set (set (tuple21 b d)))))
  (= (infix_eqeq28 s t)
  (forall ((x (set (tuple21 b d)))) (= (mem33 x s) (mem33 x t))))))

;; infix ==_def
  (assert
  (forall ((s (set (tuple21 b d))) (t (set (tuple21 b d))))
  (= (infix_eqeq22 s t)
  (forall ((x (tuple21 b d))) (= (mem23 x s) (mem23 x t))))))

;; infix ==_def
  (assert
  (forall ((s (set d)) (t (set d)))
  (= (infix_eqeq13 s t) (forall ((x d)) (= (mem20 x s) (mem20 x t))))))

;; infix ==_def
  (assert
  (forall ((s (set (set (tuple21 a c)))) (t (set (set (tuple21 a c)))))
  (= (infix_eqeq19 s t)
  (forall ((x (set (tuple21 a c)))) (= (mem11 x s) (mem11 x t))))))

;; infix ==_def
  (assert
  (forall ((s (set (tuple21 a c))) (t (set (tuple21 a c))))
  (= (infix_eqeq9 s t)
  (forall ((x (tuple21 a c))) (= (mem10 x s) (mem10 x t))))))

;; infix ==_def
  (assert
  (forall ((s (set c)) (t (set c)))
  (= (infix_eqeq7 s t) (forall ((x c)) (= (mem7 x s) (mem7 x t))))))

;; infix ==_def
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (tuple21 a b))))
  (= (infix_eqeq4 s t)
  (forall ((x (tuple21 a b))) (= (mem3 x s) (mem3 x t))))))

;; infix ==_def
  (assert
  (forall ((s (set b)) (t (set b)))
  (= (infix_eqeq3 s t) (forall ((x b)) (= (mem2 x s) (mem2 x t))))))

;; infix ==_def
  (assert
  (forall ((s (set a)) (t (set a)))
  (= (infix_eqeq1 s t) (forall ((x a)) (= (mem1 x s) (mem1 x t))))))

;; infix ==_def
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t uni))
  (and
  (=> (infix_eqeq a2 s t) (forall ((x uni)) (= (mem a2 x s) (mem a2 x t))))
  (=> (forall ((x uni)) (=> (sort a2 x) (= (mem a2 x s) (mem a2 x t))))
  (infix_eqeq a2 s t))))))

(declare-fun power (ty uni) uni)

;; power_sort
  (assert
  (forall ((a2 ty)) (forall ((x uni)) (sort (set1 (set1 a2)) (power a2 x)))))

(declare-fun non_empty_power (ty uni) uni)

;; non_empty_power_sort
  (assert
  (forall ((a2 ty))
  (forall ((x uni)) (sort (set1 (set1 a2)) (non_empty_power a2 x)))))

(declare-fun subset1 (ty uni uni) Bool)

(declare-fun subset2 ((set a) (set a)) Bool)

(declare-fun subset5 ((set b) (set b)) Bool)

(declare-fun subset6 ((set (tuple21 a b)) (set (tuple21 a b))) Bool)

(declare-fun subset9 ((set c) (set c)) Bool)

(declare-fun subset11 ((set (tuple21 a c)) (set (tuple21 a c))) Bool)

(declare-fun subset13 ((set (set (tuple21 a c))) (set (set (tuple21 a
  c)))) Bool)

(declare-fun subset17 ((set d) (set d)) Bool)

(declare-fun subset25 ((set (tuple21 b d)) (set (tuple21 b d))) Bool)

(declare-fun subset26 ((set (tuple21 (tuple21 a b) (tuple21 c d)))
  (set (tuple21 (tuple21 a b) (tuple21 c d)))) Bool)

(declare-fun subset27 ((set (set (tuple21 b d))) (set (set (tuple21 b
  d)))) Bool)

(declare-fun t2tb3883 ((set (set (tuple21 (tuple21 a b) (tuple21 c
  d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a b) (tuple21 c d)))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)))) (t2tb3883 x))))

(declare-fun tb2t3883 (uni) (set (set (tuple21 (tuple21 a b) (tuple21 c
  d)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a b) (tuple21 c d))))))
  (! (= (tb2t3883 (t2tb3883 i)) i) :pattern ((t2tb3883 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)))) j)
     (= (t2tb3883 (tb2t3883 j)) j)) :pattern ((t2tb3883 (tb2t3883 j))) )))

(declare-fun t2tb879 ((set (tuple21 (tuple21 a b) (tuple21 c d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) (tuple21 c d))))) (sort
  (set1 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1))) (t2tb879 x))))

(declare-fun tb2t879 (uni) (set (tuple21 (tuple21 a b) (tuple21 c d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a b) (tuple21 c d)))))
  (! (= (tb2t879 (t2tb879 i)) i) :pattern ((t2tb879 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1))) j)
     (= (t2tb879 (tb2t879 j)) j)) :pattern ((t2tb879 (tb2t879 j))) )))

;; subset_def
  (assert
  (forall ((s (set (tuple21 (tuple21 a b) (tuple21 c d))))
  (t (set (tuple21 (tuple21 a b) (tuple21 c d)))))
  (= (subset26 s t) (mem (set1 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)))
  (t2tb879 s) (power (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) (t2tb879 t))))))

(declare-fun t2tb4585 ((set (set (set (tuple21 b d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (set (tuple21 b d)))))) (sort
  (set1 (set1 (set1 (tuple2 b1 d1)))) (t2tb4585 x))))

(declare-fun tb2t4585 (uni) (set (set (set (tuple21 b d)))))

;; BridgeL
  (assert
  (forall ((i (set (set (set (tuple21 b d))))))
  (! (= (tb2t4585 (t2tb4585 i)) i) :pattern ((t2tb4585 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (set1 (tuple2 b1 d1)))) j)
     (= (t2tb4585 (tb2t4585 j)) j)) :pattern ((t2tb4585 (tb2t4585 j))) )))

(declare-fun t2tb906 ((set (set (tuple21 b d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 b d))))) (sort (set1 (set1 (tuple2 b1 d1)))
  (t2tb906 x))))

(declare-fun tb2t906 (uni) (set (set (tuple21 b d))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 b d)))))
  (! (= (tb2t906 (t2tb906 i)) i) :pattern ((t2tb906 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 b1 d1))) j) (= (t2tb906 (tb2t906 j)) j)) :pattern (
  (t2tb906 (tb2t906 j))) )))

;; subset_def
  (assert
  (forall ((s (set (set (tuple21 b d)))) (t (set (set (tuple21 b d)))))
  (= (subset27 s t) (mem (set1 (set1 (tuple2 b1 d1))) (t2tb906 s)
  (power (set1 (tuple2 b1 d1)) (t2tb906 t))))))

(declare-fun t2tb687 ((set (tuple21 b d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 b d)))) (sort (set1 (tuple2 b1 d1)) (t2tb687 x))))

(declare-fun tb2t687 (uni) (set (tuple21 b d)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 b d))))
  (! (= (tb2t687 (t2tb687 i)) i) :pattern ((t2tb687 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 b1 d1)) j) (= (t2tb687 (tb2t687 j)) j)) :pattern (
  (t2tb687 (tb2t687 j))) )))

;; subset_def
  (assert
  (forall ((s (set (tuple21 b d))) (t (set (tuple21 b d))))
  (= (subset25 s t) (mem33 s (tb2t906 (power (tuple2 b1 d1) (t2tb687 t)))))))

(declare-fun t2tb690 ((set d)) uni)

;; t2tb_sort
  (assert (forall ((x (set d))) (sort (set1 d1) (t2tb690 x))))

(declare-fun tb2t690 (uni) (set d))

;; BridgeL
  (assert
  (forall ((i (set d)))
  (! (= (tb2t690 (t2tb690 i)) i) :pattern ((t2tb690 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 d1) j) (= (t2tb690 (tb2t690 j)) j)) :pattern ((t2tb690
                                                                   (tb2t690
                                                                   j))) )))

(declare-fun t2tb908 ((set (set d))) uni)

;; t2tb_sort
  (assert (forall ((x (set (set d)))) (sort (set1 (set1 d1)) (t2tb908 x))))

(declare-fun tb2t908 (uni) (set (set d)))

;; BridgeL
  (assert
  (forall ((i (set (set d))))
  (! (= (tb2t908 (t2tb908 i)) i) :pattern ((t2tb908 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 d1)) j) (= (t2tb908 (tb2t908 j)) j)) :pattern (
  (t2tb908 (tb2t908 j))) )))

;; subset_def
  (assert
  (forall ((s (set d)) (t (set d)))
  (= (subset17 s t) (mem (set1 d1) (t2tb690 s) (power d1 (t2tb690 t))))))

(declare-fun t2tb4586 ((set (set (set (tuple21 a c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (set (tuple21 a c)))))) (sort
  (set1 (set1 (set1 (tuple2 a1 c1)))) (t2tb4586 x))))

(declare-fun tb2t4586 (uni) (set (set (set (tuple21 a c)))))

;; BridgeL
  (assert
  (forall ((i (set (set (set (tuple21 a c))))))
  (! (= (tb2t4586 (t2tb4586 i)) i) :pattern ((t2tb4586 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (set1 (tuple2 a1 c1)))) j)
     (= (t2tb4586 (tb2t4586 j)) j)) :pattern ((t2tb4586 (tb2t4586 j))) )))

(declare-fun t2tb128 ((set (set (tuple21 a c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 a c))))) (sort (set1 (set1 (tuple2 a1 c1)))
  (t2tb128 x))))

(declare-fun tb2t128 (uni) (set (set (tuple21 a c))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 a c)))))
  (! (= (tb2t128 (t2tb128 i)) i) :pattern ((t2tb128 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 a1 c1))) j) (= (t2tb128 (tb2t128 j)) j)) :pattern (
  (t2tb128 (tb2t128 j))) )))

;; subset_def
  (assert
  (forall ((s (set (set (tuple21 a c)))) (t (set (set (tuple21 a c)))))
  (= (subset13 s t) (mem (set1 (set1 (tuple2 a1 c1))) (t2tb128 s)
  (power (set1 (tuple2 a1 c1)) (t2tb128 t))))))

(declare-fun t2tb129 ((set (tuple21 a c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a c)))) (sort (set1 (tuple2 a1 c1)) (t2tb129 x))))

(declare-fun tb2t129 (uni) (set (tuple21 a c)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a c))))
  (! (= (tb2t129 (t2tb129 i)) i) :pattern ((t2tb129 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 c1)) j) (= (t2tb129 (tb2t129 j)) j)) :pattern (
  (t2tb129 (tb2t129 j))) )))

;; subset_def
  (assert
  (forall ((s (set (tuple21 a c))) (t (set (tuple21 a c))))
  (= (subset11 s t) (mem11 s (tb2t128 (power (tuple2 a1 c1) (t2tb129 t)))))))

(declare-fun t2tb132 ((set c)) uni)

;; t2tb_sort
  (assert (forall ((x (set c))) (sort (set1 c1) (t2tb132 x))))

(declare-fun tb2t132 (uni) (set c))

;; BridgeL
  (assert
  (forall ((i (set c)))
  (! (= (tb2t132 (t2tb132 i)) i) :pattern ((t2tb132 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 c1) j) (= (t2tb132 (tb2t132 j)) j)) :pattern ((t2tb132
                                                                   (tb2t132
                                                                   j))) )))

(declare-fun t2tb264 ((set (set c))) uni)

;; t2tb_sort
  (assert (forall ((x (set (set c)))) (sort (set1 (set1 c1)) (t2tb264 x))))

(declare-fun tb2t264 (uni) (set (set c)))

;; BridgeL
  (assert
  (forall ((i (set (set c))))
  (! (= (tb2t264 (t2tb264 i)) i) :pattern ((t2tb264 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 c1)) j) (= (t2tb264 (tb2t264 j)) j)) :pattern (
  (t2tb264 (tb2t264 j))) )))

;; subset_def
  (assert
  (forall ((s (set c)) (t (set c)))
  (= (subset9 s t) (mem (set1 c1) (t2tb132 s) (power c1 (t2tb132 t))))))

(declare-fun t2tb10 ((set (set (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 a b))))) (sort (set1 (set1 (tuple2 a1 b1)))
  (t2tb10 x))))

(declare-fun tb2t10 (uni) (set (set (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 a b)))))
  (! (= (tb2t10 (t2tb10 i)) i) :pattern ((t2tb10 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 a1 b1))) j) (= (t2tb10 (tb2t10 j)) j)) :pattern (
  (t2tb10 (tb2t10 j))) )))

(declare-fun t2tb11 ((set (tuple21 a b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a b)))) (sort (set1 (tuple2 a1 b1)) (t2tb11 x))))

(declare-fun tb2t11 (uni) (set (tuple21 a b)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a b))))
  (! (= (tb2t11 (t2tb11 i)) i) :pattern ((t2tb11 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 b1)) j) (= (t2tb11 (tb2t11 j)) j)) :pattern (
  (t2tb11 (tb2t11 j))) )))

;; subset_def
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (tuple21 a b))))
  (= (subset6 s t) (mem (set1 (tuple2 a1 b1)) (t2tb11 s)
  (power (tuple2 a1 b1) (t2tb11 t))))))

(declare-fun t2tb12 ((set b)) uni)

;; t2tb_sort
  (assert (forall ((x (set b))) (sort (set1 b1) (t2tb12 x))))

(declare-fun tb2t12 (uni) (set b))

;; BridgeL
  (assert
  (forall ((i (set b))) (! (= (tb2t12 (t2tb12 i)) i) :pattern ((t2tb12 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 b1) j) (= (t2tb12 (tb2t12 j)) j)) :pattern ((t2tb12
                                                                 (tb2t12 j))) )))

(declare-fun t2tb44 ((set (set b))) uni)

;; t2tb_sort
  (assert (forall ((x (set (set b)))) (sort (set1 (set1 b1)) (t2tb44 x))))

(declare-fun tb2t44 (uni) (set (set b)))

;; BridgeL
  (assert
  (forall ((i (set (set b))))
  (! (= (tb2t44 (t2tb44 i)) i) :pattern ((t2tb44 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 b1)) j) (= (t2tb44 (tb2t44 j)) j)) :pattern (
  (t2tb44 (tb2t44 j))) )))

;; subset_def
  (assert
  (forall ((s (set b)) (t (set b)))
  (= (subset5 s t) (mem (set1 b1) (t2tb12 s) (power b1 (t2tb12 t))))))

(declare-fun t2tb ((set (set a))) uni)

;; t2tb_sort
  (assert (forall ((x (set (set a)))) (sort (set1 (set1 a1)) (t2tb x))))

(declare-fun tb2t (uni) (set (set a)))

;; BridgeL
  (assert
  (forall ((i (set (set a)))) (! (= (tb2t (t2tb i)) i) :pattern ((t2tb i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 a1)) j) (= (t2tb (tb2t j)) j)) :pattern ((t2tb
                                                                    (tb2t j))) )))

(declare-fun t2tb1 ((set a)) uni)

;; t2tb_sort
  (assert (forall ((x (set a))) (sort (set1 a1) (t2tb1 x))))

(declare-fun tb2t1 (uni) (set a))

;; BridgeL
  (assert
  (forall ((i (set a))) (! (= (tb2t1 (t2tb1 i)) i) :pattern ((t2tb1 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 a1) j) (= (t2tb1 (tb2t1 j)) j)) :pattern ((t2tb1
                                                               (tb2t1 j))) )))

;; subset_def
  (assert
  (forall ((s (set a)) (t (set a)))
  (= (subset2 s t) (mem (set1 a1) (t2tb1 s) (power a1 (t2tb1 t))))))

;; subset_def
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t uni))
  (= (subset1 a2 s t) (mem (set1 a2) s (power a2 t))))))

(declare-fun subsetnoteq (ty uni uni) Bool)

;; subsetnoteq_def
  (assert
  (forall ((s (set (tuple21 (tuple21 a b) (tuple21 c d))))
  (t (set (tuple21 (tuple21 a b) (tuple21 c d)))))
  (= (subsetnoteq (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) (t2tb879 s)
  (t2tb879 t)) (and (subset26 s t) (not (infix_eqeq43 s t))))))

;; subsetnoteq_def
  (assert
  (forall ((s (set (set (tuple21 b d)))) (t (set (set (tuple21 b d)))))
  (= (subsetnoteq (set1 (tuple2 b1 d1)) (t2tb906 s) (t2tb906 t))
  (and (subset27 s t) (not (infix_eqeq28 s t))))))

;; subsetnoteq_def
  (assert
  (forall ((s (set (tuple21 b d))) (t (set (tuple21 b d))))
  (= (subsetnoteq (tuple2 b1 d1) (t2tb687 s) (t2tb687 t))
  (and (subset25 s t) (not (infix_eqeq22 s t))))))

;; subsetnoteq_def
  (assert
  (forall ((s (set d)) (t (set d)))
  (= (subsetnoteq d1 (t2tb690 s) (t2tb690 t))
  (and (subset17 s t) (not (infix_eqeq13 s t))))))

;; subsetnoteq_def
  (assert
  (forall ((s (set (set (tuple21 a c)))) (t (set (set (tuple21 a c)))))
  (= (subsetnoteq (set1 (tuple2 a1 c1)) (t2tb128 s) (t2tb128 t))
  (and (subset13 s t) (not (infix_eqeq19 s t))))))

;; subsetnoteq_def
  (assert
  (forall ((s (set (tuple21 a c))) (t (set (tuple21 a c))))
  (= (subsetnoteq (tuple2 a1 c1) (t2tb129 s) (t2tb129 t))
  (and (subset11 s t) (not (infix_eqeq9 s t))))))

;; subsetnoteq_def
  (assert
  (forall ((s (set c)) (t (set c)))
  (= (subsetnoteq c1 (t2tb132 s) (t2tb132 t))
  (and (subset9 s t) (not (infix_eqeq7 s t))))))

;; subsetnoteq_def
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (tuple21 a b))))
  (= (subsetnoteq (tuple2 a1 b1) (t2tb11 s) (t2tb11 t))
  (and (subset6 s t) (not (infix_eqeq4 s t))))))

;; subsetnoteq_def
  (assert
  (forall ((s (set b)) (t (set b)))
  (= (subsetnoteq b1 (t2tb12 s) (t2tb12 t))
  (and (subset5 s t) (not (infix_eqeq3 s t))))))

;; subsetnoteq_def
  (assert
  (forall ((s (set a)) (t (set a)))
  (= (subsetnoteq a1 (t2tb1 s) (t2tb1 t))
  (and (subset2 s t) (not (infix_eqeq1 s t))))))

;; subsetnoteq_def
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t uni))
  (= (subsetnoteq a2 s t) (and (subset1 a2 s t) (not (infix_eqeq a2 s t)))))))

(declare-fun empty (ty) uni)

;; empty_sort
  (assert (forall ((a2 ty)) (sort (set1 a2) (empty a2))))

(declare-fun is_empty (ty uni) Bool)

;; is_empty_def
  (assert
  (forall ((s (set (tuple21 (tuple21 a b) (tuple21 c d)))))
  (= (is_empty (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) (t2tb879 s))
  (forall ((x (tuple21 (tuple21 a b) (tuple21 c d)))) (not (mem50 x s))))))

;; is_empty_def
  (assert
  (forall ((s (set (set (tuple21 b d)))))
  (= (is_empty (set1 (tuple2 b1 d1)) (t2tb906 s))
  (forall ((x (set (tuple21 b d)))) (not (mem33 x s))))))

;; is_empty_def
  (assert
  (forall ((s (set (tuple21 b d))))
  (= (is_empty (tuple2 b1 d1) (t2tb687 s))
  (forall ((x (tuple21 b d))) (not (mem23 x s))))))

;; is_empty_def
  (assert
  (forall ((s (set d)))
  (= (is_empty d1 (t2tb690 s)) (forall ((x d)) (not (mem20 x s))))))

;; is_empty_def
  (assert
  (forall ((s (set (set (tuple21 a c)))))
  (= (is_empty (set1 (tuple2 a1 c1)) (t2tb128 s))
  (forall ((x (set (tuple21 a c)))) (not (mem11 x s))))))

;; is_empty_def
  (assert
  (forall ((s (set (tuple21 a c))))
  (= (is_empty (tuple2 a1 c1) (t2tb129 s))
  (forall ((x (tuple21 a c))) (not (mem10 x s))))))

;; is_empty_def
  (assert
  (forall ((s (set c)))
  (= (is_empty c1 (t2tb132 s)) (forall ((x c)) (not (mem7 x s))))))

;; is_empty_def
  (assert
  (forall ((s (set (tuple21 a b))))
  (= (is_empty (tuple2 a1 b1) (t2tb11 s))
  (forall ((x (tuple21 a b))) (not (mem3 x s))))))

;; is_empty_def
  (assert
  (forall ((s (set b)))
  (= (is_empty b1 (t2tb12 s)) (forall ((x b)) (not (mem2 x s))))))

;; is_empty_def
  (assert
  (forall ((s (set a)))
  (= (is_empty a1 (t2tb1 s)) (forall ((x a)) (not (mem1 x s))))))

;; is_empty_def
  (assert
  (forall ((a2 ty))
  (forall ((s uni))
  (and (=> (is_empty a2 s) (forall ((x uni)) (not (mem a2 x s))))
  (=> (forall ((x uni)) (=> (sort a2 x) (not (mem a2 x s)))) (is_empty a2 s))))))

;; empty_def1
  (assert (forall ((a2 ty)) (is_empty a2 (empty a2))))

;; empty
  (assert
  (forall ((x (tuple21 (tuple21 a b) (tuple21 c d))))
  (not (mem50 x (tb2t879 (empty (tuple2 (tuple2 a1 b1) (tuple2 c1 d1))))))))

;; empty
  (assert
  (forall ((x (set (tuple21 b d))))
  (not (mem33 x (tb2t906 (empty (set1 (tuple2 b1 d1))))))))

;; empty
  (assert
  (forall ((x (tuple21 b d)))
  (not (mem23 x (tb2t687 (empty (tuple2 b1 d1)))))))

;; empty
  (assert (forall ((x d)) (not (mem20 x (tb2t690 (empty d1))))))

;; empty
  (assert
  (forall ((x (set (tuple21 a c))))
  (not (mem11 x (tb2t128 (empty (set1 (tuple2 a1 c1))))))))

;; empty
  (assert
  (forall ((x (tuple21 a c)))
  (not (mem10 x (tb2t129 (empty (tuple2 a1 c1)))))))

;; empty
  (assert (forall ((x c)) (not (mem7 x (tb2t132 (empty c1))))))

;; empty
  (assert
  (forall ((x (tuple21 a b))) (not (mem3 x (tb2t11 (empty (tuple2 a1 b1)))))))

;; empty
  (assert (forall ((x b)) (not (mem2 x (tb2t12 (empty b1))))))

;; empty
  (assert (forall ((x a)) (not (mem1 x (tb2t1 (empty a1))))))

;; empty
  (assert (forall ((a2 ty)) (forall ((x uni)) (not (mem a2 x (empty a2))))))

(declare-fun add (ty uni uni) uni)

;; add_sort
  (assert
  (forall ((a2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 a2) (add a2 x x1)))))

(declare-fun t2tb880 ((tuple21 (tuple21 a b) (tuple21 c d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a b) (tuple21 c d)))) (sort
  (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) (t2tb880 x))))

(declare-fun tb2t880 (uni) (tuple21 (tuple21 a b) (tuple21 c d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a b) (tuple21 c d))))
  (! (= (tb2t880 (t2tb880 i)) i) :pattern ((t2tb880 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) j)
     (= (t2tb880 (tb2t880 j)) j)) :pattern ((t2tb880 (tb2t880 j))) )))

;; add_def1
  (assert
  (forall ((x (tuple21 (tuple21 a b) (tuple21 c d))) (y (tuple21 (tuple21 a
  b) (tuple21 c d))))
  (forall ((s (set (tuple21 (tuple21 a b) (tuple21 c d)))))
  (= (mem50 x
  (tb2t879
  (add (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) (t2tb880 y) (t2tb879 s))))
  (or (= x y) (mem50 x s))))))

;; add_def1
  (assert
  (forall ((x (set (tuple21 b d))) (y (set (tuple21 b d))))
  (forall ((s (set (set (tuple21 b d)))))
  (= (mem33 x (tb2t906 (add (set1 (tuple2 b1 d1)) (t2tb687 y) (t2tb906 s))))
  (or (= x y) (mem33 x s))))))

(declare-fun t2tb692 ((tuple21 b d)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 b d))) (sort (tuple2 b1 d1) (t2tb692 x))))

(declare-fun tb2t692 (uni) (tuple21 b d))

;; BridgeL
  (assert
  (forall ((i (tuple21 b d)))
  (! (= (tb2t692 (t2tb692 i)) i) :pattern ((t2tb692 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 b1 d1) j) (= (t2tb692 (tb2t692 j)) j)) :pattern (
  (t2tb692 (tb2t692 j))) )))

;; add_def1
  (assert
  (forall ((x (tuple21 b d)) (y (tuple21 b d)))
  (forall ((s (set (tuple21 b d))))
  (= (mem23 x (tb2t687 (add (tuple2 b1 d1) (t2tb692 y) (t2tb687 s))))
  (or (= x y) (mem23 x s))))))

(declare-fun t2tb694 (d) uni)

;; t2tb_sort
  (assert (forall ((x d)) (sort d1 (t2tb694 x))))

(declare-fun tb2t694 (uni) d)

;; BridgeL
  (assert
  (forall ((i d)) (! (= (tb2t694 (t2tb694 i)) i) :pattern ((t2tb694 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort d1 j) (= (t2tb694 (tb2t694 j)) j)) :pattern ((t2tb694
                                                            (tb2t694 j))) )))

;; add_def1
  (assert
  (forall ((x d) (y d))
  (forall ((s (set d)))
  (= (mem20 x (tb2t690 (add d1 (t2tb694 y) (t2tb690 s))))
  (or (= x y) (mem20 x s))))))

;; add_def1
  (assert
  (forall ((x (set (tuple21 a c))) (y (set (tuple21 a c))))
  (forall ((s (set (set (tuple21 a c)))))
  (= (mem11 x (tb2t128 (add (set1 (tuple2 a1 c1)) (t2tb129 y) (t2tb128 s))))
  (or (= x y) (mem11 x s))))))

(declare-fun t2tb133 ((tuple21 a c)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 a c))) (sort (tuple2 a1 c1) (t2tb133 x))))

(declare-fun tb2t133 (uni) (tuple21 a c))

;; BridgeL
  (assert
  (forall ((i (tuple21 a c)))
  (! (= (tb2t133 (t2tb133 i)) i) :pattern ((t2tb133 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 c1) j) (= (t2tb133 (tb2t133 j)) j)) :pattern (
  (t2tb133 (tb2t133 j))) )))

;; add_def1
  (assert
  (forall ((x (tuple21 a c)) (y (tuple21 a c)))
  (forall ((s (set (tuple21 a c))))
  (= (mem10 x (tb2t129 (add (tuple2 a1 c1) (t2tb133 y) (t2tb129 s))))
  (or (= x y) (mem10 x s))))))

(declare-fun t2tb135 (c) uni)

;; t2tb_sort
  (assert (forall ((x c)) (sort c1 (t2tb135 x))))

(declare-fun tb2t135 (uni) c)

;; BridgeL
  (assert
  (forall ((i c)) (! (= (tb2t135 (t2tb135 i)) i) :pattern ((t2tb135 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort c1 j) (= (t2tb135 (tb2t135 j)) j)) :pattern ((t2tb135
                                                            (tb2t135 j))) )))

;; add_def1
  (assert
  (forall ((x c) (y c))
  (forall ((s (set c)))
  (= (mem7 x (tb2t132 (add c1 (t2tb135 y) (t2tb132 s))))
  (or (= x y) (mem7 x s))))))

(declare-fun t2tb13 ((tuple21 a b)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 a b))) (sort (tuple2 a1 b1) (t2tb13 x))))

(declare-fun tb2t13 (uni) (tuple21 a b))

;; BridgeL
  (assert
  (forall ((i (tuple21 a b)))
  (! (= (tb2t13 (t2tb13 i)) i) :pattern ((t2tb13 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 b1) j) (= (t2tb13 (tb2t13 j)) j)) :pattern (
  (t2tb13 (tb2t13 j))) )))

;; add_def1
  (assert
  (forall ((x (tuple21 a b)) (y (tuple21 a b)))
  (forall ((s (set (tuple21 a b))))
  (= (mem3 x (tb2t11 (add (tuple2 a1 b1) (t2tb13 y) (t2tb11 s))))
  (or (= x y) (mem3 x s))))))

(declare-fun t2tb14 (b) uni)

;; t2tb_sort
  (assert (forall ((x b)) (sort b1 (t2tb14 x))))

(declare-fun tb2t14 (uni) b)

;; BridgeL
  (assert
  (forall ((i b)) (! (= (tb2t14 (t2tb14 i)) i) :pattern ((t2tb14 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort b1 j) (= (t2tb14 (tb2t14 j)) j)) :pattern ((t2tb14 (tb2t14 j))) )))

;; add_def1
  (assert
  (forall ((x b) (y b))
  (forall ((s (set b)))
  (= (mem2 x (tb2t12 (add b1 (t2tb14 y) (t2tb12 s))))
  (or (= x y) (mem2 x s))))))

(declare-fun t2tb2 (a) uni)

;; t2tb_sort
  (assert (forall ((x a)) (sort a1 (t2tb2 x))))

(declare-fun tb2t2 (uni) a)

;; BridgeL
  (assert (forall ((i a)) (! (= (tb2t2 (t2tb2 i)) i) :pattern ((t2tb2 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort a1 j) (= (t2tb2 (tb2t2 j)) j)) :pattern ((t2tb2 (tb2t2 j))) )))

;; add_def1
  (assert
  (forall ((x a) (y a))
  (forall ((s (set a)))
  (= (mem1 x (tb2t1 (add a1 (t2tb2 y) (t2tb1 s)))) (or (= x y) (mem1 x s))))))

;; add_def1
  (assert
  (forall ((a2 ty))
  (forall ((x uni) (y uni))
  (=> (sort a2 x)
  (=> (sort a2 y)
  (forall ((s uni)) (= (mem a2 x (add a2 y s)) (or (= x y) (mem a2 x s)))))))))

(declare-fun singleton (ty uni) uni)

;; singleton_sort
  (assert
  (forall ((a2 ty)) (forall ((x uni)) (sort (set1 a2) (singleton a2 x)))))

;; mem_singleton
  (assert
  (forall ((x (tuple21 (tuple21 a b) (tuple21 c d))) (y (tuple21 (tuple21 a
  b) (tuple21 c d))))
  (= (mem50 x
  (tb2t879 (singleton (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) (t2tb880 y))))
  (= x y))))

;; mem_singleton
  (assert
  (forall ((x (set (tuple21 b d))) (y (set (tuple21 b d))))
  (= (mem33 x (tb2t906 (singleton (set1 (tuple2 b1 d1)) (t2tb687 y))))
  (= x y))))

;; mem_singleton
  (assert
  (forall ((x (tuple21 b d)) (y (tuple21 b d)))
  (= (mem23 x (tb2t687 (singleton (tuple2 b1 d1) (t2tb692 y)))) (= x y))))

;; mem_singleton
  (assert
  (forall ((x d) (y d))
  (= (mem20 x (tb2t690 (singleton d1 (t2tb694 y)))) (= x y))))

;; mem_singleton
  (assert
  (forall ((x (set (tuple21 a c))) (y (set (tuple21 a c))))
  (= (mem11 x (tb2t128 (singleton (set1 (tuple2 a1 c1)) (t2tb129 y))))
  (= x y))))

;; mem_singleton
  (assert
  (forall ((x (tuple21 a c)) (y (tuple21 a c)))
  (= (mem10 x (tb2t129 (singleton (tuple2 a1 c1) (t2tb133 y)))) (= x y))))

;; mem_singleton
  (assert
  (forall ((x c) (y c))
  (= (mem7 x (tb2t132 (singleton c1 (t2tb135 y)))) (= x y))))

;; mem_singleton
  (assert
  (forall ((x (tuple21 a b)) (y (tuple21 a b)))
  (= (mem3 x (tb2t11 (singleton (tuple2 a1 b1) (t2tb13 y)))) (= x y))))

;; mem_singleton
  (assert
  (forall ((x b) (y b))
  (= (mem2 x (tb2t12 (singleton b1 (t2tb14 y)))) (= x y))))

;; mem_singleton
  (assert
  (forall ((x a) (y a))
  (= (mem1 x (tb2t1 (singleton a1 (t2tb2 y)))) (= x y))))

;; mem_singleton
  (assert
  (forall ((a2 ty))
  (forall ((x uni) (y uni))
  (=> (sort a2 x) (=> (sort a2 y) (= (mem a2 x (singleton a2 y)) (= x y)))))))

(declare-fun remove (ty uni uni) uni)

;; remove_sort
  (assert
  (forall ((a2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 a2) (remove a2 x x1)))))

;; remove_def1
  (assert
  (forall ((x (tuple21 (tuple21 a b) (tuple21 c d))) (y (tuple21 (tuple21 a
  b) (tuple21 c d))) (s (set (tuple21 (tuple21 a b) (tuple21 c d)))))
  (= (mem50 x
  (tb2t879
  (remove (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) (t2tb880 y) (t2tb879 s))))
  (and (not (= x y)) (mem50 x s)))))

;; remove_def1
  (assert
  (forall ((x (set (tuple21 b d))) (y (set (tuple21 b d)))
  (s (set (set (tuple21 b d)))))
  (= (mem33 x
  (tb2t906 (remove (set1 (tuple2 b1 d1)) (t2tb687 y) (t2tb906 s))))
  (and (not (= x y)) (mem33 x s)))))

;; remove_def1
  (assert
  (forall ((x (tuple21 b d)) (y (tuple21 b d)) (s (set (tuple21 b d))))
  (= (mem23 x (tb2t687 (remove (tuple2 b1 d1) (t2tb692 y) (t2tb687 s))))
  (and (not (= x y)) (mem23 x s)))))

;; remove_def1
  (assert
  (forall ((x d) (y d) (s (set d)))
  (= (mem20 x (tb2t690 (remove d1 (t2tb694 y) (t2tb690 s))))
  (and (not (= x y)) (mem20 x s)))))

;; remove_def1
  (assert
  (forall ((x (set (tuple21 a c))) (y (set (tuple21 a c)))
  (s (set (set (tuple21 a c)))))
  (= (mem11 x
  (tb2t128 (remove (set1 (tuple2 a1 c1)) (t2tb129 y) (t2tb128 s))))
  (and (not (= x y)) (mem11 x s)))))

;; remove_def1
  (assert
  (forall ((x (tuple21 a c)) (y (tuple21 a c)) (s (set (tuple21 a c))))
  (= (mem10 x (tb2t129 (remove (tuple2 a1 c1) (t2tb133 y) (t2tb129 s))))
  (and (not (= x y)) (mem10 x s)))))

;; remove_def1
  (assert
  (forall ((x c) (y c) (s (set c)))
  (= (mem7 x (tb2t132 (remove c1 (t2tb135 y) (t2tb132 s))))
  (and (not (= x y)) (mem7 x s)))))

;; remove_def1
  (assert
  (forall ((x (tuple21 a b)) (y (tuple21 a b)) (s (set (tuple21 a b))))
  (= (mem3 x (tb2t11 (remove (tuple2 a1 b1) (t2tb13 y) (t2tb11 s))))
  (and (not (= x y)) (mem3 x s)))))

;; remove_def1
  (assert
  (forall ((x b) (y b) (s (set b)))
  (= (mem2 x (tb2t12 (remove b1 (t2tb14 y) (t2tb12 s))))
  (and (not (= x y)) (mem2 x s)))))

;; remove_def1
  (assert
  (forall ((x a) (y a) (s (set a)))
  (= (mem1 x (tb2t1 (remove a1 (t2tb2 y) (t2tb1 s))))
  (and (not (= x y)) (mem1 x s)))))

;; remove_def1
  (assert
  (forall ((a2 ty))
  (forall ((x uni) (y uni) (s uni))
  (=> (sort a2 x)
  (=> (sort a2 y)
  (= (mem a2 x (remove a2 y s)) (and (not (= x y)) (mem a2 x s))))))))

(declare-fun all (ty) uni)

;; all_sort
  (assert (forall ((a2 ty)) (sort (set1 a2) (all a2))))

;; all_def
  (assert
  (forall ((x (tuple21 (tuple21 a b) (tuple21 c d)))) (mem50 x
  (tb2t879 (all (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)))))))

;; all_def
  (assert
  (forall ((x (set (tuple21 b d)))) (mem33 x
  (tb2t906 (all (set1 (tuple2 b1 d1)))))))

;; all_def
  (assert
  (forall ((x (tuple21 b d))) (mem23 x (tb2t687 (all (tuple2 b1 d1))))))

;; all_def
  (assert (forall ((x d)) (mem20 x (tb2t690 (all d1)))))

;; all_def
  (assert
  (forall ((x (set (tuple21 a c)))) (mem11 x
  (tb2t128 (all (set1 (tuple2 a1 c1)))))))

;; all_def
  (assert
  (forall ((x (tuple21 a c))) (mem10 x (tb2t129 (all (tuple2 a1 c1))))))

;; all_def
  (assert (forall ((x c)) (mem7 x (tb2t132 (all c1)))))

;; all_def
  (assert
  (forall ((x (tuple21 a b))) (mem3 x (tb2t11 (all (tuple2 a1 b1))))))

;; all_def
  (assert (forall ((x b)) (mem2 x (tb2t12 (all b1)))))

;; all_def
  (assert (forall ((x a)) (mem1 x (tb2t1 (all a1)))))

;; all_def
  (assert (forall ((a2 ty)) (forall ((x uni)) (mem a2 x (all a2)))))

(declare-fun union1 (ty uni uni) uni)

;; union_sort
  (assert
  (forall ((a2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 a2) (union1 a2 x x1)))))

;; mem_union
  (assert
  (forall ((s (set (tuple21 (tuple21 a b) (tuple21 c d))))
  (t (set (tuple21 (tuple21 a b) (tuple21 c d)))) (x (tuple21 (tuple21 a b)
  (tuple21 c d))))
  (= (mem50 x
  (tb2t879
  (union1 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) (t2tb879 s) (t2tb879 t))))
  (or (mem50 x s) (mem50 x t)))))

;; mem_union
  (assert
  (forall ((s (set (set (tuple21 b d)))) (t (set (set (tuple21 b d))))
  (x (set (tuple21 b d))))
  (= (mem33 x
  (tb2t906 (union1 (set1 (tuple2 b1 d1)) (t2tb906 s) (t2tb906 t))))
  (or (mem33 x s) (mem33 x t)))))

;; mem_union
  (assert
  (forall ((s (set (tuple21 b d))) (t (set (tuple21 b d))) (x (tuple21 b d)))
  (= (mem23 x (tb2t687 (union1 (tuple2 b1 d1) (t2tb687 s) (t2tb687 t))))
  (or (mem23 x s) (mem23 x t)))))

;; mem_union
  (assert
  (forall ((s (set d)) (t (set d)) (x d))
  (= (mem20 x (tb2t690 (union1 d1 (t2tb690 s) (t2tb690 t))))
  (or (mem20 x s) (mem20 x t)))))

;; mem_union
  (assert
  (forall ((s (set (set (tuple21 a c)))) (t (set (set (tuple21 a c))))
  (x (set (tuple21 a c))))
  (= (mem11 x
  (tb2t128 (union1 (set1 (tuple2 a1 c1)) (t2tb128 s) (t2tb128 t))))
  (or (mem11 x s) (mem11 x t)))))

;; mem_union
  (assert
  (forall ((s (set (tuple21 a c))) (t (set (tuple21 a c))) (x (tuple21 a c)))
  (= (mem10 x (tb2t129 (union1 (tuple2 a1 c1) (t2tb129 s) (t2tb129 t))))
  (or (mem10 x s) (mem10 x t)))))

;; mem_union
  (assert
  (forall ((s (set c)) (t (set c)) (x c))
  (= (mem7 x (tb2t132 (union1 c1 (t2tb132 s) (t2tb132 t))))
  (or (mem7 x s) (mem7 x t)))))

;; mem_union
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (tuple21 a b))) (x (tuple21 a b)))
  (= (mem3 x (tb2t11 (union1 (tuple2 a1 b1) (t2tb11 s) (t2tb11 t))))
  (or (mem3 x s) (mem3 x t)))))

;; mem_union
  (assert
  (forall ((s (set b)) (t (set b)) (x b))
  (= (mem2 x (tb2t12 (union1 b1 (t2tb12 s) (t2tb12 t))))
  (or (mem2 x s) (mem2 x t)))))

;; mem_union
  (assert
  (forall ((s (set a)) (t (set a)) (x a))
  (= (mem1 x (tb2t1 (union1 a1 (t2tb1 s) (t2tb1 t))))
  (or (mem1 x s) (mem1 x t)))))

;; mem_union
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t uni) (x uni))
  (= (mem a2 x (union1 a2 s t)) (or (mem a2 x s) (mem a2 x t))))))

(declare-fun inter (ty uni uni) uni)

;; inter_sort
  (assert
  (forall ((a2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 a2) (inter a2 x x1)))))

;; mem_inter
  (assert
  (forall ((s (set (tuple21 (tuple21 a b) (tuple21 c d))))
  (t (set (tuple21 (tuple21 a b) (tuple21 c d)))) (x (tuple21 (tuple21 a b)
  (tuple21 c d))))
  (= (mem50 x
  (tb2t879
  (inter (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) (t2tb879 s) (t2tb879 t))))
  (and (mem50 x s) (mem50 x t)))))

;; mem_inter
  (assert
  (forall ((s (set (set (tuple21 b d)))) (t (set (set (tuple21 b d))))
  (x (set (tuple21 b d))))
  (= (mem33 x
  (tb2t906 (inter (set1 (tuple2 b1 d1)) (t2tb906 s) (t2tb906 t))))
  (and (mem33 x s) (mem33 x t)))))

;; mem_inter
  (assert
  (forall ((s (set (tuple21 b d))) (t (set (tuple21 b d))) (x (tuple21 b d)))
  (= (mem23 x (tb2t687 (inter (tuple2 b1 d1) (t2tb687 s) (t2tb687 t))))
  (and (mem23 x s) (mem23 x t)))))

;; mem_inter
  (assert
  (forall ((s (set d)) (t (set d)) (x d))
  (= (mem20 x (tb2t690 (inter d1 (t2tb690 s) (t2tb690 t))))
  (and (mem20 x s) (mem20 x t)))))

;; mem_inter
  (assert
  (forall ((s (set (set (tuple21 a c)))) (t (set (set (tuple21 a c))))
  (x (set (tuple21 a c))))
  (= (mem11 x
  (tb2t128 (inter (set1 (tuple2 a1 c1)) (t2tb128 s) (t2tb128 t))))
  (and (mem11 x s) (mem11 x t)))))

;; mem_inter
  (assert
  (forall ((s (set (tuple21 a c))) (t (set (tuple21 a c))) (x (tuple21 a c)))
  (= (mem10 x (tb2t129 (inter (tuple2 a1 c1) (t2tb129 s) (t2tb129 t))))
  (and (mem10 x s) (mem10 x t)))))

;; mem_inter
  (assert
  (forall ((s (set c)) (t (set c)) (x c))
  (= (mem7 x (tb2t132 (inter c1 (t2tb132 s) (t2tb132 t))))
  (and (mem7 x s) (mem7 x t)))))

;; mem_inter
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (tuple21 a b))) (x (tuple21 a b)))
  (= (mem3 x (tb2t11 (inter (tuple2 a1 b1) (t2tb11 s) (t2tb11 t))))
  (and (mem3 x s) (mem3 x t)))))

;; mem_inter
  (assert
  (forall ((s (set b)) (t (set b)) (x b))
  (= (mem2 x (tb2t12 (inter b1 (t2tb12 s) (t2tb12 t))))
  (and (mem2 x s) (mem2 x t)))))

;; mem_inter
  (assert
  (forall ((s (set a)) (t (set a)) (x a))
  (= (mem1 x (tb2t1 (inter a1 (t2tb1 s) (t2tb1 t))))
  (and (mem1 x s) (mem1 x t)))))

;; mem_inter
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t uni) (x uni))
  (= (mem a2 x (inter a2 s t)) (and (mem a2 x s) (mem a2 x t))))))

(declare-fun diff (ty uni uni) uni)

;; diff_sort
  (assert
  (forall ((a2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 a2) (diff a2 x x1)))))

;; mem_diff
  (assert
  (forall ((s (set (tuple21 (tuple21 a b) (tuple21 c d))))
  (t (set (tuple21 (tuple21 a b) (tuple21 c d)))) (x (tuple21 (tuple21 a b)
  (tuple21 c d))))
  (= (mem50 x
  (tb2t879
  (diff (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) (t2tb879 s) (t2tb879 t))))
  (and (mem50 x s) (not (mem50 x t))))))

;; mem_diff
  (assert
  (forall ((s (set (set (tuple21 b d)))) (t (set (set (tuple21 b d))))
  (x (set (tuple21 b d))))
  (= (mem33 x (tb2t906 (diff (set1 (tuple2 b1 d1)) (t2tb906 s) (t2tb906 t))))
  (and (mem33 x s) (not (mem33 x t))))))

;; mem_diff
  (assert
  (forall ((s (set (tuple21 b d))) (t (set (tuple21 b d))) (x (tuple21 b d)))
  (= (mem23 x (tb2t687 (diff (tuple2 b1 d1) (t2tb687 s) (t2tb687 t))))
  (and (mem23 x s) (not (mem23 x t))))))

;; mem_diff
  (assert
  (forall ((s (set d)) (t (set d)) (x d))
  (= (mem20 x (tb2t690 (diff d1 (t2tb690 s) (t2tb690 t))))
  (and (mem20 x s) (not (mem20 x t))))))

;; mem_diff
  (assert
  (forall ((s (set (set (tuple21 a c)))) (t (set (set (tuple21 a c))))
  (x (set (tuple21 a c))))
  (= (mem11 x (tb2t128 (diff (set1 (tuple2 a1 c1)) (t2tb128 s) (t2tb128 t))))
  (and (mem11 x s) (not (mem11 x t))))))

;; mem_diff
  (assert
  (forall ((s (set (tuple21 a c))) (t (set (tuple21 a c))) (x (tuple21 a c)))
  (= (mem10 x (tb2t129 (diff (tuple2 a1 c1) (t2tb129 s) (t2tb129 t))))
  (and (mem10 x s) (not (mem10 x t))))))

;; mem_diff
  (assert
  (forall ((s (set c)) (t (set c)) (x c))
  (= (mem7 x (tb2t132 (diff c1 (t2tb132 s) (t2tb132 t))))
  (and (mem7 x s) (not (mem7 x t))))))

;; mem_diff
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (tuple21 a b))) (x (tuple21 a b)))
  (= (mem3 x (tb2t11 (diff (tuple2 a1 b1) (t2tb11 s) (t2tb11 t))))
  (and (mem3 x s) (not (mem3 x t))))))

;; mem_diff
  (assert
  (forall ((s (set b)) (t (set b)) (x b))
  (= (mem2 x (tb2t12 (diff b1 (t2tb12 s) (t2tb12 t))))
  (and (mem2 x s) (not (mem2 x t))))))

;; mem_diff
  (assert
  (forall ((s (set a)) (t (set a)) (x a))
  (= (mem1 x (tb2t1 (diff a1 (t2tb1 s) (t2tb1 t))))
  (and (mem1 x s) (not (mem1 x t))))))

;; mem_diff
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t uni) (x uni))
  (= (mem a2 x (diff a2 s t)) (and (mem a2 x s) (not (mem a2 x t)))))))

(declare-fun Tuple2 (ty ty uni uni) uni)

;; Tuple2_sort
  (assert
  (forall ((a2 ty) (a3 ty))
  (forall ((x uni) (x1 uni)) (sort (tuple2 a3 a2) (Tuple2 a3 a2 x x1)))))

(declare-fun Tuple2_proj_1 (ty ty uni) uni)

;; Tuple2_proj_1_sort
  (assert
  (forall ((a2 ty) (a3 ty))
  (forall ((x uni)) (sort a3 (Tuple2_proj_1 a3 a2 x)))))

;; Tuple2_proj_1_def
  (assert
  (forall ((a2 ty) (a3 ty))
  (forall ((u uni) (u1 uni))
  (=> (sort a3 u) (= (Tuple2_proj_1 a3 a2 (Tuple2 a3 a2 u u1)) u)))))

(declare-fun Tuple2_proj_2 (ty ty uni) uni)

;; Tuple2_proj_2_sort
  (assert
  (forall ((a2 ty) (a3 ty))
  (forall ((x uni)) (sort a2 (Tuple2_proj_2 a3 a2 x)))))

;; Tuple2_proj_2_def
  (assert
  (forall ((a2 ty) (a3 ty))
  (forall ((u uni) (u1 uni))
  (=> (sort a2 u1) (= (Tuple2_proj_2 a3 a2 (Tuple2 a3 a2 u u1)) u1)))))

;; tuple2_inversion
  (assert
  (forall ((a2 ty) (a3 ty))
  (forall ((u uni))
  (=> (sort (tuple2 a3 a2) u)
  (= u (Tuple2 a3 a2 (Tuple2_proj_1 a3 a2 u) (Tuple2_proj_2 a3 a2 u)))))))

(declare-fun times (ty ty uni uni) uni)

;; times_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (tuple2 a2 b2)) (times b2 a2 x x1)))))

(declare-fun times2 ((set a) (set b)) (set (tuple21 a b)))

(declare-fun times4 ((set a) (set c)) (set (tuple21 a c)))

(declare-fun times10 ((set b) (set d)) (set (tuple21 b d)))

;; mem_times
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set (tuple21 (tuple21 a b) (tuple21 c d)))) (x uni)
  (y (tuple21 (tuple21 a b) (tuple21 c d))))
  (= (mem (tuple2 a2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)))
  (Tuple2 a2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) x (t2tb880 y))
  (times (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) a2 s (t2tb879 t)))
  (and (mem a2 x s) (mem50 y t))))))

;; mem_times
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set (set (tuple21 b d)))) (x uni) (y (set (tuple21 b
  d))))
  (= (mem (tuple2 a2 (set1 (tuple2 b1 d1)))
  (Tuple2 a2 (set1 (tuple2 b1 d1)) x (t2tb687 y))
  (times (set1 (tuple2 b1 d1)) a2 s (t2tb906 t)))
  (and (mem a2 x s) (mem33 y t))))))

;; mem_times
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set (tuple21 b d))) (x uni) (y (tuple21 b d)))
  (= (mem (tuple2 a2 (tuple2 b1 d1)) (Tuple2 a2 (tuple2 b1 d1) x (t2tb692 y))
  (times (tuple2 b1 d1) a2 s (t2tb687 t))) (and (mem a2 x s) (mem23 y t))))))

;; mem_times
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set d)) (x uni) (y d))
  (= (mem (tuple2 a2 d1) (Tuple2 a2 d1 x (t2tb694 y))
  (times d1 a2 s (t2tb690 t))) (and (mem a2 x s) (mem20 y t))))))

;; mem_times
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set (set (tuple21 a c)))) (x uni) (y (set (tuple21 a
  c))))
  (= (mem (tuple2 a2 (set1 (tuple2 a1 c1)))
  (Tuple2 a2 (set1 (tuple2 a1 c1)) x (t2tb129 y))
  (times (set1 (tuple2 a1 c1)) a2 s (t2tb128 t)))
  (and (mem a2 x s) (mem11 y t))))))

;; mem_times
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set (tuple21 a c))) (x uni) (y (tuple21 a c)))
  (= (mem (tuple2 a2 (tuple2 a1 c1)) (Tuple2 a2 (tuple2 a1 c1) x (t2tb133 y))
  (times (tuple2 a1 c1) a2 s (t2tb129 t))) (and (mem a2 x s) (mem10 y t))))))

;; mem_times
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set c)) (x uni) (y c))
  (= (mem (tuple2 a2 c1) (Tuple2 a2 c1 x (t2tb135 y))
  (times c1 a2 s (t2tb132 t))) (and (mem a2 x s) (mem7 y t))))))

;; mem_times
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set (tuple21 a b))) (x uni) (y (tuple21 a b)))
  (= (mem (tuple2 a2 (tuple2 a1 b1)) (Tuple2 a2 (tuple2 a1 b1) x (t2tb13 y))
  (times (tuple2 a1 b1) a2 s (t2tb11 t))) (and (mem a2 x s) (mem3 y t))))))

;; mem_times
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set b)) (x uni) (y b))
  (= (mem (tuple2 a2 b1) (Tuple2 a2 b1 x (t2tb14 y))
  (times b1 a2 s (t2tb12 t))) (and (mem a2 x s) (mem2 y t))))))

;; mem_times
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set a)) (x uni) (y a))
  (= (mem (tuple2 a2 a1) (Tuple2 a2 a1 x (t2tb2 y))
  (times a1 a2 s (t2tb1 t))) (and (mem a2 x s) (mem1 y t))))))

(declare-fun t2tb5070 ((set (tuple21 (tuple21 (tuple21 a b) (tuple21 c d))
  (tuple21 (tuple21 a b) (tuple21 c d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 a b) (tuple21 c d))
  (tuple21 (tuple21 a b) (tuple21 c d)))))) (sort
  (set1
  (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1))
  (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)))) (t2tb5070 x))))

(declare-fun tb2t5070 (uni) (set (tuple21 (tuple21 (tuple21 a b) (tuple21 c
  d)) (tuple21 (tuple21 a b) (tuple21 c d)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 a b) (tuple21 c d))
  (tuple21 (tuple21 a b) (tuple21 c d))))))
  (! (= (tb2t5070 (t2tb5070 i)) i) :pattern ((t2tb5070 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1))
     (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)))) j)
     (= (t2tb5070 (tb2t5070 j)) j)) :pattern ((t2tb5070 (tb2t5070 j))) )))

(declare-fun t2tb5071 ((tuple21 (tuple21 (tuple21 a b) (tuple21 c d))
  (tuple21 (tuple21 a b) (tuple21 c d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 a b) (tuple21 c d))
  (tuple21 (tuple21 a b) (tuple21 c d))))) (sort
  (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1))
  (tuple2 (tuple2 a1 b1) (tuple2 c1 d1))) (t2tb5071 x))))

(declare-fun tb2t5071 (uni) (tuple21 (tuple21 (tuple21 a b) (tuple21 c d))
  (tuple21 (tuple21 a b) (tuple21 c d))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 a b) (tuple21 c d))
  (tuple21 (tuple21 a b) (tuple21 c d)))))
  (! (= (tb2t5071 (t2tb5071 i)) i) :pattern ((t2tb5071 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1))
     (tuple2 (tuple2 a1 b1) (tuple2 c1 d1))) j)
     (= (t2tb5071 (tb2t5071 j)) j)) :pattern ((t2tb5071 (tb2t5071 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 (tuple21 a b) (tuple21 c d))))
  (t (set (tuple21 (tuple21 a b) (tuple21 c d)))) (x (tuple21 (tuple21 a b)
  (tuple21 c d))) (y (tuple21 (tuple21 a b) (tuple21 c d))))
  (= (mem
  (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1))
  (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)))
  (Tuple2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1))
  (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) (t2tb880 x) (t2tb880 y))
  (times (tuple2 (tuple2 a1 b1) (tuple2 c1 d1))
  (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) (t2tb879 s) (t2tb879 t)))
  (and (mem50 x s) (mem50 y t)))))

(declare-fun t2tb5072 ((set (tuple21 (tuple21 (tuple21 a b) (tuple21 c d))
  (set (tuple21 b d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 a b) (tuple21 c d))
  (set (tuple21 b d)))))) (sort
  (set1
  (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) (set1 (tuple2 b1 d1))))
  (t2tb5072 x))))

(declare-fun tb2t5072 (uni) (set (tuple21 (tuple21 (tuple21 a b) (tuple21 c
  d)) (set (tuple21 b d)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 a b) (tuple21 c d))
  (set (tuple21 b d))))))
  (! (= (tb2t5072 (t2tb5072 i)) i) :pattern ((t2tb5072 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) (set1 (tuple2 b1 d1))))
     j) (= (t2tb5072 (tb2t5072 j)) j)) :pattern ((t2tb5072 (tb2t5072 j))) )))

(declare-fun t2tb5073 ((tuple21 (tuple21 (tuple21 a b) (tuple21 c d))
  (set (tuple21 b d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 a b) (tuple21 c d)) (set (tuple21 b
  d))))) (sort
  (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) (set1 (tuple2 b1 d1)))
  (t2tb5073 x))))

(declare-fun tb2t5073 (uni) (tuple21 (tuple21 (tuple21 a b) (tuple21 c d))
  (set (tuple21 b d))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 a b) (tuple21 c d)) (set (tuple21 b
  d))))) (! (= (tb2t5073 (t2tb5073 i)) i) :pattern ((t2tb5073 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) (set1 (tuple2 b1 d1))) j)
     (= (t2tb5073 (tb2t5073 j)) j)) :pattern ((t2tb5073 (tb2t5073 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 (tuple21 a b) (tuple21 c d))))
  (t (set (set (tuple21 b d)))) (x (tuple21 (tuple21 a b) (tuple21 c d)))
  (y (set (tuple21 b d))))
  (= (mem
  (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) (set1 (tuple2 b1 d1)))
  (Tuple2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) (set1 (tuple2 b1 d1))
  (t2tb880 x) (t2tb687 y))
  (times (set1 (tuple2 b1 d1)) (tuple2 (tuple2 a1 b1) (tuple2 c1 d1))
  (t2tb879 s) (t2tb906 t))) (and (mem50 x s) (mem33 y t)))))

(declare-fun t2tb5074 ((set (tuple21 (tuple21 (tuple21 a b) (tuple21 c d))
  (tuple21 b d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 a b) (tuple21 c d)) (tuple21 b
  d))))) (sort
  (set1 (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) (tuple2 b1 d1)))
  (t2tb5074 x))))

(declare-fun tb2t5074 (uni) (set (tuple21 (tuple21 (tuple21 a b) (tuple21 c
  d)) (tuple21 b d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 a b) (tuple21 c d)) (tuple21 b
  d))))) (! (= (tb2t5074 (t2tb5074 i)) i) :pattern ((t2tb5074 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) (tuple2 b1 d1))) j)
     (= (t2tb5074 (tb2t5074 j)) j)) :pattern ((t2tb5074 (tb2t5074 j))) )))

(declare-fun t2tb5075 ((tuple21 (tuple21 (tuple21 a b) (tuple21 c d))
  (tuple21 b d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 a b) (tuple21 c d)) (tuple21 b d))))
  (sort (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) (tuple2 b1 d1))
  (t2tb5075 x))))

(declare-fun tb2t5075 (uni) (tuple21 (tuple21 (tuple21 a b) (tuple21 c d))
  (tuple21 b d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 a b) (tuple21 c d)) (tuple21 b d))))
  (! (= (tb2t5075 (t2tb5075 i)) i) :pattern ((t2tb5075 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) (tuple2 b1 d1))
     j) (= (t2tb5075 (tb2t5075 j)) j)) :pattern ((t2tb5075 (tb2t5075 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 (tuple21 a b) (tuple21 c d)))) (t (set (tuple21 b
  d))) (x (tuple21 (tuple21 a b) (tuple21 c d))) (y (tuple21 b d)))
  (= (mem (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) (tuple2 b1 d1))
  (Tuple2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) (tuple2 b1 d1) (t2tb880 x)
  (t2tb692 y))
  (times (tuple2 b1 d1) (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) (t2tb879 s)
  (t2tb687 t))) (and (mem50 x s) (mem23 y t)))))

(declare-fun t2tb5076 ((set (tuple21 (tuple21 (tuple21 a b) (tuple21 c d))
  d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 a b) (tuple21 c d)) d)))) (sort
  (set1 (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) d1)) (t2tb5076 x))))

(declare-fun tb2t5076 (uni) (set (tuple21 (tuple21 (tuple21 a b) (tuple21 c
  d)) d)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 a b) (tuple21 c d)) d))))
  (! (= (tb2t5076 (t2tb5076 i)) i) :pattern ((t2tb5076 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) d1)) j)
     (= (t2tb5076 (tb2t5076 j)) j)) :pattern ((t2tb5076 (tb2t5076 j))) )))

(declare-fun t2tb5077 ((tuple21 (tuple21 (tuple21 a b) (tuple21 c d))
  d)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 a b) (tuple21 c d)) d))) (sort
  (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) d1) (t2tb5077 x))))

(declare-fun tb2t5077 (uni) (tuple21 (tuple21 (tuple21 a b) (tuple21 c d))
  d))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 a b) (tuple21 c d)) d)))
  (! (= (tb2t5077 (t2tb5077 i)) i) :pattern ((t2tb5077 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) d1) j)
     (= (t2tb5077 (tb2t5077 j)) j)) :pattern ((t2tb5077 (tb2t5077 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 (tuple21 a b) (tuple21 c d)))) (t (set d))
  (x (tuple21 (tuple21 a b) (tuple21 c d))) (y d))
  (= (mem (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) d1)
  (Tuple2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) d1 (t2tb880 x) (t2tb694 y))
  (times d1 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) (t2tb879 s) (t2tb690 t)))
  (and (mem50 x s) (mem20 y t)))))

(declare-fun t2tb5078 ((set (tuple21 (tuple21 (tuple21 a b) (tuple21 c d))
  (set (tuple21 a c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 a b) (tuple21 c d))
  (set (tuple21 a c)))))) (sort
  (set1
  (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) (set1 (tuple2 a1 c1))))
  (t2tb5078 x))))

(declare-fun tb2t5078 (uni) (set (tuple21 (tuple21 (tuple21 a b) (tuple21 c
  d)) (set (tuple21 a c)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 a b) (tuple21 c d))
  (set (tuple21 a c))))))
  (! (= (tb2t5078 (t2tb5078 i)) i) :pattern ((t2tb5078 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) (set1 (tuple2 a1 c1))))
     j) (= (t2tb5078 (tb2t5078 j)) j)) :pattern ((t2tb5078 (tb2t5078 j))) )))

(declare-fun t2tb5079 ((tuple21 (tuple21 (tuple21 a b) (tuple21 c d))
  (set (tuple21 a c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 a b) (tuple21 c d)) (set (tuple21 a
  c))))) (sort
  (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) (set1 (tuple2 a1 c1)))
  (t2tb5079 x))))

(declare-fun tb2t5079 (uni) (tuple21 (tuple21 (tuple21 a b) (tuple21 c d))
  (set (tuple21 a c))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 a b) (tuple21 c d)) (set (tuple21 a
  c))))) (! (= (tb2t5079 (t2tb5079 i)) i) :pattern ((t2tb5079 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) (set1 (tuple2 a1 c1))) j)
     (= (t2tb5079 (tb2t5079 j)) j)) :pattern ((t2tb5079 (tb2t5079 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 (tuple21 a b) (tuple21 c d))))
  (t (set (set (tuple21 a c)))) (x (tuple21 (tuple21 a b) (tuple21 c d)))
  (y (set (tuple21 a c))))
  (= (mem
  (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) (set1 (tuple2 a1 c1)))
  (Tuple2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) (set1 (tuple2 a1 c1))
  (t2tb880 x) (t2tb129 y))
  (times (set1 (tuple2 a1 c1)) (tuple2 (tuple2 a1 b1) (tuple2 c1 d1))
  (t2tb879 s) (t2tb128 t))) (and (mem50 x s) (mem11 y t)))))

(declare-fun t2tb5080 ((set (tuple21 (tuple21 (tuple21 a b) (tuple21 c d))
  (tuple21 a c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 a b) (tuple21 c d)) (tuple21 a
  c))))) (sort
  (set1 (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) (tuple2 a1 c1)))
  (t2tb5080 x))))

(declare-fun tb2t5080 (uni) (set (tuple21 (tuple21 (tuple21 a b) (tuple21 c
  d)) (tuple21 a c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 a b) (tuple21 c d)) (tuple21 a
  c))))) (! (= (tb2t5080 (t2tb5080 i)) i) :pattern ((t2tb5080 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) (tuple2 a1 c1))) j)
     (= (t2tb5080 (tb2t5080 j)) j)) :pattern ((t2tb5080 (tb2t5080 j))) )))

(declare-fun t2tb5081 ((tuple21 (tuple21 (tuple21 a b) (tuple21 c d))
  (tuple21 a c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 a b) (tuple21 c d)) (tuple21 a c))))
  (sort (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) (tuple2 a1 c1))
  (t2tb5081 x))))

(declare-fun tb2t5081 (uni) (tuple21 (tuple21 (tuple21 a b) (tuple21 c d))
  (tuple21 a c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 a b) (tuple21 c d)) (tuple21 a c))))
  (! (= (tb2t5081 (t2tb5081 i)) i) :pattern ((t2tb5081 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) (tuple2 a1 c1))
     j) (= (t2tb5081 (tb2t5081 j)) j)) :pattern ((t2tb5081 (tb2t5081 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 (tuple21 a b) (tuple21 c d)))) (t (set (tuple21 a
  c))) (x (tuple21 (tuple21 a b) (tuple21 c d))) (y (tuple21 a c)))
  (= (mem (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) (tuple2 a1 c1))
  (Tuple2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) (tuple2 a1 c1) (t2tb880 x)
  (t2tb133 y))
  (times (tuple2 a1 c1) (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) (t2tb879 s)
  (t2tb129 t))) (and (mem50 x s) (mem10 y t)))))

(declare-fun t2tb5082 ((set (tuple21 (tuple21 (tuple21 a b) (tuple21 c d))
  c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 a b) (tuple21 c d)) c)))) (sort
  (set1 (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) c1)) (t2tb5082 x))))

(declare-fun tb2t5082 (uni) (set (tuple21 (tuple21 (tuple21 a b) (tuple21 c
  d)) c)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 a b) (tuple21 c d)) c))))
  (! (= (tb2t5082 (t2tb5082 i)) i) :pattern ((t2tb5082 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) c1)) j)
     (= (t2tb5082 (tb2t5082 j)) j)) :pattern ((t2tb5082 (tb2t5082 j))) )))

(declare-fun t2tb5083 ((tuple21 (tuple21 (tuple21 a b) (tuple21 c d))
  c)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 a b) (tuple21 c d)) c))) (sort
  (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) c1) (t2tb5083 x))))

(declare-fun tb2t5083 (uni) (tuple21 (tuple21 (tuple21 a b) (tuple21 c d))
  c))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 a b) (tuple21 c d)) c)))
  (! (= (tb2t5083 (t2tb5083 i)) i) :pattern ((t2tb5083 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) c1) j)
     (= (t2tb5083 (tb2t5083 j)) j)) :pattern ((t2tb5083 (tb2t5083 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 (tuple21 a b) (tuple21 c d)))) (t (set c))
  (x (tuple21 (tuple21 a b) (tuple21 c d))) (y c))
  (= (mem (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) c1)
  (Tuple2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) c1 (t2tb880 x) (t2tb135 y))
  (times c1 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) (t2tb879 s) (t2tb132 t)))
  (and (mem50 x s) (mem7 y t)))))

(declare-fun t2tb5084 ((set (tuple21 (tuple21 (tuple21 a b) (tuple21 c d))
  (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 a b) (tuple21 c d)) (tuple21 a
  b))))) (sort
  (set1 (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) (tuple2 a1 b1)))
  (t2tb5084 x))))

(declare-fun tb2t5084 (uni) (set (tuple21 (tuple21 (tuple21 a b) (tuple21 c
  d)) (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 a b) (tuple21 c d)) (tuple21 a
  b))))) (! (= (tb2t5084 (t2tb5084 i)) i) :pattern ((t2tb5084 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) (tuple2 a1 b1))) j)
     (= (t2tb5084 (tb2t5084 j)) j)) :pattern ((t2tb5084 (tb2t5084 j))) )))

(declare-fun t2tb5085 ((tuple21 (tuple21 (tuple21 a b) (tuple21 c d))
  (tuple21 a b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 a b) (tuple21 c d)) (tuple21 a b))))
  (sort (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) (tuple2 a1 b1))
  (t2tb5085 x))))

(declare-fun tb2t5085 (uni) (tuple21 (tuple21 (tuple21 a b) (tuple21 c d))
  (tuple21 a b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 a b) (tuple21 c d)) (tuple21 a b))))
  (! (= (tb2t5085 (t2tb5085 i)) i) :pattern ((t2tb5085 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) (tuple2 a1 b1))
     j) (= (t2tb5085 (tb2t5085 j)) j)) :pattern ((t2tb5085 (tb2t5085 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 (tuple21 a b) (tuple21 c d)))) (t (set (tuple21 a
  b))) (x (tuple21 (tuple21 a b) (tuple21 c d))) (y (tuple21 a b)))
  (= (mem (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) (tuple2 a1 b1))
  (Tuple2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) (tuple2 a1 b1) (t2tb880 x)
  (t2tb13 y))
  (times (tuple2 a1 b1) (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) (t2tb879 s)
  (t2tb11 t))) (and (mem50 x s) (mem3 y t)))))

(declare-fun t2tb5086 ((set (tuple21 (tuple21 (tuple21 a b) (tuple21 c d))
  b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 a b) (tuple21 c d)) b)))) (sort
  (set1 (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) b1)) (t2tb5086 x))))

(declare-fun tb2t5086 (uni) (set (tuple21 (tuple21 (tuple21 a b) (tuple21 c
  d)) b)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 a b) (tuple21 c d)) b))))
  (! (= (tb2t5086 (t2tb5086 i)) i) :pattern ((t2tb5086 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) b1)) j)
     (= (t2tb5086 (tb2t5086 j)) j)) :pattern ((t2tb5086 (tb2t5086 j))) )))

(declare-fun t2tb5087 ((tuple21 (tuple21 (tuple21 a b) (tuple21 c d))
  b)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 a b) (tuple21 c d)) b))) (sort
  (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) b1) (t2tb5087 x))))

(declare-fun tb2t5087 (uni) (tuple21 (tuple21 (tuple21 a b) (tuple21 c d))
  b))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 a b) (tuple21 c d)) b)))
  (! (= (tb2t5087 (t2tb5087 i)) i) :pattern ((t2tb5087 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) b1) j)
     (= (t2tb5087 (tb2t5087 j)) j)) :pattern ((t2tb5087 (tb2t5087 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 (tuple21 a b) (tuple21 c d)))) (t (set b))
  (x (tuple21 (tuple21 a b) (tuple21 c d))) (y b))
  (= (mem (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) b1)
  (Tuple2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) b1 (t2tb880 x) (t2tb14 y))
  (times b1 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) (t2tb879 s) (t2tb12 t)))
  (and (mem50 x s) (mem2 y t)))))

(declare-fun t2tb5088 ((set (tuple21 (tuple21 (tuple21 a b) (tuple21 c d))
  a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 a b) (tuple21 c d)) a)))) (sort
  (set1 (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) a1)) (t2tb5088 x))))

(declare-fun tb2t5088 (uni) (set (tuple21 (tuple21 (tuple21 a b) (tuple21 c
  d)) a)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 a b) (tuple21 c d)) a))))
  (! (= (tb2t5088 (t2tb5088 i)) i) :pattern ((t2tb5088 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) a1)) j)
     (= (t2tb5088 (tb2t5088 j)) j)) :pattern ((t2tb5088 (tb2t5088 j))) )))

(declare-fun t2tb5089 ((tuple21 (tuple21 (tuple21 a b) (tuple21 c d))
  a)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 a b) (tuple21 c d)) a))) (sort
  (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) a1) (t2tb5089 x))))

(declare-fun tb2t5089 (uni) (tuple21 (tuple21 (tuple21 a b) (tuple21 c d))
  a))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 a b) (tuple21 c d)) a)))
  (! (= (tb2t5089 (t2tb5089 i)) i) :pattern ((t2tb5089 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) a1) j)
     (= (t2tb5089 (tb2t5089 j)) j)) :pattern ((t2tb5089 (tb2t5089 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 (tuple21 a b) (tuple21 c d)))) (t (set a))
  (x (tuple21 (tuple21 a b) (tuple21 c d))) (y a))
  (= (mem (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) a1)
  (Tuple2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) a1 (t2tb880 x) (t2tb2 y))
  (times a1 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) (t2tb879 s) (t2tb1 t)))
  (and (mem50 x s) (mem1 y t)))))

;; mem_times
  (assert
  (forall ((b2 ty))
  (forall ((s (set (tuple21 (tuple21 a b) (tuple21 c d)))) (t uni)
  (x (tuple21 (tuple21 a b) (tuple21 c d))) (y uni))
  (= (mem (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) b2)
  (Tuple2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) b2 (t2tb880 x) y)
  (times b2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) (t2tb879 s) t))
  (and (mem50 x s) (mem b2 y t))))))

(declare-fun t2tb5090 ((set (tuple21 (set (tuple21 b d)) (tuple21 (tuple21 a
  b) (tuple21 c d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 b d)) (tuple21 (tuple21 a b)
  (tuple21 c d)))))) (sort
  (set1
  (tuple2 (set1 (tuple2 b1 d1)) (tuple2 (tuple2 a1 b1) (tuple2 c1 d1))))
  (t2tb5090 x))))

(declare-fun tb2t5090 (uni) (set (tuple21 (set (tuple21 b d))
  (tuple21 (tuple21 a b) (tuple21 c d)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 b d)) (tuple21 (tuple21 a b)
  (tuple21 c d))))))
  (! (= (tb2t5090 (t2tb5090 i)) i) :pattern ((t2tb5090 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (tuple2 (set1 (tuple2 b1 d1)) (tuple2 (tuple2 a1 b1) (tuple2 c1 d1))))
     j) (= (t2tb5090 (tb2t5090 j)) j)) :pattern ((t2tb5090 (tb2t5090 j))) )))

(declare-fun t2tb5091 ((tuple21 (set (tuple21 b d)) (tuple21 (tuple21 a b)
  (tuple21 c d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 b d)) (tuple21 (tuple21 a b) (tuple21 c
  d))))) (sort
  (tuple2 (set1 (tuple2 b1 d1)) (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)))
  (t2tb5091 x))))

(declare-fun tb2t5091 (uni) (tuple21 (set (tuple21 b d)) (tuple21 (tuple21 a
  b) (tuple21 c d))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 b d)) (tuple21 (tuple21 a b) (tuple21 c
  d))))) (! (= (tb2t5091 (t2tb5091 i)) i) :pattern ((t2tb5091 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (tuple2 (set1 (tuple2 b1 d1)) (tuple2 (tuple2 a1 b1) (tuple2 c1 d1))) j)
     (= (t2tb5091 (tb2t5091 j)) j)) :pattern ((t2tb5091 (tb2t5091 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 b d)))) (t (set (tuple21 (tuple21 a b)
  (tuple21 c d)))) (x (set (tuple21 b d))) (y (tuple21 (tuple21 a b)
  (tuple21 c d))))
  (= (mem
  (tuple2 (set1 (tuple2 b1 d1)) (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)))
  (Tuple2 (set1 (tuple2 b1 d1)) (tuple2 (tuple2 a1 b1) (tuple2 c1 d1))
  (t2tb687 x) (t2tb880 y))
  (times (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) (set1 (tuple2 b1 d1))
  (t2tb906 s) (t2tb879 t))) (and (mem33 x s) (mem50 y t)))))

(declare-fun t2tb4339 ((set (tuple21 (set (tuple21 b d)) (set (tuple21 b
  d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 b d)) (set (tuple21 b d)))))) (sort
  (set1 (tuple2 (set1 (tuple2 b1 d1)) (set1 (tuple2 b1 d1)))) (t2tb4339 x))))

(declare-fun tb2t4339 (uni) (set (tuple21 (set (tuple21 b d)) (set (tuple21 b
  d)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 b d)) (set (tuple21 b d))))))
  (! (= (tb2t4339 (t2tb4339 i)) i) :pattern ((t2tb4339 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 b1 d1)) (set1 (tuple2 b1 d1)))) j)
     (= (t2tb4339 (tb2t4339 j)) j)) :pattern ((t2tb4339 (tb2t4339 j))) )))

(declare-fun t2tb4340 ((tuple21 (set (tuple21 b d)) (set (tuple21 b
  d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 b d)) (set (tuple21 b d))))) (sort
  (tuple2 (set1 (tuple2 b1 d1)) (set1 (tuple2 b1 d1))) (t2tb4340 x))))

(declare-fun tb2t4340 (uni) (tuple21 (set (tuple21 b d)) (set (tuple21 b
  d))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 b d)) (set (tuple21 b d)))))
  (! (= (tb2t4340 (t2tb4340 i)) i) :pattern ((t2tb4340 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 b1 d1)) (set1 (tuple2 b1 d1))) j)
     (= (t2tb4340 (tb2t4340 j)) j)) :pattern ((t2tb4340 (tb2t4340 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 b d)))) (t (set (set (tuple21 b d))))
  (x (set (tuple21 b d))) (y (set (tuple21 b d))))
  (= (mem (tuple2 (set1 (tuple2 b1 d1)) (set1 (tuple2 b1 d1)))
  (Tuple2 (set1 (tuple2 b1 d1)) (set1 (tuple2 b1 d1)) (t2tb687 x)
  (t2tb687 y))
  (times (set1 (tuple2 b1 d1)) (set1 (tuple2 b1 d1)) (t2tb906 s) (t2tb906 t)))
  (and (mem33 x s) (mem33 y t)))))

(declare-fun t2tb4341 ((set (tuple21 (set (tuple21 b d)) (tuple21 b
  d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 b d)) (tuple21 b d))))) (sort
  (set1 (tuple2 (set1 (tuple2 b1 d1)) (tuple2 b1 d1))) (t2tb4341 x))))

(declare-fun tb2t4341 (uni) (set (tuple21 (set (tuple21 b d)) (tuple21 b
  d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 b d)) (tuple21 b d)))))
  (! (= (tb2t4341 (t2tb4341 i)) i) :pattern ((t2tb4341 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 b1 d1)) (tuple2 b1 d1))) j)
     (= (t2tb4341 (tb2t4341 j)) j)) :pattern ((t2tb4341 (tb2t4341 j))) )))

(declare-fun t2tb4342 ((tuple21 (set (tuple21 b d)) (tuple21 b d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 b d)) (tuple21 b d)))) (sort
  (tuple2 (set1 (tuple2 b1 d1)) (tuple2 b1 d1)) (t2tb4342 x))))

(declare-fun tb2t4342 (uni) (tuple21 (set (tuple21 b d)) (tuple21 b d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 b d)) (tuple21 b d))))
  (! (= (tb2t4342 (t2tb4342 i)) i) :pattern ((t2tb4342 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 b1 d1)) (tuple2 b1 d1)) j)
     (= (t2tb4342 (tb2t4342 j)) j)) :pattern ((t2tb4342 (tb2t4342 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 b d)))) (t (set (tuple21 b d)))
  (x (set (tuple21 b d))) (y (tuple21 b d)))
  (= (mem (tuple2 (set1 (tuple2 b1 d1)) (tuple2 b1 d1))
  (Tuple2 (set1 (tuple2 b1 d1)) (tuple2 b1 d1) (t2tb687 x) (t2tb692 y))
  (times (tuple2 b1 d1) (set1 (tuple2 b1 d1)) (t2tb906 s) (t2tb687 t)))
  (and (mem33 x s) (mem23 y t)))))

(declare-fun t2tb4343 ((set (tuple21 (set (tuple21 b d)) d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 b d)) d)))) (sort
  (set1 (tuple2 (set1 (tuple2 b1 d1)) d1)) (t2tb4343 x))))

(declare-fun tb2t4343 (uni) (set (tuple21 (set (tuple21 b d)) d)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 b d)) d))))
  (! (= (tb2t4343 (t2tb4343 i)) i) :pattern ((t2tb4343 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 b1 d1)) d1)) j)
     (= (t2tb4343 (tb2t4343 j)) j)) :pattern ((t2tb4343 (tb2t4343 j))) )))

(declare-fun t2tb4344 ((tuple21 (set (tuple21 b d)) d)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 b d)) d))) (sort
  (tuple2 (set1 (tuple2 b1 d1)) d1) (t2tb4344 x))))

(declare-fun tb2t4344 (uni) (tuple21 (set (tuple21 b d)) d))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 b d)) d)))
  (! (= (tb2t4344 (t2tb4344 i)) i) :pattern ((t2tb4344 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 b1 d1)) d1) j)
     (= (t2tb4344 (tb2t4344 j)) j)) :pattern ((t2tb4344 (tb2t4344 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 b d)))) (t (set d)) (x (set (tuple21 b d)))
  (y d))
  (= (mem (tuple2 (set1 (tuple2 b1 d1)) d1)
  (Tuple2 (set1 (tuple2 b1 d1)) d1 (t2tb687 x) (t2tb694 y))
  (times d1 (set1 (tuple2 b1 d1)) (t2tb906 s) (t2tb690 t)))
  (and (mem33 x s) (mem20 y t)))))

(declare-fun t2tb4347 ((set (tuple21 (set (tuple21 b d)) (set (tuple21 a
  c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 b d)) (set (tuple21 a c)))))) (sort
  (set1 (tuple2 (set1 (tuple2 b1 d1)) (set1 (tuple2 a1 c1)))) (t2tb4347 x))))

(declare-fun tb2t4347 (uni) (set (tuple21 (set (tuple21 b d)) (set (tuple21 a
  c)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 b d)) (set (tuple21 a c))))))
  (! (= (tb2t4347 (t2tb4347 i)) i) :pattern ((t2tb4347 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 b1 d1)) (set1 (tuple2 a1 c1)))) j)
     (= (t2tb4347 (tb2t4347 j)) j)) :pattern ((t2tb4347 (tb2t4347 j))) )))

(declare-fun t2tb4348 ((tuple21 (set (tuple21 b d)) (set (tuple21 a
  c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 b d)) (set (tuple21 a c))))) (sort
  (tuple2 (set1 (tuple2 b1 d1)) (set1 (tuple2 a1 c1))) (t2tb4348 x))))

(declare-fun tb2t4348 (uni) (tuple21 (set (tuple21 b d)) (set (tuple21 a
  c))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 b d)) (set (tuple21 a c)))))
  (! (= (tb2t4348 (t2tb4348 i)) i) :pattern ((t2tb4348 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 b1 d1)) (set1 (tuple2 a1 c1))) j)
     (= (t2tb4348 (tb2t4348 j)) j)) :pattern ((t2tb4348 (tb2t4348 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 b d)))) (t (set (set (tuple21 a c))))
  (x (set (tuple21 b d))) (y (set (tuple21 a c))))
  (= (mem (tuple2 (set1 (tuple2 b1 d1)) (set1 (tuple2 a1 c1)))
  (Tuple2 (set1 (tuple2 b1 d1)) (set1 (tuple2 a1 c1)) (t2tb687 x)
  (t2tb129 y))
  (times (set1 (tuple2 a1 c1)) (set1 (tuple2 b1 d1)) (t2tb906 s) (t2tb128 t)))
  (and (mem33 x s) (mem11 y t)))))

(declare-fun t2tb4349 ((set (tuple21 (set (tuple21 b d)) (tuple21 a
  c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 b d)) (tuple21 a c))))) (sort
  (set1 (tuple2 (set1 (tuple2 b1 d1)) (tuple2 a1 c1))) (t2tb4349 x))))

(declare-fun tb2t4349 (uni) (set (tuple21 (set (tuple21 b d)) (tuple21 a
  c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 b d)) (tuple21 a c)))))
  (! (= (tb2t4349 (t2tb4349 i)) i) :pattern ((t2tb4349 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 b1 d1)) (tuple2 a1 c1))) j)
     (= (t2tb4349 (tb2t4349 j)) j)) :pattern ((t2tb4349 (tb2t4349 j))) )))

(declare-fun t2tb4350 ((tuple21 (set (tuple21 b d)) (tuple21 a c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 b d)) (tuple21 a c)))) (sort
  (tuple2 (set1 (tuple2 b1 d1)) (tuple2 a1 c1)) (t2tb4350 x))))

(declare-fun tb2t4350 (uni) (tuple21 (set (tuple21 b d)) (tuple21 a c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 b d)) (tuple21 a c))))
  (! (= (tb2t4350 (t2tb4350 i)) i) :pattern ((t2tb4350 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 b1 d1)) (tuple2 a1 c1)) j)
     (= (t2tb4350 (tb2t4350 j)) j)) :pattern ((t2tb4350 (tb2t4350 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 b d)))) (t (set (tuple21 a c)))
  (x (set (tuple21 b d))) (y (tuple21 a c)))
  (= (mem (tuple2 (set1 (tuple2 b1 d1)) (tuple2 a1 c1))
  (Tuple2 (set1 (tuple2 b1 d1)) (tuple2 a1 c1) (t2tb687 x) (t2tb133 y))
  (times (tuple2 a1 c1) (set1 (tuple2 b1 d1)) (t2tb906 s) (t2tb129 t)))
  (and (mem33 x s) (mem10 y t)))))

(declare-fun t2tb4351 ((set (tuple21 (set (tuple21 b d)) c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 b d)) c)))) (sort
  (set1 (tuple2 (set1 (tuple2 b1 d1)) c1)) (t2tb4351 x))))

(declare-fun tb2t4351 (uni) (set (tuple21 (set (tuple21 b d)) c)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 b d)) c))))
  (! (= (tb2t4351 (t2tb4351 i)) i) :pattern ((t2tb4351 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 b1 d1)) c1)) j)
     (= (t2tb4351 (tb2t4351 j)) j)) :pattern ((t2tb4351 (tb2t4351 j))) )))

(declare-fun t2tb4352 ((tuple21 (set (tuple21 b d)) c)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 b d)) c))) (sort
  (tuple2 (set1 (tuple2 b1 d1)) c1) (t2tb4352 x))))

(declare-fun tb2t4352 (uni) (tuple21 (set (tuple21 b d)) c))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 b d)) c)))
  (! (= (tb2t4352 (t2tb4352 i)) i) :pattern ((t2tb4352 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 b1 d1)) c1) j)
     (= (t2tb4352 (tb2t4352 j)) j)) :pattern ((t2tb4352 (tb2t4352 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 b d)))) (t (set c)) (x (set (tuple21 b d)))
  (y c))
  (= (mem (tuple2 (set1 (tuple2 b1 d1)) c1)
  (Tuple2 (set1 (tuple2 b1 d1)) c1 (t2tb687 x) (t2tb135 y))
  (times c1 (set1 (tuple2 b1 d1)) (t2tb906 s) (t2tb132 t)))
  (and (mem33 x s) (mem7 y t)))))

(declare-fun t2tb4355 ((set (tuple21 (set (tuple21 b d)) (tuple21 a
  b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 b d)) (tuple21 a b))))) (sort
  (set1 (tuple2 (set1 (tuple2 b1 d1)) (tuple2 a1 b1))) (t2tb4355 x))))

(declare-fun tb2t4355 (uni) (set (tuple21 (set (tuple21 b d)) (tuple21 a
  b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 b d)) (tuple21 a b)))))
  (! (= (tb2t4355 (t2tb4355 i)) i) :pattern ((t2tb4355 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 b1 d1)) (tuple2 a1 b1))) j)
     (= (t2tb4355 (tb2t4355 j)) j)) :pattern ((t2tb4355 (tb2t4355 j))) )))

(declare-fun t2tb4356 ((tuple21 (set (tuple21 b d)) (tuple21 a b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 b d)) (tuple21 a b)))) (sort
  (tuple2 (set1 (tuple2 b1 d1)) (tuple2 a1 b1)) (t2tb4356 x))))

(declare-fun tb2t4356 (uni) (tuple21 (set (tuple21 b d)) (tuple21 a b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 b d)) (tuple21 a b))))
  (! (= (tb2t4356 (t2tb4356 i)) i) :pattern ((t2tb4356 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 b1 d1)) (tuple2 a1 b1)) j)
     (= (t2tb4356 (tb2t4356 j)) j)) :pattern ((t2tb4356 (tb2t4356 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 b d)))) (t (set (tuple21 a b)))
  (x (set (tuple21 b d))) (y (tuple21 a b)))
  (= (mem (tuple2 (set1 (tuple2 b1 d1)) (tuple2 a1 b1))
  (Tuple2 (set1 (tuple2 b1 d1)) (tuple2 a1 b1) (t2tb687 x) (t2tb13 y))
  (times (tuple2 a1 b1) (set1 (tuple2 b1 d1)) (t2tb906 s) (t2tb11 t)))
  (and (mem33 x s) (mem3 y t)))))

(declare-fun t2tb4357 ((set (tuple21 (set (tuple21 b d)) b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 b d)) b)))) (sort
  (set1 (tuple2 (set1 (tuple2 b1 d1)) b1)) (t2tb4357 x))))

(declare-fun tb2t4357 (uni) (set (tuple21 (set (tuple21 b d)) b)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 b d)) b))))
  (! (= (tb2t4357 (t2tb4357 i)) i) :pattern ((t2tb4357 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 b1 d1)) b1)) j)
     (= (t2tb4357 (tb2t4357 j)) j)) :pattern ((t2tb4357 (tb2t4357 j))) )))

(declare-fun t2tb4358 ((tuple21 (set (tuple21 b d)) b)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 b d)) b))) (sort
  (tuple2 (set1 (tuple2 b1 d1)) b1) (t2tb4358 x))))

(declare-fun tb2t4358 (uni) (tuple21 (set (tuple21 b d)) b))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 b d)) b)))
  (! (= (tb2t4358 (t2tb4358 i)) i) :pattern ((t2tb4358 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 b1 d1)) b1) j)
     (= (t2tb4358 (tb2t4358 j)) j)) :pattern ((t2tb4358 (tb2t4358 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 b d)))) (t (set b)) (x (set (tuple21 b d)))
  (y b))
  (= (mem (tuple2 (set1 (tuple2 b1 d1)) b1)
  (Tuple2 (set1 (tuple2 b1 d1)) b1 (t2tb687 x) (t2tb14 y))
  (times b1 (set1 (tuple2 b1 d1)) (t2tb906 s) (t2tb12 t)))
  (and (mem33 x s) (mem2 y t)))))

(declare-fun t2tb4359 ((set (tuple21 (set (tuple21 b d)) a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 b d)) a)))) (sort
  (set1 (tuple2 (set1 (tuple2 b1 d1)) a1)) (t2tb4359 x))))

(declare-fun tb2t4359 (uni) (set (tuple21 (set (tuple21 b d)) a)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 b d)) a))))
  (! (= (tb2t4359 (t2tb4359 i)) i) :pattern ((t2tb4359 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 b1 d1)) a1)) j)
     (= (t2tb4359 (tb2t4359 j)) j)) :pattern ((t2tb4359 (tb2t4359 j))) )))

(declare-fun t2tb4360 ((tuple21 (set (tuple21 b d)) a)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 b d)) a))) (sort
  (tuple2 (set1 (tuple2 b1 d1)) a1) (t2tb4360 x))))

(declare-fun tb2t4360 (uni) (tuple21 (set (tuple21 b d)) a))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 b d)) a)))
  (! (= (tb2t4360 (t2tb4360 i)) i) :pattern ((t2tb4360 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 b1 d1)) a1) j)
     (= (t2tb4360 (tb2t4360 j)) j)) :pattern ((t2tb4360 (tb2t4360 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 b d)))) (t (set a)) (x (set (tuple21 b d)))
  (y a))
  (= (mem (tuple2 (set1 (tuple2 b1 d1)) a1)
  (Tuple2 (set1 (tuple2 b1 d1)) a1 (t2tb687 x) (t2tb2 y))
  (times a1 (set1 (tuple2 b1 d1)) (t2tb906 s) (t2tb1 t)))
  (and (mem33 x s) (mem1 y t)))))

;; mem_times
  (assert
  (forall ((b2 ty))
  (forall ((s (set (set (tuple21 b d)))) (t uni) (x (set (tuple21 b d)))
  (y uni))
  (= (mem (tuple2 (set1 (tuple2 b1 d1)) b2)
  (Tuple2 (set1 (tuple2 b1 d1)) b2 (t2tb687 x) y)
  (times b2 (set1 (tuple2 b1 d1)) (t2tb906 s) t))
  (and (mem33 x s) (mem b2 y t))))))

(declare-fun t2tb5092 ((set (tuple21 (tuple21 b d) (tuple21 (tuple21 a b)
  (tuple21 c d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b d) (tuple21 (tuple21 a b) (tuple21 c
  d)))))) (sort
  (set1 (tuple2 (tuple2 b1 d1) (tuple2 (tuple2 a1 b1) (tuple2 c1 d1))))
  (t2tb5092 x))))

(declare-fun tb2t5092 (uni) (set (tuple21 (tuple21 b d) (tuple21 (tuple21 a
  b) (tuple21 c d)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b d) (tuple21 (tuple21 a b) (tuple21 c
  d)))))) (! (= (tb2t5092 (t2tb5092 i)) i) :pattern ((t2tb5092 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 b1 d1) (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)))) j)
     (= (t2tb5092 (tb2t5092 j)) j)) :pattern ((t2tb5092 (tb2t5092 j))) )))

(declare-fun t2tb5093 ((tuple21 (tuple21 b d) (tuple21 (tuple21 a b)
  (tuple21 c d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b d) (tuple21 (tuple21 a b) (tuple21 c d)))))
  (sort (tuple2 (tuple2 b1 d1) (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)))
  (t2tb5093 x))))

(declare-fun tb2t5093 (uni) (tuple21 (tuple21 b d) (tuple21 (tuple21 a b)
  (tuple21 c d))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b d) (tuple21 (tuple21 a b) (tuple21 c d)))))
  (! (= (tb2t5093 (t2tb5093 i)) i) :pattern ((t2tb5093 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 d1) (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)))
     j) (= (t2tb5093 (tb2t5093 j)) j)) :pattern ((t2tb5093 (tb2t5093 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 b d))) (t (set (tuple21 (tuple21 a b) (tuple21 c
  d)))) (x (tuple21 b d)) (y (tuple21 (tuple21 a b) (tuple21 c d))))
  (= (mem (tuple2 (tuple2 b1 d1) (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)))
  (Tuple2 (tuple2 b1 d1) (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) (t2tb692 x)
  (t2tb880 y))
  (times (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) (tuple2 b1 d1) (t2tb687 s)
  (t2tb879 t))) (and (mem23 x s) (mem50 y t)))))

(declare-fun t2tb4373 ((set (tuple21 (tuple21 b d) (set (tuple21 b
  d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b d) (set (tuple21 b d)))))) (sort
  (set1 (tuple2 (tuple2 b1 d1) (set1 (tuple2 b1 d1)))) (t2tb4373 x))))

(declare-fun tb2t4373 (uni) (set (tuple21 (tuple21 b d) (set (tuple21 b
  d)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b d) (set (tuple21 b d))))))
  (! (= (tb2t4373 (t2tb4373 i)) i) :pattern ((t2tb4373 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 d1) (set1 (tuple2 b1 d1)))) j)
     (= (t2tb4373 (tb2t4373 j)) j)) :pattern ((t2tb4373 (tb2t4373 j))) )))

(declare-fun t2tb4374 ((tuple21 (tuple21 b d) (set (tuple21 b d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b d) (set (tuple21 b d))))) (sort
  (tuple2 (tuple2 b1 d1) (set1 (tuple2 b1 d1))) (t2tb4374 x))))

(declare-fun tb2t4374 (uni) (tuple21 (tuple21 b d) (set (tuple21 b d))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b d) (set (tuple21 b d)))))
  (! (= (tb2t4374 (t2tb4374 i)) i) :pattern ((t2tb4374 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 d1) (set1 (tuple2 b1 d1))) j)
     (= (t2tb4374 (tb2t4374 j)) j)) :pattern ((t2tb4374 (tb2t4374 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 b d))) (t (set (set (tuple21 b d))))
  (x (tuple21 b d)) (y (set (tuple21 b d))))
  (= (mem (tuple2 (tuple2 b1 d1) (set1 (tuple2 b1 d1)))
  (Tuple2 (tuple2 b1 d1) (set1 (tuple2 b1 d1)) (t2tb692 x) (t2tb687 y))
  (times (set1 (tuple2 b1 d1)) (tuple2 b1 d1) (t2tb687 s) (t2tb906 t)))
  (and (mem23 x s) (mem33 y t)))))

(declare-fun t2tb747 ((set (tuple21 (tuple21 b d) (tuple21 b d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b d) (tuple21 b d))))) (sort
  (set1 (tuple2 (tuple2 b1 d1) (tuple2 b1 d1))) (t2tb747 x))))

(declare-fun tb2t747 (uni) (set (tuple21 (tuple21 b d) (tuple21 b d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b d) (tuple21 b d)))))
  (! (= (tb2t747 (t2tb747 i)) i) :pattern ((t2tb747 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 d1) (tuple2 b1 d1))) j)
     (= (t2tb747 (tb2t747 j)) j)) :pattern ((t2tb747 (tb2t747 j))) )))

(declare-fun t2tb748 ((tuple21 (tuple21 b d) (tuple21 b d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b d) (tuple21 b d)))) (sort
  (tuple2 (tuple2 b1 d1) (tuple2 b1 d1)) (t2tb748 x))))

(declare-fun tb2t748 (uni) (tuple21 (tuple21 b d) (tuple21 b d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b d) (tuple21 b d))))
  (! (= (tb2t748 (t2tb748 i)) i) :pattern ((t2tb748 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 d1) (tuple2 b1 d1)) j)
     (= (t2tb748 (tb2t748 j)) j)) :pattern ((t2tb748 (tb2t748 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 b d))) (t (set (tuple21 b d))) (x (tuple21 b d))
  (y (tuple21 b d)))
  (= (mem (tuple2 (tuple2 b1 d1) (tuple2 b1 d1))
  (Tuple2 (tuple2 b1 d1) (tuple2 b1 d1) (t2tb692 x) (t2tb692 y))
  (times (tuple2 b1 d1) (tuple2 b1 d1) (t2tb687 s) (t2tb687 t)))
  (and (mem23 x s) (mem23 y t)))))

(declare-fun t2tb754 ((tuple21 (tuple21 b d) d)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b d) d))) (sort (tuple2 (tuple2 b1 d1) d1)
  (t2tb754 x))))

(declare-fun tb2t754 (uni) (tuple21 (tuple21 b d) d))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b d) d)))
  (! (= (tb2t754 (t2tb754 i)) i) :pattern ((t2tb754 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 d1) d1) j) (= (t2tb754 (tb2t754 j)) j)) :pattern (
  (t2tb754 (tb2t754 j))) )))

(declare-fun t2tb4375 ((set (tuple21 (tuple21 b d) d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b d) d)))) (sort
  (set1 (tuple2 (tuple2 b1 d1) d1)) (t2tb4375 x))))

(declare-fun tb2t4375 (uni) (set (tuple21 (tuple21 b d) d)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b d) d))))
  (! (= (tb2t4375 (t2tb4375 i)) i) :pattern ((t2tb4375 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 d1) d1)) j)
     (= (t2tb4375 (tb2t4375 j)) j)) :pattern ((t2tb4375 (tb2t4375 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 b d))) (t (set d)) (x (tuple21 b d)) (y d))
  (= (mem (tuple2 (tuple2 b1 d1) d1)
  (Tuple2 (tuple2 b1 d1) d1 (t2tb692 x) (t2tb694 y))
  (times d1 (tuple2 b1 d1) (t2tb687 s) (t2tb690 t)))
  (and (mem23 x s) (mem20 y t)))))

(declare-fun t2tb4378 ((set (tuple21 (tuple21 b d) (set (tuple21 a
  c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b d) (set (tuple21 a c)))))) (sort
  (set1 (tuple2 (tuple2 b1 d1) (set1 (tuple2 a1 c1)))) (t2tb4378 x))))

(declare-fun tb2t4378 (uni) (set (tuple21 (tuple21 b d) (set (tuple21 a
  c)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b d) (set (tuple21 a c))))))
  (! (= (tb2t4378 (t2tb4378 i)) i) :pattern ((t2tb4378 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 d1) (set1 (tuple2 a1 c1)))) j)
     (= (t2tb4378 (tb2t4378 j)) j)) :pattern ((t2tb4378 (tb2t4378 j))) )))

(declare-fun t2tb4379 ((tuple21 (tuple21 b d) (set (tuple21 a c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b d) (set (tuple21 a c))))) (sort
  (tuple2 (tuple2 b1 d1) (set1 (tuple2 a1 c1))) (t2tb4379 x))))

(declare-fun tb2t4379 (uni) (tuple21 (tuple21 b d) (set (tuple21 a c))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b d) (set (tuple21 a c)))))
  (! (= (tb2t4379 (t2tb4379 i)) i) :pattern ((t2tb4379 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 d1) (set1 (tuple2 a1 c1))) j)
     (= (t2tb4379 (tb2t4379 j)) j)) :pattern ((t2tb4379 (tb2t4379 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 b d))) (t (set (set (tuple21 a c))))
  (x (tuple21 b d)) (y (set (tuple21 a c))))
  (= (mem (tuple2 (tuple2 b1 d1) (set1 (tuple2 a1 c1)))
  (Tuple2 (tuple2 b1 d1) (set1 (tuple2 a1 c1)) (t2tb692 x) (t2tb129 y))
  (times (set1 (tuple2 a1 c1)) (tuple2 b1 d1) (t2tb687 s) (t2tb128 t)))
  (and (mem23 x s) (mem11 y t)))))

(declare-fun t2tb755 ((set (tuple21 (tuple21 b d) (tuple21 a c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b d) (tuple21 a c))))) (sort
  (set1 (tuple2 (tuple2 b1 d1) (tuple2 a1 c1))) (t2tb755 x))))

(declare-fun tb2t755 (uni) (set (tuple21 (tuple21 b d) (tuple21 a c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b d) (tuple21 a c)))))
  (! (= (tb2t755 (t2tb755 i)) i) :pattern ((t2tb755 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 d1) (tuple2 a1 c1))) j)
     (= (t2tb755 (tb2t755 j)) j)) :pattern ((t2tb755 (tb2t755 j))) )))

(declare-fun t2tb756 ((tuple21 (tuple21 b d) (tuple21 a c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b d) (tuple21 a c)))) (sort
  (tuple2 (tuple2 b1 d1) (tuple2 a1 c1)) (t2tb756 x))))

(declare-fun tb2t756 (uni) (tuple21 (tuple21 b d) (tuple21 a c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b d) (tuple21 a c))))
  (! (= (tb2t756 (t2tb756 i)) i) :pattern ((t2tb756 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 d1) (tuple2 a1 c1)) j)
     (= (t2tb756 (tb2t756 j)) j)) :pattern ((t2tb756 (tb2t756 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 b d))) (t (set (tuple21 a c))) (x (tuple21 b d))
  (y (tuple21 a c)))
  (= (mem (tuple2 (tuple2 b1 d1) (tuple2 a1 c1))
  (Tuple2 (tuple2 b1 d1) (tuple2 a1 c1) (t2tb692 x) (t2tb133 y))
  (times (tuple2 a1 c1) (tuple2 b1 d1) (t2tb687 s) (t2tb129 t)))
  (and (mem23 x s) (mem10 y t)))))

(declare-fun t2tb1761 ((tuple21 (tuple21 b d) c)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b d) c))) (sort (tuple2 (tuple2 b1 d1) c1)
  (t2tb1761 x))))

(declare-fun tb2t1761 (uni) (tuple21 (tuple21 b d) c))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b d) c)))
  (! (= (tb2t1761 (t2tb1761 i)) i) :pattern ((t2tb1761 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 d1) c1) j) (= (t2tb1761 (tb2t1761 j)) j)) :pattern (
  (t2tb1761 (tb2t1761 j))) )))

(declare-fun t2tb4380 ((set (tuple21 (tuple21 b d) c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b d) c)))) (sort
  (set1 (tuple2 (tuple2 b1 d1) c1)) (t2tb4380 x))))

(declare-fun tb2t4380 (uni) (set (tuple21 (tuple21 b d) c)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b d) c))))
  (! (= (tb2t4380 (t2tb4380 i)) i) :pattern ((t2tb4380 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 d1) c1)) j)
     (= (t2tb4380 (tb2t4380 j)) j)) :pattern ((t2tb4380 (tb2t4380 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 b d))) (t (set c)) (x (tuple21 b d)) (y c))
  (= (mem (tuple2 (tuple2 b1 d1) c1)
  (Tuple2 (tuple2 b1 d1) c1 (t2tb692 x) (t2tb135 y))
  (times c1 (tuple2 b1 d1) (t2tb687 s) (t2tb132 t)))
  (and (mem23 x s) (mem7 y t)))))

(declare-fun t2tb4383 ((set (tuple21 (tuple21 b d) (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b d) (tuple21 a b))))) (sort
  (set1 (tuple2 (tuple2 b1 d1) (tuple2 a1 b1))) (t2tb4383 x))))

(declare-fun tb2t4383 (uni) (set (tuple21 (tuple21 b d) (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b d) (tuple21 a b)))))
  (! (= (tb2t4383 (t2tb4383 i)) i) :pattern ((t2tb4383 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 d1) (tuple2 a1 b1))) j)
     (= (t2tb4383 (tb2t4383 j)) j)) :pattern ((t2tb4383 (tb2t4383 j))) )))

(declare-fun t2tb4384 ((tuple21 (tuple21 b d) (tuple21 a b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b d) (tuple21 a b)))) (sort
  (tuple2 (tuple2 b1 d1) (tuple2 a1 b1)) (t2tb4384 x))))

(declare-fun tb2t4384 (uni) (tuple21 (tuple21 b d) (tuple21 a b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b d) (tuple21 a b))))
  (! (= (tb2t4384 (t2tb4384 i)) i) :pattern ((t2tb4384 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 d1) (tuple2 a1 b1)) j)
     (= (t2tb4384 (tb2t4384 j)) j)) :pattern ((t2tb4384 (tb2t4384 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 b d))) (t (set (tuple21 a b))) (x (tuple21 b d))
  (y (tuple21 a b)))
  (= (mem (tuple2 (tuple2 b1 d1) (tuple2 a1 b1))
  (Tuple2 (tuple2 b1 d1) (tuple2 a1 b1) (t2tb692 x) (t2tb13 y))
  (times (tuple2 a1 b1) (tuple2 b1 d1) (t2tb687 s) (t2tb11 t)))
  (and (mem23 x s) (mem3 y t)))))

(declare-fun t2tb764 ((tuple21 (tuple21 b d) b)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b d) b))) (sort (tuple2 (tuple2 b1 d1) b1)
  (t2tb764 x))))

(declare-fun tb2t764 (uni) (tuple21 (tuple21 b d) b))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b d) b)))
  (! (= (tb2t764 (t2tb764 i)) i) :pattern ((t2tb764 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 d1) b1) j) (= (t2tb764 (tb2t764 j)) j)) :pattern (
  (t2tb764 (tb2t764 j))) )))

(declare-fun t2tb4385 ((set (tuple21 (tuple21 b d) b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b d) b)))) (sort
  (set1 (tuple2 (tuple2 b1 d1) b1)) (t2tb4385 x))))

(declare-fun tb2t4385 (uni) (set (tuple21 (tuple21 b d) b)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b d) b))))
  (! (= (tb2t4385 (t2tb4385 i)) i) :pattern ((t2tb4385 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 d1) b1)) j)
     (= (t2tb4385 (tb2t4385 j)) j)) :pattern ((t2tb4385 (tb2t4385 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 b d))) (t (set b)) (x (tuple21 b d)) (y b))
  (= (mem (tuple2 (tuple2 b1 d1) b1)
  (Tuple2 (tuple2 b1 d1) b1 (t2tb692 x) (t2tb14 y))
  (times b1 (tuple2 b1 d1) (t2tb687 s) (t2tb12 t)))
  (and (mem23 x s) (mem2 y t)))))

(declare-fun t2tb2043 ((tuple21 (tuple21 b d) a)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b d) a))) (sort (tuple2 (tuple2 b1 d1) a1)
  (t2tb2043 x))))

(declare-fun tb2t2043 (uni) (tuple21 (tuple21 b d) a))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b d) a)))
  (! (= (tb2t2043 (t2tb2043 i)) i) :pattern ((t2tb2043 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 d1) a1) j) (= (t2tb2043 (tb2t2043 j)) j)) :pattern (
  (t2tb2043 (tb2t2043 j))) )))

(declare-fun t2tb4386 ((set (tuple21 (tuple21 b d) a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b d) a)))) (sort
  (set1 (tuple2 (tuple2 b1 d1) a1)) (t2tb4386 x))))

(declare-fun tb2t4386 (uni) (set (tuple21 (tuple21 b d) a)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b d) a))))
  (! (= (tb2t4386 (t2tb4386 i)) i) :pattern ((t2tb4386 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 d1) a1)) j)
     (= (t2tb4386 (tb2t4386 j)) j)) :pattern ((t2tb4386 (tb2t4386 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 b d))) (t (set a)) (x (tuple21 b d)) (y a))
  (= (mem (tuple2 (tuple2 b1 d1) a1)
  (Tuple2 (tuple2 b1 d1) a1 (t2tb692 x) (t2tb2 y))
  (times a1 (tuple2 b1 d1) (t2tb687 s) (t2tb1 t)))
  (and (mem23 x s) (mem1 y t)))))

;; mem_times
  (assert
  (forall ((b2 ty))
  (forall ((s (set (tuple21 b d))) (t uni) (x (tuple21 b d)) (y uni))
  (= (mem (tuple2 (tuple2 b1 d1) b2) (Tuple2 (tuple2 b1 d1) b2 (t2tb692 x) y)
  (times b2 (tuple2 b1 d1) (t2tb687 s) t)) (and (mem23 x s) (mem b2 y t))))))

(declare-fun t2tb5094 ((set (tuple21 d (tuple21 (tuple21 a b) (tuple21 c
  d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 d (tuple21 (tuple21 a b) (tuple21 c d)))))) (sort
  (set1 (tuple2 d1 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)))) (t2tb5094 x))))

(declare-fun tb2t5094 (uni) (set (tuple21 d (tuple21 (tuple21 a b) (tuple21 c
  d)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 d (tuple21 (tuple21 a b) (tuple21 c d))))))
  (! (= (tb2t5094 (t2tb5094 i)) i) :pattern ((t2tb5094 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 d1 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)))) j)
     (= (t2tb5094 (tb2t5094 j)) j)) :pattern ((t2tb5094 (tb2t5094 j))) )))

(declare-fun t2tb5095 ((tuple21 d (tuple21 (tuple21 a b) (tuple21 c
  d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 d (tuple21 (tuple21 a b) (tuple21 c d))))) (sort
  (tuple2 d1 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1))) (t2tb5095 x))))

(declare-fun tb2t5095 (uni) (tuple21 d (tuple21 (tuple21 a b) (tuple21 c
  d))))

;; BridgeL
  (assert
  (forall ((i (tuple21 d (tuple21 (tuple21 a b) (tuple21 c d)))))
  (! (= (tb2t5095 (t2tb5095 i)) i) :pattern ((t2tb5095 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 d1 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1))) j)
     (= (t2tb5095 (tb2t5095 j)) j)) :pattern ((t2tb5095 (tb2t5095 j))) )))

;; mem_times
  (assert
  (forall ((s (set d)) (t (set (tuple21 (tuple21 a b) (tuple21 c d)))) (x d)
  (y (tuple21 (tuple21 a b) (tuple21 c d))))
  (= (mem (tuple2 d1 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)))
  (Tuple2 d1 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) (t2tb694 x) (t2tb880 y))
  (times (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) d1 (t2tb690 s) (t2tb879 t)))
  (and (mem20 x s) (mem50 y t)))))

(declare-fun t2tb4397 ((set (tuple21 d (set (tuple21 b d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 d (set (tuple21 b d)))))) (sort
  (set1 (tuple2 d1 (set1 (tuple2 b1 d1)))) (t2tb4397 x))))

(declare-fun tb2t4397 (uni) (set (tuple21 d (set (tuple21 b d)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 d (set (tuple21 b d))))))
  (! (= (tb2t4397 (t2tb4397 i)) i) :pattern ((t2tb4397 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 d1 (set1 (tuple2 b1 d1)))) j)
     (= (t2tb4397 (tb2t4397 j)) j)) :pattern ((t2tb4397 (tb2t4397 j))) )))

(declare-fun t2tb4398 ((tuple21 d (set (tuple21 b d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 d (set (tuple21 b d))))) (sort
  (tuple2 d1 (set1 (tuple2 b1 d1))) (t2tb4398 x))))

(declare-fun tb2t4398 (uni) (tuple21 d (set (tuple21 b d))))

;; BridgeL
  (assert
  (forall ((i (tuple21 d (set (tuple21 b d)))))
  (! (= (tb2t4398 (t2tb4398 i)) i) :pattern ((t2tb4398 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 d1 (set1 (tuple2 b1 d1))) j)
     (= (t2tb4398 (tb2t4398 j)) j)) :pattern ((t2tb4398 (tb2t4398 j))) )))

;; mem_times
  (assert
  (forall ((s (set d)) (t (set (set (tuple21 b d)))) (x d) (y (set (tuple21 b
  d))))
  (= (mem (tuple2 d1 (set1 (tuple2 b1 d1)))
  (Tuple2 d1 (set1 (tuple2 b1 d1)) (t2tb694 x) (t2tb687 y))
  (times (set1 (tuple2 b1 d1)) d1 (t2tb690 s) (t2tb906 t)))
  (and (mem20 x s) (mem33 y t)))))

(declare-fun t2tb4399 ((set (tuple21 d (tuple21 b d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 d (tuple21 b d))))) (sort
  (set1 (tuple2 d1 (tuple2 b1 d1))) (t2tb4399 x))))

(declare-fun tb2t4399 (uni) (set (tuple21 d (tuple21 b d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 d (tuple21 b d)))))
  (! (= (tb2t4399 (t2tb4399 i)) i) :pattern ((t2tb4399 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 d1 (tuple2 b1 d1))) j)
     (= (t2tb4399 (tb2t4399 j)) j)) :pattern ((t2tb4399 (tb2t4399 j))) )))

(declare-fun t2tb820 ((tuple21 d (tuple21 b d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 d (tuple21 b d)))) (sort (tuple2 d1 (tuple2 b1 d1))
  (t2tb820 x))))

(declare-fun tb2t820 (uni) (tuple21 d (tuple21 b d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 d (tuple21 b d))))
  (! (= (tb2t820 (t2tb820 i)) i) :pattern ((t2tb820 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 d1 (tuple2 b1 d1)) j) (= (t2tb820 (tb2t820 j)) j)) :pattern (
  (t2tb820 (tb2t820 j))) )))

;; mem_times
  (assert
  (forall ((s (set d)) (t (set (tuple21 b d))) (x d) (y (tuple21 b d)))
  (= (mem (tuple2 d1 (tuple2 b1 d1))
  (Tuple2 d1 (tuple2 b1 d1) (t2tb694 x) (t2tb692 y))
  (times (tuple2 b1 d1) d1 (t2tb690 s) (t2tb687 t)))
  (and (mem20 x s) (mem23 y t)))))

(declare-fun t2tb825 ((set (tuple21 d d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 d d)))) (sort (set1 (tuple2 d1 d1)) (t2tb825 x))))

(declare-fun tb2t825 (uni) (set (tuple21 d d)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 d d))))
  (! (= (tb2t825 (t2tb825 i)) i) :pattern ((t2tb825 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 d1 d1)) j) (= (t2tb825 (tb2t825 j)) j)) :pattern (
  (t2tb825 (tb2t825 j))) )))

(declare-fun t2tb826 ((tuple21 d d)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 d d))) (sort (tuple2 d1 d1) (t2tb826 x))))

(declare-fun tb2t826 (uni) (tuple21 d d))

;; BridgeL
  (assert
  (forall ((i (tuple21 d d)))
  (! (= (tb2t826 (t2tb826 i)) i) :pattern ((t2tb826 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 d1 d1) j) (= (t2tb826 (tb2t826 j)) j)) :pattern (
  (t2tb826 (tb2t826 j))) )))

;; mem_times
  (assert
  (forall ((s (set d)) (t (set d)) (x d) (y d))
  (= (mem (tuple2 d1 d1) (Tuple2 d1 d1 (t2tb694 x) (t2tb694 y))
  (times d1 d1 (t2tb690 s) (t2tb690 t))) (and (mem20 x s) (mem20 y t)))))

(declare-fun t2tb4402 ((set (tuple21 d (set (tuple21 a c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 d (set (tuple21 a c)))))) (sort
  (set1 (tuple2 d1 (set1 (tuple2 a1 c1)))) (t2tb4402 x))))

(declare-fun tb2t4402 (uni) (set (tuple21 d (set (tuple21 a c)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 d (set (tuple21 a c))))))
  (! (= (tb2t4402 (t2tb4402 i)) i) :pattern ((t2tb4402 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 d1 (set1 (tuple2 a1 c1)))) j)
     (= (t2tb4402 (tb2t4402 j)) j)) :pattern ((t2tb4402 (tb2t4402 j))) )))

(declare-fun t2tb4403 ((tuple21 d (set (tuple21 a c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 d (set (tuple21 a c))))) (sort
  (tuple2 d1 (set1 (tuple2 a1 c1))) (t2tb4403 x))))

(declare-fun tb2t4403 (uni) (tuple21 d (set (tuple21 a c))))

;; BridgeL
  (assert
  (forall ((i (tuple21 d (set (tuple21 a c)))))
  (! (= (tb2t4403 (t2tb4403 i)) i) :pattern ((t2tb4403 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 d1 (set1 (tuple2 a1 c1))) j)
     (= (t2tb4403 (tb2t4403 j)) j)) :pattern ((t2tb4403 (tb2t4403 j))) )))

;; mem_times
  (assert
  (forall ((s (set d)) (t (set (set (tuple21 a c)))) (x d) (y (set (tuple21 a
  c))))
  (= (mem (tuple2 d1 (set1 (tuple2 a1 c1)))
  (Tuple2 d1 (set1 (tuple2 a1 c1)) (t2tb694 x) (t2tb129 y))
  (times (set1 (tuple2 a1 c1)) d1 (t2tb690 s) (t2tb128 t)))
  (and (mem20 x s) (mem11 y t)))))

(declare-fun t2tb1781 ((tuple21 d (tuple21 a c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 d (tuple21 a c)))) (sort (tuple2 d1 (tuple2 a1 c1))
  (t2tb1781 x))))

(declare-fun tb2t1781 (uni) (tuple21 d (tuple21 a c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 d (tuple21 a c))))
  (! (= (tb2t1781 (t2tb1781 i)) i) :pattern ((t2tb1781 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 d1 (tuple2 a1 c1)) j) (= (t2tb1781 (tb2t1781 j)) j)) :pattern (
  (t2tb1781 (tb2t1781 j))) )))

(declare-fun t2tb4404 ((set (tuple21 d (tuple21 a c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 d (tuple21 a c))))) (sort
  (set1 (tuple2 d1 (tuple2 a1 c1))) (t2tb4404 x))))

(declare-fun tb2t4404 (uni) (set (tuple21 d (tuple21 a c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 d (tuple21 a c)))))
  (! (= (tb2t4404 (t2tb4404 i)) i) :pattern ((t2tb4404 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 d1 (tuple2 a1 c1))) j)
     (= (t2tb4404 (tb2t4404 j)) j)) :pattern ((t2tb4404 (tb2t4404 j))) )))

;; mem_times
  (assert
  (forall ((s (set d)) (t (set (tuple21 a c))) (x d) (y (tuple21 a c)))
  (= (mem (tuple2 d1 (tuple2 a1 c1))
  (Tuple2 d1 (tuple2 a1 c1) (t2tb694 x) (t2tb133 y))
  (times (tuple2 a1 c1) d1 (t2tb690 s) (t2tb129 t)))
  (and (mem20 x s) (mem10 y t)))))

(declare-fun t2tb829 ((set (tuple21 d c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 d c)))) (sort (set1 (tuple2 d1 c1)) (t2tb829 x))))

(declare-fun tb2t829 (uni) (set (tuple21 d c)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 d c))))
  (! (= (tb2t829 (t2tb829 i)) i) :pattern ((t2tb829 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 d1 c1)) j) (= (t2tb829 (tb2t829 j)) j)) :pattern (
  (t2tb829 (tb2t829 j))) )))

(declare-fun t2tb830 ((tuple21 d c)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 d c))) (sort (tuple2 d1 c1) (t2tb830 x))))

(declare-fun tb2t830 (uni) (tuple21 d c))

;; BridgeL
  (assert
  (forall ((i (tuple21 d c)))
  (! (= (tb2t830 (t2tb830 i)) i) :pattern ((t2tb830 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 d1 c1) j) (= (t2tb830 (tb2t830 j)) j)) :pattern (
  (t2tb830 (tb2t830 j))) )))

;; mem_times
  (assert
  (forall ((s (set d)) (t (set c)) (x d) (y c))
  (= (mem (tuple2 d1 c1) (Tuple2 d1 c1 (t2tb694 x) (t2tb135 y))
  (times c1 d1 (t2tb690 s) (t2tb132 t))) (and (mem20 x s) (mem7 y t)))))

(declare-fun t2tb833 ((set (tuple21 d (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 d (tuple21 a b))))) (sort
  (set1 (tuple2 d1 (tuple2 a1 b1))) (t2tb833 x))))

(declare-fun tb2t833 (uni) (set (tuple21 d (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 d (tuple21 a b)))))
  (! (= (tb2t833 (t2tb833 i)) i) :pattern ((t2tb833 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 d1 (tuple2 a1 b1))) j)
     (= (t2tb833 (tb2t833 j)) j)) :pattern ((t2tb833 (tb2t833 j))) )))

(declare-fun t2tb834 ((tuple21 d (tuple21 a b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 d (tuple21 a b)))) (sort (tuple2 d1 (tuple2 a1 b1))
  (t2tb834 x))))

(declare-fun tb2t834 (uni) (tuple21 d (tuple21 a b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 d (tuple21 a b))))
  (! (= (tb2t834 (t2tb834 i)) i) :pattern ((t2tb834 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 d1 (tuple2 a1 b1)) j) (= (t2tb834 (tb2t834 j)) j)) :pattern (
  (t2tb834 (tb2t834 j))) )))

;; mem_times
  (assert
  (forall ((s (set d)) (t (set (tuple21 a b))) (x d) (y (tuple21 a b)))
  (= (mem (tuple2 d1 (tuple2 a1 b1))
  (Tuple2 d1 (tuple2 a1 b1) (t2tb694 x) (t2tb13 y))
  (times (tuple2 a1 b1) d1 (t2tb690 s) (t2tb11 t)))
  (and (mem20 x s) (mem3 y t)))))

(declare-fun t2tb835 ((set (tuple21 d b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 d b)))) (sort (set1 (tuple2 d1 b1)) (t2tb835 x))))

(declare-fun tb2t835 (uni) (set (tuple21 d b)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 d b))))
  (! (= (tb2t835 (t2tb835 i)) i) :pattern ((t2tb835 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 d1 b1)) j) (= (t2tb835 (tb2t835 j)) j)) :pattern (
  (t2tb835 (tb2t835 j))) )))

(declare-fun t2tb836 ((tuple21 d b)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 d b))) (sort (tuple2 d1 b1) (t2tb836 x))))

(declare-fun tb2t836 (uni) (tuple21 d b))

;; BridgeL
  (assert
  (forall ((i (tuple21 d b)))
  (! (= (tb2t836 (t2tb836 i)) i) :pattern ((t2tb836 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 d1 b1) j) (= (t2tb836 (tb2t836 j)) j)) :pattern (
  (t2tb836 (tb2t836 j))) )))

;; mem_times
  (assert
  (forall ((s (set d)) (t (set b)) (x d) (y b))
  (= (mem (tuple2 d1 b1) (Tuple2 d1 b1 (t2tb694 x) (t2tb14 y))
  (times b1 d1 (t2tb690 s) (t2tb12 t))) (and (mem20 x s) (mem2 y t)))))

(declare-fun t2tb837 ((set (tuple21 d a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 d a)))) (sort (set1 (tuple2 d1 a1)) (t2tb837 x))))

(declare-fun tb2t837 (uni) (set (tuple21 d a)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 d a))))
  (! (= (tb2t837 (t2tb837 i)) i) :pattern ((t2tb837 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 d1 a1)) j) (= (t2tb837 (tb2t837 j)) j)) :pattern (
  (t2tb837 (tb2t837 j))) )))

(declare-fun t2tb838 ((tuple21 d a)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 d a))) (sort (tuple2 d1 a1) (t2tb838 x))))

(declare-fun tb2t838 (uni) (tuple21 d a))

;; BridgeL
  (assert
  (forall ((i (tuple21 d a)))
  (! (= (tb2t838 (t2tb838 i)) i) :pattern ((t2tb838 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 d1 a1) j) (= (t2tb838 (tb2t838 j)) j)) :pattern (
  (t2tb838 (tb2t838 j))) )))

;; mem_times
  (assert
  (forall ((s (set d)) (t (set a)) (x d) (y a))
  (= (mem (tuple2 d1 a1) (Tuple2 d1 a1 (t2tb694 x) (t2tb2 y))
  (times a1 d1 (t2tb690 s) (t2tb1 t))) (and (mem20 x s) (mem1 y t)))))

;; mem_times
  (assert
  (forall ((b2 ty))
  (forall ((s (set d)) (t uni) (x d) (y uni))
  (= (mem (tuple2 d1 b2) (Tuple2 d1 b2 (t2tb694 x) y)
  (times b2 d1 (t2tb690 s) t)) (and (mem20 x s) (mem b2 y t))))))

(declare-fun t2tb5096 ((set (tuple21 (set (tuple21 a c)) (tuple21 (tuple21 a
  b) (tuple21 c d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a c)) (tuple21 (tuple21 a b)
  (tuple21 c d)))))) (sort
  (set1
  (tuple2 (set1 (tuple2 a1 c1)) (tuple2 (tuple2 a1 b1) (tuple2 c1 d1))))
  (t2tb5096 x))))

(declare-fun tb2t5096 (uni) (set (tuple21 (set (tuple21 a c))
  (tuple21 (tuple21 a b) (tuple21 c d)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a c)) (tuple21 (tuple21 a b)
  (tuple21 c d))))))
  (! (= (tb2t5096 (t2tb5096 i)) i) :pattern ((t2tb5096 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (tuple2 (set1 (tuple2 a1 c1)) (tuple2 (tuple2 a1 b1) (tuple2 c1 d1))))
     j) (= (t2tb5096 (tb2t5096 j)) j)) :pattern ((t2tb5096 (tb2t5096 j))) )))

(declare-fun t2tb5097 ((tuple21 (set (tuple21 a c)) (tuple21 (tuple21 a b)
  (tuple21 c d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a c)) (tuple21 (tuple21 a b) (tuple21 c
  d))))) (sort
  (tuple2 (set1 (tuple2 a1 c1)) (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)))
  (t2tb5097 x))))

(declare-fun tb2t5097 (uni) (tuple21 (set (tuple21 a c)) (tuple21 (tuple21 a
  b) (tuple21 c d))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a c)) (tuple21 (tuple21 a b) (tuple21 c
  d))))) (! (= (tb2t5097 (t2tb5097 i)) i) :pattern ((t2tb5097 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (tuple2 (set1 (tuple2 a1 c1)) (tuple2 (tuple2 a1 b1) (tuple2 c1 d1))) j)
     (= (t2tb5097 (tb2t5097 j)) j)) :pattern ((t2tb5097 (tb2t5097 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a c)))) (t (set (tuple21 (tuple21 a b)
  (tuple21 c d)))) (x (set (tuple21 a c))) (y (tuple21 (tuple21 a b)
  (tuple21 c d))))
  (= (mem
  (tuple2 (set1 (tuple2 a1 c1)) (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)))
  (Tuple2 (set1 (tuple2 a1 c1)) (tuple2 (tuple2 a1 b1) (tuple2 c1 d1))
  (t2tb129 x) (t2tb880 y))
  (times (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) (set1 (tuple2 a1 c1))
  (t2tb128 s) (t2tb879 t))) (and (mem11 x s) (mem50 y t)))))

(declare-fun t2tb4455 ((set (tuple21 (set (tuple21 a c)) (set (tuple21 b
  d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a c)) (set (tuple21 b d)))))) (sort
  (set1 (tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 b1 d1)))) (t2tb4455 x))))

(declare-fun tb2t4455 (uni) (set (tuple21 (set (tuple21 a c)) (set (tuple21 b
  d)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a c)) (set (tuple21 b d))))))
  (! (= (tb2t4455 (t2tb4455 i)) i) :pattern ((t2tb4455 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 b1 d1)))) j)
     (= (t2tb4455 (tb2t4455 j)) j)) :pattern ((t2tb4455 (tb2t4455 j))) )))

(declare-fun t2tb4456 ((tuple21 (set (tuple21 a c)) (set (tuple21 b
  d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a c)) (set (tuple21 b d))))) (sort
  (tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 b1 d1))) (t2tb4456 x))))

(declare-fun tb2t4456 (uni) (tuple21 (set (tuple21 a c)) (set (tuple21 b
  d))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a c)) (set (tuple21 b d)))))
  (! (= (tb2t4456 (t2tb4456 i)) i) :pattern ((t2tb4456 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 b1 d1))) j)
     (= (t2tb4456 (tb2t4456 j)) j)) :pattern ((t2tb4456 (tb2t4456 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a c)))) (t (set (set (tuple21 b d))))
  (x (set (tuple21 a c))) (y (set (tuple21 b d))))
  (= (mem (tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 b1 d1)))
  (Tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 b1 d1)) (t2tb129 x)
  (t2tb687 y))
  (times (set1 (tuple2 b1 d1)) (set1 (tuple2 a1 c1)) (t2tb128 s) (t2tb906 t)))
  (and (mem11 x s) (mem33 y t)))))

(declare-fun t2tb4457 ((set (tuple21 (set (tuple21 a c)) (tuple21 b
  d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a c)) (tuple21 b d))))) (sort
  (set1 (tuple2 (set1 (tuple2 a1 c1)) (tuple2 b1 d1))) (t2tb4457 x))))

(declare-fun tb2t4457 (uni) (set (tuple21 (set (tuple21 a c)) (tuple21 b
  d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a c)) (tuple21 b d)))))
  (! (= (tb2t4457 (t2tb4457 i)) i) :pattern ((t2tb4457 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 a1 c1)) (tuple2 b1 d1))) j)
     (= (t2tb4457 (tb2t4457 j)) j)) :pattern ((t2tb4457 (tb2t4457 j))) )))

(declare-fun t2tb4458 ((tuple21 (set (tuple21 a c)) (tuple21 b d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a c)) (tuple21 b d)))) (sort
  (tuple2 (set1 (tuple2 a1 c1)) (tuple2 b1 d1)) (t2tb4458 x))))

(declare-fun tb2t4458 (uni) (tuple21 (set (tuple21 a c)) (tuple21 b d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a c)) (tuple21 b d))))
  (! (= (tb2t4458 (t2tb4458 i)) i) :pattern ((t2tb4458 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 a1 c1)) (tuple2 b1 d1)) j)
     (= (t2tb4458 (tb2t4458 j)) j)) :pattern ((t2tb4458 (tb2t4458 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a c)))) (t (set (tuple21 b d)))
  (x (set (tuple21 a c))) (y (tuple21 b d)))
  (= (mem (tuple2 (set1 (tuple2 a1 c1)) (tuple2 b1 d1))
  (Tuple2 (set1 (tuple2 a1 c1)) (tuple2 b1 d1) (t2tb129 x) (t2tb692 y))
  (times (tuple2 b1 d1) (set1 (tuple2 a1 c1)) (t2tb128 s) (t2tb687 t)))
  (and (mem11 x s) (mem23 y t)))))

(declare-fun t2tb4459 ((set (tuple21 (set (tuple21 a c)) d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a c)) d)))) (sort
  (set1 (tuple2 (set1 (tuple2 a1 c1)) d1)) (t2tb4459 x))))

(declare-fun tb2t4459 (uni) (set (tuple21 (set (tuple21 a c)) d)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a c)) d))))
  (! (= (tb2t4459 (t2tb4459 i)) i) :pattern ((t2tb4459 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 a1 c1)) d1)) j)
     (= (t2tb4459 (tb2t4459 j)) j)) :pattern ((t2tb4459 (tb2t4459 j))) )))

(declare-fun t2tb4460 ((tuple21 (set (tuple21 a c)) d)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a c)) d))) (sort
  (tuple2 (set1 (tuple2 a1 c1)) d1) (t2tb4460 x))))

(declare-fun tb2t4460 (uni) (tuple21 (set (tuple21 a c)) d))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a c)) d)))
  (! (= (tb2t4460 (t2tb4460 i)) i) :pattern ((t2tb4460 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 a1 c1)) d1) j)
     (= (t2tb4460 (tb2t4460 j)) j)) :pattern ((t2tb4460 (tb2t4460 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a c)))) (t (set d)) (x (set (tuple21 a c)))
  (y d))
  (= (mem (tuple2 (set1 (tuple2 a1 c1)) d1)
  (Tuple2 (set1 (tuple2 a1 c1)) d1 (t2tb129 x) (t2tb694 y))
  (times d1 (set1 (tuple2 a1 c1)) (t2tb128 s) (t2tb690 t)))
  (and (mem11 x s) (mem20 y t)))))

(declare-fun t2tb4463 ((set (tuple21 (set (tuple21 a c)) (set (tuple21 a
  c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a c)) (set (tuple21 a c)))))) (sort
  (set1 (tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 a1 c1)))) (t2tb4463 x))))

(declare-fun tb2t4463 (uni) (set (tuple21 (set (tuple21 a c)) (set (tuple21 a
  c)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a c)) (set (tuple21 a c))))))
  (! (= (tb2t4463 (t2tb4463 i)) i) :pattern ((t2tb4463 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 a1 c1)))) j)
     (= (t2tb4463 (tb2t4463 j)) j)) :pattern ((t2tb4463 (tb2t4463 j))) )))

(declare-fun t2tb4464 ((tuple21 (set (tuple21 a c)) (set (tuple21 a
  c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a c)) (set (tuple21 a c))))) (sort
  (tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 a1 c1))) (t2tb4464 x))))

(declare-fun tb2t4464 (uni) (tuple21 (set (tuple21 a c)) (set (tuple21 a
  c))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a c)) (set (tuple21 a c)))))
  (! (= (tb2t4464 (t2tb4464 i)) i) :pattern ((t2tb4464 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 a1 c1))) j)
     (= (t2tb4464 (tb2t4464 j)) j)) :pattern ((t2tb4464 (tb2t4464 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a c)))) (t (set (set (tuple21 a c))))
  (x (set (tuple21 a c))) (y (set (tuple21 a c))))
  (= (mem (tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 a1 c1)))
  (Tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 a1 c1)) (t2tb129 x)
  (t2tb129 y))
  (times (set1 (tuple2 a1 c1)) (set1 (tuple2 a1 c1)) (t2tb128 s) (t2tb128 t)))
  (and (mem11 x s) (mem11 y t)))))

(declare-fun t2tb4465 ((set (tuple21 (set (tuple21 a c)) (tuple21 a
  c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a c)) (tuple21 a c))))) (sort
  (set1 (tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 c1))) (t2tb4465 x))))

(declare-fun tb2t4465 (uni) (set (tuple21 (set (tuple21 a c)) (tuple21 a
  c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a c)) (tuple21 a c)))))
  (! (= (tb2t4465 (t2tb4465 i)) i) :pattern ((t2tb4465 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 c1))) j)
     (= (t2tb4465 (tb2t4465 j)) j)) :pattern ((t2tb4465 (tb2t4465 j))) )))

(declare-fun t2tb4466 ((tuple21 (set (tuple21 a c)) (tuple21 a c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a c)) (tuple21 a c)))) (sort
  (tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 c1)) (t2tb4466 x))))

(declare-fun tb2t4466 (uni) (tuple21 (set (tuple21 a c)) (tuple21 a c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a c)) (tuple21 a c))))
  (! (= (tb2t4466 (t2tb4466 i)) i) :pattern ((t2tb4466 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 c1)) j)
     (= (t2tb4466 (tb2t4466 j)) j)) :pattern ((t2tb4466 (tb2t4466 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a c)))) (t (set (tuple21 a c)))
  (x (set (tuple21 a c))) (y (tuple21 a c)))
  (= (mem (tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 c1))
  (Tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 c1) (t2tb129 x) (t2tb133 y))
  (times (tuple2 a1 c1) (set1 (tuple2 a1 c1)) (t2tb128 s) (t2tb129 t)))
  (and (mem11 x s) (mem10 y t)))))

(declare-fun t2tb4467 ((set (tuple21 (set (tuple21 a c)) c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a c)) c)))) (sort
  (set1 (tuple2 (set1 (tuple2 a1 c1)) c1)) (t2tb4467 x))))

(declare-fun tb2t4467 (uni) (set (tuple21 (set (tuple21 a c)) c)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a c)) c))))
  (! (= (tb2t4467 (t2tb4467 i)) i) :pattern ((t2tb4467 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 a1 c1)) c1)) j)
     (= (t2tb4467 (tb2t4467 j)) j)) :pattern ((t2tb4467 (tb2t4467 j))) )))

(declare-fun t2tb4468 ((tuple21 (set (tuple21 a c)) c)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a c)) c))) (sort
  (tuple2 (set1 (tuple2 a1 c1)) c1) (t2tb4468 x))))

(declare-fun tb2t4468 (uni) (tuple21 (set (tuple21 a c)) c))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a c)) c)))
  (! (= (tb2t4468 (t2tb4468 i)) i) :pattern ((t2tb4468 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 a1 c1)) c1) j)
     (= (t2tb4468 (tb2t4468 j)) j)) :pattern ((t2tb4468 (tb2t4468 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a c)))) (t (set c)) (x (set (tuple21 a c)))
  (y c))
  (= (mem (tuple2 (set1 (tuple2 a1 c1)) c1)
  (Tuple2 (set1 (tuple2 a1 c1)) c1 (t2tb129 x) (t2tb135 y))
  (times c1 (set1 (tuple2 a1 c1)) (t2tb128 s) (t2tb132 t)))
  (and (mem11 x s) (mem7 y t)))))

(declare-fun t2tb4471 ((set (tuple21 (set (tuple21 a c)) (tuple21 a
  b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a c)) (tuple21 a b))))) (sort
  (set1 (tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 b1))) (t2tb4471 x))))

(declare-fun tb2t4471 (uni) (set (tuple21 (set (tuple21 a c)) (tuple21 a
  b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a c)) (tuple21 a b)))))
  (! (= (tb2t4471 (t2tb4471 i)) i) :pattern ((t2tb4471 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 b1))) j)
     (= (t2tb4471 (tb2t4471 j)) j)) :pattern ((t2tb4471 (tb2t4471 j))) )))

(declare-fun t2tb4472 ((tuple21 (set (tuple21 a c)) (tuple21 a b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a c)) (tuple21 a b)))) (sort
  (tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 b1)) (t2tb4472 x))))

(declare-fun tb2t4472 (uni) (tuple21 (set (tuple21 a c)) (tuple21 a b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a c)) (tuple21 a b))))
  (! (= (tb2t4472 (t2tb4472 i)) i) :pattern ((t2tb4472 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 b1)) j)
     (= (t2tb4472 (tb2t4472 j)) j)) :pattern ((t2tb4472 (tb2t4472 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a c)))) (t (set (tuple21 a b)))
  (x (set (tuple21 a c))) (y (tuple21 a b)))
  (= (mem (tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 b1))
  (Tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 b1) (t2tb129 x) (t2tb13 y))
  (times (tuple2 a1 b1) (set1 (tuple2 a1 c1)) (t2tb128 s) (t2tb11 t)))
  (and (mem11 x s) (mem3 y t)))))

(declare-fun t2tb4473 ((set (tuple21 (set (tuple21 a c)) b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a c)) b)))) (sort
  (set1 (tuple2 (set1 (tuple2 a1 c1)) b1)) (t2tb4473 x))))

(declare-fun tb2t4473 (uni) (set (tuple21 (set (tuple21 a c)) b)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a c)) b))))
  (! (= (tb2t4473 (t2tb4473 i)) i) :pattern ((t2tb4473 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 a1 c1)) b1)) j)
     (= (t2tb4473 (tb2t4473 j)) j)) :pattern ((t2tb4473 (tb2t4473 j))) )))

(declare-fun t2tb4474 ((tuple21 (set (tuple21 a c)) b)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a c)) b))) (sort
  (tuple2 (set1 (tuple2 a1 c1)) b1) (t2tb4474 x))))

(declare-fun tb2t4474 (uni) (tuple21 (set (tuple21 a c)) b))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a c)) b)))
  (! (= (tb2t4474 (t2tb4474 i)) i) :pattern ((t2tb4474 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 a1 c1)) b1) j)
     (= (t2tb4474 (tb2t4474 j)) j)) :pattern ((t2tb4474 (tb2t4474 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a c)))) (t (set b)) (x (set (tuple21 a c)))
  (y b))
  (= (mem (tuple2 (set1 (tuple2 a1 c1)) b1)
  (Tuple2 (set1 (tuple2 a1 c1)) b1 (t2tb129 x) (t2tb14 y))
  (times b1 (set1 (tuple2 a1 c1)) (t2tb128 s) (t2tb12 t)))
  (and (mem11 x s) (mem2 y t)))))

(declare-fun t2tb4475 ((set (tuple21 (set (tuple21 a c)) a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (set (tuple21 a c)) a)))) (sort
  (set1 (tuple2 (set1 (tuple2 a1 c1)) a1)) (t2tb4475 x))))

(declare-fun tb2t4475 (uni) (set (tuple21 (set (tuple21 a c)) a)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (set (tuple21 a c)) a))))
  (! (= (tb2t4475 (t2tb4475 i)) i) :pattern ((t2tb4475 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (set1 (tuple2 a1 c1)) a1)) j)
     (= (t2tb4475 (tb2t4475 j)) j)) :pattern ((t2tb4475 (tb2t4475 j))) )))

(declare-fun t2tb4476 ((tuple21 (set (tuple21 a c)) a)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set (tuple21 a c)) a))) (sort
  (tuple2 (set1 (tuple2 a1 c1)) a1) (t2tb4476 x))))

(declare-fun tb2t4476 (uni) (tuple21 (set (tuple21 a c)) a))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set (tuple21 a c)) a)))
  (! (= (tb2t4476 (t2tb4476 i)) i) :pattern ((t2tb4476 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 (tuple2 a1 c1)) a1) j)
     (= (t2tb4476 (tb2t4476 j)) j)) :pattern ((t2tb4476 (tb2t4476 j))) )))

;; mem_times
  (assert
  (forall ((s (set (set (tuple21 a c)))) (t (set a)) (x (set (tuple21 a c)))
  (y a))
  (= (mem (tuple2 (set1 (tuple2 a1 c1)) a1)
  (Tuple2 (set1 (tuple2 a1 c1)) a1 (t2tb129 x) (t2tb2 y))
  (times a1 (set1 (tuple2 a1 c1)) (t2tb128 s) (t2tb1 t)))
  (and (mem11 x s) (mem1 y t)))))

;; mem_times
  (assert
  (forall ((b2 ty))
  (forall ((s (set (set (tuple21 a c)))) (t uni) (x (set (tuple21 a c)))
  (y uni))
  (= (mem (tuple2 (set1 (tuple2 a1 c1)) b2)
  (Tuple2 (set1 (tuple2 a1 c1)) b2 (t2tb129 x) y)
  (times b2 (set1 (tuple2 a1 c1)) (t2tb128 s) t))
  (and (mem11 x s) (mem b2 y t))))))

(declare-fun t2tb5098 ((set (tuple21 (tuple21 a c) (tuple21 (tuple21 a b)
  (tuple21 c d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a c) (tuple21 (tuple21 a b) (tuple21 c
  d)))))) (sort
  (set1 (tuple2 (tuple2 a1 c1) (tuple2 (tuple2 a1 b1) (tuple2 c1 d1))))
  (t2tb5098 x))))

(declare-fun tb2t5098 (uni) (set (tuple21 (tuple21 a c) (tuple21 (tuple21 a
  b) (tuple21 c d)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a c) (tuple21 (tuple21 a b) (tuple21 c
  d)))))) (! (= (tb2t5098 (t2tb5098 i)) i) :pattern ((t2tb5098 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 a1 c1) (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)))) j)
     (= (t2tb5098 (tb2t5098 j)) j)) :pattern ((t2tb5098 (tb2t5098 j))) )))

(declare-fun t2tb5099 ((tuple21 (tuple21 a c) (tuple21 (tuple21 a b)
  (tuple21 c d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a c) (tuple21 (tuple21 a b) (tuple21 c d)))))
  (sort (tuple2 (tuple2 a1 c1) (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)))
  (t2tb5099 x))))

(declare-fun tb2t5099 (uni) (tuple21 (tuple21 a c) (tuple21 (tuple21 a b)
  (tuple21 c d))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a c) (tuple21 (tuple21 a b) (tuple21 c d)))))
  (! (= (tb2t5099 (t2tb5099 i)) i) :pattern ((t2tb5099 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 c1) (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)))
     j) (= (t2tb5099 (tb2t5099 j)) j)) :pattern ((t2tb5099 (tb2t5099 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a c))) (t (set (tuple21 (tuple21 a b) (tuple21 c
  d)))) (x (tuple21 a c)) (y (tuple21 (tuple21 a b) (tuple21 c d))))
  (= (mem (tuple2 (tuple2 a1 c1) (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)))
  (Tuple2 (tuple2 a1 c1) (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) (t2tb133 x)
  (t2tb880 y))
  (times (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) (tuple2 a1 c1) (t2tb129 s)
  (t2tb879 t))) (and (mem10 x s) (mem50 y t)))))

(declare-fun t2tb4489 ((set (tuple21 (tuple21 a c) (set (tuple21 b
  d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a c) (set (tuple21 b d)))))) (sort
  (set1 (tuple2 (tuple2 a1 c1) (set1 (tuple2 b1 d1)))) (t2tb4489 x))))

(declare-fun tb2t4489 (uni) (set (tuple21 (tuple21 a c) (set (tuple21 b
  d)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a c) (set (tuple21 b d))))))
  (! (= (tb2t4489 (t2tb4489 i)) i) :pattern ((t2tb4489 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 c1) (set1 (tuple2 b1 d1)))) j)
     (= (t2tb4489 (tb2t4489 j)) j)) :pattern ((t2tb4489 (tb2t4489 j))) )))

(declare-fun t2tb4490 ((tuple21 (tuple21 a c) (set (tuple21 b d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a c) (set (tuple21 b d))))) (sort
  (tuple2 (tuple2 a1 c1) (set1 (tuple2 b1 d1))) (t2tb4490 x))))

(declare-fun tb2t4490 (uni) (tuple21 (tuple21 a c) (set (tuple21 b d))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a c) (set (tuple21 b d)))))
  (! (= (tb2t4490 (t2tb4490 i)) i) :pattern ((t2tb4490 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 c1) (set1 (tuple2 b1 d1))) j)
     (= (t2tb4490 (tb2t4490 j)) j)) :pattern ((t2tb4490 (tb2t4490 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a c))) (t (set (set (tuple21 b d))))
  (x (tuple21 a c)) (y (set (tuple21 b d))))
  (= (mem (tuple2 (tuple2 a1 c1) (set1 (tuple2 b1 d1)))
  (Tuple2 (tuple2 a1 c1) (set1 (tuple2 b1 d1)) (t2tb133 x) (t2tb687 y))
  (times (set1 (tuple2 b1 d1)) (tuple2 a1 c1) (t2tb129 s) (t2tb906 t)))
  (and (mem10 x s) (mem33 y t)))))

(declare-fun t2tb686 ((set (tuple21 (tuple21 a c) (tuple21 b d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a c) (tuple21 b d))))) (sort
  (set1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))) (t2tb686 x))))

(declare-fun tb2t686 (uni) (set (tuple21 (tuple21 a c) (tuple21 b d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a c) (tuple21 b d)))))
  (! (= (tb2t686 (t2tb686 i)) i) :pattern ((t2tb686 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))) j)
     (= (t2tb686 (tb2t686 j)) j)) :pattern ((t2tb686 (tb2t686 j))) )))

(declare-fun t2tb691 ((tuple21 (tuple21 a c) (tuple21 b d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a c) (tuple21 b d)))) (sort
  (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) (t2tb691 x))))

(declare-fun tb2t691 (uni) (tuple21 (tuple21 a c) (tuple21 b d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a c) (tuple21 b d))))
  (! (= (tb2t691 (t2tb691 i)) i) :pattern ((t2tb691 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)) j)
     (= (t2tb691 (tb2t691 j)) j)) :pattern ((t2tb691 (tb2t691 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a c))) (t (set (tuple21 b d))) (x (tuple21 a c))
  (y (tuple21 b d)))
  (= (mem (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))
  (Tuple2 (tuple2 a1 c1) (tuple2 b1 d1) (t2tb133 x) (t2tb692 y))
  (times (tuple2 b1 d1) (tuple2 a1 c1) (t2tb129 s) (t2tb687 t)))
  (and (mem10 x s) (mem23 y t)))))

(declare-fun t2tb847 ((set (tuple21 (tuple21 a c) d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a c) d)))) (sort
  (set1 (tuple2 (tuple2 a1 c1) d1)) (t2tb847 x))))

(declare-fun tb2t847 (uni) (set (tuple21 (tuple21 a c) d)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a c) d))))
  (! (= (tb2t847 (t2tb847 i)) i) :pattern ((t2tb847 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 c1) d1)) j)
     (= (t2tb847 (tb2t847 j)) j)) :pattern ((t2tb847 (tb2t847 j))) )))

(declare-fun t2tb848 ((tuple21 (tuple21 a c) d)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a c) d))) (sort (tuple2 (tuple2 a1 c1) d1)
  (t2tb848 x))))

(declare-fun tb2t848 (uni) (tuple21 (tuple21 a c) d))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a c) d)))
  (! (= (tb2t848 (t2tb848 i)) i) :pattern ((t2tb848 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 c1) d1) j) (= (t2tb848 (tb2t848 j)) j)) :pattern (
  (t2tb848 (tb2t848 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a c))) (t (set d)) (x (tuple21 a c)) (y d))
  (= (mem (tuple2 (tuple2 a1 c1) d1)
  (Tuple2 (tuple2 a1 c1) d1 (t2tb133 x) (t2tb694 y))
  (times d1 (tuple2 a1 c1) (t2tb129 s) (t2tb690 t)))
  (and (mem10 x s) (mem20 y t)))))

(declare-fun t2tb4493 ((set (tuple21 (tuple21 a c) (set (tuple21 a
  c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a c) (set (tuple21 a c)))))) (sort
  (set1 (tuple2 (tuple2 a1 c1) (set1 (tuple2 a1 c1)))) (t2tb4493 x))))

(declare-fun tb2t4493 (uni) (set (tuple21 (tuple21 a c) (set (tuple21 a
  c)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a c) (set (tuple21 a c))))))
  (! (= (tb2t4493 (t2tb4493 i)) i) :pattern ((t2tb4493 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 c1) (set1 (tuple2 a1 c1)))) j)
     (= (t2tb4493 (tb2t4493 j)) j)) :pattern ((t2tb4493 (tb2t4493 j))) )))

(declare-fun t2tb4494 ((tuple21 (tuple21 a c) (set (tuple21 a c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a c) (set (tuple21 a c))))) (sort
  (tuple2 (tuple2 a1 c1) (set1 (tuple2 a1 c1))) (t2tb4494 x))))

(declare-fun tb2t4494 (uni) (tuple21 (tuple21 a c) (set (tuple21 a c))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a c) (set (tuple21 a c)))))
  (! (= (tb2t4494 (t2tb4494 i)) i) :pattern ((t2tb4494 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 c1) (set1 (tuple2 a1 c1))) j)
     (= (t2tb4494 (tb2t4494 j)) j)) :pattern ((t2tb4494 (tb2t4494 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a c))) (t (set (set (tuple21 a c))))
  (x (tuple21 a c)) (y (set (tuple21 a c))))
  (= (mem (tuple2 (tuple2 a1 c1) (set1 (tuple2 a1 c1)))
  (Tuple2 (tuple2 a1 c1) (set1 (tuple2 a1 c1)) (t2tb133 x) (t2tb129 y))
  (times (set1 (tuple2 a1 c1)) (tuple2 a1 c1) (t2tb129 s) (t2tb128 t)))
  (and (mem10 x s) (mem11 y t)))))

(declare-fun t2tb156 ((tuple21 (tuple21 a c) (tuple21 a c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a c) (tuple21 a c)))) (sort
  (tuple2 (tuple2 a1 c1) (tuple2 a1 c1)) (t2tb156 x))))

(declare-fun tb2t156 (uni) (tuple21 (tuple21 a c) (tuple21 a c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a c) (tuple21 a c))))
  (! (= (tb2t156 (t2tb156 i)) i) :pattern ((t2tb156 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 c1) (tuple2 a1 c1)) j)
     (= (t2tb156 (tb2t156 j)) j)) :pattern ((t2tb156 (tb2t156 j))) )))

(declare-fun t2tb157 ((set (tuple21 (tuple21 a c) (tuple21 a c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a c) (tuple21 a c))))) (sort
  (set1 (tuple2 (tuple2 a1 c1) (tuple2 a1 c1))) (t2tb157 x))))

(declare-fun tb2t157 (uni) (set (tuple21 (tuple21 a c) (tuple21 a c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a c) (tuple21 a c)))))
  (! (= (tb2t157 (t2tb157 i)) i) :pattern ((t2tb157 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 c1) (tuple2 a1 c1))) j)
     (= (t2tb157 (tb2t157 j)) j)) :pattern ((t2tb157 (tb2t157 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a c))) (t (set (tuple21 a c))) (x (tuple21 a c))
  (y (tuple21 a c)))
  (= (mem (tuple2 (tuple2 a1 c1) (tuple2 a1 c1))
  (Tuple2 (tuple2 a1 c1) (tuple2 a1 c1) (t2tb133 x) (t2tb133 y))
  (times (tuple2 a1 c1) (tuple2 a1 c1) (t2tb129 s) (t2tb129 t)))
  (and (mem10 x s) (mem10 y t)))))

(declare-fun t2tb162 ((set (tuple21 (tuple21 a c) c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a c) c)))) (sort
  (set1 (tuple2 (tuple2 a1 c1) c1)) (t2tb162 x))))

(declare-fun tb2t162 (uni) (set (tuple21 (tuple21 a c) c)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a c) c))))
  (! (= (tb2t162 (t2tb162 i)) i) :pattern ((t2tb162 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 c1) c1)) j)
     (= (t2tb162 (tb2t162 j)) j)) :pattern ((t2tb162 (tb2t162 j))) )))

(declare-fun t2tb163 ((tuple21 (tuple21 a c) c)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a c) c))) (sort (tuple2 (tuple2 a1 c1) c1)
  (t2tb163 x))))

(declare-fun tb2t163 (uni) (tuple21 (tuple21 a c) c))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a c) c)))
  (! (= (tb2t163 (t2tb163 i)) i) :pattern ((t2tb163 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 c1) c1) j) (= (t2tb163 (tb2t163 j)) j)) :pattern (
  (t2tb163 (tb2t163 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a c))) (t (set c)) (x (tuple21 a c)) (y c))
  (= (mem (tuple2 (tuple2 a1 c1) c1)
  (Tuple2 (tuple2 a1 c1) c1 (t2tb133 x) (t2tb135 y))
  (times c1 (tuple2 a1 c1) (t2tb129 s) (t2tb132 t)))
  (and (mem10 x s) (mem7 y t)))))

(declare-fun t2tb166 ((set (tuple21 (tuple21 a c) (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a c) (tuple21 a b))))) (sort
  (set1 (tuple2 (tuple2 a1 c1) (tuple2 a1 b1))) (t2tb166 x))))

(declare-fun tb2t166 (uni) (set (tuple21 (tuple21 a c) (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a c) (tuple21 a b)))))
  (! (= (tb2t166 (t2tb166 i)) i) :pattern ((t2tb166 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 c1) (tuple2 a1 b1))) j)
     (= (t2tb166 (tb2t166 j)) j)) :pattern ((t2tb166 (tb2t166 j))) )))

(declare-fun t2tb167 ((tuple21 (tuple21 a c) (tuple21 a b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a c) (tuple21 a b)))) (sort
  (tuple2 (tuple2 a1 c1) (tuple2 a1 b1)) (t2tb167 x))))

(declare-fun tb2t167 (uni) (tuple21 (tuple21 a c) (tuple21 a b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a c) (tuple21 a b))))
  (! (= (tb2t167 (t2tb167 i)) i) :pattern ((t2tb167 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 c1) (tuple2 a1 b1)) j)
     (= (t2tb167 (tb2t167 j)) j)) :pattern ((t2tb167 (tb2t167 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a c))) (t (set (tuple21 a b))) (x (tuple21 a c))
  (y (tuple21 a b)))
  (= (mem (tuple2 (tuple2 a1 c1) (tuple2 a1 b1))
  (Tuple2 (tuple2 a1 c1) (tuple2 a1 b1) (t2tb133 x) (t2tb13 y))
  (times (tuple2 a1 b1) (tuple2 a1 c1) (t2tb129 s) (t2tb11 t)))
  (and (mem10 x s) (mem3 y t)))))

(declare-fun t2tb168 ((set (tuple21 (tuple21 a c) b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a c) b)))) (sort
  (set1 (tuple2 (tuple2 a1 c1) b1)) (t2tb168 x))))

(declare-fun tb2t168 (uni) (set (tuple21 (tuple21 a c) b)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a c) b))))
  (! (= (tb2t168 (t2tb168 i)) i) :pattern ((t2tb168 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 c1) b1)) j)
     (= (t2tb168 (tb2t168 j)) j)) :pattern ((t2tb168 (tb2t168 j))) )))

(declare-fun t2tb169 ((tuple21 (tuple21 a c) b)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a c) b))) (sort (tuple2 (tuple2 a1 c1) b1)
  (t2tb169 x))))

(declare-fun tb2t169 (uni) (tuple21 (tuple21 a c) b))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a c) b)))
  (! (= (tb2t169 (t2tb169 i)) i) :pattern ((t2tb169 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 c1) b1) j) (= (t2tb169 (tb2t169 j)) j)) :pattern (
  (t2tb169 (tb2t169 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a c))) (t (set b)) (x (tuple21 a c)) (y b))
  (= (mem (tuple2 (tuple2 a1 c1) b1)
  (Tuple2 (tuple2 a1 c1) b1 (t2tb133 x) (t2tb14 y))
  (times b1 (tuple2 a1 c1) (t2tb129 s) (t2tb12 t)))
  (and (mem10 x s) (mem2 y t)))))

(declare-fun t2tb170 ((set (tuple21 (tuple21 a c) a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a c) a)))) (sort
  (set1 (tuple2 (tuple2 a1 c1) a1)) (t2tb170 x))))

(declare-fun tb2t170 (uni) (set (tuple21 (tuple21 a c) a)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a c) a))))
  (! (= (tb2t170 (t2tb170 i)) i) :pattern ((t2tb170 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 c1) a1)) j)
     (= (t2tb170 (tb2t170 j)) j)) :pattern ((t2tb170 (tb2t170 j))) )))

(declare-fun t2tb171 ((tuple21 (tuple21 a c) a)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a c) a))) (sort (tuple2 (tuple2 a1 c1) a1)
  (t2tb171 x))))

(declare-fun tb2t171 (uni) (tuple21 (tuple21 a c) a))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a c) a)))
  (! (= (tb2t171 (t2tb171 i)) i) :pattern ((t2tb171 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 c1) a1) j) (= (t2tb171 (tb2t171 j)) j)) :pattern (
  (t2tb171 (tb2t171 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a c))) (t (set a)) (x (tuple21 a c)) (y a))
  (= (mem (tuple2 (tuple2 a1 c1) a1)
  (Tuple2 (tuple2 a1 c1) a1 (t2tb133 x) (t2tb2 y))
  (times a1 (tuple2 a1 c1) (t2tb129 s) (t2tb1 t)))
  (and (mem10 x s) (mem1 y t)))))

;; mem_times
  (assert
  (forall ((b2 ty))
  (forall ((s (set (tuple21 a c))) (t uni) (x (tuple21 a c)) (y uni))
  (= (mem (tuple2 (tuple2 a1 c1) b2) (Tuple2 (tuple2 a1 c1) b2 (t2tb133 x) y)
  (times b2 (tuple2 a1 c1) (t2tb129 s) t)) (and (mem10 x s) (mem b2 y t))))))

(declare-fun t2tb5100 ((set (tuple21 c (tuple21 (tuple21 a b) (tuple21 c
  d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 c (tuple21 (tuple21 a b) (tuple21 c d)))))) (sort
  (set1 (tuple2 c1 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)))) (t2tb5100 x))))

(declare-fun tb2t5100 (uni) (set (tuple21 c (tuple21 (tuple21 a b) (tuple21 c
  d)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 c (tuple21 (tuple21 a b) (tuple21 c d))))))
  (! (= (tb2t5100 (t2tb5100 i)) i) :pattern ((t2tb5100 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 c1 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)))) j)
     (= (t2tb5100 (tb2t5100 j)) j)) :pattern ((t2tb5100 (tb2t5100 j))) )))

(declare-fun t2tb5101 ((tuple21 c (tuple21 (tuple21 a b) (tuple21 c
  d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 c (tuple21 (tuple21 a b) (tuple21 c d))))) (sort
  (tuple2 c1 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1))) (t2tb5101 x))))

(declare-fun tb2t5101 (uni) (tuple21 c (tuple21 (tuple21 a b) (tuple21 c
  d))))

;; BridgeL
  (assert
  (forall ((i (tuple21 c (tuple21 (tuple21 a b) (tuple21 c d)))))
  (! (= (tb2t5101 (t2tb5101 i)) i) :pattern ((t2tb5101 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 c1 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1))) j)
     (= (t2tb5101 (tb2t5101 j)) j)) :pattern ((t2tb5101 (tb2t5101 j))) )))

;; mem_times
  (assert
  (forall ((s (set c)) (t (set (tuple21 (tuple21 a b) (tuple21 c d)))) (x c)
  (y (tuple21 (tuple21 a b) (tuple21 c d))))
  (= (mem (tuple2 c1 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)))
  (Tuple2 c1 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) (t2tb135 x) (t2tb880 y))
  (times (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) c1 (t2tb132 s) (t2tb879 t)))
  (and (mem7 x s) (mem50 y t)))))

(declare-fun t2tb4505 ((set (tuple21 c (set (tuple21 b d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 c (set (tuple21 b d)))))) (sort
  (set1 (tuple2 c1 (set1 (tuple2 b1 d1)))) (t2tb4505 x))))

(declare-fun tb2t4505 (uni) (set (tuple21 c (set (tuple21 b d)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 c (set (tuple21 b d))))))
  (! (= (tb2t4505 (t2tb4505 i)) i) :pattern ((t2tb4505 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 c1 (set1 (tuple2 b1 d1)))) j)
     (= (t2tb4505 (tb2t4505 j)) j)) :pattern ((t2tb4505 (tb2t4505 j))) )))

(declare-fun t2tb4506 ((tuple21 c (set (tuple21 b d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 c (set (tuple21 b d))))) (sort
  (tuple2 c1 (set1 (tuple2 b1 d1))) (t2tb4506 x))))

(declare-fun tb2t4506 (uni) (tuple21 c (set (tuple21 b d))))

;; BridgeL
  (assert
  (forall ((i (tuple21 c (set (tuple21 b d)))))
  (! (= (tb2t4506 (t2tb4506 i)) i) :pattern ((t2tb4506 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 c1 (set1 (tuple2 b1 d1))) j)
     (= (t2tb4506 (tb2t4506 j)) j)) :pattern ((t2tb4506 (tb2t4506 j))) )))

;; mem_times
  (assert
  (forall ((s (set c)) (t (set (set (tuple21 b d)))) (x c) (y (set (tuple21 b
  d))))
  (= (mem (tuple2 c1 (set1 (tuple2 b1 d1)))
  (Tuple2 c1 (set1 (tuple2 b1 d1)) (t2tb135 x) (t2tb687 y))
  (times (set1 (tuple2 b1 d1)) c1 (t2tb132 s) (t2tb906 t)))
  (and (mem7 x s) (mem33 y t)))))

(declare-fun t2tb1782 ((tuple21 c (tuple21 b d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 c (tuple21 b d)))) (sort (tuple2 c1 (tuple2 b1 d1))
  (t2tb1782 x))))

(declare-fun tb2t1782 (uni) (tuple21 c (tuple21 b d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 c (tuple21 b d))))
  (! (= (tb2t1782 (t2tb1782 i)) i) :pattern ((t2tb1782 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 c1 (tuple2 b1 d1)) j) (= (t2tb1782 (tb2t1782 j)) j)) :pattern (
  (t2tb1782 (tb2t1782 j))) )))

(declare-fun t2tb4507 ((set (tuple21 c (tuple21 b d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 c (tuple21 b d))))) (sort
  (set1 (tuple2 c1 (tuple2 b1 d1))) (t2tb4507 x))))

(declare-fun tb2t4507 (uni) (set (tuple21 c (tuple21 b d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 c (tuple21 b d)))))
  (! (= (tb2t4507 (t2tb4507 i)) i) :pattern ((t2tb4507 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 c1 (tuple2 b1 d1))) j)
     (= (t2tb4507 (tb2t4507 j)) j)) :pattern ((t2tb4507 (tb2t4507 j))) )))

;; mem_times
  (assert
  (forall ((s (set c)) (t (set (tuple21 b d))) (x c) (y (tuple21 b d)))
  (= (mem (tuple2 c1 (tuple2 b1 d1))
  (Tuple2 c1 (tuple2 b1 d1) (t2tb135 x) (t2tb692 y))
  (times (tuple2 b1 d1) c1 (t2tb132 s) (t2tb687 t)))
  (and (mem7 x s) (mem23 y t)))))

(declare-fun t2tb689 ((set (tuple21 c d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 c d)))) (sort (set1 (tuple2 c1 d1)) (t2tb689 x))))

(declare-fun tb2t689 (uni) (set (tuple21 c d)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 c d))))
  (! (= (tb2t689 (t2tb689 i)) i) :pattern ((t2tb689 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 c1 d1)) j) (= (t2tb689 (tb2t689 j)) j)) :pattern (
  (t2tb689 (tb2t689 j))) )))

(declare-fun t2tb693 ((tuple21 c d)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 c d))) (sort (tuple2 c1 d1) (t2tb693 x))))

(declare-fun tb2t693 (uni) (tuple21 c d))

;; BridgeL
  (assert
  (forall ((i (tuple21 c d)))
  (! (= (tb2t693 (t2tb693 i)) i) :pattern ((t2tb693 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 c1 d1) j) (= (t2tb693 (tb2t693 j)) j)) :pattern (
  (t2tb693 (tb2t693 j))) )))

;; mem_times
  (assert
  (forall ((s (set c)) (t (set d)) (x c) (y d))
  (= (mem (tuple2 c1 d1) (Tuple2 c1 d1 (t2tb135 x) (t2tb694 y))
  (times d1 c1 (t2tb132 s) (t2tb690 t))) (and (mem7 x s) (mem20 y t)))))

(declare-fun t2tb4510 ((set (tuple21 c (set (tuple21 a c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 c (set (tuple21 a c)))))) (sort
  (set1 (tuple2 c1 (set1 (tuple2 a1 c1)))) (t2tb4510 x))))

(declare-fun tb2t4510 (uni) (set (tuple21 c (set (tuple21 a c)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 c (set (tuple21 a c))))))
  (! (= (tb2t4510 (t2tb4510 i)) i) :pattern ((t2tb4510 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 c1 (set1 (tuple2 a1 c1)))) j)
     (= (t2tb4510 (tb2t4510 j)) j)) :pattern ((t2tb4510 (tb2t4510 j))) )))

(declare-fun t2tb4511 ((tuple21 c (set (tuple21 a c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 c (set (tuple21 a c))))) (sort
  (tuple2 c1 (set1 (tuple2 a1 c1))) (t2tb4511 x))))

(declare-fun tb2t4511 (uni) (tuple21 c (set (tuple21 a c))))

;; BridgeL
  (assert
  (forall ((i (tuple21 c (set (tuple21 a c)))))
  (! (= (tb2t4511 (t2tb4511 i)) i) :pattern ((t2tb4511 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 c1 (set1 (tuple2 a1 c1))) j)
     (= (t2tb4511 (tb2t4511 j)) j)) :pattern ((t2tb4511 (tb2t4511 j))) )))

;; mem_times
  (assert
  (forall ((s (set c)) (t (set (set (tuple21 a c)))) (x c) (y (set (tuple21 a
  c))))
  (= (mem (tuple2 c1 (set1 (tuple2 a1 c1)))
  (Tuple2 c1 (set1 (tuple2 a1 c1)) (t2tb135 x) (t2tb129 y))
  (times (set1 (tuple2 a1 c1)) c1 (t2tb132 s) (t2tb128 t)))
  (and (mem7 x s) (mem11 y t)))))

(declare-fun t2tb210 ((set (tuple21 c (tuple21 a c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 c (tuple21 a c))))) (sort
  (set1 (tuple2 c1 (tuple2 a1 c1))) (t2tb210 x))))

(declare-fun tb2t210 (uni) (set (tuple21 c (tuple21 a c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 c (tuple21 a c)))))
  (! (= (tb2t210 (t2tb210 i)) i) :pattern ((t2tb210 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 c1 (tuple2 a1 c1))) j)
     (= (t2tb210 (tb2t210 j)) j)) :pattern ((t2tb210 (tb2t210 j))) )))

(declare-fun t2tb211 ((tuple21 c (tuple21 a c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 c (tuple21 a c)))) (sort (tuple2 c1 (tuple2 a1 c1))
  (t2tb211 x))))

(declare-fun tb2t211 (uni) (tuple21 c (tuple21 a c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 c (tuple21 a c))))
  (! (= (tb2t211 (t2tb211 i)) i) :pattern ((t2tb211 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 c1 (tuple2 a1 c1)) j) (= (t2tb211 (tb2t211 j)) j)) :pattern (
  (t2tb211 (tb2t211 j))) )))

;; mem_times
  (assert
  (forall ((s (set c)) (t (set (tuple21 a c))) (x c) (y (tuple21 a c)))
  (= (mem (tuple2 c1 (tuple2 a1 c1))
  (Tuple2 c1 (tuple2 a1 c1) (t2tb135 x) (t2tb133 y))
  (times (tuple2 a1 c1) c1 (t2tb132 s) (t2tb129 t)))
  (and (mem7 x s) (mem10 y t)))))

(declare-fun t2tb216 ((set (tuple21 c c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 c c)))) (sort (set1 (tuple2 c1 c1)) (t2tb216 x))))

(declare-fun tb2t216 (uni) (set (tuple21 c c)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 c c))))
  (! (= (tb2t216 (t2tb216 i)) i) :pattern ((t2tb216 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 c1 c1)) j) (= (t2tb216 (tb2t216 j)) j)) :pattern (
  (t2tb216 (tb2t216 j))) )))

(declare-fun t2tb217 ((tuple21 c c)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 c c))) (sort (tuple2 c1 c1) (t2tb217 x))))

(declare-fun tb2t217 (uni) (tuple21 c c))

;; BridgeL
  (assert
  (forall ((i (tuple21 c c)))
  (! (= (tb2t217 (t2tb217 i)) i) :pattern ((t2tb217 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 c1 c1) j) (= (t2tb217 (tb2t217 j)) j)) :pattern (
  (t2tb217 (tb2t217 j))) )))

;; mem_times
  (assert
  (forall ((s (set c)) (t (set c)) (x c) (y c))
  (= (mem (tuple2 c1 c1) (Tuple2 c1 c1 (t2tb135 x) (t2tb135 y))
  (times c1 c1 (t2tb132 s) (t2tb132 t))) (and (mem7 x s) (mem7 y t)))))

(declare-fun t2tb220 ((set (tuple21 c (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 c (tuple21 a b))))) (sort
  (set1 (tuple2 c1 (tuple2 a1 b1))) (t2tb220 x))))

(declare-fun tb2t220 (uni) (set (tuple21 c (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 c (tuple21 a b)))))
  (! (= (tb2t220 (t2tb220 i)) i) :pattern ((t2tb220 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 c1 (tuple2 a1 b1))) j)
     (= (t2tb220 (tb2t220 j)) j)) :pattern ((t2tb220 (tb2t220 j))) )))

(declare-fun t2tb221 ((tuple21 c (tuple21 a b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 c (tuple21 a b)))) (sort (tuple2 c1 (tuple2 a1 b1))
  (t2tb221 x))))

(declare-fun tb2t221 (uni) (tuple21 c (tuple21 a b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 c (tuple21 a b))))
  (! (= (tb2t221 (t2tb221 i)) i) :pattern ((t2tb221 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 c1 (tuple2 a1 b1)) j) (= (t2tb221 (tb2t221 j)) j)) :pattern (
  (t2tb221 (tb2t221 j))) )))

;; mem_times
  (assert
  (forall ((s (set c)) (t (set (tuple21 a b))) (x c) (y (tuple21 a b)))
  (= (mem (tuple2 c1 (tuple2 a1 b1))
  (Tuple2 c1 (tuple2 a1 b1) (t2tb135 x) (t2tb13 y))
  (times (tuple2 a1 b1) c1 (t2tb132 s) (t2tb11 t)))
  (and (mem7 x s) (mem3 y t)))))

(declare-fun t2tb222 ((set (tuple21 c b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 c b)))) (sort (set1 (tuple2 c1 b1)) (t2tb222 x))))

(declare-fun tb2t222 (uni) (set (tuple21 c b)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 c b))))
  (! (= (tb2t222 (t2tb222 i)) i) :pattern ((t2tb222 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 c1 b1)) j) (= (t2tb222 (tb2t222 j)) j)) :pattern (
  (t2tb222 (tb2t222 j))) )))

(declare-fun t2tb223 ((tuple21 c b)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 c b))) (sort (tuple2 c1 b1) (t2tb223 x))))

(declare-fun tb2t223 (uni) (tuple21 c b))

;; BridgeL
  (assert
  (forall ((i (tuple21 c b)))
  (! (= (tb2t223 (t2tb223 i)) i) :pattern ((t2tb223 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 c1 b1) j) (= (t2tb223 (tb2t223 j)) j)) :pattern (
  (t2tb223 (tb2t223 j))) )))

;; mem_times
  (assert
  (forall ((s (set c)) (t (set b)) (x c) (y b))
  (= (mem (tuple2 c1 b1) (Tuple2 c1 b1 (t2tb135 x) (t2tb14 y))
  (times b1 c1 (t2tb132 s) (t2tb12 t))) (and (mem7 x s) (mem2 y t)))))

(declare-fun t2tb224 ((set (tuple21 c a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 c a)))) (sort (set1 (tuple2 c1 a1)) (t2tb224 x))))

(declare-fun tb2t224 (uni) (set (tuple21 c a)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 c a))))
  (! (= (tb2t224 (t2tb224 i)) i) :pattern ((t2tb224 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 c1 a1)) j) (= (t2tb224 (tb2t224 j)) j)) :pattern (
  (t2tb224 (tb2t224 j))) )))

(declare-fun t2tb225 ((tuple21 c a)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 c a))) (sort (tuple2 c1 a1) (t2tb225 x))))

(declare-fun tb2t225 (uni) (tuple21 c a))

;; BridgeL
  (assert
  (forall ((i (tuple21 c a)))
  (! (= (tb2t225 (t2tb225 i)) i) :pattern ((t2tb225 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 c1 a1) j) (= (t2tb225 (tb2t225 j)) j)) :pattern (
  (t2tb225 (tb2t225 j))) )))

;; mem_times
  (assert
  (forall ((s (set c)) (t (set a)) (x c) (y a))
  (= (mem (tuple2 c1 a1) (Tuple2 c1 a1 (t2tb135 x) (t2tb2 y))
  (times a1 c1 (t2tb132 s) (t2tb1 t))) (and (mem7 x s) (mem1 y t)))))

;; mem_times
  (assert
  (forall ((b2 ty))
  (forall ((s (set c)) (t uni) (x c) (y uni))
  (= (mem (tuple2 c1 b2) (Tuple2 c1 b2 (t2tb135 x) y)
  (times b2 c1 (t2tb132 s) t)) (and (mem7 x s) (mem b2 y t))))))

(declare-fun t2tb5102 ((set (tuple21 (tuple21 a b) (tuple21 (tuple21 a b)
  (tuple21 c d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) (tuple21 (tuple21 a b) (tuple21 c
  d)))))) (sort
  (set1 (tuple2 (tuple2 a1 b1) (tuple2 (tuple2 a1 b1) (tuple2 c1 d1))))
  (t2tb5102 x))))

(declare-fun tb2t5102 (uni) (set (tuple21 (tuple21 a b) (tuple21 (tuple21 a
  b) (tuple21 c d)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a b) (tuple21 (tuple21 a b) (tuple21 c
  d)))))) (! (= (tb2t5102 (t2tb5102 i)) i) :pattern ((t2tb5102 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 a1 b1) (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)))) j)
     (= (t2tb5102 (tb2t5102 j)) j)) :pattern ((t2tb5102 (tb2t5102 j))) )))

(declare-fun t2tb5103 ((tuple21 (tuple21 a b) (tuple21 (tuple21 a b)
  (tuple21 c d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a b) (tuple21 (tuple21 a b) (tuple21 c d)))))
  (sort (tuple2 (tuple2 a1 b1) (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)))
  (t2tb5103 x))))

(declare-fun tb2t5103 (uni) (tuple21 (tuple21 a b) (tuple21 (tuple21 a b)
  (tuple21 c d))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a b) (tuple21 (tuple21 a b) (tuple21 c d)))))
  (! (= (tb2t5103 (t2tb5103 i)) i) :pattern ((t2tb5103 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 b1) (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)))
     j) (= (t2tb5103 (tb2t5103 j)) j)) :pattern ((t2tb5103 (tb2t5103 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (tuple21 (tuple21 a b) (tuple21 c
  d)))) (x (tuple21 a b)) (y (tuple21 (tuple21 a b) (tuple21 c d))))
  (= (mem (tuple2 (tuple2 a1 b1) (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)))
  (Tuple2 (tuple2 a1 b1) (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) (t2tb13 x)
  (t2tb880 y))
  (times (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) (tuple2 a1 b1) (t2tb11 s)
  (t2tb879 t))) (and (mem3 x s) (mem50 y t)))))

(declare-fun t2tb4540 ((set (tuple21 (tuple21 a b) (set (tuple21 b
  d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) (set (tuple21 b d)))))) (sort
  (set1 (tuple2 (tuple2 a1 b1) (set1 (tuple2 b1 d1)))) (t2tb4540 x))))

(declare-fun tb2t4540 (uni) (set (tuple21 (tuple21 a b) (set (tuple21 b
  d)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a b) (set (tuple21 b d))))))
  (! (= (tb2t4540 (t2tb4540 i)) i) :pattern ((t2tb4540 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 b1) (set1 (tuple2 b1 d1)))) j)
     (= (t2tb4540 (tb2t4540 j)) j)) :pattern ((t2tb4540 (tb2t4540 j))) )))

(declare-fun t2tb4541 ((tuple21 (tuple21 a b) (set (tuple21 b d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a b) (set (tuple21 b d))))) (sort
  (tuple2 (tuple2 a1 b1) (set1 (tuple2 b1 d1))) (t2tb4541 x))))

(declare-fun tb2t4541 (uni) (tuple21 (tuple21 a b) (set (tuple21 b d))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a b) (set (tuple21 b d)))))
  (! (= (tb2t4541 (t2tb4541 i)) i) :pattern ((t2tb4541 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 b1) (set1 (tuple2 b1 d1))) j)
     (= (t2tb4541 (tb2t4541 j)) j)) :pattern ((t2tb4541 (tb2t4541 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (set (tuple21 b d))))
  (x (tuple21 a b)) (y (set (tuple21 b d))))
  (= (mem (tuple2 (tuple2 a1 b1) (set1 (tuple2 b1 d1)))
  (Tuple2 (tuple2 a1 b1) (set1 (tuple2 b1 d1)) (t2tb13 x) (t2tb687 y))
  (times (set1 (tuple2 b1 d1)) (tuple2 a1 b1) (t2tb11 s) (t2tb906 t)))
  (and (mem3 x s) (mem33 y t)))))

(declare-fun t2tb4542 ((set (tuple21 (tuple21 a b) (tuple21 b d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) (tuple21 b d))))) (sort
  (set1 (tuple2 (tuple2 a1 b1) (tuple2 b1 d1))) (t2tb4542 x))))

(declare-fun tb2t4542 (uni) (set (tuple21 (tuple21 a b) (tuple21 b d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a b) (tuple21 b d)))))
  (! (= (tb2t4542 (t2tb4542 i)) i) :pattern ((t2tb4542 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 b1) (tuple2 b1 d1))) j)
     (= (t2tb4542 (tb2t4542 j)) j)) :pattern ((t2tb4542 (tb2t4542 j))) )))

(declare-fun t2tb4543 ((tuple21 (tuple21 a b) (tuple21 b d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a b) (tuple21 b d)))) (sort
  (tuple2 (tuple2 a1 b1) (tuple2 b1 d1)) (t2tb4543 x))))

(declare-fun tb2t4543 (uni) (tuple21 (tuple21 a b) (tuple21 b d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a b) (tuple21 b d))))
  (! (= (tb2t4543 (t2tb4543 i)) i) :pattern ((t2tb4543 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 b1) (tuple2 b1 d1)) j)
     (= (t2tb4543 (tb2t4543 j)) j)) :pattern ((t2tb4543 (tb2t4543 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (tuple21 b d))) (x (tuple21 a b))
  (y (tuple21 b d)))
  (= (mem (tuple2 (tuple2 a1 b1) (tuple2 b1 d1))
  (Tuple2 (tuple2 a1 b1) (tuple2 b1 d1) (t2tb13 x) (t2tb692 y))
  (times (tuple2 b1 d1) (tuple2 a1 b1) (t2tb11 s) (t2tb687 t)))
  (and (mem3 x s) (mem23 y t)))))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (tuple21 c d))) (x (tuple21 a b))
  (y (tuple21 c d)))
  (= (mem50
  (tb2t880 (Tuple2 (tuple2 a1 b1) (tuple2 c1 d1) (t2tb13 x) (t2tb693 y)))
  (tb2t879 (times (tuple2 c1 d1) (tuple2 a1 b1) (t2tb11 s) (t2tb689 t))))
  (and (mem3 x s) (mem (tuple2 c1 d1) (t2tb693 y) (t2tb689 t))))))

(declare-fun t2tb881 ((set (tuple21 (tuple21 a b) d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) d)))) (sort
  (set1 (tuple2 (tuple2 a1 b1) d1)) (t2tb881 x))))

(declare-fun tb2t881 (uni) (set (tuple21 (tuple21 a b) d)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a b) d))))
  (! (= (tb2t881 (t2tb881 i)) i) :pattern ((t2tb881 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 b1) d1)) j)
     (= (t2tb881 (tb2t881 j)) j)) :pattern ((t2tb881 (tb2t881 j))) )))

(declare-fun t2tb882 ((tuple21 (tuple21 a b) d)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a b) d))) (sort (tuple2 (tuple2 a1 b1) d1)
  (t2tb882 x))))

(declare-fun tb2t882 (uni) (tuple21 (tuple21 a b) d))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a b) d)))
  (! (= (tb2t882 (t2tb882 i)) i) :pattern ((t2tb882 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 b1) d1) j) (= (t2tb882 (tb2t882 j)) j)) :pattern (
  (t2tb882 (tb2t882 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a b))) (t (set d)) (x (tuple21 a b)) (y d))
  (= (mem (tuple2 (tuple2 a1 b1) d1)
  (Tuple2 (tuple2 a1 b1) d1 (t2tb13 x) (t2tb694 y))
  (times d1 (tuple2 a1 b1) (t2tb11 s) (t2tb690 t)))
  (and (mem3 x s) (mem20 y t)))))

(declare-fun t2tb4546 ((set (tuple21 (tuple21 a b) (set (tuple21 a
  c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) (set (tuple21 a c)))))) (sort
  (set1 (tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 c1)))) (t2tb4546 x))))

(declare-fun tb2t4546 (uni) (set (tuple21 (tuple21 a b) (set (tuple21 a
  c)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a b) (set (tuple21 a c))))))
  (! (= (tb2t4546 (t2tb4546 i)) i) :pattern ((t2tb4546 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 c1)))) j)
     (= (t2tb4546 (tb2t4546 j)) j)) :pattern ((t2tb4546 (tb2t4546 j))) )))

(declare-fun t2tb4547 ((tuple21 (tuple21 a b) (set (tuple21 a c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a b) (set (tuple21 a c))))) (sort
  (tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 c1))) (t2tb4547 x))))

(declare-fun tb2t4547 (uni) (tuple21 (tuple21 a b) (set (tuple21 a c))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a b) (set (tuple21 a c)))))
  (! (= (tb2t4547 (t2tb4547 i)) i) :pattern ((t2tb4547 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 c1))) j)
     (= (t2tb4547 (tb2t4547 j)) j)) :pattern ((t2tb4547 (tb2t4547 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (set (tuple21 a c))))
  (x (tuple21 a b)) (y (set (tuple21 a c))))
  (= (mem (tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 c1)))
  (Tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 c1)) (t2tb13 x) (t2tb129 y))
  (times (set1 (tuple2 a1 c1)) (tuple2 a1 b1) (t2tb11 s) (t2tb128 t)))
  (and (mem3 x s) (mem11 y t)))))

(declare-fun t2tb238 ((set (tuple21 (tuple21 a b) (tuple21 a c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) (tuple21 a c))))) (sort
  (set1 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1))) (t2tb238 x))))

(declare-fun tb2t238 (uni) (set (tuple21 (tuple21 a b) (tuple21 a c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a b) (tuple21 a c)))))
  (! (= (tb2t238 (t2tb238 i)) i) :pattern ((t2tb238 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1))) j)
     (= (t2tb238 (tb2t238 j)) j)) :pattern ((t2tb238 (tb2t238 j))) )))

(declare-fun t2tb239 ((tuple21 (tuple21 a b) (tuple21 a c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a b) (tuple21 a c)))) (sort
  (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) (t2tb239 x))))

(declare-fun tb2t239 (uni) (tuple21 (tuple21 a b) (tuple21 a c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a b) (tuple21 a c))))
  (! (= (tb2t239 (t2tb239 i)) i) :pattern ((t2tb239 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)) j)
     (= (t2tb239 (tb2t239 j)) j)) :pattern ((t2tb239 (tb2t239 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (tuple21 a c))) (x (tuple21 a b))
  (y (tuple21 a c)))
  (= (mem (tuple2 (tuple2 a1 b1) (tuple2 a1 c1))
  (Tuple2 (tuple2 a1 b1) (tuple2 a1 c1) (t2tb13 x) (t2tb133 y))
  (times (tuple2 a1 c1) (tuple2 a1 b1) (t2tb11 s) (t2tb129 t)))
  (and (mem3 x s) (mem10 y t)))))

(declare-fun t2tb244 ((tuple21 (tuple21 a b) c)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a b) c))) (sort (tuple2 (tuple2 a1 b1) c1)
  (t2tb244 x))))

(declare-fun tb2t244 (uni) (tuple21 (tuple21 a b) c))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a b) c)))
  (! (= (tb2t244 (t2tb244 i)) i) :pattern ((t2tb244 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 b1) c1) j) (= (t2tb244 (tb2t244 j)) j)) :pattern (
  (t2tb244 (tb2t244 j))) )))

(declare-fun t2tb245 ((set (tuple21 (tuple21 a b) c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) c)))) (sort
  (set1 (tuple2 (tuple2 a1 b1) c1)) (t2tb245 x))))

(declare-fun tb2t245 (uni) (set (tuple21 (tuple21 a b) c)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a b) c))))
  (! (= (tb2t245 (t2tb245 i)) i) :pattern ((t2tb245 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 b1) c1)) j)
     (= (t2tb245 (tb2t245 j)) j)) :pattern ((t2tb245 (tb2t245 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a b))) (t (set c)) (x (tuple21 a b)) (y c))
  (= (mem (tuple2 (tuple2 a1 b1) c1)
  (Tuple2 (tuple2 a1 b1) c1 (t2tb13 x) (t2tb135 y))
  (times c1 (tuple2 a1 b1) (t2tb11 s) (t2tb132 t)))
  (and (mem3 x s) (mem7 y t)))))

(declare-fun t2tb25 ((set (tuple21 (tuple21 a b) (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) (tuple21 a b))))) (sort
  (set1 (tuple2 (tuple2 a1 b1) (tuple2 a1 b1))) (t2tb25 x))))

(declare-fun tb2t25 (uni) (set (tuple21 (tuple21 a b) (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a b) (tuple21 a b)))))
  (! (= (tb2t25 (t2tb25 i)) i) :pattern ((t2tb25 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 b1) (tuple2 a1 b1))) j)
     (= (t2tb25 (tb2t25 j)) j)) :pattern ((t2tb25 (tb2t25 j))) )))

(declare-fun t2tb26 ((tuple21 (tuple21 a b) (tuple21 a b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a b) (tuple21 a b)))) (sort
  (tuple2 (tuple2 a1 b1) (tuple2 a1 b1)) (t2tb26 x))))

(declare-fun tb2t26 (uni) (tuple21 (tuple21 a b) (tuple21 a b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a b) (tuple21 a b))))
  (! (= (tb2t26 (t2tb26 i)) i) :pattern ((t2tb26 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 b1) (tuple2 a1 b1)) j)
     (= (t2tb26 (tb2t26 j)) j)) :pattern ((t2tb26 (tb2t26 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (tuple21 a b))) (x (tuple21 a b))
  (y (tuple21 a b)))
  (= (mem (tuple2 (tuple2 a1 b1) (tuple2 a1 b1))
  (Tuple2 (tuple2 a1 b1) (tuple2 a1 b1) (t2tb13 x) (t2tb13 y))
  (times (tuple2 a1 b1) (tuple2 a1 b1) (t2tb11 s) (t2tb11 t)))
  (and (mem3 x s) (mem3 y t)))))

(declare-fun t2tb27 ((set (tuple21 (tuple21 a b) b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) b)))) (sort
  (set1 (tuple2 (tuple2 a1 b1) b1)) (t2tb27 x))))

(declare-fun tb2t27 (uni) (set (tuple21 (tuple21 a b) b)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a b) b))))
  (! (= (tb2t27 (t2tb27 i)) i) :pattern ((t2tb27 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 b1) b1)) j)
     (= (t2tb27 (tb2t27 j)) j)) :pattern ((t2tb27 (tb2t27 j))) )))

(declare-fun t2tb28 ((tuple21 (tuple21 a b) b)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a b) b))) (sort (tuple2 (tuple2 a1 b1) b1)
  (t2tb28 x))))

(declare-fun tb2t28 (uni) (tuple21 (tuple21 a b) b))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a b) b)))
  (! (= (tb2t28 (t2tb28 i)) i) :pattern ((t2tb28 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 b1) b1) j) (= (t2tb28 (tb2t28 j)) j)) :pattern (
  (t2tb28 (tb2t28 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a b))) (t (set b)) (x (tuple21 a b)) (y b))
  (= (mem (tuple2 (tuple2 a1 b1) b1)
  (Tuple2 (tuple2 a1 b1) b1 (t2tb13 x) (t2tb14 y))
  (times b1 (tuple2 a1 b1) (t2tb11 s) (t2tb12 t)))
  (and (mem3 x s) (mem2 y t)))))

(declare-fun t2tb29 ((set (tuple21 (tuple21 a b) a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) a)))) (sort
  (set1 (tuple2 (tuple2 a1 b1) a1)) (t2tb29 x))))

(declare-fun tb2t29 (uni) (set (tuple21 (tuple21 a b) a)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a b) a))))
  (! (= (tb2t29 (t2tb29 i)) i) :pattern ((t2tb29 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 b1) a1)) j)
     (= (t2tb29 (tb2t29 j)) j)) :pattern ((t2tb29 (tb2t29 j))) )))

(declare-fun t2tb30 ((tuple21 (tuple21 a b) a)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a b) a))) (sort (tuple2 (tuple2 a1 b1) a1)
  (t2tb30 x))))

(declare-fun tb2t30 (uni) (tuple21 (tuple21 a b) a))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a b) a)))
  (! (= (tb2t30 (t2tb30 i)) i) :pattern ((t2tb30 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 b1) a1) j) (= (t2tb30 (tb2t30 j)) j)) :pattern (
  (t2tb30 (tb2t30 j))) )))

;; mem_times
  (assert
  (forall ((s (set (tuple21 a b))) (t (set a)) (x (tuple21 a b)) (y a))
  (= (mem (tuple2 (tuple2 a1 b1) a1)
  (Tuple2 (tuple2 a1 b1) a1 (t2tb13 x) (t2tb2 y))
  (times a1 (tuple2 a1 b1) (t2tb11 s) (t2tb1 t)))
  (and (mem3 x s) (mem1 y t)))))

;; mem_times
  (assert
  (forall ((b2 ty))
  (forall ((s (set (tuple21 a b))) (t uni) (x (tuple21 a b)) (y uni))
  (= (mem (tuple2 (tuple2 a1 b1) b2) (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) y)
  (times b2 (tuple2 a1 b1) (t2tb11 s) t)) (and (mem3 x s) (mem b2 y t))))))

(declare-fun t2tb5104 ((set (tuple21 b (tuple21 (tuple21 a b) (tuple21 c
  d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 b (tuple21 (tuple21 a b) (tuple21 c d)))))) (sort
  (set1 (tuple2 b1 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)))) (t2tb5104 x))))

(declare-fun tb2t5104 (uni) (set (tuple21 b (tuple21 (tuple21 a b) (tuple21 c
  d)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 b (tuple21 (tuple21 a b) (tuple21 c d))))))
  (! (= (tb2t5104 (t2tb5104 i)) i) :pattern ((t2tb5104 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 b1 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)))) j)
     (= (t2tb5104 (tb2t5104 j)) j)) :pattern ((t2tb5104 (tb2t5104 j))) )))

(declare-fun t2tb5105 ((tuple21 b (tuple21 (tuple21 a b) (tuple21 c
  d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 b (tuple21 (tuple21 a b) (tuple21 c d))))) (sort
  (tuple2 b1 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1))) (t2tb5105 x))))

(declare-fun tb2t5105 (uni) (tuple21 b (tuple21 (tuple21 a b) (tuple21 c
  d))))

;; BridgeL
  (assert
  (forall ((i (tuple21 b (tuple21 (tuple21 a b) (tuple21 c d)))))
  (! (= (tb2t5105 (t2tb5105 i)) i) :pattern ((t2tb5105 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 b1 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1))) j)
     (= (t2tb5105 (tb2t5105 j)) j)) :pattern ((t2tb5105 (tb2t5105 j))) )))

;; mem_times
  (assert
  (forall ((s (set b)) (t (set (tuple21 (tuple21 a b) (tuple21 c d)))) (x b)
  (y (tuple21 (tuple21 a b) (tuple21 c d))))
  (= (mem (tuple2 b1 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)))
  (Tuple2 b1 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) (t2tb14 x) (t2tb880 y))
  (times (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) b1 (t2tb12 s) (t2tb879 t)))
  (and (mem2 x s) (mem50 y t)))))

(declare-fun t2tb4558 ((set (tuple21 b (set (tuple21 b d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 b (set (tuple21 b d)))))) (sort
  (set1 (tuple2 b1 (set1 (tuple2 b1 d1)))) (t2tb4558 x))))

(declare-fun tb2t4558 (uni) (set (tuple21 b (set (tuple21 b d)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 b (set (tuple21 b d))))))
  (! (= (tb2t4558 (t2tb4558 i)) i) :pattern ((t2tb4558 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 b1 (set1 (tuple2 b1 d1)))) j)
     (= (t2tb4558 (tb2t4558 j)) j)) :pattern ((t2tb4558 (tb2t4558 j))) )))

(declare-fun t2tb4559 ((tuple21 b (set (tuple21 b d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 b (set (tuple21 b d))))) (sort
  (tuple2 b1 (set1 (tuple2 b1 d1))) (t2tb4559 x))))

(declare-fun tb2t4559 (uni) (tuple21 b (set (tuple21 b d))))

;; BridgeL
  (assert
  (forall ((i (tuple21 b (set (tuple21 b d)))))
  (! (= (tb2t4559 (t2tb4559 i)) i) :pattern ((t2tb4559 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 b1 (set1 (tuple2 b1 d1))) j)
     (= (t2tb4559 (tb2t4559 j)) j)) :pattern ((t2tb4559 (tb2t4559 j))) )))

;; mem_times
  (assert
  (forall ((s (set b)) (t (set (set (tuple21 b d)))) (x b) (y (set (tuple21 b
  d))))
  (= (mem (tuple2 b1 (set1 (tuple2 b1 d1)))
  (Tuple2 b1 (set1 (tuple2 b1 d1)) (t2tb14 x) (t2tb687 y))
  (times (set1 (tuple2 b1 d1)) b1 (t2tb12 s) (t2tb906 t)))
  (and (mem2 x s) (mem33 y t)))))

(declare-fun t2tb888 ((tuple21 b (tuple21 b d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 b (tuple21 b d)))) (sort (tuple2 b1 (tuple2 b1 d1))
  (t2tb888 x))))

(declare-fun tb2t888 (uni) (tuple21 b (tuple21 b d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 b (tuple21 b d))))
  (! (= (tb2t888 (t2tb888 i)) i) :pattern ((t2tb888 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 b1 (tuple2 b1 d1)) j) (= (t2tb888 (tb2t888 j)) j)) :pattern (
  (t2tb888 (tb2t888 j))) )))

(declare-fun t2tb4560 ((set (tuple21 b (tuple21 b d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 b (tuple21 b d))))) (sort
  (set1 (tuple2 b1 (tuple2 b1 d1))) (t2tb4560 x))))

(declare-fun tb2t4560 (uni) (set (tuple21 b (tuple21 b d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 b (tuple21 b d)))))
  (! (= (tb2t4560 (t2tb4560 i)) i) :pattern ((t2tb4560 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 b1 (tuple2 b1 d1))) j)
     (= (t2tb4560 (tb2t4560 j)) j)) :pattern ((t2tb4560 (tb2t4560 j))) )))

;; mem_times
  (assert
  (forall ((s (set b)) (t (set (tuple21 b d))) (x b) (y (tuple21 b d)))
  (= (mem (tuple2 b1 (tuple2 b1 d1))
  (Tuple2 b1 (tuple2 b1 d1) (t2tb14 x) (t2tb692 y))
  (times (tuple2 b1 d1) b1 (t2tb12 s) (t2tb687 t)))
  (and (mem2 x s) (mem23 y t)))))

;; mem_times
  (assert
  (forall ((s (set b)) (t (set d)) (x b) (y d))
  (= (mem23 (tb2t692 (Tuple2 b1 d1 (t2tb14 x) (t2tb694 y))) (times10 s t))
  (and (mem2 x s) (mem20 y t)))))

(declare-fun t2tb4563 ((tuple21 b (set (tuple21 a c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 b (set (tuple21 a c))))) (sort
  (tuple2 b1 (set1 (tuple2 a1 c1))) (t2tb4563 x))))

(declare-fun tb2t4563 (uni) (tuple21 b (set (tuple21 a c))))

;; BridgeL
  (assert
  (forall ((i (tuple21 b (set (tuple21 a c)))))
  (! (= (tb2t4563 (t2tb4563 i)) i) :pattern ((t2tb4563 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 b1 (set1 (tuple2 a1 c1))) j)
     (= (t2tb4563 (tb2t4563 j)) j)) :pattern ((t2tb4563 (tb2t4563 j))) )))

(declare-fun t2tb4564 ((set (tuple21 b (set (tuple21 a c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 b (set (tuple21 a c)))))) (sort
  (set1 (tuple2 b1 (set1 (tuple2 a1 c1)))) (t2tb4564 x))))

(declare-fun tb2t4564 (uni) (set (tuple21 b (set (tuple21 a c)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 b (set (tuple21 a c))))))
  (! (= (tb2t4564 (t2tb4564 i)) i) :pattern ((t2tb4564 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 b1 (set1 (tuple2 a1 c1)))) j)
     (= (t2tb4564 (tb2t4564 j)) j)) :pattern ((t2tb4564 (tb2t4564 j))) )))

;; mem_times
  (assert
  (forall ((s (set b)) (t (set (set (tuple21 a c)))) (x b) (y (set (tuple21 a
  c))))
  (= (mem (tuple2 b1 (set1 (tuple2 a1 c1)))
  (Tuple2 b1 (set1 (tuple2 a1 c1)) (t2tb14 x) (t2tb129 y))
  (times (set1 (tuple2 a1 c1)) b1 (t2tb12 s) (t2tb128 t)))
  (and (mem2 x s) (mem11 y t)))))

(declare-fun t2tb248 ((set (tuple21 b (tuple21 a c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 b (tuple21 a c))))) (sort
  (set1 (tuple2 b1 (tuple2 a1 c1))) (t2tb248 x))))

(declare-fun tb2t248 (uni) (set (tuple21 b (tuple21 a c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 b (tuple21 a c)))))
  (! (= (tb2t248 (t2tb248 i)) i) :pattern ((t2tb248 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 b1 (tuple2 a1 c1))) j)
     (= (t2tb248 (tb2t248 j)) j)) :pattern ((t2tb248 (tb2t248 j))) )))

(declare-fun t2tb249 ((tuple21 b (tuple21 a c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 b (tuple21 a c)))) (sort (tuple2 b1 (tuple2 a1 c1))
  (t2tb249 x))))

(declare-fun tb2t249 (uni) (tuple21 b (tuple21 a c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 b (tuple21 a c))))
  (! (= (tb2t249 (t2tb249 i)) i) :pattern ((t2tb249 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 b1 (tuple2 a1 c1)) j) (= (t2tb249 (tb2t249 j)) j)) :pattern (
  (t2tb249 (tb2t249 j))) )))

;; mem_times
  (assert
  (forall ((s (set b)) (t (set (tuple21 a c))) (x b) (y (tuple21 a c)))
  (= (mem (tuple2 b1 (tuple2 a1 c1))
  (Tuple2 b1 (tuple2 a1 c1) (t2tb14 x) (t2tb133 y))
  (times (tuple2 a1 c1) b1 (t2tb12 s) (t2tb129 t)))
  (and (mem2 x s) (mem10 y t)))))

(declare-fun t2tb131 ((set (tuple21 b c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 b c)))) (sort (set1 (tuple2 b1 c1)) (t2tb131 x))))

(declare-fun tb2t131 (uni) (set (tuple21 b c)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 b c))))
  (! (= (tb2t131 (t2tb131 i)) i) :pattern ((t2tb131 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 b1 c1)) j) (= (t2tb131 (tb2t131 j)) j)) :pattern (
  (t2tb131 (tb2t131 j))) )))

(declare-fun t2tb134 ((tuple21 b c)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 b c))) (sort (tuple2 b1 c1) (t2tb134 x))))

(declare-fun tb2t134 (uni) (tuple21 b c))

;; BridgeL
  (assert
  (forall ((i (tuple21 b c)))
  (! (= (tb2t134 (t2tb134 i)) i) :pattern ((t2tb134 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 b1 c1) j) (= (t2tb134 (tb2t134 j)) j)) :pattern (
  (t2tb134 (tb2t134 j))) )))

;; mem_times
  (assert
  (forall ((s (set b)) (t (set c)) (x b) (y c))
  (= (mem (tuple2 b1 c1) (Tuple2 b1 c1 (t2tb14 x) (t2tb135 y))
  (times c1 b1 (t2tb12 s) (t2tb132 t))) (and (mem2 x s) (mem7 y t)))))

(declare-fun t2tb33 ((tuple21 b (tuple21 a b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 b (tuple21 a b)))) (sort (tuple2 b1 (tuple2 a1 b1))
  (t2tb33 x))))

(declare-fun tb2t33 (uni) (tuple21 b (tuple21 a b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 b (tuple21 a b))))
  (! (= (tb2t33 (t2tb33 i)) i) :pattern ((t2tb33 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 b1 (tuple2 a1 b1)) j) (= (t2tb33 (tb2t33 j)) j)) :pattern (
  (t2tb33 (tb2t33 j))) )))

(declare-fun t2tb34 ((set (tuple21 b (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 b (tuple21 a b))))) (sort
  (set1 (tuple2 b1 (tuple2 a1 b1))) (t2tb34 x))))

(declare-fun tb2t34 (uni) (set (tuple21 b (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 b (tuple21 a b)))))
  (! (= (tb2t34 (t2tb34 i)) i) :pattern ((t2tb34 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 b1 (tuple2 a1 b1))) j)
     (= (t2tb34 (tb2t34 j)) j)) :pattern ((t2tb34 (tb2t34 j))) )))

;; mem_times
  (assert
  (forall ((s (set b)) (t (set (tuple21 a b))) (x b) (y (tuple21 a b)))
  (= (mem (tuple2 b1 (tuple2 a1 b1))
  (Tuple2 b1 (tuple2 a1 b1) (t2tb14 x) (t2tb13 y))
  (times (tuple2 a1 b1) b1 (t2tb12 s) (t2tb11 t)))
  (and (mem2 x s) (mem3 y t)))))

(declare-fun t2tb35 ((set (tuple21 b b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 b b)))) (sort (set1 (tuple2 b1 b1)) (t2tb35 x))))

(declare-fun tb2t35 (uni) (set (tuple21 b b)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 b b))))
  (! (= (tb2t35 (t2tb35 i)) i) :pattern ((t2tb35 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 b1 b1)) j) (= (t2tb35 (tb2t35 j)) j)) :pattern (
  (t2tb35 (tb2t35 j))) )))

(declare-fun t2tb36 ((tuple21 b b)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 b b))) (sort (tuple2 b1 b1) (t2tb36 x))))

(declare-fun tb2t36 (uni) (tuple21 b b))

;; BridgeL
  (assert
  (forall ((i (tuple21 b b)))
  (! (= (tb2t36 (t2tb36 i)) i) :pattern ((t2tb36 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 b1 b1) j) (= (t2tb36 (tb2t36 j)) j)) :pattern (
  (t2tb36 (tb2t36 j))) )))

;; mem_times
  (assert
  (forall ((s (set b)) (t (set b)) (x b) (y b))
  (= (mem (tuple2 b1 b1) (Tuple2 b1 b1 (t2tb14 x) (t2tb14 y))
  (times b1 b1 (t2tb12 s) (t2tb12 t))) (and (mem2 x s) (mem2 y t)))))

(declare-fun t2tb37 ((set (tuple21 b a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 b a)))) (sort (set1 (tuple2 b1 a1)) (t2tb37 x))))

(declare-fun tb2t37 (uni) (set (tuple21 b a)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 b a))))
  (! (= (tb2t37 (t2tb37 i)) i) :pattern ((t2tb37 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 b1 a1)) j) (= (t2tb37 (tb2t37 j)) j)) :pattern (
  (t2tb37 (tb2t37 j))) )))

(declare-fun t2tb38 ((tuple21 b a)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 b a))) (sort (tuple2 b1 a1) (t2tb38 x))))

(declare-fun tb2t38 (uni) (tuple21 b a))

;; BridgeL
  (assert
  (forall ((i (tuple21 b a)))
  (! (= (tb2t38 (t2tb38 i)) i) :pattern ((t2tb38 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 b1 a1) j) (= (t2tb38 (tb2t38 j)) j)) :pattern (
  (t2tb38 (tb2t38 j))) )))

;; mem_times
  (assert
  (forall ((s (set b)) (t (set a)) (x b) (y a))
  (= (mem (tuple2 b1 a1) (Tuple2 b1 a1 (t2tb14 x) (t2tb2 y))
  (times a1 b1 (t2tb12 s) (t2tb1 t))) (and (mem2 x s) (mem1 y t)))))

;; mem_times
  (assert
  (forall ((b2 ty))
  (forall ((s (set b)) (t uni) (x b) (y uni))
  (= (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) y)
  (times b2 b1 (t2tb12 s) t)) (and (mem2 x s) (mem b2 y t))))))

(declare-fun t2tb5106 ((set (tuple21 a (tuple21 (tuple21 a b) (tuple21 c
  d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (tuple21 (tuple21 a b) (tuple21 c d)))))) (sort
  (set1 (tuple2 a1 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)))) (t2tb5106 x))))

(declare-fun tb2t5106 (uni) (set (tuple21 a (tuple21 (tuple21 a b) (tuple21 c
  d)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (tuple21 (tuple21 a b) (tuple21 c d))))))
  (! (= (tb2t5106 (t2tb5106 i)) i) :pattern ((t2tb5106 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)))) j)
     (= (t2tb5106 (tb2t5106 j)) j)) :pattern ((t2tb5106 (tb2t5106 j))) )))

(declare-fun t2tb5107 ((tuple21 a (tuple21 (tuple21 a b) (tuple21 c
  d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (tuple21 (tuple21 a b) (tuple21 c d))))) (sort
  (tuple2 a1 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1))) (t2tb5107 x))))

(declare-fun tb2t5107 (uni) (tuple21 a (tuple21 (tuple21 a b) (tuple21 c
  d))))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (tuple21 (tuple21 a b) (tuple21 c d)))))
  (! (= (tb2t5107 (t2tb5107 i)) i) :pattern ((t2tb5107 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1))) j)
     (= (t2tb5107 (tb2t5107 j)) j)) :pattern ((t2tb5107 (tb2t5107 j))) )))

;; mem_times
  (assert
  (forall ((s (set a)) (t (set (tuple21 (tuple21 a b) (tuple21 c d)))) (x a)
  (y (tuple21 (tuple21 a b) (tuple21 c d))))
  (= (mem (tuple2 a1 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)))
  (Tuple2 a1 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) (t2tb2 x) (t2tb880 y))
  (times (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) a1 (t2tb1 s) (t2tb879 t)))
  (and (mem1 x s) (mem50 y t)))))

(declare-fun t2tb4575 ((set (tuple21 a (set (tuple21 b d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (set (tuple21 b d)))))) (sort
  (set1 (tuple2 a1 (set1 (tuple2 b1 d1)))) (t2tb4575 x))))

(declare-fun tb2t4575 (uni) (set (tuple21 a (set (tuple21 b d)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (set (tuple21 b d))))))
  (! (= (tb2t4575 (t2tb4575 i)) i) :pattern ((t2tb4575 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (set1 (tuple2 b1 d1)))) j)
     (= (t2tb4575 (tb2t4575 j)) j)) :pattern ((t2tb4575 (tb2t4575 j))) )))

(declare-fun t2tb4576 ((tuple21 a (set (tuple21 b d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (set (tuple21 b d))))) (sort
  (tuple2 a1 (set1 (tuple2 b1 d1))) (t2tb4576 x))))

(declare-fun tb2t4576 (uni) (tuple21 a (set (tuple21 b d))))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (set (tuple21 b d)))))
  (! (= (tb2t4576 (t2tb4576 i)) i) :pattern ((t2tb4576 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (set1 (tuple2 b1 d1))) j)
     (= (t2tb4576 (tb2t4576 j)) j)) :pattern ((t2tb4576 (tb2t4576 j))) )))

;; mem_times
  (assert
  (forall ((s (set a)) (t (set (set (tuple21 b d)))) (x a) (y (set (tuple21 b
  d))))
  (= (mem (tuple2 a1 (set1 (tuple2 b1 d1)))
  (Tuple2 a1 (set1 (tuple2 b1 d1)) (t2tb2 x) (t2tb687 y))
  (times (set1 (tuple2 b1 d1)) a1 (t2tb1 s) (t2tb906 t)))
  (and (mem1 x s) (mem33 y t)))))

(declare-fun t2tb2055 ((tuple21 a (tuple21 b d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (tuple21 b d)))) (sort (tuple2 a1 (tuple2 b1 d1))
  (t2tb2055 x))))

(declare-fun tb2t2055 (uni) (tuple21 a (tuple21 b d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (tuple21 b d))))
  (! (= (tb2t2055 (t2tb2055 i)) i) :pattern ((t2tb2055 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (tuple2 b1 d1)) j) (= (t2tb2055 (tb2t2055 j)) j)) :pattern (
  (t2tb2055 (tb2t2055 j))) )))

(declare-fun t2tb4577 ((set (tuple21 a (tuple21 b d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (tuple21 b d))))) (sort
  (set1 (tuple2 a1 (tuple2 b1 d1))) (t2tb4577 x))))

(declare-fun tb2t4577 (uni) (set (tuple21 a (tuple21 b d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (tuple21 b d)))))
  (! (= (tb2t4577 (t2tb4577 i)) i) :pattern ((t2tb4577 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (tuple2 b1 d1))) j)
     (= (t2tb4577 (tb2t4577 j)) j)) :pattern ((t2tb4577 (tb2t4577 j))) )))

;; mem_times
  (assert
  (forall ((s (set a)) (t (set (tuple21 b d))) (x a) (y (tuple21 b d)))
  (= (mem (tuple2 a1 (tuple2 b1 d1))
  (Tuple2 a1 (tuple2 b1 d1) (t2tb2 x) (t2tb692 y))
  (times (tuple2 b1 d1) a1 (t2tb1 s) (t2tb687 t)))
  (and (mem1 x s) (mem23 y t)))))

(declare-fun t2tb903 ((set (tuple21 a d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a d)))) (sort (set1 (tuple2 a1 d1)) (t2tb903 x))))

(declare-fun tb2t903 (uni) (set (tuple21 a d)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a d))))
  (! (= (tb2t903 (t2tb903 i)) i) :pattern ((t2tb903 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 d1)) j) (= (t2tb903 (tb2t903 j)) j)) :pattern (
  (t2tb903 (tb2t903 j))) )))

(declare-fun t2tb904 ((tuple21 a d)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 a d))) (sort (tuple2 a1 d1) (t2tb904 x))))

(declare-fun tb2t904 (uni) (tuple21 a d))

;; BridgeL
  (assert
  (forall ((i (tuple21 a d)))
  (! (= (tb2t904 (t2tb904 i)) i) :pattern ((t2tb904 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 d1) j) (= (t2tb904 (tb2t904 j)) j)) :pattern (
  (t2tb904 (tb2t904 j))) )))

;; mem_times
  (assert
  (forall ((s (set a)) (t (set d)) (x a) (y d))
  (= (mem (tuple2 a1 d1) (Tuple2 a1 d1 (t2tb2 x) (t2tb694 y))
  (times d1 a1 (t2tb1 s) (t2tb690 t))) (and (mem1 x s) (mem20 y t)))))

(declare-fun t2tb4580 ((set (tuple21 a (set (tuple21 a c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (set (tuple21 a c)))))) (sort
  (set1 (tuple2 a1 (set1 (tuple2 a1 c1)))) (t2tb4580 x))))

(declare-fun tb2t4580 (uni) (set (tuple21 a (set (tuple21 a c)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (set (tuple21 a c))))))
  (! (= (tb2t4580 (t2tb4580 i)) i) :pattern ((t2tb4580 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (set1 (tuple2 a1 c1)))) j)
     (= (t2tb4580 (tb2t4580 j)) j)) :pattern ((t2tb4580 (tb2t4580 j))) )))

(declare-fun t2tb4581 ((tuple21 a (set (tuple21 a c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (set (tuple21 a c))))) (sort
  (tuple2 a1 (set1 (tuple2 a1 c1))) (t2tb4581 x))))

(declare-fun tb2t4581 (uni) (tuple21 a (set (tuple21 a c))))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (set (tuple21 a c)))))
  (! (= (tb2t4581 (t2tb4581 i)) i) :pattern ((t2tb4581 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (set1 (tuple2 a1 c1))) j)
     (= (t2tb4581 (tb2t4581 j)) j)) :pattern ((t2tb4581 (tb2t4581 j))) )))

;; mem_times
  (assert
  (forall ((s (set a)) (t (set (set (tuple21 a c)))) (x a) (y (set (tuple21 a
  c))))
  (= (mem (tuple2 a1 (set1 (tuple2 a1 c1)))
  (Tuple2 a1 (set1 (tuple2 a1 c1)) (t2tb2 x) (t2tb129 y))
  (times (set1 (tuple2 a1 c1)) a1 (t2tb1 s) (t2tb128 t)))
  (and (mem1 x s) (mem11 y t)))))

(declare-fun t2tb256 ((set (tuple21 a (tuple21 a c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (tuple21 a c))))) (sort
  (set1 (tuple2 a1 (tuple2 a1 c1))) (t2tb256 x))))

(declare-fun tb2t256 (uni) (set (tuple21 a (tuple21 a c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (tuple21 a c)))))
  (! (= (tb2t256 (t2tb256 i)) i) :pattern ((t2tb256 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (tuple2 a1 c1))) j)
     (= (t2tb256 (tb2t256 j)) j)) :pattern ((t2tb256 (tb2t256 j))) )))

(declare-fun t2tb257 ((tuple21 a (tuple21 a c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (tuple21 a c)))) (sort (tuple2 a1 (tuple2 a1 c1))
  (t2tb257 x))))

(declare-fun tb2t257 (uni) (tuple21 a (tuple21 a c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (tuple21 a c))))
  (! (= (tb2t257 (t2tb257 i)) i) :pattern ((t2tb257 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (tuple2 a1 c1)) j) (= (t2tb257 (tb2t257 j)) j)) :pattern (
  (t2tb257 (tb2t257 j))) )))

;; mem_times
  (assert
  (forall ((s (set a)) (t (set (tuple21 a c))) (x a) (y (tuple21 a c)))
  (= (mem (tuple2 a1 (tuple2 a1 c1))
  (Tuple2 a1 (tuple2 a1 c1) (t2tb2 x) (t2tb133 y))
  (times (tuple2 a1 c1) a1 (t2tb1 s) (t2tb129 t)))
  (and (mem1 x s) (mem10 y t)))))

;; mem_times
  (assert
  (forall ((s (set a)) (t (set c)) (x a) (y c))
  (= (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y))) (times4 s t))
  (and (mem1 x s) (mem7 y t)))))

(declare-fun t2tb41 ((set (tuple21 a (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (tuple21 a b))))) (sort
  (set1 (tuple2 a1 (tuple2 a1 b1))) (t2tb41 x))))

(declare-fun tb2t41 (uni) (set (tuple21 a (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (tuple21 a b)))))
  (! (= (tb2t41 (t2tb41 i)) i) :pattern ((t2tb41 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (tuple2 a1 b1))) j)
     (= (t2tb41 (tb2t41 j)) j)) :pattern ((t2tb41 (tb2t41 j))) )))

(declare-fun t2tb42 ((tuple21 a (tuple21 a b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (tuple21 a b)))) (sort (tuple2 a1 (tuple2 a1 b1))
  (t2tb42 x))))

(declare-fun tb2t42 (uni) (tuple21 a (tuple21 a b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (tuple21 a b))))
  (! (= (tb2t42 (t2tb42 i)) i) :pattern ((t2tb42 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (tuple2 a1 b1)) j) (= (t2tb42 (tb2t42 j)) j)) :pattern (
  (t2tb42 (tb2t42 j))) )))

;; mem_times
  (assert
  (forall ((s (set a)) (t (set (tuple21 a b))) (x a) (y (tuple21 a b)))
  (= (mem (tuple2 a1 (tuple2 a1 b1))
  (Tuple2 a1 (tuple2 a1 b1) (t2tb2 x) (t2tb13 y))
  (times (tuple2 a1 b1) a1 (t2tb1 s) (t2tb11 t)))
  (and (mem1 x s) (mem3 y t)))))

;; mem_times
  (assert
  (forall ((s (set a)) (t (set b)) (x a) (y b))
  (= (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y))) (times2 s t))
  (and (mem1 x s) (mem2 y t)))))

(declare-fun t2tb4 ((set (tuple21 a a))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a a)))) (sort (set1 (tuple2 a1 a1)) (t2tb4 x))))

(declare-fun tb2t4 (uni) (set (tuple21 a a)))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a a))))
  (! (= (tb2t4 (t2tb4 i)) i) :pattern ((t2tb4 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 a1)) j) (= (t2tb4 (tb2t4 j)) j)) :pattern (
  (t2tb4 (tb2t4 j))) )))

(declare-fun t2tb5 ((tuple21 a a)) uni)

;; t2tb_sort
  (assert (forall ((x (tuple21 a a))) (sort (tuple2 a1 a1) (t2tb5 x))))

(declare-fun tb2t5 (uni) (tuple21 a a))

;; BridgeL
  (assert
  (forall ((i (tuple21 a a)))
  (! (= (tb2t5 (t2tb5 i)) i) :pattern ((t2tb5 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 a1) j) (= (t2tb5 (tb2t5 j)) j)) :pattern ((t2tb5
                                                                    (tb2t5 j))) )))

;; mem_times
  (assert
  (forall ((s (set a)) (t (set a)) (x a) (y a))
  (= (mem (tuple2 a1 a1) (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y))
  (times a1 a1 (t2tb1 s) (t2tb1 t))) (and (mem1 x s) (mem1 y t)))))

;; mem_times
  (assert
  (forall ((b2 ty))
  (forall ((s (set a)) (t uni) (x a) (y uni))
  (= (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) y)
  (times b2 a1 (t2tb1 s) t)) (and (mem1 x s) (mem b2 y t))))))

;; mem_times
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (x uni) (y uni))
  (= (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) (times b2 a2 s t))
  (and (mem a2 x s) (mem b2 y t))))))

;; mem_power
  (assert
  (forall ((s (set (tuple21 (tuple21 a b) (tuple21 c d))))
  (t (set (tuple21 (tuple21 a b) (tuple21 c d)))))
  (= (mem (set1 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1))) (t2tb879 s)
  (power (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) (t2tb879 t)))
  (forall ((x (tuple21 (tuple21 a b) (tuple21 c d))))
  (=> (mem50 x s) (mem50 x t))))))

;; mem_power
  (assert
  (forall ((s (set (set (tuple21 b d)))) (t (set (set (tuple21 b d)))))
  (= (mem (set1 (set1 (tuple2 b1 d1))) (t2tb906 s)
  (power (set1 (tuple2 b1 d1)) (t2tb906 t)))
  (forall ((x (set (tuple21 b d)))) (=> (mem33 x s) (mem33 x t))))))

;; mem_power
  (assert
  (forall ((s (set (tuple21 b d))) (t (set (tuple21 b d))))
  (= (mem33 s (tb2t906 (power (tuple2 b1 d1) (t2tb687 t))))
  (forall ((x (tuple21 b d))) (=> (mem23 x s) (mem23 x t))))))

;; mem_power
  (assert
  (forall ((s (set d)) (t (set d)))
  (= (mem (set1 d1) (t2tb690 s) (power d1 (t2tb690 t)))
  (forall ((x d)) (=> (mem20 x s) (mem20 x t))))))

;; mem_power
  (assert
  (forall ((s (set (set (tuple21 a c)))) (t (set (set (tuple21 a c)))))
  (= (mem (set1 (set1 (tuple2 a1 c1))) (t2tb128 s)
  (power (set1 (tuple2 a1 c1)) (t2tb128 t)))
  (forall ((x (set (tuple21 a c)))) (=> (mem11 x s) (mem11 x t))))))

;; mem_power
  (assert
  (forall ((s (set (tuple21 a c))) (t (set (tuple21 a c))))
  (= (mem11 s (tb2t128 (power (tuple2 a1 c1) (t2tb129 t))))
  (forall ((x (tuple21 a c))) (=> (mem10 x s) (mem10 x t))))))

;; mem_power
  (assert
  (forall ((s (set c)) (t (set c)))
  (= (mem (set1 c1) (t2tb132 s) (power c1 (t2tb132 t)))
  (forall ((x c)) (=> (mem7 x s) (mem7 x t))))))

;; mem_power
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (tuple21 a b))))
  (= (mem (set1 (tuple2 a1 b1)) (t2tb11 s) (power (tuple2 a1 b1) (t2tb11 t)))
  (forall ((x (tuple21 a b))) (=> (mem3 x s) (mem3 x t))))))

;; mem_power
  (assert
  (forall ((s (set b)) (t (set b)))
  (= (mem (set1 b1) (t2tb12 s) (power b1 (t2tb12 t)))
  (forall ((x b)) (=> (mem2 x s) (mem2 x t))))))

;; mem_power
  (assert
  (forall ((s (set a)) (t (set a)))
  (= (mem (set1 a1) (t2tb1 s) (power a1 (t2tb1 t)))
  (forall ((x a)) (=> (mem1 x s) (mem1 x t))))))

;; mem_power
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t uni))
  (and
  (=> (mem (set1 a2) s (power a2 t))
  (forall ((x uni)) (=> (mem a2 x s) (mem a2 x t))))
  (=> (forall ((x uni)) (=> (sort a2 x) (=> (mem a2 x s) (mem a2 x t)))) (mem
  (set1 a2) s (power a2 t)))))))

;; mem_non_empty_power
  (assert
  (forall ((s (set (tuple21 (tuple21 a b) (tuple21 c d))))
  (t (set (tuple21 (tuple21 a b) (tuple21 c d)))))
  (= (mem (set1 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1))) (t2tb879 s)
  (non_empty_power (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) (t2tb879 t)))
  (and
  (forall ((x (tuple21 (tuple21 a b) (tuple21 c d))))
  (=> (mem50 x s) (mem50 x t)))
  (not (infix_eqeq43 s
  (tb2t879 (empty (tuple2 (tuple2 a1 b1) (tuple2 c1 d1))))))))))

;; mem_non_empty_power
  (assert
  (forall ((s (set (set (tuple21 b d)))) (t (set (set (tuple21 b d)))))
  (= (mem (set1 (set1 (tuple2 b1 d1))) (t2tb906 s)
  (non_empty_power (set1 (tuple2 b1 d1)) (t2tb906 t)))
  (and (forall ((x (set (tuple21 b d)))) (=> (mem33 x s) (mem33 x t)))
  (not (infix_eqeq28 s (tb2t906 (empty (set1 (tuple2 b1 d1))))))))))

;; mem_non_empty_power
  (assert
  (forall ((s (set (tuple21 b d))) (t (set (tuple21 b d))))
  (= (mem33 s (tb2t906 (non_empty_power (tuple2 b1 d1) (t2tb687 t))))
  (and (forall ((x (tuple21 b d))) (=> (mem23 x s) (mem23 x t)))
  (not (infix_eqeq22 s (tb2t687 (empty (tuple2 b1 d1)))))))))

;; mem_non_empty_power
  (assert
  (forall ((s (set d)) (t (set d)))
  (= (mem (set1 d1) (t2tb690 s) (non_empty_power d1 (t2tb690 t)))
  (and (forall ((x d)) (=> (mem20 x s) (mem20 x t)))
  (not (infix_eqeq13 s (tb2t690 (empty d1))))))))

;; mem_non_empty_power
  (assert
  (forall ((s (set (set (tuple21 a c)))) (t (set (set (tuple21 a c)))))
  (= (mem (set1 (set1 (tuple2 a1 c1))) (t2tb128 s)
  (non_empty_power (set1 (tuple2 a1 c1)) (t2tb128 t)))
  (and (forall ((x (set (tuple21 a c)))) (=> (mem11 x s) (mem11 x t)))
  (not (infix_eqeq19 s (tb2t128 (empty (set1 (tuple2 a1 c1))))))))))

;; mem_non_empty_power
  (assert
  (forall ((s (set (tuple21 a c))) (t (set (tuple21 a c))))
  (= (mem11 s (tb2t128 (non_empty_power (tuple2 a1 c1) (t2tb129 t))))
  (and (forall ((x (tuple21 a c))) (=> (mem10 x s) (mem10 x t)))
  (not (infix_eqeq9 s (tb2t129 (empty (tuple2 a1 c1)))))))))

;; mem_non_empty_power
  (assert
  (forall ((s (set c)) (t (set c)))
  (= (mem (set1 c1) (t2tb132 s) (non_empty_power c1 (t2tb132 t)))
  (and (forall ((x c)) (=> (mem7 x s) (mem7 x t)))
  (not (infix_eqeq7 s (tb2t132 (empty c1))))))))

;; mem_non_empty_power
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (tuple21 a b))))
  (= (mem (set1 (tuple2 a1 b1)) (t2tb11 s)
  (non_empty_power (tuple2 a1 b1) (t2tb11 t)))
  (and (forall ((x (tuple21 a b))) (=> (mem3 x s) (mem3 x t)))
  (not (infix_eqeq4 s (tb2t11 (empty (tuple2 a1 b1)))))))))

;; mem_non_empty_power
  (assert
  (forall ((s (set b)) (t (set b)))
  (= (mem (set1 b1) (t2tb12 s) (non_empty_power b1 (t2tb12 t)))
  (and (forall ((x b)) (=> (mem2 x s) (mem2 x t)))
  (not (infix_eqeq3 s (tb2t12 (empty b1))))))))

;; mem_non_empty_power
  (assert
  (forall ((s (set a)) (t (set a)))
  (= (mem (set1 a1) (t2tb1 s) (non_empty_power a1 (t2tb1 t)))
  (and (forall ((x a)) (=> (mem1 x s) (mem1 x t)))
  (not (infix_eqeq1 s (tb2t1 (empty a1))))))))

;; mem_non_empty_power
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t uni))
  (and
  (=> (mem (set1 a2) s (non_empty_power a2 t))
  (and (forall ((x uni)) (=> (mem a2 x s) (mem a2 x t)))
  (not (infix_eqeq a2 s (empty a2)))))
  (=>
  (and (forall ((x uni)) (=> (sort a2 x) (=> (mem a2 x s) (mem a2 x t))))
  (not (infix_eqeq a2 s (empty a2)))) (mem (set1 a2) s
  (non_empty_power a2 t)))))))

(declare-fun choose (ty uni) uni)

;; choose_sort
  (assert (forall ((a2 ty)) (forall ((x uni)) (sort a2 (choose a2 x)))))

(declare-fun relation (ty ty uni uni) uni)

;; relation_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (set1 (tuple2 a2 b2)))
  (relation b2 a2 x x1)))))

(declare-fun relation3 ((set a) (set c)) (set (set (tuple21 a c))))

(declare-fun relation9 ((set b) (set d)) (set (set (tuple21 b d))))

;; mem_relation
  (assert
  (forall ((a2 ty))
  (forall ((u uni) (v (set (tuple21 (tuple21 a b) (tuple21 c d)))) (r uni))
  (and
  (=> (mem (set1 (tuple2 a2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)))) r
  (relation (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) a2 u (t2tb879 v)))
  (forall ((x uni) (y (tuple21 (tuple21 a b) (tuple21 c d))))
  (=> (mem (tuple2 a2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)))
  (Tuple2 a2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) x (t2tb880 y)) r)
  (and (mem a2 x u) (mem50 y v)))))
  (=>
  (forall ((x uni) (y (tuple21 (tuple21 a b) (tuple21 c d))))
  (=> (sort a2 x)
  (=> (mem (tuple2 a2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)))
  (Tuple2 a2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) x (t2tb880 y)) r)
  (and (mem a2 x u) (mem50 y v))))) (mem
  (set1 (tuple2 a2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)))) r
  (relation (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) a2 u (t2tb879 v))))))))

;; mem_relation
  (assert
  (forall ((a2 ty))
  (forall ((u uni) (v (set (set (tuple21 b d)))) (r uni))
  (and
  (=> (mem (set1 (tuple2 a2 (set1 (tuple2 b1 d1)))) r
  (relation (set1 (tuple2 b1 d1)) a2 u (t2tb906 v)))
  (forall ((x uni) (y (set (tuple21 b d))))
  (=> (mem (tuple2 a2 (set1 (tuple2 b1 d1)))
  (Tuple2 a2 (set1 (tuple2 b1 d1)) x (t2tb687 y)) r)
  (and (mem a2 x u) (mem33 y v)))))
  (=>
  (forall ((x uni) (y (set (tuple21 b d))))
  (=> (sort a2 x)
  (=> (mem (tuple2 a2 (set1 (tuple2 b1 d1)))
  (Tuple2 a2 (set1 (tuple2 b1 d1)) x (t2tb687 y)) r)
  (and (mem a2 x u) (mem33 y v))))) (mem
  (set1 (tuple2 a2 (set1 (tuple2 b1 d1)))) r
  (relation (set1 (tuple2 b1 d1)) a2 u (t2tb906 v))))))))

;; mem_relation
  (assert
  (forall ((a2 ty))
  (forall ((u uni) (v (set (tuple21 b d))) (r uni))
  (and
  (=> (mem (set1 (tuple2 a2 (tuple2 b1 d1))) r
  (relation (tuple2 b1 d1) a2 u (t2tb687 v)))
  (forall ((x uni) (y (tuple21 b d)))
  (=> (mem (tuple2 a2 (tuple2 b1 d1))
  (Tuple2 a2 (tuple2 b1 d1) x (t2tb692 y)) r) (and (mem a2 x u) (mem23 y v)))))
  (=>
  (forall ((x uni) (y (tuple21 b d)))
  (=> (sort a2 x)
  (=> (mem (tuple2 a2 (tuple2 b1 d1))
  (Tuple2 a2 (tuple2 b1 d1) x (t2tb692 y)) r) (and (mem a2 x u) (mem23 y v)))))
  (mem (set1 (tuple2 a2 (tuple2 b1 d1))) r
  (relation (tuple2 b1 d1) a2 u (t2tb687 v))))))))

;; mem_relation
  (assert
  (forall ((a2 ty))
  (forall ((u uni) (v (set d)) (r uni))
  (and
  (=> (mem (set1 (tuple2 a2 d1)) r (relation d1 a2 u (t2tb690 v)))
  (forall ((x uni) (y d))
  (=> (mem (tuple2 a2 d1) (Tuple2 a2 d1 x (t2tb694 y)) r)
  (and (mem a2 x u) (mem20 y v)))))
  (=>
  (forall ((x uni) (y d))
  (=> (sort a2 x)
  (=> (mem (tuple2 a2 d1) (Tuple2 a2 d1 x (t2tb694 y)) r)
  (and (mem a2 x u) (mem20 y v))))) (mem (set1 (tuple2 a2 d1)) r
  (relation d1 a2 u (t2tb690 v))))))))

;; mem_relation
  (assert
  (forall ((a2 ty))
  (forall ((u uni) (v (set (set (tuple21 a c)))) (r uni))
  (and
  (=> (mem (set1 (tuple2 a2 (set1 (tuple2 a1 c1)))) r
  (relation (set1 (tuple2 a1 c1)) a2 u (t2tb128 v)))
  (forall ((x uni) (y (set (tuple21 a c))))
  (=> (mem (tuple2 a2 (set1 (tuple2 a1 c1)))
  (Tuple2 a2 (set1 (tuple2 a1 c1)) x (t2tb129 y)) r)
  (and (mem a2 x u) (mem11 y v)))))
  (=>
  (forall ((x uni) (y (set (tuple21 a c))))
  (=> (sort a2 x)
  (=> (mem (tuple2 a2 (set1 (tuple2 a1 c1)))
  (Tuple2 a2 (set1 (tuple2 a1 c1)) x (t2tb129 y)) r)
  (and (mem a2 x u) (mem11 y v))))) (mem
  (set1 (tuple2 a2 (set1 (tuple2 a1 c1)))) r
  (relation (set1 (tuple2 a1 c1)) a2 u (t2tb128 v))))))))

;; mem_relation
  (assert
  (forall ((a2 ty))
  (forall ((u uni) (v (set (tuple21 a c))) (r uni))
  (and
  (=> (mem (set1 (tuple2 a2 (tuple2 a1 c1))) r
  (relation (tuple2 a1 c1) a2 u (t2tb129 v)))
  (forall ((x uni) (y (tuple21 a c)))
  (=> (mem (tuple2 a2 (tuple2 a1 c1))
  (Tuple2 a2 (tuple2 a1 c1) x (t2tb133 y)) r) (and (mem a2 x u) (mem10 y v)))))
  (=>
  (forall ((x uni) (y (tuple21 a c)))
  (=> (sort a2 x)
  (=> (mem (tuple2 a2 (tuple2 a1 c1))
  (Tuple2 a2 (tuple2 a1 c1) x (t2tb133 y)) r) (and (mem a2 x u) (mem10 y v)))))
  (mem (set1 (tuple2 a2 (tuple2 a1 c1))) r
  (relation (tuple2 a1 c1) a2 u (t2tb129 v))))))))

;; mem_relation
  (assert
  (forall ((a2 ty))
  (forall ((u uni) (v (set c)) (r uni))
  (and
  (=> (mem (set1 (tuple2 a2 c1)) r (relation c1 a2 u (t2tb132 v)))
  (forall ((x uni) (y c))
  (=> (mem (tuple2 a2 c1) (Tuple2 a2 c1 x (t2tb135 y)) r)
  (and (mem a2 x u) (mem7 y v)))))
  (=>
  (forall ((x uni) (y c))
  (=> (sort a2 x)
  (=> (mem (tuple2 a2 c1) (Tuple2 a2 c1 x (t2tb135 y)) r)
  (and (mem a2 x u) (mem7 y v))))) (mem (set1 (tuple2 a2 c1)) r
  (relation c1 a2 u (t2tb132 v))))))))

;; mem_relation
  (assert
  (forall ((a2 ty))
  (forall ((u uni) (v (set (tuple21 a b))) (r uni))
  (and
  (=> (mem (set1 (tuple2 a2 (tuple2 a1 b1))) r
  (relation (tuple2 a1 b1) a2 u (t2tb11 v)))
  (forall ((x uni) (y (tuple21 a b)))
  (=> (mem (tuple2 a2 (tuple2 a1 b1)) (Tuple2 a2 (tuple2 a1 b1) x (t2tb13 y))
  r) (and (mem a2 x u) (mem3 y v)))))
  (=>
  (forall ((x uni) (y (tuple21 a b)))
  (=> (sort a2 x)
  (=> (mem (tuple2 a2 (tuple2 a1 b1)) (Tuple2 a2 (tuple2 a1 b1) x (t2tb13 y))
  r) (and (mem a2 x u) (mem3 y v))))) (mem (set1 (tuple2 a2 (tuple2 a1 b1)))
  r (relation (tuple2 a1 b1) a2 u (t2tb11 v))))))))

;; mem_relation
  (assert
  (forall ((a2 ty))
  (forall ((u uni) (v (set b)) (r uni))
  (and
  (=> (mem (set1 (tuple2 a2 b1)) r (relation b1 a2 u (t2tb12 v)))
  (forall ((x uni) (y b))
  (=> (mem (tuple2 a2 b1) (Tuple2 a2 b1 x (t2tb14 y)) r)
  (and (mem a2 x u) (mem2 y v)))))
  (=>
  (forall ((x uni) (y b))
  (=> (sort a2 x)
  (=> (mem (tuple2 a2 b1) (Tuple2 a2 b1 x (t2tb14 y)) r)
  (and (mem a2 x u) (mem2 y v))))) (mem (set1 (tuple2 a2 b1)) r
  (relation b1 a2 u (t2tb12 v))))))))

;; mem_relation
  (assert
  (forall ((a2 ty))
  (forall ((u uni) (v (set a)) (r uni))
  (and
  (=> (mem (set1 (tuple2 a2 a1)) r (relation a1 a2 u (t2tb1 v)))
  (forall ((x uni) (y a))
  (=> (mem (tuple2 a2 a1) (Tuple2 a2 a1 x (t2tb2 y)) r)
  (and (mem a2 x u) (mem1 y v)))))
  (=>
  (forall ((x uni) (y a))
  (=> (sort a2 x)
  (=> (mem (tuple2 a2 a1) (Tuple2 a2 a1 x (t2tb2 y)) r)
  (and (mem a2 x u) (mem1 y v))))) (mem (set1 (tuple2 a2 a1)) r
  (relation a1 a2 u (t2tb1 v))))))))

(declare-fun t2tb5108 ((set (set (tuple21 (tuple21 (tuple21 a b) (tuple21 c
  d)) (tuple21 (tuple21 a b) (tuple21 c d)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 (tuple21 a b) (tuple21 c d))
  (tuple21 (tuple21 a b) (tuple21 c d))))))) (sort
  (set1
  (set1
  (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1))
  (tuple2 (tuple2 a1 b1) (tuple2 c1 d1))))) (t2tb5108 x))))

(declare-fun tb2t5108 (uni) (set (set (tuple21 (tuple21 (tuple21 a b)
  (tuple21 c d)) (tuple21 (tuple21 a b) (tuple21 c d))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 (tuple21 a b) (tuple21 c d))
  (tuple21 (tuple21 a b) (tuple21 c d)))))))
  (! (= (tb2t5108 (t2tb5108 i)) i) :pattern ((t2tb5108 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (set1
     (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1))
     (tuple2 (tuple2 a1 b1) (tuple2 c1 d1))))) j)
     (= (t2tb5108 (tb2t5108 j)) j)) :pattern ((t2tb5108 (tb2t5108 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 (tuple21 a b) (tuple21 c d))))
  (v (set (tuple21 (tuple21 a b) (tuple21 c d))))
  (r (set (tuple21 (tuple21 (tuple21 a b) (tuple21 c d)) (tuple21 (tuple21 a
  b) (tuple21 c d))))))
  (= (mem
  (set1
  (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1))
  (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)))) (t2tb5070 r)
  (relation (tuple2 (tuple2 a1 b1) (tuple2 c1 d1))
  (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) (t2tb879 u) (t2tb879 v)))
  (forall ((x (tuple21 (tuple21 a b) (tuple21 c d))) (y (tuple21 (tuple21 a
  b) (tuple21 c d))))
  (=> (mem
  (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1))
  (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)))
  (Tuple2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1))
  (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) (t2tb880 x) (t2tb880 y))
  (t2tb5070 r)) (and (mem50 x u) (mem50 y v)))))))

(declare-fun t2tb5109 ((set (set (tuple21 (tuple21 (tuple21 a b) (tuple21 c
  d)) (set (tuple21 b d)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 (tuple21 a b) (tuple21 c d))
  (set (tuple21 b d))))))) (sort
  (set1
  (set1
  (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) (set1 (tuple2 b1 d1)))))
  (t2tb5109 x))))

(declare-fun tb2t5109 (uni) (set (set (tuple21 (tuple21 (tuple21 a b)
  (tuple21 c d)) (set (tuple21 b d))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 (tuple21 a b) (tuple21 c d))
  (set (tuple21 b d)))))))
  (! (= (tb2t5109 (t2tb5109 i)) i) :pattern ((t2tb5109 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (set1
     (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) (set1 (tuple2 b1 d1)))))
     j) (= (t2tb5109 (tb2t5109 j)) j)) :pattern ((t2tb5109 (tb2t5109 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 (tuple21 a b) (tuple21 c d))))
  (v (set (set (tuple21 b d)))) (r (set (tuple21 (tuple21 (tuple21 a b)
  (tuple21 c d)) (set (tuple21 b d))))))
  (= (mem
  (set1
  (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) (set1 (tuple2 b1 d1))))
  (t2tb5072 r)
  (relation (set1 (tuple2 b1 d1)) (tuple2 (tuple2 a1 b1) (tuple2 c1 d1))
  (t2tb879 u) (t2tb906 v)))
  (forall ((x (tuple21 (tuple21 a b) (tuple21 c d))) (y (set (tuple21 b d))))
  (=> (mem
  (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) (set1 (tuple2 b1 d1)))
  (Tuple2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) (set1 (tuple2 b1 d1))
  (t2tb880 x) (t2tb687 y)) (t2tb5072 r)) (and (mem50 x u) (mem33 y v)))))))

(declare-fun t2tb5110 ((set (set (tuple21 (tuple21 (tuple21 a b) (tuple21 c
  d)) (tuple21 b d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 (tuple21 a b) (tuple21 c d))
  (tuple21 b d)))))) (sort
  (set1
  (set1 (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) (tuple2 b1 d1))))
  (t2tb5110 x))))

(declare-fun tb2t5110 (uni) (set (set (tuple21 (tuple21 (tuple21 a b)
  (tuple21 c d)) (tuple21 b d)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 (tuple21 a b) (tuple21 c d))
  (tuple21 b d))))))
  (! (= (tb2t5110 (t2tb5110 i)) i) :pattern ((t2tb5110 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (set1 (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) (tuple2 b1 d1))))
     j) (= (t2tb5110 (tb2t5110 j)) j)) :pattern ((t2tb5110 (tb2t5110 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 (tuple21 a b) (tuple21 c d)))) (v (set (tuple21 b
  d))) (r (set (tuple21 (tuple21 (tuple21 a b) (tuple21 c d)) (tuple21 b
  d)))))
  (= (mem
  (set1 (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) (tuple2 b1 d1)))
  (t2tb5074 r)
  (relation (tuple2 b1 d1) (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) (t2tb879 u)
  (t2tb687 v)))
  (forall ((x (tuple21 (tuple21 a b) (tuple21 c d))) (y (tuple21 b d)))
  (=> (mem (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) (tuple2 b1 d1))
  (Tuple2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) (tuple2 b1 d1) (t2tb880 x)
  (t2tb692 y)) (t2tb5074 r)) (and (mem50 x u) (mem23 y v)))))))

(declare-fun t2tb5111 ((set (set (tuple21 (tuple21 (tuple21 a b) (tuple21 c
  d)) d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 (tuple21 a b) (tuple21 c d)) d)))))
  (sort (set1 (set1 (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) d1)))
  (t2tb5111 x))))

(declare-fun tb2t5111 (uni) (set (set (tuple21 (tuple21 (tuple21 a b)
  (tuple21 c d)) d))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 (tuple21 a b) (tuple21 c d)) d)))))
  (! (= (tb2t5111 (t2tb5111 i)) i) :pattern ((t2tb5111 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) d1))) j)
     (= (t2tb5111 (tb2t5111 j)) j)) :pattern ((t2tb5111 (tb2t5111 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 (tuple21 a b) (tuple21 c d)))) (v (set d))
  (r (set (tuple21 (tuple21 (tuple21 a b) (tuple21 c d)) d))))
  (= (mem (set1 (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) d1))
  (t2tb5076 r)
  (relation d1 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) (t2tb879 u)
  (t2tb690 v)))
  (forall ((x (tuple21 (tuple21 a b) (tuple21 c d))) (y d))
  (=> (mem (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) d1)
  (Tuple2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) d1 (t2tb880 x) (t2tb694 y))
  (t2tb5076 r)) (and (mem50 x u) (mem20 y v)))))))

(declare-fun t2tb5112 ((set (set (tuple21 (tuple21 (tuple21 a b) (tuple21 c
  d)) (set (tuple21 a c)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 (tuple21 a b) (tuple21 c d))
  (set (tuple21 a c))))))) (sort
  (set1
  (set1
  (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) (set1 (tuple2 a1 c1)))))
  (t2tb5112 x))))

(declare-fun tb2t5112 (uni) (set (set (tuple21 (tuple21 (tuple21 a b)
  (tuple21 c d)) (set (tuple21 a c))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 (tuple21 a b) (tuple21 c d))
  (set (tuple21 a c)))))))
  (! (= (tb2t5112 (t2tb5112 i)) i) :pattern ((t2tb5112 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (set1
     (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) (set1 (tuple2 a1 c1)))))
     j) (= (t2tb5112 (tb2t5112 j)) j)) :pattern ((t2tb5112 (tb2t5112 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 (tuple21 a b) (tuple21 c d))))
  (v (set (set (tuple21 a c)))) (r (set (tuple21 (tuple21 (tuple21 a b)
  (tuple21 c d)) (set (tuple21 a c))))))
  (= (mem
  (set1
  (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) (set1 (tuple2 a1 c1))))
  (t2tb5078 r)
  (relation (set1 (tuple2 a1 c1)) (tuple2 (tuple2 a1 b1) (tuple2 c1 d1))
  (t2tb879 u) (t2tb128 v)))
  (forall ((x (tuple21 (tuple21 a b) (tuple21 c d))) (y (set (tuple21 a c))))
  (=> (mem
  (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) (set1 (tuple2 a1 c1)))
  (Tuple2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) (set1 (tuple2 a1 c1))
  (t2tb880 x) (t2tb129 y)) (t2tb5078 r)) (and (mem50 x u) (mem11 y v)))))))

(declare-fun t2tb5113 ((set (set (tuple21 (tuple21 (tuple21 a b) (tuple21 c
  d)) (tuple21 a c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 (tuple21 a b) (tuple21 c d))
  (tuple21 a c)))))) (sort
  (set1
  (set1 (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) (tuple2 a1 c1))))
  (t2tb5113 x))))

(declare-fun tb2t5113 (uni) (set (set (tuple21 (tuple21 (tuple21 a b)
  (tuple21 c d)) (tuple21 a c)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 (tuple21 a b) (tuple21 c d))
  (tuple21 a c))))))
  (! (= (tb2t5113 (t2tb5113 i)) i) :pattern ((t2tb5113 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (set1 (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) (tuple2 a1 c1))))
     j) (= (t2tb5113 (tb2t5113 j)) j)) :pattern ((t2tb5113 (tb2t5113 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 (tuple21 a b) (tuple21 c d)))) (v (set (tuple21 a
  c))) (r (set (tuple21 (tuple21 (tuple21 a b) (tuple21 c d)) (tuple21 a
  c)))))
  (= (mem
  (set1 (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) (tuple2 a1 c1)))
  (t2tb5080 r)
  (relation (tuple2 a1 c1) (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) (t2tb879 u)
  (t2tb129 v)))
  (forall ((x (tuple21 (tuple21 a b) (tuple21 c d))) (y (tuple21 a c)))
  (=> (mem (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) (tuple2 a1 c1))
  (Tuple2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) (tuple2 a1 c1) (t2tb880 x)
  (t2tb133 y)) (t2tb5080 r)) (and (mem50 x u) (mem10 y v)))))))

(declare-fun t2tb5114 ((set (set (tuple21 (tuple21 (tuple21 a b) (tuple21 c
  d)) c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 (tuple21 a b) (tuple21 c d)) c)))))
  (sort (set1 (set1 (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) c1)))
  (t2tb5114 x))))

(declare-fun tb2t5114 (uni) (set (set (tuple21 (tuple21 (tuple21 a b)
  (tuple21 c d)) c))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 (tuple21 a b) (tuple21 c d)) c)))))
  (! (= (tb2t5114 (t2tb5114 i)) i) :pattern ((t2tb5114 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) c1))) j)
     (= (t2tb5114 (tb2t5114 j)) j)) :pattern ((t2tb5114 (tb2t5114 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 (tuple21 a b) (tuple21 c d)))) (v (set c))
  (r (set (tuple21 (tuple21 (tuple21 a b) (tuple21 c d)) c))))
  (= (mem (set1 (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) c1))
  (t2tb5082 r)
  (relation c1 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) (t2tb879 u)
  (t2tb132 v)))
  (forall ((x (tuple21 (tuple21 a b) (tuple21 c d))) (y c))
  (=> (mem (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) c1)
  (Tuple2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) c1 (t2tb880 x) (t2tb135 y))
  (t2tb5082 r)) (and (mem50 x u) (mem7 y v)))))))

(declare-fun t2tb5115 ((set (set (tuple21 (tuple21 (tuple21 a b) (tuple21 c
  d)) (tuple21 a b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 (tuple21 a b) (tuple21 c d))
  (tuple21 a b)))))) (sort
  (set1
  (set1 (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) (tuple2 a1 b1))))
  (t2tb5115 x))))

(declare-fun tb2t5115 (uni) (set (set (tuple21 (tuple21 (tuple21 a b)
  (tuple21 c d)) (tuple21 a b)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 (tuple21 a b) (tuple21 c d))
  (tuple21 a b))))))
  (! (= (tb2t5115 (t2tb5115 i)) i) :pattern ((t2tb5115 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (set1 (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) (tuple2 a1 b1))))
     j) (= (t2tb5115 (tb2t5115 j)) j)) :pattern ((t2tb5115 (tb2t5115 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 (tuple21 a b) (tuple21 c d)))) (v (set (tuple21 a
  b))) (r (set (tuple21 (tuple21 (tuple21 a b) (tuple21 c d)) (tuple21 a
  b)))))
  (= (mem
  (set1 (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) (tuple2 a1 b1)))
  (t2tb5084 r)
  (relation (tuple2 a1 b1) (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) (t2tb879 u)
  (t2tb11 v)))
  (forall ((x (tuple21 (tuple21 a b) (tuple21 c d))) (y (tuple21 a b)))
  (=> (mem (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) (tuple2 a1 b1))
  (Tuple2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) (tuple2 a1 b1) (t2tb880 x)
  (t2tb13 y)) (t2tb5084 r)) (and (mem50 x u) (mem3 y v)))))))

(declare-fun t2tb5116 ((set (set (tuple21 (tuple21 (tuple21 a b) (tuple21 c
  d)) b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 (tuple21 a b) (tuple21 c d)) b)))))
  (sort (set1 (set1 (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) b1)))
  (t2tb5116 x))))

(declare-fun tb2t5116 (uni) (set (set (tuple21 (tuple21 (tuple21 a b)
  (tuple21 c d)) b))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 (tuple21 a b) (tuple21 c d)) b)))))
  (! (= (tb2t5116 (t2tb5116 i)) i) :pattern ((t2tb5116 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) b1))) j)
     (= (t2tb5116 (tb2t5116 j)) j)) :pattern ((t2tb5116 (tb2t5116 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 (tuple21 a b) (tuple21 c d)))) (v (set b))
  (r (set (tuple21 (tuple21 (tuple21 a b) (tuple21 c d)) b))))
  (= (mem (set1 (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) b1))
  (t2tb5086 r)
  (relation b1 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) (t2tb879 u) (t2tb12 v)))
  (forall ((x (tuple21 (tuple21 a b) (tuple21 c d))) (y b))
  (=> (mem (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) b1)
  (Tuple2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) b1 (t2tb880 x) (t2tb14 y))
  (t2tb5086 r)) (and (mem50 x u) (mem2 y v)))))))

(declare-fun t2tb5117 ((set (set (tuple21 (tuple21 (tuple21 a b) (tuple21 c
  d)) a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 (tuple21 a b) (tuple21 c d)) a)))))
  (sort (set1 (set1 (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) a1)))
  (t2tb5117 x))))

(declare-fun tb2t5117 (uni) (set (set (tuple21 (tuple21 (tuple21 a b)
  (tuple21 c d)) a))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 (tuple21 a b) (tuple21 c d)) a)))))
  (! (= (tb2t5117 (t2tb5117 i)) i) :pattern ((t2tb5117 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) a1))) j)
     (= (t2tb5117 (tb2t5117 j)) j)) :pattern ((t2tb5117 (tb2t5117 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 (tuple21 a b) (tuple21 c d)))) (v (set a))
  (r (set (tuple21 (tuple21 (tuple21 a b) (tuple21 c d)) a))))
  (= (mem (set1 (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) a1))
  (t2tb5088 r)
  (relation a1 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) (t2tb879 u) (t2tb1 v)))
  (forall ((x (tuple21 (tuple21 a b) (tuple21 c d))) (y a))
  (=> (mem (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) a1)
  (Tuple2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) a1 (t2tb880 x) (t2tb2 y))
  (t2tb5088 r)) (and (mem50 x u) (mem1 y v)))))))

;; mem_relation
  (assert
  (forall ((b2 ty))
  (forall ((u (set (tuple21 (tuple21 a b) (tuple21 c d)))) (v uni) (r uni))
  (and
  (=> (mem (set1 (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) b2)) r
  (relation b2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) (t2tb879 u) v))
  (forall ((x (tuple21 (tuple21 a b) (tuple21 c d))) (y uni))
  (=> (mem (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) b2)
  (Tuple2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) b2 (t2tb880 x) y) r)
  (and (mem50 x u) (mem b2 y v)))))
  (=>
  (forall ((x (tuple21 (tuple21 a b) (tuple21 c d))) (y uni))
  (=> (sort b2 y)
  (=> (mem (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) b2)
  (Tuple2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) b2 (t2tb880 x) y) r)
  (and (mem50 x u) (mem b2 y v))))) (mem
  (set1 (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) b2)) r
  (relation b2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) (t2tb879 u) v)))))))

(declare-fun t2tb5118 ((set (set (tuple21 (set (tuple21 b d))
  (tuple21 (tuple21 a b) (tuple21 c d)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 b d)) (tuple21 (tuple21 a b)
  (tuple21 c d))))))) (sort
  (set1
  (set1
  (tuple2 (set1 (tuple2 b1 d1)) (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)))))
  (t2tb5118 x))))

(declare-fun tb2t5118 (uni) (set (set (tuple21 (set (tuple21 b d))
  (tuple21 (tuple21 a b) (tuple21 c d))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 b d)) (tuple21 (tuple21 a b)
  (tuple21 c d)))))))
  (! (= (tb2t5118 (t2tb5118 i)) i) :pattern ((t2tb5118 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (set1
     (tuple2 (set1 (tuple2 b1 d1)) (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)))))
     j) (= (t2tb5118 (tb2t5118 j)) j)) :pattern ((t2tb5118 (tb2t5118 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 b d)))) (v (set (tuple21 (tuple21 a b)
  (tuple21 c d)))) (r (set (tuple21 (set (tuple21 b d)) (tuple21 (tuple21 a
  b) (tuple21 c d))))))
  (= (mem
  (set1
  (tuple2 (set1 (tuple2 b1 d1)) (tuple2 (tuple2 a1 b1) (tuple2 c1 d1))))
  (t2tb5090 r)
  (relation (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) (set1 (tuple2 b1 d1))
  (t2tb906 u) (t2tb879 v)))
  (forall ((x (set (tuple21 b d))) (y (tuple21 (tuple21 a b) (tuple21 c d))))
  (=> (mem
  (tuple2 (set1 (tuple2 b1 d1)) (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)))
  (Tuple2 (set1 (tuple2 b1 d1)) (tuple2 (tuple2 a1 b1) (tuple2 c1 d1))
  (t2tb687 x) (t2tb880 y)) (t2tb5090 r)) (and (mem33 x u) (mem50 y v)))))))

(declare-fun t2tb4704 ((set (set (tuple21 (set (tuple21 b d)) (set (tuple21 b
  d)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 b d)) (set (tuple21 b d)))))))
  (sort (set1 (set1 (tuple2 (set1 (tuple2 b1 d1)) (set1 (tuple2 b1 d1)))))
  (t2tb4704 x))))

(declare-fun tb2t4704 (uni) (set (set (tuple21 (set (tuple21 b d))
  (set (tuple21 b d))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 b d)) (set (tuple21 b d)))))))
  (! (= (tb2t4704 (t2tb4704 i)) i) :pattern ((t2tb4704 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (set1 (tuple2 b1 d1)) (set1 (tuple2 b1 d1))))) j)
     (= (t2tb4704 (tb2t4704 j)) j)) :pattern ((t2tb4704 (tb2t4704 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 b d)))) (v (set (set (tuple21 b d))))
  (r (set (tuple21 (set (tuple21 b d)) (set (tuple21 b d))))))
  (= (mem (set1 (tuple2 (set1 (tuple2 b1 d1)) (set1 (tuple2 b1 d1))))
  (t2tb4339 r)
  (relation (set1 (tuple2 b1 d1)) (set1 (tuple2 b1 d1)) (t2tb906 u)
  (t2tb906 v)))
  (forall ((x (set (tuple21 b d))) (y (set (tuple21 b d))))
  (=> (mem (tuple2 (set1 (tuple2 b1 d1)) (set1 (tuple2 b1 d1)))
  (Tuple2 (set1 (tuple2 b1 d1)) (set1 (tuple2 b1 d1)) (t2tb687 x)
  (t2tb687 y)) (t2tb4339 r)) (and (mem33 x u) (mem33 y v)))))))

(declare-fun t2tb4705 ((set (set (tuple21 (set (tuple21 b d)) (tuple21 b
  d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 b d)) (tuple21 b d)))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 b1 d1)) (tuple2 b1 d1)))) (t2tb4705 x))))

(declare-fun tb2t4705 (uni) (set (set (tuple21 (set (tuple21 b d)) (tuple21 b
  d)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 b d)) (tuple21 b d))))))
  (! (= (tb2t4705 (t2tb4705 i)) i) :pattern ((t2tb4705 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 b1 d1)) (tuple2 b1 d1)))) j)
     (= (t2tb4705 (tb2t4705 j)) j)) :pattern ((t2tb4705 (tb2t4705 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 b d)))) (v (set (tuple21 b d)))
  (r (set (tuple21 (set (tuple21 b d)) (tuple21 b d)))))
  (= (mem (set1 (tuple2 (set1 (tuple2 b1 d1)) (tuple2 b1 d1))) (t2tb4341 r)
  (relation (tuple2 b1 d1) (set1 (tuple2 b1 d1)) (t2tb906 u) (t2tb687 v)))
  (forall ((x (set (tuple21 b d))) (y (tuple21 b d)))
  (=> (mem (tuple2 (set1 (tuple2 b1 d1)) (tuple2 b1 d1))
  (Tuple2 (set1 (tuple2 b1 d1)) (tuple2 b1 d1) (t2tb687 x) (t2tb692 y))
  (t2tb4341 r)) (and (mem33 x u) (mem23 y v)))))))

(declare-fun t2tb4706 ((set (set (tuple21 (set (tuple21 b d)) d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 b d)) d))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 b1 d1)) d1))) (t2tb4706 x))))

(declare-fun tb2t4706 (uni) (set (set (tuple21 (set (tuple21 b d)) d))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 b d)) d)))))
  (! (= (tb2t4706 (t2tb4706 i)) i) :pattern ((t2tb4706 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 b1 d1)) d1))) j)
     (= (t2tb4706 (tb2t4706 j)) j)) :pattern ((t2tb4706 (tb2t4706 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 b d)))) (v (set d))
  (r (set (tuple21 (set (tuple21 b d)) d))))
  (= (mem (set1 (tuple2 (set1 (tuple2 b1 d1)) d1)) (t2tb4343 r)
  (relation d1 (set1 (tuple2 b1 d1)) (t2tb906 u) (t2tb690 v)))
  (forall ((x (set (tuple21 b d))) (y d))
  (=> (mem (tuple2 (set1 (tuple2 b1 d1)) d1)
  (Tuple2 (set1 (tuple2 b1 d1)) d1 (t2tb687 x) (t2tb694 y)) (t2tb4343 r))
  (and (mem33 x u) (mem20 y v)))))))

(declare-fun t2tb4708 ((set (set (tuple21 (set (tuple21 b d)) (set (tuple21 a
  c)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 b d)) (set (tuple21 a c)))))))
  (sort (set1 (set1 (tuple2 (set1 (tuple2 b1 d1)) (set1 (tuple2 a1 c1)))))
  (t2tb4708 x))))

(declare-fun tb2t4708 (uni) (set (set (tuple21 (set (tuple21 b d))
  (set (tuple21 a c))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 b d)) (set (tuple21 a c)))))))
  (! (= (tb2t4708 (t2tb4708 i)) i) :pattern ((t2tb4708 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (set1 (tuple2 b1 d1)) (set1 (tuple2 a1 c1))))) j)
     (= (t2tb4708 (tb2t4708 j)) j)) :pattern ((t2tb4708 (tb2t4708 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 b d)))) (v (set (set (tuple21 a c))))
  (r (set (tuple21 (set (tuple21 b d)) (set (tuple21 a c))))))
  (= (mem (set1 (tuple2 (set1 (tuple2 b1 d1)) (set1 (tuple2 a1 c1))))
  (t2tb4347 r)
  (relation (set1 (tuple2 a1 c1)) (set1 (tuple2 b1 d1)) (t2tb906 u)
  (t2tb128 v)))
  (forall ((x (set (tuple21 b d))) (y (set (tuple21 a c))))
  (=> (mem (tuple2 (set1 (tuple2 b1 d1)) (set1 (tuple2 a1 c1)))
  (Tuple2 (set1 (tuple2 b1 d1)) (set1 (tuple2 a1 c1)) (t2tb687 x)
  (t2tb129 y)) (t2tb4347 r)) (and (mem33 x u) (mem11 y v)))))))

(declare-fun t2tb4709 ((set (set (tuple21 (set (tuple21 b d)) (tuple21 a
  c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 b d)) (tuple21 a c)))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 b1 d1)) (tuple2 a1 c1)))) (t2tb4709 x))))

(declare-fun tb2t4709 (uni) (set (set (tuple21 (set (tuple21 b d)) (tuple21 a
  c)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 b d)) (tuple21 a c))))))
  (! (= (tb2t4709 (t2tb4709 i)) i) :pattern ((t2tb4709 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 b1 d1)) (tuple2 a1 c1)))) j)
     (= (t2tb4709 (tb2t4709 j)) j)) :pattern ((t2tb4709 (tb2t4709 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 b d)))) (v (set (tuple21 a c)))
  (r (set (tuple21 (set (tuple21 b d)) (tuple21 a c)))))
  (= (mem (set1 (tuple2 (set1 (tuple2 b1 d1)) (tuple2 a1 c1))) (t2tb4349 r)
  (relation (tuple2 a1 c1) (set1 (tuple2 b1 d1)) (t2tb906 u) (t2tb129 v)))
  (forall ((x (set (tuple21 b d))) (y (tuple21 a c)))
  (=> (mem (tuple2 (set1 (tuple2 b1 d1)) (tuple2 a1 c1))
  (Tuple2 (set1 (tuple2 b1 d1)) (tuple2 a1 c1) (t2tb687 x) (t2tb133 y))
  (t2tb4349 r)) (and (mem33 x u) (mem10 y v)))))))

(declare-fun t2tb4710 ((set (set (tuple21 (set (tuple21 b d)) c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 b d)) c))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 b1 d1)) c1))) (t2tb4710 x))))

(declare-fun tb2t4710 (uni) (set (set (tuple21 (set (tuple21 b d)) c))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 b d)) c)))))
  (! (= (tb2t4710 (t2tb4710 i)) i) :pattern ((t2tb4710 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 b1 d1)) c1))) j)
     (= (t2tb4710 (tb2t4710 j)) j)) :pattern ((t2tb4710 (tb2t4710 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 b d)))) (v (set c))
  (r (set (tuple21 (set (tuple21 b d)) c))))
  (= (mem (set1 (tuple2 (set1 (tuple2 b1 d1)) c1)) (t2tb4351 r)
  (relation c1 (set1 (tuple2 b1 d1)) (t2tb906 u) (t2tb132 v)))
  (forall ((x (set (tuple21 b d))) (y c))
  (=> (mem (tuple2 (set1 (tuple2 b1 d1)) c1)
  (Tuple2 (set1 (tuple2 b1 d1)) c1 (t2tb687 x) (t2tb135 y)) (t2tb4351 r))
  (and (mem33 x u) (mem7 y v)))))))

(declare-fun t2tb4712 ((set (set (tuple21 (set (tuple21 b d)) (tuple21 a
  b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 b d)) (tuple21 a b)))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 b1 d1)) (tuple2 a1 b1)))) (t2tb4712 x))))

(declare-fun tb2t4712 (uni) (set (set (tuple21 (set (tuple21 b d)) (tuple21 a
  b)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 b d)) (tuple21 a b))))))
  (! (= (tb2t4712 (t2tb4712 i)) i) :pattern ((t2tb4712 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 b1 d1)) (tuple2 a1 b1)))) j)
     (= (t2tb4712 (tb2t4712 j)) j)) :pattern ((t2tb4712 (tb2t4712 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 b d)))) (v (set (tuple21 a b)))
  (r (set (tuple21 (set (tuple21 b d)) (tuple21 a b)))))
  (= (mem (set1 (tuple2 (set1 (tuple2 b1 d1)) (tuple2 a1 b1))) (t2tb4355 r)
  (relation (tuple2 a1 b1) (set1 (tuple2 b1 d1)) (t2tb906 u) (t2tb11 v)))
  (forall ((x (set (tuple21 b d))) (y (tuple21 a b)))
  (=> (mem (tuple2 (set1 (tuple2 b1 d1)) (tuple2 a1 b1))
  (Tuple2 (set1 (tuple2 b1 d1)) (tuple2 a1 b1) (t2tb687 x) (t2tb13 y))
  (t2tb4355 r)) (and (mem33 x u) (mem3 y v)))))))

(declare-fun t2tb4713 ((set (set (tuple21 (set (tuple21 b d)) b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 b d)) b))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 b1 d1)) b1))) (t2tb4713 x))))

(declare-fun tb2t4713 (uni) (set (set (tuple21 (set (tuple21 b d)) b))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 b d)) b)))))
  (! (= (tb2t4713 (t2tb4713 i)) i) :pattern ((t2tb4713 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 b1 d1)) b1))) j)
     (= (t2tb4713 (tb2t4713 j)) j)) :pattern ((t2tb4713 (tb2t4713 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 b d)))) (v (set b))
  (r (set (tuple21 (set (tuple21 b d)) b))))
  (= (mem (set1 (tuple2 (set1 (tuple2 b1 d1)) b1)) (t2tb4357 r)
  (relation b1 (set1 (tuple2 b1 d1)) (t2tb906 u) (t2tb12 v)))
  (forall ((x (set (tuple21 b d))) (y b))
  (=> (mem (tuple2 (set1 (tuple2 b1 d1)) b1)
  (Tuple2 (set1 (tuple2 b1 d1)) b1 (t2tb687 x) (t2tb14 y)) (t2tb4357 r))
  (and (mem33 x u) (mem2 y v)))))))

(declare-fun t2tb4714 ((set (set (tuple21 (set (tuple21 b d)) a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 b d)) a))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 b1 d1)) a1))) (t2tb4714 x))))

(declare-fun tb2t4714 (uni) (set (set (tuple21 (set (tuple21 b d)) a))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 b d)) a)))))
  (! (= (tb2t4714 (t2tb4714 i)) i) :pattern ((t2tb4714 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 b1 d1)) a1))) j)
     (= (t2tb4714 (tb2t4714 j)) j)) :pattern ((t2tb4714 (tb2t4714 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 b d)))) (v (set a))
  (r (set (tuple21 (set (tuple21 b d)) a))))
  (= (mem (set1 (tuple2 (set1 (tuple2 b1 d1)) a1)) (t2tb4359 r)
  (relation a1 (set1 (tuple2 b1 d1)) (t2tb906 u) (t2tb1 v)))
  (forall ((x (set (tuple21 b d))) (y a))
  (=> (mem (tuple2 (set1 (tuple2 b1 d1)) a1)
  (Tuple2 (set1 (tuple2 b1 d1)) a1 (t2tb687 x) (t2tb2 y)) (t2tb4359 r))
  (and (mem33 x u) (mem1 y v)))))))

;; mem_relation
  (assert
  (forall ((b2 ty))
  (forall ((u (set (set (tuple21 b d)))) (v uni) (r uni))
  (and
  (=> (mem (set1 (tuple2 (set1 (tuple2 b1 d1)) b2)) r
  (relation b2 (set1 (tuple2 b1 d1)) (t2tb906 u) v))
  (forall ((x (set (tuple21 b d))) (y uni))
  (=> (mem (tuple2 (set1 (tuple2 b1 d1)) b2)
  (Tuple2 (set1 (tuple2 b1 d1)) b2 (t2tb687 x) y) r)
  (and (mem33 x u) (mem b2 y v)))))
  (=>
  (forall ((x (set (tuple21 b d))) (y uni))
  (=> (sort b2 y)
  (=> (mem (tuple2 (set1 (tuple2 b1 d1)) b2)
  (Tuple2 (set1 (tuple2 b1 d1)) b2 (t2tb687 x) y) r)
  (and (mem33 x u) (mem b2 y v))))) (mem
  (set1 (tuple2 (set1 (tuple2 b1 d1)) b2)) r
  (relation b2 (set1 (tuple2 b1 d1)) (t2tb906 u) v)))))))

(declare-fun t2tb5119 ((set (set (tuple21 (tuple21 b d) (tuple21 (tuple21 a
  b) (tuple21 c d)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 b d) (tuple21 (tuple21 a b)
  (tuple21 c d))))))) (sort
  (set1
  (set1 (tuple2 (tuple2 b1 d1) (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)))))
  (t2tb5119 x))))

(declare-fun tb2t5119 (uni) (set (set (tuple21 (tuple21 b d)
  (tuple21 (tuple21 a b) (tuple21 c d))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 b d) (tuple21 (tuple21 a b)
  (tuple21 c d)))))))
  (! (= (tb2t5119 (t2tb5119 i)) i) :pattern ((t2tb5119 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (set1 (tuple2 (tuple2 b1 d1) (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)))))
     j) (= (t2tb5119 (tb2t5119 j)) j)) :pattern ((t2tb5119 (tb2t5119 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 b d))) (v (set (tuple21 (tuple21 a b) (tuple21 c
  d)))) (r (set (tuple21 (tuple21 b d) (tuple21 (tuple21 a b) (tuple21 c
  d))))))
  (= (mem
  (set1 (tuple2 (tuple2 b1 d1) (tuple2 (tuple2 a1 b1) (tuple2 c1 d1))))
  (t2tb5092 r)
  (relation (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) (tuple2 b1 d1) (t2tb687 u)
  (t2tb879 v)))
  (forall ((x (tuple21 b d)) (y (tuple21 (tuple21 a b) (tuple21 c d))))
  (=> (mem (tuple2 (tuple2 b1 d1) (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)))
  (Tuple2 (tuple2 b1 d1) (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) (t2tb692 x)
  (t2tb880 y)) (t2tb5092 r)) (and (mem23 x u) (mem50 y v)))))))

(declare-fun t2tb4722 ((set (set (tuple21 (tuple21 b d) (set (tuple21 b
  d)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 b d) (set (tuple21 b d))))))) (sort
  (set1 (set1 (tuple2 (tuple2 b1 d1) (set1 (tuple2 b1 d1))))) (t2tb4722 x))))

(declare-fun tb2t4722 (uni) (set (set (tuple21 (tuple21 b d) (set (tuple21 b
  d))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 b d) (set (tuple21 b d)))))))
  (! (= (tb2t4722 (t2tb4722 i)) i) :pattern ((t2tb4722 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 b1 d1) (set1 (tuple2 b1 d1))))) j)
     (= (t2tb4722 (tb2t4722 j)) j)) :pattern ((t2tb4722 (tb2t4722 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 b d))) (v (set (set (tuple21 b d))))
  (r (set (tuple21 (tuple21 b d) (set (tuple21 b d))))))
  (= (mem (set1 (tuple2 (tuple2 b1 d1) (set1 (tuple2 b1 d1)))) (t2tb4373 r)
  (relation (set1 (tuple2 b1 d1)) (tuple2 b1 d1) (t2tb687 u) (t2tb906 v)))
  (forall ((x (tuple21 b d)) (y (set (tuple21 b d))))
  (=> (mem (tuple2 (tuple2 b1 d1) (set1 (tuple2 b1 d1)))
  (Tuple2 (tuple2 b1 d1) (set1 (tuple2 b1 d1)) (t2tb692 x) (t2tb687 y))
  (t2tb4373 r)) (and (mem23 x u) (mem33 y v)))))))

(declare-fun t2tb4723 ((set (set (tuple21 (tuple21 b d) (tuple21 b
  d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 b d) (tuple21 b d)))))) (sort
  (set1 (set1 (tuple2 (tuple2 b1 d1) (tuple2 b1 d1)))) (t2tb4723 x))))

(declare-fun tb2t4723 (uni) (set (set (tuple21 (tuple21 b d) (tuple21 b
  d)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 b d) (tuple21 b d))))))
  (! (= (tb2t4723 (t2tb4723 i)) i) :pattern ((t2tb4723 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 b1 d1) (tuple2 b1 d1)))) j)
     (= (t2tb4723 (tb2t4723 j)) j)) :pattern ((t2tb4723 (tb2t4723 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 b d))) (v (set (tuple21 b d)))
  (r (set (tuple21 (tuple21 b d) (tuple21 b d)))))
  (= (mem (set1 (tuple2 (tuple2 b1 d1) (tuple2 b1 d1))) (t2tb747 r)
  (relation (tuple2 b1 d1) (tuple2 b1 d1) (t2tb687 u) (t2tb687 v)))
  (forall ((x (tuple21 b d)) (y (tuple21 b d)))
  (=> (mem (tuple2 (tuple2 b1 d1) (tuple2 b1 d1))
  (Tuple2 (tuple2 b1 d1) (tuple2 b1 d1) (t2tb692 x) (t2tb692 y)) (t2tb747 r))
  (and (mem23 x u) (mem23 y v)))))))

(declare-fun t2tb4724 ((set (set (tuple21 (tuple21 b d) d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 b d) d))))) (sort
  (set1 (set1 (tuple2 (tuple2 b1 d1) d1))) (t2tb4724 x))))

(declare-fun tb2t4724 (uni) (set (set (tuple21 (tuple21 b d) d))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 b d) d)))))
  (! (= (tb2t4724 (t2tb4724 i)) i) :pattern ((t2tb4724 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 b1 d1) d1))) j)
     (= (t2tb4724 (tb2t4724 j)) j)) :pattern ((t2tb4724 (tb2t4724 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 b d))) (v (set d)) (r (set (tuple21 (tuple21 b d)
  d))))
  (= (mem (set1 (tuple2 (tuple2 b1 d1) d1)) (t2tb4375 r)
  (relation d1 (tuple2 b1 d1) (t2tb687 u) (t2tb690 v)))
  (forall ((x (tuple21 b d)) (y d))
  (=> (mem (tuple2 (tuple2 b1 d1) d1)
  (Tuple2 (tuple2 b1 d1) d1 (t2tb692 x) (t2tb694 y)) (t2tb4375 r))
  (and (mem23 x u) (mem20 y v)))))))

(declare-fun t2tb4726 ((set (set (tuple21 (tuple21 b d) (set (tuple21 a
  c)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 b d) (set (tuple21 a c))))))) (sort
  (set1 (set1 (tuple2 (tuple2 b1 d1) (set1 (tuple2 a1 c1))))) (t2tb4726 x))))

(declare-fun tb2t4726 (uni) (set (set (tuple21 (tuple21 b d) (set (tuple21 a
  c))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 b d) (set (tuple21 a c)))))))
  (! (= (tb2t4726 (t2tb4726 i)) i) :pattern ((t2tb4726 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 b1 d1) (set1 (tuple2 a1 c1))))) j)
     (= (t2tb4726 (tb2t4726 j)) j)) :pattern ((t2tb4726 (tb2t4726 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 b d))) (v (set (set (tuple21 a c))))
  (r (set (tuple21 (tuple21 b d) (set (tuple21 a c))))))
  (= (mem (set1 (tuple2 (tuple2 b1 d1) (set1 (tuple2 a1 c1)))) (t2tb4378 r)
  (relation (set1 (tuple2 a1 c1)) (tuple2 b1 d1) (t2tb687 u) (t2tb128 v)))
  (forall ((x (tuple21 b d)) (y (set (tuple21 a c))))
  (=> (mem (tuple2 (tuple2 b1 d1) (set1 (tuple2 a1 c1)))
  (Tuple2 (tuple2 b1 d1) (set1 (tuple2 a1 c1)) (t2tb692 x) (t2tb129 y))
  (t2tb4378 r)) (and (mem23 x u) (mem11 y v)))))))

(declare-fun t2tb4727 ((set (set (tuple21 (tuple21 b d) (tuple21 a
  c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 b d) (tuple21 a c)))))) (sort
  (set1 (set1 (tuple2 (tuple2 b1 d1) (tuple2 a1 c1)))) (t2tb4727 x))))

(declare-fun tb2t4727 (uni) (set (set (tuple21 (tuple21 b d) (tuple21 a
  c)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 b d) (tuple21 a c))))))
  (! (= (tb2t4727 (t2tb4727 i)) i) :pattern ((t2tb4727 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 b1 d1) (tuple2 a1 c1)))) j)
     (= (t2tb4727 (tb2t4727 j)) j)) :pattern ((t2tb4727 (tb2t4727 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 b d))) (v (set (tuple21 a c)))
  (r (set (tuple21 (tuple21 b d) (tuple21 a c)))))
  (= (mem (set1 (tuple2 (tuple2 b1 d1) (tuple2 a1 c1))) (t2tb755 r)
  (relation (tuple2 a1 c1) (tuple2 b1 d1) (t2tb687 u) (t2tb129 v)))
  (forall ((x (tuple21 b d)) (y (tuple21 a c)))
  (=> (mem (tuple2 (tuple2 b1 d1) (tuple2 a1 c1))
  (Tuple2 (tuple2 b1 d1) (tuple2 a1 c1) (t2tb692 x) (t2tb133 y)) (t2tb755 r))
  (and (mem23 x u) (mem10 y v)))))))

(declare-fun t2tb4728 ((set (set (tuple21 (tuple21 b d) c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 b d) c))))) (sort
  (set1 (set1 (tuple2 (tuple2 b1 d1) c1))) (t2tb4728 x))))

(declare-fun tb2t4728 (uni) (set (set (tuple21 (tuple21 b d) c))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 b d) c)))))
  (! (= (tb2t4728 (t2tb4728 i)) i) :pattern ((t2tb4728 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 b1 d1) c1))) j)
     (= (t2tb4728 (tb2t4728 j)) j)) :pattern ((t2tb4728 (tb2t4728 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 b d))) (v (set c)) (r (set (tuple21 (tuple21 b d)
  c))))
  (= (mem (set1 (tuple2 (tuple2 b1 d1) c1)) (t2tb4380 r)
  (relation c1 (tuple2 b1 d1) (t2tb687 u) (t2tb132 v)))
  (forall ((x (tuple21 b d)) (y c))
  (=> (mem (tuple2 (tuple2 b1 d1) c1)
  (Tuple2 (tuple2 b1 d1) c1 (t2tb692 x) (t2tb135 y)) (t2tb4380 r))
  (and (mem23 x u) (mem7 y v)))))))

(declare-fun t2tb4730 ((set (set (tuple21 (tuple21 b d) (tuple21 a
  b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 b d) (tuple21 a b)))))) (sort
  (set1 (set1 (tuple2 (tuple2 b1 d1) (tuple2 a1 b1)))) (t2tb4730 x))))

(declare-fun tb2t4730 (uni) (set (set (tuple21 (tuple21 b d) (tuple21 a
  b)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 b d) (tuple21 a b))))))
  (! (= (tb2t4730 (t2tb4730 i)) i) :pattern ((t2tb4730 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 b1 d1) (tuple2 a1 b1)))) j)
     (= (t2tb4730 (tb2t4730 j)) j)) :pattern ((t2tb4730 (tb2t4730 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 b d))) (v (set (tuple21 a b)))
  (r (set (tuple21 (tuple21 b d) (tuple21 a b)))))
  (= (mem (set1 (tuple2 (tuple2 b1 d1) (tuple2 a1 b1))) (t2tb4383 r)
  (relation (tuple2 a1 b1) (tuple2 b1 d1) (t2tb687 u) (t2tb11 v)))
  (forall ((x (tuple21 b d)) (y (tuple21 a b)))
  (=> (mem (tuple2 (tuple2 b1 d1) (tuple2 a1 b1))
  (Tuple2 (tuple2 b1 d1) (tuple2 a1 b1) (t2tb692 x) (t2tb13 y)) (t2tb4383 r))
  (and (mem23 x u) (mem3 y v)))))))

(declare-fun t2tb4731 ((set (set (tuple21 (tuple21 b d) b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 b d) b))))) (sort
  (set1 (set1 (tuple2 (tuple2 b1 d1) b1))) (t2tb4731 x))))

(declare-fun tb2t4731 (uni) (set (set (tuple21 (tuple21 b d) b))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 b d) b)))))
  (! (= (tb2t4731 (t2tb4731 i)) i) :pattern ((t2tb4731 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 b1 d1) b1))) j)
     (= (t2tb4731 (tb2t4731 j)) j)) :pattern ((t2tb4731 (tb2t4731 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 b d))) (v (set b)) (r (set (tuple21 (tuple21 b d)
  b))))
  (= (mem (set1 (tuple2 (tuple2 b1 d1) b1)) (t2tb4385 r)
  (relation b1 (tuple2 b1 d1) (t2tb687 u) (t2tb12 v)))
  (forall ((x (tuple21 b d)) (y b))
  (=> (mem (tuple2 (tuple2 b1 d1) b1)
  (Tuple2 (tuple2 b1 d1) b1 (t2tb692 x) (t2tb14 y)) (t2tb4385 r))
  (and (mem23 x u) (mem2 y v)))))))

(declare-fun t2tb4732 ((set (set (tuple21 (tuple21 b d) a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 b d) a))))) (sort
  (set1 (set1 (tuple2 (tuple2 b1 d1) a1))) (t2tb4732 x))))

(declare-fun tb2t4732 (uni) (set (set (tuple21 (tuple21 b d) a))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 b d) a)))))
  (! (= (tb2t4732 (t2tb4732 i)) i) :pattern ((t2tb4732 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 b1 d1) a1))) j)
     (= (t2tb4732 (tb2t4732 j)) j)) :pattern ((t2tb4732 (tb2t4732 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 b d))) (v (set a)) (r (set (tuple21 (tuple21 b d)
  a))))
  (= (mem (set1 (tuple2 (tuple2 b1 d1) a1)) (t2tb4386 r)
  (relation a1 (tuple2 b1 d1) (t2tb687 u) (t2tb1 v)))
  (forall ((x (tuple21 b d)) (y a))
  (=> (mem (tuple2 (tuple2 b1 d1) a1)
  (Tuple2 (tuple2 b1 d1) a1 (t2tb692 x) (t2tb2 y)) (t2tb4386 r))
  (and (mem23 x u) (mem1 y v)))))))

;; mem_relation
  (assert
  (forall ((b2 ty))
  (forall ((u (set (tuple21 b d))) (v uni) (r uni))
  (and
  (=> (mem (set1 (tuple2 (tuple2 b1 d1) b2)) r
  (relation b2 (tuple2 b1 d1) (t2tb687 u) v))
  (forall ((x (tuple21 b d)) (y uni))
  (=> (mem (tuple2 (tuple2 b1 d1) b2)
  (Tuple2 (tuple2 b1 d1) b2 (t2tb692 x) y) r) (and (mem23 x u) (mem b2 y v)))))
  (=>
  (forall ((x (tuple21 b d)) (y uni))
  (=> (sort b2 y)
  (=> (mem (tuple2 (tuple2 b1 d1) b2)
  (Tuple2 (tuple2 b1 d1) b2 (t2tb692 x) y) r) (and (mem23 x u) (mem b2 y v)))))
  (mem (set1 (tuple2 (tuple2 b1 d1) b2)) r
  (relation b2 (tuple2 b1 d1) (t2tb687 u) v)))))))

(declare-fun t2tb5120 ((set (set (tuple21 d (tuple21 (tuple21 a b) (tuple21 c
  d)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 d (tuple21 (tuple21 a b) (tuple21 c d)))))))
  (sort (set1 (set1 (tuple2 d1 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)))))
  (t2tb5120 x))))

(declare-fun tb2t5120 (uni) (set (set (tuple21 d (tuple21 (tuple21 a b)
  (tuple21 c d))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 d (tuple21 (tuple21 a b) (tuple21 c d)))))))
  (! (= (tb2t5120 (t2tb5120 i)) i) :pattern ((t2tb5120 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 d1 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1))))) j)
     (= (t2tb5120 (tb2t5120 j)) j)) :pattern ((t2tb5120 (tb2t5120 j))) )))

;; mem_relation
  (assert
  (forall ((u (set d)) (v (set (tuple21 (tuple21 a b) (tuple21 c d))))
  (r (set (tuple21 d (tuple21 (tuple21 a b) (tuple21 c d))))))
  (= (mem (set1 (tuple2 d1 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1))))
  (t2tb5094 r)
  (relation (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) d1 (t2tb690 u)
  (t2tb879 v)))
  (forall ((x d) (y (tuple21 (tuple21 a b) (tuple21 c d))))
  (=> (mem (tuple2 d1 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)))
  (Tuple2 d1 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) (t2tb694 x) (t2tb880 y))
  (t2tb5094 r)) (and (mem20 x u) (mem50 y v)))))))

(declare-fun t2tb4738 ((set (set (tuple21 d (set (tuple21 b d)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 d (set (tuple21 b d))))))) (sort
  (set1 (set1 (tuple2 d1 (set1 (tuple2 b1 d1))))) (t2tb4738 x))))

(declare-fun tb2t4738 (uni) (set (set (tuple21 d (set (tuple21 b d))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 d (set (tuple21 b d)))))))
  (! (= (tb2t4738 (t2tb4738 i)) i) :pattern ((t2tb4738 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 d1 (set1 (tuple2 b1 d1))))) j)
     (= (t2tb4738 (tb2t4738 j)) j)) :pattern ((t2tb4738 (tb2t4738 j))) )))

;; mem_relation
  (assert
  (forall ((u (set d)) (v (set (set (tuple21 b d)))) (r (set (tuple21 d
  (set (tuple21 b d))))))
  (= (mem (set1 (tuple2 d1 (set1 (tuple2 b1 d1)))) (t2tb4397 r)
  (relation (set1 (tuple2 b1 d1)) d1 (t2tb690 u) (t2tb906 v)))
  (forall ((x d) (y (set (tuple21 b d))))
  (=> (mem (tuple2 d1 (set1 (tuple2 b1 d1)))
  (Tuple2 d1 (set1 (tuple2 b1 d1)) (t2tb694 x) (t2tb687 y)) (t2tb4397 r))
  (and (mem20 x u) (mem33 y v)))))))

(declare-fun t2tb4739 ((set (set (tuple21 d (tuple21 b d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 d (tuple21 b d)))))) (sort
  (set1 (set1 (tuple2 d1 (tuple2 b1 d1)))) (t2tb4739 x))))

(declare-fun tb2t4739 (uni) (set (set (tuple21 d (tuple21 b d)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 d (tuple21 b d))))))
  (! (= (tb2t4739 (t2tb4739 i)) i) :pattern ((t2tb4739 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 d1 (tuple2 b1 d1)))) j)
     (= (t2tb4739 (tb2t4739 j)) j)) :pattern ((t2tb4739 (tb2t4739 j))) )))

;; mem_relation
  (assert
  (forall ((u (set d)) (v (set (tuple21 b d))) (r (set (tuple21 d (tuple21 b
  d)))))
  (= (mem (set1 (tuple2 d1 (tuple2 b1 d1))) (t2tb4399 r)
  (relation (tuple2 b1 d1) d1 (t2tb690 u) (t2tb687 v)))
  (forall ((x d) (y (tuple21 b d)))
  (=> (mem (tuple2 d1 (tuple2 b1 d1))
  (Tuple2 d1 (tuple2 b1 d1) (t2tb694 x) (t2tb692 y)) (t2tb4399 r))
  (and (mem20 x u) (mem23 y v)))))))

(declare-fun t2tb974 ((set (set (tuple21 d d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 d d))))) (sort (set1 (set1 (tuple2 d1 d1)))
  (t2tb974 x))))

(declare-fun tb2t974 (uni) (set (set (tuple21 d d))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 d d)))))
  (! (= (tb2t974 (t2tb974 i)) i) :pattern ((t2tb974 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 d1 d1))) j) (= (t2tb974 (tb2t974 j)) j)) :pattern (
  (t2tb974 (tb2t974 j))) )))

;; mem_relation
  (assert
  (forall ((u (set d)) (v (set d)) (r (set (tuple21 d d))))
  (= (mem (set1 (tuple2 d1 d1)) (t2tb825 r)
  (relation d1 d1 (t2tb690 u) (t2tb690 v)))
  (forall ((x d) (y d))
  (=> (mem (tuple2 d1 d1) (Tuple2 d1 d1 (t2tb694 x) (t2tb694 y)) (t2tb825 r))
  (and (mem20 x u) (mem20 y v)))))))

(declare-fun t2tb4741 ((set (set (tuple21 d (set (tuple21 a c)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 d (set (tuple21 a c))))))) (sort
  (set1 (set1 (tuple2 d1 (set1 (tuple2 a1 c1))))) (t2tb4741 x))))

(declare-fun tb2t4741 (uni) (set (set (tuple21 d (set (tuple21 a c))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 d (set (tuple21 a c)))))))
  (! (= (tb2t4741 (t2tb4741 i)) i) :pattern ((t2tb4741 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 d1 (set1 (tuple2 a1 c1))))) j)
     (= (t2tb4741 (tb2t4741 j)) j)) :pattern ((t2tb4741 (tb2t4741 j))) )))

;; mem_relation
  (assert
  (forall ((u (set d)) (v (set (set (tuple21 a c)))) (r (set (tuple21 d
  (set (tuple21 a c))))))
  (= (mem (set1 (tuple2 d1 (set1 (tuple2 a1 c1)))) (t2tb4402 r)
  (relation (set1 (tuple2 a1 c1)) d1 (t2tb690 u) (t2tb128 v)))
  (forall ((x d) (y (set (tuple21 a c))))
  (=> (mem (tuple2 d1 (set1 (tuple2 a1 c1)))
  (Tuple2 d1 (set1 (tuple2 a1 c1)) (t2tb694 x) (t2tb129 y)) (t2tb4402 r))
  (and (mem20 x u) (mem11 y v)))))))

(declare-fun t2tb4742 ((set (set (tuple21 d (tuple21 a c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 d (tuple21 a c)))))) (sort
  (set1 (set1 (tuple2 d1 (tuple2 a1 c1)))) (t2tb4742 x))))

(declare-fun tb2t4742 (uni) (set (set (tuple21 d (tuple21 a c)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 d (tuple21 a c))))))
  (! (= (tb2t4742 (t2tb4742 i)) i) :pattern ((t2tb4742 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 d1 (tuple2 a1 c1)))) j)
     (= (t2tb4742 (tb2t4742 j)) j)) :pattern ((t2tb4742 (tb2t4742 j))) )))

;; mem_relation
  (assert
  (forall ((u (set d)) (v (set (tuple21 a c))) (r (set (tuple21 d (tuple21 a
  c)))))
  (= (mem (set1 (tuple2 d1 (tuple2 a1 c1))) (t2tb4404 r)
  (relation (tuple2 a1 c1) d1 (t2tb690 u) (t2tb129 v)))
  (forall ((x d) (y (tuple21 a c)))
  (=> (mem (tuple2 d1 (tuple2 a1 c1))
  (Tuple2 d1 (tuple2 a1 c1) (t2tb694 x) (t2tb133 y)) (t2tb4404 r))
  (and (mem20 x u) (mem10 y v)))))))

(declare-fun t2tb976 ((set (set (tuple21 d c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 d c))))) (sort (set1 (set1 (tuple2 d1 c1)))
  (t2tb976 x))))

(declare-fun tb2t976 (uni) (set (set (tuple21 d c))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 d c)))))
  (! (= (tb2t976 (t2tb976 i)) i) :pattern ((t2tb976 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 d1 c1))) j) (= (t2tb976 (tb2t976 j)) j)) :pattern (
  (t2tb976 (tb2t976 j))) )))

;; mem_relation
  (assert
  (forall ((u (set d)) (v (set c)) (r (set (tuple21 d c))))
  (= (mem (set1 (tuple2 d1 c1)) (t2tb829 r)
  (relation c1 d1 (t2tb690 u) (t2tb132 v)))
  (forall ((x d) (y c))
  (=> (mem (tuple2 d1 c1) (Tuple2 d1 c1 (t2tb694 x) (t2tb135 y)) (t2tb829 r))
  (and (mem20 x u) (mem7 y v)))))))

(declare-fun t2tb978 ((set (set (tuple21 d (tuple21 a b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 d (tuple21 a b)))))) (sort
  (set1 (set1 (tuple2 d1 (tuple2 a1 b1)))) (t2tb978 x))))

(declare-fun tb2t978 (uni) (set (set (tuple21 d (tuple21 a b)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 d (tuple21 a b))))))
  (! (= (tb2t978 (t2tb978 i)) i) :pattern ((t2tb978 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 d1 (tuple2 a1 b1)))) j)
     (= (t2tb978 (tb2t978 j)) j)) :pattern ((t2tb978 (tb2t978 j))) )))

;; mem_relation
  (assert
  (forall ((u (set d)) (v (set (tuple21 a b))) (r (set (tuple21 d (tuple21 a
  b)))))
  (= (mem (set1 (tuple2 d1 (tuple2 a1 b1))) (t2tb833 r)
  (relation (tuple2 a1 b1) d1 (t2tb690 u) (t2tb11 v)))
  (forall ((x d) (y (tuple21 a b)))
  (=> (mem (tuple2 d1 (tuple2 a1 b1))
  (Tuple2 d1 (tuple2 a1 b1) (t2tb694 x) (t2tb13 y)) (t2tb833 r))
  (and (mem20 x u) (mem3 y v)))))))

(declare-fun t2tb979 ((set (set (tuple21 d b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 d b))))) (sort (set1 (set1 (tuple2 d1 b1)))
  (t2tb979 x))))

(declare-fun tb2t979 (uni) (set (set (tuple21 d b))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 d b)))))
  (! (= (tb2t979 (t2tb979 i)) i) :pattern ((t2tb979 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 d1 b1))) j) (= (t2tb979 (tb2t979 j)) j)) :pattern (
  (t2tb979 (tb2t979 j))) )))

;; mem_relation
  (assert
  (forall ((u (set d)) (v (set b)) (r (set (tuple21 d b))))
  (= (mem (set1 (tuple2 d1 b1)) (t2tb835 r)
  (relation b1 d1 (t2tb690 u) (t2tb12 v)))
  (forall ((x d) (y b))
  (=> (mem (tuple2 d1 b1) (Tuple2 d1 b1 (t2tb694 x) (t2tb14 y)) (t2tb835 r))
  (and (mem20 x u) (mem2 y v)))))))

(declare-fun t2tb980 ((set (set (tuple21 d a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 d a))))) (sort (set1 (set1 (tuple2 d1 a1)))
  (t2tb980 x))))

(declare-fun tb2t980 (uni) (set (set (tuple21 d a))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 d a)))))
  (! (= (tb2t980 (t2tb980 i)) i) :pattern ((t2tb980 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 d1 a1))) j) (= (t2tb980 (tb2t980 j)) j)) :pattern (
  (t2tb980 (tb2t980 j))) )))

;; mem_relation
  (assert
  (forall ((u (set d)) (v (set a)) (r (set (tuple21 d a))))
  (= (mem (set1 (tuple2 d1 a1)) (t2tb837 r)
  (relation a1 d1 (t2tb690 u) (t2tb1 v)))
  (forall ((x d) (y a))
  (=> (mem (tuple2 d1 a1) (Tuple2 d1 a1 (t2tb694 x) (t2tb2 y)) (t2tb837 r))
  (and (mem20 x u) (mem1 y v)))))))

;; mem_relation
  (assert
  (forall ((b2 ty))
  (forall ((u (set d)) (v uni) (r uni))
  (and
  (=> (mem (set1 (tuple2 d1 b2)) r (relation b2 d1 (t2tb690 u) v))
  (forall ((x d) (y uni))
  (=> (mem (tuple2 d1 b2) (Tuple2 d1 b2 (t2tb694 x) y) r)
  (and (mem20 x u) (mem b2 y v)))))
  (=>
  (forall ((x d) (y uni))
  (=> (sort b2 y)
  (=> (mem (tuple2 d1 b2) (Tuple2 d1 b2 (t2tb694 x) y) r)
  (and (mem20 x u) (mem b2 y v))))) (mem (set1 (tuple2 d1 b2)) r
  (relation b2 d1 (t2tb690 u) v)))))))

(declare-fun t2tb5121 ((set (set (tuple21 (set (tuple21 a c))
  (tuple21 (tuple21 a b) (tuple21 c d)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a c)) (tuple21 (tuple21 a b)
  (tuple21 c d))))))) (sort
  (set1
  (set1
  (tuple2 (set1 (tuple2 a1 c1)) (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)))))
  (t2tb5121 x))))

(declare-fun tb2t5121 (uni) (set (set (tuple21 (set (tuple21 a c))
  (tuple21 (tuple21 a b) (tuple21 c d))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a c)) (tuple21 (tuple21 a b)
  (tuple21 c d)))))))
  (! (= (tb2t5121 (t2tb5121 i)) i) :pattern ((t2tb5121 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (set1
     (tuple2 (set1 (tuple2 a1 c1)) (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)))))
     j) (= (t2tb5121 (tb2t5121 j)) j)) :pattern ((t2tb5121 (tb2t5121 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a c)))) (v (set (tuple21 (tuple21 a b)
  (tuple21 c d)))) (r (set (tuple21 (set (tuple21 a c)) (tuple21 (tuple21 a
  b) (tuple21 c d))))))
  (= (mem
  (set1
  (tuple2 (set1 (tuple2 a1 c1)) (tuple2 (tuple2 a1 b1) (tuple2 c1 d1))))
  (t2tb5096 r)
  (relation (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) (set1 (tuple2 a1 c1))
  (t2tb128 u) (t2tb879 v)))
  (forall ((x (set (tuple21 a c))) (y (tuple21 (tuple21 a b) (tuple21 c d))))
  (=> (mem
  (tuple2 (set1 (tuple2 a1 c1)) (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)))
  (Tuple2 (set1 (tuple2 a1 c1)) (tuple2 (tuple2 a1 b1) (tuple2 c1 d1))
  (t2tb129 x) (t2tb880 y)) (t2tb5096 r)) (and (mem11 x u) (mem50 y v)))))))

(declare-fun t2tb4768 ((set (set (tuple21 (set (tuple21 a c)) (set (tuple21 b
  d)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a c)) (set (tuple21 b d)))))))
  (sort (set1 (set1 (tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 b1 d1)))))
  (t2tb4768 x))))

(declare-fun tb2t4768 (uni) (set (set (tuple21 (set (tuple21 a c))
  (set (tuple21 b d))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a c)) (set (tuple21 b d)))))))
  (! (= (tb2t4768 (t2tb4768 i)) i) :pattern ((t2tb4768 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 b1 d1))))) j)
     (= (t2tb4768 (tb2t4768 j)) j)) :pattern ((t2tb4768 (tb2t4768 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a c)))) (v (set (set (tuple21 b d))))
  (r (set (tuple21 (set (tuple21 a c)) (set (tuple21 b d))))))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 b1 d1))))
  (t2tb4455 r)
  (relation (set1 (tuple2 b1 d1)) (set1 (tuple2 a1 c1)) (t2tb128 u)
  (t2tb906 v)))
  (forall ((x (set (tuple21 a c))) (y (set (tuple21 b d))))
  (=> (mem (tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 b1 d1)))
  (Tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 b1 d1)) (t2tb129 x)
  (t2tb687 y)) (t2tb4455 r)) (and (mem11 x u) (mem33 y v)))))))

(declare-fun t2tb4769 ((set (set (tuple21 (set (tuple21 a c)) (tuple21 b
  d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a c)) (tuple21 b d)))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 a1 c1)) (tuple2 b1 d1)))) (t2tb4769 x))))

(declare-fun tb2t4769 (uni) (set (set (tuple21 (set (tuple21 a c)) (tuple21 b
  d)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a c)) (tuple21 b d))))))
  (! (= (tb2t4769 (t2tb4769 i)) i) :pattern ((t2tb4769 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 a1 c1)) (tuple2 b1 d1)))) j)
     (= (t2tb4769 (tb2t4769 j)) j)) :pattern ((t2tb4769 (tb2t4769 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a c)))) (v (set (tuple21 b d)))
  (r (set (tuple21 (set (tuple21 a c)) (tuple21 b d)))))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 c1)) (tuple2 b1 d1))) (t2tb4457 r)
  (relation (tuple2 b1 d1) (set1 (tuple2 a1 c1)) (t2tb128 u) (t2tb687 v)))
  (forall ((x (set (tuple21 a c))) (y (tuple21 b d)))
  (=> (mem (tuple2 (set1 (tuple2 a1 c1)) (tuple2 b1 d1))
  (Tuple2 (set1 (tuple2 a1 c1)) (tuple2 b1 d1) (t2tb129 x) (t2tb692 y))
  (t2tb4457 r)) (and (mem11 x u) (mem23 y v)))))))

(declare-fun t2tb4770 ((set (set (tuple21 (set (tuple21 a c)) d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a c)) d))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 a1 c1)) d1))) (t2tb4770 x))))

(declare-fun tb2t4770 (uni) (set (set (tuple21 (set (tuple21 a c)) d))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a c)) d)))))
  (! (= (tb2t4770 (t2tb4770 i)) i) :pattern ((t2tb4770 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 a1 c1)) d1))) j)
     (= (t2tb4770 (tb2t4770 j)) j)) :pattern ((t2tb4770 (tb2t4770 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a c)))) (v (set d))
  (r (set (tuple21 (set (tuple21 a c)) d))))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 c1)) d1)) (t2tb4459 r)
  (relation d1 (set1 (tuple2 a1 c1)) (t2tb128 u) (t2tb690 v)))
  (forall ((x (set (tuple21 a c))) (y d))
  (=> (mem (tuple2 (set1 (tuple2 a1 c1)) d1)
  (Tuple2 (set1 (tuple2 a1 c1)) d1 (t2tb129 x) (t2tb694 y)) (t2tb4459 r))
  (and (mem11 x u) (mem20 y v)))))))

(declare-fun t2tb4772 ((set (set (tuple21 (set (tuple21 a c)) (set (tuple21 a
  c)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a c)) (set (tuple21 a c)))))))
  (sort (set1 (set1 (tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 a1 c1)))))
  (t2tb4772 x))))

(declare-fun tb2t4772 (uni) (set (set (tuple21 (set (tuple21 a c))
  (set (tuple21 a c))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a c)) (set (tuple21 a c)))))))
  (! (= (tb2t4772 (t2tb4772 i)) i) :pattern ((t2tb4772 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 a1 c1))))) j)
     (= (t2tb4772 (tb2t4772 j)) j)) :pattern ((t2tb4772 (tb2t4772 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a c)))) (v (set (set (tuple21 a c))))
  (r (set (tuple21 (set (tuple21 a c)) (set (tuple21 a c))))))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 a1 c1))))
  (t2tb4463 r)
  (relation (set1 (tuple2 a1 c1)) (set1 (tuple2 a1 c1)) (t2tb128 u)
  (t2tb128 v)))
  (forall ((x (set (tuple21 a c))) (y (set (tuple21 a c))))
  (=> (mem (tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 a1 c1)))
  (Tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 a1 c1)) (t2tb129 x)
  (t2tb129 y)) (t2tb4463 r)) (and (mem11 x u) (mem11 y v)))))))

(declare-fun t2tb4773 ((set (set (tuple21 (set (tuple21 a c)) (tuple21 a
  c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a c)) (tuple21 a c)))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 c1)))) (t2tb4773 x))))

(declare-fun tb2t4773 (uni) (set (set (tuple21 (set (tuple21 a c)) (tuple21 a
  c)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a c)) (tuple21 a c))))))
  (! (= (tb2t4773 (t2tb4773 i)) i) :pattern ((t2tb4773 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 c1)))) j)
     (= (t2tb4773 (tb2t4773 j)) j)) :pattern ((t2tb4773 (tb2t4773 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a c)))) (v (set (tuple21 a c)))
  (r (set (tuple21 (set (tuple21 a c)) (tuple21 a c)))))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 c1))) (t2tb4465 r)
  (relation (tuple2 a1 c1) (set1 (tuple2 a1 c1)) (t2tb128 u) (t2tb129 v)))
  (forall ((x (set (tuple21 a c))) (y (tuple21 a c)))
  (=> (mem (tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 c1))
  (Tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 c1) (t2tb129 x) (t2tb133 y))
  (t2tb4465 r)) (and (mem11 x u) (mem10 y v)))))))

(declare-fun t2tb4774 ((set (set (tuple21 (set (tuple21 a c)) c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a c)) c))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 a1 c1)) c1))) (t2tb4774 x))))

(declare-fun tb2t4774 (uni) (set (set (tuple21 (set (tuple21 a c)) c))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a c)) c)))))
  (! (= (tb2t4774 (t2tb4774 i)) i) :pattern ((t2tb4774 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 a1 c1)) c1))) j)
     (= (t2tb4774 (tb2t4774 j)) j)) :pattern ((t2tb4774 (tb2t4774 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a c)))) (v (set c))
  (r (set (tuple21 (set (tuple21 a c)) c))))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 c1)) c1)) (t2tb4467 r)
  (relation c1 (set1 (tuple2 a1 c1)) (t2tb128 u) (t2tb132 v)))
  (forall ((x (set (tuple21 a c))) (y c))
  (=> (mem (tuple2 (set1 (tuple2 a1 c1)) c1)
  (Tuple2 (set1 (tuple2 a1 c1)) c1 (t2tb129 x) (t2tb135 y)) (t2tb4467 r))
  (and (mem11 x u) (mem7 y v)))))))

(declare-fun t2tb4776 ((set (set (tuple21 (set (tuple21 a c)) (tuple21 a
  b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a c)) (tuple21 a b)))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 b1)))) (t2tb4776 x))))

(declare-fun tb2t4776 (uni) (set (set (tuple21 (set (tuple21 a c)) (tuple21 a
  b)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a c)) (tuple21 a b))))))
  (! (= (tb2t4776 (t2tb4776 i)) i) :pattern ((t2tb4776 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 b1)))) j)
     (= (t2tb4776 (tb2t4776 j)) j)) :pattern ((t2tb4776 (tb2t4776 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a c)))) (v (set (tuple21 a b)))
  (r (set (tuple21 (set (tuple21 a c)) (tuple21 a b)))))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 b1))) (t2tb4471 r)
  (relation (tuple2 a1 b1) (set1 (tuple2 a1 c1)) (t2tb128 u) (t2tb11 v)))
  (forall ((x (set (tuple21 a c))) (y (tuple21 a b)))
  (=> (mem (tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 b1))
  (Tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 b1) (t2tb129 x) (t2tb13 y))
  (t2tb4471 r)) (and (mem11 x u) (mem3 y v)))))))

(declare-fun t2tb4777 ((set (set (tuple21 (set (tuple21 a c)) b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a c)) b))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 a1 c1)) b1))) (t2tb4777 x))))

(declare-fun tb2t4777 (uni) (set (set (tuple21 (set (tuple21 a c)) b))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a c)) b)))))
  (! (= (tb2t4777 (t2tb4777 i)) i) :pattern ((t2tb4777 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 a1 c1)) b1))) j)
     (= (t2tb4777 (tb2t4777 j)) j)) :pattern ((t2tb4777 (tb2t4777 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a c)))) (v (set b))
  (r (set (tuple21 (set (tuple21 a c)) b))))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 c1)) b1)) (t2tb4473 r)
  (relation b1 (set1 (tuple2 a1 c1)) (t2tb128 u) (t2tb12 v)))
  (forall ((x (set (tuple21 a c))) (y b))
  (=> (mem (tuple2 (set1 (tuple2 a1 c1)) b1)
  (Tuple2 (set1 (tuple2 a1 c1)) b1 (t2tb129 x) (t2tb14 y)) (t2tb4473 r))
  (and (mem11 x u) (mem2 y v)))))))

(declare-fun t2tb4778 ((set (set (tuple21 (set (tuple21 a c)) a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (set (tuple21 a c)) a))))) (sort
  (set1 (set1 (tuple2 (set1 (tuple2 a1 c1)) a1))) (t2tb4778 x))))

(declare-fun tb2t4778 (uni) (set (set (tuple21 (set (tuple21 a c)) a))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (set (tuple21 a c)) a)))))
  (! (= (tb2t4778 (t2tb4778 i)) i) :pattern ((t2tb4778 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (set1 (tuple2 a1 c1)) a1))) j)
     (= (t2tb4778 (tb2t4778 j)) j)) :pattern ((t2tb4778 (tb2t4778 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (set (tuple21 a c)))) (v (set a))
  (r (set (tuple21 (set (tuple21 a c)) a))))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 c1)) a1)) (t2tb4475 r)
  (relation a1 (set1 (tuple2 a1 c1)) (t2tb128 u) (t2tb1 v)))
  (forall ((x (set (tuple21 a c))) (y a))
  (=> (mem (tuple2 (set1 (tuple2 a1 c1)) a1)
  (Tuple2 (set1 (tuple2 a1 c1)) a1 (t2tb129 x) (t2tb2 y)) (t2tb4475 r))
  (and (mem11 x u) (mem1 y v)))))))

;; mem_relation
  (assert
  (forall ((b2 ty))
  (forall ((u (set (set (tuple21 a c)))) (v uni) (r uni))
  (and
  (=> (mem (set1 (tuple2 (set1 (tuple2 a1 c1)) b2)) r
  (relation b2 (set1 (tuple2 a1 c1)) (t2tb128 u) v))
  (forall ((x (set (tuple21 a c))) (y uni))
  (=> (mem (tuple2 (set1 (tuple2 a1 c1)) b2)
  (Tuple2 (set1 (tuple2 a1 c1)) b2 (t2tb129 x) y) r)
  (and (mem11 x u) (mem b2 y v)))))
  (=>
  (forall ((x (set (tuple21 a c))) (y uni))
  (=> (sort b2 y)
  (=> (mem (tuple2 (set1 (tuple2 a1 c1)) b2)
  (Tuple2 (set1 (tuple2 a1 c1)) b2 (t2tb129 x) y) r)
  (and (mem11 x u) (mem b2 y v))))) (mem
  (set1 (tuple2 (set1 (tuple2 a1 c1)) b2)) r
  (relation b2 (set1 (tuple2 a1 c1)) (t2tb128 u) v)))))))

(declare-fun t2tb5122 ((set (set (tuple21 (tuple21 a c) (tuple21 (tuple21 a
  b) (tuple21 c d)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a c) (tuple21 (tuple21 a b)
  (tuple21 c d))))))) (sort
  (set1
  (set1 (tuple2 (tuple2 a1 c1) (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)))))
  (t2tb5122 x))))

(declare-fun tb2t5122 (uni) (set (set (tuple21 (tuple21 a c)
  (tuple21 (tuple21 a b) (tuple21 c d))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a c) (tuple21 (tuple21 a b)
  (tuple21 c d)))))))
  (! (= (tb2t5122 (t2tb5122 i)) i) :pattern ((t2tb5122 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (set1 (tuple2 (tuple2 a1 c1) (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)))))
     j) (= (t2tb5122 (tb2t5122 j)) j)) :pattern ((t2tb5122 (tb2t5122 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a c))) (v (set (tuple21 (tuple21 a b) (tuple21 c
  d)))) (r (set (tuple21 (tuple21 a c) (tuple21 (tuple21 a b) (tuple21 c
  d))))))
  (= (mem
  (set1 (tuple2 (tuple2 a1 c1) (tuple2 (tuple2 a1 b1) (tuple2 c1 d1))))
  (t2tb5098 r)
  (relation (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) (tuple2 a1 c1) (t2tb129 u)
  (t2tb879 v)))
  (forall ((x (tuple21 a c)) (y (tuple21 (tuple21 a b) (tuple21 c d))))
  (=> (mem (tuple2 (tuple2 a1 c1) (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)))
  (Tuple2 (tuple2 a1 c1) (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) (t2tb133 x)
  (t2tb880 y)) (t2tb5098 r)) (and (mem10 x u) (mem50 y v)))))))

(declare-fun t2tb4786 ((set (set (tuple21 (tuple21 a c) (set (tuple21 b
  d)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a c) (set (tuple21 b d))))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 c1) (set1 (tuple2 b1 d1))))) (t2tb4786 x))))

(declare-fun tb2t4786 (uni) (set (set (tuple21 (tuple21 a c) (set (tuple21 b
  d))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a c) (set (tuple21 b d)))))))
  (! (= (tb2t4786 (t2tb4786 i)) i) :pattern ((t2tb4786 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 c1) (set1 (tuple2 b1 d1))))) j)
     (= (t2tb4786 (tb2t4786 j)) j)) :pattern ((t2tb4786 (tb2t4786 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a c))) (v (set (set (tuple21 b d))))
  (r (set (tuple21 (tuple21 a c) (set (tuple21 b d))))))
  (= (mem (set1 (tuple2 (tuple2 a1 c1) (set1 (tuple2 b1 d1)))) (t2tb4489 r)
  (relation (set1 (tuple2 b1 d1)) (tuple2 a1 c1) (t2tb129 u) (t2tb906 v)))
  (forall ((x (tuple21 a c)) (y (set (tuple21 b d))))
  (=> (mem (tuple2 (tuple2 a1 c1) (set1 (tuple2 b1 d1)))
  (Tuple2 (tuple2 a1 c1) (set1 (tuple2 b1 d1)) (t2tb133 x) (t2tb687 y))
  (t2tb4489 r)) (and (mem10 x u) (mem33 y v)))))))

(declare-fun t2tb685 ((set (set (tuple21 (tuple21 a c) (tuple21 b d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a c) (tuple21 b d)))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))) (t2tb685 x))))

(declare-fun tb2t685 (uni) (set (set (tuple21 (tuple21 a c) (tuple21 b d)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a c) (tuple21 b d))))))
  (! (= (tb2t685 (t2tb685 i)) i) :pattern ((t2tb685 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1)))) j)
     (= (t2tb685 (tb2t685 j)) j)) :pattern ((t2tb685 (tb2t685 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a c))) (v (set (tuple21 b d)))
  (r (set (tuple21 (tuple21 a c) (tuple21 b d)))))
  (= (mem (set1 (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))) (t2tb686 r)
  (relation (tuple2 b1 d1) (tuple2 a1 c1) (t2tb129 u) (t2tb687 v)))
  (forall ((x (tuple21 a c)) (y (tuple21 b d)))
  (=> (mem (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))
  (Tuple2 (tuple2 a1 c1) (tuple2 b1 d1) (t2tb133 x) (t2tb692 y)) (t2tb686 r))
  (and (mem10 x u) (mem23 y v)))))))

(declare-fun t2tb4787 ((set (set (tuple21 (tuple21 a c) d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a c) d))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 c1) d1))) (t2tb4787 x))))

(declare-fun tb2t4787 (uni) (set (set (tuple21 (tuple21 a c) d))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a c) d)))))
  (! (= (tb2t4787 (t2tb4787 i)) i) :pattern ((t2tb4787 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 c1) d1))) j)
     (= (t2tb4787 (tb2t4787 j)) j)) :pattern ((t2tb4787 (tb2t4787 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a c))) (v (set d)) (r (set (tuple21 (tuple21 a c)
  d))))
  (= (mem (set1 (tuple2 (tuple2 a1 c1) d1)) (t2tb847 r)
  (relation d1 (tuple2 a1 c1) (t2tb129 u) (t2tb690 v)))
  (forall ((x (tuple21 a c)) (y d))
  (=> (mem (tuple2 (tuple2 a1 c1) d1)
  (Tuple2 (tuple2 a1 c1) d1 (t2tb133 x) (t2tb694 y)) (t2tb847 r))
  (and (mem10 x u) (mem20 y v)))))))

(declare-fun t2tb4789 ((set (set (tuple21 (tuple21 a c) (set (tuple21 a
  c)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a c) (set (tuple21 a c))))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 c1) (set1 (tuple2 a1 c1))))) (t2tb4789 x))))

(declare-fun tb2t4789 (uni) (set (set (tuple21 (tuple21 a c) (set (tuple21 a
  c))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a c) (set (tuple21 a c)))))))
  (! (= (tb2t4789 (t2tb4789 i)) i) :pattern ((t2tb4789 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 c1) (set1 (tuple2 a1 c1))))) j)
     (= (t2tb4789 (tb2t4789 j)) j)) :pattern ((t2tb4789 (tb2t4789 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a c))) (v (set (set (tuple21 a c))))
  (r (set (tuple21 (tuple21 a c) (set (tuple21 a c))))))
  (= (mem (set1 (tuple2 (tuple2 a1 c1) (set1 (tuple2 a1 c1)))) (t2tb4493 r)
  (relation (set1 (tuple2 a1 c1)) (tuple2 a1 c1) (t2tb129 u) (t2tb128 v)))
  (forall ((x (tuple21 a c)) (y (set (tuple21 a c))))
  (=> (mem (tuple2 (tuple2 a1 c1) (set1 (tuple2 a1 c1)))
  (Tuple2 (tuple2 a1 c1) (set1 (tuple2 a1 c1)) (t2tb133 x) (t2tb129 y))
  (t2tb4493 r)) (and (mem10 x u) (mem11 y v)))))))

(declare-fun t2tb275 ((set (set (tuple21 (tuple21 a c) (tuple21 a c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a c) (tuple21 a c)))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 c1) (tuple2 a1 c1)))) (t2tb275 x))))

(declare-fun tb2t275 (uni) (set (set (tuple21 (tuple21 a c) (tuple21 a c)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a c) (tuple21 a c))))))
  (! (= (tb2t275 (t2tb275 i)) i) :pattern ((t2tb275 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 c1) (tuple2 a1 c1)))) j)
     (= (t2tb275 (tb2t275 j)) j)) :pattern ((t2tb275 (tb2t275 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a c))) (v (set (tuple21 a c)))
  (r (set (tuple21 (tuple21 a c) (tuple21 a c)))))
  (= (mem (set1 (tuple2 (tuple2 a1 c1) (tuple2 a1 c1))) (t2tb157 r)
  (relation (tuple2 a1 c1) (tuple2 a1 c1) (t2tb129 u) (t2tb129 v)))
  (forall ((x (tuple21 a c)) (y (tuple21 a c)))
  (=> (mem (tuple2 (tuple2 a1 c1) (tuple2 a1 c1))
  (Tuple2 (tuple2 a1 c1) (tuple2 a1 c1) (t2tb133 x) (t2tb133 y)) (t2tb157 r))
  (and (mem10 x u) (mem10 y v)))))))

(declare-fun t2tb278 ((set (set (tuple21 (tuple21 a c) c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a c) c))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 c1) c1))) (t2tb278 x))))

(declare-fun tb2t278 (uni) (set (set (tuple21 (tuple21 a c) c))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a c) c)))))
  (! (= (tb2t278 (t2tb278 i)) i) :pattern ((t2tb278 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 c1) c1))) j)
     (= (t2tb278 (tb2t278 j)) j)) :pattern ((t2tb278 (tb2t278 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a c))) (v (set c)) (r (set (tuple21 (tuple21 a c)
  c))))
  (= (mem (set1 (tuple2 (tuple2 a1 c1) c1)) (t2tb162 r)
  (relation c1 (tuple2 a1 c1) (t2tb129 u) (t2tb132 v)))
  (forall ((x (tuple21 a c)) (y c))
  (=> (mem (tuple2 (tuple2 a1 c1) c1)
  (Tuple2 (tuple2 a1 c1) c1 (t2tb133 x) (t2tb135 y)) (t2tb162 r))
  (and (mem10 x u) (mem7 y v)))))))

(declare-fun t2tb280 ((set (set (tuple21 (tuple21 a c) (tuple21 a b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a c) (tuple21 a b)))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 c1) (tuple2 a1 b1)))) (t2tb280 x))))

(declare-fun tb2t280 (uni) (set (set (tuple21 (tuple21 a c) (tuple21 a b)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a c) (tuple21 a b))))))
  (! (= (tb2t280 (t2tb280 i)) i) :pattern ((t2tb280 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 c1) (tuple2 a1 b1)))) j)
     (= (t2tb280 (tb2t280 j)) j)) :pattern ((t2tb280 (tb2t280 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a c))) (v (set (tuple21 a b)))
  (r (set (tuple21 (tuple21 a c) (tuple21 a b)))))
  (= (mem (set1 (tuple2 (tuple2 a1 c1) (tuple2 a1 b1))) (t2tb166 r)
  (relation (tuple2 a1 b1) (tuple2 a1 c1) (t2tb129 u) (t2tb11 v)))
  (forall ((x (tuple21 a c)) (y (tuple21 a b)))
  (=> (mem (tuple2 (tuple2 a1 c1) (tuple2 a1 b1))
  (Tuple2 (tuple2 a1 c1) (tuple2 a1 b1) (t2tb133 x) (t2tb13 y)) (t2tb166 r))
  (and (mem10 x u) (mem3 y v)))))))

(declare-fun t2tb281 ((set (set (tuple21 (tuple21 a c) b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a c) b))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 c1) b1))) (t2tb281 x))))

(declare-fun tb2t281 (uni) (set (set (tuple21 (tuple21 a c) b))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a c) b)))))
  (! (= (tb2t281 (t2tb281 i)) i) :pattern ((t2tb281 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 c1) b1))) j)
     (= (t2tb281 (tb2t281 j)) j)) :pattern ((t2tb281 (tb2t281 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a c))) (v (set b)) (r (set (tuple21 (tuple21 a c)
  b))))
  (= (mem (set1 (tuple2 (tuple2 a1 c1) b1)) (t2tb168 r)
  (relation b1 (tuple2 a1 c1) (t2tb129 u) (t2tb12 v)))
  (forall ((x (tuple21 a c)) (y b))
  (=> (mem (tuple2 (tuple2 a1 c1) b1)
  (Tuple2 (tuple2 a1 c1) b1 (t2tb133 x) (t2tb14 y)) (t2tb168 r))
  (and (mem10 x u) (mem2 y v)))))))

(declare-fun t2tb282 ((set (set (tuple21 (tuple21 a c) a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a c) a))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 c1) a1))) (t2tb282 x))))

(declare-fun tb2t282 (uni) (set (set (tuple21 (tuple21 a c) a))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a c) a)))))
  (! (= (tb2t282 (t2tb282 i)) i) :pattern ((t2tb282 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 c1) a1))) j)
     (= (t2tb282 (tb2t282 j)) j)) :pattern ((t2tb282 (tb2t282 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a c))) (v (set a)) (r (set (tuple21 (tuple21 a c)
  a))))
  (= (mem (set1 (tuple2 (tuple2 a1 c1) a1)) (t2tb170 r)
  (relation a1 (tuple2 a1 c1) (t2tb129 u) (t2tb1 v)))
  (forall ((x (tuple21 a c)) (y a))
  (=> (mem (tuple2 (tuple2 a1 c1) a1)
  (Tuple2 (tuple2 a1 c1) a1 (t2tb133 x) (t2tb2 y)) (t2tb170 r))
  (and (mem10 x u) (mem1 y v)))))))

;; mem_relation
  (assert
  (forall ((b2 ty))
  (forall ((u (set (tuple21 a c))) (v uni) (r uni))
  (and
  (=> (mem (set1 (tuple2 (tuple2 a1 c1) b2)) r
  (relation b2 (tuple2 a1 c1) (t2tb129 u) v))
  (forall ((x (tuple21 a c)) (y uni))
  (=> (mem (tuple2 (tuple2 a1 c1) b2)
  (Tuple2 (tuple2 a1 c1) b2 (t2tb133 x) y) r) (and (mem10 x u) (mem b2 y v)))))
  (=>
  (forall ((x (tuple21 a c)) (y uni))
  (=> (sort b2 y)
  (=> (mem (tuple2 (tuple2 a1 c1) b2)
  (Tuple2 (tuple2 a1 c1) b2 (t2tb133 x) y) r) (and (mem10 x u) (mem b2 y v)))))
  (mem (set1 (tuple2 (tuple2 a1 c1) b2)) r
  (relation b2 (tuple2 a1 c1) (t2tb129 u) v)))))))

(declare-fun t2tb5123 ((set (set (tuple21 c (tuple21 (tuple21 a b) (tuple21 c
  d)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 c (tuple21 (tuple21 a b) (tuple21 c d)))))))
  (sort (set1 (set1 (tuple2 c1 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)))))
  (t2tb5123 x))))

(declare-fun tb2t5123 (uni) (set (set (tuple21 c (tuple21 (tuple21 a b)
  (tuple21 c d))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 c (tuple21 (tuple21 a b) (tuple21 c d)))))))
  (! (= (tb2t5123 (t2tb5123 i)) i) :pattern ((t2tb5123 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 c1 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1))))) j)
     (= (t2tb5123 (tb2t5123 j)) j)) :pattern ((t2tb5123 (tb2t5123 j))) )))

;; mem_relation
  (assert
  (forall ((u (set c)) (v (set (tuple21 (tuple21 a b) (tuple21 c d))))
  (r (set (tuple21 c (tuple21 (tuple21 a b) (tuple21 c d))))))
  (= (mem (set1 (tuple2 c1 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1))))
  (t2tb5100 r)
  (relation (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) c1 (t2tb132 u)
  (t2tb879 v)))
  (forall ((x c) (y (tuple21 (tuple21 a b) (tuple21 c d))))
  (=> (mem (tuple2 c1 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)))
  (Tuple2 c1 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) (t2tb135 x) (t2tb880 y))
  (t2tb5100 r)) (and (mem7 x u) (mem50 y v)))))))

(declare-fun t2tb4795 ((set (set (tuple21 c (set (tuple21 b d)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 c (set (tuple21 b d))))))) (sort
  (set1 (set1 (tuple2 c1 (set1 (tuple2 b1 d1))))) (t2tb4795 x))))

(declare-fun tb2t4795 (uni) (set (set (tuple21 c (set (tuple21 b d))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 c (set (tuple21 b d)))))))
  (! (= (tb2t4795 (t2tb4795 i)) i) :pattern ((t2tb4795 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 c1 (set1 (tuple2 b1 d1))))) j)
     (= (t2tb4795 (tb2t4795 j)) j)) :pattern ((t2tb4795 (tb2t4795 j))) )))

;; mem_relation
  (assert
  (forall ((u (set c)) (v (set (set (tuple21 b d)))) (r (set (tuple21 c
  (set (tuple21 b d))))))
  (= (mem (set1 (tuple2 c1 (set1 (tuple2 b1 d1)))) (t2tb4505 r)
  (relation (set1 (tuple2 b1 d1)) c1 (t2tb132 u) (t2tb906 v)))
  (forall ((x c) (y (set (tuple21 b d))))
  (=> (mem (tuple2 c1 (set1 (tuple2 b1 d1)))
  (Tuple2 c1 (set1 (tuple2 b1 d1)) (t2tb135 x) (t2tb687 y)) (t2tb4505 r))
  (and (mem7 x u) (mem33 y v)))))))

(declare-fun t2tb4796 ((set (set (tuple21 c (tuple21 b d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 c (tuple21 b d)))))) (sort
  (set1 (set1 (tuple2 c1 (tuple2 b1 d1)))) (t2tb4796 x))))

(declare-fun tb2t4796 (uni) (set (set (tuple21 c (tuple21 b d)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 c (tuple21 b d))))))
  (! (= (tb2t4796 (t2tb4796 i)) i) :pattern ((t2tb4796 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 c1 (tuple2 b1 d1)))) j)
     (= (t2tb4796 (tb2t4796 j)) j)) :pattern ((t2tb4796 (tb2t4796 j))) )))

;; mem_relation
  (assert
  (forall ((u (set c)) (v (set (tuple21 b d))) (r (set (tuple21 c (tuple21 b
  d)))))
  (= (mem (set1 (tuple2 c1 (tuple2 b1 d1))) (t2tb4507 r)
  (relation (tuple2 b1 d1) c1 (t2tb132 u) (t2tb687 v)))
  (forall ((x c) (y (tuple21 b d)))
  (=> (mem (tuple2 c1 (tuple2 b1 d1))
  (Tuple2 c1 (tuple2 b1 d1) (t2tb135 x) (t2tb692 y)) (t2tb4507 r))
  (and (mem7 x u) (mem23 y v)))))))

(declare-fun t2tb688 ((set (set (tuple21 c d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 c d))))) (sort (set1 (set1 (tuple2 c1 d1)))
  (t2tb688 x))))

(declare-fun tb2t688 (uni) (set (set (tuple21 c d))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 c d)))))
  (! (= (tb2t688 (t2tb688 i)) i) :pattern ((t2tb688 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 c1 d1))) j) (= (t2tb688 (tb2t688 j)) j)) :pattern (
  (t2tb688 (tb2t688 j))) )))

;; mem_relation
  (assert
  (forall ((u (set c)) (v (set d)) (r (set (tuple21 c d))))
  (= (mem (set1 (tuple2 c1 d1)) (t2tb689 r)
  (relation d1 c1 (t2tb132 u) (t2tb690 v)))
  (forall ((x c) (y d))
  (=> (mem (tuple2 c1 d1) (Tuple2 c1 d1 (t2tb135 x) (t2tb694 y)) (t2tb689 r))
  (and (mem7 x u) (mem20 y v)))))))

(declare-fun t2tb4798 ((set (set (tuple21 c (set (tuple21 a c)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 c (set (tuple21 a c))))))) (sort
  (set1 (set1 (tuple2 c1 (set1 (tuple2 a1 c1))))) (t2tb4798 x))))

(declare-fun tb2t4798 (uni) (set (set (tuple21 c (set (tuple21 a c))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 c (set (tuple21 a c)))))))
  (! (= (tb2t4798 (t2tb4798 i)) i) :pattern ((t2tb4798 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 c1 (set1 (tuple2 a1 c1))))) j)
     (= (t2tb4798 (tb2t4798 j)) j)) :pattern ((t2tb4798 (tb2t4798 j))) )))

;; mem_relation
  (assert
  (forall ((u (set c)) (v (set (set (tuple21 a c)))) (r (set (tuple21 c
  (set (tuple21 a c))))))
  (= (mem (set1 (tuple2 c1 (set1 (tuple2 a1 c1)))) (t2tb4510 r)
  (relation (set1 (tuple2 a1 c1)) c1 (t2tb132 u) (t2tb128 v)))
  (forall ((x c) (y (set (tuple21 a c))))
  (=> (mem (tuple2 c1 (set1 (tuple2 a1 c1)))
  (Tuple2 c1 (set1 (tuple2 a1 c1)) (t2tb135 x) (t2tb129 y)) (t2tb4510 r))
  (and (mem7 x u) (mem11 y v)))))))

(declare-fun t2tb302 ((set (set (tuple21 c (tuple21 a c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 c (tuple21 a c)))))) (sort
  (set1 (set1 (tuple2 c1 (tuple2 a1 c1)))) (t2tb302 x))))

(declare-fun tb2t302 (uni) (set (set (tuple21 c (tuple21 a c)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 c (tuple21 a c))))))
  (! (= (tb2t302 (t2tb302 i)) i) :pattern ((t2tb302 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 c1 (tuple2 a1 c1)))) j)
     (= (t2tb302 (tb2t302 j)) j)) :pattern ((t2tb302 (tb2t302 j))) )))

;; mem_relation
  (assert
  (forall ((u (set c)) (v (set (tuple21 a c))) (r (set (tuple21 c (tuple21 a
  c)))))
  (= (mem (set1 (tuple2 c1 (tuple2 a1 c1))) (t2tb210 r)
  (relation (tuple2 a1 c1) c1 (t2tb132 u) (t2tb129 v)))
  (forall ((x c) (y (tuple21 a c)))
  (=> (mem (tuple2 c1 (tuple2 a1 c1))
  (Tuple2 c1 (tuple2 a1 c1) (t2tb135 x) (t2tb133 y)) (t2tb210 r))
  (and (mem7 x u) (mem10 y v)))))))

(declare-fun t2tb305 ((set (set (tuple21 c c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 c c))))) (sort (set1 (set1 (tuple2 c1 c1)))
  (t2tb305 x))))

(declare-fun tb2t305 (uni) (set (set (tuple21 c c))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 c c)))))
  (! (= (tb2t305 (t2tb305 i)) i) :pattern ((t2tb305 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 c1 c1))) j) (= (t2tb305 (tb2t305 j)) j)) :pattern (
  (t2tb305 (tb2t305 j))) )))

;; mem_relation
  (assert
  (forall ((u (set c)) (v (set c)) (r (set (tuple21 c c))))
  (= (mem (set1 (tuple2 c1 c1)) (t2tb216 r)
  (relation c1 c1 (t2tb132 u) (t2tb132 v)))
  (forall ((x c) (y c))
  (=> (mem (tuple2 c1 c1) (Tuple2 c1 c1 (t2tb135 x) (t2tb135 y)) (t2tb216 r))
  (and (mem7 x u) (mem7 y v)))))))

(declare-fun t2tb307 ((set (set (tuple21 c (tuple21 a b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 c (tuple21 a b)))))) (sort
  (set1 (set1 (tuple2 c1 (tuple2 a1 b1)))) (t2tb307 x))))

(declare-fun tb2t307 (uni) (set (set (tuple21 c (tuple21 a b)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 c (tuple21 a b))))))
  (! (= (tb2t307 (t2tb307 i)) i) :pattern ((t2tb307 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 c1 (tuple2 a1 b1)))) j)
     (= (t2tb307 (tb2t307 j)) j)) :pattern ((t2tb307 (tb2t307 j))) )))

;; mem_relation
  (assert
  (forall ((u (set c)) (v (set (tuple21 a b))) (r (set (tuple21 c (tuple21 a
  b)))))
  (= (mem (set1 (tuple2 c1 (tuple2 a1 b1))) (t2tb220 r)
  (relation (tuple2 a1 b1) c1 (t2tb132 u) (t2tb11 v)))
  (forall ((x c) (y (tuple21 a b)))
  (=> (mem (tuple2 c1 (tuple2 a1 b1))
  (Tuple2 c1 (tuple2 a1 b1) (t2tb135 x) (t2tb13 y)) (t2tb220 r))
  (and (mem7 x u) (mem3 y v)))))))

(declare-fun t2tb308 ((set (set (tuple21 c b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 c b))))) (sort (set1 (set1 (tuple2 c1 b1)))
  (t2tb308 x))))

(declare-fun tb2t308 (uni) (set (set (tuple21 c b))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 c b)))))
  (! (= (tb2t308 (t2tb308 i)) i) :pattern ((t2tb308 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 c1 b1))) j) (= (t2tb308 (tb2t308 j)) j)) :pattern (
  (t2tb308 (tb2t308 j))) )))

;; mem_relation
  (assert
  (forall ((u (set c)) (v (set b)) (r (set (tuple21 c b))))
  (= (mem (set1 (tuple2 c1 b1)) (t2tb222 r)
  (relation b1 c1 (t2tb132 u) (t2tb12 v)))
  (forall ((x c) (y b))
  (=> (mem (tuple2 c1 b1) (Tuple2 c1 b1 (t2tb135 x) (t2tb14 y)) (t2tb222 r))
  (and (mem7 x u) (mem2 y v)))))))

(declare-fun t2tb309 ((set (set (tuple21 c a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 c a))))) (sort (set1 (set1 (tuple2 c1 a1)))
  (t2tb309 x))))

(declare-fun tb2t309 (uni) (set (set (tuple21 c a))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 c a)))))
  (! (= (tb2t309 (t2tb309 i)) i) :pattern ((t2tb309 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 c1 a1))) j) (= (t2tb309 (tb2t309 j)) j)) :pattern (
  (t2tb309 (tb2t309 j))) )))

;; mem_relation
  (assert
  (forall ((u (set c)) (v (set a)) (r (set (tuple21 c a))))
  (= (mem (set1 (tuple2 c1 a1)) (t2tb224 r)
  (relation a1 c1 (t2tb132 u) (t2tb1 v)))
  (forall ((x c) (y a))
  (=> (mem (tuple2 c1 a1) (Tuple2 c1 a1 (t2tb135 x) (t2tb2 y)) (t2tb224 r))
  (and (mem7 x u) (mem1 y v)))))))

;; mem_relation
  (assert
  (forall ((b2 ty))
  (forall ((u (set c)) (v uni) (r uni))
  (and
  (=> (mem (set1 (tuple2 c1 b2)) r (relation b2 c1 (t2tb132 u) v))
  (forall ((x c) (y uni))
  (=> (mem (tuple2 c1 b2) (Tuple2 c1 b2 (t2tb135 x) y) r)
  (and (mem7 x u) (mem b2 y v)))))
  (=>
  (forall ((x c) (y uni))
  (=> (sort b2 y)
  (=> (mem (tuple2 c1 b2) (Tuple2 c1 b2 (t2tb135 x) y) r)
  (and (mem7 x u) (mem b2 y v))))) (mem (set1 (tuple2 c1 b2)) r
  (relation b2 c1 (t2tb132 u) v)))))))

(declare-fun t2tb5124 ((set (set (tuple21 (tuple21 a b) (tuple21 (tuple21 a
  b) (tuple21 c d)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a b) (tuple21 (tuple21 a b)
  (tuple21 c d))))))) (sort
  (set1
  (set1 (tuple2 (tuple2 a1 b1) (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)))))
  (t2tb5124 x))))

(declare-fun tb2t5124 (uni) (set (set (tuple21 (tuple21 a b)
  (tuple21 (tuple21 a b) (tuple21 c d))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a b) (tuple21 (tuple21 a b)
  (tuple21 c d)))))))
  (! (= (tb2t5124 (t2tb5124 i)) i) :pattern ((t2tb5124 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (set1 (tuple2 (tuple2 a1 b1) (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)))))
     j) (= (t2tb5124 (tb2t5124 j)) j)) :pattern ((t2tb5124 (tb2t5124 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a b))) (v (set (tuple21 (tuple21 a b) (tuple21 c
  d)))) (r (set (tuple21 (tuple21 a b) (tuple21 (tuple21 a b) (tuple21 c
  d))))))
  (= (mem
  (set1 (tuple2 (tuple2 a1 b1) (tuple2 (tuple2 a1 b1) (tuple2 c1 d1))))
  (t2tb5102 r)
  (relation (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) (tuple2 a1 b1) (t2tb11 u)
  (t2tb879 v)))
  (forall ((x (tuple21 a b)) (y (tuple21 (tuple21 a b) (tuple21 c d))))
  (=> (mem (tuple2 (tuple2 a1 b1) (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)))
  (Tuple2 (tuple2 a1 b1) (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) (t2tb13 x)
  (t2tb880 y)) (t2tb5102 r)) (and (mem3 x u) (mem50 y v)))))))

(declare-fun t2tb4813 ((set (set (tuple21 (tuple21 a b) (set (tuple21 b
  d)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a b) (set (tuple21 b d))))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 b1) (set1 (tuple2 b1 d1))))) (t2tb4813 x))))

(declare-fun tb2t4813 (uni) (set (set (tuple21 (tuple21 a b) (set (tuple21 b
  d))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a b) (set (tuple21 b d)))))))
  (! (= (tb2t4813 (t2tb4813 i)) i) :pattern ((t2tb4813 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 b1) (set1 (tuple2 b1 d1))))) j)
     (= (t2tb4813 (tb2t4813 j)) j)) :pattern ((t2tb4813 (tb2t4813 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a b))) (v (set (set (tuple21 b d))))
  (r (set (tuple21 (tuple21 a b) (set (tuple21 b d))))))
  (= (mem (set1 (tuple2 (tuple2 a1 b1) (set1 (tuple2 b1 d1)))) (t2tb4540 r)
  (relation (set1 (tuple2 b1 d1)) (tuple2 a1 b1) (t2tb11 u) (t2tb906 v)))
  (forall ((x (tuple21 a b)) (y (set (tuple21 b d))))
  (=> (mem (tuple2 (tuple2 a1 b1) (set1 (tuple2 b1 d1)))
  (Tuple2 (tuple2 a1 b1) (set1 (tuple2 b1 d1)) (t2tb13 x) (t2tb687 y))
  (t2tb4540 r)) (and (mem3 x u) (mem33 y v)))))))

(declare-fun t2tb4814 ((set (set (tuple21 (tuple21 a b) (tuple21 b
  d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a b) (tuple21 b d)))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 b1) (tuple2 b1 d1)))) (t2tb4814 x))))

(declare-fun tb2t4814 (uni) (set (set (tuple21 (tuple21 a b) (tuple21 b
  d)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a b) (tuple21 b d))))))
  (! (= (tb2t4814 (t2tb4814 i)) i) :pattern ((t2tb4814 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 b1) (tuple2 b1 d1)))) j)
     (= (t2tb4814 (tb2t4814 j)) j)) :pattern ((t2tb4814 (tb2t4814 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a b))) (v (set (tuple21 b d)))
  (r (set (tuple21 (tuple21 a b) (tuple21 b d)))))
  (= (mem (set1 (tuple2 (tuple2 a1 b1) (tuple2 b1 d1))) (t2tb4542 r)
  (relation (tuple2 b1 d1) (tuple2 a1 b1) (t2tb11 u) (t2tb687 v)))
  (forall ((x (tuple21 a b)) (y (tuple21 b d)))
  (=> (mem (tuple2 (tuple2 a1 b1) (tuple2 b1 d1))
  (Tuple2 (tuple2 a1 b1) (tuple2 b1 d1) (t2tb13 x) (t2tb692 y)) (t2tb4542 r))
  (and (mem3 x u) (mem23 y v)))))))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a b))) (v (set (tuple21 c d)))
  (r (set (tuple21 (tuple21 a b) (tuple21 c d)))))
  (= (mem (set1 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1))) (t2tb879 r)
  (relation (tuple2 c1 d1) (tuple2 a1 b1) (t2tb11 u) (t2tb689 v)))
  (forall ((x (tuple21 a b)) (y (tuple21 c d)))
  (=> (mem50
  (tb2t880 (Tuple2 (tuple2 a1 b1) (tuple2 c1 d1) (t2tb13 x) (t2tb693 y))) r)
  (and (mem3 x u) (mem (tuple2 c1 d1) (t2tb693 y) (t2tb689 v))))))))

(declare-fun t2tb1002 ((set (set (tuple21 (tuple21 a b) d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a b) d))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 b1) d1))) (t2tb1002 x))))

(declare-fun tb2t1002 (uni) (set (set (tuple21 (tuple21 a b) d))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a b) d)))))
  (! (= (tb2t1002 (t2tb1002 i)) i) :pattern ((t2tb1002 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 b1) d1))) j)
     (= (t2tb1002 (tb2t1002 j)) j)) :pattern ((t2tb1002 (tb2t1002 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a b))) (v (set d)) (r (set (tuple21 (tuple21 a b)
  d))))
  (= (mem (set1 (tuple2 (tuple2 a1 b1) d1)) (t2tb881 r)
  (relation d1 (tuple2 a1 b1) (t2tb11 u) (t2tb690 v)))
  (forall ((x (tuple21 a b)) (y d))
  (=> (mem (tuple2 (tuple2 a1 b1) d1)
  (Tuple2 (tuple2 a1 b1) d1 (t2tb13 x) (t2tb694 y)) (t2tb881 r))
  (and (mem3 x u) (mem20 y v)))))))

(declare-fun t2tb4816 ((set (set (tuple21 (tuple21 a b) (set (tuple21 a
  c)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a b) (set (tuple21 a c))))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 c1))))) (t2tb4816 x))))

(declare-fun tb2t4816 (uni) (set (set (tuple21 (tuple21 a b) (set (tuple21 a
  c))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a b) (set (tuple21 a c)))))))
  (! (= (tb2t4816 (t2tb4816 i)) i) :pattern ((t2tb4816 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 c1))))) j)
     (= (t2tb4816 (tb2t4816 j)) j)) :pattern ((t2tb4816 (tb2t4816 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a b))) (v (set (set (tuple21 a c))))
  (r (set (tuple21 (tuple21 a b) (set (tuple21 a c))))))
  (= (mem (set1 (tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 c1)))) (t2tb4546 r)
  (relation (set1 (tuple2 a1 c1)) (tuple2 a1 b1) (t2tb11 u) (t2tb128 v)))
  (forall ((x (tuple21 a b)) (y (set (tuple21 a c))))
  (=> (mem (tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 c1)))
  (Tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 c1)) (t2tb13 x) (t2tb129 y))
  (t2tb4546 r)) (and (mem3 x u) (mem11 y v)))))))

(declare-fun t2tb316 ((set (set (tuple21 (tuple21 a b) (tuple21 a c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a b) (tuple21 a c)))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)))) (t2tb316 x))))

(declare-fun tb2t316 (uni) (set (set (tuple21 (tuple21 a b) (tuple21 a c)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a b) (tuple21 a c))))))
  (! (= (tb2t316 (t2tb316 i)) i) :pattern ((t2tb316 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1)))) j)
     (= (t2tb316 (tb2t316 j)) j)) :pattern ((t2tb316 (tb2t316 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a b))) (v (set (tuple21 a c)))
  (r (set (tuple21 (tuple21 a b) (tuple21 a c)))))
  (= (mem (set1 (tuple2 (tuple2 a1 b1) (tuple2 a1 c1))) (t2tb238 r)
  (relation (tuple2 a1 c1) (tuple2 a1 b1) (t2tb11 u) (t2tb129 v)))
  (forall ((x (tuple21 a b)) (y (tuple21 a c)))
  (=> (mem (tuple2 (tuple2 a1 b1) (tuple2 a1 c1))
  (Tuple2 (tuple2 a1 b1) (tuple2 a1 c1) (t2tb13 x) (t2tb133 y)) (t2tb238 r))
  (and (mem3 x u) (mem10 y v)))))))

(declare-fun t2tb319 ((set (set (tuple21 (tuple21 a b) c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a b) c))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 b1) c1))) (t2tb319 x))))

(declare-fun tb2t319 (uni) (set (set (tuple21 (tuple21 a b) c))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a b) c)))))
  (! (= (tb2t319 (t2tb319 i)) i) :pattern ((t2tb319 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 b1) c1))) j)
     (= (t2tb319 (tb2t319 j)) j)) :pattern ((t2tb319 (tb2t319 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a b))) (v (set c)) (r (set (tuple21 (tuple21 a b)
  c))))
  (= (mem (set1 (tuple2 (tuple2 a1 b1) c1)) (t2tb245 r)
  (relation c1 (tuple2 a1 b1) (t2tb11 u) (t2tb132 v)))
  (forall ((x (tuple21 a b)) (y c))
  (=> (mem (tuple2 (tuple2 a1 b1) c1)
  (Tuple2 (tuple2 a1 b1) c1 (t2tb13 x) (t2tb135 y)) (t2tb245 r))
  (and (mem3 x u) (mem7 y v)))))))

(declare-fun t2tb50 ((set (set (tuple21 (tuple21 a b) (tuple21 a b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a b) (tuple21 a b)))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 b1) (tuple2 a1 b1)))) (t2tb50 x))))

(declare-fun tb2t50 (uni) (set (set (tuple21 (tuple21 a b) (tuple21 a b)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a b) (tuple21 a b))))))
  (! (= (tb2t50 (t2tb50 i)) i) :pattern ((t2tb50 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 b1) (tuple2 a1 b1)))) j)
     (= (t2tb50 (tb2t50 j)) j)) :pattern ((t2tb50 (tb2t50 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a b))) (v (set (tuple21 a b)))
  (r (set (tuple21 (tuple21 a b) (tuple21 a b)))))
  (= (mem (set1 (tuple2 (tuple2 a1 b1) (tuple2 a1 b1))) (t2tb25 r)
  (relation (tuple2 a1 b1) (tuple2 a1 b1) (t2tb11 u) (t2tb11 v)))
  (forall ((x (tuple21 a b)) (y (tuple21 a b)))
  (=> (mem (tuple2 (tuple2 a1 b1) (tuple2 a1 b1))
  (Tuple2 (tuple2 a1 b1) (tuple2 a1 b1) (t2tb13 x) (t2tb13 y)) (t2tb25 r))
  (and (mem3 x u) (mem3 y v)))))))

(declare-fun t2tb51 ((set (set (tuple21 (tuple21 a b) b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a b) b))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 b1) b1))) (t2tb51 x))))

(declare-fun tb2t51 (uni) (set (set (tuple21 (tuple21 a b) b))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a b) b)))))
  (! (= (tb2t51 (t2tb51 i)) i) :pattern ((t2tb51 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 b1) b1))) j)
     (= (t2tb51 (tb2t51 j)) j)) :pattern ((t2tb51 (tb2t51 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a b))) (v (set b)) (r (set (tuple21 (tuple21 a b)
  b))))
  (= (mem (set1 (tuple2 (tuple2 a1 b1) b1)) (t2tb27 r)
  (relation b1 (tuple2 a1 b1) (t2tb11 u) (t2tb12 v)))
  (forall ((x (tuple21 a b)) (y b))
  (=> (mem (tuple2 (tuple2 a1 b1) b1)
  (Tuple2 (tuple2 a1 b1) b1 (t2tb13 x) (t2tb14 y)) (t2tb27 r))
  (and (mem3 x u) (mem2 y v)))))))

(declare-fun t2tb52 ((set (set (tuple21 (tuple21 a b) a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 (tuple21 a b) a))))) (sort
  (set1 (set1 (tuple2 (tuple2 a1 b1) a1))) (t2tb52 x))))

(declare-fun tb2t52 (uni) (set (set (tuple21 (tuple21 a b) a))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 (tuple21 a b) a)))))
  (! (= (tb2t52 (t2tb52 i)) i) :pattern ((t2tb52 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 (tuple2 a1 b1) a1))) j)
     (= (t2tb52 (tb2t52 j)) j)) :pattern ((t2tb52 (tb2t52 j))) )))

;; mem_relation
  (assert
  (forall ((u (set (tuple21 a b))) (v (set a)) (r (set (tuple21 (tuple21 a b)
  a))))
  (= (mem (set1 (tuple2 (tuple2 a1 b1) a1)) (t2tb29 r)
  (relation a1 (tuple2 a1 b1) (t2tb11 u) (t2tb1 v)))
  (forall ((x (tuple21 a b)) (y a))
  (=> (mem (tuple2 (tuple2 a1 b1) a1)
  (Tuple2 (tuple2 a1 b1) a1 (t2tb13 x) (t2tb2 y)) (t2tb29 r))
  (and (mem3 x u) (mem1 y v)))))))

;; mem_relation
  (assert
  (forall ((b2 ty))
  (forall ((u (set (tuple21 a b))) (v uni) (r uni))
  (and
  (=> (mem (set1 (tuple2 (tuple2 a1 b1) b2)) r
  (relation b2 (tuple2 a1 b1) (t2tb11 u) v))
  (forall ((x (tuple21 a b)) (y uni))
  (=> (mem (tuple2 (tuple2 a1 b1) b2) (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) y)
  r) (and (mem3 x u) (mem b2 y v)))))
  (=>
  (forall ((x (tuple21 a b)) (y uni))
  (=> (sort b2 y)
  (=> (mem (tuple2 (tuple2 a1 b1) b2) (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) y)
  r) (and (mem3 x u) (mem b2 y v))))) (mem (set1 (tuple2 (tuple2 a1 b1) b2))
  r (relation b2 (tuple2 a1 b1) (t2tb11 u) v)))))))

(declare-fun t2tb5125 ((set (set (tuple21 b (tuple21 (tuple21 a b) (tuple21 c
  d)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 b (tuple21 (tuple21 a b) (tuple21 c d)))))))
  (sort (set1 (set1 (tuple2 b1 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)))))
  (t2tb5125 x))))

(declare-fun tb2t5125 (uni) (set (set (tuple21 b (tuple21 (tuple21 a b)
  (tuple21 c d))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 b (tuple21 (tuple21 a b) (tuple21 c d)))))))
  (! (= (tb2t5125 (t2tb5125 i)) i) :pattern ((t2tb5125 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 b1 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1))))) j)
     (= (t2tb5125 (tb2t5125 j)) j)) :pattern ((t2tb5125 (tb2t5125 j))) )))

;; mem_relation
  (assert
  (forall ((u (set b)) (v (set (tuple21 (tuple21 a b) (tuple21 c d))))
  (r (set (tuple21 b (tuple21 (tuple21 a b) (tuple21 c d))))))
  (= (mem (set1 (tuple2 b1 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1))))
  (t2tb5104 r)
  (relation (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) b1 (t2tb12 u) (t2tb879 v)))
  (forall ((x b) (y (tuple21 (tuple21 a b) (tuple21 c d))))
  (=> (mem (tuple2 b1 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)))
  (Tuple2 b1 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) (t2tb14 x) (t2tb880 y))
  (t2tb5104 r)) (and (mem2 x u) (mem50 y v)))))))

(declare-fun t2tb4822 ((set (set (tuple21 b (set (tuple21 b d)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 b (set (tuple21 b d))))))) (sort
  (set1 (set1 (tuple2 b1 (set1 (tuple2 b1 d1))))) (t2tb4822 x))))

(declare-fun tb2t4822 (uni) (set (set (tuple21 b (set (tuple21 b d))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 b (set (tuple21 b d)))))))
  (! (= (tb2t4822 (t2tb4822 i)) i) :pattern ((t2tb4822 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 b1 (set1 (tuple2 b1 d1))))) j)
     (= (t2tb4822 (tb2t4822 j)) j)) :pattern ((t2tb4822 (tb2t4822 j))) )))

;; mem_relation
  (assert
  (forall ((u (set b)) (v (set (set (tuple21 b d)))) (r (set (tuple21 b
  (set (tuple21 b d))))))
  (= (mem (set1 (tuple2 b1 (set1 (tuple2 b1 d1)))) (t2tb4558 r)
  (relation (set1 (tuple2 b1 d1)) b1 (t2tb12 u) (t2tb906 v)))
  (forall ((x b) (y (set (tuple21 b d))))
  (=> (mem (tuple2 b1 (set1 (tuple2 b1 d1)))
  (Tuple2 b1 (set1 (tuple2 b1 d1)) (t2tb14 x) (t2tb687 y)) (t2tb4558 r))
  (and (mem2 x u) (mem33 y v)))))))

(declare-fun t2tb4823 ((set (set (tuple21 b (tuple21 b d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 b (tuple21 b d)))))) (sort
  (set1 (set1 (tuple2 b1 (tuple2 b1 d1)))) (t2tb4823 x))))

(declare-fun tb2t4823 (uni) (set (set (tuple21 b (tuple21 b d)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 b (tuple21 b d))))))
  (! (= (tb2t4823 (t2tb4823 i)) i) :pattern ((t2tb4823 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 b1 (tuple2 b1 d1)))) j)
     (= (t2tb4823 (tb2t4823 j)) j)) :pattern ((t2tb4823 (tb2t4823 j))) )))

;; mem_relation
  (assert
  (forall ((u (set b)) (v (set (tuple21 b d))) (r (set (tuple21 b (tuple21 b
  d)))))
  (= (mem (set1 (tuple2 b1 (tuple2 b1 d1))) (t2tb4560 r)
  (relation (tuple2 b1 d1) b1 (t2tb12 u) (t2tb687 v)))
  (forall ((x b) (y (tuple21 b d)))
  (=> (mem (tuple2 b1 (tuple2 b1 d1))
  (Tuple2 b1 (tuple2 b1 d1) (t2tb14 x) (t2tb692 y)) (t2tb4560 r))
  (and (mem2 x u) (mem23 y v)))))))

;; mem_relation
  (assert
  (forall ((u (set b)) (v (set d)) (r (set (tuple21 b d))))
  (= (mem33 r (relation9 u v))
  (forall ((x b) (y d))
  (=> (mem23 (tb2t692 (Tuple2 b1 d1 (t2tb14 x) (t2tb694 y))) r)
  (and (mem2 x u) (mem20 y v)))))))

(declare-fun t2tb4825 ((set (set (tuple21 b (set (tuple21 a c)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 b (set (tuple21 a c))))))) (sort
  (set1 (set1 (tuple2 b1 (set1 (tuple2 a1 c1))))) (t2tb4825 x))))

(declare-fun tb2t4825 (uni) (set (set (tuple21 b (set (tuple21 a c))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 b (set (tuple21 a c)))))))
  (! (= (tb2t4825 (t2tb4825 i)) i) :pattern ((t2tb4825 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 b1 (set1 (tuple2 a1 c1))))) j)
     (= (t2tb4825 (tb2t4825 j)) j)) :pattern ((t2tb4825 (tb2t4825 j))) )))

;; mem_relation
  (assert
  (forall ((u (set b)) (v (set (set (tuple21 a c)))) (r (set (tuple21 b
  (set (tuple21 a c))))))
  (= (mem (set1 (tuple2 b1 (set1 (tuple2 a1 c1)))) (t2tb4564 r)
  (relation (set1 (tuple2 a1 c1)) b1 (t2tb12 u) (t2tb128 v)))
  (forall ((x b) (y (set (tuple21 a c))))
  (=> (mem (tuple2 b1 (set1 (tuple2 a1 c1)))
  (Tuple2 b1 (set1 (tuple2 a1 c1)) (t2tb14 x) (t2tb129 y)) (t2tb4564 r))
  (and (mem2 x u) (mem11 y v)))))))

(declare-fun t2tb321 ((set (set (tuple21 b (tuple21 a c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 b (tuple21 a c)))))) (sort
  (set1 (set1 (tuple2 b1 (tuple2 a1 c1)))) (t2tb321 x))))

(declare-fun tb2t321 (uni) (set (set (tuple21 b (tuple21 a c)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 b (tuple21 a c))))))
  (! (= (tb2t321 (t2tb321 i)) i) :pattern ((t2tb321 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 b1 (tuple2 a1 c1)))) j)
     (= (t2tb321 (tb2t321 j)) j)) :pattern ((t2tb321 (tb2t321 j))) )))

;; mem_relation
  (assert
  (forall ((u (set b)) (v (set (tuple21 a c))) (r (set (tuple21 b (tuple21 a
  c)))))
  (= (mem (set1 (tuple2 b1 (tuple2 a1 c1))) (t2tb248 r)
  (relation (tuple2 a1 c1) b1 (t2tb12 u) (t2tb129 v)))
  (forall ((x b) (y (tuple21 a c)))
  (=> (mem (tuple2 b1 (tuple2 a1 c1))
  (Tuple2 b1 (tuple2 a1 c1) (t2tb14 x) (t2tb133 y)) (t2tb248 r))
  (and (mem2 x u) (mem10 y v)))))))

(declare-fun t2tb130 ((set (set (tuple21 b c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 b c))))) (sort (set1 (set1 (tuple2 b1 c1)))
  (t2tb130 x))))

(declare-fun tb2t130 (uni) (set (set (tuple21 b c))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 b c)))))
  (! (= (tb2t130 (t2tb130 i)) i) :pattern ((t2tb130 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 b1 c1))) j) (= (t2tb130 (tb2t130 j)) j)) :pattern (
  (t2tb130 (tb2t130 j))) )))

;; mem_relation
  (assert
  (forall ((u (set b)) (v (set c)) (r (set (tuple21 b c))))
  (= (mem (set1 (tuple2 b1 c1)) (t2tb131 r)
  (relation c1 b1 (t2tb12 u) (t2tb132 v)))
  (forall ((x b) (y c))
  (=> (mem (tuple2 b1 c1) (Tuple2 b1 c1 (t2tb14 x) (t2tb135 y)) (t2tb131 r))
  (and (mem2 x u) (mem7 y v)))))))

(declare-fun t2tb54 ((set (set (tuple21 b (tuple21 a b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 b (tuple21 a b)))))) (sort
  (set1 (set1 (tuple2 b1 (tuple2 a1 b1)))) (t2tb54 x))))

(declare-fun tb2t54 (uni) (set (set (tuple21 b (tuple21 a b)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 b (tuple21 a b))))))
  (! (= (tb2t54 (t2tb54 i)) i) :pattern ((t2tb54 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 b1 (tuple2 a1 b1)))) j)
     (= (t2tb54 (tb2t54 j)) j)) :pattern ((t2tb54 (tb2t54 j))) )))

;; mem_relation
  (assert
  (forall ((u (set b)) (v (set (tuple21 a b))) (r (set (tuple21 b (tuple21 a
  b)))))
  (= (mem (set1 (tuple2 b1 (tuple2 a1 b1))) (t2tb34 r)
  (relation (tuple2 a1 b1) b1 (t2tb12 u) (t2tb11 v)))
  (forall ((x b) (y (tuple21 a b)))
  (=> (mem (tuple2 b1 (tuple2 a1 b1))
  (Tuple2 b1 (tuple2 a1 b1) (t2tb14 x) (t2tb13 y)) (t2tb34 r))
  (and (mem2 x u) (mem3 y v)))))))

(declare-fun t2tb55 ((set (set (tuple21 b b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 b b))))) (sort (set1 (set1 (tuple2 b1 b1)))
  (t2tb55 x))))

(declare-fun tb2t55 (uni) (set (set (tuple21 b b))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 b b)))))
  (! (= (tb2t55 (t2tb55 i)) i) :pattern ((t2tb55 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 b1 b1))) j) (= (t2tb55 (tb2t55 j)) j)) :pattern (
  (t2tb55 (tb2t55 j))) )))

;; mem_relation
  (assert
  (forall ((u (set b)) (v (set b)) (r (set (tuple21 b b))))
  (= (mem (set1 (tuple2 b1 b1)) (t2tb35 r)
  (relation b1 b1 (t2tb12 u) (t2tb12 v)))
  (forall ((x b) (y b))
  (=> (mem (tuple2 b1 b1) (Tuple2 b1 b1 (t2tb14 x) (t2tb14 y)) (t2tb35 r))
  (and (mem2 x u) (mem2 y v)))))))

(declare-fun t2tb56 ((set (set (tuple21 b a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 b a))))) (sort (set1 (set1 (tuple2 b1 a1)))
  (t2tb56 x))))

(declare-fun tb2t56 (uni) (set (set (tuple21 b a))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 b a)))))
  (! (= (tb2t56 (t2tb56 i)) i) :pattern ((t2tb56 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 b1 a1))) j) (= (t2tb56 (tb2t56 j)) j)) :pattern (
  (t2tb56 (tb2t56 j))) )))

;; mem_relation
  (assert
  (forall ((u (set b)) (v (set a)) (r (set (tuple21 b a))))
  (= (mem (set1 (tuple2 b1 a1)) (t2tb37 r)
  (relation a1 b1 (t2tb12 u) (t2tb1 v)))
  (forall ((x b) (y a))
  (=> (mem (tuple2 b1 a1) (Tuple2 b1 a1 (t2tb14 x) (t2tb2 y)) (t2tb37 r))
  (and (mem2 x u) (mem1 y v)))))))

;; mem_relation
  (assert
  (forall ((b2 ty))
  (forall ((u (set b)) (v uni) (r uni))
  (and
  (=> (mem (set1 (tuple2 b1 b2)) r (relation b2 b1 (t2tb12 u) v))
  (forall ((x b) (y uni))
  (=> (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) y) r)
  (and (mem2 x u) (mem b2 y v)))))
  (=>
  (forall ((x b) (y uni))
  (=> (sort b2 y)
  (=> (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) y) r)
  (and (mem2 x u) (mem b2 y v))))) (mem (set1 (tuple2 b1 b2)) r
  (relation b2 b1 (t2tb12 u) v)))))))

(declare-fun t2tb5126 ((set (set (tuple21 a (tuple21 (tuple21 a b) (tuple21 c
  d)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 a (tuple21 (tuple21 a b) (tuple21 c d)))))))
  (sort (set1 (set1 (tuple2 a1 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)))))
  (t2tb5126 x))))

(declare-fun tb2t5126 (uni) (set (set (tuple21 a (tuple21 (tuple21 a b)
  (tuple21 c d))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 a (tuple21 (tuple21 a b) (tuple21 c d)))))))
  (! (= (tb2t5126 (t2tb5126 i)) i) :pattern ((t2tb5126 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (set1 (tuple2 a1 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1))))) j)
     (= (t2tb5126 (tb2t5126 j)) j)) :pattern ((t2tb5126 (tb2t5126 j))) )))

;; mem_relation
  (assert
  (forall ((u (set a)) (v (set (tuple21 (tuple21 a b) (tuple21 c d))))
  (r (set (tuple21 a (tuple21 (tuple21 a b) (tuple21 c d))))))
  (= (mem (set1 (tuple2 a1 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1))))
  (t2tb5106 r)
  (relation (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) a1 (t2tb1 u) (t2tb879 v)))
  (forall ((x a) (y (tuple21 (tuple21 a b) (tuple21 c d))))
  (=> (mem (tuple2 a1 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)))
  (Tuple2 a1 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) (t2tb2 x) (t2tb880 y))
  (t2tb5106 r)) (and (mem1 x u) (mem50 y v)))))))

(declare-fun t2tb4831 ((set (set (tuple21 a (set (tuple21 b d)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 a (set (tuple21 b d))))))) (sort
  (set1 (set1 (tuple2 a1 (set1 (tuple2 b1 d1))))) (t2tb4831 x))))

(declare-fun tb2t4831 (uni) (set (set (tuple21 a (set (tuple21 b d))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 a (set (tuple21 b d)))))))
  (! (= (tb2t4831 (t2tb4831 i)) i) :pattern ((t2tb4831 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 a1 (set1 (tuple2 b1 d1))))) j)
     (= (t2tb4831 (tb2t4831 j)) j)) :pattern ((t2tb4831 (tb2t4831 j))) )))

;; mem_relation
  (assert
  (forall ((u (set a)) (v (set (set (tuple21 b d)))) (r (set (tuple21 a
  (set (tuple21 b d))))))
  (= (mem (set1 (tuple2 a1 (set1 (tuple2 b1 d1)))) (t2tb4575 r)
  (relation (set1 (tuple2 b1 d1)) a1 (t2tb1 u) (t2tb906 v)))
  (forall ((x a) (y (set (tuple21 b d))))
  (=> (mem (tuple2 a1 (set1 (tuple2 b1 d1)))
  (Tuple2 a1 (set1 (tuple2 b1 d1)) (t2tb2 x) (t2tb687 y)) (t2tb4575 r))
  (and (mem1 x u) (mem33 y v)))))))

(declare-fun t2tb4832 ((set (set (tuple21 a (tuple21 b d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 a (tuple21 b d)))))) (sort
  (set1 (set1 (tuple2 a1 (tuple2 b1 d1)))) (t2tb4832 x))))

(declare-fun tb2t4832 (uni) (set (set (tuple21 a (tuple21 b d)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 a (tuple21 b d))))))
  (! (= (tb2t4832 (t2tb4832 i)) i) :pattern ((t2tb4832 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 a1 (tuple2 b1 d1)))) j)
     (= (t2tb4832 (tb2t4832 j)) j)) :pattern ((t2tb4832 (tb2t4832 j))) )))

;; mem_relation
  (assert
  (forall ((u (set a)) (v (set (tuple21 b d))) (r (set (tuple21 a (tuple21 b
  d)))))
  (= (mem (set1 (tuple2 a1 (tuple2 b1 d1))) (t2tb4577 r)
  (relation (tuple2 b1 d1) a1 (t2tb1 u) (t2tb687 v)))
  (forall ((x a) (y (tuple21 b d)))
  (=> (mem (tuple2 a1 (tuple2 b1 d1))
  (Tuple2 a1 (tuple2 b1 d1) (t2tb2 x) (t2tb692 y)) (t2tb4577 r))
  (and (mem1 x u) (mem23 y v)))))))

(declare-fun t2tb1013 ((set (set (tuple21 a d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 a d))))) (sort (set1 (set1 (tuple2 a1 d1)))
  (t2tb1013 x))))

(declare-fun tb2t1013 (uni) (set (set (tuple21 a d))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 a d)))))
  (! (= (tb2t1013 (t2tb1013 i)) i) :pattern ((t2tb1013 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 a1 d1))) j) (= (t2tb1013 (tb2t1013 j)) j)) :pattern (
  (t2tb1013 (tb2t1013 j))) )))

;; mem_relation
  (assert
  (forall ((u (set a)) (v (set d)) (r (set (tuple21 a d))))
  (= (mem (set1 (tuple2 a1 d1)) (t2tb903 r)
  (relation d1 a1 (t2tb1 u) (t2tb690 v)))
  (forall ((x a) (y d))
  (=> (mem (tuple2 a1 d1) (Tuple2 a1 d1 (t2tb2 x) (t2tb694 y)) (t2tb903 r))
  (and (mem1 x u) (mem20 y v)))))))

(declare-fun t2tb4834 ((set (set (tuple21 a (set (tuple21 a c)))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 a (set (tuple21 a c))))))) (sort
  (set1 (set1 (tuple2 a1 (set1 (tuple2 a1 c1))))) (t2tb4834 x))))

(declare-fun tb2t4834 (uni) (set (set (tuple21 a (set (tuple21 a c))))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 a (set (tuple21 a c)))))))
  (! (= (tb2t4834 (t2tb4834 i)) i) :pattern ((t2tb4834 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 a1 (set1 (tuple2 a1 c1))))) j)
     (= (t2tb4834 (tb2t4834 j)) j)) :pattern ((t2tb4834 (tb2t4834 j))) )))

;; mem_relation
  (assert
  (forall ((u (set a)) (v (set (set (tuple21 a c)))) (r (set (tuple21 a
  (set (tuple21 a c))))))
  (= (mem (set1 (tuple2 a1 (set1 (tuple2 a1 c1)))) (t2tb4580 r)
  (relation (set1 (tuple2 a1 c1)) a1 (t2tb1 u) (t2tb128 v)))
  (forall ((x a) (y (set (tuple21 a c))))
  (=> (mem (tuple2 a1 (set1 (tuple2 a1 c1)))
  (Tuple2 a1 (set1 (tuple2 a1 c1)) (t2tb2 x) (t2tb129 y)) (t2tb4580 r))
  (and (mem1 x u) (mem11 y v)))))))

(declare-fun t2tb325 ((set (set (tuple21 a (tuple21 a c))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 a (tuple21 a c)))))) (sort
  (set1 (set1 (tuple2 a1 (tuple2 a1 c1)))) (t2tb325 x))))

(declare-fun tb2t325 (uni) (set (set (tuple21 a (tuple21 a c)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 a (tuple21 a c))))))
  (! (= (tb2t325 (t2tb325 i)) i) :pattern ((t2tb325 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 a1 (tuple2 a1 c1)))) j)
     (= (t2tb325 (tb2t325 j)) j)) :pattern ((t2tb325 (tb2t325 j))) )))

;; mem_relation
  (assert
  (forall ((u (set a)) (v (set (tuple21 a c))) (r (set (tuple21 a (tuple21 a
  c)))))
  (= (mem (set1 (tuple2 a1 (tuple2 a1 c1))) (t2tb256 r)
  (relation (tuple2 a1 c1) a1 (t2tb1 u) (t2tb129 v)))
  (forall ((x a) (y (tuple21 a c)))
  (=> (mem (tuple2 a1 (tuple2 a1 c1))
  (Tuple2 a1 (tuple2 a1 c1) (t2tb2 x) (t2tb133 y)) (t2tb256 r))
  (and (mem1 x u) (mem10 y v)))))))

;; mem_relation
  (assert
  (forall ((u (set a)) (v (set c)) (r (set (tuple21 a c))))
  (= (mem11 r (relation3 u v))
  (forall ((x a) (y c))
  (=> (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y))) r)
  (and (mem1 x u) (mem7 y v)))))))

(declare-fun t2tb58 ((set (set (tuple21 a (tuple21 a b))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 a (tuple21 a b)))))) (sort
  (set1 (set1 (tuple2 a1 (tuple2 a1 b1)))) (t2tb58 x))))

(declare-fun tb2t58 (uni) (set (set (tuple21 a (tuple21 a b)))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 a (tuple21 a b))))))
  (! (= (tb2t58 (t2tb58 i)) i) :pattern ((t2tb58 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 a1 (tuple2 a1 b1)))) j)
     (= (t2tb58 (tb2t58 j)) j)) :pattern ((t2tb58 (tb2t58 j))) )))

;; mem_relation
  (assert
  (forall ((u (set a)) (v (set (tuple21 a b))) (r (set (tuple21 a (tuple21 a
  b)))))
  (= (mem (set1 (tuple2 a1 (tuple2 a1 b1))) (t2tb41 r)
  (relation (tuple2 a1 b1) a1 (t2tb1 u) (t2tb11 v)))
  (forall ((x a) (y (tuple21 a b)))
  (=> (mem (tuple2 a1 (tuple2 a1 b1))
  (Tuple2 a1 (tuple2 a1 b1) (t2tb2 x) (t2tb13 y)) (t2tb41 r))
  (and (mem1 x u) (mem3 y v)))))))

;; mem_relation
  (assert
  (forall ((u (set a)) (v (set b)) (r (set (tuple21 a b))))
  (= (mem (set1 (tuple2 a1 b1)) (t2tb11 r)
  (relation b1 a1 (t2tb1 u) (t2tb12 v)))
  (forall ((x a) (y b))
  (=> (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y))) r)
  (and (mem1 x u) (mem2 y v)))))))

(declare-fun t2tb3 ((set (set (tuple21 a a)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (set (tuple21 a a))))) (sort (set1 (set1 (tuple2 a1 a1)))
  (t2tb3 x))))

(declare-fun tb2t3 (uni) (set (set (tuple21 a a))))

;; BridgeL
  (assert
  (forall ((i (set (set (tuple21 a a)))))
  (! (= (tb2t3 (t2tb3 i)) i) :pattern ((t2tb3 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (set1 (tuple2 a1 a1))) j) (= (t2tb3 (tb2t3 j)) j)) :pattern (
  (t2tb3 (tb2t3 j))) )))

;; mem_relation
  (assert
  (forall ((u (set a)) (v (set a)) (r (set (tuple21 a a))))
  (= (mem (set1 (tuple2 a1 a1)) (t2tb4 r)
  (relation a1 a1 (t2tb1 u) (t2tb1 v)))
  (forall ((x a) (y a))
  (=> (mem (tuple2 a1 a1) (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y)) (t2tb4 r))
  (and (mem1 x u) (mem1 y v)))))))

;; mem_relation
  (assert
  (forall ((b2 ty))
  (forall ((u (set a)) (v uni) (r uni))
  (and
  (=> (mem (set1 (tuple2 a1 b2)) r (relation b2 a1 (t2tb1 u) v))
  (forall ((x a) (y uni))
  (=> (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) y) r)
  (and (mem1 x u) (mem b2 y v)))))
  (=>
  (forall ((x a) (y uni))
  (=> (sort b2 y)
  (=> (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) y) r)
  (and (mem1 x u) (mem b2 y v))))) (mem (set1 (tuple2 a1 b2)) r
  (relation b2 a1 (t2tb1 u) v)))))))

;; mem_relation
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((u uni) (v uni) (r uni))
  (and
  (=> (mem (set1 (tuple2 a2 b2)) r (relation b2 a2 u v))
  (forall ((x uni) (y uni))
  (=> (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) r)
  (and (mem a2 x u) (mem b2 y v)))))
  (=>
  (forall ((x uni) (y uni))
  (=> (sort a2 x)
  (=> (sort b2 y)
  (=> (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) r)
  (and (mem a2 x u) (mem b2 y v)))))) (mem (set1 (tuple2 a2 b2)) r
  (relation b2 a2 u v)))))))

(declare-fun inverse (ty ty uni) uni)

;; inverse_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni)) (sort (set1 (tuple2 b2 a2)) (inverse b2 a2 x)))))

(declare-fun t2tb3438 ((set (tuple21 (tuple21 c d) (tuple21 a b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 c d) (tuple21 a b))))) (sort
  (set1 (tuple2 (tuple2 c1 d1) (tuple2 a1 b1))) (t2tb3438 x))))

(declare-fun tb2t3438 (uni) (set (tuple21 (tuple21 c d) (tuple21 a b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 c d) (tuple21 a b)))))
  (! (= (tb2t3438 (t2tb3438 i)) i) :pattern ((t2tb3438 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 c1 d1) (tuple2 a1 b1))) j)
     (= (t2tb3438 (tb2t3438 j)) j)) :pattern ((t2tb3438 (tb2t3438 j))) )))

(declare-fun t2tb3439 ((tuple21 (tuple21 c d) (tuple21 a b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 c d) (tuple21 a b)))) (sort
  (tuple2 (tuple2 c1 d1) (tuple2 a1 b1)) (t2tb3439 x))))

(declare-fun tb2t3439 (uni) (tuple21 (tuple21 c d) (tuple21 a b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 c d) (tuple21 a b))))
  (! (= (tb2t3439 (t2tb3439 i)) i) :pattern ((t2tb3439 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 c1 d1) (tuple2 a1 b1)) j)
     (= (t2tb3439 (tb2t3439 j)) j)) :pattern ((t2tb3439 (tb2t3439 j))) )))

;; mem_inverse
  (assert
  (forall ((p (set (tuple21 (tuple21 c d) (tuple21 a b)))) (x (tuple21 a b))
  (y (tuple21 c d)))
  (= (mem50
  (tb2t880 (Tuple2 (tuple2 a1 b1) (tuple2 c1 d1) (t2tb13 x) (t2tb693 y)))
  (tb2t879 (inverse (tuple2 a1 b1) (tuple2 c1 d1) (t2tb3438 p)))) (mem
  (tuple2 (tuple2 c1 d1) (tuple2 a1 b1))
  (Tuple2 (tuple2 c1 d1) (tuple2 a1 b1) (t2tb693 y) (t2tb13 x))
  (t2tb3438 p)))))

;; mem_inverse
  (assert
  (forall ((p (set (tuple21 d b))) (x b) (y d))
  (= (mem23 (tb2t692 (Tuple2 b1 d1 (t2tb14 x) (t2tb694 y)))
  (tb2t687 (inverse b1 d1 (t2tb835 p)))) (mem (tuple2 d1 b1)
  (Tuple2 d1 b1 (t2tb694 y) (t2tb14 x)) (t2tb835 p)))))

;; mem_inverse
  (assert
  (forall ((p (set (tuple21 c a))) (x a) (y c))
  (= (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y)))
  (tb2t129 (inverse a1 c1 (t2tb224 p)))) (mem (tuple2 c1 a1)
  (Tuple2 c1 a1 (t2tb135 y) (t2tb2 x)) (t2tb224 p)))))

;; mem_inverse
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) (tuple21 c d)))) (x (tuple21 c d))
  (y (tuple21 a b)))
  (= (mem (tuple2 (tuple2 c1 d1) (tuple2 a1 b1))
  (Tuple2 (tuple2 c1 d1) (tuple2 a1 b1) (t2tb693 x) (t2tb13 y))
  (inverse (tuple2 c1 d1) (tuple2 a1 b1) (t2tb879 p))) (mem50
  (tb2t880 (Tuple2 (tuple2 a1 b1) (tuple2 c1 d1) (t2tb13 y) (t2tb693 x))) p))))

;; mem_inverse
  (assert
  (forall ((p (set (tuple21 b d))) (x d) (y b))
  (= (mem (tuple2 d1 b1) (Tuple2 d1 b1 (t2tb694 x) (t2tb14 y))
  (inverse d1 b1 (t2tb687 p))) (mem23
  (tb2t692 (Tuple2 b1 d1 (t2tb14 y) (t2tb694 x))) p))))

;; mem_inverse
  (assert
  (forall ((p (set (tuple21 b a))) (x a) (y b))
  (= (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y)))
  (tb2t11 (inverse a1 b1 (t2tb37 p)))) (mem (tuple2 b1 a1)
  (Tuple2 b1 a1 (t2tb14 y) (t2tb2 x)) (t2tb37 p)))))

;; mem_inverse
  (assert
  (forall ((p (set (tuple21 a c))) (x c) (y a))
  (= (mem (tuple2 c1 a1) (Tuple2 c1 a1 (t2tb135 x) (t2tb2 y))
  (inverse c1 a1 (t2tb129 p))) (mem10
  (tb2t133 (Tuple2 a1 c1 (t2tb2 y) (t2tb135 x))) p))))

;; mem_inverse
  (assert
  (forall ((p (set (tuple21 a b))) (x b) (y a))
  (= (mem (tuple2 b1 a1) (Tuple2 b1 a1 (t2tb14 x) (t2tb2 y))
  (inverse b1 a1 (t2tb11 p))) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 y) (t2tb14 x))) p))))

;; mem_inverse
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((p uni) (x uni) (y uni))
  (= (mem (tuple2 b2 a2) (Tuple2 b2 a2 x y) (inverse b2 a2 p)) (mem
  (tuple2 a2 b2) (Tuple2 a2 b2 y x) p)))))

(declare-fun dom (ty ty uni) uni)

;; dom_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni)) (sort (set1 a2) (dom b2 a2 x)))))

;; mem_dom
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (x (tuple21 (tuple21 a b) (tuple21 c d))))
  (and
  (=> (mem50 x (tb2t879 (dom b2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) p)))
  (exists ((b3 uni))
  (and (sort b2 b3) (mem (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) b2)
  (Tuple2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) b2 (t2tb880 x) b3) p))))
  (=>
  (exists ((b3 uni)) (mem (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) b2)
  (Tuple2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) b2 (t2tb880 x) b3) p))
  (mem50 x (tb2t879 (dom b2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) p))))))))

;; mem_dom
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (x (set (tuple21 b d))))
  (and
  (=> (mem33 x (tb2t906 (dom b2 (set1 (tuple2 b1 d1)) p)))
  (exists ((b3 uni))
  (and (sort b2 b3) (mem (tuple2 (set1 (tuple2 b1 d1)) b2)
  (Tuple2 (set1 (tuple2 b1 d1)) b2 (t2tb687 x) b3) p))))
  (=>
  (exists ((b3 uni)) (mem (tuple2 (set1 (tuple2 b1 d1)) b2)
  (Tuple2 (set1 (tuple2 b1 d1)) b2 (t2tb687 x) b3) p)) (mem33 x
  (tb2t906 (dom b2 (set1 (tuple2 b1 d1)) p))))))))

;; mem_dom
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (x (tuple21 b d)))
  (and
  (=> (mem23 x (tb2t687 (dom b2 (tuple2 b1 d1) p)))
  (exists ((b3 uni))
  (and (sort b2 b3) (mem (tuple2 (tuple2 b1 d1) b2)
  (Tuple2 (tuple2 b1 d1) b2 (t2tb692 x) b3) p))))
  (=>
  (exists ((b3 uni)) (mem (tuple2 (tuple2 b1 d1) b2)
  (Tuple2 (tuple2 b1 d1) b2 (t2tb692 x) b3) p)) (mem23 x
  (tb2t687 (dom b2 (tuple2 b1 d1) p))))))))

;; mem_dom
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (x d))
  (and
  (=> (mem20 x (tb2t690 (dom b2 d1 p)))
  (exists ((b3 uni))
  (and (sort b2 b3) (mem (tuple2 d1 b2) (Tuple2 d1 b2 (t2tb694 x) b3) p))))
  (=>
  (exists ((b3 uni)) (mem (tuple2 d1 b2) (Tuple2 d1 b2 (t2tb694 x) b3) p))
  (mem20 x (tb2t690 (dom b2 d1 p))))))))

;; mem_dom
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (x (set (tuple21 a c))))
  (and
  (=> (mem11 x (tb2t128 (dom b2 (set1 (tuple2 a1 c1)) p)))
  (exists ((b3 uni))
  (and (sort b2 b3) (mem (tuple2 (set1 (tuple2 a1 c1)) b2)
  (Tuple2 (set1 (tuple2 a1 c1)) b2 (t2tb129 x) b3) p))))
  (=>
  (exists ((b3 uni)) (mem (tuple2 (set1 (tuple2 a1 c1)) b2)
  (Tuple2 (set1 (tuple2 a1 c1)) b2 (t2tb129 x) b3) p)) (mem11 x
  (tb2t128 (dom b2 (set1 (tuple2 a1 c1)) p))))))))

;; mem_dom
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (x (tuple21 a c)))
  (and
  (=> (mem10 x (tb2t129 (dom b2 (tuple2 a1 c1) p)))
  (exists ((b3 uni))
  (and (sort b2 b3) (mem (tuple2 (tuple2 a1 c1) b2)
  (Tuple2 (tuple2 a1 c1) b2 (t2tb133 x) b3) p))))
  (=>
  (exists ((b3 uni)) (mem (tuple2 (tuple2 a1 c1) b2)
  (Tuple2 (tuple2 a1 c1) b2 (t2tb133 x) b3) p)) (mem10 x
  (tb2t129 (dom b2 (tuple2 a1 c1) p))))))))

;; mem_dom
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (x c))
  (and
  (=> (mem7 x (tb2t132 (dom b2 c1 p)))
  (exists ((b3 uni))
  (and (sort b2 b3) (mem (tuple2 c1 b2) (Tuple2 c1 b2 (t2tb135 x) b3) p))))
  (=>
  (exists ((b3 uni)) (mem (tuple2 c1 b2) (Tuple2 c1 b2 (t2tb135 x) b3) p))
  (mem7 x (tb2t132 (dom b2 c1 p))))))))

;; mem_dom
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) (tuple21 c d)))) (x (tuple21 a b)))
  (= (mem3 x (tb2t11 (dom (tuple2 c1 d1) (tuple2 a1 b1) (t2tb879 p))))
  (exists ((b2 (tuple21 c d))) (mem50
  (tb2t880 (Tuple2 (tuple2 a1 b1) (tuple2 c1 d1) (t2tb13 x) (t2tb693 b2)))
  p)))))

;; mem_dom
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (x (tuple21 a b)))
  (and
  (=> (mem3 x (tb2t11 (dom b2 (tuple2 a1 b1) p)))
  (exists ((b3 uni))
  (and (sort b2 b3) (mem (tuple2 (tuple2 a1 b1) b2)
  (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) b3) p))))
  (=>
  (exists ((b3 uni)) (mem (tuple2 (tuple2 a1 b1) b2)
  (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) b3) p)) (mem3 x
  (tb2t11 (dom b2 (tuple2 a1 b1) p))))))))

;; mem_dom
  (assert
  (forall ((p (set (tuple21 b d))) (x b))
  (= (mem2 x (tb2t12 (dom d1 b1 (t2tb687 p))))
  (exists ((b2 d)) (mem23 (tb2t692 (Tuple2 b1 d1 (t2tb14 x) (t2tb694 b2)))
  p)))))

;; mem_dom
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (x b))
  (and
  (=> (mem2 x (tb2t12 (dom b2 b1 p)))
  (exists ((b3 uni))
  (and (sort b2 b3) (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) b3) p))))
  (=> (exists ((b3 uni)) (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) b3) p))
  (mem2 x (tb2t12 (dom b2 b1 p))))))))

;; mem_dom
  (assert
  (forall ((p (set (tuple21 a c))) (x a))
  (= (mem1 x (tb2t1 (dom c1 a1 (t2tb129 p))))
  (exists ((b2 c)) (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 b2))) p)))))

;; mem_dom
  (assert
  (forall ((p (set (tuple21 a b))) (x a))
  (= (mem1 x (tb2t1 (dom b1 a1 (t2tb11 p))))
  (exists ((b2 b)) (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 b2))) p)))))

;; mem_dom
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (x a))
  (and
  (=> (mem1 x (tb2t1 (dom b2 a1 p)))
  (exists ((b3 uni))
  (and (sort b2 b3) (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) b3) p))))
  (=> (exists ((b3 uni)) (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) b3) p))
  (mem1 x (tb2t1 (dom b2 a1 p))))))))

;; mem_dom
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((p uni) (x uni))
  (and
  (=> (mem a2 x (dom b2 a2 p))
  (exists ((b3 uni))
  (and (sort b2 b3) (mem (tuple2 a2 b2) (Tuple2 a2 b2 x b3) p))))
  (=> (exists ((b3 uni)) (mem (tuple2 a2 b2) (Tuple2 a2 b2 x b3) p)) (mem a2
  x (dom b2 a2 p)))))))

(declare-fun ran (ty ty uni) uni)

;; ran_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni)) (sort (set1 b2) (ran b2 a2 x)))))

;; mem_ran
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (x (tuple21 (tuple21 a b) (tuple21 c d))))
  (and
  (=> (mem50 x (tb2t879 (ran (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) a2 p)))
  (exists ((a3 uni))
  (and (sort a2 a3) (mem (tuple2 a2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)))
  (Tuple2 a2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) a3 (t2tb880 x)) p))))
  (=>
  (exists ((a3 uni)) (mem (tuple2 a2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)))
  (Tuple2 a2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) a3 (t2tb880 x)) p))
  (mem50 x (tb2t879 (ran (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) a2 p))))))))

;; mem_ran
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (x (set (tuple21 b d))))
  (and
  (=> (mem33 x (tb2t906 (ran (set1 (tuple2 b1 d1)) a2 p)))
  (exists ((a3 uni))
  (and (sort a2 a3) (mem (tuple2 a2 (set1 (tuple2 b1 d1)))
  (Tuple2 a2 (set1 (tuple2 b1 d1)) a3 (t2tb687 x)) p))))
  (=>
  (exists ((a3 uni)) (mem (tuple2 a2 (set1 (tuple2 b1 d1)))
  (Tuple2 a2 (set1 (tuple2 b1 d1)) a3 (t2tb687 x)) p)) (mem33 x
  (tb2t906 (ran (set1 (tuple2 b1 d1)) a2 p))))))))

;; mem_ran
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (x (tuple21 b d)))
  (and
  (=> (mem23 x (tb2t687 (ran (tuple2 b1 d1) a2 p)))
  (exists ((a3 uni))
  (and (sort a2 a3) (mem (tuple2 a2 (tuple2 b1 d1))
  (Tuple2 a2 (tuple2 b1 d1) a3 (t2tb692 x)) p))))
  (=>
  (exists ((a3 uni)) (mem (tuple2 a2 (tuple2 b1 d1))
  (Tuple2 a2 (tuple2 b1 d1) a3 (t2tb692 x)) p)) (mem23 x
  (tb2t687 (ran (tuple2 b1 d1) a2 p))))))))

;; mem_ran
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (x d))
  (and
  (=> (mem20 x (tb2t690 (ran d1 a2 p)))
  (exists ((a3 uni))
  (and (sort a2 a3) (mem (tuple2 a2 d1) (Tuple2 a2 d1 a3 (t2tb694 x)) p))))
  (=>
  (exists ((a3 uni)) (mem (tuple2 a2 d1) (Tuple2 a2 d1 a3 (t2tb694 x)) p))
  (mem20 x (tb2t690 (ran d1 a2 p))))))))

;; mem_ran
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (x (set (tuple21 a c))))
  (and
  (=> (mem11 x (tb2t128 (ran (set1 (tuple2 a1 c1)) a2 p)))
  (exists ((a3 uni))
  (and (sort a2 a3) (mem (tuple2 a2 (set1 (tuple2 a1 c1)))
  (Tuple2 a2 (set1 (tuple2 a1 c1)) a3 (t2tb129 x)) p))))
  (=>
  (exists ((a3 uni)) (mem (tuple2 a2 (set1 (tuple2 a1 c1)))
  (Tuple2 a2 (set1 (tuple2 a1 c1)) a3 (t2tb129 x)) p)) (mem11 x
  (tb2t128 (ran (set1 (tuple2 a1 c1)) a2 p))))))))

;; mem_ran
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (x (tuple21 a c)))
  (and
  (=> (mem10 x (tb2t129 (ran (tuple2 a1 c1) a2 p)))
  (exists ((a3 uni))
  (and (sort a2 a3) (mem (tuple2 a2 (tuple2 a1 c1))
  (Tuple2 a2 (tuple2 a1 c1) a3 (t2tb133 x)) p))))
  (=>
  (exists ((a3 uni)) (mem (tuple2 a2 (tuple2 a1 c1))
  (Tuple2 a2 (tuple2 a1 c1) a3 (t2tb133 x)) p)) (mem10 x
  (tb2t129 (ran (tuple2 a1 c1) a2 p))))))))

;; mem_ran
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (x c))
  (and
  (=> (mem7 x (tb2t132 (ran c1 a2 p)))
  (exists ((a3 uni))
  (and (sort a2 a3) (mem (tuple2 a2 c1) (Tuple2 a2 c1 a3 (t2tb135 x)) p))))
  (=>
  (exists ((a3 uni)) (mem (tuple2 a2 c1) (Tuple2 a2 c1 a3 (t2tb135 x)) p))
  (mem7 x (tb2t132 (ran c1 a2 p))))))))

;; mem_ran
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (x (tuple21 a b)))
  (and
  (=> (mem3 x (tb2t11 (ran (tuple2 a1 b1) a2 p)))
  (exists ((a3 uni))
  (and (sort a2 a3) (mem (tuple2 a2 (tuple2 a1 b1))
  (Tuple2 a2 (tuple2 a1 b1) a3 (t2tb13 x)) p))))
  (=>
  (exists ((a3 uni)) (mem (tuple2 a2 (tuple2 a1 b1))
  (Tuple2 a2 (tuple2 a1 b1) a3 (t2tb13 x)) p)) (mem3 x
  (tb2t11 (ran (tuple2 a1 b1) a2 p))))))))

;; mem_ran
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (x b))
  (and
  (=> (mem2 x (tb2t12 (ran b1 a2 p)))
  (exists ((a3 uni))
  (and (sort a2 a3) (mem (tuple2 a2 b1) (Tuple2 a2 b1 a3 (t2tb14 x)) p))))
  (=> (exists ((a3 uni)) (mem (tuple2 a2 b1) (Tuple2 a2 b1 a3 (t2tb14 x)) p))
  (mem2 x (tb2t12 (ran b1 a2 p))))))))

;; mem_ran
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (x a))
  (and
  (=> (mem1 x (tb2t1 (ran a1 a2 p)))
  (exists ((a3 uni))
  (and (sort a2 a3) (mem (tuple2 a2 a1) (Tuple2 a2 a1 a3 (t2tb2 x)) p))))
  (=> (exists ((a3 uni)) (mem (tuple2 a2 a1) (Tuple2 a2 a1 a3 (t2tb2 x)) p))
  (mem1 x (tb2t1 (ran a1 a2 p))))))))

;; mem_ran
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) (tuple21 c d)))) (x (tuple21 c d)))
  (= (mem (tuple2 c1 d1) (t2tb693 x)
  (ran (tuple2 c1 d1) (tuple2 a1 b1) (t2tb879 p)))
  (exists ((a2 (tuple21 a b))) (mem50
  (tb2t880 (Tuple2 (tuple2 a1 b1) (tuple2 c1 d1) (t2tb13 a2) (t2tb693 x)))
  p)))))

;; mem_ran
  (assert
  (forall ((p (set (tuple21 b d))) (x d))
  (= (mem20 x (tb2t690 (ran d1 b1 (t2tb687 p))))
  (exists ((a2 b)) (mem23 (tb2t692 (Tuple2 b1 d1 (t2tb14 a2) (t2tb694 x)))
  p)))))

;; mem_ran
  (assert
  (forall ((p (set (tuple21 a c))) (x c))
  (= (mem7 x (tb2t132 (ran c1 a1 (t2tb129 p))))
  (exists ((a2 a)) (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 a2) (t2tb135 x))) p)))))

;; mem_ran
  (assert
  (forall ((p (set (tuple21 a b))) (x b))
  (= (mem2 x (tb2t12 (ran b1 a1 (t2tb11 p))))
  (exists ((a2 a)) (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 a2) (t2tb14 x))) p)))))

;; mem_ran
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((p uni) (x uni))
  (and
  (=> (mem b2 x (ran b2 a2 p))
  (exists ((a3 uni))
  (and (sort a2 a3) (mem (tuple2 a2 b2) (Tuple2 a2 b2 a3 x) p))))
  (=> (exists ((a3 uni)) (mem (tuple2 a2 b2) (Tuple2 a2 b2 a3 x) p)) (mem b2
  x (ran b2 a2 p)))))))

(declare-fun semicolon (ty ty ty uni uni) uni)

;; semicolon_sort
  (assert
  (forall ((a2 ty) (b2 ty) (c2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (tuple2 a2 c2))
  (semicolon c2 b2 a2 x x1)))))

;; mem_semicolon
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (q (set (tuple21 (tuple21 a b) (tuple21 c d)))) (x uni)
  (y (tuple21 c d)))
  (= (mem (tuple2 a2 (tuple2 c1 d1)) (Tuple2 a2 (tuple2 c1 d1) x (t2tb693 y))
  (semicolon (tuple2 c1 d1) (tuple2 a1 b1) a2 p (t2tb879 q)))
  (exists ((b2 (tuple21 a b)))
  (and (mem (tuple2 a2 (tuple2 a1 b1))
  (Tuple2 a2 (tuple2 a1 b1) x (t2tb13 b2)) p) (mem50
  (tb2t880 (Tuple2 (tuple2 a1 b1) (tuple2 c1 d1) (t2tb13 b2) (t2tb693 y)))
  q)))))))

;; mem_semicolon
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (q (set (tuple21 b d))) (x uni) (y d))
  (= (mem (tuple2 a2 d1) (Tuple2 a2 d1 x (t2tb694 y))
  (semicolon d1 b1 a2 p (t2tb687 q)))
  (exists ((b2 b))
  (and (mem (tuple2 a2 b1) (Tuple2 a2 b1 x (t2tb14 b2)) p) (mem23
  (tb2t692 (Tuple2 b1 d1 (t2tb14 b2) (t2tb694 y))) q)))))))

;; mem_semicolon
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (q (set (tuple21 a c))) (x uni) (y c))
  (= (mem (tuple2 a2 c1) (Tuple2 a2 c1 x (t2tb135 y))
  (semicolon c1 a1 a2 p (t2tb129 q)))
  (exists ((b2 a))
  (and (mem (tuple2 a2 a1) (Tuple2 a2 a1 x (t2tb2 b2)) p) (mem10
  (tb2t133 (Tuple2 a1 c1 (t2tb2 b2) (t2tb135 y))) q)))))))

;; mem_semicolon
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (q (set (tuple21 a b))) (x uni) (y b))
  (= (mem (tuple2 a2 b1) (Tuple2 a2 b1 x (t2tb14 y))
  (semicolon b1 a1 a2 p (t2tb11 q)))
  (exists ((b2 a))
  (and (mem (tuple2 a2 a1) (Tuple2 a2 a1 x (t2tb2 b2)) p) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 b2) (t2tb14 y))) q)))))))

;; mem_semicolon
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (q uni) (x (tuple21 a b)) (y (tuple21 c d)))
  (and
  (=> (mem50
  (tb2t880 (Tuple2 (tuple2 a1 b1) (tuple2 c1 d1) (t2tb13 x) (t2tb693 y)))
  (tb2t879 (semicolon (tuple2 c1 d1) b2 (tuple2 a1 b1) p q)))
  (exists ((b3 uni))
  (and (sort b2 b3)
  (and (mem (tuple2 (tuple2 a1 b1) b2)
  (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) b3) p) (mem (tuple2 b2 (tuple2 c1 d1))
  (Tuple2 b2 (tuple2 c1 d1) b3 (t2tb693 y)) q)))))
  (=>
  (exists ((b3 uni))
  (and (mem (tuple2 (tuple2 a1 b1) b2)
  (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) b3) p) (mem (tuple2 b2 (tuple2 c1 d1))
  (Tuple2 b2 (tuple2 c1 d1) b3 (t2tb693 y)) q))) (mem50
  (tb2t880 (Tuple2 (tuple2 a1 b1) (tuple2 c1 d1) (t2tb13 x) (t2tb693 y)))
  (tb2t879 (semicolon (tuple2 c1 d1) b2 (tuple2 a1 b1) p q))))))))

(declare-fun t2tb799 ((set (tuple21 (tuple21 c d) (tuple21 c d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 c d) (tuple21 c d))))) (sort
  (set1 (tuple2 (tuple2 c1 d1) (tuple2 c1 d1))) (t2tb799 x))))

(declare-fun tb2t799 (uni) (set (tuple21 (tuple21 c d) (tuple21 c d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 c d) (tuple21 c d)))))
  (! (= (tb2t799 (t2tb799 i)) i) :pattern ((t2tb799 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 c1 d1) (tuple2 c1 d1))) j)
     (= (t2tb799 (tb2t799 j)) j)) :pattern ((t2tb799 (tb2t799 j))) )))

(declare-fun t2tb800 ((tuple21 (tuple21 c d) (tuple21 c d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 c d) (tuple21 c d)))) (sort
  (tuple2 (tuple2 c1 d1) (tuple2 c1 d1)) (t2tb800 x))))

(declare-fun tb2t800 (uni) (tuple21 (tuple21 c d) (tuple21 c d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 c d) (tuple21 c d))))
  (! (= (tb2t800 (t2tb800 i)) i) :pattern ((t2tb800 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 c1 d1) (tuple2 c1 d1)) j)
     (= (t2tb800 (tb2t800 j)) j)) :pattern ((t2tb800 (tb2t800 j))) )))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) (tuple21 c d))))
  (q (set (tuple21 (tuple21 c d) (tuple21 c d)))) (x (tuple21 a b))
  (y (tuple21 c d)))
  (= (mem50
  (tb2t880 (Tuple2 (tuple2 a1 b1) (tuple2 c1 d1) (t2tb13 x) (t2tb693 y)))
  (tb2t879
  (semicolon (tuple2 c1 d1) (tuple2 c1 d1) (tuple2 a1 b1) (t2tb879 p)
  (t2tb799 q))))
  (exists ((b2 (tuple21 c d)))
  (and (mem50
  (tb2t880 (Tuple2 (tuple2 a1 b1) (tuple2 c1 d1) (t2tb13 x) (t2tb693 b2))) p)
  (mem (tuple2 (tuple2 c1 d1) (tuple2 c1 d1))
  (Tuple2 (tuple2 c1 d1) (tuple2 c1 d1) (t2tb693 b2) (t2tb693 y))
  (t2tb799 q)))))))

;; mem_semicolon
  (assert
  (forall ((c2 ty))
  (forall ((p (set (tuple21 (tuple21 a b) (tuple21 c d)))) (q uni)
  (x (tuple21 a b)) (y uni))
  (= (mem (tuple2 (tuple2 a1 b1) c2) (Tuple2 (tuple2 a1 b1) c2 (t2tb13 x) y)
  (semicolon c2 (tuple2 c1 d1) (tuple2 a1 b1) (t2tb879 p) q))
  (exists ((b2 (tuple21 c d)))
  (and (mem50
  (tb2t880 (Tuple2 (tuple2 a1 b1) (tuple2 c1 d1) (t2tb13 x) (t2tb693 b2))) p)
  (mem (tuple2 (tuple2 c1 d1) c2) (Tuple2 (tuple2 c1 d1) c2 (t2tb693 b2) y)
  q)))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) (tuple21 a b))))
  (q (set (tuple21 (tuple21 a b) (tuple21 c d)))) (x (tuple21 a b))
  (y (tuple21 c d)))
  (= (mem50
  (tb2t880 (Tuple2 (tuple2 a1 b1) (tuple2 c1 d1) (t2tb13 x) (t2tb693 y)))
  (tb2t879
  (semicolon (tuple2 c1 d1) (tuple2 a1 b1) (tuple2 a1 b1) (t2tb25 p)
  (t2tb879 q))))
  (exists ((b2 (tuple21 a b)))
  (and (mem (tuple2 (tuple2 a1 b1) (tuple2 a1 b1))
  (Tuple2 (tuple2 a1 b1) (tuple2 a1 b1) (t2tb13 x) (t2tb13 b2)) (t2tb25 p))
  (mem50
  (tb2t880 (Tuple2 (tuple2 a1 b1) (tuple2 c1 d1) (t2tb13 b2) (t2tb693 y)))
  q))))))

;; mem_semicolon
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (q uni) (x b) (y d))
  (and
  (=> (mem23 (tb2t692 (Tuple2 b1 d1 (t2tb14 x) (t2tb694 y)))
  (tb2t687 (semicolon d1 b2 b1 p q)))
  (exists ((b3 uni))
  (and (sort b2 b3)
  (and (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) b3) p) (mem
  (tuple2 b2 d1) (Tuple2 b2 d1 b3 (t2tb694 y)) q)))))
  (=>
  (exists ((b3 uni))
  (and (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) b3) p) (mem
  (tuple2 b2 d1) (Tuple2 b2 d1 b3 (t2tb694 y)) q))) (mem23
  (tb2t692 (Tuple2 b1 d1 (t2tb14 x) (t2tb694 y)))
  (tb2t687 (semicolon d1 b2 b1 p q))))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 b d))) (q (set (tuple21 d d))) (x b) (y d))
  (= (mem23 (tb2t692 (Tuple2 b1 d1 (t2tb14 x) (t2tb694 y)))
  (tb2t687 (semicolon d1 d1 b1 (t2tb687 p) (t2tb825 q))))
  (exists ((b2 d))
  (and (mem23 (tb2t692 (Tuple2 b1 d1 (t2tb14 x) (t2tb694 b2))) p) (mem
  (tuple2 d1 d1) (Tuple2 d1 d1 (t2tb694 b2) (t2tb694 y)) (t2tb825 q)))))))

;; mem_semicolon
  (assert
  (forall ((c2 ty))
  (forall ((p (set (tuple21 b d))) (q uni) (x b) (y uni))
  (= (mem (tuple2 b1 c2) (Tuple2 b1 c2 (t2tb14 x) y)
  (semicolon c2 d1 b1 (t2tb687 p) q))
  (exists ((b2 d))
  (and (mem23 (tb2t692 (Tuple2 b1 d1 (t2tb14 x) (t2tb694 b2))) p) (mem
  (tuple2 d1 c2) (Tuple2 d1 c2 (t2tb694 b2) y) q)))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 b b))) (q (set (tuple21 b d))) (x b) (y d))
  (= (mem23 (tb2t692 (Tuple2 b1 d1 (t2tb14 x) (t2tb694 y)))
  (tb2t687 (semicolon d1 b1 b1 (t2tb35 p) (t2tb687 q))))
  (exists ((b2 b))
  (and (mem (tuple2 b1 b1) (Tuple2 b1 b1 (t2tb14 x) (t2tb14 b2)) (t2tb35 p))
  (mem23 (tb2t692 (Tuple2 b1 d1 (t2tb14 b2) (t2tb694 y))) q))))))

;; mem_semicolon
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (q uni) (x a) (y c))
  (and
  (=> (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y)))
  (tb2t129 (semicolon c1 b2 a1 p q)))
  (exists ((b3 uni))
  (and (sort b2 b3)
  (and (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) b3) p) (mem (tuple2 b2 c1)
  (Tuple2 b2 c1 b3 (t2tb135 y)) q)))))
  (=>
  (exists ((b3 uni))
  (and (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) b3) p) (mem (tuple2 b2 c1)
  (Tuple2 b2 c1 b3 (t2tb135 y)) q))) (mem10
  (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y)))
  (tb2t129 (semicolon c1 b2 a1 p q))))))))

;; mem_semicolon
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (q uni) (x a) (y b))
  (and
  (=> (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y)))
  (tb2t11 (semicolon b1 b2 a1 p q)))
  (exists ((b3 uni))
  (and (sort b2 b3)
  (and (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) b3) p) (mem (tuple2 b2 b1)
  (Tuple2 b2 b1 b3 (t2tb14 y)) q)))))
  (=>
  (exists ((b3 uni))
  (and (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) b3) p) (mem (tuple2 b2 b1)
  (Tuple2 b2 b1 b3 (t2tb14 y)) q))) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y)))
  (tb2t11 (semicolon b1 b2 a1 p q))))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 a c))) (q (set (tuple21 c c))) (x a) (y c))
  (= (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y)))
  (tb2t129 (semicolon c1 c1 a1 (t2tb129 p) (t2tb216 q))))
  (exists ((b2 c))
  (and (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 b2))) p) (mem
  (tuple2 c1 c1) (Tuple2 c1 c1 (t2tb135 b2) (t2tb135 y)) (t2tb216 q)))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 a c))) (q (set (tuple21 c b))) (x a) (y b))
  (= (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y)))
  (tb2t11 (semicolon b1 c1 a1 (t2tb129 p) (t2tb222 q))))
  (exists ((b2 c))
  (and (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 b2))) p) (mem
  (tuple2 c1 b1) (Tuple2 c1 b1 (t2tb135 b2) (t2tb14 y)) (t2tb222 q)))))))

;; mem_semicolon
  (assert
  (forall ((c2 ty))
  (forall ((p (set (tuple21 a c))) (q uni) (x a) (y uni))
  (= (mem (tuple2 a1 c2) (Tuple2 a1 c2 (t2tb2 x) y)
  (semicolon c2 c1 a1 (t2tb129 p) q))
  (exists ((b2 c))
  (and (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 b2))) p) (mem
  (tuple2 c1 c2) (Tuple2 c1 c2 (t2tb135 b2) y) q)))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 a b))) (q (set (tuple21 b d))) (x a) (y d))
  (= (mem (tuple2 a1 d1) (Tuple2 a1 d1 (t2tb2 x) (t2tb694 y))
  (semicolon d1 b1 a1 (t2tb11 p) (t2tb687 q)))
  (exists ((b2 b))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 b2))) p) (mem23
  (tb2t692 (Tuple2 b1 d1 (t2tb14 b2) (t2tb694 y))) q))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 a b))) (q (set (tuple21 b c))) (x a) (y c))
  (= (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y)))
  (tb2t129 (semicolon c1 b1 a1 (t2tb11 p) (t2tb131 q))))
  (exists ((b2 b))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 b2))) p) (mem
  (tuple2 b1 c1) (Tuple2 b1 c1 (t2tb14 b2) (t2tb135 y)) (t2tb131 q)))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 a b))) (q (set (tuple21 b b))) (x a) (y b))
  (= (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y)))
  (tb2t11 (semicolon b1 b1 a1 (t2tb11 p) (t2tb35 q))))
  (exists ((b2 b))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 b2))) p) (mem
  (tuple2 b1 b1) (Tuple2 b1 b1 (t2tb14 b2) (t2tb14 y)) (t2tb35 q)))))))

;; mem_semicolon
  (assert
  (forall ((c2 ty))
  (forall ((p (set (tuple21 a b))) (q uni) (x a) (y uni))
  (= (mem (tuple2 a1 c2) (Tuple2 a1 c2 (t2tb2 x) y)
  (semicolon c2 b1 a1 (t2tb11 p) q))
  (exists ((b2 b))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 b2))) p) (mem
  (tuple2 b1 c2) (Tuple2 b1 c2 (t2tb14 b2) y) q)))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 a a))) (q (set (tuple21 a c))) (x a) (y c))
  (= (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y)))
  (tb2t129 (semicolon c1 a1 a1 (t2tb4 p) (t2tb129 q))))
  (exists ((b2 a))
  (and (mem (tuple2 a1 a1) (Tuple2 a1 a1 (t2tb2 x) (t2tb2 b2)) (t2tb4 p))
  (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 b2) (t2tb135 y))) q))))))

;; mem_semicolon
  (assert
  (forall ((p (set (tuple21 a a))) (q (set (tuple21 a b))) (x a) (y b))
  (= (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y)))
  (tb2t11 (semicolon b1 a1 a1 (t2tb4 p) (t2tb11 q))))
  (exists ((b2 a))
  (and (mem (tuple2 a1 a1) (Tuple2 a1 a1 (t2tb2 x) (t2tb2 b2)) (t2tb4 p))
  (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 b2) (t2tb14 y))) q))))))

;; mem_semicolon
  (assert
  (forall ((a2 ty) (b2 ty) (c2 ty))
  (forall ((p uni) (q uni) (x uni) (y uni))
  (and
  (=> (mem (tuple2 a2 c2) (Tuple2 a2 c2 x y) (semicolon c2 b2 a2 p q))
  (exists ((b3 uni))
  (and (sort b2 b3)
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x b3) p) (mem (tuple2 b2 c2)
  (Tuple2 b2 c2 b3 y) q)))))
  (=>
  (exists ((b3 uni))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x b3) p) (mem (tuple2 b2 c2)
  (Tuple2 b2 c2 b3 y) q))) (mem (tuple2 a2 c2) (Tuple2 a2 c2 x y)
  (semicolon c2 b2 a2 p q)))))))

(declare-fun semicolon_back (ty ty ty uni uni) uni)

;; semicolon_back_sort
  (assert
  (forall ((a2 ty) (b2 ty) (c2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (tuple2 a2 c2))
  (semicolon_back c2 b2 a2 x x1)))))

;; semicolon_back
  (assert
  (forall ((a2 ty) (b2 ty) (c2 ty))
  (forall ((p uni) (q uni))
  (= (semicolon_back c2 b2 a2 q p) (semicolon c2 b2 a2 p q)))))

(declare-fun id (ty uni) uni)

;; id_sort
  (assert
  (forall ((a2 ty))
  (forall ((x uni)) (sort (set1 (tuple2 a2 a2)) (id a2 x)))))

;; mem_id
  (assert
  (forall ((u (set (tuple21 (tuple21 a b) (tuple21 c d))))
  (x (tuple21 (tuple21 a b) (tuple21 c d))) (y (tuple21 (tuple21 a b)
  (tuple21 c d))))
  (= (mem
  (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1))
  (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)))
  (Tuple2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1))
  (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) (t2tb880 x) (t2tb880 y))
  (id (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) (t2tb879 u)))
  (and (mem50 x u) (= x y)))))

;; mem_id
  (assert
  (forall ((u (set (set (tuple21 b d)))) (x (set (tuple21 b d)))
  (y (set (tuple21 b d))))
  (= (mem (tuple2 (set1 (tuple2 b1 d1)) (set1 (tuple2 b1 d1)))
  (Tuple2 (set1 (tuple2 b1 d1)) (set1 (tuple2 b1 d1)) (t2tb687 x)
  (t2tb687 y)) (id (set1 (tuple2 b1 d1)) (t2tb906 u)))
  (and (mem33 x u) (= x y)))))

;; mem_id
  (assert
  (forall ((u (set (tuple21 b d))) (x (tuple21 b d)) (y (tuple21 b d)))
  (= (mem (tuple2 (tuple2 b1 d1) (tuple2 b1 d1))
  (Tuple2 (tuple2 b1 d1) (tuple2 b1 d1) (t2tb692 x) (t2tb692 y))
  (id (tuple2 b1 d1) (t2tb687 u))) (and (mem23 x u) (= x y)))))

;; mem_id
  (assert
  (forall ((u (set d)) (x d) (y d))
  (= (mem (tuple2 d1 d1) (Tuple2 d1 d1 (t2tb694 x) (t2tb694 y))
  (id d1 (t2tb690 u))) (and (mem20 x u) (= x y)))))

;; mem_id
  (assert
  (forall ((u (set (set (tuple21 a c)))) (x (set (tuple21 a c)))
  (y (set (tuple21 a c))))
  (= (mem (tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 a1 c1)))
  (Tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 a1 c1)) (t2tb129 x)
  (t2tb129 y)) (id (set1 (tuple2 a1 c1)) (t2tb128 u)))
  (and (mem11 x u) (= x y)))))

;; mem_id
  (assert
  (forall ((u (set (tuple21 a c))) (x (tuple21 a c)) (y (tuple21 a c)))
  (= (mem (tuple2 (tuple2 a1 c1) (tuple2 a1 c1))
  (Tuple2 (tuple2 a1 c1) (tuple2 a1 c1) (t2tb133 x) (t2tb133 y))
  (id (tuple2 a1 c1) (t2tb129 u))) (and (mem10 x u) (= x y)))))

;; mem_id
  (assert
  (forall ((u (set c)) (x c) (y c))
  (= (mem (tuple2 c1 c1) (Tuple2 c1 c1 (t2tb135 x) (t2tb135 y))
  (id c1 (t2tb132 u))) (and (mem7 x u) (= x y)))))

;; mem_id
  (assert
  (forall ((u (set (tuple21 a b))) (x (tuple21 a b)) (y (tuple21 a b)))
  (= (mem (tuple2 (tuple2 a1 b1) (tuple2 a1 b1))
  (Tuple2 (tuple2 a1 b1) (tuple2 a1 b1) (t2tb13 x) (t2tb13 y))
  (id (tuple2 a1 b1) (t2tb11 u))) (and (mem3 x u) (= x y)))))

;; mem_id
  (assert
  (forall ((u (set b)) (x b) (y b))
  (= (mem (tuple2 b1 b1) (Tuple2 b1 b1 (t2tb14 x) (t2tb14 y))
  (id b1 (t2tb12 u))) (and (mem2 x u) (= x y)))))

;; mem_id
  (assert
  (forall ((u (set a)) (x a) (y a))
  (= (mem (tuple2 a1 a1) (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y))
  (id a1 (t2tb1 u))) (and (mem1 x u) (= x y)))))

;; mem_id
  (assert
  (forall ((a2 ty))
  (forall ((u uni) (x uni) (y uni))
  (=> (sort a2 x)
  (=> (sort a2 y)
  (= (mem (tuple2 a2 a2) (Tuple2 a2 a2 x y) (id a2 u))
  (and (mem a2 x u) (= x y))))))))

(declare-fun domain_restriction (ty ty uni uni) uni)

;; domain_restriction_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (tuple2 a2 b2))
  (domain_restriction b2 a2 x x1)))))

(declare-fun domain_restriction1 ((set a) (set (tuple21 a
  b))) (set (tuple21 a b)))

(declare-fun domain_restriction4 ((set a) (set (tuple21 a
  c))) (set (tuple21 a c)))

(declare-fun domain_restriction7 ((set b) (set (tuple21 b
  d))) (set (tuple21 b d)))

(declare-fun domain_restriction8 ((set (tuple21 a b))
  (set (tuple21 (tuple21 a b) (tuple21 c d)))) (set (tuple21 (tuple21 a b)
  (tuple21 c d))))

;; mem_domain_restriction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (tuple21 (tuple21 a b) (tuple21 c d))))
  (x (tuple21 (tuple21 a b) (tuple21 c d))) (y uni))
  (= (mem (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) b2)
  (Tuple2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) b2 (t2tb880 x) y)
  (domain_restriction b2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) (t2tb879 s)
  p))
  (and (mem (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) b2)
  (Tuple2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) b2 (t2tb880 x) y) p) (mem50
  x s))))))

;; mem_domain_restriction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (set (tuple21 b d)))) (x (set (tuple21 b d)))
  (y uni))
  (= (mem (tuple2 (set1 (tuple2 b1 d1)) b2)
  (Tuple2 (set1 (tuple2 b1 d1)) b2 (t2tb687 x) y)
  (domain_restriction b2 (set1 (tuple2 b1 d1)) (t2tb906 s) p))
  (and (mem (tuple2 (set1 (tuple2 b1 d1)) b2)
  (Tuple2 (set1 (tuple2 b1 d1)) b2 (t2tb687 x) y) p) (mem33 x s))))))

;; mem_domain_restriction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (tuple21 b d))) (x (tuple21 b d)) (y uni))
  (= (mem (tuple2 (tuple2 b1 d1) b2) (Tuple2 (tuple2 b1 d1) b2 (t2tb692 x) y)
  (domain_restriction b2 (tuple2 b1 d1) (t2tb687 s) p))
  (and (mem (tuple2 (tuple2 b1 d1) b2)
  (Tuple2 (tuple2 b1 d1) b2 (t2tb692 x) y) p) (mem23 x s))))))

;; mem_domain_restriction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set d)) (x d) (y uni))
  (= (mem (tuple2 d1 b2) (Tuple2 d1 b2 (t2tb694 x) y)
  (domain_restriction b2 d1 (t2tb690 s) p))
  (and (mem (tuple2 d1 b2) (Tuple2 d1 b2 (t2tb694 x) y) p) (mem20 x s))))))

;; mem_domain_restriction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (set (tuple21 a c)))) (x (set (tuple21 a c)))
  (y uni))
  (= (mem (tuple2 (set1 (tuple2 a1 c1)) b2)
  (Tuple2 (set1 (tuple2 a1 c1)) b2 (t2tb129 x) y)
  (domain_restriction b2 (set1 (tuple2 a1 c1)) (t2tb128 s) p))
  (and (mem (tuple2 (set1 (tuple2 a1 c1)) b2)
  (Tuple2 (set1 (tuple2 a1 c1)) b2 (t2tb129 x) y) p) (mem11 x s))))))

;; mem_domain_restriction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (tuple21 a c))) (x (tuple21 a c)) (y uni))
  (= (mem (tuple2 (tuple2 a1 c1) b2) (Tuple2 (tuple2 a1 c1) b2 (t2tb133 x) y)
  (domain_restriction b2 (tuple2 a1 c1) (t2tb129 s) p))
  (and (mem (tuple2 (tuple2 a1 c1) b2)
  (Tuple2 (tuple2 a1 c1) b2 (t2tb133 x) y) p) (mem10 x s))))))

;; mem_domain_restriction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set c)) (x c) (y uni))
  (= (mem (tuple2 c1 b2) (Tuple2 c1 b2 (t2tb135 x) y)
  (domain_restriction b2 c1 (t2tb132 s) p))
  (and (mem (tuple2 c1 b2) (Tuple2 c1 b2 (t2tb135 x) y) p) (mem7 x s))))))

;; mem_domain_restriction
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) (tuple21 c d)))) (s (set (tuple21 a
  b))) (x (tuple21 a b)) (y (tuple21 c d)))
  (= (mem50
  (tb2t880 (Tuple2 (tuple2 a1 b1) (tuple2 c1 d1) (t2tb13 x) (t2tb693 y)))
  (domain_restriction8 s p))
  (and (mem50
  (tb2t880 (Tuple2 (tuple2 a1 b1) (tuple2 c1 d1) (t2tb13 x) (t2tb693 y))) p)
  (mem3 x s)))))

;; mem_domain_restriction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (tuple21 a b))) (x (tuple21 a b)) (y uni))
  (= (mem (tuple2 (tuple2 a1 b1) b2) (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) y)
  (domain_restriction b2 (tuple2 a1 b1) (t2tb11 s) p))
  (and (mem (tuple2 (tuple2 a1 b1) b2)
  (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) y) p) (mem3 x s))))))

;; mem_domain_restriction
  (assert
  (forall ((p (set (tuple21 b d))) (s (set b)) (x b) (y d))
  (= (mem23 (tb2t692 (Tuple2 b1 d1 (t2tb14 x) (t2tb694 y)))
  (domain_restriction7 s p))
  (and (mem23 (tb2t692 (Tuple2 b1 d1 (t2tb14 x) (t2tb694 y))) p) (mem2 x s)))))

;; mem_domain_restriction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set b)) (x b) (y uni))
  (= (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) y)
  (domain_restriction b2 b1 (t2tb12 s) p))
  (and (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) y) p) (mem2 x s))))))

;; mem_domain_restriction
  (assert
  (forall ((p (set (tuple21 a c))) (s (set a)) (x a) (y c))
  (= (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y)))
  (domain_restriction4 s p))
  (and (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y))) p) (mem1 x s)))))

;; mem_domain_restriction
  (assert
  (forall ((p (set (tuple21 a b))) (s (set a)) (x a) (y b))
  (= (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y)))
  (domain_restriction1 s p))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y))) p) (mem1 x s)))))

;; mem_domain_restriction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set a)) (x a) (y uni))
  (= (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) y)
  (domain_restriction b2 a1 (t2tb1 s) p))
  (and (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) y) p) (mem1 x s))))))

;; mem_domain_restriction
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((p uni) (s uni) (x uni) (y uni))
  (= (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) (domain_restriction b2 a2 s p))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) p) (mem a2 x s))))))

(declare-fun range_restriction (ty ty uni uni) uni)

;; range_restriction_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (tuple2 a2 b2))
  (range_restriction b2 a2 x x1)))))

;; mem_range_restriction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (tuple21 (tuple21 a b) (tuple21 c d)))) (x uni)
  (y (tuple21 (tuple21 a b) (tuple21 c d))))
  (= (mem (tuple2 a2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)))
  (Tuple2 a2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) x (t2tb880 y))
  (range_restriction (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) a2 p (t2tb879 t)))
  (and (mem (tuple2 a2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)))
  (Tuple2 a2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) x (t2tb880 y)) p) (mem50
  y t))))))

;; mem_range_restriction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (set (tuple21 b d)))) (x uni) (y (set (tuple21 b
  d))))
  (= (mem (tuple2 a2 (set1 (tuple2 b1 d1)))
  (Tuple2 a2 (set1 (tuple2 b1 d1)) x (t2tb687 y))
  (range_restriction (set1 (tuple2 b1 d1)) a2 p (t2tb906 t)))
  (and (mem (tuple2 a2 (set1 (tuple2 b1 d1)))
  (Tuple2 a2 (set1 (tuple2 b1 d1)) x (t2tb687 y)) p) (mem33 y t))))))

;; mem_range_restriction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (tuple21 b d))) (x uni) (y (tuple21 b d)))
  (= (mem (tuple2 a2 (tuple2 b1 d1)) (Tuple2 a2 (tuple2 b1 d1) x (t2tb692 y))
  (range_restriction (tuple2 b1 d1) a2 p (t2tb687 t)))
  (and (mem (tuple2 a2 (tuple2 b1 d1))
  (Tuple2 a2 (tuple2 b1 d1) x (t2tb692 y)) p) (mem23 y t))))))

;; mem_range_restriction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set d)) (x uni) (y d))
  (= (mem (tuple2 a2 d1) (Tuple2 a2 d1 x (t2tb694 y))
  (range_restriction d1 a2 p (t2tb690 t)))
  (and (mem (tuple2 a2 d1) (Tuple2 a2 d1 x (t2tb694 y)) p) (mem20 y t))))))

;; mem_range_restriction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (set (tuple21 a c)))) (x uni) (y (set (tuple21 a
  c))))
  (= (mem (tuple2 a2 (set1 (tuple2 a1 c1)))
  (Tuple2 a2 (set1 (tuple2 a1 c1)) x (t2tb129 y))
  (range_restriction (set1 (tuple2 a1 c1)) a2 p (t2tb128 t)))
  (and (mem (tuple2 a2 (set1 (tuple2 a1 c1)))
  (Tuple2 a2 (set1 (tuple2 a1 c1)) x (t2tb129 y)) p) (mem11 y t))))))

;; mem_range_restriction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (tuple21 a c))) (x uni) (y (tuple21 a c)))
  (= (mem (tuple2 a2 (tuple2 a1 c1)) (Tuple2 a2 (tuple2 a1 c1) x (t2tb133 y))
  (range_restriction (tuple2 a1 c1) a2 p (t2tb129 t)))
  (and (mem (tuple2 a2 (tuple2 a1 c1))
  (Tuple2 a2 (tuple2 a1 c1) x (t2tb133 y)) p) (mem10 y t))))))

;; mem_range_restriction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set c)) (x uni) (y c))
  (= (mem (tuple2 a2 c1) (Tuple2 a2 c1 x (t2tb135 y))
  (range_restriction c1 a2 p (t2tb132 t)))
  (and (mem (tuple2 a2 c1) (Tuple2 a2 c1 x (t2tb135 y)) p) (mem7 y t))))))

;; mem_range_restriction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (tuple21 a b))) (x uni) (y (tuple21 a b)))
  (= (mem (tuple2 a2 (tuple2 a1 b1)) (Tuple2 a2 (tuple2 a1 b1) x (t2tb13 y))
  (range_restriction (tuple2 a1 b1) a2 p (t2tb11 t)))
  (and (mem (tuple2 a2 (tuple2 a1 b1))
  (Tuple2 a2 (tuple2 a1 b1) x (t2tb13 y)) p) (mem3 y t))))))

;; mem_range_restriction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set b)) (x uni) (y b))
  (= (mem (tuple2 a2 b1) (Tuple2 a2 b1 x (t2tb14 y))
  (range_restriction b1 a2 p (t2tb12 t)))
  (and (mem (tuple2 a2 b1) (Tuple2 a2 b1 x (t2tb14 y)) p) (mem2 y t))))))

;; mem_range_restriction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set a)) (x uni) (y a))
  (= (mem (tuple2 a2 a1) (Tuple2 a2 a1 x (t2tb2 y))
  (range_restriction a1 a2 p (t2tb1 t)))
  (and (mem (tuple2 a2 a1) (Tuple2 a2 a1 x (t2tb2 y)) p) (mem1 y t))))))

;; mem_range_restriction
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) (tuple21 c d)))) (t (set (tuple21 c
  d))) (x (tuple21 a b)) (y (tuple21 c d)))
  (= (mem50
  (tb2t880 (Tuple2 (tuple2 a1 b1) (tuple2 c1 d1) (t2tb13 x) (t2tb693 y)))
  (tb2t879
  (range_restriction (tuple2 c1 d1) (tuple2 a1 b1) (t2tb879 p) (t2tb689 t))))
  (and (mem50
  (tb2t880 (Tuple2 (tuple2 a1 b1) (tuple2 c1 d1) (t2tb13 x) (t2tb693 y))) p)
  (mem (tuple2 c1 d1) (t2tb693 y) (t2tb689 t))))))

;; mem_range_restriction
  (assert
  (forall ((p (set (tuple21 b d))) (t (set d)) (x b) (y d))
  (= (mem23 (tb2t692 (Tuple2 b1 d1 (t2tb14 x) (t2tb694 y)))
  (tb2t687 (range_restriction d1 b1 (t2tb687 p) (t2tb690 t))))
  (and (mem23 (tb2t692 (Tuple2 b1 d1 (t2tb14 x) (t2tb694 y))) p) (mem20 y t)))))

;; mem_range_restriction
  (assert
  (forall ((p (set (tuple21 a c))) (t (set c)) (x a) (y c))
  (= (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y)))
  (tb2t129 (range_restriction c1 a1 (t2tb129 p) (t2tb132 t))))
  (and (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y))) p) (mem7 y t)))))

;; mem_range_restriction
  (assert
  (forall ((p (set (tuple21 a b))) (t (set b)) (x a) (y b))
  (= (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y)))
  (tb2t11 (range_restriction b1 a1 (t2tb11 p) (t2tb12 t))))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y))) p) (mem2 y t)))))

;; mem_range_restriction
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((p uni) (t uni) (x uni) (y uni))
  (= (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) (range_restriction b2 a2 p t))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) p) (mem b2 y t))))))

(declare-fun domain_substraction (ty ty uni uni) uni)

;; domain_substraction_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (tuple2 a2 b2))
  (domain_substraction b2 a2 x x1)))))

;; mem_domain_substraction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (tuple21 (tuple21 a b) (tuple21 c d))))
  (x (tuple21 (tuple21 a b) (tuple21 c d))) (y uni))
  (= (mem (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) b2)
  (Tuple2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) b2 (t2tb880 x) y)
  (domain_substraction b2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) (t2tb879 s)
  p))
  (and (mem (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) b2)
  (Tuple2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) b2 (t2tb880 x) y) p)
  (not (mem50 x s)))))))

;; mem_domain_substraction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (set (tuple21 b d)))) (x (set (tuple21 b d)))
  (y uni))
  (= (mem (tuple2 (set1 (tuple2 b1 d1)) b2)
  (Tuple2 (set1 (tuple2 b1 d1)) b2 (t2tb687 x) y)
  (domain_substraction b2 (set1 (tuple2 b1 d1)) (t2tb906 s) p))
  (and (mem (tuple2 (set1 (tuple2 b1 d1)) b2)
  (Tuple2 (set1 (tuple2 b1 d1)) b2 (t2tb687 x) y) p) (not (mem33 x s)))))))

;; mem_domain_substraction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (tuple21 b d))) (x (tuple21 b d)) (y uni))
  (= (mem (tuple2 (tuple2 b1 d1) b2) (Tuple2 (tuple2 b1 d1) b2 (t2tb692 x) y)
  (domain_substraction b2 (tuple2 b1 d1) (t2tb687 s) p))
  (and (mem (tuple2 (tuple2 b1 d1) b2)
  (Tuple2 (tuple2 b1 d1) b2 (t2tb692 x) y) p) (not (mem23 x s)))))))

;; mem_domain_substraction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set d)) (x d) (y uni))
  (= (mem (tuple2 d1 b2) (Tuple2 d1 b2 (t2tb694 x) y)
  (domain_substraction b2 d1 (t2tb690 s) p))
  (and (mem (tuple2 d1 b2) (Tuple2 d1 b2 (t2tb694 x) y) p) (not (mem20 x s)))))))

;; mem_domain_substraction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (set (tuple21 a c)))) (x (set (tuple21 a c)))
  (y uni))
  (= (mem (tuple2 (set1 (tuple2 a1 c1)) b2)
  (Tuple2 (set1 (tuple2 a1 c1)) b2 (t2tb129 x) y)
  (domain_substraction b2 (set1 (tuple2 a1 c1)) (t2tb128 s) p))
  (and (mem (tuple2 (set1 (tuple2 a1 c1)) b2)
  (Tuple2 (set1 (tuple2 a1 c1)) b2 (t2tb129 x) y) p) (not (mem11 x s)))))))

;; mem_domain_substraction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (tuple21 a c))) (x (tuple21 a c)) (y uni))
  (= (mem (tuple2 (tuple2 a1 c1) b2) (Tuple2 (tuple2 a1 c1) b2 (t2tb133 x) y)
  (domain_substraction b2 (tuple2 a1 c1) (t2tb129 s) p))
  (and (mem (tuple2 (tuple2 a1 c1) b2)
  (Tuple2 (tuple2 a1 c1) b2 (t2tb133 x) y) p) (not (mem10 x s)))))))

;; mem_domain_substraction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set c)) (x c) (y uni))
  (= (mem (tuple2 c1 b2) (Tuple2 c1 b2 (t2tb135 x) y)
  (domain_substraction b2 c1 (t2tb132 s) p))
  (and (mem (tuple2 c1 b2) (Tuple2 c1 b2 (t2tb135 x) y) p) (not (mem7 x s)))))))

;; mem_domain_substraction
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) (tuple21 c d)))) (s (set (tuple21 a
  b))) (x (tuple21 a b)) (y (tuple21 c d)))
  (= (mem50
  (tb2t880 (Tuple2 (tuple2 a1 b1) (tuple2 c1 d1) (t2tb13 x) (t2tb693 y)))
  (tb2t879
  (domain_substraction (tuple2 c1 d1) (tuple2 a1 b1) (t2tb11 s) (t2tb879 p))))
  (and (mem50
  (tb2t880 (Tuple2 (tuple2 a1 b1) (tuple2 c1 d1) (t2tb13 x) (t2tb693 y))) p)
  (not (mem3 x s))))))

;; mem_domain_substraction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set (tuple21 a b))) (x (tuple21 a b)) (y uni))
  (= (mem (tuple2 (tuple2 a1 b1) b2) (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) y)
  (domain_substraction b2 (tuple2 a1 b1) (t2tb11 s) p))
  (and (mem (tuple2 (tuple2 a1 b1) b2)
  (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) y) p) (not (mem3 x s)))))))

;; mem_domain_substraction
  (assert
  (forall ((p (set (tuple21 b d))) (s (set b)) (x b) (y d))
  (= (mem23 (tb2t692 (Tuple2 b1 d1 (t2tb14 x) (t2tb694 y)))
  (tb2t687 (domain_substraction d1 b1 (t2tb12 s) (t2tb687 p))))
  (and (mem23 (tb2t692 (Tuple2 b1 d1 (t2tb14 x) (t2tb694 y))) p)
  (not (mem2 x s))))))

;; mem_domain_substraction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set b)) (x b) (y uni))
  (= (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) y)
  (domain_substraction b2 b1 (t2tb12 s) p))
  (and (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) y) p) (not (mem2 x s)))))))

;; mem_domain_substraction
  (assert
  (forall ((p (set (tuple21 a c))) (s (set a)) (x a) (y c))
  (= (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y)))
  (tb2t129 (domain_substraction c1 a1 (t2tb1 s) (t2tb129 p))))
  (and (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y))) p)
  (not (mem1 x s))))))

;; mem_domain_substraction
  (assert
  (forall ((p (set (tuple21 a b))) (s (set a)) (x a) (y b))
  (= (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y)))
  (tb2t11 (domain_substraction b1 a1 (t2tb1 s) (t2tb11 p))))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y))) p)
  (not (mem1 x s))))))

;; mem_domain_substraction
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (s (set a)) (x a) (y uni))
  (= (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) y)
  (domain_substraction b2 a1 (t2tb1 s) p))
  (and (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) y) p) (not (mem1 x s)))))))

;; mem_domain_substraction
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((p uni) (s uni) (x uni) (y uni))
  (= (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) (domain_substraction b2 a2 s p))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) p) (not (mem a2 x s)))))))

(declare-fun range_substraction (ty ty uni uni) uni)

;; range_substraction_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (tuple2 a2 b2))
  (range_substraction b2 a2 x x1)))))

;; mem_range_substraction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (tuple21 (tuple21 a b) (tuple21 c d)))) (x uni)
  (y (tuple21 (tuple21 a b) (tuple21 c d))))
  (= (mem (tuple2 a2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)))
  (Tuple2 a2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) x (t2tb880 y))
  (range_substraction (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) a2 p
  (t2tb879 t)))
  (and (mem (tuple2 a2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)))
  (Tuple2 a2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) x (t2tb880 y)) p)
  (not (mem50 y t)))))))

;; mem_range_substraction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (set (tuple21 b d)))) (x uni) (y (set (tuple21 b
  d))))
  (= (mem (tuple2 a2 (set1 (tuple2 b1 d1)))
  (Tuple2 a2 (set1 (tuple2 b1 d1)) x (t2tb687 y))
  (range_substraction (set1 (tuple2 b1 d1)) a2 p (t2tb906 t)))
  (and (mem (tuple2 a2 (set1 (tuple2 b1 d1)))
  (Tuple2 a2 (set1 (tuple2 b1 d1)) x (t2tb687 y)) p) (not (mem33 y t)))))))

;; mem_range_substraction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (tuple21 b d))) (x uni) (y (tuple21 b d)))
  (= (mem (tuple2 a2 (tuple2 b1 d1)) (Tuple2 a2 (tuple2 b1 d1) x (t2tb692 y))
  (range_substraction (tuple2 b1 d1) a2 p (t2tb687 t)))
  (and (mem (tuple2 a2 (tuple2 b1 d1))
  (Tuple2 a2 (tuple2 b1 d1) x (t2tb692 y)) p) (not (mem23 y t)))))))

;; mem_range_substraction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set d)) (x uni) (y d))
  (= (mem (tuple2 a2 d1) (Tuple2 a2 d1 x (t2tb694 y))
  (range_substraction d1 a2 p (t2tb690 t)))
  (and (mem (tuple2 a2 d1) (Tuple2 a2 d1 x (t2tb694 y)) p) (not (mem20 y t)))))))

;; mem_range_substraction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (set (tuple21 a c)))) (x uni) (y (set (tuple21 a
  c))))
  (= (mem (tuple2 a2 (set1 (tuple2 a1 c1)))
  (Tuple2 a2 (set1 (tuple2 a1 c1)) x (t2tb129 y))
  (range_substraction (set1 (tuple2 a1 c1)) a2 p (t2tb128 t)))
  (and (mem (tuple2 a2 (set1 (tuple2 a1 c1)))
  (Tuple2 a2 (set1 (tuple2 a1 c1)) x (t2tb129 y)) p) (not (mem11 y t)))))))

;; mem_range_substraction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (tuple21 a c))) (x uni) (y (tuple21 a c)))
  (= (mem (tuple2 a2 (tuple2 a1 c1)) (Tuple2 a2 (tuple2 a1 c1) x (t2tb133 y))
  (range_substraction (tuple2 a1 c1) a2 p (t2tb129 t)))
  (and (mem (tuple2 a2 (tuple2 a1 c1))
  (Tuple2 a2 (tuple2 a1 c1) x (t2tb133 y)) p) (not (mem10 y t)))))))

;; mem_range_substraction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set c)) (x uni) (y c))
  (= (mem (tuple2 a2 c1) (Tuple2 a2 c1 x (t2tb135 y))
  (range_substraction c1 a2 p (t2tb132 t)))
  (and (mem (tuple2 a2 c1) (Tuple2 a2 c1 x (t2tb135 y)) p) (not (mem7 y t)))))))

;; mem_range_substraction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set (tuple21 a b))) (x uni) (y (tuple21 a b)))
  (= (mem (tuple2 a2 (tuple2 a1 b1)) (Tuple2 a2 (tuple2 a1 b1) x (t2tb13 y))
  (range_substraction (tuple2 a1 b1) a2 p (t2tb11 t)))
  (and (mem (tuple2 a2 (tuple2 a1 b1))
  (Tuple2 a2 (tuple2 a1 b1) x (t2tb13 y)) p) (not (mem3 y t)))))))

;; mem_range_substraction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set b)) (x uni) (y b))
  (= (mem (tuple2 a2 b1) (Tuple2 a2 b1 x (t2tb14 y))
  (range_substraction b1 a2 p (t2tb12 t)))
  (and (mem (tuple2 a2 b1) (Tuple2 a2 b1 x (t2tb14 y)) p) (not (mem2 y t)))))))

;; mem_range_substraction
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (t (set a)) (x uni) (y a))
  (= (mem (tuple2 a2 a1) (Tuple2 a2 a1 x (t2tb2 y))
  (range_substraction a1 a2 p (t2tb1 t)))
  (and (mem (tuple2 a2 a1) (Tuple2 a2 a1 x (t2tb2 y)) p) (not (mem1 y t)))))))

;; mem_range_substraction
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) (tuple21 c d)))) (t (set (tuple21 c
  d))) (x (tuple21 a b)) (y (tuple21 c d)))
  (= (mem50
  (tb2t880 (Tuple2 (tuple2 a1 b1) (tuple2 c1 d1) (t2tb13 x) (t2tb693 y)))
  (tb2t879
  (range_substraction (tuple2 c1 d1) (tuple2 a1 b1) (t2tb879 p) (t2tb689 t))))
  (and (mem50
  (tb2t880 (Tuple2 (tuple2 a1 b1) (tuple2 c1 d1) (t2tb13 x) (t2tb693 y))) p)
  (not (mem (tuple2 c1 d1) (t2tb693 y) (t2tb689 t)))))))

;; mem_range_substraction
  (assert
  (forall ((p (set (tuple21 b d))) (t (set d)) (x b) (y d))
  (= (mem23 (tb2t692 (Tuple2 b1 d1 (t2tb14 x) (t2tb694 y)))
  (tb2t687 (range_substraction d1 b1 (t2tb687 p) (t2tb690 t))))
  (and (mem23 (tb2t692 (Tuple2 b1 d1 (t2tb14 x) (t2tb694 y))) p)
  (not (mem20 y t))))))

;; mem_range_substraction
  (assert
  (forall ((p (set (tuple21 a c))) (t (set c)) (x a) (y c))
  (= (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y)))
  (tb2t129 (range_substraction c1 a1 (t2tb129 p) (t2tb132 t))))
  (and (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y))) p)
  (not (mem7 y t))))))

;; mem_range_substraction
  (assert
  (forall ((p (set (tuple21 a b))) (t (set b)) (x a) (y b))
  (= (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y)))
  (tb2t11 (range_substraction b1 a1 (t2tb11 p) (t2tb12 t))))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y))) p)
  (not (mem2 y t))))))

;; mem_range_substraction
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((p uni) (t uni) (x uni) (y uni))
  (= (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) (range_substraction b2 a2 p t))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) p) (not (mem b2 y t)))))))

(declare-fun image (ty ty uni uni) uni)

;; image_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 b2) (image b2 a2 x x1)))))

;; mem_image
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (w uni) (x (tuple21 (tuple21 a b) (tuple21 c d))))
  (and
  (=> (mem50 x
  (tb2t879 (image (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) a2 p w)))
  (exists ((a3 uni))
  (and (sort a2 a3)
  (and (mem a2 a3 w) (mem (tuple2 a2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)))
  (Tuple2 a2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) a3 (t2tb880 x)) p)))))
  (=>
  (exists ((a3 uni))
  (and (mem a2 a3 w) (mem (tuple2 a2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)))
  (Tuple2 a2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) a3 (t2tb880 x)) p)))
  (mem50 x (tb2t879 (image (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) a2 p w))))))))

;; mem_image
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (w uni) (x (set (tuple21 b d))))
  (and
  (=> (mem33 x (tb2t906 (image (set1 (tuple2 b1 d1)) a2 p w)))
  (exists ((a3 uni))
  (and (sort a2 a3)
  (and (mem a2 a3 w) (mem (tuple2 a2 (set1 (tuple2 b1 d1)))
  (Tuple2 a2 (set1 (tuple2 b1 d1)) a3 (t2tb687 x)) p)))))
  (=>
  (exists ((a3 uni))
  (and (mem a2 a3 w) (mem (tuple2 a2 (set1 (tuple2 b1 d1)))
  (Tuple2 a2 (set1 (tuple2 b1 d1)) a3 (t2tb687 x)) p))) (mem33 x
  (tb2t906 (image (set1 (tuple2 b1 d1)) a2 p w))))))))

;; mem_image
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (w uni) (x (tuple21 b d)))
  (and
  (=> (mem23 x (tb2t687 (image (tuple2 b1 d1) a2 p w)))
  (exists ((a3 uni))
  (and (sort a2 a3)
  (and (mem a2 a3 w) (mem (tuple2 a2 (tuple2 b1 d1))
  (Tuple2 a2 (tuple2 b1 d1) a3 (t2tb692 x)) p)))))
  (=>
  (exists ((a3 uni))
  (and (mem a2 a3 w) (mem (tuple2 a2 (tuple2 b1 d1))
  (Tuple2 a2 (tuple2 b1 d1) a3 (t2tb692 x)) p))) (mem23 x
  (tb2t687 (image (tuple2 b1 d1) a2 p w))))))))

;; mem_image
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (w uni) (x d))
  (and
  (=> (mem20 x (tb2t690 (image d1 a2 p w)))
  (exists ((a3 uni))
  (and (sort a2 a3)
  (and (mem a2 a3 w) (mem (tuple2 a2 d1) (Tuple2 a2 d1 a3 (t2tb694 x)) p)))))
  (=>
  (exists ((a3 uni))
  (and (mem a2 a3 w) (mem (tuple2 a2 d1) (Tuple2 a2 d1 a3 (t2tb694 x)) p)))
  (mem20 x (tb2t690 (image d1 a2 p w))))))))

;; mem_image
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (w uni) (x (set (tuple21 a c))))
  (and
  (=> (mem11 x (tb2t128 (image (set1 (tuple2 a1 c1)) a2 p w)))
  (exists ((a3 uni))
  (and (sort a2 a3)
  (and (mem a2 a3 w) (mem (tuple2 a2 (set1 (tuple2 a1 c1)))
  (Tuple2 a2 (set1 (tuple2 a1 c1)) a3 (t2tb129 x)) p)))))
  (=>
  (exists ((a3 uni))
  (and (mem a2 a3 w) (mem (tuple2 a2 (set1 (tuple2 a1 c1)))
  (Tuple2 a2 (set1 (tuple2 a1 c1)) a3 (t2tb129 x)) p))) (mem11 x
  (tb2t128 (image (set1 (tuple2 a1 c1)) a2 p w))))))))

;; mem_image
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (w uni) (x (tuple21 a c)))
  (and
  (=> (mem10 x (tb2t129 (image (tuple2 a1 c1) a2 p w)))
  (exists ((a3 uni))
  (and (sort a2 a3)
  (and (mem a2 a3 w) (mem (tuple2 a2 (tuple2 a1 c1))
  (Tuple2 a2 (tuple2 a1 c1) a3 (t2tb133 x)) p)))))
  (=>
  (exists ((a3 uni))
  (and (mem a2 a3 w) (mem (tuple2 a2 (tuple2 a1 c1))
  (Tuple2 a2 (tuple2 a1 c1) a3 (t2tb133 x)) p))) (mem10 x
  (tb2t129 (image (tuple2 a1 c1) a2 p w))))))))

;; mem_image
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (w uni) (x c))
  (and
  (=> (mem7 x (tb2t132 (image c1 a2 p w)))
  (exists ((a3 uni))
  (and (sort a2 a3)
  (and (mem a2 a3 w) (mem (tuple2 a2 c1) (Tuple2 a2 c1 a3 (t2tb135 x)) p)))))
  (=>
  (exists ((a3 uni))
  (and (mem a2 a3 w) (mem (tuple2 a2 c1) (Tuple2 a2 c1 a3 (t2tb135 x)) p)))
  (mem7 x (tb2t132 (image c1 a2 p w))))))))

;; mem_image
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (w uni) (x (tuple21 a b)))
  (and
  (=> (mem3 x (tb2t11 (image (tuple2 a1 b1) a2 p w)))
  (exists ((a3 uni))
  (and (sort a2 a3)
  (and (mem a2 a3 w) (mem (tuple2 a2 (tuple2 a1 b1))
  (Tuple2 a2 (tuple2 a1 b1) a3 (t2tb13 x)) p)))))
  (=>
  (exists ((a3 uni))
  (and (mem a2 a3 w) (mem (tuple2 a2 (tuple2 a1 b1))
  (Tuple2 a2 (tuple2 a1 b1) a3 (t2tb13 x)) p))) (mem3 x
  (tb2t11 (image (tuple2 a1 b1) a2 p w))))))))

;; mem_image
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (w uni) (x b))
  (and
  (=> (mem2 x (tb2t12 (image b1 a2 p w)))
  (exists ((a3 uni))
  (and (sort a2 a3)
  (and (mem a2 a3 w) (mem (tuple2 a2 b1) (Tuple2 a2 b1 a3 (t2tb14 x)) p)))))
  (=>
  (exists ((a3 uni))
  (and (mem a2 a3 w) (mem (tuple2 a2 b1) (Tuple2 a2 b1 a3 (t2tb14 x)) p)))
  (mem2 x (tb2t12 (image b1 a2 p w))))))))

;; mem_image
  (assert
  (forall ((a2 ty))
  (forall ((p uni) (w uni) (x a))
  (and
  (=> (mem1 x (tb2t1 (image a1 a2 p w)))
  (exists ((a3 uni))
  (and (sort a2 a3)
  (and (mem a2 a3 w) (mem (tuple2 a2 a1) (Tuple2 a2 a1 a3 (t2tb2 x)) p)))))
  (=>
  (exists ((a3 uni))
  (and (mem a2 a3 w) (mem (tuple2 a2 a1) (Tuple2 a2 a1 a3 (t2tb2 x)) p)))
  (mem1 x (tb2t1 (image a1 a2 p w))))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 (tuple21 a b) (tuple21 c d))
  (tuple21 (tuple21 a b) (tuple21 c d))))) (w (set (tuple21 (tuple21 a b)
  (tuple21 c d)))) (x (tuple21 (tuple21 a b) (tuple21 c d))))
  (= (mem50 x
  (tb2t879
  (image (tuple2 (tuple2 a1 b1) (tuple2 c1 d1))
  (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) (t2tb5070 p) (t2tb879 w))))
  (exists ((a2 (tuple21 (tuple21 a b) (tuple21 c d))))
  (and (mem50 a2 w) (mem
  (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1))
  (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)))
  (Tuple2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1))
  (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) (t2tb880 a2) (t2tb880 x))
  (t2tb5070 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 (tuple21 a b) (tuple21 c d))
  (set (tuple21 b d))))) (w (set (tuple21 (tuple21 a b) (tuple21 c d))))
  (x (set (tuple21 b d))))
  (= (mem33 x
  (tb2t906
  (image (set1 (tuple2 b1 d1)) (tuple2 (tuple2 a1 b1) (tuple2 c1 d1))
  (t2tb5072 p) (t2tb879 w))))
  (exists ((a2 (tuple21 (tuple21 a b) (tuple21 c d))))
  (and (mem50 a2 w) (mem
  (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) (set1 (tuple2 b1 d1)))
  (Tuple2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) (set1 (tuple2 b1 d1))
  (t2tb880 a2) (t2tb687 x)) (t2tb5072 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 (tuple21 a b) (tuple21 c d)) (tuple21 b
  d)))) (w (set (tuple21 (tuple21 a b) (tuple21 c d)))) (x (tuple21 b d)))
  (= (mem23 x
  (tb2t687
  (image (tuple2 b1 d1) (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) (t2tb5074 p)
  (t2tb879 w))))
  (exists ((a2 (tuple21 (tuple21 a b) (tuple21 c d))))
  (and (mem50 a2 w) (mem
  (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) (tuple2 b1 d1))
  (Tuple2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) (tuple2 b1 d1) (t2tb880 a2)
  (t2tb692 x)) (t2tb5074 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 (tuple21 a b) (tuple21 c d)) d)))
  (w (set (tuple21 (tuple21 a b) (tuple21 c d)))) (x d))
  (= (mem20 x
  (tb2t690
  (image d1 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) (t2tb5076 p) (t2tb879 w))))
  (exists ((a2 (tuple21 (tuple21 a b) (tuple21 c d))))
  (and (mem50 a2 w) (mem (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) d1)
  (Tuple2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) d1 (t2tb880 a2) (t2tb694 x))
  (t2tb5076 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 (tuple21 a b) (tuple21 c d))
  (set (tuple21 a c))))) (w (set (tuple21 (tuple21 a b) (tuple21 c d))))
  (x (set (tuple21 a c))))
  (= (mem11 x
  (tb2t128
  (image (set1 (tuple2 a1 c1)) (tuple2 (tuple2 a1 b1) (tuple2 c1 d1))
  (t2tb5078 p) (t2tb879 w))))
  (exists ((a2 (tuple21 (tuple21 a b) (tuple21 c d))))
  (and (mem50 a2 w) (mem
  (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) (set1 (tuple2 a1 c1)))
  (Tuple2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) (set1 (tuple2 a1 c1))
  (t2tb880 a2) (t2tb129 x)) (t2tb5078 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 (tuple21 a b) (tuple21 c d)) (tuple21 a
  c)))) (w (set (tuple21 (tuple21 a b) (tuple21 c d)))) (x (tuple21 a c)))
  (= (mem10 x
  (tb2t129
  (image (tuple2 a1 c1) (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) (t2tb5080 p)
  (t2tb879 w))))
  (exists ((a2 (tuple21 (tuple21 a b) (tuple21 c d))))
  (and (mem50 a2 w) (mem
  (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) (tuple2 a1 c1))
  (Tuple2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) (tuple2 a1 c1) (t2tb880 a2)
  (t2tb133 x)) (t2tb5080 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 (tuple21 a b) (tuple21 c d)) c)))
  (w (set (tuple21 (tuple21 a b) (tuple21 c d)))) (x c))
  (= (mem7 x
  (tb2t132
  (image c1 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) (t2tb5082 p) (t2tb879 w))))
  (exists ((a2 (tuple21 (tuple21 a b) (tuple21 c d))))
  (and (mem50 a2 w) (mem (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) c1)
  (Tuple2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) c1 (t2tb880 a2) (t2tb135 x))
  (t2tb5082 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 (tuple21 a b) (tuple21 c d)) (tuple21 a
  b)))) (w (set (tuple21 (tuple21 a b) (tuple21 c d)))) (x (tuple21 a b)))
  (= (mem3 x
  (tb2t11
  (image (tuple2 a1 b1) (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) (t2tb5084 p)
  (t2tb879 w))))
  (exists ((a2 (tuple21 (tuple21 a b) (tuple21 c d))))
  (and (mem50 a2 w) (mem
  (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) (tuple2 a1 b1))
  (Tuple2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) (tuple2 a1 b1) (t2tb880 a2)
  (t2tb13 x)) (t2tb5084 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 (tuple21 a b) (tuple21 c d)) b)))
  (w (set (tuple21 (tuple21 a b) (tuple21 c d)))) (x b))
  (= (mem2 x
  (tb2t12
  (image b1 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) (t2tb5086 p) (t2tb879 w))))
  (exists ((a2 (tuple21 (tuple21 a b) (tuple21 c d))))
  (and (mem50 a2 w) (mem (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) b1)
  (Tuple2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) b1 (t2tb880 a2) (t2tb14 x))
  (t2tb5086 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 (tuple21 a b) (tuple21 c d)) a)))
  (w (set (tuple21 (tuple21 a b) (tuple21 c d)))) (x a))
  (= (mem1 x
  (tb2t1
  (image a1 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) (t2tb5088 p) (t2tb879 w))))
  (exists ((a2 (tuple21 (tuple21 a b) (tuple21 c d))))
  (and (mem50 a2 w) (mem (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) a1)
  (Tuple2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) a1 (t2tb880 a2) (t2tb2 x))
  (t2tb5088 p)))))))

;; mem_image
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (w (set (tuple21 (tuple21 a b) (tuple21 c d)))) (x uni))
  (= (mem b2 x
  (image b2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) p (t2tb879 w)))
  (exists ((a2 (tuple21 (tuple21 a b) (tuple21 c d))))
  (and (mem50 a2 w) (mem (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) b2)
  (Tuple2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) b2 (t2tb880 a2) x) p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 b d)) (tuple21 (tuple21 a b)
  (tuple21 c d))))) (w (set (set (tuple21 b d)))) (x (tuple21 (tuple21 a b)
  (tuple21 c d))))
  (= (mem50 x
  (tb2t879
  (image (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) (set1 (tuple2 b1 d1))
  (t2tb5090 p) (t2tb906 w))))
  (exists ((a2 (set (tuple21 b d))))
  (and (mem33 a2 w) (mem
  (tuple2 (set1 (tuple2 b1 d1)) (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)))
  (Tuple2 (set1 (tuple2 b1 d1)) (tuple2 (tuple2 a1 b1) (tuple2 c1 d1))
  (t2tb687 a2) (t2tb880 x)) (t2tb5090 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 b d)) (set (tuple21 b d)))))
  (w (set (set (tuple21 b d)))) (x (set (tuple21 b d))))
  (= (mem33 x
  (tb2t906
  (image (set1 (tuple2 b1 d1)) (set1 (tuple2 b1 d1)) (t2tb4339 p)
  (t2tb906 w))))
  (exists ((a2 (set (tuple21 b d))))
  (and (mem33 a2 w) (mem (tuple2 (set1 (tuple2 b1 d1)) (set1 (tuple2 b1 d1)))
  (Tuple2 (set1 (tuple2 b1 d1)) (set1 (tuple2 b1 d1)) (t2tb687 a2)
  (t2tb687 x)) (t2tb4339 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 b d)) (tuple21 b d))))
  (w (set (set (tuple21 b d)))) (x (tuple21 b d)))
  (= (mem23 x
  (tb2t687
  (image (tuple2 b1 d1) (set1 (tuple2 b1 d1)) (t2tb4341 p) (t2tb906 w))))
  (exists ((a2 (set (tuple21 b d))))
  (and (mem33 a2 w) (mem (tuple2 (set1 (tuple2 b1 d1)) (tuple2 b1 d1))
  (Tuple2 (set1 (tuple2 b1 d1)) (tuple2 b1 d1) (t2tb687 a2) (t2tb692 x))
  (t2tb4341 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 b d)) d))) (w (set (set (tuple21 b
  d)))) (x d))
  (= (mem20 x
  (tb2t690 (image d1 (set1 (tuple2 b1 d1)) (t2tb4343 p) (t2tb906 w))))
  (exists ((a2 (set (tuple21 b d))))
  (and (mem33 a2 w) (mem (tuple2 (set1 (tuple2 b1 d1)) d1)
  (Tuple2 (set1 (tuple2 b1 d1)) d1 (t2tb687 a2) (t2tb694 x)) (t2tb4343 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 b d)) (set (tuple21 a c)))))
  (w (set (set (tuple21 b d)))) (x (set (tuple21 a c))))
  (= (mem11 x
  (tb2t128
  (image (set1 (tuple2 a1 c1)) (set1 (tuple2 b1 d1)) (t2tb4347 p)
  (t2tb906 w))))
  (exists ((a2 (set (tuple21 b d))))
  (and (mem33 a2 w) (mem (tuple2 (set1 (tuple2 b1 d1)) (set1 (tuple2 a1 c1)))
  (Tuple2 (set1 (tuple2 b1 d1)) (set1 (tuple2 a1 c1)) (t2tb687 a2)
  (t2tb129 x)) (t2tb4347 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 b d)) (tuple21 a c))))
  (w (set (set (tuple21 b d)))) (x (tuple21 a c)))
  (= (mem10 x
  (tb2t129
  (image (tuple2 a1 c1) (set1 (tuple2 b1 d1)) (t2tb4349 p) (t2tb906 w))))
  (exists ((a2 (set (tuple21 b d))))
  (and (mem33 a2 w) (mem (tuple2 (set1 (tuple2 b1 d1)) (tuple2 a1 c1))
  (Tuple2 (set1 (tuple2 b1 d1)) (tuple2 a1 c1) (t2tb687 a2) (t2tb133 x))
  (t2tb4349 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 b d)) c))) (w (set (set (tuple21 b
  d)))) (x c))
  (= (mem7 x
  (tb2t132 (image c1 (set1 (tuple2 b1 d1)) (t2tb4351 p) (t2tb906 w))))
  (exists ((a2 (set (tuple21 b d))))
  (and (mem33 a2 w) (mem (tuple2 (set1 (tuple2 b1 d1)) c1)
  (Tuple2 (set1 (tuple2 b1 d1)) c1 (t2tb687 a2) (t2tb135 x)) (t2tb4351 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 b d)) (tuple21 a b))))
  (w (set (set (tuple21 b d)))) (x (tuple21 a b)))
  (= (mem3 x
  (tb2t11
  (image (tuple2 a1 b1) (set1 (tuple2 b1 d1)) (t2tb4355 p) (t2tb906 w))))
  (exists ((a2 (set (tuple21 b d))))
  (and (mem33 a2 w) (mem (tuple2 (set1 (tuple2 b1 d1)) (tuple2 a1 b1))
  (Tuple2 (set1 (tuple2 b1 d1)) (tuple2 a1 b1) (t2tb687 a2) (t2tb13 x))
  (t2tb4355 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 b d)) b))) (w (set (set (tuple21 b
  d)))) (x b))
  (= (mem2 x
  (tb2t12 (image b1 (set1 (tuple2 b1 d1)) (t2tb4357 p) (t2tb906 w))))
  (exists ((a2 (set (tuple21 b d))))
  (and (mem33 a2 w) (mem (tuple2 (set1 (tuple2 b1 d1)) b1)
  (Tuple2 (set1 (tuple2 b1 d1)) b1 (t2tb687 a2) (t2tb14 x)) (t2tb4357 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 b d)) a))) (w (set (set (tuple21 b
  d)))) (x a))
  (= (mem1 x
  (tb2t1 (image a1 (set1 (tuple2 b1 d1)) (t2tb4359 p) (t2tb906 w))))
  (exists ((a2 (set (tuple21 b d))))
  (and (mem33 a2 w) (mem (tuple2 (set1 (tuple2 b1 d1)) a1)
  (Tuple2 (set1 (tuple2 b1 d1)) a1 (t2tb687 a2) (t2tb2 x)) (t2tb4359 p)))))))

;; mem_image
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (w (set (set (tuple21 b d)))) (x uni))
  (= (mem b2 x (image b2 (set1 (tuple2 b1 d1)) p (t2tb906 w)))
  (exists ((a2 (set (tuple21 b d))))
  (and (mem33 a2 w) (mem (tuple2 (set1 (tuple2 b1 d1)) b2)
  (Tuple2 (set1 (tuple2 b1 d1)) b2 (t2tb687 a2) x) p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 b d) (tuple21 (tuple21 a b) (tuple21 c
  d))))) (w (set (tuple21 b d))) (x (tuple21 (tuple21 a b) (tuple21 c d))))
  (= (mem50 x
  (tb2t879
  (image (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) (tuple2 b1 d1) (t2tb5092 p)
  (t2tb687 w))))
  (exists ((a2 (tuple21 b d)))
  (and (mem23 a2 w) (mem
  (tuple2 (tuple2 b1 d1) (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)))
  (Tuple2 (tuple2 b1 d1) (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) (t2tb692 a2)
  (t2tb880 x)) (t2tb5092 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 b d) (set (tuple21 b d)))))
  (w (set (tuple21 b d))) (x (set (tuple21 b d))))
  (= (mem33 x
  (tb2t906
  (image (set1 (tuple2 b1 d1)) (tuple2 b1 d1) (t2tb4373 p) (t2tb687 w))))
  (exists ((a2 (tuple21 b d)))
  (and (mem23 a2 w) (mem (tuple2 (tuple2 b1 d1) (set1 (tuple2 b1 d1)))
  (Tuple2 (tuple2 b1 d1) (set1 (tuple2 b1 d1)) (t2tb692 a2) (t2tb687 x))
  (t2tb4373 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 b d) (tuple21 b d)))) (w (set (tuple21 b
  d))) (x (tuple21 b d)))
  (= (mem23 x
  (tb2t687 (image (tuple2 b1 d1) (tuple2 b1 d1) (t2tb747 p) (t2tb687 w))))
  (exists ((a2 (tuple21 b d)))
  (and (mem23 a2 w) (mem (tuple2 (tuple2 b1 d1) (tuple2 b1 d1))
  (Tuple2 (tuple2 b1 d1) (tuple2 b1 d1) (t2tb692 a2) (t2tb692 x))
  (t2tb747 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 b d) d))) (w (set (tuple21 b d))) (x d))
  (= (mem20 x (tb2t690 (image d1 (tuple2 b1 d1) (t2tb4375 p) (t2tb687 w))))
  (exists ((a2 (tuple21 b d)))
  (and (mem23 a2 w) (mem (tuple2 (tuple2 b1 d1) d1)
  (Tuple2 (tuple2 b1 d1) d1 (t2tb692 a2) (t2tb694 x)) (t2tb4375 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 b d) (set (tuple21 a c)))))
  (w (set (tuple21 b d))) (x (set (tuple21 a c))))
  (= (mem11 x
  (tb2t128
  (image (set1 (tuple2 a1 c1)) (tuple2 b1 d1) (t2tb4378 p) (t2tb687 w))))
  (exists ((a2 (tuple21 b d)))
  (and (mem23 a2 w) (mem (tuple2 (tuple2 b1 d1) (set1 (tuple2 a1 c1)))
  (Tuple2 (tuple2 b1 d1) (set1 (tuple2 a1 c1)) (t2tb692 a2) (t2tb129 x))
  (t2tb4378 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 b d) (tuple21 a c)))) (w (set (tuple21 b
  d))) (x (tuple21 a c)))
  (= (mem10 x
  (tb2t129 (image (tuple2 a1 c1) (tuple2 b1 d1) (t2tb755 p) (t2tb687 w))))
  (exists ((a2 (tuple21 b d)))
  (and (mem23 a2 w) (mem (tuple2 (tuple2 b1 d1) (tuple2 a1 c1))
  (Tuple2 (tuple2 b1 d1) (tuple2 a1 c1) (t2tb692 a2) (t2tb133 x))
  (t2tb755 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 b d) c))) (w (set (tuple21 b d))) (x c))
  (= (mem7 x (tb2t132 (image c1 (tuple2 b1 d1) (t2tb4380 p) (t2tb687 w))))
  (exists ((a2 (tuple21 b d)))
  (and (mem23 a2 w) (mem (tuple2 (tuple2 b1 d1) c1)
  (Tuple2 (tuple2 b1 d1) c1 (t2tb692 a2) (t2tb135 x)) (t2tb4380 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 b d) (tuple21 a b)))) (w (set (tuple21 b
  d))) (x (tuple21 a b)))
  (= (mem3 x
  (tb2t11 (image (tuple2 a1 b1) (tuple2 b1 d1) (t2tb4383 p) (t2tb687 w))))
  (exists ((a2 (tuple21 b d)))
  (and (mem23 a2 w) (mem (tuple2 (tuple2 b1 d1) (tuple2 a1 b1))
  (Tuple2 (tuple2 b1 d1) (tuple2 a1 b1) (t2tb692 a2) (t2tb13 x))
  (t2tb4383 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 b d) b))) (w (set (tuple21 b d))) (x b))
  (= (mem2 x (tb2t12 (image b1 (tuple2 b1 d1) (t2tb4385 p) (t2tb687 w))))
  (exists ((a2 (tuple21 b d)))
  (and (mem23 a2 w) (mem (tuple2 (tuple2 b1 d1) b1)
  (Tuple2 (tuple2 b1 d1) b1 (t2tb692 a2) (t2tb14 x)) (t2tb4385 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 b d) a))) (w (set (tuple21 b d))) (x a))
  (= (mem1 x (tb2t1 (image a1 (tuple2 b1 d1) (t2tb4386 p) (t2tb687 w))))
  (exists ((a2 (tuple21 b d)))
  (and (mem23 a2 w) (mem (tuple2 (tuple2 b1 d1) a1)
  (Tuple2 (tuple2 b1 d1) a1 (t2tb692 a2) (t2tb2 x)) (t2tb4386 p)))))))

;; mem_image
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (w (set (tuple21 b d))) (x uni))
  (= (mem b2 x (image b2 (tuple2 b1 d1) p (t2tb687 w)))
  (exists ((a2 (tuple21 b d)))
  (and (mem23 a2 w) (mem (tuple2 (tuple2 b1 d1) b2)
  (Tuple2 (tuple2 b1 d1) b2 (t2tb692 a2) x) p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 d (tuple21 (tuple21 a b) (tuple21 c d)))))
  (w (set d)) (x (tuple21 (tuple21 a b) (tuple21 c d))))
  (= (mem50 x
  (tb2t879
  (image (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) d1 (t2tb5094 p) (t2tb690 w))))
  (exists ((a2 d))
  (and (mem20 a2 w) (mem (tuple2 d1 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)))
  (Tuple2 d1 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) (t2tb694 a2) (t2tb880 x))
  (t2tb5094 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 d (set (tuple21 b d))))) (w (set d))
  (x (set (tuple21 b d))))
  (= (mem33 x
  (tb2t906 (image (set1 (tuple2 b1 d1)) d1 (t2tb4397 p) (t2tb690 w))))
  (exists ((a2 d))
  (and (mem20 a2 w) (mem (tuple2 d1 (set1 (tuple2 b1 d1)))
  (Tuple2 d1 (set1 (tuple2 b1 d1)) (t2tb694 a2) (t2tb687 x)) (t2tb4397 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 d (tuple21 b d)))) (w (set d)) (x (tuple21 b d)))
  (= (mem23 x (tb2t687 (image (tuple2 b1 d1) d1 (t2tb4399 p) (t2tb690 w))))
  (exists ((a2 d))
  (and (mem20 a2 w) (mem (tuple2 d1 (tuple2 b1 d1))
  (Tuple2 d1 (tuple2 b1 d1) (t2tb694 a2) (t2tb692 x)) (t2tb4399 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 d d))) (w (set d)) (x d))
  (= (mem20 x (tb2t690 (image d1 d1 (t2tb825 p) (t2tb690 w))))
  (exists ((a2 d))
  (and (mem20 a2 w) (mem (tuple2 d1 d1)
  (Tuple2 d1 d1 (t2tb694 a2) (t2tb694 x)) (t2tb825 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 d (set (tuple21 a c))))) (w (set d))
  (x (set (tuple21 a c))))
  (= (mem11 x
  (tb2t128 (image (set1 (tuple2 a1 c1)) d1 (t2tb4402 p) (t2tb690 w))))
  (exists ((a2 d))
  (and (mem20 a2 w) (mem (tuple2 d1 (set1 (tuple2 a1 c1)))
  (Tuple2 d1 (set1 (tuple2 a1 c1)) (t2tb694 a2) (t2tb129 x)) (t2tb4402 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 d (tuple21 a c)))) (w (set d)) (x (tuple21 a c)))
  (= (mem10 x (tb2t129 (image (tuple2 a1 c1) d1 (t2tb4404 p) (t2tb690 w))))
  (exists ((a2 d))
  (and (mem20 a2 w) (mem (tuple2 d1 (tuple2 a1 c1))
  (Tuple2 d1 (tuple2 a1 c1) (t2tb694 a2) (t2tb133 x)) (t2tb4404 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 d c))) (w (set d)) (x c))
  (= (mem7 x (tb2t132 (image c1 d1 (t2tb829 p) (t2tb690 w))))
  (exists ((a2 d))
  (and (mem20 a2 w) (mem (tuple2 d1 c1)
  (Tuple2 d1 c1 (t2tb694 a2) (t2tb135 x)) (t2tb829 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 d (tuple21 a b)))) (w (set d)) (x (tuple21 a b)))
  (= (mem3 x (tb2t11 (image (tuple2 a1 b1) d1 (t2tb833 p) (t2tb690 w))))
  (exists ((a2 d))
  (and (mem20 a2 w) (mem (tuple2 d1 (tuple2 a1 b1))
  (Tuple2 d1 (tuple2 a1 b1) (t2tb694 a2) (t2tb13 x)) (t2tb833 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 d b))) (w (set d)) (x b))
  (= (mem2 x (tb2t12 (image b1 d1 (t2tb835 p) (t2tb690 w))))
  (exists ((a2 d))
  (and (mem20 a2 w) (mem (tuple2 d1 b1)
  (Tuple2 d1 b1 (t2tb694 a2) (t2tb14 x)) (t2tb835 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 d a))) (w (set d)) (x a))
  (= (mem1 x (tb2t1 (image a1 d1 (t2tb837 p) (t2tb690 w))))
  (exists ((a2 d))
  (and (mem20 a2 w) (mem (tuple2 d1 a1) (Tuple2 d1 a1 (t2tb694 a2) (t2tb2 x))
  (t2tb837 p)))))))

;; mem_image
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (w (set d)) (x uni))
  (= (mem b2 x (image b2 d1 p (t2tb690 w)))
  (exists ((a2 d))
  (and (mem20 a2 w) (mem (tuple2 d1 b2) (Tuple2 d1 b2 (t2tb694 a2) x) p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a c)) (tuple21 (tuple21 a b)
  (tuple21 c d))))) (w (set (set (tuple21 a c)))) (x (tuple21 (tuple21 a b)
  (tuple21 c d))))
  (= (mem50 x
  (tb2t879
  (image (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) (set1 (tuple2 a1 c1))
  (t2tb5096 p) (t2tb128 w))))
  (exists ((a2 (set (tuple21 a c))))
  (and (mem11 a2 w) (mem
  (tuple2 (set1 (tuple2 a1 c1)) (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)))
  (Tuple2 (set1 (tuple2 a1 c1)) (tuple2 (tuple2 a1 b1) (tuple2 c1 d1))
  (t2tb129 a2) (t2tb880 x)) (t2tb5096 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a c)) (set (tuple21 b d)))))
  (w (set (set (tuple21 a c)))) (x (set (tuple21 b d))))
  (= (mem33 x
  (tb2t906
  (image (set1 (tuple2 b1 d1)) (set1 (tuple2 a1 c1)) (t2tb4455 p)
  (t2tb128 w))))
  (exists ((a2 (set (tuple21 a c))))
  (and (mem11 a2 w) (mem (tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 b1 d1)))
  (Tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 b1 d1)) (t2tb129 a2)
  (t2tb687 x)) (t2tb4455 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a c)) (tuple21 b d))))
  (w (set (set (tuple21 a c)))) (x (tuple21 b d)))
  (= (mem23 x
  (tb2t687
  (image (tuple2 b1 d1) (set1 (tuple2 a1 c1)) (t2tb4457 p) (t2tb128 w))))
  (exists ((a2 (set (tuple21 a c))))
  (and (mem11 a2 w) (mem (tuple2 (set1 (tuple2 a1 c1)) (tuple2 b1 d1))
  (Tuple2 (set1 (tuple2 a1 c1)) (tuple2 b1 d1) (t2tb129 a2) (t2tb692 x))
  (t2tb4457 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a c)) d))) (w (set (set (tuple21 a
  c)))) (x d))
  (= (mem20 x
  (tb2t690 (image d1 (set1 (tuple2 a1 c1)) (t2tb4459 p) (t2tb128 w))))
  (exists ((a2 (set (tuple21 a c))))
  (and (mem11 a2 w) (mem (tuple2 (set1 (tuple2 a1 c1)) d1)
  (Tuple2 (set1 (tuple2 a1 c1)) d1 (t2tb129 a2) (t2tb694 x)) (t2tb4459 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a c)) (set (tuple21 a c)))))
  (w (set (set (tuple21 a c)))) (x (set (tuple21 a c))))
  (= (mem11 x
  (tb2t128
  (image (set1 (tuple2 a1 c1)) (set1 (tuple2 a1 c1)) (t2tb4463 p)
  (t2tb128 w))))
  (exists ((a2 (set (tuple21 a c))))
  (and (mem11 a2 w) (mem (tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 a1 c1)))
  (Tuple2 (set1 (tuple2 a1 c1)) (set1 (tuple2 a1 c1)) (t2tb129 a2)
  (t2tb129 x)) (t2tb4463 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a c)) (tuple21 a c))))
  (w (set (set (tuple21 a c)))) (x (tuple21 a c)))
  (= (mem10 x
  (tb2t129
  (image (tuple2 a1 c1) (set1 (tuple2 a1 c1)) (t2tb4465 p) (t2tb128 w))))
  (exists ((a2 (set (tuple21 a c))))
  (and (mem11 a2 w) (mem (tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 c1))
  (Tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 c1) (t2tb129 a2) (t2tb133 x))
  (t2tb4465 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a c)) c))) (w (set (set (tuple21 a
  c)))) (x c))
  (= (mem7 x
  (tb2t132 (image c1 (set1 (tuple2 a1 c1)) (t2tb4467 p) (t2tb128 w))))
  (exists ((a2 (set (tuple21 a c))))
  (and (mem11 a2 w) (mem (tuple2 (set1 (tuple2 a1 c1)) c1)
  (Tuple2 (set1 (tuple2 a1 c1)) c1 (t2tb129 a2) (t2tb135 x)) (t2tb4467 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a c)) (tuple21 a b))))
  (w (set (set (tuple21 a c)))) (x (tuple21 a b)))
  (= (mem3 x
  (tb2t11
  (image (tuple2 a1 b1) (set1 (tuple2 a1 c1)) (t2tb4471 p) (t2tb128 w))))
  (exists ((a2 (set (tuple21 a c))))
  (and (mem11 a2 w) (mem (tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 b1))
  (Tuple2 (set1 (tuple2 a1 c1)) (tuple2 a1 b1) (t2tb129 a2) (t2tb13 x))
  (t2tb4471 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a c)) b))) (w (set (set (tuple21 a
  c)))) (x b))
  (= (mem2 x
  (tb2t12 (image b1 (set1 (tuple2 a1 c1)) (t2tb4473 p) (t2tb128 w))))
  (exists ((a2 (set (tuple21 a c))))
  (and (mem11 a2 w) (mem (tuple2 (set1 (tuple2 a1 c1)) b1)
  (Tuple2 (set1 (tuple2 a1 c1)) b1 (t2tb129 a2) (t2tb14 x)) (t2tb4473 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (set (tuple21 a c)) a))) (w (set (set (tuple21 a
  c)))) (x a))
  (= (mem1 x
  (tb2t1 (image a1 (set1 (tuple2 a1 c1)) (t2tb4475 p) (t2tb128 w))))
  (exists ((a2 (set (tuple21 a c))))
  (and (mem11 a2 w) (mem (tuple2 (set1 (tuple2 a1 c1)) a1)
  (Tuple2 (set1 (tuple2 a1 c1)) a1 (t2tb129 a2) (t2tb2 x)) (t2tb4475 p)))))))

;; mem_image
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (w (set (set (tuple21 a c)))) (x uni))
  (= (mem b2 x (image b2 (set1 (tuple2 a1 c1)) p (t2tb128 w)))
  (exists ((a2 (set (tuple21 a c))))
  (and (mem11 a2 w) (mem (tuple2 (set1 (tuple2 a1 c1)) b2)
  (Tuple2 (set1 (tuple2 a1 c1)) b2 (t2tb129 a2) x) p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a c) (tuple21 (tuple21 a b) (tuple21 c
  d))))) (w (set (tuple21 a c))) (x (tuple21 (tuple21 a b) (tuple21 c d))))
  (= (mem50 x
  (tb2t879
  (image (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) (tuple2 a1 c1) (t2tb5098 p)
  (t2tb129 w))))
  (exists ((a2 (tuple21 a c)))
  (and (mem10 a2 w) (mem
  (tuple2 (tuple2 a1 c1) (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)))
  (Tuple2 (tuple2 a1 c1) (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) (t2tb133 a2)
  (t2tb880 x)) (t2tb5098 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a c) (set (tuple21 b d)))))
  (w (set (tuple21 a c))) (x (set (tuple21 b d))))
  (= (mem33 x
  (tb2t906
  (image (set1 (tuple2 b1 d1)) (tuple2 a1 c1) (t2tb4489 p) (t2tb129 w))))
  (exists ((a2 (tuple21 a c)))
  (and (mem10 a2 w) (mem (tuple2 (tuple2 a1 c1) (set1 (tuple2 b1 d1)))
  (Tuple2 (tuple2 a1 c1) (set1 (tuple2 b1 d1)) (t2tb133 a2) (t2tb687 x))
  (t2tb4489 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a c) (tuple21 b d)))) (w (set (tuple21 a
  c))) (x (tuple21 b d)))
  (= (mem23 x
  (tb2t687 (image (tuple2 b1 d1) (tuple2 a1 c1) (t2tb686 p) (t2tb129 w))))
  (exists ((a2 (tuple21 a c)))
  (and (mem10 a2 w) (mem (tuple2 (tuple2 a1 c1) (tuple2 b1 d1))
  (Tuple2 (tuple2 a1 c1) (tuple2 b1 d1) (t2tb133 a2) (t2tb692 x))
  (t2tb686 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a c) d))) (w (set (tuple21 a c))) (x d))
  (= (mem20 x (tb2t690 (image d1 (tuple2 a1 c1) (t2tb847 p) (t2tb129 w))))
  (exists ((a2 (tuple21 a c)))
  (and (mem10 a2 w) (mem (tuple2 (tuple2 a1 c1) d1)
  (Tuple2 (tuple2 a1 c1) d1 (t2tb133 a2) (t2tb694 x)) (t2tb847 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a c) (set (tuple21 a c)))))
  (w (set (tuple21 a c))) (x (set (tuple21 a c))))
  (= (mem11 x
  (tb2t128
  (image (set1 (tuple2 a1 c1)) (tuple2 a1 c1) (t2tb4493 p) (t2tb129 w))))
  (exists ((a2 (tuple21 a c)))
  (and (mem10 a2 w) (mem (tuple2 (tuple2 a1 c1) (set1 (tuple2 a1 c1)))
  (Tuple2 (tuple2 a1 c1) (set1 (tuple2 a1 c1)) (t2tb133 a2) (t2tb129 x))
  (t2tb4493 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a c) (tuple21 a c)))) (w (set (tuple21 a
  c))) (x (tuple21 a c)))
  (= (mem10 x
  (tb2t129 (image (tuple2 a1 c1) (tuple2 a1 c1) (t2tb157 p) (t2tb129 w))))
  (exists ((a2 (tuple21 a c)))
  (and (mem10 a2 w) (mem (tuple2 (tuple2 a1 c1) (tuple2 a1 c1))
  (Tuple2 (tuple2 a1 c1) (tuple2 a1 c1) (t2tb133 a2) (t2tb133 x))
  (t2tb157 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a c) c))) (w (set (tuple21 a c))) (x c))
  (= (mem7 x (tb2t132 (image c1 (tuple2 a1 c1) (t2tb162 p) (t2tb129 w))))
  (exists ((a2 (tuple21 a c)))
  (and (mem10 a2 w) (mem (tuple2 (tuple2 a1 c1) c1)
  (Tuple2 (tuple2 a1 c1) c1 (t2tb133 a2) (t2tb135 x)) (t2tb162 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a c) (tuple21 a b)))) (w (set (tuple21 a
  c))) (x (tuple21 a b)))
  (= (mem3 x
  (tb2t11 (image (tuple2 a1 b1) (tuple2 a1 c1) (t2tb166 p) (t2tb129 w))))
  (exists ((a2 (tuple21 a c)))
  (and (mem10 a2 w) (mem (tuple2 (tuple2 a1 c1) (tuple2 a1 b1))
  (Tuple2 (tuple2 a1 c1) (tuple2 a1 b1) (t2tb133 a2) (t2tb13 x))
  (t2tb166 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a c) b))) (w (set (tuple21 a c))) (x b))
  (= (mem2 x (tb2t12 (image b1 (tuple2 a1 c1) (t2tb168 p) (t2tb129 w))))
  (exists ((a2 (tuple21 a c)))
  (and (mem10 a2 w) (mem (tuple2 (tuple2 a1 c1) b1)
  (Tuple2 (tuple2 a1 c1) b1 (t2tb133 a2) (t2tb14 x)) (t2tb168 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a c) a))) (w (set (tuple21 a c))) (x a))
  (= (mem1 x (tb2t1 (image a1 (tuple2 a1 c1) (t2tb170 p) (t2tb129 w))))
  (exists ((a2 (tuple21 a c)))
  (and (mem10 a2 w) (mem (tuple2 (tuple2 a1 c1) a1)
  (Tuple2 (tuple2 a1 c1) a1 (t2tb133 a2) (t2tb2 x)) (t2tb170 p)))))))

;; mem_image
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (w (set (tuple21 a c))) (x uni))
  (= (mem b2 x (image b2 (tuple2 a1 c1) p (t2tb129 w)))
  (exists ((a2 (tuple21 a c)))
  (and (mem10 a2 w) (mem (tuple2 (tuple2 a1 c1) b2)
  (Tuple2 (tuple2 a1 c1) b2 (t2tb133 a2) x) p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 c (tuple21 (tuple21 a b) (tuple21 c d)))))
  (w (set c)) (x (tuple21 (tuple21 a b) (tuple21 c d))))
  (= (mem50 x
  (tb2t879
  (image (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) c1 (t2tb5100 p) (t2tb132 w))))
  (exists ((a2 c))
  (and (mem7 a2 w) (mem (tuple2 c1 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)))
  (Tuple2 c1 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) (t2tb135 a2) (t2tb880 x))
  (t2tb5100 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 c (set (tuple21 b d))))) (w (set c))
  (x (set (tuple21 b d))))
  (= (mem33 x
  (tb2t906 (image (set1 (tuple2 b1 d1)) c1 (t2tb4505 p) (t2tb132 w))))
  (exists ((a2 c))
  (and (mem7 a2 w) (mem (tuple2 c1 (set1 (tuple2 b1 d1)))
  (Tuple2 c1 (set1 (tuple2 b1 d1)) (t2tb135 a2) (t2tb687 x)) (t2tb4505 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 c (tuple21 b d)))) (w (set c)) (x (tuple21 b d)))
  (= (mem23 x (tb2t687 (image (tuple2 b1 d1) c1 (t2tb4507 p) (t2tb132 w))))
  (exists ((a2 c))
  (and (mem7 a2 w) (mem (tuple2 c1 (tuple2 b1 d1))
  (Tuple2 c1 (tuple2 b1 d1) (t2tb135 a2) (t2tb692 x)) (t2tb4507 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 c d))) (w (set c)) (x d))
  (= (mem20 x (tb2t690 (image d1 c1 (t2tb689 p) (t2tb132 w))))
  (exists ((a2 c))
  (and (mem7 a2 w) (mem (tuple2 c1 d1)
  (Tuple2 c1 d1 (t2tb135 a2) (t2tb694 x)) (t2tb689 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 c (set (tuple21 a c))))) (w (set c))
  (x (set (tuple21 a c))))
  (= (mem11 x
  (tb2t128 (image (set1 (tuple2 a1 c1)) c1 (t2tb4510 p) (t2tb132 w))))
  (exists ((a2 c))
  (and (mem7 a2 w) (mem (tuple2 c1 (set1 (tuple2 a1 c1)))
  (Tuple2 c1 (set1 (tuple2 a1 c1)) (t2tb135 a2) (t2tb129 x)) (t2tb4510 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 c (tuple21 a c)))) (w (set c)) (x (tuple21 a c)))
  (= (mem10 x (tb2t129 (image (tuple2 a1 c1) c1 (t2tb210 p) (t2tb132 w))))
  (exists ((a2 c))
  (and (mem7 a2 w) (mem (tuple2 c1 (tuple2 a1 c1))
  (Tuple2 c1 (tuple2 a1 c1) (t2tb135 a2) (t2tb133 x)) (t2tb210 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 c c))) (w (set c)) (x c))
  (= (mem7 x (tb2t132 (image c1 c1 (t2tb216 p) (t2tb132 w))))
  (exists ((a2 c))
  (and (mem7 a2 w) (mem (tuple2 c1 c1)
  (Tuple2 c1 c1 (t2tb135 a2) (t2tb135 x)) (t2tb216 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 c (tuple21 a b)))) (w (set c)) (x (tuple21 a b)))
  (= (mem3 x (tb2t11 (image (tuple2 a1 b1) c1 (t2tb220 p) (t2tb132 w))))
  (exists ((a2 c))
  (and (mem7 a2 w) (mem (tuple2 c1 (tuple2 a1 b1))
  (Tuple2 c1 (tuple2 a1 b1) (t2tb135 a2) (t2tb13 x)) (t2tb220 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 c b))) (w (set c)) (x b))
  (= (mem2 x (tb2t12 (image b1 c1 (t2tb222 p) (t2tb132 w))))
  (exists ((a2 c))
  (and (mem7 a2 w) (mem (tuple2 c1 b1) (Tuple2 c1 b1 (t2tb135 a2) (t2tb14 x))
  (t2tb222 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 c a))) (w (set c)) (x a))
  (= (mem1 x (tb2t1 (image a1 c1 (t2tb224 p) (t2tb132 w))))
  (exists ((a2 c))
  (and (mem7 a2 w) (mem (tuple2 c1 a1) (Tuple2 c1 a1 (t2tb135 a2) (t2tb2 x))
  (t2tb224 p)))))))

;; mem_image
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (w (set c)) (x uni))
  (= (mem b2 x (image b2 c1 p (t2tb132 w)))
  (exists ((a2 c))
  (and (mem7 a2 w) (mem (tuple2 c1 b2) (Tuple2 c1 b2 (t2tb135 a2) x) p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) (tuple21 (tuple21 a b) (tuple21 c
  d))))) (w (set (tuple21 a b))) (x (tuple21 (tuple21 a b) (tuple21 c d))))
  (= (mem50 x
  (tb2t879
  (image (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) (tuple2 a1 b1) (t2tb5102 p)
  (t2tb11 w))))
  (exists ((a2 (tuple21 a b)))
  (and (mem3 a2 w) (mem
  (tuple2 (tuple2 a1 b1) (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)))
  (Tuple2 (tuple2 a1 b1) (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) (t2tb13 a2)
  (t2tb880 x)) (t2tb5102 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) (set (tuple21 b d)))))
  (w (set (tuple21 a b))) (x (set (tuple21 b d))))
  (= (mem33 x
  (tb2t906
  (image (set1 (tuple2 b1 d1)) (tuple2 a1 b1) (t2tb4540 p) (t2tb11 w))))
  (exists ((a2 (tuple21 a b)))
  (and (mem3 a2 w) (mem (tuple2 (tuple2 a1 b1) (set1 (tuple2 b1 d1)))
  (Tuple2 (tuple2 a1 b1) (set1 (tuple2 b1 d1)) (t2tb13 a2) (t2tb687 x))
  (t2tb4540 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) (tuple21 b d)))) (w (set (tuple21 a
  b))) (x (tuple21 b d)))
  (= (mem23 x
  (tb2t687 (image (tuple2 b1 d1) (tuple2 a1 b1) (t2tb4542 p) (t2tb11 w))))
  (exists ((a2 (tuple21 a b)))
  (and (mem3 a2 w) (mem (tuple2 (tuple2 a1 b1) (tuple2 b1 d1))
  (Tuple2 (tuple2 a1 b1) (tuple2 b1 d1) (t2tb13 a2) (t2tb692 x))
  (t2tb4542 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) (tuple21 c d)))) (w (set (tuple21 a
  b))) (x (tuple21 c d)))
  (= (mem (tuple2 c1 d1) (t2tb693 x)
  (image (tuple2 c1 d1) (tuple2 a1 b1) (t2tb879 p) (t2tb11 w)))
  (exists ((a2 (tuple21 a b)))
  (and (mem3 a2 w) (mem50
  (tb2t880 (Tuple2 (tuple2 a1 b1) (tuple2 c1 d1) (t2tb13 a2) (t2tb693 x)))
  p))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) d))) (w (set (tuple21 a b))) (x d))
  (= (mem20 x (tb2t690 (image d1 (tuple2 a1 b1) (t2tb881 p) (t2tb11 w))))
  (exists ((a2 (tuple21 a b)))
  (and (mem3 a2 w) (mem (tuple2 (tuple2 a1 b1) d1)
  (Tuple2 (tuple2 a1 b1) d1 (t2tb13 a2) (t2tb694 x)) (t2tb881 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) (set (tuple21 a c)))))
  (w (set (tuple21 a b))) (x (set (tuple21 a c))))
  (= (mem11 x
  (tb2t128
  (image (set1 (tuple2 a1 c1)) (tuple2 a1 b1) (t2tb4546 p) (t2tb11 w))))
  (exists ((a2 (tuple21 a b)))
  (and (mem3 a2 w) (mem (tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 c1)))
  (Tuple2 (tuple2 a1 b1) (set1 (tuple2 a1 c1)) (t2tb13 a2) (t2tb129 x))
  (t2tb4546 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) (tuple21 a c)))) (w (set (tuple21 a
  b))) (x (tuple21 a c)))
  (= (mem10 x
  (tb2t129 (image (tuple2 a1 c1) (tuple2 a1 b1) (t2tb238 p) (t2tb11 w))))
  (exists ((a2 (tuple21 a b)))
  (and (mem3 a2 w) (mem (tuple2 (tuple2 a1 b1) (tuple2 a1 c1))
  (Tuple2 (tuple2 a1 b1) (tuple2 a1 c1) (t2tb13 a2) (t2tb133 x))
  (t2tb238 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) c))) (w (set (tuple21 a b))) (x c))
  (= (mem7 x (tb2t132 (image c1 (tuple2 a1 b1) (t2tb245 p) (t2tb11 w))))
  (exists ((a2 (tuple21 a b)))
  (and (mem3 a2 w) (mem (tuple2 (tuple2 a1 b1) c1)
  (Tuple2 (tuple2 a1 b1) c1 (t2tb13 a2) (t2tb135 x)) (t2tb245 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) (tuple21 a b)))) (w (set (tuple21 a
  b))) (x (tuple21 a b)))
  (= (mem3 x
  (tb2t11 (image (tuple2 a1 b1) (tuple2 a1 b1) (t2tb25 p) (t2tb11 w))))
  (exists ((a2 (tuple21 a b)))
  (and (mem3 a2 w) (mem (tuple2 (tuple2 a1 b1) (tuple2 a1 b1))
  (Tuple2 (tuple2 a1 b1) (tuple2 a1 b1) (t2tb13 a2) (t2tb13 x)) (t2tb25 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) b))) (w (set (tuple21 a b))) (x b))
  (= (mem2 x (tb2t12 (image b1 (tuple2 a1 b1) (t2tb27 p) (t2tb11 w))))
  (exists ((a2 (tuple21 a b)))
  (and (mem3 a2 w) (mem (tuple2 (tuple2 a1 b1) b1)
  (Tuple2 (tuple2 a1 b1) b1 (t2tb13 a2) (t2tb14 x)) (t2tb27 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 (tuple21 a b) a))) (w (set (tuple21 a b))) (x a))
  (= (mem1 x (tb2t1 (image a1 (tuple2 a1 b1) (t2tb29 p) (t2tb11 w))))
  (exists ((a2 (tuple21 a b)))
  (and (mem3 a2 w) (mem (tuple2 (tuple2 a1 b1) a1)
  (Tuple2 (tuple2 a1 b1) a1 (t2tb13 a2) (t2tb2 x)) (t2tb29 p)))))))

;; mem_image
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (w (set (tuple21 a b))) (x uni))
  (= (mem b2 x (image b2 (tuple2 a1 b1) p (t2tb11 w)))
  (exists ((a2 (tuple21 a b)))
  (and (mem3 a2 w) (mem (tuple2 (tuple2 a1 b1) b2)
  (Tuple2 (tuple2 a1 b1) b2 (t2tb13 a2) x) p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 b (tuple21 (tuple21 a b) (tuple21 c d)))))
  (w (set b)) (x (tuple21 (tuple21 a b) (tuple21 c d))))
  (= (mem50 x
  (tb2t879
  (image (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) b1 (t2tb5104 p) (t2tb12 w))))
  (exists ((a2 b))
  (and (mem2 a2 w) (mem (tuple2 b1 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)))
  (Tuple2 b1 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) (t2tb14 a2) (t2tb880 x))
  (t2tb5104 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 b (set (tuple21 b d))))) (w (set b))
  (x (set (tuple21 b d))))
  (= (mem33 x
  (tb2t906 (image (set1 (tuple2 b1 d1)) b1 (t2tb4558 p) (t2tb12 w))))
  (exists ((a2 b))
  (and (mem2 a2 w) (mem (tuple2 b1 (set1 (tuple2 b1 d1)))
  (Tuple2 b1 (set1 (tuple2 b1 d1)) (t2tb14 a2) (t2tb687 x)) (t2tb4558 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 b (tuple21 b d)))) (w (set b)) (x (tuple21 b d)))
  (= (mem23 x (tb2t687 (image (tuple2 b1 d1) b1 (t2tb4560 p) (t2tb12 w))))
  (exists ((a2 b))
  (and (mem2 a2 w) (mem (tuple2 b1 (tuple2 b1 d1))
  (Tuple2 b1 (tuple2 b1 d1) (t2tb14 a2) (t2tb692 x)) (t2tb4560 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 b d))) (w (set b)) (x d))
  (= (mem20 x (tb2t690 (image d1 b1 (t2tb687 p) (t2tb12 w))))
  (exists ((a2 b))
  (and (mem2 a2 w) (mem23 (tb2t692 (Tuple2 b1 d1 (t2tb14 a2) (t2tb694 x)))
  p))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 b (set (tuple21 a c))))) (w (set b))
  (x (set (tuple21 a c))))
  (= (mem11 x
  (tb2t128 (image (set1 (tuple2 a1 c1)) b1 (t2tb4564 p) (t2tb12 w))))
  (exists ((a2 b))
  (and (mem2 a2 w) (mem (tuple2 b1 (set1 (tuple2 a1 c1)))
  (Tuple2 b1 (set1 (tuple2 a1 c1)) (t2tb14 a2) (t2tb129 x)) (t2tb4564 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 b (tuple21 a c)))) (w (set b)) (x (tuple21 a c)))
  (= (mem10 x (tb2t129 (image (tuple2 a1 c1) b1 (t2tb248 p) (t2tb12 w))))
  (exists ((a2 b))
  (and (mem2 a2 w) (mem (tuple2 b1 (tuple2 a1 c1))
  (Tuple2 b1 (tuple2 a1 c1) (t2tb14 a2) (t2tb133 x)) (t2tb248 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 b c))) (w (set b)) (x c))
  (= (mem7 x (tb2t132 (image c1 b1 (t2tb131 p) (t2tb12 w))))
  (exists ((a2 b))
  (and (mem2 a2 w) (mem (tuple2 b1 c1) (Tuple2 b1 c1 (t2tb14 a2) (t2tb135 x))
  (t2tb131 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 b (tuple21 a b)))) (w (set b)) (x (tuple21 a b)))
  (= (mem3 x (tb2t11 (image (tuple2 a1 b1) b1 (t2tb34 p) (t2tb12 w))))
  (exists ((a2 b))
  (and (mem2 a2 w) (mem (tuple2 b1 (tuple2 a1 b1))
  (Tuple2 b1 (tuple2 a1 b1) (t2tb14 a2) (t2tb13 x)) (t2tb34 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 b b))) (w (set b)) (x b))
  (= (mem2 x (tb2t12 (image b1 b1 (t2tb35 p) (t2tb12 w))))
  (exists ((a2 b))
  (and (mem2 a2 w) (mem (tuple2 b1 b1) (Tuple2 b1 b1 (t2tb14 a2) (t2tb14 x))
  (t2tb35 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 b a))) (w (set b)) (x a))
  (= (mem1 x (tb2t1 (image a1 b1 (t2tb37 p) (t2tb12 w))))
  (exists ((a2 b))
  (and (mem2 a2 w) (mem (tuple2 b1 a1) (Tuple2 b1 a1 (t2tb14 a2) (t2tb2 x))
  (t2tb37 p)))))))

;; mem_image
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (w (set b)) (x uni))
  (= (mem b2 x (image b2 b1 p (t2tb12 w)))
  (exists ((a2 b))
  (and (mem2 a2 w) (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 a2) x) p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 a (tuple21 (tuple21 a b) (tuple21 c d)))))
  (w (set a)) (x (tuple21 (tuple21 a b) (tuple21 c d))))
  (= (mem50 x
  (tb2t879
  (image (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) a1 (t2tb5106 p) (t2tb1 w))))
  (exists ((a2 a))
  (and (mem1 a2 w) (mem (tuple2 a1 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)))
  (Tuple2 a1 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) (t2tb2 a2) (t2tb880 x))
  (t2tb5106 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 a (set (tuple21 b d))))) (w (set a))
  (x (set (tuple21 b d))))
  (= (mem33 x
  (tb2t906 (image (set1 (tuple2 b1 d1)) a1 (t2tb4575 p) (t2tb1 w))))
  (exists ((a2 a))
  (and (mem1 a2 w) (mem (tuple2 a1 (set1 (tuple2 b1 d1)))
  (Tuple2 a1 (set1 (tuple2 b1 d1)) (t2tb2 a2) (t2tb687 x)) (t2tb4575 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 a (tuple21 b d)))) (w (set a)) (x (tuple21 b d)))
  (= (mem23 x (tb2t687 (image (tuple2 b1 d1) a1 (t2tb4577 p) (t2tb1 w))))
  (exists ((a2 a))
  (and (mem1 a2 w) (mem (tuple2 a1 (tuple2 b1 d1))
  (Tuple2 a1 (tuple2 b1 d1) (t2tb2 a2) (t2tb692 x)) (t2tb4577 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 a d))) (w (set a)) (x d))
  (= (mem20 x (tb2t690 (image d1 a1 (t2tb903 p) (t2tb1 w))))
  (exists ((a2 a))
  (and (mem1 a2 w) (mem (tuple2 a1 d1) (Tuple2 a1 d1 (t2tb2 a2) (t2tb694 x))
  (t2tb903 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 a (set (tuple21 a c))))) (w (set a))
  (x (set (tuple21 a c))))
  (= (mem11 x
  (tb2t128 (image (set1 (tuple2 a1 c1)) a1 (t2tb4580 p) (t2tb1 w))))
  (exists ((a2 a))
  (and (mem1 a2 w) (mem (tuple2 a1 (set1 (tuple2 a1 c1)))
  (Tuple2 a1 (set1 (tuple2 a1 c1)) (t2tb2 a2) (t2tb129 x)) (t2tb4580 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 a (tuple21 a c)))) (w (set a)) (x (tuple21 a c)))
  (= (mem10 x (tb2t129 (image (tuple2 a1 c1) a1 (t2tb256 p) (t2tb1 w))))
  (exists ((a2 a))
  (and (mem1 a2 w) (mem (tuple2 a1 (tuple2 a1 c1))
  (Tuple2 a1 (tuple2 a1 c1) (t2tb2 a2) (t2tb133 x)) (t2tb256 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 a c))) (w (set a)) (x c))
  (= (mem7 x (tb2t132 (image c1 a1 (t2tb129 p) (t2tb1 w))))
  (exists ((a2 a))
  (and (mem1 a2 w) (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 a2) (t2tb135 x))) p))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 a (tuple21 a b)))) (w (set a)) (x (tuple21 a b)))
  (= (mem3 x (tb2t11 (image (tuple2 a1 b1) a1 (t2tb41 p) (t2tb1 w))))
  (exists ((a2 a))
  (and (mem1 a2 w) (mem (tuple2 a1 (tuple2 a1 b1))
  (Tuple2 a1 (tuple2 a1 b1) (t2tb2 a2) (t2tb13 x)) (t2tb41 p)))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 a b))) (w (set a)) (x b))
  (= (mem2 x (tb2t12 (image b1 a1 (t2tb11 p) (t2tb1 w))))
  (exists ((a2 a))
  (and (mem1 a2 w) (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 a2) (t2tb14 x))) p))))))

;; mem_image
  (assert
  (forall ((p (set (tuple21 a a))) (w (set a)) (x a))
  (= (mem1 x (tb2t1 (image a1 a1 (t2tb4 p) (t2tb1 w))))
  (exists ((a2 a))
  (and (mem1 a2 w) (mem (tuple2 a1 a1) (Tuple2 a1 a1 (t2tb2 a2) (t2tb2 x))
  (t2tb4 p)))))))

;; mem_image
  (assert
  (forall ((b2 ty))
  (forall ((p uni) (w (set a)) (x uni))
  (= (mem b2 x (image b2 a1 p (t2tb1 w)))
  (exists ((a2 a))
  (and (mem1 a2 w) (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 a2) x) p)))))))

;; mem_image
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((p uni) (w uni) (x uni))
  (and
  (=> (mem b2 x (image b2 a2 p w))
  (exists ((a3 uni))
  (and (sort a2 a3)
  (and (mem a2 a3 w) (mem (tuple2 a2 b2) (Tuple2 a2 b2 a3 x) p)))))
  (=>
  (exists ((a3 uni))
  (and (mem a2 a3 w) (mem (tuple2 a2 b2) (Tuple2 a2 b2 a3 x) p))) (mem b2 x
  (image b2 a2 p w)))))))

(declare-fun infix_lspl (ty ty uni uni) uni)

;; infix <+_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (tuple2 a2 b2))
  (infix_lspl b2 a2 x x1)))))

;; mem_overriding
  (assert
  (forall ((b2 ty))
  (forall ((q uni) (p uni) (x (tuple21 (tuple21 a b) (tuple21 c d))) (y uni))
  (= (mem (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) b2)
  (Tuple2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) b2 (t2tb880 x) y)
  (infix_lspl b2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) q p))
  (or
  (and (mem (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) b2)
  (Tuple2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) b2 (t2tb880 x) y) q)
  (not (mem50 x (tb2t879 (dom b2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) p)))))
  (mem (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) b2)
  (Tuple2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) b2 (t2tb880 x) y) p))))))

;; mem_overriding
  (assert
  (forall ((b2 ty))
  (forall ((q uni) (p uni) (x (set (tuple21 b d))) (y uni))
  (= (mem (tuple2 (set1 (tuple2 b1 d1)) b2)
  (Tuple2 (set1 (tuple2 b1 d1)) b2 (t2tb687 x) y)
  (infix_lspl b2 (set1 (tuple2 b1 d1)) q p))
  (or
  (and (mem (tuple2 (set1 (tuple2 b1 d1)) b2)
  (Tuple2 (set1 (tuple2 b1 d1)) b2 (t2tb687 x) y) q)
  (not (mem33 x (tb2t906 (dom b2 (set1 (tuple2 b1 d1)) p))))) (mem
  (tuple2 (set1 (tuple2 b1 d1)) b2)
  (Tuple2 (set1 (tuple2 b1 d1)) b2 (t2tb687 x) y) p))))))

;; mem_overriding
  (assert
  (forall ((b2 ty))
  (forall ((q uni) (p uni) (x (tuple21 b d)) (y uni))
  (= (mem (tuple2 (tuple2 b1 d1) b2) (Tuple2 (tuple2 b1 d1) b2 (t2tb692 x) y)
  (infix_lspl b2 (tuple2 b1 d1) q p))
  (or
  (and (mem (tuple2 (tuple2 b1 d1) b2)
  (Tuple2 (tuple2 b1 d1) b2 (t2tb692 x) y) q)
  (not (mem23 x (tb2t687 (dom b2 (tuple2 b1 d1) p))))) (mem
  (tuple2 (tuple2 b1 d1) b2) (Tuple2 (tuple2 b1 d1) b2 (t2tb692 x) y) p))))))

;; mem_overriding
  (assert
  (forall ((b2 ty))
  (forall ((q uni) (p uni) (x d) (y uni))
  (= (mem (tuple2 d1 b2) (Tuple2 d1 b2 (t2tb694 x) y) (infix_lspl b2 d1 q p))
  (or
  (and (mem (tuple2 d1 b2) (Tuple2 d1 b2 (t2tb694 x) y) q)
  (not (mem20 x (tb2t690 (dom b2 d1 p))))) (mem (tuple2 d1 b2)
  (Tuple2 d1 b2 (t2tb694 x) y) p))))))

;; mem_overriding
  (assert
  (forall ((b2 ty))
  (forall ((q uni) (p uni) (x (set (tuple21 a c))) (y uni))
  (= (mem (tuple2 (set1 (tuple2 a1 c1)) b2)
  (Tuple2 (set1 (tuple2 a1 c1)) b2 (t2tb129 x) y)
  (infix_lspl b2 (set1 (tuple2 a1 c1)) q p))
  (or
  (and (mem (tuple2 (set1 (tuple2 a1 c1)) b2)
  (Tuple2 (set1 (tuple2 a1 c1)) b2 (t2tb129 x) y) q)
  (not (mem11 x (tb2t128 (dom b2 (set1 (tuple2 a1 c1)) p))))) (mem
  (tuple2 (set1 (tuple2 a1 c1)) b2)
  (Tuple2 (set1 (tuple2 a1 c1)) b2 (t2tb129 x) y) p))))))

;; mem_overriding
  (assert
  (forall ((b2 ty))
  (forall ((q uni) (p uni) (x (tuple21 a c)) (y uni))
  (= (mem (tuple2 (tuple2 a1 c1) b2) (Tuple2 (tuple2 a1 c1) b2 (t2tb133 x) y)
  (infix_lspl b2 (tuple2 a1 c1) q p))
  (or
  (and (mem (tuple2 (tuple2 a1 c1) b2)
  (Tuple2 (tuple2 a1 c1) b2 (t2tb133 x) y) q)
  (not (mem10 x (tb2t129 (dom b2 (tuple2 a1 c1) p))))) (mem
  (tuple2 (tuple2 a1 c1) b2) (Tuple2 (tuple2 a1 c1) b2 (t2tb133 x) y) p))))))

;; mem_overriding
  (assert
  (forall ((b2 ty))
  (forall ((q uni) (p uni) (x c) (y uni))
  (= (mem (tuple2 c1 b2) (Tuple2 c1 b2 (t2tb135 x) y) (infix_lspl b2 c1 q p))
  (or
  (and (mem (tuple2 c1 b2) (Tuple2 c1 b2 (t2tb135 x) y) q)
  (not (mem7 x (tb2t132 (dom b2 c1 p))))) (mem (tuple2 c1 b2)
  (Tuple2 c1 b2 (t2tb135 x) y) p))))))

;; mem_overriding
  (assert
  (forall ((q (set (tuple21 (tuple21 a b) (tuple21 c d))))
  (p (set (tuple21 (tuple21 a b) (tuple21 c d)))) (x (tuple21 a b))
  (y (tuple21 c d)))
  (= (mem50
  (tb2t880 (Tuple2 (tuple2 a1 b1) (tuple2 c1 d1) (t2tb13 x) (t2tb693 y)))
  (tb2t879
  (infix_lspl (tuple2 c1 d1) (tuple2 a1 b1) (t2tb879 q) (t2tb879 p))))
  (or
  (and (mem50
  (tb2t880 (Tuple2 (tuple2 a1 b1) (tuple2 c1 d1) (t2tb13 x) (t2tb693 y))) q)
  (not (mem3 x (tb2t11 (dom (tuple2 c1 d1) (tuple2 a1 b1) (t2tb879 p))))))
  (mem50
  (tb2t880 (Tuple2 (tuple2 a1 b1) (tuple2 c1 d1) (t2tb13 x) (t2tb693 y))) p)))))

;; mem_overriding
  (assert
  (forall ((b2 ty))
  (forall ((q uni) (p uni) (x (tuple21 a b)) (y uni))
  (= (mem (tuple2 (tuple2 a1 b1) b2) (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) y)
  (infix_lspl b2 (tuple2 a1 b1) q p))
  (or
  (and (mem (tuple2 (tuple2 a1 b1) b2)
  (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) y) q)
  (not (mem3 x (tb2t11 (dom b2 (tuple2 a1 b1) p))))) (mem
  (tuple2 (tuple2 a1 b1) b2) (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) y) p))))))

;; mem_overriding
  (assert
  (forall ((q (set (tuple21 b d))) (p (set (tuple21 b d))) (x b) (y d))
  (= (mem23 (tb2t692 (Tuple2 b1 d1 (t2tb14 x) (t2tb694 y)))
  (tb2t687 (infix_lspl d1 b1 (t2tb687 q) (t2tb687 p))))
  (or
  (and (mem23 (tb2t692 (Tuple2 b1 d1 (t2tb14 x) (t2tb694 y))) q)
  (not (mem2 x (tb2t12 (dom d1 b1 (t2tb687 p)))))) (mem23
  (tb2t692 (Tuple2 b1 d1 (t2tb14 x) (t2tb694 y))) p)))))

;; mem_overriding
  (assert
  (forall ((b2 ty))
  (forall ((q uni) (p uni) (x b) (y uni))
  (= (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) y) (infix_lspl b2 b1 q p))
  (or
  (and (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) y) q)
  (not (mem2 x (tb2t12 (dom b2 b1 p))))) (mem (tuple2 b1 b2)
  (Tuple2 b1 b2 (t2tb14 x) y) p))))))

;; mem_overriding
  (assert
  (forall ((q (set (tuple21 a c))) (p (set (tuple21 a c))) (x a) (y c))
  (= (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y)))
  (tb2t129 (infix_lspl c1 a1 (t2tb129 q) (t2tb129 p))))
  (or
  (and (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y))) q)
  (not (mem1 x (tb2t1 (dom c1 a1 (t2tb129 p)))))) (mem10
  (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y))) p)))))

;; mem_overriding
  (assert
  (forall ((q (set (tuple21 a b))) (p (set (tuple21 a b))) (x a) (y b))
  (= (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y)))
  (tb2t11 (infix_lspl b1 a1 (t2tb11 q) (t2tb11 p))))
  (or
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y))) q)
  (not (mem1 x (tb2t1 (dom b1 a1 (t2tb11 p)))))) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y))) p)))))

;; mem_overriding
  (assert
  (forall ((b2 ty))
  (forall ((q uni) (p uni) (x a) (y uni))
  (= (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) y) (infix_lspl b2 a1 q p))
  (or
  (and (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) y) q)
  (not (mem1 x (tb2t1 (dom b2 a1 p))))) (mem (tuple2 a1 b2)
  (Tuple2 a1 b2 (t2tb2 x) y) p))))))

;; mem_overriding
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((q uni) (p uni) (x uni) (y uni))
  (= (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) (infix_lspl b2 a2 q p))
  (or
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) q)
  (not (mem a2 x (dom b2 a2 p)))) (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) p))))))

(declare-fun direct_product (ty ty ty uni uni) uni)

;; direct_product_sort
  (assert
  (forall ((a2 ty) (b2 ty) (c2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (tuple2 a2 (tuple2 b2 c2)))
  (direct_product c2 b2 a2 x x1)))))

;; mem_direct_product
  (assert
  (forall ((b2 ty))
  (forall ((f2 uni) (g (set (tuple21 (tuple21 a b) (tuple21 c d))))
  (x (tuple21 a b)) (y uni) (z (tuple21 c d)))
  (= (mem (tuple2 (tuple2 a1 b1) (tuple2 b2 (tuple2 c1 d1)))
  (Tuple2 (tuple2 a1 b1) (tuple2 b2 (tuple2 c1 d1)) (t2tb13 x)
  (Tuple2 b2 (tuple2 c1 d1) y (t2tb693 z)))
  (direct_product (tuple2 c1 d1) b2 (tuple2 a1 b1) f2 (t2tb879 g)))
  (and (mem (tuple2 (tuple2 a1 b1) b2)
  (Tuple2 (tuple2 a1 b1) b2 (t2tb13 x) y) f2) (mem50
  (tb2t880 (Tuple2 (tuple2 a1 b1) (tuple2 c1 d1) (t2tb13 x) (t2tb693 z))) g))))))

(declare-fun t2tb5127 ((set (tuple21 (tuple21 a b) (tuple21 (tuple21 c d)
  (tuple21 c d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a b) (tuple21 (tuple21 c d) (tuple21 c
  d)))))) (sort
  (set1 (tuple2 (tuple2 a1 b1) (tuple2 (tuple2 c1 d1) (tuple2 c1 d1))))
  (t2tb5127 x))))

(declare-fun tb2t5127 (uni) (set (tuple21 (tuple21 a b) (tuple21 (tuple21 c
  d) (tuple21 c d)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a b) (tuple21 (tuple21 c d) (tuple21 c
  d)))))) (! (= (tb2t5127 (t2tb5127 i)) i) :pattern ((t2tb5127 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 a1 b1) (tuple2 (tuple2 c1 d1) (tuple2 c1 d1)))) j)
     (= (t2tb5127 (tb2t5127 j)) j)) :pattern ((t2tb5127 (tb2t5127 j))) )))

(declare-fun t2tb5128 ((tuple21 (tuple21 a b) (tuple21 (tuple21 c d)
  (tuple21 c d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a b) (tuple21 (tuple21 c d) (tuple21 c d)))))
  (sort (tuple2 (tuple2 a1 b1) (tuple2 (tuple2 c1 d1) (tuple2 c1 d1)))
  (t2tb5128 x))))

(declare-fun tb2t5128 (uni) (tuple21 (tuple21 a b) (tuple21 (tuple21 c d)
  (tuple21 c d))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a b) (tuple21 (tuple21 c d) (tuple21 c d)))))
  (! (= (tb2t5128 (t2tb5128 i)) i) :pattern ((t2tb5128 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 b1) (tuple2 (tuple2 c1 d1) (tuple2 c1 d1)))
     j) (= (t2tb5128 (tb2t5128 j)) j)) :pattern ((t2tb5128 (tb2t5128 j))) )))

;; mem_direct_product
  (assert
  (forall ((f2 (set (tuple21 (tuple21 a b) (tuple21 c d))))
  (g (set (tuple21 (tuple21 a b) (tuple21 c d)))) (x (tuple21 a b))
  (y (tuple21 c d)) (z (tuple21 c d)))
  (= (mem (tuple2 (tuple2 a1 b1) (tuple2 (tuple2 c1 d1) (tuple2 c1 d1)))
  (Tuple2 (tuple2 a1 b1) (tuple2 (tuple2 c1 d1) (tuple2 c1 d1)) (t2tb13 x)
  (Tuple2 (tuple2 c1 d1) (tuple2 c1 d1) (t2tb693 y) (t2tb693 z)))
  (direct_product (tuple2 c1 d1) (tuple2 c1 d1) (tuple2 a1 b1) (t2tb879 f2)
  (t2tb879 g)))
  (and (mem50
  (tb2t880 (Tuple2 (tuple2 a1 b1) (tuple2 c1 d1) (t2tb13 x) (t2tb693 y))) f2)
  (mem50
  (tb2t880 (Tuple2 (tuple2 a1 b1) (tuple2 c1 d1) (t2tb13 x) (t2tb693 z))) g)))))

;; mem_direct_product
  (assert
  (forall ((c2 ty))
  (forall ((f2 (set (tuple21 (tuple21 a b) (tuple21 c d)))) (g uni)
  (x (tuple21 a b)) (y (tuple21 c d)) (z uni))
  (= (mem (tuple2 (tuple2 a1 b1) (tuple2 (tuple2 c1 d1) c2))
  (Tuple2 (tuple2 a1 b1) (tuple2 (tuple2 c1 d1) c2) (t2tb13 x)
  (Tuple2 (tuple2 c1 d1) c2 (t2tb693 y) z))
  (direct_product c2 (tuple2 c1 d1) (tuple2 a1 b1) (t2tb879 f2) g))
  (and (mem50
  (tb2t880 (Tuple2 (tuple2 a1 b1) (tuple2 c1 d1) (t2tb13 x) (t2tb693 y))) f2)
  (mem (tuple2 (tuple2 a1 b1) c2) (Tuple2 (tuple2 a1 b1) c2 (t2tb13 x) z) g))))))

;; mem_direct_product
  (assert
  (forall ((f2 (set (tuple21 (tuple21 a b) c))) (g (set (tuple21 (tuple21 a
  b) d))) (x (tuple21 a b)) (y c) (z d))
  (= (mem50
  (tb2t880
  (Tuple2 (tuple2 a1 b1) (tuple2 c1 d1) (t2tb13 x)
  (Tuple2 c1 d1 (t2tb135 y) (t2tb694 z))))
  (tb2t879 (direct_product d1 c1 (tuple2 a1 b1) (t2tb245 f2) (t2tb881 g))))
  (and (mem (tuple2 (tuple2 a1 b1) c1)
  (Tuple2 (tuple2 a1 b1) c1 (t2tb13 x) (t2tb135 y)) (t2tb245 f2)) (mem
  (tuple2 (tuple2 a1 b1) d1)
  (Tuple2 (tuple2 a1 b1) d1 (t2tb13 x) (t2tb694 z)) (t2tb881 g))))))

;; mem_direct_product
  (assert
  (forall ((b2 ty))
  (forall ((f2 uni) (g (set (tuple21 b d))) (x b) (y uni) (z d))
  (= (mem (tuple2 b1 (tuple2 b2 d1))
  (Tuple2 b1 (tuple2 b2 d1) (t2tb14 x) (Tuple2 b2 d1 y (t2tb694 z)))
  (direct_product d1 b2 b1 f2 (t2tb687 g)))
  (and (mem (tuple2 b1 b2) (Tuple2 b1 b2 (t2tb14 x) y) f2) (mem23
  (tb2t692 (Tuple2 b1 d1 (t2tb14 x) (t2tb694 z))) g))))))

(declare-fun t2tb4869 ((set (tuple21 b (tuple21 d d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 b (tuple21 d d))))) (sort
  (set1 (tuple2 b1 (tuple2 d1 d1))) (t2tb4869 x))))

(declare-fun tb2t4869 (uni) (set (tuple21 b (tuple21 d d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 b (tuple21 d d)))))
  (! (= (tb2t4869 (t2tb4869 i)) i) :pattern ((t2tb4869 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 b1 (tuple2 d1 d1))) j)
     (= (t2tb4869 (tb2t4869 j)) j)) :pattern ((t2tb4869 (tb2t4869 j))) )))

(declare-fun t2tb4870 ((tuple21 b (tuple21 d d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 b (tuple21 d d)))) (sort (tuple2 b1 (tuple2 d1 d1))
  (t2tb4870 x))))

(declare-fun tb2t4870 (uni) (tuple21 b (tuple21 d d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 b (tuple21 d d))))
  (! (= (tb2t4870 (t2tb4870 i)) i) :pattern ((t2tb4870 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 b1 (tuple2 d1 d1)) j) (= (t2tb4870 (tb2t4870 j)) j)) :pattern (
  (t2tb4870 (tb2t4870 j))) )))

;; mem_direct_product
  (assert
  (forall ((f2 (set (tuple21 b d))) (g (set (tuple21 b d))) (x b) (y d)
  (z d))
  (= (mem (tuple2 b1 (tuple2 d1 d1))
  (Tuple2 b1 (tuple2 d1 d1) (t2tb14 x)
  (Tuple2 d1 d1 (t2tb694 y) (t2tb694 z)))
  (direct_product d1 d1 b1 (t2tb687 f2) (t2tb687 g)))
  (and (mem23 (tb2t692 (Tuple2 b1 d1 (t2tb14 x) (t2tb694 y))) f2) (mem23
  (tb2t692 (Tuple2 b1 d1 (t2tb14 x) (t2tb694 z))) g)))))

;; mem_direct_product
  (assert
  (forall ((c2 ty))
  (forall ((f2 (set (tuple21 b d))) (g uni) (x b) (y d) (z uni))
  (= (mem (tuple2 b1 (tuple2 d1 c2))
  (Tuple2 b1 (tuple2 d1 c2) (t2tb14 x) (Tuple2 d1 c2 (t2tb694 y) z))
  (direct_product c2 d1 b1 (t2tb687 f2) g))
  (and (mem23 (tb2t692 (Tuple2 b1 d1 (t2tb14 x) (t2tb694 y))) f2) (mem
  (tuple2 b1 c2) (Tuple2 b1 c2 (t2tb14 x) z) g))))))

;; mem_direct_product
  (assert
  (forall ((b2 ty))
  (forall ((f2 uni) (g (set (tuple21 a c))) (x a) (y uni) (z c))
  (= (mem (tuple2 a1 (tuple2 b2 c1))
  (Tuple2 a1 (tuple2 b2 c1) (t2tb2 x) (Tuple2 b2 c1 y (t2tb135 z)))
  (direct_product c1 b2 a1 f2 (t2tb129 g)))
  (and (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) y) f2) (mem10
  (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 z))) g))))))

;; mem_direct_product
  (assert
  (forall ((b2 ty))
  (forall ((f2 uni) (g (set (tuple21 a b))) (x a) (y uni) (z b))
  (= (mem (tuple2 a1 (tuple2 b2 b1))
  (Tuple2 a1 (tuple2 b2 b1) (t2tb2 x) (Tuple2 b2 b1 y (t2tb14 z)))
  (direct_product b1 b2 a1 f2 (t2tb11 g)))
  (and (mem (tuple2 a1 b2) (Tuple2 a1 b2 (t2tb2 x) y) f2) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 z))) g))))))

(declare-fun t2tb330 ((set (tuple21 a (tuple21 c c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (tuple21 c c))))) (sort
  (set1 (tuple2 a1 (tuple2 c1 c1))) (t2tb330 x))))

(declare-fun tb2t330 (uni) (set (tuple21 a (tuple21 c c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (tuple21 c c)))))
  (! (= (tb2t330 (t2tb330 i)) i) :pattern ((t2tb330 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (tuple2 c1 c1))) j)
     (= (t2tb330 (tb2t330 j)) j)) :pattern ((t2tb330 (tb2t330 j))) )))

(declare-fun t2tb331 ((tuple21 a (tuple21 c c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (tuple21 c c)))) (sort (tuple2 a1 (tuple2 c1 c1))
  (t2tb331 x))))

(declare-fun tb2t331 (uni) (tuple21 a (tuple21 c c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (tuple21 c c))))
  (! (= (tb2t331 (t2tb331 i)) i) :pattern ((t2tb331 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (tuple2 c1 c1)) j) (= (t2tb331 (tb2t331 j)) j)) :pattern (
  (t2tb331 (tb2t331 j))) )))

;; mem_direct_product
  (assert
  (forall ((f2 (set (tuple21 a c))) (g (set (tuple21 a c))) (x a) (y c)
  (z c))
  (= (mem (tuple2 a1 (tuple2 c1 c1))
  (Tuple2 a1 (tuple2 c1 c1) (t2tb2 x) (Tuple2 c1 c1 (t2tb135 y) (t2tb135 z)))
  (direct_product c1 c1 a1 (t2tb129 f2) (t2tb129 g)))
  (and (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y))) f2) (mem10
  (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 z))) g)))))

(declare-fun t2tb332 ((set (tuple21 a (tuple21 c b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (tuple21 c b))))) (sort
  (set1 (tuple2 a1 (tuple2 c1 b1))) (t2tb332 x))))

(declare-fun tb2t332 (uni) (set (tuple21 a (tuple21 c b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (tuple21 c b)))))
  (! (= (tb2t332 (t2tb332 i)) i) :pattern ((t2tb332 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (tuple2 c1 b1))) j)
     (= (t2tb332 (tb2t332 j)) j)) :pattern ((t2tb332 (tb2t332 j))) )))

(declare-fun t2tb333 ((tuple21 a (tuple21 c b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (tuple21 c b)))) (sort (tuple2 a1 (tuple2 c1 b1))
  (t2tb333 x))))

(declare-fun tb2t333 (uni) (tuple21 a (tuple21 c b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (tuple21 c b))))
  (! (= (tb2t333 (t2tb333 i)) i) :pattern ((t2tb333 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (tuple2 c1 b1)) j) (= (t2tb333 (tb2t333 j)) j)) :pattern (
  (t2tb333 (tb2t333 j))) )))

;; mem_direct_product
  (assert
  (forall ((f2 (set (tuple21 a c))) (g (set (tuple21 a b))) (x a) (y c)
  (z b))
  (= (mem (tuple2 a1 (tuple2 c1 b1))
  (Tuple2 a1 (tuple2 c1 b1) (t2tb2 x) (Tuple2 c1 b1 (t2tb135 y) (t2tb14 z)))
  (direct_product b1 c1 a1 (t2tb129 f2) (t2tb11 g)))
  (and (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y))) f2) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 z))) g)))))

;; mem_direct_product
  (assert
  (forall ((c2 ty))
  (forall ((f2 (set (tuple21 a c))) (g uni) (x a) (y c) (z uni))
  (= (mem (tuple2 a1 (tuple2 c1 c2))
  (Tuple2 a1 (tuple2 c1 c2) (t2tb2 x) (Tuple2 c1 c2 (t2tb135 y) z))
  (direct_product c2 c1 a1 (t2tb129 f2) g))
  (and (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y))) f2) (mem
  (tuple2 a1 c2) (Tuple2 a1 c2 (t2tb2 x) z) g))))))

(declare-fun t2tb260 ((tuple21 a (tuple21 b c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (tuple21 b c)))) (sort (tuple2 a1 (tuple2 b1 c1))
  (t2tb260 x))))

(declare-fun tb2t260 (uni) (tuple21 a (tuple21 b c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (tuple21 b c))))
  (! (= (tb2t260 (t2tb260 i)) i) :pattern ((t2tb260 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (tuple2 b1 c1)) j) (= (t2tb260 (tb2t260 j)) j)) :pattern (
  (t2tb260 (tb2t260 j))) )))

(declare-fun t2tb261 ((set (tuple21 a (tuple21 b c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (tuple21 b c))))) (sort
  (set1 (tuple2 a1 (tuple2 b1 c1))) (t2tb261 x))))

(declare-fun tb2t261 (uni) (set (tuple21 a (tuple21 b c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (tuple21 b c)))))
  (! (= (tb2t261 (t2tb261 i)) i) :pattern ((t2tb261 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (tuple2 b1 c1))) j)
     (= (t2tb261 (tb2t261 j)) j)) :pattern ((t2tb261 (tb2t261 j))) )))

;; mem_direct_product
  (assert
  (forall ((f2 (set (tuple21 a b))) (g (set (tuple21 a c))) (x a) (y b)
  (z c))
  (= (mem (tuple2 a1 (tuple2 b1 c1))
  (Tuple2 a1 (tuple2 b1 c1) (t2tb2 x) (Tuple2 b1 c1 (t2tb14 y) (t2tb135 z)))
  (direct_product c1 b1 a1 (t2tb11 f2) (t2tb129 g)))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y))) f2) (mem10
  (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 z))) g)))))

(declare-fun t2tb59 ((set (tuple21 a (tuple21 b b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 a (tuple21 b b))))) (sort
  (set1 (tuple2 a1 (tuple2 b1 b1))) (t2tb59 x))))

(declare-fun tb2t59 (uni) (set (tuple21 a (tuple21 b b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 a (tuple21 b b)))))
  (! (= (tb2t59 (t2tb59 i)) i) :pattern ((t2tb59 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 a1 (tuple2 b1 b1))) j)
     (= (t2tb59 (tb2t59 j)) j)) :pattern ((t2tb59 (tb2t59 j))) )))

(declare-fun t2tb60 ((tuple21 a (tuple21 b b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 a (tuple21 b b)))) (sort (tuple2 a1 (tuple2 b1 b1))
  (t2tb60 x))))

(declare-fun tb2t60 (uni) (tuple21 a (tuple21 b b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 a (tuple21 b b))))
  (! (= (tb2t60 (t2tb60 i)) i) :pattern ((t2tb60 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 a1 (tuple2 b1 b1)) j) (= (t2tb60 (tb2t60 j)) j)) :pattern (
  (t2tb60 (tb2t60 j))) )))

;; mem_direct_product
  (assert
  (forall ((f2 (set (tuple21 a b))) (g (set (tuple21 a b))) (x a) (y b)
  (z b))
  (= (mem (tuple2 a1 (tuple2 b1 b1))
  (Tuple2 a1 (tuple2 b1 b1) (t2tb2 x) (Tuple2 b1 b1 (t2tb14 y) (t2tb14 z)))
  (direct_product b1 b1 a1 (t2tb11 f2) (t2tb11 g)))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y))) f2) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 z))) g)))))

;; mem_direct_product
  (assert
  (forall ((c2 ty))
  (forall ((f2 (set (tuple21 a b))) (g uni) (x a) (y b) (z uni))
  (= (mem (tuple2 a1 (tuple2 b1 c2))
  (Tuple2 a1 (tuple2 b1 c2) (t2tb2 x) (Tuple2 b1 c2 (t2tb14 y) z))
  (direct_product c2 b1 a1 (t2tb11 f2) g))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y))) f2) (mem
  (tuple2 a1 c2) (Tuple2 a1 c2 (t2tb2 x) z) g))))))

;; mem_direct_product
  (assert
  (forall ((a2 ty) (b2 ty) (c2 ty))
  (forall ((f2 uni) (g uni) (x uni) (y uni) (z uni))
  (= (mem (tuple2 a2 (tuple2 b2 c2))
  (Tuple2 a2 (tuple2 b2 c2) x (Tuple2 b2 c2 y z))
  (direct_product c2 b2 a2 f2 g))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y) f2) (mem (tuple2 a2 c2)
  (Tuple2 a2 c2 x z) g))))))

(declare-fun prj1 (ty ty uni) uni)

;; prj1_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni)) (sort (set1 (tuple2 (tuple2 a2 b2) a2)) (prj1 b2 a2 x)))))

(declare-fun t2tb5129 ((tuple21 (set b) (set d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set b) (set d)))) (sort (tuple2 (set1 b1) (set1 d1))
  (t2tb5129 x))))

(declare-fun tb2t5129 (uni) (tuple21 (set b) (set d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set b) (set d))))
  (! (= (tb2t5129 (t2tb5129 i)) i) :pattern ((t2tb5129 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 b1) (set1 d1)) j) (= (t2tb5129 (tb2t5129 j)) j)) :pattern (
  (t2tb5129 (tb2t5129 j))) )))

;; mem_proj_op_1
  (assert
  (forall ((s (set b)) (t (set d)) (x b) (y d) (z b))
  (= (mem (tuple2 (tuple2 b1 d1) b1)
  (Tuple2 (tuple2 b1 d1) b1 (Tuple2 b1 d1 (t2tb14 x) (t2tb694 y)) (t2tb14 z))
  (prj1 d1 b1 (Tuple2 (set1 b1) (set1 d1) (t2tb12 s) (t2tb690 t))))
  (and (mem (tuple2 (tuple2 b1 d1) b1)
  (Tuple2 (tuple2 b1 d1) b1 (Tuple2 b1 d1 (t2tb14 x) (t2tb694 y)) (t2tb14 z))
  (times b1 (tuple2 b1 d1) (t2tb687 (times10 s t)) (t2tb12 s))) (= z x)))))

(declare-fun t2tb5130 ((tuple21 (set a) (set c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set a) (set c)))) (sort (tuple2 (set1 a1) (set1 c1))
  (t2tb5130 x))))

(declare-fun tb2t5130 (uni) (tuple21 (set a) (set c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set a) (set c))))
  (! (= (tb2t5130 (t2tb5130 i)) i) :pattern ((t2tb5130 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 a1) (set1 c1)) j) (= (t2tb5130 (tb2t5130 j)) j)) :pattern (
  (t2tb5130 (tb2t5130 j))) )))

;; mem_proj_op_1
  (assert
  (forall ((s (set a)) (t (set c)) (x a) (y c) (z a))
  (= (mem (tuple2 (tuple2 a1 c1) a1)
  (Tuple2 (tuple2 a1 c1) a1 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y)) (t2tb2 z))
  (prj1 c1 a1 (Tuple2 (set1 a1) (set1 c1) (t2tb1 s) (t2tb132 t))))
  (and (mem (tuple2 (tuple2 a1 c1) a1)
  (Tuple2 (tuple2 a1 c1) a1 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y)) (t2tb2 z))
  (times a1 (tuple2 a1 c1) (t2tb129 (times4 s t)) (t2tb1 s))) (= z x)))))

(declare-fun t2tb495 ((tuple21 (set a) (set b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (set a) (set b)))) (sort (tuple2 (set1 a1) (set1 b1))
  (t2tb495 x))))

(declare-fun tb2t495 (uni) (tuple21 (set a) (set b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (set a) (set b))))
  (! (= (tb2t495 (t2tb495 i)) i) :pattern ((t2tb495 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (set1 a1) (set1 b1)) j) (= (t2tb495 (tb2t495 j)) j)) :pattern (
  (t2tb495 (tb2t495 j))) )))

;; mem_proj_op_1
  (assert
  (forall ((s (set a)) (t (set b)) (x a) (y b) (z a))
  (= (mem (tuple2 (tuple2 a1 b1) a1)
  (Tuple2 (tuple2 a1 b1) a1 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y)) (t2tb2 z))
  (prj1 b1 a1 (Tuple2 (set1 a1) (set1 b1) (t2tb1 s) (t2tb12 t))))
  (and (mem (tuple2 (tuple2 a1 b1) a1)
  (Tuple2 (tuple2 a1 b1) a1 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y)) (t2tb2 z))
  (times a1 (tuple2 a1 b1) (t2tb11 (times2 s t)) (t2tb1 s))) (= z x)))))

;; mem_proj_op_1
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (x uni) (y uni) (z uni))
  (=> (sort a2 x)
  (=> (sort a2 z)
  (= (mem (tuple2 (tuple2 a2 b2) a2)
  (Tuple2 (tuple2 a2 b2) a2 (Tuple2 a2 b2 x y) z)
  (prj1 b2 a2 (Tuple2 (set1 a2) (set1 b2) s t)))
  (and (mem (tuple2 (tuple2 a2 b2) a2)
  (Tuple2 (tuple2 a2 b2) a2 (Tuple2 a2 b2 x y) z)
  (times a2 (tuple2 a2 b2) (times b2 a2 s t) s)) (= z x))))))))

(declare-fun prj2 (ty ty uni) uni)

;; prj2_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni)) (sort (set1 (tuple2 (tuple2 a2 b2) b2)) (prj2 b2 a2 x)))))

;; mem_proj_op_2
  (assert
  (forall ((s (set b)) (t (set d)) (x b) (y d) (z d))
  (= (mem (tuple2 (tuple2 b1 d1) d1)
  (Tuple2 (tuple2 b1 d1) d1 (Tuple2 b1 d1 (t2tb14 x) (t2tb694 y))
  (t2tb694 z))
  (prj2 d1 b1 (Tuple2 (set1 b1) (set1 d1) (t2tb12 s) (t2tb690 t))))
  (and (mem (tuple2 (tuple2 b1 d1) d1)
  (Tuple2 (tuple2 b1 d1) d1 (Tuple2 b1 d1 (t2tb14 x) (t2tb694 y))
  (t2tb694 z)) (times d1 (tuple2 b1 d1) (t2tb687 (times10 s t)) (t2tb690 t)))
  (= z y)))))

;; mem_proj_op_2
  (assert
  (forall ((s (set a)) (t (set c)) (x a) (y c) (z c))
  (= (mem (tuple2 (tuple2 a1 c1) c1)
  (Tuple2 (tuple2 a1 c1) c1 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y)) (t2tb135 z))
  (prj2 c1 a1 (Tuple2 (set1 a1) (set1 c1) (t2tb1 s) (t2tb132 t))))
  (and (mem (tuple2 (tuple2 a1 c1) c1)
  (Tuple2 (tuple2 a1 c1) c1 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y)) (t2tb135 z))
  (times c1 (tuple2 a1 c1) (t2tb129 (times4 s t)) (t2tb132 t))) (= z y)))))

;; mem_proj_op_2
  (assert
  (forall ((s (set a)) (t (set b)) (x a) (y b) (z b))
  (= (mem (tuple2 (tuple2 a1 b1) b1)
  (Tuple2 (tuple2 a1 b1) b1 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y)) (t2tb14 z))
  (prj2 b1 a1 (Tuple2 (set1 a1) (set1 b1) (t2tb1 s) (t2tb12 t))))
  (and (mem (tuple2 (tuple2 a1 b1) b1)
  (Tuple2 (tuple2 a1 b1) b1 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y)) (t2tb14 z))
  (times b1 (tuple2 a1 b1) (t2tb11 (times2 s t)) (t2tb12 t))) (= z y)))))

;; mem_proj_op_2
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (x uni) (y uni) (z uni))
  (=> (sort b2 y)
  (=> (sort b2 z)
  (= (mem (tuple2 (tuple2 a2 b2) b2)
  (Tuple2 (tuple2 a2 b2) b2 (Tuple2 a2 b2 x y) z)
  (prj2 b2 a2 (Tuple2 (set1 a2) (set1 b2) s t)))
  (and (mem (tuple2 (tuple2 a2 b2) b2)
  (Tuple2 (tuple2 a2 b2) b2 (Tuple2 a2 b2 x y) z)
  (times b2 (tuple2 a2 b2) (times b2 a2 s t) t)) (= z y))))))))

(declare-fun parallel_product (ty ty ty ty uni uni) uni)

;; parallel_product_sort
  (assert
  (forall ((a2 ty) (b2 ty) (c2 ty) (d2 ty))
  (forall ((x uni) (x1 uni)) (sort
  (set1 (tuple2 (tuple2 a2 c2) (tuple2 b2 d2)))
  (parallel_product d2 c2 b2 a2 x x1)))))

(declare-fun parallel_product6 ((set (tuple21 a c)) (set (tuple21 b
  d))) (set (tuple21 (tuple21 a b) (tuple21 c d))))

;; mem_parallel_product
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((h uni) (k (set (tuple21 (tuple21 a b) (tuple21 c d)))) (x uni)
  (y (tuple21 a b)) (z uni) (w (tuple21 c d)))
  (= (mem (tuple2 (tuple2 a2 (tuple2 a1 b1)) (tuple2 b2 (tuple2 c1 d1)))
  (Tuple2 (tuple2 a2 (tuple2 a1 b1)) (tuple2 b2 (tuple2 c1 d1))
  (Tuple2 a2 (tuple2 a1 b1) x (t2tb13 y))
  (Tuple2 b2 (tuple2 c1 d1) z (t2tb693 w)))
  (parallel_product (tuple2 c1 d1) (tuple2 a1 b1) b2 a2 h (t2tb879 k)))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x z) h) (mem50
  (tb2t880 (Tuple2 (tuple2 a1 b1) (tuple2 c1 d1) (t2tb13 y) (t2tb693 w))) k))))))

;; mem_parallel_product
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((h uni) (k (set (tuple21 b d))) (x uni) (y b) (z uni) (w d))
  (= (mem (tuple2 (tuple2 a2 b1) (tuple2 b2 d1))
  (Tuple2 (tuple2 a2 b1) (tuple2 b2 d1) (Tuple2 a2 b1 x (t2tb14 y))
  (Tuple2 b2 d1 z (t2tb694 w))) (parallel_product d1 b1 b2 a2 h (t2tb687 k)))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x z) h) (mem23
  (tb2t692 (Tuple2 b1 d1 (t2tb14 y) (t2tb694 w))) k))))))

;; mem_parallel_product
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((h uni) (k (set (tuple21 a c))) (x uni) (y a) (z uni) (w c))
  (= (mem (tuple2 (tuple2 a2 a1) (tuple2 b2 c1))
  (Tuple2 (tuple2 a2 a1) (tuple2 b2 c1) (Tuple2 a2 a1 x (t2tb2 y))
  (Tuple2 b2 c1 z (t2tb135 w))) (parallel_product c1 a1 b2 a2 h (t2tb129 k)))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x z) h) (mem10
  (tb2t133 (Tuple2 a1 c1 (t2tb2 y) (t2tb135 w))) k))))))

;; mem_parallel_product
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((h uni) (k (set (tuple21 a b))) (x uni) (y a) (z uni) (w b))
  (= (mem (tuple2 (tuple2 a2 a1) (tuple2 b2 b1))
  (Tuple2 (tuple2 a2 a1) (tuple2 b2 b1) (Tuple2 a2 a1 x (t2tb2 y))
  (Tuple2 b2 b1 z (t2tb14 w))) (parallel_product b1 a1 b2 a2 h (t2tb11 k)))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x z) h) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 y) (t2tb14 w))) k))))))

(declare-fun t2tb5131 ((set (tuple21 (tuple21 (tuple21 a b) (tuple21 a b))
  (tuple21 (tuple21 c d) (tuple21 c d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 a b) (tuple21 a b))
  (tuple21 (tuple21 c d) (tuple21 c d)))))) (sort
  (set1
  (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 b1))
  (tuple2 (tuple2 c1 d1) (tuple2 c1 d1)))) (t2tb5131 x))))

(declare-fun tb2t5131 (uni) (set (tuple21 (tuple21 (tuple21 a b) (tuple21 a
  b)) (tuple21 (tuple21 c d) (tuple21 c d)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 a b) (tuple21 a b))
  (tuple21 (tuple21 c d) (tuple21 c d))))))
  (! (= (tb2t5131 (t2tb5131 i)) i) :pattern ((t2tb5131 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1
     (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 b1))
     (tuple2 (tuple2 c1 d1) (tuple2 c1 d1)))) j)
     (= (t2tb5131 (tb2t5131 j)) j)) :pattern ((t2tb5131 (tb2t5131 j))) )))

(declare-fun t2tb5132 ((tuple21 (tuple21 (tuple21 a b) (tuple21 a b))
  (tuple21 (tuple21 c d) (tuple21 c d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 a b) (tuple21 a b))
  (tuple21 (tuple21 c d) (tuple21 c d))))) (sort
  (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 b1))
  (tuple2 (tuple2 c1 d1) (tuple2 c1 d1))) (t2tb5132 x))))

(declare-fun tb2t5132 (uni) (tuple21 (tuple21 (tuple21 a b) (tuple21 a b))
  (tuple21 (tuple21 c d) (tuple21 c d))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 a b) (tuple21 a b))
  (tuple21 (tuple21 c d) (tuple21 c d)))))
  (! (= (tb2t5132 (t2tb5132 i)) i) :pattern ((t2tb5132 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 b1))
     (tuple2 (tuple2 c1 d1) (tuple2 c1 d1))) j)
     (= (t2tb5132 (tb2t5132 j)) j)) :pattern ((t2tb5132 (tb2t5132 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 (tuple21 a b) (tuple21 c d))))
  (k (set (tuple21 (tuple21 a b) (tuple21 c d)))) (x (tuple21 a b))
  (y (tuple21 a b)) (z (tuple21 c d)) (w (tuple21 c d)))
  (= (mem
  (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 b1))
  (tuple2 (tuple2 c1 d1) (tuple2 c1 d1)))
  (Tuple2 (tuple2 (tuple2 a1 b1) (tuple2 a1 b1))
  (tuple2 (tuple2 c1 d1) (tuple2 c1 d1))
  (Tuple2 (tuple2 a1 b1) (tuple2 a1 b1) (t2tb13 x) (t2tb13 y))
  (Tuple2 (tuple2 c1 d1) (tuple2 c1 d1) (t2tb693 z) (t2tb693 w)))
  (parallel_product (tuple2 c1 d1) (tuple2 a1 b1) (tuple2 c1 d1)
  (tuple2 a1 b1) (t2tb879 h) (t2tb879 k)))
  (and (mem50
  (tb2t880 (Tuple2 (tuple2 a1 b1) (tuple2 c1 d1) (t2tb13 x) (t2tb693 z))) h)
  (mem50
  (tb2t880 (Tuple2 (tuple2 a1 b1) (tuple2 c1 d1) (t2tb13 y) (t2tb693 w))) k)))))

(declare-fun t2tb5133 ((set (tuple21 (tuple21 (tuple21 a b) b)
  (tuple21 (tuple21 c d) d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 a b) b) (tuple21 (tuple21 c d)
  d))))) (sort
  (set1 (tuple2 (tuple2 (tuple2 a1 b1) b1) (tuple2 (tuple2 c1 d1) d1)))
  (t2tb5133 x))))

(declare-fun tb2t5133 (uni) (set (tuple21 (tuple21 (tuple21 a b) b)
  (tuple21 (tuple21 c d) d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 a b) b) (tuple21 (tuple21 c d)
  d))))) (! (= (tb2t5133 (t2tb5133 i)) i) :pattern ((t2tb5133 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 (tuple2 a1 b1) b1) (tuple2 (tuple2 c1 d1) d1))) j)
     (= (t2tb5133 (tb2t5133 j)) j)) :pattern ((t2tb5133 (tb2t5133 j))) )))

(declare-fun t2tb802 ((tuple21 (tuple21 c d) d)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 c d) d))) (sort (tuple2 (tuple2 c1 d1) d1)
  (t2tb802 x))))

(declare-fun tb2t802 (uni) (tuple21 (tuple21 c d) d))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 c d) d)))
  (! (= (tb2t802 (t2tb802 i)) i) :pattern ((t2tb802 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 c1 d1) d1) j) (= (t2tb802 (tb2t802 j)) j)) :pattern (
  (t2tb802 (tb2t802 j))) )))

(declare-fun t2tb5134 ((tuple21 (tuple21 (tuple21 a b) b) (tuple21 (tuple21 c
  d) d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 a b) b) (tuple21 (tuple21 c d) d))))
  (sort (tuple2 (tuple2 (tuple2 a1 b1) b1) (tuple2 (tuple2 c1 d1) d1))
  (t2tb5134 x))))

(declare-fun tb2t5134 (uni) (tuple21 (tuple21 (tuple21 a b) b)
  (tuple21 (tuple21 c d) d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 a b) b) (tuple21 (tuple21 c d) d))))
  (! (= (tb2t5134 (t2tb5134 i)) i) :pattern ((t2tb5134 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 (tuple2 a1 b1) b1) (tuple2 (tuple2 c1 d1) d1))
     j) (= (t2tb5134 (tb2t5134 j)) j)) :pattern ((t2tb5134 (tb2t5134 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 (tuple21 a b) (tuple21 c d)))) (k (set (tuple21 b
  d))) (x (tuple21 a b)) (y b) (z (tuple21 c d)) (w d))
  (= (mem (tuple2 (tuple2 (tuple2 a1 b1) b1) (tuple2 (tuple2 c1 d1) d1))
  (Tuple2 (tuple2 (tuple2 a1 b1) b1) (tuple2 (tuple2 c1 d1) d1)
  (Tuple2 (tuple2 a1 b1) b1 (t2tb13 x) (t2tb14 y))
  (Tuple2 (tuple2 c1 d1) d1 (t2tb693 z) (t2tb694 w)))
  (parallel_product d1 b1 (tuple2 c1 d1) (tuple2 a1 b1) (t2tb879 h)
  (t2tb687 k)))
  (and (mem50
  (tb2t880 (Tuple2 (tuple2 a1 b1) (tuple2 c1 d1) (t2tb13 x) (t2tb693 z))) h)
  (mem23 (tb2t692 (Tuple2 b1 d1 (t2tb14 y) (t2tb694 w))) k)))))

(declare-fun t2tb5135 ((set (tuple21 (tuple21 (tuple21 a b) a)
  (tuple21 (tuple21 c d) c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 a b) a) (tuple21 (tuple21 c d)
  c))))) (sort
  (set1 (tuple2 (tuple2 (tuple2 a1 b1) a1) (tuple2 (tuple2 c1 d1) c1)))
  (t2tb5135 x))))

(declare-fun tb2t5135 (uni) (set (tuple21 (tuple21 (tuple21 a b) a)
  (tuple21 (tuple21 c d) c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 a b) a) (tuple21 (tuple21 c d)
  c))))) (! (= (tb2t5135 (t2tb5135 i)) i) :pattern ((t2tb5135 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 (tuple2 a1 b1) a1) (tuple2 (tuple2 c1 d1) c1))) j)
     (= (t2tb5135 (tb2t5135 j)) j)) :pattern ((t2tb5135 (tb2t5135 j))) )))

(declare-fun t2tb5136 ((tuple21 (tuple21 (tuple21 a b) a) (tuple21 (tuple21 c
  d) c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 a b) a) (tuple21 (tuple21 c d) c))))
  (sort (tuple2 (tuple2 (tuple2 a1 b1) a1) (tuple2 (tuple2 c1 d1) c1))
  (t2tb5136 x))))

(declare-fun tb2t5136 (uni) (tuple21 (tuple21 (tuple21 a b) a)
  (tuple21 (tuple21 c d) c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 a b) a) (tuple21 (tuple21 c d) c))))
  (! (= (tb2t5136 (t2tb5136 i)) i) :pattern ((t2tb5136 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 (tuple2 a1 b1) a1) (tuple2 (tuple2 c1 d1) c1))
     j) (= (t2tb5136 (tb2t5136 j)) j)) :pattern ((t2tb5136 (tb2t5136 j))) )))

(declare-fun t2tb806 ((tuple21 (tuple21 c d) c)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 c d) c))) (sort (tuple2 (tuple2 c1 d1) c1)
  (t2tb806 x))))

(declare-fun tb2t806 (uni) (tuple21 (tuple21 c d) c))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 c d) c)))
  (! (= (tb2t806 (t2tb806 i)) i) :pattern ((t2tb806 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 c1 d1) c1) j) (= (t2tb806 (tb2t806 j)) j)) :pattern (
  (t2tb806 (tb2t806 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 (tuple21 a b) (tuple21 c d)))) (k (set (tuple21 a
  c))) (x (tuple21 a b)) (y a) (z (tuple21 c d)) (w c))
  (= (mem (tuple2 (tuple2 (tuple2 a1 b1) a1) (tuple2 (tuple2 c1 d1) c1))
  (Tuple2 (tuple2 (tuple2 a1 b1) a1) (tuple2 (tuple2 c1 d1) c1)
  (Tuple2 (tuple2 a1 b1) a1 (t2tb13 x) (t2tb2 y))
  (Tuple2 (tuple2 c1 d1) c1 (t2tb693 z) (t2tb135 w)))
  (parallel_product c1 a1 (tuple2 c1 d1) (tuple2 a1 b1) (t2tb879 h)
  (t2tb129 k)))
  (and (mem50
  (tb2t880 (Tuple2 (tuple2 a1 b1) (tuple2 c1 d1) (t2tb13 x) (t2tb693 z))) h)
  (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 y) (t2tb135 w))) k)))))

(declare-fun t2tb812 ((tuple21 (tuple21 c d) b)) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 c d) b))) (sort (tuple2 (tuple2 c1 d1) b1)
  (t2tb812 x))))

(declare-fun tb2t812 (uni) (tuple21 (tuple21 c d) b))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 c d) b)))
  (! (= (tb2t812 (t2tb812 i)) i) :pattern ((t2tb812 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 c1 d1) b1) j) (= (t2tb812 (tb2t812 j)) j)) :pattern (
  (t2tb812 (tb2t812 j))) )))

(declare-fun t2tb5137 ((set (tuple21 (tuple21 (tuple21 a b) a)
  (tuple21 (tuple21 c d) b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 (tuple21 a b) a) (tuple21 (tuple21 c d)
  b))))) (sort
  (set1 (tuple2 (tuple2 (tuple2 a1 b1) a1) (tuple2 (tuple2 c1 d1) b1)))
  (t2tb5137 x))))

(declare-fun tb2t5137 (uni) (set (tuple21 (tuple21 (tuple21 a b) a)
  (tuple21 (tuple21 c d) b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 (tuple21 a b) a) (tuple21 (tuple21 c d)
  b))))) (! (= (tb2t5137 (t2tb5137 i)) i) :pattern ((t2tb5137 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 (tuple2 a1 b1) a1) (tuple2 (tuple2 c1 d1) b1))) j)
     (= (t2tb5137 (tb2t5137 j)) j)) :pattern ((t2tb5137 (tb2t5137 j))) )))

(declare-fun t2tb5138 ((tuple21 (tuple21 (tuple21 a b) a) (tuple21 (tuple21 c
  d) b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 (tuple21 a b) a) (tuple21 (tuple21 c d) b))))
  (sort (tuple2 (tuple2 (tuple2 a1 b1) a1) (tuple2 (tuple2 c1 d1) b1))
  (t2tb5138 x))))

(declare-fun tb2t5138 (uni) (tuple21 (tuple21 (tuple21 a b) a)
  (tuple21 (tuple21 c d) b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 (tuple21 a b) a) (tuple21 (tuple21 c d) b))))
  (! (= (tb2t5138 (t2tb5138 i)) i) :pattern ((t2tb5138 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 (tuple2 a1 b1) a1) (tuple2 (tuple2 c1 d1) b1))
     j) (= (t2tb5138 (tb2t5138 j)) j)) :pattern ((t2tb5138 (tb2t5138 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 (tuple21 a b) (tuple21 c d)))) (k (set (tuple21 a
  b))) (x (tuple21 a b)) (y a) (z (tuple21 c d)) (w b))
  (= (mem (tuple2 (tuple2 (tuple2 a1 b1) a1) (tuple2 (tuple2 c1 d1) b1))
  (Tuple2 (tuple2 (tuple2 a1 b1) a1) (tuple2 (tuple2 c1 d1) b1)
  (Tuple2 (tuple2 a1 b1) a1 (t2tb13 x) (t2tb2 y))
  (Tuple2 (tuple2 c1 d1) b1 (t2tb693 z) (t2tb14 w)))
  (parallel_product b1 a1 (tuple2 c1 d1) (tuple2 a1 b1) (t2tb879 h)
  (t2tb11 k)))
  (and (mem50
  (tb2t880 (Tuple2 (tuple2 a1 b1) (tuple2 c1 d1) (t2tb13 x) (t2tb693 z))) h)
  (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 y) (t2tb14 w))) k)))))

;; mem_parallel_product
  (assert
  (forall ((c2 ty) (d2 ty))
  (forall ((h (set (tuple21 (tuple21 a b) (tuple21 c d)))) (k uni)
  (x (tuple21 a b)) (y uni) (z (tuple21 c d)) (w uni))
  (= (mem (tuple2 (tuple2 (tuple2 a1 b1) c2) (tuple2 (tuple2 c1 d1) d2))
  (Tuple2 (tuple2 (tuple2 a1 b1) c2) (tuple2 (tuple2 c1 d1) d2)
  (Tuple2 (tuple2 a1 b1) c2 (t2tb13 x) y)
  (Tuple2 (tuple2 c1 d1) d2 (t2tb693 z) w))
  (parallel_product d2 c2 (tuple2 c1 d1) (tuple2 a1 b1) (t2tb879 h) k))
  (and (mem50
  (tb2t880 (Tuple2 (tuple2 a1 b1) (tuple2 c1 d1) (t2tb13 x) (t2tb693 z))) h)
  (mem (tuple2 c2 d2) (Tuple2 c2 d2 y w) k))))))

(declare-fun t2tb824 ((tuple21 d (tuple21 c d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 d (tuple21 c d)))) (sort (tuple2 d1 (tuple2 c1 d1))
  (t2tb824 x))))

(declare-fun tb2t824 (uni) (tuple21 d (tuple21 c d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 d (tuple21 c d))))
  (! (= (tb2t824 (t2tb824 i)) i) :pattern ((t2tb824 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 d1 (tuple2 c1 d1)) j) (= (t2tb824 (tb2t824 j)) j)) :pattern (
  (t2tb824 (tb2t824 j))) )))

(declare-fun t2tb5139 ((set (tuple21 (tuple21 b (tuple21 a b)) (tuple21 d
  (tuple21 c d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b (tuple21 a b)) (tuple21 d (tuple21 c
  d)))))) (sort
  (set1 (tuple2 (tuple2 b1 (tuple2 a1 b1)) (tuple2 d1 (tuple2 c1 d1))))
  (t2tb5139 x))))

(declare-fun tb2t5139 (uni) (set (tuple21 (tuple21 b (tuple21 a b))
  (tuple21 d (tuple21 c d)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b (tuple21 a b)) (tuple21 d (tuple21 c
  d)))))) (! (= (tb2t5139 (t2tb5139 i)) i) :pattern ((t2tb5139 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 b1 (tuple2 a1 b1)) (tuple2 d1 (tuple2 c1 d1)))) j)
     (= (t2tb5139 (tb2t5139 j)) j)) :pattern ((t2tb5139 (tb2t5139 j))) )))

(declare-fun t2tb5140 ((tuple21 (tuple21 b (tuple21 a b)) (tuple21 d
  (tuple21 c d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b (tuple21 a b)) (tuple21 d (tuple21 c d)))))
  (sort (tuple2 (tuple2 b1 (tuple2 a1 b1)) (tuple2 d1 (tuple2 c1 d1)))
  (t2tb5140 x))))

(declare-fun tb2t5140 (uni) (tuple21 (tuple21 b (tuple21 a b)) (tuple21 d
  (tuple21 c d))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b (tuple21 a b)) (tuple21 d (tuple21 c d)))))
  (! (= (tb2t5140 (t2tb5140 i)) i) :pattern ((t2tb5140 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 (tuple2 a1 b1)) (tuple2 d1 (tuple2 c1 d1)))
     j) (= (t2tb5140 (tb2t5140 j)) j)) :pattern ((t2tb5140 (tb2t5140 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 b d))) (k (set (tuple21 (tuple21 a b) (tuple21 c
  d)))) (x b) (y (tuple21 a b)) (z d) (w (tuple21 c d)))
  (= (mem (tuple2 (tuple2 b1 (tuple2 a1 b1)) (tuple2 d1 (tuple2 c1 d1)))
  (Tuple2 (tuple2 b1 (tuple2 a1 b1)) (tuple2 d1 (tuple2 c1 d1))
  (Tuple2 b1 (tuple2 a1 b1) (t2tb14 x) (t2tb13 y))
  (Tuple2 d1 (tuple2 c1 d1) (t2tb694 z) (t2tb693 w)))
  (parallel_product (tuple2 c1 d1) (tuple2 a1 b1) d1 b1 (t2tb687 h)
  (t2tb879 k)))
  (and (mem23 (tb2t692 (Tuple2 b1 d1 (t2tb14 x) (t2tb694 z))) h) (mem50
  (tb2t880 (Tuple2 (tuple2 a1 b1) (tuple2 c1 d1) (t2tb13 y) (t2tb693 w))) k)))))

(declare-fun t2tb4957 ((set (tuple21 (tuple21 b b) (tuple21 d d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b b) (tuple21 d d))))) (sort
  (set1 (tuple2 (tuple2 b1 b1) (tuple2 d1 d1))) (t2tb4957 x))))

(declare-fun tb2t4957 (uni) (set (tuple21 (tuple21 b b) (tuple21 d d))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b b) (tuple21 d d)))))
  (! (= (tb2t4957 (t2tb4957 i)) i) :pattern ((t2tb4957 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 b1) (tuple2 d1 d1))) j)
     (= (t2tb4957 (tb2t4957 j)) j)) :pattern ((t2tb4957 (tb2t4957 j))) )))

(declare-fun t2tb4958 ((tuple21 (tuple21 b b) (tuple21 d d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b b) (tuple21 d d)))) (sort
  (tuple2 (tuple2 b1 b1) (tuple2 d1 d1)) (t2tb4958 x))))

(declare-fun tb2t4958 (uni) (tuple21 (tuple21 b b) (tuple21 d d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b b) (tuple21 d d))))
  (! (= (tb2t4958 (t2tb4958 i)) i) :pattern ((t2tb4958 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 b1) (tuple2 d1 d1)) j)
     (= (t2tb4958 (tb2t4958 j)) j)) :pattern ((t2tb4958 (tb2t4958 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 b d))) (k (set (tuple21 b d))) (x b) (y b) (z d)
  (w d))
  (= (mem (tuple2 (tuple2 b1 b1) (tuple2 d1 d1))
  (Tuple2 (tuple2 b1 b1) (tuple2 d1 d1) (Tuple2 b1 b1 (t2tb14 x) (t2tb14 y))
  (Tuple2 d1 d1 (t2tb694 z) (t2tb694 w)))
  (parallel_product d1 b1 d1 b1 (t2tb687 h) (t2tb687 k)))
  (and (mem23 (tb2t692 (Tuple2 b1 d1 (t2tb14 x) (t2tb694 z))) h) (mem23
  (tb2t692 (Tuple2 b1 d1 (t2tb14 y) (t2tb694 w))) k)))))

(declare-fun t2tb4967 ((set (tuple21 (tuple21 b a) (tuple21 d c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b a) (tuple21 d c))))) (sort
  (set1 (tuple2 (tuple2 b1 a1) (tuple2 d1 c1))) (t2tb4967 x))))

(declare-fun tb2t4967 (uni) (set (tuple21 (tuple21 b a) (tuple21 d c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b a) (tuple21 d c)))))
  (! (= (tb2t4967 (t2tb4967 i)) i) :pattern ((t2tb4967 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 a1) (tuple2 d1 c1))) j)
     (= (t2tb4967 (tb2t4967 j)) j)) :pattern ((t2tb4967 (tb2t4967 j))) )))

(declare-fun t2tb4968 ((tuple21 (tuple21 b a) (tuple21 d c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b a) (tuple21 d c)))) (sort
  (tuple2 (tuple2 b1 a1) (tuple2 d1 c1)) (t2tb4968 x))))

(declare-fun tb2t4968 (uni) (tuple21 (tuple21 b a) (tuple21 d c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b a) (tuple21 d c))))
  (! (= (tb2t4968 (t2tb4968 i)) i) :pattern ((t2tb4968 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 a1) (tuple2 d1 c1)) j)
     (= (t2tb4968 (tb2t4968 j)) j)) :pattern ((t2tb4968 (tb2t4968 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 b d))) (k (set (tuple21 a c))) (x b) (y a) (z d)
  (w c))
  (= (mem (tuple2 (tuple2 b1 a1) (tuple2 d1 c1))
  (Tuple2 (tuple2 b1 a1) (tuple2 d1 c1) (Tuple2 b1 a1 (t2tb14 x) (t2tb2 y))
  (Tuple2 d1 c1 (t2tb694 z) (t2tb135 w)))
  (parallel_product c1 a1 d1 b1 (t2tb687 h) (t2tb129 k)))
  (and (mem23 (tb2t692 (Tuple2 b1 d1 (t2tb14 x) (t2tb694 z))) h) (mem10
  (tb2t133 (Tuple2 a1 c1 (t2tb2 y) (t2tb135 w))) k)))))

(declare-fun t2tb4969 ((set (tuple21 (tuple21 b a) (tuple21 d b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 b a) (tuple21 d b))))) (sort
  (set1 (tuple2 (tuple2 b1 a1) (tuple2 d1 b1))) (t2tb4969 x))))

(declare-fun tb2t4969 (uni) (set (tuple21 (tuple21 b a) (tuple21 d b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 b a) (tuple21 d b)))))
  (! (= (tb2t4969 (t2tb4969 i)) i) :pattern ((t2tb4969 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 b1 a1) (tuple2 d1 b1))) j)
     (= (t2tb4969 (tb2t4969 j)) j)) :pattern ((t2tb4969 (tb2t4969 j))) )))

(declare-fun t2tb4970 ((tuple21 (tuple21 b a) (tuple21 d b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 b a) (tuple21 d b)))) (sort
  (tuple2 (tuple2 b1 a1) (tuple2 d1 b1)) (t2tb4970 x))))

(declare-fun tb2t4970 (uni) (tuple21 (tuple21 b a) (tuple21 d b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 b a) (tuple21 d b))))
  (! (= (tb2t4970 (t2tb4970 i)) i) :pattern ((t2tb4970 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 b1 a1) (tuple2 d1 b1)) j)
     (= (t2tb4970 (tb2t4970 j)) j)) :pattern ((t2tb4970 (tb2t4970 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 b d))) (k (set (tuple21 a b))) (x b) (y a) (z d)
  (w b))
  (= (mem (tuple2 (tuple2 b1 a1) (tuple2 d1 b1))
  (Tuple2 (tuple2 b1 a1) (tuple2 d1 b1) (Tuple2 b1 a1 (t2tb14 x) (t2tb2 y))
  (Tuple2 d1 b1 (t2tb694 z) (t2tb14 w)))
  (parallel_product b1 a1 d1 b1 (t2tb687 h) (t2tb11 k)))
  (and (mem23 (tb2t692 (Tuple2 b1 d1 (t2tb14 x) (t2tb694 z))) h) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 y) (t2tb14 w))) k)))))

;; mem_parallel_product
  (assert
  (forall ((c2 ty) (d2 ty))
  (forall ((h (set (tuple21 b d))) (k uni) (x b) (y uni) (z d) (w uni))
  (= (mem (tuple2 (tuple2 b1 c2) (tuple2 d1 d2))
  (Tuple2 (tuple2 b1 c2) (tuple2 d1 d2) (Tuple2 b1 c2 (t2tb14 x) y)
  (Tuple2 d1 d2 (t2tb694 z) w)) (parallel_product d2 c2 d1 b1 (t2tb687 h) k))
  (and (mem23 (tb2t692 (Tuple2 b1 d1 (t2tb14 x) (t2tb694 z))) h) (mem
  (tuple2 c2 d2) (Tuple2 c2 d2 y w) k))))))

(declare-fun t2tb5141 ((set (tuple21 (tuple21 a (tuple21 a b)) (tuple21 c
  (tuple21 c d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a (tuple21 a b)) (tuple21 c (tuple21 c
  d)))))) (sort
  (set1 (tuple2 (tuple2 a1 (tuple2 a1 b1)) (tuple2 c1 (tuple2 c1 d1))))
  (t2tb5141 x))))

(declare-fun tb2t5141 (uni) (set (tuple21 (tuple21 a (tuple21 a b))
  (tuple21 c (tuple21 c d)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a (tuple21 a b)) (tuple21 c (tuple21 c
  d)))))) (! (= (tb2t5141 (t2tb5141 i)) i) :pattern ((t2tb5141 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 a1 (tuple2 a1 b1)) (tuple2 c1 (tuple2 c1 d1)))) j)
     (= (t2tb5141 (tb2t5141 j)) j)) :pattern ((t2tb5141 (tb2t5141 j))) )))

(declare-fun t2tb5142 ((tuple21 (tuple21 a (tuple21 a b)) (tuple21 c
  (tuple21 c d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a (tuple21 a b)) (tuple21 c (tuple21 c d)))))
  (sort (tuple2 (tuple2 a1 (tuple2 a1 b1)) (tuple2 c1 (tuple2 c1 d1)))
  (t2tb5142 x))))

(declare-fun tb2t5142 (uni) (tuple21 (tuple21 a (tuple21 a b)) (tuple21 c
  (tuple21 c d))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a (tuple21 a b)) (tuple21 c (tuple21 c d)))))
  (! (= (tb2t5142 (t2tb5142 i)) i) :pattern ((t2tb5142 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 (tuple2 a1 b1)) (tuple2 c1 (tuple2 c1 d1)))
     j) (= (t2tb5142 (tb2t5142 j)) j)) :pattern ((t2tb5142 (tb2t5142 j))) )))

(declare-fun t2tb858 ((tuple21 c (tuple21 c d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 c (tuple21 c d)))) (sort (tuple2 c1 (tuple2 c1 d1))
  (t2tb858 x))))

(declare-fun tb2t858 (uni) (tuple21 c (tuple21 c d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 c (tuple21 c d))))
  (! (= (tb2t858 (t2tb858 i)) i) :pattern ((t2tb858 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 c1 (tuple2 c1 d1)) j) (= (t2tb858 (tb2t858 j)) j)) :pattern (
  (t2tb858 (tb2t858 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a c))) (k (set (tuple21 (tuple21 a b) (tuple21 c
  d)))) (x a) (y (tuple21 a b)) (z c) (w (tuple21 c d)))
  (= (mem (tuple2 (tuple2 a1 (tuple2 a1 b1)) (tuple2 c1 (tuple2 c1 d1)))
  (Tuple2 (tuple2 a1 (tuple2 a1 b1)) (tuple2 c1 (tuple2 c1 d1))
  (Tuple2 a1 (tuple2 a1 b1) (t2tb2 x) (t2tb13 y))
  (Tuple2 c1 (tuple2 c1 d1) (t2tb135 z) (t2tb693 w)))
  (parallel_product (tuple2 c1 d1) (tuple2 a1 b1) c1 a1 (t2tb129 h)
  (t2tb879 k)))
  (and (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 z))) h) (mem50
  (tb2t880 (Tuple2 (tuple2 a1 b1) (tuple2 c1 d1) (t2tb13 y) (t2tb693 w))) k)))))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a c))) (k (set (tuple21 b d))) (x a) (y b) (z c)
  (w d))
  (= (mem50
  (tb2t880
  (Tuple2 (tuple2 a1 b1) (tuple2 c1 d1) (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y))
  (Tuple2 c1 d1 (t2tb135 z) (t2tb694 w)))) (parallel_product6 h k))
  (and (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 z))) h) (mem23
  (tb2t692 (Tuple2 b1 d1 (t2tb14 y) (t2tb694 w))) k)))))

(declare-fun t2tb342 ((set (tuple21 (tuple21 a a) (tuple21 c c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a a) (tuple21 c c))))) (sort
  (set1 (tuple2 (tuple2 a1 a1) (tuple2 c1 c1))) (t2tb342 x))))

(declare-fun tb2t342 (uni) (set (tuple21 (tuple21 a a) (tuple21 c c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a a) (tuple21 c c)))))
  (! (= (tb2t342 (t2tb342 i)) i) :pattern ((t2tb342 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 a1) (tuple2 c1 c1))) j)
     (= (t2tb342 (tb2t342 j)) j)) :pattern ((t2tb342 (tb2t342 j))) )))

(declare-fun t2tb343 ((tuple21 (tuple21 a a) (tuple21 c c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a a) (tuple21 c c)))) (sort
  (tuple2 (tuple2 a1 a1) (tuple2 c1 c1)) (t2tb343 x))))

(declare-fun tb2t343 (uni) (tuple21 (tuple21 a a) (tuple21 c c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a a) (tuple21 c c))))
  (! (= (tb2t343 (t2tb343 i)) i) :pattern ((t2tb343 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 a1) (tuple2 c1 c1)) j)
     (= (t2tb343 (tb2t343 j)) j)) :pattern ((t2tb343 (tb2t343 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a c))) (k (set (tuple21 a c))) (x a) (y a) (z c)
  (w c))
  (= (mem (tuple2 (tuple2 a1 a1) (tuple2 c1 c1))
  (Tuple2 (tuple2 a1 a1) (tuple2 c1 c1) (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y))
  (Tuple2 c1 c1 (t2tb135 z) (t2tb135 w)))
  (parallel_product c1 a1 c1 a1 (t2tb129 h) (t2tb129 k)))
  (and (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 z))) h) (mem10
  (tb2t133 (Tuple2 a1 c1 (t2tb2 y) (t2tb135 w))) k)))))

(declare-fun t2tb344 ((set (tuple21 (tuple21 a a) (tuple21 c b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a a) (tuple21 c b))))) (sort
  (set1 (tuple2 (tuple2 a1 a1) (tuple2 c1 b1))) (t2tb344 x))))

(declare-fun tb2t344 (uni) (set (tuple21 (tuple21 a a) (tuple21 c b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a a) (tuple21 c b)))))
  (! (= (tb2t344 (t2tb344 i)) i) :pattern ((t2tb344 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 a1) (tuple2 c1 b1))) j)
     (= (t2tb344 (tb2t344 j)) j)) :pattern ((t2tb344 (tb2t344 j))) )))

(declare-fun t2tb345 ((tuple21 (tuple21 a a) (tuple21 c b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a a) (tuple21 c b)))) (sort
  (tuple2 (tuple2 a1 a1) (tuple2 c1 b1)) (t2tb345 x))))

(declare-fun tb2t345 (uni) (tuple21 (tuple21 a a) (tuple21 c b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a a) (tuple21 c b))))
  (! (= (tb2t345 (t2tb345 i)) i) :pattern ((t2tb345 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 a1) (tuple2 c1 b1)) j)
     (= (t2tb345 (tb2t345 j)) j)) :pattern ((t2tb345 (tb2t345 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a c))) (k (set (tuple21 a b))) (x a) (y a) (z c)
  (w b))
  (= (mem (tuple2 (tuple2 a1 a1) (tuple2 c1 b1))
  (Tuple2 (tuple2 a1 a1) (tuple2 c1 b1) (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y))
  (Tuple2 c1 b1 (t2tb135 z) (t2tb14 w)))
  (parallel_product b1 a1 c1 a1 (t2tb129 h) (t2tb11 k)))
  (and (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 z))) h) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 y) (t2tb14 w))) k)))))

;; mem_parallel_product
  (assert
  (forall ((c2 ty) (d2 ty))
  (forall ((h (set (tuple21 a c))) (k uni) (x a) (y uni) (z c) (w uni))
  (= (mem (tuple2 (tuple2 a1 c2) (tuple2 c1 d2))
  (Tuple2 (tuple2 a1 c2) (tuple2 c1 d2) (Tuple2 a1 c2 (t2tb2 x) y)
  (Tuple2 c1 d2 (t2tb135 z) w)) (parallel_product d2 c2 c1 a1 (t2tb129 h) k))
  (and (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 z))) h) (mem
  (tuple2 c2 d2) (Tuple2 c2 d2 y w) k))))))

(declare-fun t2tb5143 ((set (tuple21 (tuple21 a (tuple21 a b)) (tuple21 b
  (tuple21 c d))))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a (tuple21 a b)) (tuple21 b (tuple21 c
  d)))))) (sort
  (set1 (tuple2 (tuple2 a1 (tuple2 a1 b1)) (tuple2 b1 (tuple2 c1 d1))))
  (t2tb5143 x))))

(declare-fun tb2t5143 (uni) (set (tuple21 (tuple21 a (tuple21 a b))
  (tuple21 b (tuple21 c d)))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a (tuple21 a b)) (tuple21 b (tuple21 c
  d)))))) (! (= (tb2t5143 (t2tb5143 i)) i) :pattern ((t2tb5143 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort
     (set1 (tuple2 (tuple2 a1 (tuple2 a1 b1)) (tuple2 b1 (tuple2 c1 d1)))) j)
     (= (t2tb5143 (tb2t5143 j)) j)) :pattern ((t2tb5143 (tb2t5143 j))) )))

(declare-fun t2tb5144 ((tuple21 (tuple21 a (tuple21 a b)) (tuple21 b
  (tuple21 c d)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a (tuple21 a b)) (tuple21 b (tuple21 c d)))))
  (sort (tuple2 (tuple2 a1 (tuple2 a1 b1)) (tuple2 b1 (tuple2 c1 d1)))
  (t2tb5144 x))))

(declare-fun tb2t5144 (uni) (tuple21 (tuple21 a (tuple21 a b)) (tuple21 b
  (tuple21 c d))))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a (tuple21 a b)) (tuple21 b (tuple21 c d)))))
  (! (= (tb2t5144 (t2tb5144 i)) i) :pattern ((t2tb5144 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 (tuple2 a1 b1)) (tuple2 b1 (tuple2 c1 d1)))
     j) (= (t2tb5144 (tb2t5144 j)) j)) :pattern ((t2tb5144 (tb2t5144 j))) )))

(declare-fun t2tb892 ((tuple21 b (tuple21 c d))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 b (tuple21 c d)))) (sort (tuple2 b1 (tuple2 c1 d1))
  (t2tb892 x))))

(declare-fun tb2t892 (uni) (tuple21 b (tuple21 c d)))

;; BridgeL
  (assert
  (forall ((i (tuple21 b (tuple21 c d))))
  (! (= (tb2t892 (t2tb892 i)) i) :pattern ((t2tb892 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 b1 (tuple2 c1 d1)) j) (= (t2tb892 (tb2t892 j)) j)) :pattern (
  (t2tb892 (tb2t892 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a b))) (k (set (tuple21 (tuple21 a b) (tuple21 c
  d)))) (x a) (y (tuple21 a b)) (z b) (w (tuple21 c d)))
  (= (mem (tuple2 (tuple2 a1 (tuple2 a1 b1)) (tuple2 b1 (tuple2 c1 d1)))
  (Tuple2 (tuple2 a1 (tuple2 a1 b1)) (tuple2 b1 (tuple2 c1 d1))
  (Tuple2 a1 (tuple2 a1 b1) (t2tb2 x) (t2tb13 y))
  (Tuple2 b1 (tuple2 c1 d1) (t2tb14 z) (t2tb693 w)))
  (parallel_product (tuple2 c1 d1) (tuple2 a1 b1) b1 a1 (t2tb11 h)
  (t2tb879 k)))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 z))) h) (mem50
  (tb2t880 (Tuple2 (tuple2 a1 b1) (tuple2 c1 d1) (t2tb13 y) (t2tb693 w))) k)))))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a b))) (k (set (tuple21 b d))) (x a) (y b) (z b)
  (w d))
  (= (mem (tuple2 (tuple2 a1 b1) (tuple2 b1 d1))
  (Tuple2 (tuple2 a1 b1) (tuple2 b1 d1) (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y))
  (Tuple2 b1 d1 (t2tb14 z) (t2tb694 w)))
  (parallel_product d1 b1 b1 a1 (t2tb11 h) (t2tb687 k)))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 z))) h) (mem23
  (tb2t692 (Tuple2 b1 d1 (t2tb14 y) (t2tb694 w))) k)))))

(declare-fun t2tb346 ((tuple21 (tuple21 a a) (tuple21 b c))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a a) (tuple21 b c)))) (sort
  (tuple2 (tuple2 a1 a1) (tuple2 b1 c1)) (t2tb346 x))))

(declare-fun tb2t346 (uni) (tuple21 (tuple21 a a) (tuple21 b c)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a a) (tuple21 b c))))
  (! (= (tb2t346 (t2tb346 i)) i) :pattern ((t2tb346 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 a1) (tuple2 b1 c1)) j)
     (= (t2tb346 (tb2t346 j)) j)) :pattern ((t2tb346 (tb2t346 j))) )))

(declare-fun t2tb347 ((set (tuple21 (tuple21 a a) (tuple21 b c)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a a) (tuple21 b c))))) (sort
  (set1 (tuple2 (tuple2 a1 a1) (tuple2 b1 c1))) (t2tb347 x))))

(declare-fun tb2t347 (uni) (set (tuple21 (tuple21 a a) (tuple21 b c))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a a) (tuple21 b c)))))
  (! (= (tb2t347 (t2tb347 i)) i) :pattern ((t2tb347 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 a1) (tuple2 b1 c1))) j)
     (= (t2tb347 (tb2t347 j)) j)) :pattern ((t2tb347 (tb2t347 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a b))) (k (set (tuple21 a c))) (x a) (y a) (z b)
  (w c))
  (= (mem (tuple2 (tuple2 a1 a1) (tuple2 b1 c1))
  (Tuple2 (tuple2 a1 a1) (tuple2 b1 c1) (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y))
  (Tuple2 b1 c1 (t2tb14 z) (t2tb135 w)))
  (parallel_product c1 a1 b1 a1 (t2tb11 h) (t2tb129 k)))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 z))) h) (mem10
  (tb2t133 (Tuple2 a1 c1 (t2tb2 y) (t2tb135 w))) k)))))

(declare-fun t2tb61 ((set (tuple21 (tuple21 a a) (tuple21 b b)))) uni)

;; t2tb_sort
  (assert
  (forall ((x (set (tuple21 (tuple21 a a) (tuple21 b b))))) (sort
  (set1 (tuple2 (tuple2 a1 a1) (tuple2 b1 b1))) (t2tb61 x))))

(declare-fun tb2t61 (uni) (set (tuple21 (tuple21 a a) (tuple21 b b))))

;; BridgeL
  (assert
  (forall ((i (set (tuple21 (tuple21 a a) (tuple21 b b)))))
  (! (= (tb2t61 (t2tb61 i)) i) :pattern ((t2tb61 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (set1 (tuple2 (tuple2 a1 a1) (tuple2 b1 b1))) j)
     (= (t2tb61 (tb2t61 j)) j)) :pattern ((t2tb61 (tb2t61 j))) )))

(declare-fun t2tb62 ((tuple21 (tuple21 a a) (tuple21 b b))) uni)

;; t2tb_sort
  (assert
  (forall ((x (tuple21 (tuple21 a a) (tuple21 b b)))) (sort
  (tuple2 (tuple2 a1 a1) (tuple2 b1 b1)) (t2tb62 x))))

(declare-fun tb2t62 (uni) (tuple21 (tuple21 a a) (tuple21 b b)))

;; BridgeL
  (assert
  (forall ((i (tuple21 (tuple21 a a) (tuple21 b b))))
  (! (= (tb2t62 (t2tb62 i)) i) :pattern ((t2tb62 i)) )))

;; BridgeR
  (assert
  (forall ((j uni))
  (! (=> (sort (tuple2 (tuple2 a1 a1) (tuple2 b1 b1)) j)
     (= (t2tb62 (tb2t62 j)) j)) :pattern ((t2tb62 (tb2t62 j))) )))

;; mem_parallel_product
  (assert
  (forall ((h (set (tuple21 a b))) (k (set (tuple21 a b))) (x a) (y a) (z b)
  (w b))
  (= (mem (tuple2 (tuple2 a1 a1) (tuple2 b1 b1))
  (Tuple2 (tuple2 a1 a1) (tuple2 b1 b1) (Tuple2 a1 a1 (t2tb2 x) (t2tb2 y))
  (Tuple2 b1 b1 (t2tb14 z) (t2tb14 w)))
  (parallel_product b1 a1 b1 a1 (t2tb11 h) (t2tb11 k)))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 z))) h) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 y) (t2tb14 w))) k)))))

;; mem_parallel_product
  (assert
  (forall ((c2 ty) (d2 ty))
  (forall ((h (set (tuple21 a b))) (k uni) (x a) (y uni) (z b) (w uni))
  (= (mem (tuple2 (tuple2 a1 c2) (tuple2 b1 d2))
  (Tuple2 (tuple2 a1 c2) (tuple2 b1 d2) (Tuple2 a1 c2 (t2tb2 x) y)
  (Tuple2 b1 d2 (t2tb14 z) w)) (parallel_product d2 c2 b1 a1 (t2tb11 h) k))
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 z))) h) (mem
  (tuple2 c2 d2) (Tuple2 c2 d2 y w) k))))))

;; mem_parallel_product
  (assert
  (forall ((a2 ty) (b2 ty) (c2 ty) (d2 ty))
  (forall ((h uni) (k uni) (x uni) (y uni) (z uni) (w uni))
  (= (mem (tuple2 (tuple2 a2 c2) (tuple2 b2 d2))
  (Tuple2 (tuple2 a2 c2) (tuple2 b2 d2) (Tuple2 a2 c2 x y)
  (Tuple2 b2 d2 z w)) (parallel_product d2 c2 b2 a2 h k))
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x z) h) (mem (tuple2 c2 d2)
  (Tuple2 c2 d2 y w) k))))))

(declare-fun infix_plmngt (ty ty uni uni) uni)

;; infix +->_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (set1 (tuple2 a2 b2)))
  (infix_plmngt b2 a2 x x1)))))

;; mem_partial_function_set
  (assert
  (forall ((s (set (tuple21 a b))) (t (set (tuple21 c d)))
  (f2 (set (tuple21 (tuple21 a b) (tuple21 c d)))))
  (= (mem (set1 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1))) (t2tb879 f2)
  (infix_plmngt (tuple2 c1 d1) (tuple2 a1 b1) (t2tb11 s) (t2tb689 t)))
  (and (mem (set1 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1))) (t2tb879 f2)
  (relation (tuple2 c1 d1) (tuple2 a1 b1) (t2tb11 s) (t2tb689 t)))
  (forall ((x (tuple21 a b)) (y1 (tuple21 c d)) (y2 (tuple21 c d)))
  (=>
  (and (mem50
  (tb2t880 (Tuple2 (tuple2 a1 b1) (tuple2 c1 d1) (t2tb13 x) (t2tb693 y1)))
  f2) (mem50
  (tb2t880 (Tuple2 (tuple2 a1 b1) (tuple2 c1 d1) (t2tb13 x) (t2tb693 y2)))
  f2)) (= y1 y2)))))))

;; mem_partial_function_set
  (assert
  (forall ((s (set b)) (t (set d)) (f2 (set (tuple21 b d))))
  (= (mem33 f2 (tb2t906 (infix_plmngt d1 b1 (t2tb12 s) (t2tb690 t))))
  (and (mem33 f2 (relation9 s t))
  (forall ((x b) (y1 d) (y2 d))
  (=>
  (and (mem23 (tb2t692 (Tuple2 b1 d1 (t2tb14 x) (t2tb694 y1))) f2) (mem23
  (tb2t692 (Tuple2 b1 d1 (t2tb14 x) (t2tb694 y2))) f2)) (= y1 y2)))))))

;; mem_partial_function_set
  (assert
  (forall ((s (set a)) (t (set c)) (f2 (set (tuple21 a c))))
  (= (mem11 f2 (tb2t128 (infix_plmngt c1 a1 (t2tb1 s) (t2tb132 t))))
  (and (mem11 f2 (relation3 s t))
  (forall ((x a) (y1 c) (y2 c))
  (=>
  (and (mem10 (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y1))) f2) (mem10
  (tb2t133 (Tuple2 a1 c1 (t2tb2 x) (t2tb135 y2))) f2)) (= y1 y2)))))))

;; mem_partial_function_set
  (assert
  (forall ((s (set a)) (t (set b)) (f2 (set (tuple21 a b))))
  (= (mem (set1 (tuple2 a1 b1)) (t2tb11 f2)
  (infix_plmngt b1 a1 (t2tb1 s) (t2tb12 t)))
  (and (mem (set1 (tuple2 a1 b1)) (t2tb11 f2)
  (relation b1 a1 (t2tb1 s) (t2tb12 t)))
  (forall ((x a) (y1 b) (y2 b))
  (=>
  (and (mem3 (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y1))) f2) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 x) (t2tb14 y2))) f2)) (= y1 y2)))))))

;; mem_partial_function_set
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (f2 uni))
  (and
  (=> (mem (set1 (tuple2 a2 b2)) f2 (infix_plmngt b2 a2 s t))
  (and (mem (set1 (tuple2 a2 b2)) f2 (relation b2 a2 s t))
  (forall ((x uni) (y1 uni) (y2 uni))
  (=> (sort b2 y1)
  (=> (sort b2 y2)
  (=>
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y1) f2) (mem (tuple2 a2 b2)
  (Tuple2 a2 b2 x y2) f2)) (= y1 y2)))))))
  (=>
  (and (mem (set1 (tuple2 a2 b2)) f2 (relation b2 a2 s t))
  (forall ((x uni) (y1 uni) (y2 uni))
  (=> (sort a2 x)
  (=> (sort b2 y1)
  (=> (sort b2 y2)
  (=>
  (and (mem (tuple2 a2 b2) (Tuple2 a2 b2 x y1) f2) (mem (tuple2 a2 b2)
  (Tuple2 a2 b2 x y2) f2)) (= y1 y2))))))) (mem (set1 (tuple2 a2 b2)) f2
  (infix_plmngt b2 a2 s t)))))))

(declare-fun infix_mnmngt (ty ty uni uni) uni)

;; infix -->_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (set1 (tuple2 a2 b2)))
  (infix_mnmngt b2 a2 x x1)))))

;; mem_total_function_set
  (assert
  (forall ((b2 ty))
  (forall ((s (set (tuple21 (tuple21 a b) (tuple21 c d)))) (t uni) (x uni))
  (= (mem (set1 (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) b2)) x
  (infix_mnmngt b2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) (t2tb879 s) t))
  (and (mem (set1 (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) b2)) x
  (infix_plmngt b2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) (t2tb879 s) t))
  (infix_eqeq43 (tb2t879 (dom b2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) x))
  s))))))

;; mem_total_function_set
  (assert
  (forall ((b2 ty))
  (forall ((s (set (set (tuple21 b d)))) (t uni) (x uni))
  (= (mem (set1 (tuple2 (set1 (tuple2 b1 d1)) b2)) x
  (infix_mnmngt b2 (set1 (tuple2 b1 d1)) (t2tb906 s) t))
  (and (mem (set1 (tuple2 (set1 (tuple2 b1 d1)) b2)) x
  (infix_plmngt b2 (set1 (tuple2 b1 d1)) (t2tb906 s) t)) (infix_eqeq28
  (tb2t906 (dom b2 (set1 (tuple2 b1 d1)) x)) s))))))

;; mem_total_function_set
  (assert
  (forall ((b2 ty))
  (forall ((s (set (tuple21 b d))) (t uni) (x uni))
  (= (mem (set1 (tuple2 (tuple2 b1 d1) b2)) x
  (infix_mnmngt b2 (tuple2 b1 d1) (t2tb687 s) t))
  (and (mem (set1 (tuple2 (tuple2 b1 d1) b2)) x
  (infix_plmngt b2 (tuple2 b1 d1) (t2tb687 s) t)) (infix_eqeq22
  (tb2t687 (dom b2 (tuple2 b1 d1) x)) s))))))

;; mem_total_function_set
  (assert
  (forall ((b2 ty))
  (forall ((s (set d)) (t uni) (x uni))
  (= (mem (set1 (tuple2 d1 b2)) x (infix_mnmngt b2 d1 (t2tb690 s) t))
  (and (mem (set1 (tuple2 d1 b2)) x (infix_plmngt b2 d1 (t2tb690 s) t))
  (infix_eqeq13 (tb2t690 (dom b2 d1 x)) s))))))

;; mem_total_function_set
  (assert
  (forall ((b2 ty))
  (forall ((s (set (set (tuple21 a c)))) (t uni) (x uni))
  (= (mem (set1 (tuple2 (set1 (tuple2 a1 c1)) b2)) x
  (infix_mnmngt b2 (set1 (tuple2 a1 c1)) (t2tb128 s) t))
  (and (mem (set1 (tuple2 (set1 (tuple2 a1 c1)) b2)) x
  (infix_plmngt b2 (set1 (tuple2 a1 c1)) (t2tb128 s) t)) (infix_eqeq19
  (tb2t128 (dom b2 (set1 (tuple2 a1 c1)) x)) s))))))

;; mem_total_function_set
  (assert
  (forall ((b2 ty))
  (forall ((s (set (tuple21 a c))) (t uni) (x uni))
  (= (mem (set1 (tuple2 (tuple2 a1 c1) b2)) x
  (infix_mnmngt b2 (tuple2 a1 c1) (t2tb129 s) t))
  (and (mem (set1 (tuple2 (tuple2 a1 c1) b2)) x
  (infix_plmngt b2 (tuple2 a1 c1) (t2tb129 s) t)) (infix_eqeq9
  (tb2t129 (dom b2 (tuple2 a1 c1) x)) s))))))

;; mem_total_function_set
  (assert
  (forall ((b2 ty))
  (forall ((s (set c)) (t uni) (x uni))
  (= (mem (set1 (tuple2 c1 b2)) x (infix_mnmngt b2 c1 (t2tb132 s) t))
  (and (mem (set1 (tuple2 c1 b2)) x (infix_plmngt b2 c1 (t2tb132 s) t))
  (infix_eqeq7 (tb2t132 (dom b2 c1 x)) s))))))

;; mem_total_function_set
  (assert
  (forall ((b2 ty))
  (forall ((s (set (tuple21 a b))) (t uni) (x uni))
  (= (mem (set1 (tuple2 (tuple2 a1 b1) b2)) x
  (infix_mnmngt b2 (tuple2 a1 b1) (t2tb11 s) t))
  (and (mem (set1 (tuple2 (tuple2 a1 b1) b2)) x
  (infix_plmngt b2 (tuple2 a1 b1) (t2tb11 s) t)) (infix_eqeq4
  (tb2t11 (dom b2 (tuple2 a1 b1) x)) s))))))

;; mem_total_function_set
  (assert
  (forall ((s (set b)) (t (set d)) (x (set (tuple21 b d))))
  (= (mem33 x (tb2t906 (infix_mnmngt d1 b1 (t2tb12 s) (t2tb690 t))))
  (and (mem33 x (tb2t906 (infix_plmngt d1 b1 (t2tb12 s) (t2tb690 t))))
  (infix_eqeq3 (tb2t12 (dom d1 b1 (t2tb687 x))) s)))))

;; mem_total_function_set
  (assert
  (forall ((b2 ty))
  (forall ((s (set b)) (t uni) (x uni))
  (= (mem (set1 (tuple2 b1 b2)) x (infix_mnmngt b2 b1 (t2tb12 s) t))
  (and (mem (set1 (tuple2 b1 b2)) x (infix_plmngt b2 b1 (t2tb12 s) t))
  (infix_eqeq3 (tb2t12 (dom b2 b1 x)) s))))))

;; mem_total_function_set
  (assert
  (forall ((s (set a)) (t (set c)) (x (set (tuple21 a c))))
  (= (mem11 x (tb2t128 (infix_mnmngt c1 a1 (t2tb1 s) (t2tb132 t))))
  (and (mem11 x (tb2t128 (infix_plmngt c1 a1 (t2tb1 s) (t2tb132 t))))
  (infix_eqeq1 (tb2t1 (dom c1 a1 (t2tb129 x))) s)))))

;; mem_total_function_set
  (assert
  (forall ((b2 ty))
  (forall ((s (set a)) (t uni) (x uni))
  (= (mem (set1 (tuple2 a1 b2)) x (infix_mnmngt b2 a1 (t2tb1 s) t))
  (and (mem (set1 (tuple2 a1 b2)) x (infix_plmngt b2 a1 (t2tb1 s) t))
  (infix_eqeq1 (tb2t1 (dom b2 a1 x)) s))))))

;; mem_total_function_set
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (x uni))
  (= (mem (set1 (tuple2 a2 b2)) x (infix_mnmngt b2 a2 s t))
  (and (mem (set1 (tuple2 a2 b2)) x (infix_plmngt b2 a2 s t)) (infix_eqeq a2
  (dom b2 a2 x) s))))))

(declare-fun infix_gtplgt (ty ty uni uni) uni)

;; infix >+>_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (set1 (tuple2 a2 b2)))
  (infix_gtplgt b2 a2 x x1)))))

;; mem_partial_injection_set
  (assert
  (forall ((s (set d)) (t (set b)) (x (set (tuple21 d b))))
  (= (mem (set1 (tuple2 d1 b1)) (t2tb835 x)
  (infix_gtplgt b1 d1 (t2tb690 s) (t2tb12 t)))
  (and (mem (set1 (tuple2 d1 b1)) (t2tb835 x)
  (infix_plmngt b1 d1 (t2tb690 s) (t2tb12 t))) (mem33
  (tb2t687 (inverse b1 d1 (t2tb835 x)))
  (tb2t906 (infix_plmngt d1 b1 (t2tb12 t) (t2tb690 s))))))))

;; mem_partial_injection_set
  (assert
  (forall ((s (set c)) (t (set a)) (x (set (tuple21 c a))))
  (= (mem (set1 (tuple2 c1 a1)) (t2tb224 x)
  (infix_gtplgt a1 c1 (t2tb132 s) (t2tb1 t)))
  (and (mem (set1 (tuple2 c1 a1)) (t2tb224 x)
  (infix_plmngt a1 c1 (t2tb132 s) (t2tb1 t))) (mem11
  (tb2t129 (inverse a1 c1 (t2tb224 x)))
  (tb2t128 (infix_plmngt c1 a1 (t2tb1 t) (t2tb132 s))))))))

;; mem_partial_injection_set
  (assert
  (forall ((s (set b)) (t (set d)) (x (set (tuple21 b d))))
  (= (mem33 x (tb2t906 (infix_gtplgt d1 b1 (t2tb12 s) (t2tb690 t))))
  (and (mem33 x (tb2t906 (infix_plmngt d1 b1 (t2tb12 s) (t2tb690 t)))) (mem
  (set1 (tuple2 d1 b1)) (inverse d1 b1 (t2tb687 x))
  (infix_plmngt b1 d1 (t2tb690 t) (t2tb12 s)))))))

;; mem_partial_injection_set
  (assert
  (forall ((s (set a)) (t (set c)) (x (set (tuple21 a c))))
  (= (mem11 x (tb2t128 (infix_gtplgt c1 a1 (t2tb1 s) (t2tb132 t))))
  (and (mem11 x (tb2t128 (infix_plmngt c1 a1 (t2tb1 s) (t2tb132 t)))) (mem
  (set1 (tuple2 c1 a1)) (inverse c1 a1 (t2tb129 x))
  (infix_plmngt a1 c1 (t2tb132 t) (t2tb1 s)))))))

;; mem_partial_injection_set
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (x uni))
  (= (mem (set1 (tuple2 a2 b2)) x (infix_gtplgt b2 a2 s t))
  (and (mem (set1 (tuple2 a2 b2)) x (infix_plmngt b2 a2 s t)) (mem
  (set1 (tuple2 b2 a2)) (inverse b2 a2 x) (infix_plmngt a2 b2 t s)))))))

(declare-fun infix_gtmngt (ty ty uni uni) uni)

;; infix >->_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (set1 (tuple2 a2 b2)))
  (infix_gtmngt b2 a2 x x1)))))

;; mem_total_injection_set
  (assert
  (forall ((s (set b)) (t (set d)) (x (set (tuple21 b d))))
  (= (mem33 x (tb2t906 (infix_gtmngt d1 b1 (t2tb12 s) (t2tb690 t))))
  (and (mem33 x (tb2t906 (infix_gtplgt d1 b1 (t2tb12 s) (t2tb690 t)))) (mem33
  x (tb2t906 (infix_mnmngt d1 b1 (t2tb12 s) (t2tb690 t))))))))

;; mem_total_injection_set
  (assert
  (forall ((s (set a)) (t (set c)) (x (set (tuple21 a c))))
  (= (mem11 x (tb2t128 (infix_gtmngt c1 a1 (t2tb1 s) (t2tb132 t))))
  (and (mem11 x (tb2t128 (infix_gtplgt c1 a1 (t2tb1 s) (t2tb132 t)))) (mem11
  x (tb2t128 (infix_mnmngt c1 a1 (t2tb1 s) (t2tb132 t))))))))

;; mem_total_injection_set
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (x uni))
  (= (mem (set1 (tuple2 a2 b2)) x (infix_gtmngt b2 a2 s t))
  (and (mem (set1 (tuple2 a2 b2)) x (infix_gtplgt b2 a2 s t)) (mem
  (set1 (tuple2 a2 b2)) x (infix_mnmngt b2 a2 s t)))))))

(declare-fun infix_plmngtgt (ty ty uni uni) uni)

;; infix +->>_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (set1 (tuple2 a2 b2)))
  (infix_plmngtgt b2 a2 x x1)))))

;; mem_partial_surjection_set
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set (tuple21 (tuple21 a b) (tuple21 c d)))) (x uni))
  (= (mem (set1 (tuple2 a2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)))) x
  (infix_plmngtgt (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) a2 s (t2tb879 t)))
  (and (mem (set1 (tuple2 a2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)))) x
  (infix_plmngt (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) a2 s (t2tb879 t)))
  (infix_eqeq43 (tb2t879 (ran (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) a2 x))
  t))))))

;; mem_partial_surjection_set
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set (set (tuple21 b d)))) (x uni))
  (= (mem (set1 (tuple2 a2 (set1 (tuple2 b1 d1)))) x
  (infix_plmngtgt (set1 (tuple2 b1 d1)) a2 s (t2tb906 t)))
  (and (mem (set1 (tuple2 a2 (set1 (tuple2 b1 d1)))) x
  (infix_plmngt (set1 (tuple2 b1 d1)) a2 s (t2tb906 t))) (infix_eqeq28
  (tb2t906 (ran (set1 (tuple2 b1 d1)) a2 x)) t))))))

;; mem_partial_surjection_set
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set (tuple21 b d))) (x uni))
  (= (mem (set1 (tuple2 a2 (tuple2 b1 d1))) x
  (infix_plmngtgt (tuple2 b1 d1) a2 s (t2tb687 t)))
  (and (mem (set1 (tuple2 a2 (tuple2 b1 d1))) x
  (infix_plmngt (tuple2 b1 d1) a2 s (t2tb687 t))) (infix_eqeq22
  (tb2t687 (ran (tuple2 b1 d1) a2 x)) t))))))

;; mem_partial_surjection_set
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set d)) (x uni))
  (= (mem (set1 (tuple2 a2 d1)) x (infix_plmngtgt d1 a2 s (t2tb690 t)))
  (and (mem (set1 (tuple2 a2 d1)) x (infix_plmngt d1 a2 s (t2tb690 t)))
  (infix_eqeq13 (tb2t690 (ran d1 a2 x)) t))))))

;; mem_partial_surjection_set
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set (set (tuple21 a c)))) (x uni))
  (= (mem (set1 (tuple2 a2 (set1 (tuple2 a1 c1)))) x
  (infix_plmngtgt (set1 (tuple2 a1 c1)) a2 s (t2tb128 t)))
  (and (mem (set1 (tuple2 a2 (set1 (tuple2 a1 c1)))) x
  (infix_plmngt (set1 (tuple2 a1 c1)) a2 s (t2tb128 t))) (infix_eqeq19
  (tb2t128 (ran (set1 (tuple2 a1 c1)) a2 x)) t))))))

;; mem_partial_surjection_set
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set (tuple21 a c))) (x uni))
  (= (mem (set1 (tuple2 a2 (tuple2 a1 c1))) x
  (infix_plmngtgt (tuple2 a1 c1) a2 s (t2tb129 t)))
  (and (mem (set1 (tuple2 a2 (tuple2 a1 c1))) x
  (infix_plmngt (tuple2 a1 c1) a2 s (t2tb129 t))) (infix_eqeq9
  (tb2t129 (ran (tuple2 a1 c1) a2 x)) t))))))

;; mem_partial_surjection_set
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set c)) (x uni))
  (= (mem (set1 (tuple2 a2 c1)) x (infix_plmngtgt c1 a2 s (t2tb132 t)))
  (and (mem (set1 (tuple2 a2 c1)) x (infix_plmngt c1 a2 s (t2tb132 t)))
  (infix_eqeq7 (tb2t132 (ran c1 a2 x)) t))))))

;; mem_partial_surjection_set
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set (tuple21 a b))) (x uni))
  (= (mem (set1 (tuple2 a2 (tuple2 a1 b1))) x
  (infix_plmngtgt (tuple2 a1 b1) a2 s (t2tb11 t)))
  (and (mem (set1 (tuple2 a2 (tuple2 a1 b1))) x
  (infix_plmngt (tuple2 a1 b1) a2 s (t2tb11 t))) (infix_eqeq4
  (tb2t11 (ran (tuple2 a1 b1) a2 x)) t))))))

;; mem_partial_surjection_set
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set b)) (x uni))
  (= (mem (set1 (tuple2 a2 b1)) x (infix_plmngtgt b1 a2 s (t2tb12 t)))
  (and (mem (set1 (tuple2 a2 b1)) x (infix_plmngt b1 a2 s (t2tb12 t)))
  (infix_eqeq3 (tb2t12 (ran b1 a2 x)) t))))))

;; mem_partial_surjection_set
  (assert
  (forall ((a2 ty))
  (forall ((s uni) (t (set a)) (x uni))
  (= (mem (set1 (tuple2 a2 a1)) x (infix_plmngtgt a1 a2 s (t2tb1 t)))
  (and (mem (set1 (tuple2 a2 a1)) x (infix_plmngt a1 a2 s (t2tb1 t)))
  (infix_eqeq1 (tb2t1 (ran a1 a2 x)) t))))))

;; mem_partial_surjection_set
  (assert
  (forall ((s (set b)) (t (set d)) (x (set (tuple21 b d))))
  (= (mem33 x (tb2t906 (infix_plmngtgt d1 b1 (t2tb12 s) (t2tb690 t))))
  (and (mem33 x (tb2t906 (infix_plmngt d1 b1 (t2tb12 s) (t2tb690 t))))
  (infix_eqeq13 (tb2t690 (ran d1 b1 (t2tb687 x))) t)))))

;; mem_partial_surjection_set
  (assert
  (forall ((s (set a)) (t (set c)) (x (set (tuple21 a c))))
  (= (mem11 x (tb2t128 (infix_plmngtgt c1 a1 (t2tb1 s) (t2tb132 t))))
  (and (mem11 x (tb2t128 (infix_plmngt c1 a1 (t2tb1 s) (t2tb132 t))))
  (infix_eqeq7 (tb2t132 (ran c1 a1 (t2tb129 x))) t)))))

;; mem_partial_surjection_set
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (x uni))
  (= (mem (set1 (tuple2 a2 b2)) x (infix_plmngtgt b2 a2 s t))
  (and (mem (set1 (tuple2 a2 b2)) x (infix_plmngt b2 a2 s t)) (infix_eqeq b2
  (ran b2 a2 x) t))))))

(declare-fun infix_mnmngtgt (ty ty uni uni) uni)

;; infix -->>_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (set1 (tuple2 a2 b2)))
  (infix_mnmngtgt b2 a2 x x1)))))

;; mem_total_surjection_set
  (assert
  (forall ((s (set b)) (t (set d)) (x (set (tuple21 b d))))
  (= (mem33 x (tb2t906 (infix_mnmngtgt d1 b1 (t2tb12 s) (t2tb690 t))))
  (and (mem33 x (tb2t906 (infix_plmngtgt d1 b1 (t2tb12 s) (t2tb690 t))))
  (mem33 x (tb2t906 (infix_mnmngt d1 b1 (t2tb12 s) (t2tb690 t))))))))

;; mem_total_surjection_set
  (assert
  (forall ((s (set a)) (t (set c)) (x (set (tuple21 a c))))
  (= (mem11 x (tb2t128 (infix_mnmngtgt c1 a1 (t2tb1 s) (t2tb132 t))))
  (and (mem11 x (tb2t128 (infix_plmngtgt c1 a1 (t2tb1 s) (t2tb132 t))))
  (mem11 x (tb2t128 (infix_mnmngt c1 a1 (t2tb1 s) (t2tb132 t))))))))

;; mem_total_surjection_set
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (x uni))
  (= (mem (set1 (tuple2 a2 b2)) x (infix_mnmngtgt b2 a2 s t))
  (and (mem (set1 (tuple2 a2 b2)) x (infix_plmngtgt b2 a2 s t)) (mem
  (set1 (tuple2 a2 b2)) x (infix_mnmngt b2 a2 s t)))))))

(declare-fun infix_gtplgtgt (ty ty uni uni) uni)

;; infix >+>>_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (set1 (tuple2 a2 b2)))
  (infix_gtplgtgt b2 a2 x x1)))))

;; mem_partial_bijection_set
  (assert
  (forall ((s (set b)) (t (set d)) (x (set (tuple21 b d))))
  (= (mem33 x (tb2t906 (infix_gtplgtgt d1 b1 (t2tb12 s) (t2tb690 t))))
  (and (mem33 x (tb2t906 (infix_gtplgt d1 b1 (t2tb12 s) (t2tb690 t)))) (mem33
  x (tb2t906 (infix_plmngtgt d1 b1 (t2tb12 s) (t2tb690 t))))))))

;; mem_partial_bijection_set
  (assert
  (forall ((s (set a)) (t (set c)) (x (set (tuple21 a c))))
  (= (mem11 x (tb2t128 (infix_gtplgtgt c1 a1 (t2tb1 s) (t2tb132 t))))
  (and (mem11 x (tb2t128 (infix_gtplgt c1 a1 (t2tb1 s) (t2tb132 t)))) (mem11
  x (tb2t128 (infix_plmngtgt c1 a1 (t2tb1 s) (t2tb132 t))))))))

;; mem_partial_bijection_set
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (x uni))
  (= (mem (set1 (tuple2 a2 b2)) x (infix_gtplgtgt b2 a2 s t))
  (and (mem (set1 (tuple2 a2 b2)) x (infix_gtplgt b2 a2 s t)) (mem
  (set1 (tuple2 a2 b2)) x (infix_plmngtgt b2 a2 s t)))))))

(declare-fun infix_gtmngtgt (ty ty uni uni) uni)

;; infix >->>_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort (set1 (set1 (tuple2 a2 b2)))
  (infix_gtmngtgt b2 a2 x x1)))))

;; mem_total_bijection_set
  (assert
  (forall ((s (set b)) (t (set d)) (x (set (tuple21 b d))))
  (= (mem33 x (tb2t906 (infix_gtmngtgt d1 b1 (t2tb12 s) (t2tb690 t))))
  (and (mem33 x (tb2t906 (infix_gtmngt d1 b1 (t2tb12 s) (t2tb690 t)))) (mem33
  x (tb2t906 (infix_mnmngtgt d1 b1 (t2tb12 s) (t2tb690 t))))))))

;; mem_total_bijection_set
  (assert
  (forall ((s (set a)) (t (set c)) (x (set (tuple21 a c))))
  (= (mem11 x (tb2t128 (infix_gtmngtgt c1 a1 (t2tb1 s) (t2tb132 t))))
  (and (mem11 x (tb2t128 (infix_gtmngt c1 a1 (t2tb1 s) (t2tb132 t)))) (mem11
  x (tb2t128 (infix_mnmngtgt c1 a1 (t2tb1 s) (t2tb132 t))))))))

;; mem_total_bijection_set
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((s uni) (t uni) (x uni))
  (= (mem (set1 (tuple2 a2 b2)) x (infix_gtmngtgt b2 a2 s t))
  (and (mem (set1 (tuple2 a2 b2)) x (infix_gtmngt b2 a2 s t)) (mem
  (set1 (tuple2 a2 b2)) x (infix_mnmngtgt b2 a2 s t)))))))

(declare-fun apply (ty ty uni uni) uni)

;; apply_sort
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((x uni) (x1 uni)) (sort b2 (apply b2 a2 x x1)))))

;; apply_def0
  (assert
  (forall ((b2 ty))
  (forall ((f2 uni) (s (set (tuple21 (tuple21 a b) (tuple21 c d)))) (t uni)
  (a2 (tuple21 (tuple21 a b) (tuple21 c d))))
  (=>
  (and (mem (set1 (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) b2)) f2
  (infix_plmngt b2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) (t2tb879 s) t))
  (mem50 a2 (tb2t879 (dom b2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) f2))))
  (mem (tuple2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) b2)
  (Tuple2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) b2 (t2tb880 a2)
  (apply b2 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1)) f2 (t2tb880 a2))) f2)))))

;; apply_def0
  (assert
  (forall ((b2 ty))
  (forall ((f2 uni) (s (set (set (tuple21 b d)))) (t uni) (a2 (set (tuple21 b
  d))))
  (=>
  (and (mem (set1 (tuple2 (set1 (tuple2 b1 d1)) b2)) f2
  (infix_plmngt b2 (set1 (tuple2 b1 d1)) (t2tb906 s) t)) (mem33 a2
  (tb2t906 (dom b2 (set1 (tuple2 b1 d1)) f2)))) (mem
  (tuple2 (set1 (tuple2 b1 d1)) b2)
  (Tuple2 (set1 (tuple2 b1 d1)) b2 (t2tb687 a2)
  (apply b2 (set1 (tuple2 b1 d1)) f2 (t2tb687 a2))) f2)))))

;; apply_def0
  (assert
  (forall ((b2 ty))
  (forall ((f2 uni) (s (set (tuple21 b d))) (t uni) (a2 (tuple21 b d)))
  (=>
  (and (mem (set1 (tuple2 (tuple2 b1 d1) b2)) f2
  (infix_plmngt b2 (tuple2 b1 d1) (t2tb687 s) t)) (mem23 a2
  (tb2t687 (dom b2 (tuple2 b1 d1) f2)))) (mem (tuple2 (tuple2 b1 d1) b2)
  (Tuple2 (tuple2 b1 d1) b2 (t2tb692 a2)
  (apply b2 (tuple2 b1 d1) f2 (t2tb692 a2))) f2)))))

;; apply_def0
  (assert
  (forall ((b2 ty))
  (forall ((f2 uni) (s (set d)) (t uni) (a2 d))
  (=>
  (and (mem (set1 (tuple2 d1 b2)) f2 (infix_plmngt b2 d1 (t2tb690 s) t))
  (mem20 a2 (tb2t690 (dom b2 d1 f2)))) (mem (tuple2 d1 b2)
  (Tuple2 d1 b2 (t2tb694 a2) (apply b2 d1 f2 (t2tb694 a2))) f2)))))

;; apply_def0
  (assert
  (forall ((b2 ty))
  (forall ((f2 uni) (s (set (set (tuple21 a c)))) (t uni) (a2 (set (tuple21 a
  c))))
  (=>
  (and (mem (set1 (tuple2 (set1 (tuple2 a1 c1)) b2)) f2
  (infix_plmngt b2 (set1 (tuple2 a1 c1)) (t2tb128 s) t)) (mem11 a2
  (tb2t128 (dom b2 (set1 (tuple2 a1 c1)) f2)))) (mem
  (tuple2 (set1 (tuple2 a1 c1)) b2)
  (Tuple2 (set1 (tuple2 a1 c1)) b2 (t2tb129 a2)
  (apply b2 (set1 (tuple2 a1 c1)) f2 (t2tb129 a2))) f2)))))

;; apply_def0
  (assert
  (forall ((b2 ty))
  (forall ((f2 uni) (s (set (tuple21 a c))) (t uni) (a2 (tuple21 a c)))
  (=>
  (and (mem (set1 (tuple2 (tuple2 a1 c1) b2)) f2
  (infix_plmngt b2 (tuple2 a1 c1) (t2tb129 s) t)) (mem10 a2
  (tb2t129 (dom b2 (tuple2 a1 c1) f2)))) (mem (tuple2 (tuple2 a1 c1) b2)
  (Tuple2 (tuple2 a1 c1) b2 (t2tb133 a2)
  (apply b2 (tuple2 a1 c1) f2 (t2tb133 a2))) f2)))))

;; apply_def0
  (assert
  (forall ((b2 ty))
  (forall ((f2 uni) (s (set c)) (t uni) (a2 c))
  (=>
  (and (mem (set1 (tuple2 c1 b2)) f2 (infix_plmngt b2 c1 (t2tb132 s) t))
  (mem7 a2 (tb2t132 (dom b2 c1 f2)))) (mem (tuple2 c1 b2)
  (Tuple2 c1 b2 (t2tb135 a2) (apply b2 c1 f2 (t2tb135 a2))) f2)))))

;; apply_def0
  (assert
  (forall ((f2 (set (tuple21 (tuple21 a b) (tuple21 c d))))
  (s (set (tuple21 a b))) (t (set (tuple21 c d))) (a2 (tuple21 a b)))
  (=>
  (and (mem (set1 (tuple2 (tuple2 a1 b1) (tuple2 c1 d1))) (t2tb879 f2)
  (infix_plmngt (tuple2 c1 d1) (tuple2 a1 b1) (t2tb11 s) (t2tb689 t))) (mem3
  a2 (tb2t11 (dom (tuple2 c1 d1) (tuple2 a1 b1) (t2tb879 f2))))) (mem50
  (tb2t880
  (Tuple2 (tuple2 a1 b1) (tuple2 c1 d1) (t2tb13 a2)
  (apply (tuple2 c1 d1) (tuple2 a1 b1) (t2tb879 f2) (t2tb13 a2)))) f2))))

;; apply_def0
  (assert
  (forall ((b2 ty))
  (forall ((f2 uni) (s (set (tuple21 a b))) (t uni) (a2 (tuple21 a b)))
  (=>
  (and (mem (set1 (tuple2 (tuple2 a1 b1) b2)) f2
  (infix_plmngt b2 (tuple2 a1 b1) (t2tb11 s) t)) (mem3 a2
  (tb2t11 (dom b2 (tuple2 a1 b1) f2)))) (mem (tuple2 (tuple2 a1 b1) b2)
  (Tuple2 (tuple2 a1 b1) b2 (t2tb13 a2)
  (apply b2 (tuple2 a1 b1) f2 (t2tb13 a2))) f2)))))

;; apply_def0
  (assert
  (forall ((f2 (set (tuple21 b d))) (s (set b)) (t (set d)) (a2 b))
  (=>
  (and (mem33 f2 (tb2t906 (infix_plmngt d1 b1 (t2tb12 s) (t2tb690 t)))) (mem2
  a2 (tb2t12 (dom d1 b1 (t2tb687 f2))))) (mem23
  (tb2t692 (Tuple2 b1 d1 (t2tb14 a2) (apply d1 b1 (t2tb687 f2) (t2tb14 a2))))
  f2))))

;; apply_def0
  (assert
  (forall ((b2 ty))
  (forall ((f2 uni) (s (set b)) (t uni) (a2 b))
  (=>
  (and (mem (set1 (tuple2 b1 b2)) f2 (infix_plmngt b2 b1 (t2tb12 s) t)) (mem2
  a2 (tb2t12 (dom b2 b1 f2)))) (mem (tuple2 b1 b2)
  (Tuple2 b1 b2 (t2tb14 a2) (apply b2 b1 f2 (t2tb14 a2))) f2)))))

;; apply_def0
  (assert
  (forall ((f2 (set (tuple21 a c))) (s (set a)) (t (set c)) (a2 a))
  (=>
  (and (mem11 f2 (tb2t128 (infix_plmngt c1 a1 (t2tb1 s) (t2tb132 t)))) (mem1
  a2 (tb2t1 (dom c1 a1 (t2tb129 f2))))) (mem10
  (tb2t133 (Tuple2 a1 c1 (t2tb2 a2) (apply c1 a1 (t2tb129 f2) (t2tb2 a2))))
  f2))))

;; apply_def0
  (assert
  (forall ((f2 (set (tuple21 a b))) (s (set a)) (t (set b)) (a2 a))
  (=>
  (and (mem (set1 (tuple2 a1 b1)) (t2tb11 f2)
  (infix_plmngt b1 a1 (t2tb1 s) (t2tb12 t))) (mem1 a2
  (tb2t1 (dom b1 a1 (t2tb11 f2))))) (mem3
  (tb2t13 (Tuple2 a1 b1 (t2tb2 a2) (apply b1 a1 (t2tb11 f2) (t2tb2 a2))))
  f2))))

;; apply_def0
  (assert
  (forall ((b2 ty))
  (forall ((f2 uni) (s (set a)) (t uni) (a2 a))
  (=>
  (and (mem (set1 (tuple2 a1 b2)) f2 (infix_plmngt b2 a1 (t2tb1 s) t)) (mem1
  a2 (tb2t1 (dom b2 a1 f2)))) (mem (tuple2 a1 b2)
  (Tuple2 a1 b2 (t2tb2 a2) (apply b2 a1 f2 (t2tb2 a2))) f2)))))

;; apply_def0
  (assert
  (forall ((a2 ty) (b2 ty))
  (forall ((f2 uni) (s uni) (t uni) (a3 uni))
  (=>
  (and (mem (set1 (tuple2 a2 b2)) f2 (infix_plmngt b2 a2 s t)) (mem a2 a3
  (dom b2 a2 f2))) (mem (tuple2 a2 b2) (Tuple2 a2 b2 a3 (apply b2 a2 f2 a3))
  f2)))))

(assert
;; equal_restriction_11
 ;; File "lemmes_bbook.why", line 1943, characters 7-27
  (not
  (forall ((s (set a)) (u (set a)) (t (set b)) (v (set b)) (w (set c))
  (z (set d)) (p (set (tuple21 a c))) (q (set (tuple21 b d))))
  (=>
  (and (subset2 u s)
  (and (subset5 v t)
  (and (mem11 p (relation3 s w)) (mem33 q (relation9 t z))))) (infix_eqeq43
  (domain_restriction8 (times2 u v) (parallel_product6 p q))
  (parallel_product6 (domain_restriction4 u p) (domain_restriction7 v q)))))))
(check-sat)
